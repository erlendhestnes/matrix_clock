
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000005d2  00802000  00002cc6  00002d5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000196  008025d2  008025d2  0000332c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000332c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000868  00000000  00000000  00003388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001e731  00000000  00000000  00003bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000033f5  00000000  00000000  00022321  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000f0c0  00000000  00000000  00025716  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000027b4  00000000  00000000  000347d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003a3b  00000000  00000000  00036f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002da0c  00000000  00000000  0003a9c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004490  00000000  00000000  000683d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c3       	rjmp	.+1782   	; 0x6f8 <__ctors_end>
       2:	00 00       	nop
       4:	98 c3       	rjmp	.+1840   	; 0x736 <__bad_interrupt>
       6:	00 00       	nop
       8:	96 c3       	rjmp	.+1836   	; 0x736 <__bad_interrupt>
       a:	00 00       	nop
       c:	94 c3       	rjmp	.+1832   	; 0x736 <__bad_interrupt>
       e:	00 00       	nop
      10:	92 c3       	rjmp	.+1828   	; 0x736 <__bad_interrupt>
      12:	00 00       	nop
      14:	90 c3       	rjmp	.+1824   	; 0x736 <__bad_interrupt>
      16:	00 00       	nop
      18:	8e c3       	rjmp	.+1820   	; 0x736 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8c c3       	rjmp	.+1816   	; 0x736 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8a c3       	rjmp	.+1812   	; 0x736 <__bad_interrupt>
      22:	00 00       	nop
      24:	88 c3       	rjmp	.+1808   	; 0x736 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__vector_10>
      2c:	84 c3       	rjmp	.+1800   	; 0x736 <__bad_interrupt>
      2e:	00 00       	nop
      30:	82 c3       	rjmp	.+1796   	; 0x736 <__bad_interrupt>
      32:	00 00       	nop
      34:	80 c3       	rjmp	.+1792   	; 0x736 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 4d 10 	jmp	0x209a	; 0x209a <__vector_14>
      3c:	7c c3       	rjmp	.+1784   	; 0x736 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7a c3       	rjmp	.+1780   	; 0x736 <__bad_interrupt>
      42:	00 00       	nop
      44:	78 c3       	rjmp	.+1776   	; 0x736 <__bad_interrupt>
      46:	00 00       	nop
      48:	76 c3       	rjmp	.+1772   	; 0x736 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	74 c3       	rjmp	.+1768   	; 0x736 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <__vector_20>
      54:	70 c3       	rjmp	.+1760   	; 0x736 <__bad_interrupt>
      56:	00 00       	nop
      58:	6e c3       	rjmp	.+1756   	; 0x736 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6c c3       	rjmp	.+1752   	; 0x736 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6a c3       	rjmp	.+1748   	; 0x736 <__bad_interrupt>
      62:	00 00       	nop
      64:	68 c3       	rjmp	.+1744   	; 0x736 <__bad_interrupt>
      66:	00 00       	nop
      68:	66 c3       	rjmp	.+1740   	; 0x736 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	64 c3       	rjmp	.+1736   	; 0x736 <__bad_interrupt>
      6e:	00 00       	nop
      70:	62 c3       	rjmp	.+1732   	; 0x736 <__bad_interrupt>
      72:	00 00       	nop
      74:	60 c3       	rjmp	.+1728   	; 0x736 <__bad_interrupt>
      76:	00 00       	nop
      78:	5e c3       	rjmp	.+1724   	; 0x736 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5c c3       	rjmp	.+1720   	; 0x736 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5a c3       	rjmp	.+1716   	; 0x736 <__bad_interrupt>
      82:	00 00       	nop
      84:	58 c3       	rjmp	.+1712   	; 0x736 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 05 0c 	jmp	0x180a	; 0x180a <__vector_34>
      8c:	54 c3       	rjmp	.+1704   	; 0x736 <__bad_interrupt>
      8e:	00 00       	nop
      90:	52 c3       	rjmp	.+1700   	; 0x736 <__bad_interrupt>
      92:	00 00       	nop
      94:	50 c3       	rjmp	.+1696   	; 0x736 <__bad_interrupt>
      96:	00 00       	nop
      98:	4e c3       	rjmp	.+1692   	; 0x736 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4c c3       	rjmp	.+1688   	; 0x736 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4a c3       	rjmp	.+1684   	; 0x736 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	48 c3       	rjmp	.+1680   	; 0x736 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	46 c3       	rjmp	.+1676   	; 0x736 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	44 c3       	rjmp	.+1672   	; 0x736 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	42 c3       	rjmp	.+1668   	; 0x736 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	40 c3       	rjmp	.+1664   	; 0x736 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3e c3       	rjmp	.+1660   	; 0x736 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3c c3       	rjmp	.+1656   	; 0x736 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3a c3       	rjmp	.+1652   	; 0x736 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	38 c3       	rjmp	.+1648   	; 0x736 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	36 c3       	rjmp	.+1644   	; 0x736 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	34 c3       	rjmp	.+1640   	; 0x736 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	32 c3       	rjmp	.+1636   	; 0x736 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	30 c3       	rjmp	.+1632   	; 0x736 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2e c3       	rjmp	.+1628   	; 0x736 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2c c3       	rjmp	.+1624   	; 0x736 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2a c3       	rjmp	.+1620   	; 0x736 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	28 c3       	rjmp	.+1616   	; 0x736 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	26 c3       	rjmp	.+1612   	; 0x736 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	24 c3       	rjmp	.+1608   	; 0x736 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	22 c3       	rjmp	.+1604   	; 0x736 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	20 c3       	rjmp	.+1600   	; 0x736 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	1e c3       	rjmp	.+1596   	; 0x736 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	1c c3       	rjmp	.+1592   	; 0x736 <__bad_interrupt>
      fe:	00 00       	nop
     100:	1a c3       	rjmp	.+1588   	; 0x736 <__bad_interrupt>
     102:	00 00       	nop
     104:	18 c3       	rjmp	.+1584   	; 0x736 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__vector_66>
     10c:	14 c3       	rjmp	.+1576   	; 0x736 <__bad_interrupt>
     10e:	00 00       	nop
     110:	12 c3       	rjmp	.+1572   	; 0x736 <__bad_interrupt>
     112:	00 00       	nop
     114:	10 c3       	rjmp	.+1568   	; 0x736 <__bad_interrupt>
     116:	00 00       	nop
     118:	0e c3       	rjmp	.+1564   	; 0x736 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c c3       	rjmp	.+1560   	; 0x736 <__bad_interrupt>
     11e:	00 00       	nop
     120:	0a c3       	rjmp	.+1556   	; 0x736 <__bad_interrupt>
     122:	00 00       	nop
     124:	08 c3       	rjmp	.+1552   	; 0x736 <__bad_interrupt>
     126:	00 00       	nop
     128:	06 c3       	rjmp	.+1548   	; 0x736 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	04 c3       	rjmp	.+1544   	; 0x736 <__bad_interrupt>
     12e:	00 00       	nop
     130:	02 c3       	rjmp	.+1540   	; 0x736 <__bad_interrupt>
     132:	00 00       	nop
     134:	00 c3       	rjmp	.+1536   	; 0x736 <__bad_interrupt>
     136:	00 00       	nop
     138:	fe c2       	rjmp	.+1532   	; 0x736 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	fc c2       	rjmp	.+1528   	; 0x736 <__bad_interrupt>
     13e:	00 00       	nop
     140:	fa c2       	rjmp	.+1524   	; 0x736 <__bad_interrupt>
     142:	00 00       	nop
     144:	f8 c2       	rjmp	.+1520   	; 0x736 <__bad_interrupt>
     146:	00 00       	nop
     148:	f6 c2       	rjmp	.+1516   	; 0x736 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	f4 c2       	rjmp	.+1512   	; 0x736 <__bad_interrupt>
     14e:	00 00       	nop
     150:	f2 c2       	rjmp	.+1508   	; 0x736 <__bad_interrupt>
     152:	00 00       	nop
     154:	f0 c2       	rjmp	.+1504   	; 0x736 <__bad_interrupt>
     156:	00 00       	nop
     158:	ee c2       	rjmp	.+1500   	; 0x736 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	ec c2       	rjmp	.+1496   	; 0x736 <__bad_interrupt>
     15e:	00 00       	nop
     160:	ff c2       	rjmp	.+1534   	; 0x760 <__vector_88>
     162:	00 00       	nop
     164:	e8 c2       	rjmp	.+1488   	; 0x736 <__bad_interrupt>
     166:	00 00       	nop
     168:	e6 c2       	rjmp	.+1484   	; 0x736 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	e4 c2       	rjmp	.+1480   	; 0x736 <__bad_interrupt>
     16e:	00 00       	nop
     170:	e2 c2       	rjmp	.+1476   	; 0x736 <__bad_interrupt>
     172:	00 00       	nop
     174:	e0 c2       	rjmp	.+1472   	; 0x736 <__bad_interrupt>
     176:	00 00       	nop
     178:	de c2       	rjmp	.+1468   	; 0x736 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	dc c2       	rjmp	.+1464   	; 0x736 <__bad_interrupt>
     17e:	00 00       	nop
     180:	da c2       	rjmp	.+1460   	; 0x736 <__bad_interrupt>
     182:	00 00       	nop
     184:	d8 c2       	rjmp	.+1456   	; 0x736 <__bad_interrupt>
     186:	00 00       	nop
     188:	d6 c2       	rjmp	.+1452   	; 0x736 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d4 c2       	rjmp	.+1448   	; 0x736 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d2 c2       	rjmp	.+1444   	; 0x736 <__bad_interrupt>
     192:	00 00       	nop
     194:	d0 c2       	rjmp	.+1440   	; 0x736 <__bad_interrupt>
     196:	00 00       	nop
     198:	ce c2       	rjmp	.+1436   	; 0x736 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	cc c2       	rjmp	.+1432   	; 0x736 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ca c2       	rjmp	.+1428   	; 0x736 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	c8 c2       	rjmp	.+1424   	; 0x736 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	c6 c2       	rjmp	.+1420   	; 0x736 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c4 c2       	rjmp	.+1416   	; 0x736 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	c2 c2       	rjmp	.+1412   	; 0x736 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c0 c2       	rjmp	.+1408   	; 0x736 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	be c2       	rjmp	.+1404   	; 0x736 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	bc c2       	rjmp	.+1400   	; 0x736 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	ba c2       	rjmp	.+1396   	; 0x736 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	b8 c2       	rjmp	.+1392   	; 0x736 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	b6 c2       	rjmp	.+1388   	; 0x736 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b4 c2       	rjmp	.+1384   	; 0x736 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b2 c2       	rjmp	.+1380   	; 0x736 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b0 c2       	rjmp	.+1376   	; 0x736 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	ae c2       	rjmp	.+1372   	; 0x736 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	ac c2       	rjmp	.+1368   	; 0x736 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	aa c2       	rjmp	.+1364   	; 0x736 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	a8 c2       	rjmp	.+1360   	; 0x736 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	a6 c2       	rjmp	.+1356   	; 0x736 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a4 c2       	rjmp	.+1352   	; 0x736 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a2 c2       	rjmp	.+1348   	; 0x736 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a0 c2       	rjmp	.+1344   	; 0x736 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	9e c2       	rjmp	.+1340   	; 0x736 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 3e       	cpi	r16, 0xE0	; 224
     202:	5b 4f       	sbci	r21, 0xFB	; 251
     204:	5b 3e       	cpi	r21, 0xEB	; 235
     206:	3e 6b       	ori	r19, 0xBE	; 190
     208:	4f 6b       	ori	r20, 0xBF	; 191
     20a:	3e 1c       	adc	r3, r14
     20c:	3e 7c       	andi	r19, 0xCE	; 206
     20e:	3e 1c       	adc	r3, r14
     210:	18 3c       	cpi	r17, 0xC8	; 200
     212:	7e 3c       	cpi	r23, 0xCE	; 206
     214:	18 1c       	adc	r1, r8
     216:	57 7d       	andi	r21, 0xD7	; 215
     218:	57 1c       	adc	r5, r7
     21a:	1c 5e       	subi	r17, 0xEC	; 236
     21c:	7f 5e       	subi	r23, 0xEF	; 239
     21e:	1c 00       	.word	0x001c	; ????
     220:	18 3c       	cpi	r17, 0xC8	; 200
     222:	18 00       	.word	0x0018	; ????
     224:	ff e7       	ldi	r31, 0x7F	; 127
     226:	c3 e7       	ldi	r28, 0x73	; 115
     228:	ff 00       	.word	0x00ff	; ????
     22a:	18 24       	eor	r1, r8
     22c:	18 00       	.word	0x0018	; ????
     22e:	ff e7       	ldi	r31, 0x7F	; 127
     230:	db e7       	ldi	r29, 0x7B	; 123
     232:	ff 30       	cpi	r31, 0x0F	; 15
     234:	48 3a       	cpi	r20, 0xA8	; 168
     236:	06 0e       	add	r0, r22
     238:	26 29       	or	r18, r6
     23a:	79 29       	or	r23, r9
     23c:	26 40       	sbci	r18, 0x06	; 6
     23e:	7f 05       	cpc	r23, r15
     240:	05 07       	cpc	r16, r21
     242:	40 7f       	andi	r20, 0xF0	; 240
     244:	05 25       	eor	r16, r5
     246:	3f 5a       	subi	r19, 0xAF	; 175
     248:	3c e7       	ldi	r19, 0x7C	; 124
     24a:	3c 5a       	subi	r19, 0xAC	; 172
     24c:	7f 3e       	cpi	r23, 0xEF	; 239
     24e:	1c 1c       	adc	r1, r12
     250:	08 08       	sbc	r0, r8
     252:	1c 1c       	adc	r1, r12
     254:	3e 7f       	andi	r19, 0xFE	; 254
     256:	14 22       	and	r1, r20
     258:	7f 22       	and	r7, r31
     25a:	14 5f       	subi	r17, 0xF4	; 244
     25c:	5f 00       	.word	0x005f	; ????
     25e:	5f 5f       	subi	r21, 0xFF	; 255
     260:	06 09       	sbc	r16, r6
     262:	7f 01       	movw	r14, r30
     264:	7f 00       	.word	0x007f	; ????
     266:	66 89       	ldd	r22, Z+22	; 0x16
     268:	95 6a       	ori	r25, 0xA5	; 165
     26a:	60 60       	ori	r22, 0x00	; 0
     26c:	60 60       	ori	r22, 0x00	; 0
     26e:	60 94       	com	r6
     270:	a2 ff       	sbrs	r26, 2
     272:	a2 94       	swap	r10
     274:	08 04       	cpc	r0, r8
     276:	7e 04       	cpc	r7, r14
     278:	08 10       	cpse	r0, r8
     27a:	20 7e       	andi	r18, 0xE0	; 224
     27c:	20 10       	cpse	r2, r0
     27e:	08 08       	sbc	r0, r8
     280:	2a 1c       	adc	r2, r10
     282:	08 08       	sbc	r0, r8
     284:	1c 2a       	or	r1, r28
     286:	08 08       	sbc	r0, r8
     288:	1e 10       	cpse	r1, r14
     28a:	10 10       	cpse	r1, r0
     28c:	10 0c       	add	r1, r0
     28e:	1e 0c       	add	r1, r14
     290:	1e 0c       	add	r1, r14
     292:	30 38       	cpi	r19, 0x80	; 128
     294:	3e 38       	cpi	r19, 0x8E	; 142
     296:	30 06       	cpc	r3, r16
     298:	0e 3e       	cpi	r16, 0xEE	; 238
     29a:	0e 06       	cpc	r0, r30
     29c:	00 00       	nop
     29e:	00 00       	nop
     2a0:	00 00       	nop
     2a2:	00 5f       	subi	r16, 0xF0	; 240
     2a4:	00 00       	nop
     2a6:	00 07       	cpc	r16, r16
     2a8:	00 07       	cpc	r16, r16
     2aa:	00 14       	cp	r0, r0
     2ac:	7f 14       	cp	r7, r15
     2ae:	7f 14       	cp	r7, r15
     2b0:	24 2a       	or	r2, r20
     2b2:	7f 2a       	or	r7, r31
     2b4:	12 23       	and	r17, r18
     2b6:	13 08       	sbc	r1, r3
     2b8:	64 62       	ori	r22, 0x24	; 36
     2ba:	36 49       	sbci	r19, 0x96	; 150
     2bc:	56 20       	and	r5, r6
     2be:	50 00       	.word	0x0050	; ????
     2c0:	08 07       	cpc	r16, r24
     2c2:	03 00       	.word	0x0003	; ????
     2c4:	00 1c       	adc	r0, r0
     2c6:	22 41       	sbci	r18, 0x12	; 18
     2c8:	00 00       	nop
     2ca:	41 22       	and	r4, r17
     2cc:	1c 00       	.word	0x001c	; ????
     2ce:	2a 1c       	adc	r2, r10
     2d0:	7f 1c       	adc	r7, r15
     2d2:	2a 08       	sbc	r2, r10
     2d4:	08 3e       	cpi	r16, 0xE8	; 232
     2d6:	08 08       	sbc	r0, r8
     2d8:	00 80       	ld	r0, Z
     2da:	70 30       	cpi	r23, 0x00	; 0
     2dc:	00 08       	sbc	r0, r0
     2de:	08 08       	sbc	r0, r8
     2e0:	08 08       	sbc	r0, r8
     2e2:	00 00       	nop
     2e4:	60 60       	ori	r22, 0x00	; 0
     2e6:	00 20       	and	r0, r0
     2e8:	10 08       	sbc	r1, r0
     2ea:	04 02       	muls	r16, r20
     2ec:	3e 51       	subi	r19, 0x1E	; 30
     2ee:	49 45       	sbci	r20, 0x59	; 89
     2f0:	3e 00       	.word	0x003e	; ????
     2f2:	42 7f       	andi	r20, 0xF2	; 242
     2f4:	40 00       	.word	0x0040	; ????
     2f6:	72 49       	sbci	r23, 0x92	; 146
     2f8:	49 49       	sbci	r20, 0x99	; 153
     2fa:	46 21       	and	r20, r6
     2fc:	41 49       	sbci	r20, 0x91	; 145
     2fe:	4d 33       	cpi	r20, 0x3D	; 61
     300:	18 14       	cp	r1, r8
     302:	12 7f       	andi	r17, 0xF2	; 242
     304:	10 27       	eor	r17, r16
     306:	45 45       	sbci	r20, 0x55	; 85
     308:	45 39       	cpi	r20, 0x95	; 149
     30a:	3c 4a       	sbci	r19, 0xAC	; 172
     30c:	49 49       	sbci	r20, 0x99	; 153
     30e:	31 41       	sbci	r19, 0x11	; 17
     310:	21 11       	cpse	r18, r1
     312:	09 07       	cpc	r16, r25
     314:	36 49       	sbci	r19, 0x96	; 150
     316:	49 49       	sbci	r20, 0x99	; 153
     318:	36 46       	sbci	r19, 0x66	; 102
     31a:	49 49       	sbci	r20, 0x99	; 153
     31c:	29 1e       	adc	r2, r25
     31e:	00 00       	nop
     320:	14 00       	.word	0x0014	; ????
     322:	00 00       	nop
     324:	40 34       	cpi	r20, 0x40	; 64
     326:	00 00       	nop
     328:	00 08       	sbc	r0, r0
     32a:	14 22       	and	r1, r20
     32c:	41 14       	cp	r4, r1
     32e:	14 14       	cp	r1, r4
     330:	14 14       	cp	r1, r4
     332:	00 41       	sbci	r16, 0x10	; 16
     334:	22 14       	cp	r2, r2
     336:	08 02       	muls	r16, r24
     338:	01 59       	subi	r16, 0x91	; 145
     33a:	09 06       	cpc	r0, r25
     33c:	3e 41       	sbci	r19, 0x1E	; 30
     33e:	5d 59       	subi	r21, 0x9D	; 157
     340:	4e 7c       	andi	r20, 0xCE	; 206
     342:	12 11       	cpse	r17, r2
     344:	12 7c       	andi	r17, 0xC2	; 194
     346:	7f 49       	sbci	r23, 0x9F	; 159
     348:	49 49       	sbci	r20, 0x99	; 153
     34a:	36 3e       	cpi	r19, 0xE6	; 230
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	41 22       	and	r4, r17
     350:	7f 41       	sbci	r23, 0x1F	; 31
     352:	41 41       	sbci	r20, 0x11	; 17
     354:	3e 7f       	andi	r19, 0xFE	; 254
     356:	49 49       	sbci	r20, 0x99	; 153
     358:	49 41       	sbci	r20, 0x19	; 25
     35a:	7f 09       	sbc	r23, r15
     35c:	09 09       	sbc	r16, r9
     35e:	01 3e       	cpi	r16, 0xE1	; 225
     360:	41 41       	sbci	r20, 0x11	; 17
     362:	51 73       	andi	r21, 0x31	; 49
     364:	7f 08       	sbc	r7, r15
     366:	08 08       	sbc	r0, r8
     368:	7f 00       	.word	0x007f	; ????
     36a:	41 7f       	andi	r20, 0xF1	; 241
     36c:	41 00       	.word	0x0041	; ????
     36e:	20 40       	sbci	r18, 0x00	; 0
     370:	41 3f       	cpi	r20, 0xF1	; 241
     372:	01 7f       	andi	r16, 0xF1	; 241
     374:	08 14       	cp	r0, r8
     376:	22 41       	sbci	r18, 0x12	; 18
     378:	7f 40       	sbci	r23, 0x0F	; 15
     37a:	40 40       	sbci	r20, 0x00	; 0
     37c:	40 7f       	andi	r20, 0xF0	; 240
     37e:	02 1c       	adc	r0, r2
     380:	02 7f       	andi	r16, 0xF2	; 242
     382:	7f 04       	cpc	r7, r15
     384:	08 10       	cpse	r0, r8
     386:	7f 3e       	cpi	r23, 0xEF	; 239
     388:	41 41       	sbci	r20, 0x11	; 17
     38a:	41 3e       	cpi	r20, 0xE1	; 225
     38c:	7f 09       	sbc	r23, r15
     38e:	09 09       	sbc	r16, r9
     390:	06 3e       	cpi	r16, 0xE6	; 230
     392:	41 51       	subi	r20, 0x11	; 17
     394:	21 5e       	subi	r18, 0xE1	; 225
     396:	7f 09       	sbc	r23, r15
     398:	19 29       	or	r17, r9
     39a:	46 26       	eor	r4, r22
     39c:	49 49       	sbci	r20, 0x99	; 153
     39e:	49 32       	cpi	r20, 0x29	; 41
     3a0:	03 01       	movw	r0, r6
     3a2:	7f 01       	movw	r14, r30
     3a4:	03 3f       	cpi	r16, 0xF3	; 243
     3a6:	40 40       	sbci	r20, 0x00	; 0
     3a8:	40 3f       	cpi	r20, 0xF0	; 240
     3aa:	1f 20       	and	r1, r15
     3ac:	40 20       	and	r4, r0
     3ae:	1f 3f       	cpi	r17, 0xFF	; 255
     3b0:	40 38       	cpi	r20, 0x80	; 128
     3b2:	40 3f       	cpi	r20, 0xF0	; 240
     3b4:	63 14       	cp	r6, r3
     3b6:	08 14       	cp	r0, r8
     3b8:	63 03       	mulsu	r22, r19
     3ba:	04 78       	andi	r16, 0x84	; 132
     3bc:	04 03       	mulsu	r16, r20
     3be:	61 59       	subi	r22, 0x91	; 145
     3c0:	49 4d       	sbci	r20, 0xD9	; 217
     3c2:	43 00       	.word	0x0043	; ????
     3c4:	7f 41       	sbci	r23, 0x1F	; 31
     3c6:	41 41       	sbci	r20, 0x11	; 17
     3c8:	02 04       	cpc	r0, r2
     3ca:	08 10       	cpse	r0, r8
     3cc:	20 00       	.word	0x0020	; ????
     3ce:	41 41       	sbci	r20, 0x11	; 17
     3d0:	41 7f       	andi	r20, 0xF1	; 241
     3d2:	04 02       	muls	r16, r20
     3d4:	01 02       	muls	r16, r17
     3d6:	04 40       	sbci	r16, 0x04	; 4
     3d8:	40 40       	sbci	r20, 0x00	; 0
     3da:	40 40       	sbci	r20, 0x00	; 0
     3dc:	00 03       	mulsu	r16, r16
     3de:	07 08       	sbc	r0, r7
     3e0:	00 20       	and	r0, r0
     3e2:	54 54       	subi	r21, 0x44	; 68
     3e4:	78 40       	sbci	r23, 0x08	; 8
     3e6:	7f 28       	or	r7, r15
     3e8:	44 44       	sbci	r20, 0x44	; 68
     3ea:	38 38       	cpi	r19, 0x88	; 136
     3ec:	44 44       	sbci	r20, 0x44	; 68
     3ee:	44 28       	or	r4, r4
     3f0:	38 44       	sbci	r19, 0x48	; 72
     3f2:	44 28       	or	r4, r4
     3f4:	7f 38       	cpi	r23, 0x8F	; 143
     3f6:	54 54       	subi	r21, 0x44	; 68
     3f8:	54 18       	sub	r5, r4
     3fa:	00 08       	sbc	r0, r0
     3fc:	7e 09       	sbc	r23, r14
     3fe:	02 18       	sub	r0, r2
     400:	a4 a4       	ldd	r10, Z+44	; 0x2c
     402:	9c 78       	andi	r25, 0x8C	; 140
     404:	7f 08       	sbc	r7, r15
     406:	04 04       	cpc	r0, r4
     408:	78 00       	.word	0x0078	; ????
     40a:	44 7d       	andi	r20, 0xD4	; 212
     40c:	40 00       	.word	0x0040	; ????
     40e:	20 40       	sbci	r18, 0x00	; 0
     410:	40 3d       	cpi	r20, 0xD0	; 208
     412:	00 7f       	andi	r16, 0xF0	; 240
     414:	10 28       	or	r1, r0
     416:	44 00       	.word	0x0044	; ????
     418:	00 41       	sbci	r16, 0x10	; 16
     41a:	7f 40       	sbci	r23, 0x0F	; 15
     41c:	00 7c       	andi	r16, 0xC0	; 192
     41e:	04 78       	andi	r16, 0x84	; 132
     420:	04 78       	andi	r16, 0x84	; 132
     422:	7c 08       	sbc	r7, r12
     424:	04 04       	cpc	r0, r4
     426:	78 38       	cpi	r23, 0x88	; 136
     428:	44 44       	sbci	r20, 0x44	; 68
     42a:	44 38       	cpi	r20, 0x84	; 132
     42c:	fc 18       	sub	r15, r12
     42e:	24 24       	eor	r2, r4
     430:	18 18       	sub	r1, r8
     432:	24 24       	eor	r2, r4
     434:	18 fc       	.word	0xfc18	; ????
     436:	7c 08       	sbc	r7, r12
     438:	04 04       	cpc	r0, r4
     43a:	08 48       	sbci	r16, 0x88	; 136
     43c:	54 54       	subi	r21, 0x44	; 68
     43e:	54 24       	eor	r5, r4
     440:	04 04       	cpc	r0, r4
     442:	3f 44       	sbci	r19, 0x4F	; 79
     444:	24 3c       	cpi	r18, 0xC4	; 196
     446:	40 40       	sbci	r20, 0x00	; 0
     448:	20 7c       	andi	r18, 0xC0	; 192
     44a:	1c 20       	and	r1, r12
     44c:	40 20       	and	r4, r0
     44e:	1c 3c       	cpi	r17, 0xCC	; 204
     450:	40 30       	cpi	r20, 0x00	; 0
     452:	40 3c       	cpi	r20, 0xC0	; 192
     454:	44 28       	or	r4, r4
     456:	10 28       	or	r1, r0
     458:	44 4c       	sbci	r20, 0xC4	; 196
     45a:	90 90 90 7c 	lds	r9, 0x7C90
     45e:	44 64       	ori	r20, 0x44	; 68
     460:	54 4c       	sbci	r21, 0xC4	; 196
     462:	44 00       	.word	0x0044	; ????
     464:	08 36       	cpi	r16, 0x68	; 104
     466:	41 00       	.word	0x0041	; ????
     468:	00 00       	nop
     46a:	77 00       	.word	0x0077	; ????
     46c:	00 00       	nop
     46e:	41 36       	cpi	r20, 0x61	; 97
     470:	08 00       	.word	0x0008	; ????
     472:	02 01       	movw	r0, r4
     474:	02 04       	cpc	r0, r2
     476:	02 3c       	cpi	r16, 0xC2	; 194
     478:	26 23       	and	r18, r22
     47a:	26 3c       	cpi	r18, 0xC6	; 198
     47c:	1e a1       	ldd	r17, Y+38	; 0x26
     47e:	a1 61       	ori	r26, 0x11	; 17
     480:	12 3a       	cpi	r17, 0xA2	; 162
     482:	40 40       	sbci	r20, 0x00	; 0
     484:	20 7a       	andi	r18, 0xA0	; 160
     486:	38 54       	subi	r19, 0x48	; 72
     488:	54 55       	subi	r21, 0x54	; 84
     48a:	59 21       	and	r21, r9
     48c:	55 55       	subi	r21, 0x55	; 85
     48e:	79 41       	sbci	r23, 0x19	; 25
     490:	21 54       	subi	r18, 0x41	; 65
     492:	54 78       	andi	r21, 0x84	; 132
     494:	41 21       	and	r20, r1
     496:	55 54       	subi	r21, 0x45	; 69
     498:	78 40       	sbci	r23, 0x08	; 8
     49a:	20 54       	subi	r18, 0x40	; 64
     49c:	55 79       	andi	r21, 0x95	; 149
     49e:	40 0c       	add	r4, r0
     4a0:	1e 52       	subi	r17, 0x2E	; 46
     4a2:	72 12       	cpse	r7, r18
     4a4:	39 55       	subi	r19, 0x59	; 89
     4a6:	55 55       	subi	r21, 0x55	; 85
     4a8:	59 39       	cpi	r21, 0x99	; 153
     4aa:	54 54       	subi	r21, 0x44	; 68
     4ac:	54 59       	subi	r21, 0x94	; 148
     4ae:	39 55       	subi	r19, 0x59	; 89
     4b0:	54 54       	subi	r21, 0x44	; 68
     4b2:	58 00       	.word	0x0058	; ????
     4b4:	00 45       	sbci	r16, 0x50	; 80
     4b6:	7c 41       	sbci	r23, 0x1C	; 28
     4b8:	00 02       	muls	r16, r16
     4ba:	45 7d       	andi	r20, 0xD5	; 213
     4bc:	42 00       	.word	0x0042	; ????
     4be:	01 45       	sbci	r16, 0x51	; 81
     4c0:	7c 40       	sbci	r23, 0x0C	; 12
     4c2:	f0 29       	or	r31, r0
     4c4:	24 29       	or	r18, r4
     4c6:	f0 f0       	brcs	.+60     	; 0x504 <__trampolines_end+0x308>
     4c8:	28 25       	eor	r18, r8
     4ca:	28 f0       	brcs	.+10     	; 0x4d6 <__trampolines_end+0x2da>
     4cc:	7c 54       	subi	r23, 0x4C	; 76
     4ce:	55 45       	sbci	r21, 0x55	; 85
     4d0:	00 20       	and	r0, r0
     4d2:	54 54       	subi	r21, 0x44	; 68
     4d4:	7c 54       	subi	r23, 0x4C	; 76
     4d6:	7c 0a       	sbc	r7, r28
     4d8:	09 7f       	andi	r16, 0xF9	; 249
     4da:	49 32       	cpi	r20, 0x29	; 41
     4dc:	49 49       	sbci	r20, 0x99	; 153
     4de:	49 32       	cpi	r20, 0x29	; 41
     4e0:	32 48       	sbci	r19, 0x82	; 130
     4e2:	48 48       	sbci	r20, 0x88	; 136
     4e4:	32 32       	cpi	r19, 0x22	; 34
     4e6:	4a 48       	sbci	r20, 0x8A	; 138
     4e8:	48 30       	cpi	r20, 0x08	; 8
     4ea:	3a 41       	sbci	r19, 0x1A	; 26
     4ec:	41 21       	and	r20, r1
     4ee:	7a 3a       	cpi	r23, 0xAA	; 170
     4f0:	42 40       	sbci	r20, 0x02	; 2
     4f2:	20 78       	andi	r18, 0x80	; 128
     4f4:	00 9d       	mul	r16, r0
     4f6:	a0 a0       	ldd	r10, Z+32	; 0x20
     4f8:	7d 39       	cpi	r23, 0x9D	; 157
     4fa:	44 44       	sbci	r20, 0x44	; 68
     4fc:	44 39       	cpi	r20, 0x94	; 148
     4fe:	3d 40       	sbci	r19, 0x0D	; 13
     500:	40 40       	sbci	r20, 0x00	; 0
     502:	3d 3c       	cpi	r19, 0xCD	; 205
     504:	24 ff       	sbrs	r18, 4
     506:	24 24       	eor	r2, r4
     508:	48 7e       	andi	r20, 0xE8	; 232
     50a:	49 43       	sbci	r20, 0x39	; 57
     50c:	66 2b       	or	r22, r22
     50e:	2f fc       	.word	0xfc2f	; ????
     510:	2f 2b       	or	r18, r31
     512:	ff 09       	sbc	r31, r15
     514:	29 f6       	brne	.-118    	; 0x4a0 <__trampolines_end+0x2a4>
     516:	20 c0       	rjmp	.+64     	; 0x558 <__trampolines_end+0x35c>
     518:	88 7e       	andi	r24, 0xE8	; 232
     51a:	09 03       	fmul	r16, r17
     51c:	20 54       	subi	r18, 0x40	; 64
     51e:	54 79       	andi	r21, 0x94	; 148
     520:	41 00       	.word	0x0041	; ????
     522:	00 44       	sbci	r16, 0x40	; 64
     524:	7d 41       	sbci	r23, 0x1D	; 29
     526:	30 48       	sbci	r19, 0x80	; 128
     528:	48 4a       	sbci	r20, 0xA8	; 168
     52a:	32 38       	cpi	r19, 0x82	; 130
     52c:	40 40       	sbci	r20, 0x00	; 0
     52e:	22 7a       	andi	r18, 0xA2	; 162
     530:	00 7a       	andi	r16, 0xA0	; 160
     532:	0a 0a       	sbc	r0, r26
     534:	72 7d       	andi	r23, 0xD2	; 210
     536:	0d 19       	sub	r16, r13
     538:	31 7d       	andi	r19, 0xD1	; 209
     53a:	26 29       	or	r18, r6
     53c:	29 2f       	mov	r18, r25
     53e:	28 26       	eor	r2, r24
     540:	29 29       	or	r18, r9
     542:	29 26       	eor	r2, r25
     544:	30 48       	sbci	r19, 0x80	; 128
     546:	4d 40       	sbci	r20, 0x0D	; 13
     548:	20 38       	cpi	r18, 0x80	; 128
     54a:	08 08       	sbc	r0, r8
     54c:	08 08       	sbc	r0, r8
     54e:	08 08       	sbc	r0, r8
     550:	08 08       	sbc	r0, r8
     552:	38 2f       	mov	r19, r24
     554:	10 c8       	rjmp	.-4064   	; 0xfffff576 <__eeprom_end+0xff7ef576>
     556:	ac ba       	out	0x1c, r10	; 28
     558:	2f 10       	cpse	r2, r15
     55a:	28 34       	cpi	r18, 0x48	; 72
     55c:	fa 00       	.word	0x00fa	; ????
     55e:	00 7b       	andi	r16, 0xB0	; 176
     560:	00 00       	nop
     562:	08 14       	cp	r0, r8
     564:	2a 14       	cp	r2, r10
     566:	22 22       	and	r2, r18
     568:	14 2a       	or	r1, r20
     56a:	14 08       	sbc	r1, r4
     56c:	aa 00       	.word	0x00aa	; ????
     56e:	55 00       	.word	0x0055	; ????
     570:	aa aa       	std	Y+50, r10	; 0x32
     572:	55 aa       	std	Z+53, r5	; 0x35
     574:	55 aa       	std	Z+53, r5	; 0x35
     576:	00 00       	nop
     578:	00 ff       	sbrs	r16, 0
     57a:	00 10       	cpse	r0, r0
     57c:	10 10       	cpse	r1, r0
     57e:	ff 00       	.word	0x00ff	; ????
     580:	14 14       	cp	r1, r4
     582:	14 ff       	sbrs	r17, 4
     584:	00 10       	cpse	r0, r0
     586:	10 ff       	sbrs	r17, 0
     588:	00 ff       	sbrs	r16, 0
     58a:	10 10       	cpse	r1, r0
     58c:	f0 10       	cpse	r15, r0
     58e:	f0 14       	cp	r15, r0
     590:	14 14       	cp	r1, r4
     592:	fc 00       	.word	0x00fc	; ????
     594:	14 14       	cp	r1, r4
     596:	f7 00       	.word	0x00f7	; ????
     598:	ff 00       	.word	0x00ff	; ????
     59a:	00 ff       	sbrs	r16, 0
     59c:	00 ff       	sbrs	r16, 0
     59e:	14 14       	cp	r1, r4
     5a0:	f4 04       	cpc	r15, r4
     5a2:	fc 14       	cp	r15, r12
     5a4:	14 17       	cp	r17, r20
     5a6:	10 1f       	adc	r17, r16
     5a8:	10 10       	cpse	r1, r0
     5aa:	1f 10       	cpse	r1, r15
     5ac:	1f 14       	cp	r1, r15
     5ae:	14 14       	cp	r1, r4
     5b0:	1f 00       	.word	0x001f	; ????
     5b2:	10 10       	cpse	r1, r0
     5b4:	10 f0       	brcs	.+4      	; 0x5ba <__trampolines_end+0x3be>
     5b6:	00 00       	nop
     5b8:	00 00       	nop
     5ba:	1f 10       	cpse	r1, r15
     5bc:	10 10       	cpse	r1, r0
     5be:	10 1f       	adc	r17, r16
     5c0:	10 10       	cpse	r1, r0
     5c2:	10 10       	cpse	r1, r0
     5c4:	f0 10       	cpse	r15, r0
     5c6:	00 00       	nop
     5c8:	00 ff       	sbrs	r16, 0
     5ca:	10 10       	cpse	r1, r0
     5cc:	10 10       	cpse	r1, r0
     5ce:	10 10       	cpse	r1, r0
     5d0:	10 10       	cpse	r1, r0
     5d2:	10 ff       	sbrs	r17, 0
     5d4:	10 00       	.word	0x0010	; ????
     5d6:	00 00       	nop
     5d8:	ff 14       	cp	r15, r15
     5da:	00 00       	nop
     5dc:	ff 00       	.word	0x00ff	; ????
     5de:	ff 00       	.word	0x00ff	; ????
     5e0:	00 1f       	adc	r16, r16
     5e2:	10 17       	cp	r17, r16
     5e4:	00 00       	nop
     5e6:	fc 04       	cpc	r15, r12
     5e8:	f4 14       	cp	r15, r4
     5ea:	14 17       	cp	r17, r20
     5ec:	10 17       	cp	r17, r16
     5ee:	14 14       	cp	r1, r4
     5f0:	f4 04       	cpc	r15, r4
     5f2:	f4 00       	.word	0x00f4	; ????
     5f4:	00 ff       	sbrs	r16, 0
     5f6:	00 f7       	brcc	.-64     	; 0x5b8 <__trampolines_end+0x3bc>
     5f8:	14 14       	cp	r1, r4
     5fa:	14 14       	cp	r1, r4
     5fc:	14 14       	cp	r1, r4
     5fe:	14 f7       	brge	.-60     	; 0x5c4 <__trampolines_end+0x3c8>
     600:	00 f7       	brcc	.-64     	; 0x5c2 <__trampolines_end+0x3c6>
     602:	14 14       	cp	r1, r4
     604:	14 17       	cp	r17, r20
     606:	14 10       	cpse	r1, r4
     608:	10 1f       	adc	r17, r16
     60a:	10 1f       	adc	r17, r16
     60c:	14 14       	cp	r1, r4
     60e:	14 f4       	brge	.+4      	; 0x614 <__trampolines_end+0x418>
     610:	14 10       	cpse	r1, r4
     612:	10 f0       	brcs	.+4      	; 0x618 <__trampolines_end+0x41c>
     614:	10 f0       	brcs	.+4      	; 0x61a <__trampolines_end+0x41e>
     616:	00 00       	nop
     618:	1f 10       	cpse	r1, r15
     61a:	1f 00       	.word	0x001f	; ????
     61c:	00 00       	nop
     61e:	1f 14       	cp	r1, r15
     620:	00 00       	nop
     622:	00 fc       	sbrc	r0, 0
     624:	14 00       	.word	0x0014	; ????
     626:	00 f0       	brcs	.+0      	; 0x628 <__trampolines_end+0x42c>
     628:	10 f0       	brcs	.+4      	; 0x62e <__trampolines_end+0x432>
     62a:	10 10       	cpse	r1, r0
     62c:	ff 10       	cpse	r15, r15
     62e:	ff 14       	cp	r15, r15
     630:	14 14       	cp	r1, r4
     632:	ff 14       	cp	r15, r15
     634:	10 10       	cpse	r1, r0
     636:	10 1f       	adc	r17, r16
     638:	00 00       	nop
     63a:	00 00       	nop
     63c:	f0 10       	cpse	r15, r0
     63e:	ff ff       	.word	0xffff	; ????
     640:	ff ff       	.word	0xffff	; ????
     642:	ff f0       	brie	.+62     	; 0x682 <__trampolines_end+0x486>
     644:	f0 f0       	brcs	.+60     	; 0x682 <__trampolines_end+0x486>
     646:	f0 f0       	brcs	.+60     	; 0x684 <__trampolines_end+0x488>
     648:	ff ff       	.word	0xffff	; ????
     64a:	ff 00       	.word	0x00ff	; ????
     64c:	00 00       	nop
     64e:	00 00       	nop
     650:	ff ff       	.word	0xffff	; ????
     652:	0f 0f       	add	r16, r31
     654:	0f 0f       	add	r16, r31
     656:	0f 38       	cpi	r16, 0x8F	; 143
     658:	44 44       	sbci	r20, 0x44	; 68
     65a:	38 44       	sbci	r19, 0x48	; 72
     65c:	7c 2a       	or	r7, r28
     65e:	2a 3e       	cpi	r18, 0xEA	; 234
     660:	14 7e       	andi	r17, 0xE4	; 228
     662:	02 02       	muls	r16, r18
     664:	06 06       	cpc	r0, r22
     666:	02 7e       	andi	r16, 0xE2	; 226
     668:	02 7e       	andi	r16, 0xE2	; 226
     66a:	02 63       	ori	r16, 0x32	; 50
     66c:	55 49       	sbci	r21, 0x95	; 149
     66e:	41 63       	ori	r20, 0x31	; 49
     670:	38 44       	sbci	r19, 0x48	; 72
     672:	44 3c       	cpi	r20, 0xC4	; 196
     674:	04 40       	sbci	r16, 0x04	; 4
     676:	7e 20       	and	r7, r14
     678:	1e 20       	and	r1, r14
     67a:	06 02       	muls	r16, r22
     67c:	7e 02       	muls	r23, r30
     67e:	02 99       	sbic	0x00, 2	; 0
     680:	a5 e7       	ldi	r26, 0x75	; 117
     682:	a5 99       	sbic	0x14, 5	; 20
     684:	1c 2a       	or	r1, r28
     686:	49 2a       	or	r4, r25
     688:	1c 4c       	sbci	r17, 0xCC	; 204
     68a:	72 01       	movw	r14, r4
     68c:	72 4c       	sbci	r23, 0xC2	; 194
     68e:	30 4a       	sbci	r19, 0xA0	; 160
     690:	4d 4d       	sbci	r20, 0xDD	; 221
     692:	30 30       	cpi	r19, 0x00	; 0
     694:	48 78       	andi	r20, 0x88	; 136
     696:	48 30       	cpi	r20, 0x08	; 8
     698:	bc 62       	ori	r27, 0x2C	; 44
     69a:	5a 46       	sbci	r21, 0x6A	; 106
     69c:	3d 3e       	cpi	r19, 0xED	; 237
     69e:	49 49       	sbci	r20, 0x99	; 153
     6a0:	49 00       	.word	0x0049	; ????
     6a2:	7e 01       	movw	r14, r28
     6a4:	01 01       	movw	r0, r2
     6a6:	7e 2a       	or	r7, r30
     6a8:	2a 2a       	or	r2, r26
     6aa:	2a 2a       	or	r2, r26
     6ac:	44 44       	sbci	r20, 0x44	; 68
     6ae:	5f 44       	sbci	r21, 0x4F	; 79
     6b0:	44 40       	sbci	r20, 0x04	; 4
     6b2:	51 4a       	sbci	r21, 0xA1	; 161
     6b4:	44 40       	sbci	r20, 0x04	; 4
     6b6:	40 44       	sbci	r20, 0x40	; 64
     6b8:	4a 51       	subi	r20, 0x1A	; 26
     6ba:	40 00       	.word	0x0040	; ????
     6bc:	00 ff       	sbrs	r16, 0
     6be:	01 03       	mulsu	r16, r17
     6c0:	e0 80       	ld	r14, Z
     6c2:	ff 00       	.word	0x00ff	; ????
     6c4:	00 08       	sbc	r0, r0
     6c6:	08 6b       	ori	r16, 0xB8	; 184
     6c8:	6b 08       	sbc	r6, r11
     6ca:	36 12       	cpse	r3, r22
     6cc:	36 24       	eor	r3, r6
     6ce:	36 06       	cpc	r3, r22
     6d0:	0f 09       	sbc	r16, r15
     6d2:	0f 06       	cpc	r0, r31
     6d4:	00 00       	nop
     6d6:	18 18       	sub	r1, r8
     6d8:	00 00       	nop
     6da:	00 10       	cpse	r0, r0
     6dc:	10 00       	.word	0x0010	; ????
     6de:	30 40       	sbci	r19, 0x00	; 0
     6e0:	ff 01       	movw	r30, r30
     6e2:	01 00       	.word	0x0001	; ????
     6e4:	1f 01       	movw	r2, r30
     6e6:	01 1e       	adc	r0, r17
     6e8:	00 19       	sub	r16, r0
     6ea:	1d 17       	cp	r17, r29
     6ec:	12 00       	.word	0x0012	; ????
     6ee:	3c 3c       	cpi	r19, 0xCC	; 204
     6f0:	3c 3c       	cpi	r19, 0xCC	; 204
     6f2:	00 00       	nop
     6f4:	00 00       	nop
	...

000006f8 <__ctors_end>:
     6f8:	11 24       	eor	r1, r1
     6fa:	1f be       	out	0x3f, r1	; 63
     6fc:	cf ef       	ldi	r28, 0xFF	; 255
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	df e2       	ldi	r29, 0x2F	; 47
     702:	de bf       	out	0x3e, r29	; 62

00000704 <__do_copy_data>:
     704:	15 e2       	ldi	r17, 0x25	; 37
     706:	a0 e0       	ldi	r26, 0x00	; 0
     708:	b0 e2       	ldi	r27, 0x20	; 32
     70a:	e6 ec       	ldi	r30, 0xC6	; 198
     70c:	fc e2       	ldi	r31, 0x2C	; 44
     70e:	00 e0       	ldi	r16, 0x00	; 0
     710:	0b bf       	out	0x3b, r16	; 59
     712:	02 c0       	rjmp	.+4      	; 0x718 <__do_copy_data+0x14>
     714:	07 90       	elpm	r0, Z+
     716:	0d 92       	st	X+, r0
     718:	a2 3d       	cpi	r26, 0xD2	; 210
     71a:	b1 07       	cpc	r27, r17
     71c:	d9 f7       	brne	.-10     	; 0x714 <__do_copy_data+0x10>

0000071e <__do_clear_bss>:
     71e:	27 e2       	ldi	r18, 0x27	; 39
     720:	a2 ed       	ldi	r26, 0xD2	; 210
     722:	b5 e2       	ldi	r27, 0x25	; 37
     724:	01 c0       	rjmp	.+2      	; 0x728 <.do_clear_bss_start>

00000726 <.do_clear_bss_loop>:
     726:	1d 92       	st	X+, r1

00000728 <.do_clear_bss_start>:
     728:	a8 36       	cpi	r26, 0x68	; 104
     72a:	b2 07       	cpc	r27, r18
     72c:	e1 f7       	brne	.-8      	; 0x726 <.do_clear_bss_loop>
     72e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <main>
     732:	0c 94 61 16 	jmp	0x2cc2	; 0x2cc2 <_exit>

00000736 <__bad_interrupt>:
     736:	64 cc       	rjmp	.-1848   	; 0x0 <__vectors>

00000738 <clock_setup_32_mhz>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
}

void clock_setup_32_mhz(void) {
	
	OSC.CTRL |= OSC_RC32MEN_bm;
     738:	80 91 50 00 	lds	r24, 0x0050
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     742:	80 91 51 00 	lds	r24, 0x0051
     746:	81 ff       	sbrs	r24, 1
     748:	fc cf       	rjmp	.-8      	; 0x742 <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc;
     74a:	88 ed       	ldi	r24, 0xD8	; 216
     74c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 40 00 	sts	0x0040, r24
     754:	08 95       	ret

00000756 <esp8266_off>:
		_delay_ms(1000);
		at_cipsend(str);
		_delay_ms(10000);
		esp8266_send_cmd("AT+CIPCLOSE=0\r", 100);
	}
}
     756:	80 e2       	ldi	r24, 0x20	; 32
     758:	e0 e6       	ldi	r30, 0x60	; 96
     75a:	f6 e0       	ldi	r31, 0x06	; 6
     75c:	86 83       	std	Z+6, r24	; 0x06
     75e:	08 95       	ret

00000760 <__vector_88>:

ISR(USARTD0_RXC_vect) {
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	0b b6       	in	r0, 0x3b	; 59
     76c:	0f 92       	push	r0
     76e:	2f 93       	push	r18
     770:	3f 93       	push	r19
     772:	4f 93       	push	r20
     774:	5f 93       	push	r21
     776:	6f 93       	push	r22
     778:	7f 93       	push	r23
     77a:	8f 93       	push	r24
     77c:	9f 93       	push	r25
     77e:	af 93       	push	r26
     780:	bf 93       	push	r27
     782:	ef 93       	push	r30
     784:	ff 93       	push	r31
	
	char rx_temp = USARTD0.DATA;
     786:	40 91 a0 09 	lds	r20, 0x09A0
	
	if (rx_temp == '\n') {
     78a:	4a 30       	cpi	r20, 0x0A	; 10
     78c:	11 f1       	breq	.+68     	; 0x7d2 <__vector_88+0x72>
			//Flush buffer
			rx_ptr = 0;
			memset(rx_buffer, 0, RX_BUFFER);	
		}
	} else {
		rx_buffer[rx_ptr++] = rx_temp;
     78e:	80 91 9a 26 	lds	r24, 0x269A
     792:	90 91 9b 26 	lds	r25, 0x269B
     796:	9c 01       	movw	r18, r24
     798:	2f 5f       	subi	r18, 0xFF	; 255
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	20 93 9a 26 	sts	0x269A, r18
     7a0:	30 93 9b 26 	sts	0x269B, r19
     7a4:	fc 01       	movw	r30, r24
     7a6:	ee 52       	subi	r30, 0x2E	; 46
     7a8:	fa 4d       	sbci	r31, 0xDA	; 218
     7aa:	40 83       	st	Z, r20
	}
     7ac:	ff 91       	pop	r31
     7ae:	ef 91       	pop	r30
     7b0:	bf 91       	pop	r27
     7b2:	af 91       	pop	r26
     7b4:	9f 91       	pop	r25
     7b6:	8f 91       	pop	r24
     7b8:	7f 91       	pop	r23
     7ba:	6f 91       	pop	r22
     7bc:	5f 91       	pop	r21
     7be:	4f 91       	pop	r20
     7c0:	3f 91       	pop	r19
     7c2:	2f 91       	pop	r18
     7c4:	0f 90       	pop	r0
     7c6:	0b be       	out	0x3b, r0	; 59
     7c8:	0f 90       	pop	r0
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	0f 90       	pop	r0
     7ce:	1f 90       	pop	r1
     7d0:	18 95       	reti
ISR(USARTD0_RXC_vect) {
	
	char rx_temp = USARTD0.DATA;
	
	if (rx_temp == '\n') {
		if (strstr(rx_buffer,"OK")) {
     7d2:	60 e6       	ldi	r22, 0x60	; 96
     7d4:	75 e2       	ldi	r23, 0x25	; 37
     7d6:	82 ed       	ldi	r24, 0xD2	; 210
     7d8:	95 e2       	ldi	r25, 0x25	; 37
     7da:	0e 94 64 13 	call	0x26c8	; 0x26c8 <strstr>
     7de:	89 2b       	or	r24, r25
     7e0:	79 f0       	breq	.+30     	; 0x800 <__vector_88+0xa0>
			status = ESP8266_SUCCESS;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	80 93 15 27 	sts	0x2715, r24
		} else if (strstr(rx_buffer,"+IPD")) {
			got_reply = true;
			strncpy(telnet_cmd,rx_buffer,50);
		}
		
		if (strstr(rx_buffer,"{")) {
     7e8:	6b e7       	ldi	r22, 0x7B	; 123
     7ea:	70 e0       	ldi	r23, 0x00	; 0
     7ec:	82 ed       	ldi	r24, 0xD2	; 210
     7ee:	95 e2       	ldi	r25, 0x25	; 37
     7f0:	0e 94 4a 13 	call	0x2694	; 0x2694 <strchr>
     7f4:	89 2b       	or	r24, r25
     7f6:	79 f0       	breq	.+30     	; 0x816 <__vector_88+0xb6>
			json_found = true;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	80 93 9d 26 	sts	0x269D, r24
     7fe:	d6 cf       	rjmp	.-84     	; 0x7ac <__vector_88+0x4c>
	char rx_temp = USARTD0.DATA;
	
	if (rx_temp == '\n') {
		if (strstr(rx_buffer,"OK")) {
			status = ESP8266_SUCCESS;
		} else if (strstr(rx_buffer,"ERROR")) {
     800:	63 e6       	ldi	r22, 0x63	; 99
     802:	75 e2       	ldi	r23, 0x25	; 37
     804:	82 ed       	ldi	r24, 0xD2	; 210
     806:	95 e2       	ldi	r25, 0x25	; 37
     808:	0e 94 64 13 	call	0x26c8	; 0x26c8 <strstr>
     80c:	89 2b       	or	r24, r25
     80e:	79 f0       	breq	.+30     	; 0x82e <__vector_88+0xce>
			status = ESP8266_ERROR;
     810:	10 92 15 27 	sts	0x2715, r1
     814:	e9 cf       	rjmp	.-46     	; 0x7e8 <__vector_88+0x88>
		
		if (strstr(rx_buffer,"{")) {
			json_found = true;
		} else {
			//Flush buffer
			rx_ptr = 0;
     816:	10 92 9a 26 	sts	0x269A, r1
     81a:	10 92 9b 26 	sts	0x269B, r1
			memset(rx_buffer, 0, RX_BUFFER);	
     81e:	88 ec       	ldi	r24, 0xC8	; 200
     820:	e2 ed       	ldi	r30, 0xD2	; 210
     822:	f5 e2       	ldi	r31, 0x25	; 37
     824:	df 01       	movw	r26, r30
     826:	1d 92       	st	X+, r1
     828:	8a 95       	dec	r24
     82a:	e9 f7       	brne	.-6      	; 0x826 <__vector_88+0xc6>
     82c:	bf cf       	rjmp	.-130    	; 0x7ac <__vector_88+0x4c>
	if (rx_temp == '\n') {
		if (strstr(rx_buffer,"OK")) {
			status = ESP8266_SUCCESS;
		} else if (strstr(rx_buffer,"ERROR")) {
			status = ESP8266_ERROR;
		} else if (strstr(rx_buffer,"CONNECT")) {
     82e:	69 e6       	ldi	r22, 0x69	; 105
     830:	75 e2       	ldi	r23, 0x25	; 37
     832:	82 ed       	ldi	r24, 0xD2	; 210
     834:	95 e2       	ldi	r25, 0x25	; 37
     836:	0e 94 64 13 	call	0x26c8	; 0x26c8 <strstr>
     83a:	89 2b       	or	r24, r25
     83c:	21 f0       	breq	.+8      	; 0x846 <__vector_88+0xe6>
			status = ESP8266_CONNECT;
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	80 93 15 27 	sts	0x2715, r24
     844:	d1 cf       	rjmp	.-94     	; 0x7e8 <__vector_88+0x88>
		} else if (strstr(rx_buffer,"CLOSED")) {
     846:	61 e7       	ldi	r22, 0x71	; 113
     848:	75 e2       	ldi	r23, 0x25	; 37
     84a:	82 ed       	ldi	r24, 0xD2	; 210
     84c:	95 e2       	ldi	r25, 0x25	; 37
     84e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <strstr>
     852:	89 2b       	or	r24, r25
     854:	21 f0       	breq	.+8      	; 0x85e <__vector_88+0xfe>
			status = ESP8266_CLOSED;
     856:	85 e0       	ldi	r24, 0x05	; 5
     858:	80 93 15 27 	sts	0x2715, r24
     85c:	c5 cf       	rjmp	.-118    	; 0x7e8 <__vector_88+0x88>
		} else if (strstr(rx_buffer,"192")) {
     85e:	68 e7       	ldi	r22, 0x78	; 120
     860:	75 e2       	ldi	r23, 0x25	; 37
     862:	82 ed       	ldi	r24, 0xD2	; 210
     864:	95 e2       	ldi	r25, 0x25	; 37
     866:	0e 94 64 13 	call	0x26c8	; 0x26c8 <strstr>
     86a:	89 2b       	or	r24, r25
     86c:	71 f0       	breq	.+28     	; 0x88a <__vector_88+0x12a>
			strncpy(ip_address,strchr(rx_buffer,'\"'),19);
     86e:	62 e2       	ldi	r22, 0x22	; 34
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	82 ed       	ldi	r24, 0xD2	; 210
     874:	95 e2       	ldi	r25, 0x25	; 37
     876:	0e 94 4a 13 	call	0x2694	; 0x2694 <strchr>
     87a:	43 e1       	ldi	r20, 0x13	; 19
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	bc 01       	movw	r22, r24
     880:	80 ed       	ldi	r24, 0xD0	; 208
     882:	96 e2       	ldi	r25, 0x26	; 38
     884:	0e 94 55 13 	call	0x26aa	; 0x26aa <strncpy>
     888:	af cf       	rjmp	.-162    	; 0x7e8 <__vector_88+0x88>
		//This might be error prone...
		} else if (strstr(rx_buffer,"+IPD")) {
     88a:	6c e7       	ldi	r22, 0x7C	; 124
     88c:	75 e2       	ldi	r23, 0x25	; 37
     88e:	82 ed       	ldi	r24, 0xD2	; 210
     890:	95 e2       	ldi	r25, 0x25	; 37
     892:	0e 94 64 13 	call	0x26c8	; 0x26c8 <strstr>
     896:	89 2b       	or	r24, r25
     898:	09 f4       	brne	.+2      	; 0x89c <__vector_88+0x13c>
     89a:	a6 cf       	rjmp	.-180    	; 0x7e8 <__vector_88+0x88>
			got_reply = true;
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	80 93 9c 26 	sts	0x269C, r24
			strncpy(telnet_cmd,rx_buffer,50);
     8a2:	42 e3       	ldi	r20, 0x32	; 50
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	62 ed       	ldi	r22, 0xD2	; 210
     8a8:	75 e2       	ldi	r23, 0x25	; 37
     8aa:	83 ee       	ldi	r24, 0xE3	; 227
     8ac:	96 e2       	ldi	r25, 0x26	; 38
     8ae:	0e 94 55 13 	call	0x26aa	; 0x26aa <strncpy>
     8b2:	9a cf       	rjmp	.-204    	; 0x7e8 <__vector_88+0x88>

000008b4 <ht1632c_setup>:

void ht1632c_write_data(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
		if (d & _BV(i-1)) {
     8b4:	41 e0       	ldi	r20, 0x01	; 1
     8b6:	40 93 81 06 	sts	0x0681, r20
     8ba:	40 93 85 06 	sts	0x0685, r20
     8be:	24 e0       	ldi	r18, 0x04	; 4
     8c0:	20 93 81 06 	sts	0x0681, r18
     8c4:	20 93 85 06 	sts	0x0685, r18
     8c8:	38 e0       	ldi	r19, 0x08	; 8
     8ca:	30 93 81 06 	sts	0x0681, r19
     8ce:	40 93 86 06 	sts	0x0686, r20
     8d2:	30 93 81 06 	sts	0x0681, r19
     8d6:	20 93 86 06 	sts	0x0686, r18
     8da:	30 93 85 06 	sts	0x0685, r19
     8de:	20 93 85 06 	sts	0x0685, r18
     8e2:	20 93 86 06 	sts	0x0686, r18
     8e6:	30 93 86 06 	sts	0x0686, r19
     8ea:	20 93 85 06 	sts	0x0685, r18
     8ee:	20 93 86 06 	sts	0x0686, r18
     8f2:	30 93 86 06 	sts	0x0686, r19
     8f6:	20 93 85 06 	sts	0x0685, r18
     8fa:	20 93 86 06 	sts	0x0686, r18
     8fe:	30 93 86 06 	sts	0x0686, r19
     902:	20 93 85 06 	sts	0x0685, r18
     906:	20 93 86 06 	sts	0x0686, r18
     90a:	30 93 86 06 	sts	0x0686, r19
     90e:	20 93 85 06 	sts	0x0685, r18
     912:	20 93 86 06 	sts	0x0686, r18
     916:	30 93 86 06 	sts	0x0686, r19
     91a:	20 93 85 06 	sts	0x0685, r18
     91e:	20 93 86 06 	sts	0x0686, r18
     922:	30 93 86 06 	sts	0x0686, r19
     926:	20 93 85 06 	sts	0x0685, r18
     92a:	20 93 86 06 	sts	0x0686, r18
     92e:	30 93 86 06 	sts	0x0686, r19
     932:	20 93 85 06 	sts	0x0685, r18
     936:	20 93 86 06 	sts	0x0686, r18
     93a:	30 93 86 06 	sts	0x0686, r19
     93e:	20 93 85 06 	sts	0x0685, r18
     942:	20 93 86 06 	sts	0x0686, r18
     946:	30 93 86 06 	sts	0x0686, r19
     94a:	20 93 85 06 	sts	0x0685, r18
     94e:	20 93 86 06 	sts	0x0686, r18
     952:	30 93 85 06 	sts	0x0685, r19
     956:	20 93 85 06 	sts	0x0685, r18
     95a:	20 93 86 06 	sts	0x0686, r18
     95e:	30 93 86 06 	sts	0x0686, r19
     962:	20 93 85 06 	sts	0x0685, r18
     966:	30 93 86 06 	sts	0x0686, r19
     96a:	40 93 85 06 	sts	0x0685, r20
     96e:	40 93 86 06 	sts	0x0686, r20
     972:	30 93 81 06 	sts	0x0681, r19
     976:	20 93 86 06 	sts	0x0686, r18
     97a:	30 93 85 06 	sts	0x0685, r19
     97e:	20 93 85 06 	sts	0x0685, r18
     982:	20 93 86 06 	sts	0x0686, r18
     986:	30 93 86 06 	sts	0x0686, r19
     98a:	20 93 85 06 	sts	0x0685, r18
     98e:	20 93 86 06 	sts	0x0686, r18
     992:	30 93 86 06 	sts	0x0686, r19
     996:	20 93 85 06 	sts	0x0685, r18
     99a:	20 93 86 06 	sts	0x0686, r18
     99e:	30 93 86 06 	sts	0x0686, r19
     9a2:	20 93 85 06 	sts	0x0685, r18
     9a6:	20 93 86 06 	sts	0x0686, r18
     9aa:	30 93 86 06 	sts	0x0686, r19
     9ae:	20 93 85 06 	sts	0x0685, r18
     9b2:	20 93 86 06 	sts	0x0686, r18
     9b6:	30 93 86 06 	sts	0x0686, r19
     9ba:	20 93 85 06 	sts	0x0685, r18
     9be:	20 93 86 06 	sts	0x0686, r18
     9c2:	30 93 86 06 	sts	0x0686, r19
     9c6:	20 93 85 06 	sts	0x0685, r18
     9ca:	20 93 86 06 	sts	0x0686, r18
     9ce:	30 93 86 06 	sts	0x0686, r19
     9d2:	20 93 85 06 	sts	0x0685, r18
     9d6:	20 93 86 06 	sts	0x0686, r18
     9da:	30 93 86 06 	sts	0x0686, r19
     9de:	20 93 85 06 	sts	0x0685, r18
     9e2:	20 93 86 06 	sts	0x0686, r18
     9e6:	30 93 85 06 	sts	0x0685, r19
     9ea:	20 93 85 06 	sts	0x0685, r18
     9ee:	20 93 86 06 	sts	0x0686, r18
     9f2:	30 93 85 06 	sts	0x0685, r19
     9f6:	20 93 85 06 	sts	0x0685, r18
     9fa:	20 93 86 06 	sts	0x0686, r18
     9fe:	30 93 86 06 	sts	0x0686, r19
     a02:	20 93 85 06 	sts	0x0685, r18
     a06:	30 93 86 06 	sts	0x0686, r19
     a0a:	40 93 85 06 	sts	0x0685, r20
     a0e:	40 93 86 06 	sts	0x0686, r20
     a12:	30 93 81 06 	sts	0x0681, r19
     a16:	20 93 86 06 	sts	0x0686, r18
     a1a:	30 93 85 06 	sts	0x0685, r19
     a1e:	20 93 85 06 	sts	0x0685, r18
     a22:	20 93 86 06 	sts	0x0686, r18
     a26:	30 93 86 06 	sts	0x0686, r19
     a2a:	20 93 85 06 	sts	0x0685, r18
     a2e:	20 93 86 06 	sts	0x0686, r18
     a32:	30 93 86 06 	sts	0x0686, r19
     a36:	20 93 85 06 	sts	0x0685, r18
     a3a:	20 93 86 06 	sts	0x0686, r18
     a3e:	30 93 86 06 	sts	0x0686, r19
     a42:	20 93 85 06 	sts	0x0685, r18
     a46:	20 93 86 06 	sts	0x0686, r18
     a4a:	30 93 86 06 	sts	0x0686, r19
     a4e:	20 93 85 06 	sts	0x0685, r18
     a52:	20 93 86 06 	sts	0x0686, r18
     a56:	30 93 86 06 	sts	0x0686, r19
     a5a:	20 93 85 06 	sts	0x0685, r18
     a5e:	20 93 86 06 	sts	0x0686, r18
     a62:	30 93 86 06 	sts	0x0686, r19
     a66:	20 93 85 06 	sts	0x0685, r18
     a6a:	20 93 86 06 	sts	0x0686, r18
     a6e:	30 93 85 06 	sts	0x0685, r19
     a72:	20 93 85 06 	sts	0x0685, r18
     a76:	20 93 86 06 	sts	0x0686, r18
     a7a:	30 93 86 06 	sts	0x0686, r19
     a7e:	20 93 85 06 	sts	0x0685, r18
     a82:	20 93 86 06 	sts	0x0686, r18
     a86:	30 93 86 06 	sts	0x0686, r19
     a8a:	20 93 85 06 	sts	0x0685, r18
     a8e:	20 93 86 06 	sts	0x0686, r18
     a92:	30 93 86 06 	sts	0x0686, r19
     a96:	20 93 85 06 	sts	0x0685, r18
     a9a:	20 93 86 06 	sts	0x0686, r18
     a9e:	30 93 86 06 	sts	0x0686, r19
     aa2:	20 93 85 06 	sts	0x0685, r18
     aa6:	30 93 86 06 	sts	0x0686, r19
     aaa:	40 93 85 06 	sts	0x0685, r20
     aae:	40 93 86 06 	sts	0x0686, r20
     ab2:	30 93 81 06 	sts	0x0681, r19
     ab6:	20 93 86 06 	sts	0x0686, r18
     aba:	30 93 85 06 	sts	0x0685, r19
     abe:	20 93 85 06 	sts	0x0685, r18
     ac2:	20 93 86 06 	sts	0x0686, r18
     ac6:	30 93 86 06 	sts	0x0686, r19
     aca:	20 93 85 06 	sts	0x0685, r18
     ace:	20 93 86 06 	sts	0x0686, r18
     ad2:	30 93 86 06 	sts	0x0686, r19
     ad6:	20 93 85 06 	sts	0x0685, r18
     ada:	20 93 86 06 	sts	0x0686, r18
     ade:	30 93 86 06 	sts	0x0686, r19
     ae2:	20 93 85 06 	sts	0x0685, r18
     ae6:	20 93 86 06 	sts	0x0686, r18
     aea:	30 93 86 06 	sts	0x0686, r19
     aee:	20 93 85 06 	sts	0x0685, r18
     af2:	20 93 86 06 	sts	0x0686, r18
     af6:	30 93 86 06 	sts	0x0686, r19
     afa:	20 93 85 06 	sts	0x0685, r18
     afe:	20 93 86 06 	sts	0x0686, r18
     b02:	30 93 85 06 	sts	0x0685, r19
     b06:	20 93 85 06 	sts	0x0685, r18
     b0a:	20 93 86 06 	sts	0x0686, r18
     b0e:	30 93 86 06 	sts	0x0686, r19
     b12:	20 93 85 06 	sts	0x0685, r18
     b16:	20 93 86 06 	sts	0x0686, r18
     b1a:	30 93 85 06 	sts	0x0685, r19
     b1e:	20 93 85 06 	sts	0x0685, r18
     b22:	20 93 86 06 	sts	0x0686, r18
     b26:	30 93 86 06 	sts	0x0686, r19
     b2a:	20 93 85 06 	sts	0x0685, r18
     b2e:	20 93 86 06 	sts	0x0686, r18
     b32:	30 93 86 06 	sts	0x0686, r19
     b36:	20 93 85 06 	sts	0x0685, r18
     b3a:	20 93 86 06 	sts	0x0686, r18
     b3e:	30 93 86 06 	sts	0x0686, r19
     b42:	20 93 85 06 	sts	0x0685, r18
     b46:	30 93 86 06 	sts	0x0686, r19
     b4a:	40 93 85 06 	sts	0x0685, r20
     b4e:	40 93 86 06 	sts	0x0686, r20
     b52:	30 93 81 06 	sts	0x0681, r19
     b56:	20 93 86 06 	sts	0x0686, r18
     b5a:	30 93 85 06 	sts	0x0685, r19
     b5e:	20 93 85 06 	sts	0x0685, r18
     b62:	20 93 86 06 	sts	0x0686, r18
     b66:	30 93 86 06 	sts	0x0686, r19
     b6a:	20 93 85 06 	sts	0x0685, r18
     b6e:	20 93 86 06 	sts	0x0686, r18
     b72:	30 93 86 06 	sts	0x0686, r19
     b76:	20 93 85 06 	sts	0x0685, r18
     b7a:	20 93 86 06 	sts	0x0686, r18
     b7e:	30 93 86 06 	sts	0x0686, r19
     b82:	20 93 85 06 	sts	0x0685, r18
     b86:	20 93 86 06 	sts	0x0686, r18
     b8a:	30 93 86 06 	sts	0x0686, r19
     b8e:	20 93 85 06 	sts	0x0685, r18
     b92:	20 93 86 06 	sts	0x0686, r18
     b96:	30 93 86 06 	sts	0x0686, r19
     b9a:	20 93 85 06 	sts	0x0685, r18
     b9e:	20 93 86 06 	sts	0x0686, r18
     ba2:	30 93 85 06 	sts	0x0685, r19
     ba6:	20 93 85 06 	sts	0x0685, r18
     baa:	20 93 86 06 	sts	0x0686, r18
     bae:	30 93 85 06 	sts	0x0685, r19
     bb2:	20 93 85 06 	sts	0x0685, r18
     bb6:	20 93 86 06 	sts	0x0686, r18
     bba:	30 93 86 06 	sts	0x0686, r19
     bbe:	20 93 85 06 	sts	0x0685, r18
     bc2:	20 93 86 06 	sts	0x0686, r18
     bc6:	30 93 86 06 	sts	0x0686, r19
     bca:	20 93 85 06 	sts	0x0685, r18
     bce:	20 93 86 06 	sts	0x0686, r18
     bd2:	30 93 86 06 	sts	0x0686, r19
     bd6:	20 93 85 06 	sts	0x0685, r18
     bda:	20 93 86 06 	sts	0x0686, r18
     bde:	30 93 86 06 	sts	0x0686, r19
     be2:	20 93 85 06 	sts	0x0685, r18
     be6:	30 93 86 06 	sts	0x0686, r19
     bea:	40 93 85 06 	sts	0x0685, r20
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	94 60       	ori	r25, 0x04	; 4
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	40 93 86 06 	sts	0x0686, r20
     bfa:	30 93 81 06 	sts	0x0681, r19
     bfe:	20 93 86 06 	sts	0x0686, r18
     c02:	30 93 85 06 	sts	0x0685, r19
     c06:	20 93 85 06 	sts	0x0685, r18
     c0a:	20 93 86 06 	sts	0x0686, r18
     c0e:	30 93 86 06 	sts	0x0686, r19
     c12:	20 93 85 06 	sts	0x0685, r18
     c16:	20 93 86 06 	sts	0x0686, r18
     c1a:	30 93 86 06 	sts	0x0686, r19
     c1e:	20 93 85 06 	sts	0x0685, r18
     c22:	20 93 86 06 	sts	0x0686, r18
     c26:	90 fd       	sbrc	r25, 0
     c28:	e7 c0       	rjmp	.+462    	; 0xdf8 <ht1632c_setup+0x544>
     c2a:	30 93 86 06 	sts	0x0686, r19
     c2e:	24 e0       	ldi	r18, 0x04	; 4
     c30:	20 93 85 06 	sts	0x0685, r18
     c34:	20 93 86 06 	sts	0x0686, r18
     c38:	28 e0       	ldi	r18, 0x08	; 8
     c3a:	87 fd       	sbrc	r24, 7
     c3c:	9e c0       	rjmp	.+316    	; 0xd7a <ht1632c_setup+0x4c6>
     c3e:	20 93 86 06 	sts	0x0686, r18
     c42:	24 e0       	ldi	r18, 0x04	; 4
     c44:	20 93 85 06 	sts	0x0685, r18
     c48:	20 93 86 06 	sts	0x0686, r18
     c4c:	28 e0       	ldi	r18, 0x08	; 8
     c4e:	86 fd       	sbrc	r24, 6
     c50:	9e c0       	rjmp	.+316    	; 0xd8e <ht1632c_setup+0x4da>
     c52:	20 93 86 06 	sts	0x0686, r18
     c56:	24 e0       	ldi	r18, 0x04	; 4
     c58:	20 93 85 06 	sts	0x0685, r18
     c5c:	20 93 86 06 	sts	0x0686, r18
     c60:	28 e0       	ldi	r18, 0x08	; 8
     c62:	85 fd       	sbrc	r24, 5
     c64:	9e c0       	rjmp	.+316    	; 0xda2 <ht1632c_setup+0x4ee>
     c66:	20 93 86 06 	sts	0x0686, r18
     c6a:	24 e0       	ldi	r18, 0x04	; 4
     c6c:	20 93 85 06 	sts	0x0685, r18
     c70:	20 93 86 06 	sts	0x0686, r18
     c74:	28 e0       	ldi	r18, 0x08	; 8
     c76:	84 fd       	sbrc	r24, 4
     c78:	9e c0       	rjmp	.+316    	; 0xdb6 <ht1632c_setup+0x502>
     c7a:	20 93 86 06 	sts	0x0686, r18
     c7e:	24 e0       	ldi	r18, 0x04	; 4
     c80:	20 93 85 06 	sts	0x0685, r18
     c84:	20 93 86 06 	sts	0x0686, r18
     c88:	28 e0       	ldi	r18, 0x08	; 8
     c8a:	83 fd       	sbrc	r24, 3
     c8c:	9e c0       	rjmp	.+316    	; 0xdca <ht1632c_setup+0x516>
     c8e:	20 93 86 06 	sts	0x0686, r18
     c92:	24 e0       	ldi	r18, 0x04	; 4
     c94:	20 93 85 06 	sts	0x0685, r18
     c98:	20 93 86 06 	sts	0x0686, r18
     c9c:	28 e0       	ldi	r18, 0x08	; 8
     c9e:	82 fd       	sbrc	r24, 2
     ca0:	9e c0       	rjmp	.+316    	; 0xdde <ht1632c_setup+0x52a>
     ca2:	20 93 86 06 	sts	0x0686, r18
     ca6:	94 e0       	ldi	r25, 0x04	; 4
     ca8:	90 93 85 06 	sts	0x0685, r25
     cac:	90 93 86 06 	sts	0x0686, r25
     cb0:	81 fd       	sbrc	r24, 1
     cb2:	9e c0       	rjmp	.+316    	; 0xdf0 <ht1632c_setup+0x53c>
     cb4:	88 e0       	ldi	r24, 0x08	; 8
     cb6:	80 93 86 06 	sts	0x0686, r24
     cba:	84 e0       	ldi	r24, 0x04	; 4
     cbc:	80 93 85 06 	sts	0x0685, r24
     cc0:	80 93 86 06 	sts	0x0686, r24
     cc4:	98 e0       	ldi	r25, 0x08	; 8
     cc6:	90 93 86 06 	sts	0x0686, r25
     cca:	80 93 85 06 	sts	0x0685, r24
     cce:	90 93 86 06 	sts	0x0686, r25
     cd2:	21 e0       	ldi	r18, 0x01	; 1
     cd4:	20 93 85 06 	sts	0x0685, r18
     cd8:	20 93 86 06 	sts	0x0686, r18
     cdc:	90 93 81 06 	sts	0x0681, r25
     ce0:	80 93 86 06 	sts	0x0686, r24
     ce4:	90 93 85 06 	sts	0x0685, r25
     ce8:	80 93 85 06 	sts	0x0685, r24
     cec:	80 93 86 06 	sts	0x0686, r24
     cf0:	90 93 86 06 	sts	0x0686, r25
     cf4:	80 93 85 06 	sts	0x0685, r24
     cf8:	80 93 86 06 	sts	0x0686, r24
     cfc:	90 93 86 06 	sts	0x0686, r25
     d00:	80 93 85 06 	sts	0x0685, r24
     d04:	80 93 86 06 	sts	0x0686, r24
     d08:	90 93 85 06 	sts	0x0685, r25
     d0c:	80 93 85 06 	sts	0x0685, r24
     d10:	80 93 86 06 	sts	0x0686, r24
     d14:	90 93 86 06 	sts	0x0686, r25
     d18:	80 93 85 06 	sts	0x0685, r24
     d1c:	80 93 86 06 	sts	0x0686, r24
     d20:	90 93 85 06 	sts	0x0685, r25
     d24:	80 93 85 06 	sts	0x0685, r24
     d28:	80 93 86 06 	sts	0x0686, r24
     d2c:	90 93 86 06 	sts	0x0686, r25
     d30:	80 93 85 06 	sts	0x0685, r24
     d34:	80 93 86 06 	sts	0x0686, r24
     d38:	90 93 86 06 	sts	0x0686, r25
     d3c:	80 93 85 06 	sts	0x0685, r24
     d40:	80 93 86 06 	sts	0x0686, r24
     d44:	90 93 86 06 	sts	0x0686, r25
     d48:	80 93 85 06 	sts	0x0685, r24
     d4c:	80 93 86 06 	sts	0x0686, r24
     d50:	90 93 86 06 	sts	0x0686, r25
     d54:	80 93 85 06 	sts	0x0685, r24
     d58:	80 93 86 06 	sts	0x0686, r24
     d5c:	90 93 85 06 	sts	0x0685, r25
     d60:	80 93 85 06 	sts	0x0685, r24
     d64:	80 93 86 06 	sts	0x0686, r24
     d68:	90 93 86 06 	sts	0x0686, r25
     d6c:	80 93 85 06 	sts	0x0685, r24
     d70:	90 93 86 06 	sts	0x0686, r25
     d74:	20 93 85 06 	sts	0x0685, r18
     d78:	08 95       	ret
     d7a:	20 93 85 06 	sts	0x0685, r18
     d7e:	24 e0       	ldi	r18, 0x04	; 4
     d80:	20 93 85 06 	sts	0x0685, r18
     d84:	20 93 86 06 	sts	0x0686, r18
     d88:	28 e0       	ldi	r18, 0x08	; 8
     d8a:	86 ff       	sbrs	r24, 6
     d8c:	62 cf       	rjmp	.-316    	; 0xc52 <ht1632c_setup+0x39e>
     d8e:	20 93 85 06 	sts	0x0685, r18
     d92:	24 e0       	ldi	r18, 0x04	; 4
     d94:	20 93 85 06 	sts	0x0685, r18
     d98:	20 93 86 06 	sts	0x0686, r18
     d9c:	28 e0       	ldi	r18, 0x08	; 8
     d9e:	85 ff       	sbrs	r24, 5
     da0:	62 cf       	rjmp	.-316    	; 0xc66 <ht1632c_setup+0x3b2>
     da2:	20 93 85 06 	sts	0x0685, r18
     da6:	24 e0       	ldi	r18, 0x04	; 4
     da8:	20 93 85 06 	sts	0x0685, r18
     dac:	20 93 86 06 	sts	0x0686, r18
     db0:	28 e0       	ldi	r18, 0x08	; 8
     db2:	84 ff       	sbrs	r24, 4
     db4:	62 cf       	rjmp	.-316    	; 0xc7a <ht1632c_setup+0x3c6>
     db6:	20 93 85 06 	sts	0x0685, r18
     dba:	24 e0       	ldi	r18, 0x04	; 4
     dbc:	20 93 85 06 	sts	0x0685, r18
     dc0:	20 93 86 06 	sts	0x0686, r18
     dc4:	28 e0       	ldi	r18, 0x08	; 8
     dc6:	83 ff       	sbrs	r24, 3
     dc8:	62 cf       	rjmp	.-316    	; 0xc8e <ht1632c_setup+0x3da>
     dca:	20 93 85 06 	sts	0x0685, r18
     dce:	24 e0       	ldi	r18, 0x04	; 4
     dd0:	20 93 85 06 	sts	0x0685, r18
     dd4:	20 93 86 06 	sts	0x0686, r18
     dd8:	28 e0       	ldi	r18, 0x08	; 8
     dda:	82 ff       	sbrs	r24, 2
     ddc:	62 cf       	rjmp	.-316    	; 0xca2 <ht1632c_setup+0x3ee>
     dde:	20 93 85 06 	sts	0x0685, r18
     de2:	94 e0       	ldi	r25, 0x04	; 4
     de4:	90 93 85 06 	sts	0x0685, r25
     de8:	90 93 86 06 	sts	0x0686, r25
     dec:	81 ff       	sbrs	r24, 1
     dee:	62 cf       	rjmp	.-316    	; 0xcb4 <ht1632c_setup+0x400>
     df0:	88 e0       	ldi	r24, 0x08	; 8
     df2:	80 93 85 06 	sts	0x0685, r24
     df6:	61 cf       	rjmp	.-318    	; 0xcba <ht1632c_setup+0x406>
     df8:	30 93 85 06 	sts	0x0685, r19
     dfc:	24 e0       	ldi	r18, 0x04	; 4
     dfe:	20 93 85 06 	sts	0x0685, r18
     e02:	20 93 86 06 	sts	0x0686, r18
     e06:	28 e0       	ldi	r18, 0x08	; 8
     e08:	87 fd       	sbrc	r24, 7
     e0a:	b7 cf       	rjmp	.-146    	; 0xd7a <ht1632c_setup+0x4c6>
     e0c:	18 cf       	rjmp	.-464    	; 0xc3e <ht1632c_setup+0x38a>

00000e0e <ht1632c_set_brightness>:
     e0e:	80 31       	cpi	r24, 0x10	; 16
     e10:	08 f0       	brcs	.+2      	; 0xe14 <ht1632c_set_brightness+0x6>
     e12:	8f e0       	ldi	r24, 0x0F	; 15
     e14:	80 6a       	ori	r24, 0xA0	; 160
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	94 60       	ori	r25, 0x04	; 4
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	21 e0       	ldi	r18, 0x01	; 1
     e20:	20 93 86 06 	sts	0x0686, r18
     e24:	38 e0       	ldi	r19, 0x08	; 8
     e26:	30 93 81 06 	sts	0x0681, r19
     e2a:	24 e0       	ldi	r18, 0x04	; 4
     e2c:	20 93 86 06 	sts	0x0686, r18
     e30:	30 93 85 06 	sts	0x0685, r19
     e34:	20 93 85 06 	sts	0x0685, r18
     e38:	20 93 86 06 	sts	0x0686, r18
     e3c:	30 93 86 06 	sts	0x0686, r19
     e40:	20 93 85 06 	sts	0x0685, r18
     e44:	20 93 86 06 	sts	0x0686, r18
     e48:	30 93 86 06 	sts	0x0686, r19
     e4c:	20 93 85 06 	sts	0x0685, r18
     e50:	20 93 86 06 	sts	0x0686, r18
     e54:	30 93 85 06 	sts	0x0685, r19
     e58:	20 93 85 06 	sts	0x0685, r18
     e5c:	20 93 86 06 	sts	0x0686, r18
     e60:	30 93 86 06 	sts	0x0686, r19
     e64:	20 93 85 06 	sts	0x0685, r18
     e68:	20 93 86 06 	sts	0x0686, r18
     e6c:	30 93 85 06 	sts	0x0685, r19
     e70:	20 93 85 06 	sts	0x0685, r18
     e74:	20 93 86 06 	sts	0x0686, r18
     e78:	30 93 86 06 	sts	0x0686, r19
     e7c:	20 93 85 06 	sts	0x0685, r18
     e80:	20 93 86 06 	sts	0x0686, r18
     e84:	84 fd       	sbrc	r24, 4
     e86:	47 c0       	rjmp	.+142    	; 0xf16 <ht1632c_set_brightness+0x108>
     e88:	30 93 86 06 	sts	0x0686, r19
     e8c:	24 e0       	ldi	r18, 0x04	; 4
     e8e:	20 93 85 06 	sts	0x0685, r18
     e92:	20 93 86 06 	sts	0x0686, r18
     e96:	28 e0       	ldi	r18, 0x08	; 8
     e98:	83 fd       	sbrc	r24, 3
     e9a:	26 c0       	rjmp	.+76     	; 0xee8 <ht1632c_set_brightness+0xda>
     e9c:	20 93 86 06 	sts	0x0686, r18
     ea0:	24 e0       	ldi	r18, 0x04	; 4
     ea2:	20 93 85 06 	sts	0x0685, r18
     ea6:	20 93 86 06 	sts	0x0686, r18
     eaa:	28 e0       	ldi	r18, 0x08	; 8
     eac:	82 fd       	sbrc	r24, 2
     eae:	26 c0       	rjmp	.+76     	; 0xefc <ht1632c_set_brightness+0xee>
     eb0:	20 93 86 06 	sts	0x0686, r18
     eb4:	94 e0       	ldi	r25, 0x04	; 4
     eb6:	90 93 85 06 	sts	0x0685, r25
     eba:	90 93 86 06 	sts	0x0686, r25
     ebe:	81 fd       	sbrc	r24, 1
     ec0:	26 c0       	rjmp	.+76     	; 0xf0e <ht1632c_set_brightness+0x100>
     ec2:	88 e0       	ldi	r24, 0x08	; 8
     ec4:	80 93 86 06 	sts	0x0686, r24
     ec8:	84 e0       	ldi	r24, 0x04	; 4
     eca:	80 93 85 06 	sts	0x0685, r24
     ece:	80 93 86 06 	sts	0x0686, r24
     ed2:	98 e0       	ldi	r25, 0x08	; 8
     ed4:	90 93 86 06 	sts	0x0686, r25
     ed8:	80 93 85 06 	sts	0x0685, r24
     edc:	90 93 86 06 	sts	0x0686, r25
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	80 93 85 06 	sts	0x0685, r24
     ee6:	08 95       	ret
     ee8:	20 93 85 06 	sts	0x0685, r18
     eec:	24 e0       	ldi	r18, 0x04	; 4
     eee:	20 93 85 06 	sts	0x0685, r18
     ef2:	20 93 86 06 	sts	0x0686, r18
     ef6:	28 e0       	ldi	r18, 0x08	; 8
     ef8:	82 ff       	sbrs	r24, 2
     efa:	da cf       	rjmp	.-76     	; 0xeb0 <ht1632c_set_brightness+0xa2>
     efc:	20 93 85 06 	sts	0x0685, r18
     f00:	94 e0       	ldi	r25, 0x04	; 4
     f02:	90 93 85 06 	sts	0x0685, r25
     f06:	90 93 86 06 	sts	0x0686, r25
     f0a:	81 ff       	sbrs	r24, 1
     f0c:	da cf       	rjmp	.-76     	; 0xec2 <ht1632c_set_brightness+0xb4>
     f0e:	88 e0       	ldi	r24, 0x08	; 8
     f10:	80 93 85 06 	sts	0x0685, r24
     f14:	d9 cf       	rjmp	.-78     	; 0xec8 <ht1632c_set_brightness+0xba>
     f16:	30 93 85 06 	sts	0x0685, r19
     f1a:	24 e0       	ldi	r18, 0x04	; 4
     f1c:	20 93 85 06 	sts	0x0685, r18
     f20:	20 93 86 06 	sts	0x0686, r18
     f24:	28 e0       	ldi	r18, 0x08	; 8
     f26:	83 fd       	sbrc	r24, 3
     f28:	df cf       	rjmp	.-66     	; 0xee8 <ht1632c_set_brightness+0xda>
     f2a:	b8 cf       	rjmp	.-144    	; 0xe9c <ht1632c_set_brightness+0x8e>

00000f2c <ht1632c_fill_rect>:
     f2c:	5f 92       	push	r5
     f2e:	6f 92       	push	r6
     f30:	7f 92       	push	r7
     f32:	8f 92       	push	r8
     f34:	9f 92       	push	r9
     f36:	af 92       	push	r10
     f38:	bf 92       	push	r11
     f3a:	cf 92       	push	r12
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	18 2f       	mov	r17, r24
     f4c:	56 2e       	mov	r5, r22
     f4e:	e8 2f       	mov	r30, r24
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	7f 01       	movw	r14, r30
     f54:	e4 0e       	add	r14, r20
     f56:	f1 1c       	adc	r15, r1
     f58:	ee 15       	cp	r30, r14
     f5a:	ff 05       	cpc	r31, r15
     f5c:	94 f5       	brge	.+100    	; 0xfc2 <ht1632c_fill_rect+0x96>
     f5e:	c6 2f       	mov	r28, r22
     f60:	d0 e0       	ldi	r29, 0x00	; 0
     f62:	be 01       	movw	r22, r28
     f64:	62 0f       	add	r22, r18
     f66:	71 1d       	adc	r23, r1
     f68:	9b 01       	movw	r18, r22
     f6a:	bf e0       	ldi	r27, 0x0F	; 15
     f6c:	8b 2e       	mov	r8, r27
     f6e:	91 2c       	mov	r9, r1
     f70:	88 e1       	ldi	r24, 0x18	; 24
     f72:	a8 2e       	mov	r10, r24
     f74:	b1 2c       	mov	r11, r1
     f76:	cc 24       	eor	r12, r12
     f78:	c3 94       	inc	r12
     f7a:	d1 2c       	mov	r13, r1
     f7c:	c2 17       	cp	r28, r18
     f7e:	d3 07       	cpc	r29, r19
     f80:	d4 f4       	brge	.+52     	; 0xfb6 <ht1632c_fill_rect+0x8a>
     f82:	af 01       	movw	r20, r30
     f84:	44 0f       	add	r20, r20
     f86:	55 1f       	adc	r21, r21
     f88:	3a 01       	movw	r6, r20
     f8a:	7f e0       	ldi	r23, 0x0F	; 15
     f8c:	67 1a       	sub	r6, r23
     f8e:	71 08       	sbc	r7, r1
     f90:	e8 30       	cpi	r30, 0x08	; 8
     f92:	f1 05       	cpc	r31, r1
     f94:	0c f4       	brge	.+2      	; 0xf98 <ht1632c_fill_rect+0x6c>
     f96:	3a 01       	movw	r6, r20
     f98:	66 0c       	add	r6, r6
     f9a:	77 1c       	adc	r7, r7
     f9c:	66 0c       	add	r6, r6
     f9e:	77 1c       	adc	r7, r7
     fa0:	66 0c       	add	r6, r6
     fa2:	77 1c       	adc	r7, r7
     fa4:	70 97       	sbiw	r30, 0x10	; 16
     fa6:	ec f0       	brlt	.+58     	; 0xfe2 <ht1632c_fill_rect+0xb6>
     fa8:	45 2d       	mov	r20, r5
     faa:	4f 5f       	subi	r20, 0xFF	; 255
     fac:	84 2f       	mov	r24, r20
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	82 17       	cp	r24, r18
     fb2:	93 07       	cpc	r25, r19
     fb4:	d4 f3       	brlt	.-12     	; 0xfaa <ht1632c_fill_rect+0x7e>
     fb6:	1f 5f       	subi	r17, 0xFF	; 255
     fb8:	e1 2f       	mov	r30, r17
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	ee 15       	cp	r30, r14
     fbe:	ff 05       	cpc	r31, r15
     fc0:	ec f2       	brlt	.-70     	; 0xf7c <ht1632c_fill_rect+0x50>
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	ff 90       	pop	r15
     fcc:	ef 90       	pop	r14
     fce:	df 90       	pop	r13
     fd0:	cf 90       	pop	r12
     fd2:	bf 90       	pop	r11
     fd4:	af 90       	pop	r10
     fd6:	9f 90       	pop	r9
     fd8:	8f 90       	pop	r8
     fda:	7f 90       	pop	r7
     fdc:	6f 90       	pop	r6
     fde:	5f 90       	pop	r5
     fe0:	08 95       	ret
     fe2:	ce 01       	movw	r24, r28
     fe4:	45 2d       	mov	r20, r5
     fe6:	00 23       	and	r16, r16
     fe8:	39 f0       	breq	.+14     	; 0xff8 <ht1632c_fill_rect+0xcc>
     fea:	69 c0       	rjmp	.+210    	; 0x10be <ht1632c_fill_rect+0x192>
     fec:	4f 5f       	subi	r20, 0xFF	; 255
     fee:	84 2f       	mov	r24, r20
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	82 17       	cp	r24, r18
     ff4:	93 07       	cpc	r25, r19
     ff6:	fc f6       	brge	.-66     	; 0xfb6 <ht1632c_fill_rect+0x8a>
     ff8:	80 31       	cpi	r24, 0x10	; 16
     ffa:	91 05       	cpc	r25, r1
     ffc:	bc f7       	brge	.-18     	; 0xfec <ht1632c_fill_rect+0xc0>
     ffe:	f4 01       	movw	r30, r8
    1000:	e8 1b       	sub	r30, r24
    1002:	f9 0b       	sbc	r31, r25
    1004:	cf 01       	movw	r24, r30
    1006:	b5 01       	movw	r22, r10
    1008:	0e 94 14 13 	call	0x2628	; 0x2628 <__divmodhi4>
    100c:	88 30       	cpi	r24, 0x08	; 8
    100e:	91 05       	cpc	r25, r1
    1010:	0c f4       	brge	.+2      	; 0x1014 <ht1632c_fill_rect+0xe8>
    1012:	59 c0       	rjmp	.+178    	; 0x10c6 <ht1632c_fill_rect+0x19a>
    1014:	80 31       	cpi	r24, 0x10	; 16
    1016:	91 05       	cpc	r25, r1
    1018:	0c f0       	brlt	.+2      	; 0x101c <ht1632c_fill_rect+0xf0>
    101a:	5e c0       	rjmp	.+188    	; 0x10d8 <ht1632c_fill_rect+0x1ac>
    101c:	67 e8       	ldi	r22, 0x87	; 135
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	87 70       	andi	r24, 0x07	; 7
    1022:	99 27       	eor	r25, r25
    1024:	fb 01       	movw	r30, r22
    1026:	e8 1b       	sub	r30, r24
    1028:	f9 0b       	sbc	r31, r25
    102a:	cf 01       	movw	r24, r30
    102c:	86 0d       	add	r24, r6
    102e:	97 1d       	adc	r25, r7
    1030:	fc 01       	movw	r30, r24
    1032:	f6 95       	lsr	r31
    1034:	e7 95       	ror	r30
    1036:	f6 95       	lsr	r31
    1038:	e7 95       	ror	r30
    103a:	f6 95       	lsr	r31
    103c:	e7 95       	ror	r30
    103e:	e2 56       	subi	r30, 0x62	; 98
    1040:	f9 4d       	sbci	r31, 0xD9	; 217
    1042:	87 70       	andi	r24, 0x07	; 7
    1044:	99 27       	eor	r25, r25
    1046:	b6 01       	movw	r22, r12
    1048:	02 c0       	rjmp	.+4      	; 0x104e <ht1632c_fill_rect+0x122>
    104a:	66 0f       	add	r22, r22
    104c:	77 1f       	adc	r23, r23
    104e:	8a 95       	dec	r24
    1050:	e2 f7       	brpl	.-8      	; 0x104a <ht1632c_fill_rect+0x11e>
    1052:	cb 01       	movw	r24, r22
    1054:	80 95       	com	r24
    1056:	90 81       	ld	r25, Z
    1058:	89 23       	and	r24, r25
    105a:	80 83       	st	Z, r24
    105c:	c7 cf       	rjmp	.-114    	; 0xfec <ht1632c_fill_rect+0xc0>
    105e:	f4 01       	movw	r30, r8
    1060:	e8 1b       	sub	r30, r24
    1062:	f9 0b       	sbc	r31, r25
    1064:	cf 01       	movw	r24, r30
    1066:	b5 01       	movw	r22, r10
    1068:	0e 94 14 13 	call	0x2628	; 0x2628 <__divmodhi4>
    106c:	88 30       	cpi	r24, 0x08	; 8
    106e:	91 05       	cpc	r25, r1
    1070:	6c f5       	brge	.+90     	; 0x10cc <ht1632c_fill_rect+0x1a0>
    1072:	67 e0       	ldi	r22, 0x07	; 7
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	87 70       	andi	r24, 0x07	; 7
    1078:	99 27       	eor	r25, r25
    107a:	fb 01       	movw	r30, r22
    107c:	e8 1b       	sub	r30, r24
    107e:	f9 0b       	sbc	r31, r25
    1080:	cf 01       	movw	r24, r30
    1082:	86 0d       	add	r24, r6
    1084:	97 1d       	adc	r25, r7
    1086:	fc 01       	movw	r30, r24
    1088:	f6 95       	lsr	r31
    108a:	e7 95       	ror	r30
    108c:	f6 95       	lsr	r31
    108e:	e7 95       	ror	r30
    1090:	f6 95       	lsr	r31
    1092:	e7 95       	ror	r30
    1094:	e2 56       	subi	r30, 0x62	; 98
    1096:	f9 4d       	sbci	r31, 0xD9	; 217
    1098:	87 70       	andi	r24, 0x07	; 7
    109a:	99 27       	eor	r25, r25
    109c:	b6 01       	movw	r22, r12
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <ht1632c_fill_rect+0x178>
    10a0:	66 0f       	add	r22, r22
    10a2:	77 1f       	adc	r23, r23
    10a4:	8a 95       	dec	r24
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <ht1632c_fill_rect+0x174>
    10a8:	cb 01       	movw	r24, r22
    10aa:	90 81       	ld	r25, Z
    10ac:	98 2b       	or	r25, r24
    10ae:	90 83       	st	Z, r25
    10b0:	4f 5f       	subi	r20, 0xFF	; 255
    10b2:	84 2f       	mov	r24, r20
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	82 17       	cp	r24, r18
    10b8:	93 07       	cpc	r25, r19
    10ba:	0c f0       	brlt	.+2      	; 0x10be <ht1632c_fill_rect+0x192>
    10bc:	7c cf       	rjmp	.-264    	; 0xfb6 <ht1632c_fill_rect+0x8a>
    10be:	80 31       	cpi	r24, 0x10	; 16
    10c0:	91 05       	cpc	r25, r1
    10c2:	b4 f7       	brge	.-20     	; 0x10b0 <ht1632c_fill_rect+0x184>
    10c4:	cc cf       	rjmp	.-104    	; 0x105e <ht1632c_fill_rect+0x132>
    10c6:	67 e0       	ldi	r22, 0x07	; 7
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	aa cf       	rjmp	.-172    	; 0x1020 <ht1632c_fill_rect+0xf4>
    10cc:	80 31       	cpi	r24, 0x10	; 16
    10ce:	91 05       	cpc	r25, r1
    10d0:	34 f4       	brge	.+12     	; 0x10de <ht1632c_fill_rect+0x1b2>
    10d2:	67 e8       	ldi	r22, 0x87	; 135
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	cf cf       	rjmp	.-98     	; 0x1076 <ht1632c_fill_rect+0x14a>
    10d8:	67 e0       	ldi	r22, 0x07	; 7
    10da:	71 e0       	ldi	r23, 0x01	; 1
    10dc:	a1 cf       	rjmp	.-190    	; 0x1020 <ht1632c_fill_rect+0xf4>
    10de:	67 e0       	ldi	r22, 0x07	; 7
    10e0:	71 e0       	ldi	r23, 0x01	; 1
    10e2:	c9 cf       	rjmp	.-110    	; 0x1076 <ht1632c_fill_rect+0x14a>

000010e4 <ht1632c_refresh_screen>:
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	80 93 86 06 	sts	0x0686, r24
    10ea:	98 e0       	ldi	r25, 0x08	; 8
    10ec:	90 93 81 06 	sts	0x0681, r25
    10f0:	84 e0       	ldi	r24, 0x04	; 4
    10f2:	80 93 86 06 	sts	0x0686, r24
    10f6:	90 93 85 06 	sts	0x0685, r25
    10fa:	80 93 85 06 	sts	0x0685, r24
    10fe:	80 93 86 06 	sts	0x0686, r24
    1102:	90 93 86 06 	sts	0x0686, r25
    1106:	80 93 85 06 	sts	0x0685, r24
    110a:	80 93 86 06 	sts	0x0686, r24
    110e:	90 93 85 06 	sts	0x0685, r25
    1112:	80 93 85 06 	sts	0x0685, r24
    1116:	90 93 86 06 	sts	0x0686, r25
    111a:	90 93 81 06 	sts	0x0681, r25
    111e:	80 93 86 06 	sts	0x0686, r24
    1122:	90 93 86 06 	sts	0x0686, r25
    1126:	80 93 85 06 	sts	0x0685, r24
    112a:	80 93 86 06 	sts	0x0686, r24
    112e:	90 93 86 06 	sts	0x0686, r25
    1132:	80 93 85 06 	sts	0x0685, r24
    1136:	80 93 86 06 	sts	0x0686, r24
    113a:	90 93 86 06 	sts	0x0686, r25
    113e:	80 93 85 06 	sts	0x0685, r24
    1142:	80 93 86 06 	sts	0x0686, r24
    1146:	90 93 86 06 	sts	0x0686, r25
    114a:	80 93 85 06 	sts	0x0685, r24
    114e:	80 93 86 06 	sts	0x0686, r24
    1152:	90 93 86 06 	sts	0x0686, r25
    1156:	80 93 85 06 	sts	0x0685, r24
    115a:	80 93 86 06 	sts	0x0686, r24
    115e:	90 93 86 06 	sts	0x0686, r25
    1162:	80 93 85 06 	sts	0x0685, r24
    1166:	80 93 86 06 	sts	0x0686, r24
    116a:	90 93 86 06 	sts	0x0686, r25
    116e:	80 93 85 06 	sts	0x0685, r24
    1172:	90 93 86 06 	sts	0x0686, r25
    1176:	ef e9       	ldi	r30, 0x9F	; 159
    1178:	f6 e2       	ldi	r31, 0x26	; 38
    117a:	38 e0       	ldi	r19, 0x08	; 8
    117c:	24 e0       	ldi	r18, 0x04	; 4
    117e:	7c c0       	rjmp	.+248    	; 0x1278 <ht1632c_refresh_screen+0x194>
    1180:	30 93 86 06 	sts	0x0686, r19
    1184:	20 93 85 06 	sts	0x0685, r18
    1188:	20 93 86 06 	sts	0x0686, r18
    118c:	95 fd       	sbrc	r25, 5
    118e:	92 c0       	rjmp	.+292    	; 0x12b4 <ht1632c_refresh_screen+0x1d0>
    1190:	30 93 86 06 	sts	0x0686, r19
    1194:	20 93 85 06 	sts	0x0685, r18
    1198:	20 93 86 06 	sts	0x0686, r18
    119c:	94 fd       	sbrc	r25, 4
    119e:	92 c0       	rjmp	.+292    	; 0x12c4 <ht1632c_refresh_screen+0x1e0>
    11a0:	30 93 86 06 	sts	0x0686, r19
    11a4:	20 93 85 06 	sts	0x0685, r18
    11a8:	20 93 86 06 	sts	0x0686, r18
    11ac:	93 fd       	sbrc	r25, 3
    11ae:	92 c0       	rjmp	.+292    	; 0x12d4 <ht1632c_refresh_screen+0x1f0>
    11b0:	30 93 86 06 	sts	0x0686, r19
    11b4:	20 93 85 06 	sts	0x0685, r18
    11b8:	20 93 86 06 	sts	0x0686, r18
    11bc:	92 fd       	sbrc	r25, 2
    11be:	92 c0       	rjmp	.+292    	; 0x12e4 <ht1632c_refresh_screen+0x200>
    11c0:	30 93 86 06 	sts	0x0686, r19
    11c4:	20 93 85 06 	sts	0x0685, r18
    11c8:	20 93 86 06 	sts	0x0686, r18
    11cc:	91 fd       	sbrc	r25, 1
    11ce:	92 c0       	rjmp	.+292    	; 0x12f4 <ht1632c_refresh_screen+0x210>
    11d0:	30 93 86 06 	sts	0x0686, r19
    11d4:	20 93 85 06 	sts	0x0685, r18
    11d8:	20 93 86 06 	sts	0x0686, r18
    11dc:	90 fd       	sbrc	r25, 0
    11de:	92 c0       	rjmp	.+292    	; 0x1304 <ht1632c_refresh_screen+0x220>
    11e0:	30 93 86 06 	sts	0x0686, r19
    11e4:	20 93 85 06 	sts	0x0685, r18
    11e8:	20 93 86 06 	sts	0x0686, r18
    11ec:	87 fd       	sbrc	r24, 7
    11ee:	92 c0       	rjmp	.+292    	; 0x1314 <ht1632c_refresh_screen+0x230>
    11f0:	30 93 86 06 	sts	0x0686, r19
    11f4:	20 93 85 06 	sts	0x0685, r18
    11f8:	20 93 86 06 	sts	0x0686, r18
    11fc:	86 fd       	sbrc	r24, 6
    11fe:	92 c0       	rjmp	.+292    	; 0x1324 <ht1632c_refresh_screen+0x240>
    1200:	30 93 86 06 	sts	0x0686, r19
    1204:	20 93 85 06 	sts	0x0685, r18
    1208:	20 93 86 06 	sts	0x0686, r18
    120c:	85 fd       	sbrc	r24, 5
    120e:	92 c0       	rjmp	.+292    	; 0x1334 <ht1632c_refresh_screen+0x250>
    1210:	30 93 86 06 	sts	0x0686, r19
    1214:	20 93 85 06 	sts	0x0685, r18
    1218:	20 93 86 06 	sts	0x0686, r18
    121c:	84 fd       	sbrc	r24, 4
    121e:	92 c0       	rjmp	.+292    	; 0x1344 <ht1632c_refresh_screen+0x260>
    1220:	30 93 86 06 	sts	0x0686, r19
    1224:	20 93 85 06 	sts	0x0685, r18
    1228:	20 93 86 06 	sts	0x0686, r18
    122c:	83 fd       	sbrc	r24, 3
    122e:	92 c0       	rjmp	.+292    	; 0x1354 <ht1632c_refresh_screen+0x270>
    1230:	30 93 86 06 	sts	0x0686, r19
    1234:	20 93 85 06 	sts	0x0685, r18
    1238:	20 93 86 06 	sts	0x0686, r18
    123c:	82 fd       	sbrc	r24, 2
    123e:	92 c0       	rjmp	.+292    	; 0x1364 <ht1632c_refresh_screen+0x280>
    1240:	30 93 86 06 	sts	0x0686, r19
    1244:	20 93 85 06 	sts	0x0685, r18
    1248:	20 93 86 06 	sts	0x0686, r18
    124c:	81 fd       	sbrc	r24, 1
    124e:	92 c0       	rjmp	.+292    	; 0x1374 <ht1632c_refresh_screen+0x290>
    1250:	30 93 86 06 	sts	0x0686, r19
    1254:	20 93 85 06 	sts	0x0685, r18
    1258:	20 93 86 06 	sts	0x0686, r18
    125c:	80 fd       	sbrc	r24, 0
    125e:	92 c0       	rjmp	.+292    	; 0x1384 <ht1632c_refresh_screen+0x2a0>
    1260:	30 93 86 06 	sts	0x0686, r19
    1264:	20 93 85 06 	sts	0x0685, r18
    1268:	30 93 86 06 	sts	0x0686, r19
    126c:	32 96       	adiw	r30, 0x02	; 2
    126e:	86 e2       	ldi	r24, 0x26	; 38
    1270:	ef 3b       	cpi	r30, 0xBF	; 191
    1272:	f8 07       	cpc	r31, r24
    1274:	09 f4       	brne	.+2      	; 0x1278 <ht1632c_refresh_screen+0x194>
    1276:	8c c0       	rjmp	.+280    	; 0x1390 <ht1632c_refresh_screen+0x2ac>
    1278:	df 01       	movw	r26, r30
    127a:	11 97       	sbiw	r26, 0x01	; 1
    127c:	8c 91       	ld	r24, X
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	98 2f       	mov	r25, r24
    1282:	88 27       	eor	r24, r24
    1284:	40 81       	ld	r20, Z
    1286:	84 2b       	or	r24, r20
    1288:	30 93 81 06 	sts	0x0681, r19
    128c:	20 93 86 06 	sts	0x0686, r18
    1290:	97 fd       	sbrc	r25, 7
    1292:	7b c0       	rjmp	.+246    	; 0x138a <ht1632c_refresh_screen+0x2a6>
    1294:	30 93 86 06 	sts	0x0686, r19
    1298:	20 93 85 06 	sts	0x0685, r18
    129c:	20 93 86 06 	sts	0x0686, r18
    12a0:	96 ff       	sbrs	r25, 6
    12a2:	6e cf       	rjmp	.-292    	; 0x1180 <ht1632c_refresh_screen+0x9c>
    12a4:	30 93 85 06 	sts	0x0685, r19
    12a8:	20 93 85 06 	sts	0x0685, r18
    12ac:	20 93 86 06 	sts	0x0686, r18
    12b0:	95 ff       	sbrs	r25, 5
    12b2:	6e cf       	rjmp	.-292    	; 0x1190 <ht1632c_refresh_screen+0xac>
    12b4:	30 93 85 06 	sts	0x0685, r19
    12b8:	20 93 85 06 	sts	0x0685, r18
    12bc:	20 93 86 06 	sts	0x0686, r18
    12c0:	94 ff       	sbrs	r25, 4
    12c2:	6e cf       	rjmp	.-292    	; 0x11a0 <ht1632c_refresh_screen+0xbc>
    12c4:	30 93 85 06 	sts	0x0685, r19
    12c8:	20 93 85 06 	sts	0x0685, r18
    12cc:	20 93 86 06 	sts	0x0686, r18
    12d0:	93 ff       	sbrs	r25, 3
    12d2:	6e cf       	rjmp	.-292    	; 0x11b0 <ht1632c_refresh_screen+0xcc>
    12d4:	30 93 85 06 	sts	0x0685, r19
    12d8:	20 93 85 06 	sts	0x0685, r18
    12dc:	20 93 86 06 	sts	0x0686, r18
    12e0:	92 ff       	sbrs	r25, 2
    12e2:	6e cf       	rjmp	.-292    	; 0x11c0 <ht1632c_refresh_screen+0xdc>
    12e4:	30 93 85 06 	sts	0x0685, r19
    12e8:	20 93 85 06 	sts	0x0685, r18
    12ec:	20 93 86 06 	sts	0x0686, r18
    12f0:	91 ff       	sbrs	r25, 1
    12f2:	6e cf       	rjmp	.-292    	; 0x11d0 <ht1632c_refresh_screen+0xec>
    12f4:	30 93 85 06 	sts	0x0685, r19
    12f8:	20 93 85 06 	sts	0x0685, r18
    12fc:	20 93 86 06 	sts	0x0686, r18
    1300:	90 ff       	sbrs	r25, 0
    1302:	6e cf       	rjmp	.-292    	; 0x11e0 <ht1632c_refresh_screen+0xfc>
    1304:	30 93 85 06 	sts	0x0685, r19
    1308:	20 93 85 06 	sts	0x0685, r18
    130c:	20 93 86 06 	sts	0x0686, r18
    1310:	87 ff       	sbrs	r24, 7
    1312:	6e cf       	rjmp	.-292    	; 0x11f0 <ht1632c_refresh_screen+0x10c>
    1314:	30 93 85 06 	sts	0x0685, r19
    1318:	20 93 85 06 	sts	0x0685, r18
    131c:	20 93 86 06 	sts	0x0686, r18
    1320:	86 ff       	sbrs	r24, 6
    1322:	6e cf       	rjmp	.-292    	; 0x1200 <ht1632c_refresh_screen+0x11c>
    1324:	30 93 85 06 	sts	0x0685, r19
    1328:	20 93 85 06 	sts	0x0685, r18
    132c:	20 93 86 06 	sts	0x0686, r18
    1330:	85 ff       	sbrs	r24, 5
    1332:	6e cf       	rjmp	.-292    	; 0x1210 <ht1632c_refresh_screen+0x12c>
    1334:	30 93 85 06 	sts	0x0685, r19
    1338:	20 93 85 06 	sts	0x0685, r18
    133c:	20 93 86 06 	sts	0x0686, r18
    1340:	84 ff       	sbrs	r24, 4
    1342:	6e cf       	rjmp	.-292    	; 0x1220 <ht1632c_refresh_screen+0x13c>
    1344:	30 93 85 06 	sts	0x0685, r19
    1348:	20 93 85 06 	sts	0x0685, r18
    134c:	20 93 86 06 	sts	0x0686, r18
    1350:	83 ff       	sbrs	r24, 3
    1352:	6e cf       	rjmp	.-292    	; 0x1230 <ht1632c_refresh_screen+0x14c>
    1354:	30 93 85 06 	sts	0x0685, r19
    1358:	20 93 85 06 	sts	0x0685, r18
    135c:	20 93 86 06 	sts	0x0686, r18
    1360:	82 ff       	sbrs	r24, 2
    1362:	6e cf       	rjmp	.-292    	; 0x1240 <ht1632c_refresh_screen+0x15c>
    1364:	30 93 85 06 	sts	0x0685, r19
    1368:	20 93 85 06 	sts	0x0685, r18
    136c:	20 93 86 06 	sts	0x0686, r18
    1370:	81 ff       	sbrs	r24, 1
    1372:	6e cf       	rjmp	.-292    	; 0x1250 <ht1632c_refresh_screen+0x16c>
    1374:	30 93 85 06 	sts	0x0685, r19
    1378:	20 93 85 06 	sts	0x0685, r18
    137c:	20 93 86 06 	sts	0x0686, r18
    1380:	80 ff       	sbrs	r24, 0
    1382:	6e cf       	rjmp	.-292    	; 0x1260 <ht1632c_refresh_screen+0x17c>
    1384:	30 93 85 06 	sts	0x0685, r19
    1388:	6d cf       	rjmp	.-294    	; 0x1264 <ht1632c_refresh_screen+0x180>
    138a:	30 93 85 06 	sts	0x0685, r19
    138e:	84 cf       	rjmp	.-248    	; 0x1298 <ht1632c_refresh_screen+0x1b4>
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	80 93 85 06 	sts	0x0685, r24
    1396:	08 95       	ret

00001398 <ht1632c_clear_screen>:
    1398:	80 e2       	ldi	r24, 0x20	; 32
    139a:	ee e9       	ldi	r30, 0x9E	; 158
    139c:	f6 e2       	ldi	r31, 0x26	; 38
    139e:	df 01       	movw	r26, r30
    13a0:	1d 92       	st	X+, r1
    13a2:	8a 95       	dec	r24
    13a4:	e9 f7       	brne	.-6      	; 0x13a0 <ht1632c_clear_screen+0x8>
    13a6:	9e ce       	rjmp	.-708    	; 0x10e4 <ht1632c_refresh_screen>

000013a8 <ht1632c_draw_char>:
static inline void ht1632c_set_cursor(int16_t x, int16_t y) {
	cursor_x = x;
	cursor_y = y;
}

void ht1632c_draw_char(int16_t x, int16_t y, char c,uint16_t color, uint8_t size) {
    13a8:	2f 92       	push	r2
    13aa:	3f 92       	push	r3
    13ac:	4f 92       	push	r4
    13ae:	5f 92       	push	r5
    13b0:	6f 92       	push	r6
    13b2:	7f 92       	push	r7
    13b4:	8f 92       	push	r8
    13b6:	9f 92       	push	r9
    13b8:	af 92       	push	r10
    13ba:	bf 92       	push	r11
    13bc:	cf 92       	push	r12
    13be:	df 92       	push	r13
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	6a 97       	sbiw	r28, 0x1a	; 26
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	6b 83       	std	Y+3, r22	; 0x03
    13d8:	7c 83       	std	Y+4, r23	; 0x04
    13da:	2a 83       	std	Y+2, r18	; 0x02
    13dc:	60 2e       	mov	r6, r16
    13de:	55 e0       	ldi	r21, 0x05	; 5
    13e0:	45 9f       	mul	r20, r21
    13e2:	90 01       	movw	r18, r0
    13e4:	11 24       	eor	r1, r1
    13e6:	24 50       	subi	r18, 0x04	; 4
    13e8:	3e 4f       	sbci	r19, 0xFE	; 254
    13ea:	2a 87       	std	Y+10, r18	; 0x0a
    13ec:	3b 87       	std	Y+11, r19	; 0x0b
    13ee:	8d 83       	std	Y+5, r24	; 0x05
    13f0:	9e 83       	std	Y+6, r25	; 0x06
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	8c 87       	std	Y+12, r24	; 0x0c
    13f8:	9d 87       	std	Y+13, r25	; 0x0d
    13fa:	2d 81       	ldd	r18, Y+5	; 0x05
    13fc:	3e 81       	ldd	r19, Y+6	; 0x06
    13fe:	2b 5f       	subi	r18, 0xFB	; 251
    1400:	3f 4f       	sbci	r19, 0xFF	; 255
    1402:	2d 8b       	std	Y+21, r18	; 0x15
    1404:	3e 8b       	std	Y+22, r19	; 0x16
    1406:	30 2f       	mov	r19, r16
    1408:	33 0f       	add	r19, r19
    140a:	33 0f       	add	r19, r19
    140c:	33 0f       	add	r19, r19
    140e:	30 1b       	sub	r19, r16
    1410:	36 0f       	add	r19, r22
    1412:	38 8b       	std	Y+16, r19	; 0x10
		uint8_t line = pgm_read_byte(font_5x7+(c*5)+i);
		for (j = 7; j > 0; j--) {
			if (line & 0x1) {
				if (size == 1) {
					if (x+i >= 0) {
						ht1632c_draw_pixel(x+i, y+j-1, color);
    1414:	4d 81       	ldd	r20, Y+5	; 0x05
    1416:	49 87       	std	Y+9, r20	; 0x09
    1418:	20 2f       	mov	r18, r16
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	2e 87       	std	Y+14, r18	; 0x0e
    141e:	3f 87       	std	Y+15, r19	; 0x0f
    1420:	ab 01       	movw	r20, r22
    1422:	49 5f       	subi	r20, 0xF9	; 249
    1424:	5f 4f       	sbci	r21, 0xFF	; 255
    1426:	4f 8b       	std	Y+23, r20	; 0x17
    1428:	58 8f       	std	Y+24, r21	; 0x18
    142a:	29 e0       	ldi	r18, 0x09	; 9
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	26 1b       	sub	r18, r22
    1430:	37 0b       	sbc	r19, r23
    1432:	29 8b       	std	Y+17, r18	; 0x11
    1434:	3a 8b       	std	Y+18, r19	; 0x12
		return;
	}
	if (y >= HEIGHT) {
		return;
	}
	y = 15 - y;
    1436:	0f e0       	ldi	r16, 0x0F	; 15
    1438:	20 2e       	mov	r2, r16
    143a:	31 2c       	mov	r3, r1

	y %= 24;
    143c:	88 e1       	ldi	r24, 0x18	; 24
    143e:	c8 2e       	mov	r12, r24
    1440:	d1 2c       	mov	r13, r1
}

/*-------------------------Geometric functions----------------------------*/

static inline void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    1442:	44 24       	eor	r4, r4
    1444:	43 94       	inc	r4
    1446:	51 2c       	mov	r5, r1
    1448:	69 82       	std	Y+1, r6	; 0x01
	
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
		uint8_t line = pgm_read_byte(font_5x7+(c*5)+i);
    144a:	ea 85       	ldd	r30, Y+10	; 0x0a
    144c:	fb 85       	ldd	r31, Y+11	; 0x0b
    144e:	64 90       	lpm	r6, Z
    1450:	2d 81       	ldd	r18, Y+5	; 0x05
    1452:	3e 81       	ldd	r19, Y+6	; 0x06
    1454:	8c 85       	ldd	r24, Y+12	; 0x0c
    1456:	9d 85       	ldd	r25, Y+13	; 0x0d
    1458:	28 30       	cpi	r18, 0x08	; 8
    145a:	31 05       	cpc	r19, r1
    145c:	0c f0       	brlt	.+2      	; 0x1460 <ht1632c_draw_char+0xb8>
    145e:	0f 97       	sbiw	r24, 0x0f	; 15
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    1460:	ac 01       	movw	r20, r24
    1462:	44 0f       	add	r20, r20
    1464:	55 1f       	adc	r21, r21
    1466:	44 0f       	add	r20, r20
    1468:	55 1f       	adc	r21, r21
    146a:	44 0f       	add	r20, r20
    146c:	55 1f       	adc	r21, r21
    146e:	4b 8b       	std	Y+19, r20	; 0x13
    1470:	5c 8b       	std	Y+20, r21	; 0x14
	}
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
    1472:	f9 85       	ldd	r31, Y+9	; 0x09
    1474:	ef 2f       	mov	r30, r31
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	ef 83       	std	Y+7, r30	; 0x07
    147a:	f8 87       	std	Y+8, r31	; 0x08
    147c:	7f 01       	movw	r14, r30
    147e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1480:	3f 85       	ldd	r19, Y+15	; 0x0f
    1482:	e2 0e       	add	r14, r18
    1484:	f3 1e       	adc	r15, r19
    1486:	a9 88       	ldd	r10, Y+17	; 0x11
    1488:	ba 88       	ldd	r11, Y+18	; 0x12
    148a:	0f 89       	ldd	r16, Y+23	; 0x17
    148c:	18 8d       	ldd	r17, Y+24	; 0x18
    148e:	78 88       	ldd	r7, Y+16	; 0x10
    1490:	17 c0       	rjmp	.+46     	; 0x14c0 <ht1632c_draw_char+0x118>
	for (i = 0; i < 5; i++) {
		uint8_t line = pgm_read_byte(font_5x7+(c*5)+i);
		for (j = 7; j > 0; j--) {
			if (line & 0x1) {
				if (size == 1) {
					if (x+i >= 0) {
    1492:	4d 81       	ldd	r20, Y+5	; 0x05
    1494:	5e 81       	ldd	r21, Y+6	; 0x06
    1496:	40 31       	cpi	r20, 0x10	; 16
    1498:	51 05       	cpc	r21, r1
    149a:	20 f4       	brcc	.+8      	; 0x14a4 <ht1632c_draw_char+0xfc>
void ht1632c_draw_pixel(int x, int y, uint8_t color) {
	
	if (x >= WIDTH) {
		return;
	}
	if (y >= HEIGHT) {
    149c:	01 31       	cpi	r16, 0x11	; 17
    149e:	11 05       	cpc	r17, r1
    14a0:	0c f4       	brge	.+2      	; 0x14a4 <ht1632c_draw_char+0xfc>
    14a2:	fe c0       	rjmp	.+508    	; 0x16a0 <ht1632c_draw_char+0x2f8>
				}
				else {  // big size
					ht1632c_fill_rect(x+i*size, y+j*size, size, size, color);
				}
			}
			line >>= 1;
    14a4:	66 94       	lsr	r6
    14a6:	7f ef       	ldi	r23, 0xFF	; 255
    14a8:	a7 1a       	sub	r10, r23
    14aa:	b7 0a       	sbc	r11, r23
    14ac:	01 50       	subi	r16, 0x01	; 1
    14ae:	11 09       	sbc	r17, r1
    14b0:	29 81       	ldd	r18, Y+1	; 0x01
    14b2:	72 1a       	sub	r7, r18
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
		uint8_t line = pgm_read_byte(font_5x7+(c*5)+i);
		for (j = 7; j > 0; j--) {
    14b4:	4b 81       	ldd	r20, Y+3	; 0x03
    14b6:	5c 81       	ldd	r21, Y+4	; 0x04
    14b8:	04 17       	cp	r16, r20
    14ba:	15 07       	cpc	r17, r21
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <ht1632c_draw_char+0x118>
    14be:	bd c0       	rjmp	.+378    	; 0x163a <ht1632c_draw_char+0x292>
			if (line & 0x1) {
    14c0:	60 fe       	sbrs	r6, 0
    14c2:	f0 cf       	rjmp	.-32     	; 0x14a4 <ht1632c_draw_char+0xfc>
				if (size == 1) {
    14c4:	39 81       	ldd	r19, Y+1	; 0x01
    14c6:	31 30       	cpi	r19, 0x01	; 1
    14c8:	21 f3       	breq	.-56     	; 0x1492 <ht1632c_draw_char+0xea>
	}
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
    14ca:	ef 81       	ldd	r30, Y+7	; 0x07
    14cc:	f8 85       	ldd	r31, Y+8	; 0x08
    14ce:	ee 15       	cp	r30, r14
    14d0:	ff 05       	cpc	r31, r15
    14d2:	44 f7       	brge	.-48     	; 0x14a4 <ht1632c_draw_char+0xfc>
    14d4:	cf 01       	movw	r24, r30
    14d6:	e7 2d       	mov	r30, r7
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	2e 85       	ldd	r18, Y+14	; 0x0e
    14dc:	3f 85       	ldd	r19, Y+15	; 0x0f
    14de:	2e 0f       	add	r18, r30
    14e0:	3f 1f       	adc	r19, r31
    14e2:	89 84       	ldd	r8, Y+9	; 0x09
		for (uint8_t j=y; j<y+h; j++) {
    14e4:	e2 17       	cp	r30, r18
    14e6:	f3 07       	cpc	r31, r19
    14e8:	cc f4       	brge	.+50     	; 0x151c <ht1632c_draw_char+0x174>
		i = 256 + 7;
	}
	i -= (y % 8);

	if (x < 8) {
		x *= 2;
    14ea:	ac 01       	movw	r20, r24
    14ec:	44 0f       	add	r20, r20
    14ee:	55 1f       	adc	r21, r21
	} else {
		x = (x-8) * 2 + 1;
    14f0:	ba 01       	movw	r22, r20
    14f2:	6f 50       	subi	r22, 0x0F	; 15
    14f4:	71 09       	sbc	r23, r1
    14f6:	88 30       	cpi	r24, 0x08	; 8
    14f8:	91 05       	cpc	r25, r1
    14fa:	0c f0       	brlt	.+2      	; 0x14fe <ht1632c_draw_char+0x156>
    14fc:	ab 01       	movw	r20, r22
	}

	i += x * 8;
    14fe:	44 0f       	add	r20, r20
    1500:	55 1f       	adc	r21, r21
    1502:	44 0f       	add	r20, r20
    1504:	55 1f       	adc	r21, r21
    1506:	44 0f       	add	r20, r20
    1508:	55 1f       	adc	r21, r21
    150a:	40 97       	sbiw	r24, 0x10	; 16
    150c:	74 f0       	brlt	.+28     	; 0x152a <ht1632c_draw_char+0x182>
    150e:	47 2d       	mov	r20, r7
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
		for (uint8_t j=y; j<y+h; j++) {
    1510:	4f 5f       	subi	r20, 0xFF	; 255
    1512:	84 2f       	mov	r24, r20
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	82 17       	cp	r24, r18
    1518:	93 07       	cpc	r25, r19
    151a:	d4 f3       	brlt	.-12     	; 0x1510 <ht1632c_draw_char+0x168>
	}
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
    151c:	83 94       	inc	r8
    151e:	88 2d       	mov	r24, r8
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	8e 15       	cp	r24, r14
    1524:	9f 05       	cpc	r25, r15
    1526:	f4 f2       	brlt	.-68     	; 0x14e4 <ht1632c_draw_char+0x13c>
    1528:	bd cf       	rjmp	.-134    	; 0x14a4 <ht1632c_draw_char+0xfc>
    152a:	6a 81       	ldd	r22, Y+2	; 0x02
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    152c:	97 2c       	mov	r9, r7
    152e:	cf 01       	movw	r24, r30
    1530:	49 8f       	std	Y+25, r20	; 0x19
    1532:	5a 8f       	std	Y+26, r21	; 0x1a
    1534:	66 23       	and	r22, r22
    1536:	39 f0       	breq	.+14     	; 0x1546 <ht1632c_draw_char+0x19e>
    1538:	6d c0       	rjmp	.+218    	; 0x1614 <ht1632c_draw_char+0x26c>
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
		for (uint8_t j=y; j<y+h; j++) {
    153a:	93 94       	inc	r9
    153c:	89 2d       	mov	r24, r9
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	82 17       	cp	r24, r18
    1542:	93 07       	cpc	r25, r19
    1544:	5c f7       	brge	.-42     	; 0x151c <ht1632c_draw_char+0x174>
void ht1632c_draw_pixel(int x, int y, uint8_t color) {
	
	if (x >= WIDTH) {
		return;
	}
	if (y >= HEIGHT) {
    1546:	80 31       	cpi	r24, 0x10	; 16
    1548:	91 05       	cpc	r25, r1
    154a:	bc f7       	brge	.-18     	; 0x153a <ht1632c_draw_char+0x192>
		return;
	}
	y = 15 - y;
    154c:	d1 01       	movw	r26, r2
    154e:	a8 1b       	sub	r26, r24
    1550:	b9 0b       	sbc	r27, r25
    1552:	cd 01       	movw	r24, r26

	y %= 24;
    1554:	b6 01       	movw	r22, r12
    1556:	0e 94 14 13 	call	0x2628	; 0x2628 <__divmodhi4>

	int i;

	if (y < 8) {
    155a:	88 30       	cpi	r24, 0x08	; 8
    155c:	91 05       	cpc	r25, r1
    155e:	0c f4       	brge	.+2      	; 0x1562 <ht1632c_draw_char+0x1ba>
    1560:	5d c0       	rjmp	.+186    	; 0x161c <ht1632c_draw_char+0x274>
		i = 7;
	} else if (y < 16) {
    1562:	80 31       	cpi	r24, 0x10	; 16
    1564:	91 05       	cpc	r25, r1
    1566:	0c f0       	brlt	.+2      	; 0x156a <ht1632c_draw_char+0x1c2>
    1568:	62 c0       	rjmp	.+196    	; 0x162e <ht1632c_draw_char+0x286>
		i = 128 + 7;
    156a:	47 e8       	ldi	r20, 0x87	; 135
    156c:	50 e0       	ldi	r21, 0x00	; 0
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    156e:	87 70       	andi	r24, 0x07	; 7
    1570:	99 27       	eor	r25, r25
    1572:	ba 01       	movw	r22, r20
    1574:	68 1b       	sub	r22, r24
    1576:	79 0b       	sbc	r23, r25
    1578:	cb 01       	movw	r24, r22
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    157a:	49 8d       	ldd	r20, Y+25	; 0x19
    157c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    157e:	84 0f       	add	r24, r20
    1580:	95 1f       	adc	r25, r21
static inline void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
}

static inline void ht1632c_clr_pixel(uint16_t i) {
	ledmatrix[i/8] &= ~_BV(i%8);
    1582:	dc 01       	movw	r26, r24
    1584:	b6 95       	lsr	r27
    1586:	a7 95       	ror	r26
    1588:	b6 95       	lsr	r27
    158a:	a7 95       	ror	r26
    158c:	b6 95       	lsr	r27
    158e:	a7 95       	ror	r26
    1590:	a2 56       	subi	r26, 0x62	; 98
    1592:	b9 4d       	sbci	r27, 0xD9	; 217
    1594:	87 70       	andi	r24, 0x07	; 7
    1596:	99 27       	eor	r25, r25
    1598:	b2 01       	movw	r22, r4
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <ht1632c_draw_char+0x1f8>
    159c:	66 0f       	add	r22, r22
    159e:	77 1f       	adc	r23, r23
    15a0:	8a 95       	dec	r24
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <ht1632c_draw_char+0x1f4>
    15a4:	cb 01       	movw	r24, r22
    15a6:	80 95       	com	r24
    15a8:	9c 91       	ld	r25, X
    15aa:	98 23       	and	r25, r24
    15ac:	9c 93       	st	X, r25
    15ae:	c5 cf       	rjmp	.-118    	; 0x153a <ht1632c_draw_char+0x192>
		return;
	}
	if (y >= HEIGHT) {
		return;
	}
	y = 15 - y;
    15b0:	d1 01       	movw	r26, r2
    15b2:	a8 1b       	sub	r26, r24
    15b4:	b9 0b       	sbc	r27, r25
    15b6:	cd 01       	movw	r24, r26

	y %= 24;
    15b8:	b6 01       	movw	r22, r12
    15ba:	0e 94 14 13 	call	0x2628	; 0x2628 <__divmodhi4>

	int i;

	if (y < 8) {
    15be:	88 30       	cpi	r24, 0x08	; 8
    15c0:	91 05       	cpc	r25, r1
    15c2:	7c f5       	brge	.+94     	; 0x1622 <ht1632c_draw_char+0x27a>
		i = 7;
    15c4:	47 e0       	ldi	r20, 0x07	; 7
    15c6:	50 e0       	ldi	r21, 0x00	; 0
	} else if (y < 16) {
		i = 128 + 7;
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    15c8:	87 70       	andi	r24, 0x07	; 7
    15ca:	99 27       	eor	r25, r25
    15cc:	ba 01       	movw	r22, r20
    15ce:	68 1b       	sub	r22, r24
    15d0:	79 0b       	sbc	r23, r25
    15d2:	cb 01       	movw	r24, r22
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    15d4:	49 8d       	ldd	r20, Y+25	; 0x19
    15d6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    15d8:	84 0f       	add	r24, r20
    15da:	95 1f       	adc	r25, r21
}

/*-------------------------Geometric functions----------------------------*/

static inline void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    15dc:	dc 01       	movw	r26, r24
    15de:	b6 95       	lsr	r27
    15e0:	a7 95       	ror	r26
    15e2:	b6 95       	lsr	r27
    15e4:	a7 95       	ror	r26
    15e6:	b6 95       	lsr	r27
    15e8:	a7 95       	ror	r26
    15ea:	a2 56       	subi	r26, 0x62	; 98
    15ec:	b9 4d       	sbci	r27, 0xD9	; 217
    15ee:	87 70       	andi	r24, 0x07	; 7
    15f0:	99 27       	eor	r25, r25
    15f2:	b2 01       	movw	r22, r4
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <ht1632c_draw_char+0x252>
    15f6:	66 0f       	add	r22, r22
    15f8:	77 1f       	adc	r23, r23
    15fa:	8a 95       	dec	r24
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <ht1632c_draw_char+0x24e>
    15fe:	cb 01       	movw	r24, r22
    1600:	9c 91       	ld	r25, X
    1602:	98 2b       	or	r25, r24
    1604:	9c 93       	st	X, r25
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
		for (uint8_t j=y; j<y+h; j++) {
    1606:	93 94       	inc	r9
    1608:	89 2d       	mov	r24, r9
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	82 17       	cp	r24, r18
    160e:	93 07       	cpc	r25, r19
    1610:	0c f0       	brlt	.+2      	; 0x1614 <ht1632c_draw_char+0x26c>
    1612:	84 cf       	rjmp	.-248    	; 0x151c <ht1632c_draw_char+0x174>
void ht1632c_draw_pixel(int x, int y, uint8_t color) {
	
	if (x >= WIDTH) {
		return;
	}
	if (y >= HEIGHT) {
    1614:	80 31       	cpi	r24, 0x10	; 16
    1616:	91 05       	cpc	r25, r1
    1618:	b4 f7       	brge	.-20     	; 0x1606 <ht1632c_draw_char+0x25e>
    161a:	ca cf       	rjmp	.-108    	; 0x15b0 <ht1632c_draw_char+0x208>
	y %= 24;

	int i;

	if (y < 8) {
		i = 7;
    161c:	47 e0       	ldi	r20, 0x07	; 7
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	a6 cf       	rjmp	.-180    	; 0x156e <ht1632c_draw_char+0x1c6>
	} else if (y < 16) {
    1622:	80 31       	cpi	r24, 0x10	; 16
    1624:	91 05       	cpc	r25, r1
    1626:	34 f4       	brge	.+12     	; 0x1634 <ht1632c_draw_char+0x28c>
		i = 128 + 7;
    1628:	47 e8       	ldi	r20, 0x87	; 135
    162a:	50 e0       	ldi	r21, 0x00	; 0
    162c:	cd cf       	rjmp	.-102    	; 0x15c8 <ht1632c_draw_char+0x220>
	} else {
		i = 256 + 7;
    162e:	47 e0       	ldi	r20, 0x07	; 7
    1630:	51 e0       	ldi	r21, 0x01	; 1
    1632:	9d cf       	rjmp	.-198    	; 0x156e <ht1632c_draw_char+0x1c6>
    1634:	47 e0       	ldi	r20, 0x07	; 7
    1636:	51 e0       	ldi	r21, 0x01	; 1
    1638:	c7 cf       	rjmp	.-114    	; 0x15c8 <ht1632c_draw_char+0x220>
    163a:	ea 85       	ldd	r30, Y+10	; 0x0a
    163c:	fb 85       	ldd	r31, Y+11	; 0x0b
    163e:	31 96       	adiw	r30, 0x01	; 1
    1640:	ea 87       	std	Y+10, r30	; 0x0a
    1642:	fb 87       	std	Y+11, r31	; 0x0b
    1644:	2d 81       	ldd	r18, Y+5	; 0x05
    1646:	3e 81       	ldd	r19, Y+6	; 0x06
    1648:	2f 5f       	subi	r18, 0xFF	; 255
    164a:	3f 4f       	sbci	r19, 0xFF	; 255
    164c:	2d 83       	std	Y+5, r18	; 0x05
    164e:	3e 83       	std	Y+6, r19	; 0x06
    1650:	4c 85       	ldd	r20, Y+12	; 0x0c
    1652:	5d 85       	ldd	r21, Y+13	; 0x0d
    1654:	4e 5f       	subi	r20, 0xFE	; 254
    1656:	5f 4f       	sbci	r21, 0xFF	; 255
    1658:	4c 87       	std	Y+12, r20	; 0x0c
    165a:	5d 87       	std	Y+13, r21	; 0x0d
    165c:	89 85       	ldd	r24, Y+9	; 0x09
    165e:	29 81       	ldd	r18, Y+1	; 0x01
    1660:	82 0f       	add	r24, r18
void ht1632c_draw_char(int16_t x, int16_t y, char c,uint16_t color, uint8_t size) {
	
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
    1662:	4d 81       	ldd	r20, Y+5	; 0x05
    1664:	5e 81       	ldd	r21, Y+6	; 0x06
    1666:	2d 89       	ldd	r18, Y+21	; 0x15
    1668:	3e 89       	ldd	r19, Y+22	; 0x16
    166a:	42 17       	cp	r20, r18
    166c:	53 07       	cpc	r21, r19
    166e:	11 f0       	breq	.+4      	; 0x1674 <ht1632c_draw_char+0x2cc>
    1670:	89 87       	std	Y+9, r24	; 0x09
    1672:	eb ce       	rjmp	.-554    	; 0x144a <ht1632c_draw_char+0xa2>
				}
			}
			line >>= 1;
		}
	}
}
    1674:	6a 96       	adiw	r28, 0x1a	; 26
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	df 90       	pop	r13
    1688:	cf 90       	pop	r12
    168a:	bf 90       	pop	r11
    168c:	af 90       	pop	r10
    168e:	9f 90       	pop	r9
    1690:	8f 90       	pop	r8
    1692:	7f 90       	pop	r7
    1694:	6f 90       	pop	r6
    1696:	5f 90       	pop	r5
    1698:	4f 90       	pop	r4
    169a:	3f 90       	pop	r3
    169c:	2f 90       	pop	r2
    169e:	08 95       	ret
	if (y >= HEIGHT) {
		return;
	}
	y = 15 - y;

	y %= 24;
    16a0:	c5 01       	movw	r24, r10
    16a2:	b6 01       	movw	r22, r12
    16a4:	c1 d7       	rcall	.+3970   	; 0x2628 <__divmodhi4>

	int i;

	if (y < 8) {
    16a6:	88 30       	cpi	r24, 0x08	; 8
    16a8:	91 05       	cpc	r25, r1
    16aa:	74 f0       	brlt	.+28     	; 0x16c8 <ht1632c_draw_char+0x320>
		i = 7;
	} else if (y < 16) {
    16ac:	80 31       	cpi	r24, 0x10	; 16
    16ae:	91 05       	cpc	r25, r1
    16b0:	9c f5       	brge	.+102    	; 0x1718 <ht1632c_draw_char+0x370>
		i = 128 + 7;
    16b2:	27 e8       	ldi	r18, 0x87	; 135
    16b4:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    16b6:	87 70       	andi	r24, 0x07	; 7
    16b8:	90 78       	andi	r25, 0x80	; 128
    16ba:	97 ff       	sbrs	r25, 7
    16bc:	0b c0       	rjmp	.+22     	; 0x16d4 <ht1632c_draw_char+0x32c>
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	88 6f       	ori	r24, 0xF8	; 248
    16c2:	9f 6f       	ori	r25, 0xFF	; 255
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	06 c0       	rjmp	.+12     	; 0x16d4 <ht1632c_draw_char+0x32c>
	y %= 24;

	int i;

	if (y < 8) {
		i = 7;
    16c8:	27 e0       	ldi	r18, 0x07	; 7
    16ca:	30 e0       	ldi	r19, 0x00	; 0
	} else if (y < 16) {
		i = 128 + 7;
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    16cc:	87 70       	andi	r24, 0x07	; 7
    16ce:	90 78       	andi	r25, 0x80	; 128
    16d0:	97 fd       	sbrc	r25, 7
    16d2:	f5 cf       	rjmp	.-22     	; 0x16be <ht1632c_draw_char+0x316>
    16d4:	b9 01       	movw	r22, r18
    16d6:	68 1b       	sub	r22, r24
    16d8:	79 0b       	sbc	r23, r25
    16da:	cb 01       	movw	r24, r22
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    16dc:	eb 89       	ldd	r30, Y+19	; 0x13
    16de:	fc 89       	ldd	r31, Y+20	; 0x14
    16e0:	8e 0f       	add	r24, r30
    16e2:	9f 1f       	adc	r25, r31

	if (color)
    16e4:	2a 81       	ldd	r18, Y+2	; 0x02
}

/*-------------------------Geometric functions----------------------------*/

static inline void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    16e6:	fc 01       	movw	r30, r24
    16e8:	f6 95       	lsr	r31
    16ea:	e7 95       	ror	r30
    16ec:	f6 95       	lsr	r31
    16ee:	e7 95       	ror	r30
    16f0:	f6 95       	lsr	r31
    16f2:	e7 95       	ror	r30
    16f4:	e2 56       	subi	r30, 0x62	; 98
    16f6:	f9 4d       	sbci	r31, 0xD9	; 217
    16f8:	87 70       	andi	r24, 0x07	; 7
    16fa:	99 27       	eor	r25, r25
		x = (x-8) * 2 + 1;
	}

	i += x * 8;

	if (color)
    16fc:	21 11       	cpse	r18, r1
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <ht1632c_draw_char+0x376>
static inline void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
}

static inline void ht1632c_clr_pixel(uint16_t i) {
	ledmatrix[i/8] &= ~_BV(i%8);
    1700:	b2 01       	movw	r22, r4
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <ht1632c_draw_char+0x360>
    1704:	66 0f       	add	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	8a 95       	dec	r24
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <ht1632c_draw_char+0x35c>
    170c:	cb 01       	movw	r24, r22
    170e:	80 95       	com	r24
    1710:	90 81       	ld	r25, Z
    1712:	89 23       	and	r24, r25
    1714:	80 83       	st	Z, r24
    1716:	c6 ce       	rjmp	.-628    	; 0x14a4 <ht1632c_draw_char+0xfc>
	if (y < 8) {
		i = 7;
	} else if (y < 16) {
		i = 128 + 7;
	} else {
		i = 256 + 7;
    1718:	27 e0       	ldi	r18, 0x07	; 7
    171a:	31 e0       	ldi	r19, 0x01	; 1
    171c:	d7 cf       	rjmp	.-82     	; 0x16cc <ht1632c_draw_char+0x324>
}

/*-------------------------Geometric functions----------------------------*/

static inline void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    171e:	a2 01       	movw	r20, r4
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <ht1632c_draw_char+0x37e>
    1722:	44 0f       	add	r20, r20
    1724:	55 1f       	adc	r21, r21
    1726:	8a 95       	dec	r24
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <ht1632c_draw_char+0x37a>
    172a:	ca 01       	movw	r24, r20
    172c:	90 81       	ld	r25, Z
    172e:	98 2b       	or	r25, r24
    1730:	90 83       	st	Z, r25
    1732:	b8 ce       	rjmp	.-656    	; 0x14a4 <ht1632c_draw_char+0xfc>

00001734 <btn_setup>:
	} else if (!(PORTA.IN & BUTTON2)) {
		uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL += 1;
		return BTN3;
	} else if (!(PORTB.IN & BUTTON3)) {
		uwrite_hex(DACB.CH0GAINCAL);
    1734:	e0 e0       	ldi	r30, 0x00	; 0
    1736:	f6 e0       	ldi	r31, 0x06	; 6
    1738:	20 ee       	ldi	r18, 0xE0	; 224
    173a:	22 83       	std	Z+2, r18	; 0x02
    173c:	a0 e2       	ldi	r26, 0x20	; 32
    173e:	b6 e0       	ldi	r27, 0x06	; 6
    1740:	91 e0       	ldi	r25, 0x01	; 1
    1742:	12 96       	adiw	r26, 0x02	; 2
    1744:	9c 93       	st	X, r25
    1746:	12 97       	sbiw	r26, 0x02	; 2
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	85 8b       	std	Z+21, r24	; 0x15
    174c:	86 8b       	std	Z+22, r24	; 0x16
    174e:	87 8b       	std	Z+23, r24	; 0x17
    1750:	50 96       	adiw	r26, 0x10	; 16
    1752:	8c 93       	st	X, r24
    1754:	50 97       	sbiw	r26, 0x10	; 16
    1756:	22 87       	std	Z+10, r18	; 0x0a
    1758:	1a 96       	adiw	r26, 0x0a	; 10
    175a:	9c 93       	st	X, r25
    175c:	1a 97       	sbiw	r26, 0x0a	; 10
    175e:	83 e0       	ldi	r24, 0x03	; 3
    1760:	81 87       	std	Z+9, r24	; 0x09
    1762:	19 96       	adiw	r26, 0x09	; 9
    1764:	8c 93       	st	X, r24
    1766:	08 95       	ret

00001768 <__vector_66>:
	} else {
		return NONE;
	}
}

ISR(PORTA_INT0_vect) {
    1768:	1f 92       	push	r1
    176a:	0f 92       	push	r0
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	0f 92       	push	r0
    1770:	11 24       	eor	r1, r1
    1772:	0b b6       	in	r0, 0x3b	; 59
    1774:	0f 92       	push	r0
    1776:	2f 93       	push	r18
    1778:	3f 93       	push	r19
    177a:	4f 93       	push	r20
    177c:	5f 93       	push	r21
    177e:	6f 93       	push	r22
    1780:	7f 93       	push	r23
    1782:	8f 93       	push	r24
    1784:	9f 93       	push	r25
    1786:	af 93       	push	r26
    1788:	bf 93       	push	r27
    178a:	ef 93       	push	r30
    178c:	ff 93       	push	r31
	
}

button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
    178e:	80 91 08 06 	lds	r24, 0x0608
    1792:	85 ff       	sbrs	r24, 5
    1794:	28 c0       	rjmp	.+80     	; 0x17e6 <__vector_66+0x7e>
		uwrite_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL += 1;
		return BTN1;
	} else if (!(PORTA.IN & BUTTON1)) {
    1796:	80 91 08 06 	lds	r24, 0x0608
    179a:	86 ff       	sbrs	r24, 6
    179c:	1e c0       	rjmp	.+60     	; 0x17da <__vector_66+0x72>
		uwrite_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL -= 1;
		return BTN2;
	} else if (!(PORTA.IN & BUTTON2)) {
    179e:	80 91 08 06 	lds	r24, 0x0608
    17a2:	87 fd       	sbrc	r24, 7
    17a4:	26 c0       	rjmp	.+76     	; 0x17f2 <__vector_66+0x8a>
		uwrite_hex(DACB.CH0GAINCAL);
    17a6:	80 91 28 03 	lds	r24, 0x0328
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	7d d5       	rcall	.+2810   	; 0x22a8 <uwrite_hex>
		//DACB.CH0GAINCAL += 1;
		return BTN3;
    17ae:	83 e0       	ldi	r24, 0x03	; 3
		return NONE;
	}
}

ISR(PORTA_INT0_vect) {
	btn_status = btn_check_press();
    17b0:	80 93 16 27 	sts	0x2716, r24
	//printf("%d",btn_status);
}
    17b4:	ff 91       	pop	r31
    17b6:	ef 91       	pop	r30
    17b8:	bf 91       	pop	r27
    17ba:	af 91       	pop	r26
    17bc:	9f 91       	pop	r25
    17be:	8f 91       	pop	r24
    17c0:	7f 91       	pop	r23
    17c2:	6f 91       	pop	r22
    17c4:	5f 91       	pop	r21
    17c6:	4f 91       	pop	r20
    17c8:	3f 91       	pop	r19
    17ca:	2f 91       	pop	r18
    17cc:	0f 90       	pop	r0
    17ce:	0b be       	out	0x3b, r0	; 59
    17d0:	0f 90       	pop	r0
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	0f 90       	pop	r0
    17d6:	1f 90       	pop	r1
    17d8:	18 95       	reti
	if (!(PORTA.IN & BUTTON0)) {
		uwrite_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL += 1;
		return BTN1;
	} else if (!(PORTA.IN & BUTTON1)) {
		uwrite_hex(DACB.CH0OFFSETCAL);
    17da:	80 91 29 03 	lds	r24, 0x0329
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	63 d5       	rcall	.+2758   	; 0x22a8 <uwrite_hex>
		//DACB.CH0OFFSETCAL -= 1;
		return BTN2;
    17e2:	82 e0       	ldi	r24, 0x02	; 2
    17e4:	e5 cf       	rjmp	.-54     	; 0x17b0 <__vector_66+0x48>
}

button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
		uwrite_hex(DACB.CH0OFFSETCAL);
    17e6:	80 91 29 03 	lds	r24, 0x0329
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	5d d5       	rcall	.+2746   	; 0x22a8 <uwrite_hex>
		//DACB.CH0OFFSETCAL += 1;
		return BTN1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	df cf       	rjmp	.-66     	; 0x17b0 <__vector_66+0x48>
		return BTN2;
	} else if (!(PORTA.IN & BUTTON2)) {
		uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL += 1;
		return BTN3;
	} else if (!(PORTB.IN & BUTTON3)) {
    17f2:	80 91 28 06 	lds	r24, 0x0628
    17f6:	80 ff       	sbrs	r24, 0
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <__vector_66+0x96>
		uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL -= 1;
		return BTN4;
	} else {
		return NONE;
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	d9 cf       	rjmp	.-78     	; 0x17b0 <__vector_66+0x48>
	} else if (!(PORTA.IN & BUTTON2)) {
		uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL += 1;
		return BTN3;
	} else if (!(PORTB.IN & BUTTON3)) {
		uwrite_hex(DACB.CH0GAINCAL);
    17fe:	80 91 28 03 	lds	r24, 0x0328
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	51 d5       	rcall	.+2722   	; 0x22a8 <uwrite_hex>
    1806:	84 e0       	ldi	r24, 0x04	; 4
    1808:	d3 cf       	rjmp	.-90     	; 0x17b0 <__vector_66+0x48>

0000180a <__vector_34>:
ISR(PORTA_INT0_vect) {
	btn_status = btn_check_press();
	//printf("%d",btn_status);
}

ISR(PORTB_INT0_vect) {
    180a:	1f 92       	push	r1
    180c:	0f 92       	push	r0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	0f 92       	push	r0
    1812:	11 24       	eor	r1, r1
    1814:	0b b6       	in	r0, 0x3b	; 59
    1816:	0f 92       	push	r0
    1818:	2f 93       	push	r18
    181a:	3f 93       	push	r19
    181c:	4f 93       	push	r20
    181e:	5f 93       	push	r21
    1820:	6f 93       	push	r22
    1822:	7f 93       	push	r23
    1824:	8f 93       	push	r24
    1826:	9f 93       	push	r25
    1828:	af 93       	push	r26
    182a:	bf 93       	push	r27
    182c:	ef 93       	push	r30
    182e:	ff 93       	push	r31
	
}

button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
    1830:	80 91 08 06 	lds	r24, 0x0608
    1834:	85 ff       	sbrs	r24, 5
    1836:	28 c0       	rjmp	.+80     	; 0x1888 <__vector_34+0x7e>
		uwrite_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL += 1;
		return BTN1;
	} else if (!(PORTA.IN & BUTTON1)) {
    1838:	80 91 08 06 	lds	r24, 0x0608
    183c:	86 ff       	sbrs	r24, 6
    183e:	1e c0       	rjmp	.+60     	; 0x187c <__vector_34+0x72>
		uwrite_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL -= 1;
		return BTN2;
	} else if (!(PORTA.IN & BUTTON2)) {
    1840:	80 91 08 06 	lds	r24, 0x0608
    1844:	87 fd       	sbrc	r24, 7
    1846:	26 c0       	rjmp	.+76     	; 0x1894 <__vector_34+0x8a>
		uwrite_hex(DACB.CH0GAINCAL);
    1848:	80 91 28 03 	lds	r24, 0x0328
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	2c d5       	rcall	.+2648   	; 0x22a8 <uwrite_hex>
		//DACB.CH0GAINCAL += 1;
		return BTN3;
    1850:	83 e0       	ldi	r24, 0x03	; 3
	btn_status = btn_check_press();
	//printf("%d",btn_status);
}

ISR(PORTB_INT0_vect) {
	btn_status = btn_check_press();
    1852:	80 93 16 27 	sts	0x2716, r24
	//printf("%d",btn_status);
    1856:	ff 91       	pop	r31
    1858:	ef 91       	pop	r30
    185a:	bf 91       	pop	r27
    185c:	af 91       	pop	r26
    185e:	9f 91       	pop	r25
    1860:	8f 91       	pop	r24
    1862:	7f 91       	pop	r23
    1864:	6f 91       	pop	r22
    1866:	5f 91       	pop	r21
    1868:	4f 91       	pop	r20
    186a:	3f 91       	pop	r19
    186c:	2f 91       	pop	r18
    186e:	0f 90       	pop	r0
    1870:	0b be       	out	0x3b, r0	; 59
    1872:	0f 90       	pop	r0
    1874:	0f be       	out	0x3f, r0	; 63
    1876:	0f 90       	pop	r0
    1878:	1f 90       	pop	r1
    187a:	18 95       	reti
	if (!(PORTA.IN & BUTTON0)) {
		uwrite_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL += 1;
		return BTN1;
	} else if (!(PORTA.IN & BUTTON1)) {
		uwrite_hex(DACB.CH0OFFSETCAL);
    187c:	80 91 29 03 	lds	r24, 0x0329
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	12 d5       	rcall	.+2596   	; 0x22a8 <uwrite_hex>
		//DACB.CH0OFFSETCAL -= 1;
		return BTN2;
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	e5 cf       	rjmp	.-54     	; 0x1852 <__vector_34+0x48>
}

button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
		uwrite_hex(DACB.CH0OFFSETCAL);
    1888:	80 91 29 03 	lds	r24, 0x0329
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0c d5       	rcall	.+2584   	; 0x22a8 <uwrite_hex>
		//DACB.CH0OFFSETCAL += 1;
		return BTN1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	df cf       	rjmp	.-66     	; 0x1852 <__vector_34+0x48>
		return BTN2;
	} else if (!(PORTA.IN & BUTTON2)) {
		uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL += 1;
		return BTN3;
	} else if (!(PORTB.IN & BUTTON3)) {
    1894:	80 91 28 06 	lds	r24, 0x0628
    1898:	80 ff       	sbrs	r24, 0
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <__vector_34+0x96>
		uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL -= 1;
		return BTN4;
	} else {
		return NONE;
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	d9 cf       	rjmp	.-78     	; 0x1852 <__vector_34+0x48>
	} else if (!(PORTA.IN & BUTTON2)) {
		uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL += 1;
		return BTN3;
	} else if (!(PORTB.IN & BUTTON3)) {
		uwrite_hex(DACB.CH0GAINCAL);
    18a0:	80 91 28 03 	lds	r24, 0x0328
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	00 d5       	rcall	.+2560   	; 0x22a8 <uwrite_hex>
    18a8:	84 e0       	ldi	r24, 0x04	; 4
    18aa:	d3 cf       	rjmp	.-90     	; 0x1852 <__vector_34+0x48>

000018ac <rtc_setup>:
	{
		x++;
	} else if (x == 15 && y < 15) {
		y++;
	} else if (y == 15 && x > 0) {
		x--;
    18ac:	88 ed       	ldi	r24, 0xD8	; 216
    18ae:	84 bf       	out	0x34, r24	; 52
    18b0:	8b e0       	ldi	r24, 0x0B	; 11
    18b2:	80 93 43 00 	sts	0x0043, r24
    18b6:	80 91 01 04 	lds	r24, 0x0401
    18ba:	80 fd       	sbrc	r24, 0
    18bc:	fc cf       	rjmp	.-8      	; 0x18b6 <rtc_setup+0xa>
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e8       	ldi	r25, 0x80	; 128
    18c2:	80 93 0a 04 	sts	0x040A, r24
    18c6:	90 93 0b 04 	sts	0x040B, r25
    18ca:	82 e0       	ldi	r24, 0x02	; 2
    18cc:	80 93 02 04 	sts	0x0402, r24
    18d0:	10 92 08 04 	sts	0x0408, r1
    18d4:	10 92 09 04 	sts	0x0409, r1
    18d8:	10 92 0c 04 	sts	0x040C, r1
    18dc:	10 92 0d 04 	sts	0x040D, r1
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	80 93 00 04 	sts	0x0400, r24
    18e6:	08 95       	ret

000018e8 <rtc_set_time>:
    18e8:	ef 92       	push	r14
    18ea:	ff 92       	push	r15
    18ec:	0f 93       	push	r16
    18ee:	1f 93       	push	r17
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <rtc_set_time+0xe>
    18f6:	1f 92       	push	r1
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	f8 94       	cli
    18fe:	80 93 17 27 	sts	0x2717, r24
    1902:	60 93 18 27 	sts	0x2718, r22
    1906:	40 93 19 27 	sts	0x2719, r20
    190a:	20 93 1a 27 	sts	0x271A, r18
    190e:	30 93 1b 27 	sts	0x271B, r19
    1912:	00 93 1d 27 	sts	0x271D, r16
    1916:	10 93 1e 27 	sts	0x271E, r17
    191a:	1f 92       	push	r1
    191c:	6f 93       	push	r22
    191e:	81 e8       	ldi	r24, 0x81	; 129
    1920:	95 e2       	ldi	r25, 0x25	; 37
    1922:	9f 93       	push	r25
    1924:	8f 93       	push	r24
    1926:	ce 01       	movw	r24, r28
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	7c 01       	movw	r14, r24
    192c:	ff 92       	push	r15
    192e:	8f 93       	push	r24
    1930:	6b 83       	std	Y+3, r22	; 0x03
    1932:	11 d7       	rcall	.+3618   	; 0x2756 <sprintf>
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	6b 81       	ldd	r22, Y+3	; 0x03
    1942:	6a 30       	cpi	r22, 0x0A	; 10
    1944:	20 f4       	brcc	.+8      	; 0x194e <rtc_set_time+0x66>
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	90 e3       	ldi	r25, 0x30	; 48
    194a:	99 83       	std	Y+1, r25	; 0x01
    194c:	8a 83       	std	Y+2, r24	; 0x02
    194e:	00 e0       	ldi	r16, 0x00	; 0
    1950:	10 e0       	ldi	r17, 0x00	; 0
    1952:	28 e0       	ldi	r18, 0x08	; 8
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e1       	ldi	r20, 0x10	; 16
    1958:	50 e0       	ldi	r21, 0x00	; 0
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	e4 da       	rcall	.-2616   	; 0xf2c <ht1632c_fill_rect>
    1964:	49 81       	ldd	r20, Y+1	; 0x01
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	01 e0       	ldi	r16, 0x01	; 1
    196a:	10 e0       	ldi	r17, 0x00	; 0
    196c:	21 e0       	ldi	r18, 0x01	; 1
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	82 e0       	ldi	r24, 0x02	; 2
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	17 dd       	rcall	.-1490   	; 0x13a8 <ht1632c_draw_char>
    197a:	4a 81       	ldd	r20, Y+2	; 0x02
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	21 e0       	ldi	r18, 0x01	; 1
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	89 e0       	ldi	r24, 0x09	; 9
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e dd       	rcall	.-1508   	; 0x13a8 <ht1632c_draw_char>
    198c:	ab db       	rcall	.-2218   	; 0x10e4 <ht1632c_refresh_screen>
    198e:	10 91 19 27 	lds	r17, 0x2719
    1992:	1f 92       	push	r1
    1994:	1f 93       	push	r17
    1996:	81 e8       	ldi	r24, 0x81	; 129
    1998:	95 e2       	ldi	r25, 0x25	; 37
    199a:	9f 93       	push	r25
    199c:	8f 93       	push	r24
    199e:	ff 92       	push	r15
    19a0:	ef 92       	push	r14
    19a2:	d9 d6       	rcall	.+3506   	; 0x2756 <sprintf>
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	1a 30       	cpi	r17, 0x0A	; 10
    19b2:	20 f4       	brcc	.+8      	; 0x19bc <rtc_set_time+0xd4>
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	90 e3       	ldi	r25, 0x30	; 48
    19b8:	99 83       	std	Y+1, r25	; 0x01
    19ba:	8a 83       	std	Y+2, r24	; 0x02
    19bc:	00 e0       	ldi	r16, 0x00	; 0
    19be:	10 e0       	ldi	r17, 0x00	; 0
    19c0:	28 e0       	ldi	r18, 0x08	; 8
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e1       	ldi	r20, 0x10	; 16
    19c6:	50 e0       	ldi	r21, 0x00	; 0
    19c8:	69 e0       	ldi	r22, 0x09	; 9
    19ca:	70 e0       	ldi	r23, 0x00	; 0
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	ad da       	rcall	.-2726   	; 0xf2c <ht1632c_fill_rect>
    19d2:	49 81       	ldd	r20, Y+1	; 0x01
    19d4:	50 e0       	ldi	r21, 0x00	; 0
    19d6:	01 e0       	ldi	r16, 0x01	; 1
    19d8:	10 e0       	ldi	r17, 0x00	; 0
    19da:	21 e0       	ldi	r18, 0x01	; 1
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	69 e0       	ldi	r22, 0x09	; 9
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	82 e0       	ldi	r24, 0x02	; 2
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	e0 dc       	rcall	.-1600   	; 0x13a8 <ht1632c_draw_char>
    19e8:	4a 81       	ldd	r20, Y+2	; 0x02
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	21 e0       	ldi	r18, 0x01	; 1
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	69 e0       	ldi	r22, 0x09	; 9
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	89 e0       	ldi	r24, 0x09	; 9
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	d7 dc       	rcall	.-1618   	; 0x13a8 <ht1632c_draw_char>
    19fa:	74 db       	rcall	.-2328   	; 0x10e4 <ht1632c_refresh_screen>
    19fc:	78 94       	sei
    19fe:	23 96       	adiw	r28, 0x03	; 3
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	08 95       	ret

00001a12 <__vector_10>:
	ht1632c_draw_pixel(x,y,1);
	
	ht1632c_refresh_screen();
}

ISR(RTC_OVF_vect) {
    1a12:	1f 92       	push	r1
    1a14:	0f 92       	push	r0
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	0f 92       	push	r0
    1a1a:	11 24       	eor	r1, r1
    1a1c:	0b b6       	in	r0, 0x3b	; 59
    1a1e:	0f 92       	push	r0
    1a20:	bf 92       	push	r11
    1a22:	cf 92       	push	r12
    1a24:	df 92       	push	r13
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
    1a2e:	2f 93       	push	r18
    1a30:	3f 93       	push	r19
    1a32:	4f 93       	push	r20
    1a34:	5f 93       	push	r21
    1a36:	6f 93       	push	r22
    1a38:	7f 93       	push	r23
    1a3a:	8f 93       	push	r24
    1a3c:	9f 93       	push	r25
    1a3e:	af 93       	push	r26
    1a40:	bf 93       	push	r27
    1a42:	ef 93       	push	r30
    1a44:	ff 93       	push	r31
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <__vector_10+0x3a>
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
	//rtc_update_seconds();
	if (++time.seconds == 60) {
    1a50:	80 91 17 27 	lds	r24, 0x2717
    1a54:	8f 5f       	subi	r24, 0xFF	; 255
    1a56:	8c 33       	cpi	r24, 0x3C	; 60
    1a58:	01 f1       	breq	.+64     	; 0x1a9a <__vector_10+0x88>
    1a5a:	80 93 17 27 	sts	0x2717, r24
			time.minutes = 0;
		} else {
			rtc_update_display(BOTTOM,time.minutes);
		}
	}
}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	ff 91       	pop	r31
    1a68:	ef 91       	pop	r30
    1a6a:	bf 91       	pop	r27
    1a6c:	af 91       	pop	r26
    1a6e:	9f 91       	pop	r25
    1a70:	8f 91       	pop	r24
    1a72:	7f 91       	pop	r23
    1a74:	6f 91       	pop	r22
    1a76:	5f 91       	pop	r21
    1a78:	4f 91       	pop	r20
    1a7a:	3f 91       	pop	r19
    1a7c:	2f 91       	pop	r18
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	df 90       	pop	r13
    1a88:	cf 90       	pop	r12
    1a8a:	bf 90       	pop	r11
    1a8c:	0f 90       	pop	r0
    1a8e:	0b be       	out	0x3b, r0	; 59
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	0f 90       	pop	r0
    1a96:	1f 90       	pop	r1
    1a98:	18 95       	reti

ISR(RTC_OVF_vect) {
	//rtc_update_seconds();
	if (++time.seconds == 60) {
		
		time.seconds = 0;
    1a9a:	10 92 17 27 	sts	0x2717, r1
			
		if (++time.minutes == 60) {
    1a9e:	10 91 18 27 	lds	r17, 0x2718
    1aa2:	1f 5f       	subi	r17, 0xFF	; 255
    1aa4:	10 93 18 27 	sts	0x2718, r17
    1aa8:	1c 33       	cpi	r17, 0x3C	; 60
    1aaa:	c1 f1       	breq	.+112    	; 0x1b1c <__vector_10+0x10a>
void rtc_update_display(uint8_t pos, uint8_t t) {
	
	char buffer[2];
	char temp;
	
	sprintf(buffer, "%d", t);
    1aac:	1f 92       	push	r1
    1aae:	1f 93       	push	r17
    1ab0:	81 e8       	ldi	r24, 0x81	; 129
    1ab2:	95 e2       	ldi	r25, 0x25	; 37
    1ab4:	9f 93       	push	r25
    1ab6:	8f 93       	push	r24
    1ab8:	ce 01       	movw	r24, r28
    1aba:	01 96       	adiw	r24, 0x01	; 1
    1abc:	9f 93       	push	r25
    1abe:	8f 93       	push	r24
    1ac0:	4a d6       	rcall	.+3220   	; 0x2756 <sprintf>
	
	//add zero
	if (t < 10) {
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	1a 30       	cpi	r17, 0x0A	; 10
    1ad0:	20 f4       	brcc	.+8      	; 0x1ada <__vector_10+0xc8>
		temp = buffer[0];
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    1ad4:	90 e3       	ldi	r25, 0x30	; 48
    1ad6:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    1ad8:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	//Clear old numbers
	ht1632c_fill_rect(0,pos,16,8,0);
    1ada:	00 e0       	ldi	r16, 0x00	; 0
    1adc:	10 e0       	ldi	r17, 0x00	; 0
    1ade:	28 e0       	ldi	r18, 0x08	; 8
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e1       	ldi	r20, 0x10	; 16
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	1e da       	rcall	.-3012   	; 0xf2c <ht1632c_fill_rect>
	
	//Write new numbers
	ht1632c_draw_char(2,pos,buffer[0],1,1);
    1af0:	49 81       	ldd	r20, Y+1	; 0x01
    1af2:	50 e0       	ldi	r21, 0x00	; 0
    1af4:	01 e0       	ldi	r16, 0x01	; 1
    1af6:	10 e0       	ldi	r17, 0x00	; 0
    1af8:	21 e0       	ldi	r18, 0x01	; 1
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	51 dc       	rcall	.-1886   	; 0x13a8 <ht1632c_draw_char>
	ht1632c_draw_char(9,pos,buffer[1],1,1);
    1b06:	4a 81       	ldd	r20, Y+2	; 0x02
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	21 e0       	ldi	r18, 0x01	; 1
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	89 e0       	ldi	r24, 0x09	; 9
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	48 dc       	rcall	.-1904   	; 0x13a8 <ht1632c_draw_char>
	
	ht1632c_refresh_screen();
    1b18:	e5 da       	rcall	.-2614   	; 0x10e4 <ht1632c_refresh_screen>
    1b1a:	a1 cf       	rjmp	.-190    	; 0x1a5e <__vector_10+0x4c>
		
		time.seconds = 0;
			
		if (++time.minutes == 60) {
			
			time.minutes = 0;
    1b1c:	10 92 18 27 	sts	0x2718, r1
void rtc_update_display(uint8_t pos, uint8_t t) {
	
	char buffer[2];
	char temp;
	
	sprintf(buffer, "%d", t);
    1b20:	1f 92       	push	r1
    1b22:	1f 92       	push	r1
    1b24:	61 e8       	ldi	r22, 0x81	; 129
    1b26:	c6 2e       	mov	r12, r22
    1b28:	65 e2       	ldi	r22, 0x25	; 37
    1b2a:	d6 2e       	mov	r13, r22
    1b2c:	df 92       	push	r13
    1b2e:	cf 92       	push	r12
    1b30:	ce 01       	movw	r24, r28
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	7c 01       	movw	r14, r24
    1b36:	ff 92       	push	r15
    1b38:	8f 93       	push	r24
    1b3a:	0d d6       	rcall	.+3098   	; 0x2756 <sprintf>
	
	//add zero
	if (t < 10) {
		temp = buffer[0];
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    1b3e:	70 e3       	ldi	r23, 0x30	; 48
    1b40:	b7 2e       	mov	r11, r23
    1b42:	b9 82       	std	Y+1, r11	; 0x01
		buffer[1] = temp;
    1b44:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	//Clear old numbers
	ht1632c_fill_rect(0,pos,16,8,0);
    1b46:	00 e0       	ldi	r16, 0x00	; 0
    1b48:	10 e0       	ldi	r17, 0x00	; 0
    1b4a:	28 e0       	ldi	r18, 0x08	; 8
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e1       	ldi	r20, 0x10	; 16
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	e8 d9       	rcall	.-3120   	; 0xf2c <ht1632c_fill_rect>
	
	//Write new numbers
	ht1632c_draw_char(2,pos,buffer[0],1,1);
    1b5c:	49 81       	ldd	r20, Y+1	; 0x01
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	01 e0       	ldi	r16, 0x01	; 1
    1b62:	10 e0       	ldi	r17, 0x00	; 0
    1b64:	21 e0       	ldi	r18, 0x01	; 1
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	82 e0       	ldi	r24, 0x02	; 2
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	1b dc       	rcall	.-1994   	; 0x13a8 <ht1632c_draw_char>
	ht1632c_draw_char(9,pos,buffer[1],1,1);
    1b72:	4a 81       	ldd	r20, Y+2	; 0x02
    1b74:	50 e0       	ldi	r21, 0x00	; 0
    1b76:	21 e0       	ldi	r18, 0x01	; 1
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	89 e0       	ldi	r24, 0x09	; 9
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	12 dc       	rcall	.-2012   	; 0x13a8 <ht1632c_draw_char>
	
	ht1632c_refresh_screen();
    1b84:	af da       	rcall	.-2722   	; 0x10e4 <ht1632c_refresh_screen>
		if (++time.minutes == 60) {
			
			time.minutes = 0;
			rtc_update_display(BOTTOM,time.minutes);
			
			if (++time.hours == 24) {
    1b86:	10 91 19 27 	lds	r17, 0x2719
    1b8a:	1f 5f       	subi	r17, 0xFF	; 255
    1b8c:	10 93 19 27 	sts	0x2719, r17
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	18 31       	cpi	r17, 0x18	; 24
    1b9e:	a9 f1       	breq	.+106    	; 0x1c0a <__vector_10+0x1f8>
void rtc_update_display(uint8_t pos, uint8_t t) {
	
	char buffer[2];
	char temp;
	
	sprintf(buffer, "%d", t);
    1ba0:	1f 92       	push	r1
    1ba2:	1f 93       	push	r17
    1ba4:	df 92       	push	r13
    1ba6:	cf 92       	push	r12
    1ba8:	ff 92       	push	r15
    1baa:	ef 92       	push	r14
    1bac:	d4 d5       	rcall	.+2984   	; 0x2756 <sprintf>
	
	//add zero
	if (t < 10) {
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	1a 30       	cpi	r17, 0x0A	; 10
    1bbc:	18 f4       	brcc	.+6      	; 0x1bc4 <__vector_10+0x1b2>
		temp = buffer[0];
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    1bc0:	b9 82       	std	Y+1, r11	; 0x01
		buffer[1] = temp;
    1bc2:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	//Clear old numbers
	ht1632c_fill_rect(0,pos,16,8,0);
    1bc4:	00 e0       	ldi	r16, 0x00	; 0
    1bc6:	10 e0       	ldi	r17, 0x00	; 0
    1bc8:	28 e0       	ldi	r18, 0x08	; 8
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e1       	ldi	r20, 0x10	; 16
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	69 e0       	ldi	r22, 0x09	; 9
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a9 d9       	rcall	.-3246   	; 0xf2c <ht1632c_fill_rect>
	
	//Write new numbers
	ht1632c_draw_char(2,pos,buffer[0],1,1);
    1bda:	49 81       	ldd	r20, Y+1	; 0x01
    1bdc:	50 e0       	ldi	r21, 0x00	; 0
    1bde:	01 e0       	ldi	r16, 0x01	; 1
    1be0:	10 e0       	ldi	r17, 0x00	; 0
    1be2:	21 e0       	ldi	r18, 0x01	; 1
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	69 e0       	ldi	r22, 0x09	; 9
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	82 e0       	ldi	r24, 0x02	; 2
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	dc db       	rcall	.-2120   	; 0x13a8 <ht1632c_draw_char>
	ht1632c_draw_char(9,pos,buffer[1],1,1);
    1bf0:	4a 81       	ldd	r20, Y+2	; 0x02
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	21 e0       	ldi	r18, 0x01	; 1
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	69 e0       	ldi	r22, 0x09	; 9
    1bfa:	70 e0       	ldi	r23, 0x00	; 0
    1bfc:	89 e0       	ldi	r24, 0x09	; 9
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	d3 db       	rcall	.-2138   	; 0x13a8 <ht1632c_draw_char>
	
	ht1632c_refresh_screen();
    1c02:	70 da       	rcall	.-2848   	; 0x10e4 <ht1632c_refresh_screen>
				time.hours = 0;
				rtc_update_display(TOP,time.hours);
			} else {
				rtc_update_display(TOP,time.hours);
			}
			time.minutes = 0;
    1c04:	10 92 18 27 	sts	0x2718, r1
    1c08:	2a cf       	rjmp	.-428    	; 0x1a5e <__vector_10+0x4c>
			
			time.minutes = 0;
			rtc_update_display(BOTTOM,time.minutes);
			
			if (++time.hours == 24) {
				time.weeks += (++time.days)/7;
    1c0a:	e0 91 1c 27 	lds	r30, 0x271C
    1c0e:	40 91 1a 27 	lds	r20, 0x271A
    1c12:	50 91 1b 27 	lds	r21, 0x271B
    1c16:	4f 5f       	subi	r20, 0xFF	; 255
    1c18:	5f 4f       	sbci	r21, 0xFF	; 255
    1c1a:	40 93 1a 27 	sts	0x271A, r20
    1c1e:	50 93 1b 27 	sts	0x271B, r21
    1c22:	9a 01       	movw	r18, r20
    1c24:	a3 e9       	ldi	r26, 0x93	; 147
    1c26:	b4 e2       	ldi	r27, 0x24	; 36
    1c28:	12 d5       	rcall	.+2596   	; 0x264e <__umulhisi3>
    1c2a:	28 1b       	sub	r18, r24
    1c2c:	39 0b       	sbc	r19, r25
    1c2e:	36 95       	lsr	r19
    1c30:	27 95       	ror	r18
    1c32:	28 0f       	add	r18, r24
    1c34:	39 1f       	adc	r19, r25
    1c36:	36 95       	lsr	r19
    1c38:	27 95       	ror	r18
    1c3a:	36 95       	lsr	r19
    1c3c:	27 95       	ror	r18
    1c3e:	e2 0f       	add	r30, r18
    1c40:	e0 93 1c 27 	sts	0x271C, r30
				time.year += time.weeks/52;
    1c44:	8f e4       	ldi	r24, 0x4F	; 79
    1c46:	e8 9f       	mul	r30, r24
    1c48:	e1 2d       	mov	r30, r1
    1c4a:	11 24       	eor	r1, r1
    1c4c:	e2 95       	swap	r30
    1c4e:	ef 70       	andi	r30, 0x0F	; 15
    1c50:	80 91 1d 27 	lds	r24, 0x271D
    1c54:	90 91 1e 27 	lds	r25, 0x271E
    1c58:	8e 0f       	add	r24, r30
    1c5a:	91 1d       	adc	r25, r1
    1c5c:	80 93 1d 27 	sts	0x271D, r24
    1c60:	90 93 1e 27 	sts	0x271E, r25
				time.hours = 0;
    1c64:	10 92 19 27 	sts	0x2719, r1
void rtc_update_display(uint8_t pos, uint8_t t) {
	
	char buffer[2];
	char temp;
	
	sprintf(buffer, "%d", t);
    1c68:	1f 92       	push	r1
    1c6a:	1f 92       	push	r1
    1c6c:	df 92       	push	r13
    1c6e:	cf 92       	push	r12
    1c70:	ff 92       	push	r15
    1c72:	ef 92       	push	r14
    1c74:	70 d5       	rcall	.+2784   	; 0x2756 <sprintf>
	
	//add zero
	if (t < 10) {
		temp = buffer[0];
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    1c78:	b9 82       	std	Y+1, r11	; 0x01
		buffer[1] = temp;
    1c7a:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	//Clear old numbers
	ht1632c_fill_rect(0,pos,16,8,0);
    1c7c:	00 e0       	ldi	r16, 0x00	; 0
    1c7e:	10 e0       	ldi	r17, 0x00	; 0
    1c80:	28 e0       	ldi	r18, 0x08	; 8
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e1       	ldi	r20, 0x10	; 16
    1c86:	50 e0       	ldi	r21, 0x00	; 0
    1c88:	69 e0       	ldi	r22, 0x09	; 9
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	4d d9       	rcall	.-3430   	; 0xf2c <ht1632c_fill_rect>
	
	//Write new numbers
	ht1632c_draw_char(2,pos,buffer[0],1,1);
    1c92:	49 81       	ldd	r20, Y+1	; 0x01
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	01 e0       	ldi	r16, 0x01	; 1
    1c98:	10 e0       	ldi	r17, 0x00	; 0
    1c9a:	21 e0       	ldi	r18, 0x01	; 1
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	69 e0       	ldi	r22, 0x09	; 9
    1ca0:	70 e0       	ldi	r23, 0x00	; 0
    1ca2:	82 e0       	ldi	r24, 0x02	; 2
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	80 db       	rcall	.-2304   	; 0x13a8 <ht1632c_draw_char>
	ht1632c_draw_char(9,pos,buffer[1],1,1);
    1ca8:	4a 81       	ldd	r20, Y+2	; 0x02
    1caa:	50 e0       	ldi	r21, 0x00	; 0
    1cac:	21 e0       	ldi	r18, 0x01	; 1
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	69 e0       	ldi	r22, 0x09	; 9
    1cb2:	70 e0       	ldi	r23, 0x00	; 0
    1cb4:	89 e0       	ldi	r24, 0x09	; 9
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	77 db       	rcall	.-2322   	; 0x13a8 <ht1632c_draw_char>
	
	ht1632c_refresh_screen();
    1cba:	14 da       	rcall	.-3032   	; 0x10e4 <ht1632c_refresh_screen>
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	9d cf       	rjmp	.-198    	; 0x1c04 <__vector_10+0x1f2>

00001cca <Si114xPauseAll>:
{
	return _sendCmd(si114x_handle,0x0B);
}

s16 Si114xPauseAll(HANDLE si114x_handle)
{
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	cf 93       	push	r28
    1cd0:	df 93       	push	r29
    1cd2:	ec 01       	movw	r28, r24
	while (1)
	{
		// Keep sending nops until the response is zero
		while (1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    1cd4:	60 e2       	ldi	r22, 0x20	; 32
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	b2 d0       	rcall	.+356    	; 0x1e3e <Si114xReadFromRegister>

	s16  response;
	s16  retval;

	// Get the response register contents
	if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    1cda:	60 e2       	ldi	r22, 0x20	; 32
	while (1)
	{
		// Keep sending nops until the response is zero
		while (1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    1cdc:	89 2b       	or	r24, r25
    1cde:	61 f5       	brne	.+88     	; 0x1d38 <Si114xPauseAll+0x6e>

	s16  response;
	s16  retval;

	// Get the response register contents
	if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	ad d0       	rcall	.+346    	; 0x1e3e <Si114xReadFromRegister>
    1ce4:	8c 01       	movw	r16, r24
    1ce6:	97 fd       	sbrc	r25, 7
    1ce8:	16 c0       	rjmp	.+44     	; 0x1d16 <Si114xPauseAll+0x4c>
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <Si114xPauseAll+0x26>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    1cec:	97 fd       	sbrc	r25, 7
    1cee:	13 c0       	rjmp	.+38     	; 0x1d16 <Si114xPauseAll+0x4c>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1cf0:	60 e3       	ldi	r22, 0x30	; 48
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	a4 d0       	rcall	.+328    	; 0x1e3e <Si114xReadFromRegister>
		if (retval == 1) break;
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	c1 f7       	brne	.-16     	; 0x1cec <Si114xPauseAll+0x22>
	{
		if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

		if(command==0) break; // Skip if the command is NOP

		retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1cfc:	60 e2       	ldi	r22, 0x20	; 32
    1cfe:	ce 01       	movw	r24, r28
    1d00:	9e d0       	rcall	.+316    	; 0x1e3e <Si114xReadFromRegister>
		if(retval==response) break;
    1d02:	80 17       	cp	r24, r16
    1d04:	91 07       	cpc	r25, r17
    1d06:	39 f1       	breq	.+78     	; 0x1d56 <Si114xPauseAll+0x8c>
		else if(retval<0) return retval;
    1d08:	97 fd       	sbrc	r25, 7
    1d0a:	05 c0       	rjmp	.+10     	; 0x1d16 <Si114xPauseAll+0x4c>
    1d0c:	8c 01       	movw	r16, r24
    1d0e:	f0 cf       	rjmp	.-32     	; 0x1cf0 <Si114xPauseAll+0x26>
	while(1)
	{

		if(command==0) break; // Skip if the command is NOP

		retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1d10:	60 e2       	ldi	r22, 0x20	; 32
    1d12:	ce 01       	movw	r24, r28
    1d14:	94 d0       	rcall	.+296    	; 0x1e3e <Si114xReadFromRegister>
		_PsAlsPause(si114x_handle);

		// Wait for response
		while(1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    1d16:	60 e2       	ldi	r22, 0x20	; 32
    1d18:	ce 01       	movw	r24, r28
    1d1a:	91 d0       	rcall	.+290    	; 0x1e3e <Si114xReadFromRegister>
    1d1c:	89 2b       	or	r24, r25
    1d1e:	d9 f3       	breq	.-10     	; 0x1d16 <Si114xPauseAll+0x4c>
			break;
		}

		// When the PsAlsPause() response is good, we expect it to be a '1'.
		if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
    1d20:	60 e2       	ldi	r22, 0x20	; 32
    1d22:	ce 01       	movw	r24, r28
    1d24:	8c d0       	rcall	.+280    	; 0x1e3e <Si114xReadFromRegister>
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	a9 f6       	brne	.-86     	; 0x1cd4 <Si114xPauseAll+0xa>
		break;  // otherwise, start over.
	}
	return 0;
}
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	1f 91       	pop	r17
    1d34:	0f 91       	pop	r16
    1d36:	08 95       	ret

	s16  response;
	s16  retval;

	// Get the response register contents
	if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    1d38:	ce 01       	movw	r24, r28
    1d3a:	81 d0       	rcall	.+258    	; 0x1e3e <Si114xReadFromRegister>
    1d3c:	97 fd       	sbrc	r25, 7
    1d3e:	ca cf       	rjmp	.-108    	; 0x1cd4 <Si114xPauseAll+0xa>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1d40:	60 e3       	ldi	r22, 0x30	; 48
    1d42:	ce 01       	movw	r24, r28
    1d44:	7c d0       	rcall	.+248    	; 0x1e3e <Si114xReadFromRegister>
		if (retval == 1) break;
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	91 05       	cpc	r25, r1
    1d4a:	c1 f7       	brne	.-16     	; 0x1d3c <Si114xPauseAll+0x72>
		else if(retval<0) return retval;
		else response = retval;
	}

	// Send the Command
	if ((retval=Si114xWriteToRegister(si114x_handle, REG_COMMAND, command)) !=0)
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	68 e1       	ldi	r22, 0x18	; 24
    1d50:	ce 01       	movw	r24, r28
    1d52:	58 d0       	rcall	.+176    	; 0x1e04 <Si114xWriteToRegister>
    1d54:	bf cf       	rjmp	.-130    	; 0x1cd4 <Si114xPauseAll+0xa>
    1d56:	4b e0       	ldi	r20, 0x0B	; 11
    1d58:	68 e1       	ldi	r22, 0x18	; 24
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	53 d0       	rcall	.+166    	; 0x1e04 <Si114xWriteToRegister>
    1d5e:	89 2b       	or	r24, r25
    1d60:	d1 f6       	brne	.-76     	; 0x1d16 <Si114xPauseAll+0x4c>
    1d62:	17 fd       	sbrc	r17, 7
    1d64:	d5 cf       	rjmp	.-86     	; 0x1d10 <Si114xPauseAll+0x46>
	while(1)
	{

		if(command==0) break; // Skip if the command is NOP

		retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1d66:	60 e2       	ldi	r22, 0x20	; 32
    1d68:	ce 01       	movw	r24, r28
    1d6a:	69 d0       	rcall	.+210    	; 0x1e3e <Si114xReadFromRegister>
		if (retval != response) break;
    1d6c:	08 17       	cp	r16, r24
    1d6e:	19 07       	cpc	r17, r25
    1d70:	d1 f3       	breq	.-12     	; 0x1d66 <Si114xPauseAll+0x9c>
		_PsAlsPause(si114x_handle);

		// Wait for response
		while(1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    1d72:	60 e2       	ldi	r22, 0x20	; 32
    1d74:	ce 01       	movw	r24, r28
    1d76:	63 d0       	rcall	.+198    	; 0x1e3e <Si114xReadFromRegister>
    1d78:	89 2b       	or	r24, r25
    1d7a:	69 f2       	breq	.-102    	; 0x1d16 <Si114xPauseAll+0x4c>
    1d7c:	d1 cf       	rjmp	.-94     	; 0x1d20 <Si114xPauseAll+0x56>

00001d7e <si114x_reset>:
	return 0;
}


s16 si114x_reset(HANDLE si114x_handle)
{
    1d7e:	0f 93       	push	r16
    1d80:	1f 93       	push	r17
    1d82:	cf 93       	push	r28
    1d84:	df 93       	push	r29
    1d86:	8c 01       	movw	r16, r24
	//
	// delay_10ms();
	// delay_10ms();
	// delay_10ms();

	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	68 e0       	ldi	r22, 0x08	; 8
    1d8c:	3b d0       	rcall	.+118    	; 0x1e04 <Si114xWriteToRegister>
    1d8e:	ec 01       	movw	r28, r24
	retval+=Si114xPauseAll(si114x_handle);
    1d90:	c8 01       	movw	r24, r16
    1d92:	9b df       	rcall	.-202    	; 0x1cca <Si114xPauseAll>
    1d94:	c8 0f       	add	r28, r24
    1d96:	d9 1f       	adc	r29, r25

	// The clearing of the registers could be redundant, but it is okay.
	// This is to make sure that these registers are cleared.
	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	68 e0       	ldi	r22, 0x08	; 8
    1d9c:	c8 01       	movw	r24, r16
    1d9e:	32 d0       	rcall	.+100    	; 0x1e04 <Si114xWriteToRegister>
    1da0:	c8 0f       	add	r28, r24
    1da2:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	64 e0       	ldi	r22, 0x04	; 4
    1da8:	c8 01       	movw	r24, r16
    1daa:	2c d0       	rcall	.+88     	; 0x1e04 <Si114xWriteToRegister>
    1dac:	c8 0f       	add	r28, r24
    1dae:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	65 e0       	ldi	r22, 0x05	; 5
    1db4:	c8 01       	movw	r24, r16
    1db6:	26 d0       	rcall	.+76     	; 0x1e04 <Si114xWriteToRegister>
    1db8:	c8 0f       	add	r28, r24
    1dba:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	66 e0       	ldi	r22, 0x06	; 6
    1dc0:	c8 01       	movw	r24, r16
    1dc2:	20 d0       	rcall	.+64     	; 0x1e04 <Si114xWriteToRegister>
    1dc4:	c8 0f       	add	r28, r24
    1dc6:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	63 e0       	ldi	r22, 0x03	; 3
    1dcc:	c8 01       	movw	r24, r16
    1dce:	1a d0       	rcall	.+52     	; 0x1e04 <Si114xWriteToRegister>
    1dd0:	c8 0f       	add	r28, r24
    1dd2:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
    1dd4:	4f ef       	ldi	r20, 0xFF	; 255
    1dd6:	61 e2       	ldi	r22, 0x21	; 33
    1dd8:	c8 01       	movw	r24, r16
    1dda:	14 d0       	rcall	.+40     	; 0x1e04 <Si114xWriteToRegister>
    1ddc:	c8 0f       	add	r28, r24
    1dde:	d9 1f       	adc	r29, r25

	// Perform the Reset Command
	retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	68 e1       	ldi	r22, 0x18	; 24
    1de4:	c8 01       	movw	r24, r16
    1de6:	0e d0       	rcall	.+28     	; 0x1e04 <Si114xWriteToRegister>
    1de8:	c8 0f       	add	r28, r24
    1dea:	d9 1f       	adc	r29, r25

	// Delay for 10 ms. This delay is needed to allow the Si114x
	// to perform internal reset sequence.
	delay_10ms();
    1dec:	44 d0       	rcall	.+136    	; 0x1e76 <delay_10ms>

	// Write Hardware Key
	retval+=Si114xWriteToRegister(si114x_handle, REG_HW_KEY, HW_KEY_VAL0);
    1dee:	47 e1       	ldi	r20, 0x17	; 23
    1df0:	67 e0       	ldi	r22, 0x07	; 7
    1df2:	c8 01       	movw	r24, r16
    1df4:	07 d0       	rcall	.+14     	; 0x1e04 <Si114xWriteToRegister>

	return retval;
}
    1df6:	8c 0f       	add	r24, r28
    1df8:	9d 1f       	adc	r25, r29
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	08 95       	ret

00001e04 <Si114xWriteToRegister>:

s16 Si114xBlockRead(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
}
    1e04:	ef 92       	push	r14
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	1f 92       	push	r1
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
    1e14:	26 2f       	mov	r18, r22
    1e16:	49 83       	std	Y+1, r20	; 0x01
    1e18:	ee 24       	eor	r14, r14
    1e1a:	e3 94       	inc	r14
    1e1c:	8e 01       	movw	r16, r28
    1e1e:	0f 5f       	subi	r16, 0xFF	; 255
    1e20:	1f 4f       	sbci	r17, 0xFF	; 255
    1e22:	48 ee       	ldi	r20, 0xE8	; 232
    1e24:	6a e5       	ldi	r22, 0x5A	; 90
    1e26:	80 e8       	ldi	r24, 0x80	; 128
    1e28:	94 e0       	ldi	r25, 0x04	; 4
    1e2a:	e3 d0       	rcall	.+454    	; 0x1ff2 <twi_write_packet>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0f 90       	pop	r0
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	1f 91       	pop	r17
    1e38:	0f 91       	pop	r16
    1e3a:	ef 90       	pop	r14
    1e3c:	08 95       	ret

00001e3e <Si114xReadFromRegister>:
    1e3e:	ef 92       	push	r14
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	1f 92       	push	r1
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	26 2f       	mov	r18, r22
    1e50:	ee 24       	eor	r14, r14
    1e52:	e3 94       	inc	r14
    1e54:	8e 01       	movw	r16, r28
    1e56:	0f 5f       	subi	r16, 0xFF	; 255
    1e58:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5a:	48 ee       	ldi	r20, 0xE8	; 232
    1e5c:	6a e5       	ldi	r22, 0x5A	; 90
    1e5e:	80 e8       	ldi	r24, 0x80	; 128
    1e60:	94 e0       	ldi	r25, 0x04	; 4
    1e62:	23 d0       	rcall	.+70     	; 0x1eaa <twi_read_packet>
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	0f 90       	pop	r0
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	ef 90       	pop	r14
    1e74:	08 95       	ret

00001e76 <delay_10ms>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e76:	2f ef       	ldi	r18, 0xFF	; 255
    1e78:	89 ef       	ldi	r24, 0xF9	; 249
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	21 50       	subi	r18, 0x01	; 1
    1e7e:	80 40       	sbci	r24, 0x00	; 0
    1e80:	90 40       	sbci	r25, 0x00	; 0
    1e82:	e1 f7       	brne	.-8      	; 0x1e7c <delay_10ms+0x6>
    1e84:	00 c0       	rjmp	.+0      	; 0x1e86 <delay_10ms+0x10>
    1e86:	00 00       	nop
    1e88:	08 95       	ret

00001e8a <twi_setup>:
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
}
    1e8a:	e0 e8       	ldi	r30, 0x80	; 128
    1e8c:	f4 e0       	ldi	r31, 0x04	; 4
    1e8e:	12 82       	std	Z+2, r1	; 0x02
    1e90:	89 e0       	ldi	r24, 0x09	; 9
    1e92:	85 83       	std	Z+5, r24	; 0x05
    1e94:	88 e0       	ldi	r24, 0x08	; 8
    1e96:	81 83       	std	Z+1, r24	; 0x01
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	84 83       	std	Z+4, r24	; 0x04
    1e9c:	08 95       	ret

00001e9e <twi_off>:
    1e9e:	e0 e8       	ldi	r30, 0x80	; 128
    1ea0:	f4 e0       	ldi	r31, 0x04	; 4
    1ea2:	81 81       	ldd	r24, Z+1	; 0x01
    1ea4:	87 7f       	andi	r24, 0xF7	; 247
    1ea6:	81 83       	std	Z+1, r24	; 0x01
    1ea8:	08 95       	ret

00001eaa <twi_read_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
uint8_t* data,
uint8_t length)
{
    1eaa:	ef 92       	push	r14
    1eac:	0f 93       	push	r16
    1eae:	1f 93       	push	r17
    1eb0:	dc 01       	movw	r26, r24
	uint8_t error_code;
	uint8_t len = length;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    1eb2:	76 2f       	mov	r23, r22
    1eb4:	77 0f       	add	r23, r23
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    1eb6:	16 96       	adiw	r26, 0x06	; 6
    1eb8:	7c 93       	st	X, r23
    1eba:	16 97       	sbiw	r26, 0x06	; 6

	timeout_remaining = (timeout_ms * 100);
    1ebc:	84 e6       	ldi	r24, 0x64	; 100
    1ebe:	48 9f       	mul	r20, r24
    1ec0:	a0 01       	movw	r20, r0
    1ec2:	11 24       	eor	r1, r1
	while (timeout_remaining)
    1ec4:	41 15       	cp	r20, r1
    1ec6:	51 05       	cpc	r21, r1
    1ec8:	01 f1       	breq	.+64     	; 0x1f0a <twi_read_packet+0x60>
    1eca:	fa 01       	movw	r30, r20
    1ecc:	0d c0       	rjmp	.+26     	; 0x1ee8 <twi_read_packet+0x3e>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    1ece:	39 2f       	mov	r19, r25
    1ed0:	30 75       	andi	r19, 0x50	; 80
    1ed2:	30 35       	cpi	r19, 0x50	; 80
    1ed4:	f9 f0       	breq	.+62     	; 0x1f14 <twi_read_packet+0x6a>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    1ed6:	90 7c       	andi	r25, 0xC0	; 192
    1ed8:	29 f5       	brne	.+74     	; 0x1f24 <twi_read_packet+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1eda:	8a e6       	ldi	r24, 0x6A	; 106
    1edc:	8a 95       	dec	r24
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <twi_read_packet+0x32>
    1ee0:	00 c0       	rjmp	.+0      	; 0x1ee2 <twi_read_packet+0x38>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    1ee2:	31 97       	sbiw	r30, 0x01	; 1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    1ee4:	30 97       	sbiw	r30, 0x00	; 0
    1ee6:	89 f0       	breq	.+34     	; 0x1f0a <twi_read_packet+0x60>
	{
		uint8_t status = TWI->MASTER.STATUS;
    1ee8:	14 96       	adiw	r26, 0x04	; 4
    1eea:	9c 91       	ld	r25, X
    1eec:	14 97       	sbiw	r26, 0x04	; 4

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    1eee:	39 2f       	mov	r19, r25
    1ef0:	38 74       	andi	r19, 0x48	; 72
    1ef2:	38 34       	cpi	r19, 0x48	; 72
    1ef4:	61 f7       	brne	.-40     	; 0x1ece <twi_read_packet+0x24>
		{
			TWI->MASTER.ADDR = slave_address;
    1ef6:	16 96       	adiw	r26, 0x06	; 6
    1ef8:	7c 93       	st	X, r23
    1efa:	16 97       	sbiw	r26, 0x06	; 6
    1efc:	8a e6       	ldi	r24, 0x6A	; 106
    1efe:	8a 95       	dec	r24
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <twi_read_packet+0x54>
    1f02:	00 c0       	rjmp	.+0      	; 0x1f04 <twi_read_packet+0x5a>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    1f04:	31 97       	sbiw	r30, 0x01	; 1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    1f06:	30 97       	sbiw	r30, 0x00	; 0
    1f08:	79 f7       	brne	.-34     	; 0x1ee8 <twi_read_packet+0x3e>
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    1f0a:	14 96       	adiw	r26, 0x04	; 4
    1f0c:	8c 91       	ld	r24, X
    1f0e:	14 97       	sbiw	r26, 0x04	; 4
    1f10:	85 ff       	sbrs	r24, 5
    1f12:	03 c0       	rjmp	.+6      	; 0x1f1a <twi_read_packet+0x70>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1f14:	87 e0       	ldi	r24, 0x07	; 7
    1f16:	13 96       	adiw	r26, 0x03	; 3
    1f18:	8c 93       	st	X, r24
		}

		twi_stop_transmission(TWI);
	}

	return len;
    1f1a:	8e 2d       	mov	r24, r14
}
    1f1c:	1f 91       	pop	r17
    1f1e:	0f 91       	pop	r16
    1f20:	ef 90       	pop	r14
    1f22:	08 95       	ret
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    1f24:	17 96       	adiw	r26, 0x07	; 7
    1f26:	2c 93       	st	X, r18
    1f28:	17 97       	sbiw	r26, 0x07	; 7

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    1f2a:	14 96       	adiw	r26, 0x04	; 4
    1f2c:	9c 91       	ld	r25, X
    1f2e:	14 97       	sbiw	r26, 0x04	; 4
    1f30:	96 ff       	sbrs	r25, 6
    1f32:	fb cf       	rjmp	.-10     	; 0x1f2a <twi_read_packet+0x80>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    1f34:	14 96       	adiw	r26, 0x04	; 4
    1f36:	8c 91       	ld	r24, X
    1f38:	14 97       	sbiw	r26, 0x04	; 4
    1f3a:	86 ff       	sbrs	r24, 6
    1f3c:	25 c0       	rjmp	.+74     	; 0x1f88 <twi_read_packet+0xde>
    1f3e:	14 96       	adiw	r26, 0x04	; 4
    1f40:	8c 91       	ld	r24, X
    1f42:	14 97       	sbiw	r26, 0x04	; 4
    1f44:	84 fd       	sbrc	r24, 4
    1f46:	20 c0       	rjmp	.+64     	; 0x1f88 <twi_read_packet+0xde>
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
    1f48:	66 0f       	add	r22, r22
    1f4a:	61 60       	ori	r22, 0x01	; 1
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    1f4c:	16 96       	adiw	r26, 0x06	; 6
    1f4e:	6c 93       	st	X, r22
    1f50:	16 97       	sbiw	r26, 0x06	; 6
    1f52:	0f c0       	rjmp	.+30     	; 0x1f72 <twi_read_packet+0xc8>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    1f54:	89 2f       	mov	r24, r25
    1f56:	80 75       	andi	r24, 0x50	; 80
    1f58:	80 35       	cpi	r24, 0x50	; 80
    1f5a:	01 f1       	breq	.+64     	; 0x1f9c <twi_read_packet+0xf2>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    1f5c:	90 7c       	andi	r25, 0xC0	; 192
    1f5e:	39 f5       	brne	.+78     	; 0x1fae <twi_read_packet+0x104>
    1f60:	8a e6       	ldi	r24, 0x6A	; 106
    1f62:	8a 95       	dec	r24
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <twi_read_packet+0xb8>
    1f66:	00 c0       	rjmp	.+0      	; 0x1f68 <twi_read_packet+0xbe>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    1f68:	41 50       	subi	r20, 0x01	; 1
    1f6a:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    1f6c:	41 15       	cp	r20, r1
    1f6e:	51 05       	cpc	r21, r1
    1f70:	81 f0       	breq	.+32     	; 0x1f92 <twi_read_packet+0xe8>
	{
		uint8_t status = TWI->MASTER.STATUS;
    1f72:	14 96       	adiw	r26, 0x04	; 4
    1f74:	9c 91       	ld	r25, X
    1f76:	14 97       	sbiw	r26, 0x04	; 4

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    1f78:	89 2f       	mov	r24, r25
    1f7a:	88 74       	andi	r24, 0x48	; 72
    1f7c:	88 34       	cpi	r24, 0x48	; 72
    1f7e:	51 f7       	brne	.-44     	; 0x1f54 <twi_read_packet+0xaa>
		{
			TWI->MASTER.ADDR = slave_address;
    1f80:	16 96       	adiw	r26, 0x06	; 6
    1f82:	6c 93       	st	X, r22
    1f84:	16 97       	sbiw	r26, 0x06	; 6
    1f86:	ec cf       	rjmp	.-40     	; 0x1f60 <twi_read_packet+0xb6>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    1f88:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return len;
}
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	ef 90       	pop	r14
    1f90:	08 95       	ret
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    1f92:	14 96       	adiw	r26, 0x04	; 4
    1f94:	8c 91       	ld	r24, X
    1f96:	14 97       	sbiw	r26, 0x04	; 4
    1f98:	85 ff       	sbrs	r24, 5
    1f9a:	04 c0       	rjmp	.+8      	; 0x1fa4 <twi_read_packet+0xfa>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1f9c:	87 e0       	ldi	r24, 0x07	; 7
    1f9e:	13 96       	adiw	r26, 0x03	; 3
    1fa0:	8c 93       	st	X, r24
    1fa2:	13 97       	sbiw	r26, 0x03	; 3
    1fa4:	87 e0       	ldi	r24, 0x07	; 7
    1fa6:	13 96       	adiw	r26, 0x03	; 3
    1fa8:	8c 93       	st	X, r24
		}

		twi_stop_transmission(TWI);
	}

	return len;
    1faa:	8e 2d       	mov	r24, r14
    1fac:	b7 cf       	rjmp	.-146    	; 0x1f1c <twi_read_packet+0x72>
    1fae:	2f ef       	ldi	r18, 0xFF	; 255
    1fb0:	2e 0d       	add	r18, r14
    1fb2:	f8 01       	movw	r30, r16
	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1fb4:	42 e0       	ldi	r20, 0x02	; 2
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm));

	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1fb6:	37 e0       	ldi	r19, 0x07	; 7
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
    1fb8:	2f 3f       	cpi	r18, 0xFF	; 255
    1fba:	a1 f3       	breq	.-24     	; 0x1fa4 <twi_read_packet+0xfa>

uint8_t twi_receive_byte(TWI_t* const TWI, 
uint8_t* const data, 
const uint8_t end_of_data)
{
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
    1fbc:	14 96       	adiw	r26, 0x04	; 4
    1fbe:	8c 91       	ld	r24, X
    1fc0:	14 97       	sbiw	r26, 0x04	; 4
    1fc2:	8c 70       	andi	r24, 0x0C	; 12
    1fc4:	8c 30       	cpi	r24, 0x0C	; 12
    1fc6:	71 f3       	breq	.-36     	; 0x1fa4 <twi_read_packet+0xfa>
		return false;
	}

	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm));
    1fc8:	14 96       	adiw	r26, 0x04	; 4
    1fca:	9c 91       	ld	r25, X
    1fcc:	14 97       	sbiw	r26, 0x04	; 4
    1fce:	97 ff       	sbrs	r25, 7
    1fd0:	fb cf       	rjmp	.-10     	; 0x1fc8 <twi_read_packet+0x11e>

	*data = TWI->MASTER.DATA;
    1fd2:	17 96       	adiw	r26, 0x07	; 7
    1fd4:	8c 91       	ld	r24, X
    1fd6:	17 97       	sbiw	r26, 0x07	; 7
    1fd8:	81 93       	st	Z+, r24

	if (end_of_data)
    1fda:	21 11       	cpse	r18, r1
    1fdc:	05 c0       	rjmp	.+10     	; 0x1fe8 <twi_read_packet+0x13e>
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1fde:	13 96       	adiw	r26, 0x03	; 3
    1fe0:	3c 93       	st	X, r19
    1fe2:	13 97       	sbiw	r26, 0x03	; 3
    1fe4:	21 50       	subi	r18, 0x01	; 1
    1fe6:	e8 cf       	rjmp	.-48     	; 0x1fb8 <twi_read_packet+0x10e>
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1fe8:	13 96       	adiw	r26, 0x03	; 3
    1fea:	4c 93       	st	X, r20
    1fec:	13 97       	sbiw	r26, 0x03	; 3
    1fee:	21 50       	subi	r18, 0x01	; 1
    1ff0:	e3 cf       	rjmp	.-58     	; 0x1fb8 <twi_read_packet+0x10e>

00001ff2 <twi_write_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    1ff2:	ef 92       	push	r14
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	fc 01       	movw	r30, r24
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    1ffa:	66 0f       	add	r22, r22
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    1ffc:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    1ffe:	84 e6       	ldi	r24, 0x64	; 100
    2000:	48 9f       	mul	r20, r24
    2002:	a0 01       	movw	r20, r0
    2004:	11 24       	eor	r1, r1
	while (timeout_remaining)
    2006:	41 15       	cp	r20, r1
    2008:	51 05       	cpc	r21, r1
    200a:	81 f4       	brne	.+32     	; 0x202c <twi_write_packet+0x3a>
    200c:	16 c0       	rjmp	.+44     	; 0x203a <twi_write_packet+0x48>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    200e:	39 2f       	mov	r19, r25
    2010:	30 75       	andi	r19, 0x50	; 80
    2012:	30 35       	cpi	r19, 0x50	; 80
    2014:	a9 f0       	breq	.+42     	; 0x2040 <twi_write_packet+0x4e>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    2016:	90 7c       	andi	r25, 0xC0	; 192
    2018:	d1 f4       	brne	.+52     	; 0x204e <twi_write_packet+0x5c>
    201a:	8a e6       	ldi	r24, 0x6A	; 106
    201c:	8a 95       	dec	r24
    201e:	f1 f7       	brne	.-4      	; 0x201c <twi_write_packet+0x2a>
    2020:	00 c0       	rjmp	.+0      	; 0x2022 <twi_write_packet+0x30>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    2022:	41 50       	subi	r20, 0x01	; 1
    2024:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    2026:	41 15       	cp	r20, r1
    2028:	51 05       	cpc	r21, r1
    202a:	39 f0       	breq	.+14     	; 0x203a <twi_write_packet+0x48>
	{
		uint8_t status = TWI->MASTER.STATUS;
    202c:	94 81       	ldd	r25, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    202e:	39 2f       	mov	r19, r25
    2030:	38 74       	andi	r19, 0x48	; 72
    2032:	38 34       	cpi	r19, 0x48	; 72
    2034:	61 f7       	brne	.-40     	; 0x200e <twi_write_packet+0x1c>
		{
			TWI->MASTER.ADDR = slave_address;
    2036:	66 83       	std	Z+6, r22	; 0x06
    2038:	f0 cf       	rjmp	.-32     	; 0x201a <twi_write_packet+0x28>
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    203a:	84 81       	ldd	r24, Z+4	; 0x04
    203c:	85 ff       	sbrs	r24, 5
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <twi_write_packet+0x52>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2040:	87 e0       	ldi	r24, 0x07	; 7
    2042:	83 83       	std	Z+3, r24	; 0x03
    2044:	8e 2d       	mov	r24, r14

		twi_stop_transmission(TWI);
	}

	return length;
    2046:	1f 91       	pop	r17
    2048:	0f 91       	pop	r16
    204a:	ef 90       	pop	r14
    204c:	08 95       	ret
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    204e:	27 83       	std	Z+7, r18	; 0x07

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    2050:	94 81       	ldd	r25, Z+4	; 0x04
    2052:	96 ff       	sbrs	r25, 6
    2054:	fd cf       	rjmp	.-6      	; 0x2050 <twi_write_packet+0x5e>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    2056:	84 81       	ldd	r24, Z+4	; 0x04
    2058:	86 ff       	sbrs	r24, 6
    205a:	13 c0       	rjmp	.+38     	; 0x2082 <twi_write_packet+0x90>
    205c:	84 81       	ldd	r24, Z+4	; 0x04
    205e:	84 fd       	sbrc	r24, 4
    2060:	10 c0       	rjmp	.+32     	; 0x2082 <twi_write_packet+0x90>
    2062:	d8 01       	movw	r26, r16
    2064:	8f ef       	ldi	r24, 0xFF	; 255
    2066:	8e 0d       	add	r24, r14
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    2068:	8f 3f       	cpi	r24, 0xFF	; 255
    206a:	41 f0       	breq	.+16     	; 0x207c <twi_write_packet+0x8a>
		{
			if (!(twi_send_byte(TWI, *(data++))))
    206c:	9d 91       	ld	r25, X+
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    206e:	97 83       	std	Z+7, r25	; 0x07

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    2070:	94 81       	ldd	r25, Z+4	; 0x04
    2072:	96 ff       	sbrs	r25, 6
    2074:	fd cf       	rjmp	.-6      	; 0x2070 <twi_write_packet+0x7e>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    2076:	94 81       	ldd	r25, Z+4	; 0x04
    2078:	96 fd       	sbrc	r25, 6
    207a:	08 c0       	rjmp	.+16     	; 0x208c <twi_write_packet+0x9a>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    207c:	97 e0       	ldi	r25, 0x07	; 7
    207e:	93 83       	std	Z+3, r25	; 0x03
    2080:	e2 cf       	rjmp	.-60     	; 0x2046 <twi_write_packet+0x54>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    2082:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return length;
    2084:	1f 91       	pop	r17
    2086:	0f 91       	pop	r16
    2088:	ef 90       	pop	r14
    208a:	08 95       	ret
{
	TWI->MASTER.DATA = data;

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    208c:	94 81       	ldd	r25, Z+4	; 0x04
    208e:	2f ef       	ldi	r18, 0xFF	; 255
    2090:	28 0f       	add	r18, r24
    2092:	94 fd       	sbrc	r25, 4
    2094:	f3 cf       	rjmp	.-26     	; 0x207c <twi_write_packet+0x8a>
    2096:	82 2f       	mov	r24, r18
    2098:	e7 cf       	rjmp	.-50     	; 0x2068 <twi_write_packet+0x76>

0000209a <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
    209a:	1f 92       	push	r1
    209c:	0f 92       	push	r0
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	0f 92       	push	r0
    20a2:	11 24       	eor	r1, r1
    20a4:	0b b6       	in	r0, 0x3b	; 59
    20a6:	0f 92       	push	r0
    20a8:	cf 92       	push	r12
    20aa:	df 92       	push	r13
    20ac:	ef 92       	push	r14
    20ae:	ff 92       	push	r15
    20b0:	2f 93       	push	r18
    20b2:	3f 93       	push	r19
    20b4:	4f 93       	push	r20
    20b6:	5f 93       	push	r21
    20b8:	6f 93       	push	r22
    20ba:	7f 93       	push	r23
    20bc:	8f 93       	push	r24
    20be:	9f 93       	push	r25
    20c0:	af 93       	push	r26
    20c2:	bf 93       	push	r27
    20c4:	ef 93       	push	r30
    20c6:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    20c8:	e0 91 60 27 	lds	r30, 0x2760
    20cc:	f0 91 61 27 	lds	r31, 0x2761
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	static uint16_t prev = 0;
		
	if (!fcb) return;
    20d0:	30 97       	sbiw	r30, 0x00	; 0
    20d2:	09 f4       	brne	.+2      	; 0x20d6 <__vector_14+0x3c>
    20d4:	4d c0       	rjmp	.+154    	; 0x2170 <__vector_14+0xd6>
	ct = fcb->ct; ri = fcb->ri;
    20d6:	46 81       	ldd	r20, Z+6	; 0x06
    20d8:	57 81       	ldd	r21, Z+7	; 0x07
    20da:	22 81       	ldd	r18, Z+2	; 0x02
    20dc:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    20de:	a0 85       	ldd	r26, Z+8	; 0x08
    20e0:	b1 85       	ldd	r27, Z+9	; 0x09
    20e2:	a2 0f       	add	r26, r18
    20e4:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    20e6:	80 81       	ld	r24, Z
    20e8:	91 81       	ldd	r25, Z+1	; 0x01
    20ea:	81 30       	cpi	r24, 0x01	; 1
    20ec:	91 05       	cpc	r25, r1
    20ee:	81 f0       	breq	.+32     	; 0x2110 <__vector_14+0x76>
    20f0:	08 f4       	brcc	.+2      	; 0x20f4 <__vector_14+0x5a>
    20f2:	55 c0       	rjmp	.+170    	; 0x219e <__vector_14+0x104>
    20f4:	02 97       	sbiw	r24, 0x02	; 2
    20f6:	09 f0       	breq	.+2      	; 0x20fa <__vector_14+0x60>
    20f8:	5b c0       	rjmp	.+182    	; 0x21b0 <__vector_14+0x116>
		if (ct < 2) return;
		l1 = buff[0]; r2 = buff[1];
		ct -= 2; ri += 2;
		break;
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
    20fa:	42 30       	cpi	r20, 0x02	; 2
    20fc:	51 05       	cpc	r21, r1
    20fe:	c0 f1       	brcs	.+112    	; 0x2170 <__vector_14+0xd6>
		l1 = r2 = buff[1] + 128;
    2100:	11 96       	adiw	r26, 0x01	; 1
    2102:	6c 91       	ld	r22, X
    2104:	60 58       	subi	r22, 0x80	; 128
		ct -= 2; ri += 2;
    2106:	42 50       	subi	r20, 0x02	; 2
    2108:	51 09       	sbc	r21, r1
    210a:	2e 5f       	subi	r18, 0xFE	; 254
    210c:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    210e:	08 c0       	rjmp	.+16     	; 0x2120 <__vector_14+0x86>
		if (ct < 1) return;
		l1 = r2 = buff[0];
		ct -= 1; ri += 1;
		break;
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
    2110:	42 30       	cpi	r20, 0x02	; 2
    2112:	51 05       	cpc	r21, r1
    2114:	68 f1       	brcs	.+90     	; 0x2170 <__vector_14+0xd6>
		l1 = buff[0]; r2 = buff[1];
    2116:	6c 91       	ld	r22, X
		ct -= 2; ri += 2;
    2118:	42 50       	subi	r20, 0x02	; 2
    211a:	51 09       	sbc	r21, r1
    211c:	2e 5f       	subi	r18, 0xFE	; 254
    211e:	3f 4f       	sbci	r19, 0xFF	; 255
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
		ri += 4;
	}
	fcb->ct = ct;
    2120:	46 83       	std	Z+6, r20	; 0x06
    2122:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    2124:	82 85       	ldd	r24, Z+10	; 0x0a
    2126:	93 85       	ldd	r25, Z+11	; 0x0b
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	82 23       	and	r24, r18
    212c:	93 23       	and	r25, r19
    212e:	82 83       	std	Z+2, r24	; 0x02
    2130:	93 83       	std	Z+3, r25	; 0x03
	result = integer + 0x7FFF;
	return(result >> 4);
}

static inline uint8_t smooth(uint8_t data, float filterVal, float smoothedVal){
	return (int)(((data * (1 - filterVal)) + (smoothedVal  *  filterVal)));
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	88 d1       	rcall	.+784    	; 0x244a <__floatsisf>
    213a:	26 e6       	ldi	r18, 0x66	; 102
    213c:	36 e6       	ldi	r19, 0x66	; 102
    213e:	46 e2       	ldi	r20, 0x26	; 38
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	0f d2       	rcall	.+1054   	; 0x2562 <__mulsf3>
    2144:	6b 01       	movw	r12, r22
    2146:	7c 01       	movw	r14, r24
		ri += 4;
	}
	fcb->ct = ct;
	fcb->ri = ri & (fcb->sz_buff - 1);
	
	uint16_t data = smooth(l1,0.35,data);
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	cb 01       	movw	r24, r22
    214e:	7b d1       	rcall	.+758    	; 0x2446 <__floatunsisf>
	result = integer + 0x7FFF;
	return(result >> 4);
}

static inline uint8_t smooth(uint8_t data, float filterVal, float smoothedVal){
	return (int)(((data * (1 - filterVal)) + (smoothedVal  *  filterVal)));
    2150:	23 e3       	ldi	r18, 0x33	; 51
    2152:	33 e3       	ldi	r19, 0x33	; 51
    2154:	43 eb       	ldi	r20, 0xB3	; 179
    2156:	5e e3       	ldi	r21, 0x3E	; 62
    2158:	04 d2       	rcall	.+1032   	; 0x2562 <__mulsf3>
    215a:	9b 01       	movw	r18, r22
    215c:	ac 01       	movw	r20, r24
    215e:	c7 01       	movw	r24, r14
    2160:	b6 01       	movw	r22, r12
    2162:	dc d0       	rcall	.+440    	; 0x231c <__addsf3>
    2164:	3f d1       	rcall	.+638    	; 0x23e4 <__fixsfsi>
    2166:	77 27       	eor	r23, r23
	fcb->ct = ct;
	fcb->ri = ri & (fcb->sz_buff - 1);
	
	uint16_t data = smooth(l1,0.35,data);
	
	DACB.CH0DATA = data;
    2168:	60 93 38 03 	sts	0x0338, r22
    216c:	70 93 39 03 	sts	0x0339, r23
	
	//prev = data;
}
    2170:	ff 91       	pop	r31
    2172:	ef 91       	pop	r30
    2174:	bf 91       	pop	r27
    2176:	af 91       	pop	r26
    2178:	9f 91       	pop	r25
    217a:	8f 91       	pop	r24
    217c:	7f 91       	pop	r23
    217e:	6f 91       	pop	r22
    2180:	5f 91       	pop	r21
    2182:	4f 91       	pop	r20
    2184:	3f 91       	pop	r19
    2186:	2f 91       	pop	r18
    2188:	ff 90       	pop	r15
    218a:	ef 90       	pop	r14
    218c:	df 90       	pop	r13
    218e:	cf 90       	pop	r12
    2190:	0f 90       	pop	r0
    2192:	0b be       	out	0x3b, r0	; 59
    2194:	0f 90       	pop	r0
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	0f 90       	pop	r0
    219a:	1f 90       	pop	r1
    219c:	18 95       	reti
	ct = fcb->ct; ri = fcb->ri;
	buff = fcb->buff + ri;

	switch (fcb->mode) {
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
    219e:	41 15       	cp	r20, r1
    21a0:	51 05       	cpc	r21, r1
    21a2:	31 f3       	breq	.-52     	; 0x2170 <__vector_14+0xd6>
		l1 = r2 = buff[0];
    21a4:	6c 91       	ld	r22, X
		ct -= 1; ri += 1;
    21a6:	41 50       	subi	r20, 0x01	; 1
    21a8:	51 09       	sbc	r21, r1
    21aa:	2f 5f       	subi	r18, 0xFF	; 255
    21ac:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    21ae:	b8 cf       	rjmp	.-144    	; 0x2120 <__vector_14+0x86>
		if (ct < 2) return;
		l1 = r2 = buff[1] + 128;
		ct -= 2; ri += 2;
		break;
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
    21b0:	44 30       	cpi	r20, 0x04	; 4
    21b2:	51 05       	cpc	r21, r1
    21b4:	e8 f2       	brcs	.-70     	; 0x2170 <__vector_14+0xd6>
		l2 = buff[0]; 
		l1 = buff[1];
    21b6:	11 96       	adiw	r26, 0x01	; 1
    21b8:	6c 91       	ld	r22, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
    21ba:	44 50       	subi	r20, 0x04	; 4
    21bc:	51 09       	sbc	r21, r1
		ri += 4;
    21be:	2c 5f       	subi	r18, 0xFC	; 252
    21c0:	3f 4f       	sbci	r19, 0xFF	; 255
    21c2:	ae cf       	rjmp	.-164    	; 0x2120 <__vector_14+0x86>

000021c4 <main>:
	puts(Buff);
}

int main(void) {
	
	clock_setup_32_mhz();
    21c4:	0e 94 9c 03 	call	0x738	; 0x738 <clock_setup_32_mhz>
	ht1632c_setup(HT1632_COMMON_16NMOS);
    21c8:	84 e2       	ldi	r24, 0x24	; 36
    21ca:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <ht1632c_setup>
	ht1632c_set_brightness(0);
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	0e 94 07 07 	call	0xe0e	; 0xe0e <ht1632c_set_brightness>
	ht1632c_clear_screen();
    21d4:	e1 d8       	rcall	.-3646   	; 0x1398 <ht1632c_clear_screen>
	esp8266_off();
    21d6:	0e 94 ab 03 	call	0x756	; 0x756 <esp8266_off>
	
	uart_setup();
    21da:	45 d0       	rcall	.+138    	; 0x2266 <uart_setup>
	stdout = stdin = &mystdout;
    21dc:	84 e0       	ldi	r24, 0x04	; 4
    21de:	90 e2       	ldi	r25, 0x20	; 32
    21e0:	80 93 62 27 	sts	0x2762, r24
    21e4:	90 93 63 27 	sts	0x2763, r25
    21e8:	80 93 64 27 	sts	0x2764, r24
    21ec:	90 93 65 27 	sts	0x2765, r25
	puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
    21f0:	89 ea       	ldi	r24, 0xA9	; 169
    21f2:	95 e2       	ldi	r25, 0x25	; 37
    21f4:	83 d2       	rcall	.+1286   	; 0x26fc <puts>
void uart_put_char(char c);
static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) {
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    21f6:	87 e0       	ldi	r24, 0x07	; 7
    21f8:	80 93 a2 00 	sts	0x00A2, r24
	uart_setup();
	stdout = stdin = &mystdout;
	puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
	
	pmic_setup();
	twi_setup(&TWIC);
    21fc:	80 e8       	ldi	r24, 0x80	; 128
    21fe:	94 e0       	ldi	r25, 0x04	; 4
    2200:	44 de       	rcall	.-888    	; 0x1e8a <twi_setup>
	si114x_reset(SI114X_ADDR);
    2202:	8a e5       	ldi	r24, 0x5A	; 90
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	bb dd       	rcall	.-1162   	; 0x1d7e <si114x_reset>
	twi_off();
    2208:	4a de       	rcall	.-876    	; 0x1e9e <twi_off>
	
	btn_setup();
    220a:	94 da       	rcall	.-2776   	; 0x1734 <btn_setup>
	rtc_setup();
    220c:	4f db       	rcall	.-2402   	; 0x18ac <rtc_setup>
	rtc_set_time(30,0,0,0,2015);
    220e:	0f ed       	ldi	r16, 0xDF	; 223
    2210:	17 e0       	ldi	r17, 0x07	; 7
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	60 e0       	ldi	r22, 0x00	; 0
    221a:	8e e1       	ldi	r24, 0x1E	; 30
    221c:	65 db       	rcall	.-2358   	; 0x18e8 <rtc_set_time>
	
	//ht1632_dummy();
	
	sei();
    221e:	78 94       	sei
	
	SLEEP.CTRL |= SLEEP_MODE_PWR_SAVE;
    2220:	80 91 48 00 	lds	r24, 0x0048
    2224:	86 60       	ori	r24, 0x06	; 6
    2226:	80 93 48 00 	sts	0x0048, r24
		
	while (1) {
		//menu_state_machine();
		SLEEP.CTRL |= SLEEP_SEN_bm;
    222a:	80 91 48 00 	lds	r24, 0x0048
    222e:	81 60       	ori	r24, 0x01	; 1
    2230:	80 93 48 00 	sts	0x0048, r24
		asm("sleep");
    2234:	88 95       	sleep
    2236:	f9 cf       	rjmp	.-14     	; 0x222a <main+0x66>

00002238 <__vector_20>:
		btn_status = NONE;
	}
}

//Used for SI114x Timestamp
ISR(TCC1_OVF_vect) {
    2238:	1f 92       	push	r1
    223a:	0f 92       	push	r0
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	0f 92       	push	r0
    2240:	11 24       	eor	r1, r1
    2242:	8f 93       	push	r24
    2244:	9f 93       	push	r25
	counter++;
    2246:	80 91 ce 26 	lds	r24, 0x26CE
    224a:	90 91 cf 26 	lds	r25, 0x26CF
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	80 93 ce 26 	sts	0x26CE, r24
    2254:	90 93 cf 26 	sts	0x26CF, r25
    2258:	9f 91       	pop	r25
    225a:	8f 91       	pop	r24
    225c:	0f 90       	pop	r0
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	0f 90       	pop	r0
    2262:	1f 90       	pop	r1
    2264:	18 95       	reti

00002266 <uart_setup>:
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
	USARTD0.DATA = c;
    2266:	e0 e6       	ldi	r30, 0x60	; 96
    2268:	f6 e0       	ldi	r31, 0x06	; 6
    226a:	88 e0       	ldi	r24, 0x08	; 8
    226c:	81 83       	std	Z+1, r24	; 0x01
    226e:	84 e0       	ldi	r24, 0x04	; 4
    2270:	82 83       	std	Z+2, r24	; 0x02
    2272:	e0 ea       	ldi	r30, 0xA0	; 160
    2274:	f9 e0       	ldi	r31, 0x09	; 9
    2276:	80 e2       	ldi	r24, 0x20	; 32
    2278:	83 83       	std	Z+3, r24	; 0x03
    227a:	8e e2       	ldi	r24, 0x2E	; 46
    227c:	86 83       	std	Z+6, r24	; 0x06
    227e:	88 e9       	ldi	r24, 0x98	; 152
    2280:	87 83       	std	Z+7, r24	; 0x07
    2282:	83 e0       	ldi	r24, 0x03	; 3
    2284:	85 83       	std	Z+5, r24	; 0x05
    2286:	88 e1       	ldi	r24, 0x18	; 24
    2288:	84 83       	std	Z+4, r24	; 0x04
    228a:	08 95       	ret

0000228c <uart_put_char>:
    228c:	90 91 a1 09 	lds	r25, 0x09A1
    2290:	95 ff       	sbrs	r25, 5
    2292:	fc cf       	rjmp	.-8      	; 0x228c <uart_put_char>
    2294:	80 93 a0 09 	sts	0x09A0, r24
    2298:	08 95       	ret

0000229a <uart_get_char>:
    229a:	80 91 a1 09 	lds	r24, 0x09A1
    229e:	87 ff       	sbrs	r24, 7
    22a0:	fc cf       	rjmp	.-8      	; 0x229a <uart_get_char>
    22a2:	80 91 a0 09 	lds	r24, 0x09A0
    22a6:	08 95       	ret

000022a8 <uwrite_hex>:
	uart_put_char('\r');
	uart_put_char('\n');
}

void uwrite_hex(unsigned char n) {
	if(((n>>4) & 15) < 10)
    22a8:	98 2f       	mov	r25, r24
    22aa:	92 95       	swap	r25
    22ac:	9f 70       	andi	r25, 0x0F	; 15
    22ae:	29 2f       	mov	r18, r25
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	2a 30       	cpi	r18, 0x0A	; 10
    22b4:	31 05       	cpc	r19, r1
    22b6:	54 f5       	brge	.+84     	; 0x230c <uwrite_hex+0x64>
	uart_put_char('0' + ((n>>4)&15));
    22b8:	20 e3       	ldi	r18, 0x30	; 48
    22ba:	29 0f       	add	r18, r25

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    22bc:	90 91 a1 09 	lds	r25, 0x09A1
    22c0:	95 ff       	sbrs	r25, 5
    22c2:	fc cf       	rjmp	.-8      	; 0x22bc <uwrite_hex+0x14>
	USARTD0.DATA = c;
    22c4:	20 93 a0 09 	sts	0x09A0, r18
	if(((n>>4) & 15) < 10)
	uart_put_char('0' + ((n>>4)&15));
	else
	uart_put_char('A' + ((n>>4)&15) - 10);
	n <<= 4;
	if(((n>>4) & 15) < 10)
    22c8:	8f 70       	andi	r24, 0x0F	; 15
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	2a 30       	cpi	r18, 0x0A	; 10
    22d0:	31 05       	cpc	r19, r1
    22d2:	b4 f4       	brge	.+44     	; 0x2300 <uwrite_hex+0x58>
	uart_put_char('0' + ((n>>4)&15));
    22d4:	80 5d       	subi	r24, 0xD0	; 208

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    22d6:	90 91 a1 09 	lds	r25, 0x09A1
    22da:	95 ff       	sbrs	r25, 5
    22dc:	fc cf       	rjmp	.-8      	; 0x22d6 <uwrite_hex+0x2e>
	USARTD0.DATA = c;
    22de:	80 93 a0 09 	sts	0x09A0, r24

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    22e2:	80 91 a1 09 	lds	r24, 0x09A1
    22e6:	85 ff       	sbrs	r24, 5
    22e8:	fc cf       	rjmp	.-8      	; 0x22e2 <uwrite_hex+0x3a>
	USARTD0.DATA = c;
    22ea:	8d e0       	ldi	r24, 0x0D	; 13
    22ec:	80 93 a0 09 	sts	0x09A0, r24

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    22f0:	80 91 a1 09 	lds	r24, 0x09A1
    22f4:	85 ff       	sbrs	r24, 5
    22f6:	fc cf       	rjmp	.-8      	; 0x22f0 <uwrite_hex+0x48>
	USARTD0.DATA = c;
    22f8:	8a e0       	ldi	r24, 0x0A	; 10
    22fa:	80 93 a0 09 	sts	0x09A0, r24
    22fe:	08 95       	ret
	uart_put_char('A' + ((n>>4)&15) - 10);
	n <<= 4;
	if(((n>>4) & 15) < 10)
	uart_put_char('0' + ((n>>4)&15));
	else
	uart_put_char('A' + ((n>>4)&15) - 10);
    2300:	89 5c       	subi	r24, 0xC9	; 201

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2302:	90 91 a1 09 	lds	r25, 0x09A1
    2306:	95 ff       	sbrs	r25, 5
    2308:	fc cf       	rjmp	.-8      	; 0x2302 <uwrite_hex+0x5a>
    230a:	e9 cf       	rjmp	.-46     	; 0x22de <uwrite_hex+0x36>

void uwrite_hex(unsigned char n) {
	if(((n>>4) & 15) < 10)
	uart_put_char('0' + ((n>>4)&15));
	else
	uart_put_char('A' + ((n>>4)&15) - 10);
    230c:	27 e3       	ldi	r18, 0x37	; 55
    230e:	29 0f       	add	r18, r25

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2310:	90 91 a1 09 	lds	r25, 0x09A1
    2314:	95 ff       	sbrs	r25, 5
    2316:	fc cf       	rjmp	.-8      	; 0x2310 <uwrite_hex+0x68>
    2318:	d5 cf       	rjmp	.-86     	; 0x22c4 <uwrite_hex+0x1c>

0000231a <__subsf3>:
    231a:	50 58       	subi	r21, 0x80	; 128

0000231c <__addsf3>:
    231c:	bb 27       	eor	r27, r27
    231e:	aa 27       	eor	r26, r26
    2320:	0e d0       	rcall	.+28     	; 0x233e <__addsf3x>
    2322:	e5 c0       	rjmp	.+458    	; 0x24ee <__fp_round>
    2324:	d6 d0       	rcall	.+428    	; 0x24d2 <__fp_pscA>
    2326:	30 f0       	brcs	.+12     	; 0x2334 <__addsf3+0x18>
    2328:	db d0       	rcall	.+438    	; 0x24e0 <__fp_pscB>
    232a:	20 f0       	brcs	.+8      	; 0x2334 <__addsf3+0x18>
    232c:	31 f4       	brne	.+12     	; 0x233a <__addsf3+0x1e>
    232e:	9f 3f       	cpi	r25, 0xFF	; 255
    2330:	11 f4       	brne	.+4      	; 0x2336 <__addsf3+0x1a>
    2332:	1e f4       	brtc	.+6      	; 0x233a <__addsf3+0x1e>
    2334:	cb c0       	rjmp	.+406    	; 0x24cc <__fp_nan>
    2336:	0e f4       	brtc	.+2      	; 0x233a <__addsf3+0x1e>
    2338:	e0 95       	com	r30
    233a:	e7 fb       	bst	r30, 7
    233c:	c1 c0       	rjmp	.+386    	; 0x24c0 <__fp_inf>

0000233e <__addsf3x>:
    233e:	e9 2f       	mov	r30, r25
    2340:	e7 d0       	rcall	.+462    	; 0x2510 <__fp_split3>
    2342:	80 f3       	brcs	.-32     	; 0x2324 <__addsf3+0x8>
    2344:	ba 17       	cp	r27, r26
    2346:	62 07       	cpc	r22, r18
    2348:	73 07       	cpc	r23, r19
    234a:	84 07       	cpc	r24, r20
    234c:	95 07       	cpc	r25, r21
    234e:	18 f0       	brcs	.+6      	; 0x2356 <__addsf3x+0x18>
    2350:	71 f4       	brne	.+28     	; 0x236e <__addsf3x+0x30>
    2352:	9e f5       	brtc	.+102    	; 0x23ba <__addsf3x+0x7c>
    2354:	ff c0       	rjmp	.+510    	; 0x2554 <__fp_zero>
    2356:	0e f4       	brtc	.+2      	; 0x235a <__addsf3x+0x1c>
    2358:	e0 95       	com	r30
    235a:	0b 2e       	mov	r0, r27
    235c:	ba 2f       	mov	r27, r26
    235e:	a0 2d       	mov	r26, r0
    2360:	0b 01       	movw	r0, r22
    2362:	b9 01       	movw	r22, r18
    2364:	90 01       	movw	r18, r0
    2366:	0c 01       	movw	r0, r24
    2368:	ca 01       	movw	r24, r20
    236a:	a0 01       	movw	r20, r0
    236c:	11 24       	eor	r1, r1
    236e:	ff 27       	eor	r31, r31
    2370:	59 1b       	sub	r21, r25
    2372:	99 f0       	breq	.+38     	; 0x239a <__addsf3x+0x5c>
    2374:	59 3f       	cpi	r21, 0xF9	; 249
    2376:	50 f4       	brcc	.+20     	; 0x238c <__addsf3x+0x4e>
    2378:	50 3e       	cpi	r21, 0xE0	; 224
    237a:	68 f1       	brcs	.+90     	; 0x23d6 <__addsf3x+0x98>
    237c:	1a 16       	cp	r1, r26
    237e:	f0 40       	sbci	r31, 0x00	; 0
    2380:	a2 2f       	mov	r26, r18
    2382:	23 2f       	mov	r18, r19
    2384:	34 2f       	mov	r19, r20
    2386:	44 27       	eor	r20, r20
    2388:	58 5f       	subi	r21, 0xF8	; 248
    238a:	f3 cf       	rjmp	.-26     	; 0x2372 <__addsf3x+0x34>
    238c:	46 95       	lsr	r20
    238e:	37 95       	ror	r19
    2390:	27 95       	ror	r18
    2392:	a7 95       	ror	r26
    2394:	f0 40       	sbci	r31, 0x00	; 0
    2396:	53 95       	inc	r21
    2398:	c9 f7       	brne	.-14     	; 0x238c <__addsf3x+0x4e>
    239a:	7e f4       	brtc	.+30     	; 0x23ba <__addsf3x+0x7c>
    239c:	1f 16       	cp	r1, r31
    239e:	ba 0b       	sbc	r27, r26
    23a0:	62 0b       	sbc	r22, r18
    23a2:	73 0b       	sbc	r23, r19
    23a4:	84 0b       	sbc	r24, r20
    23a6:	ba f0       	brmi	.+46     	; 0x23d6 <__addsf3x+0x98>
    23a8:	91 50       	subi	r25, 0x01	; 1
    23aa:	a1 f0       	breq	.+40     	; 0x23d4 <__addsf3x+0x96>
    23ac:	ff 0f       	add	r31, r31
    23ae:	bb 1f       	adc	r27, r27
    23b0:	66 1f       	adc	r22, r22
    23b2:	77 1f       	adc	r23, r23
    23b4:	88 1f       	adc	r24, r24
    23b6:	c2 f7       	brpl	.-16     	; 0x23a8 <__addsf3x+0x6a>
    23b8:	0e c0       	rjmp	.+28     	; 0x23d6 <__addsf3x+0x98>
    23ba:	ba 0f       	add	r27, r26
    23bc:	62 1f       	adc	r22, r18
    23be:	73 1f       	adc	r23, r19
    23c0:	84 1f       	adc	r24, r20
    23c2:	48 f4       	brcc	.+18     	; 0x23d6 <__addsf3x+0x98>
    23c4:	87 95       	ror	r24
    23c6:	77 95       	ror	r23
    23c8:	67 95       	ror	r22
    23ca:	b7 95       	ror	r27
    23cc:	f7 95       	ror	r31
    23ce:	9e 3f       	cpi	r25, 0xFE	; 254
    23d0:	08 f0       	brcs	.+2      	; 0x23d4 <__addsf3x+0x96>
    23d2:	b3 cf       	rjmp	.-154    	; 0x233a <__addsf3+0x1e>
    23d4:	93 95       	inc	r25
    23d6:	88 0f       	add	r24, r24
    23d8:	08 f0       	brcs	.+2      	; 0x23dc <__addsf3x+0x9e>
    23da:	99 27       	eor	r25, r25
    23dc:	ee 0f       	add	r30, r30
    23de:	97 95       	ror	r25
    23e0:	87 95       	ror	r24
    23e2:	08 95       	ret

000023e4 <__fixsfsi>:
    23e4:	04 d0       	rcall	.+8      	; 0x23ee <__fixunssfsi>
    23e6:	68 94       	set
    23e8:	b1 11       	cpse	r27, r1
    23ea:	b5 c0       	rjmp	.+362    	; 0x2556 <__fp_szero>
    23ec:	08 95       	ret

000023ee <__fixunssfsi>:
    23ee:	98 d0       	rcall	.+304    	; 0x2520 <__fp_splitA>
    23f0:	88 f0       	brcs	.+34     	; 0x2414 <__fixunssfsi+0x26>
    23f2:	9f 57       	subi	r25, 0x7F	; 127
    23f4:	90 f0       	brcs	.+36     	; 0x241a <__fixunssfsi+0x2c>
    23f6:	b9 2f       	mov	r27, r25
    23f8:	99 27       	eor	r25, r25
    23fa:	b7 51       	subi	r27, 0x17	; 23
    23fc:	a0 f0       	brcs	.+40     	; 0x2426 <__fixunssfsi+0x38>
    23fe:	d1 f0       	breq	.+52     	; 0x2434 <__fixunssfsi+0x46>
    2400:	66 0f       	add	r22, r22
    2402:	77 1f       	adc	r23, r23
    2404:	88 1f       	adc	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	1a f0       	brmi	.+6      	; 0x2410 <__fixunssfsi+0x22>
    240a:	ba 95       	dec	r27
    240c:	c9 f7       	brne	.-14     	; 0x2400 <__fixunssfsi+0x12>
    240e:	12 c0       	rjmp	.+36     	; 0x2434 <__fixunssfsi+0x46>
    2410:	b1 30       	cpi	r27, 0x01	; 1
    2412:	81 f0       	breq	.+32     	; 0x2434 <__fixunssfsi+0x46>
    2414:	9f d0       	rcall	.+318    	; 0x2554 <__fp_zero>
    2416:	b1 e0       	ldi	r27, 0x01	; 1
    2418:	08 95       	ret
    241a:	9c c0       	rjmp	.+312    	; 0x2554 <__fp_zero>
    241c:	67 2f       	mov	r22, r23
    241e:	78 2f       	mov	r23, r24
    2420:	88 27       	eor	r24, r24
    2422:	b8 5f       	subi	r27, 0xF8	; 248
    2424:	39 f0       	breq	.+14     	; 0x2434 <__fixunssfsi+0x46>
    2426:	b9 3f       	cpi	r27, 0xF9	; 249
    2428:	cc f3       	brlt	.-14     	; 0x241c <__fixunssfsi+0x2e>
    242a:	86 95       	lsr	r24
    242c:	77 95       	ror	r23
    242e:	67 95       	ror	r22
    2430:	b3 95       	inc	r27
    2432:	d9 f7       	brne	.-10     	; 0x242a <__fixunssfsi+0x3c>
    2434:	3e f4       	brtc	.+14     	; 0x2444 <__fixunssfsi+0x56>
    2436:	90 95       	com	r25
    2438:	80 95       	com	r24
    243a:	70 95       	com	r23
    243c:	61 95       	neg	r22
    243e:	7f 4f       	sbci	r23, 0xFF	; 255
    2440:	8f 4f       	sbci	r24, 0xFF	; 255
    2442:	9f 4f       	sbci	r25, 0xFF	; 255
    2444:	08 95       	ret

00002446 <__floatunsisf>:
    2446:	e8 94       	clt
    2448:	09 c0       	rjmp	.+18     	; 0x245c <__floatsisf+0x12>

0000244a <__floatsisf>:
    244a:	97 fb       	bst	r25, 7
    244c:	3e f4       	brtc	.+14     	; 0x245c <__floatsisf+0x12>
    244e:	90 95       	com	r25
    2450:	80 95       	com	r24
    2452:	70 95       	com	r23
    2454:	61 95       	neg	r22
    2456:	7f 4f       	sbci	r23, 0xFF	; 255
    2458:	8f 4f       	sbci	r24, 0xFF	; 255
    245a:	9f 4f       	sbci	r25, 0xFF	; 255
    245c:	99 23       	and	r25, r25
    245e:	a9 f0       	breq	.+42     	; 0x248a <__floatsisf+0x40>
    2460:	f9 2f       	mov	r31, r25
    2462:	96 e9       	ldi	r25, 0x96	; 150
    2464:	bb 27       	eor	r27, r27
    2466:	93 95       	inc	r25
    2468:	f6 95       	lsr	r31
    246a:	87 95       	ror	r24
    246c:	77 95       	ror	r23
    246e:	67 95       	ror	r22
    2470:	b7 95       	ror	r27
    2472:	f1 11       	cpse	r31, r1
    2474:	f8 cf       	rjmp	.-16     	; 0x2466 <__floatsisf+0x1c>
    2476:	fa f4       	brpl	.+62     	; 0x24b6 <__floatsisf+0x6c>
    2478:	bb 0f       	add	r27, r27
    247a:	11 f4       	brne	.+4      	; 0x2480 <__floatsisf+0x36>
    247c:	60 ff       	sbrs	r22, 0
    247e:	1b c0       	rjmp	.+54     	; 0x24b6 <__floatsisf+0x6c>
    2480:	6f 5f       	subi	r22, 0xFF	; 255
    2482:	7f 4f       	sbci	r23, 0xFF	; 255
    2484:	8f 4f       	sbci	r24, 0xFF	; 255
    2486:	9f 4f       	sbci	r25, 0xFF	; 255
    2488:	16 c0       	rjmp	.+44     	; 0x24b6 <__floatsisf+0x6c>
    248a:	88 23       	and	r24, r24
    248c:	11 f0       	breq	.+4      	; 0x2492 <__floatsisf+0x48>
    248e:	96 e9       	ldi	r25, 0x96	; 150
    2490:	11 c0       	rjmp	.+34     	; 0x24b4 <__floatsisf+0x6a>
    2492:	77 23       	and	r23, r23
    2494:	21 f0       	breq	.+8      	; 0x249e <__floatsisf+0x54>
    2496:	9e e8       	ldi	r25, 0x8E	; 142
    2498:	87 2f       	mov	r24, r23
    249a:	76 2f       	mov	r23, r22
    249c:	05 c0       	rjmp	.+10     	; 0x24a8 <__floatsisf+0x5e>
    249e:	66 23       	and	r22, r22
    24a0:	71 f0       	breq	.+28     	; 0x24be <__floatsisf+0x74>
    24a2:	96 e8       	ldi	r25, 0x86	; 134
    24a4:	86 2f       	mov	r24, r22
    24a6:	70 e0       	ldi	r23, 0x00	; 0
    24a8:	60 e0       	ldi	r22, 0x00	; 0
    24aa:	2a f0       	brmi	.+10     	; 0x24b6 <__floatsisf+0x6c>
    24ac:	9a 95       	dec	r25
    24ae:	66 0f       	add	r22, r22
    24b0:	77 1f       	adc	r23, r23
    24b2:	88 1f       	adc	r24, r24
    24b4:	da f7       	brpl	.-10     	; 0x24ac <__floatsisf+0x62>
    24b6:	88 0f       	add	r24, r24
    24b8:	96 95       	lsr	r25
    24ba:	87 95       	ror	r24
    24bc:	97 f9       	bld	r25, 7
    24be:	08 95       	ret

000024c0 <__fp_inf>:
    24c0:	97 f9       	bld	r25, 7
    24c2:	9f 67       	ori	r25, 0x7F	; 127
    24c4:	80 e8       	ldi	r24, 0x80	; 128
    24c6:	70 e0       	ldi	r23, 0x00	; 0
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	08 95       	ret

000024cc <__fp_nan>:
    24cc:	9f ef       	ldi	r25, 0xFF	; 255
    24ce:	80 ec       	ldi	r24, 0xC0	; 192
    24d0:	08 95       	ret

000024d2 <__fp_pscA>:
    24d2:	00 24       	eor	r0, r0
    24d4:	0a 94       	dec	r0
    24d6:	16 16       	cp	r1, r22
    24d8:	17 06       	cpc	r1, r23
    24da:	18 06       	cpc	r1, r24
    24dc:	09 06       	cpc	r0, r25
    24de:	08 95       	ret

000024e0 <__fp_pscB>:
    24e0:	00 24       	eor	r0, r0
    24e2:	0a 94       	dec	r0
    24e4:	12 16       	cp	r1, r18
    24e6:	13 06       	cpc	r1, r19
    24e8:	14 06       	cpc	r1, r20
    24ea:	05 06       	cpc	r0, r21
    24ec:	08 95       	ret

000024ee <__fp_round>:
    24ee:	09 2e       	mov	r0, r25
    24f0:	03 94       	inc	r0
    24f2:	00 0c       	add	r0, r0
    24f4:	11 f4       	brne	.+4      	; 0x24fa <__fp_round+0xc>
    24f6:	88 23       	and	r24, r24
    24f8:	52 f0       	brmi	.+20     	; 0x250e <__fp_round+0x20>
    24fa:	bb 0f       	add	r27, r27
    24fc:	40 f4       	brcc	.+16     	; 0x250e <__fp_round+0x20>
    24fe:	bf 2b       	or	r27, r31
    2500:	11 f4       	brne	.+4      	; 0x2506 <__fp_round+0x18>
    2502:	60 ff       	sbrs	r22, 0
    2504:	04 c0       	rjmp	.+8      	; 0x250e <__fp_round+0x20>
    2506:	6f 5f       	subi	r22, 0xFF	; 255
    2508:	7f 4f       	sbci	r23, 0xFF	; 255
    250a:	8f 4f       	sbci	r24, 0xFF	; 255
    250c:	9f 4f       	sbci	r25, 0xFF	; 255
    250e:	08 95       	ret

00002510 <__fp_split3>:
    2510:	57 fd       	sbrc	r21, 7
    2512:	90 58       	subi	r25, 0x80	; 128
    2514:	44 0f       	add	r20, r20
    2516:	55 1f       	adc	r21, r21
    2518:	59 f0       	breq	.+22     	; 0x2530 <__fp_splitA+0x10>
    251a:	5f 3f       	cpi	r21, 0xFF	; 255
    251c:	71 f0       	breq	.+28     	; 0x253a <__fp_splitA+0x1a>
    251e:	47 95       	ror	r20

00002520 <__fp_splitA>:
    2520:	88 0f       	add	r24, r24
    2522:	97 fb       	bst	r25, 7
    2524:	99 1f       	adc	r25, r25
    2526:	61 f0       	breq	.+24     	; 0x2540 <__fp_splitA+0x20>
    2528:	9f 3f       	cpi	r25, 0xFF	; 255
    252a:	79 f0       	breq	.+30     	; 0x254a <__fp_splitA+0x2a>
    252c:	87 95       	ror	r24
    252e:	08 95       	ret
    2530:	12 16       	cp	r1, r18
    2532:	13 06       	cpc	r1, r19
    2534:	14 06       	cpc	r1, r20
    2536:	55 1f       	adc	r21, r21
    2538:	f2 cf       	rjmp	.-28     	; 0x251e <__fp_split3+0xe>
    253a:	46 95       	lsr	r20
    253c:	f1 df       	rcall	.-30     	; 0x2520 <__fp_splitA>
    253e:	08 c0       	rjmp	.+16     	; 0x2550 <__fp_splitA+0x30>
    2540:	16 16       	cp	r1, r22
    2542:	17 06       	cpc	r1, r23
    2544:	18 06       	cpc	r1, r24
    2546:	99 1f       	adc	r25, r25
    2548:	f1 cf       	rjmp	.-30     	; 0x252c <__fp_splitA+0xc>
    254a:	86 95       	lsr	r24
    254c:	71 05       	cpc	r23, r1
    254e:	61 05       	cpc	r22, r1
    2550:	08 94       	sec
    2552:	08 95       	ret

00002554 <__fp_zero>:
    2554:	e8 94       	clt

00002556 <__fp_szero>:
    2556:	bb 27       	eor	r27, r27
    2558:	66 27       	eor	r22, r22
    255a:	77 27       	eor	r23, r23
    255c:	cb 01       	movw	r24, r22
    255e:	97 f9       	bld	r25, 7
    2560:	08 95       	ret

00002562 <__mulsf3>:
    2562:	0b d0       	rcall	.+22     	; 0x257a <__mulsf3x>
    2564:	c4 cf       	rjmp	.-120    	; 0x24ee <__fp_round>
    2566:	b5 df       	rcall	.-150    	; 0x24d2 <__fp_pscA>
    2568:	28 f0       	brcs	.+10     	; 0x2574 <__mulsf3+0x12>
    256a:	ba df       	rcall	.-140    	; 0x24e0 <__fp_pscB>
    256c:	18 f0       	brcs	.+6      	; 0x2574 <__mulsf3+0x12>
    256e:	95 23       	and	r25, r21
    2570:	09 f0       	breq	.+2      	; 0x2574 <__mulsf3+0x12>
    2572:	a6 cf       	rjmp	.-180    	; 0x24c0 <__fp_inf>
    2574:	ab cf       	rjmp	.-170    	; 0x24cc <__fp_nan>
    2576:	11 24       	eor	r1, r1
    2578:	ee cf       	rjmp	.-36     	; 0x2556 <__fp_szero>

0000257a <__mulsf3x>:
    257a:	ca df       	rcall	.-108    	; 0x2510 <__fp_split3>
    257c:	a0 f3       	brcs	.-24     	; 0x2566 <__mulsf3+0x4>

0000257e <__mulsf3_pse>:
    257e:	95 9f       	mul	r25, r21
    2580:	d1 f3       	breq	.-12     	; 0x2576 <__mulsf3+0x14>
    2582:	95 0f       	add	r25, r21
    2584:	50 e0       	ldi	r21, 0x00	; 0
    2586:	55 1f       	adc	r21, r21
    2588:	62 9f       	mul	r22, r18
    258a:	f0 01       	movw	r30, r0
    258c:	72 9f       	mul	r23, r18
    258e:	bb 27       	eor	r27, r27
    2590:	f0 0d       	add	r31, r0
    2592:	b1 1d       	adc	r27, r1
    2594:	63 9f       	mul	r22, r19
    2596:	aa 27       	eor	r26, r26
    2598:	f0 0d       	add	r31, r0
    259a:	b1 1d       	adc	r27, r1
    259c:	aa 1f       	adc	r26, r26
    259e:	64 9f       	mul	r22, r20
    25a0:	66 27       	eor	r22, r22
    25a2:	b0 0d       	add	r27, r0
    25a4:	a1 1d       	adc	r26, r1
    25a6:	66 1f       	adc	r22, r22
    25a8:	82 9f       	mul	r24, r18
    25aa:	22 27       	eor	r18, r18
    25ac:	b0 0d       	add	r27, r0
    25ae:	a1 1d       	adc	r26, r1
    25b0:	62 1f       	adc	r22, r18
    25b2:	73 9f       	mul	r23, r19
    25b4:	b0 0d       	add	r27, r0
    25b6:	a1 1d       	adc	r26, r1
    25b8:	62 1f       	adc	r22, r18
    25ba:	83 9f       	mul	r24, r19
    25bc:	a0 0d       	add	r26, r0
    25be:	61 1d       	adc	r22, r1
    25c0:	22 1f       	adc	r18, r18
    25c2:	74 9f       	mul	r23, r20
    25c4:	33 27       	eor	r19, r19
    25c6:	a0 0d       	add	r26, r0
    25c8:	61 1d       	adc	r22, r1
    25ca:	23 1f       	adc	r18, r19
    25cc:	84 9f       	mul	r24, r20
    25ce:	60 0d       	add	r22, r0
    25d0:	21 1d       	adc	r18, r1
    25d2:	82 2f       	mov	r24, r18
    25d4:	76 2f       	mov	r23, r22
    25d6:	6a 2f       	mov	r22, r26
    25d8:	11 24       	eor	r1, r1
    25da:	9f 57       	subi	r25, 0x7F	; 127
    25dc:	50 40       	sbci	r21, 0x00	; 0
    25de:	8a f0       	brmi	.+34     	; 0x2602 <__mulsf3_pse+0x84>
    25e0:	e1 f0       	breq	.+56     	; 0x261a <__mulsf3_pse+0x9c>
    25e2:	88 23       	and	r24, r24
    25e4:	4a f0       	brmi	.+18     	; 0x25f8 <__mulsf3_pse+0x7a>
    25e6:	ee 0f       	add	r30, r30
    25e8:	ff 1f       	adc	r31, r31
    25ea:	bb 1f       	adc	r27, r27
    25ec:	66 1f       	adc	r22, r22
    25ee:	77 1f       	adc	r23, r23
    25f0:	88 1f       	adc	r24, r24
    25f2:	91 50       	subi	r25, 0x01	; 1
    25f4:	50 40       	sbci	r21, 0x00	; 0
    25f6:	a9 f7       	brne	.-22     	; 0x25e2 <__mulsf3_pse+0x64>
    25f8:	9e 3f       	cpi	r25, 0xFE	; 254
    25fa:	51 05       	cpc	r21, r1
    25fc:	70 f0       	brcs	.+28     	; 0x261a <__mulsf3_pse+0x9c>
    25fe:	60 cf       	rjmp	.-320    	; 0x24c0 <__fp_inf>
    2600:	aa cf       	rjmp	.-172    	; 0x2556 <__fp_szero>
    2602:	5f 3f       	cpi	r21, 0xFF	; 255
    2604:	ec f3       	brlt	.-6      	; 0x2600 <__mulsf3_pse+0x82>
    2606:	98 3e       	cpi	r25, 0xE8	; 232
    2608:	dc f3       	brlt	.-10     	; 0x2600 <__mulsf3_pse+0x82>
    260a:	86 95       	lsr	r24
    260c:	77 95       	ror	r23
    260e:	67 95       	ror	r22
    2610:	b7 95       	ror	r27
    2612:	f7 95       	ror	r31
    2614:	e7 95       	ror	r30
    2616:	9f 5f       	subi	r25, 0xFF	; 255
    2618:	c1 f7       	brne	.-16     	; 0x260a <__mulsf3_pse+0x8c>
    261a:	fe 2b       	or	r31, r30
    261c:	88 0f       	add	r24, r24
    261e:	91 1d       	adc	r25, r1
    2620:	96 95       	lsr	r25
    2622:	87 95       	ror	r24
    2624:	97 f9       	bld	r25, 7
    2626:	08 95       	ret

00002628 <__divmodhi4>:
    2628:	97 fb       	bst	r25, 7
    262a:	07 2e       	mov	r0, r23
    262c:	16 f4       	brtc	.+4      	; 0x2632 <__divmodhi4+0xa>
    262e:	00 94       	com	r0
    2630:	06 d0       	rcall	.+12     	; 0x263e <__divmodhi4_neg1>
    2632:	77 fd       	sbrc	r23, 7
    2634:	08 d0       	rcall	.+16     	; 0x2646 <__divmodhi4_neg2>
    2636:	1a d0       	rcall	.+52     	; 0x266c <__udivmodhi4>
    2638:	07 fc       	sbrc	r0, 7
    263a:	05 d0       	rcall	.+10     	; 0x2646 <__divmodhi4_neg2>
    263c:	3e f4       	brtc	.+14     	; 0x264c <__divmodhi4_exit>

0000263e <__divmodhi4_neg1>:
    263e:	90 95       	com	r25
    2640:	81 95       	neg	r24
    2642:	9f 4f       	sbci	r25, 0xFF	; 255
    2644:	08 95       	ret

00002646 <__divmodhi4_neg2>:
    2646:	70 95       	com	r23
    2648:	61 95       	neg	r22
    264a:	7f 4f       	sbci	r23, 0xFF	; 255

0000264c <__divmodhi4_exit>:
    264c:	08 95       	ret

0000264e <__umulhisi3>:
    264e:	a2 9f       	mul	r26, r18
    2650:	b0 01       	movw	r22, r0
    2652:	b3 9f       	mul	r27, r19
    2654:	c0 01       	movw	r24, r0
    2656:	a3 9f       	mul	r26, r19
    2658:	70 0d       	add	r23, r0
    265a:	81 1d       	adc	r24, r1
    265c:	11 24       	eor	r1, r1
    265e:	91 1d       	adc	r25, r1
    2660:	b2 9f       	mul	r27, r18
    2662:	70 0d       	add	r23, r0
    2664:	81 1d       	adc	r24, r1
    2666:	11 24       	eor	r1, r1
    2668:	91 1d       	adc	r25, r1
    266a:	08 95       	ret

0000266c <__udivmodhi4>:
    266c:	aa 1b       	sub	r26, r26
    266e:	bb 1b       	sub	r27, r27
    2670:	51 e1       	ldi	r21, 0x11	; 17
    2672:	07 c0       	rjmp	.+14     	; 0x2682 <__udivmodhi4_ep>

00002674 <__udivmodhi4_loop>:
    2674:	aa 1f       	adc	r26, r26
    2676:	bb 1f       	adc	r27, r27
    2678:	a6 17       	cp	r26, r22
    267a:	b7 07       	cpc	r27, r23
    267c:	10 f0       	brcs	.+4      	; 0x2682 <__udivmodhi4_ep>
    267e:	a6 1b       	sub	r26, r22
    2680:	b7 0b       	sbc	r27, r23

00002682 <__udivmodhi4_ep>:
    2682:	88 1f       	adc	r24, r24
    2684:	99 1f       	adc	r25, r25
    2686:	5a 95       	dec	r21
    2688:	a9 f7       	brne	.-22     	; 0x2674 <__udivmodhi4_loop>
    268a:	80 95       	com	r24
    268c:	90 95       	com	r25
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	08 95       	ret

00002694 <strchr>:
    2694:	fc 01       	movw	r30, r24
    2696:	81 91       	ld	r24, Z+
    2698:	86 17       	cp	r24, r22
    269a:	21 f0       	breq	.+8      	; 0x26a4 <strchr+0x10>
    269c:	88 23       	and	r24, r24
    269e:	d9 f7       	brne	.-10     	; 0x2696 <strchr+0x2>
    26a0:	99 27       	eor	r25, r25
    26a2:	08 95       	ret
    26a4:	31 97       	sbiw	r30, 0x01	; 1
    26a6:	cf 01       	movw	r24, r30
    26a8:	08 95       	ret

000026aa <strncpy>:
    26aa:	fb 01       	movw	r30, r22
    26ac:	dc 01       	movw	r26, r24
    26ae:	41 50       	subi	r20, 0x01	; 1
    26b0:	50 40       	sbci	r21, 0x00	; 0
    26b2:	48 f0       	brcs	.+18     	; 0x26c6 <strncpy+0x1c>
    26b4:	01 90       	ld	r0, Z+
    26b6:	0d 92       	st	X+, r0
    26b8:	00 20       	and	r0, r0
    26ba:	c9 f7       	brne	.-14     	; 0x26ae <strncpy+0x4>
    26bc:	01 c0       	rjmp	.+2      	; 0x26c0 <strncpy+0x16>
    26be:	1d 92       	st	X+, r1
    26c0:	41 50       	subi	r20, 0x01	; 1
    26c2:	50 40       	sbci	r21, 0x00	; 0
    26c4:	e0 f7       	brcc	.-8      	; 0x26be <strncpy+0x14>
    26c6:	08 95       	ret

000026c8 <strstr>:
    26c8:	fb 01       	movw	r30, r22
    26ca:	51 91       	ld	r21, Z+
    26cc:	55 23       	and	r21, r21
    26ce:	a9 f0       	breq	.+42     	; 0x26fa <strstr+0x32>
    26d0:	bf 01       	movw	r22, r30
    26d2:	dc 01       	movw	r26, r24
    26d4:	4d 91       	ld	r20, X+
    26d6:	45 17       	cp	r20, r21
    26d8:	41 11       	cpse	r20, r1
    26da:	e1 f7       	brne	.-8      	; 0x26d4 <strstr+0xc>
    26dc:	59 f4       	brne	.+22     	; 0x26f4 <strstr+0x2c>
    26de:	cd 01       	movw	r24, r26
    26e0:	01 90       	ld	r0, Z+
    26e2:	00 20       	and	r0, r0
    26e4:	49 f0       	breq	.+18     	; 0x26f8 <strstr+0x30>
    26e6:	4d 91       	ld	r20, X+
    26e8:	40 15       	cp	r20, r0
    26ea:	41 11       	cpse	r20, r1
    26ec:	c9 f3       	breq	.-14     	; 0x26e0 <strstr+0x18>
    26ee:	fb 01       	movw	r30, r22
    26f0:	41 11       	cpse	r20, r1
    26f2:	ef cf       	rjmp	.-34     	; 0x26d2 <strstr+0xa>
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	08 95       	ret

000026fc <puts>:
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	e0 91 64 27 	lds	r30, 0x2764
    2708:	f0 91 65 27 	lds	r31, 0x2765
    270c:	23 81       	ldd	r18, Z+3	; 0x03
    270e:	21 ff       	sbrs	r18, 1
    2710:	1b c0       	rjmp	.+54     	; 0x2748 <puts+0x4c>
    2712:	ec 01       	movw	r28, r24
    2714:	00 e0       	ldi	r16, 0x00	; 0
    2716:	10 e0       	ldi	r17, 0x00	; 0
    2718:	89 91       	ld	r24, Y+
    271a:	60 91 64 27 	lds	r22, 0x2764
    271e:	70 91 65 27 	lds	r23, 0x2765
    2722:	db 01       	movw	r26, r22
    2724:	18 96       	adiw	r26, 0x08	; 8
    2726:	ed 91       	ld	r30, X+
    2728:	fc 91       	ld	r31, X
    272a:	19 97       	sbiw	r26, 0x09	; 9
    272c:	88 23       	and	r24, r24
    272e:	31 f0       	breq	.+12     	; 0x273c <puts+0x40>
    2730:	09 95       	icall
    2732:	89 2b       	or	r24, r25
    2734:	89 f3       	breq	.-30     	; 0x2718 <puts+0x1c>
    2736:	0f ef       	ldi	r16, 0xFF	; 255
    2738:	1f ef       	ldi	r17, 0xFF	; 255
    273a:	ee cf       	rjmp	.-36     	; 0x2718 <puts+0x1c>
    273c:	8a e0       	ldi	r24, 0x0A	; 10
    273e:	09 95       	icall
    2740:	89 2b       	or	r24, r25
    2742:	11 f4       	brne	.+4      	; 0x2748 <puts+0x4c>
    2744:	c8 01       	movw	r24, r16
    2746:	02 c0       	rjmp	.+4      	; 0x274c <puts+0x50>
    2748:	8f ef       	ldi	r24, 0xFF	; 255
    274a:	9f ef       	ldi	r25, 0xFF	; 255
    274c:	df 91       	pop	r29
    274e:	cf 91       	pop	r28
    2750:	1f 91       	pop	r17
    2752:	0f 91       	pop	r16
    2754:	08 95       	ret

00002756 <sprintf>:
    2756:	0f 93       	push	r16
    2758:	1f 93       	push	r17
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
    2762:	2e 97       	sbiw	r28, 0x0e	; 14
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	0d 89       	ldd	r16, Y+21	; 0x15
    276a:	1e 89       	ldd	r17, Y+22	; 0x16
    276c:	86 e0       	ldi	r24, 0x06	; 6
    276e:	8c 83       	std	Y+4, r24	; 0x04
    2770:	09 83       	std	Y+1, r16	; 0x01
    2772:	1a 83       	std	Y+2, r17	; 0x02
    2774:	8f ef       	ldi	r24, 0xFF	; 255
    2776:	9f e7       	ldi	r25, 0x7F	; 127
    2778:	8d 83       	std	Y+5, r24	; 0x05
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	ae 01       	movw	r20, r28
    277e:	47 5e       	subi	r20, 0xE7	; 231
    2780:	5f 4f       	sbci	r21, 0xFF	; 255
    2782:	6f 89       	ldd	r22, Y+23	; 0x17
    2784:	78 8d       	ldd	r23, Y+24	; 0x18
    2786:	ce 01       	movw	r24, r28
    2788:	01 96       	adiw	r24, 0x01	; 1
    278a:	0d d0       	rcall	.+26     	; 0x27a6 <vfprintf>
    278c:	ef 81       	ldd	r30, Y+7	; 0x07
    278e:	f8 85       	ldd	r31, Y+8	; 0x08
    2790:	e0 0f       	add	r30, r16
    2792:	f1 1f       	adc	r31, r17
    2794:	10 82       	st	Z, r1
    2796:	2e 96       	adiw	r28, 0x0e	; 14
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <vfprintf>:
    27a6:	2f 92       	push	r2
    27a8:	3f 92       	push	r3
    27aa:	4f 92       	push	r4
    27ac:	5f 92       	push	r5
    27ae:	6f 92       	push	r6
    27b0:	7f 92       	push	r7
    27b2:	8f 92       	push	r8
    27b4:	9f 92       	push	r9
    27b6:	af 92       	push	r10
    27b8:	bf 92       	push	r11
    27ba:	cf 92       	push	r12
    27bc:	df 92       	push	r13
    27be:	ef 92       	push	r14
    27c0:	ff 92       	push	r15
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	2c 97       	sbiw	r28, 0x0c	; 12
    27d0:	cd bf       	out	0x3d, r28	; 61
    27d2:	de bf       	out	0x3e, r29	; 62
    27d4:	7c 01       	movw	r14, r24
    27d6:	6b 01       	movw	r12, r22
    27d8:	8a 01       	movw	r16, r20
    27da:	fc 01       	movw	r30, r24
    27dc:	16 82       	std	Z+6, r1	; 0x06
    27de:	17 82       	std	Z+7, r1	; 0x07
    27e0:	83 81       	ldd	r24, Z+3	; 0x03
    27e2:	81 ff       	sbrs	r24, 1
    27e4:	b0 c1       	rjmp	.+864    	; 0x2b46 <vfprintf+0x3a0>
    27e6:	ce 01       	movw	r24, r28
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	4c 01       	movw	r8, r24
    27ec:	f7 01       	movw	r30, r14
    27ee:	93 81       	ldd	r25, Z+3	; 0x03
    27f0:	f6 01       	movw	r30, r12
    27f2:	93 fd       	sbrc	r25, 3
    27f4:	85 91       	lpm	r24, Z+
    27f6:	93 ff       	sbrs	r25, 3
    27f8:	81 91       	ld	r24, Z+
    27fa:	6f 01       	movw	r12, r30
    27fc:	88 23       	and	r24, r24
    27fe:	09 f4       	brne	.+2      	; 0x2802 <vfprintf+0x5c>
    2800:	9e c1       	rjmp	.+828    	; 0x2b3e <vfprintf+0x398>
    2802:	85 32       	cpi	r24, 0x25	; 37
    2804:	39 f4       	brne	.+14     	; 0x2814 <vfprintf+0x6e>
    2806:	93 fd       	sbrc	r25, 3
    2808:	85 91       	lpm	r24, Z+
    280a:	93 ff       	sbrs	r25, 3
    280c:	81 91       	ld	r24, Z+
    280e:	6f 01       	movw	r12, r30
    2810:	85 32       	cpi	r24, 0x25	; 37
    2812:	21 f4       	brne	.+8      	; 0x281c <vfprintf+0x76>
    2814:	b7 01       	movw	r22, r14
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	c4 d1       	rcall	.+904    	; 0x2ba2 <fputc>
    281a:	e8 cf       	rjmp	.-48     	; 0x27ec <vfprintf+0x46>
    281c:	51 2c       	mov	r5, r1
    281e:	31 2c       	mov	r3, r1
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	20 32       	cpi	r18, 0x20	; 32
    2824:	a0 f4       	brcc	.+40     	; 0x284e <vfprintf+0xa8>
    2826:	8b 32       	cpi	r24, 0x2B	; 43
    2828:	69 f0       	breq	.+26     	; 0x2844 <vfprintf+0x9e>
    282a:	30 f4       	brcc	.+12     	; 0x2838 <vfprintf+0x92>
    282c:	80 32       	cpi	r24, 0x20	; 32
    282e:	59 f0       	breq	.+22     	; 0x2846 <vfprintf+0xa0>
    2830:	83 32       	cpi	r24, 0x23	; 35
    2832:	69 f4       	brne	.+26     	; 0x284e <vfprintf+0xa8>
    2834:	20 61       	ori	r18, 0x10	; 16
    2836:	2c c0       	rjmp	.+88     	; 0x2890 <vfprintf+0xea>
    2838:	8d 32       	cpi	r24, 0x2D	; 45
    283a:	39 f0       	breq	.+14     	; 0x284a <vfprintf+0xa4>
    283c:	80 33       	cpi	r24, 0x30	; 48
    283e:	39 f4       	brne	.+14     	; 0x284e <vfprintf+0xa8>
    2840:	21 60       	ori	r18, 0x01	; 1
    2842:	26 c0       	rjmp	.+76     	; 0x2890 <vfprintf+0xea>
    2844:	22 60       	ori	r18, 0x02	; 2
    2846:	24 60       	ori	r18, 0x04	; 4
    2848:	23 c0       	rjmp	.+70     	; 0x2890 <vfprintf+0xea>
    284a:	28 60       	ori	r18, 0x08	; 8
    284c:	21 c0       	rjmp	.+66     	; 0x2890 <vfprintf+0xea>
    284e:	27 fd       	sbrc	r18, 7
    2850:	27 c0       	rjmp	.+78     	; 0x28a0 <vfprintf+0xfa>
    2852:	30 ed       	ldi	r19, 0xD0	; 208
    2854:	38 0f       	add	r19, r24
    2856:	3a 30       	cpi	r19, 0x0A	; 10
    2858:	78 f4       	brcc	.+30     	; 0x2878 <vfprintf+0xd2>
    285a:	26 ff       	sbrs	r18, 6
    285c:	06 c0       	rjmp	.+12     	; 0x286a <vfprintf+0xc4>
    285e:	fa e0       	ldi	r31, 0x0A	; 10
    2860:	5f 9e       	mul	r5, r31
    2862:	30 0d       	add	r19, r0
    2864:	11 24       	eor	r1, r1
    2866:	53 2e       	mov	r5, r19
    2868:	13 c0       	rjmp	.+38     	; 0x2890 <vfprintf+0xea>
    286a:	8a e0       	ldi	r24, 0x0A	; 10
    286c:	38 9e       	mul	r3, r24
    286e:	30 0d       	add	r19, r0
    2870:	11 24       	eor	r1, r1
    2872:	33 2e       	mov	r3, r19
    2874:	20 62       	ori	r18, 0x20	; 32
    2876:	0c c0       	rjmp	.+24     	; 0x2890 <vfprintf+0xea>
    2878:	8e 32       	cpi	r24, 0x2E	; 46
    287a:	21 f4       	brne	.+8      	; 0x2884 <vfprintf+0xde>
    287c:	26 fd       	sbrc	r18, 6
    287e:	5f c1       	rjmp	.+702    	; 0x2b3e <vfprintf+0x398>
    2880:	20 64       	ori	r18, 0x40	; 64
    2882:	06 c0       	rjmp	.+12     	; 0x2890 <vfprintf+0xea>
    2884:	8c 36       	cpi	r24, 0x6C	; 108
    2886:	11 f4       	brne	.+4      	; 0x288c <vfprintf+0xe6>
    2888:	20 68       	ori	r18, 0x80	; 128
    288a:	02 c0       	rjmp	.+4      	; 0x2890 <vfprintf+0xea>
    288c:	88 36       	cpi	r24, 0x68	; 104
    288e:	41 f4       	brne	.+16     	; 0x28a0 <vfprintf+0xfa>
    2890:	f6 01       	movw	r30, r12
    2892:	93 fd       	sbrc	r25, 3
    2894:	85 91       	lpm	r24, Z+
    2896:	93 ff       	sbrs	r25, 3
    2898:	81 91       	ld	r24, Z+
    289a:	6f 01       	movw	r12, r30
    289c:	81 11       	cpse	r24, r1
    289e:	c1 cf       	rjmp	.-126    	; 0x2822 <vfprintf+0x7c>
    28a0:	98 2f       	mov	r25, r24
    28a2:	9f 7d       	andi	r25, 0xDF	; 223
    28a4:	95 54       	subi	r25, 0x45	; 69
    28a6:	93 30       	cpi	r25, 0x03	; 3
    28a8:	28 f4       	brcc	.+10     	; 0x28b4 <vfprintf+0x10e>
    28aa:	0c 5f       	subi	r16, 0xFC	; 252
    28ac:	1f 4f       	sbci	r17, 0xFF	; 255
    28ae:	ff e3       	ldi	r31, 0x3F	; 63
    28b0:	f9 83       	std	Y+1, r31	; 0x01
    28b2:	0d c0       	rjmp	.+26     	; 0x28ce <vfprintf+0x128>
    28b4:	83 36       	cpi	r24, 0x63	; 99
    28b6:	31 f0       	breq	.+12     	; 0x28c4 <vfprintf+0x11e>
    28b8:	83 37       	cpi	r24, 0x73	; 115
    28ba:	71 f0       	breq	.+28     	; 0x28d8 <vfprintf+0x132>
    28bc:	83 35       	cpi	r24, 0x53	; 83
    28be:	09 f0       	breq	.+2      	; 0x28c2 <vfprintf+0x11c>
    28c0:	57 c0       	rjmp	.+174    	; 0x2970 <vfprintf+0x1ca>
    28c2:	21 c0       	rjmp	.+66     	; 0x2906 <vfprintf+0x160>
    28c4:	f8 01       	movw	r30, r16
    28c6:	80 81       	ld	r24, Z
    28c8:	89 83       	std	Y+1, r24	; 0x01
    28ca:	0e 5f       	subi	r16, 0xFE	; 254
    28cc:	1f 4f       	sbci	r17, 0xFF	; 255
    28ce:	44 24       	eor	r4, r4
    28d0:	43 94       	inc	r4
    28d2:	51 2c       	mov	r5, r1
    28d4:	54 01       	movw	r10, r8
    28d6:	14 c0       	rjmp	.+40     	; 0x2900 <vfprintf+0x15a>
    28d8:	38 01       	movw	r6, r16
    28da:	f2 e0       	ldi	r31, 0x02	; 2
    28dc:	6f 0e       	add	r6, r31
    28de:	71 1c       	adc	r7, r1
    28e0:	f8 01       	movw	r30, r16
    28e2:	a0 80       	ld	r10, Z
    28e4:	b1 80       	ldd	r11, Z+1	; 0x01
    28e6:	26 ff       	sbrs	r18, 6
    28e8:	03 c0       	rjmp	.+6      	; 0x28f0 <vfprintf+0x14a>
    28ea:	65 2d       	mov	r22, r5
    28ec:	70 e0       	ldi	r23, 0x00	; 0
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <vfprintf+0x14e>
    28f0:	6f ef       	ldi	r22, 0xFF	; 255
    28f2:	7f ef       	ldi	r23, 0xFF	; 255
    28f4:	c5 01       	movw	r24, r10
    28f6:	2c 87       	std	Y+12, r18	; 0x0c
    28f8:	49 d1       	rcall	.+658    	; 0x2b8c <strnlen>
    28fa:	2c 01       	movw	r4, r24
    28fc:	83 01       	movw	r16, r6
    28fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    2900:	2f 77       	andi	r18, 0x7F	; 127
    2902:	22 2e       	mov	r2, r18
    2904:	16 c0       	rjmp	.+44     	; 0x2932 <vfprintf+0x18c>
    2906:	38 01       	movw	r6, r16
    2908:	f2 e0       	ldi	r31, 0x02	; 2
    290a:	6f 0e       	add	r6, r31
    290c:	71 1c       	adc	r7, r1
    290e:	f8 01       	movw	r30, r16
    2910:	a0 80       	ld	r10, Z
    2912:	b1 80       	ldd	r11, Z+1	; 0x01
    2914:	26 ff       	sbrs	r18, 6
    2916:	03 c0       	rjmp	.+6      	; 0x291e <vfprintf+0x178>
    2918:	65 2d       	mov	r22, r5
    291a:	70 e0       	ldi	r23, 0x00	; 0
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <vfprintf+0x17c>
    291e:	6f ef       	ldi	r22, 0xFF	; 255
    2920:	7f ef       	ldi	r23, 0xFF	; 255
    2922:	c5 01       	movw	r24, r10
    2924:	2c 87       	std	Y+12, r18	; 0x0c
    2926:	27 d1       	rcall	.+590    	; 0x2b76 <strnlen_P>
    2928:	2c 01       	movw	r4, r24
    292a:	2c 85       	ldd	r18, Y+12	; 0x0c
    292c:	20 68       	ori	r18, 0x80	; 128
    292e:	22 2e       	mov	r2, r18
    2930:	83 01       	movw	r16, r6
    2932:	23 fc       	sbrc	r2, 3
    2934:	19 c0       	rjmp	.+50     	; 0x2968 <vfprintf+0x1c2>
    2936:	83 2d       	mov	r24, r3
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	48 16       	cp	r4, r24
    293c:	59 06       	cpc	r5, r25
    293e:	a0 f4       	brcc	.+40     	; 0x2968 <vfprintf+0x1c2>
    2940:	b7 01       	movw	r22, r14
    2942:	80 e2       	ldi	r24, 0x20	; 32
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	2d d1       	rcall	.+602    	; 0x2ba2 <fputc>
    2948:	3a 94       	dec	r3
    294a:	f5 cf       	rjmp	.-22     	; 0x2936 <vfprintf+0x190>
    294c:	f5 01       	movw	r30, r10
    294e:	27 fc       	sbrc	r2, 7
    2950:	85 91       	lpm	r24, Z+
    2952:	27 fe       	sbrs	r2, 7
    2954:	81 91       	ld	r24, Z+
    2956:	5f 01       	movw	r10, r30
    2958:	b7 01       	movw	r22, r14
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	22 d1       	rcall	.+580    	; 0x2ba2 <fputc>
    295e:	31 10       	cpse	r3, r1
    2960:	3a 94       	dec	r3
    2962:	f1 e0       	ldi	r31, 0x01	; 1
    2964:	4f 1a       	sub	r4, r31
    2966:	51 08       	sbc	r5, r1
    2968:	41 14       	cp	r4, r1
    296a:	51 04       	cpc	r5, r1
    296c:	79 f7       	brne	.-34     	; 0x294c <vfprintf+0x1a6>
    296e:	de c0       	rjmp	.+444    	; 0x2b2c <vfprintf+0x386>
    2970:	84 36       	cpi	r24, 0x64	; 100
    2972:	11 f0       	breq	.+4      	; 0x2978 <vfprintf+0x1d2>
    2974:	89 36       	cpi	r24, 0x69	; 105
    2976:	31 f5       	brne	.+76     	; 0x29c4 <vfprintf+0x21e>
    2978:	f8 01       	movw	r30, r16
    297a:	27 ff       	sbrs	r18, 7
    297c:	07 c0       	rjmp	.+14     	; 0x298c <vfprintf+0x1e6>
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	0c 5f       	subi	r16, 0xFC	; 252
    2988:	1f 4f       	sbci	r17, 0xFF	; 255
    298a:	08 c0       	rjmp	.+16     	; 0x299c <vfprintf+0x1f6>
    298c:	60 81       	ld	r22, Z
    298e:	71 81       	ldd	r23, Z+1	; 0x01
    2990:	88 27       	eor	r24, r24
    2992:	77 fd       	sbrc	r23, 7
    2994:	80 95       	com	r24
    2996:	98 2f       	mov	r25, r24
    2998:	0e 5f       	subi	r16, 0xFE	; 254
    299a:	1f 4f       	sbci	r17, 0xFF	; 255
    299c:	2f 76       	andi	r18, 0x6F	; 111
    299e:	b2 2e       	mov	r11, r18
    29a0:	97 ff       	sbrs	r25, 7
    29a2:	09 c0       	rjmp	.+18     	; 0x29b6 <vfprintf+0x210>
    29a4:	90 95       	com	r25
    29a6:	80 95       	com	r24
    29a8:	70 95       	com	r23
    29aa:	61 95       	neg	r22
    29ac:	7f 4f       	sbci	r23, 0xFF	; 255
    29ae:	8f 4f       	sbci	r24, 0xFF	; 255
    29b0:	9f 4f       	sbci	r25, 0xFF	; 255
    29b2:	20 68       	ori	r18, 0x80	; 128
    29b4:	b2 2e       	mov	r11, r18
    29b6:	2a e0       	ldi	r18, 0x0A	; 10
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	a4 01       	movw	r20, r8
    29bc:	24 d1       	rcall	.+584    	; 0x2c06 <__ultoa_invert>
    29be:	a8 2e       	mov	r10, r24
    29c0:	a8 18       	sub	r10, r8
    29c2:	43 c0       	rjmp	.+134    	; 0x2a4a <vfprintf+0x2a4>
    29c4:	85 37       	cpi	r24, 0x75	; 117
    29c6:	29 f4       	brne	.+10     	; 0x29d2 <vfprintf+0x22c>
    29c8:	2f 7e       	andi	r18, 0xEF	; 239
    29ca:	b2 2e       	mov	r11, r18
    29cc:	2a e0       	ldi	r18, 0x0A	; 10
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	25 c0       	rjmp	.+74     	; 0x2a1c <vfprintf+0x276>
    29d2:	f2 2f       	mov	r31, r18
    29d4:	f9 7f       	andi	r31, 0xF9	; 249
    29d6:	bf 2e       	mov	r11, r31
    29d8:	8f 36       	cpi	r24, 0x6F	; 111
    29da:	c1 f0       	breq	.+48     	; 0x2a0c <vfprintf+0x266>
    29dc:	18 f4       	brcc	.+6      	; 0x29e4 <vfprintf+0x23e>
    29de:	88 35       	cpi	r24, 0x58	; 88
    29e0:	79 f0       	breq	.+30     	; 0x2a00 <vfprintf+0x25a>
    29e2:	ad c0       	rjmp	.+346    	; 0x2b3e <vfprintf+0x398>
    29e4:	80 37       	cpi	r24, 0x70	; 112
    29e6:	19 f0       	breq	.+6      	; 0x29ee <vfprintf+0x248>
    29e8:	88 37       	cpi	r24, 0x78	; 120
    29ea:	21 f0       	breq	.+8      	; 0x29f4 <vfprintf+0x24e>
    29ec:	a8 c0       	rjmp	.+336    	; 0x2b3e <vfprintf+0x398>
    29ee:	2f 2f       	mov	r18, r31
    29f0:	20 61       	ori	r18, 0x10	; 16
    29f2:	b2 2e       	mov	r11, r18
    29f4:	b4 fe       	sbrs	r11, 4
    29f6:	0d c0       	rjmp	.+26     	; 0x2a12 <vfprintf+0x26c>
    29f8:	8b 2d       	mov	r24, r11
    29fa:	84 60       	ori	r24, 0x04	; 4
    29fc:	b8 2e       	mov	r11, r24
    29fe:	09 c0       	rjmp	.+18     	; 0x2a12 <vfprintf+0x26c>
    2a00:	24 ff       	sbrs	r18, 4
    2a02:	0a c0       	rjmp	.+20     	; 0x2a18 <vfprintf+0x272>
    2a04:	9f 2f       	mov	r25, r31
    2a06:	96 60       	ori	r25, 0x06	; 6
    2a08:	b9 2e       	mov	r11, r25
    2a0a:	06 c0       	rjmp	.+12     	; 0x2a18 <vfprintf+0x272>
    2a0c:	28 e0       	ldi	r18, 0x08	; 8
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	05 c0       	rjmp	.+10     	; 0x2a1c <vfprintf+0x276>
    2a12:	20 e1       	ldi	r18, 0x10	; 16
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	02 c0       	rjmp	.+4      	; 0x2a1c <vfprintf+0x276>
    2a18:	20 e1       	ldi	r18, 0x10	; 16
    2a1a:	32 e0       	ldi	r19, 0x02	; 2
    2a1c:	f8 01       	movw	r30, r16
    2a1e:	b7 fe       	sbrs	r11, 7
    2a20:	07 c0       	rjmp	.+14     	; 0x2a30 <vfprintf+0x28a>
    2a22:	60 81       	ld	r22, Z
    2a24:	71 81       	ldd	r23, Z+1	; 0x01
    2a26:	82 81       	ldd	r24, Z+2	; 0x02
    2a28:	93 81       	ldd	r25, Z+3	; 0x03
    2a2a:	0c 5f       	subi	r16, 0xFC	; 252
    2a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2e:	06 c0       	rjmp	.+12     	; 0x2a3c <vfprintf+0x296>
    2a30:	60 81       	ld	r22, Z
    2a32:	71 81       	ldd	r23, Z+1	; 0x01
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	0e 5f       	subi	r16, 0xFE	; 254
    2a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a3c:	a4 01       	movw	r20, r8
    2a3e:	e3 d0       	rcall	.+454    	; 0x2c06 <__ultoa_invert>
    2a40:	a8 2e       	mov	r10, r24
    2a42:	a8 18       	sub	r10, r8
    2a44:	fb 2d       	mov	r31, r11
    2a46:	ff 77       	andi	r31, 0x7F	; 127
    2a48:	bf 2e       	mov	r11, r31
    2a4a:	b6 fe       	sbrs	r11, 6
    2a4c:	0b c0       	rjmp	.+22     	; 0x2a64 <vfprintf+0x2be>
    2a4e:	2b 2d       	mov	r18, r11
    2a50:	2e 7f       	andi	r18, 0xFE	; 254
    2a52:	a5 14       	cp	r10, r5
    2a54:	50 f4       	brcc	.+20     	; 0x2a6a <vfprintf+0x2c4>
    2a56:	b4 fe       	sbrs	r11, 4
    2a58:	0a c0       	rjmp	.+20     	; 0x2a6e <vfprintf+0x2c8>
    2a5a:	b2 fc       	sbrc	r11, 2
    2a5c:	08 c0       	rjmp	.+16     	; 0x2a6e <vfprintf+0x2c8>
    2a5e:	2b 2d       	mov	r18, r11
    2a60:	2e 7e       	andi	r18, 0xEE	; 238
    2a62:	05 c0       	rjmp	.+10     	; 0x2a6e <vfprintf+0x2c8>
    2a64:	7a 2c       	mov	r7, r10
    2a66:	2b 2d       	mov	r18, r11
    2a68:	03 c0       	rjmp	.+6      	; 0x2a70 <vfprintf+0x2ca>
    2a6a:	7a 2c       	mov	r7, r10
    2a6c:	01 c0       	rjmp	.+2      	; 0x2a70 <vfprintf+0x2ca>
    2a6e:	75 2c       	mov	r7, r5
    2a70:	24 ff       	sbrs	r18, 4
    2a72:	0d c0       	rjmp	.+26     	; 0x2a8e <vfprintf+0x2e8>
    2a74:	fe 01       	movw	r30, r28
    2a76:	ea 0d       	add	r30, r10
    2a78:	f1 1d       	adc	r31, r1
    2a7a:	80 81       	ld	r24, Z
    2a7c:	80 33       	cpi	r24, 0x30	; 48
    2a7e:	11 f4       	brne	.+4      	; 0x2a84 <vfprintf+0x2de>
    2a80:	29 7e       	andi	r18, 0xE9	; 233
    2a82:	09 c0       	rjmp	.+18     	; 0x2a96 <vfprintf+0x2f0>
    2a84:	22 ff       	sbrs	r18, 2
    2a86:	06 c0       	rjmp	.+12     	; 0x2a94 <vfprintf+0x2ee>
    2a88:	73 94       	inc	r7
    2a8a:	73 94       	inc	r7
    2a8c:	04 c0       	rjmp	.+8      	; 0x2a96 <vfprintf+0x2f0>
    2a8e:	82 2f       	mov	r24, r18
    2a90:	86 78       	andi	r24, 0x86	; 134
    2a92:	09 f0       	breq	.+2      	; 0x2a96 <vfprintf+0x2f0>
    2a94:	73 94       	inc	r7
    2a96:	23 fd       	sbrc	r18, 3
    2a98:	12 c0       	rjmp	.+36     	; 0x2abe <vfprintf+0x318>
    2a9a:	20 ff       	sbrs	r18, 0
    2a9c:	06 c0       	rjmp	.+12     	; 0x2aaa <vfprintf+0x304>
    2a9e:	5a 2c       	mov	r5, r10
    2aa0:	73 14       	cp	r7, r3
    2aa2:	18 f4       	brcc	.+6      	; 0x2aaa <vfprintf+0x304>
    2aa4:	53 0c       	add	r5, r3
    2aa6:	57 18       	sub	r5, r7
    2aa8:	73 2c       	mov	r7, r3
    2aaa:	73 14       	cp	r7, r3
    2aac:	60 f4       	brcc	.+24     	; 0x2ac6 <vfprintf+0x320>
    2aae:	b7 01       	movw	r22, r14
    2ab0:	80 e2       	ldi	r24, 0x20	; 32
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	2c 87       	std	Y+12, r18	; 0x0c
    2ab6:	75 d0       	rcall	.+234    	; 0x2ba2 <fputc>
    2ab8:	73 94       	inc	r7
    2aba:	2c 85       	ldd	r18, Y+12	; 0x0c
    2abc:	f6 cf       	rjmp	.-20     	; 0x2aaa <vfprintf+0x304>
    2abe:	73 14       	cp	r7, r3
    2ac0:	10 f4       	brcc	.+4      	; 0x2ac6 <vfprintf+0x320>
    2ac2:	37 18       	sub	r3, r7
    2ac4:	01 c0       	rjmp	.+2      	; 0x2ac8 <vfprintf+0x322>
    2ac6:	31 2c       	mov	r3, r1
    2ac8:	24 ff       	sbrs	r18, 4
    2aca:	11 c0       	rjmp	.+34     	; 0x2aee <vfprintf+0x348>
    2acc:	b7 01       	movw	r22, r14
    2ace:	80 e3       	ldi	r24, 0x30	; 48
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	2c 87       	std	Y+12, r18	; 0x0c
    2ad4:	66 d0       	rcall	.+204    	; 0x2ba2 <fputc>
    2ad6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ad8:	22 ff       	sbrs	r18, 2
    2ada:	16 c0       	rjmp	.+44     	; 0x2b08 <vfprintf+0x362>
    2adc:	21 ff       	sbrs	r18, 1
    2ade:	03 c0       	rjmp	.+6      	; 0x2ae6 <vfprintf+0x340>
    2ae0:	88 e5       	ldi	r24, 0x58	; 88
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <vfprintf+0x344>
    2ae6:	88 e7       	ldi	r24, 0x78	; 120
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	b7 01       	movw	r22, r14
    2aec:	0c c0       	rjmp	.+24     	; 0x2b06 <vfprintf+0x360>
    2aee:	82 2f       	mov	r24, r18
    2af0:	86 78       	andi	r24, 0x86	; 134
    2af2:	51 f0       	breq	.+20     	; 0x2b08 <vfprintf+0x362>
    2af4:	21 fd       	sbrc	r18, 1
    2af6:	02 c0       	rjmp	.+4      	; 0x2afc <vfprintf+0x356>
    2af8:	80 e2       	ldi	r24, 0x20	; 32
    2afa:	01 c0       	rjmp	.+2      	; 0x2afe <vfprintf+0x358>
    2afc:	8b e2       	ldi	r24, 0x2B	; 43
    2afe:	27 fd       	sbrc	r18, 7
    2b00:	8d e2       	ldi	r24, 0x2D	; 45
    2b02:	b7 01       	movw	r22, r14
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	4d d0       	rcall	.+154    	; 0x2ba2 <fputc>
    2b08:	a5 14       	cp	r10, r5
    2b0a:	30 f4       	brcc	.+12     	; 0x2b18 <vfprintf+0x372>
    2b0c:	b7 01       	movw	r22, r14
    2b0e:	80 e3       	ldi	r24, 0x30	; 48
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	47 d0       	rcall	.+142    	; 0x2ba2 <fputc>
    2b14:	5a 94       	dec	r5
    2b16:	f8 cf       	rjmp	.-16     	; 0x2b08 <vfprintf+0x362>
    2b18:	aa 94       	dec	r10
    2b1a:	f4 01       	movw	r30, r8
    2b1c:	ea 0d       	add	r30, r10
    2b1e:	f1 1d       	adc	r31, r1
    2b20:	80 81       	ld	r24, Z
    2b22:	b7 01       	movw	r22, r14
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	3d d0       	rcall	.+122    	; 0x2ba2 <fputc>
    2b28:	a1 10       	cpse	r10, r1
    2b2a:	f6 cf       	rjmp	.-20     	; 0x2b18 <vfprintf+0x372>
    2b2c:	33 20       	and	r3, r3
    2b2e:	09 f4       	brne	.+2      	; 0x2b32 <vfprintf+0x38c>
    2b30:	5d ce       	rjmp	.-838    	; 0x27ec <vfprintf+0x46>
    2b32:	b7 01       	movw	r22, r14
    2b34:	80 e2       	ldi	r24, 0x20	; 32
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	34 d0       	rcall	.+104    	; 0x2ba2 <fputc>
    2b3a:	3a 94       	dec	r3
    2b3c:	f7 cf       	rjmp	.-18     	; 0x2b2c <vfprintf+0x386>
    2b3e:	f7 01       	movw	r30, r14
    2b40:	86 81       	ldd	r24, Z+6	; 0x06
    2b42:	97 81       	ldd	r25, Z+7	; 0x07
    2b44:	02 c0       	rjmp	.+4      	; 0x2b4a <vfprintf+0x3a4>
    2b46:	8f ef       	ldi	r24, 0xFF	; 255
    2b48:	9f ef       	ldi	r25, 0xFF	; 255
    2b4a:	2c 96       	adiw	r28, 0x0c	; 12
    2b4c:	cd bf       	out	0x3d, r28	; 61
    2b4e:	de bf       	out	0x3e, r29	; 62
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	1f 91       	pop	r17
    2b56:	0f 91       	pop	r16
    2b58:	ff 90       	pop	r15
    2b5a:	ef 90       	pop	r14
    2b5c:	df 90       	pop	r13
    2b5e:	cf 90       	pop	r12
    2b60:	bf 90       	pop	r11
    2b62:	af 90       	pop	r10
    2b64:	9f 90       	pop	r9
    2b66:	8f 90       	pop	r8
    2b68:	7f 90       	pop	r7
    2b6a:	6f 90       	pop	r6
    2b6c:	5f 90       	pop	r5
    2b6e:	4f 90       	pop	r4
    2b70:	3f 90       	pop	r3
    2b72:	2f 90       	pop	r2
    2b74:	08 95       	ret

00002b76 <strnlen_P>:
    2b76:	fc 01       	movw	r30, r24
    2b78:	05 90       	lpm	r0, Z+
    2b7a:	61 50       	subi	r22, 0x01	; 1
    2b7c:	70 40       	sbci	r23, 0x00	; 0
    2b7e:	01 10       	cpse	r0, r1
    2b80:	d8 f7       	brcc	.-10     	; 0x2b78 <strnlen_P+0x2>
    2b82:	80 95       	com	r24
    2b84:	90 95       	com	r25
    2b86:	8e 0f       	add	r24, r30
    2b88:	9f 1f       	adc	r25, r31
    2b8a:	08 95       	ret

00002b8c <strnlen>:
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	61 50       	subi	r22, 0x01	; 1
    2b90:	70 40       	sbci	r23, 0x00	; 0
    2b92:	01 90       	ld	r0, Z+
    2b94:	01 10       	cpse	r0, r1
    2b96:	d8 f7       	brcc	.-10     	; 0x2b8e <strnlen+0x2>
    2b98:	80 95       	com	r24
    2b9a:	90 95       	com	r25
    2b9c:	8e 0f       	add	r24, r30
    2b9e:	9f 1f       	adc	r25, r31
    2ba0:	08 95       	ret

00002ba2 <fputc>:
    2ba2:	0f 93       	push	r16
    2ba4:	1f 93       	push	r17
    2ba6:	cf 93       	push	r28
    2ba8:	df 93       	push	r29
    2baa:	18 2f       	mov	r17, r24
    2bac:	09 2f       	mov	r16, r25
    2bae:	eb 01       	movw	r28, r22
    2bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb2:	81 fd       	sbrc	r24, 1
    2bb4:	03 c0       	rjmp	.+6      	; 0x2bbc <fputc+0x1a>
    2bb6:	8f ef       	ldi	r24, 0xFF	; 255
    2bb8:	9f ef       	ldi	r25, 0xFF	; 255
    2bba:	20 c0       	rjmp	.+64     	; 0x2bfc <fputc+0x5a>
    2bbc:	82 ff       	sbrs	r24, 2
    2bbe:	10 c0       	rjmp	.+32     	; 0x2be0 <fputc+0x3e>
    2bc0:	4e 81       	ldd	r20, Y+6	; 0x06
    2bc2:	5f 81       	ldd	r21, Y+7	; 0x07
    2bc4:	2c 81       	ldd	r18, Y+4	; 0x04
    2bc6:	3d 81       	ldd	r19, Y+5	; 0x05
    2bc8:	42 17       	cp	r20, r18
    2bca:	53 07       	cpc	r21, r19
    2bcc:	7c f4       	brge	.+30     	; 0x2bec <fputc+0x4a>
    2bce:	e8 81       	ld	r30, Y
    2bd0:	f9 81       	ldd	r31, Y+1	; 0x01
    2bd2:	9f 01       	movw	r18, r30
    2bd4:	2f 5f       	subi	r18, 0xFF	; 255
    2bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd8:	28 83       	st	Y, r18
    2bda:	39 83       	std	Y+1, r19	; 0x01
    2bdc:	10 83       	st	Z, r17
    2bde:	06 c0       	rjmp	.+12     	; 0x2bec <fputc+0x4a>
    2be0:	e8 85       	ldd	r30, Y+8	; 0x08
    2be2:	f9 85       	ldd	r31, Y+9	; 0x09
    2be4:	81 2f       	mov	r24, r17
    2be6:	09 95       	icall
    2be8:	89 2b       	or	r24, r25
    2bea:	29 f7       	brne	.-54     	; 0x2bb6 <fputc+0x14>
    2bec:	2e 81       	ldd	r18, Y+6	; 0x06
    2bee:	3f 81       	ldd	r19, Y+7	; 0x07
    2bf0:	2f 5f       	subi	r18, 0xFF	; 255
    2bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf4:	2e 83       	std	Y+6, r18	; 0x06
    2bf6:	3f 83       	std	Y+7, r19	; 0x07
    2bf8:	81 2f       	mov	r24, r17
    2bfa:	90 2f       	mov	r25, r16
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	1f 91       	pop	r17
    2c02:	0f 91       	pop	r16
    2c04:	08 95       	ret

00002c06 <__ultoa_invert>:
    2c06:	fa 01       	movw	r30, r20
    2c08:	aa 27       	eor	r26, r26
    2c0a:	28 30       	cpi	r18, 0x08	; 8
    2c0c:	51 f1       	breq	.+84     	; 0x2c62 <__ultoa_invert+0x5c>
    2c0e:	20 31       	cpi	r18, 0x10	; 16
    2c10:	81 f1       	breq	.+96     	; 0x2c72 <__ultoa_invert+0x6c>
    2c12:	e8 94       	clt
    2c14:	6f 93       	push	r22
    2c16:	6e 7f       	andi	r22, 0xFE	; 254
    2c18:	6e 5f       	subi	r22, 0xFE	; 254
    2c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c20:	af 4f       	sbci	r26, 0xFF	; 255
    2c22:	b1 e0       	ldi	r27, 0x01	; 1
    2c24:	3e d0       	rcall	.+124    	; 0x2ca2 <__ultoa_invert+0x9c>
    2c26:	b4 e0       	ldi	r27, 0x04	; 4
    2c28:	3c d0       	rcall	.+120    	; 0x2ca2 <__ultoa_invert+0x9c>
    2c2a:	67 0f       	add	r22, r23
    2c2c:	78 1f       	adc	r23, r24
    2c2e:	89 1f       	adc	r24, r25
    2c30:	9a 1f       	adc	r25, r26
    2c32:	a1 1d       	adc	r26, r1
    2c34:	68 0f       	add	r22, r24
    2c36:	79 1f       	adc	r23, r25
    2c38:	8a 1f       	adc	r24, r26
    2c3a:	91 1d       	adc	r25, r1
    2c3c:	a1 1d       	adc	r26, r1
    2c3e:	6a 0f       	add	r22, r26
    2c40:	71 1d       	adc	r23, r1
    2c42:	81 1d       	adc	r24, r1
    2c44:	91 1d       	adc	r25, r1
    2c46:	a1 1d       	adc	r26, r1
    2c48:	20 d0       	rcall	.+64     	; 0x2c8a <__ultoa_invert+0x84>
    2c4a:	09 f4       	brne	.+2      	; 0x2c4e <__ultoa_invert+0x48>
    2c4c:	68 94       	set
    2c4e:	3f 91       	pop	r19
    2c50:	2a e0       	ldi	r18, 0x0A	; 10
    2c52:	26 9f       	mul	r18, r22
    2c54:	11 24       	eor	r1, r1
    2c56:	30 19       	sub	r19, r0
    2c58:	30 5d       	subi	r19, 0xD0	; 208
    2c5a:	31 93       	st	Z+, r19
    2c5c:	de f6       	brtc	.-74     	; 0x2c14 <__ultoa_invert+0xe>
    2c5e:	cf 01       	movw	r24, r30
    2c60:	08 95       	ret
    2c62:	46 2f       	mov	r20, r22
    2c64:	47 70       	andi	r20, 0x07	; 7
    2c66:	40 5d       	subi	r20, 0xD0	; 208
    2c68:	41 93       	st	Z+, r20
    2c6a:	b3 e0       	ldi	r27, 0x03	; 3
    2c6c:	0f d0       	rcall	.+30     	; 0x2c8c <__ultoa_invert+0x86>
    2c6e:	c9 f7       	brne	.-14     	; 0x2c62 <__ultoa_invert+0x5c>
    2c70:	f6 cf       	rjmp	.-20     	; 0x2c5e <__ultoa_invert+0x58>
    2c72:	46 2f       	mov	r20, r22
    2c74:	4f 70       	andi	r20, 0x0F	; 15
    2c76:	40 5d       	subi	r20, 0xD0	; 208
    2c78:	4a 33       	cpi	r20, 0x3A	; 58
    2c7a:	18 f0       	brcs	.+6      	; 0x2c82 <__ultoa_invert+0x7c>
    2c7c:	49 5d       	subi	r20, 0xD9	; 217
    2c7e:	31 fd       	sbrc	r19, 1
    2c80:	40 52       	subi	r20, 0x20	; 32
    2c82:	41 93       	st	Z+, r20
    2c84:	02 d0       	rcall	.+4      	; 0x2c8a <__ultoa_invert+0x84>
    2c86:	a9 f7       	brne	.-22     	; 0x2c72 <__ultoa_invert+0x6c>
    2c88:	ea cf       	rjmp	.-44     	; 0x2c5e <__ultoa_invert+0x58>
    2c8a:	b4 e0       	ldi	r27, 0x04	; 4
    2c8c:	a6 95       	lsr	r26
    2c8e:	97 95       	ror	r25
    2c90:	87 95       	ror	r24
    2c92:	77 95       	ror	r23
    2c94:	67 95       	ror	r22
    2c96:	ba 95       	dec	r27
    2c98:	c9 f7       	brne	.-14     	; 0x2c8c <__ultoa_invert+0x86>
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	61 05       	cpc	r22, r1
    2c9e:	71 05       	cpc	r23, r1
    2ca0:	08 95       	ret
    2ca2:	9b 01       	movw	r18, r22
    2ca4:	ac 01       	movw	r20, r24
    2ca6:	0a 2e       	mov	r0, r26
    2ca8:	06 94       	lsr	r0
    2caa:	57 95       	ror	r21
    2cac:	47 95       	ror	r20
    2cae:	37 95       	ror	r19
    2cb0:	27 95       	ror	r18
    2cb2:	ba 95       	dec	r27
    2cb4:	c9 f7       	brne	.-14     	; 0x2ca8 <__ultoa_invert+0xa2>
    2cb6:	62 0f       	add	r22, r18
    2cb8:	73 1f       	adc	r23, r19
    2cba:	84 1f       	adc	r24, r20
    2cbc:	95 1f       	adc	r25, r21
    2cbe:	a0 1d       	adc	r26, r0
    2cc0:	08 95       	ret

00002cc2 <_exit>:
    2cc2:	f8 94       	cli

00002cc4 <__stop_program>:
    2cc4:	ff cf       	rjmp	.-2      	; 0x2cc4 <__stop_program>
