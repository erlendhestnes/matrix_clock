
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002944  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00802000  00002944  000029d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000046c  0080203c  0080203c  00002a14  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a14  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006e8  00000000  00000000  00002a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00019675  00000000  00000000  00003158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002d6d  00000000  00000000  0001c7cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000cd9c  00000000  00000000  0001f53a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00002248  00000000  00000000  0002c2d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000307e  00000000  00000000  0002e520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027b97  00000000  00000000  0003159e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000039c0  00000000  00000000  00059135  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c3       	rjmp	.+1782   	; 0x6f8 <__ctors_end>
       2:	00 00       	nop
       4:	97 c3       	rjmp	.+1838   	; 0x734 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c3       	rjmp	.+1834   	; 0x734 <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c3       	rjmp	.+1830   	; 0x734 <__bad_interrupt>
       e:	00 00       	nop
      10:	91 c3       	rjmp	.+1826   	; 0x734 <__bad_interrupt>
      12:	00 00       	nop
      14:	8f c3       	rjmp	.+1822   	; 0x734 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c3       	rjmp	.+1818   	; 0x734 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c3       	rjmp	.+1814   	; 0x734 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c3       	rjmp	.+1810   	; 0x734 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c3       	rjmp	.+1806   	; 0x734 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__vector_10>
      2c:	83 c3       	rjmp	.+1798   	; 0x734 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c3       	rjmp	.+1794   	; 0x734 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c3       	rjmp	.+1790   	; 0x734 <__bad_interrupt>
      36:	00 00       	nop
      38:	b8 c3       	rjmp	.+1904   	; 0x7aa <__vector_14>
      3a:	00 00       	nop
      3c:	7b c3       	rjmp	.+1782   	; 0x734 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c3       	rjmp	.+1778   	; 0x734 <__bad_interrupt>
      42:	00 00       	nop
      44:	77 c3       	rjmp	.+1774   	; 0x734 <__bad_interrupt>
      46:	00 00       	nop
      48:	75 c3       	rjmp	.+1770   	; 0x734 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c3       	rjmp	.+1766   	; 0x734 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 45 0b 	jmp	0x168a	; 0x168a <__vector_20>
      54:	6f c3       	rjmp	.+1758   	; 0x734 <__bad_interrupt>
      56:	00 00       	nop
      58:	6d c3       	rjmp	.+1754   	; 0x734 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c3       	rjmp	.+1750   	; 0x734 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c3       	rjmp	.+1746   	; 0x734 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c3       	rjmp	.+1742   	; 0x734 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c3       	rjmp	.+1738   	; 0x734 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c3       	rjmp	.+1734   	; 0x734 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c3       	rjmp	.+1730   	; 0x734 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c3       	rjmp	.+1726   	; 0x734 <__bad_interrupt>
      76:	00 00       	nop
      78:	5d c3       	rjmp	.+1722   	; 0x734 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5b c3       	rjmp	.+1718   	; 0x734 <__bad_interrupt>
      7e:	00 00       	nop
      80:	59 c3       	rjmp	.+1714   	; 0x734 <__bad_interrupt>
      82:	00 00       	nop
      84:	57 c3       	rjmp	.+1710   	; 0x734 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c3       	rjmp	.+1706   	; 0x734 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	53 c3       	rjmp	.+1702   	; 0x734 <__bad_interrupt>
      8e:	00 00       	nop
      90:	51 c3       	rjmp	.+1698   	; 0x734 <__bad_interrupt>
      92:	00 00       	nop
      94:	4f c3       	rjmp	.+1694   	; 0x734 <__bad_interrupt>
      96:	00 00       	nop
      98:	4d c3       	rjmp	.+1690   	; 0x734 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4b c3       	rjmp	.+1686   	; 0x734 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	49 c3       	rjmp	.+1682   	; 0x734 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	47 c3       	rjmp	.+1678   	; 0x734 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	45 c3       	rjmp	.+1674   	; 0x734 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 c3       	rjmp	.+1670   	; 0x734 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	41 c3       	rjmp	.+1666   	; 0x734 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3f c3       	rjmp	.+1662   	; 0x734 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3d c3       	rjmp	.+1658   	; 0x734 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3b c3       	rjmp	.+1654   	; 0x734 <__bad_interrupt>
      be:	00 00       	nop
      c0:	39 c3       	rjmp	.+1650   	; 0x734 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	37 c3       	rjmp	.+1646   	; 0x734 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	35 c3       	rjmp	.+1642   	; 0x734 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 c3       	rjmp	.+1638   	; 0x734 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	31 c3       	rjmp	.+1634   	; 0x734 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2f c3       	rjmp	.+1630   	; 0x734 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c3       	rjmp	.+1626   	; 0x734 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2b c3       	rjmp	.+1622   	; 0x734 <__bad_interrupt>
      de:	00 00       	nop
      e0:	29 c3       	rjmp	.+1618   	; 0x734 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	27 c3       	rjmp	.+1614   	; 0x734 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	25 c3       	rjmp	.+1610   	; 0x734 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	23 c3       	rjmp	.+1606   	; 0x734 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	21 c3       	rjmp	.+1602   	; 0x734 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	1f c3       	rjmp	.+1598   	; 0x734 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	1d c3       	rjmp	.+1594   	; 0x734 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	1b c3       	rjmp	.+1590   	; 0x734 <__bad_interrupt>
      fe:	00 00       	nop
     100:	19 c3       	rjmp	.+1586   	; 0x734 <__bad_interrupt>
     102:	00 00       	nop
     104:	17 c3       	rjmp	.+1582   	; 0x734 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__vector_66>
     10c:	13 c3       	rjmp	.+1574   	; 0x734 <__bad_interrupt>
     10e:	00 00       	nop
     110:	11 c3       	rjmp	.+1570   	; 0x734 <__bad_interrupt>
     112:	00 00       	nop
     114:	0f c3       	rjmp	.+1566   	; 0x734 <__bad_interrupt>
     116:	00 00       	nop
     118:	0d c3       	rjmp	.+1562   	; 0x734 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0b c3       	rjmp	.+1558   	; 0x734 <__bad_interrupt>
     11e:	00 00       	nop
     120:	09 c3       	rjmp	.+1554   	; 0x734 <__bad_interrupt>
     122:	00 00       	nop
     124:	07 c3       	rjmp	.+1550   	; 0x734 <__bad_interrupt>
     126:	00 00       	nop
     128:	05 c3       	rjmp	.+1546   	; 0x734 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	03 c3       	rjmp	.+1542   	; 0x734 <__bad_interrupt>
     12e:	00 00       	nop
     130:	01 c3       	rjmp	.+1538   	; 0x734 <__bad_interrupt>
     132:	00 00       	nop
     134:	ff c2       	rjmp	.+1534   	; 0x734 <__bad_interrupt>
     136:	00 00       	nop
     138:	fd c2       	rjmp	.+1530   	; 0x734 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	fb c2       	rjmp	.+1526   	; 0x734 <__bad_interrupt>
     13e:	00 00       	nop
     140:	f9 c2       	rjmp	.+1522   	; 0x734 <__bad_interrupt>
     142:	00 00       	nop
     144:	f7 c2       	rjmp	.+1518   	; 0x734 <__bad_interrupt>
     146:	00 00       	nop
     148:	f5 c2       	rjmp	.+1514   	; 0x734 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	f3 c2       	rjmp	.+1510   	; 0x734 <__bad_interrupt>
     14e:	00 00       	nop
     150:	f1 c2       	rjmp	.+1506   	; 0x734 <__bad_interrupt>
     152:	00 00       	nop
     154:	ef c2       	rjmp	.+1502   	; 0x734 <__bad_interrupt>
     156:	00 00       	nop
     158:	ed c2       	rjmp	.+1498   	; 0x734 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	eb c2       	rjmp	.+1494   	; 0x734 <__bad_interrupt>
     15e:	00 00       	nop
     160:	f9 c2       	rjmp	.+1522   	; 0x754 <__vector_88>
     162:	00 00       	nop
     164:	e7 c2       	rjmp	.+1486   	; 0x734 <__bad_interrupt>
     166:	00 00       	nop
     168:	e5 c2       	rjmp	.+1482   	; 0x734 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	e3 c2       	rjmp	.+1478   	; 0x734 <__bad_interrupt>
     16e:	00 00       	nop
     170:	e1 c2       	rjmp	.+1474   	; 0x734 <__bad_interrupt>
     172:	00 00       	nop
     174:	df c2       	rjmp	.+1470   	; 0x734 <__bad_interrupt>
     176:	00 00       	nop
     178:	dd c2       	rjmp	.+1466   	; 0x734 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	db c2       	rjmp	.+1462   	; 0x734 <__bad_interrupt>
     17e:	00 00       	nop
     180:	d9 c2       	rjmp	.+1458   	; 0x734 <__bad_interrupt>
     182:	00 00       	nop
     184:	d7 c2       	rjmp	.+1454   	; 0x734 <__bad_interrupt>
     186:	00 00       	nop
     188:	d5 c2       	rjmp	.+1450   	; 0x734 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d3 c2       	rjmp	.+1446   	; 0x734 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d1 c2       	rjmp	.+1442   	; 0x734 <__bad_interrupt>
     192:	00 00       	nop
     194:	cf c2       	rjmp	.+1438   	; 0x734 <__bad_interrupt>
     196:	00 00       	nop
     198:	cd c2       	rjmp	.+1434   	; 0x734 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	cb c2       	rjmp	.+1430   	; 0x734 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	c9 c2       	rjmp	.+1426   	; 0x734 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	c7 c2       	rjmp	.+1422   	; 0x734 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	c5 c2       	rjmp	.+1418   	; 0x734 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c3 c2       	rjmp	.+1414   	; 0x734 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	c1 c2       	rjmp	.+1410   	; 0x734 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	bf c2       	rjmp	.+1406   	; 0x734 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	bd c2       	rjmp	.+1402   	; 0x734 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	bb c2       	rjmp	.+1398   	; 0x734 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	b9 c2       	rjmp	.+1394   	; 0x734 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	b7 c2       	rjmp	.+1390   	; 0x734 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	b5 c2       	rjmp	.+1386   	; 0x734 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b3 c2       	rjmp	.+1382   	; 0x734 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b1 c2       	rjmp	.+1378   	; 0x734 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	af c2       	rjmp	.+1374   	; 0x734 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	ad c2       	rjmp	.+1370   	; 0x734 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	ab c2       	rjmp	.+1366   	; 0x734 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	a9 c2       	rjmp	.+1362   	; 0x734 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	a7 c2       	rjmp	.+1358   	; 0x734 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	a5 c2       	rjmp	.+1354   	; 0x734 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a3 c2       	rjmp	.+1350   	; 0x734 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a1 c2       	rjmp	.+1346   	; 0x734 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	9f c2       	rjmp	.+1342   	; 0x734 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	9d c2       	rjmp	.+1338   	; 0x734 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 3e       	cpi	r16, 0xE0	; 224
     202:	5b 4f       	sbci	r21, 0xFB	; 251
     204:	5b 3e       	cpi	r21, 0xEB	; 235
     206:	3e 6b       	ori	r19, 0xBE	; 190
     208:	4f 6b       	ori	r20, 0xBF	; 191
     20a:	3e 1c       	adc	r3, r14
     20c:	3e 7c       	andi	r19, 0xCE	; 206
     20e:	3e 1c       	adc	r3, r14
     210:	18 3c       	cpi	r17, 0xC8	; 200
     212:	7e 3c       	cpi	r23, 0xCE	; 206
     214:	18 1c       	adc	r1, r8
     216:	57 7d       	andi	r21, 0xD7	; 215
     218:	57 1c       	adc	r5, r7
     21a:	1c 5e       	subi	r17, 0xEC	; 236
     21c:	7f 5e       	subi	r23, 0xEF	; 239
     21e:	1c 00       	.word	0x001c	; ????
     220:	18 3c       	cpi	r17, 0xC8	; 200
     222:	18 00       	.word	0x0018	; ????
     224:	ff e7       	ldi	r31, 0x7F	; 127
     226:	c3 e7       	ldi	r28, 0x73	; 115
     228:	ff 00       	.word	0x00ff	; ????
     22a:	18 24       	eor	r1, r8
     22c:	18 00       	.word	0x0018	; ????
     22e:	ff e7       	ldi	r31, 0x7F	; 127
     230:	db e7       	ldi	r29, 0x7B	; 123
     232:	ff 30       	cpi	r31, 0x0F	; 15
     234:	48 3a       	cpi	r20, 0xA8	; 168
     236:	06 0e       	add	r0, r22
     238:	26 29       	or	r18, r6
     23a:	79 29       	or	r23, r9
     23c:	26 40       	sbci	r18, 0x06	; 6
     23e:	7f 05       	cpc	r23, r15
     240:	05 07       	cpc	r16, r21
     242:	40 7f       	andi	r20, 0xF0	; 240
     244:	05 25       	eor	r16, r5
     246:	3f 5a       	subi	r19, 0xAF	; 175
     248:	3c e7       	ldi	r19, 0x7C	; 124
     24a:	3c 5a       	subi	r19, 0xAC	; 172
     24c:	7f 3e       	cpi	r23, 0xEF	; 239
     24e:	1c 1c       	adc	r1, r12
     250:	08 08       	sbc	r0, r8
     252:	1c 1c       	adc	r1, r12
     254:	3e 7f       	andi	r19, 0xFE	; 254
     256:	14 22       	and	r1, r20
     258:	7f 22       	and	r7, r31
     25a:	14 5f       	subi	r17, 0xF4	; 244
     25c:	5f 00       	.word	0x005f	; ????
     25e:	5f 5f       	subi	r21, 0xFF	; 255
     260:	06 09       	sbc	r16, r6
     262:	7f 01       	movw	r14, r30
     264:	7f 00       	.word	0x007f	; ????
     266:	66 89       	ldd	r22, Z+22	; 0x16
     268:	95 6a       	ori	r25, 0xA5	; 165
     26a:	60 60       	ori	r22, 0x00	; 0
     26c:	60 60       	ori	r22, 0x00	; 0
     26e:	60 94       	com	r6
     270:	a2 ff       	sbrs	r26, 2
     272:	a2 94       	swap	r10
     274:	08 04       	cpc	r0, r8
     276:	7e 04       	cpc	r7, r14
     278:	08 10       	cpse	r0, r8
     27a:	20 7e       	andi	r18, 0xE0	; 224
     27c:	20 10       	cpse	r2, r0
     27e:	08 08       	sbc	r0, r8
     280:	2a 1c       	adc	r2, r10
     282:	08 08       	sbc	r0, r8
     284:	1c 2a       	or	r1, r28
     286:	08 08       	sbc	r0, r8
     288:	1e 10       	cpse	r1, r14
     28a:	10 10       	cpse	r1, r0
     28c:	10 0c       	add	r1, r0
     28e:	1e 0c       	add	r1, r14
     290:	1e 0c       	add	r1, r14
     292:	30 38       	cpi	r19, 0x80	; 128
     294:	3e 38       	cpi	r19, 0x8E	; 142
     296:	30 06       	cpc	r3, r16
     298:	0e 3e       	cpi	r16, 0xEE	; 238
     29a:	0e 06       	cpc	r0, r30
     29c:	00 00       	nop
     29e:	00 00       	nop
     2a0:	00 00       	nop
     2a2:	00 5f       	subi	r16, 0xF0	; 240
     2a4:	00 00       	nop
     2a6:	00 07       	cpc	r16, r16
     2a8:	00 07       	cpc	r16, r16
     2aa:	00 14       	cp	r0, r0
     2ac:	7f 14       	cp	r7, r15
     2ae:	7f 14       	cp	r7, r15
     2b0:	24 2a       	or	r2, r20
     2b2:	7f 2a       	or	r7, r31
     2b4:	12 23       	and	r17, r18
     2b6:	13 08       	sbc	r1, r3
     2b8:	64 62       	ori	r22, 0x24	; 36
     2ba:	36 49       	sbci	r19, 0x96	; 150
     2bc:	56 20       	and	r5, r6
     2be:	50 00       	.word	0x0050	; ????
     2c0:	08 07       	cpc	r16, r24
     2c2:	03 00       	.word	0x0003	; ????
     2c4:	00 1c       	adc	r0, r0
     2c6:	22 41       	sbci	r18, 0x12	; 18
     2c8:	00 00       	nop
     2ca:	41 22       	and	r4, r17
     2cc:	1c 00       	.word	0x001c	; ????
     2ce:	2a 1c       	adc	r2, r10
     2d0:	7f 1c       	adc	r7, r15
     2d2:	2a 08       	sbc	r2, r10
     2d4:	08 3e       	cpi	r16, 0xE8	; 232
     2d6:	08 08       	sbc	r0, r8
     2d8:	00 80       	ld	r0, Z
     2da:	70 30       	cpi	r23, 0x00	; 0
     2dc:	00 08       	sbc	r0, r0
     2de:	08 08       	sbc	r0, r8
     2e0:	08 08       	sbc	r0, r8
     2e2:	00 00       	nop
     2e4:	60 60       	ori	r22, 0x00	; 0
     2e6:	00 20       	and	r0, r0
     2e8:	10 08       	sbc	r1, r0
     2ea:	04 02       	muls	r16, r20
     2ec:	3e 51       	subi	r19, 0x1E	; 30
     2ee:	49 45       	sbci	r20, 0x59	; 89
     2f0:	3e 00       	.word	0x003e	; ????
     2f2:	42 7f       	andi	r20, 0xF2	; 242
     2f4:	40 00       	.word	0x0040	; ????
     2f6:	72 49       	sbci	r23, 0x92	; 146
     2f8:	49 49       	sbci	r20, 0x99	; 153
     2fa:	46 21       	and	r20, r6
     2fc:	41 49       	sbci	r20, 0x91	; 145
     2fe:	4d 33       	cpi	r20, 0x3D	; 61
     300:	18 14       	cp	r1, r8
     302:	12 7f       	andi	r17, 0xF2	; 242
     304:	10 27       	eor	r17, r16
     306:	45 45       	sbci	r20, 0x55	; 85
     308:	45 39       	cpi	r20, 0x95	; 149
     30a:	3c 4a       	sbci	r19, 0xAC	; 172
     30c:	49 49       	sbci	r20, 0x99	; 153
     30e:	31 41       	sbci	r19, 0x11	; 17
     310:	21 11       	cpse	r18, r1
     312:	09 07       	cpc	r16, r25
     314:	36 49       	sbci	r19, 0x96	; 150
     316:	49 49       	sbci	r20, 0x99	; 153
     318:	36 46       	sbci	r19, 0x66	; 102
     31a:	49 49       	sbci	r20, 0x99	; 153
     31c:	29 1e       	adc	r2, r25
     31e:	00 00       	nop
     320:	14 00       	.word	0x0014	; ????
     322:	00 00       	nop
     324:	40 34       	cpi	r20, 0x40	; 64
     326:	00 00       	nop
     328:	00 08       	sbc	r0, r0
     32a:	14 22       	and	r1, r20
     32c:	41 14       	cp	r4, r1
     32e:	14 14       	cp	r1, r4
     330:	14 14       	cp	r1, r4
     332:	00 41       	sbci	r16, 0x10	; 16
     334:	22 14       	cp	r2, r2
     336:	08 02       	muls	r16, r24
     338:	01 59       	subi	r16, 0x91	; 145
     33a:	09 06       	cpc	r0, r25
     33c:	3e 41       	sbci	r19, 0x1E	; 30
     33e:	5d 59       	subi	r21, 0x9D	; 157
     340:	4e 7c       	andi	r20, 0xCE	; 206
     342:	12 11       	cpse	r17, r2
     344:	12 7c       	andi	r17, 0xC2	; 194
     346:	7f 49       	sbci	r23, 0x9F	; 159
     348:	49 49       	sbci	r20, 0x99	; 153
     34a:	36 3e       	cpi	r19, 0xE6	; 230
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	41 22       	and	r4, r17
     350:	7f 41       	sbci	r23, 0x1F	; 31
     352:	41 41       	sbci	r20, 0x11	; 17
     354:	3e 7f       	andi	r19, 0xFE	; 254
     356:	49 49       	sbci	r20, 0x99	; 153
     358:	49 41       	sbci	r20, 0x19	; 25
     35a:	7f 09       	sbc	r23, r15
     35c:	09 09       	sbc	r16, r9
     35e:	01 3e       	cpi	r16, 0xE1	; 225
     360:	41 41       	sbci	r20, 0x11	; 17
     362:	51 73       	andi	r21, 0x31	; 49
     364:	7f 08       	sbc	r7, r15
     366:	08 08       	sbc	r0, r8
     368:	7f 00       	.word	0x007f	; ????
     36a:	41 7f       	andi	r20, 0xF1	; 241
     36c:	41 00       	.word	0x0041	; ????
     36e:	20 40       	sbci	r18, 0x00	; 0
     370:	41 3f       	cpi	r20, 0xF1	; 241
     372:	01 7f       	andi	r16, 0xF1	; 241
     374:	08 14       	cp	r0, r8
     376:	22 41       	sbci	r18, 0x12	; 18
     378:	7f 40       	sbci	r23, 0x0F	; 15
     37a:	40 40       	sbci	r20, 0x00	; 0
     37c:	40 7f       	andi	r20, 0xF0	; 240
     37e:	02 1c       	adc	r0, r2
     380:	02 7f       	andi	r16, 0xF2	; 242
     382:	7f 04       	cpc	r7, r15
     384:	08 10       	cpse	r0, r8
     386:	7f 3e       	cpi	r23, 0xEF	; 239
     388:	41 41       	sbci	r20, 0x11	; 17
     38a:	41 3e       	cpi	r20, 0xE1	; 225
     38c:	7f 09       	sbc	r23, r15
     38e:	09 09       	sbc	r16, r9
     390:	06 3e       	cpi	r16, 0xE6	; 230
     392:	41 51       	subi	r20, 0x11	; 17
     394:	21 5e       	subi	r18, 0xE1	; 225
     396:	7f 09       	sbc	r23, r15
     398:	19 29       	or	r17, r9
     39a:	46 26       	eor	r4, r22
     39c:	49 49       	sbci	r20, 0x99	; 153
     39e:	49 32       	cpi	r20, 0x29	; 41
     3a0:	03 01       	movw	r0, r6
     3a2:	7f 01       	movw	r14, r30
     3a4:	03 3f       	cpi	r16, 0xF3	; 243
     3a6:	40 40       	sbci	r20, 0x00	; 0
     3a8:	40 3f       	cpi	r20, 0xF0	; 240
     3aa:	1f 20       	and	r1, r15
     3ac:	40 20       	and	r4, r0
     3ae:	1f 3f       	cpi	r17, 0xFF	; 255
     3b0:	40 38       	cpi	r20, 0x80	; 128
     3b2:	40 3f       	cpi	r20, 0xF0	; 240
     3b4:	63 14       	cp	r6, r3
     3b6:	08 14       	cp	r0, r8
     3b8:	63 03       	mulsu	r22, r19
     3ba:	04 78       	andi	r16, 0x84	; 132
     3bc:	04 03       	mulsu	r16, r20
     3be:	61 59       	subi	r22, 0x91	; 145
     3c0:	49 4d       	sbci	r20, 0xD9	; 217
     3c2:	43 00       	.word	0x0043	; ????
     3c4:	7f 41       	sbci	r23, 0x1F	; 31
     3c6:	41 41       	sbci	r20, 0x11	; 17
     3c8:	02 04       	cpc	r0, r2
     3ca:	08 10       	cpse	r0, r8
     3cc:	20 00       	.word	0x0020	; ????
     3ce:	41 41       	sbci	r20, 0x11	; 17
     3d0:	41 7f       	andi	r20, 0xF1	; 241
     3d2:	04 02       	muls	r16, r20
     3d4:	01 02       	muls	r16, r17
     3d6:	04 40       	sbci	r16, 0x04	; 4
     3d8:	40 40       	sbci	r20, 0x00	; 0
     3da:	40 40       	sbci	r20, 0x00	; 0
     3dc:	00 03       	mulsu	r16, r16
     3de:	07 08       	sbc	r0, r7
     3e0:	00 20       	and	r0, r0
     3e2:	54 54       	subi	r21, 0x44	; 68
     3e4:	78 40       	sbci	r23, 0x08	; 8
     3e6:	7f 28       	or	r7, r15
     3e8:	44 44       	sbci	r20, 0x44	; 68
     3ea:	38 38       	cpi	r19, 0x88	; 136
     3ec:	44 44       	sbci	r20, 0x44	; 68
     3ee:	44 28       	or	r4, r4
     3f0:	38 44       	sbci	r19, 0x48	; 72
     3f2:	44 28       	or	r4, r4
     3f4:	7f 38       	cpi	r23, 0x8F	; 143
     3f6:	54 54       	subi	r21, 0x44	; 68
     3f8:	54 18       	sub	r5, r4
     3fa:	00 08       	sbc	r0, r0
     3fc:	7e 09       	sbc	r23, r14
     3fe:	02 18       	sub	r0, r2
     400:	a4 a4       	ldd	r10, Z+44	; 0x2c
     402:	9c 78       	andi	r25, 0x8C	; 140
     404:	7f 08       	sbc	r7, r15
     406:	04 04       	cpc	r0, r4
     408:	78 00       	.word	0x0078	; ????
     40a:	44 7d       	andi	r20, 0xD4	; 212
     40c:	40 00       	.word	0x0040	; ????
     40e:	20 40       	sbci	r18, 0x00	; 0
     410:	40 3d       	cpi	r20, 0xD0	; 208
     412:	00 7f       	andi	r16, 0xF0	; 240
     414:	10 28       	or	r1, r0
     416:	44 00       	.word	0x0044	; ????
     418:	00 41       	sbci	r16, 0x10	; 16
     41a:	7f 40       	sbci	r23, 0x0F	; 15
     41c:	00 7c       	andi	r16, 0xC0	; 192
     41e:	04 78       	andi	r16, 0x84	; 132
     420:	04 78       	andi	r16, 0x84	; 132
     422:	7c 08       	sbc	r7, r12
     424:	04 04       	cpc	r0, r4
     426:	78 38       	cpi	r23, 0x88	; 136
     428:	44 44       	sbci	r20, 0x44	; 68
     42a:	44 38       	cpi	r20, 0x84	; 132
     42c:	fc 18       	sub	r15, r12
     42e:	24 24       	eor	r2, r4
     430:	18 18       	sub	r1, r8
     432:	24 24       	eor	r2, r4
     434:	18 fc       	.word	0xfc18	; ????
     436:	7c 08       	sbc	r7, r12
     438:	04 04       	cpc	r0, r4
     43a:	08 48       	sbci	r16, 0x88	; 136
     43c:	54 54       	subi	r21, 0x44	; 68
     43e:	54 24       	eor	r5, r4
     440:	04 04       	cpc	r0, r4
     442:	3f 44       	sbci	r19, 0x4F	; 79
     444:	24 3c       	cpi	r18, 0xC4	; 196
     446:	40 40       	sbci	r20, 0x00	; 0
     448:	20 7c       	andi	r18, 0xC0	; 192
     44a:	1c 20       	and	r1, r12
     44c:	40 20       	and	r4, r0
     44e:	1c 3c       	cpi	r17, 0xCC	; 204
     450:	40 30       	cpi	r20, 0x00	; 0
     452:	40 3c       	cpi	r20, 0xC0	; 192
     454:	44 28       	or	r4, r4
     456:	10 28       	or	r1, r0
     458:	44 4c       	sbci	r20, 0xC4	; 196
     45a:	90 90 90 7c 	lds	r9, 0x7C90
     45e:	44 64       	ori	r20, 0x44	; 68
     460:	54 4c       	sbci	r21, 0xC4	; 196
     462:	44 00       	.word	0x0044	; ????
     464:	08 36       	cpi	r16, 0x68	; 104
     466:	41 00       	.word	0x0041	; ????
     468:	00 00       	nop
     46a:	77 00       	.word	0x0077	; ????
     46c:	00 00       	nop
     46e:	41 36       	cpi	r20, 0x61	; 97
     470:	08 00       	.word	0x0008	; ????
     472:	02 01       	movw	r0, r4
     474:	02 04       	cpc	r0, r2
     476:	02 3c       	cpi	r16, 0xC2	; 194
     478:	26 23       	and	r18, r22
     47a:	26 3c       	cpi	r18, 0xC6	; 198
     47c:	1e a1       	ldd	r17, Y+38	; 0x26
     47e:	a1 61       	ori	r26, 0x11	; 17
     480:	12 3a       	cpi	r17, 0xA2	; 162
     482:	40 40       	sbci	r20, 0x00	; 0
     484:	20 7a       	andi	r18, 0xA0	; 160
     486:	38 54       	subi	r19, 0x48	; 72
     488:	54 55       	subi	r21, 0x54	; 84
     48a:	59 21       	and	r21, r9
     48c:	55 55       	subi	r21, 0x55	; 85
     48e:	79 41       	sbci	r23, 0x19	; 25
     490:	21 54       	subi	r18, 0x41	; 65
     492:	54 78       	andi	r21, 0x84	; 132
     494:	41 21       	and	r20, r1
     496:	55 54       	subi	r21, 0x45	; 69
     498:	78 40       	sbci	r23, 0x08	; 8
     49a:	20 54       	subi	r18, 0x40	; 64
     49c:	55 79       	andi	r21, 0x95	; 149
     49e:	40 0c       	add	r4, r0
     4a0:	1e 52       	subi	r17, 0x2E	; 46
     4a2:	72 12       	cpse	r7, r18
     4a4:	39 55       	subi	r19, 0x59	; 89
     4a6:	55 55       	subi	r21, 0x55	; 85
     4a8:	59 39       	cpi	r21, 0x99	; 153
     4aa:	54 54       	subi	r21, 0x44	; 68
     4ac:	54 59       	subi	r21, 0x94	; 148
     4ae:	39 55       	subi	r19, 0x59	; 89
     4b0:	54 54       	subi	r21, 0x44	; 68
     4b2:	58 00       	.word	0x0058	; ????
     4b4:	00 45       	sbci	r16, 0x50	; 80
     4b6:	7c 41       	sbci	r23, 0x1C	; 28
     4b8:	00 02       	muls	r16, r16
     4ba:	45 7d       	andi	r20, 0xD5	; 213
     4bc:	42 00       	.word	0x0042	; ????
     4be:	01 45       	sbci	r16, 0x51	; 81
     4c0:	7c 40       	sbci	r23, 0x0C	; 12
     4c2:	f0 29       	or	r31, r0
     4c4:	24 29       	or	r18, r4
     4c6:	f0 f0       	brcs	.+60     	; 0x504 <__trampolines_end+0x308>
     4c8:	28 25       	eor	r18, r8
     4ca:	28 f0       	brcs	.+10     	; 0x4d6 <__trampolines_end+0x2da>
     4cc:	7c 54       	subi	r23, 0x4C	; 76
     4ce:	55 45       	sbci	r21, 0x55	; 85
     4d0:	00 20       	and	r0, r0
     4d2:	54 54       	subi	r21, 0x44	; 68
     4d4:	7c 54       	subi	r23, 0x4C	; 76
     4d6:	7c 0a       	sbc	r7, r28
     4d8:	09 7f       	andi	r16, 0xF9	; 249
     4da:	49 32       	cpi	r20, 0x29	; 41
     4dc:	49 49       	sbci	r20, 0x99	; 153
     4de:	49 32       	cpi	r20, 0x29	; 41
     4e0:	32 48       	sbci	r19, 0x82	; 130
     4e2:	48 48       	sbci	r20, 0x88	; 136
     4e4:	32 32       	cpi	r19, 0x22	; 34
     4e6:	4a 48       	sbci	r20, 0x8A	; 138
     4e8:	48 30       	cpi	r20, 0x08	; 8
     4ea:	3a 41       	sbci	r19, 0x1A	; 26
     4ec:	41 21       	and	r20, r1
     4ee:	7a 3a       	cpi	r23, 0xAA	; 170
     4f0:	42 40       	sbci	r20, 0x02	; 2
     4f2:	20 78       	andi	r18, 0x80	; 128
     4f4:	00 9d       	mul	r16, r0
     4f6:	a0 a0       	ldd	r10, Z+32	; 0x20
     4f8:	7d 39       	cpi	r23, 0x9D	; 157
     4fa:	44 44       	sbci	r20, 0x44	; 68
     4fc:	44 39       	cpi	r20, 0x94	; 148
     4fe:	3d 40       	sbci	r19, 0x0D	; 13
     500:	40 40       	sbci	r20, 0x00	; 0
     502:	3d 3c       	cpi	r19, 0xCD	; 205
     504:	24 ff       	sbrs	r18, 4
     506:	24 24       	eor	r2, r4
     508:	48 7e       	andi	r20, 0xE8	; 232
     50a:	49 43       	sbci	r20, 0x39	; 57
     50c:	66 2b       	or	r22, r22
     50e:	2f fc       	.word	0xfc2f	; ????
     510:	2f 2b       	or	r18, r31
     512:	ff 09       	sbc	r31, r15
     514:	29 f6       	brne	.-118    	; 0x4a0 <__trampolines_end+0x2a4>
     516:	20 c0       	rjmp	.+64     	; 0x558 <__trampolines_end+0x35c>
     518:	88 7e       	andi	r24, 0xE8	; 232
     51a:	09 03       	fmul	r16, r17
     51c:	20 54       	subi	r18, 0x40	; 64
     51e:	54 79       	andi	r21, 0x94	; 148
     520:	41 00       	.word	0x0041	; ????
     522:	00 44       	sbci	r16, 0x40	; 64
     524:	7d 41       	sbci	r23, 0x1D	; 29
     526:	30 48       	sbci	r19, 0x80	; 128
     528:	48 4a       	sbci	r20, 0xA8	; 168
     52a:	32 38       	cpi	r19, 0x82	; 130
     52c:	40 40       	sbci	r20, 0x00	; 0
     52e:	22 7a       	andi	r18, 0xA2	; 162
     530:	00 7a       	andi	r16, 0xA0	; 160
     532:	0a 0a       	sbc	r0, r26
     534:	72 7d       	andi	r23, 0xD2	; 210
     536:	0d 19       	sub	r16, r13
     538:	31 7d       	andi	r19, 0xD1	; 209
     53a:	26 29       	or	r18, r6
     53c:	29 2f       	mov	r18, r25
     53e:	28 26       	eor	r2, r24
     540:	29 29       	or	r18, r9
     542:	29 26       	eor	r2, r25
     544:	30 48       	sbci	r19, 0x80	; 128
     546:	4d 40       	sbci	r20, 0x0D	; 13
     548:	20 38       	cpi	r18, 0x80	; 128
     54a:	08 08       	sbc	r0, r8
     54c:	08 08       	sbc	r0, r8
     54e:	08 08       	sbc	r0, r8
     550:	08 08       	sbc	r0, r8
     552:	38 2f       	mov	r19, r24
     554:	10 c8       	rjmp	.-4064   	; 0xfffff576 <__eeprom_end+0xff7ef576>
     556:	ac ba       	out	0x1c, r10	; 28
     558:	2f 10       	cpse	r2, r15
     55a:	28 34       	cpi	r18, 0x48	; 72
     55c:	fa 00       	.word	0x00fa	; ????
     55e:	00 7b       	andi	r16, 0xB0	; 176
     560:	00 00       	nop
     562:	08 14       	cp	r0, r8
     564:	2a 14       	cp	r2, r10
     566:	22 22       	and	r2, r18
     568:	14 2a       	or	r1, r20
     56a:	14 08       	sbc	r1, r4
     56c:	aa 00       	.word	0x00aa	; ????
     56e:	55 00       	.word	0x0055	; ????
     570:	aa aa       	std	Y+50, r10	; 0x32
     572:	55 aa       	std	Z+53, r5	; 0x35
     574:	55 aa       	std	Z+53, r5	; 0x35
     576:	00 00       	nop
     578:	00 ff       	sbrs	r16, 0
     57a:	00 10       	cpse	r0, r0
     57c:	10 10       	cpse	r1, r0
     57e:	ff 00       	.word	0x00ff	; ????
     580:	14 14       	cp	r1, r4
     582:	14 ff       	sbrs	r17, 4
     584:	00 10       	cpse	r0, r0
     586:	10 ff       	sbrs	r17, 0
     588:	00 ff       	sbrs	r16, 0
     58a:	10 10       	cpse	r1, r0
     58c:	f0 10       	cpse	r15, r0
     58e:	f0 14       	cp	r15, r0
     590:	14 14       	cp	r1, r4
     592:	fc 00       	.word	0x00fc	; ????
     594:	14 14       	cp	r1, r4
     596:	f7 00       	.word	0x00f7	; ????
     598:	ff 00       	.word	0x00ff	; ????
     59a:	00 ff       	sbrs	r16, 0
     59c:	00 ff       	sbrs	r16, 0
     59e:	14 14       	cp	r1, r4
     5a0:	f4 04       	cpc	r15, r4
     5a2:	fc 14       	cp	r15, r12
     5a4:	14 17       	cp	r17, r20
     5a6:	10 1f       	adc	r17, r16
     5a8:	10 10       	cpse	r1, r0
     5aa:	1f 10       	cpse	r1, r15
     5ac:	1f 14       	cp	r1, r15
     5ae:	14 14       	cp	r1, r4
     5b0:	1f 00       	.word	0x001f	; ????
     5b2:	10 10       	cpse	r1, r0
     5b4:	10 f0       	brcs	.+4      	; 0x5ba <__trampolines_end+0x3be>
     5b6:	00 00       	nop
     5b8:	00 00       	nop
     5ba:	1f 10       	cpse	r1, r15
     5bc:	10 10       	cpse	r1, r0
     5be:	10 1f       	adc	r17, r16
     5c0:	10 10       	cpse	r1, r0
     5c2:	10 10       	cpse	r1, r0
     5c4:	f0 10       	cpse	r15, r0
     5c6:	00 00       	nop
     5c8:	00 ff       	sbrs	r16, 0
     5ca:	10 10       	cpse	r1, r0
     5cc:	10 10       	cpse	r1, r0
     5ce:	10 10       	cpse	r1, r0
     5d0:	10 10       	cpse	r1, r0
     5d2:	10 ff       	sbrs	r17, 0
     5d4:	10 00       	.word	0x0010	; ????
     5d6:	00 00       	nop
     5d8:	ff 14       	cp	r15, r15
     5da:	00 00       	nop
     5dc:	ff 00       	.word	0x00ff	; ????
     5de:	ff 00       	.word	0x00ff	; ????
     5e0:	00 1f       	adc	r16, r16
     5e2:	10 17       	cp	r17, r16
     5e4:	00 00       	nop
     5e6:	fc 04       	cpc	r15, r12
     5e8:	f4 14       	cp	r15, r4
     5ea:	14 17       	cp	r17, r20
     5ec:	10 17       	cp	r17, r16
     5ee:	14 14       	cp	r1, r4
     5f0:	f4 04       	cpc	r15, r4
     5f2:	f4 00       	.word	0x00f4	; ????
     5f4:	00 ff       	sbrs	r16, 0
     5f6:	00 f7       	brcc	.-64     	; 0x5b8 <__trampolines_end+0x3bc>
     5f8:	14 14       	cp	r1, r4
     5fa:	14 14       	cp	r1, r4
     5fc:	14 14       	cp	r1, r4
     5fe:	14 f7       	brge	.-60     	; 0x5c4 <__trampolines_end+0x3c8>
     600:	00 f7       	brcc	.-64     	; 0x5c2 <__trampolines_end+0x3c6>
     602:	14 14       	cp	r1, r4
     604:	14 17       	cp	r17, r20
     606:	14 10       	cpse	r1, r4
     608:	10 1f       	adc	r17, r16
     60a:	10 1f       	adc	r17, r16
     60c:	14 14       	cp	r1, r4
     60e:	14 f4       	brge	.+4      	; 0x614 <__trampolines_end+0x418>
     610:	14 10       	cpse	r1, r4
     612:	10 f0       	brcs	.+4      	; 0x618 <__trampolines_end+0x41c>
     614:	10 f0       	brcs	.+4      	; 0x61a <__trampolines_end+0x41e>
     616:	00 00       	nop
     618:	1f 10       	cpse	r1, r15
     61a:	1f 00       	.word	0x001f	; ????
     61c:	00 00       	nop
     61e:	1f 14       	cp	r1, r15
     620:	00 00       	nop
     622:	00 fc       	sbrc	r0, 0
     624:	14 00       	.word	0x0014	; ????
     626:	00 f0       	brcs	.+0      	; 0x628 <__trampolines_end+0x42c>
     628:	10 f0       	brcs	.+4      	; 0x62e <__trampolines_end+0x432>
     62a:	10 10       	cpse	r1, r0
     62c:	ff 10       	cpse	r15, r15
     62e:	ff 14       	cp	r15, r15
     630:	14 14       	cp	r1, r4
     632:	ff 14       	cp	r15, r15
     634:	10 10       	cpse	r1, r0
     636:	10 1f       	adc	r17, r16
     638:	00 00       	nop
     63a:	00 00       	nop
     63c:	f0 10       	cpse	r15, r0
     63e:	ff ff       	.word	0xffff	; ????
     640:	ff ff       	.word	0xffff	; ????
     642:	ff f0       	brie	.+62     	; 0x682 <__trampolines_end+0x486>
     644:	f0 f0       	brcs	.+60     	; 0x682 <__trampolines_end+0x486>
     646:	f0 f0       	brcs	.+60     	; 0x684 <__trampolines_end+0x488>
     648:	ff ff       	.word	0xffff	; ????
     64a:	ff 00       	.word	0x00ff	; ????
     64c:	00 00       	nop
     64e:	00 00       	nop
     650:	ff ff       	.word	0xffff	; ????
     652:	0f 0f       	add	r16, r31
     654:	0f 0f       	add	r16, r31
     656:	0f 38       	cpi	r16, 0x8F	; 143
     658:	44 44       	sbci	r20, 0x44	; 68
     65a:	38 44       	sbci	r19, 0x48	; 72
     65c:	7c 2a       	or	r7, r28
     65e:	2a 3e       	cpi	r18, 0xEA	; 234
     660:	14 7e       	andi	r17, 0xE4	; 228
     662:	02 02       	muls	r16, r18
     664:	06 06       	cpc	r0, r22
     666:	02 7e       	andi	r16, 0xE2	; 226
     668:	02 7e       	andi	r16, 0xE2	; 226
     66a:	02 63       	ori	r16, 0x32	; 50
     66c:	55 49       	sbci	r21, 0x95	; 149
     66e:	41 63       	ori	r20, 0x31	; 49
     670:	38 44       	sbci	r19, 0x48	; 72
     672:	44 3c       	cpi	r20, 0xC4	; 196
     674:	04 40       	sbci	r16, 0x04	; 4
     676:	7e 20       	and	r7, r14
     678:	1e 20       	and	r1, r14
     67a:	06 02       	muls	r16, r22
     67c:	7e 02       	muls	r23, r30
     67e:	02 99       	sbic	0x00, 2	; 0
     680:	a5 e7       	ldi	r26, 0x75	; 117
     682:	a5 99       	sbic	0x14, 5	; 20
     684:	1c 2a       	or	r1, r28
     686:	49 2a       	or	r4, r25
     688:	1c 4c       	sbci	r17, 0xCC	; 204
     68a:	72 01       	movw	r14, r4
     68c:	72 4c       	sbci	r23, 0xC2	; 194
     68e:	30 4a       	sbci	r19, 0xA0	; 160
     690:	4d 4d       	sbci	r20, 0xDD	; 221
     692:	30 30       	cpi	r19, 0x00	; 0
     694:	48 78       	andi	r20, 0x88	; 136
     696:	48 30       	cpi	r20, 0x08	; 8
     698:	bc 62       	ori	r27, 0x2C	; 44
     69a:	5a 46       	sbci	r21, 0x6A	; 106
     69c:	3d 3e       	cpi	r19, 0xED	; 237
     69e:	49 49       	sbci	r20, 0x99	; 153
     6a0:	49 00       	.word	0x0049	; ????
     6a2:	7e 01       	movw	r14, r28
     6a4:	01 01       	movw	r0, r2
     6a6:	7e 2a       	or	r7, r30
     6a8:	2a 2a       	or	r2, r26
     6aa:	2a 2a       	or	r2, r26
     6ac:	44 44       	sbci	r20, 0x44	; 68
     6ae:	5f 44       	sbci	r21, 0x4F	; 79
     6b0:	44 40       	sbci	r20, 0x04	; 4
     6b2:	51 4a       	sbci	r21, 0xA1	; 161
     6b4:	44 40       	sbci	r20, 0x04	; 4
     6b6:	40 44       	sbci	r20, 0x40	; 64
     6b8:	4a 51       	subi	r20, 0x1A	; 26
     6ba:	40 00       	.word	0x0040	; ????
     6bc:	00 ff       	sbrs	r16, 0
     6be:	01 03       	mulsu	r16, r17
     6c0:	e0 80       	ld	r14, Z
     6c2:	ff 00       	.word	0x00ff	; ????
     6c4:	00 08       	sbc	r0, r0
     6c6:	08 6b       	ori	r16, 0xB8	; 184
     6c8:	6b 08       	sbc	r6, r11
     6ca:	36 12       	cpse	r3, r22
     6cc:	36 24       	eor	r3, r6
     6ce:	36 06       	cpc	r3, r22
     6d0:	0f 09       	sbc	r16, r15
     6d2:	0f 06       	cpc	r0, r31
     6d4:	00 00       	nop
     6d6:	18 18       	sub	r1, r8
     6d8:	00 00       	nop
     6da:	00 10       	cpse	r0, r0
     6dc:	10 00       	.word	0x0010	; ????
     6de:	30 40       	sbci	r19, 0x00	; 0
     6e0:	ff 01       	movw	r30, r30
     6e2:	01 00       	.word	0x0001	; ????
     6e4:	1f 01       	movw	r2, r30
     6e6:	01 1e       	adc	r0, r17
     6e8:	00 19       	sub	r16, r0
     6ea:	1d 17       	cp	r17, r29
     6ec:	12 00       	.word	0x0012	; ????
     6ee:	3c 3c       	cpi	r19, 0xCC	; 204
     6f0:	3c 3c       	cpi	r19, 0xCC	; 204
     6f2:	00 00       	nop
     6f4:	00 00       	nop
	...

000006f8 <__ctors_end>:
     6f8:	11 24       	eor	r1, r1
     6fa:	1f be       	out	0x3f, r1	; 63
     6fc:	cf ef       	ldi	r28, 0xFF	; 255
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	df e2       	ldi	r29, 0x2F	; 47
     702:	de bf       	out	0x3e, r29	; 62

00000704 <__do_copy_data>:
     704:	10 e2       	ldi	r17, 0x20	; 32
     706:	a0 e0       	ldi	r26, 0x00	; 0
     708:	b0 e2       	ldi	r27, 0x20	; 32
     70a:	e4 e4       	ldi	r30, 0x44	; 68
     70c:	f9 e2       	ldi	r31, 0x29	; 41
     70e:	00 e0       	ldi	r16, 0x00	; 0
     710:	0b bf       	out	0x3b, r16	; 59
     712:	02 c0       	rjmp	.+4      	; 0x718 <__do_copy_data+0x14>
     714:	07 90       	elpm	r0, Z+
     716:	0d 92       	st	X+, r0
     718:	ac 33       	cpi	r26, 0x3C	; 60
     71a:	b1 07       	cpc	r27, r17
     71c:	d9 f7       	brne	.-10     	; 0x714 <__do_copy_data+0x10>

0000071e <__do_clear_bss>:
     71e:	24 e2       	ldi	r18, 0x24	; 36
     720:	ac e3       	ldi	r26, 0x3C	; 60
     722:	b0 e2       	ldi	r27, 0x20	; 32
     724:	01 c0       	rjmp	.+2      	; 0x728 <.do_clear_bss_start>

00000726 <.do_clear_bss_loop>:
     726:	1d 92       	st	X+, r1

00000728 <.do_clear_bss_start>:
     728:	a8 3a       	cpi	r26, 0xA8	; 168
     72a:	b2 07       	cpc	r27, r18
     72c:	e1 f7       	brne	.-8      	; 0x726 <.do_clear_bss_loop>
     72e:	46 d7       	rcall	.+3724   	; 0x15bc <main>
     730:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <_exit>

00000734 <__bad_interrupt>:
     734:	65 cc       	rjmp	.-1846   	; 0x0 <__vectors>

00000736 <clock_setup_32_mhz>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
}

void clock_setup_32_mhz(void) {
	
	OSC.CTRL |= OSC_RC32MEN_bm;
     736:	80 91 50 00 	lds	r24, 0x0050
     73a:	82 60       	ori	r24, 0x02	; 2
     73c:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     740:	80 91 51 00 	lds	r24, 0x0051
     744:	81 ff       	sbrs	r24, 1
     746:	fc cf       	rjmp	.-8      	; 0x740 <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
     748:	88 ed       	ldi	r24, 0xD8	; 216
     74a:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	80 93 40 00 	sts	0x0040, r24
     752:	08 95       	ret

00000754 <__vector_88>:
	esp8266_send_cmd("AT+CIFSR=?", 2000);
	
	return SUCCESS;
}

ISR(USARTD0_RXC_vect) {
     754:	1f 92       	push	r1
     756:	0f 92       	push	r0
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	0f 92       	push	r0
     75c:	11 24       	eor	r1, r1
     75e:	0b b6       	in	r0, 0x3b	; 59
     760:	0f 92       	push	r0
     762:	2f 93       	push	r18
     764:	3f 93       	push	r19
     766:	8f 93       	push	r24
     768:	9f 93       	push	r25
     76a:	ef 93       	push	r30
     76c:	ff 93       	push	r31
	rx_buffer[rx_ptr++] = USARTD0.DATA;
     76e:	80 91 24 24 	lds	r24, 0x2424
     772:	90 91 25 24 	lds	r25, 0x2425
     776:	9c 01       	movw	r18, r24
     778:	2f 5f       	subi	r18, 0xFF	; 255
     77a:	3f 4f       	sbci	r19, 0xFF	; 255
     77c:	20 93 24 24 	sts	0x2424, r18
     780:	30 93 25 24 	sts	0x2425, r19
     784:	20 91 a0 09 	lds	r18, 0x09A0
     788:	fc 01       	movw	r30, r24
     78a:	e4 5c       	subi	r30, 0xC4	; 196
     78c:	ff 4d       	sbci	r31, 0xDF	; 223
     78e:	20 83       	st	Z, r18
     790:	ff 91       	pop	r31
     792:	ef 91       	pop	r30
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	3f 91       	pop	r19
     79a:	2f 91       	pop	r18
     79c:	0f 90       	pop	r0
     79e:	0b be       	out	0x3b, r0	; 59
     7a0:	0f 90       	pop	r0
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	0f 90       	pop	r0
     7a6:	1f 90       	pop	r1
     7a8:	18 95       	reti

000007aa <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
     7aa:	1f 92       	push	r1
     7ac:	0f 92       	push	r0
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	0f 92       	push	r0
     7b2:	11 24       	eor	r1, r1
     7b4:	0b b6       	in	r0, 0x3b	; 59
     7b6:	0f 92       	push	r0
     7b8:	cf 92       	push	r12
     7ba:	df 92       	push	r13
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	4f 93       	push	r20
     7c6:	5f 93       	push	r21
     7c8:	6f 93       	push	r22
     7ca:	7f 93       	push	r23
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
     7d0:	af 93       	push	r26
     7d2:	bf 93       	push	r27
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
     7d8:	e0 91 99 24 	lds	r30, 0x2499
     7dc:	f0 91 9a 24 	lds	r31, 0x249A
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	if (!fcb) return;
     7e0:	30 97       	sbiw	r30, 0x00	; 0
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <__vector_14+0x3c>
     7e4:	5f c0       	rjmp	.+190    	; 0x8a4 <__vector_14+0xfa>
	ct = fcb->ct; ri = fcb->ri;
     7e6:	46 81       	ldd	r20, Z+6	; 0x06
     7e8:	57 81       	ldd	r21, Z+7	; 0x07
     7ea:	22 81       	ldd	r18, Z+2	; 0x02
     7ec:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
     7ee:	a0 85       	ldd	r26, Z+8	; 0x08
     7f0:	b1 85       	ldd	r27, Z+9	; 0x09
     7f2:	a2 0f       	add	r26, r18
     7f4:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
     7f6:	80 81       	ld	r24, Z
     7f8:	91 81       	ldd	r25, Z+1	; 0x01
     7fa:	81 30       	cpi	r24, 0x01	; 1
     7fc:	91 05       	cpc	r25, r1
     7fe:	89 f0       	breq	.+34     	; 0x822 <__vector_14+0x78>
     800:	08 f4       	brcc	.+2      	; 0x804 <__vector_14+0x5a>
     802:	67 c0       	rjmp	.+206    	; 0x8d2 <__vector_14+0x128>
     804:	02 97       	sbiw	r24, 0x02	; 2
     806:	09 f0       	breq	.+2      	; 0x80a <__vector_14+0x60>
     808:	6d c0       	rjmp	.+218    	; 0x8e4 <__vector_14+0x13a>
		if (ct < 2) return;
		l1 = buff[0]; r2 = buff[1];
		ct -= 2; ri += 2;
		break;
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
     80a:	42 30       	cpi	r20, 0x02	; 2
     80c:	51 05       	cpc	r21, r1
     80e:	08 f4       	brcc	.+2      	; 0x812 <__vector_14+0x68>
     810:	49 c0       	rjmp	.+146    	; 0x8a4 <__vector_14+0xfa>
		l1 = r2 = buff[1] + 128;
     812:	11 96       	adiw	r26, 0x01	; 1
     814:	6c 91       	ld	r22, X
     816:	60 58       	subi	r22, 0x80	; 128
		ct -= 2; ri += 2;
     818:	42 50       	subi	r20, 0x02	; 2
     81a:	51 09       	sbc	r21, r1
     81c:	2e 5f       	subi	r18, 0xFE	; 254
     81e:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
     820:	08 c0       	rjmp	.+16     	; 0x832 <__vector_14+0x88>
		if (ct < 1) return;
		l1 = r2 = buff[0];
		ct -= 1; ri += 1;
		break;
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
     822:	42 30       	cpi	r20, 0x02	; 2
     824:	51 05       	cpc	r21, r1
     826:	f0 f1       	brcs	.+124    	; 0x8a4 <__vector_14+0xfa>
		l1 = buff[0]; r2 = buff[1];
     828:	6c 91       	ld	r22, X
		ct -= 2; ri += 2;
     82a:	42 50       	subi	r20, 0x02	; 2
     82c:	51 09       	sbc	r21, r1
     82e:	2e 5f       	subi	r18, 0xFE	; 254
     830:	3f 4f       	sbci	r19, 0xFF	; 255
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
		ri += 4;
	}
	fcb->ct = ct;
     832:	46 83       	std	Z+6, r20	; 0x06
     834:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
     836:	82 85       	ldd	r24, Z+10	; 0x0a
     838:	93 85       	ldd	r25, Z+11	; 0x0b
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	82 23       	and	r24, r18
     83e:	93 23       	and	r25, r19
     840:	82 83       	std	Z+2, r24	; 0x02
     842:	93 83       	std	Z+3, r25	; 0x03
	result = integer + 0x7FFF;
	return(result >> 4);
}

static inline uint8_t smooth(uint8_t data, float filterVal, float smoothedVal){
	return (int)(((data * (1 - filterVal)) + (smoothedVal  *  filterVal)));
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__floatsisf>
     84e:	2a e9       	ldi	r18, 0x9A	; 154
     850:	39 e9       	ldi	r19, 0x99	; 153
     852:	49 e1       	ldi	r20, 0x19	; 25
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 77 11 	call	0x22ee	; 0x22ee <__mulsf3>
     85a:	6b 01       	movw	r12, r22
     85c:	7c 01       	movw	r14, r24
		ri += 4;
	}
	fcb->ct = ct;
	fcb->ri = ri & (fcb->sz_buff - 1);
	
	uint8_t data = smooth(l1,0.4,data);
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	cb 01       	movw	r24, r22
     864:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__floatunsisf>
	result = integer + 0x7FFF;
	return(result >> 4);
}

static inline uint8_t smooth(uint8_t data, float filterVal, float smoothedVal){
	return (int)(((data * (1 - filterVal)) + (smoothedVal  *  filterVal)));
     868:	2d ec       	ldi	r18, 0xCD	; 205
     86a:	3c ec       	ldi	r19, 0xCC	; 204
     86c:	4c ec       	ldi	r20, 0xCC	; 204
     86e:	5e e3       	ldi	r21, 0x3E	; 62
     870:	0e 94 77 11 	call	0x22ee	; 0x22ee <__mulsf3>
     874:	9b 01       	movw	r18, r22
     876:	ac 01       	movw	r20, r24
     878:	c7 01       	movw	r24, r14
     87a:	b6 01       	movw	r22, r12
     87c:	0e 94 54 10 	call	0x20a8	; 0x20a8 <__addsf3>
     880:	0e 94 b8 10 	call	0x2170	; 0x2170 <__fixsfsi>
	fcb->ri = ri & (fcb->sz_buff - 1);
	
	uint8_t data = smooth(l1,0.4,data);
	//uint8_t data = l1*0.2;
	
	DACB.CH0DATA = 255+data;//<< 2;
     884:	77 27       	eor	r23, r23
     886:	cb 01       	movw	r24, r22
     888:	81 50       	subi	r24, 0x01	; 1
     88a:	9f 4f       	sbci	r25, 0xFF	; 255
     88c:	80 93 38 03 	sts	0x0338, r24
     890:	90 93 39 03 	sts	0x0339, r25
	DACB.CH1DATA = 255-data;//<< 2;
     894:	8f ef       	ldi	r24, 0xFF	; 255
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	86 1b       	sub	r24, r22
     89a:	97 0b       	sbc	r25, r23
     89c:	80 93 3a 03 	sts	0x033A, r24
     8a0:	90 93 3b 03 	sts	0x033B, r25
	//DACB.CH0DATAL = (data << 7);
	//DACB.CH0DATAH = (data >> 1);
}
     8a4:	ff 91       	pop	r31
     8a6:	ef 91       	pop	r30
     8a8:	bf 91       	pop	r27
     8aa:	af 91       	pop	r26
     8ac:	9f 91       	pop	r25
     8ae:	8f 91       	pop	r24
     8b0:	7f 91       	pop	r23
     8b2:	6f 91       	pop	r22
     8b4:	5f 91       	pop	r21
     8b6:	4f 91       	pop	r20
     8b8:	3f 91       	pop	r19
     8ba:	2f 91       	pop	r18
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
     8c4:	0f 90       	pop	r0
     8c6:	0b be       	out	0x3b, r0	; 59
     8c8:	0f 90       	pop	r0
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	0f 90       	pop	r0
     8ce:	1f 90       	pop	r1
     8d0:	18 95       	reti
	ct = fcb->ct; ri = fcb->ri;
	buff = fcb->buff + ri;

	switch (fcb->mode) {
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
     8d2:	41 15       	cp	r20, r1
     8d4:	51 05       	cpc	r21, r1
     8d6:	31 f3       	breq	.-52     	; 0x8a4 <__vector_14+0xfa>
		l1 = r2 = buff[0];
     8d8:	6c 91       	ld	r22, X
		ct -= 1; ri += 1;
     8da:	41 50       	subi	r20, 0x01	; 1
     8dc:	51 09       	sbc	r21, r1
     8de:	2f 5f       	subi	r18, 0xFF	; 255
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
     8e2:	a7 cf       	rjmp	.-178    	; 0x832 <__vector_14+0x88>
		if (ct < 2) return;
		l1 = r2 = buff[1] + 128;
		ct -= 2; ri += 2;
		break;
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
     8e4:	44 30       	cpi	r20, 0x04	; 4
     8e6:	51 05       	cpc	r21, r1
     8e8:	e8 f2       	brcs	.-70     	; 0x8a4 <__vector_14+0xfa>
		l2 = buff[0]; 
		l1 = buff[1];
     8ea:	11 96       	adiw	r26, 0x01	; 1
     8ec:	6c 91       	ld	r22, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
     8ee:	44 50       	subi	r20, 0x04	; 4
     8f0:	51 09       	sbc	r21, r1
		ri += 4;
     8f2:	2c 5f       	subi	r18, 0xFC	; 252
     8f4:	3f 4f       	sbci	r19, 0xFF	; 255
     8f6:	9d cf       	rjmp	.-198    	; 0x832 <__vector_14+0x88>

000008f8 <ht1632c_setup>:

/*------------------------------STRING FUNCTIONS------------------------------*/

void ht1632c_set_cursor(int16_t x, int16_t y) {
	cursor_x = x;
	cursor_y = y;
     8f8:	41 e0       	ldi	r20, 0x01	; 1
     8fa:	40 93 81 06 	sts	0x0681, r20
     8fe:	40 93 85 06 	sts	0x0685, r20
     902:	24 e0       	ldi	r18, 0x04	; 4
     904:	20 93 81 06 	sts	0x0681, r18
     908:	20 93 85 06 	sts	0x0685, r18
     90c:	38 e0       	ldi	r19, 0x08	; 8
     90e:	30 93 81 06 	sts	0x0681, r19
     912:	40 93 86 06 	sts	0x0686, r20
     916:	30 93 81 06 	sts	0x0681, r19
     91a:	20 93 86 06 	sts	0x0686, r18
     91e:	30 93 85 06 	sts	0x0685, r19
     922:	20 93 85 06 	sts	0x0685, r18
     926:	20 93 86 06 	sts	0x0686, r18
     92a:	30 93 86 06 	sts	0x0686, r19
     92e:	20 93 85 06 	sts	0x0685, r18
     932:	20 93 86 06 	sts	0x0686, r18
     936:	30 93 86 06 	sts	0x0686, r19
     93a:	20 93 85 06 	sts	0x0685, r18
     93e:	20 93 86 06 	sts	0x0686, r18
     942:	30 93 86 06 	sts	0x0686, r19
     946:	20 93 85 06 	sts	0x0685, r18
     94a:	20 93 86 06 	sts	0x0686, r18
     94e:	30 93 86 06 	sts	0x0686, r19
     952:	20 93 85 06 	sts	0x0685, r18
     956:	20 93 86 06 	sts	0x0686, r18
     95a:	30 93 86 06 	sts	0x0686, r19
     95e:	20 93 85 06 	sts	0x0685, r18
     962:	20 93 86 06 	sts	0x0686, r18
     966:	30 93 86 06 	sts	0x0686, r19
     96a:	20 93 85 06 	sts	0x0685, r18
     96e:	20 93 86 06 	sts	0x0686, r18
     972:	30 93 86 06 	sts	0x0686, r19
     976:	20 93 85 06 	sts	0x0685, r18
     97a:	20 93 86 06 	sts	0x0686, r18
     97e:	30 93 86 06 	sts	0x0686, r19
     982:	20 93 85 06 	sts	0x0685, r18
     986:	20 93 86 06 	sts	0x0686, r18
     98a:	30 93 86 06 	sts	0x0686, r19
     98e:	20 93 85 06 	sts	0x0685, r18
     992:	20 93 86 06 	sts	0x0686, r18
     996:	30 93 85 06 	sts	0x0685, r19
     99a:	20 93 85 06 	sts	0x0685, r18
     99e:	20 93 86 06 	sts	0x0686, r18
     9a2:	30 93 86 06 	sts	0x0686, r19
     9a6:	20 93 85 06 	sts	0x0685, r18
     9aa:	30 93 86 06 	sts	0x0686, r19
     9ae:	40 93 85 06 	sts	0x0685, r20
     9b2:	40 93 86 06 	sts	0x0686, r20
     9b6:	30 93 81 06 	sts	0x0681, r19
     9ba:	20 93 86 06 	sts	0x0686, r18
     9be:	30 93 85 06 	sts	0x0685, r19
     9c2:	20 93 85 06 	sts	0x0685, r18
     9c6:	20 93 86 06 	sts	0x0686, r18
     9ca:	30 93 86 06 	sts	0x0686, r19
     9ce:	20 93 85 06 	sts	0x0685, r18
     9d2:	20 93 86 06 	sts	0x0686, r18
     9d6:	30 93 86 06 	sts	0x0686, r19
     9da:	20 93 85 06 	sts	0x0685, r18
     9de:	20 93 86 06 	sts	0x0686, r18
     9e2:	30 93 86 06 	sts	0x0686, r19
     9e6:	20 93 85 06 	sts	0x0685, r18
     9ea:	20 93 86 06 	sts	0x0686, r18
     9ee:	30 93 86 06 	sts	0x0686, r19
     9f2:	20 93 85 06 	sts	0x0685, r18
     9f6:	20 93 86 06 	sts	0x0686, r18
     9fa:	30 93 86 06 	sts	0x0686, r19
     9fe:	20 93 85 06 	sts	0x0685, r18
     a02:	20 93 86 06 	sts	0x0686, r18
     a06:	30 93 86 06 	sts	0x0686, r19
     a0a:	20 93 85 06 	sts	0x0685, r18
     a0e:	20 93 86 06 	sts	0x0686, r18
     a12:	30 93 86 06 	sts	0x0686, r19
     a16:	20 93 85 06 	sts	0x0685, r18
     a1a:	20 93 86 06 	sts	0x0686, r18
     a1e:	30 93 86 06 	sts	0x0686, r19
     a22:	20 93 85 06 	sts	0x0685, r18
     a26:	20 93 86 06 	sts	0x0686, r18
     a2a:	30 93 85 06 	sts	0x0685, r19
     a2e:	20 93 85 06 	sts	0x0685, r18
     a32:	20 93 86 06 	sts	0x0686, r18
     a36:	30 93 85 06 	sts	0x0685, r19
     a3a:	20 93 85 06 	sts	0x0685, r18
     a3e:	20 93 86 06 	sts	0x0686, r18
     a42:	30 93 86 06 	sts	0x0686, r19
     a46:	20 93 85 06 	sts	0x0685, r18
     a4a:	30 93 86 06 	sts	0x0686, r19
     a4e:	40 93 85 06 	sts	0x0685, r20
     a52:	40 93 86 06 	sts	0x0686, r20
     a56:	30 93 81 06 	sts	0x0681, r19
     a5a:	20 93 86 06 	sts	0x0686, r18
     a5e:	30 93 85 06 	sts	0x0685, r19
     a62:	20 93 85 06 	sts	0x0685, r18
     a66:	20 93 86 06 	sts	0x0686, r18
     a6a:	30 93 86 06 	sts	0x0686, r19
     a6e:	20 93 85 06 	sts	0x0685, r18
     a72:	20 93 86 06 	sts	0x0686, r18
     a76:	30 93 86 06 	sts	0x0686, r19
     a7a:	20 93 85 06 	sts	0x0685, r18
     a7e:	20 93 86 06 	sts	0x0686, r18
     a82:	30 93 86 06 	sts	0x0686, r19
     a86:	20 93 85 06 	sts	0x0685, r18
     a8a:	20 93 86 06 	sts	0x0686, r18
     a8e:	30 93 86 06 	sts	0x0686, r19
     a92:	20 93 85 06 	sts	0x0685, r18
     a96:	20 93 86 06 	sts	0x0686, r18
     a9a:	30 93 86 06 	sts	0x0686, r19
     a9e:	20 93 85 06 	sts	0x0685, r18
     aa2:	20 93 86 06 	sts	0x0686, r18
     aa6:	30 93 86 06 	sts	0x0686, r19
     aaa:	20 93 85 06 	sts	0x0685, r18
     aae:	20 93 86 06 	sts	0x0686, r18
     ab2:	30 93 85 06 	sts	0x0685, r19
     ab6:	20 93 85 06 	sts	0x0685, r18
     aba:	20 93 86 06 	sts	0x0686, r18
     abe:	30 93 86 06 	sts	0x0686, r19
     ac2:	20 93 85 06 	sts	0x0685, r18
     ac6:	20 93 86 06 	sts	0x0686, r18
     aca:	30 93 86 06 	sts	0x0686, r19
     ace:	20 93 85 06 	sts	0x0685, r18
     ad2:	20 93 86 06 	sts	0x0686, r18
     ad6:	30 93 86 06 	sts	0x0686, r19
     ada:	20 93 85 06 	sts	0x0685, r18
     ade:	20 93 86 06 	sts	0x0686, r18
     ae2:	30 93 86 06 	sts	0x0686, r19
     ae6:	20 93 85 06 	sts	0x0685, r18
     aea:	30 93 86 06 	sts	0x0686, r19
     aee:	40 93 85 06 	sts	0x0685, r20
     af2:	40 93 86 06 	sts	0x0686, r20
     af6:	30 93 81 06 	sts	0x0681, r19
     afa:	20 93 86 06 	sts	0x0686, r18
     afe:	30 93 85 06 	sts	0x0685, r19
     b02:	20 93 85 06 	sts	0x0685, r18
     b06:	20 93 86 06 	sts	0x0686, r18
     b0a:	30 93 86 06 	sts	0x0686, r19
     b0e:	20 93 85 06 	sts	0x0685, r18
     b12:	20 93 86 06 	sts	0x0686, r18
     b16:	30 93 86 06 	sts	0x0686, r19
     b1a:	20 93 85 06 	sts	0x0685, r18
     b1e:	20 93 86 06 	sts	0x0686, r18
     b22:	30 93 86 06 	sts	0x0686, r19
     b26:	20 93 85 06 	sts	0x0685, r18
     b2a:	20 93 86 06 	sts	0x0686, r18
     b2e:	30 93 86 06 	sts	0x0686, r19
     b32:	20 93 85 06 	sts	0x0685, r18
     b36:	20 93 86 06 	sts	0x0686, r18
     b3a:	30 93 86 06 	sts	0x0686, r19
     b3e:	20 93 85 06 	sts	0x0685, r18
     b42:	20 93 86 06 	sts	0x0686, r18
     b46:	30 93 85 06 	sts	0x0685, r19
     b4a:	20 93 85 06 	sts	0x0685, r18
     b4e:	20 93 86 06 	sts	0x0686, r18
     b52:	30 93 86 06 	sts	0x0686, r19
     b56:	20 93 85 06 	sts	0x0685, r18
     b5a:	20 93 86 06 	sts	0x0686, r18
     b5e:	30 93 85 06 	sts	0x0685, r19
     b62:	20 93 85 06 	sts	0x0685, r18
     b66:	20 93 86 06 	sts	0x0686, r18
     b6a:	30 93 86 06 	sts	0x0686, r19
     b6e:	20 93 85 06 	sts	0x0685, r18
     b72:	20 93 86 06 	sts	0x0686, r18
     b76:	30 93 86 06 	sts	0x0686, r19
     b7a:	20 93 85 06 	sts	0x0685, r18
     b7e:	20 93 86 06 	sts	0x0686, r18
     b82:	30 93 86 06 	sts	0x0686, r19
     b86:	20 93 85 06 	sts	0x0685, r18
     b8a:	30 93 86 06 	sts	0x0686, r19
     b8e:	40 93 85 06 	sts	0x0685, r20
     b92:	40 93 86 06 	sts	0x0686, r20
     b96:	30 93 81 06 	sts	0x0681, r19
     b9a:	20 93 86 06 	sts	0x0686, r18
     b9e:	30 93 85 06 	sts	0x0685, r19
     ba2:	20 93 85 06 	sts	0x0685, r18
     ba6:	20 93 86 06 	sts	0x0686, r18
     baa:	30 93 86 06 	sts	0x0686, r19
     bae:	20 93 85 06 	sts	0x0685, r18
     bb2:	20 93 86 06 	sts	0x0686, r18
     bb6:	30 93 86 06 	sts	0x0686, r19
     bba:	20 93 85 06 	sts	0x0685, r18
     bbe:	20 93 86 06 	sts	0x0686, r18
     bc2:	30 93 86 06 	sts	0x0686, r19
     bc6:	20 93 85 06 	sts	0x0685, r18
     bca:	20 93 86 06 	sts	0x0686, r18
     bce:	30 93 86 06 	sts	0x0686, r19
     bd2:	20 93 85 06 	sts	0x0685, r18
     bd6:	20 93 86 06 	sts	0x0686, r18
     bda:	30 93 86 06 	sts	0x0686, r19
     bde:	20 93 85 06 	sts	0x0685, r18
     be2:	20 93 86 06 	sts	0x0686, r18
     be6:	30 93 85 06 	sts	0x0685, r19
     bea:	20 93 85 06 	sts	0x0685, r18
     bee:	20 93 86 06 	sts	0x0686, r18
     bf2:	30 93 85 06 	sts	0x0685, r19
     bf6:	20 93 85 06 	sts	0x0685, r18
     bfa:	20 93 86 06 	sts	0x0686, r18
     bfe:	30 93 86 06 	sts	0x0686, r19
     c02:	20 93 85 06 	sts	0x0685, r18
     c06:	20 93 86 06 	sts	0x0686, r18
     c0a:	30 93 86 06 	sts	0x0686, r19
     c0e:	20 93 85 06 	sts	0x0685, r18
     c12:	20 93 86 06 	sts	0x0686, r18
     c16:	30 93 86 06 	sts	0x0686, r19
     c1a:	20 93 85 06 	sts	0x0685, r18
     c1e:	20 93 86 06 	sts	0x0686, r18
     c22:	30 93 86 06 	sts	0x0686, r19
     c26:	20 93 85 06 	sts	0x0685, r18
     c2a:	30 93 86 06 	sts	0x0686, r19
     c2e:	40 93 85 06 	sts	0x0685, r20
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	94 60       	ori	r25, 0x04	; 4
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	40 93 86 06 	sts	0x0686, r20
     c3e:	30 93 81 06 	sts	0x0681, r19
     c42:	20 93 86 06 	sts	0x0686, r18
     c46:	30 93 85 06 	sts	0x0685, r19
     c4a:	20 93 85 06 	sts	0x0685, r18
     c4e:	20 93 86 06 	sts	0x0686, r18
     c52:	30 93 86 06 	sts	0x0686, r19
     c56:	20 93 85 06 	sts	0x0685, r18
     c5a:	20 93 86 06 	sts	0x0686, r18
     c5e:	30 93 86 06 	sts	0x0686, r19
     c62:	20 93 85 06 	sts	0x0685, r18
     c66:	20 93 86 06 	sts	0x0686, r18
     c6a:	90 fd       	sbrc	r25, 0
     c6c:	e7 c0       	rjmp	.+462    	; 0xe3c <ht1632c_setup+0x544>
     c6e:	30 93 86 06 	sts	0x0686, r19
     c72:	24 e0       	ldi	r18, 0x04	; 4
     c74:	20 93 85 06 	sts	0x0685, r18
     c78:	20 93 86 06 	sts	0x0686, r18
     c7c:	28 e0       	ldi	r18, 0x08	; 8
     c7e:	87 fd       	sbrc	r24, 7
     c80:	9e c0       	rjmp	.+316    	; 0xdbe <ht1632c_setup+0x4c6>
     c82:	20 93 86 06 	sts	0x0686, r18
     c86:	24 e0       	ldi	r18, 0x04	; 4
     c88:	20 93 85 06 	sts	0x0685, r18
     c8c:	20 93 86 06 	sts	0x0686, r18
     c90:	28 e0       	ldi	r18, 0x08	; 8
     c92:	86 fd       	sbrc	r24, 6
     c94:	9e c0       	rjmp	.+316    	; 0xdd2 <ht1632c_setup+0x4da>
     c96:	20 93 86 06 	sts	0x0686, r18
     c9a:	24 e0       	ldi	r18, 0x04	; 4
     c9c:	20 93 85 06 	sts	0x0685, r18
     ca0:	20 93 86 06 	sts	0x0686, r18
     ca4:	28 e0       	ldi	r18, 0x08	; 8
     ca6:	85 fd       	sbrc	r24, 5
     ca8:	9e c0       	rjmp	.+316    	; 0xde6 <ht1632c_setup+0x4ee>
     caa:	20 93 86 06 	sts	0x0686, r18
     cae:	24 e0       	ldi	r18, 0x04	; 4
     cb0:	20 93 85 06 	sts	0x0685, r18
     cb4:	20 93 86 06 	sts	0x0686, r18
     cb8:	28 e0       	ldi	r18, 0x08	; 8
     cba:	84 fd       	sbrc	r24, 4
     cbc:	9e c0       	rjmp	.+316    	; 0xdfa <ht1632c_setup+0x502>
     cbe:	20 93 86 06 	sts	0x0686, r18
     cc2:	24 e0       	ldi	r18, 0x04	; 4
     cc4:	20 93 85 06 	sts	0x0685, r18
     cc8:	20 93 86 06 	sts	0x0686, r18
     ccc:	28 e0       	ldi	r18, 0x08	; 8
     cce:	83 fd       	sbrc	r24, 3
     cd0:	9e c0       	rjmp	.+316    	; 0xe0e <ht1632c_setup+0x516>
     cd2:	20 93 86 06 	sts	0x0686, r18
     cd6:	24 e0       	ldi	r18, 0x04	; 4
     cd8:	20 93 85 06 	sts	0x0685, r18
     cdc:	20 93 86 06 	sts	0x0686, r18
     ce0:	28 e0       	ldi	r18, 0x08	; 8
     ce2:	82 fd       	sbrc	r24, 2
     ce4:	9e c0       	rjmp	.+316    	; 0xe22 <ht1632c_setup+0x52a>
     ce6:	20 93 86 06 	sts	0x0686, r18
     cea:	94 e0       	ldi	r25, 0x04	; 4
     cec:	90 93 85 06 	sts	0x0685, r25
     cf0:	90 93 86 06 	sts	0x0686, r25
     cf4:	81 fd       	sbrc	r24, 1
     cf6:	9e c0       	rjmp	.+316    	; 0xe34 <ht1632c_setup+0x53c>
     cf8:	88 e0       	ldi	r24, 0x08	; 8
     cfa:	80 93 86 06 	sts	0x0686, r24
     cfe:	84 e0       	ldi	r24, 0x04	; 4
     d00:	80 93 85 06 	sts	0x0685, r24
     d04:	80 93 86 06 	sts	0x0686, r24
     d08:	98 e0       	ldi	r25, 0x08	; 8
     d0a:	90 93 86 06 	sts	0x0686, r25
     d0e:	80 93 85 06 	sts	0x0685, r24
     d12:	90 93 86 06 	sts	0x0686, r25
     d16:	21 e0       	ldi	r18, 0x01	; 1
     d18:	20 93 85 06 	sts	0x0685, r18
     d1c:	20 93 86 06 	sts	0x0686, r18
     d20:	90 93 81 06 	sts	0x0681, r25
     d24:	80 93 86 06 	sts	0x0686, r24
     d28:	90 93 85 06 	sts	0x0685, r25
     d2c:	80 93 85 06 	sts	0x0685, r24
     d30:	80 93 86 06 	sts	0x0686, r24
     d34:	90 93 86 06 	sts	0x0686, r25
     d38:	80 93 85 06 	sts	0x0685, r24
     d3c:	80 93 86 06 	sts	0x0686, r24
     d40:	90 93 86 06 	sts	0x0686, r25
     d44:	80 93 85 06 	sts	0x0685, r24
     d48:	80 93 86 06 	sts	0x0686, r24
     d4c:	90 93 85 06 	sts	0x0685, r25
     d50:	80 93 85 06 	sts	0x0685, r24
     d54:	80 93 86 06 	sts	0x0686, r24
     d58:	90 93 86 06 	sts	0x0686, r25
     d5c:	80 93 85 06 	sts	0x0685, r24
     d60:	80 93 86 06 	sts	0x0686, r24
     d64:	90 93 85 06 	sts	0x0685, r25
     d68:	80 93 85 06 	sts	0x0685, r24
     d6c:	80 93 86 06 	sts	0x0686, r24
     d70:	90 93 86 06 	sts	0x0686, r25
     d74:	80 93 85 06 	sts	0x0685, r24
     d78:	80 93 86 06 	sts	0x0686, r24
     d7c:	90 93 86 06 	sts	0x0686, r25
     d80:	80 93 85 06 	sts	0x0685, r24
     d84:	80 93 86 06 	sts	0x0686, r24
     d88:	90 93 86 06 	sts	0x0686, r25
     d8c:	80 93 85 06 	sts	0x0685, r24
     d90:	80 93 86 06 	sts	0x0686, r24
     d94:	90 93 86 06 	sts	0x0686, r25
     d98:	80 93 85 06 	sts	0x0685, r24
     d9c:	80 93 86 06 	sts	0x0686, r24
     da0:	90 93 85 06 	sts	0x0685, r25
     da4:	80 93 85 06 	sts	0x0685, r24
     da8:	80 93 86 06 	sts	0x0686, r24
     dac:	90 93 86 06 	sts	0x0686, r25
     db0:	80 93 85 06 	sts	0x0685, r24
     db4:	90 93 86 06 	sts	0x0686, r25
     db8:	20 93 85 06 	sts	0x0685, r18
     dbc:	08 95       	ret
     dbe:	20 93 85 06 	sts	0x0685, r18
     dc2:	24 e0       	ldi	r18, 0x04	; 4
     dc4:	20 93 85 06 	sts	0x0685, r18
     dc8:	20 93 86 06 	sts	0x0686, r18
     dcc:	28 e0       	ldi	r18, 0x08	; 8
     dce:	86 ff       	sbrs	r24, 6
     dd0:	62 cf       	rjmp	.-316    	; 0xc96 <ht1632c_setup+0x39e>
     dd2:	20 93 85 06 	sts	0x0685, r18
     dd6:	24 e0       	ldi	r18, 0x04	; 4
     dd8:	20 93 85 06 	sts	0x0685, r18
     ddc:	20 93 86 06 	sts	0x0686, r18
     de0:	28 e0       	ldi	r18, 0x08	; 8
     de2:	85 ff       	sbrs	r24, 5
     de4:	62 cf       	rjmp	.-316    	; 0xcaa <ht1632c_setup+0x3b2>
     de6:	20 93 85 06 	sts	0x0685, r18
     dea:	24 e0       	ldi	r18, 0x04	; 4
     dec:	20 93 85 06 	sts	0x0685, r18
     df0:	20 93 86 06 	sts	0x0686, r18
     df4:	28 e0       	ldi	r18, 0x08	; 8
     df6:	84 ff       	sbrs	r24, 4
     df8:	62 cf       	rjmp	.-316    	; 0xcbe <ht1632c_setup+0x3c6>
     dfa:	20 93 85 06 	sts	0x0685, r18
     dfe:	24 e0       	ldi	r18, 0x04	; 4
     e00:	20 93 85 06 	sts	0x0685, r18
     e04:	20 93 86 06 	sts	0x0686, r18
     e08:	28 e0       	ldi	r18, 0x08	; 8
     e0a:	83 ff       	sbrs	r24, 3
     e0c:	62 cf       	rjmp	.-316    	; 0xcd2 <ht1632c_setup+0x3da>
     e0e:	20 93 85 06 	sts	0x0685, r18
     e12:	24 e0       	ldi	r18, 0x04	; 4
     e14:	20 93 85 06 	sts	0x0685, r18
     e18:	20 93 86 06 	sts	0x0686, r18
     e1c:	28 e0       	ldi	r18, 0x08	; 8
     e1e:	82 ff       	sbrs	r24, 2
     e20:	62 cf       	rjmp	.-316    	; 0xce6 <ht1632c_setup+0x3ee>
     e22:	20 93 85 06 	sts	0x0685, r18
     e26:	94 e0       	ldi	r25, 0x04	; 4
     e28:	90 93 85 06 	sts	0x0685, r25
     e2c:	90 93 86 06 	sts	0x0686, r25
     e30:	81 ff       	sbrs	r24, 1
     e32:	62 cf       	rjmp	.-316    	; 0xcf8 <ht1632c_setup+0x400>
     e34:	88 e0       	ldi	r24, 0x08	; 8
     e36:	80 93 85 06 	sts	0x0685, r24
     e3a:	61 cf       	rjmp	.-318    	; 0xcfe <ht1632c_setup+0x406>
     e3c:	30 93 85 06 	sts	0x0685, r19
     e40:	24 e0       	ldi	r18, 0x04	; 4
     e42:	20 93 85 06 	sts	0x0685, r18
     e46:	20 93 86 06 	sts	0x0686, r18
     e4a:	28 e0       	ldi	r18, 0x08	; 8
     e4c:	87 fd       	sbrc	r24, 7
     e4e:	b7 cf       	rjmp	.-146    	; 0xdbe <ht1632c_setup+0x4c6>
     e50:	18 cf       	rjmp	.-464    	; 0xc82 <ht1632c_setup+0x38a>

00000e52 <ht1632c_set_brightness>:
     e52:	80 31       	cpi	r24, 0x10	; 16
     e54:	08 f0       	brcs	.+2      	; 0xe58 <ht1632c_set_brightness+0x6>
     e56:	8f e0       	ldi	r24, 0x0F	; 15
     e58:	80 6a       	ori	r24, 0xA0	; 160
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	94 60       	ori	r25, 0x04	; 4
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	21 e0       	ldi	r18, 0x01	; 1
     e64:	20 93 86 06 	sts	0x0686, r18
     e68:	38 e0       	ldi	r19, 0x08	; 8
     e6a:	30 93 81 06 	sts	0x0681, r19
     e6e:	24 e0       	ldi	r18, 0x04	; 4
     e70:	20 93 86 06 	sts	0x0686, r18
     e74:	30 93 85 06 	sts	0x0685, r19
     e78:	20 93 85 06 	sts	0x0685, r18
     e7c:	20 93 86 06 	sts	0x0686, r18
     e80:	30 93 86 06 	sts	0x0686, r19
     e84:	20 93 85 06 	sts	0x0685, r18
     e88:	20 93 86 06 	sts	0x0686, r18
     e8c:	30 93 86 06 	sts	0x0686, r19
     e90:	20 93 85 06 	sts	0x0685, r18
     e94:	20 93 86 06 	sts	0x0686, r18
     e98:	30 93 85 06 	sts	0x0685, r19
     e9c:	20 93 85 06 	sts	0x0685, r18
     ea0:	20 93 86 06 	sts	0x0686, r18
     ea4:	30 93 86 06 	sts	0x0686, r19
     ea8:	20 93 85 06 	sts	0x0685, r18
     eac:	20 93 86 06 	sts	0x0686, r18
     eb0:	30 93 85 06 	sts	0x0685, r19
     eb4:	20 93 85 06 	sts	0x0685, r18
     eb8:	20 93 86 06 	sts	0x0686, r18
     ebc:	30 93 86 06 	sts	0x0686, r19
     ec0:	20 93 85 06 	sts	0x0685, r18
     ec4:	20 93 86 06 	sts	0x0686, r18
     ec8:	84 fd       	sbrc	r24, 4
     eca:	47 c0       	rjmp	.+142    	; 0xf5a <ht1632c_set_brightness+0x108>
     ecc:	30 93 86 06 	sts	0x0686, r19
     ed0:	24 e0       	ldi	r18, 0x04	; 4
     ed2:	20 93 85 06 	sts	0x0685, r18
     ed6:	20 93 86 06 	sts	0x0686, r18
     eda:	28 e0       	ldi	r18, 0x08	; 8
     edc:	83 fd       	sbrc	r24, 3
     ede:	26 c0       	rjmp	.+76     	; 0xf2c <ht1632c_set_brightness+0xda>
     ee0:	20 93 86 06 	sts	0x0686, r18
     ee4:	24 e0       	ldi	r18, 0x04	; 4
     ee6:	20 93 85 06 	sts	0x0685, r18
     eea:	20 93 86 06 	sts	0x0686, r18
     eee:	28 e0       	ldi	r18, 0x08	; 8
     ef0:	82 fd       	sbrc	r24, 2
     ef2:	26 c0       	rjmp	.+76     	; 0xf40 <ht1632c_set_brightness+0xee>
     ef4:	20 93 86 06 	sts	0x0686, r18
     ef8:	94 e0       	ldi	r25, 0x04	; 4
     efa:	90 93 85 06 	sts	0x0685, r25
     efe:	90 93 86 06 	sts	0x0686, r25
     f02:	81 fd       	sbrc	r24, 1
     f04:	26 c0       	rjmp	.+76     	; 0xf52 <ht1632c_set_brightness+0x100>
     f06:	88 e0       	ldi	r24, 0x08	; 8
     f08:	80 93 86 06 	sts	0x0686, r24
     f0c:	84 e0       	ldi	r24, 0x04	; 4
     f0e:	80 93 85 06 	sts	0x0685, r24
     f12:	80 93 86 06 	sts	0x0686, r24
     f16:	98 e0       	ldi	r25, 0x08	; 8
     f18:	90 93 86 06 	sts	0x0686, r25
     f1c:	80 93 85 06 	sts	0x0685, r24
     f20:	90 93 86 06 	sts	0x0686, r25
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	80 93 85 06 	sts	0x0685, r24
     f2a:	08 95       	ret
     f2c:	20 93 85 06 	sts	0x0685, r18
     f30:	24 e0       	ldi	r18, 0x04	; 4
     f32:	20 93 85 06 	sts	0x0685, r18
     f36:	20 93 86 06 	sts	0x0686, r18
     f3a:	28 e0       	ldi	r18, 0x08	; 8
     f3c:	82 ff       	sbrs	r24, 2
     f3e:	da cf       	rjmp	.-76     	; 0xef4 <ht1632c_set_brightness+0xa2>
     f40:	20 93 85 06 	sts	0x0685, r18
     f44:	94 e0       	ldi	r25, 0x04	; 4
     f46:	90 93 85 06 	sts	0x0685, r25
     f4a:	90 93 86 06 	sts	0x0686, r25
     f4e:	81 ff       	sbrs	r24, 1
     f50:	da cf       	rjmp	.-76     	; 0xf06 <ht1632c_set_brightness+0xb4>
     f52:	88 e0       	ldi	r24, 0x08	; 8
     f54:	80 93 85 06 	sts	0x0685, r24
     f58:	d9 cf       	rjmp	.-78     	; 0xf0c <ht1632c_set_brightness+0xba>
     f5a:	30 93 85 06 	sts	0x0685, r19
     f5e:	24 e0       	ldi	r18, 0x04	; 4
     f60:	20 93 85 06 	sts	0x0685, r18
     f64:	20 93 86 06 	sts	0x0686, r18
     f68:	28 e0       	ldi	r18, 0x08	; 8
     f6a:	83 fd       	sbrc	r24, 3
     f6c:	df cf       	rjmp	.-66     	; 0xf2c <ht1632c_set_brightness+0xda>
     f6e:	b8 cf       	rjmp	.-144    	; 0xee0 <ht1632c_set_brightness+0x8e>

00000f70 <ht1632c_refresh_screen>:
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	80 93 86 06 	sts	0x0686, r24
     f76:	98 e0       	ldi	r25, 0x08	; 8
     f78:	90 93 81 06 	sts	0x0681, r25
     f7c:	84 e0       	ldi	r24, 0x04	; 4
     f7e:	80 93 86 06 	sts	0x0686, r24
     f82:	90 93 85 06 	sts	0x0685, r25
     f86:	80 93 85 06 	sts	0x0685, r24
     f8a:	80 93 86 06 	sts	0x0686, r24
     f8e:	90 93 86 06 	sts	0x0686, r25
     f92:	80 93 85 06 	sts	0x0685, r24
     f96:	80 93 86 06 	sts	0x0686, r24
     f9a:	90 93 85 06 	sts	0x0685, r25
     f9e:	80 93 85 06 	sts	0x0685, r24
     fa2:	90 93 86 06 	sts	0x0686, r25
     fa6:	90 93 81 06 	sts	0x0681, r25
     faa:	80 93 86 06 	sts	0x0686, r24
     fae:	90 93 86 06 	sts	0x0686, r25
     fb2:	80 93 85 06 	sts	0x0685, r24
     fb6:	80 93 86 06 	sts	0x0686, r24
     fba:	90 93 86 06 	sts	0x0686, r25
     fbe:	80 93 85 06 	sts	0x0685, r24
     fc2:	80 93 86 06 	sts	0x0686, r24
     fc6:	90 93 86 06 	sts	0x0686, r25
     fca:	80 93 85 06 	sts	0x0685, r24
     fce:	80 93 86 06 	sts	0x0686, r24
     fd2:	90 93 86 06 	sts	0x0686, r25
     fd6:	80 93 85 06 	sts	0x0685, r24
     fda:	80 93 86 06 	sts	0x0686, r24
     fde:	90 93 86 06 	sts	0x0686, r25
     fe2:	80 93 85 06 	sts	0x0685, r24
     fe6:	80 93 86 06 	sts	0x0686, r24
     fea:	90 93 86 06 	sts	0x0686, r25
     fee:	80 93 85 06 	sts	0x0685, r24
     ff2:	80 93 86 06 	sts	0x0686, r24
     ff6:	90 93 86 06 	sts	0x0686, r25
     ffa:	80 93 85 06 	sts	0x0685, r24
     ffe:	90 93 86 06 	sts	0x0686, r25
    1002:	e7 e2       	ldi	r30, 0x27	; 39
    1004:	f4 e2       	ldi	r31, 0x24	; 36
    1006:	38 e0       	ldi	r19, 0x08	; 8
    1008:	24 e0       	ldi	r18, 0x04	; 4
    100a:	7c c0       	rjmp	.+248    	; 0x1104 <ht1632c_refresh_screen+0x194>
    100c:	30 93 86 06 	sts	0x0686, r19
    1010:	20 93 85 06 	sts	0x0685, r18
    1014:	20 93 86 06 	sts	0x0686, r18
    1018:	95 fd       	sbrc	r25, 5
    101a:	92 c0       	rjmp	.+292    	; 0x1140 <ht1632c_refresh_screen+0x1d0>
    101c:	30 93 86 06 	sts	0x0686, r19
    1020:	20 93 85 06 	sts	0x0685, r18
    1024:	20 93 86 06 	sts	0x0686, r18
    1028:	94 fd       	sbrc	r25, 4
    102a:	92 c0       	rjmp	.+292    	; 0x1150 <ht1632c_refresh_screen+0x1e0>
    102c:	30 93 86 06 	sts	0x0686, r19
    1030:	20 93 85 06 	sts	0x0685, r18
    1034:	20 93 86 06 	sts	0x0686, r18
    1038:	93 fd       	sbrc	r25, 3
    103a:	92 c0       	rjmp	.+292    	; 0x1160 <ht1632c_refresh_screen+0x1f0>
    103c:	30 93 86 06 	sts	0x0686, r19
    1040:	20 93 85 06 	sts	0x0685, r18
    1044:	20 93 86 06 	sts	0x0686, r18
    1048:	92 fd       	sbrc	r25, 2
    104a:	92 c0       	rjmp	.+292    	; 0x1170 <ht1632c_refresh_screen+0x200>
    104c:	30 93 86 06 	sts	0x0686, r19
    1050:	20 93 85 06 	sts	0x0685, r18
    1054:	20 93 86 06 	sts	0x0686, r18
    1058:	91 fd       	sbrc	r25, 1
    105a:	92 c0       	rjmp	.+292    	; 0x1180 <ht1632c_refresh_screen+0x210>
    105c:	30 93 86 06 	sts	0x0686, r19
    1060:	20 93 85 06 	sts	0x0685, r18
    1064:	20 93 86 06 	sts	0x0686, r18
    1068:	90 fd       	sbrc	r25, 0
    106a:	92 c0       	rjmp	.+292    	; 0x1190 <ht1632c_refresh_screen+0x220>
    106c:	30 93 86 06 	sts	0x0686, r19
    1070:	20 93 85 06 	sts	0x0685, r18
    1074:	20 93 86 06 	sts	0x0686, r18
    1078:	87 fd       	sbrc	r24, 7
    107a:	92 c0       	rjmp	.+292    	; 0x11a0 <ht1632c_refresh_screen+0x230>
    107c:	30 93 86 06 	sts	0x0686, r19
    1080:	20 93 85 06 	sts	0x0685, r18
    1084:	20 93 86 06 	sts	0x0686, r18
    1088:	86 fd       	sbrc	r24, 6
    108a:	92 c0       	rjmp	.+292    	; 0x11b0 <ht1632c_refresh_screen+0x240>
    108c:	30 93 86 06 	sts	0x0686, r19
    1090:	20 93 85 06 	sts	0x0685, r18
    1094:	20 93 86 06 	sts	0x0686, r18
    1098:	85 fd       	sbrc	r24, 5
    109a:	92 c0       	rjmp	.+292    	; 0x11c0 <ht1632c_refresh_screen+0x250>
    109c:	30 93 86 06 	sts	0x0686, r19
    10a0:	20 93 85 06 	sts	0x0685, r18
    10a4:	20 93 86 06 	sts	0x0686, r18
    10a8:	84 fd       	sbrc	r24, 4
    10aa:	92 c0       	rjmp	.+292    	; 0x11d0 <ht1632c_refresh_screen+0x260>
    10ac:	30 93 86 06 	sts	0x0686, r19
    10b0:	20 93 85 06 	sts	0x0685, r18
    10b4:	20 93 86 06 	sts	0x0686, r18
    10b8:	83 fd       	sbrc	r24, 3
    10ba:	92 c0       	rjmp	.+292    	; 0x11e0 <ht1632c_refresh_screen+0x270>
    10bc:	30 93 86 06 	sts	0x0686, r19
    10c0:	20 93 85 06 	sts	0x0685, r18
    10c4:	20 93 86 06 	sts	0x0686, r18
    10c8:	82 fd       	sbrc	r24, 2
    10ca:	92 c0       	rjmp	.+292    	; 0x11f0 <ht1632c_refresh_screen+0x280>
    10cc:	30 93 86 06 	sts	0x0686, r19
    10d0:	20 93 85 06 	sts	0x0685, r18
    10d4:	20 93 86 06 	sts	0x0686, r18
    10d8:	81 fd       	sbrc	r24, 1
    10da:	92 c0       	rjmp	.+292    	; 0x1200 <ht1632c_refresh_screen+0x290>
    10dc:	30 93 86 06 	sts	0x0686, r19
    10e0:	20 93 85 06 	sts	0x0685, r18
    10e4:	20 93 86 06 	sts	0x0686, r18
    10e8:	80 fd       	sbrc	r24, 0
    10ea:	92 c0       	rjmp	.+292    	; 0x1210 <ht1632c_refresh_screen+0x2a0>
    10ec:	30 93 86 06 	sts	0x0686, r19
    10f0:	20 93 85 06 	sts	0x0685, r18
    10f4:	30 93 86 06 	sts	0x0686, r19
    10f8:	32 96       	adiw	r30, 0x02	; 2
    10fa:	84 e2       	ldi	r24, 0x24	; 36
    10fc:	e7 34       	cpi	r30, 0x47	; 71
    10fe:	f8 07       	cpc	r31, r24
    1100:	09 f4       	brne	.+2      	; 0x1104 <ht1632c_refresh_screen+0x194>
    1102:	8c c0       	rjmp	.+280    	; 0x121c <ht1632c_refresh_screen+0x2ac>
    1104:	df 01       	movw	r26, r30
    1106:	11 97       	sbiw	r26, 0x01	; 1
    1108:	8c 91       	ld	r24, X
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	98 2f       	mov	r25, r24
    110e:	88 27       	eor	r24, r24
    1110:	40 81       	ld	r20, Z
    1112:	84 2b       	or	r24, r20
    1114:	30 93 81 06 	sts	0x0681, r19
    1118:	20 93 86 06 	sts	0x0686, r18
    111c:	97 fd       	sbrc	r25, 7
    111e:	7b c0       	rjmp	.+246    	; 0x1216 <ht1632c_refresh_screen+0x2a6>
    1120:	30 93 86 06 	sts	0x0686, r19
    1124:	20 93 85 06 	sts	0x0685, r18
    1128:	20 93 86 06 	sts	0x0686, r18
    112c:	96 ff       	sbrs	r25, 6
    112e:	6e cf       	rjmp	.-292    	; 0x100c <ht1632c_refresh_screen+0x9c>
    1130:	30 93 85 06 	sts	0x0685, r19
    1134:	20 93 85 06 	sts	0x0685, r18
    1138:	20 93 86 06 	sts	0x0686, r18
    113c:	95 ff       	sbrs	r25, 5
    113e:	6e cf       	rjmp	.-292    	; 0x101c <ht1632c_refresh_screen+0xac>
    1140:	30 93 85 06 	sts	0x0685, r19
    1144:	20 93 85 06 	sts	0x0685, r18
    1148:	20 93 86 06 	sts	0x0686, r18
    114c:	94 ff       	sbrs	r25, 4
    114e:	6e cf       	rjmp	.-292    	; 0x102c <ht1632c_refresh_screen+0xbc>
    1150:	30 93 85 06 	sts	0x0685, r19
    1154:	20 93 85 06 	sts	0x0685, r18
    1158:	20 93 86 06 	sts	0x0686, r18
    115c:	93 ff       	sbrs	r25, 3
    115e:	6e cf       	rjmp	.-292    	; 0x103c <ht1632c_refresh_screen+0xcc>
    1160:	30 93 85 06 	sts	0x0685, r19
    1164:	20 93 85 06 	sts	0x0685, r18
    1168:	20 93 86 06 	sts	0x0686, r18
    116c:	92 ff       	sbrs	r25, 2
    116e:	6e cf       	rjmp	.-292    	; 0x104c <ht1632c_refresh_screen+0xdc>
    1170:	30 93 85 06 	sts	0x0685, r19
    1174:	20 93 85 06 	sts	0x0685, r18
    1178:	20 93 86 06 	sts	0x0686, r18
    117c:	91 ff       	sbrs	r25, 1
    117e:	6e cf       	rjmp	.-292    	; 0x105c <ht1632c_refresh_screen+0xec>
    1180:	30 93 85 06 	sts	0x0685, r19
    1184:	20 93 85 06 	sts	0x0685, r18
    1188:	20 93 86 06 	sts	0x0686, r18
    118c:	90 ff       	sbrs	r25, 0
    118e:	6e cf       	rjmp	.-292    	; 0x106c <ht1632c_refresh_screen+0xfc>
    1190:	30 93 85 06 	sts	0x0685, r19
    1194:	20 93 85 06 	sts	0x0685, r18
    1198:	20 93 86 06 	sts	0x0686, r18
    119c:	87 ff       	sbrs	r24, 7
    119e:	6e cf       	rjmp	.-292    	; 0x107c <ht1632c_refresh_screen+0x10c>
    11a0:	30 93 85 06 	sts	0x0685, r19
    11a4:	20 93 85 06 	sts	0x0685, r18
    11a8:	20 93 86 06 	sts	0x0686, r18
    11ac:	86 ff       	sbrs	r24, 6
    11ae:	6e cf       	rjmp	.-292    	; 0x108c <ht1632c_refresh_screen+0x11c>
    11b0:	30 93 85 06 	sts	0x0685, r19
    11b4:	20 93 85 06 	sts	0x0685, r18
    11b8:	20 93 86 06 	sts	0x0686, r18
    11bc:	85 ff       	sbrs	r24, 5
    11be:	6e cf       	rjmp	.-292    	; 0x109c <ht1632c_refresh_screen+0x12c>
    11c0:	30 93 85 06 	sts	0x0685, r19
    11c4:	20 93 85 06 	sts	0x0685, r18
    11c8:	20 93 86 06 	sts	0x0686, r18
    11cc:	84 ff       	sbrs	r24, 4
    11ce:	6e cf       	rjmp	.-292    	; 0x10ac <ht1632c_refresh_screen+0x13c>
    11d0:	30 93 85 06 	sts	0x0685, r19
    11d4:	20 93 85 06 	sts	0x0685, r18
    11d8:	20 93 86 06 	sts	0x0686, r18
    11dc:	83 ff       	sbrs	r24, 3
    11de:	6e cf       	rjmp	.-292    	; 0x10bc <ht1632c_refresh_screen+0x14c>
    11e0:	30 93 85 06 	sts	0x0685, r19
    11e4:	20 93 85 06 	sts	0x0685, r18
    11e8:	20 93 86 06 	sts	0x0686, r18
    11ec:	82 ff       	sbrs	r24, 2
    11ee:	6e cf       	rjmp	.-292    	; 0x10cc <ht1632c_refresh_screen+0x15c>
    11f0:	30 93 85 06 	sts	0x0685, r19
    11f4:	20 93 85 06 	sts	0x0685, r18
    11f8:	20 93 86 06 	sts	0x0686, r18
    11fc:	81 ff       	sbrs	r24, 1
    11fe:	6e cf       	rjmp	.-292    	; 0x10dc <ht1632c_refresh_screen+0x16c>
    1200:	30 93 85 06 	sts	0x0685, r19
    1204:	20 93 85 06 	sts	0x0685, r18
    1208:	20 93 86 06 	sts	0x0686, r18
    120c:	80 ff       	sbrs	r24, 0
    120e:	6e cf       	rjmp	.-292    	; 0x10ec <ht1632c_refresh_screen+0x17c>
    1210:	30 93 85 06 	sts	0x0685, r19
    1214:	6d cf       	rjmp	.-294    	; 0x10f0 <ht1632c_refresh_screen+0x180>
    1216:	30 93 85 06 	sts	0x0685, r19
    121a:	84 cf       	rjmp	.-248    	; 0x1124 <ht1632c_refresh_screen+0x1b4>
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	80 93 85 06 	sts	0x0685, r24
    1222:	08 95       	ret

00001224 <ht1632c_clear_screen>:
    1224:	80 e2       	ldi	r24, 0x20	; 32
    1226:	e6 e2       	ldi	r30, 0x26	; 38
    1228:	f4 e2       	ldi	r31, 0x24	; 36
    122a:	df 01       	movw	r26, r30
    122c:	1d 92       	st	X+, r1
    122e:	8a 95       	dec	r24
    1230:	e9 f7       	brne	.-6      	; 0x122c <ht1632c_clear_screen+0x8>
    1232:	9e ce       	rjmp	.-708    	; 0xf70 <ht1632c_refresh_screen>

00001234 <ht1632c_draw_char>:
}

void ht1632c_draw_char(int16_t x, int16_t y, char c,uint16_t color, uint8_t size) {
    1234:	2f 92       	push	r2
    1236:	3f 92       	push	r3
    1238:	4f 92       	push	r4
    123a:	5f 92       	push	r5
    123c:	6f 92       	push	r6
    123e:	7f 92       	push	r7
    1240:	8f 92       	push	r8
    1242:	9f 92       	push	r9
    1244:	af 92       	push	r10
    1246:	bf 92       	push	r11
    1248:	cf 92       	push	r12
    124a:	df 92       	push	r13
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	6a 97       	sbiw	r28, 0x1a	; 26
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	6b 83       	std	Y+3, r22	; 0x03
    1264:	7c 83       	std	Y+4, r23	; 0x04
    1266:	2a 83       	std	Y+2, r18	; 0x02
    1268:	60 2e       	mov	r6, r16
    126a:	55 e0       	ldi	r21, 0x05	; 5
    126c:	45 9f       	mul	r20, r21
    126e:	90 01       	movw	r18, r0
    1270:	11 24       	eor	r1, r1
    1272:	24 50       	subi	r18, 0x04	; 4
    1274:	3e 4f       	sbci	r19, 0xFE	; 254
    1276:	2a 87       	std	Y+10, r18	; 0x0a
    1278:	3b 87       	std	Y+11, r19	; 0x0b
    127a:	8d 83       	std	Y+5, r24	; 0x05
    127c:	9e 83       	std	Y+6, r25	; 0x06
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	8c 87       	std	Y+12, r24	; 0x0c
    1284:	9d 87       	std	Y+13, r25	; 0x0d
    1286:	2d 81       	ldd	r18, Y+5	; 0x05
    1288:	3e 81       	ldd	r19, Y+6	; 0x06
    128a:	2b 5f       	subi	r18, 0xFB	; 251
    128c:	3f 4f       	sbci	r19, 0xFF	; 255
    128e:	2d 8b       	std	Y+21, r18	; 0x15
    1290:	3e 8b       	std	Y+22, r19	; 0x16
    1292:	30 2f       	mov	r19, r16
    1294:	33 0f       	add	r19, r19
    1296:	33 0f       	add	r19, r19
    1298:	33 0f       	add	r19, r19
    129a:	30 1b       	sub	r19, r16
    129c:	36 0f       	add	r19, r22
    129e:	38 8b       	std	Y+16, r19	; 0x10
		uint8_t line = pgm_read_byte(font+(c*5)+i);
		for (j = 7; j > 0; j--) {
			if (line & 0x1) {
				if (size == 1) {
					if (x+i >= 0) {
						ht1632c_draw_pixel(x+i, y+j-1, color);
    12a0:	4d 81       	ldd	r20, Y+5	; 0x05
    12a2:	49 87       	std	Y+9, r20	; 0x09
    12a4:	20 2f       	mov	r18, r16
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	2e 87       	std	Y+14, r18	; 0x0e
    12aa:	3f 87       	std	Y+15, r19	; 0x0f
    12ac:	ab 01       	movw	r20, r22
    12ae:	49 5f       	subi	r20, 0xF9	; 249
    12b0:	5f 4f       	sbci	r21, 0xFF	; 255
    12b2:	4f 8b       	std	Y+23, r20	; 0x17
    12b4:	58 8f       	std	Y+24, r21	; 0x18
    12b6:	29 e0       	ldi	r18, 0x09	; 9
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	26 1b       	sub	r18, r22
    12bc:	37 0b       	sbc	r19, r23
    12be:	29 8b       	std	Y+17, r18	; 0x11
    12c0:	3a 8b       	std	Y+18, r19	; 0x12
		return;
	}
	if (y >= HEIGHT) {
		return;
	}
	y = 15 - y;
    12c2:	0f e0       	ldi	r16, 0x0F	; 15
    12c4:	20 2e       	mov	r2, r16
    12c6:	31 2c       	mov	r3, r1

	y %= 24;
    12c8:	88 e1       	ldi	r24, 0x18	; 24
    12ca:	c8 2e       	mov	r12, r24
    12cc:	d1 2c       	mov	r13, r1
}

/*-------------------------Geometric functions----------------------------*/

void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    12ce:	44 24       	eor	r4, r4
    12d0:	43 94       	inc	r4
    12d2:	51 2c       	mov	r5, r1
    12d4:	69 82       	std	Y+1, r6	; 0x01
	
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
    12d6:	ea 85       	ldd	r30, Y+10	; 0x0a
    12d8:	fb 85       	ldd	r31, Y+11	; 0x0b
    12da:	64 90       	lpm	r6, Z
    12dc:	2d 81       	ldd	r18, Y+5	; 0x05
    12de:	3e 81       	ldd	r19, Y+6	; 0x06
    12e0:	8c 85       	ldd	r24, Y+12	; 0x0c
    12e2:	9d 85       	ldd	r25, Y+13	; 0x0d
    12e4:	28 30       	cpi	r18, 0x08	; 8
    12e6:	31 05       	cpc	r19, r1
    12e8:	0c f0       	brlt	.+2      	; 0x12ec <ht1632c_draw_char+0xb8>
    12ea:	0f 97       	sbiw	r24, 0x0f	; 15
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    12ec:	ac 01       	movw	r20, r24
    12ee:	44 0f       	add	r20, r20
    12f0:	55 1f       	adc	r21, r21
    12f2:	44 0f       	add	r20, r20
    12f4:	55 1f       	adc	r21, r21
    12f6:	44 0f       	add	r20, r20
    12f8:	55 1f       	adc	r21, r21
    12fa:	4b 8b       	std	Y+19, r20	; 0x13
    12fc:	5c 8b       	std	Y+20, r21	; 0x14
	}
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
    12fe:	f9 85       	ldd	r31, Y+9	; 0x09
    1300:	ef 2f       	mov	r30, r31
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	ef 83       	std	Y+7, r30	; 0x07
    1306:	f8 87       	std	Y+8, r31	; 0x08
    1308:	7f 01       	movw	r14, r30
    130a:	2e 85       	ldd	r18, Y+14	; 0x0e
    130c:	3f 85       	ldd	r19, Y+15	; 0x0f
    130e:	e2 0e       	add	r14, r18
    1310:	f3 1e       	adc	r15, r19
    1312:	a9 88       	ldd	r10, Y+17	; 0x11
    1314:	ba 88       	ldd	r11, Y+18	; 0x12
    1316:	0f 89       	ldd	r16, Y+23	; 0x17
    1318:	18 8d       	ldd	r17, Y+24	; 0x18
    131a:	78 88       	ldd	r7, Y+16	; 0x10
    131c:	17 c0       	rjmp	.+46     	; 0x134c <ht1632c_draw_char+0x118>
	for (i = 0; i < 5; i++) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
		for (j = 7; j > 0; j--) {
			if (line & 0x1) {
				if (size == 1) {
					if (x+i >= 0) {
    131e:	4d 81       	ldd	r20, Y+5	; 0x05
    1320:	5e 81       	ldd	r21, Y+6	; 0x06
    1322:	40 31       	cpi	r20, 0x10	; 16
    1324:	51 05       	cpc	r21, r1
    1326:	20 f4       	brcc	.+8      	; 0x1330 <ht1632c_draw_char+0xfc>
void ht1632c_draw_pixel(int x, int y, uint8_t color) {
	
	if (x >= WIDTH) {
		return;
	}
	if (y >= HEIGHT) {
    1328:	01 31       	cpi	r16, 0x11	; 17
    132a:	11 05       	cpc	r17, r1
    132c:	0c f4       	brge	.+2      	; 0x1330 <ht1632c_draw_char+0xfc>
    132e:	fc c0       	rjmp	.+504    	; 0x1528 <ht1632c_draw_char+0x2f4>
				}
				else {  // big size
					ht1632c_fill_rect(x+i*size, y+j*size, size, size, color);
				}
			}
			line >>= 1;
    1330:	66 94       	lsr	r6
    1332:	7f ef       	ldi	r23, 0xFF	; 255
    1334:	a7 1a       	sub	r10, r23
    1336:	b7 0a       	sbc	r11, r23
    1338:	01 50       	subi	r16, 0x01	; 1
    133a:	11 09       	sbc	r17, r1
    133c:	29 81       	ldd	r18, Y+1	; 0x01
    133e:	72 1a       	sub	r7, r18
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
		for (j = 7; j > 0; j--) {
    1340:	4b 81       	ldd	r20, Y+3	; 0x03
    1342:	5c 81       	ldd	r21, Y+4	; 0x04
    1344:	04 17       	cp	r16, r20
    1346:	15 07       	cpc	r17, r21
    1348:	09 f4       	brne	.+2      	; 0x134c <ht1632c_draw_char+0x118>
    134a:	bb c0       	rjmp	.+374    	; 0x14c2 <ht1632c_draw_char+0x28e>
			if (line & 0x1) {
    134c:	60 fe       	sbrs	r6, 0
    134e:	f0 cf       	rjmp	.-32     	; 0x1330 <ht1632c_draw_char+0xfc>
				if (size == 1) {
    1350:	39 81       	ldd	r19, Y+1	; 0x01
    1352:	31 30       	cpi	r19, 0x01	; 1
    1354:	21 f3       	breq	.-56     	; 0x131e <ht1632c_draw_char+0xea>
	}
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
    1356:	ef 81       	ldd	r30, Y+7	; 0x07
    1358:	f8 85       	ldd	r31, Y+8	; 0x08
    135a:	ee 15       	cp	r30, r14
    135c:	ff 05       	cpc	r31, r15
    135e:	44 f7       	brge	.-48     	; 0x1330 <ht1632c_draw_char+0xfc>
    1360:	cf 01       	movw	r24, r30
    1362:	e7 2d       	mov	r30, r7
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	2e 85       	ldd	r18, Y+14	; 0x0e
    1368:	3f 85       	ldd	r19, Y+15	; 0x0f
    136a:	2e 0f       	add	r18, r30
    136c:	3f 1f       	adc	r19, r31
    136e:	89 84       	ldd	r8, Y+9	; 0x09
		for (uint8_t j=y; j<y+h; j++) {
    1370:	e2 17       	cp	r30, r18
    1372:	f3 07       	cpc	r31, r19
    1374:	cc f4       	brge	.+50     	; 0x13a8 <ht1632c_draw_char+0x174>
		i = 256 + 7;
	}
	i -= (y % 8);

	if (x < 8) {
		x *= 2;
    1376:	ac 01       	movw	r20, r24
    1378:	44 0f       	add	r20, r20
    137a:	55 1f       	adc	r21, r21
	} else {
		x = (x-8) * 2 + 1;
    137c:	ba 01       	movw	r22, r20
    137e:	6f 50       	subi	r22, 0x0F	; 15
    1380:	71 09       	sbc	r23, r1
    1382:	88 30       	cpi	r24, 0x08	; 8
    1384:	91 05       	cpc	r25, r1
    1386:	0c f0       	brlt	.+2      	; 0x138a <ht1632c_draw_char+0x156>
    1388:	ab 01       	movw	r20, r22
	}

	i += x * 8;
    138a:	44 0f       	add	r20, r20
    138c:	55 1f       	adc	r21, r21
    138e:	44 0f       	add	r20, r20
    1390:	55 1f       	adc	r21, r21
    1392:	44 0f       	add	r20, r20
    1394:	55 1f       	adc	r21, r21
    1396:	40 97       	sbiw	r24, 0x10	; 16
    1398:	74 f0       	brlt	.+28     	; 0x13b6 <ht1632c_draw_char+0x182>
    139a:	47 2d       	mov	r20, r7
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
		for (uint8_t j=y; j<y+h; j++) {
    139c:	4f 5f       	subi	r20, 0xFF	; 255
    139e:	84 2f       	mov	r24, r20
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	82 17       	cp	r24, r18
    13a4:	93 07       	cpc	r25, r19
    13a6:	d4 f3       	brlt	.-12     	; 0x139c <ht1632c_draw_char+0x168>
	}
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
    13a8:	83 94       	inc	r8
    13aa:	88 2d       	mov	r24, r8
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	8e 15       	cp	r24, r14
    13b0:	9f 05       	cpc	r25, r15
    13b2:	f4 f2       	brlt	.-68     	; 0x1370 <ht1632c_draw_char+0x13c>
    13b4:	bd cf       	rjmp	.-134    	; 0x1330 <ht1632c_draw_char+0xfc>
    13b6:	6a 81       	ldd	r22, Y+2	; 0x02
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    13b8:	97 2c       	mov	r9, r7
    13ba:	cf 01       	movw	r24, r30
    13bc:	49 8f       	std	Y+25, r20	; 0x19
    13be:	5a 8f       	std	Y+26, r21	; 0x1a
    13c0:	66 23       	and	r22, r22
    13c2:	39 f0       	breq	.+14     	; 0x13d2 <ht1632c_draw_char+0x19e>
    13c4:	6b c0       	rjmp	.+214    	; 0x149c <ht1632c_draw_char+0x268>
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
		for (uint8_t j=y; j<y+h; j++) {
    13c6:	93 94       	inc	r9
    13c8:	89 2d       	mov	r24, r9
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	82 17       	cp	r24, r18
    13ce:	93 07       	cpc	r25, r19
    13d0:	5c f7       	brge	.-42     	; 0x13a8 <ht1632c_draw_char+0x174>
void ht1632c_draw_pixel(int x, int y, uint8_t color) {
	
	if (x >= WIDTH) {
		return;
	}
	if (y >= HEIGHT) {
    13d2:	80 31       	cpi	r24, 0x10	; 16
    13d4:	91 05       	cpc	r25, r1
    13d6:	bc f7       	brge	.-18     	; 0x13c6 <ht1632c_draw_char+0x192>
		return;
	}
	y = 15 - y;
    13d8:	d1 01       	movw	r26, r2
    13da:	a8 1b       	sub	r26, r24
    13dc:	b9 0b       	sbc	r27, r25
    13de:	cd 01       	movw	r24, r26

	y %= 24;
    13e0:	b6 01       	movw	r22, r12
    13e2:	e8 d7       	rcall	.+4048   	; 0x23b4 <__divmodhi4>

	int i;

	if (y < 8) {
    13e4:	88 30       	cpi	r24, 0x08	; 8
    13e6:	91 05       	cpc	r25, r1
    13e8:	0c f4       	brge	.+2      	; 0x13ec <ht1632c_draw_char+0x1b8>
    13ea:	5c c0       	rjmp	.+184    	; 0x14a4 <ht1632c_draw_char+0x270>
		i = 7;
	} else if (y < 16) {
    13ec:	80 31       	cpi	r24, 0x10	; 16
    13ee:	91 05       	cpc	r25, r1
    13f0:	0c f0       	brlt	.+2      	; 0x13f4 <ht1632c_draw_char+0x1c0>
    13f2:	61 c0       	rjmp	.+194    	; 0x14b6 <ht1632c_draw_char+0x282>
		i = 128 + 7;
    13f4:	47 e8       	ldi	r20, 0x87	; 135
    13f6:	50 e0       	ldi	r21, 0x00	; 0
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    13f8:	87 70       	andi	r24, 0x07	; 7
    13fa:	99 27       	eor	r25, r25
    13fc:	ba 01       	movw	r22, r20
    13fe:	68 1b       	sub	r22, r24
    1400:	79 0b       	sbc	r23, r25
    1402:	cb 01       	movw	r24, r22
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    1404:	49 8d       	ldd	r20, Y+25	; 0x19
    1406:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1408:	84 0f       	add	r24, r20
    140a:	95 1f       	adc	r25, r21
void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
}

void ht1632c_clr_pixel(uint16_t i) {
	ledmatrix[i/8] &= ~_BV(i%8);
    140c:	dc 01       	movw	r26, r24
    140e:	b6 95       	lsr	r27
    1410:	a7 95       	ror	r26
    1412:	b6 95       	lsr	r27
    1414:	a7 95       	ror	r26
    1416:	b6 95       	lsr	r27
    1418:	a7 95       	ror	r26
    141a:	aa 5d       	subi	r26, 0xDA	; 218
    141c:	bb 4d       	sbci	r27, 0xDB	; 219
    141e:	87 70       	andi	r24, 0x07	; 7
    1420:	99 27       	eor	r25, r25
    1422:	b2 01       	movw	r22, r4
    1424:	02 c0       	rjmp	.+4      	; 0x142a <ht1632c_draw_char+0x1f6>
    1426:	66 0f       	add	r22, r22
    1428:	77 1f       	adc	r23, r23
    142a:	8a 95       	dec	r24
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <ht1632c_draw_char+0x1f2>
    142e:	cb 01       	movw	r24, r22
    1430:	80 95       	com	r24
    1432:	9c 91       	ld	r25, X
    1434:	98 23       	and	r25, r24
    1436:	9c 93       	st	X, r25
    1438:	c6 cf       	rjmp	.-116    	; 0x13c6 <ht1632c_draw_char+0x192>
		return;
	}
	if (y >= HEIGHT) {
		return;
	}
	y = 15 - y;
    143a:	d1 01       	movw	r26, r2
    143c:	a8 1b       	sub	r26, r24
    143e:	b9 0b       	sbc	r27, r25
    1440:	cd 01       	movw	r24, r26

	y %= 24;
    1442:	b6 01       	movw	r22, r12
    1444:	b7 d7       	rcall	.+3950   	; 0x23b4 <__divmodhi4>

	int i;

	if (y < 8) {
    1446:	88 30       	cpi	r24, 0x08	; 8
    1448:	91 05       	cpc	r25, r1
    144a:	7c f5       	brge	.+94     	; 0x14aa <ht1632c_draw_char+0x276>
		i = 7;
    144c:	47 e0       	ldi	r20, 0x07	; 7
    144e:	50 e0       	ldi	r21, 0x00	; 0
	} else if (y < 16) {
		i = 128 + 7;
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    1450:	87 70       	andi	r24, 0x07	; 7
    1452:	99 27       	eor	r25, r25
    1454:	ba 01       	movw	r22, r20
    1456:	68 1b       	sub	r22, r24
    1458:	79 0b       	sbc	r23, r25
    145a:	cb 01       	movw	r24, r22
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    145c:	49 8d       	ldd	r20, Y+25	; 0x19
    145e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1460:	84 0f       	add	r24, r20
    1462:	95 1f       	adc	r25, r21
}

/*-------------------------Geometric functions----------------------------*/

void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    1464:	dc 01       	movw	r26, r24
    1466:	b6 95       	lsr	r27
    1468:	a7 95       	ror	r26
    146a:	b6 95       	lsr	r27
    146c:	a7 95       	ror	r26
    146e:	b6 95       	lsr	r27
    1470:	a7 95       	ror	r26
    1472:	aa 5d       	subi	r26, 0xDA	; 218
    1474:	bb 4d       	sbci	r27, 0xDB	; 219
    1476:	87 70       	andi	r24, 0x07	; 7
    1478:	99 27       	eor	r25, r25
    147a:	b2 01       	movw	r22, r4
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <ht1632c_draw_char+0x24e>
    147e:	66 0f       	add	r22, r22
    1480:	77 1f       	adc	r23, r23
    1482:	8a 95       	dec	r24
    1484:	e2 f7       	brpl	.-8      	; 0x147e <ht1632c_draw_char+0x24a>
    1486:	cb 01       	movw	r24, r22
    1488:	9c 91       	ld	r25, X
    148a:	98 2b       	or	r25, r24
    148c:	9c 93       	st	X, r25
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
		for (uint8_t j=y; j<y+h; j++) {
    148e:	93 94       	inc	r9
    1490:	89 2d       	mov	r24, r9
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	82 17       	cp	r24, r18
    1496:	93 07       	cpc	r25, r19
    1498:	0c f0       	brlt	.+2      	; 0x149c <ht1632c_draw_char+0x268>
    149a:	86 cf       	rjmp	.-244    	; 0x13a8 <ht1632c_draw_char+0x174>
void ht1632c_draw_pixel(int x, int y, uint8_t color) {
	
	if (x >= WIDTH) {
		return;
	}
	if (y >= HEIGHT) {
    149c:	80 31       	cpi	r24, 0x10	; 16
    149e:	91 05       	cpc	r25, r1
    14a0:	b4 f7       	brge	.-20     	; 0x148e <ht1632c_draw_char+0x25a>
    14a2:	cb cf       	rjmp	.-106    	; 0x143a <ht1632c_draw_char+0x206>
	y %= 24;

	int i;

	if (y < 8) {
		i = 7;
    14a4:	47 e0       	ldi	r20, 0x07	; 7
    14a6:	50 e0       	ldi	r21, 0x00	; 0
    14a8:	a7 cf       	rjmp	.-178    	; 0x13f8 <ht1632c_draw_char+0x1c4>
	} else if (y < 16) {
    14aa:	80 31       	cpi	r24, 0x10	; 16
    14ac:	91 05       	cpc	r25, r1
    14ae:	34 f4       	brge	.+12     	; 0x14bc <ht1632c_draw_char+0x288>
		i = 128 + 7;
    14b0:	47 e8       	ldi	r20, 0x87	; 135
    14b2:	50 e0       	ldi	r21, 0x00	; 0
    14b4:	cd cf       	rjmp	.-102    	; 0x1450 <ht1632c_draw_char+0x21c>
	} else {
		i = 256 + 7;
    14b6:	47 e0       	ldi	r20, 0x07	; 7
    14b8:	51 e0       	ldi	r21, 0x01	; 1
    14ba:	9e cf       	rjmp	.-196    	; 0x13f8 <ht1632c_draw_char+0x1c4>
    14bc:	47 e0       	ldi	r20, 0x07	; 7
    14be:	51 e0       	ldi	r21, 0x01	; 1
    14c0:	c7 cf       	rjmp	.-114    	; 0x1450 <ht1632c_draw_char+0x21c>
    14c2:	ea 85       	ldd	r30, Y+10	; 0x0a
    14c4:	fb 85       	ldd	r31, Y+11	; 0x0b
    14c6:	31 96       	adiw	r30, 0x01	; 1
    14c8:	ea 87       	std	Y+10, r30	; 0x0a
    14ca:	fb 87       	std	Y+11, r31	; 0x0b
    14cc:	2d 81       	ldd	r18, Y+5	; 0x05
    14ce:	3e 81       	ldd	r19, Y+6	; 0x06
    14d0:	2f 5f       	subi	r18, 0xFF	; 255
    14d2:	3f 4f       	sbci	r19, 0xFF	; 255
    14d4:	2d 83       	std	Y+5, r18	; 0x05
    14d6:	3e 83       	std	Y+6, r19	; 0x06
    14d8:	4c 85       	ldd	r20, Y+12	; 0x0c
    14da:	5d 85       	ldd	r21, Y+13	; 0x0d
    14dc:	4e 5f       	subi	r20, 0xFE	; 254
    14de:	5f 4f       	sbci	r21, 0xFF	; 255
    14e0:	4c 87       	std	Y+12, r20	; 0x0c
    14e2:	5d 87       	std	Y+13, r21	; 0x0d
    14e4:	89 85       	ldd	r24, Y+9	; 0x09
    14e6:	29 81       	ldd	r18, Y+1	; 0x01
    14e8:	82 0f       	add	r24, r18
void ht1632c_draw_char(int16_t x, int16_t y, char c,uint16_t color, uint8_t size) {
	
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
    14ea:	4d 81       	ldd	r20, Y+5	; 0x05
    14ec:	5e 81       	ldd	r21, Y+6	; 0x06
    14ee:	2d 89       	ldd	r18, Y+21	; 0x15
    14f0:	3e 89       	ldd	r19, Y+22	; 0x16
    14f2:	42 17       	cp	r20, r18
    14f4:	53 07       	cpc	r21, r19
    14f6:	11 f0       	breq	.+4      	; 0x14fc <ht1632c_draw_char+0x2c8>
    14f8:	89 87       	std	Y+9, r24	; 0x09
    14fa:	ed ce       	rjmp	.-550    	; 0x12d6 <ht1632c_draw_char+0xa2>
				}
			}
			line >>= 1;
		}
	}
}
    14fc:	6a 96       	adiw	r28, 0x1a	; 26
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	df 90       	pop	r13
    1510:	cf 90       	pop	r12
    1512:	bf 90       	pop	r11
    1514:	af 90       	pop	r10
    1516:	9f 90       	pop	r9
    1518:	8f 90       	pop	r8
    151a:	7f 90       	pop	r7
    151c:	6f 90       	pop	r6
    151e:	5f 90       	pop	r5
    1520:	4f 90       	pop	r4
    1522:	3f 90       	pop	r3
    1524:	2f 90       	pop	r2
    1526:	08 95       	ret
	if (y >= HEIGHT) {
		return;
	}
	y = 15 - y;

	y %= 24;
    1528:	c5 01       	movw	r24, r10
    152a:	b6 01       	movw	r22, r12
    152c:	43 d7       	rcall	.+3718   	; 0x23b4 <__divmodhi4>

	int i;

	if (y < 8) {
    152e:	88 30       	cpi	r24, 0x08	; 8
    1530:	91 05       	cpc	r25, r1
    1532:	74 f0       	brlt	.+28     	; 0x1550 <ht1632c_draw_char+0x31c>
		i = 7;
	} else if (y < 16) {
    1534:	80 31       	cpi	r24, 0x10	; 16
    1536:	91 05       	cpc	r25, r1
    1538:	9c f5       	brge	.+102    	; 0x15a0 <ht1632c_draw_char+0x36c>
		i = 128 + 7;
    153a:	27 e8       	ldi	r18, 0x87	; 135
    153c:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    153e:	87 70       	andi	r24, 0x07	; 7
    1540:	90 78       	andi	r25, 0x80	; 128
    1542:	97 ff       	sbrs	r25, 7
    1544:	0b c0       	rjmp	.+22     	; 0x155c <ht1632c_draw_char+0x328>
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	88 6f       	ori	r24, 0xF8	; 248
    154a:	9f 6f       	ori	r25, 0xFF	; 255
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	06 c0       	rjmp	.+12     	; 0x155c <ht1632c_draw_char+0x328>
	y %= 24;

	int i;

	if (y < 8) {
		i = 7;
    1550:	27 e0       	ldi	r18, 0x07	; 7
    1552:	30 e0       	ldi	r19, 0x00	; 0
	} else if (y < 16) {
		i = 128 + 7;
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    1554:	87 70       	andi	r24, 0x07	; 7
    1556:	90 78       	andi	r25, 0x80	; 128
    1558:	97 fd       	sbrc	r25, 7
    155a:	f5 cf       	rjmp	.-22     	; 0x1546 <ht1632c_draw_char+0x312>
    155c:	b9 01       	movw	r22, r18
    155e:	68 1b       	sub	r22, r24
    1560:	79 0b       	sbc	r23, r25
    1562:	cb 01       	movw	r24, r22
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    1564:	eb 89       	ldd	r30, Y+19	; 0x13
    1566:	fc 89       	ldd	r31, Y+20	; 0x14
    1568:	8e 0f       	add	r24, r30
    156a:	9f 1f       	adc	r25, r31

	if (color)
    156c:	2a 81       	ldd	r18, Y+2	; 0x02
}

/*-------------------------Geometric functions----------------------------*/

void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    156e:	fc 01       	movw	r30, r24
    1570:	f6 95       	lsr	r31
    1572:	e7 95       	ror	r30
    1574:	f6 95       	lsr	r31
    1576:	e7 95       	ror	r30
    1578:	f6 95       	lsr	r31
    157a:	e7 95       	ror	r30
    157c:	ea 5d       	subi	r30, 0xDA	; 218
    157e:	fb 4d       	sbci	r31, 0xDB	; 219
    1580:	87 70       	andi	r24, 0x07	; 7
    1582:	99 27       	eor	r25, r25
		x = (x-8) * 2 + 1;
	}

	i += x * 8;

	if (color)
    1584:	21 11       	cpse	r18, r1
    1586:	0f c0       	rjmp	.+30     	; 0x15a6 <ht1632c_draw_char+0x372>
void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
}

void ht1632c_clr_pixel(uint16_t i) {
	ledmatrix[i/8] &= ~_BV(i%8);
    1588:	b2 01       	movw	r22, r4
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <ht1632c_draw_char+0x35c>
    158c:	66 0f       	add	r22, r22
    158e:	77 1f       	adc	r23, r23
    1590:	8a 95       	dec	r24
    1592:	e2 f7       	brpl	.-8      	; 0x158c <ht1632c_draw_char+0x358>
    1594:	cb 01       	movw	r24, r22
    1596:	80 95       	com	r24
    1598:	90 81       	ld	r25, Z
    159a:	89 23       	and	r24, r25
    159c:	80 83       	st	Z, r24
    159e:	c8 ce       	rjmp	.-624    	; 0x1330 <ht1632c_draw_char+0xfc>
	if (y < 8) {
		i = 7;
	} else if (y < 16) {
		i = 128 + 7;
	} else {
		i = 256 + 7;
    15a0:	27 e0       	ldi	r18, 0x07	; 7
    15a2:	31 e0       	ldi	r19, 0x01	; 1
    15a4:	d7 cf       	rjmp	.-82     	; 0x1554 <ht1632c_draw_char+0x320>
}

/*-------------------------Geometric functions----------------------------*/

void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    15a6:	a2 01       	movw	r20, r4
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <ht1632c_draw_char+0x37a>
    15aa:	44 0f       	add	r20, r20
    15ac:	55 1f       	adc	r21, r21
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <ht1632c_draw_char+0x376>
    15b2:	ca 01       	movw	r24, r20
    15b4:	90 81       	ld	r25, Z
    15b6:	98 2b       	or	r25, r24
    15b8:	90 83       	st	Z, r25
    15ba:	ba ce       	rjmp	.-652    	; 0x1330 <ht1632c_draw_char+0xfc>

000015bc <main>:
	TCC1.PERL = 0x80;
	TCC1.PERH = 0x0C;
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
}

int main(void) {
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	62 97       	sbiw	r28, 0x12	; 18
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	de bf       	out	0x3e, r29	; 62
	jsmnerr_t r;
	char rx_buf[200];
	
	esp8266_status_t status;
	
	clock_setup_32_mhz();
    15ca:	b5 d8       	rcall	.-3734   	; 0x736 <clock_setup_32_mhz>
	ht1632c_setup(HT1632_COMMON_16NMOS);
    15cc:	84 e2       	ldi	r24, 0x24	; 36
    15ce:	94 d9       	rcall	.-3288   	; 0x8f8 <ht1632c_setup>
	ht1632c_set_brightness(0);
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	3f dc       	rcall	.-1922   	; 0xe52 <ht1632c_set_brightness>
	ht1632c_clear_screen();
    15d4:	27 de       	rcall	.-946    	; 0x1224 <ht1632c_clear_screen>
	
	ht1632c_draw_char(2,9,'1',1,1);
    15d6:	01 e0       	ldi	r16, 0x01	; 1
    15d8:	21 e0       	ldi	r18, 0x01	; 1
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	41 e3       	ldi	r20, 0x31	; 49
    15de:	69 e0       	ldi	r22, 0x09	; 9
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	26 de       	rcall	.-948    	; 0x1234 <ht1632c_draw_char>
	ht1632c_draw_char(9,9,'8',1,1);
    15e8:	21 e0       	ldi	r18, 0x01	; 1
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	48 e3       	ldi	r20, 0x38	; 56
    15ee:	69 e0       	ldi	r22, 0x09	; 9
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	89 e0       	ldi	r24, 0x09	; 9
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	1e de       	rcall	.-964    	; 0x1234 <ht1632c_draw_char>
	ht1632c_draw_char(2,0,'0',1,1);
    15f8:	21 e0       	ldi	r18, 0x01	; 1
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e3       	ldi	r20, 0x30	; 48
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	70 e0       	ldi	r23, 0x00	; 0
    1602:	82 e0       	ldi	r24, 0x02	; 2
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	16 de       	rcall	.-980    	; 0x1234 <ht1632c_draw_char>
	ht1632c_draw_char(9,0,'4',1,1);
    1608:	21 e0       	ldi	r18, 0x01	; 1
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	44 e3       	ldi	r20, 0x34	; 52
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	89 e0       	ldi	r24, 0x09	; 9
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e de       	rcall	.-996    	; 0x1234 <ht1632c_draw_char>
	ht1632c_refresh_screen();
    1618:	ab dc       	rcall	.-1706   	; 0xf70 <ht1632c_refresh_screen>
	
	//adc_setup();
	uart_setup();
    161a:	26 d5       	rcall	.+2636   	; 0x2068 <uart_setup>
void uart_put_char(char c);
static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) {
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    161c:	87 e0       	ldi	r24, 0x07	; 7
    161e:	80 93 a2 00 	sts	0x00A2, r24
	ht1632c_refresh_screen();
	
	//adc_setup();
	uart_setup();
	pmic_setup();
	twi_setup(&TWIC);
    1622:	80 e8       	ldi	r24, 0x80	; 128
    1624:	94 e0       	ldi	r25, 0x04	; 4
    1626:	b2 d0       	rcall	.+356    	; 0x178c <twi_setup>
	//btn_setup();
	//rtc_setup();
	//jsmn_init(&p);
	
	stdout = stdin = &mystdout;
    1628:	84 e0       	ldi	r24, 0x04	; 4
    162a:	90 e2       	ldi	r25, 0x20	; 32
    162c:	80 93 a2 24 	sts	0x24A2, r24
    1630:	90 93 a3 24 	sts	0x24A3, r25
    1634:	80 93 a4 24 	sts	0x24A4, r24
    1638:	90 93 a5 24 	sts	0x24A5, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    163c:	2f ef       	ldi	r18, 0xFF	; 255
    163e:	87 ea       	ldi	r24, 0xA7	; 167
    1640:	91 e6       	ldi	r25, 0x61	; 97
    1642:	21 50       	subi	r18, 0x01	; 1
    1644:	80 40       	sbci	r24, 0x00	; 0
    1646:	90 40       	sbci	r25, 0x00	; 0
    1648:	e1 f7       	brne	.-8      	; 0x1642 <main+0x86>
    164a:	00 c0       	rjmp	.+0      	; 0x164c <main+0x90>
    164c:	00 00       	nop
	//puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
	
	
	_delay_ms(1000);
	si114x_setup();
    164e:	e4 d4       	rcall	.+2504   	; 0x2018 <si114x_setup>
	//printf( "Key[%d]: %s\n", i, keyString );
	puts(keyString);
}

void tcc_setup(void) {
	TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	80 93 40 08 	sts	0x0840, r24
	TCC1.PERL = 0x80;
    1656:	90 e8       	ldi	r25, 0x80	; 128
    1658:	90 93 66 08 	sts	0x0866, r25
	TCC1.PERH = 0x0C;
    165c:	9c e0       	ldi	r25, 0x0C	; 12
    165e:	90 93 67 08 	sts	0x0867, r25
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
    1662:	80 93 46 08 	sts	0x0846, r24
	
	
	_delay_ms(1000);
	si114x_setup();
	tcc_setup();
	sei();
    1666:	78 94       	sei
    1668:	eb 84       	ldd	r14, Y+11	; 0x0b
    166a:	fc 84       	ldd	r15, Y+12	; 0x0c
		//si114x_get_data(&sensor_data);
		uint8_t reg0;
		//twi_read_packet(&TWIC,SI114X_ADDR,1000,REG_PS1_DATA0,reg0,1);
		reg0 = i2c_read_data(SI114X_ADDR,REG_PS1_DATA0);
		
		printf("IR: %d \r\n",sensor_data.ps1);
    166c:	01 e3       	ldi	r16, 0x31	; 49
    166e:	10 e2       	ldi	r17, 0x20	; 32
		
		//sensor_data.timestamp = counter;
		//si114x_get_data(&sensor_data);
		uint8_t reg0;
		//twi_read_packet(&TWIC,SI114X_ADDR,1000,REG_PS1_DATA0,reg0,1);
		reg0 = i2c_read_data(SI114X_ADDR,REG_PS1_DATA0);
    1670:	66 e2       	ldi	r22, 0x26	; 38
    1672:	8a e5       	ldi	r24, 0x5A	; 90
    1674:	06 d1       	rcall	.+524    	; 0x1882 <i2c_read_data>
		
		printf("IR: %d \r\n",sensor_data.ps1);
    1676:	ff 92       	push	r15
    1678:	ef 92       	push	r14
    167a:	1f 93       	push	r17
    167c:	0f 93       	push	r16
    167e:	c1 d6       	rcall	.+3458   	; 0x2402 <printf>
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	f3 cf       	rjmp	.-26     	; 0x1670 <main+0xb4>

0000168a <__vector_20>:
	}
	
}

//Used for SI114x Timestamp
ISR(TCC1_OVF_vect) {
    168a:	1f 92       	push	r1
    168c:	0f 92       	push	r0
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	0f 92       	push	r0
    1692:	11 24       	eor	r1, r1
    1694:	8f 93       	push	r24
    1696:	9f 93       	push	r25
	counter++;	
    1698:	80 91 56 24 	lds	r24, 0x2456
    169c:	90 91 57 24 	lds	r25, 0x2457
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	80 93 56 24 	sts	0x2456, r24
    16a6:	90 93 57 24 	sts	0x2457, r25
    16aa:	9f 91       	pop	r25
    16ac:	8f 91       	pop	r24
    16ae:	0f 90       	pop	r0
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	0f 90       	pop	r0
    16b4:	1f 90       	pop	r1
    16b6:	18 95       	reti

000016b8 <__vector_66>:
	} else {
		return NONE;
	}
}

ISR(PORTA_INT0_vect) {
    16b8:	1f 92       	push	r1
    16ba:	0f 92       	push	r0
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	0f 92       	push	r0
    16c0:	11 24       	eor	r1, r1
    16c2:	0b b6       	in	r0, 0x3b	; 59
    16c4:	0f 92       	push	r0
    16c6:	2f 93       	push	r18
    16c8:	3f 93       	push	r19
    16ca:	4f 93       	push	r20
    16cc:	5f 93       	push	r21
    16ce:	6f 93       	push	r22
    16d0:	7f 93       	push	r23
    16d2:	8f 93       	push	r24
    16d4:	9f 93       	push	r25
    16d6:	af 93       	push	r26
    16d8:	bf 93       	push	r27
    16da:	ef 93       	push	r30
    16dc:	ff 93       	push	r31
	ht1632c_clear_screen();
    16de:	a2 dd       	rcall	.-1212   	; 0x1224 <ht1632c_clear_screen>
    16e0:	ff 91       	pop	r31
    16e2:	ef 91       	pop	r30
    16e4:	bf 91       	pop	r27
    16e6:	af 91       	pop	r26
    16e8:	9f 91       	pop	r25
    16ea:	8f 91       	pop	r24
    16ec:	7f 91       	pop	r23
    16ee:	6f 91       	pop	r22
    16f0:	5f 91       	pop	r21
    16f2:	4f 91       	pop	r20
    16f4:	3f 91       	pop	r19
    16f6:	2f 91       	pop	r18
    16f8:	0f 90       	pop	r0
    16fa:	0b be       	out	0x3b, r0	; 59
    16fc:	0f 90       	pop	r0
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	0f 90       	pop	r0
    1702:	1f 90       	pop	r1
    1704:	18 95       	reti

00001706 <__vector_10>:
	ht1632c_draw_char(9,pos,buffer[1],1,1);
	
	ht1632c_refresh_screen();
}

ISR(RTC_OVF_vect) {
    1706:	1f 92       	push	r1
    1708:	0f 92       	push	r0
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	0f 92       	push	r0
    170e:	11 24       	eor	r1, r1
    1710:	0b b6       	in	r0, 0x3b	; 59
    1712:	0f 92       	push	r0
    1714:	2f 93       	push	r18
    1716:	3f 93       	push	r19
    1718:	4f 93       	push	r20
    171a:	8f 93       	push	r24
    171c:	9f 93       	push	r25
    171e:	af 93       	push	r26
    1720:	bf 93       	push	r27
    1722:	ef 93       	push	r30
    1724:	ff 93       	push	r31
	time.seconds++;
    1726:	ab e9       	ldi	r26, 0x9B	; 155
    1728:	b4 e2       	ldi	r27, 0x24	; 36
    172a:	3c 91       	ld	r19, X
    172c:	3f 5f       	subi	r19, 0xFF	; 255
	time.minutes += time.seconds / 60;
    172e:	89 e8       	ldi	r24, 0x89	; 137
    1730:	38 9f       	mul	r19, r24
    1732:	21 2d       	mov	r18, r1
    1734:	11 24       	eor	r1, r1
    1736:	22 95       	swap	r18
    1738:	26 95       	lsr	r18
    173a:	27 70       	andi	r18, 0x07	; 7
    173c:	ec e9       	ldi	r30, 0x9C	; 156
    173e:	f4 e2       	ldi	r31, 0x24	; 36
    1740:	90 81       	ld	r25, Z
    1742:	92 0f       	add	r25, r18
	time.seconds %= 60;
    1744:	4c e3       	ldi	r20, 0x3C	; 60
    1746:	24 9f       	mul	r18, r20
    1748:	30 19       	sub	r19, r0
    174a:	11 24       	eor	r1, r1
    174c:	3c 93       	st	X, r19
	time.hours += time.minutes / 60;
    174e:	ad e9       	ldi	r26, 0x9D	; 157
    1750:	b4 e2       	ldi	r27, 0x24	; 36
    1752:	98 9f       	mul	r25, r24
    1754:	81 2d       	mov	r24, r1
    1756:	11 24       	eor	r1, r1
    1758:	82 95       	swap	r24
    175a:	86 95       	lsr	r24
    175c:	87 70       	andi	r24, 0x07	; 7
    175e:	2c 91       	ld	r18, X
    1760:	28 0f       	add	r18, r24
    1762:	2c 93       	st	X, r18
	time.minutes %= 60;
    1764:	84 9f       	mul	r24, r20
    1766:	90 19       	sub	r25, r0
    1768:	11 24       	eor	r1, r1
    176a:	90 83       	st	Z, r25
}
    176c:	ff 91       	pop	r31
    176e:	ef 91       	pop	r30
    1770:	bf 91       	pop	r27
    1772:	af 91       	pop	r26
    1774:	9f 91       	pop	r25
    1776:	8f 91       	pop	r24
    1778:	4f 91       	pop	r20
    177a:	3f 91       	pop	r19
    177c:	2f 91       	pop	r18
    177e:	0f 90       	pop	r0
    1780:	0b be       	out	0x3b, r0	; 59
    1782:	0f 90       	pop	r0
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	0f 90       	pop	r0
    1788:	1f 90       	pop	r1
    178a:	18 95       	reti

0000178c <twi_setup>:
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    178c:	e0 e8       	ldi	r30, 0x80	; 128
    178e:	f4 e0       	ldi	r31, 0x04	; 4
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	82 83       	std	Z+2, r24	; 0x02
    1794:	92 e3       	ldi	r25, 0x32	; 50
    1796:	95 83       	std	Z+5, r25	; 0x05
    1798:	98 e0       	ldi	r25, 0x08	; 8
    179a:	91 83       	std	Z+1, r25	; 0x01
    179c:	84 83       	std	Z+4, r24	; 0x04
    179e:	08 95       	ret

000017a0 <twi_write_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    17a0:	ef 92       	push	r14
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	fc 01       	movw	r30, r24
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    17a8:	6e 7f       	andi	r22, 0xFE	; 254
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    17aa:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    17ac:	84 e6       	ldi	r24, 0x64	; 100
    17ae:	48 9f       	mul	r20, r24
    17b0:	a0 01       	movw	r20, r0
    17b2:	11 24       	eor	r1, r1
	while (timeout_remaining)
    17b4:	41 15       	cp	r20, r1
    17b6:	51 05       	cpc	r21, r1
    17b8:	81 f4       	brne	.+32     	; 0x17da <twi_write_packet+0x3a>
    17ba:	16 c0       	rjmp	.+44     	; 0x17e8 <twi_write_packet+0x48>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    17bc:	98 2f       	mov	r25, r24
    17be:	90 75       	andi	r25, 0x50	; 80
    17c0:	90 35       	cpi	r25, 0x50	; 80
    17c2:	e1 f0       	breq	.+56     	; 0x17fc <twi_write_packet+0x5c>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    17c4:	80 7c       	andi	r24, 0xC0	; 192
    17c6:	09 f5       	brne	.+66     	; 0x180a <twi_write_packet+0x6a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17c8:	83 e0       	ldi	r24, 0x03	; 3
    17ca:	8a 95       	dec	r24
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <twi_write_packet+0x2a>
    17ce:	00 00       	nop
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    17d0:	41 50       	subi	r20, 0x01	; 1
    17d2:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    17d4:	41 15       	cp	r20, r1
    17d6:	51 05       	cpc	r21, r1
    17d8:	39 f0       	breq	.+14     	; 0x17e8 <twi_write_packet+0x48>
	{
		uint8_t status = TWI->MASTER.STATUS;
    17da:	84 81       	ldd	r24, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    17dc:	98 2f       	mov	r25, r24
    17de:	98 74       	andi	r25, 0x48	; 72
    17e0:	98 34       	cpi	r25, 0x48	; 72
    17e2:	61 f7       	brne	.-40     	; 0x17bc <twi_write_packet+0x1c>
		{
			TWI->MASTER.ADDR = slave_address;
    17e4:	66 83       	std	Z+6, r22	; 0x06
    17e6:	f0 cf       	rjmp	.-32     	; 0x17c8 <twi_write_packet+0x28>
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    17e8:	84 81       	ldd	r24, Z+4	; 0x04
    17ea:	85 ff       	sbrs	r24, 5
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <twi_write_packet+0x52>


//--------------LUFA-------------------------

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    17ee:	87 e0       	ldi	r24, 0x07	; 7
    17f0:	83 83       	std	Z+3, r24	; 0x03
    17f2:	83 e0       	ldi	r24, 0x03	; 3

		twi_stop_transmission(TWI);
	}

	return error_code;
}
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ef 90       	pop	r14
    17fa:	08 95       	ret


//--------------LUFA-------------------------

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    17fc:	87 e0       	ldi	r24, 0x07	; 7
    17fe:	83 83       	std	Z+3, r24	; 0x03
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
    1800:	84 e0       	ldi	r24, 0x04	; 4

		twi_stop_transmission(TWI);
	}

	return error_code;
}
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	ef 90       	pop	r14
    1808:	08 95       	ret
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    180a:	27 83       	std	Z+7, r18	; 0x07

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    180c:	84 81       	ldd	r24, Z+4	; 0x04
    180e:	86 ff       	sbrs	r24, 6
    1810:	fd cf       	rjmp	.-6      	; 0x180c <twi_write_packet+0x6c>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    1812:	84 81       	ldd	r24, Z+4	; 0x04
    1814:	86 ff       	sbrs	r24, 6
    1816:	16 c0       	rjmp	.+44     	; 0x1844 <twi_write_packet+0xa4>
    1818:	84 81       	ldd	r24, Z+4	; 0x04
    181a:	84 fd       	sbrc	r24, 4
    181c:	13 c0       	rjmp	.+38     	; 0x1844 <twi_write_packet+0xa4>
    181e:	d8 01       	movw	r26, r16
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    1820:	ee 20       	and	r14, r14
    1822:	a9 f0       	breq	.+42     	; 0x184e <twi_write_packet+0xae>
		{
			if (!(twi_send_byte(TWI, *(data++))))
    1824:	8d 91       	ld	r24, X+
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    1826:	87 83       	std	Z+7, r24	; 0x07

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    1828:	84 81       	ldd	r24, Z+4	; 0x04
    182a:	86 ff       	sbrs	r24, 6
    182c:	fd cf       	rjmp	.-6      	; 0x1828 <twi_write_packet+0x88>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    182e:	84 81       	ldd	r24, Z+4	; 0x04
    1830:	86 ff       	sbrs	r24, 6
    1832:	04 c0       	rjmp	.+8      	; 0x183c <twi_write_packet+0x9c>
    1834:	84 81       	ldd	r24, Z+4	; 0x04
    1836:	ea 94       	dec	r14
    1838:	84 ff       	sbrs	r24, 4
    183a:	f2 cf       	rjmp	.-28     	; 0x1820 <twi_write_packet+0x80>

		while (length--)
		{
			if (!(twi_send_byte(TWI, *(data++))))
			{
				error_code = TWI_ERROR_SLAVE_NAK;
    183c:	86 e0       	ldi	r24, 0x06	; 6


//--------------LUFA-------------------------

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    183e:	97 e0       	ldi	r25, 0x07	; 7
    1840:	93 83       	std	Z+3, r25	; 0x03
    1842:	d8 cf       	rjmp	.-80     	; 0x17f4 <twi_write_packet+0x54>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    1844:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return error_code;
}
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ef 90       	pop	r14
    184c:	08 95       	ret
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	f6 cf       	rjmp	.-20     	; 0x183e <twi_write_packet+0x9e>

00001852 <i2c_write_data>:

uint8_t i2c_write_data(uint8_t slave_addr, uint8_t register_addr, uint8_t data) {
	
	TWIC.MASTER.ADDR = (slave_addr << 1);
    1852:	88 0f       	add	r24, r24
    1854:	80 93 86 04 	sts	0x0486, r24
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    1858:	80 91 84 04 	lds	r24, 0x0484
    185c:	86 ff       	sbrs	r24, 6
    185e:	fc cf       	rjmp	.-8      	; 0x1858 <i2c_write_data+0x6>
	TWIC.MASTER.DATA = register_addr;
    1860:	60 93 87 04 	sts	0x0487, r22
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    1864:	80 91 84 04 	lds	r24, 0x0484
    1868:	86 ff       	sbrs	r24, 6
    186a:	fc cf       	rjmp	.-8      	; 0x1864 <i2c_write_data+0x12>
	TWIC.MASTER.DATA = data;
    186c:	40 93 87 04 	sts	0x0487, r20
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    1870:	80 91 84 04 	lds	r24, 0x0484
    1874:	86 ff       	sbrs	r24, 6
    1876:	fc cf       	rjmp	.-8      	; 0x1870 <i2c_write_data+0x1e>
	
	TWIC.MASTER.CTRLC = 0x03; //Stop
    1878:	83 e0       	ldi	r24, 0x03	; 3
    187a:	80 93 83 04 	sts	0x0483, r24
	
	return 0;
}
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	08 95       	ret

00001882 <i2c_read_data>:

uint8_t i2c_read_data(uint8_t slave_addr, uint8_t register_addr) {
	
	uint8_t tmp;
	
	TWIC.MASTER.ADDR = (slave_addr << 1);
    1882:	98 2f       	mov	r25, r24
    1884:	99 0f       	add	r25, r25
    1886:	90 93 86 04 	sts	0x0486, r25
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    188a:	90 91 84 04 	lds	r25, 0x0484
    188e:	96 ff       	sbrs	r25, 6
    1890:	fc cf       	rjmp	.-8      	; 0x188a <i2c_read_data+0x8>
	TWIC.MASTER.DATA = register_addr;
    1892:	60 93 87 04 	sts	0x0487, r22
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    1896:	90 91 84 04 	lds	r25, 0x0484
    189a:	96 ff       	sbrs	r25, 6
    189c:	fc cf       	rjmp	.-8      	; 0x1896 <i2c_read_data+0x14>
	TWIC.MASTER.ADDR = (slave_addr << 1) | 0x01; //Send START
    189e:	88 0f       	add	r24, r24
    18a0:	81 60       	ori	r24, 0x01	; 1
    18a2:	80 93 86 04 	sts	0x0486, r24
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_RIF_bm));
    18a6:	80 91 84 04 	lds	r24, 0x0484
    18aa:	87 ff       	sbrs	r24, 7
    18ac:	fc cf       	rjmp	.-8      	; 0x18a6 <i2c_read_data+0x24>
	tmp = TWIC.MASTER.DATA;
    18ae:	80 91 87 04 	lds	r24, 0x0487
	TWIC.MASTER.CTRLC |= TWI_MASTER_ACKACT_bm; //Send NACK
    18b2:	90 91 83 04 	lds	r25, 0x0483
    18b6:	94 60       	ori	r25, 0x04	; 4
    18b8:	90 93 83 04 	sts	0x0483, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18bc:	e9 ef       	ldi	r30, 0xF9	; 249
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	31 97       	sbiw	r30, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <i2c_read_data+0x3e>
    18c4:	00 c0       	rjmp	.+0      	; 0x18c6 <i2c_read_data+0x44>
    18c6:	00 00       	nop
	
	_delay_ms(1);
	
	TWIC.MASTER.CTRLC = 0x03; //Send STOP
    18c8:	93 e0       	ldi	r25, 0x03	; 3
    18ca:	90 93 83 04 	sts	0x0483, r25
	
	return tmp;
    18ce:	08 95       	ret

000018d0 <Si114xPauseAll>:
{
    return _sendCmd(si114x_handle,0x0B);
}

s16 Si114xPauseAll(HANDLE si114x_handle)
{
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	ec 01       	movw	r28, r24
    while (1) 
    {
        // Keep sending nops until the response is zero
        while (1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    18da:	60 e2       	ldi	r22, 0x20	; 32
    18dc:	ce 01       	movw	r24, r28
    18de:	a6 d3       	rcall	.+1868   	; 0x202c <Si114xReadFromRegister>

    s16  response; 
    s16  retval; 

    // Get the response register contents
    if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    18e0:	60 e2       	ldi	r22, 0x20	; 32
    while (1) 
    {
        // Keep sending nops until the response is zero
        while (1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    18e2:	89 2b       	or	r24, r25
    18e4:	61 f5       	brne	.+88     	; 0x193e <Si114xPauseAll+0x6e>

    s16  response; 
    s16  retval; 

    // Get the response register contents
    if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    18e6:	ce 01       	movw	r24, r28
    18e8:	a1 d3       	rcall	.+1858   	; 0x202c <Si114xReadFromRegister>
    18ea:	8c 01       	movw	r16, r24
    18ec:	97 fd       	sbrc	r25, 7
    18ee:	16 c0       	rjmp	.+44     	; 0x191c <Si114xPauseAll+0x4c>
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <Si114xPauseAll+0x26>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    18f2:	97 fd       	sbrc	r25, 7
    18f4:	13 c0       	rjmp	.+38     	; 0x191c <Si114xPauseAll+0x4c>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    18f6:	60 e3       	ldi	r22, 0x30	; 48
    18f8:	ce 01       	movw	r24, r28
    18fa:	98 d3       	rcall	.+1840   	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	91 05       	cpc	r25, r1
    1900:	c1 f7       	brne	.-16     	; 0x18f2 <Si114xPauseAll+0x22>
    {
        if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

        if(command==0) break; // Skip if the command is NOP 

        retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1902:	60 e2       	ldi	r22, 0x20	; 32
    1904:	ce 01       	movw	r24, r28
    1906:	92 d3       	rcall	.+1828   	; 0x202c <Si114xReadFromRegister>
        if(retval==response) break;
    1908:	80 17       	cp	r24, r16
    190a:	91 07       	cpc	r25, r17
    190c:	39 f1       	breq	.+78     	; 0x195c <Si114xPauseAll+0x8c>
        else if(retval<0) return retval;
    190e:	97 fd       	sbrc	r25, 7
    1910:	05 c0       	rjmp	.+10     	; 0x191c <Si114xPauseAll+0x4c>
    1912:	8c 01       	movw	r16, r24
    1914:	f0 cf       	rjmp	.-32     	; 0x18f6 <Si114xPauseAll+0x26>
    while(1)
    {

        if(command==0) break; // Skip if the command is NOP

        retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1916:	60 e2       	ldi	r22, 0x20	; 32
    1918:	ce 01       	movw	r24, r28
    191a:	88 d3       	rcall	.+1808   	; 0x202c <Si114xReadFromRegister>
        _PsAlsPause(si114x_handle);

        // Wait for response
        while(1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    191c:	60 e2       	ldi	r22, 0x20	; 32
    191e:	ce 01       	movw	r24, r28
    1920:	85 d3       	rcall	.+1802   	; 0x202c <Si114xReadFromRegister>
    1922:	89 2b       	or	r24, r25
    1924:	d9 f3       	breq	.-10     	; 0x191c <Si114xPauseAll+0x4c>
                break;
        }

        // When the PsAlsPause() response is good, we expect it to be a '1'.
        if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
    1926:	60 e2       	ldi	r22, 0x20	; 32
    1928:	ce 01       	movw	r24, r28
    192a:	80 d3       	rcall	.+1792   	; 0x202c <Si114xReadFromRegister>
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	a9 f6       	brne	.-86     	; 0x18da <Si114xPauseAll+0xa>
            break;  // otherwise, start over.
    }
    return 0;
}
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	08 95       	ret

    s16  response; 
    s16  retval; 

    // Get the response register contents
    if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    193e:	ce 01       	movw	r24, r28
    1940:	75 d3       	rcall	.+1770   	; 0x202c <Si114xReadFromRegister>
    1942:	97 fd       	sbrc	r25, 7
    1944:	ca cf       	rjmp	.-108    	; 0x18da <Si114xPauseAll+0xa>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1946:	60 e3       	ldi	r22, 0x30	; 48
    1948:	ce 01       	movw	r24, r28
    194a:	70 d3       	rcall	.+1760   	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	91 05       	cpc	r25, r1
    1950:	c1 f7       	brne	.-16     	; 0x1942 <Si114xPauseAll+0x72>
        else if(retval<0) return retval;
        else response = retval;
    }

    // Send the Command
    if ((retval=Si114xWriteToRegister(si114x_handle, REG_COMMAND, command)) !=0) 
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	68 e1       	ldi	r22, 0x18	; 24
    1956:	ce 01       	movw	r24, r28
    1958:	65 d3       	rcall	.+1738   	; 0x2024 <Si114xWriteToRegister>
    195a:	bf cf       	rjmp	.-130    	; 0x18da <Si114xPauseAll+0xa>
    195c:	4b e0       	ldi	r20, 0x0B	; 11
    195e:	68 e1       	ldi	r22, 0x18	; 24
    1960:	ce 01       	movw	r24, r28
    1962:	60 d3       	rcall	.+1728   	; 0x2024 <Si114xWriteToRegister>
    1964:	89 2b       	or	r24, r25
    1966:	d1 f6       	brne	.-76     	; 0x191c <Si114xPauseAll+0x4c>
    1968:	17 fd       	sbrc	r17, 7
    196a:	d5 cf       	rjmp	.-86     	; 0x1916 <Si114xPauseAll+0x46>
    while(1)
    {

        if(command==0) break; // Skip if the command is NOP

        retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    196c:	60 e2       	ldi	r22, 0x20	; 32
    196e:	ce 01       	movw	r24, r28
    1970:	5d d3       	rcall	.+1722   	; 0x202c <Si114xReadFromRegister>
        if (retval != response) break;
    1972:	08 17       	cp	r16, r24
    1974:	19 07       	cpc	r17, r25
    1976:	d1 f3       	breq	.-12     	; 0x196c <Si114xPauseAll+0x9c>
        _PsAlsPause(si114x_handle);

        // Wait for response
        while(1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    1978:	60 e2       	ldi	r22, 0x20	; 32
    197a:	ce 01       	movw	r24, r28
    197c:	57 d3       	rcall	.+1710   	; 0x202c <Si114xReadFromRegister>
    197e:	89 2b       	or	r24, r25
    1980:	69 f2       	breq	.-102    	; 0x191c <Si114xPauseAll+0x4c>
    1982:	d1 cf       	rjmp	.-94     	; 0x1926 <Si114xPauseAll+0x56>

00001984 <si114x_reset>:
    return 0;
}


s16 si114x_reset(HANDLE si114x_handle)
{
    1984:	0f 93       	push	r16
    1986:	1f 93       	push	r17
    1988:	cf 93       	push	r28
    198a:	df 93       	push	r29
    198c:	8c 01       	movw	r16, r24
    //
    // delay_10ms();
    // delay_10ms();
    // delay_10ms();

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	68 e0       	ldi	r22, 0x08	; 8
    1992:	48 d3       	rcall	.+1680   	; 0x2024 <Si114xWriteToRegister>
    1994:	ec 01       	movw	r28, r24
    retval+=Si114xPauseAll(si114x_handle);
    1996:	c8 01       	movw	r24, r16
    1998:	9b df       	rcall	.-202    	; 0x18d0 <Si114xPauseAll>
    199a:	c8 0f       	add	r28, r24
    199c:	d9 1f       	adc	r29, r25

    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    199e:	40 e0       	ldi	r20, 0x00	; 0
    19a0:	68 e0       	ldi	r22, 0x08	; 8
    19a2:	c8 01       	movw	r24, r16
    19a4:	3f d3       	rcall	.+1662   	; 0x2024 <Si114xWriteToRegister>
    19a6:	c8 0f       	add	r28, r24
    19a8:	d9 1f       	adc	r29, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	64 e0       	ldi	r22, 0x04	; 4
    19ae:	c8 01       	movw	r24, r16
    19b0:	39 d3       	rcall	.+1650   	; 0x2024 <Si114xWriteToRegister>
    19b2:	c8 0f       	add	r28, r24
    19b4:	d9 1f       	adc	r29, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	65 e0       	ldi	r22, 0x05	; 5
    19ba:	c8 01       	movw	r24, r16
    19bc:	33 d3       	rcall	.+1638   	; 0x2024 <Si114xWriteToRegister>
    19be:	c8 0f       	add	r28, r24
    19c0:	d9 1f       	adc	r29, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	66 e0       	ldi	r22, 0x06	; 6
    19c6:	c8 01       	movw	r24, r16
    19c8:	2d d3       	rcall	.+1626   	; 0x2024 <Si114xWriteToRegister>
    19ca:	c8 0f       	add	r28, r24
    19cc:	d9 1f       	adc	r29, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	63 e0       	ldi	r22, 0x03	; 3
    19d2:	c8 01       	movw	r24, r16
    19d4:	27 d3       	rcall	.+1614   	; 0x2024 <Si114xWriteToRegister>
    19d6:	c8 0f       	add	r28, r24
    19d8:	d9 1f       	adc	r29, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
    19da:	4f ef       	ldi	r20, 0xFF	; 255
    19dc:	61 e2       	ldi	r22, 0x21	; 33
    19de:	c8 01       	movw	r24, r16
    19e0:	21 d3       	rcall	.+1602   	; 0x2024 <Si114xWriteToRegister>
    19e2:	c8 0f       	add	r28, r24
    19e4:	d9 1f       	adc	r29, r25

    // Perform the Reset Command
    retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
    19e6:	41 e0       	ldi	r20, 0x01	; 1
    19e8:	68 e1       	ldi	r22, 0x18	; 24
    19ea:	c8 01       	movw	r24, r16
    19ec:	1b d3       	rcall	.+1590   	; 0x2024 <Si114xWriteToRegister>
    19ee:	c8 0f       	add	r28, r24
    19f0:	d9 1f       	adc	r29, r25

    // Delay for 10 ms. This delay is needed to allow the Si114x
    // to perform internal reset sequence. 
    delay_10ms();
    19f2:	30 d3       	rcall	.+1632   	; 0x2054 <delay_10ms>

    // Write Hardware Key
    retval+=Si114xWriteToRegister(si114x_handle, REG_HW_KEY, HW_KEY_VAL0);
    19f4:	47 e1       	ldi	r20, 0x17	; 23
    19f6:	67 e0       	ldi	r22, 0x07	; 7
    19f8:	c8 01       	movw	r24, r16
    19fa:	14 d3       	rcall	.+1576   	; 0x2024 <Si114xWriteToRegister>

    return retval;
}
    19fc:	8c 0f       	add	r24, r28
    19fe:	9d 1f       	adc	r25, r29
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	08 95       	ret

00001a0a <si114x_init>:
	reg01 = ((u16)reg[1] << 8) | reg[0];
	sensor_data->vis = reg01;
}

s16 si114x_init(HANDLE si114x_handle)
{
    1a0a:	cf 92       	push	r12
    1a0c:	df 92       	push	r13
    1a0e:	ef 92       	push	r14
    1a10:	ff 92       	push	r15
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <si114x_init+0x12>
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	8c 01       	movw	r16, r24
	u8  code ps2ledsel     = LED2_EN;
	u8  code ps3ledsel     = LED3_EN;


	// Turn off RTC
	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,     0 );
    1a22:	40 e0       	ldi	r20, 0x00	; 0
    1a24:	68 e0       	ldi	r22, 0x08	; 8
    1a26:	fe d2       	rcall	.+1532   	; 0x2024 <Si114xWriteToRegister>
    1a28:	7c 01       	movw	r14, r24
	retval+=Si114xWriteToRegister(si114x_handle, REG_PS_RATE,       0 );
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	6a e0       	ldi	r22, 0x0A	; 10
    1a2e:	c8 01       	movw	r24, r16
    1a30:	f9 d2       	rcall	.+1522   	; 0x2024 <Si114xWriteToRegister>
    1a32:	e8 0e       	add	r14, r24
    1a34:	f9 1e       	adc	r15, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE,      0 );
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	69 e0       	ldi	r22, 0x09	; 9
    1a3a:	c8 01       	movw	r24, r16
    1a3c:	f3 d2       	rcall	.+1510   	; 0x2024 <Si114xWriteToRegister>
    1a3e:	e8 0e       	add	r14, r24
    1a40:	f9 1e       	adc	r15, r25
	//     1. Pauses all prior measurements
	//     2. Clear  i2c registers that need to be cleared
	//     3. Clears irq status to make sure INT* is negated
	//     4. Delays 10 ms
	//     5. Sends HW Key
	retval+=si114x_reset(si114x_handle);
    1a42:	c8 01       	movw	r24, r16
    1a44:	9f df       	rcall	.-194    	; 0x1984 <si114x_reset>
    1a46:	e8 0e       	add	r14, r24
    1a48:	f9 1e       	adc	r15, r25
	{
		u8 i21, i3;

		i21 = (current_LED2<<4) + current_LED1;
		i3  = current_LED3;
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_LED21, i21);
    1a4a:	4f ef       	ldi	r20, 0xFF	; 255
    1a4c:	6f e0       	ldi	r22, 0x0F	; 15
    1a4e:	c8 01       	movw	r24, r16
    1a50:	e9 d2       	rcall	.+1490   	; 0x2024 <Si114xWriteToRegister>
    1a52:	e8 0e       	add	r14, r24
    1a54:	f9 1e       	adc	r15, r25
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_LED3 , i3);
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	60 e1       	ldi	r22, 0x10	; 16
    1a5a:	c8 01       	movw	r24, r16
    1a5c:	e3 d2       	rcall	.+1478   	; 0x2024 <Si114xWriteToRegister>
    1a5e:	e8 0e       	add	r14, r24
    1a60:	f9 1e       	adc	r15, r25
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <si114x_init+0x5e>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1a64:	97 fd       	sbrc	r25, 7
    1a66:	22 c0       	rjmp	.+68     	; 0x1aac <si114x_init+0xa2>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1a68:	60 e3       	ldi	r22, 0x30	; 48
    1a6a:	c8 01       	movw	r24, r16
    1a6c:	df d2       	rcall	.+1470   	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	91 05       	cpc	r25, r1
    1a72:	c1 f7       	brne	.-16     	; 0x1a64 <si114x_init+0x5a>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1a74:	60 e2       	ldi	r22, 0x20	; 32
    1a76:	c8 01       	movw	r24, r16
    1a78:	d9 d2       	rcall	.+1458   	; 0x202c <Si114xReadFromRegister>
    1a7a:	6c 01       	movw	r12, r24

    buffer[0]= value;
    1a7c:	87 e7       	ldi	r24, 0x77	; 119
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1a80:	81 ea       	ldi	r24, 0xA1	; 161
    1a82:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1a84:	9e 01       	movw	r18, r28
    1a86:	2f 5f       	subi	r18, 0xFF	; 255
    1a88:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8a:	42 e0       	ldi	r20, 0x02	; 2
    1a8c:	67 e1       	ldi	r22, 0x17	; 23
    1a8e:	c8 01       	movw	r24, r16
    1a90:	d1 d2       	rcall	.+1442   	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	59 f4       	brne	.+22     	; 0x1aac <si114x_init+0xa2>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1a96:	60 e2       	ldi	r22, 0x20	; 32
    1a98:	c8 01       	movw	r24, r16
    1a9a:	c8 d2       	rcall	.+1424   	; 0x202c <Si114xReadFromRegister>
    1a9c:	c8 16       	cp	r12, r24
    1a9e:	d9 06       	cpc	r13, r25
    1aa0:	d1 f3       	breq	.-12     	; 0x1a96 <si114x_init+0x8c>
    1aa2:	18 16       	cp	r1, r24
    1aa4:	19 06       	cpc	r1, r25
    1aa6:	14 f4       	brge	.+4      	; 0x1aac <si114x_init+0xa2>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
	// Valid Tasks are: ALS_VIS_TASK, ALS_IR_TASK, PS1_TASK
	//                  PS2_TASK, PS3_TASK and AUX_TASK
	// However, if we are passed a 'negative' task, we will
	// turn on ALS_IR, ALS_VIS and PS1. Otherwise, we will use the
	// task list specified by the caller.
	retval+=Si114xParamSet(si114x_handle, PARAM_CH_LIST, tasklist);
    1aac:	e8 0e       	add	r14, r24
    1aae:	f9 1e       	adc	r15, r25
	
	// Set IRQ Modes and INT CFG to interrupt on every sample
	retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG, ICG_INTOE);
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	63 e0       	ldi	r22, 0x03	; 3
    1ab4:	c8 01       	movw	r24, r16
    1ab6:	b6 d2       	rcall	.+1388   	; 0x2024 <Si114xWriteToRegister>
    1ab8:	e8 0e       	add	r14, r24
    1aba:	f9 1e       	adc	r15, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE,
    1abc:	4d e1       	ldi	r20, 0x1D	; 29
    1abe:	64 e0       	ldi	r22, 0x04	; 4
    1ac0:	c8 01       	movw	r24, r16
    1ac2:	b0 d2       	rcall	.+1376   	; 0x2024 <Si114xWriteToRegister>
    1ac4:	e8 0e       	add	r14, r24
    1ac6:	f9 1e       	adc	r15, r25
	IE_ALS_EVRYSAMPLE +
	IE_PS1_EVRYSAMPLE +
	IE_PS2_EVRYSAMPLE +
	IE_PS3_EVRYSAMPLE );

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	65 e0       	ldi	r22, 0x05	; 5
    1acc:	c8 01       	movw	r24, r16
    1ace:	aa d2       	rcall	.+1364   	; 0x2024 <Si114xWriteToRegister>
    1ad0:	e8 0e       	add	r14, r24
    1ad2:	f9 1e       	adc	r15, r25
	IM1_ALS_EVRYSAMPLE +
	IM1_PS1_EVRYSAMPLE +
	IM1_PS2_EVRYSAMPLE );

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	66 e0       	ldi	r22, 0x06	; 6
    1ad8:	c8 01       	movw	r24, r16
    1ada:	a4 d2       	rcall	.+1352   	; 0x2024 <Si114xWriteToRegister>
    1adc:	e8 0e       	add	r14, r24
    1ade:	f9 1e       	adc	r15, r25
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <si114x_init+0xdc>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1ae2:	97 fd       	sbrc	r25, 7
    1ae4:	22 c0       	rjmp	.+68     	; 0x1b2a <si114x_init+0x120>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1ae6:	60 e3       	ldi	r22, 0x30	; 48
    1ae8:	c8 01       	movw	r24, r16
    1aea:	a0 d2       	rcall	.+1344   	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	91 05       	cpc	r25, r1
    1af0:	c1 f7       	brne	.-16     	; 0x1ae2 <si114x_init+0xd8>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1af2:	60 e2       	ldi	r22, 0x20	; 32
    1af4:	c8 01       	movw	r24, r16
    1af6:	9a d2       	rcall	.+1332   	; 0x202c <Si114xReadFromRegister>
    1af8:	6c 01       	movw	r12, r24

    buffer[0]= value;
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1afe:	87 ea       	ldi	r24, 0xA7	; 167
    1b00:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1b02:	9e 01       	movw	r18, r28
    1b04:	2f 5f       	subi	r18, 0xFF	; 255
    1b06:	3f 4f       	sbci	r19, 0xFF	; 255
    1b08:	42 e0       	ldi	r20, 0x02	; 2
    1b0a:	67 e1       	ldi	r22, 0x17	; 23
    1b0c:	c8 01       	movw	r24, r16
    1b0e:	92 d2       	rcall	.+1316   	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	59 f4       	brne	.+22     	; 0x1b2a <si114x_init+0x120>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1b14:	60 e2       	ldi	r22, 0x20	; 32
    1b16:	c8 01       	movw	r24, r16
    1b18:	89 d2       	rcall	.+1298   	; 0x202c <Si114xReadFromRegister>
    1b1a:	c8 16       	cp	r12, r24
    1b1c:	d9 06       	cpc	r13, r25
    1b1e:	d1 f3       	breq	.-12     	; 0x1b14 <si114x_init+0x10a>
    1b20:	18 16       	cp	r1, r24
    1b22:	19 06       	cpc	r1, r25
    1b24:	14 f4       	brge	.+4      	; 0x1b2a <si114x_init+0x120>
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
	IM1_PS2_EVRYSAMPLE );

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,
	IM2_PS3_EVRYSAMPLE);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x03*ps1pdsize);
    1b2a:	e8 0e       	add	r14, r24
    1b2c:	f9 1e       	adc	r15, r25
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <si114x_init+0x12a>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1b30:	97 fd       	sbrc	r25, 7
    1b32:	22 c0       	rjmp	.+68     	; 0x1b78 <si114x_init+0x16e>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1b34:	60 e3       	ldi	r22, 0x30	; 48
    1b36:	c8 01       	movw	r24, r16
    1b38:	79 d2       	rcall	.+1266   	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	c1 f7       	brne	.-16     	; 0x1b30 <si114x_init+0x126>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1b40:	60 e2       	ldi	r22, 0x20	; 32
    1b42:	c8 01       	movw	r24, r16
    1b44:	73 d2       	rcall	.+1254   	; 0x202c <Si114xReadFromRegister>
    1b46:	6c 01       	movw	r12, r24

    buffer[0]= value;
    1b48:	83 e0       	ldi	r24, 0x03	; 3
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1b4c:	88 ea       	ldi	r24, 0xA8	; 168
    1b4e:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1b50:	9e 01       	movw	r18, r28
    1b52:	2f 5f       	subi	r18, 0xFF	; 255
    1b54:	3f 4f       	sbci	r19, 0xFF	; 255
    1b56:	42 e0       	ldi	r20, 0x02	; 2
    1b58:	67 e1       	ldi	r22, 0x17	; 23
    1b5a:	c8 01       	movw	r24, r16
    1b5c:	6b d2       	rcall	.+1238   	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	59 f4       	brne	.+22     	; 0x1b78 <si114x_init+0x16e>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1b62:	60 e2       	ldi	r22, 0x20	; 32
    1b64:	c8 01       	movw	r24, r16
    1b66:	62 d2       	rcall	.+1220   	; 0x202c <Si114xReadFromRegister>
    1b68:	c8 16       	cp	r12, r24
    1b6a:	d9 06       	cpc	r13, r25
    1b6c:	d1 f3       	breq	.-12     	; 0x1b62 <si114x_init+0x158>
    1b6e:	18 16       	cp	r1, r24
    1b70:	19 06       	cpc	r1, r25
    1b72:	14 f4       	brge	.+4      	; 0x1b78 <si114x_init+0x16e>
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,
	IM2_PS3_EVRYSAMPLE);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x03*ps1pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x03*ps2pdsize);
    1b78:	e8 0e       	add	r14, r24
    1b7a:	f9 1e       	adc	r15, r25
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <si114x_init+0x178>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1b7e:	97 fd       	sbrc	r25, 7
    1b80:	24 c0       	rjmp	.+72     	; 0x1bca <si114x_init+0x1c0>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1b82:	60 e3       	ldi	r22, 0x30	; 48
    1b84:	c8 01       	movw	r24, r16
    1b86:	52 d2       	rcall	.+1188   	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	c1 f7       	brne	.-16     	; 0x1b7e <si114x_init+0x174>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1b8e:	60 e2       	ldi	r22, 0x20	; 32
    1b90:	c8 01       	movw	r24, r16
    1b92:	4c d2       	rcall	.+1176   	; 0x202c <Si114xReadFromRegister>
    1b94:	6c 01       	movw	r12, r24

    buffer[0]= value;
    1b96:	83 e0       	ldi	r24, 0x03	; 3
    1b98:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1b9a:	89 ea       	ldi	r24, 0xA9	; 169
    1b9c:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1b9e:	9e 01       	movw	r18, r28
    1ba0:	2f 5f       	subi	r18, 0xFF	; 255
    1ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba4:	42 e0       	ldi	r20, 0x02	; 2
    1ba6:	67 e1       	ldi	r22, 0x17	; 23
    1ba8:	c8 01       	movw	r24, r16
    1baa:	44 d2       	rcall	.+1160   	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	69 f4       	brne	.+26     	; 0x1bca <si114x_init+0x1c0>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1bb0:	60 e2       	ldi	r22, 0x20	; 32
    1bb2:	c8 01       	movw	r24, r16
    1bb4:	3b d2       	rcall	.+1142   	; 0x202c <Si114xReadFromRegister>
    1bb6:	c8 16       	cp	r12, r24
    1bb8:	d9 06       	cpc	r13, r25
    1bba:	d1 f3       	breq	.-12     	; 0x1bb0 <si114x_init+0x1a6>
    1bbc:	6c 01       	movw	r12, r24
    1bbe:	18 16       	cp	r1, r24
    1bc0:	19 06       	cpc	r1, r25
    1bc2:	24 f4       	brge	.+8      	; 0x1bcc <si114x_init+0x1c2>
    1bc4:	c1 2c       	mov	r12, r1
    1bc6:	d1 2c       	mov	r13, r1
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <si114x_init+0x1c2>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1bca:	6c 01       	movw	r12, r24
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,
	IM2_PS3_EVRYSAMPLE);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x03*ps1pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x03*ps2pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x03*ps3pdsize);
    1bcc:	ce 0c       	add	r12, r14
    1bce:	df 1c       	adc	r13, r15
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <si114x_init+0x1cc>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1bd2:	97 fd       	sbrc	r25, 7
    1bd4:	22 c0       	rjmp	.+68     	; 0x1c1a <si114x_init+0x210>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1bd6:	60 e3       	ldi	r22, 0x30	; 48
    1bd8:	c8 01       	movw	r24, r16
    1bda:	28 d2       	rcall	.+1104   	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	91 05       	cpc	r25, r1
    1be0:	c1 f7       	brne	.-16     	; 0x1bd2 <si114x_init+0x1c8>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1be2:	60 e2       	ldi	r22, 0x20	; 32
    1be4:	c8 01       	movw	r24, r16
    1be6:	22 d2       	rcall	.+1092   	; 0x202c <Si114xReadFromRegister>
    1be8:	7c 01       	movw	r14, r24

    buffer[0]= value;
    1bea:	83 e0       	ldi	r24, 0x03	; 3
    1bec:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1bee:	8e ea       	ldi	r24, 0xAE	; 174
    1bf0:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1bf2:	9e 01       	movw	r18, r28
    1bf4:	2f 5f       	subi	r18, 0xFF	; 255
    1bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf8:	42 e0       	ldi	r20, 0x02	; 2
    1bfa:	67 e1       	ldi	r22, 0x17	; 23
    1bfc:	c8 01       	movw	r24, r16
    1bfe:	1a d2       	rcall	.+1076   	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	59 f4       	brne	.+22     	; 0x1c1a <si114x_init+0x210>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1c04:	60 e2       	ldi	r22, 0x20	; 32
    1c06:	c8 01       	movw	r24, r16
    1c08:	11 d2       	rcall	.+1058   	; 0x202c <Si114xReadFromRegister>
    1c0a:	e8 16       	cp	r14, r24
    1c0c:	f9 06       	cpc	r15, r25
    1c0e:	d1 f3       	breq	.-12     	; 0x1c04 <si114x_init+0x1fa>
    1c10:	18 16       	cp	r1, r24
    1c12:	19 06       	cpc	r1, r25
    1c14:	14 f4       	brge	.+4      	; 0x1c1a <si114x_init+0x210>
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x03*ps1pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x03*ps2pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x03*ps3pdsize);

	retval+=Si114xParamSet(si114x_handle, PARAM_IR_ADC_MUX,  0x03*irpd);
    1c1a:	c8 0e       	add	r12, r24
    1c1c:	d9 1e       	adc	r13, r25
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <si114x_init+0x21a>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1c20:	97 fd       	sbrc	r25, 7
    1c22:	21 c0       	rjmp	.+66     	; 0x1c66 <si114x_init+0x25c>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1c24:	60 e3       	ldi	r22, 0x30	; 48
    1c26:	c8 01       	movw	r24, r16
    1c28:	01 d2       	rcall	.+1026   	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1c2a:	81 30       	cpi	r24, 0x01	; 1
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	c1 f7       	brne	.-16     	; 0x1c20 <si114x_init+0x216>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1c30:	60 e2       	ldi	r22, 0x20	; 32
    1c32:	c8 01       	movw	r24, r16
    1c34:	fb d1       	rcall	.+1014   	; 0x202c <Si114xReadFromRegister>
    1c36:	7c 01       	movw	r14, r24

    buffer[0]= value;
    1c38:	19 82       	std	Y+1, r1	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1c3a:	8b ea       	ldi	r24, 0xAB	; 171
    1c3c:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1c3e:	9e 01       	movw	r18, r28
    1c40:	2f 5f       	subi	r18, 0xFF	; 255
    1c42:	3f 4f       	sbci	r19, 0xFF	; 255
    1c44:	42 e0       	ldi	r20, 0x02	; 2
    1c46:	67 e1       	ldi	r22, 0x17	; 23
    1c48:	c8 01       	movw	r24, r16
    1c4a:	f4 d1       	rcall	.+1000   	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	59 f4       	brne	.+22     	; 0x1c66 <si114x_init+0x25c>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1c50:	60 e2       	ldi	r22, 0x20	; 32
    1c52:	c8 01       	movw	r24, r16
    1c54:	eb d1       	rcall	.+982    	; 0x202c <Si114xReadFromRegister>
    1c56:	e8 16       	cp	r14, r24
    1c58:	f9 06       	cpc	r15, r25
    1c5a:	d1 f3       	breq	.-12     	; 0x1c50 <si114x_init+0x246>
    1c5c:	18 16       	cp	r1, r24
    1c5e:	19 06       	cpc	r1, r25
    1c60:	14 f4       	brge	.+4      	; 0x1c66 <si114x_init+0x25c>
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x03*ps2pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x03*ps3pdsize);

	retval+=Si114xParamSet(si114x_handle, PARAM_IR_ADC_MUX,  0x03*irpd);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
    1c66:	c8 0e       	add	r12, r24
    1c68:	d9 1e       	adc	r13, r25
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <si114x_init+0x266>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1c6c:	97 fd       	sbrc	r25, 7
    1c6e:	21 c0       	rjmp	.+66     	; 0x1cb2 <si114x_init+0x2a8>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1c70:	60 e3       	ldi	r22, 0x30	; 48
    1c72:	c8 01       	movw	r24, r16
    1c74:	db d1       	rcall	.+950    	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	91 05       	cpc	r25, r1
    1c7a:	c1 f7       	brne	.-16     	; 0x1c6c <si114x_init+0x262>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1c7c:	60 e2       	ldi	r22, 0x20	; 32
    1c7e:	c8 01       	movw	r24, r16
    1c80:	d5 d1       	rcall	.+938    	; 0x202c <Si114xReadFromRegister>
    1c82:	7c 01       	movw	r14, r24

    buffer[0]= value;
    1c84:	19 82       	std	Y+1, r1	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1c86:	8e eb       	ldi	r24, 0xBE	; 190
    1c88:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1c8a:	9e 01       	movw	r18, r28
    1c8c:	2f 5f       	subi	r18, 0xFF	; 255
    1c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c90:	42 e0       	ldi	r20, 0x02	; 2
    1c92:	67 e1       	ldi	r22, 0x17	; 23
    1c94:	c8 01       	movw	r24, r16
    1c96:	ce d1       	rcall	.+924    	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	59 f4       	brne	.+22     	; 0x1cb2 <si114x_init+0x2a8>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1c9c:	60 e2       	ldi	r22, 0x20	; 32
    1c9e:	c8 01       	movw	r24, r16
    1ca0:	c5 d1       	rcall	.+906    	; 0x202c <Si114xReadFromRegister>
    1ca2:	e8 16       	cp	r14, r24
    1ca4:	f9 06       	cpc	r15, r25
    1ca6:	d1 f3       	breq	.-12     	; 0x1c9c <si114x_init+0x292>
    1ca8:	18 16       	cp	r1, r24
    1caa:	19 06       	cpc	r1, r25
    1cac:	14 f4       	brge	.+4      	; 0x1cb2 <si114x_init+0x2a8>
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x03*ps3pdsize);

	retval+=Si114xParamSet(si114x_handle, PARAM_IR_ADC_MUX,  0x03*irpd);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_GAIN, irgain);
    1cb2:	c8 0e       	add	r12, r24
    1cb4:	d9 1e       	adc	r13, r25
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <si114x_init+0x2b2>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1cb8:	97 fd       	sbrc	r25, 7
    1cba:	21 c0       	rjmp	.+66     	; 0x1cfe <si114x_init+0x2f4>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1cbc:	60 e3       	ldi	r22, 0x30	; 48
    1cbe:	c8 01       	movw	r24, r16
    1cc0:	b5 d1       	rcall	.+874    	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	c1 f7       	brne	.-16     	; 0x1cb8 <si114x_init+0x2ae>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1cc8:	60 e2       	ldi	r22, 0x20	; 32
    1cca:	c8 01       	movw	r24, r16
    1ccc:	af d1       	rcall	.+862    	; 0x202c <Si114xReadFromRegister>
    1cce:	7c 01       	movw	r14, r24

    buffer[0]= value;
    1cd0:	19 82       	std	Y+1, r1	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1cd2:	81 eb       	ldi	r24, 0xB1	; 177
    1cd4:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1cd6:	9e 01       	movw	r18, r28
    1cd8:	2f 5f       	subi	r18, 0xFF	; 255
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	42 e0       	ldi	r20, 0x02	; 2
    1cde:	67 e1       	ldi	r22, 0x17	; 23
    1ce0:	c8 01       	movw	r24, r16
    1ce2:	a8 d1       	rcall	.+848    	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	59 f4       	brne	.+22     	; 0x1cfe <si114x_init+0x2f4>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1ce8:	60 e2       	ldi	r22, 0x20	; 32
    1cea:	c8 01       	movw	r24, r16
    1cec:	9f d1       	rcall	.+830    	; 0x202c <Si114xReadFromRegister>
    1cee:	e8 16       	cp	r14, r24
    1cf0:	f9 06       	cpc	r15, r25
    1cf2:	d1 f3       	breq	.-12     	; 0x1ce8 <si114x_init+0x2de>
    1cf4:	18 16       	cp	r1, r24
    1cf6:	19 06       	cpc	r1, r25
    1cf8:	14 f4       	brge	.+4      	; 0x1cfe <si114x_init+0x2f4>
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0

	retval+=Si114xParamSet(si114x_handle, PARAM_IR_ADC_MUX,  0x03*irpd);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_GAIN, irgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_GAIN, visgain);
    1cfe:	c8 0e       	add	r12, r24
    1d00:	d9 1e       	adc	r13, r25
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <si114x_init+0x2fe>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1d04:	97 fd       	sbrc	r25, 7
    1d06:	22 c0       	rjmp	.+68     	; 0x1d4c <si114x_init+0x342>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1d08:	60 e3       	ldi	r22, 0x30	; 48
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	8f d1       	rcall	.+798    	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	91 05       	cpc	r25, r1
    1d12:	c1 f7       	brne	.-16     	; 0x1d04 <si114x_init+0x2fa>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1d14:	60 e2       	ldi	r22, 0x20	; 32
    1d16:	c8 01       	movw	r24, r16
    1d18:	89 d1       	rcall	.+786    	; 0x202c <Si114xReadFromRegister>
    1d1a:	7c 01       	movw	r14, r24

    buffer[0]= value;
    1d1c:	81 e2       	ldi	r24, 0x21	; 33
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1d20:	82 ea       	ldi	r24, 0xA2	; 162
    1d22:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1d24:	9e 01       	movw	r18, r28
    1d26:	2f 5f       	subi	r18, 0xFF	; 255
    1d28:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2a:	42 e0       	ldi	r20, 0x02	; 2
    1d2c:	67 e1       	ldi	r22, 0x17	; 23
    1d2e:	c8 01       	movw	r24, r16
    1d30:	81 d1       	rcall	.+770    	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	59 f4       	brne	.+22     	; 0x1d4c <si114x_init+0x342>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1d36:	60 e2       	ldi	r22, 0x20	; 32
    1d38:	c8 01       	movw	r24, r16
    1d3a:	78 d1       	rcall	.+752    	; 0x202c <Si114xReadFromRegister>
    1d3c:	e8 16       	cp	r14, r24
    1d3e:	f9 06       	cpc	r15, r25
    1d40:	d1 f3       	breq	.-12     	; 0x1d36 <si114x_init+0x32c>
    1d42:	18 16       	cp	r1, r24
    1d44:	19 06       	cpc	r1, r25
    1d46:	14 f4       	brge	.+4      	; 0x1d4c <si114x_init+0x342>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_GAIN, irgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_GAIN, visgain);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
    1d4c:	c8 0e       	add	r12, r24
    1d4e:	d9 1e       	adc	r13, r25
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <si114x_init+0x34c>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1d52:	97 fd       	sbrc	r25, 7
    1d54:	22 c0       	rjmp	.+68     	; 0x1d9a <si114x_init+0x390>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1d56:	60 e3       	ldi	r22, 0x30	; 48
    1d58:	c8 01       	movw	r24, r16
    1d5a:	68 d1       	rcall	.+720    	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	91 05       	cpc	r25, r1
    1d60:	c1 f7       	brne	.-16     	; 0x1d52 <si114x_init+0x348>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1d62:	60 e2       	ldi	r22, 0x20	; 32
    1d64:	c8 01       	movw	r24, r16
    1d66:	62 d1       	rcall	.+708    	; 0x202c <Si114xReadFromRegister>
    1d68:	7c 01       	movw	r14, r24

    buffer[0]= value;
    1d6a:	84 e0       	ldi	r24, 0x04	; 4
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1d6e:	83 ea       	ldi	r24, 0xA3	; 163
    1d70:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1d72:	9e 01       	movw	r18, r28
    1d74:	2f 5f       	subi	r18, 0xFF	; 255
    1d76:	3f 4f       	sbci	r19, 0xFF	; 255
    1d78:	42 e0       	ldi	r20, 0x02	; 2
    1d7a:	67 e1       	ldi	r22, 0x17	; 23
    1d7c:	c8 01       	movw	r24, r16
    1d7e:	5a d1       	rcall	.+692    	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	59 f4       	brne	.+22     	; 0x1d9a <si114x_init+0x390>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1d84:	60 e2       	ldi	r22, 0x20	; 32
    1d86:	c8 01       	movw	r24, r16
    1d88:	51 d1       	rcall	.+674    	; 0x202c <Si114xReadFromRegister>
    1d8a:	e8 16       	cp	r14, r24
    1d8c:	f9 06       	cpc	r15, r25
    1d8e:	d1 f3       	breq	.-12     	; 0x1d84 <si114x_init+0x37a>
    1d90:	18 16       	cp	r1, r24
    1d92:	19 06       	cpc	r1, r25
    1d94:	14 f4       	brge	.+4      	; 0x1d9a <si114x_init+0x390>
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_GAIN, irgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_GAIN, visgain);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED3_SELECT,  ps3ledsel);
    1d9a:	c8 0e       	add	r12, r24
    1d9c:	d9 1e       	adc	r13, r25
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <si114x_init+0x39a>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1da0:	97 fd       	sbrc	r25, 7
    1da2:	22 c0       	rjmp	.+68     	; 0x1de8 <si114x_init+0x3de>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1da4:	60 e3       	ldi	r22, 0x30	; 48
    1da6:	c8 01       	movw	r24, r16
    1da8:	41 d1       	rcall	.+642    	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	91 05       	cpc	r25, r1
    1dae:	c1 f7       	brne	.-16     	; 0x1da0 <si114x_init+0x396>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1db0:	60 e2       	ldi	r22, 0x20	; 32
    1db2:	c8 01       	movw	r24, r16
    1db4:	3b d1       	rcall	.+630    	; 0x202c <Si114xReadFromRegister>
    1db6:	7c 01       	movw	r14, r24

    buffer[0]= value;
    1db8:	80 e7       	ldi	r24, 0x70	; 112
    1dba:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1dbc:	8a ea       	ldi	r24, 0xAA	; 170
    1dbe:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1dc0:	9e 01       	movw	r18, r28
    1dc2:	2f 5f       	subi	r18, 0xFF	; 255
    1dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc6:	42 e0       	ldi	r20, 0x02	; 2
    1dc8:	67 e1       	ldi	r22, 0x17	; 23
    1dca:	c8 01       	movw	r24, r16
    1dcc:	33 d1       	rcall	.+614    	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	59 f4       	brne	.+22     	; 0x1de8 <si114x_init+0x3de>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1dd2:	60 e2       	ldi	r22, 0x20	; 32
    1dd4:	c8 01       	movw	r24, r16
    1dd6:	2a d1       	rcall	.+596    	; 0x202c <Si114xReadFromRegister>
    1dd8:	e8 16       	cp	r14, r24
    1dda:	f9 06       	cpc	r15, r25
    1ddc:	d1 f3       	breq	.-12     	; 0x1dd2 <si114x_init+0x3c8>
    1dde:	18 16       	cp	r1, r24
    1de0:	19 06       	cpc	r1, r25
    1de2:	14 f4       	brge	.+4      	; 0x1de8 <si114x_init+0x3de>
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_GAIN, visgain);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED3_SELECT,  ps3ledsel);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
    1de8:	c8 0e       	add	r12, r24
    1dea:	d9 1e       	adc	r13, r25
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <si114x_init+0x3e8>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1dee:	97 fd       	sbrc	r25, 7
    1df0:	22 c0       	rjmp	.+68     	; 0x1e36 <si114x_init+0x42c>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1df2:	60 e3       	ldi	r22, 0x30	; 48
    1df4:	c8 01       	movw	r24, r16
    1df6:	1a d1       	rcall	.+564    	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	c1 f7       	brne	.-16     	; 0x1dee <si114x_init+0x3e4>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1dfe:	60 e2       	ldi	r22, 0x20	; 32
    1e00:	c8 01       	movw	r24, r16
    1e02:	14 d1       	rcall	.+552    	; 0x202c <Si114xReadFromRegister>
    1e04:	7c 01       	movw	r14, r24

    buffer[0]= value;
    1e06:	80 e7       	ldi	r24, 0x70	; 112
    1e08:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1e0a:	8d eb       	ldi	r24, 0xBD	; 189
    1e0c:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1e0e:	9e 01       	movw	r18, r28
    1e10:	2f 5f       	subi	r18, 0xFF	; 255
    1e12:	3f 4f       	sbci	r19, 0xFF	; 255
    1e14:	42 e0       	ldi	r20, 0x02	; 2
    1e16:	67 e1       	ldi	r22, 0x17	; 23
    1e18:	c8 01       	movw	r24, r16
    1e1a:	0c d1       	rcall	.+536    	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	59 f4       	brne	.+22     	; 0x1e36 <si114x_init+0x42c>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1e20:	60 e2       	ldi	r22, 0x20	; 32
    1e22:	c8 01       	movw	r24, r16
    1e24:	03 d1       	rcall	.+518    	; 0x202c <Si114xReadFromRegister>
    1e26:	e8 16       	cp	r14, r24
    1e28:	f9 06       	cpc	r15, r25
    1e2a:	d1 f3       	breq	.-12     	; 0x1e20 <si114x_init+0x416>
    1e2c:	18 16       	cp	r1, r24
    1e2e:	19 06       	cpc	r1, r25
    1e30:	14 f4       	brge	.+4      	; 0x1e36 <si114x_init+0x42c>
    1e32:	80 e0       	ldi	r24, 0x00	; 0
    1e34:	90 e0       	ldi	r25, 0x00	; 0
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED3_SELECT,  ps3ledsel);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
    1e36:	c8 0e       	add	r12, r24
    1e38:	d9 1e       	adc	r13, r25
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <si114x_init+0x436>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1e3c:	97 fd       	sbrc	r25, 7
    1e3e:	22 c0       	rjmp	.+68     	; 0x1e84 <si114x_init+0x47a>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1e40:	60 e3       	ldi	r22, 0x30	; 48
    1e42:	c8 01       	movw	r24, r16
    1e44:	f3 d0       	rcall	.+486    	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	91 05       	cpc	r25, r1
    1e4a:	c1 f7       	brne	.-16     	; 0x1e3c <si114x_init+0x432>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1e4c:	60 e2       	ldi	r22, 0x20	; 32
    1e4e:	c8 01       	movw	r24, r16
    1e50:	ed d0       	rcall	.+474    	; 0x202c <Si114xReadFromRegister>
    1e52:	7c 01       	movw	r14, r24

    buffer[0]= value;
    1e54:	80 e7       	ldi	r24, 0x70	; 112
    1e56:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1e58:	80 eb       	ldi	r24, 0xB0	; 176
    1e5a:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1e5c:	9e 01       	movw	r18, r28
    1e5e:	2f 5f       	subi	r18, 0xFF	; 255
    1e60:	3f 4f       	sbci	r19, 0xFF	; 255
    1e62:	42 e0       	ldi	r20, 0x02	; 2
    1e64:	67 e1       	ldi	r22, 0x17	; 23
    1e66:	c8 01       	movw	r24, r16
    1e68:	e5 d0       	rcall	.+458    	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	59 f4       	brne	.+22     	; 0x1e84 <si114x_init+0x47a>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1e6e:	60 e2       	ldi	r22, 0x20	; 32
    1e70:	c8 01       	movw	r24, r16
    1e72:	dc d0       	rcall	.+440    	; 0x202c <Si114xReadFromRegister>
    1e74:	e8 16       	cp	r14, r24
    1e76:	f9 06       	cpc	r15, r25
    1e78:	d1 f3       	breq	.-12     	; 0x1e6e <si114x_init+0x464>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	19 06       	cpc	r1, r25
    1e7e:	14 f4       	brge	.+4      	; 0x1e84 <si114x_init+0x47a>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED3_SELECT,  ps3ledsel);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_COUNTER, RECCNT_511);
    1e84:	c8 0e       	add	r12, r24
    1e86:	d9 1e       	adc	r13, r25
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <si114x_init+0x484>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1e8a:	97 fd       	sbrc	r25, 7
    1e8c:	22 c0       	rjmp	.+68     	; 0x1ed2 <si114x_init+0x4c8>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1e8e:	60 e3       	ldi	r22, 0x30	; 48
    1e90:	c8 01       	movw	r24, r16
    1e92:	cc d0       	rcall	.+408    	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	91 05       	cpc	r25, r1
    1e98:	c1 f7       	brne	.-16     	; 0x1e8a <si114x_init+0x480>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1e9a:	60 e2       	ldi	r22, 0x20	; 32
    1e9c:	c8 01       	movw	r24, r16
    1e9e:	c6 d0       	rcall	.+396    	; 0x202c <Si114xReadFromRegister>
    1ea0:	7c 01       	movw	r14, r24

    buffer[0]= value;
    1ea2:	84 e0       	ldi	r24, 0x04	; 4
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1ea6:	8c ea       	ldi	r24, 0xAC	; 172
    1ea8:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1eaa:	9e 01       	movw	r18, r28
    1eac:	2f 5f       	subi	r18, 0xFF	; 255
    1eae:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb0:	42 e0       	ldi	r20, 0x02	; 2
    1eb2:	67 e1       	ldi	r22, 0x17	; 23
    1eb4:	c8 01       	movw	r24, r16
    1eb6:	be d0       	rcall	.+380    	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	59 f4       	brne	.+22     	; 0x1ed2 <si114x_init+0x4c8>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1ebc:	60 e2       	ldi	r22, 0x20	; 32
    1ebe:	c8 01       	movw	r24, r16
    1ec0:	b5 d0       	rcall	.+362    	; 0x202c <Si114xReadFromRegister>
    1ec2:	e8 16       	cp	r14, r24
    1ec4:	f9 06       	cpc	r15, r25
    1ec6:	d1 f3       	breq	.-12     	; 0x1ebc <si114x_init+0x4b2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	19 06       	cpc	r1, r25
    1ecc:	14 f4       	brge	.+4      	; 0x1ed2 <si114x_init+0x4c8>
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_COUNTER, RECCNT_511);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC,     RANGE_EN*psrange + PS_MEAS_MODE);
    1ed2:	c8 0e       	add	r12, r24
    1ed4:	d9 1e       	adc	r13, r25
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <si114x_init+0x4d2>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1ed8:	97 fd       	sbrc	r25, 7
    1eda:	22 c0       	rjmp	.+68     	; 0x1f20 <si114x_init+0x516>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1edc:	60 e3       	ldi	r22, 0x30	; 48
    1ede:	c8 01       	movw	r24, r16
    1ee0:	a5 d0       	rcall	.+330    	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1ee2:	81 30       	cpi	r24, 0x01	; 1
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	c1 f7       	brne	.-16     	; 0x1ed8 <si114x_init+0x4ce>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1ee8:	60 e2       	ldi	r22, 0x20	; 32
    1eea:	c8 01       	movw	r24, r16
    1eec:	9f d0       	rcall	.+318    	; 0x202c <Si114xReadFromRegister>
    1eee:	7c 01       	movw	r14, r24

    buffer[0]= value;
    1ef0:	80 e2       	ldi	r24, 0x20	; 32
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1ef4:	8f eb       	ldi	r24, 0xBF	; 191
    1ef6:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1ef8:	9e 01       	movw	r18, r28
    1efa:	2f 5f       	subi	r18, 0xFF	; 255
    1efc:	3f 4f       	sbci	r19, 0xFF	; 255
    1efe:	42 e0       	ldi	r20, 0x02	; 2
    1f00:	67 e1       	ldi	r22, 0x17	; 23
    1f02:	c8 01       	movw	r24, r16
    1f04:	97 d0       	rcall	.+302    	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	59 f4       	brne	.+22     	; 0x1f20 <si114x_init+0x516>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1f0a:	60 e2       	ldi	r22, 0x20	; 32
    1f0c:	c8 01       	movw	r24, r16
    1f0e:	8e d0       	rcall	.+284    	; 0x202c <Si114xReadFromRegister>
    1f10:	e8 16       	cp	r14, r24
    1f12:	f9 06       	cpc	r15, r25
    1f14:	d1 f3       	breq	.-12     	; 0x1f0a <si114x_init+0x500>
    1f16:	18 16       	cp	r1, r24
    1f18:	19 06       	cpc	r1, r25
    1f1a:	14 f4       	brge	.+4      	; 0x1f20 <si114x_init+0x516>
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_COUNTER, RECCNT_511);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC,     RANGE_EN*psrange + PS_MEAS_MODE);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN*irrange );
    1f20:	c8 0e       	add	r12, r24
    1f22:	d9 1e       	adc	r13, r25
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <si114x_init+0x520>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1f26:	97 fd       	sbrc	r25, 7
    1f28:	22 c0       	rjmp	.+68     	; 0x1f6e <si114x_init+0x564>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1f2a:	60 e3       	ldi	r22, 0x30	; 48
    1f2c:	c8 01       	movw	r24, r16
    1f2e:	7e d0       	rcall	.+252    	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	91 05       	cpc	r25, r1
    1f34:	c1 f7       	brne	.-16     	; 0x1f26 <si114x_init+0x51c>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1f36:	60 e2       	ldi	r22, 0x20	; 32
    1f38:	c8 01       	movw	r24, r16
    1f3a:	78 d0       	rcall	.+240    	; 0x202c <Si114xReadFromRegister>
    1f3c:	7c 01       	movw	r14, r24

    buffer[0]= value;
    1f3e:	80 e2       	ldi	r24, 0x20	; 32
    1f40:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    1f42:	82 eb       	ldi	r24, 0xB2	; 178
    1f44:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1f46:	9e 01       	movw	r18, r28
    1f48:	2f 5f       	subi	r18, 0xFF	; 255
    1f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4c:	42 e0       	ldi	r20, 0x02	; 2
    1f4e:	67 e1       	ldi	r22, 0x17	; 23
    1f50:	c8 01       	movw	r24, r16
    1f52:	70 d0       	rcall	.+224    	; 0x2034 <Si114xBlockWrite>
    if (retval != 0) return retval;
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	59 f4       	brne	.+22     	; 0x1f6e <si114x_init+0x564>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1f58:	60 e2       	ldi	r22, 0x20	; 32
    1f5a:	c8 01       	movw	r24, r16
    1f5c:	67 d0       	rcall	.+206    	; 0x202c <Si114xReadFromRegister>
    1f5e:	e8 16       	cp	r14, r24
    1f60:	f9 06       	cpc	r15, r25
    1f62:	d1 f3       	breq	.-12     	; 0x1f58 <si114x_init+0x54e>
    1f64:	18 16       	cp	r1, r24
    1f66:	19 06       	cpc	r1, r25
    1f68:	14 f4       	brge	.+4      	; 0x1f6e <si114x_init+0x564>
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_COUNTER, RECCNT_511);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC,     RANGE_EN*psrange + PS_MEAS_MODE);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN*irrange );
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_MISC,RANGE_EN*visrange);
    1f6e:	c8 0e       	add	r12, r24
    1f70:	d9 1e       	adc	r13, r25
		//    0xa0 = Device Wakes up every ~30 ms
		//    0x94 = Device Wakes up every ~20 ms
		//    0x84 = Device Wakes up every ~10 ms
		//    0xB9 = Device Wakes up every ~100 ms
		//    0xFF = Device Wakes up every ~2 sec
		retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE, measrate);
    1f72:	40 e6       	ldi	r20, 0x60	; 96
    1f74:	68 e0       	ldi	r22, 0x08	; 8
    1f76:	c8 01       	movw	r24, r16
    1f78:	55 d0       	rcall	.+170    	; 0x2024 <Si114xWriteToRegister>
    1f7a:	c8 0e       	add	r12, r24
    1f7c:	d9 1e       	adc	r13, r25

		// if 0x08, PS1, PS2 and PS3 made every time device wakes up.
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_RATE,   psrate);
    1f7e:	48 e0       	ldi	r20, 0x08	; 8
    1f80:	6a e0       	ldi	r22, 0x0A	; 10
    1f82:	c8 01       	movw	r24, r16
    1f84:	4f d0       	rcall	.+158    	; 0x2024 <Si114xWriteToRegister>
    1f86:	c8 0e       	add	r12, r24
    1f88:	d9 1e       	adc	r13, r25

		// if 0x08, VIS, IR, AUX Measurements every time device wakes up.
		retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE,  alsrate);
    1f8a:	48 e0       	ldi	r20, 0x08	; 8
    1f8c:	69 e0       	ldi	r22, 0x09	; 9
    1f8e:	c8 01       	movw	r24, r16
    1f90:	49 d0       	rcall	.+146    	; 0x2024 <Si114xWriteToRegister>
    1f92:	c8 0e       	add	r12, r24
    1f94:	d9 1e       	adc	r13, r25

    s16  response; 
    s16  retval; 

    // Get the response register contents
    if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    1f96:	60 e2       	ldi	r22, 0x20	; 32
    1f98:	c8 01       	movw	r24, r16
    1f9a:	48 d0       	rcall	.+144    	; 0x202c <Si114xReadFromRegister>
    1f9c:	7c 01       	movw	r14, r24
    1f9e:	97 fd       	sbrc	r25, 7
    1fa0:	2e c0       	rjmp	.+92     	; 0x1ffe <si114x_init+0x5f4>
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <si114x_init+0x59e>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    1fa4:	97 fd       	sbrc	r25, 7
    1fa6:	16 c0       	rjmp	.+44     	; 0x1fd4 <si114x_init+0x5ca>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1fa8:	60 e3       	ldi	r22, 0x30	; 48
    1faa:	c8 01       	movw	r24, r16
    1fac:	3f d0       	rcall	.+126    	; 0x202c <Si114xReadFromRegister>
        if (retval == 1) break;
    1fae:	81 30       	cpi	r24, 0x01	; 1
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	c1 f7       	brne	.-16     	; 0x1fa4 <si114x_init+0x59a>
    {
        if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

        if(command==0) break; // Skip if the command is NOP 

        retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1fb4:	60 e2       	ldi	r22, 0x20	; 32
    1fb6:	c8 01       	movw	r24, r16
    1fb8:	39 d0       	rcall	.+114    	; 0x202c <Si114xReadFromRegister>
        if(retval==response) break;
    1fba:	8e 15       	cp	r24, r14
    1fbc:	9f 05       	cpc	r25, r15
    1fbe:	21 f0       	breq	.+8      	; 0x1fc8 <si114x_init+0x5be>
        else if(retval<0) return retval;
    1fc0:	97 fd       	sbrc	r25, 7
    1fc2:	08 c0       	rjmp	.+16     	; 0x1fd4 <si114x_init+0x5ca>
    1fc4:	7c 01       	movw	r14, r24
    1fc6:	f0 cf       	rjmp	.-32     	; 0x1fa8 <si114x_init+0x59e>
        else response = retval;
    }

    // Send the Command
    if ((retval=Si114xWriteToRegister(si114x_handle, REG_COMMAND, command)) !=0) 
    1fc8:	4f e0       	ldi	r20, 0x0F	; 15
    1fca:	68 e1       	ldi	r22, 0x18	; 24
    1fcc:	c8 01       	movw	r24, r16
    1fce:	2a d0       	rcall	.+84     	; 0x2024 <Si114xWriteToRegister>
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	b9 f0       	breq	.+46     	; 0x2002 <si114x_init+0x5f8>
    1fd4:	9c 01       	movw	r18, r24

		// if 0x08, VIS, IR, AUX Measurements every time device wakes up.
		retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE,  alsrate);

		// Enable Autonomous Operation
		retval+=Si114xPsAlsAuto(si114x_handle);
    1fd6:	c6 01       	movw	r24, r12
    1fd8:	82 0f       	add	r24, r18
    1fda:	93 1f       	adc	r25, r19
		// If nothing went wrong after all of this time, the value
		// returned will be 0. Otherwise, it will be some negative
		// number
	}
	return retval;
}
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	ff 90       	pop	r15
    1fea:	ef 90       	pop	r14
    1fec:	df 90       	pop	r13
    1fee:	cf 90       	pop	r12
    1ff0:	08 95       	ret
    while(1)
    {

        if(command==0) break; // Skip if the command is NOP

        retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1ff2:	60 e2       	ldi	r22, 0x20	; 32
    1ff4:	c8 01       	movw	r24, r16
    1ff6:	1a d0       	rcall	.+52     	; 0x202c <Si114xReadFromRegister>
        if (retval != response) break;
    1ff8:	e8 16       	cp	r14, r24
    1ffa:	f9 06       	cpc	r15, r25
    1ffc:	51 f4       	brne	.+20     	; 0x2012 <si114x_init+0x608>
    1ffe:	97 01       	movw	r18, r14
    2000:	ea cf       	rjmp	.-44     	; 0x1fd6 <si114x_init+0x5cc>
    2002:	f7 fc       	sbrc	r15, 7
    2004:	f6 cf       	rjmp	.-20     	; 0x1ff2 <si114x_init+0x5e8>
    while(1)
    {

        if(command==0) break; // Skip if the command is NOP

        retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    2006:	60 e2       	ldi	r22, 0x20	; 32
    2008:	c8 01       	movw	r24, r16
    200a:	10 d0       	rcall	.+32     	; 0x202c <Si114xReadFromRegister>
        if (retval != response) break;
    200c:	e8 16       	cp	r14, r24
    200e:	f9 06       	cpc	r15, r25
    2010:	d1 f3       	breq	.-12     	; 0x2006 <si114x_init+0x5fc>
        else if(retval<0) return retval;
    }
    return 0;
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	df cf       	rjmp	.-66     	; 0x1fd6 <si114x_init+0x5cc>

00002018 <si114x_setup>:
//-----------------------------------------------------------------------------
#include "si114x_functions.h"
#include <avr/io.h>

void si114x_setup(void) {
	si114x_reset(SI114X_ADDR);
    2018:	8a e5       	ldi	r24, 0x5A	; 90
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	b3 dc       	rcall	.-1690   	; 0x1984 <si114x_reset>
	si114x_init(SI114X_ADDR);
    201e:	8a e5       	ldi	r24, 0x5A	; 90
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	f3 cc       	rjmp	.-1562   	; 0x1a0a <si114x_init>

00002024 <Si114xWriteToRegister>:

s16 Si114xBlockRead(HANDLE si114x_handle, 
                        u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,2000,address,values,length);
}
    2024:	8a e5       	ldi	r24, 0x5A	; 90
    2026:	15 dc       	rcall	.-2006   	; 0x1852 <i2c_write_data>
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	08 95       	ret

0000202c <Si114xReadFromRegister>:
    202c:	8a e5       	ldi	r24, 0x5A	; 90
    202e:	29 dc       	rcall	.-1966   	; 0x1882 <i2c_read_data>
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	08 95       	ret

00002034 <Si114xBlockWrite>:
    2034:	ef 92       	push	r14
    2036:	0f 93       	push	r16
    2038:	1f 93       	push	r17
    203a:	89 01       	movw	r16, r18
    203c:	e4 2e       	mov	r14, r20
    203e:	26 2f       	mov	r18, r22
    2040:	40 ed       	ldi	r20, 0xD0	; 208
    2042:	6a e5       	ldi	r22, 0x5A	; 90
    2044:	80 e8       	ldi	r24, 0x80	; 128
    2046:	94 e0       	ldi	r25, 0x04	; 4
    2048:	ab db       	rcall	.-2218   	; 0x17a0 <twi_write_packet>
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	ef 90       	pop	r14
    2052:	08 95       	ret

00002054 <delay_10ms>:
    2054:	2f ef       	ldi	r18, 0xFF	; 255
    2056:	89 ef       	ldi	r24, 0xF9	; 249
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	21 50       	subi	r18, 0x01	; 1
    205c:	80 40       	sbci	r24, 0x00	; 0
    205e:	90 40       	sbci	r25, 0x00	; 0
    2060:	e1 f7       	brne	.-8      	; 0x205a <delay_10ms+0x6>
    2062:	00 c0       	rjmp	.+0      	; 0x2064 <delay_10ms+0x10>
    2064:	00 00       	nop
    2066:	08 95       	ret

00002068 <uart_setup>:
#include <avr/io.h>
#include <util/delay.h>

void uart_setup(void) {
	
	PORTD.DIRSET = PIN3_bm; //TX
    2068:	e0 e6       	ldi	r30, 0x60	; 96
    206a:	f6 e0       	ldi	r31, 0x06	; 6
    206c:	88 e0       	ldi	r24, 0x08	; 8
    206e:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; //RX
    2070:	84 e0       	ldi	r24, 0x04	; 4
    2072:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
    2074:	e0 ea       	ldi	r30, 0xA0	; 160
    2076:	f9 e0       	ldi	r31, 0x09	; 9
    2078:	80 e2       	ldi	r24, 0x20	; 32
    207a:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 207;//0x1111;
    207c:	8f ec       	ldi	r24, 0xCF	; 207
    207e:	86 83       	std	Z+6, r24	; 0x06
	//USARTE0.BAUDCTRLB = (33 << 4);
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
    2080:	83 e0       	ldi	r24, 0x03	; 3
    2082:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    2084:	88 e1       	ldi	r24, 0x18	; 24
    2086:	84 83       	std	Z+4, r24	; 0x04
    2088:	08 95       	ret

0000208a <uart_put_char>:
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    208a:	90 91 a1 09 	lds	r25, 0x09A1
    208e:	95 ff       	sbrs	r25, 5
    2090:	fc cf       	rjmp	.-8      	; 0x208a <uart_put_char>
	USARTD0.DATA = c;
    2092:	80 93 a0 09 	sts	0x09A0, r24
    2096:	08 95       	ret

00002098 <uart_get_char>:
}

char uart_get_char(void) {
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
    2098:	80 91 a1 09 	lds	r24, 0x09A1
    209c:	87 ff       	sbrs	r24, 7
    209e:	fc cf       	rjmp	.-8      	; 0x2098 <uart_get_char>
	return USARTD0.DATA;
    20a0:	80 91 a0 09 	lds	r24, 0x09A0
}
    20a4:	08 95       	ret

000020a6 <__subsf3>:
    20a6:	50 58       	subi	r21, 0x80	; 128

000020a8 <__addsf3>:
    20a8:	bb 27       	eor	r27, r27
    20aa:	aa 27       	eor	r26, r26
    20ac:	0e d0       	rcall	.+28     	; 0x20ca <__addsf3x>
    20ae:	e5 c0       	rjmp	.+458    	; 0x227a <__fp_round>
    20b0:	d6 d0       	rcall	.+428    	; 0x225e <__fp_pscA>
    20b2:	30 f0       	brcs	.+12     	; 0x20c0 <__addsf3+0x18>
    20b4:	db d0       	rcall	.+438    	; 0x226c <__fp_pscB>
    20b6:	20 f0       	brcs	.+8      	; 0x20c0 <__addsf3+0x18>
    20b8:	31 f4       	brne	.+12     	; 0x20c6 <__addsf3+0x1e>
    20ba:	9f 3f       	cpi	r25, 0xFF	; 255
    20bc:	11 f4       	brne	.+4      	; 0x20c2 <__addsf3+0x1a>
    20be:	1e f4       	brtc	.+6      	; 0x20c6 <__addsf3+0x1e>
    20c0:	cb c0       	rjmp	.+406    	; 0x2258 <__fp_nan>
    20c2:	0e f4       	brtc	.+2      	; 0x20c6 <__addsf3+0x1e>
    20c4:	e0 95       	com	r30
    20c6:	e7 fb       	bst	r30, 7
    20c8:	c1 c0       	rjmp	.+386    	; 0x224c <__fp_inf>

000020ca <__addsf3x>:
    20ca:	e9 2f       	mov	r30, r25
    20cc:	e7 d0       	rcall	.+462    	; 0x229c <__fp_split3>
    20ce:	80 f3       	brcs	.-32     	; 0x20b0 <__addsf3+0x8>
    20d0:	ba 17       	cp	r27, r26
    20d2:	62 07       	cpc	r22, r18
    20d4:	73 07       	cpc	r23, r19
    20d6:	84 07       	cpc	r24, r20
    20d8:	95 07       	cpc	r25, r21
    20da:	18 f0       	brcs	.+6      	; 0x20e2 <__addsf3x+0x18>
    20dc:	71 f4       	brne	.+28     	; 0x20fa <__addsf3x+0x30>
    20de:	9e f5       	brtc	.+102    	; 0x2146 <__addsf3x+0x7c>
    20e0:	ff c0       	rjmp	.+510    	; 0x22e0 <__fp_zero>
    20e2:	0e f4       	brtc	.+2      	; 0x20e6 <__addsf3x+0x1c>
    20e4:	e0 95       	com	r30
    20e6:	0b 2e       	mov	r0, r27
    20e8:	ba 2f       	mov	r27, r26
    20ea:	a0 2d       	mov	r26, r0
    20ec:	0b 01       	movw	r0, r22
    20ee:	b9 01       	movw	r22, r18
    20f0:	90 01       	movw	r18, r0
    20f2:	0c 01       	movw	r0, r24
    20f4:	ca 01       	movw	r24, r20
    20f6:	a0 01       	movw	r20, r0
    20f8:	11 24       	eor	r1, r1
    20fa:	ff 27       	eor	r31, r31
    20fc:	59 1b       	sub	r21, r25
    20fe:	99 f0       	breq	.+38     	; 0x2126 <__addsf3x+0x5c>
    2100:	59 3f       	cpi	r21, 0xF9	; 249
    2102:	50 f4       	brcc	.+20     	; 0x2118 <__addsf3x+0x4e>
    2104:	50 3e       	cpi	r21, 0xE0	; 224
    2106:	68 f1       	brcs	.+90     	; 0x2162 <__addsf3x+0x98>
    2108:	1a 16       	cp	r1, r26
    210a:	f0 40       	sbci	r31, 0x00	; 0
    210c:	a2 2f       	mov	r26, r18
    210e:	23 2f       	mov	r18, r19
    2110:	34 2f       	mov	r19, r20
    2112:	44 27       	eor	r20, r20
    2114:	58 5f       	subi	r21, 0xF8	; 248
    2116:	f3 cf       	rjmp	.-26     	; 0x20fe <__addsf3x+0x34>
    2118:	46 95       	lsr	r20
    211a:	37 95       	ror	r19
    211c:	27 95       	ror	r18
    211e:	a7 95       	ror	r26
    2120:	f0 40       	sbci	r31, 0x00	; 0
    2122:	53 95       	inc	r21
    2124:	c9 f7       	brne	.-14     	; 0x2118 <__addsf3x+0x4e>
    2126:	7e f4       	brtc	.+30     	; 0x2146 <__addsf3x+0x7c>
    2128:	1f 16       	cp	r1, r31
    212a:	ba 0b       	sbc	r27, r26
    212c:	62 0b       	sbc	r22, r18
    212e:	73 0b       	sbc	r23, r19
    2130:	84 0b       	sbc	r24, r20
    2132:	ba f0       	brmi	.+46     	; 0x2162 <__addsf3x+0x98>
    2134:	91 50       	subi	r25, 0x01	; 1
    2136:	a1 f0       	breq	.+40     	; 0x2160 <__addsf3x+0x96>
    2138:	ff 0f       	add	r31, r31
    213a:	bb 1f       	adc	r27, r27
    213c:	66 1f       	adc	r22, r22
    213e:	77 1f       	adc	r23, r23
    2140:	88 1f       	adc	r24, r24
    2142:	c2 f7       	brpl	.-16     	; 0x2134 <__addsf3x+0x6a>
    2144:	0e c0       	rjmp	.+28     	; 0x2162 <__addsf3x+0x98>
    2146:	ba 0f       	add	r27, r26
    2148:	62 1f       	adc	r22, r18
    214a:	73 1f       	adc	r23, r19
    214c:	84 1f       	adc	r24, r20
    214e:	48 f4       	brcc	.+18     	; 0x2162 <__addsf3x+0x98>
    2150:	87 95       	ror	r24
    2152:	77 95       	ror	r23
    2154:	67 95       	ror	r22
    2156:	b7 95       	ror	r27
    2158:	f7 95       	ror	r31
    215a:	9e 3f       	cpi	r25, 0xFE	; 254
    215c:	08 f0       	brcs	.+2      	; 0x2160 <__addsf3x+0x96>
    215e:	b3 cf       	rjmp	.-154    	; 0x20c6 <__addsf3+0x1e>
    2160:	93 95       	inc	r25
    2162:	88 0f       	add	r24, r24
    2164:	08 f0       	brcs	.+2      	; 0x2168 <__addsf3x+0x9e>
    2166:	99 27       	eor	r25, r25
    2168:	ee 0f       	add	r30, r30
    216a:	97 95       	ror	r25
    216c:	87 95       	ror	r24
    216e:	08 95       	ret

00002170 <__fixsfsi>:
    2170:	04 d0       	rcall	.+8      	; 0x217a <__fixunssfsi>
    2172:	68 94       	set
    2174:	b1 11       	cpse	r27, r1
    2176:	b5 c0       	rjmp	.+362    	; 0x22e2 <__fp_szero>
    2178:	08 95       	ret

0000217a <__fixunssfsi>:
    217a:	98 d0       	rcall	.+304    	; 0x22ac <__fp_splitA>
    217c:	88 f0       	brcs	.+34     	; 0x21a0 <__fixunssfsi+0x26>
    217e:	9f 57       	subi	r25, 0x7F	; 127
    2180:	90 f0       	brcs	.+36     	; 0x21a6 <__fixunssfsi+0x2c>
    2182:	b9 2f       	mov	r27, r25
    2184:	99 27       	eor	r25, r25
    2186:	b7 51       	subi	r27, 0x17	; 23
    2188:	a0 f0       	brcs	.+40     	; 0x21b2 <__fixunssfsi+0x38>
    218a:	d1 f0       	breq	.+52     	; 0x21c0 <__fixunssfsi+0x46>
    218c:	66 0f       	add	r22, r22
    218e:	77 1f       	adc	r23, r23
    2190:	88 1f       	adc	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	1a f0       	brmi	.+6      	; 0x219c <__fixunssfsi+0x22>
    2196:	ba 95       	dec	r27
    2198:	c9 f7       	brne	.-14     	; 0x218c <__fixunssfsi+0x12>
    219a:	12 c0       	rjmp	.+36     	; 0x21c0 <__fixunssfsi+0x46>
    219c:	b1 30       	cpi	r27, 0x01	; 1
    219e:	81 f0       	breq	.+32     	; 0x21c0 <__fixunssfsi+0x46>
    21a0:	9f d0       	rcall	.+318    	; 0x22e0 <__fp_zero>
    21a2:	b1 e0       	ldi	r27, 0x01	; 1
    21a4:	08 95       	ret
    21a6:	9c c0       	rjmp	.+312    	; 0x22e0 <__fp_zero>
    21a8:	67 2f       	mov	r22, r23
    21aa:	78 2f       	mov	r23, r24
    21ac:	88 27       	eor	r24, r24
    21ae:	b8 5f       	subi	r27, 0xF8	; 248
    21b0:	39 f0       	breq	.+14     	; 0x21c0 <__fixunssfsi+0x46>
    21b2:	b9 3f       	cpi	r27, 0xF9	; 249
    21b4:	cc f3       	brlt	.-14     	; 0x21a8 <__fixunssfsi+0x2e>
    21b6:	86 95       	lsr	r24
    21b8:	77 95       	ror	r23
    21ba:	67 95       	ror	r22
    21bc:	b3 95       	inc	r27
    21be:	d9 f7       	brne	.-10     	; 0x21b6 <__fixunssfsi+0x3c>
    21c0:	3e f4       	brtc	.+14     	; 0x21d0 <__fixunssfsi+0x56>
    21c2:	90 95       	com	r25
    21c4:	80 95       	com	r24
    21c6:	70 95       	com	r23
    21c8:	61 95       	neg	r22
    21ca:	7f 4f       	sbci	r23, 0xFF	; 255
    21cc:	8f 4f       	sbci	r24, 0xFF	; 255
    21ce:	9f 4f       	sbci	r25, 0xFF	; 255
    21d0:	08 95       	ret

000021d2 <__floatunsisf>:
    21d2:	e8 94       	clt
    21d4:	09 c0       	rjmp	.+18     	; 0x21e8 <__floatsisf+0x12>

000021d6 <__floatsisf>:
    21d6:	97 fb       	bst	r25, 7
    21d8:	3e f4       	brtc	.+14     	; 0x21e8 <__floatsisf+0x12>
    21da:	90 95       	com	r25
    21dc:	80 95       	com	r24
    21de:	70 95       	com	r23
    21e0:	61 95       	neg	r22
    21e2:	7f 4f       	sbci	r23, 0xFF	; 255
    21e4:	8f 4f       	sbci	r24, 0xFF	; 255
    21e6:	9f 4f       	sbci	r25, 0xFF	; 255
    21e8:	99 23       	and	r25, r25
    21ea:	a9 f0       	breq	.+42     	; 0x2216 <__floatsisf+0x40>
    21ec:	f9 2f       	mov	r31, r25
    21ee:	96 e9       	ldi	r25, 0x96	; 150
    21f0:	bb 27       	eor	r27, r27
    21f2:	93 95       	inc	r25
    21f4:	f6 95       	lsr	r31
    21f6:	87 95       	ror	r24
    21f8:	77 95       	ror	r23
    21fa:	67 95       	ror	r22
    21fc:	b7 95       	ror	r27
    21fe:	f1 11       	cpse	r31, r1
    2200:	f8 cf       	rjmp	.-16     	; 0x21f2 <__floatsisf+0x1c>
    2202:	fa f4       	brpl	.+62     	; 0x2242 <__floatsisf+0x6c>
    2204:	bb 0f       	add	r27, r27
    2206:	11 f4       	brne	.+4      	; 0x220c <__floatsisf+0x36>
    2208:	60 ff       	sbrs	r22, 0
    220a:	1b c0       	rjmp	.+54     	; 0x2242 <__floatsisf+0x6c>
    220c:	6f 5f       	subi	r22, 0xFF	; 255
    220e:	7f 4f       	sbci	r23, 0xFF	; 255
    2210:	8f 4f       	sbci	r24, 0xFF	; 255
    2212:	9f 4f       	sbci	r25, 0xFF	; 255
    2214:	16 c0       	rjmp	.+44     	; 0x2242 <__floatsisf+0x6c>
    2216:	88 23       	and	r24, r24
    2218:	11 f0       	breq	.+4      	; 0x221e <__floatsisf+0x48>
    221a:	96 e9       	ldi	r25, 0x96	; 150
    221c:	11 c0       	rjmp	.+34     	; 0x2240 <__floatsisf+0x6a>
    221e:	77 23       	and	r23, r23
    2220:	21 f0       	breq	.+8      	; 0x222a <__floatsisf+0x54>
    2222:	9e e8       	ldi	r25, 0x8E	; 142
    2224:	87 2f       	mov	r24, r23
    2226:	76 2f       	mov	r23, r22
    2228:	05 c0       	rjmp	.+10     	; 0x2234 <__floatsisf+0x5e>
    222a:	66 23       	and	r22, r22
    222c:	71 f0       	breq	.+28     	; 0x224a <__floatsisf+0x74>
    222e:	96 e8       	ldi	r25, 0x86	; 134
    2230:	86 2f       	mov	r24, r22
    2232:	70 e0       	ldi	r23, 0x00	; 0
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	2a f0       	brmi	.+10     	; 0x2242 <__floatsisf+0x6c>
    2238:	9a 95       	dec	r25
    223a:	66 0f       	add	r22, r22
    223c:	77 1f       	adc	r23, r23
    223e:	88 1f       	adc	r24, r24
    2240:	da f7       	brpl	.-10     	; 0x2238 <__floatsisf+0x62>
    2242:	88 0f       	add	r24, r24
    2244:	96 95       	lsr	r25
    2246:	87 95       	ror	r24
    2248:	97 f9       	bld	r25, 7
    224a:	08 95       	ret

0000224c <__fp_inf>:
    224c:	97 f9       	bld	r25, 7
    224e:	9f 67       	ori	r25, 0x7F	; 127
    2250:	80 e8       	ldi	r24, 0x80	; 128
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	08 95       	ret

00002258 <__fp_nan>:
    2258:	9f ef       	ldi	r25, 0xFF	; 255
    225a:	80 ec       	ldi	r24, 0xC0	; 192
    225c:	08 95       	ret

0000225e <__fp_pscA>:
    225e:	00 24       	eor	r0, r0
    2260:	0a 94       	dec	r0
    2262:	16 16       	cp	r1, r22
    2264:	17 06       	cpc	r1, r23
    2266:	18 06       	cpc	r1, r24
    2268:	09 06       	cpc	r0, r25
    226a:	08 95       	ret

0000226c <__fp_pscB>:
    226c:	00 24       	eor	r0, r0
    226e:	0a 94       	dec	r0
    2270:	12 16       	cp	r1, r18
    2272:	13 06       	cpc	r1, r19
    2274:	14 06       	cpc	r1, r20
    2276:	05 06       	cpc	r0, r21
    2278:	08 95       	ret

0000227a <__fp_round>:
    227a:	09 2e       	mov	r0, r25
    227c:	03 94       	inc	r0
    227e:	00 0c       	add	r0, r0
    2280:	11 f4       	brne	.+4      	; 0x2286 <__fp_round+0xc>
    2282:	88 23       	and	r24, r24
    2284:	52 f0       	brmi	.+20     	; 0x229a <__fp_round+0x20>
    2286:	bb 0f       	add	r27, r27
    2288:	40 f4       	brcc	.+16     	; 0x229a <__fp_round+0x20>
    228a:	bf 2b       	or	r27, r31
    228c:	11 f4       	brne	.+4      	; 0x2292 <__fp_round+0x18>
    228e:	60 ff       	sbrs	r22, 0
    2290:	04 c0       	rjmp	.+8      	; 0x229a <__fp_round+0x20>
    2292:	6f 5f       	subi	r22, 0xFF	; 255
    2294:	7f 4f       	sbci	r23, 0xFF	; 255
    2296:	8f 4f       	sbci	r24, 0xFF	; 255
    2298:	9f 4f       	sbci	r25, 0xFF	; 255
    229a:	08 95       	ret

0000229c <__fp_split3>:
    229c:	57 fd       	sbrc	r21, 7
    229e:	90 58       	subi	r25, 0x80	; 128
    22a0:	44 0f       	add	r20, r20
    22a2:	55 1f       	adc	r21, r21
    22a4:	59 f0       	breq	.+22     	; 0x22bc <__fp_splitA+0x10>
    22a6:	5f 3f       	cpi	r21, 0xFF	; 255
    22a8:	71 f0       	breq	.+28     	; 0x22c6 <__fp_splitA+0x1a>
    22aa:	47 95       	ror	r20

000022ac <__fp_splitA>:
    22ac:	88 0f       	add	r24, r24
    22ae:	97 fb       	bst	r25, 7
    22b0:	99 1f       	adc	r25, r25
    22b2:	61 f0       	breq	.+24     	; 0x22cc <__fp_splitA+0x20>
    22b4:	9f 3f       	cpi	r25, 0xFF	; 255
    22b6:	79 f0       	breq	.+30     	; 0x22d6 <__fp_splitA+0x2a>
    22b8:	87 95       	ror	r24
    22ba:	08 95       	ret
    22bc:	12 16       	cp	r1, r18
    22be:	13 06       	cpc	r1, r19
    22c0:	14 06       	cpc	r1, r20
    22c2:	55 1f       	adc	r21, r21
    22c4:	f2 cf       	rjmp	.-28     	; 0x22aa <__fp_split3+0xe>
    22c6:	46 95       	lsr	r20
    22c8:	f1 df       	rcall	.-30     	; 0x22ac <__fp_splitA>
    22ca:	08 c0       	rjmp	.+16     	; 0x22dc <__fp_splitA+0x30>
    22cc:	16 16       	cp	r1, r22
    22ce:	17 06       	cpc	r1, r23
    22d0:	18 06       	cpc	r1, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	f1 cf       	rjmp	.-30     	; 0x22b8 <__fp_splitA+0xc>
    22d6:	86 95       	lsr	r24
    22d8:	71 05       	cpc	r23, r1
    22da:	61 05       	cpc	r22, r1
    22dc:	08 94       	sec
    22de:	08 95       	ret

000022e0 <__fp_zero>:
    22e0:	e8 94       	clt

000022e2 <__fp_szero>:
    22e2:	bb 27       	eor	r27, r27
    22e4:	66 27       	eor	r22, r22
    22e6:	77 27       	eor	r23, r23
    22e8:	cb 01       	movw	r24, r22
    22ea:	97 f9       	bld	r25, 7
    22ec:	08 95       	ret

000022ee <__mulsf3>:
    22ee:	0b d0       	rcall	.+22     	; 0x2306 <__mulsf3x>
    22f0:	c4 cf       	rjmp	.-120    	; 0x227a <__fp_round>
    22f2:	b5 df       	rcall	.-150    	; 0x225e <__fp_pscA>
    22f4:	28 f0       	brcs	.+10     	; 0x2300 <__mulsf3+0x12>
    22f6:	ba df       	rcall	.-140    	; 0x226c <__fp_pscB>
    22f8:	18 f0       	brcs	.+6      	; 0x2300 <__mulsf3+0x12>
    22fa:	95 23       	and	r25, r21
    22fc:	09 f0       	breq	.+2      	; 0x2300 <__mulsf3+0x12>
    22fe:	a6 cf       	rjmp	.-180    	; 0x224c <__fp_inf>
    2300:	ab cf       	rjmp	.-170    	; 0x2258 <__fp_nan>
    2302:	11 24       	eor	r1, r1
    2304:	ee cf       	rjmp	.-36     	; 0x22e2 <__fp_szero>

00002306 <__mulsf3x>:
    2306:	ca df       	rcall	.-108    	; 0x229c <__fp_split3>
    2308:	a0 f3       	brcs	.-24     	; 0x22f2 <__mulsf3+0x4>

0000230a <__mulsf3_pse>:
    230a:	95 9f       	mul	r25, r21
    230c:	d1 f3       	breq	.-12     	; 0x2302 <__mulsf3+0x14>
    230e:	95 0f       	add	r25, r21
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	55 1f       	adc	r21, r21
    2314:	62 9f       	mul	r22, r18
    2316:	f0 01       	movw	r30, r0
    2318:	72 9f       	mul	r23, r18
    231a:	bb 27       	eor	r27, r27
    231c:	f0 0d       	add	r31, r0
    231e:	b1 1d       	adc	r27, r1
    2320:	63 9f       	mul	r22, r19
    2322:	aa 27       	eor	r26, r26
    2324:	f0 0d       	add	r31, r0
    2326:	b1 1d       	adc	r27, r1
    2328:	aa 1f       	adc	r26, r26
    232a:	64 9f       	mul	r22, r20
    232c:	66 27       	eor	r22, r22
    232e:	b0 0d       	add	r27, r0
    2330:	a1 1d       	adc	r26, r1
    2332:	66 1f       	adc	r22, r22
    2334:	82 9f       	mul	r24, r18
    2336:	22 27       	eor	r18, r18
    2338:	b0 0d       	add	r27, r0
    233a:	a1 1d       	adc	r26, r1
    233c:	62 1f       	adc	r22, r18
    233e:	73 9f       	mul	r23, r19
    2340:	b0 0d       	add	r27, r0
    2342:	a1 1d       	adc	r26, r1
    2344:	62 1f       	adc	r22, r18
    2346:	83 9f       	mul	r24, r19
    2348:	a0 0d       	add	r26, r0
    234a:	61 1d       	adc	r22, r1
    234c:	22 1f       	adc	r18, r18
    234e:	74 9f       	mul	r23, r20
    2350:	33 27       	eor	r19, r19
    2352:	a0 0d       	add	r26, r0
    2354:	61 1d       	adc	r22, r1
    2356:	23 1f       	adc	r18, r19
    2358:	84 9f       	mul	r24, r20
    235a:	60 0d       	add	r22, r0
    235c:	21 1d       	adc	r18, r1
    235e:	82 2f       	mov	r24, r18
    2360:	76 2f       	mov	r23, r22
    2362:	6a 2f       	mov	r22, r26
    2364:	11 24       	eor	r1, r1
    2366:	9f 57       	subi	r25, 0x7F	; 127
    2368:	50 40       	sbci	r21, 0x00	; 0
    236a:	8a f0       	brmi	.+34     	; 0x238e <__mulsf3_pse+0x84>
    236c:	e1 f0       	breq	.+56     	; 0x23a6 <__mulsf3_pse+0x9c>
    236e:	88 23       	and	r24, r24
    2370:	4a f0       	brmi	.+18     	; 0x2384 <__mulsf3_pse+0x7a>
    2372:	ee 0f       	add	r30, r30
    2374:	ff 1f       	adc	r31, r31
    2376:	bb 1f       	adc	r27, r27
    2378:	66 1f       	adc	r22, r22
    237a:	77 1f       	adc	r23, r23
    237c:	88 1f       	adc	r24, r24
    237e:	91 50       	subi	r25, 0x01	; 1
    2380:	50 40       	sbci	r21, 0x00	; 0
    2382:	a9 f7       	brne	.-22     	; 0x236e <__mulsf3_pse+0x64>
    2384:	9e 3f       	cpi	r25, 0xFE	; 254
    2386:	51 05       	cpc	r21, r1
    2388:	70 f0       	brcs	.+28     	; 0x23a6 <__mulsf3_pse+0x9c>
    238a:	60 cf       	rjmp	.-320    	; 0x224c <__fp_inf>
    238c:	aa cf       	rjmp	.-172    	; 0x22e2 <__fp_szero>
    238e:	5f 3f       	cpi	r21, 0xFF	; 255
    2390:	ec f3       	brlt	.-6      	; 0x238c <__mulsf3_pse+0x82>
    2392:	98 3e       	cpi	r25, 0xE8	; 232
    2394:	dc f3       	brlt	.-10     	; 0x238c <__mulsf3_pse+0x82>
    2396:	86 95       	lsr	r24
    2398:	77 95       	ror	r23
    239a:	67 95       	ror	r22
    239c:	b7 95       	ror	r27
    239e:	f7 95       	ror	r31
    23a0:	e7 95       	ror	r30
    23a2:	9f 5f       	subi	r25, 0xFF	; 255
    23a4:	c1 f7       	brne	.-16     	; 0x2396 <__mulsf3_pse+0x8c>
    23a6:	fe 2b       	or	r31, r30
    23a8:	88 0f       	add	r24, r24
    23aa:	91 1d       	adc	r25, r1
    23ac:	96 95       	lsr	r25
    23ae:	87 95       	ror	r24
    23b0:	97 f9       	bld	r25, 7
    23b2:	08 95       	ret

000023b4 <__divmodhi4>:
    23b4:	97 fb       	bst	r25, 7
    23b6:	07 2e       	mov	r0, r23
    23b8:	16 f4       	brtc	.+4      	; 0x23be <__divmodhi4+0xa>
    23ba:	00 94       	com	r0
    23bc:	06 d0       	rcall	.+12     	; 0x23ca <__divmodhi4_neg1>
    23be:	77 fd       	sbrc	r23, 7
    23c0:	08 d0       	rcall	.+16     	; 0x23d2 <__divmodhi4_neg2>
    23c2:	0b d0       	rcall	.+22     	; 0x23da <__udivmodhi4>
    23c4:	07 fc       	sbrc	r0, 7
    23c6:	05 d0       	rcall	.+10     	; 0x23d2 <__divmodhi4_neg2>
    23c8:	3e f4       	brtc	.+14     	; 0x23d8 <__divmodhi4_exit>

000023ca <__divmodhi4_neg1>:
    23ca:	90 95       	com	r25
    23cc:	81 95       	neg	r24
    23ce:	9f 4f       	sbci	r25, 0xFF	; 255
    23d0:	08 95       	ret

000023d2 <__divmodhi4_neg2>:
    23d2:	70 95       	com	r23
    23d4:	61 95       	neg	r22
    23d6:	7f 4f       	sbci	r23, 0xFF	; 255

000023d8 <__divmodhi4_exit>:
    23d8:	08 95       	ret

000023da <__udivmodhi4>:
    23da:	aa 1b       	sub	r26, r26
    23dc:	bb 1b       	sub	r27, r27
    23de:	51 e1       	ldi	r21, 0x11	; 17
    23e0:	07 c0       	rjmp	.+14     	; 0x23f0 <__udivmodhi4_ep>

000023e2 <__udivmodhi4_loop>:
    23e2:	aa 1f       	adc	r26, r26
    23e4:	bb 1f       	adc	r27, r27
    23e6:	a6 17       	cp	r26, r22
    23e8:	b7 07       	cpc	r27, r23
    23ea:	10 f0       	brcs	.+4      	; 0x23f0 <__udivmodhi4_ep>
    23ec:	a6 1b       	sub	r26, r22
    23ee:	b7 0b       	sbc	r27, r23

000023f0 <__udivmodhi4_ep>:
    23f0:	88 1f       	adc	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	5a 95       	dec	r21
    23f6:	a9 f7       	brne	.-22     	; 0x23e2 <__udivmodhi4_loop>
    23f8:	80 95       	com	r24
    23fa:	90 95       	com	r25
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	08 95       	ret

00002402 <printf>:
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	fe 01       	movw	r30, r28
    240c:	35 96       	adiw	r30, 0x05	; 5
    240e:	61 91       	ld	r22, Z+
    2410:	71 91       	ld	r23, Z+
    2412:	af 01       	movw	r20, r30
    2414:	80 91 a4 24 	lds	r24, 0x24A4
    2418:	90 91 a5 24 	lds	r25, 0x24A5
    241c:	03 d0       	rcall	.+6      	; 0x2424 <vfprintf>
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	08 95       	ret

00002424 <vfprintf>:
    2424:	2f 92       	push	r2
    2426:	3f 92       	push	r3
    2428:	4f 92       	push	r4
    242a:	5f 92       	push	r5
    242c:	6f 92       	push	r6
    242e:	7f 92       	push	r7
    2430:	8f 92       	push	r8
    2432:	9f 92       	push	r9
    2434:	af 92       	push	r10
    2436:	bf 92       	push	r11
    2438:	cf 92       	push	r12
    243a:	df 92       	push	r13
    243c:	ef 92       	push	r14
    243e:	ff 92       	push	r15
    2440:	0f 93       	push	r16
    2442:	1f 93       	push	r17
    2444:	cf 93       	push	r28
    2446:	df 93       	push	r29
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	2c 97       	sbiw	r28, 0x0c	; 12
    244e:	cd bf       	out	0x3d, r28	; 61
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	7c 01       	movw	r14, r24
    2454:	6b 01       	movw	r12, r22
    2456:	8a 01       	movw	r16, r20
    2458:	fc 01       	movw	r30, r24
    245a:	16 82       	std	Z+6, r1	; 0x06
    245c:	17 82       	std	Z+7, r1	; 0x07
    245e:	83 81       	ldd	r24, Z+3	; 0x03
    2460:	81 ff       	sbrs	r24, 1
    2462:	b0 c1       	rjmp	.+864    	; 0x27c4 <vfprintf+0x3a0>
    2464:	ce 01       	movw	r24, r28
    2466:	01 96       	adiw	r24, 0x01	; 1
    2468:	4c 01       	movw	r8, r24
    246a:	f7 01       	movw	r30, r14
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	f6 01       	movw	r30, r12
    2470:	93 fd       	sbrc	r25, 3
    2472:	85 91       	lpm	r24, Z+
    2474:	93 ff       	sbrs	r25, 3
    2476:	81 91       	ld	r24, Z+
    2478:	6f 01       	movw	r12, r30
    247a:	88 23       	and	r24, r24
    247c:	09 f4       	brne	.+2      	; 0x2480 <vfprintf+0x5c>
    247e:	9e c1       	rjmp	.+828    	; 0x27bc <vfprintf+0x398>
    2480:	85 32       	cpi	r24, 0x25	; 37
    2482:	39 f4       	brne	.+14     	; 0x2492 <vfprintf+0x6e>
    2484:	93 fd       	sbrc	r25, 3
    2486:	85 91       	lpm	r24, Z+
    2488:	93 ff       	sbrs	r25, 3
    248a:	81 91       	ld	r24, Z+
    248c:	6f 01       	movw	r12, r30
    248e:	85 32       	cpi	r24, 0x25	; 37
    2490:	21 f4       	brne	.+8      	; 0x249a <vfprintf+0x76>
    2492:	b7 01       	movw	r22, r14
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	c4 d1       	rcall	.+904    	; 0x2820 <fputc>
    2498:	e8 cf       	rjmp	.-48     	; 0x246a <vfprintf+0x46>
    249a:	51 2c       	mov	r5, r1
    249c:	31 2c       	mov	r3, r1
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	20 32       	cpi	r18, 0x20	; 32
    24a2:	a0 f4       	brcc	.+40     	; 0x24cc <vfprintf+0xa8>
    24a4:	8b 32       	cpi	r24, 0x2B	; 43
    24a6:	69 f0       	breq	.+26     	; 0x24c2 <vfprintf+0x9e>
    24a8:	30 f4       	brcc	.+12     	; 0x24b6 <vfprintf+0x92>
    24aa:	80 32       	cpi	r24, 0x20	; 32
    24ac:	59 f0       	breq	.+22     	; 0x24c4 <vfprintf+0xa0>
    24ae:	83 32       	cpi	r24, 0x23	; 35
    24b0:	69 f4       	brne	.+26     	; 0x24cc <vfprintf+0xa8>
    24b2:	20 61       	ori	r18, 0x10	; 16
    24b4:	2c c0       	rjmp	.+88     	; 0x250e <vfprintf+0xea>
    24b6:	8d 32       	cpi	r24, 0x2D	; 45
    24b8:	39 f0       	breq	.+14     	; 0x24c8 <vfprintf+0xa4>
    24ba:	80 33       	cpi	r24, 0x30	; 48
    24bc:	39 f4       	brne	.+14     	; 0x24cc <vfprintf+0xa8>
    24be:	21 60       	ori	r18, 0x01	; 1
    24c0:	26 c0       	rjmp	.+76     	; 0x250e <vfprintf+0xea>
    24c2:	22 60       	ori	r18, 0x02	; 2
    24c4:	24 60       	ori	r18, 0x04	; 4
    24c6:	23 c0       	rjmp	.+70     	; 0x250e <vfprintf+0xea>
    24c8:	28 60       	ori	r18, 0x08	; 8
    24ca:	21 c0       	rjmp	.+66     	; 0x250e <vfprintf+0xea>
    24cc:	27 fd       	sbrc	r18, 7
    24ce:	27 c0       	rjmp	.+78     	; 0x251e <vfprintf+0xfa>
    24d0:	30 ed       	ldi	r19, 0xD0	; 208
    24d2:	38 0f       	add	r19, r24
    24d4:	3a 30       	cpi	r19, 0x0A	; 10
    24d6:	78 f4       	brcc	.+30     	; 0x24f6 <vfprintf+0xd2>
    24d8:	26 ff       	sbrs	r18, 6
    24da:	06 c0       	rjmp	.+12     	; 0x24e8 <vfprintf+0xc4>
    24dc:	fa e0       	ldi	r31, 0x0A	; 10
    24de:	5f 9e       	mul	r5, r31
    24e0:	30 0d       	add	r19, r0
    24e2:	11 24       	eor	r1, r1
    24e4:	53 2e       	mov	r5, r19
    24e6:	13 c0       	rjmp	.+38     	; 0x250e <vfprintf+0xea>
    24e8:	8a e0       	ldi	r24, 0x0A	; 10
    24ea:	38 9e       	mul	r3, r24
    24ec:	30 0d       	add	r19, r0
    24ee:	11 24       	eor	r1, r1
    24f0:	33 2e       	mov	r3, r19
    24f2:	20 62       	ori	r18, 0x20	; 32
    24f4:	0c c0       	rjmp	.+24     	; 0x250e <vfprintf+0xea>
    24f6:	8e 32       	cpi	r24, 0x2E	; 46
    24f8:	21 f4       	brne	.+8      	; 0x2502 <vfprintf+0xde>
    24fa:	26 fd       	sbrc	r18, 6
    24fc:	5f c1       	rjmp	.+702    	; 0x27bc <vfprintf+0x398>
    24fe:	20 64       	ori	r18, 0x40	; 64
    2500:	06 c0       	rjmp	.+12     	; 0x250e <vfprintf+0xea>
    2502:	8c 36       	cpi	r24, 0x6C	; 108
    2504:	11 f4       	brne	.+4      	; 0x250a <vfprintf+0xe6>
    2506:	20 68       	ori	r18, 0x80	; 128
    2508:	02 c0       	rjmp	.+4      	; 0x250e <vfprintf+0xea>
    250a:	88 36       	cpi	r24, 0x68	; 104
    250c:	41 f4       	brne	.+16     	; 0x251e <vfprintf+0xfa>
    250e:	f6 01       	movw	r30, r12
    2510:	93 fd       	sbrc	r25, 3
    2512:	85 91       	lpm	r24, Z+
    2514:	93 ff       	sbrs	r25, 3
    2516:	81 91       	ld	r24, Z+
    2518:	6f 01       	movw	r12, r30
    251a:	81 11       	cpse	r24, r1
    251c:	c1 cf       	rjmp	.-126    	; 0x24a0 <vfprintf+0x7c>
    251e:	98 2f       	mov	r25, r24
    2520:	9f 7d       	andi	r25, 0xDF	; 223
    2522:	95 54       	subi	r25, 0x45	; 69
    2524:	93 30       	cpi	r25, 0x03	; 3
    2526:	28 f4       	brcc	.+10     	; 0x2532 <vfprintf+0x10e>
    2528:	0c 5f       	subi	r16, 0xFC	; 252
    252a:	1f 4f       	sbci	r17, 0xFF	; 255
    252c:	ff e3       	ldi	r31, 0x3F	; 63
    252e:	f9 83       	std	Y+1, r31	; 0x01
    2530:	0d c0       	rjmp	.+26     	; 0x254c <vfprintf+0x128>
    2532:	83 36       	cpi	r24, 0x63	; 99
    2534:	31 f0       	breq	.+12     	; 0x2542 <vfprintf+0x11e>
    2536:	83 37       	cpi	r24, 0x73	; 115
    2538:	71 f0       	breq	.+28     	; 0x2556 <vfprintf+0x132>
    253a:	83 35       	cpi	r24, 0x53	; 83
    253c:	09 f0       	breq	.+2      	; 0x2540 <vfprintf+0x11c>
    253e:	57 c0       	rjmp	.+174    	; 0x25ee <vfprintf+0x1ca>
    2540:	21 c0       	rjmp	.+66     	; 0x2584 <vfprintf+0x160>
    2542:	f8 01       	movw	r30, r16
    2544:	80 81       	ld	r24, Z
    2546:	89 83       	std	Y+1, r24	; 0x01
    2548:	0e 5f       	subi	r16, 0xFE	; 254
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
    254c:	44 24       	eor	r4, r4
    254e:	43 94       	inc	r4
    2550:	51 2c       	mov	r5, r1
    2552:	54 01       	movw	r10, r8
    2554:	14 c0       	rjmp	.+40     	; 0x257e <vfprintf+0x15a>
    2556:	38 01       	movw	r6, r16
    2558:	f2 e0       	ldi	r31, 0x02	; 2
    255a:	6f 0e       	add	r6, r31
    255c:	71 1c       	adc	r7, r1
    255e:	f8 01       	movw	r30, r16
    2560:	a0 80       	ld	r10, Z
    2562:	b1 80       	ldd	r11, Z+1	; 0x01
    2564:	26 ff       	sbrs	r18, 6
    2566:	03 c0       	rjmp	.+6      	; 0x256e <vfprintf+0x14a>
    2568:	65 2d       	mov	r22, r5
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <vfprintf+0x14e>
    256e:	6f ef       	ldi	r22, 0xFF	; 255
    2570:	7f ef       	ldi	r23, 0xFF	; 255
    2572:	c5 01       	movw	r24, r10
    2574:	2c 87       	std	Y+12, r18	; 0x0c
    2576:	49 d1       	rcall	.+658    	; 0x280a <strnlen>
    2578:	2c 01       	movw	r4, r24
    257a:	83 01       	movw	r16, r6
    257c:	2c 85       	ldd	r18, Y+12	; 0x0c
    257e:	2f 77       	andi	r18, 0x7F	; 127
    2580:	22 2e       	mov	r2, r18
    2582:	16 c0       	rjmp	.+44     	; 0x25b0 <vfprintf+0x18c>
    2584:	38 01       	movw	r6, r16
    2586:	f2 e0       	ldi	r31, 0x02	; 2
    2588:	6f 0e       	add	r6, r31
    258a:	71 1c       	adc	r7, r1
    258c:	f8 01       	movw	r30, r16
    258e:	a0 80       	ld	r10, Z
    2590:	b1 80       	ldd	r11, Z+1	; 0x01
    2592:	26 ff       	sbrs	r18, 6
    2594:	03 c0       	rjmp	.+6      	; 0x259c <vfprintf+0x178>
    2596:	65 2d       	mov	r22, r5
    2598:	70 e0       	ldi	r23, 0x00	; 0
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <vfprintf+0x17c>
    259c:	6f ef       	ldi	r22, 0xFF	; 255
    259e:	7f ef       	ldi	r23, 0xFF	; 255
    25a0:	c5 01       	movw	r24, r10
    25a2:	2c 87       	std	Y+12, r18	; 0x0c
    25a4:	27 d1       	rcall	.+590    	; 0x27f4 <strnlen_P>
    25a6:	2c 01       	movw	r4, r24
    25a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    25aa:	20 68       	ori	r18, 0x80	; 128
    25ac:	22 2e       	mov	r2, r18
    25ae:	83 01       	movw	r16, r6
    25b0:	23 fc       	sbrc	r2, 3
    25b2:	19 c0       	rjmp	.+50     	; 0x25e6 <vfprintf+0x1c2>
    25b4:	83 2d       	mov	r24, r3
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	48 16       	cp	r4, r24
    25ba:	59 06       	cpc	r5, r25
    25bc:	a0 f4       	brcc	.+40     	; 0x25e6 <vfprintf+0x1c2>
    25be:	b7 01       	movw	r22, r14
    25c0:	80 e2       	ldi	r24, 0x20	; 32
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	2d d1       	rcall	.+602    	; 0x2820 <fputc>
    25c6:	3a 94       	dec	r3
    25c8:	f5 cf       	rjmp	.-22     	; 0x25b4 <vfprintf+0x190>
    25ca:	f5 01       	movw	r30, r10
    25cc:	27 fc       	sbrc	r2, 7
    25ce:	85 91       	lpm	r24, Z+
    25d0:	27 fe       	sbrs	r2, 7
    25d2:	81 91       	ld	r24, Z+
    25d4:	5f 01       	movw	r10, r30
    25d6:	b7 01       	movw	r22, r14
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	22 d1       	rcall	.+580    	; 0x2820 <fputc>
    25dc:	31 10       	cpse	r3, r1
    25de:	3a 94       	dec	r3
    25e0:	f1 e0       	ldi	r31, 0x01	; 1
    25e2:	4f 1a       	sub	r4, r31
    25e4:	51 08       	sbc	r5, r1
    25e6:	41 14       	cp	r4, r1
    25e8:	51 04       	cpc	r5, r1
    25ea:	79 f7       	brne	.-34     	; 0x25ca <vfprintf+0x1a6>
    25ec:	de c0       	rjmp	.+444    	; 0x27aa <vfprintf+0x386>
    25ee:	84 36       	cpi	r24, 0x64	; 100
    25f0:	11 f0       	breq	.+4      	; 0x25f6 <vfprintf+0x1d2>
    25f2:	89 36       	cpi	r24, 0x69	; 105
    25f4:	31 f5       	brne	.+76     	; 0x2642 <vfprintf+0x21e>
    25f6:	f8 01       	movw	r30, r16
    25f8:	27 ff       	sbrs	r18, 7
    25fa:	07 c0       	rjmp	.+14     	; 0x260a <vfprintf+0x1e6>
    25fc:	60 81       	ld	r22, Z
    25fe:	71 81       	ldd	r23, Z+1	; 0x01
    2600:	82 81       	ldd	r24, Z+2	; 0x02
    2602:	93 81       	ldd	r25, Z+3	; 0x03
    2604:	0c 5f       	subi	r16, 0xFC	; 252
    2606:	1f 4f       	sbci	r17, 0xFF	; 255
    2608:	08 c0       	rjmp	.+16     	; 0x261a <vfprintf+0x1f6>
    260a:	60 81       	ld	r22, Z
    260c:	71 81       	ldd	r23, Z+1	; 0x01
    260e:	88 27       	eor	r24, r24
    2610:	77 fd       	sbrc	r23, 7
    2612:	80 95       	com	r24
    2614:	98 2f       	mov	r25, r24
    2616:	0e 5f       	subi	r16, 0xFE	; 254
    2618:	1f 4f       	sbci	r17, 0xFF	; 255
    261a:	2f 76       	andi	r18, 0x6F	; 111
    261c:	b2 2e       	mov	r11, r18
    261e:	97 ff       	sbrs	r25, 7
    2620:	09 c0       	rjmp	.+18     	; 0x2634 <vfprintf+0x210>
    2622:	90 95       	com	r25
    2624:	80 95       	com	r24
    2626:	70 95       	com	r23
    2628:	61 95       	neg	r22
    262a:	7f 4f       	sbci	r23, 0xFF	; 255
    262c:	8f 4f       	sbci	r24, 0xFF	; 255
    262e:	9f 4f       	sbci	r25, 0xFF	; 255
    2630:	20 68       	ori	r18, 0x80	; 128
    2632:	b2 2e       	mov	r11, r18
    2634:	2a e0       	ldi	r18, 0x0A	; 10
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	a4 01       	movw	r20, r8
    263a:	24 d1       	rcall	.+584    	; 0x2884 <__ultoa_invert>
    263c:	a8 2e       	mov	r10, r24
    263e:	a8 18       	sub	r10, r8
    2640:	43 c0       	rjmp	.+134    	; 0x26c8 <vfprintf+0x2a4>
    2642:	85 37       	cpi	r24, 0x75	; 117
    2644:	29 f4       	brne	.+10     	; 0x2650 <vfprintf+0x22c>
    2646:	2f 7e       	andi	r18, 0xEF	; 239
    2648:	b2 2e       	mov	r11, r18
    264a:	2a e0       	ldi	r18, 0x0A	; 10
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	25 c0       	rjmp	.+74     	; 0x269a <vfprintf+0x276>
    2650:	f2 2f       	mov	r31, r18
    2652:	f9 7f       	andi	r31, 0xF9	; 249
    2654:	bf 2e       	mov	r11, r31
    2656:	8f 36       	cpi	r24, 0x6F	; 111
    2658:	c1 f0       	breq	.+48     	; 0x268a <vfprintf+0x266>
    265a:	18 f4       	brcc	.+6      	; 0x2662 <vfprintf+0x23e>
    265c:	88 35       	cpi	r24, 0x58	; 88
    265e:	79 f0       	breq	.+30     	; 0x267e <vfprintf+0x25a>
    2660:	ad c0       	rjmp	.+346    	; 0x27bc <vfprintf+0x398>
    2662:	80 37       	cpi	r24, 0x70	; 112
    2664:	19 f0       	breq	.+6      	; 0x266c <vfprintf+0x248>
    2666:	88 37       	cpi	r24, 0x78	; 120
    2668:	21 f0       	breq	.+8      	; 0x2672 <vfprintf+0x24e>
    266a:	a8 c0       	rjmp	.+336    	; 0x27bc <vfprintf+0x398>
    266c:	2f 2f       	mov	r18, r31
    266e:	20 61       	ori	r18, 0x10	; 16
    2670:	b2 2e       	mov	r11, r18
    2672:	b4 fe       	sbrs	r11, 4
    2674:	0d c0       	rjmp	.+26     	; 0x2690 <vfprintf+0x26c>
    2676:	8b 2d       	mov	r24, r11
    2678:	84 60       	ori	r24, 0x04	; 4
    267a:	b8 2e       	mov	r11, r24
    267c:	09 c0       	rjmp	.+18     	; 0x2690 <vfprintf+0x26c>
    267e:	24 ff       	sbrs	r18, 4
    2680:	0a c0       	rjmp	.+20     	; 0x2696 <vfprintf+0x272>
    2682:	9f 2f       	mov	r25, r31
    2684:	96 60       	ori	r25, 0x06	; 6
    2686:	b9 2e       	mov	r11, r25
    2688:	06 c0       	rjmp	.+12     	; 0x2696 <vfprintf+0x272>
    268a:	28 e0       	ldi	r18, 0x08	; 8
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	05 c0       	rjmp	.+10     	; 0x269a <vfprintf+0x276>
    2690:	20 e1       	ldi	r18, 0x10	; 16
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	02 c0       	rjmp	.+4      	; 0x269a <vfprintf+0x276>
    2696:	20 e1       	ldi	r18, 0x10	; 16
    2698:	32 e0       	ldi	r19, 0x02	; 2
    269a:	f8 01       	movw	r30, r16
    269c:	b7 fe       	sbrs	r11, 7
    269e:	07 c0       	rjmp	.+14     	; 0x26ae <vfprintf+0x28a>
    26a0:	60 81       	ld	r22, Z
    26a2:	71 81       	ldd	r23, Z+1	; 0x01
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	93 81       	ldd	r25, Z+3	; 0x03
    26a8:	0c 5f       	subi	r16, 0xFC	; 252
    26aa:	1f 4f       	sbci	r17, 0xFF	; 255
    26ac:	06 c0       	rjmp	.+12     	; 0x26ba <vfprintf+0x296>
    26ae:	60 81       	ld	r22, Z
    26b0:	71 81       	ldd	r23, Z+1	; 0x01
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 5f       	subi	r16, 0xFE	; 254
    26b8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ba:	a4 01       	movw	r20, r8
    26bc:	e3 d0       	rcall	.+454    	; 0x2884 <__ultoa_invert>
    26be:	a8 2e       	mov	r10, r24
    26c0:	a8 18       	sub	r10, r8
    26c2:	fb 2d       	mov	r31, r11
    26c4:	ff 77       	andi	r31, 0x7F	; 127
    26c6:	bf 2e       	mov	r11, r31
    26c8:	b6 fe       	sbrs	r11, 6
    26ca:	0b c0       	rjmp	.+22     	; 0x26e2 <vfprintf+0x2be>
    26cc:	2b 2d       	mov	r18, r11
    26ce:	2e 7f       	andi	r18, 0xFE	; 254
    26d0:	a5 14       	cp	r10, r5
    26d2:	50 f4       	brcc	.+20     	; 0x26e8 <vfprintf+0x2c4>
    26d4:	b4 fe       	sbrs	r11, 4
    26d6:	0a c0       	rjmp	.+20     	; 0x26ec <vfprintf+0x2c8>
    26d8:	b2 fc       	sbrc	r11, 2
    26da:	08 c0       	rjmp	.+16     	; 0x26ec <vfprintf+0x2c8>
    26dc:	2b 2d       	mov	r18, r11
    26de:	2e 7e       	andi	r18, 0xEE	; 238
    26e0:	05 c0       	rjmp	.+10     	; 0x26ec <vfprintf+0x2c8>
    26e2:	7a 2c       	mov	r7, r10
    26e4:	2b 2d       	mov	r18, r11
    26e6:	03 c0       	rjmp	.+6      	; 0x26ee <vfprintf+0x2ca>
    26e8:	7a 2c       	mov	r7, r10
    26ea:	01 c0       	rjmp	.+2      	; 0x26ee <vfprintf+0x2ca>
    26ec:	75 2c       	mov	r7, r5
    26ee:	24 ff       	sbrs	r18, 4
    26f0:	0d c0       	rjmp	.+26     	; 0x270c <vfprintf+0x2e8>
    26f2:	fe 01       	movw	r30, r28
    26f4:	ea 0d       	add	r30, r10
    26f6:	f1 1d       	adc	r31, r1
    26f8:	80 81       	ld	r24, Z
    26fa:	80 33       	cpi	r24, 0x30	; 48
    26fc:	11 f4       	brne	.+4      	; 0x2702 <vfprintf+0x2de>
    26fe:	29 7e       	andi	r18, 0xE9	; 233
    2700:	09 c0       	rjmp	.+18     	; 0x2714 <vfprintf+0x2f0>
    2702:	22 ff       	sbrs	r18, 2
    2704:	06 c0       	rjmp	.+12     	; 0x2712 <vfprintf+0x2ee>
    2706:	73 94       	inc	r7
    2708:	73 94       	inc	r7
    270a:	04 c0       	rjmp	.+8      	; 0x2714 <vfprintf+0x2f0>
    270c:	82 2f       	mov	r24, r18
    270e:	86 78       	andi	r24, 0x86	; 134
    2710:	09 f0       	breq	.+2      	; 0x2714 <vfprintf+0x2f0>
    2712:	73 94       	inc	r7
    2714:	23 fd       	sbrc	r18, 3
    2716:	12 c0       	rjmp	.+36     	; 0x273c <vfprintf+0x318>
    2718:	20 ff       	sbrs	r18, 0
    271a:	06 c0       	rjmp	.+12     	; 0x2728 <vfprintf+0x304>
    271c:	5a 2c       	mov	r5, r10
    271e:	73 14       	cp	r7, r3
    2720:	18 f4       	brcc	.+6      	; 0x2728 <vfprintf+0x304>
    2722:	53 0c       	add	r5, r3
    2724:	57 18       	sub	r5, r7
    2726:	73 2c       	mov	r7, r3
    2728:	73 14       	cp	r7, r3
    272a:	60 f4       	brcc	.+24     	; 0x2744 <vfprintf+0x320>
    272c:	b7 01       	movw	r22, r14
    272e:	80 e2       	ldi	r24, 0x20	; 32
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	2c 87       	std	Y+12, r18	; 0x0c
    2734:	75 d0       	rcall	.+234    	; 0x2820 <fputc>
    2736:	73 94       	inc	r7
    2738:	2c 85       	ldd	r18, Y+12	; 0x0c
    273a:	f6 cf       	rjmp	.-20     	; 0x2728 <vfprintf+0x304>
    273c:	73 14       	cp	r7, r3
    273e:	10 f4       	brcc	.+4      	; 0x2744 <vfprintf+0x320>
    2740:	37 18       	sub	r3, r7
    2742:	01 c0       	rjmp	.+2      	; 0x2746 <vfprintf+0x322>
    2744:	31 2c       	mov	r3, r1
    2746:	24 ff       	sbrs	r18, 4
    2748:	11 c0       	rjmp	.+34     	; 0x276c <vfprintf+0x348>
    274a:	b7 01       	movw	r22, r14
    274c:	80 e3       	ldi	r24, 0x30	; 48
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	2c 87       	std	Y+12, r18	; 0x0c
    2752:	66 d0       	rcall	.+204    	; 0x2820 <fputc>
    2754:	2c 85       	ldd	r18, Y+12	; 0x0c
    2756:	22 ff       	sbrs	r18, 2
    2758:	16 c0       	rjmp	.+44     	; 0x2786 <vfprintf+0x362>
    275a:	21 ff       	sbrs	r18, 1
    275c:	03 c0       	rjmp	.+6      	; 0x2764 <vfprintf+0x340>
    275e:	88 e5       	ldi	r24, 0x58	; 88
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <vfprintf+0x344>
    2764:	88 e7       	ldi	r24, 0x78	; 120
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	b7 01       	movw	r22, r14
    276a:	0c c0       	rjmp	.+24     	; 0x2784 <vfprintf+0x360>
    276c:	82 2f       	mov	r24, r18
    276e:	86 78       	andi	r24, 0x86	; 134
    2770:	51 f0       	breq	.+20     	; 0x2786 <vfprintf+0x362>
    2772:	21 fd       	sbrc	r18, 1
    2774:	02 c0       	rjmp	.+4      	; 0x277a <vfprintf+0x356>
    2776:	80 e2       	ldi	r24, 0x20	; 32
    2778:	01 c0       	rjmp	.+2      	; 0x277c <vfprintf+0x358>
    277a:	8b e2       	ldi	r24, 0x2B	; 43
    277c:	27 fd       	sbrc	r18, 7
    277e:	8d e2       	ldi	r24, 0x2D	; 45
    2780:	b7 01       	movw	r22, r14
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	4d d0       	rcall	.+154    	; 0x2820 <fputc>
    2786:	a5 14       	cp	r10, r5
    2788:	30 f4       	brcc	.+12     	; 0x2796 <vfprintf+0x372>
    278a:	b7 01       	movw	r22, r14
    278c:	80 e3       	ldi	r24, 0x30	; 48
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	47 d0       	rcall	.+142    	; 0x2820 <fputc>
    2792:	5a 94       	dec	r5
    2794:	f8 cf       	rjmp	.-16     	; 0x2786 <vfprintf+0x362>
    2796:	aa 94       	dec	r10
    2798:	f4 01       	movw	r30, r8
    279a:	ea 0d       	add	r30, r10
    279c:	f1 1d       	adc	r31, r1
    279e:	80 81       	ld	r24, Z
    27a0:	b7 01       	movw	r22, r14
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	3d d0       	rcall	.+122    	; 0x2820 <fputc>
    27a6:	a1 10       	cpse	r10, r1
    27a8:	f6 cf       	rjmp	.-20     	; 0x2796 <vfprintf+0x372>
    27aa:	33 20       	and	r3, r3
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <vfprintf+0x38c>
    27ae:	5d ce       	rjmp	.-838    	; 0x246a <vfprintf+0x46>
    27b0:	b7 01       	movw	r22, r14
    27b2:	80 e2       	ldi	r24, 0x20	; 32
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	34 d0       	rcall	.+104    	; 0x2820 <fputc>
    27b8:	3a 94       	dec	r3
    27ba:	f7 cf       	rjmp	.-18     	; 0x27aa <vfprintf+0x386>
    27bc:	f7 01       	movw	r30, r14
    27be:	86 81       	ldd	r24, Z+6	; 0x06
    27c0:	97 81       	ldd	r25, Z+7	; 0x07
    27c2:	02 c0       	rjmp	.+4      	; 0x27c8 <vfprintf+0x3a4>
    27c4:	8f ef       	ldi	r24, 0xFF	; 255
    27c6:	9f ef       	ldi	r25, 0xFF	; 255
    27c8:	2c 96       	adiw	r28, 0x0c	; 12
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	de bf       	out	0x3e, r29	; 62
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	1f 91       	pop	r17
    27d4:	0f 91       	pop	r16
    27d6:	ff 90       	pop	r15
    27d8:	ef 90       	pop	r14
    27da:	df 90       	pop	r13
    27dc:	cf 90       	pop	r12
    27de:	bf 90       	pop	r11
    27e0:	af 90       	pop	r10
    27e2:	9f 90       	pop	r9
    27e4:	8f 90       	pop	r8
    27e6:	7f 90       	pop	r7
    27e8:	6f 90       	pop	r6
    27ea:	5f 90       	pop	r5
    27ec:	4f 90       	pop	r4
    27ee:	3f 90       	pop	r3
    27f0:	2f 90       	pop	r2
    27f2:	08 95       	ret

000027f4 <strnlen_P>:
    27f4:	fc 01       	movw	r30, r24
    27f6:	05 90       	lpm	r0, Z+
    27f8:	61 50       	subi	r22, 0x01	; 1
    27fa:	70 40       	sbci	r23, 0x00	; 0
    27fc:	01 10       	cpse	r0, r1
    27fe:	d8 f7       	brcc	.-10     	; 0x27f6 <strnlen_P+0x2>
    2800:	80 95       	com	r24
    2802:	90 95       	com	r25
    2804:	8e 0f       	add	r24, r30
    2806:	9f 1f       	adc	r25, r31
    2808:	08 95       	ret

0000280a <strnlen>:
    280a:	fc 01       	movw	r30, r24
    280c:	61 50       	subi	r22, 0x01	; 1
    280e:	70 40       	sbci	r23, 0x00	; 0
    2810:	01 90       	ld	r0, Z+
    2812:	01 10       	cpse	r0, r1
    2814:	d8 f7       	brcc	.-10     	; 0x280c <strnlen+0x2>
    2816:	80 95       	com	r24
    2818:	90 95       	com	r25
    281a:	8e 0f       	add	r24, r30
    281c:	9f 1f       	adc	r25, r31
    281e:	08 95       	ret

00002820 <fputc>:
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	18 2f       	mov	r17, r24
    282a:	09 2f       	mov	r16, r25
    282c:	eb 01       	movw	r28, r22
    282e:	8b 81       	ldd	r24, Y+3	; 0x03
    2830:	81 fd       	sbrc	r24, 1
    2832:	03 c0       	rjmp	.+6      	; 0x283a <fputc+0x1a>
    2834:	8f ef       	ldi	r24, 0xFF	; 255
    2836:	9f ef       	ldi	r25, 0xFF	; 255
    2838:	20 c0       	rjmp	.+64     	; 0x287a <fputc+0x5a>
    283a:	82 ff       	sbrs	r24, 2
    283c:	10 c0       	rjmp	.+32     	; 0x285e <fputc+0x3e>
    283e:	4e 81       	ldd	r20, Y+6	; 0x06
    2840:	5f 81       	ldd	r21, Y+7	; 0x07
    2842:	2c 81       	ldd	r18, Y+4	; 0x04
    2844:	3d 81       	ldd	r19, Y+5	; 0x05
    2846:	42 17       	cp	r20, r18
    2848:	53 07       	cpc	r21, r19
    284a:	7c f4       	brge	.+30     	; 0x286a <fputc+0x4a>
    284c:	e8 81       	ld	r30, Y
    284e:	f9 81       	ldd	r31, Y+1	; 0x01
    2850:	9f 01       	movw	r18, r30
    2852:	2f 5f       	subi	r18, 0xFF	; 255
    2854:	3f 4f       	sbci	r19, 0xFF	; 255
    2856:	28 83       	st	Y, r18
    2858:	39 83       	std	Y+1, r19	; 0x01
    285a:	10 83       	st	Z, r17
    285c:	06 c0       	rjmp	.+12     	; 0x286a <fputc+0x4a>
    285e:	e8 85       	ldd	r30, Y+8	; 0x08
    2860:	f9 85       	ldd	r31, Y+9	; 0x09
    2862:	81 2f       	mov	r24, r17
    2864:	09 95       	icall
    2866:	89 2b       	or	r24, r25
    2868:	29 f7       	brne	.-54     	; 0x2834 <fputc+0x14>
    286a:	2e 81       	ldd	r18, Y+6	; 0x06
    286c:	3f 81       	ldd	r19, Y+7	; 0x07
    286e:	2f 5f       	subi	r18, 0xFF	; 255
    2870:	3f 4f       	sbci	r19, 0xFF	; 255
    2872:	2e 83       	std	Y+6, r18	; 0x06
    2874:	3f 83       	std	Y+7, r19	; 0x07
    2876:	81 2f       	mov	r24, r17
    2878:	90 2f       	mov	r25, r16
    287a:	df 91       	pop	r29
    287c:	cf 91       	pop	r28
    287e:	1f 91       	pop	r17
    2880:	0f 91       	pop	r16
    2882:	08 95       	ret

00002884 <__ultoa_invert>:
    2884:	fa 01       	movw	r30, r20
    2886:	aa 27       	eor	r26, r26
    2888:	28 30       	cpi	r18, 0x08	; 8
    288a:	51 f1       	breq	.+84     	; 0x28e0 <__ultoa_invert+0x5c>
    288c:	20 31       	cpi	r18, 0x10	; 16
    288e:	81 f1       	breq	.+96     	; 0x28f0 <__ultoa_invert+0x6c>
    2890:	e8 94       	clt
    2892:	6f 93       	push	r22
    2894:	6e 7f       	andi	r22, 0xFE	; 254
    2896:	6e 5f       	subi	r22, 0xFE	; 254
    2898:	7f 4f       	sbci	r23, 0xFF	; 255
    289a:	8f 4f       	sbci	r24, 0xFF	; 255
    289c:	9f 4f       	sbci	r25, 0xFF	; 255
    289e:	af 4f       	sbci	r26, 0xFF	; 255
    28a0:	b1 e0       	ldi	r27, 0x01	; 1
    28a2:	3e d0       	rcall	.+124    	; 0x2920 <__ultoa_invert+0x9c>
    28a4:	b4 e0       	ldi	r27, 0x04	; 4
    28a6:	3c d0       	rcall	.+120    	; 0x2920 <__ultoa_invert+0x9c>
    28a8:	67 0f       	add	r22, r23
    28aa:	78 1f       	adc	r23, r24
    28ac:	89 1f       	adc	r24, r25
    28ae:	9a 1f       	adc	r25, r26
    28b0:	a1 1d       	adc	r26, r1
    28b2:	68 0f       	add	r22, r24
    28b4:	79 1f       	adc	r23, r25
    28b6:	8a 1f       	adc	r24, r26
    28b8:	91 1d       	adc	r25, r1
    28ba:	a1 1d       	adc	r26, r1
    28bc:	6a 0f       	add	r22, r26
    28be:	71 1d       	adc	r23, r1
    28c0:	81 1d       	adc	r24, r1
    28c2:	91 1d       	adc	r25, r1
    28c4:	a1 1d       	adc	r26, r1
    28c6:	20 d0       	rcall	.+64     	; 0x2908 <__ultoa_invert+0x84>
    28c8:	09 f4       	brne	.+2      	; 0x28cc <__ultoa_invert+0x48>
    28ca:	68 94       	set
    28cc:	3f 91       	pop	r19
    28ce:	2a e0       	ldi	r18, 0x0A	; 10
    28d0:	26 9f       	mul	r18, r22
    28d2:	11 24       	eor	r1, r1
    28d4:	30 19       	sub	r19, r0
    28d6:	30 5d       	subi	r19, 0xD0	; 208
    28d8:	31 93       	st	Z+, r19
    28da:	de f6       	brtc	.-74     	; 0x2892 <__ultoa_invert+0xe>
    28dc:	cf 01       	movw	r24, r30
    28de:	08 95       	ret
    28e0:	46 2f       	mov	r20, r22
    28e2:	47 70       	andi	r20, 0x07	; 7
    28e4:	40 5d       	subi	r20, 0xD0	; 208
    28e6:	41 93       	st	Z+, r20
    28e8:	b3 e0       	ldi	r27, 0x03	; 3
    28ea:	0f d0       	rcall	.+30     	; 0x290a <__ultoa_invert+0x86>
    28ec:	c9 f7       	brne	.-14     	; 0x28e0 <__ultoa_invert+0x5c>
    28ee:	f6 cf       	rjmp	.-20     	; 0x28dc <__ultoa_invert+0x58>
    28f0:	46 2f       	mov	r20, r22
    28f2:	4f 70       	andi	r20, 0x0F	; 15
    28f4:	40 5d       	subi	r20, 0xD0	; 208
    28f6:	4a 33       	cpi	r20, 0x3A	; 58
    28f8:	18 f0       	brcs	.+6      	; 0x2900 <__ultoa_invert+0x7c>
    28fa:	49 5d       	subi	r20, 0xD9	; 217
    28fc:	31 fd       	sbrc	r19, 1
    28fe:	40 52       	subi	r20, 0x20	; 32
    2900:	41 93       	st	Z+, r20
    2902:	02 d0       	rcall	.+4      	; 0x2908 <__ultoa_invert+0x84>
    2904:	a9 f7       	brne	.-22     	; 0x28f0 <__ultoa_invert+0x6c>
    2906:	ea cf       	rjmp	.-44     	; 0x28dc <__ultoa_invert+0x58>
    2908:	b4 e0       	ldi	r27, 0x04	; 4
    290a:	a6 95       	lsr	r26
    290c:	97 95       	ror	r25
    290e:	87 95       	ror	r24
    2910:	77 95       	ror	r23
    2912:	67 95       	ror	r22
    2914:	ba 95       	dec	r27
    2916:	c9 f7       	brne	.-14     	; 0x290a <__ultoa_invert+0x86>
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	61 05       	cpc	r22, r1
    291c:	71 05       	cpc	r23, r1
    291e:	08 95       	ret
    2920:	9b 01       	movw	r18, r22
    2922:	ac 01       	movw	r20, r24
    2924:	0a 2e       	mov	r0, r26
    2926:	06 94       	lsr	r0
    2928:	57 95       	ror	r21
    292a:	47 95       	ror	r20
    292c:	37 95       	ror	r19
    292e:	27 95       	ror	r18
    2930:	ba 95       	dec	r27
    2932:	c9 f7       	brne	.-14     	; 0x2926 <__ultoa_invert+0xa2>
    2934:	62 0f       	add	r22, r18
    2936:	73 1f       	adc	r23, r19
    2938:	84 1f       	adc	r24, r20
    293a:	95 1f       	adc	r25, r21
    293c:	a0 1d       	adc	r26, r0
    293e:	08 95       	ret

00002940 <_exit>:
    2940:	f8 94       	cli

00002942 <__stop_program>:
    2942:	ff cf       	rjmp	.-2      	; 0x2942 <__stop_program>
