
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000626  00802000  00001b36  00001bca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000186  00802626  00802626  000021f0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000908  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00013215  00000000  00000000  00002b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002df6  00000000  00000000  00015d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00008485  00000000  00000000  00018b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000238c  00000000  00000000  00020fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003af7  00000000  00000000  00023370  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f87b  00000000  00000000  00026e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000978  00000000  00000000  000366e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c3       	rjmp	.+1782   	; 0x6f8 <__ctors_end>
       2:	00 00       	nop
       4:	97 c3       	rjmp	.+1838   	; 0x734 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c3       	rjmp	.+1834   	; 0x734 <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c3       	rjmp	.+1830   	; 0x734 <__bad_interrupt>
       e:	00 00       	nop
      10:	91 c3       	rjmp	.+1826   	; 0x734 <__bad_interrupt>
      12:	00 00       	nop
      14:	8f c3       	rjmp	.+1822   	; 0x734 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c3       	rjmp	.+1818   	; 0x734 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c3       	rjmp	.+1814   	; 0x734 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c3       	rjmp	.+1810   	; 0x734 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c3       	rjmp	.+1806   	; 0x734 <__bad_interrupt>
      26:	00 00       	nop
      28:	fc c6       	rjmp	.+3576   	; 0xe22 <__vector_10>
      2a:	00 00       	nop
      2c:	83 c3       	rjmp	.+1798   	; 0x734 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c3       	rjmp	.+1794   	; 0x734 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c3       	rjmp	.+1790   	; 0x734 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_14>
      3c:	7b c3       	rjmp	.+1782   	; 0x734 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c3       	rjmp	.+1778   	; 0x734 <__bad_interrupt>
      42:	00 00       	nop
      44:	77 c3       	rjmp	.+1774   	; 0x734 <__bad_interrupt>
      46:	00 00       	nop
      48:	75 c3       	rjmp	.+1770   	; 0x734 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c3       	rjmp	.+1766   	; 0x734 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 12 0a 	jmp	0x1424	; 0x1424 <__vector_20>
      54:	6f c3       	rjmp	.+1758   	; 0x734 <__bad_interrupt>
      56:	00 00       	nop
      58:	6d c3       	rjmp	.+1754   	; 0x734 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c3       	rjmp	.+1750   	; 0x734 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c3       	rjmp	.+1746   	; 0x734 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c3       	rjmp	.+1742   	; 0x734 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c3       	rjmp	.+1738   	; 0x734 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c3       	rjmp	.+1734   	; 0x734 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c3       	rjmp	.+1730   	; 0x734 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c3       	rjmp	.+1726   	; 0x734 <__bad_interrupt>
      76:	00 00       	nop
      78:	5d c3       	rjmp	.+1722   	; 0x734 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5b c3       	rjmp	.+1718   	; 0x734 <__bad_interrupt>
      7e:	00 00       	nop
      80:	59 c3       	rjmp	.+1714   	; 0x734 <__bad_interrupt>
      82:	00 00       	nop
      84:	57 c3       	rjmp	.+1710   	; 0x734 <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c6       	rjmp	.+3136   	; 0xcca <__vector_34>
      8a:	00 00       	nop
      8c:	53 c3       	rjmp	.+1702   	; 0x734 <__bad_interrupt>
      8e:	00 00       	nop
      90:	51 c3       	rjmp	.+1698   	; 0x734 <__bad_interrupt>
      92:	00 00       	nop
      94:	4f c3       	rjmp	.+1694   	; 0x734 <__bad_interrupt>
      96:	00 00       	nop
      98:	4d c3       	rjmp	.+1690   	; 0x734 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4b c3       	rjmp	.+1686   	; 0x734 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	49 c3       	rjmp	.+1682   	; 0x734 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	47 c3       	rjmp	.+1678   	; 0x734 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	45 c3       	rjmp	.+1674   	; 0x734 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 c3       	rjmp	.+1670   	; 0x734 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	41 c3       	rjmp	.+1666   	; 0x734 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3f c3       	rjmp	.+1662   	; 0x734 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3d c3       	rjmp	.+1658   	; 0x734 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3b c3       	rjmp	.+1654   	; 0x734 <__bad_interrupt>
      be:	00 00       	nop
      c0:	39 c3       	rjmp	.+1650   	; 0x734 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	37 c3       	rjmp	.+1646   	; 0x734 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	35 c3       	rjmp	.+1642   	; 0x734 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 c3       	rjmp	.+1638   	; 0x734 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	31 c3       	rjmp	.+1634   	; 0x734 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2f c3       	rjmp	.+1630   	; 0x734 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c3       	rjmp	.+1626   	; 0x734 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2b c3       	rjmp	.+1622   	; 0x734 <__bad_interrupt>
      de:	00 00       	nop
      e0:	29 c3       	rjmp	.+1618   	; 0x734 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	27 c3       	rjmp	.+1614   	; 0x734 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	25 c3       	rjmp	.+1610   	; 0x734 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	23 c3       	rjmp	.+1606   	; 0x734 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	21 c3       	rjmp	.+1602   	; 0x734 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	1f c3       	rjmp	.+1598   	; 0x734 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	1d c3       	rjmp	.+1594   	; 0x734 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	1b c3       	rjmp	.+1590   	; 0x734 <__bad_interrupt>
      fe:	00 00       	nop
     100:	19 c3       	rjmp	.+1586   	; 0x734 <__bad_interrupt>
     102:	00 00       	nop
     104:	17 c3       	rjmp	.+1582   	; 0x734 <__bad_interrupt>
     106:	00 00       	nop
     108:	b7 c5       	rjmp	.+2926   	; 0xc78 <__vector_66>
     10a:	00 00       	nop
     10c:	13 c3       	rjmp	.+1574   	; 0x734 <__bad_interrupt>
     10e:	00 00       	nop
     110:	11 c3       	rjmp	.+1570   	; 0x734 <__bad_interrupt>
     112:	00 00       	nop
     114:	0f c3       	rjmp	.+1566   	; 0x734 <__bad_interrupt>
     116:	00 00       	nop
     118:	0d c3       	rjmp	.+1562   	; 0x734 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0b c3       	rjmp	.+1558   	; 0x734 <__bad_interrupt>
     11e:	00 00       	nop
     120:	09 c3       	rjmp	.+1554   	; 0x734 <__bad_interrupt>
     122:	00 00       	nop
     124:	07 c3       	rjmp	.+1550   	; 0x734 <__bad_interrupt>
     126:	00 00       	nop
     128:	05 c3       	rjmp	.+1546   	; 0x734 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	03 c3       	rjmp	.+1542   	; 0x734 <__bad_interrupt>
     12e:	00 00       	nop
     130:	01 c3       	rjmp	.+1538   	; 0x734 <__bad_interrupt>
     132:	00 00       	nop
     134:	ff c2       	rjmp	.+1534   	; 0x734 <__bad_interrupt>
     136:	00 00       	nop
     138:	fd c2       	rjmp	.+1530   	; 0x734 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	fb c2       	rjmp	.+1526   	; 0x734 <__bad_interrupt>
     13e:	00 00       	nop
     140:	f9 c2       	rjmp	.+1522   	; 0x734 <__bad_interrupt>
     142:	00 00       	nop
     144:	f7 c2       	rjmp	.+1518   	; 0x734 <__bad_interrupt>
     146:	00 00       	nop
     148:	f5 c2       	rjmp	.+1514   	; 0x734 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	f3 c2       	rjmp	.+1510   	; 0x734 <__bad_interrupt>
     14e:	00 00       	nop
     150:	f1 c2       	rjmp	.+1506   	; 0x734 <__bad_interrupt>
     152:	00 00       	nop
     154:	ef c2       	rjmp	.+1502   	; 0x734 <__bad_interrupt>
     156:	00 00       	nop
     158:	ed c2       	rjmp	.+1498   	; 0x734 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	eb c2       	rjmp	.+1494   	; 0x734 <__bad_interrupt>
     15e:	00 00       	nop
     160:	fd c2       	rjmp	.+1530   	; 0x75c <__vector_88>
     162:	00 00       	nop
     164:	e7 c2       	rjmp	.+1486   	; 0x734 <__bad_interrupt>
     166:	00 00       	nop
     168:	e5 c2       	rjmp	.+1482   	; 0x734 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	e3 c2       	rjmp	.+1478   	; 0x734 <__bad_interrupt>
     16e:	00 00       	nop
     170:	e1 c2       	rjmp	.+1474   	; 0x734 <__bad_interrupt>
     172:	00 00       	nop
     174:	df c2       	rjmp	.+1470   	; 0x734 <__bad_interrupt>
     176:	00 00       	nop
     178:	dd c2       	rjmp	.+1466   	; 0x734 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	db c2       	rjmp	.+1462   	; 0x734 <__bad_interrupt>
     17e:	00 00       	nop
     180:	d9 c2       	rjmp	.+1458   	; 0x734 <__bad_interrupt>
     182:	00 00       	nop
     184:	d7 c2       	rjmp	.+1454   	; 0x734 <__bad_interrupt>
     186:	00 00       	nop
     188:	d5 c2       	rjmp	.+1450   	; 0x734 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d3 c2       	rjmp	.+1446   	; 0x734 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d1 c2       	rjmp	.+1442   	; 0x734 <__bad_interrupt>
     192:	00 00       	nop
     194:	cf c2       	rjmp	.+1438   	; 0x734 <__bad_interrupt>
     196:	00 00       	nop
     198:	cd c2       	rjmp	.+1434   	; 0x734 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	cb c2       	rjmp	.+1430   	; 0x734 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	c9 c2       	rjmp	.+1426   	; 0x734 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	c7 c2       	rjmp	.+1422   	; 0x734 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	c5 c2       	rjmp	.+1418   	; 0x734 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c3 c2       	rjmp	.+1414   	; 0x734 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	c1 c2       	rjmp	.+1410   	; 0x734 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	bf c2       	rjmp	.+1406   	; 0x734 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	bd c2       	rjmp	.+1402   	; 0x734 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	bb c2       	rjmp	.+1398   	; 0x734 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	b9 c2       	rjmp	.+1394   	; 0x734 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	b7 c2       	rjmp	.+1390   	; 0x734 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	b5 c2       	rjmp	.+1386   	; 0x734 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b3 c2       	rjmp	.+1382   	; 0x734 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b1 c2       	rjmp	.+1378   	; 0x734 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	af c2       	rjmp	.+1374   	; 0x734 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	ad c2       	rjmp	.+1370   	; 0x734 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	ab c2       	rjmp	.+1366   	; 0x734 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	a9 c2       	rjmp	.+1362   	; 0x734 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	a7 c2       	rjmp	.+1358   	; 0x734 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	a5 c2       	rjmp	.+1354   	; 0x734 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a3 c2       	rjmp	.+1350   	; 0x734 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a1 c2       	rjmp	.+1346   	; 0x734 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	9f c2       	rjmp	.+1342   	; 0x734 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	9d c2       	rjmp	.+1338   	; 0x734 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 3e       	cpi	r16, 0xE0	; 224
     202:	5b 4f       	sbci	r21, 0xFB	; 251
     204:	5b 3e       	cpi	r21, 0xEB	; 235
     206:	3e 6b       	ori	r19, 0xBE	; 190
     208:	4f 6b       	ori	r20, 0xBF	; 191
     20a:	3e 1c       	adc	r3, r14
     20c:	3e 7c       	andi	r19, 0xCE	; 206
     20e:	3e 1c       	adc	r3, r14
     210:	18 3c       	cpi	r17, 0xC8	; 200
     212:	7e 3c       	cpi	r23, 0xCE	; 206
     214:	18 1c       	adc	r1, r8
     216:	57 7d       	andi	r21, 0xD7	; 215
     218:	57 1c       	adc	r5, r7
     21a:	1c 5e       	subi	r17, 0xEC	; 236
     21c:	7f 5e       	subi	r23, 0xEF	; 239
     21e:	1c 00       	.word	0x001c	; ????
     220:	18 3c       	cpi	r17, 0xC8	; 200
     222:	18 00       	.word	0x0018	; ????
     224:	ff e7       	ldi	r31, 0x7F	; 127
     226:	c3 e7       	ldi	r28, 0x73	; 115
     228:	ff 00       	.word	0x00ff	; ????
     22a:	18 24       	eor	r1, r8
     22c:	18 00       	.word	0x0018	; ????
     22e:	ff e7       	ldi	r31, 0x7F	; 127
     230:	db e7       	ldi	r29, 0x7B	; 123
     232:	ff 30       	cpi	r31, 0x0F	; 15
     234:	48 3a       	cpi	r20, 0xA8	; 168
     236:	06 0e       	add	r0, r22
     238:	26 29       	or	r18, r6
     23a:	79 29       	or	r23, r9
     23c:	26 40       	sbci	r18, 0x06	; 6
     23e:	7f 05       	cpc	r23, r15
     240:	05 07       	cpc	r16, r21
     242:	40 7f       	andi	r20, 0xF0	; 240
     244:	05 25       	eor	r16, r5
     246:	3f 5a       	subi	r19, 0xAF	; 175
     248:	3c e7       	ldi	r19, 0x7C	; 124
     24a:	3c 5a       	subi	r19, 0xAC	; 172
     24c:	7f 3e       	cpi	r23, 0xEF	; 239
     24e:	1c 1c       	adc	r1, r12
     250:	08 08       	sbc	r0, r8
     252:	1c 1c       	adc	r1, r12
     254:	3e 7f       	andi	r19, 0xFE	; 254
     256:	14 22       	and	r1, r20
     258:	7f 22       	and	r7, r31
     25a:	14 5f       	subi	r17, 0xF4	; 244
     25c:	5f 00       	.word	0x005f	; ????
     25e:	5f 5f       	subi	r21, 0xFF	; 255
     260:	06 09       	sbc	r16, r6
     262:	7f 01       	movw	r14, r30
     264:	7f 00       	.word	0x007f	; ????
     266:	66 89       	ldd	r22, Z+22	; 0x16
     268:	95 6a       	ori	r25, 0xA5	; 165
     26a:	60 60       	ori	r22, 0x00	; 0
     26c:	60 60       	ori	r22, 0x00	; 0
     26e:	60 94       	com	r6
     270:	a2 ff       	sbrs	r26, 2
     272:	a2 94       	swap	r10
     274:	08 04       	cpc	r0, r8
     276:	7e 04       	cpc	r7, r14
     278:	08 10       	cpse	r0, r8
     27a:	20 7e       	andi	r18, 0xE0	; 224
     27c:	20 10       	cpse	r2, r0
     27e:	08 08       	sbc	r0, r8
     280:	2a 1c       	adc	r2, r10
     282:	08 08       	sbc	r0, r8
     284:	1c 2a       	or	r1, r28
     286:	08 08       	sbc	r0, r8
     288:	1e 10       	cpse	r1, r14
     28a:	10 10       	cpse	r1, r0
     28c:	10 0c       	add	r1, r0
     28e:	1e 0c       	add	r1, r14
     290:	1e 0c       	add	r1, r14
     292:	30 38       	cpi	r19, 0x80	; 128
     294:	3e 38       	cpi	r19, 0x8E	; 142
     296:	30 06       	cpc	r3, r16
     298:	0e 3e       	cpi	r16, 0xEE	; 238
     29a:	0e 06       	cpc	r0, r30
     29c:	00 00       	nop
     29e:	00 00       	nop
     2a0:	00 00       	nop
     2a2:	00 5f       	subi	r16, 0xF0	; 240
     2a4:	00 00       	nop
     2a6:	00 07       	cpc	r16, r16
     2a8:	00 07       	cpc	r16, r16
     2aa:	00 14       	cp	r0, r0
     2ac:	7f 14       	cp	r7, r15
     2ae:	7f 14       	cp	r7, r15
     2b0:	24 2a       	or	r2, r20
     2b2:	7f 2a       	or	r7, r31
     2b4:	12 23       	and	r17, r18
     2b6:	13 08       	sbc	r1, r3
     2b8:	64 62       	ori	r22, 0x24	; 36
     2ba:	36 49       	sbci	r19, 0x96	; 150
     2bc:	56 20       	and	r5, r6
     2be:	50 00       	.word	0x0050	; ????
     2c0:	08 07       	cpc	r16, r24
     2c2:	03 00       	.word	0x0003	; ????
     2c4:	00 1c       	adc	r0, r0
     2c6:	22 41       	sbci	r18, 0x12	; 18
     2c8:	00 00       	nop
     2ca:	41 22       	and	r4, r17
     2cc:	1c 00       	.word	0x001c	; ????
     2ce:	2a 1c       	adc	r2, r10
     2d0:	7f 1c       	adc	r7, r15
     2d2:	2a 08       	sbc	r2, r10
     2d4:	08 3e       	cpi	r16, 0xE8	; 232
     2d6:	08 08       	sbc	r0, r8
     2d8:	00 80       	ld	r0, Z
     2da:	70 30       	cpi	r23, 0x00	; 0
     2dc:	00 08       	sbc	r0, r0
     2de:	08 08       	sbc	r0, r8
     2e0:	08 08       	sbc	r0, r8
     2e2:	00 00       	nop
     2e4:	60 60       	ori	r22, 0x00	; 0
     2e6:	00 20       	and	r0, r0
     2e8:	10 08       	sbc	r1, r0
     2ea:	04 02       	muls	r16, r20
     2ec:	3e 51       	subi	r19, 0x1E	; 30
     2ee:	49 45       	sbci	r20, 0x59	; 89
     2f0:	3e 00       	.word	0x003e	; ????
     2f2:	42 7f       	andi	r20, 0xF2	; 242
     2f4:	40 00       	.word	0x0040	; ????
     2f6:	72 49       	sbci	r23, 0x92	; 146
     2f8:	49 49       	sbci	r20, 0x99	; 153
     2fa:	46 21       	and	r20, r6
     2fc:	41 49       	sbci	r20, 0x91	; 145
     2fe:	4d 33       	cpi	r20, 0x3D	; 61
     300:	18 14       	cp	r1, r8
     302:	12 7f       	andi	r17, 0xF2	; 242
     304:	10 27       	eor	r17, r16
     306:	45 45       	sbci	r20, 0x55	; 85
     308:	45 39       	cpi	r20, 0x95	; 149
     30a:	3c 4a       	sbci	r19, 0xAC	; 172
     30c:	49 49       	sbci	r20, 0x99	; 153
     30e:	31 41       	sbci	r19, 0x11	; 17
     310:	21 11       	cpse	r18, r1
     312:	09 07       	cpc	r16, r25
     314:	36 49       	sbci	r19, 0x96	; 150
     316:	49 49       	sbci	r20, 0x99	; 153
     318:	36 46       	sbci	r19, 0x66	; 102
     31a:	49 49       	sbci	r20, 0x99	; 153
     31c:	29 1e       	adc	r2, r25
     31e:	00 00       	nop
     320:	14 00       	.word	0x0014	; ????
     322:	00 00       	nop
     324:	40 34       	cpi	r20, 0x40	; 64
     326:	00 00       	nop
     328:	00 08       	sbc	r0, r0
     32a:	14 22       	and	r1, r20
     32c:	41 14       	cp	r4, r1
     32e:	14 14       	cp	r1, r4
     330:	14 14       	cp	r1, r4
     332:	00 41       	sbci	r16, 0x10	; 16
     334:	22 14       	cp	r2, r2
     336:	08 02       	muls	r16, r24
     338:	01 59       	subi	r16, 0x91	; 145
     33a:	09 06       	cpc	r0, r25
     33c:	3e 41       	sbci	r19, 0x1E	; 30
     33e:	5d 59       	subi	r21, 0x9D	; 157
     340:	4e 7c       	andi	r20, 0xCE	; 206
     342:	12 11       	cpse	r17, r2
     344:	12 7c       	andi	r17, 0xC2	; 194
     346:	7f 49       	sbci	r23, 0x9F	; 159
     348:	49 49       	sbci	r20, 0x99	; 153
     34a:	36 3e       	cpi	r19, 0xE6	; 230
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	41 22       	and	r4, r17
     350:	7f 41       	sbci	r23, 0x1F	; 31
     352:	41 41       	sbci	r20, 0x11	; 17
     354:	3e 7f       	andi	r19, 0xFE	; 254
     356:	49 49       	sbci	r20, 0x99	; 153
     358:	49 41       	sbci	r20, 0x19	; 25
     35a:	7f 09       	sbc	r23, r15
     35c:	09 09       	sbc	r16, r9
     35e:	01 3e       	cpi	r16, 0xE1	; 225
     360:	41 41       	sbci	r20, 0x11	; 17
     362:	51 73       	andi	r21, 0x31	; 49
     364:	7f 08       	sbc	r7, r15
     366:	08 08       	sbc	r0, r8
     368:	7f 00       	.word	0x007f	; ????
     36a:	41 7f       	andi	r20, 0xF1	; 241
     36c:	41 00       	.word	0x0041	; ????
     36e:	20 40       	sbci	r18, 0x00	; 0
     370:	41 3f       	cpi	r20, 0xF1	; 241
     372:	01 7f       	andi	r16, 0xF1	; 241
     374:	08 14       	cp	r0, r8
     376:	22 41       	sbci	r18, 0x12	; 18
     378:	7f 40       	sbci	r23, 0x0F	; 15
     37a:	40 40       	sbci	r20, 0x00	; 0
     37c:	40 7f       	andi	r20, 0xF0	; 240
     37e:	02 1c       	adc	r0, r2
     380:	02 7f       	andi	r16, 0xF2	; 242
     382:	7f 04       	cpc	r7, r15
     384:	08 10       	cpse	r0, r8
     386:	7f 3e       	cpi	r23, 0xEF	; 239
     388:	41 41       	sbci	r20, 0x11	; 17
     38a:	41 3e       	cpi	r20, 0xE1	; 225
     38c:	7f 09       	sbc	r23, r15
     38e:	09 09       	sbc	r16, r9
     390:	06 3e       	cpi	r16, 0xE6	; 230
     392:	41 51       	subi	r20, 0x11	; 17
     394:	21 5e       	subi	r18, 0xE1	; 225
     396:	7f 09       	sbc	r23, r15
     398:	19 29       	or	r17, r9
     39a:	46 26       	eor	r4, r22
     39c:	49 49       	sbci	r20, 0x99	; 153
     39e:	49 32       	cpi	r20, 0x29	; 41
     3a0:	03 01       	movw	r0, r6
     3a2:	7f 01       	movw	r14, r30
     3a4:	03 3f       	cpi	r16, 0xF3	; 243
     3a6:	40 40       	sbci	r20, 0x00	; 0
     3a8:	40 3f       	cpi	r20, 0xF0	; 240
     3aa:	1f 20       	and	r1, r15
     3ac:	40 20       	and	r4, r0
     3ae:	1f 3f       	cpi	r17, 0xFF	; 255
     3b0:	40 38       	cpi	r20, 0x80	; 128
     3b2:	40 3f       	cpi	r20, 0xF0	; 240
     3b4:	63 14       	cp	r6, r3
     3b6:	08 14       	cp	r0, r8
     3b8:	63 03       	mulsu	r22, r19
     3ba:	04 78       	andi	r16, 0x84	; 132
     3bc:	04 03       	mulsu	r16, r20
     3be:	61 59       	subi	r22, 0x91	; 145
     3c0:	49 4d       	sbci	r20, 0xD9	; 217
     3c2:	43 00       	.word	0x0043	; ????
     3c4:	7f 41       	sbci	r23, 0x1F	; 31
     3c6:	41 41       	sbci	r20, 0x11	; 17
     3c8:	02 04       	cpc	r0, r2
     3ca:	08 10       	cpse	r0, r8
     3cc:	20 00       	.word	0x0020	; ????
     3ce:	41 41       	sbci	r20, 0x11	; 17
     3d0:	41 7f       	andi	r20, 0xF1	; 241
     3d2:	04 02       	muls	r16, r20
     3d4:	01 02       	muls	r16, r17
     3d6:	04 40       	sbci	r16, 0x04	; 4
     3d8:	40 40       	sbci	r20, 0x00	; 0
     3da:	40 40       	sbci	r20, 0x00	; 0
     3dc:	00 03       	mulsu	r16, r16
     3de:	07 08       	sbc	r0, r7
     3e0:	00 20       	and	r0, r0
     3e2:	54 54       	subi	r21, 0x44	; 68
     3e4:	78 40       	sbci	r23, 0x08	; 8
     3e6:	7f 28       	or	r7, r15
     3e8:	44 44       	sbci	r20, 0x44	; 68
     3ea:	38 38       	cpi	r19, 0x88	; 136
     3ec:	44 44       	sbci	r20, 0x44	; 68
     3ee:	44 28       	or	r4, r4
     3f0:	38 44       	sbci	r19, 0x48	; 72
     3f2:	44 28       	or	r4, r4
     3f4:	7f 38       	cpi	r23, 0x8F	; 143
     3f6:	54 54       	subi	r21, 0x44	; 68
     3f8:	54 18       	sub	r5, r4
     3fa:	00 08       	sbc	r0, r0
     3fc:	7e 09       	sbc	r23, r14
     3fe:	02 18       	sub	r0, r2
     400:	a4 a4       	ldd	r10, Z+44	; 0x2c
     402:	9c 78       	andi	r25, 0x8C	; 140
     404:	7f 08       	sbc	r7, r15
     406:	04 04       	cpc	r0, r4
     408:	78 00       	.word	0x0078	; ????
     40a:	44 7d       	andi	r20, 0xD4	; 212
     40c:	40 00       	.word	0x0040	; ????
     40e:	20 40       	sbci	r18, 0x00	; 0
     410:	40 3d       	cpi	r20, 0xD0	; 208
     412:	00 7f       	andi	r16, 0xF0	; 240
     414:	10 28       	or	r1, r0
     416:	44 00       	.word	0x0044	; ????
     418:	00 41       	sbci	r16, 0x10	; 16
     41a:	7f 40       	sbci	r23, 0x0F	; 15
     41c:	00 7c       	andi	r16, 0xC0	; 192
     41e:	04 78       	andi	r16, 0x84	; 132
     420:	04 78       	andi	r16, 0x84	; 132
     422:	7c 08       	sbc	r7, r12
     424:	04 04       	cpc	r0, r4
     426:	78 38       	cpi	r23, 0x88	; 136
     428:	44 44       	sbci	r20, 0x44	; 68
     42a:	44 38       	cpi	r20, 0x84	; 132
     42c:	fc 18       	sub	r15, r12
     42e:	24 24       	eor	r2, r4
     430:	18 18       	sub	r1, r8
     432:	24 24       	eor	r2, r4
     434:	18 fc       	.word	0xfc18	; ????
     436:	7c 08       	sbc	r7, r12
     438:	04 04       	cpc	r0, r4
     43a:	08 48       	sbci	r16, 0x88	; 136
     43c:	54 54       	subi	r21, 0x44	; 68
     43e:	54 24       	eor	r5, r4
     440:	04 04       	cpc	r0, r4
     442:	3f 44       	sbci	r19, 0x4F	; 79
     444:	24 3c       	cpi	r18, 0xC4	; 196
     446:	40 40       	sbci	r20, 0x00	; 0
     448:	20 7c       	andi	r18, 0xC0	; 192
     44a:	1c 20       	and	r1, r12
     44c:	40 20       	and	r4, r0
     44e:	1c 3c       	cpi	r17, 0xCC	; 204
     450:	40 30       	cpi	r20, 0x00	; 0
     452:	40 3c       	cpi	r20, 0xC0	; 192
     454:	44 28       	or	r4, r4
     456:	10 28       	or	r1, r0
     458:	44 4c       	sbci	r20, 0xC4	; 196
     45a:	90 90 90 7c 	lds	r9, 0x7C90
     45e:	44 64       	ori	r20, 0x44	; 68
     460:	54 4c       	sbci	r21, 0xC4	; 196
     462:	44 00       	.word	0x0044	; ????
     464:	08 36       	cpi	r16, 0x68	; 104
     466:	41 00       	.word	0x0041	; ????
     468:	00 00       	nop
     46a:	77 00       	.word	0x0077	; ????
     46c:	00 00       	nop
     46e:	41 36       	cpi	r20, 0x61	; 97
     470:	08 00       	.word	0x0008	; ????
     472:	02 01       	movw	r0, r4
     474:	02 04       	cpc	r0, r2
     476:	02 3c       	cpi	r16, 0xC2	; 194
     478:	26 23       	and	r18, r22
     47a:	26 3c       	cpi	r18, 0xC6	; 198
     47c:	1e a1       	ldd	r17, Y+38	; 0x26
     47e:	a1 61       	ori	r26, 0x11	; 17
     480:	12 3a       	cpi	r17, 0xA2	; 162
     482:	40 40       	sbci	r20, 0x00	; 0
     484:	20 7a       	andi	r18, 0xA0	; 160
     486:	38 54       	subi	r19, 0x48	; 72
     488:	54 55       	subi	r21, 0x54	; 84
     48a:	59 21       	and	r21, r9
     48c:	55 55       	subi	r21, 0x55	; 85
     48e:	79 41       	sbci	r23, 0x19	; 25
     490:	21 54       	subi	r18, 0x41	; 65
     492:	54 78       	andi	r21, 0x84	; 132
     494:	41 21       	and	r20, r1
     496:	55 54       	subi	r21, 0x45	; 69
     498:	78 40       	sbci	r23, 0x08	; 8
     49a:	20 54       	subi	r18, 0x40	; 64
     49c:	55 79       	andi	r21, 0x95	; 149
     49e:	40 0c       	add	r4, r0
     4a0:	1e 52       	subi	r17, 0x2E	; 46
     4a2:	72 12       	cpse	r7, r18
     4a4:	39 55       	subi	r19, 0x59	; 89
     4a6:	55 55       	subi	r21, 0x55	; 85
     4a8:	59 39       	cpi	r21, 0x99	; 153
     4aa:	54 54       	subi	r21, 0x44	; 68
     4ac:	54 59       	subi	r21, 0x94	; 148
     4ae:	39 55       	subi	r19, 0x59	; 89
     4b0:	54 54       	subi	r21, 0x44	; 68
     4b2:	58 00       	.word	0x0058	; ????
     4b4:	00 45       	sbci	r16, 0x50	; 80
     4b6:	7c 41       	sbci	r23, 0x1C	; 28
     4b8:	00 02       	muls	r16, r16
     4ba:	45 7d       	andi	r20, 0xD5	; 213
     4bc:	42 00       	.word	0x0042	; ????
     4be:	01 45       	sbci	r16, 0x51	; 81
     4c0:	7c 40       	sbci	r23, 0x0C	; 12
     4c2:	f0 29       	or	r31, r0
     4c4:	24 29       	or	r18, r4
     4c6:	f0 f0       	brcs	.+60     	; 0x504 <__trampolines_end+0x308>
     4c8:	28 25       	eor	r18, r8
     4ca:	28 f0       	brcs	.+10     	; 0x4d6 <__trampolines_end+0x2da>
     4cc:	7c 54       	subi	r23, 0x4C	; 76
     4ce:	55 45       	sbci	r21, 0x55	; 85
     4d0:	00 20       	and	r0, r0
     4d2:	54 54       	subi	r21, 0x44	; 68
     4d4:	7c 54       	subi	r23, 0x4C	; 76
     4d6:	7c 0a       	sbc	r7, r28
     4d8:	09 7f       	andi	r16, 0xF9	; 249
     4da:	49 32       	cpi	r20, 0x29	; 41
     4dc:	49 49       	sbci	r20, 0x99	; 153
     4de:	49 32       	cpi	r20, 0x29	; 41
     4e0:	32 48       	sbci	r19, 0x82	; 130
     4e2:	48 48       	sbci	r20, 0x88	; 136
     4e4:	32 32       	cpi	r19, 0x22	; 34
     4e6:	4a 48       	sbci	r20, 0x8A	; 138
     4e8:	48 30       	cpi	r20, 0x08	; 8
     4ea:	3a 41       	sbci	r19, 0x1A	; 26
     4ec:	41 21       	and	r20, r1
     4ee:	7a 3a       	cpi	r23, 0xAA	; 170
     4f0:	42 40       	sbci	r20, 0x02	; 2
     4f2:	20 78       	andi	r18, 0x80	; 128
     4f4:	00 9d       	mul	r16, r0
     4f6:	a0 a0       	ldd	r10, Z+32	; 0x20
     4f8:	7d 39       	cpi	r23, 0x9D	; 157
     4fa:	44 44       	sbci	r20, 0x44	; 68
     4fc:	44 39       	cpi	r20, 0x94	; 148
     4fe:	3d 40       	sbci	r19, 0x0D	; 13
     500:	40 40       	sbci	r20, 0x00	; 0
     502:	3d 3c       	cpi	r19, 0xCD	; 205
     504:	24 ff       	sbrs	r18, 4
     506:	24 24       	eor	r2, r4
     508:	48 7e       	andi	r20, 0xE8	; 232
     50a:	49 43       	sbci	r20, 0x39	; 57
     50c:	66 2b       	or	r22, r22
     50e:	2f fc       	.word	0xfc2f	; ????
     510:	2f 2b       	or	r18, r31
     512:	ff 09       	sbc	r31, r15
     514:	29 f6       	brne	.-118    	; 0x4a0 <__trampolines_end+0x2a4>
     516:	20 c0       	rjmp	.+64     	; 0x558 <__trampolines_end+0x35c>
     518:	88 7e       	andi	r24, 0xE8	; 232
     51a:	09 03       	fmul	r16, r17
     51c:	20 54       	subi	r18, 0x40	; 64
     51e:	54 79       	andi	r21, 0x94	; 148
     520:	41 00       	.word	0x0041	; ????
     522:	00 44       	sbci	r16, 0x40	; 64
     524:	7d 41       	sbci	r23, 0x1D	; 29
     526:	30 48       	sbci	r19, 0x80	; 128
     528:	48 4a       	sbci	r20, 0xA8	; 168
     52a:	32 38       	cpi	r19, 0x82	; 130
     52c:	40 40       	sbci	r20, 0x00	; 0
     52e:	22 7a       	andi	r18, 0xA2	; 162
     530:	00 7a       	andi	r16, 0xA0	; 160
     532:	0a 0a       	sbc	r0, r26
     534:	72 7d       	andi	r23, 0xD2	; 210
     536:	0d 19       	sub	r16, r13
     538:	31 7d       	andi	r19, 0xD1	; 209
     53a:	26 29       	or	r18, r6
     53c:	29 2f       	mov	r18, r25
     53e:	28 26       	eor	r2, r24
     540:	29 29       	or	r18, r9
     542:	29 26       	eor	r2, r25
     544:	30 48       	sbci	r19, 0x80	; 128
     546:	4d 40       	sbci	r20, 0x0D	; 13
     548:	20 38       	cpi	r18, 0x80	; 128
     54a:	08 08       	sbc	r0, r8
     54c:	08 08       	sbc	r0, r8
     54e:	08 08       	sbc	r0, r8
     550:	08 08       	sbc	r0, r8
     552:	38 2f       	mov	r19, r24
     554:	10 c8       	rjmp	.-4064   	; 0xfffff576 <__eeprom_end+0xff7ef576>
     556:	ac ba       	out	0x1c, r10	; 28
     558:	2f 10       	cpse	r2, r15
     55a:	28 34       	cpi	r18, 0x48	; 72
     55c:	fa 00       	.word	0x00fa	; ????
     55e:	00 7b       	andi	r16, 0xB0	; 176
     560:	00 00       	nop
     562:	08 14       	cp	r0, r8
     564:	2a 14       	cp	r2, r10
     566:	22 22       	and	r2, r18
     568:	14 2a       	or	r1, r20
     56a:	14 08       	sbc	r1, r4
     56c:	aa 00       	.word	0x00aa	; ????
     56e:	55 00       	.word	0x0055	; ????
     570:	aa aa       	std	Y+50, r10	; 0x32
     572:	55 aa       	std	Z+53, r5	; 0x35
     574:	55 aa       	std	Z+53, r5	; 0x35
     576:	00 00       	nop
     578:	00 ff       	sbrs	r16, 0
     57a:	00 10       	cpse	r0, r0
     57c:	10 10       	cpse	r1, r0
     57e:	ff 00       	.word	0x00ff	; ????
     580:	14 14       	cp	r1, r4
     582:	14 ff       	sbrs	r17, 4
     584:	00 10       	cpse	r0, r0
     586:	10 ff       	sbrs	r17, 0
     588:	00 ff       	sbrs	r16, 0
     58a:	10 10       	cpse	r1, r0
     58c:	f0 10       	cpse	r15, r0
     58e:	f0 14       	cp	r15, r0
     590:	14 14       	cp	r1, r4
     592:	fc 00       	.word	0x00fc	; ????
     594:	14 14       	cp	r1, r4
     596:	f7 00       	.word	0x00f7	; ????
     598:	ff 00       	.word	0x00ff	; ????
     59a:	00 ff       	sbrs	r16, 0
     59c:	00 ff       	sbrs	r16, 0
     59e:	14 14       	cp	r1, r4
     5a0:	f4 04       	cpc	r15, r4
     5a2:	fc 14       	cp	r15, r12
     5a4:	14 17       	cp	r17, r20
     5a6:	10 1f       	adc	r17, r16
     5a8:	10 10       	cpse	r1, r0
     5aa:	1f 10       	cpse	r1, r15
     5ac:	1f 14       	cp	r1, r15
     5ae:	14 14       	cp	r1, r4
     5b0:	1f 00       	.word	0x001f	; ????
     5b2:	10 10       	cpse	r1, r0
     5b4:	10 f0       	brcs	.+4      	; 0x5ba <__trampolines_end+0x3be>
     5b6:	00 00       	nop
     5b8:	00 00       	nop
     5ba:	1f 10       	cpse	r1, r15
     5bc:	10 10       	cpse	r1, r0
     5be:	10 1f       	adc	r17, r16
     5c0:	10 10       	cpse	r1, r0
     5c2:	10 10       	cpse	r1, r0
     5c4:	f0 10       	cpse	r15, r0
     5c6:	00 00       	nop
     5c8:	00 ff       	sbrs	r16, 0
     5ca:	10 10       	cpse	r1, r0
     5cc:	10 10       	cpse	r1, r0
     5ce:	10 10       	cpse	r1, r0
     5d0:	10 10       	cpse	r1, r0
     5d2:	10 ff       	sbrs	r17, 0
     5d4:	10 00       	.word	0x0010	; ????
     5d6:	00 00       	nop
     5d8:	ff 14       	cp	r15, r15
     5da:	00 00       	nop
     5dc:	ff 00       	.word	0x00ff	; ????
     5de:	ff 00       	.word	0x00ff	; ????
     5e0:	00 1f       	adc	r16, r16
     5e2:	10 17       	cp	r17, r16
     5e4:	00 00       	nop
     5e6:	fc 04       	cpc	r15, r12
     5e8:	f4 14       	cp	r15, r4
     5ea:	14 17       	cp	r17, r20
     5ec:	10 17       	cp	r17, r16
     5ee:	14 14       	cp	r1, r4
     5f0:	f4 04       	cpc	r15, r4
     5f2:	f4 00       	.word	0x00f4	; ????
     5f4:	00 ff       	sbrs	r16, 0
     5f6:	00 f7       	brcc	.-64     	; 0x5b8 <__trampolines_end+0x3bc>
     5f8:	14 14       	cp	r1, r4
     5fa:	14 14       	cp	r1, r4
     5fc:	14 14       	cp	r1, r4
     5fe:	14 f7       	brge	.-60     	; 0x5c4 <__trampolines_end+0x3c8>
     600:	00 f7       	brcc	.-64     	; 0x5c2 <__trampolines_end+0x3c6>
     602:	14 14       	cp	r1, r4
     604:	14 17       	cp	r17, r20
     606:	14 10       	cpse	r1, r4
     608:	10 1f       	adc	r17, r16
     60a:	10 1f       	adc	r17, r16
     60c:	14 14       	cp	r1, r4
     60e:	14 f4       	brge	.+4      	; 0x614 <__trampolines_end+0x418>
     610:	14 10       	cpse	r1, r4
     612:	10 f0       	brcs	.+4      	; 0x618 <__trampolines_end+0x41c>
     614:	10 f0       	brcs	.+4      	; 0x61a <__trampolines_end+0x41e>
     616:	00 00       	nop
     618:	1f 10       	cpse	r1, r15
     61a:	1f 00       	.word	0x001f	; ????
     61c:	00 00       	nop
     61e:	1f 14       	cp	r1, r15
     620:	00 00       	nop
     622:	00 fc       	sbrc	r0, 0
     624:	14 00       	.word	0x0014	; ????
     626:	00 f0       	brcs	.+0      	; 0x628 <__trampolines_end+0x42c>
     628:	10 f0       	brcs	.+4      	; 0x62e <__trampolines_end+0x432>
     62a:	10 10       	cpse	r1, r0
     62c:	ff 10       	cpse	r15, r15
     62e:	ff 14       	cp	r15, r15
     630:	14 14       	cp	r1, r4
     632:	ff 14       	cp	r15, r15
     634:	10 10       	cpse	r1, r0
     636:	10 1f       	adc	r17, r16
     638:	00 00       	nop
     63a:	00 00       	nop
     63c:	f0 10       	cpse	r15, r0
     63e:	ff ff       	.word	0xffff	; ????
     640:	ff ff       	.word	0xffff	; ????
     642:	ff f0       	brie	.+62     	; 0x682 <__trampolines_end+0x486>
     644:	f0 f0       	brcs	.+60     	; 0x682 <__trampolines_end+0x486>
     646:	f0 f0       	brcs	.+60     	; 0x684 <__trampolines_end+0x488>
     648:	ff ff       	.word	0xffff	; ????
     64a:	ff 00       	.word	0x00ff	; ????
     64c:	00 00       	nop
     64e:	00 00       	nop
     650:	ff ff       	.word	0xffff	; ????
     652:	0f 0f       	add	r16, r31
     654:	0f 0f       	add	r16, r31
     656:	0f 38       	cpi	r16, 0x8F	; 143
     658:	44 44       	sbci	r20, 0x44	; 68
     65a:	38 44       	sbci	r19, 0x48	; 72
     65c:	7c 2a       	or	r7, r28
     65e:	2a 3e       	cpi	r18, 0xEA	; 234
     660:	14 7e       	andi	r17, 0xE4	; 228
     662:	02 02       	muls	r16, r18
     664:	06 06       	cpc	r0, r22
     666:	02 7e       	andi	r16, 0xE2	; 226
     668:	02 7e       	andi	r16, 0xE2	; 226
     66a:	02 63       	ori	r16, 0x32	; 50
     66c:	55 49       	sbci	r21, 0x95	; 149
     66e:	41 63       	ori	r20, 0x31	; 49
     670:	38 44       	sbci	r19, 0x48	; 72
     672:	44 3c       	cpi	r20, 0xC4	; 196
     674:	04 40       	sbci	r16, 0x04	; 4
     676:	7e 20       	and	r7, r14
     678:	1e 20       	and	r1, r14
     67a:	06 02       	muls	r16, r22
     67c:	7e 02       	muls	r23, r30
     67e:	02 99       	sbic	0x00, 2	; 0
     680:	a5 e7       	ldi	r26, 0x75	; 117
     682:	a5 99       	sbic	0x14, 5	; 20
     684:	1c 2a       	or	r1, r28
     686:	49 2a       	or	r4, r25
     688:	1c 4c       	sbci	r17, 0xCC	; 204
     68a:	72 01       	movw	r14, r4
     68c:	72 4c       	sbci	r23, 0xC2	; 194
     68e:	30 4a       	sbci	r19, 0xA0	; 160
     690:	4d 4d       	sbci	r20, 0xDD	; 221
     692:	30 30       	cpi	r19, 0x00	; 0
     694:	48 78       	andi	r20, 0x88	; 136
     696:	48 30       	cpi	r20, 0x08	; 8
     698:	bc 62       	ori	r27, 0x2C	; 44
     69a:	5a 46       	sbci	r21, 0x6A	; 106
     69c:	3d 3e       	cpi	r19, 0xED	; 237
     69e:	49 49       	sbci	r20, 0x99	; 153
     6a0:	49 00       	.word	0x0049	; ????
     6a2:	7e 01       	movw	r14, r28
     6a4:	01 01       	movw	r0, r2
     6a6:	7e 2a       	or	r7, r30
     6a8:	2a 2a       	or	r2, r26
     6aa:	2a 2a       	or	r2, r26
     6ac:	44 44       	sbci	r20, 0x44	; 68
     6ae:	5f 44       	sbci	r21, 0x4F	; 79
     6b0:	44 40       	sbci	r20, 0x04	; 4
     6b2:	51 4a       	sbci	r21, 0xA1	; 161
     6b4:	44 40       	sbci	r20, 0x04	; 4
     6b6:	40 44       	sbci	r20, 0x40	; 64
     6b8:	4a 51       	subi	r20, 0x1A	; 26
     6ba:	40 00       	.word	0x0040	; ????
     6bc:	00 ff       	sbrs	r16, 0
     6be:	01 03       	mulsu	r16, r17
     6c0:	e0 80       	ld	r14, Z
     6c2:	ff 00       	.word	0x00ff	; ????
     6c4:	00 08       	sbc	r0, r0
     6c6:	08 6b       	ori	r16, 0xB8	; 184
     6c8:	6b 08       	sbc	r6, r11
     6ca:	36 12       	cpse	r3, r22
     6cc:	36 24       	eor	r3, r6
     6ce:	36 06       	cpc	r3, r22
     6d0:	0f 09       	sbc	r16, r15
     6d2:	0f 06       	cpc	r0, r31
     6d4:	00 00       	nop
     6d6:	18 18       	sub	r1, r8
     6d8:	00 00       	nop
     6da:	00 10       	cpse	r0, r0
     6dc:	10 00       	.word	0x0010	; ????
     6de:	30 40       	sbci	r19, 0x00	; 0
     6e0:	ff 01       	movw	r30, r30
     6e2:	01 00       	.word	0x0001	; ????
     6e4:	1f 01       	movw	r2, r30
     6e6:	01 1e       	adc	r0, r17
     6e8:	00 19       	sub	r16, r0
     6ea:	1d 17       	cp	r17, r29
     6ec:	12 00       	.word	0x0012	; ????
     6ee:	3c 3c       	cpi	r19, 0xCC	; 204
     6f0:	3c 3c       	cpi	r19, 0xCC	; 204
     6f2:	00 00       	nop
     6f4:	00 00       	nop
	...

000006f8 <__ctors_end>:
     6f8:	11 24       	eor	r1, r1
     6fa:	1f be       	out	0x3f, r1	; 63
     6fc:	cf ef       	ldi	r28, 0xFF	; 255
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	df e2       	ldi	r29, 0x2F	; 47
     702:	de bf       	out	0x3e, r29	; 62

00000704 <__do_copy_data>:
     704:	16 e2       	ldi	r17, 0x26	; 38
     706:	a0 e0       	ldi	r26, 0x00	; 0
     708:	b0 e2       	ldi	r27, 0x20	; 32
     70a:	e6 e3       	ldi	r30, 0x36	; 54
     70c:	fb e1       	ldi	r31, 0x1B	; 27
     70e:	00 e0       	ldi	r16, 0x00	; 0
     710:	0b bf       	out	0x3b, r16	; 59
     712:	02 c0       	rjmp	.+4      	; 0x718 <__do_copy_data+0x14>
     714:	07 90       	elpm	r0, Z+
     716:	0d 92       	st	X+, r0
     718:	a6 32       	cpi	r26, 0x26	; 38
     71a:	b1 07       	cpc	r27, r17
     71c:	d9 f7       	brne	.-10     	; 0x714 <__do_copy_data+0x10>

0000071e <__do_clear_bss>:
     71e:	27 e2       	ldi	r18, 0x27	; 39
     720:	a6 e2       	ldi	r26, 0x26	; 38
     722:	b6 e2       	ldi	r27, 0x26	; 38
     724:	01 c0       	rjmp	.+2      	; 0x728 <.do_clear_bss_start>

00000726 <.do_clear_bss_loop>:
     726:	1d 92       	st	X+, r1

00000728 <.do_clear_bss_start>:
     728:	ac 3a       	cpi	r26, 0xAC	; 172
     72a:	b2 07       	cpc	r27, r18
     72c:	e1 f7       	brne	.-8      	; 0x726 <.do_clear_bss_loop>
     72e:	4e d6       	rcall	.+3228   	; 0x13cc <main>
     730:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <_exit>

00000734 <__bad_interrupt>:
     734:	65 cc       	rjmp	.-1846   	; 0x0 <__vectors>

00000736 <clock_setup_32_mhz>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
}

void clock_setup_32_mhz(void) {
	
	OSC.CTRL |= OSC_RC32MEN_bm;
     736:	e0 e5       	ldi	r30, 0x50	; 80
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     740:	81 81       	ldd	r24, Z+1	; 0x01
     742:	81 ff       	sbrs	r24, 1
     744:	fd cf       	rjmp	.-6      	; 0x740 <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc;
     746:	88 ed       	ldi	r24, 0xD8	; 216
     748:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	80 93 40 00 	sts	0x0040, r24
     750:	08 95       	ret

00000752 <esp8266_off>:
		_delay_ms(1000);
		at_cipsend(str);
		_delay_ms(10000);
		esp8266_send_cmd("AT+CIPCLOSE=0\r", 100);
	}
}
     752:	80 e2       	ldi	r24, 0x20	; 32
     754:	e0 e6       	ldi	r30, 0x60	; 96
     756:	f6 e0       	ldi	r31, 0x06	; 6
     758:	86 83       	std	Z+6, r24	; 0x06
     75a:	08 95       	ret

0000075c <__vector_88>:

ISR(USARTD0_RXC_vect) {
     75c:	1f 92       	push	r1
     75e:	0f 92       	push	r0
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	0f 92       	push	r0
     764:	11 24       	eor	r1, r1
     766:	0b b6       	in	r0, 0x3b	; 59
     768:	0f 92       	push	r0
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
	
	char rx_temp = USARTD0.DATA;
     782:	40 91 a0 09 	lds	r20, 0x09A0
	
	if (rx_temp == '\n') {
     786:	4a 30       	cpi	r20, 0x0A	; 10
     788:	09 f0       	breq	.+2      	; 0x78c <__vector_88+0x30>
     78a:	66 c0       	rjmp	.+204    	; 0x858 <__vector_88+0xfc>
		if (strstr(rx_buffer,"OK")) {
     78c:	64 eb       	ldi	r22, 0xB4	; 180
     78e:	75 e2       	ldi	r23, 0x25	; 37
     790:	86 e2       	ldi	r24, 0x26	; 38
     792:	96 e2       	ldi	r25, 0x26	; 38
     794:	d1 d6       	rcall	.+3490   	; 0x1538 <strstr>
     796:	89 2b       	or	r24, r25
     798:	21 f0       	breq	.+8      	; 0x7a2 <__vector_88+0x46>
			status = ESP8266_SUCCESS;
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	80 93 59 27 	sts	0x2759, r24
     7a0:	44 c0       	rjmp	.+136    	; 0x82a <__vector_88+0xce>
		} else if (strstr(rx_buffer,"ERROR")) {
     7a2:	67 eb       	ldi	r22, 0xB7	; 183
     7a4:	75 e2       	ldi	r23, 0x25	; 37
     7a6:	86 e2       	ldi	r24, 0x26	; 38
     7a8:	96 e2       	ldi	r25, 0x26	; 38
     7aa:	c6 d6       	rcall	.+3468   	; 0x1538 <strstr>
     7ac:	89 2b       	or	r24, r25
     7ae:	19 f0       	breq	.+6      	; 0x7b6 <__vector_88+0x5a>
			status = ESP8266_ERROR;
     7b0:	10 92 59 27 	sts	0x2759, r1
     7b4:	3a c0       	rjmp	.+116    	; 0x82a <__vector_88+0xce>
		} else if (strstr(rx_buffer,"CONNECT")) {
     7b6:	6d eb       	ldi	r22, 0xBD	; 189
     7b8:	75 e2       	ldi	r23, 0x25	; 37
     7ba:	86 e2       	ldi	r24, 0x26	; 38
     7bc:	96 e2       	ldi	r25, 0x26	; 38
     7be:	bc d6       	rcall	.+3448   	; 0x1538 <strstr>
     7c0:	89 2b       	or	r24, r25
     7c2:	21 f0       	breq	.+8      	; 0x7cc <__vector_88+0x70>
			status = ESP8266_CONNECT;
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	80 93 59 27 	sts	0x2759, r24
     7ca:	2f c0       	rjmp	.+94     	; 0x82a <__vector_88+0xce>
		} else if (strstr(rx_buffer,"CLOSED")) {
     7cc:	65 ec       	ldi	r22, 0xC5	; 197
     7ce:	75 e2       	ldi	r23, 0x25	; 37
     7d0:	86 e2       	ldi	r24, 0x26	; 38
     7d2:	96 e2       	ldi	r25, 0x26	; 38
     7d4:	b1 d6       	rcall	.+3426   	; 0x1538 <strstr>
     7d6:	89 2b       	or	r24, r25
     7d8:	21 f0       	breq	.+8      	; 0x7e2 <__vector_88+0x86>
			status = ESP8266_CLOSED;
     7da:	85 e0       	ldi	r24, 0x05	; 5
     7dc:	80 93 59 27 	sts	0x2759, r24
     7e0:	24 c0       	rjmp	.+72     	; 0x82a <__vector_88+0xce>
		} else if (strstr(rx_buffer,"192")) {
     7e2:	6c ec       	ldi	r22, 0xCC	; 204
     7e4:	75 e2       	ldi	r23, 0x25	; 37
     7e6:	86 e2       	ldi	r24, 0x26	; 38
     7e8:	96 e2       	ldi	r25, 0x26	; 38
     7ea:	a6 d6       	rcall	.+3404   	; 0x1538 <strstr>
     7ec:	89 2b       	or	r24, r25
     7ee:	61 f0       	breq	.+24     	; 0x808 <__vector_88+0xac>
			strncpy(ip_address,strchr(rx_buffer,'\"'),19);
     7f0:	62 e2       	ldi	r22, 0x22	; 34
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	86 e2       	ldi	r24, 0x26	; 38
     7f6:	96 e2       	ldi	r25, 0x26	; 38
     7f8:	85 d6       	rcall	.+3338   	; 0x1504 <strchr>
     7fa:	43 e1       	ldi	r20, 0x13	; 19
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	bc 01       	movw	r22, r24
     800:	84 e1       	ldi	r24, 0x14	; 20
     802:	97 e2       	ldi	r25, 0x27	; 39
     804:	8a d6       	rcall	.+3348   	; 0x151a <strncpy>
     806:	11 c0       	rjmp	.+34     	; 0x82a <__vector_88+0xce>
		//This might be error prone...
		} else if (strstr(rx_buffer,"+IPD")) {
     808:	60 ed       	ldi	r22, 0xD0	; 208
     80a:	75 e2       	ldi	r23, 0x25	; 37
     80c:	86 e2       	ldi	r24, 0x26	; 38
     80e:	96 e2       	ldi	r25, 0x26	; 38
     810:	93 d6       	rcall	.+3366   	; 0x1538 <strstr>
     812:	89 2b       	or	r24, r25
     814:	51 f0       	breq	.+20     	; 0x82a <__vector_88+0xce>
			got_reply = true;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	80 93 f0 26 	sts	0x26F0, r24
			strncpy(telnet_cmd,rx_buffer,50);
     81c:	42 e3       	ldi	r20, 0x32	; 50
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	66 e2       	ldi	r22, 0x26	; 38
     822:	76 e2       	ldi	r23, 0x26	; 38
     824:	87 e2       	ldi	r24, 0x27	; 39
     826:	97 e2       	ldi	r25, 0x27	; 39
     828:	78 d6       	rcall	.+3312   	; 0x151a <strncpy>
		}
		
		if (strstr(rx_buffer,"{")) {
     82a:	6b e7       	ldi	r22, 0x7B	; 123
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	86 e2       	ldi	r24, 0x26	; 38
     830:	96 e2       	ldi	r25, 0x26	; 38
     832:	68 d6       	rcall	.+3280   	; 0x1504 <strchr>
     834:	89 2b       	or	r24, r25
     836:	21 f0       	breq	.+8      	; 0x840 <__vector_88+0xe4>
			json_found = true;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	80 93 f1 26 	sts	0x26F1, r24
     83e:	1b c0       	rjmp	.+54     	; 0x876 <__vector_88+0x11a>
		} else {
			//Flush buffer
			rx_ptr = 0;
     840:	10 92 ee 26 	sts	0x26EE, r1
     844:	10 92 ef 26 	sts	0x26EF, r1
			memset(rx_buffer, 0, RX_BUFFER);	
     848:	88 ec       	ldi	r24, 0xC8	; 200
     84a:	e6 e2       	ldi	r30, 0x26	; 38
     84c:	f6 e2       	ldi	r31, 0x26	; 38
     84e:	df 01       	movw	r26, r30
     850:	1d 92       	st	X+, r1
     852:	8a 95       	dec	r24
     854:	e9 f7       	brne	.-6      	; 0x850 <__vector_88+0xf4>
     856:	0f c0       	rjmp	.+30     	; 0x876 <__vector_88+0x11a>
		}
	} else {
		rx_buffer[rx_ptr++] = rx_temp;
     858:	80 91 ee 26 	lds	r24, 0x26EE
     85c:	90 91 ef 26 	lds	r25, 0x26EF
     860:	9c 01       	movw	r18, r24
     862:	2f 5f       	subi	r18, 0xFF	; 255
     864:	3f 4f       	sbci	r19, 0xFF	; 255
     866:	20 93 ee 26 	sts	0x26EE, r18
     86a:	30 93 ef 26 	sts	0x26EF, r19
     86e:	fc 01       	movw	r30, r24
     870:	ea 5d       	subi	r30, 0xDA	; 218
     872:	f9 4d       	sbci	r31, 0xD9	; 217
     874:	40 83       	st	Z, r20
	}
     876:	ff 91       	pop	r31
     878:	ef 91       	pop	r30
     87a:	bf 91       	pop	r27
     87c:	af 91       	pop	r26
     87e:	9f 91       	pop	r25
     880:	8f 91       	pop	r24
     882:	7f 91       	pop	r23
     884:	6f 91       	pop	r22
     886:	5f 91       	pop	r21
     888:	4f 91       	pop	r20
     88a:	3f 91       	pop	r19
     88c:	2f 91       	pop	r18
     88e:	0f 90       	pop	r0
     890:	0b be       	out	0x3b, r0	; 59
     892:	0f 90       	pop	r0
     894:	0f be       	out	0x3f, r0	; 63
     896:	0f 90       	pop	r0
     898:	1f 90       	pop	r1
     89a:	18 95       	reti

0000089c <ht1632c_draw_pixel>:
void ht1632c_blink(uint8_t blinky) {
	
	if (blinky) {
		ht1632c_send_command(HT1632_BLINK_ON);	
	} else {
		ht1632c_send_command(HT1632_BLINK_OFF);	
     89c:	9c 01       	movw	r18, r24
     89e:	80 31       	cpi	r24, 0x10	; 16
     8a0:	91 05       	cpc	r25, r1
     8a2:	0c f0       	brlt	.+2      	; 0x8a6 <ht1632c_draw_pixel+0xa>
     8a4:	69 c0       	rjmp	.+210    	; 0x978 <ht1632c_draw_pixel+0xdc>
     8a6:	60 31       	cpi	r22, 0x10	; 16
     8a8:	71 05       	cpc	r23, r1
     8aa:	0c f0       	brlt	.+2      	; 0x8ae <ht1632c_draw_pixel+0x12>
     8ac:	65 c0       	rjmp	.+202    	; 0x978 <ht1632c_draw_pixel+0xdc>
     8ae:	8f e0       	ldi	r24, 0x0F	; 15
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	86 1b       	sub	r24, r22
     8b4:	97 0b       	sbc	r25, r23
     8b6:	68 e1       	ldi	r22, 0x18	; 24
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	ee d5       	rcall	.+3036   	; 0x1498 <__divmodhi4>
     8bc:	88 30       	cpi	r24, 0x08	; 8
     8be:	91 05       	cpc	r25, r1
     8c0:	34 f0       	brlt	.+12     	; 0x8ce <ht1632c_draw_pixel+0x32>
     8c2:	80 31       	cpi	r24, 0x10	; 16
     8c4:	91 05       	cpc	r25, r1
     8c6:	34 f4       	brge	.+12     	; 0x8d4 <ht1632c_draw_pixel+0x38>
     8c8:	67 e8       	ldi	r22, 0x87	; 135
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <ht1632c_draw_pixel+0x3c>
     8ce:	67 e0       	ldi	r22, 0x07	; 7
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <ht1632c_draw_pixel+0x3c>
     8d4:	67 e0       	ldi	r22, 0x07	; 7
     8d6:	71 e0       	ldi	r23, 0x01	; 1
     8d8:	87 70       	andi	r24, 0x07	; 7
     8da:	90 78       	andi	r25, 0x80	; 128
     8dc:	99 23       	and	r25, r25
     8de:	24 f4       	brge	.+8      	; 0x8e8 <ht1632c_draw_pixel+0x4c>
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	88 6f       	ori	r24, 0xF8	; 248
     8e4:	9f 6f       	ori	r25, 0xFF	; 255
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	fb 01       	movw	r30, r22
     8ea:	e8 1b       	sub	r30, r24
     8ec:	f9 0b       	sbc	r31, r25
     8ee:	cf 01       	movw	r24, r30
     8f0:	28 30       	cpi	r18, 0x08	; 8
     8f2:	31 05       	cpc	r19, r1
     8f4:	1c f4       	brge	.+6      	; 0x8fc <ht1632c_draw_pixel+0x60>
     8f6:	22 0f       	add	r18, r18
     8f8:	33 1f       	adc	r19, r19
     8fa:	04 c0       	rjmp	.+8      	; 0x904 <ht1632c_draw_pixel+0x68>
     8fc:	22 0f       	add	r18, r18
     8fe:	33 1f       	adc	r19, r19
     900:	2f 50       	subi	r18, 0x0F	; 15
     902:	31 09       	sbc	r19, r1
     904:	22 0f       	add	r18, r18
     906:	33 1f       	adc	r19, r19
     908:	22 0f       	add	r18, r18
     90a:	33 1f       	adc	r19, r19
     90c:	22 0f       	add	r18, r18
     90e:	33 1f       	adc	r19, r19
     910:	28 0f       	add	r18, r24
     912:	39 1f       	adc	r19, r25
     914:	44 23       	and	r20, r20
     916:	c1 f0       	breq	.+48     	; 0x948 <ht1632c_draw_pixel+0xac>
     918:	f9 01       	movw	r30, r18
     91a:	f6 95       	lsr	r31
     91c:	e7 95       	ror	r30
     91e:	f6 95       	lsr	r31
     920:	e7 95       	ror	r30
     922:	f6 95       	lsr	r31
     924:	e7 95       	ror	r30
     926:	ee 50       	subi	r30, 0x0E	; 14
     928:	f9 4d       	sbci	r31, 0xD9	; 217
     92a:	27 70       	andi	r18, 0x07	; 7
     92c:	33 27       	eor	r19, r19
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	ac 01       	movw	r20, r24
     934:	02 c0       	rjmp	.+4      	; 0x93a <ht1632c_draw_pixel+0x9e>
     936:	44 0f       	add	r20, r20
     938:	55 1f       	adc	r21, r21
     93a:	2a 95       	dec	r18
     93c:	e2 f7       	brpl	.-8      	; 0x936 <ht1632c_draw_pixel+0x9a>
     93e:	9a 01       	movw	r18, r20
     940:	80 81       	ld	r24, Z
     942:	28 2b       	or	r18, r24
     944:	20 83       	st	Z, r18
     946:	08 95       	ret
     948:	f9 01       	movw	r30, r18
     94a:	f6 95       	lsr	r31
     94c:	e7 95       	ror	r30
     94e:	f6 95       	lsr	r31
     950:	e7 95       	ror	r30
     952:	f6 95       	lsr	r31
     954:	e7 95       	ror	r30
     956:	ee 50       	subi	r30, 0x0E	; 14
     958:	f9 4d       	sbci	r31, 0xD9	; 217
     95a:	27 70       	andi	r18, 0x07	; 7
     95c:	33 27       	eor	r19, r19
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	ac 01       	movw	r20, r24
     964:	02 c0       	rjmp	.+4      	; 0x96a <ht1632c_draw_pixel+0xce>
     966:	44 0f       	add	r20, r20
     968:	55 1f       	adc	r21, r21
     96a:	2a 95       	dec	r18
     96c:	e2 f7       	brpl	.-8      	; 0x966 <ht1632c_draw_pixel+0xca>
     96e:	9a 01       	movw	r18, r20
     970:	20 95       	com	r18
     972:	80 81       	ld	r24, Z
     974:	28 23       	and	r18, r24
     976:	20 83       	st	Z, r18
     978:	08 95       	ret

0000097a <ht1632c_draw_filled_rect>:
     97a:	8f 92       	push	r8
     97c:	9f 92       	push	r9
     97e:	af 92       	push	r10
     980:	bf 92       	push	r11
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	98 2e       	mov	r9, r24
     994:	c8 2f       	mov	r28, r24
     996:	d0 e0       	ldi	r29, 0x00	; 0
     998:	5e 01       	movw	r10, r28
     99a:	a4 0e       	add	r10, r20
     99c:	b1 1c       	adc	r11, r1
     99e:	ca 15       	cp	r28, r10
     9a0:	db 05       	cpc	r29, r11
     9a2:	e4 f4       	brge	.+56     	; 0x9dc <ht1632c_draw_filled_rect+0x62>
     9a4:	c6 2e       	mov	r12, r22
     9a6:	d1 2c       	mov	r13, r1
     9a8:	76 01       	movw	r14, r12
     9aa:	e2 0e       	add	r14, r18
     9ac:	f1 1c       	adc	r15, r1
     9ae:	86 2e       	mov	r8, r22
     9b0:	0f c0       	rjmp	.+30     	; 0x9d0 <ht1632c_draw_filled_rect+0x56>
     9b2:	40 2f       	mov	r20, r16
     9b4:	ce 01       	movw	r24, r28
     9b6:	72 df       	rcall	.-284    	; 0x89c <ht1632c_draw_pixel>
     9b8:	1f 5f       	subi	r17, 0xFF	; 255
     9ba:	61 2f       	mov	r22, r17
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	6e 15       	cp	r22, r14
     9c0:	7f 05       	cpc	r23, r15
     9c2:	bc f3       	brlt	.-18     	; 0x9b2 <ht1632c_draw_filled_rect+0x38>
     9c4:	93 94       	inc	r9
     9c6:	c9 2d       	mov	r28, r9
     9c8:	d0 e0       	ldi	r29, 0x00	; 0
     9ca:	ca 15       	cp	r28, r10
     9cc:	db 05       	cpc	r29, r11
     9ce:	34 f4       	brge	.+12     	; 0x9dc <ht1632c_draw_filled_rect+0x62>
     9d0:	b6 01       	movw	r22, r12
     9d2:	ce 14       	cp	r12, r14
     9d4:	df 04       	cpc	r13, r15
     9d6:	b4 f7       	brge	.-20     	; 0x9c4 <ht1632c_draw_filled_rect+0x4a>
     9d8:	18 2d       	mov	r17, r8
     9da:	eb cf       	rjmp	.-42     	; 0x9b2 <ht1632c_draw_filled_rect+0x38>
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	cf 90       	pop	r12
     9ec:	bf 90       	pop	r11
     9ee:	af 90       	pop	r10
     9f0:	9f 90       	pop	r9
     9f2:	8f 90       	pop	r8
     9f4:	08 95       	ret

000009f6 <ht1632c_write_data>:
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	28 e0       	ldi	r18, 0x08	; 8
     9fc:	e0 e8       	ldi	r30, 0x80	; 128
     9fe:	f6 e0       	ldi	r31, 0x06	; 6
     a00:	21 83       	std	Z+1, r18	; 0x01
     a02:	66 23       	and	r22, r22
     a04:	c1 f0       	breq	.+48     	; 0xa36 <ht1632c_write_data+0x40>
     a06:	74 e0       	ldi	r23, 0x04	; 4
     a08:	41 e0       	ldi	r20, 0x01	; 1
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	a8 e0       	ldi	r26, 0x08	; 8
     a0e:	76 83       	std	Z+6, r23	; 0x06
     a10:	2f ef       	ldi	r18, 0xFF	; 255
     a12:	26 0f       	add	r18, r22
     a14:	ea 01       	movw	r28, r20
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <ht1632c_write_data+0x26>
     a18:	cc 0f       	add	r28, r28
     a1a:	dd 1f       	adc	r29, r29
     a1c:	2a 95       	dec	r18
     a1e:	e2 f7       	brpl	.-8      	; 0xa18 <ht1632c_write_data+0x22>
     a20:	9e 01       	movw	r18, r28
     a22:	28 23       	and	r18, r24
     a24:	39 23       	and	r19, r25
     a26:	23 2b       	or	r18, r19
     a28:	11 f0       	breq	.+4      	; 0xa2e <ht1632c_write_data+0x38>
     a2a:	a5 83       	std	Z+5, r26	; 0x05
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <ht1632c_write_data+0x3a>
     a2e:	a6 83       	std	Z+6, r26	; 0x06
     a30:	75 83       	std	Z+5, r23	; 0x05
     a32:	61 50       	subi	r22, 0x01	; 1
     a34:	61 f7       	brne	.-40     	; 0xa0e <ht1632c_write_data+0x18>
     a36:	88 e0       	ldi	r24, 0x08	; 8
     a38:	e0 e8       	ldi	r30, 0x80	; 128
     a3a:	f6 e0       	ldi	r31, 0x06	; 6
     a3c:	86 83       	std	Z+6, r24	; 0x06
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <ht1632c_refresh_screen>:
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	e0 e8       	ldi	r30, 0x80	; 128
     a50:	f6 e0       	ldi	r31, 0x06	; 6
     a52:	86 83       	std	Z+6, r24	; 0x06
     a54:	63 e0       	ldi	r22, 0x03	; 3
     a56:	85 e0       	ldi	r24, 0x05	; 5
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	cd df       	rcall	.-102    	; 0x9f6 <ht1632c_write_data>
     a5c:	67 e0       	ldi	r22, 0x07	; 7
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	c9 df       	rcall	.-110    	; 0x9f6 <ht1632c_write_data>
     a64:	c3 ef       	ldi	r28, 0xF3	; 243
     a66:	d6 e2       	ldi	r29, 0x26	; 38
     a68:	03 e1       	ldi	r16, 0x13	; 19
     a6a:	17 e2       	ldi	r17, 0x27	; 39
     a6c:	fe 01       	movw	r30, r28
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	80 81       	ld	r24, Z
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	98 2f       	mov	r25, r24
     a76:	88 27       	eor	r24, r24
     a78:	28 81       	ld	r18, Y
     a7a:	60 e1       	ldi	r22, 0x10	; 16
     a7c:	82 2b       	or	r24, r18
     a7e:	bb df       	rcall	.-138    	; 0x9f6 <ht1632c_write_data>
     a80:	22 96       	adiw	r28, 0x02	; 2
     a82:	c0 17       	cp	r28, r16
     a84:	d1 07       	cpc	r29, r17
     a86:	91 f7       	brne	.-28     	; 0xa6c <ht1632c_refresh_screen+0x28>
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	e0 e8       	ldi	r30, 0x80	; 128
     a8c:	f6 e0       	ldi	r31, 0x06	; 6
     a8e:	85 83       	std	Z+5, r24	; 0x05
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	08 95       	ret

00000a9a <ht1632c_clear_screen>:
     a9a:	e2 ef       	ldi	r30, 0xF2	; 242
     a9c:	f6 e2       	ldi	r31, 0x26	; 38
     a9e:	82 e1       	ldi	r24, 0x12	; 18
     aa0:	97 e2       	ldi	r25, 0x27	; 39
     aa2:	11 92       	st	Z+, r1
     aa4:	e8 17       	cp	r30, r24
     aa6:	f9 07       	cpc	r31, r25
     aa8:	e1 f7       	brne	.-8      	; 0xaa2 <ht1632c_clear_screen+0x8>
     aaa:	cc cf       	rjmp	.-104    	; 0xa44 <ht1632c_refresh_screen>
     aac:	08 95       	ret

00000aae <ht1632c_send_command>:
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	94 60       	ori	r25, 0x04	; 4
     ab8:	c0 e8       	ldi	r28, 0x80	; 128
     aba:	d6 e0       	ldi	r29, 0x06	; 6
     abc:	11 e0       	ldi	r17, 0x01	; 1
     abe:	1e 83       	std	Y+6, r17	; 0x06
     ac0:	6c e0       	ldi	r22, 0x0C	; 12
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	97 df       	rcall	.-210    	; 0x9f6 <ht1632c_write_data>
     ac8:	1d 83       	std	Y+5, r17	; 0x05
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	1f 91       	pop	r17
     ad0:	08 95       	ret

00000ad2 <ht1632c_setup>:
     ad2:	cf 93       	push	r28
     ad4:	c8 2f       	mov	r28, r24
     ad6:	e0 e8       	ldi	r30, 0x80	; 128
     ad8:	f6 e0       	ldi	r31, 0x06	; 6
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	91 83       	std	Z+1, r25	; 0x01
     ade:	95 83       	std	Z+5, r25	; 0x05
     ae0:	94 e0       	ldi	r25, 0x04	; 4
     ae2:	91 83       	std	Z+1, r25	; 0x01
     ae4:	95 83       	std	Z+5, r25	; 0x05
     ae6:	88 e0       	ldi	r24, 0x08	; 8
     ae8:	81 83       	std	Z+1, r24	; 0x01
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	e0 df       	rcall	.-64     	; 0xaae <ht1632c_send_command>
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	de df       	rcall	.-68     	; 0xaae <ht1632c_send_command>
     af2:	88 e0       	ldi	r24, 0x08	; 8
     af4:	dc df       	rcall	.-72     	; 0xaae <ht1632c_send_command>
     af6:	84 e1       	ldi	r24, 0x14	; 20
     af8:	da df       	rcall	.-76     	; 0xaae <ht1632c_send_command>
     afa:	88 e1       	ldi	r24, 0x18	; 24
     afc:	d8 df       	rcall	.-80     	; 0xaae <ht1632c_send_command>
     afe:	8c 2f       	mov	r24, r28
     b00:	d6 df       	rcall	.-84     	; 0xaae <ht1632c_send_command>
     b02:	81 ea       	ldi	r24, 0xA1	; 161
     b04:	d4 df       	rcall	.-88     	; 0xaae <ht1632c_send_command>
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <ht1632c_set_brightness>:
     b0a:	80 31       	cpi	r24, 0x10	; 16
     b0c:	08 f0       	brcs	.+2      	; 0xb10 <ht1632c_set_brightness+0x6>
     b0e:	8f e0       	ldi	r24, 0x0F	; 15
     b10:	80 6a       	ori	r24, 0xA0	; 160
     b12:	cd cf       	rjmp	.-102    	; 0xaae <ht1632c_send_command>
     b14:	08 95       	ret

00000b16 <ht1632c_draw_char>:
static inline void ht1632c_set_cursor(int16_t x, int16_t y) {
	cursor_x = x;
	cursor_y = y;
}

void ht1632c_draw_char(int16_t x, int16_t y, char c,uint16_t color, uint8_t size) {
     b16:	2f 92       	push	r2
     b18:	3f 92       	push	r3
     b1a:	4f 92       	push	r4
     b1c:	5f 92       	push	r5
     b1e:	6f 92       	push	r6
     b20:	7f 92       	push	r7
     b22:	8f 92       	push	r8
     b24:	9f 92       	push	r9
     b26:	af 92       	push	r10
     b28:	bf 92       	push	r11
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <ht1632c_draw_char+0x26>
     b3c:	1f 92       	push	r1
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	22 2e       	mov	r2, r18
     b44:	40 2e       	mov	r4, r16
	
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
		uint8_t line = pgm_read_byte(font_5x7+(c*5)+i);
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	5a 01       	movw	r10, r20
     b4a:	aa 0c       	add	r10, r10
     b4c:	bb 1c       	adc	r11, r11
     b4e:	aa 0c       	add	r10, r10
     b50:	bb 1c       	adc	r11, r11
     b52:	4a 0d       	add	r20, r10
     b54:	5b 1d       	adc	r21, r11
     b56:	9a 01       	movw	r18, r20
     b58:	24 50       	subi	r18, 0x04	; 4
     b5a:	3e 4f       	sbci	r19, 0xFE	; 254
     b5c:	59 01       	movw	r10, r18
     b5e:	c8 2e       	mov	r12, r24
     b60:	d9 2e       	mov	r13, r25
     b62:	38 2e       	mov	r3, r24
     b64:	36 01       	movw	r6, r12
     b66:	35 e0       	ldi	r19, 0x05	; 5
     b68:	63 0e       	add	r6, r19
     b6a:	71 1c       	adc	r7, r1
     b6c:	80 2f       	mov	r24, r16
     b6e:	88 0f       	add	r24, r24
     b70:	88 0f       	add	r24, r24
     b72:	88 0f       	add	r24, r24
     b74:	80 1b       	sub	r24, r16
     b76:	4b 01       	movw	r8, r22
     b78:	96 e0       	ldi	r25, 0x06	; 6
     b7a:	89 0e       	add	r8, r25
     b7c:	91 1c       	adc	r9, r1
     b7e:	7b 01       	movw	r14, r22
     b80:	e1 e0       	ldi	r30, 0x01	; 1
     b82:	ee 1a       	sub	r14, r30
     b84:	f1 08       	sbc	r15, r1
     b86:	86 0f       	add	r24, r22
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	f5 01       	movw	r30, r10
     b8c:	14 91       	lpm	r17, Z
     b8e:	8a 82       	std	Y+2, r8	; 0x02
     b90:	9b 82       	std	Y+3, r9	; 0x03
     b92:	59 80       	ldd	r5, Y+1	; 0x01
		for (j = 7; j > 0; j--) {
			if (line & 0x1) {
     b94:	10 ff       	sbrs	r17, 0
     b96:	11 c0       	rjmp	.+34     	; 0xbba <ht1632c_draw_char+0xa4>
				if (size == 1) {
     b98:	f1 e0       	ldi	r31, 0x01	; 1
     b9a:	4f 12       	cpse	r4, r31
     b9c:	08 c0       	rjmp	.+16     	; 0xbae <ht1632c_draw_char+0x98>
					if (x+i >= 0) {
     b9e:	dd 20       	and	r13, r13
     ba0:	64 f0       	brlt	.+24     	; 0xbba <ht1632c_draw_char+0xa4>
						ht1632c_draw_pixel(x+i, y+j-1, color);
     ba2:	42 2d       	mov	r20, r2
     ba4:	6a 81       	ldd	r22, Y+2	; 0x02
     ba6:	7b 81       	ldd	r23, Y+3	; 0x03
     ba8:	c6 01       	movw	r24, r12
     baa:	78 de       	rcall	.-784    	; 0x89c <ht1632c_draw_pixel>
     bac:	06 c0       	rjmp	.+12     	; 0xbba <ht1632c_draw_char+0xa4>
					}
				}
				else {  // big size
					ht1632c_draw_filled_rect(x+i*size, y+j*size, size, size, color);
     bae:	02 2d       	mov	r16, r2
     bb0:	24 2d       	mov	r18, r4
     bb2:	44 2d       	mov	r20, r4
     bb4:	65 2d       	mov	r22, r5
     bb6:	83 2d       	mov	r24, r3
     bb8:	e0 de       	rcall	.-576    	; 0x97a <ht1632c_draw_filled_rect>
				}
			}
			line >>= 1;
     bba:	16 95       	lsr	r17
     bbc:	2a 81       	ldd	r18, Y+2	; 0x02
     bbe:	3b 81       	ldd	r19, Y+3	; 0x03
     bc0:	21 50       	subi	r18, 0x01	; 1
     bc2:	31 09       	sbc	r19, r1
     bc4:	2a 83       	std	Y+2, r18	; 0x02
     bc6:	3b 83       	std	Y+3, r19	; 0x03
     bc8:	54 18       	sub	r5, r4
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
		uint8_t line = pgm_read_byte(font_5x7+(c*5)+i);
		for (j = 7; j > 0; j--) {
     bca:	2e 15       	cp	r18, r14
     bcc:	3f 05       	cpc	r19, r15
     bce:	11 f7       	brne	.-60     	; 0xb94 <ht1632c_draw_char+0x7e>
     bd0:	3f ef       	ldi	r19, 0xFF	; 255
     bd2:	a3 1a       	sub	r10, r19
     bd4:	b3 0a       	sbc	r11, r19
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	c8 1a       	sub	r12, r24
     bda:	d8 0a       	sbc	r13, r24
     bdc:	34 0c       	add	r3, r4
void ht1632c_draw_char(int16_t x, int16_t y, char c,uint16_t color, uint8_t size) {
	
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
     bde:	c6 14       	cp	r12, r6
     be0:	d7 04       	cpc	r13, r7
     be2:	99 f6       	brne	.-90     	; 0xb8a <ht1632c_draw_char+0x74>
				}
			}
			line >>= 1;
		}
	}
}
     be4:	23 96       	adiw	r28, 0x03	; 3
     be6:	cd bf       	out	0x3d, r28	; 61
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	0f 91       	pop	r16
     bf2:	ff 90       	pop	r15
     bf4:	ef 90       	pop	r14
     bf6:	df 90       	pop	r13
     bf8:	cf 90       	pop	r12
     bfa:	bf 90       	pop	r11
     bfc:	af 90       	pop	r10
     bfe:	9f 90       	pop	r9
     c00:	8f 90       	pop	r8
     c02:	7f 90       	pop	r7
     c04:	6f 90       	pop	r6
     c06:	5f 90       	pop	r5
     c08:	4f 90       	pop	r4
     c0a:	3f 90       	pop	r3
     c0c:	2f 90       	pop	r2
     c0e:	08 95       	ret

00000c10 <btn_setup>:
void btn_top_setup(void) {
	
	PORTC.DIRCLR = PIN2_bm;
	PORTC.PIN2CTRL = PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
	PORTC.INT0MASK = PIN2_bm;
	PORTC.INTCTRL = PORT_INT0LVL_HI_gc;
     c10:	e0 e0       	ldi	r30, 0x00	; 0
     c12:	f6 e0       	ldi	r31, 0x06	; 6
     c14:	20 ee       	ldi	r18, 0xE0	; 224
     c16:	22 83       	std	Z+2, r18	; 0x02
     c18:	a0 e2       	ldi	r26, 0x20	; 32
     c1a:	b6 e0       	ldi	r27, 0x06	; 6
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	12 96       	adiw	r26, 0x02	; 2
     c20:	9c 93       	st	X, r25
     c22:	12 97       	sbiw	r26, 0x02	; 2
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	85 8b       	std	Z+21, r24	; 0x15
     c28:	86 8b       	std	Z+22, r24	; 0x16
     c2a:	87 8b       	std	Z+23, r24	; 0x17
     c2c:	50 96       	adiw	r26, 0x10	; 16
     c2e:	8c 93       	st	X, r24
     c30:	50 97       	sbiw	r26, 0x10	; 16
     c32:	22 87       	std	Z+10, r18	; 0x0a
     c34:	1a 96       	adiw	r26, 0x0a	; 10
     c36:	9c 93       	st	X, r25
     c38:	1a 97       	sbiw	r26, 0x0a	; 10
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	81 87       	std	Z+9, r24	; 0x09
     c3e:	19 96       	adiw	r26, 0x09	; 9
     c40:	8c 93       	st	X, r24
     c42:	08 95       	ret

00000c44 <btn_check_press>:
	
}

button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
     c44:	e0 e0       	ldi	r30, 0x00	; 0
     c46:	f6 e0       	ldi	r31, 0x06	; 6
     c48:	80 85       	ldd	r24, Z+8	; 0x08
     c4a:	85 ff       	sbrs	r24, 5
     c4c:	0d c0       	rjmp	.+26     	; 0xc68 <btn_check_press+0x24>
		//uwrite_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL += 1;
		return BTN1;
	} else if (!(PORTA.IN & BUTTON1)) {
     c4e:	80 85       	ldd	r24, Z+8	; 0x08
     c50:	86 ff       	sbrs	r24, 6
     c52:	0c c0       	rjmp	.+24     	; 0xc6c <btn_check_press+0x28>
		//uwrite_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL -= 1;
		return BTN2;
	} else if (!(PORTA.IN & BUTTON2)) {
     c54:	80 85       	ldd	r24, Z+8	; 0x08
     c56:	88 23       	and	r24, r24
     c58:	5c f4       	brge	.+22     	; 0xc70 <btn_check_press+0x2c>
		//uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL += 1;
		return BTN3;
	} else if (!(PORTB.IN & BUTTON3)) {
     c5a:	e0 e2       	ldi	r30, 0x20	; 32
     c5c:	f6 e0       	ldi	r31, 0x06	; 6
     c5e:	80 85       	ldd	r24, Z+8	; 0x08
     c60:	80 fd       	sbrc	r24, 0
     c62:	08 c0       	rjmp	.+16     	; 0xc74 <btn_check_press+0x30>
		//uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL -= 1;
		return BTN4;
     c64:	84 e0       	ldi	r24, 0x04	; 4
     c66:	08 95       	ret
button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
		//uwrite_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL += 1;
		return BTN1;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	08 95       	ret
	} else if (!(PORTA.IN & BUTTON1)) {
		//uwrite_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL -= 1;
		return BTN2;
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	08 95       	ret
	} else if (!(PORTA.IN & BUTTON2)) {
		//uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL += 1;
		return BTN3;
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	08 95       	ret
	} else if (!(PORTB.IN & BUTTON3)) {
		//uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL -= 1;
		return BTN4;
	} else {
		return NONE;
     c74:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     c76:	08 95       	ret

00000c78 <__vector_66>:

ISR(PORTA_INT0_vect) {
     c78:	1f 92       	push	r1
     c7a:	0f 92       	push	r0
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	0f 92       	push	r0
     c80:	11 24       	eor	r1, r1
     c82:	0b b6       	in	r0, 0x3b	; 59
     c84:	0f 92       	push	r0
     c86:	2f 93       	push	r18
     c88:	3f 93       	push	r19
     c8a:	4f 93       	push	r20
     c8c:	5f 93       	push	r21
     c8e:	6f 93       	push	r22
     c90:	7f 93       	push	r23
     c92:	8f 93       	push	r24
     c94:	9f 93       	push	r25
     c96:	af 93       	push	r26
     c98:	bf 93       	push	r27
     c9a:	ef 93       	push	r30
     c9c:	ff 93       	push	r31
	btn_status = btn_check_press();
     c9e:	d2 df       	rcall	.-92     	; 0xc44 <btn_check_press>
     ca0:	80 93 5a 27 	sts	0x275A, r24
	//printf("%d",btn_status);
}
     ca4:	ff 91       	pop	r31
     ca6:	ef 91       	pop	r30
     ca8:	bf 91       	pop	r27
     caa:	af 91       	pop	r26
     cac:	9f 91       	pop	r25
     cae:	8f 91       	pop	r24
     cb0:	7f 91       	pop	r23
     cb2:	6f 91       	pop	r22
     cb4:	5f 91       	pop	r21
     cb6:	4f 91       	pop	r20
     cb8:	3f 91       	pop	r19
     cba:	2f 91       	pop	r18
     cbc:	0f 90       	pop	r0
     cbe:	0b be       	out	0x3b, r0	; 59
     cc0:	0f 90       	pop	r0
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	0f 90       	pop	r0
     cc6:	1f 90       	pop	r1
     cc8:	18 95       	reti

00000cca <__vector_34>:

ISR(PORTB_INT0_vect) {
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	11 24       	eor	r1, r1
     cd4:	0b b6       	in	r0, 0x3b	; 59
     cd6:	0f 92       	push	r0
     cd8:	2f 93       	push	r18
     cda:	3f 93       	push	r19
     cdc:	4f 93       	push	r20
     cde:	5f 93       	push	r21
     ce0:	6f 93       	push	r22
     ce2:	7f 93       	push	r23
     ce4:	8f 93       	push	r24
     ce6:	9f 93       	push	r25
     ce8:	af 93       	push	r26
     cea:	bf 93       	push	r27
     cec:	ef 93       	push	r30
     cee:	ff 93       	push	r31
	btn_status = btn_check_press();
     cf0:	a9 df       	rcall	.-174    	; 0xc44 <btn_check_press>
     cf2:	80 93 5a 27 	sts	0x275A, r24
	//printf("%d",btn_status);
     cf6:	ff 91       	pop	r31
     cf8:	ef 91       	pop	r30
     cfa:	bf 91       	pop	r27
     cfc:	af 91       	pop	r26
     cfe:	9f 91       	pop	r25
     d00:	8f 91       	pop	r24
     d02:	7f 91       	pop	r23
     d04:	6f 91       	pop	r22
     d06:	5f 91       	pop	r21
     d08:	4f 91       	pop	r20
     d0a:	3f 91       	pop	r19
     d0c:	2f 91       	pop	r18
     d0e:	0f 90       	pop	r0
     d10:	0b be       	out	0x3b, r0	; 59
     d12:	0f 90       	pop	r0
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	0f 90       	pop	r0
     d18:	1f 90       	pop	r1
     d1a:	18 95       	reti

00000d1c <rtc_setup>:
	if (x < 15 && y == 0)
	{
		x++;
	} else if (x == 15 && y < 15) {
		y++;
	} else if (y == 15 && x > 0) {
     d1c:	88 ed       	ldi	r24, 0xD8	; 216
     d1e:	84 bf       	out	0x34, r24	; 52
     d20:	8b e0       	ldi	r24, 0x0B	; 11
     d22:	e0 e4       	ldi	r30, 0x40	; 64
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	83 83       	std	Z+3, r24	; 0x03
     d28:	e0 e0       	ldi	r30, 0x00	; 0
     d2a:	f4 e0       	ldi	r31, 0x04	; 4
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	80 fd       	sbrc	r24, 0
     d30:	fd cf       	rjmp	.-6      	; 0xd2c <rtc_setup+0x10>
     d32:	e0 e0       	ldi	r30, 0x00	; 0
     d34:	f4 e0       	ldi	r31, 0x04	; 4
     d36:	80 ed       	ldi	r24, 0xD0	; 208
     d38:	97 e0       	ldi	r25, 0x07	; 7
     d3a:	82 87       	std	Z+10, r24	; 0x0a
     d3c:	93 87       	std	Z+11, r25	; 0x0b
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	82 83       	std	Z+2, r24	; 0x02
     d42:	10 86       	std	Z+8, r1	; 0x08
     d44:	11 86       	std	Z+9, r1	; 0x09
     d46:	14 86       	std	Z+12, r1	; 0x0c
     d48:	15 86       	std	Z+13, r1	; 0x0d
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 83       	st	Z, r24
     d4e:	08 95       	ret

00000d50 <rtc_update_display>:
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <rtc_update_display+0xe>
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	e8 2e       	mov	r14, r24
     d64:	16 2f       	mov	r17, r22
     d66:	1f 92       	push	r1
     d68:	6f 93       	push	r22
     d6a:	25 ed       	ldi	r18, 0xD5	; 213
     d6c:	35 e2       	ldi	r19, 0x25	; 37
     d6e:	3f 93       	push	r19
     d70:	2f 93       	push	r18
     d72:	9e 01       	movw	r18, r28
     d74:	2f 5f       	subi	r18, 0xFF	; 255
     d76:	3f 4f       	sbci	r19, 0xFF	; 255
     d78:	3f 93       	push	r19
     d7a:	2f 93       	push	r18
     d7c:	24 d4       	rcall	.+2120   	; 0x15c6 <sprintf>
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	1a 30       	cpi	r17, 0x0A	; 10
     d8c:	20 f4       	brcc	.+8      	; 0xd96 <rtc_update_display+0x46>
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	90 e3       	ldi	r25, 0x30	; 48
     d92:	99 83       	std	Y+1, r25	; 0x01
     d94:	8a 83       	std	Y+2, r24	; 0x02
     d96:	f1 2c       	mov	r15, r1
     d98:	00 e0       	ldi	r16, 0x00	; 0
     d9a:	10 e0       	ldi	r17, 0x00	; 0
     d9c:	28 e0       	ldi	r18, 0x08	; 8
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 e1       	ldi	r20, 0x10	; 16
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	b7 01       	movw	r22, r14
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	e7 dd       	rcall	.-1074   	; 0x97a <ht1632c_draw_filled_rect>
     dac:	49 81       	ldd	r20, Y+1	; 0x01
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	01 e0       	ldi	r16, 0x01	; 1
     db2:	10 e0       	ldi	r17, 0x00	; 0
     db4:	21 e0       	ldi	r18, 0x01	; 1
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	b7 01       	movw	r22, r14
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	ab de       	rcall	.-682    	; 0xb16 <ht1632c_draw_char>
     dc0:	4a 81       	ldd	r20, Y+2	; 0x02
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	21 e0       	ldi	r18, 0x01	; 1
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	b7 01       	movw	r22, r14
     dca:	89 e0       	ldi	r24, 0x09	; 9
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	a3 de       	rcall	.-698    	; 0xb16 <ht1632c_draw_char>
     dd0:	39 de       	rcall	.-910    	; 0xa44 <ht1632c_refresh_screen>
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	08 95       	ret

00000de4 <rtc_set_time>:
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	f8 94       	cli
     dee:	80 93 5b 27 	sts	0x275B, r24
     df2:	60 93 5c 27 	sts	0x275C, r22
     df6:	cd e5       	ldi	r28, 0x5D	; 93
     df8:	d7 e2       	ldi	r29, 0x27	; 39
     dfa:	48 83       	st	Y, r20
     dfc:	20 93 5e 27 	sts	0x275E, r18
     e00:	30 93 5f 27 	sts	0x275F, r19
     e04:	00 93 61 27 	sts	0x2761, r16
     e08:	10 93 62 27 	sts	0x2762, r17
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	a0 df       	rcall	.-192    	; 0xd50 <rtc_update_display>
     e10:	68 81       	ld	r22, Y
     e12:	89 e0       	ldi	r24, 0x09	; 9
     e14:	9d df       	rcall	.-198    	; 0xd50 <rtc_update_display>
     e16:	78 94       	sei
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	08 95       	ret

00000e22 <__vector_10>:
	ht1632c_draw_pixel(x,y,1);
	
	ht1632c_refresh_screen();
}

ISR(RTC_OVF_vect) {
     e22:	1f 92       	push	r1
     e24:	0f 92       	push	r0
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	0f 92       	push	r0
     e2a:	11 24       	eor	r1, r1
     e2c:	0b b6       	in	r0, 0x3b	; 59
     e2e:	0f 92       	push	r0
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	cf 93       	push	r28
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31
	//rtc_update_seconds();
	if (++time.seconds == 60) {
     e4a:	80 91 5b 27 	lds	r24, 0x275B
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	8c 33       	cpi	r24, 0x3C	; 60
     e52:	19 f0       	breq	.+6      	; 0xe5a <__vector_10+0x38>
     e54:	80 93 5b 27 	sts	0x275B, r24
     e58:	5d c0       	rjmp	.+186    	; 0xf14 <__vector_10+0xf2>
		
		time.seconds = 0;
     e5a:	10 92 5b 27 	sts	0x275B, r1
			
		if (++time.minutes == 60) {
     e5e:	ec e5       	ldi	r30, 0x5C	; 92
     e60:	f7 e2       	ldi	r31, 0x27	; 39
     e62:	60 81       	ld	r22, Z
     e64:	6f 5f       	subi	r22, 0xFF	; 255
     e66:	60 83       	st	Z, r22
     e68:	6c 33       	cpi	r22, 0x3C	; 60
     e6a:	09 f0       	breq	.+2      	; 0xe6e <__vector_10+0x4c>
     e6c:	4d c0       	rjmp	.+154    	; 0xf08 <__vector_10+0xe6>
			
			time.minutes = 0;
     e6e:	10 92 5c 27 	sts	0x275C, r1
			if (disp_time) { 
     e72:	80 91 04 20 	lds	r24, 0x2004
     e76:	88 23       	and	r24, r24
     e78:	19 f0       	breq	.+6      	; 0xe80 <__vector_10+0x5e>
				rtc_update_display(BOTTOM,time.minutes);
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	68 df       	rcall	.-304    	; 0xd50 <rtc_update_display>
			}
			
			if (++time.hours == 24) {
     e80:	ed e5       	ldi	r30, 0x5D	; 93
     e82:	f7 e2       	ldi	r31, 0x27	; 39
     e84:	60 81       	ld	r22, Z
     e86:	6f 5f       	subi	r22, 0xFF	; 255
     e88:	60 83       	st	Z, r22
     e8a:	68 31       	cpi	r22, 0x18	; 24
     e8c:	a1 f5       	brne	.+104    	; 0xef6 <__vector_10+0xd4>
				time.weeks += (++time.days)/7;
     e8e:	e0 e6       	ldi	r30, 0x60	; 96
     e90:	f7 e2       	ldi	r31, 0x27	; 39
     e92:	c0 81       	ld	r28, Z
     e94:	ae e5       	ldi	r26, 0x5E	; 94
     e96:	b7 e2       	ldi	r27, 0x27	; 39
     e98:	4d 91       	ld	r20, X+
     e9a:	5c 91       	ld	r21, X
     e9c:	11 97       	sbiw	r26, 0x01	; 1
     e9e:	4f 5f       	subi	r20, 0xFF	; 255
     ea0:	5f 4f       	sbci	r21, 0xFF	; 255
     ea2:	4d 93       	st	X+, r20
     ea4:	5c 93       	st	X, r21
     ea6:	9a 01       	movw	r18, r20
     ea8:	a3 e9       	ldi	r26, 0x93	; 147
     eaa:	b4 e2       	ldi	r27, 0x24	; 36
     eac:	08 d3       	rcall	.+1552   	; 0x14be <__umulhisi3>
     eae:	48 1b       	sub	r20, r24
     eb0:	59 0b       	sbc	r21, r25
     eb2:	56 95       	lsr	r21
     eb4:	47 95       	ror	r20
     eb6:	84 0f       	add	r24, r20
     eb8:	95 1f       	adc	r25, r21
     eba:	96 95       	lsr	r25
     ebc:	87 95       	ror	r24
     ebe:	96 95       	lsr	r25
     ec0:	87 95       	ror	r24
     ec2:	8c 0f       	add	r24, r28
     ec4:	80 83       	st	Z, r24
				time.year += time.weeks/52;
     ec6:	e1 e6       	ldi	r30, 0x61	; 97
     ec8:	f7 e2       	ldi	r31, 0x27	; 39
     eca:	2f e4       	ldi	r18, 0x4F	; 79
     ecc:	82 9f       	mul	r24, r18
     ece:	21 2d       	mov	r18, r1
     ed0:	11 24       	eor	r1, r1
     ed2:	22 95       	swap	r18
     ed4:	2f 70       	andi	r18, 0x0F	; 15
     ed6:	80 81       	ld	r24, Z
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	82 0f       	add	r24, r18
     edc:	91 1d       	adc	r25, r1
     ede:	80 83       	st	Z, r24
     ee0:	91 83       	std	Z+1, r25	; 0x01
				time.hours = 0;
     ee2:	10 92 5d 27 	sts	0x275D, r1
				if (disp_time) {
     ee6:	80 91 04 20 	lds	r24, 0x2004
     eea:	88 23       	and	r24, r24
     eec:	51 f0       	breq	.+20     	; 0xf02 <__vector_10+0xe0>
					rtc_update_display(TOP,time.hours);	
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	89 e0       	ldi	r24, 0x09	; 9
     ef2:	2e df       	rcall	.-420    	; 0xd50 <rtc_update_display>
     ef4:	06 c0       	rjmp	.+12     	; 0xf02 <__vector_10+0xe0>
				}
			} else {
				if (disp_time) {
     ef6:	80 91 04 20 	lds	r24, 0x2004
     efa:	88 23       	and	r24, r24
     efc:	11 f0       	breq	.+4      	; 0xf02 <__vector_10+0xe0>
					rtc_update_display(TOP,time.hours);
     efe:	89 e0       	ldi	r24, 0x09	; 9
     f00:	27 df       	rcall	.-434    	; 0xd50 <rtc_update_display>
				}
			}
			time.minutes = 0;
     f02:	10 92 5c 27 	sts	0x275C, r1
     f06:	06 c0       	rjmp	.+12     	; 0xf14 <__vector_10+0xf2>
		} else {
			if (disp_time) {
     f08:	80 91 04 20 	lds	r24, 0x2004
     f0c:	88 23       	and	r24, r24
     f0e:	11 f0       	breq	.+4      	; 0xf14 <__vector_10+0xf2>
				rtc_update_display(BOTTOM,time.minutes);	
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	1e df       	rcall	.-452    	; 0xd50 <rtc_update_display>
			}
		}
	}
}
     f14:	ff 91       	pop	r31
     f16:	ef 91       	pop	r30
     f18:	cf 91       	pop	r28
     f1a:	bf 91       	pop	r27
     f1c:	af 91       	pop	r26
     f1e:	9f 91       	pop	r25
     f20:	8f 91       	pop	r24
     f22:	7f 91       	pop	r23
     f24:	6f 91       	pop	r22
     f26:	5f 91       	pop	r21
     f28:	4f 91       	pop	r20
     f2a:	3f 91       	pop	r19
     f2c:	2f 91       	pop	r18
     f2e:	0f 90       	pop	r0
     f30:	0b be       	out	0x3b, r0	; 59
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	0f 90       	pop	r0
     f38:	1f 90       	pop	r1
     f3a:	18 95       	reti

00000f3c <_sendCmd>:

	if(retval < 0)
	return retval;
	else
	return 0;
}
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	ec 01       	movw	r28, r24
     f4c:	d6 2e       	mov	r13, r22
     f4e:	60 e2       	ldi	r22, 0x20	; 32
     f50:	cd d0       	rcall	.+410    	; 0x10ec <Si114xReadFromRegister>
     f52:	8c 01       	movw	r16, r24
     f54:	99 23       	and	r25, r25
     f56:	34 f1       	brlt	.+76     	; 0xfa4 <_sendCmd+0x68>
     f58:	60 e3       	ldi	r22, 0x30	; 48
     f5a:	ce 01       	movw	r24, r28
     f5c:	c7 d0       	rcall	.+398    	; 0x10ec <Si114xReadFromRegister>
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	91 05       	cpc	r25, r1
     f62:	81 f1       	breq	.+96     	; 0xfc4 <_sendCmd+0x88>
     f64:	99 23       	and	r25, r25
     f66:	c4 f7       	brge	.-16     	; 0xf58 <_sendCmd+0x1c>
     f68:	39 c0       	rjmp	.+114    	; 0xfdc <_sendCmd+0xa0>
     f6a:	60 e2       	ldi	r22, 0x20	; 32
     f6c:	ce 01       	movw	r24, r28
     f6e:	be d0       	rcall	.+380    	; 0x10ec <Si114xReadFromRegister>
     f70:	80 17       	cp	r24, r16
     f72:	91 07       	cpc	r25, r17
     f74:	51 f1       	breq	.+84     	; 0xfca <_sendCmd+0x8e>
     f76:	99 23       	and	r25, r25
     f78:	8c f1       	brlt	.+98     	; 0xfdc <_sendCmd+0xa0>
     f7a:	8c 01       	movw	r16, r24
     f7c:	ed cf       	rjmp	.-38     	; 0xf58 <_sendCmd+0x1c>
     f7e:	78 01       	movw	r14, r16
     f80:	4d 2d       	mov	r20, r13
     f82:	68 e1       	ldi	r22, 0x18	; 24
     f84:	ce 01       	movw	r24, r28
     f86:	95 d0       	rcall	.+298    	; 0x10b2 <Si114xWriteToRegister>
     f88:	9c 01       	movw	r18, r24
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	69 f4       	brne	.+26     	; 0xfa8 <_sendCmd+0x6c>
     f8e:	dd 20       	and	r13, r13
     f90:	69 f0       	breq	.+26     	; 0xfac <_sendCmd+0x70>
     f92:	60 e2       	ldi	r22, 0x20	; 32
     f94:	ce 01       	movw	r24, r28
     f96:	aa d0       	rcall	.+340    	; 0x10ec <Si114xReadFromRegister>
     f98:	8e 15       	cp	r24, r14
     f9a:	9f 05       	cpc	r25, r15
     f9c:	51 f4       	brne	.+20     	; 0xfb2 <_sendCmd+0x76>
     f9e:	11 23       	and	r17, r17
     fa0:	c4 f7       	brge	.-16     	; 0xf92 <_sendCmd+0x56>
     fa2:	0a c0       	rjmp	.+20     	; 0xfb8 <_sendCmd+0x7c>
     fa4:	91 2f       	mov	r25, r17
     fa6:	1a c0       	rjmp	.+52     	; 0xfdc <_sendCmd+0xa0>
     fa8:	93 2f       	mov	r25, r19
     faa:	18 c0       	rjmp	.+48     	; 0xfdc <_sendCmd+0xa0>
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	15 c0       	rjmp	.+42     	; 0xfdc <_sendCmd+0xa0>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	12 c0       	rjmp	.+36     	; 0xfdc <_sendCmd+0xa0>
     fb8:	80 2f       	mov	r24, r16
     fba:	91 2f       	mov	r25, r17
     fbc:	0f c0       	rjmp	.+30     	; 0xfdc <_sendCmd+0xa0>
     fbe:	82 2f       	mov	r24, r18
     fc0:	93 2f       	mov	r25, r19
     fc2:	0c c0       	rjmp	.+24     	; 0xfdc <_sendCmd+0xa0>
     fc4:	d1 10       	cpse	r13, r1
     fc6:	d1 cf       	rjmp	.-94     	; 0xf6a <_sendCmd+0x2e>
     fc8:	da cf       	rjmp	.-76     	; 0xf7e <_sendCmd+0x42>
     fca:	78 01       	movw	r14, r16
     fcc:	4d 2d       	mov	r20, r13
     fce:	68 e1       	ldi	r22, 0x18	; 24
     fd0:	ce 01       	movw	r24, r28
     fd2:	6f d0       	rcall	.+222    	; 0x10b2 <Si114xWriteToRegister>
     fd4:	9c 01       	movw	r18, r24
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	e1 f2       	breq	.-72     	; 0xf92 <_sendCmd+0x56>
     fda:	f1 cf       	rjmp	.-30     	; 0xfbe <_sendCmd+0x82>
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	ff 90       	pop	r15
     fe6:	ef 90       	pop	r14
     fe8:	df 90       	pop	r13
     fea:	08 95       	ret

00000fec <Si114xNop>:
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	a6 cf       	rjmp	.-180    	; 0xf3c <_sendCmd>
     ff0:	08 95       	ret

00000ff2 <Si114xPauseAll>:
{
	return _sendCmd(si114x_handle,0x0B);
}

s16 Si114xPauseAll(HANDLE si114x_handle)
{
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	ec 01       	movw	r28, r24
	while (1)
	{
		// Keep sending nops until the response is zero
		while (1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
     ff8:	60 e2       	ldi	r22, 0x20	; 32
     ffa:	ce 01       	movw	r24, r28
     ffc:	77 d0       	rcall	.+238    	; 0x10ec <Si114xReadFromRegister>
     ffe:	89 2b       	or	r24, r25
    1000:	19 f0       	breq	.+6      	; 0x1008 <Si114xPauseAll+0x16>
			break;
			else
			Si114xNop(si114x_handle);
    1002:	ce 01       	movw	r24, r28
    1004:	f3 df       	rcall	.-26     	; 0xfec <Si114xNop>
		}
    1006:	f8 cf       	rjmp	.-16     	; 0xff8 <Si114xPauseAll+0x6>

//-----------------------------------------------------------------------------
// use this to pause measurements
static s16 _PsAlsPause (HANDLE si114x_handle)
{
	return _sendCmd(si114x_handle,0x0B);
    1008:	6b e0       	ldi	r22, 0x0B	; 11
    100a:	ce 01       	movw	r24, r28
    100c:	97 df       	rcall	.-210    	; 0xf3c <_sendCmd>
		_PsAlsPause(si114x_handle);

		// Wait for response
		while(1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    100e:	60 e2       	ldi	r22, 0x20	; 32
    1010:	ce 01       	movw	r24, r28
    1012:	6c d0       	rcall	.+216    	; 0x10ec <Si114xReadFromRegister>
    1014:	89 2b       	or	r24, r25
    1016:	d9 f3       	breq	.-10     	; 0x100e <Si114xPauseAll+0x1c>
			break;
		}

		// When the PsAlsPause() response is good, we expect it to be a '1'.
		if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
    1018:	60 e2       	ldi	r22, 0x20	; 32
    101a:	ce 01       	movw	r24, r28
    101c:	67 d0       	rcall	.+206    	; 0x10ec <Si114xReadFromRegister>
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	59 f7       	brne	.-42     	; 0xff8 <Si114xPauseAll+0x6>
		break;  // otherwise, start over.
	}
	return 0;
}
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	08 95       	ret

0000102c <si114x_reset>:
	return 0;
}


s16 si114x_reset(HANDLE si114x_handle)
{
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	ec 01       	movw	r28, r24
	//
	// delay_10ms();
	// delay_10ms();
	// delay_10ms();

	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	68 e0       	ldi	r22, 0x08	; 8
    103a:	3b d0       	rcall	.+118    	; 0x10b2 <Si114xWriteToRegister>
    103c:	8c 01       	movw	r16, r24
	retval+=Si114xPauseAll(si114x_handle);
    103e:	ce 01       	movw	r24, r28
    1040:	d8 df       	rcall	.-80     	; 0xff2 <Si114xPauseAll>
    1042:	08 0f       	add	r16, r24
    1044:	19 1f       	adc	r17, r25

	// The clearing of the registers could be redundant, but it is okay.
	// This is to make sure that these registers are cleared.
	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	68 e0       	ldi	r22, 0x08	; 8
    104a:	ce 01       	movw	r24, r28
    104c:	32 d0       	rcall	.+100    	; 0x10b2 <Si114xWriteToRegister>
    104e:	08 0f       	add	r16, r24
    1050:	19 1f       	adc	r17, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	64 e0       	ldi	r22, 0x04	; 4
    1056:	ce 01       	movw	r24, r28
    1058:	2c d0       	rcall	.+88     	; 0x10b2 <Si114xWriteToRegister>
    105a:	08 0f       	add	r16, r24
    105c:	19 1f       	adc	r17, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	65 e0       	ldi	r22, 0x05	; 5
    1062:	ce 01       	movw	r24, r28
    1064:	26 d0       	rcall	.+76     	; 0x10b2 <Si114xWriteToRegister>
    1066:	08 0f       	add	r16, r24
    1068:	19 1f       	adc	r17, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	66 e0       	ldi	r22, 0x06	; 6
    106e:	ce 01       	movw	r24, r28
    1070:	20 d0       	rcall	.+64     	; 0x10b2 <Si114xWriteToRegister>
    1072:	08 0f       	add	r16, r24
    1074:	19 1f       	adc	r17, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	63 e0       	ldi	r22, 0x03	; 3
    107a:	ce 01       	movw	r24, r28
    107c:	1a d0       	rcall	.+52     	; 0x10b2 <Si114xWriteToRegister>
    107e:	08 0f       	add	r16, r24
    1080:	19 1f       	adc	r17, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
    1082:	4f ef       	ldi	r20, 0xFF	; 255
    1084:	61 e2       	ldi	r22, 0x21	; 33
    1086:	ce 01       	movw	r24, r28
    1088:	14 d0       	rcall	.+40     	; 0x10b2 <Si114xWriteToRegister>
    108a:	08 0f       	add	r16, r24
    108c:	19 1f       	adc	r17, r25

	// Perform the Reset Command
	retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
    108e:	41 e0       	ldi	r20, 0x01	; 1
    1090:	68 e1       	ldi	r22, 0x18	; 24
    1092:	ce 01       	movw	r24, r28
    1094:	0e d0       	rcall	.+28     	; 0x10b2 <Si114xWriteToRegister>
    1096:	08 0f       	add	r16, r24
    1098:	19 1f       	adc	r17, r25

	// Delay for 10 ms. This delay is needed to allow the Si114x
	// to perform internal reset sequence.
	delay_10ms();
    109a:	44 d0       	rcall	.+136    	; 0x1124 <delay_10ms>

	// Write Hardware Key
	retval+=Si114xWriteToRegister(si114x_handle, REG_HW_KEY, HW_KEY_VAL0);
    109c:	47 e1       	ldi	r20, 0x17	; 23
    109e:	67 e0       	ldi	r22, 0x07	; 7
    10a0:	ce 01       	movw	r24, r28
    10a2:	07 d0       	rcall	.+14     	; 0x10b2 <Si114xWriteToRegister>

	return retval;
}
    10a4:	80 0f       	add	r24, r16
    10a6:	91 1f       	adc	r25, r17
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	08 95       	ret

000010b2 <Si114xWriteToRegister>:

s16 Si114xBlockRead(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
}
    10b2:	ef 92       	push	r14
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	1f 92       	push	r1
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	26 2f       	mov	r18, r22
    10c4:	49 83       	std	Y+1, r20	; 0x01
    10c6:	ee 24       	eor	r14, r14
    10c8:	e3 94       	inc	r14
    10ca:	8e 01       	movw	r16, r28
    10cc:	0f 5f       	subi	r16, 0xFF	; 255
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
    10d0:	48 ee       	ldi	r20, 0xE8	; 232
    10d2:	6a e5       	ldi	r22, 0x5A	; 90
    10d4:	80 e8       	ldi	r24, 0x80	; 128
    10d6:	94 e0       	ldi	r25, 0x04	; 4
    10d8:	d7 d0       	rcall	.+430    	; 0x1288 <twi_write_packet>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0f 90       	pop	r0
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	ef 90       	pop	r14
    10ea:	08 95       	ret

000010ec <Si114xReadFromRegister>:
    10ec:	ef 92       	push	r14
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	1f 92       	push	r1
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	26 2f       	mov	r18, r22
    10fe:	ee 24       	eor	r14, r14
    1100:	e3 94       	inc	r14
    1102:	8e 01       	movw	r16, r28
    1104:	0f 5f       	subi	r16, 0xFF	; 255
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	48 ee       	ldi	r20, 0xE8	; 232
    110a:	6a e5       	ldi	r22, 0x5A	; 90
    110c:	80 e8       	ldi	r24, 0x80	; 128
    110e:	94 e0       	ldi	r25, 0x04	; 4
    1110:	79 d0       	rcall	.+242    	; 0x1204 <twi_read_packet>
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0f 90       	pop	r0
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	ef 90       	pop	r14
    1122:	08 95       	ret

00001124 <delay_10ms>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1124:	2f ef       	ldi	r18, 0xFF	; 255
    1126:	89 ef       	ldi	r24, 0xF9	; 249
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	21 50       	subi	r18, 0x01	; 1
    112c:	80 40       	sbci	r24, 0x00	; 0
    112e:	90 40       	sbci	r25, 0x00	; 0
    1130:	e1 f7       	brne	.-8      	; 0x112a <delay_10ms+0x6>
    1132:	00 c0       	rjmp	.+0      	; 0x1134 <delay_10ms+0x10>
    1134:	00 00       	nop
    1136:	08 95       	ret

00001138 <twi_setup>:
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1138:	e0 e8       	ldi	r30, 0x80	; 128
    113a:	f4 e0       	ldi	r31, 0x04	; 4
    113c:	12 82       	std	Z+2, r1	; 0x02
    113e:	89 e0       	ldi	r24, 0x09	; 9
    1140:	85 83       	std	Z+5, r24	; 0x05
    1142:	88 e0       	ldi	r24, 0x08	; 8
    1144:	81 83       	std	Z+1, r24	; 0x01
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	84 83       	std	Z+4, r24	; 0x04
    114a:	08 95       	ret

0000114c <twi_off>:
    114c:	e0 e8       	ldi	r30, 0x80	; 128
    114e:	f4 e0       	ldi	r31, 0x04	; 4
    1150:	81 81       	ldd	r24, Z+1	; 0x01
    1152:	87 7f       	andi	r24, 0xF7	; 247
    1154:	81 83       	std	Z+1, r24	; 0x01
    1156:	08 95       	ret

00001158 <twi_start_transmission>:
}

uint8_t twi_start_transmission(TWI_t* const TWI, 
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
    1158:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    115a:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    115c:	84 e6       	ldi	r24, 0x64	; 100
    115e:	48 9f       	mul	r20, r24
    1160:	a0 01       	movw	r20, r0
    1162:	11 24       	eor	r1, r1
	while (timeout_remaining)
    1164:	41 15       	cp	r20, r1
    1166:	51 05       	cpc	r21, r1
    1168:	09 f1       	breq	.+66     	; 0x11ac <twi_start_transmission+0x54>
	{
		uint8_t status = TWI->MASTER.STATUS;
    116a:	84 81       	ldd	r24, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    116c:	98 2f       	mov	r25, r24
    116e:	98 74       	andi	r25, 0x48	; 72
    1170:	98 34       	cpi	r25, 0x48	; 72
    1172:	11 f4       	brne	.+4      	; 0x1178 <twi_start_transmission+0x20>
		{
			TWI->MASTER.ADDR = slave_address;
    1174:	66 83       	std	Z+6, r22	; 0x06
    1176:	0a c0       	rjmp	.+20     	; 0x118c <twi_start_transmission+0x34>
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    1178:	98 2f       	mov	r25, r24
    117a:	90 75       	andi	r25, 0x50	; 80
    117c:	90 35       	cpi	r25, 0x50	; 80
    117e:	21 f4       	brne	.+8      	; 0x1188 <twi_start_transmission+0x30>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1180:	87 e0       	ldi	r24, 0x07	; 7
    1182:	83 83       	std	Z+3, r24	; 0x03
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
    1184:	84 e0       	ldi	r24, 0x04	; 4
    1186:	08 95       	ret
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    1188:	80 7c       	andi	r24, 0xC0	; 192
    118a:	71 f4       	brne	.+28     	; 0x11a8 <twi_start_transmission+0x50>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    118c:	8a e6       	ldi	r24, 0x6A	; 106
    118e:	8a 95       	dec	r24
    1190:	f1 f7       	brne	.-4      	; 0x118e <twi_start_transmission+0x36>
    1192:	00 c0       	rjmp	.+0      	; 0x1194 <twi_start_transmission+0x3c>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    1194:	41 50       	subi	r20, 0x01	; 1
    1196:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    1198:	41 15       	cp	r20, r1
    119a:	51 05       	cpc	r21, r1
    119c:	31 f7       	brne	.-52     	; 0x116a <twi_start_transmission+0x12>
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <twi_start_transmission+0x54>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    11a0:	87 e0       	ldi	r24, 0x07	; 7
    11a2:	83 83       	std	Z+3, r24	; 0x03
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
			twi_stop_transmission(TWI);
		}
	}

	return TWI_ERROR_BUS_CAP_TIMEOUT;
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	08 95       	ret
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
		{
			return TWI_ERROR_NO_ERROR;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	08 95       	ret
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    11ac:	84 81       	ldd	r24, Z+4	; 0x04
    11ae:	85 fd       	sbrc	r24, 5
    11b0:	f7 cf       	rjmp	.-18     	; 0x11a0 <twi_start_transmission+0x48>
			twi_stop_transmission(TWI);
		}
	}

	return TWI_ERROR_BUS_CAP_TIMEOUT;
    11b2:	83 e0       	ldi	r24, 0x03	; 3
}
    11b4:	08 95       	ret

000011b6 <twi_send_byte>:

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
    11b6:	fc 01       	movw	r30, r24
	TWI->MASTER.DATA = data;
    11b8:	67 83       	std	Z+7, r22	; 0x07

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    11ba:	84 81       	ldd	r24, Z+4	; 0x04
    11bc:	86 ff       	sbrs	r24, 6
    11be:	fd cf       	rjmp	.-6      	; 0x11ba <twi_send_byte+0x4>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    11c0:	84 81       	ldd	r24, Z+4	; 0x04
    11c2:	86 ff       	sbrs	r24, 6
    11c4:	06 c0       	rjmp	.+12     	; 0x11d2 <twi_send_byte+0x1c>
    11c6:	94 81       	ldd	r25, Z+4	; 0x04
    11c8:	92 95       	swap	r25
    11ca:	91 70       	andi	r25, 0x01	; 1
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	89 27       	eor	r24, r25
    11d0:	08 95       	ret
    11d2:	80 e0       	ldi	r24, 0x00	; 0
}
    11d4:	08 95       	ret

000011d6 <twi_receive_byte>:

uint8_t twi_receive_byte(TWI_t* const TWI, 
uint8_t* const data, 
const uint8_t end_of_data)
{
    11d6:	fc 01       	movw	r30, r24
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
    11d8:	84 81       	ldd	r24, Z+4	; 0x04
    11da:	8c 70       	andi	r24, 0x0C	; 12
    11dc:	8c 30       	cpi	r24, 0x0C	; 12
    11de:	81 f0       	breq	.+32     	; 0x1200 <twi_receive_byte+0x2a>
		return false;
	}

	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm));
    11e0:	84 81       	ldd	r24, Z+4	; 0x04
    11e2:	88 23       	and	r24, r24
    11e4:	ec f7       	brge	.-6      	; 0x11e0 <twi_receive_byte+0xa>

	*data = TWI->MASTER.DATA;
    11e6:	87 81       	ldd	r24, Z+7	; 0x07
    11e8:	db 01       	movw	r26, r22
    11ea:	8c 93       	st	X, r24

	if (end_of_data)
    11ec:	44 23       	and	r20, r20
    11ee:	21 f0       	breq	.+8      	; 0x11f8 <twi_receive_byte+0x22>
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    11f0:	87 e0       	ldi	r24, 0x07	; 7
    11f2:	83 83       	std	Z+3, r24	; 0x03
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	08 95       	ret
	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	83 83       	std	Z+3, r24	; 0x03

	return true;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	08 95       	ret
uint8_t twi_receive_byte(TWI_t* const TWI, 
uint8_t* const data, 
const uint8_t end_of_data)
{
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
		return false;
    1200:	80 e0       	ldi	r24, 0x00	; 0
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
}
    1202:	08 95       	ret

00001204 <twi_read_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
uint8_t* data,
uint8_t length)
{
    1204:	cf 92       	push	r12
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	ec 01       	movw	r28, r24
    1216:	c6 2e       	mov	r12, r22
    1218:	d4 2e       	mov	r13, r20
    121a:	f2 2e       	mov	r15, r18
	uint8_t error_code;
	uint8_t len = length;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    121c:	66 0f       	add	r22, r22
    121e:	9c df       	rcall	.-200    	; 0x1158 <twi_start_transmission>
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	31 f5       	brne	.+76     	; 0x1270 <twi_read_packet+0x6c>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
    1224:	6f 2d       	mov	r22, r15
    1226:	ce 01       	movw	r24, r28
    1228:	c6 df       	rcall	.-116    	; 0x11b6 <twi_send_byte>
    122a:	88 23       	and	r24, r24
    122c:	19 f1       	breq	.+70     	; 0x1274 <twi_read_packet+0x70>
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
    122e:	6c 2d       	mov	r22, r12
    1230:	66 0f       	add	r22, r22
    1232:	61 60       	ori	r22, 0x01	; 1
    1234:	4d 2d       	mov	r20, r13
    1236:	ce 01       	movw	r24, r28
    1238:	8f df       	rcall	.-226    	; 0x1158 <twi_start_transmission>
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	a9 f4       	brne	.+42     	; 0x1268 <twi_read_packet+0x64>
    123e:	ff 24       	eor	r15, r15
    1240:	fa 94       	dec	r15
    1242:	fe 0c       	add	r15, r14
    1244:	0e c0       	rjmp	.+28     	; 0x1262 <twi_read_packet+0x5e>
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
			{
				if (!(twi_receive_byte(TWI, data++, (length == 0))))
    1246:	68 01       	movw	r12, r16
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	c8 1a       	sub	r12, r24
    124c:	d8 0a       	sbc	r13, r24
    124e:	41 e0       	ldi	r20, 0x01	; 1
    1250:	f1 10       	cpse	r15, r1
    1252:	40 e0       	ldi	r20, 0x00	; 0
    1254:	b8 01       	movw	r22, r16
    1256:	ce 01       	movw	r24, r28
    1258:	be df       	rcall	.-132    	; 0x11d6 <twi_receive_byte>
    125a:	fa 94       	dec	r15
    125c:	88 23       	and	r24, r24
    125e:	21 f0       	breq	.+8      	; 0x1268 <twi_read_packet+0x64>
    1260:	86 01       	movw	r16, r12
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	f8 12       	cpse	r15, r24
    1266:	ef cf       	rjmp	.-34     	; 0x1246 <twi_read_packet+0x42>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1268:	87 e0       	ldi	r24, 0x07	; 7
    126a:	8b 83       	std	Y+3, r24	; 0x03
		}

		twi_stop_transmission(TWI);
	}

	return len;
    126c:	8e 2d       	mov	r24, r14
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <twi_read_packet+0x72>
    1270:	8e 2d       	mov	r24, r14
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <twi_read_packet+0x72>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    1274:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return len;
}
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	df 90       	pop	r13
    1284:	cf 90       	pop	r12
    1286:	08 95       	ret

00001288 <twi_write_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    1288:	cf 92       	push	r12
    128a:	df 92       	push	r13
    128c:	ef 92       	push	r14
    128e:	0f 93       	push	r16
    1290:	1f 93       	push	r17
    1292:	cf 93       	push	r28
    1294:	df 93       	push	r29
    1296:	ec 01       	movw	r28, r24
    1298:	d2 2e       	mov	r13, r18
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    129a:	66 0f       	add	r22, r22
    129c:	5d df       	rcall	.-326    	; 0x1158 <twi_start_transmission>
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	d1 f4       	brne	.+52     	; 0x12d6 <twi_write_packet+0x4e>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
    12a2:	6d 2d       	mov	r22, r13
    12a4:	ce 01       	movw	r24, r28
    12a6:	87 df       	rcall	.-242    	; 0x11b6 <twi_send_byte>
    12a8:	88 23       	and	r24, r24
    12aa:	b9 f0       	breq	.+46     	; 0x12da <twi_write_packet+0x52>
    12ac:	ea 94       	dec	r14
    12ae:	c0 2e       	mov	r12, r16
    12b0:	d1 2e       	mov	r13, r17
    12b2:	0a c0       	rjmp	.+20     	; 0x12c8 <twi_write_packet+0x40>
			return error_code;
		}

		while (length--)
		{
			if (!(twi_send_byte(TWI, *(data++))))
    12b4:	f6 01       	movw	r30, r12
    12b6:	61 91       	ld	r22, Z+
    12b8:	6f 01       	movw	r12, r30
    12ba:	ce 01       	movw	r24, r28
    12bc:	7c df       	rcall	.-264    	; 0x11b6 <twi_send_byte>
    12be:	9f ef       	ldi	r25, 0xFF	; 255
    12c0:	9e 0d       	add	r25, r14
    12c2:	88 23       	and	r24, r24
    12c4:	21 f0       	breq	.+8      	; 0x12ce <twi_write_packet+0x46>
    12c6:	e9 2e       	mov	r14, r25
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    12c8:	ff ef       	ldi	r31, 0xFF	; 255
    12ca:	ef 12       	cpse	r14, r31
    12cc:	f3 cf       	rjmp	.-26     	; 0x12b4 <twi_write_packet+0x2c>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    12ce:	87 e0       	ldi	r24, 0x07	; 7
    12d0:	8b 83       	std	Y+3, r24	; 0x03
    12d2:	8e 2d       	mov	r24, r14
    12d4:	03 c0       	rjmp	.+6      	; 0x12dc <twi_write_packet+0x54>
    12d6:	8e 2d       	mov	r24, r14
    12d8:	01 c0       	rjmp	.+2      	; 0x12dc <twi_write_packet+0x54>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    12da:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return length;
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	ef 90       	pop	r14
    12e6:	df 90       	pop	r13
    12e8:	cf 90       	pop	r12
    12ea:	08 95       	ret

000012ec <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	0b b6       	in	r0, 0x3b	; 59
    12f8:	0f 92       	push	r0
    12fa:	2f 93       	push	r18
    12fc:	3f 93       	push	r19
    12fe:	4f 93       	push	r20
    1300:	5f 93       	push	r21
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	ef 93       	push	r30
    130c:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    130e:	e0 91 a4 27 	lds	r30, 0x27A4
    1312:	f0 91 a5 27 	lds	r31, 0x27A5
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	static uint16_t prev = 0;
		
	if (!fcb) return;
    1316:	30 97       	sbiw	r30, 0x00	; 0
    1318:	09 f4       	brne	.+2      	; 0x131c <__vector_14+0x30>
    131a:	47 c0       	rjmp	.+142    	; 0x13aa <__vector_14+0xbe>
	ct = fcb->ct; ri = fcb->ri;
    131c:	46 81       	ldd	r20, Z+6	; 0x06
    131e:	57 81       	ldd	r21, Z+7	; 0x07
    1320:	22 81       	ldd	r18, Z+2	; 0x02
    1322:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    1324:	80 85       	ldd	r24, Z+8	; 0x08
    1326:	91 85       	ldd	r25, Z+9	; 0x09
    1328:	dc 01       	movw	r26, r24
    132a:	a2 0f       	add	r26, r18
    132c:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    132e:	80 81       	ld	r24, Z
    1330:	91 81       	ldd	r25, Z+1	; 0x01
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	91 05       	cpc	r25, r1
    1336:	69 f0       	breq	.+26     	; 0x1352 <__vector_14+0x66>
    1338:	18 f0       	brcs	.+6      	; 0x1340 <__vector_14+0x54>
    133a:	02 97       	sbiw	r24, 0x02	; 2
    133c:	99 f0       	breq	.+38     	; 0x1364 <__vector_14+0x78>
    133e:	1d c0       	rjmp	.+58     	; 0x137a <__vector_14+0x8e>
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
    1340:	41 15       	cp	r20, r1
    1342:	51 05       	cpc	r21, r1
    1344:	91 f1       	breq	.+100    	; 0x13aa <__vector_14+0xbe>
		l1 = r2 = buff[0];
    1346:	8c 91       	ld	r24, X
		ct -= 1; ri += 1;
    1348:	41 50       	subi	r20, 0x01	; 1
    134a:	51 09       	sbc	r21, r1
    134c:	2f 5f       	subi	r18, 0xFF	; 255
    134e:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    1350:	1d c0       	rjmp	.+58     	; 0x138c <__vector_14+0xa0>
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
    1352:	42 30       	cpi	r20, 0x02	; 2
    1354:	51 05       	cpc	r21, r1
    1356:	48 f1       	brcs	.+82     	; 0x13aa <__vector_14+0xbe>
		l1 = buff[0]; r2 = buff[1];
    1358:	8c 91       	ld	r24, X
		ct -= 2; ri += 2;
    135a:	42 50       	subi	r20, 0x02	; 2
    135c:	51 09       	sbc	r21, r1
    135e:	2e 5f       	subi	r18, 0xFE	; 254
    1360:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    1362:	14 c0       	rjmp	.+40     	; 0x138c <__vector_14+0xa0>
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
    1364:	42 30       	cpi	r20, 0x02	; 2
    1366:	51 05       	cpc	r21, r1
    1368:	00 f1       	brcs	.+64     	; 0x13aa <__vector_14+0xbe>
		l1 = r2 = buff[1] + 128;
    136a:	11 96       	adiw	r26, 0x01	; 1
    136c:	8c 91       	ld	r24, X
    136e:	80 58       	subi	r24, 0x80	; 128
		ct -= 2; ri += 2;
    1370:	42 50       	subi	r20, 0x02	; 2
    1372:	51 09       	sbc	r21, r1
    1374:	2e 5f       	subi	r18, 0xFE	; 254
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    1378:	09 c0       	rjmp	.+18     	; 0x138c <__vector_14+0xa0>
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
    137a:	44 30       	cpi	r20, 0x04	; 4
    137c:	51 05       	cpc	r21, r1
    137e:	a8 f0       	brcs	.+42     	; 0x13aa <__vector_14+0xbe>
		l2 = buff[0]; 
		l1 = buff[1];
    1380:	11 96       	adiw	r26, 0x01	; 1
    1382:	8c 91       	ld	r24, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
    1384:	44 50       	subi	r20, 0x04	; 4
    1386:	51 09       	sbc	r21, r1
		ri += 4;
    1388:	2c 5f       	subi	r18, 0xFC	; 252
    138a:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fcb->ct = ct;
    138c:	46 83       	std	Z+6, r20	; 0x06
    138e:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    1390:	42 85       	ldd	r20, Z+10	; 0x0a
    1392:	53 85       	ldd	r21, Z+11	; 0x0b
    1394:	41 50       	subi	r20, 0x01	; 1
    1396:	51 09       	sbc	r21, r1
    1398:	24 23       	and	r18, r20
    139a:	35 23       	and	r19, r21
    139c:	22 83       	std	Z+2, r18	; 0x02
    139e:	33 83       	std	Z+3, r19	; 0x03
	
	//uint16_t data = smooth(l1,0.35,data);
	
	DACB.CH0DATA = l1;//data;
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	e0 e2       	ldi	r30, 0x20	; 32
    13a4:	f3 e0       	ldi	r31, 0x03	; 3
    13a6:	80 8f       	std	Z+24, r24	; 0x18
    13a8:	91 8f       	std	Z+25, r25	; 0x19
	
	//prev = data;
}
    13aa:	ff 91       	pop	r31
    13ac:	ef 91       	pop	r30
    13ae:	bf 91       	pop	r27
    13b0:	af 91       	pop	r26
    13b2:	9f 91       	pop	r25
    13b4:	8f 91       	pop	r24
    13b6:	5f 91       	pop	r21
    13b8:	4f 91       	pop	r20
    13ba:	3f 91       	pop	r19
    13bc:	2f 91       	pop	r18
    13be:	0f 90       	pop	r0
    13c0:	0b be       	out	0x3b, r0	; 59
    13c2:	0f 90       	pop	r0
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	0f 90       	pop	r0
    13c8:	1f 90       	pop	r1
    13ca:	18 95       	reti

000013cc <main>:

int main(void) {
	
	bool test_ok = false;
	
	clock_setup_32_mhz();
    13cc:	b4 d9       	rcall	.-3224   	; 0x736 <clock_setup_32_mhz>
	ht1632c_setup(HT1632_COMMON_16NMOS);
    13ce:	84 e2       	ldi	r24, 0x24	; 36
    13d0:	80 db       	rcall	.-2304   	; 0xad2 <ht1632c_setup>
	ht1632c_set_brightness(0);
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	9a db       	rcall	.-2252   	; 0xb0a <ht1632c_set_brightness>
	//ht1632c_fill_screen();
	ht1632c_clear_screen();
    13d6:	61 db       	rcall	.-2366   	; 0xa9a <ht1632c_clear_screen>
	
	esp8266_off();
    13d8:	bc d9       	rcall	.-3208   	; 0x752 <esp8266_off>
	
	uart_setup();
    13da:	3b d0       	rcall	.+118    	; 0x1452 <uart_setup>
	stdout = stdin = &mystdout;
    13dc:	85 e0       	ldi	r24, 0x05	; 5
    13de:	90 e2       	ldi	r25, 0x20	; 32
    13e0:	80 93 a6 27 	sts	0x27A6, r24
    13e4:	90 93 a7 27 	sts	0x27A7, r25
    13e8:	80 93 a8 27 	sts	0x27A8, r24
    13ec:	90 93 a9 27 	sts	0x27A9, r25
	puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
    13f0:	8d ef       	ldi	r24, 0xFD	; 253
    13f2:	95 e2       	ldi	r25, 0x25	; 37
    13f4:	bb d0       	rcall	.+374    	; 0x156c <puts>
void uart_put_char(char c);
static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) {
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    13f6:	87 e0       	ldi	r24, 0x07	; 7
    13f8:	e0 ea       	ldi	r30, 0xA0	; 160
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	82 83       	std	Z+2, r24	; 0x02
	uart_setup();
	stdout = stdin = &mystdout;
	puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
	
	pmic_setup();
	twi_setup(&TWIC);
    13fe:	80 e8       	ldi	r24, 0x80	; 128
    1400:	94 e0       	ldi	r25, 0x04	; 4
    1402:	9a de       	rcall	.-716    	; 0x1138 <twi_setup>
	si114x_reset(SI114X_ADDR);
    1404:	8a e5       	ldi	r24, 0x5A	; 90
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	11 de       	rcall	.-990    	; 0x102c <si114x_reset>
	twi_off();
    140a:	a0 de       	rcall	.-704    	; 0x114c <twi_off>
	
	btn_setup();
    140c:	01 dc       	rcall	.-2046   	; 0xc10 <btn_setup>
	rtc_setup();
    140e:	86 dc       	rcall	.-1780   	; 0xd1c <rtc_setup>
	rtc_set_time(30,0,0,0,2015);
    1410:	0f ed       	ldi	r16, 0xDF	; 223
    1412:	17 e0       	ldi	r17, 0x07	; 7
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e0       	ldi	r20, 0x00	; 0
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	8e e1       	ldi	r24, 0x1E	; 30
    141e:	e2 dc       	rcall	.-1596   	; 0xde4 <rtc_set_time>
	
	sei();
    1420:	78 94       	sei
    1422:	ff cf       	rjmp	.-2      	; 0x1422 <main+0x56>

00001424 <__vector_20>:
	}
	*/
}

//Used for SI114x Timestamp
ISR(TCC1_OVF_vect) {
    1424:	1f 92       	push	r1
    1426:	0f 92       	push	r0
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	0f 92       	push	r0
    142c:	11 24       	eor	r1, r1
    142e:	8f 93       	push	r24
    1430:	9f 93       	push	r25
	counter++;
    1432:	80 91 12 27 	lds	r24, 0x2712
    1436:	90 91 13 27 	lds	r25, 0x2713
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	80 93 12 27 	sts	0x2712, r24
    1440:	90 93 13 27 	sts	0x2713, r25
    1444:	9f 91       	pop	r25
    1446:	8f 91       	pop	r24
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0f 90       	pop	r0
    144e:	1f 90       	pop	r1
    1450:	18 95       	reti

00001452 <uart_setup>:

#include "uart.h"

void uart_setup(void) {
	
	PORTD.DIRSET = PIN3_bm; //TX
    1452:	e0 e6       	ldi	r30, 0x60	; 96
    1454:	f6 e0       	ldi	r31, 0x06	; 6
    1456:	88 e0       	ldi	r24, 0x08	; 8
    1458:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; //RX
    145a:	84 e0       	ldi	r24, 0x04	; 4
    145c:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
    145e:	e0 ea       	ldi	r30, 0xA0	; 160
    1460:	f9 e0       	ldi	r31, 0x09	; 9
    1462:	80 e2       	ldi	r24, 0x20	; 32
    1464:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 2094;//207;//0x1111;
    1466:	8e e2       	ldi	r24, 0x2E	; 46
    1468:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (-7 << 4) | (2094 >> 8);
    146a:	88 e9       	ldi	r24, 0x98	; 152
    146c:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
    146e:	83 e0       	ldi	r24, 0x03	; 3
    1470:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    1472:	88 e1       	ldi	r24, 0x18	; 24
    1474:	84 83       	std	Z+4, r24	; 0x04
    1476:	08 95       	ret

00001478 <uart_put_char>:
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    1478:	e0 ea       	ldi	r30, 0xA0	; 160
    147a:	f9 e0       	ldi	r31, 0x09	; 9
    147c:	91 81       	ldd	r25, Z+1	; 0x01
    147e:	95 ff       	sbrs	r25, 5
    1480:	fd cf       	rjmp	.-6      	; 0x147c <uart_put_char+0x4>
	USARTD0.DATA = c;
    1482:	80 93 a0 09 	sts	0x09A0, r24
    1486:	08 95       	ret

00001488 <uart_get_char>:
}

char uart_get_char(void) {
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
    1488:	e0 ea       	ldi	r30, 0xA0	; 160
    148a:	f9 e0       	ldi	r31, 0x09	; 9
    148c:	81 81       	ldd	r24, Z+1	; 0x01
    148e:	88 23       	and	r24, r24
    1490:	ec f7       	brge	.-6      	; 0x148c <uart_get_char+0x4>
	return USARTD0.DATA;
    1492:	80 91 a0 09 	lds	r24, 0x09A0
}
    1496:	08 95       	ret

00001498 <__divmodhi4>:
    1498:	97 fb       	bst	r25, 7
    149a:	07 2e       	mov	r0, r23
    149c:	16 f4       	brtc	.+4      	; 0x14a2 <__divmodhi4+0xa>
    149e:	00 94       	com	r0
    14a0:	06 d0       	rcall	.+12     	; 0x14ae <__divmodhi4_neg1>
    14a2:	77 fd       	sbrc	r23, 7
    14a4:	08 d0       	rcall	.+16     	; 0x14b6 <__divmodhi4_neg2>
    14a6:	1a d0       	rcall	.+52     	; 0x14dc <__udivmodhi4>
    14a8:	07 fc       	sbrc	r0, 7
    14aa:	05 d0       	rcall	.+10     	; 0x14b6 <__divmodhi4_neg2>
    14ac:	3e f4       	brtc	.+14     	; 0x14bc <__divmodhi4_exit>

000014ae <__divmodhi4_neg1>:
    14ae:	90 95       	com	r25
    14b0:	81 95       	neg	r24
    14b2:	9f 4f       	sbci	r25, 0xFF	; 255
    14b4:	08 95       	ret

000014b6 <__divmodhi4_neg2>:
    14b6:	70 95       	com	r23
    14b8:	61 95       	neg	r22
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255

000014bc <__divmodhi4_exit>:
    14bc:	08 95       	ret

000014be <__umulhisi3>:
    14be:	a2 9f       	mul	r26, r18
    14c0:	b0 01       	movw	r22, r0
    14c2:	b3 9f       	mul	r27, r19
    14c4:	c0 01       	movw	r24, r0
    14c6:	a3 9f       	mul	r26, r19
    14c8:	70 0d       	add	r23, r0
    14ca:	81 1d       	adc	r24, r1
    14cc:	11 24       	eor	r1, r1
    14ce:	91 1d       	adc	r25, r1
    14d0:	b2 9f       	mul	r27, r18
    14d2:	70 0d       	add	r23, r0
    14d4:	81 1d       	adc	r24, r1
    14d6:	11 24       	eor	r1, r1
    14d8:	91 1d       	adc	r25, r1
    14da:	08 95       	ret

000014dc <__udivmodhi4>:
    14dc:	aa 1b       	sub	r26, r26
    14de:	bb 1b       	sub	r27, r27
    14e0:	51 e1       	ldi	r21, 0x11	; 17
    14e2:	07 c0       	rjmp	.+14     	; 0x14f2 <__udivmodhi4_ep>

000014e4 <__udivmodhi4_loop>:
    14e4:	aa 1f       	adc	r26, r26
    14e6:	bb 1f       	adc	r27, r27
    14e8:	a6 17       	cp	r26, r22
    14ea:	b7 07       	cpc	r27, r23
    14ec:	10 f0       	brcs	.+4      	; 0x14f2 <__udivmodhi4_ep>
    14ee:	a6 1b       	sub	r26, r22
    14f0:	b7 0b       	sbc	r27, r23

000014f2 <__udivmodhi4_ep>:
    14f2:	88 1f       	adc	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	5a 95       	dec	r21
    14f8:	a9 f7       	brne	.-22     	; 0x14e4 <__udivmodhi4_loop>
    14fa:	80 95       	com	r24
    14fc:	90 95       	com	r25
    14fe:	bc 01       	movw	r22, r24
    1500:	cd 01       	movw	r24, r26
    1502:	08 95       	ret

00001504 <strchr>:
    1504:	fc 01       	movw	r30, r24
    1506:	81 91       	ld	r24, Z+
    1508:	86 17       	cp	r24, r22
    150a:	21 f0       	breq	.+8      	; 0x1514 <strchr+0x10>
    150c:	88 23       	and	r24, r24
    150e:	d9 f7       	brne	.-10     	; 0x1506 <strchr+0x2>
    1510:	99 27       	eor	r25, r25
    1512:	08 95       	ret
    1514:	31 97       	sbiw	r30, 0x01	; 1
    1516:	cf 01       	movw	r24, r30
    1518:	08 95       	ret

0000151a <strncpy>:
    151a:	fb 01       	movw	r30, r22
    151c:	dc 01       	movw	r26, r24
    151e:	41 50       	subi	r20, 0x01	; 1
    1520:	50 40       	sbci	r21, 0x00	; 0
    1522:	48 f0       	brcs	.+18     	; 0x1536 <strncpy+0x1c>
    1524:	01 90       	ld	r0, Z+
    1526:	0d 92       	st	X+, r0
    1528:	00 20       	and	r0, r0
    152a:	c9 f7       	brne	.-14     	; 0x151e <strncpy+0x4>
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <strncpy+0x16>
    152e:	1d 92       	st	X+, r1
    1530:	41 50       	subi	r20, 0x01	; 1
    1532:	50 40       	sbci	r21, 0x00	; 0
    1534:	e0 f7       	brcc	.-8      	; 0x152e <strncpy+0x14>
    1536:	08 95       	ret

00001538 <strstr>:
    1538:	fb 01       	movw	r30, r22
    153a:	51 91       	ld	r21, Z+
    153c:	55 23       	and	r21, r21
    153e:	a9 f0       	breq	.+42     	; 0x156a <strstr+0x32>
    1540:	bf 01       	movw	r22, r30
    1542:	dc 01       	movw	r26, r24
    1544:	4d 91       	ld	r20, X+
    1546:	45 17       	cp	r20, r21
    1548:	41 11       	cpse	r20, r1
    154a:	e1 f7       	brne	.-8      	; 0x1544 <strstr+0xc>
    154c:	59 f4       	brne	.+22     	; 0x1564 <strstr+0x2c>
    154e:	cd 01       	movw	r24, r26
    1550:	01 90       	ld	r0, Z+
    1552:	00 20       	and	r0, r0
    1554:	49 f0       	breq	.+18     	; 0x1568 <strstr+0x30>
    1556:	4d 91       	ld	r20, X+
    1558:	40 15       	cp	r20, r0
    155a:	41 11       	cpse	r20, r1
    155c:	c9 f3       	breq	.-14     	; 0x1550 <strstr+0x18>
    155e:	fb 01       	movw	r30, r22
    1560:	41 11       	cpse	r20, r1
    1562:	ef cf       	rjmp	.-34     	; 0x1542 <strstr+0xa>
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	08 95       	ret

0000156c <puts>:
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	e0 91 a8 27 	lds	r30, 0x27A8
    1578:	f0 91 a9 27 	lds	r31, 0x27A9
    157c:	23 81       	ldd	r18, Z+3	; 0x03
    157e:	21 ff       	sbrs	r18, 1
    1580:	1b c0       	rjmp	.+54     	; 0x15b8 <puts+0x4c>
    1582:	ec 01       	movw	r28, r24
    1584:	00 e0       	ldi	r16, 0x00	; 0
    1586:	10 e0       	ldi	r17, 0x00	; 0
    1588:	89 91       	ld	r24, Y+
    158a:	60 91 a8 27 	lds	r22, 0x27A8
    158e:	70 91 a9 27 	lds	r23, 0x27A9
    1592:	db 01       	movw	r26, r22
    1594:	18 96       	adiw	r26, 0x08	; 8
    1596:	ed 91       	ld	r30, X+
    1598:	fc 91       	ld	r31, X
    159a:	19 97       	sbiw	r26, 0x09	; 9
    159c:	88 23       	and	r24, r24
    159e:	31 f0       	breq	.+12     	; 0x15ac <puts+0x40>
    15a0:	09 95       	icall
    15a2:	89 2b       	or	r24, r25
    15a4:	89 f3       	breq	.-30     	; 0x1588 <puts+0x1c>
    15a6:	0f ef       	ldi	r16, 0xFF	; 255
    15a8:	1f ef       	ldi	r17, 0xFF	; 255
    15aa:	ee cf       	rjmp	.-36     	; 0x1588 <puts+0x1c>
    15ac:	8a e0       	ldi	r24, 0x0A	; 10
    15ae:	09 95       	icall
    15b0:	89 2b       	or	r24, r25
    15b2:	11 f4       	brne	.+4      	; 0x15b8 <puts+0x4c>
    15b4:	c8 01       	movw	r24, r16
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <puts+0x50>
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	9f ef       	ldi	r25, 0xFF	; 255
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	08 95       	ret

000015c6 <sprintf>:
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	2e 97       	sbiw	r28, 0x0e	; 14
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0d 89       	ldd	r16, Y+21	; 0x15
    15da:	1e 89       	ldd	r17, Y+22	; 0x16
    15dc:	86 e0       	ldi	r24, 0x06	; 6
    15de:	8c 83       	std	Y+4, r24	; 0x04
    15e0:	09 83       	std	Y+1, r16	; 0x01
    15e2:	1a 83       	std	Y+2, r17	; 0x02
    15e4:	8f ef       	ldi	r24, 0xFF	; 255
    15e6:	9f e7       	ldi	r25, 0x7F	; 127
    15e8:	8d 83       	std	Y+5, r24	; 0x05
    15ea:	9e 83       	std	Y+6, r25	; 0x06
    15ec:	ae 01       	movw	r20, r28
    15ee:	47 5e       	subi	r20, 0xE7	; 231
    15f0:	5f 4f       	sbci	r21, 0xFF	; 255
    15f2:	6f 89       	ldd	r22, Y+23	; 0x17
    15f4:	78 8d       	ldd	r23, Y+24	; 0x18
    15f6:	ce 01       	movw	r24, r28
    15f8:	01 96       	adiw	r24, 0x01	; 1
    15fa:	0d d0       	rcall	.+26     	; 0x1616 <vfprintf>
    15fc:	ef 81       	ldd	r30, Y+7	; 0x07
    15fe:	f8 85       	ldd	r31, Y+8	; 0x08
    1600:	e0 0f       	add	r30, r16
    1602:	f1 1f       	adc	r31, r17
    1604:	10 82       	st	Z, r1
    1606:	2e 96       	adiw	r28, 0x0e	; 14
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	08 95       	ret

00001616 <vfprintf>:
    1616:	2f 92       	push	r2
    1618:	3f 92       	push	r3
    161a:	4f 92       	push	r4
    161c:	5f 92       	push	r5
    161e:	6f 92       	push	r6
    1620:	7f 92       	push	r7
    1622:	8f 92       	push	r8
    1624:	9f 92       	push	r9
    1626:	af 92       	push	r10
    1628:	bf 92       	push	r11
    162a:	cf 92       	push	r12
    162c:	df 92       	push	r13
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	2c 97       	sbiw	r28, 0x0c	; 12
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	7c 01       	movw	r14, r24
    1646:	6b 01       	movw	r12, r22
    1648:	8a 01       	movw	r16, r20
    164a:	fc 01       	movw	r30, r24
    164c:	16 82       	std	Z+6, r1	; 0x06
    164e:	17 82       	std	Z+7, r1	; 0x07
    1650:	83 81       	ldd	r24, Z+3	; 0x03
    1652:	81 ff       	sbrs	r24, 1
    1654:	b0 c1       	rjmp	.+864    	; 0x19b6 <vfprintf+0x3a0>
    1656:	ce 01       	movw	r24, r28
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	4c 01       	movw	r8, r24
    165c:	f7 01       	movw	r30, r14
    165e:	93 81       	ldd	r25, Z+3	; 0x03
    1660:	f6 01       	movw	r30, r12
    1662:	93 fd       	sbrc	r25, 3
    1664:	85 91       	lpm	r24, Z+
    1666:	93 ff       	sbrs	r25, 3
    1668:	81 91       	ld	r24, Z+
    166a:	6f 01       	movw	r12, r30
    166c:	88 23       	and	r24, r24
    166e:	09 f4       	brne	.+2      	; 0x1672 <vfprintf+0x5c>
    1670:	9e c1       	rjmp	.+828    	; 0x19ae <vfprintf+0x398>
    1672:	85 32       	cpi	r24, 0x25	; 37
    1674:	39 f4       	brne	.+14     	; 0x1684 <vfprintf+0x6e>
    1676:	93 fd       	sbrc	r25, 3
    1678:	85 91       	lpm	r24, Z+
    167a:	93 ff       	sbrs	r25, 3
    167c:	81 91       	ld	r24, Z+
    167e:	6f 01       	movw	r12, r30
    1680:	85 32       	cpi	r24, 0x25	; 37
    1682:	21 f4       	brne	.+8      	; 0x168c <vfprintf+0x76>
    1684:	b7 01       	movw	r22, r14
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	c4 d1       	rcall	.+904    	; 0x1a12 <fputc>
    168a:	e8 cf       	rjmp	.-48     	; 0x165c <vfprintf+0x46>
    168c:	51 2c       	mov	r5, r1
    168e:	31 2c       	mov	r3, r1
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	20 32       	cpi	r18, 0x20	; 32
    1694:	a0 f4       	brcc	.+40     	; 0x16be <vfprintf+0xa8>
    1696:	8b 32       	cpi	r24, 0x2B	; 43
    1698:	69 f0       	breq	.+26     	; 0x16b4 <vfprintf+0x9e>
    169a:	30 f4       	brcc	.+12     	; 0x16a8 <vfprintf+0x92>
    169c:	80 32       	cpi	r24, 0x20	; 32
    169e:	59 f0       	breq	.+22     	; 0x16b6 <vfprintf+0xa0>
    16a0:	83 32       	cpi	r24, 0x23	; 35
    16a2:	69 f4       	brne	.+26     	; 0x16be <vfprintf+0xa8>
    16a4:	20 61       	ori	r18, 0x10	; 16
    16a6:	2c c0       	rjmp	.+88     	; 0x1700 <vfprintf+0xea>
    16a8:	8d 32       	cpi	r24, 0x2D	; 45
    16aa:	39 f0       	breq	.+14     	; 0x16ba <vfprintf+0xa4>
    16ac:	80 33       	cpi	r24, 0x30	; 48
    16ae:	39 f4       	brne	.+14     	; 0x16be <vfprintf+0xa8>
    16b0:	21 60       	ori	r18, 0x01	; 1
    16b2:	26 c0       	rjmp	.+76     	; 0x1700 <vfprintf+0xea>
    16b4:	22 60       	ori	r18, 0x02	; 2
    16b6:	24 60       	ori	r18, 0x04	; 4
    16b8:	23 c0       	rjmp	.+70     	; 0x1700 <vfprintf+0xea>
    16ba:	28 60       	ori	r18, 0x08	; 8
    16bc:	21 c0       	rjmp	.+66     	; 0x1700 <vfprintf+0xea>
    16be:	27 fd       	sbrc	r18, 7
    16c0:	27 c0       	rjmp	.+78     	; 0x1710 <vfprintf+0xfa>
    16c2:	30 ed       	ldi	r19, 0xD0	; 208
    16c4:	38 0f       	add	r19, r24
    16c6:	3a 30       	cpi	r19, 0x0A	; 10
    16c8:	78 f4       	brcc	.+30     	; 0x16e8 <vfprintf+0xd2>
    16ca:	26 ff       	sbrs	r18, 6
    16cc:	06 c0       	rjmp	.+12     	; 0x16da <vfprintf+0xc4>
    16ce:	fa e0       	ldi	r31, 0x0A	; 10
    16d0:	5f 9e       	mul	r5, r31
    16d2:	30 0d       	add	r19, r0
    16d4:	11 24       	eor	r1, r1
    16d6:	53 2e       	mov	r5, r19
    16d8:	13 c0       	rjmp	.+38     	; 0x1700 <vfprintf+0xea>
    16da:	8a e0       	ldi	r24, 0x0A	; 10
    16dc:	38 9e       	mul	r3, r24
    16de:	30 0d       	add	r19, r0
    16e0:	11 24       	eor	r1, r1
    16e2:	33 2e       	mov	r3, r19
    16e4:	20 62       	ori	r18, 0x20	; 32
    16e6:	0c c0       	rjmp	.+24     	; 0x1700 <vfprintf+0xea>
    16e8:	8e 32       	cpi	r24, 0x2E	; 46
    16ea:	21 f4       	brne	.+8      	; 0x16f4 <vfprintf+0xde>
    16ec:	26 fd       	sbrc	r18, 6
    16ee:	5f c1       	rjmp	.+702    	; 0x19ae <vfprintf+0x398>
    16f0:	20 64       	ori	r18, 0x40	; 64
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <vfprintf+0xea>
    16f4:	8c 36       	cpi	r24, 0x6C	; 108
    16f6:	11 f4       	brne	.+4      	; 0x16fc <vfprintf+0xe6>
    16f8:	20 68       	ori	r18, 0x80	; 128
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <vfprintf+0xea>
    16fc:	88 36       	cpi	r24, 0x68	; 104
    16fe:	41 f4       	brne	.+16     	; 0x1710 <vfprintf+0xfa>
    1700:	f6 01       	movw	r30, r12
    1702:	93 fd       	sbrc	r25, 3
    1704:	85 91       	lpm	r24, Z+
    1706:	93 ff       	sbrs	r25, 3
    1708:	81 91       	ld	r24, Z+
    170a:	6f 01       	movw	r12, r30
    170c:	81 11       	cpse	r24, r1
    170e:	c1 cf       	rjmp	.-126    	; 0x1692 <vfprintf+0x7c>
    1710:	98 2f       	mov	r25, r24
    1712:	9f 7d       	andi	r25, 0xDF	; 223
    1714:	95 54       	subi	r25, 0x45	; 69
    1716:	93 30       	cpi	r25, 0x03	; 3
    1718:	28 f4       	brcc	.+10     	; 0x1724 <vfprintf+0x10e>
    171a:	0c 5f       	subi	r16, 0xFC	; 252
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
    171e:	ff e3       	ldi	r31, 0x3F	; 63
    1720:	f9 83       	std	Y+1, r31	; 0x01
    1722:	0d c0       	rjmp	.+26     	; 0x173e <vfprintf+0x128>
    1724:	83 36       	cpi	r24, 0x63	; 99
    1726:	31 f0       	breq	.+12     	; 0x1734 <vfprintf+0x11e>
    1728:	83 37       	cpi	r24, 0x73	; 115
    172a:	71 f0       	breq	.+28     	; 0x1748 <vfprintf+0x132>
    172c:	83 35       	cpi	r24, 0x53	; 83
    172e:	09 f0       	breq	.+2      	; 0x1732 <vfprintf+0x11c>
    1730:	57 c0       	rjmp	.+174    	; 0x17e0 <vfprintf+0x1ca>
    1732:	21 c0       	rjmp	.+66     	; 0x1776 <vfprintf+0x160>
    1734:	f8 01       	movw	r30, r16
    1736:	80 81       	ld	r24, Z
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	0e 5f       	subi	r16, 0xFE	; 254
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	44 24       	eor	r4, r4
    1740:	43 94       	inc	r4
    1742:	51 2c       	mov	r5, r1
    1744:	54 01       	movw	r10, r8
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <vfprintf+0x15a>
    1748:	38 01       	movw	r6, r16
    174a:	f2 e0       	ldi	r31, 0x02	; 2
    174c:	6f 0e       	add	r6, r31
    174e:	71 1c       	adc	r7, r1
    1750:	f8 01       	movw	r30, r16
    1752:	a0 80       	ld	r10, Z
    1754:	b1 80       	ldd	r11, Z+1	; 0x01
    1756:	26 ff       	sbrs	r18, 6
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <vfprintf+0x14a>
    175a:	65 2d       	mov	r22, r5
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <vfprintf+0x14e>
    1760:	6f ef       	ldi	r22, 0xFF	; 255
    1762:	7f ef       	ldi	r23, 0xFF	; 255
    1764:	c5 01       	movw	r24, r10
    1766:	2c 87       	std	Y+12, r18	; 0x0c
    1768:	49 d1       	rcall	.+658    	; 0x19fc <strnlen>
    176a:	2c 01       	movw	r4, r24
    176c:	83 01       	movw	r16, r6
    176e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1770:	2f 77       	andi	r18, 0x7F	; 127
    1772:	22 2e       	mov	r2, r18
    1774:	16 c0       	rjmp	.+44     	; 0x17a2 <vfprintf+0x18c>
    1776:	38 01       	movw	r6, r16
    1778:	f2 e0       	ldi	r31, 0x02	; 2
    177a:	6f 0e       	add	r6, r31
    177c:	71 1c       	adc	r7, r1
    177e:	f8 01       	movw	r30, r16
    1780:	a0 80       	ld	r10, Z
    1782:	b1 80       	ldd	r11, Z+1	; 0x01
    1784:	26 ff       	sbrs	r18, 6
    1786:	03 c0       	rjmp	.+6      	; 0x178e <vfprintf+0x178>
    1788:	65 2d       	mov	r22, r5
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <vfprintf+0x17c>
    178e:	6f ef       	ldi	r22, 0xFF	; 255
    1790:	7f ef       	ldi	r23, 0xFF	; 255
    1792:	c5 01       	movw	r24, r10
    1794:	2c 87       	std	Y+12, r18	; 0x0c
    1796:	27 d1       	rcall	.+590    	; 0x19e6 <strnlen_P>
    1798:	2c 01       	movw	r4, r24
    179a:	2c 85       	ldd	r18, Y+12	; 0x0c
    179c:	20 68       	ori	r18, 0x80	; 128
    179e:	22 2e       	mov	r2, r18
    17a0:	83 01       	movw	r16, r6
    17a2:	23 fc       	sbrc	r2, 3
    17a4:	19 c0       	rjmp	.+50     	; 0x17d8 <vfprintf+0x1c2>
    17a6:	83 2d       	mov	r24, r3
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	48 16       	cp	r4, r24
    17ac:	59 06       	cpc	r5, r25
    17ae:	a0 f4       	brcc	.+40     	; 0x17d8 <vfprintf+0x1c2>
    17b0:	b7 01       	movw	r22, r14
    17b2:	80 e2       	ldi	r24, 0x20	; 32
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	2d d1       	rcall	.+602    	; 0x1a12 <fputc>
    17b8:	3a 94       	dec	r3
    17ba:	f5 cf       	rjmp	.-22     	; 0x17a6 <vfprintf+0x190>
    17bc:	f5 01       	movw	r30, r10
    17be:	27 fc       	sbrc	r2, 7
    17c0:	85 91       	lpm	r24, Z+
    17c2:	27 fe       	sbrs	r2, 7
    17c4:	81 91       	ld	r24, Z+
    17c6:	5f 01       	movw	r10, r30
    17c8:	b7 01       	movw	r22, r14
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	22 d1       	rcall	.+580    	; 0x1a12 <fputc>
    17ce:	31 10       	cpse	r3, r1
    17d0:	3a 94       	dec	r3
    17d2:	f1 e0       	ldi	r31, 0x01	; 1
    17d4:	4f 1a       	sub	r4, r31
    17d6:	51 08       	sbc	r5, r1
    17d8:	41 14       	cp	r4, r1
    17da:	51 04       	cpc	r5, r1
    17dc:	79 f7       	brne	.-34     	; 0x17bc <vfprintf+0x1a6>
    17de:	de c0       	rjmp	.+444    	; 0x199c <vfprintf+0x386>
    17e0:	84 36       	cpi	r24, 0x64	; 100
    17e2:	11 f0       	breq	.+4      	; 0x17e8 <vfprintf+0x1d2>
    17e4:	89 36       	cpi	r24, 0x69	; 105
    17e6:	31 f5       	brne	.+76     	; 0x1834 <vfprintf+0x21e>
    17e8:	f8 01       	movw	r30, r16
    17ea:	27 ff       	sbrs	r18, 7
    17ec:	07 c0       	rjmp	.+14     	; 0x17fc <vfprintf+0x1e6>
    17ee:	60 81       	ld	r22, Z
    17f0:	71 81       	ldd	r23, Z+1	; 0x01
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	93 81       	ldd	r25, Z+3	; 0x03
    17f6:	0c 5f       	subi	r16, 0xFC	; 252
    17f8:	1f 4f       	sbci	r17, 0xFF	; 255
    17fa:	08 c0       	rjmp	.+16     	; 0x180c <vfprintf+0x1f6>
    17fc:	60 81       	ld	r22, Z
    17fe:	71 81       	ldd	r23, Z+1	; 0x01
    1800:	88 27       	eor	r24, r24
    1802:	77 fd       	sbrc	r23, 7
    1804:	80 95       	com	r24
    1806:	98 2f       	mov	r25, r24
    1808:	0e 5f       	subi	r16, 0xFE	; 254
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	2f 76       	andi	r18, 0x6F	; 111
    180e:	b2 2e       	mov	r11, r18
    1810:	97 ff       	sbrs	r25, 7
    1812:	09 c0       	rjmp	.+18     	; 0x1826 <vfprintf+0x210>
    1814:	90 95       	com	r25
    1816:	80 95       	com	r24
    1818:	70 95       	com	r23
    181a:	61 95       	neg	r22
    181c:	7f 4f       	sbci	r23, 0xFF	; 255
    181e:	8f 4f       	sbci	r24, 0xFF	; 255
    1820:	9f 4f       	sbci	r25, 0xFF	; 255
    1822:	20 68       	ori	r18, 0x80	; 128
    1824:	b2 2e       	mov	r11, r18
    1826:	2a e0       	ldi	r18, 0x0A	; 10
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	a4 01       	movw	r20, r8
    182c:	24 d1       	rcall	.+584    	; 0x1a76 <__ultoa_invert>
    182e:	a8 2e       	mov	r10, r24
    1830:	a8 18       	sub	r10, r8
    1832:	43 c0       	rjmp	.+134    	; 0x18ba <vfprintf+0x2a4>
    1834:	85 37       	cpi	r24, 0x75	; 117
    1836:	29 f4       	brne	.+10     	; 0x1842 <vfprintf+0x22c>
    1838:	2f 7e       	andi	r18, 0xEF	; 239
    183a:	b2 2e       	mov	r11, r18
    183c:	2a e0       	ldi	r18, 0x0A	; 10
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	25 c0       	rjmp	.+74     	; 0x188c <vfprintf+0x276>
    1842:	f2 2f       	mov	r31, r18
    1844:	f9 7f       	andi	r31, 0xF9	; 249
    1846:	bf 2e       	mov	r11, r31
    1848:	8f 36       	cpi	r24, 0x6F	; 111
    184a:	c1 f0       	breq	.+48     	; 0x187c <vfprintf+0x266>
    184c:	18 f4       	brcc	.+6      	; 0x1854 <vfprintf+0x23e>
    184e:	88 35       	cpi	r24, 0x58	; 88
    1850:	79 f0       	breq	.+30     	; 0x1870 <vfprintf+0x25a>
    1852:	ad c0       	rjmp	.+346    	; 0x19ae <vfprintf+0x398>
    1854:	80 37       	cpi	r24, 0x70	; 112
    1856:	19 f0       	breq	.+6      	; 0x185e <vfprintf+0x248>
    1858:	88 37       	cpi	r24, 0x78	; 120
    185a:	21 f0       	breq	.+8      	; 0x1864 <vfprintf+0x24e>
    185c:	a8 c0       	rjmp	.+336    	; 0x19ae <vfprintf+0x398>
    185e:	2f 2f       	mov	r18, r31
    1860:	20 61       	ori	r18, 0x10	; 16
    1862:	b2 2e       	mov	r11, r18
    1864:	b4 fe       	sbrs	r11, 4
    1866:	0d c0       	rjmp	.+26     	; 0x1882 <vfprintf+0x26c>
    1868:	8b 2d       	mov	r24, r11
    186a:	84 60       	ori	r24, 0x04	; 4
    186c:	b8 2e       	mov	r11, r24
    186e:	09 c0       	rjmp	.+18     	; 0x1882 <vfprintf+0x26c>
    1870:	24 ff       	sbrs	r18, 4
    1872:	0a c0       	rjmp	.+20     	; 0x1888 <vfprintf+0x272>
    1874:	9f 2f       	mov	r25, r31
    1876:	96 60       	ori	r25, 0x06	; 6
    1878:	b9 2e       	mov	r11, r25
    187a:	06 c0       	rjmp	.+12     	; 0x1888 <vfprintf+0x272>
    187c:	28 e0       	ldi	r18, 0x08	; 8
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	05 c0       	rjmp	.+10     	; 0x188c <vfprintf+0x276>
    1882:	20 e1       	ldi	r18, 0x10	; 16
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	02 c0       	rjmp	.+4      	; 0x188c <vfprintf+0x276>
    1888:	20 e1       	ldi	r18, 0x10	; 16
    188a:	32 e0       	ldi	r19, 0x02	; 2
    188c:	f8 01       	movw	r30, r16
    188e:	b7 fe       	sbrs	r11, 7
    1890:	07 c0       	rjmp	.+14     	; 0x18a0 <vfprintf+0x28a>
    1892:	60 81       	ld	r22, Z
    1894:	71 81       	ldd	r23, Z+1	; 0x01
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	0c 5f       	subi	r16, 0xFC	; 252
    189c:	1f 4f       	sbci	r17, 0xFF	; 255
    189e:	06 c0       	rjmp	.+12     	; 0x18ac <vfprintf+0x296>
    18a0:	60 81       	ld	r22, Z
    18a2:	71 81       	ldd	r23, Z+1	; 0x01
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 5f       	subi	r16, 0xFE	; 254
    18aa:	1f 4f       	sbci	r17, 0xFF	; 255
    18ac:	a4 01       	movw	r20, r8
    18ae:	e3 d0       	rcall	.+454    	; 0x1a76 <__ultoa_invert>
    18b0:	a8 2e       	mov	r10, r24
    18b2:	a8 18       	sub	r10, r8
    18b4:	fb 2d       	mov	r31, r11
    18b6:	ff 77       	andi	r31, 0x7F	; 127
    18b8:	bf 2e       	mov	r11, r31
    18ba:	b6 fe       	sbrs	r11, 6
    18bc:	0b c0       	rjmp	.+22     	; 0x18d4 <vfprintf+0x2be>
    18be:	2b 2d       	mov	r18, r11
    18c0:	2e 7f       	andi	r18, 0xFE	; 254
    18c2:	a5 14       	cp	r10, r5
    18c4:	50 f4       	brcc	.+20     	; 0x18da <vfprintf+0x2c4>
    18c6:	b4 fe       	sbrs	r11, 4
    18c8:	0a c0       	rjmp	.+20     	; 0x18de <vfprintf+0x2c8>
    18ca:	b2 fc       	sbrc	r11, 2
    18cc:	08 c0       	rjmp	.+16     	; 0x18de <vfprintf+0x2c8>
    18ce:	2b 2d       	mov	r18, r11
    18d0:	2e 7e       	andi	r18, 0xEE	; 238
    18d2:	05 c0       	rjmp	.+10     	; 0x18de <vfprintf+0x2c8>
    18d4:	7a 2c       	mov	r7, r10
    18d6:	2b 2d       	mov	r18, r11
    18d8:	03 c0       	rjmp	.+6      	; 0x18e0 <vfprintf+0x2ca>
    18da:	7a 2c       	mov	r7, r10
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <vfprintf+0x2ca>
    18de:	75 2c       	mov	r7, r5
    18e0:	24 ff       	sbrs	r18, 4
    18e2:	0d c0       	rjmp	.+26     	; 0x18fe <vfprintf+0x2e8>
    18e4:	fe 01       	movw	r30, r28
    18e6:	ea 0d       	add	r30, r10
    18e8:	f1 1d       	adc	r31, r1
    18ea:	80 81       	ld	r24, Z
    18ec:	80 33       	cpi	r24, 0x30	; 48
    18ee:	11 f4       	brne	.+4      	; 0x18f4 <vfprintf+0x2de>
    18f0:	29 7e       	andi	r18, 0xE9	; 233
    18f2:	09 c0       	rjmp	.+18     	; 0x1906 <vfprintf+0x2f0>
    18f4:	22 ff       	sbrs	r18, 2
    18f6:	06 c0       	rjmp	.+12     	; 0x1904 <vfprintf+0x2ee>
    18f8:	73 94       	inc	r7
    18fa:	73 94       	inc	r7
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <vfprintf+0x2f0>
    18fe:	82 2f       	mov	r24, r18
    1900:	86 78       	andi	r24, 0x86	; 134
    1902:	09 f0       	breq	.+2      	; 0x1906 <vfprintf+0x2f0>
    1904:	73 94       	inc	r7
    1906:	23 fd       	sbrc	r18, 3
    1908:	12 c0       	rjmp	.+36     	; 0x192e <vfprintf+0x318>
    190a:	20 ff       	sbrs	r18, 0
    190c:	06 c0       	rjmp	.+12     	; 0x191a <vfprintf+0x304>
    190e:	5a 2c       	mov	r5, r10
    1910:	73 14       	cp	r7, r3
    1912:	18 f4       	brcc	.+6      	; 0x191a <vfprintf+0x304>
    1914:	53 0c       	add	r5, r3
    1916:	57 18       	sub	r5, r7
    1918:	73 2c       	mov	r7, r3
    191a:	73 14       	cp	r7, r3
    191c:	60 f4       	brcc	.+24     	; 0x1936 <vfprintf+0x320>
    191e:	b7 01       	movw	r22, r14
    1920:	80 e2       	ldi	r24, 0x20	; 32
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	2c 87       	std	Y+12, r18	; 0x0c
    1926:	75 d0       	rcall	.+234    	; 0x1a12 <fputc>
    1928:	73 94       	inc	r7
    192a:	2c 85       	ldd	r18, Y+12	; 0x0c
    192c:	f6 cf       	rjmp	.-20     	; 0x191a <vfprintf+0x304>
    192e:	73 14       	cp	r7, r3
    1930:	10 f4       	brcc	.+4      	; 0x1936 <vfprintf+0x320>
    1932:	37 18       	sub	r3, r7
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <vfprintf+0x322>
    1936:	31 2c       	mov	r3, r1
    1938:	24 ff       	sbrs	r18, 4
    193a:	11 c0       	rjmp	.+34     	; 0x195e <vfprintf+0x348>
    193c:	b7 01       	movw	r22, r14
    193e:	80 e3       	ldi	r24, 0x30	; 48
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	2c 87       	std	Y+12, r18	; 0x0c
    1944:	66 d0       	rcall	.+204    	; 0x1a12 <fputc>
    1946:	2c 85       	ldd	r18, Y+12	; 0x0c
    1948:	22 ff       	sbrs	r18, 2
    194a:	16 c0       	rjmp	.+44     	; 0x1978 <vfprintf+0x362>
    194c:	21 ff       	sbrs	r18, 1
    194e:	03 c0       	rjmp	.+6      	; 0x1956 <vfprintf+0x340>
    1950:	88 e5       	ldi	r24, 0x58	; 88
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 c0       	rjmp	.+4      	; 0x195a <vfprintf+0x344>
    1956:	88 e7       	ldi	r24, 0x78	; 120
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	b7 01       	movw	r22, r14
    195c:	0c c0       	rjmp	.+24     	; 0x1976 <vfprintf+0x360>
    195e:	82 2f       	mov	r24, r18
    1960:	86 78       	andi	r24, 0x86	; 134
    1962:	51 f0       	breq	.+20     	; 0x1978 <vfprintf+0x362>
    1964:	21 fd       	sbrc	r18, 1
    1966:	02 c0       	rjmp	.+4      	; 0x196c <vfprintf+0x356>
    1968:	80 e2       	ldi	r24, 0x20	; 32
    196a:	01 c0       	rjmp	.+2      	; 0x196e <vfprintf+0x358>
    196c:	8b e2       	ldi	r24, 0x2B	; 43
    196e:	27 fd       	sbrc	r18, 7
    1970:	8d e2       	ldi	r24, 0x2D	; 45
    1972:	b7 01       	movw	r22, r14
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	4d d0       	rcall	.+154    	; 0x1a12 <fputc>
    1978:	a5 14       	cp	r10, r5
    197a:	30 f4       	brcc	.+12     	; 0x1988 <vfprintf+0x372>
    197c:	b7 01       	movw	r22, r14
    197e:	80 e3       	ldi	r24, 0x30	; 48
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	47 d0       	rcall	.+142    	; 0x1a12 <fputc>
    1984:	5a 94       	dec	r5
    1986:	f8 cf       	rjmp	.-16     	; 0x1978 <vfprintf+0x362>
    1988:	aa 94       	dec	r10
    198a:	f4 01       	movw	r30, r8
    198c:	ea 0d       	add	r30, r10
    198e:	f1 1d       	adc	r31, r1
    1990:	80 81       	ld	r24, Z
    1992:	b7 01       	movw	r22, r14
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	3d d0       	rcall	.+122    	; 0x1a12 <fputc>
    1998:	a1 10       	cpse	r10, r1
    199a:	f6 cf       	rjmp	.-20     	; 0x1988 <vfprintf+0x372>
    199c:	33 20       	and	r3, r3
    199e:	09 f4       	brne	.+2      	; 0x19a2 <vfprintf+0x38c>
    19a0:	5d ce       	rjmp	.-838    	; 0x165c <vfprintf+0x46>
    19a2:	b7 01       	movw	r22, r14
    19a4:	80 e2       	ldi	r24, 0x20	; 32
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	34 d0       	rcall	.+104    	; 0x1a12 <fputc>
    19aa:	3a 94       	dec	r3
    19ac:	f7 cf       	rjmp	.-18     	; 0x199c <vfprintf+0x386>
    19ae:	f7 01       	movw	r30, r14
    19b0:	86 81       	ldd	r24, Z+6	; 0x06
    19b2:	97 81       	ldd	r25, Z+7	; 0x07
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <vfprintf+0x3a4>
    19b6:	8f ef       	ldi	r24, 0xFF	; 255
    19b8:	9f ef       	ldi	r25, 0xFF	; 255
    19ba:	2c 96       	adiw	r28, 0x0c	; 12
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	ff 90       	pop	r15
    19ca:	ef 90       	pop	r14
    19cc:	df 90       	pop	r13
    19ce:	cf 90       	pop	r12
    19d0:	bf 90       	pop	r11
    19d2:	af 90       	pop	r10
    19d4:	9f 90       	pop	r9
    19d6:	8f 90       	pop	r8
    19d8:	7f 90       	pop	r7
    19da:	6f 90       	pop	r6
    19dc:	5f 90       	pop	r5
    19de:	4f 90       	pop	r4
    19e0:	3f 90       	pop	r3
    19e2:	2f 90       	pop	r2
    19e4:	08 95       	ret

000019e6 <strnlen_P>:
    19e6:	fc 01       	movw	r30, r24
    19e8:	05 90       	lpm	r0, Z+
    19ea:	61 50       	subi	r22, 0x01	; 1
    19ec:	70 40       	sbci	r23, 0x00	; 0
    19ee:	01 10       	cpse	r0, r1
    19f0:	d8 f7       	brcc	.-10     	; 0x19e8 <strnlen_P+0x2>
    19f2:	80 95       	com	r24
    19f4:	90 95       	com	r25
    19f6:	8e 0f       	add	r24, r30
    19f8:	9f 1f       	adc	r25, r31
    19fa:	08 95       	ret

000019fc <strnlen>:
    19fc:	fc 01       	movw	r30, r24
    19fe:	61 50       	subi	r22, 0x01	; 1
    1a00:	70 40       	sbci	r23, 0x00	; 0
    1a02:	01 90       	ld	r0, Z+
    1a04:	01 10       	cpse	r0, r1
    1a06:	d8 f7       	brcc	.-10     	; 0x19fe <strnlen+0x2>
    1a08:	80 95       	com	r24
    1a0a:	90 95       	com	r25
    1a0c:	8e 0f       	add	r24, r30
    1a0e:	9f 1f       	adc	r25, r31
    1a10:	08 95       	ret

00001a12 <fputc>:
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	18 2f       	mov	r17, r24
    1a1c:	09 2f       	mov	r16, r25
    1a1e:	eb 01       	movw	r28, r22
    1a20:	8b 81       	ldd	r24, Y+3	; 0x03
    1a22:	81 fd       	sbrc	r24, 1
    1a24:	03 c0       	rjmp	.+6      	; 0x1a2c <fputc+0x1a>
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	9f ef       	ldi	r25, 0xFF	; 255
    1a2a:	20 c0       	rjmp	.+64     	; 0x1a6c <fputc+0x5a>
    1a2c:	82 ff       	sbrs	r24, 2
    1a2e:	10 c0       	rjmp	.+32     	; 0x1a50 <fputc+0x3e>
    1a30:	4e 81       	ldd	r20, Y+6	; 0x06
    1a32:	5f 81       	ldd	r21, Y+7	; 0x07
    1a34:	2c 81       	ldd	r18, Y+4	; 0x04
    1a36:	3d 81       	ldd	r19, Y+5	; 0x05
    1a38:	42 17       	cp	r20, r18
    1a3a:	53 07       	cpc	r21, r19
    1a3c:	7c f4       	brge	.+30     	; 0x1a5c <fputc+0x4a>
    1a3e:	e8 81       	ld	r30, Y
    1a40:	f9 81       	ldd	r31, Y+1	; 0x01
    1a42:	9f 01       	movw	r18, r30
    1a44:	2f 5f       	subi	r18, 0xFF	; 255
    1a46:	3f 4f       	sbci	r19, 0xFF	; 255
    1a48:	28 83       	st	Y, r18
    1a4a:	39 83       	std	Y+1, r19	; 0x01
    1a4c:	10 83       	st	Z, r17
    1a4e:	06 c0       	rjmp	.+12     	; 0x1a5c <fputc+0x4a>
    1a50:	e8 85       	ldd	r30, Y+8	; 0x08
    1a52:	f9 85       	ldd	r31, Y+9	; 0x09
    1a54:	81 2f       	mov	r24, r17
    1a56:	09 95       	icall
    1a58:	89 2b       	or	r24, r25
    1a5a:	29 f7       	brne	.-54     	; 0x1a26 <fputc+0x14>
    1a5c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a5e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a60:	2f 5f       	subi	r18, 0xFF	; 255
    1a62:	3f 4f       	sbci	r19, 0xFF	; 255
    1a64:	2e 83       	std	Y+6, r18	; 0x06
    1a66:	3f 83       	std	Y+7, r19	; 0x07
    1a68:	81 2f       	mov	r24, r17
    1a6a:	90 2f       	mov	r25, r16
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	1f 91       	pop	r17
    1a72:	0f 91       	pop	r16
    1a74:	08 95       	ret

00001a76 <__ultoa_invert>:
    1a76:	fa 01       	movw	r30, r20
    1a78:	aa 27       	eor	r26, r26
    1a7a:	28 30       	cpi	r18, 0x08	; 8
    1a7c:	51 f1       	breq	.+84     	; 0x1ad2 <__ultoa_invert+0x5c>
    1a7e:	20 31       	cpi	r18, 0x10	; 16
    1a80:	81 f1       	breq	.+96     	; 0x1ae2 <__ultoa_invert+0x6c>
    1a82:	e8 94       	clt
    1a84:	6f 93       	push	r22
    1a86:	6e 7f       	andi	r22, 0xFE	; 254
    1a88:	6e 5f       	subi	r22, 0xFE	; 254
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a90:	af 4f       	sbci	r26, 0xFF	; 255
    1a92:	b1 e0       	ldi	r27, 0x01	; 1
    1a94:	3e d0       	rcall	.+124    	; 0x1b12 <__ultoa_invert+0x9c>
    1a96:	b4 e0       	ldi	r27, 0x04	; 4
    1a98:	3c d0       	rcall	.+120    	; 0x1b12 <__ultoa_invert+0x9c>
    1a9a:	67 0f       	add	r22, r23
    1a9c:	78 1f       	adc	r23, r24
    1a9e:	89 1f       	adc	r24, r25
    1aa0:	9a 1f       	adc	r25, r26
    1aa2:	a1 1d       	adc	r26, r1
    1aa4:	68 0f       	add	r22, r24
    1aa6:	79 1f       	adc	r23, r25
    1aa8:	8a 1f       	adc	r24, r26
    1aaa:	91 1d       	adc	r25, r1
    1aac:	a1 1d       	adc	r26, r1
    1aae:	6a 0f       	add	r22, r26
    1ab0:	71 1d       	adc	r23, r1
    1ab2:	81 1d       	adc	r24, r1
    1ab4:	91 1d       	adc	r25, r1
    1ab6:	a1 1d       	adc	r26, r1
    1ab8:	20 d0       	rcall	.+64     	; 0x1afa <__ultoa_invert+0x84>
    1aba:	09 f4       	brne	.+2      	; 0x1abe <__ultoa_invert+0x48>
    1abc:	68 94       	set
    1abe:	3f 91       	pop	r19
    1ac0:	2a e0       	ldi	r18, 0x0A	; 10
    1ac2:	26 9f       	mul	r18, r22
    1ac4:	11 24       	eor	r1, r1
    1ac6:	30 19       	sub	r19, r0
    1ac8:	30 5d       	subi	r19, 0xD0	; 208
    1aca:	31 93       	st	Z+, r19
    1acc:	de f6       	brtc	.-74     	; 0x1a84 <__ultoa_invert+0xe>
    1ace:	cf 01       	movw	r24, r30
    1ad0:	08 95       	ret
    1ad2:	46 2f       	mov	r20, r22
    1ad4:	47 70       	andi	r20, 0x07	; 7
    1ad6:	40 5d       	subi	r20, 0xD0	; 208
    1ad8:	41 93       	st	Z+, r20
    1ada:	b3 e0       	ldi	r27, 0x03	; 3
    1adc:	0f d0       	rcall	.+30     	; 0x1afc <__ultoa_invert+0x86>
    1ade:	c9 f7       	brne	.-14     	; 0x1ad2 <__ultoa_invert+0x5c>
    1ae0:	f6 cf       	rjmp	.-20     	; 0x1ace <__ultoa_invert+0x58>
    1ae2:	46 2f       	mov	r20, r22
    1ae4:	4f 70       	andi	r20, 0x0F	; 15
    1ae6:	40 5d       	subi	r20, 0xD0	; 208
    1ae8:	4a 33       	cpi	r20, 0x3A	; 58
    1aea:	18 f0       	brcs	.+6      	; 0x1af2 <__ultoa_invert+0x7c>
    1aec:	49 5d       	subi	r20, 0xD9	; 217
    1aee:	31 fd       	sbrc	r19, 1
    1af0:	40 52       	subi	r20, 0x20	; 32
    1af2:	41 93       	st	Z+, r20
    1af4:	02 d0       	rcall	.+4      	; 0x1afa <__ultoa_invert+0x84>
    1af6:	a9 f7       	brne	.-22     	; 0x1ae2 <__ultoa_invert+0x6c>
    1af8:	ea cf       	rjmp	.-44     	; 0x1ace <__ultoa_invert+0x58>
    1afa:	b4 e0       	ldi	r27, 0x04	; 4
    1afc:	a6 95       	lsr	r26
    1afe:	97 95       	ror	r25
    1b00:	87 95       	ror	r24
    1b02:	77 95       	ror	r23
    1b04:	67 95       	ror	r22
    1b06:	ba 95       	dec	r27
    1b08:	c9 f7       	brne	.-14     	; 0x1afc <__ultoa_invert+0x86>
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	61 05       	cpc	r22, r1
    1b0e:	71 05       	cpc	r23, r1
    1b10:	08 95       	ret
    1b12:	9b 01       	movw	r18, r22
    1b14:	ac 01       	movw	r20, r24
    1b16:	0a 2e       	mov	r0, r26
    1b18:	06 94       	lsr	r0
    1b1a:	57 95       	ror	r21
    1b1c:	47 95       	ror	r20
    1b1e:	37 95       	ror	r19
    1b20:	27 95       	ror	r18
    1b22:	ba 95       	dec	r27
    1b24:	c9 f7       	brne	.-14     	; 0x1b18 <__ultoa_invert+0xa2>
    1b26:	62 0f       	add	r22, r18
    1b28:	73 1f       	adc	r23, r19
    1b2a:	84 1f       	adc	r24, r20
    1b2c:	95 1f       	adc	r25, r21
    1b2e:	a0 1d       	adc	r26, r0
    1b30:	08 95       	ret

00001b32 <_exit>:
    1b32:	f8 94       	cli

00001b34 <__stop_program>:
    1b34:	ff cf       	rjmp	.-2      	; 0x1b34 <__stop_program>
