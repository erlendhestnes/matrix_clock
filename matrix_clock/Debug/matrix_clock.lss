
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008954  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000888  00802000  00008954  000089e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000344  00802888  00802888  00009270  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009270  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000bd8  00000000  00000000  000092cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001df29  00000000  00000000  00009ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004148  00000000  00000000  00027dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000b145  00000000  00000000  0002bf15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00002f90  00000000  00000000  0003705c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000046be  00000000  00000000  00039fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014942  00000000  00000000  0003e6aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d60  00000000  00000000  00052fec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	26 c7       	rjmp	.+3660   	; 0xe4e <_StackPaint>
       2:	00 00       	nop
       4:	5a c7       	rjmp	.+3764   	; 0xeba <__bad_interrupt>
       6:	00 00       	nop
       8:	58 c7       	rjmp	.+3760   	; 0xeba <__bad_interrupt>
       a:	00 00       	nop
       c:	56 c7       	rjmp	.+3756   	; 0xeba <__bad_interrupt>
       e:	00 00       	nop
      10:	54 c7       	rjmp	.+3752   	; 0xeba <__bad_interrupt>
      12:	00 00       	nop
      14:	52 c7       	rjmp	.+3748   	; 0xeba <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c7       	rjmp	.+3774   	; 0xed8 <__vector_6>
      1a:	00 00       	nop
      1c:	4e c7       	rjmp	.+3740   	; 0xeba <__bad_interrupt>
      1e:	00 00       	nop
      20:	4c c7       	rjmp	.+3736   	; 0xeba <__bad_interrupt>
      22:	00 00       	nop
      24:	4a c7       	rjmp	.+3732   	; 0xeba <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__vector_10>
      2c:	46 c7       	rjmp	.+3724   	; 0xeba <__bad_interrupt>
      2e:	00 00       	nop
      30:	44 c7       	rjmp	.+3720   	; 0xeba <__bad_interrupt>
      32:	00 00       	nop
      34:	42 c7       	rjmp	.+3716   	; 0xeba <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 38 1f 	jmp	0x3e70	; 0x3e70 <__vector_14>
      3c:	3e c7       	rjmp	.+3708   	; 0xeba <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 d6 37 	jmp	0x6fac	; 0x6fac <__vector_16>
      44:	3a c7       	rjmp	.+3700   	; 0xeba <__bad_interrupt>
      46:	00 00       	nop
      48:	38 c7       	rjmp	.+3696   	; 0xeba <__bad_interrupt>
      4a:	00 00       	nop
      4c:	36 c7       	rjmp	.+3692   	; 0xeba <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__vector_20>
      54:	32 c7       	rjmp	.+3684   	; 0xeba <__bad_interrupt>
      56:	00 00       	nop
      58:	30 c7       	rjmp	.+3680   	; 0xeba <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2e c7       	rjmp	.+3676   	; 0xeba <__bad_interrupt>
      5e:	00 00       	nop
      60:	2c c7       	rjmp	.+3672   	; 0xeba <__bad_interrupt>
      62:	00 00       	nop
      64:	2a c7       	rjmp	.+3668   	; 0xeba <__bad_interrupt>
      66:	00 00       	nop
      68:	28 c7       	rjmp	.+3664   	; 0xeba <__bad_interrupt>
      6a:	00 00       	nop
      6c:	26 c7       	rjmp	.+3660   	; 0xeba <__bad_interrupt>
      6e:	00 00       	nop
      70:	24 c7       	rjmp	.+3656   	; 0xeba <__bad_interrupt>
      72:	00 00       	nop
      74:	22 c7       	rjmp	.+3652   	; 0xeba <__bad_interrupt>
      76:	00 00       	nop
      78:	20 c7       	rjmp	.+3648   	; 0xeba <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1e c7       	rjmp	.+3644   	; 0xeba <__bad_interrupt>
      7e:	00 00       	nop
      80:	1c c7       	rjmp	.+3640   	; 0xeba <__bad_interrupt>
      82:	00 00       	nop
      84:	1a c7       	rjmp	.+3636   	; 0xeba <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 68 12 	jmp	0x24d0	; 0x24d0 <__vector_34>
      8c:	16 c7       	rjmp	.+3628   	; 0xeba <__bad_interrupt>
      8e:	00 00       	nop
      90:	14 c7       	rjmp	.+3624   	; 0xeba <__bad_interrupt>
      92:	00 00       	nop
      94:	12 c7       	rjmp	.+3620   	; 0xeba <__bad_interrupt>
      96:	00 00       	nop
      98:	10 c7       	rjmp	.+3616   	; 0xeba <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0e c7       	rjmp	.+3612   	; 0xeba <__bad_interrupt>
      9e:	00 00       	nop
      a0:	0c c7       	rjmp	.+3608   	; 0xeba <__bad_interrupt>
      a2:	00 00       	nop
      a4:	0a c7       	rjmp	.+3604   	; 0xeba <__bad_interrupt>
      a6:	00 00       	nop
      a8:	08 c7       	rjmp	.+3600   	; 0xeba <__bad_interrupt>
      aa:	00 00       	nop
      ac:	06 c7       	rjmp	.+3596   	; 0xeba <__bad_interrupt>
      ae:	00 00       	nop
      b0:	04 c7       	rjmp	.+3592   	; 0xeba <__bad_interrupt>
      b2:	00 00       	nop
      b4:	02 c7       	rjmp	.+3588   	; 0xeba <__bad_interrupt>
      b6:	00 00       	nop
      b8:	00 c7       	rjmp	.+3584   	; 0xeba <__bad_interrupt>
      ba:	00 00       	nop
      bc:	fe c6       	rjmp	.+3580   	; 0xeba <__bad_interrupt>
      be:	00 00       	nop
      c0:	fc c6       	rjmp	.+3576   	; 0xeba <__bad_interrupt>
      c2:	00 00       	nop
      c4:	fa c6       	rjmp	.+3572   	; 0xeba <__bad_interrupt>
      c6:	00 00       	nop
      c8:	f8 c6       	rjmp	.+3568   	; 0xeba <__bad_interrupt>
      ca:	00 00       	nop
      cc:	f6 c6       	rjmp	.+3564   	; 0xeba <__bad_interrupt>
      ce:	00 00       	nop
      d0:	f4 c6       	rjmp	.+3560   	; 0xeba <__bad_interrupt>
      d2:	00 00       	nop
      d4:	f2 c6       	rjmp	.+3556   	; 0xeba <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f0 c6       	rjmp	.+3552   	; 0xeba <__bad_interrupt>
      da:	00 00       	nop
      dc:	ee c6       	rjmp	.+3548   	; 0xeba <__bad_interrupt>
      de:	00 00       	nop
      e0:	ec c6       	rjmp	.+3544   	; 0xeba <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ea c6       	rjmp	.+3540   	; 0xeba <__bad_interrupt>
      e6:	00 00       	nop
      e8:	e8 c6       	rjmp	.+3536   	; 0xeba <__bad_interrupt>
      ea:	00 00       	nop
      ec:	e6 c6       	rjmp	.+3532   	; 0xeba <__bad_interrupt>
      ee:	00 00       	nop
      f0:	e4 c6       	rjmp	.+3528   	; 0xeba <__bad_interrupt>
      f2:	00 00       	nop
      f4:	e2 c6       	rjmp	.+3524   	; 0xeba <__bad_interrupt>
      f6:	00 00       	nop
      f8:	e0 c6       	rjmp	.+3520   	; 0xeba <__bad_interrupt>
      fa:	00 00       	nop
      fc:	de c6       	rjmp	.+3516   	; 0xeba <__bad_interrupt>
      fe:	00 00       	nop
     100:	dc c6       	rjmp	.+3512   	; 0xeba <__bad_interrupt>
     102:	00 00       	nop
     104:	da c6       	rjmp	.+3508   	; 0xeba <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__vector_66>
     10c:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__vector_67>
     110:	d4 c6       	rjmp	.+3496   	; 0xeba <__bad_interrupt>
     112:	00 00       	nop
     114:	d2 c6       	rjmp	.+3492   	; 0xeba <__bad_interrupt>
     116:	00 00       	nop
     118:	d0 c6       	rjmp	.+3488   	; 0xeba <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ce c6       	rjmp	.+3484   	; 0xeba <__bad_interrupt>
     11e:	00 00       	nop
     120:	cc c6       	rjmp	.+3480   	; 0xeba <__bad_interrupt>
     122:	00 00       	nop
     124:	ca c6       	rjmp	.+3476   	; 0xeba <__bad_interrupt>
     126:	00 00       	nop
     128:	c8 c6       	rjmp	.+3472   	; 0xeba <__bad_interrupt>
     12a:	00 00       	nop
     12c:	c6 c6       	rjmp	.+3468   	; 0xeba <__bad_interrupt>
     12e:	00 00       	nop
     130:	c4 c6       	rjmp	.+3464   	; 0xeba <__bad_interrupt>
     132:	00 00       	nop
     134:	c2 c6       	rjmp	.+3460   	; 0xeba <__bad_interrupt>
     136:	00 00       	nop
     138:	c0 c6       	rjmp	.+3456   	; 0xeba <__bad_interrupt>
     13a:	00 00       	nop
     13c:	be c6       	rjmp	.+3452   	; 0xeba <__bad_interrupt>
     13e:	00 00       	nop
     140:	bc c6       	rjmp	.+3448   	; 0xeba <__bad_interrupt>
     142:	00 00       	nop
     144:	ba c6       	rjmp	.+3444   	; 0xeba <__bad_interrupt>
     146:	00 00       	nop
     148:	b8 c6       	rjmp	.+3440   	; 0xeba <__bad_interrupt>
     14a:	00 00       	nop
     14c:	b6 c6       	rjmp	.+3436   	; 0xeba <__bad_interrupt>
     14e:	00 00       	nop
     150:	b4 c6       	rjmp	.+3432   	; 0xeba <__bad_interrupt>
     152:	00 00       	nop
     154:	b2 c6       	rjmp	.+3428   	; 0xeba <__bad_interrupt>
     156:	00 00       	nop
     158:	b0 c6       	rjmp	.+3424   	; 0xeba <__bad_interrupt>
     15a:	00 00       	nop
     15c:	ae c6       	rjmp	.+3420   	; 0xeba <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 83 0c 	jmp	0x1906	; 0x1906 <__vector_88>
     164:	aa c6       	rjmp	.+3412   	; 0xeba <__bad_interrupt>
     166:	00 00       	nop
     168:	a8 c6       	rjmp	.+3408   	; 0xeba <__bad_interrupt>
     16a:	00 00       	nop
     16c:	a6 c6       	rjmp	.+3404   	; 0xeba <__bad_interrupt>
     16e:	00 00       	nop
     170:	a4 c6       	rjmp	.+3400   	; 0xeba <__bad_interrupt>
     172:	00 00       	nop
     174:	a2 c6       	rjmp	.+3396   	; 0xeba <__bad_interrupt>
     176:	00 00       	nop
     178:	a0 c6       	rjmp	.+3392   	; 0xeba <__bad_interrupt>
     17a:	00 00       	nop
     17c:	9e c6       	rjmp	.+3388   	; 0xeba <__bad_interrupt>
     17e:	00 00       	nop
     180:	9c c6       	rjmp	.+3384   	; 0xeba <__bad_interrupt>
     182:	00 00       	nop
     184:	9a c6       	rjmp	.+3380   	; 0xeba <__bad_interrupt>
     186:	00 00       	nop
     188:	98 c6       	rjmp	.+3376   	; 0xeba <__bad_interrupt>
     18a:	00 00       	nop
     18c:	96 c6       	rjmp	.+3372   	; 0xeba <__bad_interrupt>
     18e:	00 00       	nop
     190:	94 c6       	rjmp	.+3368   	; 0xeba <__bad_interrupt>
     192:	00 00       	nop
     194:	92 c6       	rjmp	.+3364   	; 0xeba <__bad_interrupt>
     196:	00 00       	nop
     198:	90 c6       	rjmp	.+3360   	; 0xeba <__bad_interrupt>
     19a:	00 00       	nop
     19c:	8e c6       	rjmp	.+3356   	; 0xeba <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	8c c6       	rjmp	.+3352   	; 0xeba <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	8a c6       	rjmp	.+3348   	; 0xeba <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	88 c6       	rjmp	.+3344   	; 0xeba <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	86 c6       	rjmp	.+3340   	; 0xeba <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	84 c6       	rjmp	.+3336   	; 0xeba <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	82 c6       	rjmp	.+3332   	; 0xeba <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	80 c6       	rjmp	.+3328   	; 0xeba <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	7e c6       	rjmp	.+3324   	; 0xeba <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	7c c6       	rjmp	.+3320   	; 0xeba <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	7a c6       	rjmp	.+3316   	; 0xeba <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	78 c6       	rjmp	.+3312   	; 0xeba <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	76 c6       	rjmp	.+3308   	; 0xeba <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	74 c6       	rjmp	.+3304   	; 0xeba <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	72 c6       	rjmp	.+3300   	; 0xeba <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	70 c6       	rjmp	.+3296   	; 0xeba <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	6e c6       	rjmp	.+3292   	; 0xeba <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	6c c6       	rjmp	.+3288   	; 0xeba <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	6a c6       	rjmp	.+3284   	; 0xeba <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	68 c6       	rjmp	.+3280   	; 0xeba <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	66 c6       	rjmp	.+3276   	; 0xeba <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	64 c6       	rjmp	.+3272   	; 0xeba <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	62 c6       	rjmp	.+3268   	; 0xeba <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	60 c6       	rjmp	.+3264   	; 0xeba <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	b8 21       	and	r27, r8
     1fe:	b2 21       	and	r27, r2
     200:	b2 21       	and	r27, r2
     202:	b2 21       	and	r27, r2
     204:	b2 21       	and	r27, r2
     206:	b2 21       	and	r27, r2
     208:	b2 21       	and	r27, r2
     20a:	b2 21       	and	r27, r2
     20c:	b2 21       	and	r27, r2
     20e:	b2 21       	and	r27, r2
     210:	b2 21       	and	r27, r2
     212:	b2 21       	and	r27, r2
     214:	b2 21       	and	r27, r2
     216:	b8 21       	and	r27, r8
     218:	b2 21       	and	r27, r2
     21a:	b2 21       	and	r27, r2
     21c:	b2 21       	and	r27, r2
     21e:	b2 21       	and	r27, r2
     220:	b2 21       	and	r27, r2
     222:	b2 21       	and	r27, r2
     224:	b2 21       	and	r27, r2
     226:	b2 21       	and	r27, r2
     228:	b2 21       	and	r27, r2
     22a:	b2 21       	and	r27, r2
     22c:	b2 21       	and	r27, r2
     22e:	b2 21       	and	r27, r2
     230:	b2 21       	and	r27, r2
     232:	b2 21       	and	r27, r2
     234:	b2 21       	and	r27, r2
     236:	b2 21       	and	r27, r2
     238:	b2 21       	and	r27, r2
     23a:	b2 21       	and	r27, r2
     23c:	b2 21       	and	r27, r2
     23e:	b2 21       	and	r27, r2
     240:	b2 21       	and	r27, r2
     242:	b2 21       	and	r27, r2
     244:	b2 21       	and	r27, r2
     246:	b2 21       	and	r27, r2
     248:	b2 21       	and	r27, r2
     24a:	b2 21       	and	r27, r2
     24c:	b2 21       	and	r27, r2
     24e:	b2 21       	and	r27, r2
     250:	b2 21       	and	r27, r2
     252:	b2 21       	and	r27, r2
     254:	b2 21       	and	r27, r2
     256:	b2 21       	and	r27, r2
     258:	b2 21       	and	r27, r2
     25a:	b2 21       	and	r27, r2
     25c:	b2 21       	and	r27, r2
     25e:	b2 21       	and	r27, r2
     260:	b2 21       	and	r27, r2
     262:	b2 21       	and	r27, r2
     264:	b2 21       	and	r27, r2
     266:	b2 21       	and	r27, r2
     268:	b2 21       	and	r27, r2
     26a:	b2 21       	and	r27, r2
     26c:	b2 21       	and	r27, r2
     26e:	b2 21       	and	r27, r2
     270:	b8 21       	and	r27, r8
     272:	b2 21       	and	r27, r2
     274:	b2 21       	and	r27, r2
     276:	b2 21       	and	r27, r2
     278:	b2 21       	and	r27, r2
     27a:	b2 21       	and	r27, r2
     27c:	b8 21       	and	r27, r8
     27e:	b2 21       	and	r27, r2
     280:	b2 21       	and	r27, r2
     282:	b2 21       	and	r27, r2
     284:	b8 21       	and	r27, r8
     286:	b2 21       	and	r27, r2
     288:	b2 21       	and	r27, r2
     28a:	b2 21       	and	r27, r2
     28c:	b2 21       	and	r27, r2
     28e:	b2 21       	and	r27, r2
     290:	b2 21       	and	r27, r2
     292:	b2 21       	and	r27, r2
     294:	b8 21       	and	r27, r8
     296:	b2 21       	and	r27, r2
     298:	b2 21       	and	r27, r2
     29a:	b2 21       	and	r27, r2
     29c:	b8 21       	and	r27, r8
     29e:	b2 21       	and	r27, r2
     2a0:	b8 21       	and	r27, r8
     2a2:	6c 21       	and	r22, r12
     2a4:	50 36       	cpi	r21, 0x60	; 96
     2a6:	5a 36       	cpi	r21, 0x6A	; 106
     2a8:	4b 36       	cpi	r20, 0x6B	; 107
     2aa:	55 36       	cpi	r21, 0x65	; 101
     2ac:	5f 36       	cpi	r21, 0x6F	; 111
     2ae:	64 36       	cpi	r22, 0x64	; 100
     2b0:	69 36       	cpi	r22, 0x69	; 105
     2b2:	91 36       	cpi	r25, 0x61	; 97
     2b4:	ba 36       	cpi	r27, 0x6A	; 106
     2b6:	8a 36       	cpi	r24, 0x6A	; 106
     2b8:	95 36       	cpi	r25, 0x65	; 101
     2ba:	be 36       	cpi	r27, 0x6E	; 110
     2bc:	c4 36       	cpi	r28, 0x64	; 100
     2be:	cb 36       	cpi	r28, 0x6B	; 107
     2c0:	24 37       	cpi	r18, 0x74	; 116
     2c2:	27 37       	cpi	r18, 0x77	; 119
     2c4:	2a 37       	cpi	r18, 0x7A	; 122
     2c6:	2d 37       	cpi	r18, 0x7D	; 125
     2c8:	30 37       	cpi	r19, 0x70	; 112
     2ca:	33 37       	cpi	r19, 0x73	; 115
     2cc:	36 37       	cpi	r19, 0x76	; 118
     2ce:	17 38       	cpi	r17, 0x87	; 135
     2d0:	1a 38       	cpi	r17, 0x8A	; 138
     2d2:	07 38       	cpi	r16, 0x87	; 135
     2d4:	0a 38       	cpi	r16, 0x8A	; 138
     2d6:	0d 38       	cpi	r16, 0x8D	; 141
     2d8:	10 38       	cpi	r17, 0x80	; 128
     2da:	13 38       	cpi	r17, 0x83	; 131
     2dc:	47 38       	cpi	r20, 0x87	; 135
     2de:	4a 38       	cpi	r20, 0x8A	; 138
     2e0:	28 38       	cpi	r18, 0x88	; 136
     2e2:	2b 38       	cpi	r18, 0x8B	; 139
     2e4:	2e 38       	cpi	r18, 0x8E	; 142
     2e6:	31 38       	cpi	r19, 0x81	; 129
     2e8:	34 38       	cpi	r19, 0x84	; 132
     2ea:	37 38       	cpi	r19, 0x87	; 135
     2ec:	3a 38       	cpi	r19, 0x8A	; 138
     2ee:	3d 38       	cpi	r19, 0x8D	; 141
     2f0:	40 38       	cpi	r20, 0x80	; 128
     2f2:	43 38       	cpi	r20, 0x83	; 131
     2f4:	93 38       	cpi	r25, 0x83	; 131
     2f6:	8d 38       	cpi	r24, 0x8D	; 141
     2f8:	93 38       	cpi	r25, 0x83	; 131
     2fa:	95 38       	cpi	r25, 0x85	; 133
     2fc:	93 38       	cpi	r25, 0x83	; 131
     2fe:	95 38       	cpi	r25, 0x85	; 133
     300:	93 38       	cpi	r25, 0x83	; 131
     302:	93 38       	cpi	r25, 0x83	; 131
     304:	95 38       	cpi	r25, 0x85	; 133
     306:	93 38       	cpi	r25, 0x83	; 131
     308:	95 38       	cpi	r25, 0x85	; 133
     30a:	93 38       	cpi	r25, 0x83	; 131

0000030c <__trampolines_end>:
     30c:	00 00       	nop
     30e:	00 00       	nop
     310:	00 00       	nop
     312:	20 50       	subi	r18, 0x00	; 0
     314:	70 50       	subi	r23, 0x00	; 0
     316:	20 00       	.word	0x0020	; ????
     318:	20 70       	andi	r18, 0x00	; 0
     31a:	50 70       	andi	r21, 0x00	; 0
     31c:	20 00       	.word	0x0020	; ????
     31e:	00 50       	subi	r16, 0x00	; 0
     320:	70 70       	andi	r23, 0x00	; 0
     322:	20 00       	.word	0x0020	; ????
     324:	00 20       	and	r0, r0
     326:	70 70       	andi	r23, 0x00	; 0
     328:	20 00       	.word	0x0020	; ????
     32a:	20 70       	andi	r18, 0x00	; 0
     32c:	70 20       	and	r7, r0
     32e:	70 00       	.word	0x0070	; ????
     330:	20 20       	and	r2, r0
     332:	70 20       	and	r7, r0
     334:	70 00       	.word	0x0070	; ????
     336:	00 00       	nop
     338:	20 00       	.word	0x0020	; ????
     33a:	00 00       	nop
     33c:	f0 f0       	brcs	.+60     	; 0x37a <__trampolines_end+0x6e>
     33e:	d0 f0       	brcs	.+52     	; 0x374 <__trampolines_end+0x68>
     340:	f0 f0       	brcs	.+60     	; 0x37e <__trampolines_end+0x72>
     342:	00 70       	andi	r16, 0x00	; 0
     344:	50 70       	andi	r21, 0x00	; 0
     346:	00 00       	nop
     348:	f0 80       	ld	r15, Z
     34a:	a0 80       	ld	r10, Z
     34c:	f0 f0       	brcs	.+60     	; 0x38a <__trampolines_end+0x7e>
     34e:	00 30       	cpi	r16, 0x00	; 0
     350:	10 60       	ori	r17, 0x00	; 0
     352:	60 00       	.word	0x0060	; ????
     354:	20 50       	subi	r18, 0x00	; 0
     356:	20 70       	andi	r18, 0x00	; 0
     358:	20 00       	.word	0x0020	; ????
     35a:	20 30       	cpi	r18, 0x00	; 0
     35c:	20 20       	and	r2, r0
     35e:	60 00       	.word	0x0060	; ????
     360:	20 30       	cpi	r18, 0x00	; 0
     362:	50 10       	cpse	r5, r0
     364:	20 00       	.word	0x0020	; ????
     366:	20 70       	andi	r18, 0x00	; 0
     368:	50 70       	andi	r21, 0x00	; 0
     36a:	20 00       	.word	0x0020	; ????
     36c:	40 60       	ori	r20, 0x00	; 0
     36e:	70 60       	ori	r23, 0x00	; 0
     370:	40 00       	.word	0x0040	; ????
     372:	10 30       	cpi	r17, 0x00	; 0
     374:	70 30       	cpi	r23, 0x00	; 0
     376:	10 00       	.word	0x0010	; ????
     378:	20 70       	andi	r18, 0x00	; 0
     37a:	20 70       	andi	r18, 0x00	; 0
     37c:	20 00       	.word	0x0020	; ????
     37e:	50 50       	subi	r21, 0x00	; 0
     380:	50 00       	.word	0x0050	; ????
     382:	50 00       	.word	0x0050	; ????
     384:	70 d0       	rcall	.+224    	; 0x466 <__trampolines_end+0x15a>
     386:	d0 50       	subi	r29, 0x00	; 0
     388:	50 00       	.word	0x0050	; ????
     38a:	30 60       	ori	r19, 0x00	; 0
     38c:	50 30       	cpi	r21, 0x00	; 0
     38e:	60 00       	.word	0x0060	; ????
     390:	00 00       	nop
     392:	00 00       	nop
     394:	70 00       	.word	0x0070	; ????
     396:	20 70       	andi	r18, 0x00	; 0
     398:	20 70       	andi	r18, 0x00	; 0
     39a:	20 70       	andi	r18, 0x00	; 0
     39c:	20 70       	andi	r18, 0x00	; 0
     39e:	20 20       	and	r2, r0
     3a0:	20 00       	.word	0x0020	; ????
     3a2:	20 20       	and	r2, r0
     3a4:	20 70       	andi	r18, 0x00	; 0
     3a6:	20 00       	.word	0x0020	; ????
     3a8:	00 20       	and	r0, r0
     3aa:	f0 20       	and	r15, r0
     3ac:	00 00       	nop
     3ae:	00 40       	sbci	r16, 0x00	; 0
     3b0:	f0 40       	sbci	r31, 0x00	; 0
     3b2:	00 00       	nop
     3b4:	00 00       	nop
     3b6:	40 70       	andi	r20, 0x00	; 0
     3b8:	00 00       	nop
     3ba:	00 50       	subi	r16, 0x00	; 0
     3bc:	70 50       	subi	r23, 0x00	; 0
     3be:	00 00       	nop
     3c0:	00 20       	and	r0, r0
     3c2:	70 70       	andi	r23, 0x00	; 0
     3c4:	00 00       	nop
     3c6:	00 70       	andi	r16, 0x00	; 0
     3c8:	70 20       	and	r7, r0
	...
     3d2:	20 20       	and	r2, r0
     3d4:	20 00       	.word	0x0020	; ????
     3d6:	20 00       	.word	0x0020	; ????
     3d8:	50 50       	subi	r21, 0x00	; 0
     3da:	00 00       	nop
     3dc:	00 00       	nop
     3de:	50 70       	andi	r21, 0x00	; 0
     3e0:	50 70       	andi	r21, 0x00	; 0
     3e2:	50 00       	.word	0x0050	; ????
     3e4:	20 30       	cpi	r18, 0x00	; 0
     3e6:	60 30       	cpi	r22, 0x00	; 0
     3e8:	60 20       	and	r6, r0
     3ea:	40 10       	cpse	r4, r0
     3ec:	20 40       	sbci	r18, 0x00	; 0
     3ee:	10 00       	.word	0x0010	; ????
     3f0:	20 50       	subi	r18, 0x00	; 0
     3f2:	30 50       	subi	r19, 0x00	; 0
     3f4:	70 00       	.word	0x0070	; ????
     3f6:	60 40       	sbci	r22, 0x00	; 0
     3f8:	00 00       	nop
     3fa:	00 00       	nop
     3fc:	20 40       	sbci	r18, 0x00	; 0
     3fe:	40 40       	sbci	r20, 0x00	; 0
     400:	20 00       	.word	0x0020	; ????
     402:	40 20       	and	r4, r0
     404:	20 20       	and	r2, r0
     406:	40 00       	.word	0x0040	; ????
     408:	50 20       	and	r5, r0
     40a:	70 20       	and	r7, r0
     40c:	50 00       	.word	0x0050	; ????
     40e:	00 20       	and	r0, r0
     410:	70 20       	and	r7, r0
     412:	00 00       	nop
     414:	00 00       	nop
     416:	00 00       	nop
     418:	60 40       	sbci	r22, 0x00	; 0
     41a:	00 00       	nop
     41c:	70 00       	.word	0x0070	; ????
     41e:	00 00       	nop
     420:	00 00       	nop
     422:	00 00       	nop
     424:	20 00       	.word	0x0020	; ????
     426:	10 10       	cpse	r1, r0
     428:	20 40       	sbci	r18, 0x00	; 0
     42a:	40 00       	.word	0x0040	; ????
     42c:	20 50       	subi	r18, 0x00	; 0
     42e:	50 50       	subi	r21, 0x00	; 0
     430:	20 00       	.word	0x0020	; ????
     432:	20 60       	ori	r18, 0x00	; 0
     434:	20 20       	and	r2, r0
     436:	70 00       	.word	0x0070	; ????
     438:	60 10       	cpse	r6, r0
     43a:	20 40       	sbci	r18, 0x00	; 0
     43c:	70 00       	.word	0x0070	; ????
     43e:	60 10       	cpse	r6, r0
     440:	20 10       	cpse	r2, r0
     442:	60 00       	.word	0x0060	; ????
     444:	10 50       	subi	r17, 0x00	; 0
     446:	70 10       	cpse	r7, r0
     448:	10 00       	.word	0x0010	; ????
     44a:	70 40       	sbci	r23, 0x00	; 0
     44c:	60 10       	cpse	r6, r0
     44e:	60 00       	.word	0x0060	; ????
     450:	20 40       	sbci	r18, 0x00	; 0
     452:	60 50       	subi	r22, 0x00	; 0
     454:	20 00       	.word	0x0020	; ????
     456:	70 10       	cpse	r7, r0
     458:	30 20       	and	r3, r0
     45a:	20 00       	.word	0x0020	; ????
     45c:	20 50       	subi	r18, 0x00	; 0
     45e:	20 50       	subi	r18, 0x00	; 0
     460:	20 00       	.word	0x0020	; ????
     462:	20 50       	subi	r18, 0x00	; 0
     464:	30 10       	cpse	r3, r0
     466:	20 00       	.word	0x0020	; ????
     468:	00 00       	nop
     46a:	20 00       	.word	0x0020	; ????
     46c:	20 00       	.word	0x0020	; ????
     46e:	00 00       	nop
     470:	20 00       	.word	0x0020	; ????
     472:	60 40       	sbci	r22, 0x00	; 0
     474:	10 20       	and	r1, r0
     476:	40 20       	and	r4, r0
     478:	10 00       	.word	0x0010	; ????
     47a:	00 00       	nop
     47c:	70 00       	.word	0x0070	; ????
     47e:	70 00       	.word	0x0070	; ????
     480:	40 20       	and	r4, r0
     482:	10 20       	and	r1, r0
     484:	40 00       	.word	0x0040	; ????
     486:	60 10       	cpse	r6, r0
     488:	20 00       	.word	0x0020	; ????
     48a:	20 00       	.word	0x0020	; ????
     48c:	70 50       	subi	r23, 0x00	; 0
     48e:	50 40       	sbci	r21, 0x00	; 0
     490:	70 00       	.word	0x0070	; ????
     492:	20 50       	subi	r18, 0x00	; 0
     494:	70 50       	subi	r23, 0x00	; 0
     496:	50 00       	.word	0x0050	; ????
     498:	60 50       	subi	r22, 0x00	; 0
     49a:	60 50       	subi	r22, 0x00	; 0
     49c:	60 00       	.word	0x0060	; ????
     49e:	30 40       	sbci	r19, 0x00	; 0
     4a0:	40 40       	sbci	r20, 0x00	; 0
     4a2:	30 00       	.word	0x0030	; ????
     4a4:	60 50       	subi	r22, 0x00	; 0
     4a6:	50 50       	subi	r21, 0x00	; 0
     4a8:	60 00       	.word	0x0060	; ????
     4aa:	70 40       	sbci	r23, 0x00	; 0
     4ac:	60 40       	sbci	r22, 0x00	; 0
     4ae:	70 00       	.word	0x0070	; ????
     4b0:	70 40       	sbci	r23, 0x00	; 0
     4b2:	60 40       	sbci	r22, 0x00	; 0
     4b4:	40 00       	.word	0x0040	; ????
     4b6:	30 40       	sbci	r19, 0x00	; 0
     4b8:	50 50       	subi	r21, 0x00	; 0
     4ba:	30 00       	.word	0x0030	; ????
     4bc:	50 50       	subi	r21, 0x00	; 0
     4be:	70 50       	subi	r23, 0x00	; 0
     4c0:	50 00       	.word	0x0050	; ????
     4c2:	70 20       	and	r7, r0
     4c4:	20 20       	and	r2, r0
     4c6:	70 00       	.word	0x0070	; ????
     4c8:	10 10       	cpse	r1, r0
     4ca:	10 50       	subi	r17, 0x00	; 0
     4cc:	20 00       	.word	0x0020	; ????
     4ce:	50 50       	subi	r21, 0x00	; 0
     4d0:	60 50       	subi	r22, 0x00	; 0
     4d2:	50 00       	.word	0x0050	; ????
     4d4:	40 40       	sbci	r20, 0x00	; 0
     4d6:	40 40       	sbci	r20, 0x00	; 0
     4d8:	70 00       	.word	0x0070	; ????
     4da:	50 70       	andi	r21, 0x00	; 0
     4dc:	70 50       	subi	r23, 0x00	; 0
     4de:	50 00       	.word	0x0050	; ????
     4e0:	60 50       	subi	r22, 0x00	; 0
     4e2:	50 50       	subi	r21, 0x00	; 0
     4e4:	50 00       	.word	0x0050	; ????
     4e6:	70 50       	subi	r23, 0x00	; 0
     4e8:	50 50       	subi	r21, 0x00	; 0
     4ea:	70 00       	.word	0x0070	; ????
     4ec:	60 50       	subi	r22, 0x00	; 0
     4ee:	60 40       	sbci	r22, 0x00	; 0
     4f0:	40 00       	.word	0x0040	; ????
     4f2:	20 50       	subi	r18, 0x00	; 0
     4f4:	50 70       	andi	r21, 0x00	; 0
     4f6:	30 00       	.word	0x0030	; ????
     4f8:	60 50       	subi	r22, 0x00	; 0
     4fa:	60 50       	subi	r22, 0x00	; 0
     4fc:	50 00       	.word	0x0050	; ????
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	70 10       	cpse	r7, r0
     502:	60 00       	.word	0x0060	; ????
     504:	70 20       	and	r7, r0
     506:	20 20       	and	r2, r0
     508:	20 00       	.word	0x0020	; ????
     50a:	50 50       	subi	r21, 0x00	; 0
     50c:	50 50       	subi	r21, 0x00	; 0
     50e:	70 00       	.word	0x0070	; ????
     510:	50 50       	subi	r21, 0x00	; 0
     512:	50 50       	subi	r21, 0x00	; 0
     514:	20 00       	.word	0x0020	; ????
     516:	50 50       	subi	r21, 0x00	; 0
     518:	70 70       	andi	r23, 0x00	; 0
     51a:	50 00       	.word	0x0050	; ????
     51c:	50 50       	subi	r21, 0x00	; 0
     51e:	20 50       	subi	r18, 0x00	; 0
     520:	50 00       	.word	0x0050	; ????
     522:	50 50       	subi	r21, 0x00	; 0
     524:	20 20       	and	r2, r0
     526:	20 00       	.word	0x0020	; ????
     528:	70 10       	cpse	r7, r0
     52a:	20 40       	sbci	r18, 0x00	; 0
     52c:	70 00       	.word	0x0070	; ????
     52e:	60 40       	sbci	r22, 0x00	; 0
     530:	40 40       	sbci	r20, 0x00	; 0
     532:	60 00       	.word	0x0060	; ????
     534:	40 40       	sbci	r20, 0x00	; 0
     536:	20 10       	cpse	r2, r0
     538:	10 00       	.word	0x0010	; ????
     53a:	60 20       	and	r6, r0
     53c:	20 20       	and	r2, r0
     53e:	60 00       	.word	0x0060	; ????
     540:	20 50       	subi	r18, 0x00	; 0
	...
     54a:	00 f0       	brcs	.+0      	; 0x54c <__trampolines_end+0x240>
     54c:	60 20       	and	r6, r0
     54e:	00 00       	nop
     550:	00 00       	nop
     552:	00 00       	nop
     554:	30 50       	subi	r19, 0x00	; 0
     556:	70 00       	.word	0x0070	; ????
     558:	40 40       	sbci	r20, 0x00	; 0
     55a:	60 50       	subi	r22, 0x00	; 0
     55c:	60 00       	.word	0x0060	; ????
     55e:	00 00       	nop
     560:	30 40       	sbci	r19, 0x00	; 0
     562:	30 00       	.word	0x0030	; ????
     564:	10 10       	cpse	r1, r0
     566:	30 50       	subi	r19, 0x00	; 0
     568:	30 00       	.word	0x0030	; ????
     56a:	00 00       	nop
     56c:	70 60       	ori	r23, 0x00	; 0
     56e:	30 00       	.word	0x0030	; ????
     570:	10 20       	and	r1, r0
     572:	70 20       	and	r7, r0
     574:	20 00       	.word	0x0020	; ????
     576:	00 00       	nop
     578:	70 50       	subi	r23, 0x00	; 0
     57a:	10 70       	andi	r17, 0x00	; 0
     57c:	40 40       	sbci	r20, 0x00	; 0
     57e:	60 50       	subi	r22, 0x00	; 0
     580:	50 00       	.word	0x0050	; ????
     582:	20 00       	.word	0x0020	; ????
     584:	20 20       	and	r2, r0
     586:	20 00       	.word	0x0020	; ????
     588:	20 00       	.word	0x0020	; ????
     58a:	20 20       	and	r2, r0
     58c:	20 60       	ori	r18, 0x00	; 0
     58e:	40 40       	sbci	r20, 0x00	; 0
     590:	50 60       	ori	r21, 0x00	; 0
     592:	50 00       	.word	0x0050	; ????
     594:	20 20       	and	r2, r0
     596:	20 20       	and	r2, r0
     598:	20 00       	.word	0x0020	; ????
     59a:	00 00       	nop
     59c:	70 70       	andi	r23, 0x00	; 0
     59e:	50 00       	.word	0x0050	; ????
     5a0:	00 00       	nop
     5a2:	60 50       	subi	r22, 0x00	; 0
     5a4:	50 00       	.word	0x0050	; ????
     5a6:	00 00       	nop
     5a8:	20 50       	subi	r18, 0x00	; 0
     5aa:	20 00       	.word	0x0020	; ????
     5ac:	00 00       	nop
     5ae:	60 50       	subi	r22, 0x00	; 0
     5b0:	60 40       	sbci	r22, 0x00	; 0
     5b2:	00 00       	nop
     5b4:	30 50       	subi	r19, 0x00	; 0
     5b6:	30 10       	cpse	r3, r0
     5b8:	00 00       	nop
     5ba:	60 40       	sbci	r22, 0x00	; 0
     5bc:	40 00       	.word	0x0040	; ????
     5be:	00 00       	nop
     5c0:	30 20       	and	r3, r0
     5c2:	60 00       	.word	0x0060	; ????
     5c4:	00 20       	and	r0, r0
     5c6:	70 20       	and	r7, r0
     5c8:	30 00       	.word	0x0030	; ????
     5ca:	00 00       	nop
     5cc:	50 50       	subi	r21, 0x00	; 0
     5ce:	70 00       	.word	0x0070	; ????
     5d0:	00 00       	nop
     5d2:	50 50       	subi	r21, 0x00	; 0
     5d4:	20 00       	.word	0x0020	; ????
     5d6:	00 00       	nop
     5d8:	50 70       	andi	r21, 0x00	; 0
     5da:	70 00       	.word	0x0070	; ????
     5dc:	00 00       	nop
     5de:	50 20       	and	r5, r0
     5e0:	50 00       	.word	0x0050	; ????
     5e2:	00 00       	nop
     5e4:	50 50       	subi	r21, 0x00	; 0
     5e6:	20 40       	sbci	r18, 0x00	; 0
     5e8:	00 00       	nop
     5ea:	60 20       	and	r6, r0
     5ec:	30 00       	.word	0x0030	; ????
     5ee:	30 20       	and	r3, r0
     5f0:	60 20       	and	r6, r0
     5f2:	30 00       	.word	0x0030	; ????
     5f4:	20 20       	and	r2, r0
     5f6:	20 20       	and	r2, r0
     5f8:	20 00       	.word	0x0020	; ????
     5fa:	60 20       	and	r6, r0
     5fc:	30 20       	and	r3, r0
     5fe:	60 00       	.word	0x0060	; ????
     600:	50 a0       	ldd	r5, Z+32	; 0x20
     602:	00 00       	nop
     604:	00 00       	nop
     606:	00 20       	and	r0, r0
     608:	50 70       	andi	r21, 0x00	; 0
     60a:	00 00       	nop
     60c:	30 40       	sbci	r19, 0x00	; 0
     60e:	40 70       	andi	r20, 0x00	; 0
     610:	20 40       	sbci	r18, 0x00	; 0
     612:	50 00       	.word	0x0050	; ????
     614:	50 50       	subi	r21, 0x00	; 0
     616:	30 00       	.word	0x0030	; ????
     618:	10 20       	and	r1, r0
     61a:	70 60       	ori	r23, 0x00	; 0
     61c:	30 00       	.word	0x0030	; ????
     61e:	20 50       	subi	r18, 0x00	; 0
     620:	30 50       	subi	r19, 0x00	; 0
     622:	70 00       	.word	0x0070	; ????
     624:	50 00       	.word	0x0050	; ????
     626:	30 50       	subi	r19, 0x00	; 0
     628:	70 00       	.word	0x0070	; ????
     62a:	40 20       	and	r4, r0
     62c:	30 50       	subi	r19, 0x00	; 0
     62e:	70 00       	.word	0x0070	; ????
     630:	20 00       	.word	0x0020	; ????
     632:	30 50       	subi	r19, 0x00	; 0
     634:	70 00       	.word	0x0070	; ????
     636:	00 70       	andi	r16, 0x00	; 0
     638:	40 70       	andi	r20, 0x00	; 0
     63a:	20 60       	ori	r18, 0x00	; 0
     63c:	20 50       	subi	r18, 0x00	; 0
     63e:	70 60       	ori	r23, 0x00	; 0
     640:	30 00       	.word	0x0030	; ????
     642:	50 00       	.word	0x0050	; ????
     644:	70 60       	ori	r23, 0x00	; 0
     646:	30 00       	.word	0x0030	; ????
     648:	40 20       	and	r4, r0
     64a:	70 60       	ori	r23, 0x00	; 0
     64c:	30 00       	.word	0x0030	; ????
     64e:	50 00       	.word	0x0050	; ????
     650:	20 20       	and	r2, r0
     652:	20 00       	.word	0x0020	; ????
     654:	20 50       	subi	r18, 0x00	; 0
     656:	00 20       	and	r0, r0
     658:	20 00       	.word	0x0020	; ????
     65a:	40 20       	and	r4, r0
     65c:	00 20       	and	r0, r0
     65e:	20 00       	.word	0x0020	; ????
     660:	50 20       	and	r5, r0
     662:	50 70       	andi	r21, 0x00	; 0
     664:	50 00       	.word	0x0050	; ????
     666:	20 20       	and	r2, r0
     668:	50 70       	andi	r21, 0x00	; 0
     66a:	50 00       	.word	0x0050	; ????
     66c:	10 20       	and	r1, r0
     66e:	70 60       	ori	r23, 0x00	; 0
     670:	70 00       	.word	0x0070	; ????
     672:	00 00       	nop
     674:	30 70       	andi	r19, 0x00	; 0
     676:	60 00       	.word	0x0060	; ????
     678:	30 60       	ori	r19, 0x00	; 0
     67a:	70 60       	ori	r23, 0x00	; 0
     67c:	70 00       	.word	0x0070	; ????
     67e:	20 50       	subi	r18, 0x00	; 0
     680:	20 50       	subi	r18, 0x00	; 0
     682:	20 00       	.word	0x0020	; ????
     684:	50 00       	.word	0x0050	; ????
     686:	20 50       	subi	r18, 0x00	; 0
     688:	20 00       	.word	0x0020	; ????
     68a:	40 20       	and	r4, r0
     68c:	20 50       	subi	r18, 0x00	; 0
     68e:	20 00       	.word	0x0020	; ????
     690:	20 50       	subi	r18, 0x00	; 0
     692:	00 50       	subi	r16, 0x00	; 0
     694:	70 00       	.word	0x0070	; ????
     696:	40 20       	and	r4, r0
     698:	50 50       	subi	r21, 0x00	; 0
     69a:	70 00       	.word	0x0070	; ????
     69c:	50 00       	.word	0x0050	; ????
     69e:	50 50       	subi	r21, 0x00	; 0
     6a0:	20 40       	sbci	r18, 0x00	; 0
     6a2:	50 20       	and	r5, r0
     6a4:	50 50       	subi	r21, 0x00	; 0
     6a6:	20 00       	.word	0x0020	; ????
     6a8:	50 00       	.word	0x0050	; ????
     6aa:	50 50       	subi	r21, 0x00	; 0
     6ac:	70 00       	.word	0x0070	; ????
     6ae:	20 70       	andi	r18, 0x00	; 0
     6b0:	40 70       	andi	r20, 0x00	; 0
     6b2:	20 00       	.word	0x0020	; ????
     6b4:	10 20       	and	r1, r0
     6b6:	70 20       	and	r7, r0
     6b8:	70 00       	.word	0x0070	; ????
     6ba:	50 70       	andi	r21, 0x00	; 0
     6bc:	20 70       	andi	r18, 0x00	; 0
     6be:	20 00       	.word	0x0020	; ????
     6c0:	00 60       	ori	r16, 0x00	; 0
     6c2:	60 50       	subi	r22, 0x00	; 0
     6c4:	50 00       	.word	0x0050	; ????
     6c6:	30 20       	and	r3, r0
     6c8:	30 20       	and	r3, r0
     6ca:	60 00       	.word	0x0060	; ????
     6cc:	10 20       	and	r1, r0
     6ce:	30 50       	subi	r19, 0x00	; 0
     6d0:	70 00       	.word	0x0070	; ????
     6d2:	10 20       	and	r1, r0
     6d4:	00 20       	and	r0, r0
     6d6:	20 00       	.word	0x0020	; ????
     6d8:	10 20       	and	r1, r0
     6da:	70 50       	subi	r23, 0x00	; 0
     6dc:	70 00       	.word	0x0070	; ????
     6de:	10 20       	and	r1, r0
     6e0:	00 50       	subi	r16, 0x00	; 0
     6e2:	70 00       	.word	0x0070	; ????
     6e4:	70 00       	.word	0x0070	; ????
     6e6:	70 50       	subi	r23, 0x00	; 0
     6e8:	50 00       	.word	0x0050	; ????
     6ea:	70 00       	.word	0x0070	; ????
     6ec:	50 70       	andi	r21, 0x00	; 0
     6ee:	50 00       	.word	0x0050	; ????
     6f0:	30 50       	subi	r19, 0x00	; 0
     6f2:	70 00       	.word	0x0070	; ????
     6f4:	70 00       	.word	0x0070	; ????
     6f6:	20 50       	subi	r18, 0x00	; 0
     6f8:	20 00       	.word	0x0020	; ????
     6fa:	70 00       	.word	0x0070	; ????
     6fc:	20 00       	.word	0x0020	; ????
     6fe:	20 40       	sbci	r18, 0x00	; 0
     700:	30 00       	.word	0x0030	; ????
     702:	00 70       	andi	r16, 0x00	; 0
     704:	40 40       	sbci	r20, 0x00	; 0
     706:	00 00       	nop
     708:	00 e0       	ldi	r16, 0x00	; 0
     70a:	20 20       	and	r2, r0
     70c:	00 00       	nop
     70e:	40 50       	subi	r20, 0x00	; 0
     710:	20 50       	subi	r18, 0x00	; 0
     712:	30 00       	.word	0x0030	; ????
     714:	40 50       	subi	r20, 0x00	; 0
     716:	20 70       	andi	r18, 0x00	; 0
     718:	10 00       	.word	0x0010	; ????
     71a:	20 00       	.word	0x0020	; ????
     71c:	20 20       	and	r2, r0
     71e:	20 00       	.word	0x0020	; ????
     720:	00 50       	subi	r16, 0x00	; 0
     722:	a0 50       	subi	r26, 0x00	; 0
     724:	00 00       	nop
     726:	00 a0       	ldd	r0, Z+32	; 0x20
     728:	50 a0       	ldd	r5, Z+32	; 0x20
     72a:	00 00       	nop
     72c:	40 10       	cpse	r4, r0
     72e:	40 10       	cpse	r4, r0
     730:	40 10       	cpse	r4, r0
     732:	50 a0       	ldd	r5, Z+32	; 0x20
     734:	50 a0       	ldd	r5, Z+32	; 0x20
     736:	50 a0       	ldd	r5, Z+32	; 0x20
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	b0 e0       	ldi	r27, 0x00	; 0
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	20 20       	and	r2, r0
     740:	20 20       	and	r2, r0
     742:	20 20       	and	r2, r0
     744:	20 20       	and	r2, r0
     746:	e0 20       	and	r14, r0
     748:	20 20       	and	r2, r0
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	20 20       	and	r2, r0
     750:	50 50       	subi	r21, 0x00	; 0
     752:	d0 50       	subi	r29, 0x00	; 0
     754:	50 50       	subi	r21, 0x00	; 0
     756:	00 00       	nop
     758:	f0 50       	subi	r31, 0x00	; 0
     75a:	50 50       	subi	r21, 0x00	; 0
     75c:	00 e0       	ldi	r16, 0x00	; 0
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	20 20       	and	r2, r0
     762:	50 d0       	rcall	.+160    	; 0x804 <__trampolines_end+0x4f8>
     764:	10 d0       	rcall	.+32     	; 0x786 <__trampolines_end+0x47a>
     766:	50 50       	subi	r21, 0x00	; 0
     768:	50 50       	subi	r21, 0x00	; 0
     76a:	50 50       	subi	r21, 0x00	; 0
     76c:	50 50       	subi	r21, 0x00	; 0
     76e:	00 f0       	brcs	.+0      	; 0x770 <__trampolines_end+0x464>
     770:	10 d0       	rcall	.+32     	; 0x792 <__trampolines_end+0x486>
     772:	50 50       	subi	r21, 0x00	; 0
     774:	50 d0       	rcall	.+160    	; 0x816 <__trampolines_end+0x50a>
     776:	10 f0       	brcs	.+4      	; 0x77c <__trampolines_end+0x470>
     778:	00 00       	nop
     77a:	50 50       	subi	r21, 0x00	; 0
     77c:	f0 00       	.word	0x00f0	; ????
     77e:	00 00       	nop
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	00 00       	nop
     786:	00 00       	nop
     788:	e0 20       	and	r14, r0
     78a:	20 20       	and	r2, r0
     78c:	20 20       	and	r2, r0
     78e:	30 00       	.word	0x0030	; ????
     790:	00 00       	nop
     792:	20 20       	and	r2, r0
     794:	f0 00       	.word	0x00f0	; ????
     796:	00 00       	nop
     798:	00 00       	nop
     79a:	f0 20       	and	r15, r0
     79c:	20 20       	and	r2, r0
     79e:	20 20       	and	r2, r0
     7a0:	30 20       	and	r3, r0
     7a2:	20 20       	and	r2, r0
     7a4:	00 00       	nop
     7a6:	f0 00       	.word	0x00f0	; ????
     7a8:	00 00       	nop
     7aa:	20 20       	and	r2, r0
     7ac:	f0 20       	and	r15, r0
     7ae:	20 20       	and	r2, r0
     7b0:	20 30       	cpi	r18, 0x00	; 0
     7b2:	20 30       	cpi	r18, 0x00	; 0
     7b4:	20 20       	and	r2, r0
     7b6:	50 50       	subi	r21, 0x00	; 0
     7b8:	50 50       	subi	r21, 0x00	; 0
     7ba:	50 50       	subi	r21, 0x00	; 0
     7bc:	50 50       	subi	r21, 0x00	; 0
     7be:	40 70       	andi	r20, 0x00	; 0
     7c0:	00 00       	nop
     7c2:	00 70       	andi	r16, 0x00	; 0
     7c4:	40 50       	subi	r20, 0x00	; 0
     7c6:	50 50       	subi	r21, 0x00	; 0
     7c8:	50 d0       	rcall	.+160    	; 0x86a <__trampolines_end+0x55e>
     7ca:	00 f0       	brcs	.+0      	; 0x7cc <__trampolines_end+0x4c0>
     7cc:	00 00       	nop
     7ce:	00 f0       	brcs	.+0      	; 0x7d0 <__trampolines_end+0x4c4>
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <__trampolines_end+0x4c6>
     7d2:	50 50       	subi	r21, 0x00	; 0
     7d4:	50 50       	subi	r21, 0x00	; 0
     7d6:	40 50       	subi	r20, 0x00	; 0
     7d8:	50 50       	subi	r21, 0x00	; 0
     7da:	00 f0       	brcs	.+0      	; 0x7dc <__trampolines_end+0x4d0>
     7dc:	00 f0       	brcs	.+0      	; 0x7de <__trampolines_end+0x4d2>
     7de:	00 00       	nop
     7e0:	50 d0       	rcall	.+160    	; 0x882 <__trampolines_end+0x576>
     7e2:	00 d0       	rcall	.+0      	; 0x7e4 <__trampolines_end+0x4d8>
     7e4:	50 50       	subi	r21, 0x00	; 0
     7e6:	20 f0       	brcs	.+8      	; 0x7f0 <__trampolines_end+0x4e4>
     7e8:	00 f0       	brcs	.+0      	; 0x7ea <__trampolines_end+0x4de>
     7ea:	00 00       	nop
     7ec:	50 50       	subi	r21, 0x00	; 0
     7ee:	f0 00       	.word	0x00f0	; ????
     7f0:	00 00       	nop
     7f2:	00 f0       	brcs	.+0      	; 0x7f4 <__trampolines_end+0x4e8>
     7f4:	00 f0       	brcs	.+0      	; 0x7f6 <__trampolines_end+0x4ea>
     7f6:	20 20       	and	r2, r0
     7f8:	00 00       	nop
     7fa:	f0 50       	subi	r31, 0x00	; 0
     7fc:	50 50       	subi	r21, 0x00	; 0
     7fe:	50 50       	subi	r21, 0x00	; 0
     800:	70 00       	.word	0x0070	; ????
     802:	00 00       	nop
     804:	20 30       	cpi	r18, 0x00	; 0
     806:	20 30       	cpi	r18, 0x00	; 0
     808:	00 00       	nop
     80a:	00 30       	cpi	r16, 0x00	; 0
     80c:	20 30       	cpi	r18, 0x00	; 0
     80e:	20 20       	and	r2, r0
     810:	00 00       	nop
     812:	70 50       	subi	r23, 0x00	; 0
     814:	50 50       	subi	r21, 0x00	; 0
     816:	50 50       	subi	r21, 0x00	; 0
     818:	d0 50       	subi	r29, 0x00	; 0
     81a:	50 50       	subi	r21, 0x00	; 0
     81c:	20 f0       	brcs	.+8      	; 0x826 <__trampolines_end+0x51a>
     81e:	00 f0       	brcs	.+0      	; 0x820 <__trampolines_end+0x514>
     820:	20 20       	and	r2, r0
     822:	20 20       	and	r2, r0
     824:	e0 00       	.word	0x00e0	; ????
     826:	00 00       	nop
     828:	00 00       	nop
     82a:	30 20       	and	r3, r0
     82c:	20 20       	and	r2, r0
     82e:	f0 f0       	brcs	.+60     	; 0x86c <__trampolines_end+0x560>
     830:	f0 f0       	brcs	.+60     	; 0x86e <__trampolines_end+0x562>
     832:	f0 f0       	brcs	.+60     	; 0x870 <__trampolines_end+0x564>
     834:	00 00       	nop
     836:	00 f0       	brcs	.+0      	; 0x838 <__trampolines_end+0x52c>
     838:	f0 f0       	brcs	.+60     	; 0x876 <__trampolines_end+0x56a>
     83a:	c0 c0       	rjmp	.+384    	; 0x9bc <font_5x7+0xb0>
     83c:	c0 c0       	rjmp	.+384    	; 0x9be <font_5x7+0xb2>
     83e:	c0 c0       	rjmp	.+384    	; 0x9c0 <font_5x7+0xb4>
     840:	30 30       	cpi	r19, 0x00	; 0
     842:	30 30       	cpi	r19, 0x00	; 0
     844:	30 30       	cpi	r19, 0x00	; 0
     846:	f0 f0       	brcs	.+60     	; 0x884 <__trampolines_end+0x578>
     848:	f0 00       	.word	0x00f0	; ????
     84a:	00 00       	nop
     84c:	00 00       	nop
     84e:	70 60       	ori	r23, 0x00	; 0
     850:	70 00       	.word	0x0070	; ????
     852:	20 50       	subi	r18, 0x00	; 0
     854:	60 50       	subi	r22, 0x00	; 0
     856:	60 40       	sbci	r22, 0x00	; 0
     858:	70 50       	subi	r23, 0x00	; 0
     85a:	40 40       	sbci	r20, 0x00	; 0
     85c:	40 00       	.word	0x0040	; ????
     85e:	70 50       	subi	r23, 0x00	; 0
     860:	50 50       	subi	r21, 0x00	; 0
     862:	50 00       	.word	0x0050	; ????
     864:	70 40       	sbci	r23, 0x00	; 0
     866:	20 40       	sbci	r18, 0x00	; 0
     868:	70 00       	.word	0x0070	; ????
     86a:	00 00       	nop
     86c:	30 50       	subi	r19, 0x00	; 0
     86e:	20 00       	.word	0x0020	; ????
     870:	00 00       	nop
     872:	50 50       	subi	r21, 0x00	; 0
     874:	70 40       	sbci	r23, 0x00	; 0
     876:	00 10       	cpse	r0, r0
     878:	60 20       	and	r6, r0
     87a:	20 00       	.word	0x0020	; ????
     87c:	70 20       	and	r7, r0
     87e:	50 20       	and	r5, r0
     880:	70 00       	.word	0x0070	; ????
     882:	20 50       	subi	r18, 0x00	; 0
     884:	70 50       	subi	r23, 0x00	; 0
     886:	20 00       	.word	0x0020	; ????
     888:	00 20       	and	r0, r0
     88a:	50 50       	subi	r21, 0x00	; 0
     88c:	50 00       	.word	0x0050	; ????
     88e:	30 40       	sbci	r19, 0x00	; 0
     890:	20 50       	subi	r18, 0x00	; 0
     892:	20 00       	.word	0x0020	; ????
     894:	00 00       	nop
     896:	70 50       	subi	r23, 0x00	; 0
     898:	70 00       	.word	0x0070	; ????
     89a:	20 70       	andi	r18, 0x00	; 0
     89c:	50 70       	andi	r21, 0x00	; 0
     89e:	20 00       	.word	0x0020	; ????
     8a0:	30 40       	sbci	r19, 0x00	; 0
     8a2:	70 40       	sbci	r23, 0x00	; 0
     8a4:	30 00       	.word	0x0030	; ????
     8a6:	20 50       	subi	r18, 0x00	; 0
     8a8:	50 50       	subi	r21, 0x00	; 0
     8aa:	50 00       	.word	0x0050	; ????
     8ac:	70 00       	.word	0x0070	; ????
     8ae:	70 00       	.word	0x0070	; ????
     8b0:	70 00       	.word	0x0070	; ????
     8b2:	20 70       	andi	r18, 0x00	; 0
     8b4:	20 00       	.word	0x0020	; ????
     8b6:	70 00       	.word	0x0070	; ????
     8b8:	60 10       	cpse	r6, r0
     8ba:	60 00       	.word	0x0060	; ????
     8bc:	70 00       	.word	0x0070	; ????
     8be:	30 40       	sbci	r19, 0x00	; 0
     8c0:	30 00       	.word	0x0030	; ????
     8c2:	70 00       	.word	0x0070	; ????
     8c4:	00 10       	cpse	r0, r0
     8c6:	20 20       	and	r2, r0
     8c8:	20 20       	and	r2, r0
     8ca:	20 20       	and	r2, r0
     8cc:	20 20       	and	r2, r0
     8ce:	40 00       	.word	0x0040	; ????
     8d0:	20 00       	.word	0x0020	; ????
     8d2:	70 00       	.word	0x0070	; ????
     8d4:	20 00       	.word	0x0020	; ????
     8d6:	00 50       	subi	r16, 0x00	; 0
     8d8:	a0 50       	subi	r26, 0x00	; 0
     8da:	a0 00       	.word	0x00a0	; ????
     8dc:	20 50       	subi	r18, 0x00	; 0
     8de:	20 00       	.word	0x0020	; ????
     8e0:	00 00       	nop
     8e2:	00 20       	and	r0, r0
     8e4:	70 20       	and	r7, r0
     8e6:	00 00       	nop
     8e8:	00 00       	nop
     8ea:	20 00       	.word	0x0020	; ????
     8ec:	00 00       	nop
     8ee:	30 20       	and	r3, r0
     8f0:	20 60       	ori	r18, 0x00	; 0
     8f2:	20 00       	.word	0x0020	; ????
     8f4:	70 50       	subi	r23, 0x00	; 0
     8f6:	50 00       	.word	0x0050	; ????
     8f8:	00 00       	nop
     8fa:	60 20       	and	r6, r0
     8fc:	40 60       	ori	r20, 0x00	; 0
     8fe:	00 00       	nop
     900:	00 00       	nop
     902:	60 60       	ori	r22, 0x00	; 0
	...

0000090c <font_5x7>:
     90c:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     91c:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     92c:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     93c:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     94c:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     95c:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     96c:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     97c:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     98c:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     99c:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     9ac:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     9bc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     9cc:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     9dc:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     9ec:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     9fc:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     a0c:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     a1c:	49 49 31 01 01 71 09 07 36 49 49 49 36 46 49 49     II1..q..6III6FII
     a2c:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     a3c:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     a4c:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     a5c:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     a6c:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     a7c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     a8c:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     a9c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     aac:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     abc:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     acc:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     adc:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     aec:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     afc:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     b0c:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     b1c:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     b2c:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     b3c:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     b4c:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     b5c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     b6c:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     b7c:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     b8c:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     b9c:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
     bac:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     bbc:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     bcc:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
     bdc:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     bec:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
     bfc:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
     c0c:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
     c1c:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     c2c:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     c3c:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     c4c:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     c5c:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     c6c:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     c7c:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     c8c:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     c9c:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     cac:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     cbc:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     ccc:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     cdc:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     cec:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     cfc:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     d0c:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     d1c:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     d2c:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     d3c:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     d4c:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     d5c:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     d6c:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
     d7c:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     d8c:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     d9c:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     dac:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     dbc:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     dcc:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     ddc:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     dec:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     dfc:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00000e07 <pstr_nan>:
     e07:	4e 41 4e                                            NAN

00000e0a <pstr_inity>:
     e0a:	49 4e 49 54 59                                      INITY

00000e0f <pstr_inf>:
     e0f:	49 4e 46                                            INF

00000e12 <pwr_m10>:
     e12:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     e22:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000e2a <pwr_p10>:
     e2a:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     e3a:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000e42 <__c.2299>:
     e42:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000e4e <_StackPaint>:
 *  the maximum stack usage of the running application.
 */
void _StackPaint(void) __attribute__((naked)) __attribute__((optimize("O3"))) __attribute__((section (".init1")));
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
     e4e:	ec ec       	ldi	r30, 0xCC	; 204
     e50:	fb e2       	ldi	r31, 0x2B	; 43
     e52:	e3 70       	andi	r30, 0x03	; 3
     e54:	ff 27       	eor	r31, r31
     e56:	e4 53       	subi	r30, 0x34	; 52
     e58:	f4 4d       	sbci	r31, 0xD4	; 212
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
     e5a:	2f ef       	ldi	r18, 0xFF	; 255
     e5c:	3f e2       	ldi	r19, 0x2F	; 47
     e5e:	2c 7f       	andi	r18, 0xFC	; 252
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     e60:	e2 17       	cp	r30, r18
     e62:	f3 07       	cpc	r31, r19
     e64:	58 f4       	brcc	.+22     	; 0xe7c <_StackPaint+0x2e>
		*fill_pos = __SWAP_ENDIAN32(0xDEADBEEF);
     e66:	8e ed       	ldi	r24, 0xDE	; 222
     e68:	9d ea       	ldi	r25, 0xAD	; 173
     e6a:	ae eb       	ldi	r26, 0xBE	; 190
     e6c:	bf ee       	ldi	r27, 0xEF	; 239
     e6e:	81 93       	st	Z+, r24
     e70:	91 93       	st	Z+, r25
     e72:	a1 93       	st	Z+, r26
     e74:	b1 93       	st	Z+, r27
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     e76:	e2 17       	cp	r30, r18
     e78:	f3 07       	cpc	r31, r19
     e7a:	c8 f3       	brcs	.-14     	; 0xe6e <_StackPaint+0x20>
     e7c:	11 24       	eor	r1, r1
     e7e:	1f be       	out	0x3f, r1	; 63
     e80:	cf ef       	ldi	r28, 0xFF	; 255
     e82:	cd bf       	out	0x3d, r28	; 61
     e84:	df e2       	ldi	r29, 0x2F	; 47
     e86:	de bf       	out	0x3e, r29	; 62

00000e88 <__do_copy_data>:
     e88:	18 e2       	ldi	r17, 0x28	; 40
     e8a:	a0 e0       	ldi	r26, 0x00	; 0
     e8c:	b0 e2       	ldi	r27, 0x20	; 32
     e8e:	e4 e5       	ldi	r30, 0x54	; 84
     e90:	f9 e8       	ldi	r31, 0x89	; 137
     e92:	00 e0       	ldi	r16, 0x00	; 0
     e94:	0b bf       	out	0x3b, r16	; 59
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <__do_copy_data+0x14>
     e98:	07 90       	elpm	r0, Z+
     e9a:	0d 92       	st	X+, r0
     e9c:	a8 38       	cpi	r26, 0x88	; 136
     e9e:	b1 07       	cpc	r27, r17
     ea0:	d9 f7       	brne	.-10     	; 0xe98 <__do_copy_data+0x10>

00000ea2 <__do_clear_bss>:
     ea2:	2b e2       	ldi	r18, 0x2B	; 43
     ea4:	a8 e8       	ldi	r26, 0x88	; 136
     ea6:	b8 e2       	ldi	r27, 0x28	; 40
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <.do_clear_bss_start>

00000eaa <.do_clear_bss_loop>:
     eaa:	1d 92       	st	X+, r1

00000eac <.do_clear_bss_start>:
     eac:	ac 3c       	cpi	r26, 0xCC	; 204
     eae:	b2 07       	cpc	r27, r18
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <.do_clear_bss_loop>
     eb2:	0e 94 95 23 	call	0x472a	; 0x472a <main>
     eb6:	0c 94 a8 44 	jmp	0x8950	; 0x8950 <_exit>

00000eba <__bad_interrupt>:
     eba:	a2 c8       	rjmp	.-3772   	; 0x0 <__vectors>

00000ebc <clock_setup_32_mhz>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
}

void clock_setup_32_mhz(void) {
	
	OSC.CTRL |= OSC_RC32MEN_bm;
     ebc:	e0 e5       	ldi	r30, 0x50	; 80
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	82 60       	ori	r24, 0x02	; 2
     ec4:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     ec6:	81 81       	ldd	r24, Z+1	; 0x01
     ec8:	81 ff       	sbrs	r24, 1
     eca:	fd cf       	rjmp	.-6      	; 0xec6 <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc;
     ecc:	88 ed       	ldi	r24, 0xD8	; 216
     ece:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	80 93 40 00 	sts	0x0040, r24
     ed6:	08 95       	ret

00000ed8 <__vector_6>:
}
*/

//! DMA CH0 Interrupt service routine. Clear interrupt flags after check. 
ISR(DMA_CH0_vect)
{
     ed8:	1f 92       	push	r1
     eda:	0f 92       	push	r0
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	0f 92       	push	r0
     ee0:	11 24       	eor	r1, r1
     ee2:	0b b6       	in	r0, 0x3b	; 59
     ee4:	0f 92       	push	r0
     ee6:	8f 93       	push	r24
     ee8:	ef 93       	push	r30
     eea:	ff 93       	push	r31
	if (DMA.CH0.CTRLB & DMA_CH_ERRIF_bm) {
     eec:	e0 e0       	ldi	r30, 0x00	; 0
     eee:	f1 e0       	ldi	r31, 0x01	; 1
     ef0:	81 89       	ldd	r24, Z+17	; 0x11
     ef2:	85 ff       	sbrs	r24, 5
     ef4:	06 c0       	rjmp	.+12     	; 0xf02 <__vector_6+0x2a>
		DMA.CH0.CTRLB |= DMA_CH_ERRIF_bm;
     ef6:	81 89       	ldd	r24, Z+17	; 0x11
     ef8:	80 62       	ori	r24, 0x20	; 32
     efa:	81 8b       	std	Z+17, r24	; 0x11
		gStatus = false;
     efc:	10 92 a1 2a 	sts	0x2AA1, r1
     f00:	08 c0       	rjmp	.+16     	; 0xf12 <__vector_6+0x3a>
	} else {
		DMA.CH0.CTRLB |= DMA_CH_TRNIF_bm;
     f02:	e0 e0       	ldi	r30, 0x00	; 0
     f04:	f1 e0       	ldi	r31, 0x01	; 1
     f06:	81 89       	ldd	r24, Z+17	; 0x11
     f08:	80 61       	ori	r24, 0x10	; 16
     f0a:	81 8b       	std	Z+17, r24	; 0x11
		gStatus = true;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 93 a1 2a 	sts	0x2AA1, r24
	}
	gInterruptDone = true;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 a2 2a 	sts	0x2AA2, r24
}
     f18:	ff 91       	pop	r31
     f1a:	ef 91       	pop	r30
     f1c:	8f 91       	pop	r24
     f1e:	0f 90       	pop	r0
     f20:	0b be       	out	0x3b, r0	; 59
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <EEPROM_WaitForNVM>:
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
	NVM_EXEC();
}
     f2c:	e0 ec       	ldi	r30, 0xC0	; 192
     f2e:	f1 e0       	ldi	r31, 0x01	; 1
     f30:	87 85       	ldd	r24, Z+15	; 0x0f
     f32:	88 23       	and	r24, r24
     f34:	ec f3       	brlt	.-6      	; 0xf30 <EEPROM_WaitForNVM+0x4>
     f36:	08 95       	ret

00000f38 <EEPROM_FlushBuffer>:
     f38:	f9 df       	rcall	.-14     	; 0xf2c <EEPROM_WaitForNVM>
     f3a:	e0 ec       	ldi	r30, 0xC0	; 192
     f3c:	f1 e0       	ldi	r31, 0x01	; 1
     f3e:	87 85       	ldd	r24, Z+15	; 0x0f
     f40:	81 ff       	sbrs	r24, 1
     f42:	10 c0       	rjmp	.+32     	; 0xf64 <EEPROM_FlushBuffer+0x2c>
     f44:	86 e3       	ldi	r24, 0x36	; 54
     f46:	82 87       	std	Z+10, r24	; 0x0a
     f48:	ef 93       	push	r30
     f4a:	ff 93       	push	r31
     f4c:	0f 93       	push	r16
     f4e:	2f 93       	push	r18
     f50:	eb ec       	ldi	r30, 0xCB	; 203
     f52:	f1 e0       	ldi	r31, 0x01	; 1
     f54:	08 ed       	ldi	r16, 0xD8	; 216
     f56:	21 e0       	ldi	r18, 0x01	; 1
     f58:	04 bf       	out	0x34, r16	; 52
     f5a:	20 83       	st	Z, r18
     f5c:	2f 91       	pop	r18
     f5e:	0f 91       	pop	r16
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	08 95       	ret

00000f66 <EEPROM_WriteByte>:
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	18 2f       	mov	r17, r24
     f6e:	d6 2f       	mov	r29, r22
     f70:	c4 2f       	mov	r28, r20
     f72:	e2 df       	rcall	.-60     	; 0xf38 <EEPROM_FlushBuffer>
     f74:	e0 ec       	ldi	r30, 0xC0	; 192
     f76:	f1 e0       	ldi	r31, 0x01	; 1
     f78:	83 e3       	ldi	r24, 0x33	; 51
     f7a:	82 87       	std	Z+10, r24	; 0x0a
     f7c:	20 e2       	ldi	r18, 0x20	; 32
     f7e:	12 9f       	mul	r17, r18
     f80:	c0 01       	movw	r24, r0
     f82:	11 24       	eor	r1, r1
     f84:	df 71       	andi	r29, 0x1F	; 31
     f86:	8d 2b       	or	r24, r29
     f88:	80 83       	st	Z, r24
     f8a:	89 2f       	mov	r24, r25
     f8c:	8f 71       	andi	r24, 0x1F	; 31
     f8e:	81 83       	std	Z+1, r24	; 0x01
     f90:	12 82       	std	Z+2, r1	; 0x02
     f92:	c4 83       	std	Z+4, r28	; 0x04
     f94:	85 e3       	ldi	r24, 0x35	; 53
     f96:	82 87       	std	Z+10, r24	; 0x0a
     f98:	ef 93       	push	r30
     f9a:	ff 93       	push	r31
     f9c:	0f 93       	push	r16
     f9e:	2f 93       	push	r18
     fa0:	eb ec       	ldi	r30, 0xCB	; 203
     fa2:	f1 e0       	ldi	r31, 0x01	; 1
     fa4:	08 ed       	ldi	r16, 0xD8	; 216
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	04 bf       	out	0x34, r16	; 52
     faa:	20 83       	st	Z, r18
     fac:	2f 91       	pop	r18
     fae:	0f 91       	pop	r16
     fb0:	ff 91       	pop	r31
     fb2:	ef 91       	pop	r30
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	08 95       	ret

00000fbc <EEPROM_EraseAll>:
 *  This function erases the entire EEPROM memory block to 0xFF.
 */
void EEPROM_EraseAll( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
     fbc:	b7 df       	rcall	.-146    	; 0xf2c <EEPROM_WaitForNVM>

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
     fbe:	80 e3       	ldi	r24, 0x30	; 48
     fc0:	e0 ec       	ldi	r30, 0xC0	; 192
     fc2:	f1 e0       	ldi	r31, 0x01	; 1
     fc4:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
     fc6:	ef 93       	push	r30
     fc8:	ff 93       	push	r31
     fca:	0f 93       	push	r16
     fcc:	2f 93       	push	r18
     fce:	eb ec       	ldi	r30, 0xCB	; 203
     fd0:	f1 e0       	ldi	r31, 0x01	; 1
     fd2:	08 ed       	ldi	r16, 0xD8	; 216
     fd4:	21 e0       	ldi	r18, 0x01	; 1
     fd6:	04 bf       	out	0x34, r16	; 52
     fd8:	20 83       	st	Z, r18
     fda:	2f 91       	pop	r18
     fdc:	0f 91       	pop	r16
     fde:	ff 91       	pop	r31
     fe0:	ef 91       	pop	r30
     fe2:	08 95       	ret

00000fe4 <EEPROM_WriteEnv>:
}

uint8_t EEPROM_WriteEnv(void) {
     fe4:	af 92       	push	r10
     fe6:	bf 92       	push	r11
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	c5 58       	subi	r28, 0x85	; 133
     ffe:	d1 09       	sbc	r29, r1
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	de bf       	out	0x3e, r29	; 62
	
	uint8_t b[sizeof(env_var)];
	uint16_t page_addr;
	uint8_t page;
	
	EEPROM_FlushBuffer();
    1004:	99 df       	rcall	.-206    	; 0xf38 <EEPROM_FlushBuffer>
	EEPROM_DisableMapping();
    1006:	e0 ec       	ldi	r30, 0xC0	; 192
    1008:	f1 e0       	ldi	r31, 0x01	; 1
    100a:	84 85       	ldd	r24, Z+12	; 0x0c
    100c:	87 7f       	andi	r24, 0xF7	; 247
    100e:	84 87       	std	Z+12, r24	; 0x0c
	memcpy(b, &env_var, sizeof(env_var));
    1010:	85 e8       	ldi	r24, 0x85	; 133
    1012:	e8 eb       	ldi	r30, 0xB8	; 184
    1014:	f9 e2       	ldi	r31, 0x29	; 41
    1016:	9e 01       	movw	r18, r28
    1018:	2f 5f       	subi	r18, 0xFF	; 255
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	d9 01       	movw	r26, r18
    101e:	01 90       	ld	r0, Z+
    1020:	0d 92       	st	X+, r0
    1022:	8a 95       	dec	r24
    1024:	e1 f7       	brne	.-8      	; 0x101e <EEPROM_WriteEnv+0x3a>
    1026:	69 01       	movw	r12, r18
    1028:	a1 2c       	mov	r10, r1
    102a:	79 01       	movw	r14, r18
    102c:	e0 94       	com	r14
    102e:	f0 94       	com	r15
    1030:	17 c0       	rjmp	.+46     	; 0x1060 <EEPROM_WriteEnv+0x7c>
	
	for(page_addr = 0; page_addr < (sizeof(env_var)/EEPROM_PAGE_SIZE) + 1; page_addr += 1) {
		for(page = 0; page < EEPROM_PAGE_SIZE; page++) {
			EEPROM_WriteByte(page_addr,page,b[page+(page_addr*EEPROM_PAGE_SIZE)]);
    1032:	f8 01       	movw	r30, r16
    1034:	41 91       	ld	r20, Z+
    1036:	8f 01       	movw	r16, r30
    1038:	6b 2d       	mov	r22, r11
    103a:	8a 2d       	mov	r24, r10
    103c:	94 df       	rcall	.-216    	; 0xf66 <EEPROM_WriteByte>
    103e:	97 01       	movw	r18, r14
    1040:	20 0f       	add	r18, r16
    1042:	31 1f       	adc	r19, r17
			if (page+(page_addr*EEPROM_PAGE_SIZE) >= sizeof(env_var)) {
    1044:	25 38       	cpi	r18, 0x85	; 133
    1046:	31 05       	cpc	r19, r1
    1048:	20 f4       	brcc	.+8      	; 0x1052 <EEPROM_WriteEnv+0x6e>
	EEPROM_FlushBuffer();
	EEPROM_DisableMapping();
	memcpy(b, &env_var, sizeof(env_var));
	
	for(page_addr = 0; page_addr < (sizeof(env_var)/EEPROM_PAGE_SIZE) + 1; page_addr += 1) {
		for(page = 0; page < EEPROM_PAGE_SIZE; page++) {
    104a:	b3 94       	inc	r11
    104c:	f0 e2       	ldi	r31, 0x20	; 32
    104e:	bf 12       	cpse	r11, r31
    1050:	f0 cf       	rjmp	.-32     	; 0x1032 <EEPROM_WriteEnv+0x4e>
    1052:	80 e2       	ldi	r24, 0x20	; 32
    1054:	c8 0e       	add	r12, r24
    1056:	d1 1c       	adc	r13, r1
    1058:	a3 94       	inc	r10
	
	EEPROM_FlushBuffer();
	EEPROM_DisableMapping();
	memcpy(b, &env_var, sizeof(env_var));
	
	for(page_addr = 0; page_addr < (sizeof(env_var)/EEPROM_PAGE_SIZE) + 1; page_addr += 1) {
    105a:	e5 e0       	ldi	r30, 0x05	; 5
    105c:	ae 16       	cp	r10, r30
    105e:	19 f0       	breq	.+6      	; 0x1066 <EEPROM_WriteEnv+0x82>
	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
	NVM_EXEC();
}

uint8_t EEPROM_WriteEnv(void) {
    1060:	86 01       	movw	r16, r12
    1062:	b1 2c       	mov	r11, r1
    1064:	e6 cf       	rjmp	.-52     	; 0x1032 <EEPROM_WriteEnv+0x4e>
			}
		}
	}
	
	return 1;
}
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	cb 57       	subi	r28, 0x7B	; 123
    106a:	df 4f       	sbci	r29, 0xFF	; 255
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	df 90       	pop	r13
    107e:	cf 90       	pop	r12
    1080:	bf 90       	pop	r11
    1082:	af 90       	pop	r10
    1084:	08 95       	ret

00001086 <esp8266_on>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1086:	e0 e6       	ldi	r30, 0x60	; 96
    1088:	f6 e0       	ldi	r31, 0x06	; 6
    108a:	80 e2       	ldi	r24, 0x20	; 32
    108c:	81 83       	std	Z+1, r24	; 0x01
    108e:	85 83       	std	Z+5, r24	; 0x05
    1090:	2f ef       	ldi	r18, 0xFF	; 255
    1092:	83 ec       	ldi	r24, 0xC3	; 195
    1094:	99 e0       	ldi	r25, 0x09	; 9
    1096:	21 50       	subi	r18, 0x01	; 1
    1098:	80 40       	sbci	r24, 0x00	; 0
    109a:	90 40       	sbci	r25, 0x00	; 0
    109c:	e1 f7       	brne	.-8      	; 0x1096 <esp8266_on+0x10>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <esp8266_on+0x1a>
    10a0:	00 00       	nop
    10a2:	08 95       	ret

000010a4 <esp8266_off>:
    10a4:	80 e2       	ldi	r24, 0x20	; 32
    10a6:	e0 e6       	ldi	r30, 0x60	; 96
    10a8:	f6 e0       	ldi	r31, 0x06	; 6
    10aa:	86 83       	std	Z+6, r24	; 0x06
    10ac:	08 95       	ret

000010ae <esp8266_setup>:
    10ae:	cf 93       	push	r28
    10b0:	89 e0       	ldi	r24, 0x09	; 9
    10b2:	80 93 76 2b 	sts	0x2B76, r24
    10b6:	86 ed       	ldi	r24, 0xD6	; 214
    10b8:	90 e2       	ldi	r25, 0x20	; 32
    10ba:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    10be:	2f ef       	ldi	r18, 0xFF	; 255
    10c0:	8f e4       	ldi	r24, 0x4F	; 79
    10c2:	93 ec       	ldi	r25, 0xC3	; 195
    10c4:	21 50       	subi	r18, 0x01	; 1
    10c6:	80 40       	sbci	r24, 0x00	; 0
    10c8:	90 40       	sbci	r25, 0x00	; 0
    10ca:	e1 f7       	brne	.-8      	; 0x10c4 <esp8266_setup+0x16>
    10cc:	00 c0       	rjmp	.+0      	; 0x10ce <esp8266_setup+0x20>
    10ce:	00 00       	nop
    10d0:	80 91 76 2b 	lds	r24, 0x2B76
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	d9 f5       	brne	.+118    	; 0x114e <esp8266_setup+0xa0>
    10d8:	89 e0       	ldi	r24, 0x09	; 9
    10da:	80 93 76 2b 	sts	0x2B76, r24
    10de:	8d ed       	ldi	r24, 0xDD	; 221
    10e0:	90 e2       	ldi	r25, 0x20	; 32
    10e2:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    10e6:	2f ef       	ldi	r18, 0xFF	; 255
    10e8:	81 ee       	ldi	r24, 0xE1	; 225
    10ea:	94 e0       	ldi	r25, 0x04	; 4
    10ec:	21 50       	subi	r18, 0x01	; 1
    10ee:	80 40       	sbci	r24, 0x00	; 0
    10f0:	90 40       	sbci	r25, 0x00	; 0
    10f2:	e1 f7       	brne	.-8      	; 0x10ec <esp8266_setup+0x3e>
    10f4:	00 c0       	rjmp	.+0      	; 0x10f6 <esp8266_setup+0x48>
    10f6:	00 00       	nop
    10f8:	80 91 76 2b 	lds	r24, 0x2B76
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	39 f5       	brne	.+78     	; 0x114e <esp8266_setup+0xa0>
    1100:	89 e0       	ldi	r24, 0x09	; 9
    1102:	80 93 76 2b 	sts	0x2B76, r24
    1106:	8a ee       	ldi	r24, 0xEA	; 234
    1108:	90 e2       	ldi	r25, 0x20	; 32
    110a:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    110e:	2f ef       	ldi	r18, 0xFF	; 255
    1110:	81 ee       	ldi	r24, 0xE1	; 225
    1112:	94 e0       	ldi	r25, 0x04	; 4
    1114:	21 50       	subi	r18, 0x01	; 1
    1116:	80 40       	sbci	r24, 0x00	; 0
    1118:	90 40       	sbci	r25, 0x00	; 0
    111a:	e1 f7       	brne	.-8      	; 0x1114 <esp8266_setup+0x66>
    111c:	00 c0       	rjmp	.+0      	; 0x111e <esp8266_setup+0x70>
    111e:	00 00       	nop
    1120:	c0 91 76 2b 	lds	r28, 0x2B76
    1124:	c1 30       	cpi	r28, 0x01	; 1
    1126:	91 f4       	brne	.+36     	; 0x114c <esp8266_setup+0x9e>
    1128:	89 e0       	ldi	r24, 0x09	; 9
    112a:	80 93 76 2b 	sts	0x2B76, r24
    112e:	86 ef       	ldi	r24, 0xF6	; 246
    1130:	90 e2       	ldi	r25, 0x20	; 32
    1132:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    1136:	2f ef       	ldi	r18, 0xFF	; 255
    1138:	81 ee       	ldi	r24, 0xE1	; 225
    113a:	94 e0       	ldi	r25, 0x04	; 4
    113c:	21 50       	subi	r18, 0x01	; 1
    113e:	80 40       	sbci	r24, 0x00	; 0
    1140:	90 40       	sbci	r25, 0x00	; 0
    1142:	e1 f7       	brne	.-8      	; 0x113c <esp8266_setup+0x8e>
    1144:	00 c0       	rjmp	.+0      	; 0x1146 <esp8266_setup+0x98>
    1146:	00 00       	nop
    1148:	8c 2f       	mov	r24, r28
    114a:	01 c0       	rjmp	.+2      	; 0x114e <esp8266_setup+0xa0>
    114c:	8c 2f       	mov	r24, r28
    114e:	cf 91       	pop	r28
    1150:	08 95       	ret

00001152 <esp8266_join_ap>:

void esp8266_update(void) {
	esp8266_send_cmd("AT+CIPUPDATE",10000);
}

esp8266_status_t esp8266_join_ap(char *ssid, char *pass) {
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	c4 56       	subi	r28, 0x64	; 100
    1164:	d1 09       	sbc	r29, r1
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	7b 01       	movw	r14, r22
	
	uint8_t timeout = 150;
	uint16_t cnt = 0;
	char cmd[100];
	
	strcpy(cmd,"AT+CWJAP=\"");
    116c:	2b e0       	ldi	r18, 0x0B	; 11
    116e:	e8 e1       	ldi	r30, 0x18	; 24
    1170:	f1 e2       	ldi	r31, 0x21	; 33
    1172:	8e 01       	movw	r16, r28
    1174:	0f 5f       	subi	r16, 0xFF	; 255
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	d8 01       	movw	r26, r16
    117a:	01 90       	ld	r0, Z+
    117c:	0d 92       	st	X+, r0
    117e:	2a 95       	dec	r18
    1180:	e1 f7       	brne	.-8      	; 0x117a <esp8266_join_ap+0x28>
	strcat(cmd,ssid);
    1182:	bc 01       	movw	r22, r24
    1184:	c8 01       	movw	r24, r16
    1186:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <strcat>
	strcat(cmd,"\",\"");
    118a:	f8 01       	movw	r30, r16
    118c:	01 90       	ld	r0, Z+
    118e:	00 20       	and	r0, r0
    1190:	e9 f7       	brne	.-6      	; 0x118c <esp8266_join_ap+0x3a>
    1192:	31 97       	sbiw	r30, 0x01	; 1
    1194:	42 e2       	ldi	r20, 0x22	; 34
    1196:	5c e2       	ldi	r21, 0x2C	; 44
    1198:	62 e2       	ldi	r22, 0x22	; 34
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	40 83       	st	Z, r20
    119e:	51 83       	std	Z+1, r21	; 0x01
    11a0:	62 83       	std	Z+2, r22	; 0x02
    11a2:	73 83       	std	Z+3, r23	; 0x03
	strcat(cmd,pass);
    11a4:	b7 01       	movw	r22, r14
    11a6:	c8 01       	movw	r24, r16
    11a8:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <strcat>
	strcat(cmd,"\"");
    11ac:	f8 01       	movw	r30, r16
    11ae:	01 90       	ld	r0, Z+
    11b0:	00 20       	and	r0, r0
    11b2:	e9 f7       	brne	.-6      	; 0x11ae <esp8266_join_ap+0x5c>
    11b4:	31 97       	sbiw	r30, 0x01	; 1
    11b6:	82 e2       	ldi	r24, 0x22	; 34
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	80 83       	st	Z, r24
    11bc:	91 83       	std	Z+1, r25	; 0x01
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    11be:	89 e0       	ldi	r24, 0x09	; 9
    11c0:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    11c4:	c8 01       	movw	r24, r16
    11c6:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    11ca:	2f ef       	ldi	r18, 0xFF	; 255
    11cc:	43 ec       	ldi	r20, 0xC3	; 195
    11ce:	89 e0       	ldi	r24, 0x09	; 9
    11d0:	21 50       	subi	r18, 0x01	; 1
    11d2:	40 40       	sbci	r20, 0x00	; 0
    11d4:	80 40       	sbci	r24, 0x00	; 0
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <esp8266_join_ap+0x7e>
    11d8:	00 c0       	rjmp	.+0      	; 0x11da <esp8266_join_ap+0x88>
    11da:	00 00       	nop
    11dc:	28 e9       	ldi	r18, 0x98	; 152
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	12 c0       	rjmp	.+36     	; 0x1206 <esp8266_join_ap+0xb4>
    11e2:	9f ef       	ldi	r25, 0xFF	; 255
    11e4:	47 e8       	ldi	r20, 0x87	; 135
    11e6:	83 e1       	ldi	r24, 0x13	; 19
    11e8:	91 50       	subi	r25, 0x01	; 1
    11ea:	40 40       	sbci	r20, 0x00	; 0
    11ec:	80 40       	sbci	r24, 0x00	; 0
    11ee:	e1 f7       	brne	.-8      	; 0x11e8 <esp8266_join_ap+0x96>
    11f0:	00 c0       	rjmp	.+0      	; 0x11f2 <esp8266_join_ap+0xa0>
    11f2:	00 00       	nop
    11f4:	21 50       	subi	r18, 0x01	; 1
    11f6:	31 09       	sbc	r19, r1
	
	while (status != ESP8266_SUCCESS)
	{
		_delay_ms(200);
		
		if (cnt++ > timeout) {
    11f8:	21 15       	cp	r18, r1
    11fa:	31 05       	cpc	r19, r1
    11fc:	49 f0       	breq	.+18     	; 0x1210 <esp8266_join_ap+0xbe>
			return ESP8266_TIMEOUT;
		} else if (status == ESP8266_ERROR) {
    11fe:	80 91 76 2b 	lds	r24, 0x2B76
    1202:	88 23       	and	r24, r24
    1204:	31 f0       	breq	.+12     	; 0x1212 <esp8266_join_ap+0xc0>
	strcat(cmd,"\",\"");
	strcat(cmd,pass);
	strcat(cmd,"\"");
	esp8266_send_cmd(cmd,100);
	
	while (status != ESP8266_SUCCESS)
    1206:	80 91 76 2b 	lds	r24, 0x2B76
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	51 f7       	brne	.-44     	; 0x11e2 <esp8266_join_ap+0x90>
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <esp8266_join_ap+0xc0>
	{
		_delay_ms(200);
		
		if (cnt++ > timeout) {
			return ESP8266_TIMEOUT;
    1210:	83 e0       	ldi	r24, 0x03	; 3
		return status;
	}
	*/

	return ESP8266_SUCCESS;
}
    1212:	cc 59       	subi	r28, 0x9C	; 156
    1214:	df 4f       	sbci	r29, 0xFF	; 255
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	08 95       	ret

00001228 <esp8266_get_json>:

esp8266_status_t esp8266_get_json(char *host, char *addr, char *json, uint8_t json_length) {
    1228:	8f 92       	push	r8
    122a:	9f 92       	push	r9
    122c:	bf 92       	push	r11
    122e:	cf 92       	push	r12
    1230:	df 92       	push	r13
    1232:	ef 92       	push	r14
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	c6 59       	subi	r28, 0x96	; 150
    1244:	d1 09       	sbc	r29, r1
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	6b 01       	movw	r12, r22
    124c:	7a 01       	movw	r14, r20
    124e:	b2 2e       	mov	r11, r18
	uint16_t cnt = 0;
	//Try to make this dynamic?
	char cmd[150];
	
	//Set up TCP connection to host
	strcpy(cmd,"AT+CIPSTART=\"TCP\",\"");
    1250:	24 e1       	ldi	r18, 0x14	; 20
    1252:	e3 e2       	ldi	r30, 0x23	; 35
    1254:	f1 e2       	ldi	r31, 0x21	; 33
    1256:	8e 01       	movw	r16, r28
    1258:	0f 5f       	subi	r16, 0xFF	; 255
    125a:	1f 4f       	sbci	r17, 0xFF	; 255
    125c:	d8 01       	movw	r26, r16
    125e:	01 90       	ld	r0, Z+
    1260:	0d 92       	st	X+, r0
    1262:	2a 95       	dec	r18
    1264:	e1 f7       	brne	.-8      	; 0x125e <esp8266_get_json+0x36>
	strcat(cmd,host);
    1266:	bc 01       	movw	r22, r24
    1268:	c8 01       	movw	r24, r16
    126a:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <strcat>
	strcat(cmd,"\",80");
    126e:	d8 01       	movw	r26, r16
    1270:	0d 90       	ld	r0, X+
    1272:	00 20       	and	r0, r0
    1274:	e9 f7       	brne	.-6      	; 0x1270 <esp8266_get_json+0x48>
    1276:	11 97       	sbiw	r26, 0x01	; 1
    1278:	85 e0       	ldi	r24, 0x05	; 5
    127a:	e7 e3       	ldi	r30, 0x37	; 55
    127c:	f1 e2       	ldi	r31, 0x21	; 33
    127e:	01 90       	ld	r0, Z+
    1280:	0d 92       	st	X+, r0
    1282:	8a 95       	dec	r24
    1284:	e1 f7       	brne	.-8      	; 0x127e <esp8266_get_json+0x56>
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    1286:	89 e0       	ldi	r24, 0x09	; 9
    1288:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    128c:	c8 01       	movw	r24, r16
    128e:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    1292:	2f ef       	ldi	r18, 0xFF	; 255
    1294:	83 ed       	ldi	r24, 0xD3	; 211
    1296:	90 e3       	ldi	r25, 0x30	; 48
    1298:	21 50       	subi	r18, 0x01	; 1
    129a:	80 40       	sbci	r24, 0x00	; 0
    129c:	90 40       	sbci	r25, 0x00	; 0
    129e:	e1 f7       	brne	.-8      	; 0x1298 <esp8266_get_json+0x70>
    12a0:	00 c0       	rjmp	.+0      	; 0x12a2 <esp8266_get_json+0x7a>
    12a2:	00 00       	nop
	strcpy(cmd,"AT+CIPSTART=\"TCP\",\"");
	strcat(cmd,host);
	strcat(cmd,"\",80");
	esp8266_send_cmd(cmd,500);
	
	if (status != ESP8266_SUCCESS) {
    12a4:	80 91 76 2b 	lds	r24, 0x2B76
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	09 f0       	breq	.+2      	; 0x12ae <esp8266_get_json+0x86>
    12ac:	c2 c0       	rjmp	.+388    	; 0x1432 <esp8266_get_json+0x20a>
		return status;
	}
	
	//Count number of bytes to send
	char *number_of_bytes;
	itoa(strlen(addr) + 25, number_of_bytes, 10);
    12ae:	f6 01       	movw	r30, r12
    12b0:	01 90       	ld	r0, Z+
    12b2:	00 20       	and	r0, r0
    12b4:	e9 f7       	brne	.-6      	; 0x12b0 <esp8266_get_json+0x88>
    12b6:	cf 01       	movw	r24, r30
    12b8:	8c 19       	sub	r24, r12
    12ba:	9d 09       	sbc	r25, r13
    12bc:	4a e0       	ldi	r20, 0x0A	; 10
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	81 2c       	mov	r8, r1
    12c2:	91 2c       	mov	r9, r1
    12c4:	b4 01       	movw	r22, r8
    12c6:	48 96       	adiw	r24, 0x18	; 24
    12c8:	0e 94 44 3e 	call	0x7c88	; 0x7c88 <itoa>
	strcpy(cmd, "AT+CIPSEND=");
    12cc:	8c e0       	ldi	r24, 0x0C	; 12
    12ce:	ec e3       	ldi	r30, 0x3C	; 60
    12d0:	f1 e2       	ldi	r31, 0x21	; 33
    12d2:	d8 01       	movw	r26, r16
    12d4:	01 90       	ld	r0, Z+
    12d6:	0d 92       	st	X+, r0
    12d8:	8a 95       	dec	r24
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <esp8266_get_json+0xac>
	strcat(cmd,number_of_bytes);
    12dc:	b4 01       	movw	r22, r8
    12de:	c8 01       	movw	r24, r16
    12e0:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <strcat>
	strcat(cmd,"\r"); //needs to be here...
    12e4:	f8 01       	movw	r30, r16
    12e6:	01 90       	ld	r0, Z+
    12e8:	00 20       	and	r0, r0
    12ea:	e9 f7       	brne	.-6      	; 0x12e6 <esp8266_get_json+0xbe>
    12ec:	31 97       	sbiw	r30, 0x01	; 1
    12ee:	8d e0       	ldi	r24, 0x0D	; 13
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	80 83       	st	Z, r24
    12f4:	91 83       	std	Z+1, r25	; 0x01
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    12f6:	89 e0       	ldi	r24, 0x09	; 9
    12f8:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    12fc:	c8 01       	movw	r24, r16
    12fe:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    1302:	af ef       	ldi	r26, 0xFF	; 255
    1304:	b1 ee       	ldi	r27, 0xE1	; 225
    1306:	24 e0       	ldi	r18, 0x04	; 4
    1308:	a1 50       	subi	r26, 0x01	; 1
    130a:	b0 40       	sbci	r27, 0x00	; 0
    130c:	20 40       	sbci	r18, 0x00	; 0
    130e:	e1 f7       	brne	.-8      	; 0x1308 <esp8266_get_json+0xe0>
    1310:	00 c0       	rjmp	.+0      	; 0x1312 <esp8266_get_json+0xea>
    1312:	00 00       	nop
	strcat(cmd,number_of_bytes);
	strcat(cmd,"\r"); //needs to be here...
	esp8266_send_cmd(cmd,50);
	
	//Request data by sending a GET
	strcpy(cmd,"GET ");
    1314:	85 e0       	ldi	r24, 0x05	; 5
    1316:	e8 e4       	ldi	r30, 0x48	; 72
    1318:	f1 e2       	ldi	r31, 0x21	; 33
    131a:	d8 01       	movw	r26, r16
    131c:	01 90       	ld	r0, Z+
    131e:	0d 92       	st	X+, r0
    1320:	8a 95       	dec	r24
    1322:	e1 f7       	brne	.-8      	; 0x131c <esp8266_get_json+0xf4>
	strcat(cmd,addr);
    1324:	b6 01       	movw	r22, r12
    1326:	c8 01       	movw	r24, r16
    1328:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <strcat>
	strcat(cmd," HTTP/1.0\r\n");
    132c:	d8 01       	movw	r26, r16
    132e:	0d 90       	ld	r0, X+
    1330:	00 20       	and	r0, r0
    1332:	e9 f7       	brne	.-6      	; 0x132e <esp8266_get_json+0x106>
    1334:	11 97       	sbiw	r26, 0x01	; 1
    1336:	8c e0       	ldi	r24, 0x0C	; 12
    1338:	ed e4       	ldi	r30, 0x4D	; 77
    133a:	f1 e2       	ldi	r31, 0x21	; 33
    133c:	01 90       	ld	r0, Z+
    133e:	0d 92       	st	X+, r0
    1340:	8a 95       	dec	r24
    1342:	e1 f7       	brne	.-8      	; 0x133c <esp8266_get_json+0x114>
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    1344:	89 e0       	ldi	r24, 0x09	; 9
    1346:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    134a:	c8 01       	movw	r24, r16
    134c:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	91 ee       	ldi	r25, 0xE1	; 225
    1354:	a4 e0       	ldi	r26, 0x04	; 4
    1356:	81 50       	subi	r24, 0x01	; 1
    1358:	90 40       	sbci	r25, 0x00	; 0
    135a:	a0 40       	sbci	r26, 0x00	; 0
    135c:	e1 f7       	brne	.-8      	; 0x1356 <esp8266_get_json+0x12e>
    135e:	00 c0       	rjmp	.+0      	; 0x1360 <esp8266_get_json+0x138>
    1360:	00 00       	nop
}

esp8266_status_t esp8266_get_json(char *host, char *addr, char *json, uint8_t json_length) {
	
	uint16_t timeout = 240;
	uint16_t cnt = 0;
    1362:	00 e0       	ldi	r16, 0x00	; 0
    1364:	10 e0       	ldi	r17, 0x00	; 0
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    1366:	0f 2e       	mov	r0, r31
    1368:	f9 e0       	ldi	r31, 0x09	; 9
    136a:	df 2e       	mov	r13, r31
    136c:	f0 2d       	mov	r31, r0
    136e:	19 c0       	rjmp	.+50     	; 0x13a2 <esp8266_get_json+0x17a>
    1370:	d0 92 76 2b 	sts	0x2B76, r13
	uart_write_str(str);
    1374:	89 eb       	ldi	r24, 0xB9	; 185
    1376:	93 e2       	ldi	r25, 0x23	; 35
    1378:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    137c:	bf ef       	ldi	r27, 0xFF	; 255
    137e:	29 e6       	ldi	r18, 0x69	; 105
    1380:	88 e1       	ldi	r24, 0x18	; 24
    1382:	b1 50       	subi	r27, 0x01	; 1
    1384:	20 40       	sbci	r18, 0x00	; 0
    1386:	80 40       	sbci	r24, 0x00	; 0
    1388:	e1 f7       	brne	.-8      	; 0x1382 <esp8266_get_json+0x15a>
    138a:	00 c0       	rjmp	.+0      	; 0x138c <esp8266_get_json+0x164>
    138c:	00 00       	nop
	
	while (status != ESP8266_SUCCESS)
	{
		esp8266_send_cmd("",250);
		
		if (cnt++ > timeout) {
    138e:	0f 5f       	subi	r16, 0xFF	; 255
    1390:	1f 4f       	sbci	r17, 0xFF	; 255
    1392:	02 3f       	cpi	r16, 0xF2	; 242
    1394:	11 05       	cpc	r17, r1
    1396:	09 f4       	brne	.+2      	; 0x139a <esp8266_get_json+0x172>
    1398:	49 c0       	rjmp	.+146    	; 0x142c <esp8266_get_json+0x204>
			return ESP8266_TIMEOUT;
		} else if (status == ESP8266_ERROR) {
    139a:	80 91 76 2b 	lds	r24, 0x2B76
    139e:	88 23       	and	r24, r24
    13a0:	b9 f0       	breq	.+46     	; 0x13d0 <esp8266_get_json+0x1a8>
	strcpy(cmd,"GET ");
	strcat(cmd,addr);
	strcat(cmd," HTTP/1.0\r\n");
	esp8266_send_cmd(cmd,50);
	
	while (status != ESP8266_SUCCESS)
    13a2:	80 91 76 2b 	lds	r24, 0x2B76
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	19 f7       	brne	.-58     	; 0x1370 <esp8266_get_json+0x148>
    13aa:	12 c0       	rjmp	.+36     	; 0x13d0 <esp8266_get_json+0x1a8>
    13ac:	9f ef       	ldi	r25, 0xFF	; 255
    13ae:	a9 e6       	ldi	r26, 0x69	; 105
    13b0:	b8 e1       	ldi	r27, 0x18	; 24
    13b2:	91 50       	subi	r25, 0x01	; 1
    13b4:	a0 40       	sbci	r26, 0x00	; 0
    13b6:	b0 40       	sbci	r27, 0x00	; 0
    13b8:	e1 f7       	brne	.-8      	; 0x13b2 <esp8266_get_json+0x18a>
    13ba:	00 c0       	rjmp	.+0      	; 0x13bc <esp8266_get_json+0x194>
    13bc:	00 00       	nop
	//Waiting for all the data
	while (status != ESP8266_CLOSED)
	{
		_delay_ms(250);
		
		if (cnt++ > timeout) {
    13be:	01 3f       	cpi	r16, 0xF1	; 241
    13c0:	11 05       	cpc	r17, r1
    13c2:	b0 f5       	brcc	.+108    	; 0x1430 <esp8266_get_json+0x208>
    13c4:	0f 5f       	subi	r16, 0xFF	; 255
    13c6:	1f 4f       	sbci	r17, 0xFF	; 255
			return ESP8266_TIMEOUT;
		} else if (status == ESP8266_ERROR) {
    13c8:	80 91 76 2b 	lds	r24, 0x2B76
    13cc:	88 23       	and	r24, r24
    13ce:	21 f0       	breq	.+8      	; 0x13d8 <esp8266_get_json+0x1b0>
			break;
		}
	}
	
	//Waiting for all the data
	while (status != ESP8266_CLOSED)
    13d0:	80 91 76 2b 	lds	r24, 0x2B76
    13d4:	86 30       	cpi	r24, 0x06	; 6
    13d6:	51 f7       	brne	.-44     	; 0x13ac <esp8266_get_json+0x184>
		} else if (status == ESP8266_ERROR) {
			break;
		}
	}
	
	if (json_found) {
    13d8:	80 91 66 29 	lds	r24, 0x2966
    13dc:	88 23       	and	r24, r24
    13de:	a1 f0       	breq	.+40     	; 0x1408 <esp8266_get_json+0x1e0>
		strncpy(json,rx_buffer,json_length);
    13e0:	4b 2d       	mov	r20, r11
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	68 e8       	ldi	r22, 0x88	; 136
    13e6:	78 e2       	ldi	r23, 0x28	; 40
    13e8:	c7 01       	movw	r24, r14
    13ea:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <strncpy>
		memset(rx_buffer,0,RX_BUFFER);
    13ee:	8c ed       	ldi	r24, 0xDC	; 220
    13f0:	e8 e8       	ldi	r30, 0x88	; 136
    13f2:	f8 e2       	ldi	r31, 0x28	; 40
    13f4:	df 01       	movw	r26, r30
    13f6:	1d 92       	st	X+, r1
    13f8:	8a 95       	dec	r24
    13fa:	e9 f7       	brne	.-6      	; 0x13f6 <esp8266_get_json+0x1ce>
		json_found = false;
    13fc:	10 92 66 29 	sts	0x2966, r1
		rx_ptr = 0;
    1400:	10 92 64 29 	sts	0x2964, r1
    1404:	10 92 65 29 	sts	0x2965, r1
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    1408:	89 e0       	ldi	r24, 0x09	; 9
    140a:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    140e:	89 e5       	ldi	r24, 0x59	; 89
    1410:	91 e2       	ldi	r25, 0x21	; 33
    1412:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    1416:	bf ef       	ldi	r27, 0xFF	; 255
    1418:	21 ee       	ldi	r18, 0xE1	; 225
    141a:	84 e0       	ldi	r24, 0x04	; 4
    141c:	b1 50       	subi	r27, 0x01	; 1
    141e:	20 40       	sbci	r18, 0x00	; 0
    1420:	80 40       	sbci	r24, 0x00	; 0
    1422:	e1 f7       	brne	.-8      	; 0x141c <esp8266_get_json+0x1f4>
    1424:	00 c0       	rjmp	.+0      	; 0x1426 <esp8266_get_json+0x1fe>
    1426:	00 00       	nop
		rx_ptr = 0;
	}
	
	esp8266_send_cmd("AT+CIPCLOSE",50);
	
	return ESP8266_SUCCESS;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <esp8266_get_json+0x20a>
	while (status != ESP8266_SUCCESS)
	{
		esp8266_send_cmd("",250);
		
		if (cnt++ > timeout) {
			return ESP8266_TIMEOUT;
    142c:	83 e0       	ldi	r24, 0x03	; 3
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <esp8266_get_json+0x20a>
	while (status != ESP8266_CLOSED)
	{
		_delay_ms(250);
		
		if (cnt++ > timeout) {
			return ESP8266_TIMEOUT;
    1430:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	esp8266_send_cmd("AT+CIPCLOSE",50);
	
	return ESP8266_SUCCESS;
}
    1432:	ca 56       	subi	r28, 0x6A	; 106
    1434:	df 4f       	sbci	r29, 0xFF	; 255
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	ef 90       	pop	r14
    1446:	df 90       	pop	r13
    1448:	cf 90       	pop	r12
    144a:	bf 90       	pop	r11
    144c:	9f 90       	pop	r9
    144e:	8f 90       	pop	r8
    1450:	08 95       	ret

00001452 <esp8266_setup_webserver>:

esp8266_status_t esp8266_setup_webserver(bool sta, bool ap) {
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	c8 2f       	mov	r28, r24
    1458:	d6 2f       	mov	r29, r22
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    145a:	99 e0       	ldi	r25, 0x09	; 9
    145c:	90 93 76 2b 	sts	0x2B76, r25
	uart_write_str(str);
    1460:	85 e6       	ldi	r24, 0x65	; 101
    1462:	91 e2       	ldi	r25, 0x21	; 33
    1464:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    1468:	2f ef       	ldi	r18, 0xFF	; 255
    146a:	87 ea       	ldi	r24, 0xA7	; 167
    146c:	91 e6       	ldi	r25, 0x61	; 97
    146e:	21 50       	subi	r18, 0x01	; 1
    1470:	80 40       	sbci	r24, 0x00	; 0
    1472:	90 40       	sbci	r25, 0x00	; 0
    1474:	e1 f7       	brne	.-8      	; 0x146e <esp8266_setup_webserver+0x1c>
    1476:	00 c0       	rjmp	.+0      	; 0x1478 <esp8266_setup_webserver+0x26>
    1478:	00 00       	nop

esp8266_status_t esp8266_setup_webserver(bool sta, bool ap) {
	
	//Reset module
	esp8266_send_cmd("AT+RST\r",1000);
	if (status != ESP8266_SUCCESS) {
    147a:	90 91 76 2b 	lds	r25, 0x2B76
    147e:	91 30       	cpi	r25, 0x01	; 1
    1480:	09 f0       	breq	.+2      	; 0x1484 <esp8266_setup_webserver+0x32>
    1482:	8c c0       	rjmp	.+280    	; 0x159c <esp8266_setup_webserver+0x14a>
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    1484:	89 e0       	ldi	r24, 0x09	; 9
    1486:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    148a:	8d ed       	ldi	r24, 0xDD	; 221
    148c:	90 e2       	ldi	r25, 0x20	; 32
    148e:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    1492:	2f ef       	ldi	r18, 0xFF	; 255
    1494:	83 ec       	ldi	r24, 0xC3	; 195
    1496:	99 e0       	ldi	r25, 0x09	; 9
    1498:	21 50       	subi	r18, 0x01	; 1
    149a:	80 40       	sbci	r24, 0x00	; 0
    149c:	90 40       	sbci	r25, 0x00	; 0
    149e:	e1 f7       	brne	.-8      	; 0x1498 <esp8266_setup_webserver+0x46>
    14a0:	00 c0       	rjmp	.+0      	; 0x14a2 <esp8266_setup_webserver+0x50>
    14a2:	00 00       	nop
		return status;
	}
	
	//Set Data Mode
	esp8266_send_cmd("AT+CIPMODE=0",100);
	if (status != ESP8266_SUCCESS) {
    14a4:	80 91 76 2b 	lds	r24, 0x2B76
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	09 f0       	breq	.+2      	; 0x14ae <esp8266_setup_webserver+0x5c>
    14ac:	7a c0       	rjmp	.+244    	; 0x15a2 <esp8266_setup_webserver+0x150>
		return status;
	}
	
	//Select mode
	if (sta) {
    14ae:	cc 23       	and	r28, r28
    14b0:	b1 f0       	breq	.+44     	; 0x14de <esp8266_setup_webserver+0x8c>
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    14b2:	89 e0       	ldi	r24, 0x09	; 9
    14b4:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    14b8:	86 ef       	ldi	r24, 0xF6	; 246
    14ba:	90 e2       	ldi	r25, 0x20	; 32
    14bc:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    14c0:	2f ef       	ldi	r18, 0xFF	; 255
    14c2:	87 e8       	ldi	r24, 0x87	; 135
    14c4:	93 e1       	ldi	r25, 0x13	; 19
    14c6:	21 50       	subi	r18, 0x01	; 1
    14c8:	80 40       	sbci	r24, 0x00	; 0
    14ca:	90 40       	sbci	r25, 0x00	; 0
    14cc:	e1 f7       	brne	.-8      	; 0x14c6 <esp8266_setup_webserver+0x74>
    14ce:	00 c0       	rjmp	.+0      	; 0x14d0 <esp8266_setup_webserver+0x7e>
    14d0:	00 00       	nop
		esp8266_send_cmd("AT+CWMODE=3",200);
	} else {
		return ESP8266_ERROR;
	}
	
	if (status != ESP8266_SUCCESS) {
    14d2:	80 91 76 2b 	lds	r24, 0x2B76
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	09 f0       	breq	.+2      	; 0x14dc <esp8266_setup_webserver+0x8a>
    14da:	63 c0       	rjmp	.+198    	; 0x15a2 <esp8266_setup_webserver+0x150>
    14dc:	19 c0       	rjmp	.+50     	; 0x1510 <esp8266_setup_webserver+0xbe>
	}
	
	//Select mode
	if (sta) {
		esp8266_send_cmd("AT+CWMODE=1",200);
	} else if (ap) {
    14de:	dd 23       	and	r29, r29
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <esp8266_setup_webserver+0x92>
    14e2:	5e c0       	rjmp	.+188    	; 0x15a0 <esp8266_setup_webserver+0x14e>
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    14e4:	89 e0       	ldi	r24, 0x09	; 9
    14e6:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    14ea:	8d e6       	ldi	r24, 0x6D	; 109
    14ec:	91 e2       	ldi	r25, 0x21	; 33
    14ee:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    14f2:	2f ef       	ldi	r18, 0xFF	; 255
    14f4:	87 e8       	ldi	r24, 0x87	; 135
    14f6:	93 e1       	ldi	r25, 0x13	; 19
    14f8:	21 50       	subi	r18, 0x01	; 1
    14fa:	80 40       	sbci	r24, 0x00	; 0
    14fc:	90 40       	sbci	r25, 0x00	; 0
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <esp8266_setup_webserver+0xa6>
    1500:	00 c0       	rjmp	.+0      	; 0x1502 <esp8266_setup_webserver+0xb0>
    1502:	00 00       	nop
		esp8266_send_cmd("AT+CWMODE=3",200);
	} else {
		return ESP8266_ERROR;
	}
	
	if (status != ESP8266_SUCCESS) {
    1504:	80 91 76 2b 	lds	r24, 0x2B76
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	09 f0       	breq	.+2      	; 0x150e <esp8266_setup_webserver+0xbc>
    150c:	4a c0       	rjmp	.+148    	; 0x15a2 <esp8266_setup_webserver+0x150>
    150e:	05 c0       	rjmp	.+10     	; 0x151a <esp8266_setup_webserver+0xc8>
		return status;
	}
	
	if (sta || (sta && ap)) {
		esp8266_join_ap(env_var.wifi_ssid,env_var.wifi_pswd);
    1510:	61 e1       	ldi	r22, 0x11	; 17
    1512:	7a e2       	ldi	r23, 0x2A	; 42
    1514:	85 e2       	ldi	r24, 0x25	; 37
    1516:	9a e2       	ldi	r25, 0x2A	; 42
    1518:	1c de       	rcall	.-968    	; 0x1152 <esp8266_join_ap>
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    151a:	89 e0       	ldi	r24, 0x09	; 9
    151c:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    1520:	89 e7       	ldi	r24, 0x79	; 121
    1522:	91 e2       	ldi	r25, 0x21	; 33
    1524:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    1528:	2f ef       	ldi	r18, 0xFF	; 255
    152a:	83 ec       	ldi	r24, 0xC3	; 195
    152c:	99 e0       	ldi	r25, 0x09	; 9
    152e:	21 50       	subi	r18, 0x01	; 1
    1530:	80 40       	sbci	r24, 0x00	; 0
    1532:	90 40       	sbci	r25, 0x00	; 0
    1534:	e1 f7       	brne	.-8      	; 0x152e <esp8266_setup_webserver+0xdc>
    1536:	00 c0       	rjmp	.+0      	; 0x1538 <esp8266_setup_webserver+0xe6>
    1538:	00 00       	nop
		esp8266_join_ap(env_var.wifi_ssid,env_var.wifi_pswd);
	}
	
	//List ip addresses
	esp8266_send_cmd("AT+CIFSR", 100);
	if (status != ESP8266_SUCCESS) {
    153a:	80 91 76 2b 	lds	r24, 0x2B76
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	81 f5       	brne	.+96     	; 0x15a2 <esp8266_setup_webserver+0x150>
		return status;
	}
	
	//Show ip address to user
#ifdef SHOW_MANUAL
	display_print_scrolling_text(ip_address,false);
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	8f e2       	ldi	r24, 0x2F	; 47
    1548:	9b e2       	ldi	r25, 0x2B	; 43
    154a:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    154e:	89 e0       	ldi	r24, 0x09	; 9
    1550:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    1554:	82 e8       	ldi	r24, 0x82	; 130
    1556:	91 e2       	ldi	r25, 0x21	; 33
    1558:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    155c:	2f ef       	ldi	r18, 0xFF	; 255
    155e:	83 ec       	ldi	r24, 0xC3	; 195
    1560:	99 e0       	ldi	r25, 0x09	; 9
    1562:	21 50       	subi	r18, 0x01	; 1
    1564:	80 40       	sbci	r24, 0x00	; 0
    1566:	90 40       	sbci	r25, 0x00	; 0
    1568:	e1 f7       	brne	.-8      	; 0x1562 <esp8266_setup_webserver+0x110>
    156a:	00 c0       	rjmp	.+0      	; 0x156c <esp8266_setup_webserver+0x11a>
    156c:	00 00       	nop
#ifdef SHOW_MANUAL
	display_print_scrolling_text(ip_address,false);
#endif
	//Configure multiple connections
	esp8266_send_cmd("AT+CIPMUX=1",100);
	if (status != ESP8266_SUCCESS) {
    156e:	80 91 76 2b 	lds	r24, 0x2B76
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	b1 f4       	brne	.+44     	; 0x15a2 <esp8266_setup_webserver+0x150>
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    1576:	89 e0       	ldi	r24, 0x09	; 9
    1578:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    157c:	8e e8       	ldi	r24, 0x8E	; 142
    157e:	91 e2       	ldi	r25, 0x21	; 33
    1580:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    1584:	2f ef       	ldi	r18, 0xFF	; 255
    1586:	83 ec       	ldi	r24, 0xC3	; 195
    1588:	99 e0       	ldi	r25, 0x09	; 9
    158a:	21 50       	subi	r18, 0x01	; 1
    158c:	80 40       	sbci	r24, 0x00	; 0
    158e:	90 40       	sbci	r25, 0x00	; 0
    1590:	e1 f7       	brne	.-8      	; 0x158a <esp8266_setup_webserver+0x138>
    1592:	00 c0       	rjmp	.+0      	; 0x1594 <esp8266_setup_webserver+0x142>
    1594:	00 00       	nop
		return status;
	}
	
	//Start server
	esp8266_send_cmd("AT+CIPSERVER=1,80",100);	
	if (status != ESP8266_SUCCESS) {
    1596:	80 91 76 2b 	lds	r24, 0x2B76
    159a:	03 c0       	rjmp	.+6      	; 0x15a2 <esp8266_setup_webserver+0x150>
esp8266_status_t esp8266_setup_webserver(bool sta, bool ap) {
	
	//Reset module
	esp8266_send_cmd("AT+RST\r",1000);
	if (status != ESP8266_SUCCESS) {
		return status;
    159c:	89 2f       	mov	r24, r25
    159e:	01 c0       	rjmp	.+2      	; 0x15a2 <esp8266_setup_webserver+0x150>
	} else if (ap) {
		esp8266_send_cmd("AT+CWMODE=2",200);
	} else if (ap && sta) {
		esp8266_send_cmd("AT+CWMODE=3",200);
	} else {
		return ESP8266_ERROR;
    15a0:	80 e0       	ldi	r24, 0x00	; 0
	if (status != ESP8266_SUCCESS) {
		return status;
	}
	
	return ESP8266_SUCCESS;
}
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	08 95       	ret

000015a8 <esp8266_configure_ssid_and_password>:
		uart_write_str("Could not access sd card...");
	}
}

esp8266_status_t esp8266_configure_ssid_and_password(void) 
{
    15a8:	af 92       	push	r10
    15aa:	bf 92       	push	r11
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	e7 97       	sbiw	r28, 0x37	; 55
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	de bf       	out	0x3e, r29	; 62
	if (status == ESP8266_GET_REQ) {
    15c6:	80 91 76 2b 	lds	r24, 0x2B76
    15ca:	87 30       	cpi	r24, 0x07	; 7
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <esp8266_configure_ssid_and_password+0x28>
    15ce:	9e c0       	rjmp	.+316    	; 0x170c <esp8266_configure_ssid_and_password+0x164>
		
		at_cipsend(link_channel,"<!DOCTYPE html>\
    15d0:	10 91 06 20 	lds	r17, 0x2006
static inline void at_cipsend(char channel, char *str) {
	char number_of_bytes[5];
	char cmd[50];
	uint16_t timeout = 0;
	
	itoa(strlen(str),number_of_bytes,10);
    15d4:	4a e0       	ldi	r20, 0x0A	; 10
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	be 01       	movw	r22, r28
    15da:	6d 5c       	subi	r22, 0xCD	; 205
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	87 eb       	ldi	r24, 0xB7	; 183
    15e0:	91 e0       	ldi	r25, 0x01	; 1
    15e2:	0e 94 44 3e 	call	0x7c88	; 0x7c88 <itoa>
	if (channel == '0') {
    15e6:	10 33       	cpi	r17, 0x30	; 48
    15e8:	51 f4       	brne	.+20     	; 0x15fe <esp8266_configure_ssid_and_password+0x56>
		strcpy(cmd, "AT+CIPSEND=0,");
    15ea:	8e e0       	ldi	r24, 0x0E	; 14
    15ec:	e0 ea       	ldi	r30, 0xA0	; 160
    15ee:	f1 e2       	ldi	r31, 0x21	; 33
    15f0:	de 01       	movw	r26, r28
    15f2:	11 96       	adiw	r26, 0x01	; 1
    15f4:	01 90       	ld	r0, Z+
    15f6:	0d 92       	st	X+, r0
    15f8:	8a 95       	dec	r24
    15fa:	e1 f7       	brne	.-8      	; 0x15f4 <esp8266_configure_ssid_and_password+0x4c>
    15fc:	09 c0       	rjmp	.+18     	; 0x1610 <esp8266_configure_ssid_and_password+0x68>
	} else {
		strcpy(cmd, "AT+CIPSEND=1,");
    15fe:	8e e0       	ldi	r24, 0x0E	; 14
    1600:	ee ea       	ldi	r30, 0xAE	; 174
    1602:	f1 e2       	ldi	r31, 0x21	; 33
    1604:	de 01       	movw	r26, r28
    1606:	11 96       	adiw	r26, 0x01	; 1
    1608:	01 90       	ld	r0, Z+
    160a:	0d 92       	st	X+, r0
    160c:	8a 95       	dec	r24
    160e:	e1 f7       	brne	.-8      	; 0x1608 <esp8266_configure_ssid_and_password+0x60>
	}
	strcat(cmd,number_of_bytes);
    1610:	be 01       	movw	r22, r28
    1612:	6d 5c       	subi	r22, 0xCD	; 205
    1614:	7f 4f       	sbci	r23, 0xFF	; 255
    1616:	8e 01       	movw	r16, r28
    1618:	0f 5f       	subi	r16, 0xFF	; 255
    161a:	1f 4f       	sbci	r17, 0xFF	; 255
    161c:	c8 01       	movw	r24, r16
    161e:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <strcat>
	strcat(cmd,"\r");
    1622:	f8 01       	movw	r30, r16
    1624:	01 90       	ld	r0, Z+
    1626:	00 20       	and	r0, r0
    1628:	e9 f7       	brne	.-6      	; 0x1624 <esp8266_configure_ssid_and_password+0x7c>
    162a:	31 97       	sbiw	r30, 0x01	; 1
    162c:	8d e0       	ldi	r24, 0x0D	; 13
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	80 83       	st	Z, r24
    1632:	91 83       	std	Z+1, r25	; 0x01
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    1634:	89 e0       	ldi	r24, 0x09	; 9
    1636:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    163a:	c8 01       	movw	r24, r16
    163c:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    1640:	2f ef       	ldi	r18, 0xFF	; 255
    1642:	33 ec       	ldi	r19, 0xC3	; 195
    1644:	49 e0       	ldi	r20, 0x09	; 9
    1646:	21 50       	subi	r18, 0x01	; 1
    1648:	30 40       	sbci	r19, 0x00	; 0
    164a:	40 40       	sbci	r20, 0x00	; 0
    164c:	e1 f7       	brne	.-8      	; 0x1646 <esp8266_configure_ssid_and_password+0x9e>
    164e:	00 c0       	rjmp	.+0      	; 0x1650 <esp8266_configure_ssid_and_password+0xa8>
    1650:	00 00       	nop
	}
	strcat(cmd,number_of_bytes);
	strcat(cmd,"\r");

	esp8266_send_cmd(cmd,100);
	while((rx_buffer[0] != '>') && (timeout++ < 50)) {
    1652:	80 91 88 28 	lds	r24, 0x2888
    1656:	8e 33       	cpi	r24, 0x3E	; 62
    1658:	99 f0       	breq	.+38     	; 0x1680 <esp8266_configure_ssid_and_password+0xd8>
    165a:	82 e3       	ldi	r24, 0x32	; 50
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	e8 e8       	ldi	r30, 0x88	; 136
    1660:	f8 e2       	ldi	r31, 0x28	; 40
    1662:	af ef       	ldi	r26, 0xFF	; 255
    1664:	b3 ec       	ldi	r27, 0xC3	; 195
    1666:	29 e0       	ldi	r18, 0x09	; 9
    1668:	a1 50       	subi	r26, 0x01	; 1
    166a:	b0 40       	sbci	r27, 0x00	; 0
    166c:	20 40       	sbci	r18, 0x00	; 0
    166e:	e1 f7       	brne	.-8      	; 0x1668 <esp8266_configure_ssid_and_password+0xc0>
    1670:	00 c0       	rjmp	.+0      	; 0x1672 <esp8266_configure_ssid_and_password+0xca>
    1672:	00 00       	nop
    1674:	20 81       	ld	r18, Z
    1676:	2e 33       	cpi	r18, 0x3E	; 62
    1678:	19 f0       	breq	.+6      	; 0x1680 <esp8266_configure_ssid_and_password+0xd8>
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	89 f7       	brne	.-30     	; 0x1662 <esp8266_configure_ssid_and_password+0xba>
		_delay_ms(100);
	}
	printf("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nConnection: close\r\n\r\n%s\r\n\r\n",str);
    1680:	8c eb       	ldi	r24, 0xBC	; 188
    1682:	91 e2       	ldi	r25, 0x21	; 33
    1684:	9f 93       	push	r25
    1686:	8f 93       	push	r24
    1688:	84 e7       	ldi	r24, 0x74	; 116
    168a:	93 e2       	ldi	r25, 0x23	; 35
    168c:	9f 93       	push	r25
    168e:	8f 93       	push	r24
    1690:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <printf>
    1694:	3f ef       	ldi	r19, 0xFF	; 255
    1696:	43 ec       	ldi	r20, 0xC3	; 195
    1698:	89 e0       	ldi	r24, 0x09	; 9
    169a:	31 50       	subi	r19, 0x01	; 1
    169c:	40 40       	sbci	r20, 0x00	; 0
    169e:	80 40       	sbci	r24, 0x00	; 0
    16a0:	e1 f7       	brne	.-8      	; 0x169a <esp8266_configure_ssid_and_password+0xf2>
    16a2:	00 c0       	rjmp	.+0      	; 0x16a4 <esp8266_configure_ssid_and_password+0xfc>
    16a4:	00 00       	nop
    16a6:	9f ef       	ldi	r25, 0xFF	; 255
    16a8:	a7 ea       	ldi	r26, 0xA7	; 167
    16aa:	b1 e6       	ldi	r27, 0x61	; 97
    16ac:	91 50       	subi	r25, 0x01	; 1
    16ae:	a0 40       	sbci	r26, 0x00	; 0
    16b0:	b0 40       	sbci	r27, 0x00	; 0
    16b2:	e1 f7       	brne	.-8      	; 0x16ac <esp8266_configure_ssid_and_password+0x104>
    16b4:	00 c0       	rjmp	.+0      	; 0x16b6 <esp8266_configure_ssid_and_password+0x10e>
    16b6:	00 00       	nop
		</body>\
		</html>");
		
		_delay_ms(1000);
		
		if (link_channel == '0') {
    16b8:	80 91 06 20 	lds	r24, 0x2006
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	80 33       	cpi	r24, 0x30	; 48
    16c6:	89 f4       	brne	.+34     	; 0x16ea <esp8266_configure_ssid_and_password+0x142>
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    16c8:	89 e0       	ldi	r24, 0x09	; 9
    16ca:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    16ce:	8a eb       	ldi	r24, 0xBA	; 186
    16d0:	93 e2       	ldi	r25, 0x23	; 35
    16d2:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    16d6:	ef ef       	ldi	r30, 0xFF	; 255
    16d8:	f3 ec       	ldi	r31, 0xC3	; 195
    16da:	29 e0       	ldi	r18, 0x09	; 9
    16dc:	e1 50       	subi	r30, 0x01	; 1
    16de:	f0 40       	sbci	r31, 0x00	; 0
    16e0:	20 40       	sbci	r18, 0x00	; 0
    16e2:	e1 f7       	brne	.-8      	; 0x16dc <esp8266_configure_ssid_and_password+0x134>
    16e4:	00 c0       	rjmp	.+0      	; 0x16e6 <esp8266_configure_ssid_and_password+0x13e>
    16e6:	00 00       	nop
    16e8:	fe c0       	rjmp	.+508    	; 0x18e6 <esp8266_configure_ssid_and_password+0x33e>
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    16ea:	89 e0       	ldi	r24, 0x09	; 9
    16ec:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    16f0:	89 ec       	ldi	r24, 0xC9	; 201
    16f2:	93 e2       	ldi	r25, 0x23	; 35
    16f4:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    16f8:	3f ef       	ldi	r19, 0xFF	; 255
    16fa:	43 ec       	ldi	r20, 0xC3	; 195
    16fc:	89 e0       	ldi	r24, 0x09	; 9
    16fe:	31 50       	subi	r19, 0x01	; 1
    1700:	40 40       	sbci	r20, 0x00	; 0
    1702:	80 40       	sbci	r24, 0x00	; 0
    1704:	e1 f7       	brne	.-8      	; 0x16fe <esp8266_configure_ssid_and_password+0x156>
    1706:	00 c0       	rjmp	.+0      	; 0x1708 <esp8266_configure_ssid_and_password+0x160>
    1708:	00 00       	nop
    170a:	ed c0       	rjmp	.+474    	; 0x18e6 <esp8266_configure_ssid_and_password+0x33e>
			esp8266_send_cmd("AT+CIPCLOSE=0\r", 100);
		} else {
			esp8266_send_cmd("AT+CIPCLOSE=1\r", 100);	
		}
		
	} else if(status == ESP8266_POST_REQ) {
    170c:	88 30       	cpi	r24, 0x08	; 8
    170e:	09 f0       	breq	.+2      	; 0x1712 <esp8266_configure_ssid_and_password+0x16a>
    1710:	ea c0       	rjmp	.+468    	; 0x18e6 <esp8266_configure_ssid_and_password+0x33e>
    1712:	0e e1       	ldi	r16, 0x1E	; 30
    1714:	10 e0       	ldi	r17, 0x00	; 0
    1716:	9f ef       	ldi	r25, 0xFF	; 255
    1718:	a3 ec       	ldi	r26, 0xC3	; 195
    171a:	b9 e0       	ldi	r27, 0x09	; 9
    171c:	91 50       	subi	r25, 0x01	; 1
    171e:	a0 40       	sbci	r26, 0x00	; 0
    1720:	b0 40       	sbci	r27, 0x00	; 0
    1722:	e1 f7       	brne	.-8      	; 0x171c <esp8266_configure_ssid_and_password+0x174>
    1724:	00 c0       	rjmp	.+0      	; 0x1726 <esp8266_configure_ssid_and_password+0x17e>
    1726:	00 00       	nop
		uint16_t timeout = 0;
		
		while(timeout++ < 30) {
			_delay_ms(100);
			if (strstr(rx_buffer,"my_password") != NULL) {
    1728:	68 ed       	ldi	r22, 0xD8	; 216
    172a:	73 e2       	ldi	r23, 0x23	; 35
    172c:	88 e8       	ldi	r24, 0x88	; 136
    172e:	98 e2       	ldi	r25, 0x28	; 40
    1730:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <strstr>
    1734:	89 2b       	or	r24, r25
    1736:	09 f4       	brne	.+2      	; 0x173a <esp8266_configure_ssid_and_password+0x192>
    1738:	d0 c0       	rjmp	.+416    	; 0x18da <esp8266_configure_ssid_and_password+0x332>
				
				uint8_t ssid_len = sizeof(env_var.wifi_ssid);
				uint8_t pass_len = sizeof(env_var.wifi_pswd);
				
				memset(env_var.wifi_ssid,0,ssid_len);
    173a:	84 e1       	ldi	r24, 0x14	; 20
    173c:	e5 e2       	ldi	r30, 0x25	; 37
    173e:	fa e2       	ldi	r31, 0x2A	; 42
    1740:	df 01       	movw	r26, r30
    1742:	28 2f       	mov	r18, r24
    1744:	1d 92       	st	X+, r1
    1746:	2a 95       	dec	r18
    1748:	e9 f7       	brne	.-6      	; 0x1744 <esp8266_configure_ssid_and_password+0x19c>
				memset(env_var.wifi_pswd,0,pass_len);
    174a:	e1 e1       	ldi	r30, 0x11	; 17
    174c:	fa e2       	ldi	r31, 0x2A	; 42
    174e:	df 01       	movw	r26, r30
    1750:	1d 92       	st	X+, r1
    1752:	8a 95       	dec	r24
    1754:	e9 f7       	brne	.-6      	; 0x1750 <esp8266_configure_ssid_and_password+0x1a8>
				
				uint16_t len = strlen(rx_buffer);
    1756:	e8 e8       	ldi	r30, 0x88	; 136
    1758:	f8 e2       	ldi	r31, 0x28	; 40
    175a:	01 90       	ld	r0, Z+
    175c:	00 20       	and	r0, r0
    175e:	e9 f7       	brne	.-6      	; 0x175a <esp8266_configure_ssid_and_password+0x1b2>
    1760:	31 97       	sbiw	r30, 0x01	; 1
    1762:	9f 01       	movw	r18, r30
    1764:	28 58       	subi	r18, 0x88	; 136
    1766:	38 42       	sbci	r19, 0x28	; 40
    1768:	79 01       	movw	r14, r18
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
    176a:	09 f4       	brne	.+2      	; 0x176e <esp8266_configure_ssid_and_password+0x1c6>
    176c:	60 c0       	rjmp	.+192    	; 0x182e <esp8266_configure_ssid_and_password+0x286>
    176e:	00 e0       	ldi	r16, 0x00	; 0
    1770:	10 e0       	ldi	r17, 0x00	; 0
				
				memset(env_var.wifi_ssid,0,ssid_len);
				memset(env_var.wifi_pswd,0,pass_len);
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
    1772:	b1 2c       	mov	r11, r1
				for (uint16_t i = 0; i < len; i++) {
					if(rx_buffer[i] == '=') {
						n++;
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
    1774:	0f 2e       	mov	r0, r31
    1776:	f4 e1       	ldi	r31, 0x14	; 20
    1778:	af 2e       	mov	r10, r31
    177a:	f0 2d       	mov	r31, r0
    177c:	ce 01       	movw	r24, r28
    177e:	01 96       	adiw	r24, 0x01	; 1
    1780:	6c 01       	movw	r12, r24
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
					if(rx_buffer[i] == '=') {
    1782:	f8 01       	movw	r30, r16
    1784:	e8 57       	subi	r30, 0x78	; 120
    1786:	f7 4d       	sbci	r31, 0xD7	; 215
    1788:	80 81       	ld	r24, Z
    178a:	8d 33       	cpi	r24, 0x3D	; 61
    178c:	09 f0       	breq	.+2      	; 0x1790 <esp8266_configure_ssid_and_password+0x1e8>
    178e:	49 c0       	rjmp	.+146    	; 0x1822 <esp8266_configure_ssid_and_password+0x27a>
						n++;
    1790:	b3 94       	inc	r11
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
    1792:	d6 01       	movw	r26, r12
    1794:	ea 2d       	mov	r30, r10
    1796:	1d 92       	st	X+, r1
    1798:	ea 95       	dec	r30
    179a:	e9 f7       	brne	.-6      	; 0x1796 <esp8266_configure_ssid_and_password+0x1ee>
						while ((rx_buffer[++i] != '&') && (i != len)) {
    179c:	c8 01       	movw	r24, r16
    179e:	01 96       	adiw	r24, 0x01	; 1
    17a0:	fc 01       	movw	r30, r24
    17a2:	e8 57       	subi	r30, 0x78	; 120
    17a4:	f7 4d       	sbci	r31, 0xD7	; 215
    17a6:	20 81       	ld	r18, Z
    17a8:	26 32       	cpi	r18, 0x26	; 38
    17aa:	91 f0       	breq	.+36     	; 0x17d0 <esp8266_configure_ssid_and_password+0x228>
    17ac:	8e 15       	cp	r24, r14
    17ae:	9f 05       	cpc	r25, r15
    17b0:	89 f0       	breq	.+34     	; 0x17d4 <esp8266_configure_ssid_and_password+0x22c>
    17b2:	d6 01       	movw	r26, r12
    17b4:	f8 01       	movw	r30, r16
    17b6:	e6 57       	subi	r30, 0x76	; 118
    17b8:	f7 4d       	sbci	r31, 0xD7	; 215
    17ba:	8c 01       	movw	r16, r24
							temp[j++] = rx_buffer[i];
    17bc:	2d 93       	st	X+, r18
					if(rx_buffer[i] == '=') {
						n++;
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
						while ((rx_buffer[++i] != '&') && (i != len)) {
    17be:	0f 5f       	subi	r16, 0xFF	; 255
    17c0:	1f 4f       	sbci	r17, 0xFF	; 255
    17c2:	21 91       	ld	r18, Z+
    17c4:	26 32       	cpi	r18, 0x26	; 38
    17c6:	39 f0       	breq	.+14     	; 0x17d6 <esp8266_configure_ssid_and_password+0x22e>
    17c8:	0e 15       	cp	r16, r14
    17ca:	1f 05       	cpc	r17, r15
    17cc:	b9 f7       	brne	.-18     	; 0x17bc <esp8266_configure_ssid_and_password+0x214>
    17ce:	03 c0       	rjmp	.+6      	; 0x17d6 <esp8266_configure_ssid_and_password+0x22e>
    17d0:	8c 01       	movw	r16, r24
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <esp8266_configure_ssid_and_password+0x22e>
    17d4:	8c 01       	movw	r16, r24
							temp[j++] = rx_buffer[i];
						}
						if (n == 1) {
    17d6:	f1 e0       	ldi	r31, 0x01	; 1
    17d8:	bf 12       	cpse	r11, r31
    17da:	0f c0       	rjmp	.+30     	; 0x17fa <esp8266_configure_ssid_and_password+0x252>
							if (strlen(temp) < ssid_len)
    17dc:	f6 01       	movw	r30, r12
    17de:	01 90       	ld	r0, Z+
    17e0:	00 20       	and	r0, r0
    17e2:	e9 f7       	brne	.-6      	; 0x17de <esp8266_configure_ssid_and_password+0x236>
    17e4:	31 97       	sbiw	r30, 0x01	; 1
    17e6:	ec 19       	sub	r30, r12
    17e8:	fd 09       	sbc	r31, r13
    17ea:	74 97       	sbiw	r30, 0x14	; 20
    17ec:	d0 f4       	brcc	.+52     	; 0x1822 <esp8266_configure_ssid_and_password+0x27a>
								strcpy(env_var.wifi_ssid,temp);
    17ee:	b6 01       	movw	r22, r12
    17f0:	85 e2       	ldi	r24, 0x25	; 37
    17f2:	9a e2       	ldi	r25, 0x2A	; 42
    17f4:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <strcpy>
    17f8:	14 c0       	rjmp	.+40     	; 0x1822 <esp8266_configure_ssid_and_password+0x27a>
						} else if (n == 2) {
    17fa:	22 e0       	ldi	r18, 0x02	; 2
    17fc:	b2 12       	cpse	r11, r18
    17fe:	11 c0       	rjmp	.+34     	; 0x1822 <esp8266_configure_ssid_and_password+0x27a>
							if (strlen(temp) < pass_len)
    1800:	de 01       	movw	r26, r28
    1802:	11 96       	adiw	r26, 0x01	; 1
    1804:	fd 01       	movw	r30, r26
    1806:	01 90       	ld	r0, Z+
    1808:	00 20       	and	r0, r0
    180a:	e9 f7       	brne	.-6      	; 0x1806 <esp8266_configure_ssid_and_password+0x25e>
    180c:	31 97       	sbiw	r30, 0x01	; 1
    180e:	ea 1b       	sub	r30, r26
    1810:	fb 0b       	sbc	r31, r27
    1812:	74 97       	sbiw	r30, 0x14	; 20
    1814:	60 f4       	brcc	.+24     	; 0x182e <esp8266_configure_ssid_and_password+0x286>
								strcpy(env_var.wifi_pswd,temp);
    1816:	bd 01       	movw	r22, r26
    1818:	81 e1       	ldi	r24, 0x11	; 17
    181a:	9a e2       	ldi	r25, 0x2A	; 42
    181c:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <strcpy>
    1820:	06 c0       	rjmp	.+12     	; 0x182e <esp8266_configure_ssid_and_password+0x286>
				memset(env_var.wifi_pswd,0,pass_len);
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
    1822:	0f 5f       	subi	r16, 0xFF	; 255
    1824:	1f 4f       	sbci	r17, 0xFF	; 255
    1826:	0e 15       	cp	r16, r14
    1828:	1f 05       	cpc	r17, r15
    182a:	08 f4       	brcc	.+2      	; 0x182e <esp8266_configure_ssid_and_password+0x286>
    182c:	aa cf       	rjmp	.-172    	; 0x1782 <esp8266_configure_ssid_and_password+0x1da>
							break;
						}
					}
				}
				
				if (link_channel == '0') {
    182e:	80 91 06 20 	lds	r24, 0x2006
    1832:	80 33       	cpi	r24, 0x30	; 48
    1834:	89 f4       	brne	.+34     	; 0x1858 <esp8266_configure_ssid_and_password+0x2b0>
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    1836:	89 e0       	ldi	r24, 0x09	; 9
    1838:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    183c:	8a eb       	ldi	r24, 0xBA	; 186
    183e:	93 e2       	ldi	r25, 0x23	; 35
    1840:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    1844:	3f ef       	ldi	r19, 0xFF	; 255
    1846:	43 ec       	ldi	r20, 0xC3	; 195
    1848:	89 e0       	ldi	r24, 0x09	; 9
    184a:	31 50       	subi	r19, 0x01	; 1
    184c:	40 40       	sbci	r20, 0x00	; 0
    184e:	80 40       	sbci	r24, 0x00	; 0
    1850:	e1 f7       	brne	.-8      	; 0x184a <esp8266_configure_ssid_and_password+0x2a2>
    1852:	00 c0       	rjmp	.+0      	; 0x1854 <esp8266_configure_ssid_and_password+0x2ac>
    1854:	00 00       	nop
    1856:	10 c0       	rjmp	.+32     	; 0x1878 <esp8266_configure_ssid_and_password+0x2d0>
char password[20];

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	status = ESP8266_NONE;
    1858:	89 e0       	ldi	r24, 0x09	; 9
    185a:	80 93 76 2b 	sts	0x2B76, r24
	uart_write_str(str);
    185e:	89 ec       	ldi	r24, 0xC9	; 201
    1860:	93 e2       	ldi	r25, 0x23	; 35
    1862:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <uart_write_str>
    1866:	9f ef       	ldi	r25, 0xFF	; 255
    1868:	a3 ec       	ldi	r26, 0xC3	; 195
    186a:	b9 e0       	ldi	r27, 0x09	; 9
    186c:	91 50       	subi	r25, 0x01	; 1
    186e:	a0 40       	sbci	r26, 0x00	; 0
    1870:	b0 40       	sbci	r27, 0x00	; 0
    1872:	e1 f7       	brne	.-8      	; 0x186c <esp8266_configure_ssid_and_password+0x2c4>
    1874:	00 c0       	rjmp	.+0      	; 0x1876 <esp8266_configure_ssid_and_password+0x2ce>
    1876:	00 00       	nop
	PORTD.OUTSET = CH_EN;
	_delay_ms(100);
}

void esp8266_off(void) {
	PORTD.OUTCLR = CH_EN;
    1878:	80 e2       	ldi	r24, 0x20	; 32
    187a:	e0 e6       	ldi	r30, 0x60	; 96
    187c:	f6 e0       	ldi	r31, 0x06	; 6
    187e:	86 83       	std	Z+6, r24	; 0x06
    1880:	ef ef       	ldi	r30, 0xFF	; 255
    1882:	f7 ea       	ldi	r31, 0xA7	; 167
    1884:	21 e6       	ldi	r18, 0x61	; 97
    1886:	e1 50       	subi	r30, 0x01	; 1
    1888:	f0 40       	sbci	r31, 0x00	; 0
    188a:	20 40       	sbci	r18, 0x00	; 0
    188c:	e1 f7       	brne	.-8      	; 0x1886 <esp8266_configure_ssid_and_password+0x2de>
    188e:	00 c0       	rjmp	.+0      	; 0x1890 <esp8266_configure_ssid_and_password+0x2e8>
    1890:	00 00       	nop
					esp8266_send_cmd("AT+CIPCLOSE=1\r", 100);
				}
				
				esp8266_off();
				_delay_ms(1000);
				esp8266_on();
    1892:	f9 db       	rcall	.-2062   	; 0x1086 <esp8266_on>
				status = esp8266_setup();
    1894:	0c dc       	rcall	.-2024   	; 0x10ae <esp8266_setup>
    1896:	80 93 76 2b 	sts	0x2B76, r24
				if (status != ESP8266_SUCCESS) {
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	39 f0       	breq	.+14     	; 0x18ac <esp8266_configure_ssid_and_password+0x304>
#ifdef SHOW_MANUAL
					display_print_scrolling_text("COULD NOT JOIN AP",false);
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	84 ee       	ldi	r24, 0xE4	; 228
    18a4:	93 e2       	ldi	r25, 0x23	; 35
    18a6:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
					return ESP8266_TIMEOUT;
    18aa:	1e c0       	rjmp	.+60     	; 0x18e8 <esp8266_configure_ssid_and_password+0x340>
				}
				
				status = esp8266_join_ap(env_var.wifi_ssid,env_var.wifi_pswd);
    18ac:	61 e1       	ldi	r22, 0x11	; 17
    18ae:	7a e2       	ldi	r23, 0x2A	; 42
    18b0:	85 e2       	ldi	r24, 0x25	; 37
    18b2:	9a e2       	ldi	r25, 0x2A	; 42
    18b4:	4e dc       	rcall	.-1892   	; 0x1152 <esp8266_join_ap>
    18b6:	80 93 76 2b 	sts	0x2B76, r24
				if (status != ESP8266_SUCCESS) {
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	39 f0       	breq	.+14     	; 0x18cc <esp8266_configure_ssid_and_password+0x324>
#ifdef SHOW_MANUAL
					display_print_scrolling_text("COULD NOT JOIN AP",false);
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	84 ee       	ldi	r24, 0xE4	; 228
    18c4:	93 e2       	ldi	r25, 0x23	; 35
    18c6:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
					return ESP8266_TIMEOUT;
    18ca:	0e c0       	rjmp	.+28     	; 0x18e8 <esp8266_configure_ssid_and_password+0x340>
				}
#ifdef SHOW_MANUAL
				display_print_scrolling_text("WIFI CONFIGURED",false);
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	86 ef       	ldi	r24, 0xF6	; 246
    18d2:	93 e2       	ldi	r25, 0x23	; 35
    18d4:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
				return ESP8266_TIMEOUT;
    18d8:	07 c0       	rjmp	.+14     	; 0x18e8 <esp8266_configure_ssid_and_password+0x340>
    18da:	01 50       	subi	r16, 0x01	; 1
    18dc:	11 09       	sbc	r17, r1
		}
		
	} else if(status == ESP8266_POST_REQ) {
		uint16_t timeout = 0;
		
		while(timeout++ < 30) {
    18de:	01 15       	cp	r16, r1
    18e0:	11 05       	cpc	r17, r1
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <esp8266_configure_ssid_and_password+0x33e>
    18e4:	18 cf       	rjmp	.-464    	; 0x1716 <esp8266_configure_ssid_and_password+0x16e>
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <esp8266_configure_ssid_and_password+0x342>
    18e8:	83 e0       	ldi	r24, 0x03	; 3
#endif
				return ESP8266_TIMEOUT;
			}	
		}
	}
}
    18ea:	e7 96       	adiw	r28, 0x37	; 55
    18ec:	cd bf       	out	0x3d, r28	; 61
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	ff 90       	pop	r15
    18fa:	ef 90       	pop	r14
    18fc:	df 90       	pop	r13
    18fe:	cf 90       	pop	r12
    1900:	bf 90       	pop	r11
    1902:	af 90       	pop	r10
    1904:	08 95       	ret

00001906 <__vector_88>:

ISR(USARTD0_RXC_vect) {
    1906:	1f 92       	push	r1
    1908:	0f 92       	push	r0
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	0f 92       	push	r0
    190e:	11 24       	eor	r1, r1
    1910:	0b b6       	in	r0, 0x3b	; 59
    1912:	0f 92       	push	r0
    1914:	2f 93       	push	r18
    1916:	3f 93       	push	r19
    1918:	4f 93       	push	r20
    191a:	5f 93       	push	r21
    191c:	6f 93       	push	r22
    191e:	7f 93       	push	r23
    1920:	8f 93       	push	r24
    1922:	9f 93       	push	r25
    1924:	af 93       	push	r26
    1926:	bf 93       	push	r27
    1928:	ef 93       	push	r30
    192a:	ff 93       	push	r31
	
	char rx_temp = USARTD0.DATA;
    192c:	40 91 a0 09 	lds	r20, 0x09A0
	
	if (rx_temp == '\n') {
    1930:	4a 30       	cpi	r20, 0x0A	; 10
    1932:	09 f0       	breq	.+2      	; 0x1936 <__vector_88+0x30>
    1934:	88 c0       	rjmp	.+272    	; 0x1a46 <__vector_88+0x140>
		if (strstr(rx_buffer,"OK") || strstr(rx_buffer,"ready")) {
    1936:	66 e0       	ldi	r22, 0x06	; 6
    1938:	74 e2       	ldi	r23, 0x24	; 36
    193a:	88 e8       	ldi	r24, 0x88	; 136
    193c:	98 e2       	ldi	r25, 0x28	; 40
    193e:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <strstr>
    1942:	89 2b       	or	r24, r25
    1944:	41 f4       	brne	.+16     	; 0x1956 <__vector_88+0x50>
    1946:	69 e0       	ldi	r22, 0x09	; 9
    1948:	74 e2       	ldi	r23, 0x24	; 36
    194a:	88 e8       	ldi	r24, 0x88	; 136
    194c:	98 e2       	ldi	r25, 0x28	; 40
    194e:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <strstr>
    1952:	89 2b       	or	r24, r25
    1954:	21 f0       	breq	.+8      	; 0x195e <__vector_88+0x58>
			status = ESP8266_SUCCESS;
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	80 93 76 2b 	sts	0x2B76, r24
    195c:	5c c0       	rjmp	.+184    	; 0x1a16 <__vector_88+0x110>
		} else if (strstr(rx_buffer,"ERROR") || strstr(rx_buffer,"FAIL")) {
    195e:	6f e0       	ldi	r22, 0x0F	; 15
    1960:	74 e2       	ldi	r23, 0x24	; 36
    1962:	88 e8       	ldi	r24, 0x88	; 136
    1964:	98 e2       	ldi	r25, 0x28	; 40
    1966:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <strstr>
    196a:	89 2b       	or	r24, r25
    196c:	41 f4       	brne	.+16     	; 0x197e <__vector_88+0x78>
    196e:	65 e1       	ldi	r22, 0x15	; 21
    1970:	74 e2       	ldi	r23, 0x24	; 36
    1972:	88 e8       	ldi	r24, 0x88	; 136
    1974:	98 e2       	ldi	r25, 0x28	; 40
    1976:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <strstr>
    197a:	89 2b       	or	r24, r25
    197c:	19 f0       	breq	.+6      	; 0x1984 <__vector_88+0x7e>
			status = ESP8266_ERROR;
    197e:	10 92 76 2b 	sts	0x2B76, r1
    1982:	49 c0       	rjmp	.+146    	; 0x1a16 <__vector_88+0x110>
		} else if (strstr(rx_buffer,"CONNECT")) {
    1984:	6a e1       	ldi	r22, 0x1A	; 26
    1986:	74 e2       	ldi	r23, 0x24	; 36
    1988:	88 e8       	ldi	r24, 0x88	; 136
    198a:	98 e2       	ldi	r25, 0x28	; 40
    198c:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <strstr>
    1990:	89 2b       	or	r24, r25
    1992:	21 f0       	breq	.+8      	; 0x199c <__vector_88+0x96>
			status = ESP8266_CONNECT;
    1994:	84 e0       	ldi	r24, 0x04	; 4
    1996:	80 93 76 2b 	sts	0x2B76, r24
    199a:	3d c0       	rjmp	.+122    	; 0x1a16 <__vector_88+0x110>
		} else if (strstr(rx_buffer,"CLOSED")) {
    199c:	62 e2       	ldi	r22, 0x22	; 34
    199e:	74 e2       	ldi	r23, 0x24	; 36
    19a0:	88 e8       	ldi	r24, 0x88	; 136
    19a2:	98 e2       	ldi	r25, 0x28	; 40
    19a4:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <strstr>
    19a8:	89 2b       	or	r24, r25
    19aa:	21 f0       	breq	.+8      	; 0x19b4 <__vector_88+0xae>
			status = ESP8266_CLOSED;
    19ac:	86 e0       	ldi	r24, 0x06	; 6
    19ae:	80 93 76 2b 	sts	0x2B76, r24
    19b2:	31 c0       	rjmp	.+98     	; 0x1a16 <__vector_88+0x110>
		} else if (strstr(rx_buffer,"GET")) {
    19b4:	69 e2       	ldi	r22, 0x29	; 41
    19b6:	74 e2       	ldi	r23, 0x24	; 36
    19b8:	88 e8       	ldi	r24, 0x88	; 136
    19ba:	98 e2       	ldi	r25, 0x28	; 40
    19bc:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <strstr>
    19c0:	89 2b       	or	r24, r25
    19c2:	41 f0       	breq	.+16     	; 0x19d4 <__vector_88+0xce>
			link_channel = rx_buffer[5];
    19c4:	80 91 8d 28 	lds	r24, 0x288D
    19c8:	80 93 06 20 	sts	0x2006, r24
			status = ESP8266_GET_REQ;
    19cc:	87 e0       	ldi	r24, 0x07	; 7
    19ce:	80 93 76 2b 	sts	0x2B76, r24
    19d2:	21 c0       	rjmp	.+66     	; 0x1a16 <__vector_88+0x110>
		} else if (strstr(rx_buffer,"POST")) {
    19d4:	6d e2       	ldi	r22, 0x2D	; 45
    19d6:	74 e2       	ldi	r23, 0x24	; 36
    19d8:	88 e8       	ldi	r24, 0x88	; 136
    19da:	98 e2       	ldi	r25, 0x28	; 40
    19dc:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <strstr>
    19e0:	89 2b       	or	r24, r25
    19e2:	21 f0       	breq	.+8      	; 0x19ec <__vector_88+0xe6>
			status = ESP8266_POST_REQ;
    19e4:	88 e0       	ldi	r24, 0x08	; 8
    19e6:	80 93 76 2b 	sts	0x2B76, r24
    19ea:	15 c0       	rjmp	.+42     	; 0x1a16 <__vector_88+0x110>
		} else if (strstr(rx_buffer,"192")) {
    19ec:	62 e3       	ldi	r22, 0x32	; 50
    19ee:	74 e2       	ldi	r23, 0x24	; 36
    19f0:	88 e8       	ldi	r24, 0x88	; 136
    19f2:	98 e2       	ldi	r25, 0x28	; 40
    19f4:	0e 94 2a 3e 	call	0x7c54	; 0x7c54 <strstr>
    19f8:	89 2b       	or	r24, r25
    19fa:	69 f0       	breq	.+26     	; 0x1a16 <__vector_88+0x110>
			strncpy(ip_address,strchr(rx_buffer,'\"'),19);
    19fc:	62 e2       	ldi	r22, 0x22	; 34
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	88 e8       	ldi	r24, 0x88	; 136
    1a02:	98 e2       	ldi	r25, 0x28	; 40
    1a04:	0e 94 09 3e 	call	0x7c12	; 0x7c12 <strchr>
    1a08:	43 e1       	ldi	r20, 0x13	; 19
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	8f e2       	ldi	r24, 0x2F	; 47
    1a10:	9b e2       	ldi	r25, 0x2B	; 43
    1a12:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <strncpy>
		else if (strstr(rx_buffer,"wdt reset")) {
			wdt_triggered = true;
		}*/
		 
		//if (rx_buffer[0] == '{') {
		if (strstr(rx_buffer,"{")) {
    1a16:	6b e7       	ldi	r22, 0x7B	; 123
    1a18:	70 e0       	ldi	r23, 0x00	; 0
    1a1a:	88 e8       	ldi	r24, 0x88	; 136
    1a1c:	98 e2       	ldi	r25, 0x28	; 40
    1a1e:	0e 94 09 3e 	call	0x7c12	; 0x7c12 <strchr>
    1a22:	89 2b       	or	r24, r25
    1a24:	21 f0       	breq	.+8      	; 0x1a2e <__vector_88+0x128>
			json_found = true;	
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	80 93 66 29 	sts	0x2966, r24
    1a2c:	26 c0       	rjmp	.+76     	; 0x1a7a <__vector_88+0x174>
		} else {
			//Flush buffer
			rx_ptr = 0;
    1a2e:	10 92 64 29 	sts	0x2964, r1
    1a32:	10 92 65 29 	sts	0x2965, r1
			memset(rx_buffer, 0, RX_BUFFER);	
    1a36:	8c ed       	ldi	r24, 0xDC	; 220
    1a38:	e8 e8       	ldi	r30, 0x88	; 136
    1a3a:	f8 e2       	ldi	r31, 0x28	; 40
    1a3c:	df 01       	movw	r26, r30
    1a3e:	1d 92       	st	X+, r1
    1a40:	8a 95       	dec	r24
    1a42:	e9 f7       	brne	.-6      	; 0x1a3e <__vector_88+0x138>
    1a44:	1a c0       	rjmp	.+52     	; 0x1a7a <__vector_88+0x174>
		}
	} else {
		rx_buffer[rx_ptr++] = rx_temp;
    1a46:	80 91 64 29 	lds	r24, 0x2964
    1a4a:	90 91 65 29 	lds	r25, 0x2965
    1a4e:	9c 01       	movw	r18, r24
    1a50:	2f 5f       	subi	r18, 0xFF	; 255
    1a52:	3f 4f       	sbci	r19, 0xFF	; 255
    1a54:	20 93 64 29 	sts	0x2964, r18
    1a58:	30 93 65 29 	sts	0x2965, r19
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	e8 57       	subi	r30, 0x78	; 120
    1a60:	f7 4d       	sbci	r31, 0xD7	; 215
    1a62:	40 83       	st	Z, r20
		
		//Buffer overflow guard
		if (rx_ptr == RX_BUFFER) {
    1a64:	80 91 64 29 	lds	r24, 0x2964
    1a68:	90 91 65 29 	lds	r25, 0x2965
    1a6c:	8c 3d       	cpi	r24, 0xDC	; 220
    1a6e:	91 05       	cpc	r25, r1
    1a70:	21 f4       	brne	.+8      	; 0x1a7a <__vector_88+0x174>
			rx_ptr = 0;
    1a72:	10 92 64 29 	sts	0x2964, r1
    1a76:	10 92 65 29 	sts	0x2965, r1
		}
	}
    1a7a:	ff 91       	pop	r31
    1a7c:	ef 91       	pop	r30
    1a7e:	bf 91       	pop	r27
    1a80:	af 91       	pop	r26
    1a82:	9f 91       	pop	r25
    1a84:	8f 91       	pop	r24
    1a86:	7f 91       	pop	r23
    1a88:	6f 91       	pop	r22
    1a8a:	5f 91       	pop	r21
    1a8c:	4f 91       	pop	r20
    1a8e:	3f 91       	pop	r19
    1a90:	2f 91       	pop	r18
    1a92:	0f 90       	pop	r0
    1a94:	0b be       	out	0x3b, r0	; 59
    1a96:	0f 90       	pop	r0
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	0f 90       	pop	r0
    1a9c:	1f 90       	pop	r1
    1a9e:	18 95       	reti

00001aa0 <ht1632c_set_pixel>:
	HT1632C_PORT.PIN1CTRL = PORT_OPC_PULLUP_gc;
	HT1632C_PORT.PIN2CTRL = PORT_OPC_PULLUP_gc;
	HT1632C_PORT.PIN3CTRL = PORT_OPC_PULLUP_gc;
	
	ht1632c_write_command(HT1632_LED_OFF);
	ht1632c_write_command(HT1632_SYS_DIS);
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	f6 95       	lsr	r31
    1aa4:	e7 95       	ror	r30
    1aa6:	f6 95       	lsr	r31
    1aa8:	e7 95       	ror	r30
    1aaa:	f6 95       	lsr	r31
    1aac:	e7 95       	ror	r30
    1aae:	e9 59       	subi	r30, 0x99	; 153
    1ab0:	f6 4d       	sbci	r31, 0xD6	; 214
    1ab2:	87 70       	andi	r24, 0x07	; 7
    1ab4:	99 27       	eor	r25, r25
    1ab6:	21 e0       	ldi	r18, 0x01	; 1
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	a9 01       	movw	r20, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <ht1632c_set_pixel+0x22>
    1abe:	44 0f       	add	r20, r20
    1ac0:	55 1f       	adc	r21, r21
    1ac2:	8a 95       	dec	r24
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <ht1632c_set_pixel+0x1e>
    1ac6:	ca 01       	movw	r24, r20
    1ac8:	90 81       	ld	r25, Z
    1aca:	89 2b       	or	r24, r25
    1acc:	80 83       	st	Z, r24
    1ace:	08 95       	ret

00001ad0 <ht1632c_clr_pixel>:
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	f6 95       	lsr	r31
    1ad4:	e7 95       	ror	r30
    1ad6:	f6 95       	lsr	r31
    1ad8:	e7 95       	ror	r30
    1ada:	f6 95       	lsr	r31
    1adc:	e7 95       	ror	r30
    1ade:	e9 59       	subi	r30, 0x99	; 153
    1ae0:	f6 4d       	sbci	r31, 0xD6	; 214
    1ae2:	87 70       	andi	r24, 0x07	; 7
    1ae4:	99 27       	eor	r25, r25
    1ae6:	21 e0       	ldi	r18, 0x01	; 1
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	a9 01       	movw	r20, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <ht1632c_clr_pixel+0x22>
    1aee:	44 0f       	add	r20, r20
    1af0:	55 1f       	adc	r21, r21
    1af2:	8a 95       	dec	r24
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <ht1632c_clr_pixel+0x1e>
    1af6:	ca 01       	movw	r24, r20
    1af8:	80 95       	com	r24
    1afa:	90 81       	ld	r25, Z
    1afc:	89 23       	and	r24, r25
    1afe:	80 83       	st	Z, r24
    1b00:	08 95       	ret

00001b02 <ht1632c_clear_screen>:
    1b02:	e7 e6       	ldi	r30, 0x67	; 103
    1b04:	f9 e2       	ldi	r31, 0x29	; 41
    1b06:	87 e8       	ldi	r24, 0x87	; 135
    1b08:	99 e2       	ldi	r25, 0x29	; 41
    1b0a:	11 92       	st	Z+, r1
    1b0c:	e8 17       	cp	r30, r24
    1b0e:	f9 07       	cpc	r31, r25
    1b10:	e1 f7       	brne	.-8      	; 0x1b0a <ht1632c_clear_screen+0x8>
    1b12:	0c 94 62 24 	jmp	0x48c4	; 0x48c4 <display_refresh_screen>
    1b16:	08 95       	ret

00001b18 <ht1632c_write_data>:
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	28 e0       	ldi	r18, 0x08	; 8
    1b1e:	e0 e8       	ldi	r30, 0x80	; 128
    1b20:	f6 e0       	ldi	r31, 0x06	; 6
    1b22:	21 83       	std	Z+1, r18	; 0x01
    1b24:	66 23       	and	r22, r22
    1b26:	c1 f0       	breq	.+48     	; 0x1b58 <ht1632c_write_data+0x40>
    1b28:	74 e0       	ldi	r23, 0x04	; 4
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	a8 e0       	ldi	r26, 0x08	; 8
    1b30:	76 83       	std	Z+6, r23	; 0x06
    1b32:	2f ef       	ldi	r18, 0xFF	; 255
    1b34:	26 0f       	add	r18, r22
    1b36:	ea 01       	movw	r28, r20
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <ht1632c_write_data+0x26>
    1b3a:	cc 0f       	add	r28, r28
    1b3c:	dd 1f       	adc	r29, r29
    1b3e:	2a 95       	dec	r18
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <ht1632c_write_data+0x22>
    1b42:	9e 01       	movw	r18, r28
    1b44:	28 23       	and	r18, r24
    1b46:	39 23       	and	r19, r25
    1b48:	23 2b       	or	r18, r19
    1b4a:	11 f0       	breq	.+4      	; 0x1b50 <ht1632c_write_data+0x38>
    1b4c:	a5 83       	std	Z+5, r26	; 0x05
    1b4e:	01 c0       	rjmp	.+2      	; 0x1b52 <ht1632c_write_data+0x3a>
    1b50:	a6 83       	std	Z+6, r26	; 0x06
    1b52:	75 83       	std	Z+5, r23	; 0x05
    1b54:	61 50       	subi	r22, 0x01	; 1
    1b56:	61 f7       	brne	.-40     	; 0x1b30 <ht1632c_write_data+0x18>
    1b58:	88 e0       	ldi	r24, 0x08	; 8
    1b5a:	e0 e8       	ldi	r30, 0x80	; 128
    1b5c:	f6 e0       	ldi	r31, 0x06	; 6
    1b5e:	86 83       	std	Z+6, r24	; 0x06
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	08 95       	ret

00001b66 <ht1632c_refresh_screen>:
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	e0 e8       	ldi	r30, 0x80	; 128
    1b72:	f6 e0       	ldi	r31, 0x06	; 6
    1b74:	86 83       	std	Z+6, r24	; 0x06
    1b76:	63 e0       	ldi	r22, 0x03	; 3
    1b78:	85 e0       	ldi	r24, 0x05	; 5
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	cd df       	rcall	.-102    	; 0x1b18 <ht1632c_write_data>
    1b7e:	67 e0       	ldi	r22, 0x07	; 7
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	c9 df       	rcall	.-110    	; 0x1b18 <ht1632c_write_data>
    1b86:	c8 e6       	ldi	r28, 0x68	; 104
    1b88:	d9 e2       	ldi	r29, 0x29	; 41
    1b8a:	08 e8       	ldi	r16, 0x88	; 136
    1b8c:	19 e2       	ldi	r17, 0x29	; 41
    1b8e:	fe 01       	movw	r30, r28
    1b90:	31 97       	sbiw	r30, 0x01	; 1
    1b92:	80 81       	ld	r24, Z
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	98 2f       	mov	r25, r24
    1b98:	88 27       	eor	r24, r24
    1b9a:	28 81       	ld	r18, Y
    1b9c:	60 e1       	ldi	r22, 0x10	; 16
    1b9e:	82 2b       	or	r24, r18
    1ba0:	bb df       	rcall	.-138    	; 0x1b18 <ht1632c_write_data>
    1ba2:	22 96       	adiw	r28, 0x02	; 2
    1ba4:	c0 17       	cp	r28, r16
    1ba6:	d1 07       	cpc	r29, r17
    1ba8:	91 f7       	brne	.-28     	; 0x1b8e <ht1632c_refresh_screen+0x28>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	e0 e8       	ldi	r30, 0x80	; 128
    1bae:	f6 e0       	ldi	r31, 0x06	; 6
    1bb0:	85 83       	std	Z+5, r24	; 0x05
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	08 95       	ret

00001bbc <ht1632c_write_command>:
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	94 60       	ori	r25, 0x04	; 4
    1bc6:	c0 e8       	ldi	r28, 0x80	; 128
    1bc8:	d6 e0       	ldi	r29, 0x06	; 6
    1bca:	11 e0       	ldi	r17, 0x01	; 1
    1bcc:	1e 83       	std	Y+6, r17	; 0x06
    1bce:	6c e0       	ldi	r22, 0x0C	; 12
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	a1 df       	rcall	.-190    	; 0x1b18 <ht1632c_write_data>
    1bd6:	1d 83       	std	Y+5, r17	; 0x05
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	08 95       	ret

00001be0 <ht1632c_setup>:
    1be0:	cf 93       	push	r28
    1be2:	c8 2f       	mov	r28, r24
    1be4:	e0 e8       	ldi	r30, 0x80	; 128
    1be6:	f6 e0       	ldi	r31, 0x06	; 6
    1be8:	91 e0       	ldi	r25, 0x01	; 1
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	95 83       	std	Z+5, r25	; 0x05
    1bee:	94 e0       	ldi	r25, 0x04	; 4
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	95 83       	std	Z+5, r25	; 0x05
    1bf4:	88 e0       	ldi	r24, 0x08	; 8
    1bf6:	81 83       	std	Z+1, r24	; 0x01
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	e0 df       	rcall	.-64     	; 0x1bbc <ht1632c_write_command>
    1bfc:	83 e0       	ldi	r24, 0x03	; 3
    1bfe:	de df       	rcall	.-68     	; 0x1bbc <ht1632c_write_command>
    1c00:	88 e0       	ldi	r24, 0x08	; 8
    1c02:	dc df       	rcall	.-72     	; 0x1bbc <ht1632c_write_command>
    1c04:	84 e1       	ldi	r24, 0x14	; 20
    1c06:	da df       	rcall	.-76     	; 0x1bbc <ht1632c_write_command>
    1c08:	88 e1       	ldi	r24, 0x18	; 24
    1c0a:	d8 df       	rcall	.-80     	; 0x1bbc <ht1632c_write_command>
    1c0c:	8c 2f       	mov	r24, r28
    1c0e:	d6 df       	rcall	.-84     	; 0x1bbc <ht1632c_write_command>
    1c10:	81 ea       	ldi	r24, 0xA1	; 161
    1c12:	d4 df       	rcall	.-88     	; 0x1bbc <ht1632c_write_command>
    1c14:	cf 91       	pop	r28
    1c16:	08 95       	ret

00001c18 <ht1632c_set_brightness>:
}

void ht1632c_set_brightness(int8_t pwm) 
{
    1c18:	88 23       	and	r24, r24
    1c1a:	0c f4       	brge	.+2      	; 0x1c1e <ht1632c_set_brightness+0x6>
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	80 31       	cpi	r24, 0x10	; 16
    1c20:	0c f0       	brlt	.+2      	; 0x1c24 <ht1632c_set_brightness+0xc>
    1c22:	8f e0       	ldi	r24, 0x0F	; 15
		pwm = 15;	
	} else if (pwm < 0) {
		pwm = 0;
	}
	//env_variables.brightness = pwm;
	ht1632c_write_command(HT1632_PWM_CONTROL | pwm);
    1c24:	80 6a       	ori	r24, 0xA0	; 160
    1c26:	ca cf       	rjmp	.-108    	; 0x1bbc <ht1632c_write_command>
    1c28:	08 95       	ret

00001c2a <ht1632c_blink>:
}

void ht1632c_blink(bool blink_on) 
{
	if (blink_on) {
    1c2a:	88 23       	and	r24, r24
    1c2c:	19 f0       	breq	.+6      	; 0x1c34 <ht1632c_blink+0xa>
		ht1632c_write_command(HT1632_BLINK_ON);	
    1c2e:	89 e0       	ldi	r24, 0x09	; 9
    1c30:	c5 cf       	rjmp	.-118    	; 0x1bbc <ht1632c_write_command>
    1c32:	08 95       	ret
	} else {
		ht1632c_write_command(HT1632_BLINK_OFF);	
    1c34:	88 e0       	ldi	r24, 0x08	; 8
    1c36:	c2 cf       	rjmp	.-124    	; 0x1bbc <ht1632c_write_command>
    1c38:	08 95       	ret

00001c3a <ht1632c_shift_left>:
}


/*------------------------------SHIFT FUNCTIONS------------------------------*/

void ht1632c_shift_left(void) {
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	32 e0       	ldi	r19, 0x02	; 2
    1c40:	20 e0       	ldi	r18, 0x00	; 0
	
	int8_t i;
	
	for (i = 0; i <= 30; i += 2) {
		if (i == 14) {
			ledmatrix[14] = ledmatrix[1];
    1c42:	c5 e7       	ldi	r28, 0x75	; 117
    1c44:	d9 e2       	ldi	r29, 0x29	; 41
    1c46:	a8 e6       	ldi	r26, 0x68	; 104
    1c48:	b9 e2       	ldi	r27, 0x29	; 41
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <ht1632c_shift_left+0x16>
    1c4c:	2e 5f       	subi	r18, 0xFE	; 254
    1c4e:	3e 5f       	subi	r19, 0xFE	; 254
    1c50:	e2 2f       	mov	r30, r18
void ht1632c_shift_left(void) {
	
	int8_t i;
	
	for (i = 0; i <= 30; i += 2) {
		if (i == 14) {
    1c52:	2e 30       	cpi	r18, 0x0E	; 14
    1c54:	19 f4       	brne	.+6      	; 0x1c5c <ht1632c_shift_left+0x22>
			ledmatrix[14] = ledmatrix[1];
    1c56:	4c 91       	ld	r20, X
    1c58:	48 83       	st	Y, r20
    1c5a:	f8 cf       	rjmp	.-16     	; 0x1c4c <ht1632c_shift_left+0x12>
		} else if(i == 30) {
    1c5c:	2e 31       	cpi	r18, 0x1E	; 30
    1c5e:	29 f4       	brne	.+10     	; 0x1c6a <ht1632c_shift_left+0x30>
			ledmatrix[30] = ledmatrix[17];
    1c60:	80 91 78 29 	lds	r24, 0x2978
    1c64:	80 93 85 29 	sts	0x2985, r24
    1c68:	09 c0       	rjmp	.+18     	; 0x1c7c <ht1632c_shift_left+0x42>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    1c6a:	ff 27       	eor	r31, r31
    1c6c:	e7 fd       	sbrc	r30, 7
    1c6e:	f0 95       	com	r31
    1c70:	e9 59       	subi	r30, 0x99	; 153
    1c72:	f6 4d       	sbci	r31, 0xD6	; 214
    1c74:	42 81       	ldd	r20, Z+2	; 0x02
    1c76:	40 83       	st	Z, r20

void ht1632c_shift_left(void) {
	
	int8_t i;
	
	for (i = 0; i <= 30; i += 2) {
    1c78:	3f 31       	cpi	r19, 0x1F	; 31
    1c7a:	44 f3       	brlt	.-48     	; 0x1c4c <ht1632c_shift_left+0x12>
}


/*------------------------------SHIFT FUNCTIONS------------------------------*/

void ht1632c_shift_left(void) {
    1c7c:	93 e0       	ldi	r25, 0x03	; 3
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
		if (i == 15) {
			ledmatrix[15] = 0;
    1c80:	a6 e7       	ldi	r26, 0x76	; 118
    1c82:	b9 e2       	ldi	r27, 0x29	; 41
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <ht1632c_shift_left+0x50>
    1c86:	8e 5f       	subi	r24, 0xFE	; 254
    1c88:	9e 5f       	subi	r25, 0xFE	; 254
    1c8a:	e8 2f       	mov	r30, r24
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
		if (i == 15) {
    1c8c:	8f 30       	cpi	r24, 0x0F	; 15
    1c8e:	11 f4       	brne	.+4      	; 0x1c94 <ht1632c_shift_left+0x5a>
			ledmatrix[15] = 0;
    1c90:	1c 92       	st	X, r1
    1c92:	f9 cf       	rjmp	.-14     	; 0x1c86 <ht1632c_shift_left+0x4c>
		} else if (i == 31) {
    1c94:	8f 31       	cpi	r24, 0x1F	; 31
    1c96:	19 f4       	brne	.+6      	; 0x1c9e <ht1632c_shift_left+0x64>
			ledmatrix[31] = 0;
    1c98:	10 92 86 29 	sts	0x2986, r1
    1c9c:	09 c0       	rjmp	.+18     	; 0x1cb0 <ht1632c_shift_left+0x76>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    1c9e:	ff 27       	eor	r31, r31
    1ca0:	e7 fd       	sbrc	r30, 7
    1ca2:	f0 95       	com	r31
    1ca4:	e9 59       	subi	r30, 0x99	; 153
    1ca6:	f6 4d       	sbci	r31, 0xD6	; 214
    1ca8:	22 81       	ldd	r18, Z+2	; 0x02
    1caa:	20 83       	st	Z, r18
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
    1cac:	90 32       	cpi	r25, 0x20	; 32
    1cae:	5c f3       	brlt	.-42     	; 0x1c86 <ht1632c_shift_left+0x4c>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	display_refresh_screen();
    1cb0:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    1cb4:	2f ef       	ldi	r18, 0xFF	; 255
    1cb6:	89 ef       	ldi	r24, 0xF9	; 249
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	21 50       	subi	r18, 0x01	; 1
    1cbc:	80 40       	sbci	r24, 0x00	; 0
    1cbe:	90 40       	sbci	r25, 0x00	; 0
    1cc0:	e1 f7       	brne	.-8      	; 0x1cba <ht1632c_shift_left+0x80>
    1cc2:	00 c0       	rjmp	.+0      	; 0x1cc4 <ht1632c_shift_left+0x8a>
    1cc4:	00 00       	nop
	_delay_ms(10);
}
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	08 95       	ret

00001ccc <ht1632c_shift_right>:

void ht1632c_shift_right(void) {
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
    1cd0:	e6 e8       	ldi	r30, 0x86	; 134
    1cd2:	f9 e2       	ldi	r31, 0x29	; 41
    1cd4:	4d e1       	ldi	r20, 0x1D	; 29
	
	for (i = 31; i > 0; i -= 2) {
		if (i == 1) {
			ledmatrix[1] = ledmatrix[14];
		} else if(i == 17) {
			ledmatrix[17] = ledmatrix[30];
    1cd6:	28 e7       	ldi	r18, 0x78	; 120
    1cd8:	39 e2       	ldi	r19, 0x29	; 41
    1cda:	c5 e8       	ldi	r28, 0x85	; 133
    1cdc:	d9 e2       	ldi	r29, 0x29	; 41
    1cde:	09 c0       	rjmp	.+18     	; 0x1cf2 <ht1632c_shift_right+0x26>
    1ce0:	42 50       	subi	r20, 0x02	; 2
    1ce2:	32 97       	sbiw	r30, 0x02	; 2
void ht1632c_shift_right(void) {
	
	int8_t i;
	
	for (i = 31; i > 0; i -= 2) {
		if (i == 1) {
    1ce4:	4f 3f       	cpi	r20, 0xFF	; 255
    1ce6:	29 f4       	brne	.+10     	; 0x1cf2 <ht1632c_shift_right+0x26>
			ledmatrix[1] = ledmatrix[14];
    1ce8:	80 91 75 29 	lds	r24, 0x2975
    1cec:	80 93 68 29 	sts	0x2968, r24
    1cf0:	0c c0       	rjmp	.+24     	; 0x1d0a <ht1632c_shift_right+0x3e>
		} else if(i == 17) {
    1cf2:	4f 30       	cpi	r20, 0x0F	; 15
    1cf4:	21 f4       	brne	.+8      	; 0x1cfe <ht1632c_shift_right+0x32>
			ledmatrix[17] = ledmatrix[30];
    1cf6:	58 81       	ld	r21, Y
    1cf8:	d9 01       	movw	r26, r18
    1cfa:	5c 93       	st	X, r21
    1cfc:	f1 cf       	rjmp	.-30     	; 0x1ce0 <ht1632c_shift_right+0x14>
    1cfe:	df 01       	movw	r26, r30
    1d00:	12 97       	sbiw	r26, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i-2];
    1d02:	5c 91       	ld	r21, X
    1d04:	50 83       	st	Z, r21

void ht1632c_shift_right(void) {
	
	int8_t i;
	
	for (i = 31; i > 0; i -= 2) {
    1d06:	14 16       	cp	r1, r20
    1d08:	5c f3       	brlt	.-42     	; 0x1ce0 <ht1632c_shift_right+0x14>
    1d0a:	e5 e8       	ldi	r30, 0x85	; 133
    1d0c:	f9 e2       	ldi	r31, 0x29	; 41
	
	display_refresh_screen();
	_delay_ms(10);
}

void ht1632c_shift_right(void) {
    1d0e:	2c e1       	ldi	r18, 0x1C	; 28
	}
	for (i = 30; i >= 0; i -= 2) {
		if (i == 0) {
			ledmatrix[0] = 0;
		} else if(i == 16) {
			ledmatrix[16] = 0;
    1d10:	c7 e7       	ldi	r28, 0x77	; 119
    1d12:	d9 e2       	ldi	r29, 0x29	; 41
    1d14:	07 c0       	rjmp	.+14     	; 0x1d24 <ht1632c_shift_right+0x58>
    1d16:	22 50       	subi	r18, 0x02	; 2
    1d18:	32 97       	sbiw	r30, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	for (i = 30; i >= 0; i -= 2) {
		if (i == 0) {
    1d1a:	2e 3f       	cpi	r18, 0xFE	; 254
    1d1c:	19 f4       	brne	.+6      	; 0x1d24 <ht1632c_shift_right+0x58>
			ledmatrix[0] = 0;
    1d1e:	10 92 67 29 	sts	0x2967, r1
    1d22:	0a c0       	rjmp	.+20     	; 0x1d38 <ht1632c_shift_right+0x6c>
		} else if(i == 16) {
    1d24:	2e 30       	cpi	r18, 0x0E	; 14
    1d26:	11 f4       	brne	.+4      	; 0x1d2c <ht1632c_shift_right+0x60>
			ledmatrix[16] = 0;
    1d28:	18 82       	st	Y, r1
    1d2a:	f5 cf       	rjmp	.-22     	; 0x1d16 <ht1632c_shift_right+0x4a>
    1d2c:	df 01       	movw	r26, r30
    1d2e:	12 97       	sbiw	r26, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i-2];
    1d30:	3c 91       	ld	r19, X
    1d32:	30 83       	st	Z, r19
			ledmatrix[17] = ledmatrix[30];
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	for (i = 30; i >= 0; i -= 2) {
    1d34:	22 23       	and	r18, r18
    1d36:	7c f7       	brge	.-34     	; 0x1d16 <ht1632c_shift_right+0x4a>
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	
	display_refresh_screen();
    1d38:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    1d3c:	bf ef       	ldi	r27, 0xFF	; 255
    1d3e:	29 ef       	ldi	r18, 0xF9	; 249
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	b1 50       	subi	r27, 0x01	; 1
    1d44:	20 40       	sbci	r18, 0x00	; 0
    1d46:	80 40       	sbci	r24, 0x00	; 0
    1d48:	e1 f7       	brne	.-8      	; 0x1d42 <ht1632c_shift_right+0x76>
    1d4a:	00 c0       	rjmp	.+0      	; 0x1d4c <ht1632c_shift_right+0x80>
    1d4c:	00 00       	nop
	_delay_ms(10);
	
}
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	08 95       	ret

00001d54 <ht1632c_shift_up>:

void ht1632c_shift_up(void) {
    1d54:	a7 e6       	ldi	r26, 0x67	; 103
    1d56:	b9 e2       	ldi	r27, 0x29	; 41
    1d58:	e7 e7       	ldi	r30, 0x77	; 119
    1d5a:	f9 e2       	ldi	r31, 0x29	; 41
    1d5c:	26 e8       	ldi	r18, 0x86	; 134
    1d5e:	39 e2       	ldi	r19, 0x29	; 41
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
		temp_top = ledmatrix[i];
		temp_bottom = ledmatrix[i+16];
		temp = (temp_top << 8) | (temp_bottom);
    1d60:	8c 91       	ld	r24, X
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	98 2f       	mov	r25, r24
    1d66:	88 27       	eor	r24, r24
    1d68:	40 81       	ld	r20, Z
    1d6a:	84 2b       	or	r24, r20
		temp <<= 1;
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
		ledmatrix[i] = (temp >> 8);
    1d70:	9d 93       	st	X+, r25
		ledmatrix[i+16] = temp;
    1d72:	81 93       	st	Z+, r24
	uint8_t temp_bottom;
	uint16_t temp;
	
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
    1d74:	e2 17       	cp	r30, r18
    1d76:	f3 07       	cpc	r31, r19
    1d78:	99 f7       	brne	.-26     	; 0x1d60 <ht1632c_shift_up+0xc>
		temp <<= 1;
		ledmatrix[i] = (temp >> 8);
		ledmatrix[i+16] = temp;
	}
	
	display_refresh_screen();
    1d7a:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    1d7e:	2f ef       	ldi	r18, 0xFF	; 255
    1d80:	89 ef       	ldi	r24, 0xF9	; 249
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	21 50       	subi	r18, 0x01	; 1
    1d86:	80 40       	sbci	r24, 0x00	; 0
    1d88:	90 40       	sbci	r25, 0x00	; 0
    1d8a:	e1 f7       	brne	.-8      	; 0x1d84 <ht1632c_shift_up+0x30>
    1d8c:	00 c0       	rjmp	.+0      	; 0x1d8e <ht1632c_shift_up+0x3a>
    1d8e:	00 00       	nop
    1d90:	08 95       	ret

00001d92 <ht1632c_shift_down>:
	_delay_ms(10);
}

void ht1632c_shift_down(void) {
    1d92:	a7 e6       	ldi	r26, 0x67	; 103
    1d94:	b9 e2       	ldi	r27, 0x29	; 41
    1d96:	e7 e7       	ldi	r30, 0x77	; 119
    1d98:	f9 e2       	ldi	r31, 0x29	; 41
    1d9a:	26 e8       	ldi	r18, 0x86	; 134
    1d9c:	39 e2       	ldi	r19, 0x29	; 41
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
		temp_top = ledmatrix[i];
		temp_bottom = ledmatrix[i+16];
		temp = (temp_top << 8) | (temp_bottom);
    1d9e:	8c 91       	ld	r24, X
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	98 2f       	mov	r25, r24
    1da4:	88 27       	eor	r24, r24
    1da6:	40 81       	ld	r20, Z
    1da8:	84 2b       	or	r24, r20
		temp >>= 1;
    1daa:	96 95       	lsr	r25
    1dac:	87 95       	ror	r24
		ledmatrix[i] = (temp >> 8);
    1dae:	9d 93       	st	X+, r25
		ledmatrix[i+16] = temp;
    1db0:	81 93       	st	Z+, r24
	uint8_t temp_bottom;
	uint16_t temp;
	
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
    1db2:	e2 17       	cp	r30, r18
    1db4:	f3 07       	cpc	r31, r19
    1db6:	99 f7       	brne	.-26     	; 0x1d9e <ht1632c_shift_down+0xc>
		temp >>= 1;
		ledmatrix[i] = (temp >> 8);
		ledmatrix[i+16] = temp;
	}
	
	display_refresh_screen();
    1db8:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    1dbc:	2f ef       	ldi	r18, 0xFF	; 255
    1dbe:	89 ef       	ldi	r24, 0xF9	; 249
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	21 50       	subi	r18, 0x01	; 1
    1dc4:	80 40       	sbci	r24, 0x00	; 0
    1dc6:	90 40       	sbci	r25, 0x00	; 0
    1dc8:	e1 f7       	brne	.-8      	; 0x1dc2 <ht1632c_shift_down+0x30>
    1dca:	00 c0       	rjmp	.+0      	; 0x1dcc <ht1632c_shift_down+0x3a>
    1dcc:	00 00       	nop
    1dce:	08 95       	ret

00001dd0 <ht1632c_slide_in_from_left>:
	_delay_ms(10);
}

/*------------------------------SLIDE FUNCTIONS------------------------------*/

void ht1632c_slide_in_from_left(void) {
    1dd0:	8f 92       	push	r8
    1dd2:	9f 92       	push	r9
    1dd4:	af 92       	push	r10
    1dd6:	bf 92       	push	r11
    1dd8:	cf 92       	push	r12
    1dda:	df 92       	push	r13
    1ddc:	ef 92       	push	r14
    1dde:	ff 92       	push	r15
    1de0:	0f 93       	push	r16
    1de2:	1f 93       	push	r17
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	a0 97       	sbiw	r28, 0x20	; 32
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	de bf       	out	0x3e, r29	; 62
	
	uint8_t temp[32];
	
	memset(temp,0,32);
    1df2:	20 e2       	ldi	r18, 0x20	; 32
    1df4:	ce 01       	movw	r24, r28
    1df6:	01 96       	adiw	r24, 0x01	; 1
    1df8:	dc 01       	movw	r26, r24
    1dfa:	e2 2f       	mov	r30, r18
    1dfc:	1d 92       	st	X+, r1
    1dfe:	ea 95       	dec	r30
    1e00:	e9 f7       	brne	.-6      	; 0x1dfc <ht1632c_slide_in_from_left+0x2c>
	memcpy(temp,ledmatrix,32);
    1e02:	30 e2       	ldi	r19, 0x20	; 32
    1e04:	e7 e6       	ldi	r30, 0x67	; 103
    1e06:	f9 e2       	ldi	r31, 0x29	; 41
    1e08:	dc 01       	movw	r26, r24
    1e0a:	01 90       	ld	r0, Z+
    1e0c:	0d 92       	st	X+, r0
    1e0e:	3a 95       	dec	r19
    1e10:	e1 f7       	brne	.-8      	; 0x1e0a <ht1632c_slide_in_from_left+0x3a>
	memset(ledmatrix,0,32);
    1e12:	e7 e6       	ldi	r30, 0x67	; 103
    1e14:	f9 e2       	ldi	r31, 0x29	; 41
    1e16:	df 01       	movw	r26, r30
    1e18:	1d 92       	st	X+, r1
    1e1a:	2a 95       	dec	r18
    1e1c:	e9 f7       	brne	.-6      	; 0x1e18 <ht1632c_slide_in_from_left+0x48>
    1e1e:	8e 01       	movw	r16, r28
    1e20:	00 5e       	subi	r16, 0xE0	; 224
    1e22:	1f 4f       	sbci	r17, 0xFF	; 255
    1e24:	5c 01       	movw	r10, r24
    1e26:	4e 01       	movw	r8, r28
    1e28:	b0 e1       	ldi	r27, 0x10	; 16
    1e2a:	8b 0e       	add	r8, r27
    1e2c:	91 1c       	adc	r9, r1
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2)
	{
		ledmatrix[0] = temp[i-16];
    1e2e:	6f 01       	movw	r12, r30
		ledmatrix[16] = temp[i];
    1e30:	0f 2e       	mov	r0, r31
    1e32:	f7 e7       	ldi	r31, 0x77	; 119
    1e34:	ef 2e       	mov	r14, r31
    1e36:	f9 e2       	ldi	r31, 0x29	; 41
    1e38:	ff 2e       	mov	r15, r31
    1e3a:	f0 2d       	mov	r31, r0
    1e3c:	f8 01       	movw	r30, r16
    1e3e:	70 97       	sbiw	r30, 0x10	; 16
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2)
	{
		ledmatrix[0] = temp[i-16];
    1e40:	80 81       	ld	r24, Z
    1e42:	f6 01       	movw	r30, r12
    1e44:	80 83       	st	Z, r24
		ledmatrix[16] = temp[i];
    1e46:	d8 01       	movw	r26, r16
    1e48:	8c 91       	ld	r24, X
    1e4a:	f7 01       	movw	r30, r14
    1e4c:	80 83       	st	Z, r24
		ht1632c_shift_right();
    1e4e:	3e df       	rcall	.-388    	; 0x1ccc <ht1632c_shift_right>
    1e50:	02 50       	subi	r16, 0x02	; 2
    1e52:	11 09       	sbc	r17, r1
	memcpy(temp,ledmatrix,32);
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2)
    1e54:	08 15       	cp	r16, r8
    1e56:	19 05       	cpc	r17, r9
    1e58:	89 f7       	brne	.-30     	; 0x1e3c <ht1632c_slide_in_from_left+0x6c>
    1e5a:	13 c0       	rjmp	.+38     	; 0x1e82 <ht1632c_slide_in_from_left+0xb2>
	for (i = 30; i >= 16; i -= 2)
	{
		ledmatrix[0] = temp[i-16];
		ledmatrix[16] = temp[i];
		if (i == 16) {
			display_refresh_screen();
    1e5c:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    1e60:	29 c0       	rjmp	.+82     	; 0x1eb4 <ht1632c_slide_in_from_left+0xe4>
			} else {
			ht1632c_shift_right();
    1e62:	34 df       	rcall	.-408    	; 0x1ccc <ht1632c_shift_right>
    1e64:	f8 01       	movw	r30, r16
    1e66:	70 97       	sbiw	r30, 0x10	; 16
	}
	
	//TODO: This should really be 16
	for (i = 30; i >= 16; i -= 2)
	{
		ledmatrix[0] = temp[i-16];
    1e68:	80 81       	ld	r24, Z
    1e6a:	d6 01       	movw	r26, r12
    1e6c:	8c 93       	st	X, r24
		ledmatrix[16] = temp[i];
    1e6e:	f8 01       	movw	r30, r16
    1e70:	80 81       	ld	r24, Z
    1e72:	d7 01       	movw	r26, r14
    1e74:	8c 93       	st	X, r24
    1e76:	02 50       	subi	r16, 0x02	; 2
    1e78:	11 09       	sbc	r17, r1
		if (i == 16) {
    1e7a:	0a 15       	cp	r16, r10
    1e7c:	1b 05       	cpc	r17, r11
    1e7e:	89 f7       	brne	.-30     	; 0x1e62 <ht1632c_slide_in_from_left+0x92>
    1e80:	ed cf       	rjmp	.-38     	; 0x1e5c <ht1632c_slide_in_from_left+0x8c>
	}
	
	//TODO: This should really be 16
	for (i = 30; i >= 16; i -= 2)
	{
		ledmatrix[0] = temp[i-16];
    1e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e84:	80 93 67 29 	sts	0x2967, r24
		ledmatrix[16] = temp[i];
    1e88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e8a:	80 93 77 29 	sts	0x2977, r24
    1e8e:	8e 01       	movw	r16, r28
    1e90:	03 5e       	subi	r16, 0xE3	; 227
    1e92:	1f 4f       	sbci	r17, 0xFF	; 255
    1e94:	be e0       	ldi	r27, 0x0E	; 14
    1e96:	ab 0e       	add	r10, r27
    1e98:	b1 1c       	adc	r11, r1
	}
	
	//TODO: This should really be 16
	for (i = 30; i >= 16; i -= 2)
	{
		ledmatrix[0] = temp[i-16];
    1e9a:	0f 2e       	mov	r0, r31
    1e9c:	f7 e6       	ldi	r31, 0x67	; 103
    1e9e:	cf 2e       	mov	r12, r31
    1ea0:	f9 e2       	ldi	r31, 0x29	; 41
    1ea2:	df 2e       	mov	r13, r31
    1ea4:	f0 2d       	mov	r31, r0
		ledmatrix[16] = temp[i];
    1ea6:	0f 2e       	mov	r0, r31
    1ea8:	f7 e7       	ldi	r31, 0x77	; 119
    1eaa:	ef 2e       	mov	r14, r31
    1eac:	f9 e2       	ldi	r31, 0x29	; 41
    1eae:	ff 2e       	mov	r15, r31
    1eb0:	f0 2d       	mov	r31, r0
    1eb2:	d7 cf       	rjmp	.-82     	; 0x1e62 <ht1632c_slide_in_from_left+0x92>
			display_refresh_screen();
			} else {
			ht1632c_shift_right();
		}
	}
}
    1eb4:	a0 96       	adiw	r28, 0x20	; 32
    1eb6:	cd bf       	out	0x3d, r28	; 61
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	1f 91       	pop	r17
    1ec0:	0f 91       	pop	r16
    1ec2:	ff 90       	pop	r15
    1ec4:	ef 90       	pop	r14
    1ec6:	df 90       	pop	r13
    1ec8:	cf 90       	pop	r12
    1eca:	bf 90       	pop	r11
    1ecc:	af 90       	pop	r10
    1ece:	9f 90       	pop	r9
    1ed0:	8f 90       	pop	r8
    1ed2:	08 95       	ret

00001ed4 <ht1632c_slide_in_from_right>:

void ht1632c_slide_in_from_right(void) {
    1ed4:	8f 92       	push	r8
    1ed6:	9f 92       	push	r9
    1ed8:	af 92       	push	r10
    1eda:	bf 92       	push	r11
    1edc:	cf 92       	push	r12
    1ede:	df 92       	push	r13
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
    1ef0:	a0 97       	sbiw	r28, 0x20	; 32
    1ef2:	cd bf       	out	0x3d, r28	; 61
    1ef4:	de bf       	out	0x3e, r29	; 62
	
	uint8_t temp[32];
	
	memset(temp,0,32);
    1ef6:	20 e2       	ldi	r18, 0x20	; 32
    1ef8:	ce 01       	movw	r24, r28
    1efa:	01 96       	adiw	r24, 0x01	; 1
    1efc:	dc 01       	movw	r26, r24
    1efe:	e2 2f       	mov	r30, r18
    1f00:	1d 92       	st	X+, r1
    1f02:	ea 95       	dec	r30
    1f04:	e9 f7       	brne	.-6      	; 0x1f00 <ht1632c_slide_in_from_right+0x2c>
	memcpy(temp,ledmatrix,32);
    1f06:	30 e2       	ldi	r19, 0x20	; 32
    1f08:	e7 e6       	ldi	r30, 0x67	; 103
    1f0a:	f9 e2       	ldi	r31, 0x29	; 41
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	01 90       	ld	r0, Z+
    1f10:	0d 92       	st	X+, r0
    1f12:	3a 95       	dec	r19
    1f14:	e1 f7       	brne	.-8      	; 0x1f0e <ht1632c_slide_in_from_right+0x3a>
	memset(ledmatrix,0,32);
    1f16:	e7 e6       	ldi	r30, 0x67	; 103
    1f18:	f9 e2       	ldi	r31, 0x29	; 41
    1f1a:	df 01       	movw	r26, r30
    1f1c:	1d 92       	st	X+, r1
    1f1e:	2a 95       	dec	r18
    1f20:	e9 f7       	brne	.-6      	; 0x1f1c <ht1632c_slide_in_from_right+0x48>
    1f22:	8e 01       	movw	r16, r28
    1f24:	0f 5e       	subi	r16, 0xEF	; 239
    1f26:	1f 4f       	sbci	r17, 0xFF	; 255
    1f28:	5c 01       	movw	r10, r24
    1f2a:	4e 01       	movw	r8, r28
    1f2c:	b1 e2       	ldi	r27, 0x21	; 33
    1f2e:	8b 0e       	add	r8, r27
    1f30:	91 1c       	adc	r9, r1
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
	{
		ht1632c_shift_left();
		ledmatrix[15] = temp[i];
    1f32:	0f 2e       	mov	r0, r31
    1f34:	f6 e7       	ldi	r31, 0x76	; 118
    1f36:	cf 2e       	mov	r12, r31
    1f38:	f9 e2       	ldi	r31, 0x29	; 41
    1f3a:	df 2e       	mov	r13, r31
    1f3c:	f0 2d       	mov	r31, r0
		ledmatrix[31] = temp[i+16];
    1f3e:	0f 2e       	mov	r0, r31
    1f40:	f6 e8       	ldi	r31, 0x86	; 134
    1f42:	ef 2e       	mov	r14, r31
    1f44:	f9 e2       	ldi	r31, 0x29	; 41
    1f46:	ff 2e       	mov	r15, r31
    1f48:	f0 2d       	mov	r31, r0
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
	{
		ht1632c_shift_left();
    1f4a:	77 de       	rcall	.-786    	; 0x1c3a <ht1632c_shift_left>
    1f4c:	f8 01       	movw	r30, r16
    1f4e:	70 97       	sbiw	r30, 0x10	; 16
		ledmatrix[15] = temp[i];
    1f50:	80 81       	ld	r24, Z
    1f52:	f6 01       	movw	r30, r12
    1f54:	80 83       	st	Z, r24
		ledmatrix[31] = temp[i+16];
    1f56:	d8 01       	movw	r26, r16
    1f58:	8c 91       	ld	r24, X
    1f5a:	f7 01       	movw	r30, r14
    1f5c:	80 83       	st	Z, r24
    1f5e:	0e 5f       	subi	r16, 0xFE	; 254
    1f60:	1f 4f       	sbci	r17, 0xFF	; 255
	memcpy(temp,ledmatrix,32);
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
    1f62:	08 15       	cp	r16, r8
    1f64:	19 05       	cpc	r17, r9
    1f66:	89 f7       	brne	.-30     	; 0x1f4a <ht1632c_slide_in_from_right+0x76>
    1f68:	8e 01       	movw	r16, r28
    1f6a:	0e 5e       	subi	r16, 0xEE	; 238
    1f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6e:	f1 e2       	ldi	r31, 0x21	; 33
    1f70:	af 0e       	add	r10, r31
    1f72:	b1 1c       	adc	r11, r1
	//This should be 15, not 13
	for (i = 1; i <= 15; i += 2)
	{
		//Alignment hack
		ht1632c_shift_left();
		ledmatrix[15] = temp[i];
    1f74:	0f 2e       	mov	r0, r31
    1f76:	f6 e7       	ldi	r31, 0x76	; 118
    1f78:	cf 2e       	mov	r12, r31
    1f7a:	f9 e2       	ldi	r31, 0x29	; 41
    1f7c:	df 2e       	mov	r13, r31
    1f7e:	f0 2d       	mov	r31, r0
		ledmatrix[31] = temp[i+16];
    1f80:	0f 2e       	mov	r0, r31
    1f82:	f6 e8       	ldi	r31, 0x86	; 134
    1f84:	ef 2e       	mov	r14, r31
    1f86:	f9 e2       	ldi	r31, 0x29	; 41
    1f88:	ff 2e       	mov	r15, r31
    1f8a:	f0 2d       	mov	r31, r0
	
	//This should be 15, not 13
	for (i = 1; i <= 15; i += 2)
	{
		//Alignment hack
		ht1632c_shift_left();
    1f8c:	56 de       	rcall	.-852    	; 0x1c3a <ht1632c_shift_left>
    1f8e:	f8 01       	movw	r30, r16
    1f90:	70 97       	sbiw	r30, 0x10	; 16
		ledmatrix[15] = temp[i];
    1f92:	80 81       	ld	r24, Z
    1f94:	d6 01       	movw	r26, r12
    1f96:	8c 93       	st	X, r24
		ledmatrix[31] = temp[i+16];
    1f98:	f8 01       	movw	r30, r16
    1f9a:	80 81       	ld	r24, Z
    1f9c:	d7 01       	movw	r26, r14
    1f9e:	8c 93       	st	X, r24
    1fa0:	0e 5f       	subi	r16, 0xFE	; 254
    1fa2:	1f 4f       	sbci	r17, 0xFF	; 255
		ledmatrix[15] = temp[i];
		ledmatrix[31] = temp[i+16];
	}
	
	//This should be 15, not 13
	for (i = 1; i <= 15; i += 2)
    1fa4:	0a 15       	cp	r16, r10
    1fa6:	1b 05       	cpc	r17, r11
    1fa8:	89 f7       	brne	.-30     	; 0x1f8c <ht1632c_slide_in_from_right+0xb8>
		//Alignment hack
		ht1632c_shift_left();
		ledmatrix[15] = temp[i];
		ledmatrix[31] = temp[i+16];
	}
}
    1faa:	a0 96       	adiw	r28, 0x20	; 32
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	df 91       	pop	r29
    1fb2:	cf 91       	pop	r28
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	ff 90       	pop	r15
    1fba:	ef 90       	pop	r14
    1fbc:	df 90       	pop	r13
    1fbe:	cf 90       	pop	r12
    1fc0:	bf 90       	pop	r11
    1fc2:	af 90       	pop	r10
    1fc4:	9f 90       	pop	r9
    1fc6:	8f 90       	pop	r8
    1fc8:	08 95       	ret

00001fca <ht1632c_slide_in_from_bottom>:

void ht1632c_slide_in_from_bottom(void) {
    1fca:	2f 92       	push	r2
    1fcc:	3f 92       	push	r3
    1fce:	4f 92       	push	r4
    1fd0:	5f 92       	push	r5
    1fd2:	6f 92       	push	r6
    1fd4:	7f 92       	push	r7
    1fd6:	8f 92       	push	r8
    1fd8:	9f 92       	push	r9
    1fda:	af 92       	push	r10
    1fdc:	bf 92       	push	r11
    1fde:	cf 92       	push	r12
    1fe0:	df 92       	push	r13
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	a2 97       	sbiw	r28, 0x22	; 34
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	de bf       	out	0x3e, r29	; 62
	
	uint8_t temp[32];
	
	memset(temp,0,32);
    1ff8:	80 e2       	ldi	r24, 0x20	; 32
    1ffa:	de 01       	movw	r26, r28
    1ffc:	11 96       	adiw	r26, 0x01	; 1
    1ffe:	fd 01       	movw	r30, r26
    2000:	98 2f       	mov	r25, r24
    2002:	11 92       	st	Z+, r1
    2004:	9a 95       	dec	r25
    2006:	e9 f7       	brne	.-6      	; 0x2002 <ht1632c_slide_in_from_bottom+0x38>
	memcpy(temp,ledmatrix,32);
    2008:	90 e2       	ldi	r25, 0x20	; 32
    200a:	e7 e6       	ldi	r30, 0x67	; 103
    200c:	f9 e2       	ldi	r31, 0x29	; 41
    200e:	01 90       	ld	r0, Z+
    2010:	0d 92       	st	X+, r0
    2012:	9a 95       	dec	r25
    2014:	e1 f7       	brne	.-8      	; 0x200e <ht1632c_slide_in_from_bottom+0x44>
	memset(ledmatrix,0,32);
    2016:	e7 e6       	ldi	r30, 0x67	; 103
    2018:	f9 e2       	ldi	r31, 0x29	; 41
    201a:	df 01       	movw	r26, r30
    201c:	1d 92       	st	X+, r1
    201e:	8a 95       	dec	r24
    2020:	e9 f7       	brne	.-6      	; 0x201c <ht1632c_slide_in_from_bottom+0x52>
    2022:	e1 2c       	mov	r14, r1
    2024:	f1 2c       	mov	r15, r1
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
			if (row < 8) {
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
    2026:	68 94       	set
    2028:	88 24       	eor	r8, r8
    202a:	87 f8       	bld	r8, 7
    202c:	91 2c       	mov	r9, r1
    202e:	0f 2e       	mov	r0, r31
    2030:	f7 e7       	ldi	r31, 0x77	; 119
    2032:	2f 2e       	mov	r2, r31
    2034:	f9 e2       	ldi	r31, 0x29	; 41
    2036:	3f 2e       	mov	r3, r31
    2038:	f0 2d       	mov	r31, r0
    203a:	06 e8       	ldi	r16, 0x86	; 134
    203c:	19 e2       	ldi	r17, 0x29	; 41
    203e:	0f 2e       	mov	r0, r31
    2040:	ff e0       	ldi	r31, 0x0F	; 15
    2042:	6f 2e       	mov	r6, r31
    2044:	71 2c       	mov	r7, r1
    2046:	f0 2d       	mov	r31, r0
    2048:	0f 2e       	mov	r0, r31
    204a:	f7 e0       	ldi	r31, 0x07	; 7
    204c:	4f 2e       	mov	r4, r31
    204e:	51 2c       	mov	r5, r1
    2050:	f0 2d       	mov	r31, r0
    2052:	3a c0       	rjmp	.+116    	; 0x20c8 <ht1632c_slide_in_from_bottom+0xfe>
    2054:	32 2f       	mov	r19, r18
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
			if (row < 8) {
    2056:	28 30       	cpi	r18, 0x08	; 8
    2058:	90 f4       	brcc	.+36     	; 0x207e <ht1632c_slide_in_from_bottom+0xb4>
    205a:	89 a1       	ldd	r24, Y+33	; 0x21
    205c:	9a a1       	ldd	r25, Y+34	; 0x22
    205e:	40 97       	sbiw	r24, 0x10	; 16
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
    2060:	dc 01       	movw	r26, r24
    2062:	8c 91       	ld	r24, X
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	86 23       	and	r24, r22
    2068:	97 23       	and	r25, r23
    206a:	0a 2c       	mov	r0, r10
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <ht1632c_slide_in_from_bottom+0xa8>
    206e:	95 95       	asr	r25
    2070:	87 95       	ror	r24
    2072:	0a 94       	dec	r0
    2074:	e2 f7       	brpl	.-8      	; 0x206e <ht1632c_slide_in_from_bottom+0xa4>
    2076:	90 81       	ld	r25, Z
    2078:	89 2b       	or	r24, r25
    207a:	80 83       	st	Z, r24
    207c:	0f c0       	rjmp	.+30     	; 0x209c <ht1632c_slide_in_from_bottom+0xd2>
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
    207e:	a9 a1       	ldd	r26, Y+33	; 0x21
    2080:	ba a1       	ldd	r27, Y+34	; 0x22
    2082:	8c 91       	ld	r24, X
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	84 23       	and	r24, r20
    2088:	95 23       	and	r25, r21
    208a:	0c 2c       	mov	r0, r12
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <ht1632c_slide_in_from_bottom+0xc8>
    208e:	95 95       	asr	r25
    2090:	87 95       	ror	r24
    2092:	0a 94       	dec	r0
    2094:	e2 f7       	brpl	.-8      	; 0x208e <ht1632c_slide_in_from_bottom+0xc4>
    2096:	90 81       	ld	r25, Z
    2098:	89 2b       	or	r24, r25
    209a:	80 83       	st	Z, r24
    209c:	31 96       	adiw	r30, 0x01	; 1
    209e:	89 a1       	ldd	r24, Y+33	; 0x21
    20a0:	9a a1       	ldd	r25, Y+34	; 0x22
    20a2:	01 96       	adiw	r24, 0x01	; 1
    20a4:	89 a3       	std	Y+33, r24	; 0x21
    20a6:	9a a3       	std	Y+34, r25	; 0x22
	
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
    20a8:	e0 17       	cp	r30, r16
    20aa:	f1 07       	cpc	r31, r17
    20ac:	99 f6       	brne	.-90     	; 0x2054 <ht1632c_slide_in_from_bottom+0x8a>
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
			}
		}
		if (row < 15) {
    20ae:	3f 30       	cpi	r19, 0x0F	; 15
    20b0:	10 f4       	brcc	.+4      	; 0x20b6 <ht1632c_slide_in_from_bottom+0xec>
			ht1632c_shift_up();
    20b2:	50 de       	rcall	.-864    	; 0x1d54 <ht1632c_shift_up>
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <ht1632c_slide_in_from_bottom+0xf0>
			} else {
			display_refresh_screen();
    20b6:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    20ba:	9f ef       	ldi	r25, 0xFF	; 255
    20bc:	e9 1a       	sub	r14, r25
    20be:	f9 0a       	sbc	r15, r25
	memset(ledmatrix,0,32);
	
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
    20c0:	a0 e1       	ldi	r26, 0x10	; 16
    20c2:	ea 16       	cp	r14, r26
    20c4:	f1 04       	cpc	r15, r1
    20c6:	f1 f0       	breq	.+60     	; 0x2104 <ht1632c_slide_in_from_bottom+0x13a>
		for (col = 0; col < 15; col++) {
			if (row < 8) {
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
    20c8:	b4 01       	movw	r22, r8
    20ca:	0e 2c       	mov	r0, r14
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <ht1632c_slide_in_from_bottom+0x108>
    20ce:	75 95       	asr	r23
    20d0:	67 95       	ror	r22
    20d2:	0a 94       	dec	r0
    20d4:	e2 f7       	brpl	.-8      	; 0x20ce <ht1632c_slide_in_from_bottom+0x104>
    20d6:	a7 01       	movw	r20, r14
    20d8:	48 50       	subi	r20, 0x08	; 8
    20da:	51 09       	sbc	r21, r1
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
    20dc:	f4 01       	movw	r30, r8
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <ht1632c_slide_in_from_bottom+0x11a>
    20e0:	f5 95       	asr	r31
    20e2:	e7 95       	ror	r30
    20e4:	4a 95       	dec	r20
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <ht1632c_slide_in_from_bottom+0x116>
    20e8:	af 01       	movw	r20, r30
    20ea:	f1 01       	movw	r30, r2
    20ec:	ce 01       	movw	r24, r28
    20ee:	41 96       	adiw	r24, 0x11	; 17
    20f0:	89 a3       	std	Y+33, r24	; 0x21
    20f2:	9a a3       	std	Y+34, r25	; 0x22
    20f4:	2e 2d       	mov	r18, r14
    20f6:	63 01       	movw	r12, r6
    20f8:	ce 18       	sub	r12, r14
    20fa:	df 08       	sbc	r13, r15
    20fc:	52 01       	movw	r10, r4
    20fe:	ae 18       	sub	r10, r14
    2100:	bf 08       	sbc	r11, r15
    2102:	a8 cf       	rjmp	.-176    	; 0x2054 <ht1632c_slide_in_from_bottom+0x8a>
			ht1632c_shift_up();
			} else {
			display_refresh_screen();
		}
	}
}
    2104:	a2 96       	adiw	r28, 0x22	; 34
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	1f 91       	pop	r17
    2110:	0f 91       	pop	r16
    2112:	ff 90       	pop	r15
    2114:	ef 90       	pop	r14
    2116:	df 90       	pop	r13
    2118:	cf 90       	pop	r12
    211a:	bf 90       	pop	r11
    211c:	af 90       	pop	r10
    211e:	9f 90       	pop	r9
    2120:	8f 90       	pop	r8
    2122:	7f 90       	pop	r7
    2124:	6f 90       	pop	r6
    2126:	5f 90       	pop	r5
    2128:	4f 90       	pop	r4
    212a:	3f 90       	pop	r3
    212c:	2f 90       	pop	r2
    212e:	08 95       	ret

00002130 <ht1632c_slide_in_from_top>:

void ht1632c_slide_in_from_top(void) {
    2130:	2f 92       	push	r2
    2132:	3f 92       	push	r3
    2134:	4f 92       	push	r4
    2136:	5f 92       	push	r5
    2138:	6f 92       	push	r6
    213a:	7f 92       	push	r7
    213c:	8f 92       	push	r8
    213e:	9f 92       	push	r9
    2140:	bf 92       	push	r11
    2142:	cf 92       	push	r12
    2144:	ef 92       	push	r14
    2146:	ff 92       	push	r15
    2148:	0f 93       	push	r16
    214a:	1f 93       	push	r17
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	cd b7       	in	r28, 0x3d	; 61
    2152:	de b7       	in	r29, 0x3e	; 62
    2154:	a4 97       	sbiw	r28, 0x24	; 36
    2156:	cd bf       	out	0x3d, r28	; 61
    2158:	de bf       	out	0x3e, r29	; 62

	uint8_t temp[32];
	
	memset(temp,0,32);
    215a:	80 e2       	ldi	r24, 0x20	; 32
    215c:	de 01       	movw	r26, r28
    215e:	11 96       	adiw	r26, 0x01	; 1
    2160:	fd 01       	movw	r30, r26
    2162:	98 2f       	mov	r25, r24
    2164:	11 92       	st	Z+, r1
    2166:	9a 95       	dec	r25
    2168:	e9 f7       	brne	.-6      	; 0x2164 <ht1632c_slide_in_from_top+0x34>
	memcpy(temp,ledmatrix,32);
    216a:	90 e2       	ldi	r25, 0x20	; 32
    216c:	e7 e6       	ldi	r30, 0x67	; 103
    216e:	f9 e2       	ldi	r31, 0x29	; 41
    2170:	01 90       	ld	r0, Z+
    2172:	0d 92       	st	X+, r0
    2174:	9a 95       	dec	r25
    2176:	e1 f7       	brne	.-8      	; 0x2170 <ht1632c_slide_in_from_top+0x40>
	memset(ledmatrix,0,32);
    2178:	e7 e6       	ldi	r30, 0x67	; 103
    217a:	f9 e2       	ldi	r31, 0x29	; 41
    217c:	df 01       	movw	r26, r30
    217e:	1d 92       	st	X+, r1
    2180:	8a 95       	dec	r24
    2182:	e9 f7       	brne	.-6      	; 0x217e <ht1632c_slide_in_from_top+0x4e>
    2184:	0f 2e       	mov	r0, r31
    2186:	ff e0       	ldi	r31, 0x0F	; 15
    2188:	ef 2e       	mov	r14, r31
    218a:	f1 2c       	mov	r15, r1
    218c:	f0 2d       	mov	r31, r0
    218e:	0f 2e       	mov	r0, r31
    2190:	ff e0       	ldi	r31, 0x0F	; 15
    2192:	6f 2e       	mov	r6, r31
    2194:	71 2c       	mov	r7, r1
    2196:	f0 2d       	mov	r31, r0
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
			if (row > 7) {
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
    2198:	88 24       	eor	r8, r8
    219a:	83 94       	inc	r8
    219c:	91 2c       	mov	r9, r1
    219e:	0f 2e       	mov	r0, r31
    21a0:	f7 e0       	ldi	r31, 0x07	; 7
    21a2:	4f 2e       	mov	r4, r31
    21a4:	51 2c       	mov	r5, r1
    21a6:	f0 2d       	mov	r31, r0
    21a8:	1f 01       	movw	r2, r30
    21aa:	06 e7       	ldi	r16, 0x76	; 118
    21ac:	19 e2       	ldi	r17, 0x29	; 41
    21ae:	37 c0       	rjmp	.+110    	; 0x221e <ht1632c_slide_in_from_top+0xee>
    21b0:	c2 2e       	mov	r12, r18
	int8_t col;
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
			if (row > 7) {
    21b2:	28 30       	cpi	r18, 0x08	; 8
    21b4:	84 f0       	brlt	.+32     	; 0x21d6 <ht1632c_slide_in_from_top+0xa6>
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
    21b6:	ab a1       	ldd	r26, Y+35	; 0x23
    21b8:	bc a1       	ldd	r27, Y+36	; 0x24
    21ba:	8c 91       	ld	r24, X
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	86 23       	and	r24, r22
    21c0:	97 23       	and	r25, r23
    21c2:	09 a0       	ldd	r0, Y+33	; 0x21
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <ht1632c_slide_in_from_top+0x9a>
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	0a 94       	dec	r0
    21cc:	e2 f7       	brpl	.-8      	; 0x21c6 <ht1632c_slide_in_from_top+0x96>
    21ce:	90 81       	ld	r25, Z
    21d0:	89 2b       	or	r24, r25
    21d2:	80 83       	st	Z, r24
    21d4:	11 c0       	rjmp	.+34     	; 0x21f8 <ht1632c_slide_in_from_top+0xc8>
    21d6:	8b a1       	ldd	r24, Y+35	; 0x23
    21d8:	9c a1       	ldd	r25, Y+36	; 0x24
    21da:	40 97       	sbiw	r24, 0x10	; 16
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
    21dc:	dc 01       	movw	r26, r24
    21de:	8c 91       	ld	r24, X
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	84 23       	and	r24, r20
    21e4:	95 23       	and	r25, r21
    21e6:	0b 2c       	mov	r0, r11
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <ht1632c_slide_in_from_top+0xbe>
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	0a 94       	dec	r0
    21f0:	e2 f7       	brpl	.-8      	; 0x21ea <ht1632c_slide_in_from_top+0xba>
    21f2:	90 81       	ld	r25, Z
    21f4:	89 2b       	or	r24, r25
    21f6:	80 83       	st	Z, r24
    21f8:	31 96       	adiw	r30, 0x01	; 1
    21fa:	8b a1       	ldd	r24, Y+35	; 0x23
    21fc:	9c a1       	ldd	r25, Y+36	; 0x24
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	8b a3       	std	Y+35, r24	; 0x23
    2202:	9c a3       	std	Y+36, r25	; 0x24
	
	int8_t col;
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
    2204:	e0 17       	cp	r30, r16
    2206:	f1 07       	cpc	r31, r17
    2208:	99 f6       	brne	.-90     	; 0x21b0 <ht1632c_slide_in_from_top+0x80>
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
			}
		}
		if (row > 0) {
    220a:	1c 14       	cp	r1, r12
    220c:	14 f4       	brge	.+4      	; 0x2212 <ht1632c_slide_in_from_top+0xe2>
			ht1632c_shift_down();
    220e:	c1 dd       	rcall	.-1150   	; 0x1d92 <ht1632c_shift_down>
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <ht1632c_slide_in_from_top+0xe6>
		} else {
			display_refresh_screen();
    2212:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    2216:	91 e0       	ldi	r25, 0x01	; 1
    2218:	e9 1a       	sub	r14, r25
    221a:	f1 08       	sbc	r15, r1
    221c:	00 f1       	brcs	.+64     	; 0x225e <ht1632c_slide_in_from_top+0x12e>
    221e:	b3 01       	movw	r22, r6
    2220:	6e 19       	sub	r22, r14
    2222:	7f 09       	sbc	r23, r15
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
			if (row > 7) {
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
    2224:	f4 01       	movw	r30, r8
    2226:	02 c0       	rjmp	.+4      	; 0x222c <ht1632c_slide_in_from_top+0xfc>
    2228:	ee 0f       	add	r30, r30
    222a:	ff 1f       	adc	r31, r31
    222c:	6a 95       	dec	r22
    222e:	e2 f7       	brpl	.-8      	; 0x2228 <ht1632c_slide_in_from_top+0xf8>
    2230:	bf 01       	movw	r22, r30
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
    2232:	be 2c       	mov	r11, r14
    2234:	a2 01       	movw	r20, r4
    2236:	4e 19       	sub	r20, r14
    2238:	5f 09       	sbc	r21, r15
    223a:	c4 01       	movw	r24, r8
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <ht1632c_slide_in_from_top+0x112>
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	4a 95       	dec	r20
    2244:	e2 f7       	brpl	.-8      	; 0x223e <ht1632c_slide_in_from_top+0x10e>
    2246:	ac 01       	movw	r20, r24
    2248:	f1 01       	movw	r30, r2
    224a:	de 01       	movw	r26, r28
    224c:	51 96       	adiw	r26, 0x11	; 17
    224e:	ab a3       	std	Y+35, r26	; 0x23
    2250:	bc a3       	std	Y+36, r27	; 0x24
    2252:	2e 2d       	mov	r18, r14
    2254:	c7 01       	movw	r24, r14
    2256:	08 97       	sbiw	r24, 0x08	; 8
    2258:	89 a3       	std	Y+33, r24	; 0x21
    225a:	9a a3       	std	Y+34, r25	; 0x22
    225c:	a9 cf       	rjmp	.-174    	; 0x21b0 <ht1632c_slide_in_from_top+0x80>
			ht1632c_shift_down();
		} else {
			display_refresh_screen();
		}
	}
}
    225e:	a4 96       	adiw	r28, 0x24	; 36
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	de bf       	out	0x3e, r29	; 62
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	1f 91       	pop	r17
    226a:	0f 91       	pop	r16
    226c:	ff 90       	pop	r15
    226e:	ef 90       	pop	r14
    2270:	cf 90       	pop	r12
    2272:	bf 90       	pop	r11
    2274:	9f 90       	pop	r9
    2276:	8f 90       	pop	r8
    2278:	7f 90       	pop	r7
    227a:	6f 90       	pop	r6
    227c:	5f 90       	pop	r5
    227e:	4f 90       	pop	r4
    2280:	3f 90       	pop	r3
    2282:	2f 90       	pop	r2
    2284:	08 95       	ret

00002286 <ht1632c_print_buffer>:

/*------------------------------PRINT FUNCTIONS------------------------------*/

void ht1632c_print_buffer(char *buffer, uint16_t length) {
    2286:	af 92       	push	r10
    2288:	bf 92       	push	r11
    228a:	cf 92       	push	r12
    228c:	df 92       	push	r13
    228e:	ef 92       	push	r14
    2290:	ff 92       	push	r15
    2292:	0f 93       	push	r16
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	5b 01       	movw	r10, r22

	uint16_t i;
	
	//Shift buffer into visible area
	for (i = 0; i < (length); i++)
    229c:	61 15       	cp	r22, r1
    229e:	71 05       	cpc	r23, r1
    22a0:	91 f1       	breq	.+100    	; 0x2306 <ht1632c_print_buffer+0x80>
    22a2:	ec 01       	movw	r28, r24
    22a4:	6c 01       	movw	r12, r24
    22a6:	c6 0e       	add	r12, r22
    22a8:	d7 1e       	adc	r13, r23
	{
		ht1632c_shift_left();
		ledmatrix[15] = buffer[i] >> 3;
    22aa:	0f 2e       	mov	r0, r31
    22ac:	f6 e7       	ldi	r31, 0x76	; 118
    22ae:	ef 2e       	mov	r14, r31
    22b0:	f9 e2       	ldi	r31, 0x29	; 41
    22b2:	ff 2e       	mov	r15, r31
    22b4:	f0 2d       	mov	r31, r0
		ledmatrix[31] = buffer[i] << 5;
    22b6:	06 e8       	ldi	r16, 0x86	; 134
    22b8:	19 e2       	ldi	r17, 0x29	; 41
	uint16_t i;
	
	//Shift buffer into visible area
	for (i = 0; i < (length); i++)
	{
		ht1632c_shift_left();
    22ba:	bf dc       	rcall	.-1666   	; 0x1c3a <ht1632c_shift_left>
    22bc:	fe 01       	movw	r30, r28
		ledmatrix[15] = buffer[i] >> 3;
    22be:	89 91       	ld	r24, Y+
    22c0:	86 95       	lsr	r24
    22c2:	86 95       	lsr	r24
    22c4:	86 95       	lsr	r24
    22c6:	d7 01       	movw	r26, r14
    22c8:	8c 93       	st	X, r24
		ledmatrix[31] = buffer[i] << 5;
    22ca:	80 81       	ld	r24, Z
    22cc:	82 95       	swap	r24
    22ce:	88 0f       	add	r24, r24
    22d0:	80 7e       	andi	r24, 0xE0	; 224
    22d2:	f8 01       	movw	r30, r16
    22d4:	80 83       	st	Z, r24
    22d6:	ff ef       	ldi	r31, 0xFF	; 255
    22d8:	2d ee       	ldi	r18, 0xED	; 237
    22da:	82 e0       	ldi	r24, 0x02	; 2
    22dc:	f1 50       	subi	r31, 0x01	; 1
    22de:	20 40       	sbci	r18, 0x00	; 0
    22e0:	80 40       	sbci	r24, 0x00	; 0
    22e2:	e1 f7       	brne	.-8      	; 0x22dc <ht1632c_print_buffer+0x56>
    22e4:	00 c0       	rjmp	.+0      	; 0x22e6 <ht1632c_print_buffer+0x60>
    22e6:	00 00       	nop
void ht1632c_print_buffer(char *buffer, uint16_t length) {

	uint16_t i;
	
	//Shift buffer into visible area
	for (i = 0; i < (length); i++)
    22e8:	cc 15       	cp	r28, r12
    22ea:	dd 05       	cpc	r29, r13
    22ec:	31 f7       	brne	.-52     	; 0x22ba <ht1632c_print_buffer+0x34>
		_delay_ms(30);
	}
	
	//Shift buffer out of visible area
	
	if ((length/4) < 15) {
    22ee:	9c e3       	ldi	r25, 0x3C	; 60
    22f0:	a9 16       	cp	r10, r25
    22f2:	b1 04       	cpc	r11, r1
    22f4:	40 f0       	brcs	.+16     	; 0x2306 <ht1632c_print_buffer+0x80>
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
			_delay_ms(30);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
    22f6:	b6 94       	lsr	r11
    22f8:	a7 94       	ror	r10
    22fa:	b6 94       	lsr	r11
    22fc:	a7 94       	ror	r10
    22fe:	a1 14       	cp	r10, r1
    2300:	b1 04       	cpc	r11, r1
    2302:	89 f4       	brne	.+34     	; 0x2326 <ht1632c_print_buffer+0xa0>
    2304:	20 c0       	rjmp	.+64     	; 0x2346 <ht1632c_print_buffer+0xc0>
	}
}

/*------------------------------PRINT FUNCTIONS------------------------------*/

void ht1632c_print_buffer(char *buffer, uint16_t length) {
    2306:	ce e1       	ldi	r28, 0x1E	; 30
    2308:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Shift buffer out of visible area
	
	if ((length/4) < 15) {
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
    230a:	97 dc       	rcall	.-1746   	; 0x1c3a <ht1632c_shift_left>
    230c:	af ef       	ldi	r26, 0xFF	; 255
    230e:	bd ee       	ldi	r27, 0xED	; 237
    2310:	e2 e0       	ldi	r30, 0x02	; 2
    2312:	a1 50       	subi	r26, 0x01	; 1
    2314:	b0 40       	sbci	r27, 0x00	; 0
    2316:	e0 40       	sbci	r30, 0x00	; 0
    2318:	e1 f7       	brne	.-8      	; 0x2312 <ht1632c_print_buffer+0x8c>
    231a:	00 c0       	rjmp	.+0      	; 0x231c <ht1632c_print_buffer+0x96>
    231c:	00 00       	nop
    231e:	21 97       	sbiw	r28, 0x01	; 1
	}
	
	//Shift buffer out of visible area
	
	if ((length/4) < 15) {
		for (i = 0; i < 30; i++) {
    2320:	20 97       	sbiw	r28, 0x00	; 0
    2322:	99 f7       	brne	.-26     	; 0x230a <ht1632c_print_buffer+0x84>
    2324:	10 c0       	rjmp	.+32     	; 0x2346 <ht1632c_print_buffer+0xc0>
			ht1632c_shift_left();
			_delay_ms(30);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
    2326:	c0 e0       	ldi	r28, 0x00	; 0
    2328:	d0 e0       	ldi	r29, 0x00	; 0
			ht1632c_shift_left();
    232a:	87 dc       	rcall	.-1778   	; 0x1c3a <ht1632c_shift_left>
    232c:	ff ef       	ldi	r31, 0xFF	; 255
    232e:	2d ee       	ldi	r18, 0xED	; 237
    2330:	82 e0       	ldi	r24, 0x02	; 2
    2332:	f1 50       	subi	r31, 0x01	; 1
    2334:	20 40       	sbci	r18, 0x00	; 0
    2336:	80 40       	sbci	r24, 0x00	; 0
    2338:	e1 f7       	brne	.-8      	; 0x2332 <ht1632c_print_buffer+0xac>
    233a:	00 c0       	rjmp	.+0      	; 0x233c <ht1632c_print_buffer+0xb6>
    233c:	00 00       	nop
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
			_delay_ms(30);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
    233e:	21 96       	adiw	r28, 0x01	; 1
    2340:	ca 15       	cp	r28, r10
    2342:	db 05       	cpc	r29, r11
    2344:	91 f7       	brne	.-28     	; 0x232a <ht1632c_print_buffer+0xa4>
			ht1632c_shift_left();
			_delay_ms(30);
		}
	}
    2346:	df 91       	pop	r29
    2348:	cf 91       	pop	r28
    234a:	1f 91       	pop	r17
    234c:	0f 91       	pop	r16
    234e:	ff 90       	pop	r15
    2350:	ef 90       	pop	r14
    2352:	df 90       	pop	r13
    2354:	cf 90       	pop	r12
    2356:	bf 90       	pop	r11
    2358:	af 90       	pop	r10
    235a:	08 95       	ret

0000235c <btn_setup>:
void btn_top_setup(void) 
{	
	PORTC.DIRCLR |= PIN2_bm;
	PORTC.PIN2CTRL |= PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
	PORTC.INT0MASK |= PIN2_bm;
	PORTC.INTCTRL |= PORT_INT0LVL_HI_gc;
    235c:	e0 e0       	ldi	r30, 0x00	; 0
    235e:	f6 e0       	ldi	r31, 0x06	; 6
    2360:	92 81       	ldd	r25, Z+2	; 0x02
    2362:	90 6e       	ori	r25, 0xE0	; 224
    2364:	92 83       	std	Z+2, r25	; 0x02
    2366:	e0 e2       	ldi	r30, 0x20	; 32
    2368:	f6 e0       	ldi	r31, 0x06	; 6
    236a:	92 81       	ldd	r25, Z+2	; 0x02
    236c:	91 60       	ori	r25, 0x01	; 1
    236e:	92 83       	std	Z+2, r25	; 0x02
    2370:	88 23       	and	r24, r24
    2372:	41 f1       	breq	.+80     	; 0x23c4 <btn_setup+0x68>
    2374:	e0 e0       	ldi	r30, 0x00	; 0
    2376:	f6 e0       	ldi	r31, 0x06	; 6
    2378:	85 89       	ldd	r24, Z+21	; 0x15
    237a:	82 60       	ori	r24, 0x02	; 2
    237c:	85 8b       	std	Z+21, r24	; 0x15
    237e:	86 89       	ldd	r24, Z+22	; 0x16
    2380:	82 60       	ori	r24, 0x02	; 2
    2382:	86 8b       	std	Z+22, r24	; 0x16
    2384:	87 89       	ldd	r24, Z+23	; 0x17
    2386:	82 60       	ori	r24, 0x02	; 2
    2388:	87 8b       	std	Z+23, r24	; 0x17
    238a:	a0 e2       	ldi	r26, 0x20	; 32
    238c:	b6 e0       	ldi	r27, 0x06	; 6
    238e:	50 96       	adiw	r26, 0x10	; 16
    2390:	8c 91       	ld	r24, X
    2392:	50 97       	sbiw	r26, 0x10	; 16
    2394:	82 60       	ori	r24, 0x02	; 2
    2396:	50 96       	adiw	r26, 0x10	; 16
    2398:	8c 93       	st	X, r24
    239a:	50 97       	sbiw	r26, 0x10	; 16
    239c:	82 85       	ldd	r24, Z+10	; 0x0a
    239e:	80 6e       	ori	r24, 0xE0	; 224
    23a0:	82 87       	std	Z+10, r24	; 0x0a
    23a2:	1a 96       	adiw	r26, 0x0a	; 10
    23a4:	8c 91       	ld	r24, X
    23a6:	1a 97       	sbiw	r26, 0x0a	; 10
    23a8:	81 60       	ori	r24, 0x01	; 1
    23aa:	1a 96       	adiw	r26, 0x0a	; 10
    23ac:	8c 93       	st	X, r24
    23ae:	1a 97       	sbiw	r26, 0x0a	; 10
    23b0:	81 85       	ldd	r24, Z+9	; 0x09
    23b2:	83 60       	ori	r24, 0x03	; 3
    23b4:	81 87       	std	Z+9, r24	; 0x09
    23b6:	19 96       	adiw	r26, 0x09	; 9
    23b8:	8c 91       	ld	r24, X
    23ba:	19 97       	sbiw	r26, 0x09	; 9
    23bc:	83 60       	ori	r24, 0x03	; 3
    23be:	19 96       	adiw	r26, 0x09	; 9
    23c0:	8c 93       	st	X, r24
    23c2:	08 95       	ret
    23c4:	e0 e0       	ldi	r30, 0x00	; 0
    23c6:	f6 e0       	ldi	r31, 0x06	; 6
    23c8:	85 89       	ldd	r24, Z+21	; 0x15
    23ca:	8d 7f       	andi	r24, 0xFD	; 253
    23cc:	85 8b       	std	Z+21, r24	; 0x15
    23ce:	86 89       	ldd	r24, Z+22	; 0x16
    23d0:	8d 7f       	andi	r24, 0xFD	; 253
    23d2:	86 8b       	std	Z+22, r24	; 0x16
    23d4:	87 89       	ldd	r24, Z+23	; 0x17
    23d6:	8d 7f       	andi	r24, 0xFD	; 253
    23d8:	87 8b       	std	Z+23, r24	; 0x17
    23da:	a0 e2       	ldi	r26, 0x20	; 32
    23dc:	b6 e0       	ldi	r27, 0x06	; 6
    23de:	50 96       	adiw	r26, 0x10	; 16
    23e0:	8c 91       	ld	r24, X
    23e2:	50 97       	sbiw	r26, 0x10	; 16
    23e4:	8d 7f       	andi	r24, 0xFD	; 253
    23e6:	50 96       	adiw	r26, 0x10	; 16
    23e8:	8c 93       	st	X, r24
    23ea:	50 97       	sbiw	r26, 0x10	; 16
    23ec:	82 85       	ldd	r24, Z+10	; 0x0a
    23ee:	8f 71       	andi	r24, 0x1F	; 31
    23f0:	82 87       	std	Z+10, r24	; 0x0a
    23f2:	1a 96       	adiw	r26, 0x0a	; 10
    23f4:	8c 91       	ld	r24, X
    23f6:	1a 97       	sbiw	r26, 0x0a	; 10
    23f8:	8e 7f       	andi	r24, 0xFE	; 254
    23fa:	1a 96       	adiw	r26, 0x0a	; 10
    23fc:	8c 93       	st	X, r24
    23fe:	1a 97       	sbiw	r26, 0x0a	; 10
    2400:	81 85       	ldd	r24, Z+9	; 0x09
    2402:	8c 7f       	andi	r24, 0xFC	; 252
    2404:	81 87       	std	Z+9, r24	; 0x09
    2406:	19 96       	adiw	r26, 0x09	; 9
    2408:	8c 91       	ld	r24, X
    240a:	19 97       	sbiw	r26, 0x09	; 9
    240c:	8c 7f       	andi	r24, 0xFC	; 252
    240e:	19 96       	adiw	r26, 0x09	; 9
    2410:	8c 93       	st	X, r24
    2412:	08 95       	ret

00002414 <btn_si114x_enable_interrupt>:
    2414:	e0 e0       	ldi	r30, 0x00	; 0
    2416:	f6 e0       	ldi	r31, 0x06	; 6
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	84 60       	ori	r24, 0x04	; 4
    241c:	82 83       	std	Z+2, r24	; 0x02
    241e:	82 89       	ldd	r24, Z+18	; 0x12
    2420:	82 60       	ori	r24, 0x02	; 2
    2422:	82 8b       	std	Z+18, r24	; 0x12
    2424:	83 85       	ldd	r24, Z+11	; 0x0b
    2426:	84 60       	ori	r24, 0x04	; 4
    2428:	83 87       	std	Z+11, r24	; 0x0b
    242a:	81 85       	ldd	r24, Z+9	; 0x09
    242c:	8c 60       	ori	r24, 0x0C	; 12
    242e:	81 87       	std	Z+9, r24	; 0x09
    2430:	08 95       	ret

00002432 <btn_si114x_disable_interrupt>:
    2432:	e0 e0       	ldi	r30, 0x00	; 0
    2434:	f6 e0       	ldi	r31, 0x06	; 6
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	8b 7f       	andi	r24, 0xFB	; 251
    243a:	82 83       	std	Z+2, r24	; 0x02
    243c:	82 89       	ldd	r24, Z+18	; 0x12
    243e:	8d 7f       	andi	r24, 0xFD	; 253
    2440:	82 8b       	std	Z+18, r24	; 0x12
    2442:	83 85       	ldd	r24, Z+11	; 0x0b
    2444:	8b 7f       	andi	r24, 0xFB	; 251
    2446:	83 87       	std	Z+11, r24	; 0x0b
    2448:	81 85       	ldd	r24, Z+9	; 0x09
    244a:	83 7f       	andi	r24, 0xF3	; 243
    244c:	81 87       	std	Z+9, r24	; 0x09
    244e:	08 95       	ret

00002450 <btn_check_press>:

button_t btn_check_press(void) {
	
	button_t btn_mask = NO_BTN;
	
	if (!(PORTA.IN & BUTTON0)) {
    2450:	e0 e0       	ldi	r30, 0x00	; 0
    2452:	f6 e0       	ldi	r31, 0x06	; 6
    2454:	80 85       	ldd	r24, Z+8	; 0x08
    2456:	85 fb       	bst	r24, 5
    2458:	88 27       	eor	r24, r24
    245a:	80 f9       	bld	r24, 0
    245c:	91 e0       	ldi	r25, 0x01	; 1
    245e:	89 27       	eor	r24, r25
		//uart_write_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL += 1;
		btn_mask |= BTN1;
	}
	if (!(PORTA.IN & BUTTON1)) {
    2460:	90 85       	ldd	r25, Z+8	; 0x08
    2462:	96 ff       	sbrs	r25, 6
		//uart_write_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL -= 1;
		btn_mask |= BTN2;
    2464:	82 60       	ori	r24, 0x02	; 2
	}
	if (!(PORTA.IN & BUTTON2)) {
    2466:	e0 e0       	ldi	r30, 0x00	; 0
    2468:	f6 e0       	ldi	r31, 0x06	; 6
    246a:	90 85       	ldd	r25, Z+8	; 0x08
    246c:	99 23       	and	r25, r25
    246e:	0c f0       	brlt	.+2      	; 0x2472 <btn_check_press+0x22>
		//uart_write_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL += 1;
		btn_mask |= BTN3;
    2470:	83 e0       	ldi	r24, 0x03	; 3
	} 
	if (!(PORTB.IN & BUTTON3)) {
    2472:	e0 e2       	ldi	r30, 0x20	; 32
    2474:	f6 e0       	ldi	r31, 0x06	; 6
    2476:	90 85       	ldd	r25, Z+8	; 0x08
    2478:	90 ff       	sbrs	r25, 0
		//uart_write_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL -= 1;
		btn_mask |= BTN4;
    247a:	84 60       	ori	r24, 0x04	; 4
	}
	return btn_mask;
}
    247c:	08 95       	ret

0000247e <__vector_66>:

ISR(PORTA_INT0_vect) {
    247e:	1f 92       	push	r1
    2480:	0f 92       	push	r0
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	0f 92       	push	r0
    2486:	11 24       	eor	r1, r1
    2488:	0b b6       	in	r0, 0x3b	; 59
    248a:	0f 92       	push	r0
    248c:	2f 93       	push	r18
    248e:	3f 93       	push	r19
    2490:	4f 93       	push	r20
    2492:	5f 93       	push	r21
    2494:	6f 93       	push	r22
    2496:	7f 93       	push	r23
    2498:	8f 93       	push	r24
    249a:	9f 93       	push	r25
    249c:	af 93       	push	r26
    249e:	bf 93       	push	r27
    24a0:	ef 93       	push	r30
    24a2:	ff 93       	push	r31
	btn_status = btn_check_press();
    24a4:	d5 df       	rcall	.-86     	; 0x2450 <btn_check_press>
    24a6:	80 93 42 2b 	sts	0x2B42, r24
	//printf("%d",btn_status);
}
    24aa:	ff 91       	pop	r31
    24ac:	ef 91       	pop	r30
    24ae:	bf 91       	pop	r27
    24b0:	af 91       	pop	r26
    24b2:	9f 91       	pop	r25
    24b4:	8f 91       	pop	r24
    24b6:	7f 91       	pop	r23
    24b8:	6f 91       	pop	r22
    24ba:	5f 91       	pop	r21
    24bc:	4f 91       	pop	r20
    24be:	3f 91       	pop	r19
    24c0:	2f 91       	pop	r18
    24c2:	0f 90       	pop	r0
    24c4:	0b be       	out	0x3b, r0	; 59
    24c6:	0f 90       	pop	r0
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	0f 90       	pop	r0
    24cc:	1f 90       	pop	r1
    24ce:	18 95       	reti

000024d0 <__vector_34>:

ISR(PORTB_INT0_vect) {
    24d0:	1f 92       	push	r1
    24d2:	0f 92       	push	r0
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	0f 92       	push	r0
    24d8:	11 24       	eor	r1, r1
    24da:	0b b6       	in	r0, 0x3b	; 59
    24dc:	0f 92       	push	r0
    24de:	2f 93       	push	r18
    24e0:	3f 93       	push	r19
    24e2:	4f 93       	push	r20
    24e4:	5f 93       	push	r21
    24e6:	6f 93       	push	r22
    24e8:	7f 93       	push	r23
    24ea:	8f 93       	push	r24
    24ec:	9f 93       	push	r25
    24ee:	af 93       	push	r26
    24f0:	bf 93       	push	r27
    24f2:	ef 93       	push	r30
    24f4:	ff 93       	push	r31
	btn_status = btn_check_press();
    24f6:	ac df       	rcall	.-168    	; 0x2450 <btn_check_press>
    24f8:	80 93 42 2b 	sts	0x2B42, r24
	printf("%d",btn_status);
    24fc:	80 91 42 2b 	lds	r24, 0x2B42
    2500:	1f 92       	push	r1
    2502:	8f 93       	push	r24
    2504:	86 e3       	ldi	r24, 0x36	; 54
    2506:	94 e2       	ldi	r25, 0x24	; 36
    2508:	9f 93       	push	r25
    250a:	8f 93       	push	r24
    250c:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <printf>
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
}
    2518:	ff 91       	pop	r31
    251a:	ef 91       	pop	r30
    251c:	bf 91       	pop	r27
    251e:	af 91       	pop	r26
    2520:	9f 91       	pop	r25
    2522:	8f 91       	pop	r24
    2524:	7f 91       	pop	r23
    2526:	6f 91       	pop	r22
    2528:	5f 91       	pop	r21
    252a:	4f 91       	pop	r20
    252c:	3f 91       	pop	r19
    252e:	2f 91       	pop	r18
    2530:	0f 90       	pop	r0
    2532:	0b be       	out	0x3b, r0	; 59
    2534:	0f 90       	pop	r0
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	0f 90       	pop	r0
    253a:	1f 90       	pop	r1
    253c:	18 95       	reti

0000253e <__vector_67>:

ISR(PORTA_INT1_vect) {
    253e:	1f 92       	push	r1
    2540:	0f 92       	push	r0
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	0f 92       	push	r0
    2546:	11 24       	eor	r1, r1
    2548:	0b b6       	in	r0, 0x3b	; 59
    254a:	0f 92       	push	r0
    254c:	ef 92       	push	r14
    254e:	ff 92       	push	r15
    2550:	0f 93       	push	r16
    2552:	1f 93       	push	r17
    2554:	2f 93       	push	r18
    2556:	3f 93       	push	r19
    2558:	4f 93       	push	r20
    255a:	5f 93       	push	r21
    255c:	6f 93       	push	r22
    255e:	7f 93       	push	r23
    2560:	8f 93       	push	r24
    2562:	9f 93       	push	r25
    2564:	af 93       	push	r26
    2566:	bf 93       	push	r27
    2568:	ef 93       	push	r30
    256a:	ff 93       	push	r31
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	00 d0       	rcall	.+0      	; 0x2572 <__vector_67+0x34>
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t data[2];
	twi_read_packet(&TWIC,SI114X_ADDR,50,REG_IRQ_STATUS,data,1);
    2576:	ee 24       	eor	r14, r14
    2578:	e3 94       	inc	r14
    257a:	f1 2c       	mov	r15, r1
    257c:	8e 01       	movw	r16, r28
    257e:	0f 5f       	subi	r16, 0xFF	; 255
    2580:	1f 4f       	sbci	r17, 0xFF	; 255
    2582:	21 e2       	ldi	r18, 0x21	; 33
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	42 e3       	ldi	r20, 0x32	; 50
    2588:	50 e0       	ldi	r21, 0x00	; 0
    258a:	6a e5       	ldi	r22, 0x5A	; 90
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	80 e8       	ldi	r24, 0x80	; 128
    2590:	94 e0       	ldi	r25, 0x04	; 4
    2592:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <twi_read_packet>
	si114x_status = data[0];
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	80 93 75 2b 	sts	0x2B75, r24
	//data[0] = 0x00;
	//twi_write_packet(&TWIC,SI114X_ADDR,50,REG_IRQ_STATUS,data,1);

	puts("Interrupt from Si114x! \n");
    259c:	89 e3       	ldi	r24, 0x39	; 57
    259e:	94 e2       	ldi	r25, 0x24	; 36
    25a0:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <puts>
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	df 91       	pop	r29
    25aa:	cf 91       	pop	r28
    25ac:	ff 91       	pop	r31
    25ae:	ef 91       	pop	r30
    25b0:	bf 91       	pop	r27
    25b2:	af 91       	pop	r26
    25b4:	9f 91       	pop	r25
    25b6:	8f 91       	pop	r24
    25b8:	7f 91       	pop	r23
    25ba:	6f 91       	pop	r22
    25bc:	5f 91       	pop	r21
    25be:	4f 91       	pop	r20
    25c0:	3f 91       	pop	r19
    25c2:	2f 91       	pop	r18
    25c4:	1f 91       	pop	r17
    25c6:	0f 91       	pop	r16
    25c8:	ff 90       	pop	r15
    25ca:	ef 90       	pop	r14
    25cc:	0f 90       	pop	r0
    25ce:	0b be       	out	0x3b, r0	; 59
    25d0:	0f 90       	pop	r0
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	0f 90       	pop	r0
    25d6:	1f 90       	pop	r1
    25d8:	18 95       	reti

000025da <rtc_setup>:
}

void rtc_show_minutes(void) 
{
	rtc_update_display(BOTTOM_HALF,env_var.time.minutes);
	disp_time = false;
    25da:	88 ed       	ldi	r24, 0xD8	; 216
    25dc:	84 bf       	out	0x34, r24	; 52
    25de:	8b e0       	ldi	r24, 0x0B	; 11
    25e0:	e0 e4       	ldi	r30, 0x40	; 64
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	83 83       	std	Z+3, r24	; 0x03
    25e6:	e0 e0       	ldi	r30, 0x00	; 0
    25e8:	f4 e0       	ldi	r31, 0x04	; 4
    25ea:	81 81       	ldd	r24, Z+1	; 0x01
    25ec:	80 fd       	sbrc	r24, 0
    25ee:	fd cf       	rjmp	.-6      	; 0x25ea <rtc_setup+0x10>
    25f0:	e0 e0       	ldi	r30, 0x00	; 0
    25f2:	f4 e0       	ldi	r31, 0x04	; 4
    25f4:	80 e8       	ldi	r24, 0x80	; 128
    25f6:	97 e0       	ldi	r25, 0x07	; 7
    25f8:	82 87       	std	Z+10, r24	; 0x0a
    25fa:	93 87       	std	Z+11, r25	; 0x0b
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	82 83       	std	Z+2, r24	; 0x02
    2600:	10 86       	std	Z+8, r1	; 0x08
    2602:	11 86       	std	Z+9, r1	; 0x09
    2604:	14 86       	std	Z+12, r1	; 0x0c
    2606:	15 86       	std	Z+13, r1	; 0x0d
    2608:	87 e0       	ldi	r24, 0x07	; 7
    260a:	80 83       	st	Z, r24
    260c:	08 95       	ret

0000260e <rtc_disable_time_render>:
    260e:	10 92 07 20 	sts	0x2007, r1
    2612:	08 95       	ret

00002614 <rtc_update_display>:
    2614:	4f 92       	push	r4
    2616:	5f 92       	push	r5
    2618:	6f 92       	push	r6
    261a:	7f 92       	push	r7
    261c:	af 92       	push	r10
    261e:	bf 92       	push	r11
    2620:	cf 92       	push	r12
    2622:	df 92       	push	r13
    2624:	ef 92       	push	r14
    2626:	ff 92       	push	r15
    2628:	0f 93       	push	r16
    262a:	1f 93       	push	r17
    262c:	cf 93       	push	r28
    262e:	df 93       	push	r29
    2630:	00 d0       	rcall	.+0      	; 0x2632 <rtc_update_display+0x1e>
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	b8 2e       	mov	r11, r24
    2638:	a6 2e       	mov	r10, r22
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	8e 01       	movw	r16, r28
    2642:	0f 5f       	subi	r16, 0xFF	; 255
    2644:	1f 4f       	sbci	r17, 0xFF	; 255
    2646:	0f 2e       	mov	r0, r31
    2648:	fa e0       	ldi	r31, 0x0A	; 10
    264a:	4f 2e       	mov	r4, r31
    264c:	51 2c       	mov	r5, r1
    264e:	61 2c       	mov	r6, r1
    2650:	71 2c       	mov	r7, r1
    2652:	f0 2d       	mov	r31, r0
    2654:	78 01       	movw	r14, r16
    2656:	2f ef       	ldi	r18, 0xFF	; 255
    2658:	e2 1a       	sub	r14, r18
    265a:	f2 0a       	sbc	r15, r18
    265c:	67 01       	movw	r12, r14
    265e:	a3 01       	movw	r20, r6
    2660:	92 01       	movw	r18, r4
    2662:	0e 94 c8 3a 	call	0x7590	; 0x7590 <__udivmodsi4>
    2666:	60 5d       	subi	r22, 0xD0	; 208
    2668:	f8 01       	movw	r30, r16
    266a:	60 83       	st	Z, r22
    266c:	62 2f       	mov	r22, r18
    266e:	73 2f       	mov	r23, r19
    2670:	84 2f       	mov	r24, r20
    2672:	95 2f       	mov	r25, r21
    2674:	61 15       	cp	r22, r1
    2676:	71 05       	cpc	r23, r1
    2678:	81 05       	cpc	r24, r1
    267a:	91 05       	cpc	r25, r1
    267c:	11 f0       	breq	.+4      	; 0x2682 <rtc_update_display+0x6e>
    267e:	87 01       	movw	r16, r14
    2680:	e9 cf       	rjmp	.-46     	; 0x2654 <rtc_update_display+0x40>
    2682:	ce 01       	movw	r24, r28
    2684:	01 96       	adiw	r24, 0x01	; 1
    2686:	c8 1a       	sub	r12, r24
    2688:	d9 0a       	sbc	r13, r25
    268a:	c6 01       	movw	r24, r12
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	18 16       	cp	r1, r24
    2690:	19 06       	cpc	r1, r25
    2692:	a4 f4       	brge	.+40     	; 0x26bc <rtc_update_display+0xa8>
    2694:	a1 e0       	ldi	r26, 0x01	; 1
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	ac 0f       	add	r26, r28
    269a:	bd 1f       	adc	r27, r29
    269c:	ac 0d       	add	r26, r12
    269e:	bd 1d       	adc	r27, r13
    26a0:	fe 01       	movw	r30, r28
    26a2:	31 96       	adiw	r30, 0x01	; 1
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 81       	ld	r20, Z
    26aa:	5e 91       	ld	r21, -X
    26ac:	51 93       	st	Z+, r21
    26ae:	4c 93       	st	X, r20
    26b0:	2f 5f       	subi	r18, 0xFF	; 255
    26b2:	3f 4f       	sbci	r19, 0xFF	; 255
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	28 17       	cp	r18, r24
    26b8:	39 07       	cpc	r19, r25
    26ba:	b4 f3       	brlt	.-20     	; 0x26a8 <rtc_update_display+0x94>
    26bc:	f9 e0       	ldi	r31, 0x09	; 9
    26be:	fa 15       	cp	r31, r10
    26c0:	20 f0       	brcs	.+8      	; 0x26ca <rtc_update_display+0xb6>
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	90 e3       	ldi	r25, 0x30	; 48
    26c6:	99 83       	std	Y+1, r25	; 0x01
    26c8:	8a 83       	std	Y+2, r24	; 0x02
    26ca:	b1 10       	cpse	r11, r1
    26cc:	0d c0       	rjmp	.+26     	; 0x26e8 <rtc_update_display+0xd4>
    26ce:	00 e0       	ldi	r16, 0x00	; 0
    26d0:	10 e0       	ldi	r17, 0x00	; 0
    26d2:	28 e0       	ldi	r18, 0x08	; 8
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e1       	ldi	r20, 0x10	; 16
    26d8:	50 e0       	ldi	r21, 0x00	; 0
    26da:	60 e0       	ldi	r22, 0x00	; 0
    26dc:	70 e0       	ldi	r23, 0x00	; 0
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0e 94 de 24 	call	0x49bc	; 0x49bc <display_draw_filled_rect>
    26e6:	0c c0       	rjmp	.+24     	; 0x2700 <rtc_update_display+0xec>
    26e8:	00 e0       	ldi	r16, 0x00	; 0
    26ea:	10 e0       	ldi	r17, 0x00	; 0
    26ec:	29 e0       	ldi	r18, 0x09	; 9
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e1       	ldi	r20, 0x10	; 16
    26f2:	50 e0       	ldi	r21, 0x00	; 0
    26f4:	67 e0       	ldi	r22, 0x07	; 7
    26f6:	70 e0       	ldi	r23, 0x00	; 0
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	0e 94 de 24 	call	0x49bc	; 0x49bc <display_draw_filled_rect>
    2700:	eb 2c       	mov	r14, r11
    2702:	f1 2c       	mov	r15, r1
    2704:	49 81       	ldd	r20, Y+1	; 0x01
    2706:	50 e0       	ldi	r21, 0x00	; 0
    2708:	01 e0       	ldi	r16, 0x01	; 1
    270a:	10 e0       	ldi	r17, 0x00	; 0
    270c:	21 e0       	ldi	r18, 0x01	; 1
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	b7 01       	movw	r22, r14
    2712:	82 e0       	ldi	r24, 0x02	; 2
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <display_draw_char>
    271a:	4a 81       	ldd	r20, Y+2	; 0x02
    271c:	50 e0       	ldi	r21, 0x00	; 0
    271e:	21 e0       	ldi	r18, 0x01	; 1
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	b7 01       	movw	r22, r14
    2724:	89 e0       	ldi	r24, 0x09	; 9
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <display_draw_char>
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	1f 91       	pop	r17
    2736:	0f 91       	pop	r16
    2738:	ff 90       	pop	r15
    273a:	ef 90       	pop	r14
    273c:	df 90       	pop	r13
    273e:	cf 90       	pop	r12
    2740:	bf 90       	pop	r11
    2742:	af 90       	pop	r10
    2744:	7f 90       	pop	r7
    2746:	6f 90       	pop	r6
    2748:	5f 90       	pop	r5
    274a:	4f 90       	pop	r4
    274c:	08 95       	ret

0000274e <rtc_enable_time_render>:
}

void rtc_enable_time_render(void) 
{
	env_var.menu_id = 0;
    274e:	10 92 39 2a 	sts	0x2A39, r1
	rtc_update_display(BOTTOM_HALF,env_var.time.minutes);
    2752:	60 91 cf 29 	lds	r22, 0x29CF
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	5d df       	rcall	.-326    	; 0x2614 <rtc_update_display>
	rtc_update_display(TOP_HALF,env_var.time.hours);
    275a:	60 91 d0 29 	lds	r22, 0x29D0
    275e:	89 e0       	ldi	r24, 0x09	; 9
    2760:	59 df       	rcall	.-334    	; 0x2614 <rtc_update_display>
	disp_time = true;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	80 93 07 20 	sts	0x2007, r24
    2768:	08 95       	ret

0000276a <__vector_10>:
	display_draw_char(2,pos,buffer[0],1,1);
	display_draw_char(9,pos,buffer[1],1,1);
}

ISR(RTC_OVF_vect) 
{
    276a:	1f 92       	push	r1
    276c:	0f 92       	push	r0
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	0f 92       	push	r0
    2772:	11 24       	eor	r1, r1
    2774:	0b b6       	in	r0, 0x3b	; 59
    2776:	0f 92       	push	r0
    2778:	2f 93       	push	r18
    277a:	3f 93       	push	r19
    277c:	4f 93       	push	r20
    277e:	5f 93       	push	r21
    2780:	6f 93       	push	r22
    2782:	7f 93       	push	r23
    2784:	8f 93       	push	r24
    2786:	9f 93       	push	r25
    2788:	af 93       	push	r26
    278a:	bf 93       	push	r27
    278c:	cf 93       	push	r28
    278e:	ef 93       	push	r30
    2790:	ff 93       	push	r31
	if (++env_var.time.minutes >= 60) {
    2792:	ef ec       	ldi	r30, 0xCF	; 207
    2794:	f9 e2       	ldi	r31, 0x29	; 41
    2796:	60 81       	ld	r22, Z
    2798:	6f 5f       	subi	r22, 0xFF	; 255
    279a:	60 83       	st	Z, r22
    279c:	6c 33       	cpi	r22, 0x3C	; 60
    279e:	08 f4       	brcc	.+2      	; 0x27a2 <__vector_10+0x38>
    27a0:	61 c0       	rjmp	.+194    	; 0x2864 <__vector_10+0xfa>
		
		env_var.time.minutes = 0;
    27a2:	10 92 cf 29 	sts	0x29CF, r1
		if (disp_time) {
    27a6:	80 91 07 20 	lds	r24, 0x2007
    27aa:	88 23       	and	r24, r24
    27ac:	29 f0       	breq	.+10     	; 0x27b8 <__vector_10+0x4e>
			rtc_update_display(BOTTOM_HALF,env_var.time.minutes);
    27ae:	60 e0       	ldi	r22, 0x00	; 0
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	30 df       	rcall	.-416    	; 0x2614 <rtc_update_display>
			display_refresh_screen();
    27b4:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
		}
		
		//Todo: implement DST - Daylight Saving Time
		
		if (++env_var.time.hours >= 24) {
    27b8:	e0 ed       	ldi	r30, 0xD0	; 208
    27ba:	f9 e2       	ldi	r31, 0x29	; 41
    27bc:	60 81       	ld	r22, Z
    27be:	6f 5f       	subi	r22, 0xFF	; 255
    27c0:	60 83       	st	Z, r22
    27c2:	68 31       	cpi	r22, 0x18	; 24
    27c4:	08 f4       	brcc	.+2      	; 0x27c8 <__vector_10+0x5e>
    27c6:	43 c0       	rjmp	.+134    	; 0x284e <__vector_10+0xe4>
			if (env_var.time.weekday++ >= Sunday) {
    27c8:	80 91 d2 29 	lds	r24, 0x29D2
    27cc:	87 30       	cpi	r24, 0x07	; 7
    27ce:	20 f4       	brcc	.+8      	; 0x27d8 <__vector_10+0x6e>
    27d0:	8f 5f       	subi	r24, 0xFF	; 255
    27d2:	80 93 d2 29 	sts	0x29D2, r24
    27d6:	08 c0       	rjmp	.+16     	; 0x27e8 <__vector_10+0x7e>
				env_var.time.weekday = Monday;
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	80 93 d2 29 	sts	0x29D2, r24
				env_var.time.week++;
    27de:	e3 ed       	ldi	r30, 0xD3	; 211
    27e0:	f9 e2       	ldi	r31, 0x29	; 41
    27e2:	80 81       	ld	r24, Z
    27e4:	8f 5f       	subi	r24, 0xFF	; 255
    27e6:	80 83       	st	Z, r24
			}
			if (env_var.time.day++ >= time_get_days_in_month(env_var.time.month,env_var.time.year)) {
    27e8:	e1 ed       	ldi	r30, 0xD1	; 209
    27ea:	f9 e2       	ldi	r31, 0x29	; 41
    27ec:	c0 81       	ld	r28, Z
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	8c 0f       	add	r24, r28
    27f2:	80 83       	st	Z, r24
    27f4:	60 91 d5 29 	lds	r22, 0x29D5
    27f8:	70 91 d6 29 	lds	r23, 0x29D6
    27fc:	80 91 d4 29 	lds	r24, 0x29D4
    2800:	0e 94 82 38 	call	0x7104	; 0x7104 <time_get_days_in_month>
    2804:	c8 17       	cp	r28, r24
    2806:	b8 f0       	brcs	.+46     	; 0x2836 <__vector_10+0xcc>
				env_var.time.day = 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	80 93 d1 29 	sts	0x29D1, r24
				if (env_var.time.month++ >= December) {
    280e:	80 91 d4 29 	lds	r24, 0x29D4
    2812:	8c 30       	cpi	r24, 0x0C	; 12
    2814:	20 f4       	brcc	.+8      	; 0x281e <__vector_10+0xb4>
    2816:	8f 5f       	subi	r24, 0xFF	; 255
    2818:	80 93 d4 29 	sts	0x29D4, r24
    281c:	0c c0       	rjmp	.+24     	; 0x2836 <__vector_10+0xcc>
					env_var.time.month = January;
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	80 93 d4 29 	sts	0x29D4, r24
					env_var.time.week = 1;
    2824:	80 93 d3 29 	sts	0x29D3, r24
					env_var.time.year++;
    2828:	e5 ed       	ldi	r30, 0xD5	; 213
    282a:	f9 e2       	ldi	r31, 0x29	; 41
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
    2830:	01 96       	adiw	r24, 0x01	; 1
    2832:	80 83       	st	Z, r24
    2834:	91 83       	std	Z+1, r25	; 0x01
				}
			}

			env_var.time.hours = 0;
    2836:	10 92 d0 29 	sts	0x29D0, r1
			if (disp_time) {
    283a:	80 91 07 20 	lds	r24, 0x2007
    283e:	88 23       	and	r24, r24
    2840:	71 f0       	breq	.+28     	; 0x285e <__vector_10+0xf4>
				rtc_update_display(TOP_HALF,env_var.time.hours);
    2842:	60 e0       	ldi	r22, 0x00	; 0
    2844:	89 e0       	ldi	r24, 0x09	; 9
    2846:	e6 de       	rcall	.-564    	; 0x2614 <rtc_update_display>
				display_refresh_screen();
    2848:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    284c:	08 c0       	rjmp	.+16     	; 0x285e <__vector_10+0xf4>
			}
			} else {
				if (disp_time) {
    284e:	80 91 07 20 	lds	r24, 0x2007
    2852:	88 23       	and	r24, r24
    2854:	21 f0       	breq	.+8      	; 0x285e <__vector_10+0xf4>
					rtc_update_display(TOP_HALF,env_var.time.hours);
    2856:	89 e0       	ldi	r24, 0x09	; 9
    2858:	dd de       	rcall	.-582    	; 0x2614 <rtc_update_display>
					display_refresh_screen();
    285a:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
				}
		}
		env_var.time.minutes = 0;
    285e:	10 92 cf 29 	sts	0x29CF, r1
    2862:	08 c0       	rjmp	.+16     	; 0x2874 <__vector_10+0x10a>
		} else {
			if (disp_time) {
    2864:	80 91 07 20 	lds	r24, 0x2007
    2868:	88 23       	and	r24, r24
    286a:	21 f0       	breq	.+8      	; 0x2874 <__vector_10+0x10a>
				rtc_update_display(BOTTOM_HALF,env_var.time.minutes);
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	d2 de       	rcall	.-604    	; 0x2614 <rtc_update_display>
				display_refresh_screen();
    2870:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
			}
	}
    2874:	ff 91       	pop	r31
    2876:	ef 91       	pop	r30
    2878:	cf 91       	pop	r28
    287a:	bf 91       	pop	r27
    287c:	af 91       	pop	r26
    287e:	9f 91       	pop	r25
    2880:	8f 91       	pop	r24
    2882:	7f 91       	pop	r23
    2884:	6f 91       	pop	r22
    2886:	5f 91       	pop	r21
    2888:	4f 91       	pop	r20
    288a:	3f 91       	pop	r19
    288c:	2f 91       	pop	r18
    288e:	0f 90       	pop	r0
    2890:	0b be       	out	0x3b, r0	; 59
    2892:	0f 90       	pop	r0
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	0f 90       	pop	r0
    2898:	1f 90       	pop	r1
    289a:	18 95       	reti

0000289c <_sendCmd>:
	u8 code ucoef[4] = { 0x7B, 0x6B, 0x01, 0x00 } ;
	
	// This will write 4 bytes starting with I2C address 0x13
	response = Si114xBlockWrite( si114x_handle, REG_UCOEF0, 4, &ucoef[0] );
	return response;
}
    289c:	df 92       	push	r13
    289e:	ef 92       	push	r14
    28a0:	ff 92       	push	r15
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	cf 93       	push	r28
    28a8:	df 93       	push	r29
    28aa:	ec 01       	movw	r28, r24
    28ac:	d6 2e       	mov	r13, r22
    28ae:	60 e2       	ldi	r22, 0x20	; 32
    28b0:	45 d6       	rcall	.+3210   	; 0x353c <Si114xReadFromRegister>
    28b2:	8c 01       	movw	r16, r24
    28b4:	99 23       	and	r25, r25
    28b6:	34 f1       	brlt	.+76     	; 0x2904 <_sendCmd+0x68>
    28b8:	60 e3       	ldi	r22, 0x30	; 48
    28ba:	ce 01       	movw	r24, r28
    28bc:	3f d6       	rcall	.+3198   	; 0x353c <Si114xReadFromRegister>
    28be:	81 30       	cpi	r24, 0x01	; 1
    28c0:	91 05       	cpc	r25, r1
    28c2:	81 f1       	breq	.+96     	; 0x2924 <_sendCmd+0x88>
    28c4:	99 23       	and	r25, r25
    28c6:	c4 f7       	brge	.-16     	; 0x28b8 <_sendCmd+0x1c>
    28c8:	39 c0       	rjmp	.+114    	; 0x293c <_sendCmd+0xa0>
    28ca:	60 e2       	ldi	r22, 0x20	; 32
    28cc:	ce 01       	movw	r24, r28
    28ce:	36 d6       	rcall	.+3180   	; 0x353c <Si114xReadFromRegister>
    28d0:	80 17       	cp	r24, r16
    28d2:	91 07       	cpc	r25, r17
    28d4:	51 f1       	breq	.+84     	; 0x292a <_sendCmd+0x8e>
    28d6:	99 23       	and	r25, r25
    28d8:	8c f1       	brlt	.+98     	; 0x293c <_sendCmd+0xa0>
    28da:	8c 01       	movw	r16, r24
    28dc:	ed cf       	rjmp	.-38     	; 0x28b8 <_sendCmd+0x1c>
    28de:	78 01       	movw	r14, r16
    28e0:	4d 2d       	mov	r20, r13
    28e2:	68 e1       	ldi	r22, 0x18	; 24
    28e4:	ce 01       	movw	r24, r28
    28e6:	0d d6       	rcall	.+3098   	; 0x3502 <Si114xWriteToRegister>
    28e8:	9c 01       	movw	r18, r24
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	69 f4       	brne	.+26     	; 0x2908 <_sendCmd+0x6c>
    28ee:	dd 20       	and	r13, r13
    28f0:	69 f0       	breq	.+26     	; 0x290c <_sendCmd+0x70>
    28f2:	60 e2       	ldi	r22, 0x20	; 32
    28f4:	ce 01       	movw	r24, r28
    28f6:	22 d6       	rcall	.+3140   	; 0x353c <Si114xReadFromRegister>
    28f8:	8e 15       	cp	r24, r14
    28fa:	9f 05       	cpc	r25, r15
    28fc:	51 f4       	brne	.+20     	; 0x2912 <_sendCmd+0x76>
    28fe:	11 23       	and	r17, r17
    2900:	c4 f7       	brge	.-16     	; 0x28f2 <_sendCmd+0x56>
    2902:	0a c0       	rjmp	.+20     	; 0x2918 <_sendCmd+0x7c>
    2904:	91 2f       	mov	r25, r17
    2906:	1a c0       	rjmp	.+52     	; 0x293c <_sendCmd+0xa0>
    2908:	93 2f       	mov	r25, r19
    290a:	18 c0       	rjmp	.+48     	; 0x293c <_sendCmd+0xa0>
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	15 c0       	rjmp	.+42     	; 0x293c <_sendCmd+0xa0>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	12 c0       	rjmp	.+36     	; 0x293c <_sendCmd+0xa0>
    2918:	80 2f       	mov	r24, r16
    291a:	91 2f       	mov	r25, r17
    291c:	0f c0       	rjmp	.+30     	; 0x293c <_sendCmd+0xa0>
    291e:	82 2f       	mov	r24, r18
    2920:	93 2f       	mov	r25, r19
    2922:	0c c0       	rjmp	.+24     	; 0x293c <_sendCmd+0xa0>
    2924:	d1 10       	cpse	r13, r1
    2926:	d1 cf       	rjmp	.-94     	; 0x28ca <_sendCmd+0x2e>
    2928:	da cf       	rjmp	.-76     	; 0x28de <_sendCmd+0x42>
    292a:	78 01       	movw	r14, r16
    292c:	4d 2d       	mov	r20, r13
    292e:	68 e1       	ldi	r22, 0x18	; 24
    2930:	ce 01       	movw	r24, r28
    2932:	e7 d5       	rcall	.+3022   	; 0x3502 <Si114xWriteToRegister>
    2934:	9c 01       	movw	r18, r24
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	e1 f2       	breq	.-72     	; 0x28f2 <_sendCmd+0x56>
    293a:	f1 cf       	rjmp	.-30     	; 0x291e <_sendCmd+0x82>
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	1f 91       	pop	r17
    2942:	0f 91       	pop	r16
    2944:	ff 90       	pop	r15
    2946:	ef 90       	pop	r14
    2948:	df 90       	pop	r13
    294a:	08 95       	ret

0000294c <si114x_get_data>:
    294c:	cf 92       	push	r12
    294e:	df 92       	push	r13
    2950:	ef 92       	push	r14
    2952:	0f 93       	push	r16
    2954:	1f 93       	push	r17
    2956:	cf 93       	push	r28
    2958:	df 93       	push	r29
    295a:	00 d0       	rcall	.+0      	; 0x295c <si114x_get_data+0x10>
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	6c 01       	movw	r12, r24
    2962:	80 91 87 29 	lds	r24, 0x2987
    2966:	90 91 88 29 	lds	r25, 0x2988
    296a:	f6 01       	movw	r30, r12
    296c:	82 83       	std	Z+2, r24	; 0x02
    296e:	93 83       	std	Z+3, r25	; 0x03
    2970:	68 94       	set
    2972:	ee 24       	eor	r14, r14
    2974:	e1 f8       	bld	r14, 1
    2976:	8e 01       	movw	r16, r28
    2978:	0f 5f       	subi	r16, 0xFF	; 255
    297a:	1f 4f       	sbci	r17, 0xFF	; 255
    297c:	26 e2       	ldi	r18, 0x26	; 38
    297e:	42 e3       	ldi	r20, 0x32	; 50
    2980:	6a e5       	ldi	r22, 0x5A	; 90
    2982:	80 e8       	ldi	r24, 0x80	; 128
    2984:	94 e0       	ldi	r25, 0x04	; 4
    2986:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <twi_read_packet>
    298a:	8a 81       	ldd	r24, Y+2	; 0x02
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	98 2f       	mov	r25, r24
    2990:	88 27       	eor	r24, r24
    2992:	29 81       	ldd	r18, Y+1	; 0x01
    2994:	82 2b       	or	r24, r18
    2996:	f6 01       	movw	r30, r12
    2998:	82 87       	std	Z+10, r24	; 0x0a
    299a:	93 87       	std	Z+11, r25	; 0x0b
    299c:	28 e2       	ldi	r18, 0x28	; 40
    299e:	42 e3       	ldi	r20, 0x32	; 50
    29a0:	6a e5       	ldi	r22, 0x5A	; 90
    29a2:	80 e8       	ldi	r24, 0x80	; 128
    29a4:	94 e0       	ldi	r25, 0x04	; 4
    29a6:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <twi_read_packet>
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	98 2f       	mov	r25, r24
    29b0:	88 27       	eor	r24, r24
    29b2:	29 81       	ldd	r18, Y+1	; 0x01
    29b4:	82 2b       	or	r24, r18
    29b6:	f6 01       	movw	r30, r12
    29b8:	84 87       	std	Z+12, r24	; 0x0c
    29ba:	95 87       	std	Z+13, r25	; 0x0d
    29bc:	2a e2       	ldi	r18, 0x2A	; 42
    29be:	42 e3       	ldi	r20, 0x32	; 50
    29c0:	6a e5       	ldi	r22, 0x5A	; 90
    29c2:	80 e8       	ldi	r24, 0x80	; 128
    29c4:	94 e0       	ldi	r25, 0x04	; 4
    29c6:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <twi_read_packet>
    29ca:	8a 81       	ldd	r24, Y+2	; 0x02
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	98 2f       	mov	r25, r24
    29d0:	88 27       	eor	r24, r24
    29d2:	29 81       	ldd	r18, Y+1	; 0x01
    29d4:	82 2b       	or	r24, r18
    29d6:	f6 01       	movw	r30, r12
    29d8:	86 87       	std	Z+14, r24	; 0x0e
    29da:	97 87       	std	Z+15, r25	; 0x0f
    29dc:	24 e2       	ldi	r18, 0x24	; 36
    29de:	42 e3       	ldi	r20, 0x32	; 50
    29e0:	6a e5       	ldi	r22, 0x5A	; 90
    29e2:	80 e8       	ldi	r24, 0x80	; 128
    29e4:	94 e0       	ldi	r25, 0x04	; 4
    29e6:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <twi_read_packet>
    29ea:	8a 81       	ldd	r24, Y+2	; 0x02
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	98 2f       	mov	r25, r24
    29f0:	88 27       	eor	r24, r24
    29f2:	29 81       	ldd	r18, Y+1	; 0x01
    29f4:	82 2b       	or	r24, r18
    29f6:	f6 01       	movw	r30, r12
    29f8:	80 87       	std	Z+8, r24	; 0x08
    29fa:	91 87       	std	Z+9, r25	; 0x09
    29fc:	22 e2       	ldi	r18, 0x22	; 34
    29fe:	42 e3       	ldi	r20, 0x32	; 50
    2a00:	6a e5       	ldi	r22, 0x5A	; 90
    2a02:	80 e8       	ldi	r24, 0x80	; 128
    2a04:	94 e0       	ldi	r25, 0x04	; 4
    2a06:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <twi_read_packet>
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	98 2f       	mov	r25, r24
    2a10:	88 27       	eor	r24, r24
    2a12:	29 81       	ldd	r18, Y+1	; 0x01
    2a14:	82 2b       	or	r24, r18
    2a16:	f6 01       	movw	r30, r12
    2a18:	86 83       	std	Z+6, r24	; 0x06
    2a1a:	97 83       	std	Z+7, r25	; 0x07
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	df 91       	pop	r29
    2a24:	cf 91       	pop	r28
    2a26:	1f 91       	pop	r17
    2a28:	0f 91       	pop	r16
    2a2a:	ef 90       	pop	r14
    2a2c:	df 90       	pop	r13
    2a2e:	cf 90       	pop	r12
    2a30:	08 95       	ret

00002a32 <Si114xNop>:
    2a32:	60 e0       	ldi	r22, 0x00	; 0
    2a34:	33 cf       	rjmp	.-410    	; 0x289c <_sendCmd>
    2a36:	08 95       	ret

00002a38 <Si114xPsAuto>:
    2a38:	6d e0       	ldi	r22, 0x0D	; 13
    2a3a:	30 cf       	rjmp	.-416    	; 0x289c <_sendCmd>
    2a3c:	08 95       	ret

00002a3e <Si114xPsAlsAuto>:
    2a3e:	6f e0       	ldi	r22, 0x0F	; 15
    2a40:	2d cf       	rjmp	.-422    	; 0x289c <_sendCmd>
    2a42:	08 95       	ret

00002a44 <Si114xParamSet>:
    2a44:	cf 92       	push	r12
    2a46:	df 92       	push	r13
    2a48:	ef 92       	push	r14
    2a4a:	ff 92       	push	r15
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	cf 93       	push	r28
    2a52:	df 93       	push	r29
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <Si114xParamSet+0x12>
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
    2a5a:	8c 01       	movw	r16, r24
    2a5c:	d6 2e       	mov	r13, r22
    2a5e:	c4 2e       	mov	r12, r20
    2a60:	60 e3       	ldi	r22, 0x30	; 48
    2a62:	c8 01       	movw	r24, r16
    2a64:	6b d5       	rcall	.+2774   	; 0x353c <Si114xReadFromRegister>
    2a66:	81 30       	cpi	r24, 0x01	; 1
    2a68:	91 05       	cpc	r25, r1
    2a6a:	79 f0       	breq	.+30     	; 0x2a8a <Si114xParamSet+0x46>
    2a6c:	99 23       	and	r25, r25
    2a6e:	c4 f7       	brge	.-16     	; 0x2a60 <Si114xParamSet+0x1c>
    2a70:	1e c0       	rjmp	.+60     	; 0x2aae <Si114xParamSet+0x6a>
    2a72:	60 e2       	ldi	r22, 0x20	; 32
    2a74:	c8 01       	movw	r24, r16
    2a76:	62 d5       	rcall	.+2756   	; 0x353c <Si114xReadFromRegister>
    2a78:	8e 15       	cp	r24, r14
    2a7a:	9f 05       	cpc	r25, r15
    2a7c:	d1 f3       	breq	.-12     	; 0x2a72 <Si114xParamSet+0x2e>
    2a7e:	18 16       	cp	r1, r24
    2a80:	19 06       	cpc	r1, r25
    2a82:	ac f4       	brge	.+42     	; 0x2aae <Si114xParamSet+0x6a>
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	12 c0       	rjmp	.+36     	; 0x2aae <Si114xParamSet+0x6a>
    2a8a:	60 e2       	ldi	r22, 0x20	; 32
    2a8c:	c8 01       	movw	r24, r16
    2a8e:	56 d5       	rcall	.+2732   	; 0x353c <Si114xReadFromRegister>
    2a90:	7c 01       	movw	r14, r24
    2a92:	c9 82       	std	Y+1, r12	; 0x01
    2a94:	8d 2d       	mov	r24, r13
    2a96:	8f 71       	andi	r24, 0x1F	; 31
    2a98:	80 56       	subi	r24, 0x60	; 96
    2a9a:	8a 83       	std	Y+2, r24	; 0x02
    2a9c:	9e 01       	movw	r18, r28
    2a9e:	2f 5f       	subi	r18, 0xFF	; 255
    2aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa2:	42 e0       	ldi	r20, 0x02	; 2
    2aa4:	67 e1       	ldi	r22, 0x17	; 23
    2aa6:	c8 01       	movw	r24, r16
    2aa8:	65 d5       	rcall	.+2762   	; 0x3574 <Si114xBlockWrite>
    2aaa:	00 97       	sbiw	r24, 0x00	; 0
    2aac:	11 f3       	breq	.-60     	; 0x2a72 <Si114xParamSet+0x2e>
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	df 91       	pop	r29
    2ab4:	cf 91       	pop	r28
    2ab6:	1f 91       	pop	r17
    2ab8:	0f 91       	pop	r16
    2aba:	ff 90       	pop	r15
    2abc:	ef 90       	pop	r14
    2abe:	df 90       	pop	r13
    2ac0:	cf 90       	pop	r12
    2ac2:	08 95       	ret

00002ac4 <Si114xPauseAll>:
    2ac4:	cf 93       	push	r28
    2ac6:	df 93       	push	r29
    2ac8:	ec 01       	movw	r28, r24
    2aca:	60 e2       	ldi	r22, 0x20	; 32
    2acc:	ce 01       	movw	r24, r28
    2ace:	36 d5       	rcall	.+2668   	; 0x353c <Si114xReadFromRegister>
    2ad0:	89 2b       	or	r24, r25
    2ad2:	19 f0       	breq	.+6      	; 0x2ada <Si114xPauseAll+0x16>
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	ad df       	rcall	.-166    	; 0x2a32 <Si114xNop>
    2ad8:	f8 cf       	rjmp	.-16     	; 0x2aca <Si114xPauseAll+0x6>
    2ada:	6b e0       	ldi	r22, 0x0B	; 11
    2adc:	ce 01       	movw	r24, r28
    2ade:	de de       	rcall	.-580    	; 0x289c <_sendCmd>
    2ae0:	60 e2       	ldi	r22, 0x20	; 32
    2ae2:	ce 01       	movw	r24, r28
    2ae4:	2b d5       	rcall	.+2646   	; 0x353c <Si114xReadFromRegister>
    2ae6:	89 2b       	or	r24, r25
    2ae8:	d9 f3       	breq	.-10     	; 0x2ae0 <Si114xPauseAll+0x1c>
    2aea:	60 e2       	ldi	r22, 0x20	; 32
    2aec:	ce 01       	movw	r24, r28
    2aee:	26 d5       	rcall	.+2636   	; 0x353c <Si114xReadFromRegister>
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	59 f7       	brne	.-42     	; 0x2aca <Si114xPauseAll+0x6>
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	08 95       	ret

00002afe <si114x_reset>:
    2afe:	0f 93       	push	r16
    2b00:	1f 93       	push	r17
    2b02:	cf 93       	push	r28
    2b04:	df 93       	push	r29
    2b06:	ec 01       	movw	r28, r24
    2b08:	40 e0       	ldi	r20, 0x00	; 0
    2b0a:	68 e0       	ldi	r22, 0x08	; 8
    2b0c:	fa d4       	rcall	.+2548   	; 0x3502 <Si114xWriteToRegister>
    2b0e:	8c 01       	movw	r16, r24
    2b10:	ce 01       	movw	r24, r28
    2b12:	d8 df       	rcall	.-80     	; 0x2ac4 <Si114xPauseAll>
    2b14:	08 0f       	add	r16, r24
    2b16:	19 1f       	adc	r17, r25
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	68 e0       	ldi	r22, 0x08	; 8
    2b1c:	ce 01       	movw	r24, r28
    2b1e:	f1 d4       	rcall	.+2530   	; 0x3502 <Si114xWriteToRegister>
    2b20:	08 0f       	add	r16, r24
    2b22:	19 1f       	adc	r17, r25
    2b24:	40 e0       	ldi	r20, 0x00	; 0
    2b26:	64 e0       	ldi	r22, 0x04	; 4
    2b28:	ce 01       	movw	r24, r28
    2b2a:	eb d4       	rcall	.+2518   	; 0x3502 <Si114xWriteToRegister>
    2b2c:	08 0f       	add	r16, r24
    2b2e:	19 1f       	adc	r17, r25
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	65 e0       	ldi	r22, 0x05	; 5
    2b34:	ce 01       	movw	r24, r28
    2b36:	e5 d4       	rcall	.+2506   	; 0x3502 <Si114xWriteToRegister>
    2b38:	08 0f       	add	r16, r24
    2b3a:	19 1f       	adc	r17, r25
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	66 e0       	ldi	r22, 0x06	; 6
    2b40:	ce 01       	movw	r24, r28
    2b42:	df d4       	rcall	.+2494   	; 0x3502 <Si114xWriteToRegister>
    2b44:	08 0f       	add	r16, r24
    2b46:	19 1f       	adc	r17, r25
    2b48:	40 e0       	ldi	r20, 0x00	; 0
    2b4a:	63 e0       	ldi	r22, 0x03	; 3
    2b4c:	ce 01       	movw	r24, r28
    2b4e:	d9 d4       	rcall	.+2482   	; 0x3502 <Si114xWriteToRegister>
    2b50:	08 0f       	add	r16, r24
    2b52:	19 1f       	adc	r17, r25
    2b54:	4f ef       	ldi	r20, 0xFF	; 255
    2b56:	61 e2       	ldi	r22, 0x21	; 33
    2b58:	ce 01       	movw	r24, r28
    2b5a:	d3 d4       	rcall	.+2470   	; 0x3502 <Si114xWriteToRegister>
    2b5c:	08 0f       	add	r16, r24
    2b5e:	19 1f       	adc	r17, r25
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	68 e1       	ldi	r22, 0x18	; 24
    2b64:	ce 01       	movw	r24, r28
    2b66:	cd d4       	rcall	.+2458   	; 0x3502 <Si114xWriteToRegister>
    2b68:	08 0f       	add	r16, r24
    2b6a:	19 1f       	adc	r17, r25
    2b6c:	13 d5       	rcall	.+2598   	; 0x3594 <delay_10ms>
    2b6e:	47 e1       	ldi	r20, 0x17	; 23
    2b70:	67 e0       	ldi	r22, 0x07	; 7
    2b72:	ce 01       	movw	r24, r28
    2b74:	c6 d4       	rcall	.+2444   	; 0x3502 <Si114xWriteToRegister>
    2b76:	80 0f       	add	r24, r16
    2b78:	91 1f       	adc	r25, r17
    2b7a:	df 91       	pop	r29
    2b7c:	cf 91       	pop	r28
    2b7e:	1f 91       	pop	r17
    2b80:	0f 91       	pop	r16
    2b82:	08 95       	ret

00002b84 <si114x_init_ps1>:
    2b84:	0f 93       	push	r16
    2b86:	1f 93       	push	r17
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	ec 01       	movw	r28, r24
    2b8e:	40 e0       	ldi	r20, 0x00	; 0
    2b90:	68 e0       	ldi	r22, 0x08	; 8
    2b92:	b7 d4       	rcall	.+2414   	; 0x3502 <Si114xWriteToRegister>
    2b94:	8c 01       	movw	r16, r24
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	6a e0       	ldi	r22, 0x0A	; 10
    2b9a:	ce 01       	movw	r24, r28
    2b9c:	b2 d4       	rcall	.+2404   	; 0x3502 <Si114xWriteToRegister>
    2b9e:	08 0f       	add	r16, r24
    2ba0:	19 1f       	adc	r17, r25
    2ba2:	40 e0       	ldi	r20, 0x00	; 0
    2ba4:	69 e0       	ldi	r22, 0x09	; 9
    2ba6:	ce 01       	movw	r24, r28
    2ba8:	ac d4       	rcall	.+2392   	; 0x3502 <Si114xWriteToRegister>
    2baa:	08 0f       	add	r16, r24
    2bac:	19 1f       	adc	r17, r25
    2bae:	ce 01       	movw	r24, r28
    2bb0:	a6 df       	rcall	.-180    	; 0x2afe <si114x_reset>
    2bb2:	08 0f       	add	r16, r24
    2bb4:	19 1f       	adc	r17, r25
    2bb6:	4f e0       	ldi	r20, 0x0F	; 15
    2bb8:	6f e0       	ldi	r22, 0x0F	; 15
    2bba:	ce 01       	movw	r24, r28
    2bbc:	a2 d4       	rcall	.+2372   	; 0x3502 <Si114xWriteToRegister>
    2bbe:	08 0f       	add	r16, r24
    2bc0:	19 1f       	adc	r17, r25
    2bc2:	41 e0       	ldi	r20, 0x01	; 1
    2bc4:	61 e0       	ldi	r22, 0x01	; 1
    2bc6:	ce 01       	movw	r24, r28
    2bc8:	3d df       	rcall	.-390    	; 0x2a44 <Si114xParamSet>
    2bca:	08 0f       	add	r16, r24
    2bcc:	19 1f       	adc	r17, r25
    2bce:	43 e0       	ldi	r20, 0x03	; 3
    2bd0:	63 e0       	ldi	r22, 0x03	; 3
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	96 d4       	rcall	.+2348   	; 0x3502 <Si114xWriteToRegister>
    2bd6:	08 0f       	add	r16, r24
    2bd8:	19 1f       	adc	r17, r25
    2bda:	44 e0       	ldi	r20, 0x04	; 4
    2bdc:	64 e0       	ldi	r22, 0x04	; 4
    2bde:	ce 01       	movw	r24, r28
    2be0:	90 d4       	rcall	.+2336   	; 0x3502 <Si114xWriteToRegister>
    2be2:	08 0f       	add	r16, r24
    2be4:	19 1f       	adc	r17, r25
    2be6:	40 e3       	ldi	r20, 0x30	; 48
    2be8:	65 e0       	ldi	r22, 0x05	; 5
    2bea:	ce 01       	movw	r24, r28
    2bec:	8a d4       	rcall	.+2324   	; 0x3502 <Si114xWriteToRegister>
    2bee:	08 0f       	add	r16, r24
    2bf0:	19 1f       	adc	r17, r25
    2bf2:	43 e0       	ldi	r20, 0x03	; 3
    2bf4:	67 e0       	ldi	r22, 0x07	; 7
    2bf6:	ce 01       	movw	r24, r28
    2bf8:	25 df       	rcall	.-438    	; 0x2a44 <Si114xParamSet>
    2bfa:	08 0f       	add	r16, r24
    2bfc:	19 1f       	adc	r17, r25
    2bfe:	43 e0       	ldi	r20, 0x03	; 3
    2c00:	6e e0       	ldi	r22, 0x0E	; 14
    2c02:	ce 01       	movw	r24, r28
    2c04:	1f df       	rcall	.-450    	; 0x2a44 <Si114xParamSet>
    2c06:	08 0f       	add	r16, r24
    2c08:	19 1f       	adc	r17, r25
    2c0a:	40 e0       	ldi	r20, 0x00	; 0
    2c0c:	6b e0       	ldi	r22, 0x0B	; 11
    2c0e:	ce 01       	movw	r24, r28
    2c10:	19 df       	rcall	.-462    	; 0x2a44 <Si114xParamSet>
    2c12:	08 0f       	add	r16, r24
    2c14:	19 1f       	adc	r17, r25
    2c16:	41 e0       	ldi	r20, 0x01	; 1
    2c18:	62 e0       	ldi	r22, 0x02	; 2
    2c1a:	ce 01       	movw	r24, r28
    2c1c:	13 df       	rcall	.-474    	; 0x2a44 <Si114xParamSet>
    2c1e:	08 0f       	add	r16, r24
    2c20:	19 1f       	adc	r17, r25
    2c22:	40 e7       	ldi	r20, 0x70	; 112
    2c24:	6a e0       	ldi	r22, 0x0A	; 10
    2c26:	ce 01       	movw	r24, r28
    2c28:	0d df       	rcall	.-486    	; 0x2a44 <Si114xParamSet>
    2c2a:	08 0f       	add	r16, r24
    2c2c:	19 1f       	adc	r17, r25
    2c2e:	44 e0       	ldi	r20, 0x04	; 4
    2c30:	6c e0       	ldi	r22, 0x0C	; 12
    2c32:	ce 01       	movw	r24, r28
    2c34:	07 df       	rcall	.-498    	; 0x2a44 <Si114xParamSet>
    2c36:	08 0f       	add	r16, r24
    2c38:	19 1f       	adc	r17, r25
    2c3a:	40 e8       	ldi	r20, 0x80	; 128
    2c3c:	61 e1       	ldi	r22, 0x11	; 17
    2c3e:	ce 01       	movw	r24, r28
    2c40:	60 d4       	rcall	.+2240   	; 0x3502 <Si114xWriteToRegister>
    2c42:	08 0f       	add	r16, r24
    2c44:	19 1f       	adc	r17, r25
    2c46:	4c e0       	ldi	r20, 0x0C	; 12
    2c48:	62 e1       	ldi	r22, 0x12	; 18
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	5a d4       	rcall	.+2228   	; 0x3502 <Si114xWriteToRegister>
    2c4e:	08 0f       	add	r16, r24
    2c50:	19 1f       	adc	r17, r25
    2c52:	44 e9       	ldi	r20, 0x94	; 148
    2c54:	68 e0       	ldi	r22, 0x08	; 8
    2c56:	ce 01       	movw	r24, r28
    2c58:	54 d4       	rcall	.+2216   	; 0x3502 <Si114xWriteToRegister>
    2c5a:	08 0f       	add	r16, r24
    2c5c:	19 1f       	adc	r17, r25
    2c5e:	48 e0       	ldi	r20, 0x08	; 8
    2c60:	6a e0       	ldi	r22, 0x0A	; 10
    2c62:	ce 01       	movw	r24, r28
    2c64:	4e d4       	rcall	.+2204   	; 0x3502 <Si114xWriteToRegister>
    2c66:	08 0f       	add	r16, r24
    2c68:	19 1f       	adc	r17, r25
    2c6a:	ce 01       	movw	r24, r28
    2c6c:	e5 de       	rcall	.-566    	; 0x2a38 <Si114xPsAuto>
    2c6e:	80 0f       	add	r24, r16
    2c70:	91 1f       	adc	r25, r17
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	08 95       	ret

00002c7c <si114x_setup_ps1_only>:
    2c7c:	8a e5       	ldi	r24, 0x5A	; 90
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	3e df       	rcall	.-388    	; 0x2afe <si114x_reset>
    2c82:	2f ef       	ldi	r18, 0xFF	; 255
    2c84:	81 ee       	ldi	r24, 0xE1	; 225
    2c86:	94 e0       	ldi	r25, 0x04	; 4
    2c88:	21 50       	subi	r18, 0x01	; 1
    2c8a:	80 40       	sbci	r24, 0x00	; 0
    2c8c:	90 40       	sbci	r25, 0x00	; 0
    2c8e:	e1 f7       	brne	.-8      	; 0x2c88 <si114x_setup_ps1_only+0xc>
    2c90:	00 c0       	rjmp	.+0      	; 0x2c92 <si114x_setup_ps1_only+0x16>
    2c92:	00 00       	nop
    2c94:	8a e5       	ldi	r24, 0x5A	; 90
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	75 df       	rcall	.-278    	; 0x2b84 <si114x_init_ps1>
    2c9a:	bc cb       	rjmp	.-2184   	; 0x2414 <btn_si114x_enable_interrupt>
    2c9c:	08 95       	ret

00002c9e <si114x_init>:
    2c9e:	0f 93       	push	r16
    2ca0:	1f 93       	push	r17
    2ca2:	cf 93       	push	r28
    2ca4:	df 93       	push	r29
    2ca6:	ec 01       	movw	r28, r24
    2ca8:	40 e0       	ldi	r20, 0x00	; 0
    2caa:	68 e0       	ldi	r22, 0x08	; 8
    2cac:	2a d4       	rcall	.+2132   	; 0x3502 <Si114xWriteToRegister>
    2cae:	8c 01       	movw	r16, r24
    2cb0:	40 e0       	ldi	r20, 0x00	; 0
    2cb2:	6a e0       	ldi	r22, 0x0A	; 10
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	25 d4       	rcall	.+2122   	; 0x3502 <Si114xWriteToRegister>
    2cb8:	08 0f       	add	r16, r24
    2cba:	19 1f       	adc	r17, r25
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	69 e0       	ldi	r22, 0x09	; 9
    2cc0:	ce 01       	movw	r24, r28
    2cc2:	1f d4       	rcall	.+2110   	; 0x3502 <Si114xWriteToRegister>
    2cc4:	08 0f       	add	r16, r24
    2cc6:	19 1f       	adc	r17, r25
    2cc8:	ce 01       	movw	r24, r28
    2cca:	19 df       	rcall	.-462    	; 0x2afe <si114x_reset>
    2ccc:	08 0f       	add	r16, r24
    2cce:	19 1f       	adc	r17, r25
    2cd0:	4f ef       	ldi	r20, 0xFF	; 255
    2cd2:	6f e0       	ldi	r22, 0x0F	; 15
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	15 d4       	rcall	.+2090   	; 0x3502 <Si114xWriteToRegister>
    2cd8:	08 0f       	add	r16, r24
    2cda:	19 1f       	adc	r17, r25
    2cdc:	40 e0       	ldi	r20, 0x00	; 0
    2cde:	60 e1       	ldi	r22, 0x10	; 16
    2ce0:	ce 01       	movw	r24, r28
    2ce2:	0f d4       	rcall	.+2078   	; 0x3502 <Si114xWriteToRegister>
    2ce4:	08 0f       	add	r16, r24
    2ce6:	19 1f       	adc	r17, r25
    2ce8:	47 e7       	ldi	r20, 0x77	; 119
    2cea:	61 e0       	ldi	r22, 0x01	; 1
    2cec:	ce 01       	movw	r24, r28
    2cee:	aa de       	rcall	.-684    	; 0x2a44 <Si114xParamSet>
    2cf0:	08 0f       	add	r16, r24
    2cf2:	19 1f       	adc	r17, r25
    2cf4:	41 e0       	ldi	r20, 0x01	; 1
    2cf6:	63 e0       	ldi	r22, 0x03	; 3
    2cf8:	ce 01       	movw	r24, r28
    2cfa:	03 d4       	rcall	.+2054   	; 0x3502 <Si114xWriteToRegister>
    2cfc:	08 0f       	add	r16, r24
    2cfe:	19 1f       	adc	r17, r25
    2d00:	4d e1       	ldi	r20, 0x1D	; 29
    2d02:	64 e0       	ldi	r22, 0x04	; 4
    2d04:	ce 01       	movw	r24, r28
    2d06:	fd d3       	rcall	.+2042   	; 0x3502 <Si114xWriteToRegister>
    2d08:	08 0f       	add	r16, r24
    2d0a:	19 1f       	adc	r17, r25
    2d0c:	40 e0       	ldi	r20, 0x00	; 0
    2d0e:	65 e0       	ldi	r22, 0x05	; 5
    2d10:	ce 01       	movw	r24, r28
    2d12:	f7 d3       	rcall	.+2030   	; 0x3502 <Si114xWriteToRegister>
    2d14:	08 0f       	add	r16, r24
    2d16:	19 1f       	adc	r17, r25
    2d18:	40 e0       	ldi	r20, 0x00	; 0
    2d1a:	66 e0       	ldi	r22, 0x06	; 6
    2d1c:	ce 01       	movw	r24, r28
    2d1e:	f1 d3       	rcall	.+2018   	; 0x3502 <Si114xWriteToRegister>
    2d20:	08 0f       	add	r16, r24
    2d22:	19 1f       	adc	r17, r25
    2d24:	43 e0       	ldi	r20, 0x03	; 3
    2d26:	67 e0       	ldi	r22, 0x07	; 7
    2d28:	ce 01       	movw	r24, r28
    2d2a:	8c de       	rcall	.-744    	; 0x2a44 <Si114xParamSet>
    2d2c:	08 0f       	add	r16, r24
    2d2e:	19 1f       	adc	r17, r25
    2d30:	43 e0       	ldi	r20, 0x03	; 3
    2d32:	68 e0       	ldi	r22, 0x08	; 8
    2d34:	ce 01       	movw	r24, r28
    2d36:	86 de       	rcall	.-756    	; 0x2a44 <Si114xParamSet>
    2d38:	08 0f       	add	r16, r24
    2d3a:	19 1f       	adc	r17, r25
    2d3c:	43 e0       	ldi	r20, 0x03	; 3
    2d3e:	69 e0       	ldi	r22, 0x09	; 9
    2d40:	ce 01       	movw	r24, r28
    2d42:	80 de       	rcall	.-768    	; 0x2a44 <Si114xParamSet>
    2d44:	08 0f       	add	r16, r24
    2d46:	19 1f       	adc	r17, r25
    2d48:	43 e0       	ldi	r20, 0x03	; 3
    2d4a:	6e e0       	ldi	r22, 0x0E	; 14
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	7a de       	rcall	.-780    	; 0x2a44 <Si114xParamSet>
    2d50:	08 0f       	add	r16, r24
    2d52:	19 1f       	adc	r17, r25
    2d54:	40 e0       	ldi	r20, 0x00	; 0
    2d56:	6b e0       	ldi	r22, 0x0B	; 11
    2d58:	ce 01       	movw	r24, r28
    2d5a:	74 de       	rcall	.-792    	; 0x2a44 <Si114xParamSet>
    2d5c:	08 0f       	add	r16, r24
    2d5e:	19 1f       	adc	r17, r25
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	6e e1       	ldi	r22, 0x1E	; 30
    2d64:	ce 01       	movw	r24, r28
    2d66:	6e de       	rcall	.-804    	; 0x2a44 <Si114xParamSet>
    2d68:	08 0f       	add	r16, r24
    2d6a:	19 1f       	adc	r17, r25
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	61 e1       	ldi	r22, 0x11	; 17
    2d70:	ce 01       	movw	r24, r28
    2d72:	68 de       	rcall	.-816    	; 0x2a44 <Si114xParamSet>
    2d74:	08 0f       	add	r16, r24
    2d76:	19 1f       	adc	r17, r25
    2d78:	41 e2       	ldi	r20, 0x21	; 33
    2d7a:	62 e0       	ldi	r22, 0x02	; 2
    2d7c:	ce 01       	movw	r24, r28
    2d7e:	62 de       	rcall	.-828    	; 0x2a44 <Si114xParamSet>
    2d80:	08 0f       	add	r16, r24
    2d82:	19 1f       	adc	r17, r25
    2d84:	44 e0       	ldi	r20, 0x04	; 4
    2d86:	63 e0       	ldi	r22, 0x03	; 3
    2d88:	ce 01       	movw	r24, r28
    2d8a:	5c de       	rcall	.-840    	; 0x2a44 <Si114xParamSet>
    2d8c:	08 0f       	add	r16, r24
    2d8e:	19 1f       	adc	r17, r25
    2d90:	40 e7       	ldi	r20, 0x70	; 112
    2d92:	6a e0       	ldi	r22, 0x0A	; 10
    2d94:	ce 01       	movw	r24, r28
    2d96:	56 de       	rcall	.-852    	; 0x2a44 <Si114xParamSet>
    2d98:	08 0f       	add	r16, r24
    2d9a:	19 1f       	adc	r17, r25
    2d9c:	40 e7       	ldi	r20, 0x70	; 112
    2d9e:	6d e1       	ldi	r22, 0x1D	; 29
    2da0:	ce 01       	movw	r24, r28
    2da2:	50 de       	rcall	.-864    	; 0x2a44 <Si114xParamSet>
    2da4:	08 0f       	add	r16, r24
    2da6:	19 1f       	adc	r17, r25
    2da8:	40 e7       	ldi	r20, 0x70	; 112
    2daa:	60 e1       	ldi	r22, 0x10	; 16
    2dac:	ce 01       	movw	r24, r28
    2dae:	4a de       	rcall	.-876    	; 0x2a44 <Si114xParamSet>
    2db0:	08 0f       	add	r16, r24
    2db2:	19 1f       	adc	r17, r25
    2db4:	44 e0       	ldi	r20, 0x04	; 4
    2db6:	6c e0       	ldi	r22, 0x0C	; 12
    2db8:	ce 01       	movw	r24, r28
    2dba:	44 de       	rcall	.-888    	; 0x2a44 <Si114xParamSet>
    2dbc:	08 0f       	add	r16, r24
    2dbe:	19 1f       	adc	r17, r25
    2dc0:	40 e2       	ldi	r20, 0x20	; 32
    2dc2:	6f e1       	ldi	r22, 0x1F	; 31
    2dc4:	ce 01       	movw	r24, r28
    2dc6:	3e de       	rcall	.-900    	; 0x2a44 <Si114xParamSet>
    2dc8:	08 0f       	add	r16, r24
    2dca:	19 1f       	adc	r17, r25
    2dcc:	40 e2       	ldi	r20, 0x20	; 32
    2dce:	62 e1       	ldi	r22, 0x12	; 18
    2dd0:	ce 01       	movw	r24, r28
    2dd2:	38 de       	rcall	.-912    	; 0x2a44 <Si114xParamSet>
    2dd4:	08 0f       	add	r16, r24
    2dd6:	19 1f       	adc	r17, r25
    2dd8:	44 e9       	ldi	r20, 0x94	; 148
    2dda:	68 e0       	ldi	r22, 0x08	; 8
    2ddc:	ce 01       	movw	r24, r28
    2dde:	91 d3       	rcall	.+1826   	; 0x3502 <Si114xWriteToRegister>
    2de0:	08 0f       	add	r16, r24
    2de2:	19 1f       	adc	r17, r25
    2de4:	48 e0       	ldi	r20, 0x08	; 8
    2de6:	6a e0       	ldi	r22, 0x0A	; 10
    2de8:	ce 01       	movw	r24, r28
    2dea:	8b d3       	rcall	.+1814   	; 0x3502 <Si114xWriteToRegister>
    2dec:	08 0f       	add	r16, r24
    2dee:	19 1f       	adc	r17, r25
    2df0:	48 e0       	ldi	r20, 0x08	; 8
    2df2:	69 e0       	ldi	r22, 0x09	; 9
    2df4:	ce 01       	movw	r24, r28
    2df6:	85 d3       	rcall	.+1802   	; 0x3502 <Si114xWriteToRegister>
    2df8:	08 0f       	add	r16, r24
    2dfa:	19 1f       	adc	r17, r25
    2dfc:	ce 01       	movw	r24, r28
    2dfe:	1f de       	rcall	.-962    	; 0x2a3e <Si114xPsAlsAuto>
    2e00:	80 0f       	add	r24, r16
    2e02:	91 1f       	adc	r25, r17
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	1f 91       	pop	r17
    2e0a:	0f 91       	pop	r16
    2e0c:	08 95       	ret

00002e0e <si114x_setup>:
    2e0e:	e0 e4       	ldi	r30, 0x40	; 64
    2e10:	f8 e0       	ldi	r31, 0x08	; 8
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	80 83       	st	Z, r24
    2e16:	90 e8       	ldi	r25, 0x80	; 128
    2e18:	96 a3       	std	Z+38, r25	; 0x26
    2e1a:	9c e0       	ldi	r25, 0x0C	; 12
    2e1c:	97 a3       	std	Z+39, r25	; 0x27
    2e1e:	86 83       	std	Z+6, r24	; 0x06
    2e20:	8a e5       	ldi	r24, 0x5A	; 90
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	6c de       	rcall	.-808    	; 0x2afe <si114x_reset>
    2e26:	2f ef       	ldi	r18, 0xFF	; 255
    2e28:	81 ee       	ldi	r24, 0xE1	; 225
    2e2a:	94 e0       	ldi	r25, 0x04	; 4
    2e2c:	21 50       	subi	r18, 0x01	; 1
    2e2e:	80 40       	sbci	r24, 0x00	; 0
    2e30:	90 40       	sbci	r25, 0x00	; 0
    2e32:	e1 f7       	brne	.-8      	; 0x2e2c <si114x_setup+0x1e>
    2e34:	00 c0       	rjmp	.+0      	; 0x2e36 <si114x_setup+0x28>
    2e36:	00 00       	nop
    2e38:	8a e5       	ldi	r24, 0x5A	; 90
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	30 cf       	rjmp	.-416    	; 0x2c9e <si114x_init>
    2e3e:	08 95       	ret

00002e40 <si114x_baseline_calibration>:
    2e40:	ef 92       	push	r14
    2e42:	ff 92       	push	r15
    2e44:	0f 93       	push	r16
    2e46:	1f 93       	push	r17
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	ec 01       	movw	r28, r24
    2e4e:	df df       	rcall	.-66     	; 0x2e0e <si114x_setup>
    2e50:	80 e8       	ldi	r24, 0x80	; 128
    2e52:	80 93 08 20 	sts	0x2008, r24
    2e56:	60 e0       	ldi	r22, 0x00	; 0
    2e58:	70 e0       	ldi	r23, 0x00	; 0
    2e5a:	82 e5       	ldi	r24, 0x52	; 82
    2e5c:	94 e2       	ldi	r25, 0x24	; 36
    2e5e:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
    2e62:	0f 2e       	mov	r0, r31
    2e64:	f2 ef       	ldi	r31, 0xF2	; 242
    2e66:	ef 2e       	mov	r14, r31
    2e68:	f4 e2       	ldi	r31, 0x24	; 36
    2e6a:	ff 2e       	mov	r15, r31
    2e6c:	f0 2d       	mov	r31, r0
    2e6e:	01 e0       	ldi	r16, 0x01	; 1
    2e70:	10 e0       	ldi	r17, 0x00	; 0
    2e72:	21 e0       	ldi	r18, 0x01	; 1
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	48 e5       	ldi	r20, 0x58	; 88
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	65 e0       	ldi	r22, 0x05	; 5
    2e7c:	70 e0       	ldi	r23, 0x00	; 0
    2e7e:	85 e0       	ldi	r24, 0x05	; 5
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <display_draw_char>
    2e86:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	5f dd       	rcall	.-1346   	; 0x294c <si114x_get_data>
    2e8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e90:	8f 93       	push	r24
    2e92:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e94:	8f 93       	push	r24
    2e96:	ff 92       	push	r15
    2e98:	ef 92       	push	r14
    2e9a:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <printf>
    2e9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ea0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	0f 90       	pop	r0
    2eaa:	81 38       	cpi	r24, 0x81	; 129
    2eac:	2c e0       	ldi	r18, 0x0C	; 12
    2eae:	92 07       	cpc	r25, r18
    2eb0:	f0 f6       	brcc	.-68     	; 0x2e6e <si114x_baseline_calibration+0x2e>
    2eb2:	80 93 0f 2a 	sts	0x2A0F, r24
    2eb6:	90 93 10 2a 	sts	0x2A10, r25
    2eba:	8f ef       	ldi	r24, 0xFF	; 255
    2ebc:	97 ea       	ldi	r25, 0xA7	; 167
    2ebe:	21 e6       	ldi	r18, 0x61	; 97
    2ec0:	81 50       	subi	r24, 0x01	; 1
    2ec2:	90 40       	sbci	r25, 0x00	; 0
    2ec4:	20 40       	sbci	r18, 0x00	; 0
    2ec6:	e1 f7       	brne	.-8      	; 0x2ec0 <si114x_baseline_calibration+0x80>
    2ec8:	00 c0       	rjmp	.+0      	; 0x2eca <si114x_baseline_calibration+0x8a>
    2eca:	00 00       	nop
    2ecc:	00 e8       	ldi	r16, 0x80	; 128
    2ece:	10 e0       	ldi	r17, 0x00	; 0
    2ed0:	80 91 87 29 	lds	r24, 0x2987
    2ed4:	90 91 88 29 	lds	r25, 0x2988
    2ed8:	8a 83       	std	Y+2, r24	; 0x02
    2eda:	9b 83       	std	Y+3, r25	; 0x03
    2edc:	ce 01       	movw	r24, r28
    2ede:	36 dd       	rcall	.-1428   	; 0x294c <si114x_get_data>
    2ee0:	be 01       	movw	r22, r28
    2ee2:	8a e5       	ldi	r24, 0x5A	; 90
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	17 d2       	rcall	.+1070   	; 0x3316 <si114x_process_samples>
    2ee8:	01 50       	subi	r16, 0x01	; 1
    2eea:	11 09       	sbc	r17, r1
    2eec:	01 15       	cp	r16, r1
    2eee:	11 05       	cpc	r17, r1
    2ef0:	79 f7       	brne	.-34     	; 0x2ed0 <si114x_baseline_calibration+0x90>
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	0f 91       	pop	r16
    2efa:	ff 90       	pop	r15
    2efc:	ef 90       	pop	r14
    2efe:	08 95       	ret

00002f00 <__vector_20>:

ISR(TCC1_OVF_vect) {
    2f00:	1f 92       	push	r1
    2f02:	0f 92       	push	r0
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	0f 92       	push	r0
    2f08:	11 24       	eor	r1, r1
    2f0a:	8f 93       	push	r24
    2f0c:	9f 93       	push	r25
	counter++;
    2f0e:	80 91 87 29 	lds	r24, 0x2987
    2f12:	90 91 88 29 	lds	r25, 0x2988
    2f16:	01 96       	adiw	r24, 0x01	; 1
    2f18:	80 93 87 29 	sts	0x2987, r24
    2f1c:	90 93 88 29 	sts	0x2988, r25
}
    2f20:	9f 91       	pop	r25
    2f22:	8f 91       	pop	r24
    2f24:	0f 90       	pop	r0
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	0f 90       	pop	r0
    2f2a:	1f 90       	pop	r1
    2f2c:	18 95       	reti

00002f2e <isIRStable>:
        }
    }
}

char isIRStable( SI114X_IRQ_SAMPLE *samples)
{
    2f2e:	cf 92       	push	r12
    2f30:	df 92       	push	r13
    2f32:	ef 92       	push	r14
    2f34:	ff 92       	push	r15
    2f36:	0f 93       	push	r16
    2f38:	1f 93       	push	r17
                                        //
    u32 xdata IR = (u32) samples->ir; // Make a copy of ALS IR Reading
    
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 
    2f3a:	40 91 98 29 	lds	r20, 0x2998
    2f3e:	50 91 99 29 	lds	r21, 0x2999
    2f42:	60 91 9a 29 	lds	r22, 0x299A
    2f46:	70 91 9b 29 	lds	r23, 0x299B
    2f4a:	45 2b       	or	r20, r21
    2f4c:	46 2b       	or	r20, r22
    2f4e:	47 2b       	or	r20, r23
    2f50:	71 f4       	brne	.+28     	; 0x2f6e <isIRStable+0x40>
    2f52:	fc 01       	movw	r30, r24
    2f54:	40 85       	ldd	r20, Z+8	; 0x08
    2f56:	51 85       	ldd	r21, Z+9	; 0x09
    2f58:	60 e0       	ldi	r22, 0x00	; 0
    2f5a:	70 e0       	ldi	r23, 0x00	; 0
    2f5c:	40 93 98 29 	sts	0x2998, r20
    2f60:	50 93 99 29 	sts	0x2999, r21
    2f64:	60 93 9a 29 	sts	0x299A, r22
    2f68:	70 93 9b 29 	sts	0x299B, r23
    2f6c:	07 c0       	rjmp	.+14     	; 0x2f7c <isIRStable+0x4e>

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    2f6e:	fc 01       	movw	r30, r24
    2f70:	20 85       	ldd	r18, Z+8	; 0x08
    2f72:	31 85       	ldd	r19, Z+9	; 0x09
    2f74:	21 38       	cpi	r18, 0x81	; 129
    2f76:	3b 4b       	sbci	r19, 0xBB	; 187
    2f78:	08 f0       	brcs	.+2      	; 0x2f7c <isIRStable+0x4e>
    2f7a:	53 c0       	rjmp	.+166    	; 0x3022 <__stack+0x23>

    if( samples->ir < (IRlast + IRlast/2) && samples->ir > (IRlast - IRlast/2))
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	40 85       	ldd	r20, Z+8	; 0x08
    2f80:	51 85       	ldd	r21, Z+9	; 0x09
    2f82:	60 e0       	ldi	r22, 0x00	; 0
    2f84:	70 e0       	ldi	r23, 0x00	; 0
    2f86:	80 91 98 29 	lds	r24, 0x2998
    2f8a:	90 91 99 29 	lds	r25, 0x2999
    2f8e:	a0 91 9a 29 	lds	r26, 0x299A
    2f92:	b0 91 9b 29 	lds	r27, 0x299B
    2f96:	8c 01       	movw	r16, r24
    2f98:	9d 01       	movw	r18, r26
    2f9a:	36 95       	lsr	r19
    2f9c:	27 95       	ror	r18
    2f9e:	17 95       	ror	r17
    2fa0:	07 95       	ror	r16
    2fa2:	68 01       	movw	r12, r16
    2fa4:	79 01       	movw	r14, r18
    2fa6:	c8 0e       	add	r12, r24
    2fa8:	d9 1e       	adc	r13, r25
    2faa:	ea 1e       	adc	r14, r26
    2fac:	fb 1e       	adc	r15, r27
    2fae:	4c 15       	cp	r20, r12
    2fb0:	5d 05       	cpc	r21, r13
    2fb2:	6e 05       	cpc	r22, r14
    2fb4:	7f 05       	cpc	r23, r15
    2fb6:	58 f5       	brcc	.+86     	; 0x300e <__stack+0xf>
    2fb8:	6c 01       	movw	r12, r24
    2fba:	7d 01       	movw	r14, r26
    2fbc:	c0 1a       	sub	r12, r16
    2fbe:	d1 0a       	sbc	r13, r17
    2fc0:	e2 0a       	sbc	r14, r18
    2fc2:	f3 0a       	sbc	r15, r19
    2fc4:	c4 16       	cp	r12, r20
    2fc6:	d5 06       	cpc	r13, r21
    2fc8:	e6 06       	cpc	r14, r22
    2fca:	f7 06       	cpc	r15, r23
    2fcc:	00 f5       	brcc	.+64     	; 0x300e <__stack+0xf>
    {
        // If IR is within 3 dB, declare it stable
        // and perform some averaging
        IRlast = (samples->ir + (IRlast*3)) / 4;
    2fce:	8c 01       	movw	r16, r24
    2fd0:	9d 01       	movw	r18, r26
    2fd2:	00 0f       	add	r16, r16
    2fd4:	11 1f       	adc	r17, r17
    2fd6:	22 1f       	adc	r18, r18
    2fd8:	33 1f       	adc	r19, r19
    2fda:	80 0f       	add	r24, r16
    2fdc:	91 1f       	adc	r25, r17
    2fde:	a2 1f       	adc	r26, r18
    2fe0:	b3 1f       	adc	r27, r19
    2fe2:	48 0f       	add	r20, r24
    2fe4:	59 1f       	adc	r21, r25
    2fe6:	6a 1f       	adc	r22, r26
    2fe8:	7b 1f       	adc	r23, r27
    2fea:	76 95       	lsr	r23
    2fec:	67 95       	ror	r22
    2fee:	57 95       	ror	r21
    2ff0:	47 95       	ror	r20
    2ff2:	76 95       	lsr	r23
    2ff4:	67 95       	ror	r22
    2ff6:	57 95       	ror	r21
    2ff8:	47 95       	ror	r20
    2ffa:	40 93 98 29 	sts	0x2998, r20
    2ffe:	50 93 99 29 	sts	0x2999, r21
    3002:	60 93 9a 29 	sts	0x299A, r22
    3006:	70 93 9b 29 	sts	0x299B, r23
        return 1;
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	0b c0       	rjmp	.+22     	; 0x3024 <__stack+0x25>
    }
    else
    {
        // Otherwise, return false and update
        // new IRlast value for next time
        IRlast = samples->ir;
    300e:	40 93 98 29 	sts	0x2998, r20
    3012:	50 93 99 29 	sts	0x2999, r21
    3016:	60 93 9a 29 	sts	0x299A, r22
    301a:	70 93 9b 29 	sts	0x299B, r23
        return 0;
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	01 c0       	rjmp	.+2      	; 0x3024 <__stack+0x25>
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    3022:	80 e0       	ldi	r24, 0x00	; 0
        // new IRlast value for next time
        IRlast = samples->ir;
        return 0;
    }
    return 0;
}
    3024:	1f 91       	pop	r17
    3026:	0f 91       	pop	r16
    3028:	ff 90       	pop	r15
    302a:	ef 90       	pop	r14
    302c:	df 90       	pop	r13
    302e:	cf 90       	pop	r12
    3030:	08 95       	ret

00003032 <IRCompensation>:
//             use { 11, 33, 33 }
//          Sm PD, PSRANGE = 1 
//             use { 23, 64, 56 }
////////////////////////////////////////////////////////////////////////////////
void IRCompensation(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u8 ircorrection[])
{
    3032:	0f 93       	push	r16
    3034:	1f 93       	push	r17
    3036:	cf 93       	push	r28
    3038:	df 93       	push	r29
    303a:	eb 01       	movw	r28, r22
    // Calculate correction factor based on the ALS IR + PS reading 
    // subtracting out the 256 count offset contained in both measurements
    // Full equation comes out to:
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    303c:	81 30       	cpi	r24, 0x01	; 1
    303e:	29 f1       	breq	.+74     	; 0x308a <IRCompensation+0x58>
    3040:	20 f0       	brcs	.+8      	; 0x304a <IRCompensation+0x18>
    3042:	82 30       	cpi	r24, 0x02	; 2
    3044:	09 f4       	brne	.+2      	; 0x3048 <IRCompensation+0x16>
    3046:	41 c0       	rjmp	.+130    	; 0x30ca <IRCompensation+0x98>
    3048:	5f c0       	rjmp	.+190    	; 0x3108 <IRCompensation+0xd6>
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    304a:	0a 85       	ldd	r16, Y+10	; 0x0a
    304c:	1b 85       	ldd	r17, Y+11	; 0x0b
    304e:	fa 01       	movw	r30, r20
    3050:	a0 81       	ld	r26, Z
    3052:	88 85       	ldd	r24, Y+8	; 0x08
    3054:	99 85       	ldd	r25, Y+9	; 0x09
    3056:	a8 01       	movw	r20, r16
    3058:	60 e0       	ldi	r22, 0x00	; 0
    305a:	70 e0       	ldi	r23, 0x00	; 0
    305c:	48 0f       	add	r20, r24
    305e:	59 1f       	adc	r21, r25
    3060:	61 1d       	adc	r22, r1
    3062:	71 1d       	adc	r23, r1
    3064:	9a 01       	movw	r18, r20
    3066:	ab 01       	movw	r20, r22
    3068:	32 50       	subi	r19, 0x02	; 2
    306a:	41 09       	sbc	r20, r1
    306c:	51 09       	sbc	r21, r1
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	0e 94 ff 3a 	call	0x75fe	; 0x75fe <__muluhisi3>
            Correction = Correction/10000;
    3074:	20 e1       	ldi	r18, 0x10	; 16
    3076:	37 e2       	ldi	r19, 0x27	; 39
    3078:	40 e0       	ldi	r20, 0x00	; 0
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	0e 94 c8 3a 	call	0x7590	; 0x7590 <__udivmodsi4>
            samples->ps1 = samples->ps1 + Correction;    
    3080:	20 0f       	add	r18, r16
    3082:	31 1f       	adc	r19, r17
    3084:	2a 87       	std	Y+10, r18	; 0x0a
    3086:	3b 87       	std	Y+11, r19	; 0x0b
            break;
    3088:	3f c0       	rjmp	.+126    	; 0x3108 <IRCompensation+0xd6>
        case 1:
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
    308a:	0c 85       	ldd	r16, Y+12	; 0x0c
    308c:	1d 85       	ldd	r17, Y+13	; 0x0d
    308e:	fa 01       	movw	r30, r20
    3090:	a1 81       	ldd	r26, Z+1	; 0x01
    3092:	88 85       	ldd	r24, Y+8	; 0x08
    3094:	99 85       	ldd	r25, Y+9	; 0x09
    3096:	a8 01       	movw	r20, r16
    3098:	60 e0       	ldi	r22, 0x00	; 0
    309a:	70 e0       	ldi	r23, 0x00	; 0
    309c:	48 0f       	add	r20, r24
    309e:	59 1f       	adc	r21, r25
    30a0:	61 1d       	adc	r22, r1
    30a2:	71 1d       	adc	r23, r1
    30a4:	9a 01       	movw	r18, r20
    30a6:	ab 01       	movw	r20, r22
    30a8:	32 50       	subi	r19, 0x02	; 2
    30aa:	41 09       	sbc	r20, r1
    30ac:	51 09       	sbc	r21, r1
    30ae:	b0 e0       	ldi	r27, 0x00	; 0
    30b0:	0e 94 ff 3a 	call	0x75fe	; 0x75fe <__muluhisi3>
            Correction = Correction/10000;
    30b4:	20 e1       	ldi	r18, 0x10	; 16
    30b6:	37 e2       	ldi	r19, 0x27	; 39
    30b8:	40 e0       	ldi	r20, 0x00	; 0
    30ba:	50 e0       	ldi	r21, 0x00	; 0
    30bc:	0e 94 c8 3a 	call	0x7590	; 0x7590 <__udivmodsi4>
            samples->ps2 = samples->ps2 + Correction;            
    30c0:	20 0f       	add	r18, r16
    30c2:	31 1f       	adc	r19, r17
    30c4:	2c 87       	std	Y+12, r18	; 0x0c
    30c6:	3d 87       	std	Y+13, r19	; 0x0d
            break;
    30c8:	1f c0       	rjmp	.+62     	; 0x3108 <IRCompensation+0xd6>
		case 2:
			Correction = ((u32)samples->ir + (u32)(samples->ps3) - 512) * (u32) ircorrection[proxChannel];
    30ca:	0e 85       	ldd	r16, Y+14	; 0x0e
    30cc:	1f 85       	ldd	r17, Y+15	; 0x0f
    30ce:	fa 01       	movw	r30, r20
    30d0:	a2 81       	ldd	r26, Z+2	; 0x02
    30d2:	88 85       	ldd	r24, Y+8	; 0x08
    30d4:	99 85       	ldd	r25, Y+9	; 0x09
    30d6:	a8 01       	movw	r20, r16
    30d8:	60 e0       	ldi	r22, 0x00	; 0
    30da:	70 e0       	ldi	r23, 0x00	; 0
    30dc:	48 0f       	add	r20, r24
    30de:	59 1f       	adc	r21, r25
    30e0:	61 1d       	adc	r22, r1
    30e2:	71 1d       	adc	r23, r1
    30e4:	9a 01       	movw	r18, r20
    30e6:	ab 01       	movw	r20, r22
    30e8:	32 50       	subi	r19, 0x02	; 2
    30ea:	41 09       	sbc	r20, r1
    30ec:	51 09       	sbc	r21, r1
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	0e 94 ff 3a 	call	0x75fe	; 0x75fe <__muluhisi3>
			Correction = Correction/10000;
    30f4:	20 e1       	ldi	r18, 0x10	; 16
    30f6:	37 e2       	ldi	r19, 0x27	; 39
    30f8:	40 e0       	ldi	r20, 0x00	; 0
    30fa:	50 e0       	ldi	r21, 0x00	; 0
    30fc:	0e 94 c8 3a 	call	0x7590	; 0x7590 <__udivmodsi4>
			samples->ps3 = samples->ps3 + Correction;
    3100:	20 0f       	add	r18, r16
    3102:	31 1f       	adc	r19, r17
    3104:	2e 87       	std	Y+14, r18	; 0x0e
    3106:	3f 87       	std	Y+15, r19	; 0x0f
			break;
        default:
            break;
    }
}
    3108:	df 91       	pop	r29
    310a:	cf 91       	pop	r28
    310c:	1f 91       	pop	r17
    310e:	0f 91       	pop	r16
    3110:	08 95       	ret

00003112 <calcBaseline>:
//          50  = Lg PD, PSRANGE=0, 180 mA 
//          10  = Lg PD, PSRANGE=1, 360 mA 
//          4  = Sm PD, PSRANGE=1, 360 mA 
////////////////////////////////////////////////////////////////////////////////
void calcBaseline(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u16 noise_margin)
{
    3112:	0f 93       	push	r16
    3114:	1f 93       	push	r17
    3116:	cf 93       	push	r28
    3118:	df 93       	push	r29

    static u16 xdata dynamic_baseline[3] = {0,0,0};

    u16 xdata *pPS;

    switch(proxChannel)
    311a:	81 30       	cpi	r24, 0x01	; 1
    311c:	39 f0       	breq	.+14     	; 0x312c <calcBaseline+0x1a>
    311e:	18 f0       	brcs	.+6      	; 0x3126 <calcBaseline+0x14>
    3120:	82 30       	cpi	r24, 0x02	; 2
    3122:	39 f0       	breq	.+14     	; 0x3132 <calcBaseline+0x20>
    3124:	09 c0       	rjmp	.+18     	; 0x3138 <calcBaseline+0x26>
    {
        case 0:
            pPS = &samples->ps1;
    3126:	fb 01       	movw	r30, r22
    3128:	3a 96       	adiw	r30, 0x0a	; 10
            break;
    312a:	25 c0       	rjmp	.+74     	; 0x3176 <calcBaseline+0x64>
        case 1:
            pPS = &samples->ps2;
    312c:	fb 01       	movw	r30, r22
    312e:	3c 96       	adiw	r30, 0x0c	; 12
            break;
    3130:	22 c0       	rjmp	.+68     	; 0x3176 <calcBaseline+0x64>
        case 2:
            pPS = &samples->ps3;
    3132:	fb 01       	movw	r30, r22
    3134:	3e 96       	adiw	r30, 0x0e	; 14
            break;
    3136:	1f c0       	rjmp	.+62     	; 0x3176 <calcBaseline+0x64>
        default:
            // Invalid Prox Channel. Reset all static variables 
            // to initial values
            average    = 0;
            dynamic_baseline[0] = 0;
    3138:	10 92 92 29 	sts	0x2992, r1
    313c:	10 92 93 29 	sts	0x2993, r1
            dynamic_baseline[1] = 0;
    3140:	10 92 94 29 	sts	0x2994, r1
    3144:	10 92 95 29 	sts	0x2995, r1
			dynamic_baseline[2] = 0;
    3148:	10 92 96 29 	sts	0x2996, r1
    314c:	10 92 97 29 	sts	0x2997, r1
            rollingMax[0] = 0;
    3150:	10 92 8c 29 	sts	0x298C, r1
    3154:	10 92 8d 29 	sts	0x298D, r1
            rollingMax[1] = 0;
    3158:	10 92 8e 29 	sts	0x298E, r1
    315c:	10 92 8f 29 	sts	0x298F, r1
			rollingMax[2] = 0;
    3160:	10 92 90 29 	sts	0x2990, r1
    3164:	10 92 91 29 	sts	0x2991, r1
            Maxcount[0]   = 0;
    3168:	10 92 89 29 	sts	0x2989, r1
            Maxcount[1]   = 0;
    316c:	10 92 8a 29 	sts	0x298A, r1
			Maxcount[2]   = 0;
    3170:	10 92 8b 29 	sts	0x298B, r1
            return;
    3174:	cb c0       	rjmp	.+406    	; 0x330c <calcBaseline+0x1fa>
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	dc 01       	movw	r26, r24
    317a:	aa 0f       	add	r26, r26
    317c:	bb 1f       	adc	r27, r27
    317e:	ae 56       	subi	r26, 0x6E	; 110
    3180:	b6 4d       	sbci	r27, 0xD6	; 214
    3182:	2d 91       	ld	r18, X+
    3184:	3c 91       	ld	r19, X
    3186:	23 2b       	or	r18, r19
    3188:	d9 f4       	brne	.+54     	; 0x31c0 <calcBaseline+0xae>
    318a:	60 81       	ld	r22, Z
    318c:	71 81       	ldd	r23, Z+1	; 0x01
    318e:	dc 01       	movw	r26, r24
    3190:	aa 0f       	add	r26, r26
    3192:	bb 1f       	adc	r27, r27
    3194:	a4 56       	subi	r26, 0x64	; 100
    3196:	b6 4d       	sbci	r27, 0xD6	; 214
    3198:	2d 91       	ld	r18, X+
    319a:	3c 91       	ld	r19, X
    319c:	62 17       	cp	r22, r18
    319e:	73 07       	cpc	r23, r19
    31a0:	40 f4       	brcc	.+16     	; 0x31b2 <calcBaseline+0xa0>
    {
       dynamic_baseline[proxChannel] = *pPS;
    31a2:	dc 01       	movw	r26, r24
    31a4:	aa 0f       	add	r26, r26
    31a6:	bb 1f       	adc	r27, r27
    31a8:	ae 56       	subi	r26, 0x6E	; 110
    31aa:	b6 4d       	sbci	r27, 0xD6	; 214
    31ac:	6d 93       	st	X+, r22
    31ae:	7c 93       	st	X, r23
    31b0:	07 c0       	rjmp	.+14     	; 0x31c0 <calcBaseline+0xae>
    } else if ( dynamic_baseline[proxChannel] == 0)
    {
       dynamic_baseline[proxChannel] = maxLeakage[proxChannel];
    31b2:	dc 01       	movw	r26, r24
    31b4:	aa 0f       	add	r26, r26
    31b6:	bb 1f       	adc	r27, r27
    31b8:	ae 56       	subi	r26, 0x6E	; 110
    31ba:	b6 4d       	sbci	r27, 0xD6	; 214
    31bc:	2d 93       	st	X+, r18
    31be:	3c 93       	st	X, r19
    } 

    // Only process samples which are below the maxLeakage values, anything 
    // higher is a signal created by an object in front of the system which 
    // should not be baselined
    if ( *pPS < maxLeakage[proxChannel] )
    31c0:	60 81       	ld	r22, Z
    31c2:	71 81       	ldd	r23, Z+1	; 0x01
    31c4:	fc 01       	movw	r30, r24
    31c6:	ee 0f       	add	r30, r30
    31c8:	ff 1f       	adc	r31, r31
    31ca:	e4 56       	subi	r30, 0x64	; 100
    31cc:	f6 4d       	sbci	r31, 0xD6	; 214
    31ce:	20 81       	ld	r18, Z
    31d0:	31 81       	ldd	r19, Z+1	; 0x01
    31d2:	62 17       	cp	r22, r18
    31d4:	73 07       	cpc	r23, r19
    31d6:	08 f0       	brcs	.+2      	; 0x31da <calcBaseline+0xc8>
    31d8:	77 c0       	rjmp	.+238    	; 0x32c8 <calcBaseline+0x1b6>
    {
        average = dynamic_baseline[proxChannel]*7;
    31da:	fc 01       	movw	r30, r24
    31dc:	ee 0f       	add	r30, r30
    31de:	ff 1f       	adc	r31, r31
    31e0:	ee 56       	subi	r30, 0x6E	; 110
    31e2:	f6 4d       	sbci	r31, 0xD6	; 214
    31e4:	01 90       	ld	r0, Z+
    31e6:	f0 81       	ld	r31, Z
    31e8:	e0 2d       	mov	r30, r0
    31ea:	df 01       	movw	r26, r30
    31ec:	aa 0f       	add	r26, r26
    31ee:	bb 1f       	adc	r27, r27
    31f0:	aa 0f       	add	r26, r26
    31f2:	bb 1f       	adc	r27, r27
    31f4:	aa 0f       	add	r26, r26
    31f6:	bb 1f       	adc	r27, r27
    31f8:	ae 1b       	sub	r26, r30
    31fa:	bf 0b       	sbc	r27, r31
        average = average + (u32)(*pPS);
    31fc:	8b 01       	movw	r16, r22
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	0a 0f       	add	r16, r26
    3204:	1b 1f       	adc	r17, r27
    3206:	21 1d       	adc	r18, r1
    3208:	31 1d       	adc	r19, r1
        average = average/8;
    320a:	68 94       	set
    320c:	12 f8       	bld	r1, 2
    320e:	36 95       	lsr	r19
    3210:	27 95       	ror	r18
    3212:	17 95       	ror	r17
    3214:	07 95       	ror	r16
    3216:	16 94       	lsr	r1
    3218:	d1 f7       	brne	.-12     	; 0x320e <calcBaseline+0xfc>
        // If the new sample has not changed the baseline average by a large 
        // amount, then allow the rollingMax variable to update. If the new 
        // sample did move the baseline average by a lot, then it's possible 
        // it was created by a proximity event. So, do not consider this part 
        // of the rollingMax
        if ( dynamic_baseline[proxChannel] <= (u16)average + (u16)average/64
    321a:	d8 01       	movw	r26, r16
    321c:	00 24       	eor	r0, r0
    321e:	aa 0f       	add	r26, r26
    3220:	bb 1f       	adc	r27, r27
    3222:	00 1c       	adc	r0, r0
    3224:	aa 0f       	add	r26, r26
    3226:	bb 1f       	adc	r27, r27
    3228:	00 1c       	adc	r0, r0
    322a:	ab 2f       	mov	r26, r27
    322c:	b0 2d       	mov	r27, r0
    322e:	ed 01       	movw	r28, r26
    3230:	c0 0f       	add	r28, r16
    3232:	d1 1f       	adc	r29, r17
    3234:	ce 17       	cp	r28, r30
    3236:	df 07       	cpc	r29, r31
    3238:	08 f4       	brcc	.+2      	; 0x323c <calcBaseline+0x12a>
    323a:	3f c0       	rjmp	.+126    	; 0x32ba <calcBaseline+0x1a8>
            && dynamic_baseline[proxChannel] >= (u16)average - (u16)average/64)
    323c:	e8 01       	movw	r28, r16
    323e:	ca 1b       	sub	r28, r26
    3240:	db 0b       	sbc	r29, r27
    3242:	ec 17       	cp	r30, r28
    3244:	fd 07       	cpc	r31, r29
    3246:	c8 f1       	brcs	.+114    	; 0x32ba <calcBaseline+0x1a8>
        {
            if ( rollingMax[proxChannel] == 0 )
    3248:	fc 01       	movw	r30, r24
    324a:	ee 0f       	add	r30, r30
    324c:	ff 1f       	adc	r31, r31
    324e:	e4 57       	subi	r30, 0x74	; 116
    3250:	f6 4d       	sbci	r31, 0xD6	; 214
    3252:	01 90       	ld	r0, Z+
    3254:	f0 81       	ld	r31, Z
    3256:	e0 2d       	mov	r30, r0
    3258:	30 97       	sbiw	r30, 0x00	; 0
    325a:	61 f4       	brne	.+24     	; 0x3274 <calcBaseline+0x162>
            {
                rollingMax[proxChannel] = *pPS;
    325c:	fc 01       	movw	r30, r24
    325e:	ee 0f       	add	r30, r30
    3260:	ff 1f       	adc	r31, r31
    3262:	e4 57       	subi	r30, 0x74	; 116
    3264:	f6 4d       	sbci	r31, 0xD6	; 214
    3266:	60 83       	st	Z, r22
    3268:	71 83       	std	Z+1, r23	; 0x01
                Maxcount[proxChannel] = 0;
    326a:	fc 01       	movw	r30, r24
    326c:	e7 57       	subi	r30, 0x77	; 119
    326e:	f6 4d       	sbci	r31, 0xD6	; 214
    3270:	10 82       	st	Z, r1
    3272:	23 c0       	rjmp	.+70     	; 0x32ba <calcBaseline+0x1a8>
            } 
            else if ( rollingMax[proxChannel] >= *pPS )
    3274:	e6 17       	cp	r30, r22
    3276:	f7 07       	cpc	r31, r23
    3278:	a8 f0       	brcs	.+42     	; 0x32a4 <calcBaseline+0x192>
            {
                (Maxcount[proxChannel]) += 1;
    327a:	dc 01       	movw	r26, r24
    327c:	a7 57       	subi	r26, 0x77	; 119
    327e:	b6 4d       	sbci	r27, 0xD6	; 214
    3280:	6c 91       	ld	r22, X
    3282:	6f 5f       	subi	r22, 0xFF	; 255
    3284:	6c 93       	st	X, r22
                if ( Maxcount[proxChannel] > 64 )
    3286:	61 34       	cpi	r22, 0x41	; 65
    3288:	c0 f0       	brcs	.+48     	; 0x32ba <calcBaseline+0x1a8>
                {
                    (rollingMax[proxChannel]) -= 1;
    328a:	dc 01       	movw	r26, r24
    328c:	aa 0f       	add	r26, r26
    328e:	bb 1f       	adc	r27, r27
    3290:	a4 57       	subi	r26, 0x74	; 116
    3292:	b6 4d       	sbci	r27, 0xD6	; 214
    3294:	31 97       	sbiw	r30, 0x01	; 1
    3296:	ed 93       	st	X+, r30
    3298:	fc 93       	st	X, r31
                    Maxcount[proxChannel] = 0;
    329a:	fc 01       	movw	r30, r24
    329c:	e7 57       	subi	r30, 0x77	; 119
    329e:	f6 4d       	sbci	r31, 0xD6	; 214
    32a0:	10 82       	st	Z, r1
    32a2:	0b c0       	rjmp	.+22     	; 0x32ba <calcBaseline+0x1a8>
                }
            } 
            else
            {
                rollingMax[proxChannel] = *pPS;
    32a4:	fc 01       	movw	r30, r24
    32a6:	ee 0f       	add	r30, r30
    32a8:	ff 1f       	adc	r31, r31
    32aa:	e4 57       	subi	r30, 0x74	; 116
    32ac:	f6 4d       	sbci	r31, 0xD6	; 214
    32ae:	60 83       	st	Z, r22
    32b0:	71 83       	std	Z+1, r23	; 0x01
                Maxcount[proxChannel] = 0;
    32b2:	fc 01       	movw	r30, r24
    32b4:	e7 57       	subi	r30, 0x77	; 119
    32b6:	f6 4d       	sbci	r31, 0xD6	; 214
    32b8:	10 82       	st	Z, r1
            }
        }

        // Update the stored baseline average with the new value
        dynamic_baseline[proxChannel] = (u16)average;
    32ba:	fc 01       	movw	r30, r24
    32bc:	ee 0f       	add	r30, r30
    32be:	ff 1f       	adc	r31, r31
    32c0:	ee 56       	subi	r30, 0x6E	; 110
    32c2:	f6 4d       	sbci	r31, 0xD6	; 214
    32c4:	00 83       	st	Z, r16
    32c6:	11 83       	std	Z+1, r17	; 0x01
    }

    // Use the rollingMax value to determine the baseline level
    if ( rollingMax[proxChannel] != 0 )
    32c8:	fc 01       	movw	r30, r24
    32ca:	ee 0f       	add	r30, r30
    32cc:	ff 1f       	adc	r31, r31
    32ce:	e4 57       	subi	r30, 0x74	; 116
    32d0:	f6 4d       	sbci	r31, 0xD6	; 214
    32d2:	20 81       	ld	r18, Z
    32d4:	31 81       	ldd	r19, Z+1	; 0x01
    32d6:	21 15       	cp	r18, r1
    32d8:	31 05       	cpc	r19, r1
    32da:	51 f0       	breq	.+20     	; 0x32f0 <calcBaseline+0x1de>
    {
        baseline[proxChannel] = rollingMax[proxChannel] + noise_margin;
    32dc:	fc 01       	movw	r30, r24
    32de:	ee 0f       	add	r30, r30
    32e0:	ff 1f       	adc	r31, r31
    32e2:	e9 58       	subi	r30, 0x89	; 137
    32e4:	f4 4d       	sbci	r31, 0xD4	; 212
    32e6:	42 0f       	add	r20, r18
    32e8:	53 1f       	adc	r21, r19
    32ea:	40 83       	st	Z, r20
    32ec:	51 83       	std	Z+1, r21	; 0x01
    32ee:	0e c0       	rjmp	.+28     	; 0x330c <calcBaseline+0x1fa>
    } 
    else
    {  // If the rollingMax has not been determined yet, use the average
        baseline[proxChannel] = (u16) dynamic_baseline[proxChannel] + noise_margin;
    32f0:	88 0f       	add	r24, r24
    32f2:	99 1f       	adc	r25, r25
    32f4:	fc 01       	movw	r30, r24
    32f6:	e9 58       	subi	r30, 0x89	; 137
    32f8:	f4 4d       	sbci	r31, 0xD4	; 212
    32fa:	dc 01       	movw	r26, r24
    32fc:	ae 56       	subi	r26, 0x6E	; 110
    32fe:	b6 4d       	sbci	r27, 0xD6	; 214
    3300:	8d 91       	ld	r24, X+
    3302:	9c 91       	ld	r25, X
    3304:	48 0f       	add	r20, r24
    3306:	59 1f       	adc	r21, r25
    3308:	40 83       	st	Z, r20
    330a:	51 83       	std	Z+1, r21	; 0x01
    }
}
    330c:	df 91       	pop	r29
    330e:	cf 91       	pop	r28
    3310:	1f 91       	pop	r17
    3312:	0f 91       	pop	r16
    3314:	08 95       	ret

00003316 <si114x_process_samples>:
u16 code scale           =  3;
u8  code ircorrection[3] =  { 17, 35, 29 };
#endif

void si114x_process_samples(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples)
{
    3316:	ef 92       	push	r14
    3318:	ff 92       	push	r15
    331a:	0f 93       	push	r16
    331c:	1f 93       	push	r17
    331e:	cf 93       	push	r28
    3320:	df 93       	push	r29
    3322:	8c 01       	movw	r16, r24
    3324:	eb 01       	movw	r28, r22
    if ((maxLeakage[0]==0)&&(maxLeakage[1]==0)&&(maxLeakage[2]==0)&&(initial_baseline_counter==128))
    3326:	20 91 9c 29 	lds	r18, 0x299C
    332a:	30 91 9d 29 	lds	r19, 0x299D
    332e:	23 2b       	or	r18, r19
    3330:	c9 f4       	brne	.+50     	; 0x3364 <si114x_process_samples+0x4e>
    3332:	80 91 9e 29 	lds	r24, 0x299E
    3336:	90 91 9f 29 	lds	r25, 0x299F
    333a:	89 2b       	or	r24, r25
    333c:	99 f4       	brne	.+38     	; 0x3364 <si114x_process_samples+0x4e>
    333e:	80 91 a0 29 	lds	r24, 0x29A0
    3342:	90 91 a1 29 	lds	r25, 0x29A1
    3346:	89 2b       	or	r24, r25
    3348:	69 f4       	brne	.+26     	; 0x3364 <si114x_process_samples+0x4e>
    334a:	80 91 10 20 	lds	r24, 0x2010
    334e:	80 38       	cpi	r24, 0x80	; 128
    3350:	49 f4       	brne	.+18     	; 0x3364 <si114x_process_samples+0x4e>
    {
        printf("Computing Baseline. Make sure nothing is in the vicinity of the EVB\n");
    3352:	87 e7       	ldi	r24, 0x77	; 119
    3354:	94 e2       	ldi	r25, 0x24	; 36
    3356:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <puts>
        PortSet(1,0); // Turn on all lights to indicate baseline is being computed
    335a:	60 e0       	ldi	r22, 0x00	; 0
    335c:	70 e0       	ldi	r23, 0x00	; 0
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	ce d0       	rcall	.+412    	; 0x3500 <PortSet>
    }

    if (initial_baseline_counter != 0)
    3364:	80 91 10 20 	lds	r24, 0x2010
    3368:	88 23       	and	r24, r24
    336a:	09 f4       	brne	.+2      	; 0x336e <si114x_process_samples+0x58>
    336c:	7f c0       	rjmp	.+254    	; 0x346c <si114x_process_samples+0x156>
    {
        // The first 128 samples are used to establish the initial 
        // baseline
        if ( initial_baseline_counter > 1 )
    336e:	82 30       	cpi	r24, 0x02	; 2
    3370:	48 f1       	brcs	.+82     	; 0x33c4 <si114x_process_samples+0xae>
        {
            // Look for maximum
            if( maxLeakage[0] < samples->ps1) maxLeakage[0] = samples->ps1;
    3372:	8a 85       	ldd	r24, Y+10	; 0x0a
    3374:	9b 85       	ldd	r25, Y+11	; 0x0b
    3376:	20 91 9c 29 	lds	r18, 0x299C
    337a:	30 91 9d 29 	lds	r19, 0x299D
    337e:	28 17       	cp	r18, r24
    3380:	39 07       	cpc	r19, r25
    3382:	20 f4       	brcc	.+8      	; 0x338c <si114x_process_samples+0x76>
    3384:	80 93 9c 29 	sts	0x299C, r24
    3388:	90 93 9d 29 	sts	0x299D, r25
            if( maxLeakage[1] < samples->ps2) maxLeakage[1] = samples->ps2;
    338c:	8c 85       	ldd	r24, Y+12	; 0x0c
    338e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3390:	20 91 9e 29 	lds	r18, 0x299E
    3394:	30 91 9f 29 	lds	r19, 0x299F
    3398:	28 17       	cp	r18, r24
    339a:	39 07       	cpc	r19, r25
    339c:	20 f4       	brcc	.+8      	; 0x33a6 <si114x_process_samples+0x90>
    339e:	80 93 9e 29 	sts	0x299E, r24
    33a2:	90 93 9f 29 	sts	0x299F, r25
			if( maxLeakage[2] < samples->ps3) maxLeakage[2] = samples->ps3;
    33a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    33a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    33aa:	20 91 a0 29 	lds	r18, 0x29A0
    33ae:	30 91 a1 29 	lds	r19, 0x29A1
    33b2:	28 17       	cp	r18, r24
    33b4:	39 07       	cpc	r19, r25
    33b6:	08 f0       	brcs	.+2      	; 0x33ba <si114x_process_samples+0xa4>
    33b8:	53 c0       	rjmp	.+166    	; 0x3460 <si114x_process_samples+0x14a>
    33ba:	80 93 a0 29 	sts	0x29A0, r24
    33be:	90 93 a1 29 	sts	0x29A1, r25
    33c2:	4e c0       	rjmp	.+156    	; 0x3460 <si114x_process_samples+0x14a>
        }
        else
        {
            printf("Initial Baseline Calculated, PS1 = %d, PS2 = %d, PS3 = %d \n", maxLeakage[0], maxLeakage[1],maxLeakage[2]);
    33c4:	c0 ea       	ldi	r28, 0xA0	; 160
    33c6:	d9 e2       	ldi	r29, 0x29	; 41
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	8f 93       	push	r24
    33cc:	88 81       	ld	r24, Y
    33ce:	8f 93       	push	r24
    33d0:	0e e9       	ldi	r16, 0x9E	; 158
    33d2:	19 e2       	ldi	r17, 0x29	; 41
    33d4:	f8 01       	movw	r30, r16
    33d6:	81 81       	ldd	r24, Z+1	; 0x01
    33d8:	8f 93       	push	r24
    33da:	80 81       	ld	r24, Z
    33dc:	8f 93       	push	r24
    33de:	0f 2e       	mov	r0, r31
    33e0:	fc e9       	ldi	r31, 0x9C	; 156
    33e2:	ef 2e       	mov	r14, r31
    33e4:	f9 e2       	ldi	r31, 0x29	; 41
    33e6:	ff 2e       	mov	r15, r31
    33e8:	f0 2d       	mov	r31, r0
    33ea:	f7 01       	movw	r30, r14
    33ec:	81 81       	ldd	r24, Z+1	; 0x01
    33ee:	8f 93       	push	r24
    33f0:	80 81       	ld	r24, Z
    33f2:	8f 93       	push	r24
    33f4:	8b eb       	ldi	r24, 0xBB	; 187
    33f6:	94 e2       	ldi	r25, 0x24	; 36
    33f8:	9f 93       	push	r25
    33fa:	8f 93       	push	r24
    33fc:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <printf>
            PortSet(1,0xff); // Turn off all leds to indicate baseline computation is completed
    3400:	6f ef       	ldi	r22, 0xFF	; 255
    3402:	70 e0       	ldi	r23, 0x00	; 0
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	7b d0       	rcall	.+246    	; 0x3500 <PortSet>
            // Set Max Leakage 
            maxLeakage[0] = maxLeakage[0] + noise_margin*2;
    340a:	80 91 0e 20 	lds	r24, 0x200E
    340e:	90 91 0f 20 	lds	r25, 0x200F
    3412:	88 0f       	add	r24, r24
    3414:	99 1f       	adc	r25, r25
    3416:	f7 01       	movw	r30, r14
    3418:	40 81       	ld	r20, Z
    341a:	51 81       	ldd	r21, Z+1	; 0x01
    341c:	48 0f       	add	r20, r24
    341e:	59 1f       	adc	r21, r25
    3420:	40 83       	st	Z, r20
    3422:	51 83       	std	Z+1, r21	; 0x01
            maxLeakage[1] = maxLeakage[1] + noise_margin*2;
    3424:	f8 01       	movw	r30, r16
    3426:	20 81       	ld	r18, Z
    3428:	31 81       	ldd	r19, Z+1	; 0x01
    342a:	28 0f       	add	r18, r24
    342c:	39 1f       	adc	r19, r25
    342e:	20 83       	st	Z, r18
    3430:	31 83       	std	Z+1, r19	; 0x01
			maxLeakage[2] = maxLeakage[2] + noise_margin*2;
    3432:	68 81       	ld	r22, Y
    3434:	79 81       	ldd	r23, Y+1	; 0x01
    3436:	86 0f       	add	r24, r22
    3438:	97 1f       	adc	r25, r23
    343a:	88 83       	st	Y, r24
    343c:	99 83       	std	Y+1, r25	; 0x01

            baseline[0] = maxLeakage[0];
    343e:	40 93 77 2b 	sts	0x2B77, r20
    3442:	50 93 78 2b 	sts	0x2B78, r21
            baseline[1] = maxLeakage[1];
    3446:	20 93 79 2b 	sts	0x2B79, r18
    344a:	30 93 7a 2b 	sts	0x2B7A, r19
			baseline[2] = maxLeakage[2];
    344e:	80 93 7b 2b 	sts	0x2B7B, r24
    3452:	90 93 7c 2b 	sts	0x2B7C, r25
    3456:	8d b7       	in	r24, 0x3d	; 61
    3458:	9e b7       	in	r25, 0x3e	; 62
    345a:	08 96       	adiw	r24, 0x08	; 8
    345c:	8d bf       	out	0x3d, r24	; 61
    345e:	9e bf       	out	0x3e, r25	; 62
        }
        
        // Decrement counter
        initial_baseline_counter--;
    3460:	80 91 10 20 	lds	r24, 0x2010
    3464:	81 50       	subi	r24, 0x01	; 1
    3466:	80 93 10 20 	sts	0x2010, r24
    346a:	43 c0       	rjmp	.+134    	; 0x34f2 <si114x_process_samples+0x1dc>
    else
    {
        //
        // Once the baseline has been set, do the actual loop
        // The first thing that happens is to check for saturation events
        if(samples->ps1 > 48000 || samples->ps2 > 48000 || samples->ps3 > 48000)
    346c:	8a 85       	ldd	r24, Y+10	; 0x0a
    346e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3470:	81 38       	cpi	r24, 0x81	; 129
    3472:	9b 4b       	sbci	r25, 0xBB	; 187
    3474:	50 f4       	brcc	.+20     	; 0x348a <si114x_process_samples+0x174>
    3476:	8c 85       	ldd	r24, Y+12	; 0x0c
    3478:	9d 85       	ldd	r25, Y+13	; 0x0d
    347a:	81 38       	cpi	r24, 0x81	; 129
    347c:	9b 4b       	sbci	r25, 0xBB	; 187
    347e:	28 f4       	brcc	.+10     	; 0x348a <si114x_process_samples+0x174>
    3480:	8e 85       	ldd	r24, Y+14	; 0x0e
    3482:	9f 85       	ldd	r25, Y+15	; 0x0f
    3484:	81 38       	cpi	r24, 0x81	; 129
    3486:	9b 4b       	sbci	r25, 0xBB	; 187
    3488:	28 f0       	brcs	.+10     	; 0x3494 <si114x_process_samples+0x17e>
            // handle saturation events by changing ADC settings.
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
            printf("Samples are Saturated\n");
    348a:	87 ef       	ldi	r24, 0xF7	; 247
    348c:	94 e2       	ldi	r25, 0x24	; 36
    348e:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <puts>
    3492:	2f c0       	rjmp	.+94     	; 0x34f2 <si114x_process_samples+0x1dc>
        }
        else
        { 
            if( isIRStable( samples ) )
    3494:	ce 01       	movw	r24, r28
    3496:	4b dd       	rcall	.-1386   	; 0x2f2e <isIRStable>
    3498:	88 23       	and	r24, r24
    349a:	59 f1       	breq	.+86     	; 0x34f2 <si114x_process_samples+0x1dc>
            {
                IRCompensation( 0, samples, ircorrection );  // IR Ambient Compensation for PS1 Channel
    349c:	49 e0       	ldi	r20, 0x09	; 9
    349e:	50 e2       	ldi	r21, 0x20	; 32
    34a0:	be 01       	movw	r22, r28
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	c6 dd       	rcall	.-1140   	; 0x3032 <IRCompensation>
                IRCompensation( 1, samples, ircorrection );  // IR Ambient Compensation for PS2 Channel
    34a6:	49 e0       	ldi	r20, 0x09	; 9
    34a8:	50 e2       	ldi	r21, 0x20	; 32
    34aa:	be 01       	movw	r22, r28
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	c1 dd       	rcall	.-1150   	; 0x3032 <IRCompensation>
				IRCompensation( 2, samples, ircorrection );  // IR Ambient Compensation for PS3 Channel
    34b0:	49 e0       	ldi	r20, 0x09	; 9
    34b2:	50 e2       	ldi	r21, 0x20	; 32
    34b4:	be 01       	movw	r22, r28
    34b6:	82 e0       	ldi	r24, 0x02	; 2
    34b8:	bc dd       	rcall	.-1160   	; 0x3032 <IRCompensation>

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
    34ba:	40 91 0e 20 	lds	r20, 0x200E
    34be:	50 91 0f 20 	lds	r21, 0x200F
    34c2:	be 01       	movw	r22, r28
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	25 de       	rcall	.-950    	; 0x3112 <calcBaseline>
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
    34c8:	40 91 0e 20 	lds	r20, 0x200E
    34cc:	50 91 0f 20 	lds	r21, 0x200F
    34d0:	be 01       	movw	r22, r28
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	1e de       	rcall	.-964    	; 0x3112 <calcBaseline>
				calcBaseline( 2 , samples, noise_margin); // Calculate PS3 Baseline
    34d6:	40 91 0e 20 	lds	r20, 0x200E
    34da:	50 91 0f 20 	lds	r21, 0x200F
    34de:	be 01       	movw	r22, r28
    34e0:	82 e0       	ldi	r24, 0x02	; 2
    34e2:	17 de       	rcall	.-978    	; 0x3112 <calcBaseline>

                SliderAlgorithm(si114x_handle, samples, scale);
    34e4:	40 91 0c 20 	lds	r20, 0x200C
    34e8:	50 91 0d 20 	lds	r21, 0x200D
    34ec:	be 01       	movw	r22, r28
    34ee:	c8 01       	movw	r24, r16
    34f0:	7d d1       	rcall	.+762    	; 0x37ec <SliderAlgorithm>

            }
        }
    }
}
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	1f 91       	pop	r17
    34f8:	0f 91       	pop	r16
    34fa:	ff 90       	pop	r15
    34fc:	ef 90       	pop	r14
    34fe:	08 95       	ret

00003500 <PortSet>:

s16 Si114xBlockRead(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
}
    3500:	08 95       	ret

00003502 <Si114xWriteToRegister>:
    3502:	ef 92       	push	r14
    3504:	0f 93       	push	r16
    3506:	1f 93       	push	r17
    3508:	cf 93       	push	r28
    350a:	df 93       	push	r29
    350c:	1f 92       	push	r1
    350e:	cd b7       	in	r28, 0x3d	; 61
    3510:	de b7       	in	r29, 0x3e	; 62
    3512:	26 2f       	mov	r18, r22
    3514:	49 83       	std	Y+1, r20	; 0x01
    3516:	ee 24       	eor	r14, r14
    3518:	e3 94       	inc	r14
    351a:	8e 01       	movw	r16, r28
    351c:	0f 5f       	subi	r16, 0xFF	; 255
    351e:	1f 4f       	sbci	r17, 0xFF	; 255
    3520:	48 ee       	ldi	r20, 0xE8	; 232
    3522:	6a e5       	ldi	r22, 0x5A	; 90
    3524:	80 e8       	ldi	r24, 0x80	; 128
    3526:	94 e0       	ldi	r25, 0x04	; 4
    3528:	37 d4       	rcall	.+2158   	; 0x3d98 <twi_write_packet>
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	0f 90       	pop	r0
    3530:	df 91       	pop	r29
    3532:	cf 91       	pop	r28
    3534:	1f 91       	pop	r17
    3536:	0f 91       	pop	r16
    3538:	ef 90       	pop	r14
    353a:	08 95       	ret

0000353c <Si114xReadFromRegister>:
    353c:	ef 92       	push	r14
    353e:	0f 93       	push	r16
    3540:	1f 93       	push	r17
    3542:	cf 93       	push	r28
    3544:	df 93       	push	r29
    3546:	1f 92       	push	r1
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
    354c:	26 2f       	mov	r18, r22
    354e:	ee 24       	eor	r14, r14
    3550:	e3 94       	inc	r14
    3552:	8e 01       	movw	r16, r28
    3554:	0f 5f       	subi	r16, 0xFF	; 255
    3556:	1f 4f       	sbci	r17, 0xFF	; 255
    3558:	48 ee       	ldi	r20, 0xE8	; 232
    355a:	6a e5       	ldi	r22, 0x5A	; 90
    355c:	80 e8       	ldi	r24, 0x80	; 128
    355e:	94 e0       	ldi	r25, 0x04	; 4
    3560:	d5 d3       	rcall	.+1962   	; 0x3d0c <twi_read_packet>
    3562:	89 81       	ldd	r24, Y+1	; 0x01
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	0f 90       	pop	r0
    3568:	df 91       	pop	r29
    356a:	cf 91       	pop	r28
    356c:	1f 91       	pop	r17
    356e:	0f 91       	pop	r16
    3570:	ef 90       	pop	r14
    3572:	08 95       	ret

00003574 <Si114xBlockWrite>:
    3574:	ef 92       	push	r14
    3576:	0f 93       	push	r16
    3578:	1f 93       	push	r17
    357a:	89 01       	movw	r16, r18
    357c:	e4 2e       	mov	r14, r20
    357e:	26 2f       	mov	r18, r22
    3580:	48 ee       	ldi	r20, 0xE8	; 232
    3582:	6a e5       	ldi	r22, 0x5A	; 90
    3584:	80 e8       	ldi	r24, 0x80	; 128
    3586:	94 e0       	ldi	r25, 0x04	; 4
    3588:	07 d4       	rcall	.+2062   	; 0x3d98 <twi_write_packet>
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	1f 91       	pop	r17
    358e:	0f 91       	pop	r16
    3590:	ef 90       	pop	r14
    3592:	08 95       	ret

00003594 <delay_10ms>:
    3594:	2f ef       	ldi	r18, 0xFF	; 255
    3596:	89 ef       	ldi	r24, 0xF9	; 249
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	21 50       	subi	r18, 0x01	; 1
    359c:	80 40       	sbci	r24, 0x00	; 0
    359e:	90 40       	sbci	r25, 0x00	; 0
    35a0:	e1 f7       	brne	.-8      	; 0x359a <delay_10ms+0x6>
    35a2:	00 c0       	rjmp	.+0      	; 0x35a4 <delay_10ms+0x10>
    35a4:	00 00       	nop
    35a6:	08 95       	ret

000035a8 <QS_Counts_to_Distance>:
// In the IR Slider, the distance between LED to sensor is the same for each of
// the two LEDs. For this reason, it is possible to have a single counts to
// distance function. 
//
s16 QS_Counts_to_Distance (u16 counts, u8 led)
{
    35a8:	ef 92       	push	r14
    35aa:	ff 92       	push	r15
    35ac:	0f 93       	push	r16
    35ae:	1f 93       	push	r17
    35b0:	cf 93       	push	r28
    35b2:	df 93       	push	r29
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
    35b8:	c2 5a       	subi	r28, 0xA2	; 162
    35ba:	d1 09       	sbc	r29, r1
    35bc:	cd bf       	out	0x3d, r28	; 61
    35be:	de bf       	out	0x3e, r29	; 62
    u16 code   offset_1[9]    = {29, 72, 55, 75, 95, 131, 177, 238, 300};
    35c0:	42 e1       	ldi	r20, 0x12	; 18
    35c2:	e4 e2       	ldi	r30, 0x24	; 36
    35c4:	f0 e2       	ldi	r31, 0x20	; 32
    35c6:	de 01       	movw	r26, r28
    35c8:	11 96       	adiw	r26, 0x01	; 1
    35ca:	01 90       	ld	r0, Z+
    35cc:	0d 92       	st	X+, r0
    35ce:	4a 95       	dec	r20
    35d0:	e1 f7       	brne	.-8      	; 0x35ca <QS_Counts_to_Distance+0x22>
    u16 code   slope_1[9]     = {29, 173, 102, 237, 429, 1215, 3012, 9990, 26214};	
    35d2:	42 e1       	ldi	r20, 0x12	; 18
    35d4:	e6 e3       	ldi	r30, 0x36	; 54
    35d6:	f0 e2       	ldi	r31, 0x20	; 32
    35d8:	de 01       	movw	r26, r28
    35da:	53 96       	adiw	r26, 0x13	; 19
    35dc:	01 90       	ld	r0, Z+
    35de:	0d 92       	st	X+, r0
    35e0:	4a 95       	dec	r20
    35e2:	e1 f7       	brne	.-8      	; 0x35dc <QS_Counts_to_Distance+0x34>
    u16 code   piecewise_brackets_1[9] = {19805, 16015, 9607, 6838, 3014, 1666, 578, 250, 125};	
    35e4:	42 e1       	ldi	r20, 0x12	; 18
    35e6:	e8 e4       	ldi	r30, 0x48	; 72
    35e8:	f0 e2       	ldi	r31, 0x20	; 32
    35ea:	de 01       	movw	r26, r28
    35ec:	95 96       	adiw	r26, 0x25	; 37
    35ee:	01 90       	ld	r0, Z+
    35f0:	0d 92       	st	X+, r0
    35f2:	4a 95       	dec	r20
    35f4:	e1 f7       	brne	.-8      	; 0x35ee <QS_Counts_to_Distance+0x46>

    u16 code   offset_2[9]    = {27, 39, 51, 75, 96, 132, 177, 236, 299};
    35f6:	42 e1       	ldi	r20, 0x12	; 18
    35f8:	ea e5       	ldi	r30, 0x5A	; 90
    35fa:	f0 e2       	ldi	r31, 0x20	; 32
    35fc:	de 01       	movw	r26, r28
    35fe:	d7 96       	adiw	r26, 0x37	; 55
    3600:	01 90       	ld	r0, Z+
    3602:	0d 92       	st	X+, r0
    3604:	4a 95       	dec	r20
    3606:	e1 f7       	brne	.-8      	; 0x3600 <QS_Counts_to_Distance+0x58>
    u16 code   slope_2[9]     = {27, 39, 95, 298, 538, 1481, 3637, 11457, 31208};	
    3608:	42 e1       	ldi	r20, 0x12	; 18
    360a:	ec e6       	ldi	r30, 0x6C	; 108
    360c:	f0 e2       	ldi	r31, 0x20	; 32
    360e:	de 01       	movw	r26, r28
    3610:	a7 5b       	subi	r26, 0xB7	; 183
    3612:	bf 4f       	sbci	r27, 0xFF	; 255
    3614:	01 90       	ld	r0, Z+
    3616:	0d 92       	st	X+, r0
    3618:	4a 95       	dec	r20
    361a:	e1 f7       	brne	.-8      	; 0x3614 <QS_Counts_to_Distance+0x6c>
    u16 code   piecewise_brackets_2[9]= {17760, 14650, 7745, 5545, 2500, 1394, 493, 207, 102};	
    361c:	42 e1       	ldi	r20, 0x12	; 18
    361e:	ee e7       	ldi	r30, 0x7E	; 126
    3620:	f0 e2       	ldi	r31, 0x20	; 32
    3622:	de 01       	movw	r26, r28
    3624:	a5 5a       	subi	r26, 0xA5	; 165
    3626:	bf 4f       	sbci	r27, 0xFF	; 255
    3628:	01 90       	ld	r0, Z+
    362a:	0d 92       	st	X+, r0
    362c:	4a 95       	dec	r20
    362e:	e1 f7       	brne	.-8      	; 0x3628 <QS_Counts_to_Distance+0x80>
		
	u16 code   offset_3[9]    = {27, 39, 51, 75, 96, 132, 177, 236, 299};
    3630:	42 e1       	ldi	r20, 0x12	; 18
    3632:	ea e5       	ldi	r30, 0x5A	; 90
    3634:	f0 e2       	ldi	r31, 0x20	; 32
    3636:	de 01       	movw	r26, r28
    3638:	a3 59       	subi	r26, 0x93	; 147
    363a:	bf 4f       	sbci	r27, 0xFF	; 255
    363c:	01 90       	ld	r0, Z+
    363e:	0d 92       	st	X+, r0
    3640:	4a 95       	dec	r20
    3642:	e1 f7       	brne	.-8      	; 0x363c <QS_Counts_to_Distance+0x94>
	u16 code   slope_3[9]     = {27, 39, 95, 298, 538, 1481, 3637, 11457, 31208};
    3644:	42 e1       	ldi	r20, 0x12	; 18
    3646:	ec e6       	ldi	r30, 0x6C	; 108
    3648:	f0 e2       	ldi	r31, 0x20	; 32
    364a:	de 01       	movw	r26, r28
    364c:	a1 58       	subi	r26, 0x81	; 129
    364e:	bf 4f       	sbci	r27, 0xFF	; 255
    3650:	01 90       	ld	r0, Z+
    3652:	0d 92       	st	X+, r0
    3654:	4a 95       	dec	r20
    3656:	e1 f7       	brne	.-8      	; 0x3650 <QS_Counts_to_Distance+0xa8>
	u16 code   piecewise_brackets_3[9]= {17760, 14650, 7745, 5545, 2500, 1394, 493, 207, 102};
    3658:	42 e1       	ldi	r20, 0x12	; 18
    365a:	ee e7       	ldi	r30, 0x7E	; 126
    365c:	f0 e2       	ldi	r31, 0x20	; 32
    365e:	de 01       	movw	r26, r28
    3660:	af 56       	subi	r26, 0x6F	; 111
    3662:	bf 4f       	sbci	r27, 0xFF	; 255
    3664:	01 90       	ld	r0, Z+
    3666:	0d 92       	st	X+, r0
    3668:	4a 95       	dec	r20
    366a:	e1 f7       	brne	.-8      	; 0x3664 <QS_Counts_to_Distance+0xbc>

    u8 code   maxIndex = 9;
    u8 xdata   indexLinear;
    uu32 xdata distance;

    if(led==1)      
    366c:	61 30       	cpi	r22, 0x01	; 1
    366e:	99 f5       	brne	.+102    	; 0x36d6 <QS_Counts_to_Distance+0x12e>
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
       {
           if (counts > piecewise_brackets_1[indexLinear])
    3670:	4d a1       	ldd	r20, Y+37	; 0x25
    3672:	5e a1       	ldd	r21, Y+38	; 0x26
    3674:	48 17       	cp	r20, r24
    3676:	59 07       	cpc	r21, r25
    3678:	60 f0       	brcs	.+24     	; 0x3692 <QS_Counts_to_Distance+0xea>
    367a:	de 01       	movw	r26, r28
    367c:	97 96       	adiw	r26, 0x27	; 39
    367e:	61 e0       	ldi	r22, 0x01	; 1
    3680:	70 e0       	ldi	r23, 0x00	; 0
    3682:	e6 2f       	mov	r30, r22
    3684:	ab 01       	movw	r20, r22
    3686:	ed 90       	ld	r14, X+
    3688:	fd 90       	ld	r15, X+
    368a:	e8 16       	cp	r14, r24
    368c:	f9 06       	cpc	r15, r25
    368e:	d8 f4       	brcc	.+54     	; 0x36c6 <QS_Counts_to_Distance+0x11e>
    3690:	03 c0       	rjmp	.+6      	; 0x3698 <QS_Counts_to_Distance+0xf0>
    3692:	40 e0       	ldi	r20, 0x00	; 0
    3694:	50 e0       	ldi	r21, 0x00	; 0
    3696:	e0 e0       	ldi	r30, 0x00	; 0
           {
               distance.u32 = (u32)counts * (u32)slope_1[indexLinear];
    3698:	44 0f       	add	r20, r20
    369a:	55 1f       	adc	r21, r21
    369c:	21 e0       	ldi	r18, 0x01	; 1
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	2c 0f       	add	r18, r28
    36a2:	3d 1f       	adc	r19, r29
    36a4:	42 0f       	add	r20, r18
    36a6:	53 1f       	adc	r21, r19
    36a8:	da 01       	movw	r26, r20
    36aa:	52 96       	adiw	r26, 0x12	; 18
    36ac:	2d 91       	ld	r18, X+
    36ae:	3c 91       	ld	r19, X
    36b0:	53 97       	sbiw	r26, 0x13	; 19
    36b2:	dc 01       	movw	r26, r24
    36b4:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <__umulhisi3>
               distance.u16[LSB] = offset_1[indexLinear] - distance.u16[MSB];
    36b8:	da 01       	movw	r26, r20
    36ba:	4d 91       	ld	r20, X+
    36bc:	5c 91       	ld	r21, X
    36be:	8a 01       	movw	r16, r20
    36c0:	08 1b       	sub	r16, r24
    36c2:	19 0b       	sbc	r17, r25
               break;
    36c4:	7d c0       	rjmp	.+250    	; 0x37c0 <QS_Counts_to_Distance+0x218>
    36c6:	e1 e0       	ldi	r30, 0x01	; 1
    36c8:	e6 0f       	add	r30, r22
    36ca:	6f 5f       	subi	r22, 0xFF	; 255
    36cc:	7f 4f       	sbci	r23, 0xFF	; 255

    if(led==1)      
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    36ce:	69 30       	cpi	r22, 0x09	; 9
    36d0:	71 05       	cpc	r23, r1
    36d2:	b9 f6       	brne	.-82     	; 0x3682 <QS_Counts_to_Distance+0xda>
    36d4:	75 c0       	rjmp	.+234    	; 0x37c0 <QS_Counts_to_Distance+0x218>
               distance.u16[LSB] = offset_1[indexLinear] - distance.u16[MSB];
               break;
           }
       }
    }
    else if(led==2) 
    36d6:	62 30       	cpi	r22, 0x02	; 2
    36d8:	b9 f5       	brne	.+110    	; 0x3748 <QS_Counts_to_Distance+0x1a0>
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
       {
           if (counts > piecewise_brackets_2[indexLinear])
    36da:	6d 96       	adiw	r28, 0x1d	; 29
    36dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    36de:	5f ad       	ldd	r21, Y+63	; 0x3f
    36e0:	6d 97       	sbiw	r28, 0x1d	; 29
    36e2:	48 17       	cp	r20, r24
    36e4:	59 07       	cpc	r21, r25
    36e6:	68 f0       	brcs	.+26     	; 0x3702 <QS_Counts_to_Distance+0x15a>
    36e8:	de 01       	movw	r26, r28
    36ea:	a3 5a       	subi	r26, 0xA3	; 163
    36ec:	bf 4f       	sbci	r27, 0xFF	; 255
    36ee:	61 e0       	ldi	r22, 0x01	; 1
    36f0:	70 e0       	ldi	r23, 0x00	; 0
    36f2:	e6 2f       	mov	r30, r22
    36f4:	ab 01       	movw	r20, r22
    36f6:	ed 90       	ld	r14, X+
    36f8:	fd 90       	ld	r15, X+
    36fa:	e8 16       	cp	r14, r24
    36fc:	f9 06       	cpc	r15, r25
    36fe:	e0 f4       	brcc	.+56     	; 0x3738 <QS_Counts_to_Distance+0x190>
    3700:	03 c0       	rjmp	.+6      	; 0x3708 <QS_Counts_to_Distance+0x160>
    3702:	40 e0       	ldi	r20, 0x00	; 0
    3704:	50 e0       	ldi	r21, 0x00	; 0
    3706:	e0 e0       	ldi	r30, 0x00	; 0
           {
               distance.u32 = (u32)counts * (u32)slope_2[indexLinear];
    3708:	44 0f       	add	r20, r20
    370a:	55 1f       	adc	r21, r21
    370c:	a9 e4       	ldi	r26, 0x49	; 73
    370e:	b0 e0       	ldi	r27, 0x00	; 0
    3710:	ac 0f       	add	r26, r28
    3712:	bd 1f       	adc	r27, r29
    3714:	a4 0f       	add	r26, r20
    3716:	b5 1f       	adc	r27, r21
    3718:	2d 91       	ld	r18, X+
    371a:	3c 91       	ld	r19, X
    371c:	dc 01       	movw	r26, r24
    371e:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <__umulhisi3>
               distance.u16[LSB] = offset_2[indexLinear] - distance.u16[MSB];
    3722:	de 01       	movw	r26, r28
    3724:	a4 0f       	add	r26, r20
    3726:	b5 1f       	adc	r27, r21
    3728:	d7 96       	adiw	r26, 0x37	; 55
    372a:	4d 91       	ld	r20, X+
    372c:	5c 91       	ld	r21, X
    372e:	d8 97       	sbiw	r26, 0x38	; 56
    3730:	8a 01       	movw	r16, r20
    3732:	08 1b       	sub	r16, r24
    3734:	19 0b       	sbc	r17, r25
               break;
    3736:	44 c0       	rjmp	.+136    	; 0x37c0 <QS_Counts_to_Distance+0x218>
    3738:	e1 e0       	ldi	r30, 0x01	; 1
    373a:	e6 0f       	add	r30, r22
    373c:	6f 5f       	subi	r22, 0xFF	; 255
    373e:	7f 4f       	sbci	r23, 0xFF	; 255
    }
    else if(led==2) 
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    3740:	69 30       	cpi	r22, 0x09	; 9
    3742:	71 05       	cpc	r23, r1
    3744:	b1 f6       	brne	.-84     	; 0x36f2 <QS_Counts_to_Distance+0x14a>
    3746:	3c c0       	rjmp	.+120    	; 0x37c0 <QS_Counts_to_Distance+0x218>
               distance.u16[LSB] = offset_2[indexLinear] - distance.u16[MSB];
               break;
           }
       }
    }
	else if(led==3) 
    3748:	63 30       	cpi	r22, 0x03	; 3
    374a:	09 f0       	breq	.+2      	; 0x374e <QS_Counts_to_Distance+0x1a6>
    374c:	42 c0       	rjmp	.+132    	; 0x37d2 <QS_Counts_to_Distance+0x22a>
	{
		// Perform piecewise linear approximation
		indexLinear = 0;
		for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
		{
			if (counts > piecewise_brackets_3[indexLinear])
    374e:	cf 56       	subi	r28, 0x6F	; 111
    3750:	df 4f       	sbci	r29, 0xFF	; 255
    3752:	48 81       	ld	r20, Y
    3754:	59 81       	ldd	r21, Y+1	; 0x01
    3756:	c1 59       	subi	r28, 0x91	; 145
    3758:	d0 40       	sbci	r29, 0x00	; 0
    375a:	48 17       	cp	r20, r24
    375c:	59 07       	cpc	r21, r25
    375e:	68 f0       	brcs	.+26     	; 0x377a <QS_Counts_to_Distance+0x1d2>
    3760:	de 01       	movw	r26, r28
    3762:	ad 56       	subi	r26, 0x6D	; 109
    3764:	bf 4f       	sbci	r27, 0xFF	; 255
    3766:	61 e0       	ldi	r22, 0x01	; 1
    3768:	70 e0       	ldi	r23, 0x00	; 0
    376a:	e6 2f       	mov	r30, r22
    376c:	ab 01       	movw	r20, r22
    376e:	ed 90       	ld	r14, X+
    3770:	fd 90       	ld	r15, X+
    3772:	e8 16       	cp	r14, r24
    3774:	f9 06       	cpc	r15, r25
    3776:	e8 f4       	brcc	.+58     	; 0x37b2 <QS_Counts_to_Distance+0x20a>
    3778:	03 c0       	rjmp	.+6      	; 0x3780 <QS_Counts_to_Distance+0x1d8>
    377a:	40 e0       	ldi	r20, 0x00	; 0
    377c:	50 e0       	ldi	r21, 0x00	; 0
    377e:	e0 e0       	ldi	r30, 0x00	; 0
			{
				distance.u32 = (u32)counts * (u32)slope_3[indexLinear];
    3780:	44 0f       	add	r20, r20
    3782:	55 1f       	adc	r21, r21
    3784:	af e7       	ldi	r26, 0x7F	; 127
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	ac 0f       	add	r26, r28
    378a:	bd 1f       	adc	r27, r29
    378c:	a4 0f       	add	r26, r20
    378e:	b5 1f       	adc	r27, r21
    3790:	2d 91       	ld	r18, X+
    3792:	3c 91       	ld	r19, X
    3794:	dc 01       	movw	r26, r24
    3796:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <__umulhisi3>
				distance.u16[LSB] = offset_3[indexLinear] - distance.u16[MSB];
    379a:	ad e6       	ldi	r26, 0x6D	; 109
    379c:	b0 e0       	ldi	r27, 0x00	; 0
    379e:	ac 0f       	add	r26, r28
    37a0:	bd 1f       	adc	r27, r29
    37a2:	a4 0f       	add	r26, r20
    37a4:	b5 1f       	adc	r27, r21
    37a6:	4d 91       	ld	r20, X+
    37a8:	5c 91       	ld	r21, X
    37aa:	8a 01       	movw	r16, r20
    37ac:	08 1b       	sub	r16, r24
    37ae:	19 0b       	sbc	r17, r25
				break;
    37b0:	07 c0       	rjmp	.+14     	; 0x37c0 <QS_Counts_to_Distance+0x218>
    37b2:	e1 e0       	ldi	r30, 0x01	; 1
    37b4:	e6 0f       	add	r30, r22
    37b6:	6f 5f       	subi	r22, 0xFF	; 255
    37b8:	7f 4f       	sbci	r23, 0xFF	; 255
    }
	else if(led==3) 
	{
		// Perform piecewise linear approximation
		indexLinear = 0;
		for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    37ba:	69 30       	cpi	r22, 0x09	; 9
    37bc:	71 05       	cpc	r23, r1
    37be:	a9 f6       	brne	.-86     	; 0x376a <QS_Counts_to_Distance+0x1c2>
		}
	}
    else return -1;  /* Invalid channel number */

    // Set to a max value if above a certain level.
    if (distance.u16[LSB] > 250 || indexLinear == maxIndex)
    37c0:	0b 3f       	cpi	r16, 0xFB	; 251
    37c2:	11 05       	cpc	r17, r1
    37c4:	10 f4       	brcc	.+4      	; 0x37ca <QS_Counts_to_Distance+0x222>
    37c6:	e9 30       	cpi	r30, 0x09	; 9
    37c8:	11 f4       	brne	.+4      	; 0x37ce <QS_Counts_to_Distance+0x226>
    {
        distance.u16[LSB] = 250;
    37ca:	0a ef       	ldi	r16, 0xFA	; 250
    37cc:	10 e0       	ldi	r17, 0x00	; 0
    }
    return (distance.u16[LSB]);
    37ce:	c8 01       	movw	r24, r16
    37d0:	02 c0       	rjmp	.+4      	; 0x37d6 <QS_Counts_to_Distance+0x22e>
				distance.u16[LSB] = offset_3[indexLinear] - distance.u16[MSB];
				break;
			}
		}
	}
    else return -1;  /* Invalid channel number */
    37d2:	8f ef       	ldi	r24, 0xFF	; 255
    37d4:	9f ef       	ldi	r25, 0xFF	; 255
    if (distance.u16[LSB] > 250 || indexLinear == maxIndex)
    {
        distance.u16[LSB] = 250;
    }
    return (distance.u16[LSB]);
}
    37d6:	ce 55       	subi	r28, 0x5E	; 94
    37d8:	df 4f       	sbci	r29, 0xFF	; 255
    37da:	cd bf       	out	0x3d, r28	; 61
    37dc:	de bf       	out	0x3e, r29	; 62
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	1f 91       	pop	r17
    37e4:	0f 91       	pop	r16
    37e6:	ff 90       	pop	r15
    37e8:	ef 90       	pop	r14
    37ea:	08 95       	ret

000037ec <SliderAlgorithm>:

void SliderAlgorithm(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples, u16 scale)
{
    37ec:	3f 92       	push	r3
    37ee:	4f 92       	push	r4
    37f0:	5f 92       	push	r5
    37f2:	6f 92       	push	r6
    37f4:	7f 92       	push	r7
    37f6:	8f 92       	push	r8
    37f8:	9f 92       	push	r9
    37fa:	af 92       	push	r10
    37fc:	bf 92       	push	r11
    37fe:	cf 92       	push	r12
    3800:	df 92       	push	r13
    3802:	ef 92       	push	r14
    3804:	ff 92       	push	r15
    3806:	0f 93       	push	r16
    3808:	1f 93       	push	r17
    380a:	cf 93       	push	r28
    380c:	df 93       	push	r29
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	ae 97       	sbiw	r28, 0x2e	; 46
    3814:	cd bf       	out	0x3d, r28	; 61
    3816:	de bf       	out	0x3e, r29	; 62
    3818:	7b 01       	movw	r14, r22
    381a:	4a 01       	movw	r8, r20
	//My implementation
	static u16 previous_led_x = 0;
	static u16 previous_led_y = 0;

    // QS_GlobalCounterOverflow assumes milliseconds. Samples->timestamp is in 100 us.
    u16 xdata QS_GlobalCounterOverflow = samples->timestamp / 10;
    381c:	db 01       	movw	r26, r22
    381e:	12 96       	adiw	r26, 0x02	; 2
    3820:	2d 91       	ld	r18, X+
    3822:	3c 91       	ld	r19, X
    3824:	13 97       	sbiw	r26, 0x03	; 3
    3826:	ad ec       	ldi	r26, 0xCD	; 205
    3828:	bc ec       	ldi	r27, 0xCC	; 204
    382a:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <__umulhisi3>
    382e:	6c 01       	movw	r12, r24
    3830:	d6 94       	lsr	r13
    3832:	c7 94       	ror	r12
    3834:	d6 94       	lsr	r13
    3836:	c7 94       	ror	r12
    3838:	d6 94       	lsr	r13
    383a:	c7 94       	ror	r12

    // x position "bucket" endpoints to determine LED states and recognize Pause gesture.
    u16 code xbucket_Array[10] = {1, 159, 272, 385, 498, 611, 724, 837, 1100, 1102};
    383c:	84 e1       	ldi	r24, 0x14	; 20
    383e:	e0 e9       	ldi	r30, 0x90	; 144
    3840:	f0 e2       	ldi	r31, 0x20	; 32
    3842:	de 01       	movw	r26, r28
    3844:	11 96       	adiw	r26, 0x01	; 1
    3846:	01 90       	ld	r0, Z+
    3848:	0d 92       	st	X+, r0
    384a:	8a 95       	dec	r24
    384c:	e1 f7       	brne	.-8      	; 0x3846 <SliderAlgorithm+0x5a>

    // P1 LED values corresponding to the position buckets
    u8 code LED_P1_Vals[10] = {0xFF, 0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F, 0xFF};   
    384e:	8a e0       	ldi	r24, 0x0A	; 10
    3850:	e4 ea       	ldi	r30, 0xA4	; 164
    3852:	f0 e2       	ldi	r31, 0x20	; 32
    3854:	de 01       	movw	r26, r28
    3856:	55 96       	adiw	r26, 0x15	; 21
    3858:	01 90       	ld	r0, Z+
    385a:	0d 92       	st	X+, r0
    385c:	8a 95       	dec	r24
    385e:	e1 f7       	brne	.-8      	; 0x3858 <SliderAlgorithm+0x6c>

    // P1 patterns for LED state machine.  Sent in reverse order, '0' bits are ON
    u8 code LED_swipe_left_pattern[8]  = 
    3860:	88 e0       	ldi	r24, 0x08	; 8
    3862:	ee ea       	ldi	r30, 0xAE	; 174
    3864:	f0 e2       	ldi	r31, 0x20	; 32
    3866:	de 01       	movw	r26, r28
    3868:	5f 96       	adiw	r26, 0x1f	; 31
    386a:	01 90       	ld	r0, Z+
    386c:	0d 92       	st	X+, r0
    386e:	8a 95       	dec	r24
    3870:	e1 f7       	brne	.-8      	; 0x386a <SliderAlgorithm+0x7e>
      {0xFF, 0xFE, 0xF8, 0xE1, 0x87, 0x1F, 0x7F, 0xFF};

    u8 code LED_swipe_right_pattern[8] = 
    3872:	88 e0       	ldi	r24, 0x08	; 8
    3874:	e6 eb       	ldi	r30, 0xB6	; 182
    3876:	f0 e2       	ldi	r31, 0x20	; 32
    3878:	de 01       	movw	r26, r28
    387a:	97 96       	adiw	r26, 0x27	; 39
    387c:	01 90       	ld	r0, Z+
    387e:	0d 92       	st	X+, r0
    3880:	8a 95       	dec	r24
    3882:	e1 f7       	brne	.-8      	; 0x387c <SliderAlgorithm+0x90>
    s16 xdata xdiff;
    u8 xdata swipe_speed;

    int xdata ps;

    ps = (u32) samples->ps1 - (u32)baseline[0];
    3884:	f7 01       	movw	r30, r14
    3886:	82 85       	ldd	r24, Z+10	; 0x0a
    3888:	93 85       	ldd	r25, Z+11	; 0x0b
    388a:	20 91 77 2b 	lds	r18, 0x2B77
    388e:	30 91 78 2b 	lds	r19, 0x2B78
    3892:	82 1b       	sub	r24, r18
    3894:	93 0b       	sbc	r25, r19
    3896:	12 f4       	brpl	.+4      	; 0x389c <SliderAlgorithm+0xb0>
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	90 e0       	ldi	r25, 0x00	; 0
    ps *= scale;

    // Raw IR sensor 0 and 1 are stored in channels 4 and 5
    // ALS is stored in channel 6
    // Calculate r1 and r2 distances; store in channels 0 and 1
    r1 = QS_Counts_to_Distance ((u16)ps, 1);
    389c:	61 e0       	ldi	r22, 0x01	; 1
    389e:	9c 01       	movw	r18, r24
    38a0:	82 9e       	mul	r8, r18
    38a2:	c0 01       	movw	r24, r0
    38a4:	83 9e       	mul	r8, r19
    38a6:	90 0d       	add	r25, r0
    38a8:	92 9e       	mul	r9, r18
    38aa:	90 0d       	add	r25, r0
    38ac:	11 24       	eor	r1, r1
    38ae:	7c de       	rcall	.-776    	; 0x35a8 <QS_Counts_to_Distance>
    38b0:	8c 01       	movw	r16, r24
	
	//printf("r1 = %d , counts = %d \r\n",r1,(u16)ps);

    ps = (u32) samples->ps2 - (u32)baseline[1];
    38b2:	d7 01       	movw	r26, r14
    38b4:	1c 96       	adiw	r26, 0x0c	; 12
    38b6:	8d 91       	ld	r24, X+
    38b8:	9c 91       	ld	r25, X
    38ba:	1d 97       	sbiw	r26, 0x0d	; 13
    38bc:	20 91 79 2b 	lds	r18, 0x2B79
    38c0:	30 91 7a 2b 	lds	r19, 0x2B7A
    38c4:	82 1b       	sub	r24, r18
    38c6:	93 0b       	sbc	r25, r19
    38c8:	12 f4       	brpl	.+4      	; 0x38ce <SliderAlgorithm+0xe2>
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    if (ps < 0) ps = 0;

    // Scale it
    ps *= (u32)scale;

    r2 = QS_Counts_to_Distance ((u16)ps, 1);
    38ce:	61 e0       	ldi	r22, 0x01	; 1
    38d0:	fc 01       	movw	r30, r24
    38d2:	8e 9e       	mul	r8, r30
    38d4:	c0 01       	movw	r24, r0
    38d6:	8f 9e       	mul	r8, r31
    38d8:	90 0d       	add	r25, r0
    38da:	9e 9e       	mul	r9, r30
    38dc:	90 0d       	add	r25, r0
    38de:	11 24       	eor	r1, r1
    38e0:	63 de       	rcall	.-826    	; 0x35a8 <QS_Counts_to_Distance>
    38e2:	4c 01       	movw	r8, r24
   ////////////////////////////////////////////////////////////////////////////
   // Position calculation and swipe gesture detection

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
    38e4:	98 01       	movw	r18, r16
    38e6:	d8 01       	movw	r26, r16
    38e8:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <__umulhisi3>
   x.u32 = x.u32 + 33000;
    38ec:	2b 01       	movw	r4, r22
    38ee:	3c 01       	movw	r6, r24
    38f0:	f8 ee       	ldi	r31, 0xE8	; 232
    38f2:	4f 0e       	add	r4, r31
    38f4:	f0 e8       	ldi	r31, 0x80	; 128
    38f6:	5f 1e       	adc	r5, r31
    38f8:	61 1c       	adc	r6, r1
    38fa:	71 1c       	adc	r7, r1
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    38fc:	94 01       	movw	r18, r8
    38fe:	d4 01       	movw	r26, r8
    3900:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <__umulhisi3>
    3904:	a3 01       	movw	r20, r6
    3906:	92 01       	movw	r18, r4
    3908:	26 1b       	sub	r18, r22
    390a:	37 0b       	sbc	r19, r23
    390c:	48 0b       	sbc	r20, r24
    390e:	59 0b       	sbc	r21, r25
   if (x.s32 < 0)
    3910:	1a f4       	brpl	.+6      	; 0x3918 <SliderAlgorithm+0x12c>
   {
     x.s32 = 0;
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	a9 01       	movw	r20, r18
   }
   x.u32 = x.u32 / 60;
    3918:	ca 01       	movw	r24, r20
    391a:	b9 01       	movw	r22, r18
    391c:	2c e3       	ldi	r18, 0x3C	; 60
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	40 e0       	ldi	r20, 0x00	; 0
    3922:	50 e0       	ldi	r21, 0x00	; 0
    3924:	0e 94 c8 3a 	call	0x7590	; 0x7590 <__udivmodsi4>

   // limit x to maximum for pad
   if (x.u16[LSB] > 1101)
    3928:	2e 34       	cpi	r18, 0x4E	; 78
    392a:	64 e0       	ldi	r22, 0x04	; 4
    392c:	36 07       	cpc	r19, r22
    392e:	10 f0       	brcs	.+4      	; 0x3934 <SliderAlgorithm+0x148>
   {
     x.u16[LSB] = 1101;
    3930:	2d e4       	ldi	r18, 0x4D	; 77
    3932:	34 e0       	ldi	r19, 0x04	; 4
	   y.u16[LSB] = 1101;
   }

   
   // Determine "z" and recognize whether "swipe" type gesture has occured
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
    3934:	01 3f       	cpi	r16, 0xF1	; 241
    3936:	11 05       	cpc	r17, r1
    3938:	20 f4       	brcc	.+8      	; 0x3942 <SliderAlgorithm+0x156>
    393a:	81 ef       	ldi	r24, 0xF1	; 241
    393c:	88 16       	cp	r8, r24
    393e:	91 04       	cpc	r9, r1
    3940:	c8 f1       	brcs	.+114    	; 0x39b4 <SliderAlgorithm+0x1c8>
   {
      // check for end of swipe
      if (out_of_range == 0)
    3942:	80 91 11 20 	lds	r24, 0x2011
    3946:	81 11       	cpse	r24, r1
    3948:	1e c0       	rjmp	.+60     	; 0x3986 <SliderAlgorithm+0x19a>
      {
        xexit = xlast;
    394a:	80 91 b6 29 	lds	r24, 0x29B6
    394e:	90 91 b7 29 	lds	r25, 0x29B7
    3952:	80 93 b4 29 	sts	0x29B4, r24
    3956:	90 93 b5 29 	sts	0x29B5, r25

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
    395a:	60 91 b2 29 	lds	r22, 0x29B2
    395e:	70 91 b3 29 	lds	r23, 0x29B3
    3962:	f6 01       	movw	r30, r12
    3964:	e6 1b       	sub	r30, r22
    3966:	f7 0b       	sbc	r31, r23
    3968:	f3 97       	sbiw	r30, 0x33	; 51
    396a:	e2 31       	cpi	r30, 0x12	; 18
    396c:	f1 40       	sbci	r31, 0x01	; 1
    396e:	68 f4       	brcc	.+26     	; 0x398a <SliderAlgorithm+0x19e>
        {
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
    3970:	6b 5b       	subi	r22, 0xBB	; 187
    3972:	36 2e       	mov	r3, r22
    3974:	3c 18       	sub	r3, r12
            xdiff = (s16)xenter-(s16)xexit;
    3976:	a0 90 b0 29 	lds	r10, 0x29B0
    397a:	b0 90 b1 29 	lds	r11, 0x29B1
    397e:	a8 1a       	sub	r10, r24
    3980:	b9 0a       	sbc	r11, r25
        xexit = xlast;

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
        {
            swipe_detect = 1;   // indicate that a swipe was detected
    3982:	e1 e0       	ldi	r30, 0x01	; 1
    3984:	03 c0       	rjmp	.+6      	; 0x398c <SliderAlgorithm+0x1a0>
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    3986:	e0 e0       	ldi	r30, 0x00	; 0
    3988:	01 c0       	rjmp	.+2      	; 0x398c <SliderAlgorithm+0x1a0>
    398a:	e0 e0       	ldi	r30, 0x00	; 0
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
            xdiff = (s16)xenter-(s16)xexit;
        }
      }
      out_of_range = 1;
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	80 93 11 20 	sts	0x2011, r24
      if (xexit > 550)
    3992:	80 91 b4 29 	lds	r24, 0x29B4
    3996:	90 91 b5 29 	lds	r25, 0x29B5
    399a:	87 32       	cpi	r24, 0x27	; 39
    399c:	92 40       	sbci	r25, 0x02	; 2
    399e:	18 f0       	brcs	.+6      	; 0x39a6 <SliderAlgorithm+0x1ba>
      {
        x.u16[LSB] = 1101;
    39a0:	2d e4       	ldi	r18, 0x4D	; 77
    39a2:	34 e0       	ldi	r19, 0x04	; 4
    39a4:	02 c0       	rjmp	.+4      	; 0x39aa <SliderAlgorithm+0x1be>
      }
      else
      {
        x.u16[LSB] = 0;
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
      }
      z = MAX_RADIUS;
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    39aa:	c0 92 ae 29 	sts	0x29AE, r12
    39ae:	d0 92 af 29 	sts	0x29AF, r13
    39b2:	13 c0       	rjmp	.+38     	; 0x39da <SliderAlgorithm+0x1ee>
   }
   else
   {
      // check for start of swipe
      if (out_of_range == 1)
    39b4:	80 91 11 20 	lds	r24, 0x2011
    39b8:	81 30       	cpi	r24, 0x01	; 1
    39ba:	41 f4       	brne	.+16     	; 0x39cc <SliderAlgorithm+0x1e0>
      {
        xenter = x.u16[LSB];
    39bc:	20 93 b0 29 	sts	0x29B0, r18
    39c0:	30 93 b1 29 	sts	0x29B1, r19
        SwipeStartTime = QS_GlobalCounterOverflow;
    39c4:	c0 92 b2 29 	sts	0x29B2, r12
    39c8:	d0 92 b3 29 	sts	0x29B3, r13
      }
      out_of_range = 0;
    39cc:	10 92 11 20 	sts	0x2011, r1

      xlast = x.u16[LSB];
    39d0:	20 93 b6 29 	sts	0x29B6, r18
    39d4:	30 93 b7 29 	sts	0x29B7, r19
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    39d8:	e0 e0       	ldi	r30, 0x00	; 0
      {
         z = r1;
      }
   }
   
   int16_t tmp_x = 15-((x.u16[LSB])/73);
    39da:	89 01       	movw	r16, r18
    39dc:	a1 e7       	ldi	r26, 0x71	; 113
    39de:	b0 ee       	ldi	r27, 0xE0	; 224
    39e0:	0e 94 f0 3a 	call	0x75e0	; 0x75e0 <__umulhisi3>
    39e4:	9c 01       	movw	r18, r24
    39e6:	00 24       	eor	r0, r0
    39e8:	22 0f       	add	r18, r18
    39ea:	33 1f       	adc	r19, r19
    39ec:	00 1c       	adc	r0, r0
    39ee:	22 0f       	add	r18, r18
    39f0:	33 1f       	adc	r19, r19
    39f2:	00 1c       	adc	r0, r0
    39f4:	23 2f       	mov	r18, r19
    39f6:	30 2d       	mov	r19, r0
    39f8:	8f e0       	ldi	r24, 0x0F	; 15
    39fa:	90 e0       	ldi	r25, 0x00	; 0
    39fc:	82 1b       	sub	r24, r18
    39fe:	93 0b       	sbc	r25, r19
   
   if (tmp_x < 0) {
    3a00:	22 f4       	brpl	.+8      	; 0x3a0a <SliderAlgorithm+0x21e>
	   samples->x_axis = 0;
    3a02:	d7 01       	movw	r26, r14
    3a04:	53 96       	adiw	r26, 0x13	; 19
    3a06:	1c 92       	st	X, r1
    3a08:	0b c0       	rjmp	.+22     	; 0x3a20 <SliderAlgorithm+0x234>
   } else if (tmp_x > 15) {
    3a0a:	80 31       	cpi	r24, 0x10	; 16
    3a0c:	91 05       	cpc	r25, r1
    3a0e:	2c f0       	brlt	.+10     	; 0x3a1a <SliderAlgorithm+0x22e>
	   samples->x_axis = 15;
    3a10:	8f e0       	ldi	r24, 0x0F	; 15
    3a12:	d7 01       	movw	r26, r14
    3a14:	53 96       	adiw	r26, 0x13	; 19
    3a16:	8c 93       	st	X, r24
    3a18:	03 c0       	rjmp	.+6      	; 0x3a20 <SliderAlgorithm+0x234>
   } else {
	   samples->x_axis = tmp_x;   
    3a1a:	d7 01       	movw	r26, r14
    3a1c:	53 96       	adiw	r26, 0x13	; 19
    3a1e:	8c 93       	st	X, r24
   // REPLACE_0_PS3( x.u16[LSB] );
   // REPLACE_0_AUX( z );

   // If a swipe was detected, determine the direction (L/R), set up LED state machine
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
    3a20:	e1 30       	cpi	r30, 0x01	; 1
    3a22:	09 f0       	breq	.+2      	; 0x3a26 <SliderAlgorithm+0x23a>
    3a24:	51 c0       	rjmp	.+162    	; 0x3ac8 <SliderAlgorithm+0x2dc>
   {
       if (xdiff > 150)             // Left Swipe
    3a26:	b7 e9       	ldi	r27, 0x97	; 151
    3a28:	ab 16       	cp	r10, r27
    3a2a:	b1 04       	cpc	r11, r1
    3a2c:	14 f1       	brlt	.+68     	; 0x3a72 <SliderAlgorithm+0x286>
    3a2e:	fe 01       	movw	r30, r28
    3a30:	7f 96       	adiw	r30, 0x1f	; 31
    3a32:	a5 ea       	ldi	r26, 0xA5	; 165
    3a34:	b9 e2       	ldi	r27, 0x29	; 41
    3a36:	ce 01       	movw	r24, r28
    3a38:	87 96       	adiw	r24, 0x27	; 39
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
    3a3a:	21 91       	ld	r18, Z+
    3a3c:	2d 93       	st	X+, r18
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
   {
       if (xdiff > 150)             // Left Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    3a3e:	e8 17       	cp	r30, r24
    3a40:	f9 07       	cpc	r31, r25
    3a42:	d9 f7       	brne	.-10     	; 0x3a3a <SliderAlgorithm+0x24e>
    3a44:	88 e0       	ldi	r24, 0x08	; 8
    3a46:	80 93 ad 29 	sts	0x29AD, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send LEFT_SWIPE gesture
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
    3a4a:	bf 92       	push	r11
    3a4c:	af 92       	push	r10
    3a4e:	1f 92       	push	r1
    3a50:	3f 92       	push	r3
    3a52:	8d e0       	ldi	r24, 0x0D	; 13
    3a54:	95 e2       	ldi	r25, 0x25	; 37
    3a56:	9f 93       	push	r25
    3a58:	8f 93       	push	r24
    3a5a:	88 e1       	ldi	r24, 0x18	; 24
    3a5c:	95 e2       	ldi	r25, 0x25	; 37
    3a5e:	9f 93       	push	r25
    3a60:	8f 93       	push	r24
    3a62:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <printf>
			samples->gesture = LEFT_SWIPE;
    3a66:	82 e0       	ldi	r24, 0x02	; 2
    3a68:	f7 01       	movw	r30, r14
    3a6a:	82 8b       	std	Z+18, r24	; 0x12
    3a6c:	cd bf       	out	0x3d, r28	; 61
    3a6e:	de bf       	out	0x3e, r29	; 62
    3a70:	2e c0       	rjmp	.+92     	; 0x3ace <SliderAlgorithm+0x2e2>
       }
       else if (xdiff < -150)       // Right Swipe
    3a72:	3a e6       	ldi	r19, 0x6A	; 106
    3a74:	a3 16       	cp	r10, r19
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	b3 06       	cpc	r11, r19
    3a7a:	4c f5       	brge	.+82     	; 0x3ace <SliderAlgorithm+0x2e2>
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	b7 96       	adiw	r30, 0x27	; 39
    3a80:	a5 ea       	ldi	r26, 0xA5	; 165
    3a82:	b9 e2       	ldi	r27, 0x29	; 41
    3a84:	ce 01       	movw	r24, r28
    3a86:	8f 96       	adiw	r24, 0x2f	; 47
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
    3a88:	21 91       	ld	r18, Z+
    3a8a:	2d 93       	st	X+, r18
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
			samples->gesture = LEFT_SWIPE;
       }
       else if (xdiff < -150)       // Right Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    3a8c:	e8 17       	cp	r30, r24
    3a8e:	f9 07       	cpc	r31, r25
    3a90:	d9 f7       	brne	.-10     	; 0x3a88 <SliderAlgorithm+0x29c>
    3a92:	88 e0       	ldi	r24, 0x08	; 8
    3a94:	80 93 ad 29 	sts	0x29AD, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send RIGHT_SWIPE gesture
            printf("                            %s: %d, %d\n", "RIGHT_SWIPE", swipe_speed, -xdiff) ;     
    3a98:	b1 94       	neg	r11
    3a9a:	a1 94       	neg	r10
    3a9c:	b1 08       	sbc	r11, r1
    3a9e:	bf 92       	push	r11
    3aa0:	af 92       	push	r10
    3aa2:	1f 92       	push	r1
    3aa4:	3f 92       	push	r3
    3aa6:	80 e4       	ldi	r24, 0x40	; 64
    3aa8:	95 e2       	ldi	r25, 0x25	; 37
    3aaa:	9f 93       	push	r25
    3aac:	8f 93       	push	r24
    3aae:	88 e1       	ldi	r24, 0x18	; 24
    3ab0:	95 e2       	ldi	r25, 0x25	; 37
    3ab2:	9f 93       	push	r25
    3ab4:	8f 93       	push	r24
    3ab6:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <printf>
			samples->gesture = RIGHT_SWIPE;       
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	d7 01       	movw	r26, r14
    3abe:	52 96       	adiw	r26, 0x12	; 18
    3ac0:	8c 93       	st	X, r24
    3ac2:	cd bf       	out	0x3d, r28	; 61
    3ac4:	de bf       	out	0x3e, r29	; 62
    3ac6:	03 c0       	rjmp	.+6      	; 0x3ace <SliderAlgorithm+0x2e2>
       }
   } else {
	   samples->gesture = 0;
    3ac8:	d7 01       	movw	r26, r14
    3aca:	52 96       	adiw	r26, 0x12	; 18
    3acc:	1c 92       	st	X, r1
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
   {
        if (x.u16[LSB] < xbucket_Array[xbucket])
    3ace:	89 81       	ldd	r24, Y+1	; 0x01
    3ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad2:	08 17       	cp	r16, r24
    3ad4:	19 07       	cpc	r17, r25
    3ad6:	a8 f0       	brcs	.+42     	; 0x3b02 <SliderAlgorithm+0x316>
    3ad8:	fe 01       	movw	r30, r28
    3ada:	33 96       	adiw	r30, 0x03	; 3

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    3adc:	21 e0       	ldi	r18, 0x01	; 1
   {
        if (x.u16[LSB] < xbucket_Array[xbucket])
    3ade:	81 91       	ld	r24, Z+
    3ae0:	91 91       	ld	r25, Z+
    3ae2:	08 17       	cp	r16, r24
    3ae4:	19 07       	cpc	r17, r25
    3ae6:	20 f0       	brcs	.+8      	; 0x3af0 <SliderAlgorithm+0x304>

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    3ae8:	2f 5f       	subi	r18, 0xFF	; 255
    3aea:	2a 30       	cpi	r18, 0x0A	; 10
    3aec:	c1 f7       	brne	.-16     	; 0x3ade <SliderAlgorithm+0x2f2>
    3aee:	6e c0       	rjmp	.+220    	; 0x3bcc <SliderAlgorithm+0x3e0>
            break;
        }
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
    3af0:	80 91 a4 29 	lds	r24, 0x29A4
    3af4:	28 13       	cpse	r18, r24
    3af6:	06 c0       	rjmp	.+12     	; 0x3b04 <SliderAlgorithm+0x318>
    3af8:	29 30       	cpi	r18, 0x09	; 9
    3afa:	21 f0       	breq	.+8      	; 0x3b04 <SliderAlgorithm+0x318>
    3afc:	21 11       	cpse	r18, r1
    3afe:	06 c0       	rjmp	.+12     	; 0x3b0c <SliderAlgorithm+0x320>
    3b00:	01 c0       	rjmp	.+2      	; 0x3b04 <SliderAlgorithm+0x318>

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    3b02:	20 e0       	ldi	r18, 0x00	; 0
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
   {
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3b04:	c0 92 ae 29 	sts	0x29AE, r12
    3b08:	d0 92 af 29 	sts	0x29AF, r13
   }
   last_xbucket = xbucket;  // store latest information for next comparison
    3b0c:	20 93 a4 29 	sts	0x29A4, r18

   // LED State machine - Pause gesture recognition is also integrated here 
   if (LED_State != 0)  // indicate gesture pattern
    3b10:	e0 91 ad 29 	lds	r30, 0x29AD
    3b14:	ee 23       	and	r30, r30
    3b16:	e1 f0       	breq	.+56     	; 0x3b50 <SliderAlgorithm+0x364>
   {
      if ((u8)(QS_GlobalCounterOverflow - LED_flash_timeout) >= LED_STATE_TIME)
    3b18:	80 91 a2 29 	lds	r24, 0x29A2
    3b1c:	bc 2d       	mov	r27, r12
    3b1e:	b8 1b       	sub	r27, r24
    3b20:	b7 32       	cpi	r27, 0x27	; 39
    3b22:	08 f4       	brcc	.+2      	; 0x3b26 <SliderAlgorithm+0x33a>
    3b24:	58 c0       	rjmp	.+176    	; 0x3bd6 <SliderAlgorithm+0x3ea>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    3b26:	c0 92 a2 29 	sts	0x29A2, r12
    3b2a:	d0 92 a3 29 	sts	0x29A3, r13

         // Write to Port 1 of the MCU
         PortSet( 1, LED_flash_pattern[(--LED_State)%8]); 
    3b2e:	e1 50       	subi	r30, 0x01	; 1
    3b30:	e0 93 ad 29 	sts	0x29AD, r30
    3b34:	e7 70       	andi	r30, 0x07	; 7
    3b36:	f0 e0       	ldi	r31, 0x00	; 0
    3b38:	eb 55       	subi	r30, 0x5B	; 91
    3b3a:	f6 4d       	sbci	r31, 0xD6	; 214
    3b3c:	60 81       	ld	r22, Z
    3b3e:	70 e0       	ldi	r23, 0x00	; 0
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	dd dc       	rcall	.-1606   	; 0x3500 <PortSet>

         Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3b46:	c0 92 ae 29 	sts	0x29AE, r12
    3b4a:	d0 92 af 29 	sts	0x29AF, r13
    3b4e:	43 c0       	rjmp	.+134    	; 0x3bd6 <SliderAlgorithm+0x3ea>
      //PortSet( 1, LED_P1_Vals[xbucket]);
	  //printf("x: %d \r\n",x.u16[LSB]);


      // check time stamp for pause
      if ((QS_GlobalCounterOverflow - Pause_gesture_timeout) >= PAUSE_TIMEOUT) 
    3b50:	80 91 ae 29 	lds	r24, 0x29AE
    3b54:	90 91 af 29 	lds	r25, 0x29AF
    3b58:	f6 01       	movw	r30, r12
    3b5a:	e8 1b       	sub	r30, r24
    3b5c:	f9 0b       	sbc	r31, r25
    3b5e:	cf 01       	movw	r24, r30
    3b60:	8a 38       	cpi	r24, 0x8A	; 138
    3b62:	92 40       	sbci	r25, 0x02	; 2
    3b64:	c0 f1       	brcs	.+112    	; 0x3bd6 <SliderAlgorithm+0x3ea>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    3b66:	c0 92 a2 29 	sts	0x29A2, r12
    3b6a:	d0 92 a3 29 	sts	0x29A3, r13
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3b6e:	fe 01       	movw	r30, r28
    3b70:	e2 0f       	add	r30, r18
    3b72:	f1 1d       	adc	r31, r1
    3b74:	85 89       	ldd	r24, Z+21	; 0x15
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    3b76:	9f ef       	ldi	r25, 0xFF	; 255
    3b78:	90 93 a5 29 	sts	0x29A5, r25
            LED_flash_pattern[LED_State++] = 0xFF;
    3b7c:	90 93 a6 29 	sts	0x29A6, r25
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3b80:	80 93 a7 29 	sts	0x29A7, r24
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3b84:	80 93 a8 29 	sts	0x29A8, r24
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    3b88:	90 93 a9 29 	sts	0x29A9, r25
            LED_flash_pattern[LED_State++] = 0xFF;
    3b8c:	90 93 aa 29 	sts	0x29AA, r25
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3b90:	80 93 ab 29 	sts	0x29AB, r24
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3b94:	80 93 ac 29 	sts	0x29AC, r24
         } // LED_State should be 8 when this loop is finished.

         LED_State = 16; // Set LED_State to 16 to repeat the pattern twice
    3b98:	80 e1       	ldi	r24, 0x10	; 16
    3b9a:	80 93 ad 29 	sts	0x29AD, r24

         // Send off a PAUSE gesture to host.
         printf("                            %s: %d\n", "PAUSE", xbucket<<8) ;   
    3b9e:	2f 93       	push	r18
    3ba0:	1f 92       	push	r1
    3ba2:	8c e4       	ldi	r24, 0x4C	; 76
    3ba4:	95 e2       	ldi	r25, 0x25	; 37
    3ba6:	9f 93       	push	r25
    3ba8:	8f 93       	push	r24
    3baa:	82 e5       	ldi	r24, 0x52	; 82
    3bac:	95 e2       	ldi	r25, 0x25	; 37
    3bae:	9f 93       	push	r25
    3bb0:	8f 93       	push	r24
    3bb2:	0e 94 71 3e 	call	0x7ce2	; 0x7ce2 <printf>
		 samples->gesture = PAUSE;         
    3bb6:	83 e0       	ldi	r24, 0x03	; 3
    3bb8:	d7 01       	movw	r26, r14
    3bba:	52 96       	adiw	r26, 0x12	; 18
    3bbc:	8c 93       	st	X, r24
    3bbe:	0f 90       	pop	r0
    3bc0:	0f 90       	pop	r0
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	05 c0       	rjmp	.+10     	; 0x3bd6 <SliderAlgorithm+0x3ea>
            break;
        }
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
    3bcc:	80 91 a4 29 	lds	r24, 0x29A4
    3bd0:	28 13       	cpse	r18, r24
    3bd2:	98 cf       	rjmp	.-208    	; 0x3b04 <SliderAlgorithm+0x318>
    3bd4:	9b cf       	rjmp	.-202    	; 0x3b0c <SliderAlgorithm+0x320>
       // It is best to display this than printf. Use AUX and PS3 channels
       //REPLACE_0_PS3( 0 );
       //REPLACE_0_AUX( 0 ); 
	    //printf("no touch \r\n");
   }
}
    3bd6:	ae 96       	adiw	r28, 0x2e	; 46
    3bd8:	cd bf       	out	0x3d, r28	; 61
    3bda:	de bf       	out	0x3e, r29	; 62
    3bdc:	df 91       	pop	r29
    3bde:	cf 91       	pop	r28
    3be0:	1f 91       	pop	r17
    3be2:	0f 91       	pop	r16
    3be4:	ff 90       	pop	r15
    3be6:	ef 90       	pop	r14
    3be8:	df 90       	pop	r13
    3bea:	cf 90       	pop	r12
    3bec:	bf 90       	pop	r11
    3bee:	af 90       	pop	r10
    3bf0:	9f 90       	pop	r9
    3bf2:	8f 90       	pop	r8
    3bf4:	7f 90       	pop	r7
    3bf6:	6f 90       	pop	r6
    3bf8:	5f 90       	pop	r5
    3bfa:	4f 90       	pop	r4
    3bfc:	3f 90       	pop	r3
    3bfe:	08 95       	ret

00003c00 <twi_setup>:
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3c00:	e0 e8       	ldi	r30, 0x80	; 128
    3c02:	f4 e0       	ldi	r31, 0x04	; 4
    3c04:	12 82       	std	Z+2, r1	; 0x02
    3c06:	89 e0       	ldi	r24, 0x09	; 9
    3c08:	85 83       	std	Z+5, r24	; 0x05
    3c0a:	88 e0       	ldi	r24, 0x08	; 8
    3c0c:	81 83       	std	Z+1, r24	; 0x01
    3c0e:	81 e0       	ldi	r24, 0x01	; 1
    3c10:	84 83       	std	Z+4, r24	; 0x04
    3c12:	08 95       	ret

00003c14 <twi_start_transmission>:
}

uint8_t twi_start_transmission(TWI_t* const TWI,
const uint8_t slave_address,
const uint8_t timeout_ms)
{
    3c14:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    3c16:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    3c18:	84 e6       	ldi	r24, 0x64	; 100
    3c1a:	48 9f       	mul	r20, r24
    3c1c:	a0 01       	movw	r20, r0
    3c1e:	11 24       	eor	r1, r1
	while (timeout_remaining)
    3c20:	41 15       	cp	r20, r1
    3c22:	51 05       	cpc	r21, r1
    3c24:	09 f1       	breq	.+66     	; 0x3c68 <twi_start_transmission+0x54>
	{
		uint8_t status = TWI->MASTER.STATUS;
    3c26:	84 81       	ldd	r24, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    3c28:	98 2f       	mov	r25, r24
    3c2a:	98 74       	andi	r25, 0x48	; 72
    3c2c:	98 34       	cpi	r25, 0x48	; 72
    3c2e:	11 f4       	brne	.+4      	; 0x3c34 <twi_start_transmission+0x20>
		{
			TWI->MASTER.ADDR = slave_address;
    3c30:	66 83       	std	Z+6, r22	; 0x06
    3c32:	0a c0       	rjmp	.+20     	; 0x3c48 <twi_start_transmission+0x34>
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    3c34:	98 2f       	mov	r25, r24
    3c36:	90 75       	andi	r25, 0x50	; 80
    3c38:	90 35       	cpi	r25, 0x50	; 80
    3c3a:	21 f4       	brne	.+8      	; 0x3c44 <twi_start_transmission+0x30>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3c3c:	87 e0       	ldi	r24, 0x07	; 7
    3c3e:	83 83       	std	Z+3, r24	; 0x03
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
    3c40:	84 e0       	ldi	r24, 0x04	; 4
    3c42:	08 95       	ret
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    3c44:	80 7c       	andi	r24, 0xC0	; 192
    3c46:	71 f4       	brne	.+28     	; 0x3c64 <twi_start_transmission+0x50>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3c48:	8a e6       	ldi	r24, 0x6A	; 106
    3c4a:	8a 95       	dec	r24
    3c4c:	f1 f7       	brne	.-4      	; 0x3c4a <twi_start_transmission+0x36>
    3c4e:	00 c0       	rjmp	.+0      	; 0x3c50 <twi_start_transmission+0x3c>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    3c50:	41 50       	subi	r20, 0x01	; 1
    3c52:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    3c54:	41 15       	cp	r20, r1
    3c56:	51 05       	cpc	r21, r1
    3c58:	31 f7       	brne	.-52     	; 0x3c26 <twi_start_transmission+0x12>
    3c5a:	06 c0       	rjmp	.+12     	; 0x3c68 <twi_start_transmission+0x54>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3c5c:	87 e0       	ldi	r24, 0x07	; 7
    3c5e:	83 83       	std	Z+3, r24	; 0x03
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
			twi_stop_transmission(TWI);
		}
	}

	return TWI_ERROR_BUS_CAP_TIMEOUT;
    3c60:	83 e0       	ldi	r24, 0x03	; 3
    3c62:	08 95       	ret
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
		{
			return TWI_ERROR_NO_ERROR;
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	08 95       	ret
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    3c68:	84 81       	ldd	r24, Z+4	; 0x04
    3c6a:	85 fd       	sbrc	r24, 5
    3c6c:	f7 cf       	rjmp	.-18     	; 0x3c5c <twi_start_transmission+0x48>
			twi_stop_transmission(TWI);
		}
	}

	return TWI_ERROR_BUS_CAP_TIMEOUT;
    3c6e:	83 e0       	ldi	r24, 0x03	; 3
}
    3c70:	08 95       	ret

00003c72 <twi_send_byte>:

uint8_t twi_send_byte(TWI_t* const TWI,
const uint8_t timeout_ms,
const uint8_t data)
{
    3c72:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
    3c74:	47 83       	std	Z+7, r20	; 0x07
	
	timeout_remaining = (timeout_ms * 100);
    3c76:	84 e6       	ldi	r24, 0x64	; 100
    3c78:	68 9f       	mul	r22, r24
    3c7a:	b0 01       	movw	r22, r0
    3c7c:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    3c7e:	84 81       	ldd	r24, Z+4	; 0x04
    3c80:	86 fd       	sbrc	r24, 6
    3c82:	0f c0       	rjmp	.+30     	; 0x3ca2 <twi_send_byte+0x30>
    3c84:	61 15       	cp	r22, r1
    3c86:	71 05       	cpc	r23, r1
    3c88:	61 f0       	breq	.+24     	; 0x3ca2 <twi_send_byte+0x30>
    3c8a:	8a e6       	ldi	r24, 0x6A	; 106
    3c8c:	8a 95       	dec	r24
    3c8e:	f1 f7       	brne	.-4      	; 0x3c8c <twi_send_byte+0x1a>
    3c90:	00 c0       	rjmp	.+0      	; 0x3c92 <twi_send_byte+0x20>
		_delay_us(10);
		timeout_remaining--;
    3c92:	61 50       	subi	r22, 0x01	; 1
    3c94:	71 09       	sbc	r23, r1
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
	
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    3c96:	84 81       	ldd	r24, Z+4	; 0x04
    3c98:	86 fd       	sbrc	r24, 6
    3c9a:	03 c0       	rjmp	.+6      	; 0x3ca2 <twi_send_byte+0x30>
    3c9c:	61 15       	cp	r22, r1
    3c9e:	71 05       	cpc	r23, r1
    3ca0:	a1 f7       	brne	.-24     	; 0x3c8a <twi_send_byte+0x18>
		_delay_us(10);
		timeout_remaining--;
	}

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    3ca2:	84 81       	ldd	r24, Z+4	; 0x04
    3ca4:	86 ff       	sbrs	r24, 6
    3ca6:	06 c0       	rjmp	.+12     	; 0x3cb4 <twi_send_byte+0x42>
    3ca8:	94 81       	ldd	r25, Z+4	; 0x04
    3caa:	92 95       	swap	r25
    3cac:	91 70       	andi	r25, 0x01	; 1
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	89 27       	eor	r24, r25
    3cb2:	08 95       	ret
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
}
    3cb6:	08 95       	ret

00003cb8 <twi_receive_byte>:

uint8_t twi_receive_byte(TWI_t* const TWI,
const uint8_t timeout_ms,
uint8_t* const data,
const uint8_t end_of_data)
{
    3cb8:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
    3cba:	84 81       	ldd	r24, Z+4	; 0x04
    3cbc:	8c 70       	andi	r24, 0x0C	; 12
    3cbe:	8c 30       	cpi	r24, 0x0C	; 12
    3cc0:	19 f1       	breq	.+70     	; 0x3d08 <twi_receive_byte+0x50>
		return false;
	}
	timeout_remaining = (timeout_ms * 100);
    3cc2:	84 e6       	ldi	r24, 0x64	; 100
    3cc4:	68 9f       	mul	r22, r24
    3cc6:	b0 01       	movw	r22, r0
    3cc8:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm) && timeout_remaining) {
    3cca:	84 81       	ldd	r24, Z+4	; 0x04
    3ccc:	88 23       	and	r24, r24
    3cce:	7c f0       	brlt	.+30     	; 0x3cee <twi_receive_byte+0x36>
    3cd0:	61 15       	cp	r22, r1
    3cd2:	71 05       	cpc	r23, r1
    3cd4:	61 f0       	breq	.+24     	; 0x3cee <twi_receive_byte+0x36>
    3cd6:	aa e6       	ldi	r26, 0x6A	; 106
    3cd8:	aa 95       	dec	r26
    3cda:	f1 f7       	brne	.-4      	; 0x3cd8 <twi_receive_byte+0x20>
    3cdc:	00 c0       	rjmp	.+0      	; 0x3cde <twi_receive_byte+0x26>
		_delay_us(10);
		timeout_remaining--;
    3cde:	61 50       	subi	r22, 0x01	; 1
    3ce0:	71 09       	sbc	r23, r1
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
		return false;
	}
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm) && timeout_remaining) {
    3ce2:	84 81       	ldd	r24, Z+4	; 0x04
    3ce4:	88 23       	and	r24, r24
    3ce6:	1c f0       	brlt	.+6      	; 0x3cee <twi_receive_byte+0x36>
    3ce8:	61 15       	cp	r22, r1
    3cea:	71 05       	cpc	r23, r1
    3cec:	a1 f7       	brne	.-24     	; 0x3cd6 <twi_receive_byte+0x1e>
		_delay_us(10);
		timeout_remaining--;
	}

	*data = TWI->MASTER.DATA;
    3cee:	87 81       	ldd	r24, Z+7	; 0x07
    3cf0:	da 01       	movw	r26, r20
    3cf2:	8c 93       	st	X, r24

	if (end_of_data)
    3cf4:	22 23       	and	r18, r18
    3cf6:	21 f0       	breq	.+8      	; 0x3d00 <twi_receive_byte+0x48>
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3cf8:	87 e0       	ldi	r24, 0x07	; 7
    3cfa:	83 83       	std	Z+3, r24	; 0x03
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	08 95       	ret
	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    3d00:	82 e0       	ldi	r24, 0x02	; 2
    3d02:	83 83       	std	Z+3, r24	; 0x03

	return true;
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	08 95       	ret
const uint8_t end_of_data)
{
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
		return false;
    3d08:	80 e0       	ldi	r24, 0x00	; 0
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
}
    3d0a:	08 95       	ret

00003d0c <twi_read_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
uint8_t* data,
uint8_t length)
{
    3d0c:	bf 92       	push	r11
    3d0e:	cf 92       	push	r12
    3d10:	df 92       	push	r13
    3d12:	ef 92       	push	r14
    3d14:	ff 92       	push	r15
    3d16:	0f 93       	push	r16
    3d18:	1f 93       	push	r17
    3d1a:	cf 93       	push	r28
    3d1c:	df 93       	push	r29
    3d1e:	ec 01       	movw	r28, r24
    3d20:	d6 2e       	mov	r13, r22
    3d22:	f4 2e       	mov	r15, r20
    3d24:	c2 2e       	mov	r12, r18
	uint8_t error_code;
	uint8_t len = length;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    3d26:	66 0f       	add	r22, r22
    3d28:	75 df       	rcall	.-278    	; 0x3c14 <twi_start_transmission>
    3d2a:	81 30       	cpi	r24, 0x01	; 1
    3d2c:	41 f5       	brne	.+80     	; 0x3d7e <twi_read_packet+0x72>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
    3d2e:	4c 2d       	mov	r20, r12
    3d30:	6f 2d       	mov	r22, r15
    3d32:	ce 01       	movw	r24, r28
    3d34:	9e df       	rcall	.-196    	; 0x3c72 <twi_send_byte>
    3d36:	88 23       	and	r24, r24
    3d38:	21 f1       	breq	.+72     	; 0x3d82 <twi_read_packet+0x76>
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
    3d3a:	6d 2d       	mov	r22, r13
    3d3c:	66 0f       	add	r22, r22
    3d3e:	61 60       	ori	r22, 0x01	; 1
    3d40:	4f 2d       	mov	r20, r15
    3d42:	ce 01       	movw	r24, r28
    3d44:	67 df       	rcall	.-306    	; 0x3c14 <twi_start_transmission>
    3d46:	81 30       	cpi	r24, 0x01	; 1
    3d48:	b1 f4       	brne	.+44     	; 0x3d76 <twi_read_packet+0x6a>
    3d4a:	bb 24       	eor	r11, r11
    3d4c:	ba 94       	dec	r11
    3d4e:	be 0c       	add	r11, r14
    3d50:	0f c0       	rjmp	.+30     	; 0x3d70 <twi_read_packet+0x64>
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
			{
				if (!(twi_receive_byte(TWI, timeout_ms, data++, (length == 0))))
    3d52:	68 01       	movw	r12, r16
    3d54:	8f ef       	ldi	r24, 0xFF	; 255
    3d56:	c8 1a       	sub	r12, r24
    3d58:	d8 0a       	sbc	r13, r24
    3d5a:	21 e0       	ldi	r18, 0x01	; 1
    3d5c:	b1 10       	cpse	r11, r1
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	a8 01       	movw	r20, r16
    3d62:	6f 2d       	mov	r22, r15
    3d64:	ce 01       	movw	r24, r28
    3d66:	a8 df       	rcall	.-176    	; 0x3cb8 <twi_receive_byte>
    3d68:	ba 94       	dec	r11
    3d6a:	88 23       	and	r24, r24
    3d6c:	21 f0       	breq	.+8      	; 0x3d76 <twi_read_packet+0x6a>
    3d6e:	86 01       	movw	r16, r12
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
    3d70:	8f ef       	ldi	r24, 0xFF	; 255
    3d72:	b8 12       	cpse	r11, r24
    3d74:	ee cf       	rjmp	.-36     	; 0x3d52 <twi_read_packet+0x46>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3d76:	87 e0       	ldi	r24, 0x07	; 7
    3d78:	8b 83       	std	Y+3, r24	; 0x03
		}

		twi_stop_transmission(TWI);
	}

	return len;
    3d7a:	8e 2d       	mov	r24, r14
    3d7c:	03 c0       	rjmp	.+6      	; 0x3d84 <twi_read_packet+0x78>
    3d7e:	8e 2d       	mov	r24, r14
    3d80:	01 c0       	rjmp	.+2      	; 0x3d84 <twi_read_packet+0x78>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    3d82:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return len;
}
    3d84:	df 91       	pop	r29
    3d86:	cf 91       	pop	r28
    3d88:	1f 91       	pop	r17
    3d8a:	0f 91       	pop	r16
    3d8c:	ff 90       	pop	r15
    3d8e:	ef 90       	pop	r14
    3d90:	df 90       	pop	r13
    3d92:	cf 90       	pop	r12
    3d94:	bf 90       	pop	r11
    3d96:	08 95       	ret

00003d98 <twi_write_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    3d98:	cf 92       	push	r12
    3d9a:	df 92       	push	r13
    3d9c:	ef 92       	push	r14
    3d9e:	ff 92       	push	r15
    3da0:	0f 93       	push	r16
    3da2:	1f 93       	push	r17
    3da4:	cf 93       	push	r28
    3da6:	df 93       	push	r29
    3da8:	ec 01       	movw	r28, r24
    3daa:	f4 2e       	mov	r15, r20
    3dac:	d2 2e       	mov	r13, r18
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    3dae:	66 0f       	add	r22, r22
    3db0:	31 df       	rcall	.-414    	; 0x3c14 <twi_start_transmission>
    3db2:	81 30       	cpi	r24, 0x01	; 1
    3db4:	e1 f4       	brne	.+56     	; 0x3dee <twi_write_packet+0x56>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
    3db6:	4d 2d       	mov	r20, r13
    3db8:	6f 2d       	mov	r22, r15
    3dba:	ce 01       	movw	r24, r28
    3dbc:	5a df       	rcall	.-332    	; 0x3c72 <twi_send_byte>
    3dbe:	88 23       	and	r24, r24
    3dc0:	c1 f0       	breq	.+48     	; 0x3df2 <twi_write_packet+0x5a>
    3dc2:	ea 94       	dec	r14
    3dc4:	c0 2e       	mov	r12, r16
    3dc6:	d1 2e       	mov	r13, r17
    3dc8:	0b c0       	rjmp	.+22     	; 0x3de0 <twi_write_packet+0x48>
			return error_code;
		}

		while (length--)
		{
			if (!(twi_send_byte(TWI, timeout_ms, *(data++))))
    3dca:	f6 01       	movw	r30, r12
    3dcc:	41 91       	ld	r20, Z+
    3dce:	6f 01       	movw	r12, r30
    3dd0:	6f 2d       	mov	r22, r15
    3dd2:	ce 01       	movw	r24, r28
    3dd4:	4e df       	rcall	.-356    	; 0x3c72 <twi_send_byte>
    3dd6:	9f ef       	ldi	r25, 0xFF	; 255
    3dd8:	9e 0d       	add	r25, r14
    3dda:	88 23       	and	r24, r24
    3ddc:	21 f0       	breq	.+8      	; 0x3de6 <twi_write_packet+0x4e>
    3dde:	e9 2e       	mov	r14, r25
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    3de0:	ff ef       	ldi	r31, 0xFF	; 255
    3de2:	ef 12       	cpse	r14, r31
    3de4:	f2 cf       	rjmp	.-28     	; 0x3dca <twi_write_packet+0x32>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3de6:	87 e0       	ldi	r24, 0x07	; 7
    3de8:	8b 83       	std	Y+3, r24	; 0x03
    3dea:	8e 2d       	mov	r24, r14
    3dec:	03 c0       	rjmp	.+6      	; 0x3df4 <twi_write_packet+0x5c>
    3dee:	8e 2d       	mov	r24, r14
    3df0:	01 c0       	rjmp	.+2      	; 0x3df4 <twi_write_packet+0x5c>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    3df2:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return length;
    3df4:	df 91       	pop	r29
    3df6:	cf 91       	pop	r28
    3df8:	1f 91       	pop	r17
    3dfa:	0f 91       	pop	r16
    3dfc:	ff 90       	pop	r15
    3dfe:	ef 90       	pop	r14
    3e00:	df 90       	pop	r13
    3e02:	cf 90       	pop	r12
    3e04:	08 95       	ret

00003e06 <uart_setup>:

#include "uart.h"

void uart_setup(void) {
	
	PORTD.DIRSET = PIN3_bm; //TX
    3e06:	e0 e6       	ldi	r30, 0x60	; 96
    3e08:	f6 e0       	ldi	r31, 0x06	; 6
    3e0a:	88 e0       	ldi	r24, 0x08	; 8
    3e0c:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; //RX
    3e0e:	84 e0       	ldi	r24, 0x04	; 4
    3e10:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
    3e12:	e0 ea       	ldi	r30, 0xA0	; 160
    3e14:	f9 e0       	ldi	r31, 0x09	; 9
    3e16:	80 e2       	ldi	r24, 0x20	; 32
    3e18:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 2094;//207;//0x1111;
    3e1a:	8e e2       	ldi	r24, 0x2E	; 46
    3e1c:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (-7 << 4) | (2094 >> 8);
    3e1e:	88 e9       	ldi	r24, 0x98	; 152
    3e20:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
    3e22:	83 e0       	ldi	r24, 0x03	; 3
    3e24:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    3e26:	88 e1       	ldi	r24, 0x18	; 24
    3e28:	84 83       	std	Z+4, r24	; 0x04
    3e2a:	08 95       	ret

00003e2c <uart_put_char>:
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    3e2c:	e0 ea       	ldi	r30, 0xA0	; 160
    3e2e:	f9 e0       	ldi	r31, 0x09	; 9
    3e30:	91 81       	ldd	r25, Z+1	; 0x01
    3e32:	95 ff       	sbrs	r25, 5
    3e34:	fd cf       	rjmp	.-6      	; 0x3e30 <uart_put_char+0x4>
	USARTD0.DATA = c;
    3e36:	80 93 a0 09 	sts	0x09A0, r24
    3e3a:	08 95       	ret

00003e3c <uart_get_char>:
}

char uart_get_char(void) {
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
    3e3c:	e0 ea       	ldi	r30, 0xA0	; 160
    3e3e:	f9 e0       	ldi	r31, 0x09	; 9
    3e40:	81 81       	ldd	r24, Z+1	; 0x01
    3e42:	88 23       	and	r24, r24
    3e44:	ec f7       	brge	.-6      	; 0x3e40 <uart_get_char+0x4>
	return USARTD0.DATA;
    3e46:	80 91 a0 09 	lds	r24, 0x09A0
}
    3e4a:	08 95       	ret

00003e4c <uart_write_str>:

void uart_write_str(char *str) {
    3e4c:	cf 93       	push	r28
    3e4e:	df 93       	push	r29
    3e50:	ec 01       	movw	r28, r24
	while (*str) {
    3e52:	88 81       	ld	r24, Y
    3e54:	88 23       	and	r24, r24
    3e56:	29 f0       	breq	.+10     	; 0x3e62 <uart_write_str+0x16>
    3e58:	21 96       	adiw	r28, 0x01	; 1
		uart_put_char(*str++);
    3e5a:	e8 df       	rcall	.-48     	; 0x3e2c <uart_put_char>
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
	return USARTD0.DATA;
}

void uart_write_str(char *str) {
	while (*str) {
    3e5c:	89 91       	ld	r24, Y+
    3e5e:	81 11       	cpse	r24, r1
    3e60:	fc cf       	rjmp	.-8      	; 0x3e5a <uart_write_str+0xe>
		uart_put_char(*str++);
	}
	uart_put_char('\r');
    3e62:	8d e0       	ldi	r24, 0x0D	; 13
    3e64:	e3 df       	rcall	.-58     	; 0x3e2c <uart_put_char>
	uart_put_char('\n');
    3e66:	8a e0       	ldi	r24, 0x0A	; 10
    3e68:	e1 df       	rcall	.-62     	; 0x3e2c <uart_put_char>
}
    3e6a:	df 91       	pop	r29
    3e6c:	cf 91       	pop	r28
    3e6e:	08 95       	ret

00003e70 <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
    3e70:	1f 92       	push	r1
    3e72:	0f 92       	push	r0
    3e74:	0f b6       	in	r0, 0x3f	; 63
    3e76:	0f 92       	push	r0
    3e78:	11 24       	eor	r1, r1
    3e7a:	0b b6       	in	r0, 0x3b	; 59
    3e7c:	0f 92       	push	r0
    3e7e:	2f 93       	push	r18
    3e80:	3f 93       	push	r19
    3e82:	4f 93       	push	r20
    3e84:	5f 93       	push	r21
    3e86:	8f 93       	push	r24
    3e88:	9f 93       	push	r25
    3e8a:	af 93       	push	r26
    3e8c:	bf 93       	push	r27
    3e8e:	ef 93       	push	r30
    3e90:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    3e92:	e0 91 be 2b 	lds	r30, 0x2BBE
    3e96:	f0 91 bf 2b 	lds	r31, 0x2BBF
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	static uint16_t prev = 0;
		
	if (!fcb) return;
    3e9a:	30 97       	sbiw	r30, 0x00	; 0
    3e9c:	09 f4       	brne	.+2      	; 0x3ea0 <__vector_14+0x30>
    3e9e:	51 c0       	rjmp	.+162    	; 0x3f42 <__vector_14+0xd2>
	ct = fcb->ct; ri = fcb->ri;
    3ea0:	46 81       	ldd	r20, Z+6	; 0x06
    3ea2:	57 81       	ldd	r21, Z+7	; 0x07
    3ea4:	22 81       	ldd	r18, Z+2	; 0x02
    3ea6:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    3ea8:	80 85       	ldd	r24, Z+8	; 0x08
    3eaa:	91 85       	ldd	r25, Z+9	; 0x09
    3eac:	dc 01       	movw	r26, r24
    3eae:	a2 0f       	add	r26, r18
    3eb0:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    3eb2:	80 81       	ld	r24, Z
    3eb4:	91 81       	ldd	r25, Z+1	; 0x01
    3eb6:	81 30       	cpi	r24, 0x01	; 1
    3eb8:	91 05       	cpc	r25, r1
    3eba:	69 f0       	breq	.+26     	; 0x3ed6 <__vector_14+0x66>
    3ebc:	18 f0       	brcs	.+6      	; 0x3ec4 <__vector_14+0x54>
    3ebe:	02 97       	sbiw	r24, 0x02	; 2
    3ec0:	99 f0       	breq	.+38     	; 0x3ee8 <__vector_14+0x78>
    3ec2:	1d c0       	rjmp	.+58     	; 0x3efe <__vector_14+0x8e>
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
    3ec4:	41 15       	cp	r20, r1
    3ec6:	51 05       	cpc	r21, r1
    3ec8:	e1 f1       	breq	.+120    	; 0x3f42 <__vector_14+0xd2>
		l1 = r2 = buff[0];
    3eca:	8c 91       	ld	r24, X
		ct -= 1; ri += 1;
    3ecc:	41 50       	subi	r20, 0x01	; 1
    3ece:	51 09       	sbc	r21, r1
    3ed0:	2f 5f       	subi	r18, 0xFF	; 255
    3ed2:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    3ed4:	1d c0       	rjmp	.+58     	; 0x3f10 <__vector_14+0xa0>
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
    3ed6:	42 30       	cpi	r20, 0x02	; 2
    3ed8:	51 05       	cpc	r21, r1
    3eda:	98 f1       	brcs	.+102    	; 0x3f42 <__vector_14+0xd2>
		l1 = buff[0]; r2 = buff[1];
    3edc:	8c 91       	ld	r24, X
		ct -= 2; ri += 2;
    3ede:	42 50       	subi	r20, 0x02	; 2
    3ee0:	51 09       	sbc	r21, r1
    3ee2:	2e 5f       	subi	r18, 0xFE	; 254
    3ee4:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    3ee6:	14 c0       	rjmp	.+40     	; 0x3f10 <__vector_14+0xa0>
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
    3ee8:	42 30       	cpi	r20, 0x02	; 2
    3eea:	51 05       	cpc	r21, r1
    3eec:	50 f1       	brcs	.+84     	; 0x3f42 <__vector_14+0xd2>
		l1 = r2 = buff[1] + 128;
    3eee:	11 96       	adiw	r26, 0x01	; 1
    3ef0:	8c 91       	ld	r24, X
    3ef2:	80 58       	subi	r24, 0x80	; 128
		ct -= 2; ri += 2;
    3ef4:	42 50       	subi	r20, 0x02	; 2
    3ef6:	51 09       	sbc	r21, r1
    3ef8:	2e 5f       	subi	r18, 0xFE	; 254
    3efa:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    3efc:	09 c0       	rjmp	.+18     	; 0x3f10 <__vector_14+0xa0>
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
    3efe:	44 30       	cpi	r20, 0x04	; 4
    3f00:	51 05       	cpc	r21, r1
    3f02:	f8 f0       	brcs	.+62     	; 0x3f42 <__vector_14+0xd2>
		l2 = buff[0]; 
		l1 = buff[1];
    3f04:	11 96       	adiw	r26, 0x01	; 1
    3f06:	8c 91       	ld	r24, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
    3f08:	44 50       	subi	r20, 0x04	; 4
    3f0a:	51 09       	sbc	r21, r1
		ri += 4;
    3f0c:	2c 5f       	subi	r18, 0xFC	; 252
    3f0e:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fcb->ct = ct;
    3f10:	46 83       	std	Z+6, r20	; 0x06
    3f12:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    3f14:	42 85       	ldd	r20, Z+10	; 0x0a
    3f16:	53 85       	ldd	r21, Z+11	; 0x0b
    3f18:	41 50       	subi	r20, 0x01	; 1
    3f1a:	51 09       	sbc	r21, r1
    3f1c:	24 23       	and	r18, r20
    3f1e:	35 23       	and	r19, r21
    3f20:	22 83       	std	Z+2, r18	; 0x02
    3f22:	33 83       	std	Z+3, r19	; 0x03
	
	DACB.CH0DATA = (1<<11)+(l1>>1);
    3f24:	86 95       	lsr	r24
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	9c 01       	movw	r18, r24
    3f2a:	38 5f       	subi	r19, 0xF8	; 248
    3f2c:	e0 e2       	ldi	r30, 0x20	; 32
    3f2e:	f3 e0       	ldi	r31, 0x03	; 3
    3f30:	20 8f       	std	Z+24, r18	; 0x18
    3f32:	31 8f       	std	Z+25, r19	; 0x19
	DACB.CH1DATA = (1<<11)-(l1>>1);
    3f34:	20 e0       	ldi	r18, 0x00	; 0
    3f36:	38 e0       	ldi	r19, 0x08	; 8
    3f38:	a9 01       	movw	r20, r18
    3f3a:	48 1b       	sub	r20, r24
    3f3c:	59 0b       	sbc	r21, r25
    3f3e:	42 8f       	std	Z+26, r20	; 0x1a
    3f40:	53 8f       	std	Z+27, r21	; 0x1b
	
	//prev = data;
}
    3f42:	ff 91       	pop	r31
    3f44:	ef 91       	pop	r30
    3f46:	bf 91       	pop	r27
    3f48:	af 91       	pop	r26
    3f4a:	9f 91       	pop	r25
    3f4c:	8f 91       	pop	r24
    3f4e:	5f 91       	pop	r21
    3f50:	4f 91       	pop	r20
    3f52:	3f 91       	pop	r19
    3f54:	2f 91       	pop	r18
    3f56:	0f 90       	pop	r0
    3f58:	0b be       	out	0x3b, r0	; 59
    3f5a:	0f 90       	pop	r0
    3f5c:	0f be       	out	0x3f, r0	; 63
    3f5e:	0f 90       	pop	r0
    3f60:	1f 90       	pop	r1
    3f62:	18 95       	reti

00003f64 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
    3f64:	3f 92       	push	r3
    3f66:	4f 92       	push	r4
    3f68:	5f 92       	push	r5
    3f6a:	6f 92       	push	r6
    3f6c:	7f 92       	push	r7
    3f6e:	8f 92       	push	r8
    3f70:	9f 92       	push	r9
    3f72:	af 92       	push	r10
    3f74:	bf 92       	push	r11
    3f76:	cf 92       	push	r12
    3f78:	df 92       	push	r13
    3f7a:	ef 92       	push	r14
    3f7c:	ff 92       	push	r15
    3f7e:	0f 93       	push	r16
    3f80:	1f 93       	push	r17
    3f82:	cf 93       	push	r28
    3f84:	df 93       	push	r29
    3f86:	00 d0       	rcall	.+0      	; 0x3f88 <jsmn_parse+0x24>
    3f88:	00 d0       	rcall	.+0      	; 0x3f8a <jsmn_parse+0x26>
    3f8a:	cd b7       	in	r28, 0x3d	; 61
    3f8c:	de b7       	in	r29, 0x3e	; 62
    3f8e:	8b 83       	std	Y+3, r24	; 0x03
    3f90:	9c 83       	std	Y+4, r25	; 0x04
    3f92:	29 83       	std	Y+1, r18	; 0x01
    3f94:	3a 83       	std	Y+2, r19	; 0x02
    3f96:	48 01       	movw	r8, r16
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    3f98:	dc 01       	movw	r26, r24
    3f9a:	8d 91       	ld	r24, X+
    3f9c:	9c 91       	ld	r25, X
    3f9e:	84 17       	cp	r24, r20
    3fa0:	95 07       	cpc	r25, r21
    3fa2:	08 f0       	brcs	.+2      	; 0x3fa6 <jsmn_parse+0x42>
    3fa4:	1e c3       	rjmp	.+1596   	; 0x45e2 <jsmn_parse+0x67e>
    3fa6:	fb 01       	movw	r30, r22
    3fa8:	e8 0f       	add	r30, r24
    3faa:	f9 1f       	adc	r31, r25
    3fac:	10 81       	ld	r17, Z
    3fae:	11 23       	and	r17, r17
    3fb0:	09 f4       	brne	.+2      	; 0x3fb4 <jsmn_parse+0x50>
    3fb2:	1a c3       	rjmp	.+1588   	; 0x45e8 <jsmn_parse+0x684>
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;
    3fb4:	c1 2c       	mov	r12, r1
    3fb6:	d1 2c       	mov	r13, r1
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
    3fb8:	aa 24       	eor	r10, r10
    3fba:	aa 94       	dec	r10
    3fbc:	ba 2c       	mov	r11, r10
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    3fbe:	0f 2e       	mov	r0, r31
    3fc0:	f3 e0       	ldi	r31, 0x03	; 3
    3fc2:	3f 2e       	mov	r3, r31
    3fc4:	f0 2d       	mov	r31, r0
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    3fc6:	1c 32       	cpi	r17, 0x2C	; 44
    3fc8:	09 f4       	brne	.+2      	; 0x3fcc <jsmn_parse+0x68>
    3fca:	0a c2       	rjmp	.+1044   	; 0x43e0 <jsmn_parse+0x47c>
    3fcc:	80 f4       	brcc	.+32     	; 0x3fee <jsmn_parse+0x8a>
    3fce:	1d 30       	cpi	r17, 0x0D	; 13
    3fd0:	09 f4       	brne	.+2      	; 0x3fd4 <jsmn_parse+0x70>
    3fd2:	f5 c2       	rjmp	.+1514   	; 0x45be <jsmn_parse+0x65a>
    3fd4:	28 f4       	brcc	.+10     	; 0x3fe0 <jsmn_parse+0x7c>
    3fd6:	19 50       	subi	r17, 0x09	; 9
    3fd8:	12 30       	cpi	r17, 0x02	; 2
    3fda:	08 f4       	brcc	.+2      	; 0x3fde <jsmn_parse+0x7a>
    3fdc:	f0 c2       	rjmp	.+1504   	; 0x45be <jsmn_parse+0x65a>
    3fde:	4d c2       	rjmp	.+1178   	; 0x447a <jsmn_parse+0x516>
    3fe0:	10 32       	cpi	r17, 0x20	; 32
    3fe2:	09 f4       	brne	.+2      	; 0x3fe6 <jsmn_parse+0x82>
    3fe4:	ec c2       	rjmp	.+1496   	; 0x45be <jsmn_parse+0x65a>
    3fe6:	12 32       	cpi	r17, 0x22	; 34
    3fe8:	09 f4       	brne	.+2      	; 0x3fec <jsmn_parse+0x88>
    3fea:	f8 c0       	rjmp	.+496    	; 0x41dc <jsmn_parse+0x278>
    3fec:	46 c2       	rjmp	.+1164   	; 0x447a <jsmn_parse+0x516>
    3fee:	1d 35       	cpi	r17, 0x5D	; 93
    3ff0:	09 f4       	brne	.+2      	; 0x3ff4 <jsmn_parse+0x90>
    3ff2:	71 c0       	rjmp	.+226    	; 0x40d6 <jsmn_parse+0x172>
    3ff4:	30 f4       	brcc	.+12     	; 0x4002 <jsmn_parse+0x9e>
    3ff6:	1a 33       	cpi	r17, 0x3A	; 58
    3ff8:	09 f4       	brne	.+2      	; 0x3ffc <jsmn_parse+0x98>
    3ffa:	e6 c1       	rjmp	.+972    	; 0x43c8 <jsmn_parse+0x464>
    3ffc:	1b 35       	cpi	r17, 0x5B	; 91
    3ffe:	39 f0       	breq	.+14     	; 0x400e <jsmn_parse+0xaa>
    4000:	3c c2       	rjmp	.+1144   	; 0x447a <jsmn_parse+0x516>
    4002:	1b 37       	cpi	r17, 0x7B	; 123
    4004:	21 f0       	breq	.+8      	; 0x400e <jsmn_parse+0xaa>
    4006:	1d 37       	cpi	r17, 0x7D	; 125
    4008:	09 f4       	brne	.+2      	; 0x400c <jsmn_parse+0xa8>
    400a:	65 c0       	rjmp	.+202    	; 0x40d6 <jsmn_parse+0x172>
    400c:	36 c2       	rjmp	.+1132   	; 0x447a <jsmn_parse+0x516>
			case '{': case '[':
				count++;
    400e:	bf ef       	ldi	r27, 0xFF	; 255
    4010:	cb 1a       	sub	r12, r27
    4012:	db 0a       	sbc	r13, r27
				if (tokens == NULL) {
    4014:	e9 81       	ldd	r30, Y+1	; 0x01
    4016:	fa 81       	ldd	r31, Y+2	; 0x02
    4018:	ef 2b       	or	r30, r31
    401a:	09 f4       	brne	.+2      	; 0x401e <jsmn_parse+0xba>
    401c:	d0 c2       	rjmp	.+1440   	; 0x45be <jsmn_parse+0x65a>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    401e:	ab 81       	ldd	r26, Y+3	; 0x03
    4020:	bc 81       	ldd	r27, Y+4	; 0x04
    4022:	12 96       	adiw	r26, 0x02	; 2
    4024:	8d 91       	ld	r24, X+
    4026:	9c 91       	ld	r25, X
    4028:	13 97       	sbiw	r26, 0x03	; 3
    402a:	88 15       	cp	r24, r8
    402c:	99 05       	cpc	r25, r9
    402e:	08 f0       	brcs	.+2      	; 0x4032 <jsmn_parse+0xce>
    4030:	04 c3       	rjmp	.+1544   	; 0x463a <jsmn_parse+0x6d6>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    4032:	fc 01       	movw	r30, r24
    4034:	31 96       	adiw	r30, 0x01	; 1
    4036:	12 96       	adiw	r26, 0x02	; 2
    4038:	ed 93       	st	X+, r30
    403a:	fc 93       	st	X, r31
    403c:	13 97       	sbiw	r26, 0x03	; 3
    403e:	fc 01       	movw	r30, r24
    4040:	ee 0f       	add	r30, r30
    4042:	ff 1f       	adc	r31, r31
    4044:	ee 0f       	add	r30, r30
    4046:	ff 1f       	adc	r31, r31
    4048:	ee 0f       	add	r30, r30
    404a:	ff 1f       	adc	r31, r31
    404c:	df 01       	movw	r26, r30
    404e:	a8 1b       	sub	r26, r24
    4050:	b9 0b       	sbc	r27, r25
    4052:	e9 81       	ldd	r30, Y+1	; 0x01
    4054:	fa 81       	ldd	r31, Y+2	; 0x02
    4056:	ae 0f       	add	r26, r30
    4058:	bf 1f       	adc	r27, r31
	tok->start = tok->end = -1;
    405a:	13 96       	adiw	r26, 0x03	; 3
    405c:	ad 92       	st	X+, r10
    405e:	bc 92       	st	X, r11
    4060:	14 97       	sbiw	r26, 0x04	; 4
    4062:	11 96       	adiw	r26, 0x01	; 1
    4064:	ad 92       	st	X+, r10
    4066:	bc 92       	st	X, r11
    4068:	12 97       	sbiw	r26, 0x02	; 2
	tok->size = 0;
    406a:	15 96       	adiw	r26, 0x05	; 5
    406c:	1d 92       	st	X+, r1
    406e:	1c 92       	st	X, r1
    4070:	16 97       	sbiw	r26, 0x06	; 6
				count++;
				if (tokens == NULL) {
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
    4072:	10 97       	sbiw	r26, 0x00	; 0
    4074:	09 f4       	brne	.+2      	; 0x4078 <jsmn_parse+0x114>
    4076:	e3 c2       	rjmp	.+1478   	; 0x463e <jsmn_parse+0x6da>
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
    4078:	eb 81       	ldd	r30, Y+3	; 0x03
    407a:	fc 81       	ldd	r31, Y+4	; 0x04
    407c:	84 81       	ldd	r24, Z+4	; 0x04
    407e:	95 81       	ldd	r25, Z+5	; 0x05
    4080:	8f 3f       	cpi	r24, 0xFF	; 255
    4082:	ff ef       	ldi	r31, 0xFF	; 255
    4084:	9f 07       	cpc	r25, r31
    4086:	99 f0       	breq	.+38     	; 0x40ae <jsmn_parse+0x14a>
					tokens[parser->toksuper].size++;
    4088:	9c 01       	movw	r18, r24
    408a:	22 0f       	add	r18, r18
    408c:	33 1f       	adc	r19, r19
    408e:	22 0f       	add	r18, r18
    4090:	33 1f       	adc	r19, r19
    4092:	22 0f       	add	r18, r18
    4094:	33 1f       	adc	r19, r19
    4096:	28 1b       	sub	r18, r24
    4098:	39 0b       	sbc	r19, r25
    409a:	89 81       	ldd	r24, Y+1	; 0x01
    409c:	9a 81       	ldd	r25, Y+2	; 0x02
    409e:	28 0f       	add	r18, r24
    40a0:	39 1f       	adc	r19, r25
    40a2:	f9 01       	movw	r30, r18
    40a4:	85 81       	ldd	r24, Z+5	; 0x05
    40a6:	96 81       	ldd	r25, Z+6	; 0x06
    40a8:	01 96       	adiw	r24, 0x01	; 1
    40aa:	85 83       	std	Z+5, r24	; 0x05
    40ac:	96 83       	std	Z+6, r25	; 0x06
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
    40ae:	1b 37       	cpi	r17, 0x7B	; 123
    40b0:	11 f4       	brne	.+4      	; 0x40b6 <jsmn_parse+0x152>
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	01 c0       	rjmp	.+2      	; 0x40b8 <jsmn_parse+0x154>
    40b6:	82 e0       	ldi	r24, 0x02	; 2
    40b8:	8c 93       	st	X, r24
				token->start = parser->pos;
    40ba:	eb 81       	ldd	r30, Y+3	; 0x03
    40bc:	fc 81       	ldd	r31, Y+4	; 0x04
    40be:	80 81       	ld	r24, Z
    40c0:	91 81       	ldd	r25, Z+1	; 0x01
    40c2:	11 96       	adiw	r26, 0x01	; 1
    40c4:	8d 93       	st	X+, r24
    40c6:	9c 93       	st	X, r25
    40c8:	12 97       	sbiw	r26, 0x02	; 2
				parser->toksuper = parser->toknext - 1;
    40ca:	82 81       	ldd	r24, Z+2	; 0x02
    40cc:	93 81       	ldd	r25, Z+3	; 0x03
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	84 83       	std	Z+4, r24	; 0x04
    40d2:	95 83       	std	Z+5, r25	; 0x05
				break;
    40d4:	74 c2       	rjmp	.+1256   	; 0x45be <jsmn_parse+0x65a>
			case '}': case ']':
				if (tokens == NULL)
    40d6:	29 81       	ldd	r18, Y+1	; 0x01
    40d8:	3a 81       	ldd	r19, Y+2	; 0x02
    40da:	23 2b       	or	r18, r19
    40dc:	09 f4       	brne	.+2      	; 0x40e0 <jsmn_parse+0x17c>
    40de:	6f c2       	rjmp	.+1246   	; 0x45be <jsmn_parse+0x65a>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
    40e0:	1d 37       	cpi	r17, 0x7D	; 125
    40e2:	19 f4       	brne	.+6      	; 0x40ea <jsmn_parse+0x186>
    40e4:	77 24       	eor	r7, r7
    40e6:	73 94       	inc	r7
    40e8:	03 c0       	rjmp	.+6      	; 0x40f0 <jsmn_parse+0x18c>
    40ea:	68 94       	set
    40ec:	77 24       	eor	r7, r7
    40ee:	71 f8       	bld	r7, 1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    40f0:	ab 81       	ldd	r26, Y+3	; 0x03
    40f2:	bc 81       	ldd	r27, Y+4	; 0x04
    40f4:	12 96       	adiw	r26, 0x02	; 2
    40f6:	0d 91       	ld	r16, X+
    40f8:	1c 91       	ld	r17, X
    40fa:	13 97       	sbiw	r26, 0x03	; 3
    40fc:	f8 01       	movw	r30, r16
    40fe:	31 97       	sbiw	r30, 0x01	; 1
    4100:	ff 23       	and	r31, r31
    4102:	0c f4       	brge	.+2      	; 0x4106 <jsmn_parse+0x1a2>
    4104:	a6 c2       	rjmp	.+1356   	; 0x4652 <jsmn_parse+0x6ee>
    4106:	98 01       	movw	r18, r16
    4108:	22 0f       	add	r18, r18
    410a:	33 1f       	adc	r19, r19
    410c:	22 0f       	add	r18, r18
    410e:	33 1f       	adc	r19, r19
    4110:	22 0f       	add	r18, r18
    4112:	33 1f       	adc	r19, r19
    4114:	20 1b       	sub	r18, r16
    4116:	31 0b       	sbc	r19, r17
    4118:	29 01       	movw	r4, r18
    411a:	b7 e0       	ldi	r27, 0x07	; 7
    411c:	4b 1a       	sub	r4, r27
    411e:	51 08       	sbc	r5, r1
    4120:	29 81       	ldd	r18, Y+1	; 0x01
    4122:	3a 81       	ldd	r19, Y+2	; 0x02
    4124:	42 0e       	add	r4, r18
    4126:	53 1e       	adc	r5, r19
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    4128:	d2 01       	movw	r26, r4
    412a:	11 96       	adiw	r26, 0x01	; 1
    412c:	0d 91       	ld	r16, X+
    412e:	1c 91       	ld	r17, X
    4130:	12 97       	sbiw	r26, 0x02	; 2
    4132:	0f 3f       	cpi	r16, 0xFF	; 255
    4134:	1f 4f       	sbci	r17, 0xFF	; 255
    4136:	e9 f0       	breq	.+58     	; 0x4172 <jsmn_parse+0x20e>
    4138:	d2 01       	movw	r26, r4
    413a:	13 96       	adiw	r26, 0x03	; 3
    413c:	0d 91       	ld	r16, X+
    413e:	1c 91       	ld	r17, X
    4140:	14 97       	sbiw	r26, 0x04	; 4
    4142:	0f 3f       	cpi	r16, 0xFF	; 255
    4144:	1f 4f       	sbci	r17, 0xFF	; 255
    4146:	a9 f4       	brne	.+42     	; 0x4172 <jsmn_parse+0x20e>
						if (token->type != type) {
    4148:	d2 01       	movw	r26, r4
    414a:	2c 91       	ld	r18, X
    414c:	72 12       	cpse	r7, r18
    414e:	79 c2       	rjmp	.+1266   	; 0x4642 <jsmn_parse+0x6de>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
    4150:	ab 81       	ldd	r26, Y+3	; 0x03
    4152:	bc 81       	ldd	r27, Y+4	; 0x04
    4154:	14 96       	adiw	r26, 0x04	; 4
    4156:	ad 92       	st	X+, r10
    4158:	bc 92       	st	X, r11
    415a:	15 97       	sbiw	r26, 0x05	; 5
						token->end = parser->pos + 1;
    415c:	01 96       	adiw	r24, 0x01	; 1
    415e:	d2 01       	movw	r26, r4
    4160:	13 96       	adiw	r26, 0x03	; 3
    4162:	8d 93       	st	X+, r24
    4164:	9c 93       	st	X, r25
    4166:	14 97       	sbiw	r26, 0x04	; 4
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
    4168:	ef 3f       	cpi	r30, 0xFF	; 255
    416a:	bf ef       	ldi	r27, 0xFF	; 255
    416c:	fb 07       	cpc	r31, r27
    416e:	41 f4       	brne	.+16     	; 0x4180 <jsmn_parse+0x21c>
    4170:	6a c2       	rjmp	.+1236   	; 0x4646 <jsmn_parse+0x6e2>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    4172:	31 97       	sbiw	r30, 0x01	; 1
    4174:	27 e0       	ldi	r18, 0x07	; 7
    4176:	42 1a       	sub	r4, r18
    4178:	51 08       	sbc	r5, r1
    417a:	ff 23       	and	r31, r31
    417c:	ac f6       	brge	.-86     	; 0x4128 <jsmn_parse+0x1c4>
    417e:	69 c2       	rjmp	.+1234   	; 0x4652 <jsmn_parse+0x6ee>
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
				for (; i >= 0; i--) {
    4180:	ff 23       	and	r31, r31
    4182:	0c f4       	brge	.+2      	; 0x4186 <jsmn_parse+0x222>
    4184:	1c c2       	rjmp	.+1080   	; 0x45be <jsmn_parse+0x65a>
    4186:	cf 01       	movw	r24, r30
    4188:	88 0f       	add	r24, r24
    418a:	99 1f       	adc	r25, r25
    418c:	88 0f       	add	r24, r24
    418e:	99 1f       	adc	r25, r25
    4190:	88 0f       	add	r24, r24
    4192:	99 1f       	adc	r25, r25
    4194:	8c 01       	movw	r16, r24
    4196:	0e 1b       	sub	r16, r30
    4198:	1f 0b       	sbc	r17, r31
    419a:	89 81       	ldd	r24, Y+1	; 0x01
    419c:	9a 81       	ldd	r25, Y+2	; 0x02
    419e:	08 0f       	add	r16, r24
    41a0:	19 1f       	adc	r17, r25
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    41a2:	d8 01       	movw	r26, r16
    41a4:	11 96       	adiw	r26, 0x01	; 1
    41a6:	8d 91       	ld	r24, X+
    41a8:	9c 91       	ld	r25, X
    41aa:	12 97       	sbiw	r26, 0x02	; 2
    41ac:	01 96       	adiw	r24, 0x01	; 1
    41ae:	71 f0       	breq	.+28     	; 0x41cc <jsmn_parse+0x268>
    41b0:	d8 01       	movw	r26, r16
    41b2:	13 96       	adiw	r26, 0x03	; 3
    41b4:	8d 91       	ld	r24, X+
    41b6:	9c 91       	ld	r25, X
    41b8:	14 97       	sbiw	r26, 0x04	; 4
    41ba:	01 96       	adiw	r24, 0x01	; 1
    41bc:	39 f4       	brne	.+14     	; 0x41cc <jsmn_parse+0x268>
						parser->toksuper = i;
    41be:	ab 81       	ldd	r26, Y+3	; 0x03
    41c0:	bc 81       	ldd	r27, Y+4	; 0x04
    41c2:	14 96       	adiw	r26, 0x04	; 4
    41c4:	ed 93       	st	X+, r30
    41c6:	fc 93       	st	X, r31
    41c8:	15 97       	sbiw	r26, 0x05	; 5
						break;
    41ca:	f9 c1       	rjmp	.+1010   	; 0x45be <jsmn_parse+0x65a>
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
				for (; i >= 0; i--) {
    41cc:	31 97       	sbiw	r30, 0x01	; 1
    41ce:	07 50       	subi	r16, 0x07	; 7
    41d0:	11 09       	sbc	r17, r1
    41d2:	ef 3f       	cpi	r30, 0xFF	; 255
    41d4:	bf ef       	ldi	r27, 0xFF	; 255
    41d6:	fb 07       	cpc	r31, r27
    41d8:	21 f7       	brne	.-56     	; 0x41a2 <jsmn_parse+0x23e>
    41da:	f1 c1       	rjmp	.+994    	; 0x45be <jsmn_parse+0x65a>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
    41dc:	9c 01       	movw	r18, r24
    41de:	2f 5f       	subi	r18, 0xFF	; 255
    41e0:	3f 4f       	sbci	r19, 0xFF	; 255
    41e2:	eb 81       	ldd	r30, Y+3	; 0x03
    41e4:	fc 81       	ldd	r31, Y+4	; 0x04
    41e6:	20 83       	st	Z, r18
    41e8:	31 83       	std	Z+1, r19	; 0x01

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    41ea:	24 17       	cp	r18, r20
    41ec:	35 07       	cpc	r19, r21
    41ee:	08 f0       	brcs	.+2      	; 0x41f2 <jsmn_parse+0x28e>
    41f0:	d2 c0       	rjmp	.+420    	; 0x4396 <jsmn_parse+0x432>
    41f2:	fb 01       	movw	r30, r22
    41f4:	e2 0f       	add	r30, r18
    41f6:	f3 1f       	adc	r31, r19
    41f8:	e0 81       	ld	r30, Z
    41fa:	ee 23       	and	r30, r30
    41fc:	09 f4       	brne	.+2      	; 0x4200 <jsmn_parse+0x29c>
    41fe:	cb c0       	rjmp	.+406    	; 0x4396 <jsmn_parse+0x432>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
    4200:	e2 32       	cpi	r30, 0x22	; 34
    4202:	09 f0       	breq	.+2      	; 0x4206 <jsmn_parse+0x2a2>
    4204:	4c c0       	rjmp	.+152    	; 0x429e <jsmn_parse+0x33a>
    4206:	03 c0       	rjmp	.+6      	; 0x420e <jsmn_parse+0x2aa>
    4208:	e2 32       	cpi	r30, 0x22	; 34
    420a:	09 f0       	breq	.+2      	; 0x420e <jsmn_parse+0x2aa>
    420c:	48 c0       	rjmp	.+144    	; 0x429e <jsmn_parse+0x33a>
			if (tokens == NULL) {
    420e:	29 81       	ldd	r18, Y+1	; 0x01
    4210:	3a 81       	ldd	r19, Y+2	; 0x02
    4212:	23 2b       	or	r18, r19
    4214:	09 f4       	brne	.+2      	; 0x4218 <jsmn_parse+0x2b4>
    4216:	21 c2       	rjmp	.+1090   	; 0x465a <jsmn_parse+0x6f6>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    4218:	ab 81       	ldd	r26, Y+3	; 0x03
    421a:	bc 81       	ldd	r27, Y+4	; 0x04
    421c:	12 96       	adiw	r26, 0x02	; 2
    421e:	2d 91       	ld	r18, X+
    4220:	3c 91       	ld	r19, X
    4222:	13 97       	sbiw	r26, 0x03	; 3
    4224:	28 15       	cp	r18, r8
    4226:	39 05       	cpc	r19, r9
    4228:	d8 f4       	brcc	.+54     	; 0x4260 <jsmn_parse+0x2fc>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    422a:	f9 01       	movw	r30, r18
    422c:	31 96       	adiw	r30, 0x01	; 1
    422e:	12 96       	adiw	r26, 0x02	; 2
    4230:	ed 93       	st	X+, r30
    4232:	fc 93       	st	X, r31
    4234:	13 97       	sbiw	r26, 0x03	; 3
    4236:	f9 01       	movw	r30, r18
    4238:	ee 0f       	add	r30, r30
    423a:	ff 1f       	adc	r31, r31
    423c:	ee 0f       	add	r30, r30
    423e:	ff 1f       	adc	r31, r31
    4240:	ee 0f       	add	r30, r30
    4242:	ff 1f       	adc	r31, r31
    4244:	e2 1b       	sub	r30, r18
    4246:	f3 0b       	sbc	r31, r19
    4248:	29 81       	ldd	r18, Y+1	; 0x01
    424a:	3a 81       	ldd	r19, Y+2	; 0x02
    424c:	e2 0f       	add	r30, r18
    424e:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    4250:	a3 82       	std	Z+3, r10	; 0x03
    4252:	b4 82       	std	Z+4, r11	; 0x04
    4254:	a1 82       	std	Z+1, r10	; 0x01
    4256:	b2 82       	std	Z+2, r11	; 0x02
	tok->size = 0;
    4258:	15 82       	std	Z+5, r1	; 0x05
    425a:	16 82       	std	Z+6, r1	; 0x06
		if (c == '\"') {
			if (tokens == NULL) {
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
    425c:	30 97       	sbiw	r30, 0x00	; 0
    425e:	31 f4       	brne	.+12     	; 0x426c <jsmn_parse+0x308>
				parser->pos = start;
    4260:	ab 81       	ldd	r26, Y+3	; 0x03
    4262:	bc 81       	ldd	r27, Y+4	; 0x04
    4264:	8d 93       	st	X+, r24
    4266:	9c 93       	st	X, r25
				return JSMN_ERROR_NOMEM;
    4268:	8f ef       	ldi	r24, 0xFF	; 255
    426a:	fb c1       	rjmp	.+1014   	; 0x4662 <jsmn_parse+0x6fe>
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
    426c:	ab 81       	ldd	r26, Y+3	; 0x03
    426e:	bc 81       	ldd	r27, Y+4	; 0x04
    4270:	2d 91       	ld	r18, X+
    4272:	3c 91       	ld	r19, X
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    4274:	30 82       	st	Z, r3
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
				return JSMN_ERROR_NOMEM;
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
    4276:	01 96       	adiw	r24, 0x01	; 1
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
	token->start = start;
    4278:	81 83       	std	Z+1, r24	; 0x01
    427a:	92 83       	std	Z+2, r25	; 0x02
	token->end = end;
    427c:	23 83       	std	Z+3, r18	; 0x03
    427e:	34 83       	std	Z+4, r19	; 0x04
	token->size = 0;
    4280:	15 82       	std	Z+5, r1	; 0x05
    4282:	16 82       	std	Z+6, r1	; 0x06
#endif
				break;
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    4284:	bf ef       	ldi	r27, 0xFF	; 255
    4286:	cb 1a       	sub	r12, r27
    4288:	db 0a       	sbc	r13, r27
				if (parser->toksuper != -1 && tokens != NULL)
    428a:	eb 81       	ldd	r30, Y+3	; 0x03
    428c:	fc 81       	ldd	r31, Y+4	; 0x04
    428e:	84 81       	ldd	r24, Z+4	; 0x04
    4290:	95 81       	ldd	r25, Z+5	; 0x05
    4292:	8f 3f       	cpi	r24, 0xFF	; 255
    4294:	ff ef       	ldi	r31, 0xFF	; 255
    4296:	9f 07       	cpc	r25, r31
    4298:	09 f0       	breq	.+2      	; 0x429c <jsmn_parse+0x338>
    429a:	83 c0       	rjmp	.+262    	; 0x43a2 <jsmn_parse+0x43e>
    429c:	90 c1       	rjmp	.+800    	; 0x45be <jsmn_parse+0x65a>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
    429e:	ec 35       	cpi	r30, 0x5C	; 92
    42a0:	09 f0       	breq	.+2      	; 0x42a4 <jsmn_parse+0x340>
    42a2:	66 c0       	rjmp	.+204    	; 0x4370 <jsmn_parse+0x40c>
    42a4:	f9 01       	movw	r30, r18
    42a6:	31 96       	adiw	r30, 0x01	; 1
    42a8:	e4 17       	cp	r30, r20
    42aa:	f5 07       	cpc	r31, r21
    42ac:	08 f0       	brcs	.+2      	; 0x42b0 <jsmn_parse+0x34c>
    42ae:	60 c0       	rjmp	.+192    	; 0x4370 <jsmn_parse+0x40c>
			int i;
			parser->pos++;
    42b0:	ab 81       	ldd	r26, Y+3	; 0x03
    42b2:	bc 81       	ldd	r27, Y+4	; 0x04
    42b4:	ed 93       	st	X+, r30
    42b6:	fc 93       	st	X, r31
			switch (js[parser->pos]) {
    42b8:	e6 0f       	add	r30, r22
    42ba:	f7 1f       	adc	r31, r23
    42bc:	e0 80       	ld	r14, Z
    42be:	4e 2c       	mov	r4, r14
    42c0:	51 2c       	mov	r5, r1
    42c2:	d2 01       	movw	r26, r4
    42c4:	92 97       	sbiw	r26, 0x22	; 34
    42c6:	a4 35       	cpi	r26, 0x54	; 84
    42c8:	b1 05       	cpc	r27, r1
    42ca:	08 f0       	brcs	.+2      	; 0x42ce <jsmn_parse+0x36a>
    42cc:	4b c0       	rjmp	.+150    	; 0x4364 <jsmn_parse+0x400>
    42ce:	a2 50       	subi	r26, 0x02	; 2
    42d0:	bf 4f       	sbci	r27, 0xFF	; 255
    42d2:	fd 01       	movw	r30, r26
    42d4:	0c 94 ea 3a 	jmp	0x75d4	; 0x75d4 <__tablejump2__>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
    42d8:	f9 01       	movw	r30, r18
    42da:	32 96       	adiw	r30, 0x02	; 2
    42dc:	ab 81       	ldd	r26, Y+3	; 0x03
    42de:	bc 81       	ldd	r27, Y+4	; 0x04
    42e0:	ed 93       	st	X+, r30
    42e2:	fc 93       	st	X, r31
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    42e4:	e4 17       	cp	r30, r20
    42e6:	f5 07       	cpc	r31, r21
    42e8:	a0 f5       	brcc	.+104    	; 0x4352 <jsmn_parse+0x3ee>
    42ea:	e6 0f       	add	r30, r22
    42ec:	f7 1f       	adc	r31, r23
    42ee:	f0 80       	ld	r15, Z
    42f0:	ff 20       	and	r15, r15
    42f2:	79 f1       	breq	.+94     	; 0x4352 <jsmn_parse+0x3ee>
    42f4:	d9 01       	movw	r26, r18
    42f6:	13 96       	adiw	r26, 0x03	; 3
    42f8:	8b 01       	movw	r16, r22
    42fa:	0a 0f       	add	r16, r26
    42fc:	1b 1f       	adc	r17, r27
    42fe:	39 01       	movw	r6, r18
    4300:	e6 e0       	ldi	r30, 0x06	; 6
    4302:	6e 0e       	add	r6, r30
    4304:	71 1c       	adc	r7, r1
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
    4306:	0f 2e       	mov	r0, r31
    4308:	f0 ed       	ldi	r31, 0xD0	; 208
    430a:	ef 2e       	mov	r14, r31
    430c:	f0 2d       	mov	r31, r0
    430e:	ef 0c       	add	r14, r15
    4310:	f9 e0       	ldi	r31, 0x09	; 9
    4312:	fe 15       	cp	r31, r14
    4314:	70 f4       	brcc	.+28     	; 0x4332 <jsmn_parse+0x3ce>
    4316:	2f 2d       	mov	r18, r15
    4318:	2f 7d       	andi	r18, 0xDF	; 223
    431a:	f2 2e       	mov	r15, r18
    431c:	3f eb       	ldi	r19, 0xBF	; 191
    431e:	f3 0e       	add	r15, r19
    4320:	e5 e0       	ldi	r30, 0x05	; 5
    4322:	ef 15       	cp	r30, r15
    4324:	30 f4       	brcc	.+12     	; 0x4332 <jsmn_parse+0x3ce>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
    4326:	ab 81       	ldd	r26, Y+3	; 0x03
    4328:	bc 81       	ldd	r27, Y+4	; 0x04
    432a:	8d 93       	st	X+, r24
    432c:	9c 93       	st	X, r25
							return JSMN_ERROR_INVAL;
    432e:	8e ef       	ldi	r24, 0xFE	; 254
    4330:	98 c1       	rjmp	.+816    	; 0x4662 <jsmn_parse+0x6fe>
						}
						parser->pos++;
    4332:	eb 81       	ldd	r30, Y+3	; 0x03
    4334:	fc 81       	ldd	r31, Y+4	; 0x04
    4336:	a0 83       	st	Z, r26
    4338:	b1 83       	std	Z+1, r27	; 0x01
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    433a:	a6 15       	cp	r26, r6
    433c:	b7 05       	cpc	r27, r7
    433e:	49 f0       	breq	.+18     	; 0x4352 <jsmn_parse+0x3ee>
    4340:	a4 17       	cp	r26, r20
    4342:	b5 07       	cpc	r27, r21
    4344:	31 f0       	breq	.+12     	; 0x4352 <jsmn_parse+0x3ee>
    4346:	f8 01       	movw	r30, r16
    4348:	f1 90       	ld	r15, Z+
    434a:	8f 01       	movw	r16, r30
    434c:	11 96       	adiw	r26, 0x01	; 1
    434e:	f1 10       	cpse	r15, r1
    4350:	da cf       	rjmp	.-76     	; 0x4306 <jsmn_parse+0x3a2>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
    4352:	ab 81       	ldd	r26, Y+3	; 0x03
    4354:	bc 81       	ldd	r27, Y+4	; 0x04
    4356:	ed 91       	ld	r30, X+
    4358:	fc 91       	ld	r31, X
    435a:	11 97       	sbiw	r26, 0x01	; 1
    435c:	31 97       	sbiw	r30, 0x01	; 1
    435e:	ed 93       	st	X+, r30
    4360:	fc 93       	st	X, r31
    4362:	06 c0       	rjmp	.+12     	; 0x4370 <jsmn_parse+0x40c>
					break;
				/* Unexpected symbol */
				default:
					parser->pos = start;
    4364:	eb 81       	ldd	r30, Y+3	; 0x03
    4366:	fc 81       	ldd	r31, Y+4	; 0x04
    4368:	80 83       	st	Z, r24
    436a:	91 83       	std	Z+1, r25	; 0x01
					return JSMN_ERROR_INVAL;
    436c:	8e ef       	ldi	r24, 0xFE	; 254
    436e:	79 c1       	rjmp	.+754    	; 0x4662 <jsmn_parse+0x6fe>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    4370:	ab 81       	ldd	r26, Y+3	; 0x03
    4372:	bc 81       	ldd	r27, Y+4	; 0x04
    4374:	ed 91       	ld	r30, X+
    4376:	fc 91       	ld	r31, X
    4378:	11 97       	sbiw	r26, 0x01	; 1
    437a:	9f 01       	movw	r18, r30
    437c:	2f 5f       	subi	r18, 0xFF	; 255
    437e:	3f 4f       	sbci	r19, 0xFF	; 255
    4380:	2d 93       	st	X+, r18
    4382:	3c 93       	st	X, r19
    4384:	24 17       	cp	r18, r20
    4386:	35 07       	cpc	r19, r21
    4388:	30 f4       	brcc	.+12     	; 0x4396 <jsmn_parse+0x432>
    438a:	fb 01       	movw	r30, r22
    438c:	e2 0f       	add	r30, r18
    438e:	f3 1f       	adc	r31, r19
    4390:	e0 81       	ld	r30, Z
    4392:	e1 11       	cpse	r30, r1
    4394:	39 cf       	rjmp	.-398    	; 0x4208 <jsmn_parse+0x2a4>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
    4396:	eb 81       	ldd	r30, Y+3	; 0x03
    4398:	fc 81       	ldd	r31, Y+4	; 0x04
    439a:	80 83       	st	Z, r24
    439c:	91 83       	std	Z+1, r25	; 0x01
	return JSMN_ERROR_PART;
    439e:	8d ef       	ldi	r24, 0xFD	; 253
    43a0:	60 c1       	rjmp	.+704    	; 0x4662 <jsmn_parse+0x6fe>
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
					tokens[parser->toksuper].size++;
    43a2:	fc 01       	movw	r30, r24
    43a4:	ee 0f       	add	r30, r30
    43a6:	ff 1f       	adc	r31, r31
    43a8:	ee 0f       	add	r30, r30
    43aa:	ff 1f       	adc	r31, r31
    43ac:	ee 0f       	add	r30, r30
    43ae:	ff 1f       	adc	r31, r31
    43b0:	e8 1b       	sub	r30, r24
    43b2:	f9 0b       	sbc	r31, r25
    43b4:	29 81       	ldd	r18, Y+1	; 0x01
    43b6:	3a 81       	ldd	r19, Y+2	; 0x02
    43b8:	e2 0f       	add	r30, r18
    43ba:	f3 1f       	adc	r31, r19
    43bc:	85 81       	ldd	r24, Z+5	; 0x05
    43be:	96 81       	ldd	r25, Z+6	; 0x06
    43c0:	01 96       	adiw	r24, 0x01	; 1
    43c2:	85 83       	std	Z+5, r24	; 0x05
    43c4:	96 83       	std	Z+6, r25	; 0x06
    43c6:	fb c0       	rjmp	.+502    	; 0x45be <jsmn_parse+0x65a>
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
    43c8:	ab 81       	ldd	r26, Y+3	; 0x03
    43ca:	bc 81       	ldd	r27, Y+4	; 0x04
    43cc:	12 96       	adiw	r26, 0x02	; 2
    43ce:	8d 91       	ld	r24, X+
    43d0:	9c 91       	ld	r25, X
    43d2:	13 97       	sbiw	r26, 0x03	; 3
    43d4:	01 97       	sbiw	r24, 0x01	; 1
    43d6:	14 96       	adiw	r26, 0x04	; 4
    43d8:	8d 93       	st	X+, r24
    43da:	9c 93       	st	X, r25
    43dc:	15 97       	sbiw	r26, 0x05	; 5
				break;
    43de:	ef c0       	rjmp	.+478    	; 0x45be <jsmn_parse+0x65a>
			case ',':
				if (tokens != NULL &&
    43e0:	e9 81       	ldd	r30, Y+1	; 0x01
    43e2:	fa 81       	ldd	r31, Y+2	; 0x02
    43e4:	ef 2b       	or	r30, r31
    43e6:	09 f4       	brne	.+2      	; 0x43ea <jsmn_parse+0x486>
    43e8:	ea c0       	rjmp	.+468    	; 0x45be <jsmn_parse+0x65a>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
    43ea:	ab 81       	ldd	r26, Y+3	; 0x03
    43ec:	bc 81       	ldd	r27, Y+4	; 0x04
    43ee:	14 96       	adiw	r26, 0x04	; 4
    43f0:	8d 91       	ld	r24, X+
    43f2:	9c 91       	ld	r25, X
    43f4:	15 97       	sbiw	r26, 0x05	; 5
    43f6:	fc 01       	movw	r30, r24
    43f8:	ee 0f       	add	r30, r30
    43fa:	ff 1f       	adc	r31, r31
    43fc:	ee 0f       	add	r30, r30
    43fe:	ff 1f       	adc	r31, r31
    4400:	ee 0f       	add	r30, r30
    4402:	ff 1f       	adc	r31, r31
    4404:	e8 1b       	sub	r30, r24
    4406:	f9 0b       	sbc	r31, r25
    4408:	29 81       	ldd	r18, Y+1	; 0x01
    440a:	3a 81       	ldd	r19, Y+2	; 0x02
    440c:	e2 0f       	add	r30, r18
    440e:	f3 1f       	adc	r31, r19
    4410:	80 81       	ld	r24, Z
    4412:	81 50       	subi	r24, 0x01	; 1
    4414:	82 30       	cpi	r24, 0x02	; 2
    4416:	08 f4       	brcc	.+2      	; 0x441a <jsmn_parse+0x4b6>
    4418:	d2 c0       	rjmp	.+420    	; 0x45be <jsmn_parse+0x65a>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
    441a:	12 96       	adiw	r26, 0x02	; 2
    441c:	2d 91       	ld	r18, X+
    441e:	3c 91       	ld	r19, X
    4420:	13 97       	sbiw	r26, 0x03	; 3
    4422:	c9 01       	movw	r24, r18
    4424:	01 97       	sbiw	r24, 0x01	; 1
    4426:	99 23       	and	r25, r25
    4428:	0c f4       	brge	.+2      	; 0x442c <jsmn_parse+0x4c8>
    442a:	c9 c0       	rjmp	.+402    	; 0x45be <jsmn_parse+0x65a>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
    442c:	f9 01       	movw	r30, r18
    442e:	ee 0f       	add	r30, r30
    4430:	ff 1f       	adc	r31, r31
    4432:	ee 0f       	add	r30, r30
    4434:	ff 1f       	adc	r31, r31
    4436:	ee 0f       	add	r30, r30
    4438:	ff 1f       	adc	r31, r31
    443a:	e2 1b       	sub	r30, r18
    443c:	f3 0b       	sbc	r31, r19
    443e:	37 97       	sbiw	r30, 0x07	; 7
    4440:	a9 81       	ldd	r26, Y+1	; 0x01
    4442:	ba 81       	ldd	r27, Y+2	; 0x02
    4444:	ea 0f       	add	r30, r26
    4446:	fb 1f       	adc	r31, r27
    4448:	10 81       	ld	r17, Z
    444a:	11 50       	subi	r17, 0x01	; 1
    444c:	12 30       	cpi	r17, 0x02	; 2
    444e:	80 f4       	brcc	.+32     	; 0x4470 <jsmn_parse+0x50c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
    4450:	01 81       	ldd	r16, Z+1	; 0x01
    4452:	12 81       	ldd	r17, Z+2	; 0x02
    4454:	0f 3f       	cpi	r16, 0xFF	; 255
    4456:	1f 4f       	sbci	r17, 0xFF	; 255
    4458:	59 f0       	breq	.+22     	; 0x4470 <jsmn_parse+0x50c>
    445a:	a3 81       	ldd	r26, Z+3	; 0x03
    445c:	b4 81       	ldd	r27, Z+4	; 0x04
    445e:	11 96       	adiw	r26, 0x01	; 1
    4460:	39 f4       	brne	.+14     	; 0x4470 <jsmn_parse+0x50c>
								parser->toksuper = i;
    4462:	ab 81       	ldd	r26, Y+3	; 0x03
    4464:	bc 81       	ldd	r27, Y+4	; 0x04
    4466:	14 96       	adiw	r26, 0x04	; 4
    4468:	8d 93       	st	X+, r24
    446a:	9c 93       	st	X, r25
    446c:	15 97       	sbiw	r26, 0x05	; 5
								break;
    446e:	a7 c0       	rjmp	.+334    	; 0x45be <jsmn_parse+0x65a>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
    4470:	01 97       	sbiw	r24, 0x01	; 1
    4472:	37 97       	sbiw	r30, 0x07	; 7
    4474:	99 23       	and	r25, r25
    4476:	44 f7       	brge	.-48     	; 0x4448 <jsmn_parse+0x4e4>
    4478:	a2 c0       	rjmp	.+324    	; 0x45be <jsmn_parse+0x65a>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    447a:	ab 81       	ldd	r26, Y+3	; 0x03
    447c:	bc 81       	ldd	r27, Y+4	; 0x04
    447e:	ed 91       	ld	r30, X+
    4480:	fc 91       	ld	r31, X
    4482:	e4 17       	cp	r30, r20
    4484:	f5 07       	cpc	r31, r21
    4486:	a8 f5       	brcc	.+106    	; 0x44f2 <jsmn_parse+0x58e>
    4488:	db 01       	movw	r26, r22
    448a:	ae 0f       	add	r26, r30
    448c:	bf 1f       	adc	r27, r31
    448e:	1c 91       	ld	r17, X
    4490:	11 23       	and	r17, r17
    4492:	79 f1       	breq	.+94     	; 0x44f2 <jsmn_parse+0x58e>
    4494:	df 01       	movw	r26, r30
    4496:	11 96       	adiw	r26, 0x01	; 1
    4498:	9d 01       	movw	r18, r26
    449a:	26 0f       	add	r18, r22
    449c:	37 1f       	adc	r19, r23
		switch (js[parser->pos]) {
    449e:	10 32       	cpi	r17, 0x20	; 32
    44a0:	41 f1       	breq	.+80     	; 0x44f2 <jsmn_parse+0x58e>
    44a2:	38 f4       	brcc	.+14     	; 0x44b2 <jsmn_parse+0x54e>
    44a4:	19 30       	cpi	r17, 0x09	; 9
    44a6:	78 f0       	brcs	.+30     	; 0x44c6 <jsmn_parse+0x562>
    44a8:	1b 30       	cpi	r17, 0x0B	; 11
    44aa:	18 f1       	brcs	.+70     	; 0x44f2 <jsmn_parse+0x58e>
    44ac:	1d 30       	cpi	r17, 0x0D	; 13
    44ae:	59 f4       	brne	.+22     	; 0x44c6 <jsmn_parse+0x562>
    44b0:	20 c0       	rjmp	.+64     	; 0x44f2 <jsmn_parse+0x58e>
    44b2:	1a 33       	cpi	r17, 0x3A	; 58
    44b4:	f1 f0       	breq	.+60     	; 0x44f2 <jsmn_parse+0x58e>
    44b6:	18 f4       	brcc	.+6      	; 0x44be <jsmn_parse+0x55a>
    44b8:	1c 32       	cpi	r17, 0x2C	; 44
    44ba:	29 f4       	brne	.+10     	; 0x44c6 <jsmn_parse+0x562>
    44bc:	1a c0       	rjmp	.+52     	; 0x44f2 <jsmn_parse+0x58e>
    44be:	1d 35       	cpi	r17, 0x5D	; 93
    44c0:	c1 f0       	breq	.+48     	; 0x44f2 <jsmn_parse+0x58e>
    44c2:	1d 37       	cpi	r17, 0x7D	; 125
    44c4:	b1 f0       	breq	.+44     	; 0x44f2 <jsmn_parse+0x58e>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
    44c6:	10 52       	subi	r17, 0x20	; 32
    44c8:	1f 35       	cpi	r17, 0x5F	; 95
    44ca:	30 f0       	brcs	.+12     	; 0x44d8 <jsmn_parse+0x574>
			parser->pos = start;
    44cc:	eb 81       	ldd	r30, Y+3	; 0x03
    44ce:	fc 81       	ldd	r31, Y+4	; 0x04
    44d0:	80 83       	st	Z, r24
    44d2:	91 83       	std	Z+1, r25	; 0x01
			return JSMN_ERROR_INVAL;
    44d4:	8e ef       	ldi	r24, 0xFE	; 254
    44d6:	c5 c0       	rjmp	.+394    	; 0x4662 <jsmn_parse+0x6fe>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    44d8:	31 96       	adiw	r30, 0x01	; 1
    44da:	ab 81       	ldd	r26, Y+3	; 0x03
    44dc:	bc 81       	ldd	r27, Y+4	; 0x04
    44de:	ed 93       	st	X+, r30
    44e0:	fc 93       	st	X, r31
    44e2:	e4 17       	cp	r30, r20
    44e4:	f5 07       	cpc	r31, r21
    44e6:	28 f4       	brcc	.+10     	; 0x44f2 <jsmn_parse+0x58e>
    44e8:	d9 01       	movw	r26, r18
    44ea:	1d 91       	ld	r17, X+
    44ec:	9d 01       	movw	r18, r26
    44ee:	11 11       	cpse	r17, r1
    44f0:	d6 cf       	rjmp	.-84     	; 0x449e <jsmn_parse+0x53a>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
    44f2:	29 81       	ldd	r18, Y+1	; 0x01
    44f4:	3a 81       	ldd	r19, Y+2	; 0x02
    44f6:	23 2b       	or	r18, r19
    44f8:	49 f4       	brne	.+18     	; 0x450c <jsmn_parse+0x5a8>
		parser->pos--;
    44fa:	31 97       	sbiw	r30, 0x01	; 1
    44fc:	ab 81       	ldd	r26, Y+3	; 0x03
    44fe:	bc 81       	ldd	r27, Y+4	; 0x04
    4500:	ed 93       	st	X+, r30
    4502:	fc 93       	st	X, r31
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    4504:	bf ef       	ldi	r27, 0xFF	; 255
    4506:	cb 1a       	sub	r12, r27
    4508:	db 0a       	sbc	r13, r27
    450a:	59 c0       	rjmp	.+178    	; 0x45be <jsmn_parse+0x65a>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    450c:	eb 81       	ldd	r30, Y+3	; 0x03
    450e:	fc 81       	ldd	r31, Y+4	; 0x04
    4510:	22 81       	ldd	r18, Z+2	; 0x02
    4512:	33 81       	ldd	r19, Z+3	; 0x03
    4514:	28 15       	cp	r18, r8
    4516:	39 05       	cpc	r19, r9
    4518:	e8 f4       	brcc	.+58     	; 0x4554 <jsmn_parse+0x5f0>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    451a:	f9 01       	movw	r30, r18
    451c:	31 96       	adiw	r30, 0x01	; 1
    451e:	ab 81       	ldd	r26, Y+3	; 0x03
    4520:	bc 81       	ldd	r27, Y+4	; 0x04
    4522:	12 96       	adiw	r26, 0x02	; 2
    4524:	ed 93       	st	X+, r30
    4526:	fc 93       	st	X, r31
    4528:	13 97       	sbiw	r26, 0x03	; 3
    452a:	f9 01       	movw	r30, r18
    452c:	ee 0f       	add	r30, r30
    452e:	ff 1f       	adc	r31, r31
    4530:	ee 0f       	add	r30, r30
    4532:	ff 1f       	adc	r31, r31
    4534:	ee 0f       	add	r30, r30
    4536:	ff 1f       	adc	r31, r31
    4538:	e2 1b       	sub	r30, r18
    453a:	f3 0b       	sbc	r31, r19
    453c:	29 81       	ldd	r18, Y+1	; 0x01
    453e:	3a 81       	ldd	r19, Y+2	; 0x02
    4540:	e2 0f       	add	r30, r18
    4542:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    4544:	a3 82       	std	Z+3, r10	; 0x03
    4546:	b4 82       	std	Z+4, r11	; 0x04
    4548:	a1 82       	std	Z+1, r10	; 0x01
    454a:	b2 82       	std	Z+2, r11	; 0x02
	tok->size = 0;
    454c:	15 82       	std	Z+5, r1	; 0x05
    454e:	16 82       	std	Z+6, r1	; 0x06
	if (tokens == NULL) {
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
    4550:	30 97       	sbiw	r30, 0x00	; 0
    4552:	31 f4       	brne	.+12     	; 0x4560 <jsmn_parse+0x5fc>
		parser->pos = start;
    4554:	ab 81       	ldd	r26, Y+3	; 0x03
    4556:	bc 81       	ldd	r27, Y+4	; 0x04
    4558:	8d 93       	st	X+, r24
    455a:	9c 93       	st	X, r25
		return JSMN_ERROR_NOMEM;
    455c:	8f ef       	ldi	r24, 0xFF	; 255
    455e:	81 c0       	rjmp	.+258    	; 0x4662 <jsmn_parse+0x6fe>
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
    4560:	ab 81       	ldd	r26, Y+3	; 0x03
    4562:	bc 81       	ldd	r27, Y+4	; 0x04
    4564:	2d 91       	ld	r18, X+
    4566:	3c 91       	ld	r19, X
    4568:	11 97       	sbiw	r26, 0x01	; 1
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    456a:	10 82       	st	Z, r1
	token->start = start;
    456c:	81 83       	std	Z+1, r24	; 0x01
    456e:	92 83       	std	Z+2, r25	; 0x02
	token->end = end;
    4570:	23 83       	std	Z+3, r18	; 0x03
    4572:	34 83       	std	Z+4, r19	; 0x04
	token->size = 0;
    4574:	15 82       	std	Z+5, r1	; 0x05
    4576:	16 82       	std	Z+6, r1	; 0x06
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
    4578:	8d 91       	ld	r24, X+
    457a:	9c 91       	ld	r25, X
    457c:	11 97       	sbiw	r26, 0x01	; 1
    457e:	01 97       	sbiw	r24, 0x01	; 1
    4580:	8d 93       	st	X+, r24
    4582:	9c 93       	st	X, r25
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    4584:	bf ef       	ldi	r27, 0xFF	; 255
    4586:	cb 1a       	sub	r12, r27
    4588:	db 0a       	sbc	r13, r27
				if (parser->toksuper != -1 && tokens != NULL)
    458a:	eb 81       	ldd	r30, Y+3	; 0x03
    458c:	fc 81       	ldd	r31, Y+4	; 0x04
    458e:	84 81       	ldd	r24, Z+4	; 0x04
    4590:	95 81       	ldd	r25, Z+5	; 0x05
    4592:	8f 3f       	cpi	r24, 0xFF	; 255
    4594:	ff ef       	ldi	r31, 0xFF	; 255
    4596:	9f 07       	cpc	r25, r31
    4598:	91 f0       	breq	.+36     	; 0x45be <jsmn_parse+0x65a>
					tokens[parser->toksuper].size++;
    459a:	fc 01       	movw	r30, r24
    459c:	ee 0f       	add	r30, r30
    459e:	ff 1f       	adc	r31, r31
    45a0:	ee 0f       	add	r30, r30
    45a2:	ff 1f       	adc	r31, r31
    45a4:	ee 0f       	add	r30, r30
    45a6:	ff 1f       	adc	r31, r31
    45a8:	e8 1b       	sub	r30, r24
    45aa:	f9 0b       	sbc	r31, r25
    45ac:	29 81       	ldd	r18, Y+1	; 0x01
    45ae:	3a 81       	ldd	r19, Y+2	; 0x02
    45b0:	e2 0f       	add	r30, r18
    45b2:	f3 1f       	adc	r31, r19
    45b4:	85 81       	ldd	r24, Z+5	; 0x05
    45b6:	96 81       	ldd	r25, Z+6	; 0x06
    45b8:	01 96       	adiw	r24, 0x01	; 1
    45ba:	85 83       	std	Z+5, r24	; 0x05
    45bc:	96 83       	std	Z+6, r25	; 0x06
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    45be:	ab 81       	ldd	r26, Y+3	; 0x03
    45c0:	bc 81       	ldd	r27, Y+4	; 0x04
    45c2:	8d 91       	ld	r24, X+
    45c4:	9c 91       	ld	r25, X
    45c6:	11 97       	sbiw	r26, 0x01	; 1
    45c8:	01 96       	adiw	r24, 0x01	; 1
    45ca:	8d 93       	st	X+, r24
    45cc:	9c 93       	st	X, r25
    45ce:	84 17       	cp	r24, r20
    45d0:	95 07       	cpc	r25, r21
    45d2:	60 f4       	brcc	.+24     	; 0x45ec <jsmn_parse+0x688>
    45d4:	fb 01       	movw	r30, r22
    45d6:	e8 0f       	add	r30, r24
    45d8:	f9 1f       	adc	r31, r25
    45da:	10 81       	ld	r17, Z
    45dc:	11 11       	cpse	r17, r1
    45de:	f3 cc       	rjmp	.-1562   	; 0x3fc6 <jsmn_parse+0x62>
    45e0:	05 c0       	rjmp	.+10     	; 0x45ec <jsmn_parse+0x688>
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;
    45e2:	c1 2c       	mov	r12, r1
    45e4:	d1 2c       	mov	r13, r1
    45e6:	02 c0       	rjmp	.+4      	; 0x45ec <jsmn_parse+0x688>
    45e8:	c1 2c       	mov	r12, r1
    45ea:	d1 2c       	mov	r13, r1
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    45ec:	eb 81       	ldd	r30, Y+3	; 0x03
    45ee:	fc 81       	ldd	r31, Y+4	; 0x04
    45f0:	42 81       	ldd	r20, Z+2	; 0x02
    45f2:	53 81       	ldd	r21, Z+3	; 0x03
    45f4:	ca 01       	movw	r24, r20
    45f6:	01 97       	sbiw	r24, 0x01	; 1
    45f8:	99 23       	and	r25, r25
    45fa:	ec f0       	brlt	.+58     	; 0x4636 <jsmn_parse+0x6d2>
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
    45fc:	fa 01       	movw	r30, r20
    45fe:	ee 0f       	add	r30, r30
    4600:	ff 1f       	adc	r31, r31
    4602:	ee 0f       	add	r30, r30
    4604:	ff 1f       	adc	r31, r31
    4606:	ee 0f       	add	r30, r30
    4608:	ff 1f       	adc	r31, r31
    460a:	e4 1b       	sub	r30, r20
    460c:	f5 0b       	sbc	r31, r21
    460e:	29 81       	ldd	r18, Y+1	; 0x01
    4610:	3a 81       	ldd	r19, Y+2	; 0x02
    4612:	2e 0f       	add	r18, r30
    4614:	3f 1f       	adc	r19, r31
    4616:	f9 01       	movw	r30, r18
    4618:	36 97       	sbiw	r30, 0x06	; 6
    461a:	20 81       	ld	r18, Z
    461c:	31 81       	ldd	r19, Z+1	; 0x01
    461e:	2f 3f       	cpi	r18, 0xFF	; 255
    4620:	3f 4f       	sbci	r19, 0xFF	; 255
    4622:	29 f0       	breq	.+10     	; 0x462e <jsmn_parse+0x6ca>
    4624:	22 81       	ldd	r18, Z+2	; 0x02
    4626:	33 81       	ldd	r19, Z+3	; 0x03
    4628:	2f 3f       	cpi	r18, 0xFF	; 255
    462a:	3f 4f       	sbci	r19, 0xFF	; 255
    462c:	71 f0       	breq	.+28     	; 0x464a <jsmn_parse+0x6e6>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    462e:	01 97       	sbiw	r24, 0x01	; 1
    4630:	37 97       	sbiw	r30, 0x07	; 7
    4632:	99 23       	and	r25, r25
    4634:	94 f7       	brge	.-28     	; 0x461a <jsmn_parse+0x6b6>
		if (tokens[i].start != -1 && tokens[i].end == -1) {
			return JSMN_ERROR_PART;
		}
	}

	return count;
    4636:	8c 2d       	mov	r24, r12
    4638:	14 c0       	rjmp	.+40     	; 0x4662 <jsmn_parse+0x6fe>
				if (tokens == NULL) {
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
					return JSMN_ERROR_NOMEM;
    463a:	8f ef       	ldi	r24, 0xFF	; 255
    463c:	12 c0       	rjmp	.+36     	; 0x4662 <jsmn_parse+0x6fe>
    463e:	8f ef       	ldi	r24, 0xFF	; 255
    4640:	10 c0       	rjmp	.+32     	; 0x4662 <jsmn_parse+0x6fe>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
    4642:	8e ef       	ldi	r24, 0xFE	; 254
    4644:	0e c0       	rjmp	.+28     	; 0x4662 <jsmn_parse+0x6fe>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
    4646:	8e ef       	ldi	r24, 0xFE	; 254
    4648:	0c c0       	rjmp	.+24     	; 0x4662 <jsmn_parse+0x6fe>
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
			return JSMN_ERROR_PART;
    464a:	8d ef       	ldi	r24, 0xFD	; 253
    464c:	0a c0       	rjmp	.+20     	; 0x4662 <jsmn_parse+0x6fe>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
    464e:	8e ef       	ldi	r24, 0xFE	; 254
    4650:	08 c0       	rjmp	.+16     	; 0x4662 <jsmn_parse+0x6fe>
    4652:	31 96       	adiw	r30, 0x01	; 1
    4654:	09 f0       	breq	.+2      	; 0x4658 <jsmn_parse+0x6f4>
    4656:	b3 cf       	rjmp	.-154    	; 0x45be <jsmn_parse+0x65a>
    4658:	fa cf       	rjmp	.-12     	; 0x464e <jsmn_parse+0x6ea>
#endif
				break;
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    465a:	ef ef       	ldi	r30, 0xFF	; 255
    465c:	ce 1a       	sub	r12, r30
    465e:	de 0a       	sbc	r13, r30
    4660:	ae cf       	rjmp	.-164    	; 0x45be <jsmn_parse+0x65a>
			return JSMN_ERROR_PART;
		}
	}

	return count;
}
    4662:	24 96       	adiw	r28, 0x04	; 4
    4664:	cd bf       	out	0x3d, r28	; 61
    4666:	de bf       	out	0x3e, r29	; 62
    4668:	df 91       	pop	r29
    466a:	cf 91       	pop	r28
    466c:	1f 91       	pop	r17
    466e:	0f 91       	pop	r16
    4670:	ff 90       	pop	r15
    4672:	ef 90       	pop	r14
    4674:	df 90       	pop	r13
    4676:	cf 90       	pop	r12
    4678:	bf 90       	pop	r11
    467a:	af 90       	pop	r10
    467c:	9f 90       	pop	r9
    467e:	8f 90       	pop	r8
    4680:	7f 90       	pop	r7
    4682:	6f 90       	pop	r6
    4684:	5f 90       	pop	r5
    4686:	4f 90       	pop	r4
    4688:	3f 90       	pop	r3
    468a:	08 95       	ret

0000468c <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
    468c:	fc 01       	movw	r30, r24
	parser->pos = 0;
    468e:	10 82       	st	Z, r1
    4690:	11 82       	std	Z+1, r1	; 0x01
	parser->toknext = 0;
    4692:	12 82       	std	Z+2, r1	; 0x02
    4694:	13 82       	std	Z+3, r1	; 0x03
	parser->toksuper = -1;
    4696:	8f ef       	ldi	r24, 0xFF	; 255
    4698:	9f ef       	ldi	r25, 0xFF	; 255
    469a:	84 83       	std	Z+4, r24	; 0x04
    469c:	95 83       	std	Z+5, r25	; 0x05
    469e:	08 95       	ret

000046a0 <json_get_token>:
 *  Author: Administrator
 */ 

#include "json_functions.h"

void json_get_token(jsmntok_t *tokens, char *js, char *buffer, uint8_t buffer_size, uint8_t i) {
    46a0:	af 92       	push	r10
    46a2:	bf 92       	push	r11
    46a4:	cf 92       	push	r12
    46a6:	df 92       	push	r13
    46a8:	ef 92       	push	r14
    46aa:	ff 92       	push	r15
    46ac:	0f 93       	push	r16
    46ae:	1f 93       	push	r17
    46b0:	cf 93       	push	r28
    46b2:	df 93       	push	r29
    46b4:	cd b7       	in	r28, 0x3d	; 61
    46b6:	de b7       	in	r29, 0x3e	; 62
    46b8:	6a 01       	movw	r12, r20
		memcpy( keyString, &js[ key.start ], len );
		keyString[ len ] = '\0';
		
		strcpy(buffer,keyString);
	}
}
    46ba:	ed b6       	in	r14, 0x3d	; 61
    46bc:	fe b6       	in	r15, 0x3e	; 62

void json_get_token(jsmntok_t *tokens, char *js, char *buffer, uint8_t buffer_size, uint8_t i) {
	int len;
	jsmntok_t key;

	key = tokens[i];
    46be:	fc 01       	movw	r30, r24
    46c0:	37 e0       	ldi	r19, 0x07	; 7
    46c2:	03 9f       	mul	r16, r19
    46c4:	e0 0d       	add	r30, r0
    46c6:	f1 1d       	adc	r31, r1
    46c8:	11 24       	eor	r1, r1
    46ca:	a1 81       	ldd	r26, Z+1	; 0x01
    46cc:	b2 81       	ldd	r27, Z+2	; 0x02
	len = key.end - key.start;
    46ce:	03 81       	ldd	r16, Z+3	; 0x03
    46d0:	14 81       	ldd	r17, Z+4	; 0x04
    46d2:	0a 1b       	sub	r16, r26
    46d4:	1b 0b       	sbc	r17, r27
	char keyString[ len+1 ];
    46d6:	c8 01       	movw	r24, r16
    46d8:	01 96       	adiw	r24, 0x01	; 1
    46da:	4d b7       	in	r20, 0x3d	; 61
    46dc:	5e b7       	in	r21, 0x3e	; 62
    46de:	48 1b       	sub	r20, r24
    46e0:	59 0b       	sbc	r21, r25
    46e2:	4d bf       	out	0x3d, r20	; 61
    46e4:	5e bf       	out	0x3e, r21	; 62
    46e6:	8d b7       	in	r24, 0x3d	; 61
    46e8:	9e b7       	in	r25, 0x3e	; 62
    46ea:	01 96       	adiw	r24, 0x01	; 1
    46ec:	5c 01       	movw	r10, r24
	if (len < buffer_size) {
    46ee:	30 e0       	ldi	r19, 0x00	; 0
    46f0:	02 17       	cp	r16, r18
    46f2:	13 07       	cpc	r17, r19
    46f4:	6c f4       	brge	.+26     	; 0x4710 <json_get_token+0x70>
		memcpy( keyString, &js[ key.start ], len );
    46f6:	6a 0f       	add	r22, r26
    46f8:	7b 1f       	adc	r23, r27
    46fa:	a8 01       	movw	r20, r16
    46fc:	0e 94 ee 3d 	call	0x7bdc	; 0x7bdc <memcpy>
		keyString[ len ] = '\0';
    4700:	f5 01       	movw	r30, r10
    4702:	e0 0f       	add	r30, r16
    4704:	f1 1f       	adc	r31, r17
    4706:	10 82       	st	Z, r1
		
		strcpy(buffer,keyString);
    4708:	b5 01       	movw	r22, r10
    470a:	c6 01       	movw	r24, r12
    470c:	0e 94 14 3e 	call	0x7c28	; 0x7c28 <strcpy>
	}
}
    4710:	ed be       	out	0x3d, r14	; 61
    4712:	fe be       	out	0x3e, r15	; 62
    4714:	df 91       	pop	r29
    4716:	cf 91       	pop	r28
    4718:	1f 91       	pop	r17
    471a:	0f 91       	pop	r16
    471c:	ff 90       	pop	r15
    471e:	ef 90       	pop	r14
    4720:	df 90       	pop	r13
    4722:	cf 90       	pop	r12
    4724:	bf 90       	pop	r11
    4726:	af 90       	pop	r10
    4728:	08 95       	ret

0000472a <main>:
		}
	}
}

int main(void) 
{	
    472a:	cf 93       	push	r28
    472c:	df 93       	push	r29
    472e:	cd b7       	in	r28, 0x3d	; 61
    4730:	de b7       	in	r29, 0x3e	; 62
    4732:	64 97       	sbiw	r28, 0x14	; 20
    4734:	cd bf       	out	0x3d, r28	; 61
    4736:	de bf       	out	0x3e, r29	; 62
	//Structures
	SI114X_IRQ_SAMPLE sensor_data;
	
	//System
	clock_setup_32_mhz();
    4738:	0e 94 5e 07 	call	0xebc	; 0xebc <clock_setup_32_mhz>
	//clock_setup_48_mhz_pll();
	//LED Matrix init
	display_setup();
    473c:	b4 d0       	rcall	.+360    	; 0x48a6 <display_setup>
	
	//Init env variables
	if(1)
	//if (!EEPROM_ReadEnv())
	{
		menu_set_env_variables();
    473e:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <menu_set_env_variables>
	}
	
	//WiFi off
	esp8266_off();
    4742:	0e 94 52 08 	call	0x10a4	; 0x10a4 <esp8266_off>
	
	//Debug interface
	uart_setup();
    4746:	5f db       	rcall	.-2370   	; 0x3e06 <uart_setup>
	stdout = stdin = &mystdout;
    4748:	82 e1       	ldi	r24, 0x12	; 18
    474a:	90 e2       	ldi	r25, 0x20	; 32
    474c:	80 93 c4 2b 	sts	0x2BC4, r24
    4750:	90 93 c5 2b 	sts	0x2BC5, r25
    4754:	80 93 c6 2b 	sts	0x2BC6, r24
    4758:	90 93 c7 2b 	sts	0x2BC7, r25

#ifdef DEBUG_ON
	puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
    475c:	8f ea       	ldi	r24, 0xAF	; 175
    475e:	95 e2       	ldi	r25, 0x25	; 37
    4760:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <puts>

static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) 
{
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    4764:	87 e0       	ldi	r24, 0x07	; 7
    4766:	e0 ea       	ldi	r30, 0xA0	; 160
    4768:	f0 e0       	ldi	r31, 0x00	; 0
    476a:	82 83       	std	Z+2, r24	; 0x02
	puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
#endif

	//Enable interrupts
	pmic_setup();
	btn_setup(true);
    476c:	81 e0       	ldi	r24, 0x01	; 1
    476e:	0e 94 ae 11 	call	0x235c	; 0x235c <btn_setup>
	
	twi_setup(&TWIC);
    4772:	80 e8       	ldi	r24, 0x80	; 128
    4774:	94 e0       	ldi	r25, 0x04	; 4
    4776:	44 da       	rcall	.-2936   	; 0x3c00 <twi_setup>

	SLEEP.CTRL |= SLEEP_MODE_PWR_SAVE;
    4778:	e8 e4       	ldi	r30, 0x48	; 72
    477a:	f0 e0       	ldi	r31, 0x00	; 0
    477c:	80 81       	ld	r24, Z
    477e:	86 60       	ori	r24, 0x06	; 6
    4780:	80 83       	st	Z, r24
	
	sei();
    4782:	78 94       	sei
	
	//Calculate baseline for Si114x
	si114x_baseline_calibration(&sensor_data);
    4784:	ce 01       	movw	r24, r28
    4786:	01 96       	adiw	r24, 0x01	; 1
    4788:	0e 94 20 17 	call	0x2e40	; 0x2e40 <si114x_baseline_calibration>

	//Turn on proximity channel 1 with ISR and threshold
	si114x_setup_ps1_only();
    478c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <si114x_setup_ps1_only>
	
	//Turn on RTC
	rtc_enable_time_render();
    4790:	0e 94 a7 13 	call	0x274e	; 0x274e <rtc_enable_time_render>
	display_refresh_screen();
    4794:	97 d0       	rcall	.+302    	; 0x48c4 <display_refresh_screen>
	rtc_setup();
    4796:	0e 94 ed 12 	call	0x25da	; 0x25da <rtc_setup>
	
	EEPROM_WriteEnv();
    479a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <EEPROM_WriteEnv>
			display_fade(MAX_BRIGHTNESS);
#ifdef DEBUG_ON
			puts("Enter gesture mode!");
#endif
			//Guard
			env_var.menu_id = 0;
    479e:	0f 2e       	mov	r0, r31
    47a0:	f9 e3       	ldi	r31, 0x39	; 57
    47a2:	cf 2e       	mov	r12, r31
    47a4:	fa e2       	ldi	r31, 0x2A	; 42
    47a6:	df 2e       	mov	r13, r31
    47a8:	f0 2d       	mov	r31, r0
			if (env_var.menu_id != 0) {
				display_slide_out_to_bottom();
				rtc_enable_time_render();
				display_slide_in_from_top();
			}
			display_fade(env_var.brightness);
    47aa:	0f 2e       	mov	r0, r31
    47ac:	fe e0       	ldi	r31, 0x0E	; 14
    47ae:	af 2e       	mov	r10, r31
    47b0:	fa e2       	ldi	r31, 0x2A	; 42
    47b2:	bf 2e       	mov	r11, r31
    47b4:	f0 2d       	mov	r31, r0
			si114x_baseline_calibration(&sensor_data);
			rtc_enable_time_render();
			display_slide_in_from_top();
		}
		
		SLEEP.CTRL |= SLEEP_SEN_bm;
    47b6:	0f 2e       	mov	r0, r31
    47b8:	f8 e4       	ldi	r31, 0x48	; 72
    47ba:	ef 2e       	mov	r14, r31
    47bc:	f1 2c       	mov	r15, r1
    47be:	f0 2d       	mov	r31, r0
	
	//This should flip MOSI and SCK
	//PORTC.REMAP |= PORT_SPI_bm;
	
	while (1) { 
		if (si114x_status == 4)
    47c0:	80 91 75 2b 	lds	r24, 0x2B75
    47c4:	84 30       	cpi	r24, 0x04	; 4
    47c6:	09 f0       	breq	.+2      	; 0x47ca <main+0xa0>
    47c8:	53 c0       	rjmp	.+166    	; 0x4870 <main+0x146>
		{
			uint16_t timeout_ms;
			bool timeout = false;
			
			btn_setup(false);
    47ca:	80 e0       	ldi	r24, 0x00	; 0
    47cc:	0e 94 ae 11 	call	0x235c	; 0x235c <btn_setup>
			btn_si114x_disable_interrupt();
    47d0:	0e 94 19 12 	call	0x2432	; 0x2432 <btn_si114x_disable_interrupt>
			
			display_fade(MAX_BRIGHTNESS);
    47d4:	8f e0       	ldi	r24, 0x0F	; 15
    47d6:	79 d0       	rcall	.+242    	; 0x48ca <display_fade>
#ifdef DEBUG_ON
			puts("Enter gesture mode!");
    47d8:	87 ed       	ldi	r24, 0xD7	; 215
    47da:	95 e2       	ldi	r25, 0x25	; 37
    47dc:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <puts>
#endif
			//Guard
			env_var.menu_id = 0;
    47e0:	f6 01       	movw	r30, r12
    47e2:	10 82       	st	Z, r1

			si114x_setup();
    47e4:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <si114x_setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    47e8:	ff ef       	ldi	r31, 0xFF	; 255
    47ea:	23 ed       	ldi	r18, 0xD3	; 211
    47ec:	80 e3       	ldi	r24, 0x30	; 48
    47ee:	f1 50       	subi	r31, 0x01	; 1
    47f0:	20 40       	sbci	r18, 0x00	; 0
    47f2:	80 40       	sbci	r24, 0x00	; 0
    47f4:	e1 f7       	brne	.-8      	; 0x47ee <main+0xc4>
    47f6:	00 c0       	rjmp	.+0      	; 0x47f8 <main+0xce>
    47f8:	00 00       	nop
    47fa:	00 e0       	ldi	r16, 0x00	; 0
    47fc:	10 e0       	ldi	r17, 0x00	; 0
			
			//To avoid first menu item of being selected
			_delay_ms(500);
			
			while(!timeout) {
				si114x_get_data(&sensor_data);
    47fe:	ce 01       	movw	r24, r28
    4800:	01 96       	adiw	r24, 0x01	; 1
    4802:	0e 94 a6 14 	call	0x294c	; 0x294c <si114x_get_data>
				si114x_process_samples(SI114X_ADDR,&sensor_data);
    4806:	be 01       	movw	r22, r28
    4808:	6f 5f       	subi	r22, 0xFF	; 255
    480a:	7f 4f       	sbci	r23, 0xFF	; 255
    480c:	8a e5       	ldi	r24, 0x5A	; 90
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	0e 94 8b 19 	call	0x3316	; 0x3316 <si114x_process_samples>
				
				menu_state_machine(&sensor_data);
    4814:	ce 01       	movw	r24, r28
    4816:	01 96       	adiw	r24, 0x01	; 1
    4818:	0e 94 dd 36 	call	0x6dba	; 0x6dba <menu_state_machine>
				
				if (sensor_data.ps1 < PROXIMITY_THRESHOLD) {
    481c:	8b 85       	ldd	r24, Y+11	; 0x0b
    481e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4820:	80 38       	cpi	r24, 0x80	; 128
    4822:	9c 40       	sbci	r25, 0x0C	; 12
    4824:	38 f4       	brcc	.+14     	; 0x4834 <main+0x10a>
					if (timeout_ms++ > MENU_TIMEOUT) {
    4826:	09 39       	cpi	r16, 0x99	; 153
    4828:	fa e3       	ldi	r31, 0x3A	; 58
    482a:	1f 07       	cpc	r17, r31
    482c:	30 f4       	brcc	.+12     	; 0x483a <main+0x110>
    482e:	0f 5f       	subi	r16, 0xFF	; 255
    4830:	1f 4f       	sbci	r17, 0xFF	; 255
    4832:	e5 cf       	rjmp	.-54     	; 0x47fe <main+0xd4>
						timeout = true;
					}
				} else {
					timeout_ms = 0;
    4834:	00 e0       	ldi	r16, 0x00	; 0
    4836:	10 e0       	ldi	r17, 0x00	; 0
    4838:	e2 cf       	rjmp	.-60     	; 0x47fe <main+0xd4>
				}
			}
		    EEPROM_WriteEnv();
    483a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <EEPROM_WriteEnv>
			
			timeout_ms = 0;
#ifdef DEBUG_ON
			puts("Timeout! \n");
    483e:	8b ee       	ldi	r24, 0xEB	; 235
    4840:	95 e2       	ldi	r25, 0x25	; 37
    4842:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <puts>
#endif
			if (env_var.menu_id != 0) {
    4846:	f6 01       	movw	r30, r12
    4848:	80 81       	ld	r24, Z
    484a:	88 23       	and	r24, r24
    484c:	21 f0       	breq	.+8      	; 0x4856 <main+0x12c>
				display_slide_out_to_bottom();
    484e:	79 d3       	rcall	.+1778   	; 0x4f42 <display_slide_out_to_bottom>
				rtc_enable_time_render();
    4850:	0e 94 a7 13 	call	0x274e	; 0x274e <rtc_enable_time_render>
				display_slide_in_from_top();
    4854:	5b d3       	rcall	.+1718   	; 0x4f0c <display_slide_in_from_top>
			}
			display_fade(env_var.brightness);
    4856:	f5 01       	movw	r30, r10
    4858:	80 81       	ld	r24, Z
    485a:	37 d0       	rcall	.+110    	; 0x48ca <display_fade>
			btn_setup(true);
    485c:	81 e0       	ldi	r24, 0x01	; 1
    485e:	0e 94 ae 11 	call	0x235c	; 0x235c <btn_setup>
			btn_si114x_enable_interrupt();
    4862:	0e 94 0a 12 	call	0x2414	; 0x2414 <btn_si114x_enable_interrupt>
			si114x_setup_ps1_only();
    4866:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <si114x_setup_ps1_only>
			si114x_status = 0;
    486a:	10 92 75 2b 	sts	0x2B75, r1
    486e:	15 c0       	rjmp	.+42     	; 0x489a <main+0x170>
		} else if (si114x_status == 2) {
    4870:	80 91 75 2b 	lds	r24, 0x2B75
    4874:	82 30       	cpi	r24, 0x02	; 2
    4876:	29 f4       	brne	.+10     	; 0x4882 <main+0x158>
			//Dim light by using the light sensor
			puts("Somebody turned off the lights!");
    4878:	86 ef       	ldi	r24, 0xF6	; 246
    487a:	95 e2       	ldi	r25, 0x25	; 37
    487c:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <puts>
    4880:	0c c0       	rjmp	.+24     	; 0x489a <main+0x170>
		} else if (btn_status == (BTN1 | BTN4)) {
    4882:	80 91 42 2b 	lds	r24, 0x2B42
    4886:	85 30       	cpi	r24, 0x05	; 5
    4888:	41 f4       	brne	.+16     	; 0x489a <main+0x170>
			//Calculate baseline for Si114x
			display_slide_out_to_bottom();
    488a:	5b d3       	rcall	.+1718   	; 0x4f42 <display_slide_out_to_bottom>
			si114x_baseline_calibration(&sensor_data);
    488c:	ce 01       	movw	r24, r28
    488e:	01 96       	adiw	r24, 0x01	; 1
    4890:	0e 94 20 17 	call	0x2e40	; 0x2e40 <si114x_baseline_calibration>
			rtc_enable_time_render();
    4894:	0e 94 a7 13 	call	0x274e	; 0x274e <rtc_enable_time_render>
			display_slide_in_from_top();
    4898:	39 d3       	rcall	.+1650   	; 0x4f0c <display_slide_in_from_top>
		}
		
		SLEEP.CTRL |= SLEEP_SEN_bm;
    489a:	f7 01       	movw	r30, r14
    489c:	80 81       	ld	r24, Z
    489e:	81 60       	ori	r24, 0x01	; 1
    48a0:	80 83       	st	Z, r24
		asm("sleep");
    48a2:	88 95       	sleep
	}
    48a4:	8d cf       	rjmp	.-230    	; 0x47c0 <main+0x96>

000048a6 <display_setup>:
	ht1632c_fill_screen();
}

void display_clear_screen(void) 
{
	ht1632c_clear_screen();
    48a6:	84 e2       	ldi	r24, 0x24	; 36
    48a8:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <ht1632c_setup>
    48ac:	81 e0       	ldi	r24, 0x01	; 1
    48ae:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <ht1632c_set_brightness>
    48b2:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <ht1632c_clear_screen>
    48b6:	83 e0       	ldi	r24, 0x03	; 3
    48b8:	0c 94 de 0d 	jmp	0x1bbc	; 0x1bbc <ht1632c_write_command>
    48bc:	08 95       	ret

000048be <display_clear_screen>:
    48be:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <ht1632c_clear_screen>
    48c2:	08 95       	ret

000048c4 <display_refresh_screen>:
    48c4:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    48c8:	08 95       	ret

000048ca <display_fade>:
    48ca:	cf 93       	push	r28
    48cc:	df 93       	push	r29
    48ce:	d8 2f       	mov	r29, r24
    48d0:	c0 91 23 20 	lds	r28, 0x2023
    48d4:	c8 17       	cp	r28, r24
    48d6:	80 f4       	brcc	.+32     	; 0x48f8 <display_fade+0x2e>
    48d8:	8c 2f       	mov	r24, r28
    48da:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <ht1632c_set_brightness>
    48de:	2f ef       	ldi	r18, 0xFF	; 255
    48e0:	86 e7       	ldi	r24, 0x76	; 118
    48e2:	91 e0       	ldi	r25, 0x01	; 1
    48e4:	21 50       	subi	r18, 0x01	; 1
    48e6:	80 40       	sbci	r24, 0x00	; 0
    48e8:	90 40       	sbci	r25, 0x00	; 0
    48ea:	e1 f7       	brne	.-8      	; 0x48e4 <display_fade+0x1a>
    48ec:	00 c0       	rjmp	.+0      	; 0x48ee <display_fade+0x24>
    48ee:	00 00       	nop
    48f0:	cf 5f       	subi	r28, 0xFF	; 255
    48f2:	cd 17       	cp	r28, r29
    48f4:	88 f3       	brcs	.-30     	; 0x48d8 <display_fade+0xe>
    48f6:	11 c0       	rjmp	.+34     	; 0x491a <display_fade+0x50>
    48f8:	8c 17       	cp	r24, r28
    48fa:	78 f4       	brcc	.+30     	; 0x491a <display_fade+0x50>
    48fc:	8c 2f       	mov	r24, r28
    48fe:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <ht1632c_set_brightness>
    4902:	2f ef       	ldi	r18, 0xFF	; 255
    4904:	86 e7       	ldi	r24, 0x76	; 118
    4906:	91 e0       	ldi	r25, 0x01	; 1
    4908:	21 50       	subi	r18, 0x01	; 1
    490a:	80 40       	sbci	r24, 0x00	; 0
    490c:	90 40       	sbci	r25, 0x00	; 0
    490e:	e1 f7       	brne	.-8      	; 0x4908 <display_fade+0x3e>
    4910:	00 c0       	rjmp	.+0      	; 0x4912 <display_fade+0x48>
    4912:	00 00       	nop
    4914:	c1 50       	subi	r28, 0x01	; 1
    4916:	dc 17       	cp	r29, r28
    4918:	88 f3       	brcs	.-30     	; 0x48fc <display_fade+0x32>
    491a:	d0 93 23 20 	sts	0x2023, r29
    491e:	df 91       	pop	r29
    4920:	cf 91       	pop	r28
    4922:	08 95       	ret

00004924 <display_fade_blink>:
    4924:	81 e0       	ldi	r24, 0x01	; 1
    4926:	d1 df       	rcall	.-94     	; 0x48ca <display_fade>
    4928:	8f e0       	ldi	r24, 0x0F	; 15
    492a:	cf df       	rcall	.-98     	; 0x48ca <display_fade>
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	cd df       	rcall	.-102    	; 0x48ca <display_fade>
    4930:	8f e0       	ldi	r24, 0x0F	; 15
    4932:	cb cf       	rjmp	.-106    	; 0x48ca <display_fade>
    4934:	08 95       	ret

00004936 <display_draw_pixel>:
    4936:	9c 01       	movw	r18, r24
    4938:	80 31       	cpi	r24, 0x10	; 16
    493a:	91 05       	cpc	r25, r1
    493c:	f4 f5       	brge	.+124    	; 0x49ba <display_draw_pixel+0x84>
    493e:	60 31       	cpi	r22, 0x10	; 16
    4940:	71 05       	cpc	r23, r1
    4942:	dc f5       	brge	.+118    	; 0x49ba <display_draw_pixel+0x84>
    4944:	8f e0       	ldi	r24, 0x0F	; 15
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	86 1b       	sub	r24, r22
    494a:	97 0b       	sbc	r25, r23
    494c:	68 e1       	ldi	r22, 0x18	; 24
    494e:	70 e0       	ldi	r23, 0x00	; 0
    4950:	0e 94 b5 3a 	call	0x756a	; 0x756a <__divmodhi4>
    4954:	88 30       	cpi	r24, 0x08	; 8
    4956:	91 05       	cpc	r25, r1
    4958:	34 f0       	brlt	.+12     	; 0x4966 <display_draw_pixel+0x30>
    495a:	80 31       	cpi	r24, 0x10	; 16
    495c:	91 05       	cpc	r25, r1
    495e:	34 f4       	brge	.+12     	; 0x496c <display_draw_pixel+0x36>
    4960:	67 e8       	ldi	r22, 0x87	; 135
    4962:	70 e0       	ldi	r23, 0x00	; 0
    4964:	05 c0       	rjmp	.+10     	; 0x4970 <display_draw_pixel+0x3a>
    4966:	67 e0       	ldi	r22, 0x07	; 7
    4968:	70 e0       	ldi	r23, 0x00	; 0
    496a:	02 c0       	rjmp	.+4      	; 0x4970 <display_draw_pixel+0x3a>
    496c:	67 e0       	ldi	r22, 0x07	; 7
    496e:	71 e0       	ldi	r23, 0x01	; 1
    4970:	87 70       	andi	r24, 0x07	; 7
    4972:	90 78       	andi	r25, 0x80	; 128
    4974:	99 23       	and	r25, r25
    4976:	24 f4       	brge	.+8      	; 0x4980 <display_draw_pixel+0x4a>
    4978:	01 97       	sbiw	r24, 0x01	; 1
    497a:	88 6f       	ori	r24, 0xF8	; 248
    497c:	9f 6f       	ori	r25, 0xFF	; 255
    497e:	01 96       	adiw	r24, 0x01	; 1
    4980:	fb 01       	movw	r30, r22
    4982:	e8 1b       	sub	r30, r24
    4984:	f9 0b       	sbc	r31, r25
    4986:	cf 01       	movw	r24, r30
    4988:	28 30       	cpi	r18, 0x08	; 8
    498a:	31 05       	cpc	r19, r1
    498c:	1c f4       	brge	.+6      	; 0x4994 <display_draw_pixel+0x5e>
    498e:	22 0f       	add	r18, r18
    4990:	33 1f       	adc	r19, r19
    4992:	04 c0       	rjmp	.+8      	; 0x499c <display_draw_pixel+0x66>
    4994:	22 0f       	add	r18, r18
    4996:	33 1f       	adc	r19, r19
    4998:	2f 50       	subi	r18, 0x0F	; 15
    499a:	31 09       	sbc	r19, r1
    499c:	22 0f       	add	r18, r18
    499e:	33 1f       	adc	r19, r19
    49a0:	22 0f       	add	r18, r18
    49a2:	33 1f       	adc	r19, r19
    49a4:	22 0f       	add	r18, r18
    49a6:	33 1f       	adc	r19, r19
    49a8:	82 0f       	add	r24, r18
    49aa:	93 1f       	adc	r25, r19
    49ac:	44 23       	and	r20, r20
    49ae:	19 f0       	breq	.+6      	; 0x49b6 <display_draw_pixel+0x80>
    49b0:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <ht1632c_set_pixel>
    49b4:	08 95       	ret
    49b6:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <ht1632c_clr_pixel>
    49ba:	08 95       	ret

000049bc <display_draw_filled_rect>:
    49bc:	8f 92       	push	r8
    49be:	9f 92       	push	r9
    49c0:	af 92       	push	r10
    49c2:	bf 92       	push	r11
    49c4:	cf 92       	push	r12
    49c6:	df 92       	push	r13
    49c8:	ef 92       	push	r14
    49ca:	ff 92       	push	r15
    49cc:	0f 93       	push	r16
    49ce:	1f 93       	push	r17
    49d0:	cf 93       	push	r28
    49d2:	df 93       	push	r29
    49d4:	98 2e       	mov	r9, r24
    49d6:	c8 2f       	mov	r28, r24
    49d8:	d0 e0       	ldi	r29, 0x00	; 0
    49da:	5e 01       	movw	r10, r28
    49dc:	a4 0e       	add	r10, r20
    49de:	b1 1c       	adc	r11, r1
    49e0:	ca 15       	cp	r28, r10
    49e2:	db 05       	cpc	r29, r11
    49e4:	e4 f4       	brge	.+56     	; 0x4a1e <display_draw_filled_rect+0x62>
    49e6:	c6 2e       	mov	r12, r22
    49e8:	d1 2c       	mov	r13, r1
    49ea:	76 01       	movw	r14, r12
    49ec:	e2 0e       	add	r14, r18
    49ee:	f1 1c       	adc	r15, r1
    49f0:	86 2e       	mov	r8, r22
    49f2:	0f c0       	rjmp	.+30     	; 0x4a12 <display_draw_filled_rect+0x56>
    49f4:	40 2f       	mov	r20, r16
    49f6:	ce 01       	movw	r24, r28
    49f8:	9e df       	rcall	.-196    	; 0x4936 <display_draw_pixel>
    49fa:	1f 5f       	subi	r17, 0xFF	; 255
    49fc:	61 2f       	mov	r22, r17
    49fe:	70 e0       	ldi	r23, 0x00	; 0
    4a00:	6e 15       	cp	r22, r14
    4a02:	7f 05       	cpc	r23, r15
    4a04:	bc f3       	brlt	.-18     	; 0x49f4 <display_draw_filled_rect+0x38>
    4a06:	93 94       	inc	r9
    4a08:	c9 2d       	mov	r28, r9
    4a0a:	d0 e0       	ldi	r29, 0x00	; 0
    4a0c:	ca 15       	cp	r28, r10
    4a0e:	db 05       	cpc	r29, r11
    4a10:	34 f4       	brge	.+12     	; 0x4a1e <display_draw_filled_rect+0x62>
    4a12:	b6 01       	movw	r22, r12
    4a14:	ce 14       	cp	r12, r14
    4a16:	df 04       	cpc	r13, r15
    4a18:	b4 f7       	brge	.-20     	; 0x4a06 <display_draw_filled_rect+0x4a>
    4a1a:	18 2d       	mov	r17, r8
    4a1c:	eb cf       	rjmp	.-42     	; 0x49f4 <display_draw_filled_rect+0x38>
    4a1e:	df 91       	pop	r29
    4a20:	cf 91       	pop	r28
    4a22:	1f 91       	pop	r17
    4a24:	0f 91       	pop	r16
    4a26:	ff 90       	pop	r15
    4a28:	ef 90       	pop	r14
    4a2a:	df 90       	pop	r13
    4a2c:	cf 90       	pop	r12
    4a2e:	bf 90       	pop	r11
    4a30:	af 90       	pop	r10
    4a32:	9f 90       	pop	r9
    4a34:	8f 90       	pop	r8
    4a36:	08 95       	ret

00004a38 <display_show_loading_square>:
    4a38:	0f 93       	push	r16
    4a3a:	01 e0       	ldi	r16, 0x01	; 1
    4a3c:	21 e0       	ldi	r18, 0x01	; 1
    4a3e:	41 e0       	ldi	r20, 0x01	; 1
    4a40:	60 91 22 20 	lds	r22, 0x2022
    4a44:	80 91 21 20 	lds	r24, 0x2021
    4a48:	b9 df       	rcall	.-142    	; 0x49bc <display_draw_filled_rect>
    4a4a:	80 91 22 20 	lds	r24, 0x2022
    4a4e:	87 30       	cpi	r24, 0x07	; 7
    4a50:	40 f0       	brcs	.+16     	; 0x4a62 <display_show_loading_square+0x2a>
    4a52:	90 91 21 20 	lds	r25, 0x2021
    4a56:	99 30       	cpi	r25, 0x09	; 9
    4a58:	21 f4       	brne	.+8      	; 0x4a62 <display_show_loading_square+0x2a>
    4a5a:	81 50       	subi	r24, 0x01	; 1
    4a5c:	80 93 22 20 	sts	0x2022, r24
    4a60:	25 c0       	rjmp	.+74     	; 0x4aac <display_show_loading_square+0x74>
    4a62:	86 30       	cpi	r24, 0x06	; 6
    4a64:	41 f4       	brne	.+16     	; 0x4a76 <display_show_loading_square+0x3e>
    4a66:	90 91 21 20 	lds	r25, 0x2021
    4a6a:	97 30       	cpi	r25, 0x07	; 7
    4a6c:	30 f0       	brcs	.+12     	; 0x4a7a <display_show_loading_square+0x42>
    4a6e:	91 50       	subi	r25, 0x01	; 1
    4a70:	90 93 21 20 	sts	0x2021, r25
    4a74:	1b c0       	rjmp	.+54     	; 0x4aac <display_show_loading_square+0x74>
    4a76:	89 30       	cpi	r24, 0x09	; 9
    4a78:	40 f4       	brcc	.+16     	; 0x4a8a <display_show_loading_square+0x52>
    4a7a:	90 91 21 20 	lds	r25, 0x2021
    4a7e:	96 30       	cpi	r25, 0x06	; 6
    4a80:	21 f4       	brne	.+8      	; 0x4a8a <display_show_loading_square+0x52>
    4a82:	8f 5f       	subi	r24, 0xFF	; 255
    4a84:	80 93 22 20 	sts	0x2022, r24
    4a88:	11 c0       	rjmp	.+34     	; 0x4aac <display_show_loading_square+0x74>
    4a8a:	89 30       	cpi	r24, 0x09	; 9
    4a8c:	79 f4       	brne	.+30     	; 0x4aac <display_show_loading_square+0x74>
    4a8e:	80 91 21 20 	lds	r24, 0x2021
    4a92:	89 30       	cpi	r24, 0x09	; 9
    4a94:	58 f4       	brcc	.+22     	; 0x4aac <display_show_loading_square+0x74>
    4a96:	8f 5f       	subi	r24, 0xFF	; 255
    4a98:	80 93 21 20 	sts	0x2021, r24
    4a9c:	89 30       	cpi	r24, 0x09	; 9
    4a9e:	31 f4       	brne	.+12     	; 0x4aac <display_show_loading_square+0x74>
    4aa0:	90 91 20 20 	lds	r25, 0x2020
    4aa4:	81 e0       	ldi	r24, 0x01	; 1
    4aa6:	89 27       	eor	r24, r25
    4aa8:	80 93 20 20 	sts	0x2020, r24
    4aac:	00 e0       	ldi	r16, 0x00	; 0
    4aae:	21 e0       	ldi	r18, 0x01	; 1
    4ab0:	41 e0       	ldi	r20, 0x01	; 1
    4ab2:	60 91 22 20 	lds	r22, 0x2022
    4ab6:	80 91 21 20 	lds	r24, 0x2021
    4aba:	80 df       	rcall	.-256    	; 0x49bc <display_draw_filled_rect>
    4abc:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    4ac0:	0f 91       	pop	r16
    4ac2:	08 95       	ret

00004ac4 <display_draw_char_to_buffer>:
    4ac4:	70 e0       	ldi	r23, 0x00	; 0
    4ac6:	9b 01       	movw	r18, r22
    4ac8:	22 0f       	add	r18, r18
    4aca:	33 1f       	adc	r19, r19
    4acc:	22 0f       	add	r18, r18
    4ace:	33 1f       	adc	r19, r19
    4ad0:	62 0f       	add	r22, r18
    4ad2:	73 1f       	adc	r23, r19
    4ad4:	fb 01       	movw	r30, r22
    4ad6:	e4 5f       	subi	r30, 0xF4	; 244
    4ad8:	f6 4f       	sbci	r31, 0xF6	; 246
    4ada:	da 01       	movw	r26, r20
    4adc:	a8 0f       	add	r26, r24
    4ade:	b9 1f       	adc	r27, r25
    4ae0:	cb 01       	movw	r24, r22
    4ae2:	8f 5e       	subi	r24, 0xEF	; 239
    4ae4:	96 4f       	sbci	r25, 0xF6	; 246
    4ae6:	34 91       	lpm	r19, Z
    4ae8:	32 95       	swap	r19
    4aea:	43 2f       	mov	r20, r19
    4aec:	43 73       	andi	r20, 0x33	; 51
    4aee:	44 0f       	add	r20, r20
    4af0:	44 0f       	add	r20, r20
    4af2:	23 2f       	mov	r18, r19
    4af4:	2c 7c       	andi	r18, 0xCC	; 204
    4af6:	26 95       	lsr	r18
    4af8:	26 95       	lsr	r18
    4afa:	24 2b       	or	r18, r20
    4afc:	32 2f       	mov	r19, r18
    4afe:	35 75       	andi	r19, 0x55	; 85
    4b00:	33 0f       	add	r19, r19
    4b02:	2a 7a       	andi	r18, 0xAA	; 170
    4b04:	26 95       	lsr	r18
    4b06:	23 2b       	or	r18, r19
    4b08:	2d 93       	st	X+, r18
    4b0a:	31 96       	adiw	r30, 0x01	; 1
    4b0c:	e8 17       	cp	r30, r24
    4b0e:	f9 07       	cpc	r31, r25
    4b10:	51 f7       	brne	.-44     	; 0x4ae6 <display_draw_char_to_buffer+0x22>
    4b12:	08 95       	ret

00004b14 <display_draw_char>:
    4b14:	2f 92       	push	r2
    4b16:	3f 92       	push	r3
    4b18:	4f 92       	push	r4
    4b1a:	5f 92       	push	r5
    4b1c:	6f 92       	push	r6
    4b1e:	7f 92       	push	r7
    4b20:	8f 92       	push	r8
    4b22:	9f 92       	push	r9
    4b24:	af 92       	push	r10
    4b26:	bf 92       	push	r11
    4b28:	cf 92       	push	r12
    4b2a:	df 92       	push	r13
    4b2c:	ef 92       	push	r14
    4b2e:	ff 92       	push	r15
    4b30:	0f 93       	push	r16
    4b32:	1f 93       	push	r17
    4b34:	cf 93       	push	r28
    4b36:	df 93       	push	r29
    4b38:	00 d0       	rcall	.+0      	; 0x4b3a <display_draw_char+0x26>
    4b3a:	1f 92       	push	r1
    4b3c:	cd b7       	in	r28, 0x3d	; 61
    4b3e:	de b7       	in	r29, 0x3e	; 62
    4b40:	22 2e       	mov	r2, r18
    4b42:	40 2e       	mov	r4, r16
    4b44:	50 e0       	ldi	r21, 0x00	; 0
    4b46:	5a 01       	movw	r10, r20
    4b48:	aa 0c       	add	r10, r10
    4b4a:	bb 1c       	adc	r11, r11
    4b4c:	aa 0c       	add	r10, r10
    4b4e:	bb 1c       	adc	r11, r11
    4b50:	4a 0d       	add	r20, r10
    4b52:	5b 1d       	adc	r21, r11
    4b54:	9a 01       	movw	r18, r20
    4b56:	24 5f       	subi	r18, 0xF4	; 244
    4b58:	36 4f       	sbci	r19, 0xF6	; 246
    4b5a:	59 01       	movw	r10, r18
    4b5c:	c8 2e       	mov	r12, r24
    4b5e:	d9 2e       	mov	r13, r25
    4b60:	38 2e       	mov	r3, r24
    4b62:	36 01       	movw	r6, r12
    4b64:	35 e0       	ldi	r19, 0x05	; 5
    4b66:	63 0e       	add	r6, r19
    4b68:	71 1c       	adc	r7, r1
    4b6a:	80 2f       	mov	r24, r16
    4b6c:	88 0f       	add	r24, r24
    4b6e:	88 0f       	add	r24, r24
    4b70:	88 0f       	add	r24, r24
    4b72:	80 1b       	sub	r24, r16
    4b74:	4b 01       	movw	r8, r22
    4b76:	96 e0       	ldi	r25, 0x06	; 6
    4b78:	89 0e       	add	r8, r25
    4b7a:	91 1c       	adc	r9, r1
    4b7c:	7b 01       	movw	r14, r22
    4b7e:	e1 e0       	ldi	r30, 0x01	; 1
    4b80:	ee 1a       	sub	r14, r30
    4b82:	f1 08       	sbc	r15, r1
    4b84:	86 0f       	add	r24, r22
    4b86:	89 83       	std	Y+1, r24	; 0x01
    4b88:	f5 01       	movw	r30, r10
    4b8a:	14 91       	lpm	r17, Z
    4b8c:	8a 82       	std	Y+2, r8	; 0x02
    4b8e:	9b 82       	std	Y+3, r9	; 0x03
    4b90:	59 80       	ldd	r5, Y+1	; 0x01
    4b92:	10 ff       	sbrs	r17, 0
    4b94:	11 c0       	rjmp	.+34     	; 0x4bb8 <display_draw_char+0xa4>
    4b96:	f1 e0       	ldi	r31, 0x01	; 1
    4b98:	4f 12       	cpse	r4, r31
    4b9a:	08 c0       	rjmp	.+16     	; 0x4bac <display_draw_char+0x98>
    4b9c:	dd 20       	and	r13, r13
    4b9e:	64 f0       	brlt	.+24     	; 0x4bb8 <display_draw_char+0xa4>
    4ba0:	42 2d       	mov	r20, r2
    4ba2:	6a 81       	ldd	r22, Y+2	; 0x02
    4ba4:	7b 81       	ldd	r23, Y+3	; 0x03
    4ba6:	c6 01       	movw	r24, r12
    4ba8:	c6 de       	rcall	.-628    	; 0x4936 <display_draw_pixel>
    4baa:	06 c0       	rjmp	.+12     	; 0x4bb8 <display_draw_char+0xa4>
    4bac:	02 2d       	mov	r16, r2
    4bae:	24 2d       	mov	r18, r4
    4bb0:	44 2d       	mov	r20, r4
    4bb2:	65 2d       	mov	r22, r5
    4bb4:	83 2d       	mov	r24, r3
    4bb6:	02 df       	rcall	.-508    	; 0x49bc <display_draw_filled_rect>
    4bb8:	16 95       	lsr	r17
    4bba:	2a 81       	ldd	r18, Y+2	; 0x02
    4bbc:	3b 81       	ldd	r19, Y+3	; 0x03
    4bbe:	21 50       	subi	r18, 0x01	; 1
    4bc0:	31 09       	sbc	r19, r1
    4bc2:	2a 83       	std	Y+2, r18	; 0x02
    4bc4:	3b 83       	std	Y+3, r19	; 0x03
    4bc6:	54 18       	sub	r5, r4
    4bc8:	2e 15       	cp	r18, r14
    4bca:	3f 05       	cpc	r19, r15
    4bcc:	11 f7       	brne	.-60     	; 0x4b92 <display_draw_char+0x7e>
    4bce:	3f ef       	ldi	r19, 0xFF	; 255
    4bd0:	a3 1a       	sub	r10, r19
    4bd2:	b3 0a       	sbc	r11, r19
    4bd4:	8f ef       	ldi	r24, 0xFF	; 255
    4bd6:	c8 1a       	sub	r12, r24
    4bd8:	d8 0a       	sbc	r13, r24
    4bda:	34 0c       	add	r3, r4
    4bdc:	c6 14       	cp	r12, r6
    4bde:	d7 04       	cpc	r13, r7
    4be0:	99 f6       	brne	.-90     	; 0x4b88 <display_draw_char+0x74>
    4be2:	23 96       	adiw	r28, 0x03	; 3
    4be4:	cd bf       	out	0x3d, r28	; 61
    4be6:	de bf       	out	0x3e, r29	; 62
    4be8:	df 91       	pop	r29
    4bea:	cf 91       	pop	r28
    4bec:	1f 91       	pop	r17
    4bee:	0f 91       	pop	r16
    4bf0:	ff 90       	pop	r15
    4bf2:	ef 90       	pop	r14
    4bf4:	df 90       	pop	r13
    4bf6:	cf 90       	pop	r12
    4bf8:	bf 90       	pop	r11
    4bfa:	af 90       	pop	r10
    4bfc:	9f 90       	pop	r9
    4bfe:	8f 90       	pop	r8
    4c00:	7f 90       	pop	r7
    4c02:	6f 90       	pop	r6
    4c04:	5f 90       	pop	r5
    4c06:	4f 90       	pop	r4
    4c08:	3f 90       	pop	r3
    4c0a:	2f 90       	pop	r2
    4c0c:	08 95       	ret

00004c0e <display_draw_small_char_to_buffer>:
    4c0e:	cf 92       	push	r12
    4c10:	df 92       	push	r13
    4c12:	ef 92       	push	r14
    4c14:	ff 92       	push	r15
    4c16:	0f 93       	push	r16
    4c18:	1f 93       	push	r17
    4c1a:	cf 93       	push	r28
    4c1c:	df 93       	push	r29
    4c1e:	cd b7       	in	r28, 0x3d	; 61
    4c20:	de b7       	in	r29, 0x3e	; 62
    4c22:	25 97       	sbiw	r28, 0x05	; 5
    4c24:	cd bf       	out	0x3d, r28	; 61
    4c26:	de bf       	out	0x3e, r29	; 62
    4c28:	70 e0       	ldi	r23, 0x00	; 0
    4c2a:	fb 01       	movw	r30, r22
    4c2c:	ee 0f       	add	r30, r30
    4c2e:	ff 1f       	adc	r31, r31
    4c30:	6e 0f       	add	r22, r30
    4c32:	7f 1f       	adc	r23, r31
    4c34:	fb 01       	movw	r30, r22
    4c36:	ee 0f       	add	r30, r30
    4c38:	ff 1f       	adc	r31, r31
    4c3a:	e4 5f       	subi	r30, 0xF4	; 244
    4c3c:	fc 4f       	sbci	r31, 0xFC	; 252
    4c3e:	9e 01       	movw	r18, r28
    4c40:	2f 5f       	subi	r18, 0xFF	; 255
    4c42:	3f 4f       	sbci	r19, 0xFF	; 255
    4c44:	69 01       	movw	r12, r18
    4c46:	65 e0       	ldi	r22, 0x05	; 5
    4c48:	70 e0       	ldi	r23, 0x00	; 0
    4c4a:	03 96       	adiw	r24, 0x03	; 3
    4c4c:	48 0f       	add	r20, r24
    4c4e:	59 1f       	adc	r21, r25
    4c50:	84 91       	lpm	r24, Z
    4c52:	82 95       	swap	r24
    4c54:	8f 70       	andi	r24, 0x0F	; 15
    4c56:	d6 01       	movw	r26, r12
    4c58:	8d 93       	st	X+, r24
    4c5a:	6d 01       	movw	r12, r26
    4c5c:	da 01       	movw	r26, r20
    4c5e:	23 e0       	ldi	r18, 0x03	; 3
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	08 2f       	mov	r16, r24
    4c64:	01 70       	andi	r16, 0x01	; 1
    4c66:	10 e0       	ldi	r17, 0x00	; 0
    4c68:	78 01       	movw	r14, r16
    4c6a:	06 2e       	mov	r0, r22
    4c6c:	02 c0       	rjmp	.+4      	; 0x4c72 <display_draw_small_char_to_buffer+0x64>
    4c6e:	ee 0c       	add	r14, r14
    4c70:	ff 1c       	adc	r15, r15
    4c72:	0a 94       	dec	r0
    4c74:	e2 f7       	brpl	.-8      	; 0x4c6e <display_draw_small_char_to_buffer+0x60>
    4c76:	9e 91       	ld	r25, -X
    4c78:	e9 2a       	or	r14, r25
    4c7a:	ec 92       	st	X, r14
    4c7c:	86 95       	lsr	r24
    4c7e:	21 50       	subi	r18, 0x01	; 1
    4c80:	31 09       	sbc	r19, r1
    4c82:	21 15       	cp	r18, r1
    4c84:	31 05       	cpc	r19, r1
    4c86:	69 f7       	brne	.-38     	; 0x4c62 <display_draw_small_char_to_buffer+0x54>
    4c88:	61 50       	subi	r22, 0x01	; 1
    4c8a:	71 09       	sbc	r23, r1
    4c8c:	31 96       	adiw	r30, 0x01	; 1
    4c8e:	61 15       	cp	r22, r1
    4c90:	71 05       	cpc	r23, r1
    4c92:	f1 f6       	brne	.-68     	; 0x4c50 <display_draw_small_char_to_buffer+0x42>
    4c94:	25 96       	adiw	r28, 0x05	; 5
    4c96:	cd bf       	out	0x3d, r28	; 61
    4c98:	de bf       	out	0x3e, r29	; 62
    4c9a:	df 91       	pop	r29
    4c9c:	cf 91       	pop	r28
    4c9e:	1f 91       	pop	r17
    4ca0:	0f 91       	pop	r16
    4ca2:	ff 90       	pop	r15
    4ca4:	ef 90       	pop	r14
    4ca6:	df 90       	pop	r13
    4ca8:	cf 90       	pop	r12
    4caa:	08 95       	ret

00004cac <display_print_scrolling_text>:
    4cac:	9f 92       	push	r9
    4cae:	af 92       	push	r10
    4cb0:	bf 92       	push	r11
    4cb2:	cf 92       	push	r12
    4cb4:	df 92       	push	r13
    4cb6:	ef 92       	push	r14
    4cb8:	ff 92       	push	r15
    4cba:	0f 93       	push	r16
    4cbc:	1f 93       	push	r17
    4cbe:	cf 93       	push	r28
    4cc0:	df 93       	push	r29
    4cc2:	ec 01       	movw	r28, r24
    4cc4:	96 2e       	mov	r9, r22
    4cc6:	66 23       	and	r22, r22
    4cc8:	81 f0       	breq	.+32     	; 0x4cea <display_print_scrolling_text+0x3e>
    4cca:	fc 01       	movw	r30, r24
    4ccc:	01 90       	ld	r0, Z+
    4cce:	00 20       	and	r0, r0
    4cd0:	e9 f7       	brne	.-6      	; 0x4ccc <display_print_scrolling_text+0x20>
    4cd2:	31 97       	sbiw	r30, 0x01	; 1
    4cd4:	e8 1b       	sub	r30, r24
    4cd6:	f9 0b       	sbc	r31, r25
    4cd8:	5f 01       	movw	r10, r30
    4cda:	aa 0c       	add	r10, r10
    4cdc:	bb 1c       	adc	r11, r11
    4cde:	ea 0d       	add	r30, r10
    4ce0:	fb 1d       	adc	r31, r11
    4ce2:	5f 01       	movw	r10, r30
    4ce4:	aa 0c       	add	r10, r10
    4ce6:	bb 1c       	adc	r11, r11
    4ce8:	0c c0       	rjmp	.+24     	; 0x4d02 <display_print_scrolling_text+0x56>
    4cea:	fc 01       	movw	r30, r24
    4cec:	01 90       	ld	r0, Z+
    4cee:	00 20       	and	r0, r0
    4cf0:	e9 f7       	brne	.-6      	; 0x4cec <display_print_scrolling_text+0x40>
    4cf2:	31 97       	sbiw	r30, 0x01	; 1
    4cf4:	e8 1b       	sub	r30, r24
    4cf6:	f9 0b       	sbc	r31, r25
    4cf8:	5f 01       	movw	r10, r30
    4cfa:	aa 0c       	add	r10, r10
    4cfc:	bb 1c       	adc	r11, r11
    4cfe:	aa 0c       	add	r10, r10
    4d00:	bb 1c       	adc	r11, r11
    4d02:	61 e0       	ldi	r22, 0x01	; 1
    4d04:	70 e0       	ldi	r23, 0x00	; 0
    4d06:	c5 01       	movw	r24, r10
    4d08:	0e 94 1d 3b 	call	0x763a	; 0x763a <calloc>
    4d0c:	6c 01       	movw	r12, r24
    4d0e:	7e 01       	movw	r14, r28
    4d10:	00 e0       	ldi	r16, 0x00	; 0
    4d12:	10 e0       	ldi	r17, 0x00	; 0
    4d14:	c0 e0       	ldi	r28, 0x00	; 0
    4d16:	d0 e0       	ldi	r29, 0x00	; 0
    4d18:	0c c0       	rjmp	.+24     	; 0x4d32 <display_print_scrolling_text+0x86>
    4d1a:	99 20       	and	r9, r9
    4d1c:	21 f0       	breq	.+8      	; 0x4d26 <display_print_scrolling_text+0x7a>
    4d1e:	a6 01       	movw	r20, r12
    4d20:	ce 01       	movw	r24, r28
    4d22:	d0 de       	rcall	.-608    	; 0x4ac4 <display_draw_char_to_buffer>
    4d24:	03 c0       	rjmp	.+6      	; 0x4d2c <display_print_scrolling_text+0x80>
    4d26:	a6 01       	movw	r20, r12
    4d28:	c8 01       	movw	r24, r16
    4d2a:	71 df       	rcall	.-286    	; 0x4c0e <display_draw_small_char_to_buffer>
    4d2c:	26 96       	adiw	r28, 0x06	; 6
    4d2e:	0c 5f       	subi	r16, 0xFC	; 252
    4d30:	1f 4f       	sbci	r17, 0xFF	; 255
    4d32:	f7 01       	movw	r30, r14
    4d34:	61 91       	ld	r22, Z+
    4d36:	7f 01       	movw	r14, r30
    4d38:	61 11       	cpse	r22, r1
    4d3a:	ef cf       	rjmp	.-34     	; 0x4d1a <display_print_scrolling_text+0x6e>
    4d3c:	b5 01       	movw	r22, r10
    4d3e:	c6 01       	movw	r24, r12
    4d40:	0e 94 43 11 	call	0x2286	; 0x2286 <ht1632c_print_buffer>
    4d44:	c6 01       	movw	r24, r12
    4d46:	0e 94 cf 3b 	call	0x779e	; 0x779e <free>
    4d4a:	df 91       	pop	r29
    4d4c:	cf 91       	pop	r28
    4d4e:	1f 91       	pop	r17
    4d50:	0f 91       	pop	r16
    4d52:	ff 90       	pop	r15
    4d54:	ef 90       	pop	r14
    4d56:	df 90       	pop	r13
    4d58:	cf 90       	pop	r12
    4d5a:	bf 90       	pop	r11
    4d5c:	af 90       	pop	r10
    4d5e:	9f 90       	pop	r9
    4d60:	08 95       	ret

00004d62 <display_draw_small_char>:
    4d62:	2f 92       	push	r2
    4d64:	3f 92       	push	r3
    4d66:	4f 92       	push	r4
    4d68:	5f 92       	push	r5
    4d6a:	6f 92       	push	r6
    4d6c:	7f 92       	push	r7
    4d6e:	8f 92       	push	r8
    4d70:	9f 92       	push	r9
    4d72:	af 92       	push	r10
    4d74:	bf 92       	push	r11
    4d76:	cf 92       	push	r12
    4d78:	df 92       	push	r13
    4d7a:	ef 92       	push	r14
    4d7c:	ff 92       	push	r15
    4d7e:	0f 93       	push	r16
    4d80:	1f 93       	push	r17
    4d82:	cf 93       	push	r28
    4d84:	df 93       	push	r29
    4d86:	cd b7       	in	r28, 0x3d	; 61
    4d88:	de b7       	in	r29, 0x3e	; 62
    4d8a:	25 97       	sbiw	r28, 0x05	; 5
    4d8c:	cd bf       	out	0x3d, r28	; 61
    4d8e:	de bf       	out	0x3e, r29	; 62
    4d90:	22 2e       	mov	r2, r18
    4d92:	40 2e       	mov	r4, r16
    4d94:	50 e0       	ldi	r21, 0x00	; 0
    4d96:	3a 01       	movw	r6, r20
    4d98:	66 0c       	add	r6, r6
    4d9a:	77 1c       	adc	r7, r7
    4d9c:	46 0d       	add	r20, r6
    4d9e:	57 1d       	adc	r21, r7
    4da0:	44 0f       	add	r20, r20
    4da2:	55 1f       	adc	r21, r21
    4da4:	36 2e       	mov	r3, r22
    4da6:	20 2f       	mov	r18, r16
    4da8:	22 0f       	add	r18, r18
    4daa:	22 0f       	add	r18, r18
    4dac:	22 0f       	add	r18, r18
    4dae:	20 1b       	sub	r18, r16
    4db0:	c1 2c       	mov	r12, r1
    4db2:	d1 2c       	mov	r13, r1
    4db4:	fa 01       	movw	r30, r20
    4db6:	e4 5f       	subi	r30, 0xF4	; 244
    4db8:	fc 4f       	sbci	r31, 0xFC	; 252
    4dba:	3f 01       	movw	r6, r30
    4dbc:	4c 01       	movw	r8, r24
    4dbe:	f5 e0       	ldi	r31, 0x05	; 5
    4dc0:	8f 0e       	add	r8, r31
    4dc2:	91 1c       	adc	r9, r1
    4dc4:	7c 01       	movw	r14, r24
    4dc6:	33 e0       	ldi	r19, 0x03	; 3
    4dc8:	e3 1a       	sub	r14, r19
    4dca:	f1 08       	sbc	r15, r1
    4dcc:	28 0f       	add	r18, r24
    4dce:	29 83       	std	Y+1, r18	; 0x01
    4dd0:	cb 01       	movw	r24, r22
    4dd2:	03 96       	adiw	r24, 0x03	; 3
    4dd4:	8a 83       	std	Y+2, r24	; 0x02
    4dd6:	9b 83       	std	Y+3, r25	; 0x03
    4dd8:	f3 01       	movw	r30, r6
    4dda:	ec 0d       	add	r30, r12
    4ddc:	fd 1d       	adc	r31, r13
    4dde:	14 91       	lpm	r17, Z
    4de0:	8c 82       	std	Y+4, r8	; 0x04
    4de2:	9d 82       	std	Y+5, r9	; 0x05
    4de4:	59 80       	ldd	r5, Y+1	; 0x01
    4de6:	aa 80       	ldd	r10, Y+2	; 0x02
    4de8:	bb 80       	ldd	r11, Y+3	; 0x03
    4dea:	ac 18       	sub	r10, r12
    4dec:	bd 08       	sbc	r11, r13
    4dee:	10 ff       	sbrs	r17, 0
    4df0:	12 c0       	rjmp	.+36     	; 0x4e16 <display_draw_small_char+0xb4>
    4df2:	91 e0       	ldi	r25, 0x01	; 1
    4df4:	49 12       	cpse	r4, r25
    4df6:	09 c0       	rjmp	.+18     	; 0x4e0a <display_draw_small_char+0xa8>
    4df8:	ec 81       	ldd	r30, Y+4	; 0x04
    4dfa:	fd 81       	ldd	r31, Y+5	; 0x05
    4dfc:	ff 23       	and	r31, r31
    4dfe:	5c f0       	brlt	.+22     	; 0x4e16 <display_draw_small_char+0xb4>
    4e00:	42 2d       	mov	r20, r2
    4e02:	b5 01       	movw	r22, r10
    4e04:	cf 01       	movw	r24, r30
    4e06:	97 dd       	rcall	.-1234   	; 0x4936 <display_draw_pixel>
    4e08:	06 c0       	rjmp	.+12     	; 0x4e16 <display_draw_small_char+0xb4>
    4e0a:	02 2d       	mov	r16, r2
    4e0c:	24 2d       	mov	r18, r4
    4e0e:	44 2d       	mov	r20, r4
    4e10:	63 2d       	mov	r22, r3
    4e12:	85 2d       	mov	r24, r5
    4e14:	d3 dd       	rcall	.-1114   	; 0x49bc <display_draw_filled_rect>
    4e16:	16 95       	lsr	r17
    4e18:	8c 81       	ldd	r24, Y+4	; 0x04
    4e1a:	9d 81       	ldd	r25, Y+5	; 0x05
    4e1c:	01 97       	sbiw	r24, 0x01	; 1
    4e1e:	8c 83       	std	Y+4, r24	; 0x04
    4e20:	9d 83       	std	Y+5, r25	; 0x05
    4e22:	54 18       	sub	r5, r4
    4e24:	8e 15       	cp	r24, r14
    4e26:	9f 05       	cpc	r25, r15
    4e28:	11 f7       	brne	.-60     	; 0x4dee <display_draw_small_char+0x8c>
    4e2a:	9f ef       	ldi	r25, 0xFF	; 255
    4e2c:	c9 1a       	sub	r12, r25
    4e2e:	d9 0a       	sbc	r13, r25
    4e30:	34 18       	sub	r3, r4
    4e32:	e6 e0       	ldi	r30, 0x06	; 6
    4e34:	ce 16       	cp	r12, r30
    4e36:	d1 04       	cpc	r13, r1
    4e38:	79 f6       	brne	.-98     	; 0x4dd8 <display_draw_small_char+0x76>
    4e3a:	25 96       	adiw	r28, 0x05	; 5
    4e3c:	cd bf       	out	0x3d, r28	; 61
    4e3e:	de bf       	out	0x3e, r29	; 62
    4e40:	df 91       	pop	r29
    4e42:	cf 91       	pop	r28
    4e44:	1f 91       	pop	r17
    4e46:	0f 91       	pop	r16
    4e48:	ff 90       	pop	r15
    4e4a:	ef 90       	pop	r14
    4e4c:	df 90       	pop	r13
    4e4e:	cf 90       	pop	r12
    4e50:	bf 90       	pop	r11
    4e52:	af 90       	pop	r10
    4e54:	9f 90       	pop	r9
    4e56:	8f 90       	pop	r8
    4e58:	7f 90       	pop	r7
    4e5a:	6f 90       	pop	r6
    4e5c:	5f 90       	pop	r5
    4e5e:	4f 90       	pop	r4
    4e60:	3f 90       	pop	r3
    4e62:	2f 90       	pop	r2
    4e64:	08 95       	ret

00004e66 <display_draw_four_letter_word>:
    4e66:	0f 93       	push	r16
    4e68:	cf 93       	push	r28
    4e6a:	df 93       	push	r29
    4e6c:	ec 01       	movw	r28, r24
    4e6e:	01 e0       	ldi	r16, 0x01	; 1
    4e70:	21 e0       	ldi	r18, 0x01	; 1
    4e72:	30 e0       	ldi	r19, 0x00	; 0
    4e74:	48 81       	ld	r20, Y
    4e76:	67 e0       	ldi	r22, 0x07	; 7
    4e78:	70 e0       	ldi	r23, 0x00	; 0
    4e7a:	81 e0       	ldi	r24, 0x01	; 1
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	71 df       	rcall	.-286    	; 0x4d62 <display_draw_small_char>
    4e80:	21 e0       	ldi	r18, 0x01	; 1
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	49 81       	ldd	r20, Y+1	; 0x01
    4e86:	67 e0       	ldi	r22, 0x07	; 7
    4e88:	70 e0       	ldi	r23, 0x00	; 0
    4e8a:	85 e0       	ldi	r24, 0x05	; 5
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	69 df       	rcall	.-302    	; 0x4d62 <display_draw_small_char>
    4e90:	21 e0       	ldi	r18, 0x01	; 1
    4e92:	30 e0       	ldi	r19, 0x00	; 0
    4e94:	4a 81       	ldd	r20, Y+2	; 0x02
    4e96:	67 e0       	ldi	r22, 0x07	; 7
    4e98:	70 e0       	ldi	r23, 0x00	; 0
    4e9a:	89 e0       	ldi	r24, 0x09	; 9
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	61 df       	rcall	.-318    	; 0x4d62 <display_draw_small_char>
    4ea0:	21 e0       	ldi	r18, 0x01	; 1
    4ea2:	30 e0       	ldi	r19, 0x00	; 0
    4ea4:	4b 81       	ldd	r20, Y+3	; 0x03
    4ea6:	67 e0       	ldi	r22, 0x07	; 7
    4ea8:	70 e0       	ldi	r23, 0x00	; 0
    4eaa:	8d e0       	ldi	r24, 0x0D	; 13
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	59 df       	rcall	.-334    	; 0x4d62 <display_draw_small_char>
    4eb0:	df 91       	pop	r29
    4eb2:	cf 91       	pop	r28
    4eb4:	0f 91       	pop	r16
    4eb6:	08 95       	ret

00004eb8 <display_draw_three_letter_word>:
    4eb8:	0f 93       	push	r16
    4eba:	cf 93       	push	r28
    4ebc:	df 93       	push	r29
    4ebe:	ec 01       	movw	r28, r24
    4ec0:	01 e0       	ldi	r16, 0x01	; 1
    4ec2:	21 e0       	ldi	r18, 0x01	; 1
    4ec4:	30 e0       	ldi	r19, 0x00	; 0
    4ec6:	48 81       	ld	r20, Y
    4ec8:	67 e0       	ldi	r22, 0x07	; 7
    4eca:	70 e0       	ldi	r23, 0x00	; 0
    4ecc:	83 e0       	ldi	r24, 0x03	; 3
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	48 df       	rcall	.-368    	; 0x4d62 <display_draw_small_char>
    4ed2:	21 e0       	ldi	r18, 0x01	; 1
    4ed4:	30 e0       	ldi	r19, 0x00	; 0
    4ed6:	49 81       	ldd	r20, Y+1	; 0x01
    4ed8:	67 e0       	ldi	r22, 0x07	; 7
    4eda:	70 e0       	ldi	r23, 0x00	; 0
    4edc:	87 e0       	ldi	r24, 0x07	; 7
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	40 df       	rcall	.-384    	; 0x4d62 <display_draw_small_char>
    4ee2:	21 e0       	ldi	r18, 0x01	; 1
    4ee4:	30 e0       	ldi	r19, 0x00	; 0
    4ee6:	4a 81       	ldd	r20, Y+2	; 0x02
    4ee8:	67 e0       	ldi	r22, 0x07	; 7
    4eea:	70 e0       	ldi	r23, 0x00	; 0
    4eec:	8b e0       	ldi	r24, 0x0B	; 11
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	38 df       	rcall	.-400    	; 0x4d62 <display_draw_small_char>
    4ef2:	df 91       	pop	r29
    4ef4:	cf 91       	pop	r28
    4ef6:	0f 91       	pop	r16
    4ef8:	08 95       	ret

00004efa <display_slide_in_from_left>:

/*------------------------------SLIDE FUNCTIONS------------------------------*/

void display_slide_in_from_left(void) 
{
	ht1632c_slide_in_from_left();
    4efa:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <ht1632c_slide_in_from_left>
    4efe:	08 95       	ret

00004f00 <display_slide_in_from_right>:
}

void display_slide_in_from_right(void) 
{	
	ht1632c_slide_in_from_right();
    4f00:	0c 94 6a 0f 	jmp	0x1ed4	; 0x1ed4 <ht1632c_slide_in_from_right>
    4f04:	08 95       	ret

00004f06 <display_slide_in_from_bottom>:
}

void display_slide_in_from_bottom(void) 
{
	ht1632c_slide_in_from_bottom();
    4f06:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <ht1632c_slide_in_from_bottom>
    4f0a:	08 95       	ret

00004f0c <display_slide_in_from_top>:
}

void display_slide_in_from_top(void) 
{
	ht1632c_slide_in_from_top();
    4f0c:	0c 94 98 10 	jmp	0x2130	; 0x2130 <ht1632c_slide_in_from_top>
    4f10:	08 95       	ret

00004f12 <display_slide_out_to_right>:
}

void display_slide_out_to_right(void) 
{
    4f12:	cf 93       	push	r28
    4f14:	cf e1       	ldi	r28, 0x1F	; 31
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
		ht1632c_shift_right();
    4f16:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <ht1632c_shift_right>
    4f1a:	c1 50       	subi	r28, 0x01	; 1

void display_slide_out_to_right(void) 
{
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
    4f1c:	e1 f7       	brne	.-8      	; 0x4f16 <display_slide_out_to_right+0x4>
		ht1632c_shift_right();
	}
}
    4f1e:	cf 91       	pop	r28
    4f20:	08 95       	ret

00004f22 <display_slide_out_to_left>:

void display_slide_out_to_left(void) 
{
    4f22:	cf 93       	push	r28
    4f24:	cf e1       	ldi	r28, 0x1F	; 31
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
		ht1632c_shift_left();
    4f26:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ht1632c_shift_left>
    4f2a:	c1 50       	subi	r28, 0x01	; 1

void display_slide_out_to_left(void) 
{
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
    4f2c:	e1 f7       	brne	.-8      	; 0x4f26 <display_slide_out_to_left+0x4>
		ht1632c_shift_left();
	}
}
    4f2e:	cf 91       	pop	r28
    4f30:	08 95       	ret

00004f32 <display_slide_out_to_top>:

void display_slide_out_to_top(void) 
{
    4f32:	cf 93       	push	r28
    4f34:	cf e1       	ldi	r28, 0x1F	; 31
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
		ht1632c_shift_up();
    4f36:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <ht1632c_shift_up>
    4f3a:	c1 50       	subi	r28, 0x01	; 1

void display_slide_out_to_top(void) 
{
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
    4f3c:	e1 f7       	brne	.-8      	; 0x4f36 <display_slide_out_to_top+0x4>
		ht1632c_shift_up();
	}
}
    4f3e:	cf 91       	pop	r28
    4f40:	08 95       	ret

00004f42 <display_slide_out_to_bottom>:

void display_slide_out_to_bottom(void) 
{
    4f42:	cf 93       	push	r28
    4f44:	cf e1       	ldi	r28, 0x1F	; 31
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
		ht1632c_shift_down();
    4f46:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <ht1632c_shift_down>
    4f4a:	c1 50       	subi	r28, 0x01	; 1

void display_slide_out_to_bottom(void) 
{
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
    4f4c:	e1 f7       	brne	.-8      	; 0x4f46 <display_slide_out_to_bottom+0x4>
		ht1632c_shift_down();
	}
}
    4f4e:	cf 91       	pop	r28
    4f50:	08 95       	ret

00004f52 <display_alarm_increment_minute>:

/*------------------------------TIME FUNCTIONS------------------------------*/

void display_alarm_increment_minute(void) 
{
	if (env_var.alarm.minutes < 59) {
    4f52:	60 91 3a 2a 	lds	r22, 0x2A3A
    4f56:	6b 33       	cpi	r22, 0x3B	; 59
    4f58:	48 f4       	brcc	.+18     	; 0x4f6c <display_alarm_increment_minute+0x1a>
		rtc_update_display(5,++env_var.alarm.minutes);
    4f5a:	6f 5f       	subi	r22, 0xFF	; 255
    4f5c:	60 93 3a 2a 	sts	0x2A3A, r22
    4f60:	70 e0       	ldi	r23, 0x00	; 0
    4f62:	85 e0       	ldi	r24, 0x05	; 5
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
    4f6a:	09 c0       	rjmp	.+18     	; 0x4f7e <display_alarm_increment_minute+0x2c>
	} else {
		env_var.alarm.minutes = 0;
		rtc_update_display(5,++env_var.alarm.minutes);
    4f6c:	81 e0       	ldi	r24, 0x01	; 1
    4f6e:	80 93 3a 2a 	sts	0x2A3A, r24
    4f72:	61 e0       	ldi	r22, 0x01	; 1
    4f74:	70 e0       	ldi	r23, 0x00	; 0
    4f76:	85 e0       	ldi	r24, 0x05	; 5
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4f7e:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    4f82:	08 95       	ret

00004f84 <display_alarm_decrement_minute>:
	display_refresh_screen();
}

void display_alarm_decrement_minute(void) 
{
	if (env_var.alarm.minutes > 0) {
    4f84:	60 91 3a 2a 	lds	r22, 0x2A3A
    4f88:	66 23       	and	r22, r22
    4f8a:	49 f0       	breq	.+18     	; 0x4f9e <display_alarm_decrement_minute+0x1a>
		rtc_update_display(5,--env_var.alarm.minutes);
    4f8c:	61 50       	subi	r22, 0x01	; 1
    4f8e:	60 93 3a 2a 	sts	0x2A3A, r22
    4f92:	70 e0       	ldi	r23, 0x00	; 0
    4f94:	85 e0       	ldi	r24, 0x05	; 5
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
    4f9c:	09 c0       	rjmp	.+18     	; 0x4fb0 <display_alarm_decrement_minute+0x2c>
	} else {
		env_var.alarm.minutes = 59;
		rtc_update_display(5,--env_var.alarm.minutes);
    4f9e:	8a e3       	ldi	r24, 0x3A	; 58
    4fa0:	80 93 3a 2a 	sts	0x2A3A, r24
    4fa4:	6a e3       	ldi	r22, 0x3A	; 58
    4fa6:	70 e0       	ldi	r23, 0x00	; 0
    4fa8:	85 e0       	ldi	r24, 0x05	; 5
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4fb0:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    4fb4:	08 95       	ret

00004fb6 <display_alarm_increment_hour>:
	display_refresh_screen();
}

void display_alarm_increment_hour(void) 
{
	if (env_var.alarm.hours < 23) {
    4fb6:	60 91 3b 2a 	lds	r22, 0x2A3B
    4fba:	67 31       	cpi	r22, 0x17	; 23
    4fbc:	48 f4       	brcc	.+18     	; 0x4fd0 <display_alarm_increment_hour+0x1a>
		rtc_update_display(5,++env_var.alarm.hours);
    4fbe:	6f 5f       	subi	r22, 0xFF	; 255
    4fc0:	60 93 3b 2a 	sts	0x2A3B, r22
    4fc4:	70 e0       	ldi	r23, 0x00	; 0
    4fc6:	85 e0       	ldi	r24, 0x05	; 5
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
    4fce:	09 c0       	rjmp	.+18     	; 0x4fe2 <display_alarm_increment_hour+0x2c>
	} else {
		env_var.alarm.hours = 0;
		rtc_update_display(5,++env_var.alarm.hours);
    4fd0:	81 e0       	ldi	r24, 0x01	; 1
    4fd2:	80 93 3b 2a 	sts	0x2A3B, r24
    4fd6:	61 e0       	ldi	r22, 0x01	; 1
    4fd8:	70 e0       	ldi	r23, 0x00	; 0
    4fda:	85 e0       	ldi	r24, 0x05	; 5
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4fe2:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    4fe6:	08 95       	ret

00004fe8 <display_alarm_decrement_hour>:
	display_refresh_screen();
}

void display_alarm_decrement_hour(void) 
{
	if (env_var.alarm.hours > 0) {
    4fe8:	60 91 3b 2a 	lds	r22, 0x2A3B
    4fec:	66 23       	and	r22, r22
    4fee:	49 f0       	breq	.+18     	; 0x5002 <display_alarm_decrement_hour+0x1a>
		rtc_update_display(5,--env_var.alarm.hours);
    4ff0:	61 50       	subi	r22, 0x01	; 1
    4ff2:	60 93 3b 2a 	sts	0x2A3B, r22
    4ff6:	70 e0       	ldi	r23, 0x00	; 0
    4ff8:	85 e0       	ldi	r24, 0x05	; 5
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
    5000:	09 c0       	rjmp	.+18     	; 0x5014 <display_alarm_decrement_hour+0x2c>
	} else {
		env_var.alarm.hours = 23;
		rtc_update_display(5,--env_var.alarm.hours);
    5002:	86 e1       	ldi	r24, 0x16	; 22
    5004:	80 93 3b 2a 	sts	0x2A3B, r24
    5008:	66 e1       	ldi	r22, 0x16	; 22
    500a:	70 e0       	ldi	r23, 0x00	; 0
    500c:	85 e0       	ldi	r24, 0x05	; 5
    500e:	90 e0       	ldi	r25, 0x00	; 0
    5010:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    5014:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    5018:	08 95       	ret

0000501a <display_draw_and_increment_hour>:
	display_refresh_screen();
}

void display_draw_and_increment_hour(void) 
{
	if (env_var.time.hours < 23) {
    501a:	60 91 d0 29 	lds	r22, 0x29D0
    501e:	67 31       	cpi	r22, 0x17	; 23
    5020:	48 f4       	brcc	.+18     	; 0x5034 <display_draw_and_increment_hour+0x1a>
		rtc_update_display(5,++env_var.time.hours);
    5022:	6f 5f       	subi	r22, 0xFF	; 255
    5024:	60 93 d0 29 	sts	0x29D0, r22
    5028:	70 e0       	ldi	r23, 0x00	; 0
    502a:	85 e0       	ldi	r24, 0x05	; 5
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
    5032:	08 c0       	rjmp	.+16     	; 0x5044 <display_draw_and_increment_hour+0x2a>
	} else {
		env_var.time.hours = 0;
    5034:	10 92 d0 29 	sts	0x29D0, r1
		rtc_update_display(5,env_var.time.hours);
    5038:	60 e0       	ldi	r22, 0x00	; 0
    503a:	70 e0       	ldi	r23, 0x00	; 0
    503c:	85 e0       	ldi	r24, 0x05	; 5
    503e:	90 e0       	ldi	r25, 0x00	; 0
    5040:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    5044:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    5048:	08 95       	ret

0000504a <display_draw_and_decrement_hour>:
	display_refresh_screen();
}

void display_draw_and_decrement_hour(void) 
{
	if (env_var.time.hours > 0) {
    504a:	60 91 d0 29 	lds	r22, 0x29D0
    504e:	66 23       	and	r22, r22
    5050:	49 f0       	breq	.+18     	; 0x5064 <display_draw_and_decrement_hour+0x1a>
		rtc_update_display(5,--env_var.time.hours);
    5052:	61 50       	subi	r22, 0x01	; 1
    5054:	60 93 d0 29 	sts	0x29D0, r22
    5058:	70 e0       	ldi	r23, 0x00	; 0
    505a:	85 e0       	ldi	r24, 0x05	; 5
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
    5062:	09 c0       	rjmp	.+18     	; 0x5076 <display_draw_and_decrement_hour+0x2c>
	} else {
		env_var.time.hours = 23;
    5064:	87 e1       	ldi	r24, 0x17	; 23
    5066:	80 93 d0 29 	sts	0x29D0, r24
		rtc_update_display(5,env_var.time.hours);
    506a:	67 e1       	ldi	r22, 0x17	; 23
    506c:	70 e0       	ldi	r23, 0x00	; 0
    506e:	85 e0       	ldi	r24, 0x05	; 5
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    5076:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    507a:	08 95       	ret

0000507c <display_draw_and_increment_minute>:
	display_refresh_screen();
}

void display_draw_and_increment_minute(void) 
{
	if (env_var.time.minutes < 59) {
    507c:	60 91 cf 29 	lds	r22, 0x29CF
    5080:	6b 33       	cpi	r22, 0x3B	; 59
    5082:	48 f4       	brcc	.+18     	; 0x5096 <display_draw_and_increment_minute+0x1a>
		rtc_update_display(5,++env_var.time.minutes);
    5084:	6f 5f       	subi	r22, 0xFF	; 255
    5086:	60 93 cf 29 	sts	0x29CF, r22
    508a:	70 e0       	ldi	r23, 0x00	; 0
    508c:	85 e0       	ldi	r24, 0x05	; 5
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
    5094:	08 c0       	rjmp	.+16     	; 0x50a6 <display_draw_and_increment_minute+0x2a>
	} else {
		env_var.time.minutes = 0;
    5096:	10 92 cf 29 	sts	0x29CF, r1
		rtc_update_display(5,env_var.time.minutes);
    509a:	60 e0       	ldi	r22, 0x00	; 0
    509c:	70 e0       	ldi	r23, 0x00	; 0
    509e:	85 e0       	ldi	r24, 0x05	; 5
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    50a6:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    50aa:	08 95       	ret

000050ac <display_draw_and_decrement_minute>:
	display_refresh_screen();
}

void display_draw_and_decrement_minute(void) 
{
	if (env_var.time.minutes > 0) {
    50ac:	60 91 cf 29 	lds	r22, 0x29CF
    50b0:	66 23       	and	r22, r22
    50b2:	49 f0       	breq	.+18     	; 0x50c6 <display_draw_and_decrement_minute+0x1a>
		rtc_update_display(5,--env_var.time.minutes);
    50b4:	61 50       	subi	r22, 0x01	; 1
    50b6:	60 93 cf 29 	sts	0x29CF, r22
    50ba:	70 e0       	ldi	r23, 0x00	; 0
    50bc:	85 e0       	ldi	r24, 0x05	; 5
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
    50c4:	09 c0       	rjmp	.+18     	; 0x50d8 <display_draw_and_decrement_minute+0x2c>
	} else {
		env_var.time.minutes = 59;
    50c6:	8b e3       	ldi	r24, 0x3B	; 59
    50c8:	80 93 cf 29 	sts	0x29CF, r24
		rtc_update_display(5,env_var.time.minutes);
    50cc:	6b e3       	ldi	r22, 0x3B	; 59
    50ce:	70 e0       	ldi	r23, 0x00	; 0
    50d0:	85 e0       	ldi	r24, 0x05	; 5
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    50d8:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    50dc:	08 95       	ret

000050de <display_draw_and_increment_second>:
	display_refresh_screen();
}

void display_draw_and_increment_second(void) 
{
	if (env_var.time.seconds < 59) {
    50de:	60 91 ce 29 	lds	r22, 0x29CE
    50e2:	6b 33       	cpi	r22, 0x3B	; 59
    50e4:	48 f4       	brcc	.+18     	; 0x50f8 <display_draw_and_increment_second+0x1a>
		rtc_update_display(5,++env_var.time.seconds);
    50e6:	6f 5f       	subi	r22, 0xFF	; 255
    50e8:	60 93 ce 29 	sts	0x29CE, r22
    50ec:	70 e0       	ldi	r23, 0x00	; 0
    50ee:	85 e0       	ldi	r24, 0x05	; 5
    50f0:	90 e0       	ldi	r25, 0x00	; 0
    50f2:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
    50f6:	08 c0       	rjmp	.+16     	; 0x5108 <display_draw_and_increment_second+0x2a>
	} else {
		env_var.time.seconds = 0;
    50f8:	10 92 ce 29 	sts	0x29CE, r1
		rtc_update_display(5,env_var.time.seconds);
    50fc:	60 e0       	ldi	r22, 0x00	; 0
    50fe:	70 e0       	ldi	r23, 0x00	; 0
    5100:	85 e0       	ldi	r24, 0x05	; 5
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    5108:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    510c:	08 95       	ret

0000510e <display_draw_and_decrement_second>:
	display_refresh_screen();
}

void display_draw_and_decrement_second(void) 
{
	if (env_var.time.seconds > 0) {
    510e:	60 91 ce 29 	lds	r22, 0x29CE
    5112:	66 23       	and	r22, r22
    5114:	49 f0       	breq	.+18     	; 0x5128 <display_draw_and_decrement_second+0x1a>
		rtc_update_display(5,--env_var.time.seconds);
    5116:	61 50       	subi	r22, 0x01	; 1
    5118:	60 93 ce 29 	sts	0x29CE, r22
    511c:	70 e0       	ldi	r23, 0x00	; 0
    511e:	85 e0       	ldi	r24, 0x05	; 5
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
    5126:	09 c0       	rjmp	.+18     	; 0x513a <display_draw_and_decrement_second+0x2c>
	} else {
		env_var.time.seconds = 59;
    5128:	8b e3       	ldi	r24, 0x3B	; 59
    512a:	80 93 ce 29 	sts	0x29CE, r24
		rtc_update_display(5,env_var.time.seconds);
    512e:	6b e3       	ldi	r22, 0x3B	; 59
    5130:	70 e0       	ldi	r23, 0x00	; 0
    5132:	85 e0       	ldi	r24, 0x05	; 5
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    513a:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    513e:	08 95       	ret

00005140 <display_draw_and_increment_day>:
	display_refresh_screen();
}

void display_draw_and_increment_day(void) 
{
	if (env_var.time.weekday <= Sunday) {
    5140:	80 91 d2 29 	lds	r24, 0x29D2
    5144:	88 30       	cpi	r24, 0x08	; 8
    5146:	48 f4       	brcc	.+18     	; 0x515a <display_draw_and_increment_day+0x1a>
		display_draw_three_letter_word(time_get_day_name(env_var.time.weekday++));
    5148:	91 e0       	ldi	r25, 0x01	; 1
    514a:	98 0f       	add	r25, r24
    514c:	90 93 d2 29 	sts	0x29D2, r25
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <time_get_day_name>
    5156:	b0 de       	rcall	.-672    	; 0x4eb8 <display_draw_three_letter_word>
    5158:	08 c0       	rjmp	.+16     	; 0x516a <display_draw_and_increment_day+0x2a>
	} else {
		env_var.time.weekday = Monday;
    515a:	81 e0       	ldi	r24, 0x01	; 1
    515c:	80 93 d2 29 	sts	0x29D2, r24
		display_draw_three_letter_word(time_get_day_name(Monday));
    5160:	81 e0       	ldi	r24, 0x01	; 1
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <time_get_day_name>
    5168:	a7 de       	rcall	.-690    	; 0x4eb8 <display_draw_three_letter_word>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    516a:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    516e:	08 95       	ret

00005170 <display_draw_and_decrement_day>:
	display_refresh_screen();
}

void display_draw_and_decrement_day(void) 
{
	if (env_var.time.weekday > Monday) {
    5170:	80 91 d2 29 	lds	r24, 0x29D2
    5174:	82 30       	cpi	r24, 0x02	; 2
    5176:	48 f0       	brcs	.+18     	; 0x518a <display_draw_and_decrement_day+0x1a>
		display_draw_three_letter_word(time_get_day_name(env_var.time.weekday--));
    5178:	9f ef       	ldi	r25, 0xFF	; 255
    517a:	98 0f       	add	r25, r24
    517c:	90 93 d2 29 	sts	0x29D2, r25
    5180:	90 e0       	ldi	r25, 0x00	; 0
    5182:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <time_get_day_name>
    5186:	98 de       	rcall	.-720    	; 0x4eb8 <display_draw_three_letter_word>
    5188:	08 c0       	rjmp	.+16     	; 0x519a <display_draw_and_decrement_day+0x2a>
	} else {
		env_var.time.weekday = Sunday;
    518a:	87 e0       	ldi	r24, 0x07	; 7
    518c:	80 93 d2 29 	sts	0x29D2, r24
		display_draw_three_letter_word(time_get_day_name(Sunday));
    5190:	87 e0       	ldi	r24, 0x07	; 7
    5192:	90 e0       	ldi	r25, 0x00	; 0
    5194:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <time_get_day_name>
    5198:	8f de       	rcall	.-738    	; 0x4eb8 <display_draw_three_letter_word>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    519a:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    519e:	08 95       	ret

000051a0 <display_draw_and_increment_month>:
	display_refresh_screen();
}

void display_draw_and_increment_month(void) 
{
	if (env_var.time.month <= December) {
    51a0:	80 91 d4 29 	lds	r24, 0x29D4
    51a4:	8d 30       	cpi	r24, 0x0D	; 13
    51a6:	48 f4       	brcc	.+18     	; 0x51ba <display_draw_and_increment_month+0x1a>
		display_draw_three_letter_word(time_get_month_name(env_var.time.month++));
    51a8:	91 e0       	ldi	r25, 0x01	; 1
    51aa:	98 0f       	add	r25, r24
    51ac:	90 93 d4 29 	sts	0x29D4, r25
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	0e 94 1f 38 	call	0x703e	; 0x703e <time_get_month_name>
    51b6:	80 de       	rcall	.-768    	; 0x4eb8 <display_draw_three_letter_word>
    51b8:	08 c0       	rjmp	.+16     	; 0x51ca <display_draw_and_increment_month+0x2a>
	} else {
		env_var.time.month = January;
    51ba:	81 e0       	ldi	r24, 0x01	; 1
    51bc:	80 93 d4 29 	sts	0x29D4, r24
		display_draw_three_letter_word(time_get_month_name(January));
    51c0:	81 e0       	ldi	r24, 0x01	; 1
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	0e 94 1f 38 	call	0x703e	; 0x703e <time_get_month_name>
    51c8:	77 de       	rcall	.-786    	; 0x4eb8 <display_draw_three_letter_word>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    51ca:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    51ce:	08 95       	ret

000051d0 <display_draw_and_decrement_month>:
	display_refresh_screen();
}

void display_draw_and_decrement_month(void) 
{
	if (env_var.time.month > January) {
    51d0:	80 91 d4 29 	lds	r24, 0x29D4
    51d4:	82 30       	cpi	r24, 0x02	; 2
    51d6:	48 f0       	brcs	.+18     	; 0x51ea <display_draw_and_decrement_month+0x1a>
		display_draw_three_letter_word(time_get_month_name(env_var.time.month--));
    51d8:	9f ef       	ldi	r25, 0xFF	; 255
    51da:	98 0f       	add	r25, r24
    51dc:	90 93 d4 29 	sts	0x29D4, r25
    51e0:	90 e0       	ldi	r25, 0x00	; 0
    51e2:	0e 94 1f 38 	call	0x703e	; 0x703e <time_get_month_name>
    51e6:	68 de       	rcall	.-816    	; 0x4eb8 <display_draw_three_letter_word>
    51e8:	08 c0       	rjmp	.+16     	; 0x51fa <display_draw_and_decrement_month+0x2a>
	} else {
		env_var.time.month = December;
    51ea:	8c e0       	ldi	r24, 0x0C	; 12
    51ec:	80 93 d4 29 	sts	0x29D4, r24
		display_draw_three_letter_word(time_get_month_name(December));
    51f0:	8c e0       	ldi	r24, 0x0C	; 12
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	0e 94 1f 38 	call	0x703e	; 0x703e <time_get_month_name>
    51f8:	5f de       	rcall	.-834    	; 0x4eb8 <display_draw_three_letter_word>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    51fa:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
    51fe:	08 95       	ret

00005200 <display_draw_and_increment_year>:
	}
	display_refresh_screen();
}

void display_draw_and_increment_year(void) 
{
    5200:	8f 92       	push	r8
    5202:	9f 92       	push	r9
    5204:	af 92       	push	r10
    5206:	bf 92       	push	r11
    5208:	cf 92       	push	r12
    520a:	df 92       	push	r13
    520c:	ef 92       	push	r14
    520e:	ff 92       	push	r15
    5210:	0f 93       	push	r16
    5212:	1f 93       	push	r17
    5214:	cf 93       	push	r28
    5216:	df 93       	push	r29
	char *year;
	itoa_simple(year,env_var.time.year++);
    5218:	e5 ed       	ldi	r30, 0xD5	; 213
    521a:	f9 e2       	ldi	r31, 0x29	; 41
    521c:	60 81       	ld	r22, Z
    521e:	71 81       	ldd	r23, Z+1	; 0x01
    5220:	cb 01       	movw	r24, r22
    5222:	01 96       	adiw	r24, 0x01	; 1
    5224:	80 83       	st	Z, r24
    5226:	91 83       	std	Z+1, r25	; 0x01
 * about 2 times faster than sprintf (in range [INT_MIN/10 - INT_MAX/10])
 */
static inline void itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    5228:	80 e0       	ldi	r24, 0x00	; 0
    522a:	90 e0       	ldi	r25, 0x00	; 0
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	20 e0       	ldi	r18, 0x00	; 0
    5230:	a3 2e       	mov	r10, r19
    5232:	b2 2e       	mov	r11, r18
    5234:	03 2f       	mov	r16, r19
    5236:	12 2f       	mov	r17, r18
		*s++ = '-';
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    5238:	0f 2e       	mov	r0, r31
    523a:	fa e0       	ldi	r31, 0x0A	; 10
    523c:	cf 2e       	mov	r12, r31
    523e:	d1 2c       	mov	r13, r1
    5240:	e1 2c       	mov	r14, r1
    5242:	f1 2c       	mov	r15, r1
    5244:	f0 2d       	mov	r31, r0
    5246:	e8 01       	movw	r28, r16
    5248:	21 96       	adiw	r28, 0x01	; 1
    524a:	a7 01       	movw	r20, r14
    524c:	96 01       	movw	r18, r12
    524e:	0e 94 c8 3a 	call	0x7590	; 0x7590 <__udivmodsi4>
    5252:	60 5d       	subi	r22, 0xD0	; 208
    5254:	f8 01       	movw	r30, r16
    5256:	60 83       	st	Z, r22
	} while ((n /= 10) > 0);     /* delete it */
    5258:	62 2f       	mov	r22, r18
    525a:	73 2f       	mov	r23, r19
    525c:	84 2f       	mov	r24, r20
    525e:	95 2f       	mov	r25, r21
    5260:	61 15       	cp	r22, r1
    5262:	71 05       	cpc	r23, r1
    5264:	81 05       	cpc	r24, r1
    5266:	91 05       	cpc	r25, r1
    5268:	11 f0       	breq	.+4      	; 0x526e <display_draw_and_increment_year+0x6e>
    526a:	8e 01       	movw	r16, r28
    526c:	ec cf       	rjmp	.-40     	; 0x5246 <display_draw_and_increment_year+0x46>

	reverse_string( rev, s - rev);
    526e:	ac 2f       	mov	r26, r28
    5270:	bd 2f       	mov	r27, r29
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    5272:	cd 01       	movw	r24, r26
    5274:	01 97       	sbiw	r24, 0x01	; 1
    5276:	18 16       	cp	r1, r24
    5278:	19 06       	cpc	r1, r25
    527a:	74 f4       	brge	.+28     	; 0x5298 <display_draw_and_increment_year+0x98>
    527c:	ea 2d       	mov	r30, r10
    527e:	fb 2d       	mov	r31, r11
    5280:	20 e0       	ldi	r18, 0x00	; 0
    5282:	30 e0       	ldi	r19, 0x00	; 0
		c = s[i];
    5284:	40 81       	ld	r20, Z
		s[i] = s[j];
    5286:	5e 91       	ld	r21, -X
    5288:	51 93       	st	Z+, r21
		s[j] = c;
    528a:	4c 93       	st	X, r20
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    528c:	2f 5f       	subi	r18, 0xFF	; 255
    528e:	3f 4f       	sbci	r19, 0xFF	; 255
    5290:	01 97       	sbiw	r24, 0x01	; 1
    5292:	28 17       	cp	r18, r24
    5294:	39 07       	cpc	r19, r25
    5296:	b4 f3       	brlt	.-20     	; 0x5284 <display_draw_and_increment_year+0x84>
	display_draw_four_letter_word(year);
    5298:	80 e0       	ldi	r24, 0x00	; 0
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	e4 dd       	rcall	.-1080   	; 0x4e66 <display_draw_four_letter_word>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    529e:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
{
	char *year;
	itoa_simple(year,env_var.time.year++);
	display_draw_four_letter_word(year);
	display_refresh_screen();
}
    52a2:	df 91       	pop	r29
    52a4:	cf 91       	pop	r28
    52a6:	1f 91       	pop	r17
    52a8:	0f 91       	pop	r16
    52aa:	ff 90       	pop	r15
    52ac:	ef 90       	pop	r14
    52ae:	df 90       	pop	r13
    52b0:	cf 90       	pop	r12
    52b2:	bf 90       	pop	r11
    52b4:	af 90       	pop	r10
    52b6:	9f 90       	pop	r9
    52b8:	8f 90       	pop	r8
    52ba:	08 95       	ret

000052bc <display_draw_and_decrement_year>:

void display_draw_and_decrement_year(void) 
{
    52bc:	8f 92       	push	r8
    52be:	9f 92       	push	r9
    52c0:	af 92       	push	r10
    52c2:	bf 92       	push	r11
    52c4:	cf 92       	push	r12
    52c6:	df 92       	push	r13
    52c8:	ef 92       	push	r14
    52ca:	ff 92       	push	r15
    52cc:	0f 93       	push	r16
    52ce:	1f 93       	push	r17
    52d0:	cf 93       	push	r28
    52d2:	df 93       	push	r29
	char *year;
	itoa_simple(year,env_var.time.year--);
    52d4:	e5 ed       	ldi	r30, 0xD5	; 213
    52d6:	f9 e2       	ldi	r31, 0x29	; 41
    52d8:	60 81       	ld	r22, Z
    52da:	71 81       	ldd	r23, Z+1	; 0x01
    52dc:	cb 01       	movw	r24, r22
    52de:	01 97       	sbiw	r24, 0x01	; 1
    52e0:	80 83       	st	Z, r24
    52e2:	91 83       	std	Z+1, r25	; 0x01
 * about 2 times faster than sprintf (in range [INT_MIN/10 - INT_MAX/10])
 */
static inline void itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    52e4:	80 e0       	ldi	r24, 0x00	; 0
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	20 e0       	ldi	r18, 0x00	; 0
    52ec:	a3 2e       	mov	r10, r19
    52ee:	b2 2e       	mov	r11, r18
    52f0:	03 2f       	mov	r16, r19
    52f2:	12 2f       	mov	r17, r18
		*s++ = '-';
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    52f4:	0f 2e       	mov	r0, r31
    52f6:	fa e0       	ldi	r31, 0x0A	; 10
    52f8:	cf 2e       	mov	r12, r31
    52fa:	d1 2c       	mov	r13, r1
    52fc:	e1 2c       	mov	r14, r1
    52fe:	f1 2c       	mov	r15, r1
    5300:	f0 2d       	mov	r31, r0
    5302:	e8 01       	movw	r28, r16
    5304:	21 96       	adiw	r28, 0x01	; 1
    5306:	a7 01       	movw	r20, r14
    5308:	96 01       	movw	r18, r12
    530a:	0e 94 c8 3a 	call	0x7590	; 0x7590 <__udivmodsi4>
    530e:	60 5d       	subi	r22, 0xD0	; 208
    5310:	f8 01       	movw	r30, r16
    5312:	60 83       	st	Z, r22
	} while ((n /= 10) > 0);     /* delete it */
    5314:	62 2f       	mov	r22, r18
    5316:	73 2f       	mov	r23, r19
    5318:	84 2f       	mov	r24, r20
    531a:	95 2f       	mov	r25, r21
    531c:	61 15       	cp	r22, r1
    531e:	71 05       	cpc	r23, r1
    5320:	81 05       	cpc	r24, r1
    5322:	91 05       	cpc	r25, r1
    5324:	11 f0       	breq	.+4      	; 0x532a <display_draw_and_decrement_year+0x6e>
    5326:	8e 01       	movw	r16, r28
    5328:	ec cf       	rjmp	.-40     	; 0x5302 <display_draw_and_decrement_year+0x46>

	reverse_string( rev, s - rev);
    532a:	ac 2f       	mov	r26, r28
    532c:	bd 2f       	mov	r27, r29
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    532e:	cd 01       	movw	r24, r26
    5330:	01 97       	sbiw	r24, 0x01	; 1
    5332:	18 16       	cp	r1, r24
    5334:	19 06       	cpc	r1, r25
    5336:	74 f4       	brge	.+28     	; 0x5354 <display_draw_and_decrement_year+0x98>
    5338:	ea 2d       	mov	r30, r10
    533a:	fb 2d       	mov	r31, r11
    533c:	20 e0       	ldi	r18, 0x00	; 0
    533e:	30 e0       	ldi	r19, 0x00	; 0
		c = s[i];
    5340:	40 81       	ld	r20, Z
		s[i] = s[j];
    5342:	5e 91       	ld	r21, -X
    5344:	51 93       	st	Z+, r21
		s[j] = c;
    5346:	4c 93       	st	X, r20
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    5348:	2f 5f       	subi	r18, 0xFF	; 255
    534a:	3f 4f       	sbci	r19, 0xFF	; 255
    534c:	01 97       	sbiw	r24, 0x01	; 1
    534e:	28 17       	cp	r18, r24
    5350:	39 07       	cpc	r19, r25
    5352:	b4 f3       	brlt	.-20     	; 0x5340 <display_draw_and_decrement_year+0x84>
	display_draw_four_letter_word(year);
    5354:	80 e0       	ldi	r24, 0x00	; 0
    5356:	90 e0       	ldi	r25, 0x00	; 0
    5358:	86 dd       	rcall	.-1268   	; 0x4e66 <display_draw_four_letter_word>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    535a:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <ht1632c_refresh_screen>
{
	char *year;
	itoa_simple(year,env_var.time.year--);
	display_draw_four_letter_word(year);
	display_refresh_screen();
}
    535e:	df 91       	pop	r29
    5360:	cf 91       	pop	r28
    5362:	1f 91       	pop	r17
    5364:	0f 91       	pop	r16
    5366:	ff 90       	pop	r15
    5368:	ef 90       	pop	r14
    536a:	df 90       	pop	r13
    536c:	cf 90       	pop	r12
    536e:	bf 90       	pop	r11
    5370:	af 90       	pop	r10
    5372:	9f 90       	pop	r9
    5374:	8f 90       	pop	r8
    5376:	08 95       	ret

00005378 <start_loading>:
static volatile bool GET_request = false;

#define TOKEN_BUFFER_SIZE 30

void start_loading(void) {
	display_clear_screen();
    5378:	a2 da       	rcall	.-2748   	; 0x48be <display_clear_screen>
	
	TCC0.CNT = 0;
    537a:	e0 e0       	ldi	r30, 0x00	; 0
    537c:	f8 e0       	ldi	r31, 0x08	; 8
    537e:	10 a2       	std	Z+32, r1	; 0x20
    5380:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 3125;
    5382:	85 e3       	ldi	r24, 0x35	; 53
    5384:	9c e0       	ldi	r25, 0x0C	; 12
    5386:	86 a3       	std	Z+38, r24	; 0x26
    5388:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;
    538a:	27 e0       	ldi	r18, 0x07	; 7
    538c:	20 83       	st	Z, r18
	
	TCC0.CCA = 3125;
    538e:	80 a7       	std	Z+40, r24	; 0x28
    5390:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.INTCTRLB |= TC_CCAINTLVL_LO_gc;
    5392:	87 81       	ldd	r24, Z+7	; 0x07
    5394:	81 60       	ori	r24, 0x01	; 1
    5396:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLB |= TC0_CCAEN_bm;
    5398:	81 81       	ldd	r24, Z+1	; 0x01
    539a:	80 61       	ori	r24, 0x10	; 16
    539c:	81 83       	std	Z+1, r24	; 0x01
    539e:	08 95       	ret

000053a0 <stop_loading>:
}

void stop_loading(void) {
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
    53a0:	10 92 00 08 	sts	0x0800, r1
	display_clear_screen();
    53a4:	8c ca       	rjmp	.-2792   	; 0x48be <display_clear_screen>
    53a6:	08 95       	ret

000053a8 <get_internet_variables>:
}

esp8266_status_t get_internet_variables(bool get_time, bool get_temperature) {
    53a8:	cf 92       	push	r12
    53aa:	df 92       	push	r13
    53ac:	ef 92       	push	r14
    53ae:	ff 92       	push	r15
    53b0:	0f 93       	push	r16
    53b2:	1f 93       	push	r17
    53b4:	cf 93       	push	r28
    53b6:	df 93       	push	r29
    53b8:	cd b7       	in	r28, 0x3d	; 61
    53ba:	de b7       	in	r29, 0x3e	; 62
    53bc:	c9 5d       	subi	r28, 0xD9	; 217
    53be:	d1 40       	sbci	r29, 0x01	; 1
    53c0:	cd bf       	out	0x3d, r28	; 61
    53c2:	de bf       	out	0x3e, r29	; 62
    53c4:	c8 2e       	mov	r12, r24
    53c6:	d6 2e       	mov	r13, r22
	jsmnerr_t r;
	jsmntok_t tokens[25];
	
	esp8266_status_t status;
	
	esp8266_on();
    53c8:	0e 94 43 08 	call	0x1086	; 0x1086 <esp8266_on>
	
	status = esp8266_setup();
    53cc:	0e 94 57 08 	call	0x10ae	; 0x10ae <esp8266_setup>
	if (status != ESP8266_SUCCESS) {
    53d0:	81 30       	cpi	r24, 0x01	; 1
    53d2:	09 f0       	breq	.+2      	; 0x53d6 <get_internet_variables+0x2e>
    53d4:	6d c1       	rjmp	.+730    	; 0x56b0 <get_internet_variables+0x308>
		return status;
	}
	
	status = esp8266_join_ap(env_var.wifi_ssid,env_var.wifi_pswd);
    53d6:	61 e1       	ldi	r22, 0x11	; 17
    53d8:	7a e2       	ldi	r23, 0x2A	; 42
    53da:	85 e2       	ldi	r24, 0x25	; 37
    53dc:	9a e2       	ldi	r25, 0x2A	; 42
    53de:	0e 94 a9 08 	call	0x1152	; 0x1152 <esp8266_join_ap>
    53e2:	18 2f       	mov	r17, r24
	if (status != ESP8266_SUCCESS) {
    53e4:	81 30       	cpi	r24, 0x01	; 1
    53e6:	41 f0       	breq	.+16     	; 0x53f8 <get_internet_variables+0x50>
		stop_loading();
    53e8:	db df       	rcall	.-74     	; 0x53a0 <stop_loading>
#ifdef SHOW_MANUAL
		display_print_scrolling_text("COULD NOT JOIN AP",false);
    53ea:	60 e0       	ldi	r22, 0x00	; 0
    53ec:	70 e0       	ldi	r23, 0x00	; 0
    53ee:	84 ee       	ldi	r24, 0xE4	; 228
    53f0:	93 e2       	ldi	r25, 0x23	; 35
    53f2:	5c dc       	rcall	.-1864   	; 0x4cac <display_print_scrolling_text>
#endif
		return status;
    53f4:	81 2f       	mov	r24, r17
    53f6:	5c c1       	rjmp	.+696    	; 0x56b0 <get_internet_variables+0x308>
	}
	status = esp8266_get_json(WEATHER_IP,WEATHER_ADDR,json, 250);
    53f8:	2a ef       	ldi	r18, 0xFA	; 250
    53fa:	ae 01       	movw	r20, r28
    53fc:	4f 5f       	subi	r20, 0xFF	; 255
    53fe:	5f 4f       	sbci	r21, 0xFF	; 255
    5400:	66 e1       	ldi	r22, 0x16	; 22
    5402:	76 e2       	ldi	r23, 0x26	; 38
    5404:	86 e6       	ldi	r24, 0x66	; 102
    5406:	96 e2       	ldi	r25, 0x26	; 38
    5408:	0e 94 14 09 	call	0x1228	; 0x1228 <esp8266_get_json>
    540c:	18 2f       	mov	r17, r24
	if (status != ESP8266_SUCCESS) {
    540e:	81 30       	cpi	r24, 0x01	; 1
    5410:	41 f0       	breq	.+16     	; 0x5422 <get_internet_variables+0x7a>
		stop_loading();
    5412:	c6 df       	rcall	.-116    	; 0x53a0 <stop_loading>
#ifdef SHOW_MANUAL
		display_print_scrolling_text("COULD NOT CONTACT SERVER",false);
    5414:	60 e0       	ldi	r22, 0x00	; 0
    5416:	70 e0       	ldi	r23, 0x00	; 0
    5418:	89 e7       	ldi	r24, 0x79	; 121
    541a:	96 e2       	ldi	r25, 0x26	; 38
    541c:	47 dc       	rcall	.-1906   	; 0x4cac <display_print_scrolling_text>
#endif
		return status;
    541e:	81 2f       	mov	r24, r17
    5420:	47 c1       	rjmp	.+654    	; 0x56b0 <get_internet_variables+0x308>
	}
	
	esp8266_off();
    5422:	0e 94 52 08 	call	0x10a4	; 0x10a4 <esp8266_off>
#ifdef DEBUG_ON
	puts(json);
    5426:	9e 01       	movw	r18, r28
    5428:	2f 5f       	subi	r18, 0xFF	; 255
    542a:	3f 4f       	sbci	r19, 0xFF	; 255
    542c:	79 01       	movw	r14, r18
    542e:	c9 01       	movw	r24, r18
    5430:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <puts>
#endif

	//Parse JSON
	jsmn_init(&p);
    5434:	ce 01       	movw	r24, r28
    5436:	85 50       	subi	r24, 0x05	; 5
    5438:	9f 4f       	sbci	r25, 0xFF	; 255
    543a:	28 d9       	rcall	.-3504   	; 0x468c <jsmn_init>
	r = jsmn_parse(&p,json,strlen(json),tokens,sizeof(tokens));
    543c:	f7 01       	movw	r30, r14
    543e:	01 90       	ld	r0, Z+
    5440:	00 20       	and	r0, r0
    5442:	e9 f7       	brne	.-6      	; 0x543e <get_internet_variables+0x96>
    5444:	31 97       	sbiw	r30, 0x01	; 1
    5446:	af 01       	movw	r20, r30
    5448:	4e 19       	sub	r20, r14
    544a:	5f 09       	sbc	r21, r15
    544c:	0f ea       	ldi	r16, 0xAF	; 175
    544e:	10 e0       	ldi	r17, 0x00	; 0
    5450:	9e 01       	movw	r18, r28
    5452:	2f 5f       	subi	r18, 0xFF	; 255
    5454:	3e 4f       	sbci	r19, 0xFE	; 254
    5456:	b7 01       	movw	r22, r14
    5458:	ce 01       	movw	r24, r28
    545a:	85 50       	subi	r24, 0x05	; 5
    545c:	9f 4f       	sbci	r25, 0xFF	; 255
    545e:	0e 94 b2 1f 	call	0x3f64	; 0x3f64 <jsmn_parse>

	char token_buffer[TOKEN_BUFFER_SIZE];
	if (get_time)
    5462:	cc 20       	and	r12, r12
    5464:	09 f4       	brne	.+2      	; 0x5468 <get_internet_variables+0xc0>
    5466:	bc c0       	rjmp	.+376    	; 0x55e0 <get_internet_variables+0x238>
	{
		int year, month, day, hour, minute, second;
	
		json_get_token(tokens,json,token_buffer,TOKEN_BUFFER_SIZE,6);
    5468:	7e 01       	movw	r14, r28
    546a:	30 e5       	ldi	r19, 0x50	; 80
    546c:	e3 1a       	sub	r14, r19
    546e:	3e ef       	ldi	r19, 0xFE	; 254
    5470:	f3 0a       	sbc	r15, r19
    5472:	06 e0       	ldi	r16, 0x06	; 6
    5474:	10 e0       	ldi	r17, 0x00	; 0
    5476:	2e e1       	ldi	r18, 0x1E	; 30
    5478:	30 e0       	ldi	r19, 0x00	; 0
    547a:	a7 01       	movw	r20, r14
    547c:	be 01       	movw	r22, r28
    547e:	6f 5f       	subi	r22, 0xFF	; 255
    5480:	7f 4f       	sbci	r23, 0xFF	; 255
    5482:	ce 01       	movw	r24, r28
    5484:	8f 5f       	subi	r24, 0xFF	; 255
    5486:	9e 4f       	sbci	r25, 0xFE	; 254
    5488:	0b d9       	rcall	.-3562   	; 0x46a0 <json_get_token>
		if (sscanf(token_buffer,"%d-%d-%dT%d:%d:%dZ",&year, &month, &day, &hour, &minute, &second) != 6) {
    548a:	ce 01       	movw	r24, r28
    548c:	82 53       	subi	r24, 0x32	; 50
    548e:	9e 4f       	sbci	r25, 0xFE	; 254
    5490:	9f 93       	push	r25
    5492:	8f 93       	push	r24
    5494:	02 96       	adiw	r24, 0x02	; 2
    5496:	9f 93       	push	r25
    5498:	8f 93       	push	r24
    549a:	02 96       	adiw	r24, 0x02	; 2
    549c:	9f 93       	push	r25
    549e:	8f 93       	push	r24
    54a0:	02 96       	adiw	r24, 0x02	; 2
    54a2:	9f 93       	push	r25
    54a4:	8f 93       	push	r24
    54a6:	02 96       	adiw	r24, 0x02	; 2
    54a8:	9f 93       	push	r25
    54aa:	8f 93       	push	r24
    54ac:	02 96       	adiw	r24, 0x02	; 2
    54ae:	9f 93       	push	r25
    54b0:	8f 93       	push	r24
    54b2:	82 e9       	ldi	r24, 0x92	; 146
    54b4:	96 e2       	ldi	r25, 0x26	; 38
    54b6:	9f 93       	push	r25
    54b8:	8f 93       	push	r24
    54ba:	ff 92       	push	r15
    54bc:	ef 92       	push	r14
    54be:	0e 94 af 3e 	call	0x7d5e	; 0x7d5e <sscanf>
    54c2:	cd bf       	out	0x3d, r28	; 61
    54c4:	de bf       	out	0x3e, r29	; 62
    54c6:	06 97       	sbiw	r24, 0x06	; 6
    54c8:	09 f0       	breq	.+2      	; 0x54cc <get_internet_variables+0x124>
    54ca:	8a c0       	rjmp	.+276    	; 0x55e0 <get_internet_variables+0x238>
			//Maybe add error message here...
		} else {
			env_var.time.year = year;
    54cc:	c8 52       	subi	r28, 0x28	; 40
    54ce:	de 4f       	sbci	r29, 0xFE	; 254
    54d0:	48 81       	ld	r20, Y
    54d2:	59 81       	ldd	r21, Y+1	; 0x01
    54d4:	c8 5d       	subi	r28, 0xD8	; 216
    54d6:	d1 40       	sbci	r29, 0x01	; 1
    54d8:	40 93 d5 29 	sts	0x29D5, r20
    54dc:	50 93 d6 29 	sts	0x29D6, r21
			env_var.time.month = month;
    54e0:	ca 52       	subi	r28, 0x2A	; 42
    54e2:	de 4f       	sbci	r29, 0xFE	; 254
    54e4:	68 81       	ld	r22, Y
    54e6:	c6 5d       	subi	r28, 0xD6	; 214
    54e8:	d1 40       	sbci	r29, 0x01	; 1
    54ea:	c9 52       	subi	r28, 0x29	; 41
    54ec:	de 4f       	sbci	r29, 0xFE	; 254
    54ee:	78 81       	ld	r23, Y
    54f0:	c7 5d       	subi	r28, 0xD7	; 215
    54f2:	d1 40       	sbci	r29, 0x01	; 1
    54f4:	60 93 d4 29 	sts	0x29D4, r22
			env_var.time.day = day;
    54f8:	cc 52       	subi	r28, 0x2C	; 44
    54fa:	de 4f       	sbci	r29, 0xFE	; 254
    54fc:	88 81       	ld	r24, Y
    54fe:	c4 5d       	subi	r28, 0xD4	; 212
    5500:	d1 40       	sbci	r29, 0x01	; 1
    5502:	cb 52       	subi	r28, 0x2B	; 43
    5504:	de 4f       	sbci	r29, 0xFE	; 254
    5506:	98 81       	ld	r25, Y
    5508:	c5 5d       	subi	r28, 0xD5	; 213
    550a:	d1 40       	sbci	r29, 0x01	; 1
    550c:	80 93 d1 29 	sts	0x29D1, r24
			env_var.time.hours = hour + env_var.time.timezone + env_var.time.DST;
    5510:	00 ed       	ldi	r16, 0xD0	; 208
    5512:	19 e2       	ldi	r17, 0x29	; 41
    5514:	30 91 d7 29 	lds	r19, 0x29D7
    5518:	ce 52       	subi	r28, 0x2E	; 46
    551a:	de 4f       	sbci	r29, 0xFE	; 254
    551c:	28 81       	ld	r18, Y
    551e:	c2 5d       	subi	r28, 0xD2	; 210
    5520:	d1 40       	sbci	r29, 0x01	; 1
    5522:	32 0f       	add	r19, r18
    5524:	20 91 d8 29 	lds	r18, 0x29D8
    5528:	23 0f       	add	r18, r19
    552a:	f8 01       	movw	r30, r16
    552c:	20 83       	st	Z, r18
			env_var.time.minutes = minute;
    552e:	c0 53       	subi	r28, 0x30	; 48
    5530:	de 4f       	sbci	r29, 0xFE	; 254
    5532:	28 81       	ld	r18, Y
    5534:	c0 5d       	subi	r28, 0xD0	; 208
    5536:	d1 40       	sbci	r29, 0x01	; 1
    5538:	20 93 cf 29 	sts	0x29CF, r18
			env_var.time.seconds = second;
    553c:	c2 53       	subi	r28, 0x32	; 50
    553e:	de 4f       	sbci	r29, 0xFE	; 254
    5540:	28 81       	ld	r18, Y
    5542:	ce 5c       	subi	r28, 0xCE	; 206
    5544:	d1 40       	sbci	r29, 0x01	; 1
    5546:	20 93 ce 29 	sts	0x29CE, r18
			env_var.time.weekday = time_get_weekday(day,month,year);
    554a:	0e 94 99 38 	call	0x7132	; 0x7132 <time_get_weekday>
    554e:	80 93 d2 29 	sts	0x29D2, r24
			
			if (env_var.time.hours >= 24) {
    5552:	f8 01       	movw	r30, r16
    5554:	90 81       	ld	r25, Z
    5556:	98 31       	cpi	r25, 0x18	; 24
    5558:	a8 f1       	brcs	.+106    	; 0x55c4 <get_internet_variables+0x21c>
				env_var.time.hours -= 24;
    555a:	98 51       	subi	r25, 0x18	; 24
    555c:	90 93 d0 29 	sts	0x29D0, r25
				if (env_var.time.weekday++ >= Sunday) {
    5560:	87 30       	cpi	r24, 0x07	; 7
    5562:	20 f4       	brcc	.+8      	; 0x556c <get_internet_variables+0x1c4>
    5564:	8f 5f       	subi	r24, 0xFF	; 255
    5566:	80 93 d2 29 	sts	0x29D2, r24
    556a:	03 c0       	rjmp	.+6      	; 0x5572 <get_internet_variables+0x1ca>
					env_var.time.weekday = Monday;
    556c:	81 e0       	ldi	r24, 0x01	; 1
    556e:	80 93 d2 29 	sts	0x29D2, r24
				}
				if (env_var.time.day++ >= time_get_days_in_month(env_var.time.month,env_var.time.year)) {
    5572:	e1 ed       	ldi	r30, 0xD1	; 209
    5574:	f9 e2       	ldi	r31, 0x29	; 41
    5576:	10 81       	ld	r17, Z
    5578:	81 e0       	ldi	r24, 0x01	; 1
    557a:	81 0f       	add	r24, r17
    557c:	80 83       	st	Z, r24
    557e:	60 91 d5 29 	lds	r22, 0x29D5
    5582:	70 91 d6 29 	lds	r23, 0x29D6
    5586:	80 91 d4 29 	lds	r24, 0x29D4
    558a:	90 e0       	ldi	r25, 0x00	; 0
    558c:	0e 94 82 38 	call	0x7104	; 0x7104 <time_get_days_in_month>
    5590:	21 2f       	mov	r18, r17
    5592:	30 e0       	ldi	r19, 0x00	; 0
    5594:	28 17       	cp	r18, r24
    5596:	39 07       	cpc	r19, r25
    5598:	ac f0       	brlt	.+42     	; 0x55c4 <get_internet_variables+0x21c>
					env_var.time.day = 1;
    559a:	81 e0       	ldi	r24, 0x01	; 1
    559c:	80 93 d1 29 	sts	0x29D1, r24
					if (env_var.time.month++ >= December) {
    55a0:	80 91 d4 29 	lds	r24, 0x29D4
    55a4:	8c 30       	cpi	r24, 0x0C	; 12
    55a6:	20 f4       	brcc	.+8      	; 0x55b0 <get_internet_variables+0x208>
    55a8:	8f 5f       	subi	r24, 0xFF	; 255
    55aa:	80 93 d4 29 	sts	0x29D4, r24
    55ae:	0a c0       	rjmp	.+20     	; 0x55c4 <get_internet_variables+0x21c>
						env_var.time.month = January;
    55b0:	81 e0       	ldi	r24, 0x01	; 1
    55b2:	80 93 d4 29 	sts	0x29D4, r24
						env_var.time.year++;
    55b6:	e5 ed       	ldi	r30, 0xD5	; 213
    55b8:	f9 e2       	ldi	r31, 0x29	; 41
    55ba:	80 81       	ld	r24, Z
    55bc:	91 81       	ldd	r25, Z+1	; 0x01
    55be:	01 96       	adiw	r24, 0x01	; 1
    55c0:	80 83       	st	Z, r24
    55c2:	91 83       	std	Z+1, r25	; 0x01
					}
				}
			}
			env_var.time.week = time_get_weeknumber(env_var.time.day,env_var.time.month,env_var.time.year);
    55c4:	40 91 d5 29 	lds	r20, 0x29D5
    55c8:	50 91 d6 29 	lds	r21, 0x29D6
    55cc:	60 91 d4 29 	lds	r22, 0x29D4
    55d0:	70 e0       	ldi	r23, 0x00	; 0
    55d2:	80 91 d1 29 	lds	r24, 0x29D1
    55d6:	90 e0       	ldi	r25, 0x00	; 0
    55d8:	0e 94 0f 39 	call	0x721e	; 0x721e <time_get_weeknumber>
    55dc:	80 93 d3 29 	sts	0x29D3, r24
		}
	}
	if (get_temperature)
    55e0:	dd 20       	and	r13, r13
    55e2:	09 f4       	brne	.+2      	; 0x55e6 <get_internet_variables+0x23e>
    55e4:	64 c0       	rjmp	.+200    	; 0x56ae <get_internet_variables+0x306>
	{
		json_get_token(tokens,json,token_buffer,TOKEN_BUFFER_SIZE,22);
    55e6:	06 e1       	ldi	r16, 0x16	; 22
    55e8:	10 e0       	ldi	r17, 0x00	; 0
    55ea:	2e e1       	ldi	r18, 0x1E	; 30
    55ec:	30 e0       	ldi	r19, 0x00	; 0
    55ee:	ae 01       	movw	r20, r28
    55f0:	40 55       	subi	r20, 0x50	; 80
    55f2:	5e 4f       	sbci	r21, 0xFE	; 254
    55f4:	be 01       	movw	r22, r28
    55f6:	6f 5f       	subi	r22, 0xFF	; 255
    55f8:	7f 4f       	sbci	r23, 0xFF	; 255
    55fa:	ce 01       	movw	r24, r28
    55fc:	8f 5f       	subi	r24, 0xFF	; 255
    55fe:	9e 4f       	sbci	r25, 0xFE	; 254
    5600:	4f d8       	rcall	.-3938   	; 0x46a0 <json_get_token>
		puts(token_buffer);
    5602:	ce 01       	movw	r24, r28
    5604:	80 55       	subi	r24, 0x50	; 80
    5606:	9e 4f       	sbci	r25, 0xFE	; 254
    5608:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <puts>
	return s - begin;
}

static inline int isNumeric (const char * s)
{
	if (s == NULL || *s == '\0' || isspace(*s))
    560c:	c0 55       	subi	r28, 0x50	; 80
    560e:	de 4f       	sbci	r29, 0xFE	; 254
    5610:	88 81       	ld	r24, Y
    5612:	c0 5b       	subi	r28, 0xB0	; 176
    5614:	d1 40       	sbci	r29, 0x01	; 1
    5616:	88 23       	and	r24, r24
    5618:	09 f4       	brne	.+2      	; 0x561c <get_internet_variables+0x274>
    561a:	44 c0       	rjmp	.+136    	; 0x56a4 <get_internet_variables+0x2fc>
    561c:	90 e0       	ldi	r25, 0x00	; 0
    561e:	0e 94 c6 3d 	call	0x7b8c	; 0x7b8c <isspace>
    5622:	89 2b       	or	r24, r25
    5624:	09 f0       	breq	.+2      	; 0x5628 <get_internet_variables+0x280>
    5626:	3e c0       	rjmp	.+124    	; 0x56a4 <get_internet_variables+0x2fc>
	return 0;
	char * p;
	strtod (s, &p);
    5628:	be 01       	movw	r22, r28
    562a:	62 53       	subi	r22, 0x32	; 50
    562c:	7e 4f       	sbci	r23, 0xFE	; 254
    562e:	ce 01       	movw	r24, r28
    5630:	80 55       	subi	r24, 0x50	; 80
    5632:	9e 4f       	sbci	r25, 0xFE	; 254
    5634:	0e 94 5e 3c 	call	0x78bc	; 0x78bc <strtod>
	return *p == '\0';
    5638:	c2 53       	subi	r28, 0x32	; 50
    563a:	de 4f       	sbci	r29, 0xFE	; 254
    563c:	e8 81       	ld	r30, Y
    563e:	f9 81       	ldd	r31, Y+1	; 0x01
    5640:	ce 5c       	subi	r28, 0xCE	; 206
    5642:	d1 40       	sbci	r29, 0x01	; 1
    5644:	80 81       	ld	r24, Z
		if (isNumeric(token_buffer)) {
    5646:	81 11       	cpse	r24, r1
    5648:	2d c0       	rjmp	.+90     	; 0x56a4 <get_internet_variables+0x2fc>
			strncpy(env_var.temperature,token_buffer,strlen(token_buffer));	
    564a:	7e 01       	movw	r14, r28
    564c:	f0 e5       	ldi	r31, 0x50	; 80
    564e:	ef 1a       	sub	r14, r31
    5650:	fe ef       	ldi	r31, 0xFE	; 254
    5652:	ff 0a       	sbc	r15, r31
    5654:	f7 01       	movw	r30, r14
    5656:	01 90       	ld	r0, Z+
    5658:	00 20       	and	r0, r0
    565a:	e9 f7       	brne	.-6      	; 0x5656 <get_internet_variables+0x2ae>
    565c:	31 97       	sbiw	r30, 0x01	; 1
    565e:	af 01       	movw	r20, r30
    5660:	4e 19       	sub	r20, r14
    5662:	5f 09       	sbc	r21, r15
    5664:	b7 01       	movw	r22, r14
    5666:	89 ed       	ldi	r24, 0xD9	; 217
    5668:	99 e2       	ldi	r25, 0x29	; 41
    566a:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <strncpy>
			json_get_token(tokens,json,token_buffer,TOKEN_BUFFER_SIZE,24);
    566e:	08 e1       	ldi	r16, 0x18	; 24
    5670:	10 e0       	ldi	r17, 0x00	; 0
    5672:	2e e1       	ldi	r18, 0x1E	; 30
    5674:	30 e0       	ldi	r19, 0x00	; 0
    5676:	a7 01       	movw	r20, r14
    5678:	be 01       	movw	r22, r28
    567a:	6f 5f       	subi	r22, 0xFF	; 255
    567c:	7f 4f       	sbci	r23, 0xFF	; 255
    567e:	ce 01       	movw	r24, r28
    5680:	8f 5f       	subi	r24, 0xFF	; 255
    5682:	9e 4f       	sbci	r25, 0xFE	; 254
    5684:	0d d8       	rcall	.-4070   	; 0x46a0 <json_get_token>
			strncpy(env_var.weather_info,token_buffer,strlen(token_buffer));
    5686:	f7 01       	movw	r30, r14
    5688:	01 90       	ld	r0, Z+
    568a:	00 20       	and	r0, r0
    568c:	e9 f7       	brne	.-6      	; 0x5688 <get_internet_variables+0x2e0>
    568e:	31 97       	sbiw	r30, 0x01	; 1
    5690:	af 01       	movw	r20, r30
    5692:	4e 19       	sub	r20, r14
    5694:	5f 09       	sbc	r21, r15
    5696:	b7 01       	movw	r22, r14
    5698:	8c ed       	ldi	r24, 0xDC	; 220
    569a:	99 e2       	ldi	r25, 0x29	; 41
    569c:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <strncpy>
			env_var.temperature[0] = '-';
			return ESP8266_ERROR;
		}
	}

	return ESP8266_SUCCESS;
    56a0:	81 e0       	ldi	r24, 0x01	; 1
    56a2:	06 c0       	rjmp	.+12     	; 0x56b0 <get_internet_variables+0x308>
		if (isNumeric(token_buffer)) {
			strncpy(env_var.temperature,token_buffer,strlen(token_buffer));	
			json_get_token(tokens,json,token_buffer,TOKEN_BUFFER_SIZE,24);
			strncpy(env_var.weather_info,token_buffer,strlen(token_buffer));
		} else {
			env_var.temperature[0] = '-';
    56a4:	8d e2       	ldi	r24, 0x2D	; 45
    56a6:	80 93 d9 29 	sts	0x29D9, r24
			return ESP8266_ERROR;
    56aa:	80 e0       	ldi	r24, 0x00	; 0
    56ac:	01 c0       	rjmp	.+2      	; 0x56b0 <get_internet_variables+0x308>
		}
	}

	return ESP8266_SUCCESS;
    56ae:	81 e0       	ldi	r24, 0x01	; 1
}
    56b0:	c7 52       	subi	r28, 0x27	; 39
    56b2:	de 4f       	sbci	r29, 0xFE	; 254
    56b4:	cd bf       	out	0x3d, r28	; 61
    56b6:	de bf       	out	0x3e, r29	; 62
    56b8:	df 91       	pop	r29
    56ba:	cf 91       	pop	r28
    56bc:	1f 91       	pop	r17
    56be:	0f 91       	pop	r16
    56c0:	ff 90       	pop	r15
    56c2:	ef 90       	pop	r14
    56c4:	df 90       	pop	r13
    56c6:	cf 90       	pop	r12
    56c8:	08 95       	ret

000056ca <menu_draw_temperature_frame>:

void menu_draw_temperature_frame(void) {
    56ca:	0f 93       	push	r16
    56cc:	1f 93       	push	r17
	display_draw_small_char(1,10,'T',1,1);
    56ce:	01 e0       	ldi	r16, 0x01	; 1
    56d0:	10 e0       	ldi	r17, 0x00	; 0
    56d2:	21 e0       	ldi	r18, 0x01	; 1
    56d4:	30 e0       	ldi	r19, 0x00	; 0
    56d6:	44 e5       	ldi	r20, 0x54	; 84
    56d8:	50 e0       	ldi	r21, 0x00	; 0
    56da:	6a e0       	ldi	r22, 0x0A	; 10
    56dc:	70 e0       	ldi	r23, 0x00	; 0
    56de:	81 e0       	ldi	r24, 0x01	; 1
    56e0:	90 e0       	ldi	r25, 0x00	; 0
    56e2:	3f db       	rcall	.-2434   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(5,10,'E',1,1);
    56e4:	21 e0       	ldi	r18, 0x01	; 1
    56e6:	30 e0       	ldi	r19, 0x00	; 0
    56e8:	45 e4       	ldi	r20, 0x45	; 69
    56ea:	50 e0       	ldi	r21, 0x00	; 0
    56ec:	6a e0       	ldi	r22, 0x0A	; 10
    56ee:	70 e0       	ldi	r23, 0x00	; 0
    56f0:	85 e0       	ldi	r24, 0x05	; 5
    56f2:	90 e0       	ldi	r25, 0x00	; 0
    56f4:	36 db       	rcall	.-2452   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(9,10,'M',1,1);
    56f6:	21 e0       	ldi	r18, 0x01	; 1
    56f8:	30 e0       	ldi	r19, 0x00	; 0
    56fa:	4d e4       	ldi	r20, 0x4D	; 77
    56fc:	50 e0       	ldi	r21, 0x00	; 0
    56fe:	6a e0       	ldi	r22, 0x0A	; 10
    5700:	70 e0       	ldi	r23, 0x00	; 0
    5702:	89 e0       	ldi	r24, 0x09	; 9
    5704:	90 e0       	ldi	r25, 0x00	; 0
    5706:	2d db       	rcall	.-2470   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(13,10,'P',1,1);
    5708:	21 e0       	ldi	r18, 0x01	; 1
    570a:	30 e0       	ldi	r19, 0x00	; 0
    570c:	40 e5       	ldi	r20, 0x50	; 80
    570e:	50 e0       	ldi	r21, 0x00	; 0
    5710:	6a e0       	ldi	r22, 0x0A	; 10
    5712:	70 e0       	ldi	r23, 0x00	; 0
    5714:	8d e0       	ldi	r24, 0x0D	; 13
    5716:	90 e0       	ldi	r25, 0x00	; 0
    5718:	24 db       	rcall	.-2488   	; 0x4d62 <display_draw_small_char>
	
	if (strlen(env_var.temperature) < 2) {
    571a:	e9 ed       	ldi	r30, 0xD9	; 217
    571c:	f9 e2       	ldi	r31, 0x29	; 41
    571e:	01 90       	ld	r0, Z+
    5720:	00 20       	and	r0, r0
    5722:	e9 f7       	brne	.-6      	; 0x571e <menu_draw_temperature_frame+0x54>
    5724:	cf 01       	movw	r24, r30
    5726:	8a 5d       	subi	r24, 0xDA	; 218
    5728:	99 42       	sbci	r25, 0x29	; 41
    572a:	02 97       	sbiw	r24, 0x02	; 2
    572c:	a0 f4       	brcc	.+40     	; 0x5756 <menu_draw_temperature_frame+0x8c>
		display_draw_small_char(5,3,env_var.temperature[0],1,1);
    572e:	40 91 d9 29 	lds	r20, 0x29D9
    5732:	50 e0       	ldi	r21, 0x00	; 0
    5734:	21 e0       	ldi	r18, 0x01	; 1
    5736:	30 e0       	ldi	r19, 0x00	; 0
    5738:	63 e0       	ldi	r22, 0x03	; 3
    573a:	70 e0       	ldi	r23, 0x00	; 0
    573c:	85 e0       	ldi	r24, 0x05	; 5
    573e:	90 e0       	ldi	r25, 0x00	; 0
    5740:	10 db       	rcall	.-2528   	; 0x4d62 <display_draw_small_char>
		display_draw_small_char(9,3,'C',1,1);	
    5742:	21 e0       	ldi	r18, 0x01	; 1
    5744:	30 e0       	ldi	r19, 0x00	; 0
    5746:	43 e4       	ldi	r20, 0x43	; 67
    5748:	50 e0       	ldi	r21, 0x00	; 0
    574a:	63 e0       	ldi	r22, 0x03	; 3
    574c:	70 e0       	ldi	r23, 0x00	; 0
    574e:	89 e0       	ldi	r24, 0x09	; 9
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	07 db       	rcall	.-2546   	; 0x4d62 <display_draw_small_char>
    5754:	1f c0       	rjmp	.+62     	; 0x5794 <menu_draw_temperature_frame+0xca>
	} else {
		display_draw_small_char(3,3,env_var.temperature[0],1,1);
    5756:	40 91 d9 29 	lds	r20, 0x29D9
    575a:	50 e0       	ldi	r21, 0x00	; 0
    575c:	01 e0       	ldi	r16, 0x01	; 1
    575e:	10 e0       	ldi	r17, 0x00	; 0
    5760:	21 e0       	ldi	r18, 0x01	; 1
    5762:	30 e0       	ldi	r19, 0x00	; 0
    5764:	63 e0       	ldi	r22, 0x03	; 3
    5766:	70 e0       	ldi	r23, 0x00	; 0
    5768:	83 e0       	ldi	r24, 0x03	; 3
    576a:	90 e0       	ldi	r25, 0x00	; 0
    576c:	fa da       	rcall	.-2572   	; 0x4d62 <display_draw_small_char>
		display_draw_small_char(7,3,env_var.temperature[1],1,1);
    576e:	40 91 da 29 	lds	r20, 0x29DA
    5772:	50 e0       	ldi	r21, 0x00	; 0
    5774:	21 e0       	ldi	r18, 0x01	; 1
    5776:	30 e0       	ldi	r19, 0x00	; 0
    5778:	63 e0       	ldi	r22, 0x03	; 3
    577a:	70 e0       	ldi	r23, 0x00	; 0
    577c:	87 e0       	ldi	r24, 0x07	; 7
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	f0 da       	rcall	.-2592   	; 0x4d62 <display_draw_small_char>
		display_draw_small_char(11,3,'C',1,1);	
    5782:	21 e0       	ldi	r18, 0x01	; 1
    5784:	30 e0       	ldi	r19, 0x00	; 0
    5786:	43 e4       	ldi	r20, 0x43	; 67
    5788:	50 e0       	ldi	r21, 0x00	; 0
    578a:	63 e0       	ldi	r22, 0x03	; 3
    578c:	70 e0       	ldi	r23, 0x00	; 0
    578e:	8b e0       	ldi	r24, 0x0B	; 11
    5790:	90 e0       	ldi	r25, 0x00	; 0
    5792:	e7 da       	rcall	.-2610   	; 0x4d62 <display_draw_small_char>
	}
}
    5794:	1f 91       	pop	r17
    5796:	0f 91       	pop	r16
    5798:	08 95       	ret

0000579a <menu_draw_date_frame>:

void menu_draw_date_frame(void) {
    579a:	4f 92       	push	r4
    579c:	5f 92       	push	r5
    579e:	6f 92       	push	r6
    57a0:	7f 92       	push	r7
    57a2:	9f 92       	push	r9
    57a4:	af 92       	push	r10
    57a6:	bf 92       	push	r11
    57a8:	cf 92       	push	r12
    57aa:	df 92       	push	r13
    57ac:	ef 92       	push	r14
    57ae:	ff 92       	push	r15
    57b0:	0f 93       	push	r16
    57b2:	1f 93       	push	r17
    57b4:	cf 93       	push	r28
    57b6:	df 93       	push	r29
    57b8:	00 d0       	rcall	.+0      	; 0x57ba <menu_draw_date_frame+0x20>
    57ba:	cd b7       	in	r28, 0x3d	; 61
    57bc:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'D',1,1);
    57be:	01 e0       	ldi	r16, 0x01	; 1
    57c0:	10 e0       	ldi	r17, 0x00	; 0
    57c2:	21 e0       	ldi	r18, 0x01	; 1
    57c4:	30 e0       	ldi	r19, 0x00	; 0
    57c6:	44 e4       	ldi	r20, 0x44	; 68
    57c8:	50 e0       	ldi	r21, 0x00	; 0
    57ca:	6a e0       	ldi	r22, 0x0A	; 10
    57cc:	70 e0       	ldi	r23, 0x00	; 0
    57ce:	81 e0       	ldi	r24, 0x01	; 1
    57d0:	90 e0       	ldi	r25, 0x00	; 0
    57d2:	c7 da       	rcall	.-2674   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(5,10,'A',1,1);
    57d4:	21 e0       	ldi	r18, 0x01	; 1
    57d6:	30 e0       	ldi	r19, 0x00	; 0
    57d8:	41 e4       	ldi	r20, 0x41	; 65
    57da:	50 e0       	ldi	r21, 0x00	; 0
    57dc:	6a e0       	ldi	r22, 0x0A	; 10
    57de:	70 e0       	ldi	r23, 0x00	; 0
    57e0:	85 e0       	ldi	r24, 0x05	; 5
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	be da       	rcall	.-2692   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(9,10,'T',1,1);
    57e6:	21 e0       	ldi	r18, 0x01	; 1
    57e8:	30 e0       	ldi	r19, 0x00	; 0
    57ea:	44 e5       	ldi	r20, 0x54	; 84
    57ec:	50 e0       	ldi	r21, 0x00	; 0
    57ee:	6a e0       	ldi	r22, 0x0A	; 10
    57f0:	70 e0       	ldi	r23, 0x00	; 0
    57f2:	89 e0       	ldi	r24, 0x09	; 9
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	b5 da       	rcall	.-2710   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(13,10,'E',1,1);
    57f8:	21 e0       	ldi	r18, 0x01	; 1
    57fa:	30 e0       	ldi	r19, 0x00	; 0
    57fc:	45 e4       	ldi	r20, 0x45	; 69
    57fe:	50 e0       	ldi	r21, 0x00	; 0
    5800:	6a e0       	ldi	r22, 0x0A	; 10
    5802:	70 e0       	ldi	r23, 0x00	; 0
    5804:	8d e0       	ldi	r24, 0x0D	; 13
    5806:	90 e0       	ldi	r25, 0x00	; 0
    5808:	ac da       	rcall	.-2728   	; 0x4d62 <display_draw_small_char>
	
	char buffer[2];
	char temp;
	
	itoa_simple(buffer,env_var.time.day);
    580a:	b0 90 d1 29 	lds	r11, 0x29D1
 * about 2 times faster than sprintf (in range [INT_MIN/10 - INT_MAX/10])
 */
static inline void itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    580e:	6b 2d       	mov	r22, r11
    5810:	70 e0       	ldi	r23, 0x00	; 0
    5812:	80 e0       	ldi	r24, 0x00	; 0
    5814:	90 e0       	ldi	r25, 0x00	; 0
    5816:	8e 01       	movw	r16, r28
    5818:	0f 5f       	subi	r16, 0xFF	; 255
    581a:	1f 4f       	sbci	r17, 0xFF	; 255
		*s++ = '-';
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    581c:	0f 2e       	mov	r0, r31
    581e:	fa e0       	ldi	r31, 0x0A	; 10
    5820:	4f 2e       	mov	r4, r31
    5822:	51 2c       	mov	r5, r1
    5824:	61 2c       	mov	r6, r1
    5826:	71 2c       	mov	r7, r1
    5828:	f0 2d       	mov	r31, r0
    582a:	78 01       	movw	r14, r16
    582c:	2f ef       	ldi	r18, 0xFF	; 255
    582e:	e2 1a       	sub	r14, r18
    5830:	f2 0a       	sbc	r15, r18
    5832:	67 01       	movw	r12, r14
    5834:	a3 01       	movw	r20, r6
    5836:	92 01       	movw	r18, r4
    5838:	0e 94 c8 3a 	call	0x7590	; 0x7590 <__udivmodsi4>
    583c:	60 5d       	subi	r22, 0xD0	; 208
    583e:	f8 01       	movw	r30, r16
    5840:	60 83       	st	Z, r22
	} while ((n /= 10) > 0);     /* delete it */
    5842:	62 2f       	mov	r22, r18
    5844:	73 2f       	mov	r23, r19
    5846:	84 2f       	mov	r24, r20
    5848:	95 2f       	mov	r25, r21
    584a:	61 15       	cp	r22, r1
    584c:	71 05       	cpc	r23, r1
    584e:	81 05       	cpc	r24, r1
    5850:	91 05       	cpc	r25, r1
    5852:	11 f0       	breq	.+4      	; 0x5858 <menu_draw_date_frame+0xbe>
    5854:	87 01       	movw	r16, r14
    5856:	e9 cf       	rjmp	.-46     	; 0x582a <menu_draw_date_frame+0x90>

	reverse_string( rev, s - rev);
    5858:	ce 01       	movw	r24, r28
    585a:	01 96       	adiw	r24, 0x01	; 1
    585c:	c8 1a       	sub	r12, r24
    585e:	d9 0a       	sbc	r13, r25
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    5860:	c6 01       	movw	r24, r12
    5862:	01 97       	sbiw	r24, 0x01	; 1
    5864:	18 16       	cp	r1, r24
    5866:	19 06       	cpc	r1, r25
    5868:	a4 f4       	brge	.+40     	; 0x5892 <menu_draw_date_frame+0xf8>
    586a:	a1 e0       	ldi	r26, 0x01	; 1
    586c:	b0 e0       	ldi	r27, 0x00	; 0
    586e:	ac 0f       	add	r26, r28
    5870:	bd 1f       	adc	r27, r29
    5872:	ac 0d       	add	r26, r12
    5874:	bd 1d       	adc	r27, r13
    5876:	fe 01       	movw	r30, r28
    5878:	31 96       	adiw	r30, 0x01	; 1
    587a:	20 e0       	ldi	r18, 0x00	; 0
    587c:	30 e0       	ldi	r19, 0x00	; 0
		c = s[i];
    587e:	40 81       	ld	r20, Z
		s[i] = s[j];
    5880:	5e 91       	ld	r21, -X
    5882:	51 93       	st	Z+, r21
		s[j] = c;
    5884:	4c 93       	st	X, r20
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    5886:	2f 5f       	subi	r18, 0xFF	; 255
    5888:	3f 4f       	sbci	r19, 0xFF	; 255
    588a:	01 97       	sbiw	r24, 0x01	; 1
    588c:	28 17       	cp	r18, r24
    588e:	39 07       	cpc	r19, r25
    5890:	b4 f3       	brlt	.-20     	; 0x587e <menu_draw_date_frame+0xe4>
	
	//append zero
	if (env_var.time.day < 10) {
    5892:	f9 e0       	ldi	r31, 0x09	; 9
    5894:	fb 15       	cp	r31, r11
    5896:	20 f0       	brcs	.+8      	; 0x58a0 <menu_draw_date_frame+0x106>
		temp = buffer[0];
    5898:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    589a:	90 e3       	ldi	r25, 0x30	; 48
    589c:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    589e:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(1,3,buffer[0],1,1);
    58a0:	49 81       	ldd	r20, Y+1	; 0x01
    58a2:	50 e0       	ldi	r21, 0x00	; 0
    58a4:	01 e0       	ldi	r16, 0x01	; 1
    58a6:	10 e0       	ldi	r17, 0x00	; 0
    58a8:	21 e0       	ldi	r18, 0x01	; 1
    58aa:	30 e0       	ldi	r19, 0x00	; 0
    58ac:	63 e0       	ldi	r22, 0x03	; 3
    58ae:	70 e0       	ldi	r23, 0x00	; 0
    58b0:	81 e0       	ldi	r24, 0x01	; 1
    58b2:	90 e0       	ldi	r25, 0x00	; 0
    58b4:	56 da       	rcall	.-2900   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(4,3,buffer[1],1,1);
    58b6:	4a 81       	ldd	r20, Y+2	; 0x02
    58b8:	50 e0       	ldi	r21, 0x00	; 0
    58ba:	21 e0       	ldi	r18, 0x01	; 1
    58bc:	30 e0       	ldi	r19, 0x00	; 0
    58be:	63 e0       	ldi	r22, 0x03	; 3
    58c0:	70 e0       	ldi	r23, 0x00	; 0
    58c2:	84 e0       	ldi	r24, 0x04	; 4
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	4d da       	rcall	.-2918   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(7,3,'.',1,1);
    58c8:	21 e0       	ldi	r18, 0x01	; 1
    58ca:	30 e0       	ldi	r19, 0x00	; 0
    58cc:	4e e2       	ldi	r20, 0x2E	; 46
    58ce:	50 e0       	ldi	r21, 0x00	; 0
    58d0:	63 e0       	ldi	r22, 0x03	; 3
    58d2:	70 e0       	ldi	r23, 0x00	; 0
    58d4:	87 e0       	ldi	r24, 0x07	; 7
    58d6:	90 e0       	ldi	r25, 0x00	; 0
    58d8:	44 da       	rcall	.-2936   	; 0x4d62 <display_draw_small_char>
	
	itoa_simple(buffer,env_var.time.month);
    58da:	90 90 d4 29 	lds	r9, 0x29D4
 * about 2 times faster than sprintf (in range [INT_MIN/10 - INT_MAX/10])
 */
static inline void itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    58de:	69 2d       	mov	r22, r9
    58e0:	70 e0       	ldi	r23, 0x00	; 0
    58e2:	80 e0       	ldi	r24, 0x00	; 0
    58e4:	90 e0       	ldi	r25, 0x00	; 0
    58e6:	9e 01       	movw	r18, r28
    58e8:	2f 5f       	subi	r18, 0xFF	; 255
    58ea:	3f 4f       	sbci	r19, 0xFF	; 255
    58ec:	59 01       	movw	r10, r18

	if( num < 0 ) {
		 // forget about the sign, don't reverse it later
		n = -num;
		*s++ = '-';
    58ee:	89 01       	movw	r16, r18
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    58f0:	0f 2e       	mov	r0, r31
    58f2:	fa e0       	ldi	r31, 0x0A	; 10
    58f4:	4f 2e       	mov	r4, r31
    58f6:	51 2c       	mov	r5, r1
    58f8:	61 2c       	mov	r6, r1
    58fa:	71 2c       	mov	r7, r1
    58fc:	f0 2d       	mov	r31, r0
    58fe:	78 01       	movw	r14, r16
    5900:	3f ef       	ldi	r19, 0xFF	; 255
    5902:	e3 1a       	sub	r14, r19
    5904:	f3 0a       	sbc	r15, r19
    5906:	67 01       	movw	r12, r14
    5908:	a3 01       	movw	r20, r6
    590a:	92 01       	movw	r18, r4
    590c:	0e 94 c8 3a 	call	0x7590	; 0x7590 <__udivmodsi4>
    5910:	60 5d       	subi	r22, 0xD0	; 208
    5912:	f8 01       	movw	r30, r16
    5914:	60 83       	st	Z, r22
	} while ((n /= 10) > 0);     /* delete it */
    5916:	62 2f       	mov	r22, r18
    5918:	73 2f       	mov	r23, r19
    591a:	84 2f       	mov	r24, r20
    591c:	95 2f       	mov	r25, r21
    591e:	61 15       	cp	r22, r1
    5920:	71 05       	cpc	r23, r1
    5922:	81 05       	cpc	r24, r1
    5924:	91 05       	cpc	r25, r1
    5926:	11 f0       	breq	.+4      	; 0x592c <menu_draw_date_frame+0x192>
    5928:	87 01       	movw	r16, r14
    592a:	e9 cf       	rjmp	.-46     	; 0x58fe <menu_draw_date_frame+0x164>

	reverse_string( rev, s - rev);
    592c:	ca 18       	sub	r12, r10
    592e:	db 08       	sbc	r13, r11
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    5930:	c6 01       	movw	r24, r12
    5932:	01 97       	sbiw	r24, 0x01	; 1
    5934:	18 16       	cp	r1, r24
    5936:	19 06       	cpc	r1, r25
    5938:	84 f4       	brge	.+32     	; 0x595a <menu_draw_date_frame+0x1c0>
    593a:	d5 01       	movw	r26, r10
    593c:	ac 0d       	add	r26, r12
    593e:	bd 1d       	adc	r27, r13
    5940:	f5 01       	movw	r30, r10
    5942:	20 e0       	ldi	r18, 0x00	; 0
    5944:	30 e0       	ldi	r19, 0x00	; 0
		c = s[i];
    5946:	40 81       	ld	r20, Z
		s[i] = s[j];
    5948:	5e 91       	ld	r21, -X
    594a:	51 93       	st	Z+, r21
		s[j] = c;
    594c:	4c 93       	st	X, r20
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    594e:	2f 5f       	subi	r18, 0xFF	; 255
    5950:	3f 4f       	sbci	r19, 0xFF	; 255
    5952:	01 97       	sbiw	r24, 0x01	; 1
    5954:	28 17       	cp	r18, r24
    5956:	39 07       	cpc	r19, r25
    5958:	b4 f3       	brlt	.-20     	; 0x5946 <menu_draw_date_frame+0x1ac>
	
	//append zero
	if (env_var.time.month < 10) {
    595a:	f9 e0       	ldi	r31, 0x09	; 9
    595c:	f9 15       	cp	r31, r9
    595e:	20 f0       	brcs	.+8      	; 0x5968 <menu_draw_date_frame+0x1ce>
		temp = buffer[0];
    5960:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    5962:	90 e3       	ldi	r25, 0x30	; 48
    5964:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    5966:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(10,3,buffer[0],1,1);
    5968:	49 81       	ldd	r20, Y+1	; 0x01
    596a:	50 e0       	ldi	r21, 0x00	; 0
    596c:	01 e0       	ldi	r16, 0x01	; 1
    596e:	10 e0       	ldi	r17, 0x00	; 0
    5970:	21 e0       	ldi	r18, 0x01	; 1
    5972:	30 e0       	ldi	r19, 0x00	; 0
    5974:	63 e0       	ldi	r22, 0x03	; 3
    5976:	70 e0       	ldi	r23, 0x00	; 0
    5978:	8a e0       	ldi	r24, 0x0A	; 10
    597a:	90 e0       	ldi	r25, 0x00	; 0
    597c:	f2 d9       	rcall	.-3100   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(13,3,buffer[1],1,1);
    597e:	4a 81       	ldd	r20, Y+2	; 0x02
    5980:	50 e0       	ldi	r21, 0x00	; 0
    5982:	21 e0       	ldi	r18, 0x01	; 1
    5984:	30 e0       	ldi	r19, 0x00	; 0
    5986:	63 e0       	ldi	r22, 0x03	; 3
    5988:	70 e0       	ldi	r23, 0x00	; 0
    598a:	8d e0       	ldi	r24, 0x0D	; 13
    598c:	90 e0       	ldi	r25, 0x00	; 0
    598e:	e9 d9       	rcall	.-3118   	; 0x4d62 <display_draw_small_char>
}
    5990:	0f 90       	pop	r0
    5992:	0f 90       	pop	r0
    5994:	df 91       	pop	r29
    5996:	cf 91       	pop	r28
    5998:	1f 91       	pop	r17
    599a:	0f 91       	pop	r16
    599c:	ff 90       	pop	r15
    599e:	ef 90       	pop	r14
    59a0:	df 90       	pop	r13
    59a2:	cf 90       	pop	r12
    59a4:	bf 90       	pop	r11
    59a6:	af 90       	pop	r10
    59a8:	9f 90       	pop	r9
    59aa:	7f 90       	pop	r7
    59ac:	6f 90       	pop	r6
    59ae:	5f 90       	pop	r5
    59b0:	4f 90       	pop	r4
    59b2:	08 95       	ret

000059b4 <menu_draw_week_frame>:

void menu_draw_week_frame(void) {
    59b4:	7f 92       	push	r7
    59b6:	8f 92       	push	r8
    59b8:	9f 92       	push	r9
    59ba:	af 92       	push	r10
    59bc:	bf 92       	push	r11
    59be:	cf 92       	push	r12
    59c0:	df 92       	push	r13
    59c2:	ef 92       	push	r14
    59c4:	ff 92       	push	r15
    59c6:	0f 93       	push	r16
    59c8:	1f 93       	push	r17
    59ca:	cf 93       	push	r28
    59cc:	df 93       	push	r29
    59ce:	00 d0       	rcall	.+0      	; 0x59d0 <menu_draw_week_frame+0x1c>
    59d0:	cd b7       	in	r28, 0x3d	; 61
    59d2:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'W',1,1);
    59d4:	01 e0       	ldi	r16, 0x01	; 1
    59d6:	10 e0       	ldi	r17, 0x00	; 0
    59d8:	21 e0       	ldi	r18, 0x01	; 1
    59da:	30 e0       	ldi	r19, 0x00	; 0
    59dc:	47 e5       	ldi	r20, 0x57	; 87
    59de:	50 e0       	ldi	r21, 0x00	; 0
    59e0:	6a e0       	ldi	r22, 0x0A	; 10
    59e2:	70 e0       	ldi	r23, 0x00	; 0
    59e4:	81 e0       	ldi	r24, 0x01	; 1
    59e6:	90 e0       	ldi	r25, 0x00	; 0
    59e8:	bc d9       	rcall	.-3208   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(5,10,'E',1,1);
    59ea:	21 e0       	ldi	r18, 0x01	; 1
    59ec:	30 e0       	ldi	r19, 0x00	; 0
    59ee:	45 e4       	ldi	r20, 0x45	; 69
    59f0:	50 e0       	ldi	r21, 0x00	; 0
    59f2:	6a e0       	ldi	r22, 0x0A	; 10
    59f4:	70 e0       	ldi	r23, 0x00	; 0
    59f6:	85 e0       	ldi	r24, 0x05	; 5
    59f8:	90 e0       	ldi	r25, 0x00	; 0
    59fa:	b3 d9       	rcall	.-3226   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(9,10,'E',1,1);
    59fc:	21 e0       	ldi	r18, 0x01	; 1
    59fe:	30 e0       	ldi	r19, 0x00	; 0
    5a00:	45 e4       	ldi	r20, 0x45	; 69
    5a02:	50 e0       	ldi	r21, 0x00	; 0
    5a04:	6a e0       	ldi	r22, 0x0A	; 10
    5a06:	70 e0       	ldi	r23, 0x00	; 0
    5a08:	89 e0       	ldi	r24, 0x09	; 9
    5a0a:	90 e0       	ldi	r25, 0x00	; 0
    5a0c:	aa d9       	rcall	.-3244   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(13,10,'K',1,1);
    5a0e:	21 e0       	ldi	r18, 0x01	; 1
    5a10:	30 e0       	ldi	r19, 0x00	; 0
    5a12:	4b e4       	ldi	r20, 0x4B	; 75
    5a14:	50 e0       	ldi	r21, 0x00	; 0
    5a16:	6a e0       	ldi	r22, 0x0A	; 10
    5a18:	70 e0       	ldi	r23, 0x00	; 0
    5a1a:	8d e0       	ldi	r24, 0x0D	; 13
    5a1c:	90 e0       	ldi	r25, 0x00	; 0
    5a1e:	a1 d9       	rcall	.-3262   	; 0x4d62 <display_draw_small_char>
	
	char buffer[2];
	char temp;
	
	itoa_simple(buffer,env_var.time.week);
    5a20:	70 90 d3 29 	lds	r7, 0x29D3
 * about 2 times faster than sprintf (in range [INT_MIN/10 - INT_MAX/10])
 */
static inline void itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    5a24:	67 2d       	mov	r22, r7
    5a26:	70 e0       	ldi	r23, 0x00	; 0
    5a28:	80 e0       	ldi	r24, 0x00	; 0
    5a2a:	90 e0       	ldi	r25, 0x00	; 0
    5a2c:	8e 01       	movw	r16, r28
    5a2e:	0f 5f       	subi	r16, 0xFF	; 255
    5a30:	1f 4f       	sbci	r17, 0xFF	; 255
		*s++ = '-';
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    5a32:	0f 2e       	mov	r0, r31
    5a34:	fa e0       	ldi	r31, 0x0A	; 10
    5a36:	8f 2e       	mov	r8, r31
    5a38:	91 2c       	mov	r9, r1
    5a3a:	a1 2c       	mov	r10, r1
    5a3c:	b1 2c       	mov	r11, r1
    5a3e:	f0 2d       	mov	r31, r0
    5a40:	78 01       	movw	r14, r16
    5a42:	2f ef       	ldi	r18, 0xFF	; 255
    5a44:	e2 1a       	sub	r14, r18
    5a46:	f2 0a       	sbc	r15, r18
    5a48:	67 01       	movw	r12, r14
    5a4a:	a5 01       	movw	r20, r10
    5a4c:	94 01       	movw	r18, r8
    5a4e:	0e 94 c8 3a 	call	0x7590	; 0x7590 <__udivmodsi4>
    5a52:	60 5d       	subi	r22, 0xD0	; 208
    5a54:	f8 01       	movw	r30, r16
    5a56:	60 83       	st	Z, r22
	} while ((n /= 10) > 0);     /* delete it */
    5a58:	62 2f       	mov	r22, r18
    5a5a:	73 2f       	mov	r23, r19
    5a5c:	84 2f       	mov	r24, r20
    5a5e:	95 2f       	mov	r25, r21
    5a60:	61 15       	cp	r22, r1
    5a62:	71 05       	cpc	r23, r1
    5a64:	81 05       	cpc	r24, r1
    5a66:	91 05       	cpc	r25, r1
    5a68:	11 f0       	breq	.+4      	; 0x5a6e <menu_draw_week_frame+0xba>
    5a6a:	87 01       	movw	r16, r14
    5a6c:	e9 cf       	rjmp	.-46     	; 0x5a40 <menu_draw_week_frame+0x8c>

	reverse_string( rev, s - rev);
    5a6e:	ce 01       	movw	r24, r28
    5a70:	01 96       	adiw	r24, 0x01	; 1
    5a72:	c8 1a       	sub	r12, r24
    5a74:	d9 0a       	sbc	r13, r25
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    5a76:	c6 01       	movw	r24, r12
    5a78:	01 97       	sbiw	r24, 0x01	; 1
    5a7a:	18 16       	cp	r1, r24
    5a7c:	19 06       	cpc	r1, r25
    5a7e:	a4 f4       	brge	.+40     	; 0x5aa8 <menu_draw_week_frame+0xf4>
    5a80:	a1 e0       	ldi	r26, 0x01	; 1
    5a82:	b0 e0       	ldi	r27, 0x00	; 0
    5a84:	ac 0f       	add	r26, r28
    5a86:	bd 1f       	adc	r27, r29
    5a88:	ac 0d       	add	r26, r12
    5a8a:	bd 1d       	adc	r27, r13
    5a8c:	fe 01       	movw	r30, r28
    5a8e:	31 96       	adiw	r30, 0x01	; 1
    5a90:	20 e0       	ldi	r18, 0x00	; 0
    5a92:	30 e0       	ldi	r19, 0x00	; 0
		c = s[i];
    5a94:	40 81       	ld	r20, Z
		s[i] = s[j];
    5a96:	5e 91       	ld	r21, -X
    5a98:	51 93       	st	Z+, r21
		s[j] = c;
    5a9a:	4c 93       	st	X, r20
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    5a9c:	2f 5f       	subi	r18, 0xFF	; 255
    5a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    5aa0:	01 97       	sbiw	r24, 0x01	; 1
    5aa2:	28 17       	cp	r18, r24
    5aa4:	39 07       	cpc	r19, r25
    5aa6:	b4 f3       	brlt	.-20     	; 0x5a94 <menu_draw_week_frame+0xe0>
	
	//append zero
	if (env_var.time.week < 10) {
    5aa8:	f9 e0       	ldi	r31, 0x09	; 9
    5aaa:	f7 15       	cp	r31, r7
    5aac:	20 f0       	brcs	.+8      	; 0x5ab6 <menu_draw_week_frame+0x102>
		temp = buffer[0];
    5aae:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    5ab0:	90 e3       	ldi	r25, 0x30	; 48
    5ab2:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    5ab4:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(5,3,buffer[0],1,1);
    5ab6:	49 81       	ldd	r20, Y+1	; 0x01
    5ab8:	50 e0       	ldi	r21, 0x00	; 0
    5aba:	01 e0       	ldi	r16, 0x01	; 1
    5abc:	10 e0       	ldi	r17, 0x00	; 0
    5abe:	21 e0       	ldi	r18, 0x01	; 1
    5ac0:	30 e0       	ldi	r19, 0x00	; 0
    5ac2:	63 e0       	ldi	r22, 0x03	; 3
    5ac4:	70 e0       	ldi	r23, 0x00	; 0
    5ac6:	85 e0       	ldi	r24, 0x05	; 5
    5ac8:	90 e0       	ldi	r25, 0x00	; 0
    5aca:	4b d9       	rcall	.-3434   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(9,3,buffer[1],1,1);
    5acc:	4a 81       	ldd	r20, Y+2	; 0x02
    5ace:	50 e0       	ldi	r21, 0x00	; 0
    5ad0:	21 e0       	ldi	r18, 0x01	; 1
    5ad2:	30 e0       	ldi	r19, 0x00	; 0
    5ad4:	63 e0       	ldi	r22, 0x03	; 3
    5ad6:	70 e0       	ldi	r23, 0x00	; 0
    5ad8:	89 e0       	ldi	r24, 0x09	; 9
    5ada:	90 e0       	ldi	r25, 0x00	; 0
    5adc:	42 d9       	rcall	.-3452   	; 0x4d62 <display_draw_small_char>
}
    5ade:	0f 90       	pop	r0
    5ae0:	0f 90       	pop	r0
    5ae2:	df 91       	pop	r29
    5ae4:	cf 91       	pop	r28
    5ae6:	1f 91       	pop	r17
    5ae8:	0f 91       	pop	r16
    5aea:	ff 90       	pop	r15
    5aec:	ef 90       	pop	r14
    5aee:	df 90       	pop	r13
    5af0:	cf 90       	pop	r12
    5af2:	bf 90       	pop	r11
    5af4:	af 90       	pop	r10
    5af6:	9f 90       	pop	r9
    5af8:	8f 90       	pop	r8
    5afa:	7f 90       	pop	r7
    5afc:	08 95       	ret

00005afe <menu_draw_weekday_frame>:

void menu_draw_weekday_frame(void) {
    5afe:	0f 93       	push	r16
    5b00:	1f 93       	push	r17
    5b02:	cf 93       	push	r28
    5b04:	df 93       	push	r29
    5b06:	00 d0       	rcall	.+0      	; 0x5b08 <menu_draw_weekday_frame+0xa>
    5b08:	1f 92       	push	r1
    5b0a:	cd b7       	in	r28, 0x3d	; 61
    5b0c:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'W',1,1);
    5b0e:	01 e0       	ldi	r16, 0x01	; 1
    5b10:	10 e0       	ldi	r17, 0x00	; 0
    5b12:	21 e0       	ldi	r18, 0x01	; 1
    5b14:	30 e0       	ldi	r19, 0x00	; 0
    5b16:	47 e5       	ldi	r20, 0x57	; 87
    5b18:	50 e0       	ldi	r21, 0x00	; 0
    5b1a:	6a e0       	ldi	r22, 0x0A	; 10
    5b1c:	70 e0       	ldi	r23, 0x00	; 0
    5b1e:	81 e0       	ldi	r24, 0x01	; 1
    5b20:	90 e0       	ldi	r25, 0x00	; 0
    5b22:	1f d9       	rcall	.-3522   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(5,10,'D',1,1);
    5b24:	21 e0       	ldi	r18, 0x01	; 1
    5b26:	30 e0       	ldi	r19, 0x00	; 0
    5b28:	44 e4       	ldi	r20, 0x44	; 68
    5b2a:	50 e0       	ldi	r21, 0x00	; 0
    5b2c:	6a e0       	ldi	r22, 0x0A	; 10
    5b2e:	70 e0       	ldi	r23, 0x00	; 0
    5b30:	85 e0       	ldi	r24, 0x05	; 5
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	16 d9       	rcall	.-3540   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(9,10,'A',1,1);
    5b36:	21 e0       	ldi	r18, 0x01	; 1
    5b38:	30 e0       	ldi	r19, 0x00	; 0
    5b3a:	41 e4       	ldi	r20, 0x41	; 65
    5b3c:	50 e0       	ldi	r21, 0x00	; 0
    5b3e:	6a e0       	ldi	r22, 0x0A	; 10
    5b40:	70 e0       	ldi	r23, 0x00	; 0
    5b42:	89 e0       	ldi	r24, 0x09	; 9
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	0d d9       	rcall	.-3558   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(13,10,'Y',1,1);
    5b48:	21 e0       	ldi	r18, 0x01	; 1
    5b4a:	30 e0       	ldi	r19, 0x00	; 0
    5b4c:	49 e5       	ldi	r20, 0x59	; 89
    5b4e:	50 e0       	ldi	r21, 0x00	; 0
    5b50:	6a e0       	ldi	r22, 0x0A	; 10
    5b52:	70 e0       	ldi	r23, 0x00	; 0
    5b54:	8d e0       	ldi	r24, 0x0D	; 13
    5b56:	90 e0       	ldi	r25, 0x00	; 0
    5b58:	04 d9       	rcall	.-3576   	; 0x4d62 <display_draw_small_char>
	
	char buffer[3];
	strncpy(buffer,time_get_day_name(env_var.time.weekday),3);
    5b5a:	80 91 d2 29 	lds	r24, 0x29D2
    5b5e:	90 e0       	ldi	r25, 0x00	; 0
    5b60:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <time_get_day_name>
    5b64:	43 e0       	ldi	r20, 0x03	; 3
    5b66:	50 e0       	ldi	r21, 0x00	; 0
    5b68:	bc 01       	movw	r22, r24
    5b6a:	ce 01       	movw	r24, r28
    5b6c:	01 96       	adiw	r24, 0x01	; 1
    5b6e:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <strncpy>
	
	display_draw_small_char(3,3,buffer[0],1,1);
    5b72:	49 81       	ldd	r20, Y+1	; 0x01
    5b74:	50 e0       	ldi	r21, 0x00	; 0
    5b76:	21 e0       	ldi	r18, 0x01	; 1
    5b78:	30 e0       	ldi	r19, 0x00	; 0
    5b7a:	63 e0       	ldi	r22, 0x03	; 3
    5b7c:	70 e0       	ldi	r23, 0x00	; 0
    5b7e:	83 e0       	ldi	r24, 0x03	; 3
    5b80:	90 e0       	ldi	r25, 0x00	; 0
    5b82:	ef d8       	rcall	.-3618   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(7,3,buffer[1],1,1);
    5b84:	4a 81       	ldd	r20, Y+2	; 0x02
    5b86:	50 e0       	ldi	r21, 0x00	; 0
    5b88:	21 e0       	ldi	r18, 0x01	; 1
    5b8a:	30 e0       	ldi	r19, 0x00	; 0
    5b8c:	63 e0       	ldi	r22, 0x03	; 3
    5b8e:	70 e0       	ldi	r23, 0x00	; 0
    5b90:	87 e0       	ldi	r24, 0x07	; 7
    5b92:	90 e0       	ldi	r25, 0x00	; 0
    5b94:	e6 d8       	rcall	.-3636   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(11,3,buffer[2],1,1);
    5b96:	4b 81       	ldd	r20, Y+3	; 0x03
    5b98:	50 e0       	ldi	r21, 0x00	; 0
    5b9a:	21 e0       	ldi	r18, 0x01	; 1
    5b9c:	30 e0       	ldi	r19, 0x00	; 0
    5b9e:	63 e0       	ldi	r22, 0x03	; 3
    5ba0:	70 e0       	ldi	r23, 0x00	; 0
    5ba2:	8b e0       	ldi	r24, 0x0B	; 11
    5ba4:	90 e0       	ldi	r25, 0x00	; 0
    5ba6:	dd d8       	rcall	.-3654   	; 0x4d62 <display_draw_small_char>
}
    5ba8:	23 96       	adiw	r28, 0x03	; 3
    5baa:	cd bf       	out	0x3d, r28	; 61
    5bac:	de bf       	out	0x3e, r29	; 62
    5bae:	df 91       	pop	r29
    5bb0:	cf 91       	pop	r28
    5bb2:	1f 91       	pop	r17
    5bb4:	0f 91       	pop	r16
    5bb6:	08 95       	ret

00005bb8 <menu_draw_battery_frame>:

void menu_draw_battery_frame(void) {
    5bb8:	0f 93       	push	r16
    5bba:	1f 93       	push	r17
	display_draw_small_char(1,10,'B',1,1);
    5bbc:	01 e0       	ldi	r16, 0x01	; 1
    5bbe:	10 e0       	ldi	r17, 0x00	; 0
    5bc0:	21 e0       	ldi	r18, 0x01	; 1
    5bc2:	30 e0       	ldi	r19, 0x00	; 0
    5bc4:	42 e4       	ldi	r20, 0x42	; 66
    5bc6:	50 e0       	ldi	r21, 0x00	; 0
    5bc8:	6a e0       	ldi	r22, 0x0A	; 10
    5bca:	70 e0       	ldi	r23, 0x00	; 0
    5bcc:	81 e0       	ldi	r24, 0x01	; 1
    5bce:	90 e0       	ldi	r25, 0x00	; 0
    5bd0:	c8 d8       	rcall	.-3696   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(5,10,'A',1,1);
    5bd2:	21 e0       	ldi	r18, 0x01	; 1
    5bd4:	30 e0       	ldi	r19, 0x00	; 0
    5bd6:	41 e4       	ldi	r20, 0x41	; 65
    5bd8:	50 e0       	ldi	r21, 0x00	; 0
    5bda:	6a e0       	ldi	r22, 0x0A	; 10
    5bdc:	70 e0       	ldi	r23, 0x00	; 0
    5bde:	85 e0       	ldi	r24, 0x05	; 5
    5be0:	90 e0       	ldi	r25, 0x00	; 0
    5be2:	bf d8       	rcall	.-3714   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(9,10,'T',1,1);
    5be4:	21 e0       	ldi	r18, 0x01	; 1
    5be6:	30 e0       	ldi	r19, 0x00	; 0
    5be8:	44 e5       	ldi	r20, 0x54	; 84
    5bea:	50 e0       	ldi	r21, 0x00	; 0
    5bec:	6a e0       	ldi	r22, 0x0A	; 10
    5bee:	70 e0       	ldi	r23, 0x00	; 0
    5bf0:	89 e0       	ldi	r24, 0x09	; 9
    5bf2:	90 e0       	ldi	r25, 0x00	; 0
    5bf4:	b6 d8       	rcall	.-3732   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(13,10,'T',1,1);
    5bf6:	21 e0       	ldi	r18, 0x01	; 1
    5bf8:	30 e0       	ldi	r19, 0x00	; 0
    5bfa:	44 e5       	ldi	r20, 0x54	; 84
    5bfc:	50 e0       	ldi	r21, 0x00	; 0
    5bfe:	6a e0       	ldi	r22, 0x0A	; 10
    5c00:	70 e0       	ldi	r23, 0x00	; 0
    5c02:	8d e0       	ldi	r24, 0x0D	; 13
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	ad d8       	rcall	.-3750   	; 0x4d62 <display_draw_small_char>

	display_draw_small_char(3,3,'9',1,1);
    5c08:	21 e0       	ldi	r18, 0x01	; 1
    5c0a:	30 e0       	ldi	r19, 0x00	; 0
    5c0c:	49 e3       	ldi	r20, 0x39	; 57
    5c0e:	50 e0       	ldi	r21, 0x00	; 0
    5c10:	63 e0       	ldi	r22, 0x03	; 3
    5c12:	70 e0       	ldi	r23, 0x00	; 0
    5c14:	83 e0       	ldi	r24, 0x03	; 3
    5c16:	90 e0       	ldi	r25, 0x00	; 0
    5c18:	a4 d8       	rcall	.-3768   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(7,3,'9',1,1);
    5c1a:	21 e0       	ldi	r18, 0x01	; 1
    5c1c:	30 e0       	ldi	r19, 0x00	; 0
    5c1e:	49 e3       	ldi	r20, 0x39	; 57
    5c20:	50 e0       	ldi	r21, 0x00	; 0
    5c22:	63 e0       	ldi	r22, 0x03	; 3
    5c24:	70 e0       	ldi	r23, 0x00	; 0
    5c26:	87 e0       	ldi	r24, 0x07	; 7
    5c28:	90 e0       	ldi	r25, 0x00	; 0
    5c2a:	9b d8       	rcall	.-3786   	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(11,3,'%',1,1);
    5c2c:	21 e0       	ldi	r18, 0x01	; 1
    5c2e:	30 e0       	ldi	r19, 0x00	; 0
    5c30:	45 e2       	ldi	r20, 0x25	; 37
    5c32:	50 e0       	ldi	r21, 0x00	; 0
    5c34:	63 e0       	ldi	r22, 0x03	; 3
    5c36:	70 e0       	ldi	r23, 0x00	; 0
    5c38:	8b e0       	ldi	r24, 0x0B	; 11
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	92 d8       	rcall	.-3804   	; 0x4d62 <display_draw_small_char>
}
    5c3e:	1f 91       	pop	r17
    5c40:	0f 91       	pop	r16
    5c42:	08 95       	ret

00005c44 <menu_draw_config_frame>:

void menu_draw_config_frame(void) {
	display_draw_four_letter_word("CONF");
    5c44:	85 ea       	ldi	r24, 0xA5	; 165
    5c46:	96 e2       	ldi	r25, 0x26	; 38
    5c48:	0e c9       	rjmp	.-3556   	; 0x4e66 <display_draw_four_letter_word>
    5c4a:	08 95       	ret

00005c4c <menu_set_env_variables>:
}

void menu_set_env_variables(void) 
{
    5c4c:	ef 92       	push	r14
    5c4e:	ff 92       	push	r15
    5c50:	0f 93       	push	r16
    5c52:	1f 93       	push	r17
    5c54:	cf 93       	push	r28
    5c56:	df 93       	push	r29
	EEPROM_EraseAll();
    5c58:	0e 94 de 07 	call	0xfbc	; 0xfbc <EEPROM_EraseAll>
	
	strncpy(env_var.name,CLOCK_NAME,sizeof(env_var.name));
    5c5c:	44 e1       	ldi	r20, 0x14	; 20
    5c5e:	50 e0       	ldi	r21, 0x00	; 0
    5c60:	6a ea       	ldi	r22, 0xAA	; 170
    5c62:	76 e2       	ldi	r23, 0x26	; 38
    5c64:	8a eb       	ldi	r24, 0xBA	; 186
    5c66:	99 e2       	ldi	r25, 0x29	; 41
    5c68:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <strncpy>
	env_var.id = CLOCK_ID;
    5c6c:	81 e0       	ldi	r24, 0x01	; 1
    5c6e:	90 e0       	ldi	r25, 0x00	; 0
    5c70:	80 93 b8 29 	sts	0x29B8, r24
    5c74:	90 93 b9 29 	sts	0x29B9, r25
	env_var.temperature[0] = '0';
    5c78:	80 e3       	ldi	r24, 0x30	; 48
    5c7a:	80 93 d9 29 	sts	0x29D9, r24
	env_var.brightness = 1;
    5c7e:	c1 e0       	ldi	r28, 0x01	; 1
    5c80:	c0 93 0e 2a 	sts	0x2A0E, r28
	env_var.menu_id = 0;
    5c84:	10 92 39 2a 	sts	0x2A39, r1
	strncpy(env_var.wifi_pswd,PASS,sizeof(env_var.wifi_pswd));
    5c88:	44 e1       	ldi	r20, 0x14	; 20
    5c8a:	50 e0       	ldi	r21, 0x00	; 0
    5c8c:	6f ea       	ldi	r22, 0xAF	; 175
    5c8e:	76 e2       	ldi	r23, 0x26	; 38
    5c90:	81 e1       	ldi	r24, 0x11	; 17
    5c92:	9a e2       	ldi	r25, 0x2A	; 42
    5c94:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <strncpy>
	strncpy(env_var.wifi_ssid,SSID,sizeof(env_var.wifi_ssid));
    5c98:	44 e1       	ldi	r20, 0x14	; 20
    5c9a:	50 e0       	ldi	r21, 0x00	; 0
    5c9c:	6a eb       	ldi	r22, 0xBA	; 186
    5c9e:	76 e2       	ldi	r23, 0x26	; 38
    5ca0:	85 e2       	ldi	r24, 0x25	; 37
    5ca2:	9a e2       	ldi	r25, 0x2A	; 42
    5ca4:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <strncpy>
	
	env_var.time.timezone = 1;
    5ca8:	c0 93 d7 29 	sts	0x29D7, r28
	env_var.time.DST = 0;
    5cac:	10 92 d8 29 	sts	0x29D8, r1
	env_var.time.seconds = 0;
    5cb0:	10 92 ce 29 	sts	0x29CE, r1
	env_var.time.minutes = 57;
    5cb4:	89 e3       	ldi	r24, 0x39	; 57
    5cb6:	80 93 cf 29 	sts	0x29CF, r24
	env_var.time.hours = 23;
    5cba:	87 e1       	ldi	r24, 0x17	; 23
    5cbc:	80 93 d0 29 	sts	0x29D0, r24
	env_var.time.day = 24;
    5cc0:	c1 ed       	ldi	r28, 0xD1	; 209
    5cc2:	d9 e2       	ldi	r29, 0x29	; 41
    5cc4:	88 e1       	ldi	r24, 0x18	; 24
    5cc6:	88 83       	st	Y, r24
	env_var.time.month = December;
    5cc8:	04 ed       	ldi	r16, 0xD4	; 212
    5cca:	19 e2       	ldi	r17, 0x29	; 41
    5ccc:	8c e0       	ldi	r24, 0x0C	; 12
    5cce:	f8 01       	movw	r30, r16
    5cd0:	80 83       	st	Z, r24
	env_var.time.year = 2018;
    5cd2:	0f 2e       	mov	r0, r31
    5cd4:	f5 ed       	ldi	r31, 0xD5	; 213
    5cd6:	ef 2e       	mov	r14, r31
    5cd8:	f9 e2       	ldi	r31, 0x29	; 41
    5cda:	ff 2e       	mov	r15, r31
    5cdc:	f0 2d       	mov	r31, r0
    5cde:	82 ee       	ldi	r24, 0xE2	; 226
    5ce0:	97 e0       	ldi	r25, 0x07	; 7
    5ce2:	f7 01       	movw	r30, r14
    5ce4:	80 83       	st	Z, r24
    5ce6:	91 83       	std	Z+1, r25	; 0x01
	env_var.time.weekday = time_get_weekday(env_var.time.day, env_var.time.month, env_var.time.year);
    5ce8:	42 ee       	ldi	r20, 0xE2	; 226
    5cea:	57 e0       	ldi	r21, 0x07	; 7
    5cec:	6c e0       	ldi	r22, 0x0C	; 12
    5cee:	70 e0       	ldi	r23, 0x00	; 0
    5cf0:	88 e1       	ldi	r24, 0x18	; 24
    5cf2:	90 e0       	ldi	r25, 0x00	; 0
    5cf4:	0e 94 99 38 	call	0x7132	; 0x7132 <time_get_weekday>
    5cf8:	80 93 d2 29 	sts	0x29D2, r24
	env_var.time.week = time_get_weeknumber(env_var.time.day, env_var.time.month, env_var.time.year);;
    5cfc:	f7 01       	movw	r30, r14
    5cfe:	40 81       	ld	r20, Z
    5d00:	51 81       	ldd	r21, Z+1	; 0x01
    5d02:	f8 01       	movw	r30, r16
    5d04:	60 81       	ld	r22, Z
    5d06:	70 e0       	ldi	r23, 0x00	; 0
    5d08:	88 81       	ld	r24, Y
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	0e 94 0f 39 	call	0x721e	; 0x721e <time_get_weeknumber>
    5d10:	80 93 d3 29 	sts	0x29D3, r24
	
	env_var.alarm.hours = 0;
    5d14:	10 92 3b 2a 	sts	0x2A3B, r1
	env_var.alarm.minutes = 0;
    5d18:	10 92 3a 2a 	sts	0x2A3A, r1
}
    5d1c:	df 91       	pop	r29
    5d1e:	cf 91       	pop	r28
    5d20:	1f 91       	pop	r17
    5d22:	0f 91       	pop	r16
    5d24:	ff 90       	pop	r15
    5d26:	ef 90       	pop	r14
    5d28:	08 95       	ret

00005d2a <menu_configure_brightnesss>:
		display_slide_in_from_top();
	}	
	return MENU_SUCCESS;
}

void menu_configure_brightnesss(void) {
    5d2a:	0f 93       	push	r16
    5d2c:	1f 93       	push	r17
    5d2e:	cf 93       	push	r28
    5d30:	df 93       	push	r29
	
	bool quit = false;
	
	ht1632c_set_brightness(env_var.brightness);
    5d32:	ce e0       	ldi	r28, 0x0E	; 14
    5d34:	da e2       	ldi	r29, 0x2A	; 42
    5d36:	88 81       	ld	r24, Y
    5d38:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <ht1632c_set_brightness>
	display_draw_filled_rect(0,7,env_var.brightness,2,1);
    5d3c:	48 81       	ld	r20, Y
    5d3e:	55 27       	eor	r21, r21
    5d40:	47 fd       	sbrc	r20, 7
    5d42:	50 95       	com	r21
    5d44:	01 e0       	ldi	r16, 0x01	; 1
    5d46:	10 e0       	ldi	r17, 0x00	; 0
    5d48:	22 e0       	ldi	r18, 0x02	; 2
    5d4a:	30 e0       	ldi	r19, 0x00	; 0
    5d4c:	67 e0       	ldi	r22, 0x07	; 7
    5d4e:	70 e0       	ldi	r23, 0x00	; 0
    5d50:	80 e0       	ldi	r24, 0x00	; 0
    5d52:	90 e0       	ldi	r25, 0x00	; 0
    5d54:	0e 94 de 24 	call	0x49bc	; 0x49bc <display_draw_filled_rect>
	display_refresh_screen();
    5d58:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
	
	while(!quit) {
		btn_status = btn_check_press();
    5d5c:	0e 94 28 12 	call	0x2450	; 0x2450 <btn_check_press>
    5d60:	80 93 42 2b 	sts	0x2B42, r24

		switch(btn_status) {
    5d64:	80 91 42 2b 	lds	r24, 0x2B42
    5d68:	82 30       	cpi	r24, 0x02	; 2
    5d6a:	09 f4       	brne	.+2      	; 0x5d6e <menu_configure_brightnesss+0x44>
    5d6c:	72 c0       	rjmp	.+228    	; 0x5e52 <menu_configure_brightnesss+0x128>
    5d6e:	18 f4       	brcc	.+6      	; 0x5d76 <menu_configure_brightnesss+0x4c>
    5d70:	81 30       	cpi	r24, 0x01	; 1
    5d72:	b1 f1       	breq	.+108    	; 0x5de0 <menu_configure_brightnesss+0xb6>
    5d74:	75 c0       	rjmp	.+234    	; 0x5e60 <menu_configure_brightnesss+0x136>
    5d76:	83 30       	cpi	r24, 0x03	; 3
    5d78:	09 f4       	brne	.+2      	; 0x5d7c <menu_configure_brightnesss+0x52>
    5d7a:	61 c0       	rjmp	.+194    	; 0x5e3e <menu_configure_brightnesss+0x114>
    5d7c:	84 30       	cpi	r24, 0x04	; 4
    5d7e:	09 f0       	breq	.+2      	; 0x5d82 <menu_configure_brightnesss+0x58>
    5d80:	6f c0       	rjmp	.+222    	; 0x5e60 <menu_configure_brightnesss+0x136>
			case BTN4:
				if (env_var.brightness < 15) {
    5d82:	48 81       	ld	r20, Y
    5d84:	4f 30       	cpi	r20, 0x0F	; 15
    5d86:	14 f5       	brge	.+68     	; 0x5dcc <menu_configure_brightnesss+0xa2>
					display_draw_filled_rect(0,7,env_var.brightness,2,0);
    5d88:	55 27       	eor	r21, r21
    5d8a:	47 fd       	sbrc	r20, 7
    5d8c:	50 95       	com	r21
    5d8e:	00 e0       	ldi	r16, 0x00	; 0
    5d90:	10 e0       	ldi	r17, 0x00	; 0
    5d92:	22 e0       	ldi	r18, 0x02	; 2
    5d94:	30 e0       	ldi	r19, 0x00	; 0
    5d96:	67 e0       	ldi	r22, 0x07	; 7
    5d98:	70 e0       	ldi	r23, 0x00	; 0
    5d9a:	80 e0       	ldi	r24, 0x00	; 0
    5d9c:	90 e0       	ldi	r25, 0x00	; 0
    5d9e:	0e 94 de 24 	call	0x49bc	; 0x49bc <display_draw_filled_rect>
					ht1632c_set_brightness(++env_var.brightness);
    5da2:	88 81       	ld	r24, Y
    5da4:	8f 5f       	subi	r24, 0xFF	; 255
    5da6:	88 83       	st	Y, r24
    5da8:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <ht1632c_set_brightness>
					display_draw_filled_rect(0,7,env_var.brightness,2,1);
    5dac:	48 81       	ld	r20, Y
    5dae:	55 27       	eor	r21, r21
    5db0:	47 fd       	sbrc	r20, 7
    5db2:	50 95       	com	r21
    5db4:	01 e0       	ldi	r16, 0x01	; 1
    5db6:	10 e0       	ldi	r17, 0x00	; 0
    5db8:	22 e0       	ldi	r18, 0x02	; 2
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	67 e0       	ldi	r22, 0x07	; 7
    5dbe:	70 e0       	ldi	r23, 0x00	; 0
    5dc0:	80 e0       	ldi	r24, 0x00	; 0
    5dc2:	90 e0       	ldi	r25, 0x00	; 0
    5dc4:	0e 94 de 24 	call	0x49bc	; 0x49bc <display_draw_filled_rect>
					display_refresh_screen();
    5dc8:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    5dcc:	2f ef       	ldi	r18, 0xFF	; 255
    5dce:	83 ec       	ldi	r24, 0xC3	; 195
    5dd0:	99 e0       	ldi	r25, 0x09	; 9
    5dd2:	21 50       	subi	r18, 0x01	; 1
    5dd4:	80 40       	sbci	r24, 0x00	; 0
    5dd6:	90 40       	sbci	r25, 0x00	; 0
    5dd8:	e1 f7       	brne	.-8      	; 0x5dd2 <menu_configure_brightnesss+0xa8>
    5dda:	00 c0       	rjmp	.+0      	; 0x5ddc <menu_configure_brightnesss+0xb2>
    5ddc:	00 00       	nop
    5dde:	be cf       	rjmp	.-132    	; 0x5d5c <menu_configure_brightnesss+0x32>
				}
				_delay_ms(100);
				break;
			case BTN1:
				if (env_var.brightness > 1) {
    5de0:	48 81       	ld	r20, Y
    5de2:	42 30       	cpi	r20, 0x02	; 2
    5de4:	14 f1       	brlt	.+68     	; 0x5e2a <menu_configure_brightnesss+0x100>
					display_draw_filled_rect(0,7,env_var.brightness,2,0);
    5de6:	55 27       	eor	r21, r21
    5de8:	47 fd       	sbrc	r20, 7
    5dea:	50 95       	com	r21
    5dec:	00 e0       	ldi	r16, 0x00	; 0
    5dee:	10 e0       	ldi	r17, 0x00	; 0
    5df0:	22 e0       	ldi	r18, 0x02	; 2
    5df2:	30 e0       	ldi	r19, 0x00	; 0
    5df4:	67 e0       	ldi	r22, 0x07	; 7
    5df6:	70 e0       	ldi	r23, 0x00	; 0
    5df8:	80 e0       	ldi	r24, 0x00	; 0
    5dfa:	90 e0       	ldi	r25, 0x00	; 0
    5dfc:	0e 94 de 24 	call	0x49bc	; 0x49bc <display_draw_filled_rect>
					ht1632c_set_brightness(--env_var.brightness);
    5e00:	88 81       	ld	r24, Y
    5e02:	81 50       	subi	r24, 0x01	; 1
    5e04:	88 83       	st	Y, r24
    5e06:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <ht1632c_set_brightness>
					display_draw_filled_rect(0,7,env_var.brightness,2,1);
    5e0a:	48 81       	ld	r20, Y
    5e0c:	55 27       	eor	r21, r21
    5e0e:	47 fd       	sbrc	r20, 7
    5e10:	50 95       	com	r21
    5e12:	01 e0       	ldi	r16, 0x01	; 1
    5e14:	10 e0       	ldi	r17, 0x00	; 0
    5e16:	22 e0       	ldi	r18, 0x02	; 2
    5e18:	30 e0       	ldi	r19, 0x00	; 0
    5e1a:	67 e0       	ldi	r22, 0x07	; 7
    5e1c:	70 e0       	ldi	r23, 0x00	; 0
    5e1e:	80 e0       	ldi	r24, 0x00	; 0
    5e20:	90 e0       	ldi	r25, 0x00	; 0
    5e22:	0e 94 de 24 	call	0x49bc	; 0x49bc <display_draw_filled_rect>
					display_refresh_screen();
    5e26:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    5e2a:	2f ef       	ldi	r18, 0xFF	; 255
    5e2c:	83 ec       	ldi	r24, 0xC3	; 195
    5e2e:	99 e0       	ldi	r25, 0x09	; 9
    5e30:	21 50       	subi	r18, 0x01	; 1
    5e32:	80 40       	sbci	r24, 0x00	; 0
    5e34:	90 40       	sbci	r25, 0x00	; 0
    5e36:	e1 f7       	brne	.-8      	; 0x5e30 <menu_configure_brightnesss+0x106>
    5e38:	00 c0       	rjmp	.+0      	; 0x5e3a <menu_configure_brightnesss+0x110>
    5e3a:	00 00       	nop
    5e3c:	8f cf       	rjmp	.-226    	; 0x5d5c <menu_configure_brightnesss+0x32>
				}
				_delay_ms(100);
				break;
			case BTN3:
				display_slide_out_to_bottom();
    5e3e:	81 d8       	rcall	.-3838   	; 0x4f42 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("BRIGHTNESS IS SET",false);
    5e40:	60 e0       	ldi	r22, 0x00	; 0
    5e42:	70 e0       	ldi	r23, 0x00	; 0
    5e44:	84 ec       	ldi	r24, 0xC4	; 196
    5e46:	96 e2       	ldi	r25, 0x26	; 38
    5e48:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
				quit = true;
				EEPROM_WriteEnv();
    5e4c:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <EEPROM_WriteEnv>
    5e50:	13 c0       	rjmp	.+38     	; 0x5e78 <menu_configure_brightnesss+0x14e>
				break;
			case BTN2:
#ifdef SHOW_MANUAL
				display_print_scrolling_text("EXIT",false);
    5e52:	60 e0       	ldi	r22, 0x00	; 0
    5e54:	70 e0       	ldi	r23, 0x00	; 0
    5e56:	86 ed       	ldi	r24, 0xD6	; 214
    5e58:	96 e2       	ldi	r25, 0x26	; 38
    5e5a:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
				return 0;
    5e5e:	0c c0       	rjmp	.+24     	; 0x5e78 <menu_configure_brightnesss+0x14e>
    5e60:	2f ef       	ldi	r18, 0xFF	; 255
    5e62:	83 ec       	ldi	r24, 0xC3	; 195
    5e64:	99 e0       	ldi	r25, 0x09	; 9
    5e66:	21 50       	subi	r18, 0x01	; 1
    5e68:	80 40       	sbci	r24, 0x00	; 0
    5e6a:	90 40       	sbci	r25, 0x00	; 0
    5e6c:	e1 f7       	brne	.-8      	; 0x5e66 <menu_configure_brightnesss+0x13c>
    5e6e:	00 c0       	rjmp	.+0      	; 0x5e70 <menu_configure_brightnesss+0x146>
    5e70:	00 00       	nop
			default:
				_delay_ms(100);
				btn_status = NO_BTN;
    5e72:	10 92 42 2b 	sts	0x2B42, r1
				break;
    5e76:	72 cf       	rjmp	.-284    	; 0x5d5c <menu_configure_brightnesss+0x32>
		}
	}
}
    5e78:	df 91       	pop	r29
    5e7a:	cf 91       	pop	r28
    5e7c:	1f 91       	pop	r17
    5e7e:	0f 91       	pop	r16
    5e80:	08 95       	ret

00005e82 <menu_set_time>:

uint8_t menu_set_time(void) {
    5e82:	2f 92       	push	r2
    5e84:	3f 92       	push	r3
    5e86:	4f 92       	push	r4
    5e88:	5f 92       	push	r5
    5e8a:	6f 92       	push	r6
    5e8c:	7f 92       	push	r7
    5e8e:	8f 92       	push	r8
    5e90:	9f 92       	push	r9
    5e92:	af 92       	push	r10
    5e94:	bf 92       	push	r11
    5e96:	cf 92       	push	r12
    5e98:	df 92       	push	r13
    5e9a:	ef 92       	push	r14
    5e9c:	ff 92       	push	r15
    5e9e:	0f 93       	push	r16
    5ea0:	1f 93       	push	r17
    5ea2:	cf 93       	push	r28
    5ea4:	df 93       	push	r29
    5ea6:	00 d0       	rcall	.+0      	; 0x5ea8 <menu_set_time+0x26>
    5ea8:	1f 92       	push	r1
    5eaa:	cd b7       	in	r28, 0x3d	; 61
    5eac:	de b7       	in	r29, 0x3e	; 62
	bool quit = false;
	bool next = false;
	
	char buffer[3];
	
	display_draw_three_letter_word("GMT");
    5eae:	8b ed       	ldi	r24, 0xDB	; 219
    5eb0:	96 e2       	ldi	r25, 0x26	; 38
    5eb2:	02 d8       	rcall	.-4092   	; 0x4eb8 <display_draw_three_letter_word>
	display_slide_in_from_right();
    5eb4:	25 d8       	rcall	.-4022   	; 0x4f00 <display_slide_in_from_right>
    5eb6:	2f ef       	ldi	r18, 0xFF	; 255
    5eb8:	37 ea       	ldi	r19, 0xA7	; 167
    5eba:	41 e6       	ldi	r20, 0x61	; 97
    5ebc:	21 50       	subi	r18, 0x01	; 1
    5ebe:	30 40       	sbci	r19, 0x00	; 0
    5ec0:	40 40       	sbci	r20, 0x00	; 0
    5ec2:	e1 f7       	brne	.-8      	; 0x5ebc <menu_set_time+0x3a>
    5ec4:	00 c0       	rjmp	.+0      	; 0x5ec6 <menu_set_time+0x44>
    5ec6:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    5ec8:	2c d8       	rcall	.-4008   	; 0x4f22 <display_slide_out_to_left>
	itoa_simple(buffer,env_var.time.timezone);
    5eca:	20 91 d7 29 	lds	r18, 0x29D7
    5ece:	82 2f       	mov	r24, r18
    5ed0:	99 27       	eor	r25, r25
    5ed2:	87 fd       	sbrc	r24, 7
    5ed4:	90 95       	com	r25
    5ed6:	a9 2f       	mov	r26, r25
    5ed8:	b9 2f       	mov	r27, r25
static inline void itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;

	if( num < 0 ) {
    5eda:	bb 23       	and	r27, r27
    5edc:	34 f0       	brlt	.+12     	; 0x5eea <menu_set_time+0x68>
 * about 2 times faster than sprintf (in range [INT_MIN/10 - INT_MAX/10])
 */
static inline void itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    5ede:	bc 01       	movw	r22, r24
    5ee0:	cd 01       	movw	r24, r26
    5ee2:	fe 01       	movw	r30, r28
    5ee4:	31 96       	adiw	r30, 0x01	; 1
    5ee6:	5f 01       	movw	r10, r30
    5ee8:	0f c0       	rjmp	.+30     	; 0x5f08 <menu_set_time+0x86>

	if( num < 0 ) {
		 // forget about the sign, don't reverse it later
		n = -num;
    5eea:	9c 01       	movw	r18, r24
    5eec:	ad 01       	movw	r20, r26
    5eee:	66 27       	eor	r22, r22
    5ef0:	77 27       	eor	r23, r23
    5ef2:	cb 01       	movw	r24, r22
    5ef4:	62 1b       	sub	r22, r18
    5ef6:	73 0b       	sbc	r23, r19
    5ef8:	84 0b       	sbc	r24, r20
    5efa:	95 0b       	sbc	r25, r21
		*s++ = '-';
    5efc:	2d e2       	ldi	r18, 0x2D	; 45
    5efe:	29 83       	std	Y+1, r18	; 0x01
    5f00:	5e 01       	movw	r10, r28
    5f02:	32 e0       	ldi	r19, 0x02	; 2
    5f04:	a3 0e       	add	r10, r19
    5f06:	b1 1c       	adc	r11, r1
    5f08:	8a 2c       	mov	r8, r10
    5f0a:	9b 2c       	mov	r9, r11
    5f0c:	85 01       	movw	r16, r10
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    5f0e:	0f 2e       	mov	r0, r31
    5f10:	fa e0       	ldi	r31, 0x0A	; 10
    5f12:	4f 2e       	mov	r4, r31
    5f14:	51 2c       	mov	r5, r1
    5f16:	61 2c       	mov	r6, r1
    5f18:	71 2c       	mov	r7, r1
    5f1a:	f0 2d       	mov	r31, r0
    5f1c:	78 01       	movw	r14, r16
    5f1e:	4f ef       	ldi	r20, 0xFF	; 255
    5f20:	e4 1a       	sub	r14, r20
    5f22:	f4 0a       	sbc	r15, r20
    5f24:	67 01       	movw	r12, r14
    5f26:	a3 01       	movw	r20, r6
    5f28:	92 01       	movw	r18, r4
    5f2a:	0e 94 c8 3a 	call	0x7590	; 0x7590 <__udivmodsi4>
    5f2e:	60 5d       	subi	r22, 0xD0	; 208
    5f30:	f8 01       	movw	r30, r16
    5f32:	60 83       	st	Z, r22
	} while ((n /= 10) > 0);     /* delete it */
    5f34:	62 2f       	mov	r22, r18
    5f36:	73 2f       	mov	r23, r19
    5f38:	84 2f       	mov	r24, r20
    5f3a:	95 2f       	mov	r25, r21
    5f3c:	61 15       	cp	r22, r1
    5f3e:	71 05       	cpc	r23, r1
    5f40:	81 05       	cpc	r24, r1
    5f42:	91 05       	cpc	r25, r1
    5f44:	11 f0       	breq	.+4      	; 0x5f4a <menu_set_time+0xc8>
    5f46:	87 01       	movw	r16, r14
    5f48:	e9 cf       	rjmp	.-46     	; 0x5f1c <menu_set_time+0x9a>

	reverse_string( rev, s - rev);
    5f4a:	ca 18       	sub	r12, r10
    5f4c:	db 08       	sbc	r13, r11
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    5f4e:	c6 01       	movw	r24, r12
    5f50:	01 97       	sbiw	r24, 0x01	; 1
    5f52:	18 16       	cp	r1, r24
    5f54:	19 06       	cpc	r1, r25
    5f56:	8c f4       	brge	.+34     	; 0x5f7a <menu_set_time+0xf8>
    5f58:	d5 01       	movw	r26, r10
    5f5a:	ac 0d       	add	r26, r12
    5f5c:	bd 1d       	adc	r27, r13
    5f5e:	e8 2d       	mov	r30, r8
    5f60:	f9 2d       	mov	r31, r9
    5f62:	20 e0       	ldi	r18, 0x00	; 0
    5f64:	30 e0       	ldi	r19, 0x00	; 0
		c = s[i];
    5f66:	40 81       	ld	r20, Z
		s[i] = s[j];
    5f68:	5e 91       	ld	r21, -X
    5f6a:	51 93       	st	Z+, r21
		s[j] = c;
    5f6c:	4c 93       	st	X, r20
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    5f6e:	2f 5f       	subi	r18, 0xFF	; 255
    5f70:	3f 4f       	sbci	r19, 0xFF	; 255
    5f72:	01 97       	sbiw	r24, 0x01	; 1
    5f74:	28 17       	cp	r18, r24
    5f76:	39 07       	cpc	r19, r25
    5f78:	b4 f3       	brlt	.-20     	; 0x5f66 <menu_set_time+0xe4>
	display_draw_small_char(3,10,'G',1,1);
    5f7a:	01 e0       	ldi	r16, 0x01	; 1
    5f7c:	10 e0       	ldi	r17, 0x00	; 0
    5f7e:	21 e0       	ldi	r18, 0x01	; 1
    5f80:	30 e0       	ldi	r19, 0x00	; 0
    5f82:	47 e4       	ldi	r20, 0x47	; 71
    5f84:	50 e0       	ldi	r21, 0x00	; 0
    5f86:	6a e0       	ldi	r22, 0x0A	; 10
    5f88:	70 e0       	ldi	r23, 0x00	; 0
    5f8a:	83 e0       	ldi	r24, 0x03	; 3
    5f8c:	90 e0       	ldi	r25, 0x00	; 0
    5f8e:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(7,10,'M',1,1);
    5f92:	21 e0       	ldi	r18, 0x01	; 1
    5f94:	30 e0       	ldi	r19, 0x00	; 0
    5f96:	4d e4       	ldi	r20, 0x4D	; 77
    5f98:	50 e0       	ldi	r21, 0x00	; 0
    5f9a:	6a e0       	ldi	r22, 0x0A	; 10
    5f9c:	70 e0       	ldi	r23, 0x00	; 0
    5f9e:	87 e0       	ldi	r24, 0x07	; 7
    5fa0:	90 e0       	ldi	r25, 0x00	; 0
    5fa2:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
	display_draw_small_char(11,10,'T',1,1);
    5fa6:	21 e0       	ldi	r18, 0x01	; 1
    5fa8:	30 e0       	ldi	r19, 0x00	; 0
    5faa:	44 e5       	ldi	r20, 0x54	; 84
    5fac:	50 e0       	ldi	r21, 0x00	; 0
    5fae:	6a e0       	ldi	r22, 0x0A	; 10
    5fb0:	70 e0       	ldi	r23, 0x00	; 0
    5fb2:	8b e0       	ldi	r24, 0x0B	; 11
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
    5fb6:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
	if (env_var.time.timezone > 0) {
    5fba:	80 91 d7 29 	lds	r24, 0x29D7
    5fbe:	18 16       	cp	r1, r24
    5fc0:	5c f4       	brge	.+22     	; 0x5fd8 <menu_set_time+0x156>
		display_draw_small_char(5,3,'+',1,1);
    5fc2:	21 e0       	ldi	r18, 0x01	; 1
    5fc4:	30 e0       	ldi	r19, 0x00	; 0
    5fc6:	4b e2       	ldi	r20, 0x2B	; 43
    5fc8:	50 e0       	ldi	r21, 0x00	; 0
    5fca:	63 e0       	ldi	r22, 0x03	; 3
    5fcc:	70 e0       	ldi	r23, 0x00	; 0
    5fce:	85 e0       	ldi	r24, 0x05	; 5
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
    5fd6:	0e c0       	rjmp	.+28     	; 0x5ff4 <menu_set_time+0x172>
		} else if (env_var.time.timezone < 0) {
    5fd8:	88 23       	and	r24, r24
    5fda:	64 f4       	brge	.+24     	; 0x5ff4 <menu_set_time+0x172>
		display_draw_small_char(5,3,'-',1,1);
    5fdc:	01 e0       	ldi	r16, 0x01	; 1
    5fde:	10 e0       	ldi	r17, 0x00	; 0
    5fe0:	21 e0       	ldi	r18, 0x01	; 1
    5fe2:	30 e0       	ldi	r19, 0x00	; 0
    5fe4:	4d e2       	ldi	r20, 0x2D	; 45
    5fe6:	50 e0       	ldi	r21, 0x00	; 0
    5fe8:	63 e0       	ldi	r22, 0x03	; 3
    5fea:	70 e0       	ldi	r23, 0x00	; 0
    5fec:	85 e0       	ldi	r24, 0x05	; 5
    5fee:	90 e0       	ldi	r25, 0x00	; 0
    5ff0:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
	}
	display_draw_small_char(9,3,buffer[0],1,1);
    5ff4:	49 81       	ldd	r20, Y+1	; 0x01
    5ff6:	50 e0       	ldi	r21, 0x00	; 0
    5ff8:	01 e0       	ldi	r16, 0x01	; 1
    5ffa:	10 e0       	ldi	r17, 0x00	; 0
    5ffc:	21 e0       	ldi	r18, 0x01	; 1
    5ffe:	30 e0       	ldi	r19, 0x00	; 0
    6000:	63 e0       	ldi	r22, 0x03	; 3
    6002:	70 e0       	ldi	r23, 0x00	; 0
    6004:	89 e0       	ldi	r24, 0x09	; 9
    6006:	90 e0       	ldi	r25, 0x00	; 0
    6008:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
	display_slide_in_from_right();
    600c:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
	ht1632c_blink(true);
    6010:	81 e0       	ldi	r24, 0x01	; 1
    6012:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
	
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
			case BTN4:
				if (env_var.time.timezone < 9) {
    6016:	0f 2e       	mov	r0, r31
    6018:	f7 ed       	ldi	r31, 0xD7	; 215
    601a:	6f 2e       	mov	r6, r31
    601c:	f9 e2       	ldi	r31, 0x29	; 41
    601e:	7f 2e       	mov	r7, r31
    6020:	f0 2d       	mov	r31, r0
		*s++ = '-';
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    6022:	0f 2e       	mov	r0, r31
    6024:	fa e0       	ldi	r31, 0x0A	; 10
    6026:	cf 2e       	mov	r12, r31
    6028:	d1 2c       	mov	r13, r1
    602a:	e1 2c       	mov	r14, r1
    602c:	f1 2c       	mov	r15, r1
    602e:	f0 2d       	mov	r31, r0
	display_draw_small_char(9,3,buffer[0],1,1);
	display_slide_in_from_right();
	ht1632c_blink(true);
	
	while(!next) {
		btn_status = btn_check_press();
    6030:	0e 94 28 12 	call	0x2450	; 0x2450 <btn_check_press>
    6034:	80 93 42 2b 	sts	0x2B42, r24
		switch(btn_status) {
    6038:	80 91 42 2b 	lds	r24, 0x2B42
    603c:	82 30       	cpi	r24, 0x02	; 2
    603e:	09 f4       	brne	.+2      	; 0x6042 <menu_set_time+0x1c0>
    6040:	b9 c1       	rjmp	.+882    	; 0x63b4 <menu_set_time+0x532>
    6042:	20 f4       	brcc	.+8      	; 0x604c <menu_set_time+0x1ca>
    6044:	81 30       	cpi	r24, 0x01	; 1
    6046:	09 f4       	brne	.+2      	; 0x604a <menu_set_time+0x1c8>
    6048:	cc c0       	rjmp	.+408    	; 0x61e2 <menu_set_time+0x360>
    604a:	c1 c1       	rjmp	.+898    	; 0x63ce <menu_set_time+0x54c>
    604c:	83 30       	cpi	r24, 0x03	; 3
    604e:	09 f4       	brne	.+2      	; 0x6052 <menu_set_time+0x1d0>
    6050:	8d c1       	rjmp	.+794    	; 0x636c <menu_set_time+0x4ea>
    6052:	84 30       	cpi	r24, 0x04	; 4
    6054:	09 f0       	breq	.+2      	; 0x6058 <menu_set_time+0x1d6>
    6056:	bb c1       	rjmp	.+886    	; 0x63ce <menu_set_time+0x54c>
			case BTN4:
				if (env_var.time.timezone < 9) {
    6058:	f3 01       	movw	r30, r6
    605a:	80 81       	ld	r24, Z
    605c:	89 30       	cpi	r24, 0x09	; 9
    605e:	0c f0       	brlt	.+2      	; 0x6062 <menu_set_time+0x1e0>
    6060:	b6 c0       	rjmp	.+364    	; 0x61ce <menu_set_time+0x34c>
					display_clear_screen();
    6062:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
					env_var.time.timezone++;
    6066:	f3 01       	movw	r30, r6
    6068:	20 81       	ld	r18, Z
    606a:	2f 5f       	subi	r18, 0xFF	; 255
    606c:	20 83       	st	Z, r18
					itoa_simple(buffer,env_var.time.timezone);
    606e:	82 2f       	mov	r24, r18
    6070:	99 27       	eor	r25, r25
    6072:	87 fd       	sbrc	r24, 7
    6074:	90 95       	com	r25
    6076:	a9 2f       	mov	r26, r25
    6078:	b9 2f       	mov	r27, r25
static inline void itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;

	if( num < 0 ) {
    607a:	bb 23       	and	r27, r27
    607c:	3c f0       	brlt	.+14     	; 0x608c <menu_set_time+0x20a>
 * about 2 times faster than sprintf (in range [INT_MIN/10 - INT_MAX/10])
 */
static inline void itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    607e:	bc 01       	movw	r22, r24
    6080:	cd 01       	movw	r24, r26
    6082:	9e 01       	movw	r18, r28
    6084:	2f 5f       	subi	r18, 0xFF	; 255
    6086:	3f 4f       	sbci	r19, 0xFF	; 255
    6088:	29 01       	movw	r4, r18
    608a:	0f c0       	rjmp	.+30     	; 0x60aa <menu_set_time+0x228>

	if( num < 0 ) {
		 // forget about the sign, don't reverse it later
		n = -num;
    608c:	9c 01       	movw	r18, r24
    608e:	ad 01       	movw	r20, r26
    6090:	66 27       	eor	r22, r22
    6092:	77 27       	eor	r23, r23
    6094:	cb 01       	movw	r24, r22
    6096:	62 1b       	sub	r22, r18
    6098:	73 0b       	sbc	r23, r19
    609a:	84 0b       	sbc	r24, r20
    609c:	95 0b       	sbc	r25, r21
		*s++ = '-';
    609e:	3d e2       	ldi	r19, 0x2D	; 45
    60a0:	39 83       	std	Y+1, r19	; 0x01
    60a2:	ae 01       	movw	r20, r28
    60a4:	4e 5f       	subi	r20, 0xFE	; 254
    60a6:	5f 4f       	sbci	r21, 0xFF	; 255
    60a8:	2a 01       	movw	r4, r20
    60aa:	24 2c       	mov	r2, r4
    60ac:	35 2c       	mov	r3, r5
    60ae:	82 01       	movw	r16, r4
    60b0:	58 01       	movw	r10, r16
    60b2:	5f ef       	ldi	r21, 0xFF	; 255
    60b4:	a5 1a       	sub	r10, r21
    60b6:	b5 0a       	sbc	r11, r21
    60b8:	45 01       	movw	r8, r10
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    60ba:	a7 01       	movw	r20, r14
    60bc:	96 01       	movw	r18, r12
    60be:	0e 94 c8 3a 	call	0x7590	; 0x7590 <__udivmodsi4>
    60c2:	60 5d       	subi	r22, 0xD0	; 208
    60c4:	f8 01       	movw	r30, r16
    60c6:	60 83       	st	Z, r22
	} while ((n /= 10) > 0);     /* delete it */
    60c8:	62 2f       	mov	r22, r18
    60ca:	73 2f       	mov	r23, r19
    60cc:	84 2f       	mov	r24, r20
    60ce:	95 2f       	mov	r25, r21
    60d0:	61 15       	cp	r22, r1
    60d2:	71 05       	cpc	r23, r1
    60d4:	81 05       	cpc	r24, r1
    60d6:	91 05       	cpc	r25, r1
    60d8:	11 f0       	breq	.+4      	; 0x60de <menu_set_time+0x25c>
    60da:	85 01       	movw	r16, r10
    60dc:	e9 cf       	rjmp	.-46     	; 0x60b0 <menu_set_time+0x22e>

	reverse_string( rev, s - rev);
    60de:	84 18       	sub	r8, r4
    60e0:	95 08       	sbc	r9, r5
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    60e2:	c4 01       	movw	r24, r8
    60e4:	01 97       	sbiw	r24, 0x01	; 1
    60e6:	18 16       	cp	r1, r24
    60e8:	19 06       	cpc	r1, r25
    60ea:	8c f4       	brge	.+34     	; 0x610e <menu_set_time+0x28c>
    60ec:	d2 01       	movw	r26, r4
    60ee:	a8 0d       	add	r26, r8
    60f0:	b9 1d       	adc	r27, r9
    60f2:	e2 2d       	mov	r30, r2
    60f4:	f3 2d       	mov	r31, r3
    60f6:	20 e0       	ldi	r18, 0x00	; 0
    60f8:	30 e0       	ldi	r19, 0x00	; 0
		c = s[i];
    60fa:	40 81       	ld	r20, Z
		s[i] = s[j];
    60fc:	5e 91       	ld	r21, -X
    60fe:	51 93       	st	Z+, r21
		s[j] = c;
    6100:	4c 93       	st	X, r20
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    6102:	2f 5f       	subi	r18, 0xFF	; 255
    6104:	3f 4f       	sbci	r19, 0xFF	; 255
    6106:	01 97       	sbiw	r24, 0x01	; 1
    6108:	28 17       	cp	r18, r24
    610a:	39 07       	cpc	r19, r25
    610c:	b4 f3       	brlt	.-20     	; 0x60fa <menu_set_time+0x278>
					display_draw_small_char(3,10,'G',1,1);
    610e:	01 e0       	ldi	r16, 0x01	; 1
    6110:	10 e0       	ldi	r17, 0x00	; 0
    6112:	21 e0       	ldi	r18, 0x01	; 1
    6114:	30 e0       	ldi	r19, 0x00	; 0
    6116:	47 e4       	ldi	r20, 0x47	; 71
    6118:	50 e0       	ldi	r21, 0x00	; 0
    611a:	6a e0       	ldi	r22, 0x0A	; 10
    611c:	70 e0       	ldi	r23, 0x00	; 0
    611e:	83 e0       	ldi	r24, 0x03	; 3
    6120:	90 e0       	ldi	r25, 0x00	; 0
    6122:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
					display_draw_small_char(7,10,'M',1,1);
    6126:	21 e0       	ldi	r18, 0x01	; 1
    6128:	30 e0       	ldi	r19, 0x00	; 0
    612a:	4d e4       	ldi	r20, 0x4D	; 77
    612c:	50 e0       	ldi	r21, 0x00	; 0
    612e:	6a e0       	ldi	r22, 0x0A	; 10
    6130:	70 e0       	ldi	r23, 0x00	; 0
    6132:	87 e0       	ldi	r24, 0x07	; 7
    6134:	90 e0       	ldi	r25, 0x00	; 0
    6136:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
					display_draw_small_char(11,10,'T',1,1);
    613a:	21 e0       	ldi	r18, 0x01	; 1
    613c:	30 e0       	ldi	r19, 0x00	; 0
    613e:	44 e5       	ldi	r20, 0x54	; 84
    6140:	50 e0       	ldi	r21, 0x00	; 0
    6142:	6a e0       	ldi	r22, 0x0A	; 10
    6144:	70 e0       	ldi	r23, 0x00	; 0
    6146:	8b e0       	ldi	r24, 0x0B	; 11
    6148:	90 e0       	ldi	r25, 0x00	; 0
    614a:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
					if (env_var.time.timezone > 0) {
    614e:	f3 01       	movw	r30, r6
    6150:	80 81       	ld	r24, Z
    6152:	18 16       	cp	r1, r24
    6154:	ac f4       	brge	.+42     	; 0x6180 <menu_set_time+0x2fe>
						display_draw_small_char(5,3,'+',1,1);
    6156:	21 e0       	ldi	r18, 0x01	; 1
    6158:	30 e0       	ldi	r19, 0x00	; 0
    615a:	4b e2       	ldi	r20, 0x2B	; 43
    615c:	50 e0       	ldi	r21, 0x00	; 0
    615e:	63 e0       	ldi	r22, 0x03	; 3
    6160:	70 e0       	ldi	r23, 0x00	; 0
    6162:	85 e0       	ldi	r24, 0x05	; 5
    6164:	90 e0       	ldi	r25, 0x00	; 0
    6166:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
						display_draw_small_char(9,3,buffer[0],1,1);
    616a:	49 81       	ldd	r20, Y+1	; 0x01
    616c:	50 e0       	ldi	r21, 0x00	; 0
    616e:	21 e0       	ldi	r18, 0x01	; 1
    6170:	30 e0       	ldi	r19, 0x00	; 0
    6172:	63 e0       	ldi	r22, 0x03	; 3
    6174:	70 e0       	ldi	r23, 0x00	; 0
    6176:	89 e0       	ldi	r24, 0x09	; 9
    6178:	90 e0       	ldi	r25, 0x00	; 0
    617a:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
    617e:	25 c0       	rjmp	.+74     	; 0x61ca <menu_set_time+0x348>
					} else if (env_var.time.timezone < 0) {
    6180:	88 23       	and	r24, r24
    6182:	bc f4       	brge	.+46     	; 0x61b2 <menu_set_time+0x330>
						display_draw_small_char(5,3,'-',1,1);
    6184:	01 e0       	ldi	r16, 0x01	; 1
    6186:	10 e0       	ldi	r17, 0x00	; 0
    6188:	21 e0       	ldi	r18, 0x01	; 1
    618a:	30 e0       	ldi	r19, 0x00	; 0
    618c:	4d e2       	ldi	r20, 0x2D	; 45
    618e:	50 e0       	ldi	r21, 0x00	; 0
    6190:	63 e0       	ldi	r22, 0x03	; 3
    6192:	70 e0       	ldi	r23, 0x00	; 0
    6194:	85 e0       	ldi	r24, 0x05	; 5
    6196:	90 e0       	ldi	r25, 0x00	; 0
    6198:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
						display_draw_small_char(9,3,buffer[1],1,1);
    619c:	4a 81       	ldd	r20, Y+2	; 0x02
    619e:	50 e0       	ldi	r21, 0x00	; 0
    61a0:	21 e0       	ldi	r18, 0x01	; 1
    61a2:	30 e0       	ldi	r19, 0x00	; 0
    61a4:	63 e0       	ldi	r22, 0x03	; 3
    61a6:	70 e0       	ldi	r23, 0x00	; 0
    61a8:	89 e0       	ldi	r24, 0x09	; 9
    61aa:	90 e0       	ldi	r25, 0x00	; 0
    61ac:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
    61b0:	0c c0       	rjmp	.+24     	; 0x61ca <menu_set_time+0x348>
					} else {
						display_draw_small_char(8,3,'0',1,1);
    61b2:	01 e0       	ldi	r16, 0x01	; 1
    61b4:	10 e0       	ldi	r17, 0x00	; 0
    61b6:	21 e0       	ldi	r18, 0x01	; 1
    61b8:	30 e0       	ldi	r19, 0x00	; 0
    61ba:	40 e3       	ldi	r20, 0x30	; 48
    61bc:	50 e0       	ldi	r21, 0x00	; 0
    61be:	63 e0       	ldi	r22, 0x03	; 3
    61c0:	70 e0       	ldi	r23, 0x00	; 0
    61c2:	88 e0       	ldi	r24, 0x08	; 8
    61c4:	90 e0       	ldi	r25, 0x00	; 0
    61c6:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
					}
					display_refresh_screen();
    61ca:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    61ce:	ff ef       	ldi	r31, 0xFF	; 255
    61d0:	29 e6       	ldi	r18, 0x69	; 105
    61d2:	38 e1       	ldi	r19, 0x18	; 24
    61d4:	f1 50       	subi	r31, 0x01	; 1
    61d6:	20 40       	sbci	r18, 0x00	; 0
    61d8:	30 40       	sbci	r19, 0x00	; 0
    61da:	e1 f7       	brne	.-8      	; 0x61d4 <menu_set_time+0x352>
    61dc:	00 c0       	rjmp	.+0      	; 0x61de <menu_set_time+0x35c>
    61de:	00 00       	nop
    61e0:	27 cf       	rjmp	.-434    	; 0x6030 <menu_set_time+0x1ae>
				}
				_delay_ms(250);
				break;
			case BTN1:
				if (env_var.time.timezone > -9) {
    61e2:	f3 01       	movw	r30, r6
    61e4:	80 81       	ld	r24, Z
    61e6:	88 3f       	cpi	r24, 0xF8	; 248
    61e8:	0c f4       	brge	.+2      	; 0x61ec <menu_set_time+0x36a>
    61ea:	b6 c0       	rjmp	.+364    	; 0x6358 <menu_set_time+0x4d6>
					display_clear_screen();
    61ec:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
					env_var.time.timezone--;
    61f0:	f3 01       	movw	r30, r6
    61f2:	20 81       	ld	r18, Z
    61f4:	21 50       	subi	r18, 0x01	; 1
    61f6:	20 83       	st	Z, r18
					itoa_simple(buffer,env_var.time.timezone);
    61f8:	82 2f       	mov	r24, r18
    61fa:	99 27       	eor	r25, r25
    61fc:	87 fd       	sbrc	r24, 7
    61fe:	90 95       	com	r25
    6200:	a9 2f       	mov	r26, r25
    6202:	b9 2f       	mov	r27, r25
static inline void itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;

	if( num < 0 ) {
    6204:	bb 23       	and	r27, r27
    6206:	3c f0       	brlt	.+14     	; 0x6216 <menu_set_time+0x394>
 * about 2 times faster than sprintf (in range [INT_MIN/10 - INT_MAX/10])
 */
static inline void itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    6208:	bc 01       	movw	r22, r24
    620a:	cd 01       	movw	r24, r26
    620c:	9e 01       	movw	r18, r28
    620e:	2f 5f       	subi	r18, 0xFF	; 255
    6210:	3f 4f       	sbci	r19, 0xFF	; 255
    6212:	29 01       	movw	r4, r18
    6214:	0f c0       	rjmp	.+30     	; 0x6234 <menu_set_time+0x3b2>

	if( num < 0 ) {
		 // forget about the sign, don't reverse it later
		n = -num;
    6216:	9c 01       	movw	r18, r24
    6218:	ad 01       	movw	r20, r26
    621a:	66 27       	eor	r22, r22
    621c:	77 27       	eor	r23, r23
    621e:	cb 01       	movw	r24, r22
    6220:	62 1b       	sub	r22, r18
    6222:	73 0b       	sbc	r23, r19
    6224:	84 0b       	sbc	r24, r20
    6226:	95 0b       	sbc	r25, r21
		*s++ = '-';
    6228:	3d e2       	ldi	r19, 0x2D	; 45
    622a:	39 83       	std	Y+1, r19	; 0x01
    622c:	ae 01       	movw	r20, r28
    622e:	4e 5f       	subi	r20, 0xFE	; 254
    6230:	5f 4f       	sbci	r21, 0xFF	; 255
    6232:	2a 01       	movw	r4, r20
    6234:	24 2c       	mov	r2, r4
    6236:	35 2c       	mov	r3, r5
    6238:	82 01       	movw	r16, r4
    623a:	58 01       	movw	r10, r16
    623c:	5f ef       	ldi	r21, 0xFF	; 255
    623e:	a5 1a       	sub	r10, r21
    6240:	b5 0a       	sbc	r11, r21
    6242:	45 01       	movw	r8, r10
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    6244:	a7 01       	movw	r20, r14
    6246:	96 01       	movw	r18, r12
    6248:	0e 94 c8 3a 	call	0x7590	; 0x7590 <__udivmodsi4>
    624c:	60 5d       	subi	r22, 0xD0	; 208
    624e:	f8 01       	movw	r30, r16
    6250:	60 83       	st	Z, r22
	} while ((n /= 10) > 0);     /* delete it */
    6252:	62 2f       	mov	r22, r18
    6254:	73 2f       	mov	r23, r19
    6256:	84 2f       	mov	r24, r20
    6258:	95 2f       	mov	r25, r21
    625a:	61 15       	cp	r22, r1
    625c:	71 05       	cpc	r23, r1
    625e:	81 05       	cpc	r24, r1
    6260:	91 05       	cpc	r25, r1
    6262:	11 f0       	breq	.+4      	; 0x6268 <menu_set_time+0x3e6>
    6264:	85 01       	movw	r16, r10
    6266:	e9 cf       	rjmp	.-46     	; 0x623a <menu_set_time+0x3b8>

	reverse_string( rev, s - rev);
    6268:	84 18       	sub	r8, r4
    626a:	95 08       	sbc	r9, r5
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    626c:	c4 01       	movw	r24, r8
    626e:	01 97       	sbiw	r24, 0x01	; 1
    6270:	18 16       	cp	r1, r24
    6272:	19 06       	cpc	r1, r25
    6274:	8c f4       	brge	.+34     	; 0x6298 <menu_set_time+0x416>
    6276:	d2 01       	movw	r26, r4
    6278:	a8 0d       	add	r26, r8
    627a:	b9 1d       	adc	r27, r9
    627c:	e2 2d       	mov	r30, r2
    627e:	f3 2d       	mov	r31, r3
    6280:	20 e0       	ldi	r18, 0x00	; 0
    6282:	30 e0       	ldi	r19, 0x00	; 0
		c = s[i];
    6284:	40 81       	ld	r20, Z
		s[i] = s[j];
    6286:	5e 91       	ld	r21, -X
    6288:	51 93       	st	Z+, r21
		s[j] = c;
    628a:	4c 93       	st	X, r20
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    628c:	2f 5f       	subi	r18, 0xFF	; 255
    628e:	3f 4f       	sbci	r19, 0xFF	; 255
    6290:	01 97       	sbiw	r24, 0x01	; 1
    6292:	28 17       	cp	r18, r24
    6294:	39 07       	cpc	r19, r25
    6296:	b4 f3       	brlt	.-20     	; 0x6284 <menu_set_time+0x402>
					display_draw_small_char(3,10,'G',1,1);
    6298:	01 e0       	ldi	r16, 0x01	; 1
    629a:	10 e0       	ldi	r17, 0x00	; 0
    629c:	21 e0       	ldi	r18, 0x01	; 1
    629e:	30 e0       	ldi	r19, 0x00	; 0
    62a0:	47 e4       	ldi	r20, 0x47	; 71
    62a2:	50 e0       	ldi	r21, 0x00	; 0
    62a4:	6a e0       	ldi	r22, 0x0A	; 10
    62a6:	70 e0       	ldi	r23, 0x00	; 0
    62a8:	83 e0       	ldi	r24, 0x03	; 3
    62aa:	90 e0       	ldi	r25, 0x00	; 0
    62ac:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
					display_draw_small_char(7,10,'M',1,1);
    62b0:	21 e0       	ldi	r18, 0x01	; 1
    62b2:	30 e0       	ldi	r19, 0x00	; 0
    62b4:	4d e4       	ldi	r20, 0x4D	; 77
    62b6:	50 e0       	ldi	r21, 0x00	; 0
    62b8:	6a e0       	ldi	r22, 0x0A	; 10
    62ba:	70 e0       	ldi	r23, 0x00	; 0
    62bc:	87 e0       	ldi	r24, 0x07	; 7
    62be:	90 e0       	ldi	r25, 0x00	; 0
    62c0:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
					display_draw_small_char(11,10,'T',1,1);
    62c4:	21 e0       	ldi	r18, 0x01	; 1
    62c6:	30 e0       	ldi	r19, 0x00	; 0
    62c8:	44 e5       	ldi	r20, 0x54	; 84
    62ca:	50 e0       	ldi	r21, 0x00	; 0
    62cc:	6a e0       	ldi	r22, 0x0A	; 10
    62ce:	70 e0       	ldi	r23, 0x00	; 0
    62d0:	8b e0       	ldi	r24, 0x0B	; 11
    62d2:	90 e0       	ldi	r25, 0x00	; 0
    62d4:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
					if (env_var.time.timezone > 0) {
    62d8:	f3 01       	movw	r30, r6
    62da:	80 81       	ld	r24, Z
    62dc:	18 16       	cp	r1, r24
    62de:	ac f4       	brge	.+42     	; 0x630a <menu_set_time+0x488>
						display_draw_small_char(5,3,'+',1,1);
    62e0:	21 e0       	ldi	r18, 0x01	; 1
    62e2:	30 e0       	ldi	r19, 0x00	; 0
    62e4:	4b e2       	ldi	r20, 0x2B	; 43
    62e6:	50 e0       	ldi	r21, 0x00	; 0
    62e8:	63 e0       	ldi	r22, 0x03	; 3
    62ea:	70 e0       	ldi	r23, 0x00	; 0
    62ec:	85 e0       	ldi	r24, 0x05	; 5
    62ee:	90 e0       	ldi	r25, 0x00	; 0
    62f0:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
						display_draw_small_char(9,3,buffer[0],1,1);
    62f4:	49 81       	ldd	r20, Y+1	; 0x01
    62f6:	50 e0       	ldi	r21, 0x00	; 0
    62f8:	21 e0       	ldi	r18, 0x01	; 1
    62fa:	30 e0       	ldi	r19, 0x00	; 0
    62fc:	63 e0       	ldi	r22, 0x03	; 3
    62fe:	70 e0       	ldi	r23, 0x00	; 0
    6300:	89 e0       	ldi	r24, 0x09	; 9
    6302:	90 e0       	ldi	r25, 0x00	; 0
    6304:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
    6308:	25 c0       	rjmp	.+74     	; 0x6354 <menu_set_time+0x4d2>
					} else if (env_var.time.timezone < 0) {
    630a:	88 23       	and	r24, r24
    630c:	bc f4       	brge	.+46     	; 0x633c <menu_set_time+0x4ba>
						display_draw_small_char(5,3,'-',1,1);
    630e:	01 e0       	ldi	r16, 0x01	; 1
    6310:	10 e0       	ldi	r17, 0x00	; 0
    6312:	21 e0       	ldi	r18, 0x01	; 1
    6314:	30 e0       	ldi	r19, 0x00	; 0
    6316:	4d e2       	ldi	r20, 0x2D	; 45
    6318:	50 e0       	ldi	r21, 0x00	; 0
    631a:	63 e0       	ldi	r22, 0x03	; 3
    631c:	70 e0       	ldi	r23, 0x00	; 0
    631e:	85 e0       	ldi	r24, 0x05	; 5
    6320:	90 e0       	ldi	r25, 0x00	; 0
    6322:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
						display_draw_small_char(9,3,buffer[1],1,1);
    6326:	4a 81       	ldd	r20, Y+2	; 0x02
    6328:	50 e0       	ldi	r21, 0x00	; 0
    632a:	21 e0       	ldi	r18, 0x01	; 1
    632c:	30 e0       	ldi	r19, 0x00	; 0
    632e:	63 e0       	ldi	r22, 0x03	; 3
    6330:	70 e0       	ldi	r23, 0x00	; 0
    6332:	89 e0       	ldi	r24, 0x09	; 9
    6334:	90 e0       	ldi	r25, 0x00	; 0
    6336:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
    633a:	0c c0       	rjmp	.+24     	; 0x6354 <menu_set_time+0x4d2>
					} else {
						display_draw_small_char(8,3,'0',1,1);
    633c:	01 e0       	ldi	r16, 0x01	; 1
    633e:	10 e0       	ldi	r17, 0x00	; 0
    6340:	21 e0       	ldi	r18, 0x01	; 1
    6342:	30 e0       	ldi	r19, 0x00	; 0
    6344:	40 e3       	ldi	r20, 0x30	; 48
    6346:	50 e0       	ldi	r21, 0x00	; 0
    6348:	63 e0       	ldi	r22, 0x03	; 3
    634a:	70 e0       	ldi	r23, 0x00	; 0
    634c:	88 e0       	ldi	r24, 0x08	; 8
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <display_draw_small_char>
					}
					display_refresh_screen();
    6354:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    6358:	ff ef       	ldi	r31, 0xFF	; 255
    635a:	29 e6       	ldi	r18, 0x69	; 105
    635c:	38 e1       	ldi	r19, 0x18	; 24
    635e:	f1 50       	subi	r31, 0x01	; 1
    6360:	20 40       	sbci	r18, 0x00	; 0
    6362:	30 40       	sbci	r19, 0x00	; 0
    6364:	e1 f7       	brne	.-8      	; 0x635e <menu_set_time+0x4dc>
    6366:	00 c0       	rjmp	.+0      	; 0x6368 <menu_set_time+0x4e6>
    6368:	00 00       	nop
    636a:	62 ce       	rjmp	.-828    	; 0x6030 <menu_set_time+0x1ae>
				}
				_delay_ms(250);
				break;
			case BTN3:
				next = true;
				ht1632c_blink(false);
    636c:	80 e0       	ldi	r24, 0x00	; 0
    636e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
    6372:	4f ef       	ldi	r20, 0xFF	; 255
    6374:	59 e6       	ldi	r21, 0x69	; 105
    6376:	88 e1       	ldi	r24, 0x18	; 24
    6378:	41 50       	subi	r20, 0x01	; 1
    637a:	50 40       	sbci	r21, 0x00	; 0
    637c:	80 40       	sbci	r24, 0x00	; 0
    637e:	e1 f7       	brne	.-8      	; 0x6378 <menu_set_time+0x4f6>
    6380:	00 c0       	rjmp	.+0      	; 0x6382 <menu_set_time+0x500>
    6382:	00 00       	nop
				btn_status = NO_BTN;
				break;
		}
	}
	next = false;
	display_slide_out_to_left();
    6384:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	display_draw_three_letter_word("DST");
    6388:	8f ed       	ldi	r24, 0xDF	; 223
    638a:	96 e2       	ldi	r25, 0x26	; 38
    638c:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <display_draw_three_letter_word>
	display_slide_in_from_right();
    6390:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
    6394:	9f ef       	ldi	r25, 0xFF	; 255
    6396:	e7 ea       	ldi	r30, 0xA7	; 167
    6398:	f1 e6       	ldi	r31, 0x61	; 97
    639a:	91 50       	subi	r25, 0x01	; 1
    639c:	e0 40       	sbci	r30, 0x00	; 0
    639e:	f0 40       	sbci	r31, 0x00	; 0
    63a0:	e1 f7       	brne	.-8      	; 0x639a <menu_set_time+0x518>
    63a2:	00 c0       	rjmp	.+0      	; 0x63a4 <menu_set_time+0x522>
    63a4:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    63a6:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	if (env_var.time.DST) {
    63aa:	80 91 d8 29 	lds	r24, 0x29D8
    63ae:	81 11       	cpse	r24, r1
    63b0:	11 c0       	rjmp	.+34     	; 0x63d4 <menu_set_time+0x552>
    63b2:	15 c0       	rjmp	.+42     	; 0x63de <menu_set_time+0x55c>
				next = true;
				ht1632c_blink(false);
				_delay_ms(250);
				break;
			case BTN2:
				ht1632c_blink(false);
    63b4:	80 e0       	ldi	r24, 0x00	; 0
    63b6:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
				display_slide_out_to_bottom();
    63ba:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    63be:	60 e0       	ldi	r22, 0x00	; 0
    63c0:	70 e0       	ldi	r23, 0x00	; 0
    63c2:	83 ee       	ldi	r24, 0xE3	; 227
    63c4:	96 e2       	ldi	r25, 0x26	; 38
    63c6:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
				return 0;
    63ca:	80 e0       	ldi	r24, 0x00	; 0
    63cc:	27 c3       	rjmp	.+1614   	; 0x6a1c <menu_set_time+0xb9a>
			default:
				btn_status = NO_BTN;
    63ce:	10 92 42 2b 	sts	0x2B42, r1
				break;
    63d2:	2e ce       	rjmp	.-932    	; 0x6030 <menu_set_time+0x1ae>
	display_draw_three_letter_word("DST");
	display_slide_in_from_right();
	_delay_ms(1000);
	display_slide_out_to_left();
	if (env_var.time.DST) {
		display_draw_four_letter_word(" ON ");
    63d4:	8d ee       	ldi	r24, 0xED	; 237
    63d6:	96 e2       	ldi	r25, 0x26	; 38
    63d8:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
    63dc:	04 c0       	rjmp	.+8      	; 0x63e6 <menu_set_time+0x564>
	} else {
		display_draw_three_letter_word("OFF");
    63de:	82 ef       	ldi	r24, 0xF2	; 242
    63e0:	96 e2       	ldi	r25, 0x26	; 38
    63e2:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <display_draw_three_letter_word>
	}
	display_slide_in_from_right();
    63e6:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
	ht1632c_blink(true);
    63ea:	81 e0       	ldi	r24, 0x01	; 1
    63ec:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
			case BTN4:
				display_clear_screen();
				env_var.time.DST = 1;
    63f0:	08 ed       	ldi	r16, 0xD8	; 216
    63f2:	19 e2       	ldi	r17, 0x29	; 41
    63f4:	ff 24       	eor	r15, r15
    63f6:	f3 94       	inc	r15
	display_slide_in_from_right();
	ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
    63f8:	0e 94 28 12 	call	0x2450	; 0x2450 <btn_check_press>
    63fc:	80 93 42 2b 	sts	0x2B42, r24
		switch(btn_status) {
    6400:	80 91 42 2b 	lds	r24, 0x2B42
    6404:	82 30       	cpi	r24, 0x02	; 2
    6406:	09 f4       	brne	.+2      	; 0x640a <menu_set_time+0x588>
    6408:	5b c0       	rjmp	.+182    	; 0x64c0 <menu_set_time+0x63e>
    640a:	18 f4       	brcc	.+6      	; 0x6412 <menu_set_time+0x590>
    640c:	81 30       	cpi	r24, 0x01	; 1
    640e:	d1 f0       	breq	.+52     	; 0x6444 <menu_set_time+0x5c2>
    6410:	64 c0       	rjmp	.+200    	; 0x64da <menu_set_time+0x658>
    6412:	83 30       	cpi	r24, 0x03	; 3
    6414:	59 f1       	breq	.+86     	; 0x646c <menu_set_time+0x5ea>
    6416:	84 30       	cpi	r24, 0x04	; 4
    6418:	09 f0       	breq	.+2      	; 0x641c <menu_set_time+0x59a>
    641a:	5f c0       	rjmp	.+190    	; 0x64da <menu_set_time+0x658>
			case BTN4:
				display_clear_screen();
    641c:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				env_var.time.DST = 1;
    6420:	f8 01       	movw	r30, r16
    6422:	f0 82       	st	Z, r15
				display_draw_four_letter_word(" ON ");
    6424:	8d ee       	ldi	r24, 0xED	; 237
    6426:	96 e2       	ldi	r25, 0x26	; 38
    6428:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
				display_refresh_screen();
    642c:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    6430:	ff ef       	ldi	r31, 0xFF	; 255
    6432:	29 e6       	ldi	r18, 0x69	; 105
    6434:	38 e1       	ldi	r19, 0x18	; 24
    6436:	f1 50       	subi	r31, 0x01	; 1
    6438:	20 40       	sbci	r18, 0x00	; 0
    643a:	30 40       	sbci	r19, 0x00	; 0
    643c:	e1 f7       	brne	.-8      	; 0x6436 <menu_set_time+0x5b4>
    643e:	00 c0       	rjmp	.+0      	; 0x6440 <menu_set_time+0x5be>
    6440:	00 00       	nop
    6442:	da cf       	rjmp	.-76     	; 0x63f8 <menu_set_time+0x576>
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_screen();
    6444:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				env_var.time.DST = 0;
    6448:	f8 01       	movw	r30, r16
    644a:	10 82       	st	Z, r1
				display_draw_three_letter_word("OFF");
    644c:	82 ef       	ldi	r24, 0xF2	; 242
    644e:	96 e2       	ldi	r25, 0x26	; 38
    6450:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <display_draw_three_letter_word>
				display_refresh_screen();
    6454:	0e 94 62 24 	call	0x48c4	; 0x48c4 <display_refresh_screen>
    6458:	ff ef       	ldi	r31, 0xFF	; 255
    645a:	29 e6       	ldi	r18, 0x69	; 105
    645c:	38 e1       	ldi	r19, 0x18	; 24
    645e:	f1 50       	subi	r31, 0x01	; 1
    6460:	20 40       	sbci	r18, 0x00	; 0
    6462:	30 40       	sbci	r19, 0x00	; 0
    6464:	e1 f7       	brne	.-8      	; 0x645e <menu_set_time+0x5dc>
    6466:	00 c0       	rjmp	.+0      	; 0x6468 <menu_set_time+0x5e6>
    6468:	00 00       	nop
    646a:	c6 cf       	rjmp	.-116    	; 0x63f8 <menu_set_time+0x576>
				_delay_ms(250);
				break;
			case BTN3:
				next = true;
				ht1632c_blink(false);
    646c:	80 e0       	ldi	r24, 0x00	; 0
    646e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
    6472:	4f ef       	ldi	r20, 0xFF	; 255
    6474:	59 e6       	ldi	r21, 0x69	; 105
    6476:	88 e1       	ldi	r24, 0x18	; 24
    6478:	41 50       	subi	r20, 0x01	; 1
    647a:	50 40       	sbci	r21, 0x00	; 0
    647c:	80 40       	sbci	r24, 0x00	; 0
    647e:	e1 f7       	brne	.-8      	; 0x6478 <menu_set_time+0x5f6>
    6480:	00 c0       	rjmp	.+0      	; 0x6482 <menu_set_time+0x600>
    6482:	00 00       	nop
				btn_status = NO_BTN;
				break;
		}
	}
	next = false;
	display_slide_out_to_left();
    6484:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	display_draw_three_letter_word("HRS");
    6488:	86 ef       	ldi	r24, 0xF6	; 246
    648a:	96 e2       	ldi	r25, 0x26	; 38
    648c:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <display_draw_three_letter_word>
	display_slide_in_from_right();
    6490:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
    6494:	9f ef       	ldi	r25, 0xFF	; 255
    6496:	e7 ea       	ldi	r30, 0xA7	; 167
    6498:	f1 e6       	ldi	r31, 0x61	; 97
    649a:	91 50       	subi	r25, 0x01	; 1
    649c:	e0 40       	sbci	r30, 0x00	; 0
    649e:	f0 40       	sbci	r31, 0x00	; 0
    64a0:	e1 f7       	brne	.-8      	; 0x649a <menu_set_time+0x618>
    64a2:	00 c0       	rjmp	.+0      	; 0x64a4 <menu_set_time+0x622>
    64a4:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    64a6:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	rtc_update_display(5,env_var.time.hours);
    64aa:	60 91 d0 29 	lds	r22, 0x29D0
    64ae:	85 e0       	ldi	r24, 0x05	; 5
    64b0:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	display_slide_in_from_right();
    64b4:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
	ht1632c_blink(true);
    64b8:	81 e0       	ldi	r24, 0x01	; 1
    64ba:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
    64be:	10 c0       	rjmp	.+32     	; 0x64e0 <menu_set_time+0x65e>
				next = true;
				ht1632c_blink(false);
				_delay_ms(250);
				break;
			case BTN2:
				ht1632c_blink(false);
    64c0:	80 e0       	ldi	r24, 0x00	; 0
    64c2:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
				display_slide_out_to_bottom();
    64c6:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    64ca:	60 e0       	ldi	r22, 0x00	; 0
    64cc:	70 e0       	ldi	r23, 0x00	; 0
    64ce:	83 ee       	ldi	r24, 0xE3	; 227
    64d0:	96 e2       	ldi	r25, 0x26	; 38
    64d2:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
				return 0;
    64d6:	80 e0       	ldi	r24, 0x00	; 0
    64d8:	a1 c2       	rjmp	.+1346   	; 0x6a1c <menu_set_time+0xb9a>
			default:
				btn_status = NO_BTN;
    64da:	10 92 42 2b 	sts	0x2B42, r1
				break;
    64de:	8c cf       	rjmp	.-232    	; 0x63f8 <menu_set_time+0x576>
	display_slide_in_from_right();
	ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
    64e0:	0e 94 28 12 	call	0x2450	; 0x2450 <btn_check_press>
    64e4:	80 93 42 2b 	sts	0x2B42, r24
		switch(btn_status) {
    64e8:	80 91 42 2b 	lds	r24, 0x2B42
    64ec:	82 30       	cpi	r24, 0x02	; 2
    64ee:	09 f4       	brne	.+2      	; 0x64f2 <menu_set_time+0x670>
    64f0:	4f c0       	rjmp	.+158    	; 0x6590 <menu_set_time+0x70e>
    64f2:	18 f4       	brcc	.+6      	; 0x64fa <menu_set_time+0x678>
    64f4:	81 30       	cpi	r24, 0x01	; 1
    64f6:	a1 f0       	breq	.+40     	; 0x6520 <menu_set_time+0x69e>
    64f8:	58 c0       	rjmp	.+176    	; 0x65aa <menu_set_time+0x728>
    64fa:	83 30       	cpi	r24, 0x03	; 3
    64fc:	f9 f0       	breq	.+62     	; 0x653c <menu_set_time+0x6ba>
    64fe:	84 30       	cpi	r24, 0x04	; 4
    6500:	09 f0       	breq	.+2      	; 0x6504 <menu_set_time+0x682>
    6502:	53 c0       	rjmp	.+166    	; 0x65aa <menu_set_time+0x728>
			case BTN4:
				display_clear_screen();
    6504:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_draw_and_increment_hour();
    6508:	0e 94 0d 28 	call	0x501a	; 0x501a <display_draw_and_increment_hour>
    650c:	2f ef       	ldi	r18, 0xFF	; 255
    650e:	39 e6       	ldi	r19, 0x69	; 105
    6510:	48 e1       	ldi	r20, 0x18	; 24
    6512:	21 50       	subi	r18, 0x01	; 1
    6514:	30 40       	sbci	r19, 0x00	; 0
    6516:	40 40       	sbci	r20, 0x00	; 0
    6518:	e1 f7       	brne	.-8      	; 0x6512 <menu_set_time+0x690>
    651a:	00 c0       	rjmp	.+0      	; 0x651c <menu_set_time+0x69a>
    651c:	00 00       	nop
    651e:	e0 cf       	rjmp	.-64     	; 0x64e0 <menu_set_time+0x65e>
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_screen();
    6520:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_draw_and_decrement_hour();
    6524:	0e 94 25 28 	call	0x504a	; 0x504a <display_draw_and_decrement_hour>
    6528:	5f ef       	ldi	r21, 0xFF	; 255
    652a:	89 e6       	ldi	r24, 0x69	; 105
    652c:	98 e1       	ldi	r25, 0x18	; 24
    652e:	51 50       	subi	r21, 0x01	; 1
    6530:	80 40       	sbci	r24, 0x00	; 0
    6532:	90 40       	sbci	r25, 0x00	; 0
    6534:	e1 f7       	brne	.-8      	; 0x652e <menu_set_time+0x6ac>
    6536:	00 c0       	rjmp	.+0      	; 0x6538 <menu_set_time+0x6b6>
    6538:	00 00       	nop
    653a:	d2 cf       	rjmp	.-92     	; 0x64e0 <menu_set_time+0x65e>
    653c:	ef ef       	ldi	r30, 0xFF	; 255
    653e:	f9 e6       	ldi	r31, 0x69	; 105
    6540:	28 e1       	ldi	r18, 0x18	; 24
    6542:	e1 50       	subi	r30, 0x01	; 1
    6544:	f0 40       	sbci	r31, 0x00	; 0
    6546:	20 40       	sbci	r18, 0x00	; 0
    6548:	e1 f7       	brne	.-8      	; 0x6542 <menu_set_time+0x6c0>
    654a:	00 c0       	rjmp	.+0      	; 0x654c <menu_set_time+0x6ca>
    654c:	00 00       	nop
				break;
		}
	}
	next = false;
	
	ht1632c_blink(false);
    654e:	80 e0       	ldi	r24, 0x00	; 0
    6550:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
	display_slide_out_to_left();
    6554:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	display_draw_three_letter_word("MIN");
    6558:	8a ef       	ldi	r24, 0xFA	; 250
    655a:	96 e2       	ldi	r25, 0x26	; 38
    655c:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <display_draw_three_letter_word>
	display_slide_in_from_right();
    6560:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
    6564:	3f ef       	ldi	r19, 0xFF	; 255
    6566:	47 ea       	ldi	r20, 0xA7	; 167
    6568:	51 e6       	ldi	r21, 0x61	; 97
    656a:	31 50       	subi	r19, 0x01	; 1
    656c:	40 40       	sbci	r20, 0x00	; 0
    656e:	50 40       	sbci	r21, 0x00	; 0
    6570:	e1 f7       	brne	.-8      	; 0x656a <menu_set_time+0x6e8>
    6572:	00 c0       	rjmp	.+0      	; 0x6574 <menu_set_time+0x6f2>
    6574:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    6576:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	rtc_update_display(5,env_var.time.minutes);
    657a:	60 91 cf 29 	lds	r22, 0x29CF
    657e:	85 e0       	ldi	r24, 0x05	; 5
    6580:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	display_slide_in_from_right();
    6584:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
	ht1632c_blink(true);
    6588:	81 e0       	ldi	r24, 0x01	; 1
    658a:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
    658e:	10 c0       	rjmp	.+32     	; 0x65b0 <menu_set_time+0x72e>
			case BTN3:
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				ht1632c_blink(false);
    6590:	80 e0       	ldi	r24, 0x00	; 0
    6592:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
				display_slide_out_to_bottom();
    6596:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    659a:	60 e0       	ldi	r22, 0x00	; 0
    659c:	70 e0       	ldi	r23, 0x00	; 0
    659e:	83 ee       	ldi	r24, 0xE3	; 227
    65a0:	96 e2       	ldi	r25, 0x26	; 38
    65a2:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
				return 0;
    65a6:	80 e0       	ldi	r24, 0x00	; 0
    65a8:	39 c2       	rjmp	.+1138   	; 0x6a1c <menu_set_time+0xb9a>
			default:
				btn_status = NO_BTN;
    65aa:	10 92 42 2b 	sts	0x2B42, r1
				break;
    65ae:	98 cf       	rjmp	.-208    	; 0x64e0 <menu_set_time+0x65e>
	display_slide_in_from_right();
	ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
    65b0:	0e 94 28 12 	call	0x2450	; 0x2450 <btn_check_press>
    65b4:	80 93 42 2b 	sts	0x2B42, r24
		switch(btn_status) {
    65b8:	80 91 42 2b 	lds	r24, 0x2B42
    65bc:	82 30       	cpi	r24, 0x02	; 2
    65be:	09 f4       	brne	.+2      	; 0x65c2 <menu_set_time+0x740>
    65c0:	4f c0       	rjmp	.+158    	; 0x6660 <menu_set_time+0x7de>
    65c2:	18 f4       	brcc	.+6      	; 0x65ca <menu_set_time+0x748>
    65c4:	81 30       	cpi	r24, 0x01	; 1
    65c6:	a1 f0       	breq	.+40     	; 0x65f0 <menu_set_time+0x76e>
    65c8:	58 c0       	rjmp	.+176    	; 0x667a <menu_set_time+0x7f8>
    65ca:	83 30       	cpi	r24, 0x03	; 3
    65cc:	f9 f0       	breq	.+62     	; 0x660c <menu_set_time+0x78a>
    65ce:	84 30       	cpi	r24, 0x04	; 4
    65d0:	09 f0       	breq	.+2      	; 0x65d4 <menu_set_time+0x752>
    65d2:	53 c0       	rjmp	.+166    	; 0x667a <menu_set_time+0x7f8>
			case BTN4:
				display_clear_screen();
    65d4:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_draw_and_increment_minute();
    65d8:	0e 94 3e 28 	call	0x507c	; 0x507c <display_draw_and_increment_minute>
    65dc:	8f ef       	ldi	r24, 0xFF	; 255
    65de:	99 e6       	ldi	r25, 0x69	; 105
    65e0:	e8 e1       	ldi	r30, 0x18	; 24
    65e2:	81 50       	subi	r24, 0x01	; 1
    65e4:	90 40       	sbci	r25, 0x00	; 0
    65e6:	e0 40       	sbci	r30, 0x00	; 0
    65e8:	e1 f7       	brne	.-8      	; 0x65e2 <menu_set_time+0x760>
    65ea:	00 c0       	rjmp	.+0      	; 0x65ec <menu_set_time+0x76a>
    65ec:	00 00       	nop
    65ee:	e0 cf       	rjmp	.-64     	; 0x65b0 <menu_set_time+0x72e>
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_screen();
    65f0:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_draw_and_decrement_minute();
    65f4:	0e 94 56 28 	call	0x50ac	; 0x50ac <display_draw_and_decrement_minute>
    65f8:	ff ef       	ldi	r31, 0xFF	; 255
    65fa:	29 e6       	ldi	r18, 0x69	; 105
    65fc:	38 e1       	ldi	r19, 0x18	; 24
    65fe:	f1 50       	subi	r31, 0x01	; 1
    6600:	20 40       	sbci	r18, 0x00	; 0
    6602:	30 40       	sbci	r19, 0x00	; 0
    6604:	e1 f7       	brne	.-8      	; 0x65fe <menu_set_time+0x77c>
    6606:	00 c0       	rjmp	.+0      	; 0x6608 <menu_set_time+0x786>
    6608:	00 00       	nop
    660a:	d2 cf       	rjmp	.-92     	; 0x65b0 <menu_set_time+0x72e>
    660c:	4f ef       	ldi	r20, 0xFF	; 255
    660e:	59 e6       	ldi	r21, 0x69	; 105
    6610:	88 e1       	ldi	r24, 0x18	; 24
    6612:	41 50       	subi	r20, 0x01	; 1
    6614:	50 40       	sbci	r21, 0x00	; 0
    6616:	80 40       	sbci	r24, 0x00	; 0
    6618:	e1 f7       	brne	.-8      	; 0x6612 <menu_set_time+0x790>
    661a:	00 c0       	rjmp	.+0      	; 0x661c <menu_set_time+0x79a>
    661c:	00 00       	nop
				break;
		}
	}
	next = false;
	
	ht1632c_blink(false);
    661e:	80 e0       	ldi	r24, 0x00	; 0
    6620:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
	display_slide_out_to_left();
    6624:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	display_draw_three_letter_word("SEC");
    6628:	8e ef       	ldi	r24, 0xFE	; 254
    662a:	96 e2       	ldi	r25, 0x26	; 38
    662c:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <display_draw_three_letter_word>
	display_slide_in_from_right();
    6630:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
    6634:	9f ef       	ldi	r25, 0xFF	; 255
    6636:	e7 ea       	ldi	r30, 0xA7	; 167
    6638:	f1 e6       	ldi	r31, 0x61	; 97
    663a:	91 50       	subi	r25, 0x01	; 1
    663c:	e0 40       	sbci	r30, 0x00	; 0
    663e:	f0 40       	sbci	r31, 0x00	; 0
    6640:	e1 f7       	brne	.-8      	; 0x663a <menu_set_time+0x7b8>
    6642:	00 c0       	rjmp	.+0      	; 0x6644 <menu_set_time+0x7c2>
    6644:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    6646:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	rtc_update_display(5,env_var.time.seconds);
    664a:	60 91 ce 29 	lds	r22, 0x29CE
    664e:	85 e0       	ldi	r24, 0x05	; 5
    6650:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	display_slide_in_from_right();
    6654:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
	ht1632c_blink(true);
    6658:	81 e0       	ldi	r24, 0x01	; 1
    665a:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
    665e:	10 c0       	rjmp	.+32     	; 0x6680 <menu_set_time+0x7fe>
			case BTN3:
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				ht1632c_blink(false);
    6660:	80 e0       	ldi	r24, 0x00	; 0
    6662:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
				display_slide_out_to_bottom();
    6666:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    666a:	60 e0       	ldi	r22, 0x00	; 0
    666c:	70 e0       	ldi	r23, 0x00	; 0
    666e:	83 ee       	ldi	r24, 0xE3	; 227
    6670:	96 e2       	ldi	r25, 0x26	; 38
    6672:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
				return 0;
    6676:	80 e0       	ldi	r24, 0x00	; 0
    6678:	d1 c1       	rjmp	.+930    	; 0x6a1c <menu_set_time+0xb9a>
			default:
				btn_status = NO_BTN;
    667a:	10 92 42 2b 	sts	0x2B42, r1
				break;
    667e:	98 cf       	rjmp	.-208    	; 0x65b0 <menu_set_time+0x72e>
	display_slide_in_from_right();
	ht1632c_blink(true);
	
	//Set seconds
	while(!next) {
		btn_status = btn_check_press();
    6680:	0e 94 28 12 	call	0x2450	; 0x2450 <btn_check_press>
    6684:	80 93 42 2b 	sts	0x2B42, r24
		switch(btn_status) {
    6688:	80 91 42 2b 	lds	r24, 0x2B42
    668c:	82 30       	cpi	r24, 0x02	; 2
    668e:	09 f4       	brne	.+2      	; 0x6692 <menu_set_time+0x810>
    6690:	50 c0       	rjmp	.+160    	; 0x6732 <menu_set_time+0x8b0>
    6692:	18 f4       	brcc	.+6      	; 0x669a <menu_set_time+0x818>
    6694:	81 30       	cpi	r24, 0x01	; 1
    6696:	a1 f0       	breq	.+40     	; 0x66c0 <menu_set_time+0x83e>
    6698:	59 c0       	rjmp	.+178    	; 0x674c <menu_set_time+0x8ca>
    669a:	83 30       	cpi	r24, 0x03	; 3
    669c:	f9 f0       	breq	.+62     	; 0x66dc <menu_set_time+0x85a>
    669e:	84 30       	cpi	r24, 0x04	; 4
    66a0:	09 f0       	breq	.+2      	; 0x66a4 <menu_set_time+0x822>
    66a2:	54 c0       	rjmp	.+168    	; 0x674c <menu_set_time+0x8ca>
			case BTN4:
				display_clear_screen();
    66a4:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_draw_and_increment_second();
    66a8:	0e 94 6f 28 	call	0x50de	; 0x50de <display_draw_and_increment_second>
    66ac:	2f ef       	ldi	r18, 0xFF	; 255
    66ae:	39 e6       	ldi	r19, 0x69	; 105
    66b0:	48 e1       	ldi	r20, 0x18	; 24
    66b2:	21 50       	subi	r18, 0x01	; 1
    66b4:	30 40       	sbci	r19, 0x00	; 0
    66b6:	40 40       	sbci	r20, 0x00	; 0
    66b8:	e1 f7       	brne	.-8      	; 0x66b2 <menu_set_time+0x830>
    66ba:	00 c0       	rjmp	.+0      	; 0x66bc <menu_set_time+0x83a>
    66bc:	00 00       	nop
    66be:	e0 cf       	rjmp	.-64     	; 0x6680 <menu_set_time+0x7fe>
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_screen();
    66c0:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_draw_and_decrement_second();
    66c4:	0e 94 87 28 	call	0x510e	; 0x510e <display_draw_and_decrement_second>
    66c8:	5f ef       	ldi	r21, 0xFF	; 255
    66ca:	89 e6       	ldi	r24, 0x69	; 105
    66cc:	98 e1       	ldi	r25, 0x18	; 24
    66ce:	51 50       	subi	r21, 0x01	; 1
    66d0:	80 40       	sbci	r24, 0x00	; 0
    66d2:	90 40       	sbci	r25, 0x00	; 0
    66d4:	e1 f7       	brne	.-8      	; 0x66ce <menu_set_time+0x84c>
    66d6:	00 c0       	rjmp	.+0      	; 0x66d8 <menu_set_time+0x856>
    66d8:	00 00       	nop
    66da:	d2 cf       	rjmp	.-92     	; 0x6680 <menu_set_time+0x7fe>
    66dc:	ef ef       	ldi	r30, 0xFF	; 255
    66de:	f9 e6       	ldi	r31, 0x69	; 105
    66e0:	28 e1       	ldi	r18, 0x18	; 24
    66e2:	e1 50       	subi	r30, 0x01	; 1
    66e4:	f0 40       	sbci	r31, 0x00	; 0
    66e6:	20 40       	sbci	r18, 0x00	; 0
    66e8:	e1 f7       	brne	.-8      	; 0x66e2 <menu_set_time+0x860>
    66ea:	00 c0       	rjmp	.+0      	; 0x66ec <menu_set_time+0x86a>
    66ec:	00 00       	nop
				break;
		}
	}
	next = false;
	
	ht1632c_blink(false);
    66ee:	80 e0       	ldi	r24, 0x00	; 0
    66f0:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
	display_slide_out_to_left();
    66f4:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	display_draw_four_letter_word("WDAY");
    66f8:	82 e0       	ldi	r24, 0x02	; 2
    66fa:	97 e2       	ldi	r25, 0x27	; 39
    66fc:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
	display_slide_in_from_right();
    6700:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
    6704:	3f ef       	ldi	r19, 0xFF	; 255
    6706:	47 ea       	ldi	r20, 0xA7	; 167
    6708:	51 e6       	ldi	r21, 0x61	; 97
    670a:	31 50       	subi	r19, 0x01	; 1
    670c:	40 40       	sbci	r20, 0x00	; 0
    670e:	50 40       	sbci	r21, 0x00	; 0
    6710:	e1 f7       	brne	.-8      	; 0x670a <menu_set_time+0x888>
    6712:	00 c0       	rjmp	.+0      	; 0x6714 <menu_set_time+0x892>
    6714:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    6716:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	display_draw_three_letter_word(time_get_day_name(env_var.time.weekday));
    671a:	80 91 d2 29 	lds	r24, 0x29D2
    671e:	90 e0       	ldi	r25, 0x00	; 0
    6720:	6d d4       	rcall	.+2266   	; 0x6ffc <time_get_day_name>
    6722:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <display_draw_three_letter_word>
	display_slide_in_from_right();
    6726:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
	ht1632c_blink(true);
    672a:	81 e0       	ldi	r24, 0x01	; 1
    672c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
    6730:	10 c0       	rjmp	.+32     	; 0x6752 <menu_set_time+0x8d0>
			case BTN3:
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				ht1632c_blink(false);
    6732:	80 e0       	ldi	r24, 0x00	; 0
    6734:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
				display_slide_out_to_bottom();
    6738:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    673c:	60 e0       	ldi	r22, 0x00	; 0
    673e:	70 e0       	ldi	r23, 0x00	; 0
    6740:	83 ee       	ldi	r24, 0xE3	; 227
    6742:	96 e2       	ldi	r25, 0x26	; 38
    6744:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
				return 0;
    6748:	80 e0       	ldi	r24, 0x00	; 0
    674a:	68 c1       	rjmp	.+720    	; 0x6a1c <menu_set_time+0xb9a>
			default:
				btn_status = NO_BTN;
    674c:	10 92 42 2b 	sts	0x2B42, r1
				break;
    6750:	97 cf       	rjmp	.-210    	; 0x6680 <menu_set_time+0x7fe>
	display_slide_in_from_right();
	ht1632c_blink(true);
	
	//Set day
	while(!next) {
		btn_status = btn_check_press();
    6752:	0e 94 28 12 	call	0x2450	; 0x2450 <btn_check_press>
    6756:	80 93 42 2b 	sts	0x2B42, r24
		switch(btn_status) {
    675a:	80 91 42 2b 	lds	r24, 0x2B42
    675e:	82 30       	cpi	r24, 0x02	; 2
    6760:	09 f4       	brne	.+2      	; 0x6764 <menu_set_time+0x8e2>
    6762:	50 c0       	rjmp	.+160    	; 0x6804 <menu_set_time+0x982>
    6764:	18 f4       	brcc	.+6      	; 0x676c <menu_set_time+0x8ea>
    6766:	81 30       	cpi	r24, 0x01	; 1
    6768:	a1 f0       	breq	.+40     	; 0x6792 <menu_set_time+0x910>
    676a:	59 c0       	rjmp	.+178    	; 0x681e <menu_set_time+0x99c>
    676c:	83 30       	cpi	r24, 0x03	; 3
    676e:	f9 f0       	breq	.+62     	; 0x67ae <menu_set_time+0x92c>
    6770:	84 30       	cpi	r24, 0x04	; 4
    6772:	09 f0       	breq	.+2      	; 0x6776 <menu_set_time+0x8f4>
    6774:	54 c0       	rjmp	.+168    	; 0x681e <menu_set_time+0x99c>
			case BTN4:
				display_clear_screen();
    6776:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_draw_and_increment_day();
    677a:	0e 94 a0 28 	call	0x5140	; 0x5140 <display_draw_and_increment_day>
    677e:	8f ef       	ldi	r24, 0xFF	; 255
    6780:	95 ea       	ldi	r25, 0xA5	; 165
    6782:	ee e0       	ldi	r30, 0x0E	; 14
    6784:	81 50       	subi	r24, 0x01	; 1
    6786:	90 40       	sbci	r25, 0x00	; 0
    6788:	e0 40       	sbci	r30, 0x00	; 0
    678a:	e1 f7       	brne	.-8      	; 0x6784 <menu_set_time+0x902>
    678c:	00 c0       	rjmp	.+0      	; 0x678e <menu_set_time+0x90c>
    678e:	00 00       	nop
    6790:	e0 cf       	rjmp	.-64     	; 0x6752 <menu_set_time+0x8d0>
				_delay_ms(150);
				break;
			case BTN1:
				display_clear_screen();
    6792:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_draw_and_decrement_day();
    6796:	0e 94 b8 28 	call	0x5170	; 0x5170 <display_draw_and_decrement_day>
    679a:	ff ef       	ldi	r31, 0xFF	; 255
    679c:	25 ea       	ldi	r18, 0xA5	; 165
    679e:	3e e0       	ldi	r19, 0x0E	; 14
    67a0:	f1 50       	subi	r31, 0x01	; 1
    67a2:	20 40       	sbci	r18, 0x00	; 0
    67a4:	30 40       	sbci	r19, 0x00	; 0
    67a6:	e1 f7       	brne	.-8      	; 0x67a0 <menu_set_time+0x91e>
    67a8:	00 c0       	rjmp	.+0      	; 0x67aa <menu_set_time+0x928>
    67aa:	00 00       	nop
    67ac:	d2 cf       	rjmp	.-92     	; 0x6752 <menu_set_time+0x8d0>
    67ae:	4f ef       	ldi	r20, 0xFF	; 255
    67b0:	59 e6       	ldi	r21, 0x69	; 105
    67b2:	88 e1       	ldi	r24, 0x18	; 24
    67b4:	41 50       	subi	r20, 0x01	; 1
    67b6:	50 40       	sbci	r21, 0x00	; 0
    67b8:	80 40       	sbci	r24, 0x00	; 0
    67ba:	e1 f7       	brne	.-8      	; 0x67b4 <menu_set_time+0x932>
    67bc:	00 c0       	rjmp	.+0      	; 0x67be <menu_set_time+0x93c>
    67be:	00 00       	nop
				break;
		}
	}
	next = false;
	
	ht1632c_blink(false);
    67c0:	80 e0       	ldi	r24, 0x00	; 0
    67c2:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
	display_slide_out_to_left();
    67c6:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	display_draw_four_letter_word("MNTH");
    67ca:	87 e0       	ldi	r24, 0x07	; 7
    67cc:	97 e2       	ldi	r25, 0x27	; 39
    67ce:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
	display_slide_in_from_right();
    67d2:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
    67d6:	9f ef       	ldi	r25, 0xFF	; 255
    67d8:	e7 ea       	ldi	r30, 0xA7	; 167
    67da:	f1 e6       	ldi	r31, 0x61	; 97
    67dc:	91 50       	subi	r25, 0x01	; 1
    67de:	e0 40       	sbci	r30, 0x00	; 0
    67e0:	f0 40       	sbci	r31, 0x00	; 0
    67e2:	e1 f7       	brne	.-8      	; 0x67dc <menu_set_time+0x95a>
    67e4:	00 c0       	rjmp	.+0      	; 0x67e6 <menu_set_time+0x964>
    67e6:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    67e8:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	display_draw_three_letter_word(time_get_month_name(env_var.time.month));
    67ec:	80 91 d4 29 	lds	r24, 0x29D4
    67f0:	90 e0       	ldi	r25, 0x00	; 0
    67f2:	25 d4       	rcall	.+2122   	; 0x703e <time_get_month_name>
    67f4:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <display_draw_three_letter_word>
	display_slide_in_from_right();
    67f8:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
	ht1632c_blink(true);
    67fc:	81 e0       	ldi	r24, 0x01	; 1
    67fe:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
    6802:	10 c0       	rjmp	.+32     	; 0x6824 <menu_set_time+0x9a2>
			case BTN3:
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				ht1632c_blink(false);
    6804:	80 e0       	ldi	r24, 0x00	; 0
    6806:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
				display_slide_out_to_bottom();
    680a:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    680e:	60 e0       	ldi	r22, 0x00	; 0
    6810:	70 e0       	ldi	r23, 0x00	; 0
    6812:	83 ee       	ldi	r24, 0xE3	; 227
    6814:	96 e2       	ldi	r25, 0x26	; 38
    6816:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
				return 0;
    681a:	80 e0       	ldi	r24, 0x00	; 0
    681c:	ff c0       	rjmp	.+510    	; 0x6a1c <menu_set_time+0xb9a>
			default:
				btn_status = NO_BTN;
    681e:	10 92 42 2b 	sts	0x2B42, r1
				break;
    6822:	97 cf       	rjmp	.-210    	; 0x6752 <menu_set_time+0x8d0>
	display_slide_in_from_right();
	ht1632c_blink(true);
	
	//Set month
	while(!next) {
		btn_status = btn_check_press();
    6824:	0e 94 28 12 	call	0x2450	; 0x2450 <btn_check_press>
    6828:	80 93 42 2b 	sts	0x2B42, r24
		switch(btn_status) {
    682c:	80 91 42 2b 	lds	r24, 0x2B42
    6830:	82 30       	cpi	r24, 0x02	; 2
    6832:	09 f4       	brne	.+2      	; 0x6836 <menu_set_time+0x9b4>
    6834:	58 c0       	rjmp	.+176    	; 0x68e6 <menu_set_time+0xa64>
    6836:	18 f4       	brcc	.+6      	; 0x683e <menu_set_time+0x9bc>
    6838:	81 30       	cpi	r24, 0x01	; 1
    683a:	a1 f0       	breq	.+40     	; 0x6864 <menu_set_time+0x9e2>
    683c:	61 c0       	rjmp	.+194    	; 0x6900 <menu_set_time+0xa7e>
    683e:	83 30       	cpi	r24, 0x03	; 3
    6840:	f9 f0       	breq	.+62     	; 0x6880 <menu_set_time+0x9fe>
    6842:	84 30       	cpi	r24, 0x04	; 4
    6844:	09 f0       	breq	.+2      	; 0x6848 <menu_set_time+0x9c6>
    6846:	5c c0       	rjmp	.+184    	; 0x6900 <menu_set_time+0xa7e>
			case BTN4:
				display_clear_screen();
    6848:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_draw_and_increment_month();
    684c:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <display_draw_and_increment_month>
    6850:	2f ef       	ldi	r18, 0xFF	; 255
    6852:	35 ea       	ldi	r19, 0xA5	; 165
    6854:	4e e0       	ldi	r20, 0x0E	; 14
    6856:	21 50       	subi	r18, 0x01	; 1
    6858:	30 40       	sbci	r19, 0x00	; 0
    685a:	40 40       	sbci	r20, 0x00	; 0
    685c:	e1 f7       	brne	.-8      	; 0x6856 <menu_set_time+0x9d4>
    685e:	00 c0       	rjmp	.+0      	; 0x6860 <menu_set_time+0x9de>
    6860:	00 00       	nop
    6862:	e0 cf       	rjmp	.-64     	; 0x6824 <menu_set_time+0x9a2>
				_delay_ms(150);
				break;
			case BTN1:
				display_clear_screen();
    6864:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_draw_and_decrement_month();
    6868:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <display_draw_and_decrement_month>
    686c:	5f ef       	ldi	r21, 0xFF	; 255
    686e:	85 ea       	ldi	r24, 0xA5	; 165
    6870:	9e e0       	ldi	r25, 0x0E	; 14
    6872:	51 50       	subi	r21, 0x01	; 1
    6874:	80 40       	sbci	r24, 0x00	; 0
    6876:	90 40       	sbci	r25, 0x00	; 0
    6878:	e1 f7       	brne	.-8      	; 0x6872 <menu_set_time+0x9f0>
    687a:	00 c0       	rjmp	.+0      	; 0x687c <menu_set_time+0x9fa>
    687c:	00 00       	nop
    687e:	d2 cf       	rjmp	.-92     	; 0x6824 <menu_set_time+0x9a2>
    6880:	ef ef       	ldi	r30, 0xFF	; 255
    6882:	f9 e6       	ldi	r31, 0x69	; 105
    6884:	28 e1       	ldi	r18, 0x18	; 24
    6886:	e1 50       	subi	r30, 0x01	; 1
    6888:	f0 40       	sbci	r31, 0x00	; 0
    688a:	20 40       	sbci	r18, 0x00	; 0
    688c:	e1 f7       	brne	.-8      	; 0x6886 <menu_set_time+0xa04>
    688e:	00 c0       	rjmp	.+0      	; 0x6890 <menu_set_time+0xa0e>
    6890:	00 00       	nop
				break;
		}
	}
	next = false;
	
	ht1632c_blink(false);
    6892:	80 e0       	ldi	r24, 0x00	; 0
    6894:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
	display_slide_out_to_left();
    6898:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	display_draw_four_letter_word("YEAR");
    689c:	8c e0       	ldi	r24, 0x0C	; 12
    689e:	97 e2       	ldi	r25, 0x27	; 39
    68a0:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
	display_slide_in_from_right();
    68a4:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
    68a8:	3f ef       	ldi	r19, 0xFF	; 255
    68aa:	47 ea       	ldi	r20, 0xA7	; 167
    68ac:	51 e6       	ldi	r21, 0x61	; 97
    68ae:	31 50       	subi	r19, 0x01	; 1
    68b0:	40 40       	sbci	r20, 0x00	; 0
    68b2:	50 40       	sbci	r21, 0x00	; 0
    68b4:	e1 f7       	brne	.-8      	; 0x68ae <menu_set_time+0xa2c>
    68b6:	00 c0       	rjmp	.+0      	; 0x68b8 <menu_set_time+0xa36>
    68b8:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    68ba:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
 * about 2 times faster than sprintf (in range [INT_MIN/10 - INT_MAX/10])
 */
static inline void itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    68be:	60 91 d5 29 	lds	r22, 0x29D5
    68c2:	70 91 d6 29 	lds	r23, 0x29D6
    68c6:	80 e0       	ldi	r24, 0x00	; 0
    68c8:	90 e0       	ldi	r25, 0x00	; 0
    68ca:	30 e0       	ldi	r19, 0x00	; 0
    68cc:	20 e0       	ldi	r18, 0x00	; 0
    68ce:	c3 2e       	mov	r12, r19
    68d0:	d2 2e       	mov	r13, r18
    68d2:	03 2f       	mov	r16, r19
    68d4:	12 2f       	mov	r17, r18
		*s++ = '-';
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    68d6:	0f 2e       	mov	r0, r31
    68d8:	fa e0       	ldi	r31, 0x0A	; 10
    68da:	8f 2e       	mov	r8, r31
    68dc:	91 2c       	mov	r9, r1
    68de:	a1 2c       	mov	r10, r1
    68e0:	b1 2c       	mov	r11, r1
    68e2:	f0 2d       	mov	r31, r0
    68e4:	11 c0       	rjmp	.+34     	; 0x6908 <menu_set_time+0xa86>
			case BTN3:
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				ht1632c_blink(false);
    68e6:	80 e0       	ldi	r24, 0x00	; 0
    68e8:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
				display_slide_out_to_bottom();
    68ec:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    68f0:	60 e0       	ldi	r22, 0x00	; 0
    68f2:	70 e0       	ldi	r23, 0x00	; 0
    68f4:	83 ee       	ldi	r24, 0xE3	; 227
    68f6:	96 e2       	ldi	r25, 0x26	; 38
    68f8:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
				return 0;
    68fc:	80 e0       	ldi	r24, 0x00	; 0
    68fe:	8e c0       	rjmp	.+284    	; 0x6a1c <menu_set_time+0xb9a>
			default:
				btn_status = NO_BTN;
    6900:	10 92 42 2b 	sts	0x2B42, r1
				break;
    6904:	8f cf       	rjmp	.-226    	; 0x6824 <menu_set_time+0x9a2>
    6906:	87 01       	movw	r16, r14
    6908:	78 01       	movw	r14, r16
    690a:	ef ef       	ldi	r30, 0xFF	; 255
    690c:	ee 1a       	sub	r14, r30
    690e:	fe 0a       	sbc	r15, r30
    6910:	a5 01       	movw	r20, r10
    6912:	94 01       	movw	r18, r8
    6914:	3d d6       	rcall	.+3194   	; 0x7590 <__udivmodsi4>
    6916:	80 e3       	ldi	r24, 0x30	; 48
    6918:	86 0f       	add	r24, r22
    691a:	f8 01       	movw	r30, r16
    691c:	80 83       	st	Z, r24
	} while ((n /= 10) > 0);     /* delete it */
    691e:	62 2f       	mov	r22, r18
    6920:	73 2f       	mov	r23, r19
    6922:	84 2f       	mov	r24, r20
    6924:	95 2f       	mov	r25, r21
    6926:	61 15       	cp	r22, r1
    6928:	71 05       	cpc	r23, r1
    692a:	81 05       	cpc	r24, r1
    692c:	91 05       	cpc	r25, r1
    692e:	59 f7       	brne	.-42     	; 0x6906 <menu_set_time+0xa84>

	reverse_string( rev, s - rev);
    6930:	8e 2d       	mov	r24, r14
    6932:	9f 2d       	mov	r25, r15
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    6934:	9c 01       	movw	r18, r24
    6936:	21 50       	subi	r18, 0x01	; 1
    6938:	31 09       	sbc	r19, r1
    693a:	12 16       	cp	r1, r18
    693c:	13 06       	cpc	r1, r19
    693e:	84 f4       	brge	.+32     	; 0x6960 <menu_set_time+0xade>
    6940:	dc 01       	movw	r26, r24
    6942:	ec 2d       	mov	r30, r12
    6944:	fd 2d       	mov	r31, r13
    6946:	40 e0       	ldi	r20, 0x00	; 0
    6948:	50 e0       	ldi	r21, 0x00	; 0
		c = s[i];
    694a:	80 81       	ld	r24, Z
		s[i] = s[j];
    694c:	9e 91       	ld	r25, -X
    694e:	91 93       	st	Z+, r25
		s[j] = c;
    6950:	8c 93       	st	X, r24
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    6952:	4f 5f       	subi	r20, 0xFF	; 255
    6954:	5f 4f       	sbci	r21, 0xFF	; 255
    6956:	21 50       	subi	r18, 0x01	; 1
    6958:	31 09       	sbc	r19, r1
    695a:	42 17       	cp	r20, r18
    695c:	53 07       	cpc	r21, r19
    695e:	ac f3       	brlt	.-22     	; 0x694a <menu_set_time+0xac8>
	display_slide_in_from_right();
	_delay_ms(1000);
	display_slide_out_to_left();
	char *year;
	itoa_simple(year,env_var.time.year);
	display_draw_four_letter_word(year);
    6960:	80 e0       	ldi	r24, 0x00	; 0
    6962:	90 e0       	ldi	r25, 0x00	; 0
    6964:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
	display_slide_in_from_right();
    6968:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
	ht1632c_blink(true);
    696c:	81 e0       	ldi	r24, 0x01	; 1
    696e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
	
	//Set year
	while(!next) {
		btn_status = btn_check_press();
    6972:	0e 94 28 12 	call	0x2450	; 0x2450 <btn_check_press>
    6976:	80 93 42 2b 	sts	0x2B42, r24
		switch(btn_status) {
    697a:	80 91 42 2b 	lds	r24, 0x2B42
    697e:	82 30       	cpi	r24, 0x02	; 2
    6980:	e9 f1       	breq	.+122    	; 0x69fc <menu_set_time+0xb7a>
    6982:	18 f4       	brcc	.+6      	; 0x698a <menu_set_time+0xb08>
    6984:	81 30       	cpi	r24, 0x01	; 1
    6986:	a1 f0       	breq	.+40     	; 0x69b0 <menu_set_time+0xb2e>
    6988:	46 c0       	rjmp	.+140    	; 0x6a16 <menu_set_time+0xb94>
    698a:	83 30       	cpi	r24, 0x03	; 3
    698c:	f9 f0       	breq	.+62     	; 0x69cc <menu_set_time+0xb4a>
    698e:	84 30       	cpi	r24, 0x04	; 4
    6990:	09 f0       	breq	.+2      	; 0x6994 <menu_set_time+0xb12>
    6992:	41 c0       	rjmp	.+130    	; 0x6a16 <menu_set_time+0xb94>
			case BTN4:
				display_clear_screen();
    6994:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_draw_and_increment_year();
    6998:	0e 94 00 29 	call	0x5200	; 0x5200 <display_draw_and_increment_year>
    699c:	ff ef       	ldi	r31, 0xFF	; 255
    699e:	25 ea       	ldi	r18, 0xA5	; 165
    69a0:	3e e0       	ldi	r19, 0x0E	; 14
    69a2:	f1 50       	subi	r31, 0x01	; 1
    69a4:	20 40       	sbci	r18, 0x00	; 0
    69a6:	30 40       	sbci	r19, 0x00	; 0
    69a8:	e1 f7       	brne	.-8      	; 0x69a2 <menu_set_time+0xb20>
    69aa:	00 c0       	rjmp	.+0      	; 0x69ac <menu_set_time+0xb2a>
    69ac:	00 00       	nop
    69ae:	e1 cf       	rjmp	.-62     	; 0x6972 <menu_set_time+0xaf0>
				_delay_ms(150);
				break;
			case BTN1:
				display_clear_screen();
    69b0:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_draw_and_decrement_year();
    69b4:	0e 94 5e 29 	call	0x52bc	; 0x52bc <display_draw_and_decrement_year>
    69b8:	4f ef       	ldi	r20, 0xFF	; 255
    69ba:	59 e6       	ldi	r21, 0x69	; 105
    69bc:	88 e1       	ldi	r24, 0x18	; 24
    69be:	41 50       	subi	r20, 0x01	; 1
    69c0:	50 40       	sbci	r21, 0x00	; 0
    69c2:	80 40       	sbci	r24, 0x00	; 0
    69c4:	e1 f7       	brne	.-8      	; 0x69be <menu_set_time+0xb3c>
    69c6:	00 c0       	rjmp	.+0      	; 0x69c8 <menu_set_time+0xb46>
    69c8:	00 00       	nop
    69ca:	d3 cf       	rjmp	.-90     	; 0x6972 <menu_set_time+0xaf0>
    69cc:	9f ef       	ldi	r25, 0xFF	; 255
    69ce:	e5 ea       	ldi	r30, 0xA5	; 165
    69d0:	fe e0       	ldi	r31, 0x0E	; 14
    69d2:	91 50       	subi	r25, 0x01	; 1
    69d4:	e0 40       	sbci	r30, 0x00	; 0
    69d6:	f0 40       	sbci	r31, 0x00	; 0
    69d8:	e1 f7       	brne	.-8      	; 0x69d2 <menu_set_time+0xb50>
    69da:	00 c0       	rjmp	.+0      	; 0x69dc <menu_set_time+0xb5a>
    69dc:	00 00       	nop
				break;
		}
	}
	next = false;
	
	ht1632c_blink(false);
    69de:	80 e0       	ldi	r24, 0x00	; 0
    69e0:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
	EEPROM_WriteEnv();
    69e4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <EEPROM_WriteEnv>
	display_slide_out_to_bottom();
    69e8:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <display_slide_out_to_bottom>
	
#ifdef SHOW_MANUAL
	display_print_scrolling_text("TIME AND DATE IS SET",false);
    69ec:	60 e0       	ldi	r22, 0x00	; 0
    69ee:	70 e0       	ldi	r23, 0x00	; 0
    69f0:	81 e1       	ldi	r24, 0x11	; 17
    69f2:	97 e2       	ldi	r25, 0x27	; 39
    69f4:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
	
	return 1;
    69f8:	81 e0       	ldi	r24, 0x01	; 1
    69fa:	10 c0       	rjmp	.+32     	; 0x6a1c <menu_set_time+0xb9a>
			case BTN3:
				next = true;
				_delay_ms(150);
				break;
			case BTN2:
				ht1632c_blink(false);
    69fc:	80 e0       	ldi	r24, 0x00	; 0
    69fe:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
				display_slide_out_to_bottom();
    6a02:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    6a06:	60 e0       	ldi	r22, 0x00	; 0
    6a08:	70 e0       	ldi	r23, 0x00	; 0
    6a0a:	83 ee       	ldi	r24, 0xE3	; 227
    6a0c:	96 e2       	ldi	r25, 0x26	; 38
    6a0e:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
				return 0;
    6a12:	80 e0       	ldi	r24, 0x00	; 0
    6a14:	03 c0       	rjmp	.+6      	; 0x6a1c <menu_set_time+0xb9a>
			default:
				btn_status = NO_BTN;
    6a16:	10 92 42 2b 	sts	0x2B42, r1
				break;
    6a1a:	ab cf       	rjmp	.-170    	; 0x6972 <menu_set_time+0xaf0>
#ifdef SHOW_MANUAL
	display_print_scrolling_text("TIME AND DATE IS SET",false);
#endif
	
	return 1;
}
    6a1c:	23 96       	adiw	r28, 0x03	; 3
    6a1e:	cd bf       	out	0x3d, r28	; 61
    6a20:	de bf       	out	0x3e, r29	; 62
    6a22:	df 91       	pop	r29
    6a24:	cf 91       	pop	r28
    6a26:	1f 91       	pop	r17
    6a28:	0f 91       	pop	r16
    6a2a:	ff 90       	pop	r15
    6a2c:	ef 90       	pop	r14
    6a2e:	df 90       	pop	r13
    6a30:	cf 90       	pop	r12
    6a32:	bf 90       	pop	r11
    6a34:	af 90       	pop	r10
    6a36:	9f 90       	pop	r9
    6a38:	8f 90       	pop	r8
    6a3a:	7f 90       	pop	r7
    6a3c:	6f 90       	pop	r6
    6a3e:	5f 90       	pop	r5
    6a40:	4f 90       	pop	r4
    6a42:	3f 90       	pop	r3
    6a44:	2f 90       	pop	r2
    6a46:	08 95       	ret

00006a48 <menu_set_alarm>:
uint8_t menu_set_alarm(void) 
{
	bool quit = false;
	bool next = false;
	
	display_draw_three_letter_word("HRS");
    6a48:	86 ef       	ldi	r24, 0xF6	; 246
    6a4a:	96 e2       	ldi	r25, 0x26	; 38
    6a4c:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <display_draw_three_letter_word>
	display_slide_in_from_right();
    6a50:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
    6a54:	2f ef       	ldi	r18, 0xFF	; 255
    6a56:	87 ea       	ldi	r24, 0xA7	; 167
    6a58:	91 e6       	ldi	r25, 0x61	; 97
    6a5a:	21 50       	subi	r18, 0x01	; 1
    6a5c:	80 40       	sbci	r24, 0x00	; 0
    6a5e:	90 40       	sbci	r25, 0x00	; 0
    6a60:	e1 f7       	brne	.-8      	; 0x6a5a <menu_set_alarm+0x12>
    6a62:	00 c0       	rjmp	.+0      	; 0x6a64 <menu_set_alarm+0x1c>
    6a64:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    6a66:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	rtc_update_display(5,env_var.alarm.hours);
    6a6a:	60 91 3b 2a 	lds	r22, 0x2A3B
    6a6e:	85 e0       	ldi	r24, 0x05	; 5
    6a70:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	display_slide_in_from_right();
    6a74:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
	ht1632c_blink(true);
    6a78:	81 e0       	ldi	r24, 0x01	; 1
    6a7a:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
    6a7e:	0e 94 28 12 	call	0x2450	; 0x2450 <btn_check_press>
    6a82:	80 93 42 2b 	sts	0x2B42, r24
		switch(btn_status) {
    6a86:	80 91 42 2b 	lds	r24, 0x2B42
    6a8a:	82 30       	cpi	r24, 0x02	; 2
    6a8c:	09 f4       	brne	.+2      	; 0x6a90 <menu_set_alarm+0x48>
    6a8e:	4f c0       	rjmp	.+158    	; 0x6b2e <menu_set_alarm+0xe6>
    6a90:	18 f4       	brcc	.+6      	; 0x6a98 <menu_set_alarm+0x50>
    6a92:	81 30       	cpi	r24, 0x01	; 1
    6a94:	a1 f0       	breq	.+40     	; 0x6abe <menu_set_alarm+0x76>
    6a96:	58 c0       	rjmp	.+176    	; 0x6b48 <menu_set_alarm+0x100>
    6a98:	83 30       	cpi	r24, 0x03	; 3
    6a9a:	f9 f0       	breq	.+62     	; 0x6ada <menu_set_alarm+0x92>
    6a9c:	84 30       	cpi	r24, 0x04	; 4
    6a9e:	09 f0       	breq	.+2      	; 0x6aa2 <menu_set_alarm+0x5a>
    6aa0:	53 c0       	rjmp	.+166    	; 0x6b48 <menu_set_alarm+0x100>
			case BTN4:
				display_clear_screen();
    6aa2:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_alarm_increment_hour();
    6aa6:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <display_alarm_increment_hour>
    6aaa:	2f ef       	ldi	r18, 0xFF	; 255
    6aac:	85 ea       	ldi	r24, 0xA5	; 165
    6aae:	9e e0       	ldi	r25, 0x0E	; 14
    6ab0:	21 50       	subi	r18, 0x01	; 1
    6ab2:	80 40       	sbci	r24, 0x00	; 0
    6ab4:	90 40       	sbci	r25, 0x00	; 0
    6ab6:	e1 f7       	brne	.-8      	; 0x6ab0 <menu_set_alarm+0x68>
    6ab8:	00 c0       	rjmp	.+0      	; 0x6aba <menu_set_alarm+0x72>
    6aba:	00 00       	nop
    6abc:	e0 cf       	rjmp	.-64     	; 0x6a7e <menu_set_alarm+0x36>
				_delay_ms(150);
				break;
			case BTN1:
				display_clear_screen();
    6abe:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_alarm_decrement_hour();
    6ac2:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <display_alarm_decrement_hour>
    6ac6:	2f ef       	ldi	r18, 0xFF	; 255
    6ac8:	85 ea       	ldi	r24, 0xA5	; 165
    6aca:	9e e0       	ldi	r25, 0x0E	; 14
    6acc:	21 50       	subi	r18, 0x01	; 1
    6ace:	80 40       	sbci	r24, 0x00	; 0
    6ad0:	90 40       	sbci	r25, 0x00	; 0
    6ad2:	e1 f7       	brne	.-8      	; 0x6acc <menu_set_alarm+0x84>
    6ad4:	00 c0       	rjmp	.+0      	; 0x6ad6 <menu_set_alarm+0x8e>
    6ad6:	00 00       	nop
    6ad8:	d2 cf       	rjmp	.-92     	; 0x6a7e <menu_set_alarm+0x36>
    6ada:	2f ef       	ldi	r18, 0xFF	; 255
    6adc:	89 e6       	ldi	r24, 0x69	; 105
    6ade:	98 e1       	ldi	r25, 0x18	; 24
    6ae0:	21 50       	subi	r18, 0x01	; 1
    6ae2:	80 40       	sbci	r24, 0x00	; 0
    6ae4:	90 40       	sbci	r25, 0x00	; 0
    6ae6:	e1 f7       	brne	.-8      	; 0x6ae0 <menu_set_alarm+0x98>
    6ae8:	00 c0       	rjmp	.+0      	; 0x6aea <menu_set_alarm+0xa2>
    6aea:	00 00       	nop
				break;
		}
	}
	next = false;
	
	ht1632c_blink(false);
    6aec:	80 e0       	ldi	r24, 0x00	; 0
    6aee:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
	display_slide_out_to_left();
    6af2:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	display_draw_three_letter_word("MIN");
    6af6:	8a ef       	ldi	r24, 0xFA	; 250
    6af8:	96 e2       	ldi	r25, 0x26	; 38
    6afa:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <display_draw_three_letter_word>
	display_slide_in_from_right();
    6afe:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
    6b02:	2f ef       	ldi	r18, 0xFF	; 255
    6b04:	87 ea       	ldi	r24, 0xA7	; 167
    6b06:	91 e6       	ldi	r25, 0x61	; 97
    6b08:	21 50       	subi	r18, 0x01	; 1
    6b0a:	80 40       	sbci	r24, 0x00	; 0
    6b0c:	90 40       	sbci	r25, 0x00	; 0
    6b0e:	e1 f7       	brne	.-8      	; 0x6b08 <menu_set_alarm+0xc0>
    6b10:	00 c0       	rjmp	.+0      	; 0x6b12 <menu_set_alarm+0xca>
    6b12:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    6b14:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	rtc_update_display(5,env_var.alarm.minutes);
    6b18:	60 91 3a 2a 	lds	r22, 0x2A3A
    6b1c:	85 e0       	ldi	r24, 0x05	; 5
    6b1e:	0e 94 0a 13 	call	0x2614	; 0x2614 <rtc_update_display>
	display_slide_in_from_right();
    6b22:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
	ht1632c_blink(true);
    6b26:	81 e0       	ldi	r24, 0x01	; 1
    6b28:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
    6b2c:	10 c0       	rjmp	.+32     	; 0x6b4e <menu_set_alarm+0x106>
			case BTN3:
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				ht1632c_blink(false);
    6b2e:	80 e0       	ldi	r24, 0x00	; 0
    6b30:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
				display_slide_out_to_bottom();
    6b34:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    6b38:	60 e0       	ldi	r22, 0x00	; 0
    6b3a:	70 e0       	ldi	r23, 0x00	; 0
    6b3c:	83 ee       	ldi	r24, 0xE3	; 227
    6b3e:	96 e2       	ldi	r25, 0x26	; 38
    6b40:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
				return 0;
    6b44:	80 e0       	ldi	r24, 0x00	; 0
    6b46:	08 95       	ret
			default:
				btn_status = NO_BTN;
    6b48:	10 92 42 2b 	sts	0x2B42, r1
				break;
    6b4c:	98 cf       	rjmp	.-208    	; 0x6a7e <menu_set_alarm+0x36>
	display_slide_in_from_right();
	ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
    6b4e:	0e 94 28 12 	call	0x2450	; 0x2450 <btn_check_press>
    6b52:	80 93 42 2b 	sts	0x2B42, r24
		switch(btn_status) {
    6b56:	80 91 42 2b 	lds	r24, 0x2B42
    6b5a:	82 30       	cpi	r24, 0x02	; 2
    6b5c:	e9 f1       	breq	.+122    	; 0x6bd8 <menu_set_alarm+0x190>
    6b5e:	18 f4       	brcc	.+6      	; 0x6b66 <menu_set_alarm+0x11e>
    6b60:	81 30       	cpi	r24, 0x01	; 1
    6b62:	a1 f0       	breq	.+40     	; 0x6b8c <menu_set_alarm+0x144>
    6b64:	46 c0       	rjmp	.+140    	; 0x6bf2 <menu_set_alarm+0x1aa>
    6b66:	83 30       	cpi	r24, 0x03	; 3
    6b68:	f9 f0       	breq	.+62     	; 0x6ba8 <menu_set_alarm+0x160>
    6b6a:	84 30       	cpi	r24, 0x04	; 4
    6b6c:	09 f0       	breq	.+2      	; 0x6b70 <menu_set_alarm+0x128>
    6b6e:	41 c0       	rjmp	.+130    	; 0x6bf2 <menu_set_alarm+0x1aa>
			case BTN4:
				display_clear_screen();
    6b70:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_alarm_increment_minute();
    6b74:	0e 94 a9 27 	call	0x4f52	; 0x4f52 <display_alarm_increment_minute>
    6b78:	2f ef       	ldi	r18, 0xFF	; 255
    6b7a:	85 ea       	ldi	r24, 0xA5	; 165
    6b7c:	9e e0       	ldi	r25, 0x0E	; 14
    6b7e:	21 50       	subi	r18, 0x01	; 1
    6b80:	80 40       	sbci	r24, 0x00	; 0
    6b82:	90 40       	sbci	r25, 0x00	; 0
    6b84:	e1 f7       	brne	.-8      	; 0x6b7e <menu_set_alarm+0x136>
    6b86:	00 c0       	rjmp	.+0      	; 0x6b88 <menu_set_alarm+0x140>
    6b88:	00 00       	nop
    6b8a:	e1 cf       	rjmp	.-62     	; 0x6b4e <menu_set_alarm+0x106>
				_delay_ms(150);
				break;
			case BTN1:
				display_clear_screen();
    6b8c:	0e 94 5f 24 	call	0x48be	; 0x48be <display_clear_screen>
				display_alarm_decrement_minute();
    6b90:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <display_alarm_decrement_minute>
    6b94:	2f ef       	ldi	r18, 0xFF	; 255
    6b96:	85 ea       	ldi	r24, 0xA5	; 165
    6b98:	9e e0       	ldi	r25, 0x0E	; 14
    6b9a:	21 50       	subi	r18, 0x01	; 1
    6b9c:	80 40       	sbci	r24, 0x00	; 0
    6b9e:	90 40       	sbci	r25, 0x00	; 0
    6ba0:	e1 f7       	brne	.-8      	; 0x6b9a <menu_set_alarm+0x152>
    6ba2:	00 c0       	rjmp	.+0      	; 0x6ba4 <menu_set_alarm+0x15c>
    6ba4:	00 00       	nop
    6ba6:	d3 cf       	rjmp	.-90     	; 0x6b4e <menu_set_alarm+0x106>
    6ba8:	2f ef       	ldi	r18, 0xFF	; 255
    6baa:	89 e6       	ldi	r24, 0x69	; 105
    6bac:	98 e1       	ldi	r25, 0x18	; 24
    6bae:	21 50       	subi	r18, 0x01	; 1
    6bb0:	80 40       	sbci	r24, 0x00	; 0
    6bb2:	90 40       	sbci	r25, 0x00	; 0
    6bb4:	e1 f7       	brne	.-8      	; 0x6bae <menu_set_alarm+0x166>
    6bb6:	00 c0       	rjmp	.+0      	; 0x6bb8 <menu_set_alarm+0x170>
    6bb8:	00 00       	nop
				break;
		}
	}
	next = false;
	
	ht1632c_blink(false);
    6bba:	80 e0       	ldi	r24, 0x00	; 0
    6bbc:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
	EEPROM_WriteEnv();
    6bc0:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <EEPROM_WriteEnv>
	display_slide_out_to_bottom();
    6bc4:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <display_slide_out_to_bottom>
	
#ifdef SHOW_MANUAL
	display_print_scrolling_text("ALARM IS NOW SET",false);
    6bc8:	60 e0       	ldi	r22, 0x00	; 0
    6bca:	70 e0       	ldi	r23, 0x00	; 0
    6bcc:	86 e2       	ldi	r24, 0x26	; 38
    6bce:	97 e2       	ldi	r25, 0x27	; 39
    6bd0:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif

	return 1;
    6bd4:	81 e0       	ldi	r24, 0x01	; 1
    6bd6:	08 95       	ret
			case BTN3:
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				ht1632c_blink(false);
    6bd8:	80 e0       	ldi	r24, 0x00	; 0
    6bda:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <ht1632c_blink>
				display_slide_out_to_bottom();
    6bde:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    6be2:	60 e0       	ldi	r22, 0x00	; 0
    6be4:	70 e0       	ldi	r23, 0x00	; 0
    6be6:	83 ee       	ldi	r24, 0xE3	; 227
    6be8:	96 e2       	ldi	r25, 0x26	; 38
    6bea:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
				return 0;
    6bee:	80 e0       	ldi	r24, 0x00	; 0
    6bf0:	08 95       	ret
			default:
				btn_status = NO_BTN;
    6bf2:	10 92 42 2b 	sts	0x2B42, r1
				break;
    6bf6:	ab cf       	rjmp	.-170    	; 0x6b4e <menu_set_alarm+0x106>

00006bf8 <menu_configuration>:
			
		} 
	}
}

menu_status_t menu_configuration(SI114X_IRQ_SAMPLE *samples) {
    6bf8:	cf 93       	push	r28
    6bfa:	df 93       	push	r29
    6bfc:	ec 01       	movw	r28, r24
	
	btn_status = btn_check_press();
    6bfe:	0e 94 28 12 	call	0x2450	; 0x2450 <btn_check_press>
    6c02:	80 93 42 2b 	sts	0x2B42, r24
	
	//Menu ID select
	if (btn_status != NO_BTN) {
    6c06:	80 91 42 2b 	lds	r24, 0x2B42
    6c0a:	88 23       	and	r24, r24
    6c0c:	f1 f0       	breq	.+60     	; 0x6c4a <menu_configuration+0x52>
		if (btn_status == BTN1) {
    6c0e:	80 91 42 2b 	lds	r24, 0x2B42
    6c12:	81 30       	cpi	r24, 0x01	; 1
    6c14:	59 f4       	brne	.+22     	; 0x6c2c <menu_configuration+0x34>
			if (env_var.menu_id != NUMBER_OF_CONFIG_MENUS) {
    6c16:	80 91 39 2a 	lds	r24, 0x2A39
    6c1a:	86 30       	cpi	r24, 0x06	; 6
    6c1c:	21 f0       	breq	.+8      	; 0x6c26 <menu_configuration+0x2e>
				env_var.menu_id++;
    6c1e:	8f 5f       	subi	r24, 0xFF	; 255
    6c20:	80 93 39 2a 	sts	0x2A39, r24
    6c24:	12 c0       	rjmp	.+36     	; 0x6c4a <menu_configuration+0x52>
			} else {
				env_var.menu_id = 0;
    6c26:	10 92 39 2a 	sts	0x2A39, r1
    6c2a:	0f c0       	rjmp	.+30     	; 0x6c4a <menu_configuration+0x52>
			}
		} else if (btn_status == BTN4) {
    6c2c:	80 91 42 2b 	lds	r24, 0x2B42
    6c30:	84 30       	cpi	r24, 0x04	; 4
    6c32:	59 f4       	brne	.+22     	; 0x6c4a <menu_configuration+0x52>
			if (env_var.menu_id != 0) {
    6c34:	80 91 39 2a 	lds	r24, 0x2A39
    6c38:	88 23       	and	r24, r24
    6c3a:	21 f0       	breq	.+8      	; 0x6c44 <menu_configuration+0x4c>
				env_var.menu_id--;
    6c3c:	81 50       	subi	r24, 0x01	; 1
    6c3e:	80 93 39 2a 	sts	0x2A39, r24
    6c42:	03 c0       	rjmp	.+6      	; 0x6c4a <menu_configuration+0x52>
			} else {
				env_var.menu_id = NUMBER_OF_CONFIG_MENUS;
    6c44:	86 e0       	ldi	r24, 0x06	; 6
    6c46:	80 93 39 2a 	sts	0x2A39, r24
			}
		}
	}
	
	if (btn_status == BTN1) {
    6c4a:	80 91 42 2b 	lds	r24, 0x2B42
    6c4e:	81 30       	cpi	r24, 0x01	; 1
    6c50:	29 f4       	brne	.+10     	; 0x6c5c <menu_configuration+0x64>
		rtc_disable_time_render();
    6c52:	0e 94 07 13 	call	0x260e	; 0x260e <rtc_disable_time_render>
		display_slide_out_to_right();
    6c56:	0e 94 89 27 	call	0x4f12	; 0x4f12 <display_slide_out_to_right>
    6c5a:	0f c0       	rjmp	.+30     	; 0x6c7a <menu_configuration+0x82>
	} else if (btn_status == BTN4) {
    6c5c:	80 91 42 2b 	lds	r24, 0x2B42
    6c60:	84 30       	cpi	r24, 0x04	; 4
    6c62:	29 f4       	brne	.+10     	; 0x6c6e <menu_configuration+0x76>
		rtc_disable_time_render();
    6c64:	0e 94 07 13 	call	0x260e	; 0x260e <rtc_disable_time_render>
		display_slide_out_to_left();
    6c68:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
    6c6c:	06 c0       	rjmp	.+12     	; 0x6c7a <menu_configuration+0x82>
	} else if (btn_status == BTN3) {
    6c6e:	80 91 42 2b 	lds	r24, 0x2B42
    6c72:	83 30       	cpi	r24, 0x03	; 3
    6c74:	11 f4       	brne	.+4      	; 0x6c7a <menu_configuration+0x82>
		display_fade_blink();
    6c76:	0e 94 92 24 	call	0x4924	; 0x4924 <display_fade_blink>
	}
	
	//Switch between menus
	if (btn_status != NO_BTN) {
    6c7a:	80 91 42 2b 	lds	r24, 0x2B42
    6c7e:	88 23       	and	r24, r24
    6c80:	61 f1       	breq	.+88     	; 0x6cda <menu_configuration+0xe2>
		switch(env_var.menu_id) {
    6c82:	40 91 39 2a 	lds	r20, 0x2A39
    6c86:	50 e0       	ldi	r21, 0x00	; 0
    6c88:	47 30       	cpi	r20, 0x07	; 7
    6c8a:	51 05       	cpc	r21, r1
    6c8c:	30 f5       	brcc	.+76     	; 0x6cda <menu_configuration+0xe2>
    6c8e:	fa 01       	movw	r30, r20
    6c90:	ee 5a       	subi	r30, 0xAE	; 174
    6c92:	fe 4f       	sbci	r31, 0xFE	; 254
    6c94:	9f c4       	rjmp	.+2366   	; 0x75d4 <__tablejump2__>
			case CONFIG_BRIGHTNESS:
				display_draw_four_letter_word("LGHT");
    6c96:	87 e3       	ldi	r24, 0x37	; 55
    6c98:	97 e2       	ldi	r25, 0x27	; 39
    6c9a:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
				break;
    6c9e:	1d c0       	rjmp	.+58     	; 0x6cda <menu_configuration+0xe2>
			case CONFIG_TIME:
				display_draw_four_letter_word("TIME");
    6ca0:	8c e3       	ldi	r24, 0x3C	; 60
    6ca2:	97 e2       	ldi	r25, 0x27	; 39
    6ca4:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
				break;
    6ca8:	18 c0       	rjmp	.+48     	; 0x6cda <menu_configuration+0xe2>
			case CONFIG_WIFI:
				display_draw_four_letter_word("WIFI");
    6caa:	81 e4       	ldi	r24, 0x41	; 65
    6cac:	97 e2       	ldi	r25, 0x27	; 39
    6cae:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
				break;
    6cb2:	13 c0       	rjmp	.+38     	; 0x6cda <menu_configuration+0xe2>
			case CONFIG_ALARM:
				display_draw_four_letter_word("ALRM");
    6cb4:	86 e4       	ldi	r24, 0x46	; 70
    6cb6:	97 e2       	ldi	r25, 0x27	; 39
    6cb8:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
				break;
    6cbc:	0e c0       	rjmp	.+28     	; 0x6cda <menu_configuration+0xe2>
			case CONFIG_CALIBRATE:
				display_draw_four_letter_word("CALI");
    6cbe:	8b e4       	ldi	r24, 0x4B	; 75
    6cc0:	97 e2       	ldi	r25, 0x27	; 39
    6cc2:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
				break;
    6cc6:	09 c0       	rjmp	.+18     	; 0x6cda <menu_configuration+0xe2>
			case CONFIG_INFO:
				display_draw_four_letter_word("INFO");
    6cc8:	80 e5       	ldi	r24, 0x50	; 80
    6cca:	97 e2       	ldi	r25, 0x27	; 39
    6ccc:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
				break;
    6cd0:	04 c0       	rjmp	.+8      	; 0x6cda <menu_configuration+0xe2>
			case CONFIG_EXIT:
				display_draw_four_letter_word("EXIT");
    6cd2:	86 ed       	ldi	r24, 0xD6	; 214
    6cd4:	96 e2       	ldi	r25, 0x26	; 38
    6cd6:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
			default:
				break;
		}	
	}
	
	if (btn_status == BTN1) {
    6cda:	80 91 42 2b 	lds	r24, 0x2B42
    6cde:	81 30       	cpi	r24, 0x01	; 1
    6ce0:	19 f4       	brne	.+6      	; 0x6ce8 <menu_configuration+0xf0>
		display_slide_in_from_left();
    6ce2:	0e 94 7d 27 	call	0x4efa	; 0x4efa <display_slide_in_from_left>
    6ce6:	06 c0       	rjmp	.+12     	; 0x6cf4 <menu_configuration+0xfc>
	} else if (btn_status == BTN4) {
    6ce8:	80 91 42 2b 	lds	r24, 0x2B42
    6cec:	84 30       	cpi	r24, 0x04	; 4
    6cee:	11 f4       	brne	.+4      	; 0x6cf4 <menu_configuration+0xfc>
		display_slide_in_from_right();
    6cf0:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
	}
	
	//Menu actions
	if (btn_status == BTN3) {
    6cf4:	80 91 42 2b 	lds	r24, 0x2B42
    6cf8:	83 30       	cpi	r24, 0x03	; 3
    6cfa:	09 f0       	breq	.+2      	; 0x6cfe <menu_configuration+0x106>
    6cfc:	5a c0       	rjmp	.+180    	; 0x6db2 <menu_configuration+0x1ba>
		esp8266_status_t status;
		switch(env_var.menu_id) {
    6cfe:	80 91 39 2a 	lds	r24, 0x2A39
    6d02:	90 e0       	ldi	r25, 0x00	; 0
    6d04:	87 30       	cpi	r24, 0x07	; 7
    6d06:	91 05       	cpc	r25, r1
    6d08:	08 f0       	brcs	.+2      	; 0x6d0c <menu_configuration+0x114>
    6d0a:	49 c0       	rjmp	.+146    	; 0x6d9e <menu_configuration+0x1a6>
    6d0c:	fc 01       	movw	r30, r24
    6d0e:	e7 5a       	subi	r30, 0xA7	; 167
    6d10:	fe 4f       	sbci	r31, 0xFE	; 254
    6d12:	60 c4       	rjmp	.+2240   	; 0x75d4 <__tablejump2__>
			case CONFIG_BRIGHTNESS:
				display_slide_out_to_top();
    6d14:	0e 94 99 27 	call	0x4f32	; 0x4f32 <display_slide_out_to_top>
				menu_configure_brightnesss();
    6d18:	08 d8       	rcall	.-4080   	; 0x5d2a <menu_configure_brightnesss>
				ht1632c_set_brightness(MAX_BRIGHTNESS);
    6d1a:	8f e0       	ldi	r24, 0x0F	; 15
    6d1c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <ht1632c_set_brightness>
				break;
    6d20:	3e c0       	rjmp	.+124    	; 0x6d9e <menu_configuration+0x1a6>
			case CONFIG_TIME:
				display_slide_out_to_top();
    6d22:	0e 94 99 27 	call	0x4f32	; 0x4f32 <display_slide_out_to_top>
				menu_set_time();
    6d26:	ad d8       	rcall	.-3750   	; 0x5e82 <menu_set_time>
				break;
    6d28:	3a c0       	rjmp	.+116    	; 0x6d9e <menu_configuration+0x1a6>
			case CONFIG_WIFI:
				display_slide_out_to_top();
    6d2a:	0e 94 99 27 	call	0x4f32	; 0x4f32 <display_slide_out_to_top>
				display_print_scrolling_text("CONNECT TO AP AND ENTER THE UPCOMMING IP ADDRESS");
    6d2e:	85 e5       	ldi	r24, 0x55	; 85
    6d30:	97 e2       	ldi	r25, 0x27	; 39
    6d32:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
				//Feature: Should draw wifi lines on display here.
				esp8266_on();
    6d36:	0e 94 43 08 	call	0x1086	; 0x1086 <esp8266_on>
				if (esp8266_setup_webserver(false,true) == ESP8266_SUCCESS) {
    6d3a:	61 e0       	ldi	r22, 0x01	; 1
    6d3c:	80 e0       	ldi	r24, 0x00	; 0
    6d3e:	0e 94 29 0a 	call	0x1452	; 0x1452 <esp8266_setup_webserver>
    6d42:	81 30       	cpi	r24, 0x01	; 1
    6d44:	71 f4       	brne	.+28     	; 0x6d62 <menu_configuration+0x16a>
    6d46:	08 c0       	rjmp	.+16     	; 0x6d58 <menu_configuration+0x160>
					while(esp8266_configure_ssid_and_password() != ESP8266_TIMEOUT) {
						btn_status = btn_check_press();
    6d48:	0e 94 28 12 	call	0x2450	; 0x2450 <btn_check_press>
    6d4c:	80 93 42 2b 	sts	0x2B42, r24
						if (btn_status == BTN4)
    6d50:	80 91 42 2b 	lds	r24, 0x2B42
    6d54:	84 30       	cpi	r24, 0x04	; 4
    6d56:	59 f0       	breq	.+22     	; 0x6d6e <menu_configuration+0x176>
				display_slide_out_to_top();
				display_print_scrolling_text("CONNECT TO AP AND ENTER THE UPCOMMING IP ADDRESS");
				//Feature: Should draw wifi lines on display here.
				esp8266_on();
				if (esp8266_setup_webserver(false,true) == ESP8266_SUCCESS) {
					while(esp8266_configure_ssid_and_password() != ESP8266_TIMEOUT) {
    6d58:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <esp8266_configure_ssid_and_password>
    6d5c:	83 30       	cpi	r24, 0x03	; 3
    6d5e:	a1 f7       	brne	.-24     	; 0x6d48 <menu_configuration+0x150>
    6d60:	06 c0       	rjmp	.+12     	; 0x6d6e <menu_configuration+0x176>
							break;
						}
					}
				} else {
#ifdef SHOW_MANUAL
					display_print_scrolling_text("SOMETHING WENT WRONG",false);
    6d62:	60 e0       	ldi	r22, 0x00	; 0
    6d64:	70 e0       	ldi	r23, 0x00	; 0
    6d66:	86 e8       	ldi	r24, 0x86	; 134
    6d68:	97 e2       	ldi	r25, 0x27	; 39
    6d6a:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif					
				}
				esp8266_off();
    6d6e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <esp8266_off>
				break;
    6d72:	15 c0       	rjmp	.+42     	; 0x6d9e <menu_configuration+0x1a6>
			case CONFIG_ALARM:
				display_slide_out_to_top();
    6d74:	0e 94 99 27 	call	0x4f32	; 0x4f32 <display_slide_out_to_top>
				menu_set_alarm();
    6d78:	67 de       	rcall	.-818    	; 0x6a48 <menu_set_alarm>
				break;
    6d7a:	11 c0       	rjmp	.+34     	; 0x6d9e <menu_configuration+0x1a6>
			case CONFIG_CALIBRATE:
				display_slide_out_to_top();
    6d7c:	0e 94 99 27 	call	0x4f32	; 0x4f32 <display_slide_out_to_top>
				si114x_baseline_calibration(samples);
    6d80:	ce 01       	movw	r24, r28
    6d82:	0e 94 20 17 	call	0x2e40	; 0x2e40 <si114x_baseline_calibration>
				break;
    6d86:	0b c0       	rjmp	.+22     	; 0x6d9e <menu_configuration+0x1a6>
			case CONFIG_INFO:
				display_slide_out_to_top();
    6d88:	0e 94 99 27 	call	0x4f32	; 0x4f32 <display_slide_out_to_top>
				display_print_scrolling_text("MADE BY: ERLEND HESTNES");
    6d8c:	8b e9       	ldi	r24, 0x9B	; 155
    6d8e:	97 e2       	ldi	r25, 0x27	; 39
    6d90:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
				break;
    6d94:	04 c0       	rjmp	.+8      	; 0x6d9e <menu_configuration+0x1a6>
			case CONFIG_EXIT:
				display_slide_out_to_bottom();
    6d96:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <display_slide_out_to_bottom>
				return MENU_CLOSE;
    6d9a:	82 e0       	ldi	r24, 0x02	; 2
    6d9c:	0b c0       	rjmp	.+22     	; 0x6db4 <menu_configuration+0x1bc>
			default:
				break;
		}
		display_slide_out_to_bottom();
    6d9e:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <display_slide_out_to_bottom>
		display_draw_four_letter_word("<  >");
    6da2:	83 eb       	ldi	r24, 0xB3	; 179
    6da4:	97 e2       	ldi	r25, 0x27	; 39
    6da6:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
		display_slide_in_from_top();
    6daa:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <display_slide_in_from_top>
	}	
	return MENU_SUCCESS;
    6dae:	81 e0       	ldi	r24, 0x01	; 1
    6db0:	01 c0       	rjmp	.+2      	; 0x6db4 <menu_configuration+0x1bc>
    6db2:	81 e0       	ldi	r24, 0x01	; 1
}
    6db4:	df 91       	pop	r29
    6db6:	cf 91       	pop	r28
    6db8:	08 95       	ret

00006dba <menu_state_machine>:
	
	env_var.alarm.hours = 0;
	env_var.alarm.minutes = 0;
}

menu_status_t menu_state_machine(SI114X_IRQ_SAMPLE *samples) {
    6dba:	ff 92       	push	r15
    6dbc:	0f 93       	push	r16
    6dbe:	1f 93       	push	r17
    6dc0:	cf 93       	push	r28
    6dc2:	df 93       	push	r29
    6dc4:	cd b7       	in	r28, 0x3d	; 61
    6dc6:	de b7       	in	r29, 0x3e	; 62
    6dc8:	e2 97       	sbiw	r28, 0x32	; 50
    6dca:	cd bf       	out	0x3d, r28	; 61
    6dcc:	de bf       	out	0x3e, r29	; 62
    6dce:	8c 01       	movw	r16, r24
	
	//Menu ID select
	if (samples->gesture != NO_GESTURE) {
    6dd0:	fc 01       	movw	r30, r24
    6dd2:	82 89       	ldd	r24, Z+18	; 0x12
    6dd4:	88 23       	and	r24, r24
    6dd6:	09 f4       	brne	.+2      	; 0x6dda <menu_state_machine+0x20>
    6dd8:	56 c0       	rjmp	.+172    	; 0x6e86 <menu_state_machine+0xcc>
		if (samples->gesture == LEFT_SWIPE) {
    6dda:	82 30       	cpi	r24, 0x02	; 2
    6ddc:	59 f4       	brne	.+22     	; 0x6df4 <menu_state_machine+0x3a>
			if (env_var.menu_id != NUMBER_OF_MENUS) {
    6dde:	80 91 39 2a 	lds	r24, 0x2A39
    6de2:	86 30       	cpi	r24, 0x06	; 6
    6de4:	21 f0       	breq	.+8      	; 0x6dee <menu_state_machine+0x34>
				env_var.menu_id++;
    6de6:	8f 5f       	subi	r24, 0xFF	; 255
    6de8:	80 93 39 2a 	sts	0x2A39, r24
    6dec:	10 c0       	rjmp	.+32     	; 0x6e0e <menu_state_machine+0x54>
			} else {
				env_var.menu_id = 0;
    6dee:	10 92 39 2a 	sts	0x2A39, r1
    6df2:	0d c0       	rjmp	.+26     	; 0x6e0e <menu_state_machine+0x54>
			}
		} else if (samples->gesture == RIGHT_SWIPE) {
    6df4:	81 30       	cpi	r24, 0x01	; 1
    6df6:	f1 f4       	brne	.+60     	; 0x6e34 <menu_state_machine+0x7a>
			if (env_var.menu_id != 0) {
    6df8:	80 91 39 2a 	lds	r24, 0x2A39
    6dfc:	88 23       	and	r24, r24
    6dfe:	21 f0       	breq	.+8      	; 0x6e08 <menu_state_machine+0x4e>
				env_var.menu_id--;
    6e00:	81 50       	subi	r24, 0x01	; 1
    6e02:	80 93 39 2a 	sts	0x2A39, r24
    6e06:	03 c0       	rjmp	.+6      	; 0x6e0e <menu_state_machine+0x54>
			} else {
				env_var.menu_id = NUMBER_OF_MENUS;
    6e08:	86 e0       	ldi	r24, 0x06	; 6
    6e0a:	80 93 39 2a 	sts	0x2A39, r24
			}
		}
	}
	
	if (samples->gesture == LEFT_SWIPE) {
    6e0e:	f8 01       	movw	r30, r16
    6e10:	82 89       	ldd	r24, Z+18	; 0x12
    6e12:	82 30       	cpi	r24, 0x02	; 2
    6e14:	29 f4       	brne	.+10     	; 0x6e20 <menu_state_machine+0x66>
		rtc_disable_time_render();
    6e16:	0e 94 07 13 	call	0x260e	; 0x260e <rtc_disable_time_render>
		display_slide_out_to_right();
    6e1a:	0e 94 89 27 	call	0x4f12	; 0x4f12 <display_slide_out_to_right>
    6e1e:	06 c0       	rjmp	.+12     	; 0x6e2c <menu_state_machine+0x72>
	} else if (samples->gesture == RIGHT_SWIPE) {
    6e20:	81 30       	cpi	r24, 0x01	; 1
    6e22:	21 f4       	brne	.+8      	; 0x6e2c <menu_state_machine+0x72>
		rtc_disable_time_render();
    6e24:	0e 94 07 13 	call	0x260e	; 0x260e <rtc_disable_time_render>
		display_slide_out_to_left();
    6e28:	0e 94 91 27 	call	0x4f22	; 0x4f22 <display_slide_out_to_left>
	}
	
	//Switch between menus
	if (samples->gesture != NO_GESTURE) {
    6e2c:	f8 01       	movw	r30, r16
    6e2e:	82 89       	ldd	r24, Z+18	; 0x12
    6e30:	88 23       	and	r24, r24
    6e32:	49 f1       	breq	.+82     	; 0x6e86 <menu_state_machine+0xcc>
		switch(env_var.menu_id) {
    6e34:	40 91 39 2a 	lds	r20, 0x2A39
    6e38:	50 e0       	ldi	r21, 0x00	; 0
    6e3a:	47 30       	cpi	r20, 0x07	; 7
    6e3c:	51 05       	cpc	r21, r1
    6e3e:	c0 f4       	brcc	.+48     	; 0x6e70 <menu_state_machine+0xb6>
    6e40:	fa 01       	movw	r30, r20
    6e42:	e0 5a       	subi	r30, 0xA0	; 160
    6e44:	fe 4f       	sbci	r31, 0xFE	; 254
    6e46:	c6 c3       	rjmp	.+1932   	; 0x75d4 <__tablejump2__>
			case MENU_TIME:
				rtc_enable_time_render();
    6e48:	0e 94 a7 13 	call	0x274e	; 0x274e <rtc_enable_time_render>
				break;
    6e4c:	11 c0       	rjmp	.+34     	; 0x6e70 <menu_state_machine+0xb6>
			case MENU_DATE:
				menu_draw_date_frame();
    6e4e:	0e 94 cd 2b 	call	0x579a	; 0x579a <menu_draw_date_frame>
				break;
    6e52:	0e c0       	rjmp	.+28     	; 0x6e70 <menu_state_machine+0xb6>
			case MENU_WEEKDAY:
				menu_draw_weekday_frame();
    6e54:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <menu_draw_weekday_frame>
				break;
    6e58:	0b c0       	rjmp	.+22     	; 0x6e70 <menu_state_machine+0xb6>
			case MENU_WEEK:
				menu_draw_week_frame();
    6e5a:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <menu_draw_week_frame>
				break;
    6e5e:	08 c0       	rjmp	.+16     	; 0x6e70 <menu_state_machine+0xb6>
			case MENU_TEMP:
				menu_draw_temperature_frame();
    6e60:	0e 94 65 2b 	call	0x56ca	; 0x56ca <menu_draw_temperature_frame>
				break;
    6e64:	05 c0       	rjmp	.+10     	; 0x6e70 <menu_state_machine+0xb6>
			case MENU_BATTERY:
				menu_draw_battery_frame();
    6e66:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <menu_draw_battery_frame>
				break;
    6e6a:	02 c0       	rjmp	.+4      	; 0x6e70 <menu_state_machine+0xb6>
			case MENU_CONFIG:
				menu_draw_config_frame();
    6e6c:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <menu_draw_config_frame>
			default:
				break;
		}	
	}
	
	if (samples->gesture == LEFT_SWIPE) {
    6e70:	f8 01       	movw	r30, r16
    6e72:	82 89       	ldd	r24, Z+18	; 0x12
    6e74:	82 30       	cpi	r24, 0x02	; 2
    6e76:	19 f4       	brne	.+6      	; 0x6e7e <menu_state_machine+0xc4>
		display_slide_in_from_left();
    6e78:	0e 94 7d 27 	call	0x4efa	; 0x4efa <display_slide_in_from_left>
    6e7c:	04 c0       	rjmp	.+8      	; 0x6e86 <menu_state_machine+0xcc>
	} else if (samples->gesture == RIGHT_SWIPE) {
    6e7e:	81 30       	cpi	r24, 0x01	; 1
    6e80:	11 f4       	brne	.+4      	; 0x6e86 <menu_state_machine+0xcc>
		display_slide_in_from_right();
    6e82:	0e 94 80 27 	call	0x4f00	; 0x4f00 <display_slide_in_from_right>
	}
	
	btn_status = NO_BTN;
    6e86:	10 92 42 2b 	sts	0x2B42, r1

	if (samples->gesture == PAUSE) {
    6e8a:	f8 01       	movw	r30, r16
    6e8c:	82 89       	ldd	r24, Z+18	; 0x12
    6e8e:	83 30       	cpi	r24, 0x03	; 3
    6e90:	09 f0       	breq	.+2      	; 0x6e94 <menu_state_machine+0xda>
    6e92:	83 c0       	rjmp	.+262    	; 0x6f9a <menu_state_machine+0x1e0>
		
		if (env_var.menu_id == MENU_CONFIG)
    6e94:	80 91 39 2a 	lds	r24, 0x2A39
    6e98:	86 30       	cpi	r24, 0x06	; 6
    6e9a:	31 f5       	brne	.+76     	; 0x6ee8 <menu_state_machine+0x12e>
		{
			display_fade_blink();
    6e9c:	0e 94 92 24 	call	0x4924	; 0x4924 <display_fade_blink>
			
			display_slide_out_to_top();
    6ea0:	0e 94 99 27 	call	0x4f32	; 0x4f32 <display_slide_out_to_top>
#ifdef SHOW_MANUAL
			display_print_scrolling_text("CONFIG MENU. USE BUTTONS",false);
    6ea4:	60 e0       	ldi	r22, 0x00	; 0
    6ea6:	70 e0       	ldi	r23, 0x00	; 0
    6ea8:	88 eb       	ldi	r24, 0xB8	; 184
    6eaa:	97 e2       	ldi	r25, 0x27	; 39
    6eac:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
			display_draw_four_letter_word("<  >");
    6eb0:	83 eb       	ldi	r24, 0xB3	; 179
    6eb2:	97 e2       	ldi	r25, 0x27	; 39
    6eb4:	0e 94 33 27 	call	0x4e66	; 0x4e66 <display_draw_four_letter_word>
			display_slide_in_from_bottom();
    6eb8:	0e 94 83 27 	call	0x4f06	; 0x4f06 <display_slide_in_from_bottom>
			env_var.menu_id = 0;
    6ebc:	10 92 39 2a 	sts	0x2A39, r1
			while(menu_configuration(samples) == MENU_SUCCESS);
    6ec0:	c8 01       	movw	r24, r16
    6ec2:	9a de       	rcall	.-716    	; 0x6bf8 <menu_configuration>
    6ec4:	81 30       	cpi	r24, 0x01	; 1
    6ec6:	e1 f3       	breq	.-8      	; 0x6ec0 <menu_state_machine+0x106>
			env_var.menu_id = 0;
    6ec8:	10 92 39 2a 	sts	0x2A39, r1
			rtc_enable_time_render();
    6ecc:	0e 94 a7 13 	call	0x274e	; 0x274e <rtc_enable_time_render>
			display_slide_in_from_top();
    6ed0:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <display_slide_in_from_top>
    6ed4:	ff ef       	ldi	r31, 0xFF	; 255
    6ed6:	27 ea       	ldi	r18, 0xA7	; 167
    6ed8:	81 e6       	ldi	r24, 0x61	; 97
    6eda:	f1 50       	subi	r31, 0x01	; 1
    6edc:	20 40       	sbci	r18, 0x00	; 0
    6ede:	80 40       	sbci	r24, 0x00	; 0
    6ee0:	e1 f7       	brne	.-8      	; 0x6eda <menu_state_machine+0x120>
    6ee2:	00 c0       	rjmp	.+0      	; 0x6ee4 <menu_state_machine+0x12a>
    6ee4:	00 00       	nop
    6ee6:	59 c0       	rjmp	.+178    	; 0x6f9a <menu_state_machine+0x1e0>
			
			_delay_ms(1000);
		} else if (env_var.menu_id == MENU_TEMP) {
    6ee8:	84 30       	cpi	r24, 0x04	; 4
    6eea:	09 f0       	breq	.+2      	; 0x6eee <menu_state_machine+0x134>
    6eec:	56 c0       	rjmp	.+172    	; 0x6f9a <menu_state_machine+0x1e0>
			display_fade_blink();			
    6eee:	0e 94 92 24 	call	0x4924	; 0x4924 <display_fade_blink>
			display_slide_out_to_top();
    6ef2:	0e 94 99 27 	call	0x4f32	; 0x4f32 <display_slide_out_to_top>
			esp8266_status_t status;
			start_loading();
    6ef6:	0e 94 bc 29 	call	0x5378	; 0x5378 <start_loading>
			status = get_internet_variables(true,true);
    6efa:	61 e0       	ldi	r22, 0x01	; 1
    6efc:	81 e0       	ldi	r24, 0x01	; 1
    6efe:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <get_internet_variables>
    6f02:	18 2f       	mov	r17, r24
			stop_loading();
    6f04:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <stop_loading>
			
			if (status == ESP8266_SUCCESS) {
    6f08:	11 30       	cpi	r17, 0x01	; 1
    6f0a:	09 f0       	breq	.+2      	; 0x6f0e <menu_state_machine+0x154>
    6f0c:	3c c0       	rjmp	.+120    	; 0x6f86 <menu_state_machine+0x1cc>
				char weather_info[50];
				strcpy(weather_info, "WEATHER FOR TRONDHEIM NORWAY: ");
    6f0e:	8f e1       	ldi	r24, 0x1F	; 31
    6f10:	e1 ed       	ldi	r30, 0xD1	; 209
    6f12:	f7 e2       	ldi	r31, 0x27	; 39
    6f14:	8e 01       	movw	r16, r28
    6f16:	0f 5f       	subi	r16, 0xFF	; 255
    6f18:	1f 4f       	sbci	r17, 0xFF	; 255
    6f1a:	d8 01       	movw	r26, r16
    6f1c:	01 90       	ld	r0, Z+
    6f1e:	0d 92       	st	X+, r0
    6f20:	8a 95       	dec	r24
    6f22:	e1 f7       	brne	.-8      	; 0x6f1c <menu_state_machine+0x162>
				strcat(weather_info,env_var.temperature);
    6f24:	69 ed       	ldi	r22, 0xD9	; 217
    6f26:	79 e2       	ldi	r23, 0x29	; 41
    6f28:	c8 01       	movw	r24, r16
    6f2a:	68 d6       	rcall	.+3280   	; 0x7bfc <strcat>
				strcat(weather_info,"C ");
    6f2c:	f8 01       	movw	r30, r16
    6f2e:	01 90       	ld	r0, Z+
    6f30:	00 20       	and	r0, r0
    6f32:	e9 f7       	brne	.-6      	; 0x6f2e <menu_state_machine+0x174>
    6f34:	31 97       	sbiw	r30, 0x01	; 1
    6f36:	83 e4       	ldi	r24, 0x43	; 67
    6f38:	90 e2       	ldi	r25, 0x20	; 32
    6f3a:	a0 e0       	ldi	r26, 0x00	; 0
    6f3c:	80 83       	st	Z, r24
    6f3e:	91 83       	std	Z+1, r25	; 0x01
    6f40:	a2 83       	std	Z+2, r26	; 0x02
				uint8_t i = 0;
				while(env_var.weather_info[i]) {
    6f42:	80 91 dc 29 	lds	r24, 0x29DC
    6f46:	88 23       	and	r24, r24
    6f48:	91 f0       	breq	.+36     	; 0x6f6e <menu_state_machine+0x1b4>
    6f4a:	00 e0       	ldi	r16, 0x00	; 0
    6f4c:	10 e0       	ldi	r17, 0x00	; 0
			if (status == ESP8266_SUCCESS) {
				char weather_info[50];
				strcpy(weather_info, "WEATHER FOR TRONDHEIM NORWAY: ");
				strcat(weather_info,env_var.temperature);
				strcat(weather_info,"C ");
				uint8_t i = 0;
    6f4e:	f1 2c       	mov	r15, r1
				while(env_var.weather_info[i]) {
					env_var.weather_info[i] = toupper(env_var.weather_info[i]);
    6f50:	90 e0       	ldi	r25, 0x00	; 0
    6f52:	24 d6       	rcall	.+3144   	; 0x7b9c <toupper>
    6f54:	f8 01       	movw	r30, r16
    6f56:	e8 54       	subi	r30, 0x48	; 72
    6f58:	f6 4d       	sbci	r31, 0xD6	; 214
    6f5a:	84 a3       	std	Z+36, r24	; 0x24
					i++;
    6f5c:	f3 94       	inc	r15
				char weather_info[50];
				strcpy(weather_info, "WEATHER FOR TRONDHEIM NORWAY: ");
				strcat(weather_info,env_var.temperature);
				strcat(weather_info,"C ");
				uint8_t i = 0;
				while(env_var.weather_info[i]) {
    6f5e:	0f 2d       	mov	r16, r15
    6f60:	10 e0       	ldi	r17, 0x00	; 0
    6f62:	f8 01       	movw	r30, r16
    6f64:	e8 54       	subi	r30, 0x48	; 72
    6f66:	f6 4d       	sbci	r31, 0xD6	; 214
    6f68:	84 a1       	ldd	r24, Z+36	; 0x24
    6f6a:	81 11       	cpse	r24, r1
    6f6c:	f1 cf       	rjmp	.-30     	; 0x6f50 <menu_state_machine+0x196>
					env_var.weather_info[i] = toupper(env_var.weather_info[i]);
					i++;
				}
				strcat(weather_info,env_var.weather_info);
    6f6e:	6c ed       	ldi	r22, 0xDC	; 220
    6f70:	79 e2       	ldi	r23, 0x29	; 41
    6f72:	ce 01       	movw	r24, r28
    6f74:	01 96       	adiw	r24, 0x01	; 1
    6f76:	42 d6       	rcall	.+3204   	; 0x7bfc <strcat>
#ifdef SHOW_MANUAL
				display_print_scrolling_text(weather_info, false);
    6f78:	60 e0       	ldi	r22, 0x00	; 0
    6f7a:	70 e0       	ldi	r23, 0x00	; 0
    6f7c:	ce 01       	movw	r24, r28
    6f7e:	01 96       	adiw	r24, 0x01	; 1
    6f80:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
    6f84:	06 c0       	rjmp	.+12     	; 0x6f92 <menu_state_machine+0x1d8>
#endif
			} else {
#ifdef SHOW_MANUAL
				display_print_scrolling_text("COULD NOT GET TEMPERATURE.", false);
    6f86:	60 e0       	ldi	r22, 0x00	; 0
    6f88:	70 e0       	ldi	r23, 0x00	; 0
    6f8a:	80 ef       	ldi	r24, 0xF0	; 240
    6f8c:	97 e2       	ldi	r25, 0x27	; 39
    6f8e:	0e 94 56 26 	call	0x4cac	; 0x4cac <display_print_scrolling_text>
#endif
			}
			menu_draw_temperature_frame();
    6f92:	0e 94 65 2b 	call	0x56ca	; 0x56ca <menu_draw_temperature_frame>
			display_slide_in_from_top();
    6f96:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <display_slide_in_from_top>
			
		} 
	}
}
    6f9a:	e2 96       	adiw	r28, 0x32	; 50
    6f9c:	cd bf       	out	0x3d, r28	; 61
    6f9e:	de bf       	out	0x3e, r29	; 62
    6fa0:	df 91       	pop	r29
    6fa2:	cf 91       	pop	r28
    6fa4:	1f 91       	pop	r17
    6fa6:	0f 91       	pop	r16
    6fa8:	ff 90       	pop	r15
    6faa:	08 95       	ret

00006fac <__vector_16>:
#endif

	return 1;
}

ISR(TCC0_CCA_vect) {
    6fac:	1f 92       	push	r1
    6fae:	0f 92       	push	r0
    6fb0:	0f b6       	in	r0, 0x3f	; 63
    6fb2:	0f 92       	push	r0
    6fb4:	11 24       	eor	r1, r1
    6fb6:	0b b6       	in	r0, 0x3b	; 59
    6fb8:	0f 92       	push	r0
    6fba:	2f 93       	push	r18
    6fbc:	3f 93       	push	r19
    6fbe:	4f 93       	push	r20
    6fc0:	5f 93       	push	r21
    6fc2:	6f 93       	push	r22
    6fc4:	7f 93       	push	r23
    6fc6:	8f 93       	push	r24
    6fc8:	9f 93       	push	r25
    6fca:	af 93       	push	r26
    6fcc:	bf 93       	push	r27
    6fce:	ef 93       	push	r30
    6fd0:	ff 93       	push	r31
	display_show_loading_square();
    6fd2:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <display_show_loading_square>
    6fd6:	ff 91       	pop	r31
    6fd8:	ef 91       	pop	r30
    6fda:	bf 91       	pop	r27
    6fdc:	af 91       	pop	r26
    6fde:	9f 91       	pop	r25
    6fe0:	8f 91       	pop	r24
    6fe2:	7f 91       	pop	r23
    6fe4:	6f 91       	pop	r22
    6fe6:	5f 91       	pop	r21
    6fe8:	4f 91       	pop	r20
    6fea:	3f 91       	pop	r19
    6fec:	2f 91       	pop	r18
    6fee:	0f 90       	pop	r0
    6ff0:	0b be       	out	0x3b, r0	; 59
    6ff2:	0f 90       	pop	r0
    6ff4:	0f be       	out	0x3f, r0	; 63
    6ff6:	0f 90       	pop	r0
    6ff8:	1f 90       	pop	r1
    6ffa:	18 95       	reti

00006ffc <time_get_day_name>:
	for (uint8_t i = 1; i < m; i++) {
		days_count += time_get_days_in_month(i,y);
	}
	days_count += d;
	return days_count;
}
    6ffc:	90 e0       	ldi	r25, 0x00	; 0
    6ffe:	fc 01       	movw	r30, r24
    7000:	31 97       	sbiw	r30, 0x01	; 1
    7002:	e7 30       	cpi	r30, 0x07	; 7
    7004:	f1 05       	cpc	r31, r1
    7006:	90 f4       	brcc	.+36     	; 0x702c <time_get_day_name+0x30>
    7008:	e9 59       	subi	r30, 0x99	; 153
    700a:	fe 4f       	sbci	r31, 0xFE	; 254
    700c:	e3 c2       	rjmp	.+1478   	; 0x75d4 <__tablejump2__>
    700e:	23 e1       	ldi	r18, 0x13	; 19
    7010:	38 e2       	ldi	r19, 0x28	; 40
    7012:	12 c0       	rjmp	.+36     	; 0x7038 <time_get_day_name+0x3c>
    7014:	27 e1       	ldi	r18, 0x17	; 23
    7016:	38 e2       	ldi	r19, 0x28	; 40
    7018:	0f c0       	rjmp	.+30     	; 0x7038 <time_get_day_name+0x3c>
    701a:	2b e1       	ldi	r18, 0x1B	; 27
    701c:	38 e2       	ldi	r19, 0x28	; 40
    701e:	0c c0       	rjmp	.+24     	; 0x7038 <time_get_day_name+0x3c>
    7020:	2f e1       	ldi	r18, 0x1F	; 31
    7022:	38 e2       	ldi	r19, 0x28	; 40
    7024:	09 c0       	rjmp	.+18     	; 0x7038 <time_get_day_name+0x3c>
    7026:	23 e2       	ldi	r18, 0x23	; 35
    7028:	38 e2       	ldi	r19, 0x28	; 40
    702a:	06 c0       	rjmp	.+12     	; 0x7038 <time_get_day_name+0x3c>
    702c:	08 95       	ret
    702e:	2b e0       	ldi	r18, 0x0B	; 11
    7030:	38 e2       	ldi	r19, 0x28	; 40
    7032:	02 c0       	rjmp	.+4      	; 0x7038 <time_get_day_name+0x3c>
    7034:	2f e0       	ldi	r18, 0x0F	; 15
    7036:	38 e2       	ldi	r19, 0x28	; 40
    7038:	82 2f       	mov	r24, r18
    703a:	93 2f       	mov	r25, r19
    703c:	08 95       	ret

0000703e <time_get_month_name>:
    703e:	90 e0       	ldi	r25, 0x00	; 0
    7040:	fc 01       	movw	r30, r24
    7042:	31 97       	sbiw	r30, 0x01	; 1
    7044:	ec 30       	cpi	r30, 0x0C	; 12
    7046:	f1 05       	cpc	r31, r1
    7048:	08 f5       	brcc	.+66     	; 0x708c <time_get_month_name+0x4e>
    704a:	e2 59       	subi	r30, 0x92	; 146
    704c:	fe 4f       	sbci	r31, 0xFE	; 254
    704e:	c2 c2       	rjmp	.+1412   	; 0x75d4 <__tablejump2__>
    7050:	2f e2       	ldi	r18, 0x2F	; 47
    7052:	38 e2       	ldi	r19, 0x28	; 40
    7054:	21 c0       	rjmp	.+66     	; 0x7098 <time_get_month_name+0x5a>
    7056:	23 e3       	ldi	r18, 0x33	; 51
    7058:	38 e2       	ldi	r19, 0x28	; 40
    705a:	1e c0       	rjmp	.+60     	; 0x7098 <time_get_month_name+0x5a>
    705c:	27 e3       	ldi	r18, 0x37	; 55
    705e:	38 e2       	ldi	r19, 0x28	; 40
    7060:	1b c0       	rjmp	.+54     	; 0x7098 <time_get_month_name+0x5a>
    7062:	2b e3       	ldi	r18, 0x3B	; 59
    7064:	38 e2       	ldi	r19, 0x28	; 40
    7066:	18 c0       	rjmp	.+48     	; 0x7098 <time_get_month_name+0x5a>
    7068:	2f e3       	ldi	r18, 0x3F	; 63
    706a:	38 e2       	ldi	r19, 0x28	; 40
    706c:	15 c0       	rjmp	.+42     	; 0x7098 <time_get_month_name+0x5a>
    706e:	23 e4       	ldi	r18, 0x43	; 67
    7070:	38 e2       	ldi	r19, 0x28	; 40
    7072:	12 c0       	rjmp	.+36     	; 0x7098 <time_get_month_name+0x5a>
    7074:	27 e4       	ldi	r18, 0x47	; 71
    7076:	38 e2       	ldi	r19, 0x28	; 40
    7078:	0f c0       	rjmp	.+30     	; 0x7098 <time_get_month_name+0x5a>
    707a:	2b e4       	ldi	r18, 0x4B	; 75
    707c:	38 e2       	ldi	r19, 0x28	; 40
    707e:	0c c0       	rjmp	.+24     	; 0x7098 <time_get_month_name+0x5a>
    7080:	2f e4       	ldi	r18, 0x4F	; 79
    7082:	38 e2       	ldi	r19, 0x28	; 40
    7084:	09 c0       	rjmp	.+18     	; 0x7098 <time_get_month_name+0x5a>
    7086:	23 e5       	ldi	r18, 0x53	; 83
    7088:	38 e2       	ldi	r19, 0x28	; 40
    708a:	06 c0       	rjmp	.+12     	; 0x7098 <time_get_month_name+0x5a>
    708c:	08 95       	ret
    708e:	27 e2       	ldi	r18, 0x27	; 39
    7090:	38 e2       	ldi	r19, 0x28	; 40
    7092:	02 c0       	rjmp	.+4      	; 0x7098 <time_get_month_name+0x5a>
    7094:	2b e2       	ldi	r18, 0x2B	; 43
    7096:	38 e2       	ldi	r19, 0x28	; 40
    7098:	82 2f       	mov	r24, r18
    709a:	93 2f       	mov	r25, r19
    709c:	08 95       	ret

0000709e <time_is_leap_year>:
    709e:	ac 01       	movw	r20, r24
    70a0:	83 70       	andi	r24, 0x03	; 3
    70a2:	99 27       	eor	r25, r25
    70a4:	89 2b       	or	r24, r25
    70a6:	99 f4       	brne	.+38     	; 0x70ce <time_is_leap_year+0x30>
    70a8:	9a 01       	movw	r18, r20
    70aa:	36 95       	lsr	r19
    70ac:	27 95       	ror	r18
    70ae:	36 95       	lsr	r19
    70b0:	27 95       	ror	r18
    70b2:	ab e7       	ldi	r26, 0x7B	; 123
    70b4:	b4 e1       	ldi	r27, 0x14	; 20
    70b6:	94 d2       	rcall	.+1320   	; 0x75e0 <__umulhisi3>
    70b8:	96 95       	lsr	r25
    70ba:	87 95       	ror	r24
    70bc:	64 e6       	ldi	r22, 0x64	; 100
    70be:	68 9f       	mul	r22, r24
    70c0:	90 01       	movw	r18, r0
    70c2:	69 9f       	mul	r22, r25
    70c4:	30 0d       	add	r19, r0
    70c6:	11 24       	eor	r1, r1
    70c8:	42 17       	cp	r20, r18
    70ca:	53 07       	cpc	r21, r19
    70cc:	c9 f4       	brne	.+50     	; 0x7100 <time_is_leap_year+0x62>
    70ce:	9a 01       	movw	r18, r20
    70d0:	32 95       	swap	r19
    70d2:	22 95       	swap	r18
    70d4:	2f 70       	andi	r18, 0x0F	; 15
    70d6:	23 27       	eor	r18, r19
    70d8:	3f 70       	andi	r19, 0x0F	; 15
    70da:	23 27       	eor	r18, r19
    70dc:	ae e3       	ldi	r26, 0x3E	; 62
    70de:	ba e0       	ldi	r27, 0x0A	; 10
    70e0:	7f d2       	rcall	.+1278   	; 0x75e0 <__umulhisi3>
    70e2:	20 e9       	ldi	r18, 0x90	; 144
    70e4:	31 e0       	ldi	r19, 0x01	; 1
    70e6:	82 9f       	mul	r24, r18
    70e8:	b0 01       	movw	r22, r0
    70ea:	83 9f       	mul	r24, r19
    70ec:	70 0d       	add	r23, r0
    70ee:	92 9f       	mul	r25, r18
    70f0:	70 0d       	add	r23, r0
    70f2:	11 24       	eor	r1, r1
    70f4:	81 e0       	ldi	r24, 0x01	; 1
    70f6:	46 17       	cp	r20, r22
    70f8:	57 07       	cpc	r21, r23
    70fa:	19 f0       	breq	.+6      	; 0x7102 <time_is_leap_year+0x64>
    70fc:	80 e0       	ldi	r24, 0x00	; 0
    70fe:	08 95       	ret
    7100:	81 e0       	ldi	r24, 0x01	; 1
    7102:	08 95       	ret

00007104 <time_get_days_in_month>:
    7104:	48 2f       	mov	r20, r24
    7106:	cb 01       	movw	r24, r22
    7108:	50 e0       	ldi	r21, 0x00	; 0
    710a:	fa 01       	movw	r30, r20
    710c:	31 97       	sbiw	r30, 0x01	; 1
    710e:	ec 30       	cpi	r30, 0x0C	; 12
    7110:	f1 05       	cpc	r31, r1
    7112:	40 f4       	brcc	.+16     	; 0x7124 <time_get_days_in_month+0x20>
    7114:	e6 58       	subi	r30, 0x86	; 134
    7116:	fe 4f       	sbci	r31, 0xFE	; 254
    7118:	5d c2       	rjmp	.+1210   	; 0x75d4 <__tablejump2__>
    711a:	c1 df       	rcall	.-126    	; 0x709e <time_is_leap_year>
    711c:	88 23       	and	r24, r24
    711e:	39 f0       	breq	.+14     	; 0x712e <time_get_days_in_month+0x2a>
    7120:	8d e1       	ldi	r24, 0x1D	; 29
    7122:	08 95       	ret
    7124:	08 95       	ret
    7126:	8f e1       	ldi	r24, 0x1F	; 31
    7128:	08 95       	ret
    712a:	8e e1       	ldi	r24, 0x1E	; 30
    712c:	08 95       	ret
    712e:	8c e1       	ldi	r24, 0x1C	; 28
    7130:	08 95       	ret

00007132 <time_get_weekday>:
		case December: return 31;
	}
}

uint8_t time_get_weekday(uint8_t d, uint8_t m, uint16_t y)
{
    7132:	cf 92       	push	r12
    7134:	df 92       	push	r13
    7136:	ef 92       	push	r14
    7138:	ff 92       	push	r15
    713a:	0f 93       	push	r16
    713c:	1f 93       	push	r17
    713e:	cf 93       	push	r28
    7140:	df 93       	push	r29
    7142:	cd b7       	in	r28, 0x3d	; 61
    7144:	de b7       	in	r29, 0x3e	; 62
    7146:	68 97       	sbiw	r28, 0x18	; 24
    7148:	cd bf       	out	0x3d, r28	; 61
    714a:	de bf       	out	0x3e, r29	; 62
    714c:	8a 01       	movw	r16, r20
	// Set Year
	int yyyy = y;

	// Set Month
	int mm = m;
    714e:	c6 2e       	mov	r12, r22
    7150:	d1 2c       	mov	r13, r1
	int DayOfYearNumber;
	int Jan1WeekDay;
	int WeekDay;

	int i,j,k,l;
	int Mnth[12] = {0,31,59,90,120,151,181,212,243,273,304,334};
    7152:	98 e1       	ldi	r25, 0x18	; 24
    7154:	ee eb       	ldi	r30, 0xBE	; 190
    7156:	f0 e2       	ldi	r31, 0x20	; 32
    7158:	de 01       	movw	r26, r28
    715a:	11 96       	adiw	r26, 0x01	; 1
    715c:	01 90       	ld	r0, Z+
    715e:	0d 92       	st	X+, r0
    7160:	9a 95       	dec	r25
    7162:	e1 f7       	brne	.-8      	; 0x715c <time_get_weekday+0x2a>

	// Set DayofYear Number for yyyy mm dd
	DayOfYearNumber = dd + Mnth[mm-1];
    7164:	f6 01       	movw	r30, r12
    7166:	31 97       	sbiw	r30, 0x01	; 1
    7168:	ee 0f       	add	r30, r30
    716a:	ff 1f       	adc	r31, r31
    716c:	21 e0       	ldi	r18, 0x01	; 1
    716e:	30 e0       	ldi	r19, 0x00	; 0
    7170:	2c 0f       	add	r18, r28
    7172:	3d 1f       	adc	r19, r29
    7174:	e2 0f       	add	r30, r18
    7176:	f3 1f       	adc	r31, r19
    7178:	e0 80       	ld	r14, Z
    717a:	f1 80       	ldd	r15, Z+1	; 0x01
    717c:	e8 0e       	add	r14, r24
    717e:	f1 1c       	adc	r15, r1

	// Increase of Dayof Year Number by 1, if year is leapyear and month is february
	if ((time_is_leap_year(yyyy) == true) && (mm == 2))
    7180:	ca 01       	movw	r24, r20
    7182:	8d df       	rcall	.-230    	; 0x709e <time_is_leap_year>
    7184:	88 23       	and	r24, r24
    7186:	39 f0       	breq	.+14     	; 0x7196 <time_get_weekday+0x64>
    7188:	32 e0       	ldi	r19, 0x02	; 2
    718a:	c3 16       	cp	r12, r19
    718c:	d1 04       	cpc	r13, r1
    718e:	19 f4       	brne	.+6      	; 0x7196 <time_get_weekday+0x64>
	DayOfYearNumber += 1;
    7190:	8f ef       	ldi	r24, 0xFF	; 255
    7192:	e8 1a       	sub	r14, r24
    7194:	f8 0a       	sbc	r15, r24

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
    7196:	01 50       	subi	r16, 0x01	; 1
    7198:	11 09       	sbc	r17, r1
    719a:	e4 e6       	ldi	r30, 0x64	; 100
    719c:	f0 e0       	ldi	r31, 0x00	; 0
    719e:	c8 01       	movw	r24, r16
    71a0:	bf 01       	movw	r22, r30
    71a2:	e3 d1       	rcall	.+966    	; 0x756a <__divmodhi4>
    71a4:	9c 01       	movw	r18, r24
    71a6:	6c 01       	movw	r12, r24
	j = (yyyy - 1) - i;
    71a8:	c8 01       	movw	r24, r16
    71aa:	82 1b       	sub	r24, r18
    71ac:	93 0b       	sbc	r25, r19
	k = i + i/4;
	Jan1WeekDay = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    71ae:	bf 01       	movw	r22, r30
    71b0:	dc d1       	rcall	.+952    	; 0x756a <__divmodhi4>
    71b2:	63 70       	andi	r22, 0x03	; 3
    71b4:	70 78       	andi	r23, 0x80	; 128
    71b6:	77 23       	and	r23, r23
    71b8:	34 f4       	brge	.+12     	; 0x71c6 <time_get_weekday+0x94>
    71ba:	61 50       	subi	r22, 0x01	; 1
    71bc:	71 09       	sbc	r23, r1
    71be:	6c 6f       	ori	r22, 0xFC	; 252
    71c0:	7f 6f       	ori	r23, 0xFF	; 255
    71c2:	6f 5f       	subi	r22, 0xFF	; 255
    71c4:	7f 4f       	sbci	r23, 0xFF	; 255
    71c6:	cb 01       	movw	r24, r22
    71c8:	88 0f       	add	r24, r24
    71ca:	99 1f       	adc	r25, r25
    71cc:	88 0f       	add	r24, r24
    71ce:	99 1f       	adc	r25, r25
    71d0:	68 0f       	add	r22, r24
    71d2:	79 1f       	adc	r23, r25
	DayOfYearNumber += 1;

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
	j = (yyyy - 1) - i;
	k = i + i/4;
    71d4:	a9 01       	movw	r20, r18
    71d6:	dd 20       	and	r13, r13
    71d8:	14 f4       	brge	.+4      	; 0x71de <time_get_weekday+0xac>
    71da:	4d 5f       	subi	r20, 0xFD	; 253
    71dc:	5f 4f       	sbci	r21, 0xFF	; 255
    71de:	ca 01       	movw	r24, r20
    71e0:	95 95       	asr	r25
    71e2:	87 95       	ror	r24
    71e4:	95 95       	asr	r25
    71e6:	87 95       	ror	r24
    71e8:	28 0f       	add	r18, r24
    71ea:	39 1f       	adc	r19, r25
	Jan1WeekDay = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    71ec:	cb 01       	movw	r24, r22
    71ee:	82 0f       	add	r24, r18
    71f0:	93 1f       	adc	r25, r19
    71f2:	e7 e0       	ldi	r30, 0x07	; 7
    71f4:	f0 e0       	ldi	r31, 0x00	; 0
    71f6:	bf 01       	movw	r22, r30
    71f8:	b8 d1       	rcall	.+880    	; 0x756a <__divmodhi4>

	// Calcuate the WeekDay for the given date
	l= DayOfYearNumber + (Jan1WeekDay - 1);
    71fa:	8e 0d       	add	r24, r14
    71fc:	9f 1d       	adc	r25, r15
	WeekDay = 1 + ((l - 1) % 7);
    71fe:	01 97       	sbiw	r24, 0x01	; 1
    7200:	bf 01       	movw	r22, r30
    7202:	b3 d1       	rcall	.+870    	; 0x756a <__divmodhi4>

	return WeekDay;
}
    7204:	8f 5f       	subi	r24, 0xFF	; 255
    7206:	68 96       	adiw	r28, 0x18	; 24
    7208:	cd bf       	out	0x3d, r28	; 61
    720a:	de bf       	out	0x3e, r29	; 62
    720c:	df 91       	pop	r29
    720e:	cf 91       	pop	r28
    7210:	1f 91       	pop	r17
    7212:	0f 91       	pop	r16
    7214:	ff 90       	pop	r15
    7216:	ef 90       	pop	r14
    7218:	df 90       	pop	r13
    721a:	cf 90       	pop	r12
    721c:	08 95       	ret

0000721e <time_get_weeknumber>:
	else
		return false;
}

// Static Method to return ISO WeekNumber (1-53) for a given year
int time_get_weeknumber(uint8_t day, uint8_t month, uint16_t year) {
    721e:	cf 92       	push	r12
    7220:	df 92       	push	r13
    7222:	ef 92       	push	r14
    7224:	ff 92       	push	r15
    7226:	0f 93       	push	r16
    7228:	1f 93       	push	r17
    722a:	cf 93       	push	r28
    722c:	df 93       	push	r29
    722e:	cd b7       	in	r28, 0x3d	; 61
    7230:	de b7       	in	r29, 0x3e	; 62
    7232:	68 97       	sbiw	r28, 0x18	; 24
    7234:	cd bf       	out	0x3d, r28	; 61
    7236:	de bf       	out	0x3e, r29	; 62
    7238:	7a 01       	movw	r14, r20
	    
	// Set Year
	int yyyy = year;

	// Set Month
	int mm= month;
    723a:	c6 2e       	mov	r12, r22
    723c:	d1 2c       	mov	r13, r1
	int DayOfYearNumber;
	int Jan1WeekDay;
	int WeekNumber=0, WeekDay;
	    
	int i,j,k,l,m,n;
	int Mnth[12] = {0,31,59,90,120,151,181,212,243,273,304,334};
    723e:	98 e1       	ldi	r25, 0x18	; 24
    7240:	ee eb       	ldi	r30, 0xBE	; 190
    7242:	f0 e2       	ldi	r31, 0x20	; 32
    7244:	de 01       	movw	r26, r28
    7246:	11 96       	adiw	r26, 0x01	; 1
    7248:	01 90       	ld	r0, Z+
    724a:	0d 92       	st	X+, r0
    724c:	9a 95       	dec	r25
    724e:	e1 f7       	brne	.-8      	; 0x7248 <time_get_weeknumber+0x2a>

	int YearNumber;
	    
	// Set DayofYear Number for yyyy mm dd
	DayOfYearNumber = dd + Mnth[mm-1];
    7250:	f6 01       	movw	r30, r12
    7252:	31 97       	sbiw	r30, 0x01	; 1
    7254:	ee 0f       	add	r30, r30
    7256:	ff 1f       	adc	r31, r31
    7258:	21 e0       	ldi	r18, 0x01	; 1
    725a:	30 e0       	ldi	r19, 0x00	; 0
    725c:	2c 0f       	add	r18, r28
    725e:	3d 1f       	adc	r19, r29
    7260:	e2 0f       	add	r30, r18
    7262:	f3 1f       	adc	r31, r19
    7264:	00 81       	ld	r16, Z
    7266:	11 81       	ldd	r17, Z+1	; 0x01
    7268:	08 0f       	add	r16, r24
    726a:	11 1d       	adc	r17, r1

	// Increase of Dayof Year Number by 1, if year is leapyear and month is february
	if ((time_is_leap_year(yyyy) == true) && (mm == 2))
    726c:	ca 01       	movw	r24, r20
    726e:	17 df       	rcall	.-466    	; 0x709e <time_is_leap_year>
    7270:	48 2f       	mov	r20, r24
    7272:	88 23       	and	r24, r24
    7274:	31 f0       	breq	.+12     	; 0x7282 <time_get_weeknumber+0x64>
    7276:	32 e0       	ldi	r19, 0x02	; 2
    7278:	c3 16       	cp	r12, r19
    727a:	d1 04       	cpc	r13, r1
    727c:	11 f4       	brne	.+4      	; 0x7282 <time_get_weeknumber+0x64>
	DayOfYearNumber += 1;
    727e:	0f 5f       	subi	r16, 0xFF	; 255
    7280:	1f 4f       	sbci	r17, 0xFF	; 255

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
    7282:	51 e0       	ldi	r21, 0x01	; 1
    7284:	e5 1a       	sub	r14, r21
    7286:	f1 08       	sbc	r15, r1
    7288:	e4 e6       	ldi	r30, 0x64	; 100
    728a:	f0 e0       	ldi	r31, 0x00	; 0
    728c:	c7 01       	movw	r24, r14
    728e:	bf 01       	movw	r22, r30
    7290:	6c d1       	rcall	.+728    	; 0x756a <__divmodhi4>
    7292:	9c 01       	movw	r18, r24
    7294:	6c 01       	movw	r12, r24
	j = (yyyy - 1) - i;
    7296:	c7 01       	movw	r24, r14
    7298:	82 1b       	sub	r24, r18
    729a:	93 0b       	sbc	r25, r19
	k = i + i/4;
	Jan1WeekDay = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    729c:	bf 01       	movw	r22, r30
    729e:	65 d1       	rcall	.+714    	; 0x756a <__divmodhi4>
    72a0:	63 70       	andi	r22, 0x03	; 3
    72a2:	70 78       	andi	r23, 0x80	; 128
    72a4:	77 23       	and	r23, r23
    72a6:	34 f4       	brge	.+12     	; 0x72b4 <time_get_weeknumber+0x96>
    72a8:	61 50       	subi	r22, 0x01	; 1
    72aa:	71 09       	sbc	r23, r1
    72ac:	6c 6f       	ori	r22, 0xFC	; 252
    72ae:	7f 6f       	ori	r23, 0xFF	; 255
    72b0:	6f 5f       	subi	r22, 0xFF	; 255
    72b2:	7f 4f       	sbci	r23, 0xFF	; 255
    72b4:	cb 01       	movw	r24, r22
    72b6:	88 0f       	add	r24, r24
    72b8:	99 1f       	adc	r25, r25
    72ba:	88 0f       	add	r24, r24
    72bc:	99 1f       	adc	r25, r25
    72be:	68 0f       	add	r22, r24
    72c0:	79 1f       	adc	r23, r25
	DayOfYearNumber += 1;

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
	j = (yyyy - 1) - i;
	k = i + i/4;
    72c2:	f9 01       	movw	r30, r18
    72c4:	dd 20       	and	r13, r13
    72c6:	0c f4       	brge	.+2      	; 0x72ca <time_get_weeknumber+0xac>
    72c8:	33 96       	adiw	r30, 0x03	; 3
    72ca:	cf 01       	movw	r24, r30
    72cc:	95 95       	asr	r25
    72ce:	87 95       	ror	r24
    72d0:	95 95       	asr	r25
    72d2:	87 95       	ror	r24
    72d4:	28 0f       	add	r18, r24
    72d6:	39 1f       	adc	r19, r25
	Jan1WeekDay = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    72d8:	cb 01       	movw	r24, r22
    72da:	82 0f       	add	r24, r18
    72dc:	93 1f       	adc	r25, r19
    72de:	e7 e0       	ldi	r30, 0x07	; 7
    72e0:	f0 e0       	ldi	r31, 0x00	; 0
    72e2:	bf 01       	movw	r22, r30
    72e4:	42 d1       	rcall	.+644    	; 0x756a <__divmodhi4>
    72e6:	9c 01       	movw	r18, r24
    72e8:	7c 01       	movw	r14, r24
    72ea:	8f ef       	ldi	r24, 0xFF	; 255
    72ec:	e8 1a       	sub	r14, r24
    72ee:	f8 0a       	sbc	r15, r24
	// Calcuate the WeekDay for the given date
	l= DayOfYearNumber + (Jan1WeekDay - 1);
	WeekDay = 1 + ((l - 1) % 7);

	// Find if the date falls in YearNumber set WeekNumber to 52 or 53
	if ((DayOfYearNumber <= (8 - Jan1WeekDay)) && (Jan1WeekDay > 4))
    72f0:	e2 1b       	sub	r30, r18
    72f2:	f3 0b       	sbc	r31, r19
    72f4:	e0 17       	cp	r30, r16
    72f6:	f1 07       	cpc	r31, r17
    72f8:	8c f0       	brlt	.+34     	; 0x731c <time_get_weeknumber+0xfe>
    72fa:	55 e0       	ldi	r21, 0x05	; 5
    72fc:	e5 16       	cp	r14, r21
    72fe:	f1 04       	cpc	r15, r1
    7300:	6c f0       	brlt	.+26     	; 0x731c <time_get_weeknumber+0xfe>
	{
		YearNumber = yyyy - 1;
		if ((Jan1WeekDay == 5) || ((Jan1WeekDay == 6) && (Jan1WeekDay > 4)))
    7302:	85 e0       	ldi	r24, 0x05	; 5
    7304:	e8 1a       	sub	r14, r24
    7306:	f1 08       	sbc	r15, r1
    7308:	22 e0       	ldi	r18, 0x02	; 2
    730a:	e2 16       	cp	r14, r18
    730c:	f1 04       	cpc	r15, r1
    730e:	18 f4       	brcc	.+6      	; 0x7316 <time_get_weeknumber+0xf8>
		WeekNumber = 53;
    7310:	85 e3       	ldi	r24, 0x35	; 53
    7312:	90 e0       	ldi	r25, 0x00	; 0
    7314:	2d c0       	rjmp	.+90     	; 0x7370 <time_get_weeknumber+0x152>
		else
		WeekNumber = 52;
    7316:	84 e3       	ldi	r24, 0x34	; 52
    7318:	90 e0       	ldi	r25, 0x00	; 0
    731a:	2a c0       	rjmp	.+84     	; 0x7370 <time_get_weeknumber+0x152>
	    

	// Set WeekNumber to 1 to 53 if date falls in YearNumber
	if (YearNumber == yyyy)
	{
		if (time_is_leap_year(yyyy)==true)
    731c:	44 23       	and	r20, r20
    731e:	19 f0       	breq	.+6      	; 0x7326 <time_get_weeknumber+0x108>
		m = 366;
    7320:	ee e6       	ldi	r30, 0x6E	; 110
    7322:	f1 e0       	ldi	r31, 0x01	; 1
    7324:	02 c0       	rjmp	.+4      	; 0x732a <time_get_weeknumber+0x10c>
		else
		m = 365;
    7326:	ed e6       	ldi	r30, 0x6D	; 109
    7328:	f1 e0       	ldi	r31, 0x01	; 1
	j = (yyyy - 1) - i;
	k = i + i/4;
	Jan1WeekDay = 1 + (((((j / 100) % 4) * 5) + k) % 7);

	// Calcuate the WeekDay for the given date
	l= DayOfYearNumber + (Jan1WeekDay - 1);
    732a:	c8 01       	movw	r24, r16
    732c:	82 0f       	add	r24, r18
    732e:	93 1f       	adc	r25, r19
	WeekDay = 1 + ((l - 1) % 7);
    7330:	01 97       	sbiw	r24, 0x01	; 1
    7332:	67 e0       	ldi	r22, 0x07	; 7
    7334:	70 e0       	ldi	r23, 0x00	; 0
    7336:	19 d1       	rcall	.+562    	; 0x756a <__divmodhi4>
	{
		if (time_is_leap_year(yyyy)==true)
		m = 366;
		else
		m = 365;
		if ((m - DayOfYearNumber) < (4-WeekDay))
    7338:	e0 1b       	sub	r30, r16
    733a:	f1 0b       	sbc	r31, r17
    733c:	43 e0       	ldi	r20, 0x03	; 3
    733e:	50 e0       	ldi	r21, 0x00	; 0
    7340:	48 1b       	sub	r20, r24
    7342:	59 0b       	sbc	r21, r25
    7344:	e4 17       	cp	r30, r20
    7346:	f5 07       	cpc	r31, r21
    7348:	8c f0       	brlt	.+34     	; 0x736c <time_get_weeknumber+0x14e>
			WeekNumber = 1;
		}
	}
	    
	if (YearNumber==yyyy) {
		n=DayOfYearNumber + (7 - WeekDay) + (Jan1WeekDay -1);
    734a:	a8 01       	movw	r20, r16
    734c:	48 1b       	sub	r20, r24
    734e:	59 0b       	sbc	r21, r25
    7350:	ca 01       	movw	r24, r20
    7352:	06 96       	adiw	r24, 0x06	; 6
    7354:	82 0f       	add	r24, r18
    7356:	93 1f       	adc	r25, r19
		WeekNumber = n / 7;
    7358:	67 e0       	ldi	r22, 0x07	; 7
    735a:	70 e0       	ldi	r23, 0x00	; 0
    735c:	06 d1       	rcall	.+524    	; 0x756a <__divmodhi4>
    735e:	cb 01       	movw	r24, r22
		if (Jan1WeekDay > 4)
    7360:	55 e0       	ldi	r21, 0x05	; 5
    7362:	e5 16       	cp	r14, r21
    7364:	f1 04       	cpc	r15, r1
    7366:	24 f0       	brlt	.+8      	; 0x7370 <time_get_weeknumber+0x152>
		WeekNumber -= 1;
    7368:	01 97       	sbiw	r24, 0x01	; 1
    736a:	02 c0       	rjmp	.+4      	; 0x7370 <time_get_weeknumber+0x152>
		else
		m = 365;
		if ((m - DayOfYearNumber) < (4-WeekDay))
		{
			YearNumber = yyyy + 1;
			WeekNumber = 1;
    736c:	81 e0       	ldi	r24, 0x01	; 1
    736e:	90 e0       	ldi	r25, 0x00	; 0
		if (Jan1WeekDay > 4)
		WeekNumber -= 1;
	}

	return (WeekNumber);
}
    7370:	68 96       	adiw	r28, 0x18	; 24
    7372:	cd bf       	out	0x3d, r28	; 61
    7374:	de bf       	out	0x3e, r29	; 62
    7376:	df 91       	pop	r29
    7378:	cf 91       	pop	r28
    737a:	1f 91       	pop	r17
    737c:	0f 91       	pop	r16
    737e:	ff 90       	pop	r15
    7380:	ef 90       	pop	r14
    7382:	df 90       	pop	r13
    7384:	cf 90       	pop	r12
    7386:	08 95       	ret

00007388 <__floatunsisf>:
    7388:	e8 94       	clt
    738a:	09 c0       	rjmp	.+18     	; 0x739e <__floatsisf+0x12>

0000738c <__floatsisf>:
    738c:	97 fb       	bst	r25, 7
    738e:	3e f4       	brtc	.+14     	; 0x739e <__floatsisf+0x12>
    7390:	90 95       	com	r25
    7392:	80 95       	com	r24
    7394:	70 95       	com	r23
    7396:	61 95       	neg	r22
    7398:	7f 4f       	sbci	r23, 0xFF	; 255
    739a:	8f 4f       	sbci	r24, 0xFF	; 255
    739c:	9f 4f       	sbci	r25, 0xFF	; 255
    739e:	99 23       	and	r25, r25
    73a0:	a9 f0       	breq	.+42     	; 0x73cc <__floatsisf+0x40>
    73a2:	f9 2f       	mov	r31, r25
    73a4:	96 e9       	ldi	r25, 0x96	; 150
    73a6:	bb 27       	eor	r27, r27
    73a8:	93 95       	inc	r25
    73aa:	f6 95       	lsr	r31
    73ac:	87 95       	ror	r24
    73ae:	77 95       	ror	r23
    73b0:	67 95       	ror	r22
    73b2:	b7 95       	ror	r27
    73b4:	f1 11       	cpse	r31, r1
    73b6:	f8 cf       	rjmp	.-16     	; 0x73a8 <__floatsisf+0x1c>
    73b8:	fa f4       	brpl	.+62     	; 0x73f8 <__floatsisf+0x6c>
    73ba:	bb 0f       	add	r27, r27
    73bc:	11 f4       	brne	.+4      	; 0x73c2 <__floatsisf+0x36>
    73be:	60 ff       	sbrs	r22, 0
    73c0:	1b c0       	rjmp	.+54     	; 0x73f8 <__floatsisf+0x6c>
    73c2:	6f 5f       	subi	r22, 0xFF	; 255
    73c4:	7f 4f       	sbci	r23, 0xFF	; 255
    73c6:	8f 4f       	sbci	r24, 0xFF	; 255
    73c8:	9f 4f       	sbci	r25, 0xFF	; 255
    73ca:	16 c0       	rjmp	.+44     	; 0x73f8 <__floatsisf+0x6c>
    73cc:	88 23       	and	r24, r24
    73ce:	11 f0       	breq	.+4      	; 0x73d4 <__floatsisf+0x48>
    73d0:	96 e9       	ldi	r25, 0x96	; 150
    73d2:	11 c0       	rjmp	.+34     	; 0x73f6 <__floatsisf+0x6a>
    73d4:	77 23       	and	r23, r23
    73d6:	21 f0       	breq	.+8      	; 0x73e0 <__floatsisf+0x54>
    73d8:	9e e8       	ldi	r25, 0x8E	; 142
    73da:	87 2f       	mov	r24, r23
    73dc:	76 2f       	mov	r23, r22
    73de:	05 c0       	rjmp	.+10     	; 0x73ea <__floatsisf+0x5e>
    73e0:	66 23       	and	r22, r22
    73e2:	71 f0       	breq	.+28     	; 0x7400 <__floatsisf+0x74>
    73e4:	96 e8       	ldi	r25, 0x86	; 134
    73e6:	86 2f       	mov	r24, r22
    73e8:	70 e0       	ldi	r23, 0x00	; 0
    73ea:	60 e0       	ldi	r22, 0x00	; 0
    73ec:	2a f0       	brmi	.+10     	; 0x73f8 <__floatsisf+0x6c>
    73ee:	9a 95       	dec	r25
    73f0:	66 0f       	add	r22, r22
    73f2:	77 1f       	adc	r23, r23
    73f4:	88 1f       	adc	r24, r24
    73f6:	da f7       	brpl	.-10     	; 0x73ee <__floatsisf+0x62>
    73f8:	88 0f       	add	r24, r24
    73fa:	96 95       	lsr	r25
    73fc:	87 95       	ror	r24
    73fe:	97 f9       	bld	r25, 7
    7400:	08 95       	ret

00007402 <__fp_split3>:
    7402:	57 fd       	sbrc	r21, 7
    7404:	90 58       	subi	r25, 0x80	; 128
    7406:	44 0f       	add	r20, r20
    7408:	55 1f       	adc	r21, r21
    740a:	59 f0       	breq	.+22     	; 0x7422 <__fp_splitA+0x10>
    740c:	5f 3f       	cpi	r21, 0xFF	; 255
    740e:	71 f0       	breq	.+28     	; 0x742c <__fp_splitA+0x1a>
    7410:	47 95       	ror	r20

00007412 <__fp_splitA>:
    7412:	88 0f       	add	r24, r24
    7414:	97 fb       	bst	r25, 7
    7416:	99 1f       	adc	r25, r25
    7418:	61 f0       	breq	.+24     	; 0x7432 <__fp_splitA+0x20>
    741a:	9f 3f       	cpi	r25, 0xFF	; 255
    741c:	79 f0       	breq	.+30     	; 0x743c <__fp_splitA+0x2a>
    741e:	87 95       	ror	r24
    7420:	08 95       	ret
    7422:	12 16       	cp	r1, r18
    7424:	13 06       	cpc	r1, r19
    7426:	14 06       	cpc	r1, r20
    7428:	55 1f       	adc	r21, r21
    742a:	f2 cf       	rjmp	.-28     	; 0x7410 <__fp_split3+0xe>
    742c:	46 95       	lsr	r20
    742e:	f1 df       	rcall	.-30     	; 0x7412 <__fp_splitA>
    7430:	08 c0       	rjmp	.+16     	; 0x7442 <__fp_splitA+0x30>
    7432:	16 16       	cp	r1, r22
    7434:	17 06       	cpc	r1, r23
    7436:	18 06       	cpc	r1, r24
    7438:	99 1f       	adc	r25, r25
    743a:	f1 cf       	rjmp	.-30     	; 0x741e <__fp_splitA+0xc>
    743c:	86 95       	lsr	r24
    743e:	71 05       	cpc	r23, r1
    7440:	61 05       	cpc	r22, r1
    7442:	08 94       	sec
    7444:	08 95       	ret

00007446 <__fp_zero>:
    7446:	e8 94       	clt

00007448 <__fp_szero>:
    7448:	bb 27       	eor	r27, r27
    744a:	66 27       	eor	r22, r22
    744c:	77 27       	eor	r23, r23
    744e:	cb 01       	movw	r24, r22
    7450:	97 f9       	bld	r25, 7
    7452:	08 95       	ret

00007454 <__mulsf3>:
    7454:	0b d0       	rcall	.+22     	; 0x746c <__mulsf3x>
    7456:	78 c0       	rjmp	.+240    	; 0x7548 <__fp_round>
    7458:	69 d0       	rcall	.+210    	; 0x752c <__fp_pscA>
    745a:	28 f0       	brcs	.+10     	; 0x7466 <__mulsf3+0x12>
    745c:	6e d0       	rcall	.+220    	; 0x753a <__fp_pscB>
    745e:	18 f0       	brcs	.+6      	; 0x7466 <__mulsf3+0x12>
    7460:	95 23       	and	r25, r21
    7462:	09 f0       	breq	.+2      	; 0x7466 <__mulsf3+0x12>
    7464:	5a c0       	rjmp	.+180    	; 0x751a <__fp_inf>
    7466:	5f c0       	rjmp	.+190    	; 0x7526 <__fp_nan>
    7468:	11 24       	eor	r1, r1
    746a:	ee cf       	rjmp	.-36     	; 0x7448 <__fp_szero>

0000746c <__mulsf3x>:
    746c:	ca df       	rcall	.-108    	; 0x7402 <__fp_split3>
    746e:	a0 f3       	brcs	.-24     	; 0x7458 <__mulsf3+0x4>

00007470 <__mulsf3_pse>:
    7470:	95 9f       	mul	r25, r21
    7472:	d1 f3       	breq	.-12     	; 0x7468 <__mulsf3+0x14>
    7474:	95 0f       	add	r25, r21
    7476:	50 e0       	ldi	r21, 0x00	; 0
    7478:	55 1f       	adc	r21, r21
    747a:	62 9f       	mul	r22, r18
    747c:	f0 01       	movw	r30, r0
    747e:	72 9f       	mul	r23, r18
    7480:	bb 27       	eor	r27, r27
    7482:	f0 0d       	add	r31, r0
    7484:	b1 1d       	adc	r27, r1
    7486:	63 9f       	mul	r22, r19
    7488:	aa 27       	eor	r26, r26
    748a:	f0 0d       	add	r31, r0
    748c:	b1 1d       	adc	r27, r1
    748e:	aa 1f       	adc	r26, r26
    7490:	64 9f       	mul	r22, r20
    7492:	66 27       	eor	r22, r22
    7494:	b0 0d       	add	r27, r0
    7496:	a1 1d       	adc	r26, r1
    7498:	66 1f       	adc	r22, r22
    749a:	82 9f       	mul	r24, r18
    749c:	22 27       	eor	r18, r18
    749e:	b0 0d       	add	r27, r0
    74a0:	a1 1d       	adc	r26, r1
    74a2:	62 1f       	adc	r22, r18
    74a4:	73 9f       	mul	r23, r19
    74a6:	b0 0d       	add	r27, r0
    74a8:	a1 1d       	adc	r26, r1
    74aa:	62 1f       	adc	r22, r18
    74ac:	83 9f       	mul	r24, r19
    74ae:	a0 0d       	add	r26, r0
    74b0:	61 1d       	adc	r22, r1
    74b2:	22 1f       	adc	r18, r18
    74b4:	74 9f       	mul	r23, r20
    74b6:	33 27       	eor	r19, r19
    74b8:	a0 0d       	add	r26, r0
    74ba:	61 1d       	adc	r22, r1
    74bc:	23 1f       	adc	r18, r19
    74be:	84 9f       	mul	r24, r20
    74c0:	60 0d       	add	r22, r0
    74c2:	21 1d       	adc	r18, r1
    74c4:	82 2f       	mov	r24, r18
    74c6:	76 2f       	mov	r23, r22
    74c8:	6a 2f       	mov	r22, r26
    74ca:	11 24       	eor	r1, r1
    74cc:	9f 57       	subi	r25, 0x7F	; 127
    74ce:	50 40       	sbci	r21, 0x00	; 0
    74d0:	8a f0       	brmi	.+34     	; 0x74f4 <__mulsf3_pse+0x84>
    74d2:	e1 f0       	breq	.+56     	; 0x750c <__mulsf3_pse+0x9c>
    74d4:	88 23       	and	r24, r24
    74d6:	4a f0       	brmi	.+18     	; 0x74ea <__mulsf3_pse+0x7a>
    74d8:	ee 0f       	add	r30, r30
    74da:	ff 1f       	adc	r31, r31
    74dc:	bb 1f       	adc	r27, r27
    74de:	66 1f       	adc	r22, r22
    74e0:	77 1f       	adc	r23, r23
    74e2:	88 1f       	adc	r24, r24
    74e4:	91 50       	subi	r25, 0x01	; 1
    74e6:	50 40       	sbci	r21, 0x00	; 0
    74e8:	a9 f7       	brne	.-22     	; 0x74d4 <__mulsf3_pse+0x64>
    74ea:	9e 3f       	cpi	r25, 0xFE	; 254
    74ec:	51 05       	cpc	r21, r1
    74ee:	70 f0       	brcs	.+28     	; 0x750c <__mulsf3_pse+0x9c>
    74f0:	14 c0       	rjmp	.+40     	; 0x751a <__fp_inf>
    74f2:	aa cf       	rjmp	.-172    	; 0x7448 <__fp_szero>
    74f4:	5f 3f       	cpi	r21, 0xFF	; 255
    74f6:	ec f3       	brlt	.-6      	; 0x74f2 <__mulsf3_pse+0x82>
    74f8:	98 3e       	cpi	r25, 0xE8	; 232
    74fa:	dc f3       	brlt	.-10     	; 0x74f2 <__mulsf3_pse+0x82>
    74fc:	86 95       	lsr	r24
    74fe:	77 95       	ror	r23
    7500:	67 95       	ror	r22
    7502:	b7 95       	ror	r27
    7504:	f7 95       	ror	r31
    7506:	e7 95       	ror	r30
    7508:	9f 5f       	subi	r25, 0xFF	; 255
    750a:	c1 f7       	brne	.-16     	; 0x74fc <__mulsf3_pse+0x8c>
    750c:	fe 2b       	or	r31, r30
    750e:	88 0f       	add	r24, r24
    7510:	91 1d       	adc	r25, r1
    7512:	96 95       	lsr	r25
    7514:	87 95       	ror	r24
    7516:	97 f9       	bld	r25, 7
    7518:	08 95       	ret

0000751a <__fp_inf>:
    751a:	97 f9       	bld	r25, 7
    751c:	9f 67       	ori	r25, 0x7F	; 127
    751e:	80 e8       	ldi	r24, 0x80	; 128
    7520:	70 e0       	ldi	r23, 0x00	; 0
    7522:	60 e0       	ldi	r22, 0x00	; 0
    7524:	08 95       	ret

00007526 <__fp_nan>:
    7526:	9f ef       	ldi	r25, 0xFF	; 255
    7528:	80 ec       	ldi	r24, 0xC0	; 192
    752a:	08 95       	ret

0000752c <__fp_pscA>:
    752c:	00 24       	eor	r0, r0
    752e:	0a 94       	dec	r0
    7530:	16 16       	cp	r1, r22
    7532:	17 06       	cpc	r1, r23
    7534:	18 06       	cpc	r1, r24
    7536:	09 06       	cpc	r0, r25
    7538:	08 95       	ret

0000753a <__fp_pscB>:
    753a:	00 24       	eor	r0, r0
    753c:	0a 94       	dec	r0
    753e:	12 16       	cp	r1, r18
    7540:	13 06       	cpc	r1, r19
    7542:	14 06       	cpc	r1, r20
    7544:	05 06       	cpc	r0, r21
    7546:	08 95       	ret

00007548 <__fp_round>:
    7548:	09 2e       	mov	r0, r25
    754a:	03 94       	inc	r0
    754c:	00 0c       	add	r0, r0
    754e:	11 f4       	brne	.+4      	; 0x7554 <__fp_round+0xc>
    7550:	88 23       	and	r24, r24
    7552:	52 f0       	brmi	.+20     	; 0x7568 <__fp_round+0x20>
    7554:	bb 0f       	add	r27, r27
    7556:	40 f4       	brcc	.+16     	; 0x7568 <__fp_round+0x20>
    7558:	bf 2b       	or	r27, r31
    755a:	11 f4       	brne	.+4      	; 0x7560 <__fp_round+0x18>
    755c:	60 ff       	sbrs	r22, 0
    755e:	04 c0       	rjmp	.+8      	; 0x7568 <__fp_round+0x20>
    7560:	6f 5f       	subi	r22, 0xFF	; 255
    7562:	7f 4f       	sbci	r23, 0xFF	; 255
    7564:	8f 4f       	sbci	r24, 0xFF	; 255
    7566:	9f 4f       	sbci	r25, 0xFF	; 255
    7568:	08 95       	ret

0000756a <__divmodhi4>:
    756a:	97 fb       	bst	r25, 7
    756c:	07 2e       	mov	r0, r23
    756e:	16 f4       	brtc	.+4      	; 0x7574 <__divmodhi4+0xa>
    7570:	00 94       	com	r0
    7572:	06 d0       	rcall	.+12     	; 0x7580 <__divmodhi4_neg1>
    7574:	77 fd       	sbrc	r23, 7
    7576:	08 d0       	rcall	.+16     	; 0x7588 <__divmodhi4_neg2>
    7578:	4c d0       	rcall	.+152    	; 0x7612 <__udivmodhi4>
    757a:	07 fc       	sbrc	r0, 7
    757c:	05 d0       	rcall	.+10     	; 0x7588 <__divmodhi4_neg2>
    757e:	3e f4       	brtc	.+14     	; 0x758e <__divmodhi4_exit>

00007580 <__divmodhi4_neg1>:
    7580:	90 95       	com	r25
    7582:	81 95       	neg	r24
    7584:	9f 4f       	sbci	r25, 0xFF	; 255
    7586:	08 95       	ret

00007588 <__divmodhi4_neg2>:
    7588:	70 95       	com	r23
    758a:	61 95       	neg	r22
    758c:	7f 4f       	sbci	r23, 0xFF	; 255

0000758e <__divmodhi4_exit>:
    758e:	08 95       	ret

00007590 <__udivmodsi4>:
    7590:	a1 e2       	ldi	r26, 0x21	; 33
    7592:	1a 2e       	mov	r1, r26
    7594:	aa 1b       	sub	r26, r26
    7596:	bb 1b       	sub	r27, r27
    7598:	fd 01       	movw	r30, r26
    759a:	0d c0       	rjmp	.+26     	; 0x75b6 <__udivmodsi4_ep>

0000759c <__udivmodsi4_loop>:
    759c:	aa 1f       	adc	r26, r26
    759e:	bb 1f       	adc	r27, r27
    75a0:	ee 1f       	adc	r30, r30
    75a2:	ff 1f       	adc	r31, r31
    75a4:	a2 17       	cp	r26, r18
    75a6:	b3 07       	cpc	r27, r19
    75a8:	e4 07       	cpc	r30, r20
    75aa:	f5 07       	cpc	r31, r21
    75ac:	20 f0       	brcs	.+8      	; 0x75b6 <__udivmodsi4_ep>
    75ae:	a2 1b       	sub	r26, r18
    75b0:	b3 0b       	sbc	r27, r19
    75b2:	e4 0b       	sbc	r30, r20
    75b4:	f5 0b       	sbc	r31, r21

000075b6 <__udivmodsi4_ep>:
    75b6:	66 1f       	adc	r22, r22
    75b8:	77 1f       	adc	r23, r23
    75ba:	88 1f       	adc	r24, r24
    75bc:	99 1f       	adc	r25, r25
    75be:	1a 94       	dec	r1
    75c0:	69 f7       	brne	.-38     	; 0x759c <__udivmodsi4_loop>
    75c2:	60 95       	com	r22
    75c4:	70 95       	com	r23
    75c6:	80 95       	com	r24
    75c8:	90 95       	com	r25
    75ca:	9b 01       	movw	r18, r22
    75cc:	ac 01       	movw	r20, r24
    75ce:	bd 01       	movw	r22, r26
    75d0:	cf 01       	movw	r24, r30
    75d2:	08 95       	ret

000075d4 <__tablejump2__>:
    75d4:	ee 0f       	add	r30, r30
    75d6:	ff 1f       	adc	r31, r31

000075d8 <__tablejump__>:
    75d8:	05 90       	lpm	r0, Z+
    75da:	f4 91       	lpm	r31, Z
    75dc:	e0 2d       	mov	r30, r0
    75de:	09 94       	ijmp

000075e0 <__umulhisi3>:
    75e0:	a2 9f       	mul	r26, r18
    75e2:	b0 01       	movw	r22, r0
    75e4:	b3 9f       	mul	r27, r19
    75e6:	c0 01       	movw	r24, r0
    75e8:	a3 9f       	mul	r26, r19
    75ea:	70 0d       	add	r23, r0
    75ec:	81 1d       	adc	r24, r1
    75ee:	11 24       	eor	r1, r1
    75f0:	91 1d       	adc	r25, r1
    75f2:	b2 9f       	mul	r27, r18
    75f4:	70 0d       	add	r23, r0
    75f6:	81 1d       	adc	r24, r1
    75f8:	11 24       	eor	r1, r1
    75fa:	91 1d       	adc	r25, r1
    75fc:	08 95       	ret

000075fe <__muluhisi3>:
    75fe:	f0 df       	rcall	.-32     	; 0x75e0 <__umulhisi3>
    7600:	a5 9f       	mul	r26, r21
    7602:	90 0d       	add	r25, r0
    7604:	b4 9f       	mul	r27, r20
    7606:	90 0d       	add	r25, r0
    7608:	a4 9f       	mul	r26, r20
    760a:	80 0d       	add	r24, r0
    760c:	91 1d       	adc	r25, r1
    760e:	11 24       	eor	r1, r1
    7610:	08 95       	ret

00007612 <__udivmodhi4>:
    7612:	aa 1b       	sub	r26, r26
    7614:	bb 1b       	sub	r27, r27
    7616:	51 e1       	ldi	r21, 0x11	; 17
    7618:	07 c0       	rjmp	.+14     	; 0x7628 <__udivmodhi4_ep>

0000761a <__udivmodhi4_loop>:
    761a:	aa 1f       	adc	r26, r26
    761c:	bb 1f       	adc	r27, r27
    761e:	a6 17       	cp	r26, r22
    7620:	b7 07       	cpc	r27, r23
    7622:	10 f0       	brcs	.+4      	; 0x7628 <__udivmodhi4_ep>
    7624:	a6 1b       	sub	r26, r22
    7626:	b7 0b       	sbc	r27, r23

00007628 <__udivmodhi4_ep>:
    7628:	88 1f       	adc	r24, r24
    762a:	99 1f       	adc	r25, r25
    762c:	5a 95       	dec	r21
    762e:	a9 f7       	brne	.-22     	; 0x761a <__udivmodhi4_loop>
    7630:	80 95       	com	r24
    7632:	90 95       	com	r25
    7634:	bc 01       	movw	r22, r24
    7636:	cd 01       	movw	r24, r26
    7638:	08 95       	ret

0000763a <calloc>:
    763a:	0f 93       	push	r16
    763c:	1f 93       	push	r17
    763e:	cf 93       	push	r28
    7640:	df 93       	push	r29
    7642:	86 9f       	mul	r24, r22
    7644:	80 01       	movw	r16, r0
    7646:	87 9f       	mul	r24, r23
    7648:	10 0d       	add	r17, r0
    764a:	96 9f       	mul	r25, r22
    764c:	10 0d       	add	r17, r0
    764e:	11 24       	eor	r1, r1
    7650:	c8 01       	movw	r24, r16
    7652:	0d d0       	rcall	.+26     	; 0x766e <malloc>
    7654:	ec 01       	movw	r28, r24
    7656:	00 97       	sbiw	r24, 0x00	; 0
    7658:	21 f0       	breq	.+8      	; 0x7662 <calloc+0x28>
    765a:	a8 01       	movw	r20, r16
    765c:	60 e0       	ldi	r22, 0x00	; 0
    765e:	70 e0       	ldi	r23, 0x00	; 0
    7660:	c6 d2       	rcall	.+1420   	; 0x7bee <memset>
    7662:	ce 01       	movw	r24, r28
    7664:	df 91       	pop	r29
    7666:	cf 91       	pop	r28
    7668:	1f 91       	pop	r17
    766a:	0f 91       	pop	r16
    766c:	08 95       	ret

0000766e <malloc>:
    766e:	cf 93       	push	r28
    7670:	df 93       	push	r29
    7672:	82 30       	cpi	r24, 0x02	; 2
    7674:	91 05       	cpc	r25, r1
    7676:	10 f4       	brcc	.+4      	; 0x767c <malloc+0xe>
    7678:	82 e0       	ldi	r24, 0x02	; 2
    767a:	90 e0       	ldi	r25, 0x00	; 0
    767c:	e0 91 c2 2b 	lds	r30, 0x2BC2
    7680:	f0 91 c3 2b 	lds	r31, 0x2BC3
    7684:	20 e0       	ldi	r18, 0x00	; 0
    7686:	30 e0       	ldi	r19, 0x00	; 0
    7688:	a0 e0       	ldi	r26, 0x00	; 0
    768a:	b0 e0       	ldi	r27, 0x00	; 0
    768c:	30 97       	sbiw	r30, 0x00	; 0
    768e:	39 f1       	breq	.+78     	; 0x76de <malloc+0x70>
    7690:	40 81       	ld	r20, Z
    7692:	51 81       	ldd	r21, Z+1	; 0x01
    7694:	48 17       	cp	r20, r24
    7696:	59 07       	cpc	r21, r25
    7698:	b8 f0       	brcs	.+46     	; 0x76c8 <malloc+0x5a>
    769a:	48 17       	cp	r20, r24
    769c:	59 07       	cpc	r21, r25
    769e:	71 f4       	brne	.+28     	; 0x76bc <malloc+0x4e>
    76a0:	82 81       	ldd	r24, Z+2	; 0x02
    76a2:	93 81       	ldd	r25, Z+3	; 0x03
    76a4:	10 97       	sbiw	r26, 0x00	; 0
    76a6:	29 f0       	breq	.+10     	; 0x76b2 <malloc+0x44>
    76a8:	12 96       	adiw	r26, 0x02	; 2
    76aa:	8d 93       	st	X+, r24
    76ac:	9c 93       	st	X, r25
    76ae:	13 97       	sbiw	r26, 0x03	; 3
    76b0:	2c c0       	rjmp	.+88     	; 0x770a <malloc+0x9c>
    76b2:	80 93 c2 2b 	sts	0x2BC2, r24
    76b6:	90 93 c3 2b 	sts	0x2BC3, r25
    76ba:	27 c0       	rjmp	.+78     	; 0x770a <malloc+0x9c>
    76bc:	21 15       	cp	r18, r1
    76be:	31 05       	cpc	r19, r1
    76c0:	31 f0       	breq	.+12     	; 0x76ce <malloc+0x60>
    76c2:	42 17       	cp	r20, r18
    76c4:	53 07       	cpc	r21, r19
    76c6:	18 f0       	brcs	.+6      	; 0x76ce <malloc+0x60>
    76c8:	a9 01       	movw	r20, r18
    76ca:	db 01       	movw	r26, r22
    76cc:	01 c0       	rjmp	.+2      	; 0x76d0 <malloc+0x62>
    76ce:	ef 01       	movw	r28, r30
    76d0:	9a 01       	movw	r18, r20
    76d2:	bd 01       	movw	r22, r26
    76d4:	df 01       	movw	r26, r30
    76d6:	02 80       	ldd	r0, Z+2	; 0x02
    76d8:	f3 81       	ldd	r31, Z+3	; 0x03
    76da:	e0 2d       	mov	r30, r0
    76dc:	d7 cf       	rjmp	.-82     	; 0x768c <malloc+0x1e>
    76de:	21 15       	cp	r18, r1
    76e0:	31 05       	cpc	r19, r1
    76e2:	f9 f0       	breq	.+62     	; 0x7722 <malloc+0xb4>
    76e4:	28 1b       	sub	r18, r24
    76e6:	39 0b       	sbc	r19, r25
    76e8:	24 30       	cpi	r18, 0x04	; 4
    76ea:	31 05       	cpc	r19, r1
    76ec:	80 f4       	brcc	.+32     	; 0x770e <malloc+0xa0>
    76ee:	8a 81       	ldd	r24, Y+2	; 0x02
    76f0:	9b 81       	ldd	r25, Y+3	; 0x03
    76f2:	61 15       	cp	r22, r1
    76f4:	71 05       	cpc	r23, r1
    76f6:	21 f0       	breq	.+8      	; 0x7700 <malloc+0x92>
    76f8:	fb 01       	movw	r30, r22
    76fa:	82 83       	std	Z+2, r24	; 0x02
    76fc:	93 83       	std	Z+3, r25	; 0x03
    76fe:	04 c0       	rjmp	.+8      	; 0x7708 <malloc+0x9a>
    7700:	80 93 c2 2b 	sts	0x2BC2, r24
    7704:	90 93 c3 2b 	sts	0x2BC3, r25
    7708:	fe 01       	movw	r30, r28
    770a:	32 96       	adiw	r30, 0x02	; 2
    770c:	44 c0       	rjmp	.+136    	; 0x7796 <malloc+0x128>
    770e:	fe 01       	movw	r30, r28
    7710:	e2 0f       	add	r30, r18
    7712:	f3 1f       	adc	r31, r19
    7714:	81 93       	st	Z+, r24
    7716:	91 93       	st	Z+, r25
    7718:	22 50       	subi	r18, 0x02	; 2
    771a:	31 09       	sbc	r19, r1
    771c:	28 83       	st	Y, r18
    771e:	39 83       	std	Y+1, r19	; 0x01
    7720:	3a c0       	rjmp	.+116    	; 0x7796 <malloc+0x128>
    7722:	20 91 c0 2b 	lds	r18, 0x2BC0
    7726:	30 91 c1 2b 	lds	r19, 0x2BC1
    772a:	23 2b       	or	r18, r19
    772c:	41 f4       	brne	.+16     	; 0x773e <malloc+0xd0>
    772e:	20 91 02 20 	lds	r18, 0x2002
    7732:	30 91 03 20 	lds	r19, 0x2003
    7736:	20 93 c0 2b 	sts	0x2BC0, r18
    773a:	30 93 c1 2b 	sts	0x2BC1, r19
    773e:	20 91 00 20 	lds	r18, 0x2000
    7742:	30 91 01 20 	lds	r19, 0x2001
    7746:	21 15       	cp	r18, r1
    7748:	31 05       	cpc	r19, r1
    774a:	41 f4       	brne	.+16     	; 0x775c <malloc+0xee>
    774c:	2d b7       	in	r18, 0x3d	; 61
    774e:	3e b7       	in	r19, 0x3e	; 62
    7750:	40 91 04 20 	lds	r20, 0x2004
    7754:	50 91 05 20 	lds	r21, 0x2005
    7758:	24 1b       	sub	r18, r20
    775a:	35 0b       	sbc	r19, r21
    775c:	e0 91 c0 2b 	lds	r30, 0x2BC0
    7760:	f0 91 c1 2b 	lds	r31, 0x2BC1
    7764:	e2 17       	cp	r30, r18
    7766:	f3 07       	cpc	r31, r19
    7768:	a0 f4       	brcc	.+40     	; 0x7792 <malloc+0x124>
    776a:	2e 1b       	sub	r18, r30
    776c:	3f 0b       	sbc	r19, r31
    776e:	28 17       	cp	r18, r24
    7770:	39 07       	cpc	r19, r25
    7772:	78 f0       	brcs	.+30     	; 0x7792 <malloc+0x124>
    7774:	ac 01       	movw	r20, r24
    7776:	4e 5f       	subi	r20, 0xFE	; 254
    7778:	5f 4f       	sbci	r21, 0xFF	; 255
    777a:	24 17       	cp	r18, r20
    777c:	35 07       	cpc	r19, r21
    777e:	48 f0       	brcs	.+18     	; 0x7792 <malloc+0x124>
    7780:	4e 0f       	add	r20, r30
    7782:	5f 1f       	adc	r21, r31
    7784:	40 93 c0 2b 	sts	0x2BC0, r20
    7788:	50 93 c1 2b 	sts	0x2BC1, r21
    778c:	81 93       	st	Z+, r24
    778e:	91 93       	st	Z+, r25
    7790:	02 c0       	rjmp	.+4      	; 0x7796 <malloc+0x128>
    7792:	e0 e0       	ldi	r30, 0x00	; 0
    7794:	f0 e0       	ldi	r31, 0x00	; 0
    7796:	cf 01       	movw	r24, r30
    7798:	df 91       	pop	r29
    779a:	cf 91       	pop	r28
    779c:	08 95       	ret

0000779e <free>:
    779e:	cf 93       	push	r28
    77a0:	df 93       	push	r29
    77a2:	00 97       	sbiw	r24, 0x00	; 0
    77a4:	09 f4       	brne	.+2      	; 0x77a8 <free+0xa>
    77a6:	87 c0       	rjmp	.+270    	; 0x78b6 <free+0x118>
    77a8:	fc 01       	movw	r30, r24
    77aa:	32 97       	sbiw	r30, 0x02	; 2
    77ac:	12 82       	std	Z+2, r1	; 0x02
    77ae:	13 82       	std	Z+3, r1	; 0x03
    77b0:	c0 91 c2 2b 	lds	r28, 0x2BC2
    77b4:	d0 91 c3 2b 	lds	r29, 0x2BC3
    77b8:	20 97       	sbiw	r28, 0x00	; 0
    77ba:	81 f4       	brne	.+32     	; 0x77dc <free+0x3e>
    77bc:	20 81       	ld	r18, Z
    77be:	31 81       	ldd	r19, Z+1	; 0x01
    77c0:	28 0f       	add	r18, r24
    77c2:	39 1f       	adc	r19, r25
    77c4:	80 91 c0 2b 	lds	r24, 0x2BC0
    77c8:	90 91 c1 2b 	lds	r25, 0x2BC1
    77cc:	82 17       	cp	r24, r18
    77ce:	93 07       	cpc	r25, r19
    77d0:	79 f5       	brne	.+94     	; 0x7830 <free+0x92>
    77d2:	e0 93 c0 2b 	sts	0x2BC0, r30
    77d6:	f0 93 c1 2b 	sts	0x2BC1, r31
    77da:	6d c0       	rjmp	.+218    	; 0x78b6 <free+0x118>
    77dc:	de 01       	movw	r26, r28
    77de:	20 e0       	ldi	r18, 0x00	; 0
    77e0:	30 e0       	ldi	r19, 0x00	; 0
    77e2:	ae 17       	cp	r26, r30
    77e4:	bf 07       	cpc	r27, r31
    77e6:	50 f4       	brcc	.+20     	; 0x77fc <free+0x5e>
    77e8:	12 96       	adiw	r26, 0x02	; 2
    77ea:	4d 91       	ld	r20, X+
    77ec:	5c 91       	ld	r21, X
    77ee:	13 97       	sbiw	r26, 0x03	; 3
    77f0:	9d 01       	movw	r18, r26
    77f2:	41 15       	cp	r20, r1
    77f4:	51 05       	cpc	r21, r1
    77f6:	09 f1       	breq	.+66     	; 0x783a <free+0x9c>
    77f8:	da 01       	movw	r26, r20
    77fa:	f3 cf       	rjmp	.-26     	; 0x77e2 <free+0x44>
    77fc:	a2 83       	std	Z+2, r26	; 0x02
    77fe:	b3 83       	std	Z+3, r27	; 0x03
    7800:	40 81       	ld	r20, Z
    7802:	51 81       	ldd	r21, Z+1	; 0x01
    7804:	84 0f       	add	r24, r20
    7806:	95 1f       	adc	r25, r21
    7808:	8a 17       	cp	r24, r26
    780a:	9b 07       	cpc	r25, r27
    780c:	71 f4       	brne	.+28     	; 0x782a <free+0x8c>
    780e:	8d 91       	ld	r24, X+
    7810:	9c 91       	ld	r25, X
    7812:	11 97       	sbiw	r26, 0x01	; 1
    7814:	84 0f       	add	r24, r20
    7816:	95 1f       	adc	r25, r21
    7818:	02 96       	adiw	r24, 0x02	; 2
    781a:	80 83       	st	Z, r24
    781c:	91 83       	std	Z+1, r25	; 0x01
    781e:	12 96       	adiw	r26, 0x02	; 2
    7820:	8d 91       	ld	r24, X+
    7822:	9c 91       	ld	r25, X
    7824:	13 97       	sbiw	r26, 0x03	; 3
    7826:	82 83       	std	Z+2, r24	; 0x02
    7828:	93 83       	std	Z+3, r25	; 0x03
    782a:	21 15       	cp	r18, r1
    782c:	31 05       	cpc	r19, r1
    782e:	29 f4       	brne	.+10     	; 0x783a <free+0x9c>
    7830:	e0 93 c2 2b 	sts	0x2BC2, r30
    7834:	f0 93 c3 2b 	sts	0x2BC3, r31
    7838:	3e c0       	rjmp	.+124    	; 0x78b6 <free+0x118>
    783a:	d9 01       	movw	r26, r18
    783c:	12 96       	adiw	r26, 0x02	; 2
    783e:	ed 93       	st	X+, r30
    7840:	fc 93       	st	X, r31
    7842:	13 97       	sbiw	r26, 0x03	; 3
    7844:	4d 91       	ld	r20, X+
    7846:	5d 91       	ld	r21, X+
    7848:	a4 0f       	add	r26, r20
    784a:	b5 1f       	adc	r27, r21
    784c:	ea 17       	cp	r30, r26
    784e:	fb 07       	cpc	r31, r27
    7850:	79 f4       	brne	.+30     	; 0x7870 <free+0xd2>
    7852:	80 81       	ld	r24, Z
    7854:	91 81       	ldd	r25, Z+1	; 0x01
    7856:	84 0f       	add	r24, r20
    7858:	95 1f       	adc	r25, r21
    785a:	02 96       	adiw	r24, 0x02	; 2
    785c:	d9 01       	movw	r26, r18
    785e:	8d 93       	st	X+, r24
    7860:	9c 93       	st	X, r25
    7862:	11 97       	sbiw	r26, 0x01	; 1
    7864:	82 81       	ldd	r24, Z+2	; 0x02
    7866:	93 81       	ldd	r25, Z+3	; 0x03
    7868:	12 96       	adiw	r26, 0x02	; 2
    786a:	8d 93       	st	X+, r24
    786c:	9c 93       	st	X, r25
    786e:	13 97       	sbiw	r26, 0x03	; 3
    7870:	e0 e0       	ldi	r30, 0x00	; 0
    7872:	f0 e0       	ldi	r31, 0x00	; 0
    7874:	8a 81       	ldd	r24, Y+2	; 0x02
    7876:	9b 81       	ldd	r25, Y+3	; 0x03
    7878:	00 97       	sbiw	r24, 0x00	; 0
    787a:	19 f0       	breq	.+6      	; 0x7882 <free+0xe4>
    787c:	fe 01       	movw	r30, r28
    787e:	ec 01       	movw	r28, r24
    7880:	f9 cf       	rjmp	.-14     	; 0x7874 <free+0xd6>
    7882:	ce 01       	movw	r24, r28
    7884:	02 96       	adiw	r24, 0x02	; 2
    7886:	28 81       	ld	r18, Y
    7888:	39 81       	ldd	r19, Y+1	; 0x01
    788a:	82 0f       	add	r24, r18
    788c:	93 1f       	adc	r25, r19
    788e:	20 91 c0 2b 	lds	r18, 0x2BC0
    7892:	30 91 c1 2b 	lds	r19, 0x2BC1
    7896:	28 17       	cp	r18, r24
    7898:	39 07       	cpc	r19, r25
    789a:	69 f4       	brne	.+26     	; 0x78b6 <free+0x118>
    789c:	30 97       	sbiw	r30, 0x00	; 0
    789e:	29 f4       	brne	.+10     	; 0x78aa <free+0x10c>
    78a0:	10 92 c2 2b 	sts	0x2BC2, r1
    78a4:	10 92 c3 2b 	sts	0x2BC3, r1
    78a8:	02 c0       	rjmp	.+4      	; 0x78ae <free+0x110>
    78aa:	12 82       	std	Z+2, r1	; 0x02
    78ac:	13 82       	std	Z+3, r1	; 0x03
    78ae:	c0 93 c0 2b 	sts	0x2BC0, r28
    78b2:	d0 93 c1 2b 	sts	0x2BC1, r29
    78b6:	df 91       	pop	r29
    78b8:	cf 91       	pop	r28
    78ba:	08 95       	ret

000078bc <strtod>:
    78bc:	8f 92       	push	r8
    78be:	9f 92       	push	r9
    78c0:	af 92       	push	r10
    78c2:	bf 92       	push	r11
    78c4:	cf 92       	push	r12
    78c6:	df 92       	push	r13
    78c8:	ef 92       	push	r14
    78ca:	ff 92       	push	r15
    78cc:	0f 93       	push	r16
    78ce:	1f 93       	push	r17
    78d0:	cf 93       	push	r28
    78d2:	df 93       	push	r29
    78d4:	8b 01       	movw	r16, r22
    78d6:	61 15       	cp	r22, r1
    78d8:	71 05       	cpc	r23, r1
    78da:	21 f0       	breq	.+8      	; 0x78e4 <strtod+0x28>
    78dc:	db 01       	movw	r26, r22
    78de:	8c 93       	st	X, r24
    78e0:	11 96       	adiw	r26, 0x01	; 1
    78e2:	9c 93       	st	X, r25
    78e4:	ec 01       	movw	r28, r24
    78e6:	5e 01       	movw	r10, r28
    78e8:	bf ef       	ldi	r27, 0xFF	; 255
    78ea:	ab 1a       	sub	r10, r27
    78ec:	bb 0a       	sbc	r11, r27
    78ee:	75 01       	movw	r14, r10
    78f0:	c8 80       	ld	r12, Y
    78f2:	8c 2d       	mov	r24, r12
    78f4:	90 e0       	ldi	r25, 0x00	; 0
    78f6:	4a d1       	rcall	.+660    	; 0x7b8c <isspace>
    78f8:	89 2b       	or	r24, r25
    78fa:	11 f0       	breq	.+4      	; 0x7900 <strtod+0x44>
    78fc:	e5 01       	movw	r28, r10
    78fe:	f3 cf       	rjmp	.-26     	; 0x78e6 <strtod+0x2a>
    7900:	ed e2       	ldi	r30, 0x2D	; 45
    7902:	ce 12       	cpse	r12, r30
    7904:	08 c0       	rjmp	.+16     	; 0x7916 <strtod+0x5a>
    7906:	7e 01       	movw	r14, r28
    7908:	f2 e0       	ldi	r31, 0x02	; 2
    790a:	ef 0e       	add	r14, r31
    790c:	f1 1c       	adc	r15, r1
    790e:	c9 80       	ldd	r12, Y+1	; 0x01
    7910:	dd 24       	eor	r13, r13
    7912:	d3 94       	inc	r13
    7914:	09 c0       	rjmp	.+18     	; 0x7928 <strtod+0x6c>
    7916:	2b e2       	ldi	r18, 0x2B	; 43
    7918:	c2 12       	cpse	r12, r18
    791a:	05 c0       	rjmp	.+10     	; 0x7926 <strtod+0x6a>
    791c:	7e 01       	movw	r14, r28
    791e:	42 e0       	ldi	r20, 0x02	; 2
    7920:	e4 0e       	add	r14, r20
    7922:	f1 1c       	adc	r15, r1
    7924:	c9 80       	ldd	r12, Y+1	; 0x01
    7926:	d1 2c       	mov	r13, r1
    7928:	e7 01       	movw	r28, r14
    792a:	21 97       	sbiw	r28, 0x01	; 1
    792c:	43 e0       	ldi	r20, 0x03	; 3
    792e:	50 e0       	ldi	r21, 0x00	; 0
    7930:	6f e0       	ldi	r22, 0x0F	; 15
    7932:	7e e0       	ldi	r23, 0x0E	; 14
    7934:	ce 01       	movw	r24, r28
    7936:	3a d1       	rcall	.+628    	; 0x7bac <strncasecmp_P>
    7938:	89 2b       	or	r24, r25
    793a:	b9 f4       	brne	.+46     	; 0x796a <strtod+0xae>
    793c:	23 96       	adiw	r28, 0x03	; 3
    793e:	45 e0       	ldi	r20, 0x05	; 5
    7940:	50 e0       	ldi	r21, 0x00	; 0
    7942:	6a e0       	ldi	r22, 0x0A	; 10
    7944:	7e e0       	ldi	r23, 0x0E	; 14
    7946:	ce 01       	movw	r24, r28
    7948:	31 d1       	rcall	.+610    	; 0x7bac <strncasecmp_P>
    794a:	89 2b       	or	r24, r25
    794c:	09 f4       	brne	.+2      	; 0x7950 <strtod+0x94>
    794e:	25 96       	adiw	r28, 0x05	; 5
    7950:	01 15       	cp	r16, r1
    7952:	11 05       	cpc	r17, r1
    7954:	19 f0       	breq	.+6      	; 0x795c <strtod+0xa0>
    7956:	d8 01       	movw	r26, r16
    7958:	cd 93       	st	X+, r28
    795a:	dc 93       	st	X, r29
    795c:	d1 10       	cpse	r13, r1
    795e:	00 c1       	rjmp	.+512    	; 0x7b60 <strtod+0x2a4>
    7960:	60 e0       	ldi	r22, 0x00	; 0
    7962:	70 e0       	ldi	r23, 0x00	; 0
    7964:	80 e8       	ldi	r24, 0x80	; 128
    7966:	9f e7       	ldi	r25, 0x7F	; 127
    7968:	04 c1       	rjmp	.+520    	; 0x7b72 <strtod+0x2b6>
    796a:	43 e0       	ldi	r20, 0x03	; 3
    796c:	50 e0       	ldi	r21, 0x00	; 0
    796e:	67 e0       	ldi	r22, 0x07	; 7
    7970:	7e e0       	ldi	r23, 0x0E	; 14
    7972:	ce 01       	movw	r24, r28
    7974:	1b d1       	rcall	.+566    	; 0x7bac <strncasecmp_P>
    7976:	89 2b       	or	r24, r25
    7978:	59 f4       	brne	.+22     	; 0x7990 <strtod+0xd4>
    797a:	01 15       	cp	r16, r1
    797c:	11 05       	cpc	r17, r1
    797e:	09 f4       	brne	.+2      	; 0x7982 <strtod+0xc6>
    7980:	f4 c0       	rjmp	.+488    	; 0x7b6a <strtod+0x2ae>
    7982:	b2 e0       	ldi	r27, 0x02	; 2
    7984:	eb 0e       	add	r14, r27
    7986:	f1 1c       	adc	r15, r1
    7988:	f8 01       	movw	r30, r16
    798a:	e0 82       	st	Z, r14
    798c:	f1 82       	std	Z+1, r15	; 0x01
    798e:	ed c0       	rjmp	.+474    	; 0x7b6a <strtod+0x2ae>
    7990:	f7 01       	movw	r30, r14
    7992:	60 e0       	ldi	r22, 0x00	; 0
    7994:	70 e0       	ldi	r23, 0x00	; 0
    7996:	cb 01       	movw	r24, r22
    7998:	c0 e0       	ldi	r28, 0x00	; 0
    799a:	d0 e0       	ldi	r29, 0x00	; 0
    799c:	7f 01       	movw	r14, r30
    799e:	a0 ed       	ldi	r26, 0xD0	; 208
    79a0:	aa 2e       	mov	r10, r26
    79a2:	ac 0c       	add	r10, r12
    79a4:	29 e0       	ldi	r18, 0x09	; 9
    79a6:	2a 15       	cp	r18, r10
    79a8:	28 f1       	brcs	.+74     	; 0x79f4 <strtod+0x138>
    79aa:	4d 2d       	mov	r20, r13
    79ac:	42 60       	ori	r20, 0x02	; 2
    79ae:	b4 2e       	mov	r11, r20
    79b0:	2d 2d       	mov	r18, r13
    79b2:	28 70       	andi	r18, 0x08	; 8
    79b4:	d2 fe       	sbrs	r13, 2
    79b6:	04 c0       	rjmp	.+8      	; 0x79c0 <strtod+0x104>
    79b8:	21 11       	cpse	r18, r1
    79ba:	24 c0       	rjmp	.+72     	; 0x7a04 <strtod+0x148>
    79bc:	21 96       	adiw	r28, 0x01	; 1
    79be:	22 c0       	rjmp	.+68     	; 0x7a04 <strtod+0x148>
    79c0:	21 11       	cpse	r18, r1
    79c2:	21 97       	sbiw	r28, 0x01	; 1
    79c4:	a5 e0       	ldi	r26, 0x05	; 5
    79c6:	b0 e0       	ldi	r27, 0x00	; 0
    79c8:	9b 01       	movw	r18, r22
    79ca:	ac 01       	movw	r20, r24
    79cc:	18 de       	rcall	.-976    	; 0x75fe <__muluhisi3>
    79ce:	66 0f       	add	r22, r22
    79d0:	77 1f       	adc	r23, r23
    79d2:	88 1f       	adc	r24, r24
    79d4:	99 1f       	adc	r25, r25
    79d6:	6a 0d       	add	r22, r10
    79d8:	71 1d       	adc	r23, r1
    79da:	81 1d       	adc	r24, r1
    79dc:	91 1d       	adc	r25, r1
    79de:	68 39       	cpi	r22, 0x98	; 152
    79e0:	a9 e9       	ldi	r26, 0x99	; 153
    79e2:	7a 07       	cpc	r23, r26
    79e4:	8a 07       	cpc	r24, r26
    79e6:	a9 e1       	ldi	r26, 0x19	; 25
    79e8:	9a 07       	cpc	r25, r26
    79ea:	60 f0       	brcs	.+24     	; 0x7a04 <strtod+0x148>
    79ec:	bd 2d       	mov	r27, r13
    79ee:	b6 60       	ori	r27, 0x06	; 6
    79f0:	bb 2e       	mov	r11, r27
    79f2:	08 c0       	rjmp	.+16     	; 0x7a04 <strtod+0x148>
    79f4:	2e ef       	ldi	r18, 0xFE	; 254
    79f6:	a2 12       	cpse	r10, r18
    79f8:	0a c0       	rjmp	.+20     	; 0x7a0e <strtod+0x152>
    79fa:	d3 fc       	sbrc	r13, 3
    79fc:	50 c0       	rjmp	.+160    	; 0x7a9e <strtod+0x1e2>
    79fe:	4d 2d       	mov	r20, r13
    7a00:	48 60       	ori	r20, 0x08	; 8
    7a02:	b4 2e       	mov	r11, r20
    7a04:	31 96       	adiw	r30, 0x01	; 1
    7a06:	d7 01       	movw	r26, r14
    7a08:	cc 90       	ld	r12, X
    7a0a:	db 2c       	mov	r13, r11
    7a0c:	c7 cf       	rjmp	.-114    	; 0x799c <strtod+0xe0>
    7a0e:	2c 2d       	mov	r18, r12
    7a10:	2f 7d       	andi	r18, 0xDF	; 223
    7a12:	25 34       	cpi	r18, 0x45	; 69
    7a14:	09 f0       	breq	.+2      	; 0x7a18 <strtod+0x15c>
    7a16:	43 c0       	rjmp	.+134    	; 0x7a9e <strtod+0x1e2>
    7a18:	a0 81       	ld	r26, Z
    7a1a:	ad 32       	cpi	r26, 0x2D	; 45
    7a1c:	41 f4       	brne	.+16     	; 0x7a2e <strtod+0x172>
    7a1e:	bd 2d       	mov	r27, r13
    7a20:	b0 61       	ori	r27, 0x10	; 16
    7a22:	db 2e       	mov	r13, r27
    7a24:	7f 01       	movw	r14, r30
    7a26:	22 e0       	ldi	r18, 0x02	; 2
    7a28:	e2 0e       	add	r14, r18
    7a2a:	f1 1c       	adc	r15, r1
    7a2c:	0c c0       	rjmp	.+24     	; 0x7a46 <strtod+0x18a>
    7a2e:	7f 01       	movw	r14, r30
    7a30:	ab 32       	cpi	r26, 0x2B	; 43
    7a32:	31 f0       	breq	.+12     	; 0x7a40 <strtod+0x184>
    7a34:	4f ef       	ldi	r20, 0xFF	; 255
    7a36:	e4 1a       	sub	r14, r20
    7a38:	f4 0a       	sbc	r15, r20
    7a3a:	21 e0       	ldi	r18, 0x01	; 1
    7a3c:	30 e0       	ldi	r19, 0x00	; 0
    7a3e:	06 c0       	rjmp	.+12     	; 0x7a4c <strtod+0x190>
    7a40:	a2 e0       	ldi	r26, 0x02	; 2
    7a42:	ea 0e       	add	r14, r26
    7a44:	f1 1c       	adc	r15, r1
    7a46:	a1 81       	ldd	r26, Z+1	; 0x01
    7a48:	22 e0       	ldi	r18, 0x02	; 2
    7a4a:	30 e0       	ldi	r19, 0x00	; 0
    7a4c:	a0 53       	subi	r26, 0x30	; 48
    7a4e:	aa 30       	cpi	r26, 0x0A	; 10
    7a50:	18 f0       	brcs	.+6      	; 0x7a58 <strtod+0x19c>
    7a52:	e2 1a       	sub	r14, r18
    7a54:	f3 0a       	sbc	r15, r19
    7a56:	23 c0       	rjmp	.+70     	; 0x7a9e <strtod+0x1e2>
    7a58:	f7 01       	movw	r30, r14
    7a5a:	20 e0       	ldi	r18, 0x00	; 0
    7a5c:	30 e0       	ldi	r19, 0x00	; 0
    7a5e:	20 38       	cpi	r18, 0x80	; 128
    7a60:	bc e0       	ldi	r27, 0x0C	; 12
    7a62:	3b 07       	cpc	r19, r27
    7a64:	5c f4       	brge	.+22     	; 0x7a7c <strtod+0x1c0>
    7a66:	a9 01       	movw	r20, r18
    7a68:	44 0f       	add	r20, r20
    7a6a:	55 1f       	adc	r21, r21
    7a6c:	44 0f       	add	r20, r20
    7a6e:	55 1f       	adc	r21, r21
    7a70:	24 0f       	add	r18, r20
    7a72:	35 1f       	adc	r19, r21
    7a74:	22 0f       	add	r18, r18
    7a76:	33 1f       	adc	r19, r19
    7a78:	2a 0f       	add	r18, r26
    7a7a:	31 1d       	adc	r19, r1
    7a7c:	af 01       	movw	r20, r30
    7a7e:	4f 5f       	subi	r20, 0xFF	; 255
    7a80:	5f 4f       	sbci	r21, 0xFF	; 255
    7a82:	7a 01       	movw	r14, r20
    7a84:	a0 81       	ld	r26, Z
    7a86:	a0 53       	subi	r26, 0x30	; 48
    7a88:	aa 30       	cpi	r26, 0x0A	; 10
    7a8a:	10 f4       	brcc	.+4      	; 0x7a90 <strtod+0x1d4>
    7a8c:	fa 01       	movw	r30, r20
    7a8e:	e7 cf       	rjmp	.-50     	; 0x7a5e <strtod+0x1a2>
    7a90:	d4 fe       	sbrs	r13, 4
    7a92:	03 c0       	rjmp	.+6      	; 0x7a9a <strtod+0x1de>
    7a94:	31 95       	neg	r19
    7a96:	21 95       	neg	r18
    7a98:	31 09       	sbc	r19, r1
    7a9a:	c2 0f       	add	r28, r18
    7a9c:	d3 1f       	adc	r29, r19
    7a9e:	d1 fe       	sbrs	r13, 1
    7aa0:	09 c0       	rjmp	.+18     	; 0x7ab4 <strtod+0x1f8>
    7aa2:	01 15       	cp	r16, r1
    7aa4:	11 05       	cpc	r17, r1
    7aa6:	31 f0       	breq	.+12     	; 0x7ab4 <strtod+0x1f8>
    7aa8:	e1 e0       	ldi	r30, 0x01	; 1
    7aaa:	ee 1a       	sub	r14, r30
    7aac:	f1 08       	sbc	r15, r1
    7aae:	d8 01       	movw	r26, r16
    7ab0:	ed 92       	st	X+, r14
    7ab2:	fc 92       	st	X, r15
    7ab4:	69 dc       	rcall	.-1838   	; 0x7388 <__floatunsisf>
    7ab6:	2d 2d       	mov	r18, r13
    7ab8:	23 70       	andi	r18, 0x03	; 3
    7aba:	23 30       	cpi	r18, 0x03	; 3
    7abc:	19 f0       	breq	.+6      	; 0x7ac4 <strtod+0x208>
    7abe:	4b 01       	movw	r8, r22
    7ac0:	5c 01       	movw	r10, r24
    7ac2:	06 c0       	rjmp	.+12     	; 0x7ad0 <strtod+0x214>
    7ac4:	4b 01       	movw	r8, r22
    7ac6:	5c 01       	movw	r10, r24
    7ac8:	b7 fa       	bst	r11, 7
    7aca:	b0 94       	com	r11
    7acc:	b7 f8       	bld	r11, 7
    7ace:	b0 94       	com	r11
    7ad0:	20 e0       	ldi	r18, 0x00	; 0
    7ad2:	30 e0       	ldi	r19, 0x00	; 0
    7ad4:	a9 01       	movw	r20, r18
    7ad6:	c5 01       	movw	r24, r10
    7ad8:	b4 01       	movw	r22, r8
    7ada:	5c d1       	rcall	.+696    	; 0x7d94 <__cmpsf2>
    7adc:	88 23       	and	r24, r24
    7ade:	09 f4       	brne	.+2      	; 0x7ae2 <strtod+0x226>
    7ae0:	3c c0       	rjmp	.+120    	; 0x7b5a <strtod+0x29e>
    7ae2:	d7 ff       	sbrs	r29, 7
    7ae4:	06 c0       	rjmp	.+12     	; 0x7af2 <strtod+0x236>
    7ae6:	d1 95       	neg	r29
    7ae8:	c1 95       	neg	r28
    7aea:	d1 09       	sbc	r29, r1
    7aec:	06 e2       	ldi	r16, 0x26	; 38
    7aee:	1e e0       	ldi	r17, 0x0E	; 14
    7af0:	02 c0       	rjmp	.+4      	; 0x7af6 <strtod+0x23a>
    7af2:	0e e3       	ldi	r16, 0x3E	; 62
    7af4:	1e e0       	ldi	r17, 0x0E	; 14
    7af6:	68 01       	movw	r12, r16
    7af8:	b8 e1       	ldi	r27, 0x18	; 24
    7afa:	cb 1a       	sub	r12, r27
    7afc:	d1 08       	sbc	r13, r1
    7afe:	90 e2       	ldi	r25, 0x20	; 32
    7b00:	e9 2e       	mov	r14, r25
    7b02:	f1 2c       	mov	r15, r1
    7b04:	ce 15       	cp	r28, r14
    7b06:	df 05       	cpc	r29, r15
    7b08:	6c f0       	brlt	.+26     	; 0x7b24 <strtod+0x268>
    7b0a:	f8 01       	movw	r30, r16
    7b0c:	25 91       	lpm	r18, Z+
    7b0e:	35 91       	lpm	r19, Z+
    7b10:	45 91       	lpm	r20, Z+
    7b12:	54 91       	lpm	r21, Z
    7b14:	c5 01       	movw	r24, r10
    7b16:	b4 01       	movw	r22, r8
    7b18:	9d dc       	rcall	.-1734   	; 0x7454 <__mulsf3>
    7b1a:	4b 01       	movw	r8, r22
    7b1c:	5c 01       	movw	r10, r24
    7b1e:	ce 19       	sub	r28, r14
    7b20:	df 09       	sbc	r29, r15
    7b22:	f0 cf       	rjmp	.-32     	; 0x7b04 <strtod+0x248>
    7b24:	04 50       	subi	r16, 0x04	; 4
    7b26:	11 09       	sbc	r17, r1
    7b28:	f5 94       	asr	r15
    7b2a:	e7 94       	ror	r14
    7b2c:	0c 15       	cp	r16, r12
    7b2e:	1d 05       	cpc	r17, r13
    7b30:	49 f7       	brne	.-46     	; 0x7b04 <strtod+0x248>
    7b32:	8a 2d       	mov	r24, r10
    7b34:	88 0f       	add	r24, r24
    7b36:	8b 2d       	mov	r24, r11
    7b38:	88 1f       	adc	r24, r24
    7b3a:	8f 3f       	cpi	r24, 0xFF	; 255
    7b3c:	41 f0       	breq	.+16     	; 0x7b4e <strtod+0x292>
    7b3e:	20 e0       	ldi	r18, 0x00	; 0
    7b40:	30 e0       	ldi	r19, 0x00	; 0
    7b42:	a9 01       	movw	r20, r18
    7b44:	c5 01       	movw	r24, r10
    7b46:	b4 01       	movw	r22, r8
    7b48:	25 d1       	rcall	.+586    	; 0x7d94 <__cmpsf2>
    7b4a:	81 11       	cpse	r24, r1
    7b4c:	06 c0       	rjmp	.+12     	; 0x7b5a <strtod+0x29e>
    7b4e:	82 e2       	ldi	r24, 0x22	; 34
    7b50:	90 e0       	ldi	r25, 0x00	; 0
    7b52:	80 93 ca 2b 	sts	0x2BCA, r24
    7b56:	90 93 cb 2b 	sts	0x2BCB, r25
    7b5a:	c5 01       	movw	r24, r10
    7b5c:	b4 01       	movw	r22, r8
    7b5e:	09 c0       	rjmp	.+18     	; 0x7b72 <strtod+0x2b6>
    7b60:	60 e0       	ldi	r22, 0x00	; 0
    7b62:	70 e0       	ldi	r23, 0x00	; 0
    7b64:	80 e8       	ldi	r24, 0x80	; 128
    7b66:	9f ef       	ldi	r25, 0xFF	; 255
    7b68:	04 c0       	rjmp	.+8      	; 0x7b72 <strtod+0x2b6>
    7b6a:	60 e0       	ldi	r22, 0x00	; 0
    7b6c:	70 e0       	ldi	r23, 0x00	; 0
    7b6e:	80 ec       	ldi	r24, 0xC0	; 192
    7b70:	9f e7       	ldi	r25, 0x7F	; 127
    7b72:	df 91       	pop	r29
    7b74:	cf 91       	pop	r28
    7b76:	1f 91       	pop	r17
    7b78:	0f 91       	pop	r16
    7b7a:	ff 90       	pop	r15
    7b7c:	ef 90       	pop	r14
    7b7e:	df 90       	pop	r13
    7b80:	cf 90       	pop	r12
    7b82:	bf 90       	pop	r11
    7b84:	af 90       	pop	r10
    7b86:	9f 90       	pop	r9
    7b88:	8f 90       	pop	r8
    7b8a:	08 95       	ret

00007b8c <isspace>:
    7b8c:	91 11       	cpse	r25, r1
    7b8e:	c5 c5       	rjmp	.+2954   	; 0x871a <__ctype_isfalse>
    7b90:	80 32       	cpi	r24, 0x20	; 32
    7b92:	19 f0       	breq	.+6      	; 0x7b9a <isspace+0xe>
    7b94:	89 50       	subi	r24, 0x09	; 9
    7b96:	85 50       	subi	r24, 0x05	; 5
    7b98:	d0 f7       	brcc	.-12     	; 0x7b8e <isspace+0x2>
    7b9a:	08 95       	ret

00007b9c <toupper>:
    7b9c:	91 11       	cpse	r25, r1
    7b9e:	08 95       	ret
    7ba0:	81 56       	subi	r24, 0x61	; 97
    7ba2:	8a 51       	subi	r24, 0x1A	; 26
    7ba4:	08 f4       	brcc	.+2      	; 0x7ba8 <toupper+0xc>
    7ba6:	80 52       	subi	r24, 0x20	; 32
    7ba8:	85 58       	subi	r24, 0x85	; 133
    7baa:	08 95       	ret

00007bac <strncasecmp_P>:
    7bac:	fb 01       	movw	r30, r22
    7bae:	dc 01       	movw	r26, r24
    7bb0:	41 50       	subi	r20, 0x01	; 1
    7bb2:	50 40       	sbci	r21, 0x00	; 0
    7bb4:	88 f0       	brcs	.+34     	; 0x7bd8 <strncasecmp_P+0x2c>
    7bb6:	8d 91       	ld	r24, X+
    7bb8:	81 34       	cpi	r24, 0x41	; 65
    7bba:	1c f0       	brlt	.+6      	; 0x7bc2 <strncasecmp_P+0x16>
    7bbc:	8b 35       	cpi	r24, 0x5B	; 91
    7bbe:	0c f4       	brge	.+2      	; 0x7bc2 <strncasecmp_P+0x16>
    7bc0:	80 5e       	subi	r24, 0xE0	; 224
    7bc2:	65 91       	lpm	r22, Z+
    7bc4:	61 34       	cpi	r22, 0x41	; 65
    7bc6:	1c f0       	brlt	.+6      	; 0x7bce <strncasecmp_P+0x22>
    7bc8:	6b 35       	cpi	r22, 0x5B	; 91
    7bca:	0c f4       	brge	.+2      	; 0x7bce <strncasecmp_P+0x22>
    7bcc:	60 5e       	subi	r22, 0xE0	; 224
    7bce:	86 1b       	sub	r24, r22
    7bd0:	61 11       	cpse	r22, r1
    7bd2:	71 f3       	breq	.-36     	; 0x7bb0 <strncasecmp_P+0x4>
    7bd4:	99 0b       	sbc	r25, r25
    7bd6:	08 95       	ret
    7bd8:	88 1b       	sub	r24, r24
    7bda:	fc cf       	rjmp	.-8      	; 0x7bd4 <strncasecmp_P+0x28>

00007bdc <memcpy>:
    7bdc:	fb 01       	movw	r30, r22
    7bde:	dc 01       	movw	r26, r24
    7be0:	02 c0       	rjmp	.+4      	; 0x7be6 <memcpy+0xa>
    7be2:	01 90       	ld	r0, Z+
    7be4:	0d 92       	st	X+, r0
    7be6:	41 50       	subi	r20, 0x01	; 1
    7be8:	50 40       	sbci	r21, 0x00	; 0
    7bea:	d8 f7       	brcc	.-10     	; 0x7be2 <memcpy+0x6>
    7bec:	08 95       	ret

00007bee <memset>:
    7bee:	dc 01       	movw	r26, r24
    7bf0:	01 c0       	rjmp	.+2      	; 0x7bf4 <memset+0x6>
    7bf2:	6d 93       	st	X+, r22
    7bf4:	41 50       	subi	r20, 0x01	; 1
    7bf6:	50 40       	sbci	r21, 0x00	; 0
    7bf8:	e0 f7       	brcc	.-8      	; 0x7bf2 <memset+0x4>
    7bfa:	08 95       	ret

00007bfc <strcat>:
    7bfc:	fb 01       	movw	r30, r22
    7bfe:	dc 01       	movw	r26, r24
    7c00:	0d 90       	ld	r0, X+
    7c02:	00 20       	and	r0, r0
    7c04:	e9 f7       	brne	.-6      	; 0x7c00 <strcat+0x4>
    7c06:	11 97       	sbiw	r26, 0x01	; 1
    7c08:	01 90       	ld	r0, Z+
    7c0a:	0d 92       	st	X+, r0
    7c0c:	00 20       	and	r0, r0
    7c0e:	e1 f7       	brne	.-8      	; 0x7c08 <strcat+0xc>
    7c10:	08 95       	ret

00007c12 <strchr>:
    7c12:	fc 01       	movw	r30, r24
    7c14:	81 91       	ld	r24, Z+
    7c16:	86 17       	cp	r24, r22
    7c18:	21 f0       	breq	.+8      	; 0x7c22 <strchr+0x10>
    7c1a:	88 23       	and	r24, r24
    7c1c:	d9 f7       	brne	.-10     	; 0x7c14 <strchr+0x2>
    7c1e:	99 27       	eor	r25, r25
    7c20:	08 95       	ret
    7c22:	31 97       	sbiw	r30, 0x01	; 1
    7c24:	cf 01       	movw	r24, r30
    7c26:	08 95       	ret

00007c28 <strcpy>:
    7c28:	fb 01       	movw	r30, r22
    7c2a:	dc 01       	movw	r26, r24
    7c2c:	01 90       	ld	r0, Z+
    7c2e:	0d 92       	st	X+, r0
    7c30:	00 20       	and	r0, r0
    7c32:	e1 f7       	brne	.-8      	; 0x7c2c <strcpy+0x4>
    7c34:	08 95       	ret

00007c36 <strncpy>:
    7c36:	fb 01       	movw	r30, r22
    7c38:	dc 01       	movw	r26, r24
    7c3a:	41 50       	subi	r20, 0x01	; 1
    7c3c:	50 40       	sbci	r21, 0x00	; 0
    7c3e:	48 f0       	brcs	.+18     	; 0x7c52 <strncpy+0x1c>
    7c40:	01 90       	ld	r0, Z+
    7c42:	0d 92       	st	X+, r0
    7c44:	00 20       	and	r0, r0
    7c46:	c9 f7       	brne	.-14     	; 0x7c3a <strncpy+0x4>
    7c48:	01 c0       	rjmp	.+2      	; 0x7c4c <strncpy+0x16>
    7c4a:	1d 92       	st	X+, r1
    7c4c:	41 50       	subi	r20, 0x01	; 1
    7c4e:	50 40       	sbci	r21, 0x00	; 0
    7c50:	e0 f7       	brcc	.-8      	; 0x7c4a <strncpy+0x14>
    7c52:	08 95       	ret

00007c54 <strstr>:
    7c54:	fb 01       	movw	r30, r22
    7c56:	51 91       	ld	r21, Z+
    7c58:	55 23       	and	r21, r21
    7c5a:	a9 f0       	breq	.+42     	; 0x7c86 <strstr+0x32>
    7c5c:	bf 01       	movw	r22, r30
    7c5e:	dc 01       	movw	r26, r24
    7c60:	4d 91       	ld	r20, X+
    7c62:	45 17       	cp	r20, r21
    7c64:	41 11       	cpse	r20, r1
    7c66:	e1 f7       	brne	.-8      	; 0x7c60 <strstr+0xc>
    7c68:	59 f4       	brne	.+22     	; 0x7c80 <strstr+0x2c>
    7c6a:	cd 01       	movw	r24, r26
    7c6c:	01 90       	ld	r0, Z+
    7c6e:	00 20       	and	r0, r0
    7c70:	49 f0       	breq	.+18     	; 0x7c84 <strstr+0x30>
    7c72:	4d 91       	ld	r20, X+
    7c74:	40 15       	cp	r20, r0
    7c76:	41 11       	cpse	r20, r1
    7c78:	c9 f3       	breq	.-14     	; 0x7c6c <strstr+0x18>
    7c7a:	fb 01       	movw	r30, r22
    7c7c:	41 11       	cpse	r20, r1
    7c7e:	ef cf       	rjmp	.-34     	; 0x7c5e <strstr+0xa>
    7c80:	81 e0       	ldi	r24, 0x01	; 1
    7c82:	90 e0       	ldi	r25, 0x00	; 0
    7c84:	01 97       	sbiw	r24, 0x01	; 1
    7c86:	08 95       	ret

00007c88 <itoa>:
    7c88:	45 32       	cpi	r20, 0x25	; 37
    7c8a:	51 05       	cpc	r21, r1
    7c8c:	18 f4       	brcc	.+6      	; 0x7c94 <itoa+0xc>
    7c8e:	42 30       	cpi	r20, 0x02	; 2
    7c90:	08 f0       	brcs	.+2      	; 0x7c94 <itoa+0xc>
    7c92:	04 c0       	rjmp	.+8      	; 0x7c9c <__itoa_ncheck>
    7c94:	fb 01       	movw	r30, r22
    7c96:	10 82       	st	Z, r1
    7c98:	cb 01       	movw	r24, r22
    7c9a:	08 95       	ret

00007c9c <__itoa_ncheck>:
    7c9c:	bb 27       	eor	r27, r27
    7c9e:	4a 30       	cpi	r20, 0x0A	; 10
    7ca0:	31 f4       	brne	.+12     	; 0x7cae <__itoa_ncheck+0x12>
    7ca2:	99 23       	and	r25, r25
    7ca4:	22 f4       	brpl	.+8      	; 0x7cae <__itoa_ncheck+0x12>
    7ca6:	bd e2       	ldi	r27, 0x2D	; 45
    7ca8:	90 95       	com	r25
    7caa:	81 95       	neg	r24
    7cac:	9f 4f       	sbci	r25, 0xFF	; 255
    7cae:	01 c0       	rjmp	.+2      	; 0x7cb2 <__utoa_common>

00007cb0 <__utoa_ncheck>:
    7cb0:	bb 27       	eor	r27, r27

00007cb2 <__utoa_common>:
    7cb2:	fb 01       	movw	r30, r22
    7cb4:	55 27       	eor	r21, r21
    7cb6:	aa 27       	eor	r26, r26
    7cb8:	88 0f       	add	r24, r24
    7cba:	99 1f       	adc	r25, r25
    7cbc:	aa 1f       	adc	r26, r26
    7cbe:	a4 17       	cp	r26, r20
    7cc0:	10 f0       	brcs	.+4      	; 0x7cc6 <__utoa_common+0x14>
    7cc2:	a4 1b       	sub	r26, r20
    7cc4:	83 95       	inc	r24
    7cc6:	50 51       	subi	r21, 0x10	; 16
    7cc8:	b9 f7       	brne	.-18     	; 0x7cb8 <__utoa_common+0x6>
    7cca:	a0 5d       	subi	r26, 0xD0	; 208
    7ccc:	aa 33       	cpi	r26, 0x3A	; 58
    7cce:	08 f0       	brcs	.+2      	; 0x7cd2 <__utoa_common+0x20>
    7cd0:	a9 5d       	subi	r26, 0xD9	; 217
    7cd2:	a1 93       	st	Z+, r26
    7cd4:	00 97       	sbiw	r24, 0x00	; 0
    7cd6:	79 f7       	brne	.-34     	; 0x7cb6 <__utoa_common+0x4>
    7cd8:	b1 11       	cpse	r27, r1
    7cda:	b1 93       	st	Z+, r27
    7cdc:	11 92       	st	Z+, r1
    7cde:	cb 01       	movw	r24, r22
    7ce0:	40 c5       	rjmp	.+2688   	; 0x8762 <strrev>

00007ce2 <printf>:
    7ce2:	cf 93       	push	r28
    7ce4:	df 93       	push	r29
    7ce6:	cd b7       	in	r28, 0x3d	; 61
    7ce8:	de b7       	in	r29, 0x3e	; 62
    7cea:	fe 01       	movw	r30, r28
    7cec:	35 96       	adiw	r30, 0x05	; 5
    7cee:	61 91       	ld	r22, Z+
    7cf0:	71 91       	ld	r23, Z+
    7cf2:	af 01       	movw	r20, r30
    7cf4:	80 91 c6 2b 	lds	r24, 0x2BC6
    7cf8:	90 91 c7 2b 	lds	r25, 0x2BC7
    7cfc:	73 d0       	rcall	.+230    	; 0x7de4 <vfprintf>
    7cfe:	df 91       	pop	r29
    7d00:	cf 91       	pop	r28
    7d02:	08 95       	ret

00007d04 <puts>:
    7d04:	0f 93       	push	r16
    7d06:	1f 93       	push	r17
    7d08:	cf 93       	push	r28
    7d0a:	df 93       	push	r29
    7d0c:	e0 91 c6 2b 	lds	r30, 0x2BC6
    7d10:	f0 91 c7 2b 	lds	r31, 0x2BC7
    7d14:	23 81       	ldd	r18, Z+3	; 0x03
    7d16:	21 ff       	sbrs	r18, 1
    7d18:	1b c0       	rjmp	.+54     	; 0x7d50 <puts+0x4c>
    7d1a:	ec 01       	movw	r28, r24
    7d1c:	00 e0       	ldi	r16, 0x00	; 0
    7d1e:	10 e0       	ldi	r17, 0x00	; 0
    7d20:	89 91       	ld	r24, Y+
    7d22:	60 91 c6 2b 	lds	r22, 0x2BC6
    7d26:	70 91 c7 2b 	lds	r23, 0x2BC7
    7d2a:	db 01       	movw	r26, r22
    7d2c:	18 96       	adiw	r26, 0x08	; 8
    7d2e:	ed 91       	ld	r30, X+
    7d30:	fc 91       	ld	r31, X
    7d32:	19 97       	sbiw	r26, 0x09	; 9
    7d34:	88 23       	and	r24, r24
    7d36:	31 f0       	breq	.+12     	; 0x7d44 <puts+0x40>
    7d38:	09 95       	icall
    7d3a:	89 2b       	or	r24, r25
    7d3c:	89 f3       	breq	.-30     	; 0x7d20 <puts+0x1c>
    7d3e:	0f ef       	ldi	r16, 0xFF	; 255
    7d40:	1f ef       	ldi	r17, 0xFF	; 255
    7d42:	ee cf       	rjmp	.-36     	; 0x7d20 <puts+0x1c>
    7d44:	8a e0       	ldi	r24, 0x0A	; 10
    7d46:	09 95       	icall
    7d48:	89 2b       	or	r24, r25
    7d4a:	11 f4       	brne	.+4      	; 0x7d50 <puts+0x4c>
    7d4c:	c8 01       	movw	r24, r16
    7d4e:	02 c0       	rjmp	.+4      	; 0x7d54 <puts+0x50>
    7d50:	8f ef       	ldi	r24, 0xFF	; 255
    7d52:	9f ef       	ldi	r25, 0xFF	; 255
    7d54:	df 91       	pop	r29
    7d56:	cf 91       	pop	r28
    7d58:	1f 91       	pop	r17
    7d5a:	0f 91       	pop	r16
    7d5c:	08 95       	ret

00007d5e <sscanf>:
    7d5e:	cf 93       	push	r28
    7d60:	df 93       	push	r29
    7d62:	cd b7       	in	r28, 0x3d	; 61
    7d64:	de b7       	in	r29, 0x3e	; 62
    7d66:	2e 97       	sbiw	r28, 0x0e	; 14
    7d68:	cd bf       	out	0x3d, r28	; 61
    7d6a:	de bf       	out	0x3e, r29	; 62
    7d6c:	85 e0       	ldi	r24, 0x05	; 5
    7d6e:	8c 83       	std	Y+4, r24	; 0x04
    7d70:	8b 89       	ldd	r24, Y+19	; 0x13
    7d72:	9c 89       	ldd	r25, Y+20	; 0x14
    7d74:	89 83       	std	Y+1, r24	; 0x01
    7d76:	9a 83       	std	Y+2, r25	; 0x02
    7d78:	ae 01       	movw	r20, r28
    7d7a:	49 5e       	subi	r20, 0xE9	; 233
    7d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    7d7e:	6d 89       	ldd	r22, Y+21	; 0x15
    7d80:	7e 89       	ldd	r23, Y+22	; 0x16
    7d82:	ce 01       	movw	r24, r28
    7d84:	01 96       	adiw	r24, 0x01	; 1
    7d86:	a0 d3       	rcall	.+1856   	; 0x84c8 <vfscanf>
    7d88:	2e 96       	adiw	r28, 0x0e	; 14
    7d8a:	cd bf       	out	0x3d, r28	; 61
    7d8c:	de bf       	out	0x3e, r29	; 62
    7d8e:	df 91       	pop	r29
    7d90:	cf 91       	pop	r28
    7d92:	08 95       	ret

00007d94 <__cmpsf2>:
    7d94:	03 d0       	rcall	.+6      	; 0x7d9c <__fp_cmp>
    7d96:	08 f4       	brcc	.+2      	; 0x7d9a <__cmpsf2+0x6>
    7d98:	81 e0       	ldi	r24, 0x01	; 1
    7d9a:	08 95       	ret

00007d9c <__fp_cmp>:
    7d9c:	99 0f       	add	r25, r25
    7d9e:	00 08       	sbc	r0, r0
    7da0:	55 0f       	add	r21, r21
    7da2:	aa 0b       	sbc	r26, r26
    7da4:	e0 e8       	ldi	r30, 0x80	; 128
    7da6:	fe ef       	ldi	r31, 0xFE	; 254
    7da8:	16 16       	cp	r1, r22
    7daa:	17 06       	cpc	r1, r23
    7dac:	e8 07       	cpc	r30, r24
    7dae:	f9 07       	cpc	r31, r25
    7db0:	c0 f0       	brcs	.+48     	; 0x7de2 <__fp_cmp+0x46>
    7db2:	12 16       	cp	r1, r18
    7db4:	13 06       	cpc	r1, r19
    7db6:	e4 07       	cpc	r30, r20
    7db8:	f5 07       	cpc	r31, r21
    7dba:	98 f0       	brcs	.+38     	; 0x7de2 <__fp_cmp+0x46>
    7dbc:	62 1b       	sub	r22, r18
    7dbe:	73 0b       	sbc	r23, r19
    7dc0:	84 0b       	sbc	r24, r20
    7dc2:	95 0b       	sbc	r25, r21
    7dc4:	39 f4       	brne	.+14     	; 0x7dd4 <__fp_cmp+0x38>
    7dc6:	0a 26       	eor	r0, r26
    7dc8:	61 f0       	breq	.+24     	; 0x7de2 <__fp_cmp+0x46>
    7dca:	23 2b       	or	r18, r19
    7dcc:	24 2b       	or	r18, r20
    7dce:	25 2b       	or	r18, r21
    7dd0:	21 f4       	brne	.+8      	; 0x7dda <__fp_cmp+0x3e>
    7dd2:	08 95       	ret
    7dd4:	0a 26       	eor	r0, r26
    7dd6:	09 f4       	brne	.+2      	; 0x7dda <__fp_cmp+0x3e>
    7dd8:	a1 40       	sbci	r26, 0x01	; 1
    7dda:	a6 95       	lsr	r26
    7ddc:	8f ef       	ldi	r24, 0xFF	; 255
    7dde:	81 1d       	adc	r24, r1
    7de0:	81 1d       	adc	r24, r1
    7de2:	08 95       	ret

00007de4 <vfprintf>:
    7de4:	2f 92       	push	r2
    7de6:	3f 92       	push	r3
    7de8:	4f 92       	push	r4
    7dea:	5f 92       	push	r5
    7dec:	6f 92       	push	r6
    7dee:	7f 92       	push	r7
    7df0:	8f 92       	push	r8
    7df2:	9f 92       	push	r9
    7df4:	af 92       	push	r10
    7df6:	bf 92       	push	r11
    7df8:	cf 92       	push	r12
    7dfa:	df 92       	push	r13
    7dfc:	ef 92       	push	r14
    7dfe:	ff 92       	push	r15
    7e00:	0f 93       	push	r16
    7e02:	1f 93       	push	r17
    7e04:	cf 93       	push	r28
    7e06:	df 93       	push	r29
    7e08:	cd b7       	in	r28, 0x3d	; 61
    7e0a:	de b7       	in	r29, 0x3e	; 62
    7e0c:	2c 97       	sbiw	r28, 0x0c	; 12
    7e0e:	cd bf       	out	0x3d, r28	; 61
    7e10:	de bf       	out	0x3e, r29	; 62
    7e12:	7c 01       	movw	r14, r24
    7e14:	6b 01       	movw	r12, r22
    7e16:	8a 01       	movw	r16, r20
    7e18:	fc 01       	movw	r30, r24
    7e1a:	16 82       	std	Z+6, r1	; 0x06
    7e1c:	17 82       	std	Z+7, r1	; 0x07
    7e1e:	83 81       	ldd	r24, Z+3	; 0x03
    7e20:	81 ff       	sbrs	r24, 1
    7e22:	b0 c1       	rjmp	.+864    	; 0x8184 <vfprintf+0x3a0>
    7e24:	ce 01       	movw	r24, r28
    7e26:	01 96       	adiw	r24, 0x01	; 1
    7e28:	4c 01       	movw	r8, r24
    7e2a:	f7 01       	movw	r30, r14
    7e2c:	93 81       	ldd	r25, Z+3	; 0x03
    7e2e:	f6 01       	movw	r30, r12
    7e30:	93 fd       	sbrc	r25, 3
    7e32:	85 91       	lpm	r24, Z+
    7e34:	93 ff       	sbrs	r25, 3
    7e36:	81 91       	ld	r24, Z+
    7e38:	6f 01       	movw	r12, r30
    7e3a:	88 23       	and	r24, r24
    7e3c:	09 f4       	brne	.+2      	; 0x7e40 <vfprintf+0x5c>
    7e3e:	9e c1       	rjmp	.+828    	; 0x817c <vfprintf+0x398>
    7e40:	85 32       	cpi	r24, 0x25	; 37
    7e42:	39 f4       	brne	.+14     	; 0x7e52 <vfprintf+0x6e>
    7e44:	93 fd       	sbrc	r25, 3
    7e46:	85 91       	lpm	r24, Z+
    7e48:	93 ff       	sbrs	r25, 3
    7e4a:	81 91       	ld	r24, Z+
    7e4c:	6f 01       	movw	r12, r30
    7e4e:	85 32       	cpi	r24, 0x25	; 37
    7e50:	21 f4       	brne	.+8      	; 0x7e5a <vfprintf+0x76>
    7e52:	b7 01       	movw	r22, r14
    7e54:	90 e0       	ldi	r25, 0x00	; 0
    7e56:	d3 d4       	rcall	.+2470   	; 0x87fe <fputc>
    7e58:	e8 cf       	rjmp	.-48     	; 0x7e2a <vfprintf+0x46>
    7e5a:	51 2c       	mov	r5, r1
    7e5c:	31 2c       	mov	r3, r1
    7e5e:	20 e0       	ldi	r18, 0x00	; 0
    7e60:	20 32       	cpi	r18, 0x20	; 32
    7e62:	a0 f4       	brcc	.+40     	; 0x7e8c <vfprintf+0xa8>
    7e64:	8b 32       	cpi	r24, 0x2B	; 43
    7e66:	69 f0       	breq	.+26     	; 0x7e82 <vfprintf+0x9e>
    7e68:	30 f4       	brcc	.+12     	; 0x7e76 <vfprintf+0x92>
    7e6a:	80 32       	cpi	r24, 0x20	; 32
    7e6c:	59 f0       	breq	.+22     	; 0x7e84 <vfprintf+0xa0>
    7e6e:	83 32       	cpi	r24, 0x23	; 35
    7e70:	69 f4       	brne	.+26     	; 0x7e8c <vfprintf+0xa8>
    7e72:	20 61       	ori	r18, 0x10	; 16
    7e74:	2c c0       	rjmp	.+88     	; 0x7ece <vfprintf+0xea>
    7e76:	8d 32       	cpi	r24, 0x2D	; 45
    7e78:	39 f0       	breq	.+14     	; 0x7e88 <vfprintf+0xa4>
    7e7a:	80 33       	cpi	r24, 0x30	; 48
    7e7c:	39 f4       	brne	.+14     	; 0x7e8c <vfprintf+0xa8>
    7e7e:	21 60       	ori	r18, 0x01	; 1
    7e80:	26 c0       	rjmp	.+76     	; 0x7ece <vfprintf+0xea>
    7e82:	22 60       	ori	r18, 0x02	; 2
    7e84:	24 60       	ori	r18, 0x04	; 4
    7e86:	23 c0       	rjmp	.+70     	; 0x7ece <vfprintf+0xea>
    7e88:	28 60       	ori	r18, 0x08	; 8
    7e8a:	21 c0       	rjmp	.+66     	; 0x7ece <vfprintf+0xea>
    7e8c:	27 fd       	sbrc	r18, 7
    7e8e:	27 c0       	rjmp	.+78     	; 0x7ede <vfprintf+0xfa>
    7e90:	30 ed       	ldi	r19, 0xD0	; 208
    7e92:	38 0f       	add	r19, r24
    7e94:	3a 30       	cpi	r19, 0x0A	; 10
    7e96:	78 f4       	brcc	.+30     	; 0x7eb6 <vfprintf+0xd2>
    7e98:	26 ff       	sbrs	r18, 6
    7e9a:	06 c0       	rjmp	.+12     	; 0x7ea8 <vfprintf+0xc4>
    7e9c:	fa e0       	ldi	r31, 0x0A	; 10
    7e9e:	5f 9e       	mul	r5, r31
    7ea0:	30 0d       	add	r19, r0
    7ea2:	11 24       	eor	r1, r1
    7ea4:	53 2e       	mov	r5, r19
    7ea6:	13 c0       	rjmp	.+38     	; 0x7ece <vfprintf+0xea>
    7ea8:	8a e0       	ldi	r24, 0x0A	; 10
    7eaa:	38 9e       	mul	r3, r24
    7eac:	30 0d       	add	r19, r0
    7eae:	11 24       	eor	r1, r1
    7eb0:	33 2e       	mov	r3, r19
    7eb2:	20 62       	ori	r18, 0x20	; 32
    7eb4:	0c c0       	rjmp	.+24     	; 0x7ece <vfprintf+0xea>
    7eb6:	8e 32       	cpi	r24, 0x2E	; 46
    7eb8:	21 f4       	brne	.+8      	; 0x7ec2 <vfprintf+0xde>
    7eba:	26 fd       	sbrc	r18, 6
    7ebc:	5f c1       	rjmp	.+702    	; 0x817c <vfprintf+0x398>
    7ebe:	20 64       	ori	r18, 0x40	; 64
    7ec0:	06 c0       	rjmp	.+12     	; 0x7ece <vfprintf+0xea>
    7ec2:	8c 36       	cpi	r24, 0x6C	; 108
    7ec4:	11 f4       	brne	.+4      	; 0x7eca <vfprintf+0xe6>
    7ec6:	20 68       	ori	r18, 0x80	; 128
    7ec8:	02 c0       	rjmp	.+4      	; 0x7ece <vfprintf+0xea>
    7eca:	88 36       	cpi	r24, 0x68	; 104
    7ecc:	41 f4       	brne	.+16     	; 0x7ede <vfprintf+0xfa>
    7ece:	f6 01       	movw	r30, r12
    7ed0:	93 fd       	sbrc	r25, 3
    7ed2:	85 91       	lpm	r24, Z+
    7ed4:	93 ff       	sbrs	r25, 3
    7ed6:	81 91       	ld	r24, Z+
    7ed8:	6f 01       	movw	r12, r30
    7eda:	81 11       	cpse	r24, r1
    7edc:	c1 cf       	rjmp	.-126    	; 0x7e60 <vfprintf+0x7c>
    7ede:	98 2f       	mov	r25, r24
    7ee0:	9f 7d       	andi	r25, 0xDF	; 223
    7ee2:	95 54       	subi	r25, 0x45	; 69
    7ee4:	93 30       	cpi	r25, 0x03	; 3
    7ee6:	28 f4       	brcc	.+10     	; 0x7ef2 <vfprintf+0x10e>
    7ee8:	0c 5f       	subi	r16, 0xFC	; 252
    7eea:	1f 4f       	sbci	r17, 0xFF	; 255
    7eec:	ff e3       	ldi	r31, 0x3F	; 63
    7eee:	f9 83       	std	Y+1, r31	; 0x01
    7ef0:	0d c0       	rjmp	.+26     	; 0x7f0c <vfprintf+0x128>
    7ef2:	83 36       	cpi	r24, 0x63	; 99
    7ef4:	31 f0       	breq	.+12     	; 0x7f02 <vfprintf+0x11e>
    7ef6:	83 37       	cpi	r24, 0x73	; 115
    7ef8:	71 f0       	breq	.+28     	; 0x7f16 <vfprintf+0x132>
    7efa:	83 35       	cpi	r24, 0x53	; 83
    7efc:	09 f0       	breq	.+2      	; 0x7f00 <vfprintf+0x11c>
    7efe:	57 c0       	rjmp	.+174    	; 0x7fae <vfprintf+0x1ca>
    7f00:	21 c0       	rjmp	.+66     	; 0x7f44 <vfprintf+0x160>
    7f02:	f8 01       	movw	r30, r16
    7f04:	80 81       	ld	r24, Z
    7f06:	89 83       	std	Y+1, r24	; 0x01
    7f08:	0e 5f       	subi	r16, 0xFE	; 254
    7f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    7f0c:	44 24       	eor	r4, r4
    7f0e:	43 94       	inc	r4
    7f10:	51 2c       	mov	r5, r1
    7f12:	54 01       	movw	r10, r8
    7f14:	14 c0       	rjmp	.+40     	; 0x7f3e <vfprintf+0x15a>
    7f16:	38 01       	movw	r6, r16
    7f18:	f2 e0       	ldi	r31, 0x02	; 2
    7f1a:	6f 0e       	add	r6, r31
    7f1c:	71 1c       	adc	r7, r1
    7f1e:	f8 01       	movw	r30, r16
    7f20:	a0 80       	ld	r10, Z
    7f22:	b1 80       	ldd	r11, Z+1	; 0x01
    7f24:	26 ff       	sbrs	r18, 6
    7f26:	03 c0       	rjmp	.+6      	; 0x7f2e <vfprintf+0x14a>
    7f28:	65 2d       	mov	r22, r5
    7f2a:	70 e0       	ldi	r23, 0x00	; 0
    7f2c:	02 c0       	rjmp	.+4      	; 0x7f32 <vfprintf+0x14e>
    7f2e:	6f ef       	ldi	r22, 0xFF	; 255
    7f30:	7f ef       	ldi	r23, 0xFF	; 255
    7f32:	c5 01       	movw	r24, r10
    7f34:	2c 87       	std	Y+12, r18	; 0x0c
    7f36:	0a d4       	rcall	.+2068   	; 0x874c <strnlen>
    7f38:	2c 01       	movw	r4, r24
    7f3a:	83 01       	movw	r16, r6
    7f3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    7f3e:	2f 77       	andi	r18, 0x7F	; 127
    7f40:	22 2e       	mov	r2, r18
    7f42:	16 c0       	rjmp	.+44     	; 0x7f70 <vfprintf+0x18c>
    7f44:	38 01       	movw	r6, r16
    7f46:	f2 e0       	ldi	r31, 0x02	; 2
    7f48:	6f 0e       	add	r6, r31
    7f4a:	71 1c       	adc	r7, r1
    7f4c:	f8 01       	movw	r30, r16
    7f4e:	a0 80       	ld	r10, Z
    7f50:	b1 80       	ldd	r11, Z+1	; 0x01
    7f52:	26 ff       	sbrs	r18, 6
    7f54:	03 c0       	rjmp	.+6      	; 0x7f5c <vfprintf+0x178>
    7f56:	65 2d       	mov	r22, r5
    7f58:	70 e0       	ldi	r23, 0x00	; 0
    7f5a:	02 c0       	rjmp	.+4      	; 0x7f60 <vfprintf+0x17c>
    7f5c:	6f ef       	ldi	r22, 0xFF	; 255
    7f5e:	7f ef       	ldi	r23, 0xFF	; 255
    7f60:	c5 01       	movw	r24, r10
    7f62:	2c 87       	std	Y+12, r18	; 0x0c
    7f64:	e8 d3       	rcall	.+2000   	; 0x8736 <strnlen_P>
    7f66:	2c 01       	movw	r4, r24
    7f68:	2c 85       	ldd	r18, Y+12	; 0x0c
    7f6a:	20 68       	ori	r18, 0x80	; 128
    7f6c:	22 2e       	mov	r2, r18
    7f6e:	83 01       	movw	r16, r6
    7f70:	23 fc       	sbrc	r2, 3
    7f72:	19 c0       	rjmp	.+50     	; 0x7fa6 <vfprintf+0x1c2>
    7f74:	83 2d       	mov	r24, r3
    7f76:	90 e0       	ldi	r25, 0x00	; 0
    7f78:	48 16       	cp	r4, r24
    7f7a:	59 06       	cpc	r5, r25
    7f7c:	a0 f4       	brcc	.+40     	; 0x7fa6 <vfprintf+0x1c2>
    7f7e:	b7 01       	movw	r22, r14
    7f80:	80 e2       	ldi	r24, 0x20	; 32
    7f82:	90 e0       	ldi	r25, 0x00	; 0
    7f84:	3c d4       	rcall	.+2168   	; 0x87fe <fputc>
    7f86:	3a 94       	dec	r3
    7f88:	f5 cf       	rjmp	.-22     	; 0x7f74 <vfprintf+0x190>
    7f8a:	f5 01       	movw	r30, r10
    7f8c:	27 fc       	sbrc	r2, 7
    7f8e:	85 91       	lpm	r24, Z+
    7f90:	27 fe       	sbrs	r2, 7
    7f92:	81 91       	ld	r24, Z+
    7f94:	5f 01       	movw	r10, r30
    7f96:	b7 01       	movw	r22, r14
    7f98:	90 e0       	ldi	r25, 0x00	; 0
    7f9a:	31 d4       	rcall	.+2146   	; 0x87fe <fputc>
    7f9c:	31 10       	cpse	r3, r1
    7f9e:	3a 94       	dec	r3
    7fa0:	f1 e0       	ldi	r31, 0x01	; 1
    7fa2:	4f 1a       	sub	r4, r31
    7fa4:	51 08       	sbc	r5, r1
    7fa6:	41 14       	cp	r4, r1
    7fa8:	51 04       	cpc	r5, r1
    7faa:	79 f7       	brne	.-34     	; 0x7f8a <vfprintf+0x1a6>
    7fac:	de c0       	rjmp	.+444    	; 0x816a <vfprintf+0x386>
    7fae:	84 36       	cpi	r24, 0x64	; 100
    7fb0:	11 f0       	breq	.+4      	; 0x7fb6 <vfprintf+0x1d2>
    7fb2:	89 36       	cpi	r24, 0x69	; 105
    7fb4:	31 f5       	brne	.+76     	; 0x8002 <vfprintf+0x21e>
    7fb6:	f8 01       	movw	r30, r16
    7fb8:	27 ff       	sbrs	r18, 7
    7fba:	07 c0       	rjmp	.+14     	; 0x7fca <vfprintf+0x1e6>
    7fbc:	60 81       	ld	r22, Z
    7fbe:	71 81       	ldd	r23, Z+1	; 0x01
    7fc0:	82 81       	ldd	r24, Z+2	; 0x02
    7fc2:	93 81       	ldd	r25, Z+3	; 0x03
    7fc4:	0c 5f       	subi	r16, 0xFC	; 252
    7fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    7fc8:	08 c0       	rjmp	.+16     	; 0x7fda <vfprintf+0x1f6>
    7fca:	60 81       	ld	r22, Z
    7fcc:	71 81       	ldd	r23, Z+1	; 0x01
    7fce:	88 27       	eor	r24, r24
    7fd0:	77 fd       	sbrc	r23, 7
    7fd2:	80 95       	com	r24
    7fd4:	98 2f       	mov	r25, r24
    7fd6:	0e 5f       	subi	r16, 0xFE	; 254
    7fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    7fda:	2f 76       	andi	r18, 0x6F	; 111
    7fdc:	b2 2e       	mov	r11, r18
    7fde:	97 ff       	sbrs	r25, 7
    7fe0:	09 c0       	rjmp	.+18     	; 0x7ff4 <vfprintf+0x210>
    7fe2:	90 95       	com	r25
    7fe4:	80 95       	com	r24
    7fe6:	70 95       	com	r23
    7fe8:	61 95       	neg	r22
    7fea:	7f 4f       	sbci	r23, 0xFF	; 255
    7fec:	8f 4f       	sbci	r24, 0xFF	; 255
    7fee:	9f 4f       	sbci	r25, 0xFF	; 255
    7ff0:	20 68       	ori	r18, 0x80	; 128
    7ff2:	b2 2e       	mov	r11, r18
    7ff4:	2a e0       	ldi	r18, 0x0A	; 10
    7ff6:	30 e0       	ldi	r19, 0x00	; 0
    7ff8:	a4 01       	movw	r20, r8
    7ffa:	4c d4       	rcall	.+2200   	; 0x8894 <__ultoa_invert>
    7ffc:	a8 2e       	mov	r10, r24
    7ffe:	a8 18       	sub	r10, r8
    8000:	43 c0       	rjmp	.+134    	; 0x8088 <vfprintf+0x2a4>
    8002:	85 37       	cpi	r24, 0x75	; 117
    8004:	29 f4       	brne	.+10     	; 0x8010 <vfprintf+0x22c>
    8006:	2f 7e       	andi	r18, 0xEF	; 239
    8008:	b2 2e       	mov	r11, r18
    800a:	2a e0       	ldi	r18, 0x0A	; 10
    800c:	30 e0       	ldi	r19, 0x00	; 0
    800e:	25 c0       	rjmp	.+74     	; 0x805a <vfprintf+0x276>
    8010:	f2 2f       	mov	r31, r18
    8012:	f9 7f       	andi	r31, 0xF9	; 249
    8014:	bf 2e       	mov	r11, r31
    8016:	8f 36       	cpi	r24, 0x6F	; 111
    8018:	c1 f0       	breq	.+48     	; 0x804a <vfprintf+0x266>
    801a:	18 f4       	brcc	.+6      	; 0x8022 <vfprintf+0x23e>
    801c:	88 35       	cpi	r24, 0x58	; 88
    801e:	79 f0       	breq	.+30     	; 0x803e <vfprintf+0x25a>
    8020:	ad c0       	rjmp	.+346    	; 0x817c <vfprintf+0x398>
    8022:	80 37       	cpi	r24, 0x70	; 112
    8024:	19 f0       	breq	.+6      	; 0x802c <vfprintf+0x248>
    8026:	88 37       	cpi	r24, 0x78	; 120
    8028:	21 f0       	breq	.+8      	; 0x8032 <vfprintf+0x24e>
    802a:	a8 c0       	rjmp	.+336    	; 0x817c <vfprintf+0x398>
    802c:	2f 2f       	mov	r18, r31
    802e:	20 61       	ori	r18, 0x10	; 16
    8030:	b2 2e       	mov	r11, r18
    8032:	b4 fe       	sbrs	r11, 4
    8034:	0d c0       	rjmp	.+26     	; 0x8050 <vfprintf+0x26c>
    8036:	8b 2d       	mov	r24, r11
    8038:	84 60       	ori	r24, 0x04	; 4
    803a:	b8 2e       	mov	r11, r24
    803c:	09 c0       	rjmp	.+18     	; 0x8050 <vfprintf+0x26c>
    803e:	24 ff       	sbrs	r18, 4
    8040:	0a c0       	rjmp	.+20     	; 0x8056 <vfprintf+0x272>
    8042:	9f 2f       	mov	r25, r31
    8044:	96 60       	ori	r25, 0x06	; 6
    8046:	b9 2e       	mov	r11, r25
    8048:	06 c0       	rjmp	.+12     	; 0x8056 <vfprintf+0x272>
    804a:	28 e0       	ldi	r18, 0x08	; 8
    804c:	30 e0       	ldi	r19, 0x00	; 0
    804e:	05 c0       	rjmp	.+10     	; 0x805a <vfprintf+0x276>
    8050:	20 e1       	ldi	r18, 0x10	; 16
    8052:	30 e0       	ldi	r19, 0x00	; 0
    8054:	02 c0       	rjmp	.+4      	; 0x805a <vfprintf+0x276>
    8056:	20 e1       	ldi	r18, 0x10	; 16
    8058:	32 e0       	ldi	r19, 0x02	; 2
    805a:	f8 01       	movw	r30, r16
    805c:	b7 fe       	sbrs	r11, 7
    805e:	07 c0       	rjmp	.+14     	; 0x806e <vfprintf+0x28a>
    8060:	60 81       	ld	r22, Z
    8062:	71 81       	ldd	r23, Z+1	; 0x01
    8064:	82 81       	ldd	r24, Z+2	; 0x02
    8066:	93 81       	ldd	r25, Z+3	; 0x03
    8068:	0c 5f       	subi	r16, 0xFC	; 252
    806a:	1f 4f       	sbci	r17, 0xFF	; 255
    806c:	06 c0       	rjmp	.+12     	; 0x807a <vfprintf+0x296>
    806e:	60 81       	ld	r22, Z
    8070:	71 81       	ldd	r23, Z+1	; 0x01
    8072:	80 e0       	ldi	r24, 0x00	; 0
    8074:	90 e0       	ldi	r25, 0x00	; 0
    8076:	0e 5f       	subi	r16, 0xFE	; 254
    8078:	1f 4f       	sbci	r17, 0xFF	; 255
    807a:	a4 01       	movw	r20, r8
    807c:	0b d4       	rcall	.+2070   	; 0x8894 <__ultoa_invert>
    807e:	a8 2e       	mov	r10, r24
    8080:	a8 18       	sub	r10, r8
    8082:	fb 2d       	mov	r31, r11
    8084:	ff 77       	andi	r31, 0x7F	; 127
    8086:	bf 2e       	mov	r11, r31
    8088:	b6 fe       	sbrs	r11, 6
    808a:	0b c0       	rjmp	.+22     	; 0x80a2 <vfprintf+0x2be>
    808c:	2b 2d       	mov	r18, r11
    808e:	2e 7f       	andi	r18, 0xFE	; 254
    8090:	a5 14       	cp	r10, r5
    8092:	50 f4       	brcc	.+20     	; 0x80a8 <vfprintf+0x2c4>
    8094:	b4 fe       	sbrs	r11, 4
    8096:	0a c0       	rjmp	.+20     	; 0x80ac <vfprintf+0x2c8>
    8098:	b2 fc       	sbrc	r11, 2
    809a:	08 c0       	rjmp	.+16     	; 0x80ac <vfprintf+0x2c8>
    809c:	2b 2d       	mov	r18, r11
    809e:	2e 7e       	andi	r18, 0xEE	; 238
    80a0:	05 c0       	rjmp	.+10     	; 0x80ac <vfprintf+0x2c8>
    80a2:	7a 2c       	mov	r7, r10
    80a4:	2b 2d       	mov	r18, r11
    80a6:	03 c0       	rjmp	.+6      	; 0x80ae <vfprintf+0x2ca>
    80a8:	7a 2c       	mov	r7, r10
    80aa:	01 c0       	rjmp	.+2      	; 0x80ae <vfprintf+0x2ca>
    80ac:	75 2c       	mov	r7, r5
    80ae:	24 ff       	sbrs	r18, 4
    80b0:	0d c0       	rjmp	.+26     	; 0x80cc <vfprintf+0x2e8>
    80b2:	fe 01       	movw	r30, r28
    80b4:	ea 0d       	add	r30, r10
    80b6:	f1 1d       	adc	r31, r1
    80b8:	80 81       	ld	r24, Z
    80ba:	80 33       	cpi	r24, 0x30	; 48
    80bc:	11 f4       	brne	.+4      	; 0x80c2 <vfprintf+0x2de>
    80be:	29 7e       	andi	r18, 0xE9	; 233
    80c0:	09 c0       	rjmp	.+18     	; 0x80d4 <vfprintf+0x2f0>
    80c2:	22 ff       	sbrs	r18, 2
    80c4:	06 c0       	rjmp	.+12     	; 0x80d2 <vfprintf+0x2ee>
    80c6:	73 94       	inc	r7
    80c8:	73 94       	inc	r7
    80ca:	04 c0       	rjmp	.+8      	; 0x80d4 <vfprintf+0x2f0>
    80cc:	82 2f       	mov	r24, r18
    80ce:	86 78       	andi	r24, 0x86	; 134
    80d0:	09 f0       	breq	.+2      	; 0x80d4 <vfprintf+0x2f0>
    80d2:	73 94       	inc	r7
    80d4:	23 fd       	sbrc	r18, 3
    80d6:	12 c0       	rjmp	.+36     	; 0x80fc <vfprintf+0x318>
    80d8:	20 ff       	sbrs	r18, 0
    80da:	06 c0       	rjmp	.+12     	; 0x80e8 <vfprintf+0x304>
    80dc:	5a 2c       	mov	r5, r10
    80de:	73 14       	cp	r7, r3
    80e0:	18 f4       	brcc	.+6      	; 0x80e8 <vfprintf+0x304>
    80e2:	53 0c       	add	r5, r3
    80e4:	57 18       	sub	r5, r7
    80e6:	73 2c       	mov	r7, r3
    80e8:	73 14       	cp	r7, r3
    80ea:	60 f4       	brcc	.+24     	; 0x8104 <vfprintf+0x320>
    80ec:	b7 01       	movw	r22, r14
    80ee:	80 e2       	ldi	r24, 0x20	; 32
    80f0:	90 e0       	ldi	r25, 0x00	; 0
    80f2:	2c 87       	std	Y+12, r18	; 0x0c
    80f4:	84 d3       	rcall	.+1800   	; 0x87fe <fputc>
    80f6:	73 94       	inc	r7
    80f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    80fa:	f6 cf       	rjmp	.-20     	; 0x80e8 <vfprintf+0x304>
    80fc:	73 14       	cp	r7, r3
    80fe:	10 f4       	brcc	.+4      	; 0x8104 <vfprintf+0x320>
    8100:	37 18       	sub	r3, r7
    8102:	01 c0       	rjmp	.+2      	; 0x8106 <vfprintf+0x322>
    8104:	31 2c       	mov	r3, r1
    8106:	24 ff       	sbrs	r18, 4
    8108:	11 c0       	rjmp	.+34     	; 0x812c <vfprintf+0x348>
    810a:	b7 01       	movw	r22, r14
    810c:	80 e3       	ldi	r24, 0x30	; 48
    810e:	90 e0       	ldi	r25, 0x00	; 0
    8110:	2c 87       	std	Y+12, r18	; 0x0c
    8112:	75 d3       	rcall	.+1770   	; 0x87fe <fputc>
    8114:	2c 85       	ldd	r18, Y+12	; 0x0c
    8116:	22 ff       	sbrs	r18, 2
    8118:	16 c0       	rjmp	.+44     	; 0x8146 <vfprintf+0x362>
    811a:	21 ff       	sbrs	r18, 1
    811c:	03 c0       	rjmp	.+6      	; 0x8124 <vfprintf+0x340>
    811e:	88 e5       	ldi	r24, 0x58	; 88
    8120:	90 e0       	ldi	r25, 0x00	; 0
    8122:	02 c0       	rjmp	.+4      	; 0x8128 <vfprintf+0x344>
    8124:	88 e7       	ldi	r24, 0x78	; 120
    8126:	90 e0       	ldi	r25, 0x00	; 0
    8128:	b7 01       	movw	r22, r14
    812a:	0c c0       	rjmp	.+24     	; 0x8144 <vfprintf+0x360>
    812c:	82 2f       	mov	r24, r18
    812e:	86 78       	andi	r24, 0x86	; 134
    8130:	51 f0       	breq	.+20     	; 0x8146 <vfprintf+0x362>
    8132:	21 fd       	sbrc	r18, 1
    8134:	02 c0       	rjmp	.+4      	; 0x813a <vfprintf+0x356>
    8136:	80 e2       	ldi	r24, 0x20	; 32
    8138:	01 c0       	rjmp	.+2      	; 0x813c <vfprintf+0x358>
    813a:	8b e2       	ldi	r24, 0x2B	; 43
    813c:	27 fd       	sbrc	r18, 7
    813e:	8d e2       	ldi	r24, 0x2D	; 45
    8140:	b7 01       	movw	r22, r14
    8142:	90 e0       	ldi	r25, 0x00	; 0
    8144:	5c d3       	rcall	.+1720   	; 0x87fe <fputc>
    8146:	a5 14       	cp	r10, r5
    8148:	30 f4       	brcc	.+12     	; 0x8156 <vfprintf+0x372>
    814a:	b7 01       	movw	r22, r14
    814c:	80 e3       	ldi	r24, 0x30	; 48
    814e:	90 e0       	ldi	r25, 0x00	; 0
    8150:	56 d3       	rcall	.+1708   	; 0x87fe <fputc>
    8152:	5a 94       	dec	r5
    8154:	f8 cf       	rjmp	.-16     	; 0x8146 <vfprintf+0x362>
    8156:	aa 94       	dec	r10
    8158:	f4 01       	movw	r30, r8
    815a:	ea 0d       	add	r30, r10
    815c:	f1 1d       	adc	r31, r1
    815e:	80 81       	ld	r24, Z
    8160:	b7 01       	movw	r22, r14
    8162:	90 e0       	ldi	r25, 0x00	; 0
    8164:	4c d3       	rcall	.+1688   	; 0x87fe <fputc>
    8166:	a1 10       	cpse	r10, r1
    8168:	f6 cf       	rjmp	.-20     	; 0x8156 <vfprintf+0x372>
    816a:	33 20       	and	r3, r3
    816c:	09 f4       	brne	.+2      	; 0x8170 <vfprintf+0x38c>
    816e:	5d ce       	rjmp	.-838    	; 0x7e2a <vfprintf+0x46>
    8170:	b7 01       	movw	r22, r14
    8172:	80 e2       	ldi	r24, 0x20	; 32
    8174:	90 e0       	ldi	r25, 0x00	; 0
    8176:	43 d3       	rcall	.+1670   	; 0x87fe <fputc>
    8178:	3a 94       	dec	r3
    817a:	f7 cf       	rjmp	.-18     	; 0x816a <vfprintf+0x386>
    817c:	f7 01       	movw	r30, r14
    817e:	86 81       	ldd	r24, Z+6	; 0x06
    8180:	97 81       	ldd	r25, Z+7	; 0x07
    8182:	02 c0       	rjmp	.+4      	; 0x8188 <vfprintf+0x3a4>
    8184:	8f ef       	ldi	r24, 0xFF	; 255
    8186:	9f ef       	ldi	r25, 0xFF	; 255
    8188:	2c 96       	adiw	r28, 0x0c	; 12
    818a:	cd bf       	out	0x3d, r28	; 61
    818c:	de bf       	out	0x3e, r29	; 62
    818e:	df 91       	pop	r29
    8190:	cf 91       	pop	r28
    8192:	1f 91       	pop	r17
    8194:	0f 91       	pop	r16
    8196:	ff 90       	pop	r15
    8198:	ef 90       	pop	r14
    819a:	df 90       	pop	r13
    819c:	cf 90       	pop	r12
    819e:	bf 90       	pop	r11
    81a0:	af 90       	pop	r10
    81a2:	9f 90       	pop	r9
    81a4:	8f 90       	pop	r8
    81a6:	7f 90       	pop	r7
    81a8:	6f 90       	pop	r6
    81aa:	5f 90       	pop	r5
    81ac:	4f 90       	pop	r4
    81ae:	3f 90       	pop	r3
    81b0:	2f 90       	pop	r2
    81b2:	08 95       	ret

000081b4 <putval>:
    81b4:	20 fd       	sbrc	r18, 0
    81b6:	09 c0       	rjmp	.+18     	; 0x81ca <putval+0x16>
    81b8:	fc 01       	movw	r30, r24
    81ba:	23 fd       	sbrc	r18, 3
    81bc:	05 c0       	rjmp	.+10     	; 0x81c8 <putval+0x14>
    81be:	22 ff       	sbrs	r18, 2
    81c0:	02 c0       	rjmp	.+4      	; 0x81c6 <putval+0x12>
    81c2:	73 83       	std	Z+3, r23	; 0x03
    81c4:	62 83       	std	Z+2, r22	; 0x02
    81c6:	51 83       	std	Z+1, r21	; 0x01
    81c8:	40 83       	st	Z, r20
    81ca:	08 95       	ret

000081cc <mulacc>:
    81cc:	44 fd       	sbrc	r20, 4
    81ce:	10 c0       	rjmp	.+32     	; 0x81f0 <mulacc+0x24>
    81d0:	46 fd       	sbrc	r20, 6
    81d2:	10 c0       	rjmp	.+32     	; 0x81f4 <mulacc+0x28>
    81d4:	db 01       	movw	r26, r22
    81d6:	fc 01       	movw	r30, r24
    81d8:	aa 0f       	add	r26, r26
    81da:	bb 1f       	adc	r27, r27
    81dc:	ee 1f       	adc	r30, r30
    81de:	ff 1f       	adc	r31, r31
    81e0:	10 94       	com	r1
    81e2:	d1 f7       	brne	.-12     	; 0x81d8 <mulacc+0xc>
    81e4:	6a 0f       	add	r22, r26
    81e6:	7b 1f       	adc	r23, r27
    81e8:	8e 1f       	adc	r24, r30
    81ea:	9f 1f       	adc	r25, r31
    81ec:	31 e0       	ldi	r19, 0x01	; 1
    81ee:	03 c0       	rjmp	.+6      	; 0x81f6 <mulacc+0x2a>
    81f0:	33 e0       	ldi	r19, 0x03	; 3
    81f2:	01 c0       	rjmp	.+2      	; 0x81f6 <mulacc+0x2a>
    81f4:	34 e0       	ldi	r19, 0x04	; 4
    81f6:	66 0f       	add	r22, r22
    81f8:	77 1f       	adc	r23, r23
    81fa:	88 1f       	adc	r24, r24
    81fc:	99 1f       	adc	r25, r25
    81fe:	31 50       	subi	r19, 0x01	; 1
    8200:	d1 f7       	brne	.-12     	; 0x81f6 <mulacc+0x2a>
    8202:	62 0f       	add	r22, r18
    8204:	71 1d       	adc	r23, r1
    8206:	81 1d       	adc	r24, r1
    8208:	91 1d       	adc	r25, r1
    820a:	08 95       	ret

0000820c <skip_spaces>:
    820c:	0f 93       	push	r16
    820e:	1f 93       	push	r17
    8210:	cf 93       	push	r28
    8212:	df 93       	push	r29
    8214:	8c 01       	movw	r16, r24
    8216:	c8 01       	movw	r24, r16
    8218:	b4 d2       	rcall	.+1384   	; 0x8782 <fgetc>
    821a:	ec 01       	movw	r28, r24
    821c:	97 fd       	sbrc	r25, 7
    821e:	06 c0       	rjmp	.+12     	; 0x822c <skip_spaces+0x20>
    8220:	b5 dc       	rcall	.-1686   	; 0x7b8c <isspace>
    8222:	89 2b       	or	r24, r25
    8224:	c1 f7       	brne	.-16     	; 0x8216 <skip_spaces+0xa>
    8226:	b8 01       	movw	r22, r16
    8228:	ce 01       	movw	r24, r28
    822a:	1b d3       	rcall	.+1590   	; 0x8862 <ungetc>
    822c:	ce 01       	movw	r24, r28
    822e:	df 91       	pop	r29
    8230:	cf 91       	pop	r28
    8232:	1f 91       	pop	r17
    8234:	0f 91       	pop	r16
    8236:	08 95       	ret

00008238 <conv_int>:
    8238:	8f 92       	push	r8
    823a:	9f 92       	push	r9
    823c:	af 92       	push	r10
    823e:	cf 92       	push	r12
    8240:	df 92       	push	r13
    8242:	ef 92       	push	r14
    8244:	ff 92       	push	r15
    8246:	0f 93       	push	r16
    8248:	1f 93       	push	r17
    824a:	cf 93       	push	r28
    824c:	df 93       	push	r29
    824e:	ec 01       	movw	r28, r24
    8250:	a6 2e       	mov	r10, r22
    8252:	4a 01       	movw	r8, r20
    8254:	02 2f       	mov	r16, r18
    8256:	95 d2       	rcall	.+1322   	; 0x8782 <fgetc>
    8258:	ac 01       	movw	r20, r24
    825a:	55 27       	eor	r21, r21
    825c:	4b 32       	cpi	r20, 0x2B	; 43
    825e:	51 05       	cpc	r21, r1
    8260:	21 f0       	breq	.+8      	; 0x826a <conv_int+0x32>
    8262:	4d 32       	cpi	r20, 0x2D	; 45
    8264:	51 05       	cpc	r21, r1
    8266:	49 f4       	brne	.+18     	; 0x827a <conv_int+0x42>
    8268:	00 68       	ori	r16, 0x80	; 128
    826a:	aa 94       	dec	r10
    826c:	11 f4       	brne	.+4      	; 0x8272 <conv_int+0x3a>
    826e:	80 e0       	ldi	r24, 0x00	; 0
    8270:	60 c0       	rjmp	.+192    	; 0x8332 <conv_int+0xfa>
    8272:	ce 01       	movw	r24, r28
    8274:	86 d2       	rcall	.+1292   	; 0x8782 <fgetc>
    8276:	97 fd       	sbrc	r25, 7
    8278:	fa cf       	rjmp	.-12     	; 0x826e <conv_int+0x36>
    827a:	10 2f       	mov	r17, r16
    827c:	1d 7f       	andi	r17, 0xFD	; 253
    827e:	30 2f       	mov	r19, r16
    8280:	30 73       	andi	r19, 0x30	; 48
    8282:	f1 f4       	brne	.+60     	; 0x82c0 <conv_int+0x88>
    8284:	80 33       	cpi	r24, 0x30	; 48
    8286:	e1 f4       	brne	.+56     	; 0x82c0 <conv_int+0x88>
    8288:	ff 24       	eor	r15, r15
    828a:	fa 94       	dec	r15
    828c:	fa 0c       	add	r15, r10
    828e:	09 f4       	brne	.+2      	; 0x8292 <conv_int+0x5a>
    8290:	3d c0       	rjmp	.+122    	; 0x830c <conv_int+0xd4>
    8292:	ce 01       	movw	r24, r28
    8294:	76 d2       	rcall	.+1260   	; 0x8782 <fgetc>
    8296:	97 fd       	sbrc	r25, 7
    8298:	39 c0       	rjmp	.+114    	; 0x830c <conv_int+0xd4>
    829a:	38 2f       	mov	r19, r24
    829c:	3f 7d       	andi	r19, 0xDF	; 223
    829e:	38 35       	cpi	r19, 0x58	; 88
    82a0:	49 f4       	brne	.+18     	; 0x82b4 <conv_int+0x7c>
    82a2:	12 64       	ori	r17, 0x42	; 66
    82a4:	aa 94       	dec	r10
    82a6:	aa 94       	dec	r10
    82a8:	89 f1       	breq	.+98     	; 0x830c <conv_int+0xd4>
    82aa:	ce 01       	movw	r24, r28
    82ac:	6a d2       	rcall	.+1236   	; 0x8782 <fgetc>
    82ae:	97 ff       	sbrs	r25, 7
    82b0:	07 c0       	rjmp	.+14     	; 0x82c0 <conv_int+0x88>
    82b2:	2c c0       	rjmp	.+88     	; 0x830c <conv_int+0xd4>
    82b4:	06 ff       	sbrs	r16, 6
    82b6:	02 c0       	rjmp	.+4      	; 0x82bc <conv_int+0x84>
    82b8:	12 60       	ori	r17, 0x02	; 2
    82ba:	01 c0       	rjmp	.+2      	; 0x82be <conv_int+0x86>
    82bc:	12 61       	ori	r17, 0x12	; 18
    82be:	af 2c       	mov	r10, r15
    82c0:	c1 2c       	mov	r12, r1
    82c2:	d1 2c       	mov	r13, r1
    82c4:	76 01       	movw	r14, r12
    82c6:	20 ed       	ldi	r18, 0xD0	; 208
    82c8:	28 0f       	add	r18, r24
    82ca:	28 30       	cpi	r18, 0x08	; 8
    82cc:	78 f0       	brcs	.+30     	; 0x82ec <conv_int+0xb4>
    82ce:	14 ff       	sbrs	r17, 4
    82d0:	03 c0       	rjmp	.+6      	; 0x82d8 <conv_int+0xa0>
    82d2:	be 01       	movw	r22, r28
    82d4:	c6 d2       	rcall	.+1420   	; 0x8862 <ungetc>
    82d6:	17 c0       	rjmp	.+46     	; 0x8306 <conv_int+0xce>
    82d8:	2a 30       	cpi	r18, 0x0A	; 10
    82da:	40 f0       	brcs	.+16     	; 0x82ec <conv_int+0xb4>
    82dc:	16 ff       	sbrs	r17, 6
    82de:	f9 cf       	rjmp	.-14     	; 0x82d2 <conv_int+0x9a>
    82e0:	2f 7d       	andi	r18, 0xDF	; 223
    82e2:	3f ee       	ldi	r19, 0xEF	; 239
    82e4:	32 0f       	add	r19, r18
    82e6:	36 30       	cpi	r19, 0x06	; 6
    82e8:	a0 f7       	brcc	.-24     	; 0x82d2 <conv_int+0x9a>
    82ea:	27 50       	subi	r18, 0x07	; 7
    82ec:	41 2f       	mov	r20, r17
    82ee:	c7 01       	movw	r24, r14
    82f0:	b6 01       	movw	r22, r12
    82f2:	6c df       	rcall	.-296    	; 0x81cc <mulacc>
    82f4:	6b 01       	movw	r12, r22
    82f6:	7c 01       	movw	r14, r24
    82f8:	12 60       	ori	r17, 0x02	; 2
    82fa:	aa 94       	dec	r10
    82fc:	51 f0       	breq	.+20     	; 0x8312 <conv_int+0xda>
    82fe:	ce 01       	movw	r24, r28
    8300:	40 d2       	rcall	.+1152   	; 0x8782 <fgetc>
    8302:	97 ff       	sbrs	r25, 7
    8304:	e0 cf       	rjmp	.-64     	; 0x82c6 <conv_int+0x8e>
    8306:	11 fd       	sbrc	r17, 1
    8308:	04 c0       	rjmp	.+8      	; 0x8312 <conv_int+0xda>
    830a:	b1 cf       	rjmp	.-158    	; 0x826e <conv_int+0x36>
    830c:	c1 2c       	mov	r12, r1
    830e:	d1 2c       	mov	r13, r1
    8310:	76 01       	movw	r14, r12
    8312:	17 ff       	sbrs	r17, 7
    8314:	08 c0       	rjmp	.+16     	; 0x8326 <conv_int+0xee>
    8316:	f0 94       	com	r15
    8318:	e0 94       	com	r14
    831a:	d0 94       	com	r13
    831c:	c0 94       	com	r12
    831e:	c1 1c       	adc	r12, r1
    8320:	d1 1c       	adc	r13, r1
    8322:	e1 1c       	adc	r14, r1
    8324:	f1 1c       	adc	r15, r1
    8326:	21 2f       	mov	r18, r17
    8328:	b7 01       	movw	r22, r14
    832a:	a6 01       	movw	r20, r12
    832c:	c4 01       	movw	r24, r8
    832e:	42 df       	rcall	.-380    	; 0x81b4 <putval>
    8330:	81 e0       	ldi	r24, 0x01	; 1
    8332:	df 91       	pop	r29
    8334:	cf 91       	pop	r28
    8336:	1f 91       	pop	r17
    8338:	0f 91       	pop	r16
    833a:	ff 90       	pop	r15
    833c:	ef 90       	pop	r14
    833e:	df 90       	pop	r13
    8340:	cf 90       	pop	r12
    8342:	af 90       	pop	r10
    8344:	9f 90       	pop	r9
    8346:	8f 90       	pop	r8
    8348:	08 95       	ret

0000834a <conv_brk>:
    834a:	7f 92       	push	r7
    834c:	8f 92       	push	r8
    834e:	9f 92       	push	r9
    8350:	af 92       	push	r10
    8352:	bf 92       	push	r11
    8354:	cf 92       	push	r12
    8356:	df 92       	push	r13
    8358:	ef 92       	push	r14
    835a:	ff 92       	push	r15
    835c:	0f 93       	push	r16
    835e:	1f 93       	push	r17
    8360:	cf 93       	push	r28
    8362:	df 93       	push	r29
    8364:	cd b7       	in	r28, 0x3d	; 61
    8366:	de b7       	in	r29, 0x3e	; 62
    8368:	a1 97       	sbiw	r28, 0x21	; 33
    836a:	cd bf       	out	0x3d, r28	; 61
    836c:	de bf       	out	0x3e, r29	; 62
    836e:	5c 01       	movw	r10, r24
    8370:	7a 01       	movw	r14, r20
    8372:	8e 01       	movw	r16, r28
    8374:	0f 5f       	subi	r16, 0xFF	; 255
    8376:	1f 4f       	sbci	r17, 0xFF	; 255
    8378:	68 01       	movw	r12, r16
    837a:	80 e2       	ldi	r24, 0x20	; 32
    837c:	d8 01       	movw	r26, r16
    837e:	1d 92       	st	X+, r1
    8380:	8a 95       	dec	r24
    8382:	e9 f7       	brne	.-6      	; 0x837e <conv_brk+0x34>
    8384:	f5 01       	movw	r30, r10
    8386:	73 80       	ldd	r7, Z+3	; 0x03
    8388:	40 e0       	ldi	r20, 0x00	; 0
    838a:	50 e0       	ldi	r21, 0x00	; 0
    838c:	81 2c       	mov	r8, r1
    838e:	b0 e0       	ldi	r27, 0x00	; 0
    8390:	91 2c       	mov	r9, r1
    8392:	81 e0       	ldi	r24, 0x01	; 1
    8394:	90 e0       	ldi	r25, 0x00	; 0
    8396:	f9 01       	movw	r30, r18
    8398:	73 fc       	sbrc	r7, 3
    839a:	a5 91       	lpm	r26, Z+
    839c:	73 fe       	sbrs	r7, 3
    839e:	a1 91       	ld	r26, Z+
    83a0:	8f 01       	movw	r16, r30
    83a2:	7a 2f       	mov	r23, r26
    83a4:	9f 01       	movw	r18, r30
    83a6:	a1 11       	cpse	r26, r1
    83a8:	03 c0       	rjmp	.+6      	; 0x83b0 <conv_brk+0x66>
    83aa:	80 e0       	ldi	r24, 0x00	; 0
    83ac:	90 e0       	ldi	r25, 0x00	; 0
    83ae:	7b c0       	rjmp	.+246    	; 0x84a6 <conv_brk+0x15c>
    83b0:	ae 35       	cpi	r26, 0x5E	; 94
    83b2:	19 f4       	brne	.+6      	; 0x83ba <conv_brk+0x70>
    83b4:	41 15       	cp	r20, r1
    83b6:	51 05       	cpc	r21, r1
    83b8:	59 f1       	breq	.+86     	; 0x8410 <conv_brk+0xc6>
    83ba:	e9 2d       	mov	r30, r9
    83bc:	f0 e0       	ldi	r31, 0x00	; 0
    83be:	e4 17       	cp	r30, r20
    83c0:	f5 07       	cpc	r31, r21
    83c2:	3c f4       	brge	.+14     	; 0x83d2 <conv_brk+0x88>
    83c4:	ad 35       	cpi	r26, 0x5D	; 93
    83c6:	69 f1       	breq	.+90     	; 0x8422 <conv_brk+0xd8>
    83c8:	ad 32       	cpi	r26, 0x2D	; 45
    83ca:	19 f4       	brne	.+6      	; 0x83d2 <conv_brk+0x88>
    83cc:	bb 23       	and	r27, r27
    83ce:	19 f1       	breq	.+70     	; 0x8416 <conv_brk+0xcc>
    83d0:	03 c0       	rjmp	.+6      	; 0x83d8 <conv_brk+0x8e>
    83d2:	b1 11       	cpse	r27, r1
    83d4:	01 c0       	rjmp	.+2      	; 0x83d8 <conv_brk+0x8e>
    83d6:	8a 2e       	mov	r8, r26
    83d8:	e7 2f       	mov	r30, r23
    83da:	e6 95       	lsr	r30
    83dc:	e6 95       	lsr	r30
    83de:	e6 95       	lsr	r30
    83e0:	86 01       	movw	r16, r12
    83e2:	0e 0f       	add	r16, r30
    83e4:	11 1d       	adc	r17, r1
    83e6:	f8 01       	movw	r30, r16
    83e8:	a7 2f       	mov	r26, r23
    83ea:	a7 70       	andi	r26, 0x07	; 7
    83ec:	8c 01       	movw	r16, r24
    83ee:	02 c0       	rjmp	.+4      	; 0x83f4 <conv_brk+0xaa>
    83f0:	00 0f       	add	r16, r16
    83f2:	11 1f       	adc	r17, r17
    83f4:	aa 95       	dec	r26
    83f6:	e2 f7       	brpl	.-8      	; 0x83f0 <conv_brk+0xa6>
    83f8:	d8 01       	movw	r26, r16
    83fa:	b0 81       	ld	r27, Z
    83fc:	ba 2b       	or	r27, r26
    83fe:	b0 83       	st	Z, r27
    8400:	78 15       	cp	r23, r8
    8402:	59 f0       	breq	.+22     	; 0x841a <conv_brk+0xd0>
    8404:	78 15       	cp	r23, r8
    8406:	10 f4       	brcc	.+4      	; 0x840c <conv_brk+0xc2>
    8408:	7f 5f       	subi	r23, 0xFF	; 255
    840a:	e6 cf       	rjmp	.-52     	; 0x83d8 <conv_brk+0x8e>
    840c:	71 50       	subi	r23, 0x01	; 1
    840e:	e4 cf       	rjmp	.-56     	; 0x83d8 <conv_brk+0x8e>
    8410:	99 24       	eor	r9, r9
    8412:	93 94       	inc	r9
    8414:	03 c0       	rjmp	.+6      	; 0x841c <conv_brk+0xd2>
    8416:	b1 e0       	ldi	r27, 0x01	; 1
    8418:	01 c0       	rjmp	.+2      	; 0x841c <conv_brk+0xd2>
    841a:	b0 e0       	ldi	r27, 0x00	; 0
    841c:	4f 5f       	subi	r20, 0xFF	; 255
    841e:	5f 4f       	sbci	r21, 0xFF	; 255
    8420:	ba cf       	rjmp	.-140    	; 0x8396 <conv_brk+0x4c>
    8422:	bb 23       	and	r27, r27
    8424:	19 f0       	breq	.+6      	; 0x842c <conv_brk+0xe2>
    8426:	8e 81       	ldd	r24, Y+6	; 0x06
    8428:	80 62       	ori	r24, 0x20	; 32
    842a:	8e 83       	std	Y+6, r24	; 0x06
    842c:	91 10       	cpse	r9, r1
    842e:	03 c0       	rjmp	.+6      	; 0x8436 <conv_brk+0xec>
    8430:	99 24       	eor	r9, r9
    8432:	93 94       	inc	r9
    8434:	15 c0       	rjmp	.+42     	; 0x8460 <conv_brk+0x116>
    8436:	f6 01       	movw	r30, r12
    8438:	ce 01       	movw	r24, r28
    843a:	81 96       	adiw	r24, 0x21	; 33
    843c:	20 81       	ld	r18, Z
    843e:	20 95       	com	r18
    8440:	21 93       	st	Z+, r18
    8442:	e8 17       	cp	r30, r24
    8444:	f9 07       	cpc	r31, r25
    8446:	d1 f7       	brne	.-12     	; 0x843c <conv_brk+0xf2>
    8448:	f3 cf       	rjmp	.-26     	; 0x8430 <conv_brk+0xe6>
    844a:	e1 14       	cp	r14, r1
    844c:	f1 04       	cpc	r15, r1
    844e:	29 f0       	breq	.+10     	; 0x845a <conv_brk+0x110>
    8450:	d7 01       	movw	r26, r14
    8452:	8c 93       	st	X, r24
    8454:	f7 01       	movw	r30, r14
    8456:	31 96       	adiw	r30, 0x01	; 1
    8458:	7f 01       	movw	r14, r30
    845a:	61 50       	subi	r22, 0x01	; 1
    845c:	f1 f0       	breq	.+60     	; 0x849a <conv_brk+0x150>
    845e:	91 2c       	mov	r9, r1
    8460:	c5 01       	movw	r24, r10
    8462:	69 a3       	std	Y+33, r22	; 0x21
    8464:	8e d1       	rcall	.+796    	; 0x8782 <fgetc>
    8466:	69 a1       	ldd	r22, Y+33	; 0x21
    8468:	97 fd       	sbrc	r25, 7
    846a:	15 c0       	rjmp	.+42     	; 0x8496 <conv_brk+0x14c>
    846c:	28 2f       	mov	r18, r24
    846e:	26 95       	lsr	r18
    8470:	26 95       	lsr	r18
    8472:	26 95       	lsr	r18
    8474:	f6 01       	movw	r30, r12
    8476:	e2 0f       	add	r30, r18
    8478:	f1 1d       	adc	r31, r1
    847a:	20 81       	ld	r18, Z
    847c:	30 e0       	ldi	r19, 0x00	; 0
    847e:	ac 01       	movw	r20, r24
    8480:	47 70       	andi	r20, 0x07	; 7
    8482:	55 27       	eor	r21, r21
    8484:	02 c0       	rjmp	.+4      	; 0x848a <conv_brk+0x140>
    8486:	35 95       	asr	r19
    8488:	27 95       	ror	r18
    848a:	4a 95       	dec	r20
    848c:	e2 f7       	brpl	.-8      	; 0x8486 <conv_brk+0x13c>
    848e:	20 fd       	sbrc	r18, 0
    8490:	dc cf       	rjmp	.-72     	; 0x844a <conv_brk+0x100>
    8492:	b5 01       	movw	r22, r10
    8494:	e6 d1       	rcall	.+972    	; 0x8862 <ungetc>
    8496:	91 10       	cpse	r9, r1
    8498:	88 cf       	rjmp	.-240    	; 0x83aa <conv_brk+0x60>
    849a:	e1 14       	cp	r14, r1
    849c:	f1 04       	cpc	r15, r1
    849e:	11 f0       	breq	.+4      	; 0x84a4 <conv_brk+0x15a>
    84a0:	d7 01       	movw	r26, r14
    84a2:	1c 92       	st	X, r1
    84a4:	c8 01       	movw	r24, r16
    84a6:	a1 96       	adiw	r28, 0x21	; 33
    84a8:	cd bf       	out	0x3d, r28	; 61
    84aa:	de bf       	out	0x3e, r29	; 62
    84ac:	df 91       	pop	r29
    84ae:	cf 91       	pop	r28
    84b0:	1f 91       	pop	r17
    84b2:	0f 91       	pop	r16
    84b4:	ff 90       	pop	r15
    84b6:	ef 90       	pop	r14
    84b8:	df 90       	pop	r13
    84ba:	cf 90       	pop	r12
    84bc:	bf 90       	pop	r11
    84be:	af 90       	pop	r10
    84c0:	9f 90       	pop	r9
    84c2:	8f 90       	pop	r8
    84c4:	7f 90       	pop	r7
    84c6:	08 95       	ret

000084c8 <vfscanf>:
    84c8:	4f 92       	push	r4
    84ca:	5f 92       	push	r5
    84cc:	7f 92       	push	r7
    84ce:	8f 92       	push	r8
    84d0:	9f 92       	push	r9
    84d2:	af 92       	push	r10
    84d4:	bf 92       	push	r11
    84d6:	cf 92       	push	r12
    84d8:	df 92       	push	r13
    84da:	ef 92       	push	r14
    84dc:	ff 92       	push	r15
    84de:	0f 93       	push	r16
    84e0:	1f 93       	push	r17
    84e2:	cf 93       	push	r28
    84e4:	df 93       	push	r29
    84e6:	1f 92       	push	r1
    84e8:	cd b7       	in	r28, 0x3d	; 61
    84ea:	de b7       	in	r29, 0x3e	; 62
    84ec:	8c 01       	movw	r16, r24
    84ee:	2b 01       	movw	r4, r22
    84f0:	7a 01       	movw	r14, r20
    84f2:	fc 01       	movw	r30, r24
    84f4:	16 82       	std	Z+6, r1	; 0x06
    84f6:	17 82       	std	Z+7, r1	; 0x07
    84f8:	a1 2c       	mov	r10, r1
    84fa:	f8 01       	movw	r30, r16
    84fc:	d3 80       	ldd	r13, Z+3	; 0x03
    84fe:	f2 01       	movw	r30, r4
    8500:	d3 fc       	sbrc	r13, 3
    8502:	85 91       	lpm	r24, Z+
    8504:	d3 fe       	sbrs	r13, 3
    8506:	81 91       	ld	r24, Z+
    8508:	38 2f       	mov	r19, r24
    850a:	2f 01       	movw	r4, r30
    850c:	88 23       	and	r24, r24
    850e:	09 f4       	brne	.+2      	; 0x8512 <vfscanf+0x4a>
    8510:	ee c0       	rjmp	.+476    	; 0x86ee <vfscanf+0x226>
    8512:	90 e0       	ldi	r25, 0x00	; 0
    8514:	39 83       	std	Y+1, r19	; 0x01
    8516:	3a db       	rcall	.-2444   	; 0x7b8c <isspace>
    8518:	39 81       	ldd	r19, Y+1	; 0x01
    851a:	89 2b       	or	r24, r25
    851c:	19 f0       	breq	.+6      	; 0x8524 <vfscanf+0x5c>
    851e:	c8 01       	movw	r24, r16
    8520:	75 de       	rcall	.-790    	; 0x820c <skip_spaces>
    8522:	eb cf       	rjmp	.-42     	; 0x84fa <vfscanf+0x32>
    8524:	35 32       	cpi	r19, 0x25	; 37
    8526:	41 f4       	brne	.+16     	; 0x8538 <vfscanf+0x70>
    8528:	f2 01       	movw	r30, r4
    852a:	d3 fc       	sbrc	r13, 3
    852c:	35 91       	lpm	r19, Z+
    852e:	d3 fe       	sbrs	r13, 3
    8530:	31 91       	ld	r19, Z+
    8532:	2f 01       	movw	r4, r30
    8534:	35 32       	cpi	r19, 0x25	; 37
    8536:	59 f4       	brne	.+22     	; 0x854e <vfscanf+0x86>
    8538:	c8 01       	movw	r24, r16
    853a:	39 83       	std	Y+1, r19	; 0x01
    853c:	22 d1       	rcall	.+580    	; 0x8782 <fgetc>
    853e:	39 81       	ldd	r19, Y+1	; 0x01
    8540:	97 fd       	sbrc	r25, 7
    8542:	d3 c0       	rjmp	.+422    	; 0x86ea <vfscanf+0x222>
    8544:	38 17       	cp	r19, r24
    8546:	c9 f2       	breq	.-78     	; 0x84fa <vfscanf+0x32>
    8548:	b8 01       	movw	r22, r16
    854a:	8b d1       	rcall	.+790    	; 0x8862 <ungetc>
    854c:	d0 c0       	rjmp	.+416    	; 0x86ee <vfscanf+0x226>
    854e:	3a 32       	cpi	r19, 0x2A	; 42
    8550:	41 f4       	brne	.+16     	; 0x8562 <vfscanf+0x9a>
    8552:	d3 fc       	sbrc	r13, 3
    8554:	35 91       	lpm	r19, Z+
    8556:	d3 fe       	sbrs	r13, 3
    8558:	31 91       	ld	r19, Z+
    855a:	2f 01       	movw	r4, r30
    855c:	bb 24       	eor	r11, r11
    855e:	b3 94       	inc	r11
    8560:	01 c0       	rjmp	.+2      	; 0x8564 <vfscanf+0x9c>
    8562:	b1 2c       	mov	r11, r1
    8564:	71 2c       	mov	r7, r1
    8566:	20 ed       	ldi	r18, 0xD0	; 208
    8568:	23 0f       	add	r18, r19
    856a:	2a 30       	cpi	r18, 0x0A	; 10
    856c:	88 f4       	brcc	.+34     	; 0x8590 <vfscanf+0xc8>
    856e:	fb 2d       	mov	r31, r11
    8570:	f2 60       	ori	r31, 0x02	; 2
    8572:	bf 2e       	mov	r11, r31
    8574:	67 2d       	mov	r22, r7
    8576:	70 e0       	ldi	r23, 0x00	; 0
    8578:	80 e0       	ldi	r24, 0x00	; 0
    857a:	90 e0       	ldi	r25, 0x00	; 0
    857c:	40 e2       	ldi	r20, 0x20	; 32
    857e:	26 de       	rcall	.-948    	; 0x81cc <mulacc>
    8580:	76 2e       	mov	r7, r22
    8582:	f2 01       	movw	r30, r4
    8584:	d3 fc       	sbrc	r13, 3
    8586:	35 91       	lpm	r19, Z+
    8588:	d3 fe       	sbrs	r13, 3
    858a:	31 91       	ld	r19, Z+
    858c:	2f 01       	movw	r4, r30
    858e:	eb cf       	rjmp	.-42     	; 0x8566 <vfscanf+0x9e>
    8590:	b1 fe       	sbrs	r11, 1
    8592:	03 c0       	rjmp	.+6      	; 0x859a <vfscanf+0xd2>
    8594:	71 10       	cpse	r7, r1
    8596:	03 c0       	rjmp	.+6      	; 0x859e <vfscanf+0xd6>
    8598:	aa c0       	rjmp	.+340    	; 0x86ee <vfscanf+0x226>
    859a:	77 24       	eor	r7, r7
    859c:	7a 94       	dec	r7
    859e:	38 36       	cpi	r19, 0x68	; 104
    85a0:	19 f0       	breq	.+6      	; 0x85a8 <vfscanf+0xe0>
    85a2:	3c 36       	cpi	r19, 0x6C	; 108
    85a4:	61 f0       	breq	.+24     	; 0x85be <vfscanf+0xf6>
    85a6:	14 c0       	rjmp	.+40     	; 0x85d0 <vfscanf+0x108>
    85a8:	f2 01       	movw	r30, r4
    85aa:	d3 fc       	sbrc	r13, 3
    85ac:	35 91       	lpm	r19, Z+
    85ae:	d3 fe       	sbrs	r13, 3
    85b0:	31 91       	ld	r19, Z+
    85b2:	2f 01       	movw	r4, r30
    85b4:	38 36       	cpi	r19, 0x68	; 104
    85b6:	61 f4       	brne	.+24     	; 0x85d0 <vfscanf+0x108>
    85b8:	fb 2d       	mov	r31, r11
    85ba:	f8 60       	ori	r31, 0x08	; 8
    85bc:	bf 2e       	mov	r11, r31
    85be:	8b 2d       	mov	r24, r11
    85c0:	84 60       	ori	r24, 0x04	; 4
    85c2:	b8 2e       	mov	r11, r24
    85c4:	f2 01       	movw	r30, r4
    85c6:	d3 fc       	sbrc	r13, 3
    85c8:	35 91       	lpm	r19, Z+
    85ca:	d3 fe       	sbrs	r13, 3
    85cc:	31 91       	ld	r19, Z+
    85ce:	2f 01       	movw	r4, r30
    85d0:	33 23       	and	r19, r19
    85d2:	09 f4       	brne	.+2      	; 0x85d6 <vfscanf+0x10e>
    85d4:	8c c0       	rjmp	.+280    	; 0x86ee <vfscanf+0x226>
    85d6:	63 2f       	mov	r22, r19
    85d8:	70 e0       	ldi	r23, 0x00	; 0
    85da:	82 e4       	ldi	r24, 0x42	; 66
    85dc:	9e e0       	ldi	r25, 0x0E	; 14
    85de:	39 83       	std	Y+1, r19	; 0x01
    85e0:	9f d0       	rcall	.+318    	; 0x8720 <strchr_P>
    85e2:	39 81       	ldd	r19, Y+1	; 0x01
    85e4:	89 2b       	or	r24, r25
    85e6:	09 f4       	brne	.+2      	; 0x85ea <vfscanf+0x122>
    85e8:	82 c0       	rjmp	.+260    	; 0x86ee <vfscanf+0x226>
    85ea:	b0 fc       	sbrc	r11, 0
    85ec:	07 c0       	rjmp	.+14     	; 0x85fc <vfscanf+0x134>
    85ee:	f7 01       	movw	r30, r14
    85f0:	c0 80       	ld	r12, Z
    85f2:	d1 80       	ldd	r13, Z+1	; 0x01
    85f4:	c7 01       	movw	r24, r14
    85f6:	02 96       	adiw	r24, 0x02	; 2
    85f8:	7c 01       	movw	r14, r24
    85fa:	02 c0       	rjmp	.+4      	; 0x8600 <vfscanf+0x138>
    85fc:	c1 2c       	mov	r12, r1
    85fe:	d1 2c       	mov	r13, r1
    8600:	3e 36       	cpi	r19, 0x6E	; 110
    8602:	49 f4       	brne	.+18     	; 0x8616 <vfscanf+0x14e>
    8604:	f8 01       	movw	r30, r16
    8606:	46 81       	ldd	r20, Z+6	; 0x06
    8608:	57 81       	ldd	r21, Z+7	; 0x07
    860a:	60 e0       	ldi	r22, 0x00	; 0
    860c:	70 e0       	ldi	r23, 0x00	; 0
    860e:	2b 2d       	mov	r18, r11
    8610:	c6 01       	movw	r24, r12
    8612:	d0 dd       	rcall	.-1120   	; 0x81b4 <putval>
    8614:	72 cf       	rjmp	.-284    	; 0x84fa <vfscanf+0x32>
    8616:	33 36       	cpi	r19, 0x63	; 99
    8618:	99 f4       	brne	.+38     	; 0x8640 <vfscanf+0x178>
    861a:	b1 fc       	sbrc	r11, 1
    861c:	02 c0       	rjmp	.+4      	; 0x8622 <vfscanf+0x15a>
    861e:	77 24       	eor	r7, r7
    8620:	73 94       	inc	r7
    8622:	c8 01       	movw	r24, r16
    8624:	ae d0       	rcall	.+348    	; 0x8782 <fgetc>
    8626:	97 fd       	sbrc	r25, 7
    8628:	60 c0       	rjmp	.+192    	; 0x86ea <vfscanf+0x222>
    862a:	c1 14       	cp	r12, r1
    862c:	d1 04       	cpc	r13, r1
    862e:	29 f0       	breq	.+10     	; 0x863a <vfscanf+0x172>
    8630:	f6 01       	movw	r30, r12
    8632:	80 83       	st	Z, r24
    8634:	c6 01       	movw	r24, r12
    8636:	01 96       	adiw	r24, 0x01	; 1
    8638:	6c 01       	movw	r12, r24
    863a:	7a 94       	dec	r7
    863c:	91 f7       	brne	.-28     	; 0x8622 <vfscanf+0x15a>
    863e:	51 c0       	rjmp	.+162    	; 0x86e2 <vfscanf+0x21a>
    8640:	3b 35       	cpi	r19, 0x5B	; 91
    8642:	51 f4       	brne	.+20     	; 0x8658 <vfscanf+0x190>
    8644:	92 01       	movw	r18, r4
    8646:	a6 01       	movw	r20, r12
    8648:	67 2d       	mov	r22, r7
    864a:	c8 01       	movw	r24, r16
    864c:	7e de       	rcall	.-772    	; 0x834a <conv_brk>
    864e:	2c 01       	movw	r4, r24
    8650:	00 97       	sbiw	r24, 0x00	; 0
    8652:	09 f0       	breq	.+2      	; 0x8656 <vfscanf+0x18e>
    8654:	46 c0       	rjmp	.+140    	; 0x86e2 <vfscanf+0x21a>
    8656:	40 c0       	rjmp	.+128    	; 0x86d8 <vfscanf+0x210>
    8658:	c8 01       	movw	r24, r16
    865a:	39 83       	std	Y+1, r19	; 0x01
    865c:	d7 dd       	rcall	.-1106   	; 0x820c <skip_spaces>
    865e:	39 81       	ldd	r19, Y+1	; 0x01
    8660:	97 fd       	sbrc	r25, 7
    8662:	43 c0       	rjmp	.+134    	; 0x86ea <vfscanf+0x222>
    8664:	3f 36       	cpi	r19, 0x6F	; 111
    8666:	51 f1       	breq	.+84     	; 0x86bc <vfscanf+0x1f4>
    8668:	28 f4       	brcc	.+10     	; 0x8674 <vfscanf+0x1ac>
    866a:	34 36       	cpi	r19, 0x64	; 100
    866c:	19 f1       	breq	.+70     	; 0x86b4 <vfscanf+0x1ec>
    866e:	39 36       	cpi	r19, 0x69	; 105
    8670:	61 f1       	breq	.+88     	; 0x86ca <vfscanf+0x202>
    8672:	28 c0       	rjmp	.+80     	; 0x86c4 <vfscanf+0x1fc>
    8674:	33 37       	cpi	r19, 0x73	; 115
    8676:	69 f0       	breq	.+26     	; 0x8692 <vfscanf+0x1ca>
    8678:	35 37       	cpi	r19, 0x75	; 117
    867a:	e1 f0       	breq	.+56     	; 0x86b4 <vfscanf+0x1ec>
    867c:	23 c0       	rjmp	.+70     	; 0x86c4 <vfscanf+0x1fc>
    867e:	c1 14       	cp	r12, r1
    8680:	d1 04       	cpc	r13, r1
    8682:	29 f0       	breq	.+10     	; 0x868e <vfscanf+0x1c6>
    8684:	f6 01       	movw	r30, r12
    8686:	80 82       	st	Z, r8
    8688:	c6 01       	movw	r24, r12
    868a:	01 96       	adiw	r24, 0x01	; 1
    868c:	6c 01       	movw	r12, r24
    868e:	7a 94       	dec	r7
    8690:	59 f0       	breq	.+22     	; 0x86a8 <vfscanf+0x1e0>
    8692:	c8 01       	movw	r24, r16
    8694:	76 d0       	rcall	.+236    	; 0x8782 <fgetc>
    8696:	4c 01       	movw	r8, r24
    8698:	97 fd       	sbrc	r25, 7
    869a:	06 c0       	rjmp	.+12     	; 0x86a8 <vfscanf+0x1e0>
    869c:	77 da       	rcall	.-2834   	; 0x7b8c <isspace>
    869e:	89 2b       	or	r24, r25
    86a0:	71 f3       	breq	.-36     	; 0x867e <vfscanf+0x1b6>
    86a2:	b8 01       	movw	r22, r16
    86a4:	c4 01       	movw	r24, r8
    86a6:	dd d0       	rcall	.+442    	; 0x8862 <ungetc>
    86a8:	c1 14       	cp	r12, r1
    86aa:	d1 04       	cpc	r13, r1
    86ac:	d1 f0       	breq	.+52     	; 0x86e2 <vfscanf+0x21a>
    86ae:	f6 01       	movw	r30, r12
    86b0:	10 82       	st	Z, r1
    86b2:	17 c0       	rjmp	.+46     	; 0x86e2 <vfscanf+0x21a>
    86b4:	fb 2d       	mov	r31, r11
    86b6:	f0 62       	ori	r31, 0x20	; 32
    86b8:	bf 2e       	mov	r11, r31
    86ba:	07 c0       	rjmp	.+14     	; 0x86ca <vfscanf+0x202>
    86bc:	8b 2d       	mov	r24, r11
    86be:	80 61       	ori	r24, 0x10	; 16
    86c0:	b8 2e       	mov	r11, r24
    86c2:	03 c0       	rjmp	.+6      	; 0x86ca <vfscanf+0x202>
    86c4:	9b 2d       	mov	r25, r11
    86c6:	90 64       	ori	r25, 0x40	; 64
    86c8:	b9 2e       	mov	r11, r25
    86ca:	2b 2d       	mov	r18, r11
    86cc:	a6 01       	movw	r20, r12
    86ce:	67 2d       	mov	r22, r7
    86d0:	c8 01       	movw	r24, r16
    86d2:	b2 dd       	rcall	.-1180   	; 0x8238 <conv_int>
    86d4:	81 11       	cpse	r24, r1
    86d6:	05 c0       	rjmp	.+10     	; 0x86e2 <vfscanf+0x21a>
    86d8:	f8 01       	movw	r30, r16
    86da:	83 81       	ldd	r24, Z+3	; 0x03
    86dc:	80 73       	andi	r24, 0x30	; 48
    86de:	29 f4       	brne	.+10     	; 0x86ea <vfscanf+0x222>
    86e0:	06 c0       	rjmp	.+12     	; 0x86ee <vfscanf+0x226>
    86e2:	b0 fc       	sbrc	r11, 0
    86e4:	0a cf       	rjmp	.-492    	; 0x84fa <vfscanf+0x32>
    86e6:	a3 94       	inc	r10
    86e8:	08 cf       	rjmp	.-496    	; 0x84fa <vfscanf+0x32>
    86ea:	aa 20       	and	r10, r10
    86ec:	19 f0       	breq	.+6      	; 0x86f4 <vfscanf+0x22c>
    86ee:	8a 2d       	mov	r24, r10
    86f0:	90 e0       	ldi	r25, 0x00	; 0
    86f2:	02 c0       	rjmp	.+4      	; 0x86f8 <vfscanf+0x230>
    86f4:	8f ef       	ldi	r24, 0xFF	; 255
    86f6:	9f ef       	ldi	r25, 0xFF	; 255
    86f8:	0f 90       	pop	r0
    86fa:	df 91       	pop	r29
    86fc:	cf 91       	pop	r28
    86fe:	1f 91       	pop	r17
    8700:	0f 91       	pop	r16
    8702:	ff 90       	pop	r15
    8704:	ef 90       	pop	r14
    8706:	df 90       	pop	r13
    8708:	cf 90       	pop	r12
    870a:	bf 90       	pop	r11
    870c:	af 90       	pop	r10
    870e:	9f 90       	pop	r9
    8710:	8f 90       	pop	r8
    8712:	7f 90       	pop	r7
    8714:	5f 90       	pop	r5
    8716:	4f 90       	pop	r4
    8718:	08 95       	ret

0000871a <__ctype_isfalse>:
    871a:	99 27       	eor	r25, r25
    871c:	88 27       	eor	r24, r24

0000871e <__ctype_istrue>:
    871e:	08 95       	ret

00008720 <strchr_P>:
    8720:	fc 01       	movw	r30, r24
    8722:	05 90       	lpm	r0, Z+
    8724:	06 16       	cp	r0, r22
    8726:	21 f0       	breq	.+8      	; 0x8730 <strchr_P+0x10>
    8728:	00 20       	and	r0, r0
    872a:	d9 f7       	brne	.-10     	; 0x8722 <strchr_P+0x2>
    872c:	c0 01       	movw	r24, r0
    872e:	08 95       	ret
    8730:	31 97       	sbiw	r30, 0x01	; 1
    8732:	cf 01       	movw	r24, r30
    8734:	08 95       	ret

00008736 <strnlen_P>:
    8736:	fc 01       	movw	r30, r24
    8738:	05 90       	lpm	r0, Z+
    873a:	61 50       	subi	r22, 0x01	; 1
    873c:	70 40       	sbci	r23, 0x00	; 0
    873e:	01 10       	cpse	r0, r1
    8740:	d8 f7       	brcc	.-10     	; 0x8738 <strnlen_P+0x2>
    8742:	80 95       	com	r24
    8744:	90 95       	com	r25
    8746:	8e 0f       	add	r24, r30
    8748:	9f 1f       	adc	r25, r31
    874a:	08 95       	ret

0000874c <strnlen>:
    874c:	fc 01       	movw	r30, r24
    874e:	61 50       	subi	r22, 0x01	; 1
    8750:	70 40       	sbci	r23, 0x00	; 0
    8752:	01 90       	ld	r0, Z+
    8754:	01 10       	cpse	r0, r1
    8756:	d8 f7       	brcc	.-10     	; 0x874e <strnlen+0x2>
    8758:	80 95       	com	r24
    875a:	90 95       	com	r25
    875c:	8e 0f       	add	r24, r30
    875e:	9f 1f       	adc	r25, r31
    8760:	08 95       	ret

00008762 <strrev>:
    8762:	dc 01       	movw	r26, r24
    8764:	fc 01       	movw	r30, r24
    8766:	67 2f       	mov	r22, r23
    8768:	71 91       	ld	r23, Z+
    876a:	77 23       	and	r23, r23
    876c:	e1 f7       	brne	.-8      	; 0x8766 <strrev+0x4>
    876e:	32 97       	sbiw	r30, 0x02	; 2
    8770:	04 c0       	rjmp	.+8      	; 0x877a <strrev+0x18>
    8772:	7c 91       	ld	r23, X
    8774:	6d 93       	st	X+, r22
    8776:	70 83       	st	Z, r23
    8778:	62 91       	ld	r22, -Z
    877a:	ae 17       	cp	r26, r30
    877c:	bf 07       	cpc	r27, r31
    877e:	c8 f3       	brcs	.-14     	; 0x8772 <strrev+0x10>
    8780:	08 95       	ret

00008782 <fgetc>:
    8782:	cf 93       	push	r28
    8784:	df 93       	push	r29
    8786:	ec 01       	movw	r28, r24
    8788:	2b 81       	ldd	r18, Y+3	; 0x03
    878a:	20 ff       	sbrs	r18, 0
    878c:	33 c0       	rjmp	.+102    	; 0x87f4 <fgetc+0x72>
    878e:	26 ff       	sbrs	r18, 6
    8790:	0a c0       	rjmp	.+20     	; 0x87a6 <fgetc+0x24>
    8792:	2f 7b       	andi	r18, 0xBF	; 191
    8794:	2b 83       	std	Y+3, r18	; 0x03
    8796:	8e 81       	ldd	r24, Y+6	; 0x06
    8798:	9f 81       	ldd	r25, Y+7	; 0x07
    879a:	01 96       	adiw	r24, 0x01	; 1
    879c:	8e 83       	std	Y+6, r24	; 0x06
    879e:	9f 83       	std	Y+7, r25	; 0x07
    87a0:	8a 81       	ldd	r24, Y+2	; 0x02
    87a2:	90 e0       	ldi	r25, 0x00	; 0
    87a4:	29 c0       	rjmp	.+82     	; 0x87f8 <fgetc+0x76>
    87a6:	22 ff       	sbrs	r18, 2
    87a8:	0f c0       	rjmp	.+30     	; 0x87c8 <fgetc+0x46>
    87aa:	e8 81       	ld	r30, Y
    87ac:	f9 81       	ldd	r31, Y+1	; 0x01
    87ae:	80 81       	ld	r24, Z
    87b0:	99 27       	eor	r25, r25
    87b2:	87 fd       	sbrc	r24, 7
    87b4:	90 95       	com	r25
    87b6:	00 97       	sbiw	r24, 0x00	; 0
    87b8:	19 f4       	brne	.+6      	; 0x87c0 <fgetc+0x3e>
    87ba:	20 62       	ori	r18, 0x20	; 32
    87bc:	2b 83       	std	Y+3, r18	; 0x03
    87be:	1a c0       	rjmp	.+52     	; 0x87f4 <fgetc+0x72>
    87c0:	31 96       	adiw	r30, 0x01	; 1
    87c2:	e8 83       	st	Y, r30
    87c4:	f9 83       	std	Y+1, r31	; 0x01
    87c6:	0e c0       	rjmp	.+28     	; 0x87e4 <fgetc+0x62>
    87c8:	ea 85       	ldd	r30, Y+10	; 0x0a
    87ca:	fb 85       	ldd	r31, Y+11	; 0x0b
    87cc:	09 95       	icall
    87ce:	97 ff       	sbrs	r25, 7
    87d0:	09 c0       	rjmp	.+18     	; 0x87e4 <fgetc+0x62>
    87d2:	2b 81       	ldd	r18, Y+3	; 0x03
    87d4:	01 96       	adiw	r24, 0x01	; 1
    87d6:	11 f4       	brne	.+4      	; 0x87dc <fgetc+0x5a>
    87d8:	80 e1       	ldi	r24, 0x10	; 16
    87da:	01 c0       	rjmp	.+2      	; 0x87de <fgetc+0x5c>
    87dc:	80 e2       	ldi	r24, 0x20	; 32
    87de:	82 2b       	or	r24, r18
    87e0:	8b 83       	std	Y+3, r24	; 0x03
    87e2:	08 c0       	rjmp	.+16     	; 0x87f4 <fgetc+0x72>
    87e4:	2e 81       	ldd	r18, Y+6	; 0x06
    87e6:	3f 81       	ldd	r19, Y+7	; 0x07
    87e8:	2f 5f       	subi	r18, 0xFF	; 255
    87ea:	3f 4f       	sbci	r19, 0xFF	; 255
    87ec:	2e 83       	std	Y+6, r18	; 0x06
    87ee:	3f 83       	std	Y+7, r19	; 0x07
    87f0:	99 27       	eor	r25, r25
    87f2:	02 c0       	rjmp	.+4      	; 0x87f8 <fgetc+0x76>
    87f4:	8f ef       	ldi	r24, 0xFF	; 255
    87f6:	9f ef       	ldi	r25, 0xFF	; 255
    87f8:	df 91       	pop	r29
    87fa:	cf 91       	pop	r28
    87fc:	08 95       	ret

000087fe <fputc>:
    87fe:	0f 93       	push	r16
    8800:	1f 93       	push	r17
    8802:	cf 93       	push	r28
    8804:	df 93       	push	r29
    8806:	18 2f       	mov	r17, r24
    8808:	09 2f       	mov	r16, r25
    880a:	eb 01       	movw	r28, r22
    880c:	8b 81       	ldd	r24, Y+3	; 0x03
    880e:	81 fd       	sbrc	r24, 1
    8810:	03 c0       	rjmp	.+6      	; 0x8818 <fputc+0x1a>
    8812:	8f ef       	ldi	r24, 0xFF	; 255
    8814:	9f ef       	ldi	r25, 0xFF	; 255
    8816:	20 c0       	rjmp	.+64     	; 0x8858 <fputc+0x5a>
    8818:	82 ff       	sbrs	r24, 2
    881a:	10 c0       	rjmp	.+32     	; 0x883c <fputc+0x3e>
    881c:	4e 81       	ldd	r20, Y+6	; 0x06
    881e:	5f 81       	ldd	r21, Y+7	; 0x07
    8820:	2c 81       	ldd	r18, Y+4	; 0x04
    8822:	3d 81       	ldd	r19, Y+5	; 0x05
    8824:	42 17       	cp	r20, r18
    8826:	53 07       	cpc	r21, r19
    8828:	7c f4       	brge	.+30     	; 0x8848 <fputc+0x4a>
    882a:	e8 81       	ld	r30, Y
    882c:	f9 81       	ldd	r31, Y+1	; 0x01
    882e:	9f 01       	movw	r18, r30
    8830:	2f 5f       	subi	r18, 0xFF	; 255
    8832:	3f 4f       	sbci	r19, 0xFF	; 255
    8834:	28 83       	st	Y, r18
    8836:	39 83       	std	Y+1, r19	; 0x01
    8838:	10 83       	st	Z, r17
    883a:	06 c0       	rjmp	.+12     	; 0x8848 <fputc+0x4a>
    883c:	e8 85       	ldd	r30, Y+8	; 0x08
    883e:	f9 85       	ldd	r31, Y+9	; 0x09
    8840:	81 2f       	mov	r24, r17
    8842:	09 95       	icall
    8844:	89 2b       	or	r24, r25
    8846:	29 f7       	brne	.-54     	; 0x8812 <fputc+0x14>
    8848:	2e 81       	ldd	r18, Y+6	; 0x06
    884a:	3f 81       	ldd	r19, Y+7	; 0x07
    884c:	2f 5f       	subi	r18, 0xFF	; 255
    884e:	3f 4f       	sbci	r19, 0xFF	; 255
    8850:	2e 83       	std	Y+6, r18	; 0x06
    8852:	3f 83       	std	Y+7, r19	; 0x07
    8854:	81 2f       	mov	r24, r17
    8856:	90 2f       	mov	r25, r16
    8858:	df 91       	pop	r29
    885a:	cf 91       	pop	r28
    885c:	1f 91       	pop	r17
    885e:	0f 91       	pop	r16
    8860:	08 95       	ret

00008862 <ungetc>:
    8862:	fb 01       	movw	r30, r22
    8864:	23 81       	ldd	r18, Z+3	; 0x03
    8866:	20 ff       	sbrs	r18, 0
    8868:	12 c0       	rjmp	.+36     	; 0x888e <ungetc+0x2c>
    886a:	26 fd       	sbrc	r18, 6
    886c:	10 c0       	rjmp	.+32     	; 0x888e <ungetc+0x2c>
    886e:	8f 3f       	cpi	r24, 0xFF	; 255
    8870:	3f ef       	ldi	r19, 0xFF	; 255
    8872:	93 07       	cpc	r25, r19
    8874:	61 f0       	breq	.+24     	; 0x888e <ungetc+0x2c>
    8876:	82 83       	std	Z+2, r24	; 0x02
    8878:	2f 7d       	andi	r18, 0xDF	; 223
    887a:	20 64       	ori	r18, 0x40	; 64
    887c:	23 83       	std	Z+3, r18	; 0x03
    887e:	26 81       	ldd	r18, Z+6	; 0x06
    8880:	37 81       	ldd	r19, Z+7	; 0x07
    8882:	21 50       	subi	r18, 0x01	; 1
    8884:	31 09       	sbc	r19, r1
    8886:	26 83       	std	Z+6, r18	; 0x06
    8888:	37 83       	std	Z+7, r19	; 0x07
    888a:	99 27       	eor	r25, r25
    888c:	08 95       	ret
    888e:	8f ef       	ldi	r24, 0xFF	; 255
    8890:	9f ef       	ldi	r25, 0xFF	; 255
    8892:	08 95       	ret

00008894 <__ultoa_invert>:
    8894:	fa 01       	movw	r30, r20
    8896:	aa 27       	eor	r26, r26
    8898:	28 30       	cpi	r18, 0x08	; 8
    889a:	51 f1       	breq	.+84     	; 0x88f0 <__ultoa_invert+0x5c>
    889c:	20 31       	cpi	r18, 0x10	; 16
    889e:	81 f1       	breq	.+96     	; 0x8900 <__ultoa_invert+0x6c>
    88a0:	e8 94       	clt
    88a2:	6f 93       	push	r22
    88a4:	6e 7f       	andi	r22, 0xFE	; 254
    88a6:	6e 5f       	subi	r22, 0xFE	; 254
    88a8:	7f 4f       	sbci	r23, 0xFF	; 255
    88aa:	8f 4f       	sbci	r24, 0xFF	; 255
    88ac:	9f 4f       	sbci	r25, 0xFF	; 255
    88ae:	af 4f       	sbci	r26, 0xFF	; 255
    88b0:	b1 e0       	ldi	r27, 0x01	; 1
    88b2:	3e d0       	rcall	.+124    	; 0x8930 <__ultoa_invert+0x9c>
    88b4:	b4 e0       	ldi	r27, 0x04	; 4
    88b6:	3c d0       	rcall	.+120    	; 0x8930 <__ultoa_invert+0x9c>
    88b8:	67 0f       	add	r22, r23
    88ba:	78 1f       	adc	r23, r24
    88bc:	89 1f       	adc	r24, r25
    88be:	9a 1f       	adc	r25, r26
    88c0:	a1 1d       	adc	r26, r1
    88c2:	68 0f       	add	r22, r24
    88c4:	79 1f       	adc	r23, r25
    88c6:	8a 1f       	adc	r24, r26
    88c8:	91 1d       	adc	r25, r1
    88ca:	a1 1d       	adc	r26, r1
    88cc:	6a 0f       	add	r22, r26
    88ce:	71 1d       	adc	r23, r1
    88d0:	81 1d       	adc	r24, r1
    88d2:	91 1d       	adc	r25, r1
    88d4:	a1 1d       	adc	r26, r1
    88d6:	20 d0       	rcall	.+64     	; 0x8918 <__ultoa_invert+0x84>
    88d8:	09 f4       	brne	.+2      	; 0x88dc <__ultoa_invert+0x48>
    88da:	68 94       	set
    88dc:	3f 91       	pop	r19
    88de:	2a e0       	ldi	r18, 0x0A	; 10
    88e0:	26 9f       	mul	r18, r22
    88e2:	11 24       	eor	r1, r1
    88e4:	30 19       	sub	r19, r0
    88e6:	30 5d       	subi	r19, 0xD0	; 208
    88e8:	31 93       	st	Z+, r19
    88ea:	de f6       	brtc	.-74     	; 0x88a2 <__ultoa_invert+0xe>
    88ec:	cf 01       	movw	r24, r30
    88ee:	08 95       	ret
    88f0:	46 2f       	mov	r20, r22
    88f2:	47 70       	andi	r20, 0x07	; 7
    88f4:	40 5d       	subi	r20, 0xD0	; 208
    88f6:	41 93       	st	Z+, r20
    88f8:	b3 e0       	ldi	r27, 0x03	; 3
    88fa:	0f d0       	rcall	.+30     	; 0x891a <__ultoa_invert+0x86>
    88fc:	c9 f7       	brne	.-14     	; 0x88f0 <__ultoa_invert+0x5c>
    88fe:	f6 cf       	rjmp	.-20     	; 0x88ec <__ultoa_invert+0x58>
    8900:	46 2f       	mov	r20, r22
    8902:	4f 70       	andi	r20, 0x0F	; 15
    8904:	40 5d       	subi	r20, 0xD0	; 208
    8906:	4a 33       	cpi	r20, 0x3A	; 58
    8908:	18 f0       	brcs	.+6      	; 0x8910 <__ultoa_invert+0x7c>
    890a:	49 5d       	subi	r20, 0xD9	; 217
    890c:	31 fd       	sbrc	r19, 1
    890e:	40 52       	subi	r20, 0x20	; 32
    8910:	41 93       	st	Z+, r20
    8912:	02 d0       	rcall	.+4      	; 0x8918 <__ultoa_invert+0x84>
    8914:	a9 f7       	brne	.-22     	; 0x8900 <__ultoa_invert+0x6c>
    8916:	ea cf       	rjmp	.-44     	; 0x88ec <__ultoa_invert+0x58>
    8918:	b4 e0       	ldi	r27, 0x04	; 4
    891a:	a6 95       	lsr	r26
    891c:	97 95       	ror	r25
    891e:	87 95       	ror	r24
    8920:	77 95       	ror	r23
    8922:	67 95       	ror	r22
    8924:	ba 95       	dec	r27
    8926:	c9 f7       	brne	.-14     	; 0x891a <__ultoa_invert+0x86>
    8928:	00 97       	sbiw	r24, 0x00	; 0
    892a:	61 05       	cpc	r22, r1
    892c:	71 05       	cpc	r23, r1
    892e:	08 95       	ret
    8930:	9b 01       	movw	r18, r22
    8932:	ac 01       	movw	r20, r24
    8934:	0a 2e       	mov	r0, r26
    8936:	06 94       	lsr	r0
    8938:	57 95       	ror	r21
    893a:	47 95       	ror	r20
    893c:	37 95       	ror	r19
    893e:	27 95       	ror	r18
    8940:	ba 95       	dec	r27
    8942:	c9 f7       	brne	.-14     	; 0x8936 <__ultoa_invert+0xa2>
    8944:	62 0f       	add	r22, r18
    8946:	73 1f       	adc	r23, r19
    8948:	84 1f       	adc	r24, r20
    894a:	95 1f       	adc	r25, r21
    894c:	a0 1d       	adc	r26, r0
    894e:	08 95       	ret

00008950 <_exit>:
    8950:	f8 94       	cli

00008952 <__stop_program>:
    8952:	ff cf       	rjmp	.-2      	; 0x8952 <__stop_program>
