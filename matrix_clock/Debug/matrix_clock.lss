
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000814  00802000  000036fc  00003790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001bb  00802814  00802814  00003fa4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003fa4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000918  00000000  00000000  00004000  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00013dfd  00000000  00000000  00004918  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002efe  00000000  00000000  00018715  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000087c5  00000000  00000000  0001b613  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000243c  00000000  00000000  00023dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003b0f  00000000  00000000  00026214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000faeb  00000000  00000000  00029d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000988  00000000  00000000  0003980e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c6       	rjmp	.+3318   	; 0xcf8 <__ctors_end>
       2:	00 00       	nop
       4:	98 c6       	rjmp	.+3376   	; 0xd36 <__bad_interrupt>
       6:	00 00       	nop
       8:	96 c6       	rjmp	.+3372   	; 0xd36 <__bad_interrupt>
       a:	00 00       	nop
       c:	94 c6       	rjmp	.+3368   	; 0xd36 <__bad_interrupt>
       e:	00 00       	nop
      10:	92 c6       	rjmp	.+3364   	; 0xd36 <__bad_interrupt>
      12:	00 00       	nop
      14:	90 c6       	rjmp	.+3360   	; 0xd36 <__bad_interrupt>
      16:	00 00       	nop
      18:	8e c6       	rjmp	.+3356   	; 0xd36 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8c c6       	rjmp	.+3352   	; 0xd36 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8a c6       	rjmp	.+3348   	; 0xd36 <__bad_interrupt>
      22:	00 00       	nop
      24:	88 c6       	rjmp	.+3344   	; 0xd36 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__vector_10>
      2c:	84 c6       	rjmp	.+3336   	; 0xd36 <__bad_interrupt>
      2e:	00 00       	nop
      30:	82 c6       	rjmp	.+3332   	; 0xd36 <__bad_interrupt>
      32:	00 00       	nop
      34:	80 c6       	rjmp	.+3328   	; 0xd36 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 7b 16 	jmp	0x2cf6	; 0x2cf6 <__vector_14>
      3c:	7c c6       	rjmp	.+3320   	; 0xd36 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7a c6       	rjmp	.+3316   	; 0xd36 <__bad_interrupt>
      42:	00 00       	nop
      44:	78 c6       	rjmp	.+3312   	; 0xd36 <__bad_interrupt>
      46:	00 00       	nop
      48:	76 c6       	rjmp	.+3308   	; 0xd36 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	74 c6       	rjmp	.+3304   	; 0xd36 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__vector_20>
      54:	70 c6       	rjmp	.+3296   	; 0xd36 <__bad_interrupt>
      56:	00 00       	nop
      58:	6e c6       	rjmp	.+3292   	; 0xd36 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6c c6       	rjmp	.+3288   	; 0xd36 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6a c6       	rjmp	.+3284   	; 0xd36 <__bad_interrupt>
      62:	00 00       	nop
      64:	68 c6       	rjmp	.+3280   	; 0xd36 <__bad_interrupt>
      66:	00 00       	nop
      68:	66 c6       	rjmp	.+3276   	; 0xd36 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	64 c6       	rjmp	.+3272   	; 0xd36 <__bad_interrupt>
      6e:	00 00       	nop
      70:	62 c6       	rjmp	.+3268   	; 0xd36 <__bad_interrupt>
      72:	00 00       	nop
      74:	60 c6       	rjmp	.+3264   	; 0xd36 <__bad_interrupt>
      76:	00 00       	nop
      78:	5e c6       	rjmp	.+3260   	; 0xd36 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5c c6       	rjmp	.+3256   	; 0xd36 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5a c6       	rjmp	.+3252   	; 0xd36 <__bad_interrupt>
      82:	00 00       	nop
      84:	58 c6       	rjmp	.+3248   	; 0xd36 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__vector_34>
      8c:	54 c6       	rjmp	.+3240   	; 0xd36 <__bad_interrupt>
      8e:	00 00       	nop
      90:	52 c6       	rjmp	.+3236   	; 0xd36 <__bad_interrupt>
      92:	00 00       	nop
      94:	50 c6       	rjmp	.+3232   	; 0xd36 <__bad_interrupt>
      96:	00 00       	nop
      98:	4e c6       	rjmp	.+3228   	; 0xd36 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4c c6       	rjmp	.+3224   	; 0xd36 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4a c6       	rjmp	.+3220   	; 0xd36 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	48 c6       	rjmp	.+3216   	; 0xd36 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	46 c6       	rjmp	.+3212   	; 0xd36 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	44 c6       	rjmp	.+3208   	; 0xd36 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	42 c6       	rjmp	.+3204   	; 0xd36 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	40 c6       	rjmp	.+3200   	; 0xd36 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3e c6       	rjmp	.+3196   	; 0xd36 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3c c6       	rjmp	.+3192   	; 0xd36 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3a c6       	rjmp	.+3188   	; 0xd36 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	38 c6       	rjmp	.+3184   	; 0xd36 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	36 c6       	rjmp	.+3180   	; 0xd36 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	34 c6       	rjmp	.+3176   	; 0xd36 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	32 c6       	rjmp	.+3172   	; 0xd36 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	30 c6       	rjmp	.+3168   	; 0xd36 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2e c6       	rjmp	.+3164   	; 0xd36 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2c c6       	rjmp	.+3160   	; 0xd36 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2a c6       	rjmp	.+3156   	; 0xd36 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	28 c6       	rjmp	.+3152   	; 0xd36 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	26 c6       	rjmp	.+3148   	; 0xd36 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	24 c6       	rjmp	.+3144   	; 0xd36 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	22 c6       	rjmp	.+3140   	; 0xd36 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	20 c6       	rjmp	.+3136   	; 0xd36 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	1e c6       	rjmp	.+3132   	; 0xd36 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	1c c6       	rjmp	.+3128   	; 0xd36 <__bad_interrupt>
      fe:	00 00       	nop
     100:	1a c6       	rjmp	.+3124   	; 0xd36 <__bad_interrupt>
     102:	00 00       	nop
     104:	18 c6       	rjmp	.+3120   	; 0xd36 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__vector_66>
     10c:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_67>
     110:	12 c6       	rjmp	.+3108   	; 0xd36 <__bad_interrupt>
     112:	00 00       	nop
     114:	10 c6       	rjmp	.+3104   	; 0xd36 <__bad_interrupt>
     116:	00 00       	nop
     118:	0e c6       	rjmp	.+3100   	; 0xd36 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c c6       	rjmp	.+3096   	; 0xd36 <__bad_interrupt>
     11e:	00 00       	nop
     120:	0a c6       	rjmp	.+3092   	; 0xd36 <__bad_interrupt>
     122:	00 00       	nop
     124:	08 c6       	rjmp	.+3088   	; 0xd36 <__bad_interrupt>
     126:	00 00       	nop
     128:	06 c6       	rjmp	.+3084   	; 0xd36 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	04 c6       	rjmp	.+3080   	; 0xd36 <__bad_interrupt>
     12e:	00 00       	nop
     130:	02 c6       	rjmp	.+3076   	; 0xd36 <__bad_interrupt>
     132:	00 00       	nop
     134:	00 c6       	rjmp	.+3072   	; 0xd36 <__bad_interrupt>
     136:	00 00       	nop
     138:	fe c5       	rjmp	.+3068   	; 0xd36 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	fc c5       	rjmp	.+3064   	; 0xd36 <__bad_interrupt>
     13e:	00 00       	nop
     140:	fa c5       	rjmp	.+3060   	; 0xd36 <__bad_interrupt>
     142:	00 00       	nop
     144:	f8 c5       	rjmp	.+3056   	; 0xd36 <__bad_interrupt>
     146:	00 00       	nop
     148:	f6 c5       	rjmp	.+3052   	; 0xd36 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	f4 c5       	rjmp	.+3048   	; 0xd36 <__bad_interrupt>
     14e:	00 00       	nop
     150:	f2 c5       	rjmp	.+3044   	; 0xd36 <__bad_interrupt>
     152:	00 00       	nop
     154:	f0 c5       	rjmp	.+3040   	; 0xd36 <__bad_interrupt>
     156:	00 00       	nop
     158:	ee c5       	rjmp	.+3036   	; 0xd36 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	ec c5       	rjmp	.+3032   	; 0xd36 <__bad_interrupt>
     15e:	00 00       	nop
     160:	fe c5       	rjmp	.+3068   	; 0xd5e <__vector_88>
     162:	00 00       	nop
     164:	e8 c5       	rjmp	.+3024   	; 0xd36 <__bad_interrupt>
     166:	00 00       	nop
     168:	e6 c5       	rjmp	.+3020   	; 0xd36 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	e4 c5       	rjmp	.+3016   	; 0xd36 <__bad_interrupt>
     16e:	00 00       	nop
     170:	e2 c5       	rjmp	.+3012   	; 0xd36 <__bad_interrupt>
     172:	00 00       	nop
     174:	e0 c5       	rjmp	.+3008   	; 0xd36 <__bad_interrupt>
     176:	00 00       	nop
     178:	de c5       	rjmp	.+3004   	; 0xd36 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	dc c5       	rjmp	.+3000   	; 0xd36 <__bad_interrupt>
     17e:	00 00       	nop
     180:	da c5       	rjmp	.+2996   	; 0xd36 <__bad_interrupt>
     182:	00 00       	nop
     184:	d8 c5       	rjmp	.+2992   	; 0xd36 <__bad_interrupt>
     186:	00 00       	nop
     188:	d6 c5       	rjmp	.+2988   	; 0xd36 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d4 c5       	rjmp	.+2984   	; 0xd36 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d2 c5       	rjmp	.+2980   	; 0xd36 <__bad_interrupt>
     192:	00 00       	nop
     194:	d0 c5       	rjmp	.+2976   	; 0xd36 <__bad_interrupt>
     196:	00 00       	nop
     198:	ce c5       	rjmp	.+2972   	; 0xd36 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	cc c5       	rjmp	.+2968   	; 0xd36 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ca c5       	rjmp	.+2964   	; 0xd36 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	c8 c5       	rjmp	.+2960   	; 0xd36 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	c6 c5       	rjmp	.+2956   	; 0xd36 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c4 c5       	rjmp	.+2952   	; 0xd36 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	c2 c5       	rjmp	.+2948   	; 0xd36 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c0 c5       	rjmp	.+2944   	; 0xd36 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	be c5       	rjmp	.+2940   	; 0xd36 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	bc c5       	rjmp	.+2936   	; 0xd36 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	ba c5       	rjmp	.+2932   	; 0xd36 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	b8 c5       	rjmp	.+2928   	; 0xd36 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	b6 c5       	rjmp	.+2924   	; 0xd36 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b4 c5       	rjmp	.+2920   	; 0xd36 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b2 c5       	rjmp	.+2916   	; 0xd36 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b0 c5       	rjmp	.+2912   	; 0xd36 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	ae c5       	rjmp	.+2908   	; 0xd36 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	ac c5       	rjmp	.+2904   	; 0xd36 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	aa c5       	rjmp	.+2900   	; 0xd36 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	a8 c5       	rjmp	.+2896   	; 0xd36 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	a6 c5       	rjmp	.+2892   	; 0xd36 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a4 c5       	rjmp	.+2888   	; 0xd36 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a2 c5       	rjmp	.+2884   	; 0xd36 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a0 c5       	rjmp	.+2880   	; 0xd36 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	9e c5       	rjmp	.+2876   	; 0xd36 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	20 50       	subi	r18, 0x00	; 0
     204:	70 50       	subi	r23, 0x00	; 0
     206:	20 00       	.word	0x0020	; ????
     208:	20 70       	andi	r18, 0x00	; 0
     20a:	50 70       	andi	r21, 0x00	; 0
     20c:	20 00       	.word	0x0020	; ????
     20e:	00 50       	subi	r16, 0x00	; 0
     210:	70 70       	andi	r23, 0x00	; 0
     212:	20 00       	.word	0x0020	; ????
     214:	00 20       	and	r0, r0
     216:	70 70       	andi	r23, 0x00	; 0
     218:	20 00       	.word	0x0020	; ????
     21a:	20 70       	andi	r18, 0x00	; 0
     21c:	70 20       	and	r7, r0
     21e:	70 00       	.word	0x0070	; ????
     220:	20 20       	and	r2, r0
     222:	70 20       	and	r7, r0
     224:	70 00       	.word	0x0070	; ????
     226:	00 00       	nop
     228:	20 00       	.word	0x0020	; ????
     22a:	00 00       	nop
     22c:	f0 f0       	brcs	.+60     	; 0x26a <__trampolines_end+0x6e>
     22e:	d0 f0       	brcs	.+52     	; 0x264 <__trampolines_end+0x68>
     230:	f0 f0       	brcs	.+60     	; 0x26e <__trampolines_end+0x72>
     232:	00 70       	andi	r16, 0x00	; 0
     234:	50 70       	andi	r21, 0x00	; 0
     236:	00 00       	nop
     238:	f0 80       	ld	r15, Z
     23a:	a0 80       	ld	r10, Z
     23c:	f0 f0       	brcs	.+60     	; 0x27a <__trampolines_end+0x7e>
     23e:	00 30       	cpi	r16, 0x00	; 0
     240:	10 60       	ori	r17, 0x00	; 0
     242:	60 00       	.word	0x0060	; ????
     244:	20 50       	subi	r18, 0x00	; 0
     246:	20 70       	andi	r18, 0x00	; 0
     248:	20 00       	.word	0x0020	; ????
     24a:	20 30       	cpi	r18, 0x00	; 0
     24c:	20 20       	and	r2, r0
     24e:	60 00       	.word	0x0060	; ????
     250:	20 30       	cpi	r18, 0x00	; 0
     252:	50 10       	cpse	r5, r0
     254:	20 00       	.word	0x0020	; ????
     256:	20 70       	andi	r18, 0x00	; 0
     258:	50 70       	andi	r21, 0x00	; 0
     25a:	20 00       	.word	0x0020	; ????
     25c:	40 60       	ori	r20, 0x00	; 0
     25e:	70 60       	ori	r23, 0x00	; 0
     260:	40 00       	.word	0x0040	; ????
     262:	10 30       	cpi	r17, 0x00	; 0
     264:	70 30       	cpi	r23, 0x00	; 0
     266:	10 00       	.word	0x0010	; ????
     268:	20 70       	andi	r18, 0x00	; 0
     26a:	20 70       	andi	r18, 0x00	; 0
     26c:	20 00       	.word	0x0020	; ????
     26e:	50 50       	subi	r21, 0x00	; 0
     270:	50 00       	.word	0x0050	; ????
     272:	50 00       	.word	0x0050	; ????
     274:	70 d0       	rcall	.+224    	; 0x356 <__trampolines_end+0x15a>
     276:	d0 50       	subi	r29, 0x00	; 0
     278:	50 00       	.word	0x0050	; ????
     27a:	30 60       	ori	r19, 0x00	; 0
     27c:	50 30       	cpi	r21, 0x00	; 0
     27e:	60 00       	.word	0x0060	; ????
     280:	00 00       	nop
     282:	00 00       	nop
     284:	70 00       	.word	0x0070	; ????
     286:	20 70       	andi	r18, 0x00	; 0
     288:	20 70       	andi	r18, 0x00	; 0
     28a:	20 70       	andi	r18, 0x00	; 0
     28c:	20 70       	andi	r18, 0x00	; 0
     28e:	20 20       	and	r2, r0
     290:	20 00       	.word	0x0020	; ????
     292:	20 20       	and	r2, r0
     294:	20 70       	andi	r18, 0x00	; 0
     296:	20 00       	.word	0x0020	; ????
     298:	00 20       	and	r0, r0
     29a:	f0 20       	and	r15, r0
     29c:	00 00       	nop
     29e:	00 40       	sbci	r16, 0x00	; 0
     2a0:	f0 40       	sbci	r31, 0x00	; 0
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	40 70       	andi	r20, 0x00	; 0
     2a8:	00 00       	nop
     2aa:	00 50       	subi	r16, 0x00	; 0
     2ac:	70 50       	subi	r23, 0x00	; 0
     2ae:	00 00       	nop
     2b0:	00 20       	and	r0, r0
     2b2:	70 70       	andi	r23, 0x00	; 0
     2b4:	00 00       	nop
     2b6:	00 70       	andi	r16, 0x00	; 0
     2b8:	70 20       	and	r7, r0
	...
     2c2:	20 20       	and	r2, r0
     2c4:	20 00       	.word	0x0020	; ????
     2c6:	20 00       	.word	0x0020	; ????
     2c8:	50 50       	subi	r21, 0x00	; 0
     2ca:	00 00       	nop
     2cc:	00 00       	nop
     2ce:	50 70       	andi	r21, 0x00	; 0
     2d0:	50 70       	andi	r21, 0x00	; 0
     2d2:	50 00       	.word	0x0050	; ????
     2d4:	20 30       	cpi	r18, 0x00	; 0
     2d6:	60 30       	cpi	r22, 0x00	; 0
     2d8:	60 20       	and	r6, r0
     2da:	40 10       	cpse	r4, r0
     2dc:	20 40       	sbci	r18, 0x00	; 0
     2de:	10 00       	.word	0x0010	; ????
     2e0:	20 50       	subi	r18, 0x00	; 0
     2e2:	30 50       	subi	r19, 0x00	; 0
     2e4:	70 00       	.word	0x0070	; ????
     2e6:	60 40       	sbci	r22, 0x00	; 0
     2e8:	00 00       	nop
     2ea:	00 00       	nop
     2ec:	20 40       	sbci	r18, 0x00	; 0
     2ee:	40 40       	sbci	r20, 0x00	; 0
     2f0:	20 00       	.word	0x0020	; ????
     2f2:	40 20       	and	r4, r0
     2f4:	20 20       	and	r2, r0
     2f6:	40 00       	.word	0x0040	; ????
     2f8:	50 20       	and	r5, r0
     2fa:	70 20       	and	r7, r0
     2fc:	50 00       	.word	0x0050	; ????
     2fe:	00 20       	and	r0, r0
     300:	70 20       	and	r7, r0
     302:	00 00       	nop
     304:	00 00       	nop
     306:	00 00       	nop
     308:	60 40       	sbci	r22, 0x00	; 0
     30a:	00 00       	nop
     30c:	70 00       	.word	0x0070	; ????
     30e:	00 00       	nop
     310:	00 00       	nop
     312:	00 00       	nop
     314:	20 00       	.word	0x0020	; ????
     316:	10 10       	cpse	r1, r0
     318:	20 40       	sbci	r18, 0x00	; 0
     31a:	40 00       	.word	0x0040	; ????
     31c:	20 50       	subi	r18, 0x00	; 0
     31e:	50 50       	subi	r21, 0x00	; 0
     320:	20 00       	.word	0x0020	; ????
     322:	20 60       	ori	r18, 0x00	; 0
     324:	20 20       	and	r2, r0
     326:	70 00       	.word	0x0070	; ????
     328:	60 10       	cpse	r6, r0
     32a:	20 40       	sbci	r18, 0x00	; 0
     32c:	70 00       	.word	0x0070	; ????
     32e:	60 10       	cpse	r6, r0
     330:	20 10       	cpse	r2, r0
     332:	60 00       	.word	0x0060	; ????
     334:	10 50       	subi	r17, 0x00	; 0
     336:	70 10       	cpse	r7, r0
     338:	10 00       	.word	0x0010	; ????
     33a:	70 40       	sbci	r23, 0x00	; 0
     33c:	60 10       	cpse	r6, r0
     33e:	60 00       	.word	0x0060	; ????
     340:	20 40       	sbci	r18, 0x00	; 0
     342:	60 50       	subi	r22, 0x00	; 0
     344:	20 00       	.word	0x0020	; ????
     346:	70 10       	cpse	r7, r0
     348:	30 20       	and	r3, r0
     34a:	20 00       	.word	0x0020	; ????
     34c:	20 50       	subi	r18, 0x00	; 0
     34e:	20 50       	subi	r18, 0x00	; 0
     350:	20 00       	.word	0x0020	; ????
     352:	20 50       	subi	r18, 0x00	; 0
     354:	30 10       	cpse	r3, r0
     356:	20 00       	.word	0x0020	; ????
     358:	00 00       	nop
     35a:	20 00       	.word	0x0020	; ????
     35c:	20 00       	.word	0x0020	; ????
     35e:	00 00       	nop
     360:	20 00       	.word	0x0020	; ????
     362:	60 40       	sbci	r22, 0x00	; 0
     364:	10 20       	and	r1, r0
     366:	40 20       	and	r4, r0
     368:	10 00       	.word	0x0010	; ????
     36a:	00 00       	nop
     36c:	70 00       	.word	0x0070	; ????
     36e:	70 00       	.word	0x0070	; ????
     370:	40 20       	and	r4, r0
     372:	10 20       	and	r1, r0
     374:	40 00       	.word	0x0040	; ????
     376:	60 10       	cpse	r6, r0
     378:	20 00       	.word	0x0020	; ????
     37a:	20 00       	.word	0x0020	; ????
     37c:	70 50       	subi	r23, 0x00	; 0
     37e:	50 40       	sbci	r21, 0x00	; 0
     380:	70 00       	.word	0x0070	; ????
     382:	20 50       	subi	r18, 0x00	; 0
     384:	70 50       	subi	r23, 0x00	; 0
     386:	50 00       	.word	0x0050	; ????
     388:	60 50       	subi	r22, 0x00	; 0
     38a:	60 50       	subi	r22, 0x00	; 0
     38c:	60 00       	.word	0x0060	; ????
     38e:	30 40       	sbci	r19, 0x00	; 0
     390:	40 40       	sbci	r20, 0x00	; 0
     392:	30 00       	.word	0x0030	; ????
     394:	60 50       	subi	r22, 0x00	; 0
     396:	50 50       	subi	r21, 0x00	; 0
     398:	60 00       	.word	0x0060	; ????
     39a:	70 40       	sbci	r23, 0x00	; 0
     39c:	60 40       	sbci	r22, 0x00	; 0
     39e:	70 00       	.word	0x0070	; ????
     3a0:	70 40       	sbci	r23, 0x00	; 0
     3a2:	60 40       	sbci	r22, 0x00	; 0
     3a4:	40 00       	.word	0x0040	; ????
     3a6:	30 40       	sbci	r19, 0x00	; 0
     3a8:	50 50       	subi	r21, 0x00	; 0
     3aa:	30 00       	.word	0x0030	; ????
     3ac:	50 50       	subi	r21, 0x00	; 0
     3ae:	70 50       	subi	r23, 0x00	; 0
     3b0:	50 00       	.word	0x0050	; ????
     3b2:	70 20       	and	r7, r0
     3b4:	20 20       	and	r2, r0
     3b6:	70 00       	.word	0x0070	; ????
     3b8:	10 10       	cpse	r1, r0
     3ba:	10 50       	subi	r17, 0x00	; 0
     3bc:	20 00       	.word	0x0020	; ????
     3be:	50 50       	subi	r21, 0x00	; 0
     3c0:	60 50       	subi	r22, 0x00	; 0
     3c2:	50 00       	.word	0x0050	; ????
     3c4:	40 40       	sbci	r20, 0x00	; 0
     3c6:	40 40       	sbci	r20, 0x00	; 0
     3c8:	70 00       	.word	0x0070	; ????
     3ca:	50 70       	andi	r21, 0x00	; 0
     3cc:	70 50       	subi	r23, 0x00	; 0
     3ce:	50 00       	.word	0x0050	; ????
     3d0:	60 50       	subi	r22, 0x00	; 0
     3d2:	50 50       	subi	r21, 0x00	; 0
     3d4:	50 00       	.word	0x0050	; ????
     3d6:	70 50       	subi	r23, 0x00	; 0
     3d8:	50 50       	subi	r21, 0x00	; 0
     3da:	70 00       	.word	0x0070	; ????
     3dc:	60 50       	subi	r22, 0x00	; 0
     3de:	60 40       	sbci	r22, 0x00	; 0
     3e0:	40 00       	.word	0x0040	; ????
     3e2:	20 50       	subi	r18, 0x00	; 0
     3e4:	50 70       	andi	r21, 0x00	; 0
     3e6:	30 00       	.word	0x0030	; ????
     3e8:	60 50       	subi	r22, 0x00	; 0
     3ea:	60 50       	subi	r22, 0x00	; 0
     3ec:	50 00       	.word	0x0050	; ????
     3ee:	30 40       	sbci	r19, 0x00	; 0
     3f0:	70 10       	cpse	r7, r0
     3f2:	60 00       	.word	0x0060	; ????
     3f4:	70 20       	and	r7, r0
     3f6:	20 20       	and	r2, r0
     3f8:	20 00       	.word	0x0020	; ????
     3fa:	50 50       	subi	r21, 0x00	; 0
     3fc:	50 50       	subi	r21, 0x00	; 0
     3fe:	70 00       	.word	0x0070	; ????
     400:	50 50       	subi	r21, 0x00	; 0
     402:	50 50       	subi	r21, 0x00	; 0
     404:	20 00       	.word	0x0020	; ????
     406:	50 50       	subi	r21, 0x00	; 0
     408:	70 70       	andi	r23, 0x00	; 0
     40a:	50 00       	.word	0x0050	; ????
     40c:	50 50       	subi	r21, 0x00	; 0
     40e:	20 50       	subi	r18, 0x00	; 0
     410:	50 00       	.word	0x0050	; ????
     412:	50 50       	subi	r21, 0x00	; 0
     414:	20 20       	and	r2, r0
     416:	20 00       	.word	0x0020	; ????
     418:	70 10       	cpse	r7, r0
     41a:	20 40       	sbci	r18, 0x00	; 0
     41c:	70 00       	.word	0x0070	; ????
     41e:	60 40       	sbci	r22, 0x00	; 0
     420:	40 40       	sbci	r20, 0x00	; 0
     422:	60 00       	.word	0x0060	; ????
     424:	40 40       	sbci	r20, 0x00	; 0
     426:	20 10       	cpse	r2, r0
     428:	10 00       	.word	0x0010	; ????
     42a:	60 20       	and	r6, r0
     42c:	20 20       	and	r2, r0
     42e:	60 00       	.word	0x0060	; ????
     430:	20 50       	subi	r18, 0x00	; 0
	...
     43a:	00 f0       	brcs	.+0      	; 0x43c <__trampolines_end+0x240>
     43c:	60 20       	and	r6, r0
     43e:	00 00       	nop
     440:	00 00       	nop
     442:	00 00       	nop
     444:	30 50       	subi	r19, 0x00	; 0
     446:	70 00       	.word	0x0070	; ????
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	60 50       	subi	r22, 0x00	; 0
     44c:	60 00       	.word	0x0060	; ????
     44e:	00 00       	nop
     450:	30 40       	sbci	r19, 0x00	; 0
     452:	30 00       	.word	0x0030	; ????
     454:	10 10       	cpse	r1, r0
     456:	30 50       	subi	r19, 0x00	; 0
     458:	30 00       	.word	0x0030	; ????
     45a:	00 00       	nop
     45c:	70 60       	ori	r23, 0x00	; 0
     45e:	30 00       	.word	0x0030	; ????
     460:	10 20       	and	r1, r0
     462:	70 20       	and	r7, r0
     464:	20 00       	.word	0x0020	; ????
     466:	00 00       	nop
     468:	70 50       	subi	r23, 0x00	; 0
     46a:	10 70       	andi	r17, 0x00	; 0
     46c:	40 40       	sbci	r20, 0x00	; 0
     46e:	60 50       	subi	r22, 0x00	; 0
     470:	50 00       	.word	0x0050	; ????
     472:	20 00       	.word	0x0020	; ????
     474:	20 20       	and	r2, r0
     476:	20 00       	.word	0x0020	; ????
     478:	20 00       	.word	0x0020	; ????
     47a:	20 20       	and	r2, r0
     47c:	20 60       	ori	r18, 0x00	; 0
     47e:	40 40       	sbci	r20, 0x00	; 0
     480:	50 60       	ori	r21, 0x00	; 0
     482:	50 00       	.word	0x0050	; ????
     484:	20 20       	and	r2, r0
     486:	20 20       	and	r2, r0
     488:	20 00       	.word	0x0020	; ????
     48a:	00 00       	nop
     48c:	70 70       	andi	r23, 0x00	; 0
     48e:	50 00       	.word	0x0050	; ????
     490:	00 00       	nop
     492:	60 50       	subi	r22, 0x00	; 0
     494:	50 00       	.word	0x0050	; ????
     496:	00 00       	nop
     498:	20 50       	subi	r18, 0x00	; 0
     49a:	20 00       	.word	0x0020	; ????
     49c:	00 00       	nop
     49e:	60 50       	subi	r22, 0x00	; 0
     4a0:	60 40       	sbci	r22, 0x00	; 0
     4a2:	00 00       	nop
     4a4:	30 50       	subi	r19, 0x00	; 0
     4a6:	30 10       	cpse	r3, r0
     4a8:	00 00       	nop
     4aa:	60 40       	sbci	r22, 0x00	; 0
     4ac:	40 00       	.word	0x0040	; ????
     4ae:	00 00       	nop
     4b0:	30 20       	and	r3, r0
     4b2:	60 00       	.word	0x0060	; ????
     4b4:	00 20       	and	r0, r0
     4b6:	70 20       	and	r7, r0
     4b8:	30 00       	.word	0x0030	; ????
     4ba:	00 00       	nop
     4bc:	50 50       	subi	r21, 0x00	; 0
     4be:	70 00       	.word	0x0070	; ????
     4c0:	00 00       	nop
     4c2:	50 50       	subi	r21, 0x00	; 0
     4c4:	20 00       	.word	0x0020	; ????
     4c6:	00 00       	nop
     4c8:	50 70       	andi	r21, 0x00	; 0
     4ca:	70 00       	.word	0x0070	; ????
     4cc:	00 00       	nop
     4ce:	50 20       	and	r5, r0
     4d0:	50 00       	.word	0x0050	; ????
     4d2:	00 00       	nop
     4d4:	50 50       	subi	r21, 0x00	; 0
     4d6:	20 40       	sbci	r18, 0x00	; 0
     4d8:	00 00       	nop
     4da:	60 20       	and	r6, r0
     4dc:	30 00       	.word	0x0030	; ????
     4de:	30 20       	and	r3, r0
     4e0:	60 20       	and	r6, r0
     4e2:	30 00       	.word	0x0030	; ????
     4e4:	20 20       	and	r2, r0
     4e6:	20 20       	and	r2, r0
     4e8:	20 00       	.word	0x0020	; ????
     4ea:	60 20       	and	r6, r0
     4ec:	30 20       	and	r3, r0
     4ee:	60 00       	.word	0x0060	; ????
     4f0:	50 a0       	ldd	r5, Z+32	; 0x20
     4f2:	00 00       	nop
     4f4:	00 00       	nop
     4f6:	00 20       	and	r0, r0
     4f8:	50 70       	andi	r21, 0x00	; 0
     4fa:	00 00       	nop
     4fc:	30 40       	sbci	r19, 0x00	; 0
     4fe:	40 70       	andi	r20, 0x00	; 0
     500:	20 40       	sbci	r18, 0x00	; 0
     502:	50 00       	.word	0x0050	; ????
     504:	50 50       	subi	r21, 0x00	; 0
     506:	30 00       	.word	0x0030	; ????
     508:	10 20       	and	r1, r0
     50a:	70 60       	ori	r23, 0x00	; 0
     50c:	30 00       	.word	0x0030	; ????
     50e:	20 50       	subi	r18, 0x00	; 0
     510:	30 50       	subi	r19, 0x00	; 0
     512:	70 00       	.word	0x0070	; ????
     514:	50 00       	.word	0x0050	; ????
     516:	30 50       	subi	r19, 0x00	; 0
     518:	70 00       	.word	0x0070	; ????
     51a:	40 20       	and	r4, r0
     51c:	30 50       	subi	r19, 0x00	; 0
     51e:	70 00       	.word	0x0070	; ????
     520:	20 00       	.word	0x0020	; ????
     522:	30 50       	subi	r19, 0x00	; 0
     524:	70 00       	.word	0x0070	; ????
     526:	00 70       	andi	r16, 0x00	; 0
     528:	40 70       	andi	r20, 0x00	; 0
     52a:	20 60       	ori	r18, 0x00	; 0
     52c:	20 50       	subi	r18, 0x00	; 0
     52e:	70 60       	ori	r23, 0x00	; 0
     530:	30 00       	.word	0x0030	; ????
     532:	50 00       	.word	0x0050	; ????
     534:	70 60       	ori	r23, 0x00	; 0
     536:	30 00       	.word	0x0030	; ????
     538:	40 20       	and	r4, r0
     53a:	70 60       	ori	r23, 0x00	; 0
     53c:	30 00       	.word	0x0030	; ????
     53e:	50 00       	.word	0x0050	; ????
     540:	20 20       	and	r2, r0
     542:	20 00       	.word	0x0020	; ????
     544:	20 50       	subi	r18, 0x00	; 0
     546:	00 20       	and	r0, r0
     548:	20 00       	.word	0x0020	; ????
     54a:	40 20       	and	r4, r0
     54c:	00 20       	and	r0, r0
     54e:	20 00       	.word	0x0020	; ????
     550:	50 20       	and	r5, r0
     552:	50 70       	andi	r21, 0x00	; 0
     554:	50 00       	.word	0x0050	; ????
     556:	20 20       	and	r2, r0
     558:	50 70       	andi	r21, 0x00	; 0
     55a:	50 00       	.word	0x0050	; ????
     55c:	10 20       	and	r1, r0
     55e:	70 60       	ori	r23, 0x00	; 0
     560:	70 00       	.word	0x0070	; ????
     562:	00 00       	nop
     564:	30 70       	andi	r19, 0x00	; 0
     566:	60 00       	.word	0x0060	; ????
     568:	30 60       	ori	r19, 0x00	; 0
     56a:	70 60       	ori	r23, 0x00	; 0
     56c:	70 00       	.word	0x0070	; ????
     56e:	20 50       	subi	r18, 0x00	; 0
     570:	20 50       	subi	r18, 0x00	; 0
     572:	20 00       	.word	0x0020	; ????
     574:	50 00       	.word	0x0050	; ????
     576:	20 50       	subi	r18, 0x00	; 0
     578:	20 00       	.word	0x0020	; ????
     57a:	40 20       	and	r4, r0
     57c:	20 50       	subi	r18, 0x00	; 0
     57e:	20 00       	.word	0x0020	; ????
     580:	20 50       	subi	r18, 0x00	; 0
     582:	00 50       	subi	r16, 0x00	; 0
     584:	70 00       	.word	0x0070	; ????
     586:	40 20       	and	r4, r0
     588:	50 50       	subi	r21, 0x00	; 0
     58a:	70 00       	.word	0x0070	; ????
     58c:	50 00       	.word	0x0050	; ????
     58e:	50 50       	subi	r21, 0x00	; 0
     590:	20 40       	sbci	r18, 0x00	; 0
     592:	50 20       	and	r5, r0
     594:	50 50       	subi	r21, 0x00	; 0
     596:	20 00       	.word	0x0020	; ????
     598:	50 00       	.word	0x0050	; ????
     59a:	50 50       	subi	r21, 0x00	; 0
     59c:	70 00       	.word	0x0070	; ????
     59e:	20 70       	andi	r18, 0x00	; 0
     5a0:	40 70       	andi	r20, 0x00	; 0
     5a2:	20 00       	.word	0x0020	; ????
     5a4:	10 20       	and	r1, r0
     5a6:	70 20       	and	r7, r0
     5a8:	70 00       	.word	0x0070	; ????
     5aa:	50 70       	andi	r21, 0x00	; 0
     5ac:	20 70       	andi	r18, 0x00	; 0
     5ae:	20 00       	.word	0x0020	; ????
     5b0:	00 60       	ori	r16, 0x00	; 0
     5b2:	60 50       	subi	r22, 0x00	; 0
     5b4:	50 00       	.word	0x0050	; ????
     5b6:	30 20       	and	r3, r0
     5b8:	30 20       	and	r3, r0
     5ba:	60 00       	.word	0x0060	; ????
     5bc:	10 20       	and	r1, r0
     5be:	30 50       	subi	r19, 0x00	; 0
     5c0:	70 00       	.word	0x0070	; ????
     5c2:	10 20       	and	r1, r0
     5c4:	00 20       	and	r0, r0
     5c6:	20 00       	.word	0x0020	; ????
     5c8:	10 20       	and	r1, r0
     5ca:	70 50       	subi	r23, 0x00	; 0
     5cc:	70 00       	.word	0x0070	; ????
     5ce:	10 20       	and	r1, r0
     5d0:	00 50       	subi	r16, 0x00	; 0
     5d2:	70 00       	.word	0x0070	; ????
     5d4:	70 00       	.word	0x0070	; ????
     5d6:	70 50       	subi	r23, 0x00	; 0
     5d8:	50 00       	.word	0x0050	; ????
     5da:	70 00       	.word	0x0070	; ????
     5dc:	50 70       	andi	r21, 0x00	; 0
     5de:	50 00       	.word	0x0050	; ????
     5e0:	30 50       	subi	r19, 0x00	; 0
     5e2:	70 00       	.word	0x0070	; ????
     5e4:	70 00       	.word	0x0070	; ????
     5e6:	20 50       	subi	r18, 0x00	; 0
     5e8:	20 00       	.word	0x0020	; ????
     5ea:	70 00       	.word	0x0070	; ????
     5ec:	20 00       	.word	0x0020	; ????
     5ee:	20 40       	sbci	r18, 0x00	; 0
     5f0:	30 00       	.word	0x0030	; ????
     5f2:	00 70       	andi	r16, 0x00	; 0
     5f4:	40 40       	sbci	r20, 0x00	; 0
     5f6:	00 00       	nop
     5f8:	00 e0       	ldi	r16, 0x00	; 0
     5fa:	20 20       	and	r2, r0
     5fc:	00 00       	nop
     5fe:	40 50       	subi	r20, 0x00	; 0
     600:	20 50       	subi	r18, 0x00	; 0
     602:	30 00       	.word	0x0030	; ????
     604:	40 50       	subi	r20, 0x00	; 0
     606:	20 70       	andi	r18, 0x00	; 0
     608:	10 00       	.word	0x0010	; ????
     60a:	20 00       	.word	0x0020	; ????
     60c:	20 20       	and	r2, r0
     60e:	20 00       	.word	0x0020	; ????
     610:	00 50       	subi	r16, 0x00	; 0
     612:	a0 50       	subi	r26, 0x00	; 0
     614:	00 00       	nop
     616:	00 a0       	ldd	r0, Z+32	; 0x20
     618:	50 a0       	ldd	r5, Z+32	; 0x20
     61a:	00 00       	nop
     61c:	40 10       	cpse	r4, r0
     61e:	40 10       	cpse	r4, r0
     620:	40 10       	cpse	r4, r0
     622:	50 a0       	ldd	r5, Z+32	; 0x20
     624:	50 a0       	ldd	r5, Z+32	; 0x20
     626:	50 a0       	ldd	r5, Z+32	; 0x20
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	b0 e0       	ldi	r27, 0x00	; 0
     62e:	20 20       	and	r2, r0
     630:	20 20       	and	r2, r0
     632:	20 20       	and	r2, r0
     634:	20 20       	and	r2, r0
     636:	e0 20       	and	r14, r0
     638:	20 20       	and	r2, r0
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	20 20       	and	r2, r0
     640:	50 50       	subi	r21, 0x00	; 0
     642:	d0 50       	subi	r29, 0x00	; 0
     644:	50 50       	subi	r21, 0x00	; 0
     646:	00 00       	nop
     648:	f0 50       	subi	r31, 0x00	; 0
     64a:	50 50       	subi	r21, 0x00	; 0
     64c:	00 e0       	ldi	r16, 0x00	; 0
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	20 20       	and	r2, r0
     652:	50 d0       	rcall	.+160    	; 0x6f4 <__trampolines_end+0x4f8>
     654:	10 d0       	rcall	.+32     	; 0x676 <__trampolines_end+0x47a>
     656:	50 50       	subi	r21, 0x00	; 0
     658:	50 50       	subi	r21, 0x00	; 0
     65a:	50 50       	subi	r21, 0x00	; 0
     65c:	50 50       	subi	r21, 0x00	; 0
     65e:	00 f0       	brcs	.+0      	; 0x660 <__trampolines_end+0x464>
     660:	10 d0       	rcall	.+32     	; 0x682 <__trampolines_end+0x486>
     662:	50 50       	subi	r21, 0x00	; 0
     664:	50 d0       	rcall	.+160    	; 0x706 <__trampolines_end+0x50a>
     666:	10 f0       	brcs	.+4      	; 0x66c <__trampolines_end+0x470>
     668:	00 00       	nop
     66a:	50 50       	subi	r21, 0x00	; 0
     66c:	f0 00       	.word	0x00f0	; ????
     66e:	00 00       	nop
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	00 00       	nop
     676:	00 00       	nop
     678:	e0 20       	and	r14, r0
     67a:	20 20       	and	r2, r0
     67c:	20 20       	and	r2, r0
     67e:	30 00       	.word	0x0030	; ????
     680:	00 00       	nop
     682:	20 20       	and	r2, r0
     684:	f0 00       	.word	0x00f0	; ????
     686:	00 00       	nop
     688:	00 00       	nop
     68a:	f0 20       	and	r15, r0
     68c:	20 20       	and	r2, r0
     68e:	20 20       	and	r2, r0
     690:	30 20       	and	r3, r0
     692:	20 20       	and	r2, r0
     694:	00 00       	nop
     696:	f0 00       	.word	0x00f0	; ????
     698:	00 00       	nop
     69a:	20 20       	and	r2, r0
     69c:	f0 20       	and	r15, r0
     69e:	20 20       	and	r2, r0
     6a0:	20 30       	cpi	r18, 0x00	; 0
     6a2:	20 30       	cpi	r18, 0x00	; 0
     6a4:	20 20       	and	r2, r0
     6a6:	50 50       	subi	r21, 0x00	; 0
     6a8:	50 50       	subi	r21, 0x00	; 0
     6aa:	50 50       	subi	r21, 0x00	; 0
     6ac:	50 50       	subi	r21, 0x00	; 0
     6ae:	40 70       	andi	r20, 0x00	; 0
     6b0:	00 00       	nop
     6b2:	00 70       	andi	r16, 0x00	; 0
     6b4:	40 50       	subi	r20, 0x00	; 0
     6b6:	50 50       	subi	r21, 0x00	; 0
     6b8:	50 d0       	rcall	.+160    	; 0x75a <__trampolines_end+0x55e>
     6ba:	00 f0       	brcs	.+0      	; 0x6bc <__trampolines_end+0x4c0>
     6bc:	00 00       	nop
     6be:	00 f0       	brcs	.+0      	; 0x6c0 <__trampolines_end+0x4c4>
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <__trampolines_end+0x4c6>
     6c2:	50 50       	subi	r21, 0x00	; 0
     6c4:	50 50       	subi	r21, 0x00	; 0
     6c6:	40 50       	subi	r20, 0x00	; 0
     6c8:	50 50       	subi	r21, 0x00	; 0
     6ca:	00 f0       	brcs	.+0      	; 0x6cc <__trampolines_end+0x4d0>
     6cc:	00 f0       	brcs	.+0      	; 0x6ce <__trampolines_end+0x4d2>
     6ce:	00 00       	nop
     6d0:	50 d0       	rcall	.+160    	; 0x772 <__trampolines_end+0x576>
     6d2:	00 d0       	rcall	.+0      	; 0x6d4 <__trampolines_end+0x4d8>
     6d4:	50 50       	subi	r21, 0x00	; 0
     6d6:	20 f0       	brcs	.+8      	; 0x6e0 <__trampolines_end+0x4e4>
     6d8:	00 f0       	brcs	.+0      	; 0x6da <__trampolines_end+0x4de>
     6da:	00 00       	nop
     6dc:	50 50       	subi	r21, 0x00	; 0
     6de:	f0 00       	.word	0x00f0	; ????
     6e0:	00 00       	nop
     6e2:	00 f0       	brcs	.+0      	; 0x6e4 <__trampolines_end+0x4e8>
     6e4:	00 f0       	brcs	.+0      	; 0x6e6 <__trampolines_end+0x4ea>
     6e6:	20 20       	and	r2, r0
     6e8:	00 00       	nop
     6ea:	f0 50       	subi	r31, 0x00	; 0
     6ec:	50 50       	subi	r21, 0x00	; 0
     6ee:	50 50       	subi	r21, 0x00	; 0
     6f0:	70 00       	.word	0x0070	; ????
     6f2:	00 00       	nop
     6f4:	20 30       	cpi	r18, 0x00	; 0
     6f6:	20 30       	cpi	r18, 0x00	; 0
     6f8:	00 00       	nop
     6fa:	00 30       	cpi	r16, 0x00	; 0
     6fc:	20 30       	cpi	r18, 0x00	; 0
     6fe:	20 20       	and	r2, r0
     700:	00 00       	nop
     702:	70 50       	subi	r23, 0x00	; 0
     704:	50 50       	subi	r21, 0x00	; 0
     706:	50 50       	subi	r21, 0x00	; 0
     708:	d0 50       	subi	r29, 0x00	; 0
     70a:	50 50       	subi	r21, 0x00	; 0
     70c:	20 f0       	brcs	.+8      	; 0x716 <__trampolines_end+0x51a>
     70e:	00 f0       	brcs	.+0      	; 0x710 <__trampolines_end+0x514>
     710:	20 20       	and	r2, r0
     712:	20 20       	and	r2, r0
     714:	e0 00       	.word	0x00e0	; ????
     716:	00 00       	nop
     718:	00 00       	nop
     71a:	30 20       	and	r3, r0
     71c:	20 20       	and	r2, r0
     71e:	f0 f0       	brcs	.+60     	; 0x75c <__trampolines_end+0x560>
     720:	f0 f0       	brcs	.+60     	; 0x75e <__trampolines_end+0x562>
     722:	f0 f0       	brcs	.+60     	; 0x760 <__trampolines_end+0x564>
     724:	00 00       	nop
     726:	00 f0       	brcs	.+0      	; 0x728 <__trampolines_end+0x52c>
     728:	f0 f0       	brcs	.+60     	; 0x766 <__trampolines_end+0x56a>
     72a:	c0 c0       	rjmp	.+384    	; 0x8ac <font_5x7+0xb0>
     72c:	c0 c0       	rjmp	.+384    	; 0x8ae <font_5x7+0xb2>
     72e:	c0 c0       	rjmp	.+384    	; 0x8b0 <font_5x7+0xb4>
     730:	30 30       	cpi	r19, 0x00	; 0
     732:	30 30       	cpi	r19, 0x00	; 0
     734:	30 30       	cpi	r19, 0x00	; 0
     736:	f0 f0       	brcs	.+60     	; 0x774 <__trampolines_end+0x578>
     738:	f0 00       	.word	0x00f0	; ????
     73a:	00 00       	nop
     73c:	00 00       	nop
     73e:	70 60       	ori	r23, 0x00	; 0
     740:	70 00       	.word	0x0070	; ????
     742:	20 50       	subi	r18, 0x00	; 0
     744:	60 50       	subi	r22, 0x00	; 0
     746:	60 40       	sbci	r22, 0x00	; 0
     748:	70 50       	subi	r23, 0x00	; 0
     74a:	40 40       	sbci	r20, 0x00	; 0
     74c:	40 00       	.word	0x0040	; ????
     74e:	70 50       	subi	r23, 0x00	; 0
     750:	50 50       	subi	r21, 0x00	; 0
     752:	50 00       	.word	0x0050	; ????
     754:	70 40       	sbci	r23, 0x00	; 0
     756:	20 40       	sbci	r18, 0x00	; 0
     758:	70 00       	.word	0x0070	; ????
     75a:	00 00       	nop
     75c:	30 50       	subi	r19, 0x00	; 0
     75e:	20 00       	.word	0x0020	; ????
     760:	00 00       	nop
     762:	50 50       	subi	r21, 0x00	; 0
     764:	70 40       	sbci	r23, 0x00	; 0
     766:	00 10       	cpse	r0, r0
     768:	60 20       	and	r6, r0
     76a:	20 00       	.word	0x0020	; ????
     76c:	70 20       	and	r7, r0
     76e:	50 20       	and	r5, r0
     770:	70 00       	.word	0x0070	; ????
     772:	20 50       	subi	r18, 0x00	; 0
     774:	70 50       	subi	r23, 0x00	; 0
     776:	20 00       	.word	0x0020	; ????
     778:	00 20       	and	r0, r0
     77a:	50 50       	subi	r21, 0x00	; 0
     77c:	50 00       	.word	0x0050	; ????
     77e:	30 40       	sbci	r19, 0x00	; 0
     780:	20 50       	subi	r18, 0x00	; 0
     782:	20 00       	.word	0x0020	; ????
     784:	00 00       	nop
     786:	70 50       	subi	r23, 0x00	; 0
     788:	70 00       	.word	0x0070	; ????
     78a:	20 70       	andi	r18, 0x00	; 0
     78c:	50 70       	andi	r21, 0x00	; 0
     78e:	20 00       	.word	0x0020	; ????
     790:	30 40       	sbci	r19, 0x00	; 0
     792:	70 40       	sbci	r23, 0x00	; 0
     794:	30 00       	.word	0x0030	; ????
     796:	20 50       	subi	r18, 0x00	; 0
     798:	50 50       	subi	r21, 0x00	; 0
     79a:	50 00       	.word	0x0050	; ????
     79c:	70 00       	.word	0x0070	; ????
     79e:	70 00       	.word	0x0070	; ????
     7a0:	70 00       	.word	0x0070	; ????
     7a2:	20 70       	andi	r18, 0x00	; 0
     7a4:	20 00       	.word	0x0020	; ????
     7a6:	70 00       	.word	0x0070	; ????
     7a8:	60 10       	cpse	r6, r0
     7aa:	60 00       	.word	0x0060	; ????
     7ac:	70 00       	.word	0x0070	; ????
     7ae:	30 40       	sbci	r19, 0x00	; 0
     7b0:	30 00       	.word	0x0030	; ????
     7b2:	70 00       	.word	0x0070	; ????
     7b4:	00 10       	cpse	r0, r0
     7b6:	20 20       	and	r2, r0
     7b8:	20 20       	and	r2, r0
     7ba:	20 20       	and	r2, r0
     7bc:	20 20       	and	r2, r0
     7be:	40 00       	.word	0x0040	; ????
     7c0:	20 00       	.word	0x0020	; ????
     7c2:	70 00       	.word	0x0070	; ????
     7c4:	20 00       	.word	0x0020	; ????
     7c6:	00 50       	subi	r16, 0x00	; 0
     7c8:	a0 50       	subi	r26, 0x00	; 0
     7ca:	a0 00       	.word	0x00a0	; ????
     7cc:	20 50       	subi	r18, 0x00	; 0
     7ce:	20 00       	.word	0x0020	; ????
     7d0:	00 00       	nop
     7d2:	00 20       	and	r0, r0
     7d4:	70 20       	and	r7, r0
     7d6:	00 00       	nop
     7d8:	00 00       	nop
     7da:	20 00       	.word	0x0020	; ????
     7dc:	00 00       	nop
     7de:	30 20       	and	r3, r0
     7e0:	20 60       	ori	r18, 0x00	; 0
     7e2:	20 00       	.word	0x0020	; ????
     7e4:	70 50       	subi	r23, 0x00	; 0
     7e6:	50 00       	.word	0x0050	; ????
     7e8:	00 00       	nop
     7ea:	60 20       	and	r6, r0
     7ec:	40 60       	ori	r20, 0x00	; 0
     7ee:	00 00       	nop
     7f0:	00 00       	nop
     7f2:	60 60       	ori	r22, 0x00	; 0
	...

000007fc <font_5x7>:
     7fc:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     80c:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     81c:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     82c:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     83c:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     84c:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     85c:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     86c:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     87c:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     88c:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     89c:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     8ac:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     8bc:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     8cc:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     8dc:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     8ec:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     8fc:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     90c:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     91c:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     92c:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     93c:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     94c:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     95c:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     96c:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     97c:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     98c:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     99c:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     9ac:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     9bc:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     9cc:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     9dc:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     9ec:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     9fc:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     a0c:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     a1c:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     a2c:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     a3c:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     a4c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     a5c:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     a6c:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     a7c:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     a8c:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
     a9c:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     aac:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     abc:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
     acc:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     adc:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
     aec:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
     afc:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
     b0c:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     b1c:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     b2c:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     b3c:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     b4c:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     b5c:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     b6c:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     b7c:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     b8c:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     b9c:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     bac:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     bbc:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     bcc:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     bdc:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     bec:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     bfc:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     c0c:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     c1c:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     c2c:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     c3c:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     c4c:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     c5c:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
     c6c:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     c7c:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     c8c:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     c9c:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     cac:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     cbc:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     ccc:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     cdc:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     cec:	12 00 3c 3c 3c 3c 00 00 00 00 00 00                 ..<<<<......

00000cf8 <__ctors_end>:
     cf8:	11 24       	eor	r1, r1
     cfa:	1f be       	out	0x3f, r1	; 63
     cfc:	cf ef       	ldi	r28, 0xFF	; 255
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	df e2       	ldi	r29, 0x2F	; 47
     d02:	de bf       	out	0x3e, r29	; 62

00000d04 <__do_copy_data>:
     d04:	18 e2       	ldi	r17, 0x28	; 40
     d06:	a0 e0       	ldi	r26, 0x00	; 0
     d08:	b0 e2       	ldi	r27, 0x20	; 32
     d0a:	ec ef       	ldi	r30, 0xFC	; 252
     d0c:	f6 e3       	ldi	r31, 0x36	; 54
     d0e:	00 e0       	ldi	r16, 0x00	; 0
     d10:	0b bf       	out	0x3b, r16	; 59
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <__do_copy_data+0x14>
     d14:	07 90       	elpm	r0, Z+
     d16:	0d 92       	st	X+, r0
     d18:	a4 31       	cpi	r26, 0x14	; 20
     d1a:	b1 07       	cpc	r27, r17
     d1c:	d9 f7       	brne	.-10     	; 0xd14 <__do_copy_data+0x10>

00000d1e <__do_clear_bss>:
     d1e:	29 e2       	ldi	r18, 0x29	; 41
     d20:	a4 e1       	ldi	r26, 0x14	; 20
     d22:	b8 e2       	ldi	r27, 0x28	; 40
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <.do_clear_bss_start>

00000d26 <.do_clear_bss_loop>:
     d26:	1d 92       	st	X+, r1

00000d28 <.do_clear_bss_start>:
     d28:	af 3c       	cpi	r26, 0xCF	; 207
     d2a:	b2 07       	cpc	r27, r18
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <.do_clear_bss_loop>
     d2e:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <main>
     d32:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <_exit>

00000d36 <__bad_interrupt>:
     d36:	64 c9       	rjmp	.-3384   	; 0x0 <__vectors>

00000d38 <clock_setup_32_mhz>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
}

void clock_setup_32_mhz(void) {
	
	OSC.CTRL |= OSC_RC32MEN_bm;
     d38:	e0 e5       	ldi	r30, 0x50	; 80
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	82 60       	ori	r24, 0x02	; 2
     d40:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     d42:	81 81       	ldd	r24, Z+1	; 0x01
     d44:	81 ff       	sbrs	r24, 1
     d46:	fd cf       	rjmp	.-6      	; 0xd42 <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc;
     d48:	88 ed       	ldi	r24, 0xD8	; 216
     d4a:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 40 00 	sts	0x0040, r24
     d52:	08 95       	ret

00000d54 <esp8266_off>:
		_delay_ms(1000);
		at_cipsend(str);
		_delay_ms(10000);
		esp8266_send_cmd("AT+CIPCLOSE=0\r", 100);
	}
}
     d54:	80 e2       	ldi	r24, 0x20	; 32
     d56:	e0 e6       	ldi	r30, 0x60	; 96
     d58:	f6 e0       	ldi	r31, 0x06	; 6
     d5a:	86 83       	std	Z+6, r24	; 0x06
     d5c:	08 95       	ret

00000d5e <__vector_88>:

ISR(USARTD0_RXC_vect) {
     d5e:	1f 92       	push	r1
     d60:	0f 92       	push	r0
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	0b b6       	in	r0, 0x3b	; 59
     d6a:	0f 92       	push	r0
     d6c:	2f 93       	push	r18
     d6e:	3f 93       	push	r19
     d70:	4f 93       	push	r20
     d72:	5f 93       	push	r21
     d74:	6f 93       	push	r22
     d76:	7f 93       	push	r23
     d78:	8f 93       	push	r24
     d7a:	9f 93       	push	r25
     d7c:	af 93       	push	r26
     d7e:	bf 93       	push	r27
     d80:	ef 93       	push	r30
     d82:	ff 93       	push	r31
	
	char rx_temp = USARTD0.DATA;
     d84:	40 91 a0 09 	lds	r20, 0x09A0
	
	if (rx_temp == '\n') {
     d88:	4a 30       	cpi	r20, 0x0A	; 10
     d8a:	09 f0       	breq	.+2      	; 0xd8e <__vector_88+0x30>
     d8c:	70 c0       	rjmp	.+224    	; 0xe6e <__vector_88+0x110>
		if (strstr(rx_buffer,"OK")) {
     d8e:	67 e5       	ldi	r22, 0x57	; 87
     d90:	76 e2       	ldi	r23, 0x26	; 38
     d92:	84 e1       	ldi	r24, 0x14	; 20
     d94:	98 e2       	ldi	r25, 0x28	; 40
     d96:	0e 94 6e 18 	call	0x30dc	; 0x30dc <strstr>
     d9a:	89 2b       	or	r24, r25
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__vector_88+0x48>
			status = ESP8266_SUCCESS;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 76 29 	sts	0x2976, r24
     da4:	4c c0       	rjmp	.+152    	; 0xe3e <__vector_88+0xe0>
		} else if (strstr(rx_buffer,"ERROR")) {
     da6:	6a e5       	ldi	r22, 0x5A	; 90
     da8:	76 e2       	ldi	r23, 0x26	; 38
     daa:	84 e1       	ldi	r24, 0x14	; 20
     dac:	98 e2       	ldi	r25, 0x28	; 40
     dae:	0e 94 6e 18 	call	0x30dc	; 0x30dc <strstr>
     db2:	89 2b       	or	r24, r25
     db4:	19 f0       	breq	.+6      	; 0xdbc <__vector_88+0x5e>
			status = ESP8266_ERROR;
     db6:	10 92 76 29 	sts	0x2976, r1
     dba:	41 c0       	rjmp	.+130    	; 0xe3e <__vector_88+0xe0>
		} else if (strstr(rx_buffer,"CONNECT")) {
     dbc:	60 e6       	ldi	r22, 0x60	; 96
     dbe:	76 e2       	ldi	r23, 0x26	; 38
     dc0:	84 e1       	ldi	r24, 0x14	; 20
     dc2:	98 e2       	ldi	r25, 0x28	; 40
     dc4:	0e 94 6e 18 	call	0x30dc	; 0x30dc <strstr>
     dc8:	89 2b       	or	r24, r25
     dca:	21 f0       	breq	.+8      	; 0xdd4 <__vector_88+0x76>
			status = ESP8266_CONNECT;
     dcc:	83 e0       	ldi	r24, 0x03	; 3
     dce:	80 93 76 29 	sts	0x2976, r24
     dd2:	35 c0       	rjmp	.+106    	; 0xe3e <__vector_88+0xe0>
		} else if (strstr(rx_buffer,"CLOSED")) {
     dd4:	68 e6       	ldi	r22, 0x68	; 104
     dd6:	76 e2       	ldi	r23, 0x26	; 38
     dd8:	84 e1       	ldi	r24, 0x14	; 20
     dda:	98 e2       	ldi	r25, 0x28	; 40
     ddc:	0e 94 6e 18 	call	0x30dc	; 0x30dc <strstr>
     de0:	89 2b       	or	r24, r25
     de2:	21 f0       	breq	.+8      	; 0xdec <__vector_88+0x8e>
			status = ESP8266_CLOSED;
     de4:	85 e0       	ldi	r24, 0x05	; 5
     de6:	80 93 76 29 	sts	0x2976, r24
     dea:	29 c0       	rjmp	.+82     	; 0xe3e <__vector_88+0xe0>
		} else if (strstr(rx_buffer,"192")) {
     dec:	6f e6       	ldi	r22, 0x6F	; 111
     dee:	76 e2       	ldi	r23, 0x26	; 38
     df0:	84 e1       	ldi	r24, 0x14	; 20
     df2:	98 e2       	ldi	r25, 0x28	; 40
     df4:	0e 94 6e 18 	call	0x30dc	; 0x30dc <strstr>
     df8:	89 2b       	or	r24, r25
     dfa:	71 f0       	breq	.+28     	; 0xe18 <__vector_88+0xba>
			strncpy(ip_address,strchr(rx_buffer,'\"'),19);
     dfc:	62 e2       	ldi	r22, 0x22	; 34
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	84 e1       	ldi	r24, 0x14	; 20
     e02:	98 e2       	ldi	r25, 0x28	; 40
     e04:	0e 94 54 18 	call	0x30a8	; 0x30a8 <strchr>
     e08:	43 e1       	ldi	r20, 0x13	; 19
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	bc 01       	movw	r22, r24
     e0e:	81 e3       	ldi	r24, 0x31	; 49
     e10:	99 e2       	ldi	r25, 0x29	; 41
     e12:	0e 94 5f 18 	call	0x30be	; 0x30be <strncpy>
     e16:	13 c0       	rjmp	.+38     	; 0xe3e <__vector_88+0xe0>
		//This might be error prone...
		} else if (strstr(rx_buffer,"+IPD")) {
     e18:	63 e7       	ldi	r22, 0x73	; 115
     e1a:	76 e2       	ldi	r23, 0x26	; 38
     e1c:	84 e1       	ldi	r24, 0x14	; 20
     e1e:	98 e2       	ldi	r25, 0x28	; 40
     e20:	0e 94 6e 18 	call	0x30dc	; 0x30dc <strstr>
     e24:	89 2b       	or	r24, r25
     e26:	59 f0       	breq	.+22     	; 0xe3e <__vector_88+0xe0>
			got_reply = true;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 de 28 	sts	0x28DE, r24
			strncpy(telnet_cmd,rx_buffer,50);
     e2e:	42 e3       	ldi	r20, 0x32	; 50
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	64 e1       	ldi	r22, 0x14	; 20
     e34:	78 e2       	ldi	r23, 0x28	; 40
     e36:	84 e4       	ldi	r24, 0x44	; 68
     e38:	99 e2       	ldi	r25, 0x29	; 41
     e3a:	0e 94 5f 18 	call	0x30be	; 0x30be <strncpy>
		}
		
		if (strstr(rx_buffer,"{")) {
     e3e:	6b e7       	ldi	r22, 0x7B	; 123
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	84 e1       	ldi	r24, 0x14	; 20
     e44:	98 e2       	ldi	r25, 0x28	; 40
     e46:	0e 94 54 18 	call	0x30a8	; 0x30a8 <strchr>
     e4a:	89 2b       	or	r24, r25
     e4c:	21 f0       	breq	.+8      	; 0xe56 <__vector_88+0xf8>
			json_found = true;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 df 28 	sts	0x28DF, r24
     e54:	1b c0       	rjmp	.+54     	; 0xe8c <__vector_88+0x12e>
		} else {
			//Flush buffer
			rx_ptr = 0;
     e56:	10 92 dc 28 	sts	0x28DC, r1
     e5a:	10 92 dd 28 	sts	0x28DD, r1
			memset(rx_buffer, 0, RX_BUFFER);	
     e5e:	88 ec       	ldi	r24, 0xC8	; 200
     e60:	e4 e1       	ldi	r30, 0x14	; 20
     e62:	f8 e2       	ldi	r31, 0x28	; 40
     e64:	df 01       	movw	r26, r30
     e66:	1d 92       	st	X+, r1
     e68:	8a 95       	dec	r24
     e6a:	e9 f7       	brne	.-6      	; 0xe66 <__vector_88+0x108>
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <__vector_88+0x12e>
		}
	} else {
		rx_buffer[rx_ptr++] = rx_temp;
     e6e:	80 91 dc 28 	lds	r24, 0x28DC
     e72:	90 91 dd 28 	lds	r25, 0x28DD
     e76:	9c 01       	movw	r18, r24
     e78:	2f 5f       	subi	r18, 0xFF	; 255
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	20 93 dc 28 	sts	0x28DC, r18
     e80:	30 93 dd 28 	sts	0x28DD, r19
     e84:	fc 01       	movw	r30, r24
     e86:	ec 5e       	subi	r30, 0xEC	; 236
     e88:	f7 4d       	sbci	r31, 0xD7	; 215
     e8a:	40 83       	st	Z, r20
	}
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0b be       	out	0x3b, r0	; 59
     ea8:	0f 90       	pop	r0
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	0f 90       	pop	r0
     eae:	1f 90       	pop	r1
     eb0:	18 95       	reti

00000eb2 <ht1632c_draw_pixel>:
		ht1632c_draw_pixel(i,0,1);
		ht1632c_refresh_screen();
		delay_ms((WIDTH-i)*7);
	}
	ht1632c_clear_screen();
}
     eb2:	9c 01       	movw	r18, r24
     eb4:	80 31       	cpi	r24, 0x10	; 16
     eb6:	91 05       	cpc	r25, r1
     eb8:	0c f0       	brlt	.+2      	; 0xebc <ht1632c_draw_pixel+0xa>
     eba:	6a c0       	rjmp	.+212    	; 0xf90 <ht1632c_draw_pixel+0xde>
     ebc:	60 31       	cpi	r22, 0x10	; 16
     ebe:	71 05       	cpc	r23, r1
     ec0:	0c f0       	brlt	.+2      	; 0xec4 <ht1632c_draw_pixel+0x12>
     ec2:	66 c0       	rjmp	.+204    	; 0xf90 <ht1632c_draw_pixel+0xde>
     ec4:	8f e0       	ldi	r24, 0x0F	; 15
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	86 1b       	sub	r24, r22
     eca:	97 0b       	sbc	r25, r23
     ecc:	68 e1       	ldi	r22, 0x18	; 24
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <__divmodhi4>
     ed4:	88 30       	cpi	r24, 0x08	; 8
     ed6:	91 05       	cpc	r25, r1
     ed8:	34 f0       	brlt	.+12     	; 0xee6 <ht1632c_draw_pixel+0x34>
     eda:	80 31       	cpi	r24, 0x10	; 16
     edc:	91 05       	cpc	r25, r1
     ede:	34 f4       	brge	.+12     	; 0xeec <ht1632c_draw_pixel+0x3a>
     ee0:	67 e8       	ldi	r22, 0x87	; 135
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	05 c0       	rjmp	.+10     	; 0xef0 <ht1632c_draw_pixel+0x3e>
     ee6:	67 e0       	ldi	r22, 0x07	; 7
     ee8:	70 e0       	ldi	r23, 0x00	; 0
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <ht1632c_draw_pixel+0x3e>
     eec:	67 e0       	ldi	r22, 0x07	; 7
     eee:	71 e0       	ldi	r23, 0x01	; 1
     ef0:	87 70       	andi	r24, 0x07	; 7
     ef2:	90 78       	andi	r25, 0x80	; 128
     ef4:	99 23       	and	r25, r25
     ef6:	24 f4       	brge	.+8      	; 0xf00 <ht1632c_draw_pixel+0x4e>
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	88 6f       	ori	r24, 0xF8	; 248
     efc:	9f 6f       	ori	r25, 0xFF	; 255
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	fb 01       	movw	r30, r22
     f02:	e8 1b       	sub	r30, r24
     f04:	f9 0b       	sbc	r31, r25
     f06:	cf 01       	movw	r24, r30
     f08:	28 30       	cpi	r18, 0x08	; 8
     f0a:	31 05       	cpc	r19, r1
     f0c:	1c f4       	brge	.+6      	; 0xf14 <ht1632c_draw_pixel+0x62>
     f0e:	22 0f       	add	r18, r18
     f10:	33 1f       	adc	r19, r19
     f12:	04 c0       	rjmp	.+8      	; 0xf1c <ht1632c_draw_pixel+0x6a>
     f14:	22 0f       	add	r18, r18
     f16:	33 1f       	adc	r19, r19
     f18:	2f 50       	subi	r18, 0x0F	; 15
     f1a:	31 09       	sbc	r19, r1
     f1c:	22 0f       	add	r18, r18
     f1e:	33 1f       	adc	r19, r19
     f20:	22 0f       	add	r18, r18
     f22:	33 1f       	adc	r19, r19
     f24:	22 0f       	add	r18, r18
     f26:	33 1f       	adc	r19, r19
     f28:	28 0f       	add	r18, r24
     f2a:	39 1f       	adc	r19, r25
     f2c:	44 23       	and	r20, r20
     f2e:	c1 f0       	breq	.+48     	; 0xf60 <ht1632c_draw_pixel+0xae>
     f30:	f9 01       	movw	r30, r18
     f32:	f6 95       	lsr	r31
     f34:	e7 95       	ror	r30
     f36:	f6 95       	lsr	r31
     f38:	e7 95       	ror	r30
     f3a:	f6 95       	lsr	r31
     f3c:	e7 95       	ror	r30
     f3e:	e0 52       	subi	r30, 0x20	; 32
     f40:	f7 4d       	sbci	r31, 0xD7	; 215
     f42:	27 70       	andi	r18, 0x07	; 7
     f44:	33 27       	eor	r19, r19
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	ac 01       	movw	r20, r24
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <ht1632c_draw_pixel+0xa0>
     f4e:	44 0f       	add	r20, r20
     f50:	55 1f       	adc	r21, r21
     f52:	2a 95       	dec	r18
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <ht1632c_draw_pixel+0x9c>
     f56:	9a 01       	movw	r18, r20
     f58:	80 81       	ld	r24, Z
     f5a:	28 2b       	or	r18, r24
     f5c:	20 83       	st	Z, r18
     f5e:	08 95       	ret
     f60:	f9 01       	movw	r30, r18
     f62:	f6 95       	lsr	r31
     f64:	e7 95       	ror	r30
     f66:	f6 95       	lsr	r31
     f68:	e7 95       	ror	r30
     f6a:	f6 95       	lsr	r31
     f6c:	e7 95       	ror	r30
     f6e:	e0 52       	subi	r30, 0x20	; 32
     f70:	f7 4d       	sbci	r31, 0xD7	; 215
     f72:	27 70       	andi	r18, 0x07	; 7
     f74:	33 27       	eor	r19, r19
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	ac 01       	movw	r20, r24
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <ht1632c_draw_pixel+0xd0>
     f7e:	44 0f       	add	r20, r20
     f80:	55 1f       	adc	r21, r21
     f82:	2a 95       	dec	r18
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <ht1632c_draw_pixel+0xcc>
     f86:	9a 01       	movw	r18, r20
     f88:	20 95       	com	r18
     f8a:	80 81       	ld	r24, Z
     f8c:	28 23       	and	r18, r24
     f8e:	20 83       	st	Z, r18
     f90:	08 95       	ret

00000f92 <ht1632c_draw_filled_rect>:
     f92:	8f 92       	push	r8
     f94:	9f 92       	push	r9
     f96:	af 92       	push	r10
     f98:	bf 92       	push	r11
     f9a:	cf 92       	push	r12
     f9c:	df 92       	push	r13
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	98 2e       	mov	r9, r24
     fac:	c8 2f       	mov	r28, r24
     fae:	d0 e0       	ldi	r29, 0x00	; 0
     fb0:	5e 01       	movw	r10, r28
     fb2:	a4 0e       	add	r10, r20
     fb4:	b1 1c       	adc	r11, r1
     fb6:	ca 15       	cp	r28, r10
     fb8:	db 05       	cpc	r29, r11
     fba:	e4 f4       	brge	.+56     	; 0xff4 <ht1632c_draw_filled_rect+0x62>
     fbc:	c6 2e       	mov	r12, r22
     fbe:	d1 2c       	mov	r13, r1
     fc0:	76 01       	movw	r14, r12
     fc2:	e2 0e       	add	r14, r18
     fc4:	f1 1c       	adc	r15, r1
     fc6:	86 2e       	mov	r8, r22
     fc8:	0f c0       	rjmp	.+30     	; 0xfe8 <ht1632c_draw_filled_rect+0x56>
     fca:	40 2f       	mov	r20, r16
     fcc:	ce 01       	movw	r24, r28
     fce:	71 df       	rcall	.-286    	; 0xeb2 <ht1632c_draw_pixel>
     fd0:	1f 5f       	subi	r17, 0xFF	; 255
     fd2:	61 2f       	mov	r22, r17
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	6e 15       	cp	r22, r14
     fd8:	7f 05       	cpc	r23, r15
     fda:	bc f3       	brlt	.-18     	; 0xfca <ht1632c_draw_filled_rect+0x38>
     fdc:	93 94       	inc	r9
     fde:	c9 2d       	mov	r28, r9
     fe0:	d0 e0       	ldi	r29, 0x00	; 0
     fe2:	ca 15       	cp	r28, r10
     fe4:	db 05       	cpc	r29, r11
     fe6:	34 f4       	brge	.+12     	; 0xff4 <ht1632c_draw_filled_rect+0x62>
     fe8:	b6 01       	movw	r22, r12
     fea:	ce 14       	cp	r12, r14
     fec:	df 04       	cpc	r13, r15
     fee:	b4 f7       	brge	.-20     	; 0xfdc <ht1632c_draw_filled_rect+0x4a>
     ff0:	18 2d       	mov	r17, r8
     ff2:	eb cf       	rjmp	.-42     	; 0xfca <ht1632c_draw_filled_rect+0x38>
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	ff 90       	pop	r15
     ffe:	ef 90       	pop	r14
    1000:	df 90       	pop	r13
    1002:	cf 90       	pop	r12
    1004:	bf 90       	pop	r11
    1006:	af 90       	pop	r10
    1008:	9f 90       	pop	r9
    100a:	8f 90       	pop	r8
    100c:	08 95       	ret

0000100e <ht1632c_write_data>:
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	28 e0       	ldi	r18, 0x08	; 8
    1014:	e0 e8       	ldi	r30, 0x80	; 128
    1016:	f6 e0       	ldi	r31, 0x06	; 6
    1018:	21 83       	std	Z+1, r18	; 0x01
    101a:	66 23       	and	r22, r22
    101c:	c1 f0       	breq	.+48     	; 0x104e <ht1632c_write_data+0x40>
    101e:	74 e0       	ldi	r23, 0x04	; 4
    1020:	41 e0       	ldi	r20, 0x01	; 1
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	a8 e0       	ldi	r26, 0x08	; 8
    1026:	76 83       	std	Z+6, r23	; 0x06
    1028:	2f ef       	ldi	r18, 0xFF	; 255
    102a:	26 0f       	add	r18, r22
    102c:	ea 01       	movw	r28, r20
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <ht1632c_write_data+0x26>
    1030:	cc 0f       	add	r28, r28
    1032:	dd 1f       	adc	r29, r29
    1034:	2a 95       	dec	r18
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <ht1632c_write_data+0x22>
    1038:	9e 01       	movw	r18, r28
    103a:	28 23       	and	r18, r24
    103c:	39 23       	and	r19, r25
    103e:	23 2b       	or	r18, r19
    1040:	11 f0       	breq	.+4      	; 0x1046 <ht1632c_write_data+0x38>
    1042:	a5 83       	std	Z+5, r26	; 0x05
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <ht1632c_write_data+0x3a>
    1046:	a6 83       	std	Z+6, r26	; 0x06
    1048:	75 83       	std	Z+5, r23	; 0x05
    104a:	61 50       	subi	r22, 0x01	; 1
    104c:	61 f7       	brne	.-40     	; 0x1026 <ht1632c_write_data+0x18>
    104e:	88 e0       	ldi	r24, 0x08	; 8
    1050:	e0 e8       	ldi	r30, 0x80	; 128
    1052:	f6 e0       	ldi	r31, 0x06	; 6
    1054:	86 83       	std	Z+6, r24	; 0x06
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	08 95       	ret

0000105c <ht1632c_refresh_screen>:
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	e0 e8       	ldi	r30, 0x80	; 128
    1068:	f6 e0       	ldi	r31, 0x06	; 6
    106a:	86 83       	std	Z+6, r24	; 0x06
    106c:	63 e0       	ldi	r22, 0x03	; 3
    106e:	85 e0       	ldi	r24, 0x05	; 5
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	cd df       	rcall	.-102    	; 0x100e <ht1632c_write_data>
    1074:	67 e0       	ldi	r22, 0x07	; 7
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	c9 df       	rcall	.-110    	; 0x100e <ht1632c_write_data>
    107c:	c1 ee       	ldi	r28, 0xE1	; 225
    107e:	d8 e2       	ldi	r29, 0x28	; 40
    1080:	01 e0       	ldi	r16, 0x01	; 1
    1082:	19 e2       	ldi	r17, 0x29	; 41
    1084:	fe 01       	movw	r30, r28
    1086:	31 97       	sbiw	r30, 0x01	; 1
    1088:	80 81       	ld	r24, Z
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	98 2f       	mov	r25, r24
    108e:	88 27       	eor	r24, r24
    1090:	28 81       	ld	r18, Y
    1092:	60 e1       	ldi	r22, 0x10	; 16
    1094:	82 2b       	or	r24, r18
    1096:	bb df       	rcall	.-138    	; 0x100e <ht1632c_write_data>
    1098:	22 96       	adiw	r28, 0x02	; 2
    109a:	c0 17       	cp	r28, r16
    109c:	d1 07       	cpc	r29, r17
    109e:	91 f7       	brne	.-28     	; 0x1084 <ht1632c_refresh_screen+0x28>
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	e0 e8       	ldi	r30, 0x80	; 128
    10a4:	f6 e0       	ldi	r31, 0x06	; 6
    10a6:	85 83       	std	Z+5, r24	; 0x05
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	08 95       	ret

000010b2 <ht1632c_fill_screen>:
    10b2:	e0 ee       	ldi	r30, 0xE0	; 224
    10b4:	f8 e2       	ldi	r31, 0x28	; 40
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	99 e2       	ldi	r25, 0x29	; 41
    10ba:	2f ef       	ldi	r18, 0xFF	; 255
    10bc:	21 93       	st	Z+, r18
    10be:	e8 17       	cp	r30, r24
    10c0:	f9 07       	cpc	r31, r25
    10c2:	e1 f7       	brne	.-8      	; 0x10bc <ht1632c_fill_screen+0xa>
    10c4:	cb cf       	rjmp	.-106    	; 0x105c <ht1632c_refresh_screen>
    10c6:	08 95       	ret

000010c8 <ht1632c_clear_screen>:
    10c8:	e0 ee       	ldi	r30, 0xE0	; 224
    10ca:	f8 e2       	ldi	r31, 0x28	; 40
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	99 e2       	ldi	r25, 0x29	; 41
    10d0:	11 92       	st	Z+, r1
    10d2:	e8 17       	cp	r30, r24
    10d4:	f9 07       	cpc	r31, r25
    10d6:	e1 f7       	brne	.-8      	; 0x10d0 <ht1632c_clear_screen+0x8>
    10d8:	c1 cf       	rjmp	.-126    	; 0x105c <ht1632c_refresh_screen>
    10da:	08 95       	ret

000010dc <ht1632c_send_command>:
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	94 60       	ori	r25, 0x04	; 4
    10e6:	c0 e8       	ldi	r28, 0x80	; 128
    10e8:	d6 e0       	ldi	r29, 0x06	; 6
    10ea:	11 e0       	ldi	r17, 0x01	; 1
    10ec:	1e 83       	std	Y+6, r17	; 0x06
    10ee:	6c e0       	ldi	r22, 0x0C	; 12
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	8c df       	rcall	.-232    	; 0x100e <ht1632c_write_data>
    10f6:	1d 83       	std	Y+5, r17	; 0x05
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	08 95       	ret

00001100 <ht1632c_setup>:
    1100:	cf 93       	push	r28
    1102:	c8 2f       	mov	r28, r24
    1104:	e0 e8       	ldi	r30, 0x80	; 128
    1106:	f6 e0       	ldi	r31, 0x06	; 6
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	91 83       	std	Z+1, r25	; 0x01
    110c:	95 83       	std	Z+5, r25	; 0x05
    110e:	94 e0       	ldi	r25, 0x04	; 4
    1110:	91 83       	std	Z+1, r25	; 0x01
    1112:	95 83       	std	Z+5, r25	; 0x05
    1114:	88 e0       	ldi	r24, 0x08	; 8
    1116:	81 83       	std	Z+1, r24	; 0x01
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	e0 df       	rcall	.-64     	; 0x10dc <ht1632c_send_command>
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	de df       	rcall	.-68     	; 0x10dc <ht1632c_send_command>
    1120:	88 e0       	ldi	r24, 0x08	; 8
    1122:	dc df       	rcall	.-72     	; 0x10dc <ht1632c_send_command>
    1124:	84 e1       	ldi	r24, 0x14	; 20
    1126:	da df       	rcall	.-76     	; 0x10dc <ht1632c_send_command>
    1128:	88 e1       	ldi	r24, 0x18	; 24
    112a:	d8 df       	rcall	.-80     	; 0x10dc <ht1632c_send_command>
    112c:	8c 2f       	mov	r24, r28
    112e:	d6 df       	rcall	.-84     	; 0x10dc <ht1632c_send_command>
    1130:	81 ea       	ldi	r24, 0xA1	; 161
    1132:	d4 df       	rcall	.-88     	; 0x10dc <ht1632c_send_command>
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <ht1632c_set_brightness>:
    1138:	80 31       	cpi	r24, 0x10	; 16
    113a:	08 f0       	brcs	.+2      	; 0x113e <ht1632c_set_brightness+0x6>
    113c:	8f e0       	ldi	r24, 0x0F	; 15
    113e:	80 6a       	ori	r24, 0xA0	; 160
    1140:	cd cf       	rjmp	.-102    	; 0x10dc <ht1632c_send_command>
    1142:	08 95       	ret

00001144 <ht1632c_draw_char>:
    1144:	2f 92       	push	r2
    1146:	3f 92       	push	r3
    1148:	4f 92       	push	r4
    114a:	5f 92       	push	r5
    114c:	6f 92       	push	r6
    114e:	7f 92       	push	r7
    1150:	8f 92       	push	r8
    1152:	9f 92       	push	r9
    1154:	af 92       	push	r10
    1156:	bf 92       	push	r11
    1158:	cf 92       	push	r12
    115a:	df 92       	push	r13
    115c:	ef 92       	push	r14
    115e:	ff 92       	push	r15
    1160:	0f 93       	push	r16
    1162:	1f 93       	push	r17
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	00 d0       	rcall	.+0      	; 0x116a <ht1632c_draw_char+0x26>
    116a:	1f 92       	push	r1
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	22 2e       	mov	r2, r18
    1172:	40 2e       	mov	r4, r16
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	5a 01       	movw	r10, r20
    1178:	aa 0c       	add	r10, r10
    117a:	bb 1c       	adc	r11, r11
    117c:	aa 0c       	add	r10, r10
    117e:	bb 1c       	adc	r11, r11
    1180:	4a 0d       	add	r20, r10
    1182:	5b 1d       	adc	r21, r11
    1184:	9a 01       	movw	r18, r20
    1186:	24 50       	subi	r18, 0x04	; 4
    1188:	38 4f       	sbci	r19, 0xF8	; 248
    118a:	59 01       	movw	r10, r18
    118c:	c8 2e       	mov	r12, r24
    118e:	d9 2e       	mov	r13, r25
    1190:	38 2e       	mov	r3, r24
    1192:	36 01       	movw	r6, r12
    1194:	35 e0       	ldi	r19, 0x05	; 5
    1196:	63 0e       	add	r6, r19
    1198:	71 1c       	adc	r7, r1
    119a:	80 2f       	mov	r24, r16
    119c:	88 0f       	add	r24, r24
    119e:	88 0f       	add	r24, r24
    11a0:	88 0f       	add	r24, r24
    11a2:	80 1b       	sub	r24, r16
    11a4:	4b 01       	movw	r8, r22
    11a6:	96 e0       	ldi	r25, 0x06	; 6
    11a8:	89 0e       	add	r8, r25
    11aa:	91 1c       	adc	r9, r1
    11ac:	7b 01       	movw	r14, r22
    11ae:	e1 e0       	ldi	r30, 0x01	; 1
    11b0:	ee 1a       	sub	r14, r30
    11b2:	f1 08       	sbc	r15, r1
    11b4:	86 0f       	add	r24, r22
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	f5 01       	movw	r30, r10
    11ba:	14 91       	lpm	r17, Z
    11bc:	8a 82       	std	Y+2, r8	; 0x02
    11be:	9b 82       	std	Y+3, r9	; 0x03
    11c0:	59 80       	ldd	r5, Y+1	; 0x01
    11c2:	10 ff       	sbrs	r17, 0
    11c4:	11 c0       	rjmp	.+34     	; 0x11e8 <ht1632c_draw_char+0xa4>
    11c6:	f1 e0       	ldi	r31, 0x01	; 1
    11c8:	4f 12       	cpse	r4, r31
    11ca:	08 c0       	rjmp	.+16     	; 0x11dc <ht1632c_draw_char+0x98>
    11cc:	dd 20       	and	r13, r13
    11ce:	64 f0       	brlt	.+24     	; 0x11e8 <ht1632c_draw_char+0xa4>
    11d0:	42 2d       	mov	r20, r2
    11d2:	6a 81       	ldd	r22, Y+2	; 0x02
    11d4:	7b 81       	ldd	r23, Y+3	; 0x03
    11d6:	c6 01       	movw	r24, r12
    11d8:	6c de       	rcall	.-808    	; 0xeb2 <ht1632c_draw_pixel>
    11da:	06 c0       	rjmp	.+12     	; 0x11e8 <ht1632c_draw_char+0xa4>
    11dc:	02 2d       	mov	r16, r2
    11de:	24 2d       	mov	r18, r4
    11e0:	44 2d       	mov	r20, r4
    11e2:	65 2d       	mov	r22, r5
    11e4:	83 2d       	mov	r24, r3
    11e6:	d5 de       	rcall	.-598    	; 0xf92 <ht1632c_draw_filled_rect>
    11e8:	16 95       	lsr	r17
    11ea:	2a 81       	ldd	r18, Y+2	; 0x02
    11ec:	3b 81       	ldd	r19, Y+3	; 0x03
    11ee:	21 50       	subi	r18, 0x01	; 1
    11f0:	31 09       	sbc	r19, r1
    11f2:	2a 83       	std	Y+2, r18	; 0x02
    11f4:	3b 83       	std	Y+3, r19	; 0x03
    11f6:	54 18       	sub	r5, r4
    11f8:	2e 15       	cp	r18, r14
    11fa:	3f 05       	cpc	r19, r15
    11fc:	11 f7       	brne	.-60     	; 0x11c2 <ht1632c_draw_char+0x7e>
    11fe:	3f ef       	ldi	r19, 0xFF	; 255
    1200:	a3 1a       	sub	r10, r19
    1202:	b3 0a       	sbc	r11, r19
    1204:	8f ef       	ldi	r24, 0xFF	; 255
    1206:	c8 1a       	sub	r12, r24
    1208:	d8 0a       	sbc	r13, r24
    120a:	34 0c       	add	r3, r4
    120c:	c6 14       	cp	r12, r6
    120e:	d7 04       	cpc	r13, r7
    1210:	99 f6       	brne	.-90     	; 0x11b8 <ht1632c_draw_char+0x74>
    1212:	23 96       	adiw	r28, 0x03	; 3
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	bf 90       	pop	r11
    122a:	af 90       	pop	r10
    122c:	9f 90       	pop	r9
    122e:	8f 90       	pop	r8
    1230:	7f 90       	pop	r7
    1232:	6f 90       	pop	r6
    1234:	5f 90       	pop	r5
    1236:	4f 90       	pop	r4
    1238:	3f 90       	pop	r3
    123a:	2f 90       	pop	r2
    123c:	08 95       	ret

0000123e <ht1632c_draw_char_small>:
    123e:	2f 92       	push	r2
    1240:	3f 92       	push	r3
    1242:	4f 92       	push	r4
    1244:	5f 92       	push	r5
    1246:	6f 92       	push	r6
    1248:	7f 92       	push	r7
    124a:	8f 92       	push	r8
    124c:	9f 92       	push	r9
    124e:	af 92       	push	r10
    1250:	bf 92       	push	r11
    1252:	cf 92       	push	r12
    1254:	df 92       	push	r13
    1256:	ef 92       	push	r14
    1258:	ff 92       	push	r15
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	25 97       	sbiw	r28, 0x05	; 5
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	22 2e       	mov	r2, r18
    126e:	40 2e       	mov	r4, r16
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	3a 01       	movw	r6, r20
    1274:	66 0c       	add	r6, r6
    1276:	77 1c       	adc	r7, r7
    1278:	46 0d       	add	r20, r6
    127a:	57 1d       	adc	r21, r7
    127c:	44 0f       	add	r20, r20
    127e:	55 1f       	adc	r21, r21
    1280:	36 2e       	mov	r3, r22
    1282:	20 2f       	mov	r18, r16
    1284:	22 0f       	add	r18, r18
    1286:	22 0f       	add	r18, r18
    1288:	22 0f       	add	r18, r18
    128a:	20 1b       	sub	r18, r16
    128c:	c1 2c       	mov	r12, r1
    128e:	d1 2c       	mov	r13, r1
    1290:	fa 01       	movw	r30, r20
    1292:	e4 50       	subi	r30, 0x04	; 4
    1294:	fe 4f       	sbci	r31, 0xFE	; 254
    1296:	3f 01       	movw	r6, r30
    1298:	4c 01       	movw	r8, r24
    129a:	f5 e0       	ldi	r31, 0x05	; 5
    129c:	8f 0e       	add	r8, r31
    129e:	91 1c       	adc	r9, r1
    12a0:	7c 01       	movw	r14, r24
    12a2:	33 e0       	ldi	r19, 0x03	; 3
    12a4:	e3 1a       	sub	r14, r19
    12a6:	f1 08       	sbc	r15, r1
    12a8:	28 0f       	add	r18, r24
    12aa:	29 83       	std	Y+1, r18	; 0x01
    12ac:	cb 01       	movw	r24, r22
    12ae:	03 96       	adiw	r24, 0x03	; 3
    12b0:	8a 83       	std	Y+2, r24	; 0x02
    12b2:	9b 83       	std	Y+3, r25	; 0x03
    12b4:	f3 01       	movw	r30, r6
    12b6:	ec 0d       	add	r30, r12
    12b8:	fd 1d       	adc	r31, r13
    12ba:	14 91       	lpm	r17, Z
    12bc:	8c 82       	std	Y+4, r8	; 0x04
    12be:	9d 82       	std	Y+5, r9	; 0x05
    12c0:	59 80       	ldd	r5, Y+1	; 0x01
    12c2:	aa 80       	ldd	r10, Y+2	; 0x02
    12c4:	bb 80       	ldd	r11, Y+3	; 0x03
    12c6:	ac 18       	sub	r10, r12
    12c8:	bd 08       	sbc	r11, r13
    12ca:	10 ff       	sbrs	r17, 0
    12cc:	12 c0       	rjmp	.+36     	; 0x12f2 <ht1632c_draw_char_small+0xb4>
    12ce:	91 e0       	ldi	r25, 0x01	; 1
    12d0:	49 12       	cpse	r4, r25
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <ht1632c_draw_char_small+0xa8>
    12d4:	ec 81       	ldd	r30, Y+4	; 0x04
    12d6:	fd 81       	ldd	r31, Y+5	; 0x05
    12d8:	ff 23       	and	r31, r31
    12da:	5c f0       	brlt	.+22     	; 0x12f2 <ht1632c_draw_char_small+0xb4>
    12dc:	42 2d       	mov	r20, r2
    12de:	b5 01       	movw	r22, r10
    12e0:	cf 01       	movw	r24, r30
    12e2:	e7 dd       	rcall	.-1074   	; 0xeb2 <ht1632c_draw_pixel>
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <ht1632c_draw_char_small+0xb4>
    12e6:	02 2d       	mov	r16, r2
    12e8:	24 2d       	mov	r18, r4
    12ea:	44 2d       	mov	r20, r4
    12ec:	63 2d       	mov	r22, r3
    12ee:	85 2d       	mov	r24, r5
    12f0:	50 de       	rcall	.-864    	; 0xf92 <ht1632c_draw_filled_rect>
    12f2:	16 95       	lsr	r17
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	9d 81       	ldd	r25, Y+5	; 0x05
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	8c 83       	std	Y+4, r24	; 0x04
    12fc:	9d 83       	std	Y+5, r25	; 0x05
    12fe:	54 18       	sub	r5, r4
    1300:	8e 15       	cp	r24, r14
    1302:	9f 05       	cpc	r25, r15
    1304:	11 f7       	brne	.-60     	; 0x12ca <ht1632c_draw_char_small+0x8c>
    1306:	9f ef       	ldi	r25, 0xFF	; 255
    1308:	c9 1a       	sub	r12, r25
    130a:	d9 0a       	sbc	r13, r25
    130c:	34 18       	sub	r3, r4
    130e:	e6 e0       	ldi	r30, 0x06	; 6
    1310:	ce 16       	cp	r12, r30
    1312:	d1 04       	cpc	r13, r1
    1314:	79 f6       	brne	.-98     	; 0x12b4 <ht1632c_draw_char_small+0x76>
    1316:	25 96       	adiw	r28, 0x05	; 5
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	bf 90       	pop	r11
    132e:	af 90       	pop	r10
    1330:	9f 90       	pop	r9
    1332:	8f 90       	pop	r8
    1334:	7f 90       	pop	r7
    1336:	6f 90       	pop	r6
    1338:	5f 90       	pop	r5
    133a:	4f 90       	pop	r4
    133c:	3f 90       	pop	r3
    133e:	2f 90       	pop	r2
    1340:	08 95       	ret

00001342 <ht1632c_shift_left>:

void ht1632c_shift_left(void) {
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	32 e0       	ldi	r19, 0x02	; 2
    1348:	20 e0       	ldi	r18, 0x00	; 0
	
	int8_t i;
	
	for (i = 0; i <= 30; i += 2) {
		if (i == 14) {
			ledmatrix[14] = ledmatrix[1];
    134a:	ce ee       	ldi	r28, 0xEE	; 238
    134c:	d8 e2       	ldi	r29, 0x28	; 40
    134e:	a1 ee       	ldi	r26, 0xE1	; 225
    1350:	b8 e2       	ldi	r27, 0x28	; 40
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <ht1632c_shift_left+0x16>
    1354:	2e 5f       	subi	r18, 0xFE	; 254
    1356:	3e 5f       	subi	r19, 0xFE	; 254
    1358:	e2 2f       	mov	r30, r18
void ht1632c_shift_left(void) {
	
	int8_t i;
	
	for (i = 0; i <= 30; i += 2) {
		if (i == 14) {
    135a:	2e 30       	cpi	r18, 0x0E	; 14
    135c:	19 f4       	brne	.+6      	; 0x1364 <ht1632c_shift_left+0x22>
			ledmatrix[14] = ledmatrix[1];
    135e:	4c 91       	ld	r20, X
    1360:	48 83       	st	Y, r20
    1362:	f8 cf       	rjmp	.-16     	; 0x1354 <ht1632c_shift_left+0x12>
			} else if(i == 30) {
    1364:	2e 31       	cpi	r18, 0x1E	; 30
    1366:	29 f4       	brne	.+10     	; 0x1372 <ht1632c_shift_left+0x30>
			ledmatrix[30] = ledmatrix[17];
    1368:	80 91 f1 28 	lds	r24, 0x28F1
    136c:	80 93 fe 28 	sts	0x28FE, r24
    1370:	09 c0       	rjmp	.+18     	; 0x1384 <ht1632c_shift_left+0x42>
			} else {
			ledmatrix[i] = ledmatrix[i+2];
    1372:	ff 27       	eor	r31, r31
    1374:	e7 fd       	sbrc	r30, 7
    1376:	f0 95       	com	r31
    1378:	e0 52       	subi	r30, 0x20	; 32
    137a:	f7 4d       	sbci	r31, 0xD7	; 215
    137c:	42 81       	ldd	r20, Z+2	; 0x02
    137e:	40 83       	st	Z, r20

void ht1632c_shift_left(void) {
	
	int8_t i;
	
	for (i = 0; i <= 30; i += 2) {
    1380:	3f 31       	cpi	r19, 0x1F	; 31
    1382:	44 f3       	brlt	.-48     	; 0x1354 <ht1632c_shift_left+0x12>
		delay_ms((WIDTH-i)*7);
	}
	ht1632c_clear_screen();
}

void ht1632c_shift_left(void) {
    1384:	93 e0       	ldi	r25, 0x03	; 3
    1386:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
		if (i == 15) {
			ledmatrix[15] = 0;
    1388:	af ee       	ldi	r26, 0xEF	; 239
    138a:	b8 e2       	ldi	r27, 0x28	; 40
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <ht1632c_shift_left+0x50>
    138e:	8e 5f       	subi	r24, 0xFE	; 254
    1390:	9e 5f       	subi	r25, 0xFE	; 254
    1392:	e8 2f       	mov	r30, r24
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
		if (i == 15) {
    1394:	8f 30       	cpi	r24, 0x0F	; 15
    1396:	11 f4       	brne	.+4      	; 0x139c <ht1632c_shift_left+0x5a>
			ledmatrix[15] = 0;
    1398:	1c 92       	st	X, r1
    139a:	f9 cf       	rjmp	.-14     	; 0x138e <ht1632c_shift_left+0x4c>
		} else if (i == 31) {
    139c:	8f 31       	cpi	r24, 0x1F	; 31
    139e:	19 f4       	brne	.+6      	; 0x13a6 <ht1632c_shift_left+0x64>
			ledmatrix[31] = 0;
    13a0:	10 92 ff 28 	sts	0x28FF, r1
    13a4:	09 c0       	rjmp	.+18     	; 0x13b8 <ht1632c_shift_left+0x76>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    13a6:	ff 27       	eor	r31, r31
    13a8:	e7 fd       	sbrc	r30, 7
    13aa:	f0 95       	com	r31
    13ac:	e0 52       	subi	r30, 0x20	; 32
    13ae:	f7 4d       	sbci	r31, 0xD7	; 215
    13b0:	22 81       	ldd	r18, Z+2	; 0x02
    13b2:	20 83       	st	Z, r18
			} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
    13b4:	90 32       	cpi	r25, 0x20	; 32
    13b6:	5c f3       	brlt	.-42     	; 0x138e <ht1632c_shift_left+0x4c>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	ht1632c_refresh_screen();
    13b8:	51 de       	rcall	.-862    	; 0x105c <ht1632c_refresh_screen>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13ba:	2f ef       	ldi	r18, 0xFF	; 255
    13bc:	89 ef       	ldi	r24, 0xF9	; 249
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	21 50       	subi	r18, 0x01	; 1
    13c2:	80 40       	sbci	r24, 0x00	; 0
    13c4:	90 40       	sbci	r25, 0x00	; 0
    13c6:	e1 f7       	brne	.-8      	; 0x13c0 <ht1632c_shift_left+0x7e>
    13c8:	00 c0       	rjmp	.+0      	; 0x13ca <ht1632c_shift_left+0x88>
    13ca:	00 00       	nop
	_delay_ms(10);
}
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <ht1632c_slide_in_from_right>:
		ht1632c_shift_right();
	}
	
}

void ht1632c_slide_in_from_right(void) {
    13d2:	8f 92       	push	r8
    13d4:	9f 92       	push	r9
    13d6:	af 92       	push	r10
    13d8:	bf 92       	push	r11
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	a0 97       	sbiw	r28, 0x20	; 32
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	de bf       	out	0x3e, r29	; 62
	
	uint8_t temp[32];
	
	memset(temp,0,32);
    13f4:	20 e2       	ldi	r18, 0x20	; 32
    13f6:	ce 01       	movw	r24, r28
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	dc 01       	movw	r26, r24
    13fc:	e2 2f       	mov	r30, r18
    13fe:	1d 92       	st	X+, r1
    1400:	ea 95       	dec	r30
    1402:	e9 f7       	brne	.-6      	; 0x13fe <ht1632c_slide_in_from_right+0x2c>
	memcpy(temp,ledmatrix,32);
    1404:	30 e2       	ldi	r19, 0x20	; 32
    1406:	e0 ee       	ldi	r30, 0xE0	; 224
    1408:	f8 e2       	ldi	r31, 0x28	; 40
    140a:	dc 01       	movw	r26, r24
    140c:	01 90       	ld	r0, Z+
    140e:	0d 92       	st	X+, r0
    1410:	3a 95       	dec	r19
    1412:	e1 f7       	brne	.-8      	; 0x140c <ht1632c_slide_in_from_right+0x3a>
	memset(ledmatrix,0,32);
    1414:	e0 ee       	ldi	r30, 0xE0	; 224
    1416:	f8 e2       	ldi	r31, 0x28	; 40
    1418:	df 01       	movw	r26, r30
    141a:	1d 92       	st	X+, r1
    141c:	2a 95       	dec	r18
    141e:	e9 f7       	brne	.-6      	; 0x141a <ht1632c_slide_in_from_right+0x48>
    1420:	8e 01       	movw	r16, r28
    1422:	0f 5e       	subi	r16, 0xEF	; 239
    1424:	1f 4f       	sbci	r17, 0xFF	; 255
    1426:	5c 01       	movw	r10, r24
    1428:	4e 01       	movw	r8, r28
    142a:	b1 e2       	ldi	r27, 0x21	; 33
    142c:	8b 0e       	add	r8, r27
    142e:	91 1c       	adc	r9, r1
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
	{
		ledmatrix[15] = temp[i];
    1430:	0f 2e       	mov	r0, r31
    1432:	ff ee       	ldi	r31, 0xEF	; 239
    1434:	cf 2e       	mov	r12, r31
    1436:	f8 e2       	ldi	r31, 0x28	; 40
    1438:	df 2e       	mov	r13, r31
    143a:	f0 2d       	mov	r31, r0
		ledmatrix[31] = temp[i+16];
    143c:	0f 2e       	mov	r0, r31
    143e:	ff ef       	ldi	r31, 0xFF	; 255
    1440:	ef 2e       	mov	r14, r31
    1442:	f8 e2       	ldi	r31, 0x28	; 40
    1444:	ff 2e       	mov	r15, r31
    1446:	f0 2d       	mov	r31, r0
    1448:	f8 01       	movw	r30, r16
    144a:	70 97       	sbiw	r30, 0x10	; 16
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
	{
		ledmatrix[15] = temp[i];
    144c:	80 81       	ld	r24, Z
    144e:	f6 01       	movw	r30, r12
    1450:	80 83       	st	Z, r24
		ledmatrix[31] = temp[i+16];
    1452:	d8 01       	movw	r26, r16
    1454:	8c 91       	ld	r24, X
    1456:	f7 01       	movw	r30, r14
    1458:	80 83       	st	Z, r24
		ht1632c_shift_left();
    145a:	73 df       	rcall	.-282    	; 0x1342 <ht1632c_shift_left>
    145c:	0e 5f       	subi	r16, 0xFE	; 254
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
	memcpy(temp,ledmatrix,32);
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
    1460:	08 15       	cp	r16, r8
    1462:	19 05       	cpc	r17, r9
    1464:	89 f7       	brne	.-30     	; 0x1448 <ht1632c_slide_in_from_right+0x76>
    1466:	8e 01       	movw	r16, r28
    1468:	0e 5e       	subi	r16, 0xEE	; 238
    146a:	1f 4f       	sbci	r17, 0xFF	; 255
    146c:	ff e1       	ldi	r31, 0x1F	; 31
    146e:	af 0e       	add	r10, r31
    1470:	b1 1c       	adc	r11, r1
		ht1632c_shift_left();
	}
	
	for (i = 1; i <= 13; i += 2)
	{
		ledmatrix[15] = temp[i];
    1472:	0f 2e       	mov	r0, r31
    1474:	ff ee       	ldi	r31, 0xEF	; 239
    1476:	cf 2e       	mov	r12, r31
    1478:	f8 e2       	ldi	r31, 0x28	; 40
    147a:	df 2e       	mov	r13, r31
    147c:	f0 2d       	mov	r31, r0
		ledmatrix[31] = temp[i+16];
    147e:	0f 2e       	mov	r0, r31
    1480:	ff ef       	ldi	r31, 0xFF	; 255
    1482:	ef 2e       	mov	r14, r31
    1484:	f8 e2       	ldi	r31, 0x28	; 40
    1486:	ff 2e       	mov	r15, r31
    1488:	f0 2d       	mov	r31, r0
    148a:	f8 01       	movw	r30, r16
    148c:	70 97       	sbiw	r30, 0x10	; 16
		ht1632c_shift_left();
	}
	
	for (i = 1; i <= 13; i += 2)
	{
		ledmatrix[15] = temp[i];
    148e:	80 81       	ld	r24, Z
    1490:	d6 01       	movw	r26, r12
    1492:	8c 93       	st	X, r24
		ledmatrix[31] = temp[i+16];
    1494:	f8 01       	movw	r30, r16
    1496:	80 81       	ld	r24, Z
    1498:	d7 01       	movw	r26, r14
    149a:	8c 93       	st	X, r24
		ht1632c_shift_left();
    149c:	52 df       	rcall	.-348    	; 0x1342 <ht1632c_shift_left>
    149e:	0e 5f       	subi	r16, 0xFE	; 254
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
		ledmatrix[15] = temp[i];
		ledmatrix[31] = temp[i+16];
		ht1632c_shift_left();
	}
	
	for (i = 1; i <= 13; i += 2)
    14a2:	0a 15       	cp	r16, r10
    14a4:	1b 05       	cpc	r17, r11
    14a6:	89 f7       	brne	.-30     	; 0x148a <ht1632c_slide_in_from_right+0xb8>
		ledmatrix[15] = temp[i];
		ledmatrix[31] = temp[i+16];
		ht1632c_shift_left();
	}
	
}
    14a8:	a0 96       	adiw	r28, 0x20	; 32
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	1f 91       	pop	r17
    14b4:	0f 91       	pop	r16
    14b6:	ff 90       	pop	r15
    14b8:	ef 90       	pop	r14
    14ba:	df 90       	pop	r13
    14bc:	cf 90       	pop	r12
    14be:	bf 90       	pop	r11
    14c0:	af 90       	pop	r10
    14c2:	9f 90       	pop	r9
    14c4:	8f 90       	pop	r8
    14c6:	08 95       	ret

000014c8 <ht1632c_slide_out_to_left>:
	for (i = 0; i < 31; i++) {
		ht1632c_shift_right();
	}
}

void ht1632c_slide_out_to_left(void) {
    14c8:	cf 93       	push	r28
    14ca:	cf e1       	ldi	r28, 0x1F	; 31
	
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
		ht1632c_shift_left();
    14cc:	3a df       	rcall	.-396    	; 0x1342 <ht1632c_shift_left>
    14ce:	c1 50       	subi	r28, 0x01	; 1

void ht1632c_slide_out_to_left(void) {
	
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
    14d0:	e9 f7       	brne	.-6      	; 0x14cc <ht1632c_slide_out_to_left+0x4>
		ht1632c_shift_left();
	}
}
    14d2:	cf 91       	pop	r28
    14d4:	08 95       	ret

000014d6 <ht1632c_shift_right>:
	
	ht1632c_refresh_screen();
	_delay_ms(10);
}

void ht1632c_shift_right(void) {
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	ef ef       	ldi	r30, 0xFF	; 255
    14dc:	f8 e2       	ldi	r31, 0x28	; 40
    14de:	4d e1       	ldi	r20, 0x1D	; 29
	
	for (i = 31; i > 0; i -= 2) {
		if (i == 1) {
			ledmatrix[1] = ledmatrix[14];
		} else if(i == 17) {
			ledmatrix[17] = ledmatrix[30];
    14e0:	21 ef       	ldi	r18, 0xF1	; 241
    14e2:	38 e2       	ldi	r19, 0x28	; 40
    14e4:	ce ef       	ldi	r28, 0xFE	; 254
    14e6:	d8 e2       	ldi	r29, 0x28	; 40
    14e8:	09 c0       	rjmp	.+18     	; 0x14fc <ht1632c_shift_right+0x26>
    14ea:	42 50       	subi	r20, 0x02	; 2
    14ec:	32 97       	sbiw	r30, 0x02	; 2
void ht1632c_shift_right(void) {
	
	int8_t i;
	
	for (i = 31; i > 0; i -= 2) {
		if (i == 1) {
    14ee:	4f 3f       	cpi	r20, 0xFF	; 255
    14f0:	29 f4       	brne	.+10     	; 0x14fc <ht1632c_shift_right+0x26>
			ledmatrix[1] = ledmatrix[14];
    14f2:	80 91 ee 28 	lds	r24, 0x28EE
    14f6:	80 93 e1 28 	sts	0x28E1, r24
    14fa:	0c c0       	rjmp	.+24     	; 0x1514 <ht1632c_shift_right+0x3e>
		} else if(i == 17) {
    14fc:	4f 30       	cpi	r20, 0x0F	; 15
    14fe:	21 f4       	brne	.+8      	; 0x1508 <ht1632c_shift_right+0x32>
			ledmatrix[17] = ledmatrix[30];
    1500:	58 81       	ld	r21, Y
    1502:	d9 01       	movw	r26, r18
    1504:	5c 93       	st	X, r21
    1506:	f1 cf       	rjmp	.-30     	; 0x14ea <ht1632c_shift_right+0x14>
    1508:	df 01       	movw	r26, r30
    150a:	12 97       	sbiw	r26, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i-2];
    150c:	5c 91       	ld	r21, X
    150e:	50 83       	st	Z, r21

void ht1632c_shift_right(void) {
	
	int8_t i;
	
	for (i = 31; i > 0; i -= 2) {
    1510:	14 16       	cp	r1, r20
    1512:	5c f3       	brlt	.-42     	; 0x14ea <ht1632c_shift_right+0x14>
    1514:	ee ef       	ldi	r30, 0xFE	; 254
    1516:	f8 e2       	ldi	r31, 0x28	; 40
	
	ht1632c_refresh_screen();
	_delay_ms(10);
}

void ht1632c_shift_right(void) {
    1518:	2c e1       	ldi	r18, 0x1C	; 28
	}
	for (i = 30; i >= 0; i -= 2) {
		if (i == 0) {
			ledmatrix[0] = 0;
		} else if(i == 16) {
			ledmatrix[16] = 0;
    151a:	c0 ef       	ldi	r28, 0xF0	; 240
    151c:	d8 e2       	ldi	r29, 0x28	; 40
    151e:	07 c0       	rjmp	.+14     	; 0x152e <ht1632c_shift_right+0x58>
    1520:	22 50       	subi	r18, 0x02	; 2
    1522:	32 97       	sbiw	r30, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	for (i = 30; i >= 0; i -= 2) {
		if (i == 0) {
    1524:	2e 3f       	cpi	r18, 0xFE	; 254
    1526:	19 f4       	brne	.+6      	; 0x152e <ht1632c_shift_right+0x58>
			ledmatrix[0] = 0;
    1528:	10 92 e0 28 	sts	0x28E0, r1
    152c:	0a c0       	rjmp	.+20     	; 0x1542 <ht1632c_shift_right+0x6c>
		} else if(i == 16) {
    152e:	2e 30       	cpi	r18, 0x0E	; 14
    1530:	11 f4       	brne	.+4      	; 0x1536 <ht1632c_shift_right+0x60>
			ledmatrix[16] = 0;
    1532:	18 82       	st	Y, r1
    1534:	f5 cf       	rjmp	.-22     	; 0x1520 <ht1632c_shift_right+0x4a>
    1536:	df 01       	movw	r26, r30
    1538:	12 97       	sbiw	r26, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i-2];
    153a:	3c 91       	ld	r19, X
    153c:	30 83       	st	Z, r19
			ledmatrix[17] = ledmatrix[30];
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	for (i = 30; i >= 0; i -= 2) {
    153e:	22 23       	and	r18, r18
    1540:	7c f7       	brge	.-34     	; 0x1520 <ht1632c_shift_right+0x4a>
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	
	ht1632c_refresh_screen();
    1542:	8c dd       	rcall	.-1256   	; 0x105c <ht1632c_refresh_screen>
    1544:	bf ef       	ldi	r27, 0xFF	; 255
    1546:	29 ef       	ldi	r18, 0xF9	; 249
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	b1 50       	subi	r27, 0x01	; 1
    154c:	20 40       	sbci	r18, 0x00	; 0
    154e:	80 40       	sbci	r24, 0x00	; 0
    1550:	e1 f7       	brne	.-8      	; 0x154a <ht1632c_shift_right+0x74>
    1552:	00 c0       	rjmp	.+0      	; 0x1554 <ht1632c_shift_right+0x7e>
    1554:	00 00       	nop
	_delay_ms(10);
	
}
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <ht1632c_slide_in_from_left>:
		ht1632c_write_data(d, 16);
	}
	HT1632_PORT.OUTSET = _cs;
}

void ht1632c_slide_in_from_left(void) {
    155c:	8f 92       	push	r8
    155e:	9f 92       	push	r9
    1560:	af 92       	push	r10
    1562:	bf 92       	push	r11
    1564:	cf 92       	push	r12
    1566:	df 92       	push	r13
    1568:	ef 92       	push	r14
    156a:	ff 92       	push	r15
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	a0 97       	sbiw	r28, 0x20	; 32
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	de bf       	out	0x3e, r29	; 62
	
	uint8_t temp[32];
	
	memset(temp,0,32);
    157e:	20 e2       	ldi	r18, 0x20	; 32
    1580:	ce 01       	movw	r24, r28
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	dc 01       	movw	r26, r24
    1586:	e2 2f       	mov	r30, r18
    1588:	1d 92       	st	X+, r1
    158a:	ea 95       	dec	r30
    158c:	e9 f7       	brne	.-6      	; 0x1588 <ht1632c_slide_in_from_left+0x2c>
	memcpy(temp,ledmatrix,32);
    158e:	30 e2       	ldi	r19, 0x20	; 32
    1590:	e0 ee       	ldi	r30, 0xE0	; 224
    1592:	f8 e2       	ldi	r31, 0x28	; 40
    1594:	dc 01       	movw	r26, r24
    1596:	01 90       	ld	r0, Z+
    1598:	0d 92       	st	X+, r0
    159a:	3a 95       	dec	r19
    159c:	e1 f7       	brne	.-8      	; 0x1596 <ht1632c_slide_in_from_left+0x3a>
	memset(ledmatrix,0,32);
    159e:	e0 ee       	ldi	r30, 0xE0	; 224
    15a0:	f8 e2       	ldi	r31, 0x28	; 40
    15a2:	df 01       	movw	r26, r30
    15a4:	1d 92       	st	X+, r1
    15a6:	2a 95       	dec	r18
    15a8:	e9 f7       	brne	.-6      	; 0x15a4 <ht1632c_slide_in_from_left+0x48>
    15aa:	8e 01       	movw	r16, r28
    15ac:	00 5e       	subi	r16, 0xE0	; 224
    15ae:	1f 4f       	sbci	r17, 0xFF	; 255
    15b0:	5c 01       	movw	r10, r24
    15b2:	4e 01       	movw	r8, r28
    15b4:	b0 e1       	ldi	r27, 0x10	; 16
    15b6:	8b 0e       	add	r8, r27
    15b8:	91 1c       	adc	r9, r1
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2)
	{
		ledmatrix[0] = temp[i-16];
    15ba:	6f 01       	movw	r12, r30
		ledmatrix[16] = temp[i];
    15bc:	0f 2e       	mov	r0, r31
    15be:	f0 ef       	ldi	r31, 0xF0	; 240
    15c0:	ef 2e       	mov	r14, r31
    15c2:	f8 e2       	ldi	r31, 0x28	; 40
    15c4:	ff 2e       	mov	r15, r31
    15c6:	f0 2d       	mov	r31, r0
    15c8:	f8 01       	movw	r30, r16
    15ca:	70 97       	sbiw	r30, 0x10	; 16
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2)
	{
		ledmatrix[0] = temp[i-16];
    15cc:	80 81       	ld	r24, Z
    15ce:	f6 01       	movw	r30, r12
    15d0:	80 83       	st	Z, r24
		ledmatrix[16] = temp[i];
    15d2:	d8 01       	movw	r26, r16
    15d4:	8c 91       	ld	r24, X
    15d6:	f7 01       	movw	r30, r14
    15d8:	80 83       	st	Z, r24
		ht1632c_shift_right();
    15da:	7d df       	rcall	.-262    	; 0x14d6 <ht1632c_shift_right>
    15dc:	02 50       	subi	r16, 0x02	; 2
    15de:	11 09       	sbc	r17, r1
	memcpy(temp,ledmatrix,32);
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2)
    15e0:	08 15       	cp	r16, r8
    15e2:	19 05       	cpc	r17, r9
    15e4:	89 f7       	brne	.-30     	; 0x15c8 <ht1632c_slide_in_from_left+0x6c>
    15e6:	8e 01       	movw	r16, r28
    15e8:	01 5e       	subi	r16, 0xE1	; 225
    15ea:	1f 4f       	sbci	r17, 0xFF	; 255
    15ec:	fe e0       	ldi	r31, 0x0E	; 14
    15ee:	af 0e       	add	r10, r31
    15f0:	b1 1c       	adc	r11, r1
		ht1632c_shift_right();
	}
	
	for (i = 30; i >= 16; i -= 2)
	{
		ledmatrix[0] = temp[i-16];
    15f2:	0f 2e       	mov	r0, r31
    15f4:	f0 ee       	ldi	r31, 0xE0	; 224
    15f6:	cf 2e       	mov	r12, r31
    15f8:	f8 e2       	ldi	r31, 0x28	; 40
    15fa:	df 2e       	mov	r13, r31
    15fc:	f0 2d       	mov	r31, r0
		ledmatrix[16] = temp[i];
    15fe:	0f 2e       	mov	r0, r31
    1600:	f0 ef       	ldi	r31, 0xF0	; 240
    1602:	ef 2e       	mov	r14, r31
    1604:	f8 e2       	ldi	r31, 0x28	; 40
    1606:	ff 2e       	mov	r15, r31
    1608:	f0 2d       	mov	r31, r0
    160a:	f8 01       	movw	r30, r16
    160c:	70 97       	sbiw	r30, 0x10	; 16
		ht1632c_shift_right();
	}
	
	for (i = 30; i >= 16; i -= 2)
	{
		ledmatrix[0] = temp[i-16];
    160e:	80 81       	ld	r24, Z
    1610:	d6 01       	movw	r26, r12
    1612:	8c 93       	st	X, r24
		ledmatrix[16] = temp[i];
    1614:	f8 01       	movw	r30, r16
    1616:	80 81       	ld	r24, Z
    1618:	d7 01       	movw	r26, r14
    161a:	8c 93       	st	X, r24
		ht1632c_shift_right();
    161c:	5c df       	rcall	.-328    	; 0x14d6 <ht1632c_shift_right>
    161e:	02 50       	subi	r16, 0x02	; 2
    1620:	11 09       	sbc	r17, r1
		ledmatrix[0] = temp[i-16];
		ledmatrix[16] = temp[i];
		ht1632c_shift_right();
	}
	
	for (i = 30; i >= 16; i -= 2)
    1622:	0a 15       	cp	r16, r10
    1624:	1b 05       	cpc	r17, r11
    1626:	89 f7       	brne	.-30     	; 0x160a <ht1632c_slide_in_from_left+0xae>
		ledmatrix[0] = temp[i-16];
		ledmatrix[16] = temp[i];
		ht1632c_shift_right();
	}
	
}
    1628:	a0 96       	adiw	r28, 0x20	; 32
    162a:	cd bf       	out	0x3d, r28	; 61
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	bf 90       	pop	r11
    1640:	af 90       	pop	r10
    1642:	9f 90       	pop	r9
    1644:	8f 90       	pop	r8
    1646:	08 95       	ret

00001648 <ht1632c_slide_out_to_right>:
		ht1632c_shift_left();
	}
	
}

void ht1632c_slide_out_to_right(void) {
    1648:	cf 93       	push	r28
    164a:	cf e1       	ldi	r28, 0x1F	; 31
	
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
		ht1632c_shift_right();
    164c:	44 df       	rcall	.-376    	; 0x14d6 <ht1632c_shift_right>
    164e:	c1 50       	subi	r28, 0x01	; 1

void ht1632c_slide_out_to_right(void) {
	
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
    1650:	e9 f7       	brne	.-6      	; 0x164c <ht1632c_slide_out_to_right+0x4>
		ht1632c_shift_right();
	}
}
    1652:	cf 91       	pop	r28
    1654:	08 95       	ret

00001656 <btn_setup>:
void btn_top_setup(void) {
	
	PORTC.DIRCLR = PIN2_bm;
	PORTC.PIN2CTRL = PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
	PORTC.INT0MASK = PIN2_bm;
	PORTC.INTCTRL = PORT_INT0LVL_HI_gc;
    1656:	e0 e0       	ldi	r30, 0x00	; 0
    1658:	f6 e0       	ldi	r31, 0x06	; 6
    165a:	20 ee       	ldi	r18, 0xE0	; 224
    165c:	22 83       	std	Z+2, r18	; 0x02
    165e:	a0 e2       	ldi	r26, 0x20	; 32
    1660:	b6 e0       	ldi	r27, 0x06	; 6
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	12 96       	adiw	r26, 0x02	; 2
    1666:	9c 93       	st	X, r25
    1668:	12 97       	sbiw	r26, 0x02	; 2
    166a:	82 e0       	ldi	r24, 0x02	; 2
    166c:	85 8b       	std	Z+21, r24	; 0x15
    166e:	86 8b       	std	Z+22, r24	; 0x16
    1670:	87 8b       	std	Z+23, r24	; 0x17
    1672:	50 96       	adiw	r26, 0x10	; 16
    1674:	8c 93       	st	X, r24
    1676:	50 97       	sbiw	r26, 0x10	; 16
    1678:	22 87       	std	Z+10, r18	; 0x0a
    167a:	1a 96       	adiw	r26, 0x0a	; 10
    167c:	9c 93       	st	X, r25
    167e:	1a 97       	sbiw	r26, 0x0a	; 10
    1680:	83 e0       	ldi	r24, 0x03	; 3
    1682:	81 87       	std	Z+9, r24	; 0x09
    1684:	19 96       	adiw	r26, 0x09	; 9
    1686:	8c 93       	st	X, r24
    1688:	08 95       	ret

0000168a <btn_check_press>:
	
}

button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
    168a:	e0 e0       	ldi	r30, 0x00	; 0
    168c:	f6 e0       	ldi	r31, 0x06	; 6
    168e:	80 85       	ldd	r24, Z+8	; 0x08
    1690:	85 ff       	sbrs	r24, 5
    1692:	0d c0       	rjmp	.+26     	; 0x16ae <btn_check_press+0x24>
		//uwrite_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL += 1;
		return BTN1;
	} else if (!(PORTA.IN & BUTTON1)) {
    1694:	80 85       	ldd	r24, Z+8	; 0x08
    1696:	86 ff       	sbrs	r24, 6
    1698:	0c c0       	rjmp	.+24     	; 0x16b2 <btn_check_press+0x28>
		//uwrite_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL -= 1;
		return BTN2;
	} else if (!(PORTA.IN & BUTTON2)) {
    169a:	80 85       	ldd	r24, Z+8	; 0x08
    169c:	88 23       	and	r24, r24
    169e:	5c f4       	brge	.+22     	; 0x16b6 <btn_check_press+0x2c>
		//uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL += 1;
		return BTN3;
	} else if (!(PORTB.IN & BUTTON3)) {
    16a0:	e0 e2       	ldi	r30, 0x20	; 32
    16a2:	f6 e0       	ldi	r31, 0x06	; 6
    16a4:	80 85       	ldd	r24, Z+8	; 0x08
    16a6:	80 fd       	sbrc	r24, 0
    16a8:	08 c0       	rjmp	.+16     	; 0x16ba <btn_check_press+0x30>
		//uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL -= 1;
		return BTN4;
    16aa:	84 e0       	ldi	r24, 0x04	; 4
    16ac:	08 95       	ret
button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
		//uwrite_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL += 1;
		return BTN1;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	08 95       	ret
	} else if (!(PORTA.IN & BUTTON1)) {
		//uwrite_hex(DACB.CH0OFFSETCAL);
		//DACB.CH0OFFSETCAL -= 1;
		return BTN2;
    16b2:	82 e0       	ldi	r24, 0x02	; 2
    16b4:	08 95       	ret
	} else if (!(PORTA.IN & BUTTON2)) {
		//uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL += 1;
		return BTN3;
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	08 95       	ret
	} else if (!(PORTB.IN & BUTTON3)) {
		//uwrite_hex(DACB.CH0GAINCAL);
		//DACB.CH0GAINCAL -= 1;
		return BTN4;
	} else {
		return NONE;
    16ba:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    16bc:	08 95       	ret

000016be <__vector_66>:

ISR(PORTA_INT0_vect) {
    16be:	1f 92       	push	r1
    16c0:	0f 92       	push	r0
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	0f 92       	push	r0
    16c6:	11 24       	eor	r1, r1
    16c8:	0b b6       	in	r0, 0x3b	; 59
    16ca:	0f 92       	push	r0
    16cc:	2f 93       	push	r18
    16ce:	3f 93       	push	r19
    16d0:	4f 93       	push	r20
    16d2:	5f 93       	push	r21
    16d4:	6f 93       	push	r22
    16d6:	7f 93       	push	r23
    16d8:	8f 93       	push	r24
    16da:	9f 93       	push	r25
    16dc:	af 93       	push	r26
    16de:	bf 93       	push	r27
    16e0:	ef 93       	push	r30
    16e2:	ff 93       	push	r31
	btn_status = btn_check_press();
    16e4:	d2 df       	rcall	.-92     	; 0x168a <btn_check_press>
    16e6:	80 93 77 29 	sts	0x2977, r24
	//printf("%d",btn_status);
}
    16ea:	ff 91       	pop	r31
    16ec:	ef 91       	pop	r30
    16ee:	bf 91       	pop	r27
    16f0:	af 91       	pop	r26
    16f2:	9f 91       	pop	r25
    16f4:	8f 91       	pop	r24
    16f6:	7f 91       	pop	r23
    16f8:	6f 91       	pop	r22
    16fa:	5f 91       	pop	r21
    16fc:	4f 91       	pop	r20
    16fe:	3f 91       	pop	r19
    1700:	2f 91       	pop	r18
    1702:	0f 90       	pop	r0
    1704:	0b be       	out	0x3b, r0	; 59
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	0f 90       	pop	r0
    170c:	1f 90       	pop	r1
    170e:	18 95       	reti

00001710 <__vector_34>:

ISR(PORTB_INT0_vect) {
    1710:	1f 92       	push	r1
    1712:	0f 92       	push	r0
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	0f 92       	push	r0
    1718:	11 24       	eor	r1, r1
    171a:	0b b6       	in	r0, 0x3b	; 59
    171c:	0f 92       	push	r0
    171e:	2f 93       	push	r18
    1720:	3f 93       	push	r19
    1722:	4f 93       	push	r20
    1724:	5f 93       	push	r21
    1726:	6f 93       	push	r22
    1728:	7f 93       	push	r23
    172a:	8f 93       	push	r24
    172c:	9f 93       	push	r25
    172e:	af 93       	push	r26
    1730:	bf 93       	push	r27
    1732:	ef 93       	push	r30
    1734:	ff 93       	push	r31
	btn_status = btn_check_press();
    1736:	a9 df       	rcall	.-174    	; 0x168a <btn_check_press>
    1738:	80 93 77 29 	sts	0x2977, r24
	//printf("%d",btn_status);
}
    173c:	ff 91       	pop	r31
    173e:	ef 91       	pop	r30
    1740:	bf 91       	pop	r27
    1742:	af 91       	pop	r26
    1744:	9f 91       	pop	r25
    1746:	8f 91       	pop	r24
    1748:	7f 91       	pop	r23
    174a:	6f 91       	pop	r22
    174c:	5f 91       	pop	r21
    174e:	4f 91       	pop	r20
    1750:	3f 91       	pop	r19
    1752:	2f 91       	pop	r18
    1754:	0f 90       	pop	r0
    1756:	0b be       	out	0x3b, r0	; 59
    1758:	0f 90       	pop	r0
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	0f 90       	pop	r0
    175e:	1f 90       	pop	r1
    1760:	18 95       	reti

00001762 <__vector_67>:

ISR(PORTA_INT1_vect) {
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	0b b6       	in	r0, 0x3b	; 59
    176e:	0f 92       	push	r0
    1770:	2f 93       	push	r18
    1772:	3f 93       	push	r19
    1774:	4f 93       	push	r20
    1776:	5f 93       	push	r21
    1778:	6f 93       	push	r22
    177a:	7f 93       	push	r23
    177c:	8f 93       	push	r24
    177e:	9f 93       	push	r25
    1780:	af 93       	push	r26
    1782:	bf 93       	push	r27
    1784:	ef 93       	push	r30
    1786:	ff 93       	push	r31
	ht1632c_fill_screen();
    1788:	94 dc       	rcall	.-1752   	; 0x10b2 <ht1632c_fill_screen>
    178a:	ff 91       	pop	r31
    178c:	ef 91       	pop	r30
    178e:	bf 91       	pop	r27
    1790:	af 91       	pop	r26
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	7f 91       	pop	r23
    1798:	6f 91       	pop	r22
    179a:	5f 91       	pop	r21
    179c:	4f 91       	pop	r20
    179e:	3f 91       	pop	r19
    17a0:	2f 91       	pop	r18
    17a2:	0f 90       	pop	r0
    17a4:	0b be       	out	0x3b, r0	; 59
    17a6:	0f 90       	pop	r0
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	0f 90       	pop	r0
    17ac:	1f 90       	pop	r1
    17ae:	18 95       	reti

000017b0 <rtc_setup>:
	if (x < 15 && y == 0)
	{
		x++;
	} else if (x == 15 && y < 15) {
		y++;
	} else if (y == 15 && x > 0) {
    17b0:	88 ed       	ldi	r24, 0xD8	; 216
    17b2:	84 bf       	out	0x34, r24	; 52
    17b4:	8b e0       	ldi	r24, 0x0B	; 11
    17b6:	e0 e4       	ldi	r30, 0x40	; 64
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	83 83       	std	Z+3, r24	; 0x03
    17bc:	e0 e0       	ldi	r30, 0x00	; 0
    17be:	f4 e0       	ldi	r31, 0x04	; 4
    17c0:	81 81       	ldd	r24, Z+1	; 0x01
    17c2:	80 fd       	sbrc	r24, 0
    17c4:	fd cf       	rjmp	.-6      	; 0x17c0 <rtc_setup+0x10>
    17c6:	e0 e0       	ldi	r30, 0x00	; 0
    17c8:	f4 e0       	ldi	r31, 0x04	; 4
    17ca:	88 eb       	ldi	r24, 0xB8	; 184
    17cc:	9b e0       	ldi	r25, 0x0B	; 11
    17ce:	82 87       	std	Z+10, r24	; 0x0a
    17d0:	93 87       	std	Z+11, r25	; 0x0b
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	82 83       	std	Z+2, r24	; 0x02
    17d6:	10 86       	std	Z+8, r1	; 0x08
    17d8:	11 86       	std	Z+9, r1	; 0x09
    17da:	14 86       	std	Z+12, r1	; 0x0c
    17dc:	15 86       	std	Z+13, r1	; 0x0d
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	80 83       	st	Z, r24
    17e2:	08 95       	ret

000017e4 <rtc_disable_time_render>:
    17e4:	10 92 04 20 	sts	0x2004, r1
    17e8:	08 95       	ret

000017ea <rtc_update_display>:
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <rtc_update_display+0xe>
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	e8 2e       	mov	r14, r24
    17fe:	16 2f       	mov	r17, r22
    1800:	1f 92       	push	r1
    1802:	6f 93       	push	r22
    1804:	28 e7       	ldi	r18, 0x78	; 120
    1806:	36 e2       	ldi	r19, 0x26	; 38
    1808:	3f 93       	push	r19
    180a:	2f 93       	push	r18
    180c:	9e 01       	movw	r18, r28
    180e:	2f 5f       	subi	r18, 0xFF	; 255
    1810:	3f 4f       	sbci	r19, 0xFF	; 255
    1812:	3f 93       	push	r19
    1814:	2f 93       	push	r18
    1816:	0e 94 c6 18 	call	0x318c	; 0x318c <sprintf>
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	1a 30       	cpi	r17, 0x0A	; 10
    1828:	20 f4       	brcc	.+8      	; 0x1832 <rtc_update_display+0x48>
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	90 e3       	ldi	r25, 0x30	; 48
    182e:	99 83       	std	Y+1, r25	; 0x01
    1830:	8a 83       	std	Y+2, r24	; 0x02
    1832:	f1 2c       	mov	r15, r1
    1834:	00 e0       	ldi	r16, 0x00	; 0
    1836:	10 e0       	ldi	r17, 0x00	; 0
    1838:	28 e0       	ldi	r18, 0x08	; 8
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e1       	ldi	r20, 0x10	; 16
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	b7 01       	movw	r22, r14
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	a5 db       	rcall	.-2230   	; 0xf92 <ht1632c_draw_filled_rect>
    1848:	49 81       	ldd	r20, Y+1	; 0x01
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	01 e0       	ldi	r16, 0x01	; 1
    184e:	10 e0       	ldi	r17, 0x00	; 0
    1850:	21 e0       	ldi	r18, 0x01	; 1
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	b7 01       	movw	r22, r14
    1856:	82 e0       	ldi	r24, 0x02	; 2
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	74 dc       	rcall	.-1816   	; 0x1144 <ht1632c_draw_char>
    185c:	4a 81       	ldd	r20, Y+2	; 0x02
    185e:	50 e0       	ldi	r21, 0x00	; 0
    1860:	21 e0       	ldi	r18, 0x01	; 1
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	b7 01       	movw	r22, r14
    1866:	89 e0       	ldi	r24, 0x09	; 9
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	6c dc       	rcall	.-1832   	; 0x1144 <ht1632c_draw_char>
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	ff 90       	pop	r15
    187a:	ef 90       	pop	r14
    187c:	08 95       	ret

0000187e <rtc_init_time>:
    187e:	cf 93       	push	r28
    1880:	df 93       	push	r29
    1882:	22 dc       	rcall	.-1980   	; 0x10c8 <ht1632c_clear_screen>
    1884:	10 92 78 29 	sts	0x2978, r1
    1888:	10 92 79 29 	sts	0x2979, r1
    188c:	ca e7       	ldi	r28, 0x7A	; 122
    188e:	d9 e2       	ldi	r29, 0x29	; 41
    1890:	18 82       	st	Y, r1
    1892:	10 92 7b 29 	sts	0x297B, r1
    1896:	10 92 7c 29 	sts	0x297C, r1
    189a:	10 92 7d 29 	sts	0x297D, r1
    189e:	10 92 7e 29 	sts	0x297E, r1
    18a2:	10 92 7f 29 	sts	0x297F, r1
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	9f df       	rcall	.-194    	; 0x17ea <rtc_update_display>
    18ac:	68 81       	ld	r22, Y
    18ae:	89 e0       	ldi	r24, 0x09	; 9
    18b0:	9c df       	rcall	.-200    	; 0x17ea <rtc_update_display>
    18b2:	d4 db       	rcall	.-2136   	; 0x105c <ht1632c_refresh_screen>
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	08 95       	ret

000018ba <rtc_enable_time_render>:
    18ba:	60 91 79 29 	lds	r22, 0x2979
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	94 df       	rcall	.-216    	; 0x17ea <rtc_update_display>
    18c2:	60 91 7a 29 	lds	r22, 0x297A
    18c6:	89 e0       	ldi	r24, 0x09	; 9
    18c8:	90 df       	rcall	.-224    	; 0x17ea <rtc_update_display>
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	80 93 04 20 	sts	0x2004, r24
    18d0:	08 95       	ret

000018d2 <rtc_set_time>:
    18d2:	0f 93       	push	r16
    18d4:	1f 93       	push	r17
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	80 93 78 29 	sts	0x2978, r24
    18de:	c9 e7       	ldi	r28, 0x79	; 121
    18e0:	d9 e2       	ldi	r29, 0x29	; 41
    18e2:	68 83       	st	Y, r22
    18e4:	40 93 7a 29 	sts	0x297A, r20
    18e8:	20 93 7b 29 	sts	0x297B, r18
    18ec:	30 93 7c 29 	sts	0x297C, r19
    18f0:	00 93 7e 29 	sts	0x297E, r16
    18f4:	10 93 7f 29 	sts	0x297F, r17
    18f8:	64 2f       	mov	r22, r20
    18fa:	89 e0       	ldi	r24, 0x09	; 9
    18fc:	76 df       	rcall	.-276    	; 0x17ea <rtc_update_display>
    18fe:	68 81       	ld	r22, Y
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	73 df       	rcall	.-282    	; 0x17ea <rtc_update_display>
    1904:	ab db       	rcall	.-2218   	; 0x105c <ht1632c_refresh_screen>
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	1f 91       	pop	r17
    190c:	0f 91       	pop	r16
    190e:	08 95       	ret

00001910 <__vector_10>:
	ht1632c_draw_pixel(x,y,1);
	
	ht1632c_refresh_screen();
}

ISR(RTC_OVF_vect) {
    1910:	1f 92       	push	r1
    1912:	0f 92       	push	r0
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	0f 92       	push	r0
    1918:	11 24       	eor	r1, r1
    191a:	0b b6       	in	r0, 0x3b	; 59
    191c:	0f 92       	push	r0
    191e:	2f 93       	push	r18
    1920:	3f 93       	push	r19
    1922:	4f 93       	push	r20
    1924:	5f 93       	push	r21
    1926:	6f 93       	push	r22
    1928:	7f 93       	push	r23
    192a:	8f 93       	push	r24
    192c:	9f 93       	push	r25
    192e:	af 93       	push	r26
    1930:	bf 93       	push	r27
    1932:	cf 93       	push	r28
    1934:	ef 93       	push	r30
    1936:	ff 93       	push	r31
	//rtc_update_seconds();
	if (++time.seconds == 60) {
    1938:	80 91 78 29 	lds	r24, 0x2978
    193c:	8f 5f       	subi	r24, 0xFF	; 255
    193e:	8c 33       	cpi	r24, 0x3C	; 60
    1940:	19 f0       	breq	.+6      	; 0x1948 <__vector_10+0x38>
    1942:	80 93 78 29 	sts	0x2978, r24
    1946:	62 c0       	rjmp	.+196    	; 0x1a0c <__vector_10+0xfc>
		
		time.seconds = 0;
    1948:	10 92 78 29 	sts	0x2978, r1
			
		if (++time.minutes == 60) {
    194c:	e9 e7       	ldi	r30, 0x79	; 121
    194e:	f9 e2       	ldi	r31, 0x29	; 41
    1950:	60 81       	ld	r22, Z
    1952:	6f 5f       	subi	r22, 0xFF	; 255
    1954:	60 83       	st	Z, r22
    1956:	6c 33       	cpi	r22, 0x3C	; 60
    1958:	09 f0       	breq	.+2      	; 0x195c <__vector_10+0x4c>
    195a:	51 c0       	rjmp	.+162    	; 0x19fe <__vector_10+0xee>
			
			time.minutes = 0;
    195c:	10 92 79 29 	sts	0x2979, r1
			if (disp_time) { 
    1960:	80 91 04 20 	lds	r24, 0x2004
    1964:	88 23       	and	r24, r24
    1966:	21 f0       	breq	.+8      	; 0x1970 <__vector_10+0x60>
				rtc_update_display(BOTTOM,time.minutes);
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	3e df       	rcall	.-388    	; 0x17ea <rtc_update_display>
				ht1632c_refresh_screen();
    196e:	76 db       	rcall	.-2324   	; 0x105c <ht1632c_refresh_screen>
			}
			
			if (++time.hours == 24) {
    1970:	ea e7       	ldi	r30, 0x7A	; 122
    1972:	f9 e2       	ldi	r31, 0x29	; 41
    1974:	60 81       	ld	r22, Z
    1976:	6f 5f       	subi	r22, 0xFF	; 255
    1978:	60 83       	st	Z, r22
    197a:	68 31       	cpi	r22, 0x18	; 24
    197c:	b1 f5       	brne	.+108    	; 0x19ea <__vector_10+0xda>
				time.weeks += (++time.days)/7;
    197e:	ed e7       	ldi	r30, 0x7D	; 125
    1980:	f9 e2       	ldi	r31, 0x29	; 41
    1982:	c0 81       	ld	r28, Z
    1984:	ab e7       	ldi	r26, 0x7B	; 123
    1986:	b9 e2       	ldi	r27, 0x29	; 41
    1988:	4d 91       	ld	r20, X+
    198a:	5c 91       	ld	r21, X
    198c:	11 97       	sbiw	r26, 0x01	; 1
    198e:	4f 5f       	subi	r20, 0xFF	; 255
    1990:	5f 4f       	sbci	r21, 0xFF	; 255
    1992:	4d 93       	st	X+, r20
    1994:	5c 93       	st	X, r21
    1996:	9a 01       	movw	r18, r20
    1998:	a3 e9       	ldi	r26, 0x93	; 147
    199a:	b4 e2       	ldi	r27, 0x24	; 36
    199c:	0e 94 27 18 	call	0x304e	; 0x304e <__umulhisi3>
    19a0:	48 1b       	sub	r20, r24
    19a2:	59 0b       	sbc	r21, r25
    19a4:	56 95       	lsr	r21
    19a6:	47 95       	ror	r20
    19a8:	84 0f       	add	r24, r20
    19aa:	95 1f       	adc	r25, r21
    19ac:	96 95       	lsr	r25
    19ae:	87 95       	ror	r24
    19b0:	96 95       	lsr	r25
    19b2:	87 95       	ror	r24
    19b4:	8c 0f       	add	r24, r28
    19b6:	80 83       	st	Z, r24
				time.year += time.weeks/52;
    19b8:	ee e7       	ldi	r30, 0x7E	; 126
    19ba:	f9 e2       	ldi	r31, 0x29	; 41
    19bc:	2f e4       	ldi	r18, 0x4F	; 79
    19be:	82 9f       	mul	r24, r18
    19c0:	21 2d       	mov	r18, r1
    19c2:	11 24       	eor	r1, r1
    19c4:	22 95       	swap	r18
    19c6:	2f 70       	andi	r18, 0x0F	; 15
    19c8:	80 81       	ld	r24, Z
    19ca:	91 81       	ldd	r25, Z+1	; 0x01
    19cc:	82 0f       	add	r24, r18
    19ce:	91 1d       	adc	r25, r1
    19d0:	80 83       	st	Z, r24
    19d2:	91 83       	std	Z+1, r25	; 0x01
				time.hours = 0;
    19d4:	10 92 7a 29 	sts	0x297A, r1
				if (disp_time) {
    19d8:	80 91 04 20 	lds	r24, 0x2004
    19dc:	88 23       	and	r24, r24
    19de:	61 f0       	breq	.+24     	; 0x19f8 <__vector_10+0xe8>
					rtc_update_display(TOP,time.hours);
    19e0:	60 e0       	ldi	r22, 0x00	; 0
    19e2:	89 e0       	ldi	r24, 0x09	; 9
    19e4:	02 df       	rcall	.-508    	; 0x17ea <rtc_update_display>
					ht1632c_refresh_screen();	
    19e6:	3a db       	rcall	.-2444   	; 0x105c <ht1632c_refresh_screen>
    19e8:	07 c0       	rjmp	.+14     	; 0x19f8 <__vector_10+0xe8>
				}
			} else {
				if (disp_time) {
    19ea:	80 91 04 20 	lds	r24, 0x2004
    19ee:	88 23       	and	r24, r24
    19f0:	19 f0       	breq	.+6      	; 0x19f8 <__vector_10+0xe8>
					rtc_update_display(TOP,time.hours);
    19f2:	89 e0       	ldi	r24, 0x09	; 9
    19f4:	fa de       	rcall	.-524    	; 0x17ea <rtc_update_display>
					ht1632c_refresh_screen();
    19f6:	32 db       	rcall	.-2460   	; 0x105c <ht1632c_refresh_screen>
				}
			}
			time.minutes = 0;
    19f8:	10 92 79 29 	sts	0x2979, r1
    19fc:	07 c0       	rjmp	.+14     	; 0x1a0c <__vector_10+0xfc>
		} else {
			if (disp_time) {
    19fe:	80 91 04 20 	lds	r24, 0x2004
    1a02:	88 23       	and	r24, r24
    1a04:	19 f0       	breq	.+6      	; 0x1a0c <__vector_10+0xfc>
				rtc_update_display(BOTTOM,time.minutes);
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	f0 de       	rcall	.-544    	; 0x17ea <rtc_update_display>
				ht1632c_refresh_screen();	
    1a0a:	28 db       	rcall	.-2480   	; 0x105c <ht1632c_refresh_screen>
			}
		}
	}
}
    1a0c:	ff 91       	pop	r31
    1a0e:	ef 91       	pop	r30
    1a10:	cf 91       	pop	r28
    1a12:	bf 91       	pop	r27
    1a14:	af 91       	pop	r26
    1a16:	9f 91       	pop	r25
    1a18:	8f 91       	pop	r24
    1a1a:	7f 91       	pop	r23
    1a1c:	6f 91       	pop	r22
    1a1e:	5f 91       	pop	r21
    1a20:	4f 91       	pop	r20
    1a22:	3f 91       	pop	r19
    1a24:	2f 91       	pop	r18
    1a26:	0f 90       	pop	r0
    1a28:	0b be       	out	0x3b, r0	; 59
    1a2a:	0f 90       	pop	r0
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	0f 90       	pop	r0
    1a30:	1f 90       	pop	r1
    1a32:	18 95       	reti

00001a34 <_sendCmd>:
	// returns Parameter[address]
	s16 retval;
	u8 cmd = 0x80 + (address & 0x1F);
	if((retval=_sendCmd(si114x_handle, cmd ))!=0) return retval;
	return Si114xReadFromRegister(si114x_handle, REG_PARAM_RD);
}
    1a34:	df 92       	push	r13
    1a36:	ef 92       	push	r14
    1a38:	ff 92       	push	r15
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	ec 01       	movw	r28, r24
    1a44:	d6 2e       	mov	r13, r22
    1a46:	60 e2       	ldi	r22, 0x20	; 32
    1a48:	41 d5       	rcall	.+2690   	; 0x24cc <Si114xReadFromRegister>
    1a4a:	8c 01       	movw	r16, r24
    1a4c:	99 23       	and	r25, r25
    1a4e:	34 f1       	brlt	.+76     	; 0x1a9c <_sendCmd+0x68>
    1a50:	60 e3       	ldi	r22, 0x30	; 48
    1a52:	ce 01       	movw	r24, r28
    1a54:	3b d5       	rcall	.+2678   	; 0x24cc <Si114xReadFromRegister>
    1a56:	81 30       	cpi	r24, 0x01	; 1
    1a58:	91 05       	cpc	r25, r1
    1a5a:	81 f1       	breq	.+96     	; 0x1abc <_sendCmd+0x88>
    1a5c:	99 23       	and	r25, r25
    1a5e:	c4 f7       	brge	.-16     	; 0x1a50 <_sendCmd+0x1c>
    1a60:	39 c0       	rjmp	.+114    	; 0x1ad4 <_sendCmd+0xa0>
    1a62:	60 e2       	ldi	r22, 0x20	; 32
    1a64:	ce 01       	movw	r24, r28
    1a66:	32 d5       	rcall	.+2660   	; 0x24cc <Si114xReadFromRegister>
    1a68:	80 17       	cp	r24, r16
    1a6a:	91 07       	cpc	r25, r17
    1a6c:	51 f1       	breq	.+84     	; 0x1ac2 <_sendCmd+0x8e>
    1a6e:	99 23       	and	r25, r25
    1a70:	8c f1       	brlt	.+98     	; 0x1ad4 <_sendCmd+0xa0>
    1a72:	8c 01       	movw	r16, r24
    1a74:	ed cf       	rjmp	.-38     	; 0x1a50 <_sendCmd+0x1c>
    1a76:	78 01       	movw	r14, r16
    1a78:	4d 2d       	mov	r20, r13
    1a7a:	68 e1       	ldi	r22, 0x18	; 24
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	09 d5       	rcall	.+2578   	; 0x2492 <Si114xWriteToRegister>
    1a80:	9c 01       	movw	r18, r24
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	69 f4       	brne	.+26     	; 0x1aa0 <_sendCmd+0x6c>
    1a86:	dd 20       	and	r13, r13
    1a88:	69 f0       	breq	.+26     	; 0x1aa4 <_sendCmd+0x70>
    1a8a:	60 e2       	ldi	r22, 0x20	; 32
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	1e d5       	rcall	.+2620   	; 0x24cc <Si114xReadFromRegister>
    1a90:	8e 15       	cp	r24, r14
    1a92:	9f 05       	cpc	r25, r15
    1a94:	51 f4       	brne	.+20     	; 0x1aaa <_sendCmd+0x76>
    1a96:	11 23       	and	r17, r17
    1a98:	c4 f7       	brge	.-16     	; 0x1a8a <_sendCmd+0x56>
    1a9a:	0a c0       	rjmp	.+20     	; 0x1ab0 <_sendCmd+0x7c>
    1a9c:	91 2f       	mov	r25, r17
    1a9e:	1a c0       	rjmp	.+52     	; 0x1ad4 <_sendCmd+0xa0>
    1aa0:	93 2f       	mov	r25, r19
    1aa2:	18 c0       	rjmp	.+48     	; 0x1ad4 <_sendCmd+0xa0>
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	15 c0       	rjmp	.+42     	; 0x1ad4 <_sendCmd+0xa0>
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	12 c0       	rjmp	.+36     	; 0x1ad4 <_sendCmd+0xa0>
    1ab0:	80 2f       	mov	r24, r16
    1ab2:	91 2f       	mov	r25, r17
    1ab4:	0f c0       	rjmp	.+30     	; 0x1ad4 <_sendCmd+0xa0>
    1ab6:	82 2f       	mov	r24, r18
    1ab8:	93 2f       	mov	r25, r19
    1aba:	0c c0       	rjmp	.+24     	; 0x1ad4 <_sendCmd+0xa0>
    1abc:	d1 10       	cpse	r13, r1
    1abe:	d1 cf       	rjmp	.-94     	; 0x1a62 <_sendCmd+0x2e>
    1ac0:	da cf       	rjmp	.-76     	; 0x1a76 <_sendCmd+0x42>
    1ac2:	78 01       	movw	r14, r16
    1ac4:	4d 2d       	mov	r20, r13
    1ac6:	68 e1       	ldi	r22, 0x18	; 24
    1ac8:	ce 01       	movw	r24, r28
    1aca:	e3 d4       	rcall	.+2502   	; 0x2492 <Si114xWriteToRegister>
    1acc:	9c 01       	movw	r18, r24
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	e1 f2       	breq	.-72     	; 0x1a8a <_sendCmd+0x56>
    1ad2:	f1 cf       	rjmp	.-30     	; 0x1ab6 <_sendCmd+0x82>
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	ff 90       	pop	r15
    1ade:	ef 90       	pop	r14
    1ae0:	df 90       	pop	r13
    1ae2:	08 95       	ret

00001ae4 <si114x_get_data>:
    1ae4:	cf 92       	push	r12
    1ae6:	df 92       	push	r13
    1ae8:	ef 92       	push	r14
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <si114x_get_data+0x10>
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	6c 01       	movw	r12, r24
    1afa:	81 e8       	ldi	r24, 0x81	; 129
    1afc:	96 e2       	ldi	r25, 0x26	; 38
    1afe:	0e 94 99 18 	call	0x3132	; 0x3132 <puts>
    1b02:	68 94       	set
    1b04:	ee 24       	eor	r14, r14
    1b06:	e1 f8       	bld	r14, 1
    1b08:	8e 01       	movw	r16, r28
    1b0a:	0f 5f       	subi	r16, 0xFF	; 255
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	26 e2       	ldi	r18, 0x26	; 38
    1b10:	42 e3       	ldi	r20, 0x32	; 50
    1b12:	6a e5       	ldi	r22, 0x5A	; 90
    1b14:	80 e8       	ldi	r24, 0x80	; 128
    1b16:	94 e0       	ldi	r25, 0x04	; 4
    1b18:	0e 94 04 16 	call	0x2c08	; 0x2c08 <twi_read_packet>
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	98 2f       	mov	r25, r24
    1b22:	88 27       	eor	r24, r24
    1b24:	29 81       	ldd	r18, Y+1	; 0x01
    1b26:	82 2b       	or	r24, r18
    1b28:	f6 01       	movw	r30, r12
    1b2a:	82 87       	std	Z+10, r24	; 0x0a
    1b2c:	93 87       	std	Z+11, r25	; 0x0b
    1b2e:	28 e2       	ldi	r18, 0x28	; 40
    1b30:	42 e3       	ldi	r20, 0x32	; 50
    1b32:	6a e5       	ldi	r22, 0x5A	; 90
    1b34:	80 e8       	ldi	r24, 0x80	; 128
    1b36:	94 e0       	ldi	r25, 0x04	; 4
    1b38:	0e 94 04 16 	call	0x2c08	; 0x2c08 <twi_read_packet>
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	98 2f       	mov	r25, r24
    1b42:	88 27       	eor	r24, r24
    1b44:	29 81       	ldd	r18, Y+1	; 0x01
    1b46:	82 2b       	or	r24, r18
    1b48:	f6 01       	movw	r30, r12
    1b4a:	84 87       	std	Z+12, r24	; 0x0c
    1b4c:	95 87       	std	Z+13, r25	; 0x0d
    1b4e:	2a e2       	ldi	r18, 0x2A	; 42
    1b50:	42 e3       	ldi	r20, 0x32	; 50
    1b52:	6a e5       	ldi	r22, 0x5A	; 90
    1b54:	80 e8       	ldi	r24, 0x80	; 128
    1b56:	94 e0       	ldi	r25, 0x04	; 4
    1b58:	0e 94 04 16 	call	0x2c08	; 0x2c08 <twi_read_packet>
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	98 2f       	mov	r25, r24
    1b62:	88 27       	eor	r24, r24
    1b64:	29 81       	ldd	r18, Y+1	; 0x01
    1b66:	82 2b       	or	r24, r18
    1b68:	f6 01       	movw	r30, r12
    1b6a:	86 87       	std	Z+14, r24	; 0x0e
    1b6c:	97 87       	std	Z+15, r25	; 0x0f
    1b6e:	24 e2       	ldi	r18, 0x24	; 36
    1b70:	42 e3       	ldi	r20, 0x32	; 50
    1b72:	6a e5       	ldi	r22, 0x5A	; 90
    1b74:	80 e8       	ldi	r24, 0x80	; 128
    1b76:	94 e0       	ldi	r25, 0x04	; 4
    1b78:	0e 94 04 16 	call	0x2c08	; 0x2c08 <twi_read_packet>
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	98 2f       	mov	r25, r24
    1b82:	88 27       	eor	r24, r24
    1b84:	29 81       	ldd	r18, Y+1	; 0x01
    1b86:	82 2b       	or	r24, r18
    1b88:	f6 01       	movw	r30, r12
    1b8a:	80 87       	std	Z+8, r24	; 0x08
    1b8c:	91 87       	std	Z+9, r25	; 0x09
    1b8e:	22 e2       	ldi	r18, 0x22	; 34
    1b90:	42 e3       	ldi	r20, 0x32	; 50
    1b92:	6a e5       	ldi	r22, 0x5A	; 90
    1b94:	80 e8       	ldi	r24, 0x80	; 128
    1b96:	94 e0       	ldi	r25, 0x04	; 4
    1b98:	0e 94 04 16 	call	0x2c08	; 0x2c08 <twi_read_packet>
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	98 2f       	mov	r25, r24
    1ba2:	88 27       	eor	r24, r24
    1ba4:	29 81       	ldd	r18, Y+1	; 0x01
    1ba6:	82 2b       	or	r24, r18
    1ba8:	f6 01       	movw	r30, r12
    1baa:	86 83       	std	Z+6, r24	; 0x06
    1bac:	97 83       	std	Z+7, r25	; 0x07
    1bae:	82 e9       	ldi	r24, 0x92	; 146
    1bb0:	96 e2       	ldi	r25, 0x26	; 38
    1bb2:	0e 94 99 18 	call	0x3132	; 0x3132 <puts>
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	ef 90       	pop	r14
    1bc6:	df 90       	pop	r13
    1bc8:	cf 90       	pop	r12
    1bca:	08 95       	ret

00001bcc <Si114xNop>:
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	32 cf       	rjmp	.-412    	; 0x1a34 <_sendCmd>
    1bd0:	08 95       	ret

00001bd2 <Si114xPsAlsAuto>:
    1bd2:	6f e0       	ldi	r22, 0x0F	; 15
    1bd4:	2f cf       	rjmp	.-418    	; 0x1a34 <_sendCmd>
    1bd6:	08 95       	ret

00001bd8 <Si114xParamSet>:

//-----------------------------------------------------------------------------
// Si114xParamSet writes to the PARAM_WR and CMD register
//
s16 Si114xParamSet(HANDLE si114x_handle, u8 address, u8 value)
{
    1bd8:	cf 92       	push	r12
    1bda:	df 92       	push	r13
    1bdc:	ef 92       	push	r14
    1bde:	ff 92       	push	r15
    1be0:	0f 93       	push	r16
    1be2:	1f 93       	push	r17
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <Si114xParamSet+0x12>
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	8c 01       	movw	r16, r24
    1bf0:	d6 2e       	mov	r13, r22
    1bf2:	c4 2e       	mov	r12, r20
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1bf4:	60 e3       	ldi	r22, 0x30	; 48
    1bf6:	c8 01       	movw	r24, r16
    1bf8:	69 d4       	rcall	.+2258   	; 0x24cc <Si114xReadFromRegister>
		if (retval == 1) break;
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	79 f0       	breq	.+30     	; 0x1c1e <Si114xParamSet+0x46>
		if (retval <  0) return retval;
    1c00:	99 23       	and	r25, r25
    1c02:	c4 f7       	brge	.-16     	; 0x1bf4 <Si114xParamSet+0x1c>
    1c04:	1e c0       	rjmp	.+60     	; 0x1c42 <Si114xParamSet+0x6a>

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
	if (retval != 0) return retval;

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    1c06:	60 e2       	ldi	r22, 0x20	; 32
    1c08:	c8 01       	movw	r24, r16
    1c0a:	60 d4       	rcall	.+2240   	; 0x24cc <Si114xReadFromRegister>
    1c0c:	8e 15       	cp	r24, r14
    1c0e:	9f 05       	cpc	r25, r15
    1c10:	d1 f3       	breq	.-12     	; 0x1c06 <Si114xParamSet+0x2e>
    1c12:	18 16       	cp	r1, r24
    1c14:	19 06       	cpc	r1, r25
    1c16:	ac f4       	brge	.+42     	; 0x1c42 <Si114xParamSet+0x6a>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	12 c0       	rjmp	.+36     	; 0x1c42 <Si114xParamSet+0x6a>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1c1e:	60 e2       	ldi	r22, 0x20	; 32
    1c20:	c8 01       	movw	r24, r16
    1c22:	54 d4       	rcall	.+2216   	; 0x24cc <Si114xReadFromRegister>
    1c24:	7c 01       	movw	r14, r24

	buffer[0]= value;
    1c26:	c9 82       	std	Y+1, r12	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    1c28:	8d 2d       	mov	r24, r13
    1c2a:	8f 71       	andi	r24, 0x1F	; 31
    1c2c:	80 56       	subi	r24, 0x60	; 96
    1c2e:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    1c30:	9e 01       	movw	r18, r28
    1c32:	2f 5f       	subi	r18, 0xFF	; 255
    1c34:	3f 4f       	sbci	r19, 0xFF	; 255
    1c36:	42 e0       	ldi	r20, 0x02	; 2
    1c38:	67 e1       	ldi	r22, 0x17	; 23
    1c3a:	c8 01       	movw	r24, r16
    1c3c:	63 d4       	rcall	.+2246   	; 0x2504 <Si114xBlockWrite>
	if (retval != 0) return retval;
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	11 f3       	breq	.-60     	; 0x1c06 <Si114xParamSet+0x2e>

	if(retval < 0)
	return retval;
	else
	return 0;
}
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	df 90       	pop	r13
    1c54:	cf 90       	pop	r12
    1c56:	08 95       	ret

00001c58 <Si114xPauseAll>:
{
	return _sendCmd(si114x_handle,0x0B);
}

s16 Si114xPauseAll(HANDLE si114x_handle)
{
    1c58:	cf 93       	push	r28
    1c5a:	df 93       	push	r29
    1c5c:	ec 01       	movw	r28, r24
	while (1)
	{
		// Keep sending nops until the response is zero
		while (1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    1c5e:	60 e2       	ldi	r22, 0x20	; 32
    1c60:	ce 01       	movw	r24, r28
    1c62:	34 d4       	rcall	.+2152   	; 0x24cc <Si114xReadFromRegister>
    1c64:	89 2b       	or	r24, r25
    1c66:	19 f0       	breq	.+6      	; 0x1c6e <Si114xPauseAll+0x16>
			break;
			else
			Si114xNop(si114x_handle);
    1c68:	ce 01       	movw	r24, r28
    1c6a:	b0 df       	rcall	.-160    	; 0x1bcc <Si114xNop>
		}
    1c6c:	f8 cf       	rjmp	.-16     	; 0x1c5e <Si114xPauseAll+0x6>

//-----------------------------------------------------------------------------
// use this to pause measurements
static s16 _PsAlsPause (HANDLE si114x_handle)
{
	return _sendCmd(si114x_handle,0x0B);
    1c6e:	6b e0       	ldi	r22, 0x0B	; 11
    1c70:	ce 01       	movw	r24, r28
    1c72:	e0 de       	rcall	.-576    	; 0x1a34 <_sendCmd>
		_PsAlsPause(si114x_handle);

		// Wait for response
		while(1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    1c74:	60 e2       	ldi	r22, 0x20	; 32
    1c76:	ce 01       	movw	r24, r28
    1c78:	29 d4       	rcall	.+2130   	; 0x24cc <Si114xReadFromRegister>
    1c7a:	89 2b       	or	r24, r25
    1c7c:	d9 f3       	breq	.-10     	; 0x1c74 <Si114xPauseAll+0x1c>
			break;
		}

		// When the PsAlsPause() response is good, we expect it to be a '1'.
		if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
    1c7e:	60 e2       	ldi	r22, 0x20	; 32
    1c80:	ce 01       	movw	r24, r28
    1c82:	24 d4       	rcall	.+2120   	; 0x24cc <Si114xReadFromRegister>
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	59 f7       	brne	.-42     	; 0x1c5e <Si114xPauseAll+0x6>
		break;  // otherwise, start over.
	}
	return 0;
}
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	08 95       	ret

00001c92 <si114x_reset>:
	return 0;
}


s16 si114x_reset(HANDLE si114x_handle)
{
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	ec 01       	movw	r28, r24
	//
	// delay_10ms();
	// delay_10ms();
	// delay_10ms();

	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	68 e0       	ldi	r22, 0x08	; 8
    1ca0:	f8 d3       	rcall	.+2032   	; 0x2492 <Si114xWriteToRegister>
    1ca2:	8c 01       	movw	r16, r24
	retval+=Si114xPauseAll(si114x_handle);
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	d8 df       	rcall	.-80     	; 0x1c58 <Si114xPauseAll>
    1ca8:	08 0f       	add	r16, r24
    1caa:	19 1f       	adc	r17, r25

	// The clearing of the registers could be redundant, but it is okay.
	// This is to make sure that these registers are cleared.
	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    1cac:	40 e0       	ldi	r20, 0x00	; 0
    1cae:	68 e0       	ldi	r22, 0x08	; 8
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	ef d3       	rcall	.+2014   	; 0x2492 <Si114xWriteToRegister>
    1cb4:	08 0f       	add	r16, r24
    1cb6:	19 1f       	adc	r17, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	64 e0       	ldi	r22, 0x04	; 4
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	e9 d3       	rcall	.+2002   	; 0x2492 <Si114xWriteToRegister>
    1cc0:	08 0f       	add	r16, r24
    1cc2:	19 1f       	adc	r17, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	65 e0       	ldi	r22, 0x05	; 5
    1cc8:	ce 01       	movw	r24, r28
    1cca:	e3 d3       	rcall	.+1990   	; 0x2492 <Si114xWriteToRegister>
    1ccc:	08 0f       	add	r16, r24
    1cce:	19 1f       	adc	r17, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    1cd0:	40 e0       	ldi	r20, 0x00	; 0
    1cd2:	66 e0       	ldi	r22, 0x06	; 6
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	dd d3       	rcall	.+1978   	; 0x2492 <Si114xWriteToRegister>
    1cd8:	08 0f       	add	r16, r24
    1cda:	19 1f       	adc	r17, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
    1cde:	63 e0       	ldi	r22, 0x03	; 3
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	d7 d3       	rcall	.+1966   	; 0x2492 <Si114xWriteToRegister>
    1ce4:	08 0f       	add	r16, r24
    1ce6:	19 1f       	adc	r17, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
    1ce8:	4f ef       	ldi	r20, 0xFF	; 255
    1cea:	61 e2       	ldi	r22, 0x21	; 33
    1cec:	ce 01       	movw	r24, r28
    1cee:	d1 d3       	rcall	.+1954   	; 0x2492 <Si114xWriteToRegister>
    1cf0:	08 0f       	add	r16, r24
    1cf2:	19 1f       	adc	r17, r25

	// Perform the Reset Command
	retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
    1cf6:	68 e1       	ldi	r22, 0x18	; 24
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	cb d3       	rcall	.+1942   	; 0x2492 <Si114xWriteToRegister>
    1cfc:	08 0f       	add	r16, r24
    1cfe:	19 1f       	adc	r17, r25

	// Delay for 10 ms. This delay is needed to allow the Si114x
	// to perform internal reset sequence.
	delay_10ms();
    1d00:	11 d4       	rcall	.+2082   	; 0x2524 <delay_10ms>

	// Write Hardware Key
	retval+=Si114xWriteToRegister(si114x_handle, REG_HW_KEY, HW_KEY_VAL0);
    1d02:	47 e1       	ldi	r20, 0x17	; 23
    1d04:	67 e0       	ldi	r22, 0x07	; 7
    1d06:	ce 01       	movw	r24, r28
    1d08:	c4 d3       	rcall	.+1928   	; 0x2492 <Si114xWriteToRegister>

	return retval;
}
    1d0a:	80 0f       	add	r24, r16
    1d0c:	91 1f       	adc	r25, r17
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	08 95       	ret

00001d18 <si114x_init>:
	
	return 0;
}

s16 si114x_init(HANDLE si114x_handle)
{
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	ec 01       	movw	r28, r24
	u8  code ps2ledsel     = LED2_EN;
	u8  code ps3ledsel     = LED3_EN;


	// Turn off RTC
	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,     0 );
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	68 e0       	ldi	r22, 0x08	; 8
    1d26:	b5 d3       	rcall	.+1898   	; 0x2492 <Si114xWriteToRegister>
    1d28:	8c 01       	movw	r16, r24
	retval+=Si114xWriteToRegister(si114x_handle, REG_PS_RATE,       0 );
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	6a e0       	ldi	r22, 0x0A	; 10
    1d2e:	ce 01       	movw	r24, r28
    1d30:	b0 d3       	rcall	.+1888   	; 0x2492 <Si114xWriteToRegister>
    1d32:	08 0f       	add	r16, r24
    1d34:	19 1f       	adc	r17, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE,      0 );
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	69 e0       	ldi	r22, 0x09	; 9
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	aa d3       	rcall	.+1876   	; 0x2492 <Si114xWriteToRegister>
    1d3e:	08 0f       	add	r16, r24
    1d40:	19 1f       	adc	r17, r25
	//     1. Pauses all prior measurements
	//     2. Clear  i2c registers that need to be cleared
	//     3. Clears irq status to make sure INT* is negated
	//     4. Delays 10 ms
	//     5. Sends HW Key
	retval+=si114x_reset(si114x_handle);
    1d42:	ce 01       	movw	r24, r28
    1d44:	a6 df       	rcall	.-180    	; 0x1c92 <si114x_reset>
    1d46:	08 0f       	add	r16, r24
    1d48:	19 1f       	adc	r17, r25
	{
		u8 i21, i3;

		i21 = (current_LED2<<4) + current_LED1;
		i3  = current_LED3;
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_LED21, i21);
    1d4a:	45 e5       	ldi	r20, 0x55	; 85
    1d4c:	6f e0       	ldi	r22, 0x0F	; 15
    1d4e:	ce 01       	movw	r24, r28
    1d50:	a0 d3       	rcall	.+1856   	; 0x2492 <Si114xWriteToRegister>
    1d52:	08 0f       	add	r16, r24
    1d54:	19 1f       	adc	r17, r25
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_LED3 , i3);
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	60 e1       	ldi	r22, 0x10	; 16
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	9a d3       	rcall	.+1844   	; 0x2492 <Si114xWriteToRegister>
    1d5e:	08 0f       	add	r16, r24
    1d60:	19 1f       	adc	r17, r25
	// Valid Tasks are: ALS_VIS_TASK, ALS_IR_TASK, PS1_TASK
	//                  PS2_TASK, PS3_TASK and AUX_TASK
	// However, if we are passed a 'negative' task, we will
	// turn on ALS_IR, ALS_VIS and PS1. Otherwise, we will use the
	// task list specified by the caller.
	retval+=Si114xParamSet(si114x_handle, PARAM_CH_LIST, tasklist);
    1d62:	47 e7       	ldi	r20, 0x77	; 119
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	ce 01       	movw	r24, r28
    1d68:	37 df       	rcall	.-402    	; 0x1bd8 <Si114xParamSet>
    1d6a:	08 0f       	add	r16, r24
    1d6c:	19 1f       	adc	r17, r25
	
	// Set IRQ Modes and INT CFG to interrupt on every sample
	retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG, ICG_INTOE);
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	63 e0       	ldi	r22, 0x03	; 3
    1d72:	ce 01       	movw	r24, r28
    1d74:	8e d3       	rcall	.+1820   	; 0x2492 <Si114xWriteToRegister>
    1d76:	08 0f       	add	r16, r24
    1d78:	19 1f       	adc	r17, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE,
    1d7a:	4d e1       	ldi	r20, 0x1D	; 29
    1d7c:	64 e0       	ldi	r22, 0x04	; 4
    1d7e:	ce 01       	movw	r24, r28
    1d80:	88 d3       	rcall	.+1808   	; 0x2492 <Si114xWriteToRegister>
    1d82:	08 0f       	add	r16, r24
    1d84:	19 1f       	adc	r17, r25
	IE_ALS_EVRYSAMPLE +
	IE_PS1_EVRYSAMPLE +
	IE_PS2_EVRYSAMPLE +
	IE_PS3_EVRYSAMPLE );

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	65 e0       	ldi	r22, 0x05	; 5
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	82 d3       	rcall	.+1796   	; 0x2492 <Si114xWriteToRegister>
    1d8e:	08 0f       	add	r16, r24
    1d90:	19 1f       	adc	r17, r25
	IM1_ALS_EVRYSAMPLE +
	IM1_PS1_EVRYSAMPLE +
	IM1_PS2_EVRYSAMPLE );

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	66 e0       	ldi	r22, 0x06	; 6
    1d96:	ce 01       	movw	r24, r28
    1d98:	7c d3       	rcall	.+1784   	; 0x2492 <Si114xWriteToRegister>
    1d9a:	08 0f       	add	r16, r24
    1d9c:	19 1f       	adc	r17, r25
	IM2_PS3_EVRYSAMPLE);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x03*ps1pdsize);
    1d9e:	43 e0       	ldi	r20, 0x03	; 3
    1da0:	67 e0       	ldi	r22, 0x07	; 7
    1da2:	ce 01       	movw	r24, r28
    1da4:	19 df       	rcall	.-462    	; 0x1bd8 <Si114xParamSet>
    1da6:	08 0f       	add	r16, r24
    1da8:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x03*ps2pdsize);
    1daa:	43 e0       	ldi	r20, 0x03	; 3
    1dac:	68 e0       	ldi	r22, 0x08	; 8
    1dae:	ce 01       	movw	r24, r28
    1db0:	13 df       	rcall	.-474    	; 0x1bd8 <Si114xParamSet>
    1db2:	08 0f       	add	r16, r24
    1db4:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x03*ps3pdsize);
    1db6:	43 e0       	ldi	r20, 0x03	; 3
    1db8:	69 e0       	ldi	r22, 0x09	; 9
    1dba:	ce 01       	movw	r24, r28
    1dbc:	0d df       	rcall	.-486    	; 0x1bd8 <Si114xParamSet>
    1dbe:	08 0f       	add	r16, r24
    1dc0:	19 1f       	adc	r17, r25

	retval+=Si114xParamSet(si114x_handle, PARAM_IR_ADC_MUX,  0x03*irpd);
    1dc2:	43 e0       	ldi	r20, 0x03	; 3
    1dc4:	6e e0       	ldi	r22, 0x0E	; 14
    1dc6:	ce 01       	movw	r24, r28
    1dc8:	07 df       	rcall	.-498    	; 0x1bd8 <Si114xParamSet>
    1dca:	08 0f       	add	r16, r24
    1dcc:	19 1f       	adc	r17, r25

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	6b e0       	ldi	r22, 0x0B	; 11
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	01 df       	rcall	.-510    	; 0x1bd8 <Si114xParamSet>
    1dd6:	08 0f       	add	r16, r24
    1dd8:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_GAIN, irgain);
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	6e e1       	ldi	r22, 0x1E	; 30
    1dde:	ce 01       	movw	r24, r28
    1de0:	fb de       	rcall	.-522    	; 0x1bd8 <Si114xParamSet>
    1de2:	08 0f       	add	r16, r24
    1de4:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_GAIN, visgain);
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	61 e1       	ldi	r22, 0x11	; 17
    1dea:	ce 01       	movw	r24, r28
    1dec:	f5 de       	rcall	.-534    	; 0x1bd8 <Si114xParamSet>
    1dee:	08 0f       	add	r16, r24
    1df0:	19 1f       	adc	r17, r25
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
    1df2:	41 e2       	ldi	r20, 0x21	; 33
    1df4:	62 e0       	ldi	r22, 0x02	; 2
    1df6:	ce 01       	movw	r24, r28
    1df8:	ef de       	rcall	.-546    	; 0x1bd8 <Si114xParamSet>
    1dfa:	08 0f       	add	r16, r24
    1dfc:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED3_SELECT,  ps3ledsel);
    1dfe:	44 e0       	ldi	r20, 0x04	; 4
    1e00:	63 e0       	ldi	r22, 0x03	; 3
    1e02:	ce 01       	movw	r24, r28
    1e04:	e9 de       	rcall	.-558    	; 0x1bd8 <Si114xParamSet>
    1e06:	08 0f       	add	r16, r24
    1e08:	19 1f       	adc	r17, r25
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
    1e0a:	40 e7       	ldi	r20, 0x70	; 112
    1e0c:	6a e0       	ldi	r22, 0x0A	; 10
    1e0e:	ce 01       	movw	r24, r28
    1e10:	e3 de       	rcall	.-570    	; 0x1bd8 <Si114xParamSet>
    1e12:	08 0f       	add	r16, r24
    1e14:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
    1e16:	40 e7       	ldi	r20, 0x70	; 112
    1e18:	6d e1       	ldi	r22, 0x1D	; 29
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	dd de       	rcall	.-582    	; 0x1bd8 <Si114xParamSet>
    1e1e:	08 0f       	add	r16, r24
    1e20:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_COUNTER, RECCNT_511);
    1e22:	40 e7       	ldi	r20, 0x70	; 112
    1e24:	60 e1       	ldi	r22, 0x10	; 16
    1e26:	ce 01       	movw	r24, r28
    1e28:	d7 de       	rcall	.-594    	; 0x1bd8 <Si114xParamSet>
    1e2a:	08 0f       	add	r16, r24
    1e2c:	19 1f       	adc	r17, r25

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC,     RANGE_EN*psrange + PS_MEAS_MODE);
    1e2e:	44 e0       	ldi	r20, 0x04	; 4
    1e30:	6c e0       	ldi	r22, 0x0C	; 12
    1e32:	ce 01       	movw	r24, r28
    1e34:	d1 de       	rcall	.-606    	; 0x1bd8 <Si114xParamSet>
    1e36:	08 0f       	add	r16, r24
    1e38:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN*irrange );
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	6f e1       	ldi	r22, 0x1F	; 31
    1e3e:	ce 01       	movw	r24, r28
    1e40:	cb de       	rcall	.-618    	; 0x1bd8 <Si114xParamSet>
    1e42:	08 0f       	add	r16, r24
    1e44:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_MISC,RANGE_EN*visrange);
    1e46:	40 e2       	ldi	r20, 0x20	; 32
    1e48:	62 e1       	ldi	r22, 0x12	; 18
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	c5 de       	rcall	.-630    	; 0x1bd8 <Si114xParamSet>
    1e4e:	08 0f       	add	r16, r24
    1e50:	19 1f       	adc	r17, r25
		//    0xa0 = Device Wakes up every ~30 ms
		//    0x94 = Device Wakes up every ~20 ms
		//    0x84 = Device Wakes up every ~10 ms
		//    0xB9 = Device Wakes up every ~100 ms
		//    0xFF = Device Wakes up every ~2 sec
		retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE, measrate);
    1e52:	44 e9       	ldi	r20, 0x94	; 148
    1e54:	68 e0       	ldi	r22, 0x08	; 8
    1e56:	ce 01       	movw	r24, r28
    1e58:	1c d3       	rcall	.+1592   	; 0x2492 <Si114xWriteToRegister>
    1e5a:	08 0f       	add	r16, r24
    1e5c:	19 1f       	adc	r17, r25

		// if 0x08, PS1, PS2 and PS3 made every time device wakes up.
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_RATE,   psrate);
    1e5e:	48 e0       	ldi	r20, 0x08	; 8
    1e60:	6a e0       	ldi	r22, 0x0A	; 10
    1e62:	ce 01       	movw	r24, r28
    1e64:	16 d3       	rcall	.+1580   	; 0x2492 <Si114xWriteToRegister>
    1e66:	08 0f       	add	r16, r24
    1e68:	19 1f       	adc	r17, r25

		// if 0x08, VIS, IR, AUX Measurements every time device wakes up.
		retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE,  alsrate);
    1e6a:	48 e0       	ldi	r20, 0x08	; 8
    1e6c:	69 e0       	ldi	r22, 0x09	; 9
    1e6e:	ce 01       	movw	r24, r28
    1e70:	10 d3       	rcall	.+1568   	; 0x2492 <Si114xWriteToRegister>
    1e72:	08 0f       	add	r16, r24
    1e74:	19 1f       	adc	r17, r25

		// Enable Autonomous Operation
		retval+=Si114xPsAlsAuto(si114x_handle);
    1e76:	ce 01       	movw	r24, r28
    1e78:	ac de       	rcall	.-680    	; 0x1bd2 <Si114xPsAlsAuto>
		// If nothing went wrong after all of this time, the value
		// returned will be 0. Otherwise, it will be some negative
		// number
	}
	return retval;
}
    1e7a:	80 0f       	add	r24, r16
    1e7c:	91 1f       	adc	r25, r17
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	1f 91       	pop	r17
    1e84:	0f 91       	pop	r16
    1e86:	08 95       	ret

00001e88 <si114x_setup>:
    1e88:	2f ef       	ldi	r18, 0xFF	; 255
    1e8a:	81 ee       	ldi	r24, 0xE1	; 225
    1e8c:	94 e0       	ldi	r25, 0x04	; 4
    1e8e:	21 50       	subi	r18, 0x01	; 1
    1e90:	80 40       	sbci	r24, 0x00	; 0
    1e92:	90 40       	sbci	r25, 0x00	; 0
    1e94:	e1 f7       	brne	.-8      	; 0x1e8e <si114x_setup+0x6>
    1e96:	00 c0       	rjmp	.+0      	; 0x1e98 <si114x_setup+0x10>
    1e98:	00 00       	nop
#include <avr/io.h>

void si114x_setup(void)
{
	_delay_ms(50);
	si114x_reset(SI114X_ADDR);
    1e9a:	8a e5       	ldi	r24, 0x5A	; 90
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	f9 de       	rcall	.-526    	; 0x1c92 <si114x_reset>
    1ea0:	2f ef       	ldi	r18, 0xFF	; 255
    1ea2:	81 ee       	ldi	r24, 0xE1	; 225
    1ea4:	94 e0       	ldi	r25, 0x04	; 4
    1ea6:	21 50       	subi	r18, 0x01	; 1
    1ea8:	80 40       	sbci	r24, 0x00	; 0
    1eaa:	90 40       	sbci	r25, 0x00	; 0
    1eac:	e1 f7       	brne	.-8      	; 0x1ea6 <si114x_setup+0x1e>
    1eae:	00 c0       	rjmp	.+0      	; 0x1eb0 <si114x_setup+0x28>
    1eb0:	00 00       	nop
	_delay_ms(50);
	si114x_init(SI114X_ADDR);
    1eb2:	8a e5       	ldi	r24, 0x5A	; 90
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	30 df       	rcall	.-416    	; 0x1d18 <si114x_init>
    1eb8:	2f ef       	ldi	r18, 0xFF	; 255
    1eba:	81 ee       	ldi	r24, 0xE1	; 225
    1ebc:	94 e0       	ldi	r25, 0x04	; 4
    1ebe:	21 50       	subi	r18, 0x01	; 1
    1ec0:	80 40       	sbci	r24, 0x00	; 0
    1ec2:	90 40       	sbci	r25, 0x00	; 0
    1ec4:	e1 f7       	brne	.-8      	; 0x1ebe <si114x_setup+0x36>
    1ec6:	00 c0       	rjmp	.+0      	; 0x1ec8 <si114x_setup+0x40>
    1ec8:	00 00       	nop
    1eca:	08 95       	ret

00001ecc <isIRStable>:
        }
    }
}

char isIRStable( SI114X_IRQ_SAMPLE *samples)
{
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
                                        //
    u32 xdata IR = (u32) samples->ir; // Make a copy of ALS IR Reading
    
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 
    1ed8:	40 91 0f 29 	lds	r20, 0x290F
    1edc:	50 91 10 29 	lds	r21, 0x2910
    1ee0:	60 91 11 29 	lds	r22, 0x2911
    1ee4:	70 91 12 29 	lds	r23, 0x2912
    1ee8:	45 2b       	or	r20, r21
    1eea:	46 2b       	or	r20, r22
    1eec:	47 2b       	or	r20, r23
    1eee:	71 f4       	brne	.+28     	; 0x1f0c <isIRStable+0x40>
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	40 85       	ldd	r20, Z+8	; 0x08
    1ef4:	51 85       	ldd	r21, Z+9	; 0x09
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	40 93 0f 29 	sts	0x290F, r20
    1efe:	50 93 10 29 	sts	0x2910, r21
    1f02:	60 93 11 29 	sts	0x2911, r22
    1f06:	70 93 12 29 	sts	0x2912, r23
    1f0a:	07 c0       	rjmp	.+14     	; 0x1f1a <isIRStable+0x4e>

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	20 85       	ldd	r18, Z+8	; 0x08
    1f10:	31 85       	ldd	r19, Z+9	; 0x09
    1f12:	21 38       	cpi	r18, 0x81	; 129
    1f14:	3b 4b       	sbci	r19, 0xBB	; 187
    1f16:	08 f0       	brcs	.+2      	; 0x1f1a <isIRStable+0x4e>
    1f18:	53 c0       	rjmp	.+166    	; 0x1fc0 <isIRStable+0xf4>

    if( samples->ir < (IRlast + IRlast/2) && samples->ir > (IRlast - IRlast/2))
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	40 85       	ldd	r20, Z+8	; 0x08
    1f1e:	51 85       	ldd	r21, Z+9	; 0x09
    1f20:	60 e0       	ldi	r22, 0x00	; 0
    1f22:	70 e0       	ldi	r23, 0x00	; 0
    1f24:	80 91 0f 29 	lds	r24, 0x290F
    1f28:	90 91 10 29 	lds	r25, 0x2910
    1f2c:	a0 91 11 29 	lds	r26, 0x2911
    1f30:	b0 91 12 29 	lds	r27, 0x2912
    1f34:	8c 01       	movw	r16, r24
    1f36:	9d 01       	movw	r18, r26
    1f38:	36 95       	lsr	r19
    1f3a:	27 95       	ror	r18
    1f3c:	17 95       	ror	r17
    1f3e:	07 95       	ror	r16
    1f40:	68 01       	movw	r12, r16
    1f42:	79 01       	movw	r14, r18
    1f44:	c8 0e       	add	r12, r24
    1f46:	d9 1e       	adc	r13, r25
    1f48:	ea 1e       	adc	r14, r26
    1f4a:	fb 1e       	adc	r15, r27
    1f4c:	4c 15       	cp	r20, r12
    1f4e:	5d 05       	cpc	r21, r13
    1f50:	6e 05       	cpc	r22, r14
    1f52:	7f 05       	cpc	r23, r15
    1f54:	58 f5       	brcc	.+86     	; 0x1fac <isIRStable+0xe0>
    1f56:	6c 01       	movw	r12, r24
    1f58:	7d 01       	movw	r14, r26
    1f5a:	c0 1a       	sub	r12, r16
    1f5c:	d1 0a       	sbc	r13, r17
    1f5e:	e2 0a       	sbc	r14, r18
    1f60:	f3 0a       	sbc	r15, r19
    1f62:	c4 16       	cp	r12, r20
    1f64:	d5 06       	cpc	r13, r21
    1f66:	e6 06       	cpc	r14, r22
    1f68:	f7 06       	cpc	r15, r23
    1f6a:	00 f5       	brcc	.+64     	; 0x1fac <isIRStable+0xe0>
    {
        // If IR is within 3 dB, declare it stable
        // and perform some averaging
        IRlast = (samples->ir + (IRlast*3)) / 4;
    1f6c:	8c 01       	movw	r16, r24
    1f6e:	9d 01       	movw	r18, r26
    1f70:	00 0f       	add	r16, r16
    1f72:	11 1f       	adc	r17, r17
    1f74:	22 1f       	adc	r18, r18
    1f76:	33 1f       	adc	r19, r19
    1f78:	80 0f       	add	r24, r16
    1f7a:	91 1f       	adc	r25, r17
    1f7c:	a2 1f       	adc	r26, r18
    1f7e:	b3 1f       	adc	r27, r19
    1f80:	48 0f       	add	r20, r24
    1f82:	59 1f       	adc	r21, r25
    1f84:	6a 1f       	adc	r22, r26
    1f86:	7b 1f       	adc	r23, r27
    1f88:	76 95       	lsr	r23
    1f8a:	67 95       	ror	r22
    1f8c:	57 95       	ror	r21
    1f8e:	47 95       	ror	r20
    1f90:	76 95       	lsr	r23
    1f92:	67 95       	ror	r22
    1f94:	57 95       	ror	r21
    1f96:	47 95       	ror	r20
    1f98:	40 93 0f 29 	sts	0x290F, r20
    1f9c:	50 93 10 29 	sts	0x2910, r21
    1fa0:	60 93 11 29 	sts	0x2911, r22
    1fa4:	70 93 12 29 	sts	0x2912, r23
        return 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	0b c0       	rjmp	.+22     	; 0x1fc2 <isIRStable+0xf6>
    }
    else
    {
        // Otherwise, return false and update
        // new IRlast value for next time
        IRlast = samples->ir;
    1fac:	40 93 0f 29 	sts	0x290F, r20
    1fb0:	50 93 10 29 	sts	0x2910, r21
    1fb4:	60 93 11 29 	sts	0x2911, r22
    1fb8:	70 93 12 29 	sts	0x2912, r23
        return 0;
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <isIRStable+0xf6>
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
        // new IRlast value for next time
        IRlast = samples->ir;
        return 0;
    }
    return 0;
}
    1fc2:	1f 91       	pop	r17
    1fc4:	0f 91       	pop	r16
    1fc6:	ff 90       	pop	r15
    1fc8:	ef 90       	pop	r14
    1fca:	df 90       	pop	r13
    1fcc:	cf 90       	pop	r12
    1fce:	08 95       	ret

00001fd0 <IRCompensation>:
//             use { 11, 33, 33 }
//          Sm PD, PSRANGE = 1 
//             use { 23, 64, 56 }
////////////////////////////////////////////////////////////////////////////////
void IRCompensation(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u8 ircorrection[])
{
    1fd0:	0f 93       	push	r16
    1fd2:	1f 93       	push	r17
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	eb 01       	movw	r28, r22
    // Calculate correction factor based on the ALS IR + PS reading 
    // subtracting out the 256 count offset contained in both measurements
    // Full equation comes out to:
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	21 f1       	breq	.+72     	; 0x2026 <IRCompensation+0x56>
    1fde:	20 f0       	brcs	.+8      	; 0x1fe8 <IRCompensation+0x18>
    1fe0:	82 30       	cpi	r24, 0x02	; 2
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <IRCompensation+0x16>
    1fe4:	3f c0       	rjmp	.+126    	; 0x2064 <IRCompensation+0x94>
    1fe6:	5b c0       	rjmp	.+182    	; 0x209e <IRCompensation+0xce>
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    1fe8:	0a 85       	ldd	r16, Y+10	; 0x0a
    1fea:	1b 85       	ldd	r17, Y+11	; 0x0b
    1fec:	fa 01       	movw	r30, r20
    1fee:	a0 81       	ld	r26, Z
    1ff0:	88 85       	ldd	r24, Y+8	; 0x08
    1ff2:	99 85       	ldd	r25, Y+9	; 0x09
    1ff4:	a8 01       	movw	r20, r16
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	70 e0       	ldi	r23, 0x00	; 0
    1ffa:	48 0f       	add	r20, r24
    1ffc:	59 1f       	adc	r21, r25
    1ffe:	61 1d       	adc	r22, r1
    2000:	71 1d       	adc	r23, r1
    2002:	9a 01       	movw	r18, r20
    2004:	ab 01       	movw	r20, r22
    2006:	32 50       	subi	r19, 0x02	; 2
    2008:	41 09       	sbc	r20, r1
    200a:	51 09       	sbc	r21, r1
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	0e 94 36 18 	call	0x306c	; 0x306c <__muluhisi3>
            Correction = Correction/10000;
    2012:	20 e1       	ldi	r18, 0x10	; 16
    2014:	37 e2       	ldi	r19, 0x27	; 39
    2016:	40 e0       	ldi	r20, 0x00	; 0
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	f7 d7       	rcall	.+4078   	; 0x300a <__udivmodsi4>
            samples->ps1 = samples->ps1 + Correction;    
    201c:	20 0f       	add	r18, r16
    201e:	31 1f       	adc	r19, r17
    2020:	2a 87       	std	Y+10, r18	; 0x0a
    2022:	3b 87       	std	Y+11, r19	; 0x0b
            break;
    2024:	3c c0       	rjmp	.+120    	; 0x209e <IRCompensation+0xce>
        case 1:
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
    2026:	0c 85       	ldd	r16, Y+12	; 0x0c
    2028:	1d 85       	ldd	r17, Y+13	; 0x0d
    202a:	fa 01       	movw	r30, r20
    202c:	a1 81       	ldd	r26, Z+1	; 0x01
    202e:	88 85       	ldd	r24, Y+8	; 0x08
    2030:	99 85       	ldd	r25, Y+9	; 0x09
    2032:	a8 01       	movw	r20, r16
    2034:	60 e0       	ldi	r22, 0x00	; 0
    2036:	70 e0       	ldi	r23, 0x00	; 0
    2038:	48 0f       	add	r20, r24
    203a:	59 1f       	adc	r21, r25
    203c:	61 1d       	adc	r22, r1
    203e:	71 1d       	adc	r23, r1
    2040:	9a 01       	movw	r18, r20
    2042:	ab 01       	movw	r20, r22
    2044:	32 50       	subi	r19, 0x02	; 2
    2046:	41 09       	sbc	r20, r1
    2048:	51 09       	sbc	r21, r1
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	0e 94 36 18 	call	0x306c	; 0x306c <__muluhisi3>
            Correction = Correction/10000;
    2050:	20 e1       	ldi	r18, 0x10	; 16
    2052:	37 e2       	ldi	r19, 0x27	; 39
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	d8 d7       	rcall	.+4016   	; 0x300a <__udivmodsi4>
            samples->ps2 = samples->ps2 + Correction;            
    205a:	20 0f       	add	r18, r16
    205c:	31 1f       	adc	r19, r17
    205e:	2c 87       	std	Y+12, r18	; 0x0c
    2060:	3d 87       	std	Y+13, r19	; 0x0d
            break;
    2062:	1d c0       	rjmp	.+58     	; 0x209e <IRCompensation+0xce>
		case 2:
			Correction = ((u32)samples->ir + (u32)(samples->ps3) - 512) * (u32) ircorrection[proxChannel];
    2064:	0e 85       	ldd	r16, Y+14	; 0x0e
    2066:	1f 85       	ldd	r17, Y+15	; 0x0f
    2068:	fa 01       	movw	r30, r20
    206a:	a2 81       	ldd	r26, Z+2	; 0x02
    206c:	88 85       	ldd	r24, Y+8	; 0x08
    206e:	99 85       	ldd	r25, Y+9	; 0x09
    2070:	a8 01       	movw	r20, r16
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	70 e0       	ldi	r23, 0x00	; 0
    2076:	48 0f       	add	r20, r24
    2078:	59 1f       	adc	r21, r25
    207a:	61 1d       	adc	r22, r1
    207c:	71 1d       	adc	r23, r1
    207e:	9a 01       	movw	r18, r20
    2080:	ab 01       	movw	r20, r22
    2082:	32 50       	subi	r19, 0x02	; 2
    2084:	41 09       	sbc	r20, r1
    2086:	51 09       	sbc	r21, r1
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	f0 d7       	rcall	.+4064   	; 0x306c <__muluhisi3>
			Correction = Correction/10000;
    208c:	20 e1       	ldi	r18, 0x10	; 16
    208e:	37 e2       	ldi	r19, 0x27	; 39
    2090:	40 e0       	ldi	r20, 0x00	; 0
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	ba d7       	rcall	.+3956   	; 0x300a <__udivmodsi4>
			samples->ps3 = samples->ps3 + Correction;
    2096:	20 0f       	add	r18, r16
    2098:	31 1f       	adc	r19, r17
    209a:	2e 87       	std	Y+14, r18	; 0x0e
    209c:	3f 87       	std	Y+15, r19	; 0x0f
			break;
        default:
            break;
    }
}
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	08 95       	ret

000020a8 <calcBaseline>:
//          50  = Lg PD, PSRANGE=0, 180 mA 
//          10  = Lg PD, PSRANGE=1, 360 mA 
//          4  = Sm PD, PSRANGE=1, 360 mA 
////////////////////////////////////////////////////////////////////////////////
void calcBaseline(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u16 noise_margin)
{
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29

    static u16 xdata dynamic_baseline[3] = {0,0,0};

    u16 xdata *pPS;

    switch(proxChannel)
    20b0:	81 30       	cpi	r24, 0x01	; 1
    20b2:	39 f0       	breq	.+14     	; 0x20c2 <calcBaseline+0x1a>
    20b4:	18 f0       	brcs	.+6      	; 0x20bc <calcBaseline+0x14>
    20b6:	82 30       	cpi	r24, 0x02	; 2
    20b8:	39 f0       	breq	.+14     	; 0x20c8 <calcBaseline+0x20>
    20ba:	09 c0       	rjmp	.+18     	; 0x20ce <calcBaseline+0x26>
    {
        case 0:
            pPS = &samples->ps1;
    20bc:	fb 01       	movw	r30, r22
    20be:	3a 96       	adiw	r30, 0x0a	; 10
            break;
    20c0:	25 c0       	rjmp	.+74     	; 0x210c <calcBaseline+0x64>
        case 1:
            pPS = &samples->ps2;
    20c2:	fb 01       	movw	r30, r22
    20c4:	3c 96       	adiw	r30, 0x0c	; 12
            break;
    20c6:	22 c0       	rjmp	.+68     	; 0x210c <calcBaseline+0x64>
        case 2:
            pPS = &samples->ps3;
    20c8:	fb 01       	movw	r30, r22
    20ca:	3e 96       	adiw	r30, 0x0e	; 14
            break;
    20cc:	1f c0       	rjmp	.+62     	; 0x210c <calcBaseline+0x64>
        default:
            // Invalid Prox Channel. Reset all static variables 
            // to initial values
            average    = 0;
            dynamic_baseline[0] = 0;
    20ce:	10 92 09 29 	sts	0x2909, r1
    20d2:	10 92 0a 29 	sts	0x290A, r1
            dynamic_baseline[1] = 0;
    20d6:	10 92 0b 29 	sts	0x290B, r1
    20da:	10 92 0c 29 	sts	0x290C, r1
			dynamic_baseline[2] = 0;
    20de:	10 92 0d 29 	sts	0x290D, r1
    20e2:	10 92 0e 29 	sts	0x290E, r1
            rollingMax[0] = 0;
    20e6:	10 92 03 29 	sts	0x2903, r1
    20ea:	10 92 04 29 	sts	0x2904, r1
            rollingMax[1] = 0;
    20ee:	10 92 05 29 	sts	0x2905, r1
    20f2:	10 92 06 29 	sts	0x2906, r1
			rollingMax[2] = 0;
    20f6:	10 92 07 29 	sts	0x2907, r1
    20fa:	10 92 08 29 	sts	0x2908, r1
            Maxcount[0]   = 0;
    20fe:	10 92 00 29 	sts	0x2900, r1
            Maxcount[1]   = 0;
    2102:	10 92 01 29 	sts	0x2901, r1
			Maxcount[2]   = 0;
    2106:	10 92 02 29 	sts	0x2902, r1
            return;
    210a:	cb c0       	rjmp	.+406    	; 0x22a2 <calcBaseline+0x1fa>
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	dc 01       	movw	r26, r24
    2110:	aa 0f       	add	r26, r26
    2112:	bb 1f       	adc	r27, r27
    2114:	a7 5f       	subi	r26, 0xF7	; 247
    2116:	b6 4d       	sbci	r27, 0xD6	; 214
    2118:	2d 91       	ld	r18, X+
    211a:	3c 91       	ld	r19, X
    211c:	23 2b       	or	r18, r19
    211e:	d9 f4       	brne	.+54     	; 0x2156 <calcBaseline+0xae>
    2120:	60 81       	ld	r22, Z
    2122:	71 81       	ldd	r23, Z+1	; 0x01
    2124:	dc 01       	movw	r26, r24
    2126:	aa 0f       	add	r26, r26
    2128:	bb 1f       	adc	r27, r27
    212a:	ad 5e       	subi	r26, 0xED	; 237
    212c:	b6 4d       	sbci	r27, 0xD6	; 214
    212e:	2d 91       	ld	r18, X+
    2130:	3c 91       	ld	r19, X
    2132:	62 17       	cp	r22, r18
    2134:	73 07       	cpc	r23, r19
    2136:	40 f4       	brcc	.+16     	; 0x2148 <calcBaseline+0xa0>
    {
       dynamic_baseline[proxChannel] = *pPS;
    2138:	dc 01       	movw	r26, r24
    213a:	aa 0f       	add	r26, r26
    213c:	bb 1f       	adc	r27, r27
    213e:	a7 5f       	subi	r26, 0xF7	; 247
    2140:	b6 4d       	sbci	r27, 0xD6	; 214
    2142:	6d 93       	st	X+, r22
    2144:	7c 93       	st	X, r23
    2146:	07 c0       	rjmp	.+14     	; 0x2156 <calcBaseline+0xae>
    } else if ( dynamic_baseline[proxChannel] == 0)
    {
       dynamic_baseline[proxChannel] = maxLeakage[proxChannel];
    2148:	dc 01       	movw	r26, r24
    214a:	aa 0f       	add	r26, r26
    214c:	bb 1f       	adc	r27, r27
    214e:	a7 5f       	subi	r26, 0xF7	; 247
    2150:	b6 4d       	sbci	r27, 0xD6	; 214
    2152:	2d 93       	st	X+, r18
    2154:	3c 93       	st	X, r19
    } 

    // Only process samples which are below the maxLeakage values, anything 
    // higher is a signal created by an object in front of the system which 
    // should not be baselined
    if ( *pPS < maxLeakage[proxChannel] )
    2156:	60 81       	ld	r22, Z
    2158:	71 81       	ldd	r23, Z+1	; 0x01
    215a:	fc 01       	movw	r30, r24
    215c:	ee 0f       	add	r30, r30
    215e:	ff 1f       	adc	r31, r31
    2160:	ed 5e       	subi	r30, 0xED	; 237
    2162:	f6 4d       	sbci	r31, 0xD6	; 214
    2164:	20 81       	ld	r18, Z
    2166:	31 81       	ldd	r19, Z+1	; 0x01
    2168:	62 17       	cp	r22, r18
    216a:	73 07       	cpc	r23, r19
    216c:	08 f0       	brcs	.+2      	; 0x2170 <calcBaseline+0xc8>
    216e:	77 c0       	rjmp	.+238    	; 0x225e <calcBaseline+0x1b6>
    {
        average = dynamic_baseline[proxChannel]*7;
    2170:	fc 01       	movw	r30, r24
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	e7 5f       	subi	r30, 0xF7	; 247
    2178:	f6 4d       	sbci	r31, 0xD6	; 214
    217a:	01 90       	ld	r0, Z+
    217c:	f0 81       	ld	r31, Z
    217e:	e0 2d       	mov	r30, r0
    2180:	df 01       	movw	r26, r30
    2182:	aa 0f       	add	r26, r26
    2184:	bb 1f       	adc	r27, r27
    2186:	aa 0f       	add	r26, r26
    2188:	bb 1f       	adc	r27, r27
    218a:	aa 0f       	add	r26, r26
    218c:	bb 1f       	adc	r27, r27
    218e:	ae 1b       	sub	r26, r30
    2190:	bf 0b       	sbc	r27, r31
        average = average + (u32)(*pPS);
    2192:	8b 01       	movw	r16, r22
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	0a 0f       	add	r16, r26
    219a:	1b 1f       	adc	r17, r27
    219c:	21 1d       	adc	r18, r1
    219e:	31 1d       	adc	r19, r1
        average = average/8;
    21a0:	68 94       	set
    21a2:	12 f8       	bld	r1, 2
    21a4:	36 95       	lsr	r19
    21a6:	27 95       	ror	r18
    21a8:	17 95       	ror	r17
    21aa:	07 95       	ror	r16
    21ac:	16 94       	lsr	r1
    21ae:	d1 f7       	brne	.-12     	; 0x21a4 <calcBaseline+0xfc>
        // If the new sample has not changed the baseline average by a large 
        // amount, then allow the rollingMax variable to update. If the new 
        // sample did move the baseline average by a lot, then it's possible 
        // it was created by a proximity event. So, do not consider this part 
        // of the rollingMax
        if ( dynamic_baseline[proxChannel] <= (u16)average + (u16)average/64
    21b0:	d8 01       	movw	r26, r16
    21b2:	00 24       	eor	r0, r0
    21b4:	aa 0f       	add	r26, r26
    21b6:	bb 1f       	adc	r27, r27
    21b8:	00 1c       	adc	r0, r0
    21ba:	aa 0f       	add	r26, r26
    21bc:	bb 1f       	adc	r27, r27
    21be:	00 1c       	adc	r0, r0
    21c0:	ab 2f       	mov	r26, r27
    21c2:	b0 2d       	mov	r27, r0
    21c4:	ed 01       	movw	r28, r26
    21c6:	c0 0f       	add	r28, r16
    21c8:	d1 1f       	adc	r29, r17
    21ca:	ce 17       	cp	r28, r30
    21cc:	df 07       	cpc	r29, r31
    21ce:	08 f4       	brcc	.+2      	; 0x21d2 <calcBaseline+0x12a>
    21d0:	3f c0       	rjmp	.+126    	; 0x2250 <calcBaseline+0x1a8>
            && dynamic_baseline[proxChannel] >= (u16)average - (u16)average/64)
    21d2:	e8 01       	movw	r28, r16
    21d4:	ca 1b       	sub	r28, r26
    21d6:	db 0b       	sbc	r29, r27
    21d8:	ec 17       	cp	r30, r28
    21da:	fd 07       	cpc	r31, r29
    21dc:	c8 f1       	brcs	.+114    	; 0x2250 <calcBaseline+0x1a8>
        {
            if ( rollingMax[proxChannel] == 0 )
    21de:	fc 01       	movw	r30, r24
    21e0:	ee 0f       	add	r30, r30
    21e2:	ff 1f       	adc	r31, r31
    21e4:	ed 5f       	subi	r30, 0xFD	; 253
    21e6:	f6 4d       	sbci	r31, 0xD6	; 214
    21e8:	01 90       	ld	r0, Z+
    21ea:	f0 81       	ld	r31, Z
    21ec:	e0 2d       	mov	r30, r0
    21ee:	30 97       	sbiw	r30, 0x00	; 0
    21f0:	61 f4       	brne	.+24     	; 0x220a <calcBaseline+0x162>
            {
                rollingMax[proxChannel] = *pPS;
    21f2:	fc 01       	movw	r30, r24
    21f4:	ee 0f       	add	r30, r30
    21f6:	ff 1f       	adc	r31, r31
    21f8:	ed 5f       	subi	r30, 0xFD	; 253
    21fa:	f6 4d       	sbci	r31, 0xD6	; 214
    21fc:	60 83       	st	Z, r22
    21fe:	71 83       	std	Z+1, r23	; 0x01
                Maxcount[proxChannel] = 0;
    2200:	fc 01       	movw	r30, r24
    2202:	e0 50       	subi	r30, 0x00	; 0
    2204:	f7 4d       	sbci	r31, 0xD7	; 215
    2206:	10 82       	st	Z, r1
    2208:	23 c0       	rjmp	.+70     	; 0x2250 <calcBaseline+0x1a8>
            } 
            else if ( rollingMax[proxChannel] >= *pPS )
    220a:	e6 17       	cp	r30, r22
    220c:	f7 07       	cpc	r31, r23
    220e:	a8 f0       	brcs	.+42     	; 0x223a <calcBaseline+0x192>
            {
                (Maxcount[proxChannel]) += 1;
    2210:	dc 01       	movw	r26, r24
    2212:	a0 50       	subi	r26, 0x00	; 0
    2214:	b7 4d       	sbci	r27, 0xD7	; 215
    2216:	6c 91       	ld	r22, X
    2218:	6f 5f       	subi	r22, 0xFF	; 255
    221a:	6c 93       	st	X, r22
                if ( Maxcount[proxChannel] > 64 )
    221c:	61 34       	cpi	r22, 0x41	; 65
    221e:	c0 f0       	brcs	.+48     	; 0x2250 <calcBaseline+0x1a8>
                {
                    (rollingMax[proxChannel]) -= 1;
    2220:	dc 01       	movw	r26, r24
    2222:	aa 0f       	add	r26, r26
    2224:	bb 1f       	adc	r27, r27
    2226:	ad 5f       	subi	r26, 0xFD	; 253
    2228:	b6 4d       	sbci	r27, 0xD6	; 214
    222a:	31 97       	sbiw	r30, 0x01	; 1
    222c:	ed 93       	st	X+, r30
    222e:	fc 93       	st	X, r31
                    Maxcount[proxChannel] = 0;
    2230:	fc 01       	movw	r30, r24
    2232:	e0 50       	subi	r30, 0x00	; 0
    2234:	f7 4d       	sbci	r31, 0xD7	; 215
    2236:	10 82       	st	Z, r1
    2238:	0b c0       	rjmp	.+22     	; 0x2250 <calcBaseline+0x1a8>
                }
            } 
            else
            {
                rollingMax[proxChannel] = *pPS;
    223a:	fc 01       	movw	r30, r24
    223c:	ee 0f       	add	r30, r30
    223e:	ff 1f       	adc	r31, r31
    2240:	ed 5f       	subi	r30, 0xFD	; 253
    2242:	f6 4d       	sbci	r31, 0xD6	; 214
    2244:	60 83       	st	Z, r22
    2246:	71 83       	std	Z+1, r23	; 0x01
                Maxcount[proxChannel] = 0;
    2248:	fc 01       	movw	r30, r24
    224a:	e0 50       	subi	r30, 0x00	; 0
    224c:	f7 4d       	sbci	r31, 0xD7	; 215
    224e:	10 82       	st	Z, r1
            }
        }

        // Update the stored baseline average with the new value
        dynamic_baseline[proxChannel] = (u16)average;
    2250:	fc 01       	movw	r30, r24
    2252:	ee 0f       	add	r30, r30
    2254:	ff 1f       	adc	r31, r31
    2256:	e7 5f       	subi	r30, 0xF7	; 247
    2258:	f6 4d       	sbci	r31, 0xD6	; 214
    225a:	00 83       	st	Z, r16
    225c:	11 83       	std	Z+1, r17	; 0x01
    }

    // Use the rollingMax value to determine the baseline level
    if ( rollingMax[proxChannel] != 0 )
    225e:	fc 01       	movw	r30, r24
    2260:	ee 0f       	add	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	ed 5f       	subi	r30, 0xFD	; 253
    2266:	f6 4d       	sbci	r31, 0xD6	; 214
    2268:	20 81       	ld	r18, Z
    226a:	31 81       	ldd	r19, Z+1	; 0x01
    226c:	21 15       	cp	r18, r1
    226e:	31 05       	cpc	r19, r1
    2270:	51 f0       	breq	.+20     	; 0x2286 <calcBaseline+0x1de>
    {
        baseline[proxChannel] = rollingMax[proxChannel] + noise_margin;
    2272:	fc 01       	movw	r30, r24
    2274:	ee 0f       	add	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	e0 58       	subi	r30, 0x80	; 128
    227a:	f6 4d       	sbci	r31, 0xD6	; 214
    227c:	42 0f       	add	r20, r18
    227e:	53 1f       	adc	r21, r19
    2280:	40 83       	st	Z, r20
    2282:	51 83       	std	Z+1, r21	; 0x01
    2284:	0e c0       	rjmp	.+28     	; 0x22a2 <calcBaseline+0x1fa>
    } 
    else
    {  // If the rollingMax has not been determined yet, use the average
        baseline[proxChannel] = (u16) dynamic_baseline[proxChannel] + noise_margin;
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	fc 01       	movw	r30, r24
    228c:	e0 58       	subi	r30, 0x80	; 128
    228e:	f6 4d       	sbci	r31, 0xD6	; 214
    2290:	dc 01       	movw	r26, r24
    2292:	a7 5f       	subi	r26, 0xF7	; 247
    2294:	b6 4d       	sbci	r27, 0xD6	; 214
    2296:	8d 91       	ld	r24, X+
    2298:	9c 91       	ld	r25, X
    229a:	48 0f       	add	r20, r24
    229c:	59 1f       	adc	r21, r25
    229e:	40 83       	st	Z, r20
    22a0:	51 83       	std	Z+1, r21	; 0x01
    }
}
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	1f 91       	pop	r17
    22a8:	0f 91       	pop	r16
    22aa:	08 95       	ret

000022ac <si114x_process_samples>:
u16 code scale           =  3;
u8  code ircorrection[3] =  { 17, 35, 29 };
#endif

void si114x_process_samples(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples)
{
    22ac:	ef 92       	push	r14
    22ae:	ff 92       	push	r15
    22b0:	0f 93       	push	r16
    22b2:	1f 93       	push	r17
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	8c 01       	movw	r16, r24
    22ba:	eb 01       	movw	r28, r22
    if ((maxLeakage[0]==0)&&(maxLeakage[1]==0)&&(maxLeakage[2]==0)&&(initial_baseline_counter==128))
    22bc:	20 91 13 29 	lds	r18, 0x2913
    22c0:	30 91 14 29 	lds	r19, 0x2914
    22c4:	23 2b       	or	r18, r19
    22c6:	c1 f4       	brne	.+48     	; 0x22f8 <si114x_process_samples+0x4c>
    22c8:	80 91 15 29 	lds	r24, 0x2915
    22cc:	90 91 16 29 	lds	r25, 0x2916
    22d0:	89 2b       	or	r24, r25
    22d2:	91 f4       	brne	.+36     	; 0x22f8 <si114x_process_samples+0x4c>
    22d4:	80 91 17 29 	lds	r24, 0x2917
    22d8:	90 91 18 29 	lds	r25, 0x2918
    22dc:	89 2b       	or	r24, r25
    22de:	61 f4       	brne	.+24     	; 0x22f8 <si114x_process_samples+0x4c>
    22e0:	80 91 0c 20 	lds	r24, 0x200C
    22e4:	80 38       	cpi	r24, 0x80	; 128
    22e6:	41 f4       	brne	.+16     	; 0x22f8 <si114x_process_samples+0x4c>
    {
        printf("Computing Baseline. Make sure nothing is in the vicinity of the EVB\n");
    22e8:	82 ea       	ldi	r24, 0xA2	; 162
    22ea:	96 e2       	ldi	r25, 0x26	; 38
    22ec:	22 d7       	rcall	.+3652   	; 0x3132 <puts>
        PortSet(1,0); // Turn on all lights to indicate baseline is being computed
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	70 e0       	ldi	r23, 0x00	; 0
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	cc d0       	rcall	.+408    	; 0x2490 <PortSet>
    }

    if (initial_baseline_counter != 0)
    22f8:	80 91 0c 20 	lds	r24, 0x200C
    22fc:	88 23       	and	r24, r24
    22fe:	09 f4       	brne	.+2      	; 0x2302 <si114x_process_samples+0x56>
    2300:	7e c0       	rjmp	.+252    	; 0x23fe <si114x_process_samples+0x152>
    {
        // The first 128 samples are used to establish the initial 
        // baseline
        if ( initial_baseline_counter > 1 )
    2302:	82 30       	cpi	r24, 0x02	; 2
    2304:	48 f1       	brcs	.+82     	; 0x2358 <si114x_process_samples+0xac>
        {
            // Look for maximum
            if( maxLeakage[0] < samples->ps1) maxLeakage[0] = samples->ps1;
    2306:	8a 85       	ldd	r24, Y+10	; 0x0a
    2308:	9b 85       	ldd	r25, Y+11	; 0x0b
    230a:	20 91 13 29 	lds	r18, 0x2913
    230e:	30 91 14 29 	lds	r19, 0x2914
    2312:	28 17       	cp	r18, r24
    2314:	39 07       	cpc	r19, r25
    2316:	20 f4       	brcc	.+8      	; 0x2320 <si114x_process_samples+0x74>
    2318:	80 93 13 29 	sts	0x2913, r24
    231c:	90 93 14 29 	sts	0x2914, r25
            if( maxLeakage[1] < samples->ps2) maxLeakage[1] = samples->ps2;
    2320:	8c 85       	ldd	r24, Y+12	; 0x0c
    2322:	9d 85       	ldd	r25, Y+13	; 0x0d
    2324:	20 91 15 29 	lds	r18, 0x2915
    2328:	30 91 16 29 	lds	r19, 0x2916
    232c:	28 17       	cp	r18, r24
    232e:	39 07       	cpc	r19, r25
    2330:	20 f4       	brcc	.+8      	; 0x233a <si114x_process_samples+0x8e>
    2332:	80 93 15 29 	sts	0x2915, r24
    2336:	90 93 16 29 	sts	0x2916, r25
			if( maxLeakage[2] < samples->ps3) maxLeakage[2] = samples->ps3;
    233a:	8e 85       	ldd	r24, Y+14	; 0x0e
    233c:	9f 85       	ldd	r25, Y+15	; 0x0f
    233e:	20 91 17 29 	lds	r18, 0x2917
    2342:	30 91 18 29 	lds	r19, 0x2918
    2346:	28 17       	cp	r18, r24
    2348:	39 07       	cpc	r19, r25
    234a:	08 f0       	brcs	.+2      	; 0x234e <si114x_process_samples+0xa2>
    234c:	52 c0       	rjmp	.+164    	; 0x23f2 <si114x_process_samples+0x146>
    234e:	80 93 17 29 	sts	0x2917, r24
    2352:	90 93 18 29 	sts	0x2918, r25
    2356:	4d c0       	rjmp	.+154    	; 0x23f2 <si114x_process_samples+0x146>
        }
        else
        {
            printf("Initial Baseline Calculated, PS1 = %d, PS2 = %d, PS3 = %d \n", maxLeakage[0], maxLeakage[1],maxLeakage[2]);
    2358:	c7 e1       	ldi	r28, 0x17	; 23
    235a:	d9 e2       	ldi	r29, 0x29	; 41
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	8f 93       	push	r24
    2360:	88 81       	ld	r24, Y
    2362:	8f 93       	push	r24
    2364:	05 e1       	ldi	r16, 0x15	; 21
    2366:	19 e2       	ldi	r17, 0x29	; 41
    2368:	f8 01       	movw	r30, r16
    236a:	81 81       	ldd	r24, Z+1	; 0x01
    236c:	8f 93       	push	r24
    236e:	80 81       	ld	r24, Z
    2370:	8f 93       	push	r24
    2372:	0f 2e       	mov	r0, r31
    2374:	f3 e1       	ldi	r31, 0x13	; 19
    2376:	ef 2e       	mov	r14, r31
    2378:	f9 e2       	ldi	r31, 0x29	; 41
    237a:	ff 2e       	mov	r15, r31
    237c:	f0 2d       	mov	r31, r0
    237e:	f7 01       	movw	r30, r14
    2380:	81 81       	ldd	r24, Z+1	; 0x01
    2382:	8f 93       	push	r24
    2384:	80 81       	ld	r24, Z
    2386:	8f 93       	push	r24
    2388:	86 ee       	ldi	r24, 0xE6	; 230
    238a:	96 e2       	ldi	r25, 0x26	; 38
    238c:	9f 93       	push	r25
    238e:	8f 93       	push	r24
    2390:	bf d6       	rcall	.+3454   	; 0x3110 <printf>
            PortSet(1,0xff); // Turn off all leds to indicate baseline computation is completed
    2392:	6f ef       	ldi	r22, 0xFF	; 255
    2394:	70 e0       	ldi	r23, 0x00	; 0
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	7a d0       	rcall	.+244    	; 0x2490 <PortSet>
            // Set Max Leakage 
            maxLeakage[0] = maxLeakage[0] + noise_margin*2;
    239c:	80 91 0a 20 	lds	r24, 0x200A
    23a0:	90 91 0b 20 	lds	r25, 0x200B
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	f7 01       	movw	r30, r14
    23aa:	40 81       	ld	r20, Z
    23ac:	51 81       	ldd	r21, Z+1	; 0x01
    23ae:	48 0f       	add	r20, r24
    23b0:	59 1f       	adc	r21, r25
    23b2:	40 83       	st	Z, r20
    23b4:	51 83       	std	Z+1, r21	; 0x01
            maxLeakage[1] = maxLeakage[1] + noise_margin*2;
    23b6:	f8 01       	movw	r30, r16
    23b8:	20 81       	ld	r18, Z
    23ba:	31 81       	ldd	r19, Z+1	; 0x01
    23bc:	28 0f       	add	r18, r24
    23be:	39 1f       	adc	r19, r25
    23c0:	20 83       	st	Z, r18
    23c2:	31 83       	std	Z+1, r19	; 0x01
			maxLeakage[2] = maxLeakage[2] + noise_margin*2;
    23c4:	68 81       	ld	r22, Y
    23c6:	79 81       	ldd	r23, Y+1	; 0x01
    23c8:	86 0f       	add	r24, r22
    23ca:	97 1f       	adc	r25, r23
    23cc:	88 83       	st	Y, r24
    23ce:	99 83       	std	Y+1, r25	; 0x01

            baseline[0] = maxLeakage[0];
    23d0:	40 93 80 29 	sts	0x2980, r20
    23d4:	50 93 81 29 	sts	0x2981, r21
            baseline[1] = maxLeakage[1];
    23d8:	20 93 82 29 	sts	0x2982, r18
    23dc:	30 93 83 29 	sts	0x2983, r19
			baseline[2] = maxLeakage[2];
    23e0:	80 93 84 29 	sts	0x2984, r24
    23e4:	90 93 85 29 	sts	0x2985, r25
    23e8:	8d b7       	in	r24, 0x3d	; 61
    23ea:	9e b7       	in	r25, 0x3e	; 62
    23ec:	08 96       	adiw	r24, 0x08	; 8
    23ee:	8d bf       	out	0x3d, r24	; 61
    23f0:	9e bf       	out	0x3e, r25	; 62
        }
        
        // Decrement counter
        initial_baseline_counter--;
    23f2:	80 91 0c 20 	lds	r24, 0x200C
    23f6:	81 50       	subi	r24, 0x01	; 1
    23f8:	80 93 0c 20 	sts	0x200C, r24
    23fc:	42 c0       	rjmp	.+132    	; 0x2482 <si114x_process_samples+0x1d6>
    else
    {
        //
        // Once the baseline has been set, do the actual loop
        // The first thing that happens is to check for saturation events
        if(samples->ps1 > 48000 || samples->ps2 > 48000 || samples->ps3 > 48000)
    23fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    2400:	9b 85       	ldd	r25, Y+11	; 0x0b
    2402:	81 38       	cpi	r24, 0x81	; 129
    2404:	9b 4b       	sbci	r25, 0xBB	; 187
    2406:	50 f4       	brcc	.+20     	; 0x241c <si114x_process_samples+0x170>
    2408:	8c 85       	ldd	r24, Y+12	; 0x0c
    240a:	9d 85       	ldd	r25, Y+13	; 0x0d
    240c:	81 38       	cpi	r24, 0x81	; 129
    240e:	9b 4b       	sbci	r25, 0xBB	; 187
    2410:	28 f4       	brcc	.+10     	; 0x241c <si114x_process_samples+0x170>
    2412:	8e 85       	ldd	r24, Y+14	; 0x0e
    2414:	9f 85       	ldd	r25, Y+15	; 0x0f
    2416:	81 38       	cpi	r24, 0x81	; 129
    2418:	9b 4b       	sbci	r25, 0xBB	; 187
    241a:	20 f0       	brcs	.+8      	; 0x2424 <si114x_process_samples+0x178>
            // handle saturation events by changing ADC settings.
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
            printf("Samples are Saturated\n");
    241c:	82 e2       	ldi	r24, 0x22	; 34
    241e:	97 e2       	ldi	r25, 0x27	; 39
    2420:	88 d6       	rcall	.+3344   	; 0x3132 <puts>
    2422:	2f c0       	rjmp	.+94     	; 0x2482 <si114x_process_samples+0x1d6>
        }
        else
        { 
            if( isIRStable( samples ) )
    2424:	ce 01       	movw	r24, r28
    2426:	52 dd       	rcall	.-1372   	; 0x1ecc <isIRStable>
    2428:	88 23       	and	r24, r24
    242a:	59 f1       	breq	.+86     	; 0x2482 <si114x_process_samples+0x1d6>
            {
                IRCompensation( 0, samples, ircorrection );  // IR Ambient Compensation for PS1 Channel
    242c:	45 e0       	ldi	r20, 0x05	; 5
    242e:	50 e2       	ldi	r21, 0x20	; 32
    2430:	be 01       	movw	r22, r28
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	cd dd       	rcall	.-1126   	; 0x1fd0 <IRCompensation>
                IRCompensation( 1, samples, ircorrection );  // IR Ambient Compensation for PS2 Channel
    2436:	45 e0       	ldi	r20, 0x05	; 5
    2438:	50 e2       	ldi	r21, 0x20	; 32
    243a:	be 01       	movw	r22, r28
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	c8 dd       	rcall	.-1136   	; 0x1fd0 <IRCompensation>
				IRCompensation( 2, samples, ircorrection );  // IR Ambient Compensation for PS3 Channel
    2440:	45 e0       	ldi	r20, 0x05	; 5
    2442:	50 e2       	ldi	r21, 0x20	; 32
    2444:	be 01       	movw	r22, r28
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	c3 dd       	rcall	.-1146   	; 0x1fd0 <IRCompensation>

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
    244a:	40 91 0a 20 	lds	r20, 0x200A
    244e:	50 91 0b 20 	lds	r21, 0x200B
    2452:	be 01       	movw	r22, r28
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	28 de       	rcall	.-944    	; 0x20a8 <calcBaseline>
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
    2458:	40 91 0a 20 	lds	r20, 0x200A
    245c:	50 91 0b 20 	lds	r21, 0x200B
    2460:	be 01       	movw	r22, r28
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	21 de       	rcall	.-958    	; 0x20a8 <calcBaseline>
				calcBaseline( 2 , samples, noise_margin); // Calculate PS3 Baseline
    2466:	40 91 0a 20 	lds	r20, 0x200A
    246a:	50 91 0b 20 	lds	r21, 0x200B
    246e:	be 01       	movw	r22, r28
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	1a de       	rcall	.-972    	; 0x20a8 <calcBaseline>

                SliderAlgorithm(si114x_handle, samples, scale);
    2474:	40 91 08 20 	lds	r20, 0x2008
    2478:	50 91 09 20 	lds	r21, 0x2009
    247c:	be 01       	movw	r22, r28
    247e:	c8 01       	movw	r24, r16
    2480:	7a d1       	rcall	.+756    	; 0x2776 <SliderAlgorithm>

            }
        }
    }
}
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	1f 91       	pop	r17
    2488:	0f 91       	pop	r16
    248a:	ff 90       	pop	r15
    248c:	ef 90       	pop	r14
    248e:	08 95       	ret

00002490 <PortSet>:

s16 Si114xBlockRead(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
}
    2490:	08 95       	ret

00002492 <Si114xWriteToRegister>:
    2492:	ef 92       	push	r14
    2494:	0f 93       	push	r16
    2496:	1f 93       	push	r17
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	1f 92       	push	r1
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	26 2f       	mov	r18, r22
    24a4:	49 83       	std	Y+1, r20	; 0x01
    24a6:	ee 24       	eor	r14, r14
    24a8:	e3 94       	inc	r14
    24aa:	8e 01       	movw	r16, r28
    24ac:	0f 5f       	subi	r16, 0xFF	; 255
    24ae:	1f 4f       	sbci	r17, 0xFF	; 255
    24b0:	48 ee       	ldi	r20, 0xE8	; 232
    24b2:	6a e5       	ldi	r22, 0x5A	; 90
    24b4:	80 e8       	ldi	r24, 0x80	; 128
    24b6:	94 e0       	ldi	r25, 0x04	; 4
    24b8:	ec d3       	rcall	.+2008   	; 0x2c92 <twi_write_packet>
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0f 90       	pop	r0
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	ef 90       	pop	r14
    24ca:	08 95       	ret

000024cc <Si114xReadFromRegister>:
    24cc:	ef 92       	push	r14
    24ce:	0f 93       	push	r16
    24d0:	1f 93       	push	r17
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	1f 92       	push	r1
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	26 2f       	mov	r18, r22
    24de:	ee 24       	eor	r14, r14
    24e0:	e3 94       	inc	r14
    24e2:	8e 01       	movw	r16, r28
    24e4:	0f 5f       	subi	r16, 0xFF	; 255
    24e6:	1f 4f       	sbci	r17, 0xFF	; 255
    24e8:	48 ee       	ldi	r20, 0xE8	; 232
    24ea:	6a e5       	ldi	r22, 0x5A	; 90
    24ec:	80 e8       	ldi	r24, 0x80	; 128
    24ee:	94 e0       	ldi	r25, 0x04	; 4
    24f0:	8b d3       	rcall	.+1814   	; 0x2c08 <twi_read_packet>
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0f 90       	pop	r0
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	1f 91       	pop	r17
    24fe:	0f 91       	pop	r16
    2500:	ef 90       	pop	r14
    2502:	08 95       	ret

00002504 <Si114xBlockWrite>:
    2504:	ef 92       	push	r14
    2506:	0f 93       	push	r16
    2508:	1f 93       	push	r17
    250a:	89 01       	movw	r16, r18
    250c:	e4 2e       	mov	r14, r20
    250e:	26 2f       	mov	r18, r22
    2510:	48 ee       	ldi	r20, 0xE8	; 232
    2512:	6a e5       	ldi	r22, 0x5A	; 90
    2514:	80 e8       	ldi	r24, 0x80	; 128
    2516:	94 e0       	ldi	r25, 0x04	; 4
    2518:	bc d3       	rcall	.+1912   	; 0x2c92 <twi_write_packet>
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	1f 91       	pop	r17
    251e:	0f 91       	pop	r16
    2520:	ef 90       	pop	r14
    2522:	08 95       	ret

00002524 <delay_10ms>:
    2524:	2f ef       	ldi	r18, 0xFF	; 255
    2526:	89 ef       	ldi	r24, 0xF9	; 249
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	21 50       	subi	r18, 0x01	; 1
    252c:	80 40       	sbci	r24, 0x00	; 0
    252e:	90 40       	sbci	r25, 0x00	; 0
    2530:	e1 f7       	brne	.-8      	; 0x252a <delay_10ms+0x6>
    2532:	00 c0       	rjmp	.+0      	; 0x2534 <delay_10ms+0x10>
    2534:	00 00       	nop
    2536:	08 95       	ret

00002538 <QS_Counts_to_Distance>:
// In the IR Slider, the distance between LED to sensor is the same for each of
// the two LEDs. For this reason, it is possible to have a single counts to
// distance function. 
//
s16 QS_Counts_to_Distance (u16 counts, u8 led)
{
    2538:	ef 92       	push	r14
    253a:	ff 92       	push	r15
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	c2 5a       	subi	r28, 0xA2	; 162
    254a:	d1 09       	sbc	r29, r1
    254c:	cd bf       	out	0x3d, r28	; 61
    254e:	de bf       	out	0x3e, r29	; 62
    u16 code   offset_1[9]    = {29, 72, 55, 75, 95, 131, 177, 238, 300};
    2550:	42 e1       	ldi	r20, 0x12	; 18
    2552:	ec e1       	ldi	r30, 0x1C	; 28
    2554:	f0 e2       	ldi	r31, 0x20	; 32
    2556:	de 01       	movw	r26, r28
    2558:	11 96       	adiw	r26, 0x01	; 1
    255a:	01 90       	ld	r0, Z+
    255c:	0d 92       	st	X+, r0
    255e:	4a 95       	dec	r20
    2560:	e1 f7       	brne	.-8      	; 0x255a <QS_Counts_to_Distance+0x22>
    u16 code   slope_1[9]     = {29, 173, 102, 237, 429, 1215, 3012, 9990, 26214};	
    2562:	42 e1       	ldi	r20, 0x12	; 18
    2564:	ee e2       	ldi	r30, 0x2E	; 46
    2566:	f0 e2       	ldi	r31, 0x20	; 32
    2568:	de 01       	movw	r26, r28
    256a:	53 96       	adiw	r26, 0x13	; 19
    256c:	01 90       	ld	r0, Z+
    256e:	0d 92       	st	X+, r0
    2570:	4a 95       	dec	r20
    2572:	e1 f7       	brne	.-8      	; 0x256c <QS_Counts_to_Distance+0x34>
    u16 code   piecewise_brackets_1[9] = {19805, 16015, 9607, 6838, 3014, 1666, 578, 250, 125};	
    2574:	42 e1       	ldi	r20, 0x12	; 18
    2576:	e0 e4       	ldi	r30, 0x40	; 64
    2578:	f0 e2       	ldi	r31, 0x20	; 32
    257a:	de 01       	movw	r26, r28
    257c:	95 96       	adiw	r26, 0x25	; 37
    257e:	01 90       	ld	r0, Z+
    2580:	0d 92       	st	X+, r0
    2582:	4a 95       	dec	r20
    2584:	e1 f7       	brne	.-8      	; 0x257e <QS_Counts_to_Distance+0x46>

    u16 code   offset_2[9]    = {27, 39, 51, 75, 96, 132, 177, 236, 299};
    2586:	42 e1       	ldi	r20, 0x12	; 18
    2588:	e2 e5       	ldi	r30, 0x52	; 82
    258a:	f0 e2       	ldi	r31, 0x20	; 32
    258c:	de 01       	movw	r26, r28
    258e:	d7 96       	adiw	r26, 0x37	; 55
    2590:	01 90       	ld	r0, Z+
    2592:	0d 92       	st	X+, r0
    2594:	4a 95       	dec	r20
    2596:	e1 f7       	brne	.-8      	; 0x2590 <QS_Counts_to_Distance+0x58>
    u16 code   slope_2[9]     = {27, 39, 95, 298, 538, 1481, 3637, 11457, 31208};	
    2598:	42 e1       	ldi	r20, 0x12	; 18
    259a:	e4 e6       	ldi	r30, 0x64	; 100
    259c:	f0 e2       	ldi	r31, 0x20	; 32
    259e:	de 01       	movw	r26, r28
    25a0:	a7 5b       	subi	r26, 0xB7	; 183
    25a2:	bf 4f       	sbci	r27, 0xFF	; 255
    25a4:	01 90       	ld	r0, Z+
    25a6:	0d 92       	st	X+, r0
    25a8:	4a 95       	dec	r20
    25aa:	e1 f7       	brne	.-8      	; 0x25a4 <QS_Counts_to_Distance+0x6c>
    u16 code   piecewise_brackets_2[9]= {17760, 14650, 7745, 5545, 2500, 1394, 493, 207, 102};	
    25ac:	42 e1       	ldi	r20, 0x12	; 18
    25ae:	e6 e7       	ldi	r30, 0x76	; 118
    25b0:	f0 e2       	ldi	r31, 0x20	; 32
    25b2:	de 01       	movw	r26, r28
    25b4:	a5 5a       	subi	r26, 0xA5	; 165
    25b6:	bf 4f       	sbci	r27, 0xFF	; 255
    25b8:	01 90       	ld	r0, Z+
    25ba:	0d 92       	st	X+, r0
    25bc:	4a 95       	dec	r20
    25be:	e1 f7       	brne	.-8      	; 0x25b8 <QS_Counts_to_Distance+0x80>
		
	u16 code   offset_3[9]    = {27, 39, 51, 75, 96, 132, 177, 236, 299};
    25c0:	42 e1       	ldi	r20, 0x12	; 18
    25c2:	e2 e5       	ldi	r30, 0x52	; 82
    25c4:	f0 e2       	ldi	r31, 0x20	; 32
    25c6:	de 01       	movw	r26, r28
    25c8:	a3 59       	subi	r26, 0x93	; 147
    25ca:	bf 4f       	sbci	r27, 0xFF	; 255
    25cc:	01 90       	ld	r0, Z+
    25ce:	0d 92       	st	X+, r0
    25d0:	4a 95       	dec	r20
    25d2:	e1 f7       	brne	.-8      	; 0x25cc <QS_Counts_to_Distance+0x94>
	u16 code   slope_3[9]     = {27, 39, 95, 298, 538, 1481, 3637, 11457, 31208};
    25d4:	42 e1       	ldi	r20, 0x12	; 18
    25d6:	e4 e6       	ldi	r30, 0x64	; 100
    25d8:	f0 e2       	ldi	r31, 0x20	; 32
    25da:	de 01       	movw	r26, r28
    25dc:	a1 58       	subi	r26, 0x81	; 129
    25de:	bf 4f       	sbci	r27, 0xFF	; 255
    25e0:	01 90       	ld	r0, Z+
    25e2:	0d 92       	st	X+, r0
    25e4:	4a 95       	dec	r20
    25e6:	e1 f7       	brne	.-8      	; 0x25e0 <QS_Counts_to_Distance+0xa8>
	u16 code   piecewise_brackets_3[9]= {17760, 14650, 7745, 5545, 2500, 1394, 493, 207, 102};
    25e8:	42 e1       	ldi	r20, 0x12	; 18
    25ea:	e6 e7       	ldi	r30, 0x76	; 118
    25ec:	f0 e2       	ldi	r31, 0x20	; 32
    25ee:	de 01       	movw	r26, r28
    25f0:	af 56       	subi	r26, 0x6F	; 111
    25f2:	bf 4f       	sbci	r27, 0xFF	; 255
    25f4:	01 90       	ld	r0, Z+
    25f6:	0d 92       	st	X+, r0
    25f8:	4a 95       	dec	r20
    25fa:	e1 f7       	brne	.-8      	; 0x25f4 <QS_Counts_to_Distance+0xbc>

    u8 code   maxIndex = 9;
    u8 xdata   indexLinear;
    uu32 xdata distance;

    if(led==1)      
    25fc:	61 30       	cpi	r22, 0x01	; 1
    25fe:	91 f5       	brne	.+100    	; 0x2664 <QS_Counts_to_Distance+0x12c>
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
       {
           if (counts > piecewise_brackets_1[indexLinear])
    2600:	4d a1       	ldd	r20, Y+37	; 0x25
    2602:	5e a1       	ldd	r21, Y+38	; 0x26
    2604:	48 17       	cp	r20, r24
    2606:	59 07       	cpc	r21, r25
    2608:	60 f0       	brcs	.+24     	; 0x2622 <QS_Counts_to_Distance+0xea>
    260a:	de 01       	movw	r26, r28
    260c:	97 96       	adiw	r26, 0x27	; 39
    260e:	61 e0       	ldi	r22, 0x01	; 1
    2610:	70 e0       	ldi	r23, 0x00	; 0
    2612:	e6 2f       	mov	r30, r22
    2614:	ab 01       	movw	r20, r22
    2616:	ed 90       	ld	r14, X+
    2618:	fd 90       	ld	r15, X+
    261a:	e8 16       	cp	r14, r24
    261c:	f9 06       	cpc	r15, r25
    261e:	d0 f4       	brcc	.+52     	; 0x2654 <QS_Counts_to_Distance+0x11c>
    2620:	03 c0       	rjmp	.+6      	; 0x2628 <QS_Counts_to_Distance+0xf0>
    2622:	40 e0       	ldi	r20, 0x00	; 0
    2624:	50 e0       	ldi	r21, 0x00	; 0
    2626:	e0 e0       	ldi	r30, 0x00	; 0
           {
               distance.u32 = (u32)counts * (u32)slope_1[indexLinear];
    2628:	44 0f       	add	r20, r20
    262a:	55 1f       	adc	r21, r21
    262c:	21 e0       	ldi	r18, 0x01	; 1
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	2c 0f       	add	r18, r28
    2632:	3d 1f       	adc	r19, r29
    2634:	42 0f       	add	r20, r18
    2636:	53 1f       	adc	r21, r19
    2638:	da 01       	movw	r26, r20
    263a:	52 96       	adiw	r26, 0x12	; 18
    263c:	2d 91       	ld	r18, X+
    263e:	3c 91       	ld	r19, X
    2640:	53 97       	sbiw	r26, 0x13	; 19
    2642:	dc 01       	movw	r26, r24
    2644:	04 d5       	rcall	.+2568   	; 0x304e <__umulhisi3>
               distance.u16[LSB] = offset_1[indexLinear] - distance.u16[MSB];
    2646:	da 01       	movw	r26, r20
    2648:	4d 91       	ld	r20, X+
    264a:	5c 91       	ld	r21, X
    264c:	8a 01       	movw	r16, r20
    264e:	08 1b       	sub	r16, r24
    2650:	19 0b       	sbc	r17, r25
               break;
    2652:	7b c0       	rjmp	.+246    	; 0x274a <QS_Counts_to_Distance+0x212>
    2654:	e1 e0       	ldi	r30, 0x01	; 1
    2656:	e6 0f       	add	r30, r22
    2658:	6f 5f       	subi	r22, 0xFF	; 255
    265a:	7f 4f       	sbci	r23, 0xFF	; 255

    if(led==1)      
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    265c:	69 30       	cpi	r22, 0x09	; 9
    265e:	71 05       	cpc	r23, r1
    2660:	c1 f6       	brne	.-80     	; 0x2612 <QS_Counts_to_Distance+0xda>
    2662:	73 c0       	rjmp	.+230    	; 0x274a <QS_Counts_to_Distance+0x212>
               distance.u16[LSB] = offset_1[indexLinear] - distance.u16[MSB];
               break;
           }
       }
    }
    else if(led==2) 
    2664:	62 30       	cpi	r22, 0x02	; 2
    2666:	b1 f5       	brne	.+108    	; 0x26d4 <QS_Counts_to_Distance+0x19c>
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
       {
           if (counts > piecewise_brackets_2[indexLinear])
    2668:	6d 96       	adiw	r28, 0x1d	; 29
    266a:	4e ad       	ldd	r20, Y+62	; 0x3e
    266c:	5f ad       	ldd	r21, Y+63	; 0x3f
    266e:	6d 97       	sbiw	r28, 0x1d	; 29
    2670:	48 17       	cp	r20, r24
    2672:	59 07       	cpc	r21, r25
    2674:	68 f0       	brcs	.+26     	; 0x2690 <QS_Counts_to_Distance+0x158>
    2676:	de 01       	movw	r26, r28
    2678:	a3 5a       	subi	r26, 0xA3	; 163
    267a:	bf 4f       	sbci	r27, 0xFF	; 255
    267c:	61 e0       	ldi	r22, 0x01	; 1
    267e:	70 e0       	ldi	r23, 0x00	; 0
    2680:	e6 2f       	mov	r30, r22
    2682:	ab 01       	movw	r20, r22
    2684:	ed 90       	ld	r14, X+
    2686:	fd 90       	ld	r15, X+
    2688:	e8 16       	cp	r14, r24
    268a:	f9 06       	cpc	r15, r25
    268c:	d8 f4       	brcc	.+54     	; 0x26c4 <QS_Counts_to_Distance+0x18c>
    268e:	03 c0       	rjmp	.+6      	; 0x2696 <QS_Counts_to_Distance+0x15e>
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	e0 e0       	ldi	r30, 0x00	; 0
           {
               distance.u32 = (u32)counts * (u32)slope_2[indexLinear];
    2696:	44 0f       	add	r20, r20
    2698:	55 1f       	adc	r21, r21
    269a:	a9 e4       	ldi	r26, 0x49	; 73
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	ac 0f       	add	r26, r28
    26a0:	bd 1f       	adc	r27, r29
    26a2:	a4 0f       	add	r26, r20
    26a4:	b5 1f       	adc	r27, r21
    26a6:	2d 91       	ld	r18, X+
    26a8:	3c 91       	ld	r19, X
    26aa:	dc 01       	movw	r26, r24
    26ac:	d0 d4       	rcall	.+2464   	; 0x304e <__umulhisi3>
               distance.u16[LSB] = offset_2[indexLinear] - distance.u16[MSB];
    26ae:	de 01       	movw	r26, r28
    26b0:	a4 0f       	add	r26, r20
    26b2:	b5 1f       	adc	r27, r21
    26b4:	d7 96       	adiw	r26, 0x37	; 55
    26b6:	4d 91       	ld	r20, X+
    26b8:	5c 91       	ld	r21, X
    26ba:	d8 97       	sbiw	r26, 0x38	; 56
    26bc:	8a 01       	movw	r16, r20
    26be:	08 1b       	sub	r16, r24
    26c0:	19 0b       	sbc	r17, r25
               break;
    26c2:	43 c0       	rjmp	.+134    	; 0x274a <QS_Counts_to_Distance+0x212>
    26c4:	e1 e0       	ldi	r30, 0x01	; 1
    26c6:	e6 0f       	add	r30, r22
    26c8:	6f 5f       	subi	r22, 0xFF	; 255
    26ca:	7f 4f       	sbci	r23, 0xFF	; 255
    }
    else if(led==2) 
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    26cc:	69 30       	cpi	r22, 0x09	; 9
    26ce:	71 05       	cpc	r23, r1
    26d0:	b9 f6       	brne	.-82     	; 0x2680 <QS_Counts_to_Distance+0x148>
    26d2:	3b c0       	rjmp	.+118    	; 0x274a <QS_Counts_to_Distance+0x212>
               distance.u16[LSB] = offset_2[indexLinear] - distance.u16[MSB];
               break;
           }
       }
    }
	else if(led==3) 
    26d4:	63 30       	cpi	r22, 0x03	; 3
    26d6:	09 f0       	breq	.+2      	; 0x26da <QS_Counts_to_Distance+0x1a2>
    26d8:	41 c0       	rjmp	.+130    	; 0x275c <QS_Counts_to_Distance+0x224>
	{
		// Perform piecewise linear approximation
		indexLinear = 0;
		for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
		{
			if (counts > piecewise_brackets_3[indexLinear])
    26da:	cf 56       	subi	r28, 0x6F	; 111
    26dc:	df 4f       	sbci	r29, 0xFF	; 255
    26de:	48 81       	ld	r20, Y
    26e0:	59 81       	ldd	r21, Y+1	; 0x01
    26e2:	c1 59       	subi	r28, 0x91	; 145
    26e4:	d0 40       	sbci	r29, 0x00	; 0
    26e6:	48 17       	cp	r20, r24
    26e8:	59 07       	cpc	r21, r25
    26ea:	68 f0       	brcs	.+26     	; 0x2706 <QS_Counts_to_Distance+0x1ce>
    26ec:	de 01       	movw	r26, r28
    26ee:	ad 56       	subi	r26, 0x6D	; 109
    26f0:	bf 4f       	sbci	r27, 0xFF	; 255
    26f2:	61 e0       	ldi	r22, 0x01	; 1
    26f4:	70 e0       	ldi	r23, 0x00	; 0
    26f6:	e6 2f       	mov	r30, r22
    26f8:	ab 01       	movw	r20, r22
    26fa:	ed 90       	ld	r14, X+
    26fc:	fd 90       	ld	r15, X+
    26fe:	e8 16       	cp	r14, r24
    2700:	f9 06       	cpc	r15, r25
    2702:	e0 f4       	brcc	.+56     	; 0x273c <QS_Counts_to_Distance+0x204>
    2704:	03 c0       	rjmp	.+6      	; 0x270c <QS_Counts_to_Distance+0x1d4>
    2706:	40 e0       	ldi	r20, 0x00	; 0
    2708:	50 e0       	ldi	r21, 0x00	; 0
    270a:	e0 e0       	ldi	r30, 0x00	; 0
			{
				distance.u32 = (u32)counts * (u32)slope_3[indexLinear];
    270c:	44 0f       	add	r20, r20
    270e:	55 1f       	adc	r21, r21
    2710:	af e7       	ldi	r26, 0x7F	; 127
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	ac 0f       	add	r26, r28
    2716:	bd 1f       	adc	r27, r29
    2718:	a4 0f       	add	r26, r20
    271a:	b5 1f       	adc	r27, r21
    271c:	2d 91       	ld	r18, X+
    271e:	3c 91       	ld	r19, X
    2720:	dc 01       	movw	r26, r24
    2722:	95 d4       	rcall	.+2346   	; 0x304e <__umulhisi3>
				distance.u16[LSB] = offset_3[indexLinear] - distance.u16[MSB];
    2724:	ad e6       	ldi	r26, 0x6D	; 109
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	ac 0f       	add	r26, r28
    272a:	bd 1f       	adc	r27, r29
    272c:	a4 0f       	add	r26, r20
    272e:	b5 1f       	adc	r27, r21
    2730:	4d 91       	ld	r20, X+
    2732:	5c 91       	ld	r21, X
    2734:	8a 01       	movw	r16, r20
    2736:	08 1b       	sub	r16, r24
    2738:	19 0b       	sbc	r17, r25
				break;
    273a:	07 c0       	rjmp	.+14     	; 0x274a <QS_Counts_to_Distance+0x212>
    273c:	e1 e0       	ldi	r30, 0x01	; 1
    273e:	e6 0f       	add	r30, r22
    2740:	6f 5f       	subi	r22, 0xFF	; 255
    2742:	7f 4f       	sbci	r23, 0xFF	; 255
    }
	else if(led==3) 
	{
		// Perform piecewise linear approximation
		indexLinear = 0;
		for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    2744:	69 30       	cpi	r22, 0x09	; 9
    2746:	71 05       	cpc	r23, r1
    2748:	b1 f6       	brne	.-84     	; 0x26f6 <QS_Counts_to_Distance+0x1be>
		}
	}
    else return -1;  /* Invalid channel number */

    // Set to a max value if above a certain level.
    if (distance.u16[LSB] > 250 || indexLinear == maxIndex)
    274a:	0b 3f       	cpi	r16, 0xFB	; 251
    274c:	11 05       	cpc	r17, r1
    274e:	10 f4       	brcc	.+4      	; 0x2754 <QS_Counts_to_Distance+0x21c>
    2750:	e9 30       	cpi	r30, 0x09	; 9
    2752:	11 f4       	brne	.+4      	; 0x2758 <QS_Counts_to_Distance+0x220>
    {
        distance.u16[LSB] = 250;
    2754:	0a ef       	ldi	r16, 0xFA	; 250
    2756:	10 e0       	ldi	r17, 0x00	; 0
    }
    return (distance.u16[LSB]);
    2758:	c8 01       	movw	r24, r16
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <QS_Counts_to_Distance+0x228>
				distance.u16[LSB] = offset_3[indexLinear] - distance.u16[MSB];
				break;
			}
		}
	}
    else return -1;  /* Invalid channel number */
    275c:	8f ef       	ldi	r24, 0xFF	; 255
    275e:	9f ef       	ldi	r25, 0xFF	; 255
    if (distance.u16[LSB] > 250 || indexLinear == maxIndex)
    {
        distance.u16[LSB] = 250;
    }
    return (distance.u16[LSB]);
}
    2760:	ce 55       	subi	r28, 0x5E	; 94
    2762:	df 4f       	sbci	r29, 0xFF	; 255
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	08 95       	ret

00002776 <SliderAlgorithm>:

void SliderAlgorithm(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples, u16 scale)
{
    2776:	3f 92       	push	r3
    2778:	4f 92       	push	r4
    277a:	5f 92       	push	r5
    277c:	6f 92       	push	r6
    277e:	7f 92       	push	r7
    2780:	8f 92       	push	r8
    2782:	9f 92       	push	r9
    2784:	af 92       	push	r10
    2786:	bf 92       	push	r11
    2788:	cf 92       	push	r12
    278a:	df 92       	push	r13
    278c:	ef 92       	push	r14
    278e:	ff 92       	push	r15
    2790:	0f 93       	push	r16
    2792:	1f 93       	push	r17
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	ae 97       	sbiw	r28, 0x2e	; 46
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	7b 01       	movw	r14, r22
    27a4:	5a 01       	movw	r10, r20
	//My implementation
	static u16 previous_led_x = 0;
	static u16 previous_led_y = 0;

    // QS_GlobalCounterOverflow assumes milliseconds. Samples->timestamp is in 100 us.
    u16 xdata QS_GlobalCounterOverflow = samples->timestamp / 10;
    27a6:	fb 01       	movw	r30, r22
    27a8:	22 81       	ldd	r18, Z+2	; 0x02
    27aa:	33 81       	ldd	r19, Z+3	; 0x03
    27ac:	ad ec       	ldi	r26, 0xCD	; 205
    27ae:	bc ec       	ldi	r27, 0xCC	; 204
    27b0:	4e d4       	rcall	.+2204   	; 0x304e <__umulhisi3>
    27b2:	8c 01       	movw	r16, r24
    27b4:	16 95       	lsr	r17
    27b6:	07 95       	ror	r16
    27b8:	16 95       	lsr	r17
    27ba:	07 95       	ror	r16
    27bc:	16 95       	lsr	r17
    27be:	07 95       	ror	r16

    // x position "bucket" endpoints to determine LED states and recognize Pause gesture.
    u16 code xbucket_Array[10] = {1, 159, 272, 385, 498, 611, 724, 837, 1100, 1102};
    27c0:	84 e1       	ldi	r24, 0x14	; 20
    27c2:	e8 e8       	ldi	r30, 0x88	; 136
    27c4:	f0 e2       	ldi	r31, 0x20	; 32
    27c6:	de 01       	movw	r26, r28
    27c8:	11 96       	adiw	r26, 0x01	; 1
    27ca:	01 90       	ld	r0, Z+
    27cc:	0d 92       	st	X+, r0
    27ce:	8a 95       	dec	r24
    27d0:	e1 f7       	brne	.-8      	; 0x27ca <SliderAlgorithm+0x54>

    // P1 LED values corresponding to the position buckets
    u8 code LED_P1_Vals[10] = {0xFF, 0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F, 0xFF};   
    27d2:	8a e0       	ldi	r24, 0x0A	; 10
    27d4:	ec e9       	ldi	r30, 0x9C	; 156
    27d6:	f0 e2       	ldi	r31, 0x20	; 32
    27d8:	de 01       	movw	r26, r28
    27da:	55 96       	adiw	r26, 0x15	; 21
    27dc:	01 90       	ld	r0, Z+
    27de:	0d 92       	st	X+, r0
    27e0:	8a 95       	dec	r24
    27e2:	e1 f7       	brne	.-8      	; 0x27dc <SliderAlgorithm+0x66>

    // P1 patterns for LED state machine.  Sent in reverse order, '0' bits are ON
    u8 code LED_swipe_left_pattern[8]  = 
    27e4:	88 e0       	ldi	r24, 0x08	; 8
    27e6:	e6 ea       	ldi	r30, 0xA6	; 166
    27e8:	f0 e2       	ldi	r31, 0x20	; 32
    27ea:	de 01       	movw	r26, r28
    27ec:	5f 96       	adiw	r26, 0x1f	; 31
    27ee:	01 90       	ld	r0, Z+
    27f0:	0d 92       	st	X+, r0
    27f2:	8a 95       	dec	r24
    27f4:	e1 f7       	brne	.-8      	; 0x27ee <SliderAlgorithm+0x78>
      {0xFF, 0xFE, 0xF8, 0xE1, 0x87, 0x1F, 0x7F, 0xFF};

    u8 code LED_swipe_right_pattern[8] = 
    27f6:	88 e0       	ldi	r24, 0x08	; 8
    27f8:	ee ea       	ldi	r30, 0xAE	; 174
    27fa:	f0 e2       	ldi	r31, 0x20	; 32
    27fc:	de 01       	movw	r26, r28
    27fe:	97 96       	adiw	r26, 0x27	; 39
    2800:	01 90       	ld	r0, Z+
    2802:	0d 92       	st	X+, r0
    2804:	8a 95       	dec	r24
    2806:	e1 f7       	brne	.-8      	; 0x2800 <SliderAlgorithm+0x8a>
    s16 xdata xdiff;
    u8 xdata swipe_speed;

    int xdata ps;

    ps = (u32) samples->ps1 - (u32)baseline[0];
    2808:	f7 01       	movw	r30, r14
    280a:	82 85       	ldd	r24, Z+10	; 0x0a
    280c:	93 85       	ldd	r25, Z+11	; 0x0b
    280e:	20 91 80 29 	lds	r18, 0x2980
    2812:	30 91 81 29 	lds	r19, 0x2981
    2816:	82 1b       	sub	r24, r18
    2818:	93 0b       	sbc	r25, r19
    281a:	12 f4       	brpl	.+4      	; 0x2820 <SliderAlgorithm+0xaa>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    ps *= scale;

    // Raw IR sensor 0 and 1 are stored in channels 4 and 5
    // ALS is stored in channel 6
    // Calculate r1 and r2 distances; store in channels 0 and 1
    r1 = QS_Counts_to_Distance ((u16)ps, 1);
    2820:	61 e0       	ldi	r22, 0x01	; 1
    2822:	9c 01       	movw	r18, r24
    2824:	a2 9e       	mul	r10, r18
    2826:	c0 01       	movw	r24, r0
    2828:	a3 9e       	mul	r10, r19
    282a:	90 0d       	add	r25, r0
    282c:	b2 9e       	mul	r11, r18
    282e:	90 0d       	add	r25, r0
    2830:	11 24       	eor	r1, r1
    2832:	82 de       	rcall	.-764    	; 0x2538 <QS_Counts_to_Distance>
    2834:	6c 01       	movw	r12, r24
	
	//printf("r1 = %d , counts = %d \r\n",r1,(u16)ps);

    ps = (u32) samples->ps2 - (u32)baseline[1];
    2836:	f7 01       	movw	r30, r14
    2838:	84 85       	ldd	r24, Z+12	; 0x0c
    283a:	95 85       	ldd	r25, Z+13	; 0x0d
    283c:	20 91 82 29 	lds	r18, 0x2982
    2840:	30 91 83 29 	lds	r19, 0x2983
    2844:	82 1b       	sub	r24, r18
    2846:	93 0b       	sbc	r25, r19
    2848:	12 f4       	brpl	.+4      	; 0x284e <SliderAlgorithm+0xd8>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	90 e0       	ldi	r25, 0x00	; 0
    if (ps < 0) ps = 0;

    // Scale it
    ps *= (u32)scale;

    r2 = QS_Counts_to_Distance ((u16)ps, 1);
    284e:	61 e0       	ldi	r22, 0x01	; 1
    2850:	9c 01       	movw	r18, r24
    2852:	a2 9e       	mul	r10, r18
    2854:	c0 01       	movw	r24, r0
    2856:	a3 9e       	mul	r10, r19
    2858:	90 0d       	add	r25, r0
    285a:	b2 9e       	mul	r11, r18
    285c:	90 0d       	add	r25, r0
    285e:	11 24       	eor	r1, r1
    2860:	6b de       	rcall	.-810    	; 0x2538 <QS_Counts_to_Distance>
    2862:	5c 01       	movw	r10, r24
   ////////////////////////////////////////////////////////////////////////////
   // Position calculation and swipe gesture detection

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
    2864:	96 01       	movw	r18, r12
    2866:	d6 01       	movw	r26, r12
    2868:	f2 d3       	rcall	.+2020   	; 0x304e <__umulhisi3>
   x.u32 = x.u32 + 33000;
    286a:	2b 01       	movw	r4, r22
    286c:	3c 01       	movw	r6, r24
    286e:	38 ee       	ldi	r19, 0xE8	; 232
    2870:	43 0e       	add	r4, r19
    2872:	30 e8       	ldi	r19, 0x80	; 128
    2874:	53 1e       	adc	r5, r19
    2876:	61 1c       	adc	r6, r1
    2878:	71 1c       	adc	r7, r1
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    287a:	95 01       	movw	r18, r10
    287c:	d5 01       	movw	r26, r10
    287e:	e7 d3       	rcall	.+1998   	; 0x304e <__umulhisi3>
    2880:	46 1a       	sub	r4, r22
    2882:	57 0a       	sbc	r5, r23
    2884:	68 0a       	sbc	r6, r24
    2886:	79 0a       	sbc	r7, r25
   if (x.s32 < 0)
    2888:	1a f4       	brpl	.+6      	; 0x2890 <SliderAlgorithm+0x11a>
   {
     x.s32 = 0;
    288a:	41 2c       	mov	r4, r1
    288c:	51 2c       	mov	r5, r1
    288e:	32 01       	movw	r6, r4
   }
   x.u32 = x.u32 / 60;
    2890:	c3 01       	movw	r24, r6
    2892:	b2 01       	movw	r22, r4
    2894:	2c e3       	ldi	r18, 0x3C	; 60
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	50 e0       	ldi	r21, 0x00	; 0
    289c:	b6 d3       	rcall	.+1900   	; 0x300a <__udivmodsi4>
    289e:	29 01       	movw	r4, r18
    28a0:	3a 01       	movw	r6, r20

   // limit x to maximum for pad
   if (x.u16[LSB] > 1101)
    28a2:	4e e4       	ldi	r20, 0x4E	; 78
    28a4:	44 16       	cp	r4, r20
    28a6:	44 e0       	ldi	r20, 0x04	; 4
    28a8:	54 06       	cpc	r5, r20
    28aa:	30 f0       	brcs	.+12     	; 0x28b8 <SliderAlgorithm+0x142>
   {
     x.u16[LSB] = 1101;
    28ac:	0f 2e       	mov	r0, r31
    28ae:	fd e4       	ldi	r31, 0x4D	; 77
    28b0:	4f 2e       	mov	r4, r31
    28b2:	f4 e0       	ldi	r31, 0x04	; 4
    28b4:	5f 2e       	mov	r5, r31
    28b6:	f0 2d       	mov	r31, r0
	   y.u16[LSB] = 1101;
   }

   
   // Determine "z" and recognize whether "swipe" type gesture has occured
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
    28b8:	51 ef       	ldi	r21, 0xF1	; 241
    28ba:	c5 16       	cp	r12, r21
    28bc:	d1 04       	cpc	r13, r1
    28be:	28 f4       	brcc	.+10     	; 0x28ca <SliderAlgorithm+0x154>
    28c0:	61 ef       	ldi	r22, 0xF1	; 241
    28c2:	a6 16       	cp	r10, r22
    28c4:	b1 04       	cpc	r11, r1
    28c6:	08 f4       	brcc	.+2      	; 0x28ca <SliderAlgorithm+0x154>
    28c8:	41 c0       	rjmp	.+130    	; 0x294c <SliderAlgorithm+0x1d6>
   {
      // check for end of swipe
      if (out_of_range == 0)
    28ca:	80 91 0d 20 	lds	r24, 0x200D
    28ce:	81 11       	cpse	r24, r1
    28d0:	1f c0       	rjmp	.+62     	; 0x2910 <SliderAlgorithm+0x19a>
      {
        xexit = xlast;
    28d2:	80 91 2d 29 	lds	r24, 0x292D
    28d6:	90 91 2e 29 	lds	r25, 0x292E
    28da:	80 93 2b 29 	sts	0x292B, r24
    28de:	90 93 2c 29 	sts	0x292C, r25

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
    28e2:	20 91 29 29 	lds	r18, 0x2929
    28e6:	30 91 2a 29 	lds	r19, 0x292A
    28ea:	a8 01       	movw	r20, r16
    28ec:	42 1b       	sub	r20, r18
    28ee:	53 0b       	sbc	r21, r19
    28f0:	43 53       	subi	r20, 0x33	; 51
    28f2:	51 09       	sbc	r21, r1
    28f4:	46 31       	cpi	r20, 0x16	; 22
    28f6:	52 40       	sbci	r21, 0x02	; 2
    28f8:	68 f4       	brcc	.+26     	; 0x2914 <SliderAlgorithm+0x19e>
        {
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
    28fa:	27 5b       	subi	r18, 0xB7	; 183
    28fc:	32 2e       	mov	r3, r18
    28fe:	30 1a       	sub	r3, r16
            xdiff = (s16)xenter-(s16)xexit;
    2900:	80 90 27 29 	lds	r8, 0x2927
    2904:	90 90 28 29 	lds	r9, 0x2928
    2908:	88 1a       	sub	r8, r24
    290a:	99 0a       	sbc	r9, r25
        xexit = xlast;

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
        {
            swipe_detect = 1;   // indicate that a swipe was detected
    290c:	21 e0       	ldi	r18, 0x01	; 1
    290e:	03 c0       	rjmp	.+6      	; 0x2916 <SliderAlgorithm+0x1a0>
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	01 c0       	rjmp	.+2      	; 0x2916 <SliderAlgorithm+0x1a0>
    2914:	20 e0       	ldi	r18, 0x00	; 0
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
            xdiff = (s16)xenter-(s16)xexit;
        }
      }
      out_of_range = 1;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	80 93 0d 20 	sts	0x200D, r24
      if (xexit > 550)
    291c:	80 91 2b 29 	lds	r24, 0x292B
    2920:	90 91 2c 29 	lds	r25, 0x292C
    2924:	87 32       	cpi	r24, 0x27	; 39
    2926:	92 40       	sbci	r25, 0x02	; 2
    2928:	38 f0       	brcs	.+14     	; 0x2938 <SliderAlgorithm+0x1c2>
      {
        x.u16[LSB] = 1101;
    292a:	0f 2e       	mov	r0, r31
    292c:	fd e4       	ldi	r31, 0x4D	; 77
    292e:	4f 2e       	mov	r4, r31
    2930:	f4 e0       	ldi	r31, 0x04	; 4
    2932:	5f 2e       	mov	r5, r31
    2934:	f0 2d       	mov	r31, r0
    2936:	02 c0       	rjmp	.+4      	; 0x293c <SliderAlgorithm+0x1c6>
      }
      else
      {
        x.u16[LSB] = 0;
    2938:	41 2c       	mov	r4, r1
    293a:	51 2c       	mov	r5, r1
      }
      z = MAX_RADIUS;
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    293c:	00 93 25 29 	sts	0x2925, r16
    2940:	10 93 26 29 	sts	0x2926, r17
   // REPLACE_0_AUX( z );

   // If a swipe was detected, determine the direction (L/R), set up LED state machine
   // to indicate swipe gesture, and post the swipe event.
   
   if (swipe_detect == 1)
    2944:	21 30       	cpi	r18, 0x01	; 1
    2946:	09 f0       	breq	.+2      	; 0x294a <SliderAlgorithm+0x1d4>
    2948:	62 c0       	rjmp	.+196    	; 0x2a0e <SliderAlgorithm+0x298>
    294a:	13 c0       	rjmp	.+38     	; 0x2972 <SliderAlgorithm+0x1fc>
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
   }
   else
   {
      // check for start of swipe
      if (out_of_range == 1)
    294c:	80 91 0d 20 	lds	r24, 0x200D
    2950:	81 30       	cpi	r24, 0x01	; 1
    2952:	41 f4       	brne	.+16     	; 0x2964 <SliderAlgorithm+0x1ee>
      {
        xenter = x.u16[LSB];
    2954:	40 92 27 29 	sts	0x2927, r4
    2958:	50 92 28 29 	sts	0x2928, r5
        SwipeStartTime = QS_GlobalCounterOverflow;
    295c:	00 93 29 29 	sts	0x2929, r16
    2960:	10 93 2a 29 	sts	0x292A, r17
      }
      out_of_range = 0;
    2964:	10 92 0d 20 	sts	0x200D, r1

      xlast = x.u16[LSB];
    2968:	40 92 2d 29 	sts	0x292D, r4
    296c:	50 92 2e 29 	sts	0x292E, r5
    2970:	4e c0       	rjmp	.+156    	; 0x2a0e <SliderAlgorithm+0x298>
   // If a swipe was detected, determine the direction (L/R), set up LED state machine
   // to indicate swipe gesture, and post the swipe event.
   
   if (swipe_detect == 1)
   {
       if (xdiff > 150)             // Left Swipe
    2972:	27 e9       	ldi	r18, 0x97	; 151
    2974:	82 16       	cp	r8, r18
    2976:	91 04       	cpc	r9, r1
    2978:	0c f1       	brlt	.+66     	; 0x29bc <SliderAlgorithm+0x246>
    297a:	fe 01       	movw	r30, r28
    297c:	7f 96       	adiw	r30, 0x1f	; 31
    297e:	ac e1       	ldi	r26, 0x1C	; 28
    2980:	b9 e2       	ldi	r27, 0x29	; 41
    2982:	ce 01       	movw	r24, r28
    2984:	87 96       	adiw	r24, 0x27	; 39
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
    2986:	21 91       	ld	r18, Z+
    2988:	2d 93       	st	X+, r18
   
   if (swipe_detect == 1)
   {
       if (xdiff > 150)             // Left Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    298a:	e8 17       	cp	r30, r24
    298c:	f9 07       	cpc	r31, r25
    298e:	d9 f7       	brne	.-10     	; 0x2986 <SliderAlgorithm+0x210>
    2990:	88 e0       	ldi	r24, 0x08	; 8
    2992:	80 93 24 29 	sts	0x2924, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send LEFT_SWIPE gesture
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
    2996:	9f 92       	push	r9
    2998:	8f 92       	push	r8
    299a:	1f 92       	push	r1
    299c:	3f 92       	push	r3
    299e:	88 e3       	ldi	r24, 0x38	; 56
    29a0:	97 e2       	ldi	r25, 0x27	; 39
    29a2:	9f 93       	push	r25
    29a4:	8f 93       	push	r24
    29a6:	83 e4       	ldi	r24, 0x43	; 67
    29a8:	97 e2       	ldi	r25, 0x27	; 39
    29aa:	9f 93       	push	r25
    29ac:	8f 93       	push	r24
    29ae:	b0 d3       	rcall	.+1888   	; 0x3110 <printf>
			samples->gesture = 1;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	f7 01       	movw	r30, r14
    29b4:	82 8b       	std	Z+18, r24	; 0x12
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	2b c0       	rjmp	.+86     	; 0x2a12 <SliderAlgorithm+0x29c>
       }
       else if (xdiff < -150)       // Right Swipe
    29bc:	3a e6       	ldi	r19, 0x6A	; 106
    29be:	83 16       	cp	r8, r19
    29c0:	3f ef       	ldi	r19, 0xFF	; 255
    29c2:	93 06       	cpc	r9, r19
    29c4:	34 f5       	brge	.+76     	; 0x2a12 <SliderAlgorithm+0x29c>
    29c6:	fe 01       	movw	r30, r28
    29c8:	b7 96       	adiw	r30, 0x27	; 39
    29ca:	ac e1       	ldi	r26, 0x1C	; 28
    29cc:	b9 e2       	ldi	r27, 0x29	; 41
    29ce:	ce 01       	movw	r24, r28
    29d0:	8f 96       	adiw	r24, 0x2f	; 47
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
    29d2:	21 91       	ld	r18, Z+
    29d4:	2d 93       	st	X+, r18
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
			samples->gesture = 1;
       }
       else if (xdiff < -150)       // Right Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    29d6:	e8 17       	cp	r30, r24
    29d8:	f9 07       	cpc	r31, r25
    29da:	d9 f7       	brne	.-10     	; 0x29d2 <SliderAlgorithm+0x25c>
    29dc:	88 e0       	ldi	r24, 0x08	; 8
    29de:	80 93 24 29 	sts	0x2924, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send RIGHT_SWIPE gesture
            printf("                            %s: %d, %d\n", "RIGHT_SWIPE", swipe_speed, -xdiff) ; 
    29e2:	91 94       	neg	r9
    29e4:	81 94       	neg	r8
    29e6:	91 08       	sbc	r9, r1
    29e8:	9f 92       	push	r9
    29ea:	8f 92       	push	r8
    29ec:	1f 92       	push	r1
    29ee:	3f 92       	push	r3
    29f0:	8b e6       	ldi	r24, 0x6B	; 107
    29f2:	97 e2       	ldi	r25, 0x27	; 39
    29f4:	9f 93       	push	r25
    29f6:	8f 93       	push	r24
    29f8:	83 e4       	ldi	r24, 0x43	; 67
    29fa:	97 e2       	ldi	r25, 0x27	; 39
    29fc:	9f 93       	push	r25
    29fe:	8f 93       	push	r24
    2a00:	87 d3       	rcall	.+1806   	; 0x3110 <printf>
			samples->gesture = 2;           
    2a02:	82 e0       	ldi	r24, 0x02	; 2
    2a04:	f7 01       	movw	r30, r14
    2a06:	82 8b       	std	Z+18, r24	; 0x12
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	02 c0       	rjmp	.+4      	; 0x2a12 <SliderAlgorithm+0x29c>
       }
   } else {
	   samples->gesture = 0;
    2a0e:	f7 01       	movw	r30, r14
    2a10:	12 8a       	std	Z+18, r1	; 0x12
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
   {
        if (x.u16[LSB] < xbucket_Array[xbucket])
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	9a 81       	ldd	r25, Y+2	; 0x02
    2a16:	48 16       	cp	r4, r24
    2a18:	59 06       	cpc	r5, r25
    2a1a:	a8 f0       	brcs	.+42     	; 0x2a46 <SliderAlgorithm+0x2d0>
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	33 96       	adiw	r30, 0x03	; 3

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    2a20:	21 e0       	ldi	r18, 0x01	; 1
   {
        if (x.u16[LSB] < xbucket_Array[xbucket])
    2a22:	81 91       	ld	r24, Z+
    2a24:	91 91       	ld	r25, Z+
    2a26:	48 16       	cp	r4, r24
    2a28:	59 06       	cpc	r5, r25
    2a2a:	20 f0       	brcs	.+8      	; 0x2a34 <SliderAlgorithm+0x2be>

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    2a2c:	2f 5f       	subi	r18, 0xFF	; 255
    2a2e:	2a 30       	cpi	r18, 0x0A	; 10
    2a30:	c1 f7       	brne	.-16     	; 0x2a22 <SliderAlgorithm+0x2ac>
    2a32:	5d c0       	rjmp	.+186    	; 0x2aee <SliderAlgorithm+0x378>
            break;
        }
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
    2a34:	80 91 1b 29 	lds	r24, 0x291B
    2a38:	28 13       	cpse	r18, r24
    2a3a:	06 c0       	rjmp	.+12     	; 0x2a48 <SliderAlgorithm+0x2d2>
    2a3c:	29 30       	cpi	r18, 0x09	; 9
    2a3e:	21 f0       	breq	.+8      	; 0x2a48 <SliderAlgorithm+0x2d2>
    2a40:	21 11       	cpse	r18, r1
    2a42:	06 c0       	rjmp	.+12     	; 0x2a50 <SliderAlgorithm+0x2da>
    2a44:	01 c0       	rjmp	.+2      	; 0x2a48 <SliderAlgorithm+0x2d2>

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    2a46:	20 e0       	ldi	r18, 0x00	; 0
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
   {
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    2a48:	00 93 25 29 	sts	0x2925, r16
    2a4c:	10 93 26 29 	sts	0x2926, r17
   }
   last_xbucket = xbucket;  // store latest information for next comparison
    2a50:	20 93 1b 29 	sts	0x291B, r18

   // LED State machine - Pause gesture recognition is also integrated here 
   if (LED_State != 0)  // indicate gesture pattern
    2a54:	80 91 24 29 	lds	r24, 0x2924
    2a58:	88 23       	and	r24, r24
    2a5a:	81 f0       	breq	.+32     	; 0x2a7c <SliderAlgorithm+0x306>
   {
      if ((u8)(QS_GlobalCounterOverflow - LED_flash_timeout) >= LED_STATE_TIME)
    2a5c:	80 91 19 29 	lds	r24, 0x2919
    2a60:	f0 2f       	mov	r31, r16
    2a62:	f8 1b       	sub	r31, r24
    2a64:	f7 32       	cpi	r31, 0x27	; 39
    2a66:	08 f4       	brcc	.+2      	; 0x2a6a <SliderAlgorithm+0x2f4>
    2a68:	47 c0       	rjmp	.+142    	; 0x2af8 <SliderAlgorithm+0x382>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    2a6a:	00 93 19 29 	sts	0x2919, r16
    2a6e:	10 93 1a 29 	sts	0x291A, r17

         // Write to Port 1 of the MCU
         // PortSet( 1, LED_flash_pattern[(--LED_State)%8]); 

         Pause_gesture_timeout = QS_GlobalCounterOverflow;
    2a72:	00 93 25 29 	sts	0x2925, r16
    2a76:	10 93 26 29 	sts	0x2926, r17
    2a7a:	3e c0       	rjmp	.+124    	; 0x2af8 <SliderAlgorithm+0x382>
      //PortSet( 1, LED_P1_Vals[xbucket]);
	  //printf("x: %d \r\n",x.u16[LSB]);


      // check time stamp for pause
      if ((QS_GlobalCounterOverflow - Pause_gesture_timeout) >= PAUSE_TIMEOUT) 
    2a7c:	80 91 25 29 	lds	r24, 0x2925
    2a80:	90 91 26 29 	lds	r25, 0x2926
    2a84:	a8 01       	movw	r20, r16
    2a86:	48 1b       	sub	r20, r24
    2a88:	59 0b       	sbc	r21, r25
    2a8a:	ca 01       	movw	r24, r20
    2a8c:	8a 38       	cpi	r24, 0x8A	; 138
    2a8e:	92 40       	sbci	r25, 0x02	; 2
    2a90:	98 f1       	brcs	.+102    	; 0x2af8 <SliderAlgorithm+0x382>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    2a92:	00 93 19 29 	sts	0x2919, r16
    2a96:	10 93 1a 29 	sts	0x291A, r17
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    2a9a:	fe 01       	movw	r30, r28
    2a9c:	e2 0f       	add	r30, r18
    2a9e:	f1 1d       	adc	r31, r1
    2aa0:	85 89       	ldd	r24, Z+21	; 0x15
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    2aa2:	9f ef       	ldi	r25, 0xFF	; 255
    2aa4:	90 93 1c 29 	sts	0x291C, r25
            LED_flash_pattern[LED_State++] = 0xFF;
    2aa8:	90 93 1d 29 	sts	0x291D, r25
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    2aac:	80 93 1e 29 	sts	0x291E, r24
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    2ab0:	80 93 1f 29 	sts	0x291F, r24
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    2ab4:	90 93 20 29 	sts	0x2920, r25
            LED_flash_pattern[LED_State++] = 0xFF;
    2ab8:	90 93 21 29 	sts	0x2921, r25
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    2abc:	80 93 22 29 	sts	0x2922, r24
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    2ac0:	80 93 23 29 	sts	0x2923, r24
         } // LED_State should be 8 when this loop is finished.

         LED_State = 16; // Set LED_State to 16 to repeat the pattern twice
    2ac4:	80 e1       	ldi	r24, 0x10	; 16
    2ac6:	80 93 24 29 	sts	0x2924, r24

         // Send off a PAUSE gesture to host.
         printf("                            %s: %d\n", "PAUSE", xbucket<<8) ;            
    2aca:	2f 93       	push	r18
    2acc:	1f 92       	push	r1
    2ace:	87 e7       	ldi	r24, 0x77	; 119
    2ad0:	97 e2       	ldi	r25, 0x27	; 39
    2ad2:	9f 93       	push	r25
    2ad4:	8f 93       	push	r24
    2ad6:	8d e7       	ldi	r24, 0x7D	; 125
    2ad8:	97 e2       	ldi	r25, 0x27	; 39
    2ada:	9f 93       	push	r25
    2adc:	8f 93       	push	r24
    2ade:	18 d3       	rcall	.+1584   	; 0x3110 <printf>
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	05 c0       	rjmp	.+10     	; 0x2af8 <SliderAlgorithm+0x382>
            break;
        }
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
    2aee:	80 91 1b 29 	lds	r24, 0x291B
    2af2:	28 13       	cpse	r18, r24
    2af4:	a9 cf       	rjmp	.-174    	; 0x2a48 <SliderAlgorithm+0x2d2>
    2af6:	ac cf       	rjmp	.-168    	; 0x2a50 <SliderAlgorithm+0x2da>
       // It is best to display this than printf. Use AUX and PS3 channels
       //REPLACE_0_PS3( 0 );
       //REPLACE_0_AUX( 0 ); 
	    //printf("no touch \r\n");
   }
}
    2af8:	ae 96       	adiw	r28, 0x2e	; 46
    2afa:	cd bf       	out	0x3d, r28	; 61
    2afc:	de bf       	out	0x3e, r29	; 62
    2afe:	df 91       	pop	r29
    2b00:	cf 91       	pop	r28
    2b02:	1f 91       	pop	r17
    2b04:	0f 91       	pop	r16
    2b06:	ff 90       	pop	r15
    2b08:	ef 90       	pop	r14
    2b0a:	df 90       	pop	r13
    2b0c:	cf 90       	pop	r12
    2b0e:	bf 90       	pop	r11
    2b10:	af 90       	pop	r10
    2b12:	9f 90       	pop	r9
    2b14:	8f 90       	pop	r8
    2b16:	7f 90       	pop	r7
    2b18:	6f 90       	pop	r6
    2b1a:	5f 90       	pop	r5
    2b1c:	4f 90       	pop	r4
    2b1e:	3f 90       	pop	r3
    2b20:	08 95       	ret

00002b22 <twi_setup>:
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2b22:	e0 e8       	ldi	r30, 0x80	; 128
    2b24:	f4 e0       	ldi	r31, 0x04	; 4
    2b26:	12 82       	std	Z+2, r1	; 0x02
    2b28:	89 e0       	ldi	r24, 0x09	; 9
    2b2a:	85 83       	std	Z+5, r24	; 0x05
    2b2c:	88 e0       	ldi	r24, 0x08	; 8
    2b2e:	81 83       	std	Z+1, r24	; 0x01
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	84 83       	std	Z+4, r24	; 0x04
    2b34:	08 95       	ret

00002b36 <twi_start_transmission>:
}

uint8_t twi_start_transmission(TWI_t* const TWI, 
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
    2b36:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    2b38:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    2b3a:	84 e6       	ldi	r24, 0x64	; 100
    2b3c:	48 9f       	mul	r20, r24
    2b3e:	a0 01       	movw	r20, r0
    2b40:	11 24       	eor	r1, r1
	while (timeout_remaining)
    2b42:	41 15       	cp	r20, r1
    2b44:	51 05       	cpc	r21, r1
    2b46:	09 f1       	breq	.+66     	; 0x2b8a <twi_start_transmission+0x54>
	{
		uint8_t status = TWI->MASTER.STATUS;
    2b48:	84 81       	ldd	r24, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    2b4a:	98 2f       	mov	r25, r24
    2b4c:	98 74       	andi	r25, 0x48	; 72
    2b4e:	98 34       	cpi	r25, 0x48	; 72
    2b50:	11 f4       	brne	.+4      	; 0x2b56 <twi_start_transmission+0x20>
		{
			TWI->MASTER.ADDR = slave_address;
    2b52:	66 83       	std	Z+6, r22	; 0x06
    2b54:	0a c0       	rjmp	.+20     	; 0x2b6a <twi_start_transmission+0x34>
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    2b56:	98 2f       	mov	r25, r24
    2b58:	90 75       	andi	r25, 0x50	; 80
    2b5a:	90 35       	cpi	r25, 0x50	; 80
    2b5c:	21 f4       	brne	.+8      	; 0x2b66 <twi_start_transmission+0x30>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2b5e:	87 e0       	ldi	r24, 0x07	; 7
    2b60:	83 83       	std	Z+3, r24	; 0x03
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
    2b62:	84 e0       	ldi	r24, 0x04	; 4
    2b64:	08 95       	ret
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    2b66:	80 7c       	andi	r24, 0xC0	; 192
    2b68:	71 f4       	brne	.+28     	; 0x2b86 <twi_start_transmission+0x50>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b6a:	8a e6       	ldi	r24, 0x6A	; 106
    2b6c:	8a 95       	dec	r24
    2b6e:	f1 f7       	brne	.-4      	; 0x2b6c <twi_start_transmission+0x36>
    2b70:	00 c0       	rjmp	.+0      	; 0x2b72 <twi_start_transmission+0x3c>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    2b72:	41 50       	subi	r20, 0x01	; 1
    2b74:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    2b76:	41 15       	cp	r20, r1
    2b78:	51 05       	cpc	r21, r1
    2b7a:	31 f7       	brne	.-52     	; 0x2b48 <twi_start_transmission+0x12>
    2b7c:	06 c0       	rjmp	.+12     	; 0x2b8a <twi_start_transmission+0x54>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2b7e:	87 e0       	ldi	r24, 0x07	; 7
    2b80:	83 83       	std	Z+3, r24	; 0x03
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
			twi_stop_transmission(TWI);
		}
	}

	return TWI_ERROR_BUS_CAP_TIMEOUT;
    2b82:	83 e0       	ldi	r24, 0x03	; 3
    2b84:	08 95       	ret
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
		{
			return TWI_ERROR_NO_ERROR;
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	08 95       	ret
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    2b8a:	84 81       	ldd	r24, Z+4	; 0x04
    2b8c:	85 fd       	sbrc	r24, 5
    2b8e:	f7 cf       	rjmp	.-18     	; 0x2b7e <twi_start_transmission+0x48>
			twi_stop_transmission(TWI);
		}
	}

	return TWI_ERROR_BUS_CAP_TIMEOUT;
    2b90:	83 e0       	ldi	r24, 0x03	; 3
}
    2b92:	08 95       	ret

00002b94 <twi_send_byte>:

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
    2b94:	fc 01       	movw	r30, r24
	TWI->MASTER.DATA = data;
    2b96:	67 83       	std	Z+7, r22	; 0x07

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    2b98:	84 81       	ldd	r24, Z+4	; 0x04
    2b9a:	86 ff       	sbrs	r24, 6
    2b9c:	fd cf       	rjmp	.-6      	; 0x2b98 <twi_send_byte+0x4>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    2b9e:	84 81       	ldd	r24, Z+4	; 0x04
    2ba0:	86 ff       	sbrs	r24, 6
    2ba2:	06 c0       	rjmp	.+12     	; 0x2bb0 <twi_send_byte+0x1c>
    2ba4:	94 81       	ldd	r25, Z+4	; 0x04
    2ba6:	92 95       	swap	r25
    2ba8:	91 70       	andi	r25, 0x01	; 1
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	89 27       	eor	r24, r25
    2bae:	08 95       	ret
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
}
    2bb2:	08 95       	ret

00002bb4 <twi_receive_byte>:

uint8_t twi_receive_byte(TWI_t* const TWI, 
const uint8_t timeout_ms,
uint8_t* const data, 
const uint8_t end_of_data)
{
    2bb4:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
    2bb6:	84 81       	ldd	r24, Z+4	; 0x04
    2bb8:	8c 70       	andi	r24, 0x0C	; 12
    2bba:	8c 30       	cpi	r24, 0x0C	; 12
    2bbc:	19 f1       	breq	.+70     	; 0x2c04 <twi_receive_byte+0x50>
		return false;
	}
	timeout_remaining = (timeout_ms * 100);
    2bbe:	84 e6       	ldi	r24, 0x64	; 100
    2bc0:	68 9f       	mul	r22, r24
    2bc2:	b0 01       	movw	r22, r0
    2bc4:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm) && timeout_remaining) {
    2bc6:	84 81       	ldd	r24, Z+4	; 0x04
    2bc8:	88 23       	and	r24, r24
    2bca:	7c f0       	brlt	.+30     	; 0x2bea <twi_receive_byte+0x36>
    2bcc:	61 15       	cp	r22, r1
    2bce:	71 05       	cpc	r23, r1
    2bd0:	61 f0       	breq	.+24     	; 0x2bea <twi_receive_byte+0x36>
    2bd2:	aa e6       	ldi	r26, 0x6A	; 106
    2bd4:	aa 95       	dec	r26
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <twi_receive_byte+0x20>
    2bd8:	00 c0       	rjmp	.+0      	; 0x2bda <twi_receive_byte+0x26>
		_delay_us(10);
		timeout_remaining--;
    2bda:	61 50       	subi	r22, 0x01	; 1
    2bdc:	71 09       	sbc	r23, r1
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
		return false;
	}
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm) && timeout_remaining) {
    2bde:	84 81       	ldd	r24, Z+4	; 0x04
    2be0:	88 23       	and	r24, r24
    2be2:	1c f0       	brlt	.+6      	; 0x2bea <twi_receive_byte+0x36>
    2be4:	61 15       	cp	r22, r1
    2be6:	71 05       	cpc	r23, r1
    2be8:	a1 f7       	brne	.-24     	; 0x2bd2 <twi_receive_byte+0x1e>
		_delay_us(10);
		timeout_remaining--;
	}

	*data = TWI->MASTER.DATA;
    2bea:	87 81       	ldd	r24, Z+7	; 0x07
    2bec:	da 01       	movw	r26, r20
    2bee:	8c 93       	st	X, r24

	if (end_of_data)
    2bf0:	22 23       	and	r18, r18
    2bf2:	21 f0       	breq	.+8      	; 0x2bfc <twi_receive_byte+0x48>
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2bf4:	87 e0       	ldi	r24, 0x07	; 7
    2bf6:	83 83       	std	Z+3, r24	; 0x03
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	08 95       	ret
	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    2bfc:	82 e0       	ldi	r24, 0x02	; 2
    2bfe:	83 83       	std	Z+3, r24	; 0x03

	return true;
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	08 95       	ret
const uint8_t end_of_data)
{
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
		return false;
    2c04:	80 e0       	ldi	r24, 0x00	; 0
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
}
    2c06:	08 95       	ret

00002c08 <twi_read_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
uint8_t* data,
uint8_t length)
{
    2c08:	bf 92       	push	r11
    2c0a:	cf 92       	push	r12
    2c0c:	df 92       	push	r13
    2c0e:	ef 92       	push	r14
    2c10:	ff 92       	push	r15
    2c12:	0f 93       	push	r16
    2c14:	1f 93       	push	r17
    2c16:	cf 93       	push	r28
    2c18:	df 93       	push	r29
    2c1a:	ec 01       	movw	r28, r24
    2c1c:	d6 2e       	mov	r13, r22
    2c1e:	f4 2e       	mov	r15, r20
    2c20:	c2 2e       	mov	r12, r18
	uint8_t error_code;
	uint8_t len = length;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    2c22:	66 0f       	add	r22, r22
    2c24:	88 df       	rcall	.-240    	; 0x2b36 <twi_start_transmission>
    2c26:	81 30       	cpi	r24, 0x01	; 1
    2c28:	39 f5       	brne	.+78     	; 0x2c78 <twi_read_packet+0x70>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
    2c2a:	6c 2d       	mov	r22, r12
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	b2 df       	rcall	.-156    	; 0x2b94 <twi_send_byte>
    2c30:	88 23       	and	r24, r24
    2c32:	21 f1       	breq	.+72     	; 0x2c7c <twi_read_packet+0x74>
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
    2c34:	6d 2d       	mov	r22, r13
    2c36:	66 0f       	add	r22, r22
    2c38:	61 60       	ori	r22, 0x01	; 1
    2c3a:	4f 2d       	mov	r20, r15
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	7b df       	rcall	.-266    	; 0x2b36 <twi_start_transmission>
    2c40:	81 30       	cpi	r24, 0x01	; 1
    2c42:	b1 f4       	brne	.+44     	; 0x2c70 <twi_read_packet+0x68>
    2c44:	bb 24       	eor	r11, r11
    2c46:	ba 94       	dec	r11
    2c48:	be 0c       	add	r11, r14
    2c4a:	0f c0       	rjmp	.+30     	; 0x2c6a <twi_read_packet+0x62>
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
			{
				if (!(twi_receive_byte(TWI, timeout_ms, data++, (length == 0))))
    2c4c:	68 01       	movw	r12, r16
    2c4e:	8f ef       	ldi	r24, 0xFF	; 255
    2c50:	c8 1a       	sub	r12, r24
    2c52:	d8 0a       	sbc	r13, r24
    2c54:	21 e0       	ldi	r18, 0x01	; 1
    2c56:	b1 10       	cpse	r11, r1
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	a8 01       	movw	r20, r16
    2c5c:	6f 2d       	mov	r22, r15
    2c5e:	ce 01       	movw	r24, r28
    2c60:	a9 df       	rcall	.-174    	; 0x2bb4 <twi_receive_byte>
    2c62:	ba 94       	dec	r11
    2c64:	88 23       	and	r24, r24
    2c66:	21 f0       	breq	.+8      	; 0x2c70 <twi_read_packet+0x68>
    2c68:	86 01       	movw	r16, r12
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
    2c6a:	8f ef       	ldi	r24, 0xFF	; 255
    2c6c:	b8 12       	cpse	r11, r24
    2c6e:	ee cf       	rjmp	.-36     	; 0x2c4c <twi_read_packet+0x44>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2c70:	87 e0       	ldi	r24, 0x07	; 7
    2c72:	8b 83       	std	Y+3, r24	; 0x03
		}

		twi_stop_transmission(TWI);
	}

	return len;
    2c74:	8e 2d       	mov	r24, r14
    2c76:	03 c0       	rjmp	.+6      	; 0x2c7e <twi_read_packet+0x76>
    2c78:	8e 2d       	mov	r24, r14
    2c7a:	01 c0       	rjmp	.+2      	; 0x2c7e <twi_read_packet+0x76>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    2c7c:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return len;
}
    2c7e:	df 91       	pop	r29
    2c80:	cf 91       	pop	r28
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	ff 90       	pop	r15
    2c88:	ef 90       	pop	r14
    2c8a:	df 90       	pop	r13
    2c8c:	cf 90       	pop	r12
    2c8e:	bf 90       	pop	r11
    2c90:	08 95       	ret

00002c92 <twi_write_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    2c92:	cf 92       	push	r12
    2c94:	df 92       	push	r13
    2c96:	ef 92       	push	r14
    2c98:	0f 93       	push	r16
    2c9a:	1f 93       	push	r17
    2c9c:	cf 93       	push	r28
    2c9e:	df 93       	push	r29
    2ca0:	ec 01       	movw	r28, r24
    2ca2:	d2 2e       	mov	r13, r18
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    2ca4:	66 0f       	add	r22, r22
    2ca6:	47 df       	rcall	.-370    	; 0x2b36 <twi_start_transmission>
    2ca8:	81 30       	cpi	r24, 0x01	; 1
    2caa:	d1 f4       	brne	.+52     	; 0x2ce0 <twi_write_packet+0x4e>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
    2cac:	6d 2d       	mov	r22, r13
    2cae:	ce 01       	movw	r24, r28
    2cb0:	71 df       	rcall	.-286    	; 0x2b94 <twi_send_byte>
    2cb2:	88 23       	and	r24, r24
    2cb4:	b9 f0       	breq	.+46     	; 0x2ce4 <twi_write_packet+0x52>
    2cb6:	ea 94       	dec	r14
    2cb8:	c0 2e       	mov	r12, r16
    2cba:	d1 2e       	mov	r13, r17
    2cbc:	0a c0       	rjmp	.+20     	; 0x2cd2 <twi_write_packet+0x40>
			return error_code;
		}

		while (length--)
		{
			if (!(twi_send_byte(TWI, *(data++))))
    2cbe:	f6 01       	movw	r30, r12
    2cc0:	61 91       	ld	r22, Z+
    2cc2:	6f 01       	movw	r12, r30
    2cc4:	ce 01       	movw	r24, r28
    2cc6:	66 df       	rcall	.-308    	; 0x2b94 <twi_send_byte>
    2cc8:	9f ef       	ldi	r25, 0xFF	; 255
    2cca:	9e 0d       	add	r25, r14
    2ccc:	88 23       	and	r24, r24
    2cce:	21 f0       	breq	.+8      	; 0x2cd8 <twi_write_packet+0x46>
    2cd0:	e9 2e       	mov	r14, r25
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    2cd2:	ff ef       	ldi	r31, 0xFF	; 255
    2cd4:	ef 12       	cpse	r14, r31
    2cd6:	f3 cf       	rjmp	.-26     	; 0x2cbe <twi_write_packet+0x2c>
void twi_on(void) {
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2cd8:	87 e0       	ldi	r24, 0x07	; 7
    2cda:	8b 83       	std	Y+3, r24	; 0x03
    2cdc:	8e 2d       	mov	r24, r14
    2cde:	03 c0       	rjmp	.+6      	; 0x2ce6 <twi_write_packet+0x54>
    2ce0:	8e 2d       	mov	r24, r14
    2ce2:	01 c0       	rjmp	.+2      	; 0x2ce6 <twi_write_packet+0x54>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    2ce4:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return length;
    2ce6:	df 91       	pop	r29
    2ce8:	cf 91       	pop	r28
    2cea:	1f 91       	pop	r17
    2cec:	0f 91       	pop	r16
    2cee:	ef 90       	pop	r14
    2cf0:	df 90       	pop	r13
    2cf2:	cf 90       	pop	r12
    2cf4:	08 95       	ret

00002cf6 <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
    2cf6:	1f 92       	push	r1
    2cf8:	0f 92       	push	r0
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	0f 92       	push	r0
    2cfe:	11 24       	eor	r1, r1
    2d00:	0b b6       	in	r0, 0x3b	; 59
    2d02:	0f 92       	push	r0
    2d04:	2f 93       	push	r18
    2d06:	3f 93       	push	r19
    2d08:	4f 93       	push	r20
    2d0a:	5f 93       	push	r21
    2d0c:	8f 93       	push	r24
    2d0e:	9f 93       	push	r25
    2d10:	af 93       	push	r26
    2d12:	bf 93       	push	r27
    2d14:	ef 93       	push	r30
    2d16:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    2d18:	e0 91 c7 29 	lds	r30, 0x29C7
    2d1c:	f0 91 c8 29 	lds	r31, 0x29C8
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	static uint16_t prev = 0;
		
	if (!fcb) return;
    2d20:	30 97       	sbiw	r30, 0x00	; 0
    2d22:	09 f4       	brne	.+2      	; 0x2d26 <__vector_14+0x30>
    2d24:	47 c0       	rjmp	.+142    	; 0x2db4 <__vector_14+0xbe>
	ct = fcb->ct; ri = fcb->ri;
    2d26:	46 81       	ldd	r20, Z+6	; 0x06
    2d28:	57 81       	ldd	r21, Z+7	; 0x07
    2d2a:	22 81       	ldd	r18, Z+2	; 0x02
    2d2c:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    2d2e:	80 85       	ldd	r24, Z+8	; 0x08
    2d30:	91 85       	ldd	r25, Z+9	; 0x09
    2d32:	dc 01       	movw	r26, r24
    2d34:	a2 0f       	add	r26, r18
    2d36:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    2d38:	80 81       	ld	r24, Z
    2d3a:	91 81       	ldd	r25, Z+1	; 0x01
    2d3c:	81 30       	cpi	r24, 0x01	; 1
    2d3e:	91 05       	cpc	r25, r1
    2d40:	69 f0       	breq	.+26     	; 0x2d5c <__vector_14+0x66>
    2d42:	18 f0       	brcs	.+6      	; 0x2d4a <__vector_14+0x54>
    2d44:	02 97       	sbiw	r24, 0x02	; 2
    2d46:	99 f0       	breq	.+38     	; 0x2d6e <__vector_14+0x78>
    2d48:	1d c0       	rjmp	.+58     	; 0x2d84 <__vector_14+0x8e>
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
    2d4a:	41 15       	cp	r20, r1
    2d4c:	51 05       	cpc	r21, r1
    2d4e:	91 f1       	breq	.+100    	; 0x2db4 <__vector_14+0xbe>
		l1 = r2 = buff[0];
    2d50:	8c 91       	ld	r24, X
		ct -= 1; ri += 1;
    2d52:	41 50       	subi	r20, 0x01	; 1
    2d54:	51 09       	sbc	r21, r1
    2d56:	2f 5f       	subi	r18, 0xFF	; 255
    2d58:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    2d5a:	1d c0       	rjmp	.+58     	; 0x2d96 <__vector_14+0xa0>
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
    2d5c:	42 30       	cpi	r20, 0x02	; 2
    2d5e:	51 05       	cpc	r21, r1
    2d60:	48 f1       	brcs	.+82     	; 0x2db4 <__vector_14+0xbe>
		l1 = buff[0]; r2 = buff[1];
    2d62:	8c 91       	ld	r24, X
		ct -= 2; ri += 2;
    2d64:	42 50       	subi	r20, 0x02	; 2
    2d66:	51 09       	sbc	r21, r1
    2d68:	2e 5f       	subi	r18, 0xFE	; 254
    2d6a:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    2d6c:	14 c0       	rjmp	.+40     	; 0x2d96 <__vector_14+0xa0>
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
    2d6e:	42 30       	cpi	r20, 0x02	; 2
    2d70:	51 05       	cpc	r21, r1
    2d72:	00 f1       	brcs	.+64     	; 0x2db4 <__vector_14+0xbe>
		l1 = r2 = buff[1] + 128;
    2d74:	11 96       	adiw	r26, 0x01	; 1
    2d76:	8c 91       	ld	r24, X
    2d78:	80 58       	subi	r24, 0x80	; 128
		ct -= 2; ri += 2;
    2d7a:	42 50       	subi	r20, 0x02	; 2
    2d7c:	51 09       	sbc	r21, r1
    2d7e:	2e 5f       	subi	r18, 0xFE	; 254
    2d80:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    2d82:	09 c0       	rjmp	.+18     	; 0x2d96 <__vector_14+0xa0>
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
    2d84:	44 30       	cpi	r20, 0x04	; 4
    2d86:	51 05       	cpc	r21, r1
    2d88:	a8 f0       	brcs	.+42     	; 0x2db4 <__vector_14+0xbe>
		l2 = buff[0]; 
		l1 = buff[1];
    2d8a:	11 96       	adiw	r26, 0x01	; 1
    2d8c:	8c 91       	ld	r24, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
    2d8e:	44 50       	subi	r20, 0x04	; 4
    2d90:	51 09       	sbc	r21, r1
		ri += 4;
    2d92:	2c 5f       	subi	r18, 0xFC	; 252
    2d94:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fcb->ct = ct;
    2d96:	46 83       	std	Z+6, r20	; 0x06
    2d98:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    2d9a:	42 85       	ldd	r20, Z+10	; 0x0a
    2d9c:	53 85       	ldd	r21, Z+11	; 0x0b
    2d9e:	41 50       	subi	r20, 0x01	; 1
    2da0:	51 09       	sbc	r21, r1
    2da2:	24 23       	and	r18, r20
    2da4:	35 23       	and	r19, r21
    2da6:	22 83       	std	Z+2, r18	; 0x02
    2da8:	33 83       	std	Z+3, r19	; 0x03
	
	//uint16_t data = smooth(l1,0.35,data);
	
	DACB.CH0DATA = l1;//data;
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	e0 e2       	ldi	r30, 0x20	; 32
    2dae:	f3 e0       	ldi	r31, 0x03	; 3
    2db0:	80 8f       	std	Z+24, r24	; 0x18
    2db2:	91 8f       	std	Z+25, r25	; 0x19
	
	//prev = data;
}
    2db4:	ff 91       	pop	r31
    2db6:	ef 91       	pop	r30
    2db8:	bf 91       	pop	r27
    2dba:	af 91       	pop	r26
    2dbc:	9f 91       	pop	r25
    2dbe:	8f 91       	pop	r24
    2dc0:	5f 91       	pop	r21
    2dc2:	4f 91       	pop	r20
    2dc4:	3f 91       	pop	r19
    2dc6:	2f 91       	pop	r18
    2dc8:	0f 90       	pop	r0
    2dca:	0b be       	out	0x3b, r0	; 59
    2dcc:	0f 90       	pop	r0
    2dce:	0f be       	out	0x3f, r0	; 63
    2dd0:	0f 90       	pop	r0
    2dd2:	1f 90       	pop	r1
    2dd4:	18 95       	reti

00002dd6 <main>:
	{
		_delay_ms(1);
	}
}

int main(void) {
    2dd6:	cf 93       	push	r28
    2dd8:	df 93       	push	r29
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	63 97       	sbiw	r28, 0x13	; 19
    2de0:	cd bf       	out	0x3d, r28	; 61
    2de2:	de bf       	out	0x3e, r29	; 62
	
	bool test_ok = false;
	
	clock_setup_32_mhz();
    2de4:	0e 94 9c 06 	call	0xd38	; 0xd38 <clock_setup_32_mhz>
	ht1632c_setup(HT1632_COMMON_16NMOS);
    2de8:	84 e2       	ldi	r24, 0x24	; 36
    2dea:	0e 94 80 08 	call	0x1100	; 0x1100 <ht1632c_setup>
	ht1632c_set_brightness(0);
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	0e 94 9c 08 	call	0x1138	; 0x1138 <ht1632c_set_brightness>
	ht1632c_clear_screen();
    2df4:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ht1632c_clear_screen>
	
	esp8266_off();
    2df8:	0e 94 aa 06 	call	0xd54	; 0xd54 <esp8266_off>
	
	uart_setup();
    2dfc:	d0 d0       	rcall	.+416    	; 0x2f9e <uart_setup>
	stdout = stdin = &mystdout;
    2dfe:	8e e0       	ldi	r24, 0x0E	; 14
    2e00:	90 e2       	ldi	r25, 0x20	; 32
    2e02:	80 93 c9 29 	sts	0x29C9, r24
    2e06:	90 93 ca 29 	sts	0x29CA, r25
    2e0a:	80 93 cb 29 	sts	0x29CB, r24
    2e0e:	90 93 cc 29 	sts	0x29CC, r25
	puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
    2e12:	80 ec       	ldi	r24, 0xC0	; 192
    2e14:	97 e2       	ldi	r25, 0x27	; 39
    2e16:	8d d1       	rcall	.+794    	; 0x3132 <puts>
void uart_put_char(char c);
static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) {
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    2e18:	87 e0       	ldi	r24, 0x07	; 7
    2e1a:	e0 ea       	ldi	r30, 0xA0	; 160
    2e1c:	f0 e0       	ldi	r31, 0x00	; 0
    2e1e:	82 83       	std	Z+2, r24	; 0x02
	uart_setup();
	stdout = stdin = &mystdout;
	puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
	
	pmic_setup();
	twi_setup(&TWIC);
    2e20:	80 e8       	ldi	r24, 0x80	; 128
    2e22:	94 e0       	ldi	r25, 0x04	; 4
    2e24:	7e de       	rcall	.-772    	; 0x2b22 <twi_setup>
	si114x_setup();
    2e26:	30 d8       	rcall	.-4000   	; 0x1e88 <si114x_setup>
	//btn_si114x_setup();
	
	btn_setup();
    2e28:	0e 94 2b 0b 	call	0x1656	; 0x1656 <btn_setup>
	rtc_setup();
    2e2c:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <rtc_setup>
	rtc_init_time();
    2e30:	0e 94 3f 0c 	call	0x187e	; 0x187e <rtc_init_time>
	rtc_set_time(20,20,12,1,2015);
    2e34:	0f ed       	ldi	r16, 0xDF	; 223
    2e36:	17 e0       	ldi	r17, 0x07	; 7
    2e38:	21 e0       	ldi	r18, 0x01	; 1
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	4c e0       	ldi	r20, 0x0C	; 12
    2e3e:	64 e1       	ldi	r22, 0x14	; 20
    2e40:	84 e1       	ldi	r24, 0x14	; 20
    2e42:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <rtc_set_time>
			break;
		}
	}
	*/
	
	TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
    2e46:	e0 e4       	ldi	r30, 0x40	; 64
    2e48:	f8 e0       	ldi	r31, 0x08	; 8
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	80 83       	st	Z, r24
	TCC1.PERL = 0x80;
    2e4e:	90 e8       	ldi	r25, 0x80	; 128
    2e50:	96 a3       	std	Z+38, r25	; 0x26
	TCC1.PERH = 0x0C;
    2e52:	9c e0       	ldi	r25, 0x0C	; 12
    2e54:	97 a3       	std	Z+39, r25	; 0x27
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
    2e56:	86 83       	std	Z+6, r24	; 0x06
	
	sei();
    2e58:	78 94       	sei
	
	SI114X_IRQ_SAMPLE sensor_data;
	
	while (1) { 
		sensor_data.timestamp = counter;
    2e5a:	80 91 2f 29 	lds	r24, 0x292F
    2e5e:	90 91 30 29 	lds	r25, 0x2930
    2e62:	8b 83       	std	Y+3, r24	; 0x03
    2e64:	9c 83       	std	Y+4, r25	; 0x04
		si114x_get_data(&sensor_data);
    2e66:	ce 01       	movw	r24, r28
    2e68:	01 96       	adiw	r24, 0x01	; 1
    2e6a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <si114x_get_data>
		si114x_process_samples(SI114X_ADDR,&sensor_data);
    2e6e:	be 01       	movw	r22, r28
    2e70:	6f 5f       	subi	r22, 0xFF	; 255
    2e72:	7f 4f       	sbci	r23, 0xFF	; 255
    2e74:	8a e5       	ldi	r24, 0x5A	; 90
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	19 da       	rcall	.-3022   	; 0x22ac <si114x_process_samples>

		menu_state_machine(&sensor_data);
    2e7a:	ce 01       	movw	r24, r28
    2e7c:	01 96       	adiw	r24, 0x01	; 1
    2e7e:	18 d0       	rcall	.+48     	; 0x2eb0 <menu_state_machine>
    2e80:	ec cf       	rjmp	.-40     	; 0x2e5a <main+0x84>

00002e82 <__vector_20>:
		//SLEEP.CTRL |= SLEEP_SEN_bm;
		//asm("sleep");
	}
}

ISR(TCC1_OVF_vect) {
    2e82:	1f 92       	push	r1
    2e84:	0f 92       	push	r0
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	0f 92       	push	r0
    2e8a:	11 24       	eor	r1, r1
    2e8c:	8f 93       	push	r24
    2e8e:	9f 93       	push	r25
	counter++;
    2e90:	80 91 2f 29 	lds	r24, 0x292F
    2e94:	90 91 30 29 	lds	r25, 0x2930
    2e98:	01 96       	adiw	r24, 0x01	; 1
    2e9a:	80 93 2f 29 	sts	0x292F, r24
    2e9e:	90 93 30 29 	sts	0x2930, r25
    2ea2:	9f 91       	pop	r25
    2ea4:	8f 91       	pop	r24
    2ea6:	0f 90       	pop	r0
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	0f 90       	pop	r0
    2eac:	1f 90       	pop	r1
    2eae:	18 95       	reti

00002eb0 <menu_state_machine>:
	keyString[ len ] = '\0';
	//printf( "Key[%d]: %s\n", i, keyString );
	puts(keyString);
}

void menu_state_machine(SI114X_IRQ_SAMPLE *samples) {
    2eb0:	0f 93       	push	r16
    2eb2:	cf 93       	push	r28
    2eb4:	df 93       	push	r29
    2eb6:	ec 01       	movw	r28, r24
	if (samples->gesture != 0) {
    2eb8:	8a 89       	ldd	r24, Y+18	; 0x12
    2eba:	88 23       	and	r24, r24
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <menu_state_machine+0x10>
    2ebe:	6b c0       	rjmp	.+214    	; 0x2f96 <menu_state_machine+0xe6>
		puts("enter state_machine()");
    2ec0:	88 ee       	ldi	r24, 0xE8	; 232
    2ec2:	97 e2       	ldi	r25, 0x27	; 39
    2ec4:	36 d1       	rcall	.+620    	; 0x3132 <puts>
		rtc_disable_time_render();
    2ec6:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <rtc_disable_time_render>
		if (samples->gesture == 1)
    2eca:	8a 89       	ldd	r24, Y+18	; 0x12
    2ecc:	81 30       	cpi	r24, 0x01	; 1
    2ece:	51 f5       	brne	.+84     	; 0x2f24 <menu_state_machine+0x74>
		{
			ht1632c_slide_out_to_right();
    2ed0:	0e 94 24 0b 	call	0x1648	; 0x1648 <ht1632c_slide_out_to_right>
			ht1632c_draw_char_small(1,7,'M',1,1);
    2ed4:	01 e0       	ldi	r16, 0x01	; 1
    2ed6:	21 e0       	ldi	r18, 0x01	; 1
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	4d e4       	ldi	r20, 0x4D	; 77
    2edc:	67 e0       	ldi	r22, 0x07	; 7
    2ede:	70 e0       	ldi	r23, 0x00	; 0
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	0e 94 1f 09 	call	0x123e	; 0x123e <ht1632c_draw_char_small>
			ht1632c_draw_char_small(5,7,'E',1,1);
    2ee8:	21 e0       	ldi	r18, 0x01	; 1
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	45 e4       	ldi	r20, 0x45	; 69
    2eee:	67 e0       	ldi	r22, 0x07	; 7
    2ef0:	70 e0       	ldi	r23, 0x00	; 0
    2ef2:	85 e0       	ldi	r24, 0x05	; 5
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	0e 94 1f 09 	call	0x123e	; 0x123e <ht1632c_draw_char_small>
			ht1632c_draw_char_small(9,7,'N',1,1);
    2efa:	21 e0       	ldi	r18, 0x01	; 1
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	4e e4       	ldi	r20, 0x4E	; 78
    2f00:	67 e0       	ldi	r22, 0x07	; 7
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	89 e0       	ldi	r24, 0x09	; 9
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	0e 94 1f 09 	call	0x123e	; 0x123e <ht1632c_draw_char_small>
			ht1632c_draw_char_small(13,7,'U',1,1);
    2f0c:	21 e0       	ldi	r18, 0x01	; 1
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	45 e5       	ldi	r20, 0x55	; 85
    2f12:	67 e0       	ldi	r22, 0x07	; 7
    2f14:	70 e0       	ldi	r23, 0x00	; 0
    2f16:	8d e0       	ldi	r24, 0x0D	; 13
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	0e 94 1f 09 	call	0x123e	; 0x123e <ht1632c_draw_char_small>
			ht1632c_slide_in_from_left();
    2f1e:	0e 94 ae 0a 	call	0x155c	; 0x155c <ht1632c_slide_in_from_left>
    2f22:	34 c0       	rjmp	.+104    	; 0x2f8c <menu_state_machine+0xdc>
		} else if (samples->gesture == 2) {
    2f24:	82 30       	cpi	r24, 0x02	; 2
    2f26:	49 f4       	brne	.+18     	; 0x2f3a <menu_state_machine+0x8a>
			ht1632c_slide_out_to_left();	
    2f28:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <ht1632c_slide_out_to_left>
			ht1632c_clear_screen();
    2f2c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ht1632c_clear_screen>
			rtc_enable_time_render();
    2f30:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rtc_enable_time_render>
			ht1632c_slide_in_from_right();
    2f34:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <ht1632c_slide_in_from_right>
    2f38:	29 c0       	rjmp	.+82     	; 0x2f8c <menu_state_machine+0xdc>
		} else {

			ht1632c_slide_out_to_left();		
    2f3a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <ht1632c_slide_out_to_left>
			ht1632c_draw_char_small(1,7,'I',1,1);
    2f3e:	01 e0       	ldi	r16, 0x01	; 1
    2f40:	21 e0       	ldi	r18, 0x01	; 1
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	49 e4       	ldi	r20, 0x49	; 73
    2f46:	67 e0       	ldi	r22, 0x07	; 7
    2f48:	70 e0       	ldi	r23, 0x00	; 0
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	0e 94 1f 09 	call	0x123e	; 0x123e <ht1632c_draw_char_small>
			ht1632c_draw_char_small(5,7,'N',1,1);
    2f52:	21 e0       	ldi	r18, 0x01	; 1
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	4e e4       	ldi	r20, 0x4E	; 78
    2f58:	67 e0       	ldi	r22, 0x07	; 7
    2f5a:	70 e0       	ldi	r23, 0x00	; 0
    2f5c:	85 e0       	ldi	r24, 0x05	; 5
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	0e 94 1f 09 	call	0x123e	; 0x123e <ht1632c_draw_char_small>
			ht1632c_draw_char_small(9,7,'F',1,1);
    2f64:	21 e0       	ldi	r18, 0x01	; 1
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	46 e4       	ldi	r20, 0x46	; 70
    2f6a:	67 e0       	ldi	r22, 0x07	; 7
    2f6c:	70 e0       	ldi	r23, 0x00	; 0
    2f6e:	89 e0       	ldi	r24, 0x09	; 9
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	0e 94 1f 09 	call	0x123e	; 0x123e <ht1632c_draw_char_small>
			ht1632c_draw_char_small(13,7,'O',1,1);
    2f76:	21 e0       	ldi	r18, 0x01	; 1
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	4f e4       	ldi	r20, 0x4F	; 79
    2f7c:	67 e0       	ldi	r22, 0x07	; 7
    2f7e:	70 e0       	ldi	r23, 0x00	; 0
    2f80:	8d e0       	ldi	r24, 0x0D	; 13
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	0e 94 1f 09 	call	0x123e	; 0x123e <ht1632c_draw_char_small>
			ht1632c_slide_in_from_right();
    2f88:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <ht1632c_slide_in_from_right>
		}
		btn_status = NONE;
    2f8c:	10 92 77 29 	sts	0x2977, r1
		puts("left state_machine()");
    2f90:	8e ef       	ldi	r24, 0xFE	; 254
    2f92:	97 e2       	ldi	r25, 0x27	; 39
    2f94:	ce d0       	rcall	.+412    	; 0x3132 <puts>
				break;
		}
		btn_status = NONE;
	}
	*/
}
    2f96:	df 91       	pop	r29
    2f98:	cf 91       	pop	r28
    2f9a:	0f 91       	pop	r16
    2f9c:	08 95       	ret

00002f9e <uart_setup>:

#include "uart.h"

void uart_setup(void) {
	
	PORTD.DIRSET = PIN3_bm; //TX
    2f9e:	e0 e6       	ldi	r30, 0x60	; 96
    2fa0:	f6 e0       	ldi	r31, 0x06	; 6
    2fa2:	88 e0       	ldi	r24, 0x08	; 8
    2fa4:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; //RX
    2fa6:	84 e0       	ldi	r24, 0x04	; 4
    2fa8:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
    2faa:	e0 ea       	ldi	r30, 0xA0	; 160
    2fac:	f9 e0       	ldi	r31, 0x09	; 9
    2fae:	80 e2       	ldi	r24, 0x20	; 32
    2fb0:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 2094;//207;//0x1111;
    2fb2:	8e e2       	ldi	r24, 0x2E	; 46
    2fb4:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (-7 << 4) | (2094 >> 8);
    2fb6:	88 e9       	ldi	r24, 0x98	; 152
    2fb8:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
    2fba:	83 e0       	ldi	r24, 0x03	; 3
    2fbc:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    2fbe:	88 e1       	ldi	r24, 0x18	; 24
    2fc0:	84 83       	std	Z+4, r24	; 0x04
    2fc2:	08 95       	ret

00002fc4 <uart_put_char>:
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2fc4:	e0 ea       	ldi	r30, 0xA0	; 160
    2fc6:	f9 e0       	ldi	r31, 0x09	; 9
    2fc8:	91 81       	ldd	r25, Z+1	; 0x01
    2fca:	95 ff       	sbrs	r25, 5
    2fcc:	fd cf       	rjmp	.-6      	; 0x2fc8 <uart_put_char+0x4>
	USARTD0.DATA = c;
    2fce:	80 93 a0 09 	sts	0x09A0, r24
    2fd2:	08 95       	ret

00002fd4 <uart_get_char>:
}

char uart_get_char(void) {
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
    2fd4:	e0 ea       	ldi	r30, 0xA0	; 160
    2fd6:	f9 e0       	ldi	r31, 0x09	; 9
    2fd8:	81 81       	ldd	r24, Z+1	; 0x01
    2fda:	88 23       	and	r24, r24
    2fdc:	ec f7       	brge	.-6      	; 0x2fd8 <uart_get_char+0x4>
	return USARTD0.DATA;
    2fde:	80 91 a0 09 	lds	r24, 0x09A0
}
    2fe2:	08 95       	ret

00002fe4 <__divmodhi4>:
    2fe4:	97 fb       	bst	r25, 7
    2fe6:	07 2e       	mov	r0, r23
    2fe8:	16 f4       	brtc	.+4      	; 0x2fee <__divmodhi4+0xa>
    2fea:	00 94       	com	r0
    2fec:	06 d0       	rcall	.+12     	; 0x2ffa <__divmodhi4_neg1>
    2fee:	77 fd       	sbrc	r23, 7
    2ff0:	08 d0       	rcall	.+16     	; 0x3002 <__divmodhi4_neg2>
    2ff2:	46 d0       	rcall	.+140    	; 0x3080 <__udivmodhi4>
    2ff4:	07 fc       	sbrc	r0, 7
    2ff6:	05 d0       	rcall	.+10     	; 0x3002 <__divmodhi4_neg2>
    2ff8:	3e f4       	brtc	.+14     	; 0x3008 <__divmodhi4_exit>

00002ffa <__divmodhi4_neg1>:
    2ffa:	90 95       	com	r25
    2ffc:	81 95       	neg	r24
    2ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    3000:	08 95       	ret

00003002 <__divmodhi4_neg2>:
    3002:	70 95       	com	r23
    3004:	61 95       	neg	r22
    3006:	7f 4f       	sbci	r23, 0xFF	; 255

00003008 <__divmodhi4_exit>:
    3008:	08 95       	ret

0000300a <__udivmodsi4>:
    300a:	a1 e2       	ldi	r26, 0x21	; 33
    300c:	1a 2e       	mov	r1, r26
    300e:	aa 1b       	sub	r26, r26
    3010:	bb 1b       	sub	r27, r27
    3012:	fd 01       	movw	r30, r26
    3014:	0d c0       	rjmp	.+26     	; 0x3030 <__udivmodsi4_ep>

00003016 <__udivmodsi4_loop>:
    3016:	aa 1f       	adc	r26, r26
    3018:	bb 1f       	adc	r27, r27
    301a:	ee 1f       	adc	r30, r30
    301c:	ff 1f       	adc	r31, r31
    301e:	a2 17       	cp	r26, r18
    3020:	b3 07       	cpc	r27, r19
    3022:	e4 07       	cpc	r30, r20
    3024:	f5 07       	cpc	r31, r21
    3026:	20 f0       	brcs	.+8      	; 0x3030 <__udivmodsi4_ep>
    3028:	a2 1b       	sub	r26, r18
    302a:	b3 0b       	sbc	r27, r19
    302c:	e4 0b       	sbc	r30, r20
    302e:	f5 0b       	sbc	r31, r21

00003030 <__udivmodsi4_ep>:
    3030:	66 1f       	adc	r22, r22
    3032:	77 1f       	adc	r23, r23
    3034:	88 1f       	adc	r24, r24
    3036:	99 1f       	adc	r25, r25
    3038:	1a 94       	dec	r1
    303a:	69 f7       	brne	.-38     	; 0x3016 <__udivmodsi4_loop>
    303c:	60 95       	com	r22
    303e:	70 95       	com	r23
    3040:	80 95       	com	r24
    3042:	90 95       	com	r25
    3044:	9b 01       	movw	r18, r22
    3046:	ac 01       	movw	r20, r24
    3048:	bd 01       	movw	r22, r26
    304a:	cf 01       	movw	r24, r30
    304c:	08 95       	ret

0000304e <__umulhisi3>:
    304e:	a2 9f       	mul	r26, r18
    3050:	b0 01       	movw	r22, r0
    3052:	b3 9f       	mul	r27, r19
    3054:	c0 01       	movw	r24, r0
    3056:	a3 9f       	mul	r26, r19
    3058:	70 0d       	add	r23, r0
    305a:	81 1d       	adc	r24, r1
    305c:	11 24       	eor	r1, r1
    305e:	91 1d       	adc	r25, r1
    3060:	b2 9f       	mul	r27, r18
    3062:	70 0d       	add	r23, r0
    3064:	81 1d       	adc	r24, r1
    3066:	11 24       	eor	r1, r1
    3068:	91 1d       	adc	r25, r1
    306a:	08 95       	ret

0000306c <__muluhisi3>:
    306c:	f0 df       	rcall	.-32     	; 0x304e <__umulhisi3>
    306e:	a5 9f       	mul	r26, r21
    3070:	90 0d       	add	r25, r0
    3072:	b4 9f       	mul	r27, r20
    3074:	90 0d       	add	r25, r0
    3076:	a4 9f       	mul	r26, r20
    3078:	80 0d       	add	r24, r0
    307a:	91 1d       	adc	r25, r1
    307c:	11 24       	eor	r1, r1
    307e:	08 95       	ret

00003080 <__udivmodhi4>:
    3080:	aa 1b       	sub	r26, r26
    3082:	bb 1b       	sub	r27, r27
    3084:	51 e1       	ldi	r21, 0x11	; 17
    3086:	07 c0       	rjmp	.+14     	; 0x3096 <__udivmodhi4_ep>

00003088 <__udivmodhi4_loop>:
    3088:	aa 1f       	adc	r26, r26
    308a:	bb 1f       	adc	r27, r27
    308c:	a6 17       	cp	r26, r22
    308e:	b7 07       	cpc	r27, r23
    3090:	10 f0       	brcs	.+4      	; 0x3096 <__udivmodhi4_ep>
    3092:	a6 1b       	sub	r26, r22
    3094:	b7 0b       	sbc	r27, r23

00003096 <__udivmodhi4_ep>:
    3096:	88 1f       	adc	r24, r24
    3098:	99 1f       	adc	r25, r25
    309a:	5a 95       	dec	r21
    309c:	a9 f7       	brne	.-22     	; 0x3088 <__udivmodhi4_loop>
    309e:	80 95       	com	r24
    30a0:	90 95       	com	r25
    30a2:	bc 01       	movw	r22, r24
    30a4:	cd 01       	movw	r24, r26
    30a6:	08 95       	ret

000030a8 <strchr>:
    30a8:	fc 01       	movw	r30, r24
    30aa:	81 91       	ld	r24, Z+
    30ac:	86 17       	cp	r24, r22
    30ae:	21 f0       	breq	.+8      	; 0x30b8 <strchr+0x10>
    30b0:	88 23       	and	r24, r24
    30b2:	d9 f7       	brne	.-10     	; 0x30aa <strchr+0x2>
    30b4:	99 27       	eor	r25, r25
    30b6:	08 95       	ret
    30b8:	31 97       	sbiw	r30, 0x01	; 1
    30ba:	cf 01       	movw	r24, r30
    30bc:	08 95       	ret

000030be <strncpy>:
    30be:	fb 01       	movw	r30, r22
    30c0:	dc 01       	movw	r26, r24
    30c2:	41 50       	subi	r20, 0x01	; 1
    30c4:	50 40       	sbci	r21, 0x00	; 0
    30c6:	48 f0       	brcs	.+18     	; 0x30da <strncpy+0x1c>
    30c8:	01 90       	ld	r0, Z+
    30ca:	0d 92       	st	X+, r0
    30cc:	00 20       	and	r0, r0
    30ce:	c9 f7       	brne	.-14     	; 0x30c2 <strncpy+0x4>
    30d0:	01 c0       	rjmp	.+2      	; 0x30d4 <strncpy+0x16>
    30d2:	1d 92       	st	X+, r1
    30d4:	41 50       	subi	r20, 0x01	; 1
    30d6:	50 40       	sbci	r21, 0x00	; 0
    30d8:	e0 f7       	brcc	.-8      	; 0x30d2 <strncpy+0x14>
    30da:	08 95       	ret

000030dc <strstr>:
    30dc:	fb 01       	movw	r30, r22
    30de:	51 91       	ld	r21, Z+
    30e0:	55 23       	and	r21, r21
    30e2:	a9 f0       	breq	.+42     	; 0x310e <strstr+0x32>
    30e4:	bf 01       	movw	r22, r30
    30e6:	dc 01       	movw	r26, r24
    30e8:	4d 91       	ld	r20, X+
    30ea:	45 17       	cp	r20, r21
    30ec:	41 11       	cpse	r20, r1
    30ee:	e1 f7       	brne	.-8      	; 0x30e8 <strstr+0xc>
    30f0:	59 f4       	brne	.+22     	; 0x3108 <strstr+0x2c>
    30f2:	cd 01       	movw	r24, r26
    30f4:	01 90       	ld	r0, Z+
    30f6:	00 20       	and	r0, r0
    30f8:	49 f0       	breq	.+18     	; 0x310c <strstr+0x30>
    30fa:	4d 91       	ld	r20, X+
    30fc:	40 15       	cp	r20, r0
    30fe:	41 11       	cpse	r20, r1
    3100:	c9 f3       	breq	.-14     	; 0x30f4 <strstr+0x18>
    3102:	fb 01       	movw	r30, r22
    3104:	41 11       	cpse	r20, r1
    3106:	ef cf       	rjmp	.-34     	; 0x30e6 <strstr+0xa>
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	08 95       	ret

00003110 <printf>:
    3110:	cf 93       	push	r28
    3112:	df 93       	push	r29
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
    3118:	fe 01       	movw	r30, r28
    311a:	35 96       	adiw	r30, 0x05	; 5
    311c:	61 91       	ld	r22, Z+
    311e:	71 91       	ld	r23, Z+
    3120:	af 01       	movw	r20, r30
    3122:	80 91 cb 29 	lds	r24, 0x29CB
    3126:	90 91 cc 29 	lds	r25, 0x29CC
    312a:	58 d0       	rcall	.+176    	; 0x31dc <vfprintf>
    312c:	df 91       	pop	r29
    312e:	cf 91       	pop	r28
    3130:	08 95       	ret

00003132 <puts>:
    3132:	0f 93       	push	r16
    3134:	1f 93       	push	r17
    3136:	cf 93       	push	r28
    3138:	df 93       	push	r29
    313a:	e0 91 cb 29 	lds	r30, 0x29CB
    313e:	f0 91 cc 29 	lds	r31, 0x29CC
    3142:	23 81       	ldd	r18, Z+3	; 0x03
    3144:	21 ff       	sbrs	r18, 1
    3146:	1b c0       	rjmp	.+54     	; 0x317e <puts+0x4c>
    3148:	ec 01       	movw	r28, r24
    314a:	00 e0       	ldi	r16, 0x00	; 0
    314c:	10 e0       	ldi	r17, 0x00	; 0
    314e:	89 91       	ld	r24, Y+
    3150:	60 91 cb 29 	lds	r22, 0x29CB
    3154:	70 91 cc 29 	lds	r23, 0x29CC
    3158:	db 01       	movw	r26, r22
    315a:	18 96       	adiw	r26, 0x08	; 8
    315c:	ed 91       	ld	r30, X+
    315e:	fc 91       	ld	r31, X
    3160:	19 97       	sbiw	r26, 0x09	; 9
    3162:	88 23       	and	r24, r24
    3164:	31 f0       	breq	.+12     	; 0x3172 <puts+0x40>
    3166:	09 95       	icall
    3168:	89 2b       	or	r24, r25
    316a:	89 f3       	breq	.-30     	; 0x314e <puts+0x1c>
    316c:	0f ef       	ldi	r16, 0xFF	; 255
    316e:	1f ef       	ldi	r17, 0xFF	; 255
    3170:	ee cf       	rjmp	.-36     	; 0x314e <puts+0x1c>
    3172:	8a e0       	ldi	r24, 0x0A	; 10
    3174:	09 95       	icall
    3176:	89 2b       	or	r24, r25
    3178:	11 f4       	brne	.+4      	; 0x317e <puts+0x4c>
    317a:	c8 01       	movw	r24, r16
    317c:	02 c0       	rjmp	.+4      	; 0x3182 <puts+0x50>
    317e:	8f ef       	ldi	r24, 0xFF	; 255
    3180:	9f ef       	ldi	r25, 0xFF	; 255
    3182:	df 91       	pop	r29
    3184:	cf 91       	pop	r28
    3186:	1f 91       	pop	r17
    3188:	0f 91       	pop	r16
    318a:	08 95       	ret

0000318c <sprintf>:
    318c:	0f 93       	push	r16
    318e:	1f 93       	push	r17
    3190:	cf 93       	push	r28
    3192:	df 93       	push	r29
    3194:	cd b7       	in	r28, 0x3d	; 61
    3196:	de b7       	in	r29, 0x3e	; 62
    3198:	2e 97       	sbiw	r28, 0x0e	; 14
    319a:	cd bf       	out	0x3d, r28	; 61
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	0d 89       	ldd	r16, Y+21	; 0x15
    31a0:	1e 89       	ldd	r17, Y+22	; 0x16
    31a2:	86 e0       	ldi	r24, 0x06	; 6
    31a4:	8c 83       	std	Y+4, r24	; 0x04
    31a6:	09 83       	std	Y+1, r16	; 0x01
    31a8:	1a 83       	std	Y+2, r17	; 0x02
    31aa:	8f ef       	ldi	r24, 0xFF	; 255
    31ac:	9f e7       	ldi	r25, 0x7F	; 127
    31ae:	8d 83       	std	Y+5, r24	; 0x05
    31b0:	9e 83       	std	Y+6, r25	; 0x06
    31b2:	ae 01       	movw	r20, r28
    31b4:	47 5e       	subi	r20, 0xE7	; 231
    31b6:	5f 4f       	sbci	r21, 0xFF	; 255
    31b8:	6f 89       	ldd	r22, Y+23	; 0x17
    31ba:	78 8d       	ldd	r23, Y+24	; 0x18
    31bc:	ce 01       	movw	r24, r28
    31be:	01 96       	adiw	r24, 0x01	; 1
    31c0:	0d d0       	rcall	.+26     	; 0x31dc <vfprintf>
    31c2:	ef 81       	ldd	r30, Y+7	; 0x07
    31c4:	f8 85       	ldd	r31, Y+8	; 0x08
    31c6:	e0 0f       	add	r30, r16
    31c8:	f1 1f       	adc	r31, r17
    31ca:	10 82       	st	Z, r1
    31cc:	2e 96       	adiw	r28, 0x0e	; 14
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	df 91       	pop	r29
    31d4:	cf 91       	pop	r28
    31d6:	1f 91       	pop	r17
    31d8:	0f 91       	pop	r16
    31da:	08 95       	ret

000031dc <vfprintf>:
    31dc:	2f 92       	push	r2
    31de:	3f 92       	push	r3
    31e0:	4f 92       	push	r4
    31e2:	5f 92       	push	r5
    31e4:	6f 92       	push	r6
    31e6:	7f 92       	push	r7
    31e8:	8f 92       	push	r8
    31ea:	9f 92       	push	r9
    31ec:	af 92       	push	r10
    31ee:	bf 92       	push	r11
    31f0:	cf 92       	push	r12
    31f2:	df 92       	push	r13
    31f4:	ef 92       	push	r14
    31f6:	ff 92       	push	r15
    31f8:	0f 93       	push	r16
    31fa:	1f 93       	push	r17
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	2c 97       	sbiw	r28, 0x0c	; 12
    3206:	cd bf       	out	0x3d, r28	; 61
    3208:	de bf       	out	0x3e, r29	; 62
    320a:	7c 01       	movw	r14, r24
    320c:	6b 01       	movw	r12, r22
    320e:	8a 01       	movw	r16, r20
    3210:	fc 01       	movw	r30, r24
    3212:	16 82       	std	Z+6, r1	; 0x06
    3214:	17 82       	std	Z+7, r1	; 0x07
    3216:	83 81       	ldd	r24, Z+3	; 0x03
    3218:	81 ff       	sbrs	r24, 1
    321a:	b0 c1       	rjmp	.+864    	; 0x357c <vfprintf+0x3a0>
    321c:	ce 01       	movw	r24, r28
    321e:	01 96       	adiw	r24, 0x01	; 1
    3220:	4c 01       	movw	r8, r24
    3222:	f7 01       	movw	r30, r14
    3224:	93 81       	ldd	r25, Z+3	; 0x03
    3226:	f6 01       	movw	r30, r12
    3228:	93 fd       	sbrc	r25, 3
    322a:	85 91       	lpm	r24, Z+
    322c:	93 ff       	sbrs	r25, 3
    322e:	81 91       	ld	r24, Z+
    3230:	6f 01       	movw	r12, r30
    3232:	88 23       	and	r24, r24
    3234:	09 f4       	brne	.+2      	; 0x3238 <vfprintf+0x5c>
    3236:	9e c1       	rjmp	.+828    	; 0x3574 <vfprintf+0x398>
    3238:	85 32       	cpi	r24, 0x25	; 37
    323a:	39 f4       	brne	.+14     	; 0x324a <vfprintf+0x6e>
    323c:	93 fd       	sbrc	r25, 3
    323e:	85 91       	lpm	r24, Z+
    3240:	93 ff       	sbrs	r25, 3
    3242:	81 91       	ld	r24, Z+
    3244:	6f 01       	movw	r12, r30
    3246:	85 32       	cpi	r24, 0x25	; 37
    3248:	21 f4       	brne	.+8      	; 0x3252 <vfprintf+0x76>
    324a:	b7 01       	movw	r22, r14
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	c4 d1       	rcall	.+904    	; 0x35d8 <fputc>
    3250:	e8 cf       	rjmp	.-48     	; 0x3222 <vfprintf+0x46>
    3252:	51 2c       	mov	r5, r1
    3254:	31 2c       	mov	r3, r1
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	20 32       	cpi	r18, 0x20	; 32
    325a:	a0 f4       	brcc	.+40     	; 0x3284 <vfprintf+0xa8>
    325c:	8b 32       	cpi	r24, 0x2B	; 43
    325e:	69 f0       	breq	.+26     	; 0x327a <vfprintf+0x9e>
    3260:	30 f4       	brcc	.+12     	; 0x326e <vfprintf+0x92>
    3262:	80 32       	cpi	r24, 0x20	; 32
    3264:	59 f0       	breq	.+22     	; 0x327c <vfprintf+0xa0>
    3266:	83 32       	cpi	r24, 0x23	; 35
    3268:	69 f4       	brne	.+26     	; 0x3284 <vfprintf+0xa8>
    326a:	20 61       	ori	r18, 0x10	; 16
    326c:	2c c0       	rjmp	.+88     	; 0x32c6 <vfprintf+0xea>
    326e:	8d 32       	cpi	r24, 0x2D	; 45
    3270:	39 f0       	breq	.+14     	; 0x3280 <vfprintf+0xa4>
    3272:	80 33       	cpi	r24, 0x30	; 48
    3274:	39 f4       	brne	.+14     	; 0x3284 <vfprintf+0xa8>
    3276:	21 60       	ori	r18, 0x01	; 1
    3278:	26 c0       	rjmp	.+76     	; 0x32c6 <vfprintf+0xea>
    327a:	22 60       	ori	r18, 0x02	; 2
    327c:	24 60       	ori	r18, 0x04	; 4
    327e:	23 c0       	rjmp	.+70     	; 0x32c6 <vfprintf+0xea>
    3280:	28 60       	ori	r18, 0x08	; 8
    3282:	21 c0       	rjmp	.+66     	; 0x32c6 <vfprintf+0xea>
    3284:	27 fd       	sbrc	r18, 7
    3286:	27 c0       	rjmp	.+78     	; 0x32d6 <vfprintf+0xfa>
    3288:	30 ed       	ldi	r19, 0xD0	; 208
    328a:	38 0f       	add	r19, r24
    328c:	3a 30       	cpi	r19, 0x0A	; 10
    328e:	78 f4       	brcc	.+30     	; 0x32ae <vfprintf+0xd2>
    3290:	26 ff       	sbrs	r18, 6
    3292:	06 c0       	rjmp	.+12     	; 0x32a0 <vfprintf+0xc4>
    3294:	fa e0       	ldi	r31, 0x0A	; 10
    3296:	5f 9e       	mul	r5, r31
    3298:	30 0d       	add	r19, r0
    329a:	11 24       	eor	r1, r1
    329c:	53 2e       	mov	r5, r19
    329e:	13 c0       	rjmp	.+38     	; 0x32c6 <vfprintf+0xea>
    32a0:	8a e0       	ldi	r24, 0x0A	; 10
    32a2:	38 9e       	mul	r3, r24
    32a4:	30 0d       	add	r19, r0
    32a6:	11 24       	eor	r1, r1
    32a8:	33 2e       	mov	r3, r19
    32aa:	20 62       	ori	r18, 0x20	; 32
    32ac:	0c c0       	rjmp	.+24     	; 0x32c6 <vfprintf+0xea>
    32ae:	8e 32       	cpi	r24, 0x2E	; 46
    32b0:	21 f4       	brne	.+8      	; 0x32ba <vfprintf+0xde>
    32b2:	26 fd       	sbrc	r18, 6
    32b4:	5f c1       	rjmp	.+702    	; 0x3574 <vfprintf+0x398>
    32b6:	20 64       	ori	r18, 0x40	; 64
    32b8:	06 c0       	rjmp	.+12     	; 0x32c6 <vfprintf+0xea>
    32ba:	8c 36       	cpi	r24, 0x6C	; 108
    32bc:	11 f4       	brne	.+4      	; 0x32c2 <vfprintf+0xe6>
    32be:	20 68       	ori	r18, 0x80	; 128
    32c0:	02 c0       	rjmp	.+4      	; 0x32c6 <vfprintf+0xea>
    32c2:	88 36       	cpi	r24, 0x68	; 104
    32c4:	41 f4       	brne	.+16     	; 0x32d6 <vfprintf+0xfa>
    32c6:	f6 01       	movw	r30, r12
    32c8:	93 fd       	sbrc	r25, 3
    32ca:	85 91       	lpm	r24, Z+
    32cc:	93 ff       	sbrs	r25, 3
    32ce:	81 91       	ld	r24, Z+
    32d0:	6f 01       	movw	r12, r30
    32d2:	81 11       	cpse	r24, r1
    32d4:	c1 cf       	rjmp	.-126    	; 0x3258 <vfprintf+0x7c>
    32d6:	98 2f       	mov	r25, r24
    32d8:	9f 7d       	andi	r25, 0xDF	; 223
    32da:	95 54       	subi	r25, 0x45	; 69
    32dc:	93 30       	cpi	r25, 0x03	; 3
    32de:	28 f4       	brcc	.+10     	; 0x32ea <vfprintf+0x10e>
    32e0:	0c 5f       	subi	r16, 0xFC	; 252
    32e2:	1f 4f       	sbci	r17, 0xFF	; 255
    32e4:	ff e3       	ldi	r31, 0x3F	; 63
    32e6:	f9 83       	std	Y+1, r31	; 0x01
    32e8:	0d c0       	rjmp	.+26     	; 0x3304 <vfprintf+0x128>
    32ea:	83 36       	cpi	r24, 0x63	; 99
    32ec:	31 f0       	breq	.+12     	; 0x32fa <vfprintf+0x11e>
    32ee:	83 37       	cpi	r24, 0x73	; 115
    32f0:	71 f0       	breq	.+28     	; 0x330e <vfprintf+0x132>
    32f2:	83 35       	cpi	r24, 0x53	; 83
    32f4:	09 f0       	breq	.+2      	; 0x32f8 <vfprintf+0x11c>
    32f6:	57 c0       	rjmp	.+174    	; 0x33a6 <vfprintf+0x1ca>
    32f8:	21 c0       	rjmp	.+66     	; 0x333c <vfprintf+0x160>
    32fa:	f8 01       	movw	r30, r16
    32fc:	80 81       	ld	r24, Z
    32fe:	89 83       	std	Y+1, r24	; 0x01
    3300:	0e 5f       	subi	r16, 0xFE	; 254
    3302:	1f 4f       	sbci	r17, 0xFF	; 255
    3304:	44 24       	eor	r4, r4
    3306:	43 94       	inc	r4
    3308:	51 2c       	mov	r5, r1
    330a:	54 01       	movw	r10, r8
    330c:	14 c0       	rjmp	.+40     	; 0x3336 <vfprintf+0x15a>
    330e:	38 01       	movw	r6, r16
    3310:	f2 e0       	ldi	r31, 0x02	; 2
    3312:	6f 0e       	add	r6, r31
    3314:	71 1c       	adc	r7, r1
    3316:	f8 01       	movw	r30, r16
    3318:	a0 80       	ld	r10, Z
    331a:	b1 80       	ldd	r11, Z+1	; 0x01
    331c:	26 ff       	sbrs	r18, 6
    331e:	03 c0       	rjmp	.+6      	; 0x3326 <vfprintf+0x14a>
    3320:	65 2d       	mov	r22, r5
    3322:	70 e0       	ldi	r23, 0x00	; 0
    3324:	02 c0       	rjmp	.+4      	; 0x332a <vfprintf+0x14e>
    3326:	6f ef       	ldi	r22, 0xFF	; 255
    3328:	7f ef       	ldi	r23, 0xFF	; 255
    332a:	c5 01       	movw	r24, r10
    332c:	2c 87       	std	Y+12, r18	; 0x0c
    332e:	49 d1       	rcall	.+658    	; 0x35c2 <strnlen>
    3330:	2c 01       	movw	r4, r24
    3332:	83 01       	movw	r16, r6
    3334:	2c 85       	ldd	r18, Y+12	; 0x0c
    3336:	2f 77       	andi	r18, 0x7F	; 127
    3338:	22 2e       	mov	r2, r18
    333a:	16 c0       	rjmp	.+44     	; 0x3368 <vfprintf+0x18c>
    333c:	38 01       	movw	r6, r16
    333e:	f2 e0       	ldi	r31, 0x02	; 2
    3340:	6f 0e       	add	r6, r31
    3342:	71 1c       	adc	r7, r1
    3344:	f8 01       	movw	r30, r16
    3346:	a0 80       	ld	r10, Z
    3348:	b1 80       	ldd	r11, Z+1	; 0x01
    334a:	26 ff       	sbrs	r18, 6
    334c:	03 c0       	rjmp	.+6      	; 0x3354 <vfprintf+0x178>
    334e:	65 2d       	mov	r22, r5
    3350:	70 e0       	ldi	r23, 0x00	; 0
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <vfprintf+0x17c>
    3354:	6f ef       	ldi	r22, 0xFF	; 255
    3356:	7f ef       	ldi	r23, 0xFF	; 255
    3358:	c5 01       	movw	r24, r10
    335a:	2c 87       	std	Y+12, r18	; 0x0c
    335c:	27 d1       	rcall	.+590    	; 0x35ac <strnlen_P>
    335e:	2c 01       	movw	r4, r24
    3360:	2c 85       	ldd	r18, Y+12	; 0x0c
    3362:	20 68       	ori	r18, 0x80	; 128
    3364:	22 2e       	mov	r2, r18
    3366:	83 01       	movw	r16, r6
    3368:	23 fc       	sbrc	r2, 3
    336a:	19 c0       	rjmp	.+50     	; 0x339e <vfprintf+0x1c2>
    336c:	83 2d       	mov	r24, r3
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	48 16       	cp	r4, r24
    3372:	59 06       	cpc	r5, r25
    3374:	a0 f4       	brcc	.+40     	; 0x339e <vfprintf+0x1c2>
    3376:	b7 01       	movw	r22, r14
    3378:	80 e2       	ldi	r24, 0x20	; 32
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	2d d1       	rcall	.+602    	; 0x35d8 <fputc>
    337e:	3a 94       	dec	r3
    3380:	f5 cf       	rjmp	.-22     	; 0x336c <vfprintf+0x190>
    3382:	f5 01       	movw	r30, r10
    3384:	27 fc       	sbrc	r2, 7
    3386:	85 91       	lpm	r24, Z+
    3388:	27 fe       	sbrs	r2, 7
    338a:	81 91       	ld	r24, Z+
    338c:	5f 01       	movw	r10, r30
    338e:	b7 01       	movw	r22, r14
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	22 d1       	rcall	.+580    	; 0x35d8 <fputc>
    3394:	31 10       	cpse	r3, r1
    3396:	3a 94       	dec	r3
    3398:	f1 e0       	ldi	r31, 0x01	; 1
    339a:	4f 1a       	sub	r4, r31
    339c:	51 08       	sbc	r5, r1
    339e:	41 14       	cp	r4, r1
    33a0:	51 04       	cpc	r5, r1
    33a2:	79 f7       	brne	.-34     	; 0x3382 <vfprintf+0x1a6>
    33a4:	de c0       	rjmp	.+444    	; 0x3562 <vfprintf+0x386>
    33a6:	84 36       	cpi	r24, 0x64	; 100
    33a8:	11 f0       	breq	.+4      	; 0x33ae <vfprintf+0x1d2>
    33aa:	89 36       	cpi	r24, 0x69	; 105
    33ac:	31 f5       	brne	.+76     	; 0x33fa <vfprintf+0x21e>
    33ae:	f8 01       	movw	r30, r16
    33b0:	27 ff       	sbrs	r18, 7
    33b2:	07 c0       	rjmp	.+14     	; 0x33c2 <vfprintf+0x1e6>
    33b4:	60 81       	ld	r22, Z
    33b6:	71 81       	ldd	r23, Z+1	; 0x01
    33b8:	82 81       	ldd	r24, Z+2	; 0x02
    33ba:	93 81       	ldd	r25, Z+3	; 0x03
    33bc:	0c 5f       	subi	r16, 0xFC	; 252
    33be:	1f 4f       	sbci	r17, 0xFF	; 255
    33c0:	08 c0       	rjmp	.+16     	; 0x33d2 <vfprintf+0x1f6>
    33c2:	60 81       	ld	r22, Z
    33c4:	71 81       	ldd	r23, Z+1	; 0x01
    33c6:	88 27       	eor	r24, r24
    33c8:	77 fd       	sbrc	r23, 7
    33ca:	80 95       	com	r24
    33cc:	98 2f       	mov	r25, r24
    33ce:	0e 5f       	subi	r16, 0xFE	; 254
    33d0:	1f 4f       	sbci	r17, 0xFF	; 255
    33d2:	2f 76       	andi	r18, 0x6F	; 111
    33d4:	b2 2e       	mov	r11, r18
    33d6:	97 ff       	sbrs	r25, 7
    33d8:	09 c0       	rjmp	.+18     	; 0x33ec <vfprintf+0x210>
    33da:	90 95       	com	r25
    33dc:	80 95       	com	r24
    33de:	70 95       	com	r23
    33e0:	61 95       	neg	r22
    33e2:	7f 4f       	sbci	r23, 0xFF	; 255
    33e4:	8f 4f       	sbci	r24, 0xFF	; 255
    33e6:	9f 4f       	sbci	r25, 0xFF	; 255
    33e8:	20 68       	ori	r18, 0x80	; 128
    33ea:	b2 2e       	mov	r11, r18
    33ec:	2a e0       	ldi	r18, 0x0A	; 10
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	a4 01       	movw	r20, r8
    33f2:	24 d1       	rcall	.+584    	; 0x363c <__ultoa_invert>
    33f4:	a8 2e       	mov	r10, r24
    33f6:	a8 18       	sub	r10, r8
    33f8:	43 c0       	rjmp	.+134    	; 0x3480 <vfprintf+0x2a4>
    33fa:	85 37       	cpi	r24, 0x75	; 117
    33fc:	29 f4       	brne	.+10     	; 0x3408 <vfprintf+0x22c>
    33fe:	2f 7e       	andi	r18, 0xEF	; 239
    3400:	b2 2e       	mov	r11, r18
    3402:	2a e0       	ldi	r18, 0x0A	; 10
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	25 c0       	rjmp	.+74     	; 0x3452 <vfprintf+0x276>
    3408:	f2 2f       	mov	r31, r18
    340a:	f9 7f       	andi	r31, 0xF9	; 249
    340c:	bf 2e       	mov	r11, r31
    340e:	8f 36       	cpi	r24, 0x6F	; 111
    3410:	c1 f0       	breq	.+48     	; 0x3442 <vfprintf+0x266>
    3412:	18 f4       	brcc	.+6      	; 0x341a <vfprintf+0x23e>
    3414:	88 35       	cpi	r24, 0x58	; 88
    3416:	79 f0       	breq	.+30     	; 0x3436 <vfprintf+0x25a>
    3418:	ad c0       	rjmp	.+346    	; 0x3574 <vfprintf+0x398>
    341a:	80 37       	cpi	r24, 0x70	; 112
    341c:	19 f0       	breq	.+6      	; 0x3424 <vfprintf+0x248>
    341e:	88 37       	cpi	r24, 0x78	; 120
    3420:	21 f0       	breq	.+8      	; 0x342a <vfprintf+0x24e>
    3422:	a8 c0       	rjmp	.+336    	; 0x3574 <vfprintf+0x398>
    3424:	2f 2f       	mov	r18, r31
    3426:	20 61       	ori	r18, 0x10	; 16
    3428:	b2 2e       	mov	r11, r18
    342a:	b4 fe       	sbrs	r11, 4
    342c:	0d c0       	rjmp	.+26     	; 0x3448 <vfprintf+0x26c>
    342e:	8b 2d       	mov	r24, r11
    3430:	84 60       	ori	r24, 0x04	; 4
    3432:	b8 2e       	mov	r11, r24
    3434:	09 c0       	rjmp	.+18     	; 0x3448 <vfprintf+0x26c>
    3436:	24 ff       	sbrs	r18, 4
    3438:	0a c0       	rjmp	.+20     	; 0x344e <vfprintf+0x272>
    343a:	9f 2f       	mov	r25, r31
    343c:	96 60       	ori	r25, 0x06	; 6
    343e:	b9 2e       	mov	r11, r25
    3440:	06 c0       	rjmp	.+12     	; 0x344e <vfprintf+0x272>
    3442:	28 e0       	ldi	r18, 0x08	; 8
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	05 c0       	rjmp	.+10     	; 0x3452 <vfprintf+0x276>
    3448:	20 e1       	ldi	r18, 0x10	; 16
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	02 c0       	rjmp	.+4      	; 0x3452 <vfprintf+0x276>
    344e:	20 e1       	ldi	r18, 0x10	; 16
    3450:	32 e0       	ldi	r19, 0x02	; 2
    3452:	f8 01       	movw	r30, r16
    3454:	b7 fe       	sbrs	r11, 7
    3456:	07 c0       	rjmp	.+14     	; 0x3466 <vfprintf+0x28a>
    3458:	60 81       	ld	r22, Z
    345a:	71 81       	ldd	r23, Z+1	; 0x01
    345c:	82 81       	ldd	r24, Z+2	; 0x02
    345e:	93 81       	ldd	r25, Z+3	; 0x03
    3460:	0c 5f       	subi	r16, 0xFC	; 252
    3462:	1f 4f       	sbci	r17, 0xFF	; 255
    3464:	06 c0       	rjmp	.+12     	; 0x3472 <vfprintf+0x296>
    3466:	60 81       	ld	r22, Z
    3468:	71 81       	ldd	r23, Z+1	; 0x01
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	0e 5f       	subi	r16, 0xFE	; 254
    3470:	1f 4f       	sbci	r17, 0xFF	; 255
    3472:	a4 01       	movw	r20, r8
    3474:	e3 d0       	rcall	.+454    	; 0x363c <__ultoa_invert>
    3476:	a8 2e       	mov	r10, r24
    3478:	a8 18       	sub	r10, r8
    347a:	fb 2d       	mov	r31, r11
    347c:	ff 77       	andi	r31, 0x7F	; 127
    347e:	bf 2e       	mov	r11, r31
    3480:	b6 fe       	sbrs	r11, 6
    3482:	0b c0       	rjmp	.+22     	; 0x349a <vfprintf+0x2be>
    3484:	2b 2d       	mov	r18, r11
    3486:	2e 7f       	andi	r18, 0xFE	; 254
    3488:	a5 14       	cp	r10, r5
    348a:	50 f4       	brcc	.+20     	; 0x34a0 <vfprintf+0x2c4>
    348c:	b4 fe       	sbrs	r11, 4
    348e:	0a c0       	rjmp	.+20     	; 0x34a4 <vfprintf+0x2c8>
    3490:	b2 fc       	sbrc	r11, 2
    3492:	08 c0       	rjmp	.+16     	; 0x34a4 <vfprintf+0x2c8>
    3494:	2b 2d       	mov	r18, r11
    3496:	2e 7e       	andi	r18, 0xEE	; 238
    3498:	05 c0       	rjmp	.+10     	; 0x34a4 <vfprintf+0x2c8>
    349a:	7a 2c       	mov	r7, r10
    349c:	2b 2d       	mov	r18, r11
    349e:	03 c0       	rjmp	.+6      	; 0x34a6 <vfprintf+0x2ca>
    34a0:	7a 2c       	mov	r7, r10
    34a2:	01 c0       	rjmp	.+2      	; 0x34a6 <vfprintf+0x2ca>
    34a4:	75 2c       	mov	r7, r5
    34a6:	24 ff       	sbrs	r18, 4
    34a8:	0d c0       	rjmp	.+26     	; 0x34c4 <vfprintf+0x2e8>
    34aa:	fe 01       	movw	r30, r28
    34ac:	ea 0d       	add	r30, r10
    34ae:	f1 1d       	adc	r31, r1
    34b0:	80 81       	ld	r24, Z
    34b2:	80 33       	cpi	r24, 0x30	; 48
    34b4:	11 f4       	brne	.+4      	; 0x34ba <vfprintf+0x2de>
    34b6:	29 7e       	andi	r18, 0xE9	; 233
    34b8:	09 c0       	rjmp	.+18     	; 0x34cc <vfprintf+0x2f0>
    34ba:	22 ff       	sbrs	r18, 2
    34bc:	06 c0       	rjmp	.+12     	; 0x34ca <vfprintf+0x2ee>
    34be:	73 94       	inc	r7
    34c0:	73 94       	inc	r7
    34c2:	04 c0       	rjmp	.+8      	; 0x34cc <vfprintf+0x2f0>
    34c4:	82 2f       	mov	r24, r18
    34c6:	86 78       	andi	r24, 0x86	; 134
    34c8:	09 f0       	breq	.+2      	; 0x34cc <vfprintf+0x2f0>
    34ca:	73 94       	inc	r7
    34cc:	23 fd       	sbrc	r18, 3
    34ce:	12 c0       	rjmp	.+36     	; 0x34f4 <vfprintf+0x318>
    34d0:	20 ff       	sbrs	r18, 0
    34d2:	06 c0       	rjmp	.+12     	; 0x34e0 <vfprintf+0x304>
    34d4:	5a 2c       	mov	r5, r10
    34d6:	73 14       	cp	r7, r3
    34d8:	18 f4       	brcc	.+6      	; 0x34e0 <vfprintf+0x304>
    34da:	53 0c       	add	r5, r3
    34dc:	57 18       	sub	r5, r7
    34de:	73 2c       	mov	r7, r3
    34e0:	73 14       	cp	r7, r3
    34e2:	60 f4       	brcc	.+24     	; 0x34fc <vfprintf+0x320>
    34e4:	b7 01       	movw	r22, r14
    34e6:	80 e2       	ldi	r24, 0x20	; 32
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	2c 87       	std	Y+12, r18	; 0x0c
    34ec:	75 d0       	rcall	.+234    	; 0x35d8 <fputc>
    34ee:	73 94       	inc	r7
    34f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    34f2:	f6 cf       	rjmp	.-20     	; 0x34e0 <vfprintf+0x304>
    34f4:	73 14       	cp	r7, r3
    34f6:	10 f4       	brcc	.+4      	; 0x34fc <vfprintf+0x320>
    34f8:	37 18       	sub	r3, r7
    34fa:	01 c0       	rjmp	.+2      	; 0x34fe <vfprintf+0x322>
    34fc:	31 2c       	mov	r3, r1
    34fe:	24 ff       	sbrs	r18, 4
    3500:	11 c0       	rjmp	.+34     	; 0x3524 <vfprintf+0x348>
    3502:	b7 01       	movw	r22, r14
    3504:	80 e3       	ldi	r24, 0x30	; 48
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	2c 87       	std	Y+12, r18	; 0x0c
    350a:	66 d0       	rcall	.+204    	; 0x35d8 <fputc>
    350c:	2c 85       	ldd	r18, Y+12	; 0x0c
    350e:	22 ff       	sbrs	r18, 2
    3510:	16 c0       	rjmp	.+44     	; 0x353e <vfprintf+0x362>
    3512:	21 ff       	sbrs	r18, 1
    3514:	03 c0       	rjmp	.+6      	; 0x351c <vfprintf+0x340>
    3516:	88 e5       	ldi	r24, 0x58	; 88
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	02 c0       	rjmp	.+4      	; 0x3520 <vfprintf+0x344>
    351c:	88 e7       	ldi	r24, 0x78	; 120
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	b7 01       	movw	r22, r14
    3522:	0c c0       	rjmp	.+24     	; 0x353c <vfprintf+0x360>
    3524:	82 2f       	mov	r24, r18
    3526:	86 78       	andi	r24, 0x86	; 134
    3528:	51 f0       	breq	.+20     	; 0x353e <vfprintf+0x362>
    352a:	21 fd       	sbrc	r18, 1
    352c:	02 c0       	rjmp	.+4      	; 0x3532 <vfprintf+0x356>
    352e:	80 e2       	ldi	r24, 0x20	; 32
    3530:	01 c0       	rjmp	.+2      	; 0x3534 <vfprintf+0x358>
    3532:	8b e2       	ldi	r24, 0x2B	; 43
    3534:	27 fd       	sbrc	r18, 7
    3536:	8d e2       	ldi	r24, 0x2D	; 45
    3538:	b7 01       	movw	r22, r14
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	4d d0       	rcall	.+154    	; 0x35d8 <fputc>
    353e:	a5 14       	cp	r10, r5
    3540:	30 f4       	brcc	.+12     	; 0x354e <vfprintf+0x372>
    3542:	b7 01       	movw	r22, r14
    3544:	80 e3       	ldi	r24, 0x30	; 48
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	47 d0       	rcall	.+142    	; 0x35d8 <fputc>
    354a:	5a 94       	dec	r5
    354c:	f8 cf       	rjmp	.-16     	; 0x353e <vfprintf+0x362>
    354e:	aa 94       	dec	r10
    3550:	f4 01       	movw	r30, r8
    3552:	ea 0d       	add	r30, r10
    3554:	f1 1d       	adc	r31, r1
    3556:	80 81       	ld	r24, Z
    3558:	b7 01       	movw	r22, r14
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	3d d0       	rcall	.+122    	; 0x35d8 <fputc>
    355e:	a1 10       	cpse	r10, r1
    3560:	f6 cf       	rjmp	.-20     	; 0x354e <vfprintf+0x372>
    3562:	33 20       	and	r3, r3
    3564:	09 f4       	brne	.+2      	; 0x3568 <vfprintf+0x38c>
    3566:	5d ce       	rjmp	.-838    	; 0x3222 <vfprintf+0x46>
    3568:	b7 01       	movw	r22, r14
    356a:	80 e2       	ldi	r24, 0x20	; 32
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	34 d0       	rcall	.+104    	; 0x35d8 <fputc>
    3570:	3a 94       	dec	r3
    3572:	f7 cf       	rjmp	.-18     	; 0x3562 <vfprintf+0x386>
    3574:	f7 01       	movw	r30, r14
    3576:	86 81       	ldd	r24, Z+6	; 0x06
    3578:	97 81       	ldd	r25, Z+7	; 0x07
    357a:	02 c0       	rjmp	.+4      	; 0x3580 <vfprintf+0x3a4>
    357c:	8f ef       	ldi	r24, 0xFF	; 255
    357e:	9f ef       	ldi	r25, 0xFF	; 255
    3580:	2c 96       	adiw	r28, 0x0c	; 12
    3582:	cd bf       	out	0x3d, r28	; 61
    3584:	de bf       	out	0x3e, r29	; 62
    3586:	df 91       	pop	r29
    3588:	cf 91       	pop	r28
    358a:	1f 91       	pop	r17
    358c:	0f 91       	pop	r16
    358e:	ff 90       	pop	r15
    3590:	ef 90       	pop	r14
    3592:	df 90       	pop	r13
    3594:	cf 90       	pop	r12
    3596:	bf 90       	pop	r11
    3598:	af 90       	pop	r10
    359a:	9f 90       	pop	r9
    359c:	8f 90       	pop	r8
    359e:	7f 90       	pop	r7
    35a0:	6f 90       	pop	r6
    35a2:	5f 90       	pop	r5
    35a4:	4f 90       	pop	r4
    35a6:	3f 90       	pop	r3
    35a8:	2f 90       	pop	r2
    35aa:	08 95       	ret

000035ac <strnlen_P>:
    35ac:	fc 01       	movw	r30, r24
    35ae:	05 90       	lpm	r0, Z+
    35b0:	61 50       	subi	r22, 0x01	; 1
    35b2:	70 40       	sbci	r23, 0x00	; 0
    35b4:	01 10       	cpse	r0, r1
    35b6:	d8 f7       	brcc	.-10     	; 0x35ae <strnlen_P+0x2>
    35b8:	80 95       	com	r24
    35ba:	90 95       	com	r25
    35bc:	8e 0f       	add	r24, r30
    35be:	9f 1f       	adc	r25, r31
    35c0:	08 95       	ret

000035c2 <strnlen>:
    35c2:	fc 01       	movw	r30, r24
    35c4:	61 50       	subi	r22, 0x01	; 1
    35c6:	70 40       	sbci	r23, 0x00	; 0
    35c8:	01 90       	ld	r0, Z+
    35ca:	01 10       	cpse	r0, r1
    35cc:	d8 f7       	brcc	.-10     	; 0x35c4 <strnlen+0x2>
    35ce:	80 95       	com	r24
    35d0:	90 95       	com	r25
    35d2:	8e 0f       	add	r24, r30
    35d4:	9f 1f       	adc	r25, r31
    35d6:	08 95       	ret

000035d8 <fputc>:
    35d8:	0f 93       	push	r16
    35da:	1f 93       	push	r17
    35dc:	cf 93       	push	r28
    35de:	df 93       	push	r29
    35e0:	18 2f       	mov	r17, r24
    35e2:	09 2f       	mov	r16, r25
    35e4:	eb 01       	movw	r28, r22
    35e6:	8b 81       	ldd	r24, Y+3	; 0x03
    35e8:	81 fd       	sbrc	r24, 1
    35ea:	03 c0       	rjmp	.+6      	; 0x35f2 <fputc+0x1a>
    35ec:	8f ef       	ldi	r24, 0xFF	; 255
    35ee:	9f ef       	ldi	r25, 0xFF	; 255
    35f0:	20 c0       	rjmp	.+64     	; 0x3632 <fputc+0x5a>
    35f2:	82 ff       	sbrs	r24, 2
    35f4:	10 c0       	rjmp	.+32     	; 0x3616 <fputc+0x3e>
    35f6:	4e 81       	ldd	r20, Y+6	; 0x06
    35f8:	5f 81       	ldd	r21, Y+7	; 0x07
    35fa:	2c 81       	ldd	r18, Y+4	; 0x04
    35fc:	3d 81       	ldd	r19, Y+5	; 0x05
    35fe:	42 17       	cp	r20, r18
    3600:	53 07       	cpc	r21, r19
    3602:	7c f4       	brge	.+30     	; 0x3622 <fputc+0x4a>
    3604:	e8 81       	ld	r30, Y
    3606:	f9 81       	ldd	r31, Y+1	; 0x01
    3608:	9f 01       	movw	r18, r30
    360a:	2f 5f       	subi	r18, 0xFF	; 255
    360c:	3f 4f       	sbci	r19, 0xFF	; 255
    360e:	28 83       	st	Y, r18
    3610:	39 83       	std	Y+1, r19	; 0x01
    3612:	10 83       	st	Z, r17
    3614:	06 c0       	rjmp	.+12     	; 0x3622 <fputc+0x4a>
    3616:	e8 85       	ldd	r30, Y+8	; 0x08
    3618:	f9 85       	ldd	r31, Y+9	; 0x09
    361a:	81 2f       	mov	r24, r17
    361c:	09 95       	icall
    361e:	89 2b       	or	r24, r25
    3620:	29 f7       	brne	.-54     	; 0x35ec <fputc+0x14>
    3622:	2e 81       	ldd	r18, Y+6	; 0x06
    3624:	3f 81       	ldd	r19, Y+7	; 0x07
    3626:	2f 5f       	subi	r18, 0xFF	; 255
    3628:	3f 4f       	sbci	r19, 0xFF	; 255
    362a:	2e 83       	std	Y+6, r18	; 0x06
    362c:	3f 83       	std	Y+7, r19	; 0x07
    362e:	81 2f       	mov	r24, r17
    3630:	90 2f       	mov	r25, r16
    3632:	df 91       	pop	r29
    3634:	cf 91       	pop	r28
    3636:	1f 91       	pop	r17
    3638:	0f 91       	pop	r16
    363a:	08 95       	ret

0000363c <__ultoa_invert>:
    363c:	fa 01       	movw	r30, r20
    363e:	aa 27       	eor	r26, r26
    3640:	28 30       	cpi	r18, 0x08	; 8
    3642:	51 f1       	breq	.+84     	; 0x3698 <__ultoa_invert+0x5c>
    3644:	20 31       	cpi	r18, 0x10	; 16
    3646:	81 f1       	breq	.+96     	; 0x36a8 <__ultoa_invert+0x6c>
    3648:	e8 94       	clt
    364a:	6f 93       	push	r22
    364c:	6e 7f       	andi	r22, 0xFE	; 254
    364e:	6e 5f       	subi	r22, 0xFE	; 254
    3650:	7f 4f       	sbci	r23, 0xFF	; 255
    3652:	8f 4f       	sbci	r24, 0xFF	; 255
    3654:	9f 4f       	sbci	r25, 0xFF	; 255
    3656:	af 4f       	sbci	r26, 0xFF	; 255
    3658:	b1 e0       	ldi	r27, 0x01	; 1
    365a:	3e d0       	rcall	.+124    	; 0x36d8 <__ultoa_invert+0x9c>
    365c:	b4 e0       	ldi	r27, 0x04	; 4
    365e:	3c d0       	rcall	.+120    	; 0x36d8 <__ultoa_invert+0x9c>
    3660:	67 0f       	add	r22, r23
    3662:	78 1f       	adc	r23, r24
    3664:	89 1f       	adc	r24, r25
    3666:	9a 1f       	adc	r25, r26
    3668:	a1 1d       	adc	r26, r1
    366a:	68 0f       	add	r22, r24
    366c:	79 1f       	adc	r23, r25
    366e:	8a 1f       	adc	r24, r26
    3670:	91 1d       	adc	r25, r1
    3672:	a1 1d       	adc	r26, r1
    3674:	6a 0f       	add	r22, r26
    3676:	71 1d       	adc	r23, r1
    3678:	81 1d       	adc	r24, r1
    367a:	91 1d       	adc	r25, r1
    367c:	a1 1d       	adc	r26, r1
    367e:	20 d0       	rcall	.+64     	; 0x36c0 <__ultoa_invert+0x84>
    3680:	09 f4       	brne	.+2      	; 0x3684 <__ultoa_invert+0x48>
    3682:	68 94       	set
    3684:	3f 91       	pop	r19
    3686:	2a e0       	ldi	r18, 0x0A	; 10
    3688:	26 9f       	mul	r18, r22
    368a:	11 24       	eor	r1, r1
    368c:	30 19       	sub	r19, r0
    368e:	30 5d       	subi	r19, 0xD0	; 208
    3690:	31 93       	st	Z+, r19
    3692:	de f6       	brtc	.-74     	; 0x364a <__ultoa_invert+0xe>
    3694:	cf 01       	movw	r24, r30
    3696:	08 95       	ret
    3698:	46 2f       	mov	r20, r22
    369a:	47 70       	andi	r20, 0x07	; 7
    369c:	40 5d       	subi	r20, 0xD0	; 208
    369e:	41 93       	st	Z+, r20
    36a0:	b3 e0       	ldi	r27, 0x03	; 3
    36a2:	0f d0       	rcall	.+30     	; 0x36c2 <__ultoa_invert+0x86>
    36a4:	c9 f7       	brne	.-14     	; 0x3698 <__ultoa_invert+0x5c>
    36a6:	f6 cf       	rjmp	.-20     	; 0x3694 <__ultoa_invert+0x58>
    36a8:	46 2f       	mov	r20, r22
    36aa:	4f 70       	andi	r20, 0x0F	; 15
    36ac:	40 5d       	subi	r20, 0xD0	; 208
    36ae:	4a 33       	cpi	r20, 0x3A	; 58
    36b0:	18 f0       	brcs	.+6      	; 0x36b8 <__ultoa_invert+0x7c>
    36b2:	49 5d       	subi	r20, 0xD9	; 217
    36b4:	31 fd       	sbrc	r19, 1
    36b6:	40 52       	subi	r20, 0x20	; 32
    36b8:	41 93       	st	Z+, r20
    36ba:	02 d0       	rcall	.+4      	; 0x36c0 <__ultoa_invert+0x84>
    36bc:	a9 f7       	brne	.-22     	; 0x36a8 <__ultoa_invert+0x6c>
    36be:	ea cf       	rjmp	.-44     	; 0x3694 <__ultoa_invert+0x58>
    36c0:	b4 e0       	ldi	r27, 0x04	; 4
    36c2:	a6 95       	lsr	r26
    36c4:	97 95       	ror	r25
    36c6:	87 95       	ror	r24
    36c8:	77 95       	ror	r23
    36ca:	67 95       	ror	r22
    36cc:	ba 95       	dec	r27
    36ce:	c9 f7       	brne	.-14     	; 0x36c2 <__ultoa_invert+0x86>
    36d0:	00 97       	sbiw	r24, 0x00	; 0
    36d2:	61 05       	cpc	r22, r1
    36d4:	71 05       	cpc	r23, r1
    36d6:	08 95       	ret
    36d8:	9b 01       	movw	r18, r22
    36da:	ac 01       	movw	r20, r24
    36dc:	0a 2e       	mov	r0, r26
    36de:	06 94       	lsr	r0
    36e0:	57 95       	ror	r21
    36e2:	47 95       	ror	r20
    36e4:	37 95       	ror	r19
    36e6:	27 95       	ror	r18
    36e8:	ba 95       	dec	r27
    36ea:	c9 f7       	brne	.-14     	; 0x36de <__ultoa_invert+0xa2>
    36ec:	62 0f       	add	r22, r18
    36ee:	73 1f       	adc	r23, r19
    36f0:	84 1f       	adc	r24, r20
    36f2:	95 1f       	adc	r25, r21
    36f4:	a0 1d       	adc	r26, r0
    36f6:	08 95       	ret

000036f8 <_exit>:
    36f8:	f8 94       	cli

000036fa <__stop_program>:
    36fa:	ff cf       	rjmp	.-2      	; 0x36fa <__stop_program>
