
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ffa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00802000  00003ffa  0000408e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000cb8  008020a2  008020a2  00004130  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004130  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000808  00000000  00000000  0000418c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000f183  00000000  00000000  00004994  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002c6a  00000000  00000000  00013b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000070a9  00000000  00000000  00016781  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001e8c  00000000  00000000  0001d82c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002fc0  00000000  00000000  0001f6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d18c  00000000  00000000  00022678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007f0  00000000  00000000  0002f804  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c3       	rjmp	.+1892   	; 0x766 <__ctors_end>
       2:	00 00       	nop
       4:	cf c3       	rjmp	.+1950   	; 0x7a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c3       	rjmp	.+1946   	; 0x7a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c3       	rjmp	.+1942   	; 0x7a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c3       	rjmp	.+1938   	; 0x7a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c3       	rjmp	.+1934   	; 0x7a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c3       	rjmp	.+1930   	; 0x7a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c3       	rjmp	.+1926   	; 0x7a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c3       	rjmp	.+1922   	; 0x7a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c3       	rjmp	.+1918   	; 0x7a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 51 1b 	jmp	0x36a2	; 0x36a2 <__vector_10>
      2c:	bb c3       	rjmp	.+1910   	; 0x7a4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b9 c3       	rjmp	.+1906   	; 0x7a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	b7 c3       	rjmp	.+1902   	; 0x7a4 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__vector_14>
      3c:	b3 c3       	rjmp	.+1894   	; 0x7a4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b1 c3       	rjmp	.+1890   	; 0x7a4 <__bad_interrupt>
      42:	00 00       	nop
      44:	af c3       	rjmp	.+1886   	; 0x7a4 <__bad_interrupt>
      46:	00 00       	nop
      48:	ad c3       	rjmp	.+1882   	; 0x7a4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ab c3       	rjmp	.+1878   	; 0x7a4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__vector_20>
      54:	a7 c3       	rjmp	.+1870   	; 0x7a4 <__bad_interrupt>
      56:	00 00       	nop
      58:	a5 c3       	rjmp	.+1866   	; 0x7a4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a3 c3       	rjmp	.+1862   	; 0x7a4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a1 c3       	rjmp	.+1858   	; 0x7a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	9f c3       	rjmp	.+1854   	; 0x7a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c3       	rjmp	.+1850   	; 0x7a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c3       	rjmp	.+1846   	; 0x7a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c3       	rjmp	.+1842   	; 0x7a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c3       	rjmp	.+1838   	; 0x7a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c3       	rjmp	.+1834   	; 0x7a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c3       	rjmp	.+1830   	; 0x7a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c3       	rjmp	.+1826   	; 0x7a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c3       	rjmp	.+1822   	; 0x7a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c3       	rjmp	.+1818   	; 0x7a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c3       	rjmp	.+1814   	; 0x7a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c3       	rjmp	.+1810   	; 0x7a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c3       	rjmp	.+1806   	; 0x7a4 <__bad_interrupt>
      96:	00 00       	nop
      98:	85 c3       	rjmp	.+1802   	; 0x7a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	83 c3       	rjmp	.+1798   	; 0x7a4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	81 c3       	rjmp	.+1794   	; 0x7a4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7f c3       	rjmp	.+1790   	; 0x7a4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7d c3       	rjmp	.+1786   	; 0x7a4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7b c3       	rjmp	.+1782   	; 0x7a4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	79 c3       	rjmp	.+1778   	; 0x7a4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	77 c3       	rjmp	.+1774   	; 0x7a4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	75 c3       	rjmp	.+1770   	; 0x7a4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	73 c3       	rjmp	.+1766   	; 0x7a4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	71 c3       	rjmp	.+1762   	; 0x7a4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	6f c3       	rjmp	.+1758   	; 0x7a4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6d c3       	rjmp	.+1754   	; 0x7a4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6b c3       	rjmp	.+1750   	; 0x7a4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	69 c3       	rjmp	.+1746   	; 0x7a4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	67 c3       	rjmp	.+1742   	; 0x7a4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	65 c3       	rjmp	.+1738   	; 0x7a4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	63 c3       	rjmp	.+1734   	; 0x7a4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	61 c3       	rjmp	.+1730   	; 0x7a4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5f c3       	rjmp	.+1726   	; 0x7a4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	5d c3       	rjmp	.+1722   	; 0x7a4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	5b c3       	rjmp	.+1718   	; 0x7a4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	59 c3       	rjmp	.+1714   	; 0x7a4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	57 c3       	rjmp	.+1710   	; 0x7a4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	55 c3       	rjmp	.+1706   	; 0x7a4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	53 c3       	rjmp	.+1702   	; 0x7a4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	51 c3       	rjmp	.+1698   	; 0x7a4 <__bad_interrupt>
     102:	00 00       	nop
     104:	4f c3       	rjmp	.+1694   	; 0x7a4 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 e4 19 	jmp	0x33c8	; 0x33c8 <__vector_66>
     10c:	4b c3       	rjmp	.+1686   	; 0x7a4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	49 c3       	rjmp	.+1682   	; 0x7a4 <__bad_interrupt>
     112:	00 00       	nop
     114:	47 c3       	rjmp	.+1678   	; 0x7a4 <__bad_interrupt>
     116:	00 00       	nop
     118:	45 c3       	rjmp	.+1674   	; 0x7a4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	43 c3       	rjmp	.+1670   	; 0x7a4 <__bad_interrupt>
     11e:	00 00       	nop
     120:	41 c3       	rjmp	.+1666   	; 0x7a4 <__bad_interrupt>
     122:	00 00       	nop
     124:	3f c3       	rjmp	.+1662   	; 0x7a4 <__bad_interrupt>
     126:	00 00       	nop
     128:	3d c3       	rjmp	.+1658   	; 0x7a4 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	3b c3       	rjmp	.+1654   	; 0x7a4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	39 c3       	rjmp	.+1650   	; 0x7a4 <__bad_interrupt>
     132:	00 00       	nop
     134:	37 c3       	rjmp	.+1646   	; 0x7a4 <__bad_interrupt>
     136:	00 00       	nop
     138:	35 c3       	rjmp	.+1642   	; 0x7a4 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	33 c3       	rjmp	.+1638   	; 0x7a4 <__bad_interrupt>
     13e:	00 00       	nop
     140:	31 c3       	rjmp	.+1634   	; 0x7a4 <__bad_interrupt>
     142:	00 00       	nop
     144:	2f c3       	rjmp	.+1630   	; 0x7a4 <__bad_interrupt>
     146:	00 00       	nop
     148:	2d c3       	rjmp	.+1626   	; 0x7a4 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	2b c3       	rjmp	.+1622   	; 0x7a4 <__bad_interrupt>
     14e:	00 00       	nop
     150:	29 c3       	rjmp	.+1618   	; 0x7a4 <__bad_interrupt>
     152:	00 00       	nop
     154:	27 c3       	rjmp	.+1614   	; 0x7a4 <__bad_interrupt>
     156:	00 00       	nop
     158:	25 c3       	rjmp	.+1610   	; 0x7a4 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	23 c3       	rjmp	.+1606   	; 0x7a4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	30 c3       	rjmp	.+1632   	; 0x7c2 <__vector_88>
     162:	00 00       	nop
     164:	1f c3       	rjmp	.+1598   	; 0x7a4 <__bad_interrupt>
     166:	00 00       	nop
     168:	1d c3       	rjmp	.+1594   	; 0x7a4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	1b c3       	rjmp	.+1590   	; 0x7a4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	19 c3       	rjmp	.+1586   	; 0x7a4 <__bad_interrupt>
     172:	00 00       	nop
     174:	17 c3       	rjmp	.+1582   	; 0x7a4 <__bad_interrupt>
     176:	00 00       	nop
     178:	15 c3       	rjmp	.+1578   	; 0x7a4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	13 c3       	rjmp	.+1574   	; 0x7a4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	11 c3       	rjmp	.+1570   	; 0x7a4 <__bad_interrupt>
     182:	00 00       	nop
     184:	0f c3       	rjmp	.+1566   	; 0x7a4 <__bad_interrupt>
     186:	00 00       	nop
     188:	0d c3       	rjmp	.+1562   	; 0x7a4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	0b c3       	rjmp	.+1558   	; 0x7a4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	09 c3       	rjmp	.+1554   	; 0x7a4 <__bad_interrupt>
     192:	00 00       	nop
     194:	07 c3       	rjmp	.+1550   	; 0x7a4 <__bad_interrupt>
     196:	00 00       	nop
     198:	05 c3       	rjmp	.+1546   	; 0x7a4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	03 c3       	rjmp	.+1542   	; 0x7a4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	01 c3       	rjmp	.+1538   	; 0x7a4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ff c2       	rjmp	.+1534   	; 0x7a4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	fd c2       	rjmp	.+1530   	; 0x7a4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	fb c2       	rjmp	.+1526   	; 0x7a4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	f9 c2       	rjmp	.+1522   	; 0x7a4 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	f7 c2       	rjmp	.+1518   	; 0x7a4 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	f5 c2       	rjmp	.+1514   	; 0x7a4 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	f3 c2       	rjmp	.+1510   	; 0x7a4 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	f1 c2       	rjmp	.+1506   	; 0x7a4 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	ef c2       	rjmp	.+1502   	; 0x7a4 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	ed c2       	rjmp	.+1498   	; 0x7a4 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	eb c2       	rjmp	.+1494   	; 0x7a4 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	e9 c2       	rjmp	.+1490   	; 0x7a4 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	e7 c2       	rjmp	.+1486   	; 0x7a4 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	e5 c2       	rjmp	.+1482   	; 0x7a4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	e3 c2       	rjmp	.+1478   	; 0x7a4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	e1 c2       	rjmp	.+1474   	; 0x7a4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	df c2       	rjmp	.+1470   	; 0x7a4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	dd c2       	rjmp	.+1466   	; 0x7a4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	db c2       	rjmp	.+1462   	; 0x7a4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	d9 c2       	rjmp	.+1458   	; 0x7a4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	d7 c2       	rjmp	.+1454   	; 0x7a4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	d5 c2       	rjmp	.+1450   	; 0x7a4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	04 16       	cp	r0, r20
     1fe:	0b 16       	cp	r0, r27
     200:	5e 17       	cp	r21, r30
     202:	7c 16       	cp	r7, r28
     204:	5e 17       	cp	r21, r30
     206:	5e 17       	cp	r21, r30
     208:	5e 17       	cp	r21, r30
     20a:	56 17       	cp	r21, r22
     20c:	5e 17       	cp	r21, r30
     20e:	5e 17       	cp	r21, r30
     210:	5e 17       	cp	r21, r30
     212:	5e 17       	cp	r21, r30
     214:	5e 17       	cp	r21, r30
     216:	5e 17       	cp	r21, r30
     218:	5e 17       	cp	r21, r30
     21a:	5e 17       	cp	r21, r30
     21c:	5e 17       	cp	r21, r30
     21e:	5e 17       	cp	r21, r30
     220:	5e 17       	cp	r21, r30
     222:	5e 17       	cp	r21, r30
     224:	5e 17       	cp	r21, r30
     226:	5e 17       	cp	r21, r30
     228:	5e 17       	cp	r21, r30
     22a:	5e 17       	cp	r21, r30
     22c:	5e 17       	cp	r21, r30
     22e:	5e 17       	cp	r21, r30
     230:	5e 17       	cp	r21, r30
     232:	5e 17       	cp	r21, r30
     234:	5e 17       	cp	r21, r30
     236:	5e 17       	cp	r21, r30
     238:	5e 17       	cp	r21, r30
     23a:	5e 17       	cp	r21, r30
     23c:	5e 17       	cp	r21, r30
     23e:	5e 17       	cp	r21, r30
     240:	5e 17       	cp	r21, r30
     242:	5e 17       	cp	r21, r30
     244:	5e 17       	cp	r21, r30
     246:	5e 17       	cp	r21, r30
     248:	5e 17       	cp	r21, r30
     24a:	5e 17       	cp	r21, r30
     24c:	5e 17       	cp	r21, r30
     24e:	5e 17       	cp	r21, r30
     250:	5e 17       	cp	r21, r30
     252:	5e 17       	cp	r21, r30
     254:	5e 17       	cp	r21, r30
     256:	5e 17       	cp	r21, r30
     258:	5e 17       	cp	r21, r30
     25a:	5e 17       	cp	r21, r30
     25c:	5e 17       	cp	r21, r30
     25e:	5e 17       	cp	r21, r30
     260:	08 17       	cp	r16, r24
     262:	0e 17       	cp	r16, r30
     264:	1f 17       	cp	r17, r31
     266:	30 17       	cp	r19, r16
     268:	44 17       	cp	r20, r20

0000026a <__trampolines_end>:
     26a:	00 00       	nop
     26c:	00 00       	nop
     26e:	00 3e       	cpi	r16, 0xE0	; 224
     270:	5b 4f       	sbci	r21, 0xFB	; 251
     272:	5b 3e       	cpi	r21, 0xEB	; 235
     274:	3e 6b       	ori	r19, 0xBE	; 190
     276:	4f 6b       	ori	r20, 0xBF	; 191
     278:	3e 1c       	adc	r3, r14
     27a:	3e 7c       	andi	r19, 0xCE	; 206
     27c:	3e 1c       	adc	r3, r14
     27e:	18 3c       	cpi	r17, 0xC8	; 200
     280:	7e 3c       	cpi	r23, 0xCE	; 206
     282:	18 1c       	adc	r1, r8
     284:	57 7d       	andi	r21, 0xD7	; 215
     286:	57 1c       	adc	r5, r7
     288:	1c 5e       	subi	r17, 0xEC	; 236
     28a:	7f 5e       	subi	r23, 0xEF	; 239
     28c:	1c 00       	.word	0x001c	; ????
     28e:	18 3c       	cpi	r17, 0xC8	; 200
     290:	18 00       	.word	0x0018	; ????
     292:	ff e7       	ldi	r31, 0x7F	; 127
     294:	c3 e7       	ldi	r28, 0x73	; 115
     296:	ff 00       	.word	0x00ff	; ????
     298:	18 24       	eor	r1, r8
     29a:	18 00       	.word	0x0018	; ????
     29c:	ff e7       	ldi	r31, 0x7F	; 127
     29e:	db e7       	ldi	r29, 0x7B	; 123
     2a0:	ff 30       	cpi	r31, 0x0F	; 15
     2a2:	48 3a       	cpi	r20, 0xA8	; 168
     2a4:	06 0e       	add	r0, r22
     2a6:	26 29       	or	r18, r6
     2a8:	79 29       	or	r23, r9
     2aa:	26 40       	sbci	r18, 0x06	; 6
     2ac:	7f 05       	cpc	r23, r15
     2ae:	05 07       	cpc	r16, r21
     2b0:	40 7f       	andi	r20, 0xF0	; 240
     2b2:	05 25       	eor	r16, r5
     2b4:	3f 5a       	subi	r19, 0xAF	; 175
     2b6:	3c e7       	ldi	r19, 0x7C	; 124
     2b8:	3c 5a       	subi	r19, 0xAC	; 172
     2ba:	7f 3e       	cpi	r23, 0xEF	; 239
     2bc:	1c 1c       	adc	r1, r12
     2be:	08 08       	sbc	r0, r8
     2c0:	1c 1c       	adc	r1, r12
     2c2:	3e 7f       	andi	r19, 0xFE	; 254
     2c4:	14 22       	and	r1, r20
     2c6:	7f 22       	and	r7, r31
     2c8:	14 5f       	subi	r17, 0xF4	; 244
     2ca:	5f 00       	.word	0x005f	; ????
     2cc:	5f 5f       	subi	r21, 0xFF	; 255
     2ce:	06 09       	sbc	r16, r6
     2d0:	7f 01       	movw	r14, r30
     2d2:	7f 00       	.word	0x007f	; ????
     2d4:	66 89       	ldd	r22, Z+22	; 0x16
     2d6:	95 6a       	ori	r25, 0xA5	; 165
     2d8:	60 60       	ori	r22, 0x00	; 0
     2da:	60 60       	ori	r22, 0x00	; 0
     2dc:	60 94       	com	r6
     2de:	a2 ff       	sbrs	r26, 2
     2e0:	a2 94       	swap	r10
     2e2:	08 04       	cpc	r0, r8
     2e4:	7e 04       	cpc	r7, r14
     2e6:	08 10       	cpse	r0, r8
     2e8:	20 7e       	andi	r18, 0xE0	; 224
     2ea:	20 10       	cpse	r2, r0
     2ec:	08 08       	sbc	r0, r8
     2ee:	2a 1c       	adc	r2, r10
     2f0:	08 08       	sbc	r0, r8
     2f2:	1c 2a       	or	r1, r28
     2f4:	08 08       	sbc	r0, r8
     2f6:	1e 10       	cpse	r1, r14
     2f8:	10 10       	cpse	r1, r0
     2fa:	10 0c       	add	r1, r0
     2fc:	1e 0c       	add	r1, r14
     2fe:	1e 0c       	add	r1, r14
     300:	30 38       	cpi	r19, 0x80	; 128
     302:	3e 38       	cpi	r19, 0x8E	; 142
     304:	30 06       	cpc	r3, r16
     306:	0e 3e       	cpi	r16, 0xEE	; 238
     308:	0e 06       	cpc	r0, r30
     30a:	00 00       	nop
     30c:	00 00       	nop
     30e:	00 00       	nop
     310:	00 5f       	subi	r16, 0xF0	; 240
     312:	00 00       	nop
     314:	00 07       	cpc	r16, r16
     316:	00 07       	cpc	r16, r16
     318:	00 14       	cp	r0, r0
     31a:	7f 14       	cp	r7, r15
     31c:	7f 14       	cp	r7, r15
     31e:	24 2a       	or	r2, r20
     320:	7f 2a       	or	r7, r31
     322:	12 23       	and	r17, r18
     324:	13 08       	sbc	r1, r3
     326:	64 62       	ori	r22, 0x24	; 36
     328:	36 49       	sbci	r19, 0x96	; 150
     32a:	56 20       	and	r5, r6
     32c:	50 00       	.word	0x0050	; ????
     32e:	08 07       	cpc	r16, r24
     330:	03 00       	.word	0x0003	; ????
     332:	00 1c       	adc	r0, r0
     334:	22 41       	sbci	r18, 0x12	; 18
     336:	00 00       	nop
     338:	41 22       	and	r4, r17
     33a:	1c 00       	.word	0x001c	; ????
     33c:	2a 1c       	adc	r2, r10
     33e:	7f 1c       	adc	r7, r15
     340:	2a 08       	sbc	r2, r10
     342:	08 3e       	cpi	r16, 0xE8	; 232
     344:	08 08       	sbc	r0, r8
     346:	00 80       	ld	r0, Z
     348:	70 30       	cpi	r23, 0x00	; 0
     34a:	00 08       	sbc	r0, r0
     34c:	08 08       	sbc	r0, r8
     34e:	08 08       	sbc	r0, r8
     350:	00 00       	nop
     352:	60 60       	ori	r22, 0x00	; 0
     354:	00 20       	and	r0, r0
     356:	10 08       	sbc	r1, r0
     358:	04 02       	muls	r16, r20
     35a:	3e 51       	subi	r19, 0x1E	; 30
     35c:	49 45       	sbci	r20, 0x59	; 89
     35e:	3e 00       	.word	0x003e	; ????
     360:	42 7f       	andi	r20, 0xF2	; 242
     362:	40 00       	.word	0x0040	; ????
     364:	72 49       	sbci	r23, 0x92	; 146
     366:	49 49       	sbci	r20, 0x99	; 153
     368:	46 21       	and	r20, r6
     36a:	41 49       	sbci	r20, 0x91	; 145
     36c:	4d 33       	cpi	r20, 0x3D	; 61
     36e:	18 14       	cp	r1, r8
     370:	12 7f       	andi	r17, 0xF2	; 242
     372:	10 27       	eor	r17, r16
     374:	45 45       	sbci	r20, 0x55	; 85
     376:	45 39       	cpi	r20, 0x95	; 149
     378:	3c 4a       	sbci	r19, 0xAC	; 172
     37a:	49 49       	sbci	r20, 0x99	; 153
     37c:	31 41       	sbci	r19, 0x11	; 17
     37e:	21 11       	cpse	r18, r1
     380:	09 07       	cpc	r16, r25
     382:	36 49       	sbci	r19, 0x96	; 150
     384:	49 49       	sbci	r20, 0x99	; 153
     386:	36 46       	sbci	r19, 0x66	; 102
     388:	49 49       	sbci	r20, 0x99	; 153
     38a:	29 1e       	adc	r2, r25
     38c:	00 00       	nop
     38e:	14 00       	.word	0x0014	; ????
     390:	00 00       	nop
     392:	40 34       	cpi	r20, 0x40	; 64
     394:	00 00       	nop
     396:	00 08       	sbc	r0, r0
     398:	14 22       	and	r1, r20
     39a:	41 14       	cp	r4, r1
     39c:	14 14       	cp	r1, r4
     39e:	14 14       	cp	r1, r4
     3a0:	00 41       	sbci	r16, 0x10	; 16
     3a2:	22 14       	cp	r2, r2
     3a4:	08 02       	muls	r16, r24
     3a6:	01 59       	subi	r16, 0x91	; 145
     3a8:	09 06       	cpc	r0, r25
     3aa:	3e 41       	sbci	r19, 0x1E	; 30
     3ac:	5d 59       	subi	r21, 0x9D	; 157
     3ae:	4e 7c       	andi	r20, 0xCE	; 206
     3b0:	12 11       	cpse	r17, r2
     3b2:	12 7c       	andi	r17, 0xC2	; 194
     3b4:	7f 49       	sbci	r23, 0x9F	; 159
     3b6:	49 49       	sbci	r20, 0x99	; 153
     3b8:	36 3e       	cpi	r19, 0xE6	; 230
     3ba:	41 41       	sbci	r20, 0x11	; 17
     3bc:	41 22       	and	r4, r17
     3be:	7f 41       	sbci	r23, 0x1F	; 31
     3c0:	41 41       	sbci	r20, 0x11	; 17
     3c2:	3e 7f       	andi	r19, 0xFE	; 254
     3c4:	49 49       	sbci	r20, 0x99	; 153
     3c6:	49 41       	sbci	r20, 0x19	; 25
     3c8:	7f 09       	sbc	r23, r15
     3ca:	09 09       	sbc	r16, r9
     3cc:	01 3e       	cpi	r16, 0xE1	; 225
     3ce:	41 41       	sbci	r20, 0x11	; 17
     3d0:	51 73       	andi	r21, 0x31	; 49
     3d2:	7f 08       	sbc	r7, r15
     3d4:	08 08       	sbc	r0, r8
     3d6:	7f 00       	.word	0x007f	; ????
     3d8:	41 7f       	andi	r20, 0xF1	; 241
     3da:	41 00       	.word	0x0041	; ????
     3dc:	20 40       	sbci	r18, 0x00	; 0
     3de:	41 3f       	cpi	r20, 0xF1	; 241
     3e0:	01 7f       	andi	r16, 0xF1	; 241
     3e2:	08 14       	cp	r0, r8
     3e4:	22 41       	sbci	r18, 0x12	; 18
     3e6:	7f 40       	sbci	r23, 0x0F	; 15
     3e8:	40 40       	sbci	r20, 0x00	; 0
     3ea:	40 7f       	andi	r20, 0xF0	; 240
     3ec:	02 1c       	adc	r0, r2
     3ee:	02 7f       	andi	r16, 0xF2	; 242
     3f0:	7f 04       	cpc	r7, r15
     3f2:	08 10       	cpse	r0, r8
     3f4:	7f 3e       	cpi	r23, 0xEF	; 239
     3f6:	41 41       	sbci	r20, 0x11	; 17
     3f8:	41 3e       	cpi	r20, 0xE1	; 225
     3fa:	7f 09       	sbc	r23, r15
     3fc:	09 09       	sbc	r16, r9
     3fe:	06 3e       	cpi	r16, 0xE6	; 230
     400:	41 51       	subi	r20, 0x11	; 17
     402:	21 5e       	subi	r18, 0xE1	; 225
     404:	7f 09       	sbc	r23, r15
     406:	19 29       	or	r17, r9
     408:	46 26       	eor	r4, r22
     40a:	49 49       	sbci	r20, 0x99	; 153
     40c:	49 32       	cpi	r20, 0x29	; 41
     40e:	03 01       	movw	r0, r6
     410:	7f 01       	movw	r14, r30
     412:	03 3f       	cpi	r16, 0xF3	; 243
     414:	40 40       	sbci	r20, 0x00	; 0
     416:	40 3f       	cpi	r20, 0xF0	; 240
     418:	1f 20       	and	r1, r15
     41a:	40 20       	and	r4, r0
     41c:	1f 3f       	cpi	r17, 0xFF	; 255
     41e:	40 38       	cpi	r20, 0x80	; 128
     420:	40 3f       	cpi	r20, 0xF0	; 240
     422:	63 14       	cp	r6, r3
     424:	08 14       	cp	r0, r8
     426:	63 03       	mulsu	r22, r19
     428:	04 78       	andi	r16, 0x84	; 132
     42a:	04 03       	mulsu	r16, r20
     42c:	61 59       	subi	r22, 0x91	; 145
     42e:	49 4d       	sbci	r20, 0xD9	; 217
     430:	43 00       	.word	0x0043	; ????
     432:	7f 41       	sbci	r23, 0x1F	; 31
     434:	41 41       	sbci	r20, 0x11	; 17
     436:	02 04       	cpc	r0, r2
     438:	08 10       	cpse	r0, r8
     43a:	20 00       	.word	0x0020	; ????
     43c:	41 41       	sbci	r20, 0x11	; 17
     43e:	41 7f       	andi	r20, 0xF1	; 241
     440:	04 02       	muls	r16, r20
     442:	01 02       	muls	r16, r17
     444:	04 40       	sbci	r16, 0x04	; 4
     446:	40 40       	sbci	r20, 0x00	; 0
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	00 03       	mulsu	r16, r16
     44c:	07 08       	sbc	r0, r7
     44e:	00 20       	and	r0, r0
     450:	54 54       	subi	r21, 0x44	; 68
     452:	78 40       	sbci	r23, 0x08	; 8
     454:	7f 28       	or	r7, r15
     456:	44 44       	sbci	r20, 0x44	; 68
     458:	38 38       	cpi	r19, 0x88	; 136
     45a:	44 44       	sbci	r20, 0x44	; 68
     45c:	44 28       	or	r4, r4
     45e:	38 44       	sbci	r19, 0x48	; 72
     460:	44 28       	or	r4, r4
     462:	7f 38       	cpi	r23, 0x8F	; 143
     464:	54 54       	subi	r21, 0x44	; 68
     466:	54 18       	sub	r5, r4
     468:	00 08       	sbc	r0, r0
     46a:	7e 09       	sbc	r23, r14
     46c:	02 18       	sub	r0, r2
     46e:	a4 a4       	ldd	r10, Z+44	; 0x2c
     470:	9c 78       	andi	r25, 0x8C	; 140
     472:	7f 08       	sbc	r7, r15
     474:	04 04       	cpc	r0, r4
     476:	78 00       	.word	0x0078	; ????
     478:	44 7d       	andi	r20, 0xD4	; 212
     47a:	40 00       	.word	0x0040	; ????
     47c:	20 40       	sbci	r18, 0x00	; 0
     47e:	40 3d       	cpi	r20, 0xD0	; 208
     480:	00 7f       	andi	r16, 0xF0	; 240
     482:	10 28       	or	r1, r0
     484:	44 00       	.word	0x0044	; ????
     486:	00 41       	sbci	r16, 0x10	; 16
     488:	7f 40       	sbci	r23, 0x0F	; 15
     48a:	00 7c       	andi	r16, 0xC0	; 192
     48c:	04 78       	andi	r16, 0x84	; 132
     48e:	04 78       	andi	r16, 0x84	; 132
     490:	7c 08       	sbc	r7, r12
     492:	04 04       	cpc	r0, r4
     494:	78 38       	cpi	r23, 0x88	; 136
     496:	44 44       	sbci	r20, 0x44	; 68
     498:	44 38       	cpi	r20, 0x84	; 132
     49a:	fc 18       	sub	r15, r12
     49c:	24 24       	eor	r2, r4
     49e:	18 18       	sub	r1, r8
     4a0:	24 24       	eor	r2, r4
     4a2:	18 fc       	.word	0xfc18	; ????
     4a4:	7c 08       	sbc	r7, r12
     4a6:	04 04       	cpc	r0, r4
     4a8:	08 48       	sbci	r16, 0x88	; 136
     4aa:	54 54       	subi	r21, 0x44	; 68
     4ac:	54 24       	eor	r5, r4
     4ae:	04 04       	cpc	r0, r4
     4b0:	3f 44       	sbci	r19, 0x4F	; 79
     4b2:	24 3c       	cpi	r18, 0xC4	; 196
     4b4:	40 40       	sbci	r20, 0x00	; 0
     4b6:	20 7c       	andi	r18, 0xC0	; 192
     4b8:	1c 20       	and	r1, r12
     4ba:	40 20       	and	r4, r0
     4bc:	1c 3c       	cpi	r17, 0xCC	; 204
     4be:	40 30       	cpi	r20, 0x00	; 0
     4c0:	40 3c       	cpi	r20, 0xC0	; 192
     4c2:	44 28       	or	r4, r4
     4c4:	10 28       	or	r1, r0
     4c6:	44 4c       	sbci	r20, 0xC4	; 196
     4c8:	90 90 90 7c 	lds	r9, 0x7C90
     4cc:	44 64       	ori	r20, 0x44	; 68
     4ce:	54 4c       	sbci	r21, 0xC4	; 196
     4d0:	44 00       	.word	0x0044	; ????
     4d2:	08 36       	cpi	r16, 0x68	; 104
     4d4:	41 00       	.word	0x0041	; ????
     4d6:	00 00       	nop
     4d8:	77 00       	.word	0x0077	; ????
     4da:	00 00       	nop
     4dc:	41 36       	cpi	r20, 0x61	; 97
     4de:	08 00       	.word	0x0008	; ????
     4e0:	02 01       	movw	r0, r4
     4e2:	02 04       	cpc	r0, r2
     4e4:	02 3c       	cpi	r16, 0xC2	; 194
     4e6:	26 23       	and	r18, r22
     4e8:	26 3c       	cpi	r18, 0xC6	; 198
     4ea:	1e a1       	ldd	r17, Y+38	; 0x26
     4ec:	a1 61       	ori	r26, 0x11	; 17
     4ee:	12 3a       	cpi	r17, 0xA2	; 162
     4f0:	40 40       	sbci	r20, 0x00	; 0
     4f2:	20 7a       	andi	r18, 0xA0	; 160
     4f4:	38 54       	subi	r19, 0x48	; 72
     4f6:	54 55       	subi	r21, 0x54	; 84
     4f8:	59 21       	and	r21, r9
     4fa:	55 55       	subi	r21, 0x55	; 85
     4fc:	79 41       	sbci	r23, 0x19	; 25
     4fe:	21 54       	subi	r18, 0x41	; 65
     500:	54 78       	andi	r21, 0x84	; 132
     502:	41 21       	and	r20, r1
     504:	55 54       	subi	r21, 0x45	; 69
     506:	78 40       	sbci	r23, 0x08	; 8
     508:	20 54       	subi	r18, 0x40	; 64
     50a:	55 79       	andi	r21, 0x95	; 149
     50c:	40 0c       	add	r4, r0
     50e:	1e 52       	subi	r17, 0x2E	; 46
     510:	72 12       	cpse	r7, r18
     512:	39 55       	subi	r19, 0x59	; 89
     514:	55 55       	subi	r21, 0x55	; 85
     516:	59 39       	cpi	r21, 0x99	; 153
     518:	54 54       	subi	r21, 0x44	; 68
     51a:	54 59       	subi	r21, 0x94	; 148
     51c:	39 55       	subi	r19, 0x59	; 89
     51e:	54 54       	subi	r21, 0x44	; 68
     520:	58 00       	.word	0x0058	; ????
     522:	00 45       	sbci	r16, 0x50	; 80
     524:	7c 41       	sbci	r23, 0x1C	; 28
     526:	00 02       	muls	r16, r16
     528:	45 7d       	andi	r20, 0xD5	; 213
     52a:	42 00       	.word	0x0042	; ????
     52c:	01 45       	sbci	r16, 0x51	; 81
     52e:	7c 40       	sbci	r23, 0x0C	; 12
     530:	f0 29       	or	r31, r0
     532:	24 29       	or	r18, r4
     534:	f0 f0       	brcs	.+60     	; 0x572 <__trampolines_end+0x308>
     536:	28 25       	eor	r18, r8
     538:	28 f0       	brcs	.+10     	; 0x544 <__trampolines_end+0x2da>
     53a:	7c 54       	subi	r23, 0x4C	; 76
     53c:	55 45       	sbci	r21, 0x55	; 85
     53e:	00 20       	and	r0, r0
     540:	54 54       	subi	r21, 0x44	; 68
     542:	7c 54       	subi	r23, 0x4C	; 76
     544:	7c 0a       	sbc	r7, r28
     546:	09 7f       	andi	r16, 0xF9	; 249
     548:	49 32       	cpi	r20, 0x29	; 41
     54a:	49 49       	sbci	r20, 0x99	; 153
     54c:	49 32       	cpi	r20, 0x29	; 41
     54e:	32 48       	sbci	r19, 0x82	; 130
     550:	48 48       	sbci	r20, 0x88	; 136
     552:	32 32       	cpi	r19, 0x22	; 34
     554:	4a 48       	sbci	r20, 0x8A	; 138
     556:	48 30       	cpi	r20, 0x08	; 8
     558:	3a 41       	sbci	r19, 0x1A	; 26
     55a:	41 21       	and	r20, r1
     55c:	7a 3a       	cpi	r23, 0xAA	; 170
     55e:	42 40       	sbci	r20, 0x02	; 2
     560:	20 78       	andi	r18, 0x80	; 128
     562:	00 9d       	mul	r16, r0
     564:	a0 a0       	ldd	r10, Z+32	; 0x20
     566:	7d 39       	cpi	r23, 0x9D	; 157
     568:	44 44       	sbci	r20, 0x44	; 68
     56a:	44 39       	cpi	r20, 0x94	; 148
     56c:	3d 40       	sbci	r19, 0x0D	; 13
     56e:	40 40       	sbci	r20, 0x00	; 0
     570:	3d 3c       	cpi	r19, 0xCD	; 205
     572:	24 ff       	sbrs	r18, 4
     574:	24 24       	eor	r2, r4
     576:	48 7e       	andi	r20, 0xE8	; 232
     578:	49 43       	sbci	r20, 0x39	; 57
     57a:	66 2b       	or	r22, r22
     57c:	2f fc       	.word	0xfc2f	; ????
     57e:	2f 2b       	or	r18, r31
     580:	ff 09       	sbc	r31, r15
     582:	29 f6       	brne	.-118    	; 0x50e <__trampolines_end+0x2a4>
     584:	20 c0       	rjmp	.+64     	; 0x5c6 <__trampolines_end+0x35c>
     586:	88 7e       	andi	r24, 0xE8	; 232
     588:	09 03       	fmul	r16, r17
     58a:	20 54       	subi	r18, 0x40	; 64
     58c:	54 79       	andi	r21, 0x94	; 148
     58e:	41 00       	.word	0x0041	; ????
     590:	00 44       	sbci	r16, 0x40	; 64
     592:	7d 41       	sbci	r23, 0x1D	; 29
     594:	30 48       	sbci	r19, 0x80	; 128
     596:	48 4a       	sbci	r20, 0xA8	; 168
     598:	32 38       	cpi	r19, 0x82	; 130
     59a:	40 40       	sbci	r20, 0x00	; 0
     59c:	22 7a       	andi	r18, 0xA2	; 162
     59e:	00 7a       	andi	r16, 0xA0	; 160
     5a0:	0a 0a       	sbc	r0, r26
     5a2:	72 7d       	andi	r23, 0xD2	; 210
     5a4:	0d 19       	sub	r16, r13
     5a6:	31 7d       	andi	r19, 0xD1	; 209
     5a8:	26 29       	or	r18, r6
     5aa:	29 2f       	mov	r18, r25
     5ac:	28 26       	eor	r2, r24
     5ae:	29 29       	or	r18, r9
     5b0:	29 26       	eor	r2, r25
     5b2:	30 48       	sbci	r19, 0x80	; 128
     5b4:	4d 40       	sbci	r20, 0x0D	; 13
     5b6:	20 38       	cpi	r18, 0x80	; 128
     5b8:	08 08       	sbc	r0, r8
     5ba:	08 08       	sbc	r0, r8
     5bc:	08 08       	sbc	r0, r8
     5be:	08 08       	sbc	r0, r8
     5c0:	38 2f       	mov	r19, r24
     5c2:	10 c8       	rjmp	.-4064   	; 0xfffff5e4 <__eeprom_end+0xff7ef5e4>
     5c4:	ac ba       	out	0x1c, r10	; 28
     5c6:	2f 10       	cpse	r2, r15
     5c8:	28 34       	cpi	r18, 0x48	; 72
     5ca:	fa 00       	.word	0x00fa	; ????
     5cc:	00 7b       	andi	r16, 0xB0	; 176
     5ce:	00 00       	nop
     5d0:	08 14       	cp	r0, r8
     5d2:	2a 14       	cp	r2, r10
     5d4:	22 22       	and	r2, r18
     5d6:	14 2a       	or	r1, r20
     5d8:	14 08       	sbc	r1, r4
     5da:	aa 00       	.word	0x00aa	; ????
     5dc:	55 00       	.word	0x0055	; ????
     5de:	aa aa       	std	Y+50, r10	; 0x32
     5e0:	55 aa       	std	Z+53, r5	; 0x35
     5e2:	55 aa       	std	Z+53, r5	; 0x35
     5e4:	00 00       	nop
     5e6:	00 ff       	sbrs	r16, 0
     5e8:	00 10       	cpse	r0, r0
     5ea:	10 10       	cpse	r1, r0
     5ec:	ff 00       	.word	0x00ff	; ????
     5ee:	14 14       	cp	r1, r4
     5f0:	14 ff       	sbrs	r17, 4
     5f2:	00 10       	cpse	r0, r0
     5f4:	10 ff       	sbrs	r17, 0
     5f6:	00 ff       	sbrs	r16, 0
     5f8:	10 10       	cpse	r1, r0
     5fa:	f0 10       	cpse	r15, r0
     5fc:	f0 14       	cp	r15, r0
     5fe:	14 14       	cp	r1, r4
     600:	fc 00       	.word	0x00fc	; ????
     602:	14 14       	cp	r1, r4
     604:	f7 00       	.word	0x00f7	; ????
     606:	ff 00       	.word	0x00ff	; ????
     608:	00 ff       	sbrs	r16, 0
     60a:	00 ff       	sbrs	r16, 0
     60c:	14 14       	cp	r1, r4
     60e:	f4 04       	cpc	r15, r4
     610:	fc 14       	cp	r15, r12
     612:	14 17       	cp	r17, r20
     614:	10 1f       	adc	r17, r16
     616:	10 10       	cpse	r1, r0
     618:	1f 10       	cpse	r1, r15
     61a:	1f 14       	cp	r1, r15
     61c:	14 14       	cp	r1, r4
     61e:	1f 00       	.word	0x001f	; ????
     620:	10 10       	cpse	r1, r0
     622:	10 f0       	brcs	.+4      	; 0x628 <__trampolines_end+0x3be>
     624:	00 00       	nop
     626:	00 00       	nop
     628:	1f 10       	cpse	r1, r15
     62a:	10 10       	cpse	r1, r0
     62c:	10 1f       	adc	r17, r16
     62e:	10 10       	cpse	r1, r0
     630:	10 10       	cpse	r1, r0
     632:	f0 10       	cpse	r15, r0
     634:	00 00       	nop
     636:	00 ff       	sbrs	r16, 0
     638:	10 10       	cpse	r1, r0
     63a:	10 10       	cpse	r1, r0
     63c:	10 10       	cpse	r1, r0
     63e:	10 10       	cpse	r1, r0
     640:	10 ff       	sbrs	r17, 0
     642:	10 00       	.word	0x0010	; ????
     644:	00 00       	nop
     646:	ff 14       	cp	r15, r15
     648:	00 00       	nop
     64a:	ff 00       	.word	0x00ff	; ????
     64c:	ff 00       	.word	0x00ff	; ????
     64e:	00 1f       	adc	r16, r16
     650:	10 17       	cp	r17, r16
     652:	00 00       	nop
     654:	fc 04       	cpc	r15, r12
     656:	f4 14       	cp	r15, r4
     658:	14 17       	cp	r17, r20
     65a:	10 17       	cp	r17, r16
     65c:	14 14       	cp	r1, r4
     65e:	f4 04       	cpc	r15, r4
     660:	f4 00       	.word	0x00f4	; ????
     662:	00 ff       	sbrs	r16, 0
     664:	00 f7       	brcc	.-64     	; 0x626 <__trampolines_end+0x3bc>
     666:	14 14       	cp	r1, r4
     668:	14 14       	cp	r1, r4
     66a:	14 14       	cp	r1, r4
     66c:	14 f7       	brge	.-60     	; 0x632 <__trampolines_end+0x3c8>
     66e:	00 f7       	brcc	.-64     	; 0x630 <__trampolines_end+0x3c6>
     670:	14 14       	cp	r1, r4
     672:	14 17       	cp	r17, r20
     674:	14 10       	cpse	r1, r4
     676:	10 1f       	adc	r17, r16
     678:	10 1f       	adc	r17, r16
     67a:	14 14       	cp	r1, r4
     67c:	14 f4       	brge	.+4      	; 0x682 <__trampolines_end+0x418>
     67e:	14 10       	cpse	r1, r4
     680:	10 f0       	brcs	.+4      	; 0x686 <__trampolines_end+0x41c>
     682:	10 f0       	brcs	.+4      	; 0x688 <__trampolines_end+0x41e>
     684:	00 00       	nop
     686:	1f 10       	cpse	r1, r15
     688:	1f 00       	.word	0x001f	; ????
     68a:	00 00       	nop
     68c:	1f 14       	cp	r1, r15
     68e:	00 00       	nop
     690:	00 fc       	sbrc	r0, 0
     692:	14 00       	.word	0x0014	; ????
     694:	00 f0       	brcs	.+0      	; 0x696 <__trampolines_end+0x42c>
     696:	10 f0       	brcs	.+4      	; 0x69c <__trampolines_end+0x432>
     698:	10 10       	cpse	r1, r0
     69a:	ff 10       	cpse	r15, r15
     69c:	ff 14       	cp	r15, r15
     69e:	14 14       	cp	r1, r4
     6a0:	ff 14       	cp	r15, r15
     6a2:	10 10       	cpse	r1, r0
     6a4:	10 1f       	adc	r17, r16
     6a6:	00 00       	nop
     6a8:	00 00       	nop
     6aa:	f0 10       	cpse	r15, r0
     6ac:	ff ff       	.word	0xffff	; ????
     6ae:	ff ff       	.word	0xffff	; ????
     6b0:	ff f0       	brie	.+62     	; 0x6f0 <__trampolines_end+0x486>
     6b2:	f0 f0       	brcs	.+60     	; 0x6f0 <__trampolines_end+0x486>
     6b4:	f0 f0       	brcs	.+60     	; 0x6f2 <__trampolines_end+0x488>
     6b6:	ff ff       	.word	0xffff	; ????
     6b8:	ff 00       	.word	0x00ff	; ????
     6ba:	00 00       	nop
     6bc:	00 00       	nop
     6be:	ff ff       	.word	0xffff	; ????
     6c0:	0f 0f       	add	r16, r31
     6c2:	0f 0f       	add	r16, r31
     6c4:	0f 38       	cpi	r16, 0x8F	; 143
     6c6:	44 44       	sbci	r20, 0x44	; 68
     6c8:	38 44       	sbci	r19, 0x48	; 72
     6ca:	7c 2a       	or	r7, r28
     6cc:	2a 3e       	cpi	r18, 0xEA	; 234
     6ce:	14 7e       	andi	r17, 0xE4	; 228
     6d0:	02 02       	muls	r16, r18
     6d2:	06 06       	cpc	r0, r22
     6d4:	02 7e       	andi	r16, 0xE2	; 226
     6d6:	02 7e       	andi	r16, 0xE2	; 226
     6d8:	02 63       	ori	r16, 0x32	; 50
     6da:	55 49       	sbci	r21, 0x95	; 149
     6dc:	41 63       	ori	r20, 0x31	; 49
     6de:	38 44       	sbci	r19, 0x48	; 72
     6e0:	44 3c       	cpi	r20, 0xC4	; 196
     6e2:	04 40       	sbci	r16, 0x04	; 4
     6e4:	7e 20       	and	r7, r14
     6e6:	1e 20       	and	r1, r14
     6e8:	06 02       	muls	r16, r22
     6ea:	7e 02       	muls	r23, r30
     6ec:	02 99       	sbic	0x00, 2	; 0
     6ee:	a5 e7       	ldi	r26, 0x75	; 117
     6f0:	a5 99       	sbic	0x14, 5	; 20
     6f2:	1c 2a       	or	r1, r28
     6f4:	49 2a       	or	r4, r25
     6f6:	1c 4c       	sbci	r17, 0xCC	; 204
     6f8:	72 01       	movw	r14, r4
     6fa:	72 4c       	sbci	r23, 0xC2	; 194
     6fc:	30 4a       	sbci	r19, 0xA0	; 160
     6fe:	4d 4d       	sbci	r20, 0xDD	; 221
     700:	30 30       	cpi	r19, 0x00	; 0
     702:	48 78       	andi	r20, 0x88	; 136
     704:	48 30       	cpi	r20, 0x08	; 8
     706:	bc 62       	ori	r27, 0x2C	; 44
     708:	5a 46       	sbci	r21, 0x6A	; 106
     70a:	3d 3e       	cpi	r19, 0xED	; 237
     70c:	49 49       	sbci	r20, 0x99	; 153
     70e:	49 00       	.word	0x0049	; ????
     710:	7e 01       	movw	r14, r28
     712:	01 01       	movw	r0, r2
     714:	7e 2a       	or	r7, r30
     716:	2a 2a       	or	r2, r26
     718:	2a 2a       	or	r2, r26
     71a:	44 44       	sbci	r20, 0x44	; 68
     71c:	5f 44       	sbci	r21, 0x4F	; 79
     71e:	44 40       	sbci	r20, 0x04	; 4
     720:	51 4a       	sbci	r21, 0xA1	; 161
     722:	44 40       	sbci	r20, 0x04	; 4
     724:	40 44       	sbci	r20, 0x40	; 64
     726:	4a 51       	subi	r20, 0x1A	; 26
     728:	40 00       	.word	0x0040	; ????
     72a:	00 ff       	sbrs	r16, 0
     72c:	01 03       	mulsu	r16, r17
     72e:	e0 80       	ld	r14, Z
     730:	ff 00       	.word	0x00ff	; ????
     732:	00 08       	sbc	r0, r0
     734:	08 6b       	ori	r16, 0xB8	; 184
     736:	6b 08       	sbc	r6, r11
     738:	36 12       	cpse	r3, r22
     73a:	36 24       	eor	r3, r6
     73c:	36 06       	cpc	r3, r22
     73e:	0f 09       	sbc	r16, r15
     740:	0f 06       	cpc	r0, r31
     742:	00 00       	nop
     744:	18 18       	sub	r1, r8
     746:	00 00       	nop
     748:	00 10       	cpse	r0, r0
     74a:	10 00       	.word	0x0010	; ????
     74c:	30 40       	sbci	r19, 0x00	; 0
     74e:	ff 01       	movw	r30, r30
     750:	01 00       	.word	0x0001	; ????
     752:	1f 01       	movw	r2, r30
     754:	01 1e       	adc	r0, r17
     756:	00 19       	sub	r16, r0
     758:	1d 17       	cp	r17, r29
     75a:	12 00       	.word	0x0012	; ????
     75c:	3c 3c       	cpi	r19, 0xCC	; 204
     75e:	3c 3c       	cpi	r19, 0xCC	; 204
     760:	00 00       	nop
     762:	00 00       	nop
	...

00000766 <__ctors_end>:
     766:	11 24       	eor	r1, r1
     768:	1f be       	out	0x3f, r1	; 63
     76a:	cf ef       	ldi	r28, 0xFF	; 255
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	df e2       	ldi	r29, 0x2F	; 47
     770:	de bf       	out	0x3e, r29	; 62

00000772 <__do_copy_data>:
     772:	10 e2       	ldi	r17, 0x20	; 32
     774:	a0 e0       	ldi	r26, 0x00	; 0
     776:	b0 e2       	ldi	r27, 0x20	; 32
     778:	ea ef       	ldi	r30, 0xFA	; 250
     77a:	ff e3       	ldi	r31, 0x3F	; 63
     77c:	00 e0       	ldi	r16, 0x00	; 0
     77e:	0b bf       	out	0x3b, r16	; 59
     780:	02 c0       	rjmp	.+4      	; 0x786 <__do_copy_data+0x14>
     782:	07 90       	elpm	r0, Z+
     784:	0d 92       	st	X+, r0
     786:	a2 3a       	cpi	r26, 0xA2	; 162
     788:	b1 07       	cpc	r27, r17
     78a:	d9 f7       	brne	.-10     	; 0x782 <__do_copy_data+0x10>

0000078c <__do_clear_bss>:
     78c:	2d e2       	ldi	r18, 0x2D	; 45
     78e:	a2 ea       	ldi	r26, 0xA2	; 162
     790:	b0 e2       	ldi	r27, 0x20	; 32
     792:	01 c0       	rjmp	.+2      	; 0x796 <.do_clear_bss_start>

00000794 <.do_clear_bss_loop>:
     794:	1d 92       	st	X+, r1

00000796 <.do_clear_bss_start>:
     796:	aa 35       	cpi	r26, 0x5A	; 90
     798:	b2 07       	cpc	r27, r18
     79a:	e1 f7       	brne	.-8      	; 0x794 <.do_clear_bss_loop>
     79c:	0e 94 78 19 	call	0x32f0	; 0x32f0 <main>
     7a0:	0c 94 fb 1f 	jmp	0x3ff6	; 0x3ff6 <_exit>

000007a4 <__bad_interrupt>:
     7a4:	2d cc       	rjmp	.-1958   	; 0x0 <__vectors>

000007a6 <clock_setup_32_mhz>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
}

void clock_setup_32_mhz(void) {
	
	OSC.CTRL |= OSC_RC32MEN_bm;
     7a6:	e0 e5       	ldi	r30, 0x50	; 80
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	82 60       	ori	r24, 0x02	; 2
     7ae:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     7b0:	81 81       	ldd	r24, Z+1	; 0x01
     7b2:	81 ff       	sbrs	r24, 1
     7b4:	fd cf       	rjmp	.-6      	; 0x7b0 <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
     7b6:	88 ed       	ldi	r24, 0xD8	; 216
     7b8:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 93 40 00 	sts	0x0040, r24
     7c0:	08 95       	ret

000007c2 <__vector_88>:
esp8266_status_t connectWiFi(void) {
	
  return SUCCESS;
}

ISR(USARTD0_RXC_vect) {
     7c2:	1f 92       	push	r1
     7c4:	0f 92       	push	r0
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	0f 92       	push	r0
     7ca:	11 24       	eor	r1, r1
     7cc:	0b b6       	in	r0, 0x3b	; 59
     7ce:	0f 92       	push	r0
     7d0:	2f 93       	push	r18
     7d2:	3f 93       	push	r19
     7d4:	8f 93       	push	r24
     7d6:	9f 93       	push	r25
     7d8:	ef 93       	push	r30
     7da:	ff 93       	push	r31
	rx_buffer[rx_ptr++] = USARTD0.DATA;
     7dc:	80 91 a2 20 	lds	r24, 0x20A2
     7e0:	90 91 a3 20 	lds	r25, 0x20A3
     7e4:	9c 01       	movw	r18, r24
     7e6:	2f 5f       	subi	r18, 0xFF	; 255
     7e8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ea:	20 93 a2 20 	sts	0x20A2, r18
     7ee:	30 93 a3 20 	sts	0x20A3, r19
     7f2:	20 91 a0 09 	lds	r18, 0x09A0
     7f6:	fc 01       	movw	r30, r24
     7f8:	ed 54       	subi	r30, 0x4D	; 77
     7fa:	ff 4d       	sbci	r31, 0xDF	; 223
     7fc:	20 83       	st	Z, r18
     7fe:	ff 91       	pop	r31
     800:	ef 91       	pop	r30
     802:	9f 91       	pop	r25
     804:	8f 91       	pop	r24
     806:	3f 91       	pop	r19
     808:	2f 91       	pop	r18
     80a:	0f 90       	pop	r0
     80c:	0b be       	out	0x3b, r0	; 59
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <mem_cpy>:
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
     818:	0f 93       	push	r16
     81a:	1f 93       	push	r17
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	42 30       	cpi	r20, 0x02	; 2
     822:	51 05       	cpc	r21, r1
     824:	c0 f0       	brcs	.+48     	; 0x856 <mem_cpy+0x3e>
     826:	eb 01       	movw	r28, r22
     828:	fc 01       	movw	r30, r24
     82a:	9a 01       	movw	r18, r20
     82c:	09 91       	ld	r16, Y+
     82e:	19 91       	ld	r17, Y+
     830:	01 93       	st	Z+, r16
     832:	11 93       	st	Z+, r17
     834:	22 50       	subi	r18, 0x02	; 2
     836:	31 09       	sbc	r19, r1
     838:	22 30       	cpi	r18, 0x02	; 2
     83a:	31 05       	cpc	r19, r1
     83c:	b8 f7       	brcc	.-18     	; 0x82c <mem_cpy+0x14>
     83e:	9a 01       	movw	r18, r20
     840:	22 50       	subi	r18, 0x02	; 2
     842:	31 09       	sbc	r19, r1
     844:	2e 7f       	andi	r18, 0xFE	; 254
     846:	2e 5f       	subi	r18, 0xFE	; 254
     848:	3f 4f       	sbci	r19, 0xFF	; 255
     84a:	82 0f       	add	r24, r18
     84c:	93 1f       	adc	r25, r19
     84e:	62 0f       	add	r22, r18
     850:	73 1f       	adc	r23, r19
     852:	41 70       	andi	r20, 0x01	; 1
     854:	55 27       	eor	r21, r21
     856:	41 15       	cp	r20, r1
     858:	51 05       	cpc	r21, r1
     85a:	49 f0       	breq	.+18     	; 0x86e <mem_cpy+0x56>
     85c:	db 01       	movw	r26, r22
     85e:	fc 01       	movw	r30, r24
     860:	84 0f       	add	r24, r20
     862:	95 1f       	adc	r25, r21
     864:	2d 91       	ld	r18, X+
     866:	21 93       	st	Z+, r18
     868:	e8 17       	cp	r30, r24
     86a:	f9 07       	cpc	r31, r25
     86c:	d9 f7       	brne	.-10     	; 0x864 <mem_cpy+0x4c>
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	08 95       	ret

00000878 <mem_set>:
     878:	41 15       	cp	r20, r1
     87a:	51 05       	cpc	r21, r1
     87c:	39 f0       	breq	.+14     	; 0x88c <mem_set+0x14>
     87e:	fc 01       	movw	r30, r24
     880:	84 0f       	add	r24, r20
     882:	95 1f       	adc	r25, r21
     884:	61 93       	st	Z+, r22
     886:	e8 17       	cp	r30, r24
     888:	f9 07       	cpc	r31, r25
     88a:	e1 f7       	brne	.-8      	; 0x884 <mem_set+0xc>
     88c:	08 95       	ret

0000088e <ld_clust>:
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	dc 01       	movw	r26, r24
     894:	fb 01       	movw	r30, r22
     896:	62 8d       	ldd	r22, Z+26	; 0x1a
     898:	73 8d       	ldd	r23, Z+27	; 0x1b
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	2c 91       	ld	r18, X
     8a0:	23 30       	cpi	r18, 0x03	; 3
     8a2:	59 f4       	brne	.+22     	; 0x8ba <ld_clust+0x2c>
     8a4:	04 89       	ldd	r16, Z+20	; 0x14
     8a6:	15 89       	ldd	r17, Z+21	; 0x15
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	98 01       	movw	r18, r16
     8ae:	11 27       	eor	r17, r17
     8b0:	00 27       	eor	r16, r16
     8b2:	60 2b       	or	r22, r16
     8b4:	71 2b       	or	r23, r17
     8b6:	82 2b       	or	r24, r18
     8b8:	93 2b       	or	r25, r19
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	08 95       	ret

000008c0 <get_ldnumber>:
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	ec 01       	movw	r28, r24
     8c6:	a8 81       	ld	r26, Y
     8c8:	b9 81       	ldd	r27, Y+1	; 0x01
     8ca:	10 97       	sbiw	r26, 0x00	; 0
     8cc:	29 f1       	breq	.+74     	; 0x918 <get_ldnumber+0x58>
     8ce:	4c 91       	ld	r20, X
     8d0:	41 32       	cpi	r20, 0x21	; 33
     8d2:	58 f0       	brcs	.+22     	; 0x8ea <get_ldnumber+0x2a>
     8d4:	4a 33       	cpi	r20, 0x3A	; 58
     8d6:	49 f1       	breq	.+82     	; 0x92a <get_ldnumber+0x6a>
     8d8:	fd 01       	movw	r30, r26
     8da:	31 96       	adiw	r30, 0x01	; 1
     8dc:	9f 01       	movw	r18, r30
     8de:	91 91       	ld	r25, Z+
     8e0:	91 32       	cpi	r25, 0x21	; 33
     8e2:	28 f0       	brcs	.+10     	; 0x8ee <get_ldnumber+0x2e>
     8e4:	9a 33       	cpi	r25, 0x3A	; 58
     8e6:	d1 f7       	brne	.-12     	; 0x8dc <get_ldnumber+0x1c>
     8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <get_ldnumber+0x32>
     8ea:	94 2f       	mov	r25, r20
     8ec:	9d 01       	movw	r18, r26
     8ee:	9a 33       	cpi	r25, 0x3A	; 58
     8f0:	79 f4       	brne	.+30     	; 0x910 <get_ldnumber+0x50>
     8f2:	cd 01       	movw	r24, r26
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	28 17       	cp	r18, r24
     8f8:	39 07       	cpc	r19, r25
     8fa:	89 f4       	brne	.+34     	; 0x91e <get_ldnumber+0x5e>
     8fc:	84 2f       	mov	r24, r20
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	c0 97       	sbiw	r24, 0x30	; 48
     902:	82 30       	cpi	r24, 0x02	; 2
     904:	91 05       	cpc	r25, r1
     906:	70 f4       	brcc	.+28     	; 0x924 <get_ldnumber+0x64>
     908:	12 96       	adiw	r26, 0x02	; 2
     90a:	a8 83       	st	Y, r26
     90c:	b9 83       	std	Y+1, r27	; 0x01
     90e:	0f c0       	rjmp	.+30     	; 0x92e <get_ldnumber+0x6e>
     910:	80 91 a4 20 	lds	r24, 0x20A4
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0b c0       	rjmp	.+22     	; 0x92e <get_ldnumber+0x6e>
     918:	8f ef       	ldi	r24, 0xFF	; 255
     91a:	9f ef       	ldi	r25, 0xFF	; 255
     91c:	08 c0       	rjmp	.+16     	; 0x92e <get_ldnumber+0x6e>
     91e:	8f ef       	ldi	r24, 0xFF	; 255
     920:	9f ef       	ldi	r25, 0xFF	; 255
     922:	05 c0       	rjmp	.+10     	; 0x92e <get_ldnumber+0x6e>
     924:	8f ef       	ldi	r24, 0xFF	; 255
     926:	9f ef       	ldi	r25, 0xFF	; 255
     928:	02 c0       	rjmp	.+4      	; 0x92e <get_ldnumber+0x6e>
     92a:	9d 01       	movw	r18, r26
     92c:	e2 cf       	rjmp	.-60     	; 0x8f2 <get_ldnumber+0x32>
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <sync_window>:
     934:	8f 92       	push	r8
     936:	9f 92       	push	r9
     938:	af 92       	push	r10
     93a:	bf 92       	push	r11
     93c:	cf 92       	push	r12
     93e:	df 92       	push	r13
     940:	ef 92       	push	r14
     942:	ff 92       	push	r15
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	ec 01       	movw	r28, r24
     94e:	8c 81       	ldd	r24, Y+4	; 0x04
     950:	88 23       	and	r24, r24
     952:	09 f4       	brne	.+2      	; 0x956 <sync_window+0x22>
     954:	44 c0       	rjmp	.+136    	; 0x9de <sync_window+0xaa>
     956:	ce a4       	ldd	r12, Y+46	; 0x2e
     958:	df a4       	ldd	r13, Y+47	; 0x2f
     95a:	e8 a8       	ldd	r14, Y+48	; 0x30
     95c:	f9 a8       	ldd	r15, Y+49	; 0x31
     95e:	5e 01       	movw	r10, r28
     960:	82 e3       	ldi	r24, 0x32	; 50
     962:	a8 0e       	add	r10, r24
     964:	b1 1c       	adc	r11, r1
     966:	01 e0       	ldi	r16, 0x01	; 1
     968:	10 e0       	ldi	r17, 0x00	; 0
     96a:	a7 01       	movw	r20, r14
     96c:	96 01       	movw	r18, r12
     96e:	b5 01       	movw	r22, r10
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	0e 94 78 15 	call	0x2af0	; 0x2af0 <disk_write>
     976:	81 11       	cpse	r24, r1
     978:	34 c0       	rjmp	.+104    	; 0x9e2 <sync_window+0xae>
     97a:	1c 82       	std	Y+4, r1	; 0x04
     97c:	8a a1       	ldd	r24, Y+34	; 0x22
     97e:	9b a1       	ldd	r25, Y+35	; 0x23
     980:	ac a1       	ldd	r26, Y+36	; 0x24
     982:	bd a1       	ldd	r27, Y+37	; 0x25
     984:	b7 01       	movw	r22, r14
     986:	a6 01       	movw	r20, r12
     988:	48 1b       	sub	r20, r24
     98a:	59 0b       	sbc	r21, r25
     98c:	6a 0b       	sbc	r22, r26
     98e:	7b 0b       	sbc	r23, r27
     990:	8a 8d       	ldd	r24, Y+26	; 0x1a
     992:	9b 8d       	ldd	r25, Y+27	; 0x1b
     994:	ac 8d       	ldd	r26, Y+28	; 0x1c
     996:	bd 8d       	ldd	r27, Y+29	; 0x1d
     998:	48 17       	cp	r20, r24
     99a:	59 07       	cpc	r21, r25
     99c:	6a 07       	cpc	r22, r26
     99e:	7b 07       	cpc	r23, r27
     9a0:	10 f5       	brcc	.+68     	; 0x9e6 <sync_window+0xb2>
     9a2:	8b 80       	ldd	r8, Y+3	; 0x03
     9a4:	91 2c       	mov	r9, r1
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	88 16       	cp	r8, r24
     9aa:	91 04       	cpc	r9, r1
     9ac:	f0 f0       	brcs	.+60     	; 0x9ea <sync_window+0xb6>
     9ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9b2:	ac 8d       	ldd	r26, Y+28	; 0x1c
     9b4:	bd 8d       	ldd	r27, Y+29	; 0x1d
     9b6:	c8 0e       	add	r12, r24
     9b8:	d9 1e       	adc	r13, r25
     9ba:	ea 1e       	adc	r14, r26
     9bc:	fb 1e       	adc	r15, r27
     9be:	01 e0       	ldi	r16, 0x01	; 1
     9c0:	10 e0       	ldi	r17, 0x00	; 0
     9c2:	a7 01       	movw	r20, r14
     9c4:	96 01       	movw	r18, r12
     9c6:	b5 01       	movw	r22, r10
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	0e 94 78 15 	call	0x2af0	; 0x2af0 <disk_write>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	88 1a       	sub	r8, r24
     9d2:	91 08       	sbc	r9, r1
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	88 16       	cp	r8, r24
     9d8:	91 04       	cpc	r9, r1
     9da:	49 f7       	brne	.-46     	; 0x9ae <sync_window+0x7a>
     9dc:	08 c0       	rjmp	.+16     	; 0x9ee <sync_window+0xba>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	07 c0       	rjmp	.+14     	; 0x9f0 <sync_window+0xbc>
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <sync_window+0xbc>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <sync_window+0xbc>
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <sync_window+0xbc>
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	ff 90       	pop	r15
     9fa:	ef 90       	pop	r14
     9fc:	df 90       	pop	r13
     9fe:	cf 90       	pop	r12
     a00:	bf 90       	pop	r11
     a02:	af 90       	pop	r10
     a04:	9f 90       	pop	r9
     a06:	8f 90       	pop	r8
     a08:	08 95       	ret

00000a0a <move_window>:
     a0a:	bf 92       	push	r11
     a0c:	cf 92       	push	r12
     a0e:	df 92       	push	r13
     a10:	ef 92       	push	r14
     a12:	ff 92       	push	r15
     a14:	0f 93       	push	r16
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	ec 01       	movw	r28, r24
     a1e:	6a 01       	movw	r12, r20
     a20:	7b 01       	movw	r14, r22
     a22:	8e a5       	ldd	r24, Y+46	; 0x2e
     a24:	9f a5       	ldd	r25, Y+47	; 0x2f
     a26:	a8 a9       	ldd	r26, Y+48	; 0x30
     a28:	b9 a9       	ldd	r27, Y+49	; 0x31
     a2a:	84 17       	cp	r24, r20
     a2c:	95 07       	cpc	r25, r21
     a2e:	a6 07       	cpc	r26, r22
     a30:	b7 07       	cpc	r27, r23
     a32:	e1 f0       	breq	.+56     	; 0xa6c <move_window+0x62>
     a34:	ce 01       	movw	r24, r28
     a36:	7e df       	rcall	.-260    	; 0x934 <sync_window>
     a38:	b8 2e       	mov	r11, r24
     a3a:	81 11       	cpse	r24, r1
     a3c:	18 c0       	rjmp	.+48     	; 0xa6e <move_window+0x64>
     a3e:	01 e0       	ldi	r16, 0x01	; 1
     a40:	10 e0       	ldi	r17, 0x00	; 0
     a42:	a7 01       	movw	r20, r14
     a44:	96 01       	movw	r18, r12
     a46:	be 01       	movw	r22, r28
     a48:	6e 5c       	subi	r22, 0xCE	; 206
     a4a:	7f 4f       	sbci	r23, 0xFF	; 255
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	0e 94 24 15 	call	0x2a48	; 0x2a48 <disk_read>
     a52:	88 23       	and	r24, r24
     a54:	31 f0       	breq	.+12     	; 0xa62 <move_window+0x58>
     a56:	bb 24       	eor	r11, r11
     a58:	b3 94       	inc	r11
     a5a:	cc 24       	eor	r12, r12
     a5c:	ca 94       	dec	r12
     a5e:	dc 2c       	mov	r13, r12
     a60:	76 01       	movw	r14, r12
     a62:	ce a6       	std	Y+46, r12	; 0x2e
     a64:	df a6       	std	Y+47, r13	; 0x2f
     a66:	e8 aa       	std	Y+48, r14	; 0x30
     a68:	f9 aa       	std	Y+49, r15	; 0x31
     a6a:	01 c0       	rjmp	.+2      	; 0xa6e <move_window+0x64>
     a6c:	b1 2c       	mov	r11, r1
     a6e:	8b 2d       	mov	r24, r11
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	1f 91       	pop	r17
     a76:	0f 91       	pop	r16
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	bf 90       	pop	r11
     a82:	08 95       	ret

00000a84 <check_fs>:
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	ec 01       	movw	r28, r24
     a8e:	1c 82       	std	Y+4, r1	; 0x04
     a90:	0f ef       	ldi	r16, 0xFF	; 255
     a92:	1f ef       	ldi	r17, 0xFF	; 255
     a94:	98 01       	movw	r18, r16
     a96:	0e a7       	std	Y+46, r16	; 0x2e
     a98:	1f a7       	std	Y+47, r17	; 0x2f
     a9a:	28 ab       	std	Y+48, r18	; 0x30
     a9c:	39 ab       	std	Y+49, r19	; 0x31
     a9e:	b5 df       	rcall	.-150    	; 0xa0a <move_window>
     aa0:	81 11       	cpse	r24, r1
     aa2:	23 c0       	rjmp	.+70     	; 0xaea <check_fs+0x66>
     aa4:	fe 01       	movw	r30, r28
     aa6:	e0 5d       	subi	r30, 0xD0	; 208
     aa8:	fd 4f       	sbci	r31, 0xFD	; 253
     aaa:	80 81       	ld	r24, Z
     aac:	91 81       	ldd	r25, Z+1	; 0x01
     aae:	85 35       	cpi	r24, 0x55	; 85
     ab0:	9a 4a       	sbci	r25, 0xAA	; 170
     ab2:	e9 f4       	brne	.+58     	; 0xaee <check_fs+0x6a>
     ab4:	e8 5c       	subi	r30, 0xC8	; 200
     ab6:	f1 40       	sbci	r31, 0x01	; 1
     ab8:	40 81       	ld	r20, Z
     aba:	51 81       	ldd	r21, Z+1	; 0x01
     abc:	62 81       	ldd	r22, Z+2	; 0x02
     abe:	73 81       	ldd	r23, Z+3	; 0x03
     ac0:	77 27       	eor	r23, r23
     ac2:	46 34       	cpi	r20, 0x46	; 70
     ac4:	51 44       	sbci	r21, 0x41	; 65
     ac6:	64 45       	sbci	r22, 0x54	; 84
     ac8:	71 05       	cpc	r23, r1
     aca:	99 f0       	breq	.+38     	; 0xaf2 <check_fs+0x6e>
     acc:	cc 57       	subi	r28, 0x7C	; 124
     ace:	df 4f       	sbci	r29, 0xFF	; 255
     ad0:	48 81       	ld	r20, Y
     ad2:	59 81       	ldd	r21, Y+1	; 0x01
     ad4:	6a 81       	ldd	r22, Y+2	; 0x02
     ad6:	7b 81       	ldd	r23, Y+3	; 0x03
     ad8:	77 27       	eor	r23, r23
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	46 34       	cpi	r20, 0x46	; 70
     ade:	51 44       	sbci	r21, 0x41	; 65
     ae0:	64 45       	sbci	r22, 0x54	; 84
     ae2:	71 05       	cpc	r23, r1
     ae4:	39 f4       	brne	.+14     	; 0xaf4 <check_fs+0x70>
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <check_fs+0x70>
     aea:	83 e0       	ldi	r24, 0x03	; 3
     aec:	03 c0       	rjmp	.+6      	; 0xaf4 <check_fs+0x70>
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <check_fs+0x70>
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	08 95       	ret

00000afe <validate>:
     afe:	00 97       	sbiw	r24, 0x00	; 0
     b00:	c9 f0       	breq	.+50     	; 0xb34 <validate+0x36>
     b02:	dc 01       	movw	r26, r24
     b04:	ed 91       	ld	r30, X+
     b06:	fc 91       	ld	r31, X
     b08:	11 97       	sbiw	r26, 0x01	; 1
     b0a:	30 97       	sbiw	r30, 0x00	; 0
     b0c:	a9 f0       	breq	.+42     	; 0xb38 <validate+0x3a>
     b0e:	20 81       	ld	r18, Z
     b10:	22 23       	and	r18, r18
     b12:	a1 f0       	breq	.+40     	; 0xb3c <validate+0x3e>
     b14:	26 81       	ldd	r18, Z+6	; 0x06
     b16:	37 81       	ldd	r19, Z+7	; 0x07
     b18:	12 96       	adiw	r26, 0x02	; 2
     b1a:	8d 91       	ld	r24, X+
     b1c:	9c 91       	ld	r25, X
     b1e:	13 97       	sbiw	r26, 0x03	; 3
     b20:	28 17       	cp	r18, r24
     b22:	39 07       	cpc	r19, r25
     b24:	69 f4       	brne	.+26     	; 0xb40 <validate+0x42>
     b26:	81 81       	ldd	r24, Z+1	; 0x01
     b28:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <disk_status>
     b2c:	80 ff       	sbrs	r24, 0
     b2e:	0a c0       	rjmp	.+20     	; 0xb44 <validate+0x46>
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	08 95       	ret
     b34:	89 e0       	ldi	r24, 0x09	; 9
     b36:	08 95       	ret
     b38:	89 e0       	ldi	r24, 0x09	; 9
     b3a:	08 95       	ret
     b3c:	89 e0       	ldi	r24, 0x09	; 9
     b3e:	08 95       	ret
     b40:	89 e0       	ldi	r24, 0x09	; 9
     b42:	08 95       	ret
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	08 95       	ret

00000b48 <find_volume>:
     b48:	2f 92       	push	r2
     b4a:	3f 92       	push	r3
     b4c:	4f 92       	push	r4
     b4e:	5f 92       	push	r5
     b50:	6f 92       	push	r6
     b52:	7f 92       	push	r7
     b54:	8f 92       	push	r8
     b56:	9f 92       	push	r9
     b58:	af 92       	push	r10
     b5a:	bf 92       	push	r11
     b5c:	cf 92       	push	r12
     b5e:	df 92       	push	r13
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	6d 97       	sbiw	r28, 0x1d	; 29
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	6c 01       	movw	r12, r24
     b78:	cb 01       	movw	r24, r22
     b7a:	b4 2e       	mov	r11, r20
     b7c:	d6 01       	movw	r26, r12
     b7e:	1d 92       	st	X+, r1
     b80:	1c 92       	st	X, r1
     b82:	9e de       	rcall	.-708    	; 0x8c0 <get_ldnumber>
     b84:	7c 01       	movw	r14, r24
     b86:	99 23       	and	r25, r25
     b88:	0c f4       	brge	.+2      	; 0xb8c <find_volume+0x44>
     b8a:	2b c2       	rjmp	.+1110   	; 0xfe2 <find_volume+0x49a>
     b8c:	fc 01       	movw	r30, r24
     b8e:	ee 0f       	add	r30, r30
     b90:	ff 1f       	adc	r31, r31
     b92:	e9 55       	subi	r30, 0x59	; 89
     b94:	ff 4d       	sbci	r31, 0xDF	; 223
     b96:	00 81       	ld	r16, Z
     b98:	11 81       	ldd	r17, Z+1	; 0x01
     b9a:	01 15       	cp	r16, r1
     b9c:	11 05       	cpc	r17, r1
     b9e:	09 f4       	brne	.+2      	; 0xba2 <find_volume+0x5a>
     ba0:	22 c2       	rjmp	.+1092   	; 0xfe6 <find_volume+0x49e>
     ba2:	f6 01       	movw	r30, r12
     ba4:	00 83       	st	Z, r16
     ba6:	11 83       	std	Z+1, r17	; 0x01
     ba8:	d8 01       	movw	r26, r16
     baa:	8c 91       	ld	r24, X
     bac:	88 23       	and	r24, r24
     bae:	69 f0       	breq	.+26     	; 0xbca <find_volume+0x82>
     bb0:	11 96       	adiw	r26, 0x01	; 1
     bb2:	8c 91       	ld	r24, X
     bb4:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <disk_status>
     bb8:	80 fd       	sbrc	r24, 0
     bba:	07 c0       	rjmp	.+14     	; 0xbca <find_volume+0x82>
     bbc:	bb 20       	and	r11, r11
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <find_volume+0x7a>
     bc0:	14 c2       	rjmp	.+1064   	; 0xfea <find_volume+0x4a2>
     bc2:	82 fd       	sbrc	r24, 2
     bc4:	14 c2       	rjmp	.+1064   	; 0xfee <find_volume+0x4a6>
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	5d c2       	rjmp	.+1210   	; 0x1084 <find_volume+0x53c>
     bca:	f8 01       	movw	r30, r16
     bcc:	10 82       	st	Z, r1
     bce:	e1 82       	std	Z+1, r14	; 0x01
     bd0:	8e 2d       	mov	r24, r14
     bd2:	0e 94 63 14 	call	0x28c6	; 0x28c6 <disk_initialize>
     bd6:	80 fd       	sbrc	r24, 0
     bd8:	0c c2       	rjmp	.+1048   	; 0xff2 <find_volume+0x4aa>
     bda:	bb 20       	and	r11, r11
     bdc:	11 f0       	breq	.+4      	; 0xbe2 <find_volume+0x9a>
     bde:	82 fd       	sbrc	r24, 2
     be0:	0a c2       	rjmp	.+1044   	; 0xff6 <find_volume+0x4ae>
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	ba 01       	movw	r22, r20
     be8:	c8 01       	movw	r24, r16
     bea:	4c df       	rcall	.-360    	; 0xa84 <check_fs>
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	09 f0       	breq	.+2      	; 0xbf2 <find_volume+0xaa>
     bf0:	3f c0       	rjmp	.+126    	; 0xc70 <find_volume+0x128>
     bf2:	f8 01       	movw	r30, r16
     bf4:	ec 50       	subi	r30, 0x0C	; 12
     bf6:	fe 4f       	sbci	r31, 0xFE	; 254
     bf8:	7e 01       	movw	r14, r28
     bfa:	21 e1       	ldi	r18, 0x11	; 17
     bfc:	e2 0e       	add	r14, r18
     bfe:	f1 1c       	adc	r15, r1
     c00:	9e 01       	movw	r18, r28
     c02:	2f 5f       	subi	r18, 0xFF	; 255
     c04:	3f 4f       	sbci	r19, 0xFF	; 255
     c06:	af 01       	movw	r20, r30
     c08:	da 01       	movw	r26, r20
     c0a:	8c 91       	ld	r24, X
     c0c:	88 23       	and	r24, r24
     c0e:	39 f0       	breq	.+14     	; 0xc1e <find_volume+0xd6>
     c10:	14 96       	adiw	r26, 0x04	; 4
     c12:	8d 91       	ld	r24, X+
     c14:	9d 91       	ld	r25, X+
     c16:	0d 90       	ld	r0, X+
     c18:	bc 91       	ld	r27, X
     c1a:	a0 2d       	mov	r26, r0
     c1c:	03 c0       	rjmp	.+6      	; 0xc24 <find_volume+0xdc>
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	dc 01       	movw	r26, r24
     c24:	f9 01       	movw	r30, r18
     c26:	81 93       	st	Z+, r24
     c28:	91 93       	st	Z+, r25
     c2a:	a1 93       	st	Z+, r26
     c2c:	b1 93       	st	Z+, r27
     c2e:	9f 01       	movw	r18, r30
     c30:	40 5f       	subi	r20, 0xF0	; 240
     c32:	5f 4f       	sbci	r21, 0xFF	; 255
     c34:	ee 15       	cp	r30, r14
     c36:	ff 05       	cpc	r31, r15
     c38:	39 f7       	brne	.-50     	; 0xc08 <find_volume+0xc0>
     c3a:	9e 01       	movw	r18, r28
     c3c:	2f 5f       	subi	r18, 0xFF	; 255
     c3e:	3f 4f       	sbci	r19, 0xFF	; 255
     c40:	69 01       	movw	r12, r18
     c42:	d6 01       	movw	r26, r12
     c44:	4d 90       	ld	r4, X+
     c46:	5d 90       	ld	r5, X+
     c48:	6d 90       	ld	r6, X+
     c4a:	7d 90       	ld	r7, X+
     c4c:	6d 01       	movw	r12, r26
     c4e:	41 14       	cp	r4, r1
     c50:	51 04       	cpc	r5, r1
     c52:	61 04       	cpc	r6, r1
     c54:	71 04       	cpc	r7, r1
     c56:	39 f0       	breq	.+14     	; 0xc66 <find_volume+0x11e>
     c58:	b3 01       	movw	r22, r6
     c5a:	a2 01       	movw	r20, r4
     c5c:	c8 01       	movw	r24, r16
     c5e:	12 df       	rcall	.-476    	; 0xa84 <check_fs>
     c60:	81 11       	cpse	r24, r1
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <find_volume+0x120>
     c64:	08 c0       	rjmp	.+16     	; 0xc76 <find_volume+0x12e>
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	ce 14       	cp	r12, r14
     c6a:	df 04       	cpc	r13, r15
     c6c:	51 f7       	brne	.-44     	; 0xc42 <find_volume+0xfa>
     c6e:	03 c0       	rjmp	.+6      	; 0xc76 <find_volume+0x12e>
     c70:	41 2c       	mov	r4, r1
     c72:	51 2c       	mov	r5, r1
     c74:	32 01       	movw	r6, r4
     c76:	83 30       	cpi	r24, 0x03	; 3
     c78:	09 f4       	brne	.+2      	; 0xc7c <find_volume+0x134>
     c7a:	bf c1       	rjmp	.+894    	; 0xffa <find_volume+0x4b2>
     c7c:	81 11       	cpse	r24, r1
     c7e:	bf c1       	rjmp	.+894    	; 0xffe <find_volume+0x4b6>
     c80:	f8 01       	movw	r30, r16
     c82:	85 ad       	ldd	r24, Z+61	; 0x3d
     c84:	96 ad       	ldd	r25, Z+62	; 0x3e
     c86:	81 15       	cp	r24, r1
     c88:	92 40       	sbci	r25, 0x02	; 2
     c8a:	09 f0       	breq	.+2      	; 0xc8e <find_volume+0x146>
     c8c:	ba c1       	rjmp	.+884    	; 0x1002 <find_volume+0x4ba>
     c8e:	f8 01       	movw	r30, r16
     c90:	e8 5b       	subi	r30, 0xB8	; 184
     c92:	ff 4f       	sbci	r31, 0xFF	; 255
     c94:	c0 80       	ld	r12, Z
     c96:	d1 80       	ldd	r13, Z+1	; 0x01
     c98:	e1 2c       	mov	r14, r1
     c9a:	f1 2c       	mov	r15, r1
     c9c:	c1 14       	cp	r12, r1
     c9e:	d1 04       	cpc	r13, r1
     ca0:	e1 04       	cpc	r14, r1
     ca2:	f1 04       	cpc	r15, r1
     ca4:	29 f4       	brne	.+10     	; 0xcb0 <find_volume+0x168>
     ca6:	3e 96       	adiw	r30, 0x0e	; 14
     ca8:	c0 80       	ld	r12, Z
     caa:	d1 80       	ldd	r13, Z+1	; 0x01
     cac:	e2 80       	ldd	r14, Z+2	; 0x02
     cae:	f3 80       	ldd	r15, Z+3	; 0x03
     cb0:	d8 01       	movw	r26, r16
     cb2:	5a 96       	adiw	r26, 0x1a	; 26
     cb4:	cd 92       	st	X+, r12
     cb6:	dd 92       	st	X+, r13
     cb8:	ed 92       	st	X+, r14
     cba:	fc 92       	st	X, r15
     cbc:	5d 97       	sbiw	r26, 0x1d	; 29
     cbe:	f8 01       	movw	r30, r16
     cc0:	ee 5b       	subi	r30, 0xBE	; 190
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	a0 81       	ld	r26, Z
     cc6:	f8 01       	movw	r30, r16
     cc8:	a3 83       	std	Z+3, r26	; 0x03
     cca:	8f ef       	ldi	r24, 0xFF	; 255
     ccc:	8a 0f       	add	r24, r26
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	08 f0       	brcs	.+2      	; 0xcd4 <find_volume+0x18c>
     cd2:	99 c1       	rjmp	.+818    	; 0x1006 <find_volume+0x4be>
     cd4:	f7 ad       	ldd	r31, Z+63	; 0x3f
     cd6:	f9 8b       	std	Y+17, r31	; 0x11
     cd8:	2f 2f       	mov	r18, r31
     cda:	f8 01       	movw	r30, r16
     cdc:	22 83       	std	Z+2, r18	; 0x02
     cde:	22 23       	and	r18, r18
     ce0:	09 f4       	brne	.+2      	; 0xce4 <find_volume+0x19c>
     ce2:	93 c1       	rjmp	.+806    	; 0x100a <find_volume+0x4c2>
     ce4:	82 2f       	mov	r24, r18
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	9c 01       	movw	r18, r24
     cea:	21 50       	subi	r18, 0x01	; 1
     cec:	31 09       	sbc	r19, r1
     cee:	82 23       	and	r24, r18
     cf0:	93 23       	and	r25, r19
     cf2:	89 2b       	or	r24, r25
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <find_volume+0x1b0>
     cf6:	8b c1       	rjmp	.+790    	; 0x100e <find_volume+0x4c6>
     cf8:	ed 5b       	subi	r30, 0xBD	; 189
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	20 80       	ld	r2, Z
     cfe:	31 80       	ldd	r3, Z+1	; 0x01
     d00:	f8 01       	movw	r30, r16
     d02:	20 86       	std	Z+8, r2	; 0x08
     d04:	31 86       	std	Z+9, r3	; 0x09
     d06:	c1 01       	movw	r24, r2
     d08:	8f 70       	andi	r24, 0x0F	; 15
     d0a:	99 27       	eor	r25, r25
     d0c:	89 2b       	or	r24, r25
     d0e:	09 f0       	breq	.+2      	; 0xd12 <find_volume+0x1ca>
     d10:	80 c1       	rjmp	.+768    	; 0x1012 <find_volume+0x4ca>
     d12:	eb 5b       	subi	r30, 0xBB	; 187
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	80 80       	ld	r8, Z
     d18:	91 80       	ldd	r9, Z+1	; 0x01
     d1a:	a1 2c       	mov	r10, r1
     d1c:	b1 2c       	mov	r11, r1
     d1e:	81 14       	cp	r8, r1
     d20:	91 04       	cpc	r9, r1
     d22:	a1 04       	cpc	r10, r1
     d24:	b1 04       	cpc	r11, r1
     d26:	29 f4       	brne	.+10     	; 0xd32 <find_volume+0x1ea>
     d28:	3d 96       	adiw	r30, 0x0d	; 13
     d2a:	80 80       	ld	r8, Z
     d2c:	91 80       	ldd	r9, Z+1	; 0x01
     d2e:	a2 80       	ldd	r10, Z+2	; 0x02
     d30:	b3 80       	ldd	r11, Z+3	; 0x03
     d32:	f8 01       	movw	r30, r16
     d34:	e0 5c       	subi	r30, 0xC0	; 192
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	01 90       	ld	r0, Z+
     d3a:	f0 81       	ld	r31, Z
     d3c:	e0 2d       	mov	r30, r0
     d3e:	30 97       	sbiw	r30, 0x00	; 0
     d40:	09 f4       	brne	.+2      	; 0xd44 <find_volume+0x1fc>
     d42:	69 c1       	rjmp	.+722    	; 0x1016 <find_volume+0x4ce>
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	a7 01       	movw	r20, r14
     d48:	96 01       	movw	r18, r12
     d4a:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__muluhisi3>
     d4e:	6a 8f       	std	Y+26, r22	; 0x1a
     d50:	7b 8f       	std	Y+27, r23	; 0x1b
     d52:	8c 8f       	std	Y+28, r24	; 0x1c
     d54:	9d 8f       	std	Y+29, r25	; 0x1d
     d56:	9f 01       	movw	r18, r30
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	2e 8b       	std	Y+22, r18	; 0x16
     d5e:	3f 8b       	std	Y+23, r19	; 0x17
     d60:	48 8f       	std	Y+24, r20	; 0x18
     d62:	59 8f       	std	Y+25, r21	; 0x19
     d64:	c1 01       	movw	r24, r2
     d66:	92 95       	swap	r25
     d68:	82 95       	swap	r24
     d6a:	8f 70       	andi	r24, 0x0F	; 15
     d6c:	89 27       	eor	r24, r25
     d6e:	9f 70       	andi	r25, 0x0F	; 15
     d70:	89 27       	eor	r24, r25
     d72:	28 0f       	add	r18, r24
     d74:	39 1f       	adc	r19, r25
     d76:	41 1d       	adc	r20, r1
     d78:	51 1d       	adc	r21, r1
     d7a:	da 01       	movw	r26, r20
     d7c:	c9 01       	movw	r24, r18
     d7e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     d80:	3b 8d       	ldd	r19, Y+27	; 0x1b
     d82:	4c 8d       	ldd	r20, Y+28	; 0x1c
     d84:	5d 8d       	ldd	r21, Y+29	; 0x1d
     d86:	28 0f       	add	r18, r24
     d88:	39 1f       	adc	r19, r25
     d8a:	4a 1f       	adc	r20, r26
     d8c:	5b 1f       	adc	r21, r27
     d8e:	2a 8b       	std	Y+18, r18	; 0x12
     d90:	3b 8b       	std	Y+19, r19	; 0x13
     d92:	4c 8b       	std	Y+20, r20	; 0x14
     d94:	5d 8b       	std	Y+21, r21	; 0x15
     d96:	82 16       	cp	r8, r18
     d98:	93 06       	cpc	r9, r19
     d9a:	a4 06       	cpc	r10, r20
     d9c:	b5 06       	cpc	r11, r21
     d9e:	08 f4       	brcc	.+2      	; 0xda2 <find_volume+0x25a>
     da0:	3c c1       	rjmp	.+632    	; 0x101a <find_volume+0x4d2>
     da2:	c5 01       	movw	r24, r10
     da4:	b4 01       	movw	r22, r8
     da6:	62 1b       	sub	r22, r18
     da8:	73 0b       	sbc	r23, r19
     daa:	84 0b       	sbc	r24, r20
     dac:	95 0b       	sbc	r25, r21
     dae:	e9 89       	ldd	r30, Y+17	; 0x11
     db0:	2e 2f       	mov	r18, r30
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <__udivmodsi4>
     dbc:	da 01       	movw	r26, r20
     dbe:	c9 01       	movw	r24, r18
     dc0:	21 15       	cp	r18, r1
     dc2:	31 05       	cpc	r19, r1
     dc4:	41 05       	cpc	r20, r1
     dc6:	51 05       	cpc	r21, r1
     dc8:	09 f4       	brne	.+2      	; 0xdcc <find_volume+0x284>
     dca:	29 c1       	rjmp	.+594    	; 0x101e <find_volume+0x4d6>
     dcc:	26 3f       	cpi	r18, 0xF6	; 246
     dce:	ff e0       	ldi	r31, 0x0F	; 15
     dd0:	3f 07       	cpc	r19, r31
     dd2:	41 05       	cpc	r20, r1
     dd4:	51 05       	cpc	r21, r1
     dd6:	18 f4       	brcc	.+6      	; 0xdde <find_volume+0x296>
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	69 8b       	std	Y+17, r22	; 0x11
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <find_volume+0x29a>
     dde:	e2 e0       	ldi	r30, 0x02	; 2
     de0:	e9 8b       	std	Y+17, r30	; 0x11
     de2:	86 3f       	cpi	r24, 0xF6	; 246
     de4:	9f 4f       	sbci	r25, 0xFF	; 255
     de6:	a1 05       	cpc	r26, r1
     de8:	b1 05       	cpc	r27, r1
     dea:	08 f0       	brcs	.+2      	; 0xdee <find_volume+0x2a6>
     dec:	20 c1       	rjmp	.+576    	; 0x102e <find_volume+0x4e6>
     dee:	49 01       	movw	r8, r18
     df0:	5a 01       	movw	r10, r20
     df2:	62 e0       	ldi	r22, 0x02	; 2
     df4:	86 0e       	add	r8, r22
     df6:	91 1c       	adc	r9, r1
     df8:	a1 1c       	adc	r10, r1
     dfa:	b1 1c       	adc	r11, r1
     dfc:	d8 01       	movw	r26, r16
     dfe:	56 96       	adiw	r26, 0x16	; 22
     e00:	8d 92       	st	X+, r8
     e02:	9d 92       	st	X+, r9
     e04:	ad 92       	st	X+, r10
     e06:	bc 92       	st	X, r11
     e08:	59 97       	sbiw	r26, 0x19	; 25
     e0a:	f8 01       	movw	r30, r16
     e0c:	46 8e       	std	Z+30, r4	; 0x1e
     e0e:	57 8e       	std	Z+31, r5	; 0x1f
     e10:	60 a2       	std	Z+32, r6	; 0x20
     e12:	71 a2       	std	Z+33, r7	; 0x21
     e14:	8e 89       	ldd	r24, Y+22	; 0x16
     e16:	9f 89       	ldd	r25, Y+23	; 0x17
     e18:	a8 8d       	ldd	r26, Y+24	; 0x18
     e1a:	b9 8d       	ldd	r27, Y+25	; 0x19
     e1c:	84 0d       	add	r24, r4
     e1e:	95 1d       	adc	r25, r5
     e20:	a6 1d       	adc	r26, r6
     e22:	b7 1d       	adc	r27, r7
     e24:	82 a3       	std	Z+34, r24	; 0x22
     e26:	93 a3       	std	Z+35, r25	; 0x23
     e28:	a4 a3       	std	Z+36, r26	; 0x24
     e2a:	b5 a3       	std	Z+37, r27	; 0x25
     e2c:	4a 89       	ldd	r20, Y+18	; 0x12
     e2e:	5b 89       	ldd	r21, Y+19	; 0x13
     e30:	6c 89       	ldd	r22, Y+20	; 0x14
     e32:	7d 89       	ldd	r23, Y+21	; 0x15
     e34:	44 0d       	add	r20, r4
     e36:	55 1d       	adc	r21, r5
     e38:	66 1d       	adc	r22, r6
     e3a:	77 1d       	adc	r23, r7
     e3c:	42 a7       	std	Z+42, r20	; 0x2a
     e3e:	53 a7       	std	Z+43, r21	; 0x2b
     e40:	64 a7       	std	Z+44, r22	; 0x2c
     e42:	75 a7       	std	Z+45, r23	; 0x2d
     e44:	f9 89       	ldd	r31, Y+17	; 0x11
     e46:	f3 30       	cpi	r31, 0x03	; 3
     e48:	c1 f4       	brne	.+48     	; 0xe7a <find_volume+0x332>
     e4a:	23 28       	or	r2, r3
     e4c:	09 f0       	breq	.+2      	; 0xe50 <find_volume+0x308>
     e4e:	e9 c0       	rjmp	.+466    	; 0x1022 <find_volume+0x4da>
     e50:	f8 01       	movw	r30, r16
     e52:	e2 5a       	subi	r30, 0xA2	; 162
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	80 81       	ld	r24, Z
     e58:	91 81       	ldd	r25, Z+1	; 0x01
     e5a:	a2 81       	ldd	r26, Z+2	; 0x02
     e5c:	b3 81       	ldd	r27, Z+3	; 0x03
     e5e:	f8 01       	movw	r30, r16
     e60:	86 a3       	std	Z+38, r24	; 0x26
     e62:	97 a3       	std	Z+39, r25	; 0x27
     e64:	a0 a7       	std	Z+40, r26	; 0x28
     e66:	b1 a7       	std	Z+41, r27	; 0x29
     e68:	88 0c       	add	r8, r8
     e6a:	99 1c       	adc	r9, r9
     e6c:	aa 1c       	adc	r10, r10
     e6e:	bb 1c       	adc	r11, r11
     e70:	88 0c       	add	r8, r8
     e72:	99 1c       	adc	r9, r9
     e74:	aa 1c       	adc	r10, r10
     e76:	bb 1c       	adc	r11, r11
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <find_volume+0x38c>
     e7a:	23 28       	or	r2, r3
     e7c:	09 f4       	brne	.+2      	; 0xe80 <find_volume+0x338>
     e7e:	d3 c0       	rjmp	.+422    	; 0x1026 <find_volume+0x4de>
     e80:	2a 8d       	ldd	r18, Y+26	; 0x1a
     e82:	3b 8d       	ldd	r19, Y+27	; 0x1b
     e84:	4c 8d       	ldd	r20, Y+28	; 0x1c
     e86:	5d 8d       	ldd	r21, Y+29	; 0x1d
     e88:	82 0f       	add	r24, r18
     e8a:	93 1f       	adc	r25, r19
     e8c:	a4 1f       	adc	r26, r20
     e8e:	b5 1f       	adc	r27, r21
     e90:	f8 01       	movw	r30, r16
     e92:	86 a3       	std	Z+38, r24	; 0x26
     e94:	97 a3       	std	Z+39, r25	; 0x27
     e96:	a0 a7       	std	Z+40, r26	; 0x28
     e98:	b1 a7       	std	Z+41, r27	; 0x29
     e9a:	f9 89       	ldd	r31, Y+17	; 0x11
     e9c:	f2 30       	cpi	r31, 0x02	; 2
     e9e:	29 f4       	brne	.+10     	; 0xeaa <find_volume+0x362>
     ea0:	88 0c       	add	r8, r8
     ea2:	99 1c       	adc	r9, r9
     ea4:	aa 1c       	adc	r10, r10
     ea6:	bb 1c       	adc	r11, r11
     ea8:	15 c0       	rjmp	.+42     	; 0xed4 <find_volume+0x38c>
     eaa:	a3 e0       	ldi	r26, 0x03	; 3
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	a5 01       	movw	r20, r10
     eb0:	94 01       	movw	r18, r8
     eb2:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__muluhisi3>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	b6 95       	lsr	r27
     ebc:	a7 95       	ror	r26
     ebe:	97 95       	ror	r25
     ec0:	87 95       	ror	r24
     ec2:	21 e0       	ldi	r18, 0x01	; 1
     ec4:	82 22       	and	r8, r18
     ec6:	99 24       	eor	r9, r9
     ec8:	aa 24       	eor	r10, r10
     eca:	bb 24       	eor	r11, r11
     ecc:	88 0e       	add	r8, r24
     ece:	99 1e       	adc	r9, r25
     ed0:	aa 1e       	adc	r10, r26
     ed2:	bb 1e       	adc	r11, r27
     ed4:	3f ef       	ldi	r19, 0xFF	; 255
     ed6:	83 0e       	add	r8, r19
     ed8:	31 e0       	ldi	r19, 0x01	; 1
     eda:	93 1e       	adc	r9, r19
     edc:	a1 1c       	adc	r10, r1
     ede:	b1 1c       	adc	r11, r1
     ee0:	07 2e       	mov	r0, r23
     ee2:	79 e0       	ldi	r23, 0x09	; 9
     ee4:	b6 94       	lsr	r11
     ee6:	a7 94       	ror	r10
     ee8:	97 94       	ror	r9
     eea:	87 94       	ror	r8
     eec:	7a 95       	dec	r23
     eee:	d1 f7       	brne	.-12     	; 0xee4 <find_volume+0x39c>
     ef0:	70 2d       	mov	r23, r0
     ef2:	c8 14       	cp	r12, r8
     ef4:	d9 04       	cpc	r13, r9
     ef6:	ea 04       	cpc	r14, r10
     ef8:	fb 04       	cpc	r15, r11
     efa:	08 f4       	brcc	.+2      	; 0xefe <find_volume+0x3b6>
     efc:	96 c0       	rjmp	.+300    	; 0x102a <find_volume+0x4e2>
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	9f ef       	ldi	r25, 0xFF	; 255
     f02:	dc 01       	movw	r26, r24
     f04:	f8 01       	movw	r30, r16
     f06:	86 87       	std	Z+14, r24	; 0x0e
     f08:	97 87       	std	Z+15, r25	; 0x0f
     f0a:	a0 8b       	std	Z+16, r26	; 0x10
     f0c:	b1 8b       	std	Z+17, r27	; 0x11
     f0e:	82 87       	std	Z+10, r24	; 0x0a
     f10:	93 87       	std	Z+11, r25	; 0x0b
     f12:	a4 87       	std	Z+12, r26	; 0x0c
     f14:	b5 87       	std	Z+13, r27	; 0x0d
     f16:	80 e8       	ldi	r24, 0x80	; 128
     f18:	85 83       	std	Z+5, r24	; 0x05
     f1a:	f9 89       	ldd	r31, Y+17	; 0x11
     f1c:	f3 30       	cpi	r31, 0x03	; 3
     f1e:	09 f0       	breq	.+2      	; 0xf22 <find_volume+0x3da>
     f20:	48 c0       	rjmp	.+144    	; 0xfb2 <find_volume+0x46a>
     f22:	f8 01       	movw	r30, r16
     f24:	ee 59       	subi	r30, 0x9E	; 158
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	09 f0       	breq	.+2      	; 0xf32 <find_volume+0x3ea>
     f30:	40 c0       	rjmp	.+128    	; 0xfb2 <find_volume+0x46a>
     f32:	b3 01       	movw	r22, r6
     f34:	a2 01       	movw	r20, r4
     f36:	4f 5f       	subi	r20, 0xFF	; 255
     f38:	5f 4f       	sbci	r21, 0xFF	; 255
     f3a:	6f 4f       	sbci	r22, 0xFF	; 255
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	c8 01       	movw	r24, r16
     f40:	64 dd       	rcall	.-1336   	; 0xa0a <move_window>
     f42:	81 11       	cpse	r24, r1
     f44:	36 c0       	rjmp	.+108    	; 0xfb2 <find_volume+0x46a>
     f46:	d8 01       	movw	r26, r16
     f48:	15 96       	adiw	r26, 0x05	; 5
     f4a:	1c 92       	st	X, r1
     f4c:	f8 01       	movw	r30, r16
     f4e:	e0 5d       	subi	r30, 0xD0	; 208
     f50:	fd 4f       	sbci	r31, 0xFD	; 253
     f52:	80 81       	ld	r24, Z
     f54:	91 81       	ldd	r25, Z+1	; 0x01
     f56:	85 35       	cpi	r24, 0x55	; 85
     f58:	9a 4a       	sbci	r25, 0xAA	; 170
     f5a:	59 f5       	brne	.+86     	; 0xfb2 <find_volume+0x46a>
     f5c:	f8 01       	movw	r30, r16
     f5e:	82 a9       	ldd	r24, Z+50	; 0x32
     f60:	93 a9       	ldd	r25, Z+51	; 0x33
     f62:	a4 a9       	ldd	r26, Z+52	; 0x34
     f64:	b5 a9       	ldd	r27, Z+53	; 0x35
     f66:	82 35       	cpi	r24, 0x52	; 82
     f68:	92 45       	sbci	r25, 0x52	; 82
     f6a:	a1 46       	sbci	r26, 0x61	; 97
     f6c:	b1 44       	sbci	r27, 0x41	; 65
     f6e:	09 f5       	brne	.+66     	; 0xfb2 <find_volume+0x46a>
     f70:	f8 01       	movw	r30, r16
     f72:	ea 5e       	subi	r30, 0xEA	; 234
     f74:	fd 4f       	sbci	r31, 0xFD	; 253
     f76:	80 81       	ld	r24, Z
     f78:	91 81       	ldd	r25, Z+1	; 0x01
     f7a:	a2 81       	ldd	r26, Z+2	; 0x02
     f7c:	b3 81       	ldd	r27, Z+3	; 0x03
     f7e:	82 37       	cpi	r24, 0x72	; 114
     f80:	92 47       	sbci	r25, 0x72	; 114
     f82:	a1 44       	sbci	r26, 0x41	; 65
     f84:	b1 46       	sbci	r27, 0x61	; 97
     f86:	a9 f4       	brne	.+42     	; 0xfb2 <find_volume+0x46a>
     f88:	34 96       	adiw	r30, 0x04	; 4
     f8a:	80 81       	ld	r24, Z
     f8c:	91 81       	ldd	r25, Z+1	; 0x01
     f8e:	a2 81       	ldd	r26, Z+2	; 0x02
     f90:	b3 81       	ldd	r27, Z+3	; 0x03
     f92:	f8 01       	movw	r30, r16
     f94:	86 87       	std	Z+14, r24	; 0x0e
     f96:	97 87       	std	Z+15, r25	; 0x0f
     f98:	a0 8b       	std	Z+16, r26	; 0x10
     f9a:	b1 8b       	std	Z+17, r27	; 0x11
     f9c:	e2 5e       	subi	r30, 0xE2	; 226
     f9e:	fd 4f       	sbci	r31, 0xFD	; 253
     fa0:	80 81       	ld	r24, Z
     fa2:	91 81       	ldd	r25, Z+1	; 0x01
     fa4:	a2 81       	ldd	r26, Z+2	; 0x02
     fa6:	b3 81       	ldd	r27, Z+3	; 0x03
     fa8:	f8 01       	movw	r30, r16
     faa:	82 87       	std	Z+10, r24	; 0x0a
     fac:	93 87       	std	Z+11, r25	; 0x0b
     fae:	a4 87       	std	Z+12, r26	; 0x0c
     fb0:	b5 87       	std	Z+13, r27	; 0x0d
     fb2:	e9 89       	ldd	r30, Y+17	; 0x11
     fb4:	d8 01       	movw	r26, r16
     fb6:	ec 93       	st	X, r30
     fb8:	80 91 a5 20 	lds	r24, 0x20A5
     fbc:	90 91 a6 20 	lds	r25, 0x20A6
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	80 93 a5 20 	sts	0x20A5, r24
     fc6:	90 93 a6 20 	sts	0x20A6, r25
     fca:	16 96       	adiw	r26, 0x06	; 6
     fcc:	8d 93       	st	X+, r24
     fce:	9c 93       	st	X, r25
     fd0:	17 97       	sbiw	r26, 0x07	; 7
     fd2:	52 96       	adiw	r26, 0x12	; 18
     fd4:	1d 92       	st	X+, r1
     fd6:	1d 92       	st	X+, r1
     fd8:	1d 92       	st	X+, r1
     fda:	1c 92       	st	X, r1
     fdc:	55 97       	sbiw	r26, 0x15	; 21
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	51 c0       	rjmp	.+162    	; 0x1084 <find_volume+0x53c>
     fe2:	8b e0       	ldi	r24, 0x0B	; 11
     fe4:	4f c0       	rjmp	.+158    	; 0x1084 <find_volume+0x53c>
     fe6:	8c e0       	ldi	r24, 0x0C	; 12
     fe8:	4d c0       	rjmp	.+154    	; 0x1084 <find_volume+0x53c>
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	4b c0       	rjmp	.+150    	; 0x1084 <find_volume+0x53c>
     fee:	8a e0       	ldi	r24, 0x0A	; 10
     ff0:	49 c0       	rjmp	.+146    	; 0x1084 <find_volume+0x53c>
     ff2:	83 e0       	ldi	r24, 0x03	; 3
     ff4:	47 c0       	rjmp	.+142    	; 0x1084 <find_volume+0x53c>
     ff6:	8a e0       	ldi	r24, 0x0A	; 10
     ff8:	45 c0       	rjmp	.+138    	; 0x1084 <find_volume+0x53c>
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	43 c0       	rjmp	.+134    	; 0x1084 <find_volume+0x53c>
     ffe:	8d e0       	ldi	r24, 0x0D	; 13
    1000:	41 c0       	rjmp	.+130    	; 0x1084 <find_volume+0x53c>
    1002:	8d e0       	ldi	r24, 0x0D	; 13
    1004:	3f c0       	rjmp	.+126    	; 0x1084 <find_volume+0x53c>
    1006:	8d e0       	ldi	r24, 0x0D	; 13
    1008:	3d c0       	rjmp	.+122    	; 0x1084 <find_volume+0x53c>
    100a:	8d e0       	ldi	r24, 0x0D	; 13
    100c:	3b c0       	rjmp	.+118    	; 0x1084 <find_volume+0x53c>
    100e:	8d e0       	ldi	r24, 0x0D	; 13
    1010:	39 c0       	rjmp	.+114    	; 0x1084 <find_volume+0x53c>
    1012:	8d e0       	ldi	r24, 0x0D	; 13
    1014:	37 c0       	rjmp	.+110    	; 0x1084 <find_volume+0x53c>
    1016:	8d e0       	ldi	r24, 0x0D	; 13
    1018:	35 c0       	rjmp	.+106    	; 0x1084 <find_volume+0x53c>
    101a:	8d e0       	ldi	r24, 0x0D	; 13
    101c:	33 c0       	rjmp	.+102    	; 0x1084 <find_volume+0x53c>
    101e:	8d e0       	ldi	r24, 0x0D	; 13
    1020:	31 c0       	rjmp	.+98     	; 0x1084 <find_volume+0x53c>
    1022:	8d e0       	ldi	r24, 0x0D	; 13
    1024:	2f c0       	rjmp	.+94     	; 0x1084 <find_volume+0x53c>
    1026:	8d e0       	ldi	r24, 0x0D	; 13
    1028:	2d c0       	rjmp	.+90     	; 0x1084 <find_volume+0x53c>
    102a:	8d e0       	ldi	r24, 0x0D	; 13
    102c:	2b c0       	rjmp	.+86     	; 0x1084 <find_volume+0x53c>
    102e:	49 01       	movw	r8, r18
    1030:	5a 01       	movw	r10, r20
    1032:	b2 e0       	ldi	r27, 0x02	; 2
    1034:	8b 0e       	add	r8, r27
    1036:	91 1c       	adc	r9, r1
    1038:	a1 1c       	adc	r10, r1
    103a:	b1 1c       	adc	r11, r1
    103c:	f8 01       	movw	r30, r16
    103e:	86 8a       	std	Z+22, r8	; 0x16
    1040:	97 8a       	std	Z+23, r9	; 0x17
    1042:	a0 8e       	std	Z+24, r10	; 0x18
    1044:	b1 8e       	std	Z+25, r11	; 0x19
    1046:	46 8e       	std	Z+30, r4	; 0x1e
    1048:	57 8e       	std	Z+31, r5	; 0x1f
    104a:	60 a2       	std	Z+32, r6	; 0x20
    104c:	71 a2       	std	Z+33, r7	; 0x21
    104e:	8e 89       	ldd	r24, Y+22	; 0x16
    1050:	9f 89       	ldd	r25, Y+23	; 0x17
    1052:	a8 8d       	ldd	r26, Y+24	; 0x18
    1054:	b9 8d       	ldd	r27, Y+25	; 0x19
    1056:	84 0d       	add	r24, r4
    1058:	95 1d       	adc	r25, r5
    105a:	a6 1d       	adc	r26, r6
    105c:	b7 1d       	adc	r27, r7
    105e:	82 a3       	std	Z+34, r24	; 0x22
    1060:	93 a3       	std	Z+35, r25	; 0x23
    1062:	a4 a3       	std	Z+36, r26	; 0x24
    1064:	b5 a3       	std	Z+37, r27	; 0x25
    1066:	8a 89       	ldd	r24, Y+18	; 0x12
    1068:	9b 89       	ldd	r25, Y+19	; 0x13
    106a:	ac 89       	ldd	r26, Y+20	; 0x14
    106c:	bd 89       	ldd	r27, Y+21	; 0x15
    106e:	84 0d       	add	r24, r4
    1070:	95 1d       	adc	r25, r5
    1072:	a6 1d       	adc	r26, r6
    1074:	b7 1d       	adc	r27, r7
    1076:	82 a7       	std	Z+42, r24	; 0x2a
    1078:	93 a7       	std	Z+43, r25	; 0x2b
    107a:	a4 a7       	std	Z+44, r26	; 0x2c
    107c:	b5 a7       	std	Z+45, r27	; 0x2d
    107e:	f3 e0       	ldi	r31, 0x03	; 3
    1080:	f9 8b       	std	Y+17, r31	; 0x11
    1082:	e3 ce       	rjmp	.-570    	; 0xe4a <find_volume+0x302>
    1084:	6d 96       	adiw	r28, 0x1d	; 29
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	df 90       	pop	r13
    1098:	cf 90       	pop	r12
    109a:	bf 90       	pop	r11
    109c:	af 90       	pop	r10
    109e:	9f 90       	pop	r9
    10a0:	8f 90       	pop	r8
    10a2:	7f 90       	pop	r7
    10a4:	6f 90       	pop	r6
    10a6:	5f 90       	pop	r5
    10a8:	4f 90       	pop	r4
    10aa:	3f 90       	pop	r3
    10ac:	2f 90       	pop	r2
    10ae:	08 95       	ret

000010b0 <sync_fs>:
    10b0:	ef 92       	push	r14
    10b2:	ff 92       	push	r15
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	ec 01       	movw	r28, r24
    10be:	3a dc       	rcall	.-1932   	; 0x934 <sync_window>
    10c0:	98 2f       	mov	r25, r24
    10c2:	81 11       	cpse	r24, r1
    10c4:	5b c0       	rjmp	.+182    	; 0x117c <sync_fs+0xcc>
    10c6:	88 81       	ld	r24, Y
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	09 f0       	breq	.+2      	; 0x10ce <sync_fs+0x1e>
    10cc:	4d c0       	rjmp	.+154    	; 0x1168 <sync_fs+0xb8>
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <sync_fs+0x26>
    10d4:	49 c0       	rjmp	.+146    	; 0x1168 <sync_fs+0xb8>
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	52 e0       	ldi	r21, 0x02	; 2
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	7e 01       	movw	r14, r28
    10e0:	82 e3       	ldi	r24, 0x32	; 50
    10e2:	e8 0e       	add	r14, r24
    10e4:	f1 1c       	adc	r15, r1
    10e6:	c7 01       	movw	r24, r14
    10e8:	c7 db       	rcall	.-2162   	; 0x878 <mem_set>
    10ea:	85 e5       	ldi	r24, 0x55	; 85
    10ec:	9a ea       	ldi	r25, 0xAA	; 170
    10ee:	fe 01       	movw	r30, r28
    10f0:	e0 5d       	subi	r30, 0xD0	; 208
    10f2:	fd 4f       	sbci	r31, 0xFD	; 253
    10f4:	80 83       	st	Z, r24
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	82 e5       	ldi	r24, 0x52	; 82
    10fa:	92 e5       	ldi	r25, 0x52	; 82
    10fc:	a1 e6       	ldi	r26, 0x61	; 97
    10fe:	b1 e4       	ldi	r27, 0x41	; 65
    1100:	8a ab       	std	Y+50, r24	; 0x32
    1102:	9b ab       	std	Y+51, r25	; 0x33
    1104:	ac ab       	std	Y+52, r26	; 0x34
    1106:	bd ab       	std	Y+53, r27	; 0x35
    1108:	82 e7       	ldi	r24, 0x72	; 114
    110a:	92 e7       	ldi	r25, 0x72	; 114
    110c:	a1 e4       	ldi	r26, 0x41	; 65
    110e:	b1 e6       	ldi	r27, 0x61	; 97
    1110:	7a 97       	sbiw	r30, 0x1a	; 26
    1112:	80 83       	st	Z, r24
    1114:	91 83       	std	Z+1, r25	; 0x01
    1116:	a2 83       	std	Z+2, r26	; 0x02
    1118:	b3 83       	std	Z+3, r27	; 0x03
    111a:	8e 85       	ldd	r24, Y+14	; 0x0e
    111c:	9f 85       	ldd	r25, Y+15	; 0x0f
    111e:	a8 89       	ldd	r26, Y+16	; 0x10
    1120:	b9 89       	ldd	r27, Y+17	; 0x11
    1122:	34 96       	adiw	r30, 0x04	; 4
    1124:	80 83       	st	Z, r24
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	a2 83       	std	Z+2, r26	; 0x02
    112a:	b3 83       	std	Z+3, r27	; 0x03
    112c:	8a 85       	ldd	r24, Y+10	; 0x0a
    112e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1130:	ac 85       	ldd	r26, Y+12	; 0x0c
    1132:	bd 85       	ldd	r27, Y+13	; 0x0d
    1134:	34 96       	adiw	r30, 0x04	; 4
    1136:	80 83       	st	Z, r24
    1138:	91 83       	std	Z+1, r25	; 0x01
    113a:	a2 83       	std	Z+2, r26	; 0x02
    113c:	b3 83       	std	Z+3, r27	; 0x03
    113e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1140:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1142:	a8 a1       	ldd	r26, Y+32	; 0x20
    1144:	b9 a1       	ldd	r27, Y+33	; 0x21
    1146:	9c 01       	movw	r18, r24
    1148:	ad 01       	movw	r20, r26
    114a:	2f 5f       	subi	r18, 0xFF	; 255
    114c:	3f 4f       	sbci	r19, 0xFF	; 255
    114e:	4f 4f       	sbci	r20, 0xFF	; 255
    1150:	5f 4f       	sbci	r21, 0xFF	; 255
    1152:	2e a7       	std	Y+46, r18	; 0x2e
    1154:	3f a7       	std	Y+47, r19	; 0x2f
    1156:	48 ab       	std	Y+48, r20	; 0x30
    1158:	59 ab       	std	Y+49, r21	; 0x31
    115a:	01 e0       	ldi	r16, 0x01	; 1
    115c:	10 e0       	ldi	r17, 0x00	; 0
    115e:	b7 01       	movw	r22, r14
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	0e 94 78 15 	call	0x2af0	; 0x2af0 <disk_write>
    1166:	1d 82       	std	Y+5, r1	; 0x05
    1168:	40 e0       	ldi	r20, 0x00	; 0
    116a:	50 e0       	ldi	r21, 0x00	; 0
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <disk_ioctl>
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	81 11       	cpse	r24, r1
    1178:	01 c0       	rjmp	.+2      	; 0x117c <sync_fs+0xcc>
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	89 2f       	mov	r24, r25
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	ff 90       	pop	r15
    1188:	ef 90       	pop	r14
    118a:	08 95       	ret

0000118c <clust2sect>:
    118c:	cf 92       	push	r12
    118e:	df 92       	push	r13
    1190:	ef 92       	push	r14
    1192:	ff 92       	push	r15
    1194:	fc 01       	movw	r30, r24
    1196:	9a 01       	movw	r18, r20
    1198:	ab 01       	movw	r20, r22
    119a:	22 50       	subi	r18, 0x02	; 2
    119c:	31 09       	sbc	r19, r1
    119e:	41 09       	sbc	r20, r1
    11a0:	51 09       	sbc	r21, r1
    11a2:	c6 88       	ldd	r12, Z+22	; 0x16
    11a4:	d7 88       	ldd	r13, Z+23	; 0x17
    11a6:	e0 8c       	ldd	r14, Z+24	; 0x18
    11a8:	f1 8c       	ldd	r15, Z+25	; 0x19
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	c8 1a       	sub	r12, r24
    11ae:	d1 08       	sbc	r13, r1
    11b0:	e1 08       	sbc	r14, r1
    11b2:	f1 08       	sbc	r15, r1
    11b4:	2c 15       	cp	r18, r12
    11b6:	3d 05       	cpc	r19, r13
    11b8:	4e 05       	cpc	r20, r14
    11ba:	5f 05       	cpc	r21, r15
    11bc:	68 f4       	brcc	.+26     	; 0x11d8 <clust2sect+0x4c>
    11be:	a2 81       	ldd	r26, Z+2	; 0x02
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <__muluhisi3>
    11c6:	c2 a4       	ldd	r12, Z+42	; 0x2a
    11c8:	d3 a4       	ldd	r13, Z+43	; 0x2b
    11ca:	e4 a4       	ldd	r14, Z+44	; 0x2c
    11cc:	f5 a4       	ldd	r15, Z+45	; 0x2d
    11ce:	6c 0d       	add	r22, r12
    11d0:	7d 1d       	adc	r23, r13
    11d2:	8e 1d       	adc	r24, r14
    11d4:	9f 1d       	adc	r25, r15
    11d6:	03 c0       	rjmp	.+6      	; 0x11de <clust2sect+0x52>
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	cb 01       	movw	r24, r22
    11de:	ff 90       	pop	r15
    11e0:	ef 90       	pop	r14
    11e2:	df 90       	pop	r13
    11e4:	cf 90       	pop	r12
    11e6:	08 95       	ret

000011e8 <get_fat>:
    11e8:	af 92       	push	r10
    11ea:	bf 92       	push	r11
    11ec:	cf 92       	push	r12
    11ee:	df 92       	push	r13
    11f0:	ef 92       	push	r14
    11f2:	ff 92       	push	r15
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	ec 01       	movw	r28, r24
    11fe:	6a 01       	movw	r12, r20
    1200:	7b 01       	movw	r14, r22
    1202:	42 30       	cpi	r20, 0x02	; 2
    1204:	51 05       	cpc	r21, r1
    1206:	61 05       	cpc	r22, r1
    1208:	71 05       	cpc	r23, r1
    120a:	08 f4       	brcc	.+2      	; 0x120e <get_fat+0x26>
    120c:	aa c0       	rjmp	.+340    	; 0x1362 <get_fat+0x17a>
    120e:	4e 89       	ldd	r20, Y+22	; 0x16
    1210:	5f 89       	ldd	r21, Y+23	; 0x17
    1212:	68 8d       	ldd	r22, Y+24	; 0x18
    1214:	79 8d       	ldd	r23, Y+25	; 0x19
    1216:	c4 16       	cp	r12, r20
    1218:	d5 06       	cpc	r13, r21
    121a:	e6 06       	cpc	r14, r22
    121c:	f7 06       	cpc	r15, r23
    121e:	08 f0       	brcs	.+2      	; 0x1222 <get_fat+0x3a>
    1220:	a5 c0       	rjmp	.+330    	; 0x136c <get_fat+0x184>
    1222:	88 81       	ld	r24, Y
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	09 f4       	brne	.+2      	; 0x122a <get_fat+0x42>
    1228:	4b c0       	rjmp	.+150    	; 0x12c0 <get_fat+0xd8>
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	09 f4       	brne	.+2      	; 0x1230 <get_fat+0x48>
    122e:	6a c0       	rjmp	.+212    	; 0x1304 <get_fat+0x11c>
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	09 f0       	breq	.+2      	; 0x1236 <get_fat+0x4e>
    1234:	a0 c0       	rjmp	.+320    	; 0x1376 <get_fat+0x18e>
    1236:	86 01       	movw	r16, r12
    1238:	16 95       	lsr	r17
    123a:	07 95       	ror	r16
    123c:	0c 0d       	add	r16, r12
    123e:	1d 1d       	adc	r17, r13
    1240:	c8 01       	movw	r24, r16
    1242:	89 2f       	mov	r24, r25
    1244:	99 27       	eor	r25, r25
    1246:	86 95       	lsr	r24
    1248:	4a a1       	ldd	r20, Y+34	; 0x22
    124a:	5b a1       	ldd	r21, Y+35	; 0x23
    124c:	6c a1       	ldd	r22, Y+36	; 0x24
    124e:	7d a1       	ldd	r23, Y+37	; 0x25
    1250:	48 0f       	add	r20, r24
    1252:	59 1f       	adc	r21, r25
    1254:	61 1d       	adc	r22, r1
    1256:	71 1d       	adc	r23, r1
    1258:	ce 01       	movw	r24, r28
    125a:	d7 db       	rcall	.-2130   	; 0xa0a <move_window>
    125c:	81 11       	cpse	r24, r1
    125e:	90 c0       	rjmp	.+288    	; 0x1380 <get_fat+0x198>
    1260:	58 01       	movw	r10, r16
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	a8 1a       	sub	r10, r24
    1266:	b8 0a       	sbc	r11, r24
    1268:	11 70       	andi	r17, 0x01	; 1
    126a:	fe 01       	movw	r30, r28
    126c:	e0 0f       	add	r30, r16
    126e:	f1 1f       	adc	r31, r17
    1270:	12 a9       	ldd	r17, Z+50	; 0x32
    1272:	c5 01       	movw	r24, r10
    1274:	89 2f       	mov	r24, r25
    1276:	99 27       	eor	r25, r25
    1278:	86 95       	lsr	r24
    127a:	4a a1       	ldd	r20, Y+34	; 0x22
    127c:	5b a1       	ldd	r21, Y+35	; 0x23
    127e:	6c a1       	ldd	r22, Y+36	; 0x24
    1280:	7d a1       	ldd	r23, Y+37	; 0x25
    1282:	48 0f       	add	r20, r24
    1284:	59 1f       	adc	r21, r25
    1286:	61 1d       	adc	r22, r1
    1288:	71 1d       	adc	r23, r1
    128a:	ce 01       	movw	r24, r28
    128c:	be db       	rcall	.-2180   	; 0xa0a <move_window>
    128e:	81 11       	cpse	r24, r1
    1290:	7b c0       	rjmp	.+246    	; 0x1388 <get_fat+0x1a0>
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	b8 22       	and	r11, r24
    1296:	ca 0d       	add	r28, r10
    1298:	db 1d       	adc	r29, r11
    129a:	8a a9       	ldd	r24, Y+50	; 0x32
    129c:	61 2f       	mov	r22, r17
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	78 2b       	or	r23, r24
    12a2:	c0 fe       	sbrs	r12, 0
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <get_fat+0xd0>
    12a6:	72 95       	swap	r23
    12a8:	62 95       	swap	r22
    12aa:	6f 70       	andi	r22, 0x0F	; 15
    12ac:	67 27       	eor	r22, r23
    12ae:	7f 70       	andi	r23, 0x0F	; 15
    12b0:	67 27       	eor	r22, r23
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	73 c0       	rjmp	.+230    	; 0x139e <get_fat+0x1b6>
    12b8:	7f 70       	andi	r23, 0x0F	; 15
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	6f c0       	rjmp	.+222    	; 0x139e <get_fat+0x1b6>
    12c0:	77 27       	eor	r23, r23
    12c2:	6f 2d       	mov	r22, r15
    12c4:	5e 2d       	mov	r21, r14
    12c6:	4d 2d       	mov	r20, r13
    12c8:	0a a1       	ldd	r16, Y+34	; 0x22
    12ca:	1b a1       	ldd	r17, Y+35	; 0x23
    12cc:	2c a1       	ldd	r18, Y+36	; 0x24
    12ce:	3d a1       	ldd	r19, Y+37	; 0x25
    12d0:	40 0f       	add	r20, r16
    12d2:	51 1f       	adc	r21, r17
    12d4:	62 1f       	adc	r22, r18
    12d6:	73 1f       	adc	r23, r19
    12d8:	ce 01       	movw	r24, r28
    12da:	97 db       	rcall	.-2258   	; 0xa0a <move_window>
    12dc:	81 11       	cpse	r24, r1
    12de:	58 c0       	rjmp	.+176    	; 0x1390 <get_fat+0x1a8>
    12e0:	cc 0c       	add	r12, r12
    12e2:	dd 1c       	adc	r13, r13
    12e4:	ee 1c       	adc	r14, r14
    12e6:	ff 1c       	adc	r15, r15
    12e8:	e8 94       	clt
    12ea:	c0 f8       	bld	r12, 0
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	d8 22       	and	r13, r24
    12f0:	ee 24       	eor	r14, r14
    12f2:	ff 24       	eor	r15, r15
    12f4:	fe 01       	movw	r30, r28
    12f6:	ec 0d       	add	r30, r12
    12f8:	fd 1d       	adc	r31, r13
    12fa:	62 a9       	ldd	r22, Z+50	; 0x32
    12fc:	73 a9       	ldd	r23, Z+51	; 0x33
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	4d c0       	rjmp	.+154    	; 0x139e <get_fat+0x1b6>
    1304:	4a a1       	ldd	r20, Y+34	; 0x22
    1306:	5b a1       	ldd	r21, Y+35	; 0x23
    1308:	6c a1       	ldd	r22, Y+36	; 0x24
    130a:	7d a1       	ldd	r23, Y+37	; 0x25
    130c:	97 01       	movw	r18, r14
    130e:	86 01       	movw	r16, r12
    1310:	68 94       	set
    1312:	16 f8       	bld	r1, 6
    1314:	36 95       	lsr	r19
    1316:	27 95       	ror	r18
    1318:	17 95       	ror	r17
    131a:	07 95       	ror	r16
    131c:	16 94       	lsr	r1
    131e:	d1 f7       	brne	.-12     	; 0x1314 <get_fat+0x12c>
    1320:	40 0f       	add	r20, r16
    1322:	51 1f       	adc	r21, r17
    1324:	62 1f       	adc	r22, r18
    1326:	73 1f       	adc	r23, r19
    1328:	ce 01       	movw	r24, r28
    132a:	6f db       	rcall	.-2338   	; 0xa0a <move_window>
    132c:	81 11       	cpse	r24, r1
    132e:	34 c0       	rjmp	.+104    	; 0x1398 <get_fat+0x1b0>
    1330:	cc 0c       	add	r12, r12
    1332:	dd 1c       	adc	r13, r13
    1334:	ee 1c       	adc	r14, r14
    1336:	ff 1c       	adc	r15, r15
    1338:	cc 0c       	add	r12, r12
    133a:	dd 1c       	adc	r13, r13
    133c:	ee 1c       	adc	r14, r14
    133e:	ff 1c       	adc	r15, r15
    1340:	8c ef       	ldi	r24, 0xFC	; 252
    1342:	c8 22       	and	r12, r24
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	d8 22       	and	r13, r24
    1348:	ee 24       	eor	r14, r14
    134a:	ff 24       	eor	r15, r15
    134c:	fe 01       	movw	r30, r28
    134e:	ec 0d       	add	r30, r12
    1350:	fd 1d       	adc	r31, r13
    1352:	82 a9       	ldd	r24, Z+50	; 0x32
    1354:	93 a9       	ldd	r25, Z+51	; 0x33
    1356:	a4 a9       	ldd	r26, Z+52	; 0x34
    1358:	b5 a9       	ldd	r27, Z+53	; 0x35
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	9f 70       	andi	r25, 0x0F	; 15
    1360:	1e c0       	rjmp	.+60     	; 0x139e <get_fat+0x1b6>
    1362:	61 e0       	ldi	r22, 0x01	; 1
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	19 c0       	rjmp	.+50     	; 0x139e <get_fat+0x1b6>
    136c:	61 e0       	ldi	r22, 0x01	; 1
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	14 c0       	rjmp	.+40     	; 0x139e <get_fat+0x1b6>
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	0f c0       	rjmp	.+30     	; 0x139e <get_fat+0x1b6>
    1380:	6f ef       	ldi	r22, 0xFF	; 255
    1382:	7f ef       	ldi	r23, 0xFF	; 255
    1384:	cb 01       	movw	r24, r22
    1386:	0b c0       	rjmp	.+22     	; 0x139e <get_fat+0x1b6>
    1388:	6f ef       	ldi	r22, 0xFF	; 255
    138a:	7f ef       	ldi	r23, 0xFF	; 255
    138c:	cb 01       	movw	r24, r22
    138e:	07 c0       	rjmp	.+14     	; 0x139e <get_fat+0x1b6>
    1390:	6f ef       	ldi	r22, 0xFF	; 255
    1392:	7f ef       	ldi	r23, 0xFF	; 255
    1394:	cb 01       	movw	r24, r22
    1396:	03 c0       	rjmp	.+6      	; 0x139e <get_fat+0x1b6>
    1398:	6f ef       	ldi	r22, 0xFF	; 255
    139a:	7f ef       	ldi	r23, 0xFF	; 255
    139c:	cb 01       	movw	r24, r22
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	af 90       	pop	r10
    13b2:	08 95       	ret

000013b4 <dir_sdi>:
    13b4:	af 92       	push	r10
    13b6:	bf 92       	push	r11
    13b8:	cf 92       	push	r12
    13ba:	df 92       	push	r13
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	ec 01       	movw	r28, r24
    13ca:	8b 01       	movw	r16, r22
    13cc:	6c 83       	std	Y+4, r22	; 0x04
    13ce:	7d 83       	std	Y+5, r23	; 0x05
    13d0:	ce 80       	ldd	r12, Y+6	; 0x06
    13d2:	df 80       	ldd	r13, Y+7	; 0x07
    13d4:	e8 84       	ldd	r14, Y+8	; 0x08
    13d6:	f9 84       	ldd	r15, Y+9	; 0x09
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	c8 16       	cp	r12, r24
    13dc:	d1 04       	cpc	r13, r1
    13de:	e1 04       	cpc	r14, r1
    13e0:	f1 04       	cpc	r15, r1
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <dir_sdi+0x32>
    13e4:	8a c0       	rjmp	.+276    	; 0x14fa <dir_sdi+0x146>
    13e6:	e8 81       	ld	r30, Y
    13e8:	f9 81       	ldd	r31, Y+1	; 0x01
    13ea:	86 89       	ldd	r24, Z+22	; 0x16
    13ec:	97 89       	ldd	r25, Z+23	; 0x17
    13ee:	a0 8d       	ldd	r26, Z+24	; 0x18
    13f0:	b1 8d       	ldd	r27, Z+25	; 0x19
    13f2:	c8 16       	cp	r12, r24
    13f4:	d9 06       	cpc	r13, r25
    13f6:	ea 06       	cpc	r14, r26
    13f8:	fb 06       	cpc	r15, r27
    13fa:	08 f0       	brcs	.+2      	; 0x13fe <dir_sdi+0x4a>
    13fc:	80 c0       	rjmp	.+256    	; 0x14fe <dir_sdi+0x14a>
    13fe:	c1 14       	cp	r12, r1
    1400:	d1 04       	cpc	r13, r1
    1402:	e1 04       	cpc	r14, r1
    1404:	f1 04       	cpc	r15, r1
    1406:	c1 f4       	brne	.+48     	; 0x1438 <dir_sdi+0x84>
    1408:	80 81       	ld	r24, Z
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	41 f4       	brne	.+16     	; 0x141e <dir_sdi+0x6a>
    140e:	86 a1       	ldd	r24, Z+38	; 0x26
    1410:	97 a1       	ldd	r25, Z+39	; 0x27
    1412:	a0 a5       	ldd	r26, Z+40	; 0x28
    1414:	b1 a5       	ldd	r27, Z+41	; 0x29
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	a1 05       	cpc	r26, r1
    141a:	b1 05       	cpc	r27, r1
    141c:	59 f4       	brne	.+22     	; 0x1434 <dir_sdi+0x80>
    141e:	80 85       	ldd	r24, Z+8	; 0x08
    1420:	91 85       	ldd	r25, Z+9	; 0x09
    1422:	08 17       	cp	r16, r24
    1424:	19 07       	cpc	r17, r25
    1426:	08 f0       	brcs	.+2      	; 0x142a <dir_sdi+0x76>
    1428:	6c c0       	rjmp	.+216    	; 0x1502 <dir_sdi+0x14e>
    142a:	66 a1       	ldd	r22, Z+38	; 0x26
    142c:	77 a1       	ldd	r23, Z+39	; 0x27
    142e:	80 a5       	ldd	r24, Z+40	; 0x28
    1430:	91 a5       	ldd	r25, Z+41	; 0x29
    1432:	35 c0       	rjmp	.+106    	; 0x149e <dir_sdi+0xea>
    1434:	6c 01       	movw	r12, r24
    1436:	7d 01       	movw	r14, r26
    1438:	a2 80       	ldd	r10, Z+2	; 0x02
    143a:	80 e1       	ldi	r24, 0x10	; 16
    143c:	a8 9e       	mul	r10, r24
    143e:	50 01       	movw	r10, r0
    1440:	11 24       	eor	r1, r1
    1442:	0a 15       	cp	r16, r10
    1444:	1b 05       	cpc	r17, r11
    1446:	30 f1       	brcs	.+76     	; 0x1494 <dir_sdi+0xe0>
    1448:	b7 01       	movw	r22, r14
    144a:	a6 01       	movw	r20, r12
    144c:	88 81       	ld	r24, Y
    144e:	99 81       	ldd	r25, Y+1	; 0x01
    1450:	cb de       	rcall	.-618    	; 0x11e8 <get_fat>
    1452:	6b 01       	movw	r12, r22
    1454:	7c 01       	movw	r14, r24
    1456:	8f ef       	ldi	r24, 0xFF	; 255
    1458:	c8 16       	cp	r12, r24
    145a:	d8 06       	cpc	r13, r24
    145c:	e8 06       	cpc	r14, r24
    145e:	f8 06       	cpc	r15, r24
    1460:	09 f4       	brne	.+2      	; 0x1464 <dir_sdi+0xb0>
    1462:	51 c0       	rjmp	.+162    	; 0x1506 <dir_sdi+0x152>
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	c8 16       	cp	r12, r24
    1468:	d1 04       	cpc	r13, r1
    146a:	e1 04       	cpc	r14, r1
    146c:	f1 04       	cpc	r15, r1
    146e:	08 f4       	brcc	.+2      	; 0x1472 <dir_sdi+0xbe>
    1470:	4c c0       	rjmp	.+152    	; 0x150a <dir_sdi+0x156>
    1472:	e8 81       	ld	r30, Y
    1474:	f9 81       	ldd	r31, Y+1	; 0x01
    1476:	86 89       	ldd	r24, Z+22	; 0x16
    1478:	97 89       	ldd	r25, Z+23	; 0x17
    147a:	a0 8d       	ldd	r26, Z+24	; 0x18
    147c:	b1 8d       	ldd	r27, Z+25	; 0x19
    147e:	c8 16       	cp	r12, r24
    1480:	d9 06       	cpc	r13, r25
    1482:	ea 06       	cpc	r14, r26
    1484:	fb 06       	cpc	r15, r27
    1486:	08 f0       	brcs	.+2      	; 0x148a <dir_sdi+0xd6>
    1488:	42 c0       	rjmp	.+132    	; 0x150e <dir_sdi+0x15a>
    148a:	0a 19       	sub	r16, r10
    148c:	1b 09       	sbc	r17, r11
    148e:	0a 15       	cp	r16, r10
    1490:	1b 05       	cpc	r17, r11
    1492:	d0 f6       	brcc	.-76     	; 0x1448 <dir_sdi+0x94>
    1494:	b7 01       	movw	r22, r14
    1496:	a6 01       	movw	r20, r12
    1498:	88 81       	ld	r24, Y
    149a:	99 81       	ldd	r25, Y+1	; 0x01
    149c:	77 de       	rcall	.-786    	; 0x118c <clust2sect>
    149e:	ca 86       	std	Y+10, r12	; 0x0a
    14a0:	db 86       	std	Y+11, r13	; 0x0b
    14a2:	ec 86       	std	Y+12, r14	; 0x0c
    14a4:	fd 86       	std	Y+13, r15	; 0x0d
    14a6:	61 15       	cp	r22, r1
    14a8:	71 05       	cpc	r23, r1
    14aa:	81 05       	cpc	r24, r1
    14ac:	91 05       	cpc	r25, r1
    14ae:	89 f1       	breq	.+98     	; 0x1512 <dir_sdi+0x15e>
    14b0:	98 01       	movw	r18, r16
    14b2:	32 95       	swap	r19
    14b4:	22 95       	swap	r18
    14b6:	2f 70       	andi	r18, 0x0F	; 15
    14b8:	23 27       	eor	r18, r19
    14ba:	3f 70       	andi	r19, 0x0F	; 15
    14bc:	23 27       	eor	r18, r19
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	82 0f       	add	r24, r18
    14c4:	93 1f       	adc	r25, r19
    14c6:	a1 1d       	adc	r26, r1
    14c8:	b1 1d       	adc	r27, r1
    14ca:	8e 87       	std	Y+14, r24	; 0x0e
    14cc:	9f 87       	std	Y+15, r25	; 0x0f
    14ce:	a8 8b       	std	Y+16, r26	; 0x10
    14d0:	b9 8b       	std	Y+17, r27	; 0x11
    14d2:	0f 70       	andi	r16, 0x0F	; 15
    14d4:	11 27       	eor	r17, r17
    14d6:	c8 01       	movw	r24, r16
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	82 95       	swap	r24
    14de:	92 95       	swap	r25
    14e0:	90 7f       	andi	r25, 0xF0	; 240
    14e2:	98 27       	eor	r25, r24
    14e4:	80 7f       	andi	r24, 0xF0	; 240
    14e6:	98 27       	eor	r25, r24
    14e8:	c2 96       	adiw	r24, 0x32	; 50
    14ea:	28 81       	ld	r18, Y
    14ec:	39 81       	ldd	r19, Y+1	; 0x01
    14ee:	82 0f       	add	r24, r18
    14f0:	93 1f       	adc	r25, r19
    14f2:	8a 8b       	std	Y+18, r24	; 0x12
    14f4:	9b 8b       	std	Y+19, r25	; 0x13
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	0d c0       	rjmp	.+26     	; 0x1514 <dir_sdi+0x160>
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	0b c0       	rjmp	.+22     	; 0x1514 <dir_sdi+0x160>
    14fe:	82 e0       	ldi	r24, 0x02	; 2
    1500:	09 c0       	rjmp	.+18     	; 0x1514 <dir_sdi+0x160>
    1502:	82 e0       	ldi	r24, 0x02	; 2
    1504:	07 c0       	rjmp	.+14     	; 0x1514 <dir_sdi+0x160>
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	05 c0       	rjmp	.+10     	; 0x1514 <dir_sdi+0x160>
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <dir_sdi+0x160>
    150e:	82 e0       	ldi	r24, 0x02	; 2
    1510:	01 c0       	rjmp	.+2      	; 0x1514 <dir_sdi+0x160>
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	ff 90       	pop	r15
    151e:	ef 90       	pop	r14
    1520:	df 90       	pop	r13
    1522:	cf 90       	pop	r12
    1524:	bf 90       	pop	r11
    1526:	af 90       	pop	r10
    1528:	08 95       	ret

0000152a <put_fat>:
    152a:	4f 92       	push	r4
    152c:	5f 92       	push	r5
    152e:	6f 92       	push	r6
    1530:	7f 92       	push	r7
    1532:	8f 92       	push	r8
    1534:	9f 92       	push	r9
    1536:	af 92       	push	r10
    1538:	bf 92       	push	r11
    153a:	cf 92       	push	r12
    153c:	df 92       	push	r13
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	ec 01       	movw	r28, r24
    154c:	6a 01       	movw	r12, r20
    154e:	7b 01       	movw	r14, r22
    1550:	28 01       	movw	r4, r16
    1552:	39 01       	movw	r6, r18
    1554:	42 30       	cpi	r20, 0x02	; 2
    1556:	51 05       	cpc	r21, r1
    1558:	61 05       	cpc	r22, r1
    155a:	71 05       	cpc	r23, r1
    155c:	08 f4       	brcc	.+2      	; 0x1560 <put_fat+0x36>
    155e:	d7 c0       	rjmp	.+430    	; 0x170e <put_fat+0x1e4>
    1560:	8e 89       	ldd	r24, Y+22	; 0x16
    1562:	9f 89       	ldd	r25, Y+23	; 0x17
    1564:	a8 8d       	ldd	r26, Y+24	; 0x18
    1566:	b9 8d       	ldd	r27, Y+25	; 0x19
    1568:	48 17       	cp	r20, r24
    156a:	59 07       	cpc	r21, r25
    156c:	6a 07       	cpc	r22, r26
    156e:	7b 07       	cpc	r23, r27
    1570:	08 f0       	brcs	.+2      	; 0x1574 <put_fat+0x4a>
    1572:	cf c0       	rjmp	.+414    	; 0x1712 <put_fat+0x1e8>
    1574:	88 81       	ld	r24, Y
    1576:	82 30       	cpi	r24, 0x02	; 2
    1578:	09 f4       	brne	.+2      	; 0x157c <put_fat+0x52>
    157a:	69 c0       	rjmp	.+210    	; 0x164e <put_fat+0x124>
    157c:	83 30       	cpi	r24, 0x03	; 3
    157e:	09 f4       	brne	.+2      	; 0x1582 <put_fat+0x58>
    1580:	8b c0       	rjmp	.+278    	; 0x1698 <put_fat+0x16e>
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	09 f0       	breq	.+2      	; 0x1588 <put_fat+0x5e>
    1586:	c7 c0       	rjmp	.+398    	; 0x1716 <put_fat+0x1ec>
    1588:	5a 01       	movw	r10, r20
    158a:	b6 94       	lsr	r11
    158c:	a7 94       	ror	r10
    158e:	a4 0e       	add	r10, r20
    1590:	b5 1e       	adc	r11, r21
    1592:	c5 01       	movw	r24, r10
    1594:	89 2f       	mov	r24, r25
    1596:	99 27       	eor	r25, r25
    1598:	86 95       	lsr	r24
    159a:	4a a1       	ldd	r20, Y+34	; 0x22
    159c:	5b a1       	ldd	r21, Y+35	; 0x23
    159e:	6c a1       	ldd	r22, Y+36	; 0x24
    15a0:	7d a1       	ldd	r23, Y+37	; 0x25
    15a2:	48 0f       	add	r20, r24
    15a4:	59 1f       	adc	r21, r25
    15a6:	61 1d       	adc	r22, r1
    15a8:	71 1d       	adc	r23, r1
    15aa:	ce 01       	movw	r24, r28
    15ac:	2e da       	rcall	.-2980   	; 0xa0a <move_window>
    15ae:	81 11       	cpse	r24, r1
    15b0:	b3 c0       	rjmp	.+358    	; 0x1718 <put_fat+0x1ee>
    15b2:	85 01       	movw	r16, r10
    15b4:	0f 5f       	subi	r16, 0xFF	; 255
    15b6:	1f 4f       	sbci	r17, 0xFF	; 255
    15b8:	c5 01       	movw	r24, r10
    15ba:	91 70       	andi	r25, 0x01	; 1
    15bc:	46 01       	movw	r8, r12
    15be:	57 01       	movw	r10, r14
    15c0:	51 e0       	ldi	r21, 0x01	; 1
    15c2:	85 22       	and	r8, r21
    15c4:	99 24       	eor	r9, r9
    15c6:	aa 24       	eor	r10, r10
    15c8:	bb 24       	eor	r11, r11
    15ca:	c0 fe       	sbrs	r12, 0
    15cc:	0b c0       	rjmp	.+22     	; 0x15e4 <put_fat+0xba>
    15ce:	fe 01       	movw	r30, r28
    15d0:	e8 0f       	add	r30, r24
    15d2:	f9 1f       	adc	r31, r25
    15d4:	42 a9       	ldd	r20, Z+50	; 0x32
    15d6:	4f 70       	andi	r20, 0x0F	; 15
    15d8:	50 e1       	ldi	r21, 0x10	; 16
    15da:	45 9e       	mul	r4, r21
    15dc:	90 01       	movw	r18, r0
    15de:	11 24       	eor	r1, r1
    15e0:	24 2b       	or	r18, r20
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <put_fat+0xbc>
    15e4:	24 2d       	mov	r18, r4
    15e6:	fe 01       	movw	r30, r28
    15e8:	e8 0f       	add	r30, r24
    15ea:	f9 1f       	adc	r31, r25
    15ec:	22 ab       	std	Z+50, r18	; 0x32
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	8c 83       	std	Y+4, r24	; 0x04
    15f2:	4a a1       	ldd	r20, Y+34	; 0x22
    15f4:	5b a1       	ldd	r21, Y+35	; 0x23
    15f6:	6c a1       	ldd	r22, Y+36	; 0x24
    15f8:	7d a1       	ldd	r23, Y+37	; 0x25
    15fa:	c8 01       	movw	r24, r16
    15fc:	89 2f       	mov	r24, r25
    15fe:	99 27       	eor	r25, r25
    1600:	86 95       	lsr	r24
    1602:	48 0f       	add	r20, r24
    1604:	59 1f       	adc	r21, r25
    1606:	61 1d       	adc	r22, r1
    1608:	71 1d       	adc	r23, r1
    160a:	ce 01       	movw	r24, r28
    160c:	fe d9       	rcall	.-3076   	; 0xa0a <move_window>
    160e:	81 11       	cpse	r24, r1
    1610:	83 c0       	rjmp	.+262    	; 0x1718 <put_fat+0x1ee>
    1612:	11 70       	andi	r17, 0x01	; 1
    1614:	89 28       	or	r8, r9
    1616:	8a 28       	or	r8, r10
    1618:	8b 28       	or	r8, r11
    161a:	49 f0       	breq	.+18     	; 0x162e <put_fat+0x104>
    161c:	68 94       	set
    161e:	13 f8       	bld	r1, 3
    1620:	76 94       	lsr	r7
    1622:	67 94       	ror	r6
    1624:	57 94       	ror	r5
    1626:	47 94       	ror	r4
    1628:	16 94       	lsr	r1
    162a:	d1 f7       	brne	.-12     	; 0x1620 <put_fat+0xf6>
    162c:	09 c0       	rjmp	.+18     	; 0x1640 <put_fat+0x116>
    162e:	fe 01       	movw	r30, r28
    1630:	e0 0f       	add	r30, r16
    1632:	f1 1f       	adc	r31, r17
    1634:	22 a9       	ldd	r18, Z+50	; 0x32
    1636:	20 7f       	andi	r18, 0xF0	; 240
    1638:	95 2d       	mov	r25, r5
    163a:	9f 70       	andi	r25, 0x0F	; 15
    163c:	42 2e       	mov	r4, r18
    163e:	49 2a       	or	r4, r25
    1640:	fe 01       	movw	r30, r28
    1642:	e0 0f       	add	r30, r16
    1644:	f1 1f       	adc	r31, r17
    1646:	42 aa       	std	Z+50, r4	; 0x32
    1648:	91 e0       	ldi	r25, 0x01	; 1
    164a:	9c 83       	std	Y+4, r25	; 0x04
    164c:	65 c0       	rjmp	.+202    	; 0x1718 <put_fat+0x1ee>
    164e:	45 2f       	mov	r20, r21
    1650:	56 2f       	mov	r21, r22
    1652:	67 2f       	mov	r22, r23
    1654:	77 27       	eor	r23, r23
    1656:	8a a1       	ldd	r24, Y+34	; 0x22
    1658:	9b a1       	ldd	r25, Y+35	; 0x23
    165a:	ac a1       	ldd	r26, Y+36	; 0x24
    165c:	bd a1       	ldd	r27, Y+37	; 0x25
    165e:	48 0f       	add	r20, r24
    1660:	59 1f       	adc	r21, r25
    1662:	6a 1f       	adc	r22, r26
    1664:	7b 1f       	adc	r23, r27
    1666:	ce 01       	movw	r24, r28
    1668:	d0 d9       	rcall	.-3168   	; 0xa0a <move_window>
    166a:	81 11       	cpse	r24, r1
    166c:	55 c0       	rjmp	.+170    	; 0x1718 <put_fat+0x1ee>
    166e:	cc 0c       	add	r12, r12
    1670:	dd 1c       	adc	r13, r13
    1672:	ee 1c       	adc	r14, r14
    1674:	ff 1c       	adc	r15, r15
    1676:	e8 94       	clt
    1678:	c0 f8       	bld	r12, 0
    167a:	91 e0       	ldi	r25, 0x01	; 1
    167c:	d9 22       	and	r13, r25
    167e:	ee 24       	eor	r14, r14
    1680:	ff 24       	eor	r15, r15
    1682:	22 e3       	ldi	r18, 0x32	; 50
    1684:	c2 0e       	add	r12, r18
    1686:	d1 1c       	adc	r13, r1
    1688:	fe 01       	movw	r30, r28
    168a:	ec 0d       	add	r30, r12
    168c:	fd 1d       	adc	r31, r13
    168e:	40 82       	st	Z, r4
    1690:	51 82       	std	Z+1, r5	; 0x01
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	9c 83       	std	Y+4, r25	; 0x04
    1696:	40 c0       	rjmp	.+128    	; 0x1718 <put_fat+0x1ee>
    1698:	8a a1       	ldd	r24, Y+34	; 0x22
    169a:	9b a1       	ldd	r25, Y+35	; 0x23
    169c:	ac a1       	ldd	r26, Y+36	; 0x24
    169e:	bd a1       	ldd	r27, Y+37	; 0x25
    16a0:	68 94       	set
    16a2:	16 f8       	bld	r1, 6
    16a4:	76 95       	lsr	r23
    16a6:	67 95       	ror	r22
    16a8:	57 95       	ror	r21
    16aa:	47 95       	ror	r20
    16ac:	16 94       	lsr	r1
    16ae:	d1 f7       	brne	.-12     	; 0x16a4 <put_fat+0x17a>
    16b0:	48 0f       	add	r20, r24
    16b2:	59 1f       	adc	r21, r25
    16b4:	6a 1f       	adc	r22, r26
    16b6:	7b 1f       	adc	r23, r27
    16b8:	ce 01       	movw	r24, r28
    16ba:	a7 d9       	rcall	.-3250   	; 0xa0a <move_window>
    16bc:	81 11       	cpse	r24, r1
    16be:	2c c0       	rjmp	.+88     	; 0x1718 <put_fat+0x1ee>
    16c0:	cc 0c       	add	r12, r12
    16c2:	dd 1c       	adc	r13, r13
    16c4:	ee 1c       	adc	r14, r14
    16c6:	ff 1c       	adc	r15, r15
    16c8:	cc 0c       	add	r12, r12
    16ca:	dd 1c       	adc	r13, r13
    16cc:	ee 1c       	adc	r14, r14
    16ce:	ff 1c       	adc	r15, r15
    16d0:	5c ef       	ldi	r21, 0xFC	; 252
    16d2:	c5 22       	and	r12, r21
    16d4:	51 e0       	ldi	r21, 0x01	; 1
    16d6:	d5 22       	and	r13, r21
    16d8:	ee 24       	eor	r14, r14
    16da:	ff 24       	eor	r15, r15
    16dc:	92 e3       	ldi	r25, 0x32	; 50
    16de:	c9 0e       	add	r12, r25
    16e0:	d1 1c       	adc	r13, r1
    16e2:	fe 01       	movw	r30, r28
    16e4:	ec 0d       	add	r30, r12
    16e6:	fd 1d       	adc	r31, r13
    16e8:	40 81       	ld	r20, Z
    16ea:	51 81       	ldd	r21, Z+1	; 0x01
    16ec:	62 81       	ldd	r22, Z+2	; 0x02
    16ee:	73 81       	ldd	r23, Z+3	; 0x03
    16f0:	44 27       	eor	r20, r20
    16f2:	55 27       	eor	r21, r21
    16f4:	66 27       	eor	r22, r22
    16f6:	70 7f       	andi	r23, 0xF0	; 240
    16f8:	44 2a       	or	r4, r20
    16fa:	55 2a       	or	r5, r21
    16fc:	66 2a       	or	r6, r22
    16fe:	77 2a       	or	r7, r23
    1700:	40 82       	st	Z, r4
    1702:	51 82       	std	Z+1, r5	; 0x01
    1704:	62 82       	std	Z+2, r6	; 0x02
    1706:	73 82       	std	Z+3, r7	; 0x03
    1708:	91 e0       	ldi	r25, 0x01	; 1
    170a:	9c 83       	std	Y+4, r25	; 0x04
    170c:	05 c0       	rjmp	.+10     	; 0x1718 <put_fat+0x1ee>
    170e:	82 e0       	ldi	r24, 0x02	; 2
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <put_fat+0x1ee>
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <put_fat+0x1ee>
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	cf 90       	pop	r12
    1728:	bf 90       	pop	r11
    172a:	af 90       	pop	r10
    172c:	9f 90       	pop	r9
    172e:	8f 90       	pop	r8
    1730:	7f 90       	pop	r7
    1732:	6f 90       	pop	r6
    1734:	5f 90       	pop	r5
    1736:	4f 90       	pop	r4
    1738:	08 95       	ret

0000173a <create_chain>:
    173a:	4f 92       	push	r4
    173c:	5f 92       	push	r5
    173e:	6f 92       	push	r6
    1740:	7f 92       	push	r7
    1742:	8f 92       	push	r8
    1744:	9f 92       	push	r9
    1746:	af 92       	push	r10
    1748:	bf 92       	push	r11
    174a:	cf 92       	push	r12
    174c:	df 92       	push	r13
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	ec 01       	movw	r28, r24
    175c:	2a 01       	movw	r4, r20
    175e:	3b 01       	movw	r6, r22
    1760:	41 15       	cp	r20, r1
    1762:	51 05       	cpc	r21, r1
    1764:	61 05       	cpc	r22, r1
    1766:	71 05       	cpc	r23, r1
    1768:	99 f4       	brne	.+38     	; 0x1790 <create_chain+0x56>
    176a:	8a 84       	ldd	r8, Y+10	; 0x0a
    176c:	9b 84       	ldd	r9, Y+11	; 0x0b
    176e:	ac 84       	ldd	r10, Y+12	; 0x0c
    1770:	bd 84       	ldd	r11, Y+13	; 0x0d
    1772:	81 14       	cp	r8, r1
    1774:	91 04       	cpc	r9, r1
    1776:	a1 04       	cpc	r10, r1
    1778:	b1 04       	cpc	r11, r1
    177a:	29 f1       	breq	.+74     	; 0x17c6 <create_chain+0x8c>
    177c:	8e 89       	ldd	r24, Y+22	; 0x16
    177e:	9f 89       	ldd	r25, Y+23	; 0x17
    1780:	a8 8d       	ldd	r26, Y+24	; 0x18
    1782:	b9 8d       	ldd	r27, Y+25	; 0x19
    1784:	88 16       	cp	r8, r24
    1786:	99 06       	cpc	r9, r25
    1788:	aa 06       	cpc	r10, r26
    178a:	bb 06       	cpc	r11, r27
    178c:	08 f5       	brcc	.+66     	; 0x17d0 <create_chain+0x96>
    178e:	24 c0       	rjmp	.+72     	; 0x17d8 <create_chain+0x9e>
    1790:	2b dd       	rcall	.-1450   	; 0x11e8 <get_fat>
    1792:	62 30       	cpi	r22, 0x02	; 2
    1794:	71 05       	cpc	r23, r1
    1796:	81 05       	cpc	r24, r1
    1798:	91 05       	cpc	r25, r1
    179a:	08 f4       	brcc	.+2      	; 0x179e <create_chain+0x64>
    179c:	96 c0       	rjmp	.+300    	; 0x18ca <create_chain+0x190>
    179e:	6f 3f       	cpi	r22, 0xFF	; 255
    17a0:	2f ef       	ldi	r18, 0xFF	; 255
    17a2:	72 07       	cpc	r23, r18
    17a4:	82 07       	cpc	r24, r18
    17a6:	92 07       	cpc	r25, r18
    17a8:	09 f4       	brne	.+2      	; 0x17ac <create_chain+0x72>
    17aa:	94 c0       	rjmp	.+296    	; 0x18d4 <create_chain+0x19a>
    17ac:	ce 88       	ldd	r12, Y+22	; 0x16
    17ae:	df 88       	ldd	r13, Y+23	; 0x17
    17b0:	e8 8c       	ldd	r14, Y+24	; 0x18
    17b2:	f9 8c       	ldd	r15, Y+25	; 0x19
    17b4:	6c 15       	cp	r22, r12
    17b6:	7d 05       	cpc	r23, r13
    17b8:	8e 05       	cpc	r24, r14
    17ba:	9f 05       	cpc	r25, r15
    17bc:	08 f4       	brcc	.+2      	; 0x17c0 <create_chain+0x86>
    17be:	8e c0       	rjmp	.+284    	; 0x18dc <create_chain+0x1a2>
    17c0:	53 01       	movw	r10, r6
    17c2:	42 01       	movw	r8, r4
    17c4:	09 c0       	rjmp	.+18     	; 0x17d8 <create_chain+0x9e>
    17c6:	81 2c       	mov	r8, r1
    17c8:	91 2c       	mov	r9, r1
    17ca:	54 01       	movw	r10, r8
    17cc:	83 94       	inc	r8
    17ce:	04 c0       	rjmp	.+8      	; 0x17d8 <create_chain+0x9e>
    17d0:	81 2c       	mov	r8, r1
    17d2:	91 2c       	mov	r9, r1
    17d4:	54 01       	movw	r10, r8
    17d6:	83 94       	inc	r8
    17d8:	75 01       	movw	r14, r10
    17da:	64 01       	movw	r12, r8
    17dc:	8f ef       	ldi	r24, 0xFF	; 255
    17de:	c8 1a       	sub	r12, r24
    17e0:	d8 0a       	sbc	r13, r24
    17e2:	e8 0a       	sbc	r14, r24
    17e4:	f8 0a       	sbc	r15, r24
    17e6:	8e 89       	ldd	r24, Y+22	; 0x16
    17e8:	9f 89       	ldd	r25, Y+23	; 0x17
    17ea:	a8 8d       	ldd	r26, Y+24	; 0x18
    17ec:	b9 8d       	ldd	r27, Y+25	; 0x19
    17ee:	c8 16       	cp	r12, r24
    17f0:	d9 06       	cpc	r13, r25
    17f2:	ea 06       	cpc	r14, r26
    17f4:	fb 06       	cpc	r15, r27
    17f6:	60 f0       	brcs	.+24     	; 0x1810 <create_chain+0xd6>
    17f8:	22 e0       	ldi	r18, 0x02	; 2
    17fa:	82 16       	cp	r8, r18
    17fc:	91 04       	cpc	r9, r1
    17fe:	a1 04       	cpc	r10, r1
    1800:	b1 04       	cpc	r11, r1
    1802:	08 f4       	brcc	.+2      	; 0x1806 <create_chain+0xcc>
    1804:	6f c0       	rjmp	.+222    	; 0x18e4 <create_chain+0x1aa>
    1806:	c1 2c       	mov	r12, r1
    1808:	d1 2c       	mov	r13, r1
    180a:	76 01       	movw	r14, r12
    180c:	68 94       	set
    180e:	c1 f8       	bld	r12, 1
    1810:	b7 01       	movw	r22, r14
    1812:	a6 01       	movw	r20, r12
    1814:	ce 01       	movw	r24, r28
    1816:	e8 dc       	rcall	.-1584   	; 0x11e8 <get_fat>
    1818:	61 15       	cp	r22, r1
    181a:	71 05       	cpc	r23, r1
    181c:	81 05       	cpc	r24, r1
    181e:	91 05       	cpc	r25, r1
    1820:	99 f0       	breq	.+38     	; 0x1848 <create_chain+0x10e>
    1822:	6f 3f       	cpi	r22, 0xFF	; 255
    1824:	2f ef       	ldi	r18, 0xFF	; 255
    1826:	72 07       	cpc	r23, r18
    1828:	82 07       	cpc	r24, r18
    182a:	92 07       	cpc	r25, r18
    182c:	09 f4       	brne	.+2      	; 0x1830 <create_chain+0xf6>
    182e:	5f c0       	rjmp	.+190    	; 0x18ee <create_chain+0x1b4>
    1830:	61 30       	cpi	r22, 0x01	; 1
    1832:	71 05       	cpc	r23, r1
    1834:	81 05       	cpc	r24, r1
    1836:	91 05       	cpc	r25, r1
    1838:	09 f4       	brne	.+2      	; 0x183c <create_chain+0x102>
    183a:	5d c0       	rjmp	.+186    	; 0x18f6 <create_chain+0x1bc>
    183c:	c8 14       	cp	r12, r8
    183e:	d9 04       	cpc	r13, r9
    1840:	ea 04       	cpc	r14, r10
    1842:	fb 04       	cpc	r15, r11
    1844:	59 f6       	brne	.-106    	; 0x17dc <create_chain+0xa2>
    1846:	5b c0       	rjmp	.+182    	; 0x18fe <create_chain+0x1c4>
    1848:	8c 2c       	mov	r8, r12
    184a:	9d 2c       	mov	r9, r13
    184c:	ae 2c       	mov	r10, r14
    184e:	bf 2c       	mov	r11, r15
    1850:	0f ef       	ldi	r16, 0xFF	; 255
    1852:	1f ef       	ldi	r17, 0xFF	; 255
    1854:	2f ef       	ldi	r18, 0xFF	; 255
    1856:	3f e0       	ldi	r19, 0x0F	; 15
    1858:	b7 01       	movw	r22, r14
    185a:	a6 01       	movw	r20, r12
    185c:	ce 01       	movw	r24, r28
    185e:	65 de       	rcall	.-822    	; 0x152a <put_fat>
    1860:	81 11       	cpse	r24, r1
    1862:	2c c0       	rjmp	.+88     	; 0x18bc <create_chain+0x182>
    1864:	41 14       	cp	r4, r1
    1866:	51 04       	cpc	r5, r1
    1868:	61 04       	cpc	r6, r1
    186a:	71 04       	cpc	r7, r1
    186c:	51 f0       	breq	.+20     	; 0x1882 <create_chain+0x148>
    186e:	0c 2d       	mov	r16, r12
    1870:	1d 2d       	mov	r17, r13
    1872:	2e 2d       	mov	r18, r14
    1874:	3f 2d       	mov	r19, r15
    1876:	b3 01       	movw	r22, r6
    1878:	a2 01       	movw	r20, r4
    187a:	ce 01       	movw	r24, r28
    187c:	56 de       	rcall	.-852    	; 0x152a <put_fat>
    187e:	81 11       	cpse	r24, r1
    1880:	1d c0       	rjmp	.+58     	; 0x18bc <create_chain+0x182>
    1882:	8a 86       	std	Y+10, r8	; 0x0a
    1884:	9b 86       	std	Y+11, r9	; 0x0b
    1886:	ac 86       	std	Y+12, r10	; 0x0c
    1888:	bd 86       	std	Y+13, r11	; 0x0d
    188a:	8e 85       	ldd	r24, Y+14	; 0x0e
    188c:	9f 85       	ldd	r25, Y+15	; 0x0f
    188e:	a8 89       	ldd	r26, Y+16	; 0x10
    1890:	b9 89       	ldd	r27, Y+17	; 0x11
    1892:	8f 3f       	cpi	r24, 0xFF	; 255
    1894:	2f ef       	ldi	r18, 0xFF	; 255
    1896:	92 07       	cpc	r25, r18
    1898:	a2 07       	cpc	r26, r18
    189a:	b2 07       	cpc	r27, r18
    189c:	a9 f1       	breq	.+106    	; 0x1908 <create_chain+0x1ce>
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	a1 09       	sbc	r26, r1
    18a2:	b1 09       	sbc	r27, r1
    18a4:	8e 87       	std	Y+14, r24	; 0x0e
    18a6:	9f 87       	std	Y+15, r25	; 0x0f
    18a8:	a8 8b       	std	Y+16, r26	; 0x10
    18aa:	b9 8b       	std	Y+17, r27	; 0x11
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	81 60       	ori	r24, 0x01	; 1
    18b0:	8d 83       	std	Y+5, r24	; 0x05
    18b2:	4c 2d       	mov	r20, r12
    18b4:	3d 2d       	mov	r19, r13
    18b6:	2e 2d       	mov	r18, r14
    18b8:	9f 2d       	mov	r25, r15
    18ba:	2f c0       	rjmp	.+94     	; 0x191a <create_chain+0x1e0>
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	49 f5       	brne	.+82     	; 0x1912 <create_chain+0x1d8>
    18c0:	4f ef       	ldi	r20, 0xFF	; 255
    18c2:	3f ef       	ldi	r19, 0xFF	; 255
    18c4:	2f ef       	ldi	r18, 0xFF	; 255
    18c6:	9f ef       	ldi	r25, 0xFF	; 255
    18c8:	28 c0       	rjmp	.+80     	; 0x191a <create_chain+0x1e0>
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	23 c0       	rjmp	.+70     	; 0x191a <create_chain+0x1e0>
    18d4:	46 2f       	mov	r20, r22
    18d6:	37 2f       	mov	r19, r23
    18d8:	28 2f       	mov	r18, r24
    18da:	1f c0       	rjmp	.+62     	; 0x191a <create_chain+0x1e0>
    18dc:	46 2f       	mov	r20, r22
    18de:	37 2f       	mov	r19, r23
    18e0:	28 2f       	mov	r18, r24
    18e2:	1b c0       	rjmp	.+54     	; 0x191a <create_chain+0x1e0>
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	16 c0       	rjmp	.+44     	; 0x191a <create_chain+0x1e0>
    18ee:	46 2f       	mov	r20, r22
    18f0:	37 2f       	mov	r19, r23
    18f2:	28 2f       	mov	r18, r24
    18f4:	12 c0       	rjmp	.+36     	; 0x191a <create_chain+0x1e0>
    18f6:	46 2f       	mov	r20, r22
    18f8:	37 2f       	mov	r19, r23
    18fa:	28 2f       	mov	r18, r24
    18fc:	0e c0       	rjmp	.+28     	; 0x191a <create_chain+0x1e0>
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	09 c0       	rjmp	.+18     	; 0x191a <create_chain+0x1e0>
    1908:	4c 2d       	mov	r20, r12
    190a:	3d 2d       	mov	r19, r13
    190c:	2e 2d       	mov	r18, r14
    190e:	9f 2d       	mov	r25, r15
    1910:	04 c0       	rjmp	.+8      	; 0x191a <create_chain+0x1e0>
    1912:	41 e0       	ldi	r20, 0x01	; 1
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	64 2f       	mov	r22, r20
    191c:	73 2f       	mov	r23, r19
    191e:	82 2f       	mov	r24, r18
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	ff 90       	pop	r15
    192a:	ef 90       	pop	r14
    192c:	df 90       	pop	r13
    192e:	cf 90       	pop	r12
    1930:	bf 90       	pop	r11
    1932:	af 90       	pop	r10
    1934:	9f 90       	pop	r9
    1936:	8f 90       	pop	r8
    1938:	7f 90       	pop	r7
    193a:	6f 90       	pop	r6
    193c:	5f 90       	pop	r5
    193e:	4f 90       	pop	r4
    1940:	08 95       	ret

00001942 <dir_next>:
    1942:	7f 92       	push	r7
    1944:	8f 92       	push	r8
    1946:	9f 92       	push	r9
    1948:	af 92       	push	r10
    194a:	bf 92       	push	r11
    194c:	cf 92       	push	r12
    194e:	df 92       	push	r13
    1950:	ef 92       	push	r14
    1952:	ff 92       	push	r15
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	ec 01       	movw	r28, r24
    195e:	7b 01       	movw	r14, r22
    1960:	0c 81       	ldd	r16, Y+4	; 0x04
    1962:	1d 81       	ldd	r17, Y+5	; 0x05
    1964:	0f 5f       	subi	r16, 0xFF	; 255
    1966:	1f 4f       	sbci	r17, 0xFF	; 255
    1968:	01 15       	cp	r16, r1
    196a:	11 05       	cpc	r17, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <dir_next+0x2e>
    196e:	e4 c0       	rjmp	.+456    	; 0x1b38 <dir_next+0x1f6>
    1970:	8e 85       	ldd	r24, Y+14	; 0x0e
    1972:	9f 85       	ldd	r25, Y+15	; 0x0f
    1974:	a8 89       	ldd	r26, Y+16	; 0x10
    1976:	b9 89       	ldd	r27, Y+17	; 0x11
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	a1 05       	cpc	r26, r1
    197c:	b1 05       	cpc	r27, r1
    197e:	09 f4       	brne	.+2      	; 0x1982 <dir_next+0x40>
    1980:	dd c0       	rjmp	.+442    	; 0x1b3c <dir_next+0x1fa>
    1982:	68 01       	movw	r12, r16
    1984:	2f e0       	ldi	r18, 0x0F	; 15
    1986:	c2 22       	and	r12, r18
    1988:	dd 24       	eor	r13, r13
    198a:	c1 14       	cp	r12, r1
    198c:	d1 04       	cpc	r13, r1
    198e:	09 f0       	breq	.+2      	; 0x1992 <dir_next+0x50>
    1990:	bc c0       	rjmp	.+376    	; 0x1b0a <dir_next+0x1c8>
    1992:	01 96       	adiw	r24, 0x01	; 1
    1994:	a1 1d       	adc	r26, r1
    1996:	b1 1d       	adc	r27, r1
    1998:	8e 87       	std	Y+14, r24	; 0x0e
    199a:	9f 87       	std	Y+15, r25	; 0x0f
    199c:	a8 8b       	std	Y+16, r26	; 0x10
    199e:	b9 8b       	std	Y+17, r27	; 0x11
    19a0:	4a 85       	ldd	r20, Y+10	; 0x0a
    19a2:	5b 85       	ldd	r21, Y+11	; 0x0b
    19a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    19a6:	7d 85       	ldd	r23, Y+13	; 0x0d
    19a8:	41 15       	cp	r20, r1
    19aa:	51 05       	cpc	r21, r1
    19ac:	61 05       	cpc	r22, r1
    19ae:	71 05       	cpc	r23, r1
    19b0:	49 f4       	brne	.+18     	; 0x19c4 <dir_next+0x82>
    19b2:	e8 81       	ld	r30, Y
    19b4:	f9 81       	ldd	r31, Y+1	; 0x01
    19b6:	80 85       	ldd	r24, Z+8	; 0x08
    19b8:	91 85       	ldd	r25, Z+9	; 0x09
    19ba:	08 17       	cp	r16, r24
    19bc:	19 07       	cpc	r17, r25
    19be:	08 f0       	brcs	.+2      	; 0x19c2 <dir_next+0x80>
    19c0:	bf c0       	rjmp	.+382    	; 0x1b40 <dir_next+0x1fe>
    19c2:	a3 c0       	rjmp	.+326    	; 0x1b0a <dir_next+0x1c8>
    19c4:	e8 81       	ld	r30, Y
    19c6:	f9 81       	ldd	r31, Y+1	; 0x01
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	98 01       	movw	r18, r16
    19d0:	32 95       	swap	r19
    19d2:	22 95       	swap	r18
    19d4:	2f 70       	andi	r18, 0x0F	; 15
    19d6:	23 27       	eor	r18, r19
    19d8:	3f 70       	andi	r19, 0x0F	; 15
    19da:	23 27       	eor	r18, r19
    19dc:	82 23       	and	r24, r18
    19de:	93 23       	and	r25, r19
    19e0:	89 2b       	or	r24, r25
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <dir_next+0xa4>
    19e4:	92 c0       	rjmp	.+292    	; 0x1b0a <dir_next+0x1c8>
    19e6:	cf 01       	movw	r24, r30
    19e8:	ff db       	rcall	.-2050   	; 0x11e8 <get_fat>
    19ea:	4b 01       	movw	r8, r22
    19ec:	5c 01       	movw	r10, r24
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	88 16       	cp	r8, r24
    19f2:	91 04       	cpc	r9, r1
    19f4:	a1 04       	cpc	r10, r1
    19f6:	b1 04       	cpc	r11, r1
    19f8:	08 f4       	brcc	.+2      	; 0x19fc <dir_next+0xba>
    19fa:	a4 c0       	rjmp	.+328    	; 0x1b44 <dir_next+0x202>
    19fc:	ef ef       	ldi	r30, 0xFF	; 255
    19fe:	8e 16       	cp	r8, r30
    1a00:	9e 06       	cpc	r9, r30
    1a02:	ae 06       	cpc	r10, r30
    1a04:	be 06       	cpc	r11, r30
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <dir_next+0xc8>
    1a08:	9f c0       	rjmp	.+318    	; 0x1b48 <dir_next+0x206>
    1a0a:	e8 81       	ld	r30, Y
    1a0c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a0e:	86 89       	ldd	r24, Z+22	; 0x16
    1a10:	97 89       	ldd	r25, Z+23	; 0x17
    1a12:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a14:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a16:	88 16       	cp	r8, r24
    1a18:	99 06       	cpc	r9, r25
    1a1a:	aa 06       	cpc	r10, r26
    1a1c:	bb 06       	cpc	r11, r27
    1a1e:	08 f4       	brcc	.+2      	; 0x1a22 <dir_next+0xe0>
    1a20:	67 c0       	rjmp	.+206    	; 0x1af0 <dir_next+0x1ae>
    1a22:	ef 28       	or	r14, r15
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <dir_next+0xe6>
    1a26:	92 c0       	rjmp	.+292    	; 0x1b4c <dir_next+0x20a>
    1a28:	4a 85       	ldd	r20, Y+10	; 0x0a
    1a2a:	5b 85       	ldd	r21, Y+11	; 0x0b
    1a2c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a2e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a30:	cf 01       	movw	r24, r30
    1a32:	83 de       	rcall	.-762    	; 0x173a <create_chain>
    1a34:	4b 01       	movw	r8, r22
    1a36:	5c 01       	movw	r10, r24
    1a38:	61 15       	cp	r22, r1
    1a3a:	71 05       	cpc	r23, r1
    1a3c:	81 05       	cpc	r24, r1
    1a3e:	91 05       	cpc	r25, r1
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <dir_next+0x102>
    1a42:	86 c0       	rjmp	.+268    	; 0x1b50 <dir_next+0x20e>
    1a44:	61 30       	cpi	r22, 0x01	; 1
    1a46:	71 05       	cpc	r23, r1
    1a48:	81 05       	cpc	r24, r1
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <dir_next+0x10e>
    1a4e:	82 c0       	rjmp	.+260    	; 0x1b54 <dir_next+0x212>
    1a50:	6f 3f       	cpi	r22, 0xFF	; 255
    1a52:	2f ef       	ldi	r18, 0xFF	; 255
    1a54:	72 07       	cpc	r23, r18
    1a56:	82 07       	cpc	r24, r18
    1a58:	92 07       	cpc	r25, r18
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <dir_next+0x11c>
    1a5c:	7d c0       	rjmp	.+250    	; 0x1b58 <dir_next+0x216>
    1a5e:	88 81       	ld	r24, Y
    1a60:	99 81       	ldd	r25, Y+1	; 0x01
    1a62:	0e 94 9a 04 	call	0x934	; 0x934 <sync_window>
    1a66:	81 11       	cpse	r24, r1
    1a68:	79 c0       	rjmp	.+242    	; 0x1b5c <dir_next+0x21a>
    1a6a:	88 81       	ld	r24, Y
    1a6c:	99 81       	ldd	r25, Y+1	; 0x01
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	52 e0       	ldi	r21, 0x02	; 2
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	c2 96       	adiw	r24, 0x32	; 50
    1a78:	0e 94 3c 04 	call	0x878	; 0x878 <mem_set>
    1a7c:	e8 80       	ld	r14, Y
    1a7e:	f9 80       	ldd	r15, Y+1	; 0x01
    1a80:	b5 01       	movw	r22, r10
    1a82:	a4 01       	movw	r20, r8
    1a84:	c7 01       	movw	r24, r14
    1a86:	82 db       	rcall	.-2300   	; 0x118c <clust2sect>
    1a88:	f7 01       	movw	r30, r14
    1a8a:	66 a7       	std	Z+46, r22	; 0x2e
    1a8c:	77 a7       	std	Z+47, r23	; 0x2f
    1a8e:	80 ab       	std	Z+48, r24	; 0x30
    1a90:	91 ab       	std	Z+49, r25	; 0x31
    1a92:	e1 2c       	mov	r14, r1
    1a94:	f1 2c       	mov	r15, r1
    1a96:	77 24       	eor	r7, r7
    1a98:	73 94       	inc	r7
    1a9a:	17 c0       	rjmp	.+46     	; 0x1aca <dir_next+0x188>
    1a9c:	74 82       	std	Z+4, r7	; 0x04
    1a9e:	88 81       	ld	r24, Y
    1aa0:	99 81       	ldd	r25, Y+1	; 0x01
    1aa2:	0e 94 9a 04 	call	0x934	; 0x934 <sync_window>
    1aa6:	81 11       	cpse	r24, r1
    1aa8:	5b c0       	rjmp	.+182    	; 0x1b60 <dir_next+0x21e>
    1aaa:	e8 81       	ld	r30, Y
    1aac:	f9 81       	ldd	r31, Y+1	; 0x01
    1aae:	86 a5       	ldd	r24, Z+46	; 0x2e
    1ab0:	97 a5       	ldd	r25, Z+47	; 0x2f
    1ab2:	a0 a9       	ldd	r26, Z+48	; 0x30
    1ab4:	b1 a9       	ldd	r27, Z+49	; 0x31
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	a1 1d       	adc	r26, r1
    1aba:	b1 1d       	adc	r27, r1
    1abc:	86 a7       	std	Z+46, r24	; 0x2e
    1abe:	97 a7       	std	Z+47, r25	; 0x2f
    1ac0:	a0 ab       	std	Z+48, r26	; 0x30
    1ac2:	b1 ab       	std	Z+49, r27	; 0x31
    1ac4:	ff ef       	ldi	r31, 0xFF	; 255
    1ac6:	ef 1a       	sub	r14, r31
    1ac8:	ff 0a       	sbc	r15, r31
    1aca:	e8 81       	ld	r30, Y
    1acc:	f9 81       	ldd	r31, Y+1	; 0x01
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	e8 16       	cp	r14, r24
    1ad4:	f9 06       	cpc	r15, r25
    1ad6:	10 f3       	brcs	.-60     	; 0x1a9c <dir_next+0x15a>
    1ad8:	86 a5       	ldd	r24, Z+46	; 0x2e
    1ada:	97 a5       	ldd	r25, Z+47	; 0x2f
    1adc:	a0 a9       	ldd	r26, Z+48	; 0x30
    1ade:	b1 a9       	ldd	r27, Z+49	; 0x31
    1ae0:	8e 19       	sub	r24, r14
    1ae2:	9f 09       	sbc	r25, r15
    1ae4:	a1 09       	sbc	r26, r1
    1ae6:	b1 09       	sbc	r27, r1
    1ae8:	86 a7       	std	Z+46, r24	; 0x2e
    1aea:	97 a7       	std	Z+47, r25	; 0x2f
    1aec:	a0 ab       	std	Z+48, r26	; 0x30
    1aee:	b1 ab       	std	Z+49, r27	; 0x31
    1af0:	8a 86       	std	Y+10, r8	; 0x0a
    1af2:	9b 86       	std	Y+11, r9	; 0x0b
    1af4:	ac 86       	std	Y+12, r10	; 0x0c
    1af6:	bd 86       	std	Y+13, r11	; 0x0d
    1af8:	b5 01       	movw	r22, r10
    1afa:	a4 01       	movw	r20, r8
    1afc:	88 81       	ld	r24, Y
    1afe:	99 81       	ldd	r25, Y+1	; 0x01
    1b00:	45 db       	rcall	.-2422   	; 0x118c <clust2sect>
    1b02:	6e 87       	std	Y+14, r22	; 0x0e
    1b04:	7f 87       	std	Y+15, r23	; 0x0f
    1b06:	88 8b       	std	Y+16, r24	; 0x10
    1b08:	99 8b       	std	Y+17, r25	; 0x11
    1b0a:	0c 83       	std	Y+4, r16	; 0x04
    1b0c:	1d 83       	std	Y+5, r17	; 0x05
    1b0e:	cc 0c       	add	r12, r12
    1b10:	dd 1c       	adc	r13, r13
    1b12:	cc 0c       	add	r12, r12
    1b14:	dd 1c       	adc	r13, r13
    1b16:	cc 0c       	add	r12, r12
    1b18:	dd 1c       	adc	r13, r13
    1b1a:	cc 0c       	add	r12, r12
    1b1c:	dd 1c       	adc	r13, r13
    1b1e:	cc 0c       	add	r12, r12
    1b20:	dd 1c       	adc	r13, r13
    1b22:	22 e3       	ldi	r18, 0x32	; 50
    1b24:	c2 0e       	add	r12, r18
    1b26:	d1 1c       	adc	r13, r1
    1b28:	88 81       	ld	r24, Y
    1b2a:	99 81       	ldd	r25, Y+1	; 0x01
    1b2c:	c8 0e       	add	r12, r24
    1b2e:	d9 1e       	adc	r13, r25
    1b30:	ca 8a       	std	Y+18, r12	; 0x12
    1b32:	db 8a       	std	Y+19, r13	; 0x13
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	15 c0       	rjmp	.+42     	; 0x1b62 <dir_next+0x220>
    1b38:	84 e0       	ldi	r24, 0x04	; 4
    1b3a:	13 c0       	rjmp	.+38     	; 0x1b62 <dir_next+0x220>
    1b3c:	84 e0       	ldi	r24, 0x04	; 4
    1b3e:	11 c0       	rjmp	.+34     	; 0x1b62 <dir_next+0x220>
    1b40:	84 e0       	ldi	r24, 0x04	; 4
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <dir_next+0x220>
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	0d c0       	rjmp	.+26     	; 0x1b62 <dir_next+0x220>
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	0b c0       	rjmp	.+22     	; 0x1b62 <dir_next+0x220>
    1b4c:	84 e0       	ldi	r24, 0x04	; 4
    1b4e:	09 c0       	rjmp	.+18     	; 0x1b62 <dir_next+0x220>
    1b50:	87 e0       	ldi	r24, 0x07	; 7
    1b52:	07 c0       	rjmp	.+14     	; 0x1b62 <dir_next+0x220>
    1b54:	82 e0       	ldi	r24, 0x02	; 2
    1b56:	05 c0       	rjmp	.+10     	; 0x1b62 <dir_next+0x220>
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	03 c0       	rjmp	.+6      	; 0x1b62 <dir_next+0x220>
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	01 c0       	rjmp	.+2      	; 0x1b62 <dir_next+0x220>
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	ff 90       	pop	r15
    1b6c:	ef 90       	pop	r14
    1b6e:	df 90       	pop	r13
    1b70:	cf 90       	pop	r12
    1b72:	bf 90       	pop	r11
    1b74:	af 90       	pop	r10
    1b76:	9f 90       	pop	r9
    1b78:	8f 90       	pop	r8
    1b7a:	7f 90       	pop	r7
    1b7c:	08 95       	ret

00001b7e <follow_path>:
    1b7e:	6f 92       	push	r6
    1b80:	7f 92       	push	r7
    1b82:	8f 92       	push	r8
    1b84:	af 92       	push	r10
    1b86:	bf 92       	push	r11
    1b88:	cf 92       	push	r12
    1b8a:	df 92       	push	r13
    1b8c:	ef 92       	push	r14
    1b8e:	ff 92       	push	r15
    1b90:	0f 93       	push	r16
    1b92:	1f 93       	push	r17
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	ec 01       	movw	r28, r24
    1b9a:	8b 01       	movw	r16, r22
    1b9c:	fb 01       	movw	r30, r22
    1b9e:	80 81       	ld	r24, Z
    1ba0:	8f 32       	cpi	r24, 0x2F	; 47
    1ba2:	11 f0       	breq	.+4      	; 0x1ba8 <follow_path+0x2a>
    1ba4:	8c 35       	cpi	r24, 0x5C	; 92
    1ba6:	39 f4       	brne	.+14     	; 0x1bb6 <follow_path+0x38>
    1ba8:	0f 5f       	subi	r16, 0xFF	; 255
    1baa:	1f 4f       	sbci	r17, 0xFF	; 255
    1bac:	1e 82       	std	Y+6, r1	; 0x06
    1bae:	1f 82       	std	Y+7, r1	; 0x07
    1bb0:	18 86       	std	Y+8, r1	; 0x08
    1bb2:	19 86       	std	Y+9, r1	; 0x09
    1bb4:	0a c0       	rjmp	.+20     	; 0x1bca <follow_path+0x4c>
    1bb6:	e8 81       	ld	r30, Y
    1bb8:	f9 81       	ldd	r31, Y+1	; 0x01
    1bba:	82 89       	ldd	r24, Z+18	; 0x12
    1bbc:	93 89       	ldd	r25, Z+19	; 0x13
    1bbe:	a4 89       	ldd	r26, Z+20	; 0x14
    1bc0:	b5 89       	ldd	r27, Z+21	; 0x15
    1bc2:	8e 83       	std	Y+6, r24	; 0x06
    1bc4:	9f 83       	std	Y+7, r25	; 0x07
    1bc6:	a8 87       	std	Y+8, r26	; 0x08
    1bc8:	b9 87       	std	Y+9, r27	; 0x09
    1bca:	f8 01       	movw	r30, r16
    1bcc:	80 81       	ld	r24, Z
    1bce:	80 32       	cpi	r24, 0x20	; 32
    1bd0:	78 f0       	brcs	.+30     	; 0x1bf0 <follow_path+0x72>
    1bd2:	0f 2e       	mov	r0, r31
    1bd4:	fe e2       	ldi	r31, 0x2E	; 46
    1bd6:	df 2e       	mov	r13, r31
    1bd8:	f0 2d       	mov	r31, r0
    1bda:	0f 2e       	mov	r0, r31
    1bdc:	f5 e0       	ldi	r31, 0x05	; 5
    1bde:	8f 2e       	mov	r8, r31
    1be0:	f0 2d       	mov	r31, r0
    1be2:	0f 2e       	mov	r0, r31
    1be4:	f4 e1       	ldi	r31, 0x14	; 20
    1be6:	af 2e       	mov	r10, r31
    1be8:	f0 e2       	ldi	r31, 0x20	; 32
    1bea:	bf 2e       	mov	r11, r31
    1bec:	f0 2d       	mov	r31, r0
    1bee:	07 c0       	rjmp	.+14     	; 0x1bfe <follow_path+0x80>
    1bf0:	60 e0       	ldi	r22, 0x00	; 0
    1bf2:	70 e0       	ldi	r23, 0x00	; 0
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	de db       	rcall	.-2116   	; 0x13b4 <dir_sdi>
    1bf8:	1a 8a       	std	Y+18, r1	; 0x12
    1bfa:	1b 8a       	std	Y+19, r1	; 0x13
    1bfc:	4c c1       	rjmp	.+664    	; 0x1e96 <follow_path+0x318>
    1bfe:	f8 01       	movw	r30, r16
    1c00:	8f 01       	movw	r16, r30
    1c02:	81 91       	ld	r24, Z+
    1c04:	8f 32       	cpi	r24, 0x2F	; 47
    1c06:	e1 f3       	breq	.-8      	; 0x1c00 <follow_path+0x82>
    1c08:	8c 35       	cpi	r24, 0x5C	; 92
    1c0a:	d1 f3       	breq	.-12     	; 0x1c00 <follow_path+0x82>
    1c0c:	ec 88       	ldd	r14, Y+20	; 0x14
    1c0e:	fd 88       	ldd	r15, Y+21	; 0x15
    1c10:	4b e0       	ldi	r20, 0x0B	; 11
    1c12:	50 e0       	ldi	r21, 0x00	; 0
    1c14:	60 e2       	ldi	r22, 0x20	; 32
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	c7 01       	movw	r24, r14
    1c1a:	0e 94 3c 04 	call	0x878	; 0x878 <mem_set>
    1c1e:	f8 01       	movw	r30, r16
    1c20:	80 81       	ld	r24, Z
    1c22:	8e 32       	cpi	r24, 0x2E	; 46
    1c24:	41 f0       	breq	.+16     	; 0x1c36 <follow_path+0xb8>
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	88 e0       	ldi	r24, 0x08	; 8
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	c1 2c       	mov	r12, r1
    1c34:	1f c0       	rjmp	.+62     	; 0x1c74 <follow_path+0xf6>
    1c36:	f7 01       	movw	r30, r14
    1c38:	d0 82       	st	Z, r13
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	21 81       	ldd	r18, Z+1	; 0x01
    1c3e:	2e 32       	cpi	r18, 0x2E	; 46
    1c40:	51 f4       	brne	.+20     	; 0x1c56 <follow_path+0xd8>
    1c42:	f7 01       	movw	r30, r14
    1c44:	d1 82       	std	Z+1, r13	; 0x01
    1c46:	f8 01       	movw	r30, r16
    1c48:	22 81       	ldd	r18, Z+2	; 0x02
    1c4a:	2e 32       	cpi	r18, 0x2E	; 46
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <follow_path+0xd2>
    1c4e:	0b c1       	rjmp	.+534    	; 0x1e66 <follow_path+0x2e8>
    1c50:	83 e0       	ldi	r24, 0x03	; 3
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <follow_path+0xdc>
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	2f 32       	cpi	r18, 0x2F	; 47
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <follow_path+0xe2>
    1c5e:	e7 c0       	rjmp	.+462    	; 0x1e2e <follow_path+0x2b0>
    1c60:	2c 35       	cpi	r18, 0x5C	; 92
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <follow_path+0xe8>
    1c64:	e4 c0       	rjmp	.+456    	; 0x1e2e <follow_path+0x2b0>
    1c66:	21 32       	cpi	r18, 0x21	; 33
    1c68:	08 f0       	brcs	.+2      	; 0x1c6c <follow_path+0xee>
    1c6a:	fd c0       	rjmp	.+506    	; 0x1e66 <follow_path+0x2e8>
    1c6c:	e4 c0       	rjmp	.+456    	; 0x1e36 <follow_path+0x2b8>
    1c6e:	f7 01       	movw	r30, r14
    1c70:	83 87       	std	Z+11, r24	; 0x0b
    1c72:	fb c0       	rjmp	.+502    	; 0x1e6a <follow_path+0x2ec>
    1c74:	ab 01       	movw	r20, r22
    1c76:	4f 5f       	subi	r20, 0xFF	; 255
    1c78:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	e6 0f       	add	r30, r22
    1c7e:	f7 1f       	adc	r31, r23
    1c80:	b0 81       	ld	r27, Z
    1c82:	b1 32       	cpi	r27, 0x21	; 33
    1c84:	08 f4       	brcc	.+2      	; 0x1c88 <follow_path+0x10a>
    1c86:	ea c0       	rjmp	.+468    	; 0x1e5c <follow_path+0x2de>
    1c88:	bf 32       	cpi	r27, 0x2F	; 47
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <follow_path+0x110>
    1c8c:	e2 c0       	rjmp	.+452    	; 0x1e52 <follow_path+0x2d4>
    1c8e:	bc 35       	cpi	r27, 0x5C	; 92
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <follow_path+0x116>
    1c92:	df c0       	rjmp	.+446    	; 0x1e52 <follow_path+0x2d4>
    1c94:	be 32       	cpi	r27, 0x2E	; 46
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <follow_path+0x11c>
    1c98:	d2 c0       	rjmp	.+420    	; 0x1e3e <follow_path+0x2c0>
    1c9a:	28 17       	cp	r18, r24
    1c9c:	39 07       	cpc	r19, r25
    1c9e:	08 f0       	brcs	.+2      	; 0x1ca2 <follow_path+0x124>
    1ca0:	be c0       	rjmp	.+380    	; 0x1e1e <follow_path+0x2a0>
    1ca2:	08 c0       	rjmp	.+16     	; 0x1cb4 <follow_path+0x136>
    1ca4:	cc 0c       	add	r12, r12
    1ca6:	cc 0c       	add	r12, r12
    1ca8:	ba 01       	movw	r22, r20
    1caa:	28 e0       	ldi	r18, 0x08	; 8
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	8b e0       	ldi	r24, 0x0B	; 11
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	e0 cf       	rjmp	.-64     	; 0x1c74 <follow_path+0xf6>
    1cb4:	bb 23       	and	r27, r27
    1cb6:	1c f4       	brge	.+6      	; 0x1cbe <follow_path+0x140>
    1cb8:	fc 2d       	mov	r31, r12
    1cba:	f3 60       	ori	r31, 0x03	; 3
    1cbc:	cf 2e       	mov	r12, r31
    1cbe:	ef e7       	ldi	r30, 0x7F	; 127
    1cc0:	eb 0f       	add	r30, r27
    1cc2:	ef 31       	cpi	r30, 0x1F	; 31
    1cc4:	20 f0       	brcs	.+8      	; 0x1cce <follow_path+0x150>
    1cc6:	e0 e2       	ldi	r30, 0x20	; 32
    1cc8:	eb 0f       	add	r30, r27
    1cca:	ed 31       	cpi	r30, 0x1D	; 29
    1ccc:	10 f5       	brcc	.+68     	; 0x1d12 <follow_path+0x194>
    1cce:	6e 5f       	subi	r22, 0xFE	; 254
    1cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	e4 0f       	add	r30, r20
    1cd6:	f5 1f       	adc	r31, r21
    1cd8:	a0 81       	ld	r26, Z
    1cda:	40 ec       	ldi	r20, 0xC0	; 192
    1cdc:	4a 0f       	add	r20, r26
    1cde:	4f 33       	cpi	r20, 0x3F	; 63
    1ce0:	28 f0       	brcs	.+10     	; 0x1cec <follow_path+0x16e>
    1ce2:	40 e8       	ldi	r20, 0x80	; 128
    1ce4:	4a 0f       	add	r20, r26
    1ce6:	4d 37       	cpi	r20, 0x7D	; 125
    1ce8:	08 f0       	brcs	.+2      	; 0x1cec <follow_path+0x16e>
    1cea:	bd c0       	rjmp	.+378    	; 0x1e66 <follow_path+0x2e8>
    1cec:	ac 01       	movw	r20, r24
    1cee:	41 50       	subi	r20, 0x01	; 1
    1cf0:	51 09       	sbc	r21, r1
    1cf2:	24 17       	cp	r18, r20
    1cf4:	35 07       	cpc	r19, r21
    1cf6:	08 f0       	brcs	.+2      	; 0x1cfa <follow_path+0x17c>
    1cf8:	b6 c0       	rjmp	.+364    	; 0x1e66 <follow_path+0x2e8>
    1cfa:	f7 01       	movw	r30, r14
    1cfc:	e2 0f       	add	r30, r18
    1cfe:	f3 1f       	adc	r31, r19
    1d00:	b0 83       	st	Z, r27
    1d02:	f9 01       	movw	r30, r18
    1d04:	31 96       	adiw	r30, 0x01	; 1
    1d06:	ee 0d       	add	r30, r14
    1d08:	ff 1d       	adc	r31, r15
    1d0a:	2e 5f       	subi	r18, 0xFE	; 254
    1d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0e:	a0 83       	st	Z, r26
    1d10:	b1 cf       	rjmp	.-158    	; 0x1c74 <follow_path+0xf6>
    1d12:	6b 2e       	mov	r6, r27
    1d14:	71 2c       	mov	r7, r1
    1d16:	62 e2       	ldi	r22, 0x22	; 34
    1d18:	66 16       	cp	r6, r22
    1d1a:	71 04       	cpc	r7, r1
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <follow_path+0x1a2>
    1d1e:	a3 c0       	rjmp	.+326    	; 0x1e66 <follow_path+0x2e8>
    1d20:	f5 01       	movw	r30, r10
    1d22:	61 91       	ld	r22, Z+
    1d24:	66 23       	and	r22, r22
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <follow_path+0x1ac>
    1d28:	8e c0       	rjmp	.+284    	; 0x1e46 <follow_path+0x2c8>
    1d2a:	70 e0       	ldi	r23, 0x00	; 0
    1d2c:	66 16       	cp	r6, r22
    1d2e:	77 06       	cpc	r7, r23
    1d30:	c1 f7       	brne	.-16     	; 0x1d22 <follow_path+0x1a4>
    1d32:	99 c0       	rjmp	.+306    	; 0x1e66 <follow_path+0x2e8>
    1d34:	ec 2d       	mov	r30, r12
    1d36:	e2 60       	ori	r30, 0x02	; 2
    1d38:	ce 2e       	mov	r12, r30
    1d3a:	08 c0       	rjmp	.+16     	; 0x1d4c <follow_path+0x1ce>
    1d3c:	6f e9       	ldi	r22, 0x9F	; 159
    1d3e:	6b 0f       	add	r22, r27
    1d40:	6a 31       	cpi	r22, 0x1A	; 26
    1d42:	20 f4       	brcc	.+8      	; 0x1d4c <follow_path+0x1ce>
    1d44:	fc 2d       	mov	r31, r12
    1d46:	f1 60       	ori	r31, 0x01	; 1
    1d48:	cf 2e       	mov	r12, r31
    1d4a:	b0 52       	subi	r27, 0x20	; 32
    1d4c:	f7 01       	movw	r30, r14
    1d4e:	e2 0f       	add	r30, r18
    1d50:	f3 1f       	adc	r31, r19
    1d52:	b0 83       	st	Z, r27
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	ba 01       	movw	r22, r20
    1d5a:	8c cf       	rjmp	.-232    	; 0x1c74 <follow_path+0xf6>
    1d5c:	23 2b       	or	r18, r19
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <follow_path+0x1e4>
    1d60:	82 c0       	rjmp	.+260    	; 0x1e66 <follow_path+0x2e8>
    1d62:	f7 01       	movw	r30, r14
    1d64:	20 81       	ld	r18, Z
    1d66:	25 3e       	cpi	r18, 0xE5	; 229
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <follow_path+0x1ee>
    1d6a:	80 82       	st	Z, r8
    1d6c:	08 97       	sbiw	r24, 0x08	; 8
    1d6e:	19 f4       	brne	.+6      	; 0x1d76 <follow_path+0x1f8>
    1d70:	c5 2e       	mov	r12, r21
    1d72:	cc 0c       	add	r12, r12
    1d74:	cc 0c       	add	r12, r12
    1d76:	8c 2d       	mov	r24, r12
    1d78:	83 70       	andi	r24, 0x03	; 3
    1d7a:	81 30       	cpi	r24, 0x01	; 1
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <follow_path+0x202>
    1d7e:	40 61       	ori	r20, 0x10	; 16
    1d80:	8c 2d       	mov	r24, r12
    1d82:	8c 70       	andi	r24, 0x0C	; 12
    1d84:	84 30       	cpi	r24, 0x04	; 4
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <follow_path+0x20c>
    1d88:	48 60       	ori	r20, 0x08	; 8
    1d8a:	f7 01       	movw	r30, r14
    1d8c:	43 87       	std	Z+11, r20	; 0x0b
    1d8e:	6d c0       	rjmp	.+218    	; 0x1e6a <follow_path+0x2ec>
    1d90:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d92:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d94:	68 89       	ldd	r22, Y+16	; 0x10
    1d96:	79 89       	ldd	r23, Y+17	; 0x11
    1d98:	88 81       	ld	r24, Y
    1d9a:	99 81       	ldd	r25, Y+1	; 0x01
    1d9c:	0e 94 05 05 	call	0xa0a	; 0xa0a <move_window>
    1da0:	81 11       	cpse	r24, r1
    1da2:	6a c0       	rjmp	.+212    	; 0x1e78 <follow_path+0x2fa>
    1da4:	6a 89       	ldd	r22, Y+18	; 0x12
    1da6:	7b 89       	ldd	r23, Y+19	; 0x13
    1da8:	fb 01       	movw	r30, r22
    1daa:	90 81       	ld	r25, Z
    1dac:	99 23       	and	r25, r25
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <follow_path+0x234>
    1db0:	6a c0       	rjmp	.+212    	; 0x1e86 <follow_path+0x308>
    1db2:	93 85       	ldd	r25, Z+11	; 0x0b
    1db4:	93 fd       	sbrc	r25, 3
    1db6:	0f c0       	rjmp	.+30     	; 0x1dd6 <follow_path+0x258>
    1db8:	4c 89       	ldd	r20, Y+20	; 0x14
    1dba:	5d 89       	ldd	r21, Y+21	; 0x15
    1dbc:	da 01       	movw	r26, r20
    1dbe:	9b 01       	movw	r18, r22
    1dc0:	25 5f       	subi	r18, 0xF5	; 245
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	04 c0       	rjmp	.+8      	; 0x1dce <follow_path+0x250>
    1dc6:	e2 17       	cp	r30, r18
    1dc8:	f3 07       	cpc	r31, r19
    1dca:	09 f4       	brne	.+2      	; 0x1dce <follow_path+0x250>
    1dcc:	60 c0       	rjmp	.+192    	; 0x1e8e <follow_path+0x310>
    1dce:	f1 90       	ld	r15, Z+
    1dd0:	9d 91       	ld	r25, X+
    1dd2:	f9 16       	cp	r15, r25
    1dd4:	c1 f3       	breq	.-16     	; 0x1dc6 <follow_path+0x248>
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	ce 01       	movw	r24, r28
    1ddc:	b2 dd       	rcall	.-1180   	; 0x1942 <dir_next>
    1dde:	88 23       	and	r24, r24
    1de0:	b9 f2       	breq	.-82     	; 0x1d90 <follow_path+0x212>
    1de2:	4a c0       	rjmp	.+148    	; 0x1e78 <follow_path+0x2fa>
    1de4:	95 ff       	sbrs	r25, 5
    1de6:	0a c0       	rjmp	.+20     	; 0x1dfc <follow_path+0x27e>
    1de8:	1e 82       	std	Y+6, r1	; 0x06
    1dea:	1f 82       	std	Y+7, r1	; 0x07
    1dec:	18 86       	std	Y+8, r1	; 0x08
    1dee:	19 86       	std	Y+9, r1	; 0x09
    1df0:	1a 8a       	std	Y+18, r1	; 0x12
    1df2:	1b 8a       	std	Y+19, r1	; 0x13
    1df4:	92 ff       	sbrs	r25, 2
    1df6:	03 cf       	rjmp	.-506    	; 0x1bfe <follow_path+0x80>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	4d c0       	rjmp	.+154    	; 0x1e96 <follow_path+0x318>
    1dfc:	92 ff       	sbrs	r25, 2
    1dfe:	11 c0       	rjmp	.+34     	; 0x1e22 <follow_path+0x2a4>
    1e00:	84 e0       	ldi	r24, 0x04	; 4
    1e02:	49 c0       	rjmp	.+146    	; 0x1e96 <follow_path+0x318>
    1e04:	fb 01       	movw	r30, r22
    1e06:	83 85       	ldd	r24, Z+11	; 0x0b
    1e08:	84 ff       	sbrs	r24, 4
    1e0a:	0d c0       	rjmp	.+26     	; 0x1e26 <follow_path+0x2a8>
    1e0c:	88 81       	ld	r24, Y
    1e0e:	99 81       	ldd	r25, Y+1	; 0x01
    1e10:	0e 94 47 04 	call	0x88e	; 0x88e <ld_clust>
    1e14:	6e 83       	std	Y+6, r22	; 0x06
    1e16:	7f 83       	std	Y+7, r23	; 0x07
    1e18:	88 87       	std	Y+8, r24	; 0x08
    1e1a:	99 87       	std	Y+9, r25	; 0x09
    1e1c:	f0 ce       	rjmp	.-544    	; 0x1bfe <follow_path+0x80>
    1e1e:	86 e0       	ldi	r24, 0x06	; 6
    1e20:	3a c0       	rjmp	.+116    	; 0x1e96 <follow_path+0x318>
    1e22:	85 e0       	ldi	r24, 0x05	; 5
    1e24:	38 c0       	rjmp	.+112    	; 0x1e96 <follow_path+0x318>
    1e26:	85 e0       	ldi	r24, 0x05	; 5
    1e28:	36 c0       	rjmp	.+108    	; 0x1e96 <follow_path+0x318>
    1e2a:	86 e0       	ldi	r24, 0x06	; 6
    1e2c:	34 c0       	rjmp	.+104    	; 0x1e96 <follow_path+0x318>
    1e2e:	08 0f       	add	r16, r24
    1e30:	19 1f       	adc	r17, r25
    1e32:	80 e2       	ldi	r24, 0x20	; 32
    1e34:	1c cf       	rjmp	.-456    	; 0x1c6e <follow_path+0xf0>
    1e36:	08 0f       	add	r16, r24
    1e38:	19 1f       	adc	r17, r25
    1e3a:	84 e2       	ldi	r24, 0x24	; 36
    1e3c:	18 cf       	rjmp	.-464    	; 0x1c6e <follow_path+0xf0>
    1e3e:	08 97       	sbiw	r24, 0x08	; 8
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <follow_path+0x2c6>
    1e42:	30 cf       	rjmp	.-416    	; 0x1ca4 <follow_path+0x126>
    1e44:	f2 cf       	rjmp	.-28     	; 0x1e2a <follow_path+0x2ac>
    1e46:	6f eb       	ldi	r22, 0xBF	; 191
    1e48:	6b 0f       	add	r22, r27
    1e4a:	6a 31       	cpi	r22, 0x1A	; 26
    1e4c:	08 f4       	brcc	.+2      	; 0x1e50 <follow_path+0x2d2>
    1e4e:	72 cf       	rjmp	.-284    	; 0x1d34 <follow_path+0x1b6>
    1e50:	75 cf       	rjmp	.-278    	; 0x1d3c <follow_path+0x1be>
    1e52:	04 0f       	add	r16, r20
    1e54:	15 1f       	adc	r17, r21
    1e56:	5c 2d       	mov	r21, r12
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	80 cf       	rjmp	.-256    	; 0x1d5c <follow_path+0x1de>
    1e5c:	04 0f       	add	r16, r20
    1e5e:	15 1f       	adc	r17, r21
    1e60:	5c 2d       	mov	r21, r12
    1e62:	44 e0       	ldi	r20, 0x04	; 4
    1e64:	7b cf       	rjmp	.-266    	; 0x1d5c <follow_path+0x1de>
    1e66:	86 e0       	ldi	r24, 0x06	; 6
    1e68:	16 c0       	rjmp	.+44     	; 0x1e96 <follow_path+0x318>
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	70 e0       	ldi	r23, 0x00	; 0
    1e6e:	ce 01       	movw	r24, r28
    1e70:	a1 da       	rcall	.-2750   	; 0x13b4 <dir_sdi>
    1e72:	88 23       	and	r24, r24
    1e74:	09 f4       	brne	.+2      	; 0x1e78 <follow_path+0x2fa>
    1e76:	8c cf       	rjmp	.-232    	; 0x1d90 <follow_path+0x212>
    1e78:	ec 89       	ldd	r30, Y+20	; 0x14
    1e7a:	fd 89       	ldd	r31, Y+21	; 0x15
    1e7c:	93 85       	ldd	r25, Z+11	; 0x0b
    1e7e:	84 30       	cpi	r24, 0x04	; 4
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <follow_path+0x306>
    1e82:	b0 cf       	rjmp	.-160    	; 0x1de4 <follow_path+0x266>
    1e84:	08 c0       	rjmp	.+16     	; 0x1e96 <follow_path+0x318>
    1e86:	ec 89       	ldd	r30, Y+20	; 0x14
    1e88:	fd 89       	ldd	r31, Y+21	; 0x15
    1e8a:	93 85       	ldd	r25, Z+11	; 0x0b
    1e8c:	ab cf       	rjmp	.-170    	; 0x1de4 <follow_path+0x266>
    1e8e:	fa 01       	movw	r30, r20
    1e90:	93 85       	ldd	r25, Z+11	; 0x0b
    1e92:	92 ff       	sbrs	r25, 2
    1e94:	b7 cf       	rjmp	.-146    	; 0x1e04 <follow_path+0x286>
    1e96:	df 91       	pop	r29
    1e98:	cf 91       	pop	r28
    1e9a:	1f 91       	pop	r17
    1e9c:	0f 91       	pop	r16
    1e9e:	ff 90       	pop	r15
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	bf 90       	pop	r11
    1ea8:	af 90       	pop	r10
    1eaa:	8f 90       	pop	r8
    1eac:	7f 90       	pop	r7
    1eae:	6f 90       	pop	r6
    1eb0:	08 95       	ret

00001eb2 <dir_alloc>:
    1eb2:	ef 92       	push	r14
    1eb4:	ff 92       	push	r15
    1eb6:	0f 93       	push	r16
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	ec 01       	movw	r28, r24
    1ec0:	7b 01       	movw	r14, r22
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	76 da       	rcall	.-2836   	; 0x13b4 <dir_sdi>
    1ec8:	81 11       	cpse	r24, r1
    1eca:	21 c0       	rjmp	.+66     	; 0x1f0e <dir_alloc+0x5c>
    1ecc:	00 e0       	ldi	r16, 0x00	; 0
    1ece:	10 e0       	ldi	r17, 0x00	; 0
    1ed0:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ed2:	5f 85       	ldd	r21, Y+15	; 0x0f
    1ed4:	68 89       	ldd	r22, Y+16	; 0x10
    1ed6:	79 89       	ldd	r23, Y+17	; 0x11
    1ed8:	88 81       	ld	r24, Y
    1eda:	99 81       	ldd	r25, Y+1	; 0x01
    1edc:	0e 94 05 05 	call	0xa0a	; 0xa0a <move_window>
    1ee0:	81 11       	cpse	r24, r1
    1ee2:	15 c0       	rjmp	.+42     	; 0x1f0e <dir_alloc+0x5c>
    1ee4:	ea 89       	ldd	r30, Y+18	; 0x12
    1ee6:	fb 89       	ldd	r31, Y+19	; 0x13
    1ee8:	90 81       	ld	r25, Z
    1eea:	95 3e       	cpi	r25, 0xE5	; 229
    1eec:	11 f0       	breq	.+4      	; 0x1ef2 <dir_alloc+0x40>
    1eee:	91 11       	cpse	r25, r1
    1ef0:	06 c0       	rjmp	.+12     	; 0x1efe <dir_alloc+0x4c>
    1ef2:	0f 5f       	subi	r16, 0xFF	; 255
    1ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef6:	0e 15       	cp	r16, r14
    1ef8:	1f 05       	cpc	r17, r15
    1efa:	19 f4       	brne	.+6      	; 0x1f02 <dir_alloc+0x50>
    1efc:	0b c0       	rjmp	.+22     	; 0x1f14 <dir_alloc+0x62>
    1efe:	00 e0       	ldi	r16, 0x00	; 0
    1f00:	10 e0       	ldi	r17, 0x00	; 0
    1f02:	61 e0       	ldi	r22, 0x01	; 1
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	ce 01       	movw	r24, r28
    1f08:	1c dd       	rcall	.-1480   	; 0x1942 <dir_next>
    1f0a:	88 23       	and	r24, r24
    1f0c:	09 f3       	breq	.-62     	; 0x1ed0 <dir_alloc+0x1e>
    1f0e:	84 30       	cpi	r24, 0x04	; 4
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <dir_alloc+0x62>
    1f12:	87 e0       	ldi	r24, 0x07	; 7
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	ff 90       	pop	r15
    1f1e:	ef 90       	pop	r14
    1f20:	08 95       	ret

00001f22 <dir_register>:
    1f22:	1f 93       	push	r17
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	ec 01       	movw	r28, r24
    1f2a:	61 e0       	ldi	r22, 0x01	; 1
    1f2c:	70 e0       	ldi	r23, 0x00	; 0
    1f2e:	c1 df       	rcall	.-126    	; 0x1eb2 <dir_alloc>
    1f30:	18 2f       	mov	r17, r24
    1f32:	81 11       	cpse	r24, r1
    1f34:	1f c0       	rjmp	.+62     	; 0x1f74 <dir_register+0x52>
    1f36:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f38:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f3a:	68 89       	ldd	r22, Y+16	; 0x10
    1f3c:	79 89       	ldd	r23, Y+17	; 0x11
    1f3e:	88 81       	ld	r24, Y
    1f40:	99 81       	ldd	r25, Y+1	; 0x01
    1f42:	0e 94 05 05 	call	0xa0a	; 0xa0a <move_window>
    1f46:	18 2f       	mov	r17, r24
    1f48:	81 11       	cpse	r24, r1
    1f4a:	14 c0       	rjmp	.+40     	; 0x1f74 <dir_register+0x52>
    1f4c:	40 e2       	ldi	r20, 0x20	; 32
    1f4e:	50 e0       	ldi	r21, 0x00	; 0
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	70 e0       	ldi	r23, 0x00	; 0
    1f54:	8a 89       	ldd	r24, Y+18	; 0x12
    1f56:	9b 89       	ldd	r25, Y+19	; 0x13
    1f58:	0e 94 3c 04 	call	0x878	; 0x878 <mem_set>
    1f5c:	6c 89       	ldd	r22, Y+20	; 0x14
    1f5e:	7d 89       	ldd	r23, Y+21	; 0x15
    1f60:	4b e0       	ldi	r20, 0x0B	; 11
    1f62:	50 e0       	ldi	r21, 0x00	; 0
    1f64:	8a 89       	ldd	r24, Y+18	; 0x12
    1f66:	9b 89       	ldd	r25, Y+19	; 0x13
    1f68:	0e 94 0c 04 	call	0x818	; 0x818 <mem_cpy>
    1f6c:	e8 81       	ld	r30, Y
    1f6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	84 83       	std	Z+4, r24	; 0x04
    1f74:	81 2f       	mov	r24, r17
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	1f 91       	pop	r17
    1f7c:	08 95       	ret

00001f7e <remove_chain>:
    1f7e:	8f 92       	push	r8
    1f80:	9f 92       	push	r9
    1f82:	af 92       	push	r10
    1f84:	bf 92       	push	r11
    1f86:	cf 92       	push	r12
    1f88:	df 92       	push	r13
    1f8a:	ef 92       	push	r14
    1f8c:	ff 92       	push	r15
    1f8e:	0f 93       	push	r16
    1f90:	1f 93       	push	r17
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	ec 01       	movw	r28, r24
    1f98:	4a 01       	movw	r8, r20
    1f9a:	5b 01       	movw	r10, r22
    1f9c:	42 30       	cpi	r20, 0x02	; 2
    1f9e:	51 05       	cpc	r21, r1
    1fa0:	61 05       	cpc	r22, r1
    1fa2:	71 05       	cpc	r23, r1
    1fa4:	08 f4       	brcc	.+2      	; 0x1fa8 <remove_chain+0x2a>
    1fa6:	4b c0       	rjmp	.+150    	; 0x203e <remove_chain+0xc0>
    1fa8:	4e 89       	ldd	r20, Y+22	; 0x16
    1faa:	5f 89       	ldd	r21, Y+23	; 0x17
    1fac:	68 8d       	ldd	r22, Y+24	; 0x18
    1fae:	79 8d       	ldd	r23, Y+25	; 0x19
    1fb0:	84 16       	cp	r8, r20
    1fb2:	95 06       	cpc	r9, r21
    1fb4:	a6 06       	cpc	r10, r22
    1fb6:	b7 06       	cpc	r11, r23
    1fb8:	08 f0       	brcs	.+2      	; 0x1fbc <remove_chain+0x3e>
    1fba:	43 c0       	rjmp	.+134    	; 0x2042 <remove_chain+0xc4>
    1fbc:	b5 01       	movw	r22, r10
    1fbe:	a4 01       	movw	r20, r8
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	12 d9       	rcall	.-3548   	; 0x11e8 <get_fat>
    1fc4:	6b 01       	movw	r12, r22
    1fc6:	7c 01       	movw	r14, r24
    1fc8:	61 15       	cp	r22, r1
    1fca:	71 05       	cpc	r23, r1
    1fcc:	81 05       	cpc	r24, r1
    1fce:	91 05       	cpc	r25, r1
    1fd0:	d1 f1       	breq	.+116    	; 0x2046 <remove_chain+0xc8>
    1fd2:	91 e0       	ldi	r25, 0x01	; 1
    1fd4:	c9 16       	cp	r12, r25
    1fd6:	d1 04       	cpc	r13, r1
    1fd8:	e1 04       	cpc	r14, r1
    1fda:	f1 04       	cpc	r15, r1
    1fdc:	b1 f1       	breq	.+108    	; 0x204a <remove_chain+0xcc>
    1fde:	8f ef       	ldi	r24, 0xFF	; 255
    1fe0:	c8 16       	cp	r12, r24
    1fe2:	d8 06       	cpc	r13, r24
    1fe4:	e8 06       	cpc	r14, r24
    1fe6:	f8 06       	cpc	r15, r24
    1fe8:	91 f1       	breq	.+100    	; 0x204e <remove_chain+0xd0>
    1fea:	00 e0       	ldi	r16, 0x00	; 0
    1fec:	10 e0       	ldi	r17, 0x00	; 0
    1fee:	98 01       	movw	r18, r16
    1ff0:	b5 01       	movw	r22, r10
    1ff2:	a4 01       	movw	r20, r8
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	99 da       	rcall	.-2766   	; 0x152a <put_fat>
    1ff8:	81 11       	cpse	r24, r1
    1ffa:	2a c0       	rjmp	.+84     	; 0x2050 <remove_chain+0xd2>
    1ffc:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ffe:	5f 85       	ldd	r21, Y+15	; 0x0f
    2000:	68 89       	ldd	r22, Y+16	; 0x10
    2002:	79 89       	ldd	r23, Y+17	; 0x11
    2004:	4f 3f       	cpi	r20, 0xFF	; 255
    2006:	9f ef       	ldi	r25, 0xFF	; 255
    2008:	59 07       	cpc	r21, r25
    200a:	69 07       	cpc	r22, r25
    200c:	79 07       	cpc	r23, r25
    200e:	59 f0       	breq	.+22     	; 0x2026 <remove_chain+0xa8>
    2010:	4f 5f       	subi	r20, 0xFF	; 255
    2012:	5f 4f       	sbci	r21, 0xFF	; 255
    2014:	6f 4f       	sbci	r22, 0xFF	; 255
    2016:	7f 4f       	sbci	r23, 0xFF	; 255
    2018:	4e 87       	std	Y+14, r20	; 0x0e
    201a:	5f 87       	std	Y+15, r21	; 0x0f
    201c:	68 8b       	std	Y+16, r22	; 0x10
    201e:	79 8b       	std	Y+17, r23	; 0x11
    2020:	9d 81       	ldd	r25, Y+5	; 0x05
    2022:	91 60       	ori	r25, 0x01	; 1
    2024:	9d 83       	std	Y+5, r25	; 0x05
    2026:	4e 89       	ldd	r20, Y+22	; 0x16
    2028:	5f 89       	ldd	r21, Y+23	; 0x17
    202a:	68 8d       	ldd	r22, Y+24	; 0x18
    202c:	79 8d       	ldd	r23, Y+25	; 0x19
    202e:	c4 16       	cp	r12, r20
    2030:	d5 06       	cpc	r13, r21
    2032:	e6 06       	cpc	r14, r22
    2034:	f7 06       	cpc	r15, r23
    2036:	60 f4       	brcc	.+24     	; 0x2050 <remove_chain+0xd2>
    2038:	46 01       	movw	r8, r12
    203a:	57 01       	movw	r10, r14
    203c:	bf cf       	rjmp	.-130    	; 0x1fbc <remove_chain+0x3e>
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	07 c0       	rjmp	.+14     	; 0x2050 <remove_chain+0xd2>
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	05 c0       	rjmp	.+10     	; 0x2050 <remove_chain+0xd2>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	03 c0       	rjmp	.+6      	; 0x2050 <remove_chain+0xd2>
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	01 c0       	rjmp	.+2      	; 0x2050 <remove_chain+0xd2>
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	ff 90       	pop	r15
    205a:	ef 90       	pop	r14
    205c:	df 90       	pop	r13
    205e:	cf 90       	pop	r12
    2060:	bf 90       	pop	r11
    2062:	af 90       	pop	r10
    2064:	9f 90       	pop	r9
    2066:	8f 90       	pop	r8
    2068:	08 95       	ret

0000206a <f_mount>:
    206a:	1f 93       	push	r17
    206c:	cf 93       	push	r28
    206e:	df 93       	push	r29
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	26 97       	sbiw	r28, 0x06	; 6
    2076:	cd bf       	out	0x3d, r28	; 61
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	8b 83       	std	Y+3, r24	; 0x03
    207c:	9c 83       	std	Y+4, r25	; 0x04
    207e:	6d 83       	std	Y+5, r22	; 0x05
    2080:	7e 83       	std	Y+6, r23	; 0x06
    2082:	14 2f       	mov	r17, r20
    2084:	69 83       	std	Y+1, r22	; 0x01
    2086:	7a 83       	std	Y+2, r23	; 0x02
    2088:	ce 01       	movw	r24, r28
    208a:	01 96       	adiw	r24, 0x01	; 1
    208c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <get_ldnumber>
    2090:	99 23       	and	r25, r25
    2092:	34 f1       	brlt	.+76     	; 0x20e0 <f_mount+0x76>
    2094:	fc 01       	movw	r30, r24
    2096:	ee 0f       	add	r30, r30
    2098:	ff 1f       	adc	r31, r31
    209a:	e9 55       	subi	r30, 0x59	; 89
    209c:	ff 4d       	sbci	r31, 0xDF	; 223
    209e:	01 90       	ld	r0, Z+
    20a0:	f0 81       	ld	r31, Z
    20a2:	e0 2d       	mov	r30, r0
    20a4:	30 97       	sbiw	r30, 0x00	; 0
    20a6:	09 f0       	breq	.+2      	; 0x20aa <f_mount+0x40>
    20a8:	10 82       	st	Z, r1
    20aa:	eb 81       	ldd	r30, Y+3	; 0x03
    20ac:	fc 81       	ldd	r31, Y+4	; 0x04
    20ae:	30 97       	sbiw	r30, 0x00	; 0
    20b0:	e9 f0       	breq	.+58     	; 0x20ec <f_mount+0x82>
    20b2:	10 82       	st	Z, r1
    20b4:	2b 81       	ldd	r18, Y+3	; 0x03
    20b6:	3c 81       	ldd	r19, Y+4	; 0x04
    20b8:	fc 01       	movw	r30, r24
    20ba:	ee 0f       	add	r30, r30
    20bc:	ff 1f       	adc	r31, r31
    20be:	e9 55       	subi	r30, 0x59	; 89
    20c0:	ff 4d       	sbci	r31, 0xDF	; 223
    20c2:	20 83       	st	Z, r18
    20c4:	31 83       	std	Z+1, r19	; 0x01
    20c6:	23 2b       	or	r18, r19
    20c8:	69 f0       	breq	.+26     	; 0x20e4 <f_mount+0x7a>
    20ca:	11 30       	cpi	r17, 0x01	; 1
    20cc:	69 f4       	brne	.+26     	; 0x20e8 <f_mount+0x7e>
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	be 01       	movw	r22, r28
    20d2:	6b 5f       	subi	r22, 0xFB	; 251
    20d4:	7f 4f       	sbci	r23, 0xFF	; 255
    20d6:	ce 01       	movw	r24, r28
    20d8:	03 96       	adiw	r24, 0x03	; 3
    20da:	0e 94 a4 05 	call	0xb48	; 0xb48 <find_volume>
    20de:	0e c0       	rjmp	.+28     	; 0x20fc <f_mount+0x92>
    20e0:	8b e0       	ldi	r24, 0x0B	; 11
    20e2:	0c c0       	rjmp	.+24     	; 0x20fc <f_mount+0x92>
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	0a c0       	rjmp	.+20     	; 0x20fc <f_mount+0x92>
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	08 c0       	rjmp	.+16     	; 0x20fc <f_mount+0x92>
    20ec:	fc 01       	movw	r30, r24
    20ee:	ee 0f       	add	r30, r30
    20f0:	ff 1f       	adc	r31, r31
    20f2:	e9 55       	subi	r30, 0x59	; 89
    20f4:	ff 4d       	sbci	r31, 0xDF	; 223
    20f6:	10 82       	st	Z, r1
    20f8:	11 82       	std	Z+1, r1	; 0x01
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	26 96       	adiw	r28, 0x06	; 6
    20fe:	cd bf       	out	0x3d, r28	; 61
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	1f 91       	pop	r17
    2108:	08 95       	ret

0000210a <f_open>:
    210a:	4f 92       	push	r4
    210c:	5f 92       	push	r5
    210e:	6f 92       	push	r6
    2110:	7f 92       	push	r7
    2112:	bf 92       	push	r11
    2114:	cf 92       	push	r12
    2116:	df 92       	push	r13
    2118:	ef 92       	push	r14
    211a:	ff 92       	push	r15
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	a8 97       	sbiw	r28, 0x28	; 40
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	8c 01       	movw	r16, r24
    2130:	6b a3       	std	Y+35, r22	; 0x23
    2132:	7c a3       	std	Y+36, r23	; 0x24
    2134:	f4 2e       	mov	r15, r20
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	09 f4       	brne	.+2      	; 0x213c <f_open+0x32>
    213a:	d2 c0       	rjmp	.+420    	; 0x22e0 <f_open+0x1d6>
    213c:	dc 01       	movw	r26, r24
    213e:	1d 92       	st	X+, r1
    2140:	1c 92       	st	X, r1
    2142:	4e 71       	andi	r20, 0x1E	; 30
    2144:	be 01       	movw	r22, r28
    2146:	6d 5d       	subi	r22, 0xDD	; 221
    2148:	7f 4f       	sbci	r23, 0xFF	; 255
    214a:	ce 01       	movw	r24, r28
    214c:	01 96       	adiw	r24, 0x01	; 1
    214e:	0e 94 a4 05 	call	0xb48	; 0xb48 <find_volume>
    2152:	81 11       	cpse	r24, r1
    2154:	d9 c0       	rjmp	.+434    	; 0x2308 <f_open+0x1fe>
    2156:	bf 2d       	mov	r27, r15
    2158:	bf 71       	andi	r27, 0x1F	; 31
    215a:	bb 2e       	mov	r11, r27
    215c:	ce 01       	movw	r24, r28
    215e:	47 96       	adiw	r24, 0x17	; 23
    2160:	8d 8b       	std	Y+21, r24	; 0x15
    2162:	9e 8b       	std	Y+22, r25	; 0x16
    2164:	6b a1       	ldd	r22, Y+35	; 0x23
    2166:	7c a1       	ldd	r23, Y+36	; 0x24
    2168:	46 97       	sbiw	r24, 0x16	; 22
    216a:	09 dd       	rcall	.-1518   	; 0x1b7e <follow_path>
    216c:	cb 88       	ldd	r12, Y+19	; 0x13
    216e:	dc 88       	ldd	r13, Y+20	; 0x14
    2170:	81 11       	cpse	r24, r1
    2172:	be c0       	rjmp	.+380    	; 0x22f0 <f_open+0x1e6>
    2174:	c1 14       	cp	r12, r1
    2176:	d1 04       	cpc	r13, r1
    2178:	09 f0       	breq	.+2      	; 0x217c <f_open+0x72>
    217a:	b4 c0       	rjmp	.+360    	; 0x22e4 <f_open+0x1da>
    217c:	b8 c0       	rjmp	.+368    	; 0x22ee <f_open+0x1e4>
    217e:	88 23       	and	r24, r24
    2180:	71 f0       	breq	.+28     	; 0x219e <f_open+0x94>
    2182:	84 30       	cpi	r24, 0x04	; 4
    2184:	09 f0       	breq	.+2      	; 0x2188 <f_open+0x7e>
    2186:	c0 c0       	rjmp	.+384    	; 0x2308 <f_open+0x1fe>
    2188:	ce 01       	movw	r24, r28
    218a:	01 96       	adiw	r24, 0x01	; 1
    218c:	ca de       	rcall	.-620    	; 0x1f22 <dir_register>
    218e:	eb 2d       	mov	r30, r11
    2190:	e8 60       	ori	r30, 0x08	; 8
    2192:	be 2e       	mov	r11, r30
    2194:	cb 88       	ldd	r12, Y+19	; 0x13
    2196:	dc 88       	ldd	r13, Y+20	; 0x14
    2198:	88 23       	and	r24, r24
    219a:	49 f0       	breq	.+18     	; 0x21ae <f_open+0xa4>
    219c:	b5 c0       	rjmp	.+362    	; 0x2308 <f_open+0x1fe>
    219e:	d6 01       	movw	r26, r12
    21a0:	1b 96       	adiw	r26, 0x0b	; 11
    21a2:	8c 91       	ld	r24, X
    21a4:	81 71       	andi	r24, 0x11	; 17
    21a6:	09 f0       	breq	.+2      	; 0x21aa <f_open+0xa0>
    21a8:	a8 c0       	rjmp	.+336    	; 0x22fa <f_open+0x1f0>
    21aa:	f2 fc       	sbrc	r15, 2
    21ac:	a8 c0       	rjmp	.+336    	; 0x22fe <f_open+0x1f4>
    21ae:	b3 fe       	sbrs	r11, 3
    21b0:	55 c0       	rjmp	.+170    	; 0x225c <f_open+0x152>
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	af e4       	ldi	r26, 0x4F	; 79
    21b8:	b5 e4       	ldi	r27, 0x45	; 69
    21ba:	f6 01       	movw	r30, r12
    21bc:	86 87       	std	Z+14, r24	; 0x0e
    21be:	97 87       	std	Z+15, r25	; 0x0f
    21c0:	a0 8b       	std	Z+16, r26	; 0x10
    21c2:	b1 8b       	std	Z+17, r27	; 0x11
    21c4:	13 86       	std	Z+11, r1	; 0x0b
    21c6:	14 8e       	std	Z+28, r1	; 0x1c
    21c8:	15 8e       	std	Z+29, r1	; 0x1d
    21ca:	16 8e       	std	Z+30, r1	; 0x1e
    21cc:	17 8e       	std	Z+31, r1	; 0x1f
    21ce:	e9 80       	ldd	r14, Y+1	; 0x01
    21d0:	fa 80       	ldd	r15, Y+2	; 0x02
    21d2:	b6 01       	movw	r22, r12
    21d4:	c7 01       	movw	r24, r14
    21d6:	0e 94 47 04 	call	0x88e	; 0x88e <ld_clust>
    21da:	2b 01       	movw	r4, r22
    21dc:	3c 01       	movw	r6, r24
    21de:	f6 01       	movw	r30, r12
    21e0:	12 8e       	std	Z+26, r1	; 0x1a
    21e2:	13 8e       	std	Z+27, r1	; 0x1b
    21e4:	14 8a       	std	Z+20, r1	; 0x14
    21e6:	15 8a       	std	Z+21, r1	; 0x15
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	d7 01       	movw	r26, r14
    21ec:	14 96       	adiw	r26, 0x04	; 4
    21ee:	8c 93       	st	X, r24
    21f0:	14 97       	sbiw	r26, 0x04	; 4
    21f2:	41 14       	cp	r4, r1
    21f4:	51 04       	cpc	r5, r1
    21f6:	61 04       	cpc	r6, r1
    21f8:	71 04       	cpc	r7, r1
    21fa:	81 f1       	breq	.+96     	; 0x225c <f_open+0x152>
    21fc:	9e 96       	adiw	r26, 0x2e	; 46
    21fe:	8d 91       	ld	r24, X+
    2200:	9d 91       	ld	r25, X+
    2202:	0d 90       	ld	r0, X+
    2204:	bc 91       	ld	r27, X
    2206:	a0 2d       	mov	r26, r0
    2208:	8d a3       	std	Y+37, r24	; 0x25
    220a:	9e a3       	std	Y+38, r25	; 0x26
    220c:	af a3       	std	Y+39, r26	; 0x27
    220e:	b8 a7       	std	Y+40, r27	; 0x28
    2210:	b3 01       	movw	r22, r6
    2212:	a2 01       	movw	r20, r4
    2214:	c7 01       	movw	r24, r14
    2216:	b3 de       	rcall	.-666    	; 0x1f7e <remove_chain>
    2218:	81 11       	cpse	r24, r1
    221a:	76 c0       	rjmp	.+236    	; 0x2308 <f_open+0x1fe>
    221c:	89 81       	ldd	r24, Y+1	; 0x01
    221e:	9a 81       	ldd	r25, Y+2	; 0x02
    2220:	b3 01       	movw	r22, r6
    2222:	a2 01       	movw	r20, r4
    2224:	41 50       	subi	r20, 0x01	; 1
    2226:	51 09       	sbc	r21, r1
    2228:	61 09       	sbc	r22, r1
    222a:	71 09       	sbc	r23, r1
    222c:	fc 01       	movw	r30, r24
    222e:	42 87       	std	Z+10, r20	; 0x0a
    2230:	53 87       	std	Z+11, r21	; 0x0b
    2232:	64 87       	std	Z+12, r22	; 0x0c
    2234:	75 87       	std	Z+13, r23	; 0x0d
    2236:	4d a1       	ldd	r20, Y+37	; 0x25
    2238:	5e a1       	ldd	r21, Y+38	; 0x26
    223a:	6f a1       	ldd	r22, Y+39	; 0x27
    223c:	78 a5       	ldd	r23, Y+40	; 0x28
    223e:	0e 94 05 05 	call	0xa0a	; 0xa0a <move_window>
    2242:	0a c0       	rjmp	.+20     	; 0x2258 <f_open+0x14e>
    2244:	d6 01       	movw	r26, r12
    2246:	1b 96       	adiw	r26, 0x0b	; 11
    2248:	8c 91       	ld	r24, X
    224a:	84 fd       	sbrc	r24, 4
    224c:	5a c0       	rjmp	.+180    	; 0x2302 <f_open+0x1f8>
    224e:	f1 fe       	sbrs	r15, 1
    2250:	05 c0       	rjmp	.+10     	; 0x225c <f_open+0x152>
    2252:	80 fd       	sbrc	r24, 0
    2254:	58 c0       	rjmp	.+176    	; 0x2306 <f_open+0x1fc>
    2256:	02 c0       	rjmp	.+4      	; 0x225c <f_open+0x152>
    2258:	81 11       	cpse	r24, r1
    225a:	56 c0       	rjmp	.+172    	; 0x2308 <f_open+0x1fe>
    225c:	b3 fe       	sbrs	r11, 3
    225e:	03 c0       	rjmp	.+6      	; 0x2266 <f_open+0x15c>
    2260:	bb 2d       	mov	r27, r11
    2262:	b0 62       	ori	r27, 0x20	; 32
    2264:	bb 2e       	mov	r11, r27
    2266:	e9 80       	ldd	r14, Y+1	; 0x01
    2268:	fa 80       	ldd	r15, Y+2	; 0x02
    226a:	f7 01       	movw	r30, r14
    226c:	86 a5       	ldd	r24, Z+46	; 0x2e
    226e:	97 a5       	ldd	r25, Z+47	; 0x2f
    2270:	a0 a9       	ldd	r26, Z+48	; 0x30
    2272:	b1 a9       	ldd	r27, Z+49	; 0x31
    2274:	f8 01       	movw	r30, r16
    2276:	82 8f       	std	Z+26, r24	; 0x1a
    2278:	93 8f       	std	Z+27, r25	; 0x1b
    227a:	a4 8f       	std	Z+28, r26	; 0x1c
    227c:	b5 8f       	std	Z+29, r27	; 0x1d
    227e:	c6 8e       	std	Z+30, r12	; 0x1e
    2280:	d7 8e       	std	Z+31, r13	; 0x1f
    2282:	b4 82       	std	Z+4, r11	; 0x04
    2284:	15 82       	std	Z+5, r1	; 0x05
    2286:	b6 01       	movw	r22, r12
    2288:	c7 01       	movw	r24, r14
    228a:	0e 94 47 04 	call	0x88e	; 0x88e <ld_clust>
    228e:	d8 01       	movw	r26, r16
    2290:	1e 96       	adiw	r26, 0x0e	; 14
    2292:	6d 93       	st	X+, r22
    2294:	7d 93       	st	X+, r23
    2296:	8d 93       	st	X+, r24
    2298:	9c 93       	st	X, r25
    229a:	51 97       	sbiw	r26, 0x11	; 17
    229c:	f6 01       	movw	r30, r12
    229e:	44 8d       	ldd	r20, Z+28	; 0x1c
    22a0:	55 8d       	ldd	r21, Z+29	; 0x1d
    22a2:	66 8d       	ldd	r22, Z+30	; 0x1e
    22a4:	77 8d       	ldd	r23, Z+31	; 0x1f
    22a6:	1a 96       	adiw	r26, 0x0a	; 10
    22a8:	4d 93       	st	X+, r20
    22aa:	5d 93       	st	X+, r21
    22ac:	6d 93       	st	X+, r22
    22ae:	7c 93       	st	X, r23
    22b0:	1d 97       	sbiw	r26, 0x0d	; 13
    22b2:	f8 01       	movw	r30, r16
    22b4:	16 82       	std	Z+6, r1	; 0x06
    22b6:	17 82       	std	Z+7, r1	; 0x07
    22b8:	10 86       	std	Z+8, r1	; 0x08
    22ba:	11 86       	std	Z+9, r1	; 0x09
    22bc:	56 96       	adiw	r26, 0x16	; 22
    22be:	1d 92       	st	X+, r1
    22c0:	1d 92       	st	X+, r1
    22c2:	1d 92       	st	X+, r1
    22c4:	1c 92       	st	X, r1
    22c6:	59 97       	sbiw	r26, 0x19	; 25
    22c8:	ed 92       	st	X+, r14
    22ca:	fc 92       	st	X, r15
    22cc:	11 97       	sbiw	r26, 0x01	; 1
    22ce:	f7 01       	movw	r30, r14
    22d0:	86 81       	ldd	r24, Z+6	; 0x06
    22d2:	97 81       	ldd	r25, Z+7	; 0x07
    22d4:	12 96       	adiw	r26, 0x02	; 2
    22d6:	8d 93       	st	X+, r24
    22d8:	9c 93       	st	X, r25
    22da:	13 97       	sbiw	r26, 0x03	; 3
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	14 c0       	rjmp	.+40     	; 0x2308 <f_open+0x1fe>
    22e0:	89 e0       	ldi	r24, 0x09	; 9
    22e2:	12 c0       	rjmp	.+36     	; 0x2308 <f_open+0x1fe>
    22e4:	8f 2d       	mov	r24, r15
    22e6:	8c 71       	andi	r24, 0x1C	; 28
    22e8:	09 f0       	breq	.+2      	; 0x22ec <f_open+0x1e2>
    22ea:	59 cf       	rjmp	.-334    	; 0x219e <f_open+0x94>
    22ec:	ab cf       	rjmp	.-170    	; 0x2244 <f_open+0x13a>
    22ee:	86 e0       	ldi	r24, 0x06	; 6
    22f0:	9f 2d       	mov	r25, r15
    22f2:	9c 71       	andi	r25, 0x1C	; 28
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <f_open+0x1ee>
    22f6:	43 cf       	rjmp	.-378    	; 0x217e <f_open+0x74>
    22f8:	af cf       	rjmp	.-162    	; 0x2258 <f_open+0x14e>
    22fa:	87 e0       	ldi	r24, 0x07	; 7
    22fc:	05 c0       	rjmp	.+10     	; 0x2308 <f_open+0x1fe>
    22fe:	88 e0       	ldi	r24, 0x08	; 8
    2300:	03 c0       	rjmp	.+6      	; 0x2308 <f_open+0x1fe>
    2302:	84 e0       	ldi	r24, 0x04	; 4
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <f_open+0x1fe>
    2306:	87 e0       	ldi	r24, 0x07	; 7
    2308:	a8 96       	adiw	r28, 0x28	; 40
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	1f 91       	pop	r17
    2314:	0f 91       	pop	r16
    2316:	ff 90       	pop	r15
    2318:	ef 90       	pop	r14
    231a:	df 90       	pop	r13
    231c:	cf 90       	pop	r12
    231e:	bf 90       	pop	r11
    2320:	7f 90       	pop	r7
    2322:	6f 90       	pop	r6
    2324:	5f 90       	pop	r5
    2326:	4f 90       	pop	r4
    2328:	08 95       	ret

0000232a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    232a:	2f 92       	push	r2
    232c:	3f 92       	push	r3
    232e:	4f 92       	push	r4
    2330:	5f 92       	push	r5
    2332:	6f 92       	push	r6
    2334:	7f 92       	push	r7
    2336:	8f 92       	push	r8
    2338:	9f 92       	push	r9
    233a:	af 92       	push	r10
    233c:	bf 92       	push	r11
    233e:	cf 92       	push	r12
    2340:	df 92       	push	r13
    2342:	ef 92       	push	r14
    2344:	ff 92       	push	r15
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	ec 01       	movw	r28, r24
    2350:	5b 01       	movw	r10, r22
    2352:	7a 01       	movw	r14, r20
    2354:	69 01       	movw	r12, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    2356:	f9 01       	movw	r30, r18
    2358:	10 82       	st	Z, r1
    235a:	11 82       	std	Z+1, r1	; 0x01

	res = validate(fp);						/* Check validity */
    235c:	0e 94 7f 05 	call	0xafe	; 0xafe <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2360:	81 11       	cpse	r24, r1
    2362:	6a c1       	rjmp	.+724    	; 0x2638 <f_write+0x30e>
	if (fp->err)							/* Check error */
    2364:	8d 81       	ldd	r24, Y+5	; 0x05
    2366:	81 11       	cpse	r24, r1
    2368:	67 c1       	rjmp	.+718    	; 0x2638 <f_write+0x30e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    236a:	8c 81       	ldd	r24, Y+4	; 0x04
    236c:	81 ff       	sbrs	r24, 1
    236e:	63 c1       	rjmp	.+710    	; 0x2636 <f_write+0x30c>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    2370:	8e 81       	ldd	r24, Y+6	; 0x06
    2372:	9f 81       	ldd	r25, Y+7	; 0x07
    2374:	a8 85       	ldd	r26, Y+8	; 0x08
    2376:	b9 85       	ldd	r27, Y+9	; 0x09
    2378:	ac 01       	movw	r20, r24
    237a:	bd 01       	movw	r22, r26
    237c:	4e 0d       	add	r20, r14
    237e:	5f 1d       	adc	r21, r15
    2380:	61 1d       	adc	r22, r1
    2382:	71 1d       	adc	r23, r1
    2384:	48 17       	cp	r20, r24
    2386:	59 07       	cpc	r21, r25
    2388:	6a 07       	cpc	r22, r26
    238a:	7b 07       	cpc	r23, r27
    238c:	08 f4       	brcc	.+2      	; 0x2390 <f_write+0x66>
    238e:	3d c1       	rjmp	.+634    	; 0x260a <f_write+0x2e0>

	for ( ;  btw;							/* Repeat until all data written */
    2390:	e1 14       	cp	r14, r1
    2392:	f1 04       	cpc	r15, r1
    2394:	09 f4       	brne	.+2      	; 0x2398 <f_write+0x6e>
    2396:	39 c1       	rjmp	.+626    	; 0x260a <f_write+0x2e0>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    2398:	8e 81       	ldd	r24, Y+6	; 0x06
    239a:	9f 81       	ldd	r25, Y+7	; 0x07
    239c:	a8 85       	ldd	r26, Y+8	; 0x08
    239e:	b9 85       	ldd	r27, Y+9	; 0x09
    23a0:	ac 01       	movw	r20, r24
    23a2:	bd 01       	movw	r22, r26
    23a4:	51 70       	andi	r21, 0x01	; 1
    23a6:	66 27       	eor	r22, r22
    23a8:	77 27       	eor	r23, r23
    23aa:	45 2b       	or	r20, r21
    23ac:	46 2b       	or	r20, r22
    23ae:	47 2b       	or	r20, r23
    23b0:	09 f0       	breq	.+2      	; 0x23b4 <f_write+0x8a>
    23b2:	e5 c0       	rjmp	.+458    	; 0x257e <f_write+0x254>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    23b4:	e8 81       	ld	r30, Y
    23b6:	f9 81       	ldd	r31, Y+1	; 0x01
    23b8:	12 81       	ldd	r17, Z+2	; 0x02
    23ba:	11 50       	subi	r17, 0x01	; 1
    23bc:	ac 01       	movw	r20, r24
    23be:	bd 01       	movw	r22, r26
    23c0:	03 2e       	mov	r0, r19
    23c2:	39 e0       	ldi	r19, 0x09	; 9
    23c4:	76 95       	lsr	r23
    23c6:	67 95       	ror	r22
    23c8:	57 95       	ror	r21
    23ca:	47 95       	ror	r20
    23cc:	3a 95       	dec	r19
    23ce:	d1 f7       	brne	.-12     	; 0x23c4 <f_write+0x9a>
    23d0:	30 2d       	mov	r19, r0
    23d2:	14 23       	and	r17, r20
			if (!csect) {					/* On the cluster boundary? */
    23d4:	09 f0       	breq	.+2      	; 0x23d8 <f_write+0xae>
    23d6:	40 c0       	rjmp	.+128    	; 0x2458 <f_write+0x12e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    23d8:	89 2b       	or	r24, r25
    23da:	8a 2b       	or	r24, r26
    23dc:	8b 2b       	or	r24, r27
    23de:	79 f4       	brne	.+30     	; 0x23fe <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    23e0:	6e 85       	ldd	r22, Y+14	; 0x0e
    23e2:	7f 85       	ldd	r23, Y+15	; 0x0f
    23e4:	88 89       	ldd	r24, Y+16	; 0x10
    23e6:	99 89       	ldd	r25, Y+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    23e8:	61 15       	cp	r22, r1
    23ea:	71 05       	cpc	r23, r1
    23ec:	81 05       	cpc	r24, r1
    23ee:	91 05       	cpc	r25, r1
    23f0:	91 f4       	brne	.+36     	; 0x2416 <f_write+0xec>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    23f2:	40 e0       	ldi	r20, 0x00	; 0
    23f4:	50 e0       	ldi	r21, 0x00	; 0
    23f6:	ba 01       	movw	r22, r20
    23f8:	cf 01       	movw	r24, r30
    23fa:	9f d9       	rcall	.-3266   	; 0x173a <create_chain>
    23fc:	06 c0       	rjmp	.+12     	; 0x240a <f_write+0xe0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    23fe:	4a 89       	ldd	r20, Y+18	; 0x12
    2400:	5b 89       	ldd	r21, Y+19	; 0x13
    2402:	6c 89       	ldd	r22, Y+20	; 0x14
    2404:	7d 89       	ldd	r23, Y+21	; 0x15
    2406:	cf 01       	movw	r24, r30
    2408:	98 d9       	rcall	.-3280   	; 0x173a <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    240a:	61 15       	cp	r22, r1
    240c:	71 05       	cpc	r23, r1
    240e:	81 05       	cpc	r24, r1
    2410:	91 05       	cpc	r25, r1
    2412:	09 f4       	brne	.+2      	; 0x2416 <f_write+0xec>
    2414:	fa c0       	rjmp	.+500    	; 0x260a <f_write+0x2e0>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2416:	61 30       	cpi	r22, 0x01	; 1
    2418:	71 05       	cpc	r23, r1
    241a:	81 05       	cpc	r24, r1
    241c:	91 05       	cpc	r25, r1
    241e:	19 f4       	brne	.+6      	; 0x2426 <f_write+0xfc>
    2420:	82 e0       	ldi	r24, 0x02	; 2
    2422:	8d 83       	std	Y+5, r24	; 0x05
    2424:	09 c1       	rjmp	.+530    	; 0x2638 <f_write+0x30e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2426:	6f 3f       	cpi	r22, 0xFF	; 255
    2428:	ff ef       	ldi	r31, 0xFF	; 255
    242a:	7f 07       	cpc	r23, r31
    242c:	8f 07       	cpc	r24, r31
    242e:	9f 07       	cpc	r25, r31
    2430:	19 f4       	brne	.+6      	; 0x2438 <f_write+0x10e>
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	8d 83       	std	Y+5, r24	; 0x05
    2436:	00 c1       	rjmp	.+512    	; 0x2638 <f_write+0x30e>
				fp->clust = clst;			/* Update current cluster */
    2438:	6a 8b       	std	Y+18, r22	; 0x12
    243a:	7b 8b       	std	Y+19, r23	; 0x13
    243c:	8c 8b       	std	Y+20, r24	; 0x14
    243e:	9d 8b       	std	Y+21, r25	; 0x15
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    2440:	4e 84       	ldd	r4, Y+14	; 0x0e
    2442:	5f 84       	ldd	r5, Y+15	; 0x0f
    2444:	68 88       	ldd	r6, Y+16	; 0x10
    2446:	79 88       	ldd	r7, Y+17	; 0x11
    2448:	45 28       	or	r4, r5
    244a:	46 28       	or	r4, r6
    244c:	47 28       	or	r4, r7
    244e:	21 f4       	brne	.+8      	; 0x2458 <f_write+0x12e>
    2450:	6e 87       	std	Y+14, r22	; 0x0e
    2452:	7f 87       	std	Y+15, r23	; 0x0f
    2454:	88 8b       	std	Y+16, r24	; 0x10
    2456:	99 8b       	std	Y+17, r25	; 0x11
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    2458:	e8 81       	ld	r30, Y
    245a:	f9 81       	ldd	r31, Y+1	; 0x01
    245c:	86 a5       	ldd	r24, Z+46	; 0x2e
    245e:	97 a5       	ldd	r25, Z+47	; 0x2f
    2460:	a0 a9       	ldd	r26, Z+48	; 0x30
    2462:	b1 a9       	ldd	r27, Z+49	; 0x31
    2464:	4e 89       	ldd	r20, Y+22	; 0x16
    2466:	5f 89       	ldd	r21, Y+23	; 0x17
    2468:	68 8d       	ldd	r22, Y+24	; 0x18
    246a:	79 8d       	ldd	r23, Y+25	; 0x19
    246c:	84 17       	cp	r24, r20
    246e:	95 07       	cpc	r25, r21
    2470:	a6 07       	cpc	r26, r22
    2472:	b7 07       	cpc	r27, r23
    2474:	41 f4       	brne	.+16     	; 0x2486 <f_write+0x15c>
    2476:	cf 01       	movw	r24, r30
    2478:	0e 94 9a 04 	call	0x934	; 0x934 <sync_window>
    247c:	88 23       	and	r24, r24
    247e:	19 f0       	breq	.+6      	; 0x2486 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	8d 83       	std	Y+5, r24	; 0x05
    2484:	d9 c0       	rjmp	.+434    	; 0x2638 <f_write+0x30e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    2486:	28 80       	ld	r2, Y
    2488:	39 80       	ldd	r3, Y+1	; 0x01
    248a:	4a 89       	ldd	r20, Y+18	; 0x12
    248c:	5b 89       	ldd	r21, Y+19	; 0x13
    248e:	6c 89       	ldd	r22, Y+20	; 0x14
    2490:	7d 89       	ldd	r23, Y+21	; 0x15
    2492:	c1 01       	movw	r24, r2
    2494:	0e 94 c6 08 	call	0x118c	; 0x118c <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2498:	61 15       	cp	r22, r1
    249a:	71 05       	cpc	r23, r1
    249c:	81 05       	cpc	r24, r1
    249e:	91 05       	cpc	r25, r1
    24a0:	19 f4       	brne	.+6      	; 0x24a8 <f_write+0x17e>
    24a2:	82 e0       	ldi	r24, 0x02	; 2
    24a4:	8d 83       	std	Y+5, r24	; 0x05
    24a6:	c8 c0       	rjmp	.+400    	; 0x2638 <f_write+0x30e>
			sect += csect;
    24a8:	2b 01       	movw	r4, r22
    24aa:	3c 01       	movw	r6, r24
    24ac:	41 0e       	add	r4, r17
    24ae:	51 1c       	adc	r5, r1
    24b0:	61 1c       	adc	r6, r1
    24b2:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    24b4:	47 01       	movw	r8, r14
    24b6:	89 2c       	mov	r8, r9
    24b8:	99 24       	eor	r9, r9
    24ba:	86 94       	lsr	r8
			if (cc) {						/* Write maximum contiguous sectors directly */
    24bc:	81 14       	cp	r8, r1
    24be:	91 04       	cpc	r9, r1
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <f_write+0x19a>
    24c2:	3e c0       	rjmp	.+124    	; 0x2540 <f_write+0x216>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    24c4:	f1 01       	movw	r30, r2
    24c6:	42 81       	ldd	r20, Z+2	; 0x02
    24c8:	24 2f       	mov	r18, r20
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	c4 01       	movw	r24, r8
    24ce:	81 0f       	add	r24, r17
    24d0:	91 1d       	adc	r25, r1
    24d2:	28 17       	cp	r18, r24
    24d4:	39 07       	cpc	r19, r25
    24d6:	18 f4       	brcc	.+6      	; 0x24de <f_write+0x1b4>
					cc = fp->fs->csize - csect;
    24d8:	49 01       	movw	r8, r18
    24da:	81 1a       	sub	r8, r17
    24dc:	91 08       	sbc	r9, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    24de:	84 01       	movw	r16, r8
    24e0:	a3 01       	movw	r20, r6
    24e2:	92 01       	movw	r18, r4
    24e4:	b5 01       	movw	r22, r10
    24e6:	f1 01       	movw	r30, r2
    24e8:	81 81       	ldd	r24, Z+1	; 0x01
    24ea:	02 d3       	rcall	.+1540   	; 0x2af0 <disk_write>
    24ec:	88 23       	and	r24, r24
    24ee:	19 f0       	breq	.+6      	; 0x24f6 <f_write+0x1cc>
					ABORT(fp->fs, FR_DISK_ERR);
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	8d 83       	std	Y+5, r24	; 0x05
    24f4:	a1 c0       	rjmp	.+322    	; 0x2638 <f_write+0x30e>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    24f6:	e8 81       	ld	r30, Y
    24f8:	f9 81       	ldd	r31, Y+1	; 0x01
    24fa:	86 a5       	ldd	r24, Z+46	; 0x2e
    24fc:	97 a5       	ldd	r25, Z+47	; 0x2f
    24fe:	a0 a9       	ldd	r26, Z+48	; 0x30
    2500:	b1 a9       	ldd	r27, Z+49	; 0x31
    2502:	84 19       	sub	r24, r4
    2504:	95 09       	sbc	r25, r5
    2506:	a6 09       	sbc	r26, r6
    2508:	b7 09       	sbc	r27, r7
    250a:	a4 01       	movw	r20, r8
    250c:	60 e0       	ldi	r22, 0x00	; 0
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	84 17       	cp	r24, r20
    2512:	95 07       	cpc	r25, r21
    2514:	a6 07       	cpc	r26, r22
    2516:	b7 07       	cpc	r27, r23
    2518:	78 f4       	brcc	.+30     	; 0x2538 <f_write+0x20e>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    251a:	98 2f       	mov	r25, r24
    251c:	88 27       	eor	r24, r24
    251e:	99 0f       	add	r25, r25
    2520:	b5 01       	movw	r22, r10
    2522:	68 0f       	add	r22, r24
    2524:	79 1f       	adc	r23, r25
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	52 e0       	ldi	r21, 0x02	; 2
    252a:	cf 01       	movw	r24, r30
    252c:	c2 96       	adiw	r24, 0x32	; 50
    252e:	0e 94 0c 04 	call	0x818	; 0x818 <mem_cpy>
					fp->fs->wflag = 0;
    2532:	e8 81       	ld	r30, Y
    2534:	f9 81       	ldd	r31, Y+1	; 0x01
    2536:	14 82       	std	Z+4, r1	; 0x04
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    2538:	98 2c       	mov	r9, r8
    253a:	88 24       	eor	r8, r8
    253c:	99 0c       	add	r9, r9
				continue;
    253e:	4c c0       	rjmp	.+152    	; 0x25d8 <f_write+0x2ae>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    2540:	4e 81       	ldd	r20, Y+6	; 0x06
    2542:	5f 81       	ldd	r21, Y+7	; 0x07
    2544:	68 85       	ldd	r22, Y+8	; 0x08
    2546:	79 85       	ldd	r23, Y+9	; 0x09
    2548:	8a 85       	ldd	r24, Y+10	; 0x0a
    254a:	9b 85       	ldd	r25, Y+11	; 0x0b
    254c:	ac 85       	ldd	r26, Y+12	; 0x0c
    254e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2550:	48 17       	cp	r20, r24
    2552:	59 07       	cpc	r21, r25
    2554:	6a 07       	cpc	r22, r26
    2556:	7b 07       	cpc	r23, r27
    2558:	70 f0       	brcs	.+28     	; 0x2576 <f_write+0x24c>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    255a:	c1 01       	movw	r24, r2
    255c:	0e 94 9a 04 	call	0x934	; 0x934 <sync_window>
    2560:	88 23       	and	r24, r24
    2562:	19 f0       	breq	.+6      	; 0x256a <f_write+0x240>
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	8d 83       	std	Y+5, r24	; 0x05
    2568:	67 c0       	rjmp	.+206    	; 0x2638 <f_write+0x30e>
				fp->fs->winsect = sect;
    256a:	e8 81       	ld	r30, Y
    256c:	f9 81       	ldd	r31, Y+1	; 0x01
    256e:	46 a6       	std	Z+46, r4	; 0x2e
    2570:	57 a6       	std	Z+47, r5	; 0x2f
    2572:	60 aa       	std	Z+48, r6	; 0x30
    2574:	71 aa       	std	Z+49, r7	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    2576:	4e 8a       	std	Y+22, r4	; 0x16
    2578:	5f 8a       	std	Y+23, r5	; 0x17
    257a:	68 8e       	std	Y+24, r6	; 0x18
    257c:	79 8e       	std	Y+25, r7	; 0x19
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    257e:	8e 81       	ldd	r24, Y+6	; 0x06
    2580:	9f 81       	ldd	r25, Y+7	; 0x07
    2582:	91 70       	andi	r25, 0x01	; 1
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	32 e0       	ldi	r19, 0x02	; 2
    2588:	28 1b       	sub	r18, r24
    258a:	39 0b       	sbc	r19, r25
    258c:	47 01       	movw	r8, r14
    258e:	2e 15       	cp	r18, r14
    2590:	3f 05       	cpc	r19, r15
    2592:	08 f4       	brcc	.+2      	; 0x2596 <f_write+0x26c>
    2594:	49 01       	movw	r8, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
    2596:	4e 89       	ldd	r20, Y+22	; 0x16
    2598:	5f 89       	ldd	r21, Y+23	; 0x17
    259a:	68 8d       	ldd	r22, Y+24	; 0x18
    259c:	79 8d       	ldd	r23, Y+25	; 0x19
    259e:	88 81       	ld	r24, Y
    25a0:	99 81       	ldd	r25, Y+1	; 0x01
    25a2:	0e 94 05 05 	call	0xa0a	; 0xa0a <move_window>
    25a6:	88 23       	and	r24, r24
    25a8:	19 f0       	breq	.+6      	; 0x25b0 <f_write+0x286>
			ABORT(fp->fs, FR_DISK_ERR);
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	8d 83       	std	Y+5, r24	; 0x05
    25ae:	44 c0       	rjmp	.+136    	; 0x2638 <f_write+0x30e>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    25b0:	8e 81       	ldd	r24, Y+6	; 0x06
    25b2:	9f 81       	ldd	r25, Y+7	; 0x07
    25b4:	a8 85       	ldd	r26, Y+8	; 0x08
    25b6:	b9 85       	ldd	r27, Y+9	; 0x09
    25b8:	91 70       	andi	r25, 0x01	; 1
    25ba:	aa 27       	eor	r26, r26
    25bc:	bb 27       	eor	r27, r27
    25be:	c2 96       	adiw	r24, 0x32	; 50
    25c0:	28 81       	ld	r18, Y
    25c2:	39 81       	ldd	r19, Y+1	; 0x01
    25c4:	a4 01       	movw	r20, r8
    25c6:	b5 01       	movw	r22, r10
    25c8:	82 0f       	add	r24, r18
    25ca:	93 1f       	adc	r25, r19
    25cc:	0e 94 0c 04 	call	0x818	; 0x818 <mem_cpy>
		fp->fs->wflag = 1;
    25d0:	e8 81       	ld	r30, Y
    25d2:	f9 81       	ldd	r31, Y+1	; 0x01
    25d4:	31 e0       	ldi	r19, 0x01	; 1
    25d6:	34 83       	std	Z+4, r19	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    25d8:	a8 0c       	add	r10, r8
    25da:	b9 1c       	adc	r11, r9
    25dc:	8e 81       	ldd	r24, Y+6	; 0x06
    25de:	9f 81       	ldd	r25, Y+7	; 0x07
    25e0:	a8 85       	ldd	r26, Y+8	; 0x08
    25e2:	b9 85       	ldd	r27, Y+9	; 0x09
    25e4:	88 0d       	add	r24, r8
    25e6:	99 1d       	adc	r25, r9
    25e8:	a1 1d       	adc	r26, r1
    25ea:	b1 1d       	adc	r27, r1
    25ec:	8e 83       	std	Y+6, r24	; 0x06
    25ee:	9f 83       	std	Y+7, r25	; 0x07
    25f0:	a8 87       	std	Y+8, r26	; 0x08
    25f2:	b9 87       	std	Y+9, r27	; 0x09
    25f4:	f6 01       	movw	r30, r12
    25f6:	80 81       	ld	r24, Z
    25f8:	91 81       	ldd	r25, Z+1	; 0x01
    25fa:	88 0d       	add	r24, r8
    25fc:	99 1d       	adc	r25, r9
    25fe:	80 83       	st	Z, r24
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	e8 18       	sub	r14, r8
    2604:	f9 08       	sbc	r15, r9
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    2606:	09 f0       	breq	.+2      	; 0x260a <f_write+0x2e0>
    2608:	c7 ce       	rjmp	.-626    	; 0x2398 <f_write+0x6e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    260a:	8e 81       	ldd	r24, Y+6	; 0x06
    260c:	9f 81       	ldd	r25, Y+7	; 0x07
    260e:	a8 85       	ldd	r26, Y+8	; 0x08
    2610:	b9 85       	ldd	r27, Y+9	; 0x09
    2612:	4a 85       	ldd	r20, Y+10	; 0x0a
    2614:	5b 85       	ldd	r21, Y+11	; 0x0b
    2616:	6c 85       	ldd	r22, Y+12	; 0x0c
    2618:	7d 85       	ldd	r23, Y+13	; 0x0d
    261a:	48 17       	cp	r20, r24
    261c:	59 07       	cpc	r21, r25
    261e:	6a 07       	cpc	r22, r26
    2620:	7b 07       	cpc	r23, r27
    2622:	20 f4       	brcc	.+8      	; 0x262c <f_write+0x302>
    2624:	8a 87       	std	Y+10, r24	; 0x0a
    2626:	9b 87       	std	Y+11, r25	; 0x0b
    2628:	ac 87       	std	Y+12, r26	; 0x0c
    262a:	bd 87       	std	Y+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    262c:	8c 81       	ldd	r24, Y+4	; 0x04
    262e:	80 62       	ori	r24, 0x20	; 32
    2630:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	01 c0       	rjmp	.+2      	; 0x2638 <f_write+0x30e>
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2636:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	1f 91       	pop	r17
    263e:	0f 91       	pop	r16
    2640:	ff 90       	pop	r15
    2642:	ef 90       	pop	r14
    2644:	df 90       	pop	r13
    2646:	cf 90       	pop	r12
    2648:	bf 90       	pop	r11
    264a:	af 90       	pop	r10
    264c:	9f 90       	pop	r9
    264e:	8f 90       	pop	r8
    2650:	7f 90       	pop	r7
    2652:	6f 90       	pop	r6
    2654:	5f 90       	pop	r5
    2656:	4f 90       	pop	r4
    2658:	3f 90       	pop	r3
    265a:	2f 90       	pop	r2
    265c:	08 95       	ret

0000265e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    265e:	cf 93       	push	r28
    2660:	df 93       	push	r29
    2662:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    2664:	0e 94 7f 05 	call	0xafe	; 0xafe <validate>
	if (res == FR_OK) {
    2668:	81 11       	cpse	r24, r1
    266a:	37 c0       	rjmp	.+110    	; 0x26da <f_sync+0x7c>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    266c:	9c 81       	ldd	r25, Y+4	; 0x04
    266e:	95 ff       	sbrs	r25, 5
    2670:	34 c0       	rjmp	.+104    	; 0x26da <f_sync+0x7c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2672:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2674:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2676:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2678:	7d 8d       	ldd	r23, Y+29	; 0x1d
    267a:	88 81       	ld	r24, Y
    267c:	99 81       	ldd	r25, Y+1	; 0x01
    267e:	0e 94 05 05 	call	0xa0a	; 0xa0a <move_window>
			if (res == FR_OK) {
    2682:	81 11       	cpse	r24, r1
    2684:	2a c0       	rjmp	.+84     	; 0x26da <f_sync+0x7c>
				dir = fp->dir_ptr;
    2686:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2688:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    268a:	83 85       	ldd	r24, Z+11	; 0x0b
    268c:	80 62       	ori	r24, 0x20	; 32
    268e:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2690:	4a 85       	ldd	r20, Y+10	; 0x0a
    2692:	5b 85       	ldd	r21, Y+11	; 0x0b
    2694:	6c 85       	ldd	r22, Y+12	; 0x0c
    2696:	7d 85       	ldd	r23, Y+13	; 0x0d
    2698:	44 8f       	std	Z+28, r20	; 0x1c
    269a:	55 8f       	std	Z+29, r21	; 0x1d
    269c:	66 8f       	std	Z+30, r22	; 0x1e
    269e:	77 8f       	std	Z+31, r23	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    26a0:	4e 85       	ldd	r20, Y+14	; 0x0e
    26a2:	5f 85       	ldd	r21, Y+15	; 0x0f
    26a4:	68 89       	ldd	r22, Y+16	; 0x10
    26a6:	79 89       	ldd	r23, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    26a8:	42 8f       	std	Z+26, r20	; 0x1a
    26aa:	53 8f       	std	Z+27, r21	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    26ac:	64 8b       	std	Z+20, r22	; 0x14
    26ae:	75 8b       	std	Z+21, r23	; 0x15
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tm);
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	50 e0       	ldi	r21, 0x00	; 0
    26b4:	6f e4       	ldi	r22, 0x4F	; 79
    26b6:	75 e4       	ldi	r23, 0x45	; 69
    26b8:	46 8b       	std	Z+22, r20	; 0x16
    26ba:	57 8b       	std	Z+23, r21	; 0x17
    26bc:	60 8f       	std	Z+24, r22	; 0x18
    26be:	71 8f       	std	Z+25, r23	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    26c0:	12 8a       	std	Z+18, r1	; 0x12
    26c2:	13 8a       	std	Z+19, r1	; 0x13
				fp->flag &= ~FA__WRITTEN;
    26c4:	8c 81       	ldd	r24, Y+4	; 0x04
    26c6:	8f 7d       	andi	r24, 0xDF	; 223
    26c8:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    26ca:	e8 81       	ld	r30, Y
    26cc:	f9 81       	ldd	r31, Y+1	; 0x01
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    26d2:	88 81       	ld	r24, Y
    26d4:	99 81       	ldd	r25, Y+1	; 0x01
    26d6:	0e 94 58 08 	call	0x10b0	; 0x10b0 <sync_fs>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	08 95       	ret

000026e0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    26e6:	bb df       	rcall	.-138    	; 0x265e <f_sync>
	if (res == FR_OK)
    26e8:	81 11       	cpse	r24, r1
    26ea:	07 c0       	rjmp	.+14     	; 0x26fa <f_close+0x1a>
#endif
	{
		res = validate(fp);				/* Lock volume */
    26ec:	ce 01       	movw	r24, r28
    26ee:	0e 94 7f 05 	call	0xafe	; 0xafe <validate>
		if (res == FR_OK) {
    26f2:	81 11       	cpse	r24, r1
    26f4:	02 c0       	rjmp	.+4      	; 0x26fa <f_close+0x1a>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    26f6:	18 82       	st	Y, r1
    26f8:	19 82       	std	Y+1, r1	; 0x01
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    2700:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <spi_wr_rd>
}
    2704:	08 95       	ret

00002706 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    2706:	80 e1       	ldi	r24, 0x10	; 16
    2708:	e0 e4       	ldi	r30, 0x40	; 64
    270a:	f6 e0       	ldi	r31, 0x06	; 6
    270c:	85 83       	std	Z+5, r24	; 0x05
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    270e:	8f ef       	ldi	r24, 0xFF	; 255
    2710:	f7 cf       	rjmp	.-18     	; 0x2700 <xchg_spi>
    2712:	08 95       	ret

00002714 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
    2714:	80 e1       	ldi	r24, 0x10	; 16
    2716:	e0 e4       	ldi	r30, 0x40	; 64
    2718:	f6 e0       	ldi	r31, 0x06	; 6
    271a:	86 83       	std	Z+6, r24	; 0x06
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    271c:	8f ef       	ldi	r24, 0xFF	; 255
    271e:	f0 df       	rcall	.-32     	; 0x2700 <xchg_spi>
	UINT wt			/* Timeout [ms] */
)
{
	BYTE d;

	Timer2 = wt / 10;
    2720:	82 e3       	ldi	r24, 0x32	; 50
    2722:	80 93 ac 20 	sts	0x20AC, r24
	do
		d = xchg_spi(0xFF);
    2726:	8f ef       	ldi	r24, 0xFF	; 255
    2728:	eb df       	rcall	.-42     	; 0x2700 <xchg_spi>
	while (d != 0xFF && Timer2);
    272a:	8f 3f       	cpi	r24, 0xFF	; 255
    272c:	41 f0       	breq	.+16     	; 0x273e <select+0x2a>
    272e:	80 91 ac 20 	lds	r24, 0x20AC
    2732:	81 11       	cpse	r24, r1
    2734:	f8 cf       	rjmp	.-16     	; 0x2726 <select+0x12>
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* OK */
	deselect();
    2736:	e7 df       	rcall	.-50     	; 0x2706 <deselect>
	return 0;	/* Timeout */
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* OK */
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
	deselect();
	return 0;	/* Timeout */
}
    2742:	08 95       	ret

00002744 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    2744:	ff 92       	push	r15
    2746:	0f 93       	push	r16
    2748:	1f 93       	push	r17
    274a:	cf 93       	push	r28
    274c:	df 93       	push	r29
    274e:	c8 2f       	mov	r28, r24
    2750:	d4 2f       	mov	r29, r20
    2752:	15 2f       	mov	r17, r21
    2754:	06 2f       	mov	r16, r22
    2756:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    2758:	88 23       	and	r24, r24
    275a:	4c f4       	brge	.+18     	; 0x276e <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	ba 01       	movw	r22, r20
    2762:	87 e3       	ldi	r24, 0x37	; 55
    2764:	ef df       	rcall	.-34     	; 0x2744 <send_cmd>
		if (res > 1) return res;
    2766:	82 30       	cpi	r24, 0x02	; 2
    2768:	08 f0       	brcs	.+2      	; 0x276c <send_cmd+0x28>
    276a:	37 c0       	rjmp	.+110    	; 0x27da <send_cmd+0x96>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    276c:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    276e:	cc 30       	cpi	r28, 0x0C	; 12
    2770:	19 f1       	breq	.+70     	; 0x27b8 <send_cmd+0x74>
		deselect();
    2772:	c9 df       	rcall	.-110    	; 0x2706 <deselect>
		if (!select()) return 0xFF;
    2774:	cf df       	rcall	.-98     	; 0x2714 <select>
    2776:	89 2b       	or	r24, r25
    2778:	e9 f0       	breq	.+58     	; 0x27b4 <send_cmd+0x70>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    277a:	8c 2f       	mov	r24, r28
    277c:	80 64       	ori	r24, 0x40	; 64
    277e:	c0 df       	rcall	.-128    	; 0x2700 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    2780:	8f 2d       	mov	r24, r15
    2782:	be df       	rcall	.-132    	; 0x2700 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    2784:	80 2f       	mov	r24, r16
    2786:	bc df       	rcall	.-136    	; 0x2700 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    2788:	81 2f       	mov	r24, r17
    278a:	ba df       	rcall	.-140    	; 0x2700 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    278c:	8d 2f       	mov	r24, r29
    278e:	b8 df       	rcall	.-144    	; 0x2700 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    2790:	cc 23       	and	r28, r28
    2792:	01 f1       	breq	.+64     	; 0x27d4 <send_cmd+0x90>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    2794:	c8 30       	cpi	r28, 0x08	; 8
    2796:	d9 f0       	breq	.+54     	; 0x27ce <send_cmd+0x8a>
	xchg_spi(n);
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	b2 df       	rcall	.-156    	; 0x2700 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    279c:	cc 30       	cpi	r28, 0x0C	; 12
    279e:	11 f4       	brne	.+4      	; 0x27a4 <send_cmd+0x60>
    27a0:	8f ef       	ldi	r24, 0xFF	; 255
    27a2:	ae df       	rcall	.-164    	; 0x2700 <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    27a4:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    27a6:	8f ef       	ldi	r24, 0xFF	; 255
    27a8:	ab df       	rcall	.-170    	; 0x2700 <xchg_spi>
	while ((res & 0x80) && --n);
    27aa:	88 23       	and	r24, r24
    27ac:	b4 f4       	brge	.+44     	; 0x27da <send_cmd+0x96>
    27ae:	c1 50       	subi	r28, 0x01	; 1
    27b0:	d1 f7       	brne	.-12     	; 0x27a6 <send_cmd+0x62>
    27b2:	13 c0       	rjmp	.+38     	; 0x27da <send_cmd+0x96>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    27b4:	8f ef       	ldi	r24, 0xFF	; 255
    27b6:	11 c0       	rjmp	.+34     	; 0x27da <send_cmd+0x96>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    27b8:	8c e4       	ldi	r24, 0x4C	; 76
    27ba:	a2 df       	rcall	.-188    	; 0x2700 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    27bc:	8f 2d       	mov	r24, r15
    27be:	a0 df       	rcall	.-192    	; 0x2700 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    27c0:	80 2f       	mov	r24, r16
    27c2:	9e df       	rcall	.-196    	; 0x2700 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    27c4:	81 2f       	mov	r24, r17
    27c6:	9c df       	rcall	.-200    	; 0x2700 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    27c8:	8d 2f       	mov	r24, r29
    27ca:	9a df       	rcall	.-204    	; 0x2700 <xchg_spi>
    27cc:	e5 cf       	rjmp	.-54     	; 0x2798 <send_cmd+0x54>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    27ce:	87 e8       	ldi	r24, 0x87	; 135
    27d0:	97 df       	rcall	.-210    	; 0x2700 <xchg_spi>
    27d2:	e8 cf       	rjmp	.-48     	; 0x27a4 <send_cmd+0x60>
    27d4:	85 e9       	ldi	r24, 0x95	; 149
    27d6:	94 df       	rcall	.-216    	; 0x2700 <xchg_spi>
    27d8:	e5 cf       	rjmp	.-54     	; 0x27a4 <send_cmd+0x60>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	ff 90       	pop	r15
    27e4:	08 95       	ret

000027e6 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    27e6:	ef 92       	push	r14
    27e8:	ff 92       	push	r15
    27ea:	0f 93       	push	r16
    27ec:	1f 93       	push	r17
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	e8 2e       	mov	r14, r24
    27f4:	f9 2e       	mov	r15, r25
    27f6:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    27f8:	24 e1       	ldi	r18, 0x14	; 20
    27fa:	20 93 ad 20 	sts	0x20AD, r18
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    27fe:	8f ef       	ldi	r24, 0xFF	; 255
    2800:	7f df       	rcall	.-258    	; 0x2700 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    2802:	8f 3f       	cpi	r24, 0xFF	; 255
    2804:	29 f4       	brne	.+10     	; 0x2810 <rcvr_datablock+0x2a>
    2806:	20 91 ad 20 	lds	r18, 0x20AD
    280a:	21 11       	cpse	r18, r1
    280c:	f8 cf       	rjmp	.-16     	; 0x27fe <rcvr_datablock+0x18>
    280e:	17 c0       	rjmp	.+46     	; 0x283e <rcvr_datablock+0x58>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    2810:	8e 3f       	cpi	r24, 0xFE	; 254
    2812:	c1 f4       	brne	.+48     	; 0x2844 <rcvr_datablock+0x5e>
    2814:	ce 2d       	mov	r28, r14
    2816:	df 2d       	mov	r29, r15
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    2818:	8f ef       	ldi	r24, 0xFF	; 255
    281a:	a9 d7       	rcall	.+3922   	; 0x376e <spi_wr_rd>
    281c:	88 83       	st	Y, r24
		*p++ = spi_wr_rd(0xff);
    281e:	8f ef       	ldi	r24, 0xFF	; 255
    2820:	a6 d7       	rcall	.+3916   	; 0x376e <spi_wr_rd>
    2822:	89 83       	std	Y+1, r24	; 0x01
		
	} while (cnt -= 2);
    2824:	02 50       	subi	r16, 0x02	; 2
    2826:	11 09       	sbc	r17, r1
    2828:	22 96       	adiw	r28, 0x02	; 2
    282a:	01 15       	cp	r16, r1
    282c:	11 05       	cpc	r17, r1
    282e:	a1 f7       	brne	.-24     	; 0x2818 <rcvr_datablock+0x32>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    2830:	8f ef       	ldi	r24, 0xFF	; 255
    2832:	66 df       	rcall	.-308    	; 0x2700 <xchg_spi>
	xchg_spi(0xFF);
    2834:	8f ef       	ldi	r24, 0xFF	; 255
    2836:	64 df       	rcall	.-312    	; 0x2700 <xchg_spi>

	return 1;						/* Return with success */
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	05 c0       	rjmp	.+10     	; 0x2848 <rcvr_datablock+0x62>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <rcvr_datablock+0x62>
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    2848:	df 91       	pop	r29
    284a:	cf 91       	pop	r28
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	ff 90       	pop	r15
    2852:	ef 90       	pop	r14
    2854:	08 95       	ret

00002856 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    2856:	0f 93       	push	r16
    2858:	1f 93       	push	r17
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	8c 01       	movw	r16, r24
    2860:	c6 2f       	mov	r28, r22
	UINT wt			/* Timeout [ms] */
)
{
	BYTE d;

	Timer2 = wt / 10;
    2862:	92 e3       	ldi	r25, 0x32	; 50
    2864:	90 93 ac 20 	sts	0x20AC, r25
	do
		d = xchg_spi(0xFF);
    2868:	8f ef       	ldi	r24, 0xFF	; 255
    286a:	4a df       	rcall	.-364    	; 0x2700 <xchg_spi>
	while (d != 0xFF && Timer2);
    286c:	8f 3f       	cpi	r24, 0xFF	; 255
    286e:	29 f0       	breq	.+10     	; 0x287a <xmit_datablock+0x24>
    2870:	90 91 ac 20 	lds	r25, 0x20AC
    2874:	91 11       	cpse	r25, r1
    2876:	f8 cf       	rjmp	.-16     	; 0x2868 <xmit_datablock+0x12>
    2878:	1c c0       	rjmp	.+56     	; 0x28b2 <xmit_datablock+0x5c>
	BYTE resp;


	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
    287a:	8c 2f       	mov	r24, r28
    287c:	41 df       	rcall	.-382    	; 0x2700 <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
    287e:	cd 3f       	cpi	r28, 0xFD	; 253
    2880:	d9 f0       	breq	.+54     	; 0x28b8 <xmit_datablock+0x62>
    2882:	e8 01       	movw	r28, r16
    2884:	1e 5f       	subi	r17, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		spi_wr_rd(*p++);
    2886:	88 81       	ld	r24, Y
    2888:	72 d7       	rcall	.+3812   	; 0x376e <spi_wr_rd>
		spi_wr_rd(*p++);
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	70 d7       	rcall	.+3808   	; 0x376e <spi_wr_rd>
    288e:	22 96       	adiw	r28, 0x02	; 2
		
	} while (cnt -= 2);
    2890:	c0 17       	cp	r28, r16
    2892:	d1 07       	cpc	r29, r17
    2894:	c1 f7       	brne	.-16     	; 0x2886 <xmit_datablock+0x30>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    2896:	8f ef       	ldi	r24, 0xFF	; 255
    2898:	33 df       	rcall	.-410    	; 0x2700 <xchg_spi>
		xchg_spi(0xFF);
    289a:	8f ef       	ldi	r24, 0xFF	; 255
    289c:	31 df       	rcall	.-414    	; 0x2700 <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    289e:	8f ef       	ldi	r24, 0xFF	; 255
    28a0:	2f df       	rcall	.-418    	; 0x2700 <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    28a2:	28 2f       	mov	r18, r24
    28a4:	2f 71       	andi	r18, 0x1F	; 31
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	25 30       	cpi	r18, 0x05	; 5
    28ac:	39 f0       	breq	.+14     	; 0x28bc <xmit_datablock+0x66>
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	05 c0       	rjmp	.+10     	; 0x28bc <xmit_datablock+0x66>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	02 c0       	rjmp	.+4      	; 0x28bc <xmit_datablock+0x66>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
}
    28bc:	df 91       	pop	r29
    28be:	cf 91       	pop	r28
    28c0:	1f 91       	pop	r17
    28c2:	0f 91       	pop	r16
    28c4:	08 95       	ret

000028c6 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    28c6:	ef 92       	push	r14
    28c8:	ff 92       	push	r15
    28ca:	0f 93       	push	r16
    28cc:	1f 93       	push	r17
    28ce:	cf 93       	push	r28
    28d0:	df 93       	push	r29
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <disk_initialize+0xe>
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <disk_initialize+0x10>
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    28da:	81 11       	cpse	r24, r1
    28dc:	99 c0       	rjmp	.+306    	; 0x2a10 <disk_initialize+0x14a>

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    28de:	38 d7       	rcall	.+3696   	; 0x3750 <spi_off>
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    28e0:	80 91 04 20 	lds	r24, 0x2004
    28e4:	81 ff       	sbrs	r24, 1
    28e6:	03 c0       	rjmp	.+6      	; 0x28ee <disk_initialize+0x28>
    28e8:	80 91 04 20 	lds	r24, 0x2004
    28ec:	9c c0       	rjmp	.+312    	; 0x2a26 <disk_initialize+0x160>
	//Used to check for a timeout, not needed
	//TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
	//TCC1.PER = F_CPU/DIVIDER;
	//TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
	
	spi_on();
    28ee:	26 d7       	rcall	.+3660   	; 0x373c <spi_on>

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    28f0:	82 ed       	ldi	r24, 0xD2	; 210
    28f2:	80 93 c0 08 	sts	0x08C0, r24
    28f6:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    28f8:	8f ef       	ldi	r24, 0xFF	; 255
    28fa:	02 df       	rcall	.-508    	; 0x2700 <xchg_spi>
    28fc:	11 50       	subi	r17, 0x01	; 1
    28fe:	e1 f7       	brne	.-8      	; 0x28f8 <disk_initialize+0x32>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    2900:	40 e0       	ldi	r20, 0x00	; 0
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	ba 01       	movw	r22, r20
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	1d df       	rcall	.-454    	; 0x2744 <send_cmd>
    290a:	81 30       	cpi	r24, 0x01	; 1
    290c:	09 f0       	breq	.+2      	; 0x2910 <disk_initialize+0x4a>
    290e:	87 c0       	rjmp	.+270    	; 0x2a1e <disk_initialize+0x158>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    2910:	84 e6       	ldi	r24, 0x64	; 100
    2912:	80 93 ad 20 	sts	0x20AD, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    2916:	4a ea       	ldi	r20, 0xAA	; 170
    2918:	51 e0       	ldi	r21, 0x01	; 1
    291a:	60 e0       	ldi	r22, 0x00	; 0
    291c:	70 e0       	ldi	r23, 0x00	; 0
    291e:	88 e0       	ldi	r24, 0x08	; 8
    2920:	11 df       	rcall	.-478    	; 0x2744 <send_cmd>
    2922:	81 30       	cpi	r24, 0x01	; 1
    2924:	09 f0       	breq	.+2      	; 0x2928 <disk_initialize+0x62>
    2926:	3f c0       	rjmp	.+126    	; 0x29a6 <disk_initialize+0xe0>
    2928:	7e 01       	movw	r14, r28
    292a:	85 e0       	ldi	r24, 0x05	; 5
    292c:	e8 0e       	add	r14, r24
    292e:	f1 1c       	adc	r15, r1
    2930:	8e 01       	movw	r16, r28
    2932:	0f 5f       	subi	r16, 0xFF	; 255
    2934:	1f 4f       	sbci	r17, 0xFF	; 255
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    2936:	8f ef       	ldi	r24, 0xFF	; 255
    2938:	e3 de       	rcall	.-570    	; 0x2700 <xchg_spi>
    293a:	f8 01       	movw	r30, r16
    293c:	81 93       	st	Z+, r24
    293e:	8f 01       	movw	r16, r30
    2940:	ee 15       	cp	r30, r14
    2942:	ff 05       	cpc	r31, r15
    2944:	c1 f7       	brne	.-16     	; 0x2936 <disk_initialize+0x70>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	81 30       	cpi	r24, 0x01	; 1
    294a:	09 f0       	breq	.+2      	; 0x294e <disk_initialize+0x88>
    294c:	68 c0       	rjmp	.+208    	; 0x2a1e <disk_initialize+0x158>
    294e:	8c 81       	ldd	r24, Y+4	; 0x04
    2950:	8a 3a       	cpi	r24, 0xAA	; 170
    2952:	09 f0       	breq	.+2      	; 0x2956 <disk_initialize+0x90>
    2954:	64 c0       	rjmp	.+200    	; 0x2a1e <disk_initialize+0x158>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    2956:	80 91 ad 20 	lds	r24, 0x20AD
    295a:	88 23       	and	r24, r24
    295c:	41 f0       	breq	.+16     	; 0x296e <disk_initialize+0xa8>
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	60 e0       	ldi	r22, 0x00	; 0
    2964:	70 e4       	ldi	r23, 0x40	; 64
    2966:	89 ea       	ldi	r24, 0xA9	; 169
    2968:	ed de       	rcall	.-550    	; 0x2744 <send_cmd>
    296a:	81 11       	cpse	r24, r1
    296c:	f4 cf       	rjmp	.-24     	; 0x2956 <disk_initialize+0x90>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    296e:	80 91 ad 20 	lds	r24, 0x20AD
    2972:	88 23       	and	r24, r24
    2974:	09 f4       	brne	.+2      	; 0x2978 <disk_initialize+0xb2>
    2976:	53 c0       	rjmp	.+166    	; 0x2a1e <disk_initialize+0x158>
    2978:	40 e0       	ldi	r20, 0x00	; 0
    297a:	50 e0       	ldi	r21, 0x00	; 0
    297c:	ba 01       	movw	r22, r20
    297e:	8a e3       	ldi	r24, 0x3A	; 58
    2980:	e1 de       	rcall	.-574    	; 0x2744 <send_cmd>
    2982:	81 11       	cpse	r24, r1
    2984:	4c c0       	rjmp	.+152    	; 0x2a1e <disk_initialize+0x158>
    2986:	8e 01       	movw	r16, r28
    2988:	0f 5f       	subi	r16, 0xFF	; 255
    298a:	1f 4f       	sbci	r17, 0xFF	; 255
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    298c:	8f ef       	ldi	r24, 0xFF	; 255
    298e:	b8 de       	rcall	.-656    	; 0x2700 <xchg_spi>
    2990:	f8 01       	movw	r30, r16
    2992:	81 93       	st	Z+, r24
    2994:	8f 01       	movw	r16, r30
    2996:	ee 16       	cp	r14, r30
    2998:	ff 06       	cpc	r15, r31
    299a:	c1 f7       	brne	.-16     	; 0x298c <disk_initialize+0xc6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	86 fd       	sbrc	r24, 6
    29a0:	39 c0       	rjmp	.+114    	; 0x2a14 <disk_initialize+0x14e>
    29a2:	84 e0       	ldi	r24, 0x04	; 4
    29a4:	38 c0       	rjmp	.+112    	; 0x2a16 <disk_initialize+0x150>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	50 e0       	ldi	r21, 0x00	; 0
    29aa:	ba 01       	movw	r22, r20
    29ac:	89 ea       	ldi	r24, 0xA9	; 169
    29ae:	ca de       	rcall	.-620    	; 0x2744 <send_cmd>
    29b0:	82 30       	cpi	r24, 0x02	; 2
    29b2:	18 f4       	brcc	.+6      	; 0x29ba <disk_initialize+0xf4>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    29b4:	02 e0       	ldi	r16, 0x02	; 2
    29b6:	19 ea       	ldi	r17, 0xA9	; 169
    29b8:	02 c0       	rjmp	.+4      	; 0x29be <disk_initialize+0xf8>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    29ba:	01 e0       	ldi	r16, 0x01	; 1
    29bc:	11 e0       	ldi	r17, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    29be:	90 91 ad 20 	lds	r25, 0x20AD
    29c2:	99 23       	and	r25, r25
    29c4:	39 f0       	breq	.+14     	; 0x29d4 <disk_initialize+0x10e>
    29c6:	40 e0       	ldi	r20, 0x00	; 0
    29c8:	50 e0       	ldi	r21, 0x00	; 0
    29ca:	ba 01       	movw	r22, r20
    29cc:	81 2f       	mov	r24, r17
    29ce:	ba de       	rcall	.-652    	; 0x2744 <send_cmd>
    29d0:	81 11       	cpse	r24, r1
    29d2:	f5 cf       	rjmp	.-22     	; 0x29be <disk_initialize+0xf8>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    29d4:	80 91 ad 20 	lds	r24, 0x20AD
    29d8:	88 23       	and	r24, r24
    29da:	09 f1       	breq	.+66     	; 0x2a1e <disk_initialize+0x158>
    29dc:	40 e0       	ldi	r20, 0x00	; 0
    29de:	52 e0       	ldi	r21, 0x02	; 2
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	70 e0       	ldi	r23, 0x00	; 0
    29e4:	80 e1       	ldi	r24, 0x10	; 16
    29e6:	ae de       	rcall	.-676    	; 0x2744 <send_cmd>
    29e8:	81 11       	cpse	r24, r1
    29ea:	19 c0       	rjmp	.+50     	; 0x2a1e <disk_initialize+0x158>
				ty = 0;
		}
	}
	CardType = ty;
    29ec:	00 93 ab 20 	sts	0x20AB, r16
	deselect();
    29f0:	8a de       	rcall	.-748    	; 0x2706 <deselect>

	if (ty) {			/* Initialization succeded */
    29f2:	00 23       	and	r16, r16
    29f4:	49 f0       	breq	.+18     	; 0x2a08 <disk_initialize+0x142>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    29f6:	80 91 04 20 	lds	r24, 0x2004
    29fa:	8e 7f       	andi	r24, 0xFE	; 254
    29fc:	80 93 04 20 	sts	0x2004, r24
		FCLK_FAST();
    2a00:	80 ed       	ldi	r24, 0xD0	; 208
    2a02:	80 93 c0 08 	sts	0x08C0, r24
    2a06:	01 c0       	rjmp	.+2      	; 0x2a0a <disk_initialize+0x144>

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    2a08:	a3 d6       	rcall	.+3398   	; 0x3750 <spi_off>
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    2a0a:	80 91 04 20 	lds	r24, 0x2004
    2a0e:	0b c0       	rjmp	.+22     	; 0x2a26 <disk_initialize+0x160>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	09 c0       	rjmp	.+18     	; 0x2a26 <disk_initialize+0x160>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2a14:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    2a16:	80 93 ab 20 	sts	0x20AB, r24
	deselect();
    2a1a:	75 de       	rcall	.-790    	; 0x2706 <deselect>
    2a1c:	ec cf       	rjmp	.-40     	; 0x29f6 <disk_initialize+0x130>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    2a1e:	10 92 ab 20 	sts	0x20AB, r1
	deselect();
    2a22:	71 de       	rcall	.-798    	; 0x2706 <deselect>
    2a24:	f1 cf       	rjmp	.-30     	; 0x2a08 <disk_initialize+0x142>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    2a26:	24 96       	adiw	r28, 0x04	; 4
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	de bf       	out	0x3e, r29	; 62
    2a2c:	df 91       	pop	r29
    2a2e:	cf 91       	pop	r28
    2a30:	1f 91       	pop	r17
    2a32:	0f 91       	pop	r16
    2a34:	ff 90       	pop	r15
    2a36:	ef 90       	pop	r14
    2a38:	08 95       	ret

00002a3a <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    2a3a:	81 11       	cpse	r24, r1
    2a3c:	03 c0       	rjmp	.+6      	; 0x2a44 <disk_status+0xa>
	return Stat;
    2a3e:	80 91 04 20 	lds	r24, 0x2004
    2a42:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    2a44:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    2a46:	08 95       	ret

00002a48 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    2a48:	ff 92       	push	r15
    2a4a:	0f 93       	push	r16
    2a4c:	1f 93       	push	r17
    2a4e:	cf 93       	push	r28
    2a50:	df 93       	push	r29
    2a52:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    2a54:	81 11       	cpse	r24, r1
    2a56:	41 c0       	rjmp	.+130    	; 0x2ada <disk_read+0x92>
    2a58:	01 15       	cp	r16, r1
    2a5a:	11 05       	cpc	r17, r1
    2a5c:	09 f4       	brne	.+2      	; 0x2a60 <disk_read+0x18>
    2a5e:	3f c0       	rjmp	.+126    	; 0x2ade <disk_read+0x96>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2a60:	80 91 04 20 	lds	r24, 0x2004
    2a64:	80 fd       	sbrc	r24, 0
    2a66:	3d c0       	rjmp	.+122    	; 0x2ae2 <disk_read+0x9a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2a68:	80 91 ab 20 	lds	r24, 0x20AB
    2a6c:	83 fd       	sbrc	r24, 3
    2a6e:	09 c0       	rjmp	.+18     	; 0x2a82 <disk_read+0x3a>
    2a70:	01 2e       	mov	r0, r17
    2a72:	19 e0       	ldi	r17, 0x09	; 9
    2a74:	22 0f       	add	r18, r18
    2a76:	33 1f       	adc	r19, r19
    2a78:	44 1f       	adc	r20, r20
    2a7a:	55 1f       	adc	r21, r21
    2a7c:	1a 95       	dec	r17
    2a7e:	d1 f7       	brne	.-12     	; 0x2a74 <disk_read+0x2c>
    2a80:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    2a82:	02 30       	cpi	r16, 0x02	; 2
    2a84:	11 05       	cpc	r17, r1
    2a86:	28 f0       	brcs	.+10     	; 0x2a92 <disk_read+0x4a>
    2a88:	0f 2e       	mov	r0, r31
    2a8a:	f2 e1       	ldi	r31, 0x12	; 18
    2a8c:	ff 2e       	mov	r15, r31
    2a8e:	f0 2d       	mov	r31, r0
    2a90:	04 c0       	rjmp	.+8      	; 0x2a9a <disk_read+0x52>
    2a92:	0f 2e       	mov	r0, r31
    2a94:	f1 e1       	ldi	r31, 0x11	; 17
    2a96:	ff 2e       	mov	r15, r31
    2a98:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    2a9a:	ba 01       	movw	r22, r20
    2a9c:	a9 01       	movw	r20, r18
    2a9e:	8f 2d       	mov	r24, r15
    2aa0:	51 de       	rcall	.-862    	; 0x2744 <send_cmd>
    2aa2:	81 11       	cpse	r24, r1
    2aa4:	14 c0       	rjmp	.+40     	; 0x2ace <disk_read+0x86>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	72 e0       	ldi	r23, 0x02	; 2
    2aaa:	ce 01       	movw	r24, r28
    2aac:	9c de       	rcall	.-712    	; 0x27e6 <rcvr_datablock>
    2aae:	89 2b       	or	r24, r25
    2ab0:	31 f0       	breq	.+12     	; 0x2abe <disk_read+0x76>
			buff += 512;
    2ab2:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    2ab4:	01 50       	subi	r16, 0x01	; 1
    2ab6:	11 09       	sbc	r17, r1
    2ab8:	01 15       	cp	r16, r1
    2aba:	11 05       	cpc	r17, r1
    2abc:	a1 f7       	brne	.-24     	; 0x2aa6 <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    2abe:	82 e1       	ldi	r24, 0x12	; 18
    2ac0:	f8 12       	cpse	r15, r24
    2ac2:	05 c0       	rjmp	.+10     	; 0x2ace <disk_read+0x86>
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	50 e0       	ldi	r21, 0x00	; 0
    2ac8:	ba 01       	movw	r22, r20
    2aca:	8c e0       	ldi	r24, 0x0C	; 12
    2acc:	3b de       	rcall	.-906    	; 0x2744 <send_cmd>
	}
	deselect();
    2ace:	1b de       	rcall	.-970    	; 0x2706 <deselect>

	return count ? RES_ERROR : RES_OK;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	01 2b       	or	r16, r17
    2ad4:	39 f4       	brne	.+14     	; 0x2ae4 <disk_read+0x9c>
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	05 c0       	rjmp	.+10     	; 0x2ae4 <disk_read+0x9c>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    2ada:	84 e0       	ldi	r24, 0x04	; 4
    2adc:	03 c0       	rjmp	.+6      	; 0x2ae4 <disk_read+0x9c>
    2ade:	84 e0       	ldi	r24, 0x04	; 4
    2ae0:	01 c0       	rjmp	.+2      	; 0x2ae4 <disk_read+0x9c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2ae2:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2ae4:	df 91       	pop	r29
    2ae6:	cf 91       	pop	r28
    2ae8:	1f 91       	pop	r17
    2aea:	0f 91       	pop	r16
    2aec:	ff 90       	pop	r15
    2aee:	08 95       	ret

00002af0 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    2af0:	cf 92       	push	r12
    2af2:	df 92       	push	r13
    2af4:	ef 92       	push	r14
    2af6:	ff 92       	push	r15
    2af8:	0f 93       	push	r16
    2afa:	1f 93       	push	r17
    2afc:	cf 93       	push	r28
    2afe:	df 93       	push	r29
    2b00:	eb 01       	movw	r28, r22
    2b02:	69 01       	movw	r12, r18
    2b04:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    2b06:	81 11       	cpse	r24, r1
    2b08:	53 c0       	rjmp	.+166    	; 0x2bb0 <disk_write+0xc0>
    2b0a:	01 15       	cp	r16, r1
    2b0c:	11 05       	cpc	r17, r1
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <disk_write+0x22>
    2b10:	51 c0       	rjmp	.+162    	; 0x2bb4 <disk_write+0xc4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2b12:	80 91 04 20 	lds	r24, 0x2004
    2b16:	80 fd       	sbrc	r24, 0
    2b18:	4f c0       	rjmp	.+158    	; 0x2bb8 <disk_write+0xc8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    2b1a:	80 91 04 20 	lds	r24, 0x2004
    2b1e:	82 fd       	sbrc	r24, 2
    2b20:	4d c0       	rjmp	.+154    	; 0x2bbc <disk_write+0xcc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2b22:	80 91 ab 20 	lds	r24, 0x20AB
    2b26:	83 fd       	sbrc	r24, 3
    2b28:	09 c0       	rjmp	.+18     	; 0x2b3c <disk_write+0x4c>
    2b2a:	0b 2e       	mov	r0, r27
    2b2c:	b9 e0       	ldi	r27, 0x09	; 9
    2b2e:	cc 0c       	add	r12, r12
    2b30:	dd 1c       	adc	r13, r13
    2b32:	ee 1c       	adc	r14, r14
    2b34:	ff 1c       	adc	r15, r15
    2b36:	ba 95       	dec	r27
    2b38:	d1 f7       	brne	.-12     	; 0x2b2e <disk_write+0x3e>
    2b3a:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    2b3c:	01 30       	cpi	r16, 0x01	; 1
    2b3e:	11 05       	cpc	r17, r1
    2b40:	89 f4       	brne	.+34     	; 0x2b64 <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    2b42:	b7 01       	movw	r22, r14
    2b44:	a6 01       	movw	r20, r12
    2b46:	88 e1       	ldi	r24, 0x18	; 24
    2b48:	fd dd       	rcall	.-1030   	; 0x2744 <send_cmd>
    2b4a:	81 11       	cpse	r24, r1
    2b4c:	2b c0       	rjmp	.+86     	; 0x2ba4 <disk_write+0xb4>
			&& xmit_datablock(buff, 0xFE))
    2b4e:	6e ef       	ldi	r22, 0xFE	; 254
    2b50:	ce 01       	movw	r24, r28
    2b52:	81 de       	rcall	.-766    	; 0x2856 <xmit_datablock>
    2b54:	31 e0       	ldi	r19, 0x01	; 1
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	89 2b       	or	r24, r25
    2b5a:	09 f0       	breq	.+2      	; 0x2b5e <disk_write+0x6e>
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	03 2f       	mov	r16, r19
    2b60:	12 2f       	mov	r17, r18
    2b62:	20 c0       	rjmp	.+64     	; 0x2ba4 <disk_write+0xb4>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    2b64:	86 70       	andi	r24, 0x06	; 6
    2b66:	29 f0       	breq	.+10     	; 0x2b72 <disk_write+0x82>
    2b68:	a8 01       	movw	r20, r16
    2b6a:	60 e0       	ldi	r22, 0x00	; 0
    2b6c:	70 e0       	ldi	r23, 0x00	; 0
    2b6e:	87 e9       	ldi	r24, 0x97	; 151
    2b70:	e9 dd       	rcall	.-1070   	; 0x2744 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    2b72:	b7 01       	movw	r22, r14
    2b74:	a6 01       	movw	r20, r12
    2b76:	89 e1       	ldi	r24, 0x19	; 25
    2b78:	e5 dd       	rcall	.-1078   	; 0x2744 <send_cmd>
    2b7a:	81 11       	cpse	r24, r1
    2b7c:	13 c0       	rjmp	.+38     	; 0x2ba4 <disk_write+0xb4>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    2b7e:	6c ef       	ldi	r22, 0xFC	; 252
    2b80:	ce 01       	movw	r24, r28
    2b82:	69 de       	rcall	.-814    	; 0x2856 <xmit_datablock>
    2b84:	89 2b       	or	r24, r25
    2b86:	31 f0       	breq	.+12     	; 0x2b94 <disk_write+0xa4>
				buff += 512;
    2b88:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    2b8a:	01 50       	subi	r16, 0x01	; 1
    2b8c:	11 09       	sbc	r17, r1
    2b8e:	01 15       	cp	r16, r1
    2b90:	11 05       	cpc	r17, r1
    2b92:	a9 f7       	brne	.-22     	; 0x2b7e <disk_write+0x8e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    2b94:	6d ef       	ldi	r22, 0xFD	; 253
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	5d de       	rcall	.-838    	; 0x2856 <xmit_datablock>
    2b9c:	89 2b       	or	r24, r25
    2b9e:	11 f4       	brne	.+4      	; 0x2ba4 <disk_write+0xb4>
				count = 1;
    2ba0:	01 e0       	ldi	r16, 0x01	; 1
    2ba2:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    2ba4:	b0 dd       	rcall	.-1184   	; 0x2706 <deselect>

	return count ? RES_ERROR : RES_OK;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	01 2b       	or	r16, r17
    2baa:	49 f4       	brne	.+18     	; 0x2bbe <disk_write+0xce>
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	07 c0       	rjmp	.+14     	; 0x2bbe <disk_write+0xce>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    2bb0:	84 e0       	ldi	r24, 0x04	; 4
    2bb2:	05 c0       	rjmp	.+10     	; 0x2bbe <disk_write+0xce>
    2bb4:	84 e0       	ldi	r24, 0x04	; 4
    2bb6:	03 c0       	rjmp	.+6      	; 0x2bbe <disk_write+0xce>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2bb8:	83 e0       	ldi	r24, 0x03	; 3
    2bba:	01 c0       	rjmp	.+2      	; 0x2bbe <disk_write+0xce>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    2bbc:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2bbe:	df 91       	pop	r29
    2bc0:	cf 91       	pop	r28
    2bc2:	1f 91       	pop	r17
    2bc4:	0f 91       	pop	r16
    2bc6:	ff 90       	pop	r15
    2bc8:	ef 90       	pop	r14
    2bca:	df 90       	pop	r13
    2bcc:	cf 90       	pop	r12
    2bce:	08 95       	ret

00002bd0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    2bd0:	ef 92       	push	r14
    2bd2:	ff 92       	push	r15
    2bd4:	0f 93       	push	r16
    2bd6:	1f 93       	push	r17
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	60 97       	sbiw	r28, 0x10	; 16
    2be2:	cd bf       	out	0x3d, r28	; 61
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    2be8:	81 11       	cpse	r24, r1
    2bea:	82 c1       	rjmp	.+772    	; 0x2ef0 <disk_ioctl+0x320>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2bec:	80 91 04 20 	lds	r24, 0x2004
    2bf0:	80 fd       	sbrc	r24, 0
    2bf2:	80 c1       	rjmp	.+768    	; 0x2ef4 <disk_ioctl+0x324>

	switch (cmd) {
    2bf4:	06 2f       	mov	r16, r22
    2bf6:	10 e0       	ldi	r17, 0x00	; 0
    2bf8:	07 33       	cpi	r16, 0x37	; 55
    2bfa:	11 05       	cpc	r17, r1
    2bfc:	08 f0       	brcs	.+2      	; 0x2c00 <disk_ioctl+0x30>
    2bfe:	5e c1       	rjmp	.+700    	; 0x2ebc <disk_ioctl+0x2ec>
    2c00:	f8 01       	movw	r30, r16
    2c02:	e2 50       	subi	r30, 0x02	; 2
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	22 c7       	rjmp	.+3652   	; 0x3a4c <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    2c08:	85 dd       	rcall	.-1270   	; 0x2714 <select>
    2c0a:	11 e0       	ldi	r17, 0x01	; 1
    2c0c:	89 2b       	or	r24, r25
    2c0e:	09 f4       	brne	.+2      	; 0x2c12 <disk_ioctl+0x42>
    2c10:	6c c1       	rjmp	.+728    	; 0x2eea <disk_ioctl+0x31a>
    2c12:	10 e0       	ldi	r17, 0x00	; 0
    2c14:	6a c1       	rjmp	.+724    	; 0x2eea <disk_ioctl+0x31a>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    2c16:	40 e0       	ldi	r20, 0x00	; 0
    2c18:	50 e0       	ldi	r21, 0x00	; 0
    2c1a:	ba 01       	movw	r22, r20
    2c1c:	89 e0       	ldi	r24, 0x09	; 9
    2c1e:	92 dd       	rcall	.-1244   	; 0x2744 <send_cmd>
    2c20:	81 11       	cpse	r24, r1
    2c22:	4e c1       	rjmp	.+668    	; 0x2ec0 <disk_ioctl+0x2f0>
    2c24:	60 e1       	ldi	r22, 0x10	; 16
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	ce 01       	movw	r24, r28
    2c2a:	01 96       	adiw	r24, 0x01	; 1
    2c2c:	dc dd       	rcall	.-1096   	; 0x27e6 <rcvr_datablock>
    2c2e:	89 2b       	or	r24, r25
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <disk_ioctl+0x64>
    2c32:	48 c1       	rjmp	.+656    	; 0x2ec4 <disk_ioctl+0x2f4>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	82 95       	swap	r24
    2c38:	86 95       	lsr	r24
    2c3a:	86 95       	lsr	r24
    2c3c:	83 70       	andi	r24, 0x03	; 3
    2c3e:	81 30       	cpi	r24, 0x01	; 1
    2c40:	31 f5       	brne	.+76     	; 0x2c8e <disk_ioctl+0xbe>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    2c42:	88 85       	ldd	r24, Y+8	; 0x08
    2c44:	8f 73       	andi	r24, 0x3F	; 63
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	a0 e0       	ldi	r26, 0x00	; 0
    2c4a:	b0 e0       	ldi	r27, 0x00	; 0
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	99 27       	eor	r25, r25
    2c50:	88 27       	eor	r24, r24
    2c52:	01 96       	adiw	r24, 0x01	; 1
    2c54:	a1 1d       	adc	r26, r1
    2c56:	b1 1d       	adc	r27, r1
    2c58:	29 85       	ldd	r18, Y+9	; 0x09
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	32 2f       	mov	r19, r18
    2c5e:	22 27       	eor	r18, r18
    2c60:	4a 85       	ldd	r20, Y+10	; 0x0a
    2c62:	24 0f       	add	r18, r20
    2c64:	31 1d       	adc	r19, r1
    2c66:	82 0f       	add	r24, r18
    2c68:	93 1f       	adc	r25, r19
    2c6a:	a1 1d       	adc	r26, r1
    2c6c:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = csize << 10;
    2c6e:	07 2e       	mov	r0, r23
    2c70:	7a e0       	ldi	r23, 0x0A	; 10
    2c72:	88 0f       	add	r24, r24
    2c74:	99 1f       	adc	r25, r25
    2c76:	aa 1f       	adc	r26, r26
    2c78:	bb 1f       	adc	r27, r27
    2c7a:	7a 95       	dec	r23
    2c7c:	d1 f7       	brne	.-12     	; 0x2c72 <disk_ioctl+0xa2>
    2c7e:	70 2d       	mov	r23, r0
    2c80:	f7 01       	movw	r30, r14
    2c82:	80 83       	st	Z, r24
    2c84:	91 83       	std	Z+1, r25	; 0x01
    2c86:	a2 83       	std	Z+2, r26	; 0x02
    2c88:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    2c8a:	10 e0       	ldi	r17, 0x00	; 0
    2c8c:	2e c1       	rjmp	.+604    	; 0x2eea <disk_ioctl+0x31a>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    2c8e:	49 85       	ldd	r20, Y+9	; 0x09
    2c90:	42 95       	swap	r20
    2c92:	46 95       	lsr	r20
    2c94:	46 95       	lsr	r20
    2c96:	43 70       	andi	r20, 0x03	; 3
    2c98:	88 85       	ldd	r24, Y+8	; 0x08
    2c9a:	50 e0       	ldi	r21, 0x00	; 0
    2c9c:	f4 e0       	ldi	r31, 0x04	; 4
    2c9e:	8f 9f       	mul	r24, r31
    2ca0:	40 0d       	add	r20, r0
    2ca2:	51 1d       	adc	r21, r1
    2ca4:	11 24       	eor	r1, r1
    2ca6:	4f 5f       	subi	r20, 0xFF	; 255
    2ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    2caa:	8f 81       	ldd	r24, Y+7	; 0x07
    2cac:	83 70       	andi	r24, 0x03	; 3
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	98 2f       	mov	r25, r24
    2cb2:	88 27       	eor	r24, r24
    2cb4:	99 0f       	add	r25, r25
    2cb6:	99 0f       	add	r25, r25
    2cb8:	48 0f       	add	r20, r24
    2cba:	59 1f       	adc	r21, r25
    2cbc:	60 e0       	ldi	r22, 0x00	; 0
    2cbe:	70 e0       	ldi	r23, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    2cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc2:	9f 70       	andi	r25, 0x0F	; 15
    2cc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cc6:	88 1f       	adc	r24, r24
    2cc8:	88 27       	eor	r24, r24
    2cca:	88 1f       	adc	r24, r24
    2ccc:	98 0f       	add	r25, r24
    2cce:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cd0:	83 70       	andi	r24, 0x03	; 3
    2cd2:	88 0f       	add	r24, r24
    2cd4:	89 0f       	add	r24, r25
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    2cd6:	87 50       	subi	r24, 0x07	; 7
    2cd8:	8a 01       	movw	r16, r20
    2cda:	9b 01       	movw	r18, r22
    2cdc:	04 c0       	rjmp	.+8      	; 0x2ce6 <disk_ioctl+0x116>
    2cde:	00 0f       	add	r16, r16
    2ce0:	11 1f       	adc	r17, r17
    2ce2:	22 1f       	adc	r18, r18
    2ce4:	33 1f       	adc	r19, r19
    2ce6:	8a 95       	dec	r24
    2ce8:	d2 f7       	brpl	.-12     	; 0x2cde <disk_ioctl+0x10e>
    2cea:	f7 01       	movw	r30, r14
    2cec:	00 83       	st	Z, r16
    2cee:	11 83       	std	Z+1, r17	; 0x01
    2cf0:	22 83       	std	Z+2, r18	; 0x02
    2cf2:	33 83       	std	Z+3, r19	; 0x03
			}
			res = RES_OK;
    2cf4:	10 e0       	ldi	r17, 0x00	; 0
    2cf6:	f9 c0       	rjmp	.+498    	; 0x2eea <disk_ioctl+0x31a>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    2cf8:	80 91 ab 20 	lds	r24, 0x20AB
    2cfc:	82 ff       	sbrs	r24, 2
    2cfe:	2d c0       	rjmp	.+90     	; 0x2d5a <disk_ioctl+0x18a>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    2d00:	40 e0       	ldi	r20, 0x00	; 0
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	ba 01       	movw	r22, r20
    2d06:	8d e8       	ldi	r24, 0x8D	; 141
    2d08:	1d dd       	rcall	.-1478   	; 0x2744 <send_cmd>
    2d0a:	81 11       	cpse	r24, r1
    2d0c:	dd c0       	rjmp	.+442    	; 0x2ec8 <disk_ioctl+0x2f8>
				xchg_spi(0xFF);
    2d0e:	8f ef       	ldi	r24, 0xFF	; 255
    2d10:	f7 dc       	rcall	.-1554   	; 0x2700 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    2d12:	60 e1       	ldi	r22, 0x10	; 16
    2d14:	70 e0       	ldi	r23, 0x00	; 0
    2d16:	ce 01       	movw	r24, r28
    2d18:	01 96       	adiw	r24, 0x01	; 1
    2d1a:	65 dd       	rcall	.-1334   	; 0x27e6 <rcvr_datablock>
    2d1c:	89 2b       	or	r24, r25
    2d1e:	09 f4       	brne	.+2      	; 0x2d22 <disk_ioctl+0x152>
    2d20:	d5 c0       	rjmp	.+426    	; 0x2ecc <disk_ioctl+0x2fc>
    2d22:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    2d24:	8f ef       	ldi	r24, 0xFF	; 255
    2d26:	ec dc       	rcall	.-1576   	; 0x2700 <xchg_spi>
    2d28:	11 50       	subi	r17, 0x01	; 1
    2d2a:	e1 f7       	brne	.-8      	; 0x2d24 <disk_ioctl+0x154>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    2d2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d2e:	82 95       	swap	r24
    2d30:	8f 70       	andi	r24, 0x0F	; 15
    2d32:	40 e1       	ldi	r20, 0x10	; 16
    2d34:	50 e0       	ldi	r21, 0x00	; 0
    2d36:	60 e0       	ldi	r22, 0x00	; 0
    2d38:	70 e0       	ldi	r23, 0x00	; 0
    2d3a:	8a 01       	movw	r16, r20
    2d3c:	9b 01       	movw	r18, r22
    2d3e:	04 c0       	rjmp	.+8      	; 0x2d48 <disk_ioctl+0x178>
    2d40:	00 0f       	add	r16, r16
    2d42:	11 1f       	adc	r17, r17
    2d44:	22 1f       	adc	r18, r18
    2d46:	33 1f       	adc	r19, r19
    2d48:	8a 95       	dec	r24
    2d4a:	d2 f7       	brpl	.-12     	; 0x2d40 <disk_ioctl+0x170>
    2d4c:	f7 01       	movw	r30, r14
    2d4e:	00 83       	st	Z, r16
    2d50:	11 83       	std	Z+1, r17	; 0x01
    2d52:	22 83       	std	Z+2, r18	; 0x02
    2d54:	33 83       	std	Z+3, r19	; 0x03
					res = RES_OK;
    2d56:	10 e0       	ldi	r17, 0x00	; 0
    2d58:	c8 c0       	rjmp	.+400    	; 0x2eea <disk_ioctl+0x31a>
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    2d5a:	40 e0       	ldi	r20, 0x00	; 0
    2d5c:	50 e0       	ldi	r21, 0x00	; 0
    2d5e:	ba 01       	movw	r22, r20
    2d60:	89 e0       	ldi	r24, 0x09	; 9
    2d62:	f0 dc       	rcall	.-1568   	; 0x2744 <send_cmd>
    2d64:	81 11       	cpse	r24, r1
    2d66:	b4 c0       	rjmp	.+360    	; 0x2ed0 <disk_ioctl+0x300>
    2d68:	60 e1       	ldi	r22, 0x10	; 16
    2d6a:	70 e0       	ldi	r23, 0x00	; 0
    2d6c:	ce 01       	movw	r24, r28
    2d6e:	01 96       	adiw	r24, 0x01	; 1
    2d70:	3a dd       	rcall	.-1420   	; 0x27e6 <rcvr_datablock>
    2d72:	89 2b       	or	r24, r25
    2d74:	09 f4       	brne	.+2      	; 0x2d78 <disk_ioctl+0x1a8>
    2d76:	ae c0       	rjmp	.+348    	; 0x2ed4 <disk_ioctl+0x304>
				if (CardType & CT_SD1) {	/* SDv1 */
    2d78:	80 91 ab 20 	lds	r24, 0x20AB
    2d7c:	81 ff       	sbrs	r24, 1
    2d7e:	20 c0       	rjmp	.+64     	; 0x2dc0 <disk_ioctl+0x1f0>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    2d80:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d82:	88 1f       	adc	r24, r24
    2d84:	88 27       	eor	r24, r24
    2d86:	88 1f       	adc	r24, r24
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	01 96       	adiw	r24, 0x01	; 1
    2d8c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d8e:	2f 73       	andi	r18, 0x3F	; 63
    2d90:	82 0f       	add	r24, r18
    2d92:	91 1d       	adc	r25, r1
    2d94:	82 0f       	add	r24, r18
    2d96:	91 1d       	adc	r25, r1
    2d98:	2e 85       	ldd	r18, Y+14	; 0x0e
    2d9a:	22 95       	swap	r18
    2d9c:	26 95       	lsr	r18
    2d9e:	26 95       	lsr	r18
    2da0:	23 70       	andi	r18, 0x03	; 3
    2da2:	21 50       	subi	r18, 0x01	; 1
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <disk_ioctl+0x1da>
    2da6:	88 0f       	add	r24, r24
    2da8:	99 1f       	adc	r25, r25
    2daa:	2a 95       	dec	r18
    2dac:	e2 f7       	brpl	.-8      	; 0x2da6 <disk_ioctl+0x1d6>
    2dae:	a0 e0       	ldi	r26, 0x00	; 0
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	f7 01       	movw	r30, r14
    2db4:	80 83       	st	Z, r24
    2db6:	91 83       	std	Z+1, r25	; 0x01
    2db8:	a2 83       	std	Z+2, r26	; 0x02
    2dba:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    2dbc:	10 e0       	ldi	r17, 0x00	; 0
    2dbe:	95 c0       	rjmp	.+298    	; 0x2eea <disk_ioctl+0x31a>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    2dc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dc2:	98 2f       	mov	r25, r24
    2dc4:	93 70       	andi	r25, 0x03	; 3
    2dc6:	82 95       	swap	r24
    2dc8:	86 95       	lsr	r24
    2dca:	87 70       	andi	r24, 0x07	; 7
    2dcc:	48 2f       	mov	r20, r24
    2dce:	50 e0       	ldi	r21, 0x00	; 0
    2dd0:	f8 e0       	ldi	r31, 0x08	; 8
    2dd2:	9f 9f       	mul	r25, r31
    2dd4:	40 0d       	add	r20, r0
    2dd6:	51 1d       	adc	r21, r1
    2dd8:	11 24       	eor	r1, r1
    2dda:	4f 5f       	subi	r20, 0xFF	; 255
    2ddc:	5f 4f       	sbci	r21, 0xFF	; 255
    2dde:	2b 85       	ldd	r18, Y+11	; 0x0b
    2de0:	2c 77       	andi	r18, 0x7C	; 124
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	35 95       	asr	r19
    2de6:	27 95       	ror	r18
    2de8:	35 95       	asr	r19
    2dea:	27 95       	ror	r18
    2dec:	2f 5f       	subi	r18, 0xFF	; 255
    2dee:	3f 4f       	sbci	r19, 0xFF	; 255
    2df0:	42 9f       	mul	r20, r18
    2df2:	c0 01       	movw	r24, r0
    2df4:	43 9f       	mul	r20, r19
    2df6:	90 0d       	add	r25, r0
    2df8:	52 9f       	mul	r21, r18
    2dfa:	90 0d       	add	r25, r0
    2dfc:	11 24       	eor	r1, r1
    2dfe:	a0 e0       	ldi	r26, 0x00	; 0
    2e00:	b0 e0       	ldi	r27, 0x00	; 0
    2e02:	f7 01       	movw	r30, r14
    2e04:	80 83       	st	Z, r24
    2e06:	91 83       	std	Z+1, r25	; 0x01
    2e08:	a2 83       	std	Z+2, r26	; 0x02
    2e0a:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    2e0c:	10 e0       	ldi	r17, 0x00	; 0
    2e0e:	6d c0       	rjmp	.+218    	; 0x2eea <disk_ioctl+0x31a>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    2e10:	80 91 ab 20 	lds	r24, 0x20AB
    2e14:	fa 01       	movw	r30, r20
    2e16:	80 83       	st	Z, r24
		res = RES_OK;
    2e18:	10 e0       	ldi	r17, 0x00	; 0
		break;
    2e1a:	67 c0       	rjmp	.+206    	; 0x2eea <disk_ioctl+0x31a>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    2e1c:	40 e0       	ldi	r20, 0x00	; 0
    2e1e:	50 e0       	ldi	r21, 0x00	; 0
    2e20:	ba 01       	movw	r22, r20
    2e22:	89 e0       	ldi	r24, 0x09	; 9
    2e24:	8f dc       	rcall	.-1762   	; 0x2744 <send_cmd>
    2e26:	81 11       	cpse	r24, r1
    2e28:	57 c0       	rjmp	.+174    	; 0x2ed8 <disk_ioctl+0x308>
			&& rcvr_datablock(ptr, 16))
    2e2a:	60 e1       	ldi	r22, 0x10	; 16
    2e2c:	70 e0       	ldi	r23, 0x00	; 0
    2e2e:	c7 01       	movw	r24, r14
    2e30:	da dc       	rcall	.-1612   	; 0x27e6 <rcvr_datablock>
    2e32:	11 e0       	ldi	r17, 0x01	; 1
    2e34:	89 2b       	or	r24, r25
    2e36:	09 f4       	brne	.+2      	; 0x2e3a <disk_ioctl+0x26a>
    2e38:	58 c0       	rjmp	.+176    	; 0x2eea <disk_ioctl+0x31a>
    2e3a:	10 e0       	ldi	r17, 0x00	; 0
    2e3c:	56 c0       	rjmp	.+172    	; 0x2eea <disk_ioctl+0x31a>
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    2e3e:	40 e0       	ldi	r20, 0x00	; 0
    2e40:	50 e0       	ldi	r21, 0x00	; 0
    2e42:	ba 01       	movw	r22, r20
    2e44:	8a e0       	ldi	r24, 0x0A	; 10
    2e46:	7e dc       	rcall	.-1796   	; 0x2744 <send_cmd>
    2e48:	81 11       	cpse	r24, r1
    2e4a:	48 c0       	rjmp	.+144    	; 0x2edc <disk_ioctl+0x30c>
			&& rcvr_datablock(ptr, 16))
    2e4c:	60 e1       	ldi	r22, 0x10	; 16
    2e4e:	70 e0       	ldi	r23, 0x00	; 0
    2e50:	c7 01       	movw	r24, r14
    2e52:	c9 dc       	rcall	.-1646   	; 0x27e6 <rcvr_datablock>
    2e54:	11 e0       	ldi	r17, 0x01	; 1
    2e56:	89 2b       	or	r24, r25
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <disk_ioctl+0x28c>
    2e5a:	47 c0       	rjmp	.+142    	; 0x2eea <disk_ioctl+0x31a>
    2e5c:	10 e0       	ldi	r17, 0x00	; 0
    2e5e:	45 c0       	rjmp	.+138    	; 0x2eea <disk_ioctl+0x31a>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    2e60:	40 e0       	ldi	r20, 0x00	; 0
    2e62:	50 e0       	ldi	r21, 0x00	; 0
    2e64:	ba 01       	movw	r22, r20
    2e66:	8a e3       	ldi	r24, 0x3A	; 58
    2e68:	6d dc       	rcall	.-1830   	; 0x2744 <send_cmd>
    2e6a:	81 11       	cpse	r24, r1
    2e6c:	39 c0       	rjmp	.+114    	; 0x2ee0 <disk_ioctl+0x310>
    2e6e:	87 01       	movw	r16, r14
    2e70:	f4 e0       	ldi	r31, 0x04	; 4
    2e72:	ef 0e       	add	r14, r31
    2e74:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    2e76:	8f ef       	ldi	r24, 0xFF	; 255
    2e78:	43 dc       	rcall	.-1914   	; 0x2700 <xchg_spi>
    2e7a:	f8 01       	movw	r30, r16
    2e7c:	81 93       	st	Z+, r24
    2e7e:	8f 01       	movw	r16, r30
    2e80:	ee 15       	cp	r30, r14
    2e82:	ff 05       	cpc	r31, r15
    2e84:	c1 f7       	brne	.-16     	; 0x2e76 <disk_ioctl+0x2a6>
    2e86:	2e c0       	rjmp	.+92     	; 0x2ee4 <disk_ioctl+0x314>
			res = RES_OK;
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    2e88:	40 e0       	ldi	r20, 0x00	; 0
    2e8a:	50 e0       	ldi	r21, 0x00	; 0
    2e8c:	ba 01       	movw	r22, r20
    2e8e:	8d e8       	ldi	r24, 0x8D	; 141
    2e90:	59 dc       	rcall	.-1870   	; 0x2744 <send_cmd>
    2e92:	81 11       	cpse	r24, r1
    2e94:	29 c0       	rjmp	.+82     	; 0x2ee8 <disk_ioctl+0x318>
			xchg_spi(0xFF);
    2e96:	8f ef       	ldi	r24, 0xFF	; 255
    2e98:	33 dc       	rcall	.-1946   	; 0x2700 <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    2e9a:	60 e4       	ldi	r22, 0x40	; 64
    2e9c:	70 e0       	ldi	r23, 0x00	; 0
    2e9e:	c7 01       	movw	r24, r14
    2ea0:	a2 dc       	rcall	.-1724   	; 0x27e6 <rcvr_datablock>
    2ea2:	11 e0       	ldi	r17, 0x01	; 1
    2ea4:	89 2b       	or	r24, r25
    2ea6:	09 f1       	breq	.+66     	; 0x2eea <disk_ioctl+0x31a>
    2ea8:	10 e0       	ldi	r17, 0x00	; 0
    2eaa:	1f c0       	rjmp	.+62     	; 0x2eea <disk_ioctl+0x31a>

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    2eac:	51 d4       	rcall	.+2210   	; 0x3750 <spi_off>
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
		Stat |= STA_NOINIT;
    2eae:	80 91 04 20 	lds	r24, 0x2004
    2eb2:	81 60       	ori	r24, 0x01	; 1
    2eb4:	80 93 04 20 	sts	0x2004, r24
		res = RES_OK;
    2eb8:	10 e0       	ldi	r17, 0x00	; 0
		break;
    2eba:	17 c0       	rjmp	.+46     	; 0x2eea <disk_ioctl+0x31a>

	default:
		res = RES_PARERR;
    2ebc:	14 e0       	ldi	r17, 0x04	; 4
    2ebe:	15 c0       	rjmp	.+42     	; 0x2eea <disk_ioctl+0x31a>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    2ec0:	11 e0       	ldi	r17, 0x01	; 1
    2ec2:	13 c0       	rjmp	.+38     	; 0x2eea <disk_ioctl+0x31a>
    2ec4:	11 e0       	ldi	r17, 0x01	; 1
    2ec6:	11 c0       	rjmp	.+34     	; 0x2eea <disk_ioctl+0x31a>
    2ec8:	11 e0       	ldi	r17, 0x01	; 1
    2eca:	0f c0       	rjmp	.+30     	; 0x2eea <disk_ioctl+0x31a>
    2ecc:	11 e0       	ldi	r17, 0x01	; 1
    2ece:	0d c0       	rjmp	.+26     	; 0x2eea <disk_ioctl+0x31a>
    2ed0:	11 e0       	ldi	r17, 0x01	; 1
    2ed2:	0b c0       	rjmp	.+22     	; 0x2eea <disk_ioctl+0x31a>
    2ed4:	11 e0       	ldi	r17, 0x01	; 1
    2ed6:	09 c0       	rjmp	.+18     	; 0x2eea <disk_ioctl+0x31a>
    2ed8:	11 e0       	ldi	r17, 0x01	; 1
    2eda:	07 c0       	rjmp	.+14     	; 0x2eea <disk_ioctl+0x31a>
    2edc:	11 e0       	ldi	r17, 0x01	; 1
    2ede:	05 c0       	rjmp	.+10     	; 0x2eea <disk_ioctl+0x31a>
    2ee0:	11 e0       	ldi	r17, 0x01	; 1
    2ee2:	03 c0       	rjmp	.+6      	; 0x2eea <disk_ioctl+0x31a>
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
			res = RES_OK;
    2ee4:	10 e0       	ldi	r17, 0x00	; 0
    2ee6:	01 c0       	rjmp	.+2      	; 0x2eea <disk_ioctl+0x31a>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    2ee8:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    2eea:	0d dc       	rcall	.-2022   	; 0x2706 <deselect>

	return res;
    2eec:	81 2f       	mov	r24, r17
    2eee:	03 c0       	rjmp	.+6      	; 0x2ef6 <disk_ioctl+0x326>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    2ef0:	84 e0       	ldi	r24, 0x04	; 4
    2ef2:	01 c0       	rjmp	.+2      	; 0x2ef6 <disk_ioctl+0x326>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2ef4:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    2ef6:	60 96       	adiw	r28, 0x10	; 16
    2ef8:	cd bf       	out	0x3d, r28	; 61
    2efa:	de bf       	out	0x3e, r29	; 62
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	1f 91       	pop	r17
    2f02:	0f 91       	pop	r16
    2f04:	ff 90       	pop	r15
    2f06:	ef 90       	pop	r14
    2f08:	08 95       	ret

00002f0a <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
    2f0a:	1f 92       	push	r1
    2f0c:	0f 92       	push	r0
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	0f 92       	push	r0
    2f12:	11 24       	eor	r1, r1
    2f14:	0b b6       	in	r0, 0x3b	; 59
    2f16:	0f 92       	push	r0
    2f18:	2f 93       	push	r18
    2f1a:	3f 93       	push	r19
    2f1c:	4f 93       	push	r20
    2f1e:	5f 93       	push	r21
    2f20:	8f 93       	push	r24
    2f22:	9f 93       	push	r25
    2f24:	af 93       	push	r26
    2f26:	bf 93       	push	r27
    2f28:	ef 93       	push	r30
    2f2a:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    2f2c:	e0 91 c6 22 	lds	r30, 0x22C6
    2f30:	f0 91 c7 22 	lds	r31, 0x22C7
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	if (!fcb) return;
    2f34:	30 97       	sbiw	r30, 0x00	; 0
    2f36:	09 f4       	brne	.+2      	; 0x2f3a <__vector_14+0x30>
    2f38:	49 c0       	rjmp	.+146    	; 0x2fcc <__vector_14+0xc2>
	ct = fcb->ct; ri = fcb->ri;
    2f3a:	46 81       	ldd	r20, Z+6	; 0x06
    2f3c:	57 81       	ldd	r21, Z+7	; 0x07
    2f3e:	22 81       	ldd	r18, Z+2	; 0x02
    2f40:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    2f42:	80 85       	ldd	r24, Z+8	; 0x08
    2f44:	91 85       	ldd	r25, Z+9	; 0x09
    2f46:	dc 01       	movw	r26, r24
    2f48:	a2 0f       	add	r26, r18
    2f4a:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    2f4c:	80 81       	ld	r24, Z
    2f4e:	91 81       	ldd	r25, Z+1	; 0x01
    2f50:	81 30       	cpi	r24, 0x01	; 1
    2f52:	91 05       	cpc	r25, r1
    2f54:	69 f0       	breq	.+26     	; 0x2f70 <__vector_14+0x66>
    2f56:	18 f0       	brcs	.+6      	; 0x2f5e <__vector_14+0x54>
    2f58:	02 97       	sbiw	r24, 0x02	; 2
    2f5a:	99 f0       	breq	.+38     	; 0x2f82 <__vector_14+0x78>
    2f5c:	1d c0       	rjmp	.+58     	; 0x2f98 <__vector_14+0x8e>
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
    2f5e:	41 15       	cp	r20, r1
    2f60:	51 05       	cpc	r21, r1
    2f62:	a1 f1       	breq	.+104    	; 0x2fcc <__vector_14+0xc2>
		l1 = r2 = buff[0];
    2f64:	8c 91       	ld	r24, X
		ct -= 1; ri += 1;
    2f66:	41 50       	subi	r20, 0x01	; 1
    2f68:	51 09       	sbc	r21, r1
    2f6a:	2f 5f       	subi	r18, 0xFF	; 255
    2f6c:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    2f6e:	1d c0       	rjmp	.+58     	; 0x2faa <__vector_14+0xa0>
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
    2f70:	42 30       	cpi	r20, 0x02	; 2
    2f72:	51 05       	cpc	r21, r1
    2f74:	58 f1       	brcs	.+86     	; 0x2fcc <__vector_14+0xc2>
		l1 = buff[0]; r2 = buff[1];
    2f76:	8c 91       	ld	r24, X
		ct -= 2; ri += 2;
    2f78:	42 50       	subi	r20, 0x02	; 2
    2f7a:	51 09       	sbc	r21, r1
    2f7c:	2e 5f       	subi	r18, 0xFE	; 254
    2f7e:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    2f80:	14 c0       	rjmp	.+40     	; 0x2faa <__vector_14+0xa0>
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
    2f82:	42 30       	cpi	r20, 0x02	; 2
    2f84:	51 05       	cpc	r21, r1
    2f86:	10 f1       	brcs	.+68     	; 0x2fcc <__vector_14+0xc2>
		l1 = r2 = buff[1] + 128;
    2f88:	11 96       	adiw	r26, 0x01	; 1
    2f8a:	8c 91       	ld	r24, X
    2f8c:	80 58       	subi	r24, 0x80	; 128
		ct -= 2; ri += 2;
    2f8e:	42 50       	subi	r20, 0x02	; 2
    2f90:	51 09       	sbc	r21, r1
    2f92:	2e 5f       	subi	r18, 0xFE	; 254
    2f94:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    2f96:	09 c0       	rjmp	.+18     	; 0x2faa <__vector_14+0xa0>
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
    2f98:	44 30       	cpi	r20, 0x04	; 4
    2f9a:	51 05       	cpc	r21, r1
    2f9c:	b8 f0       	brcs	.+46     	; 0x2fcc <__vector_14+0xc2>
		l2 = buff[0]; 
		l1 = buff[1];
    2f9e:	11 96       	adiw	r26, 0x01	; 1
    2fa0:	8c 91       	ld	r24, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
    2fa2:	44 50       	subi	r20, 0x04	; 4
    2fa4:	51 09       	sbc	r21, r1
		ri += 4;
    2fa6:	2c 5f       	subi	r18, 0xFC	; 252
    2fa8:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fcb->ct = ct;
    2faa:	46 83       	std	Z+6, r20	; 0x06
    2fac:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    2fae:	42 85       	ldd	r20, Z+10	; 0x0a
    2fb0:	53 85       	ldd	r21, Z+11	; 0x0b
    2fb2:	41 50       	subi	r20, 0x01	; 1
    2fb4:	51 09       	sbc	r21, r1
    2fb6:	24 23       	and	r18, r20
    2fb8:	35 23       	and	r19, r21
    2fba:	22 83       	std	Z+2, r18	; 0x02
    2fbc:	33 83       	std	Z+3, r19	; 0x03
	
	uint8_t data = l1;//smooth(l1,0.35,data);
	//uint8_t data = l1*0.2;
	
	DACB.CH0DATA = data;
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	e0 e2       	ldi	r30, 0x20	; 32
    2fc2:	f3 e0       	ldi	r31, 0x03	; 3
    2fc4:	80 8f       	std	Z+24, r24	; 0x18
    2fc6:	91 8f       	std	Z+25, r25	; 0x19
	DACB.CH1DATA = data;
    2fc8:	82 8f       	std	Z+26, r24	; 0x1a
    2fca:	93 8f       	std	Z+27, r25	; 0x1b
	//DACB.CH0DATAL = (data << 7);
	//DACB.CH0DATAH = (data >> 1);
}
    2fcc:	ff 91       	pop	r31
    2fce:	ef 91       	pop	r30
    2fd0:	bf 91       	pop	r27
    2fd2:	af 91       	pop	r26
    2fd4:	9f 91       	pop	r25
    2fd6:	8f 91       	pop	r24
    2fd8:	5f 91       	pop	r21
    2fda:	4f 91       	pop	r20
    2fdc:	3f 91       	pop	r19
    2fde:	2f 91       	pop	r18
    2fe0:	0f 90       	pop	r0
    2fe2:	0b be       	out	0x3b, r0	; 59
    2fe4:	0f 90       	pop	r0
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	0f 90       	pop	r0
    2fea:	1f 90       	pop	r1
    2fec:	18 95       	reti

00002fee <ht1632c_setPixel>:
	HT1632_PORT.PIN5CTRL = PORT_OPC_PULLUP_gc;
	HT1632_PORT.PIN6CTRL = PORT_OPC_PULLUP_gc;
	HT1632_PORT.PIN7CTRL = PORT_OPC_PULLUP_gc;
	
	ht1632c_sendcommand(HT1632_LED_OFF);
	ht1632c_sendcommand(HT1632_SYS_DIS);
    2fee:	fc 01       	movw	r30, r24
    2ff0:	f6 95       	lsr	r31
    2ff2:	e7 95       	ror	r30
    2ff4:	f6 95       	lsr	r31
    2ff6:	e7 95       	ror	r30
    2ff8:	f6 95       	lsr	r31
    2ffa:	e7 95       	ror	r30
    2ffc:	e6 53       	subi	r30, 0x36	; 54
    2ffe:	fd 4d       	sbci	r31, 0xDD	; 221
    3000:	87 70       	andi	r24, 0x07	; 7
    3002:	99 27       	eor	r25, r25
    3004:	21 e0       	ldi	r18, 0x01	; 1
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	a9 01       	movw	r20, r18
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <__stack+0x11>
    300c:	44 0f       	add	r20, r20
    300e:	55 1f       	adc	r21, r21
    3010:	8a 95       	dec	r24
    3012:	e2 f7       	brpl	.-8      	; 0x300c <__stack+0xd>
    3014:	ca 01       	movw	r24, r20
    3016:	90 81       	ld	r25, Z
    3018:	89 2b       	or	r24, r25
    301a:	80 83       	st	Z, r24
    301c:	08 95       	ret

0000301e <ht1632c_clrPixel>:
    301e:	fc 01       	movw	r30, r24
    3020:	f6 95       	lsr	r31
    3022:	e7 95       	ror	r30
    3024:	f6 95       	lsr	r31
    3026:	e7 95       	ror	r30
    3028:	f6 95       	lsr	r31
    302a:	e7 95       	ror	r30
    302c:	e6 53       	subi	r30, 0x36	; 54
    302e:	fd 4d       	sbci	r31, 0xDD	; 221
    3030:	87 70       	andi	r24, 0x07	; 7
    3032:	99 27       	eor	r25, r25
    3034:	21 e0       	ldi	r18, 0x01	; 1
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	a9 01       	movw	r20, r18
    303a:	02 c0       	rjmp	.+4      	; 0x3040 <ht1632c_clrPixel+0x22>
    303c:	44 0f       	add	r20, r20
    303e:	55 1f       	adc	r21, r21
    3040:	8a 95       	dec	r24
    3042:	e2 f7       	brpl	.-8      	; 0x303c <ht1632c_clrPixel+0x1e>
    3044:	ca 01       	movw	r24, r20
    3046:	80 95       	com	r24
    3048:	90 81       	ld	r25, Z
    304a:	89 23       	and	r24, r25
    304c:	80 83       	st	Z, r24
    304e:	08 95       	ret

00003050 <ht1632c_drawPixel>:
    3050:	68 31       	cpi	r22, 0x18	; 24
    3052:	60 f5       	brcc	.+88     	; 0x30ac <ht1632c_drawPixel+0x5c>
    3054:	80 31       	cpi	r24, 0x10	; 16
    3056:	50 f5       	brcc	.+84     	; 0x30ac <ht1632c_drawPixel+0x5c>
    3058:	2b ea       	ldi	r18, 0xAB	; 171
    305a:	82 9f       	mul	r24, r18
    305c:	21 2d       	mov	r18, r1
    305e:	11 24       	eor	r1, r1
    3060:	22 95       	swap	r18
    3062:	2f 70       	andi	r18, 0x0F	; 15
    3064:	98 e1       	ldi	r25, 0x18	; 24
    3066:	29 9f       	mul	r18, r25
    3068:	80 19       	sub	r24, r0
    306a:	11 24       	eor	r1, r1
    306c:	28 2f       	mov	r18, r24
    306e:	88 30       	cpi	r24, 0x08	; 8
    3070:	28 f0       	brcs	.+10     	; 0x307c <ht1632c_drawPixel+0x2c>
    3072:	80 31       	cpi	r24, 0x10	; 16
    3074:	30 f4       	brcc	.+12     	; 0x3082 <ht1632c_drawPixel+0x32>
    3076:	87 e8       	ldi	r24, 0x87	; 135
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	05 c0       	rjmp	.+10     	; 0x3086 <ht1632c_drawPixel+0x36>
    307c:	87 e0       	ldi	r24, 0x07	; 7
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	02 c0       	rjmp	.+4      	; 0x3086 <ht1632c_drawPixel+0x36>
    3082:	87 e0       	ldi	r24, 0x07	; 7
    3084:	91 e0       	ldi	r25, 0x01	; 1
    3086:	27 70       	andi	r18, 0x07	; 7
    3088:	82 1b       	sub	r24, r18
    308a:	91 09       	sbc	r25, r1
    308c:	68 30       	cpi	r22, 0x08	; 8
    308e:	10 f4       	brcc	.+4      	; 0x3094 <ht1632c_drawPixel+0x44>
    3090:	66 0f       	add	r22, r22
    3092:	02 c0       	rjmp	.+4      	; 0x3098 <ht1632c_drawPixel+0x48>
    3094:	66 0f       	add	r22, r22
    3096:	6f 50       	subi	r22, 0x0F	; 15
    3098:	28 e0       	ldi	r18, 0x08	; 8
    309a:	62 9f       	mul	r22, r18
    309c:	80 0d       	add	r24, r0
    309e:	91 1d       	adc	r25, r1
    30a0:	11 24       	eor	r1, r1
    30a2:	44 23       	and	r20, r20
    30a4:	11 f0       	breq	.+4      	; 0x30aa <ht1632c_drawPixel+0x5a>
    30a6:	a3 cf       	rjmp	.-186    	; 0x2fee <ht1632c_setPixel>
    30a8:	08 95       	ret
    30aa:	b9 cf       	rjmp	.-142    	; 0x301e <ht1632c_clrPixel>
    30ac:	08 95       	ret

000030ae <ht1632c_fillRect>:
    30ae:	af 92       	push	r10
    30b0:	bf 92       	push	r11
    30b2:	cf 92       	push	r12
    30b4:	df 92       	push	r13
    30b6:	ef 92       	push	r14
    30b8:	ff 92       	push	r15
    30ba:	0f 93       	push	r16
    30bc:	1f 93       	push	r17
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29
    30c2:	b8 2e       	mov	r11, r24
    30c4:	e8 2f       	mov	r30, r24
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	6f 01       	movw	r12, r30
    30ca:	c4 0e       	add	r12, r20
    30cc:	d1 1c       	adc	r13, r1
    30ce:	ec 15       	cp	r30, r12
    30d0:	fd 05       	cpc	r31, r13
    30d2:	e4 f4       	brge	.+56     	; 0x310c <ht1632c_fillRect+0x5e>
    30d4:	e6 2e       	mov	r14, r22
    30d6:	f1 2c       	mov	r15, r1
    30d8:	e7 01       	movw	r28, r14
    30da:	c2 0f       	add	r28, r18
    30dc:	d1 1d       	adc	r29, r1
    30de:	a6 2e       	mov	r10, r22
    30e0:	10 c0       	rjmp	.+32     	; 0x3102 <ht1632c_fillRect+0x54>
    30e2:	40 2f       	mov	r20, r16
    30e4:	61 2f       	mov	r22, r17
    30e6:	8b 2d       	mov	r24, r11
    30e8:	b3 df       	rcall	.-154    	; 0x3050 <ht1632c_drawPixel>
    30ea:	1f 5f       	subi	r17, 0xFF	; 255
    30ec:	21 2f       	mov	r18, r17
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	2c 17       	cp	r18, r28
    30f2:	3d 07       	cpc	r19, r29
    30f4:	b4 f3       	brlt	.-20     	; 0x30e2 <ht1632c_fillRect+0x34>
    30f6:	b3 94       	inc	r11
    30f8:	2b 2d       	mov	r18, r11
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	2c 15       	cp	r18, r12
    30fe:	3d 05       	cpc	r19, r13
    3100:	2c f4       	brge	.+10     	; 0x310c <ht1632c_fillRect+0x5e>
    3102:	ec 16       	cp	r14, r28
    3104:	fd 06       	cpc	r15, r29
    3106:	bc f7       	brge	.-18     	; 0x30f6 <ht1632c_fillRect+0x48>
    3108:	1a 2d       	mov	r17, r10
    310a:	eb cf       	rjmp	.-42     	; 0x30e2 <ht1632c_fillRect+0x34>
    310c:	df 91       	pop	r29
    310e:	cf 91       	pop	r28
    3110:	1f 91       	pop	r17
    3112:	0f 91       	pop	r16
    3114:	ff 90       	pop	r15
    3116:	ef 90       	pop	r14
    3118:	df 90       	pop	r13
    311a:	cf 90       	pop	r12
    311c:	bf 90       	pop	r11
    311e:	af 90       	pop	r10
    3120:	08 95       	ret

00003122 <ht1632c_drawChar>:
    3122:	5f 92       	push	r5
    3124:	6f 92       	push	r6
    3126:	7f 92       	push	r7
    3128:	8f 92       	push	r8
    312a:	9f 92       	push	r9
    312c:	af 92       	push	r10
    312e:	bf 92       	push	r11
    3130:	cf 92       	push	r12
    3132:	df 92       	push	r13
    3134:	ef 92       	push	r14
    3136:	ff 92       	push	r15
    3138:	0f 93       	push	r16
    313a:	1f 93       	push	r17
    313c:	cf 93       	push	r28
    313e:	df 93       	push	r29
    3140:	a8 2e       	mov	r10, r24
    3142:	b6 2e       	mov	r11, r22
    3144:	c2 2e       	mov	r12, r18
    3146:	d0 2e       	mov	r13, r16
    3148:	e4 2f       	mov	r30, r20
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	7f 01       	movw	r14, r30
    314e:	ee 0c       	add	r14, r14
    3150:	ff 1c       	adc	r15, r15
    3152:	ee 0c       	add	r14, r14
    3154:	ff 1c       	adc	r15, r15
    3156:	ee 0d       	add	r30, r14
    3158:	ff 1d       	adc	r31, r15
    315a:	78 2e       	mov	r7, r24
    315c:	c0 e0       	ldi	r28, 0x00	; 0
    315e:	d0 e0       	ldi	r29, 0x00	; 0
    3160:	cf 01       	movw	r24, r30
    3162:	86 59       	subi	r24, 0x96	; 150
    3164:	9d 4f       	sbci	r25, 0xFD	; 253
    3166:	7c 01       	movw	r14, r24
    3168:	56 2e       	mov	r5, r22
    316a:	f7 01       	movw	r30, r14
    316c:	ec 0f       	add	r30, r28
    316e:	fd 1f       	adc	r31, r29
    3170:	94 90       	lpm	r9, Z
    3172:	85 2c       	mov	r8, r5
    3174:	10 e0       	ldi	r17, 0x00	; 0
    3176:	6c 2e       	mov	r6, r28
    3178:	6a 0c       	add	r6, r10
    317a:	90 fe       	sbrs	r9, 0
    317c:	0f c0       	rjmp	.+30     	; 0x319c <ht1632c_drawChar+0x7a>
    317e:	91 e0       	ldi	r25, 0x01	; 1
    3180:	d9 12       	cpse	r13, r25
    3182:	06 c0       	rjmp	.+12     	; 0x3190 <ht1632c_drawChar+0x6e>
    3184:	4c 2d       	mov	r20, r12
    3186:	66 2d       	mov	r22, r6
    3188:	81 2f       	mov	r24, r17
    318a:	8b 0d       	add	r24, r11
    318c:	61 df       	rcall	.-318    	; 0x3050 <ht1632c_drawPixel>
    318e:	06 c0       	rjmp	.+12     	; 0x319c <ht1632c_drawChar+0x7a>
    3190:	0c 2d       	mov	r16, r12
    3192:	2d 2d       	mov	r18, r13
    3194:	4d 2d       	mov	r20, r13
    3196:	67 2d       	mov	r22, r7
    3198:	88 2d       	mov	r24, r8
    319a:	89 df       	rcall	.-238    	; 0x30ae <ht1632c_fillRect>
    319c:	96 94       	lsr	r9
    319e:	1f 5f       	subi	r17, 0xFF	; 255
    31a0:	8d 0c       	add	r8, r13
    31a2:	18 30       	cpi	r17, 0x08	; 8
    31a4:	51 f7       	brne	.-44     	; 0x317a <ht1632c_drawChar+0x58>
    31a6:	21 96       	adiw	r28, 0x01	; 1
    31a8:	7d 0c       	add	r7, r13
    31aa:	c5 30       	cpi	r28, 0x05	; 5
    31ac:	d1 05       	cpc	r29, r1
    31ae:	e9 f6       	brne	.-70     	; 0x316a <ht1632c_drawChar+0x48>
    31b0:	df 91       	pop	r29
    31b2:	cf 91       	pop	r28
    31b4:	1f 91       	pop	r17
    31b6:	0f 91       	pop	r16
    31b8:	ff 90       	pop	r15
    31ba:	ef 90       	pop	r14
    31bc:	df 90       	pop	r13
    31be:	cf 90       	pop	r12
    31c0:	bf 90       	pop	r11
    31c2:	af 90       	pop	r10
    31c4:	9f 90       	pop	r9
    31c6:	8f 90       	pop	r8
    31c8:	7f 90       	pop	r7
    31ca:	6f 90       	pop	r6
    31cc:	5f 90       	pop	r5
    31ce:	08 95       	ret

000031d0 <ht1632c_writedata>:
    31d0:	cf 93       	push	r28
    31d2:	df 93       	push	r29
    31d4:	28 e0       	ldi	r18, 0x08	; 8
    31d6:	e0 e8       	ldi	r30, 0x80	; 128
    31d8:	f6 e0       	ldi	r31, 0x06	; 6
    31da:	21 83       	std	Z+1, r18	; 0x01
    31dc:	66 23       	and	r22, r22
    31de:	c1 f0       	breq	.+48     	; 0x3210 <ht1632c_writedata+0x40>
    31e0:	74 e0       	ldi	r23, 0x04	; 4
    31e2:	41 e0       	ldi	r20, 0x01	; 1
    31e4:	50 e0       	ldi	r21, 0x00	; 0
    31e6:	a8 e0       	ldi	r26, 0x08	; 8
    31e8:	76 83       	std	Z+6, r23	; 0x06
    31ea:	2f ef       	ldi	r18, 0xFF	; 255
    31ec:	26 0f       	add	r18, r22
    31ee:	ea 01       	movw	r28, r20
    31f0:	02 c0       	rjmp	.+4      	; 0x31f6 <ht1632c_writedata+0x26>
    31f2:	cc 0f       	add	r28, r28
    31f4:	dd 1f       	adc	r29, r29
    31f6:	2a 95       	dec	r18
    31f8:	e2 f7       	brpl	.-8      	; 0x31f2 <ht1632c_writedata+0x22>
    31fa:	9e 01       	movw	r18, r28
    31fc:	28 23       	and	r18, r24
    31fe:	39 23       	and	r19, r25
    3200:	23 2b       	or	r18, r19
    3202:	11 f0       	breq	.+4      	; 0x3208 <ht1632c_writedata+0x38>
    3204:	a5 83       	std	Z+5, r26	; 0x05
    3206:	01 c0       	rjmp	.+2      	; 0x320a <ht1632c_writedata+0x3a>
    3208:	a6 83       	std	Z+6, r26	; 0x06
    320a:	75 83       	std	Z+5, r23	; 0x05
    320c:	61 50       	subi	r22, 0x01	; 1
    320e:	61 f7       	brne	.-40     	; 0x31e8 <ht1632c_writedata+0x18>
    3210:	88 e0       	ldi	r24, 0x08	; 8
    3212:	e0 e8       	ldi	r30, 0x80	; 128
    3214:	f6 e0       	ldi	r31, 0x06	; 6
    3216:	86 83       	std	Z+6, r24	; 0x06
    3218:	df 91       	pop	r29
    321a:	cf 91       	pop	r28
    321c:	08 95       	ret

0000321e <ht1632c_writeScreen>:
    321e:	0f 93       	push	r16
    3220:	1f 93       	push	r17
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	e0 e8       	ldi	r30, 0x80	; 128
    322a:	f6 e0       	ldi	r31, 0x06	; 6
    322c:	86 83       	std	Z+6, r24	; 0x06
    322e:	63 e0       	ldi	r22, 0x03	; 3
    3230:	85 e0       	ldi	r24, 0x05	; 5
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	cd df       	rcall	.-102    	; 0x31d0 <ht1632c_writedata>
    3236:	67 e0       	ldi	r22, 0x07	; 7
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	c9 df       	rcall	.-110    	; 0x31d0 <ht1632c_writedata>
    323e:	cb ec       	ldi	r28, 0xCB	; 203
    3240:	d2 e2       	ldi	r29, 0x22	; 34
    3242:	0b ef       	ldi	r16, 0xFB	; 251
    3244:	12 e2       	ldi	r17, 0x22	; 34
    3246:	fe 01       	movw	r30, r28
    3248:	31 97       	sbiw	r30, 0x01	; 1
    324a:	80 81       	ld	r24, Z
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	98 2f       	mov	r25, r24
    3250:	88 27       	eor	r24, r24
    3252:	28 81       	ld	r18, Y
    3254:	60 e1       	ldi	r22, 0x10	; 16
    3256:	82 2b       	or	r24, r18
    3258:	bb df       	rcall	.-138    	; 0x31d0 <ht1632c_writedata>
    325a:	22 96       	adiw	r28, 0x02	; 2
    325c:	c0 17       	cp	r28, r16
    325e:	d1 07       	cpc	r29, r17
    3260:	91 f7       	brne	.-28     	; 0x3246 <ht1632c_writeScreen+0x28>
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	e0 e8       	ldi	r30, 0x80	; 128
    3266:	f6 e0       	ldi	r31, 0x06	; 6
    3268:	85 83       	std	Z+5, r24	; 0x05
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	1f 91       	pop	r17
    3270:	0f 91       	pop	r16
    3272:	08 95       	ret

00003274 <ht1632c_clearScreen>:
    3274:	ea ec       	ldi	r30, 0xCA	; 202
    3276:	f2 e2       	ldi	r31, 0x22	; 34
    3278:	8a ef       	ldi	r24, 0xFA	; 250
    327a:	92 e2       	ldi	r25, 0x22	; 34
    327c:	11 92       	st	Z+, r1
    327e:	e8 17       	cp	r30, r24
    3280:	f9 07       	cpc	r31, r25
    3282:	e1 f7       	brne	.-8      	; 0x327c <ht1632c_clearScreen+0x8>
    3284:	cc cf       	rjmp	.-104    	; 0x321e <ht1632c_writeScreen>
    3286:	08 95       	ret

00003288 <ht1632c_sendcommand>:
    3288:	1f 93       	push	r17
    328a:	cf 93       	push	r28
    328c:	df 93       	push	r29
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	94 60       	ori	r25, 0x04	; 4
    3292:	c0 e8       	ldi	r28, 0x80	; 128
    3294:	d6 e0       	ldi	r29, 0x06	; 6
    3296:	11 e0       	ldi	r17, 0x01	; 1
    3298:	1e 83       	std	Y+6, r17	; 0x06
    329a:	6c e0       	ldi	r22, 0x0C	; 12
    329c:	88 0f       	add	r24, r24
    329e:	99 1f       	adc	r25, r25
    32a0:	97 df       	rcall	.-210    	; 0x31d0 <ht1632c_writedata>
    32a2:	1d 83       	std	Y+5, r17	; 0x05
    32a4:	df 91       	pop	r29
    32a6:	cf 91       	pop	r28
    32a8:	1f 91       	pop	r17
    32aa:	08 95       	ret

000032ac <ht1632c_begin>:
    32ac:	cf 93       	push	r28
    32ae:	c8 2f       	mov	r28, r24
    32b0:	e0 e8       	ldi	r30, 0x80	; 128
    32b2:	f6 e0       	ldi	r31, 0x06	; 6
    32b4:	91 e0       	ldi	r25, 0x01	; 1
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	95 83       	std	Z+5, r25	; 0x05
    32ba:	94 e0       	ldi	r25, 0x04	; 4
    32bc:	91 83       	std	Z+1, r25	; 0x01
    32be:	95 83       	std	Z+5, r25	; 0x05
    32c0:	88 e0       	ldi	r24, 0x08	; 8
    32c2:	81 83       	std	Z+1, r24	; 0x01
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	e0 df       	rcall	.-64     	; 0x3288 <ht1632c_sendcommand>
    32c8:	83 e0       	ldi	r24, 0x03	; 3
    32ca:	de df       	rcall	.-68     	; 0x3288 <ht1632c_sendcommand>
    32cc:	88 e0       	ldi	r24, 0x08	; 8
    32ce:	dc df       	rcall	.-72     	; 0x3288 <ht1632c_sendcommand>
    32d0:	84 e1       	ldi	r24, 0x14	; 20
    32d2:	da df       	rcall	.-76     	; 0x3288 <ht1632c_sendcommand>
    32d4:	88 e1       	ldi	r24, 0x18	; 24
    32d6:	d8 df       	rcall	.-80     	; 0x3288 <ht1632c_sendcommand>
    32d8:	8c 2f       	mov	r24, r28
    32da:	d6 df       	rcall	.-84     	; 0x3288 <ht1632c_sendcommand>
    32dc:	81 ea       	ldi	r24, 0xA1	; 161
    32de:	d4 df       	rcall	.-88     	; 0x3288 <ht1632c_sendcommand>
    32e0:	cf 91       	pop	r28
    32e2:	08 95       	ret

000032e4 <ht1632c_setBrightness>:
}

void ht1632c_setBrightness(uint8_t pwm) {
    32e4:	80 31       	cpi	r24, 0x10	; 16
    32e6:	08 f0       	brcs	.+2      	; 0x32ea <ht1632c_setBrightness+0x6>
    32e8:	8f e0       	ldi	r24, 0x0F	; 15
	if (pwm > 15) {
		pwm = 15;	
	}
	ht1632c_sendcommand(HT1632_PWM_CONTROL | pwm);
    32ea:	80 6a       	ori	r24, 0xA0	; 160
    32ec:	cd cf       	rjmp	.-102    	; 0x3288 <ht1632c_sendcommand>
    32ee:	08 95       	ret

000032f0 <main>:
		load_wav(&Fil, "**** WAV PLAYER ****", Buff, sizeof Buff);
		f_close(&Fil);
	}	
}

int main(void) {
    32f0:	cf 93       	push	r28
    32f2:	df 93       	push	r29
    32f4:	00 d0       	rcall	.+0      	; 0x32f6 <main+0x6>
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62

	UINT bw;
	char *ptr;
	
	clock_setup_32_mhz();
    32fa:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <clock_setup_32_mhz>
	ht1632c_begin(HT1632_COMMON_16NMOS);
    32fe:	84 e2       	ldi	r24, 0x24	; 36
    3300:	d5 df       	rcall	.-86     	; 0x32ac <ht1632c_begin>
	ht1632c_setBrightness(15);
    3302:	8f e0       	ldi	r24, 0x0F	; 15
    3304:	ef df       	rcall	.-34     	; 0x32e4 <ht1632c_setBrightness>
	ht1632c_clearScreen();
    3306:	b6 df       	rcall	.-148    	; 0x3274 <ht1632c_clearScreen>
	//ht1632c_fillScreen();
	uart_setup();
    3308:	50 d3       	rcall	.+1696   	; 0x39aa <uart_setup>
void uart_put_char(char c);
static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) {
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    330a:	87 e0       	ldi	r24, 0x07	; 7
    330c:	e0 ea       	ldi	r30, 0xA0	; 160
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	82 83       	std	Z+2, r24	; 0x02
	ht1632c_setBrightness(15);
	ht1632c_clearScreen();
	//ht1632c_fillScreen();
	uart_setup();
	pmic_setup();
	i2c_setup();
    3312:	37 d2       	rcall	.+1134   	; 0x3782 <i2c_setup>
	btn_setup();
    3314:	50 d0       	rcall	.+160    	; 0x33b6 <btn_setup>
	rtc_setup();
    3316:	7f d0       	rcall	.+254    	; 0x3416 <rtc_setup>
	
	stdout = stdin = &mystdout;
    3318:	85 e0       	ldi	r24, 0x05	; 5
    331a:	90 e2       	ldi	r25, 0x20	; 32
    331c:	80 93 54 2d 	sts	0x2D54, r24
    3320:	90 93 55 2d 	sts	0x2D55, r25
    3324:	80 93 56 2d 	sts	0x2D56, r24
    3328:	90 93 57 2d 	sts	0x2D57, r25

	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
    332c:	40 e0       	ldi	r20, 0x00	; 0
    332e:	6d e9       	ldi	r22, 0x9D	; 157
    3330:	70 e2       	ldi	r23, 0x20	; 32
    3332:	8a ef       	ldi	r24, 0xFA	; 250
    3334:	92 e2       	ldi	r25, 0x22	; 34
    3336:	0e 94 35 10 	call	0x206a	; 0x206a <f_mount>
	
	if (f_open(&Fil, "newfilea.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {	/* Create a file */
    333a:	4a e0       	ldi	r20, 0x0A	; 10
    333c:	65 e8       	ldi	r22, 0x85	; 133
    333e:	70 e2       	ldi	r23, 0x20	; 32
    3340:	8c e2       	ldi	r24, 0x2C	; 44
    3342:	9d e2       	ldi	r25, 0x2D	; 45
    3344:	0e 94 85 10 	call	0x210a	; 0x210a <f_open>
    3348:	81 11       	cpse	r24, r1
    334a:	0e c0       	rjmp	.+28     	; 0x3368 <main+0x78>
		
		f_write(&Fil, "It works!\r\n", 11, &bw);	/* Write data to the file */
    334c:	9e 01       	movw	r18, r28
    334e:	2f 5f       	subi	r18, 0xFF	; 255
    3350:	3f 4f       	sbci	r19, 0xFF	; 255
    3352:	4b e0       	ldi	r20, 0x0B	; 11
    3354:	50 e0       	ldi	r21, 0x00	; 0
    3356:	62 e9       	ldi	r22, 0x92	; 146
    3358:	70 e2       	ldi	r23, 0x20	; 32
    335a:	8c e2       	ldi	r24, 0x2C	; 44
    335c:	9d e2       	ldi	r25, 0x2D	; 45
    335e:	0e 94 95 11 	call	0x232a	; 0x232a <f_write>
		
		f_close(&Fil);								/* Close the file */
    3362:	8c e2       	ldi	r24, 0x2C	; 44
    3364:	9d e2       	ldi	r25, 0x2D	; 45
    3366:	bc d9       	rcall	.-3208   	; 0x26e0 <f_close>
	
	SI114X_IRQ_SAMPLE sensor_data;
	
	//_delay_ms(5000);
	
	si114x_reset(SI114X_ADDR);
    3368:	8a e5       	ldi	r24, 0x5A	; 90
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	cc d2       	rcall	.+1432   	; 0x3906 <si114x_reset>
	//si114x_init(SI114X_ADDR);
	
	TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
    336e:	e0 e4       	ldi	r30, 0x40	; 64
    3370:	f8 e0       	ldi	r31, 0x08	; 8
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	80 83       	st	Z, r24
	TCC1.PERL = 0x80;
    3376:	90 e8       	ldi	r25, 0x80	; 128
    3378:	96 a3       	std	Z+38, r25	; 0x26
	TCC1.PERH = 0x0C;
    337a:	9c e0       	ldi	r25, 0x0C	; 12
    337c:	97 a3       	std	Z+39, r25	; 0x27
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
    337e:	86 83       	std	Z+6, r24	; 0x06
	
	init_time();
    3380:	64 d0       	rcall	.+200    	; 0x344a <init_time>
	
	sei();
    3382:	78 94       	sei
	
	while (1) {
		
		update_time();
    3384:	a9 d0       	rcall	.+338    	; 0x34d8 <update_time>
    3386:	fe cf       	rjmp	.-4      	; 0x3384 <main+0x94>

00003388 <__vector_20>:
	}
	
}

//Used for SI114x Timestamp
ISR(TCC1_OVF_vect) {
    3388:	1f 92       	push	r1
    338a:	0f 92       	push	r0
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	0f 92       	push	r0
    3390:	11 24       	eor	r1, r1
    3392:	8f 93       	push	r24
    3394:	9f 93       	push	r25
	counter++;	
    3396:	80 91 ae 20 	lds	r24, 0x20AE
    339a:	90 91 af 20 	lds	r25, 0x20AF
    339e:	01 96       	adiw	r24, 0x01	; 1
    33a0:	80 93 ae 20 	sts	0x20AE, r24
    33a4:	90 93 af 20 	sts	0x20AF, r25
    33a8:	9f 91       	pop	r25
    33aa:	8f 91       	pop	r24
    33ac:	0f 90       	pop	r0
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	0f 90       	pop	r0
    33b2:	1f 90       	pop	r1
    33b4:	18 95       	reti

000033b6 <btn_setup>:
	} else if (!(PORTB.IN & PIN0_bm)) {
		return BTN4;
	} else {
		return NONE;
	}
}
    33b6:	80 ee       	ldi	r24, 0xE0	; 224
    33b8:	e0 e0       	ldi	r30, 0x00	; 0
    33ba:	f6 e0       	ldi	r31, 0x06	; 6
    33bc:	82 83       	std	Z+2, r24	; 0x02
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	e0 e2       	ldi	r30, 0x20	; 32
    33c2:	f6 e0       	ldi	r31, 0x06	; 6
    33c4:	82 83       	std	Z+2, r24	; 0x02
    33c6:	08 95       	ret

000033c8 <__vector_66>:

ISR(PORTA_INT0_vect) {
    33c8:	1f 92       	push	r1
    33ca:	0f 92       	push	r0
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	0f 92       	push	r0
    33d0:	11 24       	eor	r1, r1
    33d2:	0b b6       	in	r0, 0x3b	; 59
    33d4:	0f 92       	push	r0
    33d6:	2f 93       	push	r18
    33d8:	3f 93       	push	r19
    33da:	4f 93       	push	r20
    33dc:	5f 93       	push	r21
    33de:	6f 93       	push	r22
    33e0:	7f 93       	push	r23
    33e2:	8f 93       	push	r24
    33e4:	9f 93       	push	r25
    33e6:	af 93       	push	r26
    33e8:	bf 93       	push	r27
    33ea:	ef 93       	push	r30
    33ec:	ff 93       	push	r31
	ht1632c_clearScreen();
    33ee:	42 df       	rcall	.-380    	; 0x3274 <ht1632c_clearScreen>
    33f0:	ff 91       	pop	r31
    33f2:	ef 91       	pop	r30
    33f4:	bf 91       	pop	r27
    33f6:	af 91       	pop	r26
    33f8:	9f 91       	pop	r25
    33fa:	8f 91       	pop	r24
    33fc:	7f 91       	pop	r23
    33fe:	6f 91       	pop	r22
    3400:	5f 91       	pop	r21
    3402:	4f 91       	pop	r20
    3404:	3f 91       	pop	r19
    3406:	2f 91       	pop	r18
    3408:	0f 90       	pop	r0
    340a:	0b be       	out	0x3b, r0	; 59
    340c:	0f 90       	pop	r0
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	0f 90       	pop	r0
    3412:	1f 90       	pop	r1
    3414:	18 95       	reti

00003416 <rtc_setup>:

char str_hour[2];
char str_hour_prev[2];

void rtc_setup(void) {
	CCP = CCP_IOREG_gc;
    3416:	88 ed       	ldi	r24, 0xD8	; 216
    3418:	84 bf       	out	0x34, r24	; 52
	CLK.RTCCTRL = CLK_RTCSRC_TOSC32_gc | CLK_RTCEN_bm;
    341a:	8b e0       	ldi	r24, 0x0B	; 11
    341c:	e0 e4       	ldi	r30, 0x40	; 64
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	83 83       	std	Z+3, r24	; 0x03
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    3422:	e0 e0       	ldi	r30, 0x00	; 0
    3424:	f4 e0       	ldi	r31, 0x04	; 4
    3426:	81 81       	ldd	r24, Z+1	; 0x01
    3428:	80 fd       	sbrc	r24, 0
    342a:	fd cf       	rjmp	.-6      	; 0x3426 <rtc_setup+0x10>
	
	//RTC.PER = 32768;
	RTC.PER = 100;
    342c:	e0 e0       	ldi	r30, 0x00	; 0
    342e:	f4 e0       	ldi	r31, 0x04	; 4
    3430:	84 e6       	ldi	r24, 0x64	; 100
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	82 87       	std	Z+10, r24	; 0x0a
    3436:	93 87       	std	Z+11, r25	; 0x0b
	RTC.INTCTRL = RTC_OVFINTLVL_MED_gc;
    3438:	82 e0       	ldi	r24, 0x02	; 2
    343a:	82 83       	std	Z+2, r24	; 0x02
	RTC.CNT = 0;
    343c:	10 86       	std	Z+8, r1	; 0x08
    343e:	11 86       	std	Z+9, r1	; 0x09
	RTC.COMP = 0;
    3440:	14 86       	std	Z+12, r1	; 0x0c
    3442:	15 86       	std	Z+13, r1	; 0x0d
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	80 83       	st	Z, r24
    3448:	08 95       	ret

0000344a <init_time>:
}

void init_time(void) {
    344a:	0f 93       	push	r16
    344c:	1f 93       	push	r17
	
	ht1632c_clearScreen();
    344e:	12 df       	rcall	.-476    	; 0x3274 <ht1632c_clearScreen>
	
	hours = 18;
    3450:	82 e1       	ldi	r24, 0x12	; 18
    3452:	80 93 b0 20 	sts	0x20B0, r24
	minutes = 4;
    3456:	84 e0       	ldi	r24, 0x04	; 4
    3458:	80 93 b1 20 	sts	0x20B1, r24
	
	str_min[0] = str_min_prev[0] = '0';
    345c:	80 e3       	ldi	r24, 0x30	; 48
    345e:	80 93 50 2d 	sts	0x2D50, r24
    3462:	80 93 4c 2d 	sts	0x2D4C, r24
	str_min[1] = str_min_prev[1] = '4';
    3466:	84 e3       	ldi	r24, 0x34	; 52
    3468:	80 93 51 2d 	sts	0x2D51, r24
    346c:	80 93 4d 2d 	sts	0x2D4D, r24
	
	str_hour[0] = str_hour_prev[0] = '1';
    3470:	81 e3       	ldi	r24, 0x31	; 49
    3472:	80 93 52 2d 	sts	0x2D52, r24
    3476:	80 93 4e 2d 	sts	0x2D4E, r24
	str_hour[1] = str_hour_prev[1] = '8';
    347a:	88 e3       	ldi	r24, 0x38	; 56
    347c:	80 93 53 2d 	sts	0x2D53, r24
    3480:	80 93 4f 2d 	sts	0x2D4F, r24
	
	ht1632c_drawChar(2,0,'1',1,1);
    3484:	01 e0       	ldi	r16, 0x01	; 1
    3486:	10 e0       	ldi	r17, 0x00	; 0
    3488:	21 e0       	ldi	r18, 0x01	; 1
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	41 e3       	ldi	r20, 0x31	; 49
    348e:	50 e0       	ldi	r21, 0x00	; 0
    3490:	60 e0       	ldi	r22, 0x00	; 0
    3492:	70 e0       	ldi	r23, 0x00	; 0
    3494:	82 e0       	ldi	r24, 0x02	; 2
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	44 de       	rcall	.-888    	; 0x3122 <ht1632c_drawChar>
	ht1632c_drawChar(9,0,'8',1,1);
    349a:	21 e0       	ldi	r18, 0x01	; 1
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	48 e3       	ldi	r20, 0x38	; 56
    34a0:	50 e0       	ldi	r21, 0x00	; 0
    34a2:	60 e0       	ldi	r22, 0x00	; 0
    34a4:	70 e0       	ldi	r23, 0x00	; 0
    34a6:	89 e0       	ldi	r24, 0x09	; 9
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	3b de       	rcall	.-906    	; 0x3122 <ht1632c_drawChar>
	ht1632c_drawChar(2,9,'0',1,1);
    34ac:	21 e0       	ldi	r18, 0x01	; 1
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	40 e3       	ldi	r20, 0x30	; 48
    34b2:	50 e0       	ldi	r21, 0x00	; 0
    34b4:	69 e0       	ldi	r22, 0x09	; 9
    34b6:	70 e0       	ldi	r23, 0x00	; 0
    34b8:	82 e0       	ldi	r24, 0x02	; 2
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	32 de       	rcall	.-924    	; 0x3122 <ht1632c_drawChar>
	ht1632c_drawChar(9,9,'4',1,1);
    34be:	21 e0       	ldi	r18, 0x01	; 1
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	44 e3       	ldi	r20, 0x34	; 52
    34c4:	50 e0       	ldi	r21, 0x00	; 0
    34c6:	69 e0       	ldi	r22, 0x09	; 9
    34c8:	70 e0       	ldi	r23, 0x00	; 0
    34ca:	89 e0       	ldi	r24, 0x09	; 9
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	29 de       	rcall	.-942    	; 0x3122 <ht1632c_drawChar>
	ht1632c_writeScreen();
    34d0:	a6 de       	rcall	.-692    	; 0x321e <ht1632c_writeScreen>
}
    34d2:	1f 91       	pop	r17
    34d4:	0f 91       	pop	r16
    34d6:	08 95       	ret

000034d8 <update_time>:

void update_time(void) 
{	
    34d8:	af 92       	push	r10
    34da:	bf 92       	push	r11
    34dc:	cf 92       	push	r12
    34de:	df 92       	push	r13
    34e0:	ef 92       	push	r14
    34e2:	ff 92       	push	r15
    34e4:	0f 93       	push	r16
    34e6:	1f 93       	push	r17
    34e8:	cf 93       	push	r28
    34ea:	df 93       	push	r29
	if (seconds == 59) {
    34ec:	80 91 b2 20 	lds	r24, 0x20B2
    34f0:	8b 33       	cpi	r24, 0x3B	; 59
    34f2:	09 f0       	breq	.+2      	; 0x34f6 <update_time+0x1e>
    34f4:	63 c0       	rjmp	.+198    	; 0x35bc <update_time+0xe4>
		sprintf(str_min, "%d", minutes);
    34f6:	80 91 b1 20 	lds	r24, 0x20B1
    34fa:	1f 92       	push	r1
    34fc:	8f 93       	push	r24
    34fe:	8e e9       	ldi	r24, 0x9E	; 158
    3500:	90 e2       	ldi	r25, 0x20	; 32
    3502:	9f 93       	push	r25
    3504:	8f 93       	push	r24
    3506:	8c e4       	ldi	r24, 0x4C	; 76
    3508:	9d e2       	ldi	r25, 0x2D	; 45
    350a:	9f 93       	push	r25
    350c:	8f 93       	push	r24
    350e:	bd d2       	rcall	.+1402   	; 0x3a8a <sprintf>
		if (minutes < 10) {
    3510:	80 91 b1 20 	lds	r24, 0x20B1
    3514:	0f 90       	pop	r0
    3516:	0f 90       	pop	r0
    3518:	0f 90       	pop	r0
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	0f 90       	pop	r0
    3520:	8a 30       	cpi	r24, 0x0A	; 10
    3522:	38 f4       	brcc	.+14     	; 0x3532 <update_time+0x5a>
			char temp = str_min[0];
    3524:	ec e4       	ldi	r30, 0x4C	; 76
    3526:	fd e2       	ldi	r31, 0x2D	; 45
    3528:	80 81       	ld	r24, Z
			str_min[0] = '0';
    352a:	90 e3       	ldi	r25, 0x30	; 48
    352c:	90 83       	st	Z, r25
			str_min[1] = temp;
    352e:	80 93 4d 2d 	sts	0x2D4D, r24
		}
		
		ht1632c_drawChar(2,9,str_min_prev[0],0,1);
    3532:	0f 2e       	mov	r0, r31
    3534:	f0 e5       	ldi	r31, 0x50	; 80
    3536:	cf 2e       	mov	r12, r31
    3538:	fd e2       	ldi	r31, 0x2D	; 45
    353a:	df 2e       	mov	r13, r31
    353c:	f0 2d       	mov	r31, r0
    353e:	f6 01       	movw	r30, r12
    3540:	40 81       	ld	r20, Z
    3542:	50 e0       	ldi	r21, 0x00	; 0
    3544:	01 e0       	ldi	r16, 0x01	; 1
    3546:	10 e0       	ldi	r17, 0x00	; 0
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	69 e0       	ldi	r22, 0x09	; 9
    354e:	70 e0       	ldi	r23, 0x00	; 0
    3550:	82 e0       	ldi	r24, 0x02	; 2
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	e6 dd       	rcall	.-1076   	; 0x3122 <ht1632c_drawChar>
		ht1632c_drawChar(9,9,str_min_prev[1],0,1);
    3556:	c1 e5       	ldi	r28, 0x51	; 81
    3558:	dd e2       	ldi	r29, 0x2D	; 45
    355a:	48 81       	ld	r20, Y
    355c:	50 e0       	ldi	r21, 0x00	; 0
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	69 e0       	ldi	r22, 0x09	; 9
    3564:	70 e0       	ldi	r23, 0x00	; 0
    3566:	89 e0       	ldi	r24, 0x09	; 9
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	db dd       	rcall	.-1098   	; 0x3122 <ht1632c_drawChar>
		
		ht1632c_drawChar(2,9,str_min[0],1,1);
    356c:	0f 2e       	mov	r0, r31
    356e:	fc e4       	ldi	r31, 0x4C	; 76
    3570:	af 2e       	mov	r10, r31
    3572:	fd e2       	ldi	r31, 0x2D	; 45
    3574:	bf 2e       	mov	r11, r31
    3576:	f0 2d       	mov	r31, r0
    3578:	f5 01       	movw	r30, r10
    357a:	40 81       	ld	r20, Z
    357c:	50 e0       	ldi	r21, 0x00	; 0
    357e:	21 e0       	ldi	r18, 0x01	; 1
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	69 e0       	ldi	r22, 0x09	; 9
    3584:	70 e0       	ldi	r23, 0x00	; 0
    3586:	82 e0       	ldi	r24, 0x02	; 2
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	cb dd       	rcall	.-1130   	; 0x3122 <ht1632c_drawChar>
		ht1632c_drawChar(9,9,str_min[1],1,1);
    358c:	0f 2e       	mov	r0, r31
    358e:	fd e4       	ldi	r31, 0x4D	; 77
    3590:	ef 2e       	mov	r14, r31
    3592:	fd e2       	ldi	r31, 0x2D	; 45
    3594:	ff 2e       	mov	r15, r31
    3596:	f0 2d       	mov	r31, r0
    3598:	f7 01       	movw	r30, r14
    359a:	40 81       	ld	r20, Z
    359c:	50 e0       	ldi	r21, 0x00	; 0
    359e:	21 e0       	ldi	r18, 0x01	; 1
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	69 e0       	ldi	r22, 0x09	; 9
    35a4:	70 e0       	ldi	r23, 0x00	; 0
    35a6:	89 e0       	ldi	r24, 0x09	; 9
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	bb dd       	rcall	.-1162   	; 0x3122 <ht1632c_drawChar>
		
		str_min_prev[0] = str_min[0];
    35ac:	f5 01       	movw	r30, r10
    35ae:	80 81       	ld	r24, Z
    35b0:	f6 01       	movw	r30, r12
    35b2:	80 83       	st	Z, r24
		str_min_prev[1] = str_min[1];
    35b4:	f7 01       	movw	r30, r14
    35b6:	80 81       	ld	r24, Z
    35b8:	88 83       	st	Y, r24
		
		ht1632c_writeScreen();
    35ba:	31 de       	rcall	.-926    	; 0x321e <ht1632c_writeScreen>
	}
	
	if (minutes == 59) {
    35bc:	80 91 b1 20 	lds	r24, 0x20B1
    35c0:	8b 33       	cpi	r24, 0x3B	; 59
    35c2:	09 f0       	breq	.+2      	; 0x35c6 <update_time+0xee>
    35c4:	63 c0       	rjmp	.+198    	; 0x368c <update_time+0x1b4>
		sprintf(str_hour, "%d", hours);
    35c6:	80 91 b0 20 	lds	r24, 0x20B0
    35ca:	1f 92       	push	r1
    35cc:	8f 93       	push	r24
    35ce:	8e e9       	ldi	r24, 0x9E	; 158
    35d0:	90 e2       	ldi	r25, 0x20	; 32
    35d2:	9f 93       	push	r25
    35d4:	8f 93       	push	r24
    35d6:	8e e4       	ldi	r24, 0x4E	; 78
    35d8:	9d e2       	ldi	r25, 0x2D	; 45
    35da:	9f 93       	push	r25
    35dc:	8f 93       	push	r24
    35de:	55 d2       	rcall	.+1194   	; 0x3a8a <sprintf>
		if (hours < 10) {
    35e0:	80 91 b0 20 	lds	r24, 0x20B0
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	0f 90       	pop	r0
    35ee:	0f 90       	pop	r0
    35f0:	8a 30       	cpi	r24, 0x0A	; 10
    35f2:	38 f4       	brcc	.+14     	; 0x3602 <update_time+0x12a>
			char temp = str_hour[0];
    35f4:	ee e4       	ldi	r30, 0x4E	; 78
    35f6:	fd e2       	ldi	r31, 0x2D	; 45
    35f8:	80 81       	ld	r24, Z
			str_hour[0] = '0';
    35fa:	90 e3       	ldi	r25, 0x30	; 48
    35fc:	90 83       	st	Z, r25
			str_hour[1] = temp;
    35fe:	80 93 4f 2d 	sts	0x2D4F, r24
		}
		ht1632c_drawChar(2,0,str_hour_prev[0],0,1);
    3602:	0f 2e       	mov	r0, r31
    3604:	f2 e5       	ldi	r31, 0x52	; 82
    3606:	cf 2e       	mov	r12, r31
    3608:	fd e2       	ldi	r31, 0x2D	; 45
    360a:	df 2e       	mov	r13, r31
    360c:	f0 2d       	mov	r31, r0
    360e:	f6 01       	movw	r30, r12
    3610:	40 81       	ld	r20, Z
    3612:	50 e0       	ldi	r21, 0x00	; 0
    3614:	01 e0       	ldi	r16, 0x01	; 1
    3616:	10 e0       	ldi	r17, 0x00	; 0
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	60 e0       	ldi	r22, 0x00	; 0
    361e:	70 e0       	ldi	r23, 0x00	; 0
    3620:	82 e0       	ldi	r24, 0x02	; 2
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	7e dd       	rcall	.-1284   	; 0x3122 <ht1632c_drawChar>
		ht1632c_drawChar(9,0,str_hour_prev[1],0,1);
    3626:	c3 e5       	ldi	r28, 0x53	; 83
    3628:	dd e2       	ldi	r29, 0x2D	; 45
    362a:	48 81       	ld	r20, Y
    362c:	50 e0       	ldi	r21, 0x00	; 0
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	60 e0       	ldi	r22, 0x00	; 0
    3634:	70 e0       	ldi	r23, 0x00	; 0
    3636:	89 e0       	ldi	r24, 0x09	; 9
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	73 dd       	rcall	.-1306   	; 0x3122 <ht1632c_drawChar>
		
		ht1632c_drawChar(2,0,str_hour[0],1,1);
    363c:	0f 2e       	mov	r0, r31
    363e:	fe e4       	ldi	r31, 0x4E	; 78
    3640:	af 2e       	mov	r10, r31
    3642:	fd e2       	ldi	r31, 0x2D	; 45
    3644:	bf 2e       	mov	r11, r31
    3646:	f0 2d       	mov	r31, r0
    3648:	f5 01       	movw	r30, r10
    364a:	40 81       	ld	r20, Z
    364c:	50 e0       	ldi	r21, 0x00	; 0
    364e:	21 e0       	ldi	r18, 0x01	; 1
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	60 e0       	ldi	r22, 0x00	; 0
    3654:	70 e0       	ldi	r23, 0x00	; 0
    3656:	82 e0       	ldi	r24, 0x02	; 2
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	63 dd       	rcall	.-1338   	; 0x3122 <ht1632c_drawChar>
		ht1632c_drawChar(9,0,str_hour[1],1,1);
    365c:	0f 2e       	mov	r0, r31
    365e:	ff e4       	ldi	r31, 0x4F	; 79
    3660:	ef 2e       	mov	r14, r31
    3662:	fd e2       	ldi	r31, 0x2D	; 45
    3664:	ff 2e       	mov	r15, r31
    3666:	f0 2d       	mov	r31, r0
    3668:	f7 01       	movw	r30, r14
    366a:	40 81       	ld	r20, Z
    366c:	50 e0       	ldi	r21, 0x00	; 0
    366e:	21 e0       	ldi	r18, 0x01	; 1
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	60 e0       	ldi	r22, 0x00	; 0
    3674:	70 e0       	ldi	r23, 0x00	; 0
    3676:	89 e0       	ldi	r24, 0x09	; 9
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	53 dd       	rcall	.-1370   	; 0x3122 <ht1632c_drawChar>
		
		str_hour_prev[0] = str_hour[0];
    367c:	f5 01       	movw	r30, r10
    367e:	80 81       	ld	r24, Z
    3680:	f6 01       	movw	r30, r12
    3682:	80 83       	st	Z, r24
		str_hour_prev[1] = str_hour[1];
    3684:	f7 01       	movw	r30, r14
    3686:	80 81       	ld	r24, Z
    3688:	88 83       	st	Y, r24
		
		ht1632c_writeScreen();
    368a:	c9 dd       	rcall	.-1134   	; 0x321e <ht1632c_writeScreen>
	}
	
}
    368c:	df 91       	pop	r29
    368e:	cf 91       	pop	r28
    3690:	1f 91       	pop	r17
    3692:	0f 91       	pop	r16
    3694:	ff 90       	pop	r15
    3696:	ef 90       	pop	r14
    3698:	df 90       	pop	r13
    369a:	cf 90       	pop	r12
    369c:	bf 90       	pop	r11
    369e:	af 90       	pop	r10
    36a0:	08 95       	ret

000036a2 <__vector_10>:

ISR(RTC_OVF_vect) {
    36a2:	1f 92       	push	r1
    36a4:	0f 92       	push	r0
    36a6:	0f b6       	in	r0, 0x3f	; 63
    36a8:	0f 92       	push	r0
    36aa:	11 24       	eor	r1, r1
    36ac:	2f 93       	push	r18
    36ae:	3f 93       	push	r19
    36b0:	8f 93       	push	r24
    36b2:	9f 93       	push	r25
	seconds++;
    36b4:	80 91 b2 20 	lds	r24, 0x20B2
    36b8:	8f 5f       	subi	r24, 0xFF	; 255
    36ba:	80 93 b2 20 	sts	0x20B2, r24
	minutes += seconds / 60;
    36be:	90 91 b2 20 	lds	r25, 0x20B2
    36c2:	20 91 b1 20 	lds	r18, 0x20B1
    36c6:	89 e8       	ldi	r24, 0x89	; 137
    36c8:	98 9f       	mul	r25, r24
    36ca:	91 2d       	mov	r25, r1
    36cc:	11 24       	eor	r1, r1
    36ce:	92 95       	swap	r25
    36d0:	96 95       	lsr	r25
    36d2:	97 70       	andi	r25, 0x07	; 7
    36d4:	92 0f       	add	r25, r18
    36d6:	90 93 b1 20 	sts	0x20B1, r25
	seconds %= 60;
    36da:	30 91 b2 20 	lds	r19, 0x20B2
    36de:	38 9f       	mul	r19, r24
    36e0:	91 2d       	mov	r25, r1
    36e2:	11 24       	eor	r1, r1
    36e4:	92 95       	swap	r25
    36e6:	96 95       	lsr	r25
    36e8:	97 70       	andi	r25, 0x07	; 7
    36ea:	2c e3       	ldi	r18, 0x3C	; 60
    36ec:	92 9f       	mul	r25, r18
    36ee:	30 19       	sub	r19, r0
    36f0:	11 24       	eor	r1, r1
    36f2:	30 93 b2 20 	sts	0x20B2, r19
	hours += minutes / 60;
    36f6:	90 91 b1 20 	lds	r25, 0x20B1
    36fa:	30 91 b0 20 	lds	r19, 0x20B0
    36fe:	98 9f       	mul	r25, r24
    3700:	91 2d       	mov	r25, r1
    3702:	11 24       	eor	r1, r1
    3704:	92 95       	swap	r25
    3706:	96 95       	lsr	r25
    3708:	97 70       	andi	r25, 0x07	; 7
    370a:	93 0f       	add	r25, r19
    370c:	90 93 b0 20 	sts	0x20B0, r25
	minutes %= 60;
    3710:	90 91 b1 20 	lds	r25, 0x20B1
    3714:	98 9f       	mul	r25, r24
    3716:	81 2d       	mov	r24, r1
    3718:	11 24       	eor	r1, r1
    371a:	82 95       	swap	r24
    371c:	86 95       	lsr	r24
    371e:	87 70       	andi	r24, 0x07	; 7
    3720:	82 9f       	mul	r24, r18
    3722:	90 19       	sub	r25, r0
    3724:	11 24       	eor	r1, r1
    3726:	90 93 b1 20 	sts	0x20B1, r25
}
    372a:	9f 91       	pop	r25
    372c:	8f 91       	pop	r24
    372e:	3f 91       	pop	r19
    3730:	2f 91       	pop	r18
    3732:	0f 90       	pop	r0
    3734:	0f be       	out	0x3f, r0	; 63
    3736:	0f 90       	pop	r0
    3738:	1f 90       	pop	r1
    373a:	18 95       	reti

0000373c <spi_on>:
#include "sercom.h"
#include <util/delay.h>

void spi_on(void) {
	
	PORTC.DIRSET = CS | MOSI | SCK;	
    373c:	e0 e4       	ldi	r30, 0x40	; 64
    373e:	f6 e0       	ldi	r31, 0x06	; 6
    3740:	80 eb       	ldi	r24, 0xB0	; 176
    3742:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET = CS;	
    3744:	80 e1       	ldi	r24, 0x10	; 16
    3746:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    3748:	80 ed       	ldi	r24, 0xD0	; 208
    374a:	80 93 c0 08 	sts	0x08C0, r24
    374e:	08 95       	ret

00003750 <spi_off>:
}

void spi_off(void) {
	
	SPIC.CTRL &= ~(SPI_ENABLE_bm);
    3750:	e0 ec       	ldi	r30, 0xC0	; 192
    3752:	f8 e0       	ldi	r31, 0x08	; 8
    3754:	80 81       	ld	r24, Z
    3756:	8f 7b       	andi	r24, 0xBF	; 191
    3758:	80 83       	st	Z, r24
	PORTC.DIRCLR = CS | MOSI | SCK;
    375a:	e0 e4       	ldi	r30, 0x40	; 64
    375c:	f6 e0       	ldi	r31, 0x06	; 6
    375e:	80 eb       	ldi	r24, 0xB0	; 176
    3760:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;
    3762:	88 e1       	ldi	r24, 0x18	; 24
    3764:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;
    3766:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;
    3768:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;
    376a:	87 8b       	std	Z+23, r24	; 0x17
    376c:	08 95       	ret

0000376e <spi_wr_rd>:
}

uint8_t spi_wr_rd(uint8_t spi_data) {
	
	SPIC.DATA = spi_data;
    376e:	e0 ec       	ldi	r30, 0xC0	; 192
    3770:	f8 e0       	ldi	r31, 0x08	; 8
    3772:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    3774:	82 81       	ldd	r24, Z+2	; 0x02
    3776:	88 23       	and	r24, r24
    3778:	ec f7       	brge	.-6      	; 0x3774 <spi_wr_rd+0x6>
	return SPIC.DATA;
    377a:	e0 ec       	ldi	r30, 0xC0	; 192
    377c:	f8 e0       	ldi	r31, 0x08	; 8
    377e:	83 81       	ldd	r24, Z+3	; 0x03
}
    3780:	08 95       	ret

00003782 <i2c_setup>:

void i2c_setup(void) {
	//TWIC.CTRL = TWI_SDAHOLD_50NS_gc;
	TWIC.MASTER.CTRLB = TWI_MASTER_SMEN_bm; //| TWI_MASTER_TIMEOUT1_bm;
    3782:	e0 e8       	ldi	r30, 0x80	; 128
    3784:	f4 e0       	ldi	r31, 0x04	; 4
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	82 83       	std	Z+2, r24	; 0x02
	TWIC.MASTER.BAUD = 50;
    378a:	92 e3       	ldi	r25, 0x32	; 50
    378c:	95 83       	std	Z+5, r25	; 0x05
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    378e:	98 e0       	ldi	r25, 0x08	; 8
    3790:	91 83       	std	Z+1, r25	; 0x01
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    3792:	84 83       	std	Z+4, r24	; 0x04
    3794:	08 95       	ret

00003796 <i2c_write_data>:
}

uint8_t i2c_write_data(uint8_t slave_addr, uint8_t register_addr, uint8_t data) {
	
	TWIC.MASTER.ADDR = (slave_addr << 1);
    3796:	88 0f       	add	r24, r24
    3798:	e0 e8       	ldi	r30, 0x80	; 128
    379a:	f4 e0       	ldi	r31, 0x04	; 4
    379c:	86 83       	std	Z+6, r24	; 0x06
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    379e:	84 81       	ldd	r24, Z+4	; 0x04
    37a0:	86 ff       	sbrs	r24, 6
    37a2:	fd cf       	rjmp	.-6      	; 0x379e <i2c_write_data+0x8>
	TWIC.MASTER.DATA = register_addr;
    37a4:	e0 e8       	ldi	r30, 0x80	; 128
    37a6:	f4 e0       	ldi	r31, 0x04	; 4
    37a8:	67 83       	std	Z+7, r22	; 0x07
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    37aa:	84 81       	ldd	r24, Z+4	; 0x04
    37ac:	86 ff       	sbrs	r24, 6
    37ae:	fd cf       	rjmp	.-6      	; 0x37aa <i2c_write_data+0x14>
	TWIC.MASTER.DATA = data;
    37b0:	e0 e8       	ldi	r30, 0x80	; 128
    37b2:	f4 e0       	ldi	r31, 0x04	; 4
    37b4:	47 83       	std	Z+7, r20	; 0x07
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    37b6:	84 81       	ldd	r24, Z+4	; 0x04
    37b8:	86 ff       	sbrs	r24, 6
    37ba:	fd cf       	rjmp	.-6      	; 0x37b6 <i2c_write_data+0x20>
	
	TWIC.MASTER.CTRLC = 0x03; //Stop
    37bc:	83 e0       	ldi	r24, 0x03	; 3
    37be:	e0 e8       	ldi	r30, 0x80	; 128
    37c0:	f4 e0       	ldi	r31, 0x04	; 4
    37c2:	83 83       	std	Z+3, r24	; 0x03
	
	return 0;
}
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	08 95       	ret

000037c8 <i2c_read_data>:

uint8_t i2c_read_data(uint8_t slave_addr, uint8_t register_addr) {
	
	uint8_t tmp;
	
	TWIC.MASTER.ADDR = (slave_addr << 1);
    37c8:	98 2f       	mov	r25, r24
    37ca:	99 0f       	add	r25, r25
    37cc:	e0 e8       	ldi	r30, 0x80	; 128
    37ce:	f4 e0       	ldi	r31, 0x04	; 4
    37d0:	96 83       	std	Z+6, r25	; 0x06
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    37d2:	94 81       	ldd	r25, Z+4	; 0x04
    37d4:	96 ff       	sbrs	r25, 6
    37d6:	fd cf       	rjmp	.-6      	; 0x37d2 <i2c_read_data+0xa>
	TWIC.MASTER.DATA = register_addr;
    37d8:	e0 e8       	ldi	r30, 0x80	; 128
    37da:	f4 e0       	ldi	r31, 0x04	; 4
    37dc:	67 83       	std	Z+7, r22	; 0x07
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    37de:	94 81       	ldd	r25, Z+4	; 0x04
    37e0:	96 ff       	sbrs	r25, 6
    37e2:	fd cf       	rjmp	.-6      	; 0x37de <i2c_read_data+0x16>
	TWIC.MASTER.ADDR = (slave_addr << 1) | 0x01; //Send START
    37e4:	88 0f       	add	r24, r24
    37e6:	81 60       	ori	r24, 0x01	; 1
    37e8:	e0 e8       	ldi	r30, 0x80	; 128
    37ea:	f4 e0       	ldi	r31, 0x04	; 4
    37ec:	86 83       	std	Z+6, r24	; 0x06
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_RIF_bm));
    37ee:	84 81       	ldd	r24, Z+4	; 0x04
    37f0:	88 23       	and	r24, r24
    37f2:	ec f7       	brge	.-6      	; 0x37ee <i2c_read_data+0x26>
	tmp = TWIC.MASTER.DATA;
    37f4:	e0 e8       	ldi	r30, 0x80	; 128
    37f6:	f4 e0       	ldi	r31, 0x04	; 4
    37f8:	87 81       	ldd	r24, Z+7	; 0x07
	TWIC.MASTER.CTRLC |= TWI_MASTER_ACKACT_bm; //Send NACK
    37fa:	93 81       	ldd	r25, Z+3	; 0x03
    37fc:	94 60       	ori	r25, 0x04	; 4
    37fe:	93 83       	std	Z+3, r25	; 0x03
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3800:	e9 ef       	ldi	r30, 0xF9	; 249
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	31 97       	sbiw	r30, 0x01	; 1
    3806:	f1 f7       	brne	.-4      	; 0x3804 <i2c_read_data+0x3c>
    3808:	00 c0       	rjmp	.+0      	; 0x380a <i2c_read_data+0x42>
    380a:	00 00       	nop
	
	_delay_ms(1);
	
	TWIC.MASTER.CTRLC = 0x03; //Send STOP
    380c:	93 e0       	ldi	r25, 0x03	; 3
    380e:	e0 e8       	ldi	r30, 0x80	; 128
    3810:	f4 e0       	ldi	r31, 0x04	; 4
    3812:	93 83       	std	Z+3, r25	; 0x03
	
	return tmp;
}
    3814:	08 95       	ret

00003816 <_sendCmd>:

    if(retval < 0)
        return retval;
    else
        return 0;
}
    3816:	df 92       	push	r13
    3818:	ef 92       	push	r14
    381a:	ff 92       	push	r15
    381c:	0f 93       	push	r16
    381e:	1f 93       	push	r17
    3820:	cf 93       	push	r28
    3822:	df 93       	push	r29
    3824:	ec 01       	movw	r28, r24
    3826:	d6 2e       	mov	r13, r22
    3828:	60 e2       	ldi	r22, 0x20	; 32
    382a:	b4 d0       	rcall	.+360    	; 0x3994 <Si114xReadFromRegister>
    382c:	8c 01       	movw	r16, r24
    382e:	99 23       	and	r25, r25
    3830:	34 f1       	brlt	.+76     	; 0x387e <_sendCmd+0x68>
    3832:	60 e3       	ldi	r22, 0x30	; 48
    3834:	ce 01       	movw	r24, r28
    3836:	ae d0       	rcall	.+348    	; 0x3994 <Si114xReadFromRegister>
    3838:	81 30       	cpi	r24, 0x01	; 1
    383a:	91 05       	cpc	r25, r1
    383c:	81 f1       	breq	.+96     	; 0x389e <_sendCmd+0x88>
    383e:	99 23       	and	r25, r25
    3840:	c4 f7       	brge	.-16     	; 0x3832 <_sendCmd+0x1c>
    3842:	39 c0       	rjmp	.+114    	; 0x38b6 <_sendCmd+0xa0>
    3844:	60 e2       	ldi	r22, 0x20	; 32
    3846:	ce 01       	movw	r24, r28
    3848:	a5 d0       	rcall	.+330    	; 0x3994 <Si114xReadFromRegister>
    384a:	80 17       	cp	r24, r16
    384c:	91 07       	cpc	r25, r17
    384e:	51 f1       	breq	.+84     	; 0x38a4 <_sendCmd+0x8e>
    3850:	99 23       	and	r25, r25
    3852:	8c f1       	brlt	.+98     	; 0x38b6 <_sendCmd+0xa0>
    3854:	8c 01       	movw	r16, r24
    3856:	ed cf       	rjmp	.-38     	; 0x3832 <_sendCmd+0x1c>
    3858:	78 01       	movw	r14, r16
    385a:	4d 2d       	mov	r20, r13
    385c:	68 e1       	ldi	r22, 0x18	; 24
    385e:	ce 01       	movw	r24, r28
    3860:	95 d0       	rcall	.+298    	; 0x398c <Si114xWriteToRegister>
    3862:	9c 01       	movw	r18, r24
    3864:	00 97       	sbiw	r24, 0x00	; 0
    3866:	69 f4       	brne	.+26     	; 0x3882 <_sendCmd+0x6c>
    3868:	dd 20       	and	r13, r13
    386a:	69 f0       	breq	.+26     	; 0x3886 <_sendCmd+0x70>
    386c:	60 e2       	ldi	r22, 0x20	; 32
    386e:	ce 01       	movw	r24, r28
    3870:	91 d0       	rcall	.+290    	; 0x3994 <Si114xReadFromRegister>
    3872:	8e 15       	cp	r24, r14
    3874:	9f 05       	cpc	r25, r15
    3876:	51 f4       	brne	.+20     	; 0x388c <_sendCmd+0x76>
    3878:	11 23       	and	r17, r17
    387a:	c4 f7       	brge	.-16     	; 0x386c <_sendCmd+0x56>
    387c:	0a c0       	rjmp	.+20     	; 0x3892 <_sendCmd+0x7c>
    387e:	91 2f       	mov	r25, r17
    3880:	1a c0       	rjmp	.+52     	; 0x38b6 <_sendCmd+0xa0>
    3882:	93 2f       	mov	r25, r19
    3884:	18 c0       	rjmp	.+48     	; 0x38b6 <_sendCmd+0xa0>
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	15 c0       	rjmp	.+42     	; 0x38b6 <_sendCmd+0xa0>
    388c:	80 e0       	ldi	r24, 0x00	; 0
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	12 c0       	rjmp	.+36     	; 0x38b6 <_sendCmd+0xa0>
    3892:	80 2f       	mov	r24, r16
    3894:	91 2f       	mov	r25, r17
    3896:	0f c0       	rjmp	.+30     	; 0x38b6 <_sendCmd+0xa0>
    3898:	82 2f       	mov	r24, r18
    389a:	93 2f       	mov	r25, r19
    389c:	0c c0       	rjmp	.+24     	; 0x38b6 <_sendCmd+0xa0>
    389e:	d1 10       	cpse	r13, r1
    38a0:	d1 cf       	rjmp	.-94     	; 0x3844 <_sendCmd+0x2e>
    38a2:	da cf       	rjmp	.-76     	; 0x3858 <_sendCmd+0x42>
    38a4:	78 01       	movw	r14, r16
    38a6:	4d 2d       	mov	r20, r13
    38a8:	68 e1       	ldi	r22, 0x18	; 24
    38aa:	ce 01       	movw	r24, r28
    38ac:	6f d0       	rcall	.+222    	; 0x398c <Si114xWriteToRegister>
    38ae:	9c 01       	movw	r18, r24
    38b0:	00 97       	sbiw	r24, 0x00	; 0
    38b2:	e1 f2       	breq	.-72     	; 0x386c <_sendCmd+0x56>
    38b4:	f1 cf       	rjmp	.-30     	; 0x3898 <_sendCmd+0x82>
    38b6:	df 91       	pop	r29
    38b8:	cf 91       	pop	r28
    38ba:	1f 91       	pop	r17
    38bc:	0f 91       	pop	r16
    38be:	ff 90       	pop	r15
    38c0:	ef 90       	pop	r14
    38c2:	df 90       	pop	r13
    38c4:	08 95       	ret

000038c6 <Si114xNop>:
    38c6:	60 e0       	ldi	r22, 0x00	; 0
    38c8:	a6 cf       	rjmp	.-180    	; 0x3816 <_sendCmd>
    38ca:	08 95       	ret

000038cc <Si114xPauseAll>:
{
    return _sendCmd(si114x_handle,0x0B);
}

s16 Si114xPauseAll(HANDLE si114x_handle)
{
    38cc:	cf 93       	push	r28
    38ce:	df 93       	push	r29
    38d0:	ec 01       	movw	r28, r24
    while (1) 
    {
        // Keep sending nops until the response is zero
        while (1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    38d2:	60 e2       	ldi	r22, 0x20	; 32
    38d4:	ce 01       	movw	r24, r28
    38d6:	5e d0       	rcall	.+188    	; 0x3994 <Si114xReadFromRegister>
    38d8:	89 2b       	or	r24, r25
    38da:	19 f0       	breq	.+6      	; 0x38e2 <Si114xPauseAll+0x16>
                break;
            else 
                Si114xNop(si114x_handle);
    38dc:	ce 01       	movw	r24, r28
    38de:	f3 df       	rcall	.-26     	; 0x38c6 <Si114xNop>
        }
    38e0:	f8 cf       	rjmp	.-16     	; 0x38d2 <Si114xPauseAll+0x6>

//-----------------------------------------------------------------------------
// use this to pause measurements
static s16 _PsAlsPause (HANDLE si114x_handle) 
{
    return _sendCmd(si114x_handle,0x0B);
    38e2:	6b e0       	ldi	r22, 0x0B	; 11
    38e4:	ce 01       	movw	r24, r28
    38e6:	97 df       	rcall	.-210    	; 0x3816 <_sendCmd>
        _PsAlsPause(si114x_handle);

        // Wait for response
        while(1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    38e8:	60 e2       	ldi	r22, 0x20	; 32
    38ea:	ce 01       	movw	r24, r28
    38ec:	53 d0       	rcall	.+166    	; 0x3994 <Si114xReadFromRegister>
    38ee:	89 2b       	or	r24, r25
    38f0:	d9 f3       	breq	.-10     	; 0x38e8 <Si114xPauseAll+0x1c>
                break;
        }

        // When the PsAlsPause() response is good, we expect it to be a '1'.
        if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
    38f2:	60 e2       	ldi	r22, 0x20	; 32
    38f4:	ce 01       	movw	r24, r28
    38f6:	4e d0       	rcall	.+156    	; 0x3994 <Si114xReadFromRegister>
    38f8:	01 97       	sbiw	r24, 0x01	; 1
    38fa:	59 f7       	brne	.-42     	; 0x38d2 <Si114xPauseAll+0x6>
            break;  // otherwise, start over.
    }
    return 0;
}
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	df 91       	pop	r29
    3902:	cf 91       	pop	r28
    3904:	08 95       	ret

00003906 <si114x_reset>:
    return 0;
}


s16 si114x_reset(HANDLE si114x_handle)
{
    3906:	0f 93       	push	r16
    3908:	1f 93       	push	r17
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	ec 01       	movw	r28, r24
    //
    // delay_10ms();
    // delay_10ms();
    // delay_10ms();

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    3910:	40 e0       	ldi	r20, 0x00	; 0
    3912:	68 e0       	ldi	r22, 0x08	; 8
    3914:	3b d0       	rcall	.+118    	; 0x398c <Si114xWriteToRegister>
    3916:	8c 01       	movw	r16, r24
    retval+=Si114xPauseAll(si114x_handle);
    3918:	ce 01       	movw	r24, r28
    391a:	d8 df       	rcall	.-80     	; 0x38cc <Si114xPauseAll>
    391c:	08 0f       	add	r16, r24
    391e:	19 1f       	adc	r17, r25

    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    3920:	40 e0       	ldi	r20, 0x00	; 0
    3922:	68 e0       	ldi	r22, 0x08	; 8
    3924:	ce 01       	movw	r24, r28
    3926:	32 d0       	rcall	.+100    	; 0x398c <Si114xWriteToRegister>
    3928:	08 0f       	add	r16, r24
    392a:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    392c:	40 e0       	ldi	r20, 0x00	; 0
    392e:	64 e0       	ldi	r22, 0x04	; 4
    3930:	ce 01       	movw	r24, r28
    3932:	2c d0       	rcall	.+88     	; 0x398c <Si114xWriteToRegister>
    3934:	08 0f       	add	r16, r24
    3936:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    3938:	40 e0       	ldi	r20, 0x00	; 0
    393a:	65 e0       	ldi	r22, 0x05	; 5
    393c:	ce 01       	movw	r24, r28
    393e:	26 d0       	rcall	.+76     	; 0x398c <Si114xWriteToRegister>
    3940:	08 0f       	add	r16, r24
    3942:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    3944:	40 e0       	ldi	r20, 0x00	; 0
    3946:	66 e0       	ldi	r22, 0x06	; 6
    3948:	ce 01       	movw	r24, r28
    394a:	20 d0       	rcall	.+64     	; 0x398c <Si114xWriteToRegister>
    394c:	08 0f       	add	r16, r24
    394e:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    3950:	40 e0       	ldi	r20, 0x00	; 0
    3952:	63 e0       	ldi	r22, 0x03	; 3
    3954:	ce 01       	movw	r24, r28
    3956:	1a d0       	rcall	.+52     	; 0x398c <Si114xWriteToRegister>
    3958:	08 0f       	add	r16, r24
    395a:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
    395c:	4f ef       	ldi	r20, 0xFF	; 255
    395e:	61 e2       	ldi	r22, 0x21	; 33
    3960:	ce 01       	movw	r24, r28
    3962:	14 d0       	rcall	.+40     	; 0x398c <Si114xWriteToRegister>
    3964:	08 0f       	add	r16, r24
    3966:	19 1f       	adc	r17, r25

    // Perform the Reset Command
    retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
    3968:	41 e0       	ldi	r20, 0x01	; 1
    396a:	68 e1       	ldi	r22, 0x18	; 24
    396c:	ce 01       	movw	r24, r28
    396e:	0e d0       	rcall	.+28     	; 0x398c <Si114xWriteToRegister>
    3970:	08 0f       	add	r16, r24
    3972:	19 1f       	adc	r17, r25

    // Delay for 10 ms. This delay is needed to allow the Si114x
    // to perform internal reset sequence. 
    delay_10ms();
    3974:	13 d0       	rcall	.+38     	; 0x399c <delay_10ms>

    // Write Hardware Key
    retval+=Si114xWriteToRegister(si114x_handle, REG_HW_KEY, HW_KEY_VAL0);
    3976:	47 e1       	ldi	r20, 0x17	; 23
    3978:	67 e0       	ldi	r22, 0x07	; 7
    397a:	ce 01       	movw	r24, r28
    397c:	07 d0       	rcall	.+14     	; 0x398c <Si114xWriteToRegister>

    return retval;
}
    397e:	80 0f       	add	r24, r16
    3980:	91 1f       	adc	r25, r17
    3982:	df 91       	pop	r29
    3984:	cf 91       	pop	r28
    3986:	1f 91       	pop	r17
    3988:	0f 91       	pop	r16
    398a:	08 95       	ret

0000398c <Si114xWriteToRegister>:
                        u8 address, u8 length, u8 *values)
{
    //return PT_i2c_smbus_read_i2c_block_data(si114x_handle,
    //                       address,    length,     values);
	return i2c_read_data_block(SI114X_ADDR,address,values,length);
}
    398c:	8a e5       	ldi	r24, 0x5A	; 90
    398e:	03 df       	rcall	.-506    	; 0x3796 <i2c_write_data>
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	08 95       	ret

00003994 <Si114xReadFromRegister>:
    3994:	8a e5       	ldi	r24, 0x5A	; 90
    3996:	18 df       	rcall	.-464    	; 0x37c8 <i2c_read_data>
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	08 95       	ret

0000399c <delay_10ms>:
    399c:	83 ec       	ldi	r24, 0xC3	; 195
    399e:	99 e0       	ldi	r25, 0x09	; 9
    39a0:	01 97       	sbiw	r24, 0x01	; 1
    39a2:	f1 f7       	brne	.-4      	; 0x39a0 <delay_10ms+0x4>
    39a4:	00 c0       	rjmp	.+0      	; 0x39a6 <delay_10ms+0xa>
    39a6:	00 00       	nop
    39a8:	08 95       	ret

000039aa <uart_setup>:

char rxbuf[50];

void uart_setup(void) {
	
	PORTD.DIRSET = PIN3_bm; //TX
    39aa:	e0 e6       	ldi	r30, 0x60	; 96
    39ac:	f6 e0       	ldi	r31, 0x06	; 6
    39ae:	88 e0       	ldi	r24, 0x08	; 8
    39b0:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; //RX
    39b2:	84 e0       	ldi	r24, 0x04	; 4
    39b4:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
    39b6:	e0 ea       	ldi	r30, 0xA0	; 160
    39b8:	f9 e0       	ldi	r31, 0x09	; 9
    39ba:	80 e2       	ldi	r24, 0x20	; 32
    39bc:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 207;//0x1111;
    39be:	8f ec       	ldi	r24, 0xCF	; 207
    39c0:	86 83       	std	Z+6, r24	; 0x06
	//USARTE0.BAUDCTRLB = (33 << 4);
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
    39c2:	83 e0       	ldi	r24, 0x03	; 3
    39c4:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    39c6:	88 e1       	ldi	r24, 0x18	; 24
    39c8:	84 83       	std	Z+4, r24	; 0x04
    39ca:	08 95       	ret

000039cc <uart_put_char>:
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    39cc:	e0 ea       	ldi	r30, 0xA0	; 160
    39ce:	f9 e0       	ldi	r31, 0x09	; 9
    39d0:	91 81       	ldd	r25, Z+1	; 0x01
    39d2:	95 ff       	sbrs	r25, 5
    39d4:	fd cf       	rjmp	.-6      	; 0x39d0 <uart_put_char+0x4>
	USARTD0.DATA = c;
    39d6:	80 93 a0 09 	sts	0x09A0, r24
    39da:	08 95       	ret

000039dc <uart_get_char>:
}

char uart_get_char(void) {
	uint16_t timer = 0;
	while (!(USARTD0.STATUS & USART_RXCIF_bm)){
    39dc:	89 eb       	ldi	r24, 0xB9	; 185
    39de:	9b e0       	ldi	r25, 0x0B	; 11
    39e0:	e0 ea       	ldi	r30, 0xA0	; 160
    39e2:	f9 e0       	ldi	r31, 0x09	; 9
    39e4:	09 c0       	rjmp	.+18     	; 0x39f8 <uart_get_char+0x1c>
    39e6:	af e3       	ldi	r26, 0x3F	; 63
    39e8:	bf e1       	ldi	r27, 0x1F	; 31
    39ea:	11 97       	sbiw	r26, 0x01	; 1
    39ec:	f1 f7       	brne	.-4      	; 0x39ea <uart_get_char+0xe>
    39ee:	00 c0       	rjmp	.+0      	; 0x39f0 <uart_get_char+0x14>
    39f0:	00 00       	nop
    39f2:	01 97       	sbiw	r24, 0x01	; 1
		 _delay_ms(1);
		 if (timer++ == TIMEOUT) {
    39f4:	00 97       	sbiw	r24, 0x00	; 0
    39f6:	31 f0       	breq	.+12     	; 0x3a04 <uart_get_char+0x28>
	USARTD0.DATA = c;
}

char uart_get_char(void) {
	uint16_t timer = 0;
	while (!(USARTD0.STATUS & USART_RXCIF_bm)){
    39f8:	21 81       	ldd	r18, Z+1	; 0x01
    39fa:	22 23       	and	r18, r18
    39fc:	a4 f7       	brge	.-24     	; 0x39e6 <uart_get_char+0xa>
		 _delay_ms(1);
		 if (timer++ == TIMEOUT) {
			return 0x03;
		 }
	}
	return USARTD0.DATA;
    39fe:	80 91 a0 09 	lds	r24, 0x09A0
    3a02:	08 95       	ret
char uart_get_char(void) {
	uint16_t timer = 0;
	while (!(USARTD0.STATUS & USART_RXCIF_bm)){
		 _delay_ms(1);
		 if (timer++ == TIMEOUT) {
			return 0x03;
    3a04:	83 e0       	ldi	r24, 0x03	; 3
		 }
	}
	return USARTD0.DATA;
}
    3a06:	08 95       	ret

00003a08 <__udivmodsi4>:
    3a08:	a1 e2       	ldi	r26, 0x21	; 33
    3a0a:	1a 2e       	mov	r1, r26
    3a0c:	aa 1b       	sub	r26, r26
    3a0e:	bb 1b       	sub	r27, r27
    3a10:	fd 01       	movw	r30, r26
    3a12:	0d c0       	rjmp	.+26     	; 0x3a2e <__udivmodsi4_ep>

00003a14 <__udivmodsi4_loop>:
    3a14:	aa 1f       	adc	r26, r26
    3a16:	bb 1f       	adc	r27, r27
    3a18:	ee 1f       	adc	r30, r30
    3a1a:	ff 1f       	adc	r31, r31
    3a1c:	a2 17       	cp	r26, r18
    3a1e:	b3 07       	cpc	r27, r19
    3a20:	e4 07       	cpc	r30, r20
    3a22:	f5 07       	cpc	r31, r21
    3a24:	20 f0       	brcs	.+8      	; 0x3a2e <__udivmodsi4_ep>
    3a26:	a2 1b       	sub	r26, r18
    3a28:	b3 0b       	sbc	r27, r19
    3a2a:	e4 0b       	sbc	r30, r20
    3a2c:	f5 0b       	sbc	r31, r21

00003a2e <__udivmodsi4_ep>:
    3a2e:	66 1f       	adc	r22, r22
    3a30:	77 1f       	adc	r23, r23
    3a32:	88 1f       	adc	r24, r24
    3a34:	99 1f       	adc	r25, r25
    3a36:	1a 94       	dec	r1
    3a38:	69 f7       	brne	.-38     	; 0x3a14 <__udivmodsi4_loop>
    3a3a:	60 95       	com	r22
    3a3c:	70 95       	com	r23
    3a3e:	80 95       	com	r24
    3a40:	90 95       	com	r25
    3a42:	9b 01       	movw	r18, r22
    3a44:	ac 01       	movw	r20, r24
    3a46:	bd 01       	movw	r22, r26
    3a48:	cf 01       	movw	r24, r30
    3a4a:	08 95       	ret

00003a4c <__tablejump2__>:
    3a4c:	ee 0f       	add	r30, r30
    3a4e:	ff 1f       	adc	r31, r31

00003a50 <__tablejump__>:
    3a50:	05 90       	lpm	r0, Z+
    3a52:	f4 91       	lpm	r31, Z
    3a54:	e0 2d       	mov	r30, r0
    3a56:	09 94       	ijmp

00003a58 <__umulhisi3>:
    3a58:	a2 9f       	mul	r26, r18
    3a5a:	b0 01       	movw	r22, r0
    3a5c:	b3 9f       	mul	r27, r19
    3a5e:	c0 01       	movw	r24, r0
    3a60:	a3 9f       	mul	r26, r19
    3a62:	70 0d       	add	r23, r0
    3a64:	81 1d       	adc	r24, r1
    3a66:	11 24       	eor	r1, r1
    3a68:	91 1d       	adc	r25, r1
    3a6a:	b2 9f       	mul	r27, r18
    3a6c:	70 0d       	add	r23, r0
    3a6e:	81 1d       	adc	r24, r1
    3a70:	11 24       	eor	r1, r1
    3a72:	91 1d       	adc	r25, r1
    3a74:	08 95       	ret

00003a76 <__muluhisi3>:
    3a76:	f0 df       	rcall	.-32     	; 0x3a58 <__umulhisi3>
    3a78:	a5 9f       	mul	r26, r21
    3a7a:	90 0d       	add	r25, r0
    3a7c:	b4 9f       	mul	r27, r20
    3a7e:	90 0d       	add	r25, r0
    3a80:	a4 9f       	mul	r26, r20
    3a82:	80 0d       	add	r24, r0
    3a84:	91 1d       	adc	r25, r1
    3a86:	11 24       	eor	r1, r1
    3a88:	08 95       	ret

00003a8a <sprintf>:
    3a8a:	0f 93       	push	r16
    3a8c:	1f 93       	push	r17
    3a8e:	cf 93       	push	r28
    3a90:	df 93       	push	r29
    3a92:	cd b7       	in	r28, 0x3d	; 61
    3a94:	de b7       	in	r29, 0x3e	; 62
    3a96:	2e 97       	sbiw	r28, 0x0e	; 14
    3a98:	cd bf       	out	0x3d, r28	; 61
    3a9a:	de bf       	out	0x3e, r29	; 62
    3a9c:	0d 89       	ldd	r16, Y+21	; 0x15
    3a9e:	1e 89       	ldd	r17, Y+22	; 0x16
    3aa0:	86 e0       	ldi	r24, 0x06	; 6
    3aa2:	8c 83       	std	Y+4, r24	; 0x04
    3aa4:	09 83       	std	Y+1, r16	; 0x01
    3aa6:	1a 83       	std	Y+2, r17	; 0x02
    3aa8:	8f ef       	ldi	r24, 0xFF	; 255
    3aaa:	9f e7       	ldi	r25, 0x7F	; 127
    3aac:	8d 83       	std	Y+5, r24	; 0x05
    3aae:	9e 83       	std	Y+6, r25	; 0x06
    3ab0:	ae 01       	movw	r20, r28
    3ab2:	47 5e       	subi	r20, 0xE7	; 231
    3ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ab6:	6f 89       	ldd	r22, Y+23	; 0x17
    3ab8:	78 8d       	ldd	r23, Y+24	; 0x18
    3aba:	ce 01       	movw	r24, r28
    3abc:	01 96       	adiw	r24, 0x01	; 1
    3abe:	0d d0       	rcall	.+26     	; 0x3ada <vfprintf>
    3ac0:	ef 81       	ldd	r30, Y+7	; 0x07
    3ac2:	f8 85       	ldd	r31, Y+8	; 0x08
    3ac4:	e0 0f       	add	r30, r16
    3ac6:	f1 1f       	adc	r31, r17
    3ac8:	10 82       	st	Z, r1
    3aca:	2e 96       	adiw	r28, 0x0e	; 14
    3acc:	cd bf       	out	0x3d, r28	; 61
    3ace:	de bf       	out	0x3e, r29	; 62
    3ad0:	df 91       	pop	r29
    3ad2:	cf 91       	pop	r28
    3ad4:	1f 91       	pop	r17
    3ad6:	0f 91       	pop	r16
    3ad8:	08 95       	ret

00003ada <vfprintf>:
    3ada:	2f 92       	push	r2
    3adc:	3f 92       	push	r3
    3ade:	4f 92       	push	r4
    3ae0:	5f 92       	push	r5
    3ae2:	6f 92       	push	r6
    3ae4:	7f 92       	push	r7
    3ae6:	8f 92       	push	r8
    3ae8:	9f 92       	push	r9
    3aea:	af 92       	push	r10
    3aec:	bf 92       	push	r11
    3aee:	cf 92       	push	r12
    3af0:	df 92       	push	r13
    3af2:	ef 92       	push	r14
    3af4:	ff 92       	push	r15
    3af6:	0f 93       	push	r16
    3af8:	1f 93       	push	r17
    3afa:	cf 93       	push	r28
    3afc:	df 93       	push	r29
    3afe:	cd b7       	in	r28, 0x3d	; 61
    3b00:	de b7       	in	r29, 0x3e	; 62
    3b02:	2c 97       	sbiw	r28, 0x0c	; 12
    3b04:	cd bf       	out	0x3d, r28	; 61
    3b06:	de bf       	out	0x3e, r29	; 62
    3b08:	7c 01       	movw	r14, r24
    3b0a:	6b 01       	movw	r12, r22
    3b0c:	8a 01       	movw	r16, r20
    3b0e:	fc 01       	movw	r30, r24
    3b10:	16 82       	std	Z+6, r1	; 0x06
    3b12:	17 82       	std	Z+7, r1	; 0x07
    3b14:	83 81       	ldd	r24, Z+3	; 0x03
    3b16:	81 ff       	sbrs	r24, 1
    3b18:	b0 c1       	rjmp	.+864    	; 0x3e7a <vfprintf+0x3a0>
    3b1a:	ce 01       	movw	r24, r28
    3b1c:	01 96       	adiw	r24, 0x01	; 1
    3b1e:	4c 01       	movw	r8, r24
    3b20:	f7 01       	movw	r30, r14
    3b22:	93 81       	ldd	r25, Z+3	; 0x03
    3b24:	f6 01       	movw	r30, r12
    3b26:	93 fd       	sbrc	r25, 3
    3b28:	85 91       	lpm	r24, Z+
    3b2a:	93 ff       	sbrs	r25, 3
    3b2c:	81 91       	ld	r24, Z+
    3b2e:	6f 01       	movw	r12, r30
    3b30:	88 23       	and	r24, r24
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <vfprintf+0x5c>
    3b34:	9e c1       	rjmp	.+828    	; 0x3e72 <vfprintf+0x398>
    3b36:	85 32       	cpi	r24, 0x25	; 37
    3b38:	39 f4       	brne	.+14     	; 0x3b48 <vfprintf+0x6e>
    3b3a:	93 fd       	sbrc	r25, 3
    3b3c:	85 91       	lpm	r24, Z+
    3b3e:	93 ff       	sbrs	r25, 3
    3b40:	81 91       	ld	r24, Z+
    3b42:	6f 01       	movw	r12, r30
    3b44:	85 32       	cpi	r24, 0x25	; 37
    3b46:	21 f4       	brne	.+8      	; 0x3b50 <vfprintf+0x76>
    3b48:	b7 01       	movw	r22, r14
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	c4 d1       	rcall	.+904    	; 0x3ed6 <fputc>
    3b4e:	e8 cf       	rjmp	.-48     	; 0x3b20 <vfprintf+0x46>
    3b50:	51 2c       	mov	r5, r1
    3b52:	31 2c       	mov	r3, r1
    3b54:	20 e0       	ldi	r18, 0x00	; 0
    3b56:	20 32       	cpi	r18, 0x20	; 32
    3b58:	a0 f4       	brcc	.+40     	; 0x3b82 <vfprintf+0xa8>
    3b5a:	8b 32       	cpi	r24, 0x2B	; 43
    3b5c:	69 f0       	breq	.+26     	; 0x3b78 <vfprintf+0x9e>
    3b5e:	30 f4       	brcc	.+12     	; 0x3b6c <vfprintf+0x92>
    3b60:	80 32       	cpi	r24, 0x20	; 32
    3b62:	59 f0       	breq	.+22     	; 0x3b7a <vfprintf+0xa0>
    3b64:	83 32       	cpi	r24, 0x23	; 35
    3b66:	69 f4       	brne	.+26     	; 0x3b82 <vfprintf+0xa8>
    3b68:	20 61       	ori	r18, 0x10	; 16
    3b6a:	2c c0       	rjmp	.+88     	; 0x3bc4 <vfprintf+0xea>
    3b6c:	8d 32       	cpi	r24, 0x2D	; 45
    3b6e:	39 f0       	breq	.+14     	; 0x3b7e <vfprintf+0xa4>
    3b70:	80 33       	cpi	r24, 0x30	; 48
    3b72:	39 f4       	brne	.+14     	; 0x3b82 <vfprintf+0xa8>
    3b74:	21 60       	ori	r18, 0x01	; 1
    3b76:	26 c0       	rjmp	.+76     	; 0x3bc4 <vfprintf+0xea>
    3b78:	22 60       	ori	r18, 0x02	; 2
    3b7a:	24 60       	ori	r18, 0x04	; 4
    3b7c:	23 c0       	rjmp	.+70     	; 0x3bc4 <vfprintf+0xea>
    3b7e:	28 60       	ori	r18, 0x08	; 8
    3b80:	21 c0       	rjmp	.+66     	; 0x3bc4 <vfprintf+0xea>
    3b82:	27 fd       	sbrc	r18, 7
    3b84:	27 c0       	rjmp	.+78     	; 0x3bd4 <vfprintf+0xfa>
    3b86:	30 ed       	ldi	r19, 0xD0	; 208
    3b88:	38 0f       	add	r19, r24
    3b8a:	3a 30       	cpi	r19, 0x0A	; 10
    3b8c:	78 f4       	brcc	.+30     	; 0x3bac <vfprintf+0xd2>
    3b8e:	26 ff       	sbrs	r18, 6
    3b90:	06 c0       	rjmp	.+12     	; 0x3b9e <vfprintf+0xc4>
    3b92:	fa e0       	ldi	r31, 0x0A	; 10
    3b94:	5f 9e       	mul	r5, r31
    3b96:	30 0d       	add	r19, r0
    3b98:	11 24       	eor	r1, r1
    3b9a:	53 2e       	mov	r5, r19
    3b9c:	13 c0       	rjmp	.+38     	; 0x3bc4 <vfprintf+0xea>
    3b9e:	8a e0       	ldi	r24, 0x0A	; 10
    3ba0:	38 9e       	mul	r3, r24
    3ba2:	30 0d       	add	r19, r0
    3ba4:	11 24       	eor	r1, r1
    3ba6:	33 2e       	mov	r3, r19
    3ba8:	20 62       	ori	r18, 0x20	; 32
    3baa:	0c c0       	rjmp	.+24     	; 0x3bc4 <vfprintf+0xea>
    3bac:	8e 32       	cpi	r24, 0x2E	; 46
    3bae:	21 f4       	brne	.+8      	; 0x3bb8 <vfprintf+0xde>
    3bb0:	26 fd       	sbrc	r18, 6
    3bb2:	5f c1       	rjmp	.+702    	; 0x3e72 <vfprintf+0x398>
    3bb4:	20 64       	ori	r18, 0x40	; 64
    3bb6:	06 c0       	rjmp	.+12     	; 0x3bc4 <vfprintf+0xea>
    3bb8:	8c 36       	cpi	r24, 0x6C	; 108
    3bba:	11 f4       	brne	.+4      	; 0x3bc0 <vfprintf+0xe6>
    3bbc:	20 68       	ori	r18, 0x80	; 128
    3bbe:	02 c0       	rjmp	.+4      	; 0x3bc4 <vfprintf+0xea>
    3bc0:	88 36       	cpi	r24, 0x68	; 104
    3bc2:	41 f4       	brne	.+16     	; 0x3bd4 <vfprintf+0xfa>
    3bc4:	f6 01       	movw	r30, r12
    3bc6:	93 fd       	sbrc	r25, 3
    3bc8:	85 91       	lpm	r24, Z+
    3bca:	93 ff       	sbrs	r25, 3
    3bcc:	81 91       	ld	r24, Z+
    3bce:	6f 01       	movw	r12, r30
    3bd0:	81 11       	cpse	r24, r1
    3bd2:	c1 cf       	rjmp	.-126    	; 0x3b56 <vfprintf+0x7c>
    3bd4:	98 2f       	mov	r25, r24
    3bd6:	9f 7d       	andi	r25, 0xDF	; 223
    3bd8:	95 54       	subi	r25, 0x45	; 69
    3bda:	93 30       	cpi	r25, 0x03	; 3
    3bdc:	28 f4       	brcc	.+10     	; 0x3be8 <vfprintf+0x10e>
    3bde:	0c 5f       	subi	r16, 0xFC	; 252
    3be0:	1f 4f       	sbci	r17, 0xFF	; 255
    3be2:	ff e3       	ldi	r31, 0x3F	; 63
    3be4:	f9 83       	std	Y+1, r31	; 0x01
    3be6:	0d c0       	rjmp	.+26     	; 0x3c02 <vfprintf+0x128>
    3be8:	83 36       	cpi	r24, 0x63	; 99
    3bea:	31 f0       	breq	.+12     	; 0x3bf8 <vfprintf+0x11e>
    3bec:	83 37       	cpi	r24, 0x73	; 115
    3bee:	71 f0       	breq	.+28     	; 0x3c0c <vfprintf+0x132>
    3bf0:	83 35       	cpi	r24, 0x53	; 83
    3bf2:	09 f0       	breq	.+2      	; 0x3bf6 <vfprintf+0x11c>
    3bf4:	57 c0       	rjmp	.+174    	; 0x3ca4 <vfprintf+0x1ca>
    3bf6:	21 c0       	rjmp	.+66     	; 0x3c3a <vfprintf+0x160>
    3bf8:	f8 01       	movw	r30, r16
    3bfa:	80 81       	ld	r24, Z
    3bfc:	89 83       	std	Y+1, r24	; 0x01
    3bfe:	0e 5f       	subi	r16, 0xFE	; 254
    3c00:	1f 4f       	sbci	r17, 0xFF	; 255
    3c02:	44 24       	eor	r4, r4
    3c04:	43 94       	inc	r4
    3c06:	51 2c       	mov	r5, r1
    3c08:	54 01       	movw	r10, r8
    3c0a:	14 c0       	rjmp	.+40     	; 0x3c34 <vfprintf+0x15a>
    3c0c:	38 01       	movw	r6, r16
    3c0e:	f2 e0       	ldi	r31, 0x02	; 2
    3c10:	6f 0e       	add	r6, r31
    3c12:	71 1c       	adc	r7, r1
    3c14:	f8 01       	movw	r30, r16
    3c16:	a0 80       	ld	r10, Z
    3c18:	b1 80       	ldd	r11, Z+1	; 0x01
    3c1a:	26 ff       	sbrs	r18, 6
    3c1c:	03 c0       	rjmp	.+6      	; 0x3c24 <vfprintf+0x14a>
    3c1e:	65 2d       	mov	r22, r5
    3c20:	70 e0       	ldi	r23, 0x00	; 0
    3c22:	02 c0       	rjmp	.+4      	; 0x3c28 <vfprintf+0x14e>
    3c24:	6f ef       	ldi	r22, 0xFF	; 255
    3c26:	7f ef       	ldi	r23, 0xFF	; 255
    3c28:	c5 01       	movw	r24, r10
    3c2a:	2c 87       	std	Y+12, r18	; 0x0c
    3c2c:	49 d1       	rcall	.+658    	; 0x3ec0 <strnlen>
    3c2e:	2c 01       	movw	r4, r24
    3c30:	83 01       	movw	r16, r6
    3c32:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c34:	2f 77       	andi	r18, 0x7F	; 127
    3c36:	22 2e       	mov	r2, r18
    3c38:	16 c0       	rjmp	.+44     	; 0x3c66 <vfprintf+0x18c>
    3c3a:	38 01       	movw	r6, r16
    3c3c:	f2 e0       	ldi	r31, 0x02	; 2
    3c3e:	6f 0e       	add	r6, r31
    3c40:	71 1c       	adc	r7, r1
    3c42:	f8 01       	movw	r30, r16
    3c44:	a0 80       	ld	r10, Z
    3c46:	b1 80       	ldd	r11, Z+1	; 0x01
    3c48:	26 ff       	sbrs	r18, 6
    3c4a:	03 c0       	rjmp	.+6      	; 0x3c52 <vfprintf+0x178>
    3c4c:	65 2d       	mov	r22, r5
    3c4e:	70 e0       	ldi	r23, 0x00	; 0
    3c50:	02 c0       	rjmp	.+4      	; 0x3c56 <vfprintf+0x17c>
    3c52:	6f ef       	ldi	r22, 0xFF	; 255
    3c54:	7f ef       	ldi	r23, 0xFF	; 255
    3c56:	c5 01       	movw	r24, r10
    3c58:	2c 87       	std	Y+12, r18	; 0x0c
    3c5a:	27 d1       	rcall	.+590    	; 0x3eaa <strnlen_P>
    3c5c:	2c 01       	movw	r4, r24
    3c5e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c60:	20 68       	ori	r18, 0x80	; 128
    3c62:	22 2e       	mov	r2, r18
    3c64:	83 01       	movw	r16, r6
    3c66:	23 fc       	sbrc	r2, 3
    3c68:	19 c0       	rjmp	.+50     	; 0x3c9c <vfprintf+0x1c2>
    3c6a:	83 2d       	mov	r24, r3
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	48 16       	cp	r4, r24
    3c70:	59 06       	cpc	r5, r25
    3c72:	a0 f4       	brcc	.+40     	; 0x3c9c <vfprintf+0x1c2>
    3c74:	b7 01       	movw	r22, r14
    3c76:	80 e2       	ldi	r24, 0x20	; 32
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	2d d1       	rcall	.+602    	; 0x3ed6 <fputc>
    3c7c:	3a 94       	dec	r3
    3c7e:	f5 cf       	rjmp	.-22     	; 0x3c6a <vfprintf+0x190>
    3c80:	f5 01       	movw	r30, r10
    3c82:	27 fc       	sbrc	r2, 7
    3c84:	85 91       	lpm	r24, Z+
    3c86:	27 fe       	sbrs	r2, 7
    3c88:	81 91       	ld	r24, Z+
    3c8a:	5f 01       	movw	r10, r30
    3c8c:	b7 01       	movw	r22, r14
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	22 d1       	rcall	.+580    	; 0x3ed6 <fputc>
    3c92:	31 10       	cpse	r3, r1
    3c94:	3a 94       	dec	r3
    3c96:	f1 e0       	ldi	r31, 0x01	; 1
    3c98:	4f 1a       	sub	r4, r31
    3c9a:	51 08       	sbc	r5, r1
    3c9c:	41 14       	cp	r4, r1
    3c9e:	51 04       	cpc	r5, r1
    3ca0:	79 f7       	brne	.-34     	; 0x3c80 <vfprintf+0x1a6>
    3ca2:	de c0       	rjmp	.+444    	; 0x3e60 <vfprintf+0x386>
    3ca4:	84 36       	cpi	r24, 0x64	; 100
    3ca6:	11 f0       	breq	.+4      	; 0x3cac <vfprintf+0x1d2>
    3ca8:	89 36       	cpi	r24, 0x69	; 105
    3caa:	31 f5       	brne	.+76     	; 0x3cf8 <vfprintf+0x21e>
    3cac:	f8 01       	movw	r30, r16
    3cae:	27 ff       	sbrs	r18, 7
    3cb0:	07 c0       	rjmp	.+14     	; 0x3cc0 <vfprintf+0x1e6>
    3cb2:	60 81       	ld	r22, Z
    3cb4:	71 81       	ldd	r23, Z+1	; 0x01
    3cb6:	82 81       	ldd	r24, Z+2	; 0x02
    3cb8:	93 81       	ldd	r25, Z+3	; 0x03
    3cba:	0c 5f       	subi	r16, 0xFC	; 252
    3cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cbe:	08 c0       	rjmp	.+16     	; 0x3cd0 <vfprintf+0x1f6>
    3cc0:	60 81       	ld	r22, Z
    3cc2:	71 81       	ldd	r23, Z+1	; 0x01
    3cc4:	88 27       	eor	r24, r24
    3cc6:	77 fd       	sbrc	r23, 7
    3cc8:	80 95       	com	r24
    3cca:	98 2f       	mov	r25, r24
    3ccc:	0e 5f       	subi	r16, 0xFE	; 254
    3cce:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd0:	2f 76       	andi	r18, 0x6F	; 111
    3cd2:	b2 2e       	mov	r11, r18
    3cd4:	97 ff       	sbrs	r25, 7
    3cd6:	09 c0       	rjmp	.+18     	; 0x3cea <vfprintf+0x210>
    3cd8:	90 95       	com	r25
    3cda:	80 95       	com	r24
    3cdc:	70 95       	com	r23
    3cde:	61 95       	neg	r22
    3ce0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ce2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce6:	20 68       	ori	r18, 0x80	; 128
    3ce8:	b2 2e       	mov	r11, r18
    3cea:	2a e0       	ldi	r18, 0x0A	; 10
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	a4 01       	movw	r20, r8
    3cf0:	24 d1       	rcall	.+584    	; 0x3f3a <__ultoa_invert>
    3cf2:	a8 2e       	mov	r10, r24
    3cf4:	a8 18       	sub	r10, r8
    3cf6:	43 c0       	rjmp	.+134    	; 0x3d7e <vfprintf+0x2a4>
    3cf8:	85 37       	cpi	r24, 0x75	; 117
    3cfa:	29 f4       	brne	.+10     	; 0x3d06 <vfprintf+0x22c>
    3cfc:	2f 7e       	andi	r18, 0xEF	; 239
    3cfe:	b2 2e       	mov	r11, r18
    3d00:	2a e0       	ldi	r18, 0x0A	; 10
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	25 c0       	rjmp	.+74     	; 0x3d50 <vfprintf+0x276>
    3d06:	f2 2f       	mov	r31, r18
    3d08:	f9 7f       	andi	r31, 0xF9	; 249
    3d0a:	bf 2e       	mov	r11, r31
    3d0c:	8f 36       	cpi	r24, 0x6F	; 111
    3d0e:	c1 f0       	breq	.+48     	; 0x3d40 <vfprintf+0x266>
    3d10:	18 f4       	brcc	.+6      	; 0x3d18 <vfprintf+0x23e>
    3d12:	88 35       	cpi	r24, 0x58	; 88
    3d14:	79 f0       	breq	.+30     	; 0x3d34 <vfprintf+0x25a>
    3d16:	ad c0       	rjmp	.+346    	; 0x3e72 <vfprintf+0x398>
    3d18:	80 37       	cpi	r24, 0x70	; 112
    3d1a:	19 f0       	breq	.+6      	; 0x3d22 <vfprintf+0x248>
    3d1c:	88 37       	cpi	r24, 0x78	; 120
    3d1e:	21 f0       	breq	.+8      	; 0x3d28 <vfprintf+0x24e>
    3d20:	a8 c0       	rjmp	.+336    	; 0x3e72 <vfprintf+0x398>
    3d22:	2f 2f       	mov	r18, r31
    3d24:	20 61       	ori	r18, 0x10	; 16
    3d26:	b2 2e       	mov	r11, r18
    3d28:	b4 fe       	sbrs	r11, 4
    3d2a:	0d c0       	rjmp	.+26     	; 0x3d46 <vfprintf+0x26c>
    3d2c:	8b 2d       	mov	r24, r11
    3d2e:	84 60       	ori	r24, 0x04	; 4
    3d30:	b8 2e       	mov	r11, r24
    3d32:	09 c0       	rjmp	.+18     	; 0x3d46 <vfprintf+0x26c>
    3d34:	24 ff       	sbrs	r18, 4
    3d36:	0a c0       	rjmp	.+20     	; 0x3d4c <vfprintf+0x272>
    3d38:	9f 2f       	mov	r25, r31
    3d3a:	96 60       	ori	r25, 0x06	; 6
    3d3c:	b9 2e       	mov	r11, r25
    3d3e:	06 c0       	rjmp	.+12     	; 0x3d4c <vfprintf+0x272>
    3d40:	28 e0       	ldi	r18, 0x08	; 8
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	05 c0       	rjmp	.+10     	; 0x3d50 <vfprintf+0x276>
    3d46:	20 e1       	ldi	r18, 0x10	; 16
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	02 c0       	rjmp	.+4      	; 0x3d50 <vfprintf+0x276>
    3d4c:	20 e1       	ldi	r18, 0x10	; 16
    3d4e:	32 e0       	ldi	r19, 0x02	; 2
    3d50:	f8 01       	movw	r30, r16
    3d52:	b7 fe       	sbrs	r11, 7
    3d54:	07 c0       	rjmp	.+14     	; 0x3d64 <vfprintf+0x28a>
    3d56:	60 81       	ld	r22, Z
    3d58:	71 81       	ldd	r23, Z+1	; 0x01
    3d5a:	82 81       	ldd	r24, Z+2	; 0x02
    3d5c:	93 81       	ldd	r25, Z+3	; 0x03
    3d5e:	0c 5f       	subi	r16, 0xFC	; 252
    3d60:	1f 4f       	sbci	r17, 0xFF	; 255
    3d62:	06 c0       	rjmp	.+12     	; 0x3d70 <vfprintf+0x296>
    3d64:	60 81       	ld	r22, Z
    3d66:	71 81       	ldd	r23, Z+1	; 0x01
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	0e 5f       	subi	r16, 0xFE	; 254
    3d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d70:	a4 01       	movw	r20, r8
    3d72:	e3 d0       	rcall	.+454    	; 0x3f3a <__ultoa_invert>
    3d74:	a8 2e       	mov	r10, r24
    3d76:	a8 18       	sub	r10, r8
    3d78:	fb 2d       	mov	r31, r11
    3d7a:	ff 77       	andi	r31, 0x7F	; 127
    3d7c:	bf 2e       	mov	r11, r31
    3d7e:	b6 fe       	sbrs	r11, 6
    3d80:	0b c0       	rjmp	.+22     	; 0x3d98 <vfprintf+0x2be>
    3d82:	2b 2d       	mov	r18, r11
    3d84:	2e 7f       	andi	r18, 0xFE	; 254
    3d86:	a5 14       	cp	r10, r5
    3d88:	50 f4       	brcc	.+20     	; 0x3d9e <vfprintf+0x2c4>
    3d8a:	b4 fe       	sbrs	r11, 4
    3d8c:	0a c0       	rjmp	.+20     	; 0x3da2 <vfprintf+0x2c8>
    3d8e:	b2 fc       	sbrc	r11, 2
    3d90:	08 c0       	rjmp	.+16     	; 0x3da2 <vfprintf+0x2c8>
    3d92:	2b 2d       	mov	r18, r11
    3d94:	2e 7e       	andi	r18, 0xEE	; 238
    3d96:	05 c0       	rjmp	.+10     	; 0x3da2 <vfprintf+0x2c8>
    3d98:	7a 2c       	mov	r7, r10
    3d9a:	2b 2d       	mov	r18, r11
    3d9c:	03 c0       	rjmp	.+6      	; 0x3da4 <vfprintf+0x2ca>
    3d9e:	7a 2c       	mov	r7, r10
    3da0:	01 c0       	rjmp	.+2      	; 0x3da4 <vfprintf+0x2ca>
    3da2:	75 2c       	mov	r7, r5
    3da4:	24 ff       	sbrs	r18, 4
    3da6:	0d c0       	rjmp	.+26     	; 0x3dc2 <vfprintf+0x2e8>
    3da8:	fe 01       	movw	r30, r28
    3daa:	ea 0d       	add	r30, r10
    3dac:	f1 1d       	adc	r31, r1
    3dae:	80 81       	ld	r24, Z
    3db0:	80 33       	cpi	r24, 0x30	; 48
    3db2:	11 f4       	brne	.+4      	; 0x3db8 <vfprintf+0x2de>
    3db4:	29 7e       	andi	r18, 0xE9	; 233
    3db6:	09 c0       	rjmp	.+18     	; 0x3dca <vfprintf+0x2f0>
    3db8:	22 ff       	sbrs	r18, 2
    3dba:	06 c0       	rjmp	.+12     	; 0x3dc8 <vfprintf+0x2ee>
    3dbc:	73 94       	inc	r7
    3dbe:	73 94       	inc	r7
    3dc0:	04 c0       	rjmp	.+8      	; 0x3dca <vfprintf+0x2f0>
    3dc2:	82 2f       	mov	r24, r18
    3dc4:	86 78       	andi	r24, 0x86	; 134
    3dc6:	09 f0       	breq	.+2      	; 0x3dca <vfprintf+0x2f0>
    3dc8:	73 94       	inc	r7
    3dca:	23 fd       	sbrc	r18, 3
    3dcc:	12 c0       	rjmp	.+36     	; 0x3df2 <vfprintf+0x318>
    3dce:	20 ff       	sbrs	r18, 0
    3dd0:	06 c0       	rjmp	.+12     	; 0x3dde <vfprintf+0x304>
    3dd2:	5a 2c       	mov	r5, r10
    3dd4:	73 14       	cp	r7, r3
    3dd6:	18 f4       	brcc	.+6      	; 0x3dde <vfprintf+0x304>
    3dd8:	53 0c       	add	r5, r3
    3dda:	57 18       	sub	r5, r7
    3ddc:	73 2c       	mov	r7, r3
    3dde:	73 14       	cp	r7, r3
    3de0:	60 f4       	brcc	.+24     	; 0x3dfa <vfprintf+0x320>
    3de2:	b7 01       	movw	r22, r14
    3de4:	80 e2       	ldi	r24, 0x20	; 32
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	2c 87       	std	Y+12, r18	; 0x0c
    3dea:	75 d0       	rcall	.+234    	; 0x3ed6 <fputc>
    3dec:	73 94       	inc	r7
    3dee:	2c 85       	ldd	r18, Y+12	; 0x0c
    3df0:	f6 cf       	rjmp	.-20     	; 0x3dde <vfprintf+0x304>
    3df2:	73 14       	cp	r7, r3
    3df4:	10 f4       	brcc	.+4      	; 0x3dfa <vfprintf+0x320>
    3df6:	37 18       	sub	r3, r7
    3df8:	01 c0       	rjmp	.+2      	; 0x3dfc <vfprintf+0x322>
    3dfa:	31 2c       	mov	r3, r1
    3dfc:	24 ff       	sbrs	r18, 4
    3dfe:	11 c0       	rjmp	.+34     	; 0x3e22 <vfprintf+0x348>
    3e00:	b7 01       	movw	r22, r14
    3e02:	80 e3       	ldi	r24, 0x30	; 48
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	2c 87       	std	Y+12, r18	; 0x0c
    3e08:	66 d0       	rcall	.+204    	; 0x3ed6 <fputc>
    3e0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e0c:	22 ff       	sbrs	r18, 2
    3e0e:	16 c0       	rjmp	.+44     	; 0x3e3c <vfprintf+0x362>
    3e10:	21 ff       	sbrs	r18, 1
    3e12:	03 c0       	rjmp	.+6      	; 0x3e1a <vfprintf+0x340>
    3e14:	88 e5       	ldi	r24, 0x58	; 88
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	02 c0       	rjmp	.+4      	; 0x3e1e <vfprintf+0x344>
    3e1a:	88 e7       	ldi	r24, 0x78	; 120
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	b7 01       	movw	r22, r14
    3e20:	0c c0       	rjmp	.+24     	; 0x3e3a <vfprintf+0x360>
    3e22:	82 2f       	mov	r24, r18
    3e24:	86 78       	andi	r24, 0x86	; 134
    3e26:	51 f0       	breq	.+20     	; 0x3e3c <vfprintf+0x362>
    3e28:	21 fd       	sbrc	r18, 1
    3e2a:	02 c0       	rjmp	.+4      	; 0x3e30 <vfprintf+0x356>
    3e2c:	80 e2       	ldi	r24, 0x20	; 32
    3e2e:	01 c0       	rjmp	.+2      	; 0x3e32 <vfprintf+0x358>
    3e30:	8b e2       	ldi	r24, 0x2B	; 43
    3e32:	27 fd       	sbrc	r18, 7
    3e34:	8d e2       	ldi	r24, 0x2D	; 45
    3e36:	b7 01       	movw	r22, r14
    3e38:	90 e0       	ldi	r25, 0x00	; 0
    3e3a:	4d d0       	rcall	.+154    	; 0x3ed6 <fputc>
    3e3c:	a5 14       	cp	r10, r5
    3e3e:	30 f4       	brcc	.+12     	; 0x3e4c <vfprintf+0x372>
    3e40:	b7 01       	movw	r22, r14
    3e42:	80 e3       	ldi	r24, 0x30	; 48
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	47 d0       	rcall	.+142    	; 0x3ed6 <fputc>
    3e48:	5a 94       	dec	r5
    3e4a:	f8 cf       	rjmp	.-16     	; 0x3e3c <vfprintf+0x362>
    3e4c:	aa 94       	dec	r10
    3e4e:	f4 01       	movw	r30, r8
    3e50:	ea 0d       	add	r30, r10
    3e52:	f1 1d       	adc	r31, r1
    3e54:	80 81       	ld	r24, Z
    3e56:	b7 01       	movw	r22, r14
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	3d d0       	rcall	.+122    	; 0x3ed6 <fputc>
    3e5c:	a1 10       	cpse	r10, r1
    3e5e:	f6 cf       	rjmp	.-20     	; 0x3e4c <vfprintf+0x372>
    3e60:	33 20       	and	r3, r3
    3e62:	09 f4       	brne	.+2      	; 0x3e66 <vfprintf+0x38c>
    3e64:	5d ce       	rjmp	.-838    	; 0x3b20 <vfprintf+0x46>
    3e66:	b7 01       	movw	r22, r14
    3e68:	80 e2       	ldi	r24, 0x20	; 32
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	34 d0       	rcall	.+104    	; 0x3ed6 <fputc>
    3e6e:	3a 94       	dec	r3
    3e70:	f7 cf       	rjmp	.-18     	; 0x3e60 <vfprintf+0x386>
    3e72:	f7 01       	movw	r30, r14
    3e74:	86 81       	ldd	r24, Z+6	; 0x06
    3e76:	97 81       	ldd	r25, Z+7	; 0x07
    3e78:	02 c0       	rjmp	.+4      	; 0x3e7e <vfprintf+0x3a4>
    3e7a:	8f ef       	ldi	r24, 0xFF	; 255
    3e7c:	9f ef       	ldi	r25, 0xFF	; 255
    3e7e:	2c 96       	adiw	r28, 0x0c	; 12
    3e80:	cd bf       	out	0x3d, r28	; 61
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	df 91       	pop	r29
    3e86:	cf 91       	pop	r28
    3e88:	1f 91       	pop	r17
    3e8a:	0f 91       	pop	r16
    3e8c:	ff 90       	pop	r15
    3e8e:	ef 90       	pop	r14
    3e90:	df 90       	pop	r13
    3e92:	cf 90       	pop	r12
    3e94:	bf 90       	pop	r11
    3e96:	af 90       	pop	r10
    3e98:	9f 90       	pop	r9
    3e9a:	8f 90       	pop	r8
    3e9c:	7f 90       	pop	r7
    3e9e:	6f 90       	pop	r6
    3ea0:	5f 90       	pop	r5
    3ea2:	4f 90       	pop	r4
    3ea4:	3f 90       	pop	r3
    3ea6:	2f 90       	pop	r2
    3ea8:	08 95       	ret

00003eaa <strnlen_P>:
    3eaa:	fc 01       	movw	r30, r24
    3eac:	05 90       	lpm	r0, Z+
    3eae:	61 50       	subi	r22, 0x01	; 1
    3eb0:	70 40       	sbci	r23, 0x00	; 0
    3eb2:	01 10       	cpse	r0, r1
    3eb4:	d8 f7       	brcc	.-10     	; 0x3eac <strnlen_P+0x2>
    3eb6:	80 95       	com	r24
    3eb8:	90 95       	com	r25
    3eba:	8e 0f       	add	r24, r30
    3ebc:	9f 1f       	adc	r25, r31
    3ebe:	08 95       	ret

00003ec0 <strnlen>:
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	61 50       	subi	r22, 0x01	; 1
    3ec4:	70 40       	sbci	r23, 0x00	; 0
    3ec6:	01 90       	ld	r0, Z+
    3ec8:	01 10       	cpse	r0, r1
    3eca:	d8 f7       	brcc	.-10     	; 0x3ec2 <strnlen+0x2>
    3ecc:	80 95       	com	r24
    3ece:	90 95       	com	r25
    3ed0:	8e 0f       	add	r24, r30
    3ed2:	9f 1f       	adc	r25, r31
    3ed4:	08 95       	ret

00003ed6 <fputc>:
    3ed6:	0f 93       	push	r16
    3ed8:	1f 93       	push	r17
    3eda:	cf 93       	push	r28
    3edc:	df 93       	push	r29
    3ede:	18 2f       	mov	r17, r24
    3ee0:	09 2f       	mov	r16, r25
    3ee2:	eb 01       	movw	r28, r22
    3ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee6:	81 fd       	sbrc	r24, 1
    3ee8:	03 c0       	rjmp	.+6      	; 0x3ef0 <fputc+0x1a>
    3eea:	8f ef       	ldi	r24, 0xFF	; 255
    3eec:	9f ef       	ldi	r25, 0xFF	; 255
    3eee:	20 c0       	rjmp	.+64     	; 0x3f30 <fputc+0x5a>
    3ef0:	82 ff       	sbrs	r24, 2
    3ef2:	10 c0       	rjmp	.+32     	; 0x3f14 <fputc+0x3e>
    3ef4:	4e 81       	ldd	r20, Y+6	; 0x06
    3ef6:	5f 81       	ldd	r21, Y+7	; 0x07
    3ef8:	2c 81       	ldd	r18, Y+4	; 0x04
    3efa:	3d 81       	ldd	r19, Y+5	; 0x05
    3efc:	42 17       	cp	r20, r18
    3efe:	53 07       	cpc	r21, r19
    3f00:	7c f4       	brge	.+30     	; 0x3f20 <fputc+0x4a>
    3f02:	e8 81       	ld	r30, Y
    3f04:	f9 81       	ldd	r31, Y+1	; 0x01
    3f06:	9f 01       	movw	r18, r30
    3f08:	2f 5f       	subi	r18, 0xFF	; 255
    3f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f0c:	28 83       	st	Y, r18
    3f0e:	39 83       	std	Y+1, r19	; 0x01
    3f10:	10 83       	st	Z, r17
    3f12:	06 c0       	rjmp	.+12     	; 0x3f20 <fputc+0x4a>
    3f14:	e8 85       	ldd	r30, Y+8	; 0x08
    3f16:	f9 85       	ldd	r31, Y+9	; 0x09
    3f18:	81 2f       	mov	r24, r17
    3f1a:	09 95       	icall
    3f1c:	89 2b       	or	r24, r25
    3f1e:	29 f7       	brne	.-54     	; 0x3eea <fputc+0x14>
    3f20:	2e 81       	ldd	r18, Y+6	; 0x06
    3f22:	3f 81       	ldd	r19, Y+7	; 0x07
    3f24:	2f 5f       	subi	r18, 0xFF	; 255
    3f26:	3f 4f       	sbci	r19, 0xFF	; 255
    3f28:	2e 83       	std	Y+6, r18	; 0x06
    3f2a:	3f 83       	std	Y+7, r19	; 0x07
    3f2c:	81 2f       	mov	r24, r17
    3f2e:	90 2f       	mov	r25, r16
    3f30:	df 91       	pop	r29
    3f32:	cf 91       	pop	r28
    3f34:	1f 91       	pop	r17
    3f36:	0f 91       	pop	r16
    3f38:	08 95       	ret

00003f3a <__ultoa_invert>:
    3f3a:	fa 01       	movw	r30, r20
    3f3c:	aa 27       	eor	r26, r26
    3f3e:	28 30       	cpi	r18, 0x08	; 8
    3f40:	51 f1       	breq	.+84     	; 0x3f96 <__ultoa_invert+0x5c>
    3f42:	20 31       	cpi	r18, 0x10	; 16
    3f44:	81 f1       	breq	.+96     	; 0x3fa6 <__ultoa_invert+0x6c>
    3f46:	e8 94       	clt
    3f48:	6f 93       	push	r22
    3f4a:	6e 7f       	andi	r22, 0xFE	; 254
    3f4c:	6e 5f       	subi	r22, 0xFE	; 254
    3f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f50:	8f 4f       	sbci	r24, 0xFF	; 255
    3f52:	9f 4f       	sbci	r25, 0xFF	; 255
    3f54:	af 4f       	sbci	r26, 0xFF	; 255
    3f56:	b1 e0       	ldi	r27, 0x01	; 1
    3f58:	3e d0       	rcall	.+124    	; 0x3fd6 <__ultoa_invert+0x9c>
    3f5a:	b4 e0       	ldi	r27, 0x04	; 4
    3f5c:	3c d0       	rcall	.+120    	; 0x3fd6 <__ultoa_invert+0x9c>
    3f5e:	67 0f       	add	r22, r23
    3f60:	78 1f       	adc	r23, r24
    3f62:	89 1f       	adc	r24, r25
    3f64:	9a 1f       	adc	r25, r26
    3f66:	a1 1d       	adc	r26, r1
    3f68:	68 0f       	add	r22, r24
    3f6a:	79 1f       	adc	r23, r25
    3f6c:	8a 1f       	adc	r24, r26
    3f6e:	91 1d       	adc	r25, r1
    3f70:	a1 1d       	adc	r26, r1
    3f72:	6a 0f       	add	r22, r26
    3f74:	71 1d       	adc	r23, r1
    3f76:	81 1d       	adc	r24, r1
    3f78:	91 1d       	adc	r25, r1
    3f7a:	a1 1d       	adc	r26, r1
    3f7c:	20 d0       	rcall	.+64     	; 0x3fbe <__ultoa_invert+0x84>
    3f7e:	09 f4       	brne	.+2      	; 0x3f82 <__ultoa_invert+0x48>
    3f80:	68 94       	set
    3f82:	3f 91       	pop	r19
    3f84:	2a e0       	ldi	r18, 0x0A	; 10
    3f86:	26 9f       	mul	r18, r22
    3f88:	11 24       	eor	r1, r1
    3f8a:	30 19       	sub	r19, r0
    3f8c:	30 5d       	subi	r19, 0xD0	; 208
    3f8e:	31 93       	st	Z+, r19
    3f90:	de f6       	brtc	.-74     	; 0x3f48 <__ultoa_invert+0xe>
    3f92:	cf 01       	movw	r24, r30
    3f94:	08 95       	ret
    3f96:	46 2f       	mov	r20, r22
    3f98:	47 70       	andi	r20, 0x07	; 7
    3f9a:	40 5d       	subi	r20, 0xD0	; 208
    3f9c:	41 93       	st	Z+, r20
    3f9e:	b3 e0       	ldi	r27, 0x03	; 3
    3fa0:	0f d0       	rcall	.+30     	; 0x3fc0 <__ultoa_invert+0x86>
    3fa2:	c9 f7       	brne	.-14     	; 0x3f96 <__ultoa_invert+0x5c>
    3fa4:	f6 cf       	rjmp	.-20     	; 0x3f92 <__ultoa_invert+0x58>
    3fa6:	46 2f       	mov	r20, r22
    3fa8:	4f 70       	andi	r20, 0x0F	; 15
    3faa:	40 5d       	subi	r20, 0xD0	; 208
    3fac:	4a 33       	cpi	r20, 0x3A	; 58
    3fae:	18 f0       	brcs	.+6      	; 0x3fb6 <__ultoa_invert+0x7c>
    3fb0:	49 5d       	subi	r20, 0xD9	; 217
    3fb2:	31 fd       	sbrc	r19, 1
    3fb4:	40 52       	subi	r20, 0x20	; 32
    3fb6:	41 93       	st	Z+, r20
    3fb8:	02 d0       	rcall	.+4      	; 0x3fbe <__ultoa_invert+0x84>
    3fba:	a9 f7       	brne	.-22     	; 0x3fa6 <__ultoa_invert+0x6c>
    3fbc:	ea cf       	rjmp	.-44     	; 0x3f92 <__ultoa_invert+0x58>
    3fbe:	b4 e0       	ldi	r27, 0x04	; 4
    3fc0:	a6 95       	lsr	r26
    3fc2:	97 95       	ror	r25
    3fc4:	87 95       	ror	r24
    3fc6:	77 95       	ror	r23
    3fc8:	67 95       	ror	r22
    3fca:	ba 95       	dec	r27
    3fcc:	c9 f7       	brne	.-14     	; 0x3fc0 <__ultoa_invert+0x86>
    3fce:	00 97       	sbiw	r24, 0x00	; 0
    3fd0:	61 05       	cpc	r22, r1
    3fd2:	71 05       	cpc	r23, r1
    3fd4:	08 95       	ret
    3fd6:	9b 01       	movw	r18, r22
    3fd8:	ac 01       	movw	r20, r24
    3fda:	0a 2e       	mov	r0, r26
    3fdc:	06 94       	lsr	r0
    3fde:	57 95       	ror	r21
    3fe0:	47 95       	ror	r20
    3fe2:	37 95       	ror	r19
    3fe4:	27 95       	ror	r18
    3fe6:	ba 95       	dec	r27
    3fe8:	c9 f7       	brne	.-14     	; 0x3fdc <__ultoa_invert+0xa2>
    3fea:	62 0f       	add	r22, r18
    3fec:	73 1f       	adc	r23, r19
    3fee:	84 1f       	adc	r24, r20
    3ff0:	95 1f       	adc	r25, r21
    3ff2:	a0 1d       	adc	r26, r0
    3ff4:	08 95       	ret

00003ff6 <_exit>:
    3ff6:	f8 94       	cli

00003ff8 <__stop_program>:
    3ff8:	ff cf       	rjmp	.-2      	; 0x3ff8 <__stop_program>
