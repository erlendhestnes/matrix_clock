
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017c  00802000  000023b4  00002448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000027c  0080217c  0080217c  000025c4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000848  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ed41  00000000  00000000  00002e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002c3c  00000000  00000000  00011ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007045  00000000  00000000  000147e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001e50  00000000  00000000  0001b82c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002ca2  00000000  00000000  0001d67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d115  00000000  00000000  0002031e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000838  00000000  00000000  0002d433  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c3       	rjmp	.+1782   	; 0x6f8 <__ctors_end>
       2:	00 00       	nop
       4:	97 c3       	rjmp	.+1838   	; 0x734 <__bad_interrupt>
       6:	00 00       	nop
       8:	95 c3       	rjmp	.+1834   	; 0x734 <__bad_interrupt>
       a:	00 00       	nop
       c:	93 c3       	rjmp	.+1830   	; 0x734 <__bad_interrupt>
       e:	00 00       	nop
      10:	91 c3       	rjmp	.+1826   	; 0x734 <__bad_interrupt>
      12:	00 00       	nop
      14:	8f c3       	rjmp	.+1822   	; 0x734 <__bad_interrupt>
      16:	00 00       	nop
      18:	8d c3       	rjmp	.+1818   	; 0x734 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8b c3       	rjmp	.+1814   	; 0x734 <__bad_interrupt>
      1e:	00 00       	nop
      20:	89 c3       	rjmp	.+1810   	; 0x734 <__bad_interrupt>
      22:	00 00       	nop
      24:	87 c3       	rjmp	.+1806   	; 0x734 <__bad_interrupt>
      26:	00 00       	nop
      28:	07 c7       	rjmp	.+3598   	; 0xe38 <__vector_10>
      2a:	00 00       	nop
      2c:	83 c3       	rjmp	.+1798   	; 0x734 <__bad_interrupt>
      2e:	00 00       	nop
      30:	81 c3       	rjmp	.+1794   	; 0x734 <__bad_interrupt>
      32:	00 00       	nop
      34:	7f c3       	rjmp	.+1790   	; 0x734 <__bad_interrupt>
      36:	00 00       	nop
      38:	b7 c3       	rjmp	.+1902   	; 0x7a8 <__vector_14>
      3a:	00 00       	nop
      3c:	7b c3       	rjmp	.+1782   	; 0x734 <__bad_interrupt>
      3e:	00 00       	nop
      40:	79 c3       	rjmp	.+1778   	; 0x734 <__bad_interrupt>
      42:	00 00       	nop
      44:	77 c3       	rjmp	.+1774   	; 0x734 <__bad_interrupt>
      46:	00 00       	nop
      48:	75 c3       	rjmp	.+1770   	; 0x734 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	73 c3       	rjmp	.+1766   	; 0x734 <__bad_interrupt>
      4e:	00 00       	nop
      50:	71 c3       	rjmp	.+1762   	; 0x734 <__bad_interrupt>
      52:	00 00       	nop
      54:	6f c3       	rjmp	.+1758   	; 0x734 <__bad_interrupt>
      56:	00 00       	nop
      58:	6d c3       	rjmp	.+1754   	; 0x734 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6b c3       	rjmp	.+1750   	; 0x734 <__bad_interrupt>
      5e:	00 00       	nop
      60:	69 c3       	rjmp	.+1746   	; 0x734 <__bad_interrupt>
      62:	00 00       	nop
      64:	67 c3       	rjmp	.+1742   	; 0x734 <__bad_interrupt>
      66:	00 00       	nop
      68:	65 c3       	rjmp	.+1738   	; 0x734 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	63 c3       	rjmp	.+1734   	; 0x734 <__bad_interrupt>
      6e:	00 00       	nop
      70:	61 c3       	rjmp	.+1730   	; 0x734 <__bad_interrupt>
      72:	00 00       	nop
      74:	5f c3       	rjmp	.+1726   	; 0x734 <__bad_interrupt>
      76:	00 00       	nop
      78:	5d c3       	rjmp	.+1722   	; 0x734 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5b c3       	rjmp	.+1718   	; 0x734 <__bad_interrupt>
      7e:	00 00       	nop
      80:	59 c3       	rjmp	.+1714   	; 0x734 <__bad_interrupt>
      82:	00 00       	nop
      84:	57 c3       	rjmp	.+1710   	; 0x734 <__bad_interrupt>
      86:	00 00       	nop
      88:	55 c3       	rjmp	.+1706   	; 0x734 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	53 c3       	rjmp	.+1702   	; 0x734 <__bad_interrupt>
      8e:	00 00       	nop
      90:	51 c3       	rjmp	.+1698   	; 0x734 <__bad_interrupt>
      92:	00 00       	nop
      94:	4f c3       	rjmp	.+1694   	; 0x734 <__bad_interrupt>
      96:	00 00       	nop
      98:	4d c3       	rjmp	.+1690   	; 0x734 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4b c3       	rjmp	.+1686   	; 0x734 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	49 c3       	rjmp	.+1682   	; 0x734 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	47 c3       	rjmp	.+1678   	; 0x734 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	45 c3       	rjmp	.+1674   	; 0x734 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	43 c3       	rjmp	.+1670   	; 0x734 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	41 c3       	rjmp	.+1666   	; 0x734 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3f c3       	rjmp	.+1662   	; 0x734 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3d c3       	rjmp	.+1658   	; 0x734 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3b c3       	rjmp	.+1654   	; 0x734 <__bad_interrupt>
      be:	00 00       	nop
      c0:	39 c3       	rjmp	.+1650   	; 0x734 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	37 c3       	rjmp	.+1646   	; 0x734 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	35 c3       	rjmp	.+1642   	; 0x734 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 c3       	rjmp	.+1638   	; 0x734 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	31 c3       	rjmp	.+1634   	; 0x734 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2f c3       	rjmp	.+1630   	; 0x734 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2d c3       	rjmp	.+1626   	; 0x734 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2b c3       	rjmp	.+1622   	; 0x734 <__bad_interrupt>
      de:	00 00       	nop
      e0:	29 c3       	rjmp	.+1618   	; 0x734 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	27 c3       	rjmp	.+1614   	; 0x734 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	25 c3       	rjmp	.+1610   	; 0x734 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	23 c3       	rjmp	.+1606   	; 0x734 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	21 c3       	rjmp	.+1602   	; 0x734 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	1f c3       	rjmp	.+1598   	; 0x734 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	1d c3       	rjmp	.+1594   	; 0x734 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	1b c3       	rjmp	.+1590   	; 0x734 <__bad_interrupt>
      fe:	00 00       	nop
     100:	19 c3       	rjmp	.+1586   	; 0x734 <__bad_interrupt>
     102:	00 00       	nop
     104:	17 c3       	rjmp	.+1582   	; 0x734 <__bad_interrupt>
     106:	00 00       	nop
     108:	15 c3       	rjmp	.+1578   	; 0x734 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	13 c3       	rjmp	.+1574   	; 0x734 <__bad_interrupt>
     10e:	00 00       	nop
     110:	11 c3       	rjmp	.+1570   	; 0x734 <__bad_interrupt>
     112:	00 00       	nop
     114:	0f c3       	rjmp	.+1566   	; 0x734 <__bad_interrupt>
     116:	00 00       	nop
     118:	0d c3       	rjmp	.+1562   	; 0x734 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0b c3       	rjmp	.+1558   	; 0x734 <__bad_interrupt>
     11e:	00 00       	nop
     120:	09 c3       	rjmp	.+1554   	; 0x734 <__bad_interrupt>
     122:	00 00       	nop
     124:	07 c3       	rjmp	.+1550   	; 0x734 <__bad_interrupt>
     126:	00 00       	nop
     128:	05 c3       	rjmp	.+1546   	; 0x734 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	03 c3       	rjmp	.+1542   	; 0x734 <__bad_interrupt>
     12e:	00 00       	nop
     130:	01 c3       	rjmp	.+1538   	; 0x734 <__bad_interrupt>
     132:	00 00       	nop
     134:	ff c2       	rjmp	.+1534   	; 0x734 <__bad_interrupt>
     136:	00 00       	nop
     138:	fd c2       	rjmp	.+1530   	; 0x734 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	fb c2       	rjmp	.+1526   	; 0x734 <__bad_interrupt>
     13e:	00 00       	nop
     140:	f9 c2       	rjmp	.+1522   	; 0x734 <__bad_interrupt>
     142:	00 00       	nop
     144:	f7 c2       	rjmp	.+1518   	; 0x734 <__bad_interrupt>
     146:	00 00       	nop
     148:	f5 c2       	rjmp	.+1514   	; 0x734 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	f3 c2       	rjmp	.+1510   	; 0x734 <__bad_interrupt>
     14e:	00 00       	nop
     150:	f1 c2       	rjmp	.+1506   	; 0x734 <__bad_interrupt>
     152:	00 00       	nop
     154:	ef c2       	rjmp	.+1502   	; 0x734 <__bad_interrupt>
     156:	00 00       	nop
     158:	ed c2       	rjmp	.+1498   	; 0x734 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	eb c2       	rjmp	.+1494   	; 0x734 <__bad_interrupt>
     15e:	00 00       	nop
     160:	f8 c2       	rjmp	.+1520   	; 0x752 <__vector_88>
     162:	00 00       	nop
     164:	e7 c2       	rjmp	.+1486   	; 0x734 <__bad_interrupt>
     166:	00 00       	nop
     168:	e5 c2       	rjmp	.+1482   	; 0x734 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	e3 c2       	rjmp	.+1478   	; 0x734 <__bad_interrupt>
     16e:	00 00       	nop
     170:	e1 c2       	rjmp	.+1474   	; 0x734 <__bad_interrupt>
     172:	00 00       	nop
     174:	df c2       	rjmp	.+1470   	; 0x734 <__bad_interrupt>
     176:	00 00       	nop
     178:	dd c2       	rjmp	.+1466   	; 0x734 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	db c2       	rjmp	.+1462   	; 0x734 <__bad_interrupt>
     17e:	00 00       	nop
     180:	d9 c2       	rjmp	.+1458   	; 0x734 <__bad_interrupt>
     182:	00 00       	nop
     184:	d7 c2       	rjmp	.+1454   	; 0x734 <__bad_interrupt>
     186:	00 00       	nop
     188:	d5 c2       	rjmp	.+1450   	; 0x734 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d3 c2       	rjmp	.+1446   	; 0x734 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d1 c2       	rjmp	.+1442   	; 0x734 <__bad_interrupt>
     192:	00 00       	nop
     194:	cf c2       	rjmp	.+1438   	; 0x734 <__bad_interrupt>
     196:	00 00       	nop
     198:	cd c2       	rjmp	.+1434   	; 0x734 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	cb c2       	rjmp	.+1430   	; 0x734 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	c9 c2       	rjmp	.+1426   	; 0x734 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	c7 c2       	rjmp	.+1422   	; 0x734 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	c5 c2       	rjmp	.+1418   	; 0x734 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c3 c2       	rjmp	.+1414   	; 0x734 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	c1 c2       	rjmp	.+1410   	; 0x734 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	bf c2       	rjmp	.+1406   	; 0x734 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	bd c2       	rjmp	.+1402   	; 0x734 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	bb c2       	rjmp	.+1398   	; 0x734 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	b9 c2       	rjmp	.+1394   	; 0x734 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	b7 c2       	rjmp	.+1390   	; 0x734 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	b5 c2       	rjmp	.+1386   	; 0x734 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b3 c2       	rjmp	.+1382   	; 0x734 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b1 c2       	rjmp	.+1378   	; 0x734 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	af c2       	rjmp	.+1374   	; 0x734 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	ad c2       	rjmp	.+1370   	; 0x734 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	ab c2       	rjmp	.+1366   	; 0x734 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	a9 c2       	rjmp	.+1362   	; 0x734 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	a7 c2       	rjmp	.+1358   	; 0x734 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	a5 c2       	rjmp	.+1354   	; 0x734 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a3 c2       	rjmp	.+1350   	; 0x734 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a1 c2       	rjmp	.+1346   	; 0x734 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	9f c2       	rjmp	.+1342   	; 0x734 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	9d c2       	rjmp	.+1338   	; 0x734 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 3e       	cpi	r16, 0xE0	; 224
     202:	5b 4f       	sbci	r21, 0xFB	; 251
     204:	5b 3e       	cpi	r21, 0xEB	; 235
     206:	3e 6b       	ori	r19, 0xBE	; 190
     208:	4f 6b       	ori	r20, 0xBF	; 191
     20a:	3e 1c       	adc	r3, r14
     20c:	3e 7c       	andi	r19, 0xCE	; 206
     20e:	3e 1c       	adc	r3, r14
     210:	18 3c       	cpi	r17, 0xC8	; 200
     212:	7e 3c       	cpi	r23, 0xCE	; 206
     214:	18 1c       	adc	r1, r8
     216:	57 7d       	andi	r21, 0xD7	; 215
     218:	57 1c       	adc	r5, r7
     21a:	1c 5e       	subi	r17, 0xEC	; 236
     21c:	7f 5e       	subi	r23, 0xEF	; 239
     21e:	1c 00       	.word	0x001c	; ????
     220:	18 3c       	cpi	r17, 0xC8	; 200
     222:	18 00       	.word	0x0018	; ????
     224:	ff e7       	ldi	r31, 0x7F	; 127
     226:	c3 e7       	ldi	r28, 0x73	; 115
     228:	ff 00       	.word	0x00ff	; ????
     22a:	18 24       	eor	r1, r8
     22c:	18 00       	.word	0x0018	; ????
     22e:	ff e7       	ldi	r31, 0x7F	; 127
     230:	db e7       	ldi	r29, 0x7B	; 123
     232:	ff 30       	cpi	r31, 0x0F	; 15
     234:	48 3a       	cpi	r20, 0xA8	; 168
     236:	06 0e       	add	r0, r22
     238:	26 29       	or	r18, r6
     23a:	79 29       	or	r23, r9
     23c:	26 40       	sbci	r18, 0x06	; 6
     23e:	7f 05       	cpc	r23, r15
     240:	05 07       	cpc	r16, r21
     242:	40 7f       	andi	r20, 0xF0	; 240
     244:	05 25       	eor	r16, r5
     246:	3f 5a       	subi	r19, 0xAF	; 175
     248:	3c e7       	ldi	r19, 0x7C	; 124
     24a:	3c 5a       	subi	r19, 0xAC	; 172
     24c:	7f 3e       	cpi	r23, 0xEF	; 239
     24e:	1c 1c       	adc	r1, r12
     250:	08 08       	sbc	r0, r8
     252:	1c 1c       	adc	r1, r12
     254:	3e 7f       	andi	r19, 0xFE	; 254
     256:	14 22       	and	r1, r20
     258:	7f 22       	and	r7, r31
     25a:	14 5f       	subi	r17, 0xF4	; 244
     25c:	5f 00       	.word	0x005f	; ????
     25e:	5f 5f       	subi	r21, 0xFF	; 255
     260:	06 09       	sbc	r16, r6
     262:	7f 01       	movw	r14, r30
     264:	7f 00       	.word	0x007f	; ????
     266:	66 89       	ldd	r22, Z+22	; 0x16
     268:	95 6a       	ori	r25, 0xA5	; 165
     26a:	60 60       	ori	r22, 0x00	; 0
     26c:	60 60       	ori	r22, 0x00	; 0
     26e:	60 94       	com	r6
     270:	a2 ff       	sbrs	r26, 2
     272:	a2 94       	swap	r10
     274:	08 04       	cpc	r0, r8
     276:	7e 04       	cpc	r7, r14
     278:	08 10       	cpse	r0, r8
     27a:	20 7e       	andi	r18, 0xE0	; 224
     27c:	20 10       	cpse	r2, r0
     27e:	08 08       	sbc	r0, r8
     280:	2a 1c       	adc	r2, r10
     282:	08 08       	sbc	r0, r8
     284:	1c 2a       	or	r1, r28
     286:	08 08       	sbc	r0, r8
     288:	1e 10       	cpse	r1, r14
     28a:	10 10       	cpse	r1, r0
     28c:	10 0c       	add	r1, r0
     28e:	1e 0c       	add	r1, r14
     290:	1e 0c       	add	r1, r14
     292:	30 38       	cpi	r19, 0x80	; 128
     294:	3e 38       	cpi	r19, 0x8E	; 142
     296:	30 06       	cpc	r3, r16
     298:	0e 3e       	cpi	r16, 0xEE	; 238
     29a:	0e 06       	cpc	r0, r30
     29c:	00 00       	nop
     29e:	00 00       	nop
     2a0:	00 00       	nop
     2a2:	00 5f       	subi	r16, 0xF0	; 240
     2a4:	00 00       	nop
     2a6:	00 07       	cpc	r16, r16
     2a8:	00 07       	cpc	r16, r16
     2aa:	00 14       	cp	r0, r0
     2ac:	7f 14       	cp	r7, r15
     2ae:	7f 14       	cp	r7, r15
     2b0:	24 2a       	or	r2, r20
     2b2:	7f 2a       	or	r7, r31
     2b4:	12 23       	and	r17, r18
     2b6:	13 08       	sbc	r1, r3
     2b8:	64 62       	ori	r22, 0x24	; 36
     2ba:	36 49       	sbci	r19, 0x96	; 150
     2bc:	56 20       	and	r5, r6
     2be:	50 00       	.word	0x0050	; ????
     2c0:	08 07       	cpc	r16, r24
     2c2:	03 00       	.word	0x0003	; ????
     2c4:	00 1c       	adc	r0, r0
     2c6:	22 41       	sbci	r18, 0x12	; 18
     2c8:	00 00       	nop
     2ca:	41 22       	and	r4, r17
     2cc:	1c 00       	.word	0x001c	; ????
     2ce:	2a 1c       	adc	r2, r10
     2d0:	7f 1c       	adc	r7, r15
     2d2:	2a 08       	sbc	r2, r10
     2d4:	08 3e       	cpi	r16, 0xE8	; 232
     2d6:	08 08       	sbc	r0, r8
     2d8:	00 80       	ld	r0, Z
     2da:	70 30       	cpi	r23, 0x00	; 0
     2dc:	00 08       	sbc	r0, r0
     2de:	08 08       	sbc	r0, r8
     2e0:	08 08       	sbc	r0, r8
     2e2:	00 00       	nop
     2e4:	60 60       	ori	r22, 0x00	; 0
     2e6:	00 20       	and	r0, r0
     2e8:	10 08       	sbc	r1, r0
     2ea:	04 02       	muls	r16, r20
     2ec:	3e 51       	subi	r19, 0x1E	; 30
     2ee:	49 45       	sbci	r20, 0x59	; 89
     2f0:	3e 00       	.word	0x003e	; ????
     2f2:	42 7f       	andi	r20, 0xF2	; 242
     2f4:	40 00       	.word	0x0040	; ????
     2f6:	72 49       	sbci	r23, 0x92	; 146
     2f8:	49 49       	sbci	r20, 0x99	; 153
     2fa:	46 21       	and	r20, r6
     2fc:	41 49       	sbci	r20, 0x91	; 145
     2fe:	4d 33       	cpi	r20, 0x3D	; 61
     300:	18 14       	cp	r1, r8
     302:	12 7f       	andi	r17, 0xF2	; 242
     304:	10 27       	eor	r17, r16
     306:	45 45       	sbci	r20, 0x55	; 85
     308:	45 39       	cpi	r20, 0x95	; 149
     30a:	3c 4a       	sbci	r19, 0xAC	; 172
     30c:	49 49       	sbci	r20, 0x99	; 153
     30e:	31 41       	sbci	r19, 0x11	; 17
     310:	21 11       	cpse	r18, r1
     312:	09 07       	cpc	r16, r25
     314:	36 49       	sbci	r19, 0x96	; 150
     316:	49 49       	sbci	r20, 0x99	; 153
     318:	36 46       	sbci	r19, 0x66	; 102
     31a:	49 49       	sbci	r20, 0x99	; 153
     31c:	29 1e       	adc	r2, r25
     31e:	00 00       	nop
     320:	14 00       	.word	0x0014	; ????
     322:	00 00       	nop
     324:	40 34       	cpi	r20, 0x40	; 64
     326:	00 00       	nop
     328:	00 08       	sbc	r0, r0
     32a:	14 22       	and	r1, r20
     32c:	41 14       	cp	r4, r1
     32e:	14 14       	cp	r1, r4
     330:	14 14       	cp	r1, r4
     332:	00 41       	sbci	r16, 0x10	; 16
     334:	22 14       	cp	r2, r2
     336:	08 02       	muls	r16, r24
     338:	01 59       	subi	r16, 0x91	; 145
     33a:	09 06       	cpc	r0, r25
     33c:	3e 41       	sbci	r19, 0x1E	; 30
     33e:	5d 59       	subi	r21, 0x9D	; 157
     340:	4e 7c       	andi	r20, 0xCE	; 206
     342:	12 11       	cpse	r17, r2
     344:	12 7c       	andi	r17, 0xC2	; 194
     346:	7f 49       	sbci	r23, 0x9F	; 159
     348:	49 49       	sbci	r20, 0x99	; 153
     34a:	36 3e       	cpi	r19, 0xE6	; 230
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	41 22       	and	r4, r17
     350:	7f 41       	sbci	r23, 0x1F	; 31
     352:	41 41       	sbci	r20, 0x11	; 17
     354:	3e 7f       	andi	r19, 0xFE	; 254
     356:	49 49       	sbci	r20, 0x99	; 153
     358:	49 41       	sbci	r20, 0x19	; 25
     35a:	7f 09       	sbc	r23, r15
     35c:	09 09       	sbc	r16, r9
     35e:	01 3e       	cpi	r16, 0xE1	; 225
     360:	41 41       	sbci	r20, 0x11	; 17
     362:	51 73       	andi	r21, 0x31	; 49
     364:	7f 08       	sbc	r7, r15
     366:	08 08       	sbc	r0, r8
     368:	7f 00       	.word	0x007f	; ????
     36a:	41 7f       	andi	r20, 0xF1	; 241
     36c:	41 00       	.word	0x0041	; ????
     36e:	20 40       	sbci	r18, 0x00	; 0
     370:	41 3f       	cpi	r20, 0xF1	; 241
     372:	01 7f       	andi	r16, 0xF1	; 241
     374:	08 14       	cp	r0, r8
     376:	22 41       	sbci	r18, 0x12	; 18
     378:	7f 40       	sbci	r23, 0x0F	; 15
     37a:	40 40       	sbci	r20, 0x00	; 0
     37c:	40 7f       	andi	r20, 0xF0	; 240
     37e:	02 1c       	adc	r0, r2
     380:	02 7f       	andi	r16, 0xF2	; 242
     382:	7f 04       	cpc	r7, r15
     384:	08 10       	cpse	r0, r8
     386:	7f 3e       	cpi	r23, 0xEF	; 239
     388:	41 41       	sbci	r20, 0x11	; 17
     38a:	41 3e       	cpi	r20, 0xE1	; 225
     38c:	7f 09       	sbc	r23, r15
     38e:	09 09       	sbc	r16, r9
     390:	06 3e       	cpi	r16, 0xE6	; 230
     392:	41 51       	subi	r20, 0x11	; 17
     394:	21 5e       	subi	r18, 0xE1	; 225
     396:	7f 09       	sbc	r23, r15
     398:	19 29       	or	r17, r9
     39a:	46 26       	eor	r4, r22
     39c:	49 49       	sbci	r20, 0x99	; 153
     39e:	49 32       	cpi	r20, 0x29	; 41
     3a0:	03 01       	movw	r0, r6
     3a2:	7f 01       	movw	r14, r30
     3a4:	03 3f       	cpi	r16, 0xF3	; 243
     3a6:	40 40       	sbci	r20, 0x00	; 0
     3a8:	40 3f       	cpi	r20, 0xF0	; 240
     3aa:	1f 20       	and	r1, r15
     3ac:	40 20       	and	r4, r0
     3ae:	1f 3f       	cpi	r17, 0xFF	; 255
     3b0:	40 38       	cpi	r20, 0x80	; 128
     3b2:	40 3f       	cpi	r20, 0xF0	; 240
     3b4:	63 14       	cp	r6, r3
     3b6:	08 14       	cp	r0, r8
     3b8:	63 03       	mulsu	r22, r19
     3ba:	04 78       	andi	r16, 0x84	; 132
     3bc:	04 03       	mulsu	r16, r20
     3be:	61 59       	subi	r22, 0x91	; 145
     3c0:	49 4d       	sbci	r20, 0xD9	; 217
     3c2:	43 00       	.word	0x0043	; ????
     3c4:	7f 41       	sbci	r23, 0x1F	; 31
     3c6:	41 41       	sbci	r20, 0x11	; 17
     3c8:	02 04       	cpc	r0, r2
     3ca:	08 10       	cpse	r0, r8
     3cc:	20 00       	.word	0x0020	; ????
     3ce:	41 41       	sbci	r20, 0x11	; 17
     3d0:	41 7f       	andi	r20, 0xF1	; 241
     3d2:	04 02       	muls	r16, r20
     3d4:	01 02       	muls	r16, r17
     3d6:	04 40       	sbci	r16, 0x04	; 4
     3d8:	40 40       	sbci	r20, 0x00	; 0
     3da:	40 40       	sbci	r20, 0x00	; 0
     3dc:	00 03       	mulsu	r16, r16
     3de:	07 08       	sbc	r0, r7
     3e0:	00 20       	and	r0, r0
     3e2:	54 54       	subi	r21, 0x44	; 68
     3e4:	78 40       	sbci	r23, 0x08	; 8
     3e6:	7f 28       	or	r7, r15
     3e8:	44 44       	sbci	r20, 0x44	; 68
     3ea:	38 38       	cpi	r19, 0x88	; 136
     3ec:	44 44       	sbci	r20, 0x44	; 68
     3ee:	44 28       	or	r4, r4
     3f0:	38 44       	sbci	r19, 0x48	; 72
     3f2:	44 28       	or	r4, r4
     3f4:	7f 38       	cpi	r23, 0x8F	; 143
     3f6:	54 54       	subi	r21, 0x44	; 68
     3f8:	54 18       	sub	r5, r4
     3fa:	00 08       	sbc	r0, r0
     3fc:	7e 09       	sbc	r23, r14
     3fe:	02 18       	sub	r0, r2
     400:	a4 a4       	ldd	r10, Z+44	; 0x2c
     402:	9c 78       	andi	r25, 0x8C	; 140
     404:	7f 08       	sbc	r7, r15
     406:	04 04       	cpc	r0, r4
     408:	78 00       	.word	0x0078	; ????
     40a:	44 7d       	andi	r20, 0xD4	; 212
     40c:	40 00       	.word	0x0040	; ????
     40e:	20 40       	sbci	r18, 0x00	; 0
     410:	40 3d       	cpi	r20, 0xD0	; 208
     412:	00 7f       	andi	r16, 0xF0	; 240
     414:	10 28       	or	r1, r0
     416:	44 00       	.word	0x0044	; ????
     418:	00 41       	sbci	r16, 0x10	; 16
     41a:	7f 40       	sbci	r23, 0x0F	; 15
     41c:	00 7c       	andi	r16, 0xC0	; 192
     41e:	04 78       	andi	r16, 0x84	; 132
     420:	04 78       	andi	r16, 0x84	; 132
     422:	7c 08       	sbc	r7, r12
     424:	04 04       	cpc	r0, r4
     426:	78 38       	cpi	r23, 0x88	; 136
     428:	44 44       	sbci	r20, 0x44	; 68
     42a:	44 38       	cpi	r20, 0x84	; 132
     42c:	fc 18       	sub	r15, r12
     42e:	24 24       	eor	r2, r4
     430:	18 18       	sub	r1, r8
     432:	24 24       	eor	r2, r4
     434:	18 fc       	.word	0xfc18	; ????
     436:	7c 08       	sbc	r7, r12
     438:	04 04       	cpc	r0, r4
     43a:	08 48       	sbci	r16, 0x88	; 136
     43c:	54 54       	subi	r21, 0x44	; 68
     43e:	54 24       	eor	r5, r4
     440:	04 04       	cpc	r0, r4
     442:	3f 44       	sbci	r19, 0x4F	; 79
     444:	24 3c       	cpi	r18, 0xC4	; 196
     446:	40 40       	sbci	r20, 0x00	; 0
     448:	20 7c       	andi	r18, 0xC0	; 192
     44a:	1c 20       	and	r1, r12
     44c:	40 20       	and	r4, r0
     44e:	1c 3c       	cpi	r17, 0xCC	; 204
     450:	40 30       	cpi	r20, 0x00	; 0
     452:	40 3c       	cpi	r20, 0xC0	; 192
     454:	44 28       	or	r4, r4
     456:	10 28       	or	r1, r0
     458:	44 4c       	sbci	r20, 0xC4	; 196
     45a:	90 90 90 7c 	lds	r9, 0x7C90
     45e:	44 64       	ori	r20, 0x44	; 68
     460:	54 4c       	sbci	r21, 0xC4	; 196
     462:	44 00       	.word	0x0044	; ????
     464:	08 36       	cpi	r16, 0x68	; 104
     466:	41 00       	.word	0x0041	; ????
     468:	00 00       	nop
     46a:	77 00       	.word	0x0077	; ????
     46c:	00 00       	nop
     46e:	41 36       	cpi	r20, 0x61	; 97
     470:	08 00       	.word	0x0008	; ????
     472:	02 01       	movw	r0, r4
     474:	02 04       	cpc	r0, r2
     476:	02 3c       	cpi	r16, 0xC2	; 194
     478:	26 23       	and	r18, r22
     47a:	26 3c       	cpi	r18, 0xC6	; 198
     47c:	1e a1       	ldd	r17, Y+38	; 0x26
     47e:	a1 61       	ori	r26, 0x11	; 17
     480:	12 3a       	cpi	r17, 0xA2	; 162
     482:	40 40       	sbci	r20, 0x00	; 0
     484:	20 7a       	andi	r18, 0xA0	; 160
     486:	38 54       	subi	r19, 0x48	; 72
     488:	54 55       	subi	r21, 0x54	; 84
     48a:	59 21       	and	r21, r9
     48c:	55 55       	subi	r21, 0x55	; 85
     48e:	79 41       	sbci	r23, 0x19	; 25
     490:	21 54       	subi	r18, 0x41	; 65
     492:	54 78       	andi	r21, 0x84	; 132
     494:	41 21       	and	r20, r1
     496:	55 54       	subi	r21, 0x45	; 69
     498:	78 40       	sbci	r23, 0x08	; 8
     49a:	20 54       	subi	r18, 0x40	; 64
     49c:	55 79       	andi	r21, 0x95	; 149
     49e:	40 0c       	add	r4, r0
     4a0:	1e 52       	subi	r17, 0x2E	; 46
     4a2:	72 12       	cpse	r7, r18
     4a4:	39 55       	subi	r19, 0x59	; 89
     4a6:	55 55       	subi	r21, 0x55	; 85
     4a8:	59 39       	cpi	r21, 0x99	; 153
     4aa:	54 54       	subi	r21, 0x44	; 68
     4ac:	54 59       	subi	r21, 0x94	; 148
     4ae:	39 55       	subi	r19, 0x59	; 89
     4b0:	54 54       	subi	r21, 0x44	; 68
     4b2:	58 00       	.word	0x0058	; ????
     4b4:	00 45       	sbci	r16, 0x50	; 80
     4b6:	7c 41       	sbci	r23, 0x1C	; 28
     4b8:	00 02       	muls	r16, r16
     4ba:	45 7d       	andi	r20, 0xD5	; 213
     4bc:	42 00       	.word	0x0042	; ????
     4be:	01 45       	sbci	r16, 0x51	; 81
     4c0:	7c 40       	sbci	r23, 0x0C	; 12
     4c2:	f0 29       	or	r31, r0
     4c4:	24 29       	or	r18, r4
     4c6:	f0 f0       	brcs	.+60     	; 0x504 <__trampolines_end+0x308>
     4c8:	28 25       	eor	r18, r8
     4ca:	28 f0       	brcs	.+10     	; 0x4d6 <__trampolines_end+0x2da>
     4cc:	7c 54       	subi	r23, 0x4C	; 76
     4ce:	55 45       	sbci	r21, 0x55	; 85
     4d0:	00 20       	and	r0, r0
     4d2:	54 54       	subi	r21, 0x44	; 68
     4d4:	7c 54       	subi	r23, 0x4C	; 76
     4d6:	7c 0a       	sbc	r7, r28
     4d8:	09 7f       	andi	r16, 0xF9	; 249
     4da:	49 32       	cpi	r20, 0x29	; 41
     4dc:	49 49       	sbci	r20, 0x99	; 153
     4de:	49 32       	cpi	r20, 0x29	; 41
     4e0:	32 48       	sbci	r19, 0x82	; 130
     4e2:	48 48       	sbci	r20, 0x88	; 136
     4e4:	32 32       	cpi	r19, 0x22	; 34
     4e6:	4a 48       	sbci	r20, 0x8A	; 138
     4e8:	48 30       	cpi	r20, 0x08	; 8
     4ea:	3a 41       	sbci	r19, 0x1A	; 26
     4ec:	41 21       	and	r20, r1
     4ee:	7a 3a       	cpi	r23, 0xAA	; 170
     4f0:	42 40       	sbci	r20, 0x02	; 2
     4f2:	20 78       	andi	r18, 0x80	; 128
     4f4:	00 9d       	mul	r16, r0
     4f6:	a0 a0       	ldd	r10, Z+32	; 0x20
     4f8:	7d 39       	cpi	r23, 0x9D	; 157
     4fa:	44 44       	sbci	r20, 0x44	; 68
     4fc:	44 39       	cpi	r20, 0x94	; 148
     4fe:	3d 40       	sbci	r19, 0x0D	; 13
     500:	40 40       	sbci	r20, 0x00	; 0
     502:	3d 3c       	cpi	r19, 0xCD	; 205
     504:	24 ff       	sbrs	r18, 4
     506:	24 24       	eor	r2, r4
     508:	48 7e       	andi	r20, 0xE8	; 232
     50a:	49 43       	sbci	r20, 0x39	; 57
     50c:	66 2b       	or	r22, r22
     50e:	2f fc       	.word	0xfc2f	; ????
     510:	2f 2b       	or	r18, r31
     512:	ff 09       	sbc	r31, r15
     514:	29 f6       	brne	.-118    	; 0x4a0 <__trampolines_end+0x2a4>
     516:	20 c0       	rjmp	.+64     	; 0x558 <__trampolines_end+0x35c>
     518:	88 7e       	andi	r24, 0xE8	; 232
     51a:	09 03       	fmul	r16, r17
     51c:	20 54       	subi	r18, 0x40	; 64
     51e:	54 79       	andi	r21, 0x94	; 148
     520:	41 00       	.word	0x0041	; ????
     522:	00 44       	sbci	r16, 0x40	; 64
     524:	7d 41       	sbci	r23, 0x1D	; 29
     526:	30 48       	sbci	r19, 0x80	; 128
     528:	48 4a       	sbci	r20, 0xA8	; 168
     52a:	32 38       	cpi	r19, 0x82	; 130
     52c:	40 40       	sbci	r20, 0x00	; 0
     52e:	22 7a       	andi	r18, 0xA2	; 162
     530:	00 7a       	andi	r16, 0xA0	; 160
     532:	0a 0a       	sbc	r0, r26
     534:	72 7d       	andi	r23, 0xD2	; 210
     536:	0d 19       	sub	r16, r13
     538:	31 7d       	andi	r19, 0xD1	; 209
     53a:	26 29       	or	r18, r6
     53c:	29 2f       	mov	r18, r25
     53e:	28 26       	eor	r2, r24
     540:	29 29       	or	r18, r9
     542:	29 26       	eor	r2, r25
     544:	30 48       	sbci	r19, 0x80	; 128
     546:	4d 40       	sbci	r20, 0x0D	; 13
     548:	20 38       	cpi	r18, 0x80	; 128
     54a:	08 08       	sbc	r0, r8
     54c:	08 08       	sbc	r0, r8
     54e:	08 08       	sbc	r0, r8
     550:	08 08       	sbc	r0, r8
     552:	38 2f       	mov	r19, r24
     554:	10 c8       	rjmp	.-4064   	; 0xfffff576 <__eeprom_end+0xff7ef576>
     556:	ac ba       	out	0x1c, r10	; 28
     558:	2f 10       	cpse	r2, r15
     55a:	28 34       	cpi	r18, 0x48	; 72
     55c:	fa 00       	.word	0x00fa	; ????
     55e:	00 7b       	andi	r16, 0xB0	; 176
     560:	00 00       	nop
     562:	08 14       	cp	r0, r8
     564:	2a 14       	cp	r2, r10
     566:	22 22       	and	r2, r18
     568:	14 2a       	or	r1, r20
     56a:	14 08       	sbc	r1, r4
     56c:	aa 00       	.word	0x00aa	; ????
     56e:	55 00       	.word	0x0055	; ????
     570:	aa aa       	std	Y+50, r10	; 0x32
     572:	55 aa       	std	Z+53, r5	; 0x35
     574:	55 aa       	std	Z+53, r5	; 0x35
     576:	00 00       	nop
     578:	00 ff       	sbrs	r16, 0
     57a:	00 10       	cpse	r0, r0
     57c:	10 10       	cpse	r1, r0
     57e:	ff 00       	.word	0x00ff	; ????
     580:	14 14       	cp	r1, r4
     582:	14 ff       	sbrs	r17, 4
     584:	00 10       	cpse	r0, r0
     586:	10 ff       	sbrs	r17, 0
     588:	00 ff       	sbrs	r16, 0
     58a:	10 10       	cpse	r1, r0
     58c:	f0 10       	cpse	r15, r0
     58e:	f0 14       	cp	r15, r0
     590:	14 14       	cp	r1, r4
     592:	fc 00       	.word	0x00fc	; ????
     594:	14 14       	cp	r1, r4
     596:	f7 00       	.word	0x00f7	; ????
     598:	ff 00       	.word	0x00ff	; ????
     59a:	00 ff       	sbrs	r16, 0
     59c:	00 ff       	sbrs	r16, 0
     59e:	14 14       	cp	r1, r4
     5a0:	f4 04       	cpc	r15, r4
     5a2:	fc 14       	cp	r15, r12
     5a4:	14 17       	cp	r17, r20
     5a6:	10 1f       	adc	r17, r16
     5a8:	10 10       	cpse	r1, r0
     5aa:	1f 10       	cpse	r1, r15
     5ac:	1f 14       	cp	r1, r15
     5ae:	14 14       	cp	r1, r4
     5b0:	1f 00       	.word	0x001f	; ????
     5b2:	10 10       	cpse	r1, r0
     5b4:	10 f0       	brcs	.+4      	; 0x5ba <__trampolines_end+0x3be>
     5b6:	00 00       	nop
     5b8:	00 00       	nop
     5ba:	1f 10       	cpse	r1, r15
     5bc:	10 10       	cpse	r1, r0
     5be:	10 1f       	adc	r17, r16
     5c0:	10 10       	cpse	r1, r0
     5c2:	10 10       	cpse	r1, r0
     5c4:	f0 10       	cpse	r15, r0
     5c6:	00 00       	nop
     5c8:	00 ff       	sbrs	r16, 0
     5ca:	10 10       	cpse	r1, r0
     5cc:	10 10       	cpse	r1, r0
     5ce:	10 10       	cpse	r1, r0
     5d0:	10 10       	cpse	r1, r0
     5d2:	10 ff       	sbrs	r17, 0
     5d4:	10 00       	.word	0x0010	; ????
     5d6:	00 00       	nop
     5d8:	ff 14       	cp	r15, r15
     5da:	00 00       	nop
     5dc:	ff 00       	.word	0x00ff	; ????
     5de:	ff 00       	.word	0x00ff	; ????
     5e0:	00 1f       	adc	r16, r16
     5e2:	10 17       	cp	r17, r16
     5e4:	00 00       	nop
     5e6:	fc 04       	cpc	r15, r12
     5e8:	f4 14       	cp	r15, r4
     5ea:	14 17       	cp	r17, r20
     5ec:	10 17       	cp	r17, r16
     5ee:	14 14       	cp	r1, r4
     5f0:	f4 04       	cpc	r15, r4
     5f2:	f4 00       	.word	0x00f4	; ????
     5f4:	00 ff       	sbrs	r16, 0
     5f6:	00 f7       	brcc	.-64     	; 0x5b8 <__trampolines_end+0x3bc>
     5f8:	14 14       	cp	r1, r4
     5fa:	14 14       	cp	r1, r4
     5fc:	14 14       	cp	r1, r4
     5fe:	14 f7       	brge	.-60     	; 0x5c4 <__trampolines_end+0x3c8>
     600:	00 f7       	brcc	.-64     	; 0x5c2 <__trampolines_end+0x3c6>
     602:	14 14       	cp	r1, r4
     604:	14 17       	cp	r17, r20
     606:	14 10       	cpse	r1, r4
     608:	10 1f       	adc	r17, r16
     60a:	10 1f       	adc	r17, r16
     60c:	14 14       	cp	r1, r4
     60e:	14 f4       	brge	.+4      	; 0x614 <__trampolines_end+0x418>
     610:	14 10       	cpse	r1, r4
     612:	10 f0       	brcs	.+4      	; 0x618 <__trampolines_end+0x41c>
     614:	10 f0       	brcs	.+4      	; 0x61a <__trampolines_end+0x41e>
     616:	00 00       	nop
     618:	1f 10       	cpse	r1, r15
     61a:	1f 00       	.word	0x001f	; ????
     61c:	00 00       	nop
     61e:	1f 14       	cp	r1, r15
     620:	00 00       	nop
     622:	00 fc       	sbrc	r0, 0
     624:	14 00       	.word	0x0014	; ????
     626:	00 f0       	brcs	.+0      	; 0x628 <__trampolines_end+0x42c>
     628:	10 f0       	brcs	.+4      	; 0x62e <__trampolines_end+0x432>
     62a:	10 10       	cpse	r1, r0
     62c:	ff 10       	cpse	r15, r15
     62e:	ff 14       	cp	r15, r15
     630:	14 14       	cp	r1, r4
     632:	ff 14       	cp	r15, r15
     634:	10 10       	cpse	r1, r0
     636:	10 1f       	adc	r17, r16
     638:	00 00       	nop
     63a:	00 00       	nop
     63c:	f0 10       	cpse	r15, r0
     63e:	ff ff       	.word	0xffff	; ????
     640:	ff ff       	.word	0xffff	; ????
     642:	ff f0       	brie	.+62     	; 0x682 <__trampolines_end+0x486>
     644:	f0 f0       	brcs	.+60     	; 0x682 <__trampolines_end+0x486>
     646:	f0 f0       	brcs	.+60     	; 0x684 <__trampolines_end+0x488>
     648:	ff ff       	.word	0xffff	; ????
     64a:	ff 00       	.word	0x00ff	; ????
     64c:	00 00       	nop
     64e:	00 00       	nop
     650:	ff ff       	.word	0xffff	; ????
     652:	0f 0f       	add	r16, r31
     654:	0f 0f       	add	r16, r31
     656:	0f 38       	cpi	r16, 0x8F	; 143
     658:	44 44       	sbci	r20, 0x44	; 68
     65a:	38 44       	sbci	r19, 0x48	; 72
     65c:	7c 2a       	or	r7, r28
     65e:	2a 3e       	cpi	r18, 0xEA	; 234
     660:	14 7e       	andi	r17, 0xE4	; 228
     662:	02 02       	muls	r16, r18
     664:	06 06       	cpc	r0, r22
     666:	02 7e       	andi	r16, 0xE2	; 226
     668:	02 7e       	andi	r16, 0xE2	; 226
     66a:	02 63       	ori	r16, 0x32	; 50
     66c:	55 49       	sbci	r21, 0x95	; 149
     66e:	41 63       	ori	r20, 0x31	; 49
     670:	38 44       	sbci	r19, 0x48	; 72
     672:	44 3c       	cpi	r20, 0xC4	; 196
     674:	04 40       	sbci	r16, 0x04	; 4
     676:	7e 20       	and	r7, r14
     678:	1e 20       	and	r1, r14
     67a:	06 02       	muls	r16, r22
     67c:	7e 02       	muls	r23, r30
     67e:	02 99       	sbic	0x00, 2	; 0
     680:	a5 e7       	ldi	r26, 0x75	; 117
     682:	a5 99       	sbic	0x14, 5	; 20
     684:	1c 2a       	or	r1, r28
     686:	49 2a       	or	r4, r25
     688:	1c 4c       	sbci	r17, 0xCC	; 204
     68a:	72 01       	movw	r14, r4
     68c:	72 4c       	sbci	r23, 0xC2	; 194
     68e:	30 4a       	sbci	r19, 0xA0	; 160
     690:	4d 4d       	sbci	r20, 0xDD	; 221
     692:	30 30       	cpi	r19, 0x00	; 0
     694:	48 78       	andi	r20, 0x88	; 136
     696:	48 30       	cpi	r20, 0x08	; 8
     698:	bc 62       	ori	r27, 0x2C	; 44
     69a:	5a 46       	sbci	r21, 0x6A	; 106
     69c:	3d 3e       	cpi	r19, 0xED	; 237
     69e:	49 49       	sbci	r20, 0x99	; 153
     6a0:	49 00       	.word	0x0049	; ????
     6a2:	7e 01       	movw	r14, r28
     6a4:	01 01       	movw	r0, r2
     6a6:	7e 2a       	or	r7, r30
     6a8:	2a 2a       	or	r2, r26
     6aa:	2a 2a       	or	r2, r26
     6ac:	44 44       	sbci	r20, 0x44	; 68
     6ae:	5f 44       	sbci	r21, 0x4F	; 79
     6b0:	44 40       	sbci	r20, 0x04	; 4
     6b2:	51 4a       	sbci	r21, 0xA1	; 161
     6b4:	44 40       	sbci	r20, 0x04	; 4
     6b6:	40 44       	sbci	r20, 0x40	; 64
     6b8:	4a 51       	subi	r20, 0x1A	; 26
     6ba:	40 00       	.word	0x0040	; ????
     6bc:	00 ff       	sbrs	r16, 0
     6be:	01 03       	mulsu	r16, r17
     6c0:	e0 80       	ld	r14, Z
     6c2:	ff 00       	.word	0x00ff	; ????
     6c4:	00 08       	sbc	r0, r0
     6c6:	08 6b       	ori	r16, 0xB8	; 184
     6c8:	6b 08       	sbc	r6, r11
     6ca:	36 12       	cpse	r3, r22
     6cc:	36 24       	eor	r3, r6
     6ce:	36 06       	cpc	r3, r22
     6d0:	0f 09       	sbc	r16, r15
     6d2:	0f 06       	cpc	r0, r31
     6d4:	00 00       	nop
     6d6:	18 18       	sub	r1, r8
     6d8:	00 00       	nop
     6da:	00 10       	cpse	r0, r0
     6dc:	10 00       	.word	0x0010	; ????
     6de:	30 40       	sbci	r19, 0x00	; 0
     6e0:	ff 01       	movw	r30, r30
     6e2:	01 00       	.word	0x0001	; ????
     6e4:	1f 01       	movw	r2, r30
     6e6:	01 1e       	adc	r0, r17
     6e8:	00 19       	sub	r16, r0
     6ea:	1d 17       	cp	r17, r29
     6ec:	12 00       	.word	0x0012	; ????
     6ee:	3c 3c       	cpi	r19, 0xCC	; 204
     6f0:	3c 3c       	cpi	r19, 0xCC	; 204
     6f2:	00 00       	nop
     6f4:	00 00       	nop
	...

000006f8 <__ctors_end>:
     6f8:	11 24       	eor	r1, r1
     6fa:	1f be       	out	0x3f, r1	; 63
     6fc:	cf ef       	ldi	r28, 0xFF	; 255
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	df e2       	ldi	r29, 0x2F	; 47
     702:	de bf       	out	0x3e, r29	; 62

00000704 <__do_copy_data>:
     704:	11 e2       	ldi	r17, 0x21	; 33
     706:	a0 e0       	ldi	r26, 0x00	; 0
     708:	b0 e2       	ldi	r27, 0x20	; 32
     70a:	e4 eb       	ldi	r30, 0xB4	; 180
     70c:	f3 e2       	ldi	r31, 0x23	; 35
     70e:	00 e0       	ldi	r16, 0x00	; 0
     710:	0b bf       	out	0x3b, r16	; 59
     712:	02 c0       	rjmp	.+4      	; 0x718 <__do_copy_data+0x14>
     714:	07 90       	elpm	r0, Z+
     716:	0d 92       	st	X+, r0
     718:	ac 37       	cpi	r26, 0x7C	; 124
     71a:	b1 07       	cpc	r27, r17
     71c:	d9 f7       	brne	.-10     	; 0x714 <__do_copy_data+0x10>

0000071e <__do_clear_bss>:
     71e:	23 e2       	ldi	r18, 0x23	; 35
     720:	ac e7       	ldi	r26, 0x7C	; 124
     722:	b1 e2       	ldi	r27, 0x21	; 33
     724:	01 c0       	rjmp	.+2      	; 0x728 <.do_clear_bss_start>

00000726 <.do_clear_bss_loop>:
     726:	1d 92       	st	X+, r1

00000728 <.do_clear_bss_start>:
     728:	a8 3f       	cpi	r26, 0xF8	; 248
     72a:	b2 07       	cpc	r27, r18
     72c:	e1 f7       	brne	.-8      	; 0x726 <.do_clear_bss_loop>
     72e:	15 d3       	rcall	.+1578   	; 0xd5a <main>
     730:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <_exit>

00000734 <__bad_interrupt>:
     734:	65 cc       	rjmp	.-1846   	; 0x0 <__vectors>

00000736 <clock_setup_32_mhz>:
	CLK.PSCTRL = CLK_PSADIV1_bm;
}

void clock_setup_32_mhz(void) {
	
	OSC.CTRL |= OSC_RC32MEN_bm;
     736:	e0 e5       	ldi	r30, 0x50	; 80
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     740:	81 81       	ldd	r24, Z+1	; 0x01
     742:	81 ff       	sbrs	r24, 1
     744:	fd cf       	rjmp	.-6      	; 0x740 <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
     746:	88 ed       	ldi	r24, 0xD8	; 216
     748:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	80 93 40 00 	sts	0x0040, r24
     750:	08 95       	ret

00000752 <__vector_88>:
esp8266_status_t connectWiFi(void) {
	
  return SUCCESS;
}

ISR(USARTD0_RXC_vect) {
     752:	1f 92       	push	r1
     754:	0f 92       	push	r0
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	0f 92       	push	r0
     75a:	11 24       	eor	r1, r1
     75c:	0b b6       	in	r0, 0x3b	; 59
     75e:	0f 92       	push	r0
     760:	2f 93       	push	r18
     762:	3f 93       	push	r19
     764:	8f 93       	push	r24
     766:	9f 93       	push	r25
     768:	ef 93       	push	r30
     76a:	ff 93       	push	r31
	rx_buffer[rx_ptr++] = USARTD0.DATA;
     76c:	80 91 7c 21 	lds	r24, 0x217C
     770:	90 91 7d 21 	lds	r25, 0x217D
     774:	9c 01       	movw	r18, r24
     776:	2f 5f       	subi	r18, 0xFF	; 255
     778:	3f 4f       	sbci	r19, 0xFF	; 255
     77a:	20 93 7c 21 	sts	0x217C, r18
     77e:	30 93 7d 21 	sts	0x217D, r19
     782:	20 91 a0 09 	lds	r18, 0x09A0
     786:	fc 01       	movw	r30, r24
     788:	e9 55       	subi	r30, 0x59	; 89
     78a:	fe 4d       	sbci	r31, 0xDE	; 222
     78c:	20 83       	st	Z, r18
     78e:	ff 91       	pop	r31
     790:	ef 91       	pop	r30
     792:	9f 91       	pop	r25
     794:	8f 91       	pop	r24
     796:	3f 91       	pop	r19
     798:	2f 91       	pop	r18
     79a:	0f 90       	pop	r0
     79c:	0b be       	out	0x3b, r0	; 59
     79e:	0f 90       	pop	r0
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	0f 90       	pop	r0
     7a4:	1f 90       	pop	r1
     7a6:	18 95       	reti

000007a8 <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
     7a8:	1f 92       	push	r1
     7aa:	0f 92       	push	r0
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	0f 92       	push	r0
     7b0:	11 24       	eor	r1, r1
     7b2:	0b b6       	in	r0, 0x3b	; 59
     7b4:	0f 92       	push	r0
     7b6:	cf 92       	push	r12
     7b8:	df 92       	push	r13
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	2f 93       	push	r18
     7c0:	3f 93       	push	r19
     7c2:	4f 93       	push	r20
     7c4:	5f 93       	push	r21
     7c6:	6f 93       	push	r22
     7c8:	7f 93       	push	r23
     7ca:	8f 93       	push	r24
     7cc:	9f 93       	push	r25
     7ce:	af 93       	push	r26
     7d0:	bf 93       	push	r27
     7d2:	ef 93       	push	r30
     7d4:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
     7d6:	e0 91 ba 23 	lds	r30, 0x23BA
     7da:	f0 91 bb 23 	lds	r31, 0x23BB
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	if (!fcb) return;
     7de:	30 97       	sbiw	r30, 0x00	; 0
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <__vector_14+0x3c>
     7e2:	6b c0       	rjmp	.+214    	; 0x8ba <__vector_14+0x112>
	ct = fcb->ct; ri = fcb->ri;
     7e4:	46 81       	ldd	r20, Z+6	; 0x06
     7e6:	57 81       	ldd	r21, Z+7	; 0x07
     7e8:	22 81       	ldd	r18, Z+2	; 0x02
     7ea:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
     7ec:	80 85       	ldd	r24, Z+8	; 0x08
     7ee:	91 85       	ldd	r25, Z+9	; 0x09
     7f0:	dc 01       	movw	r26, r24
     7f2:	a2 0f       	add	r26, r18
     7f4:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
     7f6:	80 81       	ld	r24, Z
     7f8:	91 81       	ldd	r25, Z+1	; 0x01
     7fa:	81 30       	cpi	r24, 0x01	; 1
     7fc:	91 05       	cpc	r25, r1
     7fe:	71 f0       	breq	.+28     	; 0x81c <__vector_14+0x74>
     800:	18 f0       	brcs	.+6      	; 0x808 <__vector_14+0x60>
     802:	02 97       	sbiw	r24, 0x02	; 2
     804:	a9 f0       	breq	.+42     	; 0x830 <__vector_14+0x88>
     806:	20 c0       	rjmp	.+64     	; 0x848 <__vector_14+0xa0>
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
     808:	41 15       	cp	r20, r1
     80a:	51 05       	cpc	r21, r1
     80c:	09 f4       	brne	.+2      	; 0x810 <__vector_14+0x68>
     80e:	55 c0       	rjmp	.+170    	; 0x8ba <__vector_14+0x112>
		l1 = r2 = buff[0];
     810:	6c 91       	ld	r22, X
		ct -= 1; ri += 1;
     812:	41 50       	subi	r20, 0x01	; 1
     814:	51 09       	sbc	r21, r1
     816:	2f 5f       	subi	r18, 0xFF	; 255
     818:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
     81a:	1f c0       	rjmp	.+62     	; 0x85a <__vector_14+0xb2>
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
     81c:	42 30       	cpi	r20, 0x02	; 2
     81e:	51 05       	cpc	r21, r1
     820:	08 f4       	brcc	.+2      	; 0x824 <__vector_14+0x7c>
     822:	4b c0       	rjmp	.+150    	; 0x8ba <__vector_14+0x112>
		l1 = buff[0]; r2 = buff[1];
     824:	6c 91       	ld	r22, X
		ct -= 2; ri += 2;
     826:	42 50       	subi	r20, 0x02	; 2
     828:	51 09       	sbc	r21, r1
     82a:	2e 5f       	subi	r18, 0xFE	; 254
     82c:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
     82e:	15 c0       	rjmp	.+42     	; 0x85a <__vector_14+0xb2>
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
     830:	42 30       	cpi	r20, 0x02	; 2
     832:	51 05       	cpc	r21, r1
     834:	08 f4       	brcc	.+2      	; 0x838 <__vector_14+0x90>
     836:	41 c0       	rjmp	.+130    	; 0x8ba <__vector_14+0x112>
		l1 = r2 = buff[1] + 128;
     838:	11 96       	adiw	r26, 0x01	; 1
     83a:	6c 91       	ld	r22, X
     83c:	60 58       	subi	r22, 0x80	; 128
		ct -= 2; ri += 2;
     83e:	42 50       	subi	r20, 0x02	; 2
     840:	51 09       	sbc	r21, r1
     842:	2e 5f       	subi	r18, 0xFE	; 254
     844:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
     846:	09 c0       	rjmp	.+18     	; 0x85a <__vector_14+0xb2>
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
     848:	44 30       	cpi	r20, 0x04	; 4
     84a:	51 05       	cpc	r21, r1
     84c:	b0 f1       	brcs	.+108    	; 0x8ba <__vector_14+0x112>
		l2 = buff[0]; 
		l1 = buff[1];
     84e:	11 96       	adiw	r26, 0x01	; 1
     850:	6c 91       	ld	r22, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
     852:	44 50       	subi	r20, 0x04	; 4
     854:	51 09       	sbc	r21, r1
		ri += 4;
     856:	2c 5f       	subi	r18, 0xFC	; 252
     858:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fcb->ct = ct;
     85a:	46 83       	std	Z+6, r20	; 0x06
     85c:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
     85e:	82 85       	ldd	r24, Z+10	; 0x0a
     860:	93 85       	ldd	r25, Z+11	; 0x0b
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	28 23       	and	r18, r24
     866:	39 23       	and	r19, r25
     868:	22 83       	std	Z+2, r18	; 0x02
     86a:	33 83       	std	Z+3, r19	; 0x03
	result = integer + 0x7FFF;
	return(result >> 4);
}

static inline uint8_t smooth(uint8_t data, float filterVal, float smoothedVal){
	return (int)(((data * (1 - filterVal)) + (smoothedVal  *  filterVal)));
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__floatsisf>
     876:	26 e6       	ldi	r18, 0x66	; 102
     878:	36 e6       	ldi	r19, 0x66	; 102
     87a:	46 e2       	ldi	r20, 0x26	; 38
     87c:	5f e3       	ldi	r21, 0x3F	; 63
     87e:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__mulsf3>
     882:	6b 01       	movw	r12, r22
     884:	7c 01       	movw	r14, r24
		ri += 4;
	}
	fcb->ct = ct;
	fcb->ri = ri & (fcb->sz_buff - 1);
	
	uint8_t data = smooth(l1,0.35,data);
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	cb 01       	movw	r24, r22
     88c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__floatunsisf>
	result = integer + 0x7FFF;
	return(result >> 4);
}

static inline uint8_t smooth(uint8_t data, float filterVal, float smoothedVal){
	return (int)(((data * (1 - filterVal)) + (smoothedVal  *  filterVal)));
     890:	23 e3       	ldi	r18, 0x33	; 51
     892:	33 e3       	ldi	r19, 0x33	; 51
     894:	43 eb       	ldi	r20, 0xB3	; 179
     896:	5e e3       	ldi	r21, 0x3E	; 62
     898:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__mulsf3>
     89c:	9b 01       	movw	r18, r22
     89e:	ac 01       	movw	r20, r24
     8a0:	c7 01       	movw	r24, r14
     8a2:	b6 01       	movw	r22, r12
     8a4:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__addsf3>
     8a8:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__fixsfsi>
     8ac:	77 27       	eor	r23, r23
	fcb->ri = ri & (fcb->sz_buff - 1);
	
	uint8_t data = smooth(l1,0.35,data);
	//uint8_t data = l1*0.2;
	
	DACB.CH0DATA = data;
     8ae:	e0 e2       	ldi	r30, 0x20	; 32
     8b0:	f3 e0       	ldi	r31, 0x03	; 3
     8b2:	60 8f       	std	Z+24, r22	; 0x18
     8b4:	71 8f       	std	Z+25, r23	; 0x19
	DACB.CH1DATA = data;
     8b6:	62 8f       	std	Z+26, r22	; 0x1a
     8b8:	73 8f       	std	Z+27, r23	; 0x1b
	//DACB.CH0DATAL = (data << 7);
	//DACB.CH0DATAH = (data >> 1);
}
     8ba:	ff 91       	pop	r31
     8bc:	ef 91       	pop	r30
     8be:	bf 91       	pop	r27
     8c0:	af 91       	pop	r26
     8c2:	9f 91       	pop	r25
     8c4:	8f 91       	pop	r24
     8c6:	7f 91       	pop	r23
     8c8:	6f 91       	pop	r22
     8ca:	5f 91       	pop	r21
     8cc:	4f 91       	pop	r20
     8ce:	3f 91       	pop	r19
     8d0:	2f 91       	pop	r18
     8d2:	ff 90       	pop	r15
     8d4:	ef 90       	pop	r14
     8d6:	df 90       	pop	r13
     8d8:	cf 90       	pop	r12
     8da:	0f 90       	pop	r0
     8dc:	0b be       	out	0x3b, r0	; 59
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	0f 90       	pop	r0
     8e4:	1f 90       	pop	r1
     8e6:	18 95       	reti

000008e8 <ht1632c_setPixel>:
	HT1632_PORT.PIN5CTRL = PORT_OPC_PULLUP_gc;
	HT1632_PORT.PIN6CTRL = PORT_OPC_PULLUP_gc;
	HT1632_PORT.PIN7CTRL = PORT_OPC_PULLUP_gc;
	
	ht1632c_sendcommand(HT1632_LED_OFF);
	ht1632c_sendcommand(HT1632_SYS_DIS);
     8e8:	fc 01       	movw	r30, r24
     8ea:	f6 95       	lsr	r31
     8ec:	e7 95       	ror	r30
     8ee:	f6 95       	lsr	r31
     8f0:	e7 95       	ror	r30
     8f2:	f6 95       	lsr	r31
     8f4:	e7 95       	ror	r30
     8f6:	e2 54       	subi	r30, 0x42	; 66
     8f8:	fc 4d       	sbci	r31, 0xDC	; 220
     8fa:	87 70       	andi	r24, 0x07	; 7
     8fc:	99 27       	eor	r25, r25
     8fe:	21 e0       	ldi	r18, 0x01	; 1
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	a9 01       	movw	r20, r18
     904:	02 c0       	rjmp	.+4      	; 0x90a <ht1632c_setPixel+0x22>
     906:	44 0f       	add	r20, r20
     908:	55 1f       	adc	r21, r21
     90a:	8a 95       	dec	r24
     90c:	e2 f7       	brpl	.-8      	; 0x906 <ht1632c_setPixel+0x1e>
     90e:	ca 01       	movw	r24, r20
     910:	90 81       	ld	r25, Z
     912:	89 2b       	or	r24, r25
     914:	80 83       	st	Z, r24
     916:	08 95       	ret

00000918 <ht1632c_clrPixel>:
     918:	fc 01       	movw	r30, r24
     91a:	f6 95       	lsr	r31
     91c:	e7 95       	ror	r30
     91e:	f6 95       	lsr	r31
     920:	e7 95       	ror	r30
     922:	f6 95       	lsr	r31
     924:	e7 95       	ror	r30
     926:	e2 54       	subi	r30, 0x42	; 66
     928:	fc 4d       	sbci	r31, 0xDC	; 220
     92a:	87 70       	andi	r24, 0x07	; 7
     92c:	99 27       	eor	r25, r25
     92e:	21 e0       	ldi	r18, 0x01	; 1
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	a9 01       	movw	r20, r18
     934:	02 c0       	rjmp	.+4      	; 0x93a <ht1632c_clrPixel+0x22>
     936:	44 0f       	add	r20, r20
     938:	55 1f       	adc	r21, r21
     93a:	8a 95       	dec	r24
     93c:	e2 f7       	brpl	.-8      	; 0x936 <ht1632c_clrPixel+0x1e>
     93e:	ca 01       	movw	r24, r20
     940:	80 95       	com	r24
     942:	90 81       	ld	r25, Z
     944:	89 23       	and	r24, r25
     946:	80 83       	st	Z, r24
     948:	08 95       	ret

0000094a <ht1632c_drawPixel>:
     94a:	68 31       	cpi	r22, 0x18	; 24
     94c:	60 f5       	brcc	.+88     	; 0x9a6 <ht1632c_drawPixel+0x5c>
     94e:	80 31       	cpi	r24, 0x10	; 16
     950:	50 f5       	brcc	.+84     	; 0x9a6 <ht1632c_drawPixel+0x5c>
     952:	2b ea       	ldi	r18, 0xAB	; 171
     954:	82 9f       	mul	r24, r18
     956:	21 2d       	mov	r18, r1
     958:	11 24       	eor	r1, r1
     95a:	22 95       	swap	r18
     95c:	2f 70       	andi	r18, 0x0F	; 15
     95e:	98 e1       	ldi	r25, 0x18	; 24
     960:	29 9f       	mul	r18, r25
     962:	80 19       	sub	r24, r0
     964:	11 24       	eor	r1, r1
     966:	28 2f       	mov	r18, r24
     968:	88 30       	cpi	r24, 0x08	; 8
     96a:	28 f0       	brcs	.+10     	; 0x976 <ht1632c_drawPixel+0x2c>
     96c:	80 31       	cpi	r24, 0x10	; 16
     96e:	30 f4       	brcc	.+12     	; 0x97c <ht1632c_drawPixel+0x32>
     970:	87 e8       	ldi	r24, 0x87	; 135
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	05 c0       	rjmp	.+10     	; 0x980 <ht1632c_drawPixel+0x36>
     976:	87 e0       	ldi	r24, 0x07	; 7
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	02 c0       	rjmp	.+4      	; 0x980 <ht1632c_drawPixel+0x36>
     97c:	87 e0       	ldi	r24, 0x07	; 7
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	27 70       	andi	r18, 0x07	; 7
     982:	82 1b       	sub	r24, r18
     984:	91 09       	sbc	r25, r1
     986:	68 30       	cpi	r22, 0x08	; 8
     988:	10 f4       	brcc	.+4      	; 0x98e <ht1632c_drawPixel+0x44>
     98a:	66 0f       	add	r22, r22
     98c:	02 c0       	rjmp	.+4      	; 0x992 <ht1632c_drawPixel+0x48>
     98e:	66 0f       	add	r22, r22
     990:	6f 50       	subi	r22, 0x0F	; 15
     992:	28 e0       	ldi	r18, 0x08	; 8
     994:	62 9f       	mul	r22, r18
     996:	80 0d       	add	r24, r0
     998:	91 1d       	adc	r25, r1
     99a:	11 24       	eor	r1, r1
     99c:	44 23       	and	r20, r20
     99e:	11 f0       	breq	.+4      	; 0x9a4 <ht1632c_drawPixel+0x5a>
     9a0:	a3 cf       	rjmp	.-186    	; 0x8e8 <ht1632c_setPixel>
     9a2:	08 95       	ret
     9a4:	b9 cf       	rjmp	.-142    	; 0x918 <ht1632c_clrPixel>
     9a6:	08 95       	ret

000009a8 <ht1632c_fillRect>:
     9a8:	af 92       	push	r10
     9aa:	bf 92       	push	r11
     9ac:	cf 92       	push	r12
     9ae:	df 92       	push	r13
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	b8 2e       	mov	r11, r24
     9be:	e8 2f       	mov	r30, r24
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	6f 01       	movw	r12, r30
     9c4:	c4 0e       	add	r12, r20
     9c6:	d1 1c       	adc	r13, r1
     9c8:	ec 15       	cp	r30, r12
     9ca:	fd 05       	cpc	r31, r13
     9cc:	e4 f4       	brge	.+56     	; 0xa06 <ht1632c_fillRect+0x5e>
     9ce:	e6 2e       	mov	r14, r22
     9d0:	f1 2c       	mov	r15, r1
     9d2:	e7 01       	movw	r28, r14
     9d4:	c2 0f       	add	r28, r18
     9d6:	d1 1d       	adc	r29, r1
     9d8:	a6 2e       	mov	r10, r22
     9da:	10 c0       	rjmp	.+32     	; 0x9fc <ht1632c_fillRect+0x54>
     9dc:	40 2f       	mov	r20, r16
     9de:	61 2f       	mov	r22, r17
     9e0:	8b 2d       	mov	r24, r11
     9e2:	b3 df       	rcall	.-154    	; 0x94a <ht1632c_drawPixel>
     9e4:	1f 5f       	subi	r17, 0xFF	; 255
     9e6:	21 2f       	mov	r18, r17
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	2c 17       	cp	r18, r28
     9ec:	3d 07       	cpc	r19, r29
     9ee:	b4 f3       	brlt	.-20     	; 0x9dc <ht1632c_fillRect+0x34>
     9f0:	b3 94       	inc	r11
     9f2:	2b 2d       	mov	r18, r11
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	2c 15       	cp	r18, r12
     9f8:	3d 05       	cpc	r19, r13
     9fa:	2c f4       	brge	.+10     	; 0xa06 <ht1632c_fillRect+0x5e>
     9fc:	ec 16       	cp	r14, r28
     9fe:	fd 06       	cpc	r15, r29
     a00:	bc f7       	brge	.-18     	; 0x9f0 <ht1632c_fillRect+0x48>
     a02:	1a 2d       	mov	r17, r10
     a04:	eb cf       	rjmp	.-42     	; 0x9dc <ht1632c_fillRect+0x34>
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	bf 90       	pop	r11
     a18:	af 90       	pop	r10
     a1a:	08 95       	ret

00000a1c <ht1632c_drawChar>:
     a1c:	5f 92       	push	r5
     a1e:	6f 92       	push	r6
     a20:	7f 92       	push	r7
     a22:	8f 92       	push	r8
     a24:	9f 92       	push	r9
     a26:	af 92       	push	r10
     a28:	bf 92       	push	r11
     a2a:	cf 92       	push	r12
     a2c:	df 92       	push	r13
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	a8 2e       	mov	r10, r24
     a3c:	b6 2e       	mov	r11, r22
     a3e:	c2 2e       	mov	r12, r18
     a40:	d0 2e       	mov	r13, r16
     a42:	e4 2f       	mov	r30, r20
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	7f 01       	movw	r14, r30
     a48:	ee 0c       	add	r14, r14
     a4a:	ff 1c       	adc	r15, r15
     a4c:	ee 0c       	add	r14, r14
     a4e:	ff 1c       	adc	r15, r15
     a50:	ee 0d       	add	r30, r14
     a52:	ff 1d       	adc	r31, r15
     a54:	78 2e       	mov	r7, r24
     a56:	c0 e0       	ldi	r28, 0x00	; 0
     a58:	d0 e0       	ldi	r29, 0x00	; 0
     a5a:	cf 01       	movw	r24, r30
     a5c:	84 50       	subi	r24, 0x04	; 4
     a5e:	9e 4f       	sbci	r25, 0xFE	; 254
     a60:	7c 01       	movw	r14, r24
     a62:	56 2e       	mov	r5, r22
     a64:	f7 01       	movw	r30, r14
     a66:	ec 0f       	add	r30, r28
     a68:	fd 1f       	adc	r31, r29
     a6a:	94 90       	lpm	r9, Z
     a6c:	85 2c       	mov	r8, r5
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	6c 2e       	mov	r6, r28
     a72:	6a 0c       	add	r6, r10
     a74:	90 fe       	sbrs	r9, 0
     a76:	0f c0       	rjmp	.+30     	; 0xa96 <ht1632c_drawChar+0x7a>
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	d9 12       	cpse	r13, r25
     a7c:	06 c0       	rjmp	.+12     	; 0xa8a <ht1632c_drawChar+0x6e>
     a7e:	4c 2d       	mov	r20, r12
     a80:	66 2d       	mov	r22, r6
     a82:	81 2f       	mov	r24, r17
     a84:	8b 0d       	add	r24, r11
     a86:	61 df       	rcall	.-318    	; 0x94a <ht1632c_drawPixel>
     a88:	06 c0       	rjmp	.+12     	; 0xa96 <ht1632c_drawChar+0x7a>
     a8a:	0c 2d       	mov	r16, r12
     a8c:	2d 2d       	mov	r18, r13
     a8e:	4d 2d       	mov	r20, r13
     a90:	67 2d       	mov	r22, r7
     a92:	88 2d       	mov	r24, r8
     a94:	89 df       	rcall	.-238    	; 0x9a8 <ht1632c_fillRect>
     a96:	96 94       	lsr	r9
     a98:	1f 5f       	subi	r17, 0xFF	; 255
     a9a:	8d 0c       	add	r8, r13
     a9c:	18 30       	cpi	r17, 0x08	; 8
     a9e:	51 f7       	brne	.-44     	; 0xa74 <ht1632c_drawChar+0x58>
     aa0:	21 96       	adiw	r28, 0x01	; 1
     aa2:	7d 0c       	add	r7, r13
     aa4:	c5 30       	cpi	r28, 0x05	; 5
     aa6:	d1 05       	cpc	r29, r1
     aa8:	e9 f6       	brne	.-70     	; 0xa64 <ht1632c_drawChar+0x48>
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	cf 90       	pop	r12
     aba:	bf 90       	pop	r11
     abc:	af 90       	pop	r10
     abe:	9f 90       	pop	r9
     ac0:	8f 90       	pop	r8
     ac2:	7f 90       	pop	r7
     ac4:	6f 90       	pop	r6
     ac6:	5f 90       	pop	r5
     ac8:	08 95       	ret

00000aca <ht1632c_writedata>:
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	28 e0       	ldi	r18, 0x08	; 8
     ad0:	e0 e8       	ldi	r30, 0x80	; 128
     ad2:	f6 e0       	ldi	r31, 0x06	; 6
     ad4:	21 83       	std	Z+1, r18	; 0x01
     ad6:	66 23       	and	r22, r22
     ad8:	c1 f0       	breq	.+48     	; 0xb0a <ht1632c_writedata+0x40>
     ada:	74 e0       	ldi	r23, 0x04	; 4
     adc:	41 e0       	ldi	r20, 0x01	; 1
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	a8 e0       	ldi	r26, 0x08	; 8
     ae2:	76 83       	std	Z+6, r23	; 0x06
     ae4:	2f ef       	ldi	r18, 0xFF	; 255
     ae6:	26 0f       	add	r18, r22
     ae8:	ea 01       	movw	r28, r20
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <ht1632c_writedata+0x26>
     aec:	cc 0f       	add	r28, r28
     aee:	dd 1f       	adc	r29, r29
     af0:	2a 95       	dec	r18
     af2:	e2 f7       	brpl	.-8      	; 0xaec <ht1632c_writedata+0x22>
     af4:	9e 01       	movw	r18, r28
     af6:	28 23       	and	r18, r24
     af8:	39 23       	and	r19, r25
     afa:	23 2b       	or	r18, r19
     afc:	11 f0       	breq	.+4      	; 0xb02 <ht1632c_writedata+0x38>
     afe:	a5 83       	std	Z+5, r26	; 0x05
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <ht1632c_writedata+0x3a>
     b02:	a6 83       	std	Z+6, r26	; 0x06
     b04:	75 83       	std	Z+5, r23	; 0x05
     b06:	61 50       	subi	r22, 0x01	; 1
     b08:	61 f7       	brne	.-40     	; 0xae2 <ht1632c_writedata+0x18>
     b0a:	88 e0       	ldi	r24, 0x08	; 8
     b0c:	e0 e8       	ldi	r30, 0x80	; 128
     b0e:	f6 e0       	ldi	r31, 0x06	; 6
     b10:	86 83       	std	Z+6, r24	; 0x06
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <ht1632c_writeScreen>:
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	e0 e8       	ldi	r30, 0x80	; 128
     b24:	f6 e0       	ldi	r31, 0x06	; 6
     b26:	86 83       	std	Z+6, r24	; 0x06
     b28:	63 e0       	ldi	r22, 0x03	; 3
     b2a:	85 e0       	ldi	r24, 0x05	; 5
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	cd df       	rcall	.-102    	; 0xaca <ht1632c_writedata>
     b30:	67 e0       	ldi	r22, 0x07	; 7
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	c9 df       	rcall	.-110    	; 0xaca <ht1632c_writedata>
     b38:	cf eb       	ldi	r28, 0xBF	; 191
     b3a:	d3 e2       	ldi	r29, 0x23	; 35
     b3c:	0f ee       	ldi	r16, 0xEF	; 239
     b3e:	13 e2       	ldi	r17, 0x23	; 35
     b40:	fe 01       	movw	r30, r28
     b42:	31 97       	sbiw	r30, 0x01	; 1
     b44:	80 81       	ld	r24, Z
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	98 2f       	mov	r25, r24
     b4a:	88 27       	eor	r24, r24
     b4c:	28 81       	ld	r18, Y
     b4e:	60 e1       	ldi	r22, 0x10	; 16
     b50:	82 2b       	or	r24, r18
     b52:	bb df       	rcall	.-138    	; 0xaca <ht1632c_writedata>
     b54:	22 96       	adiw	r28, 0x02	; 2
     b56:	c0 17       	cp	r28, r16
     b58:	d1 07       	cpc	r29, r17
     b5a:	91 f7       	brne	.-28     	; 0xb40 <ht1632c_writeScreen+0x28>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	e0 e8       	ldi	r30, 0x80	; 128
     b60:	f6 e0       	ldi	r31, 0x06	; 6
     b62:	85 83       	std	Z+5, r24	; 0x05
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	08 95       	ret

00000b6e <ht1632c_clearScreen>:
     b6e:	ee eb       	ldi	r30, 0xBE	; 190
     b70:	f3 e2       	ldi	r31, 0x23	; 35
     b72:	8e ee       	ldi	r24, 0xEE	; 238
     b74:	93 e2       	ldi	r25, 0x23	; 35
     b76:	11 92       	st	Z+, r1
     b78:	e8 17       	cp	r30, r24
     b7a:	f9 07       	cpc	r31, r25
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <ht1632c_clearScreen+0x8>
     b7e:	cc cf       	rjmp	.-104    	; 0xb18 <ht1632c_writeScreen>
     b80:	08 95       	ret

00000b82 <ht1632c_sendcommand>:
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	94 60       	ori	r25, 0x04	; 4
     b8c:	c0 e8       	ldi	r28, 0x80	; 128
     b8e:	d6 e0       	ldi	r29, 0x06	; 6
     b90:	11 e0       	ldi	r17, 0x01	; 1
     b92:	1e 83       	std	Y+6, r17	; 0x06
     b94:	6c e0       	ldi	r22, 0x0C	; 12
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	97 df       	rcall	.-210    	; 0xaca <ht1632c_writedata>
     b9c:	1d 83       	std	Y+5, r17	; 0x05
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	08 95       	ret

00000ba6 <ht1632c_begin>:
     ba6:	cf 93       	push	r28
     ba8:	c8 2f       	mov	r28, r24
     baa:	e0 e8       	ldi	r30, 0x80	; 128
     bac:	f6 e0       	ldi	r31, 0x06	; 6
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	91 83       	std	Z+1, r25	; 0x01
     bb2:	95 83       	std	Z+5, r25	; 0x05
     bb4:	94 e0       	ldi	r25, 0x04	; 4
     bb6:	91 83       	std	Z+1, r25	; 0x01
     bb8:	95 83       	std	Z+5, r25	; 0x05
     bba:	88 e0       	ldi	r24, 0x08	; 8
     bbc:	81 83       	std	Z+1, r24	; 0x01
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	e0 df       	rcall	.-64     	; 0xb82 <ht1632c_sendcommand>
     bc2:	83 e0       	ldi	r24, 0x03	; 3
     bc4:	de df       	rcall	.-68     	; 0xb82 <ht1632c_sendcommand>
     bc6:	88 e0       	ldi	r24, 0x08	; 8
     bc8:	dc df       	rcall	.-72     	; 0xb82 <ht1632c_sendcommand>
     bca:	84 e1       	ldi	r24, 0x14	; 20
     bcc:	da df       	rcall	.-76     	; 0xb82 <ht1632c_sendcommand>
     bce:	88 e1       	ldi	r24, 0x18	; 24
     bd0:	d8 df       	rcall	.-80     	; 0xb82 <ht1632c_sendcommand>
     bd2:	8c 2f       	mov	r24, r28
     bd4:	d6 df       	rcall	.-84     	; 0xb82 <ht1632c_sendcommand>
     bd6:	81 ea       	ldi	r24, 0xA1	; 161
     bd8:	d4 df       	rcall	.-88     	; 0xb82 <ht1632c_sendcommand>
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <ht1632c_setBrightness>:
}

void ht1632c_setBrightness(uint8_t pwm) {
     bde:	80 31       	cpi	r24, 0x10	; 16
     be0:	08 f0       	brcs	.+2      	; 0xbe4 <ht1632c_setBrightness+0x6>
     be2:	8f e0       	ldi	r24, 0x0F	; 15
	if (pwm > 15) {
		pwm = 15;	
	}
	ht1632c_sendcommand(HT1632_PWM_CONTROL | pwm);
     be4:	80 6a       	ori	r24, 0xA0	; 160
     be6:	cd cf       	rjmp	.-102    	; 0xb82 <ht1632c_sendcommand>
     be8:	08 95       	ret

00000bea <si114x_init>:
	
	BYTE res;
	res = f_open(&Fil, "john3.wav", FA_READ);
	if (!res) {
		load_wav(&Fil, "**** WAV PLAYER ****", Buff, sizeof Buff);
		f_close(&Fil);
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	ec 01       	movw	r28, r24
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	68 e0       	ldi	r22, 0x08	; 8
     bf8:	06 d5       	rcall	.+2572   	; 0x1606 <Si114xWriteToRegister>
     bfa:	8c 01       	movw	r16, r24
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	6a e0       	ldi	r22, 0x0A	; 10
     c00:	ce 01       	movw	r24, r28
     c02:	01 d5       	rcall	.+2562   	; 0x1606 <Si114xWriteToRegister>
     c04:	08 0f       	add	r16, r24
     c06:	19 1f       	adc	r17, r25
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	69 e0       	ldi	r22, 0x09	; 9
     c0c:	ce 01       	movw	r24, r28
     c0e:	fb d4       	rcall	.+2550   	; 0x1606 <Si114xWriteToRegister>
     c10:	08 0f       	add	r16, r24
     c12:	19 1f       	adc	r17, r25
     c14:	ce 01       	movw	r24, r28
     c16:	85 d2       	rcall	.+1290   	; 0x1122 <Si114xReset>
     c18:	08 0f       	add	r16, r24
     c1a:	19 1f       	adc	r17, r25
     c1c:	45 e5       	ldi	r20, 0x55	; 85
     c1e:	6f e0       	ldi	r22, 0x0F	; 15
     c20:	ce 01       	movw	r24, r28
     c22:	f1 d4       	rcall	.+2530   	; 0x1606 <Si114xWriteToRegister>
     c24:	08 0f       	add	r16, r24
     c26:	19 1f       	adc	r17, r25
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	60 e1       	ldi	r22, 0x10	; 16
     c2c:	ce 01       	movw	r24, r28
     c2e:	eb d4       	rcall	.+2518   	; 0x1606 <Si114xWriteToRegister>
     c30:	08 0f       	add	r16, r24
     c32:	19 1f       	adc	r17, r25
     c34:	43 e3       	ldi	r20, 0x33	; 51
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	ce 01       	movw	r24, r28
     c3a:	16 d2       	rcall	.+1068   	; 0x1068 <Si114xParamSet>
     c3c:	08 0f       	add	r16, r24
     c3e:	19 1f       	adc	r17, r25
     c40:	41 e0       	ldi	r20, 0x01	; 1
     c42:	63 e0       	ldi	r22, 0x03	; 3
     c44:	ce 01       	movw	r24, r28
     c46:	df d4       	rcall	.+2494   	; 0x1606 <Si114xWriteToRegister>
     c48:	08 0f       	add	r16, r24
     c4a:	19 1f       	adc	r17, r25
     c4c:	4d e1       	ldi	r20, 0x1D	; 29
     c4e:	64 e0       	ldi	r22, 0x04	; 4
     c50:	ce 01       	movw	r24, r28
     c52:	d9 d4       	rcall	.+2482   	; 0x1606 <Si114xWriteToRegister>
     c54:	08 0f       	add	r16, r24
     c56:	19 1f       	adc	r17, r25
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	65 e0       	ldi	r22, 0x05	; 5
     c5c:	ce 01       	movw	r24, r28
     c5e:	d3 d4       	rcall	.+2470   	; 0x1606 <Si114xWriteToRegister>
     c60:	08 0f       	add	r16, r24
     c62:	19 1f       	adc	r17, r25
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	66 e0       	ldi	r22, 0x06	; 6
     c68:	ce 01       	movw	r24, r28
     c6a:	cd d4       	rcall	.+2458   	; 0x1606 <Si114xWriteToRegister>
     c6c:	08 0f       	add	r16, r24
     c6e:	19 1f       	adc	r17, r25
     c70:	43 e0       	ldi	r20, 0x03	; 3
     c72:	67 e0       	ldi	r22, 0x07	; 7
     c74:	ce 01       	movw	r24, r28
     c76:	f8 d1       	rcall	.+1008   	; 0x1068 <Si114xParamSet>
     c78:	08 0f       	add	r16, r24
     c7a:	19 1f       	adc	r17, r25
     c7c:	43 e0       	ldi	r20, 0x03	; 3
     c7e:	68 e0       	ldi	r22, 0x08	; 8
     c80:	ce 01       	movw	r24, r28
     c82:	f2 d1       	rcall	.+996    	; 0x1068 <Si114xParamSet>
     c84:	08 0f       	add	r16, r24
     c86:	19 1f       	adc	r17, r25
     c88:	43 e0       	ldi	r20, 0x03	; 3
     c8a:	69 e0       	ldi	r22, 0x09	; 9
     c8c:	ce 01       	movw	r24, r28
     c8e:	ec d1       	rcall	.+984    	; 0x1068 <Si114xParamSet>
     c90:	08 0f       	add	r16, r24
     c92:	19 1f       	adc	r17, r25
     c94:	43 e0       	ldi	r20, 0x03	; 3
     c96:	6e e0       	ldi	r22, 0x0E	; 14
     c98:	ce 01       	movw	r24, r28
     c9a:	e6 d1       	rcall	.+972    	; 0x1068 <Si114xParamSet>
     c9c:	08 0f       	add	r16, r24
     c9e:	19 1f       	adc	r17, r25
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	6b e0       	ldi	r22, 0x0B	; 11
     ca4:	ce 01       	movw	r24, r28
     ca6:	e0 d1       	rcall	.+960    	; 0x1068 <Si114xParamSet>
     ca8:	08 0f       	add	r16, r24
     caa:	19 1f       	adc	r17, r25
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	6e e1       	ldi	r22, 0x1E	; 30
     cb0:	ce 01       	movw	r24, r28
     cb2:	da d1       	rcall	.+948    	; 0x1068 <Si114xParamSet>
     cb4:	08 0f       	add	r16, r24
     cb6:	19 1f       	adc	r17, r25
     cb8:	40 e0       	ldi	r20, 0x00	; 0
     cba:	61 e1       	ldi	r22, 0x11	; 17
     cbc:	ce 01       	movw	r24, r28
     cbe:	d4 d1       	rcall	.+936    	; 0x1068 <Si114xParamSet>
     cc0:	08 0f       	add	r16, r24
     cc2:	19 1f       	adc	r17, r25
     cc4:	41 e2       	ldi	r20, 0x21	; 33
     cc6:	62 e0       	ldi	r22, 0x02	; 2
     cc8:	ce 01       	movw	r24, r28
     cca:	ce d1       	rcall	.+924    	; 0x1068 <Si114xParamSet>
     ccc:	08 0f       	add	r16, r24
     cce:	19 1f       	adc	r17, r25
     cd0:	44 e0       	ldi	r20, 0x04	; 4
     cd2:	63 e0       	ldi	r22, 0x03	; 3
     cd4:	ce 01       	movw	r24, r28
     cd6:	c8 d1       	rcall	.+912    	; 0x1068 <Si114xParamSet>
     cd8:	08 0f       	add	r16, r24
     cda:	19 1f       	adc	r17, r25
     cdc:	40 e7       	ldi	r20, 0x70	; 112
     cde:	6a e0       	ldi	r22, 0x0A	; 10
     ce0:	ce 01       	movw	r24, r28
     ce2:	c2 d1       	rcall	.+900    	; 0x1068 <Si114xParamSet>
     ce4:	08 0f       	add	r16, r24
     ce6:	19 1f       	adc	r17, r25
     ce8:	40 e7       	ldi	r20, 0x70	; 112
     cea:	6d e1       	ldi	r22, 0x1D	; 29
     cec:	ce 01       	movw	r24, r28
     cee:	bc d1       	rcall	.+888    	; 0x1068 <Si114xParamSet>
     cf0:	08 0f       	add	r16, r24
     cf2:	19 1f       	adc	r17, r25
     cf4:	40 e7       	ldi	r20, 0x70	; 112
     cf6:	60 e1       	ldi	r22, 0x10	; 16
     cf8:	ce 01       	movw	r24, r28
     cfa:	b6 d1       	rcall	.+876    	; 0x1068 <Si114xParamSet>
     cfc:	08 0f       	add	r16, r24
     cfe:	19 1f       	adc	r17, r25
     d00:	44 e2       	ldi	r20, 0x24	; 36
     d02:	6c e0       	ldi	r22, 0x0C	; 12
     d04:	ce 01       	movw	r24, r28
     d06:	b0 d1       	rcall	.+864    	; 0x1068 <Si114xParamSet>
     d08:	08 0f       	add	r16, r24
     d0a:	19 1f       	adc	r17, r25
     d0c:	40 e2       	ldi	r20, 0x20	; 32
     d0e:	6f e1       	ldi	r22, 0x1F	; 31
     d10:	ce 01       	movw	r24, r28
     d12:	aa d1       	rcall	.+852    	; 0x1068 <Si114xParamSet>
     d14:	08 0f       	add	r16, r24
     d16:	19 1f       	adc	r17, r25
     d18:	40 e2       	ldi	r20, 0x20	; 32
     d1a:	62 e1       	ldi	r22, 0x12	; 18
     d1c:	ce 01       	movw	r24, r28
     d1e:	a4 d1       	rcall	.+840    	; 0x1068 <Si114xParamSet>
     d20:	08 0f       	add	r16, r24
     d22:	19 1f       	adc	r17, r25
     d24:	40 ea       	ldi	r20, 0xA0	; 160
     d26:	68 e0       	ldi	r22, 0x08	; 8
     d28:	ce 01       	movw	r24, r28
     d2a:	6d d4       	rcall	.+2266   	; 0x1606 <Si114xWriteToRegister>
     d2c:	08 0f       	add	r16, r24
     d2e:	19 1f       	adc	r17, r25
     d30:	48 e0       	ldi	r20, 0x08	; 8
     d32:	6a e0       	ldi	r22, 0x0A	; 10
     d34:	ce 01       	movw	r24, r28
     d36:	67 d4       	rcall	.+2254   	; 0x1606 <Si114xWriteToRegister>
     d38:	08 0f       	add	r16, r24
     d3a:	19 1f       	adc	r17, r25
     d3c:	48 e0       	ldi	r20, 0x08	; 8
     d3e:	69 e0       	ldi	r22, 0x09	; 9
     d40:	ce 01       	movw	r24, r28
     d42:	61 d4       	rcall	.+2242   	; 0x1606 <Si114xWriteToRegister>
     d44:	08 0f       	add	r16, r24
     d46:	19 1f       	adc	r17, r25
     d48:	ce 01       	movw	r24, r28
     d4a:	8b d1       	rcall	.+790    	; 0x1062 <Si114xPsAlsAuto>
     d4c:	80 0f       	add	r24, r16
     d4e:	91 1f       	adc	r25, r17
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	08 95       	ret

00000d5a <main>:
	}	
}

int main(void) {
     d5a:	cf 93       	push	r28
     d5c:	df 93       	push	r29
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	62 97       	sbiw	r28, 0x12	; 18
     d64:	cd bf       	out	0x3d, r28	; 61
     d66:	de bf       	out	0x3e, r29	; 62
		
	clock_setup_32_mhz();
     d68:	e6 dc       	rcall	.-1588   	; 0x736 <clock_setup_32_mhz>
	ht1632c_begin(HT1632_COMMON_16NMOS);
     d6a:	84 e2       	ldi	r24, 0x24	; 36
     d6c:	1c df       	rcall	.-456    	; 0xba6 <ht1632c_begin>
	ht1632c_setBrightness(0);
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	36 df       	rcall	.-404    	; 0xbde <ht1632c_setBrightness>
	ht1632c_clearScreen();
     d72:	fd de       	rcall	.-518    	; 0xb6e <ht1632c_clearScreen>
	//ht1632c_fillScreen();
	uart_setup();
     d74:	8c d6       	rcall	.+3352   	; 0x1a8e <uart_setup>
}


void pmic_setup(void) {
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
     d76:	87 e0       	ldi	r24, 0x07	; 7
     d78:	e0 ea       	ldi	r30, 0xA0	; 160
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	82 83       	std	Z+2, r24	; 0x02
	ht1632c_setBrightness(0);
	ht1632c_clearScreen();
	//ht1632c_fillScreen();
	uart_setup();
	pmic_setup();
	i2c_setup();
     d7e:	a9 d0       	rcall	.+338    	; 0xed2 <i2c_setup>
	
	ht1632c_drawChar(2,0,'1',1,1);
     d80:	01 e0       	ldi	r16, 0x01	; 1
     d82:	21 e0       	ldi	r18, 0x01	; 1
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	41 e3       	ldi	r20, 0x31	; 49
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	47 de       	rcall	.-882    	; 0xa1c <ht1632c_drawChar>
	ht1632c_drawChar(9,0,'3',1,1);
     d8e:	21 e0       	ldi	r18, 0x01	; 1
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	43 e3       	ldi	r20, 0x33	; 51
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	89 e0       	ldi	r24, 0x09	; 9
     d98:	41 de       	rcall	.-894    	; 0xa1c <ht1632c_drawChar>
	ht1632c_drawChar(2,9,'3',1,1);
     d9a:	21 e0       	ldi	r18, 0x01	; 1
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	43 e3       	ldi	r20, 0x33	; 51
     da0:	69 e0       	ldi	r22, 0x09	; 9
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	3b de       	rcall	.-906    	; 0xa1c <ht1632c_drawChar>
	ht1632c_drawChar(9,9,'7',1,1);
     da6:	21 e0       	ldi	r18, 0x01	; 1
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	47 e3       	ldi	r20, 0x37	; 55
     dac:	69 e0       	ldi	r22, 0x09	; 9
     dae:	89 e0       	ldi	r24, 0x09	; 9
     db0:	35 de       	rcall	.-918    	; 0xa1c <ht1632c_drawChar>
	ht1632c_writeScreen();
     db2:	b2 de       	rcall	.-668    	; 0xb18 <ht1632c_writeScreen>
	
	stdout = stdin = &mystdout;
     db4:	84 e0       	ldi	r24, 0x04	; 4
     db6:	90 e2       	ldi	r25, 0x20	; 32
     db8:	80 93 f2 23 	sts	0x23F2, r24
     dbc:	90 93 f3 23 	sts	0x23F3, r25
     dc0:	80 93 f4 23 	sts	0x23F4, r24
     dc4:	90 93 f5 23 	sts	0x23F5, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dc8:	2a ea       	ldi	r18, 0xAA	; 170
     dca:	36 ee       	ldi	r19, 0xE6	; 230
     dcc:	86 e9       	ldi	r24, 0x96	; 150
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	21 50       	subi	r18, 0x01	; 1
     dd2:	30 40       	sbci	r19, 0x00	; 0
     dd4:	80 40       	sbci	r24, 0x00	; 0
     dd6:	90 40       	sbci	r25, 0x00	; 0
     dd8:	d9 f7       	brne	.-10     	; 0xdd0 <main+0x76>
     dda:	00 00       	nop
	uint8_t reg1;
	
	SI114X_IRQ_SAMPLE sensor_data;
	
	_delay_ms(5000);
	si114x_init(SI114X_ADDR);
     ddc:	8a e5       	ldi	r24, 0x5A	; 90
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	04 df       	rcall	.-504    	; 0xbea <si114x_init>
	//i2c_write_data_block(SI114X_ADDR,HW_KEY,write_buffer,1);
	//i2c_write_data(SI114X_ADDR,HW_KEY,0x17);
	
	while (1) {		
		reg0 = i2c_read_data(SI114X_ADDR,PS1_DATA0);
     de2:	66 e2       	ldi	r22, 0x26	; 38
     de4:	8a e5       	ldi	r24, 0x5A	; 90
     de6:	98 d0       	rcall	.+304    	; 0xf18 <i2c_read_data>
     de8:	18 2f       	mov	r17, r24
		reg1 = i2c_read_data(SI114X_ADDR,PS1_DATA1);
     dea:	67 e2       	ldi	r22, 0x27	; 39
     dec:	8a e5       	ldi	r24, 0x5A	; 90
     dee:	94 d0       	rcall	.+296    	; 0xf18 <i2c_read_data>
		
		reg01 = ((u16)reg1 << 8) | reg0;
     df0:	21 2f       	mov	r18, r17
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	38 2b       	or	r19, r24
		
		sensor_data.ps1 = reg01;
     df6:	2b 87       	std	Y+11, r18	; 0x0b
     df8:	3c 87       	std	Y+12, r19	; 0x0c
		
		//printf("PS1: %d ,",tmp);
		
		reg0 = i2c_read_data(SI114X_ADDR,PS2_DATA0);
     dfa:	68 e2       	ldi	r22, 0x28	; 40
     dfc:	8a e5       	ldi	r24, 0x5A	; 90
     dfe:	8c d0       	rcall	.+280    	; 0xf18 <i2c_read_data>
     e00:	18 2f       	mov	r17, r24
		reg1 = i2c_read_data(SI114X_ADDR,PS2_DATA1);
     e02:	69 e2       	ldi	r22, 0x29	; 41
     e04:	8a e5       	ldi	r24, 0x5A	; 90
     e06:	88 d0       	rcall	.+272    	; 0xf18 <i2c_read_data>
		
		reg01 = ((u16)reg1 << 8) | reg0;
     e08:	21 2f       	mov	r18, r17
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	38 2b       	or	r19, r24
		
		sensor_data.ps2 = reg01;
     e0e:	2d 87       	std	Y+13, r18	; 0x0d
     e10:	3e 87       	std	Y+14, r19	; 0x0e
		
		//printf("PS2: %d \r\n",tmp);
		
		reg0 = i2c_read_data(SI114X_ADDR,ALS_IR_DATA0);
     e12:	64 e2       	ldi	r22, 0x24	; 36
     e14:	8a e5       	ldi	r24, 0x5A	; 90
     e16:	80 d0       	rcall	.+256    	; 0xf18 <i2c_read_data>
     e18:	18 2f       	mov	r17, r24
		reg1 = i2c_read_data(SI114X_ADDR,ALS_IR_DATA1);
     e1a:	65 e2       	ldi	r22, 0x25	; 37
     e1c:	8a e5       	ldi	r24, 0x5A	; 90
     e1e:	7c d0       	rcall	.+248    	; 0xf18 <i2c_read_data>
		
		reg01 = ((uint16_t)reg1 << 8) | reg0;
     e20:	21 2f       	mov	r18, r17
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	38 2b       	or	r19, r24
		
		sensor_data.ir = reg01;
     e26:	29 87       	std	Y+9, r18	; 0x09
     e28:	3a 87       	std	Y+10, r19	; 0x0a
		
		//printf("ALS: %d \r\n",tmp);
		
		//SliderAlgorithm(SI114X_ADDR,&sensor_data,8);
		
		ProcessSi114xSamples(SI114X_ADDR,&sensor_data);
     e2a:	be 01       	movw	r22, r28
     e2c:	6f 5f       	subi	r22, 0xFF	; 255
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	8a e5       	ldi	r24, 0x5A	; 90
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	32 d3       	rcall	.+1636   	; 0x149a <ProcessSi114xSamples>
     e36:	d5 cf       	rjmp	.-86     	; 0xde2 <main+0x88>

00000e38 <__vector_10>:
		ht1632c_writeScreen();
	}
	
}

ISR(RTC_OVF_vect) {
     e38:	1f 92       	push	r1
     e3a:	0f 92       	push	r0
     e3c:	0f b6       	in	r0, 0x3f	; 63
     e3e:	0f 92       	push	r0
     e40:	11 24       	eor	r1, r1
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	8f 93       	push	r24
     e48:	9f 93       	push	r25
	seconds++;
     e4a:	80 91 80 21 	lds	r24, 0x2180
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	80 93 80 21 	sts	0x2180, r24
	minutes += seconds / 60;
     e54:	90 91 80 21 	lds	r25, 0x2180
     e58:	20 91 7f 21 	lds	r18, 0x217F
     e5c:	89 e8       	ldi	r24, 0x89	; 137
     e5e:	98 9f       	mul	r25, r24
     e60:	91 2d       	mov	r25, r1
     e62:	11 24       	eor	r1, r1
     e64:	92 95       	swap	r25
     e66:	96 95       	lsr	r25
     e68:	97 70       	andi	r25, 0x07	; 7
     e6a:	92 0f       	add	r25, r18
     e6c:	90 93 7f 21 	sts	0x217F, r25
	seconds %= 60;
     e70:	30 91 80 21 	lds	r19, 0x2180
     e74:	38 9f       	mul	r19, r24
     e76:	91 2d       	mov	r25, r1
     e78:	11 24       	eor	r1, r1
     e7a:	92 95       	swap	r25
     e7c:	96 95       	lsr	r25
     e7e:	97 70       	andi	r25, 0x07	; 7
     e80:	2c e3       	ldi	r18, 0x3C	; 60
     e82:	92 9f       	mul	r25, r18
     e84:	30 19       	sub	r19, r0
     e86:	11 24       	eor	r1, r1
     e88:	30 93 80 21 	sts	0x2180, r19
	hours += minutes / 60;
     e8c:	90 91 7f 21 	lds	r25, 0x217F
     e90:	30 91 7e 21 	lds	r19, 0x217E
     e94:	98 9f       	mul	r25, r24
     e96:	91 2d       	mov	r25, r1
     e98:	11 24       	eor	r1, r1
     e9a:	92 95       	swap	r25
     e9c:	96 95       	lsr	r25
     e9e:	97 70       	andi	r25, 0x07	; 7
     ea0:	93 0f       	add	r25, r19
     ea2:	90 93 7e 21 	sts	0x217E, r25
	minutes %= 60;
     ea6:	90 91 7f 21 	lds	r25, 0x217F
     eaa:	98 9f       	mul	r25, r24
     eac:	81 2d       	mov	r24, r1
     eae:	11 24       	eor	r1, r1
     eb0:	82 95       	swap	r24
     eb2:	86 95       	lsr	r24
     eb4:	87 70       	andi	r24, 0x07	; 7
     eb6:	82 9f       	mul	r24, r18
     eb8:	90 19       	sub	r25, r0
     eba:	11 24       	eor	r1, r1
     ebc:	90 93 7f 21 	sts	0x217F, r25
}
     ec0:	9f 91       	pop	r25
     ec2:	8f 91       	pop	r24
     ec4:	3f 91       	pop	r19
     ec6:	2f 91       	pop	r18
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <i2c_setup>:
	_delay_ms(1);
	
	TWIC.MASTER.CTRLC = 0x03; //Send STOP
	
	return length;
}
     ed2:	e0 e8       	ldi	r30, 0x80	; 128
     ed4:	f4 e0       	ldi	r31, 0x04	; 4
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	82 83       	std	Z+2, r24	; 0x02
     eda:	9e e6       	ldi	r25, 0x6E	; 110
     edc:	95 83       	std	Z+5, r25	; 0x05
     ede:	98 e0       	ldi	r25, 0x08	; 8
     ee0:	91 83       	std	Z+1, r25	; 0x01
     ee2:	84 83       	std	Z+4, r24	; 0x04
     ee4:	08 95       	ret

00000ee6 <i2c_write_data>:
     ee6:	88 0f       	add	r24, r24
     ee8:	e0 e8       	ldi	r30, 0x80	; 128
     eea:	f4 e0       	ldi	r31, 0x04	; 4
     eec:	86 83       	std	Z+6, r24	; 0x06
     eee:	84 81       	ldd	r24, Z+4	; 0x04
     ef0:	86 ff       	sbrs	r24, 6
     ef2:	fd cf       	rjmp	.-6      	; 0xeee <i2c_write_data+0x8>
     ef4:	e0 e8       	ldi	r30, 0x80	; 128
     ef6:	f4 e0       	ldi	r31, 0x04	; 4
     ef8:	67 83       	std	Z+7, r22	; 0x07
     efa:	84 81       	ldd	r24, Z+4	; 0x04
     efc:	86 ff       	sbrs	r24, 6
     efe:	fd cf       	rjmp	.-6      	; 0xefa <i2c_write_data+0x14>
     f00:	e0 e8       	ldi	r30, 0x80	; 128
     f02:	f4 e0       	ldi	r31, 0x04	; 4
     f04:	47 83       	std	Z+7, r20	; 0x07
     f06:	84 81       	ldd	r24, Z+4	; 0x04
     f08:	86 ff       	sbrs	r24, 6
     f0a:	fd cf       	rjmp	.-6      	; 0xf06 <i2c_write_data+0x20>
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	e0 e8       	ldi	r30, 0x80	; 128
     f10:	f4 e0       	ldi	r31, 0x04	; 4
     f12:	83 83       	std	Z+3, r24	; 0x03
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	08 95       	ret

00000f18 <i2c_read_data>:
     f18:	98 2f       	mov	r25, r24
     f1a:	99 0f       	add	r25, r25
     f1c:	e0 e8       	ldi	r30, 0x80	; 128
     f1e:	f4 e0       	ldi	r31, 0x04	; 4
     f20:	96 83       	std	Z+6, r25	; 0x06
     f22:	94 81       	ldd	r25, Z+4	; 0x04
     f24:	96 ff       	sbrs	r25, 6
     f26:	fd cf       	rjmp	.-6      	; 0xf22 <i2c_read_data+0xa>
     f28:	e0 e8       	ldi	r30, 0x80	; 128
     f2a:	f4 e0       	ldi	r31, 0x04	; 4
     f2c:	67 83       	std	Z+7, r22	; 0x07
     f2e:	94 81       	ldd	r25, Z+4	; 0x04
     f30:	96 ff       	sbrs	r25, 6
     f32:	fd cf       	rjmp	.-6      	; 0xf2e <i2c_read_data+0x16>
     f34:	88 0f       	add	r24, r24
     f36:	81 60       	ori	r24, 0x01	; 1
     f38:	e0 e8       	ldi	r30, 0x80	; 128
     f3a:	f4 e0       	ldi	r31, 0x04	; 4
     f3c:	86 83       	std	Z+6, r24	; 0x06
     f3e:	84 81       	ldd	r24, Z+4	; 0x04
     f40:	88 23       	and	r24, r24
     f42:	ec f7       	brge	.-6      	; 0xf3e <i2c_read_data+0x26>
     f44:	e0 e8       	ldi	r30, 0x80	; 128
     f46:	f4 e0       	ldi	r31, 0x04	; 4
     f48:	87 81       	ldd	r24, Z+7	; 0x07
     f4a:	93 81       	ldd	r25, Z+3	; 0x03
     f4c:	94 60       	ori	r25, 0x04	; 4
     f4e:	93 83       	std	Z+3, r25	; 0x03
     f50:	e9 ef       	ldi	r30, 0xF9	; 249
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	31 97       	sbiw	r30, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <i2c_read_data+0x3c>
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <i2c_read_data+0x42>
     f5a:	00 00       	nop
     f5c:	93 e0       	ldi	r25, 0x03	; 3
     f5e:	e0 e8       	ldi	r30, 0x80	; 128
     f60:	f4 e0       	ldi	r31, 0x04	; 4
     f62:	93 83       	std	Z+3, r25	; 0x03
     f64:	08 95       	ret

00000f66 <i2c_write_data_block>:

uint8_t i2c_write_data_block(uint8_t slave_addr, uint8_t register_addr, uint8_t *data, uint8_t length) {
	
	uint8_t i;
	
	TWIC.MASTER.ADDR = (slave_addr << 1);
     f66:	88 0f       	add	r24, r24
     f68:	e0 e8       	ldi	r30, 0x80	; 128
     f6a:	f4 e0       	ldi	r31, 0x04	; 4
     f6c:	86 83       	std	Z+6, r24	; 0x06
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
     f6e:	94 81       	ldd	r25, Z+4	; 0x04
     f70:	96 ff       	sbrs	r25, 6
     f72:	fd cf       	rjmp	.-6      	; 0xf6e <i2c_write_data_block+0x8>
	TWIC.MASTER.DATA = register_addr;
     f74:	e0 e8       	ldi	r30, 0x80	; 128
     f76:	f4 e0       	ldi	r31, 0x04	; 4
     f78:	67 83       	std	Z+7, r22	; 0x07
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
     f7a:	94 81       	ldd	r25, Z+4	; 0x04
     f7c:	96 ff       	sbrs	r25, 6
     f7e:	fd cf       	rjmp	.-6      	; 0xf7a <i2c_write_data_block+0x14>
	
	for (i = 0; i < length; i++) {
     f80:	22 23       	and	r18, r18
     f82:	71 f0       	breq	.+28     	; 0xfa0 <i2c_write_data_block+0x3a>
     f84:	84 2f       	mov	r24, r20
     f86:	a4 2f       	mov	r26, r20
     f88:	b5 2f       	mov	r27, r21
		TWIC.MASTER.DATA = data[i];
     f8a:	e0 e8       	ldi	r30, 0x80	; 128
     f8c:	f4 e0       	ldi	r31, 0x04	; 4
     f8e:	9d 91       	ld	r25, X+
     f90:	97 83       	std	Z+7, r25	; 0x07
		while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
     f92:	94 81       	ldd	r25, Z+4	; 0x04
     f94:	96 ff       	sbrs	r25, 6
     f96:	fd cf       	rjmp	.-6      	; 0xf92 <i2c_write_data_block+0x2c>
     f98:	9a 2f       	mov	r25, r26
     f9a:	98 1b       	sub	r25, r24
	TWIC.MASTER.ADDR = (slave_addr << 1);
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
	TWIC.MASTER.DATA = register_addr;
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
	
	for (i = 0; i < length; i++) {
     f9c:	92 17       	cp	r25, r18
     f9e:	b8 f3       	brcs	.-18     	; 0xf8e <i2c_write_data_block+0x28>
		TWIC.MASTER.DATA = data[i];
		while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
	}
	
	TWIC.MASTER.CTRLC = 0x03; //Stop
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	e0 e8       	ldi	r30, 0x80	; 128
     fa4:	f4 e0       	ldi	r31, 0x04	; 4
     fa6:	83 83       	std	Z+3, r24	; 0x03
	
	return length;
     fa8:	82 2f       	mov	r24, r18
     faa:	08 95       	ret

00000fac <_sendCmd>:
    // returns Parameter[address]
    s16 retval;
    u8 cmd = 0x80 + (address & 0x1F);
    if((retval=_sendCmd(si114x_handle, cmd ))!=0) return retval;
    return Si114xReadFromRegister(si114x_handle, REG_PARAM_RD);
}
     fac:	df 92       	push	r13
     fae:	ef 92       	push	r14
     fb0:	ff 92       	push	r15
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	ec 01       	movw	r28, r24
     fbc:	d6 2e       	mov	r13, r22
     fbe:	60 e2       	ldi	r22, 0x20	; 32
     fc0:	26 d3       	rcall	.+1612   	; 0x160e <Si114xReadFromRegister>
     fc2:	8c 01       	movw	r16, r24
     fc4:	99 23       	and	r25, r25
     fc6:	34 f1       	brlt	.+76     	; 0x1014 <_sendCmd+0x68>
     fc8:	60 e3       	ldi	r22, 0x30	; 48
     fca:	ce 01       	movw	r24, r28
     fcc:	20 d3       	rcall	.+1600   	; 0x160e <Si114xReadFromRegister>
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	91 05       	cpc	r25, r1
     fd2:	81 f1       	breq	.+96     	; 0x1034 <_sendCmd+0x88>
     fd4:	99 23       	and	r25, r25
     fd6:	c4 f7       	brge	.-16     	; 0xfc8 <_sendCmd+0x1c>
     fd8:	39 c0       	rjmp	.+114    	; 0x104c <_sendCmd+0xa0>
     fda:	60 e2       	ldi	r22, 0x20	; 32
     fdc:	ce 01       	movw	r24, r28
     fde:	17 d3       	rcall	.+1582   	; 0x160e <Si114xReadFromRegister>
     fe0:	80 17       	cp	r24, r16
     fe2:	91 07       	cpc	r25, r17
     fe4:	51 f1       	breq	.+84     	; 0x103a <_sendCmd+0x8e>
     fe6:	99 23       	and	r25, r25
     fe8:	8c f1       	brlt	.+98     	; 0x104c <_sendCmd+0xa0>
     fea:	8c 01       	movw	r16, r24
     fec:	ed cf       	rjmp	.-38     	; 0xfc8 <_sendCmd+0x1c>
     fee:	78 01       	movw	r14, r16
     ff0:	4d 2d       	mov	r20, r13
     ff2:	68 e1       	ldi	r22, 0x18	; 24
     ff4:	ce 01       	movw	r24, r28
     ff6:	07 d3       	rcall	.+1550   	; 0x1606 <Si114xWriteToRegister>
     ff8:	9c 01       	movw	r18, r24
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	69 f4       	brne	.+26     	; 0x1018 <_sendCmd+0x6c>
     ffe:	dd 20       	and	r13, r13
    1000:	69 f0       	breq	.+26     	; 0x101c <_sendCmd+0x70>
    1002:	60 e2       	ldi	r22, 0x20	; 32
    1004:	ce 01       	movw	r24, r28
    1006:	03 d3       	rcall	.+1542   	; 0x160e <Si114xReadFromRegister>
    1008:	8e 15       	cp	r24, r14
    100a:	9f 05       	cpc	r25, r15
    100c:	51 f4       	brne	.+20     	; 0x1022 <_sendCmd+0x76>
    100e:	11 23       	and	r17, r17
    1010:	c4 f7       	brge	.-16     	; 0x1002 <_sendCmd+0x56>
    1012:	0a c0       	rjmp	.+20     	; 0x1028 <_sendCmd+0x7c>
    1014:	91 2f       	mov	r25, r17
    1016:	1a c0       	rjmp	.+52     	; 0x104c <_sendCmd+0xa0>
    1018:	93 2f       	mov	r25, r19
    101a:	18 c0       	rjmp	.+48     	; 0x104c <_sendCmd+0xa0>
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	15 c0       	rjmp	.+42     	; 0x104c <_sendCmd+0xa0>
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	12 c0       	rjmp	.+36     	; 0x104c <_sendCmd+0xa0>
    1028:	80 2f       	mov	r24, r16
    102a:	91 2f       	mov	r25, r17
    102c:	0f c0       	rjmp	.+30     	; 0x104c <_sendCmd+0xa0>
    102e:	82 2f       	mov	r24, r18
    1030:	93 2f       	mov	r25, r19
    1032:	0c c0       	rjmp	.+24     	; 0x104c <_sendCmd+0xa0>
    1034:	d1 10       	cpse	r13, r1
    1036:	d1 cf       	rjmp	.-94     	; 0xfda <_sendCmd+0x2e>
    1038:	da cf       	rjmp	.-76     	; 0xfee <_sendCmd+0x42>
    103a:	78 01       	movw	r14, r16
    103c:	4d 2d       	mov	r20, r13
    103e:	68 e1       	ldi	r22, 0x18	; 24
    1040:	ce 01       	movw	r24, r28
    1042:	e1 d2       	rcall	.+1474   	; 0x1606 <Si114xWriteToRegister>
    1044:	9c 01       	movw	r18, r24
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	e1 f2       	breq	.-72     	; 0x1002 <_sendCmd+0x56>
    104a:	f1 cf       	rjmp	.-30     	; 0x102e <_sendCmd+0x82>
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	df 90       	pop	r13
    105a:	08 95       	ret

0000105c <Si114xNop>:
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	a6 cf       	rjmp	.-180    	; 0xfac <_sendCmd>
    1060:	08 95       	ret

00001062 <Si114xPsAlsAuto>:
    1062:	6f e0       	ldi	r22, 0x0F	; 15
    1064:	a3 cf       	rjmp	.-186    	; 0xfac <_sendCmd>
    1066:	08 95       	ret

00001068 <Si114xParamSet>:

//-----------------------------------------------------------------------------
// Si114xParamSet writes to the PARAM_WR and CMD register 
//
s16 Si114xParamSet(HANDLE si114x_handle, u8 address, u8 value)
{
    1068:	cf 92       	push	r12
    106a:	df 92       	push	r13
    106c:	ef 92       	push	r14
    106e:	ff 92       	push	r15
    1070:	0f 93       	push	r16
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	00 d0       	rcall	.+0      	; 0x107a <Si114xParamSet+0x12>
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	8c 01       	movw	r16, r24
    1080:	d6 2e       	mov	r13, r22
    1082:	c4 2e       	mov	r12, r20
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1084:	60 e3       	ldi	r22, 0x30	; 48
    1086:	c8 01       	movw	r24, r16
    1088:	c2 d2       	rcall	.+1412   	; 0x160e <Si114xReadFromRegister>
        if (retval == 1) break;
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	91 05       	cpc	r25, r1
    108e:	79 f0       	breq	.+30     	; 0x10ae <Si114xParamSet+0x46>
        if (retval <  0) return retval;
    1090:	99 23       	and	r25, r25
    1092:	c4 f7       	brge	.-16     	; 0x1084 <Si114xParamSet+0x1c>
    1094:	1e c0       	rjmp	.+60     	; 0x10d2 <Si114xParamSet+0x6a>

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    if (retval != 0) return retval;

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    1096:	60 e2       	ldi	r22, 0x20	; 32
    1098:	c8 01       	movw	r24, r16
    109a:	b9 d2       	rcall	.+1394   	; 0x160e <Si114xReadFromRegister>
    109c:	8e 15       	cp	r24, r14
    109e:	9f 05       	cpc	r25, r15
    10a0:	d1 f3       	breq	.-12     	; 0x1096 <Si114xParamSet+0x2e>
    10a2:	18 16       	cp	r1, r24
    10a4:	19 06       	cpc	r1, r25
    10a6:	ac f4       	brge	.+42     	; 0x10d2 <Si114xParamSet+0x6a>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	12 c0       	rjmp	.+36     	; 0x10d2 <Si114xParamSet+0x6a>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    10ae:	60 e2       	ldi	r22, 0x20	; 32
    10b0:	c8 01       	movw	r24, r16
    10b2:	ad d2       	rcall	.+1370   	; 0x160e <Si114xReadFromRegister>
    10b4:	7c 01       	movw	r14, r24

    buffer[0]= value;
    10b6:	c9 82       	std	Y+1, r12	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    10b8:	8d 2d       	mov	r24, r13
    10ba:	8f 71       	andi	r24, 0x1F	; 31
    10bc:	80 56       	subi	r24, 0x60	; 96
    10be:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    10c0:	9e 01       	movw	r18, r28
    10c2:	2f 5f       	subi	r18, 0xFF	; 255
    10c4:	3f 4f       	sbci	r19, 0xFF	; 255
    10c6:	42 e0       	ldi	r20, 0x02	; 2
    10c8:	67 e1       	ldi	r22, 0x17	; 23
    10ca:	c8 01       	movw	r24, r16
    10cc:	a4 d2       	rcall	.+1352   	; 0x1616 <Si114xBlockWrite>
    if (retval != 0) return retval;
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	11 f3       	breq	.-60     	; 0x1096 <Si114xParamSet+0x2e>

    if(retval < 0)
        return retval;
    else
        return 0;
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	08 95       	ret

000010e8 <Si114xPauseAll>:
{
    return _sendCmd(si114x_handle,0x0B);
}

s16 Si114xPauseAll(HANDLE si114x_handle)
{
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	ec 01       	movw	r28, r24
    while (1) 
    {
        // Keep sending nops until the response is zero
        while (1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    10ee:	60 e2       	ldi	r22, 0x20	; 32
    10f0:	ce 01       	movw	r24, r28
    10f2:	8d d2       	rcall	.+1306   	; 0x160e <Si114xReadFromRegister>
    10f4:	89 2b       	or	r24, r25
    10f6:	19 f0       	breq	.+6      	; 0x10fe <Si114xPauseAll+0x16>
                break;
            else 
                Si114xNop(si114x_handle);
    10f8:	ce 01       	movw	r24, r28
    10fa:	b0 df       	rcall	.-160    	; 0x105c <Si114xNop>
        }
    10fc:	f8 cf       	rjmp	.-16     	; 0x10ee <Si114xPauseAll+0x6>

//-----------------------------------------------------------------------------
// use this to pause measurements
static s16 _PsAlsPause (HANDLE si114x_handle) 
{
    return _sendCmd(si114x_handle,0x0B);
    10fe:	6b e0       	ldi	r22, 0x0B	; 11
    1100:	ce 01       	movw	r24, r28
    1102:	54 df       	rcall	.-344    	; 0xfac <_sendCmd>
        _PsAlsPause(si114x_handle);

        // Wait for response
        while(1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    1104:	60 e2       	ldi	r22, 0x20	; 32
    1106:	ce 01       	movw	r24, r28
    1108:	82 d2       	rcall	.+1284   	; 0x160e <Si114xReadFromRegister>
    110a:	89 2b       	or	r24, r25
    110c:	d9 f3       	breq	.-10     	; 0x1104 <Si114xPauseAll+0x1c>
                break;
        }

        // When the PsAlsPause() response is good, we expect it to be a '1'.
        if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
    110e:	60 e2       	ldi	r22, 0x20	; 32
    1110:	ce 01       	movw	r24, r28
    1112:	7d d2       	rcall	.+1274   	; 0x160e <Si114xReadFromRegister>
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	59 f7       	brne	.-42     	; 0x10ee <Si114xPauseAll+0x6>
            break;  // otherwise, start over.
    }
    return 0;
}
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	08 95       	ret

00001122 <Si114xReset>:
    return 0;
}


s16 Si114xReset(HANDLE si114x_handle)
{
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	ec 01       	movw	r28, r24
    //
    // delay_10ms();
    // delay_10ms();
    // delay_10ms();

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	68 e0       	ldi	r22, 0x08	; 8
    1130:	6a d2       	rcall	.+1236   	; 0x1606 <Si114xWriteToRegister>
    1132:	8c 01       	movw	r16, r24
    retval+=Si114xPauseAll(si114x_handle);
    1134:	ce 01       	movw	r24, r28
    1136:	d8 df       	rcall	.-80     	; 0x10e8 <Si114xPauseAll>
    1138:	08 0f       	add	r16, r24
    113a:	19 1f       	adc	r17, r25

    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	68 e0       	ldi	r22, 0x08	; 8
    1140:	ce 01       	movw	r24, r28
    1142:	61 d2       	rcall	.+1218   	; 0x1606 <Si114xWriteToRegister>
    1144:	08 0f       	add	r16, r24
    1146:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    1148:	40 e0       	ldi	r20, 0x00	; 0
    114a:	64 e0       	ldi	r22, 0x04	; 4
    114c:	ce 01       	movw	r24, r28
    114e:	5b d2       	rcall	.+1206   	; 0x1606 <Si114xWriteToRegister>
    1150:	08 0f       	add	r16, r24
    1152:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	65 e0       	ldi	r22, 0x05	; 5
    1158:	ce 01       	movw	r24, r28
    115a:	55 d2       	rcall	.+1194   	; 0x1606 <Si114xWriteToRegister>
    115c:	08 0f       	add	r16, r24
    115e:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    1160:	40 e0       	ldi	r20, 0x00	; 0
    1162:	66 e0       	ldi	r22, 0x06	; 6
    1164:	ce 01       	movw	r24, r28
    1166:	4f d2       	rcall	.+1182   	; 0x1606 <Si114xWriteToRegister>
    1168:	08 0f       	add	r16, r24
    116a:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    116c:	40 e0       	ldi	r20, 0x00	; 0
    116e:	63 e0       	ldi	r22, 0x03	; 3
    1170:	ce 01       	movw	r24, r28
    1172:	49 d2       	rcall	.+1170   	; 0x1606 <Si114xWriteToRegister>
    1174:	08 0f       	add	r16, r24
    1176:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
    1178:	4f ef       	ldi	r20, 0xFF	; 255
    117a:	61 e2       	ldi	r22, 0x21	; 33
    117c:	ce 01       	movw	r24, r28
    117e:	43 d2       	rcall	.+1158   	; 0x1606 <Si114xWriteToRegister>
    1180:	08 0f       	add	r16, r24
    1182:	19 1f       	adc	r17, r25

    // Perform the Reset Command
    retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
    1184:	41 e0       	ldi	r20, 0x01	; 1
    1186:	68 e1       	ldi	r22, 0x18	; 24
    1188:	ce 01       	movw	r24, r28
    118a:	3d d2       	rcall	.+1146   	; 0x1606 <Si114xWriteToRegister>
    118c:	08 0f       	add	r16, r24
    118e:	19 1f       	adc	r17, r25

    // Delay for 10 ms. This delay is needed to allow the Si114x
    // to perform internal reset sequence. 
    delay_10ms();
    1190:	49 d2       	rcall	.+1170   	; 0x1624 <delay_10ms>

    // Write Hardware Key
    retval+=Si114xWriteToRegister(si114x_handle, REG_HW_KEY, HW_KEY_VAL0);
    1192:	47 e1       	ldi	r20, 0x17	; 23
    1194:	67 e0       	ldi	r22, 0x07	; 7
    1196:	ce 01       	movw	r24, r28
    1198:	36 d2       	rcall	.+1132   	; 0x1606 <Si114xWriteToRegister>

    return retval;
}
    119a:	80 0f       	add	r24, r16
    119c:	91 1f       	adc	r25, r17
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	08 95       	ret

000011a8 <isIRStable>:
                                        //
    u32 xdata IR = (u32) samples->ir; // Make a copy of ALS IR Reading
    
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 
    11a8:	20 91 8b 21 	lds	r18, 0x218B
    11ac:	30 91 8c 21 	lds	r19, 0x218C
    11b0:	23 2b       	or	r18, r19
    11b2:	41 f4       	brne	.+16     	; 0x11c4 <isIRStable+0x1c>
    11b4:	fc 01       	movw	r30, r24
    11b6:	20 85       	ldd	r18, Z+8	; 0x08
    11b8:	31 85       	ldd	r19, Z+9	; 0x09
    11ba:	20 93 8b 21 	sts	0x218B, r18
    11be:	30 93 8c 21 	sts	0x218C, r19
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <isIRStable+0x28>

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    11c4:	fc 01       	movw	r30, r24
    11c6:	20 85       	ldd	r18, Z+8	; 0x08
    11c8:	31 85       	ldd	r19, Z+9	; 0x09
    11ca:	21 38       	cpi	r18, 0x81	; 129
    11cc:	3b 4b       	sbci	r19, 0xBB	; 187
    11ce:	68 f5       	brcc	.+90     	; 0x122a <isIRStable+0x82>

    if( samples->ir < (IRlast + IRlast/2) && samples->ir > (IRlast - IRlast/2))
    11d0:	fc 01       	movw	r30, r24
    11d2:	20 85       	ldd	r18, Z+8	; 0x08
    11d4:	31 85       	ldd	r19, Z+9	; 0x09
    11d6:	80 91 8b 21 	lds	r24, 0x218B
    11da:	90 91 8c 21 	lds	r25, 0x218C
    11de:	ac 01       	movw	r20, r24
    11e0:	56 95       	lsr	r21
    11e2:	47 95       	ror	r20
    11e4:	ba 01       	movw	r22, r20
    11e6:	68 0f       	add	r22, r24
    11e8:	79 1f       	adc	r23, r25
    11ea:	26 17       	cp	r18, r22
    11ec:	37 07       	cpc	r19, r23
    11ee:	b8 f4       	brcc	.+46     	; 0x121e <isIRStable+0x76>
    11f0:	bc 01       	movw	r22, r24
    11f2:	64 1b       	sub	r22, r20
    11f4:	75 0b       	sbc	r23, r21
    11f6:	62 17       	cp	r22, r18
    11f8:	73 07       	cpc	r23, r19
    11fa:	88 f4       	brcc	.+34     	; 0x121e <isIRStable+0x76>
    {
        // If IR is within 3 dB, declare it stable
        // and perform some averaging
        IRlast = (samples->ir + (IRlast*3)) / 4;
    11fc:	ac 01       	movw	r20, r24
    11fe:	44 0f       	add	r20, r20
    1200:	55 1f       	adc	r21, r21
    1202:	84 0f       	add	r24, r20
    1204:	95 1f       	adc	r25, r21
    1206:	28 0f       	add	r18, r24
    1208:	39 1f       	adc	r19, r25
    120a:	36 95       	lsr	r19
    120c:	27 95       	ror	r18
    120e:	36 95       	lsr	r19
    1210:	27 95       	ror	r18
    1212:	20 93 8b 21 	sts	0x218B, r18
    1216:	30 93 8c 21 	sts	0x218C, r19
        return 1;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	08 95       	ret
    }
    else
    {
        // Otherwise, return false and update
        // new IRlast value for next time
        IRlast = samples->ir;
    121e:	20 93 8b 21 	sts	0x218B, r18
    1222:	30 93 8c 21 	sts	0x218C, r19
        return 0;
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	08 95       	ret
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    122a:	80 e0       	ldi	r24, 0x00	; 0
        // new IRlast value for next time
        IRlast = samples->ir;
        return 0;
    }
    return 0;
}
    122c:	08 95       	ret

0000122e <IRCompensation>:
//             use { 11, 33, 33 }
//          Sm PD, PSRANGE = 1 
//             use { 23, 64, 56 }
////////////////////////////////////////////////////////////////////////////////
void IRCompensation(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u8 ircorrection[])
{
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	fb 01       	movw	r30, r22
    // Calculate correction factor based on the ALS IR + PS reading 
    // subtracting out the 256 count offset contained in both measurements
    // Full equation comes out to:
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    1234:	88 23       	and	r24, r24
    1236:	19 f0       	breq	.+6      	; 0x123e <IRCompensation+0x10>
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	19 f1       	breq	.+70     	; 0x1282 <IRCompensation+0x54>
    123c:	44 c0       	rjmp	.+136    	; 0x12c6 <IRCompensation+0x98>
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    123e:	c2 85       	ldd	r28, Z+10	; 0x0a
    1240:	d3 85       	ldd	r29, Z+11	; 0x0b
    1242:	da 01       	movw	r26, r20
    1244:	4c 91       	ld	r20, X
    1246:	80 85       	ldd	r24, Z+8	; 0x08
    1248:	91 85       	ldd	r25, Z+9	; 0x09
    124a:	8c 0f       	add	r24, r28
    124c:	9d 1f       	adc	r25, r29
    124e:	92 50       	subi	r25, 0x02	; 2
    1250:	48 9f       	mul	r20, r24
    1252:	90 01       	movw	r18, r0
    1254:	49 9f       	mul	r20, r25
    1256:	30 0d       	add	r19, r0
    1258:	11 24       	eor	r1, r1
            Correction = Correction/10000;
    125a:	32 95       	swap	r19
    125c:	22 95       	swap	r18
    125e:	2f 70       	andi	r18, 0x0F	; 15
    1260:	23 27       	eor	r18, r19
    1262:	3f 70       	andi	r19, 0x0F	; 15
    1264:	23 27       	eor	r18, r19
    1266:	a7 e4       	ldi	r26, 0x47	; 71
    1268:	b3 e0       	ldi	r27, 0x03	; 3
    126a:	c7 d5       	rcall	.+2958   	; 0x1dfa <__umulhisi3>
    126c:	96 95       	lsr	r25
    126e:	87 95       	ror	r24
    1270:	96 95       	lsr	r25
    1272:	87 95       	ror	r24
    1274:	96 95       	lsr	r25
    1276:	87 95       	ror	r24
            samples->ps1 = samples->ps1 + Correction;    
    1278:	c8 0f       	add	r28, r24
    127a:	d9 1f       	adc	r29, r25
    127c:	c2 87       	std	Z+10, r28	; 0x0a
    127e:	d3 87       	std	Z+11, r29	; 0x0b
            break;
    1280:	22 c0       	rjmp	.+68     	; 0x12c6 <IRCompensation+0x98>
        case 1:
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
    1282:	c4 85       	ldd	r28, Z+12	; 0x0c
    1284:	d5 85       	ldd	r29, Z+13	; 0x0d
    1286:	da 01       	movw	r26, r20
    1288:	11 96       	adiw	r26, 0x01	; 1
    128a:	4c 91       	ld	r20, X
    128c:	80 85       	ldd	r24, Z+8	; 0x08
    128e:	91 85       	ldd	r25, Z+9	; 0x09
    1290:	8c 0f       	add	r24, r28
    1292:	9d 1f       	adc	r25, r29
    1294:	92 50       	subi	r25, 0x02	; 2
    1296:	48 9f       	mul	r20, r24
    1298:	90 01       	movw	r18, r0
    129a:	49 9f       	mul	r20, r25
    129c:	30 0d       	add	r19, r0
    129e:	11 24       	eor	r1, r1
            Correction = Correction/10000;
    12a0:	32 95       	swap	r19
    12a2:	22 95       	swap	r18
    12a4:	2f 70       	andi	r18, 0x0F	; 15
    12a6:	23 27       	eor	r18, r19
    12a8:	3f 70       	andi	r19, 0x0F	; 15
    12aa:	23 27       	eor	r18, r19
    12ac:	a7 e4       	ldi	r26, 0x47	; 71
    12ae:	b3 e0       	ldi	r27, 0x03	; 3
    12b0:	a4 d5       	rcall	.+2888   	; 0x1dfa <__umulhisi3>
    12b2:	96 95       	lsr	r25
    12b4:	87 95       	ror	r24
    12b6:	96 95       	lsr	r25
    12b8:	87 95       	ror	r24
    12ba:	96 95       	lsr	r25
    12bc:	87 95       	ror	r24
            samples->ps2 = samples->ps2 + Correction;            
    12be:	c8 0f       	add	r28, r24
    12c0:	d9 1f       	adc	r29, r25
    12c2:	c4 87       	std	Z+12, r28	; 0x0c
    12c4:	d5 87       	std	Z+13, r29	; 0x0d
            break;
        default:
            break;
    }
}
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <calcBaseline>:
//          50  = Lg PD, PSRANGE=0, 180 mA 
//          10  = Lg PD, PSRANGE=1, 360 mA 
//          4  = Sm PD, PSRANGE=1, 360 mA 
////////////////////////////////////////////////////////////////////////////////
void calcBaseline(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u16 noise_margin)
{
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29

    static u16 xdata dynamic_baseline[2] = {0,0};//,0};

    u16 xdata *pPS;

    switch(proxChannel)
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	39 f0       	breq	.+14     	; 0x12e2 <calcBaseline+0x16>
    12d4:	18 f0       	brcs	.+6      	; 0x12dc <calcBaseline+0x10>
    12d6:	82 30       	cpi	r24, 0x02	; 2
    12d8:	39 f0       	breq	.+14     	; 0x12e8 <calcBaseline+0x1c>
    12da:	09 c0       	rjmp	.+18     	; 0x12ee <calcBaseline+0x22>
    {
        case 0:
            pPS = &samples->ps1;
    12dc:	fb 01       	movw	r30, r22
    12de:	3a 96       	adiw	r30, 0x0a	; 10
            break;
    12e0:	1b c0       	rjmp	.+54     	; 0x1318 <calcBaseline+0x4c>
        case 1:
            pPS = &samples->ps2;
    12e2:	fb 01       	movw	r30, r22
    12e4:	3c 96       	adiw	r30, 0x0c	; 12
            break;
    12e6:	18 c0       	rjmp	.+48     	; 0x1318 <calcBaseline+0x4c>
        case 2:
            pPS = &samples->ps3;
    12e8:	fb 01       	movw	r30, r22
    12ea:	3e 96       	adiw	r30, 0x0e	; 14
            break;
    12ec:	15 c0       	rjmp	.+42     	; 0x1318 <calcBaseline+0x4c>
        default:
            // Invalid Prox Channel. Reset all static variables 
            // to initial values
            average    = 0;
            dynamic_baseline[0] = 0;
    12ee:	10 92 87 21 	sts	0x2187, r1
    12f2:	10 92 88 21 	sts	0x2188, r1
            dynamic_baseline[1] = 0;
    12f6:	10 92 89 21 	sts	0x2189, r1
    12fa:	10 92 8a 21 	sts	0x218A, r1
            rollingMax[0] = 0;
    12fe:	10 92 83 21 	sts	0x2183, r1
    1302:	10 92 84 21 	sts	0x2184, r1
            rollingMax[1] = 0;
    1306:	10 92 85 21 	sts	0x2185, r1
    130a:	10 92 86 21 	sts	0x2186, r1
            Maxcount[0]   = 0;
    130e:	10 92 81 21 	sts	0x2181, r1
            Maxcount[1]   = 0;
    1312:	10 92 82 21 	sts	0x2182, r1
            return;
    1316:	be c0       	rjmp	.+380    	; 0x1494 <calcBaseline+0x1c8>
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	dc 01       	movw	r26, r24
    131c:	aa 0f       	add	r26, r26
    131e:	bb 1f       	adc	r27, r27
    1320:	a9 57       	subi	r26, 0x79	; 121
    1322:	be 4d       	sbci	r27, 0xDE	; 222
    1324:	2d 91       	ld	r18, X+
    1326:	3c 91       	ld	r19, X
    1328:	23 2b       	or	r18, r19
    132a:	d9 f4       	brne	.+54     	; 0x1362 <calcBaseline+0x96>
    132c:	60 81       	ld	r22, Z
    132e:	71 81       	ldd	r23, Z+1	; 0x01
    1330:	dc 01       	movw	r26, r24
    1332:	aa 0f       	add	r26, r26
    1334:	bb 1f       	adc	r27, r27
    1336:	a3 57       	subi	r26, 0x73	; 115
    1338:	be 4d       	sbci	r27, 0xDE	; 222
    133a:	2d 91       	ld	r18, X+
    133c:	3c 91       	ld	r19, X
    133e:	62 17       	cp	r22, r18
    1340:	73 07       	cpc	r23, r19
    1342:	40 f4       	brcc	.+16     	; 0x1354 <calcBaseline+0x88>
    {
       dynamic_baseline[proxChannel] = *pPS;
    1344:	dc 01       	movw	r26, r24
    1346:	aa 0f       	add	r26, r26
    1348:	bb 1f       	adc	r27, r27
    134a:	a9 57       	subi	r26, 0x79	; 121
    134c:	be 4d       	sbci	r27, 0xDE	; 222
    134e:	6d 93       	st	X+, r22
    1350:	7c 93       	st	X, r23
    1352:	07 c0       	rjmp	.+14     	; 0x1362 <calcBaseline+0x96>
    } else if ( dynamic_baseline[proxChannel] == 0)
    {
       dynamic_baseline[proxChannel] = maxLeakage[proxChannel];
    1354:	dc 01       	movw	r26, r24
    1356:	aa 0f       	add	r26, r26
    1358:	bb 1f       	adc	r27, r27
    135a:	a9 57       	subi	r26, 0x79	; 121
    135c:	be 4d       	sbci	r27, 0xDE	; 222
    135e:	2d 93       	st	X+, r18
    1360:	3c 93       	st	X, r19
    } 

    // Only process samples which are below the maxLeakage values, anything 
    // higher is a signal created by an object in front of the system which 
    // should not be baselined
    if ( *pPS < maxLeakage[proxChannel] )
    1362:	20 81       	ld	r18, Z
    1364:	31 81       	ldd	r19, Z+1	; 0x01
    1366:	fc 01       	movw	r30, r24
    1368:	ee 0f       	add	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	e3 57       	subi	r30, 0x73	; 115
    136e:	fe 4d       	sbci	r31, 0xDE	; 222
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	26 17       	cp	r18, r22
    1376:	37 07       	cpc	r19, r23
    1378:	08 f0       	brcs	.+2      	; 0x137c <calcBaseline+0xb0>
    137a:	6a c0       	rjmp	.+212    	; 0x1450 <calcBaseline+0x184>
    {
        average = dynamic_baseline[proxChannel]*7;
    137c:	fc 01       	movw	r30, r24
    137e:	ee 0f       	add	r30, r30
    1380:	ff 1f       	adc	r31, r31
    1382:	e9 57       	subi	r30, 0x79	; 121
    1384:	fe 4d       	sbci	r31, 0xDE	; 222
    1386:	60 81       	ld	r22, Z
    1388:	71 81       	ldd	r23, Z+1	; 0x01
    138a:	db 01       	movw	r26, r22
    138c:	aa 0f       	add	r26, r26
    138e:	bb 1f       	adc	r27, r27
    1390:	aa 0f       	add	r26, r26
    1392:	bb 1f       	adc	r27, r27
    1394:	aa 0f       	add	r26, r26
    1396:	bb 1f       	adc	r27, r27
    1398:	a6 1b       	sub	r26, r22
    139a:	b7 0b       	sbc	r27, r23
        average = average + (u32)(*pPS);
    139c:	a2 0f       	add	r26, r18
    139e:	b3 1f       	adc	r27, r19
        average = average/8;
    13a0:	fd 01       	movw	r30, r26
    13a2:	f6 95       	lsr	r31
    13a4:	e7 95       	ror	r30
    13a6:	f6 95       	lsr	r31
    13a8:	e7 95       	ror	r30
    13aa:	f6 95       	lsr	r31
    13ac:	e7 95       	ror	r30
        // If the new sample has not changed the baseline average by a large 
        // amount, then allow the rollingMax variable to update. If the new 
        // sample did move the baseline average by a lot, then it's possible 
        // it was created by a proximity event. So, do not consider this part 
        // of the rollingMax
        if ( dynamic_baseline[proxChannel] <= (u16)average + (u16)average/64
    13ae:	ab 2f       	mov	r26, r27
    13b0:	bb 27       	eor	r27, r27
    13b2:	a6 95       	lsr	r26
    13b4:	ed 01       	movw	r28, r26
    13b6:	ce 0f       	add	r28, r30
    13b8:	df 1f       	adc	r29, r31
    13ba:	c6 17       	cp	r28, r22
    13bc:	d7 07       	cpc	r29, r23
    13be:	08 f4       	brcc	.+2      	; 0x13c2 <calcBaseline+0xf6>
    13c0:	40 c0       	rjmp	.+128    	; 0x1442 <calcBaseline+0x176>
            && dynamic_baseline[proxChannel] >= (u16)average - (u16)average/64)
    13c2:	ef 01       	movw	r28, r30
    13c4:	ca 1b       	sub	r28, r26
    13c6:	db 0b       	sbc	r29, r27
    13c8:	6c 17       	cp	r22, r28
    13ca:	7d 07       	cpc	r23, r29
    13cc:	d0 f1       	brcs	.+116    	; 0x1442 <calcBaseline+0x176>
        {
            if ( rollingMax[proxChannel] == 0 )
    13ce:	dc 01       	movw	r26, r24
    13d0:	aa 0f       	add	r26, r26
    13d2:	bb 1f       	adc	r27, r27
    13d4:	ad 57       	subi	r26, 0x7D	; 125
    13d6:	be 4d       	sbci	r27, 0xDE	; 222
    13d8:	6d 91       	ld	r22, X+
    13da:	7c 91       	ld	r23, X
    13dc:	61 15       	cp	r22, r1
    13de:	71 05       	cpc	r23, r1
    13e0:	61 f4       	brne	.+24     	; 0x13fa <calcBaseline+0x12e>
            {
                rollingMax[proxChannel] = *pPS;
    13e2:	dc 01       	movw	r26, r24
    13e4:	aa 0f       	add	r26, r26
    13e6:	bb 1f       	adc	r27, r27
    13e8:	ad 57       	subi	r26, 0x7D	; 125
    13ea:	be 4d       	sbci	r27, 0xDE	; 222
    13ec:	2d 93       	st	X+, r18
    13ee:	3c 93       	st	X, r19
                Maxcount[proxChannel] = 0;
    13f0:	dc 01       	movw	r26, r24
    13f2:	af 57       	subi	r26, 0x7F	; 127
    13f4:	be 4d       	sbci	r27, 0xDE	; 222
    13f6:	1c 92       	st	X, r1
    13f8:	24 c0       	rjmp	.+72     	; 0x1442 <calcBaseline+0x176>
            } 
            else if ( rollingMax[proxChannel] >= *pPS )
    13fa:	62 17       	cp	r22, r18
    13fc:	73 07       	cpc	r23, r19
    13fe:	b0 f0       	brcs	.+44     	; 0x142c <calcBaseline+0x160>
            {
                (Maxcount[proxChannel]) += 1;
    1400:	dc 01       	movw	r26, r24
    1402:	af 57       	subi	r26, 0x7F	; 127
    1404:	be 4d       	sbci	r27, 0xDE	; 222
    1406:	2c 91       	ld	r18, X
    1408:	2f 5f       	subi	r18, 0xFF	; 255
    140a:	2c 93       	st	X, r18
                if ( Maxcount[proxChannel] > 64 )
    140c:	21 34       	cpi	r18, 0x41	; 65
    140e:	c8 f0       	brcs	.+50     	; 0x1442 <calcBaseline+0x176>
                {
                    (rollingMax[proxChannel]) -= 1;
    1410:	dc 01       	movw	r26, r24
    1412:	aa 0f       	add	r26, r26
    1414:	bb 1f       	adc	r27, r27
    1416:	ad 57       	subi	r26, 0x7D	; 125
    1418:	be 4d       	sbci	r27, 0xDE	; 222
    141a:	61 50       	subi	r22, 0x01	; 1
    141c:	71 09       	sbc	r23, r1
    141e:	6d 93       	st	X+, r22
    1420:	7c 93       	st	X, r23
                    Maxcount[proxChannel] = 0;
    1422:	dc 01       	movw	r26, r24
    1424:	af 57       	subi	r26, 0x7F	; 127
    1426:	be 4d       	sbci	r27, 0xDE	; 222
    1428:	1c 92       	st	X, r1
    142a:	0b c0       	rjmp	.+22     	; 0x1442 <calcBaseline+0x176>
                }
            } 
            else
            {
                rollingMax[proxChannel] = *pPS;
    142c:	dc 01       	movw	r26, r24
    142e:	aa 0f       	add	r26, r26
    1430:	bb 1f       	adc	r27, r27
    1432:	ad 57       	subi	r26, 0x7D	; 125
    1434:	be 4d       	sbci	r27, 0xDE	; 222
    1436:	2d 93       	st	X+, r18
    1438:	3c 93       	st	X, r19
                Maxcount[proxChannel] = 0;
    143a:	dc 01       	movw	r26, r24
    143c:	af 57       	subi	r26, 0x7F	; 127
    143e:	be 4d       	sbci	r27, 0xDE	; 222
    1440:	1c 92       	st	X, r1
            }
        }

        // Update the stored baseline average with the new value
        dynamic_baseline[proxChannel] = (u16)average;
    1442:	dc 01       	movw	r26, r24
    1444:	aa 0f       	add	r26, r26
    1446:	bb 1f       	adc	r27, r27
    1448:	a9 57       	subi	r26, 0x79	; 121
    144a:	be 4d       	sbci	r27, 0xDE	; 222
    144c:	ed 93       	st	X+, r30
    144e:	fc 93       	st	X, r31
    }

    // Use the rollingMax value to determine the baseline level
    if ( rollingMax[proxChannel] != 0 )
    1450:	fc 01       	movw	r30, r24
    1452:	ee 0f       	add	r30, r30
    1454:	ff 1f       	adc	r31, r31
    1456:	ed 57       	subi	r30, 0x7D	; 125
    1458:	fe 4d       	sbci	r31, 0xDE	; 222
    145a:	20 81       	ld	r18, Z
    145c:	31 81       	ldd	r19, Z+1	; 0x01
    145e:	21 15       	cp	r18, r1
    1460:	31 05       	cpc	r19, r1
    1462:	51 f0       	breq	.+20     	; 0x1478 <calcBaseline+0x1ac>
    {
        baseline[proxChannel] = rollingMax[proxChannel] + noise_margin;
    1464:	fc 01       	movw	r30, r24
    1466:	ee 0f       	add	r30, r30
    1468:	ff 1f       	adc	r31, r31
    146a:	e2 51       	subi	r30, 0x12	; 18
    146c:	fc 4d       	sbci	r31, 0xDC	; 220
    146e:	24 0f       	add	r18, r20
    1470:	35 1f       	adc	r19, r21
    1472:	20 83       	st	Z, r18
    1474:	31 83       	std	Z+1, r19	; 0x01
    1476:	0e c0       	rjmp	.+28     	; 0x1494 <calcBaseline+0x1c8>
    } 
    else
    {  // If the rollingMax has not been determined yet, use the average
        baseline[proxChannel] = (u16) dynamic_baseline[proxChannel] + noise_margin;
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	fc 01       	movw	r30, r24
    147e:	e2 51       	subi	r30, 0x12	; 18
    1480:	fc 4d       	sbci	r31, 0xDC	; 220
    1482:	dc 01       	movw	r26, r24
    1484:	a9 57       	subi	r26, 0x79	; 121
    1486:	be 4d       	sbci	r27, 0xDE	; 222
    1488:	2d 91       	ld	r18, X+
    148a:	3c 91       	ld	r19, X
    148c:	42 0f       	add	r20, r18
    148e:	53 1f       	adc	r21, r19
    1490:	40 83       	st	Z, r20
    1492:	51 83       	std	Z+1, r21	; 0x01
    }
}
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <ProcessSi114xSamples>:
u16 code scale           =  1;
u8  code ircorrection[3] =  { 17, 35, 29 };
#endif

void ProcessSi114xSamples(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples)
{
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	8c 01       	movw	r16, r24
    14a4:	eb 01       	movw	r28, r22
    if ((maxLeakage[0]==0)&&(maxLeakage[1]==0)&&(initial_baseline_counter==128))
    14a6:	20 91 8d 21 	lds	r18, 0x218D
    14aa:	30 91 8e 21 	lds	r19, 0x218E
    14ae:	23 2b       	or	r18, r19
    14b0:	91 f4       	brne	.+36     	; 0x14d6 <ProcessSi114xSamples+0x3c>
    14b2:	80 91 8f 21 	lds	r24, 0x218F
    14b6:	90 91 90 21 	lds	r25, 0x2190
    14ba:	89 2b       	or	r24, r25
    14bc:	61 f4       	brne	.+24     	; 0x14d6 <ProcessSi114xSamples+0x3c>
    14be:	80 91 19 20 	lds	r24, 0x2019
    14c2:	80 38       	cpi	r24, 0x80	; 128
    14c4:	41 f4       	brne	.+16     	; 0x14d6 <ProcessSi114xSamples+0x3c>
    {
        printf("Computing Baseline. Make sure nothing is in the vicinity of the EVB\n");
    14c6:	8d e6       	ldi	r24, 0x6D	; 109
    14c8:	90 e2       	ldi	r25, 0x20	; 32
    14ca:	b7 d4       	rcall	.+2414   	; 0x1e3a <puts>
        PortSet(1,0); // Turn on all lights to indicate baseline is being computed
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	97 d0       	rcall	.+302    	; 0x1604 <PortSet>
    }

    if (initial_baseline_counter != 0)
    14d6:	80 91 19 20 	lds	r24, 0x2019
    14da:	88 23       	and	r24, r24
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <ProcessSi114xSamples+0x46>
    14de:	5c c0       	rjmp	.+184    	; 0x1598 <ProcessSi114xSamples+0xfe>
    {
        // The first 128 samples are used to establish the initial 
        // baseline
        if ( initial_baseline_counter > 1 )
    14e0:	82 30       	cpi	r24, 0x02	; 2
    14e2:	e0 f0       	brcs	.+56     	; 0x151c <ProcessSi114xSamples+0x82>
        {
            // Look for maximum
            if( maxLeakage[0] < samples->ps1) maxLeakage[0] = samples->ps1;
    14e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    14e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    14e8:	20 91 8d 21 	lds	r18, 0x218D
    14ec:	30 91 8e 21 	lds	r19, 0x218E
    14f0:	28 17       	cp	r18, r24
    14f2:	39 07       	cpc	r19, r25
    14f4:	20 f4       	brcc	.+8      	; 0x14fe <ProcessSi114xSamples+0x64>
    14f6:	80 93 8d 21 	sts	0x218D, r24
    14fa:	90 93 8e 21 	sts	0x218E, r25
            if( maxLeakage[1] < samples->ps2) maxLeakage[1] = samples->ps2;
    14fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1500:	9d 85       	ldd	r25, Y+13	; 0x0d
    1502:	20 91 8f 21 	lds	r18, 0x218F
    1506:	30 91 90 21 	lds	r19, 0x2190
    150a:	28 17       	cp	r18, r24
    150c:	39 07       	cpc	r19, r25
    150e:	08 f0       	brcs	.+2      	; 0x1512 <ProcessSi114xSamples+0x78>
    1510:	3d c0       	rjmp	.+122    	; 0x158c <ProcessSi114xSamples+0xf2>
    1512:	80 93 8f 21 	sts	0x218F, r24
    1516:	90 93 90 21 	sts	0x2190, r25
    151a:	38 c0       	rjmp	.+112    	; 0x158c <ProcessSi114xSamples+0xf2>
        }
        else
        {
            printf("Initial Baseline Calculated, PS1 = %d, PS2 = %d \n", maxLeakage[0], maxLeakage[1]);
    151c:	cf e8       	ldi	r28, 0x8F	; 143
    151e:	d1 e2       	ldi	r29, 0x21	; 33
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	8f 93       	push	r24
    1524:	88 81       	ld	r24, Y
    1526:	8f 93       	push	r24
    1528:	0d e8       	ldi	r16, 0x8D	; 141
    152a:	11 e2       	ldi	r17, 0x21	; 33
    152c:	f8 01       	movw	r30, r16
    152e:	81 81       	ldd	r24, Z+1	; 0x01
    1530:	8f 93       	push	r24
    1532:	80 81       	ld	r24, Z
    1534:	8f 93       	push	r24
    1536:	81 eb       	ldi	r24, 0xB1	; 177
    1538:	90 e2       	ldi	r25, 0x20	; 32
    153a:	9f 93       	push	r25
    153c:	8f 93       	push	r24
    153e:	6c d4       	rcall	.+2264   	; 0x1e18 <printf>
            PortSet(1,0xff); // Turn off all leds to indicate baseline computation is completed
    1540:	6f ef       	ldi	r22, 0xFF	; 255
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	5d d0       	rcall	.+186    	; 0x1604 <PortSet>
            // Set Max Leakage 
            maxLeakage[0] = maxLeakage[0] + noise_margin*2;
    154a:	80 91 17 20 	lds	r24, 0x2017
    154e:	90 91 18 20 	lds	r25, 0x2018
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	f8 01       	movw	r30, r16
    1558:	20 81       	ld	r18, Z
    155a:	31 81       	ldd	r19, Z+1	; 0x01
    155c:	28 0f       	add	r18, r24
    155e:	39 1f       	adc	r19, r25
    1560:	20 83       	st	Z, r18
    1562:	31 83       	std	Z+1, r19	; 0x01
            maxLeakage[1] = maxLeakage[1] + noise_margin*2;
    1564:	48 81       	ld	r20, Y
    1566:	59 81       	ldd	r21, Y+1	; 0x01
    1568:	84 0f       	add	r24, r20
    156a:	95 1f       	adc	r25, r21
    156c:	88 83       	st	Y, r24
    156e:	99 83       	std	Y+1, r25	; 0x01

            baseline[0] = maxLeakage[0];
    1570:	20 93 ee 23 	sts	0x23EE, r18
    1574:	30 93 ef 23 	sts	0x23EF, r19
            baseline[1] = maxLeakage[1];
    1578:	80 93 f0 23 	sts	0x23F0, r24
    157c:	90 93 f1 23 	sts	0x23F1, r25
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
        }
        
        // Decrement counter
        initial_baseline_counter--;
    158c:	80 91 19 20 	lds	r24, 0x2019
    1590:	81 50       	subi	r24, 0x01	; 1
    1592:	80 93 19 20 	sts	0x2019, r24
    1596:	31 c0       	rjmp	.+98     	; 0x15fa <ProcessSi114xSamples+0x160>
    else
    {
        //
        // Once the baseline has been set, do the actual loop
        // The first thing that happens is to check for saturation events
        if(samples->ps1 > 48000 || samples->ps2 > 48000)
    1598:	8a 85       	ldd	r24, Y+10	; 0x0a
    159a:	9b 85       	ldd	r25, Y+11	; 0x0b
    159c:	81 38       	cpi	r24, 0x81	; 129
    159e:	9b 4b       	sbci	r25, 0xBB	; 187
    15a0:	28 f4       	brcc	.+10     	; 0x15ac <ProcessSi114xSamples+0x112>
    15a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    15a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    15a6:	81 38       	cpi	r24, 0x81	; 129
    15a8:	9b 4b       	sbci	r25, 0xBB	; 187
    15aa:	20 f0       	brcs	.+8      	; 0x15b4 <ProcessSi114xSamples+0x11a>
            // handle saturation events by changing ADC settings.
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
            printf("Samples are Saturated\n");
    15ac:	83 ee       	ldi	r24, 0xE3	; 227
    15ae:	90 e2       	ldi	r25, 0x20	; 32
    15b0:	44 d4       	rcall	.+2184   	; 0x1e3a <puts>
    {
        //
        // Once the baseline has been set, do the actual loop
        // The first thing that happens is to check for saturation events
        if(samples->ps1 > 48000 || samples->ps2 > 48000)
        {
    15b2:	23 c0       	rjmp	.+70     	; 0x15fa <ProcessSi114xSamples+0x160>
            //
            printf("Samples are Saturated\n");
        }
        else
        { 
            if( isIRStable( samples ) )
    15b4:	ce 01       	movw	r24, r28
    15b6:	f8 dd       	rcall	.-1040   	; 0x11a8 <isIRStable>
    15b8:	88 23       	and	r24, r24
    15ba:	f9 f0       	breq	.+62     	; 0x15fa <ProcessSi114xSamples+0x160>
            {
                IRCompensation( 0, samples, ircorrection );  // IR Ambient Compensation for PS1 Channel
    15bc:	42 e1       	ldi	r20, 0x12	; 18
    15be:	50 e2       	ldi	r21, 0x20	; 32
    15c0:	be 01       	movw	r22, r28
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	34 de       	rcall	.-920    	; 0x122e <IRCompensation>
                IRCompensation( 1, samples, ircorrection );  // IR Ambient Compensation for PS2 Channel
    15c6:	42 e1       	ldi	r20, 0x12	; 18
    15c8:	50 e2       	ldi	r21, 0x20	; 32
    15ca:	be 01       	movw	r22, r28
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	2f de       	rcall	.-930    	; 0x122e <IRCompensation>

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
    15d0:	40 91 17 20 	lds	r20, 0x2017
    15d4:	50 91 18 20 	lds	r21, 0x2018
    15d8:	be 01       	movw	r22, r28
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	77 de       	rcall	.-786    	; 0x12cc <calcBaseline>
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
    15de:	40 91 17 20 	lds	r20, 0x2017
    15e2:	50 91 18 20 	lds	r21, 0x2018
    15e6:	be 01       	movw	r22, r28
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	70 de       	rcall	.-800    	; 0x12cc <calcBaseline>

                SliderAlgorithm(si114x_handle, samples, scale);
    15ec:	40 91 15 20 	lds	r20, 0x2015
    15f0:	50 91 16 20 	lds	r21, 0x2016
    15f4:	be 01       	movw	r22, r28
    15f6:	c8 01       	movw	r24, r16
    15f8:	79 d0       	rcall	.+242    	; 0x16ec <SliderAlgorithm>

            }
        }
    }
}
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	08 95       	ret

00001604 <PortSet>:
                        u8 address, u8 length, u8 *values)
{
    //return PT_i2c_smbus_read_i2c_block_data(si114x_handle,
    //                       address,    length,     values);
	return i2c_read_data_block(SI114X_ADDR,address,values,length);
}
    1604:	08 95       	ret

00001606 <Si114xWriteToRegister>:
    1606:	8a e5       	ldi	r24, 0x5A	; 90
    1608:	6e dc       	rcall	.-1828   	; 0xee6 <i2c_write_data>
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	08 95       	ret

0000160e <Si114xReadFromRegister>:
    160e:	8a e5       	ldi	r24, 0x5A	; 90
    1610:	83 dc       	rcall	.-1786   	; 0xf18 <i2c_read_data>
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	08 95       	ret

00001616 <Si114xBlockWrite>:
    1616:	c9 01       	movw	r24, r18
    1618:	24 2f       	mov	r18, r20
    161a:	ac 01       	movw	r20, r24
    161c:	8a e5       	ldi	r24, 0x5A	; 90
    161e:	a3 dc       	rcall	.-1722   	; 0xf66 <i2c_write_data_block>
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	08 95       	ret

00001624 <delay_10ms>:
    1624:	83 ec       	ldi	r24, 0xC3	; 195
    1626:	99 e0       	ldi	r25, 0x09	; 9
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <delay_10ms+0x4>
    162c:	00 c0       	rjmp	.+0      	; 0x162e <delay_10ms+0xa>
    162e:	00 00       	nop
    1630:	08 95       	ret

00001632 <QS_Counts_to_Distance>:
// In the IR Slider, the distance between LED to sensor is the same for each of
// the two LEDs. For this reason, it is possible to have a single counts to
// distance function. 
//
s16 QS_Counts_to_Distance (u16 counts, u8 led)
{
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	a4 97       	sbiw	r28, 0x24	; 36
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	de bf       	out	0x3e, r29	; 62
    u16 code   offset_1[9]    = {29, 72, 55, 75, 95, 131, 177, 238, 300};
    u16 code   slope_1[9]     = {29, 173, 102, 237, 429, 1215, 3012, 9990, 26214};	
    u16 code   piecewise_brackets_1[9] = {19805, 16015, 9607, 6838, 3014, 1666, 578, 250, 125};	
    1640:	22 e1       	ldi	r18, 0x12	; 18
    1642:	eb e1       	ldi	r30, 0x1B	; 27
    1644:	f0 e2       	ldi	r31, 0x20	; 32
    1646:	de 01       	movw	r26, r28
    1648:	11 96       	adiw	r26, 0x01	; 1
    164a:	01 90       	ld	r0, Z+
    164c:	0d 92       	st	X+, r0
    164e:	2a 95       	dec	r18
    1650:	e1 f7       	brne	.-8      	; 0x164a <QS_Counts_to_Distance+0x18>

    u16 code   offset_2[9]    = {27, 39, 51, 75, 96, 132, 177, 236, 299};
    u16 code   slope_2[9]     = {27, 39, 95, 298, 538, 1481, 3637, 11457, 31208};	
    u16 code   piecewise_brackets_2[9]= {17760, 14650, 7745, 5545, 2500, 1394, 493, 207, 102};	
    1652:	22 e1       	ldi	r18, 0x12	; 18
    1654:	ed e2       	ldi	r30, 0x2D	; 45
    1656:	f0 e2       	ldi	r31, 0x20	; 32
    1658:	de 01       	movw	r26, r28
    165a:	53 96       	adiw	r26, 0x13	; 19
    165c:	01 90       	ld	r0, Z+
    165e:	0d 92       	st	X+, r0
    1660:	2a 95       	dec	r18
    1662:	e1 f7       	brne	.-8      	; 0x165c <QS_Counts_to_Distance+0x2a>

    u8 code   maxIndex = 9;
    u8 xdata   indexLinear;
    uu32 xdata distance;

    if(led==1)      
    1664:	61 30       	cpi	r22, 0x01	; 1
    1666:	99 f4       	brne	.+38     	; 0x168e <QS_Counts_to_Distance+0x5c>
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
       {
           if (counts > piecewise_brackets_1[indexLinear])
    1668:	29 81       	ldd	r18, Y+1	; 0x01
    166a:	3a 81       	ldd	r19, Y+2	; 0x02
    166c:	28 17       	cp	r18, r24
    166e:	39 07       	cpc	r19, r25
    1670:	18 f1       	brcs	.+70     	; 0x16b8 <QS_Counts_to_Distance+0x86>
    1672:	fe 01       	movw	r30, r28
    1674:	33 96       	adiw	r30, 0x03	; 3
    1676:	ae 01       	movw	r20, r28
    1678:	4d 5e       	subi	r20, 0xED	; 237
    167a:	5f 4f       	sbci	r21, 0xFF	; 255
    167c:	21 91       	ld	r18, Z+
    167e:	31 91       	ld	r19, Z+
    1680:	28 17       	cp	r18, r24
    1682:	39 07       	cpc	r19, r25
    1684:	e0 f0       	brcs	.+56     	; 0x16be <QS_Counts_to_Distance+0x8c>

    if(led==1)      
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    1686:	e4 17       	cp	r30, r20
    1688:	f5 07       	cpc	r31, r21
    168a:	c1 f7       	brne	.-16     	; 0x167c <QS_Counts_to_Distance+0x4a>
    168c:	1b c0       	rjmp	.+54     	; 0x16c4 <QS_Counts_to_Distance+0x92>
               distance.u16[LSB] = offset_1[indexLinear] - distance.u16[MSB];
               break;
           }
       }
    }
    else if(led==2) 
    168e:	62 30       	cpi	r22, 0x02	; 2
    1690:	e1 f4       	brne	.+56     	; 0x16ca <QS_Counts_to_Distance+0x98>
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
       {
           if (counts > piecewise_brackets_2[indexLinear])
    1692:	2b 89       	ldd	r18, Y+19	; 0x13
    1694:	3c 89       	ldd	r19, Y+20	; 0x14
    1696:	28 17       	cp	r18, r24
    1698:	39 07       	cpc	r19, r25
    169a:	d0 f0       	brcs	.+52     	; 0x16d0 <QS_Counts_to_Distance+0x9e>
    169c:	fe 01       	movw	r30, r28
    169e:	75 96       	adiw	r30, 0x15	; 21
    16a0:	ae 01       	movw	r20, r28
    16a2:	4b 5d       	subi	r20, 0xDB	; 219
    16a4:	5f 4f       	sbci	r21, 0xFF	; 255
    16a6:	21 91       	ld	r18, Z+
    16a8:	31 91       	ld	r19, Z+
    16aa:	28 17       	cp	r18, r24
    16ac:	39 07       	cpc	r19, r25
    16ae:	98 f0       	brcs	.+38     	; 0x16d6 <QS_Counts_to_Distance+0xa4>
    }
    else if(led==2) 
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    16b0:	e4 17       	cp	r30, r20
    16b2:	f5 07       	cpc	r31, r21
    16b4:	c1 f7       	brne	.-16     	; 0x16a6 <QS_Counts_to_Distance+0x74>
    16b6:	12 c0       	rjmp	.+36     	; 0x16dc <QS_Counts_to_Distance+0xaa>
    // Set to a max value if above a certain level.
    if (distance.u16[LSB] > 250 || indexLinear == maxIndex)
    {
        distance.u16[LSB] = 250;
    }
    return (distance.u16[LSB]);
    16b8:	8a ef       	ldi	r24, 0xFA	; 250
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	11 c0       	rjmp	.+34     	; 0x16e0 <QS_Counts_to_Distance+0xae>
    16be:	8a ef       	ldi	r24, 0xFA	; 250
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e c0       	rjmp	.+28     	; 0x16e0 <QS_Counts_to_Distance+0xae>
    16c4:	8a ef       	ldi	r24, 0xFA	; 250
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	0b c0       	rjmp	.+22     	; 0x16e0 <QS_Counts_to_Distance+0xae>
               distance.u16[LSB] = offset_2[indexLinear] - distance.u16[MSB];
               break;
           }
       }
    }
    else return -1;  /* Invalid channel number */
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	9f ef       	ldi	r25, 0xFF	; 255
    16ce:	08 c0       	rjmp	.+16     	; 0x16e0 <QS_Counts_to_Distance+0xae>
    // Set to a max value if above a certain level.
    if (distance.u16[LSB] > 250 || indexLinear == maxIndex)
    {
        distance.u16[LSB] = 250;
    }
    return (distance.u16[LSB]);
    16d0:	8a ef       	ldi	r24, 0xFA	; 250
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	05 c0       	rjmp	.+10     	; 0x16e0 <QS_Counts_to_Distance+0xae>
    16d6:	8a ef       	ldi	r24, 0xFA	; 250
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <QS_Counts_to_Distance+0xae>
    16dc:	8a ef       	ldi	r24, 0xFA	; 250
    16de:	90 e0       	ldi	r25, 0x00	; 0
}
    16e0:	a4 96       	adiw	r28, 0x24	; 36
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	08 95       	ret

000016ec <SliderAlgorithm>:

void SliderAlgorithm(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples, u16 scale)
{
    16ec:	6f 92       	push	r6
    16ee:	7f 92       	push	r7
    16f0:	9f 92       	push	r9
    16f2:	af 92       	push	r10
    16f4:	bf 92       	push	r11
    16f6:	cf 92       	push	r12
    16f8:	df 92       	push	r13
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	ae 97       	sbiw	r28, 0x2e	; 46
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	5b 01       	movw	r10, r22
    1712:	3a 01       	movw	r6, r20
    static u16 xdata LED_flash_timeout;
    static u16 xdata Pause_gesture_timeout;
    static u16 xdata SwipeStartTime;

    // QS_GlobalCounterOverflow assumes milliseconds. Samples->timestamp is in 100 us.
    u16 xdata QS_GlobalCounterOverflow = samples->timestamp / 10;
    1714:	fb 01       	movw	r30, r22
    1716:	22 81       	ldd	r18, Z+2	; 0x02
    1718:	33 81       	ldd	r19, Z+3	; 0x03
    171a:	ad ec       	ldi	r26, 0xCD	; 205
    171c:	bc ec       	ldi	r27, 0xCC	; 204
    171e:	6d d3       	rcall	.+1754   	; 0x1dfa <__umulhisi3>
    1720:	7c 01       	movw	r14, r24
    1722:	f6 94       	lsr	r15
    1724:	e7 94       	ror	r14
    1726:	f6 94       	lsr	r15
    1728:	e7 94       	ror	r14
    172a:	f6 94       	lsr	r15
    172c:	e7 94       	ror	r14

    // x position "bucket" endpoints to determine LED states and recognize Pause gesture.
    u16 code xbucket_Array[10] = {1, 159, 272, 385, 498, 611, 724, 837, 1100, 1102};
    172e:	84 e1       	ldi	r24, 0x14	; 20
    1730:	ef e3       	ldi	r30, 0x3F	; 63
    1732:	f0 e2       	ldi	r31, 0x20	; 32
    1734:	de 01       	movw	r26, r28
    1736:	11 96       	adiw	r26, 0x01	; 1
    1738:	01 90       	ld	r0, Z+
    173a:	0d 92       	st	X+, r0
    173c:	8a 95       	dec	r24
    173e:	e1 f7       	brne	.-8      	; 0x1738 <SliderAlgorithm+0x4c>

    // P1 LED values corresponding to the position buckets
    u8 code LED_P1_Vals[10] = {0xFF, 0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F, 0xFF};   
    1740:	8a e0       	ldi	r24, 0x0A	; 10
    1742:	e3 e5       	ldi	r30, 0x53	; 83
    1744:	f0 e2       	ldi	r31, 0x20	; 32
    1746:	de 01       	movw	r26, r28
    1748:	55 96       	adiw	r26, 0x15	; 21
    174a:	01 90       	ld	r0, Z+
    174c:	0d 92       	st	X+, r0
    174e:	8a 95       	dec	r24
    1750:	e1 f7       	brne	.-8      	; 0x174a <SliderAlgorithm+0x5e>

    // P1 patterns for LED state machine.  Sent in reverse order, '0' bits are ON
    u8 code LED_swipe_left_pattern[8]  = 
    1752:	88 e0       	ldi	r24, 0x08	; 8
    1754:	ed e5       	ldi	r30, 0x5D	; 93
    1756:	f0 e2       	ldi	r31, 0x20	; 32
    1758:	de 01       	movw	r26, r28
    175a:	5f 96       	adiw	r26, 0x1f	; 31
    175c:	01 90       	ld	r0, Z+
    175e:	0d 92       	st	X+, r0
    1760:	8a 95       	dec	r24
    1762:	e1 f7       	brne	.-8      	; 0x175c <SliderAlgorithm+0x70>
      {0xFF, 0xFE, 0xF8, 0xE1, 0x87, 0x1F, 0x7F, 0xFF};

    u8 code LED_swipe_right_pattern[8] = 
    1764:	88 e0       	ldi	r24, 0x08	; 8
    1766:	e5 e6       	ldi	r30, 0x65	; 101
    1768:	f0 e2       	ldi	r31, 0x20	; 32
    176a:	de 01       	movw	r26, r28
    176c:	97 96       	adiw	r26, 0x27	; 39
    176e:	01 90       	ld	r0, Z+
    1770:	0d 92       	st	X+, r0
    1772:	8a 95       	dec	r24
    1774:	e1 f7       	brne	.-8      	; 0x176e <SliderAlgorithm+0x82>
    s16 xdata xdiff;
    u8 xdata swipe_speed;

    int xdata ps;

    ps = (u32) samples->ps1 - (u32)baseline[0];
    1776:	f5 01       	movw	r30, r10
    1778:	82 85       	ldd	r24, Z+10	; 0x0a
    177a:	93 85       	ldd	r25, Z+11	; 0x0b
    177c:	20 91 ee 23 	lds	r18, 0x23EE
    1780:	30 91 ef 23 	lds	r19, 0x23EF
    1784:	82 1b       	sub	r24, r18
    1786:	93 0b       	sbc	r25, r19
    1788:	12 f4       	brpl	.+4      	; 0x178e <SliderAlgorithm+0xa2>
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    ps *= scale;

    // Raw IR sensor 0 and 1 are stored in channels 4 and 5
    // ALS is stored in channel 6
    // Calculate r1 and r2 distances; store in channels 0 and 1
    r1 = QS_Counts_to_Distance ((u16)ps, 1);
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	9c 01       	movw	r18, r24
    1792:	62 9e       	mul	r6, r18
    1794:	c0 01       	movw	r24, r0
    1796:	63 9e       	mul	r6, r19
    1798:	90 0d       	add	r25, r0
    179a:	72 9e       	mul	r7, r18
    179c:	90 0d       	add	r25, r0
    179e:	11 24       	eor	r1, r1
    17a0:	48 df       	rcall	.-368    	; 0x1632 <QS_Counts_to_Distance>
    17a2:	8c 01       	movw	r16, r24

    ps = (u32) samples->ps2 - (u32)baseline[1];
    17a4:	f5 01       	movw	r30, r10
    17a6:	84 85       	ldd	r24, Z+12	; 0x0c
    17a8:	95 85       	ldd	r25, Z+13	; 0x0d
    17aa:	20 91 f0 23 	lds	r18, 0x23F0
    17ae:	30 91 f1 23 	lds	r19, 0x23F1
    17b2:	82 1b       	sub	r24, r18
    17b4:	93 0b       	sbc	r25, r19
    17b6:	12 f4       	brpl	.+4      	; 0x17bc <SliderAlgorithm+0xd0>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    if (ps < 0) ps = 0;

    // Scale it
    ps *= (u32)scale;

    r2 = QS_Counts_to_Distance ((u16)ps, 2);
    17bc:	62 e0       	ldi	r22, 0x02	; 2
    17be:	9c 01       	movw	r18, r24
    17c0:	26 9d       	mul	r18, r6
    17c2:	c0 01       	movw	r24, r0
    17c4:	27 9d       	mul	r18, r7
    17c6:	90 0d       	add	r25, r0
    17c8:	36 9d       	mul	r19, r6
    17ca:	90 0d       	add	r25, r0
    17cc:	11 24       	eor	r1, r1
    17ce:	31 df       	rcall	.-414    	; 0x1632 <QS_Counts_to_Distance>
   ////////////////////////////////////////////////////////////////////////////
   // Position calculation and swipe gesture detection

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
    17d0:	00 9f       	mul	r16, r16
    17d2:	90 01       	movw	r18, r0
    17d4:	01 9f       	mul	r16, r17
    17d6:	30 0d       	add	r19, r0
    17d8:	30 0d       	add	r19, r0
    17da:	11 24       	eor	r1, r1
   x.u32 = x.u32 + 33000;
    17dc:	28 51       	subi	r18, 0x18	; 24
    17de:	3f 47       	sbci	r19, 0x7F	; 127
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    17e0:	88 9f       	mul	r24, r24
    17e2:	a0 01       	movw	r20, r0
    17e4:	89 9f       	mul	r24, r25
    17e6:	50 0d       	add	r21, r0
    17e8:	50 0d       	add	r21, r0
    17ea:	11 24       	eor	r1, r1
    17ec:	24 1b       	sub	r18, r20
    17ee:	35 0b       	sbc	r19, r21
   if (x.s32 < 0)
    17f0:	12 f4       	brpl	.+4      	; 0x17f6 <SliderAlgorithm+0x10a>
   {
     x.s32 = 0;
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
     x.u16[LSB] = 1101;
   }

   
   // Determine "z" and recognize whether "swipe" type gesture has occured
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
    17f6:	01 3f       	cpi	r16, 0xF1	; 241
    17f8:	11 05       	cpc	r17, r1
    17fa:	18 f4       	brcc	.+6      	; 0x1802 <SliderAlgorithm+0x116>
    17fc:	81 3f       	cpi	r24, 0xF1	; 241
    17fe:	91 05       	cpc	r25, r1
    1800:	e8 f1       	brcs	.+122    	; 0x187c <SliderAlgorithm+0x190>
   {
      // check for end of swipe
      if (out_of_range == 0)
    1802:	80 91 1a 20 	lds	r24, 0x201A
    1806:	81 11       	cpse	r24, r1
    1808:	1f c0       	rjmp	.+62     	; 0x1848 <SliderAlgorithm+0x15c>
      {
        xexit = xlast;
    180a:	80 91 a5 21 	lds	r24, 0x21A5
    180e:	90 91 a6 21 	lds	r25, 0x21A6
    1812:	80 93 a3 21 	sts	0x21A3, r24
    1816:	90 93 a4 21 	sts	0x21A4, r25

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
    181a:	20 91 a1 21 	lds	r18, 0x21A1
    181e:	30 91 a2 21 	lds	r19, 0x21A2
    1822:	a7 01       	movw	r20, r14
    1824:	42 1b       	sub	r20, r18
    1826:	53 0b       	sbc	r21, r19
    1828:	43 53       	subi	r20, 0x33	; 51
    182a:	51 09       	sbc	r21, r1
    182c:	46 31       	cpi	r20, 0x16	; 22
    182e:	52 40       	sbci	r21, 0x02	; 2
    1830:	68 f4       	brcc	.+26     	; 0x184c <SliderAlgorithm+0x160>
        {
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
    1832:	27 5b       	subi	r18, 0xB7	; 183
    1834:	92 2e       	mov	r9, r18
    1836:	9e 18       	sub	r9, r14
            xdiff = (s16)xenter-(s16)xexit;
    1838:	c0 90 9f 21 	lds	r12, 0x219F
    183c:	d0 90 a0 21 	lds	r13, 0x21A0
    1840:	c8 1a       	sub	r12, r24
    1842:	d9 0a       	sbc	r13, r25
        xexit = xlast;

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
        {
            swipe_detect = 1;   // indicate that a swipe was detected
    1844:	21 e0       	ldi	r18, 0x01	; 1
    1846:	03 c0       	rjmp	.+6      	; 0x184e <SliderAlgorithm+0x162>
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	01 c0       	rjmp	.+2      	; 0x184e <SliderAlgorithm+0x162>
    184c:	20 e0       	ldi	r18, 0x00	; 0
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
            xdiff = (s16)xenter-(s16)xexit;
        }
      }
      out_of_range = 1;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	80 93 1a 20 	sts	0x201A, r24
      if (xexit > 550)
    1854:	80 91 a3 21 	lds	r24, 0x21A3
    1858:	90 91 a4 21 	lds	r25, 0x21A4
    185c:	87 32       	cpi	r24, 0x27	; 39
    185e:	92 40       	sbci	r25, 0x02	; 2
    1860:	18 f0       	brcs	.+6      	; 0x1868 <SliderAlgorithm+0x17c>
      {
        x.u16[LSB] = 1101;
    1862:	0d e4       	ldi	r16, 0x4D	; 77
    1864:	14 e0       	ldi	r17, 0x04	; 4
    1866:	02 c0       	rjmp	.+4      	; 0x186c <SliderAlgorithm+0x180>
      }
      else
      {
        x.u16[LSB] = 0;
    1868:	00 e0       	ldi	r16, 0x00	; 0
    186a:	10 e0       	ldi	r17, 0x00	; 0
      }
      z = MAX_RADIUS;
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    186c:	e0 92 9d 21 	sts	0x219D, r14
    1870:	f0 92 9e 21 	sts	0x219E, r15
   //REPLACE_0_PS3( x.u16[LSB] );
   //REPLACE_0_AUX( z );

   // If a swipe was detected, determine the direction (L/R), set up LED state machine
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
    1874:	21 30       	cpi	r18, 0x01	; 1
    1876:	09 f0       	breq	.+2      	; 0x187a <SliderAlgorithm+0x18e>
    1878:	67 c0       	rjmp	.+206    	; 0x1948 <SliderAlgorithm+0x25c>
    187a:	1f c0       	rjmp	.+62     	; 0x18ba <SliderAlgorithm+0x1ce>
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
   if (x.s32 < 0)
   {
     x.s32 = 0;
   }
   x.u32 = x.u32 / 60;
    187c:	a9 e8       	ldi	r26, 0x89	; 137
    187e:	b8 e8       	ldi	r27, 0x88	; 136
    1880:	bc d2       	rcall	.+1400   	; 0x1dfa <__umulhisi3>
    1882:	8c 01       	movw	r16, r24
    1884:	16 95       	lsr	r17
    1886:	07 95       	ror	r16
    1888:	12 95       	swap	r17
    188a:	02 95       	swap	r16
    188c:	0f 70       	andi	r16, 0x0F	; 15
    188e:	01 27       	eor	r16, r17
    1890:	1f 70       	andi	r17, 0x0F	; 15
    1892:	01 27       	eor	r16, r17
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
   }
   else
   {
      // check for start of swipe
      if (out_of_range == 1)
    1894:	80 91 1a 20 	lds	r24, 0x201A
    1898:	81 30       	cpi	r24, 0x01	; 1
    189a:	41 f4       	brne	.+16     	; 0x18ac <SliderAlgorithm+0x1c0>
      {
        xenter = x.u16[LSB];
    189c:	00 93 9f 21 	sts	0x219F, r16
    18a0:	10 93 a0 21 	sts	0x21A0, r17
        SwipeStartTime = QS_GlobalCounterOverflow;
    18a4:	e0 92 a1 21 	sts	0x21A1, r14
    18a8:	f0 92 a2 21 	sts	0x21A2, r15
      }
      out_of_range = 0;
    18ac:	10 92 1a 20 	sts	0x201A, r1

      xlast = x.u16[LSB];
    18b0:	00 93 a5 21 	sts	0x21A5, r16
    18b4:	10 93 a6 21 	sts	0x21A6, r17
    18b8:	47 c0       	rjmp	.+142    	; 0x1948 <SliderAlgorithm+0x25c>

   // If a swipe was detected, determine the direction (L/R), set up LED state machine
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
   {
       if (xdiff > 150)             // Left Swipe
    18ba:	f7 e9       	ldi	r31, 0x97	; 151
    18bc:	cf 16       	cp	r12, r31
    18be:	d1 04       	cpc	r13, r1
    18c0:	f4 f0       	brlt	.+60     	; 0x18fe <SliderAlgorithm+0x212>
    18c2:	fe 01       	movw	r30, r28
    18c4:	7f 96       	adiw	r30, 0x1f	; 31
    18c6:	a4 e9       	ldi	r26, 0x94	; 148
    18c8:	b1 e2       	ldi	r27, 0x21	; 33
    18ca:	ce 01       	movw	r24, r28
    18cc:	87 96       	adiw	r24, 0x27	; 39
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
    18ce:	21 91       	ld	r18, Z+
    18d0:	2d 93       	st	X+, r18
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
   {
       if (xdiff > 150)             // Left Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    18d2:	e8 17       	cp	r30, r24
    18d4:	f9 07       	cpc	r31, r25
    18d6:	d9 f7       	brne	.-10     	; 0x18ce <SliderAlgorithm+0x1e2>
    18d8:	88 e0       	ldi	r24, 0x08	; 8
    18da:	80 93 9c 21 	sts	0x219C, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send LEFT_SWIPE gesture
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
    18de:	df 92       	push	r13
    18e0:	cf 92       	push	r12
    18e2:	1f 92       	push	r1
    18e4:	9f 92       	push	r9
    18e6:	89 ef       	ldi	r24, 0xF9	; 249
    18e8:	90 e2       	ldi	r25, 0x20	; 32
    18ea:	9f 93       	push	r25
    18ec:	8f 93       	push	r24
    18ee:	84 e0       	ldi	r24, 0x04	; 4
    18f0:	91 e2       	ldi	r25, 0x21	; 33
    18f2:	9f 93       	push	r25
    18f4:	8f 93       	push	r24
    18f6:	90 d2       	rcall	.+1312   	; 0x1e18 <printf>
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	25 c0       	rjmp	.+74     	; 0x1948 <SliderAlgorithm+0x25c>
       }
       else if (xdiff < -150)       // Right Swipe
    18fe:	3a e6       	ldi	r19, 0x6A	; 106
    1900:	c3 16       	cp	r12, r19
    1902:	3f ef       	ldi	r19, 0xFF	; 255
    1904:	d3 06       	cpc	r13, r19
    1906:	04 f5       	brge	.+64     	; 0x1948 <SliderAlgorithm+0x25c>
    1908:	fe 01       	movw	r30, r28
    190a:	b7 96       	adiw	r30, 0x27	; 39
    190c:	a4 e9       	ldi	r26, 0x94	; 148
    190e:	b1 e2       	ldi	r27, 0x21	; 33
    1910:	ce 01       	movw	r24, r28
    1912:	8f 96       	adiw	r24, 0x2f	; 47
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
    1914:	21 91       	ld	r18, Z+
    1916:	2d 93       	st	X+, r18
            // send LEFT_SWIPE gesture
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
       }
       else if (xdiff < -150)       // Right Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    1918:	e8 17       	cp	r30, r24
    191a:	f9 07       	cpc	r31, r25
    191c:	d9 f7       	brne	.-10     	; 0x1914 <SliderAlgorithm+0x228>
    191e:	88 e0       	ldi	r24, 0x08	; 8
    1920:	80 93 9c 21 	sts	0x219C, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send RIGHT_SWIPE gesture
            printf("                            %s: %d, %d\n", "RIGHT_SWIPE", swipe_speed, -xdiff) ;            
    1924:	d1 94       	neg	r13
    1926:	c1 94       	neg	r12
    1928:	d1 08       	sbc	r13, r1
    192a:	df 92       	push	r13
    192c:	cf 92       	push	r12
    192e:	1f 92       	push	r1
    1930:	9f 92       	push	r9
    1932:	8c e2       	ldi	r24, 0x2C	; 44
    1934:	91 e2       	ldi	r25, 0x21	; 33
    1936:	9f 93       	push	r25
    1938:	8f 93       	push	r24
    193a:	84 e0       	ldi	r24, 0x04	; 4
    193c:	91 e2       	ldi	r25, 0x21	; 33
    193e:	9f 93       	push	r25
    1940:	8f 93       	push	r24
    1942:	6a d2       	rcall	.+1236   	; 0x1e18 <printf>
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	de bf       	out	0x3e, r29	; 62
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
   {
        if (x.u16[LSB] < xbucket_Array[xbucket])
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	9a 81       	ldd	r25, Y+2	; 0x02
    194c:	08 17       	cp	r16, r24
    194e:	19 07       	cpc	r17, r25
    1950:	c0 f0       	brcs	.+48     	; 0x1982 <SliderAlgorithm+0x296>
    1952:	fe 01       	movw	r30, r28
    1954:	33 96       	adiw	r30, 0x03	; 3

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    1956:	dd 24       	eor	r13, r13
    1958:	d3 94       	inc	r13
   {
        if (x.u16[LSB] < xbucket_Array[xbucket])
    195a:	21 91       	ld	r18, Z+
    195c:	31 91       	ld	r19, Z+
    195e:	02 17       	cp	r16, r18
    1960:	13 07       	cpc	r17, r19
    1962:	28 f0       	brcs	.+10     	; 0x196e <SliderAlgorithm+0x282>

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    1964:	d3 94       	inc	r13
    1966:	9a e0       	ldi	r25, 0x0A	; 10
    1968:	d9 12       	cpse	r13, r25
    196a:	f7 cf       	rjmp	.-18     	; 0x195a <SliderAlgorithm+0x26e>
    196c:	7a c0       	rjmp	.+244    	; 0x1a62 <SliderAlgorithm+0x376>
            break;
        }
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
    196e:	80 91 93 21 	lds	r24, 0x2193
    1972:	d8 12       	cpse	r13, r24
    1974:	07 c0       	rjmp	.+14     	; 0x1984 <SliderAlgorithm+0x298>
    1976:	e9 e0       	ldi	r30, 0x09	; 9
    1978:	de 16       	cp	r13, r30
    197a:	21 f0       	breq	.+8      	; 0x1984 <SliderAlgorithm+0x298>
    197c:	d1 10       	cpse	r13, r1
    197e:	06 c0       	rjmp	.+12     	; 0x198c <SliderAlgorithm+0x2a0>
    1980:	01 c0       	rjmp	.+2      	; 0x1984 <SliderAlgorithm+0x298>

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    1982:	d1 2c       	mov	r13, r1
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
   {
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    1984:	e0 92 9d 21 	sts	0x219D, r14
    1988:	f0 92 9e 21 	sts	0x219E, r15
   }
   last_xbucket = xbucket;  // store latest information for next comparison
    198c:	d0 92 93 21 	sts	0x2193, r13

   // LED State machine - Pause gesture recognition is also integrated here 
   if (LED_State != 0)  // indicate gesture pattern
    1990:	e0 91 9c 21 	lds	r30, 0x219C
    1994:	ee 23       	and	r30, r30
    1996:	e1 f0       	breq	.+56     	; 0x19d0 <SliderAlgorithm+0x2e4>
   {
      if ((u8)(QS_GlobalCounterOverflow - LED_flash_timeout) >= LED_STATE_TIME)
    1998:	80 91 91 21 	lds	r24, 0x2191
    199c:	fe 2d       	mov	r31, r14
    199e:	f8 1b       	sub	r31, r24
    19a0:	f7 32       	cpi	r31, 0x27	; 39
    19a2:	08 f4       	brcc	.+2      	; 0x19a6 <SliderAlgorithm+0x2ba>
    19a4:	52 c0       	rjmp	.+164    	; 0x1a4a <SliderAlgorithm+0x35e>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    19a6:	e0 92 91 21 	sts	0x2191, r14
    19aa:	f0 92 92 21 	sts	0x2192, r15

         // Write to Port 1 of the MCU
         PortSet( 1, LED_flash_pattern[(--LED_State)%8]); 
    19ae:	e1 50       	subi	r30, 0x01	; 1
    19b0:	e0 93 9c 21 	sts	0x219C, r30
    19b4:	e7 70       	andi	r30, 0x07	; 7
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	ec 56       	subi	r30, 0x6C	; 108
    19ba:	fe 4d       	sbci	r31, 0xDE	; 222
    19bc:	60 81       	ld	r22, Z
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	1f de       	rcall	.-962    	; 0x1604 <PortSet>

         Pause_gesture_timeout = QS_GlobalCounterOverflow;
    19c6:	e0 92 9d 21 	sts	0x219D, r14
    19ca:	f0 92 9e 21 	sts	0x219E, r15
    19ce:	3d c0       	rjmp	.+122    	; 0x1a4a <SliderAlgorithm+0x35e>
      } // when all states are done, LED_State will be back to 0
   }
   else     // indicate position, test for PAUSE gesture
   {
      // Write to Port 1 of the MCU
      PortSet( 1, LED_P1_Vals[xbucket]);
    19d0:	fe 01       	movw	r30, r28
    19d2:	ed 0d       	add	r30, r13
    19d4:	f1 1d       	adc	r31, r1
    19d6:	15 89       	ldd	r17, Z+21	; 0x15
    19d8:	61 2f       	mov	r22, r17
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	11 de       	rcall	.-990    	; 0x1604 <PortSet>


      // check time stamp for pause
      if ((QS_GlobalCounterOverflow - Pause_gesture_timeout) >= PAUSE_TIMEOUT) 
    19e2:	80 91 9d 21 	lds	r24, 0x219D
    19e6:	90 91 9e 21 	lds	r25, 0x219E
    19ea:	97 01       	movw	r18, r14
    19ec:	28 1b       	sub	r18, r24
    19ee:	39 0b       	sbc	r19, r25
    19f0:	c9 01       	movw	r24, r18
    19f2:	8a 38       	cpi	r24, 0x8A	; 138
    19f4:	92 40       	sbci	r25, 0x02	; 2
    19f6:	48 f1       	brcs	.+82     	; 0x1a4a <SliderAlgorithm+0x35e>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    19f8:	e0 92 91 21 	sts	0x2191, r14
    19fc:	f0 92 92 21 	sts	0x2192, r15
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    1a00:	8f ef       	ldi	r24, 0xFF	; 255
    1a02:	80 93 94 21 	sts	0x2194, r24
            LED_flash_pattern[LED_State++] = 0xFF;
    1a06:	80 93 95 21 	sts	0x2195, r24
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    1a0a:	10 93 96 21 	sts	0x2196, r17
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    1a0e:	10 93 97 21 	sts	0x2197, r17
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    1a12:	80 93 98 21 	sts	0x2198, r24
            LED_flash_pattern[LED_State++] = 0xFF;
    1a16:	80 93 99 21 	sts	0x2199, r24
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    1a1a:	10 93 9a 21 	sts	0x219A, r17
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    1a1e:	10 93 9b 21 	sts	0x219B, r17
         } // LED_State should be 8 when this loop is finished.

         LED_State = 16; // Set LED_State to 16 to repeat the pattern twice
    1a22:	80 e1       	ldi	r24, 0x10	; 16
    1a24:	80 93 9c 21 	sts	0x219C, r24

         // Send off a PAUSE gesture to host.
         printf("                            %s: %d\n", "PAUSE", xbucket<<8) ;            
    1a28:	df 92       	push	r13
    1a2a:	1f 92       	push	r1
    1a2c:	88 e3       	ldi	r24, 0x38	; 56
    1a2e:	91 e2       	ldi	r25, 0x21	; 33
    1a30:	9f 93       	push	r25
    1a32:	8f 93       	push	r24
    1a34:	8e e3       	ldi	r24, 0x3E	; 62
    1a36:	91 e2       	ldi	r25, 0x21	; 33
    1a38:	9f 93       	push	r25
    1a3a:	8f 93       	push	r24
    1a3c:	ed d1       	rcall	.+986    	; 0x1e18 <printf>
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
   }

   // End of LED Indicator update and PAUSE gesture recognition
   ////////////////////////////////////////////////////////////////////////////

   if (!out_of_range)
    1a4a:	80 91 1a 20 	lds	r24, 0x201A
    1a4e:	81 11       	cpse	r24, r1
    1a50:	04 c0       	rjmp	.+8      	; 0x1a5a <SliderAlgorithm+0x36e>
   {
       // store x and z in pad 0
       // It is best to display this than printf. Use AUX and PS3 channels
       //REPLACE_0_PS3( x.u16[LSB] );
       //REPLACE_0_AUX( z ); 
	   printf("out of range \r\n");
    1a52:	82 e6       	ldi	r24, 0x62	; 98
    1a54:	91 e2       	ldi	r25, 0x21	; 33
    1a56:	f1 d1       	rcall	.+994    	; 0x1e3a <puts>
    1a58:	09 c0       	rjmp	.+18     	; 0x1a6c <SliderAlgorithm+0x380>
   {
       // send a "no touch"
       // It is best to display this than printf. Use AUX and PS3 channels
       //REPLACE_0_PS3( 0 );
       //REPLACE_0_AUX( 0 ); 
	    printf("no touch \r\n");
    1a5a:	81 e7       	ldi	r24, 0x71	; 113
    1a5c:	91 e2       	ldi	r25, 0x21	; 33
    1a5e:	ed d1       	rcall	.+986    	; 0x1e3a <puts>
    1a60:	05 c0       	rjmp	.+10     	; 0x1a6c <SliderAlgorithm+0x380>
            break;
        }
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
    1a62:	80 91 93 21 	lds	r24, 0x2193
    1a66:	d8 12       	cpse	r13, r24
    1a68:	8d cf       	rjmp	.-230    	; 0x1984 <SliderAlgorithm+0x298>
    1a6a:	90 cf       	rjmp	.-224    	; 0x198c <SliderAlgorithm+0x2a0>
       //REPLACE_0_PS3( 0 );
       //REPLACE_0_AUX( 0 ); 
	    printf("no touch \r\n");
   }

}
    1a6c:	ae 96       	adiw	r28, 0x2e	; 46
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	ff 90       	pop	r15
    1a7c:	ef 90       	pop	r14
    1a7e:	df 90       	pop	r13
    1a80:	cf 90       	pop	r12
    1a82:	bf 90       	pop	r11
    1a84:	af 90       	pop	r10
    1a86:	9f 90       	pop	r9
    1a88:	7f 90       	pop	r7
    1a8a:	6f 90       	pop	r6
    1a8c:	08 95       	ret

00001a8e <uart_setup>:

char rxbuf[50];

void uart_setup(void) {
	
	PORTD.DIRSET = PIN3_bm; //TX
    1a8e:	e0 e6       	ldi	r30, 0x60	; 96
    1a90:	f6 e0       	ldi	r31, 0x06	; 6
    1a92:	88 e0       	ldi	r24, 0x08	; 8
    1a94:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; //RX
    1a96:	84 e0       	ldi	r24, 0x04	; 4
    1a98:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
    1a9a:	e0 ea       	ldi	r30, 0xA0	; 160
    1a9c:	f9 e0       	ldi	r31, 0x09	; 9
    1a9e:	80 e2       	ldi	r24, 0x20	; 32
    1aa0:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 207;//0x1111;
    1aa2:	8f ec       	ldi	r24, 0xCF	; 207
    1aa4:	86 83       	std	Z+6, r24	; 0x06
	//USARTE0.BAUDCTRLB = (33 << 4);
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
    1aa6:	83 e0       	ldi	r24, 0x03	; 3
    1aa8:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    1aaa:	88 e1       	ldi	r24, 0x18	; 24
    1aac:	84 83       	std	Z+4, r24	; 0x04
    1aae:	08 95       	ret

00001ab0 <uart_put_char>:
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    1ab0:	e0 ea       	ldi	r30, 0xA0	; 160
    1ab2:	f9 e0       	ldi	r31, 0x09	; 9
    1ab4:	91 81       	ldd	r25, Z+1	; 0x01
    1ab6:	95 ff       	sbrs	r25, 5
    1ab8:	fd cf       	rjmp	.-6      	; 0x1ab4 <uart_put_char+0x4>
	USARTD0.DATA = c;
    1aba:	80 93 a0 09 	sts	0x09A0, r24
    1abe:	08 95       	ret

00001ac0 <uart_get_char>:
}

char uart_get_char(void) {
	uint16_t timer = 0;
	while (!(USARTD0.STATUS & USART_RXCIF_bm)){
    1ac0:	89 eb       	ldi	r24, 0xB9	; 185
    1ac2:	9b e0       	ldi	r25, 0x0B	; 11
    1ac4:	e0 ea       	ldi	r30, 0xA0	; 160
    1ac6:	f9 e0       	ldi	r31, 0x09	; 9
    1ac8:	09 c0       	rjmp	.+18     	; 0x1adc <uart_get_char+0x1c>
    1aca:	af e3       	ldi	r26, 0x3F	; 63
    1acc:	bf e1       	ldi	r27, 0x1F	; 31
    1ace:	11 97       	sbiw	r26, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <uart_get_char+0xe>
    1ad2:	00 c0       	rjmp	.+0      	; 0x1ad4 <uart_get_char+0x14>
    1ad4:	00 00       	nop
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
		 _delay_ms(1);
		 if (timer++ == TIMEOUT) {
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	31 f0       	breq	.+12     	; 0x1ae8 <uart_get_char+0x28>
	USARTD0.DATA = c;
}

char uart_get_char(void) {
	uint16_t timer = 0;
	while (!(USARTD0.STATUS & USART_RXCIF_bm)){
    1adc:	21 81       	ldd	r18, Z+1	; 0x01
    1ade:	22 23       	and	r18, r18
    1ae0:	a4 f7       	brge	.-24     	; 0x1aca <uart_get_char+0xa>
		 _delay_ms(1);
		 if (timer++ == TIMEOUT) {
			return 0x03;
		 }
	}
	return USARTD0.DATA;
    1ae2:	80 91 a0 09 	lds	r24, 0x09A0
    1ae6:	08 95       	ret
char uart_get_char(void) {
	uint16_t timer = 0;
	while (!(USARTD0.STATUS & USART_RXCIF_bm)){
		 _delay_ms(1);
		 if (timer++ == TIMEOUT) {
			return 0x03;
    1ae8:	83 e0       	ldi	r24, 0x03	; 3
		 }
	}
	return USARTD0.DATA;
}
    1aea:	08 95       	ret

00001aec <__subsf3>:
    1aec:	50 58       	subi	r21, 0x80	; 128

00001aee <__addsf3>:
    1aee:	bb 27       	eor	r27, r27
    1af0:	aa 27       	eor	r26, r26
    1af2:	0e d0       	rcall	.+28     	; 0x1b10 <__addsf3x>
    1af4:	e5 c0       	rjmp	.+458    	; 0x1cc0 <__fp_round>
    1af6:	d6 d0       	rcall	.+428    	; 0x1ca4 <__fp_pscA>
    1af8:	30 f0       	brcs	.+12     	; 0x1b06 <__addsf3+0x18>
    1afa:	db d0       	rcall	.+438    	; 0x1cb2 <__fp_pscB>
    1afc:	20 f0       	brcs	.+8      	; 0x1b06 <__addsf3+0x18>
    1afe:	31 f4       	brne	.+12     	; 0x1b0c <__addsf3+0x1e>
    1b00:	9f 3f       	cpi	r25, 0xFF	; 255
    1b02:	11 f4       	brne	.+4      	; 0x1b08 <__addsf3+0x1a>
    1b04:	1e f4       	brtc	.+6      	; 0x1b0c <__addsf3+0x1e>
    1b06:	cb c0       	rjmp	.+406    	; 0x1c9e <__fp_nan>
    1b08:	0e f4       	brtc	.+2      	; 0x1b0c <__addsf3+0x1e>
    1b0a:	e0 95       	com	r30
    1b0c:	e7 fb       	bst	r30, 7
    1b0e:	c1 c0       	rjmp	.+386    	; 0x1c92 <__fp_inf>

00001b10 <__addsf3x>:
    1b10:	e9 2f       	mov	r30, r25
    1b12:	e7 d0       	rcall	.+462    	; 0x1ce2 <__fp_split3>
    1b14:	80 f3       	brcs	.-32     	; 0x1af6 <__addsf3+0x8>
    1b16:	ba 17       	cp	r27, r26
    1b18:	62 07       	cpc	r22, r18
    1b1a:	73 07       	cpc	r23, r19
    1b1c:	84 07       	cpc	r24, r20
    1b1e:	95 07       	cpc	r25, r21
    1b20:	18 f0       	brcs	.+6      	; 0x1b28 <__addsf3x+0x18>
    1b22:	71 f4       	brne	.+28     	; 0x1b40 <__addsf3x+0x30>
    1b24:	9e f5       	brtc	.+102    	; 0x1b8c <__addsf3x+0x7c>
    1b26:	ff c0       	rjmp	.+510    	; 0x1d26 <__fp_zero>
    1b28:	0e f4       	brtc	.+2      	; 0x1b2c <__addsf3x+0x1c>
    1b2a:	e0 95       	com	r30
    1b2c:	0b 2e       	mov	r0, r27
    1b2e:	ba 2f       	mov	r27, r26
    1b30:	a0 2d       	mov	r26, r0
    1b32:	0b 01       	movw	r0, r22
    1b34:	b9 01       	movw	r22, r18
    1b36:	90 01       	movw	r18, r0
    1b38:	0c 01       	movw	r0, r24
    1b3a:	ca 01       	movw	r24, r20
    1b3c:	a0 01       	movw	r20, r0
    1b3e:	11 24       	eor	r1, r1
    1b40:	ff 27       	eor	r31, r31
    1b42:	59 1b       	sub	r21, r25
    1b44:	99 f0       	breq	.+38     	; 0x1b6c <__addsf3x+0x5c>
    1b46:	59 3f       	cpi	r21, 0xF9	; 249
    1b48:	50 f4       	brcc	.+20     	; 0x1b5e <__addsf3x+0x4e>
    1b4a:	50 3e       	cpi	r21, 0xE0	; 224
    1b4c:	68 f1       	brcs	.+90     	; 0x1ba8 <__addsf3x+0x98>
    1b4e:	1a 16       	cp	r1, r26
    1b50:	f0 40       	sbci	r31, 0x00	; 0
    1b52:	a2 2f       	mov	r26, r18
    1b54:	23 2f       	mov	r18, r19
    1b56:	34 2f       	mov	r19, r20
    1b58:	44 27       	eor	r20, r20
    1b5a:	58 5f       	subi	r21, 0xF8	; 248
    1b5c:	f3 cf       	rjmp	.-26     	; 0x1b44 <__addsf3x+0x34>
    1b5e:	46 95       	lsr	r20
    1b60:	37 95       	ror	r19
    1b62:	27 95       	ror	r18
    1b64:	a7 95       	ror	r26
    1b66:	f0 40       	sbci	r31, 0x00	; 0
    1b68:	53 95       	inc	r21
    1b6a:	c9 f7       	brne	.-14     	; 0x1b5e <__addsf3x+0x4e>
    1b6c:	7e f4       	brtc	.+30     	; 0x1b8c <__addsf3x+0x7c>
    1b6e:	1f 16       	cp	r1, r31
    1b70:	ba 0b       	sbc	r27, r26
    1b72:	62 0b       	sbc	r22, r18
    1b74:	73 0b       	sbc	r23, r19
    1b76:	84 0b       	sbc	r24, r20
    1b78:	ba f0       	brmi	.+46     	; 0x1ba8 <__addsf3x+0x98>
    1b7a:	91 50       	subi	r25, 0x01	; 1
    1b7c:	a1 f0       	breq	.+40     	; 0x1ba6 <__addsf3x+0x96>
    1b7e:	ff 0f       	add	r31, r31
    1b80:	bb 1f       	adc	r27, r27
    1b82:	66 1f       	adc	r22, r22
    1b84:	77 1f       	adc	r23, r23
    1b86:	88 1f       	adc	r24, r24
    1b88:	c2 f7       	brpl	.-16     	; 0x1b7a <__addsf3x+0x6a>
    1b8a:	0e c0       	rjmp	.+28     	; 0x1ba8 <__addsf3x+0x98>
    1b8c:	ba 0f       	add	r27, r26
    1b8e:	62 1f       	adc	r22, r18
    1b90:	73 1f       	adc	r23, r19
    1b92:	84 1f       	adc	r24, r20
    1b94:	48 f4       	brcc	.+18     	; 0x1ba8 <__addsf3x+0x98>
    1b96:	87 95       	ror	r24
    1b98:	77 95       	ror	r23
    1b9a:	67 95       	ror	r22
    1b9c:	b7 95       	ror	r27
    1b9e:	f7 95       	ror	r31
    1ba0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ba2:	08 f0       	brcs	.+2      	; 0x1ba6 <__addsf3x+0x96>
    1ba4:	b3 cf       	rjmp	.-154    	; 0x1b0c <__addsf3+0x1e>
    1ba6:	93 95       	inc	r25
    1ba8:	88 0f       	add	r24, r24
    1baa:	08 f0       	brcs	.+2      	; 0x1bae <__addsf3x+0x9e>
    1bac:	99 27       	eor	r25, r25
    1bae:	ee 0f       	add	r30, r30
    1bb0:	97 95       	ror	r25
    1bb2:	87 95       	ror	r24
    1bb4:	08 95       	ret

00001bb6 <__fixsfsi>:
    1bb6:	04 d0       	rcall	.+8      	; 0x1bc0 <__fixunssfsi>
    1bb8:	68 94       	set
    1bba:	b1 11       	cpse	r27, r1
    1bbc:	b5 c0       	rjmp	.+362    	; 0x1d28 <__fp_szero>
    1bbe:	08 95       	ret

00001bc0 <__fixunssfsi>:
    1bc0:	98 d0       	rcall	.+304    	; 0x1cf2 <__fp_splitA>
    1bc2:	88 f0       	brcs	.+34     	; 0x1be6 <__fixunssfsi+0x26>
    1bc4:	9f 57       	subi	r25, 0x7F	; 127
    1bc6:	90 f0       	brcs	.+36     	; 0x1bec <__fixunssfsi+0x2c>
    1bc8:	b9 2f       	mov	r27, r25
    1bca:	99 27       	eor	r25, r25
    1bcc:	b7 51       	subi	r27, 0x17	; 23
    1bce:	a0 f0       	brcs	.+40     	; 0x1bf8 <__fixunssfsi+0x38>
    1bd0:	d1 f0       	breq	.+52     	; 0x1c06 <__fixunssfsi+0x46>
    1bd2:	66 0f       	add	r22, r22
    1bd4:	77 1f       	adc	r23, r23
    1bd6:	88 1f       	adc	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	1a f0       	brmi	.+6      	; 0x1be2 <__fixunssfsi+0x22>
    1bdc:	ba 95       	dec	r27
    1bde:	c9 f7       	brne	.-14     	; 0x1bd2 <__fixunssfsi+0x12>
    1be0:	12 c0       	rjmp	.+36     	; 0x1c06 <__fixunssfsi+0x46>
    1be2:	b1 30       	cpi	r27, 0x01	; 1
    1be4:	81 f0       	breq	.+32     	; 0x1c06 <__fixunssfsi+0x46>
    1be6:	9f d0       	rcall	.+318    	; 0x1d26 <__fp_zero>
    1be8:	b1 e0       	ldi	r27, 0x01	; 1
    1bea:	08 95       	ret
    1bec:	9c c0       	rjmp	.+312    	; 0x1d26 <__fp_zero>
    1bee:	67 2f       	mov	r22, r23
    1bf0:	78 2f       	mov	r23, r24
    1bf2:	88 27       	eor	r24, r24
    1bf4:	b8 5f       	subi	r27, 0xF8	; 248
    1bf6:	39 f0       	breq	.+14     	; 0x1c06 <__fixunssfsi+0x46>
    1bf8:	b9 3f       	cpi	r27, 0xF9	; 249
    1bfa:	cc f3       	brlt	.-14     	; 0x1bee <__fixunssfsi+0x2e>
    1bfc:	86 95       	lsr	r24
    1bfe:	77 95       	ror	r23
    1c00:	67 95       	ror	r22
    1c02:	b3 95       	inc	r27
    1c04:	d9 f7       	brne	.-10     	; 0x1bfc <__fixunssfsi+0x3c>
    1c06:	3e f4       	brtc	.+14     	; 0x1c16 <__fixunssfsi+0x56>
    1c08:	90 95       	com	r25
    1c0a:	80 95       	com	r24
    1c0c:	70 95       	com	r23
    1c0e:	61 95       	neg	r22
    1c10:	7f 4f       	sbci	r23, 0xFF	; 255
    1c12:	8f 4f       	sbci	r24, 0xFF	; 255
    1c14:	9f 4f       	sbci	r25, 0xFF	; 255
    1c16:	08 95       	ret

00001c18 <__floatunsisf>:
    1c18:	e8 94       	clt
    1c1a:	09 c0       	rjmp	.+18     	; 0x1c2e <__floatsisf+0x12>

00001c1c <__floatsisf>:
    1c1c:	97 fb       	bst	r25, 7
    1c1e:	3e f4       	brtc	.+14     	; 0x1c2e <__floatsisf+0x12>
    1c20:	90 95       	com	r25
    1c22:	80 95       	com	r24
    1c24:	70 95       	com	r23
    1c26:	61 95       	neg	r22
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2e:	99 23       	and	r25, r25
    1c30:	a9 f0       	breq	.+42     	; 0x1c5c <__floatsisf+0x40>
    1c32:	f9 2f       	mov	r31, r25
    1c34:	96 e9       	ldi	r25, 0x96	; 150
    1c36:	bb 27       	eor	r27, r27
    1c38:	93 95       	inc	r25
    1c3a:	f6 95       	lsr	r31
    1c3c:	87 95       	ror	r24
    1c3e:	77 95       	ror	r23
    1c40:	67 95       	ror	r22
    1c42:	b7 95       	ror	r27
    1c44:	f1 11       	cpse	r31, r1
    1c46:	f8 cf       	rjmp	.-16     	; 0x1c38 <__floatsisf+0x1c>
    1c48:	fa f4       	brpl	.+62     	; 0x1c88 <__floatsisf+0x6c>
    1c4a:	bb 0f       	add	r27, r27
    1c4c:	11 f4       	brne	.+4      	; 0x1c52 <__floatsisf+0x36>
    1c4e:	60 ff       	sbrs	r22, 0
    1c50:	1b c0       	rjmp	.+54     	; 0x1c88 <__floatsisf+0x6c>
    1c52:	6f 5f       	subi	r22, 0xFF	; 255
    1c54:	7f 4f       	sbci	r23, 0xFF	; 255
    1c56:	8f 4f       	sbci	r24, 0xFF	; 255
    1c58:	9f 4f       	sbci	r25, 0xFF	; 255
    1c5a:	16 c0       	rjmp	.+44     	; 0x1c88 <__floatsisf+0x6c>
    1c5c:	88 23       	and	r24, r24
    1c5e:	11 f0       	breq	.+4      	; 0x1c64 <__floatsisf+0x48>
    1c60:	96 e9       	ldi	r25, 0x96	; 150
    1c62:	11 c0       	rjmp	.+34     	; 0x1c86 <__floatsisf+0x6a>
    1c64:	77 23       	and	r23, r23
    1c66:	21 f0       	breq	.+8      	; 0x1c70 <__floatsisf+0x54>
    1c68:	9e e8       	ldi	r25, 0x8E	; 142
    1c6a:	87 2f       	mov	r24, r23
    1c6c:	76 2f       	mov	r23, r22
    1c6e:	05 c0       	rjmp	.+10     	; 0x1c7a <__floatsisf+0x5e>
    1c70:	66 23       	and	r22, r22
    1c72:	71 f0       	breq	.+28     	; 0x1c90 <__floatsisf+0x74>
    1c74:	96 e8       	ldi	r25, 0x86	; 134
    1c76:	86 2f       	mov	r24, r22
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	2a f0       	brmi	.+10     	; 0x1c88 <__floatsisf+0x6c>
    1c7e:	9a 95       	dec	r25
    1c80:	66 0f       	add	r22, r22
    1c82:	77 1f       	adc	r23, r23
    1c84:	88 1f       	adc	r24, r24
    1c86:	da f7       	brpl	.-10     	; 0x1c7e <__floatsisf+0x62>
    1c88:	88 0f       	add	r24, r24
    1c8a:	96 95       	lsr	r25
    1c8c:	87 95       	ror	r24
    1c8e:	97 f9       	bld	r25, 7
    1c90:	08 95       	ret

00001c92 <__fp_inf>:
    1c92:	97 f9       	bld	r25, 7
    1c94:	9f 67       	ori	r25, 0x7F	; 127
    1c96:	80 e8       	ldi	r24, 0x80	; 128
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	08 95       	ret

00001c9e <__fp_nan>:
    1c9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ca0:	80 ec       	ldi	r24, 0xC0	; 192
    1ca2:	08 95       	ret

00001ca4 <__fp_pscA>:
    1ca4:	00 24       	eor	r0, r0
    1ca6:	0a 94       	dec	r0
    1ca8:	16 16       	cp	r1, r22
    1caa:	17 06       	cpc	r1, r23
    1cac:	18 06       	cpc	r1, r24
    1cae:	09 06       	cpc	r0, r25
    1cb0:	08 95       	ret

00001cb2 <__fp_pscB>:
    1cb2:	00 24       	eor	r0, r0
    1cb4:	0a 94       	dec	r0
    1cb6:	12 16       	cp	r1, r18
    1cb8:	13 06       	cpc	r1, r19
    1cba:	14 06       	cpc	r1, r20
    1cbc:	05 06       	cpc	r0, r21
    1cbe:	08 95       	ret

00001cc0 <__fp_round>:
    1cc0:	09 2e       	mov	r0, r25
    1cc2:	03 94       	inc	r0
    1cc4:	00 0c       	add	r0, r0
    1cc6:	11 f4       	brne	.+4      	; 0x1ccc <__fp_round+0xc>
    1cc8:	88 23       	and	r24, r24
    1cca:	52 f0       	brmi	.+20     	; 0x1ce0 <__fp_round+0x20>
    1ccc:	bb 0f       	add	r27, r27
    1cce:	40 f4       	brcc	.+16     	; 0x1ce0 <__fp_round+0x20>
    1cd0:	bf 2b       	or	r27, r31
    1cd2:	11 f4       	brne	.+4      	; 0x1cd8 <__fp_round+0x18>
    1cd4:	60 ff       	sbrs	r22, 0
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <__fp_round+0x20>
    1cd8:	6f 5f       	subi	r22, 0xFF	; 255
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255
    1cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	08 95       	ret

00001ce2 <__fp_split3>:
    1ce2:	57 fd       	sbrc	r21, 7
    1ce4:	90 58       	subi	r25, 0x80	; 128
    1ce6:	44 0f       	add	r20, r20
    1ce8:	55 1f       	adc	r21, r21
    1cea:	59 f0       	breq	.+22     	; 0x1d02 <__fp_splitA+0x10>
    1cec:	5f 3f       	cpi	r21, 0xFF	; 255
    1cee:	71 f0       	breq	.+28     	; 0x1d0c <__fp_splitA+0x1a>
    1cf0:	47 95       	ror	r20

00001cf2 <__fp_splitA>:
    1cf2:	88 0f       	add	r24, r24
    1cf4:	97 fb       	bst	r25, 7
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	61 f0       	breq	.+24     	; 0x1d12 <__fp_splitA+0x20>
    1cfa:	9f 3f       	cpi	r25, 0xFF	; 255
    1cfc:	79 f0       	breq	.+30     	; 0x1d1c <__fp_splitA+0x2a>
    1cfe:	87 95       	ror	r24
    1d00:	08 95       	ret
    1d02:	12 16       	cp	r1, r18
    1d04:	13 06       	cpc	r1, r19
    1d06:	14 06       	cpc	r1, r20
    1d08:	55 1f       	adc	r21, r21
    1d0a:	f2 cf       	rjmp	.-28     	; 0x1cf0 <__fp_split3+0xe>
    1d0c:	46 95       	lsr	r20
    1d0e:	f1 df       	rcall	.-30     	; 0x1cf2 <__fp_splitA>
    1d10:	08 c0       	rjmp	.+16     	; 0x1d22 <__fp_splitA+0x30>
    1d12:	16 16       	cp	r1, r22
    1d14:	17 06       	cpc	r1, r23
    1d16:	18 06       	cpc	r1, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	f1 cf       	rjmp	.-30     	; 0x1cfe <__fp_splitA+0xc>
    1d1c:	86 95       	lsr	r24
    1d1e:	71 05       	cpc	r23, r1
    1d20:	61 05       	cpc	r22, r1
    1d22:	08 94       	sec
    1d24:	08 95       	ret

00001d26 <__fp_zero>:
    1d26:	e8 94       	clt

00001d28 <__fp_szero>:
    1d28:	bb 27       	eor	r27, r27
    1d2a:	66 27       	eor	r22, r22
    1d2c:	77 27       	eor	r23, r23
    1d2e:	cb 01       	movw	r24, r22
    1d30:	97 f9       	bld	r25, 7
    1d32:	08 95       	ret

00001d34 <__mulsf3>:
    1d34:	0b d0       	rcall	.+22     	; 0x1d4c <__mulsf3x>
    1d36:	c4 cf       	rjmp	.-120    	; 0x1cc0 <__fp_round>
    1d38:	b5 df       	rcall	.-150    	; 0x1ca4 <__fp_pscA>
    1d3a:	28 f0       	brcs	.+10     	; 0x1d46 <__mulsf3+0x12>
    1d3c:	ba df       	rcall	.-140    	; 0x1cb2 <__fp_pscB>
    1d3e:	18 f0       	brcs	.+6      	; 0x1d46 <__mulsf3+0x12>
    1d40:	95 23       	and	r25, r21
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <__mulsf3+0x12>
    1d44:	a6 cf       	rjmp	.-180    	; 0x1c92 <__fp_inf>
    1d46:	ab cf       	rjmp	.-170    	; 0x1c9e <__fp_nan>
    1d48:	11 24       	eor	r1, r1
    1d4a:	ee cf       	rjmp	.-36     	; 0x1d28 <__fp_szero>

00001d4c <__mulsf3x>:
    1d4c:	ca df       	rcall	.-108    	; 0x1ce2 <__fp_split3>
    1d4e:	a0 f3       	brcs	.-24     	; 0x1d38 <__mulsf3+0x4>

00001d50 <__mulsf3_pse>:
    1d50:	95 9f       	mul	r25, r21
    1d52:	d1 f3       	breq	.-12     	; 0x1d48 <__mulsf3+0x14>
    1d54:	95 0f       	add	r25, r21
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	55 1f       	adc	r21, r21
    1d5a:	62 9f       	mul	r22, r18
    1d5c:	f0 01       	movw	r30, r0
    1d5e:	72 9f       	mul	r23, r18
    1d60:	bb 27       	eor	r27, r27
    1d62:	f0 0d       	add	r31, r0
    1d64:	b1 1d       	adc	r27, r1
    1d66:	63 9f       	mul	r22, r19
    1d68:	aa 27       	eor	r26, r26
    1d6a:	f0 0d       	add	r31, r0
    1d6c:	b1 1d       	adc	r27, r1
    1d6e:	aa 1f       	adc	r26, r26
    1d70:	64 9f       	mul	r22, r20
    1d72:	66 27       	eor	r22, r22
    1d74:	b0 0d       	add	r27, r0
    1d76:	a1 1d       	adc	r26, r1
    1d78:	66 1f       	adc	r22, r22
    1d7a:	82 9f       	mul	r24, r18
    1d7c:	22 27       	eor	r18, r18
    1d7e:	b0 0d       	add	r27, r0
    1d80:	a1 1d       	adc	r26, r1
    1d82:	62 1f       	adc	r22, r18
    1d84:	73 9f       	mul	r23, r19
    1d86:	b0 0d       	add	r27, r0
    1d88:	a1 1d       	adc	r26, r1
    1d8a:	62 1f       	adc	r22, r18
    1d8c:	83 9f       	mul	r24, r19
    1d8e:	a0 0d       	add	r26, r0
    1d90:	61 1d       	adc	r22, r1
    1d92:	22 1f       	adc	r18, r18
    1d94:	74 9f       	mul	r23, r20
    1d96:	33 27       	eor	r19, r19
    1d98:	a0 0d       	add	r26, r0
    1d9a:	61 1d       	adc	r22, r1
    1d9c:	23 1f       	adc	r18, r19
    1d9e:	84 9f       	mul	r24, r20
    1da0:	60 0d       	add	r22, r0
    1da2:	21 1d       	adc	r18, r1
    1da4:	82 2f       	mov	r24, r18
    1da6:	76 2f       	mov	r23, r22
    1da8:	6a 2f       	mov	r22, r26
    1daa:	11 24       	eor	r1, r1
    1dac:	9f 57       	subi	r25, 0x7F	; 127
    1dae:	50 40       	sbci	r21, 0x00	; 0
    1db0:	8a f0       	brmi	.+34     	; 0x1dd4 <__mulsf3_pse+0x84>
    1db2:	e1 f0       	breq	.+56     	; 0x1dec <__mulsf3_pse+0x9c>
    1db4:	88 23       	and	r24, r24
    1db6:	4a f0       	brmi	.+18     	; 0x1dca <__mulsf3_pse+0x7a>
    1db8:	ee 0f       	add	r30, r30
    1dba:	ff 1f       	adc	r31, r31
    1dbc:	bb 1f       	adc	r27, r27
    1dbe:	66 1f       	adc	r22, r22
    1dc0:	77 1f       	adc	r23, r23
    1dc2:	88 1f       	adc	r24, r24
    1dc4:	91 50       	subi	r25, 0x01	; 1
    1dc6:	50 40       	sbci	r21, 0x00	; 0
    1dc8:	a9 f7       	brne	.-22     	; 0x1db4 <__mulsf3_pse+0x64>
    1dca:	9e 3f       	cpi	r25, 0xFE	; 254
    1dcc:	51 05       	cpc	r21, r1
    1dce:	70 f0       	brcs	.+28     	; 0x1dec <__mulsf3_pse+0x9c>
    1dd0:	60 cf       	rjmp	.-320    	; 0x1c92 <__fp_inf>
    1dd2:	aa cf       	rjmp	.-172    	; 0x1d28 <__fp_szero>
    1dd4:	5f 3f       	cpi	r21, 0xFF	; 255
    1dd6:	ec f3       	brlt	.-6      	; 0x1dd2 <__mulsf3_pse+0x82>
    1dd8:	98 3e       	cpi	r25, 0xE8	; 232
    1dda:	dc f3       	brlt	.-10     	; 0x1dd2 <__mulsf3_pse+0x82>
    1ddc:	86 95       	lsr	r24
    1dde:	77 95       	ror	r23
    1de0:	67 95       	ror	r22
    1de2:	b7 95       	ror	r27
    1de4:	f7 95       	ror	r31
    1de6:	e7 95       	ror	r30
    1de8:	9f 5f       	subi	r25, 0xFF	; 255
    1dea:	c1 f7       	brne	.-16     	; 0x1ddc <__mulsf3_pse+0x8c>
    1dec:	fe 2b       	or	r31, r30
    1dee:	88 0f       	add	r24, r24
    1df0:	91 1d       	adc	r25, r1
    1df2:	96 95       	lsr	r25
    1df4:	87 95       	ror	r24
    1df6:	97 f9       	bld	r25, 7
    1df8:	08 95       	ret

00001dfa <__umulhisi3>:
    1dfa:	a2 9f       	mul	r26, r18
    1dfc:	b0 01       	movw	r22, r0
    1dfe:	b3 9f       	mul	r27, r19
    1e00:	c0 01       	movw	r24, r0
    1e02:	a3 9f       	mul	r26, r19
    1e04:	70 0d       	add	r23, r0
    1e06:	81 1d       	adc	r24, r1
    1e08:	11 24       	eor	r1, r1
    1e0a:	91 1d       	adc	r25, r1
    1e0c:	b2 9f       	mul	r27, r18
    1e0e:	70 0d       	add	r23, r0
    1e10:	81 1d       	adc	r24, r1
    1e12:	11 24       	eor	r1, r1
    1e14:	91 1d       	adc	r25, r1
    1e16:	08 95       	ret

00001e18 <printf>:
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
    1e20:	fe 01       	movw	r30, r28
    1e22:	35 96       	adiw	r30, 0x05	; 5
    1e24:	61 91       	ld	r22, Z+
    1e26:	71 91       	ld	r23, Z+
    1e28:	af 01       	movw	r20, r30
    1e2a:	80 91 f4 23 	lds	r24, 0x23F4
    1e2e:	90 91 f5 23 	lds	r25, 0x23F5
    1e32:	30 d0       	rcall	.+96     	; 0x1e94 <vfprintf>
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	08 95       	ret

00001e3a <puts>:
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	e0 91 f4 23 	lds	r30, 0x23F4
    1e46:	f0 91 f5 23 	lds	r31, 0x23F5
    1e4a:	23 81       	ldd	r18, Z+3	; 0x03
    1e4c:	21 ff       	sbrs	r18, 1
    1e4e:	1b c0       	rjmp	.+54     	; 0x1e86 <puts+0x4c>
    1e50:	ec 01       	movw	r28, r24
    1e52:	00 e0       	ldi	r16, 0x00	; 0
    1e54:	10 e0       	ldi	r17, 0x00	; 0
    1e56:	89 91       	ld	r24, Y+
    1e58:	60 91 f4 23 	lds	r22, 0x23F4
    1e5c:	70 91 f5 23 	lds	r23, 0x23F5
    1e60:	db 01       	movw	r26, r22
    1e62:	18 96       	adiw	r26, 0x08	; 8
    1e64:	ed 91       	ld	r30, X+
    1e66:	fc 91       	ld	r31, X
    1e68:	19 97       	sbiw	r26, 0x09	; 9
    1e6a:	88 23       	and	r24, r24
    1e6c:	31 f0       	breq	.+12     	; 0x1e7a <puts+0x40>
    1e6e:	09 95       	icall
    1e70:	89 2b       	or	r24, r25
    1e72:	89 f3       	breq	.-30     	; 0x1e56 <puts+0x1c>
    1e74:	0f ef       	ldi	r16, 0xFF	; 255
    1e76:	1f ef       	ldi	r17, 0xFF	; 255
    1e78:	ee cf       	rjmp	.-36     	; 0x1e56 <puts+0x1c>
    1e7a:	8a e0       	ldi	r24, 0x0A	; 10
    1e7c:	09 95       	icall
    1e7e:	89 2b       	or	r24, r25
    1e80:	11 f4       	brne	.+4      	; 0x1e86 <puts+0x4c>
    1e82:	c8 01       	movw	r24, r16
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <puts+0x50>
    1e86:	8f ef       	ldi	r24, 0xFF	; 255
    1e88:	9f ef       	ldi	r25, 0xFF	; 255
    1e8a:	df 91       	pop	r29
    1e8c:	cf 91       	pop	r28
    1e8e:	1f 91       	pop	r17
    1e90:	0f 91       	pop	r16
    1e92:	08 95       	ret

00001e94 <vfprintf>:
    1e94:	2f 92       	push	r2
    1e96:	3f 92       	push	r3
    1e98:	4f 92       	push	r4
    1e9a:	5f 92       	push	r5
    1e9c:	6f 92       	push	r6
    1e9e:	7f 92       	push	r7
    1ea0:	8f 92       	push	r8
    1ea2:	9f 92       	push	r9
    1ea4:	af 92       	push	r10
    1ea6:	bf 92       	push	r11
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	2c 97       	sbiw	r28, 0x0c	; 12
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	7c 01       	movw	r14, r24
    1ec4:	6b 01       	movw	r12, r22
    1ec6:	8a 01       	movw	r16, r20
    1ec8:	fc 01       	movw	r30, r24
    1eca:	16 82       	std	Z+6, r1	; 0x06
    1ecc:	17 82       	std	Z+7, r1	; 0x07
    1ece:	83 81       	ldd	r24, Z+3	; 0x03
    1ed0:	81 ff       	sbrs	r24, 1
    1ed2:	b0 c1       	rjmp	.+864    	; 0x2234 <vfprintf+0x3a0>
    1ed4:	ce 01       	movw	r24, r28
    1ed6:	01 96       	adiw	r24, 0x01	; 1
    1ed8:	4c 01       	movw	r8, r24
    1eda:	f7 01       	movw	r30, r14
    1edc:	93 81       	ldd	r25, Z+3	; 0x03
    1ede:	f6 01       	movw	r30, r12
    1ee0:	93 fd       	sbrc	r25, 3
    1ee2:	85 91       	lpm	r24, Z+
    1ee4:	93 ff       	sbrs	r25, 3
    1ee6:	81 91       	ld	r24, Z+
    1ee8:	6f 01       	movw	r12, r30
    1eea:	88 23       	and	r24, r24
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <vfprintf+0x5c>
    1eee:	9e c1       	rjmp	.+828    	; 0x222c <vfprintf+0x398>
    1ef0:	85 32       	cpi	r24, 0x25	; 37
    1ef2:	39 f4       	brne	.+14     	; 0x1f02 <vfprintf+0x6e>
    1ef4:	93 fd       	sbrc	r25, 3
    1ef6:	85 91       	lpm	r24, Z+
    1ef8:	93 ff       	sbrs	r25, 3
    1efa:	81 91       	ld	r24, Z+
    1efc:	6f 01       	movw	r12, r30
    1efe:	85 32       	cpi	r24, 0x25	; 37
    1f00:	21 f4       	brne	.+8      	; 0x1f0a <vfprintf+0x76>
    1f02:	b7 01       	movw	r22, r14
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	c4 d1       	rcall	.+904    	; 0x2290 <fputc>
    1f08:	e8 cf       	rjmp	.-48     	; 0x1eda <vfprintf+0x46>
    1f0a:	51 2c       	mov	r5, r1
    1f0c:	31 2c       	mov	r3, r1
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	20 32       	cpi	r18, 0x20	; 32
    1f12:	a0 f4       	brcc	.+40     	; 0x1f3c <vfprintf+0xa8>
    1f14:	8b 32       	cpi	r24, 0x2B	; 43
    1f16:	69 f0       	breq	.+26     	; 0x1f32 <vfprintf+0x9e>
    1f18:	30 f4       	brcc	.+12     	; 0x1f26 <vfprintf+0x92>
    1f1a:	80 32       	cpi	r24, 0x20	; 32
    1f1c:	59 f0       	breq	.+22     	; 0x1f34 <vfprintf+0xa0>
    1f1e:	83 32       	cpi	r24, 0x23	; 35
    1f20:	69 f4       	brne	.+26     	; 0x1f3c <vfprintf+0xa8>
    1f22:	20 61       	ori	r18, 0x10	; 16
    1f24:	2c c0       	rjmp	.+88     	; 0x1f7e <vfprintf+0xea>
    1f26:	8d 32       	cpi	r24, 0x2D	; 45
    1f28:	39 f0       	breq	.+14     	; 0x1f38 <vfprintf+0xa4>
    1f2a:	80 33       	cpi	r24, 0x30	; 48
    1f2c:	39 f4       	brne	.+14     	; 0x1f3c <vfprintf+0xa8>
    1f2e:	21 60       	ori	r18, 0x01	; 1
    1f30:	26 c0       	rjmp	.+76     	; 0x1f7e <vfprintf+0xea>
    1f32:	22 60       	ori	r18, 0x02	; 2
    1f34:	24 60       	ori	r18, 0x04	; 4
    1f36:	23 c0       	rjmp	.+70     	; 0x1f7e <vfprintf+0xea>
    1f38:	28 60       	ori	r18, 0x08	; 8
    1f3a:	21 c0       	rjmp	.+66     	; 0x1f7e <vfprintf+0xea>
    1f3c:	27 fd       	sbrc	r18, 7
    1f3e:	27 c0       	rjmp	.+78     	; 0x1f8e <vfprintf+0xfa>
    1f40:	30 ed       	ldi	r19, 0xD0	; 208
    1f42:	38 0f       	add	r19, r24
    1f44:	3a 30       	cpi	r19, 0x0A	; 10
    1f46:	78 f4       	brcc	.+30     	; 0x1f66 <vfprintf+0xd2>
    1f48:	26 ff       	sbrs	r18, 6
    1f4a:	06 c0       	rjmp	.+12     	; 0x1f58 <vfprintf+0xc4>
    1f4c:	fa e0       	ldi	r31, 0x0A	; 10
    1f4e:	5f 9e       	mul	r5, r31
    1f50:	30 0d       	add	r19, r0
    1f52:	11 24       	eor	r1, r1
    1f54:	53 2e       	mov	r5, r19
    1f56:	13 c0       	rjmp	.+38     	; 0x1f7e <vfprintf+0xea>
    1f58:	8a e0       	ldi	r24, 0x0A	; 10
    1f5a:	38 9e       	mul	r3, r24
    1f5c:	30 0d       	add	r19, r0
    1f5e:	11 24       	eor	r1, r1
    1f60:	33 2e       	mov	r3, r19
    1f62:	20 62       	ori	r18, 0x20	; 32
    1f64:	0c c0       	rjmp	.+24     	; 0x1f7e <vfprintf+0xea>
    1f66:	8e 32       	cpi	r24, 0x2E	; 46
    1f68:	21 f4       	brne	.+8      	; 0x1f72 <vfprintf+0xde>
    1f6a:	26 fd       	sbrc	r18, 6
    1f6c:	5f c1       	rjmp	.+702    	; 0x222c <vfprintf+0x398>
    1f6e:	20 64       	ori	r18, 0x40	; 64
    1f70:	06 c0       	rjmp	.+12     	; 0x1f7e <vfprintf+0xea>
    1f72:	8c 36       	cpi	r24, 0x6C	; 108
    1f74:	11 f4       	brne	.+4      	; 0x1f7a <vfprintf+0xe6>
    1f76:	20 68       	ori	r18, 0x80	; 128
    1f78:	02 c0       	rjmp	.+4      	; 0x1f7e <vfprintf+0xea>
    1f7a:	88 36       	cpi	r24, 0x68	; 104
    1f7c:	41 f4       	brne	.+16     	; 0x1f8e <vfprintf+0xfa>
    1f7e:	f6 01       	movw	r30, r12
    1f80:	93 fd       	sbrc	r25, 3
    1f82:	85 91       	lpm	r24, Z+
    1f84:	93 ff       	sbrs	r25, 3
    1f86:	81 91       	ld	r24, Z+
    1f88:	6f 01       	movw	r12, r30
    1f8a:	81 11       	cpse	r24, r1
    1f8c:	c1 cf       	rjmp	.-126    	; 0x1f10 <vfprintf+0x7c>
    1f8e:	98 2f       	mov	r25, r24
    1f90:	9f 7d       	andi	r25, 0xDF	; 223
    1f92:	95 54       	subi	r25, 0x45	; 69
    1f94:	93 30       	cpi	r25, 0x03	; 3
    1f96:	28 f4       	brcc	.+10     	; 0x1fa2 <vfprintf+0x10e>
    1f98:	0c 5f       	subi	r16, 0xFC	; 252
    1f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9c:	ff e3       	ldi	r31, 0x3F	; 63
    1f9e:	f9 83       	std	Y+1, r31	; 0x01
    1fa0:	0d c0       	rjmp	.+26     	; 0x1fbc <vfprintf+0x128>
    1fa2:	83 36       	cpi	r24, 0x63	; 99
    1fa4:	31 f0       	breq	.+12     	; 0x1fb2 <vfprintf+0x11e>
    1fa6:	83 37       	cpi	r24, 0x73	; 115
    1fa8:	71 f0       	breq	.+28     	; 0x1fc6 <vfprintf+0x132>
    1faa:	83 35       	cpi	r24, 0x53	; 83
    1fac:	09 f0       	breq	.+2      	; 0x1fb0 <vfprintf+0x11c>
    1fae:	57 c0       	rjmp	.+174    	; 0x205e <vfprintf+0x1ca>
    1fb0:	21 c0       	rjmp	.+66     	; 0x1ff4 <vfprintf+0x160>
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	80 81       	ld	r24, Z
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	0e 5f       	subi	r16, 0xFE	; 254
    1fba:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbc:	44 24       	eor	r4, r4
    1fbe:	43 94       	inc	r4
    1fc0:	51 2c       	mov	r5, r1
    1fc2:	54 01       	movw	r10, r8
    1fc4:	14 c0       	rjmp	.+40     	; 0x1fee <vfprintf+0x15a>
    1fc6:	38 01       	movw	r6, r16
    1fc8:	f2 e0       	ldi	r31, 0x02	; 2
    1fca:	6f 0e       	add	r6, r31
    1fcc:	71 1c       	adc	r7, r1
    1fce:	f8 01       	movw	r30, r16
    1fd0:	a0 80       	ld	r10, Z
    1fd2:	b1 80       	ldd	r11, Z+1	; 0x01
    1fd4:	26 ff       	sbrs	r18, 6
    1fd6:	03 c0       	rjmp	.+6      	; 0x1fde <vfprintf+0x14a>
    1fd8:	65 2d       	mov	r22, r5
    1fda:	70 e0       	ldi	r23, 0x00	; 0
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <vfprintf+0x14e>
    1fde:	6f ef       	ldi	r22, 0xFF	; 255
    1fe0:	7f ef       	ldi	r23, 0xFF	; 255
    1fe2:	c5 01       	movw	r24, r10
    1fe4:	2c 87       	std	Y+12, r18	; 0x0c
    1fe6:	49 d1       	rcall	.+658    	; 0x227a <strnlen>
    1fe8:	2c 01       	movw	r4, r24
    1fea:	83 01       	movw	r16, r6
    1fec:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fee:	2f 77       	andi	r18, 0x7F	; 127
    1ff0:	22 2e       	mov	r2, r18
    1ff2:	16 c0       	rjmp	.+44     	; 0x2020 <vfprintf+0x18c>
    1ff4:	38 01       	movw	r6, r16
    1ff6:	f2 e0       	ldi	r31, 0x02	; 2
    1ff8:	6f 0e       	add	r6, r31
    1ffa:	71 1c       	adc	r7, r1
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	a0 80       	ld	r10, Z
    2000:	b1 80       	ldd	r11, Z+1	; 0x01
    2002:	26 ff       	sbrs	r18, 6
    2004:	03 c0       	rjmp	.+6      	; 0x200c <vfprintf+0x178>
    2006:	65 2d       	mov	r22, r5
    2008:	70 e0       	ldi	r23, 0x00	; 0
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <vfprintf+0x17c>
    200c:	6f ef       	ldi	r22, 0xFF	; 255
    200e:	7f ef       	ldi	r23, 0xFF	; 255
    2010:	c5 01       	movw	r24, r10
    2012:	2c 87       	std	Y+12, r18	; 0x0c
    2014:	27 d1       	rcall	.+590    	; 0x2264 <strnlen_P>
    2016:	2c 01       	movw	r4, r24
    2018:	2c 85       	ldd	r18, Y+12	; 0x0c
    201a:	20 68       	ori	r18, 0x80	; 128
    201c:	22 2e       	mov	r2, r18
    201e:	83 01       	movw	r16, r6
    2020:	23 fc       	sbrc	r2, 3
    2022:	19 c0       	rjmp	.+50     	; 0x2056 <vfprintf+0x1c2>
    2024:	83 2d       	mov	r24, r3
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	48 16       	cp	r4, r24
    202a:	59 06       	cpc	r5, r25
    202c:	a0 f4       	brcc	.+40     	; 0x2056 <vfprintf+0x1c2>
    202e:	b7 01       	movw	r22, r14
    2030:	80 e2       	ldi	r24, 0x20	; 32
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	2d d1       	rcall	.+602    	; 0x2290 <fputc>
    2036:	3a 94       	dec	r3
    2038:	f5 cf       	rjmp	.-22     	; 0x2024 <vfprintf+0x190>
    203a:	f5 01       	movw	r30, r10
    203c:	27 fc       	sbrc	r2, 7
    203e:	85 91       	lpm	r24, Z+
    2040:	27 fe       	sbrs	r2, 7
    2042:	81 91       	ld	r24, Z+
    2044:	5f 01       	movw	r10, r30
    2046:	b7 01       	movw	r22, r14
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	22 d1       	rcall	.+580    	; 0x2290 <fputc>
    204c:	31 10       	cpse	r3, r1
    204e:	3a 94       	dec	r3
    2050:	f1 e0       	ldi	r31, 0x01	; 1
    2052:	4f 1a       	sub	r4, r31
    2054:	51 08       	sbc	r5, r1
    2056:	41 14       	cp	r4, r1
    2058:	51 04       	cpc	r5, r1
    205a:	79 f7       	brne	.-34     	; 0x203a <vfprintf+0x1a6>
    205c:	de c0       	rjmp	.+444    	; 0x221a <vfprintf+0x386>
    205e:	84 36       	cpi	r24, 0x64	; 100
    2060:	11 f0       	breq	.+4      	; 0x2066 <vfprintf+0x1d2>
    2062:	89 36       	cpi	r24, 0x69	; 105
    2064:	31 f5       	brne	.+76     	; 0x20b2 <vfprintf+0x21e>
    2066:	f8 01       	movw	r30, r16
    2068:	27 ff       	sbrs	r18, 7
    206a:	07 c0       	rjmp	.+14     	; 0x207a <vfprintf+0x1e6>
    206c:	60 81       	ld	r22, Z
    206e:	71 81       	ldd	r23, Z+1	; 0x01
    2070:	82 81       	ldd	r24, Z+2	; 0x02
    2072:	93 81       	ldd	r25, Z+3	; 0x03
    2074:	0c 5f       	subi	r16, 0xFC	; 252
    2076:	1f 4f       	sbci	r17, 0xFF	; 255
    2078:	08 c0       	rjmp	.+16     	; 0x208a <vfprintf+0x1f6>
    207a:	60 81       	ld	r22, Z
    207c:	71 81       	ldd	r23, Z+1	; 0x01
    207e:	88 27       	eor	r24, r24
    2080:	77 fd       	sbrc	r23, 7
    2082:	80 95       	com	r24
    2084:	98 2f       	mov	r25, r24
    2086:	0e 5f       	subi	r16, 0xFE	; 254
    2088:	1f 4f       	sbci	r17, 0xFF	; 255
    208a:	2f 76       	andi	r18, 0x6F	; 111
    208c:	b2 2e       	mov	r11, r18
    208e:	97 ff       	sbrs	r25, 7
    2090:	09 c0       	rjmp	.+18     	; 0x20a4 <vfprintf+0x210>
    2092:	90 95       	com	r25
    2094:	80 95       	com	r24
    2096:	70 95       	com	r23
    2098:	61 95       	neg	r22
    209a:	7f 4f       	sbci	r23, 0xFF	; 255
    209c:	8f 4f       	sbci	r24, 0xFF	; 255
    209e:	9f 4f       	sbci	r25, 0xFF	; 255
    20a0:	20 68       	ori	r18, 0x80	; 128
    20a2:	b2 2e       	mov	r11, r18
    20a4:	2a e0       	ldi	r18, 0x0A	; 10
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	a4 01       	movw	r20, r8
    20aa:	24 d1       	rcall	.+584    	; 0x22f4 <__ultoa_invert>
    20ac:	a8 2e       	mov	r10, r24
    20ae:	a8 18       	sub	r10, r8
    20b0:	43 c0       	rjmp	.+134    	; 0x2138 <vfprintf+0x2a4>
    20b2:	85 37       	cpi	r24, 0x75	; 117
    20b4:	29 f4       	brne	.+10     	; 0x20c0 <vfprintf+0x22c>
    20b6:	2f 7e       	andi	r18, 0xEF	; 239
    20b8:	b2 2e       	mov	r11, r18
    20ba:	2a e0       	ldi	r18, 0x0A	; 10
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	25 c0       	rjmp	.+74     	; 0x210a <vfprintf+0x276>
    20c0:	f2 2f       	mov	r31, r18
    20c2:	f9 7f       	andi	r31, 0xF9	; 249
    20c4:	bf 2e       	mov	r11, r31
    20c6:	8f 36       	cpi	r24, 0x6F	; 111
    20c8:	c1 f0       	breq	.+48     	; 0x20fa <vfprintf+0x266>
    20ca:	18 f4       	brcc	.+6      	; 0x20d2 <vfprintf+0x23e>
    20cc:	88 35       	cpi	r24, 0x58	; 88
    20ce:	79 f0       	breq	.+30     	; 0x20ee <vfprintf+0x25a>
    20d0:	ad c0       	rjmp	.+346    	; 0x222c <vfprintf+0x398>
    20d2:	80 37       	cpi	r24, 0x70	; 112
    20d4:	19 f0       	breq	.+6      	; 0x20dc <vfprintf+0x248>
    20d6:	88 37       	cpi	r24, 0x78	; 120
    20d8:	21 f0       	breq	.+8      	; 0x20e2 <vfprintf+0x24e>
    20da:	a8 c0       	rjmp	.+336    	; 0x222c <vfprintf+0x398>
    20dc:	2f 2f       	mov	r18, r31
    20de:	20 61       	ori	r18, 0x10	; 16
    20e0:	b2 2e       	mov	r11, r18
    20e2:	b4 fe       	sbrs	r11, 4
    20e4:	0d c0       	rjmp	.+26     	; 0x2100 <vfprintf+0x26c>
    20e6:	8b 2d       	mov	r24, r11
    20e8:	84 60       	ori	r24, 0x04	; 4
    20ea:	b8 2e       	mov	r11, r24
    20ec:	09 c0       	rjmp	.+18     	; 0x2100 <vfprintf+0x26c>
    20ee:	24 ff       	sbrs	r18, 4
    20f0:	0a c0       	rjmp	.+20     	; 0x2106 <vfprintf+0x272>
    20f2:	9f 2f       	mov	r25, r31
    20f4:	96 60       	ori	r25, 0x06	; 6
    20f6:	b9 2e       	mov	r11, r25
    20f8:	06 c0       	rjmp	.+12     	; 0x2106 <vfprintf+0x272>
    20fa:	28 e0       	ldi	r18, 0x08	; 8
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	05 c0       	rjmp	.+10     	; 0x210a <vfprintf+0x276>
    2100:	20 e1       	ldi	r18, 0x10	; 16
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	02 c0       	rjmp	.+4      	; 0x210a <vfprintf+0x276>
    2106:	20 e1       	ldi	r18, 0x10	; 16
    2108:	32 e0       	ldi	r19, 0x02	; 2
    210a:	f8 01       	movw	r30, r16
    210c:	b7 fe       	sbrs	r11, 7
    210e:	07 c0       	rjmp	.+14     	; 0x211e <vfprintf+0x28a>
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	82 81       	ldd	r24, Z+2	; 0x02
    2116:	93 81       	ldd	r25, Z+3	; 0x03
    2118:	0c 5f       	subi	r16, 0xFC	; 252
    211a:	1f 4f       	sbci	r17, 0xFF	; 255
    211c:	06 c0       	rjmp	.+12     	; 0x212a <vfprintf+0x296>
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	0e 5f       	subi	r16, 0xFE	; 254
    2128:	1f 4f       	sbci	r17, 0xFF	; 255
    212a:	a4 01       	movw	r20, r8
    212c:	e3 d0       	rcall	.+454    	; 0x22f4 <__ultoa_invert>
    212e:	a8 2e       	mov	r10, r24
    2130:	a8 18       	sub	r10, r8
    2132:	fb 2d       	mov	r31, r11
    2134:	ff 77       	andi	r31, 0x7F	; 127
    2136:	bf 2e       	mov	r11, r31
    2138:	b6 fe       	sbrs	r11, 6
    213a:	0b c0       	rjmp	.+22     	; 0x2152 <vfprintf+0x2be>
    213c:	2b 2d       	mov	r18, r11
    213e:	2e 7f       	andi	r18, 0xFE	; 254
    2140:	a5 14       	cp	r10, r5
    2142:	50 f4       	brcc	.+20     	; 0x2158 <vfprintf+0x2c4>
    2144:	b4 fe       	sbrs	r11, 4
    2146:	0a c0       	rjmp	.+20     	; 0x215c <vfprintf+0x2c8>
    2148:	b2 fc       	sbrc	r11, 2
    214a:	08 c0       	rjmp	.+16     	; 0x215c <vfprintf+0x2c8>
    214c:	2b 2d       	mov	r18, r11
    214e:	2e 7e       	andi	r18, 0xEE	; 238
    2150:	05 c0       	rjmp	.+10     	; 0x215c <vfprintf+0x2c8>
    2152:	7a 2c       	mov	r7, r10
    2154:	2b 2d       	mov	r18, r11
    2156:	03 c0       	rjmp	.+6      	; 0x215e <vfprintf+0x2ca>
    2158:	7a 2c       	mov	r7, r10
    215a:	01 c0       	rjmp	.+2      	; 0x215e <vfprintf+0x2ca>
    215c:	75 2c       	mov	r7, r5
    215e:	24 ff       	sbrs	r18, 4
    2160:	0d c0       	rjmp	.+26     	; 0x217c <vfprintf+0x2e8>
    2162:	fe 01       	movw	r30, r28
    2164:	ea 0d       	add	r30, r10
    2166:	f1 1d       	adc	r31, r1
    2168:	80 81       	ld	r24, Z
    216a:	80 33       	cpi	r24, 0x30	; 48
    216c:	11 f4       	brne	.+4      	; 0x2172 <vfprintf+0x2de>
    216e:	29 7e       	andi	r18, 0xE9	; 233
    2170:	09 c0       	rjmp	.+18     	; 0x2184 <vfprintf+0x2f0>
    2172:	22 ff       	sbrs	r18, 2
    2174:	06 c0       	rjmp	.+12     	; 0x2182 <vfprintf+0x2ee>
    2176:	73 94       	inc	r7
    2178:	73 94       	inc	r7
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <vfprintf+0x2f0>
    217c:	82 2f       	mov	r24, r18
    217e:	86 78       	andi	r24, 0x86	; 134
    2180:	09 f0       	breq	.+2      	; 0x2184 <vfprintf+0x2f0>
    2182:	73 94       	inc	r7
    2184:	23 fd       	sbrc	r18, 3
    2186:	12 c0       	rjmp	.+36     	; 0x21ac <vfprintf+0x318>
    2188:	20 ff       	sbrs	r18, 0
    218a:	06 c0       	rjmp	.+12     	; 0x2198 <vfprintf+0x304>
    218c:	5a 2c       	mov	r5, r10
    218e:	73 14       	cp	r7, r3
    2190:	18 f4       	brcc	.+6      	; 0x2198 <vfprintf+0x304>
    2192:	53 0c       	add	r5, r3
    2194:	57 18       	sub	r5, r7
    2196:	73 2c       	mov	r7, r3
    2198:	73 14       	cp	r7, r3
    219a:	60 f4       	brcc	.+24     	; 0x21b4 <vfprintf+0x320>
    219c:	b7 01       	movw	r22, r14
    219e:	80 e2       	ldi	r24, 0x20	; 32
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	2c 87       	std	Y+12, r18	; 0x0c
    21a4:	75 d0       	rcall	.+234    	; 0x2290 <fputc>
    21a6:	73 94       	inc	r7
    21a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    21aa:	f6 cf       	rjmp	.-20     	; 0x2198 <vfprintf+0x304>
    21ac:	73 14       	cp	r7, r3
    21ae:	10 f4       	brcc	.+4      	; 0x21b4 <vfprintf+0x320>
    21b0:	37 18       	sub	r3, r7
    21b2:	01 c0       	rjmp	.+2      	; 0x21b6 <vfprintf+0x322>
    21b4:	31 2c       	mov	r3, r1
    21b6:	24 ff       	sbrs	r18, 4
    21b8:	11 c0       	rjmp	.+34     	; 0x21dc <vfprintf+0x348>
    21ba:	b7 01       	movw	r22, r14
    21bc:	80 e3       	ldi	r24, 0x30	; 48
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	2c 87       	std	Y+12, r18	; 0x0c
    21c2:	66 d0       	rcall	.+204    	; 0x2290 <fputc>
    21c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    21c6:	22 ff       	sbrs	r18, 2
    21c8:	16 c0       	rjmp	.+44     	; 0x21f6 <vfprintf+0x362>
    21ca:	21 ff       	sbrs	r18, 1
    21cc:	03 c0       	rjmp	.+6      	; 0x21d4 <vfprintf+0x340>
    21ce:	88 e5       	ldi	r24, 0x58	; 88
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <vfprintf+0x344>
    21d4:	88 e7       	ldi	r24, 0x78	; 120
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	b7 01       	movw	r22, r14
    21da:	0c c0       	rjmp	.+24     	; 0x21f4 <vfprintf+0x360>
    21dc:	82 2f       	mov	r24, r18
    21de:	86 78       	andi	r24, 0x86	; 134
    21e0:	51 f0       	breq	.+20     	; 0x21f6 <vfprintf+0x362>
    21e2:	21 fd       	sbrc	r18, 1
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <vfprintf+0x356>
    21e6:	80 e2       	ldi	r24, 0x20	; 32
    21e8:	01 c0       	rjmp	.+2      	; 0x21ec <vfprintf+0x358>
    21ea:	8b e2       	ldi	r24, 0x2B	; 43
    21ec:	27 fd       	sbrc	r18, 7
    21ee:	8d e2       	ldi	r24, 0x2D	; 45
    21f0:	b7 01       	movw	r22, r14
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	4d d0       	rcall	.+154    	; 0x2290 <fputc>
    21f6:	a5 14       	cp	r10, r5
    21f8:	30 f4       	brcc	.+12     	; 0x2206 <vfprintf+0x372>
    21fa:	b7 01       	movw	r22, r14
    21fc:	80 e3       	ldi	r24, 0x30	; 48
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	47 d0       	rcall	.+142    	; 0x2290 <fputc>
    2202:	5a 94       	dec	r5
    2204:	f8 cf       	rjmp	.-16     	; 0x21f6 <vfprintf+0x362>
    2206:	aa 94       	dec	r10
    2208:	f4 01       	movw	r30, r8
    220a:	ea 0d       	add	r30, r10
    220c:	f1 1d       	adc	r31, r1
    220e:	80 81       	ld	r24, Z
    2210:	b7 01       	movw	r22, r14
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	3d d0       	rcall	.+122    	; 0x2290 <fputc>
    2216:	a1 10       	cpse	r10, r1
    2218:	f6 cf       	rjmp	.-20     	; 0x2206 <vfprintf+0x372>
    221a:	33 20       	and	r3, r3
    221c:	09 f4       	brne	.+2      	; 0x2220 <vfprintf+0x38c>
    221e:	5d ce       	rjmp	.-838    	; 0x1eda <vfprintf+0x46>
    2220:	b7 01       	movw	r22, r14
    2222:	80 e2       	ldi	r24, 0x20	; 32
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	34 d0       	rcall	.+104    	; 0x2290 <fputc>
    2228:	3a 94       	dec	r3
    222a:	f7 cf       	rjmp	.-18     	; 0x221a <vfprintf+0x386>
    222c:	f7 01       	movw	r30, r14
    222e:	86 81       	ldd	r24, Z+6	; 0x06
    2230:	97 81       	ldd	r25, Z+7	; 0x07
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <vfprintf+0x3a4>
    2234:	8f ef       	ldi	r24, 0xFF	; 255
    2236:	9f ef       	ldi	r25, 0xFF	; 255
    2238:	2c 96       	adiw	r28, 0x0c	; 12
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	ff 90       	pop	r15
    2248:	ef 90       	pop	r14
    224a:	df 90       	pop	r13
    224c:	cf 90       	pop	r12
    224e:	bf 90       	pop	r11
    2250:	af 90       	pop	r10
    2252:	9f 90       	pop	r9
    2254:	8f 90       	pop	r8
    2256:	7f 90       	pop	r7
    2258:	6f 90       	pop	r6
    225a:	5f 90       	pop	r5
    225c:	4f 90       	pop	r4
    225e:	3f 90       	pop	r3
    2260:	2f 90       	pop	r2
    2262:	08 95       	ret

00002264 <strnlen_P>:
    2264:	fc 01       	movw	r30, r24
    2266:	05 90       	lpm	r0, Z+
    2268:	61 50       	subi	r22, 0x01	; 1
    226a:	70 40       	sbci	r23, 0x00	; 0
    226c:	01 10       	cpse	r0, r1
    226e:	d8 f7       	brcc	.-10     	; 0x2266 <strnlen_P+0x2>
    2270:	80 95       	com	r24
    2272:	90 95       	com	r25
    2274:	8e 0f       	add	r24, r30
    2276:	9f 1f       	adc	r25, r31
    2278:	08 95       	ret

0000227a <strnlen>:
    227a:	fc 01       	movw	r30, r24
    227c:	61 50       	subi	r22, 0x01	; 1
    227e:	70 40       	sbci	r23, 0x00	; 0
    2280:	01 90       	ld	r0, Z+
    2282:	01 10       	cpse	r0, r1
    2284:	d8 f7       	brcc	.-10     	; 0x227c <strnlen+0x2>
    2286:	80 95       	com	r24
    2288:	90 95       	com	r25
    228a:	8e 0f       	add	r24, r30
    228c:	9f 1f       	adc	r25, r31
    228e:	08 95       	ret

00002290 <fputc>:
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	18 2f       	mov	r17, r24
    229a:	09 2f       	mov	r16, r25
    229c:	eb 01       	movw	r28, r22
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	81 fd       	sbrc	r24, 1
    22a2:	03 c0       	rjmp	.+6      	; 0x22aa <fputc+0x1a>
    22a4:	8f ef       	ldi	r24, 0xFF	; 255
    22a6:	9f ef       	ldi	r25, 0xFF	; 255
    22a8:	20 c0       	rjmp	.+64     	; 0x22ea <fputc+0x5a>
    22aa:	82 ff       	sbrs	r24, 2
    22ac:	10 c0       	rjmp	.+32     	; 0x22ce <fputc+0x3e>
    22ae:	4e 81       	ldd	r20, Y+6	; 0x06
    22b0:	5f 81       	ldd	r21, Y+7	; 0x07
    22b2:	2c 81       	ldd	r18, Y+4	; 0x04
    22b4:	3d 81       	ldd	r19, Y+5	; 0x05
    22b6:	42 17       	cp	r20, r18
    22b8:	53 07       	cpc	r21, r19
    22ba:	7c f4       	brge	.+30     	; 0x22da <fputc+0x4a>
    22bc:	e8 81       	ld	r30, Y
    22be:	f9 81       	ldd	r31, Y+1	; 0x01
    22c0:	9f 01       	movw	r18, r30
    22c2:	2f 5f       	subi	r18, 0xFF	; 255
    22c4:	3f 4f       	sbci	r19, 0xFF	; 255
    22c6:	28 83       	st	Y, r18
    22c8:	39 83       	std	Y+1, r19	; 0x01
    22ca:	10 83       	st	Z, r17
    22cc:	06 c0       	rjmp	.+12     	; 0x22da <fputc+0x4a>
    22ce:	e8 85       	ldd	r30, Y+8	; 0x08
    22d0:	f9 85       	ldd	r31, Y+9	; 0x09
    22d2:	81 2f       	mov	r24, r17
    22d4:	09 95       	icall
    22d6:	89 2b       	or	r24, r25
    22d8:	29 f7       	brne	.-54     	; 0x22a4 <fputc+0x14>
    22da:	2e 81       	ldd	r18, Y+6	; 0x06
    22dc:	3f 81       	ldd	r19, Y+7	; 0x07
    22de:	2f 5f       	subi	r18, 0xFF	; 255
    22e0:	3f 4f       	sbci	r19, 0xFF	; 255
    22e2:	2e 83       	std	Y+6, r18	; 0x06
    22e4:	3f 83       	std	Y+7, r19	; 0x07
    22e6:	81 2f       	mov	r24, r17
    22e8:	90 2f       	mov	r25, r16
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	0f 91       	pop	r16
    22f2:	08 95       	ret

000022f4 <__ultoa_invert>:
    22f4:	fa 01       	movw	r30, r20
    22f6:	aa 27       	eor	r26, r26
    22f8:	28 30       	cpi	r18, 0x08	; 8
    22fa:	51 f1       	breq	.+84     	; 0x2350 <__ultoa_invert+0x5c>
    22fc:	20 31       	cpi	r18, 0x10	; 16
    22fe:	81 f1       	breq	.+96     	; 0x2360 <__ultoa_invert+0x6c>
    2300:	e8 94       	clt
    2302:	6f 93       	push	r22
    2304:	6e 7f       	andi	r22, 0xFE	; 254
    2306:	6e 5f       	subi	r22, 0xFE	; 254
    2308:	7f 4f       	sbci	r23, 0xFF	; 255
    230a:	8f 4f       	sbci	r24, 0xFF	; 255
    230c:	9f 4f       	sbci	r25, 0xFF	; 255
    230e:	af 4f       	sbci	r26, 0xFF	; 255
    2310:	b1 e0       	ldi	r27, 0x01	; 1
    2312:	3e d0       	rcall	.+124    	; 0x2390 <__ultoa_invert+0x9c>
    2314:	b4 e0       	ldi	r27, 0x04	; 4
    2316:	3c d0       	rcall	.+120    	; 0x2390 <__ultoa_invert+0x9c>
    2318:	67 0f       	add	r22, r23
    231a:	78 1f       	adc	r23, r24
    231c:	89 1f       	adc	r24, r25
    231e:	9a 1f       	adc	r25, r26
    2320:	a1 1d       	adc	r26, r1
    2322:	68 0f       	add	r22, r24
    2324:	79 1f       	adc	r23, r25
    2326:	8a 1f       	adc	r24, r26
    2328:	91 1d       	adc	r25, r1
    232a:	a1 1d       	adc	r26, r1
    232c:	6a 0f       	add	r22, r26
    232e:	71 1d       	adc	r23, r1
    2330:	81 1d       	adc	r24, r1
    2332:	91 1d       	adc	r25, r1
    2334:	a1 1d       	adc	r26, r1
    2336:	20 d0       	rcall	.+64     	; 0x2378 <__ultoa_invert+0x84>
    2338:	09 f4       	brne	.+2      	; 0x233c <__ultoa_invert+0x48>
    233a:	68 94       	set
    233c:	3f 91       	pop	r19
    233e:	2a e0       	ldi	r18, 0x0A	; 10
    2340:	26 9f       	mul	r18, r22
    2342:	11 24       	eor	r1, r1
    2344:	30 19       	sub	r19, r0
    2346:	30 5d       	subi	r19, 0xD0	; 208
    2348:	31 93       	st	Z+, r19
    234a:	de f6       	brtc	.-74     	; 0x2302 <__ultoa_invert+0xe>
    234c:	cf 01       	movw	r24, r30
    234e:	08 95       	ret
    2350:	46 2f       	mov	r20, r22
    2352:	47 70       	andi	r20, 0x07	; 7
    2354:	40 5d       	subi	r20, 0xD0	; 208
    2356:	41 93       	st	Z+, r20
    2358:	b3 e0       	ldi	r27, 0x03	; 3
    235a:	0f d0       	rcall	.+30     	; 0x237a <__ultoa_invert+0x86>
    235c:	c9 f7       	brne	.-14     	; 0x2350 <__ultoa_invert+0x5c>
    235e:	f6 cf       	rjmp	.-20     	; 0x234c <__ultoa_invert+0x58>
    2360:	46 2f       	mov	r20, r22
    2362:	4f 70       	andi	r20, 0x0F	; 15
    2364:	40 5d       	subi	r20, 0xD0	; 208
    2366:	4a 33       	cpi	r20, 0x3A	; 58
    2368:	18 f0       	brcs	.+6      	; 0x2370 <__ultoa_invert+0x7c>
    236a:	49 5d       	subi	r20, 0xD9	; 217
    236c:	31 fd       	sbrc	r19, 1
    236e:	40 52       	subi	r20, 0x20	; 32
    2370:	41 93       	st	Z+, r20
    2372:	02 d0       	rcall	.+4      	; 0x2378 <__ultoa_invert+0x84>
    2374:	a9 f7       	brne	.-22     	; 0x2360 <__ultoa_invert+0x6c>
    2376:	ea cf       	rjmp	.-44     	; 0x234c <__ultoa_invert+0x58>
    2378:	b4 e0       	ldi	r27, 0x04	; 4
    237a:	a6 95       	lsr	r26
    237c:	97 95       	ror	r25
    237e:	87 95       	ror	r24
    2380:	77 95       	ror	r23
    2382:	67 95       	ror	r22
    2384:	ba 95       	dec	r27
    2386:	c9 f7       	brne	.-14     	; 0x237a <__ultoa_invert+0x86>
    2388:	00 97       	sbiw	r24, 0x00	; 0
    238a:	61 05       	cpc	r22, r1
    238c:	71 05       	cpc	r23, r1
    238e:	08 95       	ret
    2390:	9b 01       	movw	r18, r22
    2392:	ac 01       	movw	r20, r24
    2394:	0a 2e       	mov	r0, r26
    2396:	06 94       	lsr	r0
    2398:	57 95       	ror	r21
    239a:	47 95       	ror	r20
    239c:	37 95       	ror	r19
    239e:	27 95       	ror	r18
    23a0:	ba 95       	dec	r27
    23a2:	c9 f7       	brne	.-14     	; 0x2396 <__ultoa_invert+0xa2>
    23a4:	62 0f       	add	r22, r18
    23a6:	73 1f       	adc	r23, r19
    23a8:	84 1f       	adc	r24, r20
    23aa:	95 1f       	adc	r25, r21
    23ac:	a0 1d       	adc	r26, r0
    23ae:	08 95       	ret

000023b0 <_exit>:
    23b0:	f8 94       	cli

000023b2 <__stop_program>:
    23b2:	ff cf       	rjmp	.-2      	; 0x23b2 <__stop_program>
