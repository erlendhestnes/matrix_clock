
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001f6  00802000  00003e38  00003ecc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000cb5  008021f6  008021f6  000040c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000040c2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000830  00000000  00000000  0000411e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ee69  00000000  00000000  0000494e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002d00  00000000  00000000  000137b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007234  00000000  00000000  000164b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001f00  00000000  00000000  0001d6ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003021  00000000  00000000  0001f5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d511  00000000  00000000  0002260d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000858  00000000  00000000  0002fb1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	88 c1       	rjmp	.+784    	; 0x312 <__ctors_end>
       2:	00 00       	nop
       4:	a5 c1       	rjmp	.+842    	; 0x350 <__bad_interrupt>
       6:	00 00       	nop
       8:	a3 c1       	rjmp	.+838    	; 0x350 <__bad_interrupt>
       a:	00 00       	nop
       c:	a1 c1       	rjmp	.+834    	; 0x350 <__bad_interrupt>
       e:	00 00       	nop
      10:	9f c1       	rjmp	.+830    	; 0x350 <__bad_interrupt>
      12:	00 00       	nop
      14:	9d c1       	rjmp	.+826    	; 0x350 <__bad_interrupt>
      16:	00 00       	nop
      18:	9b c1       	rjmp	.+822    	; 0x350 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	99 c1       	rjmp	.+818    	; 0x350 <__bad_interrupt>
      1e:	00 00       	nop
      20:	97 c1       	rjmp	.+814    	; 0x350 <__bad_interrupt>
      22:	00 00       	nop
      24:	95 c1       	rjmp	.+810    	; 0x350 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <__vector_10>
      2c:	91 c1       	rjmp	.+802    	; 0x350 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8f c1       	rjmp	.+798    	; 0x350 <__bad_interrupt>
      32:	00 00       	nop
      34:	8d c1       	rjmp	.+794    	; 0x350 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__vector_14>
      3c:	89 c1       	rjmp	.+786    	; 0x350 <__bad_interrupt>
      3e:	00 00       	nop
      40:	87 c1       	rjmp	.+782    	; 0x350 <__bad_interrupt>
      42:	00 00       	nop
      44:	85 c1       	rjmp	.+778    	; 0x350 <__bad_interrupt>
      46:	00 00       	nop
      48:	83 c1       	rjmp	.+774    	; 0x350 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	81 c1       	rjmp	.+770    	; 0x350 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 63 1c 	jmp	0x38c6	; 0x38c6 <__vector_20>
      54:	7d c1       	rjmp	.+762    	; 0x350 <__bad_interrupt>
      56:	00 00       	nop
      58:	7b c1       	rjmp	.+758    	; 0x350 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	79 c1       	rjmp	.+754    	; 0x350 <__bad_interrupt>
      5e:	00 00       	nop
      60:	77 c1       	rjmp	.+750    	; 0x350 <__bad_interrupt>
      62:	00 00       	nop
      64:	75 c1       	rjmp	.+746    	; 0x350 <__bad_interrupt>
      66:	00 00       	nop
      68:	73 c1       	rjmp	.+742    	; 0x350 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	71 c1       	rjmp	.+738    	; 0x350 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6f c1       	rjmp	.+734    	; 0x350 <__bad_interrupt>
      72:	00 00       	nop
      74:	6d c1       	rjmp	.+730    	; 0x350 <__bad_interrupt>
      76:	00 00       	nop
      78:	6b c1       	rjmp	.+726    	; 0x350 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	69 c1       	rjmp	.+722    	; 0x350 <__bad_interrupt>
      7e:	00 00       	nop
      80:	67 c1       	rjmp	.+718    	; 0x350 <__bad_interrupt>
      82:	00 00       	nop
      84:	65 c1       	rjmp	.+714    	; 0x350 <__bad_interrupt>
      86:	00 00       	nop
      88:	63 c1       	rjmp	.+710    	; 0x350 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	61 c1       	rjmp	.+706    	; 0x350 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5f c1       	rjmp	.+702    	; 0x350 <__bad_interrupt>
      92:	00 00       	nop
      94:	5d c1       	rjmp	.+698    	; 0x350 <__bad_interrupt>
      96:	00 00       	nop
      98:	5b c1       	rjmp	.+694    	; 0x350 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	59 c1       	rjmp	.+690    	; 0x350 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	57 c1       	rjmp	.+686    	; 0x350 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	55 c1       	rjmp	.+682    	; 0x350 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	53 c1       	rjmp	.+678    	; 0x350 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	51 c1       	rjmp	.+674    	; 0x350 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4f c1       	rjmp	.+670    	; 0x350 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	4d c1       	rjmp	.+666    	; 0x350 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	4b c1       	rjmp	.+662    	; 0x350 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	49 c1       	rjmp	.+658    	; 0x350 <__bad_interrupt>
      be:	00 00       	nop
      c0:	47 c1       	rjmp	.+654    	; 0x350 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	45 c1       	rjmp	.+650    	; 0x350 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	43 c1       	rjmp	.+646    	; 0x350 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	41 c1       	rjmp	.+642    	; 0x350 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3f c1       	rjmp	.+638    	; 0x350 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	3d c1       	rjmp	.+634    	; 0x350 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	3b c1       	rjmp	.+630    	; 0x350 <__bad_interrupt>
      da:	00 00       	nop
      dc:	39 c1       	rjmp	.+626    	; 0x350 <__bad_interrupt>
      de:	00 00       	nop
      e0:	37 c1       	rjmp	.+622    	; 0x350 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	35 c1       	rjmp	.+618    	; 0x350 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	33 c1       	rjmp	.+614    	; 0x350 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	31 c1       	rjmp	.+610    	; 0x350 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	2f c1       	rjmp	.+606    	; 0x350 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	2d c1       	rjmp	.+602    	; 0x350 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	2b c1       	rjmp	.+598    	; 0x350 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	29 c1       	rjmp	.+594    	; 0x350 <__bad_interrupt>
      fe:	00 00       	nop
     100:	27 c1       	rjmp	.+590    	; 0x350 <__bad_interrupt>
     102:	00 00       	nop
     104:	25 c1       	rjmp	.+586    	; 0x350 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <__vector_66>
     10c:	21 c1       	rjmp	.+578    	; 0x350 <__bad_interrupt>
     10e:	00 00       	nop
     110:	1f c1       	rjmp	.+574    	; 0x350 <__bad_interrupt>
     112:	00 00       	nop
     114:	1d c1       	rjmp	.+570    	; 0x350 <__bad_interrupt>
     116:	00 00       	nop
     118:	1b c1       	rjmp	.+566    	; 0x350 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	19 c1       	rjmp	.+562    	; 0x350 <__bad_interrupt>
     11e:	00 00       	nop
     120:	17 c1       	rjmp	.+558    	; 0x350 <__bad_interrupt>
     122:	00 00       	nop
     124:	15 c1       	rjmp	.+554    	; 0x350 <__bad_interrupt>
     126:	00 00       	nop
     128:	13 c1       	rjmp	.+550    	; 0x350 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	11 c1       	rjmp	.+546    	; 0x350 <__bad_interrupt>
     12e:	00 00       	nop
     130:	0f c1       	rjmp	.+542    	; 0x350 <__bad_interrupt>
     132:	00 00       	nop
     134:	0d c1       	rjmp	.+538    	; 0x350 <__bad_interrupt>
     136:	00 00       	nop
     138:	0b c1       	rjmp	.+534    	; 0x350 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	09 c1       	rjmp	.+530    	; 0x350 <__bad_interrupt>
     13e:	00 00       	nop
     140:	07 c1       	rjmp	.+526    	; 0x350 <__bad_interrupt>
     142:	00 00       	nop
     144:	05 c1       	rjmp	.+522    	; 0x350 <__bad_interrupt>
     146:	00 00       	nop
     148:	03 c1       	rjmp	.+518    	; 0x350 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	01 c1       	rjmp	.+514    	; 0x350 <__bad_interrupt>
     14e:	00 00       	nop
     150:	ff c0       	rjmp	.+510    	; 0x350 <__bad_interrupt>
     152:	00 00       	nop
     154:	fd c0       	rjmp	.+506    	; 0x350 <__bad_interrupt>
     156:	00 00       	nop
     158:	fb c0       	rjmp	.+502    	; 0x350 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	f9 c0       	rjmp	.+498    	; 0x350 <__bad_interrupt>
     15e:	00 00       	nop
     160:	bf c2       	rjmp	.+1406   	; 0x6e0 <__vector_88>
     162:	00 00       	nop
     164:	f5 c0       	rjmp	.+490    	; 0x350 <__bad_interrupt>
     166:	00 00       	nop
     168:	f3 c0       	rjmp	.+486    	; 0x350 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	f1 c0       	rjmp	.+482    	; 0x350 <__bad_interrupt>
     16e:	00 00       	nop
     170:	ef c0       	rjmp	.+478    	; 0x350 <__bad_interrupt>
     172:	00 00       	nop
     174:	ed c0       	rjmp	.+474    	; 0x350 <__bad_interrupt>
     176:	00 00       	nop
     178:	eb c0       	rjmp	.+470    	; 0x350 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e9 c0       	rjmp	.+466    	; 0x350 <__bad_interrupt>
     17e:	00 00       	nop
     180:	e7 c0       	rjmp	.+462    	; 0x350 <__bad_interrupt>
     182:	00 00       	nop
     184:	e5 c0       	rjmp	.+458    	; 0x350 <__bad_interrupt>
     186:	00 00       	nop
     188:	e3 c0       	rjmp	.+454    	; 0x350 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	e1 c0       	rjmp	.+450    	; 0x350 <__bad_interrupt>
     18e:	00 00       	nop
     190:	df c0       	rjmp	.+446    	; 0x350 <__bad_interrupt>
     192:	00 00       	nop
     194:	dd c0       	rjmp	.+442    	; 0x350 <__bad_interrupt>
     196:	00 00       	nop
     198:	db c0       	rjmp	.+438    	; 0x350 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d9 c0       	rjmp	.+434    	; 0x350 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	d7 c0       	rjmp	.+430    	; 0x350 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	d5 c0       	rjmp	.+426    	; 0x350 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	d3 c0       	rjmp	.+422    	; 0x350 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	d1 c0       	rjmp	.+418    	; 0x350 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	cf c0       	rjmp	.+414    	; 0x350 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	cd c0       	rjmp	.+410    	; 0x350 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	cb c0       	rjmp	.+406    	; 0x350 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	c9 c0       	rjmp	.+402    	; 0x350 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	c7 c0       	rjmp	.+398    	; 0x350 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	c5 c0       	rjmp	.+394    	; 0x350 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	c3 c0       	rjmp	.+390    	; 0x350 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	c1 c0       	rjmp	.+386    	; 0x350 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	bf c0       	rjmp	.+382    	; 0x350 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	bd c0       	rjmp	.+378    	; 0x350 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	bb c0       	rjmp	.+374    	; 0x350 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b9 c0       	rjmp	.+370    	; 0x350 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	b7 c0       	rjmp	.+366    	; 0x350 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	b5 c0       	rjmp	.+362    	; 0x350 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	b3 c0       	rjmp	.+358    	; 0x350 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	b1 c0       	rjmp	.+354    	; 0x350 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	af c0       	rjmp	.+350    	; 0x350 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	ad c0       	rjmp	.+346    	; 0x350 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	ab c0       	rjmp	.+342    	; 0x350 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	9e 15       	cp	r25, r14
     1fe:	a5 15       	cp	r26, r5
     200:	f8 16       	cp	r15, r24
     202:	16 16       	cp	r1, r22
     204:	f8 16       	cp	r15, r24
     206:	f8 16       	cp	r15, r24
     208:	f8 16       	cp	r15, r24
     20a:	f0 16       	cp	r15, r16
     20c:	f8 16       	cp	r15, r24
     20e:	f8 16       	cp	r15, r24
     210:	f8 16       	cp	r15, r24
     212:	f8 16       	cp	r15, r24
     214:	f8 16       	cp	r15, r24
     216:	f8 16       	cp	r15, r24
     218:	f8 16       	cp	r15, r24
     21a:	f8 16       	cp	r15, r24
     21c:	f8 16       	cp	r15, r24
     21e:	f8 16       	cp	r15, r24
     220:	f8 16       	cp	r15, r24
     222:	f8 16       	cp	r15, r24
     224:	f8 16       	cp	r15, r24
     226:	f8 16       	cp	r15, r24
     228:	f8 16       	cp	r15, r24
     22a:	f8 16       	cp	r15, r24
     22c:	f8 16       	cp	r15, r24
     22e:	f8 16       	cp	r15, r24
     230:	f8 16       	cp	r15, r24
     232:	f8 16       	cp	r15, r24
     234:	f8 16       	cp	r15, r24
     236:	f8 16       	cp	r15, r24
     238:	f8 16       	cp	r15, r24
     23a:	f8 16       	cp	r15, r24
     23c:	f8 16       	cp	r15, r24
     23e:	f8 16       	cp	r15, r24
     240:	f8 16       	cp	r15, r24
     242:	f8 16       	cp	r15, r24
     244:	f8 16       	cp	r15, r24
     246:	f8 16       	cp	r15, r24
     248:	f8 16       	cp	r15, r24
     24a:	f8 16       	cp	r15, r24
     24c:	f8 16       	cp	r15, r24
     24e:	f8 16       	cp	r15, r24
     250:	f8 16       	cp	r15, r24
     252:	f8 16       	cp	r15, r24
     254:	f8 16       	cp	r15, r24
     256:	f8 16       	cp	r15, r24
     258:	f8 16       	cp	r15, r24
     25a:	f8 16       	cp	r15, r24
     25c:	f8 16       	cp	r15, r24
     25e:	f8 16       	cp	r15, r24
     260:	a2 16       	cp	r10, r18
     262:	a8 16       	cp	r10, r24
     264:	b9 16       	cp	r11, r25
     266:	ca 16       	cp	r12, r26
     268:	de 16       	cp	r13, r30
     26a:	26 1a       	sub	r2, r22
     26c:	20 1a       	sub	r2, r16
     26e:	20 1a       	sub	r2, r16
     270:	20 1a       	sub	r2, r16
     272:	20 1a       	sub	r2, r16
     274:	20 1a       	sub	r2, r16
     276:	20 1a       	sub	r2, r16
     278:	20 1a       	sub	r2, r16
     27a:	20 1a       	sub	r2, r16
     27c:	20 1a       	sub	r2, r16
     27e:	20 1a       	sub	r2, r16
     280:	20 1a       	sub	r2, r16
     282:	20 1a       	sub	r2, r16
     284:	26 1a       	sub	r2, r22
     286:	20 1a       	sub	r2, r16
     288:	20 1a       	sub	r2, r16
     28a:	20 1a       	sub	r2, r16
     28c:	20 1a       	sub	r2, r16
     28e:	20 1a       	sub	r2, r16
     290:	20 1a       	sub	r2, r16
     292:	20 1a       	sub	r2, r16
     294:	20 1a       	sub	r2, r16
     296:	20 1a       	sub	r2, r16
     298:	20 1a       	sub	r2, r16
     29a:	20 1a       	sub	r2, r16
     29c:	20 1a       	sub	r2, r16
     29e:	20 1a       	sub	r2, r16
     2a0:	20 1a       	sub	r2, r16
     2a2:	20 1a       	sub	r2, r16
     2a4:	20 1a       	sub	r2, r16
     2a6:	20 1a       	sub	r2, r16
     2a8:	20 1a       	sub	r2, r16
     2aa:	20 1a       	sub	r2, r16
     2ac:	20 1a       	sub	r2, r16
     2ae:	20 1a       	sub	r2, r16
     2b0:	20 1a       	sub	r2, r16
     2b2:	20 1a       	sub	r2, r16
     2b4:	20 1a       	sub	r2, r16
     2b6:	20 1a       	sub	r2, r16
     2b8:	20 1a       	sub	r2, r16
     2ba:	20 1a       	sub	r2, r16
     2bc:	20 1a       	sub	r2, r16
     2be:	20 1a       	sub	r2, r16
     2c0:	20 1a       	sub	r2, r16
     2c2:	20 1a       	sub	r2, r16
     2c4:	20 1a       	sub	r2, r16
     2c6:	20 1a       	sub	r2, r16
     2c8:	20 1a       	sub	r2, r16
     2ca:	20 1a       	sub	r2, r16
     2cc:	20 1a       	sub	r2, r16
     2ce:	20 1a       	sub	r2, r16
     2d0:	20 1a       	sub	r2, r16
     2d2:	20 1a       	sub	r2, r16
     2d4:	20 1a       	sub	r2, r16
     2d6:	20 1a       	sub	r2, r16
     2d8:	20 1a       	sub	r2, r16
     2da:	20 1a       	sub	r2, r16
     2dc:	20 1a       	sub	r2, r16
     2de:	26 1a       	sub	r2, r22
     2e0:	20 1a       	sub	r2, r16
     2e2:	20 1a       	sub	r2, r16
     2e4:	20 1a       	sub	r2, r16
     2e6:	20 1a       	sub	r2, r16
     2e8:	20 1a       	sub	r2, r16
     2ea:	26 1a       	sub	r2, r22
     2ec:	20 1a       	sub	r2, r16
     2ee:	20 1a       	sub	r2, r16
     2f0:	20 1a       	sub	r2, r16
     2f2:	26 1a       	sub	r2, r22
     2f4:	20 1a       	sub	r2, r16
     2f6:	20 1a       	sub	r2, r16
     2f8:	20 1a       	sub	r2, r16
     2fa:	20 1a       	sub	r2, r16
     2fc:	20 1a       	sub	r2, r16
     2fe:	20 1a       	sub	r2, r16
     300:	20 1a       	sub	r2, r16
     302:	26 1a       	sub	r2, r22
     304:	20 1a       	sub	r2, r16
     306:	20 1a       	sub	r2, r16
     308:	20 1a       	sub	r2, r16
     30a:	26 1a       	sub	r2, r22
     30c:	20 1a       	sub	r2, r16
     30e:	26 1a       	sub	r2, r22
     310:	da 19       	sub	r29, r10

00000312 <__ctors_end>:
     312:	11 24       	eor	r1, r1
     314:	1f be       	out	0x3f, r1	; 63
     316:	cf ef       	ldi	r28, 0xFF	; 255
     318:	cd bf       	out	0x3d, r28	; 61
     31a:	df e2       	ldi	r29, 0x2F	; 47
     31c:	de bf       	out	0x3e, r29	; 62

0000031e <__do_copy_data>:
     31e:	11 e2       	ldi	r17, 0x21	; 33
     320:	a0 e0       	ldi	r26, 0x00	; 0
     322:	b0 e2       	ldi	r27, 0x20	; 32
     324:	e8 e3       	ldi	r30, 0x38	; 56
     326:	fe e3       	ldi	r31, 0x3E	; 62
     328:	00 e0       	ldi	r16, 0x00	; 0
     32a:	0b bf       	out	0x3b, r16	; 59
     32c:	02 c0       	rjmp	.+4      	; 0x332 <__do_copy_data+0x14>
     32e:	07 90       	elpm	r0, Z+
     330:	0d 92       	st	X+, r0
     332:	a6 3f       	cpi	r26, 0xF6	; 246
     334:	b1 07       	cpc	r27, r17
     336:	d9 f7       	brne	.-10     	; 0x32e <__do_copy_data+0x10>

00000338 <__do_clear_bss>:
     338:	2e e2       	ldi	r18, 0x2E	; 46
     33a:	a6 ef       	ldi	r26, 0xF6	; 246
     33c:	b1 e2       	ldi	r27, 0x21	; 33
     33e:	01 c0       	rjmp	.+2      	; 0x342 <.do_clear_bss_start>

00000340 <.do_clear_bss_loop>:
     340:	1d 92       	st	X+, r1

00000342 <.do_clear_bss_start>:
     342:	ab 3a       	cpi	r26, 0xAB	; 171
     344:	b2 07       	cpc	r27, r18
     346:	e1 f7       	brne	.-8      	; 0x340 <.do_clear_bss_loop>
     348:	0e 94 02 1c 	call	0x3804	; 0x3804 <main>
     34c:	0c 94 1a 1f 	jmp	0x3e34	; 0x3e34 <_exit>

00000350 <__bad_interrupt>:
     350:	57 ce       	rjmp	.-850    	; 0x0 <__vectors>

00000352 <clock_setup_32_mhz>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
}

void clock_setup_32_mhz(void) {
	
	OSC.CTRL |= OSC_RC32MEN_bm;
     352:	e0 e5       	ldi	r30, 0x50	; 80
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	82 60       	ori	r24, 0x02	; 2
     35a:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     35c:	81 81       	ldd	r24, Z+1	; 0x01
     35e:	81 ff       	sbrs	r24, 1
     360:	fd cf       	rjmp	.-6      	; 0x35c <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
     362:	88 ed       	ldi	r24, 0xD8	; 216
     364:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	80 93 40 00 	sts	0x0040, r24
     36c:	08 95       	ret

0000036e <esp8266_setup>:
}

esp8266_status_t connectWiFi(void) {
	
  return SUCCESS;
}
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	10 92 f7 21 	sts	0x21F7, r1
     378:	10 92 f8 21 	sts	0x21F8, r1
     37c:	88 ec       	ldi	r24, 0xC8	; 200
     37e:	e5 e0       	ldi	r30, 0x05	; 5
     380:	f2 e2       	ldi	r31, 0x22	; 34
     382:	df 01       	movw	r26, r30
     384:	1d 92       	st	X+, r1
     386:	8a 95       	dec	r24
     388:	e9 f7       	brne	.-6      	; 0x384 <esp8266_setup+0x16>
     38a:	83 e1       	ldi	r24, 0x13	; 19
     38c:	90 e2       	ldi	r25, 0x20	; 32
     38e:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <puts>
     392:	bf ef       	ldi	r27, 0xFF	; 255
     394:	ef e4       	ldi	r30, 0x4F	; 79
     396:	f3 ec       	ldi	r31, 0xC3	; 195
     398:	b1 50       	subi	r27, 0x01	; 1
     39a:	e0 40       	sbci	r30, 0x00	; 0
     39c:	f0 40       	sbci	r31, 0x00	; 0
     39e:	e1 f7       	brne	.-8      	; 0x398 <esp8266_setup+0x2a>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <esp8266_setup+0x34>
     3a2:	00 00       	nop
     3a4:	10 92 f7 21 	sts	0x21F7, r1
     3a8:	10 92 f8 21 	sts	0x21F8, r1
     3ac:	88 ec       	ldi	r24, 0xC8	; 200
     3ae:	e5 e0       	ldi	r30, 0x05	; 5
     3b0:	f2 e2       	ldi	r31, 0x22	; 34
     3b2:	df 01       	movw	r26, r30
     3b4:	1d 92       	st	X+, r1
     3b6:	8a 95       	dec	r24
     3b8:	e9 f7       	brne	.-6      	; 0x3b4 <esp8266_setup+0x46>
     3ba:	8d e4       	ldi	r24, 0x4D	; 77
     3bc:	90 e2       	ldi	r25, 0x20	; 32
     3be:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <puts>
     3c2:	bf ef       	ldi	r27, 0xFF	; 255
     3c4:	e7 ea       	ldi	r30, 0xA7	; 167
     3c6:	f1 e6       	ldi	r31, 0x61	; 97
     3c8:	b1 50       	subi	r27, 0x01	; 1
     3ca:	e0 40       	sbci	r30, 0x00	; 0
     3cc:	f0 40       	sbci	r31, 0x00	; 0
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <esp8266_setup+0x5a>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <esp8266_setup+0x64>
     3d2:	00 00       	nop
     3d4:	65 e3       	ldi	r22, 0x35	; 53
     3d6:	71 e2       	ldi	r23, 0x21	; 33
     3d8:	85 e0       	ldi	r24, 0x05	; 5
     3da:	92 e2       	ldi	r25, 0x22	; 34
     3dc:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <strstr>
     3e0:	89 2b       	or	r24, r25
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <esp8266_setup+0x78>
     3e4:	5d c1       	rjmp	.+698    	; 0x6a0 <esp8266_setup+0x332>
     3e6:	10 92 f7 21 	sts	0x21F7, r1
     3ea:	10 92 f8 21 	sts	0x21F8, r1
     3ee:	88 ec       	ldi	r24, 0xC8	; 200
     3f0:	e5 e0       	ldi	r30, 0x05	; 5
     3f2:	f2 e2       	ldi	r31, 0x22	; 34
     3f4:	df 01       	movw	r26, r30
     3f6:	1d 92       	st	X+, r1
     3f8:	8a 95       	dec	r24
     3fa:	e9 f7       	brne	.-6      	; 0x3f6 <esp8266_setup+0x88>
     3fc:	8a e5       	ldi	r24, 0x5A	; 90
     3fe:	90 e2       	ldi	r25, 0x20	; 32
     400:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <puts>
     404:	bf ef       	ldi	r27, 0xFF	; 255
     406:	e7 ea       	ldi	r30, 0xA7	; 167
     408:	f1 e6       	ldi	r31, 0x61	; 97
     40a:	b1 50       	subi	r27, 0x01	; 1
     40c:	e0 40       	sbci	r30, 0x00	; 0
     40e:	f0 40       	sbci	r31, 0x00	; 0
     410:	e1 f7       	brne	.-8      	; 0x40a <esp8266_setup+0x9c>
     412:	00 c0       	rjmp	.+0      	; 0x414 <esp8266_setup+0xa6>
     414:	00 00       	nop
     416:	65 e3       	ldi	r22, 0x35	; 53
     418:	71 e2       	ldi	r23, 0x21	; 33
     41a:	85 e0       	ldi	r24, 0x05	; 5
     41c:	92 e2       	ldi	r25, 0x22	; 34
     41e:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <strstr>
     422:	89 2b       	or	r24, r25
     424:	09 f4       	brne	.+2      	; 0x428 <esp8266_setup+0xba>
     426:	3e c1       	rjmp	.+636    	; 0x6a4 <esp8266_setup+0x336>
     428:	10 92 f7 21 	sts	0x21F7, r1
     42c:	10 92 f8 21 	sts	0x21F8, r1
     430:	88 ec       	ldi	r24, 0xC8	; 200
     432:	e5 e0       	ldi	r30, 0x05	; 5
     434:	f2 e2       	ldi	r31, 0x22	; 34
     436:	df 01       	movw	r26, r30
     438:	1d 92       	st	X+, r1
     43a:	8a 95       	dec	r24
     43c:	e9 f7       	brne	.-6      	; 0x438 <esp8266_setup+0xca>
     43e:	86 e6       	ldi	r24, 0x66	; 102
     440:	90 e2       	ldi	r25, 0x20	; 32
     442:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <puts>
     446:	bf ef       	ldi	r27, 0xFF	; 255
     448:	e7 ea       	ldi	r30, 0xA7	; 167
     44a:	f1 e6       	ldi	r31, 0x61	; 97
     44c:	b1 50       	subi	r27, 0x01	; 1
     44e:	e0 40       	sbci	r30, 0x00	; 0
     450:	f0 40       	sbci	r31, 0x00	; 0
     452:	e1 f7       	brne	.-8      	; 0x44c <esp8266_setup+0xde>
     454:	00 c0       	rjmp	.+0      	; 0x456 <esp8266_setup+0xe8>
     456:	00 00       	nop
     458:	c3 e3       	ldi	r28, 0x33	; 51
     45a:	d3 e2       	ldi	r29, 0x23	; 35
     45c:	84 e6       	ldi	r24, 0x64	; 100
     45e:	de 01       	movw	r26, r28
     460:	1d 92       	st	X+, r1
     462:	8a 95       	dec	r24
     464:	e9 f7       	brne	.-6      	; 0x460 <esp8266_setup+0xf2>
     466:	de 01       	movw	r26, r28
     468:	0d 90       	ld	r0, X+
     46a:	00 20       	and	r0, r0
     46c:	e9 f7       	brne	.-6      	; 0x468 <esp8266_setup+0xfa>
     46e:	11 97       	sbiw	r26, 0x01	; 1
     470:	8b e0       	ldi	r24, 0x0B	; 11
     472:	e2 e7       	ldi	r30, 0x72	; 114
     474:	f0 e2       	ldi	r31, 0x20	; 32
     476:	01 90       	ld	r0, Z+
     478:	0d 92       	st	X+, r0
     47a:	8a 95       	dec	r24
     47c:	e1 f7       	brne	.-8      	; 0x476 <esp8266_setup+0x108>
     47e:	de 01       	movw	r26, r28
     480:	0d 90       	ld	r0, X+
     482:	00 20       	and	r0, r0
     484:	e9 f7       	brne	.-6      	; 0x480 <esp8266_setup+0x112>
     486:	11 97       	sbiw	r26, 0x01	; 1
     488:	8a e0       	ldi	r24, 0x0A	; 10
     48a:	ed e7       	ldi	r30, 0x7D	; 125
     48c:	f0 e2       	ldi	r31, 0x20	; 32
     48e:	01 90       	ld	r0, Z+
     490:	0d 92       	st	X+, r0
     492:	8a 95       	dec	r24
     494:	e1 f7       	brne	.-8      	; 0x48e <esp8266_setup+0x120>
     496:	fe 01       	movw	r30, r28
     498:	01 90       	ld	r0, Z+
     49a:	00 20       	and	r0, r0
     49c:	e9 f7       	brne	.-6      	; 0x498 <esp8266_setup+0x12a>
     49e:	31 97       	sbiw	r30, 0x01	; 1
     4a0:	82 e2       	ldi	r24, 0x22	; 34
     4a2:	9c e2       	ldi	r25, 0x2C	; 44
     4a4:	a2 e2       	ldi	r26, 0x22	; 34
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	80 83       	st	Z, r24
     4aa:	91 83       	std	Z+1, r25	; 0x01
     4ac:	a2 83       	std	Z+2, r26	; 0x02
     4ae:	b3 83       	std	Z+3, r27	; 0x03
     4b0:	de 01       	movw	r26, r28
     4b2:	0d 90       	ld	r0, X+
     4b4:	00 20       	and	r0, r0
     4b6:	e9 f7       	brne	.-6      	; 0x4b2 <esp8266_setup+0x144>
     4b8:	11 97       	sbiw	r26, 0x01	; 1
     4ba:	8b e0       	ldi	r24, 0x0B	; 11
     4bc:	e7 e8       	ldi	r30, 0x87	; 135
     4be:	f0 e2       	ldi	r31, 0x20	; 32
     4c0:	01 90       	ld	r0, Z+
     4c2:	0d 92       	st	X+, r0
     4c4:	8a 95       	dec	r24
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <esp8266_setup+0x152>
     4c8:	09 90       	ld	r0, Y+
     4ca:	00 20       	and	r0, r0
     4cc:	e9 f7       	brne	.-6      	; 0x4c8 <esp8266_setup+0x15a>
     4ce:	21 97       	sbiw	r28, 0x01	; 1
     4d0:	82 e2       	ldi	r24, 0x22	; 34
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	88 83       	st	Y, r24
     4d6:	99 83       	std	Y+1, r25	; 0x01
     4d8:	10 92 f7 21 	sts	0x21F7, r1
     4dc:	10 92 f8 21 	sts	0x21F8, r1
     4e0:	88 ec       	ldi	r24, 0xC8	; 200
     4e2:	e5 e0       	ldi	r30, 0x05	; 5
     4e4:	f2 e2       	ldi	r31, 0x22	; 34
     4e6:	df 01       	movw	r26, r30
     4e8:	1d 92       	st	X+, r1
     4ea:	8a 95       	dec	r24
     4ec:	e9 f7       	brne	.-6      	; 0x4e8 <esp8266_setup+0x17a>
     4ee:	83 e3       	ldi	r24, 0x33	; 51
     4f0:	93 e2       	ldi	r25, 0x23	; 35
     4f2:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <puts>
     4f6:	ba ea       	ldi	r27, 0xAA	; 170
     4f8:	e6 ee       	ldi	r30, 0xE6	; 230
     4fa:	f6 e9       	ldi	r31, 0x96	; 150
     4fc:	21 e0       	ldi	r18, 0x01	; 1
     4fe:	b1 50       	subi	r27, 0x01	; 1
     500:	e0 40       	sbci	r30, 0x00	; 0
     502:	f0 40       	sbci	r31, 0x00	; 0
     504:	20 40       	sbci	r18, 0x00	; 0
     506:	d9 f7       	brne	.-10     	; 0x4fe <esp8266_setup+0x190>
     508:	00 00       	nop
     50a:	10 92 f7 21 	sts	0x21F7, r1
     50e:	10 92 f8 21 	sts	0x21F8, r1
     512:	88 ec       	ldi	r24, 0xC8	; 200
     514:	e5 e0       	ldi	r30, 0x05	; 5
     516:	f2 e2       	ldi	r31, 0x22	; 34
     518:	df 01       	movw	r26, r30
     51a:	1d 92       	st	X+, r1
     51c:	8a 95       	dec	r24
     51e:	e9 f7       	brne	.-6      	; 0x51a <esp8266_setup+0x1ac>
     520:	82 e9       	ldi	r24, 0x92	; 146
     522:	90 e2       	ldi	r25, 0x20	; 32
     524:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <puts>
     528:	ba ea       	ldi	r27, 0xAA	; 170
     52a:	e6 ee       	ldi	r30, 0xE6	; 230
     52c:	f6 e9       	ldi	r31, 0x96	; 150
     52e:	21 e0       	ldi	r18, 0x01	; 1
     530:	b1 50       	subi	r27, 0x01	; 1
     532:	e0 40       	sbci	r30, 0x00	; 0
     534:	f0 40       	sbci	r31, 0x00	; 0
     536:	20 40       	sbci	r18, 0x00	; 0
     538:	d9 f7       	brne	.-10     	; 0x530 <esp8266_setup+0x1c2>
     53a:	00 00       	nop
     53c:	c3 e3       	ldi	r28, 0x33	; 51
     53e:	d3 e2       	ldi	r29, 0x23	; 35
     540:	84 e6       	ldi	r24, 0x64	; 100
     542:	de 01       	movw	r26, r28
     544:	1d 92       	st	X+, r1
     546:	8a 95       	dec	r24
     548:	e9 f7       	brne	.-6      	; 0x544 <esp8266_setup+0x1d6>
     54a:	de 01       	movw	r26, r28
     54c:	0d 90       	ld	r0, X+
     54e:	00 20       	and	r0, r0
     550:	e9 f7       	brne	.-6      	; 0x54c <esp8266_setup+0x1de>
     552:	11 97       	sbiw	r26, 0x01	; 1
     554:	84 e1       	ldi	r24, 0x14	; 20
     556:	ed e9       	ldi	r30, 0x9D	; 157
     558:	f0 e2       	ldi	r31, 0x20	; 32
     55a:	01 90       	ld	r0, Z+
     55c:	0d 92       	st	X+, r0
     55e:	8a 95       	dec	r24
     560:	e1 f7       	brne	.-8      	; 0x55a <esp8266_setup+0x1ec>
     562:	de 01       	movw	r26, r28
     564:	0d 90       	ld	r0, X+
     566:	00 20       	and	r0, r0
     568:	e9 f7       	brne	.-6      	; 0x564 <esp8266_setup+0x1f6>
     56a:	11 97       	sbiw	r26, 0x01	; 1
     56c:	83 e1       	ldi	r24, 0x13	; 19
     56e:	e1 eb       	ldi	r30, 0xB1	; 177
     570:	f0 e2       	ldi	r31, 0x20	; 32
     572:	01 90       	ld	r0, Z+
     574:	0d 92       	st	X+, r0
     576:	8a 95       	dec	r24
     578:	e1 f7       	brne	.-8      	; 0x572 <esp8266_setup+0x204>
     57a:	09 90       	ld	r0, Y+
     57c:	00 20       	and	r0, r0
     57e:	e9 f7       	brne	.-6      	; 0x57a <esp8266_setup+0x20c>
     580:	de 01       	movw	r26, r28
     582:	11 97       	sbiw	r26, 0x01	; 1
     584:	85 e0       	ldi	r24, 0x05	; 5
     586:	e4 ec       	ldi	r30, 0xC4	; 196
     588:	f0 e2       	ldi	r31, 0x20	; 32
     58a:	01 90       	ld	r0, Z+
     58c:	0d 92       	st	X+, r0
     58e:	8a 95       	dec	r24
     590:	e1 f7       	brne	.-8      	; 0x58a <esp8266_setup+0x21c>
     592:	10 92 f7 21 	sts	0x21F7, r1
     596:	10 92 f8 21 	sts	0x21F8, r1
     59a:	88 ec       	ldi	r24, 0xC8	; 200
     59c:	e5 e0       	ldi	r30, 0x05	; 5
     59e:	f2 e2       	ldi	r31, 0x22	; 34
     5a0:	df 01       	movw	r26, r30
     5a2:	1d 92       	st	X+, r1
     5a4:	8a 95       	dec	r24
     5a6:	e9 f7       	brne	.-6      	; 0x5a2 <esp8266_setup+0x234>
     5a8:	83 e3       	ldi	r24, 0x33	; 51
     5aa:	93 e2       	ldi	r25, 0x23	; 35
     5ac:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <puts>
     5b0:	bf ef       	ldi	r27, 0xFF	; 255
     5b2:	ef e4       	ldi	r30, 0x4F	; 79
     5b4:	f3 ec       	ldi	r31, 0xC3	; 195
     5b6:	b1 50       	subi	r27, 0x01	; 1
     5b8:	e0 40       	sbci	r30, 0x00	; 0
     5ba:	f0 40       	sbci	r31, 0x00	; 0
     5bc:	e1 f7       	brne	.-8      	; 0x5b6 <esp8266_setup+0x248>
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <esp8266_setup+0x252>
     5c0:	00 00       	nop
     5c2:	89 ec       	ldi	r24, 0xC9	; 201
     5c4:	90 e2       	ldi	r25, 0x20	; 32
     5c6:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <puts>
     5ca:	c3 e3       	ldi	r28, 0x33	; 51
     5cc:	d3 e2       	ldi	r29, 0x23	; 35
     5ce:	84 e6       	ldi	r24, 0x64	; 100
     5d0:	de 01       	movw	r26, r28
     5d2:	1d 92       	st	X+, r1
     5d4:	8a 95       	dec	r24
     5d6:	e9 f7       	brne	.-6      	; 0x5d2 <esp8266_setup+0x264>
     5d8:	de 01       	movw	r26, r28
     5da:	0d 90       	ld	r0, X+
     5dc:	00 20       	and	r0, r0
     5de:	e9 f7       	brne	.-6      	; 0x5da <esp8266_setup+0x26c>
     5e0:	11 97       	sbiw	r26, 0x01	; 1
     5e2:	85 e0       	ldi	r24, 0x05	; 5
     5e4:	e9 ed       	ldi	r30, 0xD9	; 217
     5e6:	f0 e2       	ldi	r31, 0x20	; 32
     5e8:	01 90       	ld	r0, Z+
     5ea:	0d 92       	st	X+, r0
     5ec:	8a 95       	dec	r24
     5ee:	e1 f7       	brne	.-8      	; 0x5e8 <esp8266_setup+0x27a>
     5f0:	de 01       	movw	r26, r28
     5f2:	0d 90       	ld	r0, X+
     5f4:	00 20       	and	r0, r0
     5f6:	e9 f7       	brne	.-6      	; 0x5f2 <esp8266_setup+0x284>
     5f8:	11 97       	sbiw	r26, 0x01	; 1
     5fa:	88 e4       	ldi	r24, 0x48	; 72
     5fc:	ee ed       	ldi	r30, 0xDE	; 222
     5fe:	f0 e2       	ldi	r31, 0x20	; 32
     600:	01 90       	ld	r0, Z+
     602:	0d 92       	st	X+, r0
     604:	8a 95       	dec	r24
     606:	e1 f7       	brne	.-8      	; 0x600 <esp8266_setup+0x292>
     608:	09 90       	ld	r0, Y+
     60a:	00 20       	and	r0, r0
     60c:	e9 f7       	brne	.-6      	; 0x608 <esp8266_setup+0x29a>
     60e:	de 01       	movw	r26, r28
     610:	11 97       	sbiw	r26, 0x01	; 1
     612:	8a e0       	ldi	r24, 0x0A	; 10
     614:	e6 e2       	ldi	r30, 0x26	; 38
     616:	f1 e2       	ldi	r31, 0x21	; 33
     618:	01 90       	ld	r0, Z+
     61a:	0d 92       	st	X+, r0
     61c:	8a 95       	dec	r24
     61e:	e1 f7       	brne	.-8      	; 0x618 <esp8266_setup+0x2aa>
     620:	10 92 f7 21 	sts	0x21F7, r1
     624:	10 92 f8 21 	sts	0x21F8, r1
     628:	88 ec       	ldi	r24, 0xC8	; 200
     62a:	e5 e0       	ldi	r30, 0x05	; 5
     62c:	f2 e2       	ldi	r31, 0x22	; 34
     62e:	df 01       	movw	r26, r30
     630:	1d 92       	st	X+, r1
     632:	8a 95       	dec	r24
     634:	e9 f7       	brne	.-6      	; 0x630 <esp8266_setup+0x2c2>
     636:	83 e3       	ldi	r24, 0x33	; 51
     638:	93 e2       	ldi	r25, 0x23	; 35
     63a:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <puts>
     63e:	bf ef       	ldi	r27, 0xFF	; 255
     640:	ef e4       	ldi	r30, 0x4F	; 79
     642:	f3 ec       	ldi	r31, 0xC3	; 195
     644:	b1 50       	subi	r27, 0x01	; 1
     646:	e0 40       	sbci	r30, 0x00	; 0
     648:	f0 40       	sbci	r31, 0x00	; 0
     64a:	e1 f7       	brne	.-8      	; 0x644 <esp8266_setup+0x2d6>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <esp8266_setup+0x2e0>
     64e:	00 00       	nop
     650:	ca e2       	ldi	r28, 0x2A	; 42
     652:	d0 e0       	ldi	r29, 0x00	; 0
     654:	18 ec       	ldi	r17, 0xC8	; 200
     656:	1b c0       	rjmp	.+54     	; 0x68e <esp8266_setup+0x320>
     658:	10 92 f7 21 	sts	0x21F7, r1
     65c:	10 92 f8 21 	sts	0x21F8, r1
     660:	e5 e0       	ldi	r30, 0x05	; 5
     662:	f2 e2       	ldi	r31, 0x22	; 34
     664:	df 01       	movw	r26, r30
     666:	21 2f       	mov	r18, r17
     668:	1d 92       	st	X+, r1
     66a:	2a 95       	dec	r18
     66c:	e9 f7       	brne	.-6      	; 0x668 <esp8266_setup+0x2fa>
     66e:	80 e5       	ldi	r24, 0x50	; 80
     670:	91 e2       	ldi	r25, 0x21	; 33
     672:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <puts>
     676:	3f ef       	ldi	r19, 0xFF	; 255
     678:	89 e6       	ldi	r24, 0x69	; 105
     67a:	98 e1       	ldi	r25, 0x18	; 24
     67c:	31 50       	subi	r19, 0x01	; 1
     67e:	80 40       	sbci	r24, 0x00	; 0
     680:	90 40       	sbci	r25, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <esp8266_setup+0x30e>
     684:	00 c0       	rjmp	.+0      	; 0x686 <esp8266_setup+0x318>
     686:	00 00       	nop
     688:	21 97       	sbiw	r28, 0x01	; 1
     68a:	20 97       	sbiw	r28, 0x00	; 0
     68c:	69 f0       	breq	.+26     	; 0x6a8 <esp8266_setup+0x33a>
     68e:	60 e3       	ldi	r22, 0x30	; 48
     690:	71 e2       	ldi	r23, 0x21	; 33
     692:	85 e0       	ldi	r24, 0x05	; 5
     694:	92 e2       	ldi	r25, 0x22	; 34
     696:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <strstr>
     69a:	89 2b       	or	r24, r25
     69c:	e9 f2       	breq	.-70     	; 0x658 <esp8266_setup+0x2ea>
     69e:	05 c0       	rjmp	.+10     	; 0x6aa <esp8266_setup+0x33c>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	03 c0       	rjmp	.+6      	; 0x6aa <esp8266_setup+0x33c>
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <esp8266_setup+0x33c>
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	08 95       	ret

000006b2 <esp8266_on>:
     6b2:	e0 e6       	ldi	r30, 0x60	; 96
     6b4:	f6 e0       	ldi	r31, 0x06	; 6
     6b6:	80 e2       	ldi	r24, 0x20	; 32
     6b8:	81 83       	std	Z+1, r24	; 0x01
     6ba:	85 83       	std	Z+5, r24	; 0x05
     6bc:	2f ef       	ldi	r18, 0xFF	; 255
     6be:	33 e2       	ldi	r19, 0x23	; 35
     6c0:	84 ef       	ldi	r24, 0xF4	; 244
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	21 50       	subi	r18, 0x01	; 1
     6c6:	30 40       	sbci	r19, 0x00	; 0
     6c8:	80 40       	sbci	r24, 0x00	; 0
     6ca:	90 40       	sbci	r25, 0x00	; 0
     6cc:	d9 f7       	brne	.-10     	; 0x6c4 <esp8266_on+0x12>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <esp8266_on+0x1e>
     6d0:	00 00       	nop
     6d2:	08 95       	ret

000006d4 <esp8266_off>:
     6d4:	e0 e6       	ldi	r30, 0x60	; 96
     6d6:	f6 e0       	ldi	r31, 0x06	; 6
     6d8:	86 81       	ldd	r24, Z+6	; 0x06
     6da:	80 63       	ori	r24, 0x30	; 48
     6dc:	86 83       	std	Z+6, r24	; 0x06
     6de:	08 95       	ret

000006e0 <__vector_88>:

ISR(USARTD0_RXC_vect) {
     6e0:	1f 92       	push	r1
     6e2:	0f 92       	push	r0
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	0f 92       	push	r0
     6e8:	11 24       	eor	r1, r1
     6ea:	0b b6       	in	r0, 0x3b	; 59
     6ec:	0f 92       	push	r0
     6ee:	2f 93       	push	r18
     6f0:	3f 93       	push	r19
     6f2:	8f 93       	push	r24
     6f4:	9f 93       	push	r25
     6f6:	ef 93       	push	r30
     6f8:	ff 93       	push	r31
	rx_buffer[rx_ptr++] = USARTD0.DATA;
     6fa:	80 91 f7 21 	lds	r24, 0x21F7
     6fe:	90 91 f8 21 	lds	r25, 0x21F8
     702:	9c 01       	movw	r18, r24
     704:	2f 5f       	subi	r18, 0xFF	; 255
     706:	3f 4f       	sbci	r19, 0xFF	; 255
     708:	20 93 f7 21 	sts	0x21F7, r18
     70c:	30 93 f8 21 	sts	0x21F8, r19
     710:	20 91 a0 09 	lds	r18, 0x09A0
     714:	fc 01       	movw	r30, r24
     716:	eb 5f       	subi	r30, 0xFB	; 251
     718:	fd 4d       	sbci	r31, 0xDD	; 221
     71a:	20 83       	st	Z, r18
	download = 1;
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	80 93 f6 21 	sts	0x21F6, r24
     722:	ff 91       	pop	r31
     724:	ef 91       	pop	r30
     726:	9f 91       	pop	r25
     728:	8f 91       	pop	r24
     72a:	3f 91       	pop	r19
     72c:	2f 91       	pop	r18
     72e:	0f 90       	pop	r0
     730:	0b be       	out	0x3b, r0	; 59
     732:	0f 90       	pop	r0
     734:	0f be       	out	0x3f, r0	; 63
     736:	0f 90       	pop	r0
     738:	1f 90       	pop	r1
     73a:	18 95       	reti

0000073c <mem_cpy>:
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	42 30       	cpi	r20, 0x02	; 2
     746:	51 05       	cpc	r21, r1
     748:	c0 f0       	brcs	.+48     	; 0x77a <mem_cpy+0x3e>
     74a:	eb 01       	movw	r28, r22
     74c:	fc 01       	movw	r30, r24
     74e:	9a 01       	movw	r18, r20
     750:	09 91       	ld	r16, Y+
     752:	19 91       	ld	r17, Y+
     754:	01 93       	st	Z+, r16
     756:	11 93       	st	Z+, r17
     758:	22 50       	subi	r18, 0x02	; 2
     75a:	31 09       	sbc	r19, r1
     75c:	22 30       	cpi	r18, 0x02	; 2
     75e:	31 05       	cpc	r19, r1
     760:	b8 f7       	brcc	.-18     	; 0x750 <mem_cpy+0x14>
     762:	9a 01       	movw	r18, r20
     764:	22 50       	subi	r18, 0x02	; 2
     766:	31 09       	sbc	r19, r1
     768:	2e 7f       	andi	r18, 0xFE	; 254
     76a:	2e 5f       	subi	r18, 0xFE	; 254
     76c:	3f 4f       	sbci	r19, 0xFF	; 255
     76e:	82 0f       	add	r24, r18
     770:	93 1f       	adc	r25, r19
     772:	62 0f       	add	r22, r18
     774:	73 1f       	adc	r23, r19
     776:	41 70       	andi	r20, 0x01	; 1
     778:	55 27       	eor	r21, r21
     77a:	41 15       	cp	r20, r1
     77c:	51 05       	cpc	r21, r1
     77e:	49 f0       	breq	.+18     	; 0x792 <mem_cpy+0x56>
     780:	db 01       	movw	r26, r22
     782:	fc 01       	movw	r30, r24
     784:	84 0f       	add	r24, r20
     786:	95 1f       	adc	r25, r21
     788:	2d 91       	ld	r18, X+
     78a:	21 93       	st	Z+, r18
     78c:	e8 17       	cp	r30, r24
     78e:	f9 07       	cpc	r31, r25
     790:	d9 f7       	brne	.-10     	; 0x788 <mem_cpy+0x4c>
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	08 95       	ret

0000079c <mem_set>:
     79c:	41 15       	cp	r20, r1
     79e:	51 05       	cpc	r21, r1
     7a0:	39 f0       	breq	.+14     	; 0x7b0 <mem_set+0x14>
     7a2:	fc 01       	movw	r30, r24
     7a4:	84 0f       	add	r24, r20
     7a6:	95 1f       	adc	r25, r21
     7a8:	61 93       	st	Z+, r22
     7aa:	e8 17       	cp	r30, r24
     7ac:	f9 07       	cpc	r31, r25
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <mem_set+0xc>
     7b0:	08 95       	ret

000007b2 <ld_clust>:
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	dc 01       	movw	r26, r24
     7b8:	fb 01       	movw	r30, r22
     7ba:	62 8d       	ldd	r22, Z+26	; 0x1a
     7bc:	73 8d       	ldd	r23, Z+27	; 0x1b
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	2c 91       	ld	r18, X
     7c4:	23 30       	cpi	r18, 0x03	; 3
     7c6:	59 f4       	brne	.+22     	; 0x7de <ld_clust+0x2c>
     7c8:	04 89       	ldd	r16, Z+20	; 0x14
     7ca:	15 89       	ldd	r17, Z+21	; 0x15
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	98 01       	movw	r18, r16
     7d2:	11 27       	eor	r17, r17
     7d4:	00 27       	eor	r16, r16
     7d6:	60 2b       	or	r22, r16
     7d8:	71 2b       	or	r23, r17
     7da:	82 2b       	or	r24, r18
     7dc:	93 2b       	or	r25, r19
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	08 95       	ret

000007e4 <get_ldnumber>:
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	ec 01       	movw	r28, r24
     7ea:	a8 81       	ld	r26, Y
     7ec:	b9 81       	ldd	r27, Y+1	; 0x01
     7ee:	10 97       	sbiw	r26, 0x00	; 0
     7f0:	29 f1       	breq	.+74     	; 0x83c <get_ldnumber+0x58>
     7f2:	4c 91       	ld	r20, X
     7f4:	41 32       	cpi	r20, 0x21	; 33
     7f6:	58 f0       	brcs	.+22     	; 0x80e <get_ldnumber+0x2a>
     7f8:	4a 33       	cpi	r20, 0x3A	; 58
     7fa:	49 f1       	breq	.+82     	; 0x84e <get_ldnumber+0x6a>
     7fc:	fd 01       	movw	r30, r26
     7fe:	31 96       	adiw	r30, 0x01	; 1
     800:	9f 01       	movw	r18, r30
     802:	91 91       	ld	r25, Z+
     804:	91 32       	cpi	r25, 0x21	; 33
     806:	28 f0       	brcs	.+10     	; 0x812 <get_ldnumber+0x2e>
     808:	9a 33       	cpi	r25, 0x3A	; 58
     80a:	d1 f7       	brne	.-12     	; 0x800 <get_ldnumber+0x1c>
     80c:	04 c0       	rjmp	.+8      	; 0x816 <get_ldnumber+0x32>
     80e:	94 2f       	mov	r25, r20
     810:	9d 01       	movw	r18, r26
     812:	9a 33       	cpi	r25, 0x3A	; 58
     814:	79 f4       	brne	.+30     	; 0x834 <get_ldnumber+0x50>
     816:	cd 01       	movw	r24, r26
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	28 17       	cp	r18, r24
     81c:	39 07       	cpc	r19, r25
     81e:	89 f4       	brne	.+34     	; 0x842 <get_ldnumber+0x5e>
     820:	84 2f       	mov	r24, r20
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	c0 97       	sbiw	r24, 0x30	; 48
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	91 05       	cpc	r25, r1
     82a:	70 f4       	brcc	.+28     	; 0x848 <get_ldnumber+0x64>
     82c:	12 96       	adiw	r26, 0x02	; 2
     82e:	a8 83       	st	Y, r26
     830:	b9 83       	std	Y+1, r27	; 0x01
     832:	0f c0       	rjmp	.+30     	; 0x852 <get_ldnumber+0x6e>
     834:	80 91 f9 21 	lds	r24, 0x21F9
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0b c0       	rjmp	.+22     	; 0x852 <get_ldnumber+0x6e>
     83c:	8f ef       	ldi	r24, 0xFF	; 255
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	08 c0       	rjmp	.+16     	; 0x852 <get_ldnumber+0x6e>
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	9f ef       	ldi	r25, 0xFF	; 255
     846:	05 c0       	rjmp	.+10     	; 0x852 <get_ldnumber+0x6e>
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	9f ef       	ldi	r25, 0xFF	; 255
     84c:	02 c0       	rjmp	.+4      	; 0x852 <get_ldnumber+0x6e>
     84e:	9d 01       	movw	r18, r26
     850:	e2 cf       	rjmp	.-60     	; 0x816 <get_ldnumber+0x32>
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <sync_window>:
     858:	8f 92       	push	r8
     85a:	9f 92       	push	r9
     85c:	af 92       	push	r10
     85e:	bf 92       	push	r11
     860:	cf 92       	push	r12
     862:	df 92       	push	r13
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	ec 01       	movw	r28, r24
     872:	8c 81       	ldd	r24, Y+4	; 0x04
     874:	88 23       	and	r24, r24
     876:	09 f4       	brne	.+2      	; 0x87a <sync_window+0x22>
     878:	44 c0       	rjmp	.+136    	; 0x902 <sync_window+0xaa>
     87a:	ce a4       	ldd	r12, Y+46	; 0x2e
     87c:	df a4       	ldd	r13, Y+47	; 0x2f
     87e:	e8 a8       	ldd	r14, Y+48	; 0x30
     880:	f9 a8       	ldd	r15, Y+49	; 0x31
     882:	5e 01       	movw	r10, r28
     884:	82 e3       	ldi	r24, 0x32	; 50
     886:	a8 0e       	add	r10, r24
     888:	b1 1c       	adc	r11, r1
     88a:	01 e0       	ldi	r16, 0x01	; 1
     88c:	10 e0       	ldi	r17, 0x00	; 0
     88e:	a7 01       	movw	r20, r14
     890:	96 01       	movw	r18, r12
     892:	b5 01       	movw	r22, r10
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	0e 94 11 15 	call	0x2a22	; 0x2a22 <disk_write>
     89a:	81 11       	cpse	r24, r1
     89c:	34 c0       	rjmp	.+104    	; 0x906 <sync_window+0xae>
     89e:	1c 82       	std	Y+4, r1	; 0x04
     8a0:	8a a1       	ldd	r24, Y+34	; 0x22
     8a2:	9b a1       	ldd	r25, Y+35	; 0x23
     8a4:	ac a1       	ldd	r26, Y+36	; 0x24
     8a6:	bd a1       	ldd	r27, Y+37	; 0x25
     8a8:	b7 01       	movw	r22, r14
     8aa:	a6 01       	movw	r20, r12
     8ac:	48 1b       	sub	r20, r24
     8ae:	59 0b       	sbc	r21, r25
     8b0:	6a 0b       	sbc	r22, r26
     8b2:	7b 0b       	sbc	r23, r27
     8b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8b8:	ac 8d       	ldd	r26, Y+28	; 0x1c
     8ba:	bd 8d       	ldd	r27, Y+29	; 0x1d
     8bc:	48 17       	cp	r20, r24
     8be:	59 07       	cpc	r21, r25
     8c0:	6a 07       	cpc	r22, r26
     8c2:	7b 07       	cpc	r23, r27
     8c4:	10 f5       	brcc	.+68     	; 0x90a <sync_window+0xb2>
     8c6:	8b 80       	ldd	r8, Y+3	; 0x03
     8c8:	91 2c       	mov	r9, r1
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	88 16       	cp	r8, r24
     8ce:	91 04       	cpc	r9, r1
     8d0:	f0 f0       	brcs	.+60     	; 0x90e <sync_window+0xb6>
     8d2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8d4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8d6:	ac 8d       	ldd	r26, Y+28	; 0x1c
     8d8:	bd 8d       	ldd	r27, Y+29	; 0x1d
     8da:	c8 0e       	add	r12, r24
     8dc:	d9 1e       	adc	r13, r25
     8de:	ea 1e       	adc	r14, r26
     8e0:	fb 1e       	adc	r15, r27
     8e2:	01 e0       	ldi	r16, 0x01	; 1
     8e4:	10 e0       	ldi	r17, 0x00	; 0
     8e6:	a7 01       	movw	r20, r14
     8e8:	96 01       	movw	r18, r12
     8ea:	b5 01       	movw	r22, r10
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	0e 94 11 15 	call	0x2a22	; 0x2a22 <disk_write>
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	88 1a       	sub	r8, r24
     8f6:	91 08       	sbc	r9, r1
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	88 16       	cp	r8, r24
     8fc:	91 04       	cpc	r9, r1
     8fe:	49 f7       	brne	.-46     	; 0x8d2 <sync_window+0x7a>
     900:	08 c0       	rjmp	.+16     	; 0x912 <sync_window+0xba>
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	07 c0       	rjmp	.+14     	; 0x914 <sync_window+0xbc>
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	05 c0       	rjmp	.+10     	; 0x914 <sync_window+0xbc>
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	03 c0       	rjmp	.+6      	; 0x914 <sync_window+0xbc>
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	01 c0       	rjmp	.+2      	; 0x914 <sync_window+0xbc>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	df 90       	pop	r13
     922:	cf 90       	pop	r12
     924:	bf 90       	pop	r11
     926:	af 90       	pop	r10
     928:	9f 90       	pop	r9
     92a:	8f 90       	pop	r8
     92c:	08 95       	ret

0000092e <move_window>:
     92e:	bf 92       	push	r11
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	0f 93       	push	r16
     93a:	1f 93       	push	r17
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ec 01       	movw	r28, r24
     942:	6a 01       	movw	r12, r20
     944:	7b 01       	movw	r14, r22
     946:	8e a5       	ldd	r24, Y+46	; 0x2e
     948:	9f a5       	ldd	r25, Y+47	; 0x2f
     94a:	a8 a9       	ldd	r26, Y+48	; 0x30
     94c:	b9 a9       	ldd	r27, Y+49	; 0x31
     94e:	84 17       	cp	r24, r20
     950:	95 07       	cpc	r25, r21
     952:	a6 07       	cpc	r26, r22
     954:	b7 07       	cpc	r27, r23
     956:	e1 f0       	breq	.+56     	; 0x990 <move_window+0x62>
     958:	ce 01       	movw	r24, r28
     95a:	7e df       	rcall	.-260    	; 0x858 <sync_window>
     95c:	b8 2e       	mov	r11, r24
     95e:	81 11       	cpse	r24, r1
     960:	18 c0       	rjmp	.+48     	; 0x992 <move_window+0x64>
     962:	01 e0       	ldi	r16, 0x01	; 1
     964:	10 e0       	ldi	r17, 0x00	; 0
     966:	a7 01       	movw	r20, r14
     968:	96 01       	movw	r18, r12
     96a:	be 01       	movw	r22, r28
     96c:	6e 5c       	subi	r22, 0xCE	; 206
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	0e 94 bd 14 	call	0x297a	; 0x297a <disk_read>
     976:	88 23       	and	r24, r24
     978:	31 f0       	breq	.+12     	; 0x986 <move_window+0x58>
     97a:	bb 24       	eor	r11, r11
     97c:	b3 94       	inc	r11
     97e:	cc 24       	eor	r12, r12
     980:	ca 94       	dec	r12
     982:	dc 2c       	mov	r13, r12
     984:	76 01       	movw	r14, r12
     986:	ce a6       	std	Y+46, r12	; 0x2e
     988:	df a6       	std	Y+47, r13	; 0x2f
     98a:	e8 aa       	std	Y+48, r14	; 0x30
     98c:	f9 aa       	std	Y+49, r15	; 0x31
     98e:	01 c0       	rjmp	.+2      	; 0x992 <move_window+0x64>
     990:	b1 2c       	mov	r11, r1
     992:	8b 2d       	mov	r24, r11
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	cf 90       	pop	r12
     9a4:	bf 90       	pop	r11
     9a6:	08 95       	ret

000009a8 <check_fs>:
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ec 01       	movw	r28, r24
     9b2:	1c 82       	std	Y+4, r1	; 0x04
     9b4:	0f ef       	ldi	r16, 0xFF	; 255
     9b6:	1f ef       	ldi	r17, 0xFF	; 255
     9b8:	98 01       	movw	r18, r16
     9ba:	0e a7       	std	Y+46, r16	; 0x2e
     9bc:	1f a7       	std	Y+47, r17	; 0x2f
     9be:	28 ab       	std	Y+48, r18	; 0x30
     9c0:	39 ab       	std	Y+49, r19	; 0x31
     9c2:	b5 df       	rcall	.-150    	; 0x92e <move_window>
     9c4:	81 11       	cpse	r24, r1
     9c6:	23 c0       	rjmp	.+70     	; 0xa0e <check_fs+0x66>
     9c8:	fe 01       	movw	r30, r28
     9ca:	e0 5d       	subi	r30, 0xD0	; 208
     9cc:	fd 4f       	sbci	r31, 0xFD	; 253
     9ce:	80 81       	ld	r24, Z
     9d0:	91 81       	ldd	r25, Z+1	; 0x01
     9d2:	85 35       	cpi	r24, 0x55	; 85
     9d4:	9a 4a       	sbci	r25, 0xAA	; 170
     9d6:	e9 f4       	brne	.+58     	; 0xa12 <check_fs+0x6a>
     9d8:	e8 5c       	subi	r30, 0xC8	; 200
     9da:	f1 40       	sbci	r31, 0x01	; 1
     9dc:	40 81       	ld	r20, Z
     9de:	51 81       	ldd	r21, Z+1	; 0x01
     9e0:	62 81       	ldd	r22, Z+2	; 0x02
     9e2:	73 81       	ldd	r23, Z+3	; 0x03
     9e4:	77 27       	eor	r23, r23
     9e6:	46 34       	cpi	r20, 0x46	; 70
     9e8:	51 44       	sbci	r21, 0x41	; 65
     9ea:	64 45       	sbci	r22, 0x54	; 84
     9ec:	71 05       	cpc	r23, r1
     9ee:	99 f0       	breq	.+38     	; 0xa16 <check_fs+0x6e>
     9f0:	cc 57       	subi	r28, 0x7C	; 124
     9f2:	df 4f       	sbci	r29, 0xFF	; 255
     9f4:	48 81       	ld	r20, Y
     9f6:	59 81       	ldd	r21, Y+1	; 0x01
     9f8:	6a 81       	ldd	r22, Y+2	; 0x02
     9fa:	7b 81       	ldd	r23, Y+3	; 0x03
     9fc:	77 27       	eor	r23, r23
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	46 34       	cpi	r20, 0x46	; 70
     a02:	51 44       	sbci	r21, 0x41	; 65
     a04:	64 45       	sbci	r22, 0x54	; 84
     a06:	71 05       	cpc	r23, r1
     a08:	39 f4       	brne	.+14     	; 0xa18 <check_fs+0x70>
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <check_fs+0x70>
     a0e:	83 e0       	ldi	r24, 0x03	; 3
     a10:	03 c0       	rjmp	.+6      	; 0xa18 <check_fs+0x70>
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	01 c0       	rjmp	.+2      	; 0xa18 <check_fs+0x70>
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	08 95       	ret

00000a22 <validate>:
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	c9 f0       	breq	.+50     	; 0xa58 <validate+0x36>
     a26:	dc 01       	movw	r26, r24
     a28:	ed 91       	ld	r30, X+
     a2a:	fc 91       	ld	r31, X
     a2c:	11 97       	sbiw	r26, 0x01	; 1
     a2e:	30 97       	sbiw	r30, 0x00	; 0
     a30:	a9 f0       	breq	.+42     	; 0xa5c <validate+0x3a>
     a32:	20 81       	ld	r18, Z
     a34:	22 23       	and	r18, r18
     a36:	a1 f0       	breq	.+40     	; 0xa60 <validate+0x3e>
     a38:	26 81       	ldd	r18, Z+6	; 0x06
     a3a:	37 81       	ldd	r19, Z+7	; 0x07
     a3c:	12 96       	adiw	r26, 0x02	; 2
     a3e:	8d 91       	ld	r24, X+
     a40:	9c 91       	ld	r25, X
     a42:	13 97       	sbiw	r26, 0x03	; 3
     a44:	28 17       	cp	r18, r24
     a46:	39 07       	cpc	r19, r25
     a48:	69 f4       	brne	.+26     	; 0xa64 <validate+0x42>
     a4a:	81 81       	ldd	r24, Z+1	; 0x01
     a4c:	0e 94 b6 14 	call	0x296c	; 0x296c <disk_status>
     a50:	80 ff       	sbrs	r24, 0
     a52:	0a c0       	rjmp	.+20     	; 0xa68 <validate+0x46>
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	08 95       	ret
     a58:	89 e0       	ldi	r24, 0x09	; 9
     a5a:	08 95       	ret
     a5c:	89 e0       	ldi	r24, 0x09	; 9
     a5e:	08 95       	ret
     a60:	89 e0       	ldi	r24, 0x09	; 9
     a62:	08 95       	ret
     a64:	89 e0       	ldi	r24, 0x09	; 9
     a66:	08 95       	ret
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	08 95       	ret

00000a6c <find_volume>:
     a6c:	2f 92       	push	r2
     a6e:	3f 92       	push	r3
     a70:	4f 92       	push	r4
     a72:	5f 92       	push	r5
     a74:	6f 92       	push	r6
     a76:	7f 92       	push	r7
     a78:	8f 92       	push	r8
     a7a:	9f 92       	push	r9
     a7c:	af 92       	push	r10
     a7e:	bf 92       	push	r11
     a80:	cf 92       	push	r12
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
     a94:	6d 97       	sbiw	r28, 0x1d	; 29
     a96:	cd bf       	out	0x3d, r28	; 61
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	6c 01       	movw	r12, r24
     a9c:	cb 01       	movw	r24, r22
     a9e:	b4 2e       	mov	r11, r20
     aa0:	d6 01       	movw	r26, r12
     aa2:	1d 92       	st	X+, r1
     aa4:	1c 92       	st	X, r1
     aa6:	9e de       	rcall	.-708    	; 0x7e4 <get_ldnumber>
     aa8:	7c 01       	movw	r14, r24
     aaa:	99 23       	and	r25, r25
     aac:	0c f4       	brge	.+2      	; 0xab0 <find_volume+0x44>
     aae:	2b c2       	rjmp	.+1110   	; 0xf06 <find_volume+0x49a>
     ab0:	fc 01       	movw	r30, r24
     ab2:	ee 0f       	add	r30, r30
     ab4:	ff 1f       	adc	r31, r31
     ab6:	e4 50       	subi	r30, 0x04	; 4
     ab8:	fe 4d       	sbci	r31, 0xDE	; 222
     aba:	00 81       	ld	r16, Z
     abc:	11 81       	ldd	r17, Z+1	; 0x01
     abe:	01 15       	cp	r16, r1
     ac0:	11 05       	cpc	r17, r1
     ac2:	09 f4       	brne	.+2      	; 0xac6 <find_volume+0x5a>
     ac4:	22 c2       	rjmp	.+1092   	; 0xf0a <find_volume+0x49e>
     ac6:	f6 01       	movw	r30, r12
     ac8:	00 83       	st	Z, r16
     aca:	11 83       	std	Z+1, r17	; 0x01
     acc:	d8 01       	movw	r26, r16
     ace:	8c 91       	ld	r24, X
     ad0:	88 23       	and	r24, r24
     ad2:	69 f0       	breq	.+26     	; 0xaee <find_volume+0x82>
     ad4:	11 96       	adiw	r26, 0x01	; 1
     ad6:	8c 91       	ld	r24, X
     ad8:	0e 94 b6 14 	call	0x296c	; 0x296c <disk_status>
     adc:	80 fd       	sbrc	r24, 0
     ade:	07 c0       	rjmp	.+14     	; 0xaee <find_volume+0x82>
     ae0:	bb 20       	and	r11, r11
     ae2:	09 f4       	brne	.+2      	; 0xae6 <find_volume+0x7a>
     ae4:	14 c2       	rjmp	.+1064   	; 0xf0e <find_volume+0x4a2>
     ae6:	82 fd       	sbrc	r24, 2
     ae8:	14 c2       	rjmp	.+1064   	; 0xf12 <find_volume+0x4a6>
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	5d c2       	rjmp	.+1210   	; 0xfa8 <find_volume+0x53c>
     aee:	f8 01       	movw	r30, r16
     af0:	10 82       	st	Z, r1
     af2:	e1 82       	std	Z+1, r14	; 0x01
     af4:	8e 2d       	mov	r24, r14
     af6:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <disk_initialize>
     afa:	80 fd       	sbrc	r24, 0
     afc:	0c c2       	rjmp	.+1048   	; 0xf16 <find_volume+0x4aa>
     afe:	bb 20       	and	r11, r11
     b00:	11 f0       	breq	.+4      	; 0xb06 <find_volume+0x9a>
     b02:	82 fd       	sbrc	r24, 2
     b04:	0a c2       	rjmp	.+1044   	; 0xf1a <find_volume+0x4ae>
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	ba 01       	movw	r22, r20
     b0c:	c8 01       	movw	r24, r16
     b0e:	4c df       	rcall	.-360    	; 0x9a8 <check_fs>
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	09 f0       	breq	.+2      	; 0xb16 <find_volume+0xaa>
     b14:	3f c0       	rjmp	.+126    	; 0xb94 <find_volume+0x128>
     b16:	f8 01       	movw	r30, r16
     b18:	ec 50       	subi	r30, 0x0C	; 12
     b1a:	fe 4f       	sbci	r31, 0xFE	; 254
     b1c:	7e 01       	movw	r14, r28
     b1e:	21 e1       	ldi	r18, 0x11	; 17
     b20:	e2 0e       	add	r14, r18
     b22:	f1 1c       	adc	r15, r1
     b24:	9e 01       	movw	r18, r28
     b26:	2f 5f       	subi	r18, 0xFF	; 255
     b28:	3f 4f       	sbci	r19, 0xFF	; 255
     b2a:	af 01       	movw	r20, r30
     b2c:	da 01       	movw	r26, r20
     b2e:	8c 91       	ld	r24, X
     b30:	88 23       	and	r24, r24
     b32:	39 f0       	breq	.+14     	; 0xb42 <find_volume+0xd6>
     b34:	14 96       	adiw	r26, 0x04	; 4
     b36:	8d 91       	ld	r24, X+
     b38:	9d 91       	ld	r25, X+
     b3a:	0d 90       	ld	r0, X+
     b3c:	bc 91       	ld	r27, X
     b3e:	a0 2d       	mov	r26, r0
     b40:	03 c0       	rjmp	.+6      	; 0xb48 <find_volume+0xdc>
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	dc 01       	movw	r26, r24
     b48:	f9 01       	movw	r30, r18
     b4a:	81 93       	st	Z+, r24
     b4c:	91 93       	st	Z+, r25
     b4e:	a1 93       	st	Z+, r26
     b50:	b1 93       	st	Z+, r27
     b52:	9f 01       	movw	r18, r30
     b54:	40 5f       	subi	r20, 0xF0	; 240
     b56:	5f 4f       	sbci	r21, 0xFF	; 255
     b58:	ee 15       	cp	r30, r14
     b5a:	ff 05       	cpc	r31, r15
     b5c:	39 f7       	brne	.-50     	; 0xb2c <find_volume+0xc0>
     b5e:	9e 01       	movw	r18, r28
     b60:	2f 5f       	subi	r18, 0xFF	; 255
     b62:	3f 4f       	sbci	r19, 0xFF	; 255
     b64:	69 01       	movw	r12, r18
     b66:	d6 01       	movw	r26, r12
     b68:	4d 90       	ld	r4, X+
     b6a:	5d 90       	ld	r5, X+
     b6c:	6d 90       	ld	r6, X+
     b6e:	7d 90       	ld	r7, X+
     b70:	6d 01       	movw	r12, r26
     b72:	41 14       	cp	r4, r1
     b74:	51 04       	cpc	r5, r1
     b76:	61 04       	cpc	r6, r1
     b78:	71 04       	cpc	r7, r1
     b7a:	39 f0       	breq	.+14     	; 0xb8a <find_volume+0x11e>
     b7c:	b3 01       	movw	r22, r6
     b7e:	a2 01       	movw	r20, r4
     b80:	c8 01       	movw	r24, r16
     b82:	12 df       	rcall	.-476    	; 0x9a8 <check_fs>
     b84:	81 11       	cpse	r24, r1
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <find_volume+0x120>
     b88:	08 c0       	rjmp	.+16     	; 0xb9a <find_volume+0x12e>
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	ce 14       	cp	r12, r14
     b8e:	df 04       	cpc	r13, r15
     b90:	51 f7       	brne	.-44     	; 0xb66 <find_volume+0xfa>
     b92:	03 c0       	rjmp	.+6      	; 0xb9a <find_volume+0x12e>
     b94:	41 2c       	mov	r4, r1
     b96:	51 2c       	mov	r5, r1
     b98:	32 01       	movw	r6, r4
     b9a:	83 30       	cpi	r24, 0x03	; 3
     b9c:	09 f4       	brne	.+2      	; 0xba0 <find_volume+0x134>
     b9e:	bf c1       	rjmp	.+894    	; 0xf1e <find_volume+0x4b2>
     ba0:	81 11       	cpse	r24, r1
     ba2:	bf c1       	rjmp	.+894    	; 0xf22 <find_volume+0x4b6>
     ba4:	f8 01       	movw	r30, r16
     ba6:	85 ad       	ldd	r24, Z+61	; 0x3d
     ba8:	96 ad       	ldd	r25, Z+62	; 0x3e
     baa:	81 15       	cp	r24, r1
     bac:	92 40       	sbci	r25, 0x02	; 2
     bae:	09 f0       	breq	.+2      	; 0xbb2 <find_volume+0x146>
     bb0:	ba c1       	rjmp	.+884    	; 0xf26 <find_volume+0x4ba>
     bb2:	f8 01       	movw	r30, r16
     bb4:	e8 5b       	subi	r30, 0xB8	; 184
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	c0 80       	ld	r12, Z
     bba:	d1 80       	ldd	r13, Z+1	; 0x01
     bbc:	e1 2c       	mov	r14, r1
     bbe:	f1 2c       	mov	r15, r1
     bc0:	c1 14       	cp	r12, r1
     bc2:	d1 04       	cpc	r13, r1
     bc4:	e1 04       	cpc	r14, r1
     bc6:	f1 04       	cpc	r15, r1
     bc8:	29 f4       	brne	.+10     	; 0xbd4 <find_volume+0x168>
     bca:	3e 96       	adiw	r30, 0x0e	; 14
     bcc:	c0 80       	ld	r12, Z
     bce:	d1 80       	ldd	r13, Z+1	; 0x01
     bd0:	e2 80       	ldd	r14, Z+2	; 0x02
     bd2:	f3 80       	ldd	r15, Z+3	; 0x03
     bd4:	d8 01       	movw	r26, r16
     bd6:	5a 96       	adiw	r26, 0x1a	; 26
     bd8:	cd 92       	st	X+, r12
     bda:	dd 92       	st	X+, r13
     bdc:	ed 92       	st	X+, r14
     bde:	fc 92       	st	X, r15
     be0:	5d 97       	sbiw	r26, 0x1d	; 29
     be2:	f8 01       	movw	r30, r16
     be4:	ee 5b       	subi	r30, 0xBE	; 190
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	a0 81       	ld	r26, Z
     bea:	f8 01       	movw	r30, r16
     bec:	a3 83       	std	Z+3, r26	; 0x03
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	8a 0f       	add	r24, r26
     bf2:	82 30       	cpi	r24, 0x02	; 2
     bf4:	08 f0       	brcs	.+2      	; 0xbf8 <find_volume+0x18c>
     bf6:	99 c1       	rjmp	.+818    	; 0xf2a <find_volume+0x4be>
     bf8:	f7 ad       	ldd	r31, Z+63	; 0x3f
     bfa:	f9 8b       	std	Y+17, r31	; 0x11
     bfc:	2f 2f       	mov	r18, r31
     bfe:	f8 01       	movw	r30, r16
     c00:	22 83       	std	Z+2, r18	; 0x02
     c02:	22 23       	and	r18, r18
     c04:	09 f4       	brne	.+2      	; 0xc08 <find_volume+0x19c>
     c06:	93 c1       	rjmp	.+806    	; 0xf2e <find_volume+0x4c2>
     c08:	82 2f       	mov	r24, r18
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	9c 01       	movw	r18, r24
     c0e:	21 50       	subi	r18, 0x01	; 1
     c10:	31 09       	sbc	r19, r1
     c12:	82 23       	and	r24, r18
     c14:	93 23       	and	r25, r19
     c16:	89 2b       	or	r24, r25
     c18:	09 f0       	breq	.+2      	; 0xc1c <find_volume+0x1b0>
     c1a:	8b c1       	rjmp	.+790    	; 0xf32 <find_volume+0x4c6>
     c1c:	ed 5b       	subi	r30, 0xBD	; 189
     c1e:	ff 4f       	sbci	r31, 0xFF	; 255
     c20:	20 80       	ld	r2, Z
     c22:	31 80       	ldd	r3, Z+1	; 0x01
     c24:	f8 01       	movw	r30, r16
     c26:	20 86       	std	Z+8, r2	; 0x08
     c28:	31 86       	std	Z+9, r3	; 0x09
     c2a:	c1 01       	movw	r24, r2
     c2c:	8f 70       	andi	r24, 0x0F	; 15
     c2e:	99 27       	eor	r25, r25
     c30:	89 2b       	or	r24, r25
     c32:	09 f0       	breq	.+2      	; 0xc36 <find_volume+0x1ca>
     c34:	80 c1       	rjmp	.+768    	; 0xf36 <find_volume+0x4ca>
     c36:	eb 5b       	subi	r30, 0xBB	; 187
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	80 80       	ld	r8, Z
     c3c:	91 80       	ldd	r9, Z+1	; 0x01
     c3e:	a1 2c       	mov	r10, r1
     c40:	b1 2c       	mov	r11, r1
     c42:	81 14       	cp	r8, r1
     c44:	91 04       	cpc	r9, r1
     c46:	a1 04       	cpc	r10, r1
     c48:	b1 04       	cpc	r11, r1
     c4a:	29 f4       	brne	.+10     	; 0xc56 <find_volume+0x1ea>
     c4c:	3d 96       	adiw	r30, 0x0d	; 13
     c4e:	80 80       	ld	r8, Z
     c50:	91 80       	ldd	r9, Z+1	; 0x01
     c52:	a2 80       	ldd	r10, Z+2	; 0x02
     c54:	b3 80       	ldd	r11, Z+3	; 0x03
     c56:	f8 01       	movw	r30, r16
     c58:	e0 5c       	subi	r30, 0xC0	; 192
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	01 90       	ld	r0, Z+
     c5e:	f0 81       	ld	r31, Z
     c60:	e0 2d       	mov	r30, r0
     c62:	30 97       	sbiw	r30, 0x00	; 0
     c64:	09 f4       	brne	.+2      	; 0xc68 <find_volume+0x1fc>
     c66:	69 c1       	rjmp	.+722    	; 0xf3a <find_volume+0x4ce>
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	a7 01       	movw	r20, r14
     c6c:	96 01       	movw	r18, r12
     c6e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__muluhisi3>
     c72:	6a 8f       	std	Y+26, r22	; 0x1a
     c74:	7b 8f       	std	Y+27, r23	; 0x1b
     c76:	8c 8f       	std	Y+28, r24	; 0x1c
     c78:	9d 8f       	std	Y+29, r25	; 0x1d
     c7a:	9f 01       	movw	r18, r30
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	2e 8b       	std	Y+22, r18	; 0x16
     c82:	3f 8b       	std	Y+23, r19	; 0x17
     c84:	48 8f       	std	Y+24, r20	; 0x18
     c86:	59 8f       	std	Y+25, r21	; 0x19
     c88:	c1 01       	movw	r24, r2
     c8a:	92 95       	swap	r25
     c8c:	82 95       	swap	r24
     c8e:	8f 70       	andi	r24, 0x0F	; 15
     c90:	89 27       	eor	r24, r25
     c92:	9f 70       	andi	r25, 0x0F	; 15
     c94:	89 27       	eor	r24, r25
     c96:	28 0f       	add	r18, r24
     c98:	39 1f       	adc	r19, r25
     c9a:	41 1d       	adc	r20, r1
     c9c:	51 1d       	adc	r21, r1
     c9e:	da 01       	movw	r26, r20
     ca0:	c9 01       	movw	r24, r18
     ca2:	2a 8d       	ldd	r18, Y+26	; 0x1a
     ca4:	3b 8d       	ldd	r19, Y+27	; 0x1b
     ca6:	4c 8d       	ldd	r20, Y+28	; 0x1c
     ca8:	5d 8d       	ldd	r21, Y+29	; 0x1d
     caa:	28 0f       	add	r18, r24
     cac:	39 1f       	adc	r19, r25
     cae:	4a 1f       	adc	r20, r26
     cb0:	5b 1f       	adc	r21, r27
     cb2:	2a 8b       	std	Y+18, r18	; 0x12
     cb4:	3b 8b       	std	Y+19, r19	; 0x13
     cb6:	4c 8b       	std	Y+20, r20	; 0x14
     cb8:	5d 8b       	std	Y+21, r21	; 0x15
     cba:	82 16       	cp	r8, r18
     cbc:	93 06       	cpc	r9, r19
     cbe:	a4 06       	cpc	r10, r20
     cc0:	b5 06       	cpc	r11, r21
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <find_volume+0x25a>
     cc4:	3c c1       	rjmp	.+632    	; 0xf3e <find_volume+0x4d2>
     cc6:	c5 01       	movw	r24, r10
     cc8:	b4 01       	movw	r22, r8
     cca:	62 1b       	sub	r22, r18
     ccc:	73 0b       	sbc	r23, r19
     cce:	84 0b       	sbc	r24, r20
     cd0:	95 0b       	sbc	r25, r21
     cd2:	e9 89       	ldd	r30, Y+17	; 0x11
     cd4:	2e 2f       	mov	r18, r30
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <__udivmodsi4>
     ce0:	da 01       	movw	r26, r20
     ce2:	c9 01       	movw	r24, r18
     ce4:	21 15       	cp	r18, r1
     ce6:	31 05       	cpc	r19, r1
     ce8:	41 05       	cpc	r20, r1
     cea:	51 05       	cpc	r21, r1
     cec:	09 f4       	brne	.+2      	; 0xcf0 <find_volume+0x284>
     cee:	29 c1       	rjmp	.+594    	; 0xf42 <find_volume+0x4d6>
     cf0:	26 3f       	cpi	r18, 0xF6	; 246
     cf2:	ff e0       	ldi	r31, 0x0F	; 15
     cf4:	3f 07       	cpc	r19, r31
     cf6:	41 05       	cpc	r20, r1
     cf8:	51 05       	cpc	r21, r1
     cfa:	18 f4       	brcc	.+6      	; 0xd02 <find_volume+0x296>
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	69 8b       	std	Y+17, r22	; 0x11
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <find_volume+0x29a>
     d02:	e2 e0       	ldi	r30, 0x02	; 2
     d04:	e9 8b       	std	Y+17, r30	; 0x11
     d06:	86 3f       	cpi	r24, 0xF6	; 246
     d08:	9f 4f       	sbci	r25, 0xFF	; 255
     d0a:	a1 05       	cpc	r26, r1
     d0c:	b1 05       	cpc	r27, r1
     d0e:	08 f0       	brcs	.+2      	; 0xd12 <find_volume+0x2a6>
     d10:	20 c1       	rjmp	.+576    	; 0xf52 <find_volume+0x4e6>
     d12:	49 01       	movw	r8, r18
     d14:	5a 01       	movw	r10, r20
     d16:	62 e0       	ldi	r22, 0x02	; 2
     d18:	86 0e       	add	r8, r22
     d1a:	91 1c       	adc	r9, r1
     d1c:	a1 1c       	adc	r10, r1
     d1e:	b1 1c       	adc	r11, r1
     d20:	d8 01       	movw	r26, r16
     d22:	56 96       	adiw	r26, 0x16	; 22
     d24:	8d 92       	st	X+, r8
     d26:	9d 92       	st	X+, r9
     d28:	ad 92       	st	X+, r10
     d2a:	bc 92       	st	X, r11
     d2c:	59 97       	sbiw	r26, 0x19	; 25
     d2e:	f8 01       	movw	r30, r16
     d30:	46 8e       	std	Z+30, r4	; 0x1e
     d32:	57 8e       	std	Z+31, r5	; 0x1f
     d34:	60 a2       	std	Z+32, r6	; 0x20
     d36:	71 a2       	std	Z+33, r7	; 0x21
     d38:	8e 89       	ldd	r24, Y+22	; 0x16
     d3a:	9f 89       	ldd	r25, Y+23	; 0x17
     d3c:	a8 8d       	ldd	r26, Y+24	; 0x18
     d3e:	b9 8d       	ldd	r27, Y+25	; 0x19
     d40:	84 0d       	add	r24, r4
     d42:	95 1d       	adc	r25, r5
     d44:	a6 1d       	adc	r26, r6
     d46:	b7 1d       	adc	r27, r7
     d48:	82 a3       	std	Z+34, r24	; 0x22
     d4a:	93 a3       	std	Z+35, r25	; 0x23
     d4c:	a4 a3       	std	Z+36, r26	; 0x24
     d4e:	b5 a3       	std	Z+37, r27	; 0x25
     d50:	4a 89       	ldd	r20, Y+18	; 0x12
     d52:	5b 89       	ldd	r21, Y+19	; 0x13
     d54:	6c 89       	ldd	r22, Y+20	; 0x14
     d56:	7d 89       	ldd	r23, Y+21	; 0x15
     d58:	44 0d       	add	r20, r4
     d5a:	55 1d       	adc	r21, r5
     d5c:	66 1d       	adc	r22, r6
     d5e:	77 1d       	adc	r23, r7
     d60:	42 a7       	std	Z+42, r20	; 0x2a
     d62:	53 a7       	std	Z+43, r21	; 0x2b
     d64:	64 a7       	std	Z+44, r22	; 0x2c
     d66:	75 a7       	std	Z+45, r23	; 0x2d
     d68:	f9 89       	ldd	r31, Y+17	; 0x11
     d6a:	f3 30       	cpi	r31, 0x03	; 3
     d6c:	c1 f4       	brne	.+48     	; 0xd9e <find_volume+0x332>
     d6e:	23 28       	or	r2, r3
     d70:	09 f0       	breq	.+2      	; 0xd74 <find_volume+0x308>
     d72:	e9 c0       	rjmp	.+466    	; 0xf46 <find_volume+0x4da>
     d74:	f8 01       	movw	r30, r16
     d76:	e2 5a       	subi	r30, 0xA2	; 162
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	80 81       	ld	r24, Z
     d7c:	91 81       	ldd	r25, Z+1	; 0x01
     d7e:	a2 81       	ldd	r26, Z+2	; 0x02
     d80:	b3 81       	ldd	r27, Z+3	; 0x03
     d82:	f8 01       	movw	r30, r16
     d84:	86 a3       	std	Z+38, r24	; 0x26
     d86:	97 a3       	std	Z+39, r25	; 0x27
     d88:	a0 a7       	std	Z+40, r26	; 0x28
     d8a:	b1 a7       	std	Z+41, r27	; 0x29
     d8c:	88 0c       	add	r8, r8
     d8e:	99 1c       	adc	r9, r9
     d90:	aa 1c       	adc	r10, r10
     d92:	bb 1c       	adc	r11, r11
     d94:	88 0c       	add	r8, r8
     d96:	99 1c       	adc	r9, r9
     d98:	aa 1c       	adc	r10, r10
     d9a:	bb 1c       	adc	r11, r11
     d9c:	2d c0       	rjmp	.+90     	; 0xdf8 <find_volume+0x38c>
     d9e:	23 28       	or	r2, r3
     da0:	09 f4       	brne	.+2      	; 0xda4 <find_volume+0x338>
     da2:	d3 c0       	rjmp	.+422    	; 0xf4a <find_volume+0x4de>
     da4:	2a 8d       	ldd	r18, Y+26	; 0x1a
     da6:	3b 8d       	ldd	r19, Y+27	; 0x1b
     da8:	4c 8d       	ldd	r20, Y+28	; 0x1c
     daa:	5d 8d       	ldd	r21, Y+29	; 0x1d
     dac:	82 0f       	add	r24, r18
     dae:	93 1f       	adc	r25, r19
     db0:	a4 1f       	adc	r26, r20
     db2:	b5 1f       	adc	r27, r21
     db4:	f8 01       	movw	r30, r16
     db6:	86 a3       	std	Z+38, r24	; 0x26
     db8:	97 a3       	std	Z+39, r25	; 0x27
     dba:	a0 a7       	std	Z+40, r26	; 0x28
     dbc:	b1 a7       	std	Z+41, r27	; 0x29
     dbe:	f9 89       	ldd	r31, Y+17	; 0x11
     dc0:	f2 30       	cpi	r31, 0x02	; 2
     dc2:	29 f4       	brne	.+10     	; 0xdce <find_volume+0x362>
     dc4:	88 0c       	add	r8, r8
     dc6:	99 1c       	adc	r9, r9
     dc8:	aa 1c       	adc	r10, r10
     dca:	bb 1c       	adc	r11, r11
     dcc:	15 c0       	rjmp	.+42     	; 0xdf8 <find_volume+0x38c>
     dce:	a3 e0       	ldi	r26, 0x03	; 3
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	a5 01       	movw	r20, r10
     dd4:	94 01       	movw	r18, r8
     dd6:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__muluhisi3>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	b6 95       	lsr	r27
     de0:	a7 95       	ror	r26
     de2:	97 95       	ror	r25
     de4:	87 95       	ror	r24
     de6:	21 e0       	ldi	r18, 0x01	; 1
     de8:	82 22       	and	r8, r18
     dea:	99 24       	eor	r9, r9
     dec:	aa 24       	eor	r10, r10
     dee:	bb 24       	eor	r11, r11
     df0:	88 0e       	add	r8, r24
     df2:	99 1e       	adc	r9, r25
     df4:	aa 1e       	adc	r10, r26
     df6:	bb 1e       	adc	r11, r27
     df8:	3f ef       	ldi	r19, 0xFF	; 255
     dfa:	83 0e       	add	r8, r19
     dfc:	31 e0       	ldi	r19, 0x01	; 1
     dfe:	93 1e       	adc	r9, r19
     e00:	a1 1c       	adc	r10, r1
     e02:	b1 1c       	adc	r11, r1
     e04:	07 2e       	mov	r0, r23
     e06:	79 e0       	ldi	r23, 0x09	; 9
     e08:	b6 94       	lsr	r11
     e0a:	a7 94       	ror	r10
     e0c:	97 94       	ror	r9
     e0e:	87 94       	ror	r8
     e10:	7a 95       	dec	r23
     e12:	d1 f7       	brne	.-12     	; 0xe08 <find_volume+0x39c>
     e14:	70 2d       	mov	r23, r0
     e16:	c8 14       	cp	r12, r8
     e18:	d9 04       	cpc	r13, r9
     e1a:	ea 04       	cpc	r14, r10
     e1c:	fb 04       	cpc	r15, r11
     e1e:	08 f4       	brcc	.+2      	; 0xe22 <find_volume+0x3b6>
     e20:	96 c0       	rjmp	.+300    	; 0xf4e <find_volume+0x4e2>
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	9f ef       	ldi	r25, 0xFF	; 255
     e26:	dc 01       	movw	r26, r24
     e28:	f8 01       	movw	r30, r16
     e2a:	86 87       	std	Z+14, r24	; 0x0e
     e2c:	97 87       	std	Z+15, r25	; 0x0f
     e2e:	a0 8b       	std	Z+16, r26	; 0x10
     e30:	b1 8b       	std	Z+17, r27	; 0x11
     e32:	82 87       	std	Z+10, r24	; 0x0a
     e34:	93 87       	std	Z+11, r25	; 0x0b
     e36:	a4 87       	std	Z+12, r26	; 0x0c
     e38:	b5 87       	std	Z+13, r27	; 0x0d
     e3a:	80 e8       	ldi	r24, 0x80	; 128
     e3c:	85 83       	std	Z+5, r24	; 0x05
     e3e:	f9 89       	ldd	r31, Y+17	; 0x11
     e40:	f3 30       	cpi	r31, 0x03	; 3
     e42:	09 f0       	breq	.+2      	; 0xe46 <find_volume+0x3da>
     e44:	48 c0       	rjmp	.+144    	; 0xed6 <find_volume+0x46a>
     e46:	f8 01       	movw	r30, r16
     e48:	ee 59       	subi	r30, 0x9E	; 158
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	09 f0       	breq	.+2      	; 0xe56 <find_volume+0x3ea>
     e54:	40 c0       	rjmp	.+128    	; 0xed6 <find_volume+0x46a>
     e56:	b3 01       	movw	r22, r6
     e58:	a2 01       	movw	r20, r4
     e5a:	4f 5f       	subi	r20, 0xFF	; 255
     e5c:	5f 4f       	sbci	r21, 0xFF	; 255
     e5e:	6f 4f       	sbci	r22, 0xFF	; 255
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	c8 01       	movw	r24, r16
     e64:	64 dd       	rcall	.-1336   	; 0x92e <move_window>
     e66:	81 11       	cpse	r24, r1
     e68:	36 c0       	rjmp	.+108    	; 0xed6 <find_volume+0x46a>
     e6a:	d8 01       	movw	r26, r16
     e6c:	15 96       	adiw	r26, 0x05	; 5
     e6e:	1c 92       	st	X, r1
     e70:	f8 01       	movw	r30, r16
     e72:	e0 5d       	subi	r30, 0xD0	; 208
     e74:	fd 4f       	sbci	r31, 0xFD	; 253
     e76:	80 81       	ld	r24, Z
     e78:	91 81       	ldd	r25, Z+1	; 0x01
     e7a:	85 35       	cpi	r24, 0x55	; 85
     e7c:	9a 4a       	sbci	r25, 0xAA	; 170
     e7e:	59 f5       	brne	.+86     	; 0xed6 <find_volume+0x46a>
     e80:	f8 01       	movw	r30, r16
     e82:	82 a9       	ldd	r24, Z+50	; 0x32
     e84:	93 a9       	ldd	r25, Z+51	; 0x33
     e86:	a4 a9       	ldd	r26, Z+52	; 0x34
     e88:	b5 a9       	ldd	r27, Z+53	; 0x35
     e8a:	82 35       	cpi	r24, 0x52	; 82
     e8c:	92 45       	sbci	r25, 0x52	; 82
     e8e:	a1 46       	sbci	r26, 0x61	; 97
     e90:	b1 44       	sbci	r27, 0x41	; 65
     e92:	09 f5       	brne	.+66     	; 0xed6 <find_volume+0x46a>
     e94:	f8 01       	movw	r30, r16
     e96:	ea 5e       	subi	r30, 0xEA	; 234
     e98:	fd 4f       	sbci	r31, 0xFD	; 253
     e9a:	80 81       	ld	r24, Z
     e9c:	91 81       	ldd	r25, Z+1	; 0x01
     e9e:	a2 81       	ldd	r26, Z+2	; 0x02
     ea0:	b3 81       	ldd	r27, Z+3	; 0x03
     ea2:	82 37       	cpi	r24, 0x72	; 114
     ea4:	92 47       	sbci	r25, 0x72	; 114
     ea6:	a1 44       	sbci	r26, 0x41	; 65
     ea8:	b1 46       	sbci	r27, 0x61	; 97
     eaa:	a9 f4       	brne	.+42     	; 0xed6 <find_volume+0x46a>
     eac:	34 96       	adiw	r30, 0x04	; 4
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	a2 81       	ldd	r26, Z+2	; 0x02
     eb4:	b3 81       	ldd	r27, Z+3	; 0x03
     eb6:	f8 01       	movw	r30, r16
     eb8:	86 87       	std	Z+14, r24	; 0x0e
     eba:	97 87       	std	Z+15, r25	; 0x0f
     ebc:	a0 8b       	std	Z+16, r26	; 0x10
     ebe:	b1 8b       	std	Z+17, r27	; 0x11
     ec0:	e2 5e       	subi	r30, 0xE2	; 226
     ec2:	fd 4f       	sbci	r31, 0xFD	; 253
     ec4:	80 81       	ld	r24, Z
     ec6:	91 81       	ldd	r25, Z+1	; 0x01
     ec8:	a2 81       	ldd	r26, Z+2	; 0x02
     eca:	b3 81       	ldd	r27, Z+3	; 0x03
     ecc:	f8 01       	movw	r30, r16
     ece:	82 87       	std	Z+10, r24	; 0x0a
     ed0:	93 87       	std	Z+11, r25	; 0x0b
     ed2:	a4 87       	std	Z+12, r26	; 0x0c
     ed4:	b5 87       	std	Z+13, r27	; 0x0d
     ed6:	e9 89       	ldd	r30, Y+17	; 0x11
     ed8:	d8 01       	movw	r26, r16
     eda:	ec 93       	st	X, r30
     edc:	80 91 fa 21 	lds	r24, 0x21FA
     ee0:	90 91 fb 21 	lds	r25, 0x21FB
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	80 93 fa 21 	sts	0x21FA, r24
     eea:	90 93 fb 21 	sts	0x21FB, r25
     eee:	16 96       	adiw	r26, 0x06	; 6
     ef0:	8d 93       	st	X+, r24
     ef2:	9c 93       	st	X, r25
     ef4:	17 97       	sbiw	r26, 0x07	; 7
     ef6:	52 96       	adiw	r26, 0x12	; 18
     ef8:	1d 92       	st	X+, r1
     efa:	1d 92       	st	X+, r1
     efc:	1d 92       	st	X+, r1
     efe:	1c 92       	st	X, r1
     f00:	55 97       	sbiw	r26, 0x15	; 21
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	51 c0       	rjmp	.+162    	; 0xfa8 <find_volume+0x53c>
     f06:	8b e0       	ldi	r24, 0x0B	; 11
     f08:	4f c0       	rjmp	.+158    	; 0xfa8 <find_volume+0x53c>
     f0a:	8c e0       	ldi	r24, 0x0C	; 12
     f0c:	4d c0       	rjmp	.+154    	; 0xfa8 <find_volume+0x53c>
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	4b c0       	rjmp	.+150    	; 0xfa8 <find_volume+0x53c>
     f12:	8a e0       	ldi	r24, 0x0A	; 10
     f14:	49 c0       	rjmp	.+146    	; 0xfa8 <find_volume+0x53c>
     f16:	83 e0       	ldi	r24, 0x03	; 3
     f18:	47 c0       	rjmp	.+142    	; 0xfa8 <find_volume+0x53c>
     f1a:	8a e0       	ldi	r24, 0x0A	; 10
     f1c:	45 c0       	rjmp	.+138    	; 0xfa8 <find_volume+0x53c>
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	43 c0       	rjmp	.+134    	; 0xfa8 <find_volume+0x53c>
     f22:	8d e0       	ldi	r24, 0x0D	; 13
     f24:	41 c0       	rjmp	.+130    	; 0xfa8 <find_volume+0x53c>
     f26:	8d e0       	ldi	r24, 0x0D	; 13
     f28:	3f c0       	rjmp	.+126    	; 0xfa8 <find_volume+0x53c>
     f2a:	8d e0       	ldi	r24, 0x0D	; 13
     f2c:	3d c0       	rjmp	.+122    	; 0xfa8 <find_volume+0x53c>
     f2e:	8d e0       	ldi	r24, 0x0D	; 13
     f30:	3b c0       	rjmp	.+118    	; 0xfa8 <find_volume+0x53c>
     f32:	8d e0       	ldi	r24, 0x0D	; 13
     f34:	39 c0       	rjmp	.+114    	; 0xfa8 <find_volume+0x53c>
     f36:	8d e0       	ldi	r24, 0x0D	; 13
     f38:	37 c0       	rjmp	.+110    	; 0xfa8 <find_volume+0x53c>
     f3a:	8d e0       	ldi	r24, 0x0D	; 13
     f3c:	35 c0       	rjmp	.+106    	; 0xfa8 <find_volume+0x53c>
     f3e:	8d e0       	ldi	r24, 0x0D	; 13
     f40:	33 c0       	rjmp	.+102    	; 0xfa8 <find_volume+0x53c>
     f42:	8d e0       	ldi	r24, 0x0D	; 13
     f44:	31 c0       	rjmp	.+98     	; 0xfa8 <find_volume+0x53c>
     f46:	8d e0       	ldi	r24, 0x0D	; 13
     f48:	2f c0       	rjmp	.+94     	; 0xfa8 <find_volume+0x53c>
     f4a:	8d e0       	ldi	r24, 0x0D	; 13
     f4c:	2d c0       	rjmp	.+90     	; 0xfa8 <find_volume+0x53c>
     f4e:	8d e0       	ldi	r24, 0x0D	; 13
     f50:	2b c0       	rjmp	.+86     	; 0xfa8 <find_volume+0x53c>
     f52:	49 01       	movw	r8, r18
     f54:	5a 01       	movw	r10, r20
     f56:	b2 e0       	ldi	r27, 0x02	; 2
     f58:	8b 0e       	add	r8, r27
     f5a:	91 1c       	adc	r9, r1
     f5c:	a1 1c       	adc	r10, r1
     f5e:	b1 1c       	adc	r11, r1
     f60:	f8 01       	movw	r30, r16
     f62:	86 8a       	std	Z+22, r8	; 0x16
     f64:	97 8a       	std	Z+23, r9	; 0x17
     f66:	a0 8e       	std	Z+24, r10	; 0x18
     f68:	b1 8e       	std	Z+25, r11	; 0x19
     f6a:	46 8e       	std	Z+30, r4	; 0x1e
     f6c:	57 8e       	std	Z+31, r5	; 0x1f
     f6e:	60 a2       	std	Z+32, r6	; 0x20
     f70:	71 a2       	std	Z+33, r7	; 0x21
     f72:	8e 89       	ldd	r24, Y+22	; 0x16
     f74:	9f 89       	ldd	r25, Y+23	; 0x17
     f76:	a8 8d       	ldd	r26, Y+24	; 0x18
     f78:	b9 8d       	ldd	r27, Y+25	; 0x19
     f7a:	84 0d       	add	r24, r4
     f7c:	95 1d       	adc	r25, r5
     f7e:	a6 1d       	adc	r26, r6
     f80:	b7 1d       	adc	r27, r7
     f82:	82 a3       	std	Z+34, r24	; 0x22
     f84:	93 a3       	std	Z+35, r25	; 0x23
     f86:	a4 a3       	std	Z+36, r26	; 0x24
     f88:	b5 a3       	std	Z+37, r27	; 0x25
     f8a:	8a 89       	ldd	r24, Y+18	; 0x12
     f8c:	9b 89       	ldd	r25, Y+19	; 0x13
     f8e:	ac 89       	ldd	r26, Y+20	; 0x14
     f90:	bd 89       	ldd	r27, Y+21	; 0x15
     f92:	84 0d       	add	r24, r4
     f94:	95 1d       	adc	r25, r5
     f96:	a6 1d       	adc	r26, r6
     f98:	b7 1d       	adc	r27, r7
     f9a:	82 a7       	std	Z+42, r24	; 0x2a
     f9c:	93 a7       	std	Z+43, r25	; 0x2b
     f9e:	a4 a7       	std	Z+44, r26	; 0x2c
     fa0:	b5 a7       	std	Z+45, r27	; 0x2d
     fa2:	f3 e0       	ldi	r31, 0x03	; 3
     fa4:	f9 8b       	std	Y+17, r31	; 0x11
     fa6:	e3 ce       	rjmp	.-570    	; 0xd6e <find_volume+0x302>
     fa8:	6d 96       	adiw	r28, 0x1d	; 29
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	cf 90       	pop	r12
     fbe:	bf 90       	pop	r11
     fc0:	af 90       	pop	r10
     fc2:	9f 90       	pop	r9
     fc4:	8f 90       	pop	r8
     fc6:	7f 90       	pop	r7
     fc8:	6f 90       	pop	r6
     fca:	5f 90       	pop	r5
     fcc:	4f 90       	pop	r4
     fce:	3f 90       	pop	r3
     fd0:	2f 90       	pop	r2
     fd2:	08 95       	ret

00000fd4 <sync_fs>:
     fd4:	ef 92       	push	r14
     fd6:	ff 92       	push	r15
     fd8:	0f 93       	push	r16
     fda:	1f 93       	push	r17
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
     fe2:	3a dc       	rcall	.-1932   	; 0x858 <sync_window>
     fe4:	98 2f       	mov	r25, r24
     fe6:	81 11       	cpse	r24, r1
     fe8:	5b c0       	rjmp	.+182    	; 0x10a0 <sync_fs+0xcc>
     fea:	88 81       	ld	r24, Y
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	09 f0       	breq	.+2      	; 0xff2 <sync_fs+0x1e>
     ff0:	4d c0       	rjmp	.+154    	; 0x108c <sync_fs+0xb8>
     ff2:	8d 81       	ldd	r24, Y+5	; 0x05
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	09 f0       	breq	.+2      	; 0xffa <sync_fs+0x26>
     ff8:	49 c0       	rjmp	.+146    	; 0x108c <sync_fs+0xb8>
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	52 e0       	ldi	r21, 0x02	; 2
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	7e 01       	movw	r14, r28
    1004:	82 e3       	ldi	r24, 0x32	; 50
    1006:	e8 0e       	add	r14, r24
    1008:	f1 1c       	adc	r15, r1
    100a:	c7 01       	movw	r24, r14
    100c:	c7 db       	rcall	.-2162   	; 0x79c <mem_set>
    100e:	85 e5       	ldi	r24, 0x55	; 85
    1010:	9a ea       	ldi	r25, 0xAA	; 170
    1012:	fe 01       	movw	r30, r28
    1014:	e0 5d       	subi	r30, 0xD0	; 208
    1016:	fd 4f       	sbci	r31, 0xFD	; 253
    1018:	80 83       	st	Z, r24
    101a:	91 83       	std	Z+1, r25	; 0x01
    101c:	82 e5       	ldi	r24, 0x52	; 82
    101e:	92 e5       	ldi	r25, 0x52	; 82
    1020:	a1 e6       	ldi	r26, 0x61	; 97
    1022:	b1 e4       	ldi	r27, 0x41	; 65
    1024:	8a ab       	std	Y+50, r24	; 0x32
    1026:	9b ab       	std	Y+51, r25	; 0x33
    1028:	ac ab       	std	Y+52, r26	; 0x34
    102a:	bd ab       	std	Y+53, r27	; 0x35
    102c:	82 e7       	ldi	r24, 0x72	; 114
    102e:	92 e7       	ldi	r25, 0x72	; 114
    1030:	a1 e4       	ldi	r26, 0x41	; 65
    1032:	b1 e6       	ldi	r27, 0x61	; 97
    1034:	7a 97       	sbiw	r30, 0x1a	; 26
    1036:	80 83       	st	Z, r24
    1038:	91 83       	std	Z+1, r25	; 0x01
    103a:	a2 83       	std	Z+2, r26	; 0x02
    103c:	b3 83       	std	Z+3, r27	; 0x03
    103e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1040:	9f 85       	ldd	r25, Y+15	; 0x0f
    1042:	a8 89       	ldd	r26, Y+16	; 0x10
    1044:	b9 89       	ldd	r27, Y+17	; 0x11
    1046:	34 96       	adiw	r30, 0x04	; 4
    1048:	80 83       	st	Z, r24
    104a:	91 83       	std	Z+1, r25	; 0x01
    104c:	a2 83       	std	Z+2, r26	; 0x02
    104e:	b3 83       	std	Z+3, r27	; 0x03
    1050:	8a 85       	ldd	r24, Y+10	; 0x0a
    1052:	9b 85       	ldd	r25, Y+11	; 0x0b
    1054:	ac 85       	ldd	r26, Y+12	; 0x0c
    1056:	bd 85       	ldd	r27, Y+13	; 0x0d
    1058:	34 96       	adiw	r30, 0x04	; 4
    105a:	80 83       	st	Z, r24
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	a2 83       	std	Z+2, r26	; 0x02
    1060:	b3 83       	std	Z+3, r27	; 0x03
    1062:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1064:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1066:	a8 a1       	ldd	r26, Y+32	; 0x20
    1068:	b9 a1       	ldd	r27, Y+33	; 0x21
    106a:	9c 01       	movw	r18, r24
    106c:	ad 01       	movw	r20, r26
    106e:	2f 5f       	subi	r18, 0xFF	; 255
    1070:	3f 4f       	sbci	r19, 0xFF	; 255
    1072:	4f 4f       	sbci	r20, 0xFF	; 255
    1074:	5f 4f       	sbci	r21, 0xFF	; 255
    1076:	2e a7       	std	Y+46, r18	; 0x2e
    1078:	3f a7       	std	Y+47, r19	; 0x2f
    107a:	48 ab       	std	Y+48, r20	; 0x30
    107c:	59 ab       	std	Y+49, r21	; 0x31
    107e:	01 e0       	ldi	r16, 0x01	; 1
    1080:	10 e0       	ldi	r17, 0x00	; 0
    1082:	b7 01       	movw	r22, r14
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	0e 94 11 15 	call	0x2a22	; 0x2a22 <disk_write>
    108a:	1d 82       	std	Y+5, r1	; 0x05
    108c:	40 e0       	ldi	r20, 0x00	; 0
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	0e 94 81 15 	call	0x2b02	; 0x2b02 <disk_ioctl>
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	81 11       	cpse	r24, r1
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <sync_fs+0xcc>
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	89 2f       	mov	r24, r25
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	08 95       	ret

000010b0 <clust2sect>:
    10b0:	cf 92       	push	r12
    10b2:	df 92       	push	r13
    10b4:	ef 92       	push	r14
    10b6:	ff 92       	push	r15
    10b8:	fc 01       	movw	r30, r24
    10ba:	9a 01       	movw	r18, r20
    10bc:	ab 01       	movw	r20, r22
    10be:	22 50       	subi	r18, 0x02	; 2
    10c0:	31 09       	sbc	r19, r1
    10c2:	41 09       	sbc	r20, r1
    10c4:	51 09       	sbc	r21, r1
    10c6:	c6 88       	ldd	r12, Z+22	; 0x16
    10c8:	d7 88       	ldd	r13, Z+23	; 0x17
    10ca:	e0 8c       	ldd	r14, Z+24	; 0x18
    10cc:	f1 8c       	ldd	r15, Z+25	; 0x19
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	c8 1a       	sub	r12, r24
    10d2:	d1 08       	sbc	r13, r1
    10d4:	e1 08       	sbc	r14, r1
    10d6:	f1 08       	sbc	r15, r1
    10d8:	2c 15       	cp	r18, r12
    10da:	3d 05       	cpc	r19, r13
    10dc:	4e 05       	cpc	r20, r14
    10de:	5f 05       	cpc	r21, r15
    10e0:	68 f4       	brcc	.+26     	; 0x10fc <clust2sect+0x4c>
    10e2:	a2 81       	ldd	r26, Z+2	; 0x02
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <__muluhisi3>
    10ea:	c2 a4       	ldd	r12, Z+42	; 0x2a
    10ec:	d3 a4       	ldd	r13, Z+43	; 0x2b
    10ee:	e4 a4       	ldd	r14, Z+44	; 0x2c
    10f0:	f5 a4       	ldd	r15, Z+45	; 0x2d
    10f2:	6c 0d       	add	r22, r12
    10f4:	7d 1d       	adc	r23, r13
    10f6:	8e 1d       	adc	r24, r14
    10f8:	9f 1d       	adc	r25, r15
    10fa:	03 c0       	rjmp	.+6      	; 0x1102 <clust2sect+0x52>
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	cb 01       	movw	r24, r22
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	df 90       	pop	r13
    1108:	cf 90       	pop	r12
    110a:	08 95       	ret

0000110c <get_fat>:
    110c:	af 92       	push	r10
    110e:	bf 92       	push	r11
    1110:	cf 92       	push	r12
    1112:	df 92       	push	r13
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	ec 01       	movw	r28, r24
    1122:	6a 01       	movw	r12, r20
    1124:	7b 01       	movw	r14, r22
    1126:	42 30       	cpi	r20, 0x02	; 2
    1128:	51 05       	cpc	r21, r1
    112a:	61 05       	cpc	r22, r1
    112c:	71 05       	cpc	r23, r1
    112e:	08 f4       	brcc	.+2      	; 0x1132 <get_fat+0x26>
    1130:	aa c0       	rjmp	.+340    	; 0x1286 <get_fat+0x17a>
    1132:	4e 89       	ldd	r20, Y+22	; 0x16
    1134:	5f 89       	ldd	r21, Y+23	; 0x17
    1136:	68 8d       	ldd	r22, Y+24	; 0x18
    1138:	79 8d       	ldd	r23, Y+25	; 0x19
    113a:	c4 16       	cp	r12, r20
    113c:	d5 06       	cpc	r13, r21
    113e:	e6 06       	cpc	r14, r22
    1140:	f7 06       	cpc	r15, r23
    1142:	08 f0       	brcs	.+2      	; 0x1146 <get_fat+0x3a>
    1144:	a5 c0       	rjmp	.+330    	; 0x1290 <get_fat+0x184>
    1146:	88 81       	ld	r24, Y
    1148:	82 30       	cpi	r24, 0x02	; 2
    114a:	09 f4       	brne	.+2      	; 0x114e <get_fat+0x42>
    114c:	4b c0       	rjmp	.+150    	; 0x11e4 <get_fat+0xd8>
    114e:	83 30       	cpi	r24, 0x03	; 3
    1150:	09 f4       	brne	.+2      	; 0x1154 <get_fat+0x48>
    1152:	6a c0       	rjmp	.+212    	; 0x1228 <get_fat+0x11c>
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	09 f0       	breq	.+2      	; 0x115a <get_fat+0x4e>
    1158:	a0 c0       	rjmp	.+320    	; 0x129a <get_fat+0x18e>
    115a:	86 01       	movw	r16, r12
    115c:	16 95       	lsr	r17
    115e:	07 95       	ror	r16
    1160:	0c 0d       	add	r16, r12
    1162:	1d 1d       	adc	r17, r13
    1164:	c8 01       	movw	r24, r16
    1166:	89 2f       	mov	r24, r25
    1168:	99 27       	eor	r25, r25
    116a:	86 95       	lsr	r24
    116c:	4a a1       	ldd	r20, Y+34	; 0x22
    116e:	5b a1       	ldd	r21, Y+35	; 0x23
    1170:	6c a1       	ldd	r22, Y+36	; 0x24
    1172:	7d a1       	ldd	r23, Y+37	; 0x25
    1174:	48 0f       	add	r20, r24
    1176:	59 1f       	adc	r21, r25
    1178:	61 1d       	adc	r22, r1
    117a:	71 1d       	adc	r23, r1
    117c:	ce 01       	movw	r24, r28
    117e:	d7 db       	rcall	.-2130   	; 0x92e <move_window>
    1180:	81 11       	cpse	r24, r1
    1182:	90 c0       	rjmp	.+288    	; 0x12a4 <get_fat+0x198>
    1184:	58 01       	movw	r10, r16
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	a8 1a       	sub	r10, r24
    118a:	b8 0a       	sbc	r11, r24
    118c:	11 70       	andi	r17, 0x01	; 1
    118e:	fe 01       	movw	r30, r28
    1190:	e0 0f       	add	r30, r16
    1192:	f1 1f       	adc	r31, r17
    1194:	12 a9       	ldd	r17, Z+50	; 0x32
    1196:	c5 01       	movw	r24, r10
    1198:	89 2f       	mov	r24, r25
    119a:	99 27       	eor	r25, r25
    119c:	86 95       	lsr	r24
    119e:	4a a1       	ldd	r20, Y+34	; 0x22
    11a0:	5b a1       	ldd	r21, Y+35	; 0x23
    11a2:	6c a1       	ldd	r22, Y+36	; 0x24
    11a4:	7d a1       	ldd	r23, Y+37	; 0x25
    11a6:	48 0f       	add	r20, r24
    11a8:	59 1f       	adc	r21, r25
    11aa:	61 1d       	adc	r22, r1
    11ac:	71 1d       	adc	r23, r1
    11ae:	ce 01       	movw	r24, r28
    11b0:	be db       	rcall	.-2180   	; 0x92e <move_window>
    11b2:	81 11       	cpse	r24, r1
    11b4:	7b c0       	rjmp	.+246    	; 0x12ac <get_fat+0x1a0>
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	b8 22       	and	r11, r24
    11ba:	ca 0d       	add	r28, r10
    11bc:	db 1d       	adc	r29, r11
    11be:	8a a9       	ldd	r24, Y+50	; 0x32
    11c0:	61 2f       	mov	r22, r17
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	78 2b       	or	r23, r24
    11c6:	c0 fe       	sbrs	r12, 0
    11c8:	09 c0       	rjmp	.+18     	; 0x11dc <get_fat+0xd0>
    11ca:	72 95       	swap	r23
    11cc:	62 95       	swap	r22
    11ce:	6f 70       	andi	r22, 0x0F	; 15
    11d0:	67 27       	eor	r22, r23
    11d2:	7f 70       	andi	r23, 0x0F	; 15
    11d4:	67 27       	eor	r22, r23
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	73 c0       	rjmp	.+230    	; 0x12c2 <get_fat+0x1b6>
    11dc:	7f 70       	andi	r23, 0x0F	; 15
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	6f c0       	rjmp	.+222    	; 0x12c2 <get_fat+0x1b6>
    11e4:	77 27       	eor	r23, r23
    11e6:	6f 2d       	mov	r22, r15
    11e8:	5e 2d       	mov	r21, r14
    11ea:	4d 2d       	mov	r20, r13
    11ec:	0a a1       	ldd	r16, Y+34	; 0x22
    11ee:	1b a1       	ldd	r17, Y+35	; 0x23
    11f0:	2c a1       	ldd	r18, Y+36	; 0x24
    11f2:	3d a1       	ldd	r19, Y+37	; 0x25
    11f4:	40 0f       	add	r20, r16
    11f6:	51 1f       	adc	r21, r17
    11f8:	62 1f       	adc	r22, r18
    11fa:	73 1f       	adc	r23, r19
    11fc:	ce 01       	movw	r24, r28
    11fe:	97 db       	rcall	.-2258   	; 0x92e <move_window>
    1200:	81 11       	cpse	r24, r1
    1202:	58 c0       	rjmp	.+176    	; 0x12b4 <get_fat+0x1a8>
    1204:	cc 0c       	add	r12, r12
    1206:	dd 1c       	adc	r13, r13
    1208:	ee 1c       	adc	r14, r14
    120a:	ff 1c       	adc	r15, r15
    120c:	e8 94       	clt
    120e:	c0 f8       	bld	r12, 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	d8 22       	and	r13, r24
    1214:	ee 24       	eor	r14, r14
    1216:	ff 24       	eor	r15, r15
    1218:	fe 01       	movw	r30, r28
    121a:	ec 0d       	add	r30, r12
    121c:	fd 1d       	adc	r31, r13
    121e:	62 a9       	ldd	r22, Z+50	; 0x32
    1220:	73 a9       	ldd	r23, Z+51	; 0x33
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	4d c0       	rjmp	.+154    	; 0x12c2 <get_fat+0x1b6>
    1228:	4a a1       	ldd	r20, Y+34	; 0x22
    122a:	5b a1       	ldd	r21, Y+35	; 0x23
    122c:	6c a1       	ldd	r22, Y+36	; 0x24
    122e:	7d a1       	ldd	r23, Y+37	; 0x25
    1230:	97 01       	movw	r18, r14
    1232:	86 01       	movw	r16, r12
    1234:	68 94       	set
    1236:	16 f8       	bld	r1, 6
    1238:	36 95       	lsr	r19
    123a:	27 95       	ror	r18
    123c:	17 95       	ror	r17
    123e:	07 95       	ror	r16
    1240:	16 94       	lsr	r1
    1242:	d1 f7       	brne	.-12     	; 0x1238 <get_fat+0x12c>
    1244:	40 0f       	add	r20, r16
    1246:	51 1f       	adc	r21, r17
    1248:	62 1f       	adc	r22, r18
    124a:	73 1f       	adc	r23, r19
    124c:	ce 01       	movw	r24, r28
    124e:	6f db       	rcall	.-2338   	; 0x92e <move_window>
    1250:	81 11       	cpse	r24, r1
    1252:	34 c0       	rjmp	.+104    	; 0x12bc <get_fat+0x1b0>
    1254:	cc 0c       	add	r12, r12
    1256:	dd 1c       	adc	r13, r13
    1258:	ee 1c       	adc	r14, r14
    125a:	ff 1c       	adc	r15, r15
    125c:	cc 0c       	add	r12, r12
    125e:	dd 1c       	adc	r13, r13
    1260:	ee 1c       	adc	r14, r14
    1262:	ff 1c       	adc	r15, r15
    1264:	8c ef       	ldi	r24, 0xFC	; 252
    1266:	c8 22       	and	r12, r24
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	d8 22       	and	r13, r24
    126c:	ee 24       	eor	r14, r14
    126e:	ff 24       	eor	r15, r15
    1270:	fe 01       	movw	r30, r28
    1272:	ec 0d       	add	r30, r12
    1274:	fd 1d       	adc	r31, r13
    1276:	82 a9       	ldd	r24, Z+50	; 0x32
    1278:	93 a9       	ldd	r25, Z+51	; 0x33
    127a:	a4 a9       	ldd	r26, Z+52	; 0x34
    127c:	b5 a9       	ldd	r27, Z+53	; 0x35
    127e:	bc 01       	movw	r22, r24
    1280:	cd 01       	movw	r24, r26
    1282:	9f 70       	andi	r25, 0x0F	; 15
    1284:	1e c0       	rjmp	.+60     	; 0x12c2 <get_fat+0x1b6>
    1286:	61 e0       	ldi	r22, 0x01	; 1
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	19 c0       	rjmp	.+50     	; 0x12c2 <get_fat+0x1b6>
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	14 c0       	rjmp	.+40     	; 0x12c2 <get_fat+0x1b6>
    129a:	61 e0       	ldi	r22, 0x01	; 1
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0f c0       	rjmp	.+30     	; 0x12c2 <get_fat+0x1b6>
    12a4:	6f ef       	ldi	r22, 0xFF	; 255
    12a6:	7f ef       	ldi	r23, 0xFF	; 255
    12a8:	cb 01       	movw	r24, r22
    12aa:	0b c0       	rjmp	.+22     	; 0x12c2 <get_fat+0x1b6>
    12ac:	6f ef       	ldi	r22, 0xFF	; 255
    12ae:	7f ef       	ldi	r23, 0xFF	; 255
    12b0:	cb 01       	movw	r24, r22
    12b2:	07 c0       	rjmp	.+14     	; 0x12c2 <get_fat+0x1b6>
    12b4:	6f ef       	ldi	r22, 0xFF	; 255
    12b6:	7f ef       	ldi	r23, 0xFF	; 255
    12b8:	cb 01       	movw	r24, r22
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <get_fat+0x1b6>
    12bc:	6f ef       	ldi	r22, 0xFF	; 255
    12be:	7f ef       	ldi	r23, 0xFF	; 255
    12c0:	cb 01       	movw	r24, r22
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	bf 90       	pop	r11
    12d4:	af 90       	pop	r10
    12d6:	08 95       	ret

000012d8 <dir_sdi>:
    12d8:	af 92       	push	r10
    12da:	bf 92       	push	r11
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	ec 01       	movw	r28, r24
    12ee:	8b 01       	movw	r16, r22
    12f0:	6c 83       	std	Y+4, r22	; 0x04
    12f2:	7d 83       	std	Y+5, r23	; 0x05
    12f4:	ce 80       	ldd	r12, Y+6	; 0x06
    12f6:	df 80       	ldd	r13, Y+7	; 0x07
    12f8:	e8 84       	ldd	r14, Y+8	; 0x08
    12fa:	f9 84       	ldd	r15, Y+9	; 0x09
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	c8 16       	cp	r12, r24
    1300:	d1 04       	cpc	r13, r1
    1302:	e1 04       	cpc	r14, r1
    1304:	f1 04       	cpc	r15, r1
    1306:	09 f4       	brne	.+2      	; 0x130a <dir_sdi+0x32>
    1308:	8a c0       	rjmp	.+276    	; 0x141e <dir_sdi+0x146>
    130a:	e8 81       	ld	r30, Y
    130c:	f9 81       	ldd	r31, Y+1	; 0x01
    130e:	86 89       	ldd	r24, Z+22	; 0x16
    1310:	97 89       	ldd	r25, Z+23	; 0x17
    1312:	a0 8d       	ldd	r26, Z+24	; 0x18
    1314:	b1 8d       	ldd	r27, Z+25	; 0x19
    1316:	c8 16       	cp	r12, r24
    1318:	d9 06       	cpc	r13, r25
    131a:	ea 06       	cpc	r14, r26
    131c:	fb 06       	cpc	r15, r27
    131e:	08 f0       	brcs	.+2      	; 0x1322 <dir_sdi+0x4a>
    1320:	80 c0       	rjmp	.+256    	; 0x1422 <dir_sdi+0x14a>
    1322:	c1 14       	cp	r12, r1
    1324:	d1 04       	cpc	r13, r1
    1326:	e1 04       	cpc	r14, r1
    1328:	f1 04       	cpc	r15, r1
    132a:	c1 f4       	brne	.+48     	; 0x135c <dir_sdi+0x84>
    132c:	80 81       	ld	r24, Z
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	41 f4       	brne	.+16     	; 0x1342 <dir_sdi+0x6a>
    1332:	86 a1       	ldd	r24, Z+38	; 0x26
    1334:	97 a1       	ldd	r25, Z+39	; 0x27
    1336:	a0 a5       	ldd	r26, Z+40	; 0x28
    1338:	b1 a5       	ldd	r27, Z+41	; 0x29
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	a1 05       	cpc	r26, r1
    133e:	b1 05       	cpc	r27, r1
    1340:	59 f4       	brne	.+22     	; 0x1358 <dir_sdi+0x80>
    1342:	80 85       	ldd	r24, Z+8	; 0x08
    1344:	91 85       	ldd	r25, Z+9	; 0x09
    1346:	08 17       	cp	r16, r24
    1348:	19 07       	cpc	r17, r25
    134a:	08 f0       	brcs	.+2      	; 0x134e <dir_sdi+0x76>
    134c:	6c c0       	rjmp	.+216    	; 0x1426 <dir_sdi+0x14e>
    134e:	66 a1       	ldd	r22, Z+38	; 0x26
    1350:	77 a1       	ldd	r23, Z+39	; 0x27
    1352:	80 a5       	ldd	r24, Z+40	; 0x28
    1354:	91 a5       	ldd	r25, Z+41	; 0x29
    1356:	35 c0       	rjmp	.+106    	; 0x13c2 <dir_sdi+0xea>
    1358:	6c 01       	movw	r12, r24
    135a:	7d 01       	movw	r14, r26
    135c:	a2 80       	ldd	r10, Z+2	; 0x02
    135e:	80 e1       	ldi	r24, 0x10	; 16
    1360:	a8 9e       	mul	r10, r24
    1362:	50 01       	movw	r10, r0
    1364:	11 24       	eor	r1, r1
    1366:	0a 15       	cp	r16, r10
    1368:	1b 05       	cpc	r17, r11
    136a:	30 f1       	brcs	.+76     	; 0x13b8 <dir_sdi+0xe0>
    136c:	b7 01       	movw	r22, r14
    136e:	a6 01       	movw	r20, r12
    1370:	88 81       	ld	r24, Y
    1372:	99 81       	ldd	r25, Y+1	; 0x01
    1374:	cb de       	rcall	.-618    	; 0x110c <get_fat>
    1376:	6b 01       	movw	r12, r22
    1378:	7c 01       	movw	r14, r24
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	c8 16       	cp	r12, r24
    137e:	d8 06       	cpc	r13, r24
    1380:	e8 06       	cpc	r14, r24
    1382:	f8 06       	cpc	r15, r24
    1384:	09 f4       	brne	.+2      	; 0x1388 <dir_sdi+0xb0>
    1386:	51 c0       	rjmp	.+162    	; 0x142a <dir_sdi+0x152>
    1388:	82 e0       	ldi	r24, 0x02	; 2
    138a:	c8 16       	cp	r12, r24
    138c:	d1 04       	cpc	r13, r1
    138e:	e1 04       	cpc	r14, r1
    1390:	f1 04       	cpc	r15, r1
    1392:	08 f4       	brcc	.+2      	; 0x1396 <dir_sdi+0xbe>
    1394:	4c c0       	rjmp	.+152    	; 0x142e <dir_sdi+0x156>
    1396:	e8 81       	ld	r30, Y
    1398:	f9 81       	ldd	r31, Y+1	; 0x01
    139a:	86 89       	ldd	r24, Z+22	; 0x16
    139c:	97 89       	ldd	r25, Z+23	; 0x17
    139e:	a0 8d       	ldd	r26, Z+24	; 0x18
    13a0:	b1 8d       	ldd	r27, Z+25	; 0x19
    13a2:	c8 16       	cp	r12, r24
    13a4:	d9 06       	cpc	r13, r25
    13a6:	ea 06       	cpc	r14, r26
    13a8:	fb 06       	cpc	r15, r27
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <dir_sdi+0xd6>
    13ac:	42 c0       	rjmp	.+132    	; 0x1432 <dir_sdi+0x15a>
    13ae:	0a 19       	sub	r16, r10
    13b0:	1b 09       	sbc	r17, r11
    13b2:	0a 15       	cp	r16, r10
    13b4:	1b 05       	cpc	r17, r11
    13b6:	d0 f6       	brcc	.-76     	; 0x136c <dir_sdi+0x94>
    13b8:	b7 01       	movw	r22, r14
    13ba:	a6 01       	movw	r20, r12
    13bc:	88 81       	ld	r24, Y
    13be:	99 81       	ldd	r25, Y+1	; 0x01
    13c0:	77 de       	rcall	.-786    	; 0x10b0 <clust2sect>
    13c2:	ca 86       	std	Y+10, r12	; 0x0a
    13c4:	db 86       	std	Y+11, r13	; 0x0b
    13c6:	ec 86       	std	Y+12, r14	; 0x0c
    13c8:	fd 86       	std	Y+13, r15	; 0x0d
    13ca:	61 15       	cp	r22, r1
    13cc:	71 05       	cpc	r23, r1
    13ce:	81 05       	cpc	r24, r1
    13d0:	91 05       	cpc	r25, r1
    13d2:	89 f1       	breq	.+98     	; 0x1436 <dir_sdi+0x15e>
    13d4:	98 01       	movw	r18, r16
    13d6:	32 95       	swap	r19
    13d8:	22 95       	swap	r18
    13da:	2f 70       	andi	r18, 0x0F	; 15
    13dc:	23 27       	eor	r18, r19
    13de:	3f 70       	andi	r19, 0x0F	; 15
    13e0:	23 27       	eor	r18, r19
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	82 0f       	add	r24, r18
    13e8:	93 1f       	adc	r25, r19
    13ea:	a1 1d       	adc	r26, r1
    13ec:	b1 1d       	adc	r27, r1
    13ee:	8e 87       	std	Y+14, r24	; 0x0e
    13f0:	9f 87       	std	Y+15, r25	; 0x0f
    13f2:	a8 8b       	std	Y+16, r26	; 0x10
    13f4:	b9 8b       	std	Y+17, r27	; 0x11
    13f6:	0f 70       	andi	r16, 0x0F	; 15
    13f8:	11 27       	eor	r17, r17
    13fa:	c8 01       	movw	r24, r16
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	82 95       	swap	r24
    1402:	92 95       	swap	r25
    1404:	90 7f       	andi	r25, 0xF0	; 240
    1406:	98 27       	eor	r25, r24
    1408:	80 7f       	andi	r24, 0xF0	; 240
    140a:	98 27       	eor	r25, r24
    140c:	c2 96       	adiw	r24, 0x32	; 50
    140e:	28 81       	ld	r18, Y
    1410:	39 81       	ldd	r19, Y+1	; 0x01
    1412:	82 0f       	add	r24, r18
    1414:	93 1f       	adc	r25, r19
    1416:	8a 8b       	std	Y+18, r24	; 0x12
    1418:	9b 8b       	std	Y+19, r25	; 0x13
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	0d c0       	rjmp	.+26     	; 0x1438 <dir_sdi+0x160>
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	0b c0       	rjmp	.+22     	; 0x1438 <dir_sdi+0x160>
    1422:	82 e0       	ldi	r24, 0x02	; 2
    1424:	09 c0       	rjmp	.+18     	; 0x1438 <dir_sdi+0x160>
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	07 c0       	rjmp	.+14     	; 0x1438 <dir_sdi+0x160>
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <dir_sdi+0x160>
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <dir_sdi+0x160>
    1432:	82 e0       	ldi	r24, 0x02	; 2
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <dir_sdi+0x160>
    1436:	82 e0       	ldi	r24, 0x02	; 2
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	bf 90       	pop	r11
    144a:	af 90       	pop	r10
    144c:	08 95       	ret

0000144e <put_fat>:
    144e:	4f 92       	push	r4
    1450:	5f 92       	push	r5
    1452:	6f 92       	push	r6
    1454:	7f 92       	push	r7
    1456:	8f 92       	push	r8
    1458:	9f 92       	push	r9
    145a:	af 92       	push	r10
    145c:	bf 92       	push	r11
    145e:	cf 92       	push	r12
    1460:	df 92       	push	r13
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	ec 01       	movw	r28, r24
    1470:	6a 01       	movw	r12, r20
    1472:	7b 01       	movw	r14, r22
    1474:	28 01       	movw	r4, r16
    1476:	39 01       	movw	r6, r18
    1478:	42 30       	cpi	r20, 0x02	; 2
    147a:	51 05       	cpc	r21, r1
    147c:	61 05       	cpc	r22, r1
    147e:	71 05       	cpc	r23, r1
    1480:	08 f4       	brcc	.+2      	; 0x1484 <put_fat+0x36>
    1482:	d7 c0       	rjmp	.+430    	; 0x1632 <put_fat+0x1e4>
    1484:	8e 89       	ldd	r24, Y+22	; 0x16
    1486:	9f 89       	ldd	r25, Y+23	; 0x17
    1488:	a8 8d       	ldd	r26, Y+24	; 0x18
    148a:	b9 8d       	ldd	r27, Y+25	; 0x19
    148c:	48 17       	cp	r20, r24
    148e:	59 07       	cpc	r21, r25
    1490:	6a 07       	cpc	r22, r26
    1492:	7b 07       	cpc	r23, r27
    1494:	08 f0       	brcs	.+2      	; 0x1498 <put_fat+0x4a>
    1496:	cf c0       	rjmp	.+414    	; 0x1636 <put_fat+0x1e8>
    1498:	88 81       	ld	r24, Y
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	09 f4       	brne	.+2      	; 0x14a0 <put_fat+0x52>
    149e:	69 c0       	rjmp	.+210    	; 0x1572 <put_fat+0x124>
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <put_fat+0x58>
    14a4:	8b c0       	rjmp	.+278    	; 0x15bc <put_fat+0x16e>
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	09 f0       	breq	.+2      	; 0x14ac <put_fat+0x5e>
    14aa:	c7 c0       	rjmp	.+398    	; 0x163a <put_fat+0x1ec>
    14ac:	5a 01       	movw	r10, r20
    14ae:	b6 94       	lsr	r11
    14b0:	a7 94       	ror	r10
    14b2:	a4 0e       	add	r10, r20
    14b4:	b5 1e       	adc	r11, r21
    14b6:	c5 01       	movw	r24, r10
    14b8:	89 2f       	mov	r24, r25
    14ba:	99 27       	eor	r25, r25
    14bc:	86 95       	lsr	r24
    14be:	4a a1       	ldd	r20, Y+34	; 0x22
    14c0:	5b a1       	ldd	r21, Y+35	; 0x23
    14c2:	6c a1       	ldd	r22, Y+36	; 0x24
    14c4:	7d a1       	ldd	r23, Y+37	; 0x25
    14c6:	48 0f       	add	r20, r24
    14c8:	59 1f       	adc	r21, r25
    14ca:	61 1d       	adc	r22, r1
    14cc:	71 1d       	adc	r23, r1
    14ce:	ce 01       	movw	r24, r28
    14d0:	2e da       	rcall	.-2980   	; 0x92e <move_window>
    14d2:	81 11       	cpse	r24, r1
    14d4:	b3 c0       	rjmp	.+358    	; 0x163c <put_fat+0x1ee>
    14d6:	85 01       	movw	r16, r10
    14d8:	0f 5f       	subi	r16, 0xFF	; 255
    14da:	1f 4f       	sbci	r17, 0xFF	; 255
    14dc:	c5 01       	movw	r24, r10
    14de:	91 70       	andi	r25, 0x01	; 1
    14e0:	46 01       	movw	r8, r12
    14e2:	57 01       	movw	r10, r14
    14e4:	51 e0       	ldi	r21, 0x01	; 1
    14e6:	85 22       	and	r8, r21
    14e8:	99 24       	eor	r9, r9
    14ea:	aa 24       	eor	r10, r10
    14ec:	bb 24       	eor	r11, r11
    14ee:	c0 fe       	sbrs	r12, 0
    14f0:	0b c0       	rjmp	.+22     	; 0x1508 <put_fat+0xba>
    14f2:	fe 01       	movw	r30, r28
    14f4:	e8 0f       	add	r30, r24
    14f6:	f9 1f       	adc	r31, r25
    14f8:	42 a9       	ldd	r20, Z+50	; 0x32
    14fa:	4f 70       	andi	r20, 0x0F	; 15
    14fc:	50 e1       	ldi	r21, 0x10	; 16
    14fe:	45 9e       	mul	r4, r21
    1500:	90 01       	movw	r18, r0
    1502:	11 24       	eor	r1, r1
    1504:	24 2b       	or	r18, r20
    1506:	01 c0       	rjmp	.+2      	; 0x150a <put_fat+0xbc>
    1508:	24 2d       	mov	r18, r4
    150a:	fe 01       	movw	r30, r28
    150c:	e8 0f       	add	r30, r24
    150e:	f9 1f       	adc	r31, r25
    1510:	22 ab       	std	Z+50, r18	; 0x32
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	8c 83       	std	Y+4, r24	; 0x04
    1516:	4a a1       	ldd	r20, Y+34	; 0x22
    1518:	5b a1       	ldd	r21, Y+35	; 0x23
    151a:	6c a1       	ldd	r22, Y+36	; 0x24
    151c:	7d a1       	ldd	r23, Y+37	; 0x25
    151e:	c8 01       	movw	r24, r16
    1520:	89 2f       	mov	r24, r25
    1522:	99 27       	eor	r25, r25
    1524:	86 95       	lsr	r24
    1526:	48 0f       	add	r20, r24
    1528:	59 1f       	adc	r21, r25
    152a:	61 1d       	adc	r22, r1
    152c:	71 1d       	adc	r23, r1
    152e:	ce 01       	movw	r24, r28
    1530:	fe d9       	rcall	.-3076   	; 0x92e <move_window>
    1532:	81 11       	cpse	r24, r1
    1534:	83 c0       	rjmp	.+262    	; 0x163c <put_fat+0x1ee>
    1536:	11 70       	andi	r17, 0x01	; 1
    1538:	89 28       	or	r8, r9
    153a:	8a 28       	or	r8, r10
    153c:	8b 28       	or	r8, r11
    153e:	49 f0       	breq	.+18     	; 0x1552 <put_fat+0x104>
    1540:	68 94       	set
    1542:	13 f8       	bld	r1, 3
    1544:	76 94       	lsr	r7
    1546:	67 94       	ror	r6
    1548:	57 94       	ror	r5
    154a:	47 94       	ror	r4
    154c:	16 94       	lsr	r1
    154e:	d1 f7       	brne	.-12     	; 0x1544 <put_fat+0xf6>
    1550:	09 c0       	rjmp	.+18     	; 0x1564 <put_fat+0x116>
    1552:	fe 01       	movw	r30, r28
    1554:	e0 0f       	add	r30, r16
    1556:	f1 1f       	adc	r31, r17
    1558:	22 a9       	ldd	r18, Z+50	; 0x32
    155a:	20 7f       	andi	r18, 0xF0	; 240
    155c:	95 2d       	mov	r25, r5
    155e:	9f 70       	andi	r25, 0x0F	; 15
    1560:	42 2e       	mov	r4, r18
    1562:	49 2a       	or	r4, r25
    1564:	fe 01       	movw	r30, r28
    1566:	e0 0f       	add	r30, r16
    1568:	f1 1f       	adc	r31, r17
    156a:	42 aa       	std	Z+50, r4	; 0x32
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	9c 83       	std	Y+4, r25	; 0x04
    1570:	65 c0       	rjmp	.+202    	; 0x163c <put_fat+0x1ee>
    1572:	45 2f       	mov	r20, r21
    1574:	56 2f       	mov	r21, r22
    1576:	67 2f       	mov	r22, r23
    1578:	77 27       	eor	r23, r23
    157a:	8a a1       	ldd	r24, Y+34	; 0x22
    157c:	9b a1       	ldd	r25, Y+35	; 0x23
    157e:	ac a1       	ldd	r26, Y+36	; 0x24
    1580:	bd a1       	ldd	r27, Y+37	; 0x25
    1582:	48 0f       	add	r20, r24
    1584:	59 1f       	adc	r21, r25
    1586:	6a 1f       	adc	r22, r26
    1588:	7b 1f       	adc	r23, r27
    158a:	ce 01       	movw	r24, r28
    158c:	d0 d9       	rcall	.-3168   	; 0x92e <move_window>
    158e:	81 11       	cpse	r24, r1
    1590:	55 c0       	rjmp	.+170    	; 0x163c <put_fat+0x1ee>
    1592:	cc 0c       	add	r12, r12
    1594:	dd 1c       	adc	r13, r13
    1596:	ee 1c       	adc	r14, r14
    1598:	ff 1c       	adc	r15, r15
    159a:	e8 94       	clt
    159c:	c0 f8       	bld	r12, 0
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	d9 22       	and	r13, r25
    15a2:	ee 24       	eor	r14, r14
    15a4:	ff 24       	eor	r15, r15
    15a6:	22 e3       	ldi	r18, 0x32	; 50
    15a8:	c2 0e       	add	r12, r18
    15aa:	d1 1c       	adc	r13, r1
    15ac:	fe 01       	movw	r30, r28
    15ae:	ec 0d       	add	r30, r12
    15b0:	fd 1d       	adc	r31, r13
    15b2:	40 82       	st	Z, r4
    15b4:	51 82       	std	Z+1, r5	; 0x01
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	9c 83       	std	Y+4, r25	; 0x04
    15ba:	40 c0       	rjmp	.+128    	; 0x163c <put_fat+0x1ee>
    15bc:	8a a1       	ldd	r24, Y+34	; 0x22
    15be:	9b a1       	ldd	r25, Y+35	; 0x23
    15c0:	ac a1       	ldd	r26, Y+36	; 0x24
    15c2:	bd a1       	ldd	r27, Y+37	; 0x25
    15c4:	68 94       	set
    15c6:	16 f8       	bld	r1, 6
    15c8:	76 95       	lsr	r23
    15ca:	67 95       	ror	r22
    15cc:	57 95       	ror	r21
    15ce:	47 95       	ror	r20
    15d0:	16 94       	lsr	r1
    15d2:	d1 f7       	brne	.-12     	; 0x15c8 <put_fat+0x17a>
    15d4:	48 0f       	add	r20, r24
    15d6:	59 1f       	adc	r21, r25
    15d8:	6a 1f       	adc	r22, r26
    15da:	7b 1f       	adc	r23, r27
    15dc:	ce 01       	movw	r24, r28
    15de:	a7 d9       	rcall	.-3250   	; 0x92e <move_window>
    15e0:	81 11       	cpse	r24, r1
    15e2:	2c c0       	rjmp	.+88     	; 0x163c <put_fat+0x1ee>
    15e4:	cc 0c       	add	r12, r12
    15e6:	dd 1c       	adc	r13, r13
    15e8:	ee 1c       	adc	r14, r14
    15ea:	ff 1c       	adc	r15, r15
    15ec:	cc 0c       	add	r12, r12
    15ee:	dd 1c       	adc	r13, r13
    15f0:	ee 1c       	adc	r14, r14
    15f2:	ff 1c       	adc	r15, r15
    15f4:	5c ef       	ldi	r21, 0xFC	; 252
    15f6:	c5 22       	and	r12, r21
    15f8:	51 e0       	ldi	r21, 0x01	; 1
    15fa:	d5 22       	and	r13, r21
    15fc:	ee 24       	eor	r14, r14
    15fe:	ff 24       	eor	r15, r15
    1600:	92 e3       	ldi	r25, 0x32	; 50
    1602:	c9 0e       	add	r12, r25
    1604:	d1 1c       	adc	r13, r1
    1606:	fe 01       	movw	r30, r28
    1608:	ec 0d       	add	r30, r12
    160a:	fd 1d       	adc	r31, r13
    160c:	40 81       	ld	r20, Z
    160e:	51 81       	ldd	r21, Z+1	; 0x01
    1610:	62 81       	ldd	r22, Z+2	; 0x02
    1612:	73 81       	ldd	r23, Z+3	; 0x03
    1614:	44 27       	eor	r20, r20
    1616:	55 27       	eor	r21, r21
    1618:	66 27       	eor	r22, r22
    161a:	70 7f       	andi	r23, 0xF0	; 240
    161c:	44 2a       	or	r4, r20
    161e:	55 2a       	or	r5, r21
    1620:	66 2a       	or	r6, r22
    1622:	77 2a       	or	r7, r23
    1624:	40 82       	st	Z, r4
    1626:	51 82       	std	Z+1, r5	; 0x01
    1628:	62 82       	std	Z+2, r6	; 0x02
    162a:	73 82       	std	Z+3, r7	; 0x03
    162c:	91 e0       	ldi	r25, 0x01	; 1
    162e:	9c 83       	std	Y+4, r25	; 0x04
    1630:	05 c0       	rjmp	.+10     	; 0x163c <put_fat+0x1ee>
    1632:	82 e0       	ldi	r24, 0x02	; 2
    1634:	03 c0       	rjmp	.+6      	; 0x163c <put_fat+0x1ee>
    1636:	82 e0       	ldi	r24, 0x02	; 2
    1638:	01 c0       	rjmp	.+2      	; 0x163c <put_fat+0x1ee>
    163a:	82 e0       	ldi	r24, 0x02	; 2
    163c:	df 91       	pop	r29
    163e:	cf 91       	pop	r28
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	ff 90       	pop	r15
    1646:	ef 90       	pop	r14
    1648:	df 90       	pop	r13
    164a:	cf 90       	pop	r12
    164c:	bf 90       	pop	r11
    164e:	af 90       	pop	r10
    1650:	9f 90       	pop	r9
    1652:	8f 90       	pop	r8
    1654:	7f 90       	pop	r7
    1656:	6f 90       	pop	r6
    1658:	5f 90       	pop	r5
    165a:	4f 90       	pop	r4
    165c:	08 95       	ret

0000165e <create_chain>:
    165e:	4f 92       	push	r4
    1660:	5f 92       	push	r5
    1662:	6f 92       	push	r6
    1664:	7f 92       	push	r7
    1666:	8f 92       	push	r8
    1668:	9f 92       	push	r9
    166a:	af 92       	push	r10
    166c:	bf 92       	push	r11
    166e:	cf 92       	push	r12
    1670:	df 92       	push	r13
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	ec 01       	movw	r28, r24
    1680:	2a 01       	movw	r4, r20
    1682:	3b 01       	movw	r6, r22
    1684:	41 15       	cp	r20, r1
    1686:	51 05       	cpc	r21, r1
    1688:	61 05       	cpc	r22, r1
    168a:	71 05       	cpc	r23, r1
    168c:	99 f4       	brne	.+38     	; 0x16b4 <create_chain+0x56>
    168e:	8a 84       	ldd	r8, Y+10	; 0x0a
    1690:	9b 84       	ldd	r9, Y+11	; 0x0b
    1692:	ac 84       	ldd	r10, Y+12	; 0x0c
    1694:	bd 84       	ldd	r11, Y+13	; 0x0d
    1696:	81 14       	cp	r8, r1
    1698:	91 04       	cpc	r9, r1
    169a:	a1 04       	cpc	r10, r1
    169c:	b1 04       	cpc	r11, r1
    169e:	29 f1       	breq	.+74     	; 0x16ea <create_chain+0x8c>
    16a0:	8e 89       	ldd	r24, Y+22	; 0x16
    16a2:	9f 89       	ldd	r25, Y+23	; 0x17
    16a4:	a8 8d       	ldd	r26, Y+24	; 0x18
    16a6:	b9 8d       	ldd	r27, Y+25	; 0x19
    16a8:	88 16       	cp	r8, r24
    16aa:	99 06       	cpc	r9, r25
    16ac:	aa 06       	cpc	r10, r26
    16ae:	bb 06       	cpc	r11, r27
    16b0:	08 f5       	brcc	.+66     	; 0x16f4 <create_chain+0x96>
    16b2:	24 c0       	rjmp	.+72     	; 0x16fc <create_chain+0x9e>
    16b4:	2b dd       	rcall	.-1450   	; 0x110c <get_fat>
    16b6:	62 30       	cpi	r22, 0x02	; 2
    16b8:	71 05       	cpc	r23, r1
    16ba:	81 05       	cpc	r24, r1
    16bc:	91 05       	cpc	r25, r1
    16be:	08 f4       	brcc	.+2      	; 0x16c2 <create_chain+0x64>
    16c0:	96 c0       	rjmp	.+300    	; 0x17ee <create_chain+0x190>
    16c2:	6f 3f       	cpi	r22, 0xFF	; 255
    16c4:	2f ef       	ldi	r18, 0xFF	; 255
    16c6:	72 07       	cpc	r23, r18
    16c8:	82 07       	cpc	r24, r18
    16ca:	92 07       	cpc	r25, r18
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <create_chain+0x72>
    16ce:	94 c0       	rjmp	.+296    	; 0x17f8 <create_chain+0x19a>
    16d0:	ce 88       	ldd	r12, Y+22	; 0x16
    16d2:	df 88       	ldd	r13, Y+23	; 0x17
    16d4:	e8 8c       	ldd	r14, Y+24	; 0x18
    16d6:	f9 8c       	ldd	r15, Y+25	; 0x19
    16d8:	6c 15       	cp	r22, r12
    16da:	7d 05       	cpc	r23, r13
    16dc:	8e 05       	cpc	r24, r14
    16de:	9f 05       	cpc	r25, r15
    16e0:	08 f4       	brcc	.+2      	; 0x16e4 <create_chain+0x86>
    16e2:	8e c0       	rjmp	.+284    	; 0x1800 <create_chain+0x1a2>
    16e4:	53 01       	movw	r10, r6
    16e6:	42 01       	movw	r8, r4
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <create_chain+0x9e>
    16ea:	81 2c       	mov	r8, r1
    16ec:	91 2c       	mov	r9, r1
    16ee:	54 01       	movw	r10, r8
    16f0:	83 94       	inc	r8
    16f2:	04 c0       	rjmp	.+8      	; 0x16fc <create_chain+0x9e>
    16f4:	81 2c       	mov	r8, r1
    16f6:	91 2c       	mov	r9, r1
    16f8:	54 01       	movw	r10, r8
    16fa:	83 94       	inc	r8
    16fc:	75 01       	movw	r14, r10
    16fe:	64 01       	movw	r12, r8
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	c8 1a       	sub	r12, r24
    1704:	d8 0a       	sbc	r13, r24
    1706:	e8 0a       	sbc	r14, r24
    1708:	f8 0a       	sbc	r15, r24
    170a:	8e 89       	ldd	r24, Y+22	; 0x16
    170c:	9f 89       	ldd	r25, Y+23	; 0x17
    170e:	a8 8d       	ldd	r26, Y+24	; 0x18
    1710:	b9 8d       	ldd	r27, Y+25	; 0x19
    1712:	c8 16       	cp	r12, r24
    1714:	d9 06       	cpc	r13, r25
    1716:	ea 06       	cpc	r14, r26
    1718:	fb 06       	cpc	r15, r27
    171a:	60 f0       	brcs	.+24     	; 0x1734 <create_chain+0xd6>
    171c:	22 e0       	ldi	r18, 0x02	; 2
    171e:	82 16       	cp	r8, r18
    1720:	91 04       	cpc	r9, r1
    1722:	a1 04       	cpc	r10, r1
    1724:	b1 04       	cpc	r11, r1
    1726:	08 f4       	brcc	.+2      	; 0x172a <create_chain+0xcc>
    1728:	6f c0       	rjmp	.+222    	; 0x1808 <create_chain+0x1aa>
    172a:	c1 2c       	mov	r12, r1
    172c:	d1 2c       	mov	r13, r1
    172e:	76 01       	movw	r14, r12
    1730:	68 94       	set
    1732:	c1 f8       	bld	r12, 1
    1734:	b7 01       	movw	r22, r14
    1736:	a6 01       	movw	r20, r12
    1738:	ce 01       	movw	r24, r28
    173a:	e8 dc       	rcall	.-1584   	; 0x110c <get_fat>
    173c:	61 15       	cp	r22, r1
    173e:	71 05       	cpc	r23, r1
    1740:	81 05       	cpc	r24, r1
    1742:	91 05       	cpc	r25, r1
    1744:	99 f0       	breq	.+38     	; 0x176c <create_chain+0x10e>
    1746:	6f 3f       	cpi	r22, 0xFF	; 255
    1748:	2f ef       	ldi	r18, 0xFF	; 255
    174a:	72 07       	cpc	r23, r18
    174c:	82 07       	cpc	r24, r18
    174e:	92 07       	cpc	r25, r18
    1750:	09 f4       	brne	.+2      	; 0x1754 <create_chain+0xf6>
    1752:	5f c0       	rjmp	.+190    	; 0x1812 <create_chain+0x1b4>
    1754:	61 30       	cpi	r22, 0x01	; 1
    1756:	71 05       	cpc	r23, r1
    1758:	81 05       	cpc	r24, r1
    175a:	91 05       	cpc	r25, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <create_chain+0x102>
    175e:	5d c0       	rjmp	.+186    	; 0x181a <create_chain+0x1bc>
    1760:	c8 14       	cp	r12, r8
    1762:	d9 04       	cpc	r13, r9
    1764:	ea 04       	cpc	r14, r10
    1766:	fb 04       	cpc	r15, r11
    1768:	59 f6       	brne	.-106    	; 0x1700 <create_chain+0xa2>
    176a:	5b c0       	rjmp	.+182    	; 0x1822 <create_chain+0x1c4>
    176c:	8c 2c       	mov	r8, r12
    176e:	9d 2c       	mov	r9, r13
    1770:	ae 2c       	mov	r10, r14
    1772:	bf 2c       	mov	r11, r15
    1774:	0f ef       	ldi	r16, 0xFF	; 255
    1776:	1f ef       	ldi	r17, 0xFF	; 255
    1778:	2f ef       	ldi	r18, 0xFF	; 255
    177a:	3f e0       	ldi	r19, 0x0F	; 15
    177c:	b7 01       	movw	r22, r14
    177e:	a6 01       	movw	r20, r12
    1780:	ce 01       	movw	r24, r28
    1782:	65 de       	rcall	.-822    	; 0x144e <put_fat>
    1784:	81 11       	cpse	r24, r1
    1786:	2c c0       	rjmp	.+88     	; 0x17e0 <create_chain+0x182>
    1788:	41 14       	cp	r4, r1
    178a:	51 04       	cpc	r5, r1
    178c:	61 04       	cpc	r6, r1
    178e:	71 04       	cpc	r7, r1
    1790:	51 f0       	breq	.+20     	; 0x17a6 <create_chain+0x148>
    1792:	0c 2d       	mov	r16, r12
    1794:	1d 2d       	mov	r17, r13
    1796:	2e 2d       	mov	r18, r14
    1798:	3f 2d       	mov	r19, r15
    179a:	b3 01       	movw	r22, r6
    179c:	a2 01       	movw	r20, r4
    179e:	ce 01       	movw	r24, r28
    17a0:	56 de       	rcall	.-852    	; 0x144e <put_fat>
    17a2:	81 11       	cpse	r24, r1
    17a4:	1d c0       	rjmp	.+58     	; 0x17e0 <create_chain+0x182>
    17a6:	8a 86       	std	Y+10, r8	; 0x0a
    17a8:	9b 86       	std	Y+11, r9	; 0x0b
    17aa:	ac 86       	std	Y+12, r10	; 0x0c
    17ac:	bd 86       	std	Y+13, r11	; 0x0d
    17ae:	8e 85       	ldd	r24, Y+14	; 0x0e
    17b0:	9f 85       	ldd	r25, Y+15	; 0x0f
    17b2:	a8 89       	ldd	r26, Y+16	; 0x10
    17b4:	b9 89       	ldd	r27, Y+17	; 0x11
    17b6:	8f 3f       	cpi	r24, 0xFF	; 255
    17b8:	2f ef       	ldi	r18, 0xFF	; 255
    17ba:	92 07       	cpc	r25, r18
    17bc:	a2 07       	cpc	r26, r18
    17be:	b2 07       	cpc	r27, r18
    17c0:	a9 f1       	breq	.+106    	; 0x182c <create_chain+0x1ce>
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	a1 09       	sbc	r26, r1
    17c6:	b1 09       	sbc	r27, r1
    17c8:	8e 87       	std	Y+14, r24	; 0x0e
    17ca:	9f 87       	std	Y+15, r25	; 0x0f
    17cc:	a8 8b       	std	Y+16, r26	; 0x10
    17ce:	b9 8b       	std	Y+17, r27	; 0x11
    17d0:	8d 81       	ldd	r24, Y+5	; 0x05
    17d2:	81 60       	ori	r24, 0x01	; 1
    17d4:	8d 83       	std	Y+5, r24	; 0x05
    17d6:	4c 2d       	mov	r20, r12
    17d8:	3d 2d       	mov	r19, r13
    17da:	2e 2d       	mov	r18, r14
    17dc:	9f 2d       	mov	r25, r15
    17de:	2f c0       	rjmp	.+94     	; 0x183e <create_chain+0x1e0>
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	49 f5       	brne	.+82     	; 0x1836 <create_chain+0x1d8>
    17e4:	4f ef       	ldi	r20, 0xFF	; 255
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	2f ef       	ldi	r18, 0xFF	; 255
    17ea:	9f ef       	ldi	r25, 0xFF	; 255
    17ec:	28 c0       	rjmp	.+80     	; 0x183e <create_chain+0x1e0>
    17ee:	41 e0       	ldi	r20, 0x01	; 1
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	23 c0       	rjmp	.+70     	; 0x183e <create_chain+0x1e0>
    17f8:	46 2f       	mov	r20, r22
    17fa:	37 2f       	mov	r19, r23
    17fc:	28 2f       	mov	r18, r24
    17fe:	1f c0       	rjmp	.+62     	; 0x183e <create_chain+0x1e0>
    1800:	46 2f       	mov	r20, r22
    1802:	37 2f       	mov	r19, r23
    1804:	28 2f       	mov	r18, r24
    1806:	1b c0       	rjmp	.+54     	; 0x183e <create_chain+0x1e0>
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	16 c0       	rjmp	.+44     	; 0x183e <create_chain+0x1e0>
    1812:	46 2f       	mov	r20, r22
    1814:	37 2f       	mov	r19, r23
    1816:	28 2f       	mov	r18, r24
    1818:	12 c0       	rjmp	.+36     	; 0x183e <create_chain+0x1e0>
    181a:	46 2f       	mov	r20, r22
    181c:	37 2f       	mov	r19, r23
    181e:	28 2f       	mov	r18, r24
    1820:	0e c0       	rjmp	.+28     	; 0x183e <create_chain+0x1e0>
    1822:	40 e0       	ldi	r20, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	09 c0       	rjmp	.+18     	; 0x183e <create_chain+0x1e0>
    182c:	4c 2d       	mov	r20, r12
    182e:	3d 2d       	mov	r19, r13
    1830:	2e 2d       	mov	r18, r14
    1832:	9f 2d       	mov	r25, r15
    1834:	04 c0       	rjmp	.+8      	; 0x183e <create_chain+0x1e0>
    1836:	41 e0       	ldi	r20, 0x01	; 1
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	64 2f       	mov	r22, r20
    1840:	73 2f       	mov	r23, r19
    1842:	82 2f       	mov	r24, r18
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	df 90       	pop	r13
    1852:	cf 90       	pop	r12
    1854:	bf 90       	pop	r11
    1856:	af 90       	pop	r10
    1858:	9f 90       	pop	r9
    185a:	8f 90       	pop	r8
    185c:	7f 90       	pop	r7
    185e:	6f 90       	pop	r6
    1860:	5f 90       	pop	r5
    1862:	4f 90       	pop	r4
    1864:	08 95       	ret

00001866 <dir_next>:
    1866:	7f 92       	push	r7
    1868:	8f 92       	push	r8
    186a:	9f 92       	push	r9
    186c:	af 92       	push	r10
    186e:	bf 92       	push	r11
    1870:	cf 92       	push	r12
    1872:	df 92       	push	r13
    1874:	ef 92       	push	r14
    1876:	ff 92       	push	r15
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	ec 01       	movw	r28, r24
    1882:	7b 01       	movw	r14, r22
    1884:	0c 81       	ldd	r16, Y+4	; 0x04
    1886:	1d 81       	ldd	r17, Y+5	; 0x05
    1888:	0f 5f       	subi	r16, 0xFF	; 255
    188a:	1f 4f       	sbci	r17, 0xFF	; 255
    188c:	01 15       	cp	r16, r1
    188e:	11 05       	cpc	r17, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <dir_next+0x2e>
    1892:	e4 c0       	rjmp	.+456    	; 0x1a5c <dir_next+0x1f6>
    1894:	8e 85       	ldd	r24, Y+14	; 0x0e
    1896:	9f 85       	ldd	r25, Y+15	; 0x0f
    1898:	a8 89       	ldd	r26, Y+16	; 0x10
    189a:	b9 89       	ldd	r27, Y+17	; 0x11
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	a1 05       	cpc	r26, r1
    18a0:	b1 05       	cpc	r27, r1
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <dir_next+0x40>
    18a4:	dd c0       	rjmp	.+442    	; 0x1a60 <dir_next+0x1fa>
    18a6:	68 01       	movw	r12, r16
    18a8:	2f e0       	ldi	r18, 0x0F	; 15
    18aa:	c2 22       	and	r12, r18
    18ac:	dd 24       	eor	r13, r13
    18ae:	c1 14       	cp	r12, r1
    18b0:	d1 04       	cpc	r13, r1
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <dir_next+0x50>
    18b4:	bc c0       	rjmp	.+376    	; 0x1a2e <dir_next+0x1c8>
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	a1 1d       	adc	r26, r1
    18ba:	b1 1d       	adc	r27, r1
    18bc:	8e 87       	std	Y+14, r24	; 0x0e
    18be:	9f 87       	std	Y+15, r25	; 0x0f
    18c0:	a8 8b       	std	Y+16, r26	; 0x10
    18c2:	b9 8b       	std	Y+17, r27	; 0x11
    18c4:	4a 85       	ldd	r20, Y+10	; 0x0a
    18c6:	5b 85       	ldd	r21, Y+11	; 0x0b
    18c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    18ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    18cc:	41 15       	cp	r20, r1
    18ce:	51 05       	cpc	r21, r1
    18d0:	61 05       	cpc	r22, r1
    18d2:	71 05       	cpc	r23, r1
    18d4:	49 f4       	brne	.+18     	; 0x18e8 <dir_next+0x82>
    18d6:	e8 81       	ld	r30, Y
    18d8:	f9 81       	ldd	r31, Y+1	; 0x01
    18da:	80 85       	ldd	r24, Z+8	; 0x08
    18dc:	91 85       	ldd	r25, Z+9	; 0x09
    18de:	08 17       	cp	r16, r24
    18e0:	19 07       	cpc	r17, r25
    18e2:	08 f0       	brcs	.+2      	; 0x18e6 <dir_next+0x80>
    18e4:	bf c0       	rjmp	.+382    	; 0x1a64 <dir_next+0x1fe>
    18e6:	a3 c0       	rjmp	.+326    	; 0x1a2e <dir_next+0x1c8>
    18e8:	e8 81       	ld	r30, Y
    18ea:	f9 81       	ldd	r31, Y+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	98 01       	movw	r18, r16
    18f4:	32 95       	swap	r19
    18f6:	22 95       	swap	r18
    18f8:	2f 70       	andi	r18, 0x0F	; 15
    18fa:	23 27       	eor	r18, r19
    18fc:	3f 70       	andi	r19, 0x0F	; 15
    18fe:	23 27       	eor	r18, r19
    1900:	82 23       	and	r24, r18
    1902:	93 23       	and	r25, r19
    1904:	89 2b       	or	r24, r25
    1906:	09 f0       	breq	.+2      	; 0x190a <dir_next+0xa4>
    1908:	92 c0       	rjmp	.+292    	; 0x1a2e <dir_next+0x1c8>
    190a:	cf 01       	movw	r24, r30
    190c:	ff db       	rcall	.-2050   	; 0x110c <get_fat>
    190e:	4b 01       	movw	r8, r22
    1910:	5c 01       	movw	r10, r24
    1912:	82 e0       	ldi	r24, 0x02	; 2
    1914:	88 16       	cp	r8, r24
    1916:	91 04       	cpc	r9, r1
    1918:	a1 04       	cpc	r10, r1
    191a:	b1 04       	cpc	r11, r1
    191c:	08 f4       	brcc	.+2      	; 0x1920 <dir_next+0xba>
    191e:	a4 c0       	rjmp	.+328    	; 0x1a68 <dir_next+0x202>
    1920:	ef ef       	ldi	r30, 0xFF	; 255
    1922:	8e 16       	cp	r8, r30
    1924:	9e 06       	cpc	r9, r30
    1926:	ae 06       	cpc	r10, r30
    1928:	be 06       	cpc	r11, r30
    192a:	09 f4       	brne	.+2      	; 0x192e <dir_next+0xc8>
    192c:	9f c0       	rjmp	.+318    	; 0x1a6c <dir_next+0x206>
    192e:	e8 81       	ld	r30, Y
    1930:	f9 81       	ldd	r31, Y+1	; 0x01
    1932:	86 89       	ldd	r24, Z+22	; 0x16
    1934:	97 89       	ldd	r25, Z+23	; 0x17
    1936:	a0 8d       	ldd	r26, Z+24	; 0x18
    1938:	b1 8d       	ldd	r27, Z+25	; 0x19
    193a:	88 16       	cp	r8, r24
    193c:	99 06       	cpc	r9, r25
    193e:	aa 06       	cpc	r10, r26
    1940:	bb 06       	cpc	r11, r27
    1942:	08 f4       	brcc	.+2      	; 0x1946 <dir_next+0xe0>
    1944:	67 c0       	rjmp	.+206    	; 0x1a14 <dir_next+0x1ae>
    1946:	ef 28       	or	r14, r15
    1948:	09 f4       	brne	.+2      	; 0x194c <dir_next+0xe6>
    194a:	92 c0       	rjmp	.+292    	; 0x1a70 <dir_next+0x20a>
    194c:	4a 85       	ldd	r20, Y+10	; 0x0a
    194e:	5b 85       	ldd	r21, Y+11	; 0x0b
    1950:	6c 85       	ldd	r22, Y+12	; 0x0c
    1952:	7d 85       	ldd	r23, Y+13	; 0x0d
    1954:	cf 01       	movw	r24, r30
    1956:	83 de       	rcall	.-762    	; 0x165e <create_chain>
    1958:	4b 01       	movw	r8, r22
    195a:	5c 01       	movw	r10, r24
    195c:	61 15       	cp	r22, r1
    195e:	71 05       	cpc	r23, r1
    1960:	81 05       	cpc	r24, r1
    1962:	91 05       	cpc	r25, r1
    1964:	09 f4       	brne	.+2      	; 0x1968 <dir_next+0x102>
    1966:	86 c0       	rjmp	.+268    	; 0x1a74 <dir_next+0x20e>
    1968:	61 30       	cpi	r22, 0x01	; 1
    196a:	71 05       	cpc	r23, r1
    196c:	81 05       	cpc	r24, r1
    196e:	91 05       	cpc	r25, r1
    1970:	09 f4       	brne	.+2      	; 0x1974 <dir_next+0x10e>
    1972:	82 c0       	rjmp	.+260    	; 0x1a78 <dir_next+0x212>
    1974:	6f 3f       	cpi	r22, 0xFF	; 255
    1976:	2f ef       	ldi	r18, 0xFF	; 255
    1978:	72 07       	cpc	r23, r18
    197a:	82 07       	cpc	r24, r18
    197c:	92 07       	cpc	r25, r18
    197e:	09 f4       	brne	.+2      	; 0x1982 <dir_next+0x11c>
    1980:	7d c0       	rjmp	.+250    	; 0x1a7c <dir_next+0x216>
    1982:	88 81       	ld	r24, Y
    1984:	99 81       	ldd	r25, Y+1	; 0x01
    1986:	0e 94 2c 04 	call	0x858	; 0x858 <sync_window>
    198a:	81 11       	cpse	r24, r1
    198c:	79 c0       	rjmp	.+242    	; 0x1a80 <dir_next+0x21a>
    198e:	88 81       	ld	r24, Y
    1990:	99 81       	ldd	r25, Y+1	; 0x01
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	52 e0       	ldi	r21, 0x02	; 2
    1996:	60 e0       	ldi	r22, 0x00	; 0
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	c2 96       	adiw	r24, 0x32	; 50
    199c:	0e 94 ce 03 	call	0x79c	; 0x79c <mem_set>
    19a0:	e8 80       	ld	r14, Y
    19a2:	f9 80       	ldd	r15, Y+1	; 0x01
    19a4:	b5 01       	movw	r22, r10
    19a6:	a4 01       	movw	r20, r8
    19a8:	c7 01       	movw	r24, r14
    19aa:	82 db       	rcall	.-2300   	; 0x10b0 <clust2sect>
    19ac:	f7 01       	movw	r30, r14
    19ae:	66 a7       	std	Z+46, r22	; 0x2e
    19b0:	77 a7       	std	Z+47, r23	; 0x2f
    19b2:	80 ab       	std	Z+48, r24	; 0x30
    19b4:	91 ab       	std	Z+49, r25	; 0x31
    19b6:	e1 2c       	mov	r14, r1
    19b8:	f1 2c       	mov	r15, r1
    19ba:	77 24       	eor	r7, r7
    19bc:	73 94       	inc	r7
    19be:	17 c0       	rjmp	.+46     	; 0x19ee <dir_next+0x188>
    19c0:	74 82       	std	Z+4, r7	; 0x04
    19c2:	88 81       	ld	r24, Y
    19c4:	99 81       	ldd	r25, Y+1	; 0x01
    19c6:	0e 94 2c 04 	call	0x858	; 0x858 <sync_window>
    19ca:	81 11       	cpse	r24, r1
    19cc:	5b c0       	rjmp	.+182    	; 0x1a84 <dir_next+0x21e>
    19ce:	e8 81       	ld	r30, Y
    19d0:	f9 81       	ldd	r31, Y+1	; 0x01
    19d2:	86 a5       	ldd	r24, Z+46	; 0x2e
    19d4:	97 a5       	ldd	r25, Z+47	; 0x2f
    19d6:	a0 a9       	ldd	r26, Z+48	; 0x30
    19d8:	b1 a9       	ldd	r27, Z+49	; 0x31
    19da:	01 96       	adiw	r24, 0x01	; 1
    19dc:	a1 1d       	adc	r26, r1
    19de:	b1 1d       	adc	r27, r1
    19e0:	86 a7       	std	Z+46, r24	; 0x2e
    19e2:	97 a7       	std	Z+47, r25	; 0x2f
    19e4:	a0 ab       	std	Z+48, r26	; 0x30
    19e6:	b1 ab       	std	Z+49, r27	; 0x31
    19e8:	ff ef       	ldi	r31, 0xFF	; 255
    19ea:	ef 1a       	sub	r14, r31
    19ec:	ff 0a       	sbc	r15, r31
    19ee:	e8 81       	ld	r30, Y
    19f0:	f9 81       	ldd	r31, Y+1	; 0x01
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	e8 16       	cp	r14, r24
    19f8:	f9 06       	cpc	r15, r25
    19fa:	10 f3       	brcs	.-60     	; 0x19c0 <dir_next+0x15a>
    19fc:	86 a5       	ldd	r24, Z+46	; 0x2e
    19fe:	97 a5       	ldd	r25, Z+47	; 0x2f
    1a00:	a0 a9       	ldd	r26, Z+48	; 0x30
    1a02:	b1 a9       	ldd	r27, Z+49	; 0x31
    1a04:	8e 19       	sub	r24, r14
    1a06:	9f 09       	sbc	r25, r15
    1a08:	a1 09       	sbc	r26, r1
    1a0a:	b1 09       	sbc	r27, r1
    1a0c:	86 a7       	std	Z+46, r24	; 0x2e
    1a0e:	97 a7       	std	Z+47, r25	; 0x2f
    1a10:	a0 ab       	std	Z+48, r26	; 0x30
    1a12:	b1 ab       	std	Z+49, r27	; 0x31
    1a14:	8a 86       	std	Y+10, r8	; 0x0a
    1a16:	9b 86       	std	Y+11, r9	; 0x0b
    1a18:	ac 86       	std	Y+12, r10	; 0x0c
    1a1a:	bd 86       	std	Y+13, r11	; 0x0d
    1a1c:	b5 01       	movw	r22, r10
    1a1e:	a4 01       	movw	r20, r8
    1a20:	88 81       	ld	r24, Y
    1a22:	99 81       	ldd	r25, Y+1	; 0x01
    1a24:	45 db       	rcall	.-2422   	; 0x10b0 <clust2sect>
    1a26:	6e 87       	std	Y+14, r22	; 0x0e
    1a28:	7f 87       	std	Y+15, r23	; 0x0f
    1a2a:	88 8b       	std	Y+16, r24	; 0x10
    1a2c:	99 8b       	std	Y+17, r25	; 0x11
    1a2e:	0c 83       	std	Y+4, r16	; 0x04
    1a30:	1d 83       	std	Y+5, r17	; 0x05
    1a32:	cc 0c       	add	r12, r12
    1a34:	dd 1c       	adc	r13, r13
    1a36:	cc 0c       	add	r12, r12
    1a38:	dd 1c       	adc	r13, r13
    1a3a:	cc 0c       	add	r12, r12
    1a3c:	dd 1c       	adc	r13, r13
    1a3e:	cc 0c       	add	r12, r12
    1a40:	dd 1c       	adc	r13, r13
    1a42:	cc 0c       	add	r12, r12
    1a44:	dd 1c       	adc	r13, r13
    1a46:	22 e3       	ldi	r18, 0x32	; 50
    1a48:	c2 0e       	add	r12, r18
    1a4a:	d1 1c       	adc	r13, r1
    1a4c:	88 81       	ld	r24, Y
    1a4e:	99 81       	ldd	r25, Y+1	; 0x01
    1a50:	c8 0e       	add	r12, r24
    1a52:	d9 1e       	adc	r13, r25
    1a54:	ca 8a       	std	Y+18, r12	; 0x12
    1a56:	db 8a       	std	Y+19, r13	; 0x13
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	15 c0       	rjmp	.+42     	; 0x1a86 <dir_next+0x220>
    1a5c:	84 e0       	ldi	r24, 0x04	; 4
    1a5e:	13 c0       	rjmp	.+38     	; 0x1a86 <dir_next+0x220>
    1a60:	84 e0       	ldi	r24, 0x04	; 4
    1a62:	11 c0       	rjmp	.+34     	; 0x1a86 <dir_next+0x220>
    1a64:	84 e0       	ldi	r24, 0x04	; 4
    1a66:	0f c0       	rjmp	.+30     	; 0x1a86 <dir_next+0x220>
    1a68:	82 e0       	ldi	r24, 0x02	; 2
    1a6a:	0d c0       	rjmp	.+26     	; 0x1a86 <dir_next+0x220>
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	0b c0       	rjmp	.+22     	; 0x1a86 <dir_next+0x220>
    1a70:	84 e0       	ldi	r24, 0x04	; 4
    1a72:	09 c0       	rjmp	.+18     	; 0x1a86 <dir_next+0x220>
    1a74:	87 e0       	ldi	r24, 0x07	; 7
    1a76:	07 c0       	rjmp	.+14     	; 0x1a86 <dir_next+0x220>
    1a78:	82 e0       	ldi	r24, 0x02	; 2
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <dir_next+0x220>
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <dir_next+0x220>
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	01 c0       	rjmp	.+2      	; 0x1a86 <dir_next+0x220>
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	1f 91       	pop	r17
    1a8c:	0f 91       	pop	r16
    1a8e:	ff 90       	pop	r15
    1a90:	ef 90       	pop	r14
    1a92:	df 90       	pop	r13
    1a94:	cf 90       	pop	r12
    1a96:	bf 90       	pop	r11
    1a98:	af 90       	pop	r10
    1a9a:	9f 90       	pop	r9
    1a9c:	8f 90       	pop	r8
    1a9e:	7f 90       	pop	r7
    1aa0:	08 95       	ret

00001aa2 <follow_path>:
    1aa2:	6f 92       	push	r6
    1aa4:	7f 92       	push	r7
    1aa6:	8f 92       	push	r8
    1aa8:	af 92       	push	r10
    1aaa:	bf 92       	push	r11
    1aac:	cf 92       	push	r12
    1aae:	df 92       	push	r13
    1ab0:	ef 92       	push	r14
    1ab2:	ff 92       	push	r15
    1ab4:	0f 93       	push	r16
    1ab6:	1f 93       	push	r17
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	ec 01       	movw	r28, r24
    1abe:	8b 01       	movw	r16, r22
    1ac0:	fb 01       	movw	r30, r22
    1ac2:	80 81       	ld	r24, Z
    1ac4:	8f 32       	cpi	r24, 0x2F	; 47
    1ac6:	11 f0       	breq	.+4      	; 0x1acc <follow_path+0x2a>
    1ac8:	8c 35       	cpi	r24, 0x5C	; 92
    1aca:	39 f4       	brne	.+14     	; 0x1ada <follow_path+0x38>
    1acc:	0f 5f       	subi	r16, 0xFF	; 255
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	1e 82       	std	Y+6, r1	; 0x06
    1ad2:	1f 82       	std	Y+7, r1	; 0x07
    1ad4:	18 86       	std	Y+8, r1	; 0x08
    1ad6:	19 86       	std	Y+9, r1	; 0x09
    1ad8:	0a c0       	rjmp	.+20     	; 0x1aee <follow_path+0x4c>
    1ada:	e8 81       	ld	r30, Y
    1adc:	f9 81       	ldd	r31, Y+1	; 0x01
    1ade:	82 89       	ldd	r24, Z+18	; 0x12
    1ae0:	93 89       	ldd	r25, Z+19	; 0x13
    1ae2:	a4 89       	ldd	r26, Z+20	; 0x14
    1ae4:	b5 89       	ldd	r27, Z+21	; 0x15
    1ae6:	8e 83       	std	Y+6, r24	; 0x06
    1ae8:	9f 83       	std	Y+7, r25	; 0x07
    1aea:	a8 87       	std	Y+8, r26	; 0x08
    1aec:	b9 87       	std	Y+9, r27	; 0x09
    1aee:	f8 01       	movw	r30, r16
    1af0:	80 81       	ld	r24, Z
    1af2:	80 32       	cpi	r24, 0x20	; 32
    1af4:	78 f0       	brcs	.+30     	; 0x1b14 <follow_path+0x72>
    1af6:	0f 2e       	mov	r0, r31
    1af8:	fe e2       	ldi	r31, 0x2E	; 46
    1afa:	df 2e       	mov	r13, r31
    1afc:	f0 2d       	mov	r31, r0
    1afe:	0f 2e       	mov	r0, r31
    1b00:	f5 e0       	ldi	r31, 0x05	; 5
    1b02:	8f 2e       	mov	r8, r31
    1b04:	f0 2d       	mov	r31, r0
    1b06:	0f 2e       	mov	r0, r31
    1b08:	f1 e6       	ldi	r31, 0x61	; 97
    1b0a:	af 2e       	mov	r10, r31
    1b0c:	f1 e2       	ldi	r31, 0x21	; 33
    1b0e:	bf 2e       	mov	r11, r31
    1b10:	f0 2d       	mov	r31, r0
    1b12:	07 c0       	rjmp	.+14     	; 0x1b22 <follow_path+0x80>
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	ce 01       	movw	r24, r28
    1b1a:	de db       	rcall	.-2116   	; 0x12d8 <dir_sdi>
    1b1c:	1a 8a       	std	Y+18, r1	; 0x12
    1b1e:	1b 8a       	std	Y+19, r1	; 0x13
    1b20:	4c c1       	rjmp	.+664    	; 0x1dba <follow_path+0x318>
    1b22:	f8 01       	movw	r30, r16
    1b24:	8f 01       	movw	r16, r30
    1b26:	81 91       	ld	r24, Z+
    1b28:	8f 32       	cpi	r24, 0x2F	; 47
    1b2a:	e1 f3       	breq	.-8      	; 0x1b24 <follow_path+0x82>
    1b2c:	8c 35       	cpi	r24, 0x5C	; 92
    1b2e:	d1 f3       	breq	.-12     	; 0x1b24 <follow_path+0x82>
    1b30:	ec 88       	ldd	r14, Y+20	; 0x14
    1b32:	fd 88       	ldd	r15, Y+21	; 0x15
    1b34:	4b e0       	ldi	r20, 0x0B	; 11
    1b36:	50 e0       	ldi	r21, 0x00	; 0
    1b38:	60 e2       	ldi	r22, 0x20	; 32
    1b3a:	70 e0       	ldi	r23, 0x00	; 0
    1b3c:	c7 01       	movw	r24, r14
    1b3e:	0e 94 ce 03 	call	0x79c	; 0x79c <mem_set>
    1b42:	f8 01       	movw	r30, r16
    1b44:	80 81       	ld	r24, Z
    1b46:	8e 32       	cpi	r24, 0x2E	; 46
    1b48:	41 f0       	breq	.+16     	; 0x1b5a <follow_path+0xb8>
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	88 e0       	ldi	r24, 0x08	; 8
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	c1 2c       	mov	r12, r1
    1b58:	1f c0       	rjmp	.+62     	; 0x1b98 <follow_path+0xf6>
    1b5a:	f7 01       	movw	r30, r14
    1b5c:	d0 82       	st	Z, r13
    1b5e:	f8 01       	movw	r30, r16
    1b60:	21 81       	ldd	r18, Z+1	; 0x01
    1b62:	2e 32       	cpi	r18, 0x2E	; 46
    1b64:	51 f4       	brne	.+20     	; 0x1b7a <follow_path+0xd8>
    1b66:	f7 01       	movw	r30, r14
    1b68:	d1 82       	std	Z+1, r13	; 0x01
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	22 81       	ldd	r18, Z+2	; 0x02
    1b6e:	2e 32       	cpi	r18, 0x2E	; 46
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <follow_path+0xd2>
    1b72:	0b c1       	rjmp	.+534    	; 0x1d8a <follow_path+0x2e8>
    1b74:	83 e0       	ldi	r24, 0x03	; 3
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <follow_path+0xdc>
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	2f 32       	cpi	r18, 0x2F	; 47
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <follow_path+0xe2>
    1b82:	e7 c0       	rjmp	.+462    	; 0x1d52 <follow_path+0x2b0>
    1b84:	2c 35       	cpi	r18, 0x5C	; 92
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <follow_path+0xe8>
    1b88:	e4 c0       	rjmp	.+456    	; 0x1d52 <follow_path+0x2b0>
    1b8a:	21 32       	cpi	r18, 0x21	; 33
    1b8c:	08 f0       	brcs	.+2      	; 0x1b90 <follow_path+0xee>
    1b8e:	fd c0       	rjmp	.+506    	; 0x1d8a <follow_path+0x2e8>
    1b90:	e4 c0       	rjmp	.+456    	; 0x1d5a <follow_path+0x2b8>
    1b92:	f7 01       	movw	r30, r14
    1b94:	83 87       	std	Z+11, r24	; 0x0b
    1b96:	fb c0       	rjmp	.+502    	; 0x1d8e <follow_path+0x2ec>
    1b98:	ab 01       	movw	r20, r22
    1b9a:	4f 5f       	subi	r20, 0xFF	; 255
    1b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	e6 0f       	add	r30, r22
    1ba2:	f7 1f       	adc	r31, r23
    1ba4:	b0 81       	ld	r27, Z
    1ba6:	b1 32       	cpi	r27, 0x21	; 33
    1ba8:	08 f4       	brcc	.+2      	; 0x1bac <follow_path+0x10a>
    1baa:	ea c0       	rjmp	.+468    	; 0x1d80 <follow_path+0x2de>
    1bac:	bf 32       	cpi	r27, 0x2F	; 47
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <follow_path+0x110>
    1bb0:	e2 c0       	rjmp	.+452    	; 0x1d76 <follow_path+0x2d4>
    1bb2:	bc 35       	cpi	r27, 0x5C	; 92
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <follow_path+0x116>
    1bb6:	df c0       	rjmp	.+446    	; 0x1d76 <follow_path+0x2d4>
    1bb8:	be 32       	cpi	r27, 0x2E	; 46
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <follow_path+0x11c>
    1bbc:	d2 c0       	rjmp	.+420    	; 0x1d62 <follow_path+0x2c0>
    1bbe:	28 17       	cp	r18, r24
    1bc0:	39 07       	cpc	r19, r25
    1bc2:	08 f0       	brcs	.+2      	; 0x1bc6 <follow_path+0x124>
    1bc4:	be c0       	rjmp	.+380    	; 0x1d42 <follow_path+0x2a0>
    1bc6:	08 c0       	rjmp	.+16     	; 0x1bd8 <follow_path+0x136>
    1bc8:	cc 0c       	add	r12, r12
    1bca:	cc 0c       	add	r12, r12
    1bcc:	ba 01       	movw	r22, r20
    1bce:	28 e0       	ldi	r18, 0x08	; 8
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	8b e0       	ldi	r24, 0x0B	; 11
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	e0 cf       	rjmp	.-64     	; 0x1b98 <follow_path+0xf6>
    1bd8:	bb 23       	and	r27, r27
    1bda:	1c f4       	brge	.+6      	; 0x1be2 <follow_path+0x140>
    1bdc:	fc 2d       	mov	r31, r12
    1bde:	f3 60       	ori	r31, 0x03	; 3
    1be0:	cf 2e       	mov	r12, r31
    1be2:	ef e7       	ldi	r30, 0x7F	; 127
    1be4:	eb 0f       	add	r30, r27
    1be6:	ef 31       	cpi	r30, 0x1F	; 31
    1be8:	20 f0       	brcs	.+8      	; 0x1bf2 <follow_path+0x150>
    1bea:	e0 e2       	ldi	r30, 0x20	; 32
    1bec:	eb 0f       	add	r30, r27
    1bee:	ed 31       	cpi	r30, 0x1D	; 29
    1bf0:	10 f5       	brcc	.+68     	; 0x1c36 <follow_path+0x194>
    1bf2:	6e 5f       	subi	r22, 0xFE	; 254
    1bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	e4 0f       	add	r30, r20
    1bfa:	f5 1f       	adc	r31, r21
    1bfc:	a0 81       	ld	r26, Z
    1bfe:	40 ec       	ldi	r20, 0xC0	; 192
    1c00:	4a 0f       	add	r20, r26
    1c02:	4f 33       	cpi	r20, 0x3F	; 63
    1c04:	28 f0       	brcs	.+10     	; 0x1c10 <follow_path+0x16e>
    1c06:	40 e8       	ldi	r20, 0x80	; 128
    1c08:	4a 0f       	add	r20, r26
    1c0a:	4d 37       	cpi	r20, 0x7D	; 125
    1c0c:	08 f0       	brcs	.+2      	; 0x1c10 <follow_path+0x16e>
    1c0e:	bd c0       	rjmp	.+378    	; 0x1d8a <follow_path+0x2e8>
    1c10:	ac 01       	movw	r20, r24
    1c12:	41 50       	subi	r20, 0x01	; 1
    1c14:	51 09       	sbc	r21, r1
    1c16:	24 17       	cp	r18, r20
    1c18:	35 07       	cpc	r19, r21
    1c1a:	08 f0       	brcs	.+2      	; 0x1c1e <follow_path+0x17c>
    1c1c:	b6 c0       	rjmp	.+364    	; 0x1d8a <follow_path+0x2e8>
    1c1e:	f7 01       	movw	r30, r14
    1c20:	e2 0f       	add	r30, r18
    1c22:	f3 1f       	adc	r31, r19
    1c24:	b0 83       	st	Z, r27
    1c26:	f9 01       	movw	r30, r18
    1c28:	31 96       	adiw	r30, 0x01	; 1
    1c2a:	ee 0d       	add	r30, r14
    1c2c:	ff 1d       	adc	r31, r15
    1c2e:	2e 5f       	subi	r18, 0xFE	; 254
    1c30:	3f 4f       	sbci	r19, 0xFF	; 255
    1c32:	a0 83       	st	Z, r26
    1c34:	b1 cf       	rjmp	.-158    	; 0x1b98 <follow_path+0xf6>
    1c36:	6b 2e       	mov	r6, r27
    1c38:	71 2c       	mov	r7, r1
    1c3a:	62 e2       	ldi	r22, 0x22	; 34
    1c3c:	66 16       	cp	r6, r22
    1c3e:	71 04       	cpc	r7, r1
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <follow_path+0x1a2>
    1c42:	a3 c0       	rjmp	.+326    	; 0x1d8a <follow_path+0x2e8>
    1c44:	f5 01       	movw	r30, r10
    1c46:	61 91       	ld	r22, Z+
    1c48:	66 23       	and	r22, r22
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <follow_path+0x1ac>
    1c4c:	8e c0       	rjmp	.+284    	; 0x1d6a <follow_path+0x2c8>
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	66 16       	cp	r6, r22
    1c52:	77 06       	cpc	r7, r23
    1c54:	c1 f7       	brne	.-16     	; 0x1c46 <follow_path+0x1a4>
    1c56:	99 c0       	rjmp	.+306    	; 0x1d8a <follow_path+0x2e8>
    1c58:	ec 2d       	mov	r30, r12
    1c5a:	e2 60       	ori	r30, 0x02	; 2
    1c5c:	ce 2e       	mov	r12, r30
    1c5e:	08 c0       	rjmp	.+16     	; 0x1c70 <follow_path+0x1ce>
    1c60:	6f e9       	ldi	r22, 0x9F	; 159
    1c62:	6b 0f       	add	r22, r27
    1c64:	6a 31       	cpi	r22, 0x1A	; 26
    1c66:	20 f4       	brcc	.+8      	; 0x1c70 <follow_path+0x1ce>
    1c68:	fc 2d       	mov	r31, r12
    1c6a:	f1 60       	ori	r31, 0x01	; 1
    1c6c:	cf 2e       	mov	r12, r31
    1c6e:	b0 52       	subi	r27, 0x20	; 32
    1c70:	f7 01       	movw	r30, r14
    1c72:	e2 0f       	add	r30, r18
    1c74:	f3 1f       	adc	r31, r19
    1c76:	b0 83       	st	Z, r27
    1c78:	2f 5f       	subi	r18, 0xFF	; 255
    1c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7c:	ba 01       	movw	r22, r20
    1c7e:	8c cf       	rjmp	.-232    	; 0x1b98 <follow_path+0xf6>
    1c80:	23 2b       	or	r18, r19
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <follow_path+0x1e4>
    1c84:	82 c0       	rjmp	.+260    	; 0x1d8a <follow_path+0x2e8>
    1c86:	f7 01       	movw	r30, r14
    1c88:	20 81       	ld	r18, Z
    1c8a:	25 3e       	cpi	r18, 0xE5	; 229
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <follow_path+0x1ee>
    1c8e:	80 82       	st	Z, r8
    1c90:	08 97       	sbiw	r24, 0x08	; 8
    1c92:	19 f4       	brne	.+6      	; 0x1c9a <follow_path+0x1f8>
    1c94:	c5 2e       	mov	r12, r21
    1c96:	cc 0c       	add	r12, r12
    1c98:	cc 0c       	add	r12, r12
    1c9a:	8c 2d       	mov	r24, r12
    1c9c:	83 70       	andi	r24, 0x03	; 3
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <follow_path+0x202>
    1ca2:	40 61       	ori	r20, 0x10	; 16
    1ca4:	8c 2d       	mov	r24, r12
    1ca6:	8c 70       	andi	r24, 0x0C	; 12
    1ca8:	84 30       	cpi	r24, 0x04	; 4
    1caa:	09 f4       	brne	.+2      	; 0x1cae <follow_path+0x20c>
    1cac:	48 60       	ori	r20, 0x08	; 8
    1cae:	f7 01       	movw	r30, r14
    1cb0:	43 87       	std	Z+11, r20	; 0x0b
    1cb2:	6d c0       	rjmp	.+218    	; 0x1d8e <follow_path+0x2ec>
    1cb4:	4e 85       	ldd	r20, Y+14	; 0x0e
    1cb6:	5f 85       	ldd	r21, Y+15	; 0x0f
    1cb8:	68 89       	ldd	r22, Y+16	; 0x10
    1cba:	79 89       	ldd	r23, Y+17	; 0x11
    1cbc:	88 81       	ld	r24, Y
    1cbe:	99 81       	ldd	r25, Y+1	; 0x01
    1cc0:	0e 94 97 04 	call	0x92e	; 0x92e <move_window>
    1cc4:	81 11       	cpse	r24, r1
    1cc6:	6a c0       	rjmp	.+212    	; 0x1d9c <follow_path+0x2fa>
    1cc8:	6a 89       	ldd	r22, Y+18	; 0x12
    1cca:	7b 89       	ldd	r23, Y+19	; 0x13
    1ccc:	fb 01       	movw	r30, r22
    1cce:	90 81       	ld	r25, Z
    1cd0:	99 23       	and	r25, r25
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <follow_path+0x234>
    1cd4:	6a c0       	rjmp	.+212    	; 0x1daa <follow_path+0x308>
    1cd6:	93 85       	ldd	r25, Z+11	; 0x0b
    1cd8:	93 fd       	sbrc	r25, 3
    1cda:	0f c0       	rjmp	.+30     	; 0x1cfa <follow_path+0x258>
    1cdc:	4c 89       	ldd	r20, Y+20	; 0x14
    1cde:	5d 89       	ldd	r21, Y+21	; 0x15
    1ce0:	da 01       	movw	r26, r20
    1ce2:	9b 01       	movw	r18, r22
    1ce4:	25 5f       	subi	r18, 0xF5	; 245
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	04 c0       	rjmp	.+8      	; 0x1cf2 <follow_path+0x250>
    1cea:	e2 17       	cp	r30, r18
    1cec:	f3 07       	cpc	r31, r19
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <follow_path+0x250>
    1cf0:	60 c0       	rjmp	.+192    	; 0x1db2 <follow_path+0x310>
    1cf2:	f1 90       	ld	r15, Z+
    1cf4:	9d 91       	ld	r25, X+
    1cf6:	f9 16       	cp	r15, r25
    1cf8:	c1 f3       	breq	.-16     	; 0x1cea <follow_path+0x248>
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	70 e0       	ldi	r23, 0x00	; 0
    1cfe:	ce 01       	movw	r24, r28
    1d00:	b2 dd       	rcall	.-1180   	; 0x1866 <dir_next>
    1d02:	88 23       	and	r24, r24
    1d04:	b9 f2       	breq	.-82     	; 0x1cb4 <follow_path+0x212>
    1d06:	4a c0       	rjmp	.+148    	; 0x1d9c <follow_path+0x2fa>
    1d08:	95 ff       	sbrs	r25, 5
    1d0a:	0a c0       	rjmp	.+20     	; 0x1d20 <follow_path+0x27e>
    1d0c:	1e 82       	std	Y+6, r1	; 0x06
    1d0e:	1f 82       	std	Y+7, r1	; 0x07
    1d10:	18 86       	std	Y+8, r1	; 0x08
    1d12:	19 86       	std	Y+9, r1	; 0x09
    1d14:	1a 8a       	std	Y+18, r1	; 0x12
    1d16:	1b 8a       	std	Y+19, r1	; 0x13
    1d18:	92 ff       	sbrs	r25, 2
    1d1a:	03 cf       	rjmp	.-506    	; 0x1b22 <follow_path+0x80>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	4d c0       	rjmp	.+154    	; 0x1dba <follow_path+0x318>
    1d20:	92 ff       	sbrs	r25, 2
    1d22:	11 c0       	rjmp	.+34     	; 0x1d46 <follow_path+0x2a4>
    1d24:	84 e0       	ldi	r24, 0x04	; 4
    1d26:	49 c0       	rjmp	.+146    	; 0x1dba <follow_path+0x318>
    1d28:	fb 01       	movw	r30, r22
    1d2a:	83 85       	ldd	r24, Z+11	; 0x0b
    1d2c:	84 ff       	sbrs	r24, 4
    1d2e:	0d c0       	rjmp	.+26     	; 0x1d4a <follow_path+0x2a8>
    1d30:	88 81       	ld	r24, Y
    1d32:	99 81       	ldd	r25, Y+1	; 0x01
    1d34:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <ld_clust>
    1d38:	6e 83       	std	Y+6, r22	; 0x06
    1d3a:	7f 83       	std	Y+7, r23	; 0x07
    1d3c:	88 87       	std	Y+8, r24	; 0x08
    1d3e:	99 87       	std	Y+9, r25	; 0x09
    1d40:	f0 ce       	rjmp	.-544    	; 0x1b22 <follow_path+0x80>
    1d42:	86 e0       	ldi	r24, 0x06	; 6
    1d44:	3a c0       	rjmp	.+116    	; 0x1dba <follow_path+0x318>
    1d46:	85 e0       	ldi	r24, 0x05	; 5
    1d48:	38 c0       	rjmp	.+112    	; 0x1dba <follow_path+0x318>
    1d4a:	85 e0       	ldi	r24, 0x05	; 5
    1d4c:	36 c0       	rjmp	.+108    	; 0x1dba <follow_path+0x318>
    1d4e:	86 e0       	ldi	r24, 0x06	; 6
    1d50:	34 c0       	rjmp	.+104    	; 0x1dba <follow_path+0x318>
    1d52:	08 0f       	add	r16, r24
    1d54:	19 1f       	adc	r17, r25
    1d56:	80 e2       	ldi	r24, 0x20	; 32
    1d58:	1c cf       	rjmp	.-456    	; 0x1b92 <follow_path+0xf0>
    1d5a:	08 0f       	add	r16, r24
    1d5c:	19 1f       	adc	r17, r25
    1d5e:	84 e2       	ldi	r24, 0x24	; 36
    1d60:	18 cf       	rjmp	.-464    	; 0x1b92 <follow_path+0xf0>
    1d62:	08 97       	sbiw	r24, 0x08	; 8
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <follow_path+0x2c6>
    1d66:	30 cf       	rjmp	.-416    	; 0x1bc8 <follow_path+0x126>
    1d68:	f2 cf       	rjmp	.-28     	; 0x1d4e <follow_path+0x2ac>
    1d6a:	6f eb       	ldi	r22, 0xBF	; 191
    1d6c:	6b 0f       	add	r22, r27
    1d6e:	6a 31       	cpi	r22, 0x1A	; 26
    1d70:	08 f4       	brcc	.+2      	; 0x1d74 <follow_path+0x2d2>
    1d72:	72 cf       	rjmp	.-284    	; 0x1c58 <follow_path+0x1b6>
    1d74:	75 cf       	rjmp	.-278    	; 0x1c60 <follow_path+0x1be>
    1d76:	04 0f       	add	r16, r20
    1d78:	15 1f       	adc	r17, r21
    1d7a:	5c 2d       	mov	r21, r12
    1d7c:	40 e0       	ldi	r20, 0x00	; 0
    1d7e:	80 cf       	rjmp	.-256    	; 0x1c80 <follow_path+0x1de>
    1d80:	04 0f       	add	r16, r20
    1d82:	15 1f       	adc	r17, r21
    1d84:	5c 2d       	mov	r21, r12
    1d86:	44 e0       	ldi	r20, 0x04	; 4
    1d88:	7b cf       	rjmp	.-266    	; 0x1c80 <follow_path+0x1de>
    1d8a:	86 e0       	ldi	r24, 0x06	; 6
    1d8c:	16 c0       	rjmp	.+44     	; 0x1dba <follow_path+0x318>
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	70 e0       	ldi	r23, 0x00	; 0
    1d92:	ce 01       	movw	r24, r28
    1d94:	a1 da       	rcall	.-2750   	; 0x12d8 <dir_sdi>
    1d96:	88 23       	and	r24, r24
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <follow_path+0x2fa>
    1d9a:	8c cf       	rjmp	.-232    	; 0x1cb4 <follow_path+0x212>
    1d9c:	ec 89       	ldd	r30, Y+20	; 0x14
    1d9e:	fd 89       	ldd	r31, Y+21	; 0x15
    1da0:	93 85       	ldd	r25, Z+11	; 0x0b
    1da2:	84 30       	cpi	r24, 0x04	; 4
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <follow_path+0x306>
    1da6:	b0 cf       	rjmp	.-160    	; 0x1d08 <follow_path+0x266>
    1da8:	08 c0       	rjmp	.+16     	; 0x1dba <follow_path+0x318>
    1daa:	ec 89       	ldd	r30, Y+20	; 0x14
    1dac:	fd 89       	ldd	r31, Y+21	; 0x15
    1dae:	93 85       	ldd	r25, Z+11	; 0x0b
    1db0:	ab cf       	rjmp	.-170    	; 0x1d08 <follow_path+0x266>
    1db2:	fa 01       	movw	r30, r20
    1db4:	93 85       	ldd	r25, Z+11	; 0x0b
    1db6:	92 ff       	sbrs	r25, 2
    1db8:	b7 cf       	rjmp	.-146    	; 0x1d28 <follow_path+0x286>
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	ff 90       	pop	r15
    1dc4:	ef 90       	pop	r14
    1dc6:	df 90       	pop	r13
    1dc8:	cf 90       	pop	r12
    1dca:	bf 90       	pop	r11
    1dcc:	af 90       	pop	r10
    1dce:	8f 90       	pop	r8
    1dd0:	7f 90       	pop	r7
    1dd2:	6f 90       	pop	r6
    1dd4:	08 95       	ret

00001dd6 <dir_alloc>:
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	ec 01       	movw	r28, r24
    1de4:	7b 01       	movw	r14, r22
    1de6:	60 e0       	ldi	r22, 0x00	; 0
    1de8:	70 e0       	ldi	r23, 0x00	; 0
    1dea:	76 da       	rcall	.-2836   	; 0x12d8 <dir_sdi>
    1dec:	81 11       	cpse	r24, r1
    1dee:	21 c0       	rjmp	.+66     	; 0x1e32 <dir_alloc+0x5c>
    1df0:	00 e0       	ldi	r16, 0x00	; 0
    1df2:	10 e0       	ldi	r17, 0x00	; 0
    1df4:	4e 85       	ldd	r20, Y+14	; 0x0e
    1df6:	5f 85       	ldd	r21, Y+15	; 0x0f
    1df8:	68 89       	ldd	r22, Y+16	; 0x10
    1dfa:	79 89       	ldd	r23, Y+17	; 0x11
    1dfc:	88 81       	ld	r24, Y
    1dfe:	99 81       	ldd	r25, Y+1	; 0x01
    1e00:	0e 94 97 04 	call	0x92e	; 0x92e <move_window>
    1e04:	81 11       	cpse	r24, r1
    1e06:	15 c0       	rjmp	.+42     	; 0x1e32 <dir_alloc+0x5c>
    1e08:	ea 89       	ldd	r30, Y+18	; 0x12
    1e0a:	fb 89       	ldd	r31, Y+19	; 0x13
    1e0c:	90 81       	ld	r25, Z
    1e0e:	95 3e       	cpi	r25, 0xE5	; 229
    1e10:	11 f0       	breq	.+4      	; 0x1e16 <dir_alloc+0x40>
    1e12:	91 11       	cpse	r25, r1
    1e14:	06 c0       	rjmp	.+12     	; 0x1e22 <dir_alloc+0x4c>
    1e16:	0f 5f       	subi	r16, 0xFF	; 255
    1e18:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1a:	0e 15       	cp	r16, r14
    1e1c:	1f 05       	cpc	r17, r15
    1e1e:	19 f4       	brne	.+6      	; 0x1e26 <dir_alloc+0x50>
    1e20:	0b c0       	rjmp	.+22     	; 0x1e38 <dir_alloc+0x62>
    1e22:	00 e0       	ldi	r16, 0x00	; 0
    1e24:	10 e0       	ldi	r17, 0x00	; 0
    1e26:	61 e0       	ldi	r22, 0x01	; 1
    1e28:	70 e0       	ldi	r23, 0x00	; 0
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	1c dd       	rcall	.-1480   	; 0x1866 <dir_next>
    1e2e:	88 23       	and	r24, r24
    1e30:	09 f3       	breq	.-62     	; 0x1df4 <dir_alloc+0x1e>
    1e32:	84 30       	cpi	r24, 0x04	; 4
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <dir_alloc+0x62>
    1e36:	87 e0       	ldi	r24, 0x07	; 7
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	ff 90       	pop	r15
    1e42:	ef 90       	pop	r14
    1e44:	08 95       	ret

00001e46 <dir_register>:
    1e46:	1f 93       	push	r17
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
    1e4c:	ec 01       	movw	r28, r24
    1e4e:	61 e0       	ldi	r22, 0x01	; 1
    1e50:	70 e0       	ldi	r23, 0x00	; 0
    1e52:	c1 df       	rcall	.-126    	; 0x1dd6 <dir_alloc>
    1e54:	18 2f       	mov	r17, r24
    1e56:	81 11       	cpse	r24, r1
    1e58:	1f c0       	rjmp	.+62     	; 0x1e98 <dir_register+0x52>
    1e5a:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e5c:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e5e:	68 89       	ldd	r22, Y+16	; 0x10
    1e60:	79 89       	ldd	r23, Y+17	; 0x11
    1e62:	88 81       	ld	r24, Y
    1e64:	99 81       	ldd	r25, Y+1	; 0x01
    1e66:	0e 94 97 04 	call	0x92e	; 0x92e <move_window>
    1e6a:	18 2f       	mov	r17, r24
    1e6c:	81 11       	cpse	r24, r1
    1e6e:	14 c0       	rjmp	.+40     	; 0x1e98 <dir_register+0x52>
    1e70:	40 e2       	ldi	r20, 0x20	; 32
    1e72:	50 e0       	ldi	r21, 0x00	; 0
    1e74:	60 e0       	ldi	r22, 0x00	; 0
    1e76:	70 e0       	ldi	r23, 0x00	; 0
    1e78:	8a 89       	ldd	r24, Y+18	; 0x12
    1e7a:	9b 89       	ldd	r25, Y+19	; 0x13
    1e7c:	0e 94 ce 03 	call	0x79c	; 0x79c <mem_set>
    1e80:	6c 89       	ldd	r22, Y+20	; 0x14
    1e82:	7d 89       	ldd	r23, Y+21	; 0x15
    1e84:	4b e0       	ldi	r20, 0x0B	; 11
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	8a 89       	ldd	r24, Y+18	; 0x12
    1e8a:	9b 89       	ldd	r25, Y+19	; 0x13
    1e8c:	0e 94 9e 03 	call	0x73c	; 0x73c <mem_cpy>
    1e90:	e8 81       	ld	r30, Y
    1e92:	f9 81       	ldd	r31, Y+1	; 0x01
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	84 83       	std	Z+4, r24	; 0x04
    1e98:	81 2f       	mov	r24, r17
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	1f 91       	pop	r17
    1ea0:	08 95       	ret

00001ea2 <remove_chain>:
    1ea2:	8f 92       	push	r8
    1ea4:	9f 92       	push	r9
    1ea6:	af 92       	push	r10
    1ea8:	bf 92       	push	r11
    1eaa:	cf 92       	push	r12
    1eac:	df 92       	push	r13
    1eae:	ef 92       	push	r14
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	ec 01       	movw	r28, r24
    1ebc:	4a 01       	movw	r8, r20
    1ebe:	5b 01       	movw	r10, r22
    1ec0:	42 30       	cpi	r20, 0x02	; 2
    1ec2:	51 05       	cpc	r21, r1
    1ec4:	61 05       	cpc	r22, r1
    1ec6:	71 05       	cpc	r23, r1
    1ec8:	08 f4       	brcc	.+2      	; 0x1ecc <remove_chain+0x2a>
    1eca:	4b c0       	rjmp	.+150    	; 0x1f62 <remove_chain+0xc0>
    1ecc:	4e 89       	ldd	r20, Y+22	; 0x16
    1ece:	5f 89       	ldd	r21, Y+23	; 0x17
    1ed0:	68 8d       	ldd	r22, Y+24	; 0x18
    1ed2:	79 8d       	ldd	r23, Y+25	; 0x19
    1ed4:	84 16       	cp	r8, r20
    1ed6:	95 06       	cpc	r9, r21
    1ed8:	a6 06       	cpc	r10, r22
    1eda:	b7 06       	cpc	r11, r23
    1edc:	08 f0       	brcs	.+2      	; 0x1ee0 <remove_chain+0x3e>
    1ede:	43 c0       	rjmp	.+134    	; 0x1f66 <remove_chain+0xc4>
    1ee0:	b5 01       	movw	r22, r10
    1ee2:	a4 01       	movw	r20, r8
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	12 d9       	rcall	.-3548   	; 0x110c <get_fat>
    1ee8:	6b 01       	movw	r12, r22
    1eea:	7c 01       	movw	r14, r24
    1eec:	61 15       	cp	r22, r1
    1eee:	71 05       	cpc	r23, r1
    1ef0:	81 05       	cpc	r24, r1
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	d1 f1       	breq	.+116    	; 0x1f6a <remove_chain+0xc8>
    1ef6:	91 e0       	ldi	r25, 0x01	; 1
    1ef8:	c9 16       	cp	r12, r25
    1efa:	d1 04       	cpc	r13, r1
    1efc:	e1 04       	cpc	r14, r1
    1efe:	f1 04       	cpc	r15, r1
    1f00:	b1 f1       	breq	.+108    	; 0x1f6e <remove_chain+0xcc>
    1f02:	8f ef       	ldi	r24, 0xFF	; 255
    1f04:	c8 16       	cp	r12, r24
    1f06:	d8 06       	cpc	r13, r24
    1f08:	e8 06       	cpc	r14, r24
    1f0a:	f8 06       	cpc	r15, r24
    1f0c:	91 f1       	breq	.+100    	; 0x1f72 <remove_chain+0xd0>
    1f0e:	00 e0       	ldi	r16, 0x00	; 0
    1f10:	10 e0       	ldi	r17, 0x00	; 0
    1f12:	98 01       	movw	r18, r16
    1f14:	b5 01       	movw	r22, r10
    1f16:	a4 01       	movw	r20, r8
    1f18:	ce 01       	movw	r24, r28
    1f1a:	99 da       	rcall	.-2766   	; 0x144e <put_fat>
    1f1c:	81 11       	cpse	r24, r1
    1f1e:	2a c0       	rjmp	.+84     	; 0x1f74 <remove_chain+0xd2>
    1f20:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f22:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f24:	68 89       	ldd	r22, Y+16	; 0x10
    1f26:	79 89       	ldd	r23, Y+17	; 0x11
    1f28:	4f 3f       	cpi	r20, 0xFF	; 255
    1f2a:	9f ef       	ldi	r25, 0xFF	; 255
    1f2c:	59 07       	cpc	r21, r25
    1f2e:	69 07       	cpc	r22, r25
    1f30:	79 07       	cpc	r23, r25
    1f32:	59 f0       	breq	.+22     	; 0x1f4a <remove_chain+0xa8>
    1f34:	4f 5f       	subi	r20, 0xFF	; 255
    1f36:	5f 4f       	sbci	r21, 0xFF	; 255
    1f38:	6f 4f       	sbci	r22, 0xFF	; 255
    1f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3c:	4e 87       	std	Y+14, r20	; 0x0e
    1f3e:	5f 87       	std	Y+15, r21	; 0x0f
    1f40:	68 8b       	std	Y+16, r22	; 0x10
    1f42:	79 8b       	std	Y+17, r23	; 0x11
    1f44:	9d 81       	ldd	r25, Y+5	; 0x05
    1f46:	91 60       	ori	r25, 0x01	; 1
    1f48:	9d 83       	std	Y+5, r25	; 0x05
    1f4a:	4e 89       	ldd	r20, Y+22	; 0x16
    1f4c:	5f 89       	ldd	r21, Y+23	; 0x17
    1f4e:	68 8d       	ldd	r22, Y+24	; 0x18
    1f50:	79 8d       	ldd	r23, Y+25	; 0x19
    1f52:	c4 16       	cp	r12, r20
    1f54:	d5 06       	cpc	r13, r21
    1f56:	e6 06       	cpc	r14, r22
    1f58:	f7 06       	cpc	r15, r23
    1f5a:	60 f4       	brcc	.+24     	; 0x1f74 <remove_chain+0xd2>
    1f5c:	46 01       	movw	r8, r12
    1f5e:	57 01       	movw	r10, r14
    1f60:	bf cf       	rjmp	.-130    	; 0x1ee0 <remove_chain+0x3e>
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	07 c0       	rjmp	.+14     	; 0x1f74 <remove_chain+0xd2>
    1f66:	82 e0       	ldi	r24, 0x02	; 2
    1f68:	05 c0       	rjmp	.+10     	; 0x1f74 <remove_chain+0xd2>
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	03 c0       	rjmp	.+6      	; 0x1f74 <remove_chain+0xd2>
    1f6e:	82 e0       	ldi	r24, 0x02	; 2
    1f70:	01 c0       	rjmp	.+2      	; 0x1f74 <remove_chain+0xd2>
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	df 90       	pop	r13
    1f82:	cf 90       	pop	r12
    1f84:	bf 90       	pop	r11
    1f86:	af 90       	pop	r10
    1f88:	9f 90       	pop	r9
    1f8a:	8f 90       	pop	r8
    1f8c:	08 95       	ret

00001f8e <f_mount>:
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	26 97       	sbiw	r28, 0x06	; 6
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	8b 83       	std	Y+3, r24	; 0x03
    1fa0:	9c 83       	std	Y+4, r25	; 0x04
    1fa2:	6d 83       	std	Y+5, r22	; 0x05
    1fa4:	7e 83       	std	Y+6, r23	; 0x06
    1fa6:	14 2f       	mov	r17, r20
    1fa8:	69 83       	std	Y+1, r22	; 0x01
    1faa:	7a 83       	std	Y+2, r23	; 0x02
    1fac:	ce 01       	movw	r24, r28
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <get_ldnumber>
    1fb4:	99 23       	and	r25, r25
    1fb6:	34 f1       	brlt	.+76     	; 0x2004 <f_mount+0x76>
    1fb8:	fc 01       	movw	r30, r24
    1fba:	ee 0f       	add	r30, r30
    1fbc:	ff 1f       	adc	r31, r31
    1fbe:	e4 50       	subi	r30, 0x04	; 4
    1fc0:	fe 4d       	sbci	r31, 0xDE	; 222
    1fc2:	01 90       	ld	r0, Z+
    1fc4:	f0 81       	ld	r31, Z
    1fc6:	e0 2d       	mov	r30, r0
    1fc8:	30 97       	sbiw	r30, 0x00	; 0
    1fca:	09 f0       	breq	.+2      	; 0x1fce <f_mount+0x40>
    1fcc:	10 82       	st	Z, r1
    1fce:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd0:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd2:	30 97       	sbiw	r30, 0x00	; 0
    1fd4:	e9 f0       	breq	.+58     	; 0x2010 <f_mount+0x82>
    1fd6:	10 82       	st	Z, r1
    1fd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fda:	3c 81       	ldd	r19, Y+4	; 0x04
    1fdc:	fc 01       	movw	r30, r24
    1fde:	ee 0f       	add	r30, r30
    1fe0:	ff 1f       	adc	r31, r31
    1fe2:	e4 50       	subi	r30, 0x04	; 4
    1fe4:	fe 4d       	sbci	r31, 0xDE	; 222
    1fe6:	20 83       	st	Z, r18
    1fe8:	31 83       	std	Z+1, r19	; 0x01
    1fea:	23 2b       	or	r18, r19
    1fec:	69 f0       	breq	.+26     	; 0x2008 <f_mount+0x7a>
    1fee:	11 30       	cpi	r17, 0x01	; 1
    1ff0:	69 f4       	brne	.+26     	; 0x200c <f_mount+0x7e>
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
    1ff4:	be 01       	movw	r22, r28
    1ff6:	6b 5f       	subi	r22, 0xFB	; 251
    1ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	03 96       	adiw	r24, 0x03	; 3
    1ffe:	0e 94 36 05 	call	0xa6c	; 0xa6c <find_volume>
    2002:	0e c0       	rjmp	.+28     	; 0x2020 <f_mount+0x92>
    2004:	8b e0       	ldi	r24, 0x0B	; 11
    2006:	0c c0       	rjmp	.+24     	; 0x2020 <f_mount+0x92>
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	0a c0       	rjmp	.+20     	; 0x2020 <f_mount+0x92>
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	08 c0       	rjmp	.+16     	; 0x2020 <f_mount+0x92>
    2010:	fc 01       	movw	r30, r24
    2012:	ee 0f       	add	r30, r30
    2014:	ff 1f       	adc	r31, r31
    2016:	e4 50       	subi	r30, 0x04	; 4
    2018:	fe 4d       	sbci	r31, 0xDE	; 222
    201a:	10 82       	st	Z, r1
    201c:	11 82       	std	Z+1, r1	; 0x01
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	26 96       	adiw	r28, 0x06	; 6
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	de bf       	out	0x3e, r29	; 62
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	1f 91       	pop	r17
    202c:	08 95       	ret

0000202e <f_open>:
    202e:	4f 92       	push	r4
    2030:	5f 92       	push	r5
    2032:	6f 92       	push	r6
    2034:	7f 92       	push	r7
    2036:	bf 92       	push	r11
    2038:	cf 92       	push	r12
    203a:	df 92       	push	r13
    203c:	ef 92       	push	r14
    203e:	ff 92       	push	r15
    2040:	0f 93       	push	r16
    2042:	1f 93       	push	r17
    2044:	cf 93       	push	r28
    2046:	df 93       	push	r29
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	a8 97       	sbiw	r28, 0x28	; 40
    204e:	cd bf       	out	0x3d, r28	; 61
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	8c 01       	movw	r16, r24
    2054:	6b a3       	std	Y+35, r22	; 0x23
    2056:	7c a3       	std	Y+36, r23	; 0x24
    2058:	f4 2e       	mov	r15, r20
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	09 f4       	brne	.+2      	; 0x2060 <f_open+0x32>
    205e:	d2 c0       	rjmp	.+420    	; 0x2204 <f_open+0x1d6>
    2060:	dc 01       	movw	r26, r24
    2062:	1d 92       	st	X+, r1
    2064:	1c 92       	st	X, r1
    2066:	4e 71       	andi	r20, 0x1E	; 30
    2068:	be 01       	movw	r22, r28
    206a:	6d 5d       	subi	r22, 0xDD	; 221
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	ce 01       	movw	r24, r28
    2070:	01 96       	adiw	r24, 0x01	; 1
    2072:	0e 94 36 05 	call	0xa6c	; 0xa6c <find_volume>
    2076:	81 11       	cpse	r24, r1
    2078:	d9 c0       	rjmp	.+434    	; 0x222c <f_open+0x1fe>
    207a:	bf 2d       	mov	r27, r15
    207c:	bf 71       	andi	r27, 0x1F	; 31
    207e:	bb 2e       	mov	r11, r27
    2080:	ce 01       	movw	r24, r28
    2082:	47 96       	adiw	r24, 0x17	; 23
    2084:	8d 8b       	std	Y+21, r24	; 0x15
    2086:	9e 8b       	std	Y+22, r25	; 0x16
    2088:	6b a1       	ldd	r22, Y+35	; 0x23
    208a:	7c a1       	ldd	r23, Y+36	; 0x24
    208c:	46 97       	sbiw	r24, 0x16	; 22
    208e:	09 dd       	rcall	.-1518   	; 0x1aa2 <follow_path>
    2090:	cb 88       	ldd	r12, Y+19	; 0x13
    2092:	dc 88       	ldd	r13, Y+20	; 0x14
    2094:	81 11       	cpse	r24, r1
    2096:	be c0       	rjmp	.+380    	; 0x2214 <f_open+0x1e6>
    2098:	c1 14       	cp	r12, r1
    209a:	d1 04       	cpc	r13, r1
    209c:	09 f0       	breq	.+2      	; 0x20a0 <f_open+0x72>
    209e:	b4 c0       	rjmp	.+360    	; 0x2208 <f_open+0x1da>
    20a0:	b8 c0       	rjmp	.+368    	; 0x2212 <f_open+0x1e4>
    20a2:	88 23       	and	r24, r24
    20a4:	71 f0       	breq	.+28     	; 0x20c2 <f_open+0x94>
    20a6:	84 30       	cpi	r24, 0x04	; 4
    20a8:	09 f0       	breq	.+2      	; 0x20ac <f_open+0x7e>
    20aa:	c0 c0       	rjmp	.+384    	; 0x222c <f_open+0x1fe>
    20ac:	ce 01       	movw	r24, r28
    20ae:	01 96       	adiw	r24, 0x01	; 1
    20b0:	ca de       	rcall	.-620    	; 0x1e46 <dir_register>
    20b2:	eb 2d       	mov	r30, r11
    20b4:	e8 60       	ori	r30, 0x08	; 8
    20b6:	be 2e       	mov	r11, r30
    20b8:	cb 88       	ldd	r12, Y+19	; 0x13
    20ba:	dc 88       	ldd	r13, Y+20	; 0x14
    20bc:	88 23       	and	r24, r24
    20be:	49 f0       	breq	.+18     	; 0x20d2 <f_open+0xa4>
    20c0:	b5 c0       	rjmp	.+362    	; 0x222c <f_open+0x1fe>
    20c2:	d6 01       	movw	r26, r12
    20c4:	1b 96       	adiw	r26, 0x0b	; 11
    20c6:	8c 91       	ld	r24, X
    20c8:	81 71       	andi	r24, 0x11	; 17
    20ca:	09 f0       	breq	.+2      	; 0x20ce <f_open+0xa0>
    20cc:	a8 c0       	rjmp	.+336    	; 0x221e <f_open+0x1f0>
    20ce:	f2 fc       	sbrc	r15, 2
    20d0:	a8 c0       	rjmp	.+336    	; 0x2222 <f_open+0x1f4>
    20d2:	b3 fe       	sbrs	r11, 3
    20d4:	55 c0       	rjmp	.+170    	; 0x2180 <f_open+0x152>
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	af e4       	ldi	r26, 0x4F	; 79
    20dc:	b5 e4       	ldi	r27, 0x45	; 69
    20de:	f6 01       	movw	r30, r12
    20e0:	86 87       	std	Z+14, r24	; 0x0e
    20e2:	97 87       	std	Z+15, r25	; 0x0f
    20e4:	a0 8b       	std	Z+16, r26	; 0x10
    20e6:	b1 8b       	std	Z+17, r27	; 0x11
    20e8:	13 86       	std	Z+11, r1	; 0x0b
    20ea:	14 8e       	std	Z+28, r1	; 0x1c
    20ec:	15 8e       	std	Z+29, r1	; 0x1d
    20ee:	16 8e       	std	Z+30, r1	; 0x1e
    20f0:	17 8e       	std	Z+31, r1	; 0x1f
    20f2:	e9 80       	ldd	r14, Y+1	; 0x01
    20f4:	fa 80       	ldd	r15, Y+2	; 0x02
    20f6:	b6 01       	movw	r22, r12
    20f8:	c7 01       	movw	r24, r14
    20fa:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <ld_clust>
    20fe:	2b 01       	movw	r4, r22
    2100:	3c 01       	movw	r6, r24
    2102:	f6 01       	movw	r30, r12
    2104:	12 8e       	std	Z+26, r1	; 0x1a
    2106:	13 8e       	std	Z+27, r1	; 0x1b
    2108:	14 8a       	std	Z+20, r1	; 0x14
    210a:	15 8a       	std	Z+21, r1	; 0x15
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	d7 01       	movw	r26, r14
    2110:	14 96       	adiw	r26, 0x04	; 4
    2112:	8c 93       	st	X, r24
    2114:	14 97       	sbiw	r26, 0x04	; 4
    2116:	41 14       	cp	r4, r1
    2118:	51 04       	cpc	r5, r1
    211a:	61 04       	cpc	r6, r1
    211c:	71 04       	cpc	r7, r1
    211e:	81 f1       	breq	.+96     	; 0x2180 <f_open+0x152>
    2120:	9e 96       	adiw	r26, 0x2e	; 46
    2122:	8d 91       	ld	r24, X+
    2124:	9d 91       	ld	r25, X+
    2126:	0d 90       	ld	r0, X+
    2128:	bc 91       	ld	r27, X
    212a:	a0 2d       	mov	r26, r0
    212c:	8d a3       	std	Y+37, r24	; 0x25
    212e:	9e a3       	std	Y+38, r25	; 0x26
    2130:	af a3       	std	Y+39, r26	; 0x27
    2132:	b8 a7       	std	Y+40, r27	; 0x28
    2134:	b3 01       	movw	r22, r6
    2136:	a2 01       	movw	r20, r4
    2138:	c7 01       	movw	r24, r14
    213a:	b3 de       	rcall	.-666    	; 0x1ea2 <remove_chain>
    213c:	81 11       	cpse	r24, r1
    213e:	76 c0       	rjmp	.+236    	; 0x222c <f_open+0x1fe>
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	9a 81       	ldd	r25, Y+2	; 0x02
    2144:	b3 01       	movw	r22, r6
    2146:	a2 01       	movw	r20, r4
    2148:	41 50       	subi	r20, 0x01	; 1
    214a:	51 09       	sbc	r21, r1
    214c:	61 09       	sbc	r22, r1
    214e:	71 09       	sbc	r23, r1
    2150:	fc 01       	movw	r30, r24
    2152:	42 87       	std	Z+10, r20	; 0x0a
    2154:	53 87       	std	Z+11, r21	; 0x0b
    2156:	64 87       	std	Z+12, r22	; 0x0c
    2158:	75 87       	std	Z+13, r23	; 0x0d
    215a:	4d a1       	ldd	r20, Y+37	; 0x25
    215c:	5e a1       	ldd	r21, Y+38	; 0x26
    215e:	6f a1       	ldd	r22, Y+39	; 0x27
    2160:	78 a5       	ldd	r23, Y+40	; 0x28
    2162:	0e 94 97 04 	call	0x92e	; 0x92e <move_window>
    2166:	0a c0       	rjmp	.+20     	; 0x217c <f_open+0x14e>
    2168:	d6 01       	movw	r26, r12
    216a:	1b 96       	adiw	r26, 0x0b	; 11
    216c:	8c 91       	ld	r24, X
    216e:	84 fd       	sbrc	r24, 4
    2170:	5a c0       	rjmp	.+180    	; 0x2226 <f_open+0x1f8>
    2172:	f1 fe       	sbrs	r15, 1
    2174:	05 c0       	rjmp	.+10     	; 0x2180 <f_open+0x152>
    2176:	80 fd       	sbrc	r24, 0
    2178:	58 c0       	rjmp	.+176    	; 0x222a <f_open+0x1fc>
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <f_open+0x152>
    217c:	81 11       	cpse	r24, r1
    217e:	56 c0       	rjmp	.+172    	; 0x222c <f_open+0x1fe>
    2180:	b3 fe       	sbrs	r11, 3
    2182:	03 c0       	rjmp	.+6      	; 0x218a <f_open+0x15c>
    2184:	bb 2d       	mov	r27, r11
    2186:	b0 62       	ori	r27, 0x20	; 32
    2188:	bb 2e       	mov	r11, r27
    218a:	e9 80       	ldd	r14, Y+1	; 0x01
    218c:	fa 80       	ldd	r15, Y+2	; 0x02
    218e:	f7 01       	movw	r30, r14
    2190:	86 a5       	ldd	r24, Z+46	; 0x2e
    2192:	97 a5       	ldd	r25, Z+47	; 0x2f
    2194:	a0 a9       	ldd	r26, Z+48	; 0x30
    2196:	b1 a9       	ldd	r27, Z+49	; 0x31
    2198:	f8 01       	movw	r30, r16
    219a:	82 8f       	std	Z+26, r24	; 0x1a
    219c:	93 8f       	std	Z+27, r25	; 0x1b
    219e:	a4 8f       	std	Z+28, r26	; 0x1c
    21a0:	b5 8f       	std	Z+29, r27	; 0x1d
    21a2:	c6 8e       	std	Z+30, r12	; 0x1e
    21a4:	d7 8e       	std	Z+31, r13	; 0x1f
    21a6:	b4 82       	std	Z+4, r11	; 0x04
    21a8:	15 82       	std	Z+5, r1	; 0x05
    21aa:	b6 01       	movw	r22, r12
    21ac:	c7 01       	movw	r24, r14
    21ae:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <ld_clust>
    21b2:	d8 01       	movw	r26, r16
    21b4:	1e 96       	adiw	r26, 0x0e	; 14
    21b6:	6d 93       	st	X+, r22
    21b8:	7d 93       	st	X+, r23
    21ba:	8d 93       	st	X+, r24
    21bc:	9c 93       	st	X, r25
    21be:	51 97       	sbiw	r26, 0x11	; 17
    21c0:	f6 01       	movw	r30, r12
    21c2:	44 8d       	ldd	r20, Z+28	; 0x1c
    21c4:	55 8d       	ldd	r21, Z+29	; 0x1d
    21c6:	66 8d       	ldd	r22, Z+30	; 0x1e
    21c8:	77 8d       	ldd	r23, Z+31	; 0x1f
    21ca:	1a 96       	adiw	r26, 0x0a	; 10
    21cc:	4d 93       	st	X+, r20
    21ce:	5d 93       	st	X+, r21
    21d0:	6d 93       	st	X+, r22
    21d2:	7c 93       	st	X, r23
    21d4:	1d 97       	sbiw	r26, 0x0d	; 13
    21d6:	f8 01       	movw	r30, r16
    21d8:	16 82       	std	Z+6, r1	; 0x06
    21da:	17 82       	std	Z+7, r1	; 0x07
    21dc:	10 86       	std	Z+8, r1	; 0x08
    21de:	11 86       	std	Z+9, r1	; 0x09
    21e0:	56 96       	adiw	r26, 0x16	; 22
    21e2:	1d 92       	st	X+, r1
    21e4:	1d 92       	st	X+, r1
    21e6:	1d 92       	st	X+, r1
    21e8:	1c 92       	st	X, r1
    21ea:	59 97       	sbiw	r26, 0x19	; 25
    21ec:	ed 92       	st	X+, r14
    21ee:	fc 92       	st	X, r15
    21f0:	11 97       	sbiw	r26, 0x01	; 1
    21f2:	f7 01       	movw	r30, r14
    21f4:	86 81       	ldd	r24, Z+6	; 0x06
    21f6:	97 81       	ldd	r25, Z+7	; 0x07
    21f8:	12 96       	adiw	r26, 0x02	; 2
    21fa:	8d 93       	st	X+, r24
    21fc:	9c 93       	st	X, r25
    21fe:	13 97       	sbiw	r26, 0x03	; 3
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	14 c0       	rjmp	.+40     	; 0x222c <f_open+0x1fe>
    2204:	89 e0       	ldi	r24, 0x09	; 9
    2206:	12 c0       	rjmp	.+36     	; 0x222c <f_open+0x1fe>
    2208:	8f 2d       	mov	r24, r15
    220a:	8c 71       	andi	r24, 0x1C	; 28
    220c:	09 f0       	breq	.+2      	; 0x2210 <f_open+0x1e2>
    220e:	59 cf       	rjmp	.-334    	; 0x20c2 <f_open+0x94>
    2210:	ab cf       	rjmp	.-170    	; 0x2168 <f_open+0x13a>
    2212:	86 e0       	ldi	r24, 0x06	; 6
    2214:	9f 2d       	mov	r25, r15
    2216:	9c 71       	andi	r25, 0x1C	; 28
    2218:	09 f0       	breq	.+2      	; 0x221c <f_open+0x1ee>
    221a:	43 cf       	rjmp	.-378    	; 0x20a2 <f_open+0x74>
    221c:	af cf       	rjmp	.-162    	; 0x217c <f_open+0x14e>
    221e:	87 e0       	ldi	r24, 0x07	; 7
    2220:	05 c0       	rjmp	.+10     	; 0x222c <f_open+0x1fe>
    2222:	88 e0       	ldi	r24, 0x08	; 8
    2224:	03 c0       	rjmp	.+6      	; 0x222c <f_open+0x1fe>
    2226:	84 e0       	ldi	r24, 0x04	; 4
    2228:	01 c0       	rjmp	.+2      	; 0x222c <f_open+0x1fe>
    222a:	87 e0       	ldi	r24, 0x07	; 7
    222c:	a8 96       	adiw	r28, 0x28	; 40
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	1f 91       	pop	r17
    2238:	0f 91       	pop	r16
    223a:	ff 90       	pop	r15
    223c:	ef 90       	pop	r14
    223e:	df 90       	pop	r13
    2240:	cf 90       	pop	r12
    2242:	bf 90       	pop	r11
    2244:	7f 90       	pop	r7
    2246:	6f 90       	pop	r6
    2248:	5f 90       	pop	r5
    224a:	4f 90       	pop	r4
    224c:	08 95       	ret

0000224e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    224e:	2f 92       	push	r2
    2250:	3f 92       	push	r3
    2252:	4f 92       	push	r4
    2254:	5f 92       	push	r5
    2256:	6f 92       	push	r6
    2258:	7f 92       	push	r7
    225a:	8f 92       	push	r8
    225c:	9f 92       	push	r9
    225e:	af 92       	push	r10
    2260:	bf 92       	push	r11
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
    2272:	ec 01       	movw	r28, r24
    2274:	5b 01       	movw	r10, r22
    2276:	7a 01       	movw	r14, r20
    2278:	69 01       	movw	r12, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    227a:	f9 01       	movw	r30, r18
    227c:	10 82       	st	Z, r1
    227e:	11 82       	std	Z+1, r1	; 0x01

	res = validate(fp);						/* Check validity */
    2280:	0e 94 11 05 	call	0xa22	; 0xa22 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    2284:	81 11       	cpse	r24, r1
    2286:	6a c1       	rjmp	.+724    	; 0x255c <f_write+0x30e>
	if (fp->err)							/* Check error */
    2288:	8d 81       	ldd	r24, Y+5	; 0x05
    228a:	81 11       	cpse	r24, r1
    228c:	67 c1       	rjmp	.+718    	; 0x255c <f_write+0x30e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    228e:	8c 81       	ldd	r24, Y+4	; 0x04
    2290:	81 ff       	sbrs	r24, 1
    2292:	63 c1       	rjmp	.+710    	; 0x255a <f_write+0x30c>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    2294:	8e 81       	ldd	r24, Y+6	; 0x06
    2296:	9f 81       	ldd	r25, Y+7	; 0x07
    2298:	a8 85       	ldd	r26, Y+8	; 0x08
    229a:	b9 85       	ldd	r27, Y+9	; 0x09
    229c:	ac 01       	movw	r20, r24
    229e:	bd 01       	movw	r22, r26
    22a0:	4e 0d       	add	r20, r14
    22a2:	5f 1d       	adc	r21, r15
    22a4:	61 1d       	adc	r22, r1
    22a6:	71 1d       	adc	r23, r1
    22a8:	48 17       	cp	r20, r24
    22aa:	59 07       	cpc	r21, r25
    22ac:	6a 07       	cpc	r22, r26
    22ae:	7b 07       	cpc	r23, r27
    22b0:	08 f4       	brcc	.+2      	; 0x22b4 <f_write+0x66>
    22b2:	3d c1       	rjmp	.+634    	; 0x252e <f_write+0x2e0>

	for ( ;  btw;							/* Repeat until all data written */
    22b4:	e1 14       	cp	r14, r1
    22b6:	f1 04       	cpc	r15, r1
    22b8:	09 f4       	brne	.+2      	; 0x22bc <f_write+0x6e>
    22ba:	39 c1       	rjmp	.+626    	; 0x252e <f_write+0x2e0>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    22bc:	8e 81       	ldd	r24, Y+6	; 0x06
    22be:	9f 81       	ldd	r25, Y+7	; 0x07
    22c0:	a8 85       	ldd	r26, Y+8	; 0x08
    22c2:	b9 85       	ldd	r27, Y+9	; 0x09
    22c4:	ac 01       	movw	r20, r24
    22c6:	bd 01       	movw	r22, r26
    22c8:	51 70       	andi	r21, 0x01	; 1
    22ca:	66 27       	eor	r22, r22
    22cc:	77 27       	eor	r23, r23
    22ce:	45 2b       	or	r20, r21
    22d0:	46 2b       	or	r20, r22
    22d2:	47 2b       	or	r20, r23
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <f_write+0x8a>
    22d6:	e5 c0       	rjmp	.+458    	; 0x24a2 <f_write+0x254>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    22d8:	e8 81       	ld	r30, Y
    22da:	f9 81       	ldd	r31, Y+1	; 0x01
    22dc:	12 81       	ldd	r17, Z+2	; 0x02
    22de:	11 50       	subi	r17, 0x01	; 1
    22e0:	ac 01       	movw	r20, r24
    22e2:	bd 01       	movw	r22, r26
    22e4:	03 2e       	mov	r0, r19
    22e6:	39 e0       	ldi	r19, 0x09	; 9
    22e8:	76 95       	lsr	r23
    22ea:	67 95       	ror	r22
    22ec:	57 95       	ror	r21
    22ee:	47 95       	ror	r20
    22f0:	3a 95       	dec	r19
    22f2:	d1 f7       	brne	.-12     	; 0x22e8 <f_write+0x9a>
    22f4:	30 2d       	mov	r19, r0
    22f6:	14 23       	and	r17, r20
			if (!csect) {					/* On the cluster boundary? */
    22f8:	09 f0       	breq	.+2      	; 0x22fc <f_write+0xae>
    22fa:	40 c0       	rjmp	.+128    	; 0x237c <f_write+0x12e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    22fc:	89 2b       	or	r24, r25
    22fe:	8a 2b       	or	r24, r26
    2300:	8b 2b       	or	r24, r27
    2302:	79 f4       	brne	.+30     	; 0x2322 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    2304:	6e 85       	ldd	r22, Y+14	; 0x0e
    2306:	7f 85       	ldd	r23, Y+15	; 0x0f
    2308:	88 89       	ldd	r24, Y+16	; 0x10
    230a:	99 89       	ldd	r25, Y+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    230c:	61 15       	cp	r22, r1
    230e:	71 05       	cpc	r23, r1
    2310:	81 05       	cpc	r24, r1
    2312:	91 05       	cpc	r25, r1
    2314:	91 f4       	brne	.+36     	; 0x233a <f_write+0xec>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	ba 01       	movw	r22, r20
    231c:	cf 01       	movw	r24, r30
    231e:	9f d9       	rcall	.-3266   	; 0x165e <create_chain>
    2320:	06 c0       	rjmp	.+12     	; 0x232e <f_write+0xe0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    2322:	4a 89       	ldd	r20, Y+18	; 0x12
    2324:	5b 89       	ldd	r21, Y+19	; 0x13
    2326:	6c 89       	ldd	r22, Y+20	; 0x14
    2328:	7d 89       	ldd	r23, Y+21	; 0x15
    232a:	cf 01       	movw	r24, r30
    232c:	98 d9       	rcall	.-3280   	; 0x165e <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    232e:	61 15       	cp	r22, r1
    2330:	71 05       	cpc	r23, r1
    2332:	81 05       	cpc	r24, r1
    2334:	91 05       	cpc	r25, r1
    2336:	09 f4       	brne	.+2      	; 0x233a <f_write+0xec>
    2338:	fa c0       	rjmp	.+500    	; 0x252e <f_write+0x2e0>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    233a:	61 30       	cpi	r22, 0x01	; 1
    233c:	71 05       	cpc	r23, r1
    233e:	81 05       	cpc	r24, r1
    2340:	91 05       	cpc	r25, r1
    2342:	19 f4       	brne	.+6      	; 0x234a <f_write+0xfc>
    2344:	82 e0       	ldi	r24, 0x02	; 2
    2346:	8d 83       	std	Y+5, r24	; 0x05
    2348:	09 c1       	rjmp	.+530    	; 0x255c <f_write+0x30e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    234a:	6f 3f       	cpi	r22, 0xFF	; 255
    234c:	ff ef       	ldi	r31, 0xFF	; 255
    234e:	7f 07       	cpc	r23, r31
    2350:	8f 07       	cpc	r24, r31
    2352:	9f 07       	cpc	r25, r31
    2354:	19 f4       	brne	.+6      	; 0x235c <f_write+0x10e>
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	00 c1       	rjmp	.+512    	; 0x255c <f_write+0x30e>
				fp->clust = clst;			/* Update current cluster */
    235c:	6a 8b       	std	Y+18, r22	; 0x12
    235e:	7b 8b       	std	Y+19, r23	; 0x13
    2360:	8c 8b       	std	Y+20, r24	; 0x14
    2362:	9d 8b       	std	Y+21, r25	; 0x15
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    2364:	4e 84       	ldd	r4, Y+14	; 0x0e
    2366:	5f 84       	ldd	r5, Y+15	; 0x0f
    2368:	68 88       	ldd	r6, Y+16	; 0x10
    236a:	79 88       	ldd	r7, Y+17	; 0x11
    236c:	45 28       	or	r4, r5
    236e:	46 28       	or	r4, r6
    2370:	47 28       	or	r4, r7
    2372:	21 f4       	brne	.+8      	; 0x237c <f_write+0x12e>
    2374:	6e 87       	std	Y+14, r22	; 0x0e
    2376:	7f 87       	std	Y+15, r23	; 0x0f
    2378:	88 8b       	std	Y+16, r24	; 0x10
    237a:	99 8b       	std	Y+17, r25	; 0x11
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    237c:	e8 81       	ld	r30, Y
    237e:	f9 81       	ldd	r31, Y+1	; 0x01
    2380:	86 a5       	ldd	r24, Z+46	; 0x2e
    2382:	97 a5       	ldd	r25, Z+47	; 0x2f
    2384:	a0 a9       	ldd	r26, Z+48	; 0x30
    2386:	b1 a9       	ldd	r27, Z+49	; 0x31
    2388:	4e 89       	ldd	r20, Y+22	; 0x16
    238a:	5f 89       	ldd	r21, Y+23	; 0x17
    238c:	68 8d       	ldd	r22, Y+24	; 0x18
    238e:	79 8d       	ldd	r23, Y+25	; 0x19
    2390:	84 17       	cp	r24, r20
    2392:	95 07       	cpc	r25, r21
    2394:	a6 07       	cpc	r26, r22
    2396:	b7 07       	cpc	r27, r23
    2398:	41 f4       	brne	.+16     	; 0x23aa <f_write+0x15c>
    239a:	cf 01       	movw	r24, r30
    239c:	0e 94 2c 04 	call	0x858	; 0x858 <sync_window>
    23a0:	88 23       	and	r24, r24
    23a2:	19 f0       	breq	.+6      	; 0x23aa <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	8d 83       	std	Y+5, r24	; 0x05
    23a8:	d9 c0       	rjmp	.+434    	; 0x255c <f_write+0x30e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    23aa:	28 80       	ld	r2, Y
    23ac:	39 80       	ldd	r3, Y+1	; 0x01
    23ae:	4a 89       	ldd	r20, Y+18	; 0x12
    23b0:	5b 89       	ldd	r21, Y+19	; 0x13
    23b2:	6c 89       	ldd	r22, Y+20	; 0x14
    23b4:	7d 89       	ldd	r23, Y+21	; 0x15
    23b6:	c1 01       	movw	r24, r2
    23b8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    23bc:	61 15       	cp	r22, r1
    23be:	71 05       	cpc	r23, r1
    23c0:	81 05       	cpc	r24, r1
    23c2:	91 05       	cpc	r25, r1
    23c4:	19 f4       	brne	.+6      	; 0x23cc <f_write+0x17e>
    23c6:	82 e0       	ldi	r24, 0x02	; 2
    23c8:	8d 83       	std	Y+5, r24	; 0x05
    23ca:	c8 c0       	rjmp	.+400    	; 0x255c <f_write+0x30e>
			sect += csect;
    23cc:	2b 01       	movw	r4, r22
    23ce:	3c 01       	movw	r6, r24
    23d0:	41 0e       	add	r4, r17
    23d2:	51 1c       	adc	r5, r1
    23d4:	61 1c       	adc	r6, r1
    23d6:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    23d8:	47 01       	movw	r8, r14
    23da:	89 2c       	mov	r8, r9
    23dc:	99 24       	eor	r9, r9
    23de:	86 94       	lsr	r8
			if (cc) {						/* Write maximum contiguous sectors directly */
    23e0:	81 14       	cp	r8, r1
    23e2:	91 04       	cpc	r9, r1
    23e4:	09 f4       	brne	.+2      	; 0x23e8 <f_write+0x19a>
    23e6:	3e c0       	rjmp	.+124    	; 0x2464 <f_write+0x216>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    23e8:	f1 01       	movw	r30, r2
    23ea:	42 81       	ldd	r20, Z+2	; 0x02
    23ec:	24 2f       	mov	r18, r20
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	c4 01       	movw	r24, r8
    23f2:	81 0f       	add	r24, r17
    23f4:	91 1d       	adc	r25, r1
    23f6:	28 17       	cp	r18, r24
    23f8:	39 07       	cpc	r19, r25
    23fa:	18 f4       	brcc	.+6      	; 0x2402 <f_write+0x1b4>
					cc = fp->fs->csize - csect;
    23fc:	49 01       	movw	r8, r18
    23fe:	81 1a       	sub	r8, r17
    2400:	91 08       	sbc	r9, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    2402:	84 01       	movw	r16, r8
    2404:	a3 01       	movw	r20, r6
    2406:	92 01       	movw	r18, r4
    2408:	b5 01       	movw	r22, r10
    240a:	f1 01       	movw	r30, r2
    240c:	81 81       	ldd	r24, Z+1	; 0x01
    240e:	09 d3       	rcall	.+1554   	; 0x2a22 <disk_write>
    2410:	88 23       	and	r24, r24
    2412:	19 f0       	breq	.+6      	; 0x241a <f_write+0x1cc>
					ABORT(fp->fs, FR_DISK_ERR);
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	8d 83       	std	Y+5, r24	; 0x05
    2418:	a1 c0       	rjmp	.+322    	; 0x255c <f_write+0x30e>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    241a:	e8 81       	ld	r30, Y
    241c:	f9 81       	ldd	r31, Y+1	; 0x01
    241e:	86 a5       	ldd	r24, Z+46	; 0x2e
    2420:	97 a5       	ldd	r25, Z+47	; 0x2f
    2422:	a0 a9       	ldd	r26, Z+48	; 0x30
    2424:	b1 a9       	ldd	r27, Z+49	; 0x31
    2426:	84 19       	sub	r24, r4
    2428:	95 09       	sbc	r25, r5
    242a:	a6 09       	sbc	r26, r6
    242c:	b7 09       	sbc	r27, r7
    242e:	a4 01       	movw	r20, r8
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	70 e0       	ldi	r23, 0x00	; 0
    2434:	84 17       	cp	r24, r20
    2436:	95 07       	cpc	r25, r21
    2438:	a6 07       	cpc	r26, r22
    243a:	b7 07       	cpc	r27, r23
    243c:	78 f4       	brcc	.+30     	; 0x245c <f_write+0x20e>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    243e:	98 2f       	mov	r25, r24
    2440:	88 27       	eor	r24, r24
    2442:	99 0f       	add	r25, r25
    2444:	b5 01       	movw	r22, r10
    2446:	68 0f       	add	r22, r24
    2448:	79 1f       	adc	r23, r25
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	52 e0       	ldi	r21, 0x02	; 2
    244e:	cf 01       	movw	r24, r30
    2450:	c2 96       	adiw	r24, 0x32	; 50
    2452:	0e 94 9e 03 	call	0x73c	; 0x73c <mem_cpy>
					fp->fs->wflag = 0;
    2456:	e8 81       	ld	r30, Y
    2458:	f9 81       	ldd	r31, Y+1	; 0x01
    245a:	14 82       	std	Z+4, r1	; 0x04
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    245c:	98 2c       	mov	r9, r8
    245e:	88 24       	eor	r8, r8
    2460:	99 0c       	add	r9, r9
				continue;
    2462:	4c c0       	rjmp	.+152    	; 0x24fc <f_write+0x2ae>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    2464:	4e 81       	ldd	r20, Y+6	; 0x06
    2466:	5f 81       	ldd	r21, Y+7	; 0x07
    2468:	68 85       	ldd	r22, Y+8	; 0x08
    246a:	79 85       	ldd	r23, Y+9	; 0x09
    246c:	8a 85       	ldd	r24, Y+10	; 0x0a
    246e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2470:	ac 85       	ldd	r26, Y+12	; 0x0c
    2472:	bd 85       	ldd	r27, Y+13	; 0x0d
    2474:	48 17       	cp	r20, r24
    2476:	59 07       	cpc	r21, r25
    2478:	6a 07       	cpc	r22, r26
    247a:	7b 07       	cpc	r23, r27
    247c:	70 f0       	brcs	.+28     	; 0x249a <f_write+0x24c>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    247e:	c1 01       	movw	r24, r2
    2480:	0e 94 2c 04 	call	0x858	; 0x858 <sync_window>
    2484:	88 23       	and	r24, r24
    2486:	19 f0       	breq	.+6      	; 0x248e <f_write+0x240>
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	8d 83       	std	Y+5, r24	; 0x05
    248c:	67 c0       	rjmp	.+206    	; 0x255c <f_write+0x30e>
				fp->fs->winsect = sect;
    248e:	e8 81       	ld	r30, Y
    2490:	f9 81       	ldd	r31, Y+1	; 0x01
    2492:	46 a6       	std	Z+46, r4	; 0x2e
    2494:	57 a6       	std	Z+47, r5	; 0x2f
    2496:	60 aa       	std	Z+48, r6	; 0x30
    2498:	71 aa       	std	Z+49, r7	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    249a:	4e 8a       	std	Y+22, r4	; 0x16
    249c:	5f 8a       	std	Y+23, r5	; 0x17
    249e:	68 8e       	std	Y+24, r6	; 0x18
    24a0:	79 8e       	std	Y+25, r7	; 0x19
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    24a2:	8e 81       	ldd	r24, Y+6	; 0x06
    24a4:	9f 81       	ldd	r25, Y+7	; 0x07
    24a6:	91 70       	andi	r25, 0x01	; 1
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	32 e0       	ldi	r19, 0x02	; 2
    24ac:	28 1b       	sub	r18, r24
    24ae:	39 0b       	sbc	r19, r25
    24b0:	47 01       	movw	r8, r14
    24b2:	2e 15       	cp	r18, r14
    24b4:	3f 05       	cpc	r19, r15
    24b6:	08 f4       	brcc	.+2      	; 0x24ba <f_write+0x26c>
    24b8:	49 01       	movw	r8, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
    24ba:	4e 89       	ldd	r20, Y+22	; 0x16
    24bc:	5f 89       	ldd	r21, Y+23	; 0x17
    24be:	68 8d       	ldd	r22, Y+24	; 0x18
    24c0:	79 8d       	ldd	r23, Y+25	; 0x19
    24c2:	88 81       	ld	r24, Y
    24c4:	99 81       	ldd	r25, Y+1	; 0x01
    24c6:	0e 94 97 04 	call	0x92e	; 0x92e <move_window>
    24ca:	88 23       	and	r24, r24
    24cc:	19 f0       	breq	.+6      	; 0x24d4 <f_write+0x286>
			ABORT(fp->fs, FR_DISK_ERR);
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	8d 83       	std	Y+5, r24	; 0x05
    24d2:	44 c0       	rjmp	.+136    	; 0x255c <f_write+0x30e>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    24d4:	8e 81       	ldd	r24, Y+6	; 0x06
    24d6:	9f 81       	ldd	r25, Y+7	; 0x07
    24d8:	a8 85       	ldd	r26, Y+8	; 0x08
    24da:	b9 85       	ldd	r27, Y+9	; 0x09
    24dc:	91 70       	andi	r25, 0x01	; 1
    24de:	aa 27       	eor	r26, r26
    24e0:	bb 27       	eor	r27, r27
    24e2:	c2 96       	adiw	r24, 0x32	; 50
    24e4:	28 81       	ld	r18, Y
    24e6:	39 81       	ldd	r19, Y+1	; 0x01
    24e8:	a4 01       	movw	r20, r8
    24ea:	b5 01       	movw	r22, r10
    24ec:	82 0f       	add	r24, r18
    24ee:	93 1f       	adc	r25, r19
    24f0:	0e 94 9e 03 	call	0x73c	; 0x73c <mem_cpy>
		fp->fs->wflag = 1;
    24f4:	e8 81       	ld	r30, Y
    24f6:	f9 81       	ldd	r31, Y+1	; 0x01
    24f8:	31 e0       	ldi	r19, 0x01	; 1
    24fa:	34 83       	std	Z+4, r19	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    24fc:	a8 0c       	add	r10, r8
    24fe:	b9 1c       	adc	r11, r9
    2500:	8e 81       	ldd	r24, Y+6	; 0x06
    2502:	9f 81       	ldd	r25, Y+7	; 0x07
    2504:	a8 85       	ldd	r26, Y+8	; 0x08
    2506:	b9 85       	ldd	r27, Y+9	; 0x09
    2508:	88 0d       	add	r24, r8
    250a:	99 1d       	adc	r25, r9
    250c:	a1 1d       	adc	r26, r1
    250e:	b1 1d       	adc	r27, r1
    2510:	8e 83       	std	Y+6, r24	; 0x06
    2512:	9f 83       	std	Y+7, r25	; 0x07
    2514:	a8 87       	std	Y+8, r26	; 0x08
    2516:	b9 87       	std	Y+9, r27	; 0x09
    2518:	f6 01       	movw	r30, r12
    251a:	80 81       	ld	r24, Z
    251c:	91 81       	ldd	r25, Z+1	; 0x01
    251e:	88 0d       	add	r24, r8
    2520:	99 1d       	adc	r25, r9
    2522:	80 83       	st	Z, r24
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	e8 18       	sub	r14, r8
    2528:	f9 08       	sbc	r15, r9
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    252a:	09 f0       	breq	.+2      	; 0x252e <f_write+0x2e0>
    252c:	c7 ce       	rjmp	.-626    	; 0x22bc <f_write+0x6e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    252e:	8e 81       	ldd	r24, Y+6	; 0x06
    2530:	9f 81       	ldd	r25, Y+7	; 0x07
    2532:	a8 85       	ldd	r26, Y+8	; 0x08
    2534:	b9 85       	ldd	r27, Y+9	; 0x09
    2536:	4a 85       	ldd	r20, Y+10	; 0x0a
    2538:	5b 85       	ldd	r21, Y+11	; 0x0b
    253a:	6c 85       	ldd	r22, Y+12	; 0x0c
    253c:	7d 85       	ldd	r23, Y+13	; 0x0d
    253e:	48 17       	cp	r20, r24
    2540:	59 07       	cpc	r21, r25
    2542:	6a 07       	cpc	r22, r26
    2544:	7b 07       	cpc	r23, r27
    2546:	20 f4       	brcc	.+8      	; 0x2550 <f_write+0x302>
    2548:	8a 87       	std	Y+10, r24	; 0x0a
    254a:	9b 87       	std	Y+11, r25	; 0x0b
    254c:	ac 87       	std	Y+12, r26	; 0x0c
    254e:	bd 87       	std	Y+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2550:	8c 81       	ldd	r24, Y+4	; 0x04
    2552:	80 62       	ori	r24, 0x20	; 32
    2554:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	01 c0       	rjmp	.+2      	; 0x255c <f_write+0x30e>
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    255a:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	ff 90       	pop	r15
    2566:	ef 90       	pop	r14
    2568:	df 90       	pop	r13
    256a:	cf 90       	pop	r12
    256c:	bf 90       	pop	r11
    256e:	af 90       	pop	r10
    2570:	9f 90       	pop	r9
    2572:	8f 90       	pop	r8
    2574:	7f 90       	pop	r7
    2576:	6f 90       	pop	r6
    2578:	5f 90       	pop	r5
    257a:	4f 90       	pop	r4
    257c:	3f 90       	pop	r3
    257e:	2f 90       	pop	r2
    2580:	08 95       	ret

00002582 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    2588:	0e 94 11 05 	call	0xa22	; 0xa22 <validate>
	if (res == FR_OK) {
    258c:	81 11       	cpse	r24, r1
    258e:	37 c0       	rjmp	.+110    	; 0x25fe <f_sync+0x7c>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    2590:	9c 81       	ldd	r25, Y+4	; 0x04
    2592:	95 ff       	sbrs	r25, 5
    2594:	34 c0       	rjmp	.+104    	; 0x25fe <f_sync+0x7c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2596:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2598:	5b 8d       	ldd	r21, Y+27	; 0x1b
    259a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    259c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    259e:	88 81       	ld	r24, Y
    25a0:	99 81       	ldd	r25, Y+1	; 0x01
    25a2:	0e 94 97 04 	call	0x92e	; 0x92e <move_window>
			if (res == FR_OK) {
    25a6:	81 11       	cpse	r24, r1
    25a8:	2a c0       	rjmp	.+84     	; 0x25fe <f_sync+0x7c>
				dir = fp->dir_ptr;
    25aa:	ee 8d       	ldd	r30, Y+30	; 0x1e
    25ac:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    25ae:	83 85       	ldd	r24, Z+11	; 0x0b
    25b0:	80 62       	ori	r24, 0x20	; 32
    25b2:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    25b4:	4a 85       	ldd	r20, Y+10	; 0x0a
    25b6:	5b 85       	ldd	r21, Y+11	; 0x0b
    25b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    25ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    25bc:	44 8f       	std	Z+28, r20	; 0x1c
    25be:	55 8f       	std	Z+29, r21	; 0x1d
    25c0:	66 8f       	std	Z+30, r22	; 0x1e
    25c2:	77 8f       	std	Z+31, r23	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    25c4:	4e 85       	ldd	r20, Y+14	; 0x0e
    25c6:	5f 85       	ldd	r21, Y+15	; 0x0f
    25c8:	68 89       	ldd	r22, Y+16	; 0x10
    25ca:	79 89       	ldd	r23, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    25cc:	42 8f       	std	Z+26, r20	; 0x1a
    25ce:	53 8f       	std	Z+27, r21	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    25d0:	64 8b       	std	Z+20, r22	; 0x14
    25d2:	75 8b       	std	Z+21, r23	; 0x15
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tm);
    25d4:	40 e0       	ldi	r20, 0x00	; 0
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	6f e4       	ldi	r22, 0x4F	; 79
    25da:	75 e4       	ldi	r23, 0x45	; 69
    25dc:	46 8b       	std	Z+22, r20	; 0x16
    25de:	57 8b       	std	Z+23, r21	; 0x17
    25e0:	60 8f       	std	Z+24, r22	; 0x18
    25e2:	71 8f       	std	Z+25, r23	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    25e4:	12 8a       	std	Z+18, r1	; 0x12
    25e6:	13 8a       	std	Z+19, r1	; 0x13
				fp->flag &= ~FA__WRITTEN;
    25e8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ea:	8f 7d       	andi	r24, 0xDF	; 223
    25ec:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    25ee:	e8 81       	ld	r30, Y
    25f0:	f9 81       	ldd	r31, Y+1	; 0x01
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    25f6:	88 81       	ld	r24, Y
    25f8:	99 81       	ldd	r25, Y+1	; 0x01
    25fa:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <sync_fs>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    25fe:	df 91       	pop	r29
    2600:	cf 91       	pop	r28
    2602:	08 95       	ret

00002604 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
    2608:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    260a:	bb df       	rcall	.-138    	; 0x2582 <f_sync>
	if (res == FR_OK)
    260c:	81 11       	cpse	r24, r1
    260e:	07 c0       	rjmp	.+14     	; 0x261e <f_close+0x1a>
#endif
	{
		res = validate(fp);				/* Lock volume */
    2610:	ce 01       	movw	r24, r28
    2612:	0e 94 11 05 	call	0xa22	; 0xa22 <validate>
		if (res == FR_OK) {
    2616:	81 11       	cpse	r24, r1
    2618:	02 c0       	rjmp	.+4      	; 0x261e <f_close+0x1a>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    261a:	18 82       	st	Y, r1
    261c:	19 82       	std	Y+1, r1	; 0x01
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	08 95       	ret

00002624 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    2624:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <spi_wr_rd>
}
    2628:	08 95       	ret

0000262a <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    262a:	80 e1       	ldi	r24, 0x10	; 16
    262c:	e0 e4       	ldi	r30, 0x40	; 64
    262e:	f6 e0       	ldi	r31, 0x06	; 6
    2630:	85 83       	std	Z+5, r24	; 0x05
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    2632:	8f ef       	ldi	r24, 0xFF	; 255
    2634:	f7 cf       	rjmp	.-18     	; 0x2624 <xchg_spi>
    2636:	08 95       	ret

00002638 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
    2638:	80 e1       	ldi	r24, 0x10	; 16
    263a:	e0 e4       	ldi	r30, 0x40	; 64
    263c:	f6 e0       	ldi	r31, 0x06	; 6
    263e:	86 83       	std	Z+6, r24	; 0x06
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    2640:	8f ef       	ldi	r24, 0xFF	; 255
    2642:	f0 df       	rcall	.-32     	; 0x2624 <xchg_spi>
	UINT wt			/* Timeout [ms] */
)
{
	BYTE d;

	Timer2 = wt / 10;
    2644:	82 e3       	ldi	r24, 0x32	; 50
    2646:	80 93 01 22 	sts	0x2201, r24
	do
		d = xchg_spi(0xFF);
    264a:	8f ef       	ldi	r24, 0xFF	; 255
    264c:	eb df       	rcall	.-42     	; 0x2624 <xchg_spi>
	while (d != 0xFF && Timer2);
    264e:	8f 3f       	cpi	r24, 0xFF	; 255
    2650:	41 f0       	breq	.+16     	; 0x2662 <select+0x2a>
    2652:	80 91 01 22 	lds	r24, 0x2201
    2656:	81 11       	cpse	r24, r1
    2658:	f8 cf       	rjmp	.-16     	; 0x264a <select+0x12>
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* OK */
	deselect();
    265a:	e7 df       	rcall	.-50     	; 0x262a <deselect>
	return 0;	/* Timeout */
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* OK */
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	90 e0       	ldi	r25, 0x00	; 0
	deselect();
	return 0;	/* Timeout */
}
    2666:	08 95       	ret

00002668 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    2668:	ff 92       	push	r15
    266a:	0f 93       	push	r16
    266c:	1f 93       	push	r17
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	c8 2f       	mov	r28, r24
    2674:	d4 2f       	mov	r29, r20
    2676:	15 2f       	mov	r17, r21
    2678:	06 2f       	mov	r16, r22
    267a:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    267c:	88 23       	and	r24, r24
    267e:	4c f4       	brge	.+18     	; 0x2692 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    2680:	40 e0       	ldi	r20, 0x00	; 0
    2682:	50 e0       	ldi	r21, 0x00	; 0
    2684:	ba 01       	movw	r22, r20
    2686:	87 e3       	ldi	r24, 0x37	; 55
    2688:	ef df       	rcall	.-34     	; 0x2668 <send_cmd>
		if (res > 1) return res;
    268a:	82 30       	cpi	r24, 0x02	; 2
    268c:	08 f0       	brcs	.+2      	; 0x2690 <send_cmd+0x28>
    268e:	37 c0       	rjmp	.+110    	; 0x26fe <send_cmd+0x96>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    2690:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    2692:	cc 30       	cpi	r28, 0x0C	; 12
    2694:	19 f1       	breq	.+70     	; 0x26dc <send_cmd+0x74>
		deselect();
    2696:	c9 df       	rcall	.-110    	; 0x262a <deselect>
		if (!select()) return 0xFF;
    2698:	cf df       	rcall	.-98     	; 0x2638 <select>
    269a:	89 2b       	or	r24, r25
    269c:	e9 f0       	breq	.+58     	; 0x26d8 <send_cmd+0x70>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    269e:	8c 2f       	mov	r24, r28
    26a0:	80 64       	ori	r24, 0x40	; 64
    26a2:	c0 df       	rcall	.-128    	; 0x2624 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    26a4:	8f 2d       	mov	r24, r15
    26a6:	be df       	rcall	.-132    	; 0x2624 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    26a8:	80 2f       	mov	r24, r16
    26aa:	bc df       	rcall	.-136    	; 0x2624 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    26ac:	81 2f       	mov	r24, r17
    26ae:	ba df       	rcall	.-140    	; 0x2624 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    26b0:	8d 2f       	mov	r24, r29
    26b2:	b8 df       	rcall	.-144    	; 0x2624 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    26b4:	cc 23       	and	r28, r28
    26b6:	01 f1       	breq	.+64     	; 0x26f8 <send_cmd+0x90>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    26b8:	c8 30       	cpi	r28, 0x08	; 8
    26ba:	d9 f0       	breq	.+54     	; 0x26f2 <send_cmd+0x8a>
	xchg_spi(n);
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	b2 df       	rcall	.-156    	; 0x2624 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    26c0:	cc 30       	cpi	r28, 0x0C	; 12
    26c2:	11 f4       	brne	.+4      	; 0x26c8 <send_cmd+0x60>
    26c4:	8f ef       	ldi	r24, 0xFF	; 255
    26c6:	ae df       	rcall	.-164    	; 0x2624 <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    26c8:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    26ca:	8f ef       	ldi	r24, 0xFF	; 255
    26cc:	ab df       	rcall	.-170    	; 0x2624 <xchg_spi>
	while ((res & 0x80) && --n);
    26ce:	88 23       	and	r24, r24
    26d0:	b4 f4       	brge	.+44     	; 0x26fe <send_cmd+0x96>
    26d2:	c1 50       	subi	r28, 0x01	; 1
    26d4:	d1 f7       	brne	.-12     	; 0x26ca <send_cmd+0x62>
    26d6:	13 c0       	rjmp	.+38     	; 0x26fe <send_cmd+0x96>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    26d8:	8f ef       	ldi	r24, 0xFF	; 255
    26da:	11 c0       	rjmp	.+34     	; 0x26fe <send_cmd+0x96>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    26dc:	8c e4       	ldi	r24, 0x4C	; 76
    26de:	a2 df       	rcall	.-188    	; 0x2624 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    26e0:	8f 2d       	mov	r24, r15
    26e2:	a0 df       	rcall	.-192    	; 0x2624 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    26e4:	80 2f       	mov	r24, r16
    26e6:	9e df       	rcall	.-196    	; 0x2624 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    26e8:	81 2f       	mov	r24, r17
    26ea:	9c df       	rcall	.-200    	; 0x2624 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    26ec:	8d 2f       	mov	r24, r29
    26ee:	9a df       	rcall	.-204    	; 0x2624 <xchg_spi>
    26f0:	e5 cf       	rjmp	.-54     	; 0x26bc <send_cmd+0x54>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    26f2:	87 e8       	ldi	r24, 0x87	; 135
    26f4:	97 df       	rcall	.-210    	; 0x2624 <xchg_spi>
    26f6:	e8 cf       	rjmp	.-48     	; 0x26c8 <send_cmd+0x60>
    26f8:	85 e9       	ldi	r24, 0x95	; 149
    26fa:	94 df       	rcall	.-216    	; 0x2624 <xchg_spi>
    26fc:	e5 cf       	rjmp	.-54     	; 0x26c8 <send_cmd+0x60>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	1f 91       	pop	r17
    2704:	0f 91       	pop	r16
    2706:	ff 90       	pop	r15
    2708:	08 95       	ret

0000270a <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    270a:	ef 92       	push	r14
    270c:	ff 92       	push	r15
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	e8 2e       	mov	r14, r24
    2718:	f9 2e       	mov	r15, r25
    271a:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    271c:	24 e1       	ldi	r18, 0x14	; 20
    271e:	20 93 02 22 	sts	0x2202, r18
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    2722:	8f ef       	ldi	r24, 0xFF	; 255
    2724:	7f df       	rcall	.-258    	; 0x2624 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    2726:	8f 3f       	cpi	r24, 0xFF	; 255
    2728:	29 f4       	brne	.+10     	; 0x2734 <rcvr_datablock+0x2a>
    272a:	20 91 02 22 	lds	r18, 0x2202
    272e:	21 11       	cpse	r18, r1
    2730:	f8 cf       	rjmp	.-16     	; 0x2722 <rcvr_datablock+0x18>
    2732:	19 c0       	rjmp	.+50     	; 0x2766 <rcvr_datablock+0x5c>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    2734:	8e 3f       	cpi	r24, 0xFE	; 254
    2736:	d1 f4       	brne	.+52     	; 0x276c <rcvr_datablock+0x62>
    2738:	ce 2d       	mov	r28, r14
    273a:	df 2d       	mov	r29, r15
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    273c:	8f ef       	ldi	r24, 0xFF	; 255
    273e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <spi_wr_rd>
    2742:	88 83       	st	Y, r24
		*p++ = spi_wr_rd(0xff);
    2744:	8f ef       	ldi	r24, 0xFF	; 255
    2746:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <spi_wr_rd>
    274a:	89 83       	std	Y+1, r24	; 0x01
		
	} while (cnt -= 2);
    274c:	02 50       	subi	r16, 0x02	; 2
    274e:	11 09       	sbc	r17, r1
    2750:	22 96       	adiw	r28, 0x02	; 2
    2752:	01 15       	cp	r16, r1
    2754:	11 05       	cpc	r17, r1
    2756:	91 f7       	brne	.-28     	; 0x273c <rcvr_datablock+0x32>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    2758:	8f ef       	ldi	r24, 0xFF	; 255
    275a:	64 df       	rcall	.-312    	; 0x2624 <xchg_spi>
	xchg_spi(0xFF);
    275c:	8f ef       	ldi	r24, 0xFF	; 255
    275e:	62 df       	rcall	.-316    	; 0x2624 <xchg_spi>

	return 1;						/* Return with success */
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	05 c0       	rjmp	.+10     	; 0x2770 <rcvr_datablock+0x66>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	02 c0       	rjmp	.+4      	; 0x2770 <rcvr_datablock+0x66>
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	1f 91       	pop	r17
    2776:	0f 91       	pop	r16
    2778:	ff 90       	pop	r15
    277a:	ef 90       	pop	r14
    277c:	08 95       	ret

0000277e <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    277e:	0f 93       	push	r16
    2780:	1f 93       	push	r17
    2782:	cf 93       	push	r28
    2784:	df 93       	push	r29
    2786:	8c 01       	movw	r16, r24
    2788:	c6 2f       	mov	r28, r22
	UINT wt			/* Timeout [ms] */
)
{
	BYTE d;

	Timer2 = wt / 10;
    278a:	92 e3       	ldi	r25, 0x32	; 50
    278c:	90 93 01 22 	sts	0x2201, r25
	do
		d = xchg_spi(0xFF);
    2790:	8f ef       	ldi	r24, 0xFF	; 255
    2792:	48 df       	rcall	.-368    	; 0x2624 <xchg_spi>
	while (d != 0xFF && Timer2);
    2794:	8f 3f       	cpi	r24, 0xFF	; 255
    2796:	29 f0       	breq	.+10     	; 0x27a2 <xmit_datablock+0x24>
    2798:	90 91 01 22 	lds	r25, 0x2201
    279c:	91 11       	cpse	r25, r1
    279e:	f8 cf       	rjmp	.-16     	; 0x2790 <xmit_datablock+0x12>
    27a0:	1e c0       	rjmp	.+60     	; 0x27de <xmit_datablock+0x60>
	BYTE resp;


	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
    27a2:	8c 2f       	mov	r24, r28
    27a4:	3f df       	rcall	.-386    	; 0x2624 <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
    27a6:	cd 3f       	cpi	r28, 0xFD	; 253
    27a8:	e9 f0       	breq	.+58     	; 0x27e4 <xmit_datablock+0x66>
    27aa:	e8 01       	movw	r28, r16
    27ac:	1e 5f       	subi	r17, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		spi_wr_rd(*p++);
    27ae:	88 81       	ld	r24, Y
    27b0:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <spi_wr_rd>
		spi_wr_rd(*p++);
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <spi_wr_rd>
    27ba:	22 96       	adiw	r28, 0x02	; 2
		
	} while (cnt -= 2);
    27bc:	c0 17       	cp	r28, r16
    27be:	d1 07       	cpc	r29, r17
    27c0:	b1 f7       	brne	.-20     	; 0x27ae <xmit_datablock+0x30>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    27c2:	8f ef       	ldi	r24, 0xFF	; 255
    27c4:	2f df       	rcall	.-418    	; 0x2624 <xchg_spi>
		xchg_spi(0xFF);
    27c6:	8f ef       	ldi	r24, 0xFF	; 255
    27c8:	2d df       	rcall	.-422    	; 0x2624 <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    27ca:	8f ef       	ldi	r24, 0xFF	; 255
    27cc:	2b df       	rcall	.-426    	; 0x2624 <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    27ce:	28 2f       	mov	r18, r24
    27d0:	2f 71       	andi	r18, 0x1F	; 31
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	25 30       	cpi	r18, 0x05	; 5
    27d8:	39 f0       	breq	.+14     	; 0x27e8 <xmit_datablock+0x6a>
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	05 c0       	rjmp	.+10     	; 0x27e8 <xmit_datablock+0x6a>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <xmit_datablock+0x6a>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
}
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	1f 91       	pop	r17
    27ee:	0f 91       	pop	r16
    27f0:	08 95       	ret

000027f2 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    27f2:	ef 92       	push	r14
    27f4:	ff 92       	push	r15
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <disk_initialize+0xe>
    2800:	00 d0       	rcall	.+0      	; 0x2802 <disk_initialize+0x10>
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    2806:	81 11       	cpse	r24, r1
    2808:	9c c0       	rjmp	.+312    	; 0x2942 <disk_initialize+0x150>

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    280a:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <spi_off>
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    280e:	80 91 04 20 	lds	r24, 0x2004
    2812:	81 ff       	sbrs	r24, 1
    2814:	03 c0       	rjmp	.+6      	; 0x281c <disk_initialize+0x2a>
    2816:	80 91 04 20 	lds	r24, 0x2004
    281a:	9e c0       	rjmp	.+316    	; 0x2958 <disk_initialize+0x166>
	//Used to check for a timeout, not needed
	//TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
	//TCC1.PER = F_CPU/DIVIDER;
	//TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
	
	spi_on();
    281c:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <spi_on>

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    2820:	82 ed       	ldi	r24, 0xD2	; 210
    2822:	80 93 c0 08 	sts	0x08C0, r24
    2826:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    2828:	8f ef       	ldi	r24, 0xFF	; 255
    282a:	fc de       	rcall	.-520    	; 0x2624 <xchg_spi>
    282c:	11 50       	subi	r17, 0x01	; 1
    282e:	e1 f7       	brne	.-8      	; 0x2828 <disk_initialize+0x36>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    2830:	40 e0       	ldi	r20, 0x00	; 0
    2832:	50 e0       	ldi	r21, 0x00	; 0
    2834:	ba 01       	movw	r22, r20
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	17 df       	rcall	.-466    	; 0x2668 <send_cmd>
    283a:	81 30       	cpi	r24, 0x01	; 1
    283c:	09 f0       	breq	.+2      	; 0x2840 <disk_initialize+0x4e>
    283e:	88 c0       	rjmp	.+272    	; 0x2950 <disk_initialize+0x15e>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    2840:	84 e6       	ldi	r24, 0x64	; 100
    2842:	80 93 02 22 	sts	0x2202, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    2846:	4a ea       	ldi	r20, 0xAA	; 170
    2848:	51 e0       	ldi	r21, 0x01	; 1
    284a:	60 e0       	ldi	r22, 0x00	; 0
    284c:	70 e0       	ldi	r23, 0x00	; 0
    284e:	88 e0       	ldi	r24, 0x08	; 8
    2850:	0b df       	rcall	.-490    	; 0x2668 <send_cmd>
    2852:	81 30       	cpi	r24, 0x01	; 1
    2854:	09 f0       	breq	.+2      	; 0x2858 <disk_initialize+0x66>
    2856:	3f c0       	rjmp	.+126    	; 0x28d6 <disk_initialize+0xe4>
    2858:	7e 01       	movw	r14, r28
    285a:	85 e0       	ldi	r24, 0x05	; 5
    285c:	e8 0e       	add	r14, r24
    285e:	f1 1c       	adc	r15, r1
    2860:	8e 01       	movw	r16, r28
    2862:	0f 5f       	subi	r16, 0xFF	; 255
    2864:	1f 4f       	sbci	r17, 0xFF	; 255
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    2866:	8f ef       	ldi	r24, 0xFF	; 255
    2868:	dd de       	rcall	.-582    	; 0x2624 <xchg_spi>
    286a:	f8 01       	movw	r30, r16
    286c:	81 93       	st	Z+, r24
    286e:	8f 01       	movw	r16, r30
    2870:	ee 15       	cp	r30, r14
    2872:	ff 05       	cpc	r31, r15
    2874:	c1 f7       	brne	.-16     	; 0x2866 <disk_initialize+0x74>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	81 30       	cpi	r24, 0x01	; 1
    287a:	09 f0       	breq	.+2      	; 0x287e <disk_initialize+0x8c>
    287c:	69 c0       	rjmp	.+210    	; 0x2950 <disk_initialize+0x15e>
    287e:	8c 81       	ldd	r24, Y+4	; 0x04
    2880:	8a 3a       	cpi	r24, 0xAA	; 170
    2882:	09 f0       	breq	.+2      	; 0x2886 <disk_initialize+0x94>
    2884:	65 c0       	rjmp	.+202    	; 0x2950 <disk_initialize+0x15e>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    2886:	80 91 02 22 	lds	r24, 0x2202
    288a:	88 23       	and	r24, r24
    288c:	41 f0       	breq	.+16     	; 0x289e <disk_initialize+0xac>
    288e:	40 e0       	ldi	r20, 0x00	; 0
    2890:	50 e0       	ldi	r21, 0x00	; 0
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	70 e4       	ldi	r23, 0x40	; 64
    2896:	89 ea       	ldi	r24, 0xA9	; 169
    2898:	e7 de       	rcall	.-562    	; 0x2668 <send_cmd>
    289a:	81 11       	cpse	r24, r1
    289c:	f4 cf       	rjmp	.-24     	; 0x2886 <disk_initialize+0x94>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    289e:	80 91 02 22 	lds	r24, 0x2202
    28a2:	88 23       	and	r24, r24
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <disk_initialize+0xb6>
    28a6:	54 c0       	rjmp	.+168    	; 0x2950 <disk_initialize+0x15e>
    28a8:	40 e0       	ldi	r20, 0x00	; 0
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	ba 01       	movw	r22, r20
    28ae:	8a e3       	ldi	r24, 0x3A	; 58
    28b0:	db de       	rcall	.-586    	; 0x2668 <send_cmd>
    28b2:	81 11       	cpse	r24, r1
    28b4:	4d c0       	rjmp	.+154    	; 0x2950 <disk_initialize+0x15e>
    28b6:	8e 01       	movw	r16, r28
    28b8:	0f 5f       	subi	r16, 0xFF	; 255
    28ba:	1f 4f       	sbci	r17, 0xFF	; 255
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    28bc:	8f ef       	ldi	r24, 0xFF	; 255
    28be:	b2 de       	rcall	.-668    	; 0x2624 <xchg_spi>
    28c0:	f8 01       	movw	r30, r16
    28c2:	81 93       	st	Z+, r24
    28c4:	8f 01       	movw	r16, r30
    28c6:	ee 16       	cp	r14, r30
    28c8:	ff 06       	cpc	r15, r31
    28ca:	c1 f7       	brne	.-16     	; 0x28bc <disk_initialize+0xca>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	86 fd       	sbrc	r24, 6
    28d0:	3a c0       	rjmp	.+116    	; 0x2946 <disk_initialize+0x154>
    28d2:	84 e0       	ldi	r24, 0x04	; 4
    28d4:	39 c0       	rjmp	.+114    	; 0x2948 <disk_initialize+0x156>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    28d6:	40 e0       	ldi	r20, 0x00	; 0
    28d8:	50 e0       	ldi	r21, 0x00	; 0
    28da:	ba 01       	movw	r22, r20
    28dc:	89 ea       	ldi	r24, 0xA9	; 169
    28de:	c4 de       	rcall	.-632    	; 0x2668 <send_cmd>
    28e0:	82 30       	cpi	r24, 0x02	; 2
    28e2:	18 f4       	brcc	.+6      	; 0x28ea <disk_initialize+0xf8>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    28e4:	02 e0       	ldi	r16, 0x02	; 2
    28e6:	19 ea       	ldi	r17, 0xA9	; 169
    28e8:	02 c0       	rjmp	.+4      	; 0x28ee <disk_initialize+0xfc>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    28ea:	01 e0       	ldi	r16, 0x01	; 1
    28ec:	11 e0       	ldi	r17, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    28ee:	90 91 02 22 	lds	r25, 0x2202
    28f2:	99 23       	and	r25, r25
    28f4:	39 f0       	breq	.+14     	; 0x2904 <disk_initialize+0x112>
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	ba 01       	movw	r22, r20
    28fc:	81 2f       	mov	r24, r17
    28fe:	b4 de       	rcall	.-664    	; 0x2668 <send_cmd>
    2900:	81 11       	cpse	r24, r1
    2902:	f5 cf       	rjmp	.-22     	; 0x28ee <disk_initialize+0xfc>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    2904:	80 91 02 22 	lds	r24, 0x2202
    2908:	88 23       	and	r24, r24
    290a:	11 f1       	breq	.+68     	; 0x2950 <disk_initialize+0x15e>
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	52 e0       	ldi	r21, 0x02	; 2
    2910:	60 e0       	ldi	r22, 0x00	; 0
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	80 e1       	ldi	r24, 0x10	; 16
    2916:	a8 de       	rcall	.-688    	; 0x2668 <send_cmd>
    2918:	81 11       	cpse	r24, r1
    291a:	1a c0       	rjmp	.+52     	; 0x2950 <disk_initialize+0x15e>
				ty = 0;
		}
	}
	CardType = ty;
    291c:	00 93 00 22 	sts	0x2200, r16
	deselect();
    2920:	84 de       	rcall	.-760    	; 0x262a <deselect>

	if (ty) {			/* Initialization succeded */
    2922:	00 23       	and	r16, r16
    2924:	49 f0       	breq	.+18     	; 0x2938 <disk_initialize+0x146>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    2926:	80 91 04 20 	lds	r24, 0x2004
    292a:	8e 7f       	andi	r24, 0xFE	; 254
    292c:	80 93 04 20 	sts	0x2004, r24
		FCLK_FAST();
    2930:	80 ed       	ldi	r24, 0xD0	; 208
    2932:	80 93 c0 08 	sts	0x08C0, r24
    2936:	02 c0       	rjmp	.+4      	; 0x293c <disk_initialize+0x14a>

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    2938:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <spi_off>
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    293c:	80 91 04 20 	lds	r24, 0x2004
    2940:	0b c0       	rjmp	.+22     	; 0x2958 <disk_initialize+0x166>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	09 c0       	rjmp	.+18     	; 0x2958 <disk_initialize+0x166>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2946:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    2948:	80 93 00 22 	sts	0x2200, r24
	deselect();
    294c:	6e de       	rcall	.-804    	; 0x262a <deselect>
    294e:	eb cf       	rjmp	.-42     	; 0x2926 <disk_initialize+0x134>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    2950:	10 92 00 22 	sts	0x2200, r1
	deselect();
    2954:	6a de       	rcall	.-812    	; 0x262a <deselect>
    2956:	f0 cf       	rjmp	.-32     	; 0x2938 <disk_initialize+0x146>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    2958:	24 96       	adiw	r28, 0x04	; 4
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	df 91       	pop	r29
    2960:	cf 91       	pop	r28
    2962:	1f 91       	pop	r17
    2964:	0f 91       	pop	r16
    2966:	ff 90       	pop	r15
    2968:	ef 90       	pop	r14
    296a:	08 95       	ret

0000296c <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    296c:	81 11       	cpse	r24, r1
    296e:	03 c0       	rjmp	.+6      	; 0x2976 <disk_status+0xa>
	return Stat;
    2970:	80 91 04 20 	lds	r24, 0x2004
    2974:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    2976:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    2978:	08 95       	ret

0000297a <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    297a:	ff 92       	push	r15
    297c:	0f 93       	push	r16
    297e:	1f 93       	push	r17
    2980:	cf 93       	push	r28
    2982:	df 93       	push	r29
    2984:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    2986:	81 11       	cpse	r24, r1
    2988:	41 c0       	rjmp	.+130    	; 0x2a0c <disk_read+0x92>
    298a:	01 15       	cp	r16, r1
    298c:	11 05       	cpc	r17, r1
    298e:	09 f4       	brne	.+2      	; 0x2992 <disk_read+0x18>
    2990:	3f c0       	rjmp	.+126    	; 0x2a10 <disk_read+0x96>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2992:	80 91 04 20 	lds	r24, 0x2004
    2996:	80 fd       	sbrc	r24, 0
    2998:	3d c0       	rjmp	.+122    	; 0x2a14 <disk_read+0x9a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    299a:	80 91 00 22 	lds	r24, 0x2200
    299e:	83 fd       	sbrc	r24, 3
    29a0:	09 c0       	rjmp	.+18     	; 0x29b4 <disk_read+0x3a>
    29a2:	01 2e       	mov	r0, r17
    29a4:	19 e0       	ldi	r17, 0x09	; 9
    29a6:	22 0f       	add	r18, r18
    29a8:	33 1f       	adc	r19, r19
    29aa:	44 1f       	adc	r20, r20
    29ac:	55 1f       	adc	r21, r21
    29ae:	1a 95       	dec	r17
    29b0:	d1 f7       	brne	.-12     	; 0x29a6 <disk_read+0x2c>
    29b2:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    29b4:	02 30       	cpi	r16, 0x02	; 2
    29b6:	11 05       	cpc	r17, r1
    29b8:	28 f0       	brcs	.+10     	; 0x29c4 <disk_read+0x4a>
    29ba:	0f 2e       	mov	r0, r31
    29bc:	f2 e1       	ldi	r31, 0x12	; 18
    29be:	ff 2e       	mov	r15, r31
    29c0:	f0 2d       	mov	r31, r0
    29c2:	04 c0       	rjmp	.+8      	; 0x29cc <disk_read+0x52>
    29c4:	0f 2e       	mov	r0, r31
    29c6:	f1 e1       	ldi	r31, 0x11	; 17
    29c8:	ff 2e       	mov	r15, r31
    29ca:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    29cc:	ba 01       	movw	r22, r20
    29ce:	a9 01       	movw	r20, r18
    29d0:	8f 2d       	mov	r24, r15
    29d2:	4a de       	rcall	.-876    	; 0x2668 <send_cmd>
    29d4:	81 11       	cpse	r24, r1
    29d6:	14 c0       	rjmp	.+40     	; 0x2a00 <disk_read+0x86>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    29d8:	60 e0       	ldi	r22, 0x00	; 0
    29da:	72 e0       	ldi	r23, 0x02	; 2
    29dc:	ce 01       	movw	r24, r28
    29de:	95 de       	rcall	.-726    	; 0x270a <rcvr_datablock>
    29e0:	89 2b       	or	r24, r25
    29e2:	31 f0       	breq	.+12     	; 0x29f0 <disk_read+0x76>
			buff += 512;
    29e4:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    29e6:	01 50       	subi	r16, 0x01	; 1
    29e8:	11 09       	sbc	r17, r1
    29ea:	01 15       	cp	r16, r1
    29ec:	11 05       	cpc	r17, r1
    29ee:	a1 f7       	brne	.-24     	; 0x29d8 <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    29f0:	82 e1       	ldi	r24, 0x12	; 18
    29f2:	f8 12       	cpse	r15, r24
    29f4:	05 c0       	rjmp	.+10     	; 0x2a00 <disk_read+0x86>
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	50 e0       	ldi	r21, 0x00	; 0
    29fa:	ba 01       	movw	r22, r20
    29fc:	8c e0       	ldi	r24, 0x0C	; 12
    29fe:	34 de       	rcall	.-920    	; 0x2668 <send_cmd>
	}
	deselect();
    2a00:	14 de       	rcall	.-984    	; 0x262a <deselect>

	return count ? RES_ERROR : RES_OK;
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	01 2b       	or	r16, r17
    2a06:	39 f4       	brne	.+14     	; 0x2a16 <disk_read+0x9c>
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	05 c0       	rjmp	.+10     	; 0x2a16 <disk_read+0x9c>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    2a0c:	84 e0       	ldi	r24, 0x04	; 4
    2a0e:	03 c0       	rjmp	.+6      	; 0x2a16 <disk_read+0x9c>
    2a10:	84 e0       	ldi	r24, 0x04	; 4
    2a12:	01 c0       	rjmp	.+2      	; 0x2a16 <disk_read+0x9c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2a14:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	1f 91       	pop	r17
    2a1c:	0f 91       	pop	r16
    2a1e:	ff 90       	pop	r15
    2a20:	08 95       	ret

00002a22 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    2a22:	cf 92       	push	r12
    2a24:	df 92       	push	r13
    2a26:	ef 92       	push	r14
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	cf 93       	push	r28
    2a30:	df 93       	push	r29
    2a32:	eb 01       	movw	r28, r22
    2a34:	69 01       	movw	r12, r18
    2a36:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    2a38:	81 11       	cpse	r24, r1
    2a3a:	53 c0       	rjmp	.+166    	; 0x2ae2 <disk_write+0xc0>
    2a3c:	01 15       	cp	r16, r1
    2a3e:	11 05       	cpc	r17, r1
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <disk_write+0x22>
    2a42:	51 c0       	rjmp	.+162    	; 0x2ae6 <disk_write+0xc4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2a44:	80 91 04 20 	lds	r24, 0x2004
    2a48:	80 fd       	sbrc	r24, 0
    2a4a:	4f c0       	rjmp	.+158    	; 0x2aea <disk_write+0xc8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    2a4c:	80 91 04 20 	lds	r24, 0x2004
    2a50:	82 fd       	sbrc	r24, 2
    2a52:	4d c0       	rjmp	.+154    	; 0x2aee <disk_write+0xcc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2a54:	80 91 00 22 	lds	r24, 0x2200
    2a58:	83 fd       	sbrc	r24, 3
    2a5a:	09 c0       	rjmp	.+18     	; 0x2a6e <disk_write+0x4c>
    2a5c:	0b 2e       	mov	r0, r27
    2a5e:	b9 e0       	ldi	r27, 0x09	; 9
    2a60:	cc 0c       	add	r12, r12
    2a62:	dd 1c       	adc	r13, r13
    2a64:	ee 1c       	adc	r14, r14
    2a66:	ff 1c       	adc	r15, r15
    2a68:	ba 95       	dec	r27
    2a6a:	d1 f7       	brne	.-12     	; 0x2a60 <disk_write+0x3e>
    2a6c:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    2a6e:	01 30       	cpi	r16, 0x01	; 1
    2a70:	11 05       	cpc	r17, r1
    2a72:	89 f4       	brne	.+34     	; 0x2a96 <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    2a74:	b7 01       	movw	r22, r14
    2a76:	a6 01       	movw	r20, r12
    2a78:	88 e1       	ldi	r24, 0x18	; 24
    2a7a:	f6 dd       	rcall	.-1044   	; 0x2668 <send_cmd>
    2a7c:	81 11       	cpse	r24, r1
    2a7e:	2b c0       	rjmp	.+86     	; 0x2ad6 <disk_write+0xb4>
			&& xmit_datablock(buff, 0xFE))
    2a80:	6e ef       	ldi	r22, 0xFE	; 254
    2a82:	ce 01       	movw	r24, r28
    2a84:	7c de       	rcall	.-776    	; 0x277e <xmit_datablock>
    2a86:	31 e0       	ldi	r19, 0x01	; 1
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	89 2b       	or	r24, r25
    2a8c:	09 f0       	breq	.+2      	; 0x2a90 <disk_write+0x6e>
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	03 2f       	mov	r16, r19
    2a92:	12 2f       	mov	r17, r18
    2a94:	20 c0       	rjmp	.+64     	; 0x2ad6 <disk_write+0xb4>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    2a96:	86 70       	andi	r24, 0x06	; 6
    2a98:	29 f0       	breq	.+10     	; 0x2aa4 <disk_write+0x82>
    2a9a:	a8 01       	movw	r20, r16
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	70 e0       	ldi	r23, 0x00	; 0
    2aa0:	87 e9       	ldi	r24, 0x97	; 151
    2aa2:	e2 dd       	rcall	.-1084   	; 0x2668 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    2aa4:	b7 01       	movw	r22, r14
    2aa6:	a6 01       	movw	r20, r12
    2aa8:	89 e1       	ldi	r24, 0x19	; 25
    2aaa:	de dd       	rcall	.-1092   	; 0x2668 <send_cmd>
    2aac:	81 11       	cpse	r24, r1
    2aae:	13 c0       	rjmp	.+38     	; 0x2ad6 <disk_write+0xb4>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    2ab0:	6c ef       	ldi	r22, 0xFC	; 252
    2ab2:	ce 01       	movw	r24, r28
    2ab4:	64 de       	rcall	.-824    	; 0x277e <xmit_datablock>
    2ab6:	89 2b       	or	r24, r25
    2ab8:	31 f0       	breq	.+12     	; 0x2ac6 <disk_write+0xa4>
				buff += 512;
    2aba:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    2abc:	01 50       	subi	r16, 0x01	; 1
    2abe:	11 09       	sbc	r17, r1
    2ac0:	01 15       	cp	r16, r1
    2ac2:	11 05       	cpc	r17, r1
    2ac4:	a9 f7       	brne	.-22     	; 0x2ab0 <disk_write+0x8e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    2ac6:	6d ef       	ldi	r22, 0xFD	; 253
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	58 de       	rcall	.-848    	; 0x277e <xmit_datablock>
    2ace:	89 2b       	or	r24, r25
    2ad0:	11 f4       	brne	.+4      	; 0x2ad6 <disk_write+0xb4>
				count = 1;
    2ad2:	01 e0       	ldi	r16, 0x01	; 1
    2ad4:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    2ad6:	a9 dd       	rcall	.-1198   	; 0x262a <deselect>

	return count ? RES_ERROR : RES_OK;
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	01 2b       	or	r16, r17
    2adc:	49 f4       	brne	.+18     	; 0x2af0 <disk_write+0xce>
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	07 c0       	rjmp	.+14     	; 0x2af0 <disk_write+0xce>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    2ae2:	84 e0       	ldi	r24, 0x04	; 4
    2ae4:	05 c0       	rjmp	.+10     	; 0x2af0 <disk_write+0xce>
    2ae6:	84 e0       	ldi	r24, 0x04	; 4
    2ae8:	03 c0       	rjmp	.+6      	; 0x2af0 <disk_write+0xce>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2aea:	83 e0       	ldi	r24, 0x03	; 3
    2aec:	01 c0       	rjmp	.+2      	; 0x2af0 <disk_write+0xce>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    2aee:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    2af0:	df 91       	pop	r29
    2af2:	cf 91       	pop	r28
    2af4:	1f 91       	pop	r17
    2af6:	0f 91       	pop	r16
    2af8:	ff 90       	pop	r15
    2afa:	ef 90       	pop	r14
    2afc:	df 90       	pop	r13
    2afe:	cf 90       	pop	r12
    2b00:	08 95       	ret

00002b02 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    2b02:	ef 92       	push	r14
    2b04:	ff 92       	push	r15
    2b06:	0f 93       	push	r16
    2b08:	1f 93       	push	r17
    2b0a:	cf 93       	push	r28
    2b0c:	df 93       	push	r29
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
    2b12:	60 97       	sbiw	r28, 0x10	; 16
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    2b1a:	81 11       	cpse	r24, r1
    2b1c:	83 c1       	rjmp	.+774    	; 0x2e24 <disk_ioctl+0x322>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2b1e:	80 91 04 20 	lds	r24, 0x2004
    2b22:	80 fd       	sbrc	r24, 0
    2b24:	81 c1       	rjmp	.+770    	; 0x2e28 <disk_ioctl+0x326>

	switch (cmd) {
    2b26:	06 2f       	mov	r16, r22
    2b28:	10 e0       	ldi	r17, 0x00	; 0
    2b2a:	07 33       	cpi	r16, 0x37	; 55
    2b2c:	11 05       	cpc	r17, r1
    2b2e:	08 f0       	brcs	.+2      	; 0x2b32 <disk_ioctl+0x30>
    2b30:	5f c1       	rjmp	.+702    	; 0x2df0 <disk_ioctl+0x2ee>
    2b32:	f8 01       	movw	r30, r16
    2b34:	e2 50       	subi	r30, 0x02	; 2
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    2b3c:	7d dd       	rcall	.-1286   	; 0x2638 <select>
    2b3e:	11 e0       	ldi	r17, 0x01	; 1
    2b40:	89 2b       	or	r24, r25
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <disk_ioctl+0x44>
    2b44:	6c c1       	rjmp	.+728    	; 0x2e1e <disk_ioctl+0x31c>
    2b46:	10 e0       	ldi	r17, 0x00	; 0
    2b48:	6a c1       	rjmp	.+724    	; 0x2e1e <disk_ioctl+0x31c>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	50 e0       	ldi	r21, 0x00	; 0
    2b4e:	ba 01       	movw	r22, r20
    2b50:	89 e0       	ldi	r24, 0x09	; 9
    2b52:	8a dd       	rcall	.-1260   	; 0x2668 <send_cmd>
    2b54:	81 11       	cpse	r24, r1
    2b56:	4e c1       	rjmp	.+668    	; 0x2df4 <disk_ioctl+0x2f2>
    2b58:	60 e1       	ldi	r22, 0x10	; 16
    2b5a:	70 e0       	ldi	r23, 0x00	; 0
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	01 96       	adiw	r24, 0x01	; 1
    2b60:	d4 dd       	rcall	.-1112   	; 0x270a <rcvr_datablock>
    2b62:	89 2b       	or	r24, r25
    2b64:	09 f4       	brne	.+2      	; 0x2b68 <disk_ioctl+0x66>
    2b66:	48 c1       	rjmp	.+656    	; 0x2df8 <disk_ioctl+0x2f6>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	82 95       	swap	r24
    2b6c:	86 95       	lsr	r24
    2b6e:	86 95       	lsr	r24
    2b70:	83 70       	andi	r24, 0x03	; 3
    2b72:	81 30       	cpi	r24, 0x01	; 1
    2b74:	31 f5       	brne	.+76     	; 0x2bc2 <disk_ioctl+0xc0>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    2b76:	88 85       	ldd	r24, Y+8	; 0x08
    2b78:	8f 73       	andi	r24, 0x3F	; 63
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	a0 e0       	ldi	r26, 0x00	; 0
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	dc 01       	movw	r26, r24
    2b82:	99 27       	eor	r25, r25
    2b84:	88 27       	eor	r24, r24
    2b86:	01 96       	adiw	r24, 0x01	; 1
    2b88:	a1 1d       	adc	r26, r1
    2b8a:	b1 1d       	adc	r27, r1
    2b8c:	29 85       	ldd	r18, Y+9	; 0x09
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	32 2f       	mov	r19, r18
    2b92:	22 27       	eor	r18, r18
    2b94:	4a 85       	ldd	r20, Y+10	; 0x0a
    2b96:	24 0f       	add	r18, r20
    2b98:	31 1d       	adc	r19, r1
    2b9a:	82 0f       	add	r24, r18
    2b9c:	93 1f       	adc	r25, r19
    2b9e:	a1 1d       	adc	r26, r1
    2ba0:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = csize << 10;
    2ba2:	07 2e       	mov	r0, r23
    2ba4:	7a e0       	ldi	r23, 0x0A	; 10
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	aa 1f       	adc	r26, r26
    2bac:	bb 1f       	adc	r27, r27
    2bae:	7a 95       	dec	r23
    2bb0:	d1 f7       	brne	.-12     	; 0x2ba6 <disk_ioctl+0xa4>
    2bb2:	70 2d       	mov	r23, r0
    2bb4:	f7 01       	movw	r30, r14
    2bb6:	80 83       	st	Z, r24
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	a2 83       	std	Z+2, r26	; 0x02
    2bbc:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    2bbe:	10 e0       	ldi	r17, 0x00	; 0
    2bc0:	2e c1       	rjmp	.+604    	; 0x2e1e <disk_ioctl+0x31c>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    2bc2:	49 85       	ldd	r20, Y+9	; 0x09
    2bc4:	42 95       	swap	r20
    2bc6:	46 95       	lsr	r20
    2bc8:	46 95       	lsr	r20
    2bca:	43 70       	andi	r20, 0x03	; 3
    2bcc:	88 85       	ldd	r24, Y+8	; 0x08
    2bce:	50 e0       	ldi	r21, 0x00	; 0
    2bd0:	f4 e0       	ldi	r31, 0x04	; 4
    2bd2:	8f 9f       	mul	r24, r31
    2bd4:	40 0d       	add	r20, r0
    2bd6:	51 1d       	adc	r21, r1
    2bd8:	11 24       	eor	r1, r1
    2bda:	4f 5f       	subi	r20, 0xFF	; 255
    2bdc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bde:	8f 81       	ldd	r24, Y+7	; 0x07
    2be0:	83 70       	andi	r24, 0x03	; 3
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	98 2f       	mov	r25, r24
    2be6:	88 27       	eor	r24, r24
    2be8:	99 0f       	add	r25, r25
    2bea:	99 0f       	add	r25, r25
    2bec:	48 0f       	add	r20, r24
    2bee:	59 1f       	adc	r21, r25
    2bf0:	60 e0       	ldi	r22, 0x00	; 0
    2bf2:	70 e0       	ldi	r23, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    2bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf6:	9f 70       	andi	r25, 0x0F	; 15
    2bf8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bfa:	88 1f       	adc	r24, r24
    2bfc:	88 27       	eor	r24, r24
    2bfe:	88 1f       	adc	r24, r24
    2c00:	98 0f       	add	r25, r24
    2c02:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c04:	83 70       	andi	r24, 0x03	; 3
    2c06:	88 0f       	add	r24, r24
    2c08:	89 0f       	add	r24, r25
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    2c0a:	87 50       	subi	r24, 0x07	; 7
    2c0c:	8a 01       	movw	r16, r20
    2c0e:	9b 01       	movw	r18, r22
    2c10:	04 c0       	rjmp	.+8      	; 0x2c1a <disk_ioctl+0x118>
    2c12:	00 0f       	add	r16, r16
    2c14:	11 1f       	adc	r17, r17
    2c16:	22 1f       	adc	r18, r18
    2c18:	33 1f       	adc	r19, r19
    2c1a:	8a 95       	dec	r24
    2c1c:	d2 f7       	brpl	.-12     	; 0x2c12 <disk_ioctl+0x110>
    2c1e:	f7 01       	movw	r30, r14
    2c20:	00 83       	st	Z, r16
    2c22:	11 83       	std	Z+1, r17	; 0x01
    2c24:	22 83       	std	Z+2, r18	; 0x02
    2c26:	33 83       	std	Z+3, r19	; 0x03
			}
			res = RES_OK;
    2c28:	10 e0       	ldi	r17, 0x00	; 0
    2c2a:	f9 c0       	rjmp	.+498    	; 0x2e1e <disk_ioctl+0x31c>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    2c2c:	80 91 00 22 	lds	r24, 0x2200
    2c30:	82 ff       	sbrs	r24, 2
    2c32:	2d c0       	rjmp	.+90     	; 0x2c8e <disk_ioctl+0x18c>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    2c34:	40 e0       	ldi	r20, 0x00	; 0
    2c36:	50 e0       	ldi	r21, 0x00	; 0
    2c38:	ba 01       	movw	r22, r20
    2c3a:	8d e8       	ldi	r24, 0x8D	; 141
    2c3c:	15 dd       	rcall	.-1494   	; 0x2668 <send_cmd>
    2c3e:	81 11       	cpse	r24, r1
    2c40:	dd c0       	rjmp	.+442    	; 0x2dfc <disk_ioctl+0x2fa>
				xchg_spi(0xFF);
    2c42:	8f ef       	ldi	r24, 0xFF	; 255
    2c44:	ef dc       	rcall	.-1570   	; 0x2624 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    2c46:	60 e1       	ldi	r22, 0x10	; 16
    2c48:	70 e0       	ldi	r23, 0x00	; 0
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	01 96       	adiw	r24, 0x01	; 1
    2c4e:	5d dd       	rcall	.-1350   	; 0x270a <rcvr_datablock>
    2c50:	89 2b       	or	r24, r25
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <disk_ioctl+0x154>
    2c54:	d5 c0       	rjmp	.+426    	; 0x2e00 <disk_ioctl+0x2fe>
    2c56:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    2c58:	8f ef       	ldi	r24, 0xFF	; 255
    2c5a:	e4 dc       	rcall	.-1592   	; 0x2624 <xchg_spi>
    2c5c:	11 50       	subi	r17, 0x01	; 1
    2c5e:	e1 f7       	brne	.-8      	; 0x2c58 <disk_ioctl+0x156>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    2c60:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c62:	82 95       	swap	r24
    2c64:	8f 70       	andi	r24, 0x0F	; 15
    2c66:	40 e1       	ldi	r20, 0x10	; 16
    2c68:	50 e0       	ldi	r21, 0x00	; 0
    2c6a:	60 e0       	ldi	r22, 0x00	; 0
    2c6c:	70 e0       	ldi	r23, 0x00	; 0
    2c6e:	8a 01       	movw	r16, r20
    2c70:	9b 01       	movw	r18, r22
    2c72:	04 c0       	rjmp	.+8      	; 0x2c7c <disk_ioctl+0x17a>
    2c74:	00 0f       	add	r16, r16
    2c76:	11 1f       	adc	r17, r17
    2c78:	22 1f       	adc	r18, r18
    2c7a:	33 1f       	adc	r19, r19
    2c7c:	8a 95       	dec	r24
    2c7e:	d2 f7       	brpl	.-12     	; 0x2c74 <disk_ioctl+0x172>
    2c80:	f7 01       	movw	r30, r14
    2c82:	00 83       	st	Z, r16
    2c84:	11 83       	std	Z+1, r17	; 0x01
    2c86:	22 83       	std	Z+2, r18	; 0x02
    2c88:	33 83       	std	Z+3, r19	; 0x03
					res = RES_OK;
    2c8a:	10 e0       	ldi	r17, 0x00	; 0
    2c8c:	c8 c0       	rjmp	.+400    	; 0x2e1e <disk_ioctl+0x31c>
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    2c8e:	40 e0       	ldi	r20, 0x00	; 0
    2c90:	50 e0       	ldi	r21, 0x00	; 0
    2c92:	ba 01       	movw	r22, r20
    2c94:	89 e0       	ldi	r24, 0x09	; 9
    2c96:	e8 dc       	rcall	.-1584   	; 0x2668 <send_cmd>
    2c98:	81 11       	cpse	r24, r1
    2c9a:	b4 c0       	rjmp	.+360    	; 0x2e04 <disk_ioctl+0x302>
    2c9c:	60 e1       	ldi	r22, 0x10	; 16
    2c9e:	70 e0       	ldi	r23, 0x00	; 0
    2ca0:	ce 01       	movw	r24, r28
    2ca2:	01 96       	adiw	r24, 0x01	; 1
    2ca4:	32 dd       	rcall	.-1436   	; 0x270a <rcvr_datablock>
    2ca6:	89 2b       	or	r24, r25
    2ca8:	09 f4       	brne	.+2      	; 0x2cac <disk_ioctl+0x1aa>
    2caa:	ae c0       	rjmp	.+348    	; 0x2e08 <disk_ioctl+0x306>
				if (CardType & CT_SD1) {	/* SDv1 */
    2cac:	80 91 00 22 	lds	r24, 0x2200
    2cb0:	81 ff       	sbrs	r24, 1
    2cb2:	20 c0       	rjmp	.+64     	; 0x2cf4 <disk_ioctl+0x1f2>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    2cb4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cb6:	88 1f       	adc	r24, r24
    2cb8:	88 27       	eor	r24, r24
    2cba:	88 1f       	adc	r24, r24
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2cc2:	2f 73       	andi	r18, 0x3F	; 63
    2cc4:	82 0f       	add	r24, r18
    2cc6:	91 1d       	adc	r25, r1
    2cc8:	82 0f       	add	r24, r18
    2cca:	91 1d       	adc	r25, r1
    2ccc:	2e 85       	ldd	r18, Y+14	; 0x0e
    2cce:	22 95       	swap	r18
    2cd0:	26 95       	lsr	r18
    2cd2:	26 95       	lsr	r18
    2cd4:	23 70       	andi	r18, 0x03	; 3
    2cd6:	21 50       	subi	r18, 0x01	; 1
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <disk_ioctl+0x1dc>
    2cda:	88 0f       	add	r24, r24
    2cdc:	99 1f       	adc	r25, r25
    2cde:	2a 95       	dec	r18
    2ce0:	e2 f7       	brpl	.-8      	; 0x2cda <disk_ioctl+0x1d8>
    2ce2:	a0 e0       	ldi	r26, 0x00	; 0
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	f7 01       	movw	r30, r14
    2ce8:	80 83       	st	Z, r24
    2cea:	91 83       	std	Z+1, r25	; 0x01
    2cec:	a2 83       	std	Z+2, r26	; 0x02
    2cee:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    2cf0:	10 e0       	ldi	r17, 0x00	; 0
    2cf2:	95 c0       	rjmp	.+298    	; 0x2e1e <disk_ioctl+0x31c>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    2cf4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cf6:	98 2f       	mov	r25, r24
    2cf8:	93 70       	andi	r25, 0x03	; 3
    2cfa:	82 95       	swap	r24
    2cfc:	86 95       	lsr	r24
    2cfe:	87 70       	andi	r24, 0x07	; 7
    2d00:	48 2f       	mov	r20, r24
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	f8 e0       	ldi	r31, 0x08	; 8
    2d06:	9f 9f       	mul	r25, r31
    2d08:	40 0d       	add	r20, r0
    2d0a:	51 1d       	adc	r21, r1
    2d0c:	11 24       	eor	r1, r1
    2d0e:	4f 5f       	subi	r20, 0xFF	; 255
    2d10:	5f 4f       	sbci	r21, 0xFF	; 255
    2d12:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d14:	2c 77       	andi	r18, 0x7C	; 124
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	35 95       	asr	r19
    2d1a:	27 95       	ror	r18
    2d1c:	35 95       	asr	r19
    2d1e:	27 95       	ror	r18
    2d20:	2f 5f       	subi	r18, 0xFF	; 255
    2d22:	3f 4f       	sbci	r19, 0xFF	; 255
    2d24:	42 9f       	mul	r20, r18
    2d26:	c0 01       	movw	r24, r0
    2d28:	43 9f       	mul	r20, r19
    2d2a:	90 0d       	add	r25, r0
    2d2c:	52 9f       	mul	r21, r18
    2d2e:	90 0d       	add	r25, r0
    2d30:	11 24       	eor	r1, r1
    2d32:	a0 e0       	ldi	r26, 0x00	; 0
    2d34:	b0 e0       	ldi	r27, 0x00	; 0
    2d36:	f7 01       	movw	r30, r14
    2d38:	80 83       	st	Z, r24
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	a2 83       	std	Z+2, r26	; 0x02
    2d3e:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    2d40:	10 e0       	ldi	r17, 0x00	; 0
    2d42:	6d c0       	rjmp	.+218    	; 0x2e1e <disk_ioctl+0x31c>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    2d44:	80 91 00 22 	lds	r24, 0x2200
    2d48:	fa 01       	movw	r30, r20
    2d4a:	80 83       	st	Z, r24
		res = RES_OK;
    2d4c:	10 e0       	ldi	r17, 0x00	; 0
		break;
    2d4e:	67 c0       	rjmp	.+206    	; 0x2e1e <disk_ioctl+0x31c>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	50 e0       	ldi	r21, 0x00	; 0
    2d54:	ba 01       	movw	r22, r20
    2d56:	89 e0       	ldi	r24, 0x09	; 9
    2d58:	87 dc       	rcall	.-1778   	; 0x2668 <send_cmd>
    2d5a:	81 11       	cpse	r24, r1
    2d5c:	57 c0       	rjmp	.+174    	; 0x2e0c <disk_ioctl+0x30a>
			&& rcvr_datablock(ptr, 16))
    2d5e:	60 e1       	ldi	r22, 0x10	; 16
    2d60:	70 e0       	ldi	r23, 0x00	; 0
    2d62:	c7 01       	movw	r24, r14
    2d64:	d2 dc       	rcall	.-1628   	; 0x270a <rcvr_datablock>
    2d66:	11 e0       	ldi	r17, 0x01	; 1
    2d68:	89 2b       	or	r24, r25
    2d6a:	09 f4       	brne	.+2      	; 0x2d6e <disk_ioctl+0x26c>
    2d6c:	58 c0       	rjmp	.+176    	; 0x2e1e <disk_ioctl+0x31c>
    2d6e:	10 e0       	ldi	r17, 0x00	; 0
    2d70:	56 c0       	rjmp	.+172    	; 0x2e1e <disk_ioctl+0x31c>
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    2d72:	40 e0       	ldi	r20, 0x00	; 0
    2d74:	50 e0       	ldi	r21, 0x00	; 0
    2d76:	ba 01       	movw	r22, r20
    2d78:	8a e0       	ldi	r24, 0x0A	; 10
    2d7a:	76 dc       	rcall	.-1812   	; 0x2668 <send_cmd>
    2d7c:	81 11       	cpse	r24, r1
    2d7e:	48 c0       	rjmp	.+144    	; 0x2e10 <disk_ioctl+0x30e>
			&& rcvr_datablock(ptr, 16))
    2d80:	60 e1       	ldi	r22, 0x10	; 16
    2d82:	70 e0       	ldi	r23, 0x00	; 0
    2d84:	c7 01       	movw	r24, r14
    2d86:	c1 dc       	rcall	.-1662   	; 0x270a <rcvr_datablock>
    2d88:	11 e0       	ldi	r17, 0x01	; 1
    2d8a:	89 2b       	or	r24, r25
    2d8c:	09 f4       	brne	.+2      	; 0x2d90 <disk_ioctl+0x28e>
    2d8e:	47 c0       	rjmp	.+142    	; 0x2e1e <disk_ioctl+0x31c>
    2d90:	10 e0       	ldi	r17, 0x00	; 0
    2d92:	45 c0       	rjmp	.+138    	; 0x2e1e <disk_ioctl+0x31c>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    2d94:	40 e0       	ldi	r20, 0x00	; 0
    2d96:	50 e0       	ldi	r21, 0x00	; 0
    2d98:	ba 01       	movw	r22, r20
    2d9a:	8a e3       	ldi	r24, 0x3A	; 58
    2d9c:	65 dc       	rcall	.-1846   	; 0x2668 <send_cmd>
    2d9e:	81 11       	cpse	r24, r1
    2da0:	39 c0       	rjmp	.+114    	; 0x2e14 <disk_ioctl+0x312>
    2da2:	87 01       	movw	r16, r14
    2da4:	f4 e0       	ldi	r31, 0x04	; 4
    2da6:	ef 0e       	add	r14, r31
    2da8:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    2daa:	8f ef       	ldi	r24, 0xFF	; 255
    2dac:	3b dc       	rcall	.-1930   	; 0x2624 <xchg_spi>
    2dae:	f8 01       	movw	r30, r16
    2db0:	81 93       	st	Z+, r24
    2db2:	8f 01       	movw	r16, r30
    2db4:	ee 15       	cp	r30, r14
    2db6:	ff 05       	cpc	r31, r15
    2db8:	c1 f7       	brne	.-16     	; 0x2daa <disk_ioctl+0x2a8>
    2dba:	2e c0       	rjmp	.+92     	; 0x2e18 <disk_ioctl+0x316>
			res = RES_OK;
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    2dbc:	40 e0       	ldi	r20, 0x00	; 0
    2dbe:	50 e0       	ldi	r21, 0x00	; 0
    2dc0:	ba 01       	movw	r22, r20
    2dc2:	8d e8       	ldi	r24, 0x8D	; 141
    2dc4:	51 dc       	rcall	.-1886   	; 0x2668 <send_cmd>
    2dc6:	81 11       	cpse	r24, r1
    2dc8:	29 c0       	rjmp	.+82     	; 0x2e1c <disk_ioctl+0x31a>
			xchg_spi(0xFF);
    2dca:	8f ef       	ldi	r24, 0xFF	; 255
    2dcc:	2b dc       	rcall	.-1962   	; 0x2624 <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    2dce:	60 e4       	ldi	r22, 0x40	; 64
    2dd0:	70 e0       	ldi	r23, 0x00	; 0
    2dd2:	c7 01       	movw	r24, r14
    2dd4:	9a dc       	rcall	.-1740   	; 0x270a <rcvr_datablock>
    2dd6:	11 e0       	ldi	r17, 0x01	; 1
    2dd8:	89 2b       	or	r24, r25
    2dda:	09 f1       	breq	.+66     	; 0x2e1e <disk_ioctl+0x31c>
    2ddc:	10 e0       	ldi	r17, 0x00	; 0
    2dde:	1f c0       	rjmp	.+62     	; 0x2e1e <disk_ioctl+0x31c>

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    2de0:	20 d6       	rcall	.+3136   	; 0x3a22 <spi_off>
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
		Stat |= STA_NOINIT;
    2de2:	80 91 04 20 	lds	r24, 0x2004
    2de6:	81 60       	ori	r24, 0x01	; 1
    2de8:	80 93 04 20 	sts	0x2004, r24
		res = RES_OK;
    2dec:	10 e0       	ldi	r17, 0x00	; 0
		break;
    2dee:	17 c0       	rjmp	.+46     	; 0x2e1e <disk_ioctl+0x31c>

	default:
		res = RES_PARERR;
    2df0:	14 e0       	ldi	r17, 0x04	; 4
    2df2:	15 c0       	rjmp	.+42     	; 0x2e1e <disk_ioctl+0x31c>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    2df4:	11 e0       	ldi	r17, 0x01	; 1
    2df6:	13 c0       	rjmp	.+38     	; 0x2e1e <disk_ioctl+0x31c>
    2df8:	11 e0       	ldi	r17, 0x01	; 1
    2dfa:	11 c0       	rjmp	.+34     	; 0x2e1e <disk_ioctl+0x31c>
    2dfc:	11 e0       	ldi	r17, 0x01	; 1
    2dfe:	0f c0       	rjmp	.+30     	; 0x2e1e <disk_ioctl+0x31c>
    2e00:	11 e0       	ldi	r17, 0x01	; 1
    2e02:	0d c0       	rjmp	.+26     	; 0x2e1e <disk_ioctl+0x31c>
    2e04:	11 e0       	ldi	r17, 0x01	; 1
    2e06:	0b c0       	rjmp	.+22     	; 0x2e1e <disk_ioctl+0x31c>
    2e08:	11 e0       	ldi	r17, 0x01	; 1
    2e0a:	09 c0       	rjmp	.+18     	; 0x2e1e <disk_ioctl+0x31c>
    2e0c:	11 e0       	ldi	r17, 0x01	; 1
    2e0e:	07 c0       	rjmp	.+14     	; 0x2e1e <disk_ioctl+0x31c>
    2e10:	11 e0       	ldi	r17, 0x01	; 1
    2e12:	05 c0       	rjmp	.+10     	; 0x2e1e <disk_ioctl+0x31c>
    2e14:	11 e0       	ldi	r17, 0x01	; 1
    2e16:	03 c0       	rjmp	.+6      	; 0x2e1e <disk_ioctl+0x31c>
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
			res = RES_OK;
    2e18:	10 e0       	ldi	r17, 0x00	; 0
    2e1a:	01 c0       	rjmp	.+2      	; 0x2e1e <disk_ioctl+0x31c>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    2e1c:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    2e1e:	05 dc       	rcall	.-2038   	; 0x262a <deselect>

	return res;
    2e20:	81 2f       	mov	r24, r17
    2e22:	03 c0       	rjmp	.+6      	; 0x2e2a <disk_ioctl+0x328>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    2e24:	84 e0       	ldi	r24, 0x04	; 4
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <disk_ioctl+0x328>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2e28:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    2e2a:	60 96       	adiw	r28, 0x10	; 16
    2e2c:	cd bf       	out	0x3d, r28	; 61
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	df 91       	pop	r29
    2e32:	cf 91       	pop	r28
    2e34:	1f 91       	pop	r17
    2e36:	0f 91       	pop	r16
    2e38:	ff 90       	pop	r15
    2e3a:	ef 90       	pop	r14
    2e3c:	08 95       	ret

00002e3e <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
    2e3e:	1f 92       	push	r1
    2e40:	0f 92       	push	r0
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	0f 92       	push	r0
    2e46:	11 24       	eor	r1, r1
    2e48:	0b b6       	in	r0, 0x3b	; 59
    2e4a:	0f 92       	push	r0
    2e4c:	2f 93       	push	r18
    2e4e:	3f 93       	push	r19
    2e50:	4f 93       	push	r20
    2e52:	5f 93       	push	r21
    2e54:	8f 93       	push	r24
    2e56:	9f 93       	push	r25
    2e58:	af 93       	push	r26
    2e5a:	bf 93       	push	r27
    2e5c:	ef 93       	push	r30
    2e5e:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    2e60:	e0 91 18 24 	lds	r30, 0x2418
    2e64:	f0 91 19 24 	lds	r31, 0x2419
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	if (!fcb) return;
    2e68:	30 97       	sbiw	r30, 0x00	; 0
    2e6a:	09 f4       	brne	.+2      	; 0x2e6e <__vector_14+0x30>
    2e6c:	49 c0       	rjmp	.+146    	; 0x2f00 <__vector_14+0xc2>
	ct = fcb->ct; ri = fcb->ri;
    2e6e:	46 81       	ldd	r20, Z+6	; 0x06
    2e70:	57 81       	ldd	r21, Z+7	; 0x07
    2e72:	22 81       	ldd	r18, Z+2	; 0x02
    2e74:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    2e76:	80 85       	ldd	r24, Z+8	; 0x08
    2e78:	91 85       	ldd	r25, Z+9	; 0x09
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	a2 0f       	add	r26, r18
    2e7e:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    2e80:	80 81       	ld	r24, Z
    2e82:	91 81       	ldd	r25, Z+1	; 0x01
    2e84:	81 30       	cpi	r24, 0x01	; 1
    2e86:	91 05       	cpc	r25, r1
    2e88:	69 f0       	breq	.+26     	; 0x2ea4 <__vector_14+0x66>
    2e8a:	18 f0       	brcs	.+6      	; 0x2e92 <__vector_14+0x54>
    2e8c:	02 97       	sbiw	r24, 0x02	; 2
    2e8e:	99 f0       	breq	.+38     	; 0x2eb6 <__vector_14+0x78>
    2e90:	1d c0       	rjmp	.+58     	; 0x2ecc <__vector_14+0x8e>
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
    2e92:	41 15       	cp	r20, r1
    2e94:	51 05       	cpc	r21, r1
    2e96:	a1 f1       	breq	.+104    	; 0x2f00 <__vector_14+0xc2>
		l1 = r2 = buff[0];
    2e98:	8c 91       	ld	r24, X
		ct -= 1; ri += 1;
    2e9a:	41 50       	subi	r20, 0x01	; 1
    2e9c:	51 09       	sbc	r21, r1
    2e9e:	2f 5f       	subi	r18, 0xFF	; 255
    2ea0:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    2ea2:	1d c0       	rjmp	.+58     	; 0x2ede <__vector_14+0xa0>
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
    2ea4:	42 30       	cpi	r20, 0x02	; 2
    2ea6:	51 05       	cpc	r21, r1
    2ea8:	58 f1       	brcs	.+86     	; 0x2f00 <__vector_14+0xc2>
		l1 = buff[0]; r2 = buff[1];
    2eaa:	8c 91       	ld	r24, X
		ct -= 2; ri += 2;
    2eac:	42 50       	subi	r20, 0x02	; 2
    2eae:	51 09       	sbc	r21, r1
    2eb0:	2e 5f       	subi	r18, 0xFE	; 254
    2eb2:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    2eb4:	14 c0       	rjmp	.+40     	; 0x2ede <__vector_14+0xa0>
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
    2eb6:	42 30       	cpi	r20, 0x02	; 2
    2eb8:	51 05       	cpc	r21, r1
    2eba:	10 f1       	brcs	.+68     	; 0x2f00 <__vector_14+0xc2>
		l1 = r2 = buff[1] + 128;
    2ebc:	11 96       	adiw	r26, 0x01	; 1
    2ebe:	8c 91       	ld	r24, X
    2ec0:	80 58       	subi	r24, 0x80	; 128
		ct -= 2; ri += 2;
    2ec2:	42 50       	subi	r20, 0x02	; 2
    2ec4:	51 09       	sbc	r21, r1
    2ec6:	2e 5f       	subi	r18, 0xFE	; 254
    2ec8:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    2eca:	09 c0       	rjmp	.+18     	; 0x2ede <__vector_14+0xa0>
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
    2ecc:	44 30       	cpi	r20, 0x04	; 4
    2ece:	51 05       	cpc	r21, r1
    2ed0:	b8 f0       	brcs	.+46     	; 0x2f00 <__vector_14+0xc2>
		l2 = buff[0]; 
		l1 = buff[1];
    2ed2:	11 96       	adiw	r26, 0x01	; 1
    2ed4:	8c 91       	ld	r24, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
    2ed6:	44 50       	subi	r20, 0x04	; 4
    2ed8:	51 09       	sbc	r21, r1
		ri += 4;
    2eda:	2c 5f       	subi	r18, 0xFC	; 252
    2edc:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fcb->ct = ct;
    2ede:	46 83       	std	Z+6, r20	; 0x06
    2ee0:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    2ee2:	42 85       	ldd	r20, Z+10	; 0x0a
    2ee4:	53 85       	ldd	r21, Z+11	; 0x0b
    2ee6:	41 50       	subi	r20, 0x01	; 1
    2ee8:	51 09       	sbc	r21, r1
    2eea:	24 23       	and	r18, r20
    2eec:	35 23       	and	r19, r21
    2eee:	22 83       	std	Z+2, r18	; 0x02
    2ef0:	33 83       	std	Z+3, r19	; 0x03
	
	uint8_t data = l1;//smooth(l1,0.35,data);
	//uint8_t data = l1*0.2;
	
	DACB.CH0DATA = data;
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	e0 e2       	ldi	r30, 0x20	; 32
    2ef6:	f3 e0       	ldi	r31, 0x03	; 3
    2ef8:	80 8f       	std	Z+24, r24	; 0x18
    2efa:	91 8f       	std	Z+25, r25	; 0x19
	DACB.CH1DATA = data;
    2efc:	82 8f       	std	Z+26, r24	; 0x1a
    2efe:	93 8f       	std	Z+27, r25	; 0x1b
	//DACB.CH0DATAL = (data << 7);
	//DACB.CH0DATAH = (data >> 1);
}
    2f00:	ff 91       	pop	r31
    2f02:	ef 91       	pop	r30
    2f04:	bf 91       	pop	r27
    2f06:	af 91       	pop	r26
    2f08:	9f 91       	pop	r25
    2f0a:	8f 91       	pop	r24
    2f0c:	5f 91       	pop	r21
    2f0e:	4f 91       	pop	r20
    2f10:	3f 91       	pop	r19
    2f12:	2f 91       	pop	r18
    2f14:	0f 90       	pop	r0
    2f16:	0b be       	out	0x3b, r0	; 59
    2f18:	0f 90       	pop	r0
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	0f 90       	pop	r0
    2f1e:	1f 90       	pop	r1
    2f20:	18 95       	reti

00002f22 <ht1632c_writedata>:
	HT1632_PORT.PIN5CTRL = PORT_OPC_PULLUP_gc;
	HT1632_PORT.PIN6CTRL = PORT_OPC_PULLUP_gc;
	HT1632_PORT.PIN7CTRL = PORT_OPC_PULLUP_gc;
	
	ht1632c_sendcommand(HT1632_LED_OFF);
	ht1632c_sendcommand(HT1632_SYS_DIS);
    2f22:	cf 93       	push	r28
    2f24:	df 93       	push	r29
    2f26:	28 e0       	ldi	r18, 0x08	; 8
    2f28:	e0 e8       	ldi	r30, 0x80	; 128
    2f2a:	f6 e0       	ldi	r31, 0x06	; 6
    2f2c:	21 83       	std	Z+1, r18	; 0x01
    2f2e:	66 23       	and	r22, r22
    2f30:	c1 f0       	breq	.+48     	; 0x2f62 <ht1632c_writedata+0x40>
    2f32:	74 e0       	ldi	r23, 0x04	; 4
    2f34:	41 e0       	ldi	r20, 0x01	; 1
    2f36:	50 e0       	ldi	r21, 0x00	; 0
    2f38:	a8 e0       	ldi	r26, 0x08	; 8
    2f3a:	76 83       	std	Z+6, r23	; 0x06
    2f3c:	2f ef       	ldi	r18, 0xFF	; 255
    2f3e:	26 0f       	add	r18, r22
    2f40:	ea 01       	movw	r28, r20
    2f42:	02 c0       	rjmp	.+4      	; 0x2f48 <ht1632c_writedata+0x26>
    2f44:	cc 0f       	add	r28, r28
    2f46:	dd 1f       	adc	r29, r29
    2f48:	2a 95       	dec	r18
    2f4a:	e2 f7       	brpl	.-8      	; 0x2f44 <ht1632c_writedata+0x22>
    2f4c:	9e 01       	movw	r18, r28
    2f4e:	28 23       	and	r18, r24
    2f50:	39 23       	and	r19, r25
    2f52:	23 2b       	or	r18, r19
    2f54:	11 f0       	breq	.+4      	; 0x2f5a <ht1632c_writedata+0x38>
    2f56:	a5 83       	std	Z+5, r26	; 0x05
    2f58:	01 c0       	rjmp	.+2      	; 0x2f5c <ht1632c_writedata+0x3a>
    2f5a:	a6 83       	std	Z+6, r26	; 0x06
    2f5c:	75 83       	std	Z+5, r23	; 0x05
    2f5e:	61 50       	subi	r22, 0x01	; 1
    2f60:	61 f7       	brne	.-40     	; 0x2f3a <ht1632c_writedata+0x18>
    2f62:	88 e0       	ldi	r24, 0x08	; 8
    2f64:	e0 e8       	ldi	r30, 0x80	; 128
    2f66:	f6 e0       	ldi	r31, 0x06	; 6
    2f68:	86 83       	std	Z+6, r24	; 0x06
    2f6a:	df 91       	pop	r29
    2f6c:	cf 91       	pop	r28
    2f6e:	08 95       	ret

00002f70 <ht1632c_writeScreen>:
    2f70:	0f 93       	push	r16
    2f72:	1f 93       	push	r17
    2f74:	cf 93       	push	r28
    2f76:	df 93       	push	r29
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	e0 e8       	ldi	r30, 0x80	; 128
    2f7c:	f6 e0       	ldi	r31, 0x06	; 6
    2f7e:	86 83       	std	Z+6, r24	; 0x06
    2f80:	63 e0       	ldi	r22, 0x03	; 3
    2f82:	85 e0       	ldi	r24, 0x05	; 5
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	cd df       	rcall	.-102    	; 0x2f22 <ht1632c_writedata>
    2f88:	67 e0       	ldi	r22, 0x07	; 7
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	c9 df       	rcall	.-110    	; 0x2f22 <ht1632c_writedata>
    2f90:	cd e1       	ldi	r28, 0x1D	; 29
    2f92:	d4 e2       	ldi	r29, 0x24	; 36
    2f94:	0d e3       	ldi	r16, 0x3D	; 61
    2f96:	14 e2       	ldi	r17, 0x24	; 36
    2f98:	fe 01       	movw	r30, r28
    2f9a:	31 97       	sbiw	r30, 0x01	; 1
    2f9c:	80 81       	ld	r24, Z
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	98 2f       	mov	r25, r24
    2fa2:	88 27       	eor	r24, r24
    2fa4:	28 81       	ld	r18, Y
    2fa6:	60 e1       	ldi	r22, 0x10	; 16
    2fa8:	82 2b       	or	r24, r18
    2faa:	bb df       	rcall	.-138    	; 0x2f22 <ht1632c_writedata>
    2fac:	22 96       	adiw	r28, 0x02	; 2
    2fae:	c0 17       	cp	r28, r16
    2fb0:	d1 07       	cpc	r29, r17
    2fb2:	91 f7       	brne	.-28     	; 0x2f98 <ht1632c_writeScreen+0x28>
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	e0 e8       	ldi	r30, 0x80	; 128
    2fb8:	f6 e0       	ldi	r31, 0x06	; 6
    2fba:	85 83       	std	Z+5, r24	; 0x05
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	1f 91       	pop	r17
    2fc2:	0f 91       	pop	r16
    2fc4:	08 95       	ret

00002fc6 <ht1632c_clearScreen>:
    2fc6:	ec e1       	ldi	r30, 0x1C	; 28
    2fc8:	f4 e2       	ldi	r31, 0x24	; 36
    2fca:	8c e3       	ldi	r24, 0x3C	; 60
    2fcc:	94 e2       	ldi	r25, 0x24	; 36
    2fce:	11 92       	st	Z+, r1
    2fd0:	e8 17       	cp	r30, r24
    2fd2:	f9 07       	cpc	r31, r25
    2fd4:	e1 f7       	brne	.-8      	; 0x2fce <ht1632c_clearScreen+0x8>
    2fd6:	cc cf       	rjmp	.-104    	; 0x2f70 <ht1632c_writeScreen>
    2fd8:	08 95       	ret

00002fda <ht1632c_sendcommand>:
    2fda:	1f 93       	push	r17
    2fdc:	cf 93       	push	r28
    2fde:	df 93       	push	r29
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	94 60       	ori	r25, 0x04	; 4
    2fe4:	c0 e8       	ldi	r28, 0x80	; 128
    2fe6:	d6 e0       	ldi	r29, 0x06	; 6
    2fe8:	11 e0       	ldi	r17, 0x01	; 1
    2fea:	1e 83       	std	Y+6, r17	; 0x06
    2fec:	6c e0       	ldi	r22, 0x0C	; 12
    2fee:	88 0f       	add	r24, r24
    2ff0:	99 1f       	adc	r25, r25
    2ff2:	97 df       	rcall	.-210    	; 0x2f22 <ht1632c_writedata>
    2ff4:	1d 83       	std	Y+5, r17	; 0x05
    2ff6:	df 91       	pop	r29
    2ff8:	cf 91       	pop	r28
    2ffa:	1f 91       	pop	r17
    2ffc:	08 95       	ret

00002ffe <ht1632c_begin>:
    2ffe:	cf 93       	push	r28
    3000:	c8 2f       	mov	r28, r24
    3002:	e0 e8       	ldi	r30, 0x80	; 128
    3004:	f6 e0       	ldi	r31, 0x06	; 6
    3006:	91 e0       	ldi	r25, 0x01	; 1
    3008:	91 83       	std	Z+1, r25	; 0x01
    300a:	95 83       	std	Z+5, r25	; 0x05
    300c:	94 e0       	ldi	r25, 0x04	; 4
    300e:	91 83       	std	Z+1, r25	; 0x01
    3010:	95 83       	std	Z+5, r25	; 0x05
    3012:	88 e0       	ldi	r24, 0x08	; 8
    3014:	81 83       	std	Z+1, r24	; 0x01
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	e0 df       	rcall	.-64     	; 0x2fda <ht1632c_sendcommand>
    301a:	83 e0       	ldi	r24, 0x03	; 3
    301c:	de df       	rcall	.-68     	; 0x2fda <ht1632c_sendcommand>
    301e:	88 e0       	ldi	r24, 0x08	; 8
    3020:	dc df       	rcall	.-72     	; 0x2fda <ht1632c_sendcommand>
    3022:	84 e1       	ldi	r24, 0x14	; 20
    3024:	da df       	rcall	.-76     	; 0x2fda <ht1632c_sendcommand>
    3026:	88 e1       	ldi	r24, 0x18	; 24
    3028:	d8 df       	rcall	.-80     	; 0x2fda <ht1632c_sendcommand>
    302a:	8c 2f       	mov	r24, r28
    302c:	d6 df       	rcall	.-84     	; 0x2fda <ht1632c_sendcommand>
    302e:	81 ea       	ldi	r24, 0xA1	; 161
    3030:	d4 df       	rcall	.-88     	; 0x2fda <ht1632c_sendcommand>
    3032:	cf 91       	pop	r28
    3034:	08 95       	ret

00003036 <ht1632c_setBrightness>:
}

void ht1632c_setBrightness(uint8_t pwm) {
    3036:	80 31       	cpi	r24, 0x10	; 16
    3038:	08 f0       	brcs	.+2      	; 0x303c <ht1632c_setBrightness+0x6>
    303a:	8f e0       	ldi	r24, 0x0F	; 15
	if (pwm > 15) {
		pwm = 15;	
	}
	ht1632c_sendcommand(HT1632_PWM_CONTROL | pwm);
    303c:	80 6a       	ori	r24, 0xA0	; 160
    303e:	cd cf       	rjmp	.-102    	; 0x2fda <ht1632c_sendcommand>
    3040:	08 95       	ret

00003042 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
    3042:	3f 92       	push	r3
    3044:	4f 92       	push	r4
    3046:	5f 92       	push	r5
    3048:	6f 92       	push	r6
    304a:	7f 92       	push	r7
    304c:	8f 92       	push	r8
    304e:	9f 92       	push	r9
    3050:	af 92       	push	r10
    3052:	bf 92       	push	r11
    3054:	cf 92       	push	r12
    3056:	df 92       	push	r13
    3058:	ef 92       	push	r14
    305a:	ff 92       	push	r15
    305c:	0f 93       	push	r16
    305e:	1f 93       	push	r17
    3060:	cf 93       	push	r28
    3062:	df 93       	push	r29
    3064:	00 d0       	rcall	.+0      	; 0x3066 <jsmn_parse+0x24>
    3066:	00 d0       	rcall	.+0      	; 0x3068 <jsmn_parse+0x26>
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	8b 83       	std	Y+3, r24	; 0x03
    306e:	9c 83       	std	Y+4, r25	; 0x04
    3070:	29 83       	std	Y+1, r18	; 0x01
    3072:	3a 83       	std	Y+2, r19	; 0x02
    3074:	48 01       	movw	r8, r16
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    3076:	dc 01       	movw	r26, r24
    3078:	8d 91       	ld	r24, X+
    307a:	9c 91       	ld	r25, X
    307c:	84 17       	cp	r24, r20
    307e:	95 07       	cpc	r25, r21
    3080:	08 f0       	brcs	.+2      	; 0x3084 <jsmn_parse+0x42>
    3082:	1d c3       	rjmp	.+1594   	; 0x36be <jsmn_parse+0x67c>
    3084:	fb 01       	movw	r30, r22
    3086:	e8 0f       	add	r30, r24
    3088:	f9 1f       	adc	r31, r25
    308a:	10 81       	ld	r17, Z
    308c:	11 23       	and	r17, r17
    308e:	09 f4       	brne	.+2      	; 0x3092 <jsmn_parse+0x50>
    3090:	19 c3       	rjmp	.+1586   	; 0x36c4 <jsmn_parse+0x682>
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;
    3092:	c1 2c       	mov	r12, r1
    3094:	d1 2c       	mov	r13, r1
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
    3096:	aa 24       	eor	r10, r10
    3098:	aa 94       	dec	r10
    309a:	ba 2c       	mov	r11, r10
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    309c:	0f 2e       	mov	r0, r31
    309e:	f3 e0       	ldi	r31, 0x03	; 3
    30a0:	3f 2e       	mov	r3, r31
    30a2:	f0 2d       	mov	r31, r0
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    30a4:	1c 32       	cpi	r17, 0x2C	; 44
    30a6:	09 f4       	brne	.+2      	; 0x30aa <jsmn_parse+0x68>
    30a8:	09 c2       	rjmp	.+1042   	; 0x34bc <jsmn_parse+0x47a>
    30aa:	80 f4       	brcc	.+32     	; 0x30cc <jsmn_parse+0x8a>
    30ac:	1d 30       	cpi	r17, 0x0D	; 13
    30ae:	09 f4       	brne	.+2      	; 0x30b2 <jsmn_parse+0x70>
    30b0:	f4 c2       	rjmp	.+1512   	; 0x369a <jsmn_parse+0x658>
    30b2:	28 f4       	brcc	.+10     	; 0x30be <jsmn_parse+0x7c>
    30b4:	19 50       	subi	r17, 0x09	; 9
    30b6:	12 30       	cpi	r17, 0x02	; 2
    30b8:	08 f4       	brcc	.+2      	; 0x30bc <jsmn_parse+0x7a>
    30ba:	ef c2       	rjmp	.+1502   	; 0x369a <jsmn_parse+0x658>
    30bc:	4c c2       	rjmp	.+1176   	; 0x3556 <jsmn_parse+0x514>
    30be:	10 32       	cpi	r17, 0x20	; 32
    30c0:	09 f4       	brne	.+2      	; 0x30c4 <jsmn_parse+0x82>
    30c2:	eb c2       	rjmp	.+1494   	; 0x369a <jsmn_parse+0x658>
    30c4:	12 32       	cpi	r17, 0x22	; 34
    30c6:	09 f4       	brne	.+2      	; 0x30ca <jsmn_parse+0x88>
    30c8:	f8 c0       	rjmp	.+496    	; 0x32ba <jsmn_parse+0x278>
    30ca:	45 c2       	rjmp	.+1162   	; 0x3556 <jsmn_parse+0x514>
    30cc:	1d 35       	cpi	r17, 0x5D	; 93
    30ce:	09 f4       	brne	.+2      	; 0x30d2 <jsmn_parse+0x90>
    30d0:	71 c0       	rjmp	.+226    	; 0x31b4 <jsmn_parse+0x172>
    30d2:	30 f4       	brcc	.+12     	; 0x30e0 <jsmn_parse+0x9e>
    30d4:	1a 33       	cpi	r17, 0x3A	; 58
    30d6:	09 f4       	brne	.+2      	; 0x30da <jsmn_parse+0x98>
    30d8:	e5 c1       	rjmp	.+970    	; 0x34a4 <jsmn_parse+0x462>
    30da:	1b 35       	cpi	r17, 0x5B	; 91
    30dc:	39 f0       	breq	.+14     	; 0x30ec <jsmn_parse+0xaa>
    30de:	3b c2       	rjmp	.+1142   	; 0x3556 <jsmn_parse+0x514>
    30e0:	1b 37       	cpi	r17, 0x7B	; 123
    30e2:	21 f0       	breq	.+8      	; 0x30ec <jsmn_parse+0xaa>
    30e4:	1d 37       	cpi	r17, 0x7D	; 125
    30e6:	09 f4       	brne	.+2      	; 0x30ea <jsmn_parse+0xa8>
    30e8:	65 c0       	rjmp	.+202    	; 0x31b4 <jsmn_parse+0x172>
    30ea:	35 c2       	rjmp	.+1130   	; 0x3556 <jsmn_parse+0x514>
			case '{': case '[':
				count++;
    30ec:	bf ef       	ldi	r27, 0xFF	; 255
    30ee:	cb 1a       	sub	r12, r27
    30f0:	db 0a       	sbc	r13, r27
				if (tokens == NULL) {
    30f2:	e9 81       	ldd	r30, Y+1	; 0x01
    30f4:	fa 81       	ldd	r31, Y+2	; 0x02
    30f6:	ef 2b       	or	r30, r31
    30f8:	09 f4       	brne	.+2      	; 0x30fc <jsmn_parse+0xba>
    30fa:	cf c2       	rjmp	.+1438   	; 0x369a <jsmn_parse+0x658>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    30fc:	ab 81       	ldd	r26, Y+3	; 0x03
    30fe:	bc 81       	ldd	r27, Y+4	; 0x04
    3100:	12 96       	adiw	r26, 0x02	; 2
    3102:	8d 91       	ld	r24, X+
    3104:	9c 91       	ld	r25, X
    3106:	13 97       	sbiw	r26, 0x03	; 3
    3108:	88 15       	cp	r24, r8
    310a:	99 05       	cpc	r25, r9
    310c:	08 f0       	brcs	.+2      	; 0x3110 <jsmn_parse+0xce>
    310e:	03 c3       	rjmp	.+1542   	; 0x3716 <jsmn_parse+0x6d4>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    3110:	fc 01       	movw	r30, r24
    3112:	31 96       	adiw	r30, 0x01	; 1
    3114:	12 96       	adiw	r26, 0x02	; 2
    3116:	ed 93       	st	X+, r30
    3118:	fc 93       	st	X, r31
    311a:	13 97       	sbiw	r26, 0x03	; 3
    311c:	fc 01       	movw	r30, r24
    311e:	ee 0f       	add	r30, r30
    3120:	ff 1f       	adc	r31, r31
    3122:	ee 0f       	add	r30, r30
    3124:	ff 1f       	adc	r31, r31
    3126:	ee 0f       	add	r30, r30
    3128:	ff 1f       	adc	r31, r31
    312a:	df 01       	movw	r26, r30
    312c:	a8 1b       	sub	r26, r24
    312e:	b9 0b       	sbc	r27, r25
    3130:	e9 81       	ldd	r30, Y+1	; 0x01
    3132:	fa 81       	ldd	r31, Y+2	; 0x02
    3134:	ae 0f       	add	r26, r30
    3136:	bf 1f       	adc	r27, r31
	tok->start = tok->end = -1;
    3138:	13 96       	adiw	r26, 0x03	; 3
    313a:	ad 92       	st	X+, r10
    313c:	bc 92       	st	X, r11
    313e:	14 97       	sbiw	r26, 0x04	; 4
    3140:	11 96       	adiw	r26, 0x01	; 1
    3142:	ad 92       	st	X+, r10
    3144:	bc 92       	st	X, r11
    3146:	12 97       	sbiw	r26, 0x02	; 2
	tok->size = 0;
    3148:	15 96       	adiw	r26, 0x05	; 5
    314a:	1d 92       	st	X+, r1
    314c:	1c 92       	st	X, r1
    314e:	16 97       	sbiw	r26, 0x06	; 6
				count++;
				if (tokens == NULL) {
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
    3150:	10 97       	sbiw	r26, 0x00	; 0
    3152:	09 f4       	brne	.+2      	; 0x3156 <jsmn_parse+0x114>
    3154:	e2 c2       	rjmp	.+1476   	; 0x371a <jsmn_parse+0x6d8>
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
    3156:	eb 81       	ldd	r30, Y+3	; 0x03
    3158:	fc 81       	ldd	r31, Y+4	; 0x04
    315a:	84 81       	ldd	r24, Z+4	; 0x04
    315c:	95 81       	ldd	r25, Z+5	; 0x05
    315e:	8f 3f       	cpi	r24, 0xFF	; 255
    3160:	ff ef       	ldi	r31, 0xFF	; 255
    3162:	9f 07       	cpc	r25, r31
    3164:	99 f0       	breq	.+38     	; 0x318c <jsmn_parse+0x14a>
					tokens[parser->toksuper].size++;
    3166:	9c 01       	movw	r18, r24
    3168:	22 0f       	add	r18, r18
    316a:	33 1f       	adc	r19, r19
    316c:	22 0f       	add	r18, r18
    316e:	33 1f       	adc	r19, r19
    3170:	22 0f       	add	r18, r18
    3172:	33 1f       	adc	r19, r19
    3174:	28 1b       	sub	r18, r24
    3176:	39 0b       	sbc	r19, r25
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	9a 81       	ldd	r25, Y+2	; 0x02
    317c:	28 0f       	add	r18, r24
    317e:	39 1f       	adc	r19, r25
    3180:	f9 01       	movw	r30, r18
    3182:	85 81       	ldd	r24, Z+5	; 0x05
    3184:	96 81       	ldd	r25, Z+6	; 0x06
    3186:	01 96       	adiw	r24, 0x01	; 1
    3188:	85 83       	std	Z+5, r24	; 0x05
    318a:	96 83       	std	Z+6, r25	; 0x06
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
    318c:	1b 37       	cpi	r17, 0x7B	; 123
    318e:	11 f4       	brne	.+4      	; 0x3194 <jsmn_parse+0x152>
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	01 c0       	rjmp	.+2      	; 0x3196 <jsmn_parse+0x154>
    3194:	82 e0       	ldi	r24, 0x02	; 2
    3196:	8c 93       	st	X, r24
				token->start = parser->pos;
    3198:	eb 81       	ldd	r30, Y+3	; 0x03
    319a:	fc 81       	ldd	r31, Y+4	; 0x04
    319c:	80 81       	ld	r24, Z
    319e:	91 81       	ldd	r25, Z+1	; 0x01
    31a0:	11 96       	adiw	r26, 0x01	; 1
    31a2:	8d 93       	st	X+, r24
    31a4:	9c 93       	st	X, r25
    31a6:	12 97       	sbiw	r26, 0x02	; 2
				parser->toksuper = parser->toknext - 1;
    31a8:	82 81       	ldd	r24, Z+2	; 0x02
    31aa:	93 81       	ldd	r25, Z+3	; 0x03
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	84 83       	std	Z+4, r24	; 0x04
    31b0:	95 83       	std	Z+5, r25	; 0x05
				break;
    31b2:	73 c2       	rjmp	.+1254   	; 0x369a <jsmn_parse+0x658>
			case '}': case ']':
				if (tokens == NULL)
    31b4:	29 81       	ldd	r18, Y+1	; 0x01
    31b6:	3a 81       	ldd	r19, Y+2	; 0x02
    31b8:	23 2b       	or	r18, r19
    31ba:	09 f4       	brne	.+2      	; 0x31be <jsmn_parse+0x17c>
    31bc:	6e c2       	rjmp	.+1244   	; 0x369a <jsmn_parse+0x658>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
    31be:	1d 37       	cpi	r17, 0x7D	; 125
    31c0:	19 f4       	brne	.+6      	; 0x31c8 <jsmn_parse+0x186>
    31c2:	77 24       	eor	r7, r7
    31c4:	73 94       	inc	r7
    31c6:	03 c0       	rjmp	.+6      	; 0x31ce <jsmn_parse+0x18c>
    31c8:	68 94       	set
    31ca:	77 24       	eor	r7, r7
    31cc:	71 f8       	bld	r7, 1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    31ce:	ab 81       	ldd	r26, Y+3	; 0x03
    31d0:	bc 81       	ldd	r27, Y+4	; 0x04
    31d2:	12 96       	adiw	r26, 0x02	; 2
    31d4:	0d 91       	ld	r16, X+
    31d6:	1c 91       	ld	r17, X
    31d8:	13 97       	sbiw	r26, 0x03	; 3
    31da:	f8 01       	movw	r30, r16
    31dc:	31 97       	sbiw	r30, 0x01	; 1
    31de:	ff 23       	and	r31, r31
    31e0:	0c f4       	brge	.+2      	; 0x31e4 <jsmn_parse+0x1a2>
    31e2:	a5 c2       	rjmp	.+1354   	; 0x372e <jsmn_parse+0x6ec>
    31e4:	98 01       	movw	r18, r16
    31e6:	22 0f       	add	r18, r18
    31e8:	33 1f       	adc	r19, r19
    31ea:	22 0f       	add	r18, r18
    31ec:	33 1f       	adc	r19, r19
    31ee:	22 0f       	add	r18, r18
    31f0:	33 1f       	adc	r19, r19
    31f2:	20 1b       	sub	r18, r16
    31f4:	31 0b       	sbc	r19, r17
    31f6:	29 01       	movw	r4, r18
    31f8:	b7 e0       	ldi	r27, 0x07	; 7
    31fa:	4b 1a       	sub	r4, r27
    31fc:	51 08       	sbc	r5, r1
    31fe:	29 81       	ldd	r18, Y+1	; 0x01
    3200:	3a 81       	ldd	r19, Y+2	; 0x02
    3202:	42 0e       	add	r4, r18
    3204:	53 1e       	adc	r5, r19
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    3206:	d2 01       	movw	r26, r4
    3208:	11 96       	adiw	r26, 0x01	; 1
    320a:	0d 91       	ld	r16, X+
    320c:	1c 91       	ld	r17, X
    320e:	12 97       	sbiw	r26, 0x02	; 2
    3210:	0f 3f       	cpi	r16, 0xFF	; 255
    3212:	1f 4f       	sbci	r17, 0xFF	; 255
    3214:	e9 f0       	breq	.+58     	; 0x3250 <jsmn_parse+0x20e>
    3216:	d2 01       	movw	r26, r4
    3218:	13 96       	adiw	r26, 0x03	; 3
    321a:	0d 91       	ld	r16, X+
    321c:	1c 91       	ld	r17, X
    321e:	14 97       	sbiw	r26, 0x04	; 4
    3220:	0f 3f       	cpi	r16, 0xFF	; 255
    3222:	1f 4f       	sbci	r17, 0xFF	; 255
    3224:	a9 f4       	brne	.+42     	; 0x3250 <jsmn_parse+0x20e>
						if (token->type != type) {
    3226:	d2 01       	movw	r26, r4
    3228:	2c 91       	ld	r18, X
    322a:	72 12       	cpse	r7, r18
    322c:	78 c2       	rjmp	.+1264   	; 0x371e <jsmn_parse+0x6dc>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
    322e:	ab 81       	ldd	r26, Y+3	; 0x03
    3230:	bc 81       	ldd	r27, Y+4	; 0x04
    3232:	14 96       	adiw	r26, 0x04	; 4
    3234:	ad 92       	st	X+, r10
    3236:	bc 92       	st	X, r11
    3238:	15 97       	sbiw	r26, 0x05	; 5
						token->end = parser->pos + 1;
    323a:	01 96       	adiw	r24, 0x01	; 1
    323c:	d2 01       	movw	r26, r4
    323e:	13 96       	adiw	r26, 0x03	; 3
    3240:	8d 93       	st	X+, r24
    3242:	9c 93       	st	X, r25
    3244:	14 97       	sbiw	r26, 0x04	; 4
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
    3246:	ef 3f       	cpi	r30, 0xFF	; 255
    3248:	bf ef       	ldi	r27, 0xFF	; 255
    324a:	fb 07       	cpc	r31, r27
    324c:	41 f4       	brne	.+16     	; 0x325e <jsmn_parse+0x21c>
    324e:	69 c2       	rjmp	.+1234   	; 0x3722 <jsmn_parse+0x6e0>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    3250:	31 97       	sbiw	r30, 0x01	; 1
    3252:	27 e0       	ldi	r18, 0x07	; 7
    3254:	42 1a       	sub	r4, r18
    3256:	51 08       	sbc	r5, r1
    3258:	ff 23       	and	r31, r31
    325a:	ac f6       	brge	.-86     	; 0x3206 <jsmn_parse+0x1c4>
    325c:	68 c2       	rjmp	.+1232   	; 0x372e <jsmn_parse+0x6ec>
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
				for (; i >= 0; i--) {
    325e:	ff 23       	and	r31, r31
    3260:	0c f4       	brge	.+2      	; 0x3264 <jsmn_parse+0x222>
    3262:	1b c2       	rjmp	.+1078   	; 0x369a <jsmn_parse+0x658>
    3264:	cf 01       	movw	r24, r30
    3266:	88 0f       	add	r24, r24
    3268:	99 1f       	adc	r25, r25
    326a:	88 0f       	add	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	88 0f       	add	r24, r24
    3270:	99 1f       	adc	r25, r25
    3272:	8c 01       	movw	r16, r24
    3274:	0e 1b       	sub	r16, r30
    3276:	1f 0b       	sbc	r17, r31
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	9a 81       	ldd	r25, Y+2	; 0x02
    327c:	08 0f       	add	r16, r24
    327e:	19 1f       	adc	r17, r25
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    3280:	d8 01       	movw	r26, r16
    3282:	11 96       	adiw	r26, 0x01	; 1
    3284:	8d 91       	ld	r24, X+
    3286:	9c 91       	ld	r25, X
    3288:	12 97       	sbiw	r26, 0x02	; 2
    328a:	01 96       	adiw	r24, 0x01	; 1
    328c:	71 f0       	breq	.+28     	; 0x32aa <jsmn_parse+0x268>
    328e:	d8 01       	movw	r26, r16
    3290:	13 96       	adiw	r26, 0x03	; 3
    3292:	8d 91       	ld	r24, X+
    3294:	9c 91       	ld	r25, X
    3296:	14 97       	sbiw	r26, 0x04	; 4
    3298:	01 96       	adiw	r24, 0x01	; 1
    329a:	39 f4       	brne	.+14     	; 0x32aa <jsmn_parse+0x268>
						parser->toksuper = i;
    329c:	ab 81       	ldd	r26, Y+3	; 0x03
    329e:	bc 81       	ldd	r27, Y+4	; 0x04
    32a0:	14 96       	adiw	r26, 0x04	; 4
    32a2:	ed 93       	st	X+, r30
    32a4:	fc 93       	st	X, r31
    32a6:	15 97       	sbiw	r26, 0x05	; 5
						break;
    32a8:	f8 c1       	rjmp	.+1008   	; 0x369a <jsmn_parse+0x658>
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
				for (; i >= 0; i--) {
    32aa:	31 97       	sbiw	r30, 0x01	; 1
    32ac:	07 50       	subi	r16, 0x07	; 7
    32ae:	11 09       	sbc	r17, r1
    32b0:	ef 3f       	cpi	r30, 0xFF	; 255
    32b2:	bf ef       	ldi	r27, 0xFF	; 255
    32b4:	fb 07       	cpc	r31, r27
    32b6:	21 f7       	brne	.-56     	; 0x3280 <jsmn_parse+0x23e>
    32b8:	f0 c1       	rjmp	.+992    	; 0x369a <jsmn_parse+0x658>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
    32ba:	9c 01       	movw	r18, r24
    32bc:	2f 5f       	subi	r18, 0xFF	; 255
    32be:	3f 4f       	sbci	r19, 0xFF	; 255
    32c0:	eb 81       	ldd	r30, Y+3	; 0x03
    32c2:	fc 81       	ldd	r31, Y+4	; 0x04
    32c4:	20 83       	st	Z, r18
    32c6:	31 83       	std	Z+1, r19	; 0x01

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    32c8:	24 17       	cp	r18, r20
    32ca:	35 07       	cpc	r19, r21
    32cc:	08 f0       	brcs	.+2      	; 0x32d0 <jsmn_parse+0x28e>
    32ce:	d1 c0       	rjmp	.+418    	; 0x3472 <jsmn_parse+0x430>
    32d0:	fb 01       	movw	r30, r22
    32d2:	e2 0f       	add	r30, r18
    32d4:	f3 1f       	adc	r31, r19
    32d6:	e0 81       	ld	r30, Z
    32d8:	ee 23       	and	r30, r30
    32da:	09 f4       	brne	.+2      	; 0x32de <jsmn_parse+0x29c>
    32dc:	ca c0       	rjmp	.+404    	; 0x3472 <jsmn_parse+0x430>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
    32de:	e2 32       	cpi	r30, 0x22	; 34
    32e0:	09 f0       	breq	.+2      	; 0x32e4 <jsmn_parse+0x2a2>
    32e2:	4c c0       	rjmp	.+152    	; 0x337c <jsmn_parse+0x33a>
    32e4:	03 c0       	rjmp	.+6      	; 0x32ec <jsmn_parse+0x2aa>
    32e6:	e2 32       	cpi	r30, 0x22	; 34
    32e8:	09 f0       	breq	.+2      	; 0x32ec <jsmn_parse+0x2aa>
    32ea:	48 c0       	rjmp	.+144    	; 0x337c <jsmn_parse+0x33a>
			if (tokens == NULL) {
    32ec:	29 81       	ldd	r18, Y+1	; 0x01
    32ee:	3a 81       	ldd	r19, Y+2	; 0x02
    32f0:	23 2b       	or	r18, r19
    32f2:	09 f4       	brne	.+2      	; 0x32f6 <jsmn_parse+0x2b4>
    32f4:	20 c2       	rjmp	.+1088   	; 0x3736 <jsmn_parse+0x6f4>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    32f6:	ab 81       	ldd	r26, Y+3	; 0x03
    32f8:	bc 81       	ldd	r27, Y+4	; 0x04
    32fa:	12 96       	adiw	r26, 0x02	; 2
    32fc:	2d 91       	ld	r18, X+
    32fe:	3c 91       	ld	r19, X
    3300:	13 97       	sbiw	r26, 0x03	; 3
    3302:	28 15       	cp	r18, r8
    3304:	39 05       	cpc	r19, r9
    3306:	d8 f4       	brcc	.+54     	; 0x333e <jsmn_parse+0x2fc>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    3308:	f9 01       	movw	r30, r18
    330a:	31 96       	adiw	r30, 0x01	; 1
    330c:	12 96       	adiw	r26, 0x02	; 2
    330e:	ed 93       	st	X+, r30
    3310:	fc 93       	st	X, r31
    3312:	13 97       	sbiw	r26, 0x03	; 3
    3314:	f9 01       	movw	r30, r18
    3316:	ee 0f       	add	r30, r30
    3318:	ff 1f       	adc	r31, r31
    331a:	ee 0f       	add	r30, r30
    331c:	ff 1f       	adc	r31, r31
    331e:	ee 0f       	add	r30, r30
    3320:	ff 1f       	adc	r31, r31
    3322:	e2 1b       	sub	r30, r18
    3324:	f3 0b       	sbc	r31, r19
    3326:	29 81       	ldd	r18, Y+1	; 0x01
    3328:	3a 81       	ldd	r19, Y+2	; 0x02
    332a:	e2 0f       	add	r30, r18
    332c:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    332e:	a3 82       	std	Z+3, r10	; 0x03
    3330:	b4 82       	std	Z+4, r11	; 0x04
    3332:	a1 82       	std	Z+1, r10	; 0x01
    3334:	b2 82       	std	Z+2, r11	; 0x02
	tok->size = 0;
    3336:	15 82       	std	Z+5, r1	; 0x05
    3338:	16 82       	std	Z+6, r1	; 0x06
		if (c == '\"') {
			if (tokens == NULL) {
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
    333a:	30 97       	sbiw	r30, 0x00	; 0
    333c:	31 f4       	brne	.+12     	; 0x334a <jsmn_parse+0x308>
				parser->pos = start;
    333e:	ab 81       	ldd	r26, Y+3	; 0x03
    3340:	bc 81       	ldd	r27, Y+4	; 0x04
    3342:	8d 93       	st	X+, r24
    3344:	9c 93       	st	X, r25
				return JSMN_ERROR_NOMEM;
    3346:	8f ef       	ldi	r24, 0xFF	; 255
    3348:	fa c1       	rjmp	.+1012   	; 0x373e <jsmn_parse+0x6fc>
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
    334a:	ab 81       	ldd	r26, Y+3	; 0x03
    334c:	bc 81       	ldd	r27, Y+4	; 0x04
    334e:	2d 91       	ld	r18, X+
    3350:	3c 91       	ld	r19, X
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    3352:	30 82       	st	Z, r3
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
				return JSMN_ERROR_NOMEM;
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
    3354:	01 96       	adiw	r24, 0x01	; 1
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
	token->start = start;
    3356:	81 83       	std	Z+1, r24	; 0x01
    3358:	92 83       	std	Z+2, r25	; 0x02
	token->end = end;
    335a:	23 83       	std	Z+3, r18	; 0x03
    335c:	34 83       	std	Z+4, r19	; 0x04
	token->size = 0;
    335e:	15 82       	std	Z+5, r1	; 0x05
    3360:	16 82       	std	Z+6, r1	; 0x06
#endif
				break;
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    3362:	bf ef       	ldi	r27, 0xFF	; 255
    3364:	cb 1a       	sub	r12, r27
    3366:	db 0a       	sbc	r13, r27
				if (parser->toksuper != -1 && tokens != NULL)
    3368:	eb 81       	ldd	r30, Y+3	; 0x03
    336a:	fc 81       	ldd	r31, Y+4	; 0x04
    336c:	84 81       	ldd	r24, Z+4	; 0x04
    336e:	95 81       	ldd	r25, Z+5	; 0x05
    3370:	8f 3f       	cpi	r24, 0xFF	; 255
    3372:	ff ef       	ldi	r31, 0xFF	; 255
    3374:	9f 07       	cpc	r25, r31
    3376:	09 f0       	breq	.+2      	; 0x337a <jsmn_parse+0x338>
    3378:	82 c0       	rjmp	.+260    	; 0x347e <jsmn_parse+0x43c>
    337a:	8f c1       	rjmp	.+798    	; 0x369a <jsmn_parse+0x658>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
    337c:	ec 35       	cpi	r30, 0x5C	; 92
    337e:	09 f0       	breq	.+2      	; 0x3382 <jsmn_parse+0x340>
    3380:	65 c0       	rjmp	.+202    	; 0x344c <jsmn_parse+0x40a>
    3382:	f9 01       	movw	r30, r18
    3384:	31 96       	adiw	r30, 0x01	; 1
    3386:	e4 17       	cp	r30, r20
    3388:	f5 07       	cpc	r31, r21
    338a:	08 f0       	brcs	.+2      	; 0x338e <jsmn_parse+0x34c>
    338c:	5f c0       	rjmp	.+190    	; 0x344c <jsmn_parse+0x40a>
			int i;
			parser->pos++;
    338e:	ab 81       	ldd	r26, Y+3	; 0x03
    3390:	bc 81       	ldd	r27, Y+4	; 0x04
    3392:	ed 93       	st	X+, r30
    3394:	fc 93       	st	X, r31
			switch (js[parser->pos]) {
    3396:	e6 0f       	add	r30, r22
    3398:	f7 1f       	adc	r31, r23
    339a:	e0 80       	ld	r14, Z
    339c:	4e 2c       	mov	r4, r14
    339e:	51 2c       	mov	r5, r1
    33a0:	d2 01       	movw	r26, r4
    33a2:	92 97       	sbiw	r26, 0x22	; 34
    33a4:	a4 35       	cpi	r26, 0x54	; 84
    33a6:	b1 05       	cpc	r27, r1
    33a8:	08 f0       	brcs	.+2      	; 0x33ac <jsmn_parse+0x36a>
    33aa:	4a c0       	rjmp	.+148    	; 0x3440 <jsmn_parse+0x3fe>
    33ac:	ab 5c       	subi	r26, 0xCB	; 203
    33ae:	be 4f       	sbci	r27, 0xFE	; 254
    33b0:	fd 01       	movw	r30, r26
    33b2:	b5 c4       	rjmp	.+2410   	; 0x3d1e <__tablejump2__>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
    33b4:	f9 01       	movw	r30, r18
    33b6:	32 96       	adiw	r30, 0x02	; 2
    33b8:	ab 81       	ldd	r26, Y+3	; 0x03
    33ba:	bc 81       	ldd	r27, Y+4	; 0x04
    33bc:	ed 93       	st	X+, r30
    33be:	fc 93       	st	X, r31
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    33c0:	e4 17       	cp	r30, r20
    33c2:	f5 07       	cpc	r31, r21
    33c4:	a0 f5       	brcc	.+104    	; 0x342e <jsmn_parse+0x3ec>
    33c6:	e6 0f       	add	r30, r22
    33c8:	f7 1f       	adc	r31, r23
    33ca:	f0 80       	ld	r15, Z
    33cc:	ff 20       	and	r15, r15
    33ce:	79 f1       	breq	.+94     	; 0x342e <jsmn_parse+0x3ec>
    33d0:	d9 01       	movw	r26, r18
    33d2:	13 96       	adiw	r26, 0x03	; 3
    33d4:	8b 01       	movw	r16, r22
    33d6:	0a 0f       	add	r16, r26
    33d8:	1b 1f       	adc	r17, r27
    33da:	39 01       	movw	r6, r18
    33dc:	e6 e0       	ldi	r30, 0x06	; 6
    33de:	6e 0e       	add	r6, r30
    33e0:	71 1c       	adc	r7, r1
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
    33e2:	0f 2e       	mov	r0, r31
    33e4:	f0 ed       	ldi	r31, 0xD0	; 208
    33e6:	ef 2e       	mov	r14, r31
    33e8:	f0 2d       	mov	r31, r0
    33ea:	ef 0c       	add	r14, r15
    33ec:	f9 e0       	ldi	r31, 0x09	; 9
    33ee:	fe 15       	cp	r31, r14
    33f0:	70 f4       	brcc	.+28     	; 0x340e <jsmn_parse+0x3cc>
    33f2:	2f 2d       	mov	r18, r15
    33f4:	2f 7d       	andi	r18, 0xDF	; 223
    33f6:	f2 2e       	mov	r15, r18
    33f8:	3f eb       	ldi	r19, 0xBF	; 191
    33fa:	f3 0e       	add	r15, r19
    33fc:	e5 e0       	ldi	r30, 0x05	; 5
    33fe:	ef 15       	cp	r30, r15
    3400:	30 f4       	brcc	.+12     	; 0x340e <jsmn_parse+0x3cc>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
    3402:	ab 81       	ldd	r26, Y+3	; 0x03
    3404:	bc 81       	ldd	r27, Y+4	; 0x04
    3406:	8d 93       	st	X+, r24
    3408:	9c 93       	st	X, r25
							return JSMN_ERROR_INVAL;
    340a:	8e ef       	ldi	r24, 0xFE	; 254
    340c:	98 c1       	rjmp	.+816    	; 0x373e <jsmn_parse+0x6fc>
						}
						parser->pos++;
    340e:	eb 81       	ldd	r30, Y+3	; 0x03
    3410:	fc 81       	ldd	r31, Y+4	; 0x04
    3412:	a0 83       	st	Z, r26
    3414:	b1 83       	std	Z+1, r27	; 0x01
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    3416:	a6 15       	cp	r26, r6
    3418:	b7 05       	cpc	r27, r7
    341a:	49 f0       	breq	.+18     	; 0x342e <jsmn_parse+0x3ec>
    341c:	a4 17       	cp	r26, r20
    341e:	b5 07       	cpc	r27, r21
    3420:	31 f0       	breq	.+12     	; 0x342e <jsmn_parse+0x3ec>
    3422:	f8 01       	movw	r30, r16
    3424:	f1 90       	ld	r15, Z+
    3426:	8f 01       	movw	r16, r30
    3428:	11 96       	adiw	r26, 0x01	; 1
    342a:	f1 10       	cpse	r15, r1
    342c:	da cf       	rjmp	.-76     	; 0x33e2 <jsmn_parse+0x3a0>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
    342e:	ab 81       	ldd	r26, Y+3	; 0x03
    3430:	bc 81       	ldd	r27, Y+4	; 0x04
    3432:	ed 91       	ld	r30, X+
    3434:	fc 91       	ld	r31, X
    3436:	11 97       	sbiw	r26, 0x01	; 1
    3438:	31 97       	sbiw	r30, 0x01	; 1
    343a:	ed 93       	st	X+, r30
    343c:	fc 93       	st	X, r31
    343e:	06 c0       	rjmp	.+12     	; 0x344c <jsmn_parse+0x40a>
					break;
				/* Unexpected symbol */
				default:
					parser->pos = start;
    3440:	eb 81       	ldd	r30, Y+3	; 0x03
    3442:	fc 81       	ldd	r31, Y+4	; 0x04
    3444:	80 83       	st	Z, r24
    3446:	91 83       	std	Z+1, r25	; 0x01
					return JSMN_ERROR_INVAL;
    3448:	8e ef       	ldi	r24, 0xFE	; 254
    344a:	79 c1       	rjmp	.+754    	; 0x373e <jsmn_parse+0x6fc>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    344c:	ab 81       	ldd	r26, Y+3	; 0x03
    344e:	bc 81       	ldd	r27, Y+4	; 0x04
    3450:	ed 91       	ld	r30, X+
    3452:	fc 91       	ld	r31, X
    3454:	11 97       	sbiw	r26, 0x01	; 1
    3456:	9f 01       	movw	r18, r30
    3458:	2f 5f       	subi	r18, 0xFF	; 255
    345a:	3f 4f       	sbci	r19, 0xFF	; 255
    345c:	2d 93       	st	X+, r18
    345e:	3c 93       	st	X, r19
    3460:	24 17       	cp	r18, r20
    3462:	35 07       	cpc	r19, r21
    3464:	30 f4       	brcc	.+12     	; 0x3472 <jsmn_parse+0x430>
    3466:	fb 01       	movw	r30, r22
    3468:	e2 0f       	add	r30, r18
    346a:	f3 1f       	adc	r31, r19
    346c:	e0 81       	ld	r30, Z
    346e:	e1 11       	cpse	r30, r1
    3470:	3a cf       	rjmp	.-396    	; 0x32e6 <jsmn_parse+0x2a4>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
    3472:	eb 81       	ldd	r30, Y+3	; 0x03
    3474:	fc 81       	ldd	r31, Y+4	; 0x04
    3476:	80 83       	st	Z, r24
    3478:	91 83       	std	Z+1, r25	; 0x01
	return JSMN_ERROR_PART;
    347a:	8d ef       	ldi	r24, 0xFD	; 253
    347c:	60 c1       	rjmp	.+704    	; 0x373e <jsmn_parse+0x6fc>
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
					tokens[parser->toksuper].size++;
    347e:	fc 01       	movw	r30, r24
    3480:	ee 0f       	add	r30, r30
    3482:	ff 1f       	adc	r31, r31
    3484:	ee 0f       	add	r30, r30
    3486:	ff 1f       	adc	r31, r31
    3488:	ee 0f       	add	r30, r30
    348a:	ff 1f       	adc	r31, r31
    348c:	e8 1b       	sub	r30, r24
    348e:	f9 0b       	sbc	r31, r25
    3490:	29 81       	ldd	r18, Y+1	; 0x01
    3492:	3a 81       	ldd	r19, Y+2	; 0x02
    3494:	e2 0f       	add	r30, r18
    3496:	f3 1f       	adc	r31, r19
    3498:	85 81       	ldd	r24, Z+5	; 0x05
    349a:	96 81       	ldd	r25, Z+6	; 0x06
    349c:	01 96       	adiw	r24, 0x01	; 1
    349e:	85 83       	std	Z+5, r24	; 0x05
    34a0:	96 83       	std	Z+6, r25	; 0x06
    34a2:	fb c0       	rjmp	.+502    	; 0x369a <jsmn_parse+0x658>
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
    34a4:	ab 81       	ldd	r26, Y+3	; 0x03
    34a6:	bc 81       	ldd	r27, Y+4	; 0x04
    34a8:	12 96       	adiw	r26, 0x02	; 2
    34aa:	8d 91       	ld	r24, X+
    34ac:	9c 91       	ld	r25, X
    34ae:	13 97       	sbiw	r26, 0x03	; 3
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	14 96       	adiw	r26, 0x04	; 4
    34b4:	8d 93       	st	X+, r24
    34b6:	9c 93       	st	X, r25
    34b8:	15 97       	sbiw	r26, 0x05	; 5
				break;
    34ba:	ef c0       	rjmp	.+478    	; 0x369a <jsmn_parse+0x658>
			case ',':
				if (tokens != NULL &&
    34bc:	e9 81       	ldd	r30, Y+1	; 0x01
    34be:	fa 81       	ldd	r31, Y+2	; 0x02
    34c0:	ef 2b       	or	r30, r31
    34c2:	09 f4       	brne	.+2      	; 0x34c6 <jsmn_parse+0x484>
    34c4:	ea c0       	rjmp	.+468    	; 0x369a <jsmn_parse+0x658>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
    34c6:	ab 81       	ldd	r26, Y+3	; 0x03
    34c8:	bc 81       	ldd	r27, Y+4	; 0x04
    34ca:	14 96       	adiw	r26, 0x04	; 4
    34cc:	8d 91       	ld	r24, X+
    34ce:	9c 91       	ld	r25, X
    34d0:	15 97       	sbiw	r26, 0x05	; 5
    34d2:	fc 01       	movw	r30, r24
    34d4:	ee 0f       	add	r30, r30
    34d6:	ff 1f       	adc	r31, r31
    34d8:	ee 0f       	add	r30, r30
    34da:	ff 1f       	adc	r31, r31
    34dc:	ee 0f       	add	r30, r30
    34de:	ff 1f       	adc	r31, r31
    34e0:	e8 1b       	sub	r30, r24
    34e2:	f9 0b       	sbc	r31, r25
    34e4:	29 81       	ldd	r18, Y+1	; 0x01
    34e6:	3a 81       	ldd	r19, Y+2	; 0x02
    34e8:	e2 0f       	add	r30, r18
    34ea:	f3 1f       	adc	r31, r19
    34ec:	80 81       	ld	r24, Z
    34ee:	81 50       	subi	r24, 0x01	; 1
    34f0:	82 30       	cpi	r24, 0x02	; 2
    34f2:	08 f4       	brcc	.+2      	; 0x34f6 <jsmn_parse+0x4b4>
    34f4:	d2 c0       	rjmp	.+420    	; 0x369a <jsmn_parse+0x658>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
    34f6:	12 96       	adiw	r26, 0x02	; 2
    34f8:	2d 91       	ld	r18, X+
    34fa:	3c 91       	ld	r19, X
    34fc:	13 97       	sbiw	r26, 0x03	; 3
    34fe:	c9 01       	movw	r24, r18
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	99 23       	and	r25, r25
    3504:	0c f4       	brge	.+2      	; 0x3508 <jsmn_parse+0x4c6>
    3506:	c9 c0       	rjmp	.+402    	; 0x369a <jsmn_parse+0x658>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
    3508:	f9 01       	movw	r30, r18
    350a:	ee 0f       	add	r30, r30
    350c:	ff 1f       	adc	r31, r31
    350e:	ee 0f       	add	r30, r30
    3510:	ff 1f       	adc	r31, r31
    3512:	ee 0f       	add	r30, r30
    3514:	ff 1f       	adc	r31, r31
    3516:	e2 1b       	sub	r30, r18
    3518:	f3 0b       	sbc	r31, r19
    351a:	37 97       	sbiw	r30, 0x07	; 7
    351c:	a9 81       	ldd	r26, Y+1	; 0x01
    351e:	ba 81       	ldd	r27, Y+2	; 0x02
    3520:	ea 0f       	add	r30, r26
    3522:	fb 1f       	adc	r31, r27
    3524:	10 81       	ld	r17, Z
    3526:	11 50       	subi	r17, 0x01	; 1
    3528:	12 30       	cpi	r17, 0x02	; 2
    352a:	80 f4       	brcc	.+32     	; 0x354c <jsmn_parse+0x50a>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
    352c:	01 81       	ldd	r16, Z+1	; 0x01
    352e:	12 81       	ldd	r17, Z+2	; 0x02
    3530:	0f 3f       	cpi	r16, 0xFF	; 255
    3532:	1f 4f       	sbci	r17, 0xFF	; 255
    3534:	59 f0       	breq	.+22     	; 0x354c <jsmn_parse+0x50a>
    3536:	a3 81       	ldd	r26, Z+3	; 0x03
    3538:	b4 81       	ldd	r27, Z+4	; 0x04
    353a:	11 96       	adiw	r26, 0x01	; 1
    353c:	39 f4       	brne	.+14     	; 0x354c <jsmn_parse+0x50a>
								parser->toksuper = i;
    353e:	ab 81       	ldd	r26, Y+3	; 0x03
    3540:	bc 81       	ldd	r27, Y+4	; 0x04
    3542:	14 96       	adiw	r26, 0x04	; 4
    3544:	8d 93       	st	X+, r24
    3546:	9c 93       	st	X, r25
    3548:	15 97       	sbiw	r26, 0x05	; 5
								break;
    354a:	a7 c0       	rjmp	.+334    	; 0x369a <jsmn_parse+0x658>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
    354c:	01 97       	sbiw	r24, 0x01	; 1
    354e:	37 97       	sbiw	r30, 0x07	; 7
    3550:	99 23       	and	r25, r25
    3552:	44 f7       	brge	.-48     	; 0x3524 <jsmn_parse+0x4e2>
    3554:	a2 c0       	rjmp	.+324    	; 0x369a <jsmn_parse+0x658>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    3556:	ab 81       	ldd	r26, Y+3	; 0x03
    3558:	bc 81       	ldd	r27, Y+4	; 0x04
    355a:	ed 91       	ld	r30, X+
    355c:	fc 91       	ld	r31, X
    355e:	e4 17       	cp	r30, r20
    3560:	f5 07       	cpc	r31, r21
    3562:	a8 f5       	brcc	.+106    	; 0x35ce <jsmn_parse+0x58c>
    3564:	db 01       	movw	r26, r22
    3566:	ae 0f       	add	r26, r30
    3568:	bf 1f       	adc	r27, r31
    356a:	1c 91       	ld	r17, X
    356c:	11 23       	and	r17, r17
    356e:	79 f1       	breq	.+94     	; 0x35ce <jsmn_parse+0x58c>
    3570:	df 01       	movw	r26, r30
    3572:	11 96       	adiw	r26, 0x01	; 1
    3574:	9d 01       	movw	r18, r26
    3576:	26 0f       	add	r18, r22
    3578:	37 1f       	adc	r19, r23
		switch (js[parser->pos]) {
    357a:	10 32       	cpi	r17, 0x20	; 32
    357c:	41 f1       	breq	.+80     	; 0x35ce <jsmn_parse+0x58c>
    357e:	38 f4       	brcc	.+14     	; 0x358e <jsmn_parse+0x54c>
    3580:	19 30       	cpi	r17, 0x09	; 9
    3582:	78 f0       	brcs	.+30     	; 0x35a2 <jsmn_parse+0x560>
    3584:	1b 30       	cpi	r17, 0x0B	; 11
    3586:	18 f1       	brcs	.+70     	; 0x35ce <jsmn_parse+0x58c>
    3588:	1d 30       	cpi	r17, 0x0D	; 13
    358a:	59 f4       	brne	.+22     	; 0x35a2 <jsmn_parse+0x560>
    358c:	20 c0       	rjmp	.+64     	; 0x35ce <jsmn_parse+0x58c>
    358e:	1a 33       	cpi	r17, 0x3A	; 58
    3590:	f1 f0       	breq	.+60     	; 0x35ce <jsmn_parse+0x58c>
    3592:	18 f4       	brcc	.+6      	; 0x359a <jsmn_parse+0x558>
    3594:	1c 32       	cpi	r17, 0x2C	; 44
    3596:	29 f4       	brne	.+10     	; 0x35a2 <jsmn_parse+0x560>
    3598:	1a c0       	rjmp	.+52     	; 0x35ce <jsmn_parse+0x58c>
    359a:	1d 35       	cpi	r17, 0x5D	; 93
    359c:	c1 f0       	breq	.+48     	; 0x35ce <jsmn_parse+0x58c>
    359e:	1d 37       	cpi	r17, 0x7D	; 125
    35a0:	b1 f0       	breq	.+44     	; 0x35ce <jsmn_parse+0x58c>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
    35a2:	10 52       	subi	r17, 0x20	; 32
    35a4:	1f 35       	cpi	r17, 0x5F	; 95
    35a6:	30 f0       	brcs	.+12     	; 0x35b4 <jsmn_parse+0x572>
			parser->pos = start;
    35a8:	eb 81       	ldd	r30, Y+3	; 0x03
    35aa:	fc 81       	ldd	r31, Y+4	; 0x04
    35ac:	80 83       	st	Z, r24
    35ae:	91 83       	std	Z+1, r25	; 0x01
			return JSMN_ERROR_INVAL;
    35b0:	8e ef       	ldi	r24, 0xFE	; 254
    35b2:	c5 c0       	rjmp	.+394    	; 0x373e <jsmn_parse+0x6fc>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    35b4:	31 96       	adiw	r30, 0x01	; 1
    35b6:	ab 81       	ldd	r26, Y+3	; 0x03
    35b8:	bc 81       	ldd	r27, Y+4	; 0x04
    35ba:	ed 93       	st	X+, r30
    35bc:	fc 93       	st	X, r31
    35be:	e4 17       	cp	r30, r20
    35c0:	f5 07       	cpc	r31, r21
    35c2:	28 f4       	brcc	.+10     	; 0x35ce <jsmn_parse+0x58c>
    35c4:	d9 01       	movw	r26, r18
    35c6:	1d 91       	ld	r17, X+
    35c8:	9d 01       	movw	r18, r26
    35ca:	11 11       	cpse	r17, r1
    35cc:	d6 cf       	rjmp	.-84     	; 0x357a <jsmn_parse+0x538>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
    35ce:	29 81       	ldd	r18, Y+1	; 0x01
    35d0:	3a 81       	ldd	r19, Y+2	; 0x02
    35d2:	23 2b       	or	r18, r19
    35d4:	49 f4       	brne	.+18     	; 0x35e8 <jsmn_parse+0x5a6>
		parser->pos--;
    35d6:	31 97       	sbiw	r30, 0x01	; 1
    35d8:	ab 81       	ldd	r26, Y+3	; 0x03
    35da:	bc 81       	ldd	r27, Y+4	; 0x04
    35dc:	ed 93       	st	X+, r30
    35de:	fc 93       	st	X, r31
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    35e0:	bf ef       	ldi	r27, 0xFF	; 255
    35e2:	cb 1a       	sub	r12, r27
    35e4:	db 0a       	sbc	r13, r27
    35e6:	59 c0       	rjmp	.+178    	; 0x369a <jsmn_parse+0x658>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    35e8:	eb 81       	ldd	r30, Y+3	; 0x03
    35ea:	fc 81       	ldd	r31, Y+4	; 0x04
    35ec:	22 81       	ldd	r18, Z+2	; 0x02
    35ee:	33 81       	ldd	r19, Z+3	; 0x03
    35f0:	28 15       	cp	r18, r8
    35f2:	39 05       	cpc	r19, r9
    35f4:	e8 f4       	brcc	.+58     	; 0x3630 <jsmn_parse+0x5ee>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    35f6:	f9 01       	movw	r30, r18
    35f8:	31 96       	adiw	r30, 0x01	; 1
    35fa:	ab 81       	ldd	r26, Y+3	; 0x03
    35fc:	bc 81       	ldd	r27, Y+4	; 0x04
    35fe:	12 96       	adiw	r26, 0x02	; 2
    3600:	ed 93       	st	X+, r30
    3602:	fc 93       	st	X, r31
    3604:	13 97       	sbiw	r26, 0x03	; 3
    3606:	f9 01       	movw	r30, r18
    3608:	ee 0f       	add	r30, r30
    360a:	ff 1f       	adc	r31, r31
    360c:	ee 0f       	add	r30, r30
    360e:	ff 1f       	adc	r31, r31
    3610:	ee 0f       	add	r30, r30
    3612:	ff 1f       	adc	r31, r31
    3614:	e2 1b       	sub	r30, r18
    3616:	f3 0b       	sbc	r31, r19
    3618:	29 81       	ldd	r18, Y+1	; 0x01
    361a:	3a 81       	ldd	r19, Y+2	; 0x02
    361c:	e2 0f       	add	r30, r18
    361e:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    3620:	a3 82       	std	Z+3, r10	; 0x03
    3622:	b4 82       	std	Z+4, r11	; 0x04
    3624:	a1 82       	std	Z+1, r10	; 0x01
    3626:	b2 82       	std	Z+2, r11	; 0x02
	tok->size = 0;
    3628:	15 82       	std	Z+5, r1	; 0x05
    362a:	16 82       	std	Z+6, r1	; 0x06
	if (tokens == NULL) {
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
    362c:	30 97       	sbiw	r30, 0x00	; 0
    362e:	31 f4       	brne	.+12     	; 0x363c <jsmn_parse+0x5fa>
		parser->pos = start;
    3630:	ab 81       	ldd	r26, Y+3	; 0x03
    3632:	bc 81       	ldd	r27, Y+4	; 0x04
    3634:	8d 93       	st	X+, r24
    3636:	9c 93       	st	X, r25
		return JSMN_ERROR_NOMEM;
    3638:	8f ef       	ldi	r24, 0xFF	; 255
    363a:	81 c0       	rjmp	.+258    	; 0x373e <jsmn_parse+0x6fc>
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
    363c:	ab 81       	ldd	r26, Y+3	; 0x03
    363e:	bc 81       	ldd	r27, Y+4	; 0x04
    3640:	2d 91       	ld	r18, X+
    3642:	3c 91       	ld	r19, X
    3644:	11 97       	sbiw	r26, 0x01	; 1
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    3646:	10 82       	st	Z, r1
	token->start = start;
    3648:	81 83       	std	Z+1, r24	; 0x01
    364a:	92 83       	std	Z+2, r25	; 0x02
	token->end = end;
    364c:	23 83       	std	Z+3, r18	; 0x03
    364e:	34 83       	std	Z+4, r19	; 0x04
	token->size = 0;
    3650:	15 82       	std	Z+5, r1	; 0x05
    3652:	16 82       	std	Z+6, r1	; 0x06
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
    3654:	8d 91       	ld	r24, X+
    3656:	9c 91       	ld	r25, X
    3658:	11 97       	sbiw	r26, 0x01	; 1
    365a:	01 97       	sbiw	r24, 0x01	; 1
    365c:	8d 93       	st	X+, r24
    365e:	9c 93       	st	X, r25
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    3660:	bf ef       	ldi	r27, 0xFF	; 255
    3662:	cb 1a       	sub	r12, r27
    3664:	db 0a       	sbc	r13, r27
				if (parser->toksuper != -1 && tokens != NULL)
    3666:	eb 81       	ldd	r30, Y+3	; 0x03
    3668:	fc 81       	ldd	r31, Y+4	; 0x04
    366a:	84 81       	ldd	r24, Z+4	; 0x04
    366c:	95 81       	ldd	r25, Z+5	; 0x05
    366e:	8f 3f       	cpi	r24, 0xFF	; 255
    3670:	ff ef       	ldi	r31, 0xFF	; 255
    3672:	9f 07       	cpc	r25, r31
    3674:	91 f0       	breq	.+36     	; 0x369a <jsmn_parse+0x658>
					tokens[parser->toksuper].size++;
    3676:	fc 01       	movw	r30, r24
    3678:	ee 0f       	add	r30, r30
    367a:	ff 1f       	adc	r31, r31
    367c:	ee 0f       	add	r30, r30
    367e:	ff 1f       	adc	r31, r31
    3680:	ee 0f       	add	r30, r30
    3682:	ff 1f       	adc	r31, r31
    3684:	e8 1b       	sub	r30, r24
    3686:	f9 0b       	sbc	r31, r25
    3688:	29 81       	ldd	r18, Y+1	; 0x01
    368a:	3a 81       	ldd	r19, Y+2	; 0x02
    368c:	e2 0f       	add	r30, r18
    368e:	f3 1f       	adc	r31, r19
    3690:	85 81       	ldd	r24, Z+5	; 0x05
    3692:	96 81       	ldd	r25, Z+6	; 0x06
    3694:	01 96       	adiw	r24, 0x01	; 1
    3696:	85 83       	std	Z+5, r24	; 0x05
    3698:	96 83       	std	Z+6, r25	; 0x06
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    369a:	ab 81       	ldd	r26, Y+3	; 0x03
    369c:	bc 81       	ldd	r27, Y+4	; 0x04
    369e:	8d 91       	ld	r24, X+
    36a0:	9c 91       	ld	r25, X
    36a2:	11 97       	sbiw	r26, 0x01	; 1
    36a4:	01 96       	adiw	r24, 0x01	; 1
    36a6:	8d 93       	st	X+, r24
    36a8:	9c 93       	st	X, r25
    36aa:	84 17       	cp	r24, r20
    36ac:	95 07       	cpc	r25, r21
    36ae:	60 f4       	brcc	.+24     	; 0x36c8 <jsmn_parse+0x686>
    36b0:	fb 01       	movw	r30, r22
    36b2:	e8 0f       	add	r30, r24
    36b4:	f9 1f       	adc	r31, r25
    36b6:	10 81       	ld	r17, Z
    36b8:	11 11       	cpse	r17, r1
    36ba:	f4 cc       	rjmp	.-1560   	; 0x30a4 <jsmn_parse+0x62>
    36bc:	05 c0       	rjmp	.+10     	; 0x36c8 <jsmn_parse+0x686>
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;
    36be:	c1 2c       	mov	r12, r1
    36c0:	d1 2c       	mov	r13, r1
    36c2:	02 c0       	rjmp	.+4      	; 0x36c8 <jsmn_parse+0x686>
    36c4:	c1 2c       	mov	r12, r1
    36c6:	d1 2c       	mov	r13, r1
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    36c8:	eb 81       	ldd	r30, Y+3	; 0x03
    36ca:	fc 81       	ldd	r31, Y+4	; 0x04
    36cc:	42 81       	ldd	r20, Z+2	; 0x02
    36ce:	53 81       	ldd	r21, Z+3	; 0x03
    36d0:	ca 01       	movw	r24, r20
    36d2:	01 97       	sbiw	r24, 0x01	; 1
    36d4:	99 23       	and	r25, r25
    36d6:	ec f0       	brlt	.+58     	; 0x3712 <jsmn_parse+0x6d0>
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
    36d8:	fa 01       	movw	r30, r20
    36da:	ee 0f       	add	r30, r30
    36dc:	ff 1f       	adc	r31, r31
    36de:	ee 0f       	add	r30, r30
    36e0:	ff 1f       	adc	r31, r31
    36e2:	ee 0f       	add	r30, r30
    36e4:	ff 1f       	adc	r31, r31
    36e6:	e4 1b       	sub	r30, r20
    36e8:	f5 0b       	sbc	r31, r21
    36ea:	29 81       	ldd	r18, Y+1	; 0x01
    36ec:	3a 81       	ldd	r19, Y+2	; 0x02
    36ee:	2e 0f       	add	r18, r30
    36f0:	3f 1f       	adc	r19, r31
    36f2:	f9 01       	movw	r30, r18
    36f4:	36 97       	sbiw	r30, 0x06	; 6
    36f6:	20 81       	ld	r18, Z
    36f8:	31 81       	ldd	r19, Z+1	; 0x01
    36fa:	2f 3f       	cpi	r18, 0xFF	; 255
    36fc:	3f 4f       	sbci	r19, 0xFF	; 255
    36fe:	29 f0       	breq	.+10     	; 0x370a <jsmn_parse+0x6c8>
    3700:	22 81       	ldd	r18, Z+2	; 0x02
    3702:	33 81       	ldd	r19, Z+3	; 0x03
    3704:	2f 3f       	cpi	r18, 0xFF	; 255
    3706:	3f 4f       	sbci	r19, 0xFF	; 255
    3708:	71 f0       	breq	.+28     	; 0x3726 <jsmn_parse+0x6e4>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	37 97       	sbiw	r30, 0x07	; 7
    370e:	99 23       	and	r25, r25
    3710:	94 f7       	brge	.-28     	; 0x36f6 <jsmn_parse+0x6b4>
		if (tokens[i].start != -1 && tokens[i].end == -1) {
			return JSMN_ERROR_PART;
		}
	}

	return count;
    3712:	8c 2d       	mov	r24, r12
    3714:	14 c0       	rjmp	.+40     	; 0x373e <jsmn_parse+0x6fc>
				if (tokens == NULL) {
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
					return JSMN_ERROR_NOMEM;
    3716:	8f ef       	ldi	r24, 0xFF	; 255
    3718:	12 c0       	rjmp	.+36     	; 0x373e <jsmn_parse+0x6fc>
    371a:	8f ef       	ldi	r24, 0xFF	; 255
    371c:	10 c0       	rjmp	.+32     	; 0x373e <jsmn_parse+0x6fc>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
    371e:	8e ef       	ldi	r24, 0xFE	; 254
    3720:	0e c0       	rjmp	.+28     	; 0x373e <jsmn_parse+0x6fc>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
    3722:	8e ef       	ldi	r24, 0xFE	; 254
    3724:	0c c0       	rjmp	.+24     	; 0x373e <jsmn_parse+0x6fc>
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
			return JSMN_ERROR_PART;
    3726:	8d ef       	ldi	r24, 0xFD	; 253
    3728:	0a c0       	rjmp	.+20     	; 0x373e <jsmn_parse+0x6fc>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
    372a:	8e ef       	ldi	r24, 0xFE	; 254
    372c:	08 c0       	rjmp	.+16     	; 0x373e <jsmn_parse+0x6fc>
    372e:	31 96       	adiw	r30, 0x01	; 1
    3730:	09 f0       	breq	.+2      	; 0x3734 <jsmn_parse+0x6f2>
    3732:	b3 cf       	rjmp	.-154    	; 0x369a <jsmn_parse+0x658>
    3734:	fa cf       	rjmp	.-12     	; 0x372a <jsmn_parse+0x6e8>
#endif
				break;
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    3736:	ef ef       	ldi	r30, 0xFF	; 255
    3738:	ce 1a       	sub	r12, r30
    373a:	de 0a       	sbc	r13, r30
    373c:	ae cf       	rjmp	.-164    	; 0x369a <jsmn_parse+0x658>
			return JSMN_ERROR_PART;
		}
	}

	return count;
}
    373e:	24 96       	adiw	r28, 0x04	; 4
    3740:	cd bf       	out	0x3d, r28	; 61
    3742:	de bf       	out	0x3e, r29	; 62
    3744:	df 91       	pop	r29
    3746:	cf 91       	pop	r28
    3748:	1f 91       	pop	r17
    374a:	0f 91       	pop	r16
    374c:	ff 90       	pop	r15
    374e:	ef 90       	pop	r14
    3750:	df 90       	pop	r13
    3752:	cf 90       	pop	r12
    3754:	bf 90       	pop	r11
    3756:	af 90       	pop	r10
    3758:	9f 90       	pop	r9
    375a:	8f 90       	pop	r8
    375c:	7f 90       	pop	r7
    375e:	6f 90       	pop	r6
    3760:	5f 90       	pop	r5
    3762:	4f 90       	pop	r4
    3764:	3f 90       	pop	r3
    3766:	08 95       	ret

00003768 <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
    3768:	fc 01       	movw	r30, r24
	parser->pos = 0;
    376a:	10 82       	st	Z, r1
    376c:	11 82       	std	Z+1, r1	; 0x01
	parser->toknext = 0;
    376e:	12 82       	std	Z+2, r1	; 0x02
    3770:	13 82       	std	Z+3, r1	; 0x03
	parser->toksuper = -1;
    3772:	8f ef       	ldi	r24, 0xFF	; 255
    3774:	9f ef       	ldi	r25, 0xFF	; 255
    3776:	84 83       	std	Z+4, r24	; 0x04
    3778:	95 83       	std	Z+5, r25	; 0x05
    377a:	08 95       	ret

0000377c <sd_card>:
		load_wav(&Fil, "**** WAV PLAYER ****", Buff, sizeof Buff);
		f_close(&Fil);
	}	
}

void sd_card(void) {
    377c:	cf 93       	push	r28
    377e:	df 93       	push	r29
    3780:	00 d0       	rcall	.+0      	; 0x3782 <sd_card+0x6>
    3782:	cd b7       	in	r28, 0x3d	; 61
    3784:	de b7       	in	r29, 0x3e	; 62
	UINT bw;
	
	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
    3786:	40 e0       	ldi	r20, 0x00	; 0
    3788:	60 e5       	ldi	r22, 0x50	; 80
    378a:	71 e2       	ldi	r23, 0x21	; 33
    378c:	8c e4       	ldi	r24, 0x4C	; 76
    378e:	94 e2       	ldi	r25, 0x24	; 36
    3790:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <f_mount>
	
	if (f_open(&Fil, "newfilea.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {	/* Create a file */
    3794:	4a e0       	ldi	r20, 0x0A	; 10
    3796:	62 ed       	ldi	r22, 0xD2	; 210
    3798:	71 e2       	ldi	r23, 0x21	; 33
    379a:	8e e7       	ldi	r24, 0x7E	; 126
    379c:	9e e2       	ldi	r25, 0x2E	; 46
    379e:	0e 94 17 10 	call	0x202e	; 0x202e <f_open>
    37a2:	81 11       	cpse	r24, r1
    37a4:	0f c0       	rjmp	.+30     	; 0x37c4 <sd_card+0x48>
		
		f_write(&Fil, "It works!\r\n", 11, &bw);	/* Write data to the file */
    37a6:	9e 01       	movw	r18, r28
    37a8:	2f 5f       	subi	r18, 0xFF	; 255
    37aa:	3f 4f       	sbci	r19, 0xFF	; 255
    37ac:	4b e0       	ldi	r20, 0x0B	; 11
    37ae:	50 e0       	ldi	r21, 0x00	; 0
    37b0:	6f ed       	ldi	r22, 0xDF	; 223
    37b2:	71 e2       	ldi	r23, 0x21	; 33
    37b4:	8e e7       	ldi	r24, 0x7E	; 126
    37b6:	9e e2       	ldi	r25, 0x2E	; 46
    37b8:	0e 94 27 11 	call	0x224e	; 0x224e <f_write>
		
		f_close(&Fil);								/* Close the file */
    37bc:	8e e7       	ldi	r24, 0x7E	; 126
    37be:	9e e2       	ldi	r25, 0x2E	; 46
    37c0:	0e 94 02 13 	call	0x2604	; 0x2604 <f_close>
	}
}
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	df 91       	pop	r29
    37ca:	cf 91       	pop	r28
    37cc:	08 95       	ret

000037ce <remove_substring>:

void remove_substring(char *src, char *sub)
{
    37ce:	cf 93       	push	r28
    37d0:	df 93       	push	r29
    37d2:	eb 01       	movw	r28, r22
	char *p;
	if ((p=strstr(src,sub)) != NULL)
    37d4:	df d2       	rcall	.+1470   	; 0x3d94 <strstr>
    37d6:	00 97       	sbiw	r24, 0x00	; 0
    37d8:	91 f0       	breq	.+36     	; 0x37fe <remove_substring+0x30>
	{
		memmove(p,p+strlen(sub), strlen(p+strlen(sub))+1);
    37da:	fe 01       	movw	r30, r28
    37dc:	01 90       	ld	r0, Z+
    37de:	00 20       	and	r0, r0
    37e0:	e9 f7       	brne	.-6      	; 0x37dc <remove_substring+0xe>
    37e2:	31 97       	sbiw	r30, 0x01	; 1
    37e4:	bf 01       	movw	r22, r30
    37e6:	6c 1b       	sub	r22, r28
    37e8:	7d 0b       	sbc	r23, r29
    37ea:	68 0f       	add	r22, r24
    37ec:	79 1f       	adc	r23, r25
    37ee:	fb 01       	movw	r30, r22
    37f0:	01 90       	ld	r0, Z+
    37f2:	00 20       	and	r0, r0
    37f4:	e9 f7       	brne	.-6      	; 0x37f0 <remove_substring+0x22>
    37f6:	af 01       	movw	r20, r30
    37f8:	46 1b       	sub	r20, r22
    37fa:	57 0b       	sbc	r21, r23
    37fc:	af d2       	rcall	.+1374   	; 0x3d5c <memmove>

		// alternative
		// strcpy(p,p+strlen(sub));
	}
}
    37fe:	df 91       	pop	r29
    3800:	cf 91       	pop	r28
    3802:	08 95       	ret

00003804 <main>:

int main(void) {
    3804:	cf 93       	push	r28
    3806:	df 93       	push	r29
    3808:	cd b7       	in	r28, 0x3d	; 61
    380a:	de b7       	in	r29, 0x3e	; 62
    380c:	c2 5c       	subi	r28, 0xC2	; 194
    380e:	d2 40       	sbci	r29, 0x02	; 2
    3810:	cd bf       	out	0x3d, r28	; 61
    3812:	de bf       	out	0x3e, r29	; 62
	char *js;
	char *js2;
	char *js3;
	jsmnerr_t r;
	
	clock_setup_32_mhz();
    3814:	0e 94 a9 01 	call	0x352	; 0x352 <clock_setup_32_mhz>
	ht1632c_begin(HT1632_COMMON_16NMOS);
    3818:	84 e2       	ldi	r24, 0x24	; 36
    381a:	f1 db       	rcall	.-2078   	; 0x2ffe <ht1632c_begin>
	ht1632c_setBrightness(0);
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	0b dc       	rcall	.-2026   	; 0x3036 <ht1632c_setBrightness>
	ht1632c_clearScreen();
    3820:	d2 db       	rcall	.-2140   	; 0x2fc6 <ht1632c_clearScreen>
	//ht1632c_fillScreen();
	//adc_setup();
	uart_setup();
    3822:	2c d2       	rcall	.+1112   	; 0x3c7c <uart_setup>
void uart_put_char(char c);
static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) {
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    3824:	87 e0       	ldi	r24, 0x07	; 7
    3826:	e0 ea       	ldi	r30, 0xA0	; 160
    3828:	f0 e0       	ldi	r31, 0x00	; 0
    382a:	82 83       	std	Z+2, r24	; 0x02
	ht1632c_clearScreen();
	//ht1632c_fillScreen();
	//adc_setup();
	uart_setup();
	pmic_setup();
	i2c_setup();
    382c:	13 d1       	rcall	.+550    	; 0x3a54 <i2c_setup>
	btn_setup();
    382e:	62 d0       	rcall	.+196    	; 0x38f4 <btn_setup>
	rtc_setup();
    3830:	91 d0       	rcall	.+290    	; 0x3954 <rtc_setup>
	jsmn_init(&parser);
    3832:	ce 01       	movw	r24, r28
    3834:	01 96       	adiw	r24, 0x01	; 1
    3836:	98 df       	rcall	.-208    	; 0x3768 <jsmn_init>
	
	stdout = stdin = &mystdout;
    3838:	85 e0       	ldi	r24, 0x05	; 5
    383a:	90 e2       	ldi	r25, 0x20	; 32
    383c:	80 93 a5 2e 	sts	0x2EA5, r24
    3840:	90 93 a6 2e 	sts	0x2EA6, r25
    3844:	80 93 a7 2e 	sts	0x2EA7, r24
    3848:	90 93 a8 2e 	sts	0x2EA8, r25
	
	sd_card();
    384c:	97 df       	rcall	.-210    	; 0x377c <sd_card>
	
	//_delay_ms(5000);
	
	si114x_reset(SI114X_ADDR);
    384e:	8a e5       	ldi	r24, 0x5A	; 90
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	c2 d1       	rcall	.+900    	; 0x3bd8 <si114x_reset>
	//TCC1.PERH = 0x0C;
	//TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
	
	//init_time();
	
	sei();
    3854:	78 94       	sei
	
	
	//js = "sfdsf";
	//r = jsmn_parse(&parser, js, strlen(js), tokens, 256);

	esp8266_on();
    3856:	0e 94 59 03 	call	0x6b2	; 0x6b2 <esp8266_on>
	esp8266_setup();
    385a:	0e 94 b7 01 	call	0x36e	; 0x36e <esp8266_setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    385e:	2a ea       	ldi	r18, 0xAA	; 170
    3860:	36 ee       	ldi	r19, 0xE6	; 230
    3862:	86 e9       	ldi	r24, 0x96	; 150
    3864:	91 e0       	ldi	r25, 0x01	; 1
    3866:	21 50       	subi	r18, 0x01	; 1
    3868:	30 40       	sbci	r19, 0x00	; 0
    386a:	80 40       	sbci	r24, 0x00	; 0
    386c:	90 40       	sbci	r25, 0x00	; 0
    386e:	d9 f7       	brne	.-10     	; 0x3866 <main+0x62>
    3870:	00 00       	nop
	_delay_ms(5000);
	esp8266_off();
    3872:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <esp8266_off>
	js = strchr(rx_buffer,'{');
    3876:	6b e7       	ldi	r22, 0x7B	; 123
    3878:	70 e0       	ldi	r23, 0x00	; 0
    387a:	85 e0       	ldi	r24, 0x05	; 5
    387c:	92 e2       	ldi	r25, 0x22	; 34
    387e:	7f d2       	rcall	.+1278   	; 0x3d7e <strchr>
    3880:	7c 01       	movw	r14, r24
    js2 = strchr(js,'}');
    3882:	6d e7       	ldi	r22, 0x7D	; 125
    3884:	70 e0       	ldi	r23, 0x00	; 0
    3886:	7b d2       	rcall	.+1270   	; 0x3d7e <strchr>
	*js2++;
    3888:	bc 01       	movw	r22, r24
    388a:	6f 5f       	subi	r22, 0xFF	; 255
    388c:	7f 4f       	sbci	r23, 0xFF	; 255

	remove_substring(js,js2);
    388e:	c7 01       	movw	r24, r14
    3890:	9e df       	rcall	.-196    	; 0x37ce <remove_substring>
	
	puts("DONE");
    3892:	8b ee       	ldi	r24, 0xEB	; 235
    3894:	91 e2       	ldi	r25, 0x21	; 33
    3896:	98 d2       	rcall	.+1328   	; 0x3dc8 <puts>
	puts(js);
    3898:	c7 01       	movw	r24, r14
    389a:	96 d2       	rcall	.+1324   	; 0x3dc8 <puts>
	
	r = jsmn_parse(&parser, js, strlen(js), tokens, 100);
    389c:	f7 01       	movw	r30, r14
    389e:	01 90       	ld	r0, Z+
    38a0:	00 20       	and	r0, r0
    38a2:	e9 f7       	brne	.-6      	; 0x389e <main+0x9a>
    38a4:	31 97       	sbiw	r30, 0x01	; 1
    38a6:	af 01       	movw	r20, r30
    38a8:	4e 19       	sub	r20, r14
    38aa:	5f 09       	sbc	r21, r15
    38ac:	04 e6       	ldi	r16, 0x64	; 100
    38ae:	10 e0       	ldi	r17, 0x00	; 0
    38b0:	9e 01       	movw	r18, r28
    38b2:	29 5f       	subi	r18, 0xF9	; 249
    38b4:	3f 4f       	sbci	r19, 0xFF	; 255
    38b6:	b7 01       	movw	r22, r14
    38b8:	ce 01       	movw	r24, r28
    38ba:	01 96       	adiw	r24, 0x01	; 1
    38bc:	c2 db       	rcall	.-2172   	; 0x3042 <jsmn_parse>
	
	puts("done");
    38be:	80 ef       	ldi	r24, 0xF0	; 240
    38c0:	91 e2       	ldi	r25, 0x21	; 33
    38c2:	82 d2       	rcall	.+1284   	; 0x3dc8 <puts>
    38c4:	ff cf       	rjmp	.-2      	; 0x38c4 <main+0xc0>

000038c6 <__vector_20>:
	}
	
}

//Used for SI114x Timestamp
ISR(TCC1_OVF_vect) {
    38c6:	1f 92       	push	r1
    38c8:	0f 92       	push	r0
    38ca:	0f b6       	in	r0, 0x3f	; 63
    38cc:	0f 92       	push	r0
    38ce:	11 24       	eor	r1, r1
    38d0:	8f 93       	push	r24
    38d2:	9f 93       	push	r25
	counter++;	
    38d4:	80 91 03 22 	lds	r24, 0x2203
    38d8:	90 91 04 22 	lds	r25, 0x2204
    38dc:	01 96       	adiw	r24, 0x01	; 1
    38de:	80 93 03 22 	sts	0x2203, r24
    38e2:	90 93 04 22 	sts	0x2204, r25
    38e6:	9f 91       	pop	r25
    38e8:	8f 91       	pop	r24
    38ea:	0f 90       	pop	r0
    38ec:	0f be       	out	0x3f, r0	; 63
    38ee:	0f 90       	pop	r0
    38f0:	1f 90       	pop	r1
    38f2:	18 95       	reti

000038f4 <btn_setup>:
	} else if (!(PORTB.IN & PIN0_bm)) {
		return BTN4;
	} else {
		return NONE;
	}
}
    38f4:	80 ee       	ldi	r24, 0xE0	; 224
    38f6:	e0 e0       	ldi	r30, 0x00	; 0
    38f8:	f6 e0       	ldi	r31, 0x06	; 6
    38fa:	82 83       	std	Z+2, r24	; 0x02
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	e0 e2       	ldi	r30, 0x20	; 32
    3900:	f6 e0       	ldi	r31, 0x06	; 6
    3902:	82 83       	std	Z+2, r24	; 0x02
    3904:	08 95       	ret

00003906 <__vector_66>:

ISR(PORTA_INT0_vect) {
    3906:	1f 92       	push	r1
    3908:	0f 92       	push	r0
    390a:	0f b6       	in	r0, 0x3f	; 63
    390c:	0f 92       	push	r0
    390e:	11 24       	eor	r1, r1
    3910:	0b b6       	in	r0, 0x3b	; 59
    3912:	0f 92       	push	r0
    3914:	2f 93       	push	r18
    3916:	3f 93       	push	r19
    3918:	4f 93       	push	r20
    391a:	5f 93       	push	r21
    391c:	6f 93       	push	r22
    391e:	7f 93       	push	r23
    3920:	8f 93       	push	r24
    3922:	9f 93       	push	r25
    3924:	af 93       	push	r26
    3926:	bf 93       	push	r27
    3928:	ef 93       	push	r30
    392a:	ff 93       	push	r31
	ht1632c_clearScreen();
    392c:	4c db       	rcall	.-2408   	; 0x2fc6 <ht1632c_clearScreen>
    392e:	ff 91       	pop	r31
    3930:	ef 91       	pop	r30
    3932:	bf 91       	pop	r27
    3934:	af 91       	pop	r26
    3936:	9f 91       	pop	r25
    3938:	8f 91       	pop	r24
    393a:	7f 91       	pop	r23
    393c:	6f 91       	pop	r22
    393e:	5f 91       	pop	r21
    3940:	4f 91       	pop	r20
    3942:	3f 91       	pop	r19
    3944:	2f 91       	pop	r18
    3946:	0f 90       	pop	r0
    3948:	0b be       	out	0x3b, r0	; 59
    394a:	0f 90       	pop	r0
    394c:	0f be       	out	0x3f, r0	; 63
    394e:	0f 90       	pop	r0
    3950:	1f 90       	pop	r1
    3952:	18 95       	reti

00003954 <rtc_setup>:
void update_time(void) {
	if (time.seconds == 59) {
		int_to_string(BOTTOM,time.minutes);
	}
	if (time.minutes == 59) {
		int_to_string(TOP,time.hours);
    3954:	88 ed       	ldi	r24, 0xD8	; 216
    3956:	84 bf       	out	0x34, r24	; 52
    3958:	8b e0       	ldi	r24, 0x0B	; 11
    395a:	e0 e4       	ldi	r30, 0x40	; 64
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	83 83       	std	Z+3, r24	; 0x03
    3960:	e0 e0       	ldi	r30, 0x00	; 0
    3962:	f4 e0       	ldi	r31, 0x04	; 4
    3964:	81 81       	ldd	r24, Z+1	; 0x01
    3966:	80 fd       	sbrc	r24, 0
    3968:	fd cf       	rjmp	.-6      	; 0x3964 <rtc_setup+0x10>
    396a:	e0 e0       	ldi	r30, 0x00	; 0
    396c:	f4 e0       	ldi	r31, 0x04	; 4
    396e:	84 e6       	ldi	r24, 0x64	; 100
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	82 87       	std	Z+10, r24	; 0x0a
    3974:	93 87       	std	Z+11, r25	; 0x0b
    3976:	82 e0       	ldi	r24, 0x02	; 2
    3978:	82 83       	std	Z+2, r24	; 0x02
    397a:	10 86       	std	Z+8, r1	; 0x08
    397c:	11 86       	std	Z+9, r1	; 0x09
    397e:	14 86       	std	Z+12, r1	; 0x0c
    3980:	15 86       	std	Z+13, r1	; 0x0d
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	80 83       	st	Z, r24
    3986:	08 95       	ret

00003988 <__vector_10>:
	ht1632c_drawChar(9,pos,buffer[1],1,1);
	
	ht1632c_writeScreen();
}

ISR(RTC_OVF_vect) {
    3988:	1f 92       	push	r1
    398a:	0f 92       	push	r0
    398c:	0f b6       	in	r0, 0x3f	; 63
    398e:	0f 92       	push	r0
    3990:	11 24       	eor	r1, r1
    3992:	0b b6       	in	r0, 0x3b	; 59
    3994:	0f 92       	push	r0
    3996:	2f 93       	push	r18
    3998:	3f 93       	push	r19
    399a:	4f 93       	push	r20
    399c:	8f 93       	push	r24
    399e:	9f 93       	push	r25
    39a0:	af 93       	push	r26
    39a2:	bf 93       	push	r27
    39a4:	ef 93       	push	r30
    39a6:	ff 93       	push	r31
	time.seconds++;
    39a8:	ae e9       	ldi	r26, 0x9E	; 158
    39aa:	be e2       	ldi	r27, 0x2E	; 46
    39ac:	4c 91       	ld	r20, X
    39ae:	4f 5f       	subi	r20, 0xFF	; 255
	time.minutes += time.seconds / 60;
    39b0:	99 e8       	ldi	r25, 0x89	; 137
    39b2:	49 9f       	mul	r20, r25
    39b4:	31 2d       	mov	r19, r1
    39b6:	11 24       	eor	r1, r1
    39b8:	32 95       	swap	r19
    39ba:	36 95       	lsr	r19
    39bc:	37 70       	andi	r19, 0x07	; 7
    39be:	ef e9       	ldi	r30, 0x9F	; 159
    39c0:	fe e2       	ldi	r31, 0x2E	; 46
    39c2:	20 81       	ld	r18, Z
    39c4:	23 0f       	add	r18, r19
	time.seconds %= 60;
    39c6:	8c e3       	ldi	r24, 0x3C	; 60
    39c8:	38 9f       	mul	r19, r24
    39ca:	40 19       	sub	r20, r0
    39cc:	11 24       	eor	r1, r1
    39ce:	4c 93       	st	X, r20
	time.hours += time.minutes / 60;
    39d0:	a0 ea       	ldi	r26, 0xA0	; 160
    39d2:	be e2       	ldi	r27, 0x2E	; 46
    39d4:	29 9f       	mul	r18, r25
    39d6:	91 2d       	mov	r25, r1
    39d8:	11 24       	eor	r1, r1
    39da:	92 95       	swap	r25
    39dc:	96 95       	lsr	r25
    39de:	97 70       	andi	r25, 0x07	; 7
    39e0:	3c 91       	ld	r19, X
    39e2:	39 0f       	add	r19, r25
    39e4:	3c 93       	st	X, r19
	time.minutes %= 60;
    39e6:	98 9f       	mul	r25, r24
    39e8:	20 19       	sub	r18, r0
    39ea:	11 24       	eor	r1, r1
    39ec:	20 83       	st	Z, r18
}
    39ee:	ff 91       	pop	r31
    39f0:	ef 91       	pop	r30
    39f2:	bf 91       	pop	r27
    39f4:	af 91       	pop	r26
    39f6:	9f 91       	pop	r25
    39f8:	8f 91       	pop	r24
    39fa:	4f 91       	pop	r20
    39fc:	3f 91       	pop	r19
    39fe:	2f 91       	pop	r18
    3a00:	0f 90       	pop	r0
    3a02:	0b be       	out	0x3b, r0	; 59
    3a04:	0f 90       	pop	r0
    3a06:	0f be       	out	0x3f, r0	; 63
    3a08:	0f 90       	pop	r0
    3a0a:	1f 90       	pop	r1
    3a0c:	18 95       	reti

00003a0e <spi_on>:
#include "sercom.h"
#include <util/delay.h>

void spi_on(void) {
	
	PORTC.DIRSET = CS | MOSI | SCK;	
    3a0e:	e0 e4       	ldi	r30, 0x40	; 64
    3a10:	f6 e0       	ldi	r31, 0x06	; 6
    3a12:	80 eb       	ldi	r24, 0xB0	; 176
    3a14:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET = CS;	
    3a16:	80 e1       	ldi	r24, 0x10	; 16
    3a18:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    3a1a:	80 ed       	ldi	r24, 0xD0	; 208
    3a1c:	80 93 c0 08 	sts	0x08C0, r24
    3a20:	08 95       	ret

00003a22 <spi_off>:
}

void spi_off(void) {
	
	SPIC.CTRL &= ~(SPI_ENABLE_bm);
    3a22:	e0 ec       	ldi	r30, 0xC0	; 192
    3a24:	f8 e0       	ldi	r31, 0x08	; 8
    3a26:	80 81       	ld	r24, Z
    3a28:	8f 7b       	andi	r24, 0xBF	; 191
    3a2a:	80 83       	st	Z, r24
	PORTC.DIRCLR = CS | MOSI | SCK;
    3a2c:	e0 e4       	ldi	r30, 0x40	; 64
    3a2e:	f6 e0       	ldi	r31, 0x06	; 6
    3a30:	80 eb       	ldi	r24, 0xB0	; 176
    3a32:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;
    3a34:	88 e1       	ldi	r24, 0x18	; 24
    3a36:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;
    3a38:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;
    3a3a:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;
    3a3c:	87 8b       	std	Z+23, r24	; 0x17
    3a3e:	08 95       	ret

00003a40 <spi_wr_rd>:
}

uint8_t spi_wr_rd(uint8_t spi_data) {
	
	SPIC.DATA = spi_data;
    3a40:	e0 ec       	ldi	r30, 0xC0	; 192
    3a42:	f8 e0       	ldi	r31, 0x08	; 8
    3a44:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIC.STATUS & SPI_IF_bm));
    3a46:	82 81       	ldd	r24, Z+2	; 0x02
    3a48:	88 23       	and	r24, r24
    3a4a:	ec f7       	brge	.-6      	; 0x3a46 <spi_wr_rd+0x6>
	return SPIC.DATA;
    3a4c:	e0 ec       	ldi	r30, 0xC0	; 192
    3a4e:	f8 e0       	ldi	r31, 0x08	; 8
    3a50:	83 81       	ldd	r24, Z+3	; 0x03
}
    3a52:	08 95       	ret

00003a54 <i2c_setup>:

void i2c_setup(void) {
	//TWIC.CTRL = TWI_SDAHOLD_50NS_gc;
	TWIC.MASTER.CTRLB = TWI_MASTER_SMEN_bm; //| TWI_MASTER_TIMEOUT1_bm;
    3a54:	e0 e8       	ldi	r30, 0x80	; 128
    3a56:	f4 e0       	ldi	r31, 0x04	; 4
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	82 83       	std	Z+2, r24	; 0x02
	TWIC.MASTER.BAUD = 50;
    3a5c:	92 e3       	ldi	r25, 0x32	; 50
    3a5e:	95 83       	std	Z+5, r25	; 0x05
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
    3a60:	98 e0       	ldi	r25, 0x08	; 8
    3a62:	91 83       	std	Z+1, r25	; 0x01
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    3a64:	84 83       	std	Z+4, r24	; 0x04
    3a66:	08 95       	ret

00003a68 <i2c_write_data>:
}

uint8_t i2c_write_data(uint8_t slave_addr, uint8_t register_addr, uint8_t data) {
	
	TWIC.MASTER.ADDR = (slave_addr << 1);
    3a68:	88 0f       	add	r24, r24
    3a6a:	e0 e8       	ldi	r30, 0x80	; 128
    3a6c:	f4 e0       	ldi	r31, 0x04	; 4
    3a6e:	86 83       	std	Z+6, r24	; 0x06
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    3a70:	84 81       	ldd	r24, Z+4	; 0x04
    3a72:	86 ff       	sbrs	r24, 6
    3a74:	fd cf       	rjmp	.-6      	; 0x3a70 <i2c_write_data+0x8>
	TWIC.MASTER.DATA = register_addr;
    3a76:	e0 e8       	ldi	r30, 0x80	; 128
    3a78:	f4 e0       	ldi	r31, 0x04	; 4
    3a7a:	67 83       	std	Z+7, r22	; 0x07
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    3a7c:	84 81       	ldd	r24, Z+4	; 0x04
    3a7e:	86 ff       	sbrs	r24, 6
    3a80:	fd cf       	rjmp	.-6      	; 0x3a7c <i2c_write_data+0x14>
	TWIC.MASTER.DATA = data;
    3a82:	e0 e8       	ldi	r30, 0x80	; 128
    3a84:	f4 e0       	ldi	r31, 0x04	; 4
    3a86:	47 83       	std	Z+7, r20	; 0x07
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    3a88:	84 81       	ldd	r24, Z+4	; 0x04
    3a8a:	86 ff       	sbrs	r24, 6
    3a8c:	fd cf       	rjmp	.-6      	; 0x3a88 <i2c_write_data+0x20>
	
	TWIC.MASTER.CTRLC = 0x03; //Stop
    3a8e:	83 e0       	ldi	r24, 0x03	; 3
    3a90:	e0 e8       	ldi	r30, 0x80	; 128
    3a92:	f4 e0       	ldi	r31, 0x04	; 4
    3a94:	83 83       	std	Z+3, r24	; 0x03
	
	return 0;
}
    3a96:	80 e0       	ldi	r24, 0x00	; 0
    3a98:	08 95       	ret

00003a9a <i2c_read_data>:

uint8_t i2c_read_data(uint8_t slave_addr, uint8_t register_addr) {
	
	uint8_t tmp;
	
	TWIC.MASTER.ADDR = (slave_addr << 1);
    3a9a:	98 2f       	mov	r25, r24
    3a9c:	99 0f       	add	r25, r25
    3a9e:	e0 e8       	ldi	r30, 0x80	; 128
    3aa0:	f4 e0       	ldi	r31, 0x04	; 4
    3aa2:	96 83       	std	Z+6, r25	; 0x06
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    3aa4:	94 81       	ldd	r25, Z+4	; 0x04
    3aa6:	96 ff       	sbrs	r25, 6
    3aa8:	fd cf       	rjmp	.-6      	; 0x3aa4 <i2c_read_data+0xa>
	TWIC.MASTER.DATA = register_addr;
    3aaa:	e0 e8       	ldi	r30, 0x80	; 128
    3aac:	f4 e0       	ldi	r31, 0x04	; 4
    3aae:	67 83       	std	Z+7, r22	; 0x07
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    3ab0:	94 81       	ldd	r25, Z+4	; 0x04
    3ab2:	96 ff       	sbrs	r25, 6
    3ab4:	fd cf       	rjmp	.-6      	; 0x3ab0 <i2c_read_data+0x16>
	TWIC.MASTER.ADDR = (slave_addr << 1) | 0x01; //Send START
    3ab6:	88 0f       	add	r24, r24
    3ab8:	81 60       	ori	r24, 0x01	; 1
    3aba:	e0 e8       	ldi	r30, 0x80	; 128
    3abc:	f4 e0       	ldi	r31, 0x04	; 4
    3abe:	86 83       	std	Z+6, r24	; 0x06
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_RIF_bm));
    3ac0:	84 81       	ldd	r24, Z+4	; 0x04
    3ac2:	88 23       	and	r24, r24
    3ac4:	ec f7       	brge	.-6      	; 0x3ac0 <i2c_read_data+0x26>
	tmp = TWIC.MASTER.DATA;
    3ac6:	e0 e8       	ldi	r30, 0x80	; 128
    3ac8:	f4 e0       	ldi	r31, 0x04	; 4
    3aca:	87 81       	ldd	r24, Z+7	; 0x07
	TWIC.MASTER.CTRLC |= TWI_MASTER_ACKACT_bm; //Send NACK
    3acc:	93 81       	ldd	r25, Z+3	; 0x03
    3ace:	94 60       	ori	r25, 0x04	; 4
    3ad0:	93 83       	std	Z+3, r25	; 0x03
    3ad2:	e9 ef       	ldi	r30, 0xF9	; 249
    3ad4:	f0 e0       	ldi	r31, 0x00	; 0
    3ad6:	31 97       	sbiw	r30, 0x01	; 1
    3ad8:	f1 f7       	brne	.-4      	; 0x3ad6 <i2c_read_data+0x3c>
    3ada:	00 c0       	rjmp	.+0      	; 0x3adc <i2c_read_data+0x42>
    3adc:	00 00       	nop
	
	_delay_ms(1);
	
	TWIC.MASTER.CTRLC = 0x03; //Send STOP
    3ade:	93 e0       	ldi	r25, 0x03	; 3
    3ae0:	e0 e8       	ldi	r30, 0x80	; 128
    3ae2:	f4 e0       	ldi	r31, 0x04	; 4
    3ae4:	93 83       	std	Z+3, r25	; 0x03
	
	return tmp;
}
    3ae6:	08 95       	ret

00003ae8 <_sendCmd>:

    if(retval < 0)
        return retval;
    else
        return 0;
}
    3ae8:	df 92       	push	r13
    3aea:	ef 92       	push	r14
    3aec:	ff 92       	push	r15
    3aee:	0f 93       	push	r16
    3af0:	1f 93       	push	r17
    3af2:	cf 93       	push	r28
    3af4:	df 93       	push	r29
    3af6:	ec 01       	movw	r28, r24
    3af8:	d6 2e       	mov	r13, r22
    3afa:	60 e2       	ldi	r22, 0x20	; 32
    3afc:	b4 d0       	rcall	.+360    	; 0x3c66 <Si114xReadFromRegister>
    3afe:	8c 01       	movw	r16, r24
    3b00:	99 23       	and	r25, r25
    3b02:	34 f1       	brlt	.+76     	; 0x3b50 <_sendCmd+0x68>
    3b04:	60 e3       	ldi	r22, 0x30	; 48
    3b06:	ce 01       	movw	r24, r28
    3b08:	ae d0       	rcall	.+348    	; 0x3c66 <Si114xReadFromRegister>
    3b0a:	81 30       	cpi	r24, 0x01	; 1
    3b0c:	91 05       	cpc	r25, r1
    3b0e:	81 f1       	breq	.+96     	; 0x3b70 <_sendCmd+0x88>
    3b10:	99 23       	and	r25, r25
    3b12:	c4 f7       	brge	.-16     	; 0x3b04 <_sendCmd+0x1c>
    3b14:	39 c0       	rjmp	.+114    	; 0x3b88 <_sendCmd+0xa0>
    3b16:	60 e2       	ldi	r22, 0x20	; 32
    3b18:	ce 01       	movw	r24, r28
    3b1a:	a5 d0       	rcall	.+330    	; 0x3c66 <Si114xReadFromRegister>
    3b1c:	80 17       	cp	r24, r16
    3b1e:	91 07       	cpc	r25, r17
    3b20:	51 f1       	breq	.+84     	; 0x3b76 <_sendCmd+0x8e>
    3b22:	99 23       	and	r25, r25
    3b24:	8c f1       	brlt	.+98     	; 0x3b88 <_sendCmd+0xa0>
    3b26:	8c 01       	movw	r16, r24
    3b28:	ed cf       	rjmp	.-38     	; 0x3b04 <_sendCmd+0x1c>
    3b2a:	78 01       	movw	r14, r16
    3b2c:	4d 2d       	mov	r20, r13
    3b2e:	68 e1       	ldi	r22, 0x18	; 24
    3b30:	ce 01       	movw	r24, r28
    3b32:	95 d0       	rcall	.+298    	; 0x3c5e <Si114xWriteToRegister>
    3b34:	9c 01       	movw	r18, r24
    3b36:	00 97       	sbiw	r24, 0x00	; 0
    3b38:	69 f4       	brne	.+26     	; 0x3b54 <_sendCmd+0x6c>
    3b3a:	dd 20       	and	r13, r13
    3b3c:	69 f0       	breq	.+26     	; 0x3b58 <_sendCmd+0x70>
    3b3e:	60 e2       	ldi	r22, 0x20	; 32
    3b40:	ce 01       	movw	r24, r28
    3b42:	91 d0       	rcall	.+290    	; 0x3c66 <Si114xReadFromRegister>
    3b44:	8e 15       	cp	r24, r14
    3b46:	9f 05       	cpc	r25, r15
    3b48:	51 f4       	brne	.+20     	; 0x3b5e <_sendCmd+0x76>
    3b4a:	11 23       	and	r17, r17
    3b4c:	c4 f7       	brge	.-16     	; 0x3b3e <_sendCmd+0x56>
    3b4e:	0a c0       	rjmp	.+20     	; 0x3b64 <_sendCmd+0x7c>
    3b50:	91 2f       	mov	r25, r17
    3b52:	1a c0       	rjmp	.+52     	; 0x3b88 <_sendCmd+0xa0>
    3b54:	93 2f       	mov	r25, r19
    3b56:	18 c0       	rjmp	.+48     	; 0x3b88 <_sendCmd+0xa0>
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	15 c0       	rjmp	.+42     	; 0x3b88 <_sendCmd+0xa0>
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	12 c0       	rjmp	.+36     	; 0x3b88 <_sendCmd+0xa0>
    3b64:	80 2f       	mov	r24, r16
    3b66:	91 2f       	mov	r25, r17
    3b68:	0f c0       	rjmp	.+30     	; 0x3b88 <_sendCmd+0xa0>
    3b6a:	82 2f       	mov	r24, r18
    3b6c:	93 2f       	mov	r25, r19
    3b6e:	0c c0       	rjmp	.+24     	; 0x3b88 <_sendCmd+0xa0>
    3b70:	d1 10       	cpse	r13, r1
    3b72:	d1 cf       	rjmp	.-94     	; 0x3b16 <_sendCmd+0x2e>
    3b74:	da cf       	rjmp	.-76     	; 0x3b2a <_sendCmd+0x42>
    3b76:	78 01       	movw	r14, r16
    3b78:	4d 2d       	mov	r20, r13
    3b7a:	68 e1       	ldi	r22, 0x18	; 24
    3b7c:	ce 01       	movw	r24, r28
    3b7e:	6f d0       	rcall	.+222    	; 0x3c5e <Si114xWriteToRegister>
    3b80:	9c 01       	movw	r18, r24
    3b82:	00 97       	sbiw	r24, 0x00	; 0
    3b84:	e1 f2       	breq	.-72     	; 0x3b3e <_sendCmd+0x56>
    3b86:	f1 cf       	rjmp	.-30     	; 0x3b6a <_sendCmd+0x82>
    3b88:	df 91       	pop	r29
    3b8a:	cf 91       	pop	r28
    3b8c:	1f 91       	pop	r17
    3b8e:	0f 91       	pop	r16
    3b90:	ff 90       	pop	r15
    3b92:	ef 90       	pop	r14
    3b94:	df 90       	pop	r13
    3b96:	08 95       	ret

00003b98 <Si114xNop>:
    3b98:	60 e0       	ldi	r22, 0x00	; 0
    3b9a:	a6 cf       	rjmp	.-180    	; 0x3ae8 <_sendCmd>
    3b9c:	08 95       	ret

00003b9e <Si114xPauseAll>:
{
    return _sendCmd(si114x_handle,0x0B);
}

s16 Si114xPauseAll(HANDLE si114x_handle)
{
    3b9e:	cf 93       	push	r28
    3ba0:	df 93       	push	r29
    3ba2:	ec 01       	movw	r28, r24
    while (1) 
    {
        // Keep sending nops until the response is zero
        while (1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    3ba4:	60 e2       	ldi	r22, 0x20	; 32
    3ba6:	ce 01       	movw	r24, r28
    3ba8:	5e d0       	rcall	.+188    	; 0x3c66 <Si114xReadFromRegister>
    3baa:	89 2b       	or	r24, r25
    3bac:	19 f0       	breq	.+6      	; 0x3bb4 <Si114xPauseAll+0x16>
                break;
            else 
                Si114xNop(si114x_handle);
    3bae:	ce 01       	movw	r24, r28
    3bb0:	f3 df       	rcall	.-26     	; 0x3b98 <Si114xNop>
        }
    3bb2:	f8 cf       	rjmp	.-16     	; 0x3ba4 <Si114xPauseAll+0x6>

//-----------------------------------------------------------------------------
// use this to pause measurements
static s16 _PsAlsPause (HANDLE si114x_handle) 
{
    return _sendCmd(si114x_handle,0x0B);
    3bb4:	6b e0       	ldi	r22, 0x0B	; 11
    3bb6:	ce 01       	movw	r24, r28
    3bb8:	97 df       	rcall	.-210    	; 0x3ae8 <_sendCmd>
        _PsAlsPause(si114x_handle);

        // Wait for response
        while(1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    3bba:	60 e2       	ldi	r22, 0x20	; 32
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	53 d0       	rcall	.+166    	; 0x3c66 <Si114xReadFromRegister>
    3bc0:	89 2b       	or	r24, r25
    3bc2:	d9 f3       	breq	.-10     	; 0x3bba <Si114xPauseAll+0x1c>
                break;
        }

        // When the PsAlsPause() response is good, we expect it to be a '1'.
        if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
    3bc4:	60 e2       	ldi	r22, 0x20	; 32
    3bc6:	ce 01       	movw	r24, r28
    3bc8:	4e d0       	rcall	.+156    	; 0x3c66 <Si114xReadFromRegister>
    3bca:	01 97       	sbiw	r24, 0x01	; 1
    3bcc:	59 f7       	brne	.-42     	; 0x3ba4 <Si114xPauseAll+0x6>
            break;  // otherwise, start over.
    }
    return 0;
}
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	df 91       	pop	r29
    3bd4:	cf 91       	pop	r28
    3bd6:	08 95       	ret

00003bd8 <si114x_reset>:
    return 0;
}


s16 si114x_reset(HANDLE si114x_handle)
{
    3bd8:	0f 93       	push	r16
    3bda:	1f 93       	push	r17
    3bdc:	cf 93       	push	r28
    3bde:	df 93       	push	r29
    3be0:	ec 01       	movw	r28, r24
    //
    // delay_10ms();
    // delay_10ms();
    // delay_10ms();

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    3be2:	40 e0       	ldi	r20, 0x00	; 0
    3be4:	68 e0       	ldi	r22, 0x08	; 8
    3be6:	3b d0       	rcall	.+118    	; 0x3c5e <Si114xWriteToRegister>
    3be8:	8c 01       	movw	r16, r24
    retval+=Si114xPauseAll(si114x_handle);
    3bea:	ce 01       	movw	r24, r28
    3bec:	d8 df       	rcall	.-80     	; 0x3b9e <Si114xPauseAll>
    3bee:	08 0f       	add	r16, r24
    3bf0:	19 1f       	adc	r17, r25

    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    3bf2:	40 e0       	ldi	r20, 0x00	; 0
    3bf4:	68 e0       	ldi	r22, 0x08	; 8
    3bf6:	ce 01       	movw	r24, r28
    3bf8:	32 d0       	rcall	.+100    	; 0x3c5e <Si114xWriteToRegister>
    3bfa:	08 0f       	add	r16, r24
    3bfc:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    3bfe:	40 e0       	ldi	r20, 0x00	; 0
    3c00:	64 e0       	ldi	r22, 0x04	; 4
    3c02:	ce 01       	movw	r24, r28
    3c04:	2c d0       	rcall	.+88     	; 0x3c5e <Si114xWriteToRegister>
    3c06:	08 0f       	add	r16, r24
    3c08:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    3c0a:	40 e0       	ldi	r20, 0x00	; 0
    3c0c:	65 e0       	ldi	r22, 0x05	; 5
    3c0e:	ce 01       	movw	r24, r28
    3c10:	26 d0       	rcall	.+76     	; 0x3c5e <Si114xWriteToRegister>
    3c12:	08 0f       	add	r16, r24
    3c14:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    3c16:	40 e0       	ldi	r20, 0x00	; 0
    3c18:	66 e0       	ldi	r22, 0x06	; 6
    3c1a:	ce 01       	movw	r24, r28
    3c1c:	20 d0       	rcall	.+64     	; 0x3c5e <Si114xWriteToRegister>
    3c1e:	08 0f       	add	r16, r24
    3c20:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    3c22:	40 e0       	ldi	r20, 0x00	; 0
    3c24:	63 e0       	ldi	r22, 0x03	; 3
    3c26:	ce 01       	movw	r24, r28
    3c28:	1a d0       	rcall	.+52     	; 0x3c5e <Si114xWriteToRegister>
    3c2a:	08 0f       	add	r16, r24
    3c2c:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
    3c2e:	4f ef       	ldi	r20, 0xFF	; 255
    3c30:	61 e2       	ldi	r22, 0x21	; 33
    3c32:	ce 01       	movw	r24, r28
    3c34:	14 d0       	rcall	.+40     	; 0x3c5e <Si114xWriteToRegister>
    3c36:	08 0f       	add	r16, r24
    3c38:	19 1f       	adc	r17, r25

    // Perform the Reset Command
    retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
    3c3a:	41 e0       	ldi	r20, 0x01	; 1
    3c3c:	68 e1       	ldi	r22, 0x18	; 24
    3c3e:	ce 01       	movw	r24, r28
    3c40:	0e d0       	rcall	.+28     	; 0x3c5e <Si114xWriteToRegister>
    3c42:	08 0f       	add	r16, r24
    3c44:	19 1f       	adc	r17, r25

    // Delay for 10 ms. This delay is needed to allow the Si114x
    // to perform internal reset sequence. 
    delay_10ms();
    3c46:	13 d0       	rcall	.+38     	; 0x3c6e <delay_10ms>

    // Write Hardware Key
    retval+=Si114xWriteToRegister(si114x_handle, REG_HW_KEY, HW_KEY_VAL0);
    3c48:	47 e1       	ldi	r20, 0x17	; 23
    3c4a:	67 e0       	ldi	r22, 0x07	; 7
    3c4c:	ce 01       	movw	r24, r28
    3c4e:	07 d0       	rcall	.+14     	; 0x3c5e <Si114xWriteToRegister>

    return retval;
}
    3c50:	80 0f       	add	r24, r16
    3c52:	91 1f       	adc	r25, r17
    3c54:	df 91       	pop	r29
    3c56:	cf 91       	pop	r28
    3c58:	1f 91       	pop	r17
    3c5a:	0f 91       	pop	r16
    3c5c:	08 95       	ret

00003c5e <Si114xWriteToRegister>:
                        u8 address, u8 length, u8 *values)
{
    //return PT_i2c_smbus_read_i2c_block_data(si114x_handle,
    //                       address,    length,     values);
	return i2c_read_data_block(SI114X_ADDR,address,values,length);
}
    3c5e:	8a e5       	ldi	r24, 0x5A	; 90
    3c60:	03 df       	rcall	.-506    	; 0x3a68 <i2c_write_data>
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	08 95       	ret

00003c66 <Si114xReadFromRegister>:
    3c66:	8a e5       	ldi	r24, 0x5A	; 90
    3c68:	18 df       	rcall	.-464    	; 0x3a9a <i2c_read_data>
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	08 95       	ret

00003c6e <delay_10ms>:
    3c6e:	83 ec       	ldi	r24, 0xC3	; 195
    3c70:	99 e0       	ldi	r25, 0x09	; 9
    3c72:	01 97       	sbiw	r24, 0x01	; 1
    3c74:	f1 f7       	brne	.-4      	; 0x3c72 <delay_10ms+0x4>
    3c76:	00 c0       	rjmp	.+0      	; 0x3c78 <delay_10ms+0xa>
    3c78:	00 00       	nop
    3c7a:	08 95       	ret

00003c7c <uart_setup>:

char rxbuf[50];

void uart_setup(void) {
	
	PORTD.DIRSET = PIN3_bm; //TX
    3c7c:	e0 e6       	ldi	r30, 0x60	; 96
    3c7e:	f6 e0       	ldi	r31, 0x06	; 6
    3c80:	88 e0       	ldi	r24, 0x08	; 8
    3c82:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; //RX
    3c84:	84 e0       	ldi	r24, 0x04	; 4
    3c86:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
    3c88:	e0 ea       	ldi	r30, 0xA0	; 160
    3c8a:	f9 e0       	ldi	r31, 0x09	; 9
    3c8c:	80 e2       	ldi	r24, 0x20	; 32
    3c8e:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 207;//0x1111;
    3c90:	8f ec       	ldi	r24, 0xCF	; 207
    3c92:	86 83       	std	Z+6, r24	; 0x06
	//USARTE0.BAUDCTRLB = (33 << 4);
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
    3c94:	83 e0       	ldi	r24, 0x03	; 3
    3c96:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    3c98:	88 e1       	ldi	r24, 0x18	; 24
    3c9a:	84 83       	std	Z+4, r24	; 0x04
    3c9c:	08 95       	ret

00003c9e <uart_put_char>:
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    3c9e:	e0 ea       	ldi	r30, 0xA0	; 160
    3ca0:	f9 e0       	ldi	r31, 0x09	; 9
    3ca2:	91 81       	ldd	r25, Z+1	; 0x01
    3ca4:	95 ff       	sbrs	r25, 5
    3ca6:	fd cf       	rjmp	.-6      	; 0x3ca2 <uart_put_char+0x4>
	USARTD0.DATA = c;
    3ca8:	80 93 a0 09 	sts	0x09A0, r24
    3cac:	08 95       	ret

00003cae <uart_get_char>:
}

char uart_get_char(void) {
	uint16_t timer = 0;
	while (!(USARTD0.STATUS & USART_RXCIF_bm)){
    3cae:	89 eb       	ldi	r24, 0xB9	; 185
    3cb0:	9b e0       	ldi	r25, 0x0B	; 11
    3cb2:	e0 ea       	ldi	r30, 0xA0	; 160
    3cb4:	f9 e0       	ldi	r31, 0x09	; 9
    3cb6:	09 c0       	rjmp	.+18     	; 0x3cca <uart_get_char+0x1c>
    3cb8:	af e3       	ldi	r26, 0x3F	; 63
    3cba:	bf e1       	ldi	r27, 0x1F	; 31
    3cbc:	11 97       	sbiw	r26, 0x01	; 1
    3cbe:	f1 f7       	brne	.-4      	; 0x3cbc <uart_get_char+0xe>
    3cc0:	00 c0       	rjmp	.+0      	; 0x3cc2 <uart_get_char+0x14>
    3cc2:	00 00       	nop
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
		 _delay_ms(1);
		 if (timer++ == TIMEOUT) {
    3cc6:	00 97       	sbiw	r24, 0x00	; 0
    3cc8:	31 f0       	breq	.+12     	; 0x3cd6 <uart_get_char+0x28>
	USARTD0.DATA = c;
}

char uart_get_char(void) {
	uint16_t timer = 0;
	while (!(USARTD0.STATUS & USART_RXCIF_bm)){
    3cca:	21 81       	ldd	r18, Z+1	; 0x01
    3ccc:	22 23       	and	r18, r18
    3cce:	a4 f7       	brge	.-24     	; 0x3cb8 <uart_get_char+0xa>
		 _delay_ms(1);
		 if (timer++ == TIMEOUT) {
			return 0x03;
		 }
	}
	return USARTD0.DATA;
    3cd0:	80 91 a0 09 	lds	r24, 0x09A0
    3cd4:	08 95       	ret
char uart_get_char(void) {
	uint16_t timer = 0;
	while (!(USARTD0.STATUS & USART_RXCIF_bm)){
		 _delay_ms(1);
		 if (timer++ == TIMEOUT) {
			return 0x03;
    3cd6:	83 e0       	ldi	r24, 0x03	; 3
		 }
	}
	return USARTD0.DATA;
}
    3cd8:	08 95       	ret

00003cda <__udivmodsi4>:
    3cda:	a1 e2       	ldi	r26, 0x21	; 33
    3cdc:	1a 2e       	mov	r1, r26
    3cde:	aa 1b       	sub	r26, r26
    3ce0:	bb 1b       	sub	r27, r27
    3ce2:	fd 01       	movw	r30, r26
    3ce4:	0d c0       	rjmp	.+26     	; 0x3d00 <__udivmodsi4_ep>

00003ce6 <__udivmodsi4_loop>:
    3ce6:	aa 1f       	adc	r26, r26
    3ce8:	bb 1f       	adc	r27, r27
    3cea:	ee 1f       	adc	r30, r30
    3cec:	ff 1f       	adc	r31, r31
    3cee:	a2 17       	cp	r26, r18
    3cf0:	b3 07       	cpc	r27, r19
    3cf2:	e4 07       	cpc	r30, r20
    3cf4:	f5 07       	cpc	r31, r21
    3cf6:	20 f0       	brcs	.+8      	; 0x3d00 <__udivmodsi4_ep>
    3cf8:	a2 1b       	sub	r26, r18
    3cfa:	b3 0b       	sbc	r27, r19
    3cfc:	e4 0b       	sbc	r30, r20
    3cfe:	f5 0b       	sbc	r31, r21

00003d00 <__udivmodsi4_ep>:
    3d00:	66 1f       	adc	r22, r22
    3d02:	77 1f       	adc	r23, r23
    3d04:	88 1f       	adc	r24, r24
    3d06:	99 1f       	adc	r25, r25
    3d08:	1a 94       	dec	r1
    3d0a:	69 f7       	brne	.-38     	; 0x3ce6 <__udivmodsi4_loop>
    3d0c:	60 95       	com	r22
    3d0e:	70 95       	com	r23
    3d10:	80 95       	com	r24
    3d12:	90 95       	com	r25
    3d14:	9b 01       	movw	r18, r22
    3d16:	ac 01       	movw	r20, r24
    3d18:	bd 01       	movw	r22, r26
    3d1a:	cf 01       	movw	r24, r30
    3d1c:	08 95       	ret

00003d1e <__tablejump2__>:
    3d1e:	ee 0f       	add	r30, r30
    3d20:	ff 1f       	adc	r31, r31

00003d22 <__tablejump__>:
    3d22:	05 90       	lpm	r0, Z+
    3d24:	f4 91       	lpm	r31, Z
    3d26:	e0 2d       	mov	r30, r0
    3d28:	09 94       	ijmp

00003d2a <__umulhisi3>:
    3d2a:	a2 9f       	mul	r26, r18
    3d2c:	b0 01       	movw	r22, r0
    3d2e:	b3 9f       	mul	r27, r19
    3d30:	c0 01       	movw	r24, r0
    3d32:	a3 9f       	mul	r26, r19
    3d34:	70 0d       	add	r23, r0
    3d36:	81 1d       	adc	r24, r1
    3d38:	11 24       	eor	r1, r1
    3d3a:	91 1d       	adc	r25, r1
    3d3c:	b2 9f       	mul	r27, r18
    3d3e:	70 0d       	add	r23, r0
    3d40:	81 1d       	adc	r24, r1
    3d42:	11 24       	eor	r1, r1
    3d44:	91 1d       	adc	r25, r1
    3d46:	08 95       	ret

00003d48 <__muluhisi3>:
    3d48:	f0 df       	rcall	.-32     	; 0x3d2a <__umulhisi3>
    3d4a:	a5 9f       	mul	r26, r21
    3d4c:	90 0d       	add	r25, r0
    3d4e:	b4 9f       	mul	r27, r20
    3d50:	90 0d       	add	r25, r0
    3d52:	a4 9f       	mul	r26, r20
    3d54:	80 0d       	add	r24, r0
    3d56:	91 1d       	adc	r25, r1
    3d58:	11 24       	eor	r1, r1
    3d5a:	08 95       	ret

00003d5c <memmove>:
    3d5c:	68 17       	cp	r22, r24
    3d5e:	79 07       	cpc	r23, r25
    3d60:	68 f4       	brcc	.+26     	; 0x3d7c <memmove+0x20>
    3d62:	fb 01       	movw	r30, r22
    3d64:	dc 01       	movw	r26, r24
    3d66:	e4 0f       	add	r30, r20
    3d68:	f5 1f       	adc	r31, r21
    3d6a:	a4 0f       	add	r26, r20
    3d6c:	b5 1f       	adc	r27, r21
    3d6e:	02 c0       	rjmp	.+4      	; 0x3d74 <memmove+0x18>
    3d70:	02 90       	ld	r0, -Z
    3d72:	0e 92       	st	-X, r0
    3d74:	41 50       	subi	r20, 0x01	; 1
    3d76:	50 40       	sbci	r21, 0x00	; 0
    3d78:	d8 f7       	brcc	.-10     	; 0x3d70 <memmove+0x14>
    3d7a:	08 95       	ret
    3d7c:	52 c0       	rjmp	.+164    	; 0x3e22 <memcpy>

00003d7e <strchr>:
    3d7e:	fc 01       	movw	r30, r24
    3d80:	81 91       	ld	r24, Z+
    3d82:	86 17       	cp	r24, r22
    3d84:	21 f0       	breq	.+8      	; 0x3d8e <strchr+0x10>
    3d86:	88 23       	and	r24, r24
    3d88:	d9 f7       	brne	.-10     	; 0x3d80 <strchr+0x2>
    3d8a:	99 27       	eor	r25, r25
    3d8c:	08 95       	ret
    3d8e:	31 97       	sbiw	r30, 0x01	; 1
    3d90:	cf 01       	movw	r24, r30
    3d92:	08 95       	ret

00003d94 <strstr>:
    3d94:	fb 01       	movw	r30, r22
    3d96:	51 91       	ld	r21, Z+
    3d98:	55 23       	and	r21, r21
    3d9a:	a9 f0       	breq	.+42     	; 0x3dc6 <strstr+0x32>
    3d9c:	bf 01       	movw	r22, r30
    3d9e:	dc 01       	movw	r26, r24
    3da0:	4d 91       	ld	r20, X+
    3da2:	45 17       	cp	r20, r21
    3da4:	41 11       	cpse	r20, r1
    3da6:	e1 f7       	brne	.-8      	; 0x3da0 <strstr+0xc>
    3da8:	59 f4       	brne	.+22     	; 0x3dc0 <strstr+0x2c>
    3daa:	cd 01       	movw	r24, r26
    3dac:	01 90       	ld	r0, Z+
    3dae:	00 20       	and	r0, r0
    3db0:	49 f0       	breq	.+18     	; 0x3dc4 <strstr+0x30>
    3db2:	4d 91       	ld	r20, X+
    3db4:	40 15       	cp	r20, r0
    3db6:	41 11       	cpse	r20, r1
    3db8:	c9 f3       	breq	.-14     	; 0x3dac <strstr+0x18>
    3dba:	fb 01       	movw	r30, r22
    3dbc:	41 11       	cpse	r20, r1
    3dbe:	ef cf       	rjmp	.-34     	; 0x3d9e <strstr+0xa>
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	01 97       	sbiw	r24, 0x01	; 1
    3dc6:	08 95       	ret

00003dc8 <puts>:
    3dc8:	0f 93       	push	r16
    3dca:	1f 93       	push	r17
    3dcc:	cf 93       	push	r28
    3dce:	df 93       	push	r29
    3dd0:	e0 91 a7 2e 	lds	r30, 0x2EA7
    3dd4:	f0 91 a8 2e 	lds	r31, 0x2EA8
    3dd8:	23 81       	ldd	r18, Z+3	; 0x03
    3dda:	21 ff       	sbrs	r18, 1
    3ddc:	1b c0       	rjmp	.+54     	; 0x3e14 <puts+0x4c>
    3dde:	ec 01       	movw	r28, r24
    3de0:	00 e0       	ldi	r16, 0x00	; 0
    3de2:	10 e0       	ldi	r17, 0x00	; 0
    3de4:	89 91       	ld	r24, Y+
    3de6:	60 91 a7 2e 	lds	r22, 0x2EA7
    3dea:	70 91 a8 2e 	lds	r23, 0x2EA8
    3dee:	db 01       	movw	r26, r22
    3df0:	18 96       	adiw	r26, 0x08	; 8
    3df2:	ed 91       	ld	r30, X+
    3df4:	fc 91       	ld	r31, X
    3df6:	19 97       	sbiw	r26, 0x09	; 9
    3df8:	88 23       	and	r24, r24
    3dfa:	31 f0       	breq	.+12     	; 0x3e08 <puts+0x40>
    3dfc:	09 95       	icall
    3dfe:	89 2b       	or	r24, r25
    3e00:	89 f3       	breq	.-30     	; 0x3de4 <puts+0x1c>
    3e02:	0f ef       	ldi	r16, 0xFF	; 255
    3e04:	1f ef       	ldi	r17, 0xFF	; 255
    3e06:	ee cf       	rjmp	.-36     	; 0x3de4 <puts+0x1c>
    3e08:	8a e0       	ldi	r24, 0x0A	; 10
    3e0a:	09 95       	icall
    3e0c:	89 2b       	or	r24, r25
    3e0e:	11 f4       	brne	.+4      	; 0x3e14 <puts+0x4c>
    3e10:	c8 01       	movw	r24, r16
    3e12:	02 c0       	rjmp	.+4      	; 0x3e18 <puts+0x50>
    3e14:	8f ef       	ldi	r24, 0xFF	; 255
    3e16:	9f ef       	ldi	r25, 0xFF	; 255
    3e18:	df 91       	pop	r29
    3e1a:	cf 91       	pop	r28
    3e1c:	1f 91       	pop	r17
    3e1e:	0f 91       	pop	r16
    3e20:	08 95       	ret

00003e22 <memcpy>:
    3e22:	fb 01       	movw	r30, r22
    3e24:	dc 01       	movw	r26, r24
    3e26:	02 c0       	rjmp	.+4      	; 0x3e2c <memcpy+0xa>
    3e28:	01 90       	ld	r0, Z+
    3e2a:	0d 92       	st	X+, r0
    3e2c:	41 50       	subi	r20, 0x01	; 1
    3e2e:	50 40       	sbci	r21, 0x00	; 0
    3e30:	d8 f7       	brcc	.-10     	; 0x3e28 <memcpy+0x6>
    3e32:	08 95       	ret

00003e34 <_exit>:
    3e34:	f8 94       	cli

00003e36 <__stop_program>:
    3e36:	ff cf       	rjmp	.-2      	; 0x3e36 <__stop_program>
