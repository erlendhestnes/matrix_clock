
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b4b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000a0a  00802000  0000b4b6  0000b54a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002d4  00802a0a  00802a0a  0000bf54  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000bf54  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000cf8  00000000  00000000  0000bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001f17e  00000000  00000000  0000cca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004a3d  00000000  00000000  0002be26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000b35c  00000000  00000000  00030863  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00003040  00000000  00000000  0003bbc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004dd8  00000000  00000000  0003ec00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001235e  00000000  00000000  000439d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d18  00000000  00000000  00055d36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	69 c7       	rjmp	.+3794   	; 0xed4 <_StackPaint>
       2:	00 00       	nop
       4:	9d c7       	rjmp	.+3898   	; 0xf40 <__bad_interrupt>
       6:	00 00       	nop
       8:	9b c7       	rjmp	.+3894   	; 0xf40 <__bad_interrupt>
       a:	00 00       	nop
       c:	99 c7       	rjmp	.+3890   	; 0xf40 <__bad_interrupt>
       e:	00 00       	nop
      10:	97 c7       	rjmp	.+3886   	; 0xf40 <__bad_interrupt>
      12:	00 00       	nop
      14:	95 c7       	rjmp	.+3882   	; 0xf40 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__vector_6>
      1c:	91 c7       	rjmp	.+3874   	; 0xf40 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8f c7       	rjmp	.+3870   	; 0xf40 <__bad_interrupt>
      22:	00 00       	nop
      24:	8d c7       	rjmp	.+3866   	; 0xf40 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__vector_10>
      2c:	89 c7       	rjmp	.+3858   	; 0xf40 <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c7       	rjmp	.+3854   	; 0xf40 <__bad_interrupt>
      32:	00 00       	nop
      34:	85 c7       	rjmp	.+3850   	; 0xf40 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 bd 39 	jmp	0x737a	; 0x737a <__vector_14>
      3c:	81 c7       	rjmp	.+3842   	; 0xf40 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 70 4a 	jmp	0x94e0	; 0x94e0 <__vector_16>
      44:	0c 94 96 39 	jmp	0x732c	; 0x732c <__vector_17>
      48:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <__vector_18>
      4c:	0c 94 98 4a 	jmp	0x9530	; 0x9530 <__vector_19>
      50:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__vector_20>
      54:	75 c7       	rjmp	.+3818   	; 0xf40 <__bad_interrupt>
      56:	00 00       	nop
      58:	73 c7       	rjmp	.+3814   	; 0xf40 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	71 c7       	rjmp	.+3810   	; 0xf40 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6f c7       	rjmp	.+3806   	; 0xf40 <__bad_interrupt>
      62:	00 00       	nop
      64:	6d c7       	rjmp	.+3802   	; 0xf40 <__bad_interrupt>
      66:	00 00       	nop
      68:	6b c7       	rjmp	.+3798   	; 0xf40 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	69 c7       	rjmp	.+3794   	; 0xf40 <__bad_interrupt>
      6e:	00 00       	nop
      70:	67 c7       	rjmp	.+3790   	; 0xf40 <__bad_interrupt>
      72:	00 00       	nop
      74:	65 c7       	rjmp	.+3786   	; 0xf40 <__bad_interrupt>
      76:	00 00       	nop
      78:	63 c7       	rjmp	.+3782   	; 0xf40 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	61 c7       	rjmp	.+3778   	; 0xf40 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5f c7       	rjmp	.+3774   	; 0xf40 <__bad_interrupt>
      82:	00 00       	nop
      84:	5d c7       	rjmp	.+3770   	; 0xf40 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__vector_34>
      8c:	59 c7       	rjmp	.+3762   	; 0xf40 <__bad_interrupt>
      8e:	00 00       	nop
      90:	57 c7       	rjmp	.+3758   	; 0xf40 <__bad_interrupt>
      92:	00 00       	nop
      94:	55 c7       	rjmp	.+3754   	; 0xf40 <__bad_interrupt>
      96:	00 00       	nop
      98:	53 c7       	rjmp	.+3750   	; 0xf40 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	51 c7       	rjmp	.+3746   	; 0xf40 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4f c7       	rjmp	.+3742   	; 0xf40 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	4d c7       	rjmp	.+3738   	; 0xf40 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4b c7       	rjmp	.+3734   	; 0xf40 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	49 c7       	rjmp	.+3730   	; 0xf40 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	47 c7       	rjmp	.+3726   	; 0xf40 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	45 c7       	rjmp	.+3722   	; 0xf40 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	43 c7       	rjmp	.+3718   	; 0xf40 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	41 c7       	rjmp	.+3714   	; 0xf40 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3f c7       	rjmp	.+3710   	; 0xf40 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	3d c7       	rjmp	.+3706   	; 0xf40 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3b c7       	rjmp	.+3702   	; 0xf40 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	39 c7       	rjmp	.+3698   	; 0xf40 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	37 c7       	rjmp	.+3694   	; 0xf40 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	35 c7       	rjmp	.+3690   	; 0xf40 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	33 c7       	rjmp	.+3686   	; 0xf40 <__bad_interrupt>
      da:	00 00       	nop
      dc:	31 c7       	rjmp	.+3682   	; 0xf40 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2f c7       	rjmp	.+3678   	; 0xf40 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2d c7       	rjmp	.+3674   	; 0xf40 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	2b c7       	rjmp	.+3670   	; 0xf40 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	29 c7       	rjmp	.+3666   	; 0xf40 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	27 c7       	rjmp	.+3662   	; 0xf40 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	25 c7       	rjmp	.+3658   	; 0xf40 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	23 c7       	rjmp	.+3654   	; 0xf40 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	21 c7       	rjmp	.+3650   	; 0xf40 <__bad_interrupt>
      fe:	00 00       	nop
     100:	1f c7       	rjmp	.+3646   	; 0xf40 <__bad_interrupt>
     102:	00 00       	nop
     104:	1d c7       	rjmp	.+3642   	; 0xf40 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__vector_66>
     10c:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <__vector_67>
     110:	17 c7       	rjmp	.+3630   	; 0xf40 <__bad_interrupt>
     112:	00 00       	nop
     114:	15 c7       	rjmp	.+3626   	; 0xf40 <__bad_interrupt>
     116:	00 00       	nop
     118:	13 c7       	rjmp	.+3622   	; 0xf40 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	11 c7       	rjmp	.+3618   	; 0xf40 <__bad_interrupt>
     11e:	00 00       	nop
     120:	0f c7       	rjmp	.+3614   	; 0xf40 <__bad_interrupt>
     122:	00 00       	nop
     124:	0d c7       	rjmp	.+3610   	; 0xf40 <__bad_interrupt>
     126:	00 00       	nop
     128:	0b c7       	rjmp	.+3606   	; 0xf40 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	09 c7       	rjmp	.+3602   	; 0xf40 <__bad_interrupt>
     12e:	00 00       	nop
     130:	07 c7       	rjmp	.+3598   	; 0xf40 <__bad_interrupt>
     132:	00 00       	nop
     134:	05 c7       	rjmp	.+3594   	; 0xf40 <__bad_interrupt>
     136:	00 00       	nop
     138:	03 c7       	rjmp	.+3590   	; 0xf40 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	01 c7       	rjmp	.+3586   	; 0xf40 <__bad_interrupt>
     13e:	00 00       	nop
     140:	ff c6       	rjmp	.+3582   	; 0xf40 <__bad_interrupt>
     142:	00 00       	nop
     144:	fd c6       	rjmp	.+3578   	; 0xf40 <__bad_interrupt>
     146:	00 00       	nop
     148:	fb c6       	rjmp	.+3574   	; 0xf40 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	f9 c6       	rjmp	.+3570   	; 0xf40 <__bad_interrupt>
     14e:	00 00       	nop
     150:	f7 c6       	rjmp	.+3566   	; 0xf40 <__bad_interrupt>
     152:	00 00       	nop
     154:	f5 c6       	rjmp	.+3562   	; 0xf40 <__bad_interrupt>
     156:	00 00       	nop
     158:	f3 c6       	rjmp	.+3558   	; 0xf40 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	f1 c6       	rjmp	.+3554   	; 0xf40 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__vector_88>
     164:	ed c6       	rjmp	.+3546   	; 0xf40 <__bad_interrupt>
     166:	00 00       	nop
     168:	eb c6       	rjmp	.+3542   	; 0xf40 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	e9 c6       	rjmp	.+3538   	; 0xf40 <__bad_interrupt>
     16e:	00 00       	nop
     170:	e7 c6       	rjmp	.+3534   	; 0xf40 <__bad_interrupt>
     172:	00 00       	nop
     174:	e5 c6       	rjmp	.+3530   	; 0xf40 <__bad_interrupt>
     176:	00 00       	nop
     178:	e3 c6       	rjmp	.+3526   	; 0xf40 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	e1 c6       	rjmp	.+3522   	; 0xf40 <__bad_interrupt>
     17e:	00 00       	nop
     180:	df c6       	rjmp	.+3518   	; 0xf40 <__bad_interrupt>
     182:	00 00       	nop
     184:	dd c6       	rjmp	.+3514   	; 0xf40 <__bad_interrupt>
     186:	00 00       	nop
     188:	db c6       	rjmp	.+3510   	; 0xf40 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d9 c6       	rjmp	.+3506   	; 0xf40 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d7 c6       	rjmp	.+3502   	; 0xf40 <__bad_interrupt>
     192:	00 00       	nop
     194:	d5 c6       	rjmp	.+3498   	; 0xf40 <__bad_interrupt>
     196:	00 00       	nop
     198:	d3 c6       	rjmp	.+3494   	; 0xf40 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	d1 c6       	rjmp	.+3490   	; 0xf40 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	cf c6       	rjmp	.+3486   	; 0xf40 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	cd c6       	rjmp	.+3482   	; 0xf40 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	cb c6       	rjmp	.+3478   	; 0xf40 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c9 c6       	rjmp	.+3474   	; 0xf40 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	c7 c6       	rjmp	.+3470   	; 0xf40 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c5 c6       	rjmp	.+3466   	; 0xf40 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	c3 c6       	rjmp	.+3462   	; 0xf40 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	c1 c6       	rjmp	.+3458   	; 0xf40 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	bf c6       	rjmp	.+3454   	; 0xf40 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	bd c6       	rjmp	.+3450   	; 0xf40 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	bb c6       	rjmp	.+3446   	; 0xf40 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b9 c6       	rjmp	.+3442   	; 0xf40 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b7 c6       	rjmp	.+3438   	; 0xf40 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b5 c6       	rjmp	.+3434   	; 0xf40 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	b3 c6       	rjmp	.+3430   	; 0xf40 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	b1 c6       	rjmp	.+3426   	; 0xf40 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	af c6       	rjmp	.+3422   	; 0xf40 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	ad c6       	rjmp	.+3418   	; 0xf40 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	ab c6       	rjmp	.+3414   	; 0xf40 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a9 c6       	rjmp	.+3410   	; 0xf40 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a7 c6       	rjmp	.+3406   	; 0xf40 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a5 c6       	rjmp	.+3402   	; 0xf40 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	a3 c6       	rjmp	.+3398   	; 0xf40 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	6c 48       	sbci	r22, 0x8C	; 140
     1fe:	66 48       	sbci	r22, 0x86	; 134
     200:	69 48       	sbci	r22, 0x89	; 137
     202:	5d 48       	sbci	r21, 0x8D	; 141
     204:	63 48       	sbci	r22, 0x83	; 131
     206:	57 48       	sbci	r21, 0x87	; 135
     208:	60 48       	sbci	r22, 0x80	; 128
     20a:	5a 48       	sbci	r21, 0x8A	; 138
     20c:	f6 48       	sbci	r31, 0x86	; 134
     20e:	dd 48       	sbci	r29, 0x8D	; 141
     210:	e5 48       	sbci	r30, 0x85	; 133
     212:	99 48       	sbci	r25, 0x89	; 137
     214:	d7 48       	sbci	r29, 0x87	; 135
     216:	8e 48       	sbci	r24, 0x8E	; 142
     218:	d3 48       	sbci	r29, 0x83	; 131
     21a:	95 48       	sbci	r25, 0x85	; 133
     21c:	44 49       	sbci	r20, 0x94	; 148
     21e:	51 49       	sbci	r21, 0x91	; 145
     220:	4f 49       	sbci	r20, 0x9F	; 159
     222:	4d 49       	sbci	r20, 0x9D	; 157
     224:	4b 49       	sbci	r20, 0x9B	; 155
     226:	47 49       	sbci	r20, 0x97	; 151
     228:	49 49       	sbci	r20, 0x99	; 153
     22a:	36 4b       	sbci	r19, 0xB6	; 182
     22c:	38 4b       	sbci	r19, 0xB8	; 184
     22e:	36 4b       	sbci	r19, 0xB6	; 182
     230:	3f 4b       	sbci	r19, 0xBF	; 191
     232:	36 4b       	sbci	r19, 0xB6	; 182
     234:	3f 4b       	sbci	r19, 0xBF	; 191
     236:	36 4b       	sbci	r19, 0xB6	; 182
     238:	36 4b       	sbci	r19, 0xB6	; 182
     23a:	3f 4b       	sbci	r19, 0xBF	; 191
     23c:	36 4b       	sbci	r19, 0xB6	; 182
     23e:	3f 4b       	sbci	r19, 0xBF	; 191
     240:	36 4b       	sbci	r19, 0xB6	; 182
     242:	07 63       	ori	r16, 0x37	; 55
     244:	42 36       	cpi	r20, 0x62	; 98
     246:	b7 9b       	sbis	0x16, 7	; 22
     248:	d8 a7       	std	Y+40, r29	; 0x28
     24a:	1a 39       	cpi	r17, 0x9A	; 154
     24c:	68 56       	subi	r22, 0x68	; 104
     24e:	18 ae       	std	Y+56, r1	; 0x38
     250:	ba ab       	std	Y+50, r27	; 0x32
     252:	55 8c       	ldd	r5, Z+29	; 0x1d
     254:	1d 3c       	cpi	r17, 0xCD	; 205
     256:	b7 cc       	rjmp	.-1682   	; 0xfffffbc6 <__eeprom_end+0xff7efbc6>
     258:	57 63       	ori	r21, 0x37	; 55
     25a:	bd 6d       	ori	r27, 0xDD	; 221
     25c:	ed fd       	.word	0xfded	; ????
     25e:	75 3e       	cpi	r23, 0xE5	; 229
     260:	f6 17       	cp	r31, r22
     262:	72 31       	cpi	r23, 0x12	; 18
     264:	bf 00       	.word	0x00bf	; ????
     266:	00 00       	nop
     268:	80 3f       	cpi	r24, 0xF0	; 240
     26a:	08 00       	.word	0x0008	; ????
     26c:	00 00       	nop
     26e:	be 92       	st	-X, r11
     270:	24 49       	sbci	r18, 0x94	; 148
     272:	12 3e       	cpi	r17, 0xE2	; 226
     274:	ab aa       	std	Y+51, r10	; 0x33
     276:	aa 2a       	or	r10, r26
     278:	be cd       	rjmp	.-1156   	; 0xfffffdf6 <__eeprom_end+0xff7efdf6>
     27a:	cc cc       	rjmp	.-1640   	; 0xfffffc14 <__eeprom_end+0xff7efc14>
     27c:	4c 3e       	cpi	r20, 0xEC	; 236
     27e:	00 00       	nop
     280:	00 80       	ld	r0, Z
     282:	be ab       	std	Y+54, r27	; 0x36
     284:	aa aa       	std	Y+50, r10	; 0x32
     286:	aa 3e       	cpi	r26, 0xEA	; 234
     288:	00 00       	nop
     28a:	00 00       	nop
     28c:	bf 00       	.word	0x00bf	; ????
     28e:	00 00       	nop
     290:	80 3f       	cpi	r24, 0xF0	; 240
     292:	00 00       	nop
     294:	00 00       	nop
     296:	00 08       	sbc	r0, r0
     298:	41 78       	andi	r20, 0x81	; 129
     29a:	d3 bb       	out	0x13, r29	; 19
     29c:	43 87       	std	Z+11, r20	; 0x0b
     29e:	d1 13       	cpse	r29, r17
     2a0:	3d 19       	sub	r19, r13
     2a2:	0e 3c       	cpi	r16, 0xCE	; 206
     2a4:	c3 bd       	out	0x23, r28	; 35
     2a6:	42 82       	std	Z+2, r4	; 0x02
     2a8:	ad 2b       	or	r26, r29
     2aa:	3e 68       	ori	r19, 0x8E	; 142
     2ac:	ec 82       	std	Y+4, r14	; 0x04
     2ae:	76 be       	out	0x36, r7	; 54
     2b0:	d9 8f       	std	Y+25, r29	; 0x19
     2b2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2b4:	3e 4c       	sbci	r19, 0xCE	; 206
     2b6:	80 ef       	ldi	r24, 0xF0	; 240
     2b8:	ff be       	out	0x3f, r15	; 63
     2ba:	01 c4       	rjmp	.+2050   	; 0xabe <font_5x7+0x1fa>
     2bc:	ff 7f       	andi	r31, 0xFF	; 255
     2be:	3f 00       	.word	0x003f	; ????
     2c0:	00 00       	nop
	...

000002c4 <__trampolines_end>:
     2c4:	00 00       	nop
     2c6:	00 00       	nop
     2c8:	00 00       	nop
     2ca:	20 50       	subi	r18, 0x00	; 0
     2cc:	70 50       	subi	r23, 0x00	; 0
     2ce:	20 00       	.word	0x0020	; ????
     2d0:	20 70       	andi	r18, 0x00	; 0
     2d2:	50 70       	andi	r21, 0x00	; 0
     2d4:	20 00       	.word	0x0020	; ????
     2d6:	00 50       	subi	r16, 0x00	; 0
     2d8:	70 70       	andi	r23, 0x00	; 0
     2da:	20 00       	.word	0x0020	; ????
     2dc:	00 20       	and	r0, r0
     2de:	70 70       	andi	r23, 0x00	; 0
     2e0:	20 00       	.word	0x0020	; ????
     2e2:	20 70       	andi	r18, 0x00	; 0
     2e4:	70 20       	and	r7, r0
     2e6:	70 00       	.word	0x0070	; ????
     2e8:	20 20       	and	r2, r0
     2ea:	70 20       	and	r7, r0
     2ec:	70 00       	.word	0x0070	; ????
     2ee:	00 00       	nop
     2f0:	20 00       	.word	0x0020	; ????
     2f2:	00 00       	nop
     2f4:	f0 f0       	brcs	.+60     	; 0x332 <__trampolines_end+0x6e>
     2f6:	d0 f0       	brcs	.+52     	; 0x32c <__trampolines_end+0x68>
     2f8:	f0 f0       	brcs	.+60     	; 0x336 <__trampolines_end+0x72>
     2fa:	00 70       	andi	r16, 0x00	; 0
     2fc:	50 70       	andi	r21, 0x00	; 0
     2fe:	00 00       	nop
     300:	f0 80       	ld	r15, Z
     302:	a0 80       	ld	r10, Z
     304:	f0 f0       	brcs	.+60     	; 0x342 <__trampolines_end+0x7e>
     306:	00 30       	cpi	r16, 0x00	; 0
     308:	10 60       	ori	r17, 0x00	; 0
     30a:	60 00       	.word	0x0060	; ????
     30c:	20 50       	subi	r18, 0x00	; 0
     30e:	20 70       	andi	r18, 0x00	; 0
     310:	20 00       	.word	0x0020	; ????
     312:	20 30       	cpi	r18, 0x00	; 0
     314:	20 20       	and	r2, r0
     316:	60 00       	.word	0x0060	; ????
     318:	20 30       	cpi	r18, 0x00	; 0
     31a:	50 10       	cpse	r5, r0
     31c:	20 00       	.word	0x0020	; ????
     31e:	20 70       	andi	r18, 0x00	; 0
     320:	50 70       	andi	r21, 0x00	; 0
     322:	20 00       	.word	0x0020	; ????
     324:	40 60       	ori	r20, 0x00	; 0
     326:	70 60       	ori	r23, 0x00	; 0
     328:	40 00       	.word	0x0040	; ????
     32a:	10 30       	cpi	r17, 0x00	; 0
     32c:	70 30       	cpi	r23, 0x00	; 0
     32e:	10 00       	.word	0x0010	; ????
     330:	20 70       	andi	r18, 0x00	; 0
     332:	20 70       	andi	r18, 0x00	; 0
     334:	20 00       	.word	0x0020	; ????
     336:	50 50       	subi	r21, 0x00	; 0
     338:	50 00       	.word	0x0050	; ????
     33a:	50 00       	.word	0x0050	; ????
     33c:	70 d0       	rcall	.+224    	; 0x41e <__trampolines_end+0x15a>
     33e:	d0 50       	subi	r29, 0x00	; 0
     340:	50 00       	.word	0x0050	; ????
     342:	30 60       	ori	r19, 0x00	; 0
     344:	50 30       	cpi	r21, 0x00	; 0
     346:	60 00       	.word	0x0060	; ????
     348:	00 00       	nop
     34a:	00 00       	nop
     34c:	70 00       	.word	0x0070	; ????
     34e:	20 70       	andi	r18, 0x00	; 0
     350:	20 70       	andi	r18, 0x00	; 0
     352:	20 70       	andi	r18, 0x00	; 0
     354:	20 70       	andi	r18, 0x00	; 0
     356:	20 20       	and	r2, r0
     358:	20 00       	.word	0x0020	; ????
     35a:	20 20       	and	r2, r0
     35c:	20 70       	andi	r18, 0x00	; 0
     35e:	20 00       	.word	0x0020	; ????
     360:	00 20       	and	r0, r0
     362:	f0 20       	and	r15, r0
     364:	00 00       	nop
     366:	00 40       	sbci	r16, 0x00	; 0
     368:	f0 40       	sbci	r31, 0x00	; 0
     36a:	00 00       	nop
     36c:	00 00       	nop
     36e:	40 70       	andi	r20, 0x00	; 0
     370:	00 00       	nop
     372:	00 50       	subi	r16, 0x00	; 0
     374:	70 50       	subi	r23, 0x00	; 0
     376:	00 00       	nop
     378:	00 20       	and	r0, r0
     37a:	70 70       	andi	r23, 0x00	; 0
     37c:	00 00       	nop
     37e:	00 70       	andi	r16, 0x00	; 0
     380:	70 20       	and	r7, r0
	...
     38a:	20 20       	and	r2, r0
     38c:	20 00       	.word	0x0020	; ????
     38e:	20 00       	.word	0x0020	; ????
     390:	50 50       	subi	r21, 0x00	; 0
     392:	00 00       	nop
     394:	00 00       	nop
     396:	50 70       	andi	r21, 0x00	; 0
     398:	50 70       	andi	r21, 0x00	; 0
     39a:	50 00       	.word	0x0050	; ????
     39c:	20 30       	cpi	r18, 0x00	; 0
     39e:	60 30       	cpi	r22, 0x00	; 0
     3a0:	60 20       	and	r6, r0
     3a2:	40 10       	cpse	r4, r0
     3a4:	20 40       	sbci	r18, 0x00	; 0
     3a6:	10 00       	.word	0x0010	; ????
     3a8:	20 50       	subi	r18, 0x00	; 0
     3aa:	30 50       	subi	r19, 0x00	; 0
     3ac:	70 00       	.word	0x0070	; ????
     3ae:	60 40       	sbci	r22, 0x00	; 0
     3b0:	00 00       	nop
     3b2:	00 00       	nop
     3b4:	20 40       	sbci	r18, 0x00	; 0
     3b6:	40 40       	sbci	r20, 0x00	; 0
     3b8:	20 00       	.word	0x0020	; ????
     3ba:	40 20       	and	r4, r0
     3bc:	20 20       	and	r2, r0
     3be:	40 00       	.word	0x0040	; ????
     3c0:	50 20       	and	r5, r0
     3c2:	70 20       	and	r7, r0
     3c4:	50 00       	.word	0x0050	; ????
     3c6:	00 20       	and	r0, r0
     3c8:	70 20       	and	r7, r0
     3ca:	00 00       	nop
     3cc:	00 00       	nop
     3ce:	00 00       	nop
     3d0:	60 40       	sbci	r22, 0x00	; 0
     3d2:	00 00       	nop
     3d4:	70 00       	.word	0x0070	; ????
     3d6:	00 00       	nop
     3d8:	00 00       	nop
     3da:	00 00       	nop
     3dc:	20 00       	.word	0x0020	; ????
     3de:	10 10       	cpse	r1, r0
     3e0:	20 40       	sbci	r18, 0x00	; 0
     3e2:	40 00       	.word	0x0040	; ????
     3e4:	20 50       	subi	r18, 0x00	; 0
     3e6:	50 50       	subi	r21, 0x00	; 0
     3e8:	20 00       	.word	0x0020	; ????
     3ea:	20 60       	ori	r18, 0x00	; 0
     3ec:	20 20       	and	r2, r0
     3ee:	70 00       	.word	0x0070	; ????
     3f0:	60 10       	cpse	r6, r0
     3f2:	20 40       	sbci	r18, 0x00	; 0
     3f4:	70 00       	.word	0x0070	; ????
     3f6:	60 10       	cpse	r6, r0
     3f8:	20 10       	cpse	r2, r0
     3fa:	60 00       	.word	0x0060	; ????
     3fc:	10 50       	subi	r17, 0x00	; 0
     3fe:	70 10       	cpse	r7, r0
     400:	10 00       	.word	0x0010	; ????
     402:	70 40       	sbci	r23, 0x00	; 0
     404:	60 10       	cpse	r6, r0
     406:	60 00       	.word	0x0060	; ????
     408:	20 40       	sbci	r18, 0x00	; 0
     40a:	60 50       	subi	r22, 0x00	; 0
     40c:	20 00       	.word	0x0020	; ????
     40e:	70 10       	cpse	r7, r0
     410:	30 20       	and	r3, r0
     412:	20 00       	.word	0x0020	; ????
     414:	20 50       	subi	r18, 0x00	; 0
     416:	20 50       	subi	r18, 0x00	; 0
     418:	20 00       	.word	0x0020	; ????
     41a:	20 50       	subi	r18, 0x00	; 0
     41c:	30 10       	cpse	r3, r0
     41e:	20 00       	.word	0x0020	; ????
     420:	00 00       	nop
     422:	20 00       	.word	0x0020	; ????
     424:	20 00       	.word	0x0020	; ????
     426:	00 00       	nop
     428:	20 00       	.word	0x0020	; ????
     42a:	60 40       	sbci	r22, 0x00	; 0
     42c:	10 20       	and	r1, r0
     42e:	40 20       	and	r4, r0
     430:	10 00       	.word	0x0010	; ????
     432:	00 00       	nop
     434:	70 00       	.word	0x0070	; ????
     436:	70 00       	.word	0x0070	; ????
     438:	40 20       	and	r4, r0
     43a:	10 20       	and	r1, r0
     43c:	40 00       	.word	0x0040	; ????
     43e:	60 10       	cpse	r6, r0
     440:	20 00       	.word	0x0020	; ????
     442:	20 00       	.word	0x0020	; ????
     444:	70 50       	subi	r23, 0x00	; 0
     446:	50 40       	sbci	r21, 0x00	; 0
     448:	70 00       	.word	0x0070	; ????
     44a:	20 50       	subi	r18, 0x00	; 0
     44c:	70 50       	subi	r23, 0x00	; 0
     44e:	50 00       	.word	0x0050	; ????
     450:	60 50       	subi	r22, 0x00	; 0
     452:	60 50       	subi	r22, 0x00	; 0
     454:	60 00       	.word	0x0060	; ????
     456:	30 40       	sbci	r19, 0x00	; 0
     458:	40 40       	sbci	r20, 0x00	; 0
     45a:	30 00       	.word	0x0030	; ????
     45c:	60 50       	subi	r22, 0x00	; 0
     45e:	50 50       	subi	r21, 0x00	; 0
     460:	60 00       	.word	0x0060	; ????
     462:	70 40       	sbci	r23, 0x00	; 0
     464:	60 40       	sbci	r22, 0x00	; 0
     466:	70 00       	.word	0x0070	; ????
     468:	70 40       	sbci	r23, 0x00	; 0
     46a:	60 40       	sbci	r22, 0x00	; 0
     46c:	40 00       	.word	0x0040	; ????
     46e:	30 40       	sbci	r19, 0x00	; 0
     470:	50 50       	subi	r21, 0x00	; 0
     472:	30 00       	.word	0x0030	; ????
     474:	50 50       	subi	r21, 0x00	; 0
     476:	70 50       	subi	r23, 0x00	; 0
     478:	50 00       	.word	0x0050	; ????
     47a:	70 20       	and	r7, r0
     47c:	20 20       	and	r2, r0
     47e:	70 00       	.word	0x0070	; ????
     480:	10 10       	cpse	r1, r0
     482:	10 50       	subi	r17, 0x00	; 0
     484:	20 00       	.word	0x0020	; ????
     486:	50 50       	subi	r21, 0x00	; 0
     488:	60 50       	subi	r22, 0x00	; 0
     48a:	50 00       	.word	0x0050	; ????
     48c:	40 40       	sbci	r20, 0x00	; 0
     48e:	40 40       	sbci	r20, 0x00	; 0
     490:	70 00       	.word	0x0070	; ????
     492:	50 70       	andi	r21, 0x00	; 0
     494:	70 50       	subi	r23, 0x00	; 0
     496:	50 00       	.word	0x0050	; ????
     498:	60 50       	subi	r22, 0x00	; 0
     49a:	50 50       	subi	r21, 0x00	; 0
     49c:	50 00       	.word	0x0050	; ????
     49e:	70 50       	subi	r23, 0x00	; 0
     4a0:	50 50       	subi	r21, 0x00	; 0
     4a2:	70 00       	.word	0x0070	; ????
     4a4:	60 50       	subi	r22, 0x00	; 0
     4a6:	60 40       	sbci	r22, 0x00	; 0
     4a8:	40 00       	.word	0x0040	; ????
     4aa:	20 50       	subi	r18, 0x00	; 0
     4ac:	50 70       	andi	r21, 0x00	; 0
     4ae:	30 00       	.word	0x0030	; ????
     4b0:	60 50       	subi	r22, 0x00	; 0
     4b2:	60 50       	subi	r22, 0x00	; 0
     4b4:	50 00       	.word	0x0050	; ????
     4b6:	30 40       	sbci	r19, 0x00	; 0
     4b8:	70 10       	cpse	r7, r0
     4ba:	60 00       	.word	0x0060	; ????
     4bc:	70 20       	and	r7, r0
     4be:	20 20       	and	r2, r0
     4c0:	20 00       	.word	0x0020	; ????
     4c2:	50 50       	subi	r21, 0x00	; 0
     4c4:	50 50       	subi	r21, 0x00	; 0
     4c6:	70 00       	.word	0x0070	; ????
     4c8:	50 50       	subi	r21, 0x00	; 0
     4ca:	50 50       	subi	r21, 0x00	; 0
     4cc:	20 00       	.word	0x0020	; ????
     4ce:	50 50       	subi	r21, 0x00	; 0
     4d0:	70 70       	andi	r23, 0x00	; 0
     4d2:	50 00       	.word	0x0050	; ????
     4d4:	50 50       	subi	r21, 0x00	; 0
     4d6:	20 50       	subi	r18, 0x00	; 0
     4d8:	50 00       	.word	0x0050	; ????
     4da:	50 50       	subi	r21, 0x00	; 0
     4dc:	20 20       	and	r2, r0
     4de:	20 00       	.word	0x0020	; ????
     4e0:	70 10       	cpse	r7, r0
     4e2:	20 40       	sbci	r18, 0x00	; 0
     4e4:	70 00       	.word	0x0070	; ????
     4e6:	60 40       	sbci	r22, 0x00	; 0
     4e8:	40 40       	sbci	r20, 0x00	; 0
     4ea:	60 00       	.word	0x0060	; ????
     4ec:	40 40       	sbci	r20, 0x00	; 0
     4ee:	20 10       	cpse	r2, r0
     4f0:	10 00       	.word	0x0010	; ????
     4f2:	60 20       	and	r6, r0
     4f4:	20 20       	and	r2, r0
     4f6:	60 00       	.word	0x0060	; ????
     4f8:	20 50       	subi	r18, 0x00	; 0
	...
     502:	00 f0       	brcs	.+0      	; 0x504 <__trampolines_end+0x240>
     504:	60 20       	and	r6, r0
     506:	00 00       	nop
     508:	00 00       	nop
     50a:	00 00       	nop
     50c:	30 50       	subi	r19, 0x00	; 0
     50e:	70 00       	.word	0x0070	; ????
     510:	40 40       	sbci	r20, 0x00	; 0
     512:	60 50       	subi	r22, 0x00	; 0
     514:	60 00       	.word	0x0060	; ????
     516:	00 00       	nop
     518:	30 40       	sbci	r19, 0x00	; 0
     51a:	30 00       	.word	0x0030	; ????
     51c:	10 10       	cpse	r1, r0
     51e:	30 50       	subi	r19, 0x00	; 0
     520:	30 00       	.word	0x0030	; ????
     522:	00 00       	nop
     524:	70 60       	ori	r23, 0x00	; 0
     526:	30 00       	.word	0x0030	; ????
     528:	10 20       	and	r1, r0
     52a:	70 20       	and	r7, r0
     52c:	20 00       	.word	0x0020	; ????
     52e:	00 00       	nop
     530:	70 50       	subi	r23, 0x00	; 0
     532:	10 70       	andi	r17, 0x00	; 0
     534:	40 40       	sbci	r20, 0x00	; 0
     536:	60 50       	subi	r22, 0x00	; 0
     538:	50 00       	.word	0x0050	; ????
     53a:	20 00       	.word	0x0020	; ????
     53c:	20 20       	and	r2, r0
     53e:	20 00       	.word	0x0020	; ????
     540:	20 00       	.word	0x0020	; ????
     542:	20 20       	and	r2, r0
     544:	20 60       	ori	r18, 0x00	; 0
     546:	40 40       	sbci	r20, 0x00	; 0
     548:	50 60       	ori	r21, 0x00	; 0
     54a:	50 00       	.word	0x0050	; ????
     54c:	20 20       	and	r2, r0
     54e:	20 20       	and	r2, r0
     550:	20 00       	.word	0x0020	; ????
     552:	00 00       	nop
     554:	70 70       	andi	r23, 0x00	; 0
     556:	50 00       	.word	0x0050	; ????
     558:	00 00       	nop
     55a:	60 50       	subi	r22, 0x00	; 0
     55c:	50 00       	.word	0x0050	; ????
     55e:	00 00       	nop
     560:	20 50       	subi	r18, 0x00	; 0
     562:	20 00       	.word	0x0020	; ????
     564:	00 00       	nop
     566:	60 50       	subi	r22, 0x00	; 0
     568:	60 40       	sbci	r22, 0x00	; 0
     56a:	00 00       	nop
     56c:	30 50       	subi	r19, 0x00	; 0
     56e:	30 10       	cpse	r3, r0
     570:	00 00       	nop
     572:	60 40       	sbci	r22, 0x00	; 0
     574:	40 00       	.word	0x0040	; ????
     576:	00 00       	nop
     578:	30 20       	and	r3, r0
     57a:	60 00       	.word	0x0060	; ????
     57c:	00 20       	and	r0, r0
     57e:	70 20       	and	r7, r0
     580:	30 00       	.word	0x0030	; ????
     582:	00 00       	nop
     584:	50 50       	subi	r21, 0x00	; 0
     586:	70 00       	.word	0x0070	; ????
     588:	00 00       	nop
     58a:	50 50       	subi	r21, 0x00	; 0
     58c:	20 00       	.word	0x0020	; ????
     58e:	00 00       	nop
     590:	50 70       	andi	r21, 0x00	; 0
     592:	70 00       	.word	0x0070	; ????
     594:	00 00       	nop
     596:	50 20       	and	r5, r0
     598:	50 00       	.word	0x0050	; ????
     59a:	00 00       	nop
     59c:	50 50       	subi	r21, 0x00	; 0
     59e:	20 40       	sbci	r18, 0x00	; 0
     5a0:	00 00       	nop
     5a2:	60 20       	and	r6, r0
     5a4:	30 00       	.word	0x0030	; ????
     5a6:	30 20       	and	r3, r0
     5a8:	60 20       	and	r6, r0
     5aa:	30 00       	.word	0x0030	; ????
     5ac:	20 20       	and	r2, r0
     5ae:	20 20       	and	r2, r0
     5b0:	20 00       	.word	0x0020	; ????
     5b2:	60 20       	and	r6, r0
     5b4:	30 20       	and	r3, r0
     5b6:	60 00       	.word	0x0060	; ????
     5b8:	50 a0       	ldd	r5, Z+32	; 0x20
     5ba:	00 00       	nop
     5bc:	00 00       	nop
     5be:	00 20       	and	r0, r0
     5c0:	50 70       	andi	r21, 0x00	; 0
     5c2:	00 00       	nop
     5c4:	30 40       	sbci	r19, 0x00	; 0
     5c6:	40 70       	andi	r20, 0x00	; 0
     5c8:	20 40       	sbci	r18, 0x00	; 0
     5ca:	50 00       	.word	0x0050	; ????
     5cc:	50 50       	subi	r21, 0x00	; 0
     5ce:	30 00       	.word	0x0030	; ????
     5d0:	10 20       	and	r1, r0
     5d2:	70 60       	ori	r23, 0x00	; 0
     5d4:	30 00       	.word	0x0030	; ????
     5d6:	20 50       	subi	r18, 0x00	; 0
     5d8:	30 50       	subi	r19, 0x00	; 0
     5da:	70 00       	.word	0x0070	; ????
     5dc:	50 00       	.word	0x0050	; ????
     5de:	30 50       	subi	r19, 0x00	; 0
     5e0:	70 00       	.word	0x0070	; ????
     5e2:	40 20       	and	r4, r0
     5e4:	30 50       	subi	r19, 0x00	; 0
     5e6:	70 00       	.word	0x0070	; ????
     5e8:	20 00       	.word	0x0020	; ????
     5ea:	30 50       	subi	r19, 0x00	; 0
     5ec:	70 00       	.word	0x0070	; ????
     5ee:	00 70       	andi	r16, 0x00	; 0
     5f0:	40 70       	andi	r20, 0x00	; 0
     5f2:	20 60       	ori	r18, 0x00	; 0
     5f4:	20 50       	subi	r18, 0x00	; 0
     5f6:	70 60       	ori	r23, 0x00	; 0
     5f8:	30 00       	.word	0x0030	; ????
     5fa:	50 00       	.word	0x0050	; ????
     5fc:	70 60       	ori	r23, 0x00	; 0
     5fe:	30 00       	.word	0x0030	; ????
     600:	40 20       	and	r4, r0
     602:	70 60       	ori	r23, 0x00	; 0
     604:	30 00       	.word	0x0030	; ????
     606:	50 00       	.word	0x0050	; ????
     608:	20 20       	and	r2, r0
     60a:	20 00       	.word	0x0020	; ????
     60c:	20 50       	subi	r18, 0x00	; 0
     60e:	00 20       	and	r0, r0
     610:	20 00       	.word	0x0020	; ????
     612:	40 20       	and	r4, r0
     614:	00 20       	and	r0, r0
     616:	20 00       	.word	0x0020	; ????
     618:	50 20       	and	r5, r0
     61a:	50 70       	andi	r21, 0x00	; 0
     61c:	50 00       	.word	0x0050	; ????
     61e:	20 20       	and	r2, r0
     620:	50 70       	andi	r21, 0x00	; 0
     622:	50 00       	.word	0x0050	; ????
     624:	10 20       	and	r1, r0
     626:	70 60       	ori	r23, 0x00	; 0
     628:	70 00       	.word	0x0070	; ????
     62a:	00 00       	nop
     62c:	30 70       	andi	r19, 0x00	; 0
     62e:	60 00       	.word	0x0060	; ????
     630:	30 60       	ori	r19, 0x00	; 0
     632:	70 60       	ori	r23, 0x00	; 0
     634:	70 00       	.word	0x0070	; ????
     636:	20 50       	subi	r18, 0x00	; 0
     638:	20 50       	subi	r18, 0x00	; 0
     63a:	20 00       	.word	0x0020	; ????
     63c:	50 00       	.word	0x0050	; ????
     63e:	20 50       	subi	r18, 0x00	; 0
     640:	20 00       	.word	0x0020	; ????
     642:	40 20       	and	r4, r0
     644:	20 50       	subi	r18, 0x00	; 0
     646:	20 00       	.word	0x0020	; ????
     648:	20 50       	subi	r18, 0x00	; 0
     64a:	00 50       	subi	r16, 0x00	; 0
     64c:	70 00       	.word	0x0070	; ????
     64e:	40 20       	and	r4, r0
     650:	50 50       	subi	r21, 0x00	; 0
     652:	70 00       	.word	0x0070	; ????
     654:	50 00       	.word	0x0050	; ????
     656:	50 50       	subi	r21, 0x00	; 0
     658:	20 40       	sbci	r18, 0x00	; 0
     65a:	50 20       	and	r5, r0
     65c:	50 50       	subi	r21, 0x00	; 0
     65e:	20 00       	.word	0x0020	; ????
     660:	50 00       	.word	0x0050	; ????
     662:	50 50       	subi	r21, 0x00	; 0
     664:	70 00       	.word	0x0070	; ????
     666:	20 70       	andi	r18, 0x00	; 0
     668:	40 70       	andi	r20, 0x00	; 0
     66a:	20 00       	.word	0x0020	; ????
     66c:	10 20       	and	r1, r0
     66e:	70 20       	and	r7, r0
     670:	70 00       	.word	0x0070	; ????
     672:	50 70       	andi	r21, 0x00	; 0
     674:	20 70       	andi	r18, 0x00	; 0
     676:	20 00       	.word	0x0020	; ????
     678:	00 60       	ori	r16, 0x00	; 0
     67a:	60 50       	subi	r22, 0x00	; 0
     67c:	50 00       	.word	0x0050	; ????
     67e:	30 20       	and	r3, r0
     680:	30 20       	and	r3, r0
     682:	60 00       	.word	0x0060	; ????
     684:	10 20       	and	r1, r0
     686:	30 50       	subi	r19, 0x00	; 0
     688:	70 00       	.word	0x0070	; ????
     68a:	10 20       	and	r1, r0
     68c:	00 20       	and	r0, r0
     68e:	20 00       	.word	0x0020	; ????
     690:	10 20       	and	r1, r0
     692:	70 50       	subi	r23, 0x00	; 0
     694:	70 00       	.word	0x0070	; ????
     696:	10 20       	and	r1, r0
     698:	00 50       	subi	r16, 0x00	; 0
     69a:	70 00       	.word	0x0070	; ????
     69c:	70 00       	.word	0x0070	; ????
     69e:	70 50       	subi	r23, 0x00	; 0
     6a0:	50 00       	.word	0x0050	; ????
     6a2:	70 00       	.word	0x0070	; ????
     6a4:	50 70       	andi	r21, 0x00	; 0
     6a6:	50 00       	.word	0x0050	; ????
     6a8:	30 50       	subi	r19, 0x00	; 0
     6aa:	70 00       	.word	0x0070	; ????
     6ac:	70 00       	.word	0x0070	; ????
     6ae:	20 50       	subi	r18, 0x00	; 0
     6b0:	20 00       	.word	0x0020	; ????
     6b2:	70 00       	.word	0x0070	; ????
     6b4:	20 00       	.word	0x0020	; ????
     6b6:	20 40       	sbci	r18, 0x00	; 0
     6b8:	30 00       	.word	0x0030	; ????
     6ba:	00 70       	andi	r16, 0x00	; 0
     6bc:	40 40       	sbci	r20, 0x00	; 0
     6be:	00 00       	nop
     6c0:	00 e0       	ldi	r16, 0x00	; 0
     6c2:	20 20       	and	r2, r0
     6c4:	00 00       	nop
     6c6:	40 50       	subi	r20, 0x00	; 0
     6c8:	20 50       	subi	r18, 0x00	; 0
     6ca:	30 00       	.word	0x0030	; ????
     6cc:	40 50       	subi	r20, 0x00	; 0
     6ce:	20 70       	andi	r18, 0x00	; 0
     6d0:	10 00       	.word	0x0010	; ????
     6d2:	20 00       	.word	0x0020	; ????
     6d4:	20 20       	and	r2, r0
     6d6:	20 00       	.word	0x0020	; ????
     6d8:	00 50       	subi	r16, 0x00	; 0
     6da:	a0 50       	subi	r26, 0x00	; 0
     6dc:	00 00       	nop
     6de:	00 a0       	ldd	r0, Z+32	; 0x20
     6e0:	50 a0       	ldd	r5, Z+32	; 0x20
     6e2:	00 00       	nop
     6e4:	40 10       	cpse	r4, r0
     6e6:	40 10       	cpse	r4, r0
     6e8:	40 10       	cpse	r4, r0
     6ea:	50 a0       	ldd	r5, Z+32	; 0x20
     6ec:	50 a0       	ldd	r5, Z+32	; 0x20
     6ee:	50 a0       	ldd	r5, Z+32	; 0x20
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
     6f2:	b0 e0       	ldi	r27, 0x00	; 0
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	20 20       	and	r2, r0
     6f8:	20 20       	and	r2, r0
     6fa:	20 20       	and	r2, r0
     6fc:	20 20       	and	r2, r0
     6fe:	e0 20       	and	r14, r0
     700:	20 20       	and	r2, r0
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	20 20       	and	r2, r0
     708:	50 50       	subi	r21, 0x00	; 0
     70a:	d0 50       	subi	r29, 0x00	; 0
     70c:	50 50       	subi	r21, 0x00	; 0
     70e:	00 00       	nop
     710:	f0 50       	subi	r31, 0x00	; 0
     712:	50 50       	subi	r21, 0x00	; 0
     714:	00 e0       	ldi	r16, 0x00	; 0
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	20 20       	and	r2, r0
     71a:	50 d0       	rcall	.+160    	; 0x7bc <__trampolines_end+0x4f8>
     71c:	10 d0       	rcall	.+32     	; 0x73e <__trampolines_end+0x47a>
     71e:	50 50       	subi	r21, 0x00	; 0
     720:	50 50       	subi	r21, 0x00	; 0
     722:	50 50       	subi	r21, 0x00	; 0
     724:	50 50       	subi	r21, 0x00	; 0
     726:	00 f0       	brcs	.+0      	; 0x728 <__trampolines_end+0x464>
     728:	10 d0       	rcall	.+32     	; 0x74a <__trampolines_end+0x486>
     72a:	50 50       	subi	r21, 0x00	; 0
     72c:	50 d0       	rcall	.+160    	; 0x7ce <__trampolines_end+0x50a>
     72e:	10 f0       	brcs	.+4      	; 0x734 <__trampolines_end+0x470>
     730:	00 00       	nop
     732:	50 50       	subi	r21, 0x00	; 0
     734:	f0 00       	.word	0x00f0	; ????
     736:	00 00       	nop
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	00 00       	nop
     73e:	00 00       	nop
     740:	e0 20       	and	r14, r0
     742:	20 20       	and	r2, r0
     744:	20 20       	and	r2, r0
     746:	30 00       	.word	0x0030	; ????
     748:	00 00       	nop
     74a:	20 20       	and	r2, r0
     74c:	f0 00       	.word	0x00f0	; ????
     74e:	00 00       	nop
     750:	00 00       	nop
     752:	f0 20       	and	r15, r0
     754:	20 20       	and	r2, r0
     756:	20 20       	and	r2, r0
     758:	30 20       	and	r3, r0
     75a:	20 20       	and	r2, r0
     75c:	00 00       	nop
     75e:	f0 00       	.word	0x00f0	; ????
     760:	00 00       	nop
     762:	20 20       	and	r2, r0
     764:	f0 20       	and	r15, r0
     766:	20 20       	and	r2, r0
     768:	20 30       	cpi	r18, 0x00	; 0
     76a:	20 30       	cpi	r18, 0x00	; 0
     76c:	20 20       	and	r2, r0
     76e:	50 50       	subi	r21, 0x00	; 0
     770:	50 50       	subi	r21, 0x00	; 0
     772:	50 50       	subi	r21, 0x00	; 0
     774:	50 50       	subi	r21, 0x00	; 0
     776:	40 70       	andi	r20, 0x00	; 0
     778:	00 00       	nop
     77a:	00 70       	andi	r16, 0x00	; 0
     77c:	40 50       	subi	r20, 0x00	; 0
     77e:	50 50       	subi	r21, 0x00	; 0
     780:	50 d0       	rcall	.+160    	; 0x822 <__trampolines_end+0x55e>
     782:	00 f0       	brcs	.+0      	; 0x784 <__trampolines_end+0x4c0>
     784:	00 00       	nop
     786:	00 f0       	brcs	.+0      	; 0x788 <__trampolines_end+0x4c4>
     788:	00 d0       	rcall	.+0      	; 0x78a <__trampolines_end+0x4c6>
     78a:	50 50       	subi	r21, 0x00	; 0
     78c:	50 50       	subi	r21, 0x00	; 0
     78e:	40 50       	subi	r20, 0x00	; 0
     790:	50 50       	subi	r21, 0x00	; 0
     792:	00 f0       	brcs	.+0      	; 0x794 <__trampolines_end+0x4d0>
     794:	00 f0       	brcs	.+0      	; 0x796 <__trampolines_end+0x4d2>
     796:	00 00       	nop
     798:	50 d0       	rcall	.+160    	; 0x83a <__trampolines_end+0x576>
     79a:	00 d0       	rcall	.+0      	; 0x79c <__trampolines_end+0x4d8>
     79c:	50 50       	subi	r21, 0x00	; 0
     79e:	20 f0       	brcs	.+8      	; 0x7a8 <__trampolines_end+0x4e4>
     7a0:	00 f0       	brcs	.+0      	; 0x7a2 <__trampolines_end+0x4de>
     7a2:	00 00       	nop
     7a4:	50 50       	subi	r21, 0x00	; 0
     7a6:	f0 00       	.word	0x00f0	; ????
     7a8:	00 00       	nop
     7aa:	00 f0       	brcs	.+0      	; 0x7ac <__trampolines_end+0x4e8>
     7ac:	00 f0       	brcs	.+0      	; 0x7ae <__trampolines_end+0x4ea>
     7ae:	20 20       	and	r2, r0
     7b0:	00 00       	nop
     7b2:	f0 50       	subi	r31, 0x00	; 0
     7b4:	50 50       	subi	r21, 0x00	; 0
     7b6:	50 50       	subi	r21, 0x00	; 0
     7b8:	70 00       	.word	0x0070	; ????
     7ba:	00 00       	nop
     7bc:	20 30       	cpi	r18, 0x00	; 0
     7be:	20 30       	cpi	r18, 0x00	; 0
     7c0:	00 00       	nop
     7c2:	00 30       	cpi	r16, 0x00	; 0
     7c4:	20 30       	cpi	r18, 0x00	; 0
     7c6:	20 20       	and	r2, r0
     7c8:	00 00       	nop
     7ca:	70 50       	subi	r23, 0x00	; 0
     7cc:	50 50       	subi	r21, 0x00	; 0
     7ce:	50 50       	subi	r21, 0x00	; 0
     7d0:	d0 50       	subi	r29, 0x00	; 0
     7d2:	50 50       	subi	r21, 0x00	; 0
     7d4:	20 f0       	brcs	.+8      	; 0x7de <__trampolines_end+0x51a>
     7d6:	00 f0       	brcs	.+0      	; 0x7d8 <__trampolines_end+0x514>
     7d8:	20 20       	and	r2, r0
     7da:	20 20       	and	r2, r0
     7dc:	e0 00       	.word	0x00e0	; ????
     7de:	00 00       	nop
     7e0:	00 00       	nop
     7e2:	30 20       	and	r3, r0
     7e4:	20 20       	and	r2, r0
     7e6:	f0 f0       	brcs	.+60     	; 0x824 <__trampolines_end+0x560>
     7e8:	f0 f0       	brcs	.+60     	; 0x826 <__trampolines_end+0x562>
     7ea:	f0 f0       	brcs	.+60     	; 0x828 <__trampolines_end+0x564>
     7ec:	00 00       	nop
     7ee:	00 f0       	brcs	.+0      	; 0x7f0 <__trampolines_end+0x52c>
     7f0:	f0 f0       	brcs	.+60     	; 0x82e <__trampolines_end+0x56a>
     7f2:	c0 c0       	rjmp	.+384    	; 0x974 <font_5x7+0xb0>
     7f4:	c0 c0       	rjmp	.+384    	; 0x976 <font_5x7+0xb2>
     7f6:	c0 c0       	rjmp	.+384    	; 0x978 <font_5x7+0xb4>
     7f8:	30 30       	cpi	r19, 0x00	; 0
     7fa:	30 30       	cpi	r19, 0x00	; 0
     7fc:	30 30       	cpi	r19, 0x00	; 0
     7fe:	f0 f0       	brcs	.+60     	; 0x83c <__trampolines_end+0x578>
     800:	f0 00       	.word	0x00f0	; ????
     802:	00 00       	nop
     804:	00 00       	nop
     806:	70 60       	ori	r23, 0x00	; 0
     808:	70 00       	.word	0x0070	; ????
     80a:	20 50       	subi	r18, 0x00	; 0
     80c:	60 50       	subi	r22, 0x00	; 0
     80e:	60 40       	sbci	r22, 0x00	; 0
     810:	70 50       	subi	r23, 0x00	; 0
     812:	40 40       	sbci	r20, 0x00	; 0
     814:	40 00       	.word	0x0040	; ????
     816:	70 50       	subi	r23, 0x00	; 0
     818:	50 50       	subi	r21, 0x00	; 0
     81a:	50 00       	.word	0x0050	; ????
     81c:	70 40       	sbci	r23, 0x00	; 0
     81e:	20 40       	sbci	r18, 0x00	; 0
     820:	70 00       	.word	0x0070	; ????
     822:	00 00       	nop
     824:	30 50       	subi	r19, 0x00	; 0
     826:	20 00       	.word	0x0020	; ????
     828:	00 00       	nop
     82a:	50 50       	subi	r21, 0x00	; 0
     82c:	70 40       	sbci	r23, 0x00	; 0
     82e:	00 10       	cpse	r0, r0
     830:	60 20       	and	r6, r0
     832:	20 00       	.word	0x0020	; ????
     834:	70 20       	and	r7, r0
     836:	50 20       	and	r5, r0
     838:	70 00       	.word	0x0070	; ????
     83a:	20 50       	subi	r18, 0x00	; 0
     83c:	70 50       	subi	r23, 0x00	; 0
     83e:	20 00       	.word	0x0020	; ????
     840:	00 20       	and	r0, r0
     842:	50 50       	subi	r21, 0x00	; 0
     844:	50 00       	.word	0x0050	; ????
     846:	30 40       	sbci	r19, 0x00	; 0
     848:	20 50       	subi	r18, 0x00	; 0
     84a:	20 00       	.word	0x0020	; ????
     84c:	00 00       	nop
     84e:	70 50       	subi	r23, 0x00	; 0
     850:	70 00       	.word	0x0070	; ????
     852:	20 70       	andi	r18, 0x00	; 0
     854:	50 70       	andi	r21, 0x00	; 0
     856:	20 00       	.word	0x0020	; ????
     858:	30 40       	sbci	r19, 0x00	; 0
     85a:	70 40       	sbci	r23, 0x00	; 0
     85c:	30 00       	.word	0x0030	; ????
     85e:	20 50       	subi	r18, 0x00	; 0
     860:	50 50       	subi	r21, 0x00	; 0
     862:	50 00       	.word	0x0050	; ????
     864:	70 00       	.word	0x0070	; ????
     866:	70 00       	.word	0x0070	; ????
     868:	70 00       	.word	0x0070	; ????
     86a:	20 70       	andi	r18, 0x00	; 0
     86c:	20 00       	.word	0x0020	; ????
     86e:	70 00       	.word	0x0070	; ????
     870:	60 10       	cpse	r6, r0
     872:	60 00       	.word	0x0060	; ????
     874:	70 00       	.word	0x0070	; ????
     876:	30 40       	sbci	r19, 0x00	; 0
     878:	30 00       	.word	0x0030	; ????
     87a:	70 00       	.word	0x0070	; ????
     87c:	00 10       	cpse	r0, r0
     87e:	20 20       	and	r2, r0
     880:	20 20       	and	r2, r0
     882:	20 20       	and	r2, r0
     884:	20 20       	and	r2, r0
     886:	40 00       	.word	0x0040	; ????
     888:	20 00       	.word	0x0020	; ????
     88a:	70 00       	.word	0x0070	; ????
     88c:	20 00       	.word	0x0020	; ????
     88e:	00 50       	subi	r16, 0x00	; 0
     890:	a0 50       	subi	r26, 0x00	; 0
     892:	a0 00       	.word	0x00a0	; ????
     894:	20 50       	subi	r18, 0x00	; 0
     896:	20 00       	.word	0x0020	; ????
     898:	00 00       	nop
     89a:	00 20       	and	r0, r0
     89c:	70 20       	and	r7, r0
     89e:	00 00       	nop
     8a0:	00 00       	nop
     8a2:	20 00       	.word	0x0020	; ????
     8a4:	00 00       	nop
     8a6:	30 20       	and	r3, r0
     8a8:	20 60       	ori	r18, 0x00	; 0
     8aa:	20 00       	.word	0x0020	; ????
     8ac:	70 50       	subi	r23, 0x00	; 0
     8ae:	50 00       	.word	0x0050	; ????
     8b0:	00 00       	nop
     8b2:	60 20       	and	r6, r0
     8b4:	40 60       	ori	r20, 0x00	; 0
     8b6:	00 00       	nop
     8b8:	00 00       	nop
     8ba:	60 60       	ori	r22, 0x00	; 0
	...

000008c4 <font_5x7>:
     8c4:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     8d4:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     8e4:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     8f4:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     904:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     914:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     924:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     934:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     944:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     954:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     964:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     974:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     984:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     994:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     9a4:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     9b4:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     9c4:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     9d4:	49 49 31 01 01 71 09 07 36 49 49 49 36 46 49 49     II1..q..6III6FII
     9e4:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     9f4:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     a04:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     a14:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     a24:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     a34:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     a44:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     a54:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     a64:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     a74:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     a84:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     a94:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     aa4:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     ab4:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     ac4:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     ad4:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     ae4:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     af4:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     b04:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     b14:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     b24:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     b34:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     b44:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     b54:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
     b64:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     b74:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     b84:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
     b94:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     ba4:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
     bb4:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
     bc4:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
     bd4:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     be4:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     bf4:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     c04:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     c14:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     c24:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     c34:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     c44:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     c54:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     c64:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     c74:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     c84:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     c94:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     ca4:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     cb4:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     cc4:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     cd4:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     ce4:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     cf4:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     d04:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     d14:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     d24:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
     d34:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     d44:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     d54:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     d64:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     d74:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     d84:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     d94:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     da4:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     db4:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00000dbf <IMG_SPEAKER_A>:
     dbf:	18 18 3c 42 a5 18                                   ..<B..

00000dc5 <__c.2161>:
     dc5:	6e 61 6e 00                                         nan.

00000dc9 <__c.2159>:
     dc9:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     dd9:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     de9:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     df9:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     e09:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     e19:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     e29:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     e39:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     e49:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     e59:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     e69:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     e79:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     e89:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     e99:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     ea9:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     eb9:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000ec7 <__c.2299>:
     ec7:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

00000ed4 <_StackPaint>:
 *  the maximum stack usage of the running application.
 */
void _StackPaint(void) __attribute__((naked)) __attribute__((optimize("O3"))) __attribute__((section (".init1")));
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
     ed4:	ee ed       	ldi	r30, 0xDE	; 222
     ed6:	fc e2       	ldi	r31, 0x2C	; 44
     ed8:	e3 70       	andi	r30, 0x03	; 3
     eda:	ff 27       	eor	r31, r31
     edc:	e2 52       	subi	r30, 0x22	; 34
     ede:	f3 4d       	sbci	r31, 0xD3	; 211
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
     ee0:	2f ef       	ldi	r18, 0xFF	; 255
     ee2:	3f e2       	ldi	r19, 0x2F	; 47
     ee4:	2c 7f       	andi	r18, 0xFC	; 252
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     ee6:	e2 17       	cp	r30, r18
     ee8:	f3 07       	cpc	r31, r19
     eea:	58 f4       	brcc	.+22     	; 0xf02 <_StackPaint+0x2e>
		*fill_pos = __SWAP_ENDIAN32(0xDEADBEEF);
     eec:	8e ed       	ldi	r24, 0xDE	; 222
     eee:	9d ea       	ldi	r25, 0xAD	; 173
     ef0:	ae eb       	ldi	r26, 0xBE	; 190
     ef2:	bf ee       	ldi	r27, 0xEF	; 239
     ef4:	81 93       	st	Z+, r24
     ef6:	91 93       	st	Z+, r25
     ef8:	a1 93       	st	Z+, r26
     efa:	b1 93       	st	Z+, r27
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     efc:	e2 17       	cp	r30, r18
     efe:	f3 07       	cpc	r31, r19
     f00:	c8 f3       	brcs	.-14     	; 0xef4 <_StackPaint+0x20>
     f02:	11 24       	eor	r1, r1
     f04:	1f be       	out	0x3f, r1	; 63
     f06:	cf ef       	ldi	r28, 0xFF	; 255
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	df e2       	ldi	r29, 0x2F	; 47
     f0c:	de bf       	out	0x3e, r29	; 62

00000f0e <__do_copy_data>:
     f0e:	1a e2       	ldi	r17, 0x2A	; 42
     f10:	a0 e0       	ldi	r26, 0x00	; 0
     f12:	b0 e2       	ldi	r27, 0x20	; 32
     f14:	e6 eb       	ldi	r30, 0xB6	; 182
     f16:	f4 eb       	ldi	r31, 0xB4	; 180
     f18:	00 e0       	ldi	r16, 0x00	; 0
     f1a:	0b bf       	out	0x3b, r16	; 59
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <__do_copy_data+0x14>
     f1e:	07 90       	elpm	r0, Z+
     f20:	0d 92       	st	X+, r0
     f22:	aa 30       	cpi	r26, 0x0A	; 10
     f24:	b1 07       	cpc	r27, r17
     f26:	d9 f7       	brne	.-10     	; 0xf1e <__do_copy_data+0x10>

00000f28 <__do_clear_bss>:
     f28:	2c e2       	ldi	r18, 0x2C	; 44
     f2a:	aa e0       	ldi	r26, 0x0A	; 10
     f2c:	ba e2       	ldi	r27, 0x2A	; 42
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <.do_clear_bss_start>

00000f30 <.do_clear_bss_loop>:
     f30:	1d 92       	st	X+, r1

00000f32 <.do_clear_bss_start>:
     f32:	ae 3d       	cpi	r26, 0xDE	; 222
     f34:	b2 07       	cpc	r27, r18
     f36:	e1 f7       	brne	.-8      	; 0xf30 <.do_clear_bss_loop>
     f38:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <main>
     f3c:	0c 94 59 5a 	jmp	0xb4b2	; 0xb4b2 <_exit>

00000f40 <__bad_interrupt>:
     f40:	5f c8       	rjmp	.-3906   	; 0x0 <__vectors>

00000f42 <adc_setup>:
void adc_setup(void) 
{	
	unsigned char samples = 16;
	
	//Disable power reduction for ADCA 
	PR.PRPA &= ~0x02;
     f42:	80 91 71 00 	lds	r24, 0x0071
     f46:	8d 7f       	andi	r24, 0xFD	; 253
     f48:	80 93 71 00 	sts	0x0071, r24

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     f52:	e0 e2       	ldi	r30, 0x20	; 32
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     f58:	10 92 ca 01 	sts	0x01CA, r1
	
	ADCA.CALL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     f5c:	e0 93 0c 02 	sts	0x020C, r30

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     f60:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     f64:	e1 e2       	ldi	r30, 0x21	; 33
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     f6a:	10 92 ca 01 	sts	0x01CA, r1
	ADCA.CALH = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     f6e:	e0 93 0d 02 	sts	0x020D, r30

	ADCA.CH0.CTRL	 = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	80 93 20 02 	sts	0x0220, r24
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
     f78:	10 92 21 02 	sts	0x0221, r1
	ADCA.CTRLB		 = ADC_RESOLUTION_12BIT_gc;
     f7c:	10 92 01 02 	sts	0x0201, r1
	ADCA.PRESCALER	 = ADC_PRESCALER_DIV256_gc;
     f80:	96 e0       	ldi	r25, 0x06	; 6
     f82:	90 93 04 02 	sts	0x0204, r25
	ADCA.REFCTRL	 = ADC_REFSEL_INTVCC_gc;
     f86:	90 e1       	ldi	r25, 0x10	; 16
     f88:	90 93 02 02 	sts	0x0202, r25
	ADCA.EVCTRL		 = ADC_EVACT_NONE_gc;
     f8c:	10 92 03 02 	sts	0x0203, r1
	ADCA.INTFLAGS	 = ADC_CH0IF_bm;
     f90:	80 93 06 02 	sts	0x0206, r24
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     f94:	10 92 22 02 	sts	0x0222, r1
	ADCA.CTRLA		 = ADC_ENABLE_bm;
     f98:	80 93 00 02 	sts	0x0200, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	9c e7       	ldi	r25, 0x7C	; 124
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <adc_setup+0x5e>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <adc_setup+0x64>
     fa6:	00 00       	nop
     fa8:	20 91 0a 2a 	lds	r18, 0x2A0A
     fac:	30 91 0b 2a 	lds	r19, 0x2A0B
     fb0:	40 e1       	ldi	r20, 0x10	; 16
	_delay_ms(4);
	
	while (samples > 0) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
     fb2:	51 e0       	ldi	r21, 0x01	; 1
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
	ADCA.CTRLA		 = ADC_ENABLE_bm;
	_delay_ms(4);
	
	while (samples > 0) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
     fb4:	80 91 20 02 	lds	r24, 0x0220
     fb8:	80 68       	ori	r24, 0x80	; 128
     fba:	80 93 20 02 	sts	0x0220, r24
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
     fbe:	80 91 23 02 	lds	r24, 0x0223
     fc2:	80 ff       	sbrs	r24, 0
     fc4:	fc cf       	rjmp	.-8      	; 0xfbe <adc_setup+0x7c>
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
     fc6:	50 93 23 02 	sts	0x0223, r21
		offset += ADCA.CH0.RES;
     fca:	80 91 24 02 	lds	r24, 0x0224
     fce:	90 91 25 02 	lds	r25, 0x0225
     fd2:	82 0f       	add	r24, r18
     fd4:	93 1f       	adc	r25, r19
     fd6:	41 50       	subi	r20, 0x01	; 1
	ADCA.INTFLAGS	 = ADC_CH0IF_bm;
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
	ADCA.CTRLA		 = ADC_ENABLE_bm;
	_delay_ms(4);
	
	while (samples > 0) {
     fd8:	11 f0       	breq	.+4      	; 0xfde <adc_setup+0x9c>
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
		offset += ADCA.CH0.RES;
     fda:	9c 01       	movw	r18, r24
     fdc:	eb cf       	rjmp	.-42     	; 0xfb4 <adc_setup+0x72>
		samples--;
	}
	
	ADCA.CTRLA &= ~(ADC_ENABLE_bm);
     fde:	20 91 00 02 	lds	r18, 0x0200
     fe2:	2e 7f       	andi	r18, 0xFE	; 254
     fe4:	20 93 00 02 	sts	0x0200, r18
	offset >>= 4;
     fe8:	24 e0       	ldi	r18, 0x04	; 4
     fea:	95 95       	asr	r25
     fec:	87 95       	ror	r24
     fee:	2a 95       	dec	r18
     ff0:	e1 f7       	brne	.-8      	; 0xfea <adc_setup+0xa8>
     ff2:	80 93 0a 2a 	sts	0x2A0A, r24
     ff6:	90 93 0b 2a 	sts	0x2A0B, r25
	ADCA.CMP = 0x0000;
     ffa:	10 92 18 02 	sts	0x0218, r1
     ffe:	10 92 19 02 	sts	0x0219, r1
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	80 93 20 02 	sts	0x0220, r24
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
    1008:	10 92 21 02 	sts	0x0221, r1
	ADCA.EVCTRL	= ADC_SWEEP_0_gc | ADC_EVACT_NONE_gc;
    100c:	10 92 03 02 	sts	0x0203, r1
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
    1010:	10 92 22 02 	sts	0x0222, r1
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
    1014:	10 92 2a 02 	sts	0x022A, r1
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
    1018:	10 92 32 02 	sts	0x0232, r1
	ADCA.CH3.INTCTRL = ADC_CH_INTLVL_OFF_gc;
    101c:	10 92 3a 02 	sts	0x023A, r1
	
	ADCA.CTRLA |= ADC_ENABLE_bm;
    1020:	80 91 00 02 	lds	r24, 0x0200
    1024:	81 60       	ori	r24, 0x01	; 1
    1026:	80 93 00 02 	sts	0x0200, r24
    102a:	9f ef       	ldi	r25, 0xFF	; 255
    102c:	29 ef       	ldi	r18, 0xF9	; 249
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	91 50       	subi	r25, 0x01	; 1
    1032:	20 40       	sbci	r18, 0x00	; 0
    1034:	80 40       	sbci	r24, 0x00	; 0
    1036:	e1 f7       	brne	.-8      	; 0x1030 <adc_setup+0xee>
    1038:	00 c0       	rjmp	.+0      	; 0x103a <adc_setup+0xf8>
    103a:	00 00       	nop
    103c:	08 95       	ret

0000103e <adc_disable>:
	_delay_ms(10);
}

void adc_disable(void) 
{	
	ADCA.CTRLA &= ~(ADC_ENABLE_bm);
    103e:	e0 e0       	ldi	r30, 0x00	; 0
    1040:	f2 e0       	ldi	r31, 0x02	; 2
    1042:	80 81       	ld	r24, Z
    1044:	8e 7f       	andi	r24, 0xFE	; 254
    1046:	80 83       	st	Z, r24
	
	//Enable power reduction for ADCA
	PR.PRPA |= 0x02;
    1048:	e0 e7       	ldi	r30, 0x70	; 112
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	81 81       	ldd	r24, Z+1	; 0x01
    104e:	82 60       	ori	r24, 0x02	; 2
    1050:	81 83       	std	Z+1, r24	; 0x01
    1052:	08 95       	ret

00001054 <adc_enable_current_measurement>:
	return 0;
}

void adc_enable_current_measurement(void) 
{	
	PORTA.DIRSET = CURRENT_MEASUREMENT_ENABLE;
    1054:	e0 e0       	ldi	r30, 0x00	; 0
    1056:	f6 e0       	ldi	r31, 0x06	; 6
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR = CURRENT_MEASUREMENT_ENABLE;
    105c:	86 83       	std	Z+6, r24	; 0x06
    105e:	08 95       	ret

00001060 <adc_disable_current_measurement>:
	//PORTA.PIN1CTRL = PORT_OPC_PULLUP_gc
}

void adc_disable_current_measurement(void) 
{	
	PORTA.DIRSET = CURRENT_MEASUREMENT_ENABLE;
    1060:	e0 e0       	ldi	r30, 0x00	; 0
    1062:	f6 e0       	ldi	r31, 0x06	; 6
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = CURRENT_MEASUREMENT_ENABLE;
    1068:	85 83       	std	Z+5, r24	; 0x05
    106a:	08 95       	ret

0000106c <adc_read_voltage>:
	//Enable power reduction for ADCA
	PR.PRPA |= 0x02;
}

uint16_t adc_read_voltage(void) 
{	
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	00 d0       	rcall	.+0      	; 0x1072 <adc_read_voltage+0x6>
    1072:	00 d0       	rcall	.+0      	; 0x1074 <adc_read_voltage+0x8>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
	adc_enable_current_measurement();
    1078:	ed df       	rcall	.-38     	; 0x1054 <adc_enable_current_measurement>
    107a:	49 e1       	ldi	r20, 0x19	; 25
	uint32_t val = 0;
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	cb 01       	movw	r24, r22
	for (uint8_t i = 0; i < 25; i++) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    1082:	51 e0       	ldi	r21, 0x01	; 1
uint16_t adc_read_voltage(void) 
{	
	adc_enable_current_measurement();
	uint32_t val = 0;
	for (uint8_t i = 0; i < 25; i++) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
    1084:	20 91 20 02 	lds	r18, 0x0220
    1088:	20 68       	ori	r18, 0x80	; 128
    108a:	20 93 20 02 	sts	0x0220, r18
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
    108e:	20 91 23 02 	lds	r18, 0x0223
    1092:	20 ff       	sbrs	r18, 0
    1094:	fc cf       	rjmp	.-8      	; 0x108e <adc_read_voltage+0x22>
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    1096:	50 93 23 02 	sts	0x0223, r21
		val += ADCA.CH0.RES;
    109a:	20 91 24 02 	lds	r18, 0x0224
    109e:	30 91 25 02 	lds	r19, 0x0225
    10a2:	62 0f       	add	r22, r18
    10a4:	73 1f       	adc	r23, r19
    10a6:	81 1d       	adc	r24, r1
    10a8:	91 1d       	adc	r25, r1
    10aa:	41 50       	subi	r20, 0x01	; 1

uint16_t adc_read_voltage(void) 
{	
	adc_enable_current_measurement();
	uint32_t val = 0;
	for (uint8_t i = 0; i < 25; i++) {
    10ac:	59 f7       	brne	.-42     	; 0x1084 <adc_read_voltage+0x18>
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
		val += ADCA.CH0.RES;
	}
	adc_disable_current_measurement();
    10ae:	69 83       	std	Y+1, r22	; 0x01
    10b0:	7a 83       	std	Y+2, r23	; 0x02
    10b2:	8b 83       	std	Y+3, r24	; 0x03
    10b4:	9c 83       	std	Y+4, r25	; 0x04
    10b6:	d4 df       	rcall	.-88     	; 0x1060 <adc_disable_current_measurement>

	return val/25;
    10b8:	69 81       	ldd	r22, Y+1	; 0x01
    10ba:	7a 81       	ldd	r23, Y+2	; 0x02
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	29 e1       	ldi	r18, 0x19	; 25
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e0       	ldi	r20, 0x00	; 0
    10c6:	50 e0       	ldi	r21, 0x00	; 0
    10c8:	0e 94 e5 52 	call	0xa5ca	; 0xa5ca <__udivmodsi4>
}
    10cc:	c9 01       	movw	r24, r18
    10ce:	24 96       	adiw	r28, 0x04	; 4
    10d0:	cd bf       	out	0x3d, r28	; 61
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	08 95       	ret

000010da <adc_get_battery_voltage>:

float adc_get_battery_voltage(void) 
{
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
	adc_setup();
    10de:	31 df       	rcall	.-414    	; 0xf42 <adc_setup>
	
	float offset_error = 0.33;
	float measured_voltage;
	float battery_voltage;
	
	measured_voltage = (float)adc_read_voltage();
    10e0:	c5 df       	rcall	.-118    	; 0x106c <adc_read_voltage>
    10e2:	ec 01       	movw	r28, r24
	battery_voltage = ((measured_voltage * 2.05f)/(4095.0f)) * 32.0f/10.0f;
	
	adc_disable();
    10e4:	ac df       	rcall	.-168    	; 0x103e <adc_disable>
	
	float offset_error = 0.33;
	float measured_voltage;
	float battery_voltage;
	
	measured_voltage = (float)adc_read_voltage();
    10e6:	be 01       	movw	r22, r28
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatunsisf>
	battery_voltage = ((measured_voltage * 2.05f)/(4095.0f)) * 32.0f/10.0f;
    10f0:	23 e3       	ldi	r18, 0x33	; 51
    10f2:	33 e3       	ldi	r19, 0x33	; 51
    10f4:	43 e0       	ldi	r20, 0x03	; 3
    10f6:	50 e4       	ldi	r21, 0x40	; 64
    10f8:	0e 94 75 4d 	call	0x9aea	; 0x9aea <__mulsf3>
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 ef       	ldi	r19, 0xF0	; 240
    1100:	4f e7       	ldi	r20, 0x7F	; 127
    1102:	55 e4       	ldi	r21, 0x45	; 69
    1104:	0e 94 4e 4c 	call	0x989c	; 0x989c <__divsf3>
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	52 e4       	ldi	r21, 0x42	; 66
    1110:	0e 94 75 4d 	call	0x9aea	; 0x9aea <__mulsf3>
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e2       	ldi	r20, 0x20	; 32
    111a:	51 e4       	ldi	r21, 0x41	; 65
    111c:	0e 94 4e 4c 	call	0x989c	; 0x989c <__divsf3>
	
	adc_disable();
	
	return (battery_voltage - offset_error);
    1120:	23 ec       	ldi	r18, 0xC3	; 195
    1122:	35 ef       	ldi	r19, 0xF5	; 245
    1124:	48 ea       	ldi	r20, 0xA8	; 168
    1126:	5e e3       	ldi	r21, 0x3E	; 62
    1128:	0e 94 e9 4b 	call	0x97d2	; 0x97d2 <__subsf3>
}
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	08 95       	ret

00001132 <adc_get_battery_percentage>:
uint8_t adc_get_battery_percentage(void) 
{	
	uint16_t voltage;
	float battery_voltage;
	
	battery_voltage = (adc_get_battery_voltage() * 100.0f);
    1132:	d3 df       	rcall	.-90     	; 0x10da <adc_get_battery_voltage>
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	48 ec       	ldi	r20, 0xC8	; 200
    113a:	52 e4       	ldi	r21, 0x42	; 66
    113c:	0e 94 75 4d 	call	0x9aea	; 0x9aea <__mulsf3>
	voltage = (uint16_t)battery_voltage;
    1140:	0e 94 bb 4c 	call	0x9976	; 0x9976 <__fixunssfsi>
	
	if (voltage > 600) {
    1144:	69 35       	cpi	r22, 0x59	; 89
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	78 07       	cpc	r23, r24
    114a:	68 f5       	brcc	.+90     	; 0x11a6 <adc_get_battery_percentage+0x74>
		return 99;
	} else if (voltage > 575) {
    114c:	60 34       	cpi	r22, 0x40	; 64
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	78 07       	cpc	r23, r24
    1152:	58 f5       	brcc	.+86     	; 0x11aa <adc_get_battery_percentage+0x78>
		return 95;
	} else if (voltage > 550) {
    1154:	67 32       	cpi	r22, 0x27	; 39
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	78 07       	cpc	r23, r24
    115a:	48 f5       	brcc	.+82     	; 0x11ae <adc_get_battery_percentage+0x7c>
		return 90;
	} else if (voltage > 525) {
    115c:	6e 30       	cpi	r22, 0x0E	; 14
    115e:	82 e0       	ldi	r24, 0x02	; 2
    1160:	78 07       	cpc	r23, r24
    1162:	38 f5       	brcc	.+78     	; 0x11b2 <adc_get_battery_percentage+0x80>
		return 80;
	} else if (voltage > 500) {
    1164:	65 3f       	cpi	r22, 0xF5	; 245
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	78 07       	cpc	r23, r24
    116a:	28 f5       	brcc	.+74     	; 0x11b6 <adc_get_battery_percentage+0x84>
		return 70;
	} else if (voltage > 475) {
    116c:	6c 3d       	cpi	r22, 0xDC	; 220
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	78 07       	cpc	r23, r24
    1172:	18 f5       	brcc	.+70     	; 0x11ba <adc_get_battery_percentage+0x88>
		return 60;
	} else if (voltage > 450) {
    1174:	63 3c       	cpi	r22, 0xC3	; 195
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	78 07       	cpc	r23, r24
    117a:	08 f5       	brcc	.+66     	; 0x11be <adc_get_battery_percentage+0x8c>
		return 50;
	} else if (voltage > 425) {
    117c:	6a 3a       	cpi	r22, 0xAA	; 170
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	78 07       	cpc	r23, r24
    1182:	f8 f4       	brcc	.+62     	; 0x11c2 <adc_get_battery_percentage+0x90>
		return 40;
	} else if (voltage > 415) {
    1184:	60 3a       	cpi	r22, 0xA0	; 160
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	78 07       	cpc	r23, r24
    118a:	e8 f4       	brcc	.+58     	; 0x11c6 <adc_get_battery_percentage+0x94>
		return 30;
	} else if (voltage > 400) {
    118c:	61 39       	cpi	r22, 0x91	; 145
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	78 07       	cpc	r23, r24
    1192:	d8 f4       	brcc	.+54     	; 0x11ca <adc_get_battery_percentage+0x98>
		return 20;
	} else if (voltage > 375) {
    1194:	68 37       	cpi	r22, 0x78	; 120
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	78 07       	cpc	r23, r24
    119a:	c8 f4       	brcc	.+50     	; 0x11ce <adc_get_battery_percentage+0x9c>
		return 10;
	} else if (voltage > 350) {
    119c:	6f 35       	cpi	r22, 0x5F	; 95
    119e:	71 40       	sbci	r23, 0x01	; 1
    11a0:	c0 f0       	brcs	.+48     	; 0x11d2 <adc_get_battery_percentage+0xa0>
		return 5;
    11a2:	85 e0       	ldi	r24, 0x05	; 5
    11a4:	08 95       	ret
	
	battery_voltage = (adc_get_battery_voltage() * 100.0f);
	voltage = (uint16_t)battery_voltage;
	
	if (voltage > 600) {
		return 99;
    11a6:	83 e6       	ldi	r24, 0x63	; 99
    11a8:	08 95       	ret
	} else if (voltage > 575) {
		return 95;
    11aa:	8f e5       	ldi	r24, 0x5F	; 95
    11ac:	08 95       	ret
	} else if (voltage > 550) {
		return 90;
    11ae:	8a e5       	ldi	r24, 0x5A	; 90
    11b0:	08 95       	ret
	} else if (voltage > 525) {
		return 80;
    11b2:	80 e5       	ldi	r24, 0x50	; 80
    11b4:	08 95       	ret
	} else if (voltage > 500) {
		return 70;
    11b6:	86 e4       	ldi	r24, 0x46	; 70
    11b8:	08 95       	ret
	} else if (voltage > 475) {
		return 60;
    11ba:	8c e3       	ldi	r24, 0x3C	; 60
    11bc:	08 95       	ret
	} else if (voltage > 450) {
		return 50;
    11be:	82 e3       	ldi	r24, 0x32	; 50
    11c0:	08 95       	ret
	} else if (voltage > 425) {
		return 40;
    11c2:	88 e2       	ldi	r24, 0x28	; 40
    11c4:	08 95       	ret
	} else if (voltage > 415) {
		return 30;
    11c6:	8e e1       	ldi	r24, 0x1E	; 30
    11c8:	08 95       	ret
	} else if (voltage > 400) {
		return 20;
    11ca:	84 e1       	ldi	r24, 0x14	; 20
    11cc:	08 95       	ret
	} else if (voltage > 375) {
		return 10;
    11ce:	8a e0       	ldi	r24, 0x0A	; 10
    11d0:	08 95       	ret
	} else if (voltage > 350) {
		return 5;
	}
	
	return 0;
    11d2:	80 e0       	ldi	r24, 0x00	; 0
}
    11d4:	08 95       	ret

000011d6 <clock_setup_32_mhz_pll>:
	CLK.CTRL	= CLK_SCLKSEL_RC32M_gc;
}

void clock_setup_32_mhz_pll(void) 
{	
	OSC.PLLCTRL	= 0 | OSC_PLLFAC4_bm;
    11d6:	80 e1       	ldi	r24, 0x10	; 16
    11d8:	80 93 55 00 	sts	0x0055, r24
	OSC.CTRL	|= OSC_PLLEN_bm;
    11dc:	80 91 50 00 	lds	r24, 0x0050
    11e0:	80 61       	ori	r24, 0x10	; 16
    11e2:	80 93 50 00 	sts	0x0050, r24
	while ( !(OSC.STATUS & OSC_PLLEN_bm) ) ;
    11e6:	80 91 51 00 	lds	r24, 0x0051
    11ea:	84 ff       	sbrs	r24, 4
    11ec:	fc cf       	rjmp	.-8      	; 0x11e6 <clock_setup_32_mhz_pll+0x10>
	CCP			= CCP_IOREG_gc;
    11ee:	88 ed       	ldi	r24, 0xD8	; 216
    11f0:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL	= (CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_PLL_gc;
    11f2:	80 91 40 00 	lds	r24, 0x0040
    11f6:	88 7f       	andi	r24, 0xF8	; 248
    11f8:	84 60       	ori	r24, 0x04	; 4
    11fa:	80 93 40 00 	sts	0x0040, r24
    11fe:	08 95       	ret

00001200 <dac_speaker_on>:

#include "dac.h"

void dac_speaker_on(void) 
{
	PORTD.DIRSET = SPEAKER_EN;
    1200:	e0 e6       	ldi	r30, 0x60	; 96
    1202:	f6 e0       	ldi	r31, 0x06	; 6
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = SPEAKER_EN;
    1208:	85 83       	std	Z+5, r24	; 0x05
    120a:	08 95       	ret

0000120c <dac_speaker_off>:
}

void dac_speaker_off(void) 
{
	PORTD.DIRSET = SPEAKER_EN;
    120c:	e0 e6       	ldi	r30, 0x60	; 96
    120e:	f6 e0       	ldi	r31, 0x06	; 6
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTCLR = SPEAKER_EN;
    1214:	86 83       	std	Z+6, r24	; 0x06
    1216:	08 95       	ret

00001218 <dac_setup>:
}

void dac_setup(bool dual_channel) 
{
	//Disable power reduction for DACB
	PR.PRPB &= ~0x04;
    1218:	90 91 72 00 	lds	r25, 0x0072
    121c:	9b 7f       	andi	r25, 0xFB	; 251
    121e:	90 93 72 00 	sts	0x0072, r25
			
	if (dual_channel)
    1222:	88 23       	and	r24, r24
    1224:	89 f0       	breq	.+34     	; 0x1248 <dac_setup+0x30>
	{
		PORTB.DIRSET = DAC0 | DAC1;
    1226:	8c e0       	ldi	r24, 0x0C	; 12
    1228:	80 93 21 06 	sts	0x0621, r24
		
		DACB.CTRLA |= DAC_CH0EN_bm | DAC_CH1EN_bm;
    122c:	80 91 20 03 	lds	r24, 0x0320
    1230:	8c 60       	ori	r24, 0x0C	; 12
    1232:	80 93 20 03 	sts	0x0320, r24
		DACB.CTRLC |= DAC_REFSEL_AVCC_gc;
    1236:	80 91 22 03 	lds	r24, 0x0322
    123a:	88 60       	ori	r24, 0x08	; 8
    123c:	80 93 22 03 	sts	0x0322, r24
		DACB.CTRLB |= DAC_CHSEL_DUAL_gc;
    1240:	80 91 21 03 	lds	r24, 0x0321
    1244:	80 64       	ori	r24, 0x40	; 64
    1246:	0f c0       	rjmp	.+30     	; 0x1266 <dac_setup+0x4e>
	} else {
		PORTB.DIRSET = DAC0;
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	80 93 21 06 	sts	0x0621, r24
		
		DACB.CTRLA |= DAC_CH0EN_bm;
    124e:	80 91 20 03 	lds	r24, 0x0320
    1252:	84 60       	ori	r24, 0x04	; 4
    1254:	80 93 20 03 	sts	0x0320, r24
		DACB.CTRLC |= DAC_REFSEL_AVCC_gc;
    1258:	80 91 22 03 	lds	r24, 0x0322
    125c:	88 60       	ori	r24, 0x08	; 8
    125e:	80 93 22 03 	sts	0x0322, r24
		DACB.CTRLB |= DAC_CHSEL_SINGLE_gc;
    1262:	80 91 21 03 	lds	r24, 0x0321
    1266:	80 93 21 03 	sts	0x0321, r24

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    1270:	e2 e3       	ldi	r30, 0x32	; 50
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    1276:	10 92 ca 01 	sts	0x01CA, r1
	}
	
	DACB.CH0OFFSETCAL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL) );
    127a:	e0 93 29 03 	sts	0x0329, r30

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    127e:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    1282:	e3 e3       	ldi	r30, 0x33	; 51
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    1288:	10 92 ca 01 	sts	0x01CA, r1
	DACB.CH0GAINCAL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL) );
    128c:	e0 93 28 03 	sts	0x0328, r30

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    1290:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    1294:	e6 e3       	ldi	r30, 0x36	; 54
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    129a:	10 92 ca 01 	sts	0x01CA, r1
	
	DACB.CH1OFFSETCAL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL) );
    129e:	e0 93 2b 03 	sts	0x032B, r30

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    12a2:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    12a6:	e7 e3       	ldi	r30, 0x37	; 55
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    12ac:	10 92 ca 01 	sts	0x01CA, r1
	DACB.CH1GAINCAL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL) );
    12b0:	e0 93 2a 03 	sts	0x032A, r30
	
	DACB.CTRLA |= DAC_ENABLE_bm;
    12b4:	80 91 20 03 	lds	r24, 0x0320
    12b8:	81 60       	ori	r24, 0x01	; 1
    12ba:	80 93 20 03 	sts	0x0320, r24
	
	dac_speaker_on();
    12be:	a0 cf       	rjmp	.-192    	; 0x1200 <dac_speaker_on>

000012c0 <dac_disable>:
}

void dac_disable(void) 
{
	PORTB.DIRCLR = DAC0 | DAC1;
    12c0:	e0 e2       	ldi	r30, 0x20	; 32
    12c2:	f6 e0       	ldi	r31, 0x06	; 6
    12c4:	8c e0       	ldi	r24, 0x0C	; 12
    12c6:	82 83       	std	Z+2, r24	; 0x02
	
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;
    12c8:	88 e1       	ldi	r24, 0x18	; 24
    12ca:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;
    12cc:	83 8b       	std	Z+19, r24	; 0x13
	
	DACB.CTRLA &= ~(DAC_ENABLE_bm);
    12ce:	e0 e2       	ldi	r30, 0x20	; 32
    12d0:	f3 e0       	ldi	r31, 0x03	; 3
    12d2:	80 81       	ld	r24, Z
    12d4:	8e 7f       	andi	r24, 0xFE	; 254
    12d6:	80 83       	st	Z, r24
	dac_speaker_off();
    12d8:	99 df       	rcall	.-206    	; 0x120c <dac_speaker_off>
	
	//Enable power reduction for DACB
	PR.PRPB |= 0x04;
    12da:	e0 e7       	ldi	r30, 0x70	; 112
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	84 60       	ori	r24, 0x04	; 4
    12e2:	82 83       	std	Z+2, r24	; 0x02
    12e4:	08 95       	ret

000012e6 <__vector_6>:
}
*/

//! DMA CH0 Interrupt service routine. Clear interrupt flags after check. 
ISR(DMA_CH0_vect)
{
    12e6:	1f 92       	push	r1
    12e8:	0f 92       	push	r0
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	0f 92       	push	r0
    12ee:	11 24       	eor	r1, r1
    12f0:	8f 93       	push	r24
	if (DMA.CH0.CTRLB & DMA_CH_ERRIF_bm) {
    12f2:	80 91 11 01 	lds	r24, 0x0111
    12f6:	85 ff       	sbrs	r24, 5
    12f8:	08 c0       	rjmp	.+16     	; 0x130a <__vector_6+0x24>
		DMA.CH0.CTRLB |= DMA_CH_ERRIF_bm;
    12fa:	80 91 11 01 	lds	r24, 0x0111
    12fe:	80 62       	ori	r24, 0x20	; 32
    1300:	80 93 11 01 	sts	0x0111, r24
		gStatus = false;
    1304:	10 92 31 2c 	sts	0x2C31, r1
    1308:	08 c0       	rjmp	.+16     	; 0x131a <__vector_6+0x34>
	} else {
		DMA.CH0.CTRLB |= DMA_CH_TRNIF_bm;
    130a:	80 91 11 01 	lds	r24, 0x0111
    130e:	80 61       	ori	r24, 0x10	; 16
    1310:	80 93 11 01 	sts	0x0111, r24
		gStatus = true;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	80 93 31 2c 	sts	0x2C31, r24
	}
	gInterruptDone = true;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	80 93 32 2c 	sts	0x2C32, r24
}
    1320:	8f 91       	pop	r24
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	0f 90       	pop	r0
    1328:	1f 90       	pop	r1
    132a:	18 95       	reti

0000132c <EEPROM_WriteEnv>:
			}
		}
	}
	*/
	
	eeprom_update_block(&env,EEPROM_START,sizeof(env));
    132c:	4b ea       	ldi	r20, 0xAB	; 171
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	82 e2       	ldi	r24, 0x22	; 34
    1336:	9b e2       	ldi	r25, 0x2B	; 43
    1338:	0e 94 88 59 	call	0xb310	; 0xb310 <__eeupd_block_x64a4u>
	
	return 1;
}
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	08 95       	ret

00001340 <EEPROM_ReadEnv>:

uint8_t EEPROM_ReadEnv(void) 
{
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	cb 5a       	subi	r28, 0xAB	; 171
    134e:	d1 09       	sbc	r29, r1
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	de bf       	out	0x3e, r29	; 62
	env_variables_t temp;
	memset(&temp,0,sizeof(temp));
    1354:	8e 01       	movw	r16, r28
    1356:	0f 5f       	subi	r16, 0xFF	; 255
    1358:	1f 4f       	sbci	r17, 0xFF	; 255
    135a:	8b ea       	ldi	r24, 0xAB	; 171
    135c:	f8 01       	movw	r30, r16
    135e:	11 92       	st	Z+, r1
    1360:	8a 95       	dec	r24
    1362:	e9 f7       	brne	.-6      	; 0x135e <EEPROM_ReadEnv+0x1e>
	eeprom_read_block(&temp,EEPROM_START,sizeof(temp));
    1364:	4b ea       	ldi	r20, 0xAB	; 171
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	c8 01       	movw	r24, r16
    136e:	0e 94 7d 59 	call	0xb2fa	; 0xb2fa <__eerd_block_x64a4u>
	}
	
	memcpy(&env, temp, sizeof(temp));
	*/
	
	if (temp.id != 0 && temp.id != 0xff) {
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	81 50       	subi	r24, 0x01	; 1
    1376:	8e 3f       	cpi	r24, 0xFE	; 254
    1378:	50 f4       	brcc	.+20     	; 0x138e <EEPROM_ReadEnv+0x4e>
		memcpy(&env,&temp,sizeof(temp));
    137a:	8b ea       	ldi	r24, 0xAB	; 171
    137c:	f8 01       	movw	r30, r16
    137e:	a2 e2       	ldi	r26, 0x22	; 34
    1380:	bb e2       	ldi	r27, 0x2B	; 43
    1382:	01 90       	ld	r0, Z+
    1384:	0d 92       	st	X+, r0
    1386:	8a 95       	dec	r24
    1388:	e1 f7       	brne	.-8      	; 0x1382 <EEPROM_ReadEnv+0x42>
		return 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <EEPROM_ReadEnv+0x50>
	}
	
	return 0;
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	c5 55       	subi	r28, 0x55	; 85
    1392:	df 4f       	sbci	r29, 0xFF	; 255
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	de bf       	out	0x3e, r29	; 62
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <esp8266_send_cmd>:
	esp8266_send_cmd("AT+CWLAP",4000);
}

void esp8266_update(void) 
{
	esp8266_send_cmd("AT+CIPUPDATE",10000);
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	eb 01       	movw	r28, r22
    13a8:	29 e0       	ldi	r18, 0x09	; 9
    13aa:	20 93 cd 2c 	sts	0x2CCD, r18
    13ae:	0e 94 bc 1f 	call	0x3f78	; 0x3f78 <uart_write_str>
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	8c 17       	cp	r24, r28
    13b8:	9d 07       	cpc	r25, r29
    13ba:	44 f4       	brge	.+16     	; 0x13cc <esp8266_send_cmd+0x2a>
    13bc:	ef e3       	ldi	r30, 0x3F	; 63
    13be:	ff e1       	ldi	r31, 0x1F	; 31
    13c0:	31 97       	sbiw	r30, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <esp8266_send_cmd+0x1e>
    13c4:	00 c0       	rjmp	.+0      	; 0x13c6 <esp8266_send_cmd+0x24>
    13c6:	00 00       	nop
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	f5 cf       	rjmp	.-22     	; 0x13b6 <esp8266_send_cmd+0x14>
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	08 95       	ret

000013d2 <esp8266_on>:
    13d2:	e0 e6       	ldi	r30, 0x60	; 96
    13d4:	f6 e0       	ldi	r31, 0x06	; 6
    13d6:	80 e3       	ldi	r24, 0x30	; 48
    13d8:	81 83       	std	Z+1, r24	; 0x01
    13da:	85 83       	std	Z+5, r24	; 0x05
    13dc:	2f ef       	ldi	r18, 0xFF	; 255
    13de:	83 ec       	ldi	r24, 0xC3	; 195
    13e0:	99 e0       	ldi	r25, 0x09	; 9
    13e2:	21 50       	subi	r18, 0x01	; 1
    13e4:	80 40       	sbci	r24, 0x00	; 0
    13e6:	90 40       	sbci	r25, 0x00	; 0
    13e8:	e1 f7       	brne	.-8      	; 0x13e2 <esp8266_on+0x10>
    13ea:	00 c0       	rjmp	.+0      	; 0x13ec <esp8266_on+0x1a>
    13ec:	00 00       	nop
    13ee:	08 95       	ret

000013f0 <esp8266_off>:
    13f0:	e0 e6       	ldi	r30, 0x60	; 96
    13f2:	f6 e0       	ldi	r31, 0x06	; 6
    13f4:	80 e2       	ldi	r24, 0x20	; 32
    13f6:	81 83       	std	Z+1, r24	; 0x01
    13f8:	86 83       	std	Z+6, r24	; 0x06
    13fa:	08 95       	ret

000013fc <esp8266_setup>:
    13fc:	60 ed       	ldi	r22, 0xD0	; 208
    13fe:	77 e0       	ldi	r23, 0x07	; 7
    1400:	82 ee       	ldi	r24, 0xE2	; 226
    1402:	90 e2       	ldi	r25, 0x20	; 32
    1404:	ce df       	rcall	.-100    	; 0x13a2 <esp8266_send_cmd>
    1406:	80 91 cd 2c 	lds	r24, 0x2CCD
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	d9 f4       	brne	.+54     	; 0x1444 <esp8266_setup+0x48>
    140e:	10 92 d7 2a 	sts	0x2AD7, r1
    1412:	64 e6       	ldi	r22, 0x64	; 100
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	89 ee       	ldi	r24, 0xE9	; 233
    1418:	90 e2       	ldi	r25, 0x20	; 32
    141a:	c3 df       	rcall	.-122    	; 0x13a2 <esp8266_send_cmd>
    141c:	80 91 cd 2c 	lds	r24, 0x2CCD
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	81 f4       	brne	.+32     	; 0x1444 <esp8266_setup+0x48>
    1424:	64 e6       	ldi	r22, 0x64	; 100
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	86 ef       	ldi	r24, 0xF6	; 246
    142a:	90 e2       	ldi	r25, 0x20	; 32
    142c:	ba df       	rcall	.-140    	; 0x13a2 <esp8266_send_cmd>
    142e:	80 91 cd 2c 	lds	r24, 0x2CCD
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	39 f4       	brne	.+14     	; 0x1444 <esp8266_setup+0x48>
    1436:	64 e6       	ldi	r22, 0x64	; 100
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	82 e0       	ldi	r24, 0x02	; 2
    143c:	91 e2       	ldi	r25, 0x21	; 33
    143e:	b1 df       	rcall	.-158    	; 0x13a2 <esp8266_send_cmd>
    1440:	80 91 cd 2c 	lds	r24, 0x2CCD
    1444:	08 95       	ret

00001446 <esp8266_join_ap>:
}

esp8266_status_t esp8266_join_ap(char *ssid, char *pass) 
{	
    1446:	cf 92       	push	r12
    1448:	df 92       	push	r13
    144a:	ef 92       	push	r14
    144c:	ff 92       	push	r15
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	c4 56       	subi	r28, 0x64	; 100
    145c:	d1 09       	sbc	r29, r1
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	6c 01       	movw	r12, r24
    1464:	7b 01       	movw	r14, r22
	uint16_t cnt = 0;
	char cmd[100];
	
	memset(cmd,0,sizeof(cmd));
    1466:	8e 01       	movw	r16, r28
    1468:	0f 5f       	subi	r16, 0xFF	; 255
    146a:	1f 4f       	sbci	r17, 0xFF	; 255
    146c:	84 e6       	ldi	r24, 0x64	; 100
    146e:	f8 01       	movw	r30, r16
    1470:	11 92       	st	Z+, r1
    1472:	8a 95       	dec	r24
    1474:	e9 f7       	brne	.-6      	; 0x1470 <esp8266_join_ap+0x2a>
	
	strcpy(cmd,"AT+CWJAP=\"");
    1476:	64 e2       	ldi	r22, 0x24	; 36
    1478:	71 e2       	ldi	r23, 0x21	; 33
    147a:	c8 01       	movw	r24, r16
    147c:	0e 94 78 55 	call	0xaaf0	; 0xaaf0 <strcpy>
	strcat(cmd,ssid);
    1480:	b6 01       	movw	r22, r12
    1482:	c8 01       	movw	r24, r16
    1484:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
	strcat(cmd,"\",\"");
    1488:	6f e3       	ldi	r22, 0x3F	; 63
    148a:	71 e2       	ldi	r23, 0x21	; 33
    148c:	c8 01       	movw	r24, r16
    148e:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
	strcat(cmd,pass);
    1492:	b7 01       	movw	r22, r14
    1494:	c8 01       	movw	r24, r16
    1496:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
	strcat(cmd,"\"");
    149a:	61 e4       	ldi	r22, 0x41	; 65
    149c:	71 e2       	ldi	r23, 0x21	; 33
    149e:	c8 01       	movw	r24, r16
    14a0:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
	esp8266_send_cmd(cmd,100);
    14a4:	64 e6       	ldi	r22, 0x64	; 100
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	c8 01       	movw	r24, r16
    14aa:	7b df       	rcall	.-266    	; 0x13a2 <esp8266_send_cmd>
	
	while (status != ESP8266_SUCCESS) {
    14ac:	8e e2       	ldi	r24, 0x2E	; 46
    14ae:	91 e0       	ldi	r25, 0x01	; 1
    14b0:	20 91 cd 2c 	lds	r18, 0x2CCD
    14b4:	21 30       	cpi	r18, 0x01	; 1
    14b6:	91 f0       	breq	.+36     	; 0x14dc <esp8266_join_ap+0x96>
    14b8:	ff ef       	ldi	r31, 0xFF	; 255
    14ba:	23 ec       	ldi	r18, 0xC3	; 195
    14bc:	39 e0       	ldi	r19, 0x09	; 9
    14be:	f1 50       	subi	r31, 0x01	; 1
    14c0:	20 40       	sbci	r18, 0x00	; 0
    14c2:	30 40       	sbci	r19, 0x00	; 0
    14c4:	e1 f7       	brne	.-8      	; 0x14be <esp8266_join_ap+0x78>
    14c6:	00 c0       	rjmp	.+0      	; 0x14c8 <esp8266_join_ap+0x82>
    14c8:	00 00       	nop
    14ca:	01 97       	sbiw	r24, 0x01	; 1
		_delay_ms(100);
		
		if (cnt++ > 300) {
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	41 f0       	breq	.+16     	; 0x14e0 <esp8266_join_ap+0x9a>
			return ESP8266_TIMEOUT;
		} else if (status == ESP8266_ERROR) {
    14d0:	20 91 cd 2c 	lds	r18, 0x2CCD
    14d4:	21 11       	cpse	r18, r1
    14d6:	ec cf       	rjmp	.-40     	; 0x14b0 <esp8266_join_ap+0x6a>
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	03 c0       	rjmp	.+6      	; 0x14e2 <esp8266_join_ap+0x9c>
			return status;
		}
	}

	return ESP8266_SUCCESS;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <esp8266_join_ap+0x9c>
	
	while (status != ESP8266_SUCCESS) {
		_delay_ms(100);
		
		if (cnt++ > 300) {
			return ESP8266_TIMEOUT;
    14e0:	83 e0       	ldi	r24, 0x03	; 3
			return status;
		}
	}

	return ESP8266_SUCCESS;
}
    14e2:	cc 59       	subi	r28, 0x9C	; 156
    14e4:	df 4f       	sbci	r29, 0xFF	; 255
    14e6:	cd bf       	out	0x3d, r28	; 61
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	ff 90       	pop	r15
    14f4:	ef 90       	pop	r14
    14f6:	df 90       	pop	r13
    14f8:	cf 90       	pop	r12
    14fa:	08 95       	ret

000014fc <esp8266_get_json>:

esp8266_status_t esp8266_get_json(char *host, char *addr, char *buffer, uint8_t buffer_length) 
{	
    14fc:	8f 92       	push	r8
    14fe:	9f 92       	push	r9
    1500:	bf 92       	push	r11
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	c6 59       	subi	r28, 0x96	; 150
    1518:	d1 09       	sbc	r29, r1
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	4c 01       	movw	r8, r24
    1520:	7b 01       	movw	r14, r22
    1522:	6a 01       	movw	r12, r20
    1524:	b2 2e       	mov	r11, r18
	uint16_t cnt = 0;
	char *number_of_bytes;
	char cmd[150];
	
	memset(cmd,0,sizeof(cmd));
    1526:	8e 01       	movw	r16, r28
    1528:	0f 5f       	subi	r16, 0xFF	; 255
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
    152c:	86 e9       	ldi	r24, 0x96	; 150
    152e:	d8 01       	movw	r26, r16
    1530:	1d 92       	st	X+, r1
    1532:	8a 95       	dec	r24
    1534:	e9 f7       	brne	.-6      	; 0x1530 <esp8266_get_json+0x34>
	
	//Set up TCP connection to host
	strcpy(cmd,"AT+CIPSTART=\"TCP\",\"");
    1536:	6f e2       	ldi	r22, 0x2F	; 47
    1538:	71 e2       	ldi	r23, 0x21	; 33
    153a:	c8 01       	movw	r24, r16
    153c:	0e 94 78 55 	call	0xaaf0	; 0xaaf0 <strcpy>
	strcat(cmd,host);
    1540:	b4 01       	movw	r22, r8
    1542:	c8 01       	movw	r24, r16
    1544:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
	strcat(cmd,"\",80");
    1548:	63 e4       	ldi	r22, 0x43	; 67
    154a:	71 e2       	ldi	r23, 0x21	; 33
    154c:	c8 01       	movw	r24, r16
    154e:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
	esp8266_send_cmd(cmd,250);
    1552:	6a ef       	ldi	r22, 0xFA	; 250
    1554:	70 e0       	ldi	r23, 0x00	; 0
    1556:	c8 01       	movw	r24, r16
    1558:	24 df       	rcall	.-440    	; 0x13a2 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    155a:	80 91 cd 2c 	lds	r24, 0x2CCD
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	09 f0       	breq	.+2      	; 0x1564 <esp8266_get_json+0x68>
    1562:	9d c0       	rjmp	.+314    	; 0x169e <esp8266_get_json+0x1a2>
		return status;
	}
	
	//Count number of bytes to send
	//itoa_simple(number_of_bytes,strlen(addr) + 25);
	itoa(strlen(addr) + 25, number_of_bytes, 10);
    1564:	f7 01       	movw	r30, r14
    1566:	01 90       	ld	r0, Z+
    1568:	00 20       	and	r0, r0
    156a:	e9 f7       	brne	.-6      	; 0x1566 <esp8266_get_json+0x6a>
    156c:	ee 19       	sub	r30, r14
    156e:	ff 09       	sbc	r31, r15
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1570:	4a e0       	ldi	r20, 0x0A	; 10
    1572:	81 2c       	mov	r8, r1
    1574:	91 2c       	mov	r9, r1
    1576:	b4 01       	movw	r22, r8
    1578:	cf 01       	movw	r24, r30
    157a:	48 96       	adiw	r24, 0x18	; 24
    157c:	0e 94 be 55 	call	0xab7c	; 0xab7c <__itoa_ncheck>
	strcpy(cmd, "AT+CIPSEND=");
    1580:	68 e4       	ldi	r22, 0x48	; 72
    1582:	71 e2       	ldi	r23, 0x21	; 33
    1584:	c8 01       	movw	r24, r16
    1586:	0e 94 78 55 	call	0xaaf0	; 0xaaf0 <strcpy>
	strcat(cmd,number_of_bytes);
    158a:	b4 01       	movw	r22, r8
    158c:	c8 01       	movw	r24, r16
    158e:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
	strcat(cmd,"\r"); //needs to be here...
    1592:	66 ed       	ldi	r22, 0xD6	; 214
    1594:	75 e2       	ldi	r23, 0x25	; 37
    1596:	c8 01       	movw	r24, r16
    1598:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
	esp8266_send_cmd(cmd,100);
    159c:	64 e6       	ldi	r22, 0x64	; 100
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	c8 01       	movw	r24, r16
    15a2:	ff de       	rcall	.-514    	; 0x13a2 <esp8266_send_cmd>
	
	//Request data by sending a GET
	strcpy(cmd,"GET ");
    15a4:	64 e5       	ldi	r22, 0x54	; 84
    15a6:	71 e2       	ldi	r23, 0x21	; 33
    15a8:	c8 01       	movw	r24, r16
    15aa:	0e 94 78 55 	call	0xaaf0	; 0xaaf0 <strcpy>
	if (strlen(cmd) < sizeof(cmd)) {
    15ae:	f8 01       	movw	r30, r16
    15b0:	01 90       	ld	r0, Z+
    15b2:	00 20       	and	r0, r0
    15b4:	e9 f7       	brne	.-6      	; 0x15b0 <esp8266_get_json+0xb4>
    15b6:	31 97       	sbiw	r30, 0x01	; 1
    15b8:	e0 1b       	sub	r30, r16
    15ba:	f1 0b       	sbc	r31, r17
    15bc:	e6 39       	cpi	r30, 0x96	; 150
    15be:	f1 05       	cpc	r31, r1
    15c0:	10 f0       	brcs	.+4      	; 0x15c6 <esp8266_get_json+0xca>
		strcat(cmd,addr);
	} else {
		return ESP8266_ERROR;
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	6c c0       	rjmp	.+216    	; 0x169e <esp8266_get_json+0x1a2>
	esp8266_send_cmd(cmd,100);
	
	//Request data by sending a GET
	strcpy(cmd,"GET ");
	if (strlen(cmd) < sizeof(cmd)) {
		strcat(cmd,addr);
    15c6:	b7 01       	movw	r22, r14
    15c8:	c8 01       	movw	r24, r16
    15ca:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
	} else {
		return ESP8266_ERROR;
	}
	strcat(cmd," HTTP/1.0\r\n");
    15ce:	69 e5       	ldi	r22, 0x59	; 89
    15d0:	71 e2       	ldi	r23, 0x21	; 33
    15d2:	c8 01       	movw	r24, r16
    15d4:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
	esp8266_send_cmd(cmd,100);
    15d8:	64 e6       	ldi	r22, 0x64	; 100
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	c8 01       	movw	r24, r16
    15de:	e1 de       	rcall	.-574    	; 0x13a2 <esp8266_send_cmd>
	return ESP8266_SUCCESS;
}

esp8266_status_t esp8266_get_json(char *host, char *addr, char *buffer, uint8_t buffer_length) 
{	
	uint16_t cnt = 0;
    15e0:	00 e0       	ldi	r16, 0x00	; 0
    15e2:	10 e0       	ldi	r17, 0x00	; 0
		return ESP8266_ERROR;
	}
	strcat(cmd," HTTP/1.0\r\n");
	esp8266_send_cmd(cmd,100);
	
	while (status != ESP8266_SUCCESS) {
    15e4:	80 91 cd 2c 	lds	r24, 0x2CCD
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	19 f1       	breq	.+70     	; 0x1632 <esp8266_get_json+0x136>
		esp8266_send_cmd("",100);
    15ec:	64 e6       	ldi	r22, 0x64	; 100
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	81 ef       	ldi	r24, 0xF1	; 241
    15f2:	93 e2       	ldi	r25, 0x23	; 35
    15f4:	d6 de       	rcall	.-596    	; 0x13a2 <esp8266_send_cmd>
		
		if (cnt++ > 30) {
    15f6:	0f 5f       	subi	r16, 0xFF	; 255
    15f8:	1f 4f       	sbci	r17, 0xFF	; 255
    15fa:	00 32       	cpi	r16, 0x20	; 32
    15fc:	11 05       	cpc	r17, r1
    15fe:	11 f4       	brne	.+4      	; 0x1604 <esp8266_get_json+0x108>
			return ESP8266_TIMEOUT;
    1600:	83 e0       	ldi	r24, 0x03	; 3
    1602:	4d c0       	rjmp	.+154    	; 0x169e <esp8266_get_json+0x1a2>
		} else if (status == ESP8266_ERROR) {
    1604:	80 91 cd 2c 	lds	r24, 0x2CCD
    1608:	81 11       	cpse	r24, r1
    160a:	ec cf       	rjmp	.-40     	; 0x15e4 <esp8266_get_json+0xe8>
    160c:	12 c0       	rjmp	.+36     	; 0x1632 <esp8266_get_json+0x136>
    160e:	bf ef       	ldi	r27, 0xFF	; 255
    1610:	e3 ec       	ldi	r30, 0xC3	; 195
    1612:	f9 e0       	ldi	r31, 0x09	; 9
    1614:	b1 50       	subi	r27, 0x01	; 1
    1616:	e0 40       	sbci	r30, 0x00	; 0
    1618:	f0 40       	sbci	r31, 0x00	; 0
    161a:	e1 f7       	brne	.-8      	; 0x1614 <esp8266_get_json+0x118>
    161c:	00 c0       	rjmp	.+0      	; 0x161e <esp8266_get_json+0x122>
    161e:	00 00       	nop
	
	//Waiting for all the data
	while (status != ESP8266_CLOSED) {
		_delay_ms(100);
		
		if (cnt++ > 30) {
    1620:	0f 31       	cpi	r16, 0x1F	; 31
    1622:	11 05       	cpc	r17, r1
    1624:	68 f7       	brcc	.-38     	; 0x1600 <esp8266_get_json+0x104>
    1626:	0f 5f       	subi	r16, 0xFF	; 255
    1628:	1f 4f       	sbci	r17, 0xFF	; 255
			return ESP8266_TIMEOUT;
		} else if (status == ESP8266_ERROR) {
    162a:	80 91 cd 2c 	lds	r24, 0x2CCD
    162e:	88 23       	and	r24, r24
    1630:	21 f0       	breq	.+8      	; 0x163a <esp8266_get_json+0x13e>
			break;
		}
	}
	
	//Waiting for all the data
	while (status != ESP8266_CLOSED) {
    1632:	80 91 cd 2c 	lds	r24, 0x2CCD
    1636:	86 30       	cpi	r24, 0x06	; 6
    1638:	51 f7       	brne	.-44     	; 0x160e <esp8266_get_json+0x112>
		} else if (status == ESP8266_ERROR) {
			break;
		}
	}
	
	if (json_found) {
    163a:	80 91 d6 2a 	lds	r24, 0x2AD6
    163e:	88 23       	and	r24, r24
    1640:	09 f4       	brne	.+2      	; 0x1644 <esp8266_get_json+0x148>
    1642:	bf cf       	rjmp	.-130    	; 0x15c2 <esp8266_get_json+0xc6>
		uint16_t json_start_addr = (uint16_t)rx_buffer;
		uint16_t json_end_addr = (uint16_t)strrchr(rx_buffer,'}');
    1644:	6d e7       	ldi	r22, 0x7D	; 125
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	8c e0       	ldi	r24, 0x0C	; 12
    164a:	9a e2       	ldi	r25, 0x2A	; 42
    164c:	0e 94 99 55 	call	0xab32	; 0xab32 <strrchr>
		uint16_t json_length = (json_end_addr-json_start_addr)+1;
    1650:	8c 01       	movw	r16, r24
    1652:	0b 50       	subi	r16, 0x0B	; 11
    1654:	1a 42       	sbci	r17, 0x2A	; 42
		if (json_length > buffer_length) {
    1656:	4b 2d       	mov	r20, r11
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	40 17       	cp	r20, r16
    165c:	51 07       	cpc	r21, r17
    165e:	08 f4       	brcc	.+2      	; 0x1662 <esp8266_get_json+0x166>
    1660:	b0 cf       	rjmp	.-160    	; 0x15c2 <esp8266_get_json+0xc6>
			return ESP8266_ERROR;
		}
		memset(buffer,0,buffer_length);
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	c6 01       	movw	r24, r12
    1668:	0e 94 5b 55 	call	0xaab6	; 0xaab6 <memset>
		strncpy(buffer,rx_buffer,json_length);
    166c:	a8 01       	movw	r20, r16
    166e:	6c e0       	ldi	r22, 0x0C	; 12
    1670:	7a e2       	ldi	r23, 0x2A	; 42
    1672:	c6 01       	movw	r24, r12
    1674:	0e 94 7f 55 	call	0xaafe	; 0xaafe <strncpy>
		memset(rx_buffer,0,RX_BUFFER);
    1678:	88 ec       	ldi	r24, 0xC8	; 200
    167a:	ec e0       	ldi	r30, 0x0C	; 12
    167c:	fa e2       	ldi	r31, 0x2A	; 42
    167e:	df 01       	movw	r26, r30
    1680:	1d 92       	st	X+, r1
    1682:	8a 95       	dec	r24
    1684:	e9 f7       	brne	.-6      	; 0x1680 <esp8266_get_json+0x184>
		json_found = false;
    1686:	10 92 d6 2a 	sts	0x2AD6, r1
		rx_ptr = 0;	
    168a:	10 92 d4 2a 	sts	0x2AD4, r1
    168e:	10 92 d5 2a 	sts	0x2AD5, r1
	} else {
		return ESP8266_ERROR;
	}
	
	esp8266_send_cmd("AT+CIPCLOSE",50);
    1692:	62 e3       	ldi	r22, 0x32	; 50
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	85 e6       	ldi	r24, 0x65	; 101
    1698:	91 e2       	ldi	r25, 0x21	; 33
    169a:	83 de       	rcall	.-762    	; 0x13a2 <esp8266_send_cmd>
	
	return ESP8266_SUCCESS;
    169c:	81 e0       	ldi	r24, 0x01	; 1
}
    169e:	ca 56       	subi	r28, 0x6A	; 106
    16a0:	df 4f       	sbci	r29, 0xFF	; 255
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	df 90       	pop	r13
    16b4:	cf 90       	pop	r12
    16b6:	bf 90       	pop	r11
    16b8:	9f 90       	pop	r9
    16ba:	8f 90       	pop	r8
    16bc:	08 95       	ret

000016be <esp8266_setup_webserver>:

esp8266_status_t esp8266_setup_webserver(bool sta, bool ap) 
{	
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	c8 2f       	mov	r28, r24
    16c4:	d6 2f       	mov	r29, r22
	//Reset module
	esp8266_send_cmd("AT+RST",2000);
    16c6:	60 ed       	ldi	r22, 0xD0	; 208
    16c8:	77 e0       	ldi	r23, 0x07	; 7
    16ca:	82 ee       	ldi	r24, 0xE2	; 226
    16cc:	90 e2       	ldi	r25, 0x20	; 32
    16ce:	69 de       	rcall	.-814    	; 0x13a2 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    16d0:	80 91 cd 2c 	lds	r24, 0x2CCD
    16d4:	81 30       	cpi	r24, 0x01	; 1
    16d6:	09 f0       	breq	.+2      	; 0x16da <esp8266_setup_webserver+0x1c>
    16d8:	5e c0       	rjmp	.+188    	; 0x1796 <esp8266_setup_webserver+0xd8>
		return status;
	}
	
	wdt_triggered = false;
    16da:	10 92 d7 2a 	sts	0x2AD7, r1
	
	//Set Data Mode
	esp8266_send_cmd("AT+CIPMODE=0",100);
    16de:	64 e6       	ldi	r22, 0x64	; 100
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	89 ee       	ldi	r24, 0xE9	; 233
    16e4:	90 e2       	ldi	r25, 0x20	; 32
    16e6:	5d de       	rcall	.-838    	; 0x13a2 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    16e8:	80 91 cd 2c 	lds	r24, 0x2CCD
    16ec:	81 30       	cpi	r24, 0x01	; 1
    16ee:	09 f0       	breq	.+2      	; 0x16f2 <esp8266_setup_webserver+0x34>
    16f0:	52 c0       	rjmp	.+164    	; 0x1796 <esp8266_setup_webserver+0xd8>
		return status;
	}
	
	if (sta && !ap) {
    16f2:	cc 23       	and	r28, r28
    16f4:	41 f0       	breq	.+16     	; 0x1706 <esp8266_setup_webserver+0x48>
		esp8266_send_cmd("AT+CWMODE=1",100);
    16f6:	64 e6       	ldi	r22, 0x64	; 100
    16f8:	70 e0       	ldi	r23, 0x00	; 0
	esp8266_send_cmd("AT+CIPMODE=0",100);
	if (status != ESP8266_SUCCESS) {
		return status;
	}
	
	if (sta && !ap) {
    16fa:	d1 11       	cpse	r29, r1
    16fc:	0c c0       	rjmp	.+24     	; 0x1716 <esp8266_setup_webserver+0x58>
		esp8266_send_cmd("AT+CWMODE=1",100);
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	91 e2       	ldi	r25, 0x21	; 33
    1702:	4f de       	rcall	.-866    	; 0x13a2 <esp8266_send_cmd>
    1704:	1d c0       	rjmp	.+58     	; 0x1740 <esp8266_setup_webserver+0x82>
	} else if (ap && !sta) {
    1706:	dd 23       	and	r29, r29
    1708:	09 f4       	brne	.+2      	; 0x170c <esp8266_setup_webserver+0x4e>
    170a:	44 c0       	rjmp	.+136    	; 0x1794 <esp8266_setup_webserver+0xd6>
		esp8266_send_cmd("AT+CWMODE=2",100);
    170c:	64 e6       	ldi	r22, 0x64	; 100
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	81 e7       	ldi	r24, 0x71	; 113
    1712:	91 e2       	ldi	r25, 0x21	; 33
    1714:	02 c0       	rjmp	.+4      	; 0x171a <esp8266_setup_webserver+0x5c>
	} else if (ap && sta) {
		esp8266_send_cmd("AT+CWMODE=3",100);
    1716:	8d e7       	ldi	r24, 0x7D	; 125
    1718:	91 e2       	ldi	r25, 0x21	; 33
    171a:	43 de       	rcall	.-890    	; 0x13a2 <esp8266_send_cmd>
	} else {
		return ESP8266_ERROR;
	}
	
	if (ap) {
		esp8266_send_cmd("AT+CWSAP=\"SMART_CLOCK\",\"123\",5,0",100);
    171c:	64 e6       	ldi	r22, 0x64	; 100
    171e:	70 e0       	ldi	r23, 0x00	; 0
    1720:	87 ec       	ldi	r24, 0xC7	; 199
    1722:	91 e2       	ldi	r25, 0x21	; 33
    1724:	3e de       	rcall	.-900    	; 0x13a2 <esp8266_send_cmd>
		if (status != ESP8266_SUCCESS) {
    1726:	80 91 cd 2c 	lds	r24, 0x2CCD
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	a1 f5       	brne	.+104    	; 0x1796 <esp8266_setup_webserver+0xd8>
			return status;
		}
			
		esp8266_send_cmd("AT+CIPAP=\"192.168.0.1\"",100);
    172e:	64 e6       	ldi	r22, 0x64	; 100
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	89 e8       	ldi	r24, 0x89	; 137
    1734:	91 e2       	ldi	r25, 0x21	; 33
    1736:	35 de       	rcall	.-918    	; 0x13a2 <esp8266_send_cmd>
		if (status != ESP8266_SUCCESS) {
    1738:	80 91 cd 2c 	lds	r24, 0x2CCD
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	59 f5       	brne	.+86     	; 0x1796 <esp8266_setup_webserver+0xd8>
			return status;
		}
	}
	
	if (status != ESP8266_SUCCESS) {
    1740:	80 91 cd 2c 	lds	r24, 0x2CCD
    1744:	81 30       	cpi	r24, 0x01	; 1
    1746:	39 f5       	brne	.+78     	; 0x1796 <esp8266_setup_webserver+0xd8>
		return status;
	}
	
	if (sta || (sta && ap)) {
    1748:	cc 23       	and	r28, r28
    174a:	29 f0       	breq	.+10     	; 0x1756 <esp8266_setup_webserver+0x98>
		esp8266_join_ap(env.wifi_ssid,env.wifi_pswd);
    174c:	6f e8       	ldi	r22, 0x8F	; 143
    174e:	7b e2       	ldi	r23, 0x2B	; 43
    1750:	88 ea       	ldi	r24, 0xA8	; 168
    1752:	9b e2       	ldi	r25, 0x2B	; 43
    1754:	78 de       	rcall	.-784    	; 0x1446 <esp8266_join_ap>
	}
	
	//List IP addresses
	esp8266_send_cmd("AT+CIFSR", 100);
    1756:	64 e6       	ldi	r22, 0x64	; 100
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	80 ea       	ldi	r24, 0xA0	; 160
    175c:	91 e2       	ldi	r25, 0x21	; 33
    175e:	21 de       	rcall	.-958    	; 0x13a2 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    1760:	80 91 cd 2c 	lds	r24, 0x2CCD
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	b9 f4       	brne	.+46     	; 0x1796 <esp8266_setup_webserver+0xd8>
		return status;
	}
	
	//Show IP address to user
#ifdef SHOW_MANUAL
	display_print_scrolling_text(ip_address,false);
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	87 e9       	ldi	r24, 0x97	; 151
    176c:	9c e2       	ldi	r25, 0x2C	; 44
    176e:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
#endif

	//Configure multiple connections
	esp8266_send_cmd("AT+CIPMUX=1",100);
    1772:	64 e6       	ldi	r22, 0x64	; 100
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	89 ea       	ldi	r24, 0xA9	; 169
    1778:	91 e2       	ldi	r25, 0x21	; 33
    177a:	13 de       	rcall	.-986    	; 0x13a2 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    177c:	80 91 cd 2c 	lds	r24, 0x2CCD
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	49 f4       	brne	.+18     	; 0x1796 <esp8266_setup_webserver+0xd8>
		return status;
	}
	
	//Start server
	esp8266_send_cmd("AT+CIPSERVER=1,80",100);	
    1784:	64 e6       	ldi	r22, 0x64	; 100
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	85 eb       	ldi	r24, 0xB5	; 181
    178a:	91 e2       	ldi	r25, 0x21	; 33
    178c:	0a de       	rcall	.-1004   	; 0x13a2 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    178e:	80 91 cd 2c 	lds	r24, 0x2CCD
    1792:	01 c0       	rjmp	.+2      	; 0x1796 <esp8266_setup_webserver+0xd8>
	} else if (ap && !sta) {
		esp8266_send_cmd("AT+CWMODE=2",100);
	} else if (ap && sta) {
		esp8266_send_cmd("AT+CWMODE=3",100);
	} else {
		return ESP8266_ERROR;
    1794:	80 e0       	ldi	r24, 0x00	; 0
	if (status != ESP8266_SUCCESS) {
		return status;
	}
	
	return ESP8266_SUCCESS;
}
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	08 95       	ret

0000179c <esp8266_configure_ssid_and_password>:
	
	esp8266_send_cmd("AT+CIPSTO=5",100);
}

esp8266_status_t esp8266_configure_ssid_and_password(void) 
{
    179c:	af 92       	push	r10
    179e:	bf 92       	push	r11
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	6e 97       	sbiw	r28, 0x1e	; 30
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	de bf       	out	0x3e, r29	; 62
	if (status == ESP8266_GET_REQ) {
    17ba:	80 91 cd 2c 	lds	r24, 0x2CCD
    17be:	87 30       	cpi	r24, 0x07	; 7
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <esp8266_configure_ssid_and_password+0x28>
    17c2:	5b c0       	rjmp	.+182    	; 0x187a <esp8266_configure_ssid_and_password+0xde>
		at_cipsend(link_channel,"<!DOCTYPE html>\
    17c4:	10 91 06 20 	lds	r17, 0x2006
    17c8:	4a e0       	ldi	r20, 0x0A	; 10
    17ca:	be 01       	movw	r22, r28
    17cc:	66 5e       	subi	r22, 0xE6	; 230
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	8b e8       	ldi	r24, 0x8B	; 139
    17d2:	91 e0       	ldi	r25, 0x01	; 1
    17d4:	0e 94 be 55 	call	0xab7c	; 0xab7c <__itoa_ncheck>
	char number_of_bytes[5];
	char cmd[25];
	
	//itoa_simple(number_of_bytes,strlen(str));
	itoa(strlen(str),number_of_bytes,10);
	if (channel == '1') {
    17d8:	11 33       	cpi	r17, 0x31	; 49
    17da:	19 f4       	brne	.+6      	; 0x17e2 <esp8266_configure_ssid_and_password+0x46>
		strcpy(cmd, "AT+CIPSEND=1,");
    17dc:	68 ee       	ldi	r22, 0xE8	; 232
    17de:	71 e2       	ldi	r23, 0x21	; 33
    17e0:	0c c0       	rjmp	.+24     	; 0x17fa <esp8266_configure_ssid_and_password+0x5e>
	} else if (channel == '2') {
    17e2:	12 33       	cpi	r17, 0x32	; 50
    17e4:	19 f4       	brne	.+6      	; 0x17ec <esp8266_configure_ssid_and_password+0x50>
		strcpy(cmd, "AT+CIPSEND=2,");
    17e6:	66 ef       	ldi	r22, 0xF6	; 246
    17e8:	71 e2       	ldi	r23, 0x21	; 33
    17ea:	07 c0       	rjmp	.+14     	; 0x17fa <esp8266_configure_ssid_and_password+0x5e>
	} else if (channel == '3') {
    17ec:	13 33       	cpi	r17, 0x33	; 51
    17ee:	19 f4       	brne	.+6      	; 0x17f6 <esp8266_configure_ssid_and_password+0x5a>
		strcpy(cmd, "AT+CIPSEND=3,");
    17f0:	64 e0       	ldi	r22, 0x04	; 4
    17f2:	72 e2       	ldi	r23, 0x22	; 34
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <esp8266_configure_ssid_and_password+0x5e>
	} else {
		strcpy(cmd, "AT+CIPSEND=0,");
    17f6:	62 e1       	ldi	r22, 0x12	; 18
    17f8:	72 e2       	ldi	r23, 0x22	; 34
    17fa:	ce 01       	movw	r24, r28
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	0e 94 78 55 	call	0xaaf0	; 0xaaf0 <strcpy>
	}
	strcat(cmd,number_of_bytes);
    1802:	be 01       	movw	r22, r28
    1804:	66 5e       	subi	r22, 0xE6	; 230
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	ce 01       	movw	r24, r28
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>

	esp8266_send_cmd(cmd,100);
    1810:	64 e6       	ldi	r22, 0x64	; 100
    1812:	70 e0       	ldi	r23, 0x00	; 0
    1814:	ce 01       	movw	r24, r28
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	c4 dd       	rcall	.-1144   	; 0x13a2 <esp8266_send_cmd>
    181a:	83 e3       	ldi	r24, 0x33	; 51
    181c:	90 e0       	ldi	r25, 0x00	; 0
	while((rx_buffer[0] != '>') && (cnt++ < 50)) {
    181e:	20 91 0c 2a 	lds	r18, 0x2A0C
    1822:	2e 33       	cpi	r18, 0x3E	; 62
    1824:	69 f0       	breq	.+26     	; 0x1840 <esp8266_configure_ssid_and_password+0xa4>
    1826:	01 97       	sbiw	r24, 0x01	; 1
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	51 f0       	breq	.+20     	; 0x1840 <esp8266_configure_ssid_and_password+0xa4>
    182c:	2f ef       	ldi	r18, 0xFF	; 255
    182e:	33 ec       	ldi	r19, 0xC3	; 195
    1830:	49 e0       	ldi	r20, 0x09	; 9
    1832:	21 50       	subi	r18, 0x01	; 1
    1834:	30 40       	sbci	r19, 0x00	; 0
    1836:	40 40       	sbci	r20, 0x00	; 0
    1838:	e1 f7       	brne	.-8      	; 0x1832 <esp8266_configure_ssid_and_password+0x96>
    183a:	00 c0       	rjmp	.+0      	; 0x183c <esp8266_configure_ssid_and_password+0xa0>
    183c:	00 00       	nop
    183e:	ef cf       	rjmp	.-34     	; 0x181e <esp8266_configure_ssid_and_password+0x82>
		_delay_ms(100);
	}
	
	printf("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nConnection: close\r\n\r\n%s\r\n\r\n",str);
    1840:	80 e2       	ldi	r24, 0x20	; 32
    1842:	92 e2       	ldi	r25, 0x22	; 34
    1844:	9f 93       	push	r25
    1846:	8f 93       	push	r24
    1848:	8c ea       	ldi	r24, 0xAC	; 172
    184a:	93 e2       	ldi	r25, 0x23	; 35
    184c:	9f 93       	push	r25
    184e:	8f 93       	push	r24
    1850:	0e 94 13 56 	call	0xac26	; 0xac26 <printf>
    1854:	8f ef       	ldi	r24, 0xFF	; 255
    1856:	93 ec       	ldi	r25, 0xC3	; 195
    1858:	a9 e0       	ldi	r26, 0x09	; 9
    185a:	81 50       	subi	r24, 0x01	; 1
    185c:	90 40       	sbci	r25, 0x00	; 0
    185e:	a0 40       	sbci	r26, 0x00	; 0
    1860:	e1 f7       	brne	.-8      	; 0x185a <esp8266_configure_ssid_and_password+0xbe>
    1862:	00 c0       	rjmp	.+0      	; 0x1864 <esp8266_configure_ssid_and_password+0xc8>
    1864:	00 00       	nop
	esp8266_send_cmd("Connection: close",0);
	esp8266_send_cmd(str,0);
	*/
	_delay_ms(100);
	
	esp8266_send_cmd("AT+CIPSTO=5",100);
    1866:	64 e6       	ldi	r22, 0x64	; 100
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	82 ef       	ldi	r24, 0xF2	; 242
    186c:	93 e2       	ldi	r25, 0x23	; 35
    186e:	99 dd       	rcall	.-1230   	; 0x13a2 <esp8266_send_cmd>
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	02 c0       	rjmp	.+4      	; 0x187e <esp8266_configure_ssid_and_password+0xe2>
		</form>\
		<p>Input network name (SSID) and password</p>\
		<p>for your router. Then click submit.</p>\
		</body>\
		</html>");
	} else if(status == ESP8266_POST_REQ) {
    187a:	88 30       	cpi	r24, 0x08	; 8
    187c:	11 f0       	breq	.+4      	; 0x1882 <esp8266_configure_ssid_and_password+0xe6>
#endif
				return ESP8266_TIMEOUT;
			}	
		}
	}
	return ESP8266_SUCCESS;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	a4 c0       	rjmp	.+328    	; 0x19ca <esp8266_configure_ssid_and_password+0x22e>
		</form>\
		<p>Input network name (SSID) and password</p>\
		<p>for your router. Then click submit.</p>\
		</body>\
		</html>");
	} else if(status == ESP8266_POST_REQ) {
    1882:	0f e1       	ldi	r16, 0x1F	; 31
    1884:	10 e0       	ldi	r17, 0x00	; 0
    1886:	01 50       	subi	r16, 0x01	; 1
    1888:	11 09       	sbc	r17, r1
		uint16_t cnt = 0;	
		while(cnt++ < 30) {
    188a:	01 15       	cp	r16, r1
    188c:	11 05       	cpc	r17, r1
    188e:	b9 f3       	breq	.-18     	; 0x187e <esp8266_configure_ssid_and_password+0xe2>
    1890:	bf ef       	ldi	r27, 0xFF	; 255
    1892:	e3 ec       	ldi	r30, 0xC3	; 195
    1894:	f9 e0       	ldi	r31, 0x09	; 9
    1896:	b1 50       	subi	r27, 0x01	; 1
    1898:	e0 40       	sbci	r30, 0x00	; 0
    189a:	f0 40       	sbci	r31, 0x00	; 0
    189c:	e1 f7       	brne	.-8      	; 0x1896 <esp8266_configure_ssid_and_password+0xfa>
    189e:	00 c0       	rjmp	.+0      	; 0x18a0 <esp8266_configure_ssid_and_password+0x104>
    18a0:	00 00       	nop
			_delay_ms(100);
			if (strstr(rx_buffer,"my_password") != NULL) {
    18a2:	6e ef       	ldi	r22, 0xFE	; 254
    18a4:	73 e2       	ldi	r23, 0x23	; 35
    18a6:	8c e0       	ldi	r24, 0x0C	; 12
    18a8:	9a e2       	ldi	r25, 0x2A	; 42
    18aa:	0e 94 a4 55 	call	0xab48	; 0xab48 <strstr>
    18ae:	89 2b       	or	r24, r25
    18b0:	51 f3       	breq	.-44     	; 0x1886 <esp8266_configure_ssid_and_password+0xea>
				
				uint8_t ssid_len = sizeof(env.wifi_ssid);
				uint8_t pass_len = sizeof(env.wifi_pswd);
				
				memset(env.wifi_ssid,0,ssid_len);
    18b2:	89 e1       	ldi	r24, 0x19	; 25
    18b4:	e8 ea       	ldi	r30, 0xA8	; 168
    18b6:	fb e2       	ldi	r31, 0x2B	; 43
    18b8:	df 01       	movw	r26, r30
    18ba:	28 2f       	mov	r18, r24
    18bc:	1d 92       	st	X+, r1
    18be:	2a 95       	dec	r18
    18c0:	e9 f7       	brne	.-6      	; 0x18bc <esp8266_configure_ssid_and_password+0x120>
				memset(env.wifi_pswd,0,pass_len);
    18c2:	ef e8       	ldi	r30, 0x8F	; 143
    18c4:	fb e2       	ldi	r31, 0x2B	; 43
    18c6:	df 01       	movw	r26, r30
    18c8:	1d 92       	st	X+, r1
    18ca:	8a 95       	dec	r24
    18cc:	e9 f7       	brne	.-6      	; 0x18c8 <esp8266_configure_ssid_and_password+0x12c>
				
				uint16_t len = strlen(rx_buffer);
    18ce:	ec e0       	ldi	r30, 0x0C	; 12
    18d0:	fa e2       	ldi	r31, 0x2A	; 42
    18d2:	df 01       	movw	r26, r30
    18d4:	0d 90       	ld	r0, X+
    18d6:	00 20       	and	r0, r0
    18d8:	e9 f7       	brne	.-6      	; 0x18d4 <esp8266_configure_ssid_and_password+0x138>
    18da:	fd 01       	movw	r30, r26
    18dc:	31 97       	sbiw	r30, 0x01	; 1
    18de:	9f 01       	movw	r18, r30
    18e0:	2c 50       	subi	r18, 0x0C	; 12
    18e2:	3a 42       	sbci	r19, 0x2A	; 42
    18e4:	69 01       	movw	r12, r18
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
    18e6:	00 e0       	ldi	r16, 0x00	; 0
    18e8:	10 e0       	ldi	r17, 0x00	; 0
				
				memset(env.wifi_ssid,0,ssid_len);
				memset(env.wifi_pswd,0,pass_len);
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
    18ea:	a1 2c       	mov	r10, r1
				for (uint16_t i = 0; i < len; i++) {
					if(rx_buffer[i] == '=') {
						n++;
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
    18ec:	84 e1       	ldi	r24, 0x14	; 20
    18ee:	b8 2e       	mov	r11, r24
    18f0:	ce 01       	movw	r24, r28
    18f2:	01 96       	adiw	r24, 0x01	; 1
    18f4:	7c 01       	movw	r14, r24
				memset(env.wifi_pswd,0,pass_len);
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
    18f6:	0c 15       	cp	r16, r12
    18f8:	1d 05       	cpc	r17, r13
    18fa:	08 f0       	brcs	.+2      	; 0x18fe <esp8266_configure_ssid_and_password+0x162>
    18fc:	3f c0       	rjmp	.+126    	; 0x197c <esp8266_configure_ssid_and_password+0x1e0>
					if(rx_buffer[i] == '=') {
    18fe:	f8 01       	movw	r30, r16
    1900:	e4 5f       	subi	r30, 0xF4	; 244
    1902:	f5 4d       	sbci	r31, 0xD5	; 213
    1904:	80 81       	ld	r24, Z
    1906:	8d 33       	cpi	r24, 0x3D	; 61
    1908:	b1 f5       	brne	.+108    	; 0x1976 <esp8266_configure_ssid_and_password+0x1da>
						n++;
    190a:	a3 94       	inc	r10
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
    190c:	d7 01       	movw	r26, r14
    190e:	eb 2d       	mov	r30, r11
    1910:	1d 92       	st	X+, r1
    1912:	ea 95       	dec	r30
    1914:	e9 f7       	brne	.-6      	; 0x1910 <esp8266_configure_ssid_and_password+0x174>
    1916:	f7 01       	movw	r30, r14
						while ((rx_buffer[++i] != '&') && (i != len)) {
    1918:	0f 5f       	subi	r16, 0xFF	; 255
    191a:	1f 4f       	sbci	r17, 0xFF	; 255
    191c:	d8 01       	movw	r26, r16
    191e:	a4 5f       	subi	r26, 0xF4	; 244
    1920:	b5 4d       	sbci	r27, 0xD5	; 213
    1922:	8c 91       	ld	r24, X
    1924:	86 32       	cpi	r24, 0x26	; 38
    1926:	21 f4       	brne	.+8      	; 0x1930 <esp8266_configure_ssid_and_password+0x194>
							temp[j++] = rx_buffer[i];
						}
						if (n == 1) {
    1928:	f1 e0       	ldi	r31, 0x01	; 1
    192a:	af 12       	cpse	r10, r31
    192c:	13 c0       	rjmp	.+38     	; 0x1954 <esp8266_configure_ssid_and_password+0x1b8>
    192e:	05 c0       	rjmp	.+10     	; 0x193a <esp8266_configure_ssid_and_password+0x19e>
					if(rx_buffer[i] == '=') {
						n++;
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
						while ((rx_buffer[++i] != '&') && (i != len)) {
    1930:	0c 15       	cp	r16, r12
    1932:	1d 05       	cpc	r17, r13
    1934:	c9 f3       	breq	.-14     	; 0x1928 <esp8266_configure_ssid_and_password+0x18c>
							temp[j++] = rx_buffer[i];
    1936:	81 93       	st	Z+, r24
    1938:	ef cf       	rjmp	.-34     	; 0x1918 <esp8266_configure_ssid_and_password+0x17c>
						}
						if (n == 1) {
							if (strlen(temp) < ssid_len)
    193a:	f7 01       	movw	r30, r14
    193c:	01 90       	ld	r0, Z+
    193e:	00 20       	and	r0, r0
    1940:	e9 f7       	brne	.-6      	; 0x193c <esp8266_configure_ssid_and_password+0x1a0>
    1942:	31 97       	sbiw	r30, 0x01	; 1
    1944:	ee 19       	sub	r30, r14
    1946:	ff 09       	sbc	r31, r15
    1948:	79 97       	sbiw	r30, 0x19	; 25
    194a:	a8 f4       	brcc	.+42     	; 0x1976 <esp8266_configure_ssid_and_password+0x1da>
								strcpy(env.wifi_ssid,temp);
    194c:	b7 01       	movw	r22, r14
    194e:	88 ea       	ldi	r24, 0xA8	; 168
    1950:	9b e2       	ldi	r25, 0x2B	; 43
    1952:	0f c0       	rjmp	.+30     	; 0x1972 <esp8266_configure_ssid_and_password+0x1d6>
						} else if (n == 2) {
    1954:	22 e0       	ldi	r18, 0x02	; 2
    1956:	a2 12       	cpse	r10, r18
    1958:	0e c0       	rjmp	.+28     	; 0x1976 <esp8266_configure_ssid_and_password+0x1da>
							if (strlen(temp) < pass_len)
    195a:	f7 01       	movw	r30, r14
    195c:	01 90       	ld	r0, Z+
    195e:	00 20       	and	r0, r0
    1960:	e9 f7       	brne	.-6      	; 0x195c <esp8266_configure_ssid_and_password+0x1c0>
    1962:	31 97       	sbiw	r30, 0x01	; 1
    1964:	ee 19       	sub	r30, r14
    1966:	ff 09       	sbc	r31, r15
    1968:	79 97       	sbiw	r30, 0x19	; 25
    196a:	28 f4       	brcc	.+10     	; 0x1976 <esp8266_configure_ssid_and_password+0x1da>
								strcpy(env.wifi_pswd,temp);
    196c:	b7 01       	movw	r22, r14
    196e:	8f e8       	ldi	r24, 0x8F	; 143
    1970:	9b e2       	ldi	r25, 0x2B	; 43
    1972:	0e 94 78 55 	call	0xaaf0	; 0xaaf0 <strcpy>
				memset(env.wifi_pswd,0,pass_len);
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
    1976:	0f 5f       	subi	r16, 0xFF	; 255
    1978:	1f 4f       	sbci	r17, 0xFF	; 255
    197a:	bd cf       	rjmp	.-134    	; 0x18f6 <esp8266_configure_ssid_and_password+0x15a>
								strcpy(env.wifi_pswd,temp);
						} 
					}
				}

				esp8266_off();
    197c:	39 dd       	rcall	.-1422   	; 0x13f0 <esp8266_off>
    197e:	3f ef       	ldi	r19, 0xFF	; 255
    1980:	47 ea       	ldi	r20, 0xA7	; 167
    1982:	81 e6       	ldi	r24, 0x61	; 97
    1984:	31 50       	subi	r19, 0x01	; 1
    1986:	40 40       	sbci	r20, 0x00	; 0
    1988:	80 40       	sbci	r24, 0x00	; 0
    198a:	e1 f7       	brne	.-8      	; 0x1984 <esp8266_configure_ssid_and_password+0x1e8>
    198c:	00 c0       	rjmp	.+0      	; 0x198e <esp8266_configure_ssid_and_password+0x1f2>
    198e:	00 00       	nop
				_delay_ms(1000);
				esp8266_on();
    1990:	20 dd       	rcall	.-1472   	; 0x13d2 <esp8266_on>

				status = esp8266_setup();
    1992:	34 dd       	rcall	.-1432   	; 0x13fc <esp8266_setup>
    1994:	80 93 cd 2c 	sts	0x2CCD, r24
				if (status != ESP8266_SUCCESS) {
    1998:	81 30       	cpi	r24, 0x01	; 1
    199a:	31 f0       	breq	.+12     	; 0x19a8 <esp8266_configure_ssid_and_password+0x20c>
					stop_wifi_indication();
    199c:	0e 94 23 41 	call	0x8246	; 0x8246 <stop_wifi_indication>
#ifdef SHOW_MANUAL
					display_print_scrolling_text("COULD NOT JOIN AP",false);
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	8a e0       	ldi	r24, 0x0A	; 10
    19a4:	94 e2       	ldi	r25, 0x24	; 36
    19a6:	0e c0       	rjmp	.+28     	; 0x19c4 <esp8266_configure_ssid_and_password+0x228>
#endif
					return ESP8266_TIMEOUT;
				}
				
				status = esp8266_join_ap(env.wifi_ssid,env.wifi_pswd);
    19a8:	6f e8       	ldi	r22, 0x8F	; 143
    19aa:	7b e2       	ldi	r23, 0x2B	; 43
    19ac:	88 ea       	ldi	r24, 0xA8	; 168
    19ae:	9b e2       	ldi	r25, 0x2B	; 43
    19b0:	4a dd       	rcall	.-1388   	; 0x1446 <esp8266_join_ap>
    19b2:	80 93 cd 2c 	sts	0x2CCD, r24
				if (status != ESP8266_SUCCESS) {
    19b6:	81 30       	cpi	r24, 0x01	; 1
    19b8:	89 f7       	brne	.-30     	; 0x199c <esp8266_configure_ssid_and_password+0x200>
#ifdef SHOW_MANUAL
					display_print_scrolling_text("COULD NOT JOIN AP",false);
#endif
					return ESP8266_TIMEOUT;
				}
				stop_wifi_indication();
    19ba:	0e 94 23 41 	call	0x8246	; 0x8246 <stop_wifi_indication>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("WIFI CONFIGURED",false);
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	8c e1       	ldi	r24, 0x1C	; 28
    19c2:	94 e2       	ldi	r25, 0x24	; 36
    19c4:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
#endif
				return ESP8266_TIMEOUT;
    19c8:	83 e0       	ldi	r24, 0x03	; 3
			}	
		}
	}
	return ESP8266_SUCCESS;
}
    19ca:	6e 96       	adiw	r28, 0x1e	; 30
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	1f 91       	pop	r17
    19d6:	0f 91       	pop	r16
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	df 90       	pop	r13
    19de:	cf 90       	pop	r12
    19e0:	bf 90       	pop	r11
    19e2:	af 90       	pop	r10
    19e4:	08 95       	ret

000019e6 <__vector_88>:

ISR(USARTD0_RXC_vect) 
{
    19e6:	1f 92       	push	r1
    19e8:	0f 92       	push	r0
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	0f 92       	push	r0
    19ee:	11 24       	eor	r1, r1
    19f0:	0b b6       	in	r0, 0x3b	; 59
    19f2:	0f 92       	push	r0
    19f4:	2f 93       	push	r18
    19f6:	3f 93       	push	r19
    19f8:	4f 93       	push	r20
    19fa:	5f 93       	push	r21
    19fc:	6f 93       	push	r22
    19fe:	7f 93       	push	r23
    1a00:	8f 93       	push	r24
    1a02:	9f 93       	push	r25
    1a04:	af 93       	push	r26
    1a06:	bf 93       	push	r27
    1a08:	ef 93       	push	r30
    1a0a:	ff 93       	push	r31
	char rx_temp = USARTD0.DATA;
    1a0c:	40 91 a0 09 	lds	r20, 0x09A0
	
	if (rx_temp == '\n') {
    1a10:	4a 30       	cpi	r20, 0x0A	; 10
    1a12:	09 f0       	breq	.+2      	; 0x1a16 <__vector_88+0x30>
    1a14:	84 c0       	rjmp	.+264    	; 0x1b1e <__vector_88+0x138>
		if (strstr(rx_buffer,"OK") || strstr(rx_buffer,"ready")) {
    1a16:	6c e2       	ldi	r22, 0x2C	; 44
    1a18:	74 e2       	ldi	r23, 0x24	; 36
    1a1a:	8c e0       	ldi	r24, 0x0C	; 12
    1a1c:	9a e2       	ldi	r25, 0x2A	; 42
    1a1e:	0e 94 a4 55 	call	0xab48	; 0xab48 <strstr>
    1a22:	89 2b       	or	r24, r25
    1a24:	41 f4       	brne	.+16     	; 0x1a36 <__vector_88+0x50>
    1a26:	6f e2       	ldi	r22, 0x2F	; 47
    1a28:	74 e2       	ldi	r23, 0x24	; 36
    1a2a:	8c e0       	ldi	r24, 0x0C	; 12
    1a2c:	9a e2       	ldi	r25, 0x2A	; 42
    1a2e:	0e 94 a4 55 	call	0xab48	; 0xab48 <strstr>
    1a32:	89 2b       	or	r24, r25
    1a34:	11 f0       	breq	.+4      	; 0x1a3a <__vector_88+0x54>
			status = ESP8266_SUCCESS;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	14 c0       	rjmp	.+40     	; 0x1a62 <__vector_88+0x7c>
		} else if (strstr(rx_buffer,"ERROR")) {
    1a3a:	65 e3       	ldi	r22, 0x35	; 53
    1a3c:	74 e2       	ldi	r23, 0x24	; 36
    1a3e:	8c e0       	ldi	r24, 0x0C	; 12
    1a40:	9a e2       	ldi	r25, 0x2A	; 42
    1a42:	0e 94 a4 55 	call	0xab48	; 0xab48 <strstr>
    1a46:	89 2b       	or	r24, r25
    1a48:	19 f0       	breq	.+6      	; 0x1a50 <__vector_88+0x6a>
			status = ESP8266_ERROR;
    1a4a:	10 92 cd 2c 	sts	0x2CCD, r1
    1a4e:	4f c0       	rjmp	.+158    	; 0x1aee <__vector_88+0x108>
		} else if (strstr(rx_buffer,"CONNECT")) {
    1a50:	6b e3       	ldi	r22, 0x3B	; 59
    1a52:	74 e2       	ldi	r23, 0x24	; 36
    1a54:	8c e0       	ldi	r24, 0x0C	; 12
    1a56:	9a e2       	ldi	r25, 0x2A	; 42
    1a58:	0e 94 a4 55 	call	0xab48	; 0xab48 <strstr>
    1a5c:	89 2b       	or	r24, r25
    1a5e:	21 f0       	breq	.+8      	; 0x1a68 <__vector_88+0x82>
			status = ESP8266_CONNECT;
    1a60:	84 e0       	ldi	r24, 0x04	; 4
    1a62:	80 93 cd 2c 	sts	0x2CCD, r24
    1a66:	43 c0       	rjmp	.+134    	; 0x1aee <__vector_88+0x108>
		} else if (strstr(rx_buffer,"CLOSED")) {
    1a68:	63 e4       	ldi	r22, 0x43	; 67
    1a6a:	74 e2       	ldi	r23, 0x24	; 36
    1a6c:	8c e0       	ldi	r24, 0x0C	; 12
    1a6e:	9a e2       	ldi	r25, 0x2A	; 42
    1a70:	0e 94 a4 55 	call	0xab48	; 0xab48 <strstr>
    1a74:	89 2b       	or	r24, r25
    1a76:	11 f0       	breq	.+4      	; 0x1a7c <__vector_88+0x96>
			status = ESP8266_CLOSED;
    1a78:	86 e0       	ldi	r24, 0x06	; 6
    1a7a:	f3 cf       	rjmp	.-26     	; 0x1a62 <__vector_88+0x7c>
		} else if (strstr(rx_buffer,"GET")) {
    1a7c:	6a e4       	ldi	r22, 0x4A	; 74
    1a7e:	74 e2       	ldi	r23, 0x24	; 36
    1a80:	8c e0       	ldi	r24, 0x0C	; 12
    1a82:	9a e2       	ldi	r25, 0x2A	; 42
    1a84:	0e 94 a4 55 	call	0xab48	; 0xab48 <strstr>
    1a88:	89 2b       	or	r24, r25
    1a8a:	31 f0       	breq	.+12     	; 0x1a98 <__vector_88+0xb2>
			link_channel = rx_buffer[5];
    1a8c:	80 91 11 2a 	lds	r24, 0x2A11
    1a90:	80 93 06 20 	sts	0x2006, r24
			status = ESP8266_GET_REQ;
    1a94:	87 e0       	ldi	r24, 0x07	; 7
    1a96:	e5 cf       	rjmp	.-54     	; 0x1a62 <__vector_88+0x7c>
		} else if (strstr(rx_buffer,"POST")) {
    1a98:	6e e4       	ldi	r22, 0x4E	; 78
    1a9a:	74 e2       	ldi	r23, 0x24	; 36
    1a9c:	8c e0       	ldi	r24, 0x0C	; 12
    1a9e:	9a e2       	ldi	r25, 0x2A	; 42
    1aa0:	0e 94 a4 55 	call	0xab48	; 0xab48 <strstr>
    1aa4:	89 2b       	or	r24, r25
    1aa6:	11 f0       	breq	.+4      	; 0x1aac <__vector_88+0xc6>
			status = ESP8266_POST_REQ;
    1aa8:	88 e0       	ldi	r24, 0x08	; 8
    1aaa:	db cf       	rjmp	.-74     	; 0x1a62 <__vector_88+0x7c>
		} else if (strstr(rx_buffer,"192")) {
    1aac:	63 e5       	ldi	r22, 0x53	; 83
    1aae:	74 e2       	ldi	r23, 0x24	; 36
    1ab0:	8c e0       	ldi	r24, 0x0C	; 12
    1ab2:	9a e2       	ldi	r25, 0x2A	; 42
    1ab4:	0e 94 a4 55 	call	0xab48	; 0xab48 <strstr>
    1ab8:	89 2b       	or	r24, r25
    1aba:	71 f0       	breq	.+28     	; 0x1ad8 <__vector_88+0xf2>
			strncpy(ip_address,strchr(rx_buffer,'\"'),19);
    1abc:	62 e2       	ldi	r22, 0x22	; 34
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	8c e0       	ldi	r24, 0x0C	; 12
    1ac2:	9a e2       	ldi	r25, 0x2A	; 42
    1ac4:	0e 94 6d 55 	call	0xaada	; 0xaada <strchr>
    1ac8:	43 e1       	ldi	r20, 0x13	; 19
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	bc 01       	movw	r22, r24
    1ace:	87 e9       	ldi	r24, 0x97	; 151
    1ad0:	9c e2       	ldi	r25, 0x2C	; 44
    1ad2:	0e 94 7f 55 	call	0xaafe	; 0xaafe <strncpy>
    1ad6:	0b c0       	rjmp	.+22     	; 0x1aee <__vector_88+0x108>
		} else if (strstr(rx_buffer,"wdt")) {
    1ad8:	67 e5       	ldi	r22, 0x57	; 87
    1ada:	74 e2       	ldi	r23, 0x24	; 36
    1adc:	8c e0       	ldi	r24, 0x0C	; 12
    1ade:	9a e2       	ldi	r25, 0x2A	; 42
    1ae0:	0e 94 a4 55 	call	0xab48	; 0xab48 <strstr>
    1ae4:	89 2b       	or	r24, r25
    1ae6:	19 f0       	breq	.+6      	; 0x1aee <__vector_88+0x108>
			wdt_triggered = true;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	80 93 d7 2a 	sts	0x2AD7, r24
		}
		 
		if (strstr(rx_buffer,"{")) {
    1aee:	6b e7       	ldi	r22, 0x7B	; 123
    1af0:	70 e0       	ldi	r23, 0x00	; 0
    1af2:	8c e0       	ldi	r24, 0x0C	; 12
    1af4:	9a e2       	ldi	r25, 0x2A	; 42
    1af6:	0e 94 6d 55 	call	0xaada	; 0xaada <strchr>
    1afa:	89 2b       	or	r24, r25
    1afc:	21 f0       	breq	.+8      	; 0x1b06 <__vector_88+0x120>
			json_found = true;	
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	80 93 d6 2a 	sts	0x2AD6, r24
    1b04:	26 c0       	rjmp	.+76     	; 0x1b52 <__vector_88+0x16c>
		} else {
			//Flush buffer
			rx_ptr = 0;
    1b06:	10 92 d4 2a 	sts	0x2AD4, r1
    1b0a:	10 92 d5 2a 	sts	0x2AD5, r1
			memset(rx_buffer, 0, RX_BUFFER);	
    1b0e:	88 ec       	ldi	r24, 0xC8	; 200
    1b10:	ec e0       	ldi	r30, 0x0C	; 12
    1b12:	fa e2       	ldi	r31, 0x2A	; 42
    1b14:	df 01       	movw	r26, r30
    1b16:	1d 92       	st	X+, r1
    1b18:	8a 95       	dec	r24
    1b1a:	e9 f7       	brne	.-6      	; 0x1b16 <__vector_88+0x130>
    1b1c:	1a c0       	rjmp	.+52     	; 0x1b52 <__vector_88+0x16c>
		}
	} else {
		rx_buffer[rx_ptr++] = rx_temp;
    1b1e:	80 91 d4 2a 	lds	r24, 0x2AD4
    1b22:	90 91 d5 2a 	lds	r25, 0x2AD5
    1b26:	9c 01       	movw	r18, r24
    1b28:	2f 5f       	subi	r18, 0xFF	; 255
    1b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2c:	20 93 d4 2a 	sts	0x2AD4, r18
    1b30:	30 93 d5 2a 	sts	0x2AD5, r19
    1b34:	fc 01       	movw	r30, r24
    1b36:	e4 5f       	subi	r30, 0xF4	; 244
    1b38:	f5 4d       	sbci	r31, 0xD5	; 213
    1b3a:	40 83       	st	Z, r20
		
		//Buffer overflow guard
		if (rx_ptr == RX_BUFFER) {
    1b3c:	80 91 d4 2a 	lds	r24, 0x2AD4
    1b40:	90 91 d5 2a 	lds	r25, 0x2AD5
    1b44:	88 3c       	cpi	r24, 0xC8	; 200
    1b46:	91 05       	cpc	r25, r1
    1b48:	21 f4       	brne	.+8      	; 0x1b52 <__vector_88+0x16c>
			rx_ptr = 0;
    1b4a:	10 92 d4 2a 	sts	0x2AD4, r1
    1b4e:	10 92 d5 2a 	sts	0x2AD5, r1
		}
	}
    1b52:	ff 91       	pop	r31
    1b54:	ef 91       	pop	r30
    1b56:	bf 91       	pop	r27
    1b58:	af 91       	pop	r26
    1b5a:	9f 91       	pop	r25
    1b5c:	8f 91       	pop	r24
    1b5e:	7f 91       	pop	r23
    1b60:	6f 91       	pop	r22
    1b62:	5f 91       	pop	r21
    1b64:	4f 91       	pop	r20
    1b66:	3f 91       	pop	r19
    1b68:	2f 91       	pop	r18
    1b6a:	0f 90       	pop	r0
    1b6c:	0b be       	out	0x3b, r0	; 59
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	0f 90       	pop	r0
    1b74:	1f 90       	pop	r1
    1b76:	18 95       	reti

00001b78 <ht1632c_set_pixel>:
void ht1632c_blink(bool blink_on) 
{	
	if (blink_on) {
		ht1632c_write_command(HT1632_BLINK_ON);	
	} else {
		ht1632c_write_command(HT1632_BLINK_OFF);	
    1b78:	fc 01       	movw	r30, r24
    1b7a:	23 e0       	ldi	r18, 0x03	; 3
    1b7c:	f6 95       	lsr	r31
    1b7e:	e7 95       	ror	r30
    1b80:	2a 95       	dec	r18
    1b82:	e1 f7       	brne	.-8      	; 0x1b7c <ht1632c_set_pixel+0x4>
    1b84:	e3 55       	subi	r30, 0x53	; 83
    1b86:	f3 4d       	sbci	r31, 0xD3	; 211
    1b88:	87 70       	andi	r24, 0x07	; 7
    1b8a:	99 27       	eor	r25, r25
    1b8c:	21 e0       	ldi	r18, 0x01	; 1
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <ht1632c_set_pixel+0x1c>
    1b92:	22 0f       	add	r18, r18
    1b94:	8a 95       	dec	r24
    1b96:	ea f7       	brpl	.-6      	; 0x1b92 <ht1632c_set_pixel+0x1a>
    1b98:	80 81       	ld	r24, Z
    1b9a:	82 2b       	or	r24, r18
    1b9c:	80 83       	st	Z, r24
    1b9e:	08 95       	ret

00001ba0 <ht1632c_clr_pixel>:
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	33 e0       	ldi	r19, 0x03	; 3
    1ba4:	f6 95       	lsr	r31
    1ba6:	e7 95       	ror	r30
    1ba8:	3a 95       	dec	r19
    1baa:	e1 f7       	brne	.-8      	; 0x1ba4 <ht1632c_clr_pixel+0x4>
    1bac:	e3 55       	subi	r30, 0x53	; 83
    1bae:	f3 4d       	sbci	r31, 0xD3	; 211
    1bb0:	87 70       	andi	r24, 0x07	; 7
    1bb2:	99 27       	eor	r25, r25
    1bb4:	21 e0       	ldi	r18, 0x01	; 1
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	01 c0       	rjmp	.+2      	; 0x1bbc <ht1632c_clr_pixel+0x1c>
    1bba:	22 0f       	add	r18, r18
    1bbc:	8a 95       	dec	r24
    1bbe:	ea f7       	brpl	.-6      	; 0x1bba <ht1632c_clr_pixel+0x1a>
    1bc0:	20 95       	com	r18
    1bc2:	80 81       	ld	r24, Z
    1bc4:	28 23       	and	r18, r24
    1bc6:	20 83       	st	Z, r18
    1bc8:	08 95       	ret

00001bca <ht1632c_fill_screen>:
    1bca:	ed ea       	ldi	r30, 0xAD	; 173
    1bcc:	fc e2       	ldi	r31, 0x2C	; 44
    1bce:	8f ef       	ldi	r24, 0xFF	; 255
    1bd0:	81 93       	st	Z+, r24
    1bd2:	9c e2       	ldi	r25, 0x2C	; 44
    1bd4:	ed 3c       	cpi	r30, 0xCD	; 205
    1bd6:	f9 07       	cpc	r31, r25
    1bd8:	d9 f7       	brne	.-10     	; 0x1bd0 <ht1632c_fill_screen+0x6>
    1bda:	0c 94 22 21 	jmp	0x4244	; 0x4244 <display_refresh_screen>

00001bde <ht1632c_clear_screen>:
    1bde:	ed ea       	ldi	r30, 0xAD	; 173
    1be0:	fc e2       	ldi	r31, 0x2C	; 44
    1be2:	11 92       	st	Z+, r1
    1be4:	8c e2       	ldi	r24, 0x2C	; 44
    1be6:	ed 3c       	cpi	r30, 0xCD	; 205
    1be8:	f8 07       	cpc	r31, r24
    1bea:	d9 f7       	brne	.-10     	; 0x1be2 <ht1632c_clear_screen+0x4>
    1bec:	0c 94 22 21 	jmp	0x4244	; 0x4244 <display_refresh_screen>

00001bf0 <ht1632c_clear_buffer>:
    1bf0:	ed ea       	ldi	r30, 0xAD	; 173
    1bf2:	fc e2       	ldi	r31, 0x2C	; 44
    1bf4:	11 92       	st	Z+, r1
    1bf6:	8c e2       	ldi	r24, 0x2C	; 44
    1bf8:	ed 3c       	cpi	r30, 0xCD	; 205
    1bfa:	f8 07       	cpc	r31, r24
    1bfc:	d9 f7       	brne	.-10     	; 0x1bf4 <ht1632c_clear_buffer+0x4>
    1bfe:	08 95       	ret

00001c00 <ht1632c_write_data>:
    1c00:	74 e0       	ldi	r23, 0x04	; 4
    1c02:	41 e0       	ldi	r20, 0x01	; 1
    1c04:	50 e0       	ldi	r21, 0x00	; 0
    1c06:	e8 e0       	ldi	r30, 0x08	; 8
    1c08:	66 23       	and	r22, r22
    1c0a:	c1 f0       	breq	.+48     	; 0x1c3c <ht1632c_write_data+0x3c>
    1c0c:	70 93 86 06 	sts	0x0686, r23
    1c10:	2f ef       	ldi	r18, 0xFF	; 255
    1c12:	26 0f       	add	r18, r22
    1c14:	da 01       	movw	r26, r20
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <ht1632c_write_data+0x1c>
    1c18:	aa 0f       	add	r26, r26
    1c1a:	bb 1f       	adc	r27, r27
    1c1c:	2a 95       	dec	r18
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <ht1632c_write_data+0x18>
    1c20:	9d 01       	movw	r18, r26
    1c22:	28 23       	and	r18, r24
    1c24:	39 23       	and	r19, r25
    1c26:	23 2b       	or	r18, r19
    1c28:	19 f0       	breq	.+6      	; 0x1c30 <ht1632c_write_data+0x30>
    1c2a:	e0 93 85 06 	sts	0x0685, r30
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <ht1632c_write_data+0x34>
    1c30:	e0 93 86 06 	sts	0x0686, r30
    1c34:	70 93 85 06 	sts	0x0685, r23
    1c38:	61 50       	subi	r22, 0x01	; 1
    1c3a:	e6 cf       	rjmp	.-52     	; 0x1c08 <ht1632c_write_data+0x8>
    1c3c:	08 95       	ret

00001c3e <ht1632c_refresh_screen>:
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	80 93 86 06 	sts	0x0686, r24
    1c48:	63 e0       	ldi	r22, 0x03	; 3
    1c4a:	85 e0       	ldi	r24, 0x05	; 5
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	d8 df       	rcall	.-80     	; 0x1c00 <ht1632c_write_data>
    1c50:	67 e0       	ldi	r22, 0x07	; 7
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	d4 df       	rcall	.-88     	; 0x1c00 <ht1632c_write_data>
    1c58:	ce ea       	ldi	r28, 0xAE	; 174
    1c5a:	dc e2       	ldi	r29, 0x2C	; 44
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	31 97       	sbiw	r30, 0x01	; 1
    1c60:	80 81       	ld	r24, Z
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	98 2f       	mov	r25, r24
    1c66:	88 27       	eor	r24, r24
    1c68:	28 81       	ld	r18, Y
    1c6a:	60 e1       	ldi	r22, 0x10	; 16
    1c6c:	82 2b       	or	r24, r18
    1c6e:	c8 df       	rcall	.-112    	; 0x1c00 <ht1632c_write_data>
    1c70:	22 96       	adiw	r28, 0x02	; 2
    1c72:	8c e2       	ldi	r24, 0x2C	; 44
    1c74:	ce 3c       	cpi	r28, 0xCE	; 206
    1c76:	d8 07       	cpc	r29, r24
    1c78:	89 f7       	brne	.-30     	; 0x1c5c <ht1632c_refresh_screen+0x1e>
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	80 93 85 06 	sts	0x0685, r24
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	08 95       	ret

00001c86 <ht1632c_write_command>:
    1c86:	1f 93       	push	r17
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	94 60       	ori	r25, 0x04	; 4
    1c90:	c0 e8       	ldi	r28, 0x80	; 128
    1c92:	d6 e0       	ldi	r29, 0x06	; 6
    1c94:	11 e0       	ldi	r17, 0x01	; 1
    1c96:	1e 83       	std	Y+6, r17	; 0x06
    1c98:	6c e0       	ldi	r22, 0x0C	; 12
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	b0 df       	rcall	.-160    	; 0x1c00 <ht1632c_write_data>
    1ca0:	1d 83       	std	Y+5, r17	; 0x05
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	1f 91       	pop	r17
    1ca8:	08 95       	ret

00001caa <ht1632c_setup>:
    1caa:	cf 93       	push	r28
    1cac:	c8 2f       	mov	r28, r24
    1cae:	e0 e8       	ldi	r30, 0x80	; 128
    1cb0:	f6 e0       	ldi	r31, 0x06	; 6
    1cb2:	8d e0       	ldi	r24, 0x0D	; 13
    1cb4:	81 83       	std	Z+1, r24	; 0x01
    1cb6:	85 e0       	ldi	r24, 0x05	; 5
    1cb8:	85 83       	std	Z+5, r24	; 0x05
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	e4 df       	rcall	.-56     	; 0x1c86 <ht1632c_write_command>
    1cbe:	83 e0       	ldi	r24, 0x03	; 3
    1cc0:	e2 df       	rcall	.-60     	; 0x1c86 <ht1632c_write_command>
    1cc2:	88 e0       	ldi	r24, 0x08	; 8
    1cc4:	e0 df       	rcall	.-64     	; 0x1c86 <ht1632c_write_command>
    1cc6:	84 e1       	ldi	r24, 0x14	; 20
    1cc8:	de df       	rcall	.-68     	; 0x1c86 <ht1632c_write_command>
    1cca:	88 e1       	ldi	r24, 0x18	; 24
    1ccc:	dc df       	rcall	.-72     	; 0x1c86 <ht1632c_write_command>
    1cce:	8c 2f       	mov	r24, r28
    1cd0:	da df       	rcall	.-76     	; 0x1c86 <ht1632c_write_command>
    1cd2:	81 ea       	ldi	r24, 0xA1	; 161
    1cd4:	cf 91       	pop	r28
    1cd6:	d7 cf       	rjmp	.-82     	; 0x1c86 <ht1632c_write_command>

00001cd8 <ht1632c_power_down>:
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	d5 df       	rcall	.-86     	; 0x1c86 <ht1632c_write_command>
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	d3 df       	rcall	.-90     	; 0x1c86 <ht1632c_write_command>
    1ce0:	e0 e8       	ldi	r30, 0x80	; 128
    1ce2:	f6 e0       	ldi	r31, 0x06	; 6
    1ce4:	8f e0       	ldi	r24, 0x0F	; 15
    1ce6:	82 83       	std	Z+2, r24	; 0x02
    1ce8:	88 e1       	ldi	r24, 0x18	; 24
    1cea:	80 8b       	std	Z+16, r24	; 0x10
    1cec:	81 8b       	std	Z+17, r24	; 0x11
    1cee:	82 8b       	std	Z+18, r24	; 0x12
    1cf0:	83 8b       	std	Z+19, r24	; 0x13
    1cf2:	08 95       	ret

00001cf4 <ht1632c_set_brightness>:
    1cf4:	87 fd       	sbrc	r24, 7
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	80 31       	cpi	r24, 0x10	; 16
    1cfa:	0c f0       	brlt	.+2      	; 0x1cfe <ht1632c_set_brightness+0xa>
    1cfc:	8f e0       	ldi	r24, 0x0F	; 15
    1cfe:	80 6a       	ori	r24, 0xA0	; 160
    1d00:	c2 cf       	rjmp	.-124    	; 0x1c86 <ht1632c_write_command>

00001d02 <ht1632c_shift_left>:

void ht1632c_shift_left(void) 
{
	int8_t i;
	
	display_refresh_screen();
    1d02:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
    1d06:	2f ef       	ldi	r18, 0xFF	; 255
    1d08:	89 ef       	ldi	r24, 0xF9	; 249
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	21 50       	subi	r18, 0x01	; 1
    1d0e:	80 40       	sbci	r24, 0x00	; 0
    1d10:	90 40       	sbci	r25, 0x00	; 0
    1d12:	e1 f7       	brne	.-8      	; 0x1d0c <ht1632c_shift_left+0xa>
    1d14:	00 c0       	rjmp	.+0      	; 0x1d16 <ht1632c_shift_left+0x14>
    1d16:	00 00       	nop
    1d18:	ef ea       	ldi	r30, 0xAF	; 175
    1d1a:	fc e2       	ldi	r31, 0x2C	; 44
	_delay_ms(10);
	
	for (i = 0; i <= 30; i += 2) {
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
		if (i == 14) {
    1d1e:	8e 30       	cpi	r24, 0x0E	; 14
    1d20:	29 f4       	brne	.+10     	; 0x1d2c <ht1632c_shift_left+0x2a>
			ledmatrix[14] = ledmatrix[1];
    1d22:	90 91 ae 2c 	lds	r25, 0x2CAE
    1d26:	90 93 bb 2c 	sts	0x2CBB, r25
    1d2a:	0b c0       	rjmp	.+22     	; 0x1d42 <ht1632c_shift_left+0x40>
		} else if(i == 30) {
    1d2c:	8e 31       	cpi	r24, 0x1E	; 30
    1d2e:	29 f4       	brne	.+10     	; 0x1d3a <ht1632c_shift_left+0x38>
			ledmatrix[30] = ledmatrix[17];
    1d30:	90 91 be 2c 	lds	r25, 0x2CBE
    1d34:	90 93 cb 2c 	sts	0x2CCB, r25
    1d38:	04 c0       	rjmp	.+8      	; 0x1d42 <ht1632c_shift_left+0x40>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    1d3a:	90 81       	ld	r25, Z
    1d3c:	df 01       	movw	r26, r30
    1d3e:	12 97       	sbiw	r26, 0x02	; 2
    1d40:	9c 93       	st	X, r25
    1d42:	8e 5f       	subi	r24, 0xFE	; 254
    1d44:	32 96       	adiw	r30, 0x02	; 2
	int8_t i;
	
	display_refresh_screen();
	_delay_ms(10);
	
	for (i = 0; i <= 30; i += 2) {
    1d46:	80 32       	cpi	r24, 0x20	; 32
    1d48:	51 f7       	brne	.-44     	; 0x1d1e <ht1632c_shift_left+0x1c>
    1d4a:	e0 eb       	ldi	r30, 0xB0	; 176
    1d4c:	fc e2       	ldi	r31, 0x2C	; 44
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
		if (i == 15) {
    1d50:	8f 30       	cpi	r24, 0x0F	; 15
    1d52:	19 f4       	brne	.+6      	; 0x1d5a <ht1632c_shift_left+0x58>
			ledmatrix[15] = 0;
    1d54:	10 92 bc 2c 	sts	0x2CBC, r1
    1d58:	09 c0       	rjmp	.+18     	; 0x1d6c <ht1632c_shift_left+0x6a>
		} else if (i == 31) {
    1d5a:	8f 31       	cpi	r24, 0x1F	; 31
    1d5c:	19 f4       	brne	.+6      	; 0x1d64 <ht1632c_shift_left+0x62>
			ledmatrix[31] = 0;
    1d5e:	10 92 cc 2c 	sts	0x2CCC, r1
    1d62:	04 c0       	rjmp	.+8      	; 0x1d6c <ht1632c_shift_left+0x6a>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    1d64:	90 81       	ld	r25, Z
    1d66:	df 01       	movw	r26, r30
    1d68:	12 97       	sbiw	r26, 0x02	; 2
    1d6a:	9c 93       	st	X, r25
    1d6c:	8e 5f       	subi	r24, 0xFE	; 254
    1d6e:	32 96       	adiw	r30, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
    1d70:	81 32       	cpi	r24, 0x21	; 33
    1d72:	71 f7       	brne	.-36     	; 0x1d50 <ht1632c_shift_left+0x4e>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	*/
}
    1d74:	08 95       	ret

00001d76 <ht1632c_shift_right>:

void ht1632c_shift_right(void) 
{	
	int8_t i;
	
	display_refresh_screen();
    1d76:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
    1d7a:	2f ef       	ldi	r18, 0xFF	; 255
    1d7c:	89 ef       	ldi	r24, 0xF9	; 249
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	21 50       	subi	r18, 0x01	; 1
    1d82:	80 40       	sbci	r24, 0x00	; 0
    1d84:	90 40       	sbci	r25, 0x00	; 0
    1d86:	e1 f7       	brne	.-8      	; 0x1d80 <ht1632c_shift_right+0xa>
    1d88:	00 c0       	rjmp	.+0      	; 0x1d8a <ht1632c_shift_right+0x14>
    1d8a:	00 00       	nop
    1d8c:	ec ec       	ldi	r30, 0xCC	; 204
    1d8e:	fc e2       	ldi	r31, 0x2C	; 44
	_delay_ms(10);
	
	for (i = 31; i > 0; i -= 2) {
    1d90:	8f e1       	ldi	r24, 0x1F	; 31
    1d92:	df 01       	movw	r26, r30
    1d94:	12 97       	sbiw	r26, 0x02	; 2
		if (i == 1) {
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	29 f4       	brne	.+10     	; 0x1da4 <ht1632c_shift_right+0x2e>
			ledmatrix[1] = ledmatrix[14];
    1d9a:	90 91 bb 2c 	lds	r25, 0x2CBB
    1d9e:	90 93 ae 2c 	sts	0x2CAE, r25
    1da2:	09 c0       	rjmp	.+18     	; 0x1db6 <ht1632c_shift_right+0x40>
		} else if(i == 17) {
    1da4:	81 31       	cpi	r24, 0x11	; 17
    1da6:	29 f4       	brne	.+10     	; 0x1db2 <ht1632c_shift_right+0x3c>
			ledmatrix[17] = ledmatrix[30];
    1da8:	90 91 cb 2c 	lds	r25, 0x2CCB
    1dac:	90 93 be 2c 	sts	0x2CBE, r25
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <ht1632c_shift_right+0x40>
		} else {
			ledmatrix[i] = ledmatrix[i-2];
    1db2:	9c 91       	ld	r25, X
    1db4:	90 83       	st	Z, r25
    1db6:	82 50       	subi	r24, 0x02	; 2
    1db8:	fd 01       	movw	r30, r26
	int8_t i;
	
	display_refresh_screen();
	_delay_ms(10);
	
	for (i = 31; i > 0; i -= 2) {
    1dba:	8f 3f       	cpi	r24, 0xFF	; 255
    1dbc:	51 f7       	brne	.-44     	; 0x1d92 <ht1632c_shift_right+0x1c>
    1dbe:	eb ec       	ldi	r30, 0xCB	; 203
    1dc0:	fc e2       	ldi	r31, 0x2C	; 44
    1dc2:	8e e1       	ldi	r24, 0x1E	; 30
    1dc4:	df 01       	movw	r26, r30
    1dc6:	12 97       	sbiw	r26, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	for (i = 30; i >= 0; i -= 2) {
		if (i == 0) {
    1dc8:	81 11       	cpse	r24, r1
    1dca:	03 c0       	rjmp	.+6      	; 0x1dd2 <ht1632c_shift_right+0x5c>
			ledmatrix[0] = 0;
    1dcc:	10 92 ad 2c 	sts	0x2CAD, r1
    1dd0:	07 c0       	rjmp	.+14     	; 0x1de0 <ht1632c_shift_right+0x6a>
		} else if(i == 16) {
    1dd2:	80 31       	cpi	r24, 0x10	; 16
    1dd4:	19 f4       	brne	.+6      	; 0x1ddc <ht1632c_shift_right+0x66>
			ledmatrix[16] = 0;
    1dd6:	10 92 bd 2c 	sts	0x2CBD, r1
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <ht1632c_shift_right+0x6a>
		} else {
			ledmatrix[i] = ledmatrix[i-2];
    1ddc:	9c 91       	ld	r25, X
    1dde:	90 83       	st	Z, r25
    1de0:	82 50       	subi	r24, 0x02	; 2
    1de2:	fd 01       	movw	r30, r26
			ledmatrix[17] = ledmatrix[30];
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	for (i = 30; i >= 0; i -= 2) {
    1de4:	8e 3f       	cpi	r24, 0xFE	; 254
    1de6:	71 f7       	brne	.-36     	; 0x1dc4 <ht1632c_shift_right+0x4e>
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	*/
}
    1de8:	08 95       	ret

00001dea <ht1632c_shift_up>:

void ht1632c_shift_up(void) 
{
    1dea:	ad ea       	ldi	r26, 0xAD	; 173
    1dec:	bc e2       	ldi	r27, 0x2C	; 44
    1dee:	ed eb       	ldi	r30, 0xBD	; 189
    1df0:	fc e2       	ldi	r31, 0x2C	; 44
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
		temp_top = ledmatrix[i];
		temp_bottom = ledmatrix[i+16];
		temp = (temp_top << 8) | (temp_bottom);
    1df2:	8c 91       	ld	r24, X
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	98 2f       	mov	r25, r24
    1df8:	88 27       	eor	r24, r24
    1dfa:	20 81       	ld	r18, Z
    1dfc:	82 2b       	or	r24, r18
		temp <<= 1;
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
		ledmatrix[i] = (temp >> 8);
    1e02:	9d 93       	st	X+, r25
		ledmatrix[i+16] = temp;
    1e04:	81 93       	st	Z+, r24
	uint8_t temp_bottom;
	uint16_t temp;
	
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
    1e06:	2c e2       	ldi	r18, 0x2C	; 44
    1e08:	ec 3c       	cpi	r30, 0xCC	; 204
    1e0a:	f2 07       	cpc	r31, r18
    1e0c:	91 f7       	brne	.-28     	; 0x1df2 <ht1632c_shift_up+0x8>
		temp <<= 1;
		ledmatrix[i] = (temp >> 8);
		ledmatrix[i+16] = temp;
	}
	
	display_refresh_screen();
    1e0e:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
    1e12:	8f ef       	ldi	r24, 0xFF	; 255
    1e14:	99 ef       	ldi	r25, 0xF9	; 249
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	81 50       	subi	r24, 0x01	; 1
    1e1a:	90 40       	sbci	r25, 0x00	; 0
    1e1c:	20 40       	sbci	r18, 0x00	; 0
    1e1e:	e1 f7       	brne	.-8      	; 0x1e18 <ht1632c_shift_up+0x2e>
    1e20:	00 c0       	rjmp	.+0      	; 0x1e22 <ht1632c_shift_up+0x38>
    1e22:	00 00       	nop
    1e24:	08 95       	ret

00001e26 <ht1632c_shift_down>:
	_delay_ms(10);
}

void ht1632c_shift_down(void) 
{
    1e26:	ad ea       	ldi	r26, 0xAD	; 173
    1e28:	bc e2       	ldi	r27, 0x2C	; 44
    1e2a:	ed eb       	ldi	r30, 0xBD	; 189
    1e2c:	fc e2       	ldi	r31, 0x2C	; 44
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
		temp_top = ledmatrix[i];
		temp_bottom = ledmatrix[i+16];
		temp = (temp_top << 8) | (temp_bottom);
    1e2e:	8c 91       	ld	r24, X
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	98 2f       	mov	r25, r24
    1e34:	88 27       	eor	r24, r24
    1e36:	20 81       	ld	r18, Z
    1e38:	82 2b       	or	r24, r18
		temp >>= 1;
    1e3a:	96 95       	lsr	r25
    1e3c:	87 95       	ror	r24
		ledmatrix[i] = (temp >> 8);
    1e3e:	9d 93       	st	X+, r25
		ledmatrix[i+16] = temp;
    1e40:	81 93       	st	Z+, r24
	uint8_t temp_bottom;
	uint16_t temp;
	
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
    1e42:	2c e2       	ldi	r18, 0x2C	; 44
    1e44:	ec 3c       	cpi	r30, 0xCC	; 204
    1e46:	f2 07       	cpc	r31, r18
    1e48:	91 f7       	brne	.-28     	; 0x1e2e <ht1632c_shift_down+0x8>
		temp >>= 1;
		ledmatrix[i] = (temp >> 8);
		ledmatrix[i+16] = temp;
	}
	
	display_refresh_screen();
    1e4a:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	99 ef       	ldi	r25, 0xF9	; 249
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	81 50       	subi	r24, 0x01	; 1
    1e56:	90 40       	sbci	r25, 0x00	; 0
    1e58:	20 40       	sbci	r18, 0x00	; 0
    1e5a:	e1 f7       	brne	.-8      	; 0x1e54 <ht1632c_shift_down+0x2e>
    1e5c:	00 c0       	rjmp	.+0      	; 0x1e5e <ht1632c_shift_down+0x38>
    1e5e:	00 00       	nop
    1e60:	08 95       	ret

00001e62 <ht1632c_slide_in_from_left>:
}

/*------------------------------SLIDE FUNCTIONS------------------------------*/

void ht1632c_slide_in_from_left(void) 
{
    1e62:	ef 92       	push	r14
    1e64:	ff 92       	push	r15
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	a0 97       	sbiw	r28, 0x20	; 32
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    1e78:	80 e2       	ldi	r24, 0x20	; 32
    1e7a:	de 01       	movw	r26, r28
    1e7c:	11 96       	adiw	r26, 0x01	; 1
    1e7e:	fd 01       	movw	r30, r26
    1e80:	98 2f       	mov	r25, r24
    1e82:	11 92       	st	Z+, r1
    1e84:	9a 95       	dec	r25
    1e86:	e9 f7       	brne	.-6      	; 0x1e82 <ht1632c_slide_in_from_left+0x20>
	memcpy(temp,ledmatrix,32);
    1e88:	ed ea       	ldi	r30, 0xAD	; 173
    1e8a:	fc e2       	ldi	r31, 0x2C	; 44
    1e8c:	98 2f       	mov	r25, r24
    1e8e:	01 90       	ld	r0, Z+
    1e90:	0d 92       	st	X+, r0
    1e92:	9a 95       	dec	r25
    1e94:	e1 f7       	brne	.-8      	; 0x1e8e <ht1632c_slide_in_from_left+0x2c>
	memset(ledmatrix,0,32);
    1e96:	ed ea       	ldi	r30, 0xAD	; 173
    1e98:	fc e2       	ldi	r31, 0x2C	; 44
    1e9a:	df 01       	movw	r26, r30
    1e9c:	1d 92       	st	X+, r1
    1e9e:	8a 95       	dec	r24
    1ea0:	e9 f7       	brne	.-6      	; 0x1e9c <ht1632c_slide_in_from_left+0x3a>
    1ea2:	8e 01       	movw	r16, r28
    1ea4:	00 5e       	subi	r16, 0xE0	; 224
    1ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea8:	7e 01       	movw	r14, r28
    1eaa:	b0 e1       	ldi	r27, 0x10	; 16
    1eac:	eb 0e       	add	r14, r27
    1eae:	f1 1c       	adc	r15, r1
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	70 97       	sbiw	r30, 0x10	; 16
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2) {
		ledmatrix[0] = temp[i-16];
    1eb4:	80 81       	ld	r24, Z
    1eb6:	80 93 ad 2c 	sts	0x2CAD, r24
		ledmatrix[16] = temp[i];
    1eba:	f8 01       	movw	r30, r16
    1ebc:	80 81       	ld	r24, Z
    1ebe:	80 93 bd 2c 	sts	0x2CBD, r24
		ht1632c_shift_right();
    1ec2:	59 df       	rcall	.-334    	; 0x1d76 <ht1632c_shift_right>
    1ec4:	02 50       	subi	r16, 0x02	; 2
    1ec6:	11 09       	sbc	r17, r1
	memcpy(temp,ledmatrix,32);
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2) {
    1ec8:	0e 15       	cp	r16, r14
    1eca:	1f 05       	cpc	r17, r15
    1ecc:	89 f7       	brne	.-30     	; 0x1eb0 <ht1632c_slide_in_from_left+0x4e>
    1ece:	8e 01       	movw	r16, r28
    1ed0:	01 5e       	subi	r16, 0xE1	; 225
    1ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed4:	6e e1       	ldi	r22, 0x1E	; 30
    1ed6:	f6 2e       	mov	r15, r22
    1ed8:	f8 01       	movw	r30, r16
    1eda:	70 97       	sbiw	r30, 0x10	; 16
		ledmatrix[16] = temp[i];
		ht1632c_shift_right();
	}
	
	for (i = 30; i >= 16; i -= 2) {
		ledmatrix[0] = temp[i-16];
    1edc:	80 81       	ld	r24, Z
    1ede:	80 93 ad 2c 	sts	0x2CAD, r24
		ledmatrix[16] = temp[i];
    1ee2:	d8 01       	movw	r26, r16
    1ee4:	8c 91       	ld	r24, X
    1ee6:	80 93 bd 2c 	sts	0x2CBD, r24
		if (i == 16) {
    1eea:	b0 e1       	ldi	r27, 0x10	; 16
    1eec:	fb 12       	cpse	r15, r27
    1eee:	03 c0       	rjmp	.+6      	; 0x1ef6 <ht1632c_slide_in_from_left+0x94>
			display_refresh_screen();
    1ef0:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
    1ef4:	01 c0       	rjmp	.+2      	; 0x1ef8 <ht1632c_slide_in_from_left+0x96>
		} else {
			ht1632c_shift_right();
    1ef6:	3f df       	rcall	.-386    	; 0x1d76 <ht1632c_shift_right>
    1ef8:	fa 94       	dec	r15
    1efa:	fa 94       	dec	r15
    1efc:	02 50       	subi	r16, 0x02	; 2
    1efe:	11 09       	sbc	r17, r1
		ledmatrix[0] = temp[i-16];
		ledmatrix[16] = temp[i];
		ht1632c_shift_right();
	}
	
	for (i = 30; i >= 16; i -= 2) {
    1f00:	ee e0       	ldi	r30, 0x0E	; 14
    1f02:	fe 12       	cpse	r15, r30
    1f04:	e9 cf       	rjmp	.-46     	; 0x1ed8 <ht1632c_slide_in_from_left+0x76>
			display_refresh_screen();
		} else {
			ht1632c_shift_right();
		}
	}
}
    1f06:	a0 96       	adiw	r28, 0x20	; 32
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	df 91       	pop	r29
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	08 95       	ret

00001f1a <ht1632c_slide_in_from_right>:

void ht1632c_slide_in_from_right(void) 
{
    1f1a:	ef 92       	push	r14
    1f1c:	ff 92       	push	r15
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	a0 97       	sbiw	r28, 0x20	; 32
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    1f30:	80 e2       	ldi	r24, 0x20	; 32
    1f32:	de 01       	movw	r26, r28
    1f34:	11 96       	adiw	r26, 0x01	; 1
    1f36:	fd 01       	movw	r30, r26
    1f38:	98 2f       	mov	r25, r24
    1f3a:	11 92       	st	Z+, r1
    1f3c:	9a 95       	dec	r25
    1f3e:	e9 f7       	brne	.-6      	; 0x1f3a <ht1632c_slide_in_from_right+0x20>
	memcpy(temp,ledmatrix,32);
    1f40:	ed ea       	ldi	r30, 0xAD	; 173
    1f42:	fc e2       	ldi	r31, 0x2C	; 44
    1f44:	98 2f       	mov	r25, r24
    1f46:	01 90       	ld	r0, Z+
    1f48:	0d 92       	st	X+, r0
    1f4a:	9a 95       	dec	r25
    1f4c:	e1 f7       	brne	.-8      	; 0x1f46 <ht1632c_slide_in_from_right+0x2c>
	memset(ledmatrix,0,32);
    1f4e:	ed ea       	ldi	r30, 0xAD	; 173
    1f50:	fc e2       	ldi	r31, 0x2C	; 44
    1f52:	df 01       	movw	r26, r30
    1f54:	1d 92       	st	X+, r1
    1f56:	8a 95       	dec	r24
    1f58:	e9 f7       	brne	.-6      	; 0x1f54 <ht1632c_slide_in_from_right+0x3a>
    1f5a:	8e 01       	movw	r16, r28
    1f5c:	0f 5e       	subi	r16, 0xEF	; 239
    1f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f60:	7e 01       	movw	r14, r28
    1f62:	b1 e2       	ldi	r27, 0x21	; 33
    1f64:	eb 0e       	add	r14, r27
    1f66:	f1 1c       	adc	r15, r1
    1f68:	f8 01       	movw	r30, r16
    1f6a:	70 97       	sbiw	r30, 0x10	; 16
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
	{
		ledmatrix[15] = temp[i];
    1f6c:	80 81       	ld	r24, Z
    1f6e:	80 93 bc 2c 	sts	0x2CBC, r24
		ledmatrix[31] = temp[i+16];
    1f72:	f8 01       	movw	r30, r16
    1f74:	80 81       	ld	r24, Z
    1f76:	80 93 cc 2c 	sts	0x2CCC, r24
		ht1632c_shift_left();
    1f7a:	c3 de       	rcall	.-634    	; 0x1d02 <ht1632c_shift_left>
    1f7c:	0e 5f       	subi	r16, 0xFE	; 254
    1f7e:	1f 4f       	sbci	r17, 0xFF	; 255
	memcpy(temp,ledmatrix,32);
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
    1f80:	0e 15       	cp	r16, r14
    1f82:	1f 05       	cpc	r17, r15
    1f84:	89 f7       	brne	.-30     	; 0x1f68 <ht1632c_slide_in_from_right+0x4e>
    1f86:	8e 01       	movw	r16, r28
    1f88:	0e 5e       	subi	r16, 0xEE	; 238
    1f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8c:	ff 24       	eor	r15, r15
    1f8e:	f3 94       	inc	r15
    1f90:	f8 01       	movw	r30, r16
    1f92:	70 97       	sbiw	r30, 0x10	; 16
		ht1632c_shift_left();
	}
	
	for (i = 1; i <= 15; i += 2)
	{
		ledmatrix[15] = temp[i];
    1f94:	80 81       	ld	r24, Z
    1f96:	80 93 bc 2c 	sts	0x2CBC, r24
		ledmatrix[31] = temp[i+16];
    1f9a:	d8 01       	movw	r26, r16
    1f9c:	8c 91       	ld	r24, X
    1f9e:	80 93 cc 2c 	sts	0x2CCC, r24
	
		if (i == 15) {
    1fa2:	bf e0       	ldi	r27, 0x0F	; 15
    1fa4:	fb 12       	cpse	r15, r27
    1fa6:	03 c0       	rjmp	.+6      	; 0x1fae <ht1632c_slide_in_from_right+0x94>
			display_refresh_screen();
    1fa8:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
    1fac:	01 c0       	rjmp	.+2      	; 0x1fb0 <ht1632c_slide_in_from_right+0x96>
		} else {
			ht1632c_shift_left();
    1fae:	a9 de       	rcall	.-686    	; 0x1d02 <ht1632c_shift_left>
    1fb0:	f3 94       	inc	r15
    1fb2:	f3 94       	inc	r15
    1fb4:	0e 5f       	subi	r16, 0xFE	; 254
    1fb6:	1f 4f       	sbci	r17, 0xFF	; 255
		ledmatrix[15] = temp[i];
		ledmatrix[31] = temp[i+16];
		ht1632c_shift_left();
	}
	
	for (i = 1; i <= 15; i += 2)
    1fb8:	e1 e1       	ldi	r30, 0x11	; 17
    1fba:	fe 12       	cpse	r15, r30
    1fbc:	e9 cf       	rjmp	.-46     	; 0x1f90 <ht1632c_slide_in_from_right+0x76>
			display_refresh_screen();
		} else {
			ht1632c_shift_left();
		}
	}
}
    1fbe:	a0 96       	adiw	r28, 0x20	; 32
    1fc0:	cd bf       	out	0x3d, r28	; 61
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	1f 91       	pop	r17
    1fca:	0f 91       	pop	r16
    1fcc:	ff 90       	pop	r15
    1fce:	ef 90       	pop	r14
    1fd0:	08 95       	ret

00001fd2 <ht1632c_slide_in_from_bottom>:

void ht1632c_slide_in_from_bottom(void) 
{
    1fd2:	4f 92       	push	r4
    1fd4:	5f 92       	push	r5
    1fd6:	7f 92       	push	r7
    1fd8:	8f 92       	push	r8
    1fda:	9f 92       	push	r9
    1fdc:	af 92       	push	r10
    1fde:	bf 92       	push	r11
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	a0 97       	sbiw	r28, 0x20	; 32
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    1ffa:	80 e2       	ldi	r24, 0x20	; 32
    1ffc:	de 01       	movw	r26, r28
    1ffe:	11 96       	adiw	r26, 0x01	; 1
    2000:	fd 01       	movw	r30, r26
    2002:	98 2f       	mov	r25, r24
    2004:	11 92       	st	Z+, r1
    2006:	9a 95       	dec	r25
    2008:	e9 f7       	brne	.-6      	; 0x2004 <ht1632c_slide_in_from_bottom+0x32>
	memcpy(temp,ledmatrix,32);
    200a:	ed ea       	ldi	r30, 0xAD	; 173
    200c:	fc e2       	ldi	r31, 0x2C	; 44
    200e:	98 2f       	mov	r25, r24
    2010:	01 90       	ld	r0, Z+
    2012:	0d 92       	st	X+, r0
    2014:	9a 95       	dec	r25
    2016:	e1 f7       	brne	.-8      	; 0x2010 <ht1632c_slide_in_from_bottom+0x3e>
	memset(ledmatrix,0,32);
    2018:	ed ea       	ldi	r30, 0xAD	; 173
    201a:	fc e2       	ldi	r31, 0x2C	; 44
    201c:	df 01       	movw	r26, r30
    201e:	1d 92       	st	X+, r1
    2020:	8a 95       	dec	r24
    2022:	e9 f7       	brne	.-6      	; 0x201e <ht1632c_slide_in_from_bottom+0x4c>
    2024:	00 e0       	ldi	r16, 0x00	; 0
    2026:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
			if (row < 8) {
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
    2028:	70 e8       	ldi	r23, 0x80	; 128
    202a:	e7 2e       	mov	r14, r23
    202c:	f1 2c       	mov	r15, r1
    202e:	ef e0       	ldi	r30, 0x0F	; 15
    2030:	ae 2e       	mov	r10, r30
    2032:	b1 2c       	mov	r11, r1
    2034:	f7 e0       	ldi	r31, 0x07	; 7
    2036:	cf 2e       	mov	r12, r31
    2038:	d1 2c       	mov	r13, r1
    203a:	a7 01       	movw	r20, r14
    203c:	00 2e       	mov	r0, r16
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <ht1632c_slide_in_from_bottom+0x72>
    2040:	55 95       	asr	r21
    2042:	47 95       	ror	r20
    2044:	0a 94       	dec	r0
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <ht1632c_slide_in_from_bottom+0x6e>
    2048:	98 01       	movw	r18, r16
    204a:	28 50       	subi	r18, 0x08	; 8
    204c:	31 09       	sbc	r19, r1
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
    204e:	d7 01       	movw	r26, r14
    2050:	02 c0       	rjmp	.+4      	; 0x2056 <ht1632c_slide_in_from_bottom+0x84>
    2052:	b5 95       	asr	r27
    2054:	a7 95       	ror	r26
    2056:	2a 95       	dec	r18
    2058:	e2 f7       	brpl	.-8      	; 0x2052 <ht1632c_slide_in_from_bottom+0x80>
    205a:	9d 01       	movw	r18, r26
    205c:	ed eb       	ldi	r30, 0xBD	; 189
    205e:	fc e2       	ldi	r31, 0x2C	; 44
    2060:	ce 01       	movw	r24, r28
    2062:	41 96       	adiw	r24, 0x11	; 17
    2064:	2c 01       	movw	r4, r24
    2066:	70 2e       	mov	r7, r16
    2068:	b5 01       	movw	r22, r10
    206a:	60 1b       	sub	r22, r16
    206c:	71 0b       	sbc	r23, r17
    206e:	46 01       	movw	r8, r12
    2070:	80 1a       	sub	r8, r16
    2072:	91 0a       	sbc	r9, r17
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
			if (row < 8) {
    2074:	b7 e0       	ldi	r27, 0x07	; 7
    2076:	b7 15       	cp	r27, r7
    2078:	70 f0       	brcs	.+28     	; 0x2096 <ht1632c_slide_in_from_bottom+0xc4>
    207a:	c2 01       	movw	r24, r4
    207c:	40 97       	sbiw	r24, 0x10	; 16
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
    207e:	dc 01       	movw	r26, r24
    2080:	8c 91       	ld	r24, X
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	84 23       	and	r24, r20
    2086:	95 23       	and	r25, r21
    2088:	08 2c       	mov	r0, r8
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <ht1632c_slide_in_from_bottom+0xbe>
    208c:	95 95       	asr	r25
    208e:	87 95       	ror	r24
    2090:	0a 94       	dec	r0
    2092:	e2 f7       	brpl	.-8      	; 0x208c <ht1632c_slide_in_from_bottom+0xba>
    2094:	0b c0       	rjmp	.+22     	; 0x20ac <ht1632c_slide_in_from_bottom+0xda>
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
    2096:	d2 01       	movw	r26, r4
    2098:	8c 91       	ld	r24, X
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	82 23       	and	r24, r18
    209e:	93 23       	and	r25, r19
    20a0:	06 2e       	mov	r0, r22
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <ht1632c_slide_in_from_bottom+0xd6>
    20a4:	95 95       	asr	r25
    20a6:	87 95       	ror	r24
    20a8:	0a 94       	dec	r0
    20aa:	e2 f7       	brpl	.-8      	; 0x20a4 <ht1632c_slide_in_from_bottom+0xd2>
    20ac:	90 81       	ld	r25, Z
    20ae:	98 2b       	or	r25, r24
    20b0:	90 83       	st	Z, r25
    20b2:	31 96       	adiw	r30, 0x01	; 1
    20b4:	bf ef       	ldi	r27, 0xFF	; 255
    20b6:	4b 1a       	sub	r4, r27
    20b8:	5b 0a       	sbc	r5, r27
	
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
    20ba:	8c e2       	ldi	r24, 0x2C	; 44
    20bc:	ec 3c       	cpi	r30, 0xCC	; 204
    20be:	f8 07       	cpc	r31, r24
    20c0:	c9 f6       	brne	.-78     	; 0x2074 <ht1632c_slide_in_from_bottom+0xa2>
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
			}
		}
		if (row < 15) {
    20c2:	9f e0       	ldi	r25, 0x0F	; 15
    20c4:	79 16       	cp	r7, r25
    20c6:	11 f0       	breq	.+4      	; 0x20cc <ht1632c_slide_in_from_bottom+0xfa>
			ht1632c_shift_up();
    20c8:	90 de       	rcall	.-736    	; 0x1dea <ht1632c_shift_up>
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <ht1632c_slide_in_from_bottom+0xfe>
			} else {
			display_refresh_screen();
    20cc:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
    20d0:	0f 5f       	subi	r16, 0xFF	; 255
    20d2:	1f 4f       	sbci	r17, 0xFF	; 255
	memset(ledmatrix,0,32);
	
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
    20d4:	00 31       	cpi	r16, 0x10	; 16
    20d6:	11 05       	cpc	r17, r1
    20d8:	09 f0       	breq	.+2      	; 0x20dc <ht1632c_slide_in_from_bottom+0x10a>
    20da:	af cf       	rjmp	.-162    	; 0x203a <ht1632c_slide_in_from_bottom+0x68>
			ht1632c_shift_up();
			} else {
			display_refresh_screen();
		}
	}
}
    20dc:	a0 96       	adiw	r28, 0x20	; 32
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	ff 90       	pop	r15
    20ec:	ef 90       	pop	r14
    20ee:	df 90       	pop	r13
    20f0:	cf 90       	pop	r12
    20f2:	bf 90       	pop	r11
    20f4:	af 90       	pop	r10
    20f6:	9f 90       	pop	r9
    20f8:	8f 90       	pop	r8
    20fa:	7f 90       	pop	r7
    20fc:	5f 90       	pop	r5
    20fe:	4f 90       	pop	r4
    2100:	08 95       	ret

00002102 <ht1632c_slide_in_from_top>:

void ht1632c_slide_in_from_top(void) 
{
    2102:	6f 92       	push	r6
    2104:	7f 92       	push	r7
    2106:	8f 92       	push	r8
    2108:	9f 92       	push	r9
    210a:	af 92       	push	r10
    210c:	bf 92       	push	r11
    210e:	cf 92       	push	r12
    2110:	df 92       	push	r13
    2112:	ef 92       	push	r14
    2114:	ff 92       	push	r15
    2116:	0f 93       	push	r16
    2118:	1f 93       	push	r17
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	a0 97       	sbiw	r28, 0x20	; 32
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    2128:	80 e2       	ldi	r24, 0x20	; 32
    212a:	de 01       	movw	r26, r28
    212c:	11 96       	adiw	r26, 0x01	; 1
    212e:	fd 01       	movw	r30, r26
    2130:	98 2f       	mov	r25, r24
    2132:	11 92       	st	Z+, r1
    2134:	9a 95       	dec	r25
    2136:	e9 f7       	brne	.-6      	; 0x2132 <ht1632c_slide_in_from_top+0x30>
	memcpy(temp,ledmatrix,32);
    2138:	ed ea       	ldi	r30, 0xAD	; 173
    213a:	fc e2       	ldi	r31, 0x2C	; 44
    213c:	98 2f       	mov	r25, r24
    213e:	01 90       	ld	r0, Z+
    2140:	0d 92       	st	X+, r0
    2142:	9a 95       	dec	r25
    2144:	e1 f7       	brne	.-8      	; 0x213e <ht1632c_slide_in_from_top+0x3c>
	memset(ledmatrix,0,32);
    2146:	ed ea       	ldi	r30, 0xAD	; 173
    2148:	fc e2       	ldi	r31, 0x2C	; 44
    214a:	df 01       	movw	r26, r30
    214c:	1d 92       	st	X+, r1
    214e:	8a 95       	dec	r24
    2150:	e9 f7       	brne	.-6      	; 0x214c <ht1632c_slide_in_from_top+0x4a>
    2152:	0f e0       	ldi	r16, 0x0F	; 15
    2154:	10 e0       	ldi	r17, 0x00	; 0
    2156:	af e0       	ldi	r26, 0x0F	; 15
    2158:	aa 2e       	mov	r10, r26
    215a:	b1 2c       	mov	r11, r1
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
			if (row > 7) {
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
    215c:	ee 24       	eor	r14, r14
    215e:	e3 94       	inc	r14
    2160:	f1 2c       	mov	r15, r1
    2162:	87 e0       	ldi	r24, 0x07	; 7
    2164:	c8 2e       	mov	r12, r24
    2166:	d1 2c       	mov	r13, r1
    2168:	a5 01       	movw	r20, r10
    216a:	40 1b       	sub	r20, r16
    216c:	51 0b       	sbc	r21, r17
    216e:	d7 01       	movw	r26, r14
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <ht1632c_slide_in_from_top+0x74>
    2172:	aa 0f       	add	r26, r26
    2174:	bb 1f       	adc	r27, r27
    2176:	4a 95       	dec	r20
    2178:	e2 f7       	brpl	.-8      	; 0x2172 <ht1632c_slide_in_from_top+0x70>
    217a:	ad 01       	movw	r20, r26
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
    217c:	90 2e       	mov	r9, r16
    217e:	96 01       	movw	r18, r12
    2180:	20 1b       	sub	r18, r16
    2182:	31 0b       	sbc	r19, r17
    2184:	f7 01       	movw	r30, r14
    2186:	02 c0       	rjmp	.+4      	; 0x218c <ht1632c_slide_in_from_top+0x8a>
    2188:	ee 0f       	add	r30, r30
    218a:	ff 1f       	adc	r31, r31
    218c:	2a 95       	dec	r18
    218e:	e2 f7       	brpl	.-8      	; 0x2188 <ht1632c_slide_in_from_top+0x86>
    2190:	9f 01       	movw	r18, r30
    2192:	ed ea       	ldi	r30, 0xAD	; 173
    2194:	fc e2       	ldi	r31, 0x2C	; 44
    2196:	ce 01       	movw	r24, r28
    2198:	41 96       	adiw	r24, 0x11	; 17
    219a:	3c 01       	movw	r6, r24
    219c:	80 2e       	mov	r8, r16
    219e:	b8 01       	movw	r22, r16
    21a0:	68 50       	subi	r22, 0x08	; 8
    21a2:	71 09       	sbc	r23, r1
	int8_t col;
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
			if (row > 7) {
    21a4:	b7 e0       	ldi	r27, 0x07	; 7
    21a6:	b8 15       	cp	r27, r8
    21a8:	5c f4       	brge	.+22     	; 0x21c0 <ht1632c_slide_in_from_top+0xbe>
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
    21aa:	d3 01       	movw	r26, r6
    21ac:	8c 91       	ld	r24, X
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	84 23       	and	r24, r20
    21b2:	95 23       	and	r25, r21
    21b4:	06 2e       	mov	r0, r22
    21b6:	01 c0       	rjmp	.+2      	; 0x21ba <ht1632c_slide_in_from_top+0xb8>
    21b8:	88 0f       	add	r24, r24
    21ba:	0a 94       	dec	r0
    21bc:	ea f7       	brpl	.-6      	; 0x21b8 <ht1632c_slide_in_from_top+0xb6>
    21be:	0c c0       	rjmp	.+24     	; 0x21d8 <ht1632c_slide_in_from_top+0xd6>
    21c0:	c3 01       	movw	r24, r6
    21c2:	40 97       	sbiw	r24, 0x10	; 16
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
    21c4:	dc 01       	movw	r26, r24
    21c6:	8c 91       	ld	r24, X
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	82 23       	and	r24, r18
    21cc:	93 23       	and	r25, r19
    21ce:	09 2c       	mov	r0, r9
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <ht1632c_slide_in_from_top+0xd2>
    21d2:	88 0f       	add	r24, r24
    21d4:	0a 94       	dec	r0
    21d6:	ea f7       	brpl	.-6      	; 0x21d2 <ht1632c_slide_in_from_top+0xd0>
    21d8:	90 81       	ld	r25, Z
    21da:	98 2b       	or	r25, r24
    21dc:	90 83       	st	Z, r25
    21de:	31 96       	adiw	r30, 0x01	; 1
    21e0:	bf ef       	ldi	r27, 0xFF	; 255
    21e2:	6b 1a       	sub	r6, r27
    21e4:	7b 0a       	sbc	r7, r27
	
	int8_t col;
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
    21e6:	8c e2       	ldi	r24, 0x2C	; 44
    21e8:	ec 3b       	cpi	r30, 0xBC	; 188
    21ea:	f8 07       	cpc	r31, r24
    21ec:	d9 f6       	brne	.-74     	; 0x21a4 <ht1632c_slide_in_from_top+0xa2>
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
			}
		}
		if (row > 0) {
    21ee:	88 20       	and	r8, r8
    21f0:	11 f0       	breq	.+4      	; 0x21f6 <ht1632c_slide_in_from_top+0xf4>
			ht1632c_shift_down();
    21f2:	19 de       	rcall	.-974    	; 0x1e26 <ht1632c_shift_down>
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <ht1632c_slide_in_from_top+0xf8>
		} else {
			display_refresh_screen();
    21f6:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
    21fa:	01 50       	subi	r16, 0x01	; 1
    21fc:	11 09       	sbc	r17, r1
    21fe:	08 f0       	brcs	.+2      	; 0x2202 <ht1632c_slide_in_from_top+0x100>
    2200:	b3 cf       	rjmp	.-154    	; 0x2168 <ht1632c_slide_in_from_top+0x66>
		}
	}
}
    2202:	a0 96       	adiw	r28, 0x20	; 32
    2204:	cd bf       	out	0x3d, r28	; 61
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	1f 91       	pop	r17
    220e:	0f 91       	pop	r16
    2210:	ff 90       	pop	r15
    2212:	ef 90       	pop	r14
    2214:	df 90       	pop	r13
    2216:	cf 90       	pop	r12
    2218:	bf 90       	pop	r11
    221a:	af 90       	pop	r10
    221c:	9f 90       	pop	r9
    221e:	8f 90       	pop	r8
    2220:	7f 90       	pop	r7
    2222:	6f 90       	pop	r6
    2224:	08 95       	ret

00002226 <ht1632c_print_buffer>:

/*------------------------------PRINT FUNCTIONS------------------------------*/

void ht1632c_print_buffer(char *buffer, uint16_t length) 
{
    2226:	ef 92       	push	r14
    2228:	ff 92       	push	r15
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	8b 01       	movw	r16, r22
    2234:	ec 01       	movw	r28, r24
    2236:	7c 01       	movw	r14, r24
    2238:	e6 0e       	add	r14, r22
    223a:	f7 1e       	adc	r15, r23
	uint16_t i;
	
	//Shift buffer into visible area
	for (i = 0; i < (length); i++) {
    223c:	ce 15       	cp	r28, r14
    223e:	df 05       	cpc	r29, r15
    2240:	c1 f0       	breq	.+48     	; 0x2272 <ht1632c_print_buffer+0x4c>
		ht1632c_shift_left();
    2242:	5f dd       	rcall	.-1346   	; 0x1d02 <ht1632c_shift_left>
    2244:	fe 01       	movw	r30, r28
		ledmatrix[15] = buffer[i] >> 3;
    2246:	89 91       	ld	r24, Y+
    2248:	86 95       	lsr	r24
    224a:	86 95       	lsr	r24
    224c:	86 95       	lsr	r24
    224e:	80 93 bc 2c 	sts	0x2CBC, r24
		ledmatrix[31] = buffer[i] << 5;
    2252:	80 81       	ld	r24, Z
    2254:	82 95       	swap	r24
    2256:	88 0f       	add	r24, r24
    2258:	80 7e       	andi	r24, 0xE0	; 224
    225a:	80 93 cc 2c 	sts	0x2CCC, r24
    225e:	2f ef       	ldi	r18, 0xFF	; 255
    2260:	80 e7       	ldi	r24, 0x70	; 112
    2262:	92 e0       	ldi	r25, 0x02	; 2
    2264:	21 50       	subi	r18, 0x01	; 1
    2266:	80 40       	sbci	r24, 0x00	; 0
    2268:	90 40       	sbci	r25, 0x00	; 0
    226a:	e1 f7       	brne	.-8      	; 0x2264 <ht1632c_print_buffer+0x3e>
    226c:	00 c0       	rjmp	.+0      	; 0x226e <ht1632c_print_buffer+0x48>
    226e:	00 00       	nop
    2270:	e5 cf       	rjmp	.-54     	; 0x223c <ht1632c_print_buffer+0x16>
		_delay_ms(25);
	}
	
	//Shift buffer out of visible area
	if ((length/4) < 15) {
    2272:	0c 33       	cpi	r16, 0x3C	; 60
    2274:	11 05       	cpc	r17, r1
    2276:	38 f0       	brcs	.+14     	; 0x2286 <ht1632c_print_buffer+0x60>
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
			_delay_ms(25);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
    2278:	16 95       	lsr	r17
    227a:	07 95       	ror	r16
    227c:	16 95       	lsr	r17
    227e:	07 95       	ror	r16
    2280:	c0 e0       	ldi	r28, 0x00	; 0
    2282:	d0 e0       	ldi	r29, 0x00	; 0
    2284:	10 c0       	rjmp	.+32     	; 0x22a6 <ht1632c_print_buffer+0x80>
		ledmatrix[31] = buffer[i] << 5;
		_delay_ms(25);
	}
	
	//Shift buffer out of visible area
	if ((length/4) < 15) {
    2286:	ce e1       	ldi	r28, 0x1E	; 30
    2288:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
    228a:	3b dd       	rcall	.-1418   	; 0x1d02 <ht1632c_shift_left>
    228c:	2f ef       	ldi	r18, 0xFF	; 255
    228e:	80 e7       	ldi	r24, 0x70	; 112
    2290:	92 e0       	ldi	r25, 0x02	; 2
    2292:	21 50       	subi	r18, 0x01	; 1
    2294:	80 40       	sbci	r24, 0x00	; 0
    2296:	90 40       	sbci	r25, 0x00	; 0
    2298:	e1 f7       	brne	.-8      	; 0x2292 <ht1632c_print_buffer+0x6c>
    229a:	00 c0       	rjmp	.+0      	; 0x229c <ht1632c_print_buffer+0x76>
    229c:	00 00       	nop
    229e:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(25);
	}
	
	//Shift buffer out of visible area
	if ((length/4) < 15) {
		for (i = 0; i < 30; i++) {
    22a0:	20 97       	sbiw	r28, 0x00	; 0
    22a2:	99 f7       	brne	.-26     	; 0x228a <ht1632c_print_buffer+0x64>
    22a4:	0e c0       	rjmp	.+28     	; 0x22c2 <ht1632c_print_buffer+0x9c>
			ht1632c_shift_left();
			_delay_ms(25);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
			ht1632c_shift_left();
    22a6:	2d dd       	rcall	.-1446   	; 0x1d02 <ht1632c_shift_left>
    22a8:	2f ef       	ldi	r18, 0xFF	; 255
    22aa:	80 e7       	ldi	r24, 0x70	; 112
    22ac:	92 e0       	ldi	r25, 0x02	; 2
    22ae:	21 50       	subi	r18, 0x01	; 1
    22b0:	80 40       	sbci	r24, 0x00	; 0
    22b2:	90 40       	sbci	r25, 0x00	; 0
    22b4:	e1 f7       	brne	.-8      	; 0x22ae <ht1632c_print_buffer+0x88>
    22b6:	00 c0       	rjmp	.+0      	; 0x22b8 <ht1632c_print_buffer+0x92>
    22b8:	00 00       	nop
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
			_delay_ms(25);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
    22ba:	21 96       	adiw	r28, 0x01	; 1
    22bc:	c0 17       	cp	r28, r16
    22be:	d1 07       	cpc	r29, r17
    22c0:	91 f7       	brne	.-28     	; 0x22a6 <ht1632c_print_buffer+0x80>
			ht1632c_shift_left();
			_delay_ms(25);
		}
	}
    22c2:	df 91       	pop	r29
    22c4:	cf 91       	pop	r28
    22c6:	1f 91       	pop	r17
    22c8:	0f 91       	pop	r16
    22ca:	ff 90       	pop	r15
    22cc:	ef 90       	pop	r14
    22ce:	08 95       	ret

000022d0 <btn_setup>:
void btn_top_setup(void) 
{	
	PORTC.DIRCLR   = TOP_BUTTON;
	PORTC.PIN2CTRL |= PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
	PORTC.INT0MASK |= TOP_BUTTON;
	PORTC.INTCTRL  |= PORT_INT0LVL_HI_gc;
    22d0:	90 ee       	ldi	r25, 0xE0	; 224
    22d2:	90 93 02 06 	sts	0x0602, r25
    22d6:	91 e0       	ldi	r25, 0x01	; 1
    22d8:	90 93 22 06 	sts	0x0622, r25
    22dc:	90 91 15 06 	lds	r25, 0x0615
    22e0:	9a 61       	ori	r25, 0x1A	; 26
    22e2:	90 93 15 06 	sts	0x0615, r25
    22e6:	90 91 16 06 	lds	r25, 0x0616
    22ea:	9a 61       	ori	r25, 0x1A	; 26
    22ec:	90 93 16 06 	sts	0x0616, r25
    22f0:	90 91 17 06 	lds	r25, 0x0617
    22f4:	9a 61       	ori	r25, 0x1A	; 26
    22f6:	90 93 17 06 	sts	0x0617, r25
    22fa:	90 91 30 06 	lds	r25, 0x0630
    22fe:	9a 61       	ori	r25, 0x1A	; 26
    2300:	90 93 30 06 	sts	0x0630, r25
    2304:	88 23       	and	r24, r24
    2306:	99 f0       	breq	.+38     	; 0x232e <btn_setup+0x5e>
    2308:	80 91 0a 06 	lds	r24, 0x060A
    230c:	80 6e       	ori	r24, 0xE0	; 224
    230e:	80 93 0a 06 	sts	0x060A, r24
    2312:	80 91 2a 06 	lds	r24, 0x062A
    2316:	81 60       	ori	r24, 0x01	; 1
    2318:	80 93 2a 06 	sts	0x062A, r24
    231c:	80 91 09 06 	lds	r24, 0x0609
    2320:	83 60       	ori	r24, 0x03	; 3
    2322:	80 93 09 06 	sts	0x0609, r24
    2326:	80 91 29 06 	lds	r24, 0x0629
    232a:	83 60       	ori	r24, 0x03	; 3
    232c:	12 c0       	rjmp	.+36     	; 0x2352 <btn_setup+0x82>
    232e:	80 91 0a 06 	lds	r24, 0x060A
    2332:	8f 71       	andi	r24, 0x1F	; 31
    2334:	80 93 0a 06 	sts	0x060A, r24
    2338:	80 91 2a 06 	lds	r24, 0x062A
    233c:	8e 7f       	andi	r24, 0xFE	; 254
    233e:	80 93 2a 06 	sts	0x062A, r24
    2342:	80 91 09 06 	lds	r24, 0x0609
    2346:	8c 7f       	andi	r24, 0xFC	; 252
    2348:	80 93 09 06 	sts	0x0609, r24
    234c:	80 91 29 06 	lds	r24, 0x0629
    2350:	8c 7f       	andi	r24, 0xFC	; 252
    2352:	80 93 29 06 	sts	0x0629, r24
    2356:	08 95       	ret

00002358 <btn_si114x_enable_interrupt>:
    2358:	e0 e0       	ldi	r30, 0x00	; 0
    235a:	f6 e0       	ldi	r31, 0x06	; 6
    235c:	84 e0       	ldi	r24, 0x04	; 4
    235e:	82 83       	std	Z+2, r24	; 0x02
    2360:	82 89       	ldd	r24, Z+18	; 0x12
    2362:	82 60       	ori	r24, 0x02	; 2
    2364:	82 8b       	std	Z+18, r24	; 0x12
    2366:	83 85       	ldd	r24, Z+11	; 0x0b
    2368:	84 60       	ori	r24, 0x04	; 4
    236a:	83 87       	std	Z+11, r24	; 0x0b
    236c:	81 85       	ldd	r24, Z+9	; 0x09
    236e:	8c 60       	ori	r24, 0x0C	; 12
    2370:	81 87       	std	Z+9, r24	; 0x09
    2372:	08 95       	ret

00002374 <btn_disable_si114x_interrupt>:
    2374:	e0 e0       	ldi	r30, 0x00	; 0
    2376:	f6 e0       	ldi	r31, 0x06	; 6
    2378:	84 e0       	ldi	r24, 0x04	; 4
    237a:	82 83       	std	Z+2, r24	; 0x02
    237c:	82 89       	ldd	r24, Z+18	; 0x12
    237e:	8d 7f       	andi	r24, 0xFD	; 253
    2380:	82 8b       	std	Z+18, r24	; 0x12
    2382:	83 85       	ldd	r24, Z+11	; 0x0b
    2384:	8b 7f       	andi	r24, 0xFB	; 251
    2386:	83 87       	std	Z+11, r24	; 0x0b
    2388:	81 85       	ldd	r24, Z+9	; 0x09
    238a:	83 7f       	andi	r24, 0xF3	; 243
    238c:	81 87       	std	Z+9, r24	; 0x09
    238e:	08 95       	ret

00002390 <btn_check_press>:

button_t btn_check_press(void) 
{	
	button_t btn_mask = NO_BTN;
	
	if (!(PORTA.IN & BUTTON1)) {
    2390:	80 91 08 06 	lds	r24, 0x0608
    2394:	85 fb       	bst	r24, 5
    2396:	88 27       	eor	r24, r24
    2398:	80 f9       	bld	r24, 0
    239a:	91 e0       	ldi	r25, 0x01	; 1
    239c:	89 27       	eor	r24, r25
		btn_mask |= BTN1;
	}
	if (!(PORTA.IN & BUTTON2)) {
    239e:	90 91 08 06 	lds	r25, 0x0608
    23a2:	96 ff       	sbrs	r25, 6
		btn_mask |= BTN2;
    23a4:	82 60       	ori	r24, 0x02	; 2
	}
	if (!(PORTA.IN & BUTTON3)) {
    23a6:	90 91 08 06 	lds	r25, 0x0608
    23aa:	97 ff       	sbrs	r25, 7
		btn_mask |= BTN3;
    23ac:	83 e0       	ldi	r24, 0x03	; 3
	} 
	if (!(PORTB.IN & BUTTON4)) {
    23ae:	90 91 28 06 	lds	r25, 0x0628
    23b2:	90 ff       	sbrs	r25, 0
		btn_mask |= BTN4;
    23b4:	84 60       	ori	r24, 0x04	; 4
	}
	return btn_mask;
}
    23b6:	08 95       	ret

000023b8 <__vector_66>:

ISR(PORTA_INT0_vect) 
{
    23b8:	1f 92       	push	r1
    23ba:	0f 92       	push	r0
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	0f 92       	push	r0
    23c0:	11 24       	eor	r1, r1
    23c2:	0b b6       	in	r0, 0x3b	; 59
    23c4:	0f 92       	push	r0
    23c6:	2f 93       	push	r18
    23c8:	3f 93       	push	r19
    23ca:	4f 93       	push	r20
    23cc:	5f 93       	push	r21
    23ce:	6f 93       	push	r22
    23d0:	7f 93       	push	r23
    23d2:	8f 93       	push	r24
    23d4:	9f 93       	push	r25
    23d6:	af 93       	push	r26
    23d8:	bf 93       	push	r27
    23da:	ef 93       	push	r30
    23dc:	ff 93       	push	r31
	btn_status = btn_check_press();
    23de:	d8 df       	rcall	.-80     	; 0x2390 <btn_check_press>
    23e0:	80 93 aa 2c 	sts	0x2CAA, r24
#ifdef DEBUG_ON
	printf("DEBUG: BTN: %d \r\n",btn_status);
    23e4:	80 91 aa 2c 	lds	r24, 0x2CAA
    23e8:	1f 92       	push	r1
    23ea:	8f 93       	push	r24
    23ec:	8b e5       	ldi	r24, 0x5B	; 91
    23ee:	94 e2       	ldi	r25, 0x24	; 36
    23f0:	9f 93       	push	r25
    23f2:	8f 93       	push	r24
    23f4:	0e 94 13 56 	call	0xac26	; 0xac26 <printf>
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	0f 90       	pop	r0
#endif
}
    2400:	ff 91       	pop	r31
    2402:	ef 91       	pop	r30
    2404:	bf 91       	pop	r27
    2406:	af 91       	pop	r26
    2408:	9f 91       	pop	r25
    240a:	8f 91       	pop	r24
    240c:	7f 91       	pop	r23
    240e:	6f 91       	pop	r22
    2410:	5f 91       	pop	r21
    2412:	4f 91       	pop	r20
    2414:	3f 91       	pop	r19
    2416:	2f 91       	pop	r18
    2418:	0f 90       	pop	r0
    241a:	0b be       	out	0x3b, r0	; 59
    241c:	0f 90       	pop	r0
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	0f 90       	pop	r0
    2422:	1f 90       	pop	r1
    2424:	18 95       	reti

00002426 <__vector_34>:

ISR(PORTB_INT0_vect) 
{
    2426:	1f 92       	push	r1
    2428:	0f 92       	push	r0
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	0f 92       	push	r0
    242e:	11 24       	eor	r1, r1
    2430:	0b b6       	in	r0, 0x3b	; 59
    2432:	0f 92       	push	r0
    2434:	2f 93       	push	r18
    2436:	3f 93       	push	r19
    2438:	4f 93       	push	r20
    243a:	5f 93       	push	r21
    243c:	6f 93       	push	r22
    243e:	7f 93       	push	r23
    2440:	8f 93       	push	r24
    2442:	9f 93       	push	r25
    2444:	af 93       	push	r26
    2446:	bf 93       	push	r27
    2448:	ef 93       	push	r30
    244a:	ff 93       	push	r31
	btn_status = btn_check_press();
    244c:	a1 df       	rcall	.-190    	; 0x2390 <btn_check_press>
    244e:	80 93 aa 2c 	sts	0x2CAA, r24
#ifdef DEBUG_ON
	printf("DEBUG: BTN: %d \r\n",btn_status);
    2452:	80 91 aa 2c 	lds	r24, 0x2CAA
    2456:	1f 92       	push	r1
    2458:	8f 93       	push	r24
    245a:	8b e5       	ldi	r24, 0x5B	; 91
    245c:	94 e2       	ldi	r25, 0x24	; 36
    245e:	9f 93       	push	r25
    2460:	8f 93       	push	r24
    2462:	0e 94 13 56 	call	0xac26	; 0xac26 <printf>
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
#endif
}
    246e:	ff 91       	pop	r31
    2470:	ef 91       	pop	r30
    2472:	bf 91       	pop	r27
    2474:	af 91       	pop	r26
    2476:	9f 91       	pop	r25
    2478:	8f 91       	pop	r24
    247a:	7f 91       	pop	r23
    247c:	6f 91       	pop	r22
    247e:	5f 91       	pop	r21
    2480:	4f 91       	pop	r20
    2482:	3f 91       	pop	r19
    2484:	2f 91       	pop	r18
    2486:	0f 90       	pop	r0
    2488:	0b be       	out	0x3b, r0	; 59
    248a:	0f 90       	pop	r0
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	0f 90       	pop	r0
    2490:	1f 90       	pop	r1
    2492:	18 95       	reti

00002494 <__vector_67>:

ISR(PORTA_INT1_vect) 
{	
    2494:	1f 92       	push	r1
    2496:	0f 92       	push	r0
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	0f 92       	push	r0
    249c:	11 24       	eor	r1, r1
    249e:	0b b6       	in	r0, 0x3b	; 59
    24a0:	0f 92       	push	r0
    24a2:	ef 92       	push	r14
    24a4:	0f 93       	push	r16
    24a6:	1f 93       	push	r17
    24a8:	2f 93       	push	r18
    24aa:	3f 93       	push	r19
    24ac:	4f 93       	push	r20
    24ae:	5f 93       	push	r21
    24b0:	6f 93       	push	r22
    24b2:	7f 93       	push	r23
    24b4:	8f 93       	push	r24
    24b6:	9f 93       	push	r25
    24b8:	af 93       	push	r26
    24ba:	bf 93       	push	r27
    24bc:	ef 93       	push	r30
    24be:	ff 93       	push	r31
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <__vector_67+0x32>
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
	//twi_on();
	uint8_t data[2];
	twi_read_packet(&TWIC,SI114X_ADDR,50,REG_IRQ_STATUS,data,1);
    24ca:	ee 24       	eor	r14, r14
    24cc:	e3 94       	inc	r14
    24ce:	8e 01       	movw	r16, r28
    24d0:	0f 5f       	subi	r16, 0xFF	; 255
    24d2:	1f 4f       	sbci	r17, 0xFF	; 255
    24d4:	21 e2       	ldi	r18, 0x21	; 33
    24d6:	42 e3       	ldi	r20, 0x32	; 50
    24d8:	50 e0       	ldi	r21, 0x00	; 0
    24da:	6a e5       	ldi	r22, 0x5A	; 90
    24dc:	80 e8       	ldi	r24, 0x80	; 128
    24de:	94 e0       	ldi	r25, 0x04	; 4
    24e0:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <twi_read_packet>
	si114x_status = data[0];
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	80 93 ac 2c 	sts	0x2CAC, r24
#ifdef DEBUG_ON
	puts("DEBUG: Interrupt from Si114x! \n");
    24ea:	8d e6       	ldi	r24, 0x6D	; 109
    24ec:	94 e2       	ldi	r25, 0x24	; 36
    24ee:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
#endif
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	ff 91       	pop	r31
    24fc:	ef 91       	pop	r30
    24fe:	bf 91       	pop	r27
    2500:	af 91       	pop	r26
    2502:	9f 91       	pop	r25
    2504:	8f 91       	pop	r24
    2506:	7f 91       	pop	r23
    2508:	6f 91       	pop	r22
    250a:	5f 91       	pop	r21
    250c:	4f 91       	pop	r20
    250e:	3f 91       	pop	r19
    2510:	2f 91       	pop	r18
    2512:	1f 91       	pop	r17
    2514:	0f 91       	pop	r16
    2516:	ef 90       	pop	r14
    2518:	0f 90       	pop	r0
    251a:	0b be       	out	0x3b, r0	; 59
    251c:	0f 90       	pop	r0
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	0f 90       	pop	r0
    2522:	1f 90       	pop	r1
    2524:	18 95       	reti

00002526 <lowpower_setup>:

#include "power.h"

void lowpower_setup(void) 
{
	DISABLE_GEN();
    2526:	e0 e7       	ldi	r30, 0x70	; 112
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	8b 61       	ori	r24, 0x1B	; 27
    252e:	80 83       	st	Z, r24
	DISABLE_TC();
    2530:	83 81       	ldd	r24, Z+3	; 0x03
    2532:	87 60       	ori	r24, 0x07	; 7
    2534:	83 83       	std	Z+3, r24	; 0x03
    2536:	84 81       	ldd	r24, Z+4	; 0x04
    2538:	87 60       	ori	r24, 0x07	; 7
    253a:	84 83       	std	Z+4, r24	; 0x04
    253c:	85 81       	ldd	r24, Z+5	; 0x05
    253e:	85 60       	ori	r24, 0x05	; 5
    2540:	85 83       	std	Z+5, r24	; 0x05
	DISABLE_COM();
    2542:	83 81       	ldd	r24, Z+3	; 0x03
    2544:	88 67       	ori	r24, 0x78	; 120
    2546:	83 83       	std	Z+3, r24	; 0x03
    2548:	84 81       	ldd	r24, Z+4	; 0x04
    254a:	88 63       	ori	r24, 0x38	; 56
    254c:	84 83       	std	Z+4, r24	; 0x04
    254e:	85 81       	ldd	r24, Z+5	; 0x05
    2550:	80 65       	ori	r24, 0x50	; 80
    2552:	85 83       	std	Z+5, r24	; 0x05
	DISABLE_ANLG();
    2554:	81 81       	ldd	r24, Z+1	; 0x01
    2556:	83 60       	ori	r24, 0x03	; 3
    2558:	81 83       	std	Z+1, r24	; 0x01
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	84 60       	ori	r24, 0x04	; 4
    255e:	82 83       	std	Z+2, r24	; 0x02
    2560:	08 95       	ret

00002562 <rtc_setup>:
}

void rtc_show_minutes(void) 
{
	rtc_update_display(BOTTOM_HALF,env.time.minutes);
	disp_time = false;
    2562:	80 91 70 00 	lds	r24, 0x0070
    2566:	8f 7b       	andi	r24, 0xBF	; 191
    2568:	80 93 70 00 	sts	0x0070, r24
    256c:	82 e0       	ldi	r24, 0x02	; 2
    256e:	80 93 ab 2c 	sts	0x2CAB, r24
    2572:	88 ed       	ldi	r24, 0xD8	; 216
    2574:	84 bf       	out	0x34, r24	; 52
    2576:	8b e0       	ldi	r24, 0x0B	; 11
    2578:	80 93 43 00 	sts	0x0043, r24
    257c:	80 91 01 04 	lds	r24, 0x0401
    2580:	80 fd       	sbrc	r24, 0
    2582:	fc cf       	rjmp	.-8      	; 0x257c <rtc_setup+0x1a>
    2584:	80 e8       	ldi	r24, 0x80	; 128
    2586:	97 e0       	ldi	r25, 0x07	; 7
    2588:	80 93 0a 04 	sts	0x040A, r24
    258c:	90 93 0b 04 	sts	0x040B, r25
    2590:	82 e0       	ldi	r24, 0x02	; 2
    2592:	80 93 02 04 	sts	0x0402, r24
    2596:	10 92 08 04 	sts	0x0408, r1
    259a:	10 92 09 04 	sts	0x0409, r1
    259e:	10 92 0c 04 	sts	0x040C, r1
    25a2:	10 92 0d 04 	sts	0x040D, r1
    25a6:	87 e0       	ldi	r24, 0x07	; 7
    25a8:	80 93 00 04 	sts	0x0400, r24
    25ac:	08 95       	ret

000025ae <rtc_update_seconds>:
    25ae:	8c 33       	cpi	r24, 0x3C	; 60
    25b0:	91 05       	cpc	r25, r1
    25b2:	30 f4       	brcc	.+12     	; 0x25c0 <rtc_update_seconds+0x12>
    25b4:	25 e0       	ldi	r18, 0x05	; 5
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	2a 95       	dec	r18
    25bc:	e1 f7       	brne	.-8      	; 0x25b6 <rtc_update_seconds+0x8>
    25be:	02 c0       	rjmp	.+4      	; 0x25c4 <rtc_update_seconds+0x16>
    25c0:	80 e8       	ldi	r24, 0x80	; 128
    25c2:	97 e0       	ldi	r25, 0x07	; 7
    25c4:	80 93 08 04 	sts	0x0408, r24
    25c8:	90 93 09 04 	sts	0x0409, r25
    25cc:	08 95       	ret

000025ce <rtc_disable_time_render>:
    25ce:	10 92 07 20 	sts	0x2007, r1
    25d2:	08 95       	ret

000025d4 <rtc_update_display>:
    25d4:	6f 92       	push	r6
    25d6:	7f 92       	push	r7
    25d8:	8f 92       	push	r8
    25da:	9f 92       	push	r9
    25dc:	af 92       	push	r10
    25de:	bf 92       	push	r11
    25e0:	cf 92       	push	r12
    25e2:	df 92       	push	r13
    25e4:	ef 92       	push	r14
    25e6:	ff 92       	push	r15
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <rtc_update_display+0x1e>
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	78 2e       	mov	r7, r24
    25f8:	66 2e       	mov	r6, r22
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	8e 01       	movw	r16, r28
    2602:	0f 5f       	subi	r16, 0xFF	; 255
    2604:	1f 4f       	sbci	r17, 0xFF	; 255
    2606:	78 01       	movw	r14, r16
    2608:	3a e0       	ldi	r19, 0x0A	; 10
    260a:	83 2e       	mov	r8, r19
    260c:	91 2c       	mov	r9, r1
    260e:	a1 2c       	mov	r10, r1
    2610:	b1 2c       	mov	r11, r1
    2612:	67 01       	movw	r12, r14
    2614:	2f ef       	ldi	r18, 0xFF	; 255
    2616:	c2 1a       	sub	r12, r18
    2618:	d2 0a       	sbc	r13, r18
    261a:	a5 01       	movw	r20, r10
    261c:	94 01       	movw	r18, r8
    261e:	0e 94 e5 52 	call	0xa5ca	; 0xa5ca <__udivmodsi4>
    2622:	60 5d       	subi	r22, 0xD0	; 208
    2624:	f7 01       	movw	r30, r14
    2626:	60 83       	st	Z, r22
    2628:	b9 01       	movw	r22, r18
    262a:	ca 01       	movw	r24, r20
    262c:	61 15       	cp	r22, r1
    262e:	71 05       	cpc	r23, r1
    2630:	81 05       	cpc	r24, r1
    2632:	91 05       	cpc	r25, r1
    2634:	11 f0       	breq	.+4      	; 0x263a <rtc_update_display+0x66>
    2636:	76 01       	movw	r14, r12
    2638:	ec cf       	rjmp	.-40     	; 0x2612 <rtc_update_display+0x3e>
    263a:	c0 1a       	sub	r12, r16
    263c:	d1 0a       	sbc	r13, r17
    263e:	c6 01       	movw	r24, r12
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	d8 01       	movw	r26, r16
    2644:	ac 0d       	add	r26, r12
    2646:	bd 1d       	adc	r27, r13
    2648:	f8 01       	movw	r30, r16
    264a:	9f 01       	movw	r18, r30
    264c:	20 1b       	sub	r18, r16
    264e:	31 0b       	sbc	r19, r17
    2650:	28 17       	cp	r18, r24
    2652:	39 07       	cpc	r19, r25
    2654:	34 f4       	brge	.+12     	; 0x2662 <rtc_update_display+0x8e>
    2656:	20 81       	ld	r18, Z
    2658:	3e 91       	ld	r19, -X
    265a:	31 93       	st	Z+, r19
    265c:	2c 93       	st	X, r18
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f4 cf       	rjmp	.-24     	; 0x264a <rtc_update_display+0x76>
    2662:	f9 e0       	ldi	r31, 0x09	; 9
    2664:	f6 15       	cp	r31, r6
    2666:	20 f0       	brcs	.+8      	; 0x2670 <rtc_update_display+0x9c>
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	90 e3       	ldi	r25, 0x30	; 48
    266c:	99 83       	std	Y+1, r25	; 0x01
    266e:	8a 83       	std	Y+2, r24	; 0x02
    2670:	00 e0       	ldi	r16, 0x00	; 0
    2672:	71 10       	cpse	r7, r1
    2674:	04 c0       	rjmp	.+8      	; 0x267e <rtc_update_display+0xaa>
    2676:	28 e0       	ldi	r18, 0x08	; 8
    2678:	40 e1       	ldi	r20, 0x10	; 16
    267a:	60 e0       	ldi	r22, 0x00	; 0
    267c:	03 c0       	rjmp	.+6      	; 0x2684 <rtc_update_display+0xb0>
    267e:	29 e0       	ldi	r18, 0x09	; 9
    2680:	40 e1       	ldi	r20, 0x10	; 16
    2682:	67 e0       	ldi	r22, 0x07	; 7
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	0e 94 9b 21 	call	0x4336	; 0x4336 <display_draw_filled_rect>
    268a:	e7 2c       	mov	r14, r7
    268c:	f1 2c       	mov	r15, r1
    268e:	01 e0       	ldi	r16, 0x01	; 1
    2690:	21 e0       	ldi	r18, 0x01	; 1
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	49 81       	ldd	r20, Y+1	; 0x01
    2696:	b7 01       	movw	r22, r14
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	0e 94 9e 22 	call	0x453c	; 0x453c <display_draw_char>
    26a0:	21 e0       	ldi	r18, 0x01	; 1
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	4a 81       	ldd	r20, Y+2	; 0x02
    26a6:	b7 01       	movw	r22, r14
    26a8:	89 e0       	ldi	r24, 0x09	; 9
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	0e 94 9e 22 	call	0x453c	; 0x453c <display_draw_char>
    26b0:	0f 90       	pop	r0
    26b2:	0f 90       	pop	r0
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	1f 91       	pop	r17
    26ba:	0f 91       	pop	r16
    26bc:	ff 90       	pop	r15
    26be:	ef 90       	pop	r14
    26c0:	df 90       	pop	r13
    26c2:	cf 90       	pop	r12
    26c4:	bf 90       	pop	r11
    26c6:	af 90       	pop	r10
    26c8:	9f 90       	pop	r9
    26ca:	8f 90       	pop	r8
    26cc:	7f 90       	pop	r7
    26ce:	6f 90       	pop	r6
    26d0:	08 95       	ret

000026d2 <rtc_enable_time_render>:
}

void rtc_enable_time_render(void) 
{
	env.menu_id = 0;
    26d2:	10 92 23 2b 	sts	0x2B23, r1
	rtc_update_display(BOTTOM_HALF,env.time.minutes);
    26d6:	60 91 c5 2b 	lds	r22, 0x2BC5
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	7b df       	rcall	.-266    	; 0x25d4 <rtc_update_display>
	rtc_update_display(TOP_HALF,env.time.hours);
    26de:	60 91 c6 2b 	lds	r22, 0x2BC6
    26e2:	89 e0       	ldi	r24, 0x09	; 9
    26e4:	77 df       	rcall	.-274    	; 0x25d4 <rtc_update_display>
	disp_time = true;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	80 93 07 20 	sts	0x2007, r24
    26ec:	08 95       	ret

000026ee <__vector_10>:
	display_draw_char(2,pos,buffer[0],1,1);
	display_draw_char(9,pos,buffer[1],1,1);
}

ISR(RTC_OVF_vect) 
{
    26ee:	1f 92       	push	r1
    26f0:	0f 92       	push	r0
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	0f 92       	push	r0
    26f6:	11 24       	eor	r1, r1
    26f8:	0b b6       	in	r0, 0x3b	; 59
    26fa:	0f 92       	push	r0
    26fc:	2f 93       	push	r18
    26fe:	3f 93       	push	r19
    2700:	4f 93       	push	r20
    2702:	5f 93       	push	r21
    2704:	6f 93       	push	r22
    2706:	7f 93       	push	r23
    2708:	8f 93       	push	r24
    270a:	9f 93       	push	r25
    270c:	af 93       	push	r26
    270e:	bf 93       	push	r27
    2710:	cf 93       	push	r28
    2712:	ef 93       	push	r30
    2714:	ff 93       	push	r31
	//Variable to check system-runtime
	env.runtime++;
    2716:	80 91 2e 2b 	lds	r24, 0x2B2E
    271a:	90 91 2f 2b 	lds	r25, 0x2B2F
    271e:	a0 91 30 2b 	lds	r26, 0x2B30
    2722:	b0 91 31 2b 	lds	r27, 0x2B31
    2726:	01 96       	adiw	r24, 0x01	; 1
    2728:	a1 1d       	adc	r26, r1
    272a:	b1 1d       	adc	r27, r1
    272c:	80 93 2e 2b 	sts	0x2B2E, r24
    2730:	90 93 2f 2b 	sts	0x2B2F, r25
    2734:	a0 93 30 2b 	sts	0x2B30, r26
    2738:	b0 93 31 2b 	sts	0x2B31, r27
	
	if (++env.time.minutes >= 60) {
    273c:	60 91 c5 2b 	lds	r22, 0x2BC5
    2740:	6f 5f       	subi	r22, 0xFF	; 255
    2742:	60 93 c5 2b 	sts	0x2BC5, r22
    2746:	6c 33       	cpi	r22, 0x3C	; 60
    2748:	08 f4       	brcc	.+2      	; 0x274c <__vector_10+0x5e>
    274a:	67 c0       	rjmp	.+206    	; 0x281a <__vector_10+0x12c>
		
		env.time.minutes = 0;
    274c:	10 92 c5 2b 	sts	0x2BC5, r1
		if (disp_time) {
    2750:	80 91 07 20 	lds	r24, 0x2007
    2754:	88 23       	and	r24, r24
    2756:	29 f0       	breq	.+10     	; 0x2762 <__vector_10+0x74>
			rtc_update_display(BOTTOM_HALF,env.time.minutes);
    2758:	60 e0       	ldi	r22, 0x00	; 0
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	3b df       	rcall	.-394    	; 0x25d4 <rtc_update_display>
			display_refresh_screen();
    275e:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
		}
		if (++env.time.hours >= 24) {
    2762:	60 91 c6 2b 	lds	r22, 0x2BC6
    2766:	6f 5f       	subi	r22, 0xFF	; 255
    2768:	60 93 c6 2b 	sts	0x2BC6, r22
    276c:	68 31       	cpi	r22, 0x18	; 24
    276e:	08 f4       	brcc	.+2      	; 0x2772 <__vector_10+0x84>
    2770:	49 c0       	rjmp	.+146    	; 0x2804 <__vector_10+0x116>
			if (env.time.weekday++ >= Sunday) {
    2772:	80 91 c8 2b 	lds	r24, 0x2BC8
    2776:	91 e0       	ldi	r25, 0x01	; 1
    2778:	98 0f       	add	r25, r24
    277a:	90 93 c8 2b 	sts	0x2BC8, r25
    277e:	87 30       	cpi	r24, 0x07	; 7
    2780:	68 f0       	brcs	.+26     	; 0x279c <__vector_10+0xae>
				env.time.weekday = Monday;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	80 93 c8 2b 	sts	0x2BC8, r24
				if (env.time.week++ >= 53) {
    2788:	90 91 c9 2b 	lds	r25, 0x2BC9
    278c:	21 e0       	ldi	r18, 0x01	; 1
    278e:	29 0f       	add	r18, r25
    2790:	20 93 c9 2b 	sts	0x2BC9, r18
    2794:	95 33       	cpi	r25, 0x35	; 53
    2796:	10 f0       	brcs	.+4      	; 0x279c <__vector_10+0xae>
					env.time.week = 1;
    2798:	80 93 c9 2b 	sts	0x2BC9, r24
				}
			}
			if (env.time.day++ >= time_get_days_in_month(env.time.month,env.time.year)) {
    279c:	c0 91 c7 2b 	lds	r28, 0x2BC7
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	8c 0f       	add	r24, r28
    27a4:	80 93 c7 2b 	sts	0x2BC7, r24
    27a8:	60 91 cb 2b 	lds	r22, 0x2BCB
    27ac:	70 91 cc 2b 	lds	r23, 0x2BCC
    27b0:	80 91 ca 2b 	lds	r24, 0x2BCA
    27b4:	0e 94 2b 4b 	call	0x9656	; 0x9656 <time_get_days_in_month>
    27b8:	c8 17       	cp	r28, r24
    27ba:	e0 f0       	brcs	.+56     	; 0x27f4 <__vector_10+0x106>
				env.time.day = 1;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	80 93 c7 2b 	sts	0x2BC7, r24
				if (env.time.month++ >= December) {
    27c2:	90 91 ca 2b 	lds	r25, 0x2BCA
    27c6:	21 e0       	ldi	r18, 0x01	; 1
    27c8:	29 0f       	add	r18, r25
    27ca:	20 93 ca 2b 	sts	0x2BCA, r18
    27ce:	9c 30       	cpi	r25, 0x0C	; 12
    27d0:	88 f0       	brcs	.+34     	; 0x27f4 <__vector_10+0x106>
					env.time.month = January;
    27d2:	80 93 ca 2b 	sts	0x2BCA, r24
					env.time.year++;
    27d6:	40 91 cb 2b 	lds	r20, 0x2BCB
    27da:	50 91 cc 2b 	lds	r21, 0x2BCC
    27de:	4f 5f       	subi	r20, 0xFF	; 255
    27e0:	5f 4f       	sbci	r21, 0xFF	; 255
    27e2:	40 93 cb 2b 	sts	0x2BCB, r20
    27e6:	50 93 cc 2b 	sts	0x2BCC, r21
					env.time.week = time_get_weeknumber(env.time.day,env.time.month,env.time.year);
    27ea:	61 e0       	ldi	r22, 0x01	; 1
    27ec:	0e 94 43 4b 	call	0x9686	; 0x9686 <time_get_weeknumber>
    27f0:	80 93 c9 2b 	sts	0x2BC9, r24
				}
			}
			env.time.hours = 0;
    27f4:	10 92 c6 2b 	sts	0x2BC6, r1
			if (disp_time) {
    27f8:	80 91 07 20 	lds	r24, 0x2007
    27fc:	88 23       	and	r24, r24
    27fe:	51 f0       	breq	.+20     	; 0x2814 <__vector_10+0x126>
				rtc_update_display(TOP_HALF,env.time.hours);
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	04 c0       	rjmp	.+8      	; 0x280c <__vector_10+0x11e>
				display_refresh_screen();
			}
		} else {
			if (disp_time) {
    2804:	80 91 07 20 	lds	r24, 0x2007
    2808:	88 23       	and	r24, r24
    280a:	21 f0       	breq	.+8      	; 0x2814 <__vector_10+0x126>
				rtc_update_display(TOP_HALF,env.time.hours);
    280c:	89 e0       	ldi	r24, 0x09	; 9
    280e:	e2 de       	rcall	.-572    	; 0x25d4 <rtc_update_display>
				display_refresh_screen();
    2810:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
			}
		}
		env.time.minutes = 0;
    2814:	10 92 c5 2b 	sts	0x2BC5, r1
    2818:	08 c0       	rjmp	.+16     	; 0x282a <__vector_10+0x13c>
	} else {
		if (disp_time) {
    281a:	80 91 07 20 	lds	r24, 0x2007
    281e:	88 23       	and	r24, r24
    2820:	21 f0       	breq	.+8      	; 0x282a <__vector_10+0x13c>
			rtc_update_display(BOTTOM_HALF,env.time.minutes);
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	d7 de       	rcall	.-594    	; 0x25d4 <rtc_update_display>
			display_refresh_screen();
    2826:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
		}
	}
	if (alarm_status == ALARM_ON) {
    282a:	80 91 ab 2c 	lds	r24, 0x2CAB
    282e:	81 30       	cpi	r24, 0x01	; 1
    2830:	71 f4       	brne	.+28     	; 0x284e <__vector_10+0x160>
		if (env.time.hours == env.alarm.hours) {
    2832:	90 91 c6 2b 	lds	r25, 0x2BC6
    2836:	80 91 c2 2b 	lds	r24, 0x2BC2
    283a:	98 13       	cpse	r25, r24
    283c:	08 c0       	rjmp	.+16     	; 0x284e <__vector_10+0x160>
			if (env.time.minutes == env.alarm.minutes)
    283e:	90 91 c5 2b 	lds	r25, 0x2BC5
    2842:	80 91 c1 2b 	lds	r24, 0x2BC1
    2846:	98 13       	cpse	r25, r24
    2848:	02 c0       	rjmp	.+4      	; 0x284e <__vector_10+0x160>
			{
				alarm_status = ALARM_TRIGGERED;
    284a:	10 92 ab 2c 	sts	0x2CAB, r1
			}
		}
	}
    284e:	ff 91       	pop	r31
    2850:	ef 91       	pop	r30
    2852:	cf 91       	pop	r28
    2854:	bf 91       	pop	r27
    2856:	af 91       	pop	r26
    2858:	9f 91       	pop	r25
    285a:	8f 91       	pop	r24
    285c:	7f 91       	pop	r23
    285e:	6f 91       	pop	r22
    2860:	5f 91       	pop	r21
    2862:	4f 91       	pop	r20
    2864:	3f 91       	pop	r19
    2866:	2f 91       	pop	r18
    2868:	0f 90       	pop	r0
    286a:	0b be       	out	0x3b, r0	; 59
    286c:	0f 90       	pop	r0
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	0f 90       	pop	r0
    2872:	1f 90       	pop	r1
    2874:	18 95       	reti

00002876 <_sendCmd>:
	u8 code ucoef[4] = { 0x7B, 0x6B, 0x01, 0x00 } ;
	
	// This will write 4 bytes starting with I2C address 0x13
	response = Si114xBlockWrite( si114x_handle, REG_UCOEF0, 4, &ucoef[0] );
	return response;
}
    2876:	ff 92       	push	r15
    2878:	0f 93       	push	r16
    287a:	1f 93       	push	r17
    287c:	cf 93       	push	r28
    287e:	df 93       	push	r29
    2880:	8c 01       	movw	r16, r24
    2882:	f6 2e       	mov	r15, r22
    2884:	60 e2       	ldi	r22, 0x20	; 32
    2886:	0d d6       	rcall	.+3098   	; 0x34a2 <Si114xReadFromRegister>
    2888:	ec 01       	movw	r28, r24
    288a:	97 fd       	sbrc	r25, 7
    288c:	21 c0       	rjmp	.+66     	; 0x28d0 <_sendCmd+0x5a>
    288e:	60 e3       	ldi	r22, 0x30	; 48
    2890:	c8 01       	movw	r24, r16
    2892:	07 d6       	rcall	.+3086   	; 0x34a2 <Si114xReadFromRegister>
    2894:	81 30       	cpi	r24, 0x01	; 1
    2896:	91 05       	cpc	r25, r1
    2898:	19 f0       	breq	.+6      	; 0x28a0 <_sendCmd+0x2a>
    289a:	97 ff       	sbrs	r25, 7
    289c:	f8 cf       	rjmp	.-16     	; 0x288e <_sendCmd+0x18>
    289e:	20 c0       	rjmp	.+64     	; 0x28e0 <_sendCmd+0x6a>
    28a0:	ff 20       	and	r15, r15
    28a2:	31 f0       	breq	.+12     	; 0x28b0 <_sendCmd+0x3a>
    28a4:	60 e2       	ldi	r22, 0x20	; 32
    28a6:	c8 01       	movw	r24, r16
    28a8:	fc d5       	rcall	.+3064   	; 0x34a2 <Si114xReadFromRegister>
    28aa:	8c 17       	cp	r24, r28
    28ac:	9d 07       	cpc	r25, r29
    28ae:	91 f4       	brne	.+36     	; 0x28d4 <_sendCmd+0x5e>
    28b0:	4f 2d       	mov	r20, r15
    28b2:	68 e1       	ldi	r22, 0x18	; 24
    28b4:	c8 01       	movw	r24, r16
    28b6:	d7 d5       	rcall	.+2990   	; 0x3466 <Si114xWriteToRegister>
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	91 f4       	brne	.+36     	; 0x28e0 <_sendCmd+0x6a>
    28bc:	ff 20       	and	r15, r15
    28be:	71 f0       	breq	.+28     	; 0x28dc <_sendCmd+0x66>
    28c0:	60 e2       	ldi	r22, 0x20	; 32
    28c2:	c8 01       	movw	r24, r16
    28c4:	ee d5       	rcall	.+3036   	; 0x34a2 <Si114xReadFromRegister>
    28c6:	8c 17       	cp	r24, r28
    28c8:	9d 07       	cpc	r25, r29
    28ca:	41 f4       	brne	.+16     	; 0x28dc <_sendCmd+0x66>
    28cc:	d7 ff       	sbrs	r29, 7
    28ce:	f8 cf       	rjmp	.-16     	; 0x28c0 <_sendCmd+0x4a>
    28d0:	ce 01       	movw	r24, r28
    28d2:	06 c0       	rjmp	.+12     	; 0x28e0 <_sendCmd+0x6a>
    28d4:	97 fd       	sbrc	r25, 7
    28d6:	04 c0       	rjmp	.+8      	; 0x28e0 <_sendCmd+0x6a>
    28d8:	ec 01       	movw	r28, r24
    28da:	d9 cf       	rjmp	.-78     	; 0x288e <_sendCmd+0x18>
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	1f 91       	pop	r17
    28e6:	0f 91       	pop	r16
    28e8:	ff 90       	pop	r15
    28ea:	08 95       	ret

000028ec <si114x_get_data>:
    28ec:	cf 92       	push	r12
    28ee:	df 92       	push	r13
    28f0:	ef 92       	push	r14
    28f2:	0f 93       	push	r16
    28f4:	1f 93       	push	r17
    28f6:	cf 93       	push	r28
    28f8:	df 93       	push	r29
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <si114x_get_data+0x10>
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	6c 01       	movw	r12, r24
    2902:	80 91 d8 2a 	lds	r24, 0x2AD8
    2906:	90 91 d9 2a 	lds	r25, 0x2AD9
    290a:	f6 01       	movw	r30, r12
    290c:	82 83       	std	Z+2, r24	; 0x02
    290e:	93 83       	std	Z+3, r25	; 0x03
    2910:	82 e0       	ldi	r24, 0x02	; 2
    2912:	e8 2e       	mov	r14, r24
    2914:	8e 01       	movw	r16, r28
    2916:	0f 5f       	subi	r16, 0xFF	; 255
    2918:	1f 4f       	sbci	r17, 0xFF	; 255
    291a:	26 e2       	ldi	r18, 0x26	; 38
    291c:	42 e3       	ldi	r20, 0x32	; 50
    291e:	50 e0       	ldi	r21, 0x00	; 0
    2920:	6a e5       	ldi	r22, 0x5A	; 90
    2922:	80 e8       	ldi	r24, 0x80	; 128
    2924:	94 e0       	ldi	r25, 0x04	; 4
    2926:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <twi_read_packet>
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	98 2f       	mov	r25, r24
    2930:	88 27       	eor	r24, r24
    2932:	29 81       	ldd	r18, Y+1	; 0x01
    2934:	82 2b       	or	r24, r18
    2936:	f6 01       	movw	r30, r12
    2938:	82 87       	std	Z+10, r24	; 0x0a
    293a:	93 87       	std	Z+11, r25	; 0x0b
    293c:	28 e2       	ldi	r18, 0x28	; 40
    293e:	42 e3       	ldi	r20, 0x32	; 50
    2940:	50 e0       	ldi	r21, 0x00	; 0
    2942:	6a e5       	ldi	r22, 0x5A	; 90
    2944:	80 e8       	ldi	r24, 0x80	; 128
    2946:	94 e0       	ldi	r25, 0x04	; 4
    2948:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <twi_read_packet>
    294c:	8a 81       	ldd	r24, Y+2	; 0x02
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	98 2f       	mov	r25, r24
    2952:	88 27       	eor	r24, r24
    2954:	29 81       	ldd	r18, Y+1	; 0x01
    2956:	82 2b       	or	r24, r18
    2958:	f6 01       	movw	r30, r12
    295a:	84 87       	std	Z+12, r24	; 0x0c
    295c:	95 87       	std	Z+13, r25	; 0x0d
    295e:	2a e2       	ldi	r18, 0x2A	; 42
    2960:	42 e3       	ldi	r20, 0x32	; 50
    2962:	50 e0       	ldi	r21, 0x00	; 0
    2964:	6a e5       	ldi	r22, 0x5A	; 90
    2966:	80 e8       	ldi	r24, 0x80	; 128
    2968:	94 e0       	ldi	r25, 0x04	; 4
    296a:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <twi_read_packet>
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	98 2f       	mov	r25, r24
    2974:	88 27       	eor	r24, r24
    2976:	29 81       	ldd	r18, Y+1	; 0x01
    2978:	82 2b       	or	r24, r18
    297a:	f6 01       	movw	r30, r12
    297c:	86 87       	std	Z+14, r24	; 0x0e
    297e:	97 87       	std	Z+15, r25	; 0x0f
    2980:	24 e2       	ldi	r18, 0x24	; 36
    2982:	42 e3       	ldi	r20, 0x32	; 50
    2984:	50 e0       	ldi	r21, 0x00	; 0
    2986:	6a e5       	ldi	r22, 0x5A	; 90
    2988:	80 e8       	ldi	r24, 0x80	; 128
    298a:	94 e0       	ldi	r25, 0x04	; 4
    298c:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <twi_read_packet>
    2990:	8a 81       	ldd	r24, Y+2	; 0x02
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	98 2f       	mov	r25, r24
    2996:	88 27       	eor	r24, r24
    2998:	29 81       	ldd	r18, Y+1	; 0x01
    299a:	82 2b       	or	r24, r18
    299c:	f6 01       	movw	r30, r12
    299e:	80 87       	std	Z+8, r24	; 0x08
    29a0:	91 87       	std	Z+9, r25	; 0x09
    29a2:	22 e2       	ldi	r18, 0x22	; 34
    29a4:	42 e3       	ldi	r20, 0x32	; 50
    29a6:	50 e0       	ldi	r21, 0x00	; 0
    29a8:	6a e5       	ldi	r22, 0x5A	; 90
    29aa:	80 e8       	ldi	r24, 0x80	; 128
    29ac:	94 e0       	ldi	r25, 0x04	; 4
    29ae:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <twi_read_packet>
    29b2:	8a 81       	ldd	r24, Y+2	; 0x02
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	98 2f       	mov	r25, r24
    29b8:	88 27       	eor	r24, r24
    29ba:	29 81       	ldd	r18, Y+1	; 0x01
    29bc:	82 2b       	or	r24, r18
    29be:	f6 01       	movw	r30, r12
    29c0:	86 83       	std	Z+6, r24	; 0x06
    29c2:	97 83       	std	Z+7, r25	; 0x07
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	df 91       	pop	r29
    29cc:	cf 91       	pop	r28
    29ce:	1f 91       	pop	r17
    29d0:	0f 91       	pop	r16
    29d2:	ef 90       	pop	r14
    29d4:	df 90       	pop	r13
    29d6:	cf 90       	pop	r12
    29d8:	08 95       	ret

000029da <Si114xNop>:
    29da:	60 e0       	ldi	r22, 0x00	; 0
    29dc:	4c cf       	rjmp	.-360    	; 0x2876 <_sendCmd>

000029de <Si114xPsAuto>:
    29de:	6d e0       	ldi	r22, 0x0D	; 13
    29e0:	4a cf       	rjmp	.-364    	; 0x2876 <_sendCmd>

000029e2 <Si114xPsAlsAuto>:
    29e2:	6f e0       	ldi	r22, 0x0F	; 15
    29e4:	48 cf       	rjmp	.-368    	; 0x2876 <_sendCmd>

000029e6 <Si114xParamSet>:
    29e6:	cf 92       	push	r12
    29e8:	df 92       	push	r13
    29ea:	ef 92       	push	r14
    29ec:	ff 92       	push	r15
    29ee:	0f 93       	push	r16
    29f0:	1f 93       	push	r17
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
    29f6:	00 d0       	rcall	.+0      	; 0x29f8 <Si114xParamSet+0x12>
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	8c 01       	movw	r16, r24
    29fe:	d6 2e       	mov	r13, r22
    2a00:	c4 2e       	mov	r12, r20
    2a02:	60 e3       	ldi	r22, 0x30	; 48
    2a04:	c8 01       	movw	r24, r16
    2a06:	4d d5       	rcall	.+2714   	; 0x34a2 <Si114xReadFromRegister>
    2a08:	81 30       	cpi	r24, 0x01	; 1
    2a0a:	91 05       	cpc	r25, r1
    2a0c:	19 f0       	breq	.+6      	; 0x2a14 <Si114xParamSet+0x2e>
    2a0e:	97 ff       	sbrs	r25, 7
    2a10:	f8 cf       	rjmp	.-16     	; 0x2a02 <Si114xParamSet+0x1c>
    2a12:	1d c0       	rjmp	.+58     	; 0x2a4e <Si114xParamSet+0x68>
    2a14:	60 e2       	ldi	r22, 0x20	; 32
    2a16:	c8 01       	movw	r24, r16
    2a18:	44 d5       	rcall	.+2696   	; 0x34a2 <Si114xReadFromRegister>
    2a1a:	7c 01       	movw	r14, r24
    2a1c:	c9 82       	std	Y+1, r12	; 0x01
    2a1e:	6d 2d       	mov	r22, r13
    2a20:	6f 71       	andi	r22, 0x1F	; 31
    2a22:	60 56       	subi	r22, 0x60	; 96
    2a24:	6a 83       	std	Y+2, r22	; 0x02
    2a26:	9e 01       	movw	r18, r28
    2a28:	2f 5f       	subi	r18, 0xFF	; 255
    2a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2c:	42 e0       	ldi	r20, 0x02	; 2
    2a2e:	67 e1       	ldi	r22, 0x17	; 23
    2a30:	c8 01       	movw	r24, r16
    2a32:	54 d5       	rcall	.+2728   	; 0x34dc <Si114xBlockWrite>
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	59 f4       	brne	.+22     	; 0x2a4e <Si114xParamSet+0x68>
    2a38:	60 e2       	ldi	r22, 0x20	; 32
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	32 d5       	rcall	.+2660   	; 0x34a2 <Si114xReadFromRegister>
    2a3e:	8e 15       	cp	r24, r14
    2a40:	9f 05       	cpc	r25, r15
    2a42:	d1 f3       	breq	.-12     	; 0x2a38 <Si114xParamSet+0x52>
    2a44:	18 16       	cp	r1, r24
    2a46:	19 06       	cpc	r1, r25
    2a48:	14 f4       	brge	.+4      	; 0x2a4e <Si114xParamSet+0x68>
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	df 91       	pop	r29
    2a54:	cf 91       	pop	r28
    2a56:	1f 91       	pop	r17
    2a58:	0f 91       	pop	r16
    2a5a:	ff 90       	pop	r15
    2a5c:	ef 90       	pop	r14
    2a5e:	df 90       	pop	r13
    2a60:	cf 90       	pop	r12
    2a62:	08 95       	ret

00002a64 <Si114xPauseAll>:
    2a64:	cf 93       	push	r28
    2a66:	df 93       	push	r29
    2a68:	ec 01       	movw	r28, r24
    2a6a:	60 e2       	ldi	r22, 0x20	; 32
    2a6c:	ce 01       	movw	r24, r28
    2a6e:	19 d5       	rcall	.+2610   	; 0x34a2 <Si114xReadFromRegister>
    2a70:	89 2b       	or	r24, r25
    2a72:	19 f0       	breq	.+6      	; 0x2a7a <Si114xPauseAll+0x16>
    2a74:	ce 01       	movw	r24, r28
    2a76:	b1 df       	rcall	.-158    	; 0x29da <Si114xNop>
    2a78:	f8 cf       	rjmp	.-16     	; 0x2a6a <Si114xPauseAll+0x6>
    2a7a:	6b e0       	ldi	r22, 0x0B	; 11
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	fb de       	rcall	.-522    	; 0x2876 <_sendCmd>
    2a80:	60 e2       	ldi	r22, 0x20	; 32
    2a82:	ce 01       	movw	r24, r28
    2a84:	0e d5       	rcall	.+2588   	; 0x34a2 <Si114xReadFromRegister>
    2a86:	89 2b       	or	r24, r25
    2a88:	d9 f3       	breq	.-10     	; 0x2a80 <Si114xPauseAll+0x1c>
    2a8a:	60 e2       	ldi	r22, 0x20	; 32
    2a8c:	ce 01       	movw	r24, r28
    2a8e:	09 d5       	rcall	.+2578   	; 0x34a2 <Si114xReadFromRegister>
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	59 f7       	brne	.-42     	; 0x2a6a <Si114xPauseAll+0x6>
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	08 95       	ret

00002a9e <si114x_reset>:
    2a9e:	0f 93       	push	r16
    2aa0:	1f 93       	push	r17
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	8c 01       	movw	r16, r24
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	68 e0       	ldi	r22, 0x08	; 8
    2aac:	dc d4       	rcall	.+2488   	; 0x3466 <Si114xWriteToRegister>
    2aae:	ec 01       	movw	r28, r24
    2ab0:	c8 01       	movw	r24, r16
    2ab2:	d8 df       	rcall	.-80     	; 0x2a64 <Si114xPauseAll>
    2ab4:	c8 0f       	add	r28, r24
    2ab6:	d9 1f       	adc	r29, r25
    2ab8:	40 e0       	ldi	r20, 0x00	; 0
    2aba:	68 e0       	ldi	r22, 0x08	; 8
    2abc:	c8 01       	movw	r24, r16
    2abe:	d3 d4       	rcall	.+2470   	; 0x3466 <Si114xWriteToRegister>
    2ac0:	c8 0f       	add	r28, r24
    2ac2:	d9 1f       	adc	r29, r25
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	64 e0       	ldi	r22, 0x04	; 4
    2ac8:	c8 01       	movw	r24, r16
    2aca:	cd d4       	rcall	.+2458   	; 0x3466 <Si114xWriteToRegister>
    2acc:	c8 0f       	add	r28, r24
    2ace:	d9 1f       	adc	r29, r25
    2ad0:	40 e0       	ldi	r20, 0x00	; 0
    2ad2:	65 e0       	ldi	r22, 0x05	; 5
    2ad4:	c8 01       	movw	r24, r16
    2ad6:	c7 d4       	rcall	.+2446   	; 0x3466 <Si114xWriteToRegister>
    2ad8:	c8 0f       	add	r28, r24
    2ada:	d9 1f       	adc	r29, r25
    2adc:	40 e0       	ldi	r20, 0x00	; 0
    2ade:	66 e0       	ldi	r22, 0x06	; 6
    2ae0:	c8 01       	movw	r24, r16
    2ae2:	c1 d4       	rcall	.+2434   	; 0x3466 <Si114xWriteToRegister>
    2ae4:	c8 0f       	add	r28, r24
    2ae6:	d9 1f       	adc	r29, r25
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	63 e0       	ldi	r22, 0x03	; 3
    2aec:	c8 01       	movw	r24, r16
    2aee:	bb d4       	rcall	.+2422   	; 0x3466 <Si114xWriteToRegister>
    2af0:	c8 0f       	add	r28, r24
    2af2:	d9 1f       	adc	r29, r25
    2af4:	4f ef       	ldi	r20, 0xFF	; 255
    2af6:	61 e2       	ldi	r22, 0x21	; 33
    2af8:	c8 01       	movw	r24, r16
    2afa:	b5 d4       	rcall	.+2410   	; 0x3466 <Si114xWriteToRegister>
    2afc:	c8 0f       	add	r28, r24
    2afe:	d9 1f       	adc	r29, r25
    2b00:	41 e0       	ldi	r20, 0x01	; 1
    2b02:	68 e1       	ldi	r22, 0x18	; 24
    2b04:	c8 01       	movw	r24, r16
    2b06:	af d4       	rcall	.+2398   	; 0x3466 <Si114xWriteToRegister>
    2b08:	c8 0f       	add	r28, r24
    2b0a:	d9 1f       	adc	r29, r25
    2b0c:	f8 d4       	rcall	.+2544   	; 0x34fe <delay_10ms>
    2b0e:	47 e1       	ldi	r20, 0x17	; 23
    2b10:	67 e0       	ldi	r22, 0x07	; 7
    2b12:	c8 01       	movw	r24, r16
    2b14:	a8 d4       	rcall	.+2384   	; 0x3466 <Si114xWriteToRegister>
    2b16:	8c 0f       	add	r24, r28
    2b18:	9d 1f       	adc	r25, r29
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	1f 91       	pop	r17
    2b20:	0f 91       	pop	r16
    2b22:	08 95       	ret

00002b24 <si114x_init_ps1>:
    2b24:	0f 93       	push	r16
    2b26:	1f 93       	push	r17
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	8c 01       	movw	r16, r24
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	68 e0       	ldi	r22, 0x08	; 8
    2b32:	99 d4       	rcall	.+2354   	; 0x3466 <Si114xWriteToRegister>
    2b34:	ec 01       	movw	r28, r24
    2b36:	40 e0       	ldi	r20, 0x00	; 0
    2b38:	6a e0       	ldi	r22, 0x0A	; 10
    2b3a:	c8 01       	movw	r24, r16
    2b3c:	94 d4       	rcall	.+2344   	; 0x3466 <Si114xWriteToRegister>
    2b3e:	c8 0f       	add	r28, r24
    2b40:	d9 1f       	adc	r29, r25
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	69 e0       	ldi	r22, 0x09	; 9
    2b46:	c8 01       	movw	r24, r16
    2b48:	8e d4       	rcall	.+2332   	; 0x3466 <Si114xWriteToRegister>
    2b4a:	c8 0f       	add	r28, r24
    2b4c:	d9 1f       	adc	r29, r25
    2b4e:	c8 01       	movw	r24, r16
    2b50:	a6 df       	rcall	.-180    	; 0x2a9e <si114x_reset>
    2b52:	c8 0f       	add	r28, r24
    2b54:	d9 1f       	adc	r29, r25
    2b56:	43 e0       	ldi	r20, 0x03	; 3
    2b58:	6f e0       	ldi	r22, 0x0F	; 15
    2b5a:	c8 01       	movw	r24, r16
    2b5c:	84 d4       	rcall	.+2312   	; 0x3466 <Si114xWriteToRegister>
    2b5e:	c8 0f       	add	r28, r24
    2b60:	d9 1f       	adc	r29, r25
    2b62:	41 e0       	ldi	r20, 0x01	; 1
    2b64:	61 e0       	ldi	r22, 0x01	; 1
    2b66:	c8 01       	movw	r24, r16
    2b68:	3e df       	rcall	.-388    	; 0x29e6 <Si114xParamSet>
    2b6a:	c8 0f       	add	r28, r24
    2b6c:	d9 1f       	adc	r29, r25
    2b6e:	43 e0       	ldi	r20, 0x03	; 3
    2b70:	63 e0       	ldi	r22, 0x03	; 3
    2b72:	c8 01       	movw	r24, r16
    2b74:	78 d4       	rcall	.+2288   	; 0x3466 <Si114xWriteToRegister>
    2b76:	c8 0f       	add	r28, r24
    2b78:	d9 1f       	adc	r29, r25
    2b7a:	44 e0       	ldi	r20, 0x04	; 4
    2b7c:	64 e0       	ldi	r22, 0x04	; 4
    2b7e:	c8 01       	movw	r24, r16
    2b80:	72 d4       	rcall	.+2276   	; 0x3466 <Si114xWriteToRegister>
    2b82:	c8 0f       	add	r28, r24
    2b84:	d9 1f       	adc	r29, r25
    2b86:	40 e3       	ldi	r20, 0x30	; 48
    2b88:	65 e0       	ldi	r22, 0x05	; 5
    2b8a:	c8 01       	movw	r24, r16
    2b8c:	6c d4       	rcall	.+2264   	; 0x3466 <Si114xWriteToRegister>
    2b8e:	c8 0f       	add	r28, r24
    2b90:	d9 1f       	adc	r29, r25
    2b92:	43 e0       	ldi	r20, 0x03	; 3
    2b94:	67 e0       	ldi	r22, 0x07	; 7
    2b96:	c8 01       	movw	r24, r16
    2b98:	26 df       	rcall	.-436    	; 0x29e6 <Si114xParamSet>
    2b9a:	c8 0f       	add	r28, r24
    2b9c:	d9 1f       	adc	r29, r25
    2b9e:	43 e0       	ldi	r20, 0x03	; 3
    2ba0:	6e e0       	ldi	r22, 0x0E	; 14
    2ba2:	c8 01       	movw	r24, r16
    2ba4:	20 df       	rcall	.-448    	; 0x29e6 <Si114xParamSet>
    2ba6:	c8 0f       	add	r28, r24
    2ba8:	d9 1f       	adc	r29, r25
    2baa:	40 e0       	ldi	r20, 0x00	; 0
    2bac:	6b e0       	ldi	r22, 0x0B	; 11
    2bae:	c8 01       	movw	r24, r16
    2bb0:	1a df       	rcall	.-460    	; 0x29e6 <Si114xParamSet>
    2bb2:	c8 0f       	add	r28, r24
    2bb4:	d9 1f       	adc	r29, r25
    2bb6:	41 e0       	ldi	r20, 0x01	; 1
    2bb8:	62 e0       	ldi	r22, 0x02	; 2
    2bba:	c8 01       	movw	r24, r16
    2bbc:	14 df       	rcall	.-472    	; 0x29e6 <Si114xParamSet>
    2bbe:	c8 0f       	add	r28, r24
    2bc0:	d9 1f       	adc	r29, r25
    2bc2:	40 e7       	ldi	r20, 0x70	; 112
    2bc4:	6a e0       	ldi	r22, 0x0A	; 10
    2bc6:	c8 01       	movw	r24, r16
    2bc8:	0e df       	rcall	.-484    	; 0x29e6 <Si114xParamSet>
    2bca:	c8 0f       	add	r28, r24
    2bcc:	d9 1f       	adc	r29, r25
    2bce:	44 e0       	ldi	r20, 0x04	; 4
    2bd0:	6c e0       	ldi	r22, 0x0C	; 12
    2bd2:	c8 01       	movw	r24, r16
    2bd4:	08 df       	rcall	.-496    	; 0x29e6 <Si114xParamSet>
    2bd6:	c8 0f       	add	r28, r24
    2bd8:	d9 1f       	adc	r29, r25
    2bda:	48 e6       	ldi	r20, 0x68	; 104
    2bdc:	61 e1       	ldi	r22, 0x11	; 17
    2bde:	c8 01       	movw	r24, r16
    2be0:	42 d4       	rcall	.+2180   	; 0x3466 <Si114xWriteToRegister>
    2be2:	c8 0f       	add	r28, r24
    2be4:	d9 1f       	adc	r29, r25
    2be6:	41 e0       	ldi	r20, 0x01	; 1
    2be8:	62 e1       	ldi	r22, 0x12	; 18
    2bea:	c8 01       	movw	r24, r16
    2bec:	3c d4       	rcall	.+2168   	; 0x3466 <Si114xWriteToRegister>
    2bee:	c8 0f       	add	r28, r24
    2bf0:	d9 1f       	adc	r29, r25
    2bf2:	40 ea       	ldi	r20, 0xA0	; 160
    2bf4:	68 e0       	ldi	r22, 0x08	; 8
    2bf6:	c8 01       	movw	r24, r16
    2bf8:	36 d4       	rcall	.+2156   	; 0x3466 <Si114xWriteToRegister>
    2bfa:	c8 0f       	add	r28, r24
    2bfc:	d9 1f       	adc	r29, r25
    2bfe:	48 e0       	ldi	r20, 0x08	; 8
    2c00:	6a e0       	ldi	r22, 0x0A	; 10
    2c02:	c8 01       	movw	r24, r16
    2c04:	30 d4       	rcall	.+2144   	; 0x3466 <Si114xWriteToRegister>
    2c06:	c8 0f       	add	r28, r24
    2c08:	d9 1f       	adc	r29, r25
    2c0a:	c8 01       	movw	r24, r16
    2c0c:	e8 de       	rcall	.-560    	; 0x29de <Si114xPsAuto>
    2c0e:	8c 0f       	add	r24, r28
    2c10:	9d 1f       	adc	r25, r29
    2c12:	df 91       	pop	r29
    2c14:	cf 91       	pop	r28
    2c16:	1f 91       	pop	r17
    2c18:	0f 91       	pop	r16
    2c1a:	08 95       	ret

00002c1c <si114x_setup_ps1>:
    2c1c:	8a e5       	ldi	r24, 0x5A	; 90
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	3e df       	rcall	.-388    	; 0x2a9e <si114x_reset>
    2c22:	2f ef       	ldi	r18, 0xFF	; 255
    2c24:	81 ee       	ldi	r24, 0xE1	; 225
    2c26:	94 e0       	ldi	r25, 0x04	; 4
    2c28:	21 50       	subi	r18, 0x01	; 1
    2c2a:	80 40       	sbci	r24, 0x00	; 0
    2c2c:	90 40       	sbci	r25, 0x00	; 0
    2c2e:	e1 f7       	brne	.-8      	; 0x2c28 <si114x_setup_ps1+0xc>
    2c30:	00 c0       	rjmp	.+0      	; 0x2c32 <si114x_setup_ps1+0x16>
    2c32:	00 00       	nop
    2c34:	8a e5       	ldi	r24, 0x5A	; 90
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	75 df       	rcall	.-278    	; 0x2b24 <si114x_init_ps1>
    2c3a:	8e cb       	rjmp	.-2276   	; 0x2358 <btn_si114x_enable_interrupt>

00002c3c <si114x_init>:
    2c3c:	0f 93       	push	r16
    2c3e:	1f 93       	push	r17
    2c40:	cf 93       	push	r28
    2c42:	df 93       	push	r29
    2c44:	8c 01       	movw	r16, r24
    2c46:	40 e0       	ldi	r20, 0x00	; 0
    2c48:	68 e0       	ldi	r22, 0x08	; 8
    2c4a:	0d d4       	rcall	.+2074   	; 0x3466 <Si114xWriteToRegister>
    2c4c:	ec 01       	movw	r28, r24
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	6a e0       	ldi	r22, 0x0A	; 10
    2c52:	c8 01       	movw	r24, r16
    2c54:	08 d4       	rcall	.+2064   	; 0x3466 <Si114xWriteToRegister>
    2c56:	c8 0f       	add	r28, r24
    2c58:	d9 1f       	adc	r29, r25
    2c5a:	40 e0       	ldi	r20, 0x00	; 0
    2c5c:	69 e0       	ldi	r22, 0x09	; 9
    2c5e:	c8 01       	movw	r24, r16
    2c60:	02 d4       	rcall	.+2052   	; 0x3466 <Si114xWriteToRegister>
    2c62:	c8 0f       	add	r28, r24
    2c64:	d9 1f       	adc	r29, r25
    2c66:	c8 01       	movw	r24, r16
    2c68:	1a df       	rcall	.-460    	; 0x2a9e <si114x_reset>
    2c6a:	c8 0f       	add	r28, r24
    2c6c:	d9 1f       	adc	r29, r25
    2c6e:	4f ef       	ldi	r20, 0xFF	; 255
    2c70:	6f e0       	ldi	r22, 0x0F	; 15
    2c72:	c8 01       	movw	r24, r16
    2c74:	f8 d3       	rcall	.+2032   	; 0x3466 <Si114xWriteToRegister>
    2c76:	c8 0f       	add	r28, r24
    2c78:	d9 1f       	adc	r29, r25
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	60 e1       	ldi	r22, 0x10	; 16
    2c7e:	c8 01       	movw	r24, r16
    2c80:	f2 d3       	rcall	.+2020   	; 0x3466 <Si114xWriteToRegister>
    2c82:	c8 0f       	add	r28, r24
    2c84:	d9 1f       	adc	r29, r25
    2c86:	47 e7       	ldi	r20, 0x77	; 119
    2c88:	61 e0       	ldi	r22, 0x01	; 1
    2c8a:	c8 01       	movw	r24, r16
    2c8c:	ac de       	rcall	.-680    	; 0x29e6 <Si114xParamSet>
    2c8e:	c8 0f       	add	r28, r24
    2c90:	d9 1f       	adc	r29, r25
    2c92:	41 e0       	ldi	r20, 0x01	; 1
    2c94:	63 e0       	ldi	r22, 0x03	; 3
    2c96:	c8 01       	movw	r24, r16
    2c98:	e6 d3       	rcall	.+1996   	; 0x3466 <Si114xWriteToRegister>
    2c9a:	c8 0f       	add	r28, r24
    2c9c:	d9 1f       	adc	r29, r25
    2c9e:	4d e1       	ldi	r20, 0x1D	; 29
    2ca0:	64 e0       	ldi	r22, 0x04	; 4
    2ca2:	c8 01       	movw	r24, r16
    2ca4:	e0 d3       	rcall	.+1984   	; 0x3466 <Si114xWriteToRegister>
    2ca6:	c8 0f       	add	r28, r24
    2ca8:	d9 1f       	adc	r29, r25
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	65 e0       	ldi	r22, 0x05	; 5
    2cae:	c8 01       	movw	r24, r16
    2cb0:	da d3       	rcall	.+1972   	; 0x3466 <Si114xWriteToRegister>
    2cb2:	c8 0f       	add	r28, r24
    2cb4:	d9 1f       	adc	r29, r25
    2cb6:	40 e0       	ldi	r20, 0x00	; 0
    2cb8:	66 e0       	ldi	r22, 0x06	; 6
    2cba:	c8 01       	movw	r24, r16
    2cbc:	d4 d3       	rcall	.+1960   	; 0x3466 <Si114xWriteToRegister>
    2cbe:	c8 0f       	add	r28, r24
    2cc0:	d9 1f       	adc	r29, r25
    2cc2:	43 e0       	ldi	r20, 0x03	; 3
    2cc4:	67 e0       	ldi	r22, 0x07	; 7
    2cc6:	c8 01       	movw	r24, r16
    2cc8:	8e de       	rcall	.-740    	; 0x29e6 <Si114xParamSet>
    2cca:	c8 0f       	add	r28, r24
    2ccc:	d9 1f       	adc	r29, r25
    2cce:	43 e0       	ldi	r20, 0x03	; 3
    2cd0:	68 e0       	ldi	r22, 0x08	; 8
    2cd2:	c8 01       	movw	r24, r16
    2cd4:	88 de       	rcall	.-752    	; 0x29e6 <Si114xParamSet>
    2cd6:	c8 0f       	add	r28, r24
    2cd8:	d9 1f       	adc	r29, r25
    2cda:	43 e0       	ldi	r20, 0x03	; 3
    2cdc:	69 e0       	ldi	r22, 0x09	; 9
    2cde:	c8 01       	movw	r24, r16
    2ce0:	82 de       	rcall	.-764    	; 0x29e6 <Si114xParamSet>
    2ce2:	c8 0f       	add	r28, r24
    2ce4:	d9 1f       	adc	r29, r25
    2ce6:	43 e0       	ldi	r20, 0x03	; 3
    2ce8:	6e e0       	ldi	r22, 0x0E	; 14
    2cea:	c8 01       	movw	r24, r16
    2cec:	7c de       	rcall	.-776    	; 0x29e6 <Si114xParamSet>
    2cee:	c8 0f       	add	r28, r24
    2cf0:	d9 1f       	adc	r29, r25
    2cf2:	40 e0       	ldi	r20, 0x00	; 0
    2cf4:	6b e0       	ldi	r22, 0x0B	; 11
    2cf6:	c8 01       	movw	r24, r16
    2cf8:	76 de       	rcall	.-788    	; 0x29e6 <Si114xParamSet>
    2cfa:	c8 0f       	add	r28, r24
    2cfc:	d9 1f       	adc	r29, r25
    2cfe:	40 e0       	ldi	r20, 0x00	; 0
    2d00:	6e e1       	ldi	r22, 0x1E	; 30
    2d02:	c8 01       	movw	r24, r16
    2d04:	70 de       	rcall	.-800    	; 0x29e6 <Si114xParamSet>
    2d06:	c8 0f       	add	r28, r24
    2d08:	d9 1f       	adc	r29, r25
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	61 e1       	ldi	r22, 0x11	; 17
    2d0e:	c8 01       	movw	r24, r16
    2d10:	6a de       	rcall	.-812    	; 0x29e6 <Si114xParamSet>
    2d12:	c8 0f       	add	r28, r24
    2d14:	d9 1f       	adc	r29, r25
    2d16:	41 e2       	ldi	r20, 0x21	; 33
    2d18:	62 e0       	ldi	r22, 0x02	; 2
    2d1a:	c8 01       	movw	r24, r16
    2d1c:	64 de       	rcall	.-824    	; 0x29e6 <Si114xParamSet>
    2d1e:	c8 0f       	add	r28, r24
    2d20:	d9 1f       	adc	r29, r25
    2d22:	44 e0       	ldi	r20, 0x04	; 4
    2d24:	63 e0       	ldi	r22, 0x03	; 3
    2d26:	c8 01       	movw	r24, r16
    2d28:	5e de       	rcall	.-836    	; 0x29e6 <Si114xParamSet>
    2d2a:	c8 0f       	add	r28, r24
    2d2c:	d9 1f       	adc	r29, r25
    2d2e:	40 e7       	ldi	r20, 0x70	; 112
    2d30:	6a e0       	ldi	r22, 0x0A	; 10
    2d32:	c8 01       	movw	r24, r16
    2d34:	58 de       	rcall	.-848    	; 0x29e6 <Si114xParamSet>
    2d36:	c8 0f       	add	r28, r24
    2d38:	d9 1f       	adc	r29, r25
    2d3a:	40 e7       	ldi	r20, 0x70	; 112
    2d3c:	6d e1       	ldi	r22, 0x1D	; 29
    2d3e:	c8 01       	movw	r24, r16
    2d40:	52 de       	rcall	.-860    	; 0x29e6 <Si114xParamSet>
    2d42:	c8 0f       	add	r28, r24
    2d44:	d9 1f       	adc	r29, r25
    2d46:	40 e7       	ldi	r20, 0x70	; 112
    2d48:	60 e1       	ldi	r22, 0x10	; 16
    2d4a:	c8 01       	movw	r24, r16
    2d4c:	4c de       	rcall	.-872    	; 0x29e6 <Si114xParamSet>
    2d4e:	c8 0f       	add	r28, r24
    2d50:	d9 1f       	adc	r29, r25
    2d52:	44 e0       	ldi	r20, 0x04	; 4
    2d54:	6c e0       	ldi	r22, 0x0C	; 12
    2d56:	c8 01       	movw	r24, r16
    2d58:	46 de       	rcall	.-884    	; 0x29e6 <Si114xParamSet>
    2d5a:	c8 0f       	add	r28, r24
    2d5c:	d9 1f       	adc	r29, r25
    2d5e:	40 e2       	ldi	r20, 0x20	; 32
    2d60:	6f e1       	ldi	r22, 0x1F	; 31
    2d62:	c8 01       	movw	r24, r16
    2d64:	40 de       	rcall	.-896    	; 0x29e6 <Si114xParamSet>
    2d66:	c8 0f       	add	r28, r24
    2d68:	d9 1f       	adc	r29, r25
    2d6a:	40 e2       	ldi	r20, 0x20	; 32
    2d6c:	62 e1       	ldi	r22, 0x12	; 18
    2d6e:	c8 01       	movw	r24, r16
    2d70:	3a de       	rcall	.-908    	; 0x29e6 <Si114xParamSet>
    2d72:	c8 0f       	add	r28, r24
    2d74:	d9 1f       	adc	r29, r25
    2d76:	44 e9       	ldi	r20, 0x94	; 148
    2d78:	68 e0       	ldi	r22, 0x08	; 8
    2d7a:	c8 01       	movw	r24, r16
    2d7c:	74 d3       	rcall	.+1768   	; 0x3466 <Si114xWriteToRegister>
    2d7e:	c8 0f       	add	r28, r24
    2d80:	d9 1f       	adc	r29, r25
    2d82:	48 e0       	ldi	r20, 0x08	; 8
    2d84:	6a e0       	ldi	r22, 0x0A	; 10
    2d86:	c8 01       	movw	r24, r16
    2d88:	6e d3       	rcall	.+1756   	; 0x3466 <Si114xWriteToRegister>
    2d8a:	c8 0f       	add	r28, r24
    2d8c:	d9 1f       	adc	r29, r25
    2d8e:	48 e0       	ldi	r20, 0x08	; 8
    2d90:	69 e0       	ldi	r22, 0x09	; 9
    2d92:	c8 01       	movw	r24, r16
    2d94:	68 d3       	rcall	.+1744   	; 0x3466 <Si114xWriteToRegister>
    2d96:	c8 0f       	add	r28, r24
    2d98:	d9 1f       	adc	r29, r25
    2d9a:	c8 01       	movw	r24, r16
    2d9c:	22 de       	rcall	.-956    	; 0x29e2 <Si114xPsAlsAuto>
    2d9e:	8c 0f       	add	r24, r28
    2da0:	9d 1f       	adc	r25, r29
    2da2:	df 91       	pop	r29
    2da4:	cf 91       	pop	r28
    2da6:	1f 91       	pop	r17
    2da8:	0f 91       	pop	r16
    2daa:	08 95       	ret

00002dac <si114x_setup>:
    2dac:	e0 e7       	ldi	r30, 0x70	; 112
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	83 81       	ldd	r24, Z+3	; 0x03
    2db2:	8d 7f       	andi	r24, 0xFD	; 253
    2db4:	83 83       	std	Z+3, r24	; 0x03
    2db6:	e0 e4       	ldi	r30, 0x40	; 64
    2db8:	f8 e0       	ldi	r31, 0x08	; 8
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	80 83       	st	Z, r24
    2dbe:	90 e8       	ldi	r25, 0x80	; 128
    2dc0:	96 a3       	std	Z+38, r25	; 0x26
    2dc2:	9c e0       	ldi	r25, 0x0C	; 12
    2dc4:	97 a3       	std	Z+39, r25	; 0x27
    2dc6:	86 83       	std	Z+6, r24	; 0x06
    2dc8:	8a e5       	ldi	r24, 0x5A	; 90
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	68 de       	rcall	.-816    	; 0x2a9e <si114x_reset>
    2dce:	2f ef       	ldi	r18, 0xFF	; 255
    2dd0:	81 ee       	ldi	r24, 0xE1	; 225
    2dd2:	94 e0       	ldi	r25, 0x04	; 4
    2dd4:	21 50       	subi	r18, 0x01	; 1
    2dd6:	80 40       	sbci	r24, 0x00	; 0
    2dd8:	90 40       	sbci	r25, 0x00	; 0
    2dda:	e1 f7       	brne	.-8      	; 0x2dd4 <si114x_setup+0x28>
    2ddc:	00 c0       	rjmp	.+0      	; 0x2dde <si114x_setup+0x32>
    2dde:	00 00       	nop
    2de0:	8a e5       	ldi	r24, 0x5A	; 90
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	2b cf       	rjmp	.-426    	; 0x2c3c <si114x_init>

00002de6 <si114x_baseline_calibration>:
    2de6:	ef 92       	push	r14
    2de8:	ff 92       	push	r15
    2dea:	0f 93       	push	r16
    2dec:	1f 93       	push	r17
    2dee:	cf 93       	push	r28
    2df0:	df 93       	push	r29
    2df2:	ec 01       	movw	r28, r24
    2df4:	db df       	rcall	.-74     	; 0x2dac <si114x_setup>
    2df6:	80 e8       	ldi	r24, 0x80	; 128
    2df8:	80 93 08 20 	sts	0x2008, r24
    2dfc:	60 e0       	ldi	r22, 0x00	; 0
    2dfe:	80 ea       	ldi	r24, 0xA0	; 160
    2e00:	94 e2       	ldi	r25, 0x24	; 36
    2e02:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
    2e06:	75 ec       	ldi	r23, 0xC5	; 197
    2e08:	e7 2e       	mov	r14, r23
    2e0a:	74 e2       	ldi	r23, 0x24	; 36
    2e0c:	f7 2e       	mov	r15, r23
    2e0e:	01 e0       	ldi	r16, 0x01	; 1
    2e10:	24 e0       	ldi	r18, 0x04	; 4
    2e12:	44 e0       	ldi	r20, 0x04	; 4
    2e14:	66 e0       	ldi	r22, 0x06	; 6
    2e16:	86 e0       	ldi	r24, 0x06	; 6
    2e18:	0e 94 9b 21 	call	0x4336	; 0x4336 <display_draw_filled_rect>
    2e1c:	00 e0       	ldi	r16, 0x00	; 0
    2e1e:	22 e0       	ldi	r18, 0x02	; 2
    2e20:	42 e0       	ldi	r20, 0x02	; 2
    2e22:	67 e0       	ldi	r22, 0x07	; 7
    2e24:	87 e0       	ldi	r24, 0x07	; 7
    2e26:	0e 94 9b 21 	call	0x4336	; 0x4336 <display_draw_filled_rect>
    2e2a:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
    2e2e:	ce 01       	movw	r24, r28
    2e30:	5d dd       	rcall	.-1350   	; 0x28ec <si114x_get_data>
    2e32:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e34:	8f 93       	push	r24
    2e36:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e38:	8f 93       	push	r24
    2e3a:	ff 92       	push	r15
    2e3c:	ef 92       	push	r14
    2e3e:	0e 94 13 56 	call	0xac26	; 0xac26 <printf>
    2e42:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e44:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	81 34       	cpi	r24, 0x41	; 65
    2e50:	26 e0       	ldi	r18, 0x06	; 6
    2e52:	92 07       	cpc	r25, r18
    2e54:	e0 f6       	brcc	.-72     	; 0x2e0e <si114x_baseline_calibration+0x28>
    2e56:	80 93 26 2b 	sts	0x2B26, r24
    2e5a:	90 93 27 2b 	sts	0x2B27, r25
    2e5e:	8f ef       	ldi	r24, 0xFF	; 255
    2e60:	97 ea       	ldi	r25, 0xA7	; 167
    2e62:	21 e6       	ldi	r18, 0x61	; 97
    2e64:	81 50       	subi	r24, 0x01	; 1
    2e66:	90 40       	sbci	r25, 0x00	; 0
    2e68:	20 40       	sbci	r18, 0x00	; 0
    2e6a:	e1 f7       	brne	.-8      	; 0x2e64 <si114x_baseline_calibration+0x7e>
    2e6c:	00 c0       	rjmp	.+0      	; 0x2e6e <si114x_baseline_calibration+0x88>
    2e6e:	00 00       	nop
    2e70:	01 e8       	ldi	r16, 0x81	; 129
    2e72:	10 e0       	ldi	r17, 0x00	; 0
    2e74:	01 50       	subi	r16, 0x01	; 1
    2e76:	11 09       	sbc	r17, r1
    2e78:	01 15       	cp	r16, r1
    2e7a:	11 05       	cpc	r17, r1
    2e7c:	69 f0       	breq	.+26     	; 0x2e98 <si114x_baseline_calibration+0xb2>
    2e7e:	80 91 d8 2a 	lds	r24, 0x2AD8
    2e82:	90 91 d9 2a 	lds	r25, 0x2AD9
    2e86:	8a 83       	std	Y+2, r24	; 0x02
    2e88:	9b 83       	std	Y+3, r25	; 0x03
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	2f dd       	rcall	.-1442   	; 0x28ec <si114x_get_data>
    2e8e:	be 01       	movw	r22, r28
    2e90:	8a e5       	ldi	r24, 0x5A	; 90
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	c8 d1       	rcall	.+912    	; 0x3226 <si114x_process_samples>
    2e96:	ee cf       	rjmp	.-36     	; 0x2e74 <si114x_baseline_calibration+0x8e>
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	ff 90       	pop	r15
    2ea2:	ef 90       	pop	r14
    2ea4:	08 95       	ret

00002ea6 <__vector_20>:

ISR(TCC1_OVF_vect) {
    2ea6:	1f 92       	push	r1
    2ea8:	0f 92       	push	r0
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	0f 92       	push	r0
    2eae:	11 24       	eor	r1, r1
    2eb0:	8f 93       	push	r24
    2eb2:	9f 93       	push	r25
	counter++;
    2eb4:	80 91 d8 2a 	lds	r24, 0x2AD8
    2eb8:	90 91 d9 2a 	lds	r25, 0x2AD9
    2ebc:	01 96       	adiw	r24, 0x01	; 1
    2ebe:	80 93 d8 2a 	sts	0x2AD8, r24
    2ec2:	90 93 d9 2a 	sts	0x2AD9, r25
}
    2ec6:	9f 91       	pop	r25
    2ec8:	8f 91       	pop	r24
    2eca:	0f 90       	pop	r0
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	0f 90       	pop	r0
    2ed0:	1f 90       	pop	r1
    2ed2:	18 95       	reti

00002ed4 <isIRStable>:
        }
    }
}

char isIRStable( SI114X_IRQ_SAMPLE *samples)
{
    2ed4:	8f 92       	push	r8
    2ed6:	9f 92       	push	r9
    2ed8:	af 92       	push	r10
    2eda:	bf 92       	push	r11
    2edc:	cf 92       	push	r12
    2ede:	df 92       	push	r13
    2ee0:	ef 92       	push	r14
    2ee2:	ff 92       	push	r15
                                        //
    u32 xdata IR = (u32) samples->ir; // Make a copy of ALS IR Reading
    
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 
    2ee4:	40 91 e9 2a 	lds	r20, 0x2AE9
    2ee8:	50 91 ea 2a 	lds	r21, 0x2AEA
    2eec:	60 91 eb 2a 	lds	r22, 0x2AEB
    2ef0:	70 91 ec 2a 	lds	r23, 0x2AEC
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	c0 84       	ldd	r12, Z+8	; 0x08
    2ef8:	d1 84       	ldd	r13, Z+9	; 0x09
    2efa:	45 2b       	or	r20, r21
    2efc:	46 2b       	or	r20, r22
    2efe:	47 2b       	or	r20, r23
    2f00:	61 f4       	brne	.+24     	; 0x2f1a <isIRStable+0x46>
    2f02:	c6 01       	movw	r24, r12
    2f04:	a0 e0       	ldi	r26, 0x00	; 0
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	80 93 e9 2a 	sts	0x2AE9, r24
    2f0c:	90 93 ea 2a 	sts	0x2AEA, r25
    2f10:	a0 93 eb 2a 	sts	0x2AEB, r26
    2f14:	b0 93 ec 2a 	sts	0x2AEC, r27
    2f18:	06 c0       	rjmp	.+12     	; 0x2f26 <isIRStable+0x52>

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    2f1a:	f1 e8       	ldi	r31, 0x81	; 129
    2f1c:	cf 16       	cp	r12, r31
    2f1e:	fb eb       	ldi	r31, 0xBB	; 187
    2f20:	df 06       	cpc	r13, r31
    2f22:	08 f0       	brcs	.+2      	; 0x2f26 <isIRStable+0x52>
    2f24:	47 c0       	rjmp	.+142    	; 0x2fb4 <isIRStable+0xe0>

    if( samples->ir < (IRlast + IRlast/2) && samples->ir > (IRlast - IRlast/2))
    2f26:	e1 2c       	mov	r14, r1
    2f28:	f1 2c       	mov	r15, r1
    2f2a:	20 91 e9 2a 	lds	r18, 0x2AE9
    2f2e:	30 91 ea 2a 	lds	r19, 0x2AEA
    2f32:	40 91 eb 2a 	lds	r20, 0x2AEB
    2f36:	50 91 ec 2a 	lds	r21, 0x2AEC
    2f3a:	da 01       	movw	r26, r20
    2f3c:	c9 01       	movw	r24, r18
    2f3e:	b6 95       	lsr	r27
    2f40:	a7 95       	ror	r26
    2f42:	97 95       	ror	r25
    2f44:	87 95       	ror	r24
    2f46:	4c 01       	movw	r8, r24
    2f48:	5d 01       	movw	r10, r26
    2f4a:	82 0e       	add	r8, r18
    2f4c:	93 1e       	adc	r9, r19
    2f4e:	a4 1e       	adc	r10, r20
    2f50:	b5 1e       	adc	r11, r21
    2f52:	c8 14       	cp	r12, r8
    2f54:	d9 04       	cpc	r13, r9
    2f56:	ea 04       	cpc	r14, r10
    2f58:	fb 04       	cpc	r15, r11
    2f5a:	20 f5       	brcc	.+72     	; 0x2fa4 <isIRStable+0xd0>
    2f5c:	49 01       	movw	r8, r18
    2f5e:	5a 01       	movw	r10, r20
    2f60:	88 1a       	sub	r8, r24
    2f62:	99 0a       	sbc	r9, r25
    2f64:	aa 0a       	sbc	r10, r26
    2f66:	bb 0a       	sbc	r11, r27
    2f68:	8c 14       	cp	r8, r12
    2f6a:	9d 04       	cpc	r9, r13
    2f6c:	ae 04       	cpc	r10, r14
    2f6e:	bf 04       	cpc	r11, r15
    2f70:	c8 f4       	brcc	.+50     	; 0x2fa4 <isIRStable+0xd0>
    {
        // If IR is within 3 dB, declare it stable
        // and perform some averaging
        IRlast = (samples->ir + (IRlast*3)) / 4;
    2f72:	a3 e0       	ldi	r26, 0x03	; 3
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	0e 94 1c 53 	call	0xa638	; 0xa638 <__muluhisi3>
    2f7a:	6c 0d       	add	r22, r12
    2f7c:	7d 1d       	adc	r23, r13
    2f7e:	8e 1d       	adc	r24, r14
    2f80:	9f 1d       	adc	r25, r15
    2f82:	22 e0       	ldi	r18, 0x02	; 2
    2f84:	96 95       	lsr	r25
    2f86:	87 95       	ror	r24
    2f88:	77 95       	ror	r23
    2f8a:	67 95       	ror	r22
    2f8c:	2a 95       	dec	r18
    2f8e:	d1 f7       	brne	.-12     	; 0x2f84 <isIRStable+0xb0>
    2f90:	60 93 e9 2a 	sts	0x2AE9, r22
    2f94:	70 93 ea 2a 	sts	0x2AEA, r23
    2f98:	80 93 eb 2a 	sts	0x2AEB, r24
    2f9c:	90 93 ec 2a 	sts	0x2AEC, r25
        return 1;
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	09 c0       	rjmp	.+18     	; 0x2fb6 <isIRStable+0xe2>
    }
    else
    {
        // Otherwise, return false and update
        // new IRlast value for next time
        IRlast = samples->ir;
    2fa4:	c0 92 e9 2a 	sts	0x2AE9, r12
    2fa8:	d0 92 ea 2a 	sts	0x2AEA, r13
    2fac:	e0 92 eb 2a 	sts	0x2AEB, r14
    2fb0:	f0 92 ec 2a 	sts	0x2AEC, r15
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
        // new IRlast value for next time
        IRlast = samples->ir;
        return 0;
    }
    return 0;
}
    2fb6:	ff 90       	pop	r15
    2fb8:	ef 90       	pop	r14
    2fba:	df 90       	pop	r13
    2fbc:	cf 90       	pop	r12
    2fbe:	bf 90       	pop	r11
    2fc0:	af 90       	pop	r10
    2fc2:	9f 90       	pop	r9
    2fc4:	8f 90       	pop	r8
    2fc6:	08 95       	ret

00002fc8 <IRCompensation>:
//             use { 11, 33, 33 }
//          Sm PD, PSRANGE = 1 
//             use { 23, 64, 56 }
////////////////////////////////////////////////////////////////////////////////
void IRCompensation(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u8 ircorrection[])
{
    2fc8:	0f 93       	push	r16
    2fca:	1f 93       	push	r17
    2fcc:	cf 93       	push	r28
    2fce:	df 93       	push	r29
    2fd0:	eb 01       	movw	r28, r22
    2fd2:	fa 01       	movw	r30, r20
    // Calculate correction factor based on the ALS IR + PS reading 
    // subtracting out the 256 count offset contained in both measurements
    // Full equation comes out to:
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    2fd4:	81 30       	cpi	r24, 0x01	; 1
    2fd6:	f1 f1       	breq	.+124    	; 0x3054 <__stack+0x55>
    2fd8:	00 f1       	brcs	.+64     	; 0x301a <__stack+0x1b>
    2fda:	82 30       	cpi	r24, 0x02	; 2
    2fdc:	09 f0       	breq	.+2      	; 0x2fe0 <IRCompensation+0x18>
    2fde:	56 c0       	rjmp	.+172    	; 0x308c <__stack+0x8d>
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
            Correction = Correction/10000;
            samples->ps2 = samples->ps2 + Correction;            
            break;
		case 2:
			Correction = ((u32)samples->ir + (u32)(samples->ps3) - 512) * (u32) ircorrection[proxChannel];
    2fe0:	0e 85       	ldd	r16, Y+14	; 0x0e
    2fe2:	1f 85       	ldd	r17, Y+15	; 0x0f
    2fe4:	a2 81       	ldd	r26, Z+2	; 0x02
    2fe6:	88 85       	ldd	r24, Y+8	; 0x08
    2fe8:	99 85       	ldd	r25, Y+9	; 0x09
    2fea:	98 01       	movw	r18, r16
    2fec:	40 e0       	ldi	r20, 0x00	; 0
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	28 0f       	add	r18, r24
    2ff2:	39 1f       	adc	r19, r25
    2ff4:	41 1d       	adc	r20, r1
    2ff6:	51 1d       	adc	r21, r1
    2ff8:	32 50       	subi	r19, 0x02	; 2
    2ffa:	41 09       	sbc	r20, r1
    2ffc:	51 09       	sbc	r21, r1
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	0e 94 1c 53 	call	0xa638	; 0xa638 <__muluhisi3>
			Correction = Correction/10000;
    3004:	20 e1       	ldi	r18, 0x10	; 16
    3006:	37 e2       	ldi	r19, 0x27	; 39
    3008:	40 e0       	ldi	r20, 0x00	; 0
    300a:	50 e0       	ldi	r21, 0x00	; 0
    300c:	0e 94 e5 52 	call	0xa5ca	; 0xa5ca <__udivmodsi4>
			samples->ps3 = samples->ps3 + Correction;
    3010:	20 0f       	add	r18, r16
    3012:	31 1f       	adc	r19, r17
    3014:	2e 87       	std	Y+14, r18	; 0x0e
    3016:	3f 87       	std	Y+15, r19	; 0x0f
			break;
    3018:	39 c0       	rjmp	.+114    	; 0x308c <__stack+0x8d>
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    301a:	0a 85       	ldd	r16, Y+10	; 0x0a
    301c:	1b 85       	ldd	r17, Y+11	; 0x0b
    301e:	a0 81       	ld	r26, Z
    3020:	88 85       	ldd	r24, Y+8	; 0x08
    3022:	99 85       	ldd	r25, Y+9	; 0x09
    3024:	98 01       	movw	r18, r16
    3026:	40 e0       	ldi	r20, 0x00	; 0
    3028:	50 e0       	ldi	r21, 0x00	; 0
    302a:	28 0f       	add	r18, r24
    302c:	39 1f       	adc	r19, r25
    302e:	41 1d       	adc	r20, r1
    3030:	51 1d       	adc	r21, r1
    3032:	32 50       	subi	r19, 0x02	; 2
    3034:	41 09       	sbc	r20, r1
    3036:	51 09       	sbc	r21, r1
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	0e 94 1c 53 	call	0xa638	; 0xa638 <__muluhisi3>
            Correction = Correction/10000;
    303e:	20 e1       	ldi	r18, 0x10	; 16
    3040:	37 e2       	ldi	r19, 0x27	; 39
    3042:	40 e0       	ldi	r20, 0x00	; 0
    3044:	50 e0       	ldi	r21, 0x00	; 0
    3046:	0e 94 e5 52 	call	0xa5ca	; 0xa5ca <__udivmodsi4>
            samples->ps1 = samples->ps1 + Correction;    
    304a:	20 0f       	add	r18, r16
    304c:	31 1f       	adc	r19, r17
    304e:	2a 87       	std	Y+10, r18	; 0x0a
    3050:	3b 87       	std	Y+11, r19	; 0x0b
    3052:	1c c0       	rjmp	.+56     	; 0x308c <__stack+0x8d>
            break;
        case 1:
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
    3054:	0c 85       	ldd	r16, Y+12	; 0x0c
    3056:	1d 85       	ldd	r17, Y+13	; 0x0d
    3058:	a1 81       	ldd	r26, Z+1	; 0x01
    305a:	88 85       	ldd	r24, Y+8	; 0x08
    305c:	99 85       	ldd	r25, Y+9	; 0x09
    305e:	98 01       	movw	r18, r16
    3060:	40 e0       	ldi	r20, 0x00	; 0
    3062:	50 e0       	ldi	r21, 0x00	; 0
    3064:	28 0f       	add	r18, r24
    3066:	39 1f       	adc	r19, r25
    3068:	41 1d       	adc	r20, r1
    306a:	51 1d       	adc	r21, r1
    306c:	32 50       	subi	r19, 0x02	; 2
    306e:	41 09       	sbc	r20, r1
    3070:	51 09       	sbc	r21, r1
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	0e 94 1c 53 	call	0xa638	; 0xa638 <__muluhisi3>
            Correction = Correction/10000;
    3078:	20 e1       	ldi	r18, 0x10	; 16
    307a:	37 e2       	ldi	r19, 0x27	; 39
    307c:	40 e0       	ldi	r20, 0x00	; 0
    307e:	50 e0       	ldi	r21, 0x00	; 0
    3080:	0e 94 e5 52 	call	0xa5ca	; 0xa5ca <__udivmodsi4>
            samples->ps2 = samples->ps2 + Correction;            
    3084:	20 0f       	add	r18, r16
    3086:	31 1f       	adc	r19, r17
    3088:	2c 87       	std	Y+12, r18	; 0x0c
    308a:	3d 87       	std	Y+13, r19	; 0x0d
			samples->ps3 = samples->ps3 + Correction;
			break;
        default:
            break;
    }
}
    308c:	df 91       	pop	r29
    308e:	cf 91       	pop	r28
    3090:	1f 91       	pop	r17
    3092:	0f 91       	pop	r16
    3094:	08 95       	ret

00003096 <calcBaseline>:
//          50  = Lg PD, PSRANGE=0, 180 mA 
//          10  = Lg PD, PSRANGE=1, 360 mA 
//          4  = Sm PD, PSRANGE=1, 360 mA 
////////////////////////////////////////////////////////////////////////////////
void calcBaseline(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u16 noise_margin)
{
    3096:	cf 92       	push	r12
    3098:	df 92       	push	r13
    309a:	ef 92       	push	r14
    309c:	ff 92       	push	r15
    309e:	0f 93       	push	r16
    30a0:	1f 93       	push	r17
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29

    static u16 xdata dynamic_baseline[3] = {0,0,0};

    u16 xdata *pPS;

    switch(proxChannel)
    30a6:	81 30       	cpi	r24, 0x01	; 1
    30a8:	49 f0       	breq	.+18     	; 0x30bc <calcBaseline+0x26>
    30aa:	28 f0       	brcs	.+10     	; 0x30b6 <calcBaseline+0x20>
    30ac:	82 30       	cpi	r24, 0x02	; 2
    30ae:	49 f4       	brne	.+18     	; 0x30c2 <calcBaseline+0x2c>
            break;
        case 1:
            pPS = &samples->ps2;
            break;
        case 2:
            pPS = &samples->ps3;
    30b0:	62 5f       	subi	r22, 0xF2	; 242
    30b2:	7f 4f       	sbci	r23, 0xFF	; 255
            break;
    30b4:	25 c0       	rjmp	.+74     	; 0x3100 <calcBaseline+0x6a>
    u16 xdata *pPS;

    switch(proxChannel)
    {
        case 0:
            pPS = &samples->ps1;
    30b6:	66 5f       	subi	r22, 0xF6	; 246
    30b8:	7f 4f       	sbci	r23, 0xFF	; 255
            break;
    30ba:	22 c0       	rjmp	.+68     	; 0x3100 <calcBaseline+0x6a>
        case 1:
            pPS = &samples->ps2;
    30bc:	64 5f       	subi	r22, 0xF4	; 244
    30be:	7f 4f       	sbci	r23, 0xFF	; 255
            break;
    30c0:	1f c0       	rjmp	.+62     	; 0x3100 <calcBaseline+0x6a>
            break;
        default:
            // Invalid Prox Channel. Reset all static variables 
            // to initial values
            average    = 0;
            dynamic_baseline[0] = 0;
    30c2:	10 92 e3 2a 	sts	0x2AE3, r1
    30c6:	10 92 e4 2a 	sts	0x2AE4, r1
            dynamic_baseline[1] = 0;
    30ca:	10 92 e5 2a 	sts	0x2AE5, r1
    30ce:	10 92 e6 2a 	sts	0x2AE6, r1
			dynamic_baseline[2] = 0;
    30d2:	10 92 e7 2a 	sts	0x2AE7, r1
    30d6:	10 92 e8 2a 	sts	0x2AE8, r1
            rollingMax[0] = 0;
    30da:	10 92 dd 2a 	sts	0x2ADD, r1
    30de:	10 92 de 2a 	sts	0x2ADE, r1
            rollingMax[1] = 0;
    30e2:	10 92 df 2a 	sts	0x2ADF, r1
    30e6:	10 92 e0 2a 	sts	0x2AE0, r1
			rollingMax[2] = 0;
    30ea:	10 92 e1 2a 	sts	0x2AE1, r1
    30ee:	10 92 e2 2a 	sts	0x2AE2, r1
            Maxcount[0]   = 0;
    30f2:	10 92 da 2a 	sts	0x2ADA, r1
            Maxcount[1]   = 0;
    30f6:	10 92 db 2a 	sts	0x2ADB, r1
			Maxcount[2]   = 0;
    30fa:	10 92 dc 2a 	sts	0x2ADC, r1
            return;
    30fe:	8a c0       	rjmp	.+276    	; 0x3214 <calcBaseline+0x17e>
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    3100:	c8 2e       	mov	r12, r24
    3102:	d1 2c       	mov	r13, r1
    3104:	f6 01       	movw	r30, r12
    3106:	ee 0f       	add	r30, r30
    3108:	ff 1f       	adc	r31, r31
    310a:	ef 01       	movw	r28, r30
    310c:	cd 51       	subi	r28, 0x1D	; 29
    310e:	d5 4d       	sbci	r29, 0xD5	; 213
    3110:	88 81       	ld	r24, Y
    3112:	99 81       	ldd	r25, Y+1	; 0x01
    3114:	db 01       	movw	r26, r22
    3116:	6d 91       	ld	r22, X+
    3118:	7c 91       	ld	r23, X
    311a:	89 2b       	or	r24, r25
    311c:	71 f4       	brne	.+28     	; 0x313a <calcBaseline+0xa4>
    311e:	cf 01       	movw	r24, r30
    3120:	83 51       	subi	r24, 0x13	; 19
    3122:	95 4d       	sbci	r25, 0xD5	; 213
    3124:	dc 01       	movw	r26, r24
    3126:	8d 91       	ld	r24, X+
    3128:	9c 91       	ld	r25, X
    312a:	68 17       	cp	r22, r24
    312c:	79 07       	cpc	r23, r25
    312e:	18 f4       	brcc	.+6      	; 0x3136 <calcBaseline+0xa0>
    {
       dynamic_baseline[proxChannel] = *pPS;
    3130:	68 83       	st	Y, r22
    3132:	79 83       	std	Y+1, r23	; 0x01
    3134:	02 c0       	rjmp	.+4      	; 0x313a <calcBaseline+0xa4>
    } else if ( dynamic_baseline[proxChannel] == 0)
    {
       dynamic_baseline[proxChannel] = maxLeakage[proxChannel];
    3136:	88 83       	st	Y, r24
    3138:	99 83       	std	Y+1, r25	; 0x01
    } 

    // Only process samples which are below the maxLeakage values, anything 
    // higher is a signal created by an object in front of the system which 
    // should not be baselined
    if ( *pPS < maxLeakage[proxChannel] )
    313a:	ef 01       	movw	r28, r30
    313c:	c3 51       	subi	r28, 0x13	; 19
    313e:	d5 4d       	sbci	r29, 0xD5	; 213
    3140:	88 81       	ld	r24, Y
    3142:	99 81       	ldd	r25, Y+1	; 0x01
    3144:	68 17       	cp	r22, r24
    3146:	79 07       	cpc	r23, r25
    3148:	08 f0       	brcs	.+2      	; 0x314c <calcBaseline+0xb6>
    314a:	4d c0       	rjmp	.+154    	; 0x31e6 <calcBaseline+0x150>
    {
        average = dynamic_baseline[proxChannel]*7;
    314c:	ef 01       	movw	r28, r30
    314e:	cd 51       	subi	r28, 0x1D	; 29
    3150:	d5 4d       	sbci	r29, 0xD5	; 213
    3152:	09 90       	ld	r0, Y+
    3154:	d8 81       	ld	r29, Y
    3156:	c0 2d       	mov	r28, r0
    3158:	27 e0       	ldi	r18, 0x07	; 7
    315a:	2c 9f       	mul	r18, r28
    315c:	c0 01       	movw	r24, r0
    315e:	2d 9f       	mul	r18, r29
    3160:	90 0d       	add	r25, r0
    3162:	11 24       	eor	r1, r1
        average = average + (u32)(*pPS);
    3164:	8b 01       	movw	r16, r22
    3166:	20 e0       	ldi	r18, 0x00	; 0
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	08 0f       	add	r16, r24
    316c:	19 1f       	adc	r17, r25
    316e:	21 1d       	adc	r18, r1
    3170:	31 1d       	adc	r19, r1
        average = average/8;
    3172:	a3 e0       	ldi	r26, 0x03	; 3
    3174:	36 95       	lsr	r19
    3176:	27 95       	ror	r18
    3178:	17 95       	ror	r17
    317a:	07 95       	ror	r16
    317c:	aa 95       	dec	r26
    317e:	d1 f7       	brne	.-12     	; 0x3174 <calcBaseline+0xde>
        // If the new sample has not changed the baseline average by a large 
        // amount, then allow the rollingMax variable to update. If the new 
        // sample did move the baseline average by a lot, then it's possible 
        // it was created by a proximity event. So, do not consider this part 
        // of the rollingMax
        if ( dynamic_baseline[proxChannel] <= (u16)average + (u16)average/64
    3180:	c8 01       	movw	r24, r16
    3182:	b6 e0       	ldi	r27, 0x06	; 6
    3184:	96 95       	lsr	r25
    3186:	87 95       	ror	r24
    3188:	ba 95       	dec	r27
    318a:	e1 f7       	brne	.-8      	; 0x3184 <calcBaseline+0xee>
    318c:	7c 01       	movw	r14, r24
    318e:	e0 0e       	add	r14, r16
    3190:	f1 1e       	adc	r15, r17
    3192:	ec 16       	cp	r14, r28
    3194:	fd 06       	cpc	r15, r29
    3196:	10 f1       	brcs	.+68     	; 0x31dc <calcBaseline+0x146>
            && dynamic_baseline[proxChannel] >= (u16)average - (u16)average/64)
    3198:	d8 01       	movw	r26, r16
    319a:	a8 1b       	sub	r26, r24
    319c:	b9 0b       	sbc	r27, r25
    319e:	ca 17       	cp	r28, r26
    31a0:	db 07       	cpc	r29, r27
    31a2:	e0 f0       	brcs	.+56     	; 0x31dc <calcBaseline+0x146>
        {
            if ( rollingMax[proxChannel] == 0 )
    31a4:	ef 01       	movw	r28, r30
    31a6:	c3 52       	subi	r28, 0x23	; 35
    31a8:	d5 4d       	sbci	r29, 0xD5	; 213
    31aa:	e8 80       	ld	r14, Y
    31ac:	f9 80       	ldd	r15, Y+1	; 0x01
    31ae:	d6 01       	movw	r26, r12
    31b0:	a6 52       	subi	r26, 0x26	; 38
    31b2:	b5 4d       	sbci	r27, 0xD5	; 213
    31b4:	e1 14       	cp	r14, r1
    31b6:	f1 04       	cpc	r15, r1
    31b8:	71 f0       	breq	.+28     	; 0x31d6 <calcBaseline+0x140>
            {
                rollingMax[proxChannel] = *pPS;
                Maxcount[proxChannel] = 0;
            } 
            else if ( rollingMax[proxChannel] >= *pPS )
    31ba:	e6 16       	cp	r14, r22
    31bc:	f7 06       	cpc	r15, r23
    31be:	58 f0       	brcs	.+22     	; 0x31d6 <calcBaseline+0x140>
            {
                (Maxcount[proxChannel]) += 1;
    31c0:	8c 91       	ld	r24, X
    31c2:	8f 5f       	subi	r24, 0xFF	; 255
    31c4:	8c 93       	st	X, r24
                if ( Maxcount[proxChannel] > 64 )
    31c6:	81 34       	cpi	r24, 0x41	; 65
    31c8:	48 f0       	brcs	.+18     	; 0x31dc <calcBaseline+0x146>
                {
                    (rollingMax[proxChannel]) -= 1;
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	e8 1a       	sub	r14, r24
    31ce:	f1 08       	sbc	r15, r1
    31d0:	e8 82       	st	Y, r14
    31d2:	f9 82       	std	Y+1, r15	; 0x01
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <calcBaseline+0x144>
                    Maxcount[proxChannel] = 0;
                }
            } 
            else
            {
                rollingMax[proxChannel] = *pPS;
    31d6:	68 83       	st	Y, r22
    31d8:	79 83       	std	Y+1, r23	; 0x01
                Maxcount[proxChannel] = 0;
    31da:	1c 92       	st	X, r1
            }
        }

        // Update the stored baseline average with the new value
        dynamic_baseline[proxChannel] = (u16)average;
    31dc:	df 01       	movw	r26, r30
    31de:	ad 51       	subi	r26, 0x1D	; 29
    31e0:	b5 4d       	sbci	r27, 0xD5	; 213
    31e2:	0d 93       	st	X+, r16
    31e4:	1c 93       	st	X, r17
    }

    // Use the rollingMax value to determine the baseline level
    if ( rollingMax[proxChannel] != 0 )
    31e6:	df 01       	movw	r26, r30
    31e8:	a3 52       	subi	r26, 0x23	; 35
    31ea:	b5 4d       	sbci	r27, 0xD5	; 213
    31ec:	8d 91       	ld	r24, X+
    31ee:	9c 91       	ld	r25, X
    31f0:	df 01       	movw	r26, r30
    31f2:	a2 53       	subi	r26, 0x32	; 50
    31f4:	b3 4d       	sbci	r27, 0xD3	; 211
    31f6:	00 97       	sbiw	r24, 0x00	; 0
    31f8:	29 f0       	breq	.+10     	; 0x3204 <calcBaseline+0x16e>
    {
        baseline[proxChannel] = rollingMax[proxChannel] + noise_margin;
    31fa:	48 0f       	add	r20, r24
    31fc:	59 1f       	adc	r21, r25
    31fe:	4d 93       	st	X+, r20
    3200:	5c 93       	st	X, r21
    3202:	08 c0       	rjmp	.+16     	; 0x3214 <calcBaseline+0x17e>
    } 
    else
    {  // If the rollingMax has not been determined yet, use the average
        baseline[proxChannel] = (u16) dynamic_baseline[proxChannel] + noise_margin;
    3204:	ed 51       	subi	r30, 0x1D	; 29
    3206:	f5 4d       	sbci	r31, 0xD5	; 213
    3208:	80 81       	ld	r24, Z
    320a:	91 81       	ldd	r25, Z+1	; 0x01
    320c:	84 0f       	add	r24, r20
    320e:	95 1f       	adc	r25, r21
    3210:	8d 93       	st	X+, r24
    3212:	9c 93       	st	X, r25
    }
}
    3214:	df 91       	pop	r29
    3216:	cf 91       	pop	r28
    3218:	1f 91       	pop	r17
    321a:	0f 91       	pop	r16
    321c:	ff 90       	pop	r15
    321e:	ef 90       	pop	r14
    3220:	df 90       	pop	r13
    3222:	cf 90       	pop	r12
    3224:	08 95       	ret

00003226 <si114x_process_samples>:
u16 code scale           =  3;
u8  code ircorrection[3] =  { 17, 35, 29 };
#endif

void si114x_process_samples(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples)
{
    3226:	ef 92       	push	r14
    3228:	ff 92       	push	r15
    322a:	0f 93       	push	r16
    322c:	1f 93       	push	r17
    322e:	cf 93       	push	r28
    3230:	df 93       	push	r29
    3232:	7c 01       	movw	r14, r24
    3234:	eb 01       	movw	r28, r22
    if ((maxLeakage[0]==0)&&(maxLeakage[1]==0)&&(maxLeakage[2]==0)&&(initial_baseline_counter==128))
    3236:	80 91 ed 2a 	lds	r24, 0x2AED
    323a:	90 91 ee 2a 	lds	r25, 0x2AEE
    323e:	89 2b       	or	r24, r25
    3240:	a1 f4       	brne	.+40     	; 0x326a <si114x_process_samples+0x44>
    3242:	80 91 ef 2a 	lds	r24, 0x2AEF
    3246:	90 91 f0 2a 	lds	r25, 0x2AF0
    324a:	89 2b       	or	r24, r25
    324c:	71 f4       	brne	.+28     	; 0x326a <si114x_process_samples+0x44>
    324e:	80 91 f1 2a 	lds	r24, 0x2AF1
    3252:	90 91 f2 2a 	lds	r25, 0x2AF2
    3256:	89 2b       	or	r24, r25
    3258:	41 f4       	brne	.+16     	; 0x326a <si114x_process_samples+0x44>
    325a:	80 91 10 20 	lds	r24, 0x2010
    325e:	80 38       	cpi	r24, 0x80	; 128
    3260:	21 f4       	brne	.+8      	; 0x326a <si114x_process_samples+0x44>
    {
#ifdef DEBUG_ON
        puts("DEBUG: Computing Baseline. Make sure nothing is in the vicinity of the EVB");
    3262:	8c ed       	ldi	r24, 0xDC	; 220
    3264:	94 e2       	ldi	r25, 0x24	; 36
    3266:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
#endif
    }

    if (initial_baseline_counter != 0)
    326a:	80 91 10 20 	lds	r24, 0x2010
    326e:	88 23       	and	r24, r24
    3270:	09 f4       	brne	.+2      	; 0x3274 <si114x_process_samples+0x4e>
    3272:	8a c0       	rjmp	.+276    	; 0x3388 <si114x_process_samples+0x162>
    {
        // The first 128 samples are used to establish the initial 
        // baseline
        if ( initial_baseline_counter > 1 )
    3274:	82 30       	cpi	r24, 0x02	; 2
    3276:	48 f1       	brcs	.+82     	; 0x32ca <si114x_process_samples+0xa4>
        {
            // Look for maximum
            if( maxLeakage[0] < samples->ps1) maxLeakage[0] = samples->ps1;
    3278:	8a 85       	ldd	r24, Y+10	; 0x0a
    327a:	9b 85       	ldd	r25, Y+11	; 0x0b
    327c:	20 91 ed 2a 	lds	r18, 0x2AED
    3280:	30 91 ee 2a 	lds	r19, 0x2AEE
    3284:	28 17       	cp	r18, r24
    3286:	39 07       	cpc	r19, r25
    3288:	20 f4       	brcc	.+8      	; 0x3292 <si114x_process_samples+0x6c>
    328a:	80 93 ed 2a 	sts	0x2AED, r24
    328e:	90 93 ee 2a 	sts	0x2AEE, r25
            if( maxLeakage[1] < samples->ps2) maxLeakage[1] = samples->ps2;
    3292:	8c 85       	ldd	r24, Y+12	; 0x0c
    3294:	9d 85       	ldd	r25, Y+13	; 0x0d
    3296:	20 91 ef 2a 	lds	r18, 0x2AEF
    329a:	30 91 f0 2a 	lds	r19, 0x2AF0
    329e:	28 17       	cp	r18, r24
    32a0:	39 07       	cpc	r19, r25
    32a2:	20 f4       	brcc	.+8      	; 0x32ac <si114x_process_samples+0x86>
    32a4:	80 93 ef 2a 	sts	0x2AEF, r24
    32a8:	90 93 f0 2a 	sts	0x2AF0, r25
			if( maxLeakage[2] < samples->ps3) maxLeakage[2] = samples->ps3;
    32ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    32ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    32b0:	20 91 f1 2a 	lds	r18, 0x2AF1
    32b4:	30 91 f2 2a 	lds	r19, 0x2AF2
    32b8:	28 17       	cp	r18, r24
    32ba:	39 07       	cpc	r19, r25
    32bc:	08 f0       	brcs	.+2      	; 0x32c0 <si114x_process_samples+0x9a>
    32be:	5e c0       	rjmp	.+188    	; 0x337c <si114x_process_samples+0x156>
    32c0:	80 93 f1 2a 	sts	0x2AF1, r24
    32c4:	90 93 f2 2a 	sts	0x2AF2, r25
    32c8:	59 c0       	rjmp	.+178    	; 0x337c <si114x_process_samples+0x156>
        }
        else
        {
#ifdef DEBUG_ON
            printf("DEBUG: Initial Baseline Calculated, PS1 = %d, PS2 = %d, PS3 = %d \n", maxLeakage[0], maxLeakage[1],maxLeakage[2]);
    32ca:	80 91 f2 2a 	lds	r24, 0x2AF2
    32ce:	8f 93       	push	r24
    32d0:	80 91 f1 2a 	lds	r24, 0x2AF1
    32d4:	8f 93       	push	r24
    32d6:	80 91 f0 2a 	lds	r24, 0x2AF0
    32da:	8f 93       	push	r24
    32dc:	80 91 ef 2a 	lds	r24, 0x2AEF
    32e0:	8f 93       	push	r24
    32e2:	80 91 ee 2a 	lds	r24, 0x2AEE
    32e6:	8f 93       	push	r24
    32e8:	80 91 ed 2a 	lds	r24, 0x2AED
    32ec:	8f 93       	push	r24
    32ee:	87 e2       	ldi	r24, 0x27	; 39
    32f0:	95 e2       	ldi	r25, 0x25	; 37
    32f2:	9f 93       	push	r25
    32f4:	8f 93       	push	r24
    32f6:	0e 94 13 56 	call	0xac26	; 0xac26 <printf>
#endif
			
            // Set Max Leakage 
            maxLeakage[0] = maxLeakage[0] + noise_margin*2;
    32fa:	60 91 0e 20 	lds	r22, 0x200E
    32fe:	70 91 0f 20 	lds	r23, 0x200F
    3302:	66 0f       	add	r22, r22
    3304:	77 1f       	adc	r23, r23
    3306:	40 91 ed 2a 	lds	r20, 0x2AED
    330a:	50 91 ee 2a 	lds	r21, 0x2AEE
    330e:	46 0f       	add	r20, r22
    3310:	57 1f       	adc	r21, r23
    3312:	40 93 ed 2a 	sts	0x2AED, r20
    3316:	50 93 ee 2a 	sts	0x2AEE, r21
            maxLeakage[1] = maxLeakage[1] + noise_margin*2;
    331a:	20 91 ef 2a 	lds	r18, 0x2AEF
    331e:	30 91 f0 2a 	lds	r19, 0x2AF0
    3322:	26 0f       	add	r18, r22
    3324:	37 1f       	adc	r19, r23
    3326:	20 93 ef 2a 	sts	0x2AEF, r18
    332a:	30 93 f0 2a 	sts	0x2AF0, r19
			maxLeakage[2] = maxLeakage[2] + noise_margin*2;
    332e:	80 91 f1 2a 	lds	r24, 0x2AF1
    3332:	90 91 f2 2a 	lds	r25, 0x2AF2
    3336:	86 0f       	add	r24, r22
    3338:	97 1f       	adc	r25, r23
    333a:	80 93 f1 2a 	sts	0x2AF1, r24
    333e:	90 93 f2 2a 	sts	0x2AF2, r25

            baseline[0] = maxLeakage[0];
    3342:	40 93 ce 2c 	sts	0x2CCE, r20
    3346:	50 93 cf 2c 	sts	0x2CCF, r21
            baseline[1] = maxLeakage[1];
    334a:	20 93 d0 2c 	sts	0x2CD0, r18
    334e:	30 93 d1 2c 	sts	0x2CD1, r19
			baseline[2] = maxLeakage[2];
    3352:	80 93 d2 2c 	sts	0x2CD2, r24
    3356:	90 93 d3 2c 	sts	0x2CD3, r25
			
			env.baseline[0] = baseline[0];
    335a:	40 93 28 2b 	sts	0x2B28, r20
    335e:	50 93 29 2b 	sts	0x2B29, r21
			env.baseline[1] = baseline[1];
    3362:	20 93 2a 2b 	sts	0x2B2A, r18
    3366:	30 93 2b 2b 	sts	0x2B2B, r19
			env.baseline[2] = baseline[2];
    336a:	80 93 2c 2b 	sts	0x2B2C, r24
    336e:	90 93 2d 2b 	sts	0x2B2D, r25
    3372:	8d b7       	in	r24, 0x3d	; 61
    3374:	9e b7       	in	r25, 0x3e	; 62
    3376:	08 96       	adiw	r24, 0x08	; 8
    3378:	8d bf       	out	0x3d, r24	; 61
    337a:	9e bf       	out	0x3e, r25	; 62
        }
        
        // Decrement counter
        initial_baseline_counter--;
    337c:	80 91 10 20 	lds	r24, 0x2010
    3380:	81 50       	subi	r24, 0x01	; 1
    3382:	80 93 10 20 	sts	0x2010, r24
    3386:	67 c0       	rjmp	.+206    	; 0x3456 <si114x_process_samples+0x230>
    else
    {
        //
        // Once the baseline has been set, do the actual loop
        // The first thing that happens is to check for saturation events
        if(samples->ps1 > 48000 || samples->ps2 > 48000 || samples->ps3 > 48000)
    3388:	8a 85       	ldd	r24, Y+10	; 0x0a
    338a:	9b 85       	ldd	r25, Y+11	; 0x0b
    338c:	81 38       	cpi	r24, 0x81	; 129
    338e:	9b 4b       	sbci	r25, 0xBB	; 187
    3390:	50 f4       	brcc	.+20     	; 0x33a6 <si114x_process_samples+0x180>
    3392:	8c 85       	ldd	r24, Y+12	; 0x0c
    3394:	9d 85       	ldd	r25, Y+13	; 0x0d
    3396:	81 38       	cpi	r24, 0x81	; 129
    3398:	9b 4b       	sbci	r25, 0xBB	; 187
    339a:	28 f4       	brcc	.+10     	; 0x33a6 <si114x_process_samples+0x180>
    339c:	8e 85       	ldd	r24, Y+14	; 0x0e
    339e:	9f 85       	ldd	r25, Y+15	; 0x0f
    33a0:	81 38       	cpi	r24, 0x81	; 129
    33a2:	9b 4b       	sbci	r25, 0xBB	; 187
    33a4:	50 f0       	brcs	.+20     	; 0x33ba <si114x_process_samples+0x194>
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
#ifdef DEBUG_ON
            puts("DEBUG: Samples are Saturated");
    33a6:	8a e6       	ldi	r24, 0x6A	; 106
    33a8:	95 e2       	ldi	r25, 0x25	; 37

                SliderAlgorithm(si114x_handle, samples, scale);
            }
        }
    }
}
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	1f 91       	pop	r17
    33b0:	0f 91       	pop	r16
    33b2:	ff 90       	pop	r15
    33b4:	ef 90       	pop	r14
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
#ifdef DEBUG_ON
            puts("DEBUG: Samples are Saturated");
    33b6:	0c 94 24 56 	jmp	0xac48	; 0xac48 <puts>
#endif
		}
        else
        { 
            if( isIRStable( samples ) )
    33ba:	ce 01       	movw	r24, r28
    33bc:	8b dd       	rcall	.-1258   	; 0x2ed4 <isIRStable>
    33be:	88 23       	and	r24, r24
    33c0:	09 f4       	brne	.+2      	; 0x33c4 <si114x_process_samples+0x19e>
    33c2:	49 c0       	rjmp	.+146    	; 0x3456 <si114x_process_samples+0x230>
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    33c4:	0a 85       	ldd	r16, Y+10	; 0x0a
    33c6:	1b 85       	ldd	r17, Y+11	; 0x0b
    33c8:	88 85       	ldd	r24, Y+8	; 0x08
    33ca:	99 85       	ldd	r25, Y+9	; 0x09
    33cc:	98 01       	movw	r18, r16
    33ce:	40 e0       	ldi	r20, 0x00	; 0
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	28 0f       	add	r18, r24
    33d4:	39 1f       	adc	r19, r25
    33d6:	41 1d       	adc	r20, r1
    33d8:	51 1d       	adc	r21, r1
    33da:	32 50       	subi	r19, 0x02	; 2
    33dc:	41 09       	sbc	r20, r1
    33de:	51 09       	sbc	r21, r1
    33e0:	a0 91 09 20 	lds	r26, 0x2009
    33e4:	b0 e0       	ldi	r27, 0x00	; 0
    33e6:	0e 94 1c 53 	call	0xa638	; 0xa638 <__muluhisi3>
            Correction = Correction/10000;
    33ea:	20 e1       	ldi	r18, 0x10	; 16
    33ec:	37 e2       	ldi	r19, 0x27	; 39
    33ee:	40 e0       	ldi	r20, 0x00	; 0
    33f0:	50 e0       	ldi	r21, 0x00	; 0
    33f2:	0e 94 e5 52 	call	0xa5ca	; 0xa5ca <__udivmodsi4>
            samples->ps1 = samples->ps1 + Correction;    
    33f6:	20 0f       	add	r18, r16
    33f8:	31 1f       	adc	r19, r17
    33fa:	2a 87       	std	Y+10, r18	; 0x0a
    33fc:	3b 87       	std	Y+11, r19	; 0x0b
        else
        { 
            if( isIRStable( samples ) )
            {
                IRCompensation( 0, samples, ircorrection );  // IR Ambient Compensation for PS1 Channel
                IRCompensation( 1, samples, ircorrection );  // IR Ambient Compensation for PS2 Channel
    33fe:	49 e0       	ldi	r20, 0x09	; 9
    3400:	50 e2       	ldi	r21, 0x20	; 32
    3402:	be 01       	movw	r22, r28
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	e0 dd       	rcall	.-1088   	; 0x2fc8 <IRCompensation>
				IRCompensation( 2, samples, ircorrection );  // IR Ambient Compensation for PS3 Channel
    3408:	49 e0       	ldi	r20, 0x09	; 9
    340a:	50 e2       	ldi	r21, 0x20	; 32
    340c:	be 01       	movw	r22, r28
    340e:	82 e0       	ldi	r24, 0x02	; 2
    3410:	db dd       	rcall	.-1098   	; 0x2fc8 <IRCompensation>

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
    3412:	40 91 0e 20 	lds	r20, 0x200E
    3416:	50 91 0f 20 	lds	r21, 0x200F
    341a:	be 01       	movw	r22, r28
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	3b de       	rcall	.-906    	; 0x3096 <calcBaseline>
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
    3420:	40 91 0e 20 	lds	r20, 0x200E
    3424:	50 91 0f 20 	lds	r21, 0x200F
    3428:	be 01       	movw	r22, r28
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	34 de       	rcall	.-920    	; 0x3096 <calcBaseline>
				calcBaseline( 2 , samples, noise_margin); // Calculate PS3 Baseline
    342e:	40 91 0e 20 	lds	r20, 0x200E
    3432:	50 91 0f 20 	lds	r21, 0x200F
    3436:	be 01       	movw	r22, r28
    3438:	82 e0       	ldi	r24, 0x02	; 2
    343a:	2d de       	rcall	.-934    	; 0x3096 <calcBaseline>

                SliderAlgorithm(si114x_handle, samples, scale);
    343c:	40 91 0c 20 	lds	r20, 0x200C
    3440:	50 91 0d 20 	lds	r21, 0x200D
    3444:	be 01       	movw	r22, r28
    3446:	c7 01       	movw	r24, r14
            }
        }
    }
}
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	1f 91       	pop	r17
    344e:	0f 91       	pop	r16
    3450:	ff 90       	pop	r15
    3452:	ef 90       	pop	r14

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
				calcBaseline( 2 , samples, noise_margin); // Calculate PS3 Baseline

                SliderAlgorithm(si114x_handle, samples, scale);
    3454:	10 c2       	rjmp	.+1056   	; 0x3876 <SliderAlgorithm>
            }
        }
    }
}
    3456:	df 91       	pop	r29
    3458:	cf 91       	pop	r28
    345a:	1f 91       	pop	r17
    345c:	0f 91       	pop	r16
    345e:	ff 90       	pop	r15
    3460:	ef 90       	pop	r14
    3462:	08 95       	ret

00003464 <PortSet>:

s16 Si114xBlockRead(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
}
    3464:	08 95       	ret

00003466 <Si114xWriteToRegister>:
    3466:	ef 92       	push	r14
    3468:	0f 93       	push	r16
    346a:	1f 93       	push	r17
    346c:	cf 93       	push	r28
    346e:	df 93       	push	r29
    3470:	1f 92       	push	r1
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62
    3476:	26 2f       	mov	r18, r22
    3478:	49 83       	std	Y+1, r20	; 0x01
    347a:	ee 24       	eor	r14, r14
    347c:	e3 94       	inc	r14
    347e:	8e 01       	movw	r16, r28
    3480:	0f 5f       	subi	r16, 0xFF	; 255
    3482:	1f 4f       	sbci	r17, 0xFF	; 255
    3484:	48 ee       	ldi	r20, 0xE8	; 232
    3486:	53 e0       	ldi	r21, 0x03	; 3
    3488:	6a e5       	ldi	r22, 0x5A	; 90
    348a:	80 e8       	ldi	r24, 0x80	; 128
    348c:	94 e0       	ldi	r25, 0x04	; 4
    348e:	fc d4       	rcall	.+2552   	; 0x3e88 <twi_write_packet>
    3490:	80 e0       	ldi	r24, 0x00	; 0
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	0f 90       	pop	r0
    3496:	df 91       	pop	r29
    3498:	cf 91       	pop	r28
    349a:	1f 91       	pop	r17
    349c:	0f 91       	pop	r16
    349e:	ef 90       	pop	r14
    34a0:	08 95       	ret

000034a2 <Si114xReadFromRegister>:
    34a2:	ef 92       	push	r14
    34a4:	0f 93       	push	r16
    34a6:	1f 93       	push	r17
    34a8:	cf 93       	push	r28
    34aa:	df 93       	push	r29
    34ac:	1f 92       	push	r1
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
    34b2:	26 2f       	mov	r18, r22
    34b4:	ee 24       	eor	r14, r14
    34b6:	e3 94       	inc	r14
    34b8:	8e 01       	movw	r16, r28
    34ba:	0f 5f       	subi	r16, 0xFF	; 255
    34bc:	1f 4f       	sbci	r17, 0xFF	; 255
    34be:	48 ee       	ldi	r20, 0xE8	; 232
    34c0:	53 e0       	ldi	r21, 0x03	; 3
    34c2:	6a e5       	ldi	r22, 0x5A	; 90
    34c4:	80 e8       	ldi	r24, 0x80	; 128
    34c6:	94 e0       	ldi	r25, 0x04	; 4
    34c8:	8e d4       	rcall	.+2332   	; 0x3de6 <twi_read_packet>
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	0f 90       	pop	r0
    34d0:	df 91       	pop	r29
    34d2:	cf 91       	pop	r28
    34d4:	1f 91       	pop	r17
    34d6:	0f 91       	pop	r16
    34d8:	ef 90       	pop	r14
    34da:	08 95       	ret

000034dc <Si114xBlockWrite>:
    34dc:	ef 92       	push	r14
    34de:	0f 93       	push	r16
    34e0:	1f 93       	push	r17
    34e2:	89 01       	movw	r16, r18
    34e4:	e4 2e       	mov	r14, r20
    34e6:	26 2f       	mov	r18, r22
    34e8:	48 ee       	ldi	r20, 0xE8	; 232
    34ea:	53 e0       	ldi	r21, 0x03	; 3
    34ec:	6a e5       	ldi	r22, 0x5A	; 90
    34ee:	80 e8       	ldi	r24, 0x80	; 128
    34f0:	94 e0       	ldi	r25, 0x04	; 4
    34f2:	ca d4       	rcall	.+2452   	; 0x3e88 <twi_write_packet>
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	1f 91       	pop	r17
    34f8:	0f 91       	pop	r16
    34fa:	ef 90       	pop	r14
    34fc:	08 95       	ret

000034fe <delay_10ms>:
    34fe:	2f ef       	ldi	r18, 0xFF	; 255
    3500:	89 ef       	ldi	r24, 0xF9	; 249
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	21 50       	subi	r18, 0x01	; 1
    3506:	80 40       	sbci	r24, 0x00	; 0
    3508:	90 40       	sbci	r25, 0x00	; 0
    350a:	e1 f7       	brne	.-8      	; 0x3504 <delay_10ms+0x6>
    350c:	00 c0       	rjmp	.+0      	; 0x350e <delay_10ms+0x10>
    350e:	00 00       	nop
    3510:	08 95       	ret

00003512 <QS_Counts_to_Distance>:
// In the IR Slider, the distance between LED to sensor is the same for each of
// the two LEDs. For this reason, it is possible to have a single counts to
// distance function. 
//
s16 QS_Counts_to_Distance (u16 counts, u8 led)
{
    3512:	ff 92       	push	r15
    3514:	0f 93       	push	r16
    3516:	1f 93       	push	r17
    3518:	cf 93       	push	r28
    351a:	df 93       	push	r29
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
    3520:	c2 5a       	subi	r28, 0xA2	; 162
    3522:	d1 09       	sbc	r29, r1
    3524:	cd bf       	out	0x3d, r28	; 61
    3526:	de bf       	out	0x3e, r29	; 62
    u16 code   offset_1[9]    = {29, 72, 55, 75, 95, 131, 177, 238, 300};
    3528:	42 e1       	ldi	r20, 0x12	; 18
    352a:	e5 e2       	ldi	r30, 0x25	; 37
    352c:	f0 e2       	ldi	r31, 0x20	; 32
    352e:	de 01       	movw	r26, r28
    3530:	af 56       	subi	r26, 0x6F	; 111
    3532:	bf 4f       	sbci	r27, 0xFF	; 255
    3534:	01 90       	ld	r0, Z+
    3536:	0d 92       	st	X+, r0
    3538:	4a 95       	dec	r20
    353a:	e1 f7       	brne	.-8      	; 0x3534 <QS_Counts_to_Distance+0x22>
    u16 code   slope_1[9]     = {29, 173, 102, 237, 429, 1215, 3012, 9990, 26214};	
    353c:	42 e1       	ldi	r20, 0x12	; 18
    353e:	e7 e3       	ldi	r30, 0x37	; 55
    3540:	f0 e2       	ldi	r31, 0x20	; 32
    3542:	de 01       	movw	r26, r28
    3544:	a1 58       	subi	r26, 0x81	; 129
    3546:	bf 4f       	sbci	r27, 0xFF	; 255
    3548:	01 90       	ld	r0, Z+
    354a:	0d 92       	st	X+, r0
    354c:	4a 95       	dec	r20
    354e:	e1 f7       	brne	.-8      	; 0x3548 <QS_Counts_to_Distance+0x36>
    u16 code   piecewise_brackets_1[9] = {19805, 16015, 9607, 6838, 3014, 1666, 578, 250, 125};	
    3550:	42 e1       	ldi	r20, 0x12	; 18
    3552:	e9 e4       	ldi	r30, 0x49	; 73
    3554:	f0 e2       	ldi	r31, 0x20	; 32
    3556:	de 01       	movw	r26, r28
    3558:	a3 59       	subi	r26, 0x93	; 147
    355a:	bf 4f       	sbci	r27, 0xFF	; 255
    355c:	01 90       	ld	r0, Z+
    355e:	0d 92       	st	X+, r0
    3560:	4a 95       	dec	r20
    3562:	e1 f7       	brne	.-8      	; 0x355c <QS_Counts_to_Distance+0x4a>
	
    u16 code   offset_2[9]    = {27, 39, 51, 75, 96, 132, 177, 236, 299};
    3564:	42 e1       	ldi	r20, 0x12	; 18
    3566:	eb e5       	ldi	r30, 0x5B	; 91
    3568:	f0 e2       	ldi	r31, 0x20	; 32
    356a:	de 01       	movw	r26, r28
    356c:	a5 5a       	subi	r26, 0xA5	; 165
    356e:	bf 4f       	sbci	r27, 0xFF	; 255
    3570:	01 90       	ld	r0, Z+
    3572:	0d 92       	st	X+, r0
    3574:	4a 95       	dec	r20
    3576:	e1 f7       	brne	.-8      	; 0x3570 <QS_Counts_to_Distance+0x5e>
    u16 code   slope_2[9]     = {27, 39, 95, 298, 538, 1481, 3637, 11457, 31208};	
    3578:	42 e1       	ldi	r20, 0x12	; 18
    357a:	ed e6       	ldi	r30, 0x6D	; 109
    357c:	f0 e2       	ldi	r31, 0x20	; 32
    357e:	de 01       	movw	r26, r28
    3580:	a7 5b       	subi	r26, 0xB7	; 183
    3582:	bf 4f       	sbci	r27, 0xFF	; 255
    3584:	01 90       	ld	r0, Z+
    3586:	0d 92       	st	X+, r0
    3588:	4a 95       	dec	r20
    358a:	e1 f7       	brne	.-8      	; 0x3584 <QS_Counts_to_Distance+0x72>
    u16 code   piecewise_brackets_2[9]= {17760, 14650, 7745, 5545, 2500, 1394, 493, 207, 102};	
    358c:	42 e1       	ldi	r20, 0x12	; 18
    358e:	ef e7       	ldi	r30, 0x7F	; 127
    3590:	f0 e2       	ldi	r31, 0x20	; 32
    3592:	de 01       	movw	r26, r28
    3594:	d7 96       	adiw	r26, 0x37	; 55
    3596:	01 90       	ld	r0, Z+
    3598:	0d 92       	st	X+, r0
    359a:	4a 95       	dec	r20
    359c:	e1 f7       	brne	.-8      	; 0x3596 <QS_Counts_to_Distance+0x84>
		
	u16 code   offset_3[9]    = {27, 39, 51, 75, 96, 132, 177, 236, 299};
    359e:	42 e1       	ldi	r20, 0x12	; 18
    35a0:	eb e5       	ldi	r30, 0x5B	; 91
    35a2:	f0 e2       	ldi	r31, 0x20	; 32
    35a4:	de 01       	movw	r26, r28
    35a6:	95 96       	adiw	r26, 0x25	; 37
    35a8:	01 90       	ld	r0, Z+
    35aa:	0d 92       	st	X+, r0
    35ac:	4a 95       	dec	r20
    35ae:	e1 f7       	brne	.-8      	; 0x35a8 <QS_Counts_to_Distance+0x96>
	u16 code   slope_3[9]     = {27, 39, 95, 298, 538, 1481, 3637, 11457, 31208};
    35b0:	42 e1       	ldi	r20, 0x12	; 18
    35b2:	ed e6       	ldi	r30, 0x6D	; 109
    35b4:	f0 e2       	ldi	r31, 0x20	; 32
    35b6:	de 01       	movw	r26, r28
    35b8:	53 96       	adiw	r26, 0x13	; 19
    35ba:	01 90       	ld	r0, Z+
    35bc:	0d 92       	st	X+, r0
    35be:	4a 95       	dec	r20
    35c0:	e1 f7       	brne	.-8      	; 0x35ba <QS_Counts_to_Distance+0xa8>
	u16 code   piecewise_brackets_3[9]= {17760, 14650, 7745, 5545, 2500, 1394, 493, 207, 102};
    35c2:	42 e1       	ldi	r20, 0x12	; 18
    35c4:	ef e7       	ldi	r30, 0x7F	; 127
    35c6:	f0 e2       	ldi	r31, 0x20	; 32
    35c8:	de 01       	movw	r26, r28
    35ca:	11 96       	adiw	r26, 0x01	; 1
    35cc:	01 90       	ld	r0, Z+
    35ce:	0d 92       	st	X+, r0
    35d0:	4a 95       	dec	r20
    35d2:	e1 f7       	brne	.-8      	; 0x35cc <QS_Counts_to_Distance+0xba>
    u8 code   maxIndex = 9;
    u8 xdata   indexLinear;
    
	uu32 xdata distance;
	
    if(led==1)      
    35d4:	61 30       	cpi	r22, 0x01	; 1
    35d6:	19 f5       	brne	.+70     	; 0x361e <QS_Counts_to_Distance+0x10c>
    35d8:	fe 01       	movw	r30, r28
    35da:	e3 59       	subi	r30, 0x93	; 147
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	40 e0       	ldi	r20, 0x00	; 0
    35e0:	50 e0       	ldi	r21, 0x00	; 0
    35e2:	f4 2e       	mov	r15, r20
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
       {
           if (counts > piecewise_brackets_1[indexLinear])
    35e4:	61 91       	ld	r22, Z+
    35e6:	71 91       	ld	r23, Z+
    35e8:	68 17       	cp	r22, r24
    35ea:	79 07       	cpc	r23, r25
    35ec:	90 f4       	brcc	.+36     	; 0x3612 <QS_Counts_to_Distance+0x100>
           {
               distance.u32 = (u32)counts * (u32)slope_1[indexLinear];
    35ee:	44 0f       	add	r20, r20
    35f0:	55 1f       	adc	r21, r21
    35f2:	ef e7       	ldi	r30, 0x7F	; 127
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	ec 0f       	add	r30, r28
    35f8:	fd 1f       	adc	r31, r29
    35fa:	e4 0f       	add	r30, r20
    35fc:	f5 1f       	adc	r31, r21
    35fe:	20 81       	ld	r18, Z
    3600:	31 81       	ldd	r19, Z+1	; 0x01
    3602:	dc 01       	movw	r26, r24
    3604:	0e 94 0d 53 	call	0xa61a	; 0xa61a <__umulhisi3>
    3608:	8b 01       	movw	r16, r22
    360a:	9c 01       	movw	r18, r24
			   distance.u16[LSB] = offset_1[indexLinear] - distance.u16[MSB];
    360c:	e1 e9       	ldi	r30, 0x91	; 145
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	23 c0       	rjmp	.+70     	; 0x3658 <QS_Counts_to_Distance+0x146>
    3612:	4f 5f       	subi	r20, 0xFF	; 255
    3614:	5f 4f       	sbci	r21, 0xFF	; 255
	
    if(led==1)      
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    3616:	49 30       	cpi	r20, 0x09	; 9
    3618:	51 05       	cpc	r21, r1
    361a:	19 f7       	brne	.-58     	; 0x35e2 <QS_Counts_to_Distance+0xd0>
    361c:	51 c0       	rjmp	.+162    	; 0x36c0 <QS_Counts_to_Distance+0x1ae>
			   distance.u16[LSB] = offset_1[indexLinear] - distance.u16[MSB];
               break;
           }
       }
    }
    else if(led==2) 
    361e:	62 30       	cpi	r22, 0x02	; 2
    3620:	41 f5       	brne	.+80     	; 0x3672 <QS_Counts_to_Distance+0x160>
    3622:	fe 01       	movw	r30, r28
    3624:	f7 96       	adiw	r30, 0x37	; 55
    3626:	40 e0       	ldi	r20, 0x00	; 0
    3628:	50 e0       	ldi	r21, 0x00	; 0
    362a:	f4 2e       	mov	r15, r20
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
       {
           if (counts > piecewise_brackets_2[indexLinear])
    362c:	61 91       	ld	r22, Z+
    362e:	71 91       	ld	r23, Z+
    3630:	68 17       	cp	r22, r24
    3632:	79 07       	cpc	r23, r25
    3634:	c0 f4       	brcc	.+48     	; 0x3666 <QS_Counts_to_Distance+0x154>
           {
               distance.u32 = (u32)counts * (u32)slope_2[indexLinear];
    3636:	44 0f       	add	r20, r20
    3638:	55 1f       	adc	r21, r21
    363a:	e9 e4       	ldi	r30, 0x49	; 73
    363c:	f0 e0       	ldi	r31, 0x00	; 0
    363e:	ec 0f       	add	r30, r28
    3640:	fd 1f       	adc	r31, r29
    3642:	e4 0f       	add	r30, r20
    3644:	f5 1f       	adc	r31, r21
    3646:	20 81       	ld	r18, Z
    3648:	31 81       	ldd	r19, Z+1	; 0x01
    364a:	dc 01       	movw	r26, r24
    364c:	0e 94 0d 53 	call	0xa61a	; 0xa61a <__umulhisi3>
    3650:	8b 01       	movw	r16, r22
    3652:	9c 01       	movw	r18, r24
               distance.u16[LSB] = offset_2[indexLinear] - distance.u16[MSB];
    3654:	eb e5       	ldi	r30, 0x5B	; 91
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	ec 0f       	add	r30, r28
    365a:	fd 1f       	adc	r31, r29
    365c:	e4 0f       	add	r30, r20
    365e:	f5 1f       	adc	r31, r21
    3660:	80 81       	ld	r24, Z
    3662:	91 81       	ldd	r25, Z+1	; 0x01
    3664:	24 c0       	rjmp	.+72     	; 0x36ae <QS_Counts_to_Distance+0x19c>
    3666:	4f 5f       	subi	r20, 0xFF	; 255
    3668:	5f 4f       	sbci	r21, 0xFF	; 255
    }
    else if(led==2) 
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    366a:	49 30       	cpi	r20, 0x09	; 9
    366c:	51 05       	cpc	r21, r1
    366e:	e9 f6       	brne	.-70     	; 0x362a <QS_Counts_to_Distance+0x118>
    3670:	27 c0       	rjmp	.+78     	; 0x36c0 <QS_Counts_to_Distance+0x1ae>
               distance.u16[LSB] = offset_2[indexLinear] - distance.u16[MSB];
               break;
           }
       }
    }
	else if(led==3) 
    3672:	63 30       	cpi	r22, 0x03	; 3
    3674:	89 f5       	brne	.+98     	; 0x36d8 <QS_Counts_to_Distance+0x1c6>
    3676:	fe 01       	movw	r30, r28
    3678:	31 96       	adiw	r30, 0x01	; 1
    367a:	40 e0       	ldi	r20, 0x00	; 0
    367c:	50 e0       	ldi	r21, 0x00	; 0
    367e:	f4 2e       	mov	r15, r20
	{
		// Perform piecewise linear approximation
		indexLinear = 0;
		for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
		{
			if (counts > piecewise_brackets_3[indexLinear])
    3680:	61 91       	ld	r22, Z+
    3682:	71 91       	ld	r23, Z+
    3684:	68 17       	cp	r22, r24
    3686:	79 07       	cpc	r23, r25
    3688:	b0 f4       	brcc	.+44     	; 0x36b6 <QS_Counts_to_Distance+0x1a4>
			{
				distance.u32 = (u32)counts * (u32)slope_3[indexLinear];
    368a:	fa 01       	movw	r30, r20
    368c:	ee 0f       	add	r30, r30
    368e:	ff 1f       	adc	r31, r31
    3690:	21 e0       	ldi	r18, 0x01	; 1
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	2c 0f       	add	r18, r28
    3696:	3d 1f       	adc	r19, r29
    3698:	e2 0f       	add	r30, r18
    369a:	f3 1f       	adc	r31, r19
    369c:	22 89       	ldd	r18, Z+18	; 0x12
    369e:	33 89       	ldd	r19, Z+19	; 0x13
    36a0:	dc 01       	movw	r26, r24
    36a2:	0e 94 0d 53 	call	0xa61a	; 0xa61a <__umulhisi3>
    36a6:	8b 01       	movw	r16, r22
    36a8:	9c 01       	movw	r18, r24
				distance.u16[LSB] = offset_3[indexLinear] - distance.u16[MSB];
    36aa:	84 a1       	ldd	r24, Z+36	; 0x24
    36ac:	95 a1       	ldd	r25, Z+37	; 0x25
    36ae:	8c 01       	movw	r16, r24
    36b0:	02 1b       	sub	r16, r18
    36b2:	13 0b       	sbc	r17, r19
				break;
    36b4:	07 c0       	rjmp	.+14     	; 0x36c4 <QS_Counts_to_Distance+0x1b2>
    36b6:	4f 5f       	subi	r20, 0xFF	; 255
    36b8:	5f 4f       	sbci	r21, 0xFF	; 255
    }
	else if(led==3) 
	{
		// Perform piecewise linear approximation
		indexLinear = 0;
		for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    36ba:	49 30       	cpi	r20, 0x09	; 9
    36bc:	51 05       	cpc	r21, r1
    36be:	f9 f6       	brne	.-66     	; 0x367e <QS_Counts_to_Distance+0x16c>
    36c0:	89 e0       	ldi	r24, 0x09	; 9
    36c2:	f8 2e       	mov	r15, r24
	}
	
    else return -1;  /* Invalid channel number */

    // Set to a max value if above a certain level.
    if (distance.u16[LSB] > 250 || indexLinear == maxIndex)
    36c4:	0b 3f       	cpi	r16, 0xFB	; 251
    36c6:	11 05       	cpc	r17, r1
    36c8:	18 f4       	brcc	.+6      	; 0x36d0 <QS_Counts_to_Distance+0x1be>
    36ca:	89 e0       	ldi	r24, 0x09	; 9
    36cc:	f8 12       	cpse	r15, r24
    36ce:	02 c0       	rjmp	.+4      	; 0x36d4 <QS_Counts_to_Distance+0x1c2>
    {
        distance.u16[LSB] = 250;
    36d0:	0a ef       	ldi	r16, 0xFA	; 250
    36d2:	10 e0       	ldi	r17, 0x00	; 0
    }
    return (distance.u16[LSB]);
    36d4:	c8 01       	movw	r24, r16
    36d6:	02 c0       	rjmp	.+4      	; 0x36dc <QS_Counts_to_Distance+0x1ca>
				break;
			}
		}
	}
	
    else return -1;  /* Invalid channel number */
    36d8:	8f ef       	ldi	r24, 0xFF	; 255
    36da:	9f ef       	ldi	r25, 0xFF	; 255
    if (distance.u16[LSB] > 250 || indexLinear == maxIndex)
    {
        distance.u16[LSB] = 250;
    }
    return (distance.u16[LSB]);
}
    36dc:	ce 55       	subi	r28, 0x5E	; 94
    36de:	df 4f       	sbci	r29, 0xFF	; 255
    36e0:	cd bf       	out	0x3d, r28	; 61
    36e2:	de bf       	out	0x3e, r29	; 62
    36e4:	df 91       	pop	r29
    36e6:	cf 91       	pop	r28
    36e8:	1f 91       	pop	r17
    36ea:	0f 91       	pop	r16
    36ec:	ff 90       	pop	r15
    36ee:	08 95       	ret

000036f0 <QS_Counts_to_Distance_2>:

s16 QS_Counts_to_Distance_2(u16 counts, u8 led) 
{
	float distance = 0.0f;
	
	if (led == 1) {
    36f0:	61 30       	cpi	r22, 0x01	; 1
    36f2:	81 f4       	brne	.+32     	; 0x3714 <QS_Counts_to_Distance_2+0x24>
		distance = 139739*powf((float)counts,-0.88f);
    36f4:	bc 01       	movw	r22, r24
    36f6:	80 e0       	ldi	r24, 0x00	; 0
    36f8:	90 e0       	ldi	r25, 0x00	; 0
    36fa:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatunsisf>
    36fe:	2e ea       	ldi	r18, 0xAE	; 174
    3700:	37 e4       	ldi	r19, 0x47	; 71
    3702:	41 e6       	ldi	r20, 0x61	; 97
    3704:	5f eb       	ldi	r21, 0xBF	; 191
    3706:	0e 94 d8 4d 	call	0x9bb0	; 0x9bb0 <pow>
    370a:	20 ec       	ldi	r18, 0xC0	; 192
    370c:	36 e7       	ldi	r19, 0x76	; 118
    370e:	48 e0       	ldi	r20, 0x08	; 8
    3710:	58 e4       	ldi	r21, 0x48	; 72
    3712:	11 c0       	rjmp	.+34     	; 0x3736 <QS_Counts_to_Distance_2+0x46>
	} else if (led == 2) {
    3714:	62 30       	cpi	r22, 0x02	; 2
    3716:	91 f4       	brne	.+36     	; 0x373c <QS_Counts_to_Distance_2+0x4c>
		distance = 155790*powf((float)counts,-0.91f);
    3718:	bc 01       	movw	r22, r24
    371a:	80 e0       	ldi	r24, 0x00	; 0
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <__floatunsisf>
    3722:	23 ec       	ldi	r18, 0xC3	; 195
    3724:	35 ef       	ldi	r19, 0xF5	; 245
    3726:	48 e6       	ldi	r20, 0x68	; 104
    3728:	5f eb       	ldi	r21, 0xBF	; 191
    372a:	0e 94 d8 4d 	call	0x9bb0	; 0x9bb0 <pow>
    372e:	20 e8       	ldi	r18, 0x80	; 128
    3730:	33 e2       	ldi	r19, 0x23	; 35
    3732:	48 e1       	ldi	r20, 0x18	; 24
    3734:	58 e4       	ldi	r21, 0x48	; 72
    3736:	0e 94 75 4d 	call	0x9aea	; 0x9aea <__mulsf3>
    373a:	03 c0       	rjmp	.+6      	; 0x3742 <QS_Counts_to_Distance_2+0x52>
    return (distance.u16[LSB]);
}

s16 QS_Counts_to_Distance_2(u16 counts, u8 led) 
{
	float distance = 0.0f;
    373c:	60 e0       	ldi	r22, 0x00	; 0
    373e:	70 e0       	ldi	r23, 0x00	; 0
    3740:	cb 01       	movw	r24, r22
	if (led == 1) {
		distance = 139739*powf((float)counts,-0.88f);
	} else if (led == 2) {
		distance = 155790*powf((float)counts,-0.91f);
	}
	return (s16)distance;
    3742:	0e 94 b6 4c 	call	0x996c	; 0x996c <__fixsfsi>
}
    3746:	cb 01       	movw	r24, r22
    3748:	08 95       	ret

0000374a <slider_algorithm_v2>:
#define LEFT_RADIUS 15
#define RIGHT_RADIUS -15
#define RADIUS 1000

void slider_algorithm_v2(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples, u16 scale) 
{
    374a:	0f 93       	push	r16
    374c:	1f 93       	push	r17
    374e:	cf 93       	push	r28
    3750:	df 93       	push	r29
    3752:	eb 01       	movw	r28, r22
	s16 ps1_mm = QS_Counts_to_Distance_2(samples->ps1,1);
    3754:	61 e0       	ldi	r22, 0x01	; 1
    3756:	8a 85       	ldd	r24, Y+10	; 0x0a
    3758:	9b 85       	ldd	r25, Y+11	; 0x0b
    375a:	ca df       	rcall	.-108    	; 0x36f0 <QS_Counts_to_Distance_2>
    375c:	8c 01       	movw	r16, r24
	s16 ps2_mm = QS_Counts_to_Distance_2(samples->ps2,2);
    375e:	62 e0       	ldi	r22, 0x02	; 2
    3760:	8c 85       	ldd	r24, Y+12	; 0x0c
    3762:	9d 85       	ldd	r25, Y+13	; 0x0d
    3764:	c5 df       	rcall	.-118    	; 0x36f0 <QS_Counts_to_Distance_2>
    3766:	9c 01       	movw	r18, r24
	
	static uint16_t entry_timestamp = 0;
	
	s16 ps_distance = (ps1_mm + ps2_mm) / 2;
	
	samples->gesture = NO_GESTURE;
    3768:	1a 8a       	std	Y+18, r1	; 0x12
	static bool right_entry = false;
	static bool center_entry = false;
	
	static uint16_t entry_timestamp = 0;
	
	s16 ps_distance = (ps1_mm + ps2_mm) / 2;
    376a:	c8 01       	movw	r24, r16
    376c:	82 0f       	add	r24, r18
    376e:	93 1f       	adc	r25, r19
	
	samples->gesture = NO_GESTURE;
	
	if (ps_distance < 240) {
    3770:	80 3e       	cpi	r24, 0xE0	; 224
    3772:	91 40       	sbci	r25, 0x01	; 1
    3774:	0c f0       	brlt	.+2      	; 0x3778 <slider_algorithm_v2+0x2e>
    3776:	74 c0       	rjmp	.+232    	; 0x3860 <slider_algorithm_v2+0x116>
		 s16 x = (ps1_mm*ps1_mm - ps2_mm*ps2_mm) / 120;
    3778:	00 9f       	mul	r16, r16
    377a:	c0 01       	movw	r24, r0
    377c:	01 9f       	mul	r16, r17
    377e:	90 0d       	add	r25, r0
    3780:	90 0d       	add	r25, r0
    3782:	11 24       	eor	r1, r1
    3784:	22 9f       	mul	r18, r18
    3786:	a0 01       	movw	r20, r0
    3788:	23 9f       	mul	r18, r19
    378a:	50 0d       	add	r21, r0
    378c:	50 0d       	add	r21, r0
    378e:	11 24       	eor	r1, r1
    3790:	84 1b       	sub	r24, r20
    3792:	95 0b       	sbc	r25, r21
    3794:	68 e7       	ldi	r22, 0x78	; 120
    3796:	70 e0       	ldi	r23, 0x00	; 0
    3798:	0e 94 d2 52 	call	0xa5a4	; 0xa5a4 <__divmodhi4>
		 //printf("x: %d \r\n",x);
		 //return;
		 
		 if (!left_entry && !right_entry && !center_entry) {
    379c:	80 91 0d 2b 	lds	r24, 0x2B0D
    37a0:	81 11       	cpse	r24, r1
    37a2:	2c c0       	rjmp	.+88     	; 0x37fc <slider_algorithm_v2+0xb2>
    37a4:	80 91 0c 2b 	lds	r24, 0x2B0C
    37a8:	81 11       	cpse	r24, r1
    37aa:	34 c0       	rjmp	.+104    	; 0x3814 <slider_algorithm_v2+0xca>
    37ac:	80 91 0b 2b 	lds	r24, 0x2B0B
    37b0:	81 11       	cpse	r24, r1
    37b2:	3c c0       	rjmp	.+120    	; 0x382c <slider_algorithm_v2+0xe2>
			if (x > LEFT_RADIUS) {
    37b4:	60 31       	cpi	r22, 0x10	; 16
    37b6:	71 05       	cpc	r23, r1
    37b8:	44 f0       	brlt	.+16     	; 0x37ca <slider_algorithm_v2+0x80>
				printf("left entry \r\n");
    37ba:	87 e8       	ldi	r24, 0x87	; 135
    37bc:	95 e2       	ldi	r25, 0x25	; 37
    37be:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
				left_entry = true;
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	80 93 0d 2b 	sts	0x2B0D, r24
    37c8:	0a c0       	rjmp	.+20     	; 0x37de <slider_algorithm_v2+0x94>
				entry_timestamp = samples->timestamp;
			} else if (x < RIGHT_RADIUS) {
    37ca:	61 3f       	cpi	r22, 0xF1	; 241
    37cc:	7f 4f       	sbci	r23, 0xFF	; 255
    37ce:	74 f4       	brge	.+28     	; 0x37ec <slider_algorithm_v2+0xa2>
				printf("right entry \r\n");
    37d0:	84 e9       	ldi	r24, 0x94	; 148
    37d2:	95 e2       	ldi	r25, 0x25	; 37
    37d4:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
				right_entry = true;
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	80 93 0c 2b 	sts	0x2B0C, r24
				entry_timestamp = samples->timestamp;
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	9b 81       	ldd	r25, Y+3	; 0x03
    37e2:	80 93 09 2b 	sts	0x2B09, r24
    37e6:	90 93 0a 2b 	sts	0x2B0A, r25
    37ea:	40 c0       	rjmp	.+128    	; 0x386c <slider_algorithm_v2+0x122>
			} else {
				printf("center entry \r\n");
    37ec:	82 ea       	ldi	r24, 0xA2	; 162
    37ee:	95 e2       	ldi	r25, 0x25	; 37
    37f0:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
				center_entry = true;
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	80 93 0b 2b 	sts	0x2B0B, r24
    37fa:	f1 cf       	rjmp	.-30     	; 0x37de <slider_algorithm_v2+0x94>
				entry_timestamp = samples->timestamp;	
			}
		 } else {
			if (left_entry) {
				//wait for right exit
				if (x < RIGHT_RADIUS) {
    37fc:	61 3f       	cpi	r22, 0xF1	; 241
    37fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3800:	ac f4       	brge	.+42     	; 0x382c <slider_algorithm_v2+0xe2>
					printf("right exit! \r\n");
    3802:	81 eb       	ldi	r24, 0xB1	; 177
    3804:	95 e2       	ldi	r25, 0x25	; 37
    3806:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
					samples->gesture = LEFT_SWIPE;
    380a:	82 e0       	ldi	r24, 0x02	; 2
    380c:	8a 8b       	std	Y+18, r24	; 0x12
					left_entry = false;
    380e:	10 92 0d 2b 	sts	0x2B0D, r1
					return;
    3812:	2c c0       	rjmp	.+88     	; 0x386c <slider_algorithm_v2+0x122>
				}
			} else if (right_entry) {
				//wait for left exit
				if (x > LEFT_RADIUS) {
    3814:	60 31       	cpi	r22, 0x10	; 16
    3816:	71 05       	cpc	r23, r1
    3818:	4c f0       	brlt	.+18     	; 0x382c <slider_algorithm_v2+0xe2>
					printf("left exit! \r\n");
    381a:	8f eb       	ldi	r24, 0xBF	; 191
    381c:	95 e2       	ldi	r25, 0x25	; 37
    381e:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
					samples->gesture = RIGHT_SWIPE;
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	8a 8b       	std	Y+18, r24	; 0x12
					right_entry = false;
    3826:	10 92 0c 2b 	sts	0x2B0C, r1
					return;
    382a:	20 c0       	rjmp	.+64     	; 0x386c <slider_algorithm_v2+0x122>
				}
			}
			if (samples->timestamp - entry_timestamp > 2000) {
    382c:	8a 81       	ldd	r24, Y+2	; 0x02
    382e:	9b 81       	ldd	r25, Y+3	; 0x03
    3830:	20 91 09 2b 	lds	r18, 0x2B09
    3834:	30 91 0a 2b 	lds	r19, 0x2B0A
    3838:	82 1b       	sub	r24, r18
    383a:	93 0b       	sbc	r25, r19
    383c:	81 3d       	cpi	r24, 0xD1	; 209
    383e:	97 40       	sbci	r25, 0x07	; 7
    3840:	a8 f0       	brcs	.+42     	; 0x386c <slider_algorithm_v2+0x122>
				if (center_entry) {
    3842:	80 91 0b 2b 	lds	r24, 0x2B0B
    3846:	88 23       	and	r24, r24
    3848:	39 f0       	breq	.+14     	; 0x3858 <slider_algorithm_v2+0x10e>
					printf("Selected! \r\n");
    384a:	8c ec       	ldi	r24, 0xCC	; 204
    384c:	95 e2       	ldi	r25, 0x25	; 37
    384e:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
					samples->gesture = PAUSE;	
    3852:	83 e0       	ldi	r24, 0x03	; 3
    3854:	8a 8b       	std	Y+18, r24	; 0x12
    3856:	04 c0       	rjmp	.+8      	; 0x3860 <slider_algorithm_v2+0x116>
				} else {
					printf("Timeout! \r\n");	
    3858:	88 ed       	ldi	r24, 0xD8	; 216
    385a:	95 e2       	ldi	r25, 0x25	; 37
    385c:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
			}
			
		 } 
	} else {
		//Out of range
		left_entry = false;
    3860:	10 92 0d 2b 	sts	0x2B0D, r1
		right_entry = false;
    3864:	10 92 0c 2b 	sts	0x2B0C, r1
		center_entry = false;
    3868:	10 92 0b 2b 	sts	0x2B0B, r1
	}
}
    386c:	df 91       	pop	r29
    386e:	cf 91       	pop	r28
    3870:	1f 91       	pop	r17
    3872:	0f 91       	pop	r16
    3874:	08 95       	ret

00003876 <SliderAlgorithm>:

void SliderAlgorithm(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples, u16 scale)
{
    3876:	2f 92       	push	r2
    3878:	3f 92       	push	r3
    387a:	4f 92       	push	r4
    387c:	5f 92       	push	r5
    387e:	7f 92       	push	r7
    3880:	8f 92       	push	r8
    3882:	9f 92       	push	r9
    3884:	af 92       	push	r10
    3886:	bf 92       	push	r11
    3888:	cf 92       	push	r12
    388a:	df 92       	push	r13
    388c:	ef 92       	push	r14
    388e:	ff 92       	push	r15
    3890:	0f 93       	push	r16
    3892:	1f 93       	push	r17
    3894:	cf 93       	push	r28
    3896:	df 93       	push	r29
    3898:	cd b7       	in	r28, 0x3d	; 61
    389a:	de b7       	in	r29, 0x3e	; 62
    389c:	ae 97       	sbiw	r28, 0x2e	; 46
    389e:	cd bf       	out	0x3d, r28	; 61
    38a0:	de bf       	out	0x3e, r29	; 62
    38a2:	7b 01       	movw	r14, r22
    38a4:	5a 01       	movw	r10, r20
	//My implementation
	static u16 previous_led_x = 0;
	static u16 previous_led_y = 0;

    // QS_GlobalCounterOverflow assumes milliseconds. Samples->timestamp is in 100 us.
    u16 xdata QS_GlobalCounterOverflow = samples->timestamp / 10;
    38a6:	db 01       	movw	r26, r22
    38a8:	12 96       	adiw	r26, 0x02	; 2
    38aa:	8d 91       	ld	r24, X+
    38ac:	9c 91       	ld	r25, X
    38ae:	13 97       	sbiw	r26, 0x03	; 3
    38b0:	6a e0       	ldi	r22, 0x0A	; 10
    38b2:	70 e0       	ldi	r23, 0x00	; 0
    38b4:	0e 94 be 52 	call	0xa57c	; 0xa57c <__udivmodhi4>
    38b8:	8b 01       	movw	r16, r22

    // x position "bucket" endpoints to determine LED states and recognize Pause gesture.
    u16 code xbucket_Array[10] = {1, 159, 272, 385, 498, 611, 724, 837, 1100, 1102};
    38ba:	84 e1       	ldi	r24, 0x14	; 20
    38bc:	e1 e9       	ldi	r30, 0x91	; 145
    38be:	f0 e2       	ldi	r31, 0x20	; 32
    38c0:	de 01       	movw	r26, r28
    38c2:	11 96       	adiw	r26, 0x01	; 1
    38c4:	01 90       	ld	r0, Z+
    38c6:	0d 92       	st	X+, r0
    38c8:	8a 95       	dec	r24
    38ca:	e1 f7       	brne	.-8      	; 0x38c4 <SliderAlgorithm+0x4e>

    // P1 LED values corresponding to the position buckets
    u8 code LED_P1_Vals[10] = {0xFF, 0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F, 0xFF};   
    38cc:	8a e0       	ldi	r24, 0x0A	; 10
    38ce:	e5 ea       	ldi	r30, 0xA5	; 165
    38d0:	f0 e2       	ldi	r31, 0x20	; 32
    38d2:	de 01       	movw	r26, r28
    38d4:	55 96       	adiw	r26, 0x15	; 21
    38d6:	01 90       	ld	r0, Z+
    38d8:	0d 92       	st	X+, r0
    38da:	8a 95       	dec	r24
    38dc:	e1 f7       	brne	.-8      	; 0x38d6 <SliderAlgorithm+0x60>

    // P1 patterns for LED state machine.  Sent in reverse order, '0' bits are ON
    u8 code LED_swipe_left_pattern[8]  = 
    38de:	88 e0       	ldi	r24, 0x08	; 8
    38e0:	ef ea       	ldi	r30, 0xAF	; 175
    38e2:	f0 e2       	ldi	r31, 0x20	; 32
    38e4:	de 01       	movw	r26, r28
    38e6:	97 96       	adiw	r26, 0x27	; 39
    38e8:	01 90       	ld	r0, Z+
    38ea:	0d 92       	st	X+, r0
    38ec:	8a 95       	dec	r24
    38ee:	e1 f7       	brne	.-8      	; 0x38e8 <SliderAlgorithm+0x72>
      {0xFF, 0xFE, 0xF8, 0xE1, 0x87, 0x1F, 0x7F, 0xFF};

    u8 code LED_swipe_right_pattern[8] = 
    38f0:	88 e0       	ldi	r24, 0x08	; 8
    38f2:	e7 eb       	ldi	r30, 0xB7	; 183
    38f4:	f0 e2       	ldi	r31, 0x20	; 32
    38f6:	de 01       	movw	r26, r28
    38f8:	5f 96       	adiw	r26, 0x1f	; 31
    38fa:	01 90       	ld	r0, Z+
    38fc:	0d 92       	st	X+, r0
    38fe:	8a 95       	dec	r24
    3900:	e1 f7       	brne	.-8      	; 0x38fa <SliderAlgorithm+0x84>
    s16 xdata xdiff;
    u8 xdata swipe_speed;

    int xdata ps;

    ps = (u32) samples->ps1 - (u32)baseline[0];
    3902:	f7 01       	movw	r30, r14
    3904:	82 85       	ldd	r24, Z+10	; 0x0a
    3906:	93 85       	ldd	r25, Z+11	; 0x0b
    3908:	20 91 ce 2c 	lds	r18, 0x2CCE
    390c:	30 91 cf 2c 	lds	r19, 0x2CCF
    3910:	82 1b       	sub	r24, r18
    3912:	93 0b       	sbc	r25, r19
    3914:	97 ff       	sbrs	r25, 7
    3916:	02 c0       	rjmp	.+4      	; 0x391c <SliderAlgorithm+0xa6>
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	90 e0       	ldi	r25, 0x00	; 0
    ps *= scale;

    // Raw IR sensor 0 and 1 are stored in channels 4 and 5
    // ALS is stored in channel 6
    // Calculate r1 and r2 distances; store in channels 0 and 1
    r1 = QS_Counts_to_Distance ((u16)ps, 1);
    391c:	61 e0       	ldi	r22, 0x01	; 1
    391e:	9c 01       	movw	r18, r24
    3920:	a2 9e       	mul	r10, r18
    3922:	c0 01       	movw	r24, r0
    3924:	a3 9e       	mul	r10, r19
    3926:	90 0d       	add	r25, r0
    3928:	b2 9e       	mul	r11, r18
    392a:	90 0d       	add	r25, r0
    392c:	11 24       	eor	r1, r1
    392e:	f1 dd       	rcall	.-1054   	; 0x3512 <QS_Counts_to_Distance>
    3930:	4c 01       	movw	r8, r24
	
	//printf("r1 = %d , counts = %d \r\n",r1,(u16)ps);

    ps = (u32) samples->ps2 - (u32)baseline[1];
    3932:	d7 01       	movw	r26, r14
    3934:	1c 96       	adiw	r26, 0x0c	; 12
    3936:	8d 91       	ld	r24, X+
    3938:	9c 91       	ld	r25, X
    393a:	1d 97       	sbiw	r26, 0x0d	; 13
    393c:	20 91 d0 2c 	lds	r18, 0x2CD0
    3940:	30 91 d1 2c 	lds	r19, 0x2CD1
    3944:	82 1b       	sub	r24, r18
    3946:	93 0b       	sbc	r25, r19
    3948:	97 ff       	sbrs	r25, 7
    394a:	02 c0       	rjmp	.+4      	; 0x3950 <SliderAlgorithm+0xda>
    394c:	80 e0       	ldi	r24, 0x00	; 0
    394e:	90 e0       	ldi	r25, 0x00	; 0
    if (ps < 0) ps = 0;

    // Scale it
    ps *= (u32)scale;

    r2 = QS_Counts_to_Distance ((u16)ps, 1);
    3950:	61 e0       	ldi	r22, 0x01	; 1
    3952:	fc 01       	movw	r30, r24
    3954:	ea 9d       	mul	r30, r10
    3956:	c0 01       	movw	r24, r0
    3958:	eb 9d       	mul	r30, r11
    395a:	90 0d       	add	r25, r0
    395c:	fa 9d       	mul	r31, r10
    395e:	90 0d       	add	r25, r0
    3960:	11 24       	eor	r1, r1
    3962:	d7 dd       	rcall	.-1106   	; 0x3512 <QS_Counts_to_Distance>
    3964:	5c 01       	movw	r10, r24
   ////////////////////////////////////////////////////////////////////////////
   // Position calculation and swipe gesture detection

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
    3966:	94 01       	movw	r18, r8
    3968:	d4 01       	movw	r26, r8
    396a:	0e 94 0d 53 	call	0xa61a	; 0xa61a <__umulhisi3>
    396e:	1b 01       	movw	r2, r22
    3970:	2c 01       	movw	r4, r24
   x.u32 = x.u32 + 33000;
    3972:	f8 ee       	ldi	r31, 0xE8	; 232
    3974:	2f 0e       	add	r2, r31
    3976:	f0 e8       	ldi	r31, 0x80	; 128
    3978:	3f 1e       	adc	r3, r31
    397a:	41 1c       	adc	r4, r1
    397c:	51 1c       	adc	r5, r1
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    397e:	95 01       	movw	r18, r10
    3980:	d5 01       	movw	r26, r10
    3982:	0e 94 0d 53 	call	0xa61a	; 0xa61a <__umulhisi3>
    3986:	26 1a       	sub	r2, r22
    3988:	37 0a       	sbc	r3, r23
    398a:	48 0a       	sbc	r4, r24
    398c:	59 0a       	sbc	r5, r25
   if (x.s32 < 0)
    398e:	57 fc       	sbrc	r5, 7
    3990:	03 c0       	rjmp	.+6      	; 0x3998 <SliderAlgorithm+0x122>

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
   x.u32 = x.u32 + 33000;
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    3992:	a2 01       	movw	r20, r4
    3994:	91 01       	movw	r18, r2
    3996:	03 c0       	rjmp	.+6      	; 0x399e <SliderAlgorithm+0x128>
   if (x.s32 < 0)
   {
     x.s32 = 0;
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	30 e0       	ldi	r19, 0x00	; 0
    399c:	a9 01       	movw	r20, r18
   }
   x.u32 = x.u32 / 60;
    399e:	ca 01       	movw	r24, r20
    39a0:	b9 01       	movw	r22, r18
    39a2:	2c e3       	ldi	r18, 0x3C	; 60
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	40 e0       	ldi	r20, 0x00	; 0
    39a8:	50 e0       	ldi	r21, 0x00	; 0
    39aa:	0e 94 e5 52 	call	0xa5ca	; 0xa5ca <__udivmodsi4>

   // limit x to maximum for pad
   if (x.u16[LSB] > 1101)
    39ae:	2e 34       	cpi	r18, 0x4E	; 78
    39b0:	64 e0       	ldi	r22, 0x04	; 4
    39b2:	36 07       	cpc	r19, r22
    39b4:	10 f0       	brcs	.+4      	; 0x39ba <SliderAlgorithm+0x144>
   {
     x.u16[LSB] = 1101;
    39b6:	2d e4       	ldi	r18, 0x4D	; 77
    39b8:	34 e0       	ldi	r19, 0x04	; 4
    39ba:	80 91 11 20 	lds	r24, 0x2011
	   y.u16[LSB] = 1101;
   }

   
   // Determine "z" and recognize whether "swipe" type gesture has occured
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
    39be:	91 ef       	ldi	r25, 0xF1	; 241
    39c0:	89 16       	cp	r8, r25
    39c2:	91 04       	cpc	r9, r1
    39c4:	20 f4       	brcc	.+8      	; 0x39ce <SliderAlgorithm+0x158>
    39c6:	a1 ef       	ldi	r26, 0xF1	; 241
    39c8:	aa 16       	cp	r10, r26
    39ca:	b1 04       	cpc	r11, r1
    39cc:	b0 f1       	brcs	.+108    	; 0x3a3a <SliderAlgorithm+0x1c4>
   {
      // check for end of swipe
      if (out_of_range == 0)
    39ce:	88 23       	and	r24, r24
    39d0:	11 f0       	breq	.+4      	; 0x39d6 <SliderAlgorithm+0x160>
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    39d2:	e0 e0       	ldi	r30, 0x00	; 0
    39d4:	1e c0       	rjmp	.+60     	; 0x3a12 <SliderAlgorithm+0x19c>
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
   {
      // check for end of swipe
      if (out_of_range == 0)
      {
        xexit = xlast;
    39d6:	60 91 07 2b 	lds	r22, 0x2B07
    39da:	70 91 08 2b 	lds	r23, 0x2B08
    39de:	60 93 05 2b 	sts	0x2B05, r22
    39e2:	70 93 06 2b 	sts	0x2B06, r23

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
    39e6:	e0 91 03 2b 	lds	r30, 0x2B03
    39ea:	f0 91 04 2b 	lds	r31, 0x2B04
    39ee:	c8 01       	movw	r24, r16
    39f0:	8e 1b       	sub	r24, r30
    39f2:	9f 0b       	sbc	r25, r31
    39f4:	c3 97       	sbiw	r24, 0x33	; 51
    39f6:	82 31       	cpi	r24, 0x12	; 18
    39f8:	91 40       	sbci	r25, 0x01	; 1
    39fa:	58 f7       	brcc	.-42     	; 0x39d2 <SliderAlgorithm+0x15c>
        {
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
    39fc:	f5 e4       	ldi	r31, 0x45	; 69
    39fe:	7f 2e       	mov	r7, r31
    3a00:	7e 0e       	add	r7, r30
    3a02:	70 1a       	sub	r7, r16
            xdiff = (s16)xenter-(s16)xexit;
    3a04:	c0 90 01 2b 	lds	r12, 0x2B01
    3a08:	d0 90 02 2b 	lds	r13, 0x2B02
    3a0c:	c6 1a       	sub	r12, r22
    3a0e:	d7 0a       	sbc	r13, r23
        xexit = xlast;

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
        {
            swipe_detect = 1;   // indicate that a swipe was detected
    3a10:	e1 e0       	ldi	r30, 0x01	; 1
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
            xdiff = (s16)xenter-(s16)xexit;
        }
      }
      out_of_range = 1;
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	80 93 11 20 	sts	0x2011, r24
      if (xexit > 550)
    3a18:	80 91 05 2b 	lds	r24, 0x2B05
    3a1c:	90 91 06 2b 	lds	r25, 0x2B06
    3a20:	87 32       	cpi	r24, 0x27	; 39
    3a22:	92 40       	sbci	r25, 0x02	; 2
    3a24:	18 f0       	brcs	.+6      	; 0x3a2c <SliderAlgorithm+0x1b6>
      {
        x.u16[LSB] = 1101;
    3a26:	2d e4       	ldi	r18, 0x4D	; 77
    3a28:	34 e0       	ldi	r19, 0x04	; 4
    3a2a:	02 c0       	rjmp	.+4      	; 0x3a30 <SliderAlgorithm+0x1ba>
      }
      else
      {
        x.u16[LSB] = 0;
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
      }
      z = MAX_RADIUS;
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3a30:	00 93 ff 2a 	sts	0x2AFF, r16
    3a34:	10 93 00 2b 	sts	0x2B00, r17
    3a38:	11 c0       	rjmp	.+34     	; 0x3a5c <SliderAlgorithm+0x1e6>
   }
   else
   {
      // check for start of swipe
      if (out_of_range == 1)
    3a3a:	81 30       	cpi	r24, 0x01	; 1
    3a3c:	41 f4       	brne	.+16     	; 0x3a4e <SliderAlgorithm+0x1d8>
      {
        xenter = x.u16[LSB];
    3a3e:	20 93 01 2b 	sts	0x2B01, r18
    3a42:	30 93 02 2b 	sts	0x2B02, r19
        SwipeStartTime = QS_GlobalCounterOverflow;
    3a46:	00 93 03 2b 	sts	0x2B03, r16
    3a4a:	10 93 04 2b 	sts	0x2B04, r17
      }
      out_of_range = 0;
    3a4e:	10 92 11 20 	sts	0x2011, r1

      xlast = x.u16[LSB];
    3a52:	20 93 07 2b 	sts	0x2B07, r18
    3a56:	30 93 08 2b 	sts	0x2B08, r19
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    3a5a:	e0 e0       	ldi	r30, 0x00	; 0
      {
         z = r1;
      }
   }
   
   int16_t tmp_x = 15-((x.u16[LSB])/73);
    3a5c:	59 01       	movw	r10, r18
    3a5e:	c9 01       	movw	r24, r18
    3a60:	69 e4       	ldi	r22, 0x49	; 73
    3a62:	70 e0       	ldi	r23, 0x00	; 0
    3a64:	0e 94 be 52 	call	0xa57c	; 0xa57c <__udivmodhi4>
    3a68:	4f e0       	ldi	r20, 0x0F	; 15
    3a6a:	50 e0       	ldi	r21, 0x00	; 0
    3a6c:	46 1b       	sub	r20, r22
    3a6e:	57 0b       	sbc	r21, r23
   
   if (tmp_x < 0) {
	   samples->x_axis = 0;
    3a70:	d7 01       	movw	r26, r14
      }
   }
   
   int16_t tmp_x = 15-((x.u16[LSB])/73);
   
   if (tmp_x < 0) {
    3a72:	57 ff       	sbrs	r21, 7
    3a74:	03 c0       	rjmp	.+6      	; 0x3a7c <SliderAlgorithm+0x206>
	   samples->x_axis = 0;
    3a76:	53 96       	adiw	r26, 0x13	; 19
    3a78:	1c 92       	st	X, r1
    3a7a:	02 c0       	rjmp	.+4      	; 0x3a80 <SliderAlgorithm+0x20a>
   } else if (tmp_x > 15) {
	   samples->x_axis = 15;
   } else {
	   samples->x_axis = tmp_x;   
    3a7c:	53 96       	adiw	r26, 0x13	; 19
    3a7e:	4c 93       	st	X, r20
   // REPLACE_0_PS3( x.u16[LSB] );
   // REPLACE_0_AUX( z );

   // If a swipe was detected, determine the direction (L/R), set up LED state machine
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
    3a80:	e1 30       	cpi	r30, 0x01	; 1
    3a82:	09 f0       	breq	.+2      	; 0x3a86 <SliderAlgorithm+0x210>
    3a84:	63 c0       	rjmp	.+198    	; 0x3b4c <SliderAlgorithm+0x2d6>
   {
       if (xdiff > 150)             // Left Swipe
    3a86:	b7 e9       	ldi	r27, 0x97	; 151
    3a88:	cb 16       	cp	r12, r27
    3a8a:	d1 04       	cpc	r13, r1
    3a8c:	54 f1       	brlt	.+84     	; 0x3ae2 <SliderAlgorithm+0x26c>
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    3a8e:	10 92 fe 2a 	sts	0x2AFE, r1
    3a92:	20 e0       	ldi	r18, 0x00	; 0
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
    3a94:	82 2f       	mov	r24, r18
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	fc 01       	movw	r30, r24
    3a9a:	ea 50       	subi	r30, 0x0A	; 10
    3a9c:	f5 4d       	sbci	r31, 0xD5	; 213
    3a9e:	a7 e2       	ldi	r26, 0x27	; 39
    3aa0:	b0 e0       	ldi	r27, 0x00	; 0
    3aa2:	ac 0f       	add	r26, r28
    3aa4:	bd 1f       	adc	r27, r29
    3aa6:	a8 0f       	add	r26, r24
    3aa8:	b9 1f       	adc	r27, r25
    3aaa:	8c 91       	ld	r24, X
    3aac:	80 83       	st	Z, r24
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
   {
       if (xdiff > 150)             // Left Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	82 0f       	add	r24, r18
    3ab2:	88 30       	cpi	r24, 0x08	; 8
    3ab4:	10 f4       	brcc	.+4      	; 0x3aba <SliderAlgorithm+0x244>
    3ab6:	28 2f       	mov	r18, r24
    3ab8:	ed cf       	rjmp	.-38     	; 0x3a94 <SliderAlgorithm+0x21e>
    3aba:	80 93 fe 2a 	sts	0x2AFE, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send LEFT_SWIPE gesture
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
    3abe:	df 92       	push	r13
    3ac0:	cf 92       	push	r12
    3ac2:	1f 92       	push	r1
    3ac4:	7f 92       	push	r7
    3ac6:	83 ee       	ldi	r24, 0xE3	; 227
    3ac8:	95 e2       	ldi	r25, 0x25	; 37
    3aca:	9f 93       	push	r25
    3acc:	8f 93       	push	r24
    3ace:	8e ee       	ldi	r24, 0xEE	; 238
    3ad0:	95 e2       	ldi	r25, 0x25	; 37
    3ad2:	9f 93       	push	r25
    3ad4:	8f 93       	push	r24
    3ad6:	0e 94 13 56 	call	0xac26	; 0xac26 <printf>
			samples->gesture = LEFT_SWIPE;
    3ada:	82 e0       	ldi	r24, 0x02	; 2
    3adc:	f7 01       	movw	r30, r14
    3ade:	82 8b       	std	Z+18, r24	; 0x12
    3ae0:	32 c0       	rjmp	.+100    	; 0x3b46 <SliderAlgorithm+0x2d0>
       }
       else if (xdiff < -150)       // Right Swipe
    3ae2:	3a e6       	ldi	r19, 0x6A	; 106
    3ae4:	c3 16       	cp	r12, r19
    3ae6:	3f ef       	ldi	r19, 0xFF	; 255
    3ae8:	d3 06       	cpc	r13, r19
    3aea:	9c f5       	brge	.+102    	; 0x3b52 <SliderAlgorithm+0x2dc>
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    3aec:	10 92 fe 2a 	sts	0x2AFE, r1
    3af0:	20 e0       	ldi	r18, 0x00	; 0
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
    3af2:	82 2f       	mov	r24, r18
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	fc 01       	movw	r30, r24
    3af8:	ea 50       	subi	r30, 0x0A	; 10
    3afa:	f5 4d       	sbci	r31, 0xD5	; 213
    3afc:	af e1       	ldi	r26, 0x1F	; 31
    3afe:	b0 e0       	ldi	r27, 0x00	; 0
    3b00:	ac 0f       	add	r26, r28
    3b02:	bd 1f       	adc	r27, r29
    3b04:	a8 0f       	add	r26, r24
    3b06:	b9 1f       	adc	r27, r25
    3b08:	8c 91       	ld	r24, X
    3b0a:	80 83       	st	Z, r24
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
			samples->gesture = LEFT_SWIPE;
       }
       else if (xdiff < -150)       // Right Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	82 0f       	add	r24, r18
    3b10:	88 30       	cpi	r24, 0x08	; 8
    3b12:	10 f4       	brcc	.+4      	; 0x3b18 <SliderAlgorithm+0x2a2>
    3b14:	28 2f       	mov	r18, r24
    3b16:	ed cf       	rjmp	.-38     	; 0x3af2 <SliderAlgorithm+0x27c>
    3b18:	80 93 fe 2a 	sts	0x2AFE, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send RIGHT_SWIPE gesture
            printf("                            %s: %d, %d\n", "RIGHT_SWIPE", swipe_speed, -xdiff) ;     
    3b1c:	d1 94       	neg	r13
    3b1e:	c1 94       	neg	r12
    3b20:	d1 08       	sbc	r13, r1
    3b22:	df 92       	push	r13
    3b24:	cf 92       	push	r12
    3b26:	1f 92       	push	r1
    3b28:	7f 92       	push	r7
    3b2a:	86 e1       	ldi	r24, 0x16	; 22
    3b2c:	96 e2       	ldi	r25, 0x26	; 38
    3b2e:	9f 93       	push	r25
    3b30:	8f 93       	push	r24
    3b32:	8e ee       	ldi	r24, 0xEE	; 238
    3b34:	95 e2       	ldi	r25, 0x25	; 37
    3b36:	9f 93       	push	r25
    3b38:	8f 93       	push	r24
    3b3a:	0e 94 13 56 	call	0xac26	; 0xac26 <printf>
			samples->gesture = RIGHT_SWIPE;       
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
    3b40:	d7 01       	movw	r26, r14
    3b42:	52 96       	adiw	r26, 0x12	; 18
    3b44:	8c 93       	st	X, r24
    3b46:	cd bf       	out	0x3d, r28	; 61
    3b48:	de bf       	out	0x3e, r29	; 62
    3b4a:	03 c0       	rjmp	.+6      	; 0x3b52 <SliderAlgorithm+0x2dc>
       }
   } else {
	   samples->gesture = 0;
    3b4c:	d7 01       	movw	r26, r14
    3b4e:	52 96       	adiw	r26, 0x12	; 18
    3b50:	1c 92       	st	X, r1
    3b52:	fe 01       	movw	r30, r28
    3b54:	31 96       	adiw	r30, 0x01	; 1

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    3b56:	20 e0       	ldi	r18, 0x00	; 0
   {
        if (x.u16[LSB] < xbucket_Array[xbucket])
    3b58:	81 91       	ld	r24, Z+
    3b5a:	91 91       	ld	r25, Z+
    3b5c:	a8 16       	cp	r10, r24
    3b5e:	b9 06       	cpc	r11, r25
    3b60:	18 f0       	brcs	.+6      	; 0x3b68 <SliderAlgorithm+0x2f2>

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    3b62:	2f 5f       	subi	r18, 0xFF	; 255
    3b64:	2a 30       	cpi	r18, 0x0A	; 10
    3b66:	c1 f7       	brne	.-16     	; 0x3b58 <SliderAlgorithm+0x2e2>
            break;
        }
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
    3b68:	80 91 f5 2a 	lds	r24, 0x2AF5
    3b6c:	28 13       	cpse	r18, r24
    3b6e:	04 c0       	rjmp	.+8      	; 0x3b78 <SliderAlgorithm+0x302>
    3b70:	29 30       	cpi	r18, 0x09	; 9
    3b72:	11 f0       	breq	.+4      	; 0x3b78 <SliderAlgorithm+0x302>
    3b74:	21 11       	cpse	r18, r1
    3b76:	04 c0       	rjmp	.+8      	; 0x3b80 <SliderAlgorithm+0x30a>
   {
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3b78:	00 93 ff 2a 	sts	0x2AFF, r16
    3b7c:	10 93 00 2b 	sts	0x2B00, r17
   }
   last_xbucket = xbucket;  // store latest information for next comparison
    3b80:	20 93 f5 2a 	sts	0x2AF5, r18

   // LED State machine - Pause gesture recognition is also integrated here 
   if (LED_State != 0)  // indicate gesture pattern
    3b84:	e0 91 fe 2a 	lds	r30, 0x2AFE
    3b88:	ee 23       	and	r30, r30
    3b8a:	e1 f0       	breq	.+56     	; 0x3bc4 <SliderAlgorithm+0x34e>
   {
      if ((u8)(QS_GlobalCounterOverflow - LED_flash_timeout) >= LED_STATE_TIME)
    3b8c:	80 91 f3 2a 	lds	r24, 0x2AF3
    3b90:	b0 2f       	mov	r27, r16
    3b92:	b8 1b       	sub	r27, r24
    3b94:	b7 32       	cpi	r27, 0x27	; 39
    3b96:	08 f4       	brcc	.+2      	; 0x3b9a <SliderAlgorithm+0x324>
    3b98:	64 c0       	rjmp	.+200    	; 0x3c62 <SliderAlgorithm+0x3ec>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    3b9a:	00 93 f3 2a 	sts	0x2AF3, r16
    3b9e:	10 93 f4 2a 	sts	0x2AF4, r17

         // Write to Port 1 of the MCU
         PortSet( 1, LED_flash_pattern[(--LED_State)%8]); 
    3ba2:	e1 50       	subi	r30, 0x01	; 1
    3ba4:	e0 93 fe 2a 	sts	0x2AFE, r30
    3ba8:	e7 70       	andi	r30, 0x07	; 7
    3baa:	f0 e0       	ldi	r31, 0x00	; 0
    3bac:	ea 50       	subi	r30, 0x0A	; 10
    3bae:	f5 4d       	sbci	r31, 0xD5	; 213
    3bb0:	60 81       	ld	r22, Z
    3bb2:	70 e0       	ldi	r23, 0x00	; 0
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	55 dc       	rcall	.-1878   	; 0x3464 <PortSet>

         Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3bba:	00 93 ff 2a 	sts	0x2AFF, r16
    3bbe:	10 93 00 2b 	sts	0x2B00, r17
    3bc2:	4f c0       	rjmp	.+158    	; 0x3c62 <SliderAlgorithm+0x3ec>
      //PortSet( 1, LED_P1_Vals[xbucket]);
	  //printf("x: %d \r\n",x.u16[LSB]);


      // check time stamp for pause
      if ((QS_GlobalCounterOverflow - Pause_gesture_timeout) >= PAUSE_TIMEOUT) 
    3bc4:	80 91 ff 2a 	lds	r24, 0x2AFF
    3bc8:	90 91 00 2b 	lds	r25, 0x2B00
    3bcc:	f8 01       	movw	r30, r16
    3bce:	e8 1b       	sub	r30, r24
    3bd0:	f9 0b       	sbc	r31, r25
    3bd2:	cf 01       	movw	r24, r30
    3bd4:	8a 38       	cpi	r24, 0x8A	; 138
    3bd6:	92 40       	sbci	r25, 0x02	; 2
    3bd8:	08 f4       	brcc	.+2      	; 0x3bdc <SliderAlgorithm+0x366>
    3bda:	43 c0       	rjmp	.+134    	; 0x3c62 <SliderAlgorithm+0x3ec>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    3bdc:	00 93 f3 2a 	sts	0x2AF3, r16
    3be0:	10 93 f4 2a 	sts	0x2AF4, r17
         
         for (LED_State = 0; LED_State < 8; )
    3be4:	10 92 fe 2a 	sts	0x2AFE, r1
    3be8:	e0 e0       	ldi	r30, 0x00	; 0
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    3bea:	6f ef       	ldi	r22, 0xFF	; 255
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	ce 01       	movw	r24, r28
    3bf0:	45 96       	adiw	r24, 0x15	; 21
    3bf2:	82 0f       	add	r24, r18
    3bf4:	93 1f       	adc	r25, r19
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    3bf6:	ae 2f       	mov	r26, r30
    3bf8:	b0 e0       	ldi	r27, 0x00	; 0
    3bfa:	aa 50       	subi	r26, 0x0A	; 10
    3bfc:	b5 4d       	sbci	r27, 0xD5	; 213
    3bfe:	6c 93       	st	X, r22
    3c00:	a1 e0       	ldi	r26, 0x01	; 1
    3c02:	ae 0f       	add	r26, r30
            LED_flash_pattern[LED_State++] = 0xFF;
    3c04:	b0 e0       	ldi	r27, 0x00	; 0
    3c06:	aa 50       	subi	r26, 0x0A	; 10
    3c08:	b5 4d       	sbci	r27, 0xD5	; 213
    3c0a:	6c 93       	st	X, r22
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	5c 91       	ld	r21, X
    3c10:	a2 e0       	ldi	r26, 0x02	; 2
    3c12:	ae 0f       	add	r26, r30
    3c14:	b0 e0       	ldi	r27, 0x00	; 0
    3c16:	aa 50       	subi	r26, 0x0A	; 10
    3c18:	b5 4d       	sbci	r27, 0xD5	; 213
    3c1a:	5c 93       	st	X, r21
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3c1c:	44 e0       	ldi	r20, 0x04	; 4
    3c1e:	4e 0f       	add	r20, r30
    3c20:	ed 5f       	subi	r30, 0xFD	; 253
    3c22:	f0 e0       	ldi	r31, 0x00	; 0
    3c24:	ea 50       	subi	r30, 0x0A	; 10
    3c26:	f5 4d       	sbci	r31, 0xD5	; 213
    3c28:	50 83       	st	Z, r21
      // check time stamp for pause
      if ((QS_GlobalCounterOverflow - Pause_gesture_timeout) >= PAUSE_TIMEOUT) 
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
    3c2a:	48 30       	cpi	r20, 0x08	; 8
    3c2c:	10 f4       	brcc	.+4      	; 0x3c32 <SliderAlgorithm+0x3bc>
         {
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3c2e:	e4 2f       	mov	r30, r20
    3c30:	e2 cf       	rjmp	.-60     	; 0x3bf6 <SliderAlgorithm+0x380>
         } // LED_State should be 8 when this loop is finished.

         LED_State = 16; // Set LED_State to 16 to repeat the pattern twice
    3c32:	80 e1       	ldi	r24, 0x10	; 16
    3c34:	80 93 fe 2a 	sts	0x2AFE, r24

         // Send off a PAUSE gesture to host.
         printf("                            %s: %d\n", "PAUSE", xbucket<<8) ;   
    3c38:	2f 93       	push	r18
    3c3a:	1f 92       	push	r1
    3c3c:	82 e2       	ldi	r24, 0x22	; 34
    3c3e:	96 e2       	ldi	r25, 0x26	; 38
    3c40:	9f 93       	push	r25
    3c42:	8f 93       	push	r24
    3c44:	88 e2       	ldi	r24, 0x28	; 40
    3c46:	96 e2       	ldi	r25, 0x26	; 38
    3c48:	9f 93       	push	r25
    3c4a:	8f 93       	push	r24
    3c4c:	0e 94 13 56 	call	0xac26	; 0xac26 <printf>
		 samples->gesture = PAUSE;         
    3c50:	83 e0       	ldi	r24, 0x03	; 3
    3c52:	f7 01       	movw	r30, r14
    3c54:	82 8b       	std	Z+18, r24	; 0x12
    3c56:	0f 90       	pop	r0
    3c58:	0f 90       	pop	r0
    3c5a:	0f 90       	pop	r0
    3c5c:	0f 90       	pop	r0
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
       // It is best to display this than printf. Use AUX and PS3 channels
       //REPLACE_0_PS3( 0 );
       //REPLACE_0_AUX( 0 ); 
	    //printf("no touch \r\n");
   }
}
    3c62:	ae 96       	adiw	r28, 0x2e	; 46
    3c64:	cd bf       	out	0x3d, r28	; 61
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	df 91       	pop	r29
    3c6a:	cf 91       	pop	r28
    3c6c:	1f 91       	pop	r17
    3c6e:	0f 91       	pop	r16
    3c70:	ff 90       	pop	r15
    3c72:	ef 90       	pop	r14
    3c74:	df 90       	pop	r13
    3c76:	cf 90       	pop	r12
    3c78:	bf 90       	pop	r11
    3c7a:	af 90       	pop	r10
    3c7c:	9f 90       	pop	r9
    3c7e:	8f 90       	pop	r8
    3c80:	7f 90       	pop	r7
    3c82:	5f 90       	pop	r5
    3c84:	4f 90       	pop	r4
    3c86:	3f 90       	pop	r3
    3c88:	2f 90       	pop	r2
    3c8a:	08 95       	ret

00003c8c <spi_setup>:
#include "spi.h"

void spi_setup(void) 
{
	//Disable power reduction for SPIC 
	PR.PRPC &= ~0x08;	
    3c8c:	e0 e7       	ldi	r30, 0x70	; 112
    3c8e:	f0 e0       	ldi	r31, 0x00	; 0
    3c90:	83 81       	ldd	r24, Z+3	; 0x03
    3c92:	87 7f       	andi	r24, 0xF7	; 247
    3c94:	83 83       	std	Z+3, r24	; 0x03
	
	PORTC.DIRSET = SD_CS | SD_MOSI | SD_SCK;
    3c96:	e0 e4       	ldi	r30, 0x40	; 64
    3c98:	f6 e0       	ldi	r31, 0x06	; 6
    3c9a:	80 eb       	ldi	r24, 0xB0	; 176
    3c9c:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = SD_MISO;
    3c9e:	80 e4       	ldi	r24, 0x40	; 64
    3ca0:	82 83       	std	Z+2, r24	; 0x02
	PORTC.OUTSET = SD_CS;
    3ca2:	80 e1       	ldi	r24, 0x10	; 16
    3ca4:	85 83       	std	Z+5, r24	; 0x05
	
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    3ca6:	80 ed       	ldi	r24, 0xD0	; 208
    3ca8:	80 93 c0 08 	sts	0x08C0, r24
    3cac:	08 95       	ret

00003cae <spi_disable>:
}

void spi_disable(void) 
{	
	SPIC.CTRL = 0;
    3cae:	10 92 c0 08 	sts	0x08C0, r1
	
	PORTC.DIRCLR   = SD_CS | SD_MOSI | SD_SCK;
    3cb2:	e0 e4       	ldi	r30, 0x40	; 64
    3cb4:	f6 e0       	ldi	r31, 0x06	; 6
    3cb6:	80 eb       	ldi	r24, 0xB0	; 176
    3cb8:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;
    3cba:	88 e1       	ldi	r24, 0x18	; 24
    3cbc:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;
    3cbe:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;
    3cc0:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;
    3cc2:	87 8b       	std	Z+23, r24	; 0x17
	
	//Enable power reduction for SPIC 
	PR.PRPC |= 0x08;
    3cc4:	e0 e7       	ldi	r30, 0x70	; 112
    3cc6:	f0 e0       	ldi	r31, 0x00	; 0
    3cc8:	83 81       	ldd	r24, Z+3	; 0x03
    3cca:	88 60       	ori	r24, 0x08	; 8
    3ccc:	83 83       	std	Z+3, r24	; 0x03
    3cce:	08 95       	ret

00003cd0 <spi_wr_rd>:

uint8_t spi_wr_rd(uint8_t data) 
{	
	uint16_t timeout = 0;
	
	SPIC.DATA = data;
    3cd0:	80 93 c3 08 	sts	0x08C3, r24
	while(!(SPIC.STATUS & SPI_IF_bm)) {
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	20 91 c2 08 	lds	r18, 0x08C2
    3cdc:	27 fd       	sbrc	r18, 7
    3cde:	05 c0       	rjmp	.+10     	; 0x3cea <spi_wr_rd+0x1a>
    3ce0:	01 97       	sbiw	r24, 0x01	; 1
		if (timeout++ == 0xffff) {
    3ce2:	00 97       	sbiw	r24, 0x00	; 0
    3ce4:	c9 f7       	brne	.-14     	; 0x3cd8 <spi_wr_rd+0x8>
			return 0;
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return SPIC.DATA;
}
    3ce8:	08 95       	ret
	while(!(SPIC.STATUS & SPI_IF_bm)) {
		if (timeout++ == 0xffff) {
			return 0;
		}
	}
	return SPIC.DATA;
    3cea:	80 91 c3 08 	lds	r24, 0x08C3
    3cee:	08 95       	ret

00003cf0 <twi_setup>:
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3cf0:	e0 e7       	ldi	r30, 0x70	; 112
    3cf2:	f0 e0       	ldi	r31, 0x00	; 0
    3cf4:	83 81       	ldd	r24, Z+3	; 0x03
    3cf6:	8f 7b       	andi	r24, 0xBF	; 191
    3cf8:	83 83       	std	Z+3, r24	; 0x03
    3cfa:	e0 e8       	ldi	r30, 0x80	; 128
    3cfc:	f4 e0       	ldi	r31, 0x04	; 4
    3cfe:	12 82       	std	Z+2, r1	; 0x02
    3d00:	89 e0       	ldi	r24, 0x09	; 9
    3d02:	85 83       	std	Z+5, r24	; 0x05
    3d04:	88 e0       	ldi	r24, 0x08	; 8
    3d06:	81 83       	std	Z+1, r24	; 0x01
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	84 83       	std	Z+4, r24	; 0x04
    3d0c:	08 95       	ret

00003d0e <twi_start_transmission>:
}

uint8_t twi_start_transmission(TWI_t* const TWI,
const uint8_t slave_address,
const uint16_t timeout_ms)
{
    3d0e:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    3d10:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    3d12:	24 e6       	ldi	r18, 0x64	; 100
    3d14:	24 9f       	mul	r18, r20
    3d16:	c0 01       	movw	r24, r0
    3d18:	25 9f       	mul	r18, r21
    3d1a:	90 0d       	add	r25, r0
    3d1c:	11 24       	eor	r1, r1
	while (timeout_remaining)
    3d1e:	00 97       	sbiw	r24, 0x00	; 0
    3d20:	b9 f0       	breq	.+46     	; 0x3d50 <twi_start_transmission+0x42>
	{
		uint8_t status = TWI->MASTER.STATUS;
    3d22:	24 81       	ldd	r18, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    3d24:	32 2f       	mov	r19, r18
    3d26:	38 74       	andi	r19, 0x48	; 72
    3d28:	38 34       	cpi	r19, 0x48	; 72
    3d2a:	11 f4       	brne	.+4      	; 0x3d30 <twi_start_transmission+0x22>
		{
			TWI->MASTER.ADDR = slave_address;
    3d2c:	66 83       	std	Z+6, r22	; 0x06
    3d2e:	0a c0       	rjmp	.+20     	; 0x3d44 <twi_start_transmission+0x36>
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    3d30:	32 2f       	mov	r19, r18
    3d32:	30 75       	andi	r19, 0x50	; 80
    3d34:	30 35       	cpi	r19, 0x50	; 80
    3d36:	21 f4       	brne	.+8      	; 0x3d40 <twi_start_transmission+0x32>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3d38:	87 e0       	ldi	r24, 0x07	; 7
    3d3a:	83 83       	std	Z+3, r24	; 0x03
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
    3d3c:	84 e0       	ldi	r24, 0x04	; 4
    3d3e:	08 95       	ret
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    3d40:	20 7c       	andi	r18, 0xC0	; 192
    3d42:	61 f4       	brne	.+24     	; 0x3d5c <twi_start_transmission+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3d44:	2a e6       	ldi	r18, 0x6A	; 106
    3d46:	2a 95       	dec	r18
    3d48:	f1 f7       	brne	.-4      	; 0x3d46 <twi_start_transmission+0x38>
    3d4a:	00 c0       	rjmp	.+0      	; 0x3d4c <twi_start_transmission+0x3e>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    3d4c:	01 97       	sbiw	r24, 0x01	; 1
    3d4e:	e7 cf       	rjmp	.-50     	; 0x3d1e <twi_start_transmission+0x10>
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    3d50:	84 81       	ldd	r24, Z+4	; 0x04
    3d52:	85 ff       	sbrs	r24, 5
    3d54:	05 c0       	rjmp	.+10     	; 0x3d60 <twi_start_transmission+0x52>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3d56:	87 e0       	ldi	r24, 0x07	; 7
    3d58:	83 83       	std	Z+3, r24	; 0x03
    3d5a:	02 c0       	rjmp	.+4      	; 0x3d60 <twi_start_transmission+0x52>
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
		{
			return TWI_ERROR_NO_ERROR;
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	08 95       	ret
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    3d60:	83 e0       	ldi	r24, 0x03	; 3
			twi_stop_transmission(TWI);
		}
	}

	return TWI_ERROR_BUS_CAP_TIMEOUT;
}
    3d62:	08 95       	ret

00003d64 <twi_send_byte>:

uint8_t twi_send_byte(TWI_t* const TWI,
const uint16_t timeout_ms,
const uint8_t data)
{
    3d64:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
    3d66:	47 83       	std	Z+7, r20	; 0x07
	
	timeout_remaining = (timeout_ms * 100);
    3d68:	24 e6       	ldi	r18, 0x64	; 100
    3d6a:	26 9f       	mul	r18, r22
    3d6c:	c0 01       	movw	r24, r0
    3d6e:	27 9f       	mul	r18, r23
    3d70:	90 0d       	add	r25, r0
    3d72:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    3d74:	24 81       	ldd	r18, Z+4	; 0x04
    3d76:	26 fd       	sbrc	r18, 6
    3d78:	08 c0       	rjmp	.+16     	; 0x3d8a <twi_send_byte+0x26>
    3d7a:	00 97       	sbiw	r24, 0x00	; 0
    3d7c:	31 f0       	breq	.+12     	; 0x3d8a <twi_send_byte+0x26>
    3d7e:	2a e6       	ldi	r18, 0x6A	; 106
    3d80:	2a 95       	dec	r18
    3d82:	f1 f7       	brne	.-4      	; 0x3d80 <twi_send_byte+0x1c>
    3d84:	00 c0       	rjmp	.+0      	; 0x3d86 <twi_send_byte+0x22>
		_delay_us(10);
		timeout_remaining--;
    3d86:	01 97       	sbiw	r24, 0x01	; 1
    3d88:	f5 cf       	rjmp	.-22     	; 0x3d74 <twi_send_byte+0x10>
	}

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    3d8a:	84 81       	ldd	r24, Z+4	; 0x04
    3d8c:	86 ff       	sbrs	r24, 6
    3d8e:	06 c0       	rjmp	.+12     	; 0x3d9c <twi_send_byte+0x38>
    3d90:	84 81       	ldd	r24, Z+4	; 0x04
    3d92:	82 95       	swap	r24
    3d94:	81 70       	andi	r24, 0x01	; 1
    3d96:	91 e0       	ldi	r25, 0x01	; 1
    3d98:	89 27       	eor	r24, r25
    3d9a:	08 95       	ret
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
}
    3d9e:	08 95       	ret

00003da0 <twi_receive_byte>:

uint8_t twi_receive_byte(TWI_t* const TWI,
const uint16_t timeout_ms,
uint8_t* const data,
const uint8_t end_of_data)
{
    3da0:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
    3da2:	84 81       	ldd	r24, Z+4	; 0x04
    3da4:	8c 70       	andi	r24, 0x0C	; 12
    3da6:	8c 30       	cpi	r24, 0x0C	; 12
    3da8:	e1 f0       	breq	.+56     	; 0x3de2 <twi_receive_byte+0x42>
		return false;
	}
	timeout_remaining = (timeout_ms * 100);
    3daa:	34 e6       	ldi	r19, 0x64	; 100
    3dac:	36 9f       	mul	r19, r22
    3dae:	c0 01       	movw	r24, r0
    3db0:	37 9f       	mul	r19, r23
    3db2:	90 0d       	add	r25, r0
    3db4:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm) && timeout_remaining) {
    3db6:	34 81       	ldd	r19, Z+4	; 0x04
    3db8:	37 fd       	sbrc	r19, 7
    3dba:	08 c0       	rjmp	.+16     	; 0x3dcc <twi_receive_byte+0x2c>
    3dbc:	00 97       	sbiw	r24, 0x00	; 0
    3dbe:	31 f0       	breq	.+12     	; 0x3dcc <twi_receive_byte+0x2c>
    3dc0:	3a e6       	ldi	r19, 0x6A	; 106
    3dc2:	3a 95       	dec	r19
    3dc4:	f1 f7       	brne	.-4      	; 0x3dc2 <twi_receive_byte+0x22>
    3dc6:	00 c0       	rjmp	.+0      	; 0x3dc8 <twi_receive_byte+0x28>
		_delay_us(10);
		timeout_remaining--;
    3dc8:	01 97       	sbiw	r24, 0x01	; 1
    3dca:	f5 cf       	rjmp	.-22     	; 0x3db6 <twi_receive_byte+0x16>
	}

	*data = TWI->MASTER.DATA;
    3dcc:	87 81       	ldd	r24, Z+7	; 0x07
    3dce:	da 01       	movw	r26, r20
    3dd0:	8c 93       	st	X, r24

	if (end_of_data)
    3dd2:	22 23       	and	r18, r18
    3dd4:	11 f0       	breq	.+4      	; 0x3dda <twi_receive_byte+0x3a>
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3dd6:	87 e0       	ldi	r24, 0x07	; 7
    3dd8:	01 c0       	rjmp	.+2      	; 0x3ddc <twi_receive_byte+0x3c>
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    3dda:	82 e0       	ldi	r24, 0x02	; 2
    3ddc:	83 83       	std	Z+3, r24	; 0x03

	return true;
    3dde:	81 e0       	ldi	r24, 0x01	; 1
    3de0:	08 95       	ret
const uint8_t end_of_data)
{
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
		return false;
    3de2:	80 e0       	ldi	r24, 0x00	; 0
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
}
    3de4:	08 95       	ret

00003de6 <twi_read_packet>:
const uint8_t slave_address,
const uint16_t timeout_ms,
const uint8_t reg,
uint8_t* data,
uint8_t length)
{
    3de6:	8f 92       	push	r8
    3de8:	9f 92       	push	r9
    3dea:	af 92       	push	r10
    3dec:	bf 92       	push	r11
    3dee:	cf 92       	push	r12
    3df0:	df 92       	push	r13
    3df2:	ef 92       	push	r14
    3df4:	ff 92       	push	r15
    3df6:	0f 93       	push	r16
    3df8:	1f 93       	push	r17
    3dfa:	cf 93       	push	r28
    3dfc:	df 93       	push	r29
    3dfe:	1f 92       	push	r1
    3e00:	cd b7       	in	r28, 0x3d	; 61
    3e02:	de b7       	in	r29, 0x3e	; 62
    3e04:	4c 01       	movw	r8, r24
    3e06:	f6 2e       	mov	r15, r22
    3e08:	6a 01       	movw	r12, r20
	uint8_t error_code;
	uint8_t len = length;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    3e0a:	66 0f       	add	r22, r22
    3e0c:	29 83       	std	Y+1, r18	; 0x01
    3e0e:	7f df       	rcall	.-258    	; 0x3d0e <twi_start_transmission>
    3e10:	29 81       	ldd	r18, Y+1	; 0x01
    3e12:	81 30       	cpi	r24, 0x01	; 1
    3e14:	41 f5       	brne	.+80     	; 0x3e66 <twi_read_packet+0x80>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
    3e16:	42 2f       	mov	r20, r18
    3e18:	b6 01       	movw	r22, r12
    3e1a:	c4 01       	movw	r24, r8
    3e1c:	a3 df       	rcall	.-186    	; 0x3d64 <twi_send_byte>
    3e1e:	88 23       	and	r24, r24
    3e20:	21 f1       	breq	.+72     	; 0x3e6a <twi_read_packet+0x84>
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
    3e22:	6f 2d       	mov	r22, r15
    3e24:	66 0f       	add	r22, r22
    3e26:	61 60       	ori	r22, 0x01	; 1
    3e28:	a6 01       	movw	r20, r12
    3e2a:	c4 01       	movw	r24, r8
    3e2c:	70 df       	rcall	.-288    	; 0x3d0e <twi_start_transmission>
    3e2e:	81 30       	cpi	r24, 0x01	; 1
    3e30:	21 f0       	breq	.+8      	; 0x3e3a <twi_read_packet+0x54>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3e32:	87 e0       	ldi	r24, 0x07	; 7
    3e34:	f4 01       	movw	r30, r8
    3e36:	83 83       	std	Z+3, r24	; 0x03
    3e38:	16 c0       	rjmp	.+44     	; 0x3e66 <twi_read_packet+0x80>
    3e3a:	ff 24       	eor	r15, r15
    3e3c:	fa 94       	dec	r15
    3e3e:	fe 0c       	add	r15, r14
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
    3e40:	8f ef       	ldi	r24, 0xFF	; 255
    3e42:	f8 16       	cp	r15, r24
    3e44:	b1 f3       	breq	.-20     	; 0x3e32 <twi_read_packet+0x4c>
			{
				if (!(twi_receive_byte(TWI, timeout_ms, data++, (length == 0))))
    3e46:	58 01       	movw	r10, r16
    3e48:	ff ef       	ldi	r31, 0xFF	; 255
    3e4a:	af 1a       	sub	r10, r31
    3e4c:	bf 0a       	sbc	r11, r31
    3e4e:	21 e0       	ldi	r18, 0x01	; 1
    3e50:	f1 10       	cpse	r15, r1
    3e52:	20 e0       	ldi	r18, 0x00	; 0
    3e54:	a8 01       	movw	r20, r16
    3e56:	b6 01       	movw	r22, r12
    3e58:	c4 01       	movw	r24, r8
    3e5a:	a2 df       	rcall	.-188    	; 0x3da0 <twi_receive_byte>
    3e5c:	fa 94       	dec	r15
    3e5e:	88 23       	and	r24, r24
    3e60:	41 f3       	breq	.-48     	; 0x3e32 <twi_read_packet+0x4c>
    3e62:	85 01       	movw	r16, r10
    3e64:	ed cf       	rjmp	.-38     	; 0x3e40 <twi_read_packet+0x5a>
		}

		twi_stop_transmission(TWI);
	}

	return len;
    3e66:	8e 2d       	mov	r24, r14
    3e68:	01 c0       	rjmp	.+2      	; 0x3e6c <twi_read_packet+0x86>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    3e6a:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return len;
}
    3e6c:	0f 90       	pop	r0
    3e6e:	df 91       	pop	r29
    3e70:	cf 91       	pop	r28
    3e72:	1f 91       	pop	r17
    3e74:	0f 91       	pop	r16
    3e76:	ff 90       	pop	r15
    3e78:	ef 90       	pop	r14
    3e7a:	df 90       	pop	r13
    3e7c:	cf 90       	pop	r12
    3e7e:	bf 90       	pop	r11
    3e80:	af 90       	pop	r10
    3e82:	9f 90       	pop	r9
    3e84:	8f 90       	pop	r8
    3e86:	08 95       	ret

00003e88 <twi_write_packet>:
const uint8_t slave_address,
const uint16_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    3e88:	8f 92       	push	r8
    3e8a:	9f 92       	push	r9
    3e8c:	af 92       	push	r10
    3e8e:	bf 92       	push	r11
    3e90:	cf 92       	push	r12
    3e92:	df 92       	push	r13
    3e94:	ef 92       	push	r14
    3e96:	0f 93       	push	r16
    3e98:	1f 93       	push	r17
    3e9a:	cf 93       	push	r28
    3e9c:	df 93       	push	r29
    3e9e:	1f 92       	push	r1
    3ea0:	cd b7       	in	r28, 0x3d	; 61
    3ea2:	de b7       	in	r29, 0x3e	; 62
    3ea4:	4c 01       	movw	r8, r24
    3ea6:	5a 01       	movw	r10, r20
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    3ea8:	66 0f       	add	r22, r22
    3eaa:	29 83       	std	Y+1, r18	; 0x01
    3eac:	30 df       	rcall	.-416    	; 0x3d0e <twi_start_transmission>
    3eae:	29 81       	ldd	r18, Y+1	; 0x01
    3eb0:	81 30       	cpi	r24, 0x01	; 1
    3eb2:	e1 f4       	brne	.+56     	; 0x3eec <twi_write_packet+0x64>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
    3eb4:	42 2f       	mov	r20, r18
    3eb6:	b5 01       	movw	r22, r10
    3eb8:	c4 01       	movw	r24, r8
    3eba:	54 df       	rcall	.-344    	; 0x3d64 <twi_send_byte>
    3ebc:	88 23       	and	r24, r24
    3ebe:	c1 f0       	breq	.+48     	; 0x3ef0 <twi_write_packet+0x68>
    3ec0:	68 01       	movw	r12, r16
    3ec2:	1f ef       	ldi	r17, 0xFF	; 255
    3ec4:	1e 0d       	add	r17, r14
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    3ec6:	1f 3f       	cpi	r17, 0xFF	; 255
    3ec8:	61 f0       	breq	.+24     	; 0x3ee2 <twi_write_packet+0x5a>
		{
			if (!(twi_send_byte(TWI, timeout_ms, *(data++))))
    3eca:	f6 01       	movw	r30, r12
    3ecc:	41 91       	ld	r20, Z+
    3ece:	6f 01       	movw	r12, r30
    3ed0:	b5 01       	movw	r22, r10
    3ed2:	c4 01       	movw	r24, r8
    3ed4:	47 df       	rcall	.-370    	; 0x3d64 <twi_send_byte>
    3ed6:	9f ef       	ldi	r25, 0xFF	; 255
    3ed8:	91 0f       	add	r25, r17
    3eda:	88 23       	and	r24, r24
    3edc:	11 f0       	breq	.+4      	; 0x3ee2 <twi_write_packet+0x5a>
    3ede:	19 2f       	mov	r17, r25
    3ee0:	f2 cf       	rjmp	.-28     	; 0x3ec6 <twi_write_packet+0x3e>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3ee2:	87 e0       	ldi	r24, 0x07	; 7
    3ee4:	f4 01       	movw	r30, r8
    3ee6:	83 83       	std	Z+3, r24	; 0x03
    3ee8:	81 2f       	mov	r24, r17
    3eea:	03 c0       	rjmp	.+6      	; 0x3ef2 <twi_write_packet+0x6a>
    3eec:	8e 2d       	mov	r24, r14
    3eee:	01 c0       	rjmp	.+2      	; 0x3ef2 <twi_write_packet+0x6a>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    3ef0:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return length;
    3ef2:	0f 90       	pop	r0
    3ef4:	df 91       	pop	r29
    3ef6:	cf 91       	pop	r28
    3ef8:	1f 91       	pop	r17
    3efa:	0f 91       	pop	r16
    3efc:	ef 90       	pop	r14
    3efe:	df 90       	pop	r13
    3f00:	cf 90       	pop	r12
    3f02:	bf 90       	pop	r11
    3f04:	af 90       	pop	r10
    3f06:	9f 90       	pop	r9
    3f08:	8f 90       	pop	r8
    3f0a:	08 95       	ret

00003f0c <uart_setup>:
#include "uart.h"

void uart_setup(void) 
{
	//Disable power reduction for USARTD0 
	PR.PRPD &= ~0x10;
    3f0c:	e0 e7       	ldi	r30, 0x70	; 112
    3f0e:	f0 e0       	ldi	r31, 0x00	; 0
    3f10:	84 81       	ldd	r24, Z+4	; 0x04
    3f12:	8f 7e       	andi	r24, 0xEF	; 239
    3f14:	84 83       	std	Z+4, r24	; 0x04
		
	PORTD.DIRSET = UART_TX;
    3f16:	e0 e6       	ldi	r30, 0x60	; 96
    3f18:	f6 e0       	ldi	r31, 0x06	; 6
    3f1a:	88 e0       	ldi	r24, 0x08	; 8
    3f1c:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = UART_RX;
    3f1e:	84 e0       	ldi	r24, 0x04	; 4
    3f20:	82 83       	std	Z+2, r24	; 0x02
	//PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;
	
	USARTD0.CTRLA	  = USART_RXCINTLVL_MED_gc;
    3f22:	e0 ea       	ldi	r30, 0xA0	; 160
    3f24:	f9 e0       	ldi	r31, 0x09	; 9
    3f26:	80 e2       	ldi	r24, 0x20	; 32
    3f28:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 2094;
    3f2a:	8e e2       	ldi	r24, 0x2E	; 46
    3f2c:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (-7 << 4) | (2094 >> 8);
    3f2e:	88 e9       	ldi	r24, 0x98	; 152
    3f30:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLC	  = USART_CHSIZE_8BIT_gc;
    3f32:	83 e0       	ldi	r24, 0x03	; 3
    3f34:	85 83       	std	Z+5, r24	; 0x05
	USARTD0.CTRLB	  = USART_RXEN_bm | USART_TXEN_bm;
    3f36:	88 e1       	ldi	r24, 0x18	; 24
    3f38:	84 83       	std	Z+4, r24	; 0x04
    3f3a:	08 95       	ret

00003f3c <uart_disable>:
}

void uart_disable(void)
{	
	USARTD0.CTRLB = 0;
    3f3c:	e0 ea       	ldi	r30, 0xA0	; 160
    3f3e:	f9 e0       	ldi	r31, 0x09	; 9
    3f40:	14 82       	std	Z+4, r1	; 0x04
	
	PORTD.DIRCLR   = UART_TX | UART_RX;
    3f42:	e0 e6       	ldi	r30, 0x60	; 96
    3f44:	f6 e0       	ldi	r31, 0x06	; 6
    3f46:	8c e0       	ldi	r24, 0x0C	; 12
    3f48:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;
    3f4a:	88 e1       	ldi	r24, 0x18	; 24
    3f4c:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;
    3f4e:	83 8b       	std	Z+19, r24	; 0x13
	
	//Enable power reduction for USARTD0 
	PR.PRPD |= 0x10;
    3f50:	e0 e7       	ldi	r30, 0x70	; 112
    3f52:	f0 e0       	ldi	r31, 0x00	; 0
    3f54:	84 81       	ldd	r24, Z+4	; 0x04
    3f56:	80 61       	ori	r24, 0x10	; 16
    3f58:	84 83       	std	Z+4, r24	; 0x04
    3f5a:	08 95       	ret

00003f5c <uart_put_char>:
}

void uart_put_char(char c) 
{
	while (!(USARTD0.STATUS & USART_DREIF_bm));
    3f5c:	90 91 a1 09 	lds	r25, 0x09A1
    3f60:	95 ff       	sbrs	r25, 5
    3f62:	fc cf       	rjmp	.-8      	; 0x3f5c <uart_put_char>
	USARTD0.DATA = c;
    3f64:	80 93 a0 09 	sts	0x09A0, r24
    3f68:	08 95       	ret

00003f6a <uart_get_char>:
}

char uart_get_char(void) 
{
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
    3f6a:	80 91 a1 09 	lds	r24, 0x09A1
    3f6e:	87 ff       	sbrs	r24, 7
    3f70:	fc cf       	rjmp	.-8      	; 0x3f6a <uart_get_char>
	return USARTD0.DATA;
    3f72:	80 91 a0 09 	lds	r24, 0x09A0
}
    3f76:	08 95       	ret

00003f78 <uart_write_str>:

void uart_write_str(char *str) 
{
    3f78:	cf 93       	push	r28
    3f7a:	df 93       	push	r29
    3f7c:	ec 01       	movw	r28, r24
	while (*str) {
    3f7e:	89 91       	ld	r24, Y+
    3f80:	88 23       	and	r24, r24
    3f82:	11 f0       	breq	.+4      	; 0x3f88 <uart_write_str+0x10>
		uart_put_char(*str++);
    3f84:	eb df       	rcall	.-42     	; 0x3f5c <uart_put_char>
    3f86:	fb cf       	rjmp	.-10     	; 0x3f7e <uart_write_str+0x6>
	}
	uart_put_char('\r');
    3f88:	8d e0       	ldi	r24, 0x0D	; 13
    3f8a:	e8 df       	rcall	.-48     	; 0x3f5c <uart_put_char>
	uart_put_char('\n');
    3f8c:	8a e0       	ldi	r24, 0x0A	; 10
}
    3f8e:	df 91       	pop	r29
    3f90:	cf 91       	pop	r28
{
	while (*str) {
		uart_put_char(*str++);
	}
	uart_put_char('\r');
	uart_put_char('\n');
    3f92:	e4 cf       	rjmp	.-56     	; 0x3f5c <uart_put_char>

00003f94 <__vector_18>:
	dac_setup(false);
	timer_setup();
}

ISR(TCC0_CCC_vect) 
{
    3f94:	1f 92       	push	r1
    3f96:	0f 92       	push	r0
    3f98:	0f b6       	in	r0, 0x3f	; 63
    3f9a:	0f 92       	push	r0
    3f9c:	11 24       	eor	r1, r1
    3f9e:	8f 93       	push	r24
    3fa0:	9f 93       	push	r25
	if (test_val == 1)
    3fa2:	80 91 0e 2b 	lds	r24, 0x2B0E
    3fa6:	90 91 0f 2b 	lds	r25, 0x2B0F
    3faa:	01 97       	sbiw	r24, 0x01	; 1
    3fac:	59 f4       	brne	.+22     	; 0x3fc4 <__vector_18+0x30>
	{
		DACB.CH0DATA = 0xfff;
    3fae:	8f ef       	ldi	r24, 0xFF	; 255
    3fb0:	9f e0       	ldi	r25, 0x0F	; 15
    3fb2:	80 93 38 03 	sts	0x0338, r24
    3fb6:	90 93 39 03 	sts	0x0339, r25
		test_val = 0;
    3fba:	10 92 0e 2b 	sts	0x2B0E, r1
    3fbe:	10 92 0f 2b 	sts	0x2B0F, r1
    3fc2:	0a c0       	rjmp	.+20     	; 0x3fd8 <__vector_18+0x44>
	} else {
		DACB.CH0DATA = 0x000;
    3fc4:	10 92 38 03 	sts	0x0338, r1
    3fc8:	10 92 39 03 	sts	0x0339, r1
		test_val = 1;
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	80 93 0e 2b 	sts	0x2B0E, r24
    3fd4:	90 93 0f 2b 	sts	0x2B0F, r25
	}
	
}
    3fd8:	9f 91       	pop	r25
    3fda:	8f 91       	pop	r24
    3fdc:	0f 90       	pop	r0
    3fde:	0f be       	out	0x3f, r0	; 63
    3fe0:	0f 90       	pop	r0
    3fe2:	1f 90       	pop	r1
    3fe4:	18 95       	reti

00003fe6 <main>:
	asm("sleep");
	while(1);
}

int main(void) 
{	
    3fe6:	cf 93       	push	r28
    3fe8:	df 93       	push	r29
    3fea:	cd b7       	in	r28, 0x3d	; 61
    3fec:	de b7       	in	r29, 0x3e	; 62
    3fee:	64 97       	sbiw	r28, 0x14	; 20
    3ff0:	cd bf       	out	0x3d, r28	; 61
    3ff2:	de bf       	out	0x3e, r29	; 62
	//Structures
	SI114X_IRQ_SAMPLE sensor_data;
	
	//System
	clock_setup_32_mhz_pll();
    3ff4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <clock_setup_32_mhz_pll>
	
	lowpower_setup();
    3ff8:	0e 94 93 12 	call	0x2526	; 0x2526 <lowpower_setup>
	display_setup();
    3ffc:	0b d1       	rcall	.+534    	; 0x4214 <display_setup>
	esp8266_off();
    3ffe:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <esp8266_off>
	spi_disable();
    4002:	55 de       	rcall	.-854    	; 0x3cae <spi_disable>
	uart_disable();
    4004:	9b df       	rcall	.-202    	; 0x3f3c <uart_disable>
	btn_setup(POLL_MODE);
    4006:	80 e0       	ldi	r24, 0x00	; 0
    4008:	0e 94 68 11 	call	0x22d0	; 0x22d0 <btn_setup>
	
	SLEEP.CTRL |= SLEEP_MODE_PWR_SAVE;
    400c:	80 91 48 00 	lds	r24, 0x0048
    4010:	86 60       	ori	r24, 0x06	; 6
    4012:	80 93 48 00 	sts	0x0048, r24
	
	//Init env variables
	btn_status = btn_check_press();
    4016:	0e 94 c8 11 	call	0x2390	; 0x2390 <btn_check_press>
    401a:	80 93 aa 2c 	sts	0x2CAA, r24
	
	if (!EEPROM_ReadEnv() || (btn_status == BTN1)) {
    401e:	0e 94 a0 09 	call	0x1340	; 0x1340 <EEPROM_ReadEnv>
    4022:	88 23       	and	r24, r24
    4024:	21 f0       	breq	.+8      	; 0x402e <main+0x48>
    4026:	80 91 aa 2c 	lds	r24, 0x2CAA
    402a:	81 30       	cpi	r24, 0x01	; 1
    402c:	11 f4       	brne	.+4      	; 0x4032 <main+0x4c>
		menu_set_env_variables();
    402e:	0e 94 c4 44 	call	0x8988	; 0x8988 <menu_set_env_variables>
	} 
	
	//Debug interface
	uart_setup();
    4032:	6c df       	rcall	.-296    	; 0x3f0c <uart_setup>
	stdout = stdin = &mystdout;
    4034:	82 e1       	ldi	r24, 0x12	; 18
    4036:	90 e2       	ldi	r25, 0x20	; 32
    4038:	80 93 d8 2c 	sts	0x2CD8, r24
    403c:	90 93 d9 2c 	sts	0x2CD9, r25
    4040:	80 93 da 2c 	sts	0x2CDA, r24
    4044:	90 93 db 2c 	sts	0x2CDB, r25

#ifdef DEBUG_ON
	puts("SQUARECLOCK - By: Erlend Hestnes (2016)\r\n");
    4048:	8c e4       	ldi	r24, 0x4C	; 76
    404a:	96 e2       	ldi	r25, 0x26	; 38
    404c:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>

static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) 
{
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    4050:	87 e0       	ldi	r24, 0x07	; 7
    4052:	80 93 a2 00 	sts	0x00A2, r24
	puts("SQUARECLOCK - By: Erlend Hestnes (2016)\r\n");
#endif

	//Enable interrupts
	pmic_setup();
	sei();
    4056:	78 94       	sei
	
	//Turn on proximity channel 1 with ISR and threshold
	twi_setup(&TWIC);
    4058:	80 e8       	ldi	r24, 0x80	; 128
    405a:	94 e0       	ldi	r25, 0x04	; 4
    405c:	49 de       	rcall	.-878    	; 0x3cf0 <twi_setup>

#ifdef IR_SLIDER_ALGORITHM
	si114x_baseline_calibration(&sensor_data);
#endif
	
	si114x_setup_ps1();
    405e:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <si114x_setup_ps1>
	
	//Turn on RTC
	display_fade(0);
    4062:	80 e0       	ldi	r24, 0x00	; 0
    4064:	f1 d0       	rcall	.+482    	; 0x4248 <display_fade>
	rtc_enable_time_render();
    4066:	0e 94 69 13 	call	0x26d2	; 0x26d2 <rtc_enable_time_render>
	display_refresh_screen();
    406a:	ec d0       	rcall	.+472    	; 0x4244 <display_refresh_screen>
	rtc_setup();
    406c:	0e 94 b1 12 	call	0x2562	; 0x2562 <rtc_setup>
	
	EEPROM_WriteEnv();
    4070:	0e 94 96 09 	call	0x132c	; 0x132c <EEPROM_WriteEnv>
	
	//This should flip MOSI and SCK, if DMA should be used at some point...
	//PORTC.REMAP |= PORT_SPI_bm;
	
	bool led_on = true;
    4074:	ff 24       	eor	r15, r15
    4076:	f3 94       	inc	r15
				_delay_ms(1000);
			}
			btn_status = NO_BTN;
			led_on ^= true;
		} else if (alarm_status == ALARM_TRIGGERED) {
			alarm_status = ALARM_OFF;
    4078:	82 e0       	ldi	r24, 0x02	; 2
    407a:	e8 2e       	mov	r14, r24
			} else {
				display_on();
				_delay_ms(1000);
			}
			btn_status = NO_BTN;
			led_on ^= true;
    407c:	dd 24       	eor	r13, r13
    407e:	d3 94       	inc	r13
	//PORTC.REMAP |= PORT_SPI_bm;
	
	bool led_on = true;
	
	while (1) { 	
		if (si114x_status == PS1_INT) {
    4080:	80 91 ac 2c 	lds	r24, 0x2CAC
    4084:	84 30       	cpi	r24, 0x04	; 4
    4086:	09 f0       	breq	.+2      	; 0x408a <main+0xa4>
    4088:	42 c0       	rjmp	.+132    	; 0x410e <main+0x128>
			uint16_t cnt = 0;
			bool timeout = false;
			env.menu_id = 0;
    408a:	10 92 23 2b 	sts	0x2B23, r1
			
			btn_disable_si114x_interrupt();
    408e:	0e 94 ba 11 	call	0x2374	; 0x2374 <btn_disable_si114x_interrupt>
			
			display_fade(MAX_BRIGHTNESS);
    4092:	8a e0       	ldi	r24, 0x0A	; 10
    4094:	d9 d0       	rcall	.+434    	; 0x4248 <display_fade>
#ifdef DEBUG_ON
			puts("DEBUG: Entered gesture mode.");
    4096:	86 e7       	ldi	r24, 0x76	; 118
    4098:	96 e2       	ldi	r25, 0x26	; 38
    409a:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
#endif
			si114x_setup();
    409e:	0e 94 d6 16 	call	0x2dac	; 0x2dac <si114x_setup>
	
	bool led_on = true;
	
	while (1) { 	
		if (si114x_status == PS1_INT) {
			uint16_t cnt = 0;
    40a2:	00 e0       	ldi	r16, 0x00	; 0
    40a4:	10 e0       	ldi	r17, 0x00	; 0
#endif
			si114x_setup();
			//_delay_ms(250);
			
			while(!timeout) {
				si114x_get_data(&sensor_data);
    40a6:	ce 01       	movw	r24, r28
    40a8:	01 96       	adiw	r24, 0x01	; 1
    40aa:	0e 94 76 14 	call	0x28ec	; 0x28ec <si114x_get_data>
#ifdef IR_SLIDER_ALGORITHM
				si114x_process_samples((HANDLE)SI114X_ADDR,&sensor_data);
#else
				slider_algorithm_v2((HANDLE)SI114X_ADDR,&sensor_data,1);
    40ae:	41 e0       	ldi	r20, 0x01	; 1
    40b0:	50 e0       	ldi	r21, 0x00	; 0
    40b2:	be 01       	movw	r22, r28
    40b4:	6f 5f       	subi	r22, 0xFF	; 255
    40b6:	7f 4f       	sbci	r23, 0xFF	; 255
    40b8:	8a e5       	ldi	r24, 0x5A	; 90
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	46 db       	rcall	.-2420   	; 0x374a <slider_algorithm_v2>
#endif
				menu_state_machine(&sensor_data);
    40be:	ce 01       	movw	r24, r28
    40c0:	01 96       	adiw	r24, 0x01	; 1
    40c2:	0e 94 0a 49 	call	0x9214	; 0x9214 <menu_state_machine>
				
				if (sensor_data.ps1 < PROXIMITY_THRESHOLD2) {
    40c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    40c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    40ca:	80 34       	cpi	r24, 0x40	; 64
    40cc:	96 40       	sbci	r25, 0x06	; 6
    40ce:	20 f0       	brcs	.+8      	; 0x40d8 <main+0xf2>
					if (cnt++ > MENU_TIMEOUT) {
						timeout = true;
					}
				} else {
					cnt = 0;
    40d0:	80 e0       	ldi	r24, 0x00	; 0
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	8c 01       	movw	r16, r24
    40d6:	e7 cf       	rjmp	.-50     	; 0x40a6 <main+0xc0>
				slider_algorithm_v2((HANDLE)SI114X_ADDR,&sensor_data,1);
#endif
				menu_state_machine(&sensor_data);
				
				if (sensor_data.ps1 < PROXIMITY_THRESHOLD2) {
					if (cnt++ > MENU_TIMEOUT) {
    40d8:	c8 01       	movw	r24, r16
    40da:	01 96       	adiw	r24, 0x01	; 1
			puts("DEBUG: Entered gesture mode.");
#endif
			si114x_setup();
			//_delay_ms(250);
			
			while(!timeout) {
    40dc:	09 35       	cpi	r16, 0x59	; 89
    40de:	1b 41       	sbci	r17, 0x1B	; 27
    40e0:	c8 f3       	brcs	.-14     	; 0x40d4 <main+0xee>
					cnt = 0;
				}
				
			}
			//WARNING: Should not write too often to EEPROM
		    EEPROM_WriteEnv();
    40e2:	0e 94 96 09 	call	0x132c	; 0x132c <EEPROM_WriteEnv>
#ifdef DEBUG_ON
			puts("DEBUG: Timeout! Leaving gesture mode.");
    40e6:	83 e9       	ldi	r24, 0x93	; 147
    40e8:	96 e2       	ldi	r25, 0x26	; 38
    40ea:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
#endif
			if (env.menu_id != 0) {
    40ee:	80 91 23 2b 	lds	r24, 0x2B23
    40f2:	88 23       	and	r24, r24
    40f4:	21 f0       	breq	.+8      	; 0x40fe <main+0x118>
				display_slide_out_to_bottom();
    40f6:	c0 d4       	rcall	.+2432   	; 0x4a78 <display_slide_out_to_bottom>
				rtc_enable_time_render();
    40f8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <rtc_enable_time_render>
				display_slide_in_from_top();
    40fc:	9d d4       	rcall	.+2362   	; 0x4a38 <display_slide_in_from_top>
			}
			display_fade(env.brightness);
    40fe:	80 91 25 2b 	lds	r24, 0x2B25
    4102:	a2 d0       	rcall	.+324    	; 0x4248 <display_fade>
			btn_si114x_enable_interrupt();
    4104:	0e 94 ac 11 	call	0x2358	; 0x2358 <btn_si114x_enable_interrupt>
			si114x_setup_ps1();
    4108:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <si114x_setup_ps1>
    410c:	27 c0       	rjmp	.+78     	; 0x415c <main+0x176>
		} else if (si114x_status == ALS_INT_2) {
    410e:	80 91 ac 2c 	lds	r24, 0x2CAC
    4112:	82 30       	cpi	r24, 0x02	; 2
    4114:	29 f4       	brne	.+10     	; 0x4120 <main+0x13a>
			//Dim light by using the light sensor
#ifdef DEBUG_ON
			puts("DEBUG: Somebody turned off the lights!");
    4116:	89 eb       	ldi	r24, 0xB9	; 185
    4118:	96 e2       	ldi	r25, 0x26	; 38
    411a:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
    411e:	1e c0       	rjmp	.+60     	; 0x415c <main+0x176>
#endif
		} else if (btn_status == BTN4) {
    4120:	80 91 aa 2c 	lds	r24, 0x2CAA
    4124:	84 30       	cpi	r24, 0x04	; 4
    4126:	91 f4       	brne	.+36     	; 0x414c <main+0x166>
			if (led_on) {
    4128:	ff 20       	and	r15, r15
    412a:	11 f0       	breq	.+4      	; 0x4130 <main+0x14a>
				display_off();
    412c:	9f d4       	rcall	.+2366   	; 0x4a6c <display_off>
    412e:	01 c0       	rjmp	.+2      	; 0x4132 <main+0x14c>
				_delay_ms(1000);
			} else {
				display_on();
    4130:	7c d0       	rcall	.+248    	; 0x422a <display_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4132:	8f ef       	ldi	r24, 0xFF	; 255
    4134:	97 ea       	ldi	r25, 0xA7	; 167
    4136:	21 e6       	ldi	r18, 0x61	; 97
    4138:	81 50       	subi	r24, 0x01	; 1
    413a:	90 40       	sbci	r25, 0x00	; 0
    413c:	20 40       	sbci	r18, 0x00	; 0
    413e:	e1 f7       	brne	.-8      	; 0x4138 <main+0x152>
    4140:	00 c0       	rjmp	.+0      	; 0x4142 <main+0x15c>
    4142:	00 00       	nop
				_delay_ms(1000);
			}
			btn_status = NO_BTN;
    4144:	10 92 aa 2c 	sts	0x2CAA, r1
			led_on ^= true;
    4148:	fd 24       	eor	r15, r13
    414a:	08 c0       	rjmp	.+16     	; 0x415c <main+0x176>
		} else if (alarm_status == ALARM_TRIGGERED) {
    414c:	80 91 ab 2c 	lds	r24, 0x2CAB
    4150:	81 11       	cpse	r24, r1
    4152:	04 c0       	rjmp	.+8      	; 0x415c <main+0x176>
			alarm_status = ALARM_OFF;
    4154:	e0 92 ab 2c 	sts	0x2CAB, r14
			menu_alarm();
    4158:	0e 94 32 45 	call	0x8a64	; 0x8a64 <menu_alarm>
		}
		
		si114x_status = 0;
    415c:	10 92 ac 2c 	sts	0x2CAC, r1
		
		SLEEP.CTRL |= SLEEP_SEN_bm;
    4160:	80 91 48 00 	lds	r24, 0x0048
    4164:	81 60       	ori	r24, 0x01	; 1
    4166:	80 93 48 00 	sts	0x0048, r24
		asm("sleep");
    416a:	88 95       	sleep
	}
    416c:	89 cf       	rjmp	.-238    	; 0x4080 <main+0x9a>

0000416e <itoa_simple.constprop.1>:
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    416e:	8f 92       	push	r8
    4170:	9f 92       	push	r9
    4172:	af 92       	push	r10
    4174:	bf 92       	push	r11
    4176:	ef 92       	push	r14
    4178:	ff 92       	push	r15
    417a:	0f 93       	push	r16
    417c:	1f 93       	push	r17
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	97 fd       	sbrc	r25, 7
    4184:	03 c0       	rjmp	.+6      	; 0x418c <itoa_simple.constprop.1+0x1e>
    4186:	c0 e0       	ldi	r28, 0x00	; 0
    4188:	d0 e0       	ldi	r29, 0x00	; 0
    418a:	0b c0       	rjmp	.+22     	; 0x41a2 <itoa_simple.constprop.1+0x34>
    418c:	90 95       	com	r25
    418e:	80 95       	com	r24
    4190:	70 95       	com	r23
    4192:	61 95       	neg	r22
    4194:	7f 4f       	sbci	r23, 0xFF	; 255
    4196:	8f 4f       	sbci	r24, 0xFF	; 255
    4198:	9f 4f       	sbci	r25, 0xFF	; 255
    419a:	2d e2       	ldi	r18, 0x2D	; 45
    419c:	20 b9       	out	0x00, r18	; 0
    419e:	c1 e0       	ldi	r28, 0x01	; 1
    41a0:	d0 e0       	ldi	r29, 0x00	; 0
    41a2:	7e 01       	movw	r14, r28
    41a4:	2a e0       	ldi	r18, 0x0A	; 10
    41a6:	82 2e       	mov	r8, r18
    41a8:	91 2c       	mov	r9, r1
    41aa:	a1 2c       	mov	r10, r1
    41ac:	b1 2c       	mov	r11, r1
    41ae:	87 01       	movw	r16, r14
    41b0:	0f 5f       	subi	r16, 0xFF	; 255
    41b2:	1f 4f       	sbci	r17, 0xFF	; 255
    41b4:	a5 01       	movw	r20, r10
    41b6:	94 01       	movw	r18, r8
    41b8:	0e 94 e5 52 	call	0xa5ca	; 0xa5ca <__udivmodsi4>
    41bc:	60 5d       	subi	r22, 0xD0	; 208
    41be:	f7 01       	movw	r30, r14
    41c0:	60 83       	st	Z, r22
    41c2:	b9 01       	movw	r22, r18
    41c4:	ca 01       	movw	r24, r20
    41c6:	61 15       	cp	r22, r1
    41c8:	71 05       	cpc	r23, r1
    41ca:	81 05       	cpc	r24, r1
    41cc:	91 05       	cpc	r25, r1
    41ce:	11 f0       	breq	.+4      	; 0x41d4 <itoa_simple.constprop.1+0x66>
    41d0:	78 01       	movw	r14, r16
    41d2:	ed cf       	rjmp	.-38     	; 0x41ae <itoa_simple.constprop.1+0x40>
    41d4:	d8 01       	movw	r26, r16
    41d6:	ac 1b       	sub	r26, r28
    41d8:	bd 0b       	sbc	r27, r29
    41da:	cd 01       	movw	r24, r26
    41dc:	01 97       	sbiw	r24, 0x01	; 1
    41de:	ac 0f       	add	r26, r28
    41e0:	bd 1f       	adc	r27, r29
    41e2:	fe 01       	movw	r30, r28
    41e4:	9f 01       	movw	r18, r30
    41e6:	2c 1b       	sub	r18, r28
    41e8:	3d 0b       	sbc	r19, r29
    41ea:	28 17       	cp	r18, r24
    41ec:	39 07       	cpc	r19, r25
    41ee:	34 f4       	brge	.+12     	; 0x41fc <itoa_simple.constprop.1+0x8e>
    41f0:	20 81       	ld	r18, Z
    41f2:	3e 91       	ld	r19, -X
    41f4:	31 93       	st	Z+, r19
    41f6:	2c 93       	st	X, r18
    41f8:	01 97       	sbiw	r24, 0x01	; 1
    41fa:	f4 cf       	rjmp	.-24     	; 0x41e4 <itoa_simple.constprop.1+0x76>
    41fc:	c8 01       	movw	r24, r16
    41fe:	df 91       	pop	r29
    4200:	cf 91       	pop	r28
    4202:	1f 91       	pop	r17
    4204:	0f 91       	pop	r16
    4206:	ff 90       	pop	r15
    4208:	ef 90       	pop	r14
    420a:	bf 90       	pop	r11
    420c:	af 90       	pop	r10
    420e:	9f 90       	pop	r9
    4210:	8f 90       	pop	r8
    4212:	08 95       	ret

00004214 <display_setup>:
    4214:	84 e2       	ldi	r24, 0x24	; 36
    4216:	0e 94 55 0e 	call	0x1caa	; 0x1caa <ht1632c_setup>
    421a:	8f e0       	ldi	r24, 0x0F	; 15
    421c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <ht1632c_set_brightness>
    4220:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <ht1632c_clear_screen>
    4224:	83 e0       	ldi	r24, 0x03	; 3
    4226:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <ht1632c_write_command>

0000422a <display_on>:
    422a:	83 e0       	ldi	r24, 0x03	; 3
    422c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <ht1632c_write_command>
    4230:	0e 94 69 13 	call	0x26d2	; 0x26d2 <rtc_enable_time_render>
    4234:	0c 94 81 10 	jmp	0x2102	; 0x2102 <ht1632c_slide_in_from_top>

00004238 <display_fill_screen>:
    4238:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <ht1632c_fill_screen>

0000423c <display_clear_screen>:
    423c:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <ht1632c_clear_screen>

00004240 <display_clear_buffer>:
    4240:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <ht1632c_clear_buffer>

00004244 <display_refresh_screen>:
    4244:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004248 <display_fade>:
    4248:	1f 93       	push	r17
    424a:	cf 93       	push	r28
    424c:	df 93       	push	r29
    424e:	c8 2f       	mov	r28, r24
    4250:	d0 91 23 20 	lds	r29, 0x2023
    4254:	d8 17       	cp	r29, r24
    4256:	c8 f4       	brcc	.+50     	; 0x428a <display_fade+0x42>
    4258:	df 5f       	subi	r29, 0xFF	; 255
    425a:	11 e0       	ldi	r17, 0x01	; 1
    425c:	18 0f       	add	r17, r24
    425e:	d1 17       	cp	r29, r17
    4260:	71 f0       	breq	.+28     	; 0x427e <display_fade+0x36>
    4262:	8d 2f       	mov	r24, r29
    4264:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <ht1632c_set_brightness>
    4268:	2f ef       	ldi	r18, 0xFF	; 255
    426a:	86 e7       	ldi	r24, 0x76	; 118
    426c:	91 e0       	ldi	r25, 0x01	; 1
    426e:	21 50       	subi	r18, 0x01	; 1
    4270:	80 40       	sbci	r24, 0x00	; 0
    4272:	90 40       	sbci	r25, 0x00	; 0
    4274:	e1 f7       	brne	.-8      	; 0x426e <display_fade+0x26>
    4276:	00 c0       	rjmp	.+0      	; 0x4278 <display_fade+0x30>
    4278:	00 00       	nop
    427a:	df 5f       	subi	r29, 0xFF	; 255
    427c:	f0 cf       	rjmp	.-32     	; 0x425e <display_fade+0x16>
    427e:	c0 93 23 20 	sts	0x2023, r28
    4282:	df 91       	pop	r29
    4284:	cf 91       	pop	r28
    4286:	1f 91       	pop	r17
    4288:	08 95       	ret
    428a:	8d 17       	cp	r24, r29
    428c:	c0 f7       	brcc	.-16     	; 0x427e <display_fade+0x36>
    428e:	d1 50       	subi	r29, 0x01	; 1
    4290:	1f ef       	ldi	r17, 0xFF	; 255
    4292:	18 0f       	add	r17, r24
    4294:	d1 17       	cp	r29, r17
    4296:	99 f3       	breq	.-26     	; 0x427e <display_fade+0x36>
    4298:	8d 2f       	mov	r24, r29
    429a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <ht1632c_set_brightness>
    429e:	2f ef       	ldi	r18, 0xFF	; 255
    42a0:	86 e7       	ldi	r24, 0x76	; 118
    42a2:	91 e0       	ldi	r25, 0x01	; 1
    42a4:	21 50       	subi	r18, 0x01	; 1
    42a6:	80 40       	sbci	r24, 0x00	; 0
    42a8:	90 40       	sbci	r25, 0x00	; 0
    42aa:	e1 f7       	brne	.-8      	; 0x42a4 <display_fade+0x5c>
    42ac:	00 c0       	rjmp	.+0      	; 0x42ae <display_fade+0x66>
    42ae:	00 00       	nop
    42b0:	d1 50       	subi	r29, 0x01	; 1
    42b2:	f0 cf       	rjmp	.-32     	; 0x4294 <display_fade+0x4c>

000042b4 <display_fade_blink>:
    42b4:	81 e0       	ldi	r24, 0x01	; 1
    42b6:	c8 df       	rcall	.-112    	; 0x4248 <display_fade>
    42b8:	8f e0       	ldi	r24, 0x0F	; 15
    42ba:	c6 df       	rcall	.-116    	; 0x4248 <display_fade>
    42bc:	81 e0       	ldi	r24, 0x01	; 1
    42be:	c4 df       	rcall	.-120    	; 0x4248 <display_fade>
    42c0:	8f e0       	ldi	r24, 0x0F	; 15
    42c2:	c2 cf       	rjmp	.-124    	; 0x4248 <display_fade>

000042c4 <display_draw_pixel>:
    42c4:	9c 01       	movw	r18, r24
    42c6:	80 31       	cpi	r24, 0x10	; 16
    42c8:	91 05       	cpc	r25, r1
    42ca:	a4 f5       	brge	.+104    	; 0x4334 <display_draw_pixel+0x70>
    42cc:	60 31       	cpi	r22, 0x10	; 16
    42ce:	71 05       	cpc	r23, r1
    42d0:	8c f5       	brge	.+98     	; 0x4334 <display_draw_pixel+0x70>
    42d2:	8f e0       	ldi	r24, 0x0F	; 15
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	86 1b       	sub	r24, r22
    42d8:	97 0b       	sbc	r25, r23
    42da:	68 e1       	ldi	r22, 0x18	; 24
    42dc:	70 e0       	ldi	r23, 0x00	; 0
    42de:	0e 94 d2 52 	call	0xa5a4	; 0xa5a4 <__divmodhi4>
    42e2:	88 30       	cpi	r24, 0x08	; 8
    42e4:	91 05       	cpc	r25, r1
    42e6:	34 f0       	brlt	.+12     	; 0x42f4 <display_draw_pixel+0x30>
    42e8:	80 31       	cpi	r24, 0x10	; 16
    42ea:	91 05       	cpc	r25, r1
    42ec:	34 f4       	brge	.+12     	; 0x42fa <display_draw_pixel+0x36>
    42ee:	67 e8       	ldi	r22, 0x87	; 135
    42f0:	70 e0       	ldi	r23, 0x00	; 0
    42f2:	05 c0       	rjmp	.+10     	; 0x42fe <display_draw_pixel+0x3a>
    42f4:	67 e0       	ldi	r22, 0x07	; 7
    42f6:	70 e0       	ldi	r23, 0x00	; 0
    42f8:	02 c0       	rjmp	.+4      	; 0x42fe <display_draw_pixel+0x3a>
    42fa:	67 e0       	ldi	r22, 0x07	; 7
    42fc:	71 e0       	ldi	r23, 0x01	; 1
    42fe:	87 70       	andi	r24, 0x07	; 7
    4300:	99 27       	eor	r25, r25
    4302:	68 1b       	sub	r22, r24
    4304:	79 0b       	sbc	r23, r25
    4306:	28 30       	cpi	r18, 0x08	; 8
    4308:	31 05       	cpc	r19, r1
    430a:	1c f4       	brge	.+6      	; 0x4312 <display_draw_pixel+0x4e>
    430c:	22 0f       	add	r18, r18
    430e:	33 1f       	adc	r19, r19
    4310:	04 c0       	rjmp	.+8      	; 0x431a <display_draw_pixel+0x56>
    4312:	22 0f       	add	r18, r18
    4314:	33 1f       	adc	r19, r19
    4316:	2f 50       	subi	r18, 0x0F	; 15
    4318:	31 09       	sbc	r19, r1
    431a:	c9 01       	movw	r24, r18
    431c:	33 e0       	ldi	r19, 0x03	; 3
    431e:	88 0f       	add	r24, r24
    4320:	99 1f       	adc	r25, r25
    4322:	3a 95       	dec	r19
    4324:	e1 f7       	brne	.-8      	; 0x431e <display_draw_pixel+0x5a>
    4326:	86 0f       	add	r24, r22
    4328:	97 1f       	adc	r25, r23
    432a:	41 11       	cpse	r20, r1
    432c:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    4330:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <ht1632c_clr_pixel>
    4334:	08 95       	ret

00004336 <display_draw_filled_rect>:
    4336:	af 92       	push	r10
    4338:	bf 92       	push	r11
    433a:	cf 92       	push	r12
    433c:	df 92       	push	r13
    433e:	ef 92       	push	r14
    4340:	ff 92       	push	r15
    4342:	0f 93       	push	r16
    4344:	1f 93       	push	r17
    4346:	cf 93       	push	r28
    4348:	df 93       	push	r29
    434a:	a6 2e       	mov	r10, r22
    434c:	18 2f       	mov	r17, r24
    434e:	c4 2f       	mov	r28, r20
    4350:	d0 e0       	ldi	r29, 0x00	; 0
    4352:	c8 0f       	add	r28, r24
    4354:	d1 1d       	adc	r29, r1
    4356:	e2 2e       	mov	r14, r18
    4358:	f1 2c       	mov	r15, r1
    435a:	e6 0e       	add	r14, r22
    435c:	f1 1c       	adc	r15, r1
    435e:	c1 2e       	mov	r12, r17
    4360:	d1 2c       	mov	r13, r1
    4362:	cc 16       	cp	r12, r28
    4364:	dd 06       	cpc	r13, r29
    4366:	6c f4       	brge	.+26     	; 0x4382 <display_draw_filled_rect+0x4c>
    4368:	ba 2c       	mov	r11, r10
    436a:	6b 2d       	mov	r22, r11
    436c:	70 e0       	ldi	r23, 0x00	; 0
    436e:	6e 15       	cp	r22, r14
    4370:	7f 05       	cpc	r23, r15
    4372:	2c f4       	brge	.+10     	; 0x437e <display_draw_filled_rect+0x48>
    4374:	40 2f       	mov	r20, r16
    4376:	c6 01       	movw	r24, r12
    4378:	a5 df       	rcall	.-182    	; 0x42c4 <display_draw_pixel>
    437a:	b3 94       	inc	r11
    437c:	f6 cf       	rjmp	.-20     	; 0x436a <display_draw_filled_rect+0x34>
    437e:	1f 5f       	subi	r17, 0xFF	; 255
    4380:	ee cf       	rjmp	.-36     	; 0x435e <display_draw_filled_rect+0x28>
    4382:	df 91       	pop	r29
    4384:	cf 91       	pop	r28
    4386:	1f 91       	pop	r17
    4388:	0f 91       	pop	r16
    438a:	ff 90       	pop	r15
    438c:	ef 90       	pop	r14
    438e:	df 90       	pop	r13
    4390:	cf 90       	pop	r12
    4392:	bf 90       	pop	r11
    4394:	af 90       	pop	r10
    4396:	08 95       	ret

00004398 <display_show_loading_square>:
    4398:	0f 93       	push	r16
    439a:	01 e0       	ldi	r16, 0x01	; 1
    439c:	21 e0       	ldi	r18, 0x01	; 1
    439e:	41 e0       	ldi	r20, 0x01	; 1
    43a0:	60 91 22 20 	lds	r22, 0x2022
    43a4:	80 91 21 20 	lds	r24, 0x2021
    43a8:	c6 df       	rcall	.-116    	; 0x4336 <display_draw_filled_rect>
    43aa:	90 91 22 20 	lds	r25, 0x2022
    43ae:	80 91 21 20 	lds	r24, 0x2021
    43b2:	97 30       	cpi	r25, 0x07	; 7
    43b4:	20 f0       	brcs	.+8      	; 0x43be <display_show_loading_square+0x26>
    43b6:	89 30       	cpi	r24, 0x09	; 9
    43b8:	51 f4       	brne	.+20     	; 0x43ce <display_show_loading_square+0x36>
    43ba:	91 50       	subi	r25, 0x01	; 1
    43bc:	0d c0       	rjmp	.+26     	; 0x43d8 <display_show_loading_square+0x40>
    43be:	96 30       	cpi	r25, 0x06	; 6
    43c0:	41 f4       	brne	.+16     	; 0x43d2 <display_show_loading_square+0x3a>
    43c2:	87 30       	cpi	r24, 0x07	; 7
    43c4:	30 f0       	brcs	.+12     	; 0x43d2 <display_show_loading_square+0x3a>
    43c6:	81 50       	subi	r24, 0x01	; 1
    43c8:	80 93 21 20 	sts	0x2021, r24
    43cc:	17 c0       	rjmp	.+46     	; 0x43fc <display_show_loading_square+0x64>
    43ce:	99 30       	cpi	r25, 0x09	; 9
    43d0:	30 f4       	brcc	.+12     	; 0x43de <display_show_loading_square+0x46>
    43d2:	86 30       	cpi	r24, 0x06	; 6
    43d4:	99 f4       	brne	.+38     	; 0x43fc <display_show_loading_square+0x64>
    43d6:	9f 5f       	subi	r25, 0xFF	; 255
    43d8:	90 93 22 20 	sts	0x2022, r25
    43dc:	0f c0       	rjmp	.+30     	; 0x43fc <display_show_loading_square+0x64>
    43de:	99 30       	cpi	r25, 0x09	; 9
    43e0:	69 f4       	brne	.+26     	; 0x43fc <display_show_loading_square+0x64>
    43e2:	89 30       	cpi	r24, 0x09	; 9
    43e4:	58 f4       	brcc	.+22     	; 0x43fc <display_show_loading_square+0x64>
    43e6:	8f 5f       	subi	r24, 0xFF	; 255
    43e8:	80 93 21 20 	sts	0x2021, r24
    43ec:	89 30       	cpi	r24, 0x09	; 9
    43ee:	31 f4       	brne	.+12     	; 0x43fc <display_show_loading_square+0x64>
    43f0:	80 91 20 20 	lds	r24, 0x2020
    43f4:	91 e0       	ldi	r25, 0x01	; 1
    43f6:	89 27       	eor	r24, r25
    43f8:	80 93 20 20 	sts	0x2020, r24
    43fc:	00 e0       	ldi	r16, 0x00	; 0
    43fe:	21 e0       	ldi	r18, 0x01	; 1
    4400:	41 e0       	ldi	r20, 0x01	; 1
    4402:	60 91 22 20 	lds	r22, 0x2022
    4406:	80 91 21 20 	lds	r24, 0x2021
    440a:	95 df       	rcall	.-214    	; 0x4336 <display_draw_filled_rect>
    440c:	0f 91       	pop	r16
    440e:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004412 <display_draw_bitmap>:
    4412:	2f 92       	push	r2
    4414:	3f 92       	push	r3
    4416:	4f 92       	push	r4
    4418:	5f 92       	push	r5
    441a:	6f 92       	push	r6
    441c:	7f 92       	push	r7
    441e:	8f 92       	push	r8
    4420:	9f 92       	push	r9
    4422:	af 92       	push	r10
    4424:	bf 92       	push	r11
    4426:	cf 92       	push	r12
    4428:	df 92       	push	r13
    442a:	ef 92       	push	r14
    442c:	ff 92       	push	r15
    442e:	0f 93       	push	r16
    4430:	1f 93       	push	r17
    4432:	cf 93       	push	r28
    4434:	df 93       	push	r29
    4436:	00 d0       	rcall	.+0      	; 0x4438 <display_draw_bitmap+0x26>
    4438:	00 d0       	rcall	.+0      	; 0x443a <display_draw_bitmap+0x28>
    443a:	cd b7       	in	r28, 0x3d	; 61
    443c:	de b7       	in	r29, 0x3e	; 62
    443e:	6a 01       	movw	r12, r20
    4440:	30 2f       	mov	r19, r16
    4442:	f1 2c       	mov	r15, r1
    4444:	44 24       	eor	r4, r4
    4446:	43 94       	inc	r4
    4448:	51 2c       	mov	r5, r1
    444a:	a6 2e       	mov	r10, r22
    444c:	b1 2c       	mov	r11, r1
    444e:	28 2e       	mov	r2, r24
    4450:	31 2c       	mov	r3, r1
    4452:	f3 16       	cp	r15, r19
    4454:	b1 f1       	breq	.+108    	; 0x44c2 <display_draw_bitmap+0xb0>
    4456:	8f 2d       	mov	r24, r15
    4458:	87 70       	andi	r24, 0x07	; 7
    445a:	32 01       	movw	r6, r4
    445c:	02 c0       	rjmp	.+4      	; 0x4462 <display_draw_bitmap+0x50>
    445e:	66 0c       	add	r6, r6
    4460:	77 1c       	adc	r7, r7
    4462:	8a 95       	dec	r24
    4464:	e2 f7       	brpl	.-8      	; 0x445e <display_draw_bitmap+0x4c>
    4466:	1b 82       	std	Y+3, r1	; 0x03
    4468:	1c 82       	std	Y+4, r1	; 0x04
    446a:	8f 2d       	mov	r24, r15
    446c:	86 95       	lsr	r24
    446e:	86 95       	lsr	r24
    4470:	86 95       	lsr	r24
    4472:	46 01       	movw	r8, r12
    4474:	82 9f       	mul	r24, r18
    4476:	80 0c       	add	r8, r0
    4478:	91 1c       	adc	r9, r1
    447a:	11 24       	eor	r1, r1
    447c:	85 01       	movw	r16, r10
    447e:	0f 0d       	add	r16, r15
    4480:	11 1d       	adc	r17, r1
    4482:	9b 81       	ldd	r25, Y+3	; 0x03
    4484:	92 17       	cp	r25, r18
    4486:	d8 f4       	brcc	.+54     	; 0x44be <display_draw_bitmap+0xac>
    4488:	eb 81       	ldd	r30, Y+3	; 0x03
    448a:	fc 81       	ldd	r31, Y+4	; 0x04
    448c:	e8 0d       	add	r30, r8
    448e:	f9 1d       	adc	r31, r9
    4490:	e4 91       	lpm	r30, Z
    4492:	f0 e0       	ldi	r31, 0x00	; 0
    4494:	e6 21       	and	r30, r6
    4496:	f7 21       	and	r31, r7
    4498:	ef 2b       	or	r30, r31
    449a:	59 f0       	breq	.+22     	; 0x44b2 <display_draw_bitmap+0xa0>
    449c:	4e 2d       	mov	r20, r14
    449e:	b8 01       	movw	r22, r16
    44a0:	8b 81       	ldd	r24, Y+3	; 0x03
    44a2:	9c 81       	ldd	r25, Y+4	; 0x04
    44a4:	82 0d       	add	r24, r2
    44a6:	93 1d       	adc	r25, r3
    44a8:	29 83       	std	Y+1, r18	; 0x01
    44aa:	3a 83       	std	Y+2, r19	; 0x02
    44ac:	0b df       	rcall	.-490    	; 0x42c4 <display_draw_pixel>
    44ae:	3a 81       	ldd	r19, Y+2	; 0x02
    44b0:	29 81       	ldd	r18, Y+1	; 0x01
    44b2:	8b 81       	ldd	r24, Y+3	; 0x03
    44b4:	9c 81       	ldd	r25, Y+4	; 0x04
    44b6:	01 96       	adiw	r24, 0x01	; 1
    44b8:	8b 83       	std	Y+3, r24	; 0x03
    44ba:	9c 83       	std	Y+4, r25	; 0x04
    44bc:	e2 cf       	rjmp	.-60     	; 0x4482 <display_draw_bitmap+0x70>
    44be:	f3 94       	inc	r15
    44c0:	c8 cf       	rjmp	.-112    	; 0x4452 <display_draw_bitmap+0x40>
    44c2:	24 96       	adiw	r28, 0x04	; 4
    44c4:	cd bf       	out	0x3d, r28	; 61
    44c6:	de bf       	out	0x3e, r29	; 62
    44c8:	df 91       	pop	r29
    44ca:	cf 91       	pop	r28
    44cc:	1f 91       	pop	r17
    44ce:	0f 91       	pop	r16
    44d0:	ff 90       	pop	r15
    44d2:	ef 90       	pop	r14
    44d4:	df 90       	pop	r13
    44d6:	cf 90       	pop	r12
    44d8:	bf 90       	pop	r11
    44da:	af 90       	pop	r10
    44dc:	9f 90       	pop	r9
    44de:	8f 90       	pop	r8
    44e0:	7f 90       	pop	r7
    44e2:	6f 90       	pop	r6
    44e4:	5f 90       	pop	r5
    44e6:	4f 90       	pop	r4
    44e8:	3f 90       	pop	r3
    44ea:	2f 90       	pop	r2
    44ec:	08 95       	ret

000044ee <display_draw_char_to_buffer>:
    44ee:	25 e0       	ldi	r18, 0x05	; 5
    44f0:	62 9f       	mul	r22, r18
    44f2:	b0 01       	movw	r22, r0
    44f4:	11 24       	eor	r1, r1
    44f6:	48 0f       	add	r20, r24
    44f8:	59 1f       	adc	r21, r25
    44fa:	80 e0       	ldi	r24, 0x00	; 0
    44fc:	90 e0       	ldi	r25, 0x00	; 0
    44fe:	6c 53       	subi	r22, 0x3C	; 60
    4500:	77 4f       	sbci	r23, 0xF7	; 247
    4502:	fb 01       	movw	r30, r22
    4504:	e8 0f       	add	r30, r24
    4506:	f9 1f       	adc	r31, r25
    4508:	e4 91       	lpm	r30, Z
    450a:	e2 95       	swap	r30
    450c:	2e 2f       	mov	r18, r30
    450e:	23 73       	andi	r18, 0x33	; 51
    4510:	a4 e0       	ldi	r26, 0x04	; 4
    4512:	2a 9f       	mul	r18, r26
    4514:	90 01       	movw	r18, r0
    4516:	11 24       	eor	r1, r1
    4518:	ec 7c       	andi	r30, 0xCC	; 204
    451a:	e6 95       	lsr	r30
    451c:	e6 95       	lsr	r30
    451e:	e2 2b       	or	r30, r18
    4520:	2e 2f       	mov	r18, r30
    4522:	25 75       	andi	r18, 0x55	; 85
    4524:	22 0f       	add	r18, r18
    4526:	ea 7a       	andi	r30, 0xAA	; 170
    4528:	e6 95       	lsr	r30
    452a:	e2 2b       	or	r30, r18
    452c:	da 01       	movw	r26, r20
    452e:	ed 93       	st	X+, r30
    4530:	ad 01       	movw	r20, r26
    4532:	01 96       	adiw	r24, 0x01	; 1
    4534:	85 30       	cpi	r24, 0x05	; 5
    4536:	91 05       	cpc	r25, r1
    4538:	21 f7       	brne	.-56     	; 0x4502 <display_draw_char_to_buffer+0x14>
    453a:	08 95       	ret

0000453c <display_draw_char>:
    453c:	2f 92       	push	r2
    453e:	3f 92       	push	r3
    4540:	4f 92       	push	r4
    4542:	5f 92       	push	r5
    4544:	6f 92       	push	r6
    4546:	7f 92       	push	r7
    4548:	8f 92       	push	r8
    454a:	9f 92       	push	r9
    454c:	af 92       	push	r10
    454e:	bf 92       	push	r11
    4550:	cf 92       	push	r12
    4552:	df 92       	push	r13
    4554:	ef 92       	push	r14
    4556:	ff 92       	push	r15
    4558:	0f 93       	push	r16
    455a:	1f 93       	push	r17
    455c:	cf 93       	push	r28
    455e:	df 93       	push	r29
    4560:	cd b7       	in	r28, 0x3d	; 61
    4562:	de b7       	in	r29, 0x3e	; 62
    4564:	25 97       	sbiw	r28, 0x05	; 5
    4566:	cd bf       	out	0x3d, r28	; 61
    4568:	de bf       	out	0x3e, r29	; 62
    456a:	89 83       	std	Y+1, r24	; 0x01
    456c:	32 2e       	mov	r3, r18
    456e:	10 2f       	mov	r17, r16
    4570:	9c 01       	movw	r18, r24
    4572:	5c 01       	movw	r10, r24
    4574:	85 e0       	ldi	r24, 0x05	; 5
    4576:	a8 0e       	add	r10, r24
    4578:	b1 1c       	adc	r11, r1
    457a:	e6 2f       	mov	r30, r22
    457c:	97 e0       	ldi	r25, 0x07	; 7
    457e:	09 9f       	mul	r16, r25
    4580:	e0 0d       	add	r30, r0
    4582:	11 24       	eor	r1, r1
    4584:	ea 83       	std	Y+2, r30	; 0x02
    4586:	2c 83       	std	Y+4, r18	; 0x04
    4588:	3d 83       	std	Y+5, r19	; 0x05
    458a:	51 2c       	mov	r5, r1
    458c:	54 ec       	ldi	r21, 0xC4	; 196
    458e:	e5 2e       	mov	r14, r21
    4590:	58 e0       	ldi	r21, 0x08	; 8
    4592:	f5 2e       	mov	r15, r21
    4594:	e2 1a       	sub	r14, r18
    4596:	f3 0a       	sbc	r15, r19
    4598:	f5 e0       	ldi	r31, 0x05	; 5
    459a:	4f 9f       	mul	r20, r31
    459c:	e0 0c       	add	r14, r0
    459e:	f1 1c       	adc	r15, r1
    45a0:	11 24       	eor	r1, r1
    45a2:	4b 01       	movw	r8, r22
    45a4:	86 e0       	ldi	r24, 0x06	; 6
    45a6:	88 0e       	add	r8, r24
    45a8:	91 1c       	adc	r9, r1
    45aa:	3b 01       	movw	r6, r22
    45ac:	91 e0       	ldi	r25, 0x01	; 1
    45ae:	69 1a       	sub	r6, r25
    45b0:	71 08       	sbc	r7, r1
    45b2:	ec 81       	ldd	r30, Y+4	; 0x04
    45b4:	fd 81       	ldd	r31, Y+5	; 0x05
    45b6:	ee 0d       	add	r30, r14
    45b8:	ff 1d       	adc	r31, r15
    45ba:	44 90       	lpm	r4, Z
    45bc:	e9 81       	ldd	r30, Y+1	; 0x01
    45be:	e5 0d       	add	r30, r5
    45c0:	eb 83       	std	Y+3, r30	; 0x03
    45c2:	64 01       	movw	r12, r8
    45c4:	21 2c       	mov	r2, r1
    45c6:	40 fe       	sbrs	r4, 0
    45c8:	11 c0       	rjmp	.+34     	; 0x45ec <display_draw_char+0xb0>
    45ca:	11 30       	cpi	r17, 0x01	; 1
    45cc:	41 f4       	brne	.+16     	; 0x45de <display_draw_char+0xa2>
    45ce:	8c 81       	ldd	r24, Y+4	; 0x04
    45d0:	9d 81       	ldd	r25, Y+5	; 0x05
    45d2:	97 fd       	sbrc	r25, 7
    45d4:	0b c0       	rjmp	.+22     	; 0x45ec <display_draw_char+0xb0>
    45d6:	43 2d       	mov	r20, r3
    45d8:	b6 01       	movw	r22, r12
    45da:	74 de       	rcall	.-792    	; 0x42c4 <display_draw_pixel>
    45dc:	07 c0       	rjmp	.+14     	; 0x45ec <display_draw_char+0xb0>
    45de:	03 2d       	mov	r16, r3
    45e0:	21 2f       	mov	r18, r17
    45e2:	41 2f       	mov	r20, r17
    45e4:	6a 81       	ldd	r22, Y+2	; 0x02
    45e6:	62 0d       	add	r22, r2
    45e8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ea:	a5 de       	rcall	.-694    	; 0x4336 <display_draw_filled_rect>
    45ec:	46 94       	lsr	r4
    45ee:	91 e0       	ldi	r25, 0x01	; 1
    45f0:	c9 1a       	sub	r12, r25
    45f2:	d1 08       	sbc	r13, r1
    45f4:	21 1a       	sub	r2, r17
    45f6:	c6 14       	cp	r12, r6
    45f8:	d7 04       	cpc	r13, r7
    45fa:	29 f7       	brne	.-54     	; 0x45c6 <display_draw_char+0x8a>
    45fc:	ec 81       	ldd	r30, Y+4	; 0x04
    45fe:	fd 81       	ldd	r31, Y+5	; 0x05
    4600:	31 96       	adiw	r30, 0x01	; 1
    4602:	ec 83       	std	Y+4, r30	; 0x04
    4604:	fd 83       	std	Y+5, r31	; 0x05
    4606:	51 0e       	add	r5, r17
    4608:	ea 15       	cp	r30, r10
    460a:	fb 05       	cpc	r31, r11
    460c:	91 f6       	brne	.-92     	; 0x45b2 <display_draw_char+0x76>
    460e:	25 96       	adiw	r28, 0x05	; 5
    4610:	cd bf       	out	0x3d, r28	; 61
    4612:	de bf       	out	0x3e, r29	; 62
    4614:	df 91       	pop	r29
    4616:	cf 91       	pop	r28
    4618:	1f 91       	pop	r17
    461a:	0f 91       	pop	r16
    461c:	ff 90       	pop	r15
    461e:	ef 90       	pop	r14
    4620:	df 90       	pop	r13
    4622:	cf 90       	pop	r12
    4624:	bf 90       	pop	r11
    4626:	af 90       	pop	r10
    4628:	9f 90       	pop	r9
    462a:	8f 90       	pop	r8
    462c:	7f 90       	pop	r7
    462e:	6f 90       	pop	r6
    4630:	5f 90       	pop	r5
    4632:	4f 90       	pop	r4
    4634:	3f 90       	pop	r3
    4636:	2f 90       	pop	r2
    4638:	08 95       	ret

0000463a <display_draw_small_char_to_buffer>:
    463a:	af 92       	push	r10
    463c:	bf 92       	push	r11
    463e:	cf 92       	push	r12
    4640:	df 92       	push	r13
    4642:	ef 92       	push	r14
    4644:	ff 92       	push	r15
    4646:	0f 93       	push	r16
    4648:	1f 93       	push	r17
    464a:	cf 93       	push	r28
    464c:	df 93       	push	r29
    464e:	cd b7       	in	r28, 0x3d	; 61
    4650:	de b7       	in	r29, 0x3e	; 62
    4652:	25 97       	sbiw	r28, 0x05	; 5
    4654:	cd bf       	out	0x3d, r28	; 61
    4656:	de bf       	out	0x3e, r29	; 62
    4658:	26 e0       	ldi	r18, 0x06	; 6
    465a:	62 9f       	mul	r22, r18
    465c:	b0 01       	movw	r22, r0
    465e:	11 24       	eor	r1, r1
    4660:	8e 01       	movw	r16, r28
    4662:	0f 5f       	subi	r16, 0xFF	; 255
    4664:	1f 4f       	sbci	r17, 0xFF	; 255
    4666:	20 e0       	ldi	r18, 0x00	; 0
    4668:	30 e0       	ldi	r19, 0x00	; 0
    466a:	6c 53       	subi	r22, 0x3C	; 60
    466c:	7d 4f       	sbci	r23, 0xFD	; 253
    466e:	03 96       	adiw	r24, 0x03	; 3
    4670:	48 0f       	add	r20, r24
    4672:	59 1f       	adc	r21, r25
    4674:	e5 e0       	ldi	r30, 0x05	; 5
    4676:	ee 2e       	mov	r14, r30
    4678:	f1 2c       	mov	r15, r1
    467a:	fb 01       	movw	r30, r22
    467c:	e2 0f       	add	r30, r18
    467e:	f3 1f       	adc	r31, r19
    4680:	84 91       	lpm	r24, Z
    4682:	82 95       	swap	r24
    4684:	8f 70       	andi	r24, 0x0F	; 15
    4686:	f8 01       	movw	r30, r16
    4688:	81 93       	st	Z+, r24
    468a:	8f 01       	movw	r16, r30
    468c:	fa 01       	movw	r30, r20
    468e:	b8 2e       	mov	r11, r24
    4690:	80 e0       	ldi	r24, 0x00	; 0
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	67 01       	movw	r12, r14
    4696:	c2 1a       	sub	r12, r18
    4698:	d3 0a       	sbc	r13, r19
    469a:	ab 2d       	mov	r26, r11
    469c:	a1 70       	andi	r26, 0x01	; 1
    469e:	0c 2c       	mov	r0, r12
    46a0:	01 c0       	rjmp	.+2      	; 0x46a4 <display_draw_small_char_to_buffer+0x6a>
    46a2:	aa 0f       	add	r26, r26
    46a4:	0a 94       	dec	r0
    46a6:	ea f7       	brpl	.-6      	; 0x46a2 <display_draw_small_char_to_buffer+0x68>
    46a8:	a2 90       	ld	r10, -Z
    46aa:	aa 2a       	or	r10, r26
    46ac:	a0 82       	st	Z, r10
    46ae:	b6 94       	lsr	r11
    46b0:	01 96       	adiw	r24, 0x01	; 1
    46b2:	83 30       	cpi	r24, 0x03	; 3
    46b4:	91 05       	cpc	r25, r1
    46b6:	89 f7       	brne	.-30     	; 0x469a <display_draw_small_char_to_buffer+0x60>
    46b8:	2f 5f       	subi	r18, 0xFF	; 255
    46ba:	3f 4f       	sbci	r19, 0xFF	; 255
    46bc:	25 30       	cpi	r18, 0x05	; 5
    46be:	31 05       	cpc	r19, r1
    46c0:	e1 f6       	brne	.-72     	; 0x467a <display_draw_small_char_to_buffer+0x40>
    46c2:	25 96       	adiw	r28, 0x05	; 5
    46c4:	cd bf       	out	0x3d, r28	; 61
    46c6:	de bf       	out	0x3e, r29	; 62
    46c8:	df 91       	pop	r29
    46ca:	cf 91       	pop	r28
    46cc:	1f 91       	pop	r17
    46ce:	0f 91       	pop	r16
    46d0:	ff 90       	pop	r15
    46d2:	ef 90       	pop	r14
    46d4:	df 90       	pop	r13
    46d6:	cf 90       	pop	r12
    46d8:	bf 90       	pop	r11
    46da:	af 90       	pop	r10
    46dc:	08 95       	ret

000046de <display_print_scrolling_text>:
    46de:	9f 92       	push	r9
    46e0:	af 92       	push	r10
    46e2:	bf 92       	push	r11
    46e4:	cf 92       	push	r12
    46e6:	df 92       	push	r13
    46e8:	ef 92       	push	r14
    46ea:	ff 92       	push	r15
    46ec:	0f 93       	push	r16
    46ee:	1f 93       	push	r17
    46f0:	cf 93       	push	r28
    46f2:	df 93       	push	r29
    46f4:	8c 01       	movw	r16, r24
    46f6:	96 2e       	mov	r9, r22
    46f8:	66 23       	and	r22, r22
    46fa:	71 f0       	breq	.+28     	; 0x4718 <display_print_scrolling_text+0x3a>
    46fc:	fc 01       	movw	r30, r24
    46fe:	01 90       	ld	r0, Z+
    4700:	00 20       	and	r0, r0
    4702:	e9 f7       	brne	.-6      	; 0x46fe <display_print_scrolling_text+0x20>
    4704:	31 97       	sbiw	r30, 0x01	; 1
    4706:	e8 1b       	sub	r30, r24
    4708:	f9 0b       	sbc	r31, r25
    470a:	86 e0       	ldi	r24, 0x06	; 6
    470c:	8e 9f       	mul	r24, r30
    470e:	e0 01       	movw	r28, r0
    4710:	8f 9f       	mul	r24, r31
    4712:	d0 0d       	add	r29, r0
    4714:	11 24       	eor	r1, r1
    4716:	0b c0       	rjmp	.+22     	; 0x472e <display_print_scrolling_text+0x50>
    4718:	ec 01       	movw	r28, r24
    471a:	09 90       	ld	r0, Y+
    471c:	00 20       	and	r0, r0
    471e:	e9 f7       	brne	.-6      	; 0x471a <display_print_scrolling_text+0x3c>
    4720:	21 97       	sbiw	r28, 0x01	; 1
    4722:	c8 1b       	sub	r28, r24
    4724:	d9 0b       	sbc	r29, r25
    4726:	cc 0f       	add	r28, r28
    4728:	dd 1f       	adc	r29, r29
    472a:	cc 0f       	add	r28, r28
    472c:	dd 1f       	adc	r29, r29
    472e:	61 e0       	ldi	r22, 0x01	; 1
    4730:	70 e0       	ldi	r23, 0x00	; 0
    4732:	ce 01       	movw	r24, r28
    4734:	0e 94 26 53 	call	0xa64c	; 0xa64c <calloc>
    4738:	7c 01       	movw	r14, r24
    473a:	a1 2c       	mov	r10, r1
    473c:	b1 2c       	mov	r11, r1
    473e:	c1 2c       	mov	r12, r1
    4740:	d1 2c       	mov	r13, r1
    4742:	f8 01       	movw	r30, r16
    4744:	61 91       	ld	r22, Z+
    4746:	8f 01       	movw	r16, r30
    4748:	66 23       	and	r22, r22
    474a:	79 f0       	breq	.+30     	; 0x476a <display_print_scrolling_text+0x8c>
    474c:	a7 01       	movw	r20, r14
    474e:	99 20       	and	r9, r9
    4750:	19 f0       	breq	.+6      	; 0x4758 <display_print_scrolling_text+0x7a>
    4752:	c6 01       	movw	r24, r12
    4754:	cc de       	rcall	.-616    	; 0x44ee <display_draw_char_to_buffer>
    4756:	02 c0       	rjmp	.+4      	; 0x475c <display_print_scrolling_text+0x7e>
    4758:	c5 01       	movw	r24, r10
    475a:	6f df       	rcall	.-290    	; 0x463a <display_draw_small_char_to_buffer>
    475c:	86 e0       	ldi	r24, 0x06	; 6
    475e:	c8 0e       	add	r12, r24
    4760:	d1 1c       	adc	r13, r1
    4762:	e4 e0       	ldi	r30, 0x04	; 4
    4764:	ae 0e       	add	r10, r30
    4766:	b1 1c       	adc	r11, r1
    4768:	ec cf       	rjmp	.-40     	; 0x4742 <display_print_scrolling_text+0x64>
    476a:	be 01       	movw	r22, r28
    476c:	c7 01       	movw	r24, r14
    476e:	0e 94 13 11 	call	0x2226	; 0x2226 <ht1632c_print_buffer>
    4772:	c7 01       	movw	r24, r14
    4774:	df 91       	pop	r29
    4776:	cf 91       	pop	r28
    4778:	1f 91       	pop	r17
    477a:	0f 91       	pop	r16
    477c:	ff 90       	pop	r15
    477e:	ef 90       	pop	r14
    4780:	df 90       	pop	r13
    4782:	cf 90       	pop	r12
    4784:	bf 90       	pop	r11
    4786:	af 90       	pop	r10
    4788:	9f 90       	pop	r9
    478a:	0c 94 d8 53 	jmp	0xa7b0	; 0xa7b0 <free>

0000478e <display_draw_small_char>:
    478e:	2f 92       	push	r2
    4790:	3f 92       	push	r3
    4792:	4f 92       	push	r4
    4794:	5f 92       	push	r5
    4796:	6f 92       	push	r6
    4798:	7f 92       	push	r7
    479a:	8f 92       	push	r8
    479c:	9f 92       	push	r9
    479e:	af 92       	push	r10
    47a0:	bf 92       	push	r11
    47a2:	cf 92       	push	r12
    47a4:	df 92       	push	r13
    47a6:	ef 92       	push	r14
    47a8:	ff 92       	push	r15
    47aa:	0f 93       	push	r16
    47ac:	1f 93       	push	r17
    47ae:	cf 93       	push	r28
    47b0:	df 93       	push	r29
    47b2:	cd b7       	in	r28, 0x3d	; 61
    47b4:	de b7       	in	r29, 0x3e	; 62
    47b6:	28 97       	sbiw	r28, 0x08	; 8
    47b8:	cd bf       	out	0x3d, r28	; 61
    47ba:	de bf       	out	0x3e, r29	; 62
    47bc:	5b 01       	movw	r10, r22
    47be:	29 83       	std	Y+1, r18	; 0x01
    47c0:	10 2f       	mov	r17, r16
    47c2:	26 e0       	ldi	r18, 0x06	; 6
    47c4:	42 9f       	mul	r20, r18
    47c6:	60 01       	movw	r12, r0
    47c8:	11 24       	eor	r1, r1
    47ca:	e8 2f       	mov	r30, r24
    47cc:	37 e0       	ldi	r19, 0x07	; 7
    47ce:	03 9f       	mul	r16, r19
    47d0:	e0 0d       	add	r30, r0
    47d2:	11 24       	eor	r1, r1
    47d4:	ea 83       	std	Y+2, r30	; 0x02
    47d6:	21 2c       	mov	r2, r1
    47d8:	1f 82       	std	Y+7, r1	; 0x07
    47da:	18 86       	std	Y+8, r1	; 0x08
    47dc:	96 01       	movw	r18, r12
    47de:	2c 53       	subi	r18, 0x3C	; 60
    47e0:	3d 4f       	sbci	r19, 0xFD	; 253
    47e2:	69 01       	movw	r12, r18
    47e4:	fc 01       	movw	r30, r24
    47e6:	37 96       	adiw	r30, 0x07	; 7
    47e8:	ec 83       	std	Y+4, r30	; 0x04
    47ea:	fd 83       	std	Y+5, r31	; 0x05
    47ec:	2c 01       	movw	r4, r24
    47ee:	f1 e0       	ldi	r31, 0x01	; 1
    47f0:	4f 1a       	sub	r4, r31
    47f2:	51 08       	sbc	r5, r1
    47f4:	3b 01       	movw	r6, r22
    47f6:	23 e0       	ldi	r18, 0x03	; 3
    47f8:	62 0e       	add	r6, r18
    47fa:	71 1c       	adc	r7, r1
    47fc:	ef 81       	ldd	r30, Y+7	; 0x07
    47fe:	f8 85       	ldd	r31, Y+8	; 0x08
    4800:	ec 0d       	add	r30, r12
    4802:	fd 1d       	adc	r31, r13
    4804:	54 91       	lpm	r21, Z
    4806:	32 2d       	mov	r19, r2
    4808:	3a 0d       	add	r19, r10
    480a:	3b 83       	std	Y+3, r19	; 0x03
    480c:	ec 80       	ldd	r14, Y+4	; 0x04
    480e:	fd 80       	ldd	r15, Y+5	; 0x05
    4810:	31 2c       	mov	r3, r1
    4812:	43 01       	movw	r8, r6
    4814:	8f 81       	ldd	r24, Y+7	; 0x07
    4816:	98 85       	ldd	r25, Y+8	; 0x08
    4818:	88 1a       	sub	r8, r24
    481a:	99 0a       	sbc	r9, r25
    481c:	50 ff       	sbrs	r21, 0
    481e:	16 c0       	rjmp	.+44     	; 0x484c <display_draw_small_char+0xbe>
    4820:	11 30       	cpi	r17, 0x01	; 1
    4822:	59 f4       	brne	.+22     	; 0x483a <display_draw_small_char+0xac>
    4824:	92 e0       	ldi	r25, 0x02	; 2
    4826:	e9 16       	cp	r14, r25
    4828:	f1 04       	cpc	r15, r1
    482a:	84 f0       	brlt	.+32     	; 0x484c <display_draw_small_char+0xbe>
    482c:	49 81       	ldd	r20, Y+1	; 0x01
    482e:	b4 01       	movw	r22, r8
    4830:	c7 01       	movw	r24, r14
    4832:	02 97       	sbiw	r24, 0x02	; 2
    4834:	5e 83       	std	Y+6, r21	; 0x06
    4836:	46 dd       	rcall	.-1396   	; 0x42c4 <display_draw_pixel>
    4838:	08 c0       	rjmp	.+16     	; 0x484a <display_draw_small_char+0xbc>
    483a:	09 81       	ldd	r16, Y+1	; 0x01
    483c:	21 2f       	mov	r18, r17
    483e:	41 2f       	mov	r20, r17
    4840:	6b 81       	ldd	r22, Y+3	; 0x03
    4842:	8a 81       	ldd	r24, Y+2	; 0x02
    4844:	83 0d       	add	r24, r3
    4846:	5e 83       	std	Y+6, r21	; 0x06
    4848:	76 dd       	rcall	.-1300   	; 0x4336 <display_draw_filled_rect>
    484a:	5e 81       	ldd	r21, Y+6	; 0x06
    484c:	56 95       	lsr	r21
    484e:	e1 e0       	ldi	r30, 0x01	; 1
    4850:	ee 1a       	sub	r14, r30
    4852:	f1 08       	sbc	r15, r1
    4854:	31 1a       	sub	r3, r17
    4856:	e4 14       	cp	r14, r4
    4858:	f5 04       	cpc	r15, r5
    485a:	01 f7       	brne	.-64     	; 0x481c <display_draw_small_char+0x8e>
    485c:	2f 81       	ldd	r18, Y+7	; 0x07
    485e:	38 85       	ldd	r19, Y+8	; 0x08
    4860:	2f 5f       	subi	r18, 0xFF	; 255
    4862:	3f 4f       	sbci	r19, 0xFF	; 255
    4864:	2f 83       	std	Y+7, r18	; 0x07
    4866:	38 87       	std	Y+8, r19	; 0x08
    4868:	21 1a       	sub	r2, r17
    486a:	26 30       	cpi	r18, 0x06	; 6
    486c:	31 05       	cpc	r19, r1
    486e:	31 f6       	brne	.-116    	; 0x47fc <display_draw_small_char+0x6e>
    4870:	28 96       	adiw	r28, 0x08	; 8
    4872:	cd bf       	out	0x3d, r28	; 61
    4874:	de bf       	out	0x3e, r29	; 62
    4876:	df 91       	pop	r29
    4878:	cf 91       	pop	r28
    487a:	1f 91       	pop	r17
    487c:	0f 91       	pop	r16
    487e:	ff 90       	pop	r15
    4880:	ef 90       	pop	r14
    4882:	df 90       	pop	r13
    4884:	cf 90       	pop	r12
    4886:	bf 90       	pop	r11
    4888:	af 90       	pop	r10
    488a:	9f 90       	pop	r9
    488c:	8f 90       	pop	r8
    488e:	7f 90       	pop	r7
    4890:	6f 90       	pop	r6
    4892:	5f 90       	pop	r5
    4894:	4f 90       	pop	r4
    4896:	3f 90       	pop	r3
    4898:	2f 90       	pop	r2
    489a:	08 95       	ret

0000489c <display_draw_four_letter_word>:
    489c:	0f 93       	push	r16
    489e:	cf 93       	push	r28
    48a0:	df 93       	push	r29
    48a2:	ec 01       	movw	r28, r24
    48a4:	01 e0       	ldi	r16, 0x01	; 1
    48a6:	21 e0       	ldi	r18, 0x01	; 1
    48a8:	30 e0       	ldi	r19, 0x00	; 0
    48aa:	48 81       	ld	r20, Y
    48ac:	67 e0       	ldi	r22, 0x07	; 7
    48ae:	70 e0       	ldi	r23, 0x00	; 0
    48b0:	81 e0       	ldi	r24, 0x01	; 1
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	6c df       	rcall	.-296    	; 0x478e <display_draw_small_char>
    48b6:	21 e0       	ldi	r18, 0x01	; 1
    48b8:	30 e0       	ldi	r19, 0x00	; 0
    48ba:	49 81       	ldd	r20, Y+1	; 0x01
    48bc:	67 e0       	ldi	r22, 0x07	; 7
    48be:	70 e0       	ldi	r23, 0x00	; 0
    48c0:	85 e0       	ldi	r24, 0x05	; 5
    48c2:	90 e0       	ldi	r25, 0x00	; 0
    48c4:	64 df       	rcall	.-312    	; 0x478e <display_draw_small_char>
    48c6:	21 e0       	ldi	r18, 0x01	; 1
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	4a 81       	ldd	r20, Y+2	; 0x02
    48cc:	67 e0       	ldi	r22, 0x07	; 7
    48ce:	70 e0       	ldi	r23, 0x00	; 0
    48d0:	89 e0       	ldi	r24, 0x09	; 9
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	5c df       	rcall	.-328    	; 0x478e <display_draw_small_char>
    48d6:	21 e0       	ldi	r18, 0x01	; 1
    48d8:	30 e0       	ldi	r19, 0x00	; 0
    48da:	4b 81       	ldd	r20, Y+3	; 0x03
    48dc:	67 e0       	ldi	r22, 0x07	; 7
    48de:	70 e0       	ldi	r23, 0x00	; 0
    48e0:	8d e0       	ldi	r24, 0x0D	; 13
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	54 df       	rcall	.-344    	; 0x478e <display_draw_small_char>
    48e6:	df 91       	pop	r29
    48e8:	cf 91       	pop	r28
    48ea:	0f 91       	pop	r16
    48ec:	08 95       	ret

000048ee <display_draw_three_letter_word>:
    48ee:	0f 93       	push	r16
    48f0:	cf 93       	push	r28
    48f2:	df 93       	push	r29
    48f4:	ec 01       	movw	r28, r24
    48f6:	01 e0       	ldi	r16, 0x01	; 1
    48f8:	21 e0       	ldi	r18, 0x01	; 1
    48fa:	30 e0       	ldi	r19, 0x00	; 0
    48fc:	48 81       	ld	r20, Y
    48fe:	67 e0       	ldi	r22, 0x07	; 7
    4900:	70 e0       	ldi	r23, 0x00	; 0
    4902:	83 e0       	ldi	r24, 0x03	; 3
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	43 df       	rcall	.-378    	; 0x478e <display_draw_small_char>
    4908:	21 e0       	ldi	r18, 0x01	; 1
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	49 81       	ldd	r20, Y+1	; 0x01
    490e:	67 e0       	ldi	r22, 0x07	; 7
    4910:	70 e0       	ldi	r23, 0x00	; 0
    4912:	87 e0       	ldi	r24, 0x07	; 7
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	3b df       	rcall	.-394    	; 0x478e <display_draw_small_char>
    4918:	21 e0       	ldi	r18, 0x01	; 1
    491a:	30 e0       	ldi	r19, 0x00	; 0
    491c:	4a 81       	ldd	r20, Y+2	; 0x02
    491e:	67 e0       	ldi	r22, 0x07	; 7
    4920:	70 e0       	ldi	r23, 0x00	; 0
    4922:	8b e0       	ldi	r24, 0x0B	; 11
    4924:	90 e0       	ldi	r25, 0x00	; 0
    4926:	33 df       	rcall	.-410    	; 0x478e <display_draw_small_char>
    4928:	df 91       	pop	r29
    492a:	cf 91       	pop	r28
    492c:	0f 91       	pop	r16
    492e:	08 95       	ret

00004930 <display_draw_wifi_icon>:
    4930:	80 91 10 2b 	lds	r24, 0x2B10
    4934:	81 30       	cpi	r24, 0x01	; 1
    4936:	e9 f1       	breq	.+122    	; 0x49b2 <display_draw_wifi_icon+0x82>
    4938:	a8 f1       	brcs	.+106    	; 0x49a4 <display_draw_wifi_icon+0x74>
    493a:	82 30       	cpi	r24, 0x02	; 2
    493c:	09 f4       	brne	.+2      	; 0x4940 <display_draw_wifi_icon+0x10>
    493e:	48 c0       	rjmp	.+144    	; 0x49d0 <display_draw_wifi_icon+0xa0>
    4940:	83 30       	cpi	r24, 0x03	; 3
    4942:	09 f0       	breq	.+2      	; 0x4946 <display_draw_wifi_icon+0x16>
    4944:	65 c0       	rjmp	.+202    	; 0x4a10 <display_draw_wifi_icon+0xe0>
    4946:	82 e2       	ldi	r24, 0x22	; 34
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    494e:	83 e3       	ldi	r24, 0x33	; 51
    4950:	90 e0       	ldi	r25, 0x00	; 0
    4952:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    4956:	84 e4       	ldi	r24, 0x44	; 68
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    495e:	84 e5       	ldi	r24, 0x54	; 84
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    4966:	85 e6       	ldi	r24, 0x65	; 101
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    496e:	85 e7       	ldi	r24, 0x75	; 117
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    4976:	8d e0       	ldi	r24, 0x0D	; 13
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    497e:	8d e1       	ldi	r24, 0x1D	; 29
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    4986:	8c e2       	ldi	r24, 0x2C	; 44
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    498e:	8c e3       	ldi	r24, 0x3C	; 60
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    4996:	8b e4       	ldi	r24, 0x4B	; 75
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    499e:	8a e5       	ldi	r24, 0x5A	; 90
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	34 c0       	rjmp	.+104    	; 0x4a0c <display_draw_wifi_icon+0xdc>
    49a4:	83 ef       	ldi	r24, 0xF3	; 243
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    49ac:	8b e8       	ldi	r24, 0x8B	; 139
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	2d c0       	rjmp	.+90     	; 0x4a0c <display_draw_wifi_icon+0xdc>
    49b2:	85 ee       	ldi	r24, 0xE5	; 229
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    49ba:	86 ef       	ldi	r24, 0xF6	; 246
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    49c2:	8e e8       	ldi	r24, 0x8E	; 142
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    49ca:	8d e9       	ldi	r24, 0x9D	; 157
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	1e c0       	rjmp	.+60     	; 0x4a0c <display_draw_wifi_icon+0xdc>
    49d0:	87 ec       	ldi	r24, 0xC7	; 199
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    49d8:	80 e5       	ldi	r24, 0x50	; 80
    49da:	90 e0       	ldi	r25, 0x00	; 0
    49dc:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    49e0:	81 e6       	ldi	r24, 0x61	; 97
    49e2:	90 e0       	ldi	r25, 0x00	; 0
    49e4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    49e8:	81 e7       	ldi	r24, 0x71	; 113
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    49f0:	89 e0       	ldi	r24, 0x09	; 9
    49f2:	90 e0       	ldi	r25, 0x00	; 0
    49f4:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    49f8:	89 e1       	ldi	r24, 0x19	; 25
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    4a00:	88 e2       	ldi	r24, 0x28	; 40
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    4a08:	8f eb       	ldi	r24, 0xBF	; 191
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <ht1632c_set_pixel>
    4a10:	80 91 10 2b 	lds	r24, 0x2B10
    4a14:	91 e0       	ldi	r25, 0x01	; 1
    4a16:	98 0f       	add	r25, r24
    4a18:	90 93 10 2b 	sts	0x2B10, r25
    4a1c:	84 30       	cpi	r24, 0x04	; 4
    4a1e:	21 f4       	brne	.+8      	; 0x4a28 <display_draw_wifi_icon+0xf8>
    4a20:	10 92 10 2b 	sts	0x2B10, r1
    4a24:	0c 94 ef 0d 	jmp	0x1bde	; 0x1bde <ht1632c_clear_screen>
    4a28:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004a2c <display_slide_in_from_left>:
    4a2c:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <ht1632c_slide_in_from_left>

00004a30 <display_slide_in_from_right>:
    4a30:	0c 94 8d 0f 	jmp	0x1f1a	; 0x1f1a <ht1632c_slide_in_from_right>

00004a34 <display_slide_in_from_bottom>:
    4a34:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <ht1632c_slide_in_from_bottom>

00004a38 <display_slide_in_from_top>:
    4a38:	0c 94 81 10 	jmp	0x2102	; 0x2102 <ht1632c_slide_in_from_top>

00004a3c <display_slide_out_to_right>:
    4a3c:	cf 93       	push	r28
    4a3e:	cf e1       	ldi	r28, 0x1F	; 31
    4a40:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <ht1632c_shift_right>
    4a44:	c1 50       	subi	r28, 0x01	; 1
    4a46:	e1 f7       	brne	.-8      	; 0x4a40 <display_slide_out_to_right+0x4>
    4a48:	cf 91       	pop	r28
    4a4a:	08 95       	ret

00004a4c <display_slide_out_to_left>:
    4a4c:	cf 93       	push	r28
    4a4e:	cf e1       	ldi	r28, 0x1F	; 31
    4a50:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <ht1632c_shift_left>
    4a54:	c1 50       	subi	r28, 0x01	; 1
    4a56:	e1 f7       	brne	.-8      	; 0x4a50 <display_slide_out_to_left+0x4>
    4a58:	cf 91       	pop	r28
    4a5a:	08 95       	ret

00004a5c <display_slide_out_to_top>:
    4a5c:	cf 93       	push	r28
    4a5e:	cf e1       	ldi	r28, 0x1F	; 31
    4a60:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <ht1632c_shift_up>
    4a64:	c1 50       	subi	r28, 0x01	; 1
    4a66:	e1 f7       	brne	.-8      	; 0x4a60 <display_slide_out_to_top+0x4>
    4a68:	cf 91       	pop	r28
    4a6a:	08 95       	ret

00004a6c <display_off>:
    4a6c:	f7 df       	rcall	.-18     	; 0x4a5c <display_slide_out_to_top>
    4a6e:	82 e0       	ldi	r24, 0x02	; 2
    4a70:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <ht1632c_write_command>
    4a74:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <ht1632c_power_down>

00004a78 <display_slide_out_to_bottom>:
    4a78:	cf 93       	push	r28
    4a7a:	cf e1       	ldi	r28, 0x1F	; 31
    4a7c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <ht1632c_shift_down>
    4a80:	c1 50       	subi	r28, 0x01	; 1
    4a82:	e1 f7       	brne	.-8      	; 0x4a7c <display_slide_out_to_bottom+0x4>
    4a84:	cf 91       	pop	r28
    4a86:	08 95       	ret

00004a88 <display_alarm_increment_minute>:
    4a88:	60 91 c1 2b 	lds	r22, 0x2BC1
    4a8c:	6b 33       	cpi	r22, 0x3B	; 59
    4a8e:	20 f4       	brcc	.+8      	; 0x4a98 <display_alarm_increment_minute+0x10>
    4a90:	6f 5f       	subi	r22, 0xFF	; 255
    4a92:	60 93 c1 2b 	sts	0x2BC1, r22
    4a96:	04 c0       	rjmp	.+8      	; 0x4aa0 <display_alarm_increment_minute+0x18>
    4a98:	81 e0       	ldi	r24, 0x01	; 1
    4a9a:	80 93 c1 2b 	sts	0x2BC1, r24
    4a9e:	61 e0       	ldi	r22, 0x01	; 1
    4aa0:	85 e0       	ldi	r24, 0x05	; 5
    4aa2:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    4aa6:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004aaa <display_alarm_decrement_minute>:
    4aaa:	60 91 c1 2b 	lds	r22, 0x2BC1
    4aae:	66 23       	and	r22, r22
    4ab0:	21 f0       	breq	.+8      	; 0x4aba <display_alarm_decrement_minute+0x10>
    4ab2:	61 50       	subi	r22, 0x01	; 1
    4ab4:	60 93 c1 2b 	sts	0x2BC1, r22
    4ab8:	04 c0       	rjmp	.+8      	; 0x4ac2 <display_alarm_decrement_minute+0x18>
    4aba:	8a e3       	ldi	r24, 0x3A	; 58
    4abc:	80 93 c1 2b 	sts	0x2BC1, r24
    4ac0:	6a e3       	ldi	r22, 0x3A	; 58
    4ac2:	85 e0       	ldi	r24, 0x05	; 5
    4ac4:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    4ac8:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004acc <display_alarm_increment_hour>:
    4acc:	60 91 c2 2b 	lds	r22, 0x2BC2
    4ad0:	67 31       	cpi	r22, 0x17	; 23
    4ad2:	20 f4       	brcc	.+8      	; 0x4adc <display_alarm_increment_hour+0x10>
    4ad4:	6f 5f       	subi	r22, 0xFF	; 255
    4ad6:	60 93 c2 2b 	sts	0x2BC2, r22
    4ada:	04 c0       	rjmp	.+8      	; 0x4ae4 <display_alarm_increment_hour+0x18>
    4adc:	81 e0       	ldi	r24, 0x01	; 1
    4ade:	80 93 c2 2b 	sts	0x2BC2, r24
    4ae2:	61 e0       	ldi	r22, 0x01	; 1
    4ae4:	85 e0       	ldi	r24, 0x05	; 5
    4ae6:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    4aea:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004aee <display_alarm_decrement_hour>:
    4aee:	60 91 c2 2b 	lds	r22, 0x2BC2
    4af2:	66 23       	and	r22, r22
    4af4:	21 f0       	breq	.+8      	; 0x4afe <display_alarm_decrement_hour+0x10>
    4af6:	61 50       	subi	r22, 0x01	; 1
    4af8:	60 93 c2 2b 	sts	0x2BC2, r22
    4afc:	04 c0       	rjmp	.+8      	; 0x4b06 <display_alarm_decrement_hour+0x18>
    4afe:	86 e1       	ldi	r24, 0x16	; 22
    4b00:	80 93 c2 2b 	sts	0x2BC2, r24
    4b04:	66 e1       	ldi	r22, 0x16	; 22
    4b06:	85 e0       	ldi	r24, 0x05	; 5
    4b08:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    4b0c:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004b10 <display_draw_and_increment_hour>:
    4b10:	60 91 c6 2b 	lds	r22, 0x2BC6
    4b14:	67 31       	cpi	r22, 0x17	; 23
    4b16:	20 f4       	brcc	.+8      	; 0x4b20 <display_draw_and_increment_hour+0x10>
    4b18:	6f 5f       	subi	r22, 0xFF	; 255
    4b1a:	60 93 c6 2b 	sts	0x2BC6, r22
    4b1e:	03 c0       	rjmp	.+6      	; 0x4b26 <display_draw_and_increment_hour+0x16>
    4b20:	10 92 c6 2b 	sts	0x2BC6, r1
    4b24:	60 e0       	ldi	r22, 0x00	; 0
    4b26:	85 e0       	ldi	r24, 0x05	; 5
    4b28:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    4b2c:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004b30 <display_draw_and_decrement_hour>:
    4b30:	60 91 c6 2b 	lds	r22, 0x2BC6
    4b34:	66 23       	and	r22, r22
    4b36:	21 f0       	breq	.+8      	; 0x4b40 <display_draw_and_decrement_hour+0x10>
    4b38:	61 50       	subi	r22, 0x01	; 1
    4b3a:	60 93 c6 2b 	sts	0x2BC6, r22
    4b3e:	04 c0       	rjmp	.+8      	; 0x4b48 <display_draw_and_decrement_hour+0x18>
    4b40:	87 e1       	ldi	r24, 0x17	; 23
    4b42:	80 93 c6 2b 	sts	0x2BC6, r24
    4b46:	67 e1       	ldi	r22, 0x17	; 23
    4b48:	85 e0       	ldi	r24, 0x05	; 5
    4b4a:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    4b4e:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004b52 <display_draw_and_increment_minute>:
    4b52:	60 91 c5 2b 	lds	r22, 0x2BC5
    4b56:	6b 33       	cpi	r22, 0x3B	; 59
    4b58:	20 f4       	brcc	.+8      	; 0x4b62 <display_draw_and_increment_minute+0x10>
    4b5a:	6f 5f       	subi	r22, 0xFF	; 255
    4b5c:	60 93 c5 2b 	sts	0x2BC5, r22
    4b60:	03 c0       	rjmp	.+6      	; 0x4b68 <display_draw_and_increment_minute+0x16>
    4b62:	10 92 c5 2b 	sts	0x2BC5, r1
    4b66:	60 e0       	ldi	r22, 0x00	; 0
    4b68:	85 e0       	ldi	r24, 0x05	; 5
    4b6a:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    4b6e:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004b72 <display_draw_and_decrement_minute>:
    4b72:	60 91 c5 2b 	lds	r22, 0x2BC5
    4b76:	66 23       	and	r22, r22
    4b78:	21 f0       	breq	.+8      	; 0x4b82 <display_draw_and_decrement_minute+0x10>
    4b7a:	61 50       	subi	r22, 0x01	; 1
    4b7c:	60 93 c5 2b 	sts	0x2BC5, r22
    4b80:	04 c0       	rjmp	.+8      	; 0x4b8a <display_draw_and_decrement_minute+0x18>
    4b82:	8b e3       	ldi	r24, 0x3B	; 59
    4b84:	80 93 c5 2b 	sts	0x2BC5, r24
    4b88:	6b e3       	ldi	r22, 0x3B	; 59
    4b8a:	85 e0       	ldi	r24, 0x05	; 5
    4b8c:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    4b90:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004b94 <display_draw_and_increment_day>:
	}
	display_refresh_screen();
}

void display_draw_and_increment_day(void)
{
    4b94:	cf 93       	push	r28
	if (env.time.day < time_get_days_in_month(env.time.month,env.time.year)) {
    4b96:	c0 91 c7 2b 	lds	r28, 0x2BC7
    4b9a:	60 91 cb 2b 	lds	r22, 0x2BCB
    4b9e:	70 91 cc 2b 	lds	r23, 0x2BCC
    4ba2:	80 91 ca 2b 	lds	r24, 0x2BCA
    4ba6:	0e 94 2b 4b 	call	0x9656	; 0x9656 <time_get_days_in_month>
    4baa:	c8 17       	cp	r28, r24
    4bac:	30 f4       	brcc	.+12     	; 0x4bba <display_draw_and_increment_day+0x26>
		rtc_update_display(5,++env.time.day);
    4bae:	60 91 c7 2b 	lds	r22, 0x2BC7
    4bb2:	6f 5f       	subi	r22, 0xFF	; 255
    4bb4:	60 93 c7 2b 	sts	0x2BC7, r22
    4bb8:	04 c0       	rjmp	.+8      	; 0x4bc2 <display_draw_and_increment_day+0x2e>
	} else {
		env.time.day = 1;
    4bba:	81 e0       	ldi	r24, 0x01	; 1
    4bbc:	80 93 c7 2b 	sts	0x2BC7, r24
		rtc_update_display(5,env.time.day);
    4bc0:	61 e0       	ldi	r22, 0x01	; 1
    4bc2:	85 e0       	ldi	r24, 0x05	; 5
    4bc4:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
	}
	display_refresh_screen();
}
    4bc8:	cf 91       	pop	r28
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4bca:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004bce <display_draw_and_decrement_day>:
	display_refresh_screen();
}

void display_draw_and_decrement_day(void)
{
	if (env.time.day > 1) {
    4bce:	60 91 c7 2b 	lds	r22, 0x2BC7
    4bd2:	62 30       	cpi	r22, 0x02	; 2
    4bd4:	20 f0       	brcs	.+8      	; 0x4bde <display_draw_and_decrement_day+0x10>
		rtc_update_display(5,--env.time.day);
    4bd6:	61 50       	subi	r22, 0x01	; 1
    4bd8:	60 93 c7 2b 	sts	0x2BC7, r22
    4bdc:	0b c0       	rjmp	.+22     	; 0x4bf4 <display_draw_and_decrement_day+0x26>
	} else {
		env.time.day = time_get_days_in_month(env.time.month,env.time.year);
    4bde:	60 91 cb 2b 	lds	r22, 0x2BCB
    4be2:	70 91 cc 2b 	lds	r23, 0x2BCC
    4be6:	80 91 ca 2b 	lds	r24, 0x2BCA
    4bea:	0e 94 2b 4b 	call	0x9656	; 0x9656 <time_get_days_in_month>
    4bee:	80 93 c7 2b 	sts	0x2BC7, r24
		rtc_update_display(5,env.time.day);
    4bf2:	68 2f       	mov	r22, r24
    4bf4:	85 e0       	ldi	r24, 0x05	; 5
    4bf6:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4bfa:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004bfe <display_draw_and_increment_month>:
	display_refresh_screen();
}

void display_draw_and_increment_month(void) 
{
	if (env.time.month < December) {
    4bfe:	80 91 ca 2b 	lds	r24, 0x2BCA
    4c02:	8c 30       	cpi	r24, 0x0C	; 12
    4c04:	10 f4       	brcc	.+4      	; 0x4c0a <display_draw_and_increment_month+0xc>
		display_draw_three_letter_word(time_get_month_name(++env.time.month));
    4c06:	8f 5f       	subi	r24, 0xFF	; 255
    4c08:	01 c0       	rjmp	.+2      	; 0x4c0c <display_draw_and_increment_month+0xe>
	} else {
		env.time.month = January;
    4c0a:	81 e0       	ldi	r24, 0x01	; 1
    4c0c:	80 93 ca 2b 	sts	0x2BCA, r24
		display_draw_three_letter_word(time_get_month_name(January));
    4c10:	0e 94 cf 4a 	call	0x959e	; 0x959e <time_get_month_name>
    4c14:	6c de       	rcall	.-808    	; 0x48ee <display_draw_three_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4c16:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004c1a <display_draw_and_decrement_month>:
	display_refresh_screen();
}

void display_draw_and_decrement_month(void) 
{
	if (env.time.month > January) {
    4c1a:	80 91 ca 2b 	lds	r24, 0x2BCA
    4c1e:	82 30       	cpi	r24, 0x02	; 2
    4c20:	10 f0       	brcs	.+4      	; 0x4c26 <display_draw_and_decrement_month+0xc>
		display_draw_three_letter_word(time_get_month_name(--env.time.month));
    4c22:	81 50       	subi	r24, 0x01	; 1
    4c24:	01 c0       	rjmp	.+2      	; 0x4c28 <display_draw_and_decrement_month+0xe>
	} else {
		env.time.month = December;
    4c26:	8c e0       	ldi	r24, 0x0C	; 12
    4c28:	80 93 ca 2b 	sts	0x2BCA, r24
		display_draw_three_letter_word(time_get_month_name(December));
    4c2c:	0e 94 cf 4a 	call	0x959e	; 0x959e <time_get_month_name>
    4c30:	5e de       	rcall	.-836    	; 0x48ee <display_draw_three_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4c32:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004c36 <display_draw_and_increment_year>:
}

void display_draw_and_increment_year(void) 
{
	char *year = NULL;
	itoa_simple(year,++env.time.year);
    4c36:	eb ec       	ldi	r30, 0xCB	; 203
    4c38:	fb e2       	ldi	r31, 0x2B	; 43
    4c3a:	60 81       	ld	r22, Z
    4c3c:	71 81       	ldd	r23, Z+1	; 0x01
    4c3e:	6f 5f       	subi	r22, 0xFF	; 255
    4c40:	7f 4f       	sbci	r23, 0xFF	; 255
    4c42:	60 83       	st	Z, r22
    4c44:	71 83       	std	Z+1, r23	; 0x01
    4c46:	80 e0       	ldi	r24, 0x00	; 0
    4c48:	90 e0       	ldi	r25, 0x00	; 0
    4c4a:	91 da       	rcall	.-2782   	; 0x416e <itoa_simple.constprop.1>
	display_draw_four_letter_word(year);
    4c4c:	80 e0       	ldi	r24, 0x00	; 0
    4c4e:	90 e0       	ldi	r25, 0x00	; 0
    4c50:	25 de       	rcall	.-950    	; 0x489c <display_draw_four_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4c52:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004c56 <display_draw_and_decrement_year>:
}

void display_draw_and_decrement_year(void) 
{
	char *year = NULL;
	itoa_simple(year,--env.time.year);
    4c56:	eb ec       	ldi	r30, 0xCB	; 203
    4c58:	fb e2       	ldi	r31, 0x2B	; 43
    4c5a:	60 81       	ld	r22, Z
    4c5c:	71 81       	ldd	r23, Z+1	; 0x01
    4c5e:	61 50       	subi	r22, 0x01	; 1
    4c60:	71 09       	sbc	r23, r1
    4c62:	60 83       	st	Z, r22
    4c64:	71 83       	std	Z+1, r23	; 0x01
    4c66:	80 e0       	ldi	r24, 0x00	; 0
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	81 da       	rcall	.-2814   	; 0x416e <itoa_simple.constprop.1>
	display_draw_four_letter_word(year);
    4c6c:	80 e0       	ldi	r24, 0x00	; 0
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	15 de       	rcall	.-982    	; 0x489c <display_draw_four_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4c72:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <ht1632c_refresh_screen>

00004c76 <mem_cpy>:
		*tp = 0;
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    4c76:	cf 93       	push	r28
    4c78:	df 93       	push	r29
    4c7a:	db 01       	movw	r26, r22
    4c7c:	fc 01       	movw	r30, r24
    4c7e:	9a 01       	movw	r18, r20
    4c80:	22 30       	cpi	r18, 0x02	; 2
    4c82:	31 05       	cpc	r19, r1
    4c84:	38 f0       	brcs	.+14     	; 0x4c94 <mem_cpy+0x1e>
    4c86:	cd 91       	ld	r28, X+
    4c88:	dd 91       	ld	r29, X+
    4c8a:	c1 93       	st	Z+, r28
    4c8c:	d1 93       	st	Z+, r29
    4c8e:	22 50       	subi	r18, 0x02	; 2
    4c90:	31 09       	sbc	r19, r1
    4c92:	f6 cf       	rjmp	.-20     	; 0x4c80 <mem_cpy+0xa>
    4c94:	da 01       	movw	r26, r20
    4c96:	ae 7f       	andi	r26, 0xFE	; 254
    4c98:	fb 01       	movw	r30, r22
    4c9a:	ea 0f       	add	r30, r26
    4c9c:	fb 1f       	adc	r31, r27
    4c9e:	a8 0f       	add	r26, r24
    4ca0:	b9 1f       	adc	r27, r25
    4ca2:	41 70       	andi	r20, 0x01	; 1
    4ca4:	55 27       	eor	r21, r21
    4ca6:	4e 0f       	add	r20, r30
    4ca8:	5f 1f       	adc	r21, r31
    4caa:	e4 17       	cp	r30, r20
    4cac:	f5 07       	cpc	r31, r21
    4cae:	19 f0       	breq	.+6      	; 0x4cb6 <mem_cpy+0x40>
    4cb0:	81 91       	ld	r24, Z+
    4cb2:	8d 93       	st	X+, r24
    4cb4:	fa cf       	rjmp	.-12     	; 0x4caa <mem_cpy+0x34>
    4cb6:	df 91       	pop	r29
    4cb8:	cf 91       	pop	r28
    4cba:	08 95       	ret

00004cbc <mem_set>:
    4cbc:	48 0f       	add	r20, r24
    4cbe:	59 1f       	adc	r21, r25
    4cc0:	84 17       	cp	r24, r20
    4cc2:	95 07       	cpc	r25, r21
    4cc4:	21 f0       	breq	.+8      	; 0x4cce <mem_set+0x12>
    4cc6:	fc 01       	movw	r30, r24
    4cc8:	61 93       	st	Z+, r22
    4cca:	cf 01       	movw	r24, r30
    4ccc:	f9 cf       	rjmp	.-14     	; 0x4cc0 <mem_set+0x4>
    4cce:	08 95       	ret

00004cd0 <get_ldnumber>:
    4cd0:	dc 01       	movw	r26, r24
    4cd2:	2d 91       	ld	r18, X+
    4cd4:	3c 91       	ld	r19, X
    4cd6:	11 97       	sbiw	r26, 0x01	; 1
    4cd8:	21 15       	cp	r18, r1
    4cda:	31 05       	cpc	r19, r1
    4cdc:	b9 f0       	breq	.+46     	; 0x4d0c <get_ldnumber+0x3c>
    4cde:	f9 01       	movw	r30, r18
    4ce0:	af 01       	movw	r20, r30
    4ce2:	81 91       	ld	r24, Z+
    4ce4:	81 32       	cpi	r24, 0x21	; 33
    4ce6:	a8 f0       	brcs	.+42     	; 0x4d12 <get_ldnumber+0x42>
    4ce8:	8a 33       	cpi	r24, 0x3A	; 58
    4cea:	d1 f7       	brne	.-12     	; 0x4ce0 <get_ldnumber+0x10>
    4cec:	f9 01       	movw	r30, r18
    4cee:	81 91       	ld	r24, Z+
    4cf0:	4e 17       	cp	r20, r30
    4cf2:	5f 07       	cpc	r21, r31
    4cf4:	59 f4       	brne	.+22     	; 0x4d0c <get_ldnumber+0x3c>
    4cf6:	90 ed       	ldi	r25, 0xD0	; 208
    4cf8:	98 0f       	add	r25, r24
    4cfa:	92 30       	cpi	r25, 0x02	; 2
    4cfc:	38 f4       	brcc	.+14     	; 0x4d0c <get_ldnumber+0x3c>
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	c0 97       	sbiw	r24, 0x30	; 48
    4d02:	2e 5f       	subi	r18, 0xFE	; 254
    4d04:	3f 4f       	sbci	r19, 0xFF	; 255
    4d06:	2d 93       	st	X+, r18
    4d08:	3c 93       	st	X, r19
    4d0a:	08 95       	ret
    4d0c:	8f ef       	ldi	r24, 0xFF	; 255
    4d0e:	9f ef       	ldi	r25, 0xFF	; 255
    4d10:	08 95       	ret
    4d12:	80 91 11 2b 	lds	r24, 0x2B11
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	08 95       	ret

00004d1a <validate>:
    4d1a:	00 97       	sbiw	r24, 0x00	; 0
    4d1c:	c9 f0       	breq	.+50     	; 0x4d50 <validate+0x36>
    4d1e:	dc 01       	movw	r26, r24
    4d20:	ed 91       	ld	r30, X+
    4d22:	fc 91       	ld	r31, X
    4d24:	11 97       	sbiw	r26, 0x01	; 1
    4d26:	30 97       	sbiw	r30, 0x00	; 0
    4d28:	99 f0       	breq	.+38     	; 0x4d50 <validate+0x36>
    4d2a:	20 81       	ld	r18, Z
    4d2c:	22 23       	and	r18, r18
    4d2e:	81 f0       	breq	.+32     	; 0x4d50 <validate+0x36>
    4d30:	26 81       	ldd	r18, Z+6	; 0x06
    4d32:	37 81       	ldd	r19, Z+7	; 0x07
    4d34:	12 96       	adiw	r26, 0x02	; 2
    4d36:	8d 91       	ld	r24, X+
    4d38:	9c 91       	ld	r25, X
    4d3a:	13 97       	sbiw	r26, 0x03	; 3
    4d3c:	28 17       	cp	r18, r24
    4d3e:	39 07       	cpc	r19, r25
    4d40:	39 f4       	brne	.+14     	; 0x4d50 <validate+0x36>
    4d42:	81 81       	ldd	r24, Z+1	; 0x01
    4d44:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <disk_status>
    4d48:	80 fd       	sbrc	r24, 0
    4d4a:	02 c0       	rjmp	.+4      	; 0x4d50 <validate+0x36>
    4d4c:	80 e0       	ldi	r24, 0x00	; 0
    4d4e:	08 95       	ret
    4d50:	89 e0       	ldi	r24, 0x09	; 9
    4d52:	08 95       	ret

00004d54 <sync_window>:
    4d54:	4f 92       	push	r4
    4d56:	5f 92       	push	r5
    4d58:	6f 92       	push	r6
    4d5a:	7f 92       	push	r7
    4d5c:	af 92       	push	r10
    4d5e:	bf 92       	push	r11
    4d60:	cf 92       	push	r12
    4d62:	df 92       	push	r13
    4d64:	ef 92       	push	r14
    4d66:	ff 92       	push	r15
    4d68:	0f 93       	push	r16
    4d6a:	1f 93       	push	r17
    4d6c:	cf 93       	push	r28
    4d6e:	df 93       	push	r29
    4d70:	ec 01       	movw	r28, r24
    4d72:	8c 81       	ldd	r24, Y+4	; 0x04
    4d74:	88 23       	and	r24, r24
    4d76:	09 f4       	brne	.+2      	; 0x4d7a <sync_window+0x26>
    4d78:	45 c0       	rjmp	.+138    	; 0x4e04 <sync_window+0xb0>
    4d7a:	4e a4       	ldd	r4, Y+46	; 0x2e
    4d7c:	5f a4       	ldd	r5, Y+47	; 0x2f
    4d7e:	68 a8       	ldd	r6, Y+48	; 0x30
    4d80:	79 a8       	ldd	r7, Y+49	; 0x31
    4d82:	6e 01       	movw	r12, r28
    4d84:	82 e3       	ldi	r24, 0x32	; 50
    4d86:	c8 0e       	add	r12, r24
    4d88:	d1 1c       	adc	r13, r1
    4d8a:	01 e0       	ldi	r16, 0x01	; 1
    4d8c:	10 e0       	ldi	r17, 0x00	; 0
    4d8e:	a3 01       	movw	r20, r6
    4d90:	92 01       	movw	r18, r4
    4d92:	b6 01       	movw	r22, r12
    4d94:	89 81       	ldd	r24, Y+1	; 0x01
    4d96:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <disk_write>
    4d9a:	81 11       	cpse	r24, r1
    4d9c:	31 c0       	rjmp	.+98     	; 0x4e00 <sync_window+0xac>
    4d9e:	1c 82       	std	Y+4, r1	; 0x04
    4da0:	8a a1       	ldd	r24, Y+34	; 0x22
    4da2:	9b a1       	ldd	r25, Y+35	; 0x23
    4da4:	ac a1       	ldd	r26, Y+36	; 0x24
    4da6:	bd a1       	ldd	r27, Y+37	; 0x25
    4da8:	b3 01       	movw	r22, r6
    4daa:	a2 01       	movw	r20, r4
    4dac:	48 1b       	sub	r20, r24
    4dae:	59 0b       	sbc	r21, r25
    4db0:	6a 0b       	sbc	r22, r26
    4db2:	7b 0b       	sbc	r23, r27
    4db4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4db6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4db8:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4dba:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4dbc:	48 17       	cp	r20, r24
    4dbe:	59 07       	cpc	r21, r25
    4dc0:	6a 07       	cpc	r22, r26
    4dc2:	7b 07       	cpc	r23, r27
    4dc4:	f8 f4       	brcc	.+62     	; 0x4e04 <sync_window+0xb0>
    4dc6:	ab 80       	ldd	r10, Y+3	; 0x03
    4dc8:	b1 2c       	mov	r11, r1
    4dca:	e1 2c       	mov	r14, r1
    4dcc:	f1 2c       	mov	r15, r1
    4dce:	c5 01       	movw	r24, r10
    4dd0:	8e 19       	sub	r24, r14
    4dd2:	9f 09       	sbc	r25, r15
    4dd4:	02 97       	sbiw	r24, 0x02	; 2
    4dd6:	b0 f0       	brcs	.+44     	; 0x4e04 <sync_window+0xb0>
    4dd8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4dda:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4ddc:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4dde:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4de0:	48 0e       	add	r4, r24
    4de2:	59 1e       	adc	r5, r25
    4de4:	6a 1e       	adc	r6, r26
    4de6:	7b 1e       	adc	r7, r27
    4de8:	01 e0       	ldi	r16, 0x01	; 1
    4dea:	10 e0       	ldi	r17, 0x00	; 0
    4dec:	a3 01       	movw	r20, r6
    4dee:	92 01       	movw	r18, r4
    4df0:	b6 01       	movw	r22, r12
    4df2:	89 81       	ldd	r24, Y+1	; 0x01
    4df4:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <disk_write>
    4df8:	8f ef       	ldi	r24, 0xFF	; 255
    4dfa:	e8 1a       	sub	r14, r24
    4dfc:	f8 0a       	sbc	r15, r24
    4dfe:	e7 cf       	rjmp	.-50     	; 0x4dce <sync_window+0x7a>
    4e00:	81 e0       	ldi	r24, 0x01	; 1
    4e02:	01 c0       	rjmp	.+2      	; 0x4e06 <sync_window+0xb2>
    4e04:	80 e0       	ldi	r24, 0x00	; 0
    4e06:	df 91       	pop	r29
    4e08:	cf 91       	pop	r28
    4e0a:	1f 91       	pop	r17
    4e0c:	0f 91       	pop	r16
    4e0e:	ff 90       	pop	r15
    4e10:	ef 90       	pop	r14
    4e12:	df 90       	pop	r13
    4e14:	cf 90       	pop	r12
    4e16:	bf 90       	pop	r11
    4e18:	af 90       	pop	r10
    4e1a:	7f 90       	pop	r7
    4e1c:	6f 90       	pop	r6
    4e1e:	5f 90       	pop	r5
    4e20:	4f 90       	pop	r4
    4e22:	08 95       	ret

00004e24 <sync_fs>:
    4e24:	ef 92       	push	r14
    4e26:	ff 92       	push	r15
    4e28:	0f 93       	push	r16
    4e2a:	1f 93       	push	r17
    4e2c:	cf 93       	push	r28
    4e2e:	df 93       	push	r29
    4e30:	ec 01       	movw	r28, r24
    4e32:	90 df       	rcall	.-224    	; 0x4d54 <sync_window>
    4e34:	98 2f       	mov	r25, r24
    4e36:	81 11       	cpse	r24, r1
    4e38:	59 c0       	rjmp	.+178    	; 0x4eec <sync_fs+0xc8>
    4e3a:	88 81       	ld	r24, Y
    4e3c:	83 30       	cpi	r24, 0x03	; 3
    4e3e:	09 f0       	breq	.+2      	; 0x4e42 <sync_fs+0x1e>
    4e40:	4b c0       	rjmp	.+150    	; 0x4ed8 <sync_fs+0xb4>
    4e42:	8d 81       	ldd	r24, Y+5	; 0x05
    4e44:	81 30       	cpi	r24, 0x01	; 1
    4e46:	09 f0       	breq	.+2      	; 0x4e4a <sync_fs+0x26>
    4e48:	47 c0       	rjmp	.+142    	; 0x4ed8 <sync_fs+0xb4>
    4e4a:	40 e0       	ldi	r20, 0x00	; 0
    4e4c:	52 e0       	ldi	r21, 0x02	; 2
    4e4e:	60 e0       	ldi	r22, 0x00	; 0
    4e50:	70 e0       	ldi	r23, 0x00	; 0
    4e52:	7e 01       	movw	r14, r28
    4e54:	82 e3       	ldi	r24, 0x32	; 50
    4e56:	e8 0e       	add	r14, r24
    4e58:	f1 1c       	adc	r15, r1
    4e5a:	c7 01       	movw	r24, r14
    4e5c:	2f df       	rcall	.-418    	; 0x4cbc <mem_set>
    4e5e:	85 e5       	ldi	r24, 0x55	; 85
    4e60:	9a ea       	ldi	r25, 0xAA	; 170
    4e62:	fe 01       	movw	r30, r28
    4e64:	e0 5d       	subi	r30, 0xD0	; 208
    4e66:	fd 4f       	sbci	r31, 0xFD	; 253
    4e68:	80 83       	st	Z, r24
    4e6a:	91 83       	std	Z+1, r25	; 0x01
    4e6c:	82 e5       	ldi	r24, 0x52	; 82
    4e6e:	92 e5       	ldi	r25, 0x52	; 82
    4e70:	a1 e6       	ldi	r26, 0x61	; 97
    4e72:	b1 e4       	ldi	r27, 0x41	; 65
    4e74:	8a ab       	std	Y+50, r24	; 0x32
    4e76:	9b ab       	std	Y+51, r25	; 0x33
    4e78:	ac ab       	std	Y+52, r26	; 0x34
    4e7a:	bd ab       	std	Y+53, r27	; 0x35
    4e7c:	82 e7       	ldi	r24, 0x72	; 114
    4e7e:	92 e7       	ldi	r25, 0x72	; 114
    4e80:	a1 e4       	ldi	r26, 0x41	; 65
    4e82:	b1 e6       	ldi	r27, 0x61	; 97
    4e84:	7a 97       	sbiw	r30, 0x1a	; 26
    4e86:	80 83       	st	Z, r24
    4e88:	91 83       	std	Z+1, r25	; 0x01
    4e8a:	a2 83       	std	Z+2, r26	; 0x02
    4e8c:	b3 83       	std	Z+3, r27	; 0x03
    4e8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e90:	9f 85       	ldd	r25, Y+15	; 0x0f
    4e92:	a8 89       	ldd	r26, Y+16	; 0x10
    4e94:	b9 89       	ldd	r27, Y+17	; 0x11
    4e96:	34 96       	adiw	r30, 0x04	; 4
    4e98:	80 83       	st	Z, r24
    4e9a:	91 83       	std	Z+1, r25	; 0x01
    4e9c:	a2 83       	std	Z+2, r26	; 0x02
    4e9e:	b3 83       	std	Z+3, r27	; 0x03
    4ea0:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ea2:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ea4:	ac 85       	ldd	r26, Y+12	; 0x0c
    4ea6:	bd 85       	ldd	r27, Y+13	; 0x0d
    4ea8:	34 96       	adiw	r30, 0x04	; 4
    4eaa:	80 83       	st	Z, r24
    4eac:	91 83       	std	Z+1, r25	; 0x01
    4eae:	a2 83       	std	Z+2, r26	; 0x02
    4eb0:	b3 83       	std	Z+3, r27	; 0x03
    4eb2:	2e 8d       	ldd	r18, Y+30	; 0x1e
    4eb4:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4eb6:	48 a1       	ldd	r20, Y+32	; 0x20
    4eb8:	59 a1       	ldd	r21, Y+33	; 0x21
    4eba:	2f 5f       	subi	r18, 0xFF	; 255
    4ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    4ebe:	4f 4f       	sbci	r20, 0xFF	; 255
    4ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ec2:	2e a7       	std	Y+46, r18	; 0x2e
    4ec4:	3f a7       	std	Y+47, r19	; 0x2f
    4ec6:	48 ab       	std	Y+48, r20	; 0x30
    4ec8:	59 ab       	std	Y+49, r21	; 0x31
    4eca:	01 e0       	ldi	r16, 0x01	; 1
    4ecc:	10 e0       	ldi	r17, 0x00	; 0
    4ece:	b7 01       	movw	r22, r14
    4ed0:	89 81       	ldd	r24, Y+1	; 0x01
    4ed2:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <disk_write>
    4ed6:	1d 82       	std	Y+5, r1	; 0x05
    4ed8:	40 e0       	ldi	r20, 0x00	; 0
    4eda:	50 e0       	ldi	r21, 0x00	; 0
    4edc:	60 e0       	ldi	r22, 0x00	; 0
    4ede:	89 81       	ldd	r24, Y+1	; 0x01
    4ee0:	0e 94 1a 38 	call	0x7034	; 0x7034 <disk_ioctl>
    4ee4:	91 e0       	ldi	r25, 0x01	; 1
    4ee6:	81 11       	cpse	r24, r1
    4ee8:	01 c0       	rjmp	.+2      	; 0x4eec <sync_fs+0xc8>
    4eea:	90 e0       	ldi	r25, 0x00	; 0
    4eec:	89 2f       	mov	r24, r25
    4eee:	df 91       	pop	r29
    4ef0:	cf 91       	pop	r28
    4ef2:	1f 91       	pop	r17
    4ef4:	0f 91       	pop	r16
    4ef6:	ff 90       	pop	r15
    4ef8:	ef 90       	pop	r14
    4efa:	08 95       	ret

00004efc <move_window>:
    4efc:	bf 92       	push	r11
    4efe:	cf 92       	push	r12
    4f00:	df 92       	push	r13
    4f02:	ef 92       	push	r14
    4f04:	ff 92       	push	r15
    4f06:	0f 93       	push	r16
    4f08:	1f 93       	push	r17
    4f0a:	cf 93       	push	r28
    4f0c:	df 93       	push	r29
    4f0e:	ec 01       	movw	r28, r24
    4f10:	6a 01       	movw	r12, r20
    4f12:	7b 01       	movw	r14, r22
    4f14:	8e a5       	ldd	r24, Y+46	; 0x2e
    4f16:	9f a5       	ldd	r25, Y+47	; 0x2f
    4f18:	a8 a9       	ldd	r26, Y+48	; 0x30
    4f1a:	b9 a9       	ldd	r27, Y+49	; 0x31
    4f1c:	48 17       	cp	r20, r24
    4f1e:	59 07       	cpc	r21, r25
    4f20:	6a 07       	cpc	r22, r26
    4f22:	7b 07       	cpc	r23, r27
    4f24:	e1 f0       	breq	.+56     	; 0x4f5e <move_window+0x62>
    4f26:	ce 01       	movw	r24, r28
    4f28:	15 df       	rcall	.-470    	; 0x4d54 <sync_window>
    4f2a:	b8 2e       	mov	r11, r24
    4f2c:	81 11       	cpse	r24, r1
    4f2e:	18 c0       	rjmp	.+48     	; 0x4f60 <move_window+0x64>
    4f30:	01 e0       	ldi	r16, 0x01	; 1
    4f32:	10 e0       	ldi	r17, 0x00	; 0
    4f34:	a7 01       	movw	r20, r14
    4f36:	96 01       	movw	r18, r12
    4f38:	be 01       	movw	r22, r28
    4f3a:	6e 5c       	subi	r22, 0xCE	; 206
    4f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    4f3e:	89 81       	ldd	r24, Y+1	; 0x01
    4f40:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <disk_read>
    4f44:	88 23       	and	r24, r24
    4f46:	31 f0       	breq	.+12     	; 0x4f54 <move_window+0x58>
    4f48:	bb 24       	eor	r11, r11
    4f4a:	b3 94       	inc	r11
    4f4c:	cc 24       	eor	r12, r12
    4f4e:	ca 94       	dec	r12
    4f50:	dc 2c       	mov	r13, r12
    4f52:	76 01       	movw	r14, r12
    4f54:	ce a6       	std	Y+46, r12	; 0x2e
    4f56:	df a6       	std	Y+47, r13	; 0x2f
    4f58:	e8 aa       	std	Y+48, r14	; 0x30
    4f5a:	f9 aa       	std	Y+49, r15	; 0x31
    4f5c:	01 c0       	rjmp	.+2      	; 0x4f60 <move_window+0x64>
    4f5e:	b1 2c       	mov	r11, r1
    4f60:	8b 2d       	mov	r24, r11
    4f62:	df 91       	pop	r29
    4f64:	cf 91       	pop	r28
    4f66:	1f 91       	pop	r17
    4f68:	0f 91       	pop	r16
    4f6a:	ff 90       	pop	r15
    4f6c:	ef 90       	pop	r14
    4f6e:	df 90       	pop	r13
    4f70:	cf 90       	pop	r12
    4f72:	bf 90       	pop	r11
    4f74:	08 95       	ret

00004f76 <check_fs>:
    4f76:	0f 93       	push	r16
    4f78:	1f 93       	push	r17
    4f7a:	cf 93       	push	r28
    4f7c:	df 93       	push	r29
    4f7e:	ec 01       	movw	r28, r24
    4f80:	1c 82       	std	Y+4, r1	; 0x04
    4f82:	0f ef       	ldi	r16, 0xFF	; 255
    4f84:	1f ef       	ldi	r17, 0xFF	; 255
    4f86:	98 01       	movw	r18, r16
    4f88:	0e a7       	std	Y+46, r16	; 0x2e
    4f8a:	1f a7       	std	Y+47, r17	; 0x2f
    4f8c:	28 ab       	std	Y+48, r18	; 0x30
    4f8e:	39 ab       	std	Y+49, r19	; 0x31
    4f90:	b5 df       	rcall	.-150    	; 0x4efc <move_window>
    4f92:	81 11       	cpse	r24, r1
    4f94:	22 c0       	rjmp	.+68     	; 0x4fda <check_fs+0x64>
    4f96:	fe 01       	movw	r30, r28
    4f98:	e0 5d       	subi	r30, 0xD0	; 208
    4f9a:	fd 4f       	sbci	r31, 0xFD	; 253
    4f9c:	80 81       	ld	r24, Z
    4f9e:	91 81       	ldd	r25, Z+1	; 0x01
    4fa0:	85 35       	cpi	r24, 0x55	; 85
    4fa2:	9a 4a       	sbci	r25, 0xAA	; 170
    4fa4:	e1 f4       	brne	.+56     	; 0x4fde <check_fs+0x68>
    4fa6:	e8 5c       	subi	r30, 0xC8	; 200
    4fa8:	f1 40       	sbci	r31, 0x01	; 1
    4faa:	40 81       	ld	r20, Z
    4fac:	51 81       	ldd	r21, Z+1	; 0x01
    4fae:	62 81       	ldd	r22, Z+2	; 0x02
    4fb0:	73 81       	ldd	r23, Z+3	; 0x03
    4fb2:	77 27       	eor	r23, r23
    4fb4:	46 34       	cpi	r20, 0x46	; 70
    4fb6:	51 44       	sbci	r21, 0x41	; 65
    4fb8:	64 45       	sbci	r22, 0x54	; 84
    4fba:	71 05       	cpc	r23, r1
    4fbc:	91 f0       	breq	.+36     	; 0x4fe2 <check_fs+0x6c>
    4fbe:	cc 57       	subi	r28, 0x7C	; 124
    4fc0:	df 4f       	sbci	r29, 0xFF	; 255
    4fc2:	48 81       	ld	r20, Y
    4fc4:	59 81       	ldd	r21, Y+1	; 0x01
    4fc6:	6a 81       	ldd	r22, Y+2	; 0x02
    4fc8:	7b 81       	ldd	r23, Y+3	; 0x03
    4fca:	77 27       	eor	r23, r23
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	46 34       	cpi	r20, 0x46	; 70
    4fd0:	51 44       	sbci	r21, 0x41	; 65
    4fd2:	64 45       	sbci	r22, 0x54	; 84
    4fd4:	71 05       	cpc	r23, r1
    4fd6:	31 f4       	brne	.+12     	; 0x4fe4 <check_fs+0x6e>
    4fd8:	04 c0       	rjmp	.+8      	; 0x4fe2 <check_fs+0x6c>
    4fda:	83 e0       	ldi	r24, 0x03	; 3
    4fdc:	03 c0       	rjmp	.+6      	; 0x4fe4 <check_fs+0x6e>
    4fde:	82 e0       	ldi	r24, 0x02	; 2
    4fe0:	01 c0       	rjmp	.+2      	; 0x4fe4 <check_fs+0x6e>
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    4fe4:	df 91       	pop	r29
    4fe6:	cf 91       	pop	r28
    4fe8:	1f 91       	pop	r17
    4fea:	0f 91       	pop	r16
    4fec:	08 95       	ret

00004fee <find_volume>:
    4fee:	2f 92       	push	r2
    4ff0:	3f 92       	push	r3
    4ff2:	4f 92       	push	r4
    4ff4:	5f 92       	push	r5
    4ff6:	6f 92       	push	r6
    4ff8:	7f 92       	push	r7
    4ffa:	8f 92       	push	r8
    4ffc:	9f 92       	push	r9
    4ffe:	af 92       	push	r10
    5000:	bf 92       	push	r11
    5002:	cf 92       	push	r12
    5004:	df 92       	push	r13
    5006:	ef 92       	push	r14
    5008:	ff 92       	push	r15
    500a:	0f 93       	push	r16
    500c:	1f 93       	push	r17
    500e:	cf 93       	push	r28
    5010:	df 93       	push	r29
    5012:	cd b7       	in	r28, 0x3d	; 61
    5014:	de b7       	in	r29, 0x3e	; 62
    5016:	6d 97       	sbiw	r28, 0x1d	; 29
    5018:	cd bf       	out	0x3d, r28	; 61
    501a:	de bf       	out	0x3e, r29	; 62
    501c:	6c 01       	movw	r12, r24
    501e:	cb 01       	movw	r24, r22
    5020:	b4 2e       	mov	r11, r20
    5022:	d6 01       	movw	r26, r12
    5024:	1d 92       	st	X+, r1
    5026:	1c 92       	st	X, r1
    5028:	53 de       	rcall	.-858    	; 0x4cd0 <get_ldnumber>
    502a:	7c 01       	movw	r14, r24
    502c:	97 fd       	sbrc	r25, 7
    502e:	23 c2       	rjmp	.+1094   	; 0x5476 <find_volume+0x488>
    5030:	fc 01       	movw	r30, r24
    5032:	ee 0f       	add	r30, r30
    5034:	ff 1f       	adc	r31, r31
    5036:	ec 5e       	subi	r30, 0xEC	; 236
    5038:	f4 4d       	sbci	r31, 0xD4	; 212
    503a:	00 81       	ld	r16, Z
    503c:	11 81       	ldd	r17, Z+1	; 0x01
    503e:	01 15       	cp	r16, r1
    5040:	11 05       	cpc	r17, r1
    5042:	09 f4       	brne	.+2      	; 0x5046 <find_volume+0x58>
    5044:	1a c2       	rjmp	.+1076   	; 0x547a <find_volume+0x48c>
    5046:	f6 01       	movw	r30, r12
    5048:	00 83       	st	Z, r16
    504a:	11 83       	std	Z+1, r17	; 0x01
    504c:	d8 01       	movw	r26, r16
    504e:	8c 91       	ld	r24, X
    5050:	88 23       	and	r24, r24
    5052:	61 f0       	breq	.+24     	; 0x506c <find_volume+0x7e>
    5054:	11 96       	adiw	r26, 0x01	; 1
    5056:	8c 91       	ld	r24, X
    5058:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <disk_status>
    505c:	80 fd       	sbrc	r24, 0
    505e:	06 c0       	rjmp	.+12     	; 0x506c <find_volume+0x7e>
    5060:	bb 20       	and	r11, r11
    5062:	09 f4       	brne	.+2      	; 0x5066 <find_volume+0x78>
    5064:	0c c2       	rjmp	.+1048   	; 0x547e <find_volume+0x490>
    5066:	82 fd       	sbrc	r24, 2
    5068:	0e c2       	rjmp	.+1052   	; 0x5486 <find_volume+0x498>
    506a:	09 c2       	rjmp	.+1042   	; 0x547e <find_volume+0x490>
    506c:	f8 01       	movw	r30, r16
    506e:	10 82       	st	Z, r1
    5070:	e1 82       	std	Z+1, r14	; 0x01
    5072:	8e 2d       	mov	r24, r14
    5074:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <disk_initialize>
    5078:	80 fd       	sbrc	r24, 0
    507a:	03 c2       	rjmp	.+1030   	; 0x5482 <find_volume+0x494>
    507c:	bb 20       	and	r11, r11
    507e:	11 f0       	breq	.+4      	; 0x5084 <find_volume+0x96>
    5080:	82 fd       	sbrc	r24, 2
    5082:	01 c2       	rjmp	.+1026   	; 0x5486 <find_volume+0x498>
    5084:	40 e0       	ldi	r20, 0x00	; 0
    5086:	50 e0       	ldi	r21, 0x00	; 0
    5088:	ba 01       	movw	r22, r20
    508a:	c8 01       	movw	r24, r16
    508c:	74 df       	rcall	.-280    	; 0x4f76 <check_fs>
    508e:	81 30       	cpi	r24, 0x01	; 1
    5090:	09 f0       	breq	.+2      	; 0x5094 <find_volume+0xa6>
    5092:	3f c0       	rjmp	.+126    	; 0x5112 <find_volume+0x124>
    5094:	fe 01       	movw	r30, r28
    5096:	31 96       	adiw	r30, 0x01	; 1
    5098:	20 e0       	ldi	r18, 0x00	; 0
    509a:	30 e0       	ldi	r19, 0x00	; 0
    509c:	c8 01       	movw	r24, r16
    509e:	82 0f       	add	r24, r18
    50a0:	93 1f       	adc	r25, r19
    50a2:	dc 01       	movw	r26, r24
    50a4:	ac 50       	subi	r26, 0x0C	; 12
    50a6:	be 4f       	sbci	r27, 0xFE	; 254
    50a8:	4c 91       	ld	r20, X
    50aa:	44 23       	and	r20, r20
    50ac:	39 f0       	breq	.+14     	; 0x50bc <find_volume+0xce>
    50ae:	14 96       	adiw	r26, 0x04	; 4
    50b0:	8d 91       	ld	r24, X+
    50b2:	9d 91       	ld	r25, X+
    50b4:	0d 90       	ld	r0, X+
    50b6:	bc 91       	ld	r27, X
    50b8:	a0 2d       	mov	r26, r0
    50ba:	03 c0       	rjmp	.+6      	; 0x50c2 <find_volume+0xd4>
    50bc:	80 e0       	ldi	r24, 0x00	; 0
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	dc 01       	movw	r26, r24
    50c2:	81 93       	st	Z+, r24
    50c4:	91 93       	st	Z+, r25
    50c6:	a1 93       	st	Z+, r26
    50c8:	b1 93       	st	Z+, r27
    50ca:	20 5f       	subi	r18, 0xF0	; 240
    50cc:	3f 4f       	sbci	r19, 0xFF	; 255
    50ce:	20 34       	cpi	r18, 0x40	; 64
    50d0:	31 05       	cpc	r19, r1
    50d2:	21 f7       	brne	.-56     	; 0x509c <find_volume+0xae>
    50d4:	6e 01       	movw	r12, r28
    50d6:	f1 e1       	ldi	r31, 0x11	; 17
    50d8:	cf 0e       	add	r12, r31
    50da:	d1 1c       	adc	r13, r1
    50dc:	9e 01       	movw	r18, r28
    50de:	2f 5f       	subi	r18, 0xFF	; 255
    50e0:	3f 4f       	sbci	r19, 0xFF	; 255
    50e2:	79 01       	movw	r14, r18
    50e4:	d7 01       	movw	r26, r14
    50e6:	4d 90       	ld	r4, X+
    50e8:	5d 90       	ld	r5, X+
    50ea:	6d 90       	ld	r6, X+
    50ec:	7d 90       	ld	r7, X+
    50ee:	7d 01       	movw	r14, r26
    50f0:	41 14       	cp	r4, r1
    50f2:	51 04       	cpc	r5, r1
    50f4:	61 04       	cpc	r6, r1
    50f6:	71 04       	cpc	r7, r1
    50f8:	39 f0       	breq	.+14     	; 0x5108 <find_volume+0x11a>
    50fa:	b3 01       	movw	r22, r6
    50fc:	a2 01       	movw	r20, r4
    50fe:	c8 01       	movw	r24, r16
    5100:	3a df       	rcall	.-396    	; 0x4f76 <check_fs>
    5102:	81 11       	cpse	r24, r1
    5104:	02 c0       	rjmp	.+4      	; 0x510a <find_volume+0x11c>
    5106:	0f c0       	rjmp	.+30     	; 0x5126 <find_volume+0x138>
    5108:	82 e0       	ldi	r24, 0x02	; 2
    510a:	ec 14       	cp	r14, r12
    510c:	fd 04       	cpc	r15, r13
    510e:	51 f7       	brne	.-44     	; 0x50e4 <find_volume+0xf6>
    5110:	03 c0       	rjmp	.+6      	; 0x5118 <find_volume+0x12a>
    5112:	41 2c       	mov	r4, r1
    5114:	51 2c       	mov	r5, r1
    5116:	32 01       	movw	r6, r4
    5118:	83 30       	cpi	r24, 0x03	; 3
    511a:	09 f4       	brne	.+2      	; 0x511e <find_volume+0x130>
    511c:	b6 c1       	rjmp	.+876    	; 0x548a <find_volume+0x49c>
    511e:	88 23       	and	r24, r24
    5120:	11 f0       	breq	.+4      	; 0x5126 <find_volume+0x138>
    5122:	8d e0       	ldi	r24, 0x0D	; 13
    5124:	b3 c1       	rjmp	.+870    	; 0x548c <find_volume+0x49e>
    5126:	f8 01       	movw	r30, r16
    5128:	85 ad       	ldd	r24, Z+61	; 0x3d
    512a:	96 ad       	ldd	r25, Z+62	; 0x3e
    512c:	81 15       	cp	r24, r1
    512e:	92 40       	sbci	r25, 0x02	; 2
    5130:	c1 f7       	brne	.-16     	; 0x5122 <find_volume+0x134>
    5132:	f8 01       	movw	r30, r16
    5134:	e8 5b       	subi	r30, 0xB8	; 184
    5136:	ff 4f       	sbci	r31, 0xFF	; 255
    5138:	c0 80       	ld	r12, Z
    513a:	d1 80       	ldd	r13, Z+1	; 0x01
    513c:	e1 2c       	mov	r14, r1
    513e:	f1 2c       	mov	r15, r1
    5140:	c1 14       	cp	r12, r1
    5142:	d1 04       	cpc	r13, r1
    5144:	e1 04       	cpc	r14, r1
    5146:	f1 04       	cpc	r15, r1
    5148:	29 f4       	brne	.+10     	; 0x5154 <find_volume+0x166>
    514a:	3e 96       	adiw	r30, 0x0e	; 14
    514c:	c0 80       	ld	r12, Z
    514e:	d1 80       	ldd	r13, Z+1	; 0x01
    5150:	e2 80       	ldd	r14, Z+2	; 0x02
    5152:	f3 80       	ldd	r15, Z+3	; 0x03
    5154:	d8 01       	movw	r26, r16
    5156:	5a 96       	adiw	r26, 0x1a	; 26
    5158:	cd 92       	st	X+, r12
    515a:	dd 92       	st	X+, r13
    515c:	ed 92       	st	X+, r14
    515e:	fc 92       	st	X, r15
    5160:	5d 97       	sbiw	r26, 0x1d	; 29
    5162:	f8 01       	movw	r30, r16
    5164:	ee 5b       	subi	r30, 0xBE	; 190
    5166:	ff 4f       	sbci	r31, 0xFF	; 255
    5168:	a0 81       	ld	r26, Z
    516a:	f8 01       	movw	r30, r16
    516c:	a3 83       	std	Z+3, r26	; 0x03
    516e:	8f ef       	ldi	r24, 0xFF	; 255
    5170:	8a 0f       	add	r24, r26
    5172:	82 30       	cpi	r24, 0x02	; 2
    5174:	b0 f6       	brcc	.-84     	; 0x5122 <find_volume+0x134>
    5176:	f7 ad       	ldd	r31, Z+63	; 0x3f
    5178:	f9 8b       	std	Y+17, r31	; 0x11
    517a:	2f 2f       	mov	r18, r31
    517c:	f8 01       	movw	r30, r16
    517e:	22 83       	std	Z+2, r18	; 0x02
    5180:	22 23       	and	r18, r18
    5182:	79 f2       	breq	.-98     	; 0x5122 <find_volume+0x134>
    5184:	30 e0       	ldi	r19, 0x00	; 0
    5186:	c9 01       	movw	r24, r18
    5188:	01 97       	sbiw	r24, 0x01	; 1
    518a:	82 23       	and	r24, r18
    518c:	93 23       	and	r25, r19
    518e:	89 2b       	or	r24, r25
    5190:	41 f6       	brne	.-112    	; 0x5122 <find_volume+0x134>
    5192:	f8 01       	movw	r30, r16
    5194:	ed 5b       	subi	r30, 0xBD	; 189
    5196:	ff 4f       	sbci	r31, 0xFF	; 255
    5198:	20 80       	ld	r2, Z
    519a:	31 80       	ldd	r3, Z+1	; 0x01
    519c:	f8 01       	movw	r30, r16
    519e:	20 86       	std	Z+8, r2	; 0x08
    51a0:	31 86       	std	Z+9, r3	; 0x09
    51a2:	c1 01       	movw	r24, r2
    51a4:	8f 70       	andi	r24, 0x0F	; 15
    51a6:	99 27       	eor	r25, r25
    51a8:	89 2b       	or	r24, r25
    51aa:	09 f0       	breq	.+2      	; 0x51ae <find_volume+0x1c0>
    51ac:	ba cf       	rjmp	.-140    	; 0x5122 <find_volume+0x134>
    51ae:	eb 5b       	subi	r30, 0xBB	; 187
    51b0:	ff 4f       	sbci	r31, 0xFF	; 255
    51b2:	80 80       	ld	r8, Z
    51b4:	91 80       	ldd	r9, Z+1	; 0x01
    51b6:	a1 2c       	mov	r10, r1
    51b8:	b1 2c       	mov	r11, r1
    51ba:	81 14       	cp	r8, r1
    51bc:	91 04       	cpc	r9, r1
    51be:	a1 04       	cpc	r10, r1
    51c0:	b1 04       	cpc	r11, r1
    51c2:	29 f4       	brne	.+10     	; 0x51ce <find_volume+0x1e0>
    51c4:	3d 96       	adiw	r30, 0x0d	; 13
    51c6:	80 80       	ld	r8, Z
    51c8:	91 80       	ldd	r9, Z+1	; 0x01
    51ca:	a2 80       	ldd	r10, Z+2	; 0x02
    51cc:	b3 80       	ldd	r11, Z+3	; 0x03
    51ce:	f8 01       	movw	r30, r16
    51d0:	e0 5c       	subi	r30, 0xC0	; 192
    51d2:	ff 4f       	sbci	r31, 0xFF	; 255
    51d4:	01 90       	ld	r0, Z+
    51d6:	f0 81       	ld	r31, Z
    51d8:	e0 2d       	mov	r30, r0
    51da:	30 97       	sbiw	r30, 0x00	; 0
    51dc:	09 f4       	brne	.+2      	; 0x51e0 <find_volume+0x1f2>
    51de:	a1 cf       	rjmp	.-190    	; 0x5122 <find_volume+0x134>
    51e0:	b0 e0       	ldi	r27, 0x00	; 0
    51e2:	a7 01       	movw	r20, r14
    51e4:	96 01       	movw	r18, r12
    51e6:	0e 94 1c 53 	call	0xa638	; 0xa638 <__muluhisi3>
    51ea:	6e 8b       	std	Y+22, r22	; 0x16
    51ec:	7f 8b       	std	Y+23, r23	; 0x17
    51ee:	88 8f       	std	Y+24, r24	; 0x18
    51f0:	99 8f       	std	Y+25, r25	; 0x19
    51f2:	9f 01       	movw	r18, r30
    51f4:	40 e0       	ldi	r20, 0x00	; 0
    51f6:	50 e0       	ldi	r21, 0x00	; 0
    51f8:	2a 8f       	std	Y+26, r18	; 0x1a
    51fa:	3b 8f       	std	Y+27, r19	; 0x1b
    51fc:	4c 8f       	std	Y+28, r20	; 0x1c
    51fe:	5d 8f       	std	Y+29, r21	; 0x1d
    5200:	c1 01       	movw	r24, r2
    5202:	64 e0       	ldi	r22, 0x04	; 4
    5204:	96 95       	lsr	r25
    5206:	87 95       	ror	r24
    5208:	6a 95       	dec	r22
    520a:	e1 f7       	brne	.-8      	; 0x5204 <find_volume+0x216>
    520c:	28 0f       	add	r18, r24
    520e:	39 1f       	adc	r19, r25
    5210:	41 1d       	adc	r20, r1
    5212:	51 1d       	adc	r21, r1
    5214:	8e 89       	ldd	r24, Y+22	; 0x16
    5216:	9f 89       	ldd	r25, Y+23	; 0x17
    5218:	a8 8d       	ldd	r26, Y+24	; 0x18
    521a:	b9 8d       	ldd	r27, Y+25	; 0x19
    521c:	28 0f       	add	r18, r24
    521e:	39 1f       	adc	r19, r25
    5220:	4a 1f       	adc	r20, r26
    5222:	5b 1f       	adc	r21, r27
    5224:	2a 8b       	std	Y+18, r18	; 0x12
    5226:	3b 8b       	std	Y+19, r19	; 0x13
    5228:	4c 8b       	std	Y+20, r20	; 0x14
    522a:	5d 8b       	std	Y+21, r21	; 0x15
    522c:	82 16       	cp	r8, r18
    522e:	93 06       	cpc	r9, r19
    5230:	a4 06       	cpc	r10, r20
    5232:	b5 06       	cpc	r11, r21
    5234:	08 f4       	brcc	.+2      	; 0x5238 <find_volume+0x24a>
    5236:	75 cf       	rjmp	.-278    	; 0x5122 <find_volume+0x134>
    5238:	c5 01       	movw	r24, r10
    523a:	b4 01       	movw	r22, r8
    523c:	62 1b       	sub	r22, r18
    523e:	73 0b       	sbc	r23, r19
    5240:	84 0b       	sbc	r24, r20
    5242:	95 0b       	sbc	r25, r21
    5244:	e9 89       	ldd	r30, Y+17	; 0x11
    5246:	2e 2f       	mov	r18, r30
    5248:	30 e0       	ldi	r19, 0x00	; 0
    524a:	40 e0       	ldi	r20, 0x00	; 0
    524c:	50 e0       	ldi	r21, 0x00	; 0
    524e:	0e 94 e5 52 	call	0xa5ca	; 0xa5ca <__udivmodsi4>
    5252:	21 15       	cp	r18, r1
    5254:	31 05       	cpc	r19, r1
    5256:	41 05       	cpc	r20, r1
    5258:	51 05       	cpc	r21, r1
    525a:	09 f4       	brne	.+2      	; 0x525e <find_volume+0x270>
    525c:	62 cf       	rjmp	.-316    	; 0x5122 <find_volume+0x134>
    525e:	26 3f       	cpi	r18, 0xF6	; 246
    5260:	ff e0       	ldi	r31, 0x0F	; 15
    5262:	3f 07       	cpc	r19, r31
    5264:	41 05       	cpc	r20, r1
    5266:	51 05       	cpc	r21, r1
    5268:	48 f0       	brcs	.+18     	; 0x527c <find_volume+0x28e>
    526a:	26 3f       	cpi	r18, 0xF6	; 246
    526c:	8f ef       	ldi	r24, 0xFF	; 255
    526e:	38 07       	cpc	r19, r24
    5270:	41 05       	cpc	r20, r1
    5272:	51 05       	cpc	r21, r1
    5274:	30 f4       	brcc	.+12     	; 0x5282 <find_volume+0x294>
    5276:	92 e0       	ldi	r25, 0x02	; 2
    5278:	99 8b       	std	Y+17, r25	; 0x11
    527a:	05 c0       	rjmp	.+10     	; 0x5286 <find_volume+0x298>
    527c:	a1 e0       	ldi	r26, 0x01	; 1
    527e:	a9 8b       	std	Y+17, r26	; 0x11
    5280:	02 c0       	rjmp	.+4      	; 0x5286 <find_volume+0x298>
    5282:	b3 e0       	ldi	r27, 0x03	; 3
    5284:	b9 8b       	std	Y+17, r27	; 0x11
    5286:	49 01       	movw	r8, r18
    5288:	5a 01       	movw	r10, r20
    528a:	e2 e0       	ldi	r30, 0x02	; 2
    528c:	8e 0e       	add	r8, r30
    528e:	91 1c       	adc	r9, r1
    5290:	a1 1c       	adc	r10, r1
    5292:	b1 1c       	adc	r11, r1
    5294:	d8 01       	movw	r26, r16
    5296:	56 96       	adiw	r26, 0x16	; 22
    5298:	8d 92       	st	X+, r8
    529a:	9d 92       	st	X+, r9
    529c:	ad 92       	st	X+, r10
    529e:	bc 92       	st	X, r11
    52a0:	59 97       	sbiw	r26, 0x19	; 25
    52a2:	f8 01       	movw	r30, r16
    52a4:	46 8e       	std	Z+30, r4	; 0x1e
    52a6:	57 8e       	std	Z+31, r5	; 0x1f
    52a8:	60 a2       	std	Z+32, r6	; 0x20
    52aa:	71 a2       	std	Z+33, r7	; 0x21
    52ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    52ae:	9b 8d       	ldd	r25, Y+27	; 0x1b
    52b0:	ac 8d       	ldd	r26, Y+28	; 0x1c
    52b2:	bd 8d       	ldd	r27, Y+29	; 0x1d
    52b4:	84 0d       	add	r24, r4
    52b6:	95 1d       	adc	r25, r5
    52b8:	a6 1d       	adc	r26, r6
    52ba:	b7 1d       	adc	r27, r7
    52bc:	82 a3       	std	Z+34, r24	; 0x22
    52be:	93 a3       	std	Z+35, r25	; 0x23
    52c0:	a4 a3       	std	Z+36, r26	; 0x24
    52c2:	b5 a3       	std	Z+37, r27	; 0x25
    52c4:	4a 89       	ldd	r20, Y+18	; 0x12
    52c6:	5b 89       	ldd	r21, Y+19	; 0x13
    52c8:	6c 89       	ldd	r22, Y+20	; 0x14
    52ca:	7d 89       	ldd	r23, Y+21	; 0x15
    52cc:	44 0d       	add	r20, r4
    52ce:	55 1d       	adc	r21, r5
    52d0:	66 1d       	adc	r22, r6
    52d2:	77 1d       	adc	r23, r7
    52d4:	42 a7       	std	Z+42, r20	; 0x2a
    52d6:	53 a7       	std	Z+43, r21	; 0x2b
    52d8:	64 a7       	std	Z+44, r22	; 0x2c
    52da:	75 a7       	std	Z+45, r23	; 0x2d
    52dc:	f9 89       	ldd	r31, Y+17	; 0x11
    52de:	f3 30       	cpi	r31, 0x03	; 3
    52e0:	c9 f4       	brne	.+50     	; 0x5314 <find_volume+0x326>
    52e2:	23 28       	or	r2, r3
    52e4:	09 f0       	breq	.+2      	; 0x52e8 <find_volume+0x2fa>
    52e6:	1d cf       	rjmp	.-454    	; 0x5122 <find_volume+0x134>
    52e8:	f8 01       	movw	r30, r16
    52ea:	e2 5a       	subi	r30, 0xA2	; 162
    52ec:	ff 4f       	sbci	r31, 0xFF	; 255
    52ee:	80 81       	ld	r24, Z
    52f0:	91 81       	ldd	r25, Z+1	; 0x01
    52f2:	a2 81       	ldd	r26, Z+2	; 0x02
    52f4:	b3 81       	ldd	r27, Z+3	; 0x03
    52f6:	f8 01       	movw	r30, r16
    52f8:	86 a3       	std	Z+38, r24	; 0x26
    52fa:	97 a3       	std	Z+39, r25	; 0x27
    52fc:	a0 a7       	std	Z+40, r26	; 0x28
    52fe:	b1 a7       	std	Z+41, r27	; 0x29
    5300:	c5 01       	movw	r24, r10
    5302:	b4 01       	movw	r22, r8
    5304:	52 e0       	ldi	r21, 0x02	; 2
    5306:	66 0f       	add	r22, r22
    5308:	77 1f       	adc	r23, r23
    530a:	88 1f       	adc	r24, r24
    530c:	99 1f       	adc	r25, r25
    530e:	5a 95       	dec	r21
    5310:	d1 f7       	brne	.-12     	; 0x5306 <find_volume+0x318>
    5312:	2d c0       	rjmp	.+90     	; 0x536e <find_volume+0x380>
    5314:	23 28       	or	r2, r3
    5316:	09 f4       	brne	.+2      	; 0x531a <find_volume+0x32c>
    5318:	04 cf       	rjmp	.-504    	; 0x5122 <find_volume+0x134>
    531a:	2e 89       	ldd	r18, Y+22	; 0x16
    531c:	3f 89       	ldd	r19, Y+23	; 0x17
    531e:	48 8d       	ldd	r20, Y+24	; 0x18
    5320:	59 8d       	ldd	r21, Y+25	; 0x19
    5322:	82 0f       	add	r24, r18
    5324:	93 1f       	adc	r25, r19
    5326:	a4 1f       	adc	r26, r20
    5328:	b5 1f       	adc	r27, r21
    532a:	f8 01       	movw	r30, r16
    532c:	86 a3       	std	Z+38, r24	; 0x26
    532e:	97 a3       	std	Z+39, r25	; 0x27
    5330:	a0 a7       	std	Z+40, r26	; 0x28
    5332:	b1 a7       	std	Z+41, r27	; 0x29
    5334:	f9 89       	ldd	r31, Y+17	; 0x11
    5336:	f2 30       	cpi	r31, 0x02	; 2
    5338:	39 f4       	brne	.+14     	; 0x5348 <find_volume+0x35a>
    533a:	c5 01       	movw	r24, r10
    533c:	b4 01       	movw	r22, r8
    533e:	66 0f       	add	r22, r22
    5340:	77 1f       	adc	r23, r23
    5342:	88 1f       	adc	r24, r24
    5344:	99 1f       	adc	r25, r25
    5346:	13 c0       	rjmp	.+38     	; 0x536e <find_volume+0x380>
    5348:	a3 e0       	ldi	r26, 0x03	; 3
    534a:	b0 e0       	ldi	r27, 0x00	; 0
    534c:	a5 01       	movw	r20, r10
    534e:	94 01       	movw	r18, r8
    5350:	0e 94 1c 53 	call	0xa638	; 0xa638 <__muluhisi3>
    5354:	96 95       	lsr	r25
    5356:	87 95       	ror	r24
    5358:	77 95       	ror	r23
    535a:	67 95       	ror	r22
    535c:	21 e0       	ldi	r18, 0x01	; 1
    535e:	82 22       	and	r8, r18
    5360:	99 24       	eor	r9, r9
    5362:	aa 24       	eor	r10, r10
    5364:	bb 24       	eor	r11, r11
    5366:	68 0d       	add	r22, r8
    5368:	79 1d       	adc	r23, r9
    536a:	8a 1d       	adc	r24, r10
    536c:	9b 1d       	adc	r25, r11
    536e:	dc 01       	movw	r26, r24
    5370:	cb 01       	movw	r24, r22
    5372:	81 50       	subi	r24, 0x01	; 1
    5374:	9e 4f       	sbci	r25, 0xFE	; 254
    5376:	af 4f       	sbci	r26, 0xFF	; 255
    5378:	bf 4f       	sbci	r27, 0xFF	; 255
    537a:	29 e0       	ldi	r18, 0x09	; 9
    537c:	b6 95       	lsr	r27
    537e:	a7 95       	ror	r26
    5380:	97 95       	ror	r25
    5382:	87 95       	ror	r24
    5384:	2a 95       	dec	r18
    5386:	d1 f7       	brne	.-12     	; 0x537c <find_volume+0x38e>
    5388:	c8 16       	cp	r12, r24
    538a:	d9 06       	cpc	r13, r25
    538c:	ea 06       	cpc	r14, r26
    538e:	fb 06       	cpc	r15, r27
    5390:	08 f4       	brcc	.+2      	; 0x5394 <find_volume+0x3a6>
    5392:	c7 ce       	rjmp	.-626    	; 0x5122 <find_volume+0x134>
    5394:	8f ef       	ldi	r24, 0xFF	; 255
    5396:	9f ef       	ldi	r25, 0xFF	; 255
    5398:	dc 01       	movw	r26, r24
    539a:	f8 01       	movw	r30, r16
    539c:	86 87       	std	Z+14, r24	; 0x0e
    539e:	97 87       	std	Z+15, r25	; 0x0f
    53a0:	a0 8b       	std	Z+16, r26	; 0x10
    53a2:	b1 8b       	std	Z+17, r27	; 0x11
    53a4:	82 87       	std	Z+10, r24	; 0x0a
    53a6:	93 87       	std	Z+11, r25	; 0x0b
    53a8:	a4 87       	std	Z+12, r26	; 0x0c
    53aa:	b5 87       	std	Z+13, r27	; 0x0d
    53ac:	80 e8       	ldi	r24, 0x80	; 128
    53ae:	85 83       	std	Z+5, r24	; 0x05
    53b0:	f9 89       	ldd	r31, Y+17	; 0x11
    53b2:	f3 30       	cpi	r31, 0x03	; 3
    53b4:	09 f0       	breq	.+2      	; 0x53b8 <find_volume+0x3ca>
    53b6:	48 c0       	rjmp	.+144    	; 0x5448 <find_volume+0x45a>
    53b8:	f8 01       	movw	r30, r16
    53ba:	ee 59       	subi	r30, 0x9E	; 158
    53bc:	ff 4f       	sbci	r31, 0xFF	; 255
    53be:	80 81       	ld	r24, Z
    53c0:	91 81       	ldd	r25, Z+1	; 0x01
    53c2:	01 97       	sbiw	r24, 0x01	; 1
    53c4:	09 f0       	breq	.+2      	; 0x53c8 <find_volume+0x3da>
    53c6:	40 c0       	rjmp	.+128    	; 0x5448 <find_volume+0x45a>
    53c8:	b3 01       	movw	r22, r6
    53ca:	a2 01       	movw	r20, r4
    53cc:	4f 5f       	subi	r20, 0xFF	; 255
    53ce:	5f 4f       	sbci	r21, 0xFF	; 255
    53d0:	6f 4f       	sbci	r22, 0xFF	; 255
    53d2:	7f 4f       	sbci	r23, 0xFF	; 255
    53d4:	c8 01       	movw	r24, r16
    53d6:	92 dd       	rcall	.-1244   	; 0x4efc <move_window>
    53d8:	81 11       	cpse	r24, r1
    53da:	36 c0       	rjmp	.+108    	; 0x5448 <find_volume+0x45a>
    53dc:	d8 01       	movw	r26, r16
    53de:	15 96       	adiw	r26, 0x05	; 5
    53e0:	1c 92       	st	X, r1
    53e2:	f8 01       	movw	r30, r16
    53e4:	e0 5d       	subi	r30, 0xD0	; 208
    53e6:	fd 4f       	sbci	r31, 0xFD	; 253
    53e8:	80 81       	ld	r24, Z
    53ea:	91 81       	ldd	r25, Z+1	; 0x01
    53ec:	85 35       	cpi	r24, 0x55	; 85
    53ee:	9a 4a       	sbci	r25, 0xAA	; 170
    53f0:	59 f5       	brne	.+86     	; 0x5448 <find_volume+0x45a>
    53f2:	f8 01       	movw	r30, r16
    53f4:	82 a9       	ldd	r24, Z+50	; 0x32
    53f6:	93 a9       	ldd	r25, Z+51	; 0x33
    53f8:	a4 a9       	ldd	r26, Z+52	; 0x34
    53fa:	b5 a9       	ldd	r27, Z+53	; 0x35
    53fc:	82 35       	cpi	r24, 0x52	; 82
    53fe:	92 45       	sbci	r25, 0x52	; 82
    5400:	a1 46       	sbci	r26, 0x61	; 97
    5402:	b1 44       	sbci	r27, 0x41	; 65
    5404:	09 f5       	brne	.+66     	; 0x5448 <find_volume+0x45a>
    5406:	f8 01       	movw	r30, r16
    5408:	ea 5e       	subi	r30, 0xEA	; 234
    540a:	fd 4f       	sbci	r31, 0xFD	; 253
    540c:	80 81       	ld	r24, Z
    540e:	91 81       	ldd	r25, Z+1	; 0x01
    5410:	a2 81       	ldd	r26, Z+2	; 0x02
    5412:	b3 81       	ldd	r27, Z+3	; 0x03
    5414:	82 37       	cpi	r24, 0x72	; 114
    5416:	92 47       	sbci	r25, 0x72	; 114
    5418:	a1 44       	sbci	r26, 0x41	; 65
    541a:	b1 46       	sbci	r27, 0x61	; 97
    541c:	a9 f4       	brne	.+42     	; 0x5448 <find_volume+0x45a>
    541e:	34 96       	adiw	r30, 0x04	; 4
    5420:	80 81       	ld	r24, Z
    5422:	91 81       	ldd	r25, Z+1	; 0x01
    5424:	a2 81       	ldd	r26, Z+2	; 0x02
    5426:	b3 81       	ldd	r27, Z+3	; 0x03
    5428:	f8 01       	movw	r30, r16
    542a:	86 87       	std	Z+14, r24	; 0x0e
    542c:	97 87       	std	Z+15, r25	; 0x0f
    542e:	a0 8b       	std	Z+16, r26	; 0x10
    5430:	b1 8b       	std	Z+17, r27	; 0x11
    5432:	e2 5e       	subi	r30, 0xE2	; 226
    5434:	fd 4f       	sbci	r31, 0xFD	; 253
    5436:	80 81       	ld	r24, Z
    5438:	91 81       	ldd	r25, Z+1	; 0x01
    543a:	a2 81       	ldd	r26, Z+2	; 0x02
    543c:	b3 81       	ldd	r27, Z+3	; 0x03
    543e:	f8 01       	movw	r30, r16
    5440:	82 87       	std	Z+10, r24	; 0x0a
    5442:	93 87       	std	Z+11, r25	; 0x0b
    5444:	a4 87       	std	Z+12, r26	; 0x0c
    5446:	b5 87       	std	Z+13, r27	; 0x0d
    5448:	e9 89       	ldd	r30, Y+17	; 0x11
    544a:	d8 01       	movw	r26, r16
    544c:	ec 93       	st	X, r30
    544e:	80 91 12 2b 	lds	r24, 0x2B12
    5452:	90 91 13 2b 	lds	r25, 0x2B13
    5456:	01 96       	adiw	r24, 0x01	; 1
    5458:	80 93 12 2b 	sts	0x2B12, r24
    545c:	90 93 13 2b 	sts	0x2B13, r25
    5460:	16 96       	adiw	r26, 0x06	; 6
    5462:	8d 93       	st	X+, r24
    5464:	9c 93       	st	X, r25
    5466:	17 97       	sbiw	r26, 0x07	; 7
    5468:	52 96       	adiw	r26, 0x12	; 18
    546a:	1d 92       	st	X+, r1
    546c:	1d 92       	st	X+, r1
    546e:	1d 92       	st	X+, r1
    5470:	1c 92       	st	X, r1
    5472:	55 97       	sbiw	r26, 0x15	; 21
    5474:	04 c0       	rjmp	.+8      	; 0x547e <find_volume+0x490>
    5476:	8b e0       	ldi	r24, 0x0B	; 11
    5478:	09 c0       	rjmp	.+18     	; 0x548c <find_volume+0x49e>
    547a:	8c e0       	ldi	r24, 0x0C	; 12
    547c:	07 c0       	rjmp	.+14     	; 0x548c <find_volume+0x49e>
    547e:	80 e0       	ldi	r24, 0x00	; 0
    5480:	05 c0       	rjmp	.+10     	; 0x548c <find_volume+0x49e>
    5482:	83 e0       	ldi	r24, 0x03	; 3
    5484:	03 c0       	rjmp	.+6      	; 0x548c <find_volume+0x49e>
    5486:	8a e0       	ldi	r24, 0x0A	; 10
    5488:	01 c0       	rjmp	.+2      	; 0x548c <find_volume+0x49e>
    548a:	81 e0       	ldi	r24, 0x01	; 1
    548c:	6d 96       	adiw	r28, 0x1d	; 29
    548e:	cd bf       	out	0x3d, r28	; 61
    5490:	de bf       	out	0x3e, r29	; 62
    5492:	df 91       	pop	r29
    5494:	cf 91       	pop	r28
    5496:	1f 91       	pop	r17
    5498:	0f 91       	pop	r16
    549a:	ff 90       	pop	r15
    549c:	ef 90       	pop	r14
    549e:	df 90       	pop	r13
    54a0:	cf 90       	pop	r12
    54a2:	bf 90       	pop	r11
    54a4:	af 90       	pop	r10
    54a6:	9f 90       	pop	r9
    54a8:	8f 90       	pop	r8
    54aa:	7f 90       	pop	r7
    54ac:	6f 90       	pop	r6
    54ae:	5f 90       	pop	r5
    54b0:	4f 90       	pop	r4
    54b2:	3f 90       	pop	r3
    54b4:	2f 90       	pop	r2
    54b6:	08 95       	ret

000054b8 <clust2sect>:
    54b8:	0f 93       	push	r16
    54ba:	1f 93       	push	r17
    54bc:	fc 01       	movw	r30, r24
    54be:	42 50       	subi	r20, 0x02	; 2
    54c0:	51 09       	sbc	r21, r1
    54c2:	61 09       	sbc	r22, r1
    54c4:	71 09       	sbc	r23, r1
    54c6:	06 89       	ldd	r16, Z+22	; 0x16
    54c8:	17 89       	ldd	r17, Z+23	; 0x17
    54ca:	20 8d       	ldd	r18, Z+24	; 0x18
    54cc:	31 8d       	ldd	r19, Z+25	; 0x19
    54ce:	02 50       	subi	r16, 0x02	; 2
    54d0:	11 09       	sbc	r17, r1
    54d2:	21 09       	sbc	r18, r1
    54d4:	31 09       	sbc	r19, r1
    54d6:	40 17       	cp	r20, r16
    54d8:	51 07       	cpc	r21, r17
    54da:	62 07       	cpc	r22, r18
    54dc:	73 07       	cpc	r23, r19
    54de:	78 f4       	brcc	.+30     	; 0x54fe <clust2sect+0x46>
    54e0:	a2 81       	ldd	r26, Z+2	; 0x02
    54e2:	b0 e0       	ldi	r27, 0x00	; 0
    54e4:	9a 01       	movw	r18, r20
    54e6:	ab 01       	movw	r20, r22
    54e8:	0e 94 1c 53 	call	0xa638	; 0xa638 <__muluhisi3>
    54ec:	02 a5       	ldd	r16, Z+42	; 0x2a
    54ee:	13 a5       	ldd	r17, Z+43	; 0x2b
    54f0:	24 a5       	ldd	r18, Z+44	; 0x2c
    54f2:	35 a5       	ldd	r19, Z+45	; 0x2d
    54f4:	60 0f       	add	r22, r16
    54f6:	71 1f       	adc	r23, r17
    54f8:	82 1f       	adc	r24, r18
    54fa:	93 1f       	adc	r25, r19
    54fc:	03 c0       	rjmp	.+6      	; 0x5504 <clust2sect+0x4c>
    54fe:	60 e0       	ldi	r22, 0x00	; 0
    5500:	70 e0       	ldi	r23, 0x00	; 0
    5502:	cb 01       	movw	r24, r22
    5504:	1f 91       	pop	r17
    5506:	0f 91       	pop	r16
    5508:	08 95       	ret

0000550a <get_fat>:
    550a:	af 92       	push	r10
    550c:	bf 92       	push	r11
    550e:	cf 92       	push	r12
    5510:	df 92       	push	r13
    5512:	ef 92       	push	r14
    5514:	ff 92       	push	r15
    5516:	0f 93       	push	r16
    5518:	1f 93       	push	r17
    551a:	cf 93       	push	r28
    551c:	df 93       	push	r29
    551e:	ec 01       	movw	r28, r24
    5520:	6a 01       	movw	r12, r20
    5522:	7b 01       	movw	r14, r22
    5524:	42 30       	cpi	r20, 0x02	; 2
    5526:	51 05       	cpc	r21, r1
    5528:	61 05       	cpc	r22, r1
    552a:	71 05       	cpc	r23, r1
    552c:	08 f4       	brcc	.+2      	; 0x5530 <get_fat+0x26>
    552e:	a2 c0       	rjmp	.+324    	; 0x5674 <get_fat+0x16a>
    5530:	8e 89       	ldd	r24, Y+22	; 0x16
    5532:	9f 89       	ldd	r25, Y+23	; 0x17
    5534:	a8 8d       	ldd	r26, Y+24	; 0x18
    5536:	b9 8d       	ldd	r27, Y+25	; 0x19
    5538:	48 17       	cp	r20, r24
    553a:	59 07       	cpc	r21, r25
    553c:	6a 07       	cpc	r22, r26
    553e:	7b 07       	cpc	r23, r27
    5540:	08 f0       	brcs	.+2      	; 0x5544 <get_fat+0x3a>
    5542:	98 c0       	rjmp	.+304    	; 0x5674 <get_fat+0x16a>
    5544:	88 81       	ld	r24, Y
    5546:	82 30       	cpi	r24, 0x02	; 2
    5548:	09 f4       	brne	.+2      	; 0x554c <get_fat+0x42>
    554a:	49 c0       	rjmp	.+146    	; 0x55de <get_fat+0xd4>
    554c:	83 30       	cpi	r24, 0x03	; 3
    554e:	09 f4       	brne	.+2      	; 0x5552 <get_fat+0x48>
    5550:	68 c0       	rjmp	.+208    	; 0x5622 <get_fat+0x118>
    5552:	81 30       	cpi	r24, 0x01	; 1
    5554:	09 f0       	breq	.+2      	; 0x5558 <get_fat+0x4e>
    5556:	8e c0       	rjmp	.+284    	; 0x5674 <get_fat+0x16a>
    5558:	5a 01       	movw	r10, r20
    555a:	b6 94       	lsr	r11
    555c:	a7 94       	ror	r10
    555e:	a4 0e       	add	r10, r20
    5560:	b5 1e       	adc	r11, r21
    5562:	c5 01       	movw	r24, r10
    5564:	89 2f       	mov	r24, r25
    5566:	99 27       	eor	r25, r25
    5568:	86 95       	lsr	r24
    556a:	4a a1       	ldd	r20, Y+34	; 0x22
    556c:	5b a1       	ldd	r21, Y+35	; 0x23
    556e:	6c a1       	ldd	r22, Y+36	; 0x24
    5570:	7d a1       	ldd	r23, Y+37	; 0x25
    5572:	48 0f       	add	r20, r24
    5574:	59 1f       	adc	r21, r25
    5576:	61 1d       	adc	r22, r1
    5578:	71 1d       	adc	r23, r1
    557a:	ce 01       	movw	r24, r28
    557c:	bf dc       	rcall	.-1666   	; 0x4efc <move_window>
    557e:	88 23       	and	r24, r24
    5580:	21 f0       	breq	.+8      	; 0x558a <get_fat+0x80>
    5582:	6f ef       	ldi	r22, 0xFF	; 255
    5584:	7f ef       	ldi	r23, 0xFF	; 255
    5586:	cb 01       	movw	r24, r22
    5588:	79 c0       	rjmp	.+242    	; 0x567c <get_fat+0x172>
    558a:	85 01       	movw	r16, r10
    558c:	0f 5f       	subi	r16, 0xFF	; 255
    558e:	1f 4f       	sbci	r17, 0xFF	; 255
    5590:	f5 01       	movw	r30, r10
    5592:	f1 70       	andi	r31, 0x01	; 1
    5594:	ec 0f       	add	r30, r28
    5596:	fd 1f       	adc	r31, r29
    5598:	b2 a8       	ldd	r11, Z+50	; 0x32
    559a:	c8 01       	movw	r24, r16
    559c:	89 2f       	mov	r24, r25
    559e:	99 27       	eor	r25, r25
    55a0:	86 95       	lsr	r24
    55a2:	4a a1       	ldd	r20, Y+34	; 0x22
    55a4:	5b a1       	ldd	r21, Y+35	; 0x23
    55a6:	6c a1       	ldd	r22, Y+36	; 0x24
    55a8:	7d a1       	ldd	r23, Y+37	; 0x25
    55aa:	48 0f       	add	r20, r24
    55ac:	59 1f       	adc	r21, r25
    55ae:	61 1d       	adc	r22, r1
    55b0:	71 1d       	adc	r23, r1
    55b2:	ce 01       	movw	r24, r28
    55b4:	a3 dc       	rcall	.-1722   	; 0x4efc <move_window>
    55b6:	81 11       	cpse	r24, r1
    55b8:	e4 cf       	rjmp	.-56     	; 0x5582 <get_fat+0x78>
    55ba:	f8 01       	movw	r30, r16
    55bc:	f1 70       	andi	r31, 0x01	; 1
    55be:	ec 0f       	add	r30, r28
    55c0:	fd 1f       	adc	r31, r29
    55c2:	82 a9       	ldd	r24, Z+50	; 0x32
    55c4:	6b 2d       	mov	r22, r11
    55c6:	70 e0       	ldi	r23, 0x00	; 0
    55c8:	78 2b       	or	r23, r24
    55ca:	c0 fe       	sbrs	r12, 0
    55cc:	06 c0       	rjmp	.+12     	; 0x55da <get_fat+0xd0>
    55ce:	c4 e0       	ldi	r28, 0x04	; 4
    55d0:	76 95       	lsr	r23
    55d2:	67 95       	ror	r22
    55d4:	ca 95       	dec	r28
    55d6:	e1 f7       	brne	.-8      	; 0x55d0 <get_fat+0xc6>
    55d8:	21 c0       	rjmp	.+66     	; 0x561c <get_fat+0x112>
    55da:	7f 70       	andi	r23, 0x0F	; 15
    55dc:	1f c0       	rjmp	.+62     	; 0x561c <get_fat+0x112>
    55de:	45 2f       	mov	r20, r21
    55e0:	56 2f       	mov	r21, r22
    55e2:	67 2f       	mov	r22, r23
    55e4:	77 27       	eor	r23, r23
    55e6:	8a a1       	ldd	r24, Y+34	; 0x22
    55e8:	9b a1       	ldd	r25, Y+35	; 0x23
    55ea:	ac a1       	ldd	r26, Y+36	; 0x24
    55ec:	bd a1       	ldd	r27, Y+37	; 0x25
    55ee:	48 0f       	add	r20, r24
    55f0:	59 1f       	adc	r21, r25
    55f2:	6a 1f       	adc	r22, r26
    55f4:	7b 1f       	adc	r23, r27
    55f6:	ce 01       	movw	r24, r28
    55f8:	81 dc       	rcall	.-1790   	; 0x4efc <move_window>
    55fa:	81 11       	cpse	r24, r1
    55fc:	c2 cf       	rjmp	.-124    	; 0x5582 <get_fat+0x78>
    55fe:	cc 0c       	add	r12, r12
    5600:	dd 1c       	adc	r13, r13
    5602:	ee 1c       	adc	r14, r14
    5604:	ff 1c       	adc	r15, r15
    5606:	e8 94       	clt
    5608:	c0 f8       	bld	r12, 0
    560a:	81 e0       	ldi	r24, 0x01	; 1
    560c:	d8 22       	and	r13, r24
    560e:	ee 24       	eor	r14, r14
    5610:	ff 24       	eor	r15, r15
    5612:	fe 01       	movw	r30, r28
    5614:	ec 0d       	add	r30, r12
    5616:	fd 1d       	adc	r31, r13
    5618:	62 a9       	ldd	r22, Z+50	; 0x32
    561a:	73 a9       	ldd	r23, Z+51	; 0x33
    561c:	80 e0       	ldi	r24, 0x00	; 0
    561e:	90 e0       	ldi	r25, 0x00	; 0
    5620:	2d c0       	rjmp	.+90     	; 0x567c <get_fat+0x172>
    5622:	f7 e0       	ldi	r31, 0x07	; 7
    5624:	76 95       	lsr	r23
    5626:	67 95       	ror	r22
    5628:	57 95       	ror	r21
    562a:	47 95       	ror	r20
    562c:	fa 95       	dec	r31
    562e:	d1 f7       	brne	.-12     	; 0x5624 <get_fat+0x11a>
    5630:	8a a1       	ldd	r24, Y+34	; 0x22
    5632:	9b a1       	ldd	r25, Y+35	; 0x23
    5634:	ac a1       	ldd	r26, Y+36	; 0x24
    5636:	bd a1       	ldd	r27, Y+37	; 0x25
    5638:	48 0f       	add	r20, r24
    563a:	59 1f       	adc	r21, r25
    563c:	6a 1f       	adc	r22, r26
    563e:	7b 1f       	adc	r23, r27
    5640:	ce 01       	movw	r24, r28
    5642:	5c dc       	rcall	.-1864   	; 0x4efc <move_window>
    5644:	81 11       	cpse	r24, r1
    5646:	9d cf       	rjmp	.-198    	; 0x5582 <get_fat+0x78>
    5648:	e2 e0       	ldi	r30, 0x02	; 2
    564a:	cc 0c       	add	r12, r12
    564c:	dd 1c       	adc	r13, r13
    564e:	ee 1c       	adc	r14, r14
    5650:	ff 1c       	adc	r15, r15
    5652:	ea 95       	dec	r30
    5654:	d1 f7       	brne	.-12     	; 0x564a <get_fat+0x140>
    5656:	8c ef       	ldi	r24, 0xFC	; 252
    5658:	c8 22       	and	r12, r24
    565a:	81 e0       	ldi	r24, 0x01	; 1
    565c:	d8 22       	and	r13, r24
    565e:	ee 24       	eor	r14, r14
    5660:	ff 24       	eor	r15, r15
    5662:	fe 01       	movw	r30, r28
    5664:	ec 0d       	add	r30, r12
    5666:	fd 1d       	adc	r31, r13
    5668:	62 a9       	ldd	r22, Z+50	; 0x32
    566a:	73 a9       	ldd	r23, Z+51	; 0x33
    566c:	84 a9       	ldd	r24, Z+52	; 0x34
    566e:	95 a9       	ldd	r25, Z+53	; 0x35
    5670:	9f 70       	andi	r25, 0x0F	; 15
    5672:	04 c0       	rjmp	.+8      	; 0x567c <get_fat+0x172>
    5674:	61 e0       	ldi	r22, 0x01	; 1
    5676:	70 e0       	ldi	r23, 0x00	; 0
    5678:	80 e0       	ldi	r24, 0x00	; 0
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	df 91       	pop	r29
    567e:	cf 91       	pop	r28
    5680:	1f 91       	pop	r17
    5682:	0f 91       	pop	r16
    5684:	ff 90       	pop	r15
    5686:	ef 90       	pop	r14
    5688:	df 90       	pop	r13
    568a:	cf 90       	pop	r12
    568c:	bf 90       	pop	r11
    568e:	af 90       	pop	r10
    5690:	08 95       	ret

00005692 <dir_sdi>:
    5692:	af 92       	push	r10
    5694:	bf 92       	push	r11
    5696:	cf 92       	push	r12
    5698:	df 92       	push	r13
    569a:	ef 92       	push	r14
    569c:	ff 92       	push	r15
    569e:	0f 93       	push	r16
    56a0:	1f 93       	push	r17
    56a2:	cf 93       	push	r28
    56a4:	df 93       	push	r29
    56a6:	ec 01       	movw	r28, r24
    56a8:	8b 01       	movw	r16, r22
    56aa:	6c 83       	std	Y+4, r22	; 0x04
    56ac:	7d 83       	std	Y+5, r23	; 0x05
    56ae:	ce 80       	ldd	r12, Y+6	; 0x06
    56b0:	df 80       	ldd	r13, Y+7	; 0x07
    56b2:	e8 84       	ldd	r14, Y+8	; 0x08
    56b4:	f9 84       	ldd	r15, Y+9	; 0x09
    56b6:	81 e0       	ldi	r24, 0x01	; 1
    56b8:	c8 16       	cp	r12, r24
    56ba:	d1 04       	cpc	r13, r1
    56bc:	e1 04       	cpc	r14, r1
    56be:	f1 04       	cpc	r15, r1
    56c0:	11 f4       	brne	.+4      	; 0x56c6 <dir_sdi+0x34>
    56c2:	82 e0       	ldi	r24, 0x02	; 2
    56c4:	80 c0       	rjmp	.+256    	; 0x57c6 <dir_sdi+0x134>
    56c6:	e8 81       	ld	r30, Y
    56c8:	f9 81       	ldd	r31, Y+1	; 0x01
    56ca:	86 89       	ldd	r24, Z+22	; 0x16
    56cc:	97 89       	ldd	r25, Z+23	; 0x17
    56ce:	a0 8d       	ldd	r26, Z+24	; 0x18
    56d0:	b1 8d       	ldd	r27, Z+25	; 0x19
    56d2:	c8 16       	cp	r12, r24
    56d4:	d9 06       	cpc	r13, r25
    56d6:	ea 06       	cpc	r14, r26
    56d8:	fb 06       	cpc	r15, r27
    56da:	98 f7       	brcc	.-26     	; 0x56c2 <dir_sdi+0x30>
    56dc:	c1 14       	cp	r12, r1
    56de:	d1 04       	cpc	r13, r1
    56e0:	e1 04       	cpc	r14, r1
    56e2:	f1 04       	cpc	r15, r1
    56e4:	b9 f4       	brne	.+46     	; 0x5714 <dir_sdi+0x82>
    56e6:	80 81       	ld	r24, Z
    56e8:	83 30       	cpi	r24, 0x03	; 3
    56ea:	41 f4       	brne	.+16     	; 0x56fc <dir_sdi+0x6a>
    56ec:	86 a1       	ldd	r24, Z+38	; 0x26
    56ee:	97 a1       	ldd	r25, Z+39	; 0x27
    56f0:	a0 a5       	ldd	r26, Z+40	; 0x28
    56f2:	b1 a5       	ldd	r27, Z+41	; 0x29
    56f4:	00 97       	sbiw	r24, 0x00	; 0
    56f6:	a1 05       	cpc	r26, r1
    56f8:	b1 05       	cpc	r27, r1
    56fa:	51 f4       	brne	.+20     	; 0x5710 <dir_sdi+0x7e>
    56fc:	80 85       	ldd	r24, Z+8	; 0x08
    56fe:	91 85       	ldd	r25, Z+9	; 0x09
    5700:	08 17       	cp	r16, r24
    5702:	19 07       	cpc	r17, r25
    5704:	f0 f6       	brcc	.-68     	; 0x56c2 <dir_sdi+0x30>
    5706:	66 a1       	ldd	r22, Z+38	; 0x26
    5708:	77 a1       	ldd	r23, Z+39	; 0x27
    570a:	80 a5       	ldd	r24, Z+40	; 0x28
    570c:	91 a5       	ldd	r25, Z+41	; 0x29
    570e:	2f c0       	rjmp	.+94     	; 0x576e <dir_sdi+0xdc>
    5710:	6c 01       	movw	r12, r24
    5712:	7d 01       	movw	r14, r26
    5714:	a2 80       	ldd	r10, Z+2	; 0x02
    5716:	80 e1       	ldi	r24, 0x10	; 16
    5718:	a8 9e       	mul	r10, r24
    571a:	50 01       	movw	r10, r0
    571c:	11 24       	eor	r1, r1
    571e:	88 81       	ld	r24, Y
    5720:	99 81       	ldd	r25, Y+1	; 0x01
    5722:	b7 01       	movw	r22, r14
    5724:	a6 01       	movw	r20, r12
    5726:	0a 15       	cp	r16, r10
    5728:	1b 05       	cpc	r17, r11
    572a:	00 f1       	brcs	.+64     	; 0x576c <dir_sdi+0xda>
    572c:	ee de       	rcall	.-548    	; 0x550a <get_fat>
    572e:	6b 01       	movw	r12, r22
    5730:	7c 01       	movw	r14, r24
    5732:	8f ef       	ldi	r24, 0xFF	; 255
    5734:	c8 16       	cp	r12, r24
    5736:	d8 06       	cpc	r13, r24
    5738:	e8 06       	cpc	r14, r24
    573a:	f8 06       	cpc	r15, r24
    573c:	09 f4       	brne	.+2      	; 0x5740 <dir_sdi+0xae>
    573e:	42 c0       	rjmp	.+132    	; 0x57c4 <dir_sdi+0x132>
    5740:	82 e0       	ldi	r24, 0x02	; 2
    5742:	c8 16       	cp	r12, r24
    5744:	d1 04       	cpc	r13, r1
    5746:	e1 04       	cpc	r14, r1
    5748:	f1 04       	cpc	r15, r1
    574a:	08 f4       	brcc	.+2      	; 0x574e <dir_sdi+0xbc>
    574c:	ba cf       	rjmp	.-140    	; 0x56c2 <dir_sdi+0x30>
    574e:	e8 81       	ld	r30, Y
    5750:	f9 81       	ldd	r31, Y+1	; 0x01
    5752:	86 89       	ldd	r24, Z+22	; 0x16
    5754:	97 89       	ldd	r25, Z+23	; 0x17
    5756:	a0 8d       	ldd	r26, Z+24	; 0x18
    5758:	b1 8d       	ldd	r27, Z+25	; 0x19
    575a:	c8 16       	cp	r12, r24
    575c:	d9 06       	cpc	r13, r25
    575e:	ea 06       	cpc	r14, r26
    5760:	fb 06       	cpc	r15, r27
    5762:	08 f0       	brcs	.+2      	; 0x5766 <dir_sdi+0xd4>
    5764:	ae cf       	rjmp	.-164    	; 0x56c2 <dir_sdi+0x30>
    5766:	0a 19       	sub	r16, r10
    5768:	1b 09       	sbc	r17, r11
    576a:	d9 cf       	rjmp	.-78     	; 0x571e <dir_sdi+0x8c>
    576c:	a5 de       	rcall	.-694    	; 0x54b8 <clust2sect>
    576e:	ca 86       	std	Y+10, r12	; 0x0a
    5770:	db 86       	std	Y+11, r13	; 0x0b
    5772:	ec 86       	std	Y+12, r14	; 0x0c
    5774:	fd 86       	std	Y+13, r15	; 0x0d
    5776:	61 15       	cp	r22, r1
    5778:	71 05       	cpc	r23, r1
    577a:	81 05       	cpc	r24, r1
    577c:	91 05       	cpc	r25, r1
    577e:	09 f4       	brne	.+2      	; 0x5782 <dir_sdi+0xf0>
    5780:	a0 cf       	rjmp	.-192    	; 0x56c2 <dir_sdi+0x30>
    5782:	98 01       	movw	r18, r16
    5784:	54 e0       	ldi	r21, 0x04	; 4
    5786:	36 95       	lsr	r19
    5788:	27 95       	ror	r18
    578a:	5a 95       	dec	r21
    578c:	e1 f7       	brne	.-8      	; 0x5786 <dir_sdi+0xf4>
    578e:	dc 01       	movw	r26, r24
    5790:	cb 01       	movw	r24, r22
    5792:	82 0f       	add	r24, r18
    5794:	93 1f       	adc	r25, r19
    5796:	a1 1d       	adc	r26, r1
    5798:	b1 1d       	adc	r27, r1
    579a:	8e 87       	std	Y+14, r24	; 0x0e
    579c:	9f 87       	std	Y+15, r25	; 0x0f
    579e:	a8 8b       	std	Y+16, r26	; 0x10
    57a0:	b9 8b       	std	Y+17, r27	; 0x11
    57a2:	0f 70       	andi	r16, 0x0F	; 15
    57a4:	11 27       	eor	r17, r17
    57a6:	65 e0       	ldi	r22, 0x05	; 5
    57a8:	00 0f       	add	r16, r16
    57aa:	11 1f       	adc	r17, r17
    57ac:	6a 95       	dec	r22
    57ae:	e1 f7       	brne	.-8      	; 0x57a8 <dir_sdi+0x116>
    57b0:	0e 5c       	subi	r16, 0xCE	; 206
    57b2:	1f 4f       	sbci	r17, 0xFF	; 255
    57b4:	88 81       	ld	r24, Y
    57b6:	99 81       	ldd	r25, Y+1	; 0x01
    57b8:	80 0f       	add	r24, r16
    57ba:	91 1f       	adc	r25, r17
    57bc:	8a 8b       	std	Y+18, r24	; 0x12
    57be:	9b 8b       	std	Y+19, r25	; 0x13
    57c0:	80 e0       	ldi	r24, 0x00	; 0
    57c2:	01 c0       	rjmp	.+2      	; 0x57c6 <dir_sdi+0x134>
    57c4:	81 e0       	ldi	r24, 0x01	; 1
    57c6:	df 91       	pop	r29
    57c8:	cf 91       	pop	r28
    57ca:	1f 91       	pop	r17
    57cc:	0f 91       	pop	r16
    57ce:	ff 90       	pop	r15
    57d0:	ef 90       	pop	r14
    57d2:	df 90       	pop	r13
    57d4:	cf 90       	pop	r12
    57d6:	bf 90       	pop	r11
    57d8:	af 90       	pop	r10
    57da:	08 95       	ret

000057dc <put_fat>:
    57dc:	4f 92       	push	r4
    57de:	5f 92       	push	r5
    57e0:	6f 92       	push	r6
    57e2:	7f 92       	push	r7
    57e4:	8f 92       	push	r8
    57e6:	9f 92       	push	r9
    57e8:	af 92       	push	r10
    57ea:	bf 92       	push	r11
    57ec:	cf 92       	push	r12
    57ee:	df 92       	push	r13
    57f0:	ef 92       	push	r14
    57f2:	ff 92       	push	r15
    57f4:	0f 93       	push	r16
    57f6:	1f 93       	push	r17
    57f8:	cf 93       	push	r28
    57fa:	df 93       	push	r29
    57fc:	ec 01       	movw	r28, r24
    57fe:	6a 01       	movw	r12, r20
    5800:	7b 01       	movw	r14, r22
    5802:	28 01       	movw	r4, r16
    5804:	39 01       	movw	r6, r18
    5806:	42 30       	cpi	r20, 0x02	; 2
    5808:	51 05       	cpc	r21, r1
    580a:	61 05       	cpc	r22, r1
    580c:	71 05       	cpc	r23, r1
    580e:	08 f4       	brcc	.+2      	; 0x5812 <put_fat+0x36>
    5810:	c5 c0       	rjmp	.+394    	; 0x599c <put_fat+0x1c0>
    5812:	8e 89       	ldd	r24, Y+22	; 0x16
    5814:	9f 89       	ldd	r25, Y+23	; 0x17
    5816:	a8 8d       	ldd	r26, Y+24	; 0x18
    5818:	b9 8d       	ldd	r27, Y+25	; 0x19
    581a:	48 17       	cp	r20, r24
    581c:	59 07       	cpc	r21, r25
    581e:	6a 07       	cpc	r22, r26
    5820:	7b 07       	cpc	r23, r27
    5822:	08 f0       	brcs	.+2      	; 0x5826 <put_fat+0x4a>
    5824:	bb c0       	rjmp	.+374    	; 0x599c <put_fat+0x1c0>
    5826:	88 81       	ld	r24, Y
    5828:	82 30       	cpi	r24, 0x02	; 2
    582a:	09 f4       	brne	.+2      	; 0x582e <put_fat+0x52>
    582c:	5f c0       	rjmp	.+190    	; 0x58ec <put_fat+0x110>
    582e:	83 30       	cpi	r24, 0x03	; 3
    5830:	09 f4       	brne	.+2      	; 0x5834 <put_fat+0x58>
    5832:	7d c0       	rjmp	.+250    	; 0x592e <put_fat+0x152>
    5834:	81 30       	cpi	r24, 0x01	; 1
    5836:	09 f0       	breq	.+2      	; 0x583a <put_fat+0x5e>
    5838:	b1 c0       	rjmp	.+354    	; 0x599c <put_fat+0x1c0>
    583a:	5a 01       	movw	r10, r20
    583c:	b6 94       	lsr	r11
    583e:	a7 94       	ror	r10
    5840:	a4 0e       	add	r10, r20
    5842:	b5 1e       	adc	r11, r21
    5844:	c5 01       	movw	r24, r10
    5846:	89 2f       	mov	r24, r25
    5848:	99 27       	eor	r25, r25
    584a:	86 95       	lsr	r24
    584c:	4a a1       	ldd	r20, Y+34	; 0x22
    584e:	5b a1       	ldd	r21, Y+35	; 0x23
    5850:	6c a1       	ldd	r22, Y+36	; 0x24
    5852:	7d a1       	ldd	r23, Y+37	; 0x25
    5854:	48 0f       	add	r20, r24
    5856:	59 1f       	adc	r21, r25
    5858:	61 1d       	adc	r22, r1
    585a:	71 1d       	adc	r23, r1
    585c:	ce 01       	movw	r24, r28
    585e:	4e db       	rcall	.-2404   	; 0x4efc <move_window>
    5860:	81 11       	cpse	r24, r1
    5862:	9d c0       	rjmp	.+314    	; 0x599e <put_fat+0x1c2>
    5864:	85 01       	movw	r16, r10
    5866:	0f 5f       	subi	r16, 0xFF	; 255
    5868:	1f 4f       	sbci	r17, 0xFF	; 255
    586a:	f5 01       	movw	r30, r10
    586c:	f1 70       	andi	r31, 0x01	; 1
    586e:	ec 0f       	add	r30, r28
    5870:	fd 1f       	adc	r31, r29
    5872:	46 01       	movw	r8, r12
    5874:	57 01       	movw	r10, r14
    5876:	81 e0       	ldi	r24, 0x01	; 1
    5878:	88 22       	and	r8, r24
    587a:	99 24       	eor	r9, r9
    587c:	aa 24       	eor	r10, r10
    587e:	bb 24       	eor	r11, r11
    5880:	c0 fe       	sbrs	r12, 0
    5882:	08 c0       	rjmp	.+16     	; 0x5894 <put_fat+0xb8>
    5884:	22 a9       	ldd	r18, Z+50	; 0x32
    5886:	2f 70       	andi	r18, 0x0F	; 15
    5888:	30 e1       	ldi	r19, 0x10	; 16
    588a:	43 9e       	mul	r4, r19
    588c:	c0 01       	movw	r24, r0
    588e:	11 24       	eor	r1, r1
    5890:	28 2b       	or	r18, r24
    5892:	01 c0       	rjmp	.+2      	; 0x5896 <put_fat+0xba>
    5894:	24 2d       	mov	r18, r4
    5896:	22 ab       	std	Z+50, r18	; 0x32
    5898:	81 e0       	ldi	r24, 0x01	; 1
    589a:	8c 83       	std	Y+4, r24	; 0x04
    589c:	4a a1       	ldd	r20, Y+34	; 0x22
    589e:	5b a1       	ldd	r21, Y+35	; 0x23
    58a0:	6c a1       	ldd	r22, Y+36	; 0x24
    58a2:	7d a1       	ldd	r23, Y+37	; 0x25
    58a4:	c8 01       	movw	r24, r16
    58a6:	89 2f       	mov	r24, r25
    58a8:	99 27       	eor	r25, r25
    58aa:	86 95       	lsr	r24
    58ac:	48 0f       	add	r20, r24
    58ae:	59 1f       	adc	r21, r25
    58b0:	61 1d       	adc	r22, r1
    58b2:	71 1d       	adc	r23, r1
    58b4:	ce 01       	movw	r24, r28
    58b6:	22 db       	rcall	.-2492   	; 0x4efc <move_window>
    58b8:	81 11       	cpse	r24, r1
    58ba:	71 c0       	rjmp	.+226    	; 0x599e <put_fat+0x1c2>
    58bc:	f8 01       	movw	r30, r16
    58be:	f1 70       	andi	r31, 0x01	; 1
    58c0:	ec 0f       	add	r30, r28
    58c2:	fd 1f       	adc	r31, r29
    58c4:	89 28       	or	r8, r9
    58c6:	8a 28       	or	r8, r10
    58c8:	8b 28       	or	r8, r11
    58ca:	49 f0       	breq	.+18     	; 0x58de <put_fat+0x102>
    58cc:	b4 e0       	ldi	r27, 0x04	; 4
    58ce:	76 94       	lsr	r7
    58d0:	67 94       	ror	r6
    58d2:	57 94       	ror	r5
    58d4:	47 94       	ror	r4
    58d6:	ba 95       	dec	r27
    58d8:	d1 f7       	brne	.-12     	; 0x58ce <put_fat+0xf2>
    58da:	94 2d       	mov	r25, r4
    58dc:	05 c0       	rjmp	.+10     	; 0x58e8 <put_fat+0x10c>
    58de:	92 a9       	ldd	r25, Z+50	; 0x32
    58e0:	90 7f       	andi	r25, 0xF0	; 240
    58e2:	25 2d       	mov	r18, r5
    58e4:	2f 70       	andi	r18, 0x0F	; 15
    58e6:	92 2b       	or	r25, r18
    58e8:	92 ab       	std	Z+50, r25	; 0x32
    58ea:	55 c0       	rjmp	.+170    	; 0x5996 <put_fat+0x1ba>
    58ec:	45 2f       	mov	r20, r21
    58ee:	56 2f       	mov	r21, r22
    58f0:	67 2f       	mov	r22, r23
    58f2:	77 27       	eor	r23, r23
    58f4:	8a a1       	ldd	r24, Y+34	; 0x22
    58f6:	9b a1       	ldd	r25, Y+35	; 0x23
    58f8:	ac a1       	ldd	r26, Y+36	; 0x24
    58fa:	bd a1       	ldd	r27, Y+37	; 0x25
    58fc:	48 0f       	add	r20, r24
    58fe:	59 1f       	adc	r21, r25
    5900:	6a 1f       	adc	r22, r26
    5902:	7b 1f       	adc	r23, r27
    5904:	ce 01       	movw	r24, r28
    5906:	fa da       	rcall	.-2572   	; 0x4efc <move_window>
    5908:	81 11       	cpse	r24, r1
    590a:	49 c0       	rjmp	.+146    	; 0x599e <put_fat+0x1c2>
    590c:	cc 0c       	add	r12, r12
    590e:	dd 1c       	adc	r13, r13
    5910:	ee 1c       	adc	r14, r14
    5912:	ff 1c       	adc	r15, r15
    5914:	e8 94       	clt
    5916:	c0 f8       	bld	r12, 0
    5918:	91 e0       	ldi	r25, 0x01	; 1
    591a:	d9 22       	and	r13, r25
    591c:	ee 24       	eor	r14, r14
    591e:	ff 24       	eor	r15, r15
    5920:	f6 01       	movw	r30, r12
    5922:	f2 96       	adiw	r30, 0x32	; 50
    5924:	ec 0f       	add	r30, r28
    5926:	fd 1f       	adc	r31, r29
    5928:	40 82       	st	Z, r4
    592a:	51 82       	std	Z+1, r5	; 0x01
    592c:	34 c0       	rjmp	.+104    	; 0x5996 <put_fat+0x1ba>
    592e:	e7 e0       	ldi	r30, 0x07	; 7
    5930:	76 95       	lsr	r23
    5932:	67 95       	ror	r22
    5934:	57 95       	ror	r21
    5936:	47 95       	ror	r20
    5938:	ea 95       	dec	r30
    593a:	d1 f7       	brne	.-12     	; 0x5930 <put_fat+0x154>
    593c:	8a a1       	ldd	r24, Y+34	; 0x22
    593e:	9b a1       	ldd	r25, Y+35	; 0x23
    5940:	ac a1       	ldd	r26, Y+36	; 0x24
    5942:	bd a1       	ldd	r27, Y+37	; 0x25
    5944:	48 0f       	add	r20, r24
    5946:	59 1f       	adc	r21, r25
    5948:	6a 1f       	adc	r22, r26
    594a:	7b 1f       	adc	r23, r27
    594c:	ce 01       	movw	r24, r28
    594e:	d6 da       	rcall	.-2644   	; 0x4efc <move_window>
    5950:	81 11       	cpse	r24, r1
    5952:	25 c0       	rjmp	.+74     	; 0x599e <put_fat+0x1c2>
    5954:	72 e0       	ldi	r23, 0x02	; 2
    5956:	cc 0c       	add	r12, r12
    5958:	dd 1c       	adc	r13, r13
    595a:	ee 1c       	adc	r14, r14
    595c:	ff 1c       	adc	r15, r15
    595e:	7a 95       	dec	r23
    5960:	d1 f7       	brne	.-12     	; 0x5956 <put_fat+0x17a>
    5962:	3c ef       	ldi	r19, 0xFC	; 252
    5964:	c3 22       	and	r12, r19
    5966:	31 e0       	ldi	r19, 0x01	; 1
    5968:	d3 22       	and	r13, r19
    596a:	ee 24       	eor	r14, r14
    596c:	ff 24       	eor	r15, r15
    596e:	f6 01       	movw	r30, r12
    5970:	f2 96       	adiw	r30, 0x32	; 50
    5972:	ec 0f       	add	r30, r28
    5974:	fd 1f       	adc	r31, r29
    5976:	40 81       	ld	r20, Z
    5978:	51 81       	ldd	r21, Z+1	; 0x01
    597a:	62 81       	ldd	r22, Z+2	; 0x02
    597c:	73 81       	ldd	r23, Z+3	; 0x03
    597e:	44 27       	eor	r20, r20
    5980:	55 27       	eor	r21, r21
    5982:	66 27       	eor	r22, r22
    5984:	70 7f       	andi	r23, 0xF0	; 240
    5986:	44 29       	or	r20, r4
    5988:	55 29       	or	r21, r5
    598a:	66 29       	or	r22, r6
    598c:	77 29       	or	r23, r7
    598e:	40 83       	st	Z, r20
    5990:	51 83       	std	Z+1, r21	; 0x01
    5992:	62 83       	std	Z+2, r22	; 0x02
    5994:	73 83       	std	Z+3, r23	; 0x03
    5996:	91 e0       	ldi	r25, 0x01	; 1
    5998:	9c 83       	std	Y+4, r25	; 0x04
    599a:	01 c0       	rjmp	.+2      	; 0x599e <put_fat+0x1c2>
    599c:	82 e0       	ldi	r24, 0x02	; 2
    599e:	df 91       	pop	r29
    59a0:	cf 91       	pop	r28
    59a2:	1f 91       	pop	r17
    59a4:	0f 91       	pop	r16
    59a6:	ff 90       	pop	r15
    59a8:	ef 90       	pop	r14
    59aa:	df 90       	pop	r13
    59ac:	cf 90       	pop	r12
    59ae:	bf 90       	pop	r11
    59b0:	af 90       	pop	r10
    59b2:	9f 90       	pop	r9
    59b4:	8f 90       	pop	r8
    59b6:	7f 90       	pop	r7
    59b8:	6f 90       	pop	r6
    59ba:	5f 90       	pop	r5
    59bc:	4f 90       	pop	r4
    59be:	08 95       	ret

000059c0 <create_chain>:
    59c0:	4f 92       	push	r4
    59c2:	5f 92       	push	r5
    59c4:	6f 92       	push	r6
    59c6:	7f 92       	push	r7
    59c8:	8f 92       	push	r8
    59ca:	9f 92       	push	r9
    59cc:	af 92       	push	r10
    59ce:	bf 92       	push	r11
    59d0:	cf 92       	push	r12
    59d2:	df 92       	push	r13
    59d4:	ef 92       	push	r14
    59d6:	ff 92       	push	r15
    59d8:	0f 93       	push	r16
    59da:	1f 93       	push	r17
    59dc:	cf 93       	push	r28
    59de:	df 93       	push	r29
    59e0:	ec 01       	movw	r28, r24
    59e2:	2a 01       	movw	r4, r20
    59e4:	3b 01       	movw	r6, r22
    59e6:	41 15       	cp	r20, r1
    59e8:	51 05       	cpc	r21, r1
    59ea:	61 05       	cpc	r22, r1
    59ec:	71 05       	cpc	r23, r1
    59ee:	99 f4       	brne	.+38     	; 0x5a16 <create_chain+0x56>
    59f0:	8a 84       	ldd	r8, Y+10	; 0x0a
    59f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    59f4:	ac 84       	ldd	r10, Y+12	; 0x0c
    59f6:	bd 84       	ldd	r11, Y+13	; 0x0d
    59f8:	81 14       	cp	r8, r1
    59fa:	91 04       	cpc	r9, r1
    59fc:	a1 04       	cpc	r10, r1
    59fe:	b1 04       	cpc	r11, r1
    5a00:	49 f1       	breq	.+82     	; 0x5a54 <create_chain+0x94>
    5a02:	4e 89       	ldd	r20, Y+22	; 0x16
    5a04:	5f 89       	ldd	r21, Y+23	; 0x17
    5a06:	68 8d       	ldd	r22, Y+24	; 0x18
    5a08:	79 8d       	ldd	r23, Y+25	; 0x19
    5a0a:	84 16       	cp	r8, r20
    5a0c:	95 06       	cpc	r9, r21
    5a0e:	a6 06       	cpc	r10, r22
    5a10:	b7 06       	cpc	r11, r23
    5a12:	00 f5       	brcc	.+64     	; 0x5a54 <create_chain+0x94>
    5a14:	23 c0       	rjmp	.+70     	; 0x5a5c <create_chain+0x9c>
    5a16:	79 dd       	rcall	.-1294   	; 0x550a <get_fat>
    5a18:	62 30       	cpi	r22, 0x02	; 2
    5a1a:	71 05       	cpc	r23, r1
    5a1c:	81 05       	cpc	r24, r1
    5a1e:	91 05       	cpc	r25, r1
    5a20:	08 f4       	brcc	.+2      	; 0x5a24 <create_chain+0x64>
    5a22:	92 c0       	rjmp	.+292    	; 0x5b48 <create_chain+0x188>
    5a24:	6f 3f       	cpi	r22, 0xFF	; 255
    5a26:	2f ef       	ldi	r18, 0xFF	; 255
    5a28:	72 07       	cpc	r23, r18
    5a2a:	82 07       	cpc	r24, r18
    5a2c:	92 07       	cpc	r25, r18
    5a2e:	29 f4       	brne	.+10     	; 0x5a3a <create_chain+0x7a>
    5a30:	4f ef       	ldi	r20, 0xFF	; 255
    5a32:	3f ef       	ldi	r19, 0xFF	; 255
    5a34:	2f ef       	ldi	r18, 0xFF	; 255
    5a36:	9f ef       	ldi	r25, 0xFF	; 255
    5a38:	8c c0       	rjmp	.+280    	; 0x5b52 <create_chain+0x192>
    5a3a:	ce 88       	ldd	r12, Y+22	; 0x16
    5a3c:	df 88       	ldd	r13, Y+23	; 0x17
    5a3e:	e8 8c       	ldd	r14, Y+24	; 0x18
    5a40:	f9 8c       	ldd	r15, Y+25	; 0x19
    5a42:	6c 15       	cp	r22, r12
    5a44:	7d 05       	cpc	r23, r13
    5a46:	8e 05       	cpc	r24, r14
    5a48:	9f 05       	cpc	r25, r15
    5a4a:	08 f4       	brcc	.+2      	; 0x5a4e <create_chain+0x8e>
    5a4c:	7f c0       	rjmp	.+254    	; 0x5b4c <create_chain+0x18c>
    5a4e:	53 01       	movw	r10, r6
    5a50:	42 01       	movw	r8, r4
    5a52:	04 c0       	rjmp	.+8      	; 0x5a5c <create_chain+0x9c>
    5a54:	81 2c       	mov	r8, r1
    5a56:	91 2c       	mov	r9, r1
    5a58:	54 01       	movw	r10, r8
    5a5a:	83 94       	inc	r8
    5a5c:	75 01       	movw	r14, r10
    5a5e:	64 01       	movw	r12, r8
    5a60:	8f ef       	ldi	r24, 0xFF	; 255
    5a62:	c8 1a       	sub	r12, r24
    5a64:	d8 0a       	sbc	r13, r24
    5a66:	e8 0a       	sbc	r14, r24
    5a68:	f8 0a       	sbc	r15, r24
    5a6a:	4e 89       	ldd	r20, Y+22	; 0x16
    5a6c:	5f 89       	ldd	r21, Y+23	; 0x17
    5a6e:	68 8d       	ldd	r22, Y+24	; 0x18
    5a70:	79 8d       	ldd	r23, Y+25	; 0x19
    5a72:	c4 16       	cp	r12, r20
    5a74:	d5 06       	cpc	r13, r21
    5a76:	e6 06       	cpc	r14, r22
    5a78:	f7 06       	cpc	r15, r23
    5a7a:	80 f0       	brcs	.+32     	; 0x5a9c <create_chain+0xdc>
    5a7c:	22 e0       	ldi	r18, 0x02	; 2
    5a7e:	82 16       	cp	r8, r18
    5a80:	91 04       	cpc	r9, r1
    5a82:	a1 04       	cpc	r10, r1
    5a84:	b1 04       	cpc	r11, r1
    5a86:	28 f4       	brcc	.+10     	; 0x5a92 <create_chain+0xd2>
    5a88:	40 e0       	ldi	r20, 0x00	; 0
    5a8a:	30 e0       	ldi	r19, 0x00	; 0
    5a8c:	20 e0       	ldi	r18, 0x00	; 0
    5a8e:	90 e0       	ldi	r25, 0x00	; 0
    5a90:	60 c0       	rjmp	.+192    	; 0x5b52 <create_chain+0x192>
    5a92:	52 e0       	ldi	r21, 0x02	; 2
    5a94:	c5 2e       	mov	r12, r21
    5a96:	d1 2c       	mov	r13, r1
    5a98:	e1 2c       	mov	r14, r1
    5a9a:	f1 2c       	mov	r15, r1
    5a9c:	b7 01       	movw	r22, r14
    5a9e:	a6 01       	movw	r20, r12
    5aa0:	ce 01       	movw	r24, r28
    5aa2:	33 dd       	rcall	.-1434   	; 0x550a <get_fat>
    5aa4:	61 15       	cp	r22, r1
    5aa6:	71 05       	cpc	r23, r1
    5aa8:	81 05       	cpc	r24, r1
    5aaa:	91 05       	cpc	r25, r1
    5aac:	99 f0       	breq	.+38     	; 0x5ad4 <create_chain+0x114>
    5aae:	6f 3f       	cpi	r22, 0xFF	; 255
    5ab0:	2f ef       	ldi	r18, 0xFF	; 255
    5ab2:	72 07       	cpc	r23, r18
    5ab4:	82 07       	cpc	r24, r18
    5ab6:	92 07       	cpc	r25, r18
    5ab8:	09 f4       	brne	.+2      	; 0x5abc <create_chain+0xfc>
    5aba:	ba cf       	rjmp	.-140    	; 0x5a30 <create_chain+0x70>
    5abc:	61 30       	cpi	r22, 0x01	; 1
    5abe:	71 05       	cpc	r23, r1
    5ac0:	81 05       	cpc	r24, r1
    5ac2:	91 05       	cpc	r25, r1
    5ac4:	09 f4       	brne	.+2      	; 0x5ac8 <create_chain+0x108>
    5ac6:	40 c0       	rjmp	.+128    	; 0x5b48 <create_chain+0x188>
    5ac8:	c8 14       	cp	r12, r8
    5aca:	d9 04       	cpc	r13, r9
    5acc:	ea 04       	cpc	r14, r10
    5ace:	fb 04       	cpc	r15, r11
    5ad0:	39 f6       	brne	.-114    	; 0x5a60 <create_chain+0xa0>
    5ad2:	da cf       	rjmp	.-76     	; 0x5a88 <create_chain+0xc8>
    5ad4:	0f ef       	ldi	r16, 0xFF	; 255
    5ad6:	1f ef       	ldi	r17, 0xFF	; 255
    5ad8:	2f ef       	ldi	r18, 0xFF	; 255
    5ada:	3f e0       	ldi	r19, 0x0F	; 15
    5adc:	b7 01       	movw	r22, r14
    5ade:	a6 01       	movw	r20, r12
    5ae0:	ce 01       	movw	r24, r28
    5ae2:	7c de       	rcall	.-776    	; 0x57dc <put_fat>
    5ae4:	81 11       	cpse	r24, r1
    5ae6:	2d c0       	rjmp	.+90     	; 0x5b42 <create_chain+0x182>
    5ae8:	41 14       	cp	r4, r1
    5aea:	51 04       	cpc	r5, r1
    5aec:	61 04       	cpc	r6, r1
    5aee:	71 04       	cpc	r7, r1
    5af0:	d1 f4       	brne	.+52     	; 0x5b26 <create_chain+0x166>
    5af2:	ca 86       	std	Y+10, r12	; 0x0a
    5af4:	db 86       	std	Y+11, r13	; 0x0b
    5af6:	ec 86       	std	Y+12, r14	; 0x0c
    5af8:	fd 86       	std	Y+13, r15	; 0x0d
    5afa:	4e 85       	ldd	r20, Y+14	; 0x0e
    5afc:	5f 85       	ldd	r21, Y+15	; 0x0f
    5afe:	68 89       	ldd	r22, Y+16	; 0x10
    5b00:	79 89       	ldd	r23, Y+17	; 0x11
    5b02:	4f 3f       	cpi	r20, 0xFF	; 255
    5b04:	8f ef       	ldi	r24, 0xFF	; 255
    5b06:	58 07       	cpc	r21, r24
    5b08:	68 07       	cpc	r22, r24
    5b0a:	78 07       	cpc	r23, r24
    5b0c:	a9 f0       	breq	.+42     	; 0x5b38 <create_chain+0x178>
    5b0e:	41 50       	subi	r20, 0x01	; 1
    5b10:	51 09       	sbc	r21, r1
    5b12:	61 09       	sbc	r22, r1
    5b14:	71 09       	sbc	r23, r1
    5b16:	4e 87       	std	Y+14, r20	; 0x0e
    5b18:	5f 87       	std	Y+15, r21	; 0x0f
    5b1a:	68 8b       	std	Y+16, r22	; 0x10
    5b1c:	79 8b       	std	Y+17, r23	; 0x11
    5b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    5b20:	81 60       	ori	r24, 0x01	; 1
    5b22:	8d 83       	std	Y+5, r24	; 0x05
    5b24:	09 c0       	rjmp	.+18     	; 0x5b38 <create_chain+0x178>
    5b26:	97 01       	movw	r18, r14
    5b28:	86 01       	movw	r16, r12
    5b2a:	b3 01       	movw	r22, r6
    5b2c:	a2 01       	movw	r20, r4
    5b2e:	ce 01       	movw	r24, r28
    5b30:	55 de       	rcall	.-854    	; 0x57dc <put_fat>
    5b32:	88 23       	and	r24, r24
    5b34:	f1 f2       	breq	.-68     	; 0x5af2 <create_chain+0x132>
    5b36:	05 c0       	rjmp	.+10     	; 0x5b42 <create_chain+0x182>
    5b38:	4c 2d       	mov	r20, r12
    5b3a:	3d 2d       	mov	r19, r13
    5b3c:	2e 2d       	mov	r18, r14
    5b3e:	9f 2d       	mov	r25, r15
    5b40:	08 c0       	rjmp	.+16     	; 0x5b52 <create_chain+0x192>
    5b42:	81 30       	cpi	r24, 0x01	; 1
    5b44:	09 f4       	brne	.+2      	; 0x5b48 <create_chain+0x188>
    5b46:	74 cf       	rjmp	.-280    	; 0x5a30 <create_chain+0x70>
    5b48:	41 e0       	ldi	r20, 0x01	; 1
    5b4a:	9f cf       	rjmp	.-194    	; 0x5a8a <create_chain+0xca>
    5b4c:	46 2f       	mov	r20, r22
    5b4e:	37 2f       	mov	r19, r23
    5b50:	28 2f       	mov	r18, r24
    5b52:	64 2f       	mov	r22, r20
    5b54:	73 2f       	mov	r23, r19
    5b56:	82 2f       	mov	r24, r18
    5b58:	df 91       	pop	r29
    5b5a:	cf 91       	pop	r28
    5b5c:	1f 91       	pop	r17
    5b5e:	0f 91       	pop	r16
    5b60:	ff 90       	pop	r15
    5b62:	ef 90       	pop	r14
    5b64:	df 90       	pop	r13
    5b66:	cf 90       	pop	r12
    5b68:	bf 90       	pop	r11
    5b6a:	af 90       	pop	r10
    5b6c:	9f 90       	pop	r9
    5b6e:	8f 90       	pop	r8
    5b70:	7f 90       	pop	r7
    5b72:	6f 90       	pop	r6
    5b74:	5f 90       	pop	r5
    5b76:	4f 90       	pop	r4
    5b78:	08 95       	ret

00005b7a <dir_next>:
    5b7a:	7f 92       	push	r7
    5b7c:	8f 92       	push	r8
    5b7e:	9f 92       	push	r9
    5b80:	af 92       	push	r10
    5b82:	bf 92       	push	r11
    5b84:	cf 92       	push	r12
    5b86:	df 92       	push	r13
    5b88:	ef 92       	push	r14
    5b8a:	ff 92       	push	r15
    5b8c:	0f 93       	push	r16
    5b8e:	1f 93       	push	r17
    5b90:	cf 93       	push	r28
    5b92:	df 93       	push	r29
    5b94:	ec 01       	movw	r28, r24
    5b96:	6b 01       	movw	r12, r22
    5b98:	0c 81       	ldd	r16, Y+4	; 0x04
    5b9a:	1d 81       	ldd	r17, Y+5	; 0x05
    5b9c:	0f 5f       	subi	r16, 0xFF	; 255
    5b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    5ba0:	01 15       	cp	r16, r1
    5ba2:	11 05       	cpc	r17, r1
    5ba4:	11 f4       	brne	.+4      	; 0x5baa <dir_next+0x30>
    5ba6:	84 e0       	ldi	r24, 0x04	; 4
    5ba8:	d8 c0       	rjmp	.+432    	; 0x5d5a <dir_next+0x1e0>
    5baa:	8e 85       	ldd	r24, Y+14	; 0x0e
    5bac:	9f 85       	ldd	r25, Y+15	; 0x0f
    5bae:	a8 89       	ldd	r26, Y+16	; 0x10
    5bb0:	b9 89       	ldd	r27, Y+17	; 0x11
    5bb2:	00 97       	sbiw	r24, 0x00	; 0
    5bb4:	a1 05       	cpc	r26, r1
    5bb6:	b1 05       	cpc	r27, r1
    5bb8:	b1 f3       	breq	.-20     	; 0x5ba6 <dir_next+0x2c>
    5bba:	78 01       	movw	r14, r16
    5bbc:	2f e0       	ldi	r18, 0x0F	; 15
    5bbe:	e2 22       	and	r14, r18
    5bc0:	ff 24       	eor	r15, r15
    5bc2:	e1 14       	cp	r14, r1
    5bc4:	f1 04       	cpc	r15, r1
    5bc6:	09 f0       	breq	.+2      	; 0x5bca <dir_next+0x50>
    5bc8:	b5 c0       	rjmp	.+362    	; 0x5d34 <dir_next+0x1ba>
    5bca:	01 96       	adiw	r24, 0x01	; 1
    5bcc:	a1 1d       	adc	r26, r1
    5bce:	b1 1d       	adc	r27, r1
    5bd0:	8e 87       	std	Y+14, r24	; 0x0e
    5bd2:	9f 87       	std	Y+15, r25	; 0x0f
    5bd4:	a8 8b       	std	Y+16, r26	; 0x10
    5bd6:	b9 8b       	std	Y+17, r27	; 0x11
    5bd8:	4a 85       	ldd	r20, Y+10	; 0x0a
    5bda:	5b 85       	ldd	r21, Y+11	; 0x0b
    5bdc:	6c 85       	ldd	r22, Y+12	; 0x0c
    5bde:	7d 85       	ldd	r23, Y+13	; 0x0d
    5be0:	88 81       	ld	r24, Y
    5be2:	99 81       	ldd	r25, Y+1	; 0x01
    5be4:	fc 01       	movw	r30, r24
    5be6:	41 15       	cp	r20, r1
    5be8:	51 05       	cpc	r21, r1
    5bea:	61 05       	cpc	r22, r1
    5bec:	71 05       	cpc	r23, r1
    5bee:	31 f4       	brne	.+12     	; 0x5bfc <dir_next+0x82>
    5bf0:	80 85       	ldd	r24, Z+8	; 0x08
    5bf2:	91 85       	ldd	r25, Z+9	; 0x09
    5bf4:	08 17       	cp	r16, r24
    5bf6:	19 07       	cpc	r17, r25
    5bf8:	b0 f6       	brcc	.-84     	; 0x5ba6 <dir_next+0x2c>
    5bfa:	9c c0       	rjmp	.+312    	; 0x5d34 <dir_next+0x1ba>
    5bfc:	22 81       	ldd	r18, Z+2	; 0x02
    5bfe:	30 e0       	ldi	r19, 0x00	; 0
    5c00:	21 50       	subi	r18, 0x01	; 1
    5c02:	31 09       	sbc	r19, r1
    5c04:	f8 01       	movw	r30, r16
    5c06:	a4 e0       	ldi	r26, 0x04	; 4
    5c08:	f6 95       	lsr	r31
    5c0a:	e7 95       	ror	r30
    5c0c:	aa 95       	dec	r26
    5c0e:	e1 f7       	brne	.-8      	; 0x5c08 <dir_next+0x8e>
    5c10:	2e 23       	and	r18, r30
    5c12:	3f 23       	and	r19, r31
    5c14:	23 2b       	or	r18, r19
    5c16:	09 f0       	breq	.+2      	; 0x5c1a <dir_next+0xa0>
    5c18:	8d c0       	rjmp	.+282    	; 0x5d34 <dir_next+0x1ba>
    5c1a:	77 dc       	rcall	.-1810   	; 0x550a <get_fat>
    5c1c:	4b 01       	movw	r8, r22
    5c1e:	5c 01       	movw	r10, r24
    5c20:	62 30       	cpi	r22, 0x02	; 2
    5c22:	71 05       	cpc	r23, r1
    5c24:	81 05       	cpc	r24, r1
    5c26:	91 05       	cpc	r25, r1
    5c28:	10 f4       	brcc	.+4      	; 0x5c2e <dir_next+0xb4>
    5c2a:	82 e0       	ldi	r24, 0x02	; 2
    5c2c:	96 c0       	rjmp	.+300    	; 0x5d5a <dir_next+0x1e0>
    5c2e:	6f 3f       	cpi	r22, 0xFF	; 255
    5c30:	2f ef       	ldi	r18, 0xFF	; 255
    5c32:	72 07       	cpc	r23, r18
    5c34:	82 07       	cpc	r24, r18
    5c36:	92 07       	cpc	r25, r18
    5c38:	11 f4       	brne	.+4      	; 0x5c3e <dir_next+0xc4>
    5c3a:	81 e0       	ldi	r24, 0x01	; 1
    5c3c:	8e c0       	rjmp	.+284    	; 0x5d5a <dir_next+0x1e0>
    5c3e:	88 81       	ld	r24, Y
    5c40:	99 81       	ldd	r25, Y+1	; 0x01
    5c42:	fc 01       	movw	r30, r24
    5c44:	46 89       	ldd	r20, Z+22	; 0x16
    5c46:	57 89       	ldd	r21, Z+23	; 0x17
    5c48:	60 8d       	ldd	r22, Z+24	; 0x18
    5c4a:	71 8d       	ldd	r23, Z+25	; 0x19
    5c4c:	84 16       	cp	r8, r20
    5c4e:	95 06       	cpc	r9, r21
    5c50:	a6 06       	cpc	r10, r22
    5c52:	b7 06       	cpc	r11, r23
    5c54:	08 f4       	brcc	.+2      	; 0x5c58 <dir_next+0xde>
    5c56:	61 c0       	rjmp	.+194    	; 0x5d1a <dir_next+0x1a0>
    5c58:	cd 28       	or	r12, r13
    5c5a:	09 f4       	brne	.+2      	; 0x5c5e <dir_next+0xe4>
    5c5c:	a4 cf       	rjmp	.-184    	; 0x5ba6 <dir_next+0x2c>
    5c5e:	4a 85       	ldd	r20, Y+10	; 0x0a
    5c60:	5b 85       	ldd	r21, Y+11	; 0x0b
    5c62:	6c 85       	ldd	r22, Y+12	; 0x0c
    5c64:	7d 85       	ldd	r23, Y+13	; 0x0d
    5c66:	ac de       	rcall	.-680    	; 0x59c0 <create_chain>
    5c68:	4b 01       	movw	r8, r22
    5c6a:	5c 01       	movw	r10, r24
    5c6c:	61 15       	cp	r22, r1
    5c6e:	71 05       	cpc	r23, r1
    5c70:	81 05       	cpc	r24, r1
    5c72:	91 05       	cpc	r25, r1
    5c74:	09 f4       	brne	.+2      	; 0x5c78 <dir_next+0xfe>
    5c76:	70 c0       	rjmp	.+224    	; 0x5d58 <dir_next+0x1de>
    5c78:	61 30       	cpi	r22, 0x01	; 1
    5c7a:	71 05       	cpc	r23, r1
    5c7c:	81 05       	cpc	r24, r1
    5c7e:	91 05       	cpc	r25, r1
    5c80:	a1 f2       	breq	.-88     	; 0x5c2a <dir_next+0xb0>
    5c82:	6f 3f       	cpi	r22, 0xFF	; 255
    5c84:	2f ef       	ldi	r18, 0xFF	; 255
    5c86:	72 07       	cpc	r23, r18
    5c88:	82 07       	cpc	r24, r18
    5c8a:	92 07       	cpc	r25, r18
    5c8c:	b1 f2       	breq	.-84     	; 0x5c3a <dir_next+0xc0>
    5c8e:	88 81       	ld	r24, Y
    5c90:	99 81       	ldd	r25, Y+1	; 0x01
    5c92:	60 d8       	rcall	.-3904   	; 0x4d54 <sync_window>
    5c94:	81 11       	cpse	r24, r1
    5c96:	d1 cf       	rjmp	.-94     	; 0x5c3a <dir_next+0xc0>
    5c98:	88 81       	ld	r24, Y
    5c9a:	99 81       	ldd	r25, Y+1	; 0x01
    5c9c:	40 e0       	ldi	r20, 0x00	; 0
    5c9e:	52 e0       	ldi	r21, 0x02	; 2
    5ca0:	60 e0       	ldi	r22, 0x00	; 0
    5ca2:	70 e0       	ldi	r23, 0x00	; 0
    5ca4:	c2 96       	adiw	r24, 0x32	; 50
    5ca6:	0a d8       	rcall	.-4076   	; 0x4cbc <mem_set>
    5ca8:	c8 80       	ld	r12, Y
    5caa:	d9 80       	ldd	r13, Y+1	; 0x01
    5cac:	b5 01       	movw	r22, r10
    5cae:	a4 01       	movw	r20, r8
    5cb0:	c6 01       	movw	r24, r12
    5cb2:	02 dc       	rcall	.-2044   	; 0x54b8 <clust2sect>
    5cb4:	f6 01       	movw	r30, r12
    5cb6:	66 a7       	std	Z+46, r22	; 0x2e
    5cb8:	77 a7       	std	Z+47, r23	; 0x2f
    5cba:	80 ab       	std	Z+48, r24	; 0x30
    5cbc:	91 ab       	std	Z+49, r25	; 0x31
    5cbe:	c1 2c       	mov	r12, r1
    5cc0:	d1 2c       	mov	r13, r1
    5cc2:	77 24       	eor	r7, r7
    5cc4:	73 94       	inc	r7
    5cc6:	e8 81       	ld	r30, Y
    5cc8:	f9 81       	ldd	r31, Y+1	; 0x01
    5cca:	82 81       	ldd	r24, Z+2	; 0x02
    5ccc:	90 e0       	ldi	r25, 0x00	; 0
    5cce:	c8 16       	cp	r12, r24
    5cd0:	d9 06       	cpc	r13, r25
    5cd2:	b8 f4       	brcc	.+46     	; 0x5d02 <dir_next+0x188>
    5cd4:	74 82       	std	Z+4, r7	; 0x04
    5cd6:	88 81       	ld	r24, Y
    5cd8:	99 81       	ldd	r25, Y+1	; 0x01
    5cda:	3c d8       	rcall	.-3976   	; 0x4d54 <sync_window>
    5cdc:	81 11       	cpse	r24, r1
    5cde:	ad cf       	rjmp	.-166    	; 0x5c3a <dir_next+0xc0>
    5ce0:	e8 81       	ld	r30, Y
    5ce2:	f9 81       	ldd	r31, Y+1	; 0x01
    5ce4:	86 a5       	ldd	r24, Z+46	; 0x2e
    5ce6:	97 a5       	ldd	r25, Z+47	; 0x2f
    5ce8:	a0 a9       	ldd	r26, Z+48	; 0x30
    5cea:	b1 a9       	ldd	r27, Z+49	; 0x31
    5cec:	01 96       	adiw	r24, 0x01	; 1
    5cee:	a1 1d       	adc	r26, r1
    5cf0:	b1 1d       	adc	r27, r1
    5cf2:	86 a7       	std	Z+46, r24	; 0x2e
    5cf4:	97 a7       	std	Z+47, r25	; 0x2f
    5cf6:	a0 ab       	std	Z+48, r26	; 0x30
    5cf8:	b1 ab       	std	Z+49, r27	; 0x31
    5cfa:	ff ef       	ldi	r31, 0xFF	; 255
    5cfc:	cf 1a       	sub	r12, r31
    5cfe:	df 0a       	sbc	r13, r31
    5d00:	e2 cf       	rjmp	.-60     	; 0x5cc6 <dir_next+0x14c>
    5d02:	86 a5       	ldd	r24, Z+46	; 0x2e
    5d04:	97 a5       	ldd	r25, Z+47	; 0x2f
    5d06:	a0 a9       	ldd	r26, Z+48	; 0x30
    5d08:	b1 a9       	ldd	r27, Z+49	; 0x31
    5d0a:	8c 19       	sub	r24, r12
    5d0c:	9d 09       	sbc	r25, r13
    5d0e:	a1 09       	sbc	r26, r1
    5d10:	b1 09       	sbc	r27, r1
    5d12:	86 a7       	std	Z+46, r24	; 0x2e
    5d14:	97 a7       	std	Z+47, r25	; 0x2f
    5d16:	a0 ab       	std	Z+48, r26	; 0x30
    5d18:	b1 ab       	std	Z+49, r27	; 0x31
    5d1a:	8a 86       	std	Y+10, r8	; 0x0a
    5d1c:	9b 86       	std	Y+11, r9	; 0x0b
    5d1e:	ac 86       	std	Y+12, r10	; 0x0c
    5d20:	bd 86       	std	Y+13, r11	; 0x0d
    5d22:	b5 01       	movw	r22, r10
    5d24:	a4 01       	movw	r20, r8
    5d26:	88 81       	ld	r24, Y
    5d28:	99 81       	ldd	r25, Y+1	; 0x01
    5d2a:	c6 db       	rcall	.-2164   	; 0x54b8 <clust2sect>
    5d2c:	6e 87       	std	Y+14, r22	; 0x0e
    5d2e:	7f 87       	std	Y+15, r23	; 0x0f
    5d30:	88 8b       	std	Y+16, r24	; 0x10
    5d32:	99 8b       	std	Y+17, r25	; 0x11
    5d34:	0c 83       	std	Y+4, r16	; 0x04
    5d36:	1d 83       	std	Y+5, r17	; 0x05
    5d38:	75 e0       	ldi	r23, 0x05	; 5
    5d3a:	ee 0c       	add	r14, r14
    5d3c:	ff 1c       	adc	r15, r15
    5d3e:	7a 95       	dec	r23
    5d40:	e1 f7       	brne	.-8      	; 0x5d3a <dir_next+0x1c0>
    5d42:	22 e3       	ldi	r18, 0x32	; 50
    5d44:	e2 0e       	add	r14, r18
    5d46:	f1 1c       	adc	r15, r1
    5d48:	88 81       	ld	r24, Y
    5d4a:	99 81       	ldd	r25, Y+1	; 0x01
    5d4c:	8e 0d       	add	r24, r14
    5d4e:	9f 1d       	adc	r25, r15
    5d50:	8a 8b       	std	Y+18, r24	; 0x12
    5d52:	9b 8b       	std	Y+19, r25	; 0x13
    5d54:	80 e0       	ldi	r24, 0x00	; 0
    5d56:	01 c0       	rjmp	.+2      	; 0x5d5a <dir_next+0x1e0>
    5d58:	87 e0       	ldi	r24, 0x07	; 7
    5d5a:	df 91       	pop	r29
    5d5c:	cf 91       	pop	r28
    5d5e:	1f 91       	pop	r17
    5d60:	0f 91       	pop	r16
    5d62:	ff 90       	pop	r15
    5d64:	ef 90       	pop	r14
    5d66:	df 90       	pop	r13
    5d68:	cf 90       	pop	r12
    5d6a:	bf 90       	pop	r11
    5d6c:	af 90       	pop	r10
    5d6e:	9f 90       	pop	r9
    5d70:	8f 90       	pop	r8
    5d72:	7f 90       	pop	r7
    5d74:	08 95       	ret

00005d76 <follow_path>:
    5d76:	8f 92       	push	r8
    5d78:	9f 92       	push	r9
    5d7a:	af 92       	push	r10
    5d7c:	bf 92       	push	r11
    5d7e:	cf 92       	push	r12
    5d80:	df 92       	push	r13
    5d82:	ff 92       	push	r15
    5d84:	0f 93       	push	r16
    5d86:	1f 93       	push	r17
    5d88:	cf 93       	push	r28
    5d8a:	df 93       	push	r29
    5d8c:	ec 01       	movw	r28, r24
    5d8e:	8b 01       	movw	r16, r22
    5d90:	fb 01       	movw	r30, r22
    5d92:	80 81       	ld	r24, Z
    5d94:	8f 32       	cpi	r24, 0x2F	; 47
    5d96:	11 f0       	breq	.+4      	; 0x5d9c <follow_path+0x26>
    5d98:	8c 35       	cpi	r24, 0x5C	; 92
    5d9a:	39 f4       	brne	.+14     	; 0x5daa <follow_path+0x34>
    5d9c:	0f 5f       	subi	r16, 0xFF	; 255
    5d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    5da0:	1e 82       	std	Y+6, r1	; 0x06
    5da2:	1f 82       	std	Y+7, r1	; 0x07
    5da4:	18 86       	std	Y+8, r1	; 0x08
    5da6:	19 86       	std	Y+9, r1	; 0x09
    5da8:	0a c0       	rjmp	.+20     	; 0x5dbe <follow_path+0x48>
    5daa:	e8 81       	ld	r30, Y
    5dac:	f9 81       	ldd	r31, Y+1	; 0x01
    5dae:	82 89       	ldd	r24, Z+18	; 0x12
    5db0:	93 89       	ldd	r25, Z+19	; 0x13
    5db2:	a4 89       	ldd	r26, Z+20	; 0x14
    5db4:	b5 89       	ldd	r27, Z+21	; 0x15
    5db6:	8e 83       	std	Y+6, r24	; 0x06
    5db8:	9f 83       	std	Y+7, r25	; 0x07
    5dba:	a8 87       	std	Y+8, r26	; 0x08
    5dbc:	b9 87       	std	Y+9, r27	; 0x09
    5dbe:	f8 01       	movw	r30, r16
    5dc0:	80 81       	ld	r24, Z
    5dc2:	80 32       	cpi	r24, 0x20	; 32
    5dc4:	18 f0       	brcs	.+6      	; 0x5dcc <follow_path+0x56>
    5dc6:	35 e0       	ldi	r19, 0x05	; 5
    5dc8:	f3 2e       	mov	r15, r19
    5dca:	09 c0       	rjmp	.+18     	; 0x5dde <follow_path+0x68>
    5dcc:	60 e0       	ldi	r22, 0x00	; 0
    5dce:	70 e0       	ldi	r23, 0x00	; 0
    5dd0:	ce 01       	movw	r24, r28
    5dd2:	5f dc       	rcall	.-1858   	; 0x5692 <dir_sdi>
    5dd4:	1a 8a       	std	Y+18, r1	; 0x12
    5dd6:	1b 8a       	std	Y+19, r1	; 0x13
    5dd8:	31 c1       	rjmp	.+610    	; 0x603c <follow_path+0x2c6>
    5dda:	8c 35       	cpi	r24, 0x5C	; 92
    5ddc:	41 f4       	brne	.+16     	; 0x5dee <follow_path+0x78>
    5dde:	58 01       	movw	r10, r16
    5de0:	f8 01       	movw	r30, r16
    5de2:	80 81       	ld	r24, Z
    5de4:	0f 5f       	subi	r16, 0xFF	; 255
    5de6:	1f 4f       	sbci	r17, 0xFF	; 255
    5de8:	8f 32       	cpi	r24, 0x2F	; 47
    5dea:	b9 f7       	brne	.-18     	; 0x5dda <follow_path+0x64>
    5dec:	f8 cf       	rjmp	.-16     	; 0x5dde <follow_path+0x68>
    5dee:	cc 88       	ldd	r12, Y+20	; 0x14
    5df0:	dd 88       	ldd	r13, Y+21	; 0x15
    5df2:	4b e0       	ldi	r20, 0x0B	; 11
    5df4:	50 e0       	ldi	r21, 0x00	; 0
    5df6:	60 e2       	ldi	r22, 0x20	; 32
    5df8:	70 e0       	ldi	r23, 0x00	; 0
    5dfa:	c6 01       	movw	r24, r12
    5dfc:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <mem_set>
    5e00:	f5 01       	movw	r30, r10
    5e02:	80 81       	ld	r24, Z
    5e04:	8e 32       	cpi	r24, 0x2E	; 46
    5e06:	41 f0       	breq	.+16     	; 0x5e18 <follow_path+0xa2>
    5e08:	20 e0       	ldi	r18, 0x00	; 0
    5e0a:	30 e0       	ldi	r19, 0x00	; 0
    5e0c:	40 e0       	ldi	r20, 0x00	; 0
    5e0e:	50 e0       	ldi	r21, 0x00	; 0
    5e10:	88 e0       	ldi	r24, 0x08	; 8
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    5e14:	b0 e0       	ldi	r27, 0x00	; 0
    5e16:	32 c0       	rjmp	.+100    	; 0x5e7c <follow_path+0x106>
    5e18:	d5 01       	movw	r26, r10
    5e1a:	f6 01       	movw	r30, r12
    5e1c:	00 e0       	ldi	r16, 0x00	; 0
    5e1e:	10 e0       	ldi	r17, 0x00	; 0
    5e20:	0f 5f       	subi	r16, 0xFF	; 255
    5e22:	1f 4f       	sbci	r17, 0xFF	; 255
    5e24:	8d 91       	ld	r24, X+
    5e26:	8e 32       	cpi	r24, 0x2E	; 46
    5e28:	31 f4       	brne	.+12     	; 0x5e36 <follow_path+0xc0>
    5e2a:	03 30       	cpi	r16, 0x03	; 3
    5e2c:	11 05       	cpc	r17, r1
    5e2e:	09 f4       	brne	.+2      	; 0x5e32 <follow_path+0xbc>
    5e30:	9f c0       	rjmp	.+318    	; 0x5f70 <follow_path+0x1fa>
    5e32:	81 93       	st	Z+, r24
    5e34:	f5 cf       	rjmp	.-22     	; 0x5e20 <follow_path+0xaa>
    5e36:	8f 32       	cpi	r24, 0x2F	; 47
    5e38:	29 f0       	breq	.+10     	; 0x5e44 <follow_path+0xce>
    5e3a:	8c 35       	cpi	r24, 0x5C	; 92
    5e3c:	19 f0       	breq	.+6      	; 0x5e44 <follow_path+0xce>
    5e3e:	81 32       	cpi	r24, 0x21	; 33
    5e40:	08 f0       	brcs	.+2      	; 0x5e44 <follow_path+0xce>
    5e42:	96 c0       	rjmp	.+300    	; 0x5f70 <follow_path+0x1fa>
    5e44:	0a 0d       	add	r16, r10
    5e46:	1b 1d       	adc	r17, r11
    5e48:	81 32       	cpi	r24, 0x21	; 33
    5e4a:	10 f4       	brcc	.+4      	; 0x5e50 <follow_path+0xda>
    5e4c:	84 e2       	ldi	r24, 0x24	; 36
    5e4e:	01 c0       	rjmp	.+2      	; 0x5e52 <follow_path+0xdc>
    5e50:	80 e2       	ldi	r24, 0x20	; 32
    5e52:	f6 01       	movw	r30, r12
    5e54:	83 87       	std	Z+11, r24	; 0x0b
    5e56:	8e c0       	rjmp	.+284    	; 0x5f74 <follow_path+0x1fe>
    5e58:	af 32       	cpi	r26, 0x2F	; 47
    5e5a:	09 f4       	brne	.+2      	; 0x5e5e <follow_path+0xe8>
    5e5c:	5c c0       	rjmp	.+184    	; 0x5f16 <follow_path+0x1a0>
    5e5e:	ac 35       	cpi	r26, 0x5C	; 92
    5e60:	09 f4       	brne	.+2      	; 0x5e64 <follow_path+0xee>
    5e62:	59 c0       	rjmp	.+178    	; 0x5f16 <follow_path+0x1a0>
    5e64:	ae 32       	cpi	r26, 0x2E	; 46
    5e66:	a1 f4       	brne	.+40     	; 0x5e90 <follow_path+0x11a>
    5e68:	08 97       	sbiw	r24, 0x08	; 8
    5e6a:	09 f0       	breq	.+2      	; 0x5e6e <follow_path+0xf8>
    5e6c:	81 c0       	rjmp	.+258    	; 0x5f70 <follow_path+0x1fa>
    5e6e:	bb 0f       	add	r27, r27
    5e70:	bb 0f       	add	r27, r27
    5e72:	28 e0       	ldi	r18, 0x08	; 8
    5e74:	30 e0       	ldi	r19, 0x00	; 0
    5e76:	8b e0       	ldi	r24, 0x0B	; 11
    5e78:	90 e0       	ldi	r25, 0x00	; 0
    5e7a:	a8 01       	movw	r20, r16
    5e7c:	8a 01       	movw	r16, r20
    5e7e:	0f 5f       	subi	r16, 0xFF	; 255
    5e80:	1f 4f       	sbci	r17, 0xFF	; 255
    5e82:	f5 01       	movw	r30, r10
    5e84:	e4 0f       	add	r30, r20
    5e86:	f5 1f       	adc	r31, r21
    5e88:	a0 81       	ld	r26, Z
    5e8a:	a1 32       	cpi	r26, 0x21	; 33
    5e8c:	28 f7       	brcc	.-54     	; 0x5e58 <follow_path+0xe2>
    5e8e:	41 c0       	rjmp	.+130    	; 0x5f12 <follow_path+0x19c>
    5e90:	28 17       	cp	r18, r24
    5e92:	39 07       	cpc	r19, r25
    5e94:	08 f0       	brcs	.+2      	; 0x5e98 <follow_path+0x122>
    5e96:	6c c0       	rjmp	.+216    	; 0x5f70 <follow_path+0x1fa>
    5e98:	a7 fd       	sbrc	r26, 7
    5e9a:	b3 60       	ori	r27, 0x03	; 3
    5e9c:	6f e7       	ldi	r22, 0x7F	; 127
    5e9e:	6a 0f       	add	r22, r26
    5ea0:	6f 31       	cpi	r22, 0x1F	; 31
    5ea2:	20 f0       	brcs	.+8      	; 0x5eac <follow_path+0x136>
    5ea4:	60 e2       	ldi	r22, 0x20	; 32
    5ea6:	6a 0f       	add	r22, r26
    5ea8:	6d 31       	cpi	r22, 0x1D	; 29
    5eaa:	38 f5       	brcc	.+78     	; 0x5efa <follow_path+0x184>
    5eac:	4e 5f       	subi	r20, 0xFE	; 254
    5eae:	5f 4f       	sbci	r21, 0xFF	; 255
    5eb0:	f5 01       	movw	r30, r10
    5eb2:	e0 0f       	add	r30, r16
    5eb4:	f1 1f       	adc	r31, r17
    5eb6:	10 81       	ld	r17, Z
    5eb8:	60 ec       	ldi	r22, 0xC0	; 192
    5eba:	61 0f       	add	r22, r17
    5ebc:	6f 33       	cpi	r22, 0x3F	; 63
    5ebe:	28 f0       	brcs	.+10     	; 0x5eca <follow_path+0x154>
    5ec0:	60 e8       	ldi	r22, 0x80	; 128
    5ec2:	61 0f       	add	r22, r17
    5ec4:	6d 37       	cpi	r22, 0x7D	; 125
    5ec6:	08 f0       	brcs	.+2      	; 0x5eca <follow_path+0x154>
    5ec8:	53 c0       	rjmp	.+166    	; 0x5f70 <follow_path+0x1fa>
    5eca:	bc 01       	movw	r22, r24
    5ecc:	61 50       	subi	r22, 0x01	; 1
    5ece:	71 09       	sbc	r23, r1
    5ed0:	26 17       	cp	r18, r22
    5ed2:	37 07       	cpc	r19, r23
    5ed4:	08 f0       	brcs	.+2      	; 0x5ed8 <follow_path+0x162>
    5ed6:	4c c0       	rjmp	.+152    	; 0x5f70 <follow_path+0x1fa>
    5ed8:	49 01       	movw	r8, r18
    5eda:	ff ef       	ldi	r31, 0xFF	; 255
    5edc:	8f 1a       	sub	r8, r31
    5ede:	9f 0a       	sbc	r9, r31
    5ee0:	b6 01       	movw	r22, r12
    5ee2:	62 0f       	add	r22, r18
    5ee4:	73 1f       	adc	r23, r19
    5ee6:	fb 01       	movw	r30, r22
    5ee8:	a0 83       	st	Z, r26
    5eea:	2e 5f       	subi	r18, 0xFE	; 254
    5eec:	3f 4f       	sbci	r19, 0xFF	; 255
    5eee:	8c 0c       	add	r8, r12
    5ef0:	9d 1c       	adc	r9, r13
    5ef2:	f4 01       	movw	r30, r8
    5ef4:	10 83       	st	Z, r17
    5ef6:	8a 01       	movw	r16, r20
    5ef8:	c0 cf       	rjmp	.-128    	; 0x5e7a <follow_path+0x104>
    5efa:	4a 2f       	mov	r20, r26
    5efc:	50 e0       	ldi	r21, 0x00	; 0
    5efe:	e0 ee       	ldi	r30, 0xE0	; 224
    5f00:	f6 e2       	ldi	r31, 0x26	; 38
    5f02:	61 91       	ld	r22, Z+
    5f04:	66 23       	and	r22, r22
    5f06:	09 f1       	breq	.+66     	; 0x5f4a <follow_path+0x1d4>
    5f08:	70 e0       	ldi	r23, 0x00	; 0
    5f0a:	64 17       	cp	r22, r20
    5f0c:	75 07       	cpc	r23, r21
    5f0e:	c9 f7       	brne	.-14     	; 0x5f02 <follow_path+0x18c>
    5f10:	2f c0       	rjmp	.+94     	; 0x5f70 <follow_path+0x1fa>
    5f12:	44 e0       	ldi	r20, 0x04	; 4
    5f14:	01 c0       	rjmp	.+2      	; 0x5f18 <follow_path+0x1a2>
    5f16:	40 e0       	ldi	r20, 0x00	; 0
    5f18:	23 2b       	or	r18, r19
    5f1a:	51 f1       	breq	.+84     	; 0x5f70 <follow_path+0x1fa>
    5f1c:	f6 01       	movw	r30, r12
    5f1e:	20 81       	ld	r18, Z
    5f20:	25 3e       	cpi	r18, 0xE5	; 229
    5f22:	09 f4       	brne	.+2      	; 0x5f26 <follow_path+0x1b0>
    5f24:	f0 82       	st	Z, r15
    5f26:	08 97       	sbiw	r24, 0x08	; 8
    5f28:	11 f4       	brne	.+4      	; 0x5f2e <follow_path+0x1b8>
    5f2a:	bb 0f       	add	r27, r27
    5f2c:	bb 0f       	add	r27, r27
    5f2e:	8b 2f       	mov	r24, r27
    5f30:	83 70       	andi	r24, 0x03	; 3
    5f32:	81 30       	cpi	r24, 0x01	; 1
    5f34:	09 f4       	brne	.+2      	; 0x5f38 <follow_path+0x1c2>
    5f36:	40 61       	ori	r20, 0x10	; 16
    5f38:	bc 70       	andi	r27, 0x0C	; 12
    5f3a:	b4 30       	cpi	r27, 0x04	; 4
    5f3c:	09 f4       	brne	.+2      	; 0x5f40 <follow_path+0x1ca>
    5f3e:	48 60       	ori	r20, 0x08	; 8
    5f40:	0a 0d       	add	r16, r10
    5f42:	1b 1d       	adc	r17, r11
    5f44:	f6 01       	movw	r30, r12
    5f46:	43 87       	std	Z+11, r20	; 0x0b
    5f48:	15 c0       	rjmp	.+42     	; 0x5f74 <follow_path+0x1fe>
    5f4a:	4f eb       	ldi	r20, 0xBF	; 191
    5f4c:	4a 0f       	add	r20, r26
    5f4e:	4a 31       	cpi	r20, 0x1A	; 26
    5f50:	10 f4       	brcc	.+4      	; 0x5f56 <follow_path+0x1e0>
    5f52:	b2 60       	ori	r27, 0x02	; 2
    5f54:	06 c0       	rjmp	.+12     	; 0x5f62 <follow_path+0x1ec>
    5f56:	4f e9       	ldi	r20, 0x9F	; 159
    5f58:	4a 0f       	add	r20, r26
    5f5a:	4a 31       	cpi	r20, 0x1A	; 26
    5f5c:	10 f4       	brcc	.+4      	; 0x5f62 <follow_path+0x1ec>
    5f5e:	b1 60       	ori	r27, 0x01	; 1
    5f60:	a0 52       	subi	r26, 0x20	; 32
    5f62:	f6 01       	movw	r30, r12
    5f64:	e2 0f       	add	r30, r18
    5f66:	f3 1f       	adc	r31, r19
    5f68:	a0 83       	st	Z, r26
    5f6a:	2f 5f       	subi	r18, 0xFF	; 255
    5f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    5f6e:	85 cf       	rjmp	.-246    	; 0x5e7a <follow_path+0x104>
    5f70:	86 e0       	ldi	r24, 0x06	; 6
    5f72:	64 c0       	rjmp	.+200    	; 0x603c <follow_path+0x2c6>
    5f74:	60 e0       	ldi	r22, 0x00	; 0
    5f76:	70 e0       	ldi	r23, 0x00	; 0
    5f78:	ce 01       	movw	r24, r28
    5f7a:	8b db       	rcall	.-2282   	; 0x5692 <dir_sdi>
    5f7c:	81 11       	cpse	r24, r1
    5f7e:	24 c0       	rjmp	.+72     	; 0x5fc8 <follow_path+0x252>
    5f80:	4e 85       	ldd	r20, Y+14	; 0x0e
    5f82:	5f 85       	ldd	r21, Y+15	; 0x0f
    5f84:	68 89       	ldd	r22, Y+16	; 0x10
    5f86:	79 89       	ldd	r23, Y+17	; 0x11
    5f88:	88 81       	ld	r24, Y
    5f8a:	99 81       	ldd	r25, Y+1	; 0x01
    5f8c:	0e 94 7e 27 	call	0x4efc	; 0x4efc <move_window>
    5f90:	81 11       	cpse	r24, r1
    5f92:	1a c0       	rjmp	.+52     	; 0x5fc8 <follow_path+0x252>
    5f94:	ea 89       	ldd	r30, Y+18	; 0x12
    5f96:	fb 89       	ldd	r31, Y+19	; 0x13
    5f98:	90 81       	ld	r25, Z
    5f9a:	99 23       	and	r25, r25
    5f9c:	a1 f0       	breq	.+40     	; 0x5fc6 <follow_path+0x250>
    5f9e:	93 85       	ldd	r25, Z+11	; 0x0b
    5fa0:	93 fd       	sbrc	r25, 3
    5fa2:	0c c0       	rjmp	.+24     	; 0x5fbc <follow_path+0x246>
    5fa4:	ac 89       	ldd	r26, Y+20	; 0x14
    5fa6:	bd 89       	ldd	r27, Y+21	; 0x15
    5fa8:	9f 01       	movw	r18, r30
    5faa:	25 5f       	subi	r18, 0xF5	; 245
    5fac:	3f 4f       	sbci	r19, 0xFF	; 255
    5fae:	e2 17       	cp	r30, r18
    5fb0:	f3 07       	cpc	r31, r19
    5fb2:	51 f0       	breq	.+20     	; 0x5fc8 <follow_path+0x252>
    5fb4:	41 91       	ld	r20, Z+
    5fb6:	9d 91       	ld	r25, X+
    5fb8:	49 17       	cp	r20, r25
    5fba:	c9 f3       	breq	.-14     	; 0x5fae <follow_path+0x238>
    5fbc:	60 e0       	ldi	r22, 0x00	; 0
    5fbe:	70 e0       	ldi	r23, 0x00	; 0
    5fc0:	ce 01       	movw	r24, r28
    5fc2:	db dd       	rcall	.-1098   	; 0x5b7a <dir_next>
    5fc4:	db cf       	rjmp	.-74     	; 0x5f7c <follow_path+0x206>
    5fc6:	84 e0       	ldi	r24, 0x04	; 4
    5fc8:	ec 89       	ldd	r30, Y+20	; 0x14
    5fca:	fd 89       	ldd	r31, Y+21	; 0x15
    5fcc:	93 85       	ldd	r25, Z+11	; 0x0b
    5fce:	88 23       	and	r24, r24
    5fd0:	a1 f0       	breq	.+40     	; 0x5ffa <follow_path+0x284>
    5fd2:	84 30       	cpi	r24, 0x04	; 4
    5fd4:	99 f5       	brne	.+102    	; 0x603c <follow_path+0x2c6>
    5fd6:	29 2f       	mov	r18, r25
    5fd8:	24 70       	andi	r18, 0x04	; 4
    5fda:	95 ff       	sbrs	r25, 5
    5fdc:	0b c0       	rjmp	.+22     	; 0x5ff4 <follow_path+0x27e>
    5fde:	1e 82       	std	Y+6, r1	; 0x06
    5fe0:	1f 82       	std	Y+7, r1	; 0x07
    5fe2:	18 86       	std	Y+8, r1	; 0x08
    5fe4:	19 86       	std	Y+9, r1	; 0x09
    5fe6:	1a 8a       	std	Y+18, r1	; 0x12
    5fe8:	1b 8a       	std	Y+19, r1	; 0x13
    5fea:	22 23       	and	r18, r18
    5fec:	09 f4       	brne	.+2      	; 0x5ff0 <follow_path+0x27a>
    5fee:	f7 ce       	rjmp	.-530    	; 0x5dde <follow_path+0x68>
    5ff0:	80 e0       	ldi	r24, 0x00	; 0
    5ff2:	24 c0       	rjmp	.+72     	; 0x603c <follow_path+0x2c6>
    5ff4:	22 23       	and	r18, r18
    5ff6:	09 f1       	breq	.+66     	; 0x603a <follow_path+0x2c4>
    5ff8:	21 c0       	rjmp	.+66     	; 0x603c <follow_path+0x2c6>
    5ffa:	92 fd       	sbrc	r25, 2
    5ffc:	f9 cf       	rjmp	.-14     	; 0x5ff0 <follow_path+0x27a>
    5ffe:	ea 89       	ldd	r30, Y+18	; 0x12
    6000:	fb 89       	ldd	r31, Y+19	; 0x13
    6002:	83 85       	ldd	r24, Z+11	; 0x0b
    6004:	84 ff       	sbrs	r24, 4
    6006:	19 c0       	rjmp	.+50     	; 0x603a <follow_path+0x2c4>
    6008:	42 8d       	ldd	r20, Z+26	; 0x1a
    600a:	53 8d       	ldd	r21, Z+27	; 0x1b
    600c:	60 e0       	ldi	r22, 0x00	; 0
    600e:	70 e0       	ldi	r23, 0x00	; 0
    6010:	a8 81       	ld	r26, Y
    6012:	b9 81       	ldd	r27, Y+1	; 0x01
    6014:	8c 91       	ld	r24, X
    6016:	83 30       	cpi	r24, 0x03	; 3
    6018:	59 f4       	brne	.+22     	; 0x6030 <follow_path+0x2ba>
    601a:	84 89       	ldd	r24, Z+20	; 0x14
    601c:	95 89       	ldd	r25, Z+21	; 0x15
    601e:	a0 e0       	ldi	r26, 0x00	; 0
    6020:	b0 e0       	ldi	r27, 0x00	; 0
    6022:	dc 01       	movw	r26, r24
    6024:	99 27       	eor	r25, r25
    6026:	88 27       	eor	r24, r24
    6028:	48 2b       	or	r20, r24
    602a:	59 2b       	or	r21, r25
    602c:	6a 2b       	or	r22, r26
    602e:	7b 2b       	or	r23, r27
    6030:	4e 83       	std	Y+6, r20	; 0x06
    6032:	5f 83       	std	Y+7, r21	; 0x07
    6034:	68 87       	std	Y+8, r22	; 0x08
    6036:	79 87       	std	Y+9, r23	; 0x09
    6038:	d2 ce       	rjmp	.-604    	; 0x5dde <follow_path+0x68>
    603a:	85 e0       	ldi	r24, 0x05	; 5
    603c:	df 91       	pop	r29
    603e:	cf 91       	pop	r28
    6040:	1f 91       	pop	r17
    6042:	0f 91       	pop	r16
    6044:	ff 90       	pop	r15
    6046:	df 90       	pop	r13
    6048:	cf 90       	pop	r12
    604a:	bf 90       	pop	r11
    604c:	af 90       	pop	r10
    604e:	9f 90       	pop	r9
    6050:	8f 90       	pop	r8
    6052:	08 95       	ret

00006054 <dir_alloc.constprop.10>:
    6054:	cf 93       	push	r28
    6056:	df 93       	push	r29
    6058:	ec 01       	movw	r28, r24
    605a:	60 e0       	ldi	r22, 0x00	; 0
    605c:	70 e0       	ldi	r23, 0x00	; 0
    605e:	19 db       	rcall	.-2510   	; 0x5692 <dir_sdi>
    6060:	81 11       	cpse	r24, r1
    6062:	16 c0       	rjmp	.+44     	; 0x6090 <dir_alloc.constprop.10+0x3c>
    6064:	4e 85       	ldd	r20, Y+14	; 0x0e
    6066:	5f 85       	ldd	r21, Y+15	; 0x0f
    6068:	68 89       	ldd	r22, Y+16	; 0x10
    606a:	79 89       	ldd	r23, Y+17	; 0x11
    606c:	88 81       	ld	r24, Y
    606e:	99 81       	ldd	r25, Y+1	; 0x01
    6070:	0e 94 7e 27 	call	0x4efc	; 0x4efc <move_window>
    6074:	81 11       	cpse	r24, r1
    6076:	0c c0       	rjmp	.+24     	; 0x6090 <dir_alloc.constprop.10+0x3c>
    6078:	ea 89       	ldd	r30, Y+18	; 0x12
    607a:	fb 89       	ldd	r31, Y+19	; 0x13
    607c:	90 81       	ld	r25, Z
    607e:	95 3e       	cpi	r25, 0xE5	; 229
    6080:	51 f0       	breq	.+20     	; 0x6096 <dir_alloc.constprop.10+0x42>
    6082:	99 23       	and	r25, r25
    6084:	41 f0       	breq	.+16     	; 0x6096 <dir_alloc.constprop.10+0x42>
    6086:	61 e0       	ldi	r22, 0x01	; 1
    6088:	70 e0       	ldi	r23, 0x00	; 0
    608a:	ce 01       	movw	r24, r28
    608c:	76 dd       	rcall	.-1300   	; 0x5b7a <dir_next>
    608e:	e8 cf       	rjmp	.-48     	; 0x6060 <dir_alloc.constprop.10+0xc>
    6090:	84 30       	cpi	r24, 0x04	; 4
    6092:	09 f4       	brne	.+2      	; 0x6096 <dir_alloc.constprop.10+0x42>
    6094:	87 e0       	ldi	r24, 0x07	; 7
    6096:	df 91       	pop	r29
    6098:	cf 91       	pop	r28
    609a:	08 95       	ret

0000609c <dir_register>:
    609c:	1f 93       	push	r17
    609e:	cf 93       	push	r28
    60a0:	df 93       	push	r29
    60a2:	ec 01       	movw	r28, r24
    60a4:	d7 df       	rcall	.-82     	; 0x6054 <dir_alloc.constprop.10>
    60a6:	18 2f       	mov	r17, r24
    60a8:	81 11       	cpse	r24, r1
    60aa:	1f c0       	rjmp	.+62     	; 0x60ea <dir_register+0x4e>
    60ac:	4e 85       	ldd	r20, Y+14	; 0x0e
    60ae:	5f 85       	ldd	r21, Y+15	; 0x0f
    60b0:	68 89       	ldd	r22, Y+16	; 0x10
    60b2:	79 89       	ldd	r23, Y+17	; 0x11
    60b4:	88 81       	ld	r24, Y
    60b6:	99 81       	ldd	r25, Y+1	; 0x01
    60b8:	0e 94 7e 27 	call	0x4efc	; 0x4efc <move_window>
    60bc:	18 2f       	mov	r17, r24
    60be:	81 11       	cpse	r24, r1
    60c0:	14 c0       	rjmp	.+40     	; 0x60ea <dir_register+0x4e>
    60c2:	40 e2       	ldi	r20, 0x20	; 32
    60c4:	50 e0       	ldi	r21, 0x00	; 0
    60c6:	60 e0       	ldi	r22, 0x00	; 0
    60c8:	70 e0       	ldi	r23, 0x00	; 0
    60ca:	8a 89       	ldd	r24, Y+18	; 0x12
    60cc:	9b 89       	ldd	r25, Y+19	; 0x13
    60ce:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <mem_set>
    60d2:	6c 89       	ldd	r22, Y+20	; 0x14
    60d4:	7d 89       	ldd	r23, Y+21	; 0x15
    60d6:	4b e0       	ldi	r20, 0x0B	; 11
    60d8:	50 e0       	ldi	r21, 0x00	; 0
    60da:	8a 89       	ldd	r24, Y+18	; 0x12
    60dc:	9b 89       	ldd	r25, Y+19	; 0x13
    60de:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <mem_cpy>
    60e2:	e8 81       	ld	r30, Y
    60e4:	f9 81       	ldd	r31, Y+1	; 0x01
    60e6:	81 e0       	ldi	r24, 0x01	; 1
    60e8:	84 83       	std	Z+4, r24	; 0x04
    60ea:	81 2f       	mov	r24, r17
    60ec:	df 91       	pop	r29
    60ee:	cf 91       	pop	r28
    60f0:	1f 91       	pop	r17
    60f2:	08 95       	ret

000060f4 <remove_chain>:
    60f4:	8f 92       	push	r8
    60f6:	9f 92       	push	r9
    60f8:	af 92       	push	r10
    60fa:	bf 92       	push	r11
    60fc:	cf 92       	push	r12
    60fe:	df 92       	push	r13
    6100:	ef 92       	push	r14
    6102:	ff 92       	push	r15
    6104:	0f 93       	push	r16
    6106:	1f 93       	push	r17
    6108:	cf 93       	push	r28
    610a:	df 93       	push	r29
    610c:	ec 01       	movw	r28, r24
    610e:	6a 01       	movw	r12, r20
    6110:	7b 01       	movw	r14, r22
    6112:	42 30       	cpi	r20, 0x02	; 2
    6114:	51 05       	cpc	r21, r1
    6116:	61 05       	cpc	r22, r1
    6118:	71 05       	cpc	r23, r1
    611a:	08 f4       	brcc	.+2      	; 0x611e <remove_chain+0x2a>
    611c:	4f c0       	rjmp	.+158    	; 0x61bc <remove_chain+0xc8>
    611e:	4e 89       	ldd	r20, Y+22	; 0x16
    6120:	5f 89       	ldd	r21, Y+23	; 0x17
    6122:	68 8d       	ldd	r22, Y+24	; 0x18
    6124:	79 8d       	ldd	r23, Y+25	; 0x19
    6126:	c4 16       	cp	r12, r20
    6128:	d5 06       	cpc	r13, r21
    612a:	e6 06       	cpc	r14, r22
    612c:	f7 06       	cpc	r15, r23
    612e:	08 f0       	brcs	.+2      	; 0x6132 <remove_chain+0x3e>
    6130:	45 c0       	rjmp	.+138    	; 0x61bc <remove_chain+0xc8>
    6132:	4e 89       	ldd	r20, Y+22	; 0x16
    6134:	5f 89       	ldd	r21, Y+23	; 0x17
    6136:	68 8d       	ldd	r22, Y+24	; 0x18
    6138:	79 8d       	ldd	r23, Y+25	; 0x19
    613a:	c4 16       	cp	r12, r20
    613c:	d5 06       	cpc	r13, r21
    613e:	e6 06       	cpc	r14, r22
    6140:	f7 06       	cpc	r15, r23
    6142:	58 f4       	brcc	.+22     	; 0x615a <remove_chain+0x66>
    6144:	b7 01       	movw	r22, r14
    6146:	a6 01       	movw	r20, r12
    6148:	ce 01       	movw	r24, r28
    614a:	df d9       	rcall	.-3138   	; 0x550a <get_fat>
    614c:	4b 01       	movw	r8, r22
    614e:	5c 01       	movw	r10, r24
    6150:	61 15       	cp	r22, r1
    6152:	71 05       	cpc	r23, r1
    6154:	81 05       	cpc	r24, r1
    6156:	91 05       	cpc	r25, r1
    6158:	11 f4       	brne	.+4      	; 0x615e <remove_chain+0x6a>
    615a:	80 e0       	ldi	r24, 0x00	; 0
    615c:	30 c0       	rjmp	.+96     	; 0x61be <remove_chain+0xca>
    615e:	81 e0       	ldi	r24, 0x01	; 1
    6160:	88 16       	cp	r8, r24
    6162:	91 04       	cpc	r9, r1
    6164:	a1 04       	cpc	r10, r1
    6166:	b1 04       	cpc	r11, r1
    6168:	49 f1       	breq	.+82     	; 0x61bc <remove_chain+0xc8>
    616a:	8f ef       	ldi	r24, 0xFF	; 255
    616c:	88 16       	cp	r8, r24
    616e:	98 06       	cpc	r9, r24
    6170:	a8 06       	cpc	r10, r24
    6172:	b8 06       	cpc	r11, r24
    6174:	09 f1       	breq	.+66     	; 0x61b8 <remove_chain+0xc4>
    6176:	00 e0       	ldi	r16, 0x00	; 0
    6178:	10 e0       	ldi	r17, 0x00	; 0
    617a:	98 01       	movw	r18, r16
    617c:	b7 01       	movw	r22, r14
    617e:	a6 01       	movw	r20, r12
    6180:	ce 01       	movw	r24, r28
    6182:	2c db       	rcall	.-2472   	; 0x57dc <put_fat>
    6184:	81 11       	cpse	r24, r1
    6186:	1b c0       	rjmp	.+54     	; 0x61be <remove_chain+0xca>
    6188:	4e 85       	ldd	r20, Y+14	; 0x0e
    618a:	5f 85       	ldd	r21, Y+15	; 0x0f
    618c:	68 89       	ldd	r22, Y+16	; 0x10
    618e:	79 89       	ldd	r23, Y+17	; 0x11
    6190:	4f 3f       	cpi	r20, 0xFF	; 255
    6192:	8f ef       	ldi	r24, 0xFF	; 255
    6194:	58 07       	cpc	r21, r24
    6196:	68 07       	cpc	r22, r24
    6198:	78 07       	cpc	r23, r24
    619a:	59 f0       	breq	.+22     	; 0x61b2 <remove_chain+0xbe>
    619c:	4f 5f       	subi	r20, 0xFF	; 255
    619e:	5f 4f       	sbci	r21, 0xFF	; 255
    61a0:	6f 4f       	sbci	r22, 0xFF	; 255
    61a2:	7f 4f       	sbci	r23, 0xFF	; 255
    61a4:	4e 87       	std	Y+14, r20	; 0x0e
    61a6:	5f 87       	std	Y+15, r21	; 0x0f
    61a8:	68 8b       	std	Y+16, r22	; 0x10
    61aa:	79 8b       	std	Y+17, r23	; 0x11
    61ac:	8d 81       	ldd	r24, Y+5	; 0x05
    61ae:	81 60       	ori	r24, 0x01	; 1
    61b0:	8d 83       	std	Y+5, r24	; 0x05
    61b2:	75 01       	movw	r14, r10
    61b4:	64 01       	movw	r12, r8
    61b6:	bd cf       	rjmp	.-134    	; 0x6132 <remove_chain+0x3e>
    61b8:	81 e0       	ldi	r24, 0x01	; 1
    61ba:	01 c0       	rjmp	.+2      	; 0x61be <remove_chain+0xca>
    61bc:	82 e0       	ldi	r24, 0x02	; 2
    61be:	df 91       	pop	r29
    61c0:	cf 91       	pop	r28
    61c2:	1f 91       	pop	r17
    61c4:	0f 91       	pop	r16
    61c6:	ff 90       	pop	r15
    61c8:	ef 90       	pop	r14
    61ca:	df 90       	pop	r13
    61cc:	cf 90       	pop	r12
    61ce:	bf 90       	pop	r11
    61d0:	af 90       	pop	r10
    61d2:	9f 90       	pop	r9
    61d4:	8f 90       	pop	r8
    61d6:	08 95       	ret

000061d8 <f_mount>:
    61d8:	cf 93       	push	r28
    61da:	df 93       	push	r29
    61dc:	cd b7       	in	r28, 0x3d	; 61
    61de:	de b7       	in	r29, 0x3e	; 62
    61e0:	27 97       	sbiw	r28, 0x07	; 7
    61e2:	cd bf       	out	0x3d, r28	; 61
    61e4:	de bf       	out	0x3e, r29	; 62
    61e6:	8b 83       	std	Y+3, r24	; 0x03
    61e8:	9c 83       	std	Y+4, r25	; 0x04
    61ea:	6d 83       	std	Y+5, r22	; 0x05
    61ec:	7e 83       	std	Y+6, r23	; 0x06
    61ee:	69 83       	std	Y+1, r22	; 0x01
    61f0:	7a 83       	std	Y+2, r23	; 0x02
    61f2:	ce 01       	movw	r24, r28
    61f4:	01 96       	adiw	r24, 0x01	; 1
    61f6:	4f 83       	std	Y+7, r20	; 0x07
    61f8:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <get_ldnumber>
    61fc:	4f 81       	ldd	r20, Y+7	; 0x07
    61fe:	97 fd       	sbrc	r25, 7
    6200:	22 c0       	rjmp	.+68     	; 0x6246 <f_mount+0x6e>
    6202:	88 0f       	add	r24, r24
    6204:	99 1f       	adc	r25, r25
    6206:	fc 01       	movw	r30, r24
    6208:	ec 5e       	subi	r30, 0xEC	; 236
    620a:	f4 4d       	sbci	r31, 0xD4	; 212
    620c:	01 90       	ld	r0, Z+
    620e:	f0 81       	ld	r31, Z
    6210:	e0 2d       	mov	r30, r0
    6212:	30 97       	sbiw	r30, 0x00	; 0
    6214:	09 f0       	breq	.+2      	; 0x6218 <f_mount+0x40>
    6216:	10 82       	st	Z, r1
    6218:	eb 81       	ldd	r30, Y+3	; 0x03
    621a:	fc 81       	ldd	r31, Y+4	; 0x04
    621c:	30 97       	sbiw	r30, 0x00	; 0
    621e:	09 f0       	breq	.+2      	; 0x6222 <f_mount+0x4a>
    6220:	10 82       	st	Z, r1
    6222:	dc 01       	movw	r26, r24
    6224:	ac 5e       	subi	r26, 0xEC	; 236
    6226:	b4 4d       	sbci	r27, 0xD4	; 212
    6228:	ed 93       	st	X+, r30
    622a:	fc 93       	st	X, r31
    622c:	ef 2b       	or	r30, r31
    622e:	69 f0       	breq	.+26     	; 0x624a <f_mount+0x72>
    6230:	41 30       	cpi	r20, 0x01	; 1
    6232:	59 f4       	brne	.+22     	; 0x624a <f_mount+0x72>
    6234:	40 e0       	ldi	r20, 0x00	; 0
    6236:	be 01       	movw	r22, r28
    6238:	6b 5f       	subi	r22, 0xFB	; 251
    623a:	7f 4f       	sbci	r23, 0xFF	; 255
    623c:	ce 01       	movw	r24, r28
    623e:	03 96       	adiw	r24, 0x03	; 3
    6240:	0e 94 f7 27 	call	0x4fee	; 0x4fee <find_volume>
    6244:	03 c0       	rjmp	.+6      	; 0x624c <f_mount+0x74>
    6246:	8b e0       	ldi	r24, 0x0B	; 11
    6248:	01 c0       	rjmp	.+2      	; 0x624c <f_mount+0x74>
    624a:	80 e0       	ldi	r24, 0x00	; 0
    624c:	27 96       	adiw	r28, 0x07	; 7
    624e:	cd bf       	out	0x3d, r28	; 61
    6250:	de bf       	out	0x3e, r29	; 62
    6252:	df 91       	pop	r29
    6254:	cf 91       	pop	r28
    6256:	08 95       	ret

00006258 <f_open>:
    6258:	4f 92       	push	r4
    625a:	5f 92       	push	r5
    625c:	6f 92       	push	r6
    625e:	7f 92       	push	r7
    6260:	9f 92       	push	r9
    6262:	af 92       	push	r10
    6264:	bf 92       	push	r11
    6266:	cf 92       	push	r12
    6268:	df 92       	push	r13
    626a:	ef 92       	push	r14
    626c:	ff 92       	push	r15
    626e:	0f 93       	push	r16
    6270:	1f 93       	push	r17
    6272:	cf 93       	push	r28
    6274:	df 93       	push	r29
    6276:	cd b7       	in	r28, 0x3d	; 61
    6278:	de b7       	in	r29, 0x3e	; 62
    627a:	a4 97       	sbiw	r28, 0x24	; 36
    627c:	cd bf       	out	0x3d, r28	; 61
    627e:	de bf       	out	0x3e, r29	; 62
    6280:	5c 01       	movw	r10, r24
    6282:	6b a3       	std	Y+35, r22	; 0x23
    6284:	7c a3       	std	Y+36, r23	; 0x24
    6286:	f4 2e       	mov	r15, r20
    6288:	00 97       	sbiw	r24, 0x00	; 0
    628a:	09 f4       	brne	.+2      	; 0x628e <f_open+0x36>
    628c:	f3 c0       	rjmp	.+486    	; 0x6474 <f_open+0x21c>
    628e:	dc 01       	movw	r26, r24
    6290:	1d 92       	st	X+, r1
    6292:	1c 92       	st	X, r1
    6294:	4e 71       	andi	r20, 0x1E	; 30
    6296:	be 01       	movw	r22, r28
    6298:	6d 5d       	subi	r22, 0xDD	; 221
    629a:	7f 4f       	sbci	r23, 0xFF	; 255
    629c:	ce 01       	movw	r24, r28
    629e:	01 96       	adiw	r24, 0x01	; 1
    62a0:	0e 94 f7 27 	call	0x4fee	; 0x4fee <find_volume>
    62a4:	81 11       	cpse	r24, r1
    62a6:	ed c0       	rjmp	.+474    	; 0x6482 <f_open+0x22a>
    62a8:	ce 01       	movw	r24, r28
    62aa:	47 96       	adiw	r24, 0x17	; 23
    62ac:	8d 8b       	std	Y+21, r24	; 0x15
    62ae:	9e 8b       	std	Y+22, r25	; 0x16
    62b0:	6b a1       	ldd	r22, Y+35	; 0x23
    62b2:	7c a1       	ldd	r23, Y+36	; 0x24
    62b4:	46 97       	sbiw	r24, 0x16	; 22
    62b6:	5f dd       	rcall	.-1346   	; 0x5d76 <follow_path>
    62b8:	0b 89       	ldd	r16, Y+19	; 0x13
    62ba:	1c 89       	ldd	r17, Y+20	; 0x14
    62bc:	81 11       	cpse	r24, r1
    62be:	04 c0       	rjmp	.+8      	; 0x62c8 <f_open+0x70>
    62c0:	01 15       	cp	r16, r1
    62c2:	11 05       	cpc	r17, r1
    62c4:	09 f4       	brne	.+2      	; 0x62c8 <f_open+0x70>
    62c6:	86 e0       	ldi	r24, 0x06	; 6
    62c8:	bf 2d       	mov	r27, r15
    62ca:	bf 71       	andi	r27, 0x1F	; 31
    62cc:	9b 2e       	mov	r9, r27
    62ce:	9f 2d       	mov	r25, r15
    62d0:	9c 71       	andi	r25, 0x1C	; 28
    62d2:	09 f4       	brne	.+2      	; 0x62d6 <f_open+0x7e>
    62d4:	71 c0       	rjmp	.+226    	; 0x63b8 <f_open+0x160>
    62d6:	88 23       	and	r24, r24
    62d8:	69 f0       	breq	.+26     	; 0x62f4 <f_open+0x9c>
    62da:	84 30       	cpi	r24, 0x04	; 4
    62dc:	19 f4       	brne	.+6      	; 0x62e4 <f_open+0x8c>
    62de:	ce 01       	movw	r24, r28
    62e0:	01 96       	adiw	r24, 0x01	; 1
    62e2:	dc de       	rcall	.-584    	; 0x609c <dir_register>
    62e4:	e9 2d       	mov	r30, r9
    62e6:	e8 60       	ori	r30, 0x08	; 8
    62e8:	9e 2e       	mov	r9, r30
    62ea:	0b 89       	ldd	r16, Y+19	; 0x13
    62ec:	1c 89       	ldd	r17, Y+20	; 0x14
    62ee:	88 23       	and	r24, r24
    62f0:	49 f0       	breq	.+18     	; 0x6304 <f_open+0xac>
    62f2:	c7 c0       	rjmp	.+398    	; 0x6482 <f_open+0x22a>
    62f4:	d8 01       	movw	r26, r16
    62f6:	1b 96       	adiw	r26, 0x0b	; 11
    62f8:	8c 91       	ld	r24, X
    62fa:	81 71       	andi	r24, 0x11	; 17
    62fc:	09 f0       	breq	.+2      	; 0x6300 <f_open+0xa8>
    62fe:	c0 c0       	rjmp	.+384    	; 0x6480 <f_open+0x228>
    6300:	f2 fc       	sbrc	r15, 2
    6302:	ba c0       	rjmp	.+372    	; 0x6478 <f_open+0x220>
    6304:	93 fe       	sbrs	r9, 3
    6306:	63 c0       	rjmp	.+198    	; 0x63ce <f_open+0x176>
    6308:	80 e0       	ldi	r24, 0x00	; 0
    630a:	90 e0       	ldi	r25, 0x00	; 0
    630c:	a1 e2       	ldi	r26, 0x21	; 33
    630e:	b6 e4       	ldi	r27, 0x46	; 70
    6310:	f8 01       	movw	r30, r16
    6312:	86 87       	std	Z+14, r24	; 0x0e
    6314:	97 87       	std	Z+15, r25	; 0x0f
    6316:	a0 8b       	std	Z+16, r26	; 0x10
    6318:	b1 8b       	std	Z+17, r27	; 0x11
    631a:	86 8b       	std	Z+22, r24	; 0x16
    631c:	97 8b       	std	Z+23, r25	; 0x17
    631e:	a0 8f       	std	Z+24, r26	; 0x18
    6320:	b1 8f       	std	Z+25, r27	; 0x19
    6322:	13 86       	std	Z+11, r1	; 0x0b
    6324:	d8 01       	movw	r26, r16
    6326:	14 8e       	std	Z+28, r1	; 0x1c
    6328:	15 8e       	std	Z+29, r1	; 0x1d
    632a:	16 8e       	std	Z+30, r1	; 0x1e
    632c:	17 8e       	std	Z+31, r1	; 0x1f
    632e:	e9 81       	ldd	r30, Y+1	; 0x01
    6330:	fa 81       	ldd	r31, Y+2	; 0x02
    6332:	5a 96       	adiw	r26, 0x1a	; 26
    6334:	cd 90       	ld	r12, X+
    6336:	dc 90       	ld	r13, X
    6338:	5b 97       	sbiw	r26, 0x1b	; 27
    633a:	e1 2c       	mov	r14, r1
    633c:	f1 2c       	mov	r15, r1
    633e:	80 81       	ld	r24, Z
    6340:	83 30       	cpi	r24, 0x03	; 3
    6342:	69 f4       	brne	.+26     	; 0x635e <f_open+0x106>
    6344:	54 96       	adiw	r26, 0x14	; 20
    6346:	4d 91       	ld	r20, X+
    6348:	5c 91       	ld	r21, X
    634a:	55 97       	sbiw	r26, 0x15	; 21
    634c:	60 e0       	ldi	r22, 0x00	; 0
    634e:	70 e0       	ldi	r23, 0x00	; 0
    6350:	ba 01       	movw	r22, r20
    6352:	55 27       	eor	r21, r21
    6354:	44 27       	eor	r20, r20
    6356:	c4 2a       	or	r12, r20
    6358:	d5 2a       	or	r13, r21
    635a:	e6 2a       	or	r14, r22
    635c:	f7 2a       	or	r15, r23
    635e:	d8 01       	movw	r26, r16
    6360:	5a 96       	adiw	r26, 0x1a	; 26
    6362:	1d 92       	st	X+, r1
    6364:	1c 92       	st	X, r1
    6366:	5b 97       	sbiw	r26, 0x1b	; 27
    6368:	54 96       	adiw	r26, 0x14	; 20
    636a:	1d 92       	st	X+, r1
    636c:	1c 92       	st	X, r1
    636e:	55 97       	sbiw	r26, 0x15	; 21
    6370:	81 e0       	ldi	r24, 0x01	; 1
    6372:	84 83       	std	Z+4, r24	; 0x04
    6374:	c1 14       	cp	r12, r1
    6376:	d1 04       	cpc	r13, r1
    6378:	e1 04       	cpc	r14, r1
    637a:	f1 04       	cpc	r15, r1
    637c:	41 f1       	breq	.+80     	; 0x63ce <f_open+0x176>
    637e:	46 a4       	ldd	r4, Z+46	; 0x2e
    6380:	57 a4       	ldd	r5, Z+47	; 0x2f
    6382:	60 a8       	ldd	r6, Z+48	; 0x30
    6384:	71 a8       	ldd	r7, Z+49	; 0x31
    6386:	b7 01       	movw	r22, r14
    6388:	a6 01       	movw	r20, r12
    638a:	cf 01       	movw	r24, r30
    638c:	b3 de       	rcall	.-666    	; 0x60f4 <remove_chain>
    638e:	81 11       	cpse	r24, r1
    6390:	78 c0       	rjmp	.+240    	; 0x6482 <f_open+0x22a>
    6392:	89 81       	ldd	r24, Y+1	; 0x01
    6394:	9a 81       	ldd	r25, Y+2	; 0x02
    6396:	b1 e0       	ldi	r27, 0x01	; 1
    6398:	cb 1a       	sub	r12, r27
    639a:	d1 08       	sbc	r13, r1
    639c:	e1 08       	sbc	r14, r1
    639e:	f1 08       	sbc	r15, r1
    63a0:	fc 01       	movw	r30, r24
    63a2:	c2 86       	std	Z+10, r12	; 0x0a
    63a4:	d3 86       	std	Z+11, r13	; 0x0b
    63a6:	e4 86       	std	Z+12, r14	; 0x0c
    63a8:	f5 86       	std	Z+13, r15	; 0x0d
    63aa:	b3 01       	movw	r22, r6
    63ac:	a2 01       	movw	r20, r4
    63ae:	0e 94 7e 27 	call	0x4efc	; 0x4efc <move_window>
    63b2:	88 23       	and	r24, r24
    63b4:	61 f0       	breq	.+24     	; 0x63ce <f_open+0x176>
    63b6:	65 c0       	rjmp	.+202    	; 0x6482 <f_open+0x22a>
    63b8:	81 11       	cpse	r24, r1
    63ba:	63 c0       	rjmp	.+198    	; 0x6482 <f_open+0x22a>
    63bc:	d8 01       	movw	r26, r16
    63be:	1b 96       	adiw	r26, 0x0b	; 11
    63c0:	8c 91       	ld	r24, X
    63c2:	84 fd       	sbrc	r24, 4
    63c4:	5b c0       	rjmp	.+182    	; 0x647c <f_open+0x224>
    63c6:	f1 fe       	sbrs	r15, 1
    63c8:	02 c0       	rjmp	.+4      	; 0x63ce <f_open+0x176>
    63ca:	80 fd       	sbrc	r24, 0
    63cc:	59 c0       	rjmp	.+178    	; 0x6480 <f_open+0x228>
    63ce:	93 fe       	sbrs	r9, 3
    63d0:	03 c0       	rjmp	.+6      	; 0x63d8 <f_open+0x180>
    63d2:	b9 2d       	mov	r27, r9
    63d4:	b0 62       	ori	r27, 0x20	; 32
    63d6:	9b 2e       	mov	r9, r27
    63d8:	e9 80       	ldd	r14, Y+1	; 0x01
    63da:	fa 80       	ldd	r15, Y+2	; 0x02
    63dc:	f7 01       	movw	r30, r14
    63de:	46 a5       	ldd	r20, Z+46	; 0x2e
    63e0:	57 a5       	ldd	r21, Z+47	; 0x2f
    63e2:	60 a9       	ldd	r22, Z+48	; 0x30
    63e4:	71 a9       	ldd	r23, Z+49	; 0x31
    63e6:	d5 01       	movw	r26, r10
    63e8:	5a 96       	adiw	r26, 0x1a	; 26
    63ea:	4d 93       	st	X+, r20
    63ec:	5d 93       	st	X+, r21
    63ee:	6d 93       	st	X+, r22
    63f0:	7c 93       	st	X, r23
    63f2:	5d 97       	sbiw	r26, 0x1d	; 29
    63f4:	5e 96       	adiw	r26, 0x1e	; 30
    63f6:	0d 93       	st	X+, r16
    63f8:	1c 93       	st	X, r17
    63fa:	5f 97       	sbiw	r26, 0x1f	; 31
    63fc:	14 96       	adiw	r26, 0x04	; 4
    63fe:	9c 92       	st	X, r9
    6400:	14 97       	sbiw	r26, 0x04	; 4
    6402:	15 96       	adiw	r26, 0x05	; 5
    6404:	1c 92       	st	X, r1
    6406:	f8 01       	movw	r30, r16
    6408:	82 8d       	ldd	r24, Z+26	; 0x1a
    640a:	93 8d       	ldd	r25, Z+27	; 0x1b
    640c:	a0 e0       	ldi	r26, 0x00	; 0
    640e:	b0 e0       	ldi	r27, 0x00	; 0
    6410:	f7 01       	movw	r30, r14
    6412:	20 81       	ld	r18, Z
    6414:	23 30       	cpi	r18, 0x03	; 3
    6416:	61 f4       	brne	.+24     	; 0x6430 <f_open+0x1d8>
    6418:	f8 01       	movw	r30, r16
    641a:	44 89       	ldd	r20, Z+20	; 0x14
    641c:	55 89       	ldd	r21, Z+21	; 0x15
    641e:	60 e0       	ldi	r22, 0x00	; 0
    6420:	70 e0       	ldi	r23, 0x00	; 0
    6422:	ba 01       	movw	r22, r20
    6424:	55 27       	eor	r21, r21
    6426:	44 27       	eor	r20, r20
    6428:	84 2b       	or	r24, r20
    642a:	95 2b       	or	r25, r21
    642c:	a6 2b       	or	r26, r22
    642e:	b7 2b       	or	r27, r23
    6430:	f5 01       	movw	r30, r10
    6432:	86 87       	std	Z+14, r24	; 0x0e
    6434:	97 87       	std	Z+15, r25	; 0x0f
    6436:	a0 8b       	std	Z+16, r26	; 0x10
    6438:	b1 8b       	std	Z+17, r27	; 0x11
    643a:	f8 01       	movw	r30, r16
    643c:	84 8d       	ldd	r24, Z+28	; 0x1c
    643e:	95 8d       	ldd	r25, Z+29	; 0x1d
    6440:	a6 8d       	ldd	r26, Z+30	; 0x1e
    6442:	b7 8d       	ldd	r27, Z+31	; 0x1f
    6444:	f5 01       	movw	r30, r10
    6446:	82 87       	std	Z+10, r24	; 0x0a
    6448:	93 87       	std	Z+11, r25	; 0x0b
    644a:	a4 87       	std	Z+12, r26	; 0x0c
    644c:	b5 87       	std	Z+13, r27	; 0x0d
    644e:	16 82       	std	Z+6, r1	; 0x06
    6450:	17 82       	std	Z+7, r1	; 0x07
    6452:	10 86       	std	Z+8, r1	; 0x08
    6454:	11 86       	std	Z+9, r1	; 0x09
    6456:	16 8a       	std	Z+22, r1	; 0x16
    6458:	17 8a       	std	Z+23, r1	; 0x17
    645a:	10 8e       	std	Z+24, r1	; 0x18
    645c:	11 8e       	std	Z+25, r1	; 0x19
    645e:	e0 82       	st	Z, r14
    6460:	f1 82       	std	Z+1, r15	; 0x01
    6462:	d7 01       	movw	r26, r14
    6464:	16 96       	adiw	r26, 0x06	; 6
    6466:	8d 91       	ld	r24, X+
    6468:	9c 91       	ld	r25, X
    646a:	17 97       	sbiw	r26, 0x07	; 7
    646c:	82 83       	std	Z+2, r24	; 0x02
    646e:	93 83       	std	Z+3, r25	; 0x03
    6470:	80 e0       	ldi	r24, 0x00	; 0
    6472:	07 c0       	rjmp	.+14     	; 0x6482 <f_open+0x22a>
    6474:	89 e0       	ldi	r24, 0x09	; 9
    6476:	05 c0       	rjmp	.+10     	; 0x6482 <f_open+0x22a>
    6478:	88 e0       	ldi	r24, 0x08	; 8
    647a:	03 c0       	rjmp	.+6      	; 0x6482 <f_open+0x22a>
    647c:	84 e0       	ldi	r24, 0x04	; 4
    647e:	01 c0       	rjmp	.+2      	; 0x6482 <f_open+0x22a>
    6480:	87 e0       	ldi	r24, 0x07	; 7
    6482:	a4 96       	adiw	r28, 0x24	; 36
    6484:	cd bf       	out	0x3d, r28	; 61
    6486:	de bf       	out	0x3e, r29	; 62
    6488:	df 91       	pop	r29
    648a:	cf 91       	pop	r28
    648c:	1f 91       	pop	r17
    648e:	0f 91       	pop	r16
    6490:	ff 90       	pop	r15
    6492:	ef 90       	pop	r14
    6494:	df 90       	pop	r13
    6496:	cf 90       	pop	r12
    6498:	bf 90       	pop	r11
    649a:	af 90       	pop	r10
    649c:	9f 90       	pop	r9
    649e:	7f 90       	pop	r7
    64a0:	6f 90       	pop	r6
    64a2:	5f 90       	pop	r5
    64a4:	4f 90       	pop	r4
    64a6:	08 95       	ret

000064a8 <f_read>:
    64a8:	2f 92       	push	r2
    64aa:	3f 92       	push	r3
    64ac:	4f 92       	push	r4
    64ae:	5f 92       	push	r5
    64b0:	6f 92       	push	r6
    64b2:	7f 92       	push	r7
    64b4:	8f 92       	push	r8
    64b6:	9f 92       	push	r9
    64b8:	af 92       	push	r10
    64ba:	bf 92       	push	r11
    64bc:	cf 92       	push	r12
    64be:	df 92       	push	r13
    64c0:	ef 92       	push	r14
    64c2:	ff 92       	push	r15
    64c4:	0f 93       	push	r16
    64c6:	1f 93       	push	r17
    64c8:	cf 93       	push	r28
    64ca:	df 93       	push	r29
    64cc:	ec 01       	movw	r28, r24
    64ce:	5b 01       	movw	r10, r22
    64d0:	7a 01       	movw	r14, r20
    64d2:	19 01       	movw	r2, r18
    64d4:	f9 01       	movw	r30, r18
    64d6:	10 82       	st	Z, r1
    64d8:	11 82       	std	Z+1, r1	; 0x01
    64da:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <validate>
    64de:	81 11       	cpse	r24, r1
    64e0:	05 c1       	rjmp	.+522    	; 0x66ec <f_read+0x244>
    64e2:	8d 81       	ldd	r24, Y+5	; 0x05
    64e4:	81 11       	cpse	r24, r1
    64e6:	02 c1       	rjmp	.+516    	; 0x66ec <f_read+0x244>
    64e8:	8c 81       	ldd	r24, Y+4	; 0x04
    64ea:	80 ff       	sbrs	r24, 0
    64ec:	fe c0       	rjmp	.+508    	; 0x66ea <f_read+0x242>
    64ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    64f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    64f2:	ac 85       	ldd	r26, Y+12	; 0x0c
    64f4:	bd 85       	ldd	r27, Y+13	; 0x0d
    64f6:	4e 81       	ldd	r20, Y+6	; 0x06
    64f8:	5f 81       	ldd	r21, Y+7	; 0x07
    64fa:	68 85       	ldd	r22, Y+8	; 0x08
    64fc:	79 85       	ldd	r23, Y+9	; 0x09
    64fe:	84 1b       	sub	r24, r20
    6500:	95 0b       	sbc	r25, r21
    6502:	a6 0b       	sbc	r26, r22
    6504:	b7 0b       	sbc	r27, r23
    6506:	a7 01       	movw	r20, r14
    6508:	60 e0       	ldi	r22, 0x00	; 0
    650a:	70 e0       	ldi	r23, 0x00	; 0
    650c:	84 17       	cp	r24, r20
    650e:	95 07       	cpc	r25, r21
    6510:	a6 07       	cpc	r26, r22
    6512:	b7 07       	cpc	r27, r23
    6514:	08 f0       	brcs	.+2      	; 0x6518 <f_read+0x70>
    6516:	74 c0       	rjmp	.+232    	; 0x6600 <f_read+0x158>
    6518:	7c 01       	movw	r14, r24
    651a:	72 c0       	rjmp	.+228    	; 0x6600 <f_read+0x158>
    651c:	4e 81       	ldd	r20, Y+6	; 0x06
    651e:	5f 81       	ldd	r21, Y+7	; 0x07
    6520:	68 85       	ldd	r22, Y+8	; 0x08
    6522:	79 85       	ldd	r23, Y+9	; 0x09
    6524:	db 01       	movw	r26, r22
    6526:	ca 01       	movw	r24, r20
    6528:	91 70       	andi	r25, 0x01	; 1
    652a:	aa 27       	eor	r26, r26
    652c:	bb 27       	eor	r27, r27
    652e:	89 2b       	or	r24, r25
    6530:	8a 2b       	or	r24, r26
    6532:	8b 2b       	or	r24, r27
    6534:	09 f0       	breq	.+2      	; 0x6538 <f_read+0x90>
    6536:	ad c0       	rjmp	.+346    	; 0x6692 <f_read+0x1ea>
    6538:	88 81       	ld	r24, Y
    653a:	99 81       	ldd	r25, Y+1	; 0x01
    653c:	fc 01       	movw	r30, r24
    653e:	12 81       	ldd	r17, Z+2	; 0x02
    6540:	11 50       	subi	r17, 0x01	; 1
    6542:	2a 01       	movw	r4, r20
    6544:	3b 01       	movw	r6, r22
    6546:	29 e0       	ldi	r18, 0x09	; 9
    6548:	76 94       	lsr	r7
    654a:	67 94       	ror	r6
    654c:	57 94       	ror	r5
    654e:	47 94       	ror	r4
    6550:	2a 95       	dec	r18
    6552:	d1 f7       	brne	.-12     	; 0x6548 <f_read+0xa0>
    6554:	14 21       	and	r17, r4
    6556:	09 f4       	brne	.+2      	; 0x655a <f_read+0xb2>
    6558:	58 c0       	rjmp	.+176    	; 0x660a <f_read+0x162>
    655a:	88 80       	ld	r8, Y
    655c:	99 80       	ldd	r9, Y+1	; 0x01
    655e:	4a 89       	ldd	r20, Y+18	; 0x12
    6560:	5b 89       	ldd	r21, Y+19	; 0x13
    6562:	6c 89       	ldd	r22, Y+20	; 0x14
    6564:	7d 89       	ldd	r23, Y+21	; 0x15
    6566:	c4 01       	movw	r24, r8
    6568:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <clust2sect>
    656c:	61 15       	cp	r22, r1
    656e:	71 05       	cpc	r23, r1
    6570:	81 05       	cpc	r24, r1
    6572:	91 05       	cpc	r25, r1
    6574:	09 f4       	brne	.+2      	; 0x6578 <f_read+0xd0>
    6576:	69 c0       	rjmp	.+210    	; 0x664a <f_read+0x1a2>
    6578:	2b 01       	movw	r4, r22
    657a:	3c 01       	movw	r6, r24
    657c:	41 0e       	add	r4, r17
    657e:	51 1c       	adc	r5, r1
    6580:	61 1c       	adc	r6, r1
    6582:	71 1c       	adc	r7, r1
    6584:	67 01       	movw	r12, r14
    6586:	cd 2c       	mov	r12, r13
    6588:	dd 24       	eor	r13, r13
    658a:	c6 94       	lsr	r12
    658c:	c1 14       	cp	r12, r1
    658e:	d1 04       	cpc	r13, r1
    6590:	09 f4       	brne	.+2      	; 0x6594 <f_read+0xec>
    6592:	7b c0       	rjmp	.+246    	; 0x668a <f_read+0x1e2>
    6594:	f4 01       	movw	r30, r8
    6596:	82 81       	ldd	r24, Z+2	; 0x02
    6598:	21 2f       	mov	r18, r17
    659a:	30 e0       	ldi	r19, 0x00	; 0
    659c:	a6 01       	movw	r20, r12
    659e:	42 0f       	add	r20, r18
    65a0:	53 1f       	adc	r21, r19
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	84 17       	cp	r24, r20
    65a6:	95 07       	cpc	r25, r21
    65a8:	18 f4       	brcc	.+6      	; 0x65b0 <f_read+0x108>
    65aa:	6c 01       	movw	r12, r24
    65ac:	c2 1a       	sub	r12, r18
    65ae:	d3 0a       	sbc	r13, r19
    65b0:	86 01       	movw	r16, r12
    65b2:	a3 01       	movw	r20, r6
    65b4:	92 01       	movw	r18, r4
    65b6:	b5 01       	movw	r22, r10
    65b8:	f4 01       	movw	r30, r8
    65ba:	81 81       	ldd	r24, Z+1	; 0x01
    65bc:	7c d4       	rcall	.+2296   	; 0x6eb6 <disk_read>
    65be:	81 11       	cpse	r24, r1
    65c0:	7e c0       	rjmp	.+252    	; 0x66be <f_read+0x216>
    65c2:	e8 81       	ld	r30, Y
    65c4:	f9 81       	ldd	r31, Y+1	; 0x01
    65c6:	84 81       	ldd	r24, Z+4	; 0x04
    65c8:	81 11       	cpse	r24, r1
    65ca:	41 c0       	rjmp	.+130    	; 0x664e <f_read+0x1a6>
    65cc:	dc 2c       	mov	r13, r12
    65ce:	cc 24       	eor	r12, r12
    65d0:	dd 0c       	add	r13, r13
    65d2:	ac 0c       	add	r10, r12
    65d4:	bd 1c       	adc	r11, r13
    65d6:	8e 81       	ldd	r24, Y+6	; 0x06
    65d8:	9f 81       	ldd	r25, Y+7	; 0x07
    65da:	a8 85       	ldd	r26, Y+8	; 0x08
    65dc:	b9 85       	ldd	r27, Y+9	; 0x09
    65de:	8c 0d       	add	r24, r12
    65e0:	9d 1d       	adc	r25, r13
    65e2:	a1 1d       	adc	r26, r1
    65e4:	b1 1d       	adc	r27, r1
    65e6:	8e 83       	std	Y+6, r24	; 0x06
    65e8:	9f 83       	std	Y+7, r25	; 0x07
    65ea:	a8 87       	std	Y+8, r26	; 0x08
    65ec:	b9 87       	std	Y+9, r27	; 0x09
    65ee:	f1 01       	movw	r30, r2
    65f0:	80 81       	ld	r24, Z
    65f2:	91 81       	ldd	r25, Z+1	; 0x01
    65f4:	8c 0d       	add	r24, r12
    65f6:	9d 1d       	adc	r25, r13
    65f8:	80 83       	st	Z, r24
    65fa:	91 83       	std	Z+1, r25	; 0x01
    65fc:	ec 18       	sub	r14, r12
    65fe:	fd 08       	sbc	r15, r13
    6600:	e1 14       	cp	r14, r1
    6602:	f1 04       	cpc	r15, r1
    6604:	09 f0       	breq	.+2      	; 0x6608 <f_read+0x160>
    6606:	8a cf       	rjmp	.-236    	; 0x651c <f_read+0x74>
    6608:	6e c0       	rjmp	.+220    	; 0x66e6 <f_read+0x23e>
    660a:	45 2b       	or	r20, r21
    660c:	46 2b       	or	r20, r22
    660e:	47 2b       	or	r20, r23
    6610:	29 f4       	brne	.+10     	; 0x661c <f_read+0x174>
    6612:	6e 85       	ldd	r22, Y+14	; 0x0e
    6614:	7f 85       	ldd	r23, Y+15	; 0x0f
    6616:	88 89       	ldd	r24, Y+16	; 0x10
    6618:	99 89       	ldd	r25, Y+17	; 0x11
    661a:	06 c0       	rjmp	.+12     	; 0x6628 <f_read+0x180>
    661c:	4a 89       	ldd	r20, Y+18	; 0x12
    661e:	5b 89       	ldd	r21, Y+19	; 0x13
    6620:	6c 89       	ldd	r22, Y+20	; 0x14
    6622:	7d 89       	ldd	r23, Y+21	; 0x15
    6624:	0e 94 85 2a 	call	0x550a	; 0x550a <get_fat>
    6628:	62 30       	cpi	r22, 0x02	; 2
    662a:	71 05       	cpc	r23, r1
    662c:	81 05       	cpc	r24, r1
    662e:	91 05       	cpc	r25, r1
    6630:	60 f0       	brcs	.+24     	; 0x664a <f_read+0x1a2>
    6632:	6f 3f       	cpi	r22, 0xFF	; 255
    6634:	ff ef       	ldi	r31, 0xFF	; 255
    6636:	7f 07       	cpc	r23, r31
    6638:	8f 07       	cpc	r24, r31
    663a:	9f 07       	cpc	r25, r31
    663c:	09 f4       	brne	.+2      	; 0x6640 <f_read+0x198>
    663e:	3f c0       	rjmp	.+126    	; 0x66be <f_read+0x216>
    6640:	6a 8b       	std	Y+18, r22	; 0x12
    6642:	7b 8b       	std	Y+19, r23	; 0x13
    6644:	8c 8b       	std	Y+20, r24	; 0x14
    6646:	9d 8b       	std	Y+21, r25	; 0x15
    6648:	88 cf       	rjmp	.-240    	; 0x655a <f_read+0xb2>
    664a:	82 e0       	ldi	r24, 0x02	; 2
    664c:	39 c0       	rjmp	.+114    	; 0x66c0 <f_read+0x218>
    664e:	86 a5       	ldd	r24, Z+46	; 0x2e
    6650:	97 a5       	ldd	r25, Z+47	; 0x2f
    6652:	a0 a9       	ldd	r26, Z+48	; 0x30
    6654:	b1 a9       	ldd	r27, Z+49	; 0x31
    6656:	84 19       	sub	r24, r4
    6658:	95 09       	sbc	r25, r5
    665a:	a6 09       	sbc	r26, r6
    665c:	b7 09       	sbc	r27, r7
    665e:	a6 01       	movw	r20, r12
    6660:	60 e0       	ldi	r22, 0x00	; 0
    6662:	70 e0       	ldi	r23, 0x00	; 0
    6664:	84 17       	cp	r24, r20
    6666:	95 07       	cpc	r25, r21
    6668:	a6 07       	cpc	r26, r22
    666a:	b7 07       	cpc	r27, r23
    666c:	08 f0       	brcs	.+2      	; 0x6670 <f_read+0x1c8>
    666e:	ae cf       	rjmp	.-164    	; 0x65cc <f_read+0x124>
    6670:	bf 01       	movw	r22, r30
    6672:	6e 5c       	subi	r22, 0xCE	; 206
    6674:	7f 4f       	sbci	r23, 0xFF	; 255
    6676:	98 2f       	mov	r25, r24
    6678:	88 27       	eor	r24, r24
    667a:	99 0f       	add	r25, r25
    667c:	40 e0       	ldi	r20, 0x00	; 0
    667e:	52 e0       	ldi	r21, 0x02	; 2
    6680:	8a 0d       	add	r24, r10
    6682:	9b 1d       	adc	r25, r11
    6684:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <mem_cpy>
    6688:	a1 cf       	rjmp	.-190    	; 0x65cc <f_read+0x124>
    668a:	4e 8a       	std	Y+22, r4	; 0x16
    668c:	5f 8a       	std	Y+23, r5	; 0x17
    668e:	68 8e       	std	Y+24, r6	; 0x18
    6690:	79 8e       	std	Y+25, r7	; 0x19
    6692:	8e 81       	ldd	r24, Y+6	; 0x06
    6694:	9f 81       	ldd	r25, Y+7	; 0x07
    6696:	91 70       	andi	r25, 0x01	; 1
    6698:	20 e0       	ldi	r18, 0x00	; 0
    669a:	32 e0       	ldi	r19, 0x02	; 2
    669c:	28 1b       	sub	r18, r24
    669e:	39 0b       	sbc	r19, r25
    66a0:	67 01       	movw	r12, r14
    66a2:	2e 15       	cp	r18, r14
    66a4:	3f 05       	cpc	r19, r15
    66a6:	08 f4       	brcc	.+2      	; 0x66aa <f_read+0x202>
    66a8:	69 01       	movw	r12, r18
    66aa:	4e 89       	ldd	r20, Y+22	; 0x16
    66ac:	5f 89       	ldd	r21, Y+23	; 0x17
    66ae:	68 8d       	ldd	r22, Y+24	; 0x18
    66b0:	79 8d       	ldd	r23, Y+25	; 0x19
    66b2:	88 81       	ld	r24, Y
    66b4:	99 81       	ldd	r25, Y+1	; 0x01
    66b6:	0e 94 7e 27 	call	0x4efc	; 0x4efc <move_window>
    66ba:	88 23       	and	r24, r24
    66bc:	19 f0       	breq	.+6      	; 0x66c4 <f_read+0x21c>
    66be:	81 e0       	ldi	r24, 0x01	; 1
    66c0:	8d 83       	std	Y+5, r24	; 0x05
    66c2:	14 c0       	rjmp	.+40     	; 0x66ec <f_read+0x244>
    66c4:	8e 81       	ldd	r24, Y+6	; 0x06
    66c6:	9f 81       	ldd	r25, Y+7	; 0x07
    66c8:	a8 85       	ldd	r26, Y+8	; 0x08
    66ca:	b9 85       	ldd	r27, Y+9	; 0x09
    66cc:	91 70       	andi	r25, 0x01	; 1
    66ce:	aa 27       	eor	r26, r26
    66d0:	bb 27       	eor	r27, r27
    66d2:	c2 96       	adiw	r24, 0x32	; 50
    66d4:	68 81       	ld	r22, Y
    66d6:	79 81       	ldd	r23, Y+1	; 0x01
    66d8:	68 0f       	add	r22, r24
    66da:	79 1f       	adc	r23, r25
    66dc:	a6 01       	movw	r20, r12
    66de:	c5 01       	movw	r24, r10
    66e0:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <mem_cpy>
    66e4:	76 cf       	rjmp	.-276    	; 0x65d2 <f_read+0x12a>
    66e6:	80 e0       	ldi	r24, 0x00	; 0
    66e8:	01 c0       	rjmp	.+2      	; 0x66ec <f_read+0x244>
    66ea:	87 e0       	ldi	r24, 0x07	; 7
    66ec:	df 91       	pop	r29
    66ee:	cf 91       	pop	r28
    66f0:	1f 91       	pop	r17
    66f2:	0f 91       	pop	r16
    66f4:	ff 90       	pop	r15
    66f6:	ef 90       	pop	r14
    66f8:	df 90       	pop	r13
    66fa:	cf 90       	pop	r12
    66fc:	bf 90       	pop	r11
    66fe:	af 90       	pop	r10
    6700:	9f 90       	pop	r9
    6702:	8f 90       	pop	r8
    6704:	7f 90       	pop	r7
    6706:	6f 90       	pop	r6
    6708:	5f 90       	pop	r5
    670a:	4f 90       	pop	r4
    670c:	3f 90       	pop	r3
    670e:	2f 90       	pop	r2
    6710:	08 95       	ret

00006712 <f_sync>:
    6712:	cf 93       	push	r28
    6714:	df 93       	push	r29
    6716:	ec 01       	movw	r28, r24
    6718:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <validate>
    671c:	81 11       	cpse	r24, r1
    671e:	39 c0       	rjmp	.+114    	; 0x6792 <f_sync+0x80>
    6720:	9c 81       	ldd	r25, Y+4	; 0x04
    6722:	95 ff       	sbrs	r25, 5
    6724:	36 c0       	rjmp	.+108    	; 0x6792 <f_sync+0x80>
    6726:	4a 8d       	ldd	r20, Y+26	; 0x1a
    6728:	5b 8d       	ldd	r21, Y+27	; 0x1b
    672a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    672c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    672e:	88 81       	ld	r24, Y
    6730:	99 81       	ldd	r25, Y+1	; 0x01
    6732:	0e 94 7e 27 	call	0x4efc	; 0x4efc <move_window>
    6736:	81 11       	cpse	r24, r1
    6738:	2c c0       	rjmp	.+88     	; 0x6792 <f_sync+0x80>
    673a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    673c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    673e:	83 85       	ldd	r24, Z+11	; 0x0b
    6740:	80 62       	ori	r24, 0x20	; 32
    6742:	83 87       	std	Z+11, r24	; 0x0b
    6744:	4a 85       	ldd	r20, Y+10	; 0x0a
    6746:	5b 85       	ldd	r21, Y+11	; 0x0b
    6748:	6c 85       	ldd	r22, Y+12	; 0x0c
    674a:	7d 85       	ldd	r23, Y+13	; 0x0d
    674c:	44 8f       	std	Z+28, r20	; 0x1c
    674e:	55 8f       	std	Z+29, r21	; 0x1d
    6750:	66 8f       	std	Z+30, r22	; 0x1e
    6752:	77 8f       	std	Z+31, r23	; 0x1f
    6754:	4e 85       	ldd	r20, Y+14	; 0x0e
    6756:	5f 85       	ldd	r21, Y+15	; 0x0f
    6758:	68 89       	ldd	r22, Y+16	; 0x10
    675a:	79 89       	ldd	r23, Y+17	; 0x11
    675c:	42 8f       	std	Z+26, r20	; 0x1a
    675e:	53 8f       	std	Z+27, r21	; 0x1b
    6760:	64 8b       	std	Z+20, r22	; 0x14
    6762:	75 8b       	std	Z+21, r23	; 0x15
    6764:	40 e0       	ldi	r20, 0x00	; 0
    6766:	50 e0       	ldi	r21, 0x00	; 0
    6768:	61 e2       	ldi	r22, 0x21	; 33
    676a:	76 e4       	ldi	r23, 0x46	; 70
    676c:	46 8b       	std	Z+22, r20	; 0x16
    676e:	57 8b       	std	Z+23, r21	; 0x17
    6770:	60 8f       	std	Z+24, r22	; 0x18
    6772:	71 8f       	std	Z+25, r23	; 0x19
    6774:	12 8a       	std	Z+18, r1	; 0x12
    6776:	13 8a       	std	Z+19, r1	; 0x13
    6778:	8c 81       	ldd	r24, Y+4	; 0x04
    677a:	8f 7d       	andi	r24, 0xDF	; 223
    677c:	8c 83       	std	Y+4, r24	; 0x04
    677e:	e8 81       	ld	r30, Y
    6780:	f9 81       	ldd	r31, Y+1	; 0x01
    6782:	81 e0       	ldi	r24, 0x01	; 1
    6784:	84 83       	std	Z+4, r24	; 0x04
    6786:	88 81       	ld	r24, Y
    6788:	99 81       	ldd	r25, Y+1	; 0x01
    678a:	df 91       	pop	r29
    678c:	cf 91       	pop	r28
    678e:	0c 94 12 27 	jmp	0x4e24	; 0x4e24 <sync_fs>
    6792:	df 91       	pop	r29
    6794:	cf 91       	pop	r28
    6796:	08 95       	ret

00006798 <f_close>:
    6798:	cf 93       	push	r28
    679a:	df 93       	push	r29
    679c:	ec 01       	movw	r28, r24
    679e:	b9 df       	rcall	.-142    	; 0x6712 <f_sync>
    67a0:	81 11       	cpse	r24, r1
    67a2:	07 c0       	rjmp	.+14     	; 0x67b2 <f_close+0x1a>
    67a4:	ce 01       	movw	r24, r28
    67a6:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <validate>
    67aa:	81 11       	cpse	r24, r1
    67ac:	02 c0       	rjmp	.+4      	; 0x67b2 <f_close+0x1a>
    67ae:	18 82       	st	Y, r1
    67b0:	19 82       	std	Y+1, r1	; 0x01
    67b2:	df 91       	pop	r29
    67b4:	cf 91       	pop	r28
    67b6:	08 95       	ret

000067b8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    67b8:	2f 92       	push	r2
    67ba:	3f 92       	push	r3
    67bc:	4f 92       	push	r4
    67be:	5f 92       	push	r5
    67c0:	6f 92       	push	r6
    67c2:	7f 92       	push	r7
    67c4:	8f 92       	push	r8
    67c6:	9f 92       	push	r9
    67c8:	af 92       	push	r10
    67ca:	bf 92       	push	r11
    67cc:	cf 92       	push	r12
    67ce:	df 92       	push	r13
    67d0:	ef 92       	push	r14
    67d2:	ff 92       	push	r15
    67d4:	0f 93       	push	r16
    67d6:	1f 93       	push	r17
    67d8:	cf 93       	push	r28
    67da:	df 93       	push	r29
    67dc:	cd b7       	in	r28, 0x3d	; 61
    67de:	de b7       	in	r29, 0x3e	; 62
    67e0:	28 97       	sbiw	r28, 0x08	; 8
    67e2:	cd bf       	out	0x3d, r28	; 61
    67e4:	de bf       	out	0x3e, r29	; 62
    67e6:	1c 01       	movw	r2, r24
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
    67e8:	4d 83       	std	Y+5, r20	; 0x05
    67ea:	5e 83       	std	Y+6, r21	; 0x06
    67ec:	6f 83       	std	Y+7, r22	; 0x07
    67ee:	78 87       	std	Y+8, r23	; 0x08
    67f0:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    67f4:	4d 81       	ldd	r20, Y+5	; 0x05
    67f6:	5e 81       	ldd	r21, Y+6	; 0x06
    67f8:	6f 81       	ldd	r22, Y+7	; 0x07
    67fa:	78 85       	ldd	r23, Y+8	; 0x08
    67fc:	81 11       	cpse	r24, r1
    67fe:	5f c1       	rjmp	.+702    	; 0x6abe <f_lseek+0x306>
	if (fp->err)						/* Check error */
    6800:	d1 01       	movw	r26, r2
    6802:	15 96       	adiw	r26, 0x05	; 5
    6804:	8c 91       	ld	r24, X
    6806:	15 97       	sbiw	r26, 0x05	; 5
    6808:	81 11       	cpse	r24, r1
    680a:	59 c1       	rjmp	.+690    	; 0x6abe <f_lseek+0x306>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    680c:	1a 96       	adiw	r26, 0x0a	; 10
    680e:	cd 90       	ld	r12, X+
    6810:	dd 90       	ld	r13, X+
    6812:	ed 90       	ld	r14, X+
    6814:	fc 90       	ld	r15, X
    6816:	1d 97       	sbiw	r26, 0x0d	; 13
    6818:	c4 16       	cp	r12, r20
    681a:	d5 06       	cpc	r13, r21
    681c:	e6 06       	cpc	r14, r22
    681e:	f7 06       	cpc	r15, r23
    6820:	18 f0       	brcs	.+6      	; 0x6828 <f_lseek+0x70>

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    6822:	6a 01       	movw	r12, r20
    6824:	7b 01       	movw	r14, r22
    6826:	04 c0       	rjmp	.+8      	; 0x6830 <f_lseek+0x78>

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    6828:	f1 01       	movw	r30, r2
    682a:	84 81       	ldd	r24, Z+4	; 0x04
    682c:	81 fd       	sbrc	r24, 1
    682e:	f9 cf       	rjmp	.-14     	; 0x6822 <f_lseek+0x6a>
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    6830:	d1 01       	movw	r26, r2
    6832:	16 96       	adiw	r26, 0x06	; 6
    6834:	4d 90       	ld	r4, X+
    6836:	5d 90       	ld	r5, X+
    6838:	6d 90       	ld	r6, X+
    683a:	7c 90       	ld	r7, X
    683c:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    683e:	f1 01       	movw	r30, r2
    6840:	16 82       	std	Z+6, r1	; 0x06
    6842:	17 82       	std	Z+7, r1	; 0x07
    6844:	10 86       	std	Z+8, r1	; 0x08
    6846:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    6848:	c1 14       	cp	r12, r1
    684a:	d1 04       	cpc	r13, r1
    684c:	e1 04       	cpc	r14, r1
    684e:	f1 04       	cpc	r15, r1
    6850:	21 f4       	brne	.+8      	; 0x685a <f_lseek+0xa2>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    6852:	c1 2c       	mov	r12, r1
    6854:	d1 2c       	mov	r13, r1
    6856:	76 01       	movw	r14, r12
    6858:	05 c1       	rjmp	.+522    	; 0x6a64 <f_lseek+0x2ac>
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    685a:	00 81       	ld	r16, Z
    685c:	11 81       	ldd	r17, Z+1	; 0x01
    685e:	f8 01       	movw	r30, r16
    6860:	82 80       	ldd	r8, Z+2	; 0x02
    6862:	91 2c       	mov	r9, r1
    6864:	a1 2c       	mov	r10, r1
    6866:	b1 2c       	mov	r11, r1
    6868:	69 e0       	ldi	r22, 0x09	; 9
    686a:	88 0c       	add	r8, r8
    686c:	99 1c       	adc	r9, r9
    686e:	aa 1c       	adc	r10, r10
    6870:	bb 1c       	adc	r11, r11
    6872:	6a 95       	dec	r22
    6874:	d1 f7       	brne	.-12     	; 0x686a <f_lseek+0xb2>
			if (ifptr > 0 &&
    6876:	41 14       	cp	r4, r1
    6878:	51 04       	cpc	r5, r1
    687a:	61 04       	cpc	r6, r1
    687c:	71 04       	cpc	r7, r1
    687e:	d9 f1       	breq	.+118    	; 0x68f6 <f_lseek+0x13e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    6880:	f1 e0       	ldi	r31, 0x01	; 1
    6882:	4f 1a       	sub	r4, r31
    6884:	51 08       	sbc	r5, r1
    6886:	61 08       	sbc	r6, r1
    6888:	71 08       	sbc	r7, r1
    688a:	c7 01       	movw	r24, r14
    688c:	b6 01       	movw	r22, r12
    688e:	61 50       	subi	r22, 0x01	; 1
    6890:	71 09       	sbc	r23, r1
    6892:	81 09       	sbc	r24, r1
    6894:	91 09       	sbc	r25, r1
    6896:	a5 01       	movw	r20, r10
    6898:	94 01       	movw	r18, r8
    689a:	0e 94 e5 52 	call	0xa5ca	; 0xa5ca <__udivmodsi4>
    689e:	29 83       	std	Y+1, r18	; 0x01
    68a0:	3a 83       	std	Y+2, r19	; 0x02
    68a2:	4b 83       	std	Y+3, r20	; 0x03
    68a4:	5c 83       	std	Y+4, r21	; 0x04
    68a6:	c3 01       	movw	r24, r6
    68a8:	b2 01       	movw	r22, r4
    68aa:	a5 01       	movw	r20, r10
    68ac:	94 01       	movw	r18, r8
    68ae:	0e 94 e5 52 	call	0xa5ca	; 0xa5ca <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    68b2:	89 81       	ldd	r24, Y+1	; 0x01
    68b4:	9a 81       	ldd	r25, Y+2	; 0x02
    68b6:	ab 81       	ldd	r26, Y+3	; 0x03
    68b8:	bc 81       	ldd	r27, Y+4	; 0x04
    68ba:	82 17       	cp	r24, r18
    68bc:	93 07       	cpc	r25, r19
    68be:	a4 07       	cpc	r26, r20
    68c0:	b5 07       	cpc	r27, r21
    68c2:	c8 f0       	brcs	.+50     	; 0x68f6 <f_lseek+0x13e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    68c4:	88 27       	eor	r24, r24
    68c6:	99 27       	eor	r25, r25
    68c8:	dc 01       	movw	r26, r24
    68ca:	88 19       	sub	r24, r8
    68cc:	99 09       	sbc	r25, r9
    68ce:	aa 09       	sbc	r26, r10
    68d0:	bb 09       	sbc	r27, r11
    68d2:	84 21       	and	r24, r4
    68d4:	95 21       	and	r25, r5
    68d6:	a6 21       	and	r26, r6
    68d8:	b7 21       	and	r27, r7
    68da:	f1 01       	movw	r30, r2
    68dc:	86 83       	std	Z+6, r24	; 0x06
    68de:	97 83       	std	Z+7, r25	; 0x07
    68e0:	a0 87       	std	Z+8, r26	; 0x08
    68e2:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    68e4:	c8 1a       	sub	r12, r24
    68e6:	d9 0a       	sbc	r13, r25
    68e8:	ea 0a       	sbc	r14, r26
    68ea:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    68ec:	42 89       	ldd	r20, Z+18	; 0x12
    68ee:	53 89       	ldd	r21, Z+19	; 0x13
    68f0:	64 89       	ldd	r22, Z+20	; 0x14
    68f2:	75 89       	ldd	r23, Z+21	; 0x15
    68f4:	2c c0       	rjmp	.+88     	; 0x694e <f_lseek+0x196>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    68f6:	d1 01       	movw	r26, r2
    68f8:	1e 96       	adiw	r26, 0x0e	; 14
    68fa:	4d 91       	ld	r20, X+
    68fc:	5d 91       	ld	r21, X+
    68fe:	6d 91       	ld	r22, X+
    6900:	7c 91       	ld	r23, X
    6902:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    6904:	41 15       	cp	r20, r1
    6906:	51 05       	cpc	r21, r1
    6908:	61 05       	cpc	r22, r1
    690a:	71 05       	cpc	r23, r1
    690c:	c9 f4       	brne	.+50     	; 0x6940 <f_lseek+0x188>
					clst = create_chain(fp->fs, 0);
    690e:	40 e0       	ldi	r20, 0x00	; 0
    6910:	50 e0       	ldi	r21, 0x00	; 0
    6912:	ba 01       	movw	r22, r20
    6914:	c8 01       	movw	r24, r16
    6916:	54 d8       	rcall	.-3928   	; 0x59c0 <create_chain>
    6918:	ab 01       	movw	r20, r22
    691a:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    691c:	41 30       	cpi	r20, 0x01	; 1
    691e:	51 05       	cpc	r21, r1
    6920:	61 05       	cpc	r22, r1
    6922:	71 05       	cpc	r23, r1
    6924:	09 f4       	brne	.+2      	; 0x6928 <f_lseek+0x170>
    6926:	63 c0       	rjmp	.+198    	; 0x69ee <f_lseek+0x236>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    6928:	4f 3f       	cpi	r20, 0xFF	; 255
    692a:	ff ef       	ldi	r31, 0xFF	; 255
    692c:	5f 07       	cpc	r21, r31
    692e:	6f 07       	cpc	r22, r31
    6930:	7f 07       	cpc	r23, r31
    6932:	09 f4       	brne	.+2      	; 0x6936 <f_lseek+0x17e>
    6934:	5a c0       	rjmp	.+180    	; 0x69ea <f_lseek+0x232>
					fp->sclust = clst;
    6936:	f1 01       	movw	r30, r2
    6938:	46 87       	std	Z+14, r20	; 0x0e
    693a:	57 87       	std	Z+15, r21	; 0x0f
    693c:	60 8b       	std	Z+16, r22	; 0x10
    693e:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    6940:	d1 01       	movw	r26, r2
    6942:	52 96       	adiw	r26, 0x12	; 18
    6944:	4d 93       	st	X+, r20
    6946:	5d 93       	st	X+, r21
    6948:	6d 93       	st	X+, r22
    694a:	7c 93       	st	X, r23
    694c:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    694e:	41 15       	cp	r20, r1
    6950:	51 05       	cpc	r21, r1
    6952:	61 05       	cpc	r22, r1
    6954:	71 05       	cpc	r23, r1
    6956:	09 f4       	brne	.+2      	; 0x695a <f_lseek+0x1a2>
    6958:	7c cf       	rjmp	.-264    	; 0x6852 <f_lseek+0x9a>
    695a:	2c c0       	rjmp	.+88     	; 0x69b4 <f_lseek+0x1fc>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    695c:	42 30       	cpi	r20, 0x02	; 2
    695e:	51 05       	cpc	r21, r1
    6960:	61 05       	cpc	r22, r1
    6962:	71 05       	cpc	r23, r1
    6964:	08 f4       	brcc	.+2      	; 0x6968 <f_lseek+0x1b0>
    6966:	43 c0       	rjmp	.+134    	; 0x69ee <f_lseek+0x236>
    6968:	d1 01       	movw	r26, r2
    696a:	ed 91       	ld	r30, X+
    696c:	fc 91       	ld	r31, X
    696e:	86 89       	ldd	r24, Z+22	; 0x16
    6970:	97 89       	ldd	r25, Z+23	; 0x17
    6972:	a0 8d       	ldd	r26, Z+24	; 0x18
    6974:	b1 8d       	ldd	r27, Z+25	; 0x19
    6976:	48 17       	cp	r20, r24
    6978:	59 07       	cpc	r21, r25
    697a:	6a 07       	cpc	r22, r26
    697c:	7b 07       	cpc	r23, r27
    697e:	b8 f5       	brcc	.+110    	; 0x69ee <f_lseek+0x236>
					fp->clust = clst;
    6980:	d1 01       	movw	r26, r2
    6982:	52 96       	adiw	r26, 0x12	; 18
    6984:	4d 93       	st	X+, r20
    6986:	5d 93       	st	X+, r21
    6988:	6d 93       	st	X+, r22
    698a:	7c 93       	st	X, r23
    698c:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    698e:	16 96       	adiw	r26, 0x06	; 6
    6990:	8d 91       	ld	r24, X+
    6992:	9d 91       	ld	r25, X+
    6994:	0d 90       	ld	r0, X+
    6996:	bc 91       	ld	r27, X
    6998:	a0 2d       	mov	r26, r0
    699a:	88 0d       	add	r24, r8
    699c:	99 1d       	adc	r25, r9
    699e:	aa 1d       	adc	r26, r10
    69a0:	bb 1d       	adc	r27, r11
    69a2:	f1 01       	movw	r30, r2
    69a4:	86 83       	std	Z+6, r24	; 0x06
    69a6:	97 83       	std	Z+7, r25	; 0x07
    69a8:	a0 87       	std	Z+8, r26	; 0x08
    69aa:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    69ac:	c8 18       	sub	r12, r8
    69ae:	d9 08       	sbc	r13, r9
    69b0:	ea 08       	sbc	r14, r10
    69b2:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    69b4:	8c 14       	cp	r8, r12
    69b6:	9d 04       	cpc	r9, r13
    69b8:	ae 04       	cpc	r10, r14
    69ba:	bf 04       	cpc	r11, r15
    69bc:	18 f5       	brcc	.+70     	; 0x6a04 <f_lseek+0x24c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    69be:	f1 01       	movw	r30, r2
    69c0:	24 81       	ldd	r18, Z+4	; 0x04
    69c2:	80 81       	ld	r24, Z
    69c4:	91 81       	ldd	r25, Z+1	; 0x01
    69c6:	21 ff       	sbrs	r18, 1
    69c8:	16 c0       	rjmp	.+44     	; 0x69f6 <f_lseek+0x23e>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    69ca:	0e 94 e0 2c 	call	0x59c0	; 0x59c0 <create_chain>
    69ce:	ab 01       	movw	r20, r22
    69d0:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    69d2:	41 15       	cp	r20, r1
    69d4:	51 05       	cpc	r21, r1
    69d6:	61 05       	cpc	r22, r1
    69d8:	71 05       	cpc	r23, r1
    69da:	91 f0       	breq	.+36     	; 0x6a00 <f_lseek+0x248>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    69dc:	4f 3f       	cpi	r20, 0xFF	; 255
    69de:	ff ef       	ldi	r31, 0xFF	; 255
    69e0:	5f 07       	cpc	r21, r31
    69e2:	6f 07       	cpc	r22, r31
    69e4:	7f 07       	cpc	r23, r31
    69e6:	09 f0       	breq	.+2      	; 0x69ea <f_lseek+0x232>
    69e8:	b9 cf       	rjmp	.-142    	; 0x695c <f_lseek+0x1a4>
    69ea:	81 e0       	ldi	r24, 0x01	; 1
    69ec:	2c c0       	rjmp	.+88     	; 0x6a46 <f_lseek+0x28e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    69ee:	82 e0       	ldi	r24, 0x02	; 2
    69f0:	f1 01       	movw	r30, r2
    69f2:	85 83       	std	Z+5, r24	; 0x05
    69f4:	64 c0       	rjmp	.+200    	; 0x6abe <f_lseek+0x306>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    69f6:	0e 94 85 2a 	call	0x550a	; 0x550a <get_fat>
    69fa:	ab 01       	movw	r20, r22
    69fc:	bc 01       	movw	r22, r24
    69fe:	ee cf       	rjmp	.-36     	; 0x69dc <f_lseek+0x224>
    6a00:	75 01       	movw	r14, r10
    6a02:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    6a04:	f1 01       	movw	r30, r2
    6a06:	86 81       	ldd	r24, Z+6	; 0x06
    6a08:	97 81       	ldd	r25, Z+7	; 0x07
    6a0a:	a0 85       	ldd	r26, Z+8	; 0x08
    6a0c:	b1 85       	ldd	r27, Z+9	; 0x09
    6a0e:	8c 0d       	add	r24, r12
    6a10:	9d 1d       	adc	r25, r13
    6a12:	ae 1d       	adc	r26, r14
    6a14:	bf 1d       	adc	r27, r15
    6a16:	86 83       	std	Z+6, r24	; 0x06
    6a18:	97 83       	std	Z+7, r25	; 0x07
    6a1a:	a0 87       	std	Z+8, r26	; 0x08
    6a1c:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    6a1e:	d7 01       	movw	r26, r14
    6a20:	c6 01       	movw	r24, r12
    6a22:	91 70       	andi	r25, 0x01	; 1
    6a24:	aa 27       	eor	r26, r26
    6a26:	bb 27       	eor	r27, r27
    6a28:	89 2b       	or	r24, r25
    6a2a:	8a 2b       	or	r24, r26
    6a2c:	8b 2b       	or	r24, r27
    6a2e:	09 f4       	brne	.+2      	; 0x6a32 <f_lseek+0x27a>
    6a30:	10 cf       	rjmp	.-480    	; 0x6852 <f_lseek+0x9a>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    6a32:	80 81       	ld	r24, Z
    6a34:	91 81       	ldd	r25, Z+1	; 0x01
    6a36:	0e 94 5c 2a 	call	0x54b8	; 0x54b8 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    6a3a:	61 15       	cp	r22, r1
    6a3c:	71 05       	cpc	r23, r1
    6a3e:	81 05       	cpc	r24, r1
    6a40:	91 05       	cpc	r25, r1
    6a42:	29 f4       	brne	.+10     	; 0x6a4e <f_lseek+0x296>
    6a44:	82 e0       	ldi	r24, 0x02	; 2
    6a46:	d1 01       	movw	r26, r2
    6a48:	15 96       	adiw	r26, 0x05	; 5
    6a4a:	8c 93       	st	X, r24
    6a4c:	38 c0       	rjmp	.+112    	; 0x6abe <f_lseek+0x306>
					nsect += ofs / SS(fp->fs);
    6a4e:	59 e0       	ldi	r21, 0x09	; 9
    6a50:	f6 94       	lsr	r15
    6a52:	e7 94       	ror	r14
    6a54:	d7 94       	ror	r13
    6a56:	c7 94       	ror	r12
    6a58:	5a 95       	dec	r21
    6a5a:	d1 f7       	brne	.-12     	; 0x6a50 <f_lseek+0x298>
    6a5c:	c6 0e       	add	r12, r22
    6a5e:	d7 1e       	adc	r13, r23
    6a60:	e8 1e       	adc	r14, r24
    6a62:	f9 1e       	adc	r15, r25
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    6a64:	f1 01       	movw	r30, r2
    6a66:	86 81       	ldd	r24, Z+6	; 0x06
    6a68:	97 81       	ldd	r25, Z+7	; 0x07
    6a6a:	a0 85       	ldd	r26, Z+8	; 0x08
    6a6c:	b1 85       	ldd	r27, Z+9	; 0x09
    6a6e:	ac 01       	movw	r20, r24
    6a70:	bd 01       	movw	r22, r26
    6a72:	51 70       	andi	r21, 0x01	; 1
    6a74:	66 27       	eor	r22, r22
    6a76:	77 27       	eor	r23, r23
    6a78:	45 2b       	or	r20, r21
    6a7a:	46 2b       	or	r20, r22
    6a7c:	47 2b       	or	r20, r23
    6a7e:	69 f0       	breq	.+26     	; 0x6a9a <f_lseek+0x2e2>
    6a80:	46 89       	ldd	r20, Z+22	; 0x16
    6a82:	57 89       	ldd	r21, Z+23	; 0x17
    6a84:	60 8d       	ldd	r22, Z+24	; 0x18
    6a86:	71 8d       	ldd	r23, Z+25	; 0x19
    6a88:	c4 16       	cp	r12, r20
    6a8a:	d5 06       	cpc	r13, r21
    6a8c:	e6 06       	cpc	r14, r22
    6a8e:	f7 06       	cpc	r15, r23
    6a90:	21 f0       	breq	.+8      	; 0x6a9a <f_lseek+0x2e2>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    6a92:	c6 8a       	std	Z+22, r12	; 0x16
    6a94:	d7 8a       	std	Z+23, r13	; 0x17
    6a96:	e0 8e       	std	Z+24, r14	; 0x18
    6a98:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    6a9a:	f1 01       	movw	r30, r2
    6a9c:	42 85       	ldd	r20, Z+10	; 0x0a
    6a9e:	53 85       	ldd	r21, Z+11	; 0x0b
    6aa0:	64 85       	ldd	r22, Z+12	; 0x0c
    6aa2:	75 85       	ldd	r23, Z+13	; 0x0d
    6aa4:	48 17       	cp	r20, r24
    6aa6:	59 07       	cpc	r21, r25
    6aa8:	6a 07       	cpc	r22, r26
    6aaa:	7b 07       	cpc	r23, r27
    6aac:	38 f4       	brcc	.+14     	; 0x6abc <f_lseek+0x304>
			fp->fsize = fp->fptr;
    6aae:	82 87       	std	Z+10, r24	; 0x0a
    6ab0:	93 87       	std	Z+11, r25	; 0x0b
    6ab2:	a4 87       	std	Z+12, r26	; 0x0c
    6ab4:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    6ab6:	84 81       	ldd	r24, Z+4	; 0x04
    6ab8:	80 62       	ori	r24, 0x20	; 32
    6aba:	84 83       	std	Z+4, r24	; 0x04
    6abc:	80 e0       	ldi	r24, 0x00	; 0
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    6abe:	28 96       	adiw	r28, 0x08	; 8
    6ac0:	cd bf       	out	0x3d, r28	; 61
    6ac2:	de bf       	out	0x3e, r29	; 62
    6ac4:	df 91       	pop	r29
    6ac6:	cf 91       	pop	r28
    6ac8:	1f 91       	pop	r17
    6aca:	0f 91       	pop	r16
    6acc:	ff 90       	pop	r15
    6ace:	ef 90       	pop	r14
    6ad0:	df 90       	pop	r13
    6ad2:	cf 90       	pop	r12
    6ad4:	bf 90       	pop	r11
    6ad6:	af 90       	pop	r10
    6ad8:	9f 90       	pop	r9
    6ada:	8f 90       	pop	r8
    6adc:	7f 90       	pop	r7
    6ade:	6f 90       	pop	r6
    6ae0:	5f 90       	pop	r5
    6ae2:	4f 90       	pop	r4
    6ae4:	3f 90       	pop	r3
    6ae6:	2f 90       	pop	r2
    6ae8:	08 95       	ret

00006aea <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6aea:	0c 94 68 1e 	jmp	0x3cd0	; 0x3cd0 <spi_wr_rd>

00006aee <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    6aee:	80 e1       	ldi	r24, 0x10	; 16
    6af0:	e0 e4       	ldi	r30, 0x40	; 64
    6af2:	f6 e0       	ldi	r31, 0x06	; 6
    6af4:	85 83       	std	Z+5, r24	; 0x05
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    6af6:	8f ef       	ldi	r24, 0xFF	; 255
    6af8:	f8 cf       	rjmp	.-16     	; 0x6aea <xchg_spi>

00006afa <power_off>:
}

static
void power_off (void)
{
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
    6afa:	10 92 00 08 	sts	0x0800, r1
	spi_disable();
    6afe:	0e 94 57 1e 	call	0x3cae	; 0x3cae <spi_disable>
	PORTB.OUTSET = PIN1_bm;
    6b02:	82 e0       	ldi	r24, 0x02	; 2
    6b04:	e0 e2       	ldi	r30, 0x20	; 32
    6b06:	f6 e0       	ldi	r31, 0x06	; 6
    6b08:	85 83       	std	Z+5, r24	; 0x05
	PR.PRPC |= 0x01;
    6b0a:	e0 e7       	ldi	r30, 0x70	; 112
    6b0c:	f0 e0       	ldi	r31, 0x00	; 0
    6b0e:	83 81       	ldd	r24, Z+3	; 0x03
    6b10:	81 60       	ori	r24, 0x01	; 1
    6b12:	83 83       	std	Z+3, r24	; 0x03
    6b14:	2f ef       	ldi	r18, 0xFF	; 255
    6b16:	83 ef       	ldi	r24, 0xF3	; 243
    6b18:	91 e0       	ldi	r25, 0x01	; 1
    6b1a:	21 50       	subi	r18, 0x01	; 1
    6b1c:	80 40       	sbci	r24, 0x00	; 0
    6b1e:	90 40       	sbci	r25, 0x00	; 0
    6b20:	e1 f7       	brne	.-8      	; 0x6b1a <power_off+0x20>
    6b22:	00 c0       	rjmp	.+0      	; 0x6b24 <power_off+0x2a>
    6b24:	00 00       	nop
    6b26:	08 95       	ret

00006b28 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    6b28:	cf 92       	push	r12
    6b2a:	df 92       	push	r13
    6b2c:	ff 92       	push	r15
    6b2e:	0f 93       	push	r16
    6b30:	1f 93       	push	r17
    6b32:	cf 93       	push	r28
    6b34:	df 93       	push	r29
    6b36:	1f 92       	push	r1
    6b38:	cd b7       	in	r28, 0x3d	; 61
    6b3a:	de b7       	in	r29, 0x3e	; 62
    6b3c:	f8 2e       	mov	r15, r24
    6b3e:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    6b40:	84 e1       	ldi	r24, 0x14	; 20
    6b42:	80 93 1a 2b 	sts	0x2B1A, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6b46:	8f ef       	ldi	r24, 0xFF	; 255
    6b48:	99 83       	std	Y+1, r25	; 0x01
    6b4a:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <spi_wr_rd>


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    6b4e:	99 81       	ldd	r25, Y+1	; 0x01
    6b50:	8f 3f       	cpi	r24, 0xFF	; 255
    6b52:	29 f4       	brne	.+10     	; 0x6b5e <rcvr_datablock+0x36>
    6b54:	80 91 1a 2b 	lds	r24, 0x2B1A
    6b58:	81 11       	cpse	r24, r1
    6b5a:	f5 cf       	rjmp	.-22     	; 0x6b46 <rcvr_datablock+0x1e>
    6b5c:	1d c0       	rjmp	.+58     	; 0x6b98 <rcvr_datablock+0x70>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    6b5e:	8e 3f       	cpi	r24, 0xFE	; 254
    6b60:	d9 f4       	brne	.+54     	; 0x6b98 <rcvr_datablock+0x70>
    6b62:	cf 2c       	mov	r12, r15
    6b64:	d9 2e       	mov	r13, r25
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    6b66:	8f ef       	ldi	r24, 0xFF	; 255
    6b68:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <spi_wr_rd>
    6b6c:	f6 01       	movw	r30, r12
    6b6e:	80 83       	st	Z, r24
		*p++ = spi_wr_rd(0xff);
    6b70:	8f ef       	ldi	r24, 0xFF	; 255
    6b72:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <spi_wr_rd>
    6b76:	f6 01       	movw	r30, r12
    6b78:	81 83       	std	Z+1, r24	; 0x01
		
	} while (cnt -= 2);
    6b7a:	02 50       	subi	r16, 0x02	; 2
    6b7c:	11 09       	sbc	r17, r1
    6b7e:	f2 e0       	ldi	r31, 0x02	; 2
    6b80:	cf 0e       	add	r12, r31
    6b82:	d1 1c       	adc	r13, r1
    6b84:	01 15       	cp	r16, r1
    6b86:	11 05       	cpc	r17, r1
    6b88:	71 f7       	brne	.-36     	; 0x6b66 <rcvr_datablock+0x3e>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    6b8a:	8f ef       	ldi	r24, 0xFF	; 255
    6b8c:	ae df       	rcall	.-164    	; 0x6aea <xchg_spi>
	xchg_spi(0xFF);
    6b8e:	8f ef       	ldi	r24, 0xFF	; 255
    6b90:	ac df       	rcall	.-168    	; 0x6aea <xchg_spi>
    6b92:	81 e0       	ldi	r24, 0x01	; 1
    6b94:	90 e0       	ldi	r25, 0x00	; 0
    6b96:	02 c0       	rjmp	.+4      	; 0x6b9c <rcvr_datablock+0x74>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    6b98:	80 e0       	ldi	r24, 0x00	; 0
    6b9a:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    6b9c:	0f 90       	pop	r0
    6b9e:	df 91       	pop	r29
    6ba0:	cf 91       	pop	r28
    6ba2:	1f 91       	pop	r17
    6ba4:	0f 91       	pop	r16
    6ba6:	ff 90       	pop	r15
    6ba8:	df 90       	pop	r13
    6baa:	cf 90       	pop	r12
    6bac:	08 95       	ret

00006bae <wait_ready.constprop.2>:
)
{
	BYTE d;


	Timer2 = wt / 10;
    6bae:	82 e3       	ldi	r24, 0x32	; 50
    6bb0:	80 93 19 2b 	sts	0x2B19, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6bb4:	8f ef       	ldi	r24, 0xFF	; 255
    6bb6:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <spi_wr_rd>
    6bba:	28 2f       	mov	r18, r24


	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    6bbc:	8f 3f       	cpi	r24, 0xFF	; 255
    6bbe:	21 f0       	breq	.+8      	; 0x6bc8 <wait_ready.constprop.2+0x1a>
    6bc0:	80 91 19 2b 	lds	r24, 0x2B19
    6bc4:	81 11       	cpse	r24, r1
    6bc6:	f6 cf       	rjmp	.-20     	; 0x6bb4 <wait_ready.constprop.2+0x6>

	return (d == 0xFF) ? 1 : 0;
    6bc8:	81 e0       	ldi	r24, 0x01	; 1
    6bca:	90 e0       	ldi	r25, 0x00	; 0
    6bcc:	2f 3f       	cpi	r18, 0xFF	; 255
    6bce:	11 f0       	breq	.+4      	; 0x6bd4 <wait_ready.constprop.2+0x26>
    6bd0:	80 e0       	ldi	r24, 0x00	; 0
    6bd2:	90 e0       	ldi	r25, 0x00	; 0
}
    6bd4:	08 95       	ret

00006bd6 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    6bd6:	cf 93       	push	r28
    6bd8:	df 93       	push	r29
    6bda:	00 d0       	rcall	.+0      	; 0x6bdc <select+0x6>
    6bdc:	cd b7       	in	r28, 0x3d	; 61
    6bde:	de b7       	in	r29, 0x3e	; 62
	CS_LOW();		/* Set CS# low */
    6be0:	80 e1       	ldi	r24, 0x10	; 16
    6be2:	80 93 46 06 	sts	0x0646, r24
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    6be6:	8f ef       	ldi	r24, 0xFF	; 255
    6be8:	80 df       	rcall	.-256    	; 0x6aea <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    6bea:	e1 df       	rcall	.-62     	; 0x6bae <wait_ready.constprop.2>
    6bec:	00 97       	sbiw	r24, 0x00	; 0
    6bee:	31 f4       	brne	.+12     	; 0x6bfc <select+0x26>

	deselect();
    6bf0:	89 83       	std	Y+1, r24	; 0x01
    6bf2:	9a 83       	std	Y+2, r25	; 0x02
    6bf4:	7c df       	rcall	.-264    	; 0x6aee <deselect>
	return 0;	/* Timeout */
    6bf6:	89 81       	ldd	r24, Y+1	; 0x01
    6bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    6bfa:	02 c0       	rjmp	.+4      	; 0x6c00 <select+0x2a>
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    6bfc:	81 e0       	ldi	r24, 0x01	; 1
    6bfe:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    6c00:	0f 90       	pop	r0
    6c02:	0f 90       	pop	r0
    6c04:	df 91       	pop	r29
    6c06:	cf 91       	pop	r28
    6c08:	08 95       	ret

00006c0a <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    6c0a:	ff 92       	push	r15
    6c0c:	0f 93       	push	r16
    6c0e:	1f 93       	push	r17
    6c10:	cf 93       	push	r28
    6c12:	df 93       	push	r29
    6c14:	c8 2f       	mov	r28, r24
    6c16:	d4 2f       	mov	r29, r20
    6c18:	15 2f       	mov	r17, r21
    6c1a:	06 2f       	mov	r16, r22
    6c1c:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    6c1e:	87 ff       	sbrs	r24, 7
    6c20:	08 c0       	rjmp	.+16     	; 0x6c32 <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    6c22:	40 e0       	ldi	r20, 0x00	; 0
    6c24:	50 e0       	ldi	r21, 0x00	; 0
    6c26:	ba 01       	movw	r22, r20
    6c28:	87 e3       	ldi	r24, 0x37	; 55
    6c2a:	ef df       	rcall	.-34     	; 0x6c0a <send_cmd>
		if (res > 1) return res;
    6c2c:	82 30       	cpi	r24, 0x02	; 2
    6c2e:	58 f5       	brcc	.+86     	; 0x6c86 <send_cmd+0x7c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    6c30:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    6c32:	cc 30       	cpi	r28, 0x0C	; 12
    6c34:	71 f4       	brne	.+28     	; 0x6c52 <send_cmd+0x48>
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    6c36:	8c 2f       	mov	r24, r28
    6c38:	80 64       	ori	r24, 0x40	; 64
    6c3a:	57 df       	rcall	.-338    	; 0x6aea <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    6c3c:	8f 2d       	mov	r24, r15
    6c3e:	55 df       	rcall	.-342    	; 0x6aea <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    6c40:	80 2f       	mov	r24, r16
    6c42:	53 df       	rcall	.-346    	; 0x6aea <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    6c44:	81 2f       	mov	r24, r17
    6c46:	51 df       	rcall	.-350    	; 0x6aea <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    6c48:	8d 2f       	mov	r24, r29
    6c4a:	4f df       	rcall	.-354    	; 0x6aea <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    6c4c:	cc 23       	and	r28, r28
    6c4e:	59 f0       	breq	.+22     	; 0x6c66 <send_cmd+0x5c>
    6c50:	06 c0       	rjmp	.+12     	; 0x6c5e <send_cmd+0x54>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
    6c52:	4d df       	rcall	.-358    	; 0x6aee <deselect>
		if (!select()) return 0xFF;
    6c54:	c0 df       	rcall	.-128    	; 0x6bd6 <select>
    6c56:	89 2b       	or	r24, r25
    6c58:	71 f7       	brne	.-36     	; 0x6c36 <send_cmd+0x2c>
    6c5a:	8f ef       	ldi	r24, 0xFF	; 255
    6c5c:	14 c0       	rjmp	.+40     	; 0x6c86 <send_cmd+0x7c>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    6c5e:	c8 30       	cpi	r28, 0x08	; 8
    6c60:	21 f0       	breq	.+8      	; 0x6c6a <send_cmd+0x60>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    6c62:	81 e0       	ldi	r24, 0x01	; 1
    6c64:	03 c0       	rjmp	.+6      	; 0x6c6c <send_cmd+0x62>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    6c66:	85 e9       	ldi	r24, 0x95	; 149
    6c68:	01 c0       	rjmp	.+2      	; 0x6c6c <send_cmd+0x62>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    6c6a:	87 e8       	ldi	r24, 0x87	; 135
	xchg_spi(n);
    6c6c:	3e df       	rcall	.-388    	; 0x6aea <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    6c6e:	cc 30       	cpi	r28, 0x0C	; 12
    6c70:	11 f4       	brne	.+4      	; 0x6c76 <send_cmd+0x6c>
    6c72:	8f ef       	ldi	r24, 0xFF	; 255
    6c74:	3a df       	rcall	.-396    	; 0x6aea <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    6c76:	ca e0       	ldi	r28, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6c78:	8f ef       	ldi	r24, 0xFF	; 255
    6c7a:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <spi_wr_rd>
	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);
    6c7e:	87 ff       	sbrs	r24, 7
    6c80:	02 c0       	rjmp	.+4      	; 0x6c86 <send_cmd+0x7c>
    6c82:	c1 50       	subi	r28, 0x01	; 1
    6c84:	c9 f7       	brne	.-14     	; 0x6c78 <send_cmd+0x6e>

	return res;			/* Return with the response value */
}
    6c86:	df 91       	pop	r29
    6c88:	cf 91       	pop	r28
    6c8a:	1f 91       	pop	r17
    6c8c:	0f 91       	pop	r16
    6c8e:	ff 90       	pop	r15
    6c90:	08 95       	ret

00006c92 <xmit_datablock.part.1>:
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
    6c92:	0f 93       	push	r16
    6c94:	1f 93       	push	r17
    6c96:	cf 93       	push	r28
    6c98:	df 93       	push	r29
    6c9a:	ec 01       	movw	r28, r24
    6c9c:	8c 01       	movw	r16, r24
    6c9e:	1e 5f       	subi	r17, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		spi_wr_rd(*p++);
    6ca0:	88 81       	ld	r24, Y
    6ca2:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <spi_wr_rd>
		spi_wr_rd(*p++);
    6ca6:	89 81       	ldd	r24, Y+1	; 0x01
    6ca8:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <spi_wr_rd>
    6cac:	22 96       	adiw	r28, 0x02	; 2
		
	} while (cnt -= 2);
    6cae:	c0 17       	cp	r28, r16
    6cb0:	d1 07       	cpc	r29, r17
    6cb2:	b1 f7       	brne	.-20     	; 0x6ca0 <xmit_datablock.part.1+0xe>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    6cb4:	8f ef       	ldi	r24, 0xFF	; 255
    6cb6:	19 df       	rcall	.-462    	; 0x6aea <xchg_spi>
		xchg_spi(0xFF);
    6cb8:	8f ef       	ldi	r24, 0xFF	; 255
    6cba:	17 df       	rcall	.-466    	; 0x6aea <xchg_spi>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6cbc:	8f ef       	ldi	r24, 0xFF	; 255
    6cbe:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <spi_wr_rd>
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
		xchg_spi(0xFF);
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    6cc2:	28 2f       	mov	r18, r24
    6cc4:	2f 71       	andi	r18, 0x1F	; 31
    6cc6:	81 e0       	ldi	r24, 0x01	; 1
    6cc8:	90 e0       	ldi	r25, 0x00	; 0
    6cca:	25 30       	cpi	r18, 0x05	; 5
    6ccc:	11 f0       	breq	.+4      	; 0x6cd2 <xmit_datablock.part.1+0x40>
    6cce:	80 e0       	ldi	r24, 0x00	; 0
    6cd0:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}

	return 1;
}
    6cd2:	df 91       	pop	r29
    6cd4:	cf 91       	pop	r28
    6cd6:	1f 91       	pop	r17
    6cd8:	0f 91       	pop	r16
    6cda:	08 95       	ret

00006cdc <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    6cdc:	ef 92       	push	r14
    6cde:	ff 92       	push	r15
    6ce0:	0f 93       	push	r16
    6ce2:	1f 93       	push	r17
    6ce4:	cf 93       	push	r28
    6ce6:	df 93       	push	r29
    6ce8:	00 d0       	rcall	.+0      	; 0x6cea <disk_initialize+0xe>
    6cea:	00 d0       	rcall	.+0      	; 0x6cec <disk_initialize+0x10>
    6cec:	cd b7       	in	r28, 0x3d	; 61
    6cee:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    6cf0:	81 11       	cpse	r24, r1
    6cf2:	cf c0       	rjmp	.+414    	; 0x6e92 <disk_initialize+0x1b6>
	power_off();						/* Turn off the socket power to reset the card */
    6cf4:	02 df       	rcall	.-508    	; 0x6afa <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    6cf6:	80 91 24 20 	lds	r24, 0x2024
    6cfa:	81 fd       	sbrc	r24, 1
    6cfc:	c7 c0       	rjmp	.+398    	; 0x6e8c <disk_initialize+0x1b0>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
	PR.PRPC &= ~0x01;
    6cfe:	80 91 73 00 	lds	r24, 0x0073
    6d02:	8e 7f       	andi	r24, 0xFE	; 254
    6d04:	80 93 73 00 	sts	0x0073, r24
	
	TCC0.CNT = 0;
    6d08:	10 92 20 08 	sts	0x0820, r1
    6d0c:	10 92 21 08 	sts	0x0821, r1
	TCC0.PER = 1250;
    6d10:	82 ee       	ldi	r24, 0xE2	; 226
    6d12:	94 e0       	ldi	r25, 0x04	; 4
    6d14:	80 93 26 08 	sts	0x0826, r24
    6d18:	90 93 27 08 	sts	0x0827, r25
	TCC0.CTRLA = TC_CLKSEL_DIV256_gc;
    6d1c:	26 e0       	ldi	r18, 0x06	; 6
    6d1e:	20 93 00 08 	sts	0x0800, r18
	
	TCC0.CCB = 1250;
    6d22:	80 93 2a 08 	sts	0x082A, r24
    6d26:	90 93 2b 08 	sts	0x082B, r25
	TCC0.INTCTRLB |= TC_CCBINTLVL_LO_gc;
    6d2a:	80 91 07 08 	lds	r24, 0x0807
    6d2e:	84 60       	ori	r24, 0x04	; 4
    6d30:	80 93 07 08 	sts	0x0807, r24
	TCC0.CTRLB |= TC0_CCBEN_bm;
    6d34:	80 91 01 08 	lds	r24, 0x0801
    6d38:	80 62       	ori	r24, 0x20	; 32
    6d3a:	80 93 01 08 	sts	0x0801, r24
	
	PORTB.DIRSET = PIN1_bm;
    6d3e:	82 e0       	ldi	r24, 0x02	; 2
    6d40:	80 93 21 06 	sts	0x0621, r24
	PORTB.OUTCLR = PIN1_bm;
    6d44:	80 93 26 06 	sts	0x0626, r24
    6d48:	2f ef       	ldi	r18, 0xFF	; 255
    6d4a:	83 ef       	ldi	r24, 0xF3	; 243
    6d4c:	91 e0       	ldi	r25, 0x01	; 1
    6d4e:	21 50       	subi	r18, 0x01	; 1
    6d50:	80 40       	sbci	r24, 0x00	; 0
    6d52:	90 40       	sbci	r25, 0x00	; 0
    6d54:	e1 f7       	brne	.-8      	; 0x6d4e <disk_initialize+0x72>
    6d56:	00 c0       	rjmp	.+0      	; 0x6d58 <disk_initialize+0x7c>
    6d58:	00 00       	nop
	_delay_ms(20);
	
	spi_setup();
    6d5a:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <spi_setup>

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    6d5e:	82 ed       	ldi	r24, 0xD2	; 210
    6d60:	80 93 c0 08 	sts	0x08C0, r24
    6d64:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    6d66:	8f ef       	ldi	r24, 0xFF	; 255
    6d68:	c0 de       	rcall	.-640    	; 0x6aea <xchg_spi>
    6d6a:	11 50       	subi	r17, 0x01	; 1
    6d6c:	e1 f7       	brne	.-8      	; 0x6d66 <disk_initialize+0x8a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    6d6e:	40 e0       	ldi	r20, 0x00	; 0
    6d70:	50 e0       	ldi	r21, 0x00	; 0
    6d72:	ba 01       	movw	r22, r20
    6d74:	80 e0       	ldi	r24, 0x00	; 0
    6d76:	49 df       	rcall	.-366    	; 0x6c0a <send_cmd>
    6d78:	81 30       	cpi	r24, 0x01	; 1
    6d7a:	09 f0       	breq	.+2      	; 0x6d7e <disk_initialize+0xa2>
    6d7c:	77 c0       	rjmp	.+238    	; 0x6e6c <disk_initialize+0x190>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    6d7e:	84 e6       	ldi	r24, 0x64	; 100
    6d80:	80 93 1a 2b 	sts	0x2B1A, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    6d84:	4a ea       	ldi	r20, 0xAA	; 170
    6d86:	51 e0       	ldi	r21, 0x01	; 1
    6d88:	60 e0       	ldi	r22, 0x00	; 0
    6d8a:	70 e0       	ldi	r23, 0x00	; 0
    6d8c:	88 e0       	ldi	r24, 0x08	; 8
    6d8e:	3d df       	rcall	.-390    	; 0x6c0a <send_cmd>
    6d90:	81 30       	cpi	r24, 0x01	; 1
    6d92:	09 f0       	breq	.+2      	; 0x6d96 <disk_initialize+0xba>
    6d94:	43 c0       	rjmp	.+134    	; 0x6e1c <disk_initialize+0x140>
    6d96:	7e 01       	movw	r14, r28
    6d98:	e5 e0       	ldi	r30, 0x05	; 5
    6d9a:	ee 0e       	add	r14, r30
    6d9c:	f1 1c       	adc	r15, r1
    6d9e:	8e 01       	movw	r16, r28
    6da0:	0f 5f       	subi	r16, 0xFF	; 255
    6da2:	1f 4f       	sbci	r17, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6da4:	8f ef       	ldi	r24, 0xFF	; 255
    6da6:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <spi_wr_rd>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    6daa:	f8 01       	movw	r30, r16
    6dac:	81 93       	st	Z+, r24
    6dae:	8f 01       	movw	r16, r30
    6db0:	ee 15       	cp	r30, r14
    6db2:	ff 05       	cpc	r31, r15
    6db4:	b9 f7       	brne	.-18     	; 0x6da4 <disk_initialize+0xc8>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    6db6:	8b 81       	ldd	r24, Y+3	; 0x03
    6db8:	81 30       	cpi	r24, 0x01	; 1
    6dba:	09 f0       	breq	.+2      	; 0x6dbe <disk_initialize+0xe2>
    6dbc:	57 c0       	rjmp	.+174    	; 0x6e6c <disk_initialize+0x190>
    6dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    6dc0:	8a 3a       	cpi	r24, 0xAA	; 170
    6dc2:	09 f0       	breq	.+2      	; 0x6dc6 <disk_initialize+0xea>
    6dc4:	53 c0       	rjmp	.+166    	; 0x6e6c <disk_initialize+0x190>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    6dc6:	80 91 1a 2b 	lds	r24, 0x2B1A
    6dca:	81 11       	cpse	r24, r1
    6dcc:	06 c0       	rjmp	.+12     	; 0x6dda <disk_initialize+0xfe>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    6dce:	80 91 1a 2b 	lds	r24, 0x2B1A
    6dd2:	88 23       	and	r24, r24
    6dd4:	09 f4       	brne	.+2      	; 0x6dd8 <disk_initialize+0xfc>
    6dd6:	4a c0       	rjmp	.+148    	; 0x6e6c <disk_initialize+0x190>
    6dd8:	09 c0       	rjmp	.+18     	; 0x6dec <disk_initialize+0x110>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    6dda:	40 e0       	ldi	r20, 0x00	; 0
    6ddc:	50 e0       	ldi	r21, 0x00	; 0
    6dde:	60 e0       	ldi	r22, 0x00	; 0
    6de0:	70 e4       	ldi	r23, 0x40	; 64
    6de2:	89 ea       	ldi	r24, 0xA9	; 169
    6de4:	12 df       	rcall	.-476    	; 0x6c0a <send_cmd>
    6de6:	81 11       	cpse	r24, r1
    6de8:	ee cf       	rjmp	.-36     	; 0x6dc6 <disk_initialize+0xea>
    6dea:	f1 cf       	rjmp	.-30     	; 0x6dce <disk_initialize+0xf2>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    6dec:	40 e0       	ldi	r20, 0x00	; 0
    6dee:	50 e0       	ldi	r21, 0x00	; 0
    6df0:	ba 01       	movw	r22, r20
    6df2:	8a e3       	ldi	r24, 0x3A	; 58
    6df4:	0a df       	rcall	.-492    	; 0x6c0a <send_cmd>
    6df6:	81 11       	cpse	r24, r1
    6df8:	39 c0       	rjmp	.+114    	; 0x6e6c <disk_initialize+0x190>
    6dfa:	8e 01       	movw	r16, r28
    6dfc:	0f 5f       	subi	r16, 0xFF	; 255
    6dfe:	1f 4f       	sbci	r17, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6e00:	8f ef       	ldi	r24, 0xFF	; 255
    6e02:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <spi_wr_rd>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    6e06:	f8 01       	movw	r30, r16
    6e08:	81 93       	st	Z+, r24
    6e0a:	8f 01       	movw	r16, r30
    6e0c:	ee 15       	cp	r30, r14
    6e0e:	ff 05       	cpc	r31, r15
    6e10:	b9 f7       	brne	.-18     	; 0x6e00 <disk_initialize+0x124>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    6e12:	89 81       	ldd	r24, Y+1	; 0x01
    6e14:	86 ff       	sbrs	r24, 6
    6e16:	28 c0       	rjmp	.+80     	; 0x6e68 <disk_initialize+0x18c>
    6e18:	1c e0       	ldi	r17, 0x0C	; 12
    6e1a:	29 c0       	rjmp	.+82     	; 0x6e6e <disk_initialize+0x192>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    6e1c:	40 e0       	ldi	r20, 0x00	; 0
    6e1e:	50 e0       	ldi	r21, 0x00	; 0
    6e20:	ba 01       	movw	r22, r20
    6e22:	89 ea       	ldi	r24, 0xA9	; 169
    6e24:	f2 de       	rcall	.-540    	; 0x6c0a <send_cmd>
    6e26:	82 30       	cpi	r24, 0x02	; 2
    6e28:	18 f4       	brcc	.+6      	; 0x6e30 <disk_initialize+0x154>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    6e2a:	12 e0       	ldi	r17, 0x02	; 2
    6e2c:	09 ea       	ldi	r16, 0xA9	; 169
    6e2e:	02 c0       	rjmp	.+4      	; 0x6e34 <disk_initialize+0x158>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    6e30:	11 e0       	ldi	r17, 0x01	; 1
    6e32:	01 e0       	ldi	r16, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    6e34:	80 91 1a 2b 	lds	r24, 0x2B1A
    6e38:	81 11       	cpse	r24, r1
    6e3a:	05 c0       	rjmp	.+10     	; 0x6e46 <disk_initialize+0x16a>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    6e3c:	80 91 1a 2b 	lds	r24, 0x2B1A
    6e40:	88 23       	and	r24, r24
    6e42:	a1 f0       	breq	.+40     	; 0x6e6c <disk_initialize+0x190>
    6e44:	08 c0       	rjmp	.+16     	; 0x6e56 <disk_initialize+0x17a>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    6e46:	40 e0       	ldi	r20, 0x00	; 0
    6e48:	50 e0       	ldi	r21, 0x00	; 0
    6e4a:	ba 01       	movw	r22, r20
    6e4c:	80 2f       	mov	r24, r16
    6e4e:	dd de       	rcall	.-582    	; 0x6c0a <send_cmd>
    6e50:	81 11       	cpse	r24, r1
    6e52:	f0 cf       	rjmp	.-32     	; 0x6e34 <disk_initialize+0x158>
    6e54:	f3 cf       	rjmp	.-26     	; 0x6e3c <disk_initialize+0x160>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    6e56:	40 e0       	ldi	r20, 0x00	; 0
    6e58:	52 e0       	ldi	r21, 0x02	; 2
    6e5a:	60 e0       	ldi	r22, 0x00	; 0
    6e5c:	70 e0       	ldi	r23, 0x00	; 0
    6e5e:	80 e1       	ldi	r24, 0x10	; 16
    6e60:	d4 de       	rcall	.-600    	; 0x6c0a <send_cmd>
    6e62:	81 11       	cpse	r24, r1
    6e64:	03 c0       	rjmp	.+6      	; 0x6e6c <disk_initialize+0x190>
    6e66:	03 c0       	rjmp	.+6      	; 0x6e6e <disk_initialize+0x192>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    6e68:	14 e0       	ldi	r17, 0x04	; 4
    6e6a:	01 c0       	rjmp	.+2      	; 0x6e6e <disk_initialize+0x192>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    6e6c:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	CardType = ty;
    6e6e:	10 93 18 2b 	sts	0x2B18, r17
	deselect();
    6e72:	3d de       	rcall	.-902    	; 0x6aee <deselect>

	if (ty) {			/* Initialization succeded */
    6e74:	11 23       	and	r17, r17
    6e76:	49 f0       	breq	.+18     	; 0x6e8a <disk_initialize+0x1ae>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    6e78:	80 91 24 20 	lds	r24, 0x2024
    6e7c:	8e 7f       	andi	r24, 0xFE	; 254
    6e7e:	80 93 24 20 	sts	0x2024, r24
		FCLK_FAST();
    6e82:	80 ed       	ldi	r24, 0xD0	; 208
    6e84:	80 93 c0 08 	sts	0x08C0, r24
    6e88:	01 c0       	rjmp	.+2      	; 0x6e8c <disk_initialize+0x1b0>
	} else {			/* Initialization failed */
		power_off();
    6e8a:	37 de       	rcall	.-914    	; 0x6afa <power_off>
	}

	return Stat;
    6e8c:	80 91 24 20 	lds	r24, 0x2024
    6e90:	01 c0       	rjmp	.+2      	; 0x6e94 <disk_initialize+0x1b8>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    6e92:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    6e94:	24 96       	adiw	r28, 0x04	; 4
    6e96:	cd bf       	out	0x3d, r28	; 61
    6e98:	de bf       	out	0x3e, r29	; 62
    6e9a:	df 91       	pop	r29
    6e9c:	cf 91       	pop	r28
    6e9e:	1f 91       	pop	r17
    6ea0:	0f 91       	pop	r16
    6ea2:	ff 90       	pop	r15
    6ea4:	ef 90       	pop	r14
    6ea6:	08 95       	ret

00006ea8 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    6ea8:	81 11       	cpse	r24, r1
    6eaa:	03 c0       	rjmp	.+6      	; 0x6eb2 <disk_status+0xa>
	return Stat;
    6eac:	80 91 24 20 	lds	r24, 0x2024
    6eb0:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    6eb2:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    6eb4:	08 95       	ret

00006eb6 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    6eb6:	ff 92       	push	r15
    6eb8:	0f 93       	push	r16
    6eba:	1f 93       	push	r17
    6ebc:	cf 93       	push	r28
    6ebe:	df 93       	push	r29
    6ec0:	eb 01       	movw	r28, r22
    6ec2:	ba 01       	movw	r22, r20
    6ec4:	a9 01       	movw	r20, r18
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    6ec6:	81 11       	cpse	r24, r1
    6ec8:	38 c0       	rjmp	.+112    	; 0x6f3a <disk_read+0x84>
    6eca:	01 15       	cp	r16, r1
    6ecc:	11 05       	cpc	r17, r1
    6ece:	a9 f1       	breq	.+106    	; 0x6f3a <disk_read+0x84>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6ed0:	80 91 24 20 	lds	r24, 0x2024
    6ed4:	80 fd       	sbrc	r24, 0
    6ed6:	33 c0       	rjmp	.+102    	; 0x6f3e <disk_read+0x88>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    6ed8:	80 91 18 2b 	lds	r24, 0x2B18
    6edc:	83 fd       	sbrc	r24, 3
    6ede:	07 c0       	rjmp	.+14     	; 0x6eee <disk_read+0x38>
    6ee0:	29 e0       	ldi	r18, 0x09	; 9
    6ee2:	44 0f       	add	r20, r20
    6ee4:	55 1f       	adc	r21, r21
    6ee6:	66 1f       	adc	r22, r22
    6ee8:	77 1f       	adc	r23, r23
    6eea:	2a 95       	dec	r18
    6eec:	d1 f7       	brne	.-12     	; 0x6ee2 <disk_read+0x2c>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    6eee:	02 30       	cpi	r16, 0x02	; 2
    6ef0:	11 05       	cpc	r17, r1
    6ef2:	18 f0       	brcs	.+6      	; 0x6efa <disk_read+0x44>
    6ef4:	92 e1       	ldi	r25, 0x12	; 18
    6ef6:	f9 2e       	mov	r15, r25
    6ef8:	02 c0       	rjmp	.+4      	; 0x6efe <disk_read+0x48>
    6efa:	81 e1       	ldi	r24, 0x11	; 17
    6efc:	f8 2e       	mov	r15, r24
	if (send_cmd(cmd, sector) == 0) {
    6efe:	8f 2d       	mov	r24, r15
    6f00:	84 de       	rcall	.-760    	; 0x6c0a <send_cmd>
    6f02:	81 11       	cpse	r24, r1
    6f04:	14 c0       	rjmp	.+40     	; 0x6f2e <disk_read+0x78>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    6f06:	60 e0       	ldi	r22, 0x00	; 0
    6f08:	72 e0       	ldi	r23, 0x02	; 2
    6f0a:	ce 01       	movw	r24, r28
    6f0c:	0d de       	rcall	.-998    	; 0x6b28 <rcvr_datablock>
    6f0e:	89 2b       	or	r24, r25
    6f10:	31 f0       	breq	.+12     	; 0x6f1e <disk_read+0x68>
			buff += 512;
    6f12:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    6f14:	01 50       	subi	r16, 0x01	; 1
    6f16:	11 09       	sbc	r17, r1
    6f18:	01 15       	cp	r16, r1
    6f1a:	11 05       	cpc	r17, r1
    6f1c:	a1 f7       	brne	.-24     	; 0x6f06 <disk_read+0x50>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    6f1e:	82 e1       	ldi	r24, 0x12	; 18
    6f20:	f8 12       	cpse	r15, r24
    6f22:	05 c0       	rjmp	.+10     	; 0x6f2e <disk_read+0x78>
    6f24:	40 e0       	ldi	r20, 0x00	; 0
    6f26:	50 e0       	ldi	r21, 0x00	; 0
    6f28:	ba 01       	movw	r22, r20
    6f2a:	8c e0       	ldi	r24, 0x0C	; 12
    6f2c:	6e de       	rcall	.-804    	; 0x6c0a <send_cmd>
	}
	deselect();
    6f2e:	df dd       	rcall	.-1090   	; 0x6aee <deselect>

	return count ? RES_ERROR : RES_OK;
    6f30:	81 e0       	ldi	r24, 0x01	; 1
    6f32:	01 2b       	or	r16, r17
    6f34:	29 f4       	brne	.+10     	; 0x6f40 <disk_read+0x8a>
    6f36:	80 e0       	ldi	r24, 0x00	; 0
    6f38:	03 c0       	rjmp	.+6      	; 0x6f40 <disk_read+0x8a>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    6f3a:	84 e0       	ldi	r24, 0x04	; 4
    6f3c:	01 c0       	rjmp	.+2      	; 0x6f40 <disk_read+0x8a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6f3e:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    6f40:	df 91       	pop	r29
    6f42:	cf 91       	pop	r28
    6f44:	1f 91       	pop	r17
    6f46:	0f 91       	pop	r16
    6f48:	ff 90       	pop	r15
    6f4a:	08 95       	ret

00006f4c <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    6f4c:	cf 92       	push	r12
    6f4e:	df 92       	push	r13
    6f50:	ef 92       	push	r14
    6f52:	ff 92       	push	r15
    6f54:	0f 93       	push	r16
    6f56:	1f 93       	push	r17
    6f58:	cf 93       	push	r28
    6f5a:	df 93       	push	r29
    6f5c:	eb 01       	movw	r28, r22
    6f5e:	69 01       	movw	r12, r18
    6f60:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    6f62:	81 11       	cpse	r24, r1
    6f64:	59 c0       	rjmp	.+178    	; 0x7018 <disk_write+0xcc>
    6f66:	01 15       	cp	r16, r1
    6f68:	11 05       	cpc	r17, r1
    6f6a:	09 f4       	brne	.+2      	; 0x6f6e <disk_write+0x22>
    6f6c:	55 c0       	rjmp	.+170    	; 0x7018 <disk_write+0xcc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6f6e:	80 91 24 20 	lds	r24, 0x2024
    6f72:	80 fd       	sbrc	r24, 0
    6f74:	53 c0       	rjmp	.+166    	; 0x701c <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    6f76:	80 91 24 20 	lds	r24, 0x2024
    6f7a:	82 fd       	sbrc	r24, 2
    6f7c:	51 c0       	rjmp	.+162    	; 0x7020 <disk_write+0xd4>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    6f7e:	80 91 18 2b 	lds	r24, 0x2B18
    6f82:	83 fd       	sbrc	r24, 3
    6f84:	07 c0       	rjmp	.+14     	; 0x6f94 <disk_write+0x48>
    6f86:	39 e0       	ldi	r19, 0x09	; 9
    6f88:	cc 0c       	add	r12, r12
    6f8a:	dd 1c       	adc	r13, r13
    6f8c:	ee 1c       	adc	r14, r14
    6f8e:	ff 1c       	adc	r15, r15
    6f90:	3a 95       	dec	r19
    6f92:	d1 f7       	brne	.-12     	; 0x6f88 <disk_write+0x3c>

	if (count == 1) {	/* Single block write */
    6f94:	01 30       	cpi	r16, 0x01	; 1
    6f96:	11 05       	cpc	r17, r1
    6f98:	c1 f4       	brne	.+48     	; 0x6fca <disk_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    6f9a:	b7 01       	movw	r22, r14
    6f9c:	a6 01       	movw	r20, r12
    6f9e:	88 e1       	ldi	r24, 0x18	; 24
    6fa0:	34 de       	rcall	.-920    	; 0x6c0a <send_cmd>
    6fa2:	88 23       	and	r24, r24
    6fa4:	19 f0       	breq	.+6      	; 0x6fac <disk_write+0x60>
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    6fa6:	01 e0       	ldi	r16, 0x01	; 1
    6fa8:	10 e0       	ldi	r17, 0x00	; 0
    6faa:	30 c0       	rjmp	.+96     	; 0x700c <disk_write+0xc0>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    6fac:	00 de       	rcall	.-1024   	; 0x6bae <wait_ready.constprop.2>
    6fae:	89 2b       	or	r24, r25
    6fb0:	d1 f3       	breq	.-12     	; 0x6fa6 <disk_write+0x5a>

	xchg_spi(token);					/* Xmit data token */
    6fb2:	8e ef       	ldi	r24, 0xFE	; 254
    6fb4:	9a dd       	rcall	.-1228   	; 0x6aea <xchg_spi>
    6fb6:	ce 01       	movw	r24, r28
    6fb8:	6c de       	rcall	.-808    	; 0x6c92 <xmit_datablock.part.1>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
    6fba:	31 e0       	ldi	r19, 0x01	; 1
    6fbc:	20 e0       	ldi	r18, 0x00	; 0
    6fbe:	89 2b       	or	r24, r25
    6fc0:	09 f0       	breq	.+2      	; 0x6fc4 <disk_write+0x78>
    6fc2:	30 e0       	ldi	r19, 0x00	; 0
    6fc4:	03 2f       	mov	r16, r19
    6fc6:	12 2f       	mov	r17, r18
    6fc8:	21 c0       	rjmp	.+66     	; 0x700c <disk_write+0xc0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    6fca:	86 70       	andi	r24, 0x06	; 6
    6fcc:	29 f0       	breq	.+10     	; 0x6fd8 <disk_write+0x8c>
    6fce:	a8 01       	movw	r20, r16
    6fd0:	60 e0       	ldi	r22, 0x00	; 0
    6fd2:	70 e0       	ldi	r23, 0x00	; 0
    6fd4:	87 e9       	ldi	r24, 0x97	; 151
    6fd6:	19 de       	rcall	.-974    	; 0x6c0a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    6fd8:	b7 01       	movw	r22, r14
    6fda:	a6 01       	movw	r20, r12
    6fdc:	89 e1       	ldi	r24, 0x19	; 25
    6fde:	15 de       	rcall	.-982    	; 0x6c0a <send_cmd>
    6fe0:	81 11       	cpse	r24, r1
    6fe2:	14 c0       	rjmp	.+40     	; 0x700c <disk_write+0xc0>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    6fe4:	e4 dd       	rcall	.-1080   	; 0x6bae <wait_ready.constprop.2>
    6fe6:	89 2b       	or	r24, r25
    6fe8:	61 f0       	breq	.+24     	; 0x7002 <disk_write+0xb6>

	xchg_spi(token);					/* Xmit data token */
    6fea:	8c ef       	ldi	r24, 0xFC	; 252
    6fec:	7e dd       	rcall	.-1284   	; 0x6aea <xchg_spi>
    6fee:	ce 01       	movw	r24, r28
    6ff0:	50 de       	rcall	.-864    	; 0x6c92 <xmit_datablock.part.1>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    6ff2:	89 2b       	or	r24, r25
    6ff4:	31 f0       	breq	.+12     	; 0x7002 <disk_write+0xb6>
				buff += 512;
    6ff6:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    6ff8:	01 50       	subi	r16, 0x01	; 1
    6ffa:	11 09       	sbc	r17, r1
    6ffc:	01 15       	cp	r16, r1
    6ffe:	11 05       	cpc	r17, r1
    7000:	89 f7       	brne	.-30     	; 0x6fe4 <disk_write+0x98>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    7002:	d5 dd       	rcall	.-1110   	; 0x6bae <wait_ready.constprop.2>
    7004:	89 2b       	or	r24, r25
    7006:	79 f2       	breq	.-98     	; 0x6fa6 <disk_write+0x5a>

	xchg_spi(token);					/* Xmit data token */
    7008:	8d ef       	ldi	r24, 0xFD	; 253
    700a:	6f dd       	rcall	.-1314   	; 0x6aea <xchg_spi>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
		}
	}
	deselect();
    700c:	70 dd       	rcall	.-1312   	; 0x6aee <deselect>

	return count ? RES_ERROR : RES_OK;
    700e:	81 e0       	ldi	r24, 0x01	; 1
    7010:	01 2b       	or	r16, r17
    7012:	39 f4       	brne	.+14     	; 0x7022 <disk_write+0xd6>
    7014:	80 e0       	ldi	r24, 0x00	; 0
    7016:	05 c0       	rjmp	.+10     	; 0x7022 <disk_write+0xd6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    7018:	84 e0       	ldi	r24, 0x04	; 4
    701a:	03 c0       	rjmp	.+6      	; 0x7022 <disk_write+0xd6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    701c:	83 e0       	ldi	r24, 0x03	; 3
    701e:	01 c0       	rjmp	.+2      	; 0x7022 <disk_write+0xd6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    7020:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    7022:	df 91       	pop	r29
    7024:	cf 91       	pop	r28
    7026:	1f 91       	pop	r17
    7028:	0f 91       	pop	r16
    702a:	ff 90       	pop	r15
    702c:	ef 90       	pop	r14
    702e:	df 90       	pop	r13
    7030:	cf 90       	pop	r12
    7032:	08 95       	ret

00007034 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    7034:	ef 92       	push	r14
    7036:	ff 92       	push	r15
    7038:	0f 93       	push	r16
    703a:	1f 93       	push	r17
    703c:	cf 93       	push	r28
    703e:	df 93       	push	r29
    7040:	cd b7       	in	r28, 0x3d	; 61
    7042:	de b7       	in	r29, 0x3e	; 62
    7044:	60 97       	sbiw	r28, 0x10	; 16
    7046:	cd bf       	out	0x3d, r28	; 61
    7048:	de bf       	out	0x3e, r29	; 62
    704a:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    704c:	81 11       	cpse	r24, r1
    704e:	46 c1       	rjmp	.+652    	; 0x72dc <disk_ioctl+0x2a8>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    7050:	80 91 24 20 	lds	r24, 0x2024
    7054:	80 fd       	sbrc	r24, 0
    7056:	44 c1       	rjmp	.+648    	; 0x72e0 <disk_ioctl+0x2ac>

	switch (cmd) {
    7058:	62 33       	cpi	r22, 0x32	; 50
    705a:	09 f4       	brne	.+2      	; 0x705e <disk_ioctl+0x2a>
    705c:	00 c1       	rjmp	.+512    	; 0x725e <disk_ioctl+0x22a>
    705e:	80 f4       	brcc	.+32     	; 0x7080 <disk_ioctl+0x4c>
    7060:	61 30       	cpi	r22, 0x01	; 1
    7062:	e1 f0       	breq	.+56     	; 0x709c <disk_ioctl+0x68>
    7064:	c8 f0       	brcs	.+50     	; 0x7098 <disk_ioctl+0x64>
    7066:	63 30       	cpi	r22, 0x03	; 3
    7068:	09 f4       	brne	.+2      	; 0x706c <disk_ioctl+0x38>
    706a:	7e c0       	rjmp	.+252    	; 0x7168 <disk_ioctl+0x134>
    706c:	67 30       	cpi	r22, 0x07	; 7
    706e:	09 f0       	breq	.+2      	; 0x7072 <disk_ioctl+0x3e>
    7070:	2f c1       	rjmp	.+606    	; 0x72d0 <disk_ioctl+0x29c>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    7072:	43 dd       	rcall	.-1402   	; 0x6afa <power_off>
		Stat |= STA_NOINIT;
    7074:	80 91 24 20 	lds	r24, 0x2024
    7078:	81 60       	ori	r24, 0x01	; 1
    707a:	80 93 24 20 	sts	0x2024, r24
    707e:	2a c1       	rjmp	.+596    	; 0x72d4 <disk_ioctl+0x2a0>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
    7080:	64 33       	cpi	r22, 0x34	; 52
    7082:	09 f4       	brne	.+2      	; 0x7086 <disk_ioctl+0x52>
    7084:	f6 c0       	rjmp	.+492    	; 0x7272 <disk_ioctl+0x23e>
    7086:	08 f4       	brcc	.+2      	; 0x708a <disk_ioctl+0x56>
    7088:	ef c0       	rjmp	.+478    	; 0x7268 <disk_ioctl+0x234>
    708a:	65 33       	cpi	r22, 0x35	; 53
    708c:	09 f4       	brne	.+2      	; 0x7090 <disk_ioctl+0x5c>
    708e:	00 c1       	rjmp	.+512    	; 0x7290 <disk_ioctl+0x25c>
    7090:	66 33       	cpi	r22, 0x36	; 54
    7092:	09 f4       	brne	.+2      	; 0x7096 <disk_ioctl+0x62>
    7094:	11 c1       	rjmp	.+546    	; 0x72b8 <disk_ioctl+0x284>
    7096:	1c c1       	rjmp	.+568    	; 0x72d0 <disk_ioctl+0x29c>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    7098:	9e dd       	rcall	.-1220   	; 0x6bd6 <select>
    709a:	f6 c0       	rjmp	.+492    	; 0x7288 <disk_ioctl+0x254>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    709c:	40 e0       	ldi	r20, 0x00	; 0
    709e:	50 e0       	ldi	r21, 0x00	; 0
    70a0:	ba 01       	movw	r22, r20
    70a2:	89 e0       	ldi	r24, 0x09	; 9
    70a4:	b2 dd       	rcall	.-1180   	; 0x6c0a <send_cmd>
    70a6:	88 23       	and	r24, r24
    70a8:	11 f0       	breq	.+4      	; 0x70ae <disk_ioctl+0x7a>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    70aa:	11 e0       	ldi	r17, 0x01	; 1
    70ac:	14 c1       	rjmp	.+552    	; 0x72d6 <disk_ioctl+0x2a2>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    70ae:	60 e1       	ldi	r22, 0x10	; 16
    70b0:	70 e0       	ldi	r23, 0x00	; 0
    70b2:	ce 01       	movw	r24, r28
    70b4:	01 96       	adiw	r24, 0x01	; 1
    70b6:	38 dd       	rcall	.-1424   	; 0x6b28 <rcvr_datablock>
    70b8:	89 2b       	or	r24, r25
    70ba:	b9 f3       	breq	.-18     	; 0x70aa <disk_ioctl+0x76>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    70bc:	99 81       	ldd	r25, Y+1	; 0x01
    70be:	92 95       	swap	r25
    70c0:	96 95       	lsr	r25
    70c2:	96 95       	lsr	r25
    70c4:	93 70       	andi	r25, 0x03	; 3
    70c6:	08 85       	ldd	r16, Y+8	; 0x08
    70c8:	49 85       	ldd	r20, Y+9	; 0x09
    70ca:	5a 85       	ldd	r21, Y+10	; 0x0a
    70cc:	91 30       	cpi	r25, 0x01	; 1
    70ce:	11 f5       	brne	.+68     	; 0x7114 <disk_ioctl+0xe0>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    70d0:	0f 73       	andi	r16, 0x3F	; 63
    70d2:	10 e0       	ldi	r17, 0x00	; 0
    70d4:	20 e0       	ldi	r18, 0x00	; 0
    70d6:	30 e0       	ldi	r19, 0x00	; 0
    70d8:	98 01       	movw	r18, r16
    70da:	11 27       	eor	r17, r17
    70dc:	00 27       	eor	r16, r16
    70de:	0f 5f       	subi	r16, 0xFF	; 255
    70e0:	1f 4f       	sbci	r17, 0xFF	; 255
    70e2:	2f 4f       	sbci	r18, 0xFF	; 255
    70e4:	3f 4f       	sbci	r19, 0xFF	; 255
    70e6:	84 2f       	mov	r24, r20
    70e8:	90 e0       	ldi	r25, 0x00	; 0
    70ea:	98 2f       	mov	r25, r24
    70ec:	88 27       	eor	r24, r24
    70ee:	85 0f       	add	r24, r21
    70f0:	91 1d       	adc	r25, r1
    70f2:	08 0f       	add	r16, r24
    70f4:	19 1f       	adc	r17, r25
    70f6:	21 1d       	adc	r18, r1
    70f8:	31 1d       	adc	r19, r1
				*(DWORD*)buff = csize << 10;
    70fa:	aa e0       	ldi	r26, 0x0A	; 10
    70fc:	00 0f       	add	r16, r16
    70fe:	11 1f       	adc	r17, r17
    7100:	22 1f       	adc	r18, r18
    7102:	33 1f       	adc	r19, r19
    7104:	aa 95       	dec	r26
    7106:	d1 f7       	brne	.-12     	; 0x70fc <disk_ioctl+0xc8>
    7108:	f7 01       	movw	r30, r14
    710a:	00 83       	st	Z, r16
    710c:	11 83       	std	Z+1, r17	; 0x01
    710e:	22 83       	std	Z+2, r18	; 0x02
    7110:	33 83       	std	Z+3, r19	; 0x03
    7112:	e0 c0       	rjmp	.+448    	; 0x72d4 <disk_ioctl+0x2a0>
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    7114:	42 95       	swap	r20
    7116:	46 95       	lsr	r20
    7118:	46 95       	lsr	r20
    711a:	43 70       	andi	r20, 0x03	; 3
    711c:	f4 e0       	ldi	r31, 0x04	; 4
    711e:	0f 9f       	mul	r16, r31
    7120:	c0 01       	movw	r24, r0
    7122:	11 24       	eor	r1, r1
    7124:	84 0f       	add	r24, r20
    7126:	91 1d       	adc	r25, r1
    7128:	01 96       	adiw	r24, 0x01	; 1
    712a:	2f 81       	ldd	r18, Y+7	; 0x07
    712c:	23 70       	andi	r18, 0x03	; 3
    712e:	30 e0       	ldi	r19, 0x00	; 0
    7130:	32 2f       	mov	r19, r18
    7132:	22 27       	eor	r18, r18
    7134:	33 0f       	add	r19, r19
    7136:	33 0f       	add	r19, r19
    7138:	82 0f       	add	r24, r18
    713a:	93 1f       	adc	r25, r19
    713c:	a0 e0       	ldi	r26, 0x00	; 0
    713e:	b0 e0       	ldi	r27, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    7140:	2e 81       	ldd	r18, Y+6	; 0x06
    7142:	2f 70       	andi	r18, 0x0F	; 15
    7144:	4b 85       	ldd	r20, Y+11	; 0x0b
    7146:	44 1f       	adc	r20, r20
    7148:	44 27       	eor	r20, r20
    714a:	44 1f       	adc	r20, r20
    714c:	24 0f       	add	r18, r20
    714e:	35 2f       	mov	r19, r21
    7150:	33 70       	andi	r19, 0x03	; 3
    7152:	33 0f       	add	r19, r19
    7154:	23 0f       	add	r18, r19
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    7156:	27 50       	subi	r18, 0x07	; 7
    7158:	04 c0       	rjmp	.+8      	; 0x7162 <disk_ioctl+0x12e>
    715a:	88 0f       	add	r24, r24
    715c:	99 1f       	adc	r25, r25
    715e:	aa 1f       	adc	r26, r26
    7160:	bb 1f       	adc	r27, r27
    7162:	2a 95       	dec	r18
    7164:	d2 f7       	brpl	.-12     	; 0x715a <disk_ioctl+0x126>
    7166:	75 c0       	rjmp	.+234    	; 0x7252 <disk_ioctl+0x21e>
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    7168:	80 91 18 2b 	lds	r24, 0x2B18
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    716c:	40 e0       	ldi	r20, 0x00	; 0
    716e:	50 e0       	ldi	r21, 0x00	; 0
    7170:	ba 01       	movw	r22, r20
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    7172:	82 ff       	sbrs	r24, 2
    7174:	27 c0       	rjmp	.+78     	; 0x71c4 <disk_ioctl+0x190>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    7176:	8d e8       	ldi	r24, 0x8D	; 141
    7178:	48 dd       	rcall	.-1392   	; 0x6c0a <send_cmd>
    717a:	81 11       	cpse	r24, r1
    717c:	96 cf       	rjmp	.-212    	; 0x70aa <disk_ioctl+0x76>
				xchg_spi(0xFF);
    717e:	8f ef       	ldi	r24, 0xFF	; 255
    7180:	b4 dc       	rcall	.-1688   	; 0x6aea <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    7182:	60 e1       	ldi	r22, 0x10	; 16
    7184:	70 e0       	ldi	r23, 0x00	; 0
    7186:	ce 01       	movw	r24, r28
    7188:	01 96       	adiw	r24, 0x01	; 1
    718a:	ce dc       	rcall	.-1636   	; 0x6b28 <rcvr_datablock>
    718c:	89 2b       	or	r24, r25
    718e:	09 f4       	brne	.+2      	; 0x7192 <disk_ioctl+0x15e>
    7190:	8c cf       	rjmp	.-232    	; 0x70aa <disk_ioctl+0x76>
    7192:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    7194:	8f ef       	ldi	r24, 0xFF	; 255
    7196:	a9 dc       	rcall	.-1710   	; 0x6aea <xchg_spi>
    7198:	11 50       	subi	r17, 0x01	; 1
    719a:	e1 f7       	brne	.-8      	; 0x7194 <disk_ioctl+0x160>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    719c:	2b 85       	ldd	r18, Y+11	; 0x0b
    719e:	22 95       	swap	r18
    71a0:	2f 70       	andi	r18, 0x0F	; 15
    71a2:	80 e1       	ldi	r24, 0x10	; 16
    71a4:	90 e0       	ldi	r25, 0x00	; 0
    71a6:	a0 e0       	ldi	r26, 0x00	; 0
    71a8:	b0 e0       	ldi	r27, 0x00	; 0
    71aa:	04 c0       	rjmp	.+8      	; 0x71b4 <disk_ioctl+0x180>
    71ac:	88 0f       	add	r24, r24
    71ae:	99 1f       	adc	r25, r25
    71b0:	aa 1f       	adc	r26, r26
    71b2:	bb 1f       	adc	r27, r27
    71b4:	2a 95       	dec	r18
    71b6:	d2 f7       	brpl	.-12     	; 0x71ac <disk_ioctl+0x178>
    71b8:	f7 01       	movw	r30, r14
    71ba:	80 83       	st	Z, r24
    71bc:	91 83       	std	Z+1, r25	; 0x01
    71be:	a2 83       	std	Z+2, r26	; 0x02
    71c0:	b3 83       	std	Z+3, r27	; 0x03
    71c2:	89 c0       	rjmp	.+274    	; 0x72d6 <disk_ioctl+0x2a2>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    71c4:	89 e0       	ldi	r24, 0x09	; 9
    71c6:	21 dd       	rcall	.-1470   	; 0x6c0a <send_cmd>
    71c8:	81 11       	cpse	r24, r1
    71ca:	6f cf       	rjmp	.-290    	; 0x70aa <disk_ioctl+0x76>
    71cc:	60 e1       	ldi	r22, 0x10	; 16
    71ce:	70 e0       	ldi	r23, 0x00	; 0
    71d0:	ce 01       	movw	r24, r28
    71d2:	01 96       	adiw	r24, 0x01	; 1
    71d4:	a9 dc       	rcall	.-1710   	; 0x6b28 <rcvr_datablock>
    71d6:	89 2b       	or	r24, r25
    71d8:	09 f4       	brne	.+2      	; 0x71dc <disk_ioctl+0x1a8>
    71da:	67 cf       	rjmp	.-306    	; 0x70aa <disk_ioctl+0x76>
				if (CardType & CT_SD1) {	/* SDv1 */
    71dc:	90 91 18 2b 	lds	r25, 0x2B18
    71e0:	2b 85       	ldd	r18, Y+11	; 0x0b
    71e2:	8c 85       	ldd	r24, Y+12	; 0x0c
    71e4:	91 ff       	sbrs	r25, 1
    71e6:	16 c0       	rjmp	.+44     	; 0x7214 <disk_ioctl+0x1e0>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    71e8:	88 1f       	adc	r24, r24
    71ea:	88 27       	eor	r24, r24
    71ec:	88 1f       	adc	r24, r24
    71ee:	90 e0       	ldi	r25, 0x00	; 0
    71f0:	01 96       	adiw	r24, 0x01	; 1
    71f2:	2f 73       	andi	r18, 0x3F	; 63
    71f4:	82 0f       	add	r24, r18
    71f6:	91 1d       	adc	r25, r1
    71f8:	82 0f       	add	r24, r18
    71fa:	91 1d       	adc	r25, r1
    71fc:	2e 85       	ldd	r18, Y+14	; 0x0e
    71fe:	22 95       	swap	r18
    7200:	26 95       	lsr	r18
    7202:	26 95       	lsr	r18
    7204:	23 70       	andi	r18, 0x03	; 3
    7206:	21 50       	subi	r18, 0x01	; 1
    7208:	02 c0       	rjmp	.+4      	; 0x720e <disk_ioctl+0x1da>
    720a:	88 0f       	add	r24, r24
    720c:	99 1f       	adc	r25, r25
    720e:	2a 95       	dec	r18
    7210:	e2 f7       	brpl	.-8      	; 0x720a <disk_ioctl+0x1d6>
    7212:	1d c0       	rjmp	.+58     	; 0x724e <disk_ioctl+0x21a>
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    7214:	98 2f       	mov	r25, r24
    7216:	93 70       	andi	r25, 0x03	; 3
    7218:	82 95       	swap	r24
    721a:	86 95       	lsr	r24
    721c:	87 70       	andi	r24, 0x07	; 7
    721e:	48 2f       	mov	r20, r24
    7220:	50 e0       	ldi	r21, 0x00	; 0
    7222:	f8 e0       	ldi	r31, 0x08	; 8
    7224:	9f 9f       	mul	r25, r31
    7226:	40 0d       	add	r20, r0
    7228:	51 1d       	adc	r21, r1
    722a:	11 24       	eor	r1, r1
    722c:	4f 5f       	subi	r20, 0xFF	; 255
    722e:	5f 4f       	sbci	r21, 0xFF	; 255
    7230:	2c 77       	andi	r18, 0x7C	; 124
    7232:	30 e0       	ldi	r19, 0x00	; 0
    7234:	35 95       	asr	r19
    7236:	27 95       	ror	r18
    7238:	35 95       	asr	r19
    723a:	27 95       	ror	r18
    723c:	2f 5f       	subi	r18, 0xFF	; 255
    723e:	3f 4f       	sbci	r19, 0xFF	; 255
    7240:	42 9f       	mul	r20, r18
    7242:	c0 01       	movw	r24, r0
    7244:	43 9f       	mul	r20, r19
    7246:	90 0d       	add	r25, r0
    7248:	52 9f       	mul	r21, r18
    724a:	90 0d       	add	r25, r0
    724c:	11 24       	eor	r1, r1
    724e:	a0 e0       	ldi	r26, 0x00	; 0
    7250:	b0 e0       	ldi	r27, 0x00	; 0
    7252:	f7 01       	movw	r30, r14
    7254:	80 83       	st	Z, r24
    7256:	91 83       	std	Z+1, r25	; 0x01
    7258:	a2 83       	std	Z+2, r26	; 0x02
    725a:	b3 83       	std	Z+3, r27	; 0x03
    725c:	3b c0       	rjmp	.+118    	; 0x72d4 <disk_ioctl+0x2a0>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    725e:	80 91 18 2b 	lds	r24, 0x2B18
    7262:	fa 01       	movw	r30, r20
    7264:	80 83       	st	Z, r24
    7266:	36 c0       	rjmp	.+108    	; 0x72d4 <disk_ioctl+0x2a0>
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    7268:	40 e0       	ldi	r20, 0x00	; 0
    726a:	50 e0       	ldi	r21, 0x00	; 0
    726c:	ba 01       	movw	r22, r20
    726e:	89 e0       	ldi	r24, 0x09	; 9
    7270:	04 c0       	rjmp	.+8      	; 0x727a <disk_ioctl+0x246>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    7272:	40 e0       	ldi	r20, 0x00	; 0
    7274:	50 e0       	ldi	r21, 0x00	; 0
    7276:	ba 01       	movw	r22, r20
    7278:	8a e0       	ldi	r24, 0x0A	; 10
    727a:	c7 dc       	rcall	.-1650   	; 0x6c0a <send_cmd>
    727c:	81 11       	cpse	r24, r1
    727e:	15 cf       	rjmp	.-470    	; 0x70aa <disk_ioctl+0x76>
			&& rcvr_datablock(ptr, 16))
    7280:	60 e1       	ldi	r22, 0x10	; 16
    7282:	70 e0       	ldi	r23, 0x00	; 0
    7284:	c7 01       	movw	r24, r14
    7286:	50 dc       	rcall	.-1888   	; 0x6b28 <rcvr_datablock>
    7288:	11 e0       	ldi	r17, 0x01	; 1
    728a:	89 2b       	or	r24, r25
    728c:	21 f1       	breq	.+72     	; 0x72d6 <disk_ioctl+0x2a2>
    728e:	22 c0       	rjmp	.+68     	; 0x72d4 <disk_ioctl+0x2a0>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    7290:	40 e0       	ldi	r20, 0x00	; 0
    7292:	50 e0       	ldi	r21, 0x00	; 0
    7294:	ba 01       	movw	r22, r20
    7296:	8a e3       	ldi	r24, 0x3A	; 58
    7298:	b8 dc       	rcall	.-1680   	; 0x6c0a <send_cmd>
    729a:	81 11       	cpse	r24, r1
    729c:	06 cf       	rjmp	.-500    	; 0x70aa <disk_ioctl+0x76>
    729e:	87 01       	movw	r16, r14
    72a0:	0c 5f       	subi	r16, 0xFC	; 252
    72a2:	1f 4f       	sbci	r17, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    72a4:	8f ef       	ldi	r24, 0xFF	; 255
    72a6:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <spi_wr_rd>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    72aa:	f7 01       	movw	r30, r14
    72ac:	81 93       	st	Z+, r24
    72ae:	7f 01       	movw	r14, r30
    72b0:	e0 17       	cp	r30, r16
    72b2:	f1 07       	cpc	r31, r17
    72b4:	b9 f7       	brne	.-18     	; 0x72a4 <disk_ioctl+0x270>
    72b6:	0e c0       	rjmp	.+28     	; 0x72d4 <disk_ioctl+0x2a0>
			res = RES_OK;
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    72b8:	40 e0       	ldi	r20, 0x00	; 0
    72ba:	50 e0       	ldi	r21, 0x00	; 0
    72bc:	ba 01       	movw	r22, r20
    72be:	8d e8       	ldi	r24, 0x8D	; 141
    72c0:	a4 dc       	rcall	.-1720   	; 0x6c0a <send_cmd>
    72c2:	81 11       	cpse	r24, r1
    72c4:	f2 ce       	rjmp	.-540    	; 0x70aa <disk_ioctl+0x76>
			xchg_spi(0xFF);
    72c6:	8f ef       	ldi	r24, 0xFF	; 255
    72c8:	10 dc       	rcall	.-2016   	; 0x6aea <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    72ca:	60 e4       	ldi	r22, 0x40	; 64
    72cc:	70 e0       	ldi	r23, 0x00	; 0
    72ce:	da cf       	rjmp	.-76     	; 0x7284 <disk_ioctl+0x250>
		Stat |= STA_NOINIT;
		res = RES_OK;
		break;

	default:
		res = RES_PARERR;
    72d0:	14 e0       	ldi	r17, 0x04	; 4
    72d2:	01 c0       	rjmp	.+2      	; 0x72d6 <disk_ioctl+0x2a2>
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
			res = RES_OK;
    72d4:	10 e0       	ldi	r17, 0x00	; 0

	default:
		res = RES_PARERR;
	}

	deselect();
    72d6:	0b dc       	rcall	.-2026   	; 0x6aee <deselect>

	return res;
    72d8:	81 2f       	mov	r24, r17
    72da:	03 c0       	rjmp	.+6      	; 0x72e2 <disk_ioctl+0x2ae>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    72dc:	84 e0       	ldi	r24, 0x04	; 4
    72de:	01 c0       	rjmp	.+2      	; 0x72e2 <disk_ioctl+0x2ae>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    72e0:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    72e2:	60 96       	adiw	r28, 0x10	; 16
    72e4:	cd bf       	out	0x3d, r28	; 61
    72e6:	de bf       	out	0x3e, r29	; 62
    72e8:	df 91       	pop	r29
    72ea:	cf 91       	pop	r28
    72ec:	1f 91       	pop	r17
    72ee:	0f 91       	pop	r16
    72f0:	ff 90       	pop	r15
    72f2:	ef 90       	pop	r14
    72f4:	08 95       	ret

000072f6 <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    72f6:	80 91 1a 2b 	lds	r24, 0x2B1A
	if (n) Timer1 = --n;
    72fa:	88 23       	and	r24, r24
    72fc:	19 f0       	breq	.+6      	; 0x7304 <disk_timerproc+0xe>
    72fe:	81 50       	subi	r24, 0x01	; 1
    7300:	80 93 1a 2b 	sts	0x2B1A, r24
	n = Timer2;
    7304:	80 91 19 2b 	lds	r24, 0x2B19
	if (n) Timer2 = --n;
    7308:	88 23       	and	r24, r24
    730a:	19 f0       	breq	.+6      	; 0x7312 <disk_timerproc+0x1c>
    730c:	81 50       	subi	r24, 0x01	; 1
    730e:	80 93 19 2b 	sts	0x2B19, r24

	s = Stat;
    7312:	80 91 24 20 	lds	r24, 0x2024
	if (MMC_WP)				/* Write protected */
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;

	if (MMC_CD)				/* Card inserted */
    7316:	90 91 48 06 	lds	r25, 0x0648
    731a:	93 fd       	sbrc	r25, 3
    731c:	02 c0       	rjmp	.+4      	; 0x7322 <disk_timerproc+0x2c>
		s &= ~STA_NODISK;
    731e:	89 7f       	andi	r24, 0xF9	; 249
    7320:	02 c0       	rjmp	.+4      	; 0x7326 <disk_timerproc+0x30>
	s = Stat;

	if (MMC_WP)				/* Write protected */
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;
    7322:	8b 7f       	andi	r24, 0xFB	; 251

	if (MMC_CD)				/* Card inserted */
		s &= ~STA_NODISK;
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
    7324:	83 60       	ori	r24, 0x03	; 3

	Stat = s;				/* Update MMC status */
    7326:	80 93 24 20 	sts	0x2024, r24
    732a:	08 95       	ret

0000732c <__vector_17>:
}

ISR(TCC0_CCB_vect) {
    732c:	1f 92       	push	r1
    732e:	0f 92       	push	r0
    7330:	0f b6       	in	r0, 0x3f	; 63
    7332:	0f 92       	push	r0
    7334:	11 24       	eor	r1, r1
    7336:	0b b6       	in	r0, 0x3b	; 59
    7338:	0f 92       	push	r0
    733a:	2f 93       	push	r18
    733c:	3f 93       	push	r19
    733e:	4f 93       	push	r20
    7340:	5f 93       	push	r21
    7342:	6f 93       	push	r22
    7344:	7f 93       	push	r23
    7346:	8f 93       	push	r24
    7348:	9f 93       	push	r25
    734a:	af 93       	push	r26
    734c:	bf 93       	push	r27
    734e:	ef 93       	push	r30
    7350:	ff 93       	push	r31
	disk_timerproc();
    7352:	d1 df       	rcall	.-94     	; 0x72f6 <disk_timerproc>
}
    7354:	ff 91       	pop	r31
    7356:	ef 91       	pop	r30
    7358:	bf 91       	pop	r27
    735a:	af 91       	pop	r26
    735c:	9f 91       	pop	r25
    735e:	8f 91       	pop	r24
    7360:	7f 91       	pop	r23
    7362:	6f 91       	pop	r22
    7364:	5f 91       	pop	r21
    7366:	4f 91       	pop	r20
    7368:	3f 91       	pop	r19
    736a:	2f 91       	pop	r18
    736c:	0f 90       	pop	r0
    736e:	0b be       	out	0x3b, r0	; 59
    7370:	0f 90       	pop	r0
    7372:	0f be       	out	0x3f, r0	; 63
    7374:	0f 90       	pop	r0
    7376:	1f 90       	pop	r1
    7378:	18 95       	reti

0000737a <__vector_14>:

#define SOUND_VOLUME 8
#define SOUND_OFFSET 2048

ISR(TCC0_OVF_vect)
{
    737a:	1f 92       	push	r1
    737c:	0f 92       	push	r0
    737e:	0f b6       	in	r0, 0x3f	; 63
    7380:	0f 92       	push	r0
    7382:	11 24       	eor	r1, r1
    7384:	0b b6       	in	r0, 0x3b	; 59
    7386:	0f 92       	push	r0
    7388:	2f 93       	push	r18
    738a:	3f 93       	push	r19
    738c:	4f 93       	push	r20
    738e:	5f 93       	push	r21
    7390:	8f 93       	push	r24
    7392:	9f 93       	push	r25
    7394:	af 93       	push	r26
    7396:	bf 93       	push	r27
    7398:	ef 93       	push	r30
    739a:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    739c:	e0 91 1b 2b 	lds	r30, 0x2B1B
    73a0:	f0 91 1c 2b 	lds	r31, 0x2B1C
	UINT ri, ct;
	BYTE *buff, l, r;

	if (!fcb) return;
    73a4:	30 97       	sbiw	r30, 0x00	; 0
    73a6:	09 f4       	brne	.+2      	; 0x73aa <__vector_14+0x30>
    73a8:	54 c0       	rjmp	.+168    	; 0x7452 <__vector_14+0xd8>
	ct = fcb->ct; ri = fcb->ri;
    73aa:	86 81       	ldd	r24, Z+6	; 0x06
    73ac:	97 81       	ldd	r25, Z+7	; 0x07
    73ae:	22 81       	ldd	r18, Z+2	; 0x02
    73b0:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    73b2:	a0 85       	ldd	r26, Z+8	; 0x08
    73b4:	b1 85       	ldd	r27, Z+9	; 0x09
    73b6:	a2 0f       	add	r26, r18
    73b8:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    73ba:	40 81       	ld	r20, Z
    73bc:	51 81       	ldd	r21, Z+1	; 0x01
    73be:	41 30       	cpi	r20, 0x01	; 1
    73c0:	51 05       	cpc	r21, r1
    73c2:	69 f0       	breq	.+26     	; 0x73de <__vector_14+0x64>
    73c4:	20 f0       	brcs	.+8      	; 0x73ce <__vector_14+0x54>
    73c6:	42 30       	cpi	r20, 0x02	; 2
    73c8:	51 05       	cpc	r21, r1
    73ca:	71 f0       	breq	.+28     	; 0x73e8 <__vector_14+0x6e>
    73cc:	17 c0       	rjmp	.+46     	; 0x73fc <__vector_14+0x82>
		case 0:		/* Mono, 8bit */
			if (ct < 1) return;
    73ce:	00 97       	sbiw	r24, 0x00	; 0
    73d0:	09 f4       	brne	.+2      	; 0x73d4 <__vector_14+0x5a>
    73d2:	3f c0       	rjmp	.+126    	; 0x7452 <__vector_14+0xd8>
			l = r = buff[0];
    73d4:	4c 91       	ld	r20, X
			ct -= 1; ri += 1;
    73d6:	01 97       	sbiw	r24, 0x01	; 1
    73d8:	2f 5f       	subi	r18, 0xFF	; 255
    73da:	3f 4f       	sbci	r19, 0xFF	; 255
			break;
    73dc:	17 c0       	rjmp	.+46     	; 0x740c <__vector_14+0x92>
		case 1:		/* Stereo, 8bit */
			if (ct < 2) return;
    73de:	82 30       	cpi	r24, 0x02	; 2
    73e0:	91 05       	cpc	r25, r1
    73e2:	b8 f1       	brcs	.+110    	; 0x7452 <__vector_14+0xd8>
			l = buff[0]; r = buff[1];
    73e4:	4c 91       	ld	r20, X
    73e6:	06 c0       	rjmp	.+12     	; 0x73f4 <__vector_14+0x7a>
			ct -= 2; ri += 2;
			break;
		case 2:		/* Mono, 16bit */
			if (ct < 2) return;
    73e8:	82 30       	cpi	r24, 0x02	; 2
    73ea:	91 05       	cpc	r25, r1
    73ec:	90 f1       	brcs	.+100    	; 0x7452 <__vector_14+0xd8>
			l = r = buff[1] + 128;
    73ee:	11 96       	adiw	r26, 0x01	; 1
    73f0:	4c 91       	ld	r20, X
    73f2:	40 58       	subi	r20, 0x80	; 128
			ct -= 2; ri += 2;
    73f4:	02 97       	sbiw	r24, 0x02	; 2
    73f6:	2e 5f       	subi	r18, 0xFE	; 254
    73f8:	3f 4f       	sbci	r19, 0xFF	; 255
			break;
    73fa:	08 c0       	rjmp	.+16     	; 0x740c <__vector_14+0x92>
		default:	/* Stereo, 16bit */
			if (ct < 4) return;
    73fc:	84 30       	cpi	r24, 0x04	; 4
    73fe:	91 05       	cpc	r25, r1
    7400:	40 f1       	brcs	.+80     	; 0x7452 <__vector_14+0xd8>
			l = buff[1]; r = buff[3];
    7402:	11 96       	adiw	r26, 0x01	; 1
    7404:	4c 91       	ld	r20, X
			ct -= 4; ri += 4;
    7406:	04 97       	sbiw	r24, 0x04	; 4
    7408:	2c 5f       	subi	r18, 0xFC	; 252
    740a:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fcb->ct = ct;
    740c:	86 83       	std	Z+6, r24	; 0x06
    740e:	97 83       	std	Z+7, r25	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    7410:	82 85       	ldd	r24, Z+10	; 0x0a
    7412:	93 85       	ldd	r25, Z+11	; 0x0b
    7414:	01 97       	sbiw	r24, 0x01	; 1
    7416:	82 23       	and	r24, r18
    7418:	93 23       	and	r25, r19
    741a:	82 83       	std	Z+2, r24	; 0x02
    741c:	93 83       	std	Z+3, r25	; 0x03
	
	dac_ch0_write(SOUND_OFFSET+(l*SOUND_VOLUME));
    741e:	24 2f       	mov	r18, r20
    7420:	30 e0       	ldi	r19, 0x00	; 0
    7422:	c9 01       	movw	r24, r18
    7424:	93 95       	inc	r25
    7426:	43 e0       	ldi	r20, 0x03	; 3
    7428:	88 0f       	add	r24, r24
    742a:	99 1f       	adc	r25, r25
    742c:	4a 95       	dec	r20
    742e:	e1 f7       	brne	.-8      	; 0x7428 <__vector_14+0xae>
void dac_speaker_off(void);
void dac_setup(bool dual_channel);
void dac_disable(void);

static inline void dac_ch0_write(uint16_t data) {
	DACB.CH0DATA = data;
    7430:	80 93 38 03 	sts	0x0338, r24
    7434:	90 93 39 03 	sts	0x0339, r25
	dac_ch1_write(SOUND_OFFSET-(l*SOUND_VOLUME));
    7438:	80 e0       	ldi	r24, 0x00	; 0
    743a:	91 e0       	ldi	r25, 0x01	; 1
    743c:	82 1b       	sub	r24, r18
    743e:	93 0b       	sbc	r25, r19
    7440:	53 e0       	ldi	r21, 0x03	; 3
    7442:	88 0f       	add	r24, r24
    7444:	99 1f       	adc	r25, r25
    7446:	5a 95       	dec	r21
    7448:	e1 f7       	brne	.-8      	; 0x7442 <__vector_14+0xc8>
}

static inline void dac_ch1_write(uint16_t data) {
	DACB.CH1DATA = data;
    744a:	80 93 3a 03 	sts	0x033A, r24
    744e:	90 93 3b 03 	sts	0x033B, r25
}
    7452:	ff 91       	pop	r31
    7454:	ef 91       	pop	r30
    7456:	bf 91       	pop	r27
    7458:	af 91       	pop	r26
    745a:	9f 91       	pop	r25
    745c:	8f 91       	pop	r24
    745e:	5f 91       	pop	r21
    7460:	4f 91       	pop	r20
    7462:	3f 91       	pop	r19
    7464:	2f 91       	pop	r18
    7466:	0f 90       	pop	r0
    7468:	0b be       	out	0x3b, r0	; 59
    746a:	0f 90       	pop	r0
    746c:	0f be       	out	0x3f, r0	; 63
    746e:	0f 90       	pop	r0
    7470:	1f 90       	pop	r1
    7472:	18 95       	reti

00007474 <sound_start>:

int sound_start (
	WAVFIFO* fcb,	/* Pointer to the sound FIFO control structure */
	DWORD fs		/* Sampling frequency [Hz] */
)
{
    7474:	fc 01       	movw	r30, r24
	if (fs < 8000 || fs > 44100) return 0;	/* Check fs range */
    7476:	40 54       	subi	r20, 0x40	; 64
    7478:	5f 41       	sbci	r21, 0x1F	; 31
    747a:	61 09       	sbc	r22, r1
    747c:	71 09       	sbc	r23, r1
    747e:	45 30       	cpi	r20, 0x05	; 5
    7480:	5d 48       	sbci	r21, 0x8D	; 141
    7482:	61 05       	cpc	r22, r1
    7484:	71 05       	cpc	r23, r1
    7486:	28 f5       	brcc	.+74     	; 0x74d2 <sound_start+0x5e>

	fcb->ri = 0; fcb->wi = 0; fcb->ct = 0;	/* Flush FIFO */
    7488:	12 82       	std	Z+2, r1	; 0x02
    748a:	13 82       	std	Z+3, r1	; 0x03
    748c:	14 82       	std	Z+4, r1	; 0x04
    748e:	15 82       	std	Z+5, r1	; 0x05
    7490:	16 82       	std	Z+6, r1	; 0x06
    7492:	17 82       	std	Z+7, r1	; 0x07
	WavFifo = fcb;			/* Register FIFO control structure */
    7494:	e0 93 1b 2b 	sts	0x2B1B, r30
    7498:	f0 93 1c 2b 	sts	0x2B1C, r31
	
	dac_setup(true);
    749c:	81 e0       	ldi	r24, 0x01	; 1
    749e:	0e 94 0c 09 	call	0x1218	; 0x1218 <dac_setup>
	
	//Disable power reduction for TCC0 
	PR.PRPC &= ~0x01;
    74a2:	80 91 73 00 	lds	r24, 0x0073
    74a6:	8e 7f       	andi	r24, 0xFE	; 254
    74a8:	80 93 73 00 	sts	0x0073, r24
	
	TCC0.CNT = 0;
    74ac:	10 92 20 08 	sts	0x0820, r1
    74b0:	10 92 21 08 	sts	0x0821, r1
	TCC0.PER = (F_CPU / 44100 - 1);
    74b4:	84 ed       	ldi	r24, 0xD4	; 212
    74b6:	92 e0       	ldi	r25, 0x02	; 2
    74b8:	80 93 26 08 	sts	0x0826, r24
    74bc:	90 93 27 08 	sts	0x0827, r25
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    74c0:	81 e0       	ldi	r24, 0x01	; 1
    74c2:	80 93 00 08 	sts	0x0800, r24
	TCC0.INTCTRLA = TC_OVFINTLVL_HI_gc;
    74c6:	83 e0       	ldi	r24, 0x03	; 3
    74c8:	80 93 06 08 	sts	0x0806, r24
	
	return 1;
    74cc:	81 e0       	ldi	r24, 0x01	; 1
    74ce:	90 e0       	ldi	r25, 0x00	; 0
    74d0:	08 95       	ret
int sound_start (
	WAVFIFO* fcb,	/* Pointer to the sound FIFO control structure */
	DWORD fs		/* Sampling frequency [Hz] */
)
{
	if (fs < 8000 || fs > 44100) return 0;	/* Check fs range */
    74d2:	80 e0       	ldi	r24, 0x00	; 0
    74d4:	90 e0       	ldi	r25, 0x00	; 0
	TCC0.PER = (F_CPU / 44100 - 1);
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
	TCC0.INTCTRLA = TC_OVFINTLVL_HI_gc;
	
	return 1;
}
    74d6:	08 95       	ret

000074d8 <sound_stop>:
/*-----------------------------------------------------*/
/* Disable sound output                                */

void sound_stop (void)
{
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    74d8:	e0 e0       	ldi	r30, 0x00	; 0
    74da:	f8 e0       	ldi	r31, 0x08	; 8
    74dc:	16 82       	std	Z+6, r1	; 0x06
	dac_disable();
    74de:	0e 94 60 09 	call	0x12c0	; 0x12c0 <dac_disable>
	
	//Enable power reduction for TCC0 
	PR.PRPC |= 0x01;
    74e2:	e0 e7       	ldi	r30, 0x70	; 112
    74e4:	f0 e0       	ldi	r31, 0x00	; 0
    74e6:	83 81       	ldd	r24, Z+3	; 0x03
    74e8:	81 60       	ori	r24, 0x01	; 1
    74ea:	83 83       	std	Z+3, r24	; 0x03

	WavFifo = 0;		/* Unregister FIFO control structure */
    74ec:	10 92 1b 2b 	sts	0x2B1B, r1
    74f0:	10 92 1c 2b 	sts	0x2B1C, r1
    74f4:	08 95       	ret

000074f6 <load_wav>:
FIL *fp,			/* Pointer to the open file object to play */
const char *title,	/* Title (file name, etc...) */
void *work,			/* Pointer to working buffer (must be-4 byte aligned) */
UINT sz_work		/* Size of working buffer (must be power of 2) */
)
{
    74f6:	2f 92       	push	r2
    74f8:	3f 92       	push	r3
    74fa:	4f 92       	push	r4
    74fc:	5f 92       	push	r5
    74fe:	6f 92       	push	r6
    7500:	7f 92       	push	r7
    7502:	8f 92       	push	r8
    7504:	9f 92       	push	r9
    7506:	af 92       	push	r10
    7508:	bf 92       	push	r11
    750a:	cf 92       	push	r12
    750c:	df 92       	push	r13
    750e:	ef 92       	push	r14
    7510:	ff 92       	push	r15
    7512:	0f 93       	push	r16
    7514:	1f 93       	push	r17
    7516:	cf 93       	push	r28
    7518:	df 93       	push	r29
    751a:	cd b7       	in	r28, 0x3d	; 61
    751c:	de b7       	in	r29, 0x3e	; 62
    751e:	c4 56       	subi	r28, 0x64	; 100
    7520:	d1 09       	sbc	r29, r1
    7522:	cd bf       	out	0x3d, r28	; 61
    7524:	de bf       	out	0x3e, r29	; 62
    7526:	8c 01       	movw	r16, r24
    7528:	1a 01       	movw	r2, r20
    752a:	a5 96       	adiw	r28, 0x25	; 37
    752c:	2e af       	std	Y+62, r18	; 0x3e
    752e:	3f af       	std	Y+63, r19	; 0x3f
    7530:	a5 97       	sbiw	r28, 0x25	; 37


	//xprintf(PSTR("%s\n"), title);	/* Put title */

	/* Is it a WAV file? */
	if (f_read(fp, buff, 12, &br) || br != 12) return -1;
    7532:	7e 01       	movw	r14, r28
    7534:	2d e4       	ldi	r18, 0x4D	; 77
    7536:	e2 0e       	add	r14, r18
    7538:	f1 1c       	adc	r15, r1
    753a:	97 01       	movw	r18, r14
    753c:	4c e0       	ldi	r20, 0x0C	; 12
    753e:	50 e0       	ldi	r21, 0x00	; 0
    7540:	b1 01       	movw	r22, r2
    7542:	0e 94 54 32 	call	0x64a8	; 0x64a8 <f_read>
    7546:	81 11       	cpse	r24, r1
    7548:	63 c2       	rjmp	.+1222   	; 0x7a10 <load_wav+0x51a>
    754a:	d7 01       	movw	r26, r14
    754c:	8d 91       	ld	r24, X+
    754e:	9c 91       	ld	r25, X
    7550:	0c 97       	sbiw	r24, 0x0c	; 12
    7552:	09 f0       	breq	.+2      	; 0x7556 <load_wav+0x60>
    7554:	5d c2       	rjmp	.+1210   	; 0x7a10 <load_wav+0x51a>
	if (LD_DWORD(&buff[0]) != FCC('R','I','F','F')) return -1;
    7556:	f1 01       	movw	r30, r2
    7558:	80 81       	ld	r24, Z
    755a:	91 81       	ldd	r25, Z+1	; 0x01
    755c:	a2 81       	ldd	r26, Z+2	; 0x02
    755e:	b3 81       	ldd	r27, Z+3	; 0x03
    7560:	82 35       	cpi	r24, 0x52	; 82
    7562:	99 44       	sbci	r25, 0x49	; 73
    7564:	a6 44       	sbci	r26, 0x46	; 70
    7566:	b6 44       	sbci	r27, 0x46	; 70
    7568:	09 f0       	breq	.+2      	; 0x756c <load_wav+0x76>
    756a:	52 c2       	rjmp	.+1188   	; 0x7a10 <load_wav+0x51a>
	if (LD_DWORD(&buff[8]) != FCC('W','A','V','E')) return -1;
    756c:	f1 01       	movw	r30, r2
    756e:	80 85       	ldd	r24, Z+8	; 0x08
    7570:	91 85       	ldd	r25, Z+9	; 0x09
    7572:	a2 85       	ldd	r26, Z+10	; 0x0a
    7574:	b3 85       	ldd	r27, Z+11	; 0x0b
    7576:	87 35       	cpi	r24, 0x57	; 87
    7578:	91 44       	sbci	r25, 0x41	; 65
    757a:	a6 45       	sbci	r26, 0x56	; 86
    757c:	b5 44       	sbci	r27, 0x45	; 69
    757e:	09 f0       	breq	.+2      	; 0x7582 <load_wav+0x8c>
    7580:	47 c2       	rjmp	.+1166   	; 0x7a10 <load_wav+0x51a>
	eof = LD_DWORD(&buff[4]) + 8;
    7582:	d1 01       	movw	r26, r2
    7584:	14 96       	adiw	r26, 0x04	; 4
    7586:	2d 91       	ld	r18, X+
    7588:	3d 91       	ld	r19, X+
    758a:	4d 91       	ld	r20, X+
    758c:	5c 91       	ld	r21, X
    758e:	17 97       	sbiw	r26, 0x07	; 7
    7590:	28 5f       	subi	r18, 0xF8	; 248
    7592:	3f 4f       	sbci	r19, 0xFF	; 255
    7594:	4f 4f       	sbci	r20, 0xFF	; 255
    7596:	5f 4f       	sbci	r21, 0xFF	; 255
    7598:	a3 96       	adiw	r28, 0x23	; 35
    759a:	2c af       	std	Y+60, r18	; 0x3c
    759c:	3d af       	std	Y+61, r19	; 0x3d
    759e:	4e af       	std	Y+62, r20	; 0x3e
    75a0:	5f af       	std	Y+63, r21	; 0x3f
    75a2:	a3 97       	sbiw	r28, 0x23	; 35

	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
    75a4:	19 82       	std	Y+1, r1	; 0x01
    75a6:	19 a2       	std	Y+33, r1	; 0x21
	md = fsmp = wsmp = offw = szwav = 0;
    75a8:	6f 96       	adiw	r28, 0x1f	; 31
    75aa:	1c ae       	std	Y+60, r1	; 0x3c
    75ac:	1d ae       	std	Y+61, r1	; 0x3d
    75ae:	1e ae       	std	Y+62, r1	; 0x3e
    75b0:	1f ae       	std	Y+63, r1	; 0x3f
    75b2:	6f 97       	sbiw	r28, 0x1f	; 31
    75b4:	41 2c       	mov	r4, r1
    75b6:	51 2c       	mov	r5, r1
    75b8:	32 01       	movw	r6, r4
    75ba:	6b 96       	adiw	r28, 0x1b	; 27
    75bc:	1c ae       	std	Y+60, r1	; 0x3c
    75be:	1d ae       	std	Y+61, r1	; 0x3d
    75c0:	1e ae       	std	Y+62, r1	; 0x3e
    75c2:	1f ae       	std	Y+63, r1	; 0x3f
    75c4:	6b 97       	sbiw	r28, 0x1b	; 27
    75c6:	65 96       	adiw	r28, 0x15	; 21
    75c8:	1e ae       	std	Y+62, r1	; 0x3e
    75ca:	1f ae       	std	Y+63, r1	; 0x3f
    75cc:	65 97       	sbiw	r28, 0x15	; 21
					if (f_read(fp, buff, 8, &br) || br != 8) return -1;
					ssz = (LD_DWORD(&buff[4]) + 1) & ~1;
					p = 0;
					switch (LD_DWORD(buff)) {
						case FCC('I','N','A','M'):		/* INAM sub-chunk */
						p = nam; break;
    75ce:	fe 01       	movw	r30, r28
    75d0:	b1 96       	adiw	r30, 0x21	; 33
    75d2:	61 96       	adiw	r28, 0x11	; 17
    75d4:	ee af       	std	Y+62, r30	; 0x3e
    75d6:	ff af       	std	Y+63, r31	; 0x3f
    75d8:	61 97       	sbiw	r28, 0x11	; 17
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
    75da:	9e 01       	movw	r18, r28
    75dc:	2f 5f       	subi	r18, 0xFF	; 255
    75de:	3f 4f       	sbci	r19, 0xFF	; 255
    75e0:	63 96       	adiw	r28, 0x13	; 19
    75e2:	2e af       	std	Y+62, r18	; 0x3e
    75e4:	3f af       	std	Y+63, r19	; 0x3f
    75e6:	63 97       	sbiw	r28, 0x13	; 19
	eof = LD_DWORD(&buff[4]) + 8;

	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
	md = fsmp = wsmp = offw = szwav = 0;
	while (f_tell(fp) < eof) {
    75e8:	f8 01       	movw	r30, r16
    75ea:	86 81       	ldd	r24, Z+6	; 0x06
    75ec:	97 81       	ldd	r25, Z+7	; 0x07
    75ee:	a0 85       	ldd	r26, Z+8	; 0x08
    75f0:	b1 85       	ldd	r27, Z+9	; 0x09
    75f2:	a3 96       	adiw	r28, 0x23	; 35
    75f4:	2c ad       	ldd	r18, Y+60	; 0x3c
    75f6:	3d ad       	ldd	r19, Y+61	; 0x3d
    75f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    75fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    75fc:	a3 97       	sbiw	r28, 0x23	; 35
    75fe:	82 17       	cp	r24, r18
    7600:	93 07       	cpc	r25, r19
    7602:	a4 07       	cpc	r26, r20
    7604:	b5 07       	cpc	r27, r21
    7606:	08 f0       	brcs	.+2      	; 0x760a <load_wav+0x114>
    7608:	48 c1       	rjmp	.+656    	; 0x789a <load_wav+0x3a4>
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
    760a:	9e 01       	movw	r18, r28
    760c:	23 5b       	subi	r18, 0xB3	; 179
    760e:	3f 4f       	sbci	r19, 0xFF	; 255
    7610:	48 e0       	ldi	r20, 0x08	; 8
    7612:	50 e0       	ldi	r21, 0x00	; 0
    7614:	b1 01       	movw	r22, r2
    7616:	c8 01       	movw	r24, r16
    7618:	0e 94 54 32 	call	0x64a8	; 0x64a8 <f_read>
    761c:	81 11       	cpse	r24, r1
    761e:	f8 c1       	rjmp	.+1008   	; 0x7a10 <load_wav+0x51a>
    7620:	2f 96       	adiw	r28, 0x0f	; 15
    7622:	8e ad       	ldd	r24, Y+62	; 0x3e
    7624:	9f ad       	ldd	r25, Y+63	; 0x3f
    7626:	2f 97       	sbiw	r28, 0x0f	; 15
    7628:	08 97       	sbiw	r24, 0x08	; 8
    762a:	09 f0       	breq	.+2      	; 0x762e <load_wav+0x138>
    762c:	f1 c1       	rjmp	.+994    	; 0x7a10 <load_wav+0x51a>
		sz = (LD_DWORD(&buff[4]) + 1) & ~1;
    762e:	d1 01       	movw	r26, r2
    7630:	14 96       	adiw	r26, 0x04	; 4
    7632:	8d 90       	ld	r8, X+
    7634:	9d 90       	ld	r9, X+
    7636:	ad 90       	ld	r10, X+
    7638:	bc 90       	ld	r11, X
    763a:	17 97       	sbiw	r26, 0x07	; 7
    763c:	bf ef       	ldi	r27, 0xFF	; 255
    763e:	8b 1a       	sub	r8, r27
    7640:	9b 0a       	sbc	r9, r27
    7642:	ab 0a       	sbc	r10, r27
    7644:	bb 0a       	sbc	r11, r27
    7646:	e8 94       	clt
    7648:	80 f8       	bld	r8, 0
		switch (LD_DWORD(&buff[0])) {
    764a:	f1 01       	movw	r30, r2
    764c:	80 81       	ld	r24, Z
    764e:	91 81       	ldd	r25, Z+1	; 0x01
    7650:	a2 81       	ldd	r26, Z+2	; 0x02
    7652:	b3 81       	ldd	r27, Z+3	; 0x03
    7654:	8c 34       	cpi	r24, 0x4C	; 76
    7656:	f9 e4       	ldi	r31, 0x49	; 73
    7658:	9f 07       	cpc	r25, r31
    765a:	f3 e5       	ldi	r31, 0x53	; 83
    765c:	af 07       	cpc	r26, r31
    765e:	f4 e5       	ldi	r31, 0x54	; 84
    7660:	bf 07       	cpc	r27, r31
    7662:	09 f4       	brne	.+2      	; 0x7666 <load_wav+0x170>
    7664:	8d c0       	rjmp	.+282    	; 0x7780 <load_wav+0x28a>
    7666:	30 f4       	brcc	.+12     	; 0x7674 <load_wav+0x17e>
    7668:	86 36       	cpi	r24, 0x66	; 102
    766a:	9d 46       	sbci	r25, 0x6D	; 109
    766c:	a4 47       	sbci	r26, 0x74	; 116
    766e:	b0 42       	sbci	r27, 0x20	; 32
    7670:	e1 f0       	breq	.+56     	; 0x76aa <load_wav+0x1b4>
    7672:	ce c1       	rjmp	.+924    	; 0x7a10 <load_wav+0x51a>
    7674:	84 36       	cpi	r24, 0x64	; 100
    7676:	41 e6       	ldi	r20, 0x61	; 97
    7678:	94 07       	cpc	r25, r20
    767a:	44 e7       	ldi	r20, 0x74	; 116
    767c:	a4 07       	cpc	r26, r20
    767e:	41 e6       	ldi	r20, 0x61	; 97
    7680:	b4 07       	cpc	r27, r20
    7682:	09 f4       	brne	.+2      	; 0x7686 <load_wav+0x190>
    7684:	65 c0       	rjmp	.+202    	; 0x7750 <load_wav+0x25a>
    7686:	86 36       	cpi	r24, 0x66	; 102
    7688:	91 46       	sbci	r25, 0x61	; 97
    768a:	a3 46       	sbci	r26, 0x63	; 99
    768c:	b4 47       	sbci	r27, 0x74	; 116
    768e:	09 f0       	breq	.+2      	; 0x7692 <load_wav+0x19c>
    7690:	bf c1       	rjmp	.+894    	; 0x7a10 <load_wav+0x51a>
			}
			fsmp = LD_DWORD(&buff[4]);		/* Sampling rate */
			break;

			case FCC('f','a','c','t') :
			f_lseek(fp, f_tell(fp) + sz);
    7692:	f8 01       	movw	r30, r16
    7694:	46 81       	ldd	r20, Z+6	; 0x06
    7696:	57 81       	ldd	r21, Z+7	; 0x07
    7698:	60 85       	ldd	r22, Z+8	; 0x08
    769a:	71 85       	ldd	r23, Z+9	; 0x09
    769c:	48 0d       	add	r20, r8
    769e:	59 1d       	adc	r21, r9
    76a0:	6a 1d       	adc	r22, r10
    76a2:	7b 1d       	adc	r23, r11
    76a4:	c8 01       	movw	r24, r16
    76a6:	88 d8       	rcall	.-3824   	; 0x67b8 <f_lseek>
			break;
    76a8:	9f cf       	rjmp	.-194    	; 0x75e8 <load_wav+0xf2>
	while (f_tell(fp) < eof) {
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
		sz = (LD_DWORD(&buff[4]) + 1) & ~1;
		switch (LD_DWORD(&buff[0])) {
			case FCC('f','m','t',' ') :
			if (sz > 1000 || sz < 16 || f_read(fp, buff, sz, &br) || sz != br) return -1;
    76aa:	d5 01       	movw	r26, r10
    76ac:	c4 01       	movw	r24, r8
    76ae:	40 97       	sbiw	r24, 0x10	; 16
    76b0:	a1 09       	sbc	r26, r1
    76b2:	b1 09       	sbc	r27, r1
    76b4:	89 3d       	cpi	r24, 0xD9	; 217
    76b6:	93 40       	sbci	r25, 0x03	; 3
    76b8:	a1 05       	cpc	r26, r1
    76ba:	b1 05       	cpc	r27, r1
    76bc:	08 f0       	brcs	.+2      	; 0x76c0 <load_wav+0x1ca>
    76be:	a8 c1       	rjmp	.+848    	; 0x7a10 <load_wav+0x51a>
    76c0:	9e 01       	movw	r18, r28
    76c2:	23 5b       	subi	r18, 0xB3	; 179
    76c4:	3f 4f       	sbci	r19, 0xFF	; 255
    76c6:	a4 01       	movw	r20, r8
    76c8:	b1 01       	movw	r22, r2
    76ca:	c8 01       	movw	r24, r16
    76cc:	0e 94 54 32 	call	0x64a8	; 0x64a8 <f_read>
    76d0:	81 11       	cpse	r24, r1
    76d2:	9e c1       	rjmp	.+828    	; 0x7a10 <load_wav+0x51a>
    76d4:	2f 96       	adiw	r28, 0x0f	; 15
    76d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    76d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    76da:	2f 97       	sbiw	r28, 0x0f	; 15
    76dc:	a0 e0       	ldi	r26, 0x00	; 0
    76de:	b0 e0       	ldi	r27, 0x00	; 0
    76e0:	88 16       	cp	r8, r24
    76e2:	99 06       	cpc	r9, r25
    76e4:	aa 06       	cpc	r10, r26
    76e6:	bb 06       	cpc	r11, r27
    76e8:	09 f0       	breq	.+2      	; 0x76ec <load_wav+0x1f6>
    76ea:	92 c1       	rjmp	.+804    	; 0x7a10 <load_wav+0x51a>
			if (LD_WORD(&buff[0]) != 0x1) return -1;	/* Check if LPCM */
    76ec:	d1 01       	movw	r26, r2
    76ee:	8d 91       	ld	r24, X+
    76f0:	9c 91       	ld	r25, X
    76f2:	11 97       	sbiw	r26, 0x01	; 1
    76f4:	01 97       	sbiw	r24, 0x01	; 1
    76f6:	09 f0       	breq	.+2      	; 0x76fa <load_wav+0x204>
    76f8:	8b c1       	rjmp	.+790    	; 0x7a10 <load_wav+0x51a>
			if (LD_WORD(&buff[2]) == 2) {	/* Channels (1 or 2) */
    76fa:	31 e0       	ldi	r19, 0x01	; 1
    76fc:	20 e0       	ldi	r18, 0x00	; 0
    76fe:	12 96       	adiw	r26, 0x02	; 2
    7700:	8d 91       	ld	r24, X+
    7702:	9c 91       	ld	r25, X
    7704:	13 97       	sbiw	r26, 0x03	; 3
    7706:	02 97       	sbiw	r24, 0x02	; 2
    7708:	09 f0       	breq	.+2      	; 0x770c <load_wav+0x216>
    770a:	30 e0       	ldi	r19, 0x00	; 0
				md = 1; wsmp = 2;
    770c:	64 96       	adiw	r28, 0x14	; 20
    770e:	3f af       	std	Y+63, r19	; 0x3f
    7710:	64 97       	sbiw	r28, 0x14	; 20
    7712:	65 96       	adiw	r28, 0x15	; 21
    7714:	2f af       	std	Y+63, r18	; 0x3f
    7716:	65 97       	sbiw	r28, 0x15	; 21
				} else {
				md = 0; wsmp = 1;
			}
			if (LD_WORD(&buff[14]) == 16) {	/* Resolution (8 or 16) */
    7718:	f1 01       	movw	r30, r2
    771a:	86 85       	ldd	r24, Z+14	; 0x0e
    771c:	97 85       	ldd	r25, Z+15	; 0x0f
    771e:	40 97       	sbiw	r24, 0x10	; 16
    7720:	49 f4       	brne	.+18     	; 0x7734 <load_wav+0x23e>
				md |= 2; wsmp *= 2;
    7722:	65 96       	adiw	r28, 0x15	; 21
    7724:	2e ad       	ldd	r18, Y+62	; 0x3e
    7726:	3f ad       	ldd	r19, Y+63	; 0x3f
    7728:	65 97       	sbiw	r28, 0x15	; 21
    772a:	22 60       	ori	r18, 0x02	; 2
    772c:	65 96       	adiw	r28, 0x15	; 21
    772e:	2e af       	std	Y+62, r18	; 0x3e
    7730:	3f af       	std	Y+63, r19	; 0x3f
    7732:	65 97       	sbiw	r28, 0x15	; 21
			}
			fsmp = LD_DWORD(&buff[4]);		/* Sampling rate */
    7734:	d1 01       	movw	r26, r2
    7736:	14 96       	adiw	r26, 0x04	; 4
    7738:	8d 91       	ld	r24, X+
    773a:	9d 91       	ld	r25, X+
    773c:	0d 90       	ld	r0, X+
    773e:	bc 91       	ld	r27, X
    7740:	a0 2d       	mov	r26, r0
    7742:	6f 96       	adiw	r28, 0x1f	; 31
    7744:	8c af       	std	Y+60, r24	; 0x3c
    7746:	9d af       	std	Y+61, r25	; 0x3d
    7748:	ae af       	std	Y+62, r26	; 0x3e
    774a:	bf af       	std	Y+63, r27	; 0x3f
    774c:	6f 97       	sbiw	r28, 0x1f	; 31
			break;
    774e:	4c cf       	rjmp	.-360    	; 0x75e8 <load_wav+0xf2>
			case FCC('f','a','c','t') :
			f_lseek(fp, f_tell(fp) + sz);
			break;

			case FCC('d','a','t','a') :
			offw = f_tell(fp);	/* Wave data start offset */
    7750:	d8 01       	movw	r26, r16
    7752:	16 96       	adiw	r26, 0x06	; 6
    7754:	2d 91       	ld	r18, X+
    7756:	3d 91       	ld	r19, X+
    7758:	4d 91       	ld	r20, X+
    775a:	5c 91       	ld	r21, X
    775c:	19 97       	sbiw	r26, 0x09	; 9
    775e:	6b 96       	adiw	r28, 0x1b	; 27
    7760:	2c af       	std	Y+60, r18	; 0x3c
    7762:	3d af       	std	Y+61, r19	; 0x3d
    7764:	4e af       	std	Y+62, r20	; 0x3e
    7766:	5f af       	std	Y+63, r21	; 0x3f
    7768:	6b 97       	sbiw	r28, 0x1b	; 27
			szwav = sz;			/* Wave data length [byte] */
			f_lseek(fp, f_tell(fp) + sz);
    776a:	ba 01       	movw	r22, r20
    776c:	a9 01       	movw	r20, r18
    776e:	48 0d       	add	r20, r8
    7770:	59 1d       	adc	r21, r9
    7772:	6a 1d       	adc	r22, r10
    7774:	7b 1d       	adc	r23, r11
    7776:	c8 01       	movw	r24, r16
    7778:	1f d8       	rcall	.-4034   	; 0x67b8 <f_lseek>
	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
	md = fsmp = wsmp = offw = szwav = 0;
	while (f_tell(fp) < eof) {
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
		sz = (LD_DWORD(&buff[4]) + 1) & ~1;
    777a:	24 01       	movw	r4, r8
    777c:	35 01       	movw	r6, r10

			case FCC('d','a','t','a') :
			offw = f_tell(fp);	/* Wave data start offset */
			szwav = sz;			/* Wave data length [byte] */
			f_lseek(fp, f_tell(fp) + sz);
			break;
    777e:	34 cf       	rjmp	.-408    	; 0x75e8 <load_wav+0xf2>

			case FCC('L','I','S','T'):
			sz += f_tell(fp);
    7780:	f8 01       	movw	r30, r16
    7782:	c6 80       	ldd	r12, Z+6	; 0x06
    7784:	d7 80       	ldd	r13, Z+7	; 0x07
    7786:	e0 84       	ldd	r14, Z+8	; 0x08
    7788:	f1 84       	ldd	r15, Z+9	; 0x09
    778a:	c8 0c       	add	r12, r8
    778c:	d9 1c       	adc	r13, r9
    778e:	ea 1c       	adc	r14, r10
    7790:	fb 1c       	adc	r15, r11
			if (f_read(fp, buff, 4, &br) || br != 4) return -1;
    7792:	9e 01       	movw	r18, r28
    7794:	23 5b       	subi	r18, 0xB3	; 179
    7796:	3f 4f       	sbci	r19, 0xFF	; 255
    7798:	44 e0       	ldi	r20, 0x04	; 4
    779a:	50 e0       	ldi	r21, 0x00	; 0
    779c:	b1 01       	movw	r22, r2
    779e:	c8 01       	movw	r24, r16
    77a0:	0e 94 54 32 	call	0x64a8	; 0x64a8 <f_read>
    77a4:	81 11       	cpse	r24, r1
    77a6:	34 c1       	rjmp	.+616    	; 0x7a10 <load_wav+0x51a>
    77a8:	2f 96       	adiw	r28, 0x0f	; 15
    77aa:	8e ad       	ldd	r24, Y+62	; 0x3e
    77ac:	9f ad       	ldd	r25, Y+63	; 0x3f
    77ae:	2f 97       	sbiw	r28, 0x0f	; 15
    77b0:	04 97       	sbiw	r24, 0x04	; 4
    77b2:	09 f0       	breq	.+2      	; 0x77b6 <load_wav+0x2c0>
    77b4:	2d c1       	rjmp	.+602    	; 0x7a10 <load_wav+0x51a>
			if (LD_DWORD(buff) == FCC('I','N','F','O')) {	/* LIST/INFO chunk */
    77b6:	f1 01       	movw	r30, r2
    77b8:	80 81       	ld	r24, Z
    77ba:	91 81       	ldd	r25, Z+1	; 0x01
    77bc:	a2 81       	ldd	r26, Z+2	; 0x02
    77be:	b3 81       	ldd	r27, Z+3	; 0x03
    77c0:	89 34       	cpi	r24, 0x49	; 73
    77c2:	9e 44       	sbci	r25, 0x4E	; 78
    77c4:	a6 44       	sbci	r26, 0x46	; 70
    77c6:	bf 44       	sbci	r27, 0x4F	; 79
    77c8:	09 f0       	breq	.+2      	; 0x77cc <load_wav+0x2d6>
    77ca:	5e c0       	rjmp	.+188    	; 0x7888 <load_wav+0x392>
				while (f_tell(fp) < sz) {
    77cc:	f8 01       	movw	r30, r16
    77ce:	86 81       	ldd	r24, Z+6	; 0x06
    77d0:	97 81       	ldd	r25, Z+7	; 0x07
    77d2:	a0 85       	ldd	r26, Z+8	; 0x08
    77d4:	b1 85       	ldd	r27, Z+9	; 0x09
    77d6:	8c 15       	cp	r24, r12
    77d8:	9d 05       	cpc	r25, r13
    77da:	ae 05       	cpc	r26, r14
    77dc:	bf 05       	cpc	r27, r15
    77de:	08 f0       	brcs	.+2      	; 0x77e2 <load_wav+0x2ec>
    77e0:	03 cf       	rjmp	.-506    	; 0x75e8 <load_wav+0xf2>
					if (f_read(fp, buff, 8, &br) || br != 8) return -1;
    77e2:	9e 01       	movw	r18, r28
    77e4:	23 5b       	subi	r18, 0xB3	; 179
    77e6:	3f 4f       	sbci	r19, 0xFF	; 255
    77e8:	48 e0       	ldi	r20, 0x08	; 8
    77ea:	50 e0       	ldi	r21, 0x00	; 0
    77ec:	b1 01       	movw	r22, r2
    77ee:	c8 01       	movw	r24, r16
    77f0:	0e 94 54 32 	call	0x64a8	; 0x64a8 <f_read>
    77f4:	81 11       	cpse	r24, r1
    77f6:	0c c1       	rjmp	.+536    	; 0x7a10 <load_wav+0x51a>
    77f8:	2f 96       	adiw	r28, 0x0f	; 15
    77fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    77fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    77fe:	2f 97       	sbiw	r28, 0x0f	; 15
    7800:	08 97       	sbiw	r24, 0x08	; 8
    7802:	09 f0       	breq	.+2      	; 0x7806 <load_wav+0x310>
    7804:	05 c1       	rjmp	.+522    	; 0x7a10 <load_wav+0x51a>
					ssz = (LD_DWORD(&buff[4]) + 1) & ~1;
    7806:	d1 01       	movw	r26, r2
    7808:	14 96       	adiw	r26, 0x04	; 4
    780a:	8d 90       	ld	r8, X+
    780c:	9d 90       	ld	r9, X+
    780e:	ad 90       	ld	r10, X+
    7810:	bc 90       	ld	r11, X
    7812:	17 97       	sbiw	r26, 0x07	; 7
    7814:	bf ef       	ldi	r27, 0xFF	; 255
    7816:	8b 1a       	sub	r8, r27
    7818:	9b 0a       	sbc	r9, r27
    781a:	ab 0a       	sbc	r10, r27
    781c:	bb 0a       	sbc	r11, r27
    781e:	e8 94       	clt
    7820:	80 f8       	bld	r8, 0
					p = 0;
					switch (LD_DWORD(buff)) {
    7822:	f1 01       	movw	r30, r2
    7824:	80 81       	ld	r24, Z
    7826:	91 81       	ldd	r25, Z+1	; 0x01
    7828:	a2 81       	ldd	r26, Z+2	; 0x02
    782a:	b3 81       	ldd	r27, Z+3	; 0x03
    782c:	89 34       	cpi	r24, 0x49	; 73
    782e:	fe e4       	ldi	r31, 0x4E	; 78
    7830:	9f 07       	cpc	r25, r31
    7832:	f1 e4       	ldi	r31, 0x41	; 65
    7834:	af 07       	cpc	r26, r31
    7836:	fd e4       	ldi	r31, 0x4D	; 77
    7838:	bf 07       	cpc	r27, r31
    783a:	39 f0       	breq	.+14     	; 0x784a <load_wav+0x354>
    783c:	89 34       	cpi	r24, 0x49	; 73
    783e:	91 44       	sbci	r25, 0x41	; 65
    7840:	a2 45       	sbci	r26, 0x52	; 82
    7842:	b4 45       	sbci	r27, 0x54	; 84
    7844:	09 f4       	brne	.+2      	; 0x7848 <load_wav+0x352>
    7846:	e7 c0       	rjmp	.+462    	; 0x7a16 <load_wav+0x520>
    7848:	0d c0       	rjmp	.+26     	; 0x7864 <load_wav+0x36e>
						case FCC('I','N','A','M'):		/* INAM sub-chunk */
						p = nam; break;
    784a:	60 96       	adiw	r28, 0x10	; 16
    784c:	6f ad       	ldd	r22, Y+63	; 0x3f
    784e:	60 97       	sbiw	r28, 0x10	; 16
    7850:	61 96       	adiw	r28, 0x11	; 17
    7852:	7f ad       	ldd	r23, Y+63	; 0x3f
    7854:	61 97       	sbiw	r28, 0x11	; 17
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
					}
					if (p && ssz <= NBSIZE) {
    7856:	31 e2       	ldi	r19, 0x21	; 33
    7858:	83 16       	cp	r8, r19
    785a:	91 04       	cpc	r9, r1
    785c:	a1 04       	cpc	r10, r1
    785e:	b1 04       	cpc	r11, r1
    7860:	08 f4       	brcc	.+2      	; 0x7864 <load_wav+0x36e>
    7862:	cd c0       	rjmp	.+410    	; 0x79fe <load_wav+0x508>
						if (f_read(fp, p, ssz, &br) || br != ssz) return -1;
						} else {
						if (f_lseek(fp, f_tell(fp) + ssz)) return -1;
    7864:	d8 01       	movw	r26, r16
    7866:	16 96       	adiw	r26, 0x06	; 6
    7868:	4d 91       	ld	r20, X+
    786a:	5d 91       	ld	r21, X+
    786c:	6d 91       	ld	r22, X+
    786e:	7c 91       	ld	r23, X
    7870:	19 97       	sbiw	r26, 0x09	; 9
    7872:	48 0d       	add	r20, r8
    7874:	59 1d       	adc	r21, r9
    7876:	6a 1d       	adc	r22, r10
    7878:	7b 1d       	adc	r23, r11
    787a:	c8 01       	movw	r24, r16
    787c:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <f_lseek>
    7880:	88 23       	and	r24, r24
    7882:	09 f4       	brne	.+2      	; 0x7886 <load_wav+0x390>
    7884:	a3 cf       	rjmp	.-186    	; 0x77cc <load_wav+0x2d6>
    7886:	c4 c0       	rjmp	.+392    	; 0x7a10 <load_wav+0x51a>
					}
				}
				} else {
				if (f_lseek(fp, sz)) return -1;	/* Skip unknown sub-chunk type */
    7888:	b7 01       	movw	r22, r14
    788a:	a6 01       	movw	r20, r12
    788c:	c8 01       	movw	r24, r16
    788e:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <f_lseek>
    7892:	88 23       	and	r24, r24
    7894:	09 f4       	brne	.+2      	; 0x7898 <load_wav+0x3a2>
    7896:	a8 ce       	rjmp	.-688    	; 0x75e8 <load_wav+0xf2>
    7898:	bb c0       	rjmp	.+374    	; 0x7a10 <load_wav+0x51a>

			default :	/* Unknown chunk */
			return -1;
		}
	}
	if (!szwav || !fsmp) return -1;		/* Check if valid WAV file */
    789a:	41 14       	cp	r4, r1
    789c:	51 04       	cpc	r5, r1
    789e:	61 04       	cpc	r6, r1
    78a0:	71 04       	cpc	r7, r1
    78a2:	09 f4       	brne	.+2      	; 0x78a6 <load_wav+0x3b0>
    78a4:	b5 c0       	rjmp	.+362    	; 0x7a10 <load_wav+0x51a>
    78a6:	6f 96       	adiw	r28, 0x1f	; 31
    78a8:	8c ad       	ldd	r24, Y+60	; 0x3c
    78aa:	9d ad       	ldd	r25, Y+61	; 0x3d
    78ac:	ae ad       	ldd	r26, Y+62	; 0x3e
    78ae:	bf ad       	ldd	r27, Y+63	; 0x3f
    78b0:	6f 97       	sbiw	r28, 0x1f	; 31
    78b2:	89 2b       	or	r24, r25
    78b4:	8a 2b       	or	r24, r26
    78b6:	8b 2b       	or	r24, r27
    78b8:	09 f4       	brne	.+2      	; 0x78bc <load_wav+0x3c6>
    78ba:	aa c0       	rjmp	.+340    	; 0x7a10 <load_wav+0x51a>
	if (f_lseek(fp, offw)) return -1;	/* Seek to top of wav data */
    78bc:	6b 96       	adiw	r28, 0x1b	; 27
    78be:	4c ad       	ldd	r20, Y+60	; 0x3c
    78c0:	5d ad       	ldd	r21, Y+61	; 0x3d
    78c2:	6e ad       	ldd	r22, Y+62	; 0x3e
    78c4:	7f ad       	ldd	r23, Y+63	; 0x3f
    78c6:	6b 97       	sbiw	r28, 0x1b	; 27
    78c8:	c8 01       	movw	r24, r16
    78ca:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <f_lseek>
    78ce:	81 11       	cpse	r24, r1
    78d0:	9f c0       	rjmp	.+318    	; 0x7a10 <load_wav+0x51a>

	//xprintf(PSTR("IART=%s\nINAM=%s\n"), art, nam);
	//xprintf(PSTR("Sample=%u.%ukHz/%ubit/%S\nLength=%u:%02u\n"), (UINT)(fsmp / 1000), (UINT)(fsmp / 100) % 10, (md & 2) ? 16 : 8, (md & 1) ? PSTR("st") : PSTR("mo"), tc / 60, tc % 60);

	/* Initialize stream parameters and start sound streming */
	fcb.mode = md;
    78d2:	65 96       	adiw	r28, 0x15	; 21
    78d4:	ae ad       	ldd	r26, Y+62	; 0x3e
    78d6:	bf ad       	ldd	r27, Y+63	; 0x3f
    78d8:	65 97       	sbiw	r28, 0x15	; 21
    78da:	23 96       	adiw	r28, 0x03	; 3
    78dc:	ae af       	std	Y+62, r26	; 0x3e
    78de:	bf af       	std	Y+63, r27	; 0x3f
    78e0:	23 97       	sbiw	r28, 0x03	; 3
	fcb.buff = buff;
    78e2:	2b 96       	adiw	r28, 0x0b	; 11
    78e4:	2e ae       	std	Y+62, r2	; 0x3e
    78e6:	3f ae       	std	Y+63, r3	; 0x3f
    78e8:	2b 97       	sbiw	r28, 0x0b	; 11
	fcb.sz_buff = sz_work;
    78ea:	a5 96       	adiw	r28, 0x25	; 37
    78ec:	ee ad       	ldd	r30, Y+62	; 0x3e
    78ee:	ff ad       	ldd	r31, Y+63	; 0x3f
    78f0:	a5 97       	sbiw	r28, 0x25	; 37
    78f2:	2d 96       	adiw	r28, 0x0d	; 13
    78f4:	ee af       	std	Y+62, r30	; 0x3e
    78f6:	ff af       	std	Y+63, r31	; 0x3f
    78f8:	2d 97       	sbiw	r28, 0x0d	; 13
	if (!sound_start(&fcb, fsmp)) return -1;
    78fa:	6f 96       	adiw	r28, 0x1f	; 31
    78fc:	4c ad       	ldd	r20, Y+60	; 0x3c
    78fe:	5d ad       	ldd	r21, Y+61	; 0x3d
    7900:	6e ad       	ldd	r22, Y+62	; 0x3e
    7902:	7f ad       	ldd	r23, Y+63	; 0x3f
    7904:	6f 97       	sbiw	r28, 0x1f	; 31
    7906:	ce 01       	movw	r24, r28
    7908:	8f 5b       	subi	r24, 0xBF	; 191
    790a:	9f 4f       	sbci	r25, 0xFF	; 255
    790c:	b3 dd       	rcall	.-1178   	; 0x7474 <sound_start>
    790e:	89 2b       	or	r24, r25
    7910:	09 f4       	brne	.+2      	; 0x7914 <load_wav+0x41e>
    7912:	7e c0       	rjmp	.+252    	; 0x7a10 <load_wav+0x51a>

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
    7914:	a5 96       	adiw	r28, 0x25	; 37
    7916:	ce ac       	ldd	r12, Y+62	; 0x3e
    7918:	df ac       	ldd	r13, Y+63	; 0x3f
    791a:	a5 97       	sbiw	r28, 0x25	; 37
    791c:	d6 94       	lsr	r13
    791e:	c7 94       	ror	r12
			btr = (szwav >= sz_work / 2) ? sz_work / 2 : szwav;
    7920:	96 01       	movw	r18, r12
    7922:	40 e0       	ldi	r20, 0x00	; 0
    7924:	50 e0       	ldi	r21, 0x00	; 0
    7926:	67 96       	adiw	r28, 0x17	; 23
    7928:	2c af       	std	Y+60, r18	; 0x3c
    792a:	3d af       	std	Y+61, r19	; 0x3d
    792c:	4e af       	std	Y+62, r20	; 0x3e
    792e:	5f af       	std	Y+63, r21	; 0x3f
    7930:	67 97       	sbiw	r28, 0x17	; 23
    7932:	e1 2c       	mov	r14, r1
    7934:	f1 2c       	mov	r15, r1
			f_read(fp, &buff[wi], btr, &br);
			if (br != btr) break;
			szwav -= br;
			wi = (wi + br) & (sz_work - 1);
    7936:	a5 96       	adiw	r28, 0x25	; 37
    7938:	ae ac       	ldd	r10, Y+62	; 0x3e
    793a:	bf ac       	ldd	r11, Y+63	; 0x3f
    793c:	a5 97       	sbiw	r28, 0x25	; 37
    793e:	31 e0       	ldi	r19, 0x01	; 1
    7940:	a3 1a       	sub	r10, r19
    7942:	b1 08       	sbc	r11, r1
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
    7944:	29 96       	adiw	r28, 0x09	; 9
    7946:	8e ad       	ldd	r24, Y+62	; 0x3e
    7948:	9f ad       	ldd	r25, Y+63	; 0x3f
    794a:	29 97       	sbiw	r28, 0x09	; 9
	fcb.buff = buff;
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
    794c:	41 14       	cp	r4, r1
    794e:	51 04       	cpc	r5, r1
    7950:	61 04       	cpc	r6, r1
    7952:	71 04       	cpc	r7, r1
    7954:	09 f4       	brne	.+2      	; 0x7958 <load_wav+0x462>
    7956:	50 c0       	rjmp	.+160    	; 0x79f8 <load_wav+0x502>
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
    7958:	c8 16       	cp	r12, r24
    795a:	d9 06       	cpc	r13, r25
    795c:	08 f4       	brcc	.+2      	; 0x7960 <load_wav+0x46a>
    795e:	43 c0       	rjmp	.+134    	; 0x79e6 <load_wav+0x4f0>
			btr = (szwav >= sz_work / 2) ? sz_work / 2 : szwav;
    7960:	94 2d       	mov	r25, r4
    7962:	85 2d       	mov	r24, r5
    7964:	67 96       	adiw	r28, 0x17	; 23
    7966:	2c ad       	ldd	r18, Y+60	; 0x3c
    7968:	3d ad       	ldd	r19, Y+61	; 0x3d
    796a:	4e ad       	ldd	r20, Y+62	; 0x3e
    796c:	5f ad       	ldd	r21, Y+63	; 0x3f
    796e:	67 97       	sbiw	r28, 0x17	; 23
    7970:	24 15       	cp	r18, r4
    7972:	35 05       	cpc	r19, r5
    7974:	46 05       	cpc	r20, r6
    7976:	57 05       	cpc	r21, r7
    7978:	30 f4       	brcc	.+12     	; 0x7986 <load_wav+0x490>
    797a:	64 96       	adiw	r28, 0x14	; 20
    797c:	9f ad       	ldd	r25, Y+63	; 0x3f
    797e:	64 97       	sbiw	r28, 0x14	; 20
    7980:	65 96       	adiw	r28, 0x15	; 21
    7982:	8f ad       	ldd	r24, Y+63	; 0x3f
    7984:	65 97       	sbiw	r28, 0x15	; 21
    7986:	89 2e       	mov	r8, r25
    7988:	98 2e       	mov	r9, r24
			f_read(fp, &buff[wi], btr, &br);
    798a:	9e 01       	movw	r18, r28
    798c:	23 5b       	subi	r18, 0xB3	; 179
    798e:	3f 4f       	sbci	r19, 0xFF	; 255
    7990:	49 2f       	mov	r20, r25
    7992:	58 2f       	mov	r21, r24
    7994:	b1 01       	movw	r22, r2
    7996:	6e 0d       	add	r22, r14
    7998:	7f 1d       	adc	r23, r15
    799a:	c8 01       	movw	r24, r16
    799c:	0e 94 54 32 	call	0x64a8	; 0x64a8 <f_read>
			if (br != btr) break;
    79a0:	2f 96       	adiw	r28, 0x0f	; 15
    79a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    79a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    79a6:	2f 97       	sbiw	r28, 0x0f	; 15
    79a8:	88 15       	cp	r24, r8
    79aa:	99 05       	cpc	r25, r9
    79ac:	21 f0       	breq	.+8      	; 0x79b6 <load_wav+0x4c0>
			tc = t;
			//xprintf(PSTR("\rTime=%u:%02u"), tc / 60, tc % 60);
		}
	}

	sound_stop();	/* Stop sound output */
    79ae:	94 dd       	rcall	.-1240   	; 0x74d8 <sound_stop>

	//xputc('\n');
	return k;	/* Terminated due to -1:error, 0:eot, >0:key code */
    79b0:	80 e0       	ldi	r24, 0x00	; 0
    79b2:	90 e0       	ldi	r25, 0x00	; 0
    79b4:	44 c0       	rjmp	.+136    	; 0x7a3e <load_wav+0x548>
	while (szwav || fcb.ct >= 4) {
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
			btr = (szwav >= sz_work / 2) ? sz_work / 2 : szwav;
			f_read(fp, &buff[wi], btr, &br);
			if (br != btr) break;
			szwav -= br;
    79b6:	48 1a       	sub	r4, r24
    79b8:	59 0a       	sbc	r5, r25
    79ba:	61 08       	sbc	r6, r1
    79bc:	71 08       	sbc	r7, r1
			wi = (wi + br) & (sz_work - 1);
    79be:	e8 0e       	add	r14, r24
    79c0:	f9 1e       	adc	r15, r25
    79c2:	ea 20       	and	r14, r10
    79c4:	fb 20       	and	r15, r11
			cli();
    79c6:	f8 94       	cli
			fcb.ct += br;
    79c8:	29 96       	adiw	r28, 0x09	; 9
    79ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    79cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    79ce:	29 97       	sbiw	r28, 0x09	; 9
    79d0:	2f 96       	adiw	r28, 0x0f	; 15
    79d2:	2e ad       	ldd	r18, Y+62	; 0x3e
    79d4:	3f ad       	ldd	r19, Y+63	; 0x3f
    79d6:	2f 97       	sbiw	r28, 0x0f	; 15
    79d8:	82 0f       	add	r24, r18
    79da:	93 1f       	adc	r25, r19
    79dc:	29 96       	adiw	r28, 0x09	; 9
    79de:	8e af       	std	Y+62, r24	; 0x3e
    79e0:	9f af       	std	Y+63, r25	; 0x3f
    79e2:	29 97       	sbiw	r28, 0x09	; 9
			sei();
    79e4:	78 94       	sei
		//if (uart_test()) {		/* Exit if a command arrived */
		//	k = uart_getc();
		//	break;
		//}
		
		if (btn_check_press() == BTN2)
    79e6:	0e 94 c8 11 	call	0x2390	; 0x2390 <btn_check_press>
    79ea:	82 30       	cpi	r24, 0x02	; 2
    79ec:	01 f3       	breq	.-64     	; 0x79ae <load_wav+0x4b8>
		{
			break;
		}
		
		t = (f_tell(fp) - offw - fcb.ct) / fsmp / wsmp;	/* Refresh time display every 1 sec */
    79ee:	29 96       	adiw	r28, 0x09	; 9
    79f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    79f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    79f4:	29 97       	sbiw	r28, 0x09	; 9
    79f6:	a6 cf       	rjmp	.-180    	; 0x7944 <load_wav+0x44e>
	fcb.buff = buff;
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
    79f8:	04 97       	sbiw	r24, 0x04	; 4
    79fa:	a8 f7       	brcc	.-22     	; 0x79e6 <load_wav+0x4f0>
    79fc:	d8 cf       	rjmp	.-80     	; 0x79ae <load_wav+0x4b8>
						p = nam; break;
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
					}
					if (p && ssz <= NBSIZE) {
						if (f_read(fp, p, ssz, &br) || br != ssz) return -1;
    79fe:	9e 01       	movw	r18, r28
    7a00:	23 5b       	subi	r18, 0xB3	; 179
    7a02:	3f 4f       	sbci	r19, 0xFF	; 255
    7a04:	a4 01       	movw	r20, r8
    7a06:	c8 01       	movw	r24, r16
    7a08:	0e 94 54 32 	call	0x64a8	; 0x64a8 <f_read>
    7a0c:	88 23       	and	r24, r24
    7a0e:	51 f0       	breq	.+20     	; 0x7a24 <load_wav+0x52e>
				if (f_lseek(fp, sz)) return -1;	/* Skip unknown sub-chunk type */
			}
			break;

			default :	/* Unknown chunk */
			return -1;
    7a10:	8f ef       	ldi	r24, 0xFF	; 255
    7a12:	9f ef       	ldi	r25, 0xFF	; 255
    7a14:	14 c0       	rjmp	.+40     	; 0x7a3e <load_wav+0x548>
					p = 0;
					switch (LD_DWORD(buff)) {
						case FCC('I','N','A','M'):		/* INAM sub-chunk */
						p = nam; break;
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
    7a16:	62 96       	adiw	r28, 0x12	; 18
    7a18:	6f ad       	ldd	r22, Y+63	; 0x3f
    7a1a:	62 97       	sbiw	r28, 0x12	; 18
    7a1c:	63 96       	adiw	r28, 0x13	; 19
    7a1e:	7f ad       	ldd	r23, Y+63	; 0x3f
    7a20:	63 97       	sbiw	r28, 0x13	; 19
    7a22:	19 cf       	rjmp	.-462    	; 0x7856 <load_wav+0x360>
					}
					if (p && ssz <= NBSIZE) {
						if (f_read(fp, p, ssz, &br) || br != ssz) return -1;
    7a24:	2f 96       	adiw	r28, 0x0f	; 15
    7a26:	8e ad       	ldd	r24, Y+62	; 0x3e
    7a28:	9f ad       	ldd	r25, Y+63	; 0x3f
    7a2a:	2f 97       	sbiw	r28, 0x0f	; 15
    7a2c:	a0 e0       	ldi	r26, 0x00	; 0
    7a2e:	b0 e0       	ldi	r27, 0x00	; 0
    7a30:	88 15       	cp	r24, r8
    7a32:	99 05       	cpc	r25, r9
    7a34:	aa 05       	cpc	r26, r10
    7a36:	bb 05       	cpc	r27, r11
    7a38:	09 f4       	brne	.+2      	; 0x7a3c <load_wav+0x546>
    7a3a:	c8 ce       	rjmp	.-624    	; 0x77cc <load_wav+0x2d6>
    7a3c:	e9 cf       	rjmp	.-46     	; 0x7a10 <load_wav+0x51a>

	sound_stop();	/* Stop sound output */

	//xputc('\n');
	return k;	/* Terminated due to -1:error, 0:eot, >0:key code */
}
    7a3e:	cc 59       	subi	r28, 0x9C	; 156
    7a40:	df 4f       	sbci	r29, 0xFF	; 255
    7a42:	cd bf       	out	0x3d, r28	; 61
    7a44:	de bf       	out	0x3e, r29	; 62
    7a46:	df 91       	pop	r29
    7a48:	cf 91       	pop	r28
    7a4a:	1f 91       	pop	r17
    7a4c:	0f 91       	pop	r16
    7a4e:	ff 90       	pop	r15
    7a50:	ef 90       	pop	r14
    7a52:	df 90       	pop	r13
    7a54:	cf 90       	pop	r12
    7a56:	bf 90       	pop	r11
    7a58:	af 90       	pop	r10
    7a5a:	9f 90       	pop	r9
    7a5c:	8f 90       	pop	r8
    7a5e:	7f 90       	pop	r7
    7a60:	6f 90       	pop	r6
    7a62:	5f 90       	pop	r5
    7a64:	4f 90       	pop	r4
    7a66:	3f 90       	pop	r3
    7a68:	2f 90       	pop	r2
    7a6a:	08 95       	ret

00007a6c <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
    7a6c:	2f 92       	push	r2
    7a6e:	3f 92       	push	r3
    7a70:	5f 92       	push	r5
    7a72:	6f 92       	push	r6
    7a74:	7f 92       	push	r7
    7a76:	8f 92       	push	r8
    7a78:	9f 92       	push	r9
    7a7a:	bf 92       	push	r11
    7a7c:	cf 92       	push	r12
    7a7e:	df 92       	push	r13
    7a80:	ef 92       	push	r14
    7a82:	ff 92       	push	r15
    7a84:	0f 93       	push	r16
    7a86:	1f 93       	push	r17
    7a88:	cf 93       	push	r28
    7a8a:	df 93       	push	r29
    7a8c:	cd b7       	in	r28, 0x3d	; 61
    7a8e:	de b7       	in	r29, 0x3e	; 62
    7a90:	26 97       	sbiw	r28, 0x06	; 6
    7a92:	cd bf       	out	0x3d, r28	; 61
    7a94:	de bf       	out	0x3e, r29	; 62
    7a96:	8d 83       	std	Y+5, r24	; 0x05
    7a98:	9e 83       	std	Y+6, r25	; 0x06
    7a9a:	1a 01       	movw	r2, r20
    7a9c:	38 01       	movw	r6, r16
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;
    7a9e:	80 e0       	ldi	r24, 0x00	; 0
    7aa0:	90 e0       	ldi	r25, 0x00	; 0
			case ':':
				parser->toksuper = parser->toknext - 1;
				break;
			case ',':
				if (tokens != NULL &&
						tokens[parser->toksuper].type != JSMN_ARRAY &&
    7aa2:	47 e0       	ldi	r20, 0x07	; 7
    7aa4:	b4 2e       	mov	r11, r20
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
    7aa6:	0f ef       	ldi	r16, 0xFF	; 255
    7aa8:	1f ef       	ldi	r17, 0xFF	; 255
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    7aaa:	53 e0       	ldi	r21, 0x03	; 3
    7aac:	55 2e       	mov	r5, r21
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    7aae:	ad 81       	ldd	r26, Y+5	; 0x05
    7ab0:	be 81       	ldd	r27, Y+6	; 0x06
    7ab2:	0d 90       	ld	r0, X+
    7ab4:	bc 91       	ld	r27, X
    7ab6:	a0 2d       	mov	r26, r0
    7ab8:	ab 83       	std	Y+3, r26	; 0x03
    7aba:	bc 83       	std	Y+4, r27	; 0x04
    7abc:	a2 15       	cp	r26, r2
    7abe:	b3 05       	cpc	r27, r3
    7ac0:	90 f0       	brcs	.+36     	; 0x7ae6 <jsmn_parse+0x7a>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    7ac2:	ad 81       	ldd	r26, Y+5	; 0x05
    7ac4:	be 81       	ldd	r27, Y+6	; 0x06
    7ac6:	12 96       	adiw	r26, 0x02	; 2
    7ac8:	ed 91       	ld	r30, X+
    7aca:	fc 91       	ld	r31, X
    7acc:	13 97       	sbiw	r26, 0x03	; 3
    7ace:	bf 01       	movw	r22, r30
    7ad0:	61 50       	subi	r22, 0x01	; 1
    7ad2:	71 09       	sbc	r23, r1
    7ad4:	a7 e0       	ldi	r26, 0x07	; 7
    7ad6:	ae 9f       	mul	r26, r30
    7ad8:	a0 01       	movw	r20, r0
    7ada:	af 9f       	mul	r26, r31
    7adc:	50 0d       	add	r21, r0
    7ade:	11 24       	eor	r1, r1
    7ae0:	42 0f       	add	r20, r18
    7ae2:	53 1f       	adc	r21, r19
    7ae4:	93 c2       	rjmp	.+1318   	; 0x800c <jsmn_parse+0x5a0>
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    7ae6:	eb 81       	ldd	r30, Y+3	; 0x03
    7ae8:	fc 81       	ldd	r31, Y+4	; 0x04
    7aea:	e6 0f       	add	r30, r22
    7aec:	f7 1f       	adc	r31, r23
    7aee:	40 81       	ld	r20, Z
    7af0:	44 23       	and	r20, r20
    7af2:	39 f3       	breq	.-50     	; 0x7ac2 <jsmn_parse+0x56>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    7af4:	4c 32       	cpi	r20, 0x2C	; 44
    7af6:	09 f4       	brne	.+2      	; 0x7afa <jsmn_parse+0x8e>
    7af8:	a2 c1       	rjmp	.+836    	; 0x7e3e <jsmn_parse+0x3d2>
    7afa:	c8 f4       	brcc	.+50     	; 0x7b2e <jsmn_parse+0xc2>
    7afc:	4d 30       	cpi	r20, 0x0D	; 13
    7afe:	09 f4       	brne	.+2      	; 0x7b02 <jsmn_parse+0x96>
    7b00:	72 c2       	rjmp	.+1252   	; 0x7fe6 <jsmn_parse+0x57a>
    7b02:	28 f4       	brcc	.+10     	; 0x7b0e <jsmn_parse+0xa2>
    7b04:	49 50       	subi	r20, 0x09	; 9
    7b06:	42 30       	cpi	r20, 0x02	; 2
    7b08:	08 f4       	brcc	.+2      	; 0x7b0c <jsmn_parse+0xa0>
    7b0a:	6d c2       	rjmp	.+1242   	; 0x7fe6 <jsmn_parse+0x57a>
    7b0c:	00 c2       	rjmp	.+1024   	; 0x7f0e <jsmn_parse+0x4a2>
    7b0e:	40 32       	cpi	r20, 0x20	; 32
    7b10:	09 f4       	brne	.+2      	; 0x7b14 <jsmn_parse+0xa8>
    7b12:	69 c2       	rjmp	.+1234   	; 0x7fe6 <jsmn_parse+0x57a>
    7b14:	42 32       	cpi	r20, 0x22	; 34
    7b16:	09 f0       	breq	.+2      	; 0x7b1a <jsmn_parse+0xae>
    7b18:	fa c1       	rjmp	.+1012   	; 0x7f0e <jsmn_parse+0x4a2>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
    7b1a:	8b 80       	ldd	r8, Y+3	; 0x03
    7b1c:	9c 80       	ldd	r9, Y+4	; 0x04
    7b1e:	ff ef       	ldi	r31, 0xFF	; 255
    7b20:	8f 1a       	sub	r8, r31
    7b22:	9f 0a       	sbc	r9, r31
    7b24:	ad 81       	ldd	r26, Y+5	; 0x05
    7b26:	be 81       	ldd	r27, Y+6	; 0x06
    7b28:	8d 92       	st	X+, r8
    7b2a:	9c 92       	st	X, r9
    7b2c:	ce c0       	rjmp	.+412    	; 0x7cca <jsmn_parse+0x25e>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    7b2e:	4d 35       	cpi	r20, 0x5D	; 93
    7b30:	09 f4       	brne	.+2      	; 0x7b34 <jsmn_parse+0xc8>
    7b32:	5f c0       	rjmp	.+190    	; 0x7bf2 <jsmn_parse+0x186>
    7b34:	30 f4       	brcc	.+12     	; 0x7b42 <jsmn_parse+0xd6>
    7b36:	4a 33       	cpi	r20, 0x3A	; 58
    7b38:	09 f4       	brne	.+2      	; 0x7b3c <jsmn_parse+0xd0>
    7b3a:	79 c1       	rjmp	.+754    	; 0x7e2e <jsmn_parse+0x3c2>
    7b3c:	4b 35       	cpi	r20, 0x5B	; 91
    7b3e:	39 f0       	breq	.+14     	; 0x7b4e <jsmn_parse+0xe2>
    7b40:	e6 c1       	rjmp	.+972    	; 0x7f0e <jsmn_parse+0x4a2>
    7b42:	4b 37       	cpi	r20, 0x7B	; 123
    7b44:	21 f0       	breq	.+8      	; 0x7b4e <jsmn_parse+0xe2>
    7b46:	4d 37       	cpi	r20, 0x7D	; 125
    7b48:	09 f4       	brne	.+2      	; 0x7b4c <jsmn_parse+0xe0>
    7b4a:	53 c0       	rjmp	.+166    	; 0x7bf2 <jsmn_parse+0x186>
    7b4c:	e0 c1       	rjmp	.+960    	; 0x7f0e <jsmn_parse+0x4a2>
			case '{': case '[':
				count++;
    7b4e:	01 96       	adiw	r24, 0x01	; 1
				if (tokens == NULL) {
    7b50:	21 15       	cp	r18, r1
    7b52:	31 05       	cpc	r19, r1
    7b54:	09 f4       	brne	.+2      	; 0x7b58 <jsmn_parse+0xec>
    7b56:	47 c2       	rjmp	.+1166   	; 0x7fe6 <jsmn_parse+0x57a>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    7b58:	ad 81       	ldd	r26, Y+5	; 0x05
    7b5a:	be 81       	ldd	r27, Y+6	; 0x06
    7b5c:	12 96       	adiw	r26, 0x02	; 2
    7b5e:	8d 90       	ld	r8, X+
    7b60:	9c 90       	ld	r9, X
    7b62:	13 97       	sbiw	r26, 0x03	; 3
    7b64:	86 14       	cp	r8, r6
    7b66:	97 04       	cpc	r9, r7
    7b68:	08 f0       	brcs	.+2      	; 0x7b6c <jsmn_parse+0x100>
    7b6a:	cf c0       	rjmp	.+414    	; 0x7d0a <jsmn_parse+0x29e>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    7b6c:	f4 01       	movw	r30, r8
    7b6e:	31 96       	adiw	r30, 0x01	; 1
    7b70:	ad 81       	ldd	r26, Y+5	; 0x05
    7b72:	be 81       	ldd	r27, Y+6	; 0x06
    7b74:	12 96       	adiw	r26, 0x02	; 2
    7b76:	ed 93       	st	X+, r30
    7b78:	fc 93       	st	X, r31
    7b7a:	13 97       	sbiw	r26, 0x03	; 3
    7b7c:	b8 9c       	mul	r11, r8
    7b7e:	f0 01       	movw	r30, r0
    7b80:	b9 9c       	mul	r11, r9
    7b82:	f0 0d       	add	r31, r0
    7b84:	11 24       	eor	r1, r1
    7b86:	e2 0f       	add	r30, r18
    7b88:	f3 1f       	adc	r31, r19
    7b8a:	e9 83       	std	Y+1, r30	; 0x01
    7b8c:	fa 83       	std	Y+2, r31	; 0x02
	tok->start = tok->end = -1;
    7b8e:	03 83       	std	Z+3, r16	; 0x03
    7b90:	14 83       	std	Z+4, r17	; 0x04
    7b92:	01 83       	std	Z+1, r16	; 0x01
    7b94:	12 83       	std	Z+2, r17	; 0x02
	tok->size = 0;
    7b96:	15 82       	std	Z+5, r1	; 0x05
    7b98:	16 82       	std	Z+6, r1	; 0x06
				count++;
				if (tokens == NULL) {
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
    7b9a:	ef 2b       	or	r30, r31
    7b9c:	09 f4       	brne	.+2      	; 0x7ba0 <jsmn_parse+0x134>
    7b9e:	b5 c0       	rjmp	.+362    	; 0x7d0a <jsmn_parse+0x29e>
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
    7ba0:	14 96       	adiw	r26, 0x04	; 4
    7ba2:	ed 90       	ld	r14, X+
    7ba4:	fc 90       	ld	r15, X
    7ba6:	15 97       	sbiw	r26, 0x05	; 5
    7ba8:	ff ef       	ldi	r31, 0xFF	; 255
    7baa:	ef 16       	cp	r14, r31
    7bac:	ff 06       	cpc	r15, r31
    7bae:	91 f0       	breq	.+36     	; 0x7bd4 <jsmn_parse+0x168>
					tokens[parser->toksuper].size++;
    7bb0:	be 9c       	mul	r11, r14
    7bb2:	60 01       	movw	r12, r0
    7bb4:	bf 9c       	mul	r11, r15
    7bb6:	d0 0c       	add	r13, r0
    7bb8:	11 24       	eor	r1, r1
    7bba:	c2 0e       	add	r12, r18
    7bbc:	d3 1e       	adc	r13, r19
    7bbe:	d6 01       	movw	r26, r12
    7bc0:	15 96       	adiw	r26, 0x05	; 5
    7bc2:	ed 90       	ld	r14, X+
    7bc4:	fc 90       	ld	r15, X
    7bc6:	16 97       	sbiw	r26, 0x06	; 6
    7bc8:	bf ef       	ldi	r27, 0xFF	; 255
    7bca:	eb 1a       	sub	r14, r27
    7bcc:	fb 0a       	sbc	r15, r27
    7bce:	f6 01       	movw	r30, r12
    7bd0:	e5 82       	std	Z+5, r14	; 0x05
    7bd2:	f6 82       	std	Z+6, r15	; 0x06
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
    7bd4:	4b 37       	cpi	r20, 0x7B	; 123
    7bd6:	11 f4       	brne	.+4      	; 0x7bdc <jsmn_parse+0x170>
    7bd8:	41 e0       	ldi	r20, 0x01	; 1
    7bda:	01 c0       	rjmp	.+2      	; 0x7bde <jsmn_parse+0x172>
    7bdc:	42 e0       	ldi	r20, 0x02	; 2
    7bde:	a9 81       	ldd	r26, Y+1	; 0x01
    7be0:	ba 81       	ldd	r27, Y+2	; 0x02
    7be2:	4c 93       	st	X, r20
				token->start = parser->pos;
    7be4:	eb 81       	ldd	r30, Y+3	; 0x03
    7be6:	fc 81       	ldd	r31, Y+4	; 0x04
    7be8:	11 96       	adiw	r26, 0x01	; 1
    7bea:	ed 93       	st	X+, r30
    7bec:	fc 93       	st	X, r31
    7bee:	12 97       	sbiw	r26, 0x02	; 2
    7bf0:	6b c1       	rjmp	.+726    	; 0x7ec8 <jsmn_parse+0x45c>
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
    7bf2:	21 15       	cp	r18, r1
    7bf4:	31 05       	cpc	r19, r1
    7bf6:	09 f4       	brne	.+2      	; 0x7bfa <jsmn_parse+0x18e>
    7bf8:	f6 c1       	rjmp	.+1004   	; 0x7fe6 <jsmn_parse+0x57a>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
    7bfa:	4d 37       	cpi	r20, 0x7D	; 125
    7bfc:	11 f4       	brne	.+4      	; 0x7c02 <jsmn_parse+0x196>
    7bfe:	41 e0       	ldi	r20, 0x01	; 1
    7c00:	01 c0       	rjmp	.+2      	; 0x7c04 <jsmn_parse+0x198>
    7c02:	42 e0       	ldi	r20, 0x02	; 2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    7c04:	ed 81       	ldd	r30, Y+5	; 0x05
    7c06:	fe 81       	ldd	r31, Y+6	; 0x06
    7c08:	c2 80       	ldd	r12, Z+2	; 0x02
    7c0a:	d3 80       	ldd	r13, Z+3	; 0x03
    7c0c:	76 01       	movw	r14, r12
    7c0e:	f1 e0       	ldi	r31, 0x01	; 1
    7c10:	ef 1a       	sub	r14, r31
    7c12:	f1 08       	sbc	r15, r1
    7c14:	bc 9c       	mul	r11, r12
    7c16:	f0 01       	movw	r30, r0
    7c18:	bd 9c       	mul	r11, r13
    7c1a:	f0 0d       	add	r31, r0
    7c1c:	11 24       	eor	r1, r1
    7c1e:	37 97       	sbiw	r30, 0x07	; 7
    7c20:	e2 0f       	add	r30, r18
    7c22:	f3 1f       	adc	r31, r19
    7c24:	f7 fc       	sbrc	r15, 7
    7c26:	1f c0       	rjmp	.+62     	; 0x7c66 <jsmn_parse+0x1fa>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    7c28:	c1 80       	ldd	r12, Z+1	; 0x01
    7c2a:	d2 80       	ldd	r13, Z+2	; 0x02
    7c2c:	cd 20       	and	r12, r13
    7c2e:	c0 94       	com	r12
    7c30:	a9 f0       	breq	.+42     	; 0x7c5c <jsmn_parse+0x1f0>
    7c32:	c3 80       	ldd	r12, Z+3	; 0x03
    7c34:	d4 80       	ldd	r13, Z+4	; 0x04
    7c36:	af ef       	ldi	r26, 0xFF	; 255
    7c38:	ca 16       	cp	r12, r26
    7c3a:	da 06       	cpc	r13, r26
    7c3c:	79 f4       	brne	.+30     	; 0x7c5c <jsmn_parse+0x1f0>
						if (token->type != type) {
    7c3e:	90 80       	ld	r9, Z
    7c40:	94 12       	cpse	r9, r20
    7c42:	ee c1       	rjmp	.+988    	; 0x8020 <jsmn_parse+0x5b4>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
    7c44:	ad 81       	ldd	r26, Y+5	; 0x05
    7c46:	be 81       	ldd	r27, Y+6	; 0x06
    7c48:	14 96       	adiw	r26, 0x04	; 4
    7c4a:	cd 92       	st	X+, r12
    7c4c:	dc 92       	st	X, r13
    7c4e:	15 97       	sbiw	r26, 0x05	; 5
						token->end = parser->pos + 1;
    7c50:	ab 81       	ldd	r26, Y+3	; 0x03
    7c52:	bc 81       	ldd	r27, Y+4	; 0x04
    7c54:	11 96       	adiw	r26, 0x01	; 1
    7c56:	a3 83       	std	Z+3, r26	; 0x03
    7c58:	b4 83       	std	Z+4, r27	; 0x04
    7c5a:	0a c0       	rjmp	.+20     	; 0x7c70 <jsmn_parse+0x204>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    7c5c:	b1 e0       	ldi	r27, 0x01	; 1
    7c5e:	eb 1a       	sub	r14, r27
    7c60:	f1 08       	sbc	r15, r1
    7c62:	37 97       	sbiw	r30, 0x07	; 7
    7c64:	df cf       	rjmp	.-66     	; 0x7c24 <jsmn_parse+0x1b8>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
    7c66:	ef ef       	ldi	r30, 0xFF	; 255
    7c68:	ee 16       	cp	r14, r30
    7c6a:	fe 06       	cpc	r15, r30
    7c6c:	09 f4       	brne	.+2      	; 0x7c70 <jsmn_parse+0x204>
    7c6e:	d8 c1       	rjmp	.+944    	; 0x8020 <jsmn_parse+0x5b4>
    7c70:	be 9c       	mul	r11, r14
    7c72:	d0 01       	movw	r26, r0
    7c74:	bf 9c       	mul	r11, r15
    7c76:	b0 0d       	add	r27, r0
    7c78:	11 24       	eor	r1, r1
    7c7a:	a2 0f       	add	r26, r18
    7c7c:	b3 1f       	adc	r27, r19
				for (; i >= 0; i--) {
    7c7e:	f7 fc       	sbrc	r15, 7
    7c80:	b2 c1       	rjmp	.+868    	; 0x7fe6 <jsmn_parse+0x57a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    7c82:	11 96       	adiw	r26, 0x01	; 1
    7c84:	ed 91       	ld	r30, X+
    7c86:	fc 91       	ld	r31, X
    7c88:	12 97       	sbiw	r26, 0x02	; 2
    7c8a:	31 96       	adiw	r30, 0x01	; 1
    7c8c:	69 f0       	breq	.+26     	; 0x7ca8 <jsmn_parse+0x23c>
    7c8e:	13 96       	adiw	r26, 0x03	; 3
    7c90:	ed 91       	ld	r30, X+
    7c92:	fc 91       	ld	r31, X
    7c94:	14 97       	sbiw	r26, 0x04	; 4
    7c96:	31 96       	adiw	r30, 0x01	; 1
    7c98:	39 f4       	brne	.+14     	; 0x7ca8 <jsmn_parse+0x23c>
						parser->toksuper = i;
    7c9a:	ad 81       	ldd	r26, Y+5	; 0x05
    7c9c:	be 81       	ldd	r27, Y+6	; 0x06
    7c9e:	14 96       	adiw	r26, 0x04	; 4
    7ca0:	ed 92       	st	X+, r14
    7ca2:	fc 92       	st	X, r15
    7ca4:	15 97       	sbiw	r26, 0x05	; 5
						break;
    7ca6:	9f c1       	rjmp	.+830    	; 0x7fe6 <jsmn_parse+0x57a>
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
				for (; i >= 0; i--) {
    7ca8:	e1 e0       	ldi	r30, 0x01	; 1
    7caa:	ee 1a       	sub	r14, r30
    7cac:	f1 08       	sbc	r15, r1
    7cae:	17 97       	sbiw	r26, 0x07	; 7
    7cb0:	e6 cf       	rjmp	.-52     	; 0x7c7e <jsmn_parse+0x212>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
    7cb2:	4c 35       	cpi	r20, 0x5C	; 92
    7cb4:	09 f4       	brne	.+2      	; 0x7cb8 <jsmn_parse+0x24c>
    7cb6:	50 c0       	rjmp	.+160    	; 0x7d58 <jsmn_parse+0x2ec>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    7cb8:	ad 81       	ldd	r26, Y+5	; 0x05
    7cba:	be 81       	ldd	r27, Y+6	; 0x06
    7cbc:	4d 91       	ld	r20, X+
    7cbe:	5c 91       	ld	r21, X
    7cc0:	11 97       	sbiw	r26, 0x01	; 1
    7cc2:	4f 5f       	subi	r20, 0xFF	; 255
    7cc4:	5f 4f       	sbci	r21, 0xFF	; 255
    7cc6:	4d 93       	st	X+, r20
    7cc8:	5c 93       	st	X, r21
    7cca:	ed 81       	ldd	r30, Y+5	; 0x05
    7ccc:	fe 81       	ldd	r31, Y+6	; 0x06
    7cce:	e0 80       	ld	r14, Z
    7cd0:	f1 80       	ldd	r15, Z+1	; 0x01
    7cd2:	e2 14       	cp	r14, r2
    7cd4:	f3 04       	cpc	r15, r3
    7cd6:	d8 f4       	brcc	.+54     	; 0x7d0e <jsmn_parse+0x2a2>
    7cd8:	fb 01       	movw	r30, r22
    7cda:	ee 0d       	add	r30, r14
    7cdc:	ff 1d       	adc	r31, r15
    7cde:	40 81       	ld	r20, Z
    7ce0:	44 23       	and	r20, r20
    7ce2:	a9 f0       	breq	.+42     	; 0x7d0e <jsmn_parse+0x2a2>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
    7ce4:	42 32       	cpi	r20, 0x22	; 34
    7ce6:	29 f7       	brne	.-54     	; 0x7cb2 <jsmn_parse+0x246>
			if (tokens == NULL) {
    7ce8:	21 15       	cp	r18, r1
    7cea:	31 05       	cpc	r19, r1
    7cec:	09 f4       	brne	.+2      	; 0x7cf0 <jsmn_parse+0x284>
    7cee:	5c c1       	rjmp	.+696    	; 0x7fa8 <jsmn_parse+0x53c>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    7cf0:	ed 81       	ldd	r30, Y+5	; 0x05
    7cf2:	fe 81       	ldd	r31, Y+6	; 0x06
    7cf4:	c2 80       	ldd	r12, Z+2	; 0x02
    7cf6:	d3 80       	ldd	r13, Z+3	; 0x03
    7cf8:	c6 14       	cp	r12, r6
    7cfa:	d7 04       	cpc	r13, r7
    7cfc:	78 f0       	brcs	.+30     	; 0x7d1c <jsmn_parse+0x2b0>
			if (tokens == NULL) {
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
    7cfe:	eb 81       	ldd	r30, Y+3	; 0x03
    7d00:	fc 81       	ldd	r31, Y+4	; 0x04
    7d02:	ad 81       	ldd	r26, Y+5	; 0x05
    7d04:	be 81       	ldd	r27, Y+6	; 0x06
    7d06:	ed 93       	st	X+, r30
    7d08:	fc 93       	st	X, r31
				return JSMN_ERROR_NOMEM;
    7d0a:	8f ef       	ldi	r24, 0xFF	; 255
    7d0c:	8c c1       	rjmp	.+792    	; 0x8026 <jsmn_parse+0x5ba>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
    7d0e:	eb 81       	ldd	r30, Y+3	; 0x03
    7d10:	fc 81       	ldd	r31, Y+4	; 0x04
    7d12:	ad 81       	ldd	r26, Y+5	; 0x05
    7d14:	be 81       	ldd	r27, Y+6	; 0x06
    7d16:	ed 93       	st	X+, r30
    7d18:	fc 93       	st	X, r31
    7d1a:	84 c1       	rjmp	.+776    	; 0x8024 <jsmn_parse+0x5b8>
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    7d1c:	a6 01       	movw	r20, r12
    7d1e:	4f 5f       	subi	r20, 0xFF	; 255
    7d20:	5f 4f       	sbci	r21, 0xFF	; 255
    7d22:	ad 81       	ldd	r26, Y+5	; 0x05
    7d24:	be 81       	ldd	r27, Y+6	; 0x06
    7d26:	12 96       	adiw	r26, 0x02	; 2
    7d28:	4d 93       	st	X+, r20
    7d2a:	5c 93       	st	X, r21
    7d2c:	13 97       	sbiw	r26, 0x03	; 3
    7d2e:	bc 9c       	mul	r11, r12
    7d30:	f0 01       	movw	r30, r0
    7d32:	bd 9c       	mul	r11, r13
    7d34:	f0 0d       	add	r31, r0
    7d36:	11 24       	eor	r1, r1
    7d38:	e2 0f       	add	r30, r18
    7d3a:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    7d3c:	03 83       	std	Z+3, r16	; 0x03
    7d3e:	14 83       	std	Z+4, r17	; 0x04
    7d40:	01 83       	std	Z+1, r16	; 0x01
    7d42:	12 83       	std	Z+2, r17	; 0x02
	tok->size = 0;
    7d44:	15 82       	std	Z+5, r1	; 0x05
    7d46:	16 82       	std	Z+6, r1	; 0x06
		if (c == '\"') {
			if (tokens == NULL) {
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
    7d48:	30 97       	sbiw	r30, 0x00	; 0
    7d4a:	c9 f2       	breq	.-78     	; 0x7cfe <jsmn_parse+0x292>
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    7d4c:	50 82       	st	Z, r5
	token->start = start;
    7d4e:	81 82       	std	Z+1, r8	; 0x01
    7d50:	92 82       	std	Z+2, r9	; 0x02
	token->end = end;
    7d52:	e3 82       	std	Z+3, r14	; 0x03
    7d54:	f4 82       	std	Z+4, r15	; 0x04
    7d56:	28 c1       	rjmp	.+592    	; 0x7fa8 <jsmn_parse+0x53c>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
    7d58:	a7 01       	movw	r20, r14
    7d5a:	4f 5f       	subi	r20, 0xFF	; 255
    7d5c:	5f 4f       	sbci	r21, 0xFF	; 255
    7d5e:	42 15       	cp	r20, r2
    7d60:	53 05       	cpc	r21, r3
    7d62:	08 f0       	brcs	.+2      	; 0x7d66 <jsmn_parse+0x2fa>
    7d64:	a9 cf       	rjmp	.-174    	; 0x7cb8 <jsmn_parse+0x24c>
			int i;
			parser->pos++;
    7d66:	ed 81       	ldd	r30, Y+5	; 0x05
    7d68:	fe 81       	ldd	r31, Y+6	; 0x06
    7d6a:	40 83       	st	Z, r20
    7d6c:	51 83       	std	Z+1, r21	; 0x01
			switch (js[parser->pos]) {
    7d6e:	46 0f       	add	r20, r22
    7d70:	57 1f       	adc	r21, r23
    7d72:	da 01       	movw	r26, r20
    7d74:	4c 91       	ld	r20, X
    7d76:	46 36       	cpi	r20, 0x66	; 102
    7d78:	09 f4       	brne	.+2      	; 0x7d7c <jsmn_parse+0x310>
    7d7a:	9e cf       	rjmp	.-196    	; 0x7cb8 <jsmn_parse+0x24c>
    7d7c:	78 f4       	brcc	.+30     	; 0x7d9c <jsmn_parse+0x330>
    7d7e:	4f 32       	cpi	r20, 0x2F	; 47
    7d80:	09 f4       	brne	.+2      	; 0x7d84 <jsmn_parse+0x318>
    7d82:	9a cf       	rjmp	.-204    	; 0x7cb8 <jsmn_parse+0x24c>
    7d84:	20 f4       	brcc	.+8      	; 0x7d8e <jsmn_parse+0x322>
    7d86:	42 32       	cpi	r20, 0x22	; 34
    7d88:	09 f0       	breq	.+2      	; 0x7d8c <jsmn_parse+0x320>
    7d8a:	a5 c0       	rjmp	.+330    	; 0x7ed6 <jsmn_parse+0x46a>
    7d8c:	95 cf       	rjmp	.-214    	; 0x7cb8 <jsmn_parse+0x24c>
    7d8e:	4c 35       	cpi	r20, 0x5C	; 92
    7d90:	09 f4       	brne	.+2      	; 0x7d94 <jsmn_parse+0x328>
    7d92:	92 cf       	rjmp	.-220    	; 0x7cb8 <jsmn_parse+0x24c>
    7d94:	42 36       	cpi	r20, 0x62	; 98
    7d96:	09 f0       	breq	.+2      	; 0x7d9a <jsmn_parse+0x32e>
    7d98:	9e c0       	rjmp	.+316    	; 0x7ed6 <jsmn_parse+0x46a>
    7d9a:	8e cf       	rjmp	.-228    	; 0x7cb8 <jsmn_parse+0x24c>
    7d9c:	42 37       	cpi	r20, 0x72	; 114
    7d9e:	09 f4       	brne	.+2      	; 0x7da2 <jsmn_parse+0x336>
    7da0:	8b cf       	rjmp	.-234    	; 0x7cb8 <jsmn_parse+0x24c>
    7da2:	20 f4       	brcc	.+8      	; 0x7dac <jsmn_parse+0x340>
    7da4:	4e 36       	cpi	r20, 0x6E	; 110
    7da6:	09 f0       	breq	.+2      	; 0x7daa <jsmn_parse+0x33e>
    7da8:	96 c0       	rjmp	.+300    	; 0x7ed6 <jsmn_parse+0x46a>
    7daa:	86 cf       	rjmp	.-244    	; 0x7cb8 <jsmn_parse+0x24c>
    7dac:	44 37       	cpi	r20, 0x74	; 116
    7dae:	09 f4       	brne	.+2      	; 0x7db2 <jsmn_parse+0x346>
    7db0:	83 cf       	rjmp	.-250    	; 0x7cb8 <jsmn_parse+0x24c>
    7db2:	45 37       	cpi	r20, 0x75	; 117
    7db4:	09 f0       	breq	.+2      	; 0x7db8 <jsmn_parse+0x34c>
    7db6:	8f c0       	rjmp	.+286    	; 0x7ed6 <jsmn_parse+0x46a>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
    7db8:	b2 e0       	ldi	r27, 0x02	; 2
    7dba:	eb 0e       	add	r14, r27
    7dbc:	f1 1c       	adc	r15, r1
    7dbe:	ed 81       	ldd	r30, Y+5	; 0x05
    7dc0:	fe 81       	ldd	r31, Y+6	; 0x06
    7dc2:	e0 82       	st	Z, r14
    7dc4:	f1 82       	std	Z+1, r15	; 0x01
    7dc6:	44 e0       	ldi	r20, 0x04	; 4
    7dc8:	50 e0       	ldi	r21, 0x00	; 0
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    7dca:	ad 81       	ldd	r26, Y+5	; 0x05
    7dcc:	be 81       	ldd	r27, Y+6	; 0x06
    7dce:	cd 90       	ld	r12, X+
    7dd0:	dc 90       	ld	r13, X
    7dd2:	c2 14       	cp	r12, r2
    7dd4:	d3 04       	cpc	r13, r3
    7dd6:	48 f0       	brcs	.+18     	; 0x7dea <jsmn_parse+0x37e>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
    7dd8:	ed 81       	ldd	r30, Y+5	; 0x05
    7dda:	fe 81       	ldd	r31, Y+6	; 0x06
    7ddc:	40 81       	ld	r20, Z
    7dde:	51 81       	ldd	r21, Z+1	; 0x01
    7de0:	41 50       	subi	r20, 0x01	; 1
    7de2:	51 09       	sbc	r21, r1
    7de4:	40 83       	st	Z, r20
    7de6:	51 83       	std	Z+1, r21	; 0x01
    7de8:	67 cf       	rjmp	.-306    	; 0x7cb8 <jsmn_parse+0x24c>
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    7dea:	fb 01       	movw	r30, r22
    7dec:	ec 0d       	add	r30, r12
    7dee:	fd 1d       	adc	r31, r13
    7df0:	e0 81       	ld	r30, Z
    7df2:	ee 23       	and	r30, r30
    7df4:	89 f3       	breq	.-30     	; 0x7dd8 <jsmn_parse+0x36c>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
    7df6:	f0 ed       	ldi	r31, 0xD0	; 208
    7df8:	fe 0f       	add	r31, r30
    7dfa:	fa 30       	cpi	r31, 0x0A	; 10
    7dfc:	58 f0       	brcs	.+22     	; 0x7e14 <jsmn_parse+0x3a8>
    7dfe:	ef 7d       	andi	r30, 0xDF	; 223
    7e00:	e1 54       	subi	r30, 0x41	; 65
    7e02:	e6 30       	cpi	r30, 0x06	; 6
    7e04:	38 f0       	brcs	.+14     	; 0x7e14 <jsmn_parse+0x3a8>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
    7e06:	eb 81       	ldd	r30, Y+3	; 0x03
    7e08:	fc 81       	ldd	r31, Y+4	; 0x04
    7e0a:	ad 81       	ldd	r26, Y+5	; 0x05
    7e0c:	be 81       	ldd	r27, Y+6	; 0x06
    7e0e:	ed 93       	st	X+, r30
    7e10:	fc 93       	st	X, r31
    7e12:	06 c1       	rjmp	.+524    	; 0x8020 <jsmn_parse+0x5b4>
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
    7e14:	ff ef       	ldi	r31, 0xFF	; 255
    7e16:	cf 1a       	sub	r12, r31
    7e18:	df 0a       	sbc	r13, r31
    7e1a:	ad 81       	ldd	r26, Y+5	; 0x05
    7e1c:	be 81       	ldd	r27, Y+6	; 0x06
    7e1e:	cd 92       	st	X+, r12
    7e20:	dc 92       	st	X, r13
    7e22:	41 50       	subi	r20, 0x01	; 1
    7e24:	51 09       	sbc	r21, r1
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    7e26:	41 15       	cp	r20, r1
    7e28:	51 05       	cpc	r21, r1
    7e2a:	79 f6       	brne	.-98     	; 0x7dca <jsmn_parse+0x35e>
    7e2c:	d5 cf       	rjmp	.-86     	; 0x7dd8 <jsmn_parse+0x36c>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
    7e2e:	ed 81       	ldd	r30, Y+5	; 0x05
    7e30:	fe 81       	ldd	r31, Y+6	; 0x06
    7e32:	a2 81       	ldd	r26, Z+2	; 0x02
    7e34:	b3 81       	ldd	r27, Z+3	; 0x03
    7e36:	11 97       	sbiw	r26, 0x01	; 1
    7e38:	a4 83       	std	Z+4, r26	; 0x04
    7e3a:	b5 83       	std	Z+5, r27	; 0x05
				break;
    7e3c:	d4 c0       	rjmp	.+424    	; 0x7fe6 <jsmn_parse+0x57a>
			case ',':
				if (tokens != NULL &&
    7e3e:	21 15       	cp	r18, r1
    7e40:	31 05       	cpc	r19, r1
    7e42:	09 f4       	brne	.+2      	; 0x7e46 <jsmn_parse+0x3da>
    7e44:	d0 c0       	rjmp	.+416    	; 0x7fe6 <jsmn_parse+0x57a>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
    7e46:	ad 81       	ldd	r26, Y+5	; 0x05
    7e48:	be 81       	ldd	r27, Y+6	; 0x06
    7e4a:	14 96       	adiw	r26, 0x04	; 4
    7e4c:	4d 91       	ld	r20, X+
    7e4e:	5c 91       	ld	r21, X
    7e50:	15 97       	sbiw	r26, 0x05	; 5
    7e52:	b4 9e       	mul	r11, r20
    7e54:	d0 01       	movw	r26, r0
    7e56:	b5 9e       	mul	r11, r21
    7e58:	b0 0d       	add	r27, r0
    7e5a:	11 24       	eor	r1, r1
    7e5c:	a2 0f       	add	r26, r18
    7e5e:	b3 1f       	adc	r27, r19
    7e60:	ac 91       	ld	r26, X
    7e62:	a1 50       	subi	r26, 0x01	; 1
    7e64:	a2 30       	cpi	r26, 0x02	; 2
    7e66:	08 f4       	brcc	.+2      	; 0x7e6a <jsmn_parse+0x3fe>
    7e68:	be c0       	rjmp	.+380    	; 0x7fe6 <jsmn_parse+0x57a>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
    7e6a:	ed 81       	ldd	r30, Y+5	; 0x05
    7e6c:	fe 81       	ldd	r31, Y+6	; 0x06
    7e6e:	e2 80       	ldd	r14, Z+2	; 0x02
    7e70:	f3 80       	ldd	r15, Z+3	; 0x03
    7e72:	47 01       	movw	r8, r14
    7e74:	f1 e0       	ldi	r31, 0x01	; 1
    7e76:	8f 1a       	sub	r8, r31
    7e78:	91 08       	sbc	r9, r1
    7e7a:	be 9c       	mul	r11, r14
    7e7c:	d0 01       	movw	r26, r0
    7e7e:	bf 9c       	mul	r11, r15
    7e80:	b0 0d       	add	r27, r0
    7e82:	11 24       	eor	r1, r1
    7e84:	a2 0f       	add	r26, r18
    7e86:	b3 1f       	adc	r27, r19
    7e88:	04 c0       	rjmp	.+8      	; 0x7e92 <jsmn_parse+0x426>
    7e8a:	b1 e0       	ldi	r27, 0x01	; 1
    7e8c:	8b 1a       	sub	r8, r27
    7e8e:	91 08       	sbc	r9, r1
    7e90:	d6 01       	movw	r26, r12
    7e92:	97 fc       	sbrc	r9, 7
    7e94:	a8 c0       	rjmp	.+336    	; 0x7fe6 <jsmn_parse+0x57a>
    7e96:	6d 01       	movw	r12, r26
    7e98:	47 e0       	ldi	r20, 0x07	; 7
    7e9a:	c4 1a       	sub	r12, r20
    7e9c:	d1 08       	sbc	r13, r1
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
    7e9e:	f6 01       	movw	r30, r12
    7ea0:	40 81       	ld	r20, Z
    7ea2:	41 50       	subi	r20, 0x01	; 1
    7ea4:	42 30       	cpi	r20, 0x02	; 2
    7ea6:	88 f7       	brcc	.-30     	; 0x7e8a <jsmn_parse+0x41e>
    7ea8:	7d 01       	movw	r14, r26
    7eaa:	f6 e0       	ldi	r31, 0x06	; 6
    7eac:	ef 1a       	sub	r14, r31
    7eae:	f1 08       	sbc	r15, r1
							if (tokens[i].start != -1 && tokens[i].end == -1) {
    7eb0:	f7 01       	movw	r30, r14
    7eb2:	e0 80       	ld	r14, Z
    7eb4:	f1 80       	ldd	r15, Z+1	; 0x01
    7eb6:	ef 20       	and	r14, r15
    7eb8:	e0 94       	com	r14
    7eba:	39 f3       	breq	.-50     	; 0x7e8a <jsmn_parse+0x41e>
    7ebc:	14 97       	sbiw	r26, 0x04	; 4
    7ebe:	0d 90       	ld	r0, X+
    7ec0:	bc 91       	ld	r27, X
    7ec2:	a0 2d       	mov	r26, r0
    7ec4:	11 96       	adiw	r26, 0x01	; 1
    7ec6:	09 f7       	brne	.-62     	; 0x7e8a <jsmn_parse+0x41e>
								parser->toksuper = i;
    7ec8:	ad 81       	ldd	r26, Y+5	; 0x05
    7eca:	be 81       	ldd	r27, Y+6	; 0x06
    7ecc:	14 96       	adiw	r26, 0x04	; 4
    7ece:	8d 92       	st	X+, r8
    7ed0:	9c 92       	st	X, r9
    7ed2:	15 97       	sbiw	r26, 0x05	; 5
								break;
    7ed4:	88 c0       	rjmp	.+272    	; 0x7fe6 <jsmn_parse+0x57a>
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
			parser->pos = start;
    7ed6:	eb 80       	ldd	r14, Y+3	; 0x03
    7ed8:	fc 80       	ldd	r15, Y+4	; 0x04
    7eda:	ed 81       	ldd	r30, Y+5	; 0x05
    7edc:	fe 81       	ldd	r31, Y+6	; 0x06
    7ede:	e0 82       	st	Z, r14
    7ee0:	f1 82       	std	Z+1, r15	; 0x01
    7ee2:	9e c0       	rjmp	.+316    	; 0x8020 <jsmn_parse+0x5b4>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    7ee4:	fb 01       	movw	r30, r22
    7ee6:	ee 0d       	add	r30, r14
    7ee8:	ff 1d       	adc	r31, r15
    7eea:	40 81       	ld	r20, Z
    7eec:	44 23       	and	r20, r20
    7eee:	31 f1       	breq	.+76     	; 0x7f3c <jsmn_parse+0x4d0>
		switch (js[parser->pos]) {
    7ef0:	40 32       	cpi	r20, 0x20	; 32
    7ef2:	21 f1       	breq	.+72     	; 0x7f3c <jsmn_parse+0x4d0>
    7ef4:	c8 f4       	brcc	.+50     	; 0x7f28 <jsmn_parse+0x4bc>
    7ef6:	49 30       	cpi	r20, 0x09	; 9
    7ef8:	90 f4       	brcc	.+36     	; 0x7f1e <jsmn_parse+0x4b2>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
    7efa:	40 52       	subi	r20, 0x20	; 32
    7efc:	4f 35       	cpi	r20, 0x5F	; 95
    7efe:	58 f7       	brcc	.-42     	; 0x7ed6 <jsmn_parse+0x46a>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    7f00:	4f ef       	ldi	r20, 0xFF	; 255
    7f02:	e4 1a       	sub	r14, r20
    7f04:	f4 0a       	sbc	r15, r20
    7f06:	ad 81       	ldd	r26, Y+5	; 0x05
    7f08:	be 81       	ldd	r27, Y+6	; 0x06
    7f0a:	ed 92       	st	X+, r14
    7f0c:	fc 92       	st	X, r15
    7f0e:	ed 81       	ldd	r30, Y+5	; 0x05
    7f10:	fe 81       	ldd	r31, Y+6	; 0x06
    7f12:	e0 80       	ld	r14, Z
    7f14:	f1 80       	ldd	r15, Z+1	; 0x01
    7f16:	e2 14       	cp	r14, r2
    7f18:	f3 04       	cpc	r15, r3
    7f1a:	20 f3       	brcs	.-56     	; 0x7ee4 <jsmn_parse+0x478>
    7f1c:	0f c0       	rjmp	.+30     	; 0x7f3c <jsmn_parse+0x4d0>
		switch (js[parser->pos]) {
    7f1e:	4b 30       	cpi	r20, 0x0B	; 11
    7f20:	68 f0       	brcs	.+26     	; 0x7f3c <jsmn_parse+0x4d0>
    7f22:	4d 30       	cpi	r20, 0x0D	; 13
    7f24:	51 f7       	brne	.-44     	; 0x7efa <jsmn_parse+0x48e>
    7f26:	0a c0       	rjmp	.+20     	; 0x7f3c <jsmn_parse+0x4d0>
    7f28:	4a 33       	cpi	r20, 0x3A	; 58
    7f2a:	41 f0       	breq	.+16     	; 0x7f3c <jsmn_parse+0x4d0>
    7f2c:	18 f4       	brcc	.+6      	; 0x7f34 <jsmn_parse+0x4c8>
    7f2e:	4c 32       	cpi	r20, 0x2C	; 44
    7f30:	21 f7       	brne	.-56     	; 0x7efa <jsmn_parse+0x48e>
    7f32:	04 c0       	rjmp	.+8      	; 0x7f3c <jsmn_parse+0x4d0>
    7f34:	4d 35       	cpi	r20, 0x5D	; 93
    7f36:	11 f0       	breq	.+4      	; 0x7f3c <jsmn_parse+0x4d0>
    7f38:	4d 37       	cpi	r20, 0x7D	; 125
    7f3a:	f9 f6       	brne	.-66     	; 0x7efa <jsmn_parse+0x48e>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
    7f3c:	21 15       	cp	r18, r1
    7f3e:	31 05       	cpc	r19, r1
    7f40:	31 f4       	brne	.+12     	; 0x7f4e <jsmn_parse+0x4e2>
		parser->pos--;
    7f42:	f1 e0       	ldi	r31, 0x01	; 1
    7f44:	ef 1a       	sub	r14, r31
    7f46:	f1 08       	sbc	r15, r1
    7f48:	ad 81       	ldd	r26, Y+5	; 0x05
    7f4a:	be 81       	ldd	r27, Y+6	; 0x06
    7f4c:	2b c0       	rjmp	.+86     	; 0x7fa4 <jsmn_parse+0x538>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    7f4e:	ed 81       	ldd	r30, Y+5	; 0x05
    7f50:	fe 81       	ldd	r31, Y+6	; 0x06
    7f52:	c2 80       	ldd	r12, Z+2	; 0x02
    7f54:	d3 80       	ldd	r13, Z+3	; 0x03
    7f56:	c6 14       	cp	r12, r6
    7f58:	d7 04       	cpc	r13, r7
    7f5a:	08 f0       	brcs	.+2      	; 0x7f5e <jsmn_parse+0x4f2>
    7f5c:	d0 ce       	rjmp	.-608    	; 0x7cfe <jsmn_parse+0x292>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    7f5e:	a6 01       	movw	r20, r12
    7f60:	4f 5f       	subi	r20, 0xFF	; 255
    7f62:	5f 4f       	sbci	r21, 0xFF	; 255
    7f64:	ad 81       	ldd	r26, Y+5	; 0x05
    7f66:	be 81       	ldd	r27, Y+6	; 0x06
    7f68:	12 96       	adiw	r26, 0x02	; 2
    7f6a:	4d 93       	st	X+, r20
    7f6c:	5c 93       	st	X, r21
    7f6e:	13 97       	sbiw	r26, 0x03	; 3
    7f70:	bc 9c       	mul	r11, r12
    7f72:	f0 01       	movw	r30, r0
    7f74:	bd 9c       	mul	r11, r13
    7f76:	f0 0d       	add	r31, r0
    7f78:	11 24       	eor	r1, r1
    7f7a:	e2 0f       	add	r30, r18
    7f7c:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    7f7e:	03 83       	std	Z+3, r16	; 0x03
    7f80:	14 83       	std	Z+4, r17	; 0x04
    7f82:	01 83       	std	Z+1, r16	; 0x01
    7f84:	12 83       	std	Z+2, r17	; 0x02
	tok->size = 0;
    7f86:	15 82       	std	Z+5, r1	; 0x05
    7f88:	16 82       	std	Z+6, r1	; 0x06
	if (tokens == NULL) {
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
    7f8a:	30 97       	sbiw	r30, 0x00	; 0
    7f8c:	09 f4       	brne	.+2      	; 0x7f90 <jsmn_parse+0x524>
    7f8e:	b7 ce       	rjmp	.-658    	; 0x7cfe <jsmn_parse+0x292>
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    7f90:	10 82       	st	Z, r1
	token->start = start;
    7f92:	4b 81       	ldd	r20, Y+3	; 0x03
    7f94:	5c 81       	ldd	r21, Y+4	; 0x04
    7f96:	41 83       	std	Z+1, r20	; 0x01
    7f98:	52 83       	std	Z+2, r21	; 0x02
	token->end = end;
    7f9a:	e3 82       	std	Z+3, r14	; 0x03
    7f9c:	f4 82       	std	Z+4, r15	; 0x04
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
    7f9e:	51 e0       	ldi	r21, 0x01	; 1
    7fa0:	e5 1a       	sub	r14, r21
    7fa2:	f1 08       	sbc	r15, r1
    7fa4:	ed 92       	st	X+, r14
    7fa6:	fc 92       	st	X, r15
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    7fa8:	01 96       	adiw	r24, 0x01	; 1
				if (parser->toksuper != -1 && tokens != NULL)
    7faa:	ad 81       	ldd	r26, Y+5	; 0x05
    7fac:	be 81       	ldd	r27, Y+6	; 0x06
    7fae:	14 96       	adiw	r26, 0x04	; 4
    7fb0:	ed 91       	ld	r30, X+
    7fb2:	fc 91       	ld	r31, X
    7fb4:	15 97       	sbiw	r26, 0x05	; 5
    7fb6:	ef 3f       	cpi	r30, 0xFF	; 255
    7fb8:	bf ef       	ldi	r27, 0xFF	; 255
    7fba:	fb 07       	cpc	r31, r27
    7fbc:	a1 f0       	breq	.+40     	; 0x7fe6 <jsmn_parse+0x57a>
    7fbe:	21 15       	cp	r18, r1
    7fc0:	31 05       	cpc	r19, r1
    7fc2:	89 f0       	breq	.+34     	; 0x7fe6 <jsmn_parse+0x57a>
					tokens[parser->toksuper].size++;
    7fc4:	be 9e       	mul	r11, r30
    7fc6:	d0 01       	movw	r26, r0
    7fc8:	bf 9e       	mul	r11, r31
    7fca:	b0 0d       	add	r27, r0
    7fcc:	11 24       	eor	r1, r1
    7fce:	a2 0f       	add	r26, r18
    7fd0:	b3 1f       	adc	r27, r19
    7fd2:	15 96       	adiw	r26, 0x05	; 5
    7fd4:	4d 91       	ld	r20, X+
    7fd6:	5c 91       	ld	r21, X
    7fd8:	16 97       	sbiw	r26, 0x06	; 6
    7fda:	4f 5f       	subi	r20, 0xFF	; 255
    7fdc:	5f 4f       	sbci	r21, 0xFF	; 255
    7fde:	15 96       	adiw	r26, 0x05	; 5
    7fe0:	4d 93       	st	X+, r20
    7fe2:	5c 93       	st	X, r21
    7fe4:	16 97       	sbiw	r26, 0x06	; 6
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    7fe6:	ed 81       	ldd	r30, Y+5	; 0x05
    7fe8:	fe 81       	ldd	r31, Y+6	; 0x06
    7fea:	a0 81       	ld	r26, Z
    7fec:	b1 81       	ldd	r27, Z+1	; 0x01
    7fee:	11 96       	adiw	r26, 0x01	; 1
    7ff0:	a0 83       	st	Z, r26
    7ff2:	b1 83       	std	Z+1, r27	; 0x01
    7ff4:	5c cd       	rjmp	.-1352   	; 0x7aae <jsmn_parse+0x42>
    7ff6:	fa 01       	movw	r30, r20
    7ff8:	36 97       	sbiw	r30, 0x06	; 6
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
    7ffa:	20 81       	ld	r18, Z
    7ffc:	31 81       	ldd	r19, Z+1	; 0x01
    7ffe:	2f 3f       	cpi	r18, 0xFF	; 255
    8000:	3f 4f       	sbci	r19, 0xFF	; 255
    8002:	39 f4       	brne	.+14     	; 0x8012 <jsmn_parse+0x5a6>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    8004:	61 50       	subi	r22, 0x01	; 1
    8006:	71 09       	sbc	r23, r1
    8008:	47 50       	subi	r20, 0x07	; 7
    800a:	51 09       	sbc	r21, r1
    800c:	77 ff       	sbrs	r23, 7
    800e:	f3 cf       	rjmp	.-26     	; 0x7ff6 <jsmn_parse+0x58a>
    8010:	0a c0       	rjmp	.+20     	; 0x8026 <jsmn_parse+0x5ba>
    8012:	32 96       	adiw	r30, 0x02	; 2
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
    8014:	20 81       	ld	r18, Z
    8016:	31 81       	ldd	r19, Z+1	; 0x01
    8018:	2f 3f       	cpi	r18, 0xFF	; 255
    801a:	3f 4f       	sbci	r19, 0xFF	; 255
    801c:	99 f7       	brne	.-26     	; 0x8004 <jsmn_parse+0x598>
    801e:	02 c0       	rjmp	.+4      	; 0x8024 <jsmn_parse+0x5b8>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
    8020:	8e ef       	ldi	r24, 0xFE	; 254
    8022:	01 c0       	rjmp	.+2      	; 0x8026 <jsmn_parse+0x5ba>
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
			return JSMN_ERROR_PART;
    8024:	8d ef       	ldi	r24, 0xFD	; 253
		}
	}

	return count;
}
    8026:	26 96       	adiw	r28, 0x06	; 6
    8028:	cd bf       	out	0x3d, r28	; 61
    802a:	de bf       	out	0x3e, r29	; 62
    802c:	df 91       	pop	r29
    802e:	cf 91       	pop	r28
    8030:	1f 91       	pop	r17
    8032:	0f 91       	pop	r16
    8034:	ff 90       	pop	r15
    8036:	ef 90       	pop	r14
    8038:	df 90       	pop	r13
    803a:	cf 90       	pop	r12
    803c:	bf 90       	pop	r11
    803e:	9f 90       	pop	r9
    8040:	8f 90       	pop	r8
    8042:	7f 90       	pop	r7
    8044:	6f 90       	pop	r6
    8046:	5f 90       	pop	r5
    8048:	3f 90       	pop	r3
    804a:	2f 90       	pop	r2
    804c:	08 95       	ret

0000804e <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
    804e:	fc 01       	movw	r30, r24
	parser->pos = 0;
    8050:	10 82       	st	Z, r1
    8052:	11 82       	std	Z+1, r1	; 0x01
	parser->toknext = 0;
    8054:	12 82       	std	Z+2, r1	; 0x02
    8056:	13 82       	std	Z+3, r1	; 0x03
	parser->toksuper = -1;
    8058:	8f ef       	ldi	r24, 0xFF	; 255
    805a:	9f ef       	ldi	r25, 0xFF	; 255
    805c:	84 83       	std	Z+4, r24	; 0x04
    805e:	95 83       	std	Z+5, r25	; 0x05
    8060:	08 95       	ret

00008062 <json_get_token>:

#include "json_functions.h"

#define JSON_TOKENS 20

void json_get_token(jsmntok_t *tokens, char *js, char *buffer, uint8_t buffer_size, uint8_t i) {
    8062:	af 92       	push	r10
    8064:	bf 92       	push	r11
    8066:	cf 92       	push	r12
    8068:	df 92       	push	r13
    806a:	ef 92       	push	r14
    806c:	ff 92       	push	r15
    806e:	0f 93       	push	r16
    8070:	1f 93       	push	r17
    8072:	cf 93       	push	r28
    8074:	df 93       	push	r29
    8076:	cd b7       	in	r28, 0x3d	; 61
    8078:	de b7       	in	r29, 0x3e	; 62
    807a:	6a 01       	movw	r12, r20
		memcpy( keyString, &js[ key.start ], len );
		keyString[ len ] = '\0';
		
		strcpy(buffer,keyString);
	}
}
    807c:	ad b6       	in	r10, 0x3d	; 61
    807e:	be b6       	in	r11, 0x3e	; 62

void json_get_token(jsmntok_t *tokens, char *js, char *buffer, uint8_t buffer_size, uint8_t i) {
	int len;
	jsmntok_t key;

	key = tokens[i];
    8080:	dc 01       	movw	r26, r24
    8082:	37 e0       	ldi	r19, 0x07	; 7
    8084:	03 9f       	mul	r16, r19
    8086:	a0 0d       	add	r26, r0
    8088:	b1 1d       	adc	r27, r1
    808a:	11 24       	eor	r1, r1
    808c:	11 96       	adiw	r26, 0x01	; 1
    808e:	ed 91       	ld	r30, X+
    8090:	fc 91       	ld	r31, X
    8092:	12 97       	sbiw	r26, 0x02	; 2
	len = key.end - key.start;
    8094:	13 96       	adiw	r26, 0x03	; 3
    8096:	0d 91       	ld	r16, X+
    8098:	1c 91       	ld	r17, X
    809a:	14 97       	sbiw	r26, 0x04	; 4
    809c:	0e 1b       	sub	r16, r30
    809e:	1f 0b       	sbc	r17, r31
	char keyString[ len+1 ];
    80a0:	c8 01       	movw	r24, r16
    80a2:	01 96       	adiw	r24, 0x01	; 1
    80a4:	4d b7       	in	r20, 0x3d	; 61
    80a6:	5e b7       	in	r21, 0x3e	; 62
    80a8:	48 1b       	sub	r20, r24
    80aa:	59 0b       	sbc	r21, r25
    80ac:	4d bf       	out	0x3d, r20	; 61
    80ae:	5e bf       	out	0x3e, r21	; 62
    80b0:	8d b7       	in	r24, 0x3d	; 61
    80b2:	9e b7       	in	r25, 0x3e	; 62
    80b4:	01 96       	adiw	r24, 0x01	; 1
    80b6:	7c 01       	movw	r14, r24
	if (len < buffer_size) {
    80b8:	30 e0       	ldi	r19, 0x00	; 0
    80ba:	02 17       	cp	r16, r18
    80bc:	13 07       	cpc	r17, r19
    80be:	6c f4       	brge	.+26     	; 0x80da <json_get_token+0x78>
		memcpy( keyString, &js[ key.start ], len );
    80c0:	6e 0f       	add	r22, r30
    80c2:	7f 1f       	adc	r23, r31
    80c4:	a8 01       	movw	r20, r16
    80c6:	0e 94 52 55 	call	0xaaa4	; 0xaaa4 <memcpy>
		keyString[ len ] = '\0';
    80ca:	f7 01       	movw	r30, r14
    80cc:	e0 0f       	add	r30, r16
    80ce:	f1 1f       	adc	r31, r17
    80d0:	10 82       	st	Z, r1
		
		strcpy(buffer,keyString);
    80d2:	b7 01       	movw	r22, r14
    80d4:	c6 01       	movw	r24, r12
    80d6:	0e 94 78 55 	call	0xaaf0	; 0xaaf0 <strcpy>
	}
}
    80da:	ad be       	out	0x3d, r10	; 61
    80dc:	be be       	out	0x3e, r11	; 62
    80de:	df 91       	pop	r29
    80e0:	cf 91       	pop	r28
    80e2:	1f 91       	pop	r17
    80e4:	0f 91       	pop	r16
    80e6:	ff 90       	pop	r15
    80e8:	ef 90       	pop	r14
    80ea:	df 90       	pop	r13
    80ec:	cf 90       	pop	r12
    80ee:	bf 90       	pop	r11
    80f0:	af 90       	pop	r10
    80f2:	08 95       	ret

000080f4 <itoa_simple>:
		s[i] = s[j];
		s[j] = c;
	}
}

static inline char* itoa_simple( char *s, long num ) {
    80f4:	8f 92       	push	r8
    80f6:	9f 92       	push	r9
    80f8:	af 92       	push	r10
    80fa:	bf 92       	push	r11
    80fc:	cf 92       	push	r12
    80fe:	df 92       	push	r13
    8100:	ef 92       	push	r14
    8102:	ff 92       	push	r15
    8104:	0f 93       	push	r16
    8106:	1f 93       	push	r17
    8108:	cf 93       	push	r28
    810a:	df 93       	push	r29
    810c:	8c 01       	movw	r16, r24
	char *begin = s;
	char *rev = s;
	unsigned long n = num;

	if( num < 0 ) {
    810e:	77 fd       	sbrc	r23, 7
    8110:	04 c0       	rjmp	.+8      	; 0x811a <itoa_simple+0x26>
}

static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    8112:	cb 01       	movw	r24, r22
    8114:	ba 01       	movw	r22, r20
    8116:	e8 01       	movw	r28, r16
    8118:	0e c0       	rjmp	.+28     	; 0x8136 <itoa_simple+0x42>

	if( num < 0 ) {
		n = -num;
    811a:	6a 01       	movw	r12, r20
    811c:	7b 01       	movw	r14, r22
    811e:	66 27       	eor	r22, r22
    8120:	77 27       	eor	r23, r23
    8122:	cb 01       	movw	r24, r22
    8124:	6c 19       	sub	r22, r12
    8126:	7d 09       	sbc	r23, r13
    8128:	8e 09       	sbc	r24, r14
    812a:	9f 09       	sbc	r25, r15
		*s++ = '-';
    812c:	e8 01       	movw	r28, r16
    812e:	21 96       	adiw	r28, 0x01	; 1
    8130:	2d e2       	ldi	r18, 0x2D	; 45
    8132:	f8 01       	movw	r30, r16
    8134:	20 83       	st	Z, r18
}

static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    8136:	6e 01       	movw	r12, r28
		*s++ = '-';
		rev++;
	}

	do {       
		*s++ = (n % 10) + '0';   
    8138:	2a e0       	ldi	r18, 0x0A	; 10
    813a:	82 2e       	mov	r8, r18
    813c:	91 2c       	mov	r9, r1
    813e:	a1 2c       	mov	r10, r1
    8140:	b1 2c       	mov	r11, r1
    8142:	76 01       	movw	r14, r12
    8144:	ff ef       	ldi	r31, 0xFF	; 255
    8146:	ef 1a       	sub	r14, r31
    8148:	ff 0a       	sbc	r15, r31
    814a:	a5 01       	movw	r20, r10
    814c:	94 01       	movw	r18, r8
    814e:	0e 94 e5 52 	call	0xa5ca	; 0xa5ca <__udivmodsi4>
    8152:	60 5d       	subi	r22, 0xD0	; 208
    8154:	f6 01       	movw	r30, r12
    8156:	60 83       	st	Z, r22
	} while ((n /= 10) > 0); 
    8158:	b9 01       	movw	r22, r18
    815a:	ca 01       	movw	r24, r20
    815c:	61 15       	cp	r22, r1
    815e:	71 05       	cpc	r23, r1
    8160:	81 05       	cpc	r24, r1
    8162:	91 05       	cpc	r25, r1
    8164:	11 f0       	breq	.+4      	; 0x816a <itoa_simple+0x76>
    8166:	67 01       	movw	r12, r14
    8168:	ec cf       	rjmp	.-40     	; 0x8142 <itoa_simple+0x4e>

	reverse_string( rev, s - rev);
    816a:	d7 01       	movw	r26, r14
    816c:	ac 1b       	sub	r26, r28
    816e:	bd 0b       	sbc	r27, r29
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    8170:	cd 01       	movw	r24, r26
    8172:	01 97       	sbiw	r24, 0x01	; 1
    8174:	ac 0f       	add	r26, r28
    8176:	bd 1f       	adc	r27, r29
    8178:	fe 01       	movw	r30, r28
    817a:	9f 01       	movw	r18, r30
    817c:	2c 1b       	sub	r18, r28
    817e:	3d 0b       	sbc	r19, r29
    8180:	28 17       	cp	r18, r24
    8182:	39 07       	cpc	r19, r25
    8184:	34 f4       	brge	.+12     	; 0x8192 <itoa_simple+0x9e>
		c = s[i];
    8186:	20 81       	ld	r18, Z
		s[i] = s[j];
    8188:	3e 91       	ld	r19, -X
    818a:	31 93       	st	Z+, r19
		s[j] = c;
    818c:	2c 93       	st	X, r18
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    818e:	01 97       	sbiw	r24, 0x01	; 1
    8190:	f4 cf       	rjmp	.-24     	; 0x817a <itoa_simple+0x86>
	} while ((n /= 10) > 0); 

	reverse_string( rev, s - rev);

	return (char*)(s - begin);
}
    8192:	c7 01       	movw	r24, r14
    8194:	80 1b       	sub	r24, r16
    8196:	91 0b       	sbc	r25, r17
    8198:	df 91       	pop	r29
    819a:	cf 91       	pop	r28
    819c:	1f 91       	pop	r17
    819e:	0f 91       	pop	r16
    81a0:	ff 90       	pop	r15
    81a2:	ef 90       	pop	r14
    81a4:	df 90       	pop	r13
    81a6:	cf 90       	pop	r12
    81a8:	bf 90       	pop	r11
    81aa:	af 90       	pop	r10
    81ac:	9f 90       	pop	r9
    81ae:	8f 90       	pop	r8
    81b0:	08 95       	ret

000081b2 <play_sound>:
static uint32_t timestamp = 0;

#define TOKEN_BUFFER_SIZE 30

void play_sound(void)
{
    81b2:	cf 93       	push	r28
    81b4:	df 93       	push	r29
    81b6:	cd b7       	in	r28, 0x3d	; 61
    81b8:	de b7       	in	r29, 0x3e	; 62
    81ba:	c2 55       	subi	r28, 0x52	; 82
    81bc:	d4 40       	sbci	r29, 0x04	; 4
    81be:	cd bf       	out	0x3d, r28	; 61
    81c0:	de bf       	out	0x3e, r29	; 62
		
		f_close(&Fil);								// Close the file
	}
	*/

	f_mount(&FatFs, "", 0);
    81c2:	40 e0       	ldi	r20, 0x00	; 0
    81c4:	61 ef       	ldi	r22, 0xF1	; 241
    81c6:	73 e2       	ldi	r23, 0x23	; 35
    81c8:	ce 01       	movw	r24, r28
    81ca:	01 96       	adiw	r24, 0x01	; 1
    81cc:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <f_mount>
	
	BYTE res;
	res = f_open(&Fil, "johnm16.wav", FA_READ);
    81d0:	41 e0       	ldi	r20, 0x01	; 1
    81d2:	63 e3       	ldi	r22, 0x33	; 51
    81d4:	77 e2       	ldi	r23, 0x27	; 39
    81d6:	ce 01       	movw	r24, r28
    81d8:	8d 5c       	subi	r24, 0xCD	; 205
    81da:	9b 4f       	sbci	r25, 0xFB	; 251
    81dc:	0e 94 2c 31 	call	0x6258	; 0x6258 <f_open>
	if (!res) {
    81e0:	81 11       	cpse	r24, r1
    81e2:	10 c0       	rjmp	.+32     	; 0x8204 <play_sound+0x52>
		load_wav(&Fil, "**** WAV PLAYER ****", Buff, sizeof Buff);
    81e4:	20 e0       	ldi	r18, 0x00	; 0
    81e6:	32 e0       	ldi	r19, 0x02	; 2
    81e8:	ae 01       	movw	r20, r28
    81ea:	4d 5c       	subi	r20, 0xCD	; 205
    81ec:	5d 4f       	sbci	r21, 0xFD	; 253
    81ee:	6f e3       	ldi	r22, 0x3F	; 63
    81f0:	77 e2       	ldi	r23, 0x27	; 39
    81f2:	ce 01       	movw	r24, r28
    81f4:	8d 5c       	subi	r24, 0xCD	; 205
    81f6:	9b 4f       	sbci	r25, 0xFB	; 251
    81f8:	7e d9       	rcall	.-3332   	; 0x74f6 <load_wav>
		f_close(&Fil);
    81fa:	ce 01       	movw	r24, r28
    81fc:	8d 5c       	subi	r24, 0xCD	; 205
    81fe:	9b 4f       	sbci	r25, 0xFB	; 251
    8200:	0e 94 cc 33 	call	0x6798	; 0x6798 <f_close>
	}
}
    8204:	ce 5a       	subi	r28, 0xAE	; 174
    8206:	db 4f       	sbci	r29, 0xFB	; 251
    8208:	cd bf       	out	0x3d, r28	; 61
    820a:	de bf       	out	0x3e, r29	; 62
    820c:	df 91       	pop	r29
    820e:	cf 91       	pop	r28
    8210:	08 95       	ret

00008212 <start_wifi_indication>:

void start_wifi_indication(void)
{
	display_clear_screen();
    8212:	0e 94 1e 21 	call	0x423c	; 0x423c <display_clear_screen>
	
	PR.PRPC &= ~0x01;
    8216:	e0 e7       	ldi	r30, 0x70	; 112
    8218:	f0 e0       	ldi	r31, 0x00	; 0
    821a:	83 81       	ldd	r24, Z+3	; 0x03
    821c:	8e 7f       	andi	r24, 0xFE	; 254
    821e:	83 83       	std	Z+3, r24	; 0x03
	
	TCC0.CNT = 0;
    8220:	e0 e0       	ldi	r30, 0x00	; 0
    8222:	f8 e0       	ldi	r31, 0x08	; 8
    8224:	10 a2       	std	Z+32, r1	; 0x20
    8226:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 20000;
    8228:	80 e2       	ldi	r24, 0x20	; 32
    822a:	9e e4       	ldi	r25, 0x4E	; 78
    822c:	86 a3       	std	Z+38, r24	; 0x26
    822e:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;
    8230:	27 e0       	ldi	r18, 0x07	; 7
    8232:	20 83       	st	Z, r18
	
	TCC0.CCD = 20000;
    8234:	86 a7       	std	Z+46, r24	; 0x2e
    8236:	97 a7       	std	Z+47, r25	; 0x2f
	TCC0.INTCTRLB |= TC_CCDINTLVL_LO_gc;
    8238:	87 81       	ldd	r24, Z+7	; 0x07
    823a:	80 64       	ori	r24, 0x40	; 64
    823c:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLB |= TC0_CCDEN_bm;
    823e:	81 81       	ldd	r24, Z+1	; 0x01
    8240:	80 68       	ori	r24, 0x80	; 128
    8242:	81 83       	std	Z+1, r24	; 0x01
    8244:	08 95       	ret

00008246 <stop_wifi_indication>:
}

void stop_wifi_indication(void)
{
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
    8246:	e0 e0       	ldi	r30, 0x00	; 0
    8248:	f8 e0       	ldi	r31, 0x08	; 8
    824a:	10 82       	st	Z, r1
	TCC0.INTCTRLB &= ~TC_CCDINTLVL_LO_gc;
    824c:	87 81       	ldd	r24, Z+7	; 0x07
    824e:	8f 7b       	andi	r24, 0xBF	; 191
    8250:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLB &= ~TC0_CCDEN_bm;
    8252:	81 81       	ldd	r24, Z+1	; 0x01
    8254:	8f 77       	andi	r24, 0x7F	; 127
    8256:	81 83       	std	Z+1, r24	; 0x01
	display_clear_screen();
    8258:	0e 94 1e 21 	call	0x423c	; 0x423c <display_clear_screen>
	PR.PRPC |= 0x01;
    825c:	e0 e7       	ldi	r30, 0x70	; 112
    825e:	f0 e0       	ldi	r31, 0x00	; 0
    8260:	83 81       	ldd	r24, Z+3	; 0x03
    8262:	81 60       	ori	r24, 0x01	; 1
    8264:	83 83       	std	Z+3, r24	; 0x03
    8266:	08 95       	ret

00008268 <start_loading>:
}

void start_loading(void) 
{
	display_clear_screen();
    8268:	0e 94 1e 21 	call	0x423c	; 0x423c <display_clear_screen>
	
	PR.PRPC &= ~0x01;
    826c:	e0 e7       	ldi	r30, 0x70	; 112
    826e:	f0 e0       	ldi	r31, 0x00	; 0
    8270:	83 81       	ldd	r24, Z+3	; 0x03
    8272:	8e 7f       	andi	r24, 0xFE	; 254
    8274:	83 83       	std	Z+3, r24	; 0x03
	
	TCC0.CNT = 0;
    8276:	e0 e0       	ldi	r30, 0x00	; 0
    8278:	f8 e0       	ldi	r31, 0x08	; 8
    827a:	10 a2       	std	Z+32, r1	; 0x20
    827c:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 3125;
    827e:	85 e3       	ldi	r24, 0x35	; 53
    8280:	9c e0       	ldi	r25, 0x0C	; 12
    8282:	86 a3       	std	Z+38, r24	; 0x26
    8284:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;
    8286:	27 e0       	ldi	r18, 0x07	; 7
    8288:	20 83       	st	Z, r18
	
	TCC0.CCA = 3125;
    828a:	80 a7       	std	Z+40, r24	; 0x28
    828c:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.INTCTRLB |= TC_CCAINTLVL_LO_gc;
    828e:	87 81       	ldd	r24, Z+7	; 0x07
    8290:	81 60       	ori	r24, 0x01	; 1
    8292:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLB |= TC0_CCAEN_bm;
    8294:	81 81       	ldd	r24, Z+1	; 0x01
    8296:	80 61       	ori	r24, 0x10	; 16
    8298:	81 83       	std	Z+1, r24	; 0x01
    829a:	08 95       	ret

0000829c <stop_loading>:
}

void stop_loading(void) 
{
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
    829c:	e0 e0       	ldi	r30, 0x00	; 0
    829e:	f8 e0       	ldi	r31, 0x08	; 8
    82a0:	10 82       	st	Z, r1
	TCC0.INTCTRLB &= ~TC_CCAINTLVL_LO_gc;
    82a2:	87 81       	ldd	r24, Z+7	; 0x07
    82a4:	8e 7f       	andi	r24, 0xFE	; 254
    82a6:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLB &= ~TC0_CCAEN_bm;
    82a8:	81 81       	ldd	r24, Z+1	; 0x01
    82aa:	8f 7e       	andi	r24, 0xEF	; 239
    82ac:	81 83       	std	Z+1, r24	; 0x01
	display_clear_screen();
    82ae:	0e 94 1e 21 	call	0x423c	; 0x423c <display_clear_screen>
	PR.PRPC |= 0x01;
    82b2:	e0 e7       	ldi	r30, 0x70	; 112
    82b4:	f0 e0       	ldi	r31, 0x00	; 0
    82b6:	83 81       	ldd	r24, Z+3	; 0x03
    82b8:	81 60       	ori	r24, 0x01	; 1
    82ba:	83 83       	std	Z+3, r24	; 0x03
    82bc:	08 95       	ret

000082be <get_internet_variables>:
}

esp8266_status_t get_internet_variables(bool get_time, bool get_temperature) 
{	
    82be:	2f 92       	push	r2
    82c0:	3f 92       	push	r3
    82c2:	4f 92       	push	r4
    82c4:	5f 92       	push	r5
    82c6:	6f 92       	push	r6
    82c8:	7f 92       	push	r7
    82ca:	8f 92       	push	r8
    82cc:	9f 92       	push	r9
    82ce:	af 92       	push	r10
    82d0:	bf 92       	push	r11
    82d2:	cf 92       	push	r12
    82d4:	df 92       	push	r13
    82d6:	ef 92       	push	r14
    82d8:	ff 92       	push	r15
    82da:	0f 93       	push	r16
    82dc:	1f 93       	push	r17
    82de:	cf 93       	push	r28
    82e0:	df 93       	push	r29
    82e2:	cd b7       	in	r28, 0x3d	; 61
    82e4:	de b7       	in	r29, 0x3e	; 62
    82e6:	c5 5e       	subi	r28, 0xE5	; 229
    82e8:	d1 09       	sbc	r29, r1
    82ea:	cd bf       	out	0x3d, r28	; 61
    82ec:	de bf       	out	0x3e, r29	; 62
    82ee:	d8 2e       	mov	r13, r24
    82f0:	cb 51       	subi	r28, 0x1B	; 27
    82f2:	df 4f       	sbci	r29, 0xFF	; 255
    82f4:	68 83       	st	Y, r22
    82f6:	c5 5e       	subi	r28, 0xE5	; 229
    82f8:	d0 40       	sbci	r29, 0x00	; 0
	jsmn_parser p;
	jsmnerr_t r;
	
	esp8266_status_t status;
	
	status = esp8266_setup();
    82fa:	0e 94 fe 09 	call	0x13fc	; 0x13fc <esp8266_setup>
	if (status != ESP8266_SUCCESS) {
    82fe:	81 30       	cpi	r24, 0x01	; 1
    8300:	09 f0       	breq	.+2      	; 0x8304 <get_internet_variables+0x46>
    8302:	42 c1       	rjmp	.+644    	; 0x8588 <get_internet_variables+0x2ca>
		return status;
	}
	
	status = esp8266_join_ap(env.wifi_ssid,env.wifi_pswd);
    8304:	6f e8       	ldi	r22, 0x8F	; 143
    8306:	7b e2       	ldi	r23, 0x2B	; 43
    8308:	88 ea       	ldi	r24, 0xA8	; 168
    830a:	9b e2       	ldi	r25, 0x2B	; 43
    830c:	0e 94 23 0a 	call	0x1446	; 0x1446 <esp8266_join_ap>
	if (status != ESP8266_SUCCESS) {
    8310:	81 30       	cpi	r24, 0x01	; 1
    8312:	09 f0       	breq	.+2      	; 0x8316 <get_internet_variables+0x58>
    8314:	39 c1       	rjmp	.+626    	; 0x8588 <get_internet_variables+0x2ca>
		return status;
	}
	
	if (get_time) {
    8316:	dd 20       	and	r13, r13
    8318:	39 f0       	breq	.+14     	; 0x8328 <get_internet_variables+0x6a>
		status = esp8266_get_json(TIME_IP,TIME_ADDR,json_string, sizeof(json_string));
    831a:	24 e6       	ldi	r18, 0x64	; 100
    831c:	ae 01       	movw	r20, r28
    831e:	4f 5f       	subi	r20, 0xFF	; 255
    8320:	5f 4f       	sbci	r21, 0xFF	; 255
    8322:	64 e5       	ldi	r22, 0x54	; 84
    8324:	77 e2       	ldi	r23, 0x27	; 39
    8326:	0e c0       	rjmp	.+28     	; 0x8344 <get_internet_variables+0x86>
	} else if (get_temperature) {
    8328:	cb 51       	subi	r28, 0x1B	; 27
    832a:	df 4f       	sbci	r29, 0xFF	; 255
    832c:	28 81       	ld	r18, Y
    832e:	c5 5e       	subi	r28, 0xE5	; 229
    8330:	d0 40       	sbci	r29, 0x00	; 0
    8332:	22 23       	and	r18, r18
    8334:	09 f4       	brne	.+2      	; 0x8338 <get_internet_variables+0x7a>
    8336:	73 c0       	rjmp	.+230    	; 0x841e <get_internet_variables+0x160>
		status = esp8266_get_json(WEATHER_IP,WEATHER_ADDR,json_string, sizeof(json_string));
    8338:	24 e6       	ldi	r18, 0x64	; 100
    833a:	ae 01       	movw	r20, r28
    833c:	4f 5f       	subi	r20, 0xFF	; 255
    833e:	5f 4f       	sbci	r21, 0xFF	; 255
    8340:	6e e8       	ldi	r22, 0x8E	; 142
    8342:	77 e2       	ldi	r23, 0x27	; 39
    8344:	8b e7       	ldi	r24, 0x7B	; 123
    8346:	97 e2       	ldi	r25, 0x27	; 39
    8348:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <esp8266_get_json>
	} else {
		return ESP8266_ERROR;
	}
	if (status != ESP8266_SUCCESS) {
    834c:	81 30       	cpi	r24, 0x01	; 1
    834e:	09 f0       	breq	.+2      	; 0x8352 <get_internet_variables+0x94>
    8350:	1b c1       	rjmp	.+566    	; 0x8588 <get_internet_variables+0x2ca>
		return status;
	}
	
	esp8266_off();
    8352:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <esp8266_off>
	
#ifdef DEBUG_ON
	puts(json_string);
    8356:	ce 01       	movw	r24, r28
    8358:	01 96       	adiw	r24, 0x01	; 1
    835a:	7c 01       	movw	r14, r24
    835c:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
#endif

	//Parse JSON
	jsmn_init(&p);
    8360:	ce 01       	movw	r24, r28
    8362:	8d 52       	subi	r24, 0x2D	; 45
    8364:	9f 4f       	sbci	r25, 0xFF	; 255
    8366:	73 de       	rcall	.-794    	; 0x804e <jsmn_init>
	r = jsmn_parse(&p,json_string,strlen(json_string),tokens,sizeof(tokens));
    8368:	d7 01       	movw	r26, r14
    836a:	0d 90       	ld	r0, X+
    836c:	00 20       	and	r0, r0
    836e:	e9 f7       	brne	.-6      	; 0x836a <get_internet_variables+0xac>
    8370:	ad 01       	movw	r20, r26
    8372:	41 50       	subi	r20, 0x01	; 1
    8374:	51 09       	sbc	r21, r1
    8376:	4e 19       	sub	r20, r14
    8378:	5f 09       	sbc	r21, r15
    837a:	06 e4       	ldi	r16, 0x46	; 70
    837c:	10 e0       	ldi	r17, 0x00	; 0
    837e:	9e 01       	movw	r18, r28
    8380:	2b 59       	subi	r18, 0x9B	; 155
    8382:	3f 4f       	sbci	r19, 0xFF	; 255
    8384:	b7 01       	movw	r22, r14
    8386:	ce 01       	movw	r24, r28
    8388:	8d 52       	subi	r24, 0x2D	; 45
    838a:	9f 4f       	sbci	r25, 0xFF	; 255
    838c:	6f db       	rcall	.-2338   	; 0x7a6c <jsmn_parse>
	if (r < 0) {
    838e:	87 fd       	sbrc	r24, 7
    8390:	46 c0       	rjmp	.+140    	; 0x841e <get_internet_variables+0x160>
		return ESP8266_ERROR;
	}
	
	if (get_time) {
    8392:	dd 20       	and	r13, r13
    8394:	09 f4       	brne	.+2      	; 0x8398 <get_internet_variables+0xda>
    8396:	7b c0       	rjmp	.+246    	; 0x848e <get_internet_variables+0x1d0>
		int year, month, day, hour, minute, second;
		char weekday[10];
		json_get_token(tokens,json_string,token_buffer,sizeof(token_buffer),2);
    8398:	6e 01       	movw	r12, r28
    839a:	bb ea       	ldi	r27, 0xAB	; 171
    839c:	cb 0e       	add	r12, r27
    839e:	d1 1c       	adc	r13, r1
    83a0:	02 e0       	ldi	r16, 0x02	; 2
    83a2:	2e e1       	ldi	r18, 0x1E	; 30
    83a4:	a6 01       	movw	r20, r12
    83a6:	b7 01       	movw	r22, r14
    83a8:	ce 01       	movw	r24, r28
    83aa:	8b 59       	subi	r24, 0x9B	; 155
    83ac:	9f 4f       	sbci	r25, 0xFF	; 255
    83ae:	59 de       	rcall	.-846    	; 0x8062 <json_get_token>
#ifdef DEBUG_ON
		puts(token_buffer);
    83b0:	c6 01       	movw	r24, r12
    83b2:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
#endif
		if (sscanf(token_buffer,"%d-%d-%d %s %d:%d:%d",&year, &month, &day, weekday, &hour, &minute, &second) != 7) {
    83b6:	3e 01       	movw	r6, r28
    83b8:	e9 ed       	ldi	r30, 0xD9	; 217
    83ba:	6e 0e       	add	r6, r30
    83bc:	71 1c       	adc	r7, r1
    83be:	7f 92       	push	r7
    83c0:	6f 92       	push	r6
    83c2:	1e 01       	movw	r2, r28
    83c4:	fb ed       	ldi	r31, 0xDB	; 219
    83c6:	2f 0e       	add	r2, r31
    83c8:	31 1c       	adc	r3, r1
    83ca:	3f 92       	push	r3
    83cc:	2f 92       	push	r2
    83ce:	2e 01       	movw	r4, r28
    83d0:	2d ed       	ldi	r18, 0xDD	; 221
    83d2:	42 0e       	add	r4, r18
    83d4:	51 1c       	adc	r5, r1
    83d6:	5f 92       	push	r5
    83d8:	4f 92       	push	r4
    83da:	ce 01       	movw	r24, r28
    83dc:	87 53       	subi	r24, 0x37	; 55
    83de:	9f 4f       	sbci	r25, 0xFF	; 255
    83e0:	9f 93       	push	r25
    83e2:	8f 93       	push	r24
    83e4:	5e 01       	movw	r10, r28
    83e6:	3f ed       	ldi	r19, 0xDF	; 223
    83e8:	a3 0e       	add	r10, r19
    83ea:	b1 1c       	adc	r11, r1
    83ec:	bf 92       	push	r11
    83ee:	af 92       	push	r10
    83f0:	4e 01       	movw	r8, r28
    83f2:	81 ee       	ldi	r24, 0xE1	; 225
    83f4:	88 0e       	add	r8, r24
    83f6:	91 1c       	adc	r9, r1
    83f8:	9f 92       	push	r9
    83fa:	8f 92       	push	r8
    83fc:	8e 01       	movw	r16, r28
    83fe:	0d 51       	subi	r16, 0x1D	; 29
    8400:	1f 4f       	sbci	r17, 0xFF	; 255
    8402:	1f 93       	push	r17
    8404:	0f 93       	push	r16
    8406:	8a eb       	ldi	r24, 0xBA	; 186
    8408:	97 e2       	ldi	r25, 0x27	; 39
    840a:	9f 93       	push	r25
    840c:	8f 93       	push	r24
    840e:	df 92       	push	r13
    8410:	cf 92       	push	r12
    8412:	0e 94 51 56 	call	0xaca2	; 0xaca2 <sscanf>
    8416:	cd bf       	out	0x3d, r28	; 61
    8418:	de bf       	out	0x3e, r29	; 62
    841a:	07 97       	sbiw	r24, 0x07	; 7
    841c:	11 f0       	breq	.+4      	; 0x8422 <get_internet_variables+0x164>
			return ESP8266_ERROR;
    841e:	80 e0       	ldi	r24, 0x00	; 0
    8420:	b3 c0       	rjmp	.+358    	; 0x8588 <get_internet_variables+0x2ca>
		} else {
			env.time.year = year;
    8422:	f8 01       	movw	r30, r16
    8424:	80 81       	ld	r24, Z
    8426:	91 81       	ldd	r25, Z+1	; 0x01
    8428:	80 93 cb 2b 	sts	0x2BCB, r24
    842c:	90 93 cc 2b 	sts	0x2BCC, r25
			env.time.month = month;
    8430:	d4 01       	movw	r26, r8
    8432:	8c 91       	ld	r24, X
    8434:	80 93 ca 2b 	sts	0x2BCA, r24
			env.time.day = day;
    8438:	f5 01       	movw	r30, r10
    843a:	80 81       	ld	r24, Z
    843c:	80 93 c7 2b 	sts	0x2BC7, r24
			env.time.hours = hour;
    8440:	d2 01       	movw	r26, r4
    8442:	8c 91       	ld	r24, X
    8444:	80 93 c6 2b 	sts	0x2BC6, r24
			env.time.minutes = minute;
    8448:	f1 01       	movw	r30, r2
    844a:	80 81       	ld	r24, Z
    844c:	80 93 c5 2b 	sts	0x2BC5, r24
			env.time.seconds = second;
    8450:	d3 01       	movw	r26, r6
    8452:	8c 91       	ld	r24, X
    8454:	11 96       	adiw	r26, 0x01	; 1
    8456:	9c 91       	ld	r25, X
    8458:	80 93 c4 2b 	sts	0x2BC4, r24
			rtc_update_seconds(second);
    845c:	0e 94 d7 12 	call	0x25ae	; 0x25ae <rtc_update_seconds>
			env.time.weekday = time_get_weekday(day,month,year);
    8460:	f8 01       	movw	r30, r16
    8462:	40 81       	ld	r20, Z
    8464:	51 81       	ldd	r21, Z+1	; 0x01
    8466:	d4 01       	movw	r26, r8
    8468:	6c 91       	ld	r22, X
    846a:	f5 01       	movw	r30, r10
    846c:	80 81       	ld	r24, Z
    846e:	0e 94 de 4a 	call	0x95bc	; 0x95bc <time_get_weekday>
    8472:	80 93 c8 2b 	sts	0x2BC8, r24
			env.time.week = time_get_weeknumber(env.time.day,env.time.month,env.time.year);
    8476:	40 91 cb 2b 	lds	r20, 0x2BCB
    847a:	50 91 cc 2b 	lds	r21, 0x2BCC
    847e:	60 91 ca 2b 	lds	r22, 0x2BCA
    8482:	80 91 c7 2b 	lds	r24, 0x2BC7
    8486:	0e 94 43 4b 	call	0x9686	; 0x9686 <time_get_weeknumber>
    848a:	80 93 c9 2b 	sts	0x2BC9, r24
		}
	}
	if (get_temperature) {
    848e:	cb 51       	subi	r28, 0x1B	; 27
    8490:	df 4f       	sbci	r29, 0xFF	; 255
    8492:	f8 81       	ld	r31, Y
    8494:	c5 5e       	subi	r28, 0xE5	; 229
    8496:	d0 40       	sbci	r29, 0x00	; 0
    8498:	ff 23       	and	r31, r31
    849a:	09 f4       	brne	.+2      	; 0x849e <get_internet_variables+0x1e0>
    849c:	74 c0       	rjmp	.+232    	; 0x8586 <get_internet_variables+0x2c8>
		json_get_token(tokens,json_string,token_buffer,sizeof(token_buffer),6);
    849e:	6e 01       	movw	r12, r28
    84a0:	2b ea       	ldi	r18, 0xAB	; 171
    84a2:	c2 0e       	add	r12, r18
    84a4:	d1 1c       	adc	r13, r1
    84a6:	06 e0       	ldi	r16, 0x06	; 6
    84a8:	2e e1       	ldi	r18, 0x1E	; 30
    84aa:	a6 01       	movw	r20, r12
    84ac:	b7 01       	movw	r22, r14
    84ae:	ce 01       	movw	r24, r28
    84b0:	8b 59       	subi	r24, 0x9B	; 155
    84b2:	9f 4f       	sbci	r25, 0xFF	; 255
    84b4:	d6 dd       	rcall	.-1108   	; 0x8062 <json_get_token>
#ifdef DEBUG_ON
		puts(token_buffer);
    84b6:	c6 01       	movw	r24, r12
    84b8:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
#endif
		if (strlen(token_buffer) <= sizeof(env.temperature)) {
    84bc:	f6 01       	movw	r30, r12
    84be:	01 90       	ld	r0, Z+
    84c0:	00 20       	and	r0, r0
    84c2:	e9 f7       	brne	.-6      	; 0x84be <get_internet_variables+0x200>
    84c4:	31 97       	sbiw	r30, 0x01	; 1
    84c6:	ec 19       	sub	r30, r12
    84c8:	fd 09       	sbc	r31, r13
    84ca:	34 97       	sbiw	r30, 0x04	; 4
    84cc:	08 f0       	brcs	.+2      	; 0x84d0 <get_internet_variables+0x212>
    84ce:	a7 cf       	rjmp	.-178    	; 0x841e <get_internet_variables+0x160>
			memset(env.temperature,0,sizeof(env.temperature));
    84d0:	10 92 4b 2b 	sts	0x2B4B, r1
    84d4:	10 92 4c 2b 	sts	0x2B4C, r1
    84d8:	10 92 4d 2b 	sts	0x2B4D, r1
			strncpy(env.temperature,token_buffer,strlen(token_buffer));
    84dc:	d6 01       	movw	r26, r12
    84de:	0d 90       	ld	r0, X+
    84e0:	00 20       	and	r0, r0
    84e2:	e9 f7       	brne	.-6      	; 0x84de <get_internet_variables+0x220>
    84e4:	ad 01       	movw	r20, r26
    84e6:	41 50       	subi	r20, 0x01	; 1
    84e8:	51 09       	sbc	r21, r1
    84ea:	4c 19       	sub	r20, r12
    84ec:	5d 09       	sbc	r21, r13
    84ee:	b6 01       	movw	r22, r12
    84f0:	8b e4       	ldi	r24, 0x4B	; 75
    84f2:	9b e2       	ldi	r25, 0x2B	; 43
    84f4:	0e 94 7f 55 	call	0xaafe	; 0xaafe <strncpy>
		} else {
			return ESP8266_ERROR;
		}
		json_get_token(tokens,json_string,token_buffer,sizeof(token_buffer),8);
    84f8:	08 e0       	ldi	r16, 0x08	; 8
    84fa:	2e e1       	ldi	r18, 0x1E	; 30
    84fc:	a6 01       	movw	r20, r12
    84fe:	b7 01       	movw	r22, r14
    8500:	ce 01       	movw	r24, r28
    8502:	8b 59       	subi	r24, 0x9B	; 155
    8504:	9f 4f       	sbci	r25, 0xFF	; 255
    8506:	ad dd       	rcall	.-1190   	; 0x8062 <json_get_token>
#ifdef DEBUG_ON
		puts(token_buffer);
    8508:	c6 01       	movw	r24, r12
    850a:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
#endif
		if (strlen(token_buffer) < sizeof(env.weather_info)) {
    850e:	f6 01       	movw	r30, r12
    8510:	01 90       	ld	r0, Z+
    8512:	00 20       	and	r0, r0
    8514:	e9 f7       	brne	.-6      	; 0x8510 <get_internet_variables+0x252>
    8516:	31 97       	sbiw	r30, 0x01	; 1
    8518:	ec 19       	sub	r30, r12
    851a:	fd 09       	sbc	r31, r13
    851c:	b8 97       	sbiw	r30, 0x28	; 40
    851e:	08 f0       	brcs	.+2      	; 0x8522 <get_internet_variables+0x264>
    8520:	7e cf       	rjmp	.-260    	; 0x841e <get_internet_variables+0x160>
			memset(env.weather_info,0,sizeof(env.weather_info));
    8522:	88 e2       	ldi	r24, 0x28	; 40
    8524:	ee e4       	ldi	r30, 0x4E	; 78
    8526:	fb e2       	ldi	r31, 0x2B	; 43
    8528:	df 01       	movw	r26, r30
    852a:	1d 92       	st	X+, r1
    852c:	8a 95       	dec	r24
    852e:	e9 f7       	brne	.-6      	; 0x852a <get_internet_variables+0x26c>
			strncpy(env.weather_info,token_buffer,strlen(token_buffer));
    8530:	f6 01       	movw	r30, r12
    8532:	01 90       	ld	r0, Z+
    8534:	00 20       	and	r0, r0
    8536:	e9 f7       	brne	.-6      	; 0x8532 <get_internet_variables+0x274>
    8538:	af 01       	movw	r20, r30
    853a:	41 50       	subi	r20, 0x01	; 1
    853c:	51 09       	sbc	r21, r1
    853e:	4c 19       	sub	r20, r12
    8540:	5d 09       	sbc	r21, r13
    8542:	b6 01       	movw	r22, r12
    8544:	8e e4       	ldi	r24, 0x4E	; 78
    8546:	9b e2       	ldi	r25, 0x2B	; 43
    8548:	0e 94 7f 55 	call	0xaafe	; 0xaafe <strncpy>
		} else {
			return ESP8266_ERROR;
		}
		json_get_token(tokens,json_string,token_buffer,sizeof(token_buffer),2);
    854c:	02 e0       	ldi	r16, 0x02	; 2
    854e:	2e e1       	ldi	r18, 0x1E	; 30
    8550:	a6 01       	movw	r20, r12
    8552:	b7 01       	movw	r22, r14
    8554:	ce 01       	movw	r24, r28
    8556:	8b 59       	subi	r24, 0x9B	; 155
    8558:	9f 4f       	sbci	r25, 0xFF	; 255
    855a:	83 dd       	rcall	.-1274   	; 0x8062 <json_get_token>
#ifdef DEBUG_ON
		puts(token_buffer);
    855c:	c6 01       	movw	r24, r12
    855e:	0e 94 24 56 	call	0xac48	; 0xac48 <puts>
#endif
		if (strlen(token_buffer) < sizeof(env.city)) {
    8562:	d6 01       	movw	r26, r12
    8564:	0d 90       	ld	r0, X+
    8566:	00 20       	and	r0, r0
    8568:	e9 f7       	brne	.-6      	; 0x8564 <get_internet_variables+0x2a6>
    856a:	ad 01       	movw	r20, r26
    856c:	41 50       	subi	r20, 0x01	; 1
    856e:	51 09       	sbc	r21, r1
    8570:	4c 19       	sub	r20, r12
    8572:	5d 09       	sbc	r21, r13
    8574:	49 31       	cpi	r20, 0x19	; 25
    8576:	51 05       	cpc	r21, r1
    8578:	08 f0       	brcs	.+2      	; 0x857c <get_internet_variables+0x2be>
    857a:	51 cf       	rjmp	.-350    	; 0x841e <get_internet_variables+0x160>
			strncpy(env.city,token_buffer,strlen(token_buffer));
    857c:	b6 01       	movw	r22, r12
    857e:	86 e7       	ldi	r24, 0x76	; 118
    8580:	9b e2       	ldi	r25, 0x2B	; 43
    8582:	0e 94 7f 55 	call	0xaafe	; 0xaafe <strncpy>
		} else {
			return ESP8266_ERROR;
		}

	}
	return ESP8266_SUCCESS;
    8586:	81 e0       	ldi	r24, 0x01	; 1
}
    8588:	cb 51       	subi	r28, 0x1B	; 27
    858a:	df 4f       	sbci	r29, 0xFF	; 255
    858c:	cd bf       	out	0x3d, r28	; 61
    858e:	de bf       	out	0x3e, r29	; 62
    8590:	df 91       	pop	r29
    8592:	cf 91       	pop	r28
    8594:	1f 91       	pop	r17
    8596:	0f 91       	pop	r16
    8598:	ff 90       	pop	r15
    859a:	ef 90       	pop	r14
    859c:	df 90       	pop	r13
    859e:	cf 90       	pop	r12
    85a0:	bf 90       	pop	r11
    85a2:	af 90       	pop	r10
    85a4:	9f 90       	pop	r9
    85a6:	8f 90       	pop	r8
    85a8:	7f 90       	pop	r7
    85aa:	6f 90       	pop	r6
    85ac:	5f 90       	pop	r5
    85ae:	4f 90       	pop	r4
    85b0:	3f 90       	pop	r3
    85b2:	2f 90       	pop	r2
    85b4:	08 95       	ret

000085b6 <menu_draw_temperature_frame>:

void menu_draw_temperature_frame(void) 
{
    85b6:	0f 93       	push	r16
	display_draw_small_char(1,10,'T',1,1);
    85b8:	01 e0       	ldi	r16, 0x01	; 1
    85ba:	21 e0       	ldi	r18, 0x01	; 1
    85bc:	30 e0       	ldi	r19, 0x00	; 0
    85be:	44 e5       	ldi	r20, 0x54	; 84
    85c0:	6a e0       	ldi	r22, 0x0A	; 10
    85c2:	70 e0       	ldi	r23, 0x00	; 0
    85c4:	81 e0       	ldi	r24, 0x01	; 1
    85c6:	90 e0       	ldi	r25, 0x00	; 0
    85c8:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(5,10,'E',1,1);
    85cc:	21 e0       	ldi	r18, 0x01	; 1
    85ce:	30 e0       	ldi	r19, 0x00	; 0
    85d0:	45 e4       	ldi	r20, 0x45	; 69
    85d2:	6a e0       	ldi	r22, 0x0A	; 10
    85d4:	70 e0       	ldi	r23, 0x00	; 0
    85d6:	85 e0       	ldi	r24, 0x05	; 5
    85d8:	90 e0       	ldi	r25, 0x00	; 0
    85da:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(9,10,'M',1,1);
    85de:	21 e0       	ldi	r18, 0x01	; 1
    85e0:	30 e0       	ldi	r19, 0x00	; 0
    85e2:	4d e4       	ldi	r20, 0x4D	; 77
    85e4:	6a e0       	ldi	r22, 0x0A	; 10
    85e6:	70 e0       	ldi	r23, 0x00	; 0
    85e8:	89 e0       	ldi	r24, 0x09	; 9
    85ea:	90 e0       	ldi	r25, 0x00	; 0
    85ec:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(13,10,'P',1,1);
    85f0:	21 e0       	ldi	r18, 0x01	; 1
    85f2:	30 e0       	ldi	r19, 0x00	; 0
    85f4:	40 e5       	ldi	r20, 0x50	; 80
    85f6:	6a e0       	ldi	r22, 0x0A	; 10
    85f8:	70 e0       	ldi	r23, 0x00	; 0
    85fa:	8d e0       	ldi	r24, 0x0D	; 13
    85fc:	90 e0       	ldi	r25, 0x00	; 0
    85fe:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	
	if (strlen(env.temperature) < 2) {
    8602:	eb e4       	ldi	r30, 0x4B	; 75
    8604:	fb e2       	ldi	r31, 0x2B	; 43
    8606:	01 90       	ld	r0, Z+
    8608:	00 20       	and	r0, r0
    860a:	e9 f7       	brne	.-6      	; 0x8606 <menu_draw_temperature_frame+0x50>
    860c:	ec 54       	subi	r30, 0x4C	; 76
    860e:	fb 42       	sbci	r31, 0x2B	; 43
    8610:	32 97       	sbiw	r30, 0x02	; 2
    8612:	90 f4       	brcc	.+36     	; 0x8638 <menu_draw_temperature_frame+0x82>
		display_draw_small_char(5,3,env.temperature[0],1,1);
    8614:	21 e0       	ldi	r18, 0x01	; 1
    8616:	30 e0       	ldi	r19, 0x00	; 0
    8618:	40 91 4b 2b 	lds	r20, 0x2B4B
    861c:	63 e0       	ldi	r22, 0x03	; 3
    861e:	70 e0       	ldi	r23, 0x00	; 0
    8620:	85 e0       	ldi	r24, 0x05	; 5
    8622:	90 e0       	ldi	r25, 0x00	; 0
    8624:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
		display_draw_small_char(9,3,'C',1,1);	
    8628:	21 e0       	ldi	r18, 0x01	; 1
    862a:	30 e0       	ldi	r19, 0x00	; 0
    862c:	43 e4       	ldi	r20, 0x43	; 67
    862e:	63 e0       	ldi	r22, 0x03	; 3
    8630:	70 e0       	ldi	r23, 0x00	; 0
    8632:	89 e0       	ldi	r24, 0x09	; 9
    8634:	90 e0       	ldi	r25, 0x00	; 0
    8636:	1c c0       	rjmp	.+56     	; 0x8670 <menu_draw_temperature_frame+0xba>
	} else {
		display_draw_small_char(3,3,env.temperature[0],1,1);
    8638:	01 e0       	ldi	r16, 0x01	; 1
    863a:	21 e0       	ldi	r18, 0x01	; 1
    863c:	30 e0       	ldi	r19, 0x00	; 0
    863e:	40 91 4b 2b 	lds	r20, 0x2B4B
    8642:	63 e0       	ldi	r22, 0x03	; 3
    8644:	70 e0       	ldi	r23, 0x00	; 0
    8646:	83 e0       	ldi	r24, 0x03	; 3
    8648:	90 e0       	ldi	r25, 0x00	; 0
    864a:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
		display_draw_small_char(7,3,env.temperature[1],1,1);
    864e:	21 e0       	ldi	r18, 0x01	; 1
    8650:	30 e0       	ldi	r19, 0x00	; 0
    8652:	40 91 4c 2b 	lds	r20, 0x2B4C
    8656:	63 e0       	ldi	r22, 0x03	; 3
    8658:	70 e0       	ldi	r23, 0x00	; 0
    865a:	87 e0       	ldi	r24, 0x07	; 7
    865c:	90 e0       	ldi	r25, 0x00	; 0
    865e:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
		display_draw_small_char(11,3,'C',1,1);	
    8662:	21 e0       	ldi	r18, 0x01	; 1
    8664:	30 e0       	ldi	r19, 0x00	; 0
    8666:	43 e4       	ldi	r20, 0x43	; 67
    8668:	63 e0       	ldi	r22, 0x03	; 3
    866a:	70 e0       	ldi	r23, 0x00	; 0
    866c:	8b e0       	ldi	r24, 0x0B	; 11
    866e:	90 e0       	ldi	r25, 0x00	; 0
    8670:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	}
}
    8674:	0f 91       	pop	r16
    8676:	08 95       	ret

00008678 <menu_draw_date_frame>:

void menu_draw_date_frame(void) 
{
    8678:	0f 93       	push	r16
    867a:	cf 93       	push	r28
    867c:	df 93       	push	r29
    867e:	00 d0       	rcall	.+0      	; 0x8680 <menu_draw_date_frame+0x8>
    8680:	cd b7       	in	r28, 0x3d	; 61
    8682:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'D',1,1);
    8684:	01 e0       	ldi	r16, 0x01	; 1
    8686:	21 e0       	ldi	r18, 0x01	; 1
    8688:	30 e0       	ldi	r19, 0x00	; 0
    868a:	44 e4       	ldi	r20, 0x44	; 68
    868c:	6a e0       	ldi	r22, 0x0A	; 10
    868e:	70 e0       	ldi	r23, 0x00	; 0
    8690:	81 e0       	ldi	r24, 0x01	; 1
    8692:	90 e0       	ldi	r25, 0x00	; 0
    8694:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(5,10,'A',1,1);
    8698:	21 e0       	ldi	r18, 0x01	; 1
    869a:	30 e0       	ldi	r19, 0x00	; 0
    869c:	41 e4       	ldi	r20, 0x41	; 65
    869e:	6a e0       	ldi	r22, 0x0A	; 10
    86a0:	70 e0       	ldi	r23, 0x00	; 0
    86a2:	85 e0       	ldi	r24, 0x05	; 5
    86a4:	90 e0       	ldi	r25, 0x00	; 0
    86a6:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(9,10,'T',1,1);
    86aa:	21 e0       	ldi	r18, 0x01	; 1
    86ac:	30 e0       	ldi	r19, 0x00	; 0
    86ae:	44 e5       	ldi	r20, 0x54	; 84
    86b0:	6a e0       	ldi	r22, 0x0A	; 10
    86b2:	70 e0       	ldi	r23, 0x00	; 0
    86b4:	89 e0       	ldi	r24, 0x09	; 9
    86b6:	90 e0       	ldi	r25, 0x00	; 0
    86b8:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(13,10,'E',1,1);
    86bc:	21 e0       	ldi	r18, 0x01	; 1
    86be:	30 e0       	ldi	r19, 0x00	; 0
    86c0:	45 e4       	ldi	r20, 0x45	; 69
    86c2:	6a e0       	ldi	r22, 0x0A	; 10
    86c4:	70 e0       	ldi	r23, 0x00	; 0
    86c6:	8d e0       	ldi	r24, 0x0D	; 13
    86c8:	90 e0       	ldi	r25, 0x00	; 0
    86ca:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	
	char buffer[2];
	char temp;
	
	itoa_simple(buffer,env.time.day);
    86ce:	40 91 c7 2b 	lds	r20, 0x2BC7
    86d2:	50 e0       	ldi	r21, 0x00	; 0
    86d4:	60 e0       	ldi	r22, 0x00	; 0
    86d6:	70 e0       	ldi	r23, 0x00	; 0
    86d8:	ce 01       	movw	r24, r28
    86da:	01 96       	adiw	r24, 0x01	; 1
    86dc:	0b dd       	rcall	.-1514   	; 0x80f4 <itoa_simple>
	
	//append zero
	if (env.time.day < 10) {
    86de:	80 91 c7 2b 	lds	r24, 0x2BC7
    86e2:	8a 30       	cpi	r24, 0x0A	; 10
    86e4:	20 f4       	brcc	.+8      	; 0x86ee <menu_draw_date_frame+0x76>
		temp = buffer[0];
    86e6:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    86e8:	90 e3       	ldi	r25, 0x30	; 48
    86ea:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    86ec:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(1,3,buffer[0],1,1);
    86ee:	01 e0       	ldi	r16, 0x01	; 1
    86f0:	21 e0       	ldi	r18, 0x01	; 1
    86f2:	30 e0       	ldi	r19, 0x00	; 0
    86f4:	49 81       	ldd	r20, Y+1	; 0x01
    86f6:	63 e0       	ldi	r22, 0x03	; 3
    86f8:	70 e0       	ldi	r23, 0x00	; 0
    86fa:	81 e0       	ldi	r24, 0x01	; 1
    86fc:	90 e0       	ldi	r25, 0x00	; 0
    86fe:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(4,3,buffer[1],1,1);
    8702:	21 e0       	ldi	r18, 0x01	; 1
    8704:	30 e0       	ldi	r19, 0x00	; 0
    8706:	4a 81       	ldd	r20, Y+2	; 0x02
    8708:	63 e0       	ldi	r22, 0x03	; 3
    870a:	70 e0       	ldi	r23, 0x00	; 0
    870c:	84 e0       	ldi	r24, 0x04	; 4
    870e:	90 e0       	ldi	r25, 0x00	; 0
    8710:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(7,3,'.',1,1);
    8714:	21 e0       	ldi	r18, 0x01	; 1
    8716:	30 e0       	ldi	r19, 0x00	; 0
    8718:	4e e2       	ldi	r20, 0x2E	; 46
    871a:	63 e0       	ldi	r22, 0x03	; 3
    871c:	70 e0       	ldi	r23, 0x00	; 0
    871e:	87 e0       	ldi	r24, 0x07	; 7
    8720:	90 e0       	ldi	r25, 0x00	; 0
    8722:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	
	itoa_simple(buffer,env.time.month);
    8726:	40 91 ca 2b 	lds	r20, 0x2BCA
    872a:	50 e0       	ldi	r21, 0x00	; 0
    872c:	60 e0       	ldi	r22, 0x00	; 0
    872e:	70 e0       	ldi	r23, 0x00	; 0
    8730:	ce 01       	movw	r24, r28
    8732:	01 96       	adiw	r24, 0x01	; 1
    8734:	df dc       	rcall	.-1602   	; 0x80f4 <itoa_simple>
	
	//append zero
	if (env.time.month < 10) {
    8736:	80 91 ca 2b 	lds	r24, 0x2BCA
    873a:	8a 30       	cpi	r24, 0x0A	; 10
    873c:	20 f4       	brcc	.+8      	; 0x8746 <menu_draw_date_frame+0xce>
		temp = buffer[0];
    873e:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    8740:	90 e3       	ldi	r25, 0x30	; 48
    8742:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    8744:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(10,3,buffer[0],1,1);
    8746:	01 e0       	ldi	r16, 0x01	; 1
    8748:	21 e0       	ldi	r18, 0x01	; 1
    874a:	30 e0       	ldi	r19, 0x00	; 0
    874c:	49 81       	ldd	r20, Y+1	; 0x01
    874e:	63 e0       	ldi	r22, 0x03	; 3
    8750:	70 e0       	ldi	r23, 0x00	; 0
    8752:	8a e0       	ldi	r24, 0x0A	; 10
    8754:	90 e0       	ldi	r25, 0x00	; 0
    8756:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(13,3,buffer[1],1,1);
    875a:	21 e0       	ldi	r18, 0x01	; 1
    875c:	30 e0       	ldi	r19, 0x00	; 0
    875e:	4a 81       	ldd	r20, Y+2	; 0x02
    8760:	63 e0       	ldi	r22, 0x03	; 3
    8762:	70 e0       	ldi	r23, 0x00	; 0
    8764:	8d e0       	ldi	r24, 0x0D	; 13
    8766:	90 e0       	ldi	r25, 0x00	; 0
    8768:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
}
    876c:	0f 90       	pop	r0
    876e:	0f 90       	pop	r0
    8770:	df 91       	pop	r29
    8772:	cf 91       	pop	r28
    8774:	0f 91       	pop	r16
    8776:	08 95       	ret

00008778 <menu_draw_week_frame>:

void menu_draw_week_frame(void) 
{
    8778:	0f 93       	push	r16
    877a:	cf 93       	push	r28
    877c:	df 93       	push	r29
    877e:	00 d0       	rcall	.+0      	; 0x8780 <menu_draw_week_frame+0x8>
    8780:	cd b7       	in	r28, 0x3d	; 61
    8782:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'W',1,1);
    8784:	01 e0       	ldi	r16, 0x01	; 1
    8786:	21 e0       	ldi	r18, 0x01	; 1
    8788:	30 e0       	ldi	r19, 0x00	; 0
    878a:	47 e5       	ldi	r20, 0x57	; 87
    878c:	6a e0       	ldi	r22, 0x0A	; 10
    878e:	70 e0       	ldi	r23, 0x00	; 0
    8790:	81 e0       	ldi	r24, 0x01	; 1
    8792:	90 e0       	ldi	r25, 0x00	; 0
    8794:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(5,10,'E',1,1);
    8798:	21 e0       	ldi	r18, 0x01	; 1
    879a:	30 e0       	ldi	r19, 0x00	; 0
    879c:	45 e4       	ldi	r20, 0x45	; 69
    879e:	6a e0       	ldi	r22, 0x0A	; 10
    87a0:	70 e0       	ldi	r23, 0x00	; 0
    87a2:	85 e0       	ldi	r24, 0x05	; 5
    87a4:	90 e0       	ldi	r25, 0x00	; 0
    87a6:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(9,10,'E',1,1);
    87aa:	21 e0       	ldi	r18, 0x01	; 1
    87ac:	30 e0       	ldi	r19, 0x00	; 0
    87ae:	45 e4       	ldi	r20, 0x45	; 69
    87b0:	6a e0       	ldi	r22, 0x0A	; 10
    87b2:	70 e0       	ldi	r23, 0x00	; 0
    87b4:	89 e0       	ldi	r24, 0x09	; 9
    87b6:	90 e0       	ldi	r25, 0x00	; 0
    87b8:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(13,10,'K',1,1);
    87bc:	21 e0       	ldi	r18, 0x01	; 1
    87be:	30 e0       	ldi	r19, 0x00	; 0
    87c0:	4b e4       	ldi	r20, 0x4B	; 75
    87c2:	6a e0       	ldi	r22, 0x0A	; 10
    87c4:	70 e0       	ldi	r23, 0x00	; 0
    87c6:	8d e0       	ldi	r24, 0x0D	; 13
    87c8:	90 e0       	ldi	r25, 0x00	; 0
    87ca:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	
	char buffer[2];
	char temp;
	
	itoa_simple(buffer,env.time.week);
    87ce:	40 91 c9 2b 	lds	r20, 0x2BC9
    87d2:	50 e0       	ldi	r21, 0x00	; 0
    87d4:	60 e0       	ldi	r22, 0x00	; 0
    87d6:	70 e0       	ldi	r23, 0x00	; 0
    87d8:	ce 01       	movw	r24, r28
    87da:	01 96       	adiw	r24, 0x01	; 1
    87dc:	8b dc       	rcall	.-1770   	; 0x80f4 <itoa_simple>
	
	//append zero
	if (env.time.week < 10) {
    87de:	80 91 c9 2b 	lds	r24, 0x2BC9
    87e2:	8a 30       	cpi	r24, 0x0A	; 10
    87e4:	20 f4       	brcc	.+8      	; 0x87ee <menu_draw_week_frame+0x76>
		temp = buffer[0];
    87e6:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    87e8:	90 e3       	ldi	r25, 0x30	; 48
    87ea:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    87ec:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(5,3,buffer[0],1,1);
    87ee:	01 e0       	ldi	r16, 0x01	; 1
    87f0:	21 e0       	ldi	r18, 0x01	; 1
    87f2:	30 e0       	ldi	r19, 0x00	; 0
    87f4:	49 81       	ldd	r20, Y+1	; 0x01
    87f6:	63 e0       	ldi	r22, 0x03	; 3
    87f8:	70 e0       	ldi	r23, 0x00	; 0
    87fa:	85 e0       	ldi	r24, 0x05	; 5
    87fc:	90 e0       	ldi	r25, 0x00	; 0
    87fe:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(9,3,buffer[1],1,1);
    8802:	21 e0       	ldi	r18, 0x01	; 1
    8804:	30 e0       	ldi	r19, 0x00	; 0
    8806:	4a 81       	ldd	r20, Y+2	; 0x02
    8808:	63 e0       	ldi	r22, 0x03	; 3
    880a:	70 e0       	ldi	r23, 0x00	; 0
    880c:	89 e0       	ldi	r24, 0x09	; 9
    880e:	90 e0       	ldi	r25, 0x00	; 0
    8810:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
}
    8814:	0f 90       	pop	r0
    8816:	0f 90       	pop	r0
    8818:	df 91       	pop	r29
    881a:	cf 91       	pop	r28
    881c:	0f 91       	pop	r16
    881e:	08 95       	ret

00008820 <menu_draw_weekday_frame>:

void menu_draw_weekday_frame(void) 
{
    8820:	0f 93       	push	r16
    8822:	cf 93       	push	r28
    8824:	df 93       	push	r29
    8826:	00 d0       	rcall	.+0      	; 0x8828 <menu_draw_weekday_frame+0x8>
    8828:	1f 92       	push	r1
    882a:	cd b7       	in	r28, 0x3d	; 61
    882c:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'W',1,1);
    882e:	01 e0       	ldi	r16, 0x01	; 1
    8830:	21 e0       	ldi	r18, 0x01	; 1
    8832:	30 e0       	ldi	r19, 0x00	; 0
    8834:	47 e5       	ldi	r20, 0x57	; 87
    8836:	6a e0       	ldi	r22, 0x0A	; 10
    8838:	70 e0       	ldi	r23, 0x00	; 0
    883a:	81 e0       	ldi	r24, 0x01	; 1
    883c:	90 e0       	ldi	r25, 0x00	; 0
    883e:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(5,10,'D',1,1);
    8842:	21 e0       	ldi	r18, 0x01	; 1
    8844:	30 e0       	ldi	r19, 0x00	; 0
    8846:	44 e4       	ldi	r20, 0x44	; 68
    8848:	6a e0       	ldi	r22, 0x0A	; 10
    884a:	70 e0       	ldi	r23, 0x00	; 0
    884c:	85 e0       	ldi	r24, 0x05	; 5
    884e:	90 e0       	ldi	r25, 0x00	; 0
    8850:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(9,10,'A',1,1);
    8854:	21 e0       	ldi	r18, 0x01	; 1
    8856:	30 e0       	ldi	r19, 0x00	; 0
    8858:	41 e4       	ldi	r20, 0x41	; 65
    885a:	6a e0       	ldi	r22, 0x0A	; 10
    885c:	70 e0       	ldi	r23, 0x00	; 0
    885e:	89 e0       	ldi	r24, 0x09	; 9
    8860:	90 e0       	ldi	r25, 0x00	; 0
    8862:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(13,10,'Y',1,1);
    8866:	21 e0       	ldi	r18, 0x01	; 1
    8868:	30 e0       	ldi	r19, 0x00	; 0
    886a:	49 e5       	ldi	r20, 0x59	; 89
    886c:	6a e0       	ldi	r22, 0x0A	; 10
    886e:	70 e0       	ldi	r23, 0x00	; 0
    8870:	8d e0       	ldi	r24, 0x0D	; 13
    8872:	90 e0       	ldi	r25, 0x00	; 0
    8874:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	
	char buffer[3];
	strncpy(buffer,time_get_day_name(env.time.weekday),3);
    8878:	80 91 c8 2b 	lds	r24, 0x2BC8
    887c:	81 d6       	rcall	.+3330   	; 0x9580 <time_get_day_name>
    887e:	43 e0       	ldi	r20, 0x03	; 3
    8880:	50 e0       	ldi	r21, 0x00	; 0
    8882:	bc 01       	movw	r22, r24
    8884:	ce 01       	movw	r24, r28
    8886:	01 96       	adiw	r24, 0x01	; 1
    8888:	0e 94 7f 55 	call	0xaafe	; 0xaafe <strncpy>
	
	display_draw_small_char(3,3,buffer[0],1,1);
    888c:	21 e0       	ldi	r18, 0x01	; 1
    888e:	30 e0       	ldi	r19, 0x00	; 0
    8890:	49 81       	ldd	r20, Y+1	; 0x01
    8892:	63 e0       	ldi	r22, 0x03	; 3
    8894:	70 e0       	ldi	r23, 0x00	; 0
    8896:	83 e0       	ldi	r24, 0x03	; 3
    8898:	90 e0       	ldi	r25, 0x00	; 0
    889a:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(7,3,buffer[1],1,1);
    889e:	21 e0       	ldi	r18, 0x01	; 1
    88a0:	30 e0       	ldi	r19, 0x00	; 0
    88a2:	4a 81       	ldd	r20, Y+2	; 0x02
    88a4:	63 e0       	ldi	r22, 0x03	; 3
    88a6:	70 e0       	ldi	r23, 0x00	; 0
    88a8:	87 e0       	ldi	r24, 0x07	; 7
    88aa:	90 e0       	ldi	r25, 0x00	; 0
    88ac:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(11,3,buffer[2],1,1);
    88b0:	21 e0       	ldi	r18, 0x01	; 1
    88b2:	30 e0       	ldi	r19, 0x00	; 0
    88b4:	4b 81       	ldd	r20, Y+3	; 0x03
    88b6:	63 e0       	ldi	r22, 0x03	; 3
    88b8:	70 e0       	ldi	r23, 0x00	; 0
    88ba:	8b e0       	ldi	r24, 0x0B	; 11
    88bc:	90 e0       	ldi	r25, 0x00	; 0
    88be:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
}
    88c2:	23 96       	adiw	r28, 0x03	; 3
    88c4:	cd bf       	out	0x3d, r28	; 61
    88c6:	de bf       	out	0x3e, r29	; 62
    88c8:	df 91       	pop	r29
    88ca:	cf 91       	pop	r28
    88cc:	0f 91       	pop	r16
    88ce:	08 95       	ret

000088d0 <menu_draw_battery_frame>:

void menu_draw_battery_frame(void) 
{	
    88d0:	0f 93       	push	r16
    88d2:	cf 93       	push	r28
    88d4:	df 93       	push	r29
    88d6:	cd b7       	in	r28, 0x3d	; 61
    88d8:	de b7       	in	r29, 0x3e	; 62
    88da:	25 97       	sbiw	r28, 0x05	; 5
    88dc:	cd bf       	out	0x3d, r28	; 61
    88de:	de bf       	out	0x3e, r29	; 62
	display_draw_small_char(1,10,'B',1,1);
    88e0:	01 e0       	ldi	r16, 0x01	; 1
    88e2:	21 e0       	ldi	r18, 0x01	; 1
    88e4:	30 e0       	ldi	r19, 0x00	; 0
    88e6:	42 e4       	ldi	r20, 0x42	; 66
    88e8:	6a e0       	ldi	r22, 0x0A	; 10
    88ea:	70 e0       	ldi	r23, 0x00	; 0
    88ec:	81 e0       	ldi	r24, 0x01	; 1
    88ee:	90 e0       	ldi	r25, 0x00	; 0
    88f0:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(5,10,'A',1,1);
    88f4:	21 e0       	ldi	r18, 0x01	; 1
    88f6:	30 e0       	ldi	r19, 0x00	; 0
    88f8:	41 e4       	ldi	r20, 0x41	; 65
    88fa:	6a e0       	ldi	r22, 0x0A	; 10
    88fc:	70 e0       	ldi	r23, 0x00	; 0
    88fe:	85 e0       	ldi	r24, 0x05	; 5
    8900:	90 e0       	ldi	r25, 0x00	; 0
    8902:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(9,10,'T',1,1);
    8906:	21 e0       	ldi	r18, 0x01	; 1
    8908:	30 e0       	ldi	r19, 0x00	; 0
    890a:	44 e5       	ldi	r20, 0x54	; 84
    890c:	6a e0       	ldi	r22, 0x0A	; 10
    890e:	70 e0       	ldi	r23, 0x00	; 0
    8910:	89 e0       	ldi	r24, 0x09	; 9
    8912:	90 e0       	ldi	r25, 0x00	; 0
    8914:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(13,10,'T',1,1);
    8918:	21 e0       	ldi	r18, 0x01	; 1
    891a:	30 e0       	ldi	r19, 0x00	; 0
    891c:	44 e5       	ldi	r20, 0x54	; 84
    891e:	6a e0       	ldi	r22, 0x0A	; 10
    8920:	70 e0       	ldi	r23, 0x00	; 0
    8922:	8d e0       	ldi	r24, 0x0D	; 13
    8924:	90 e0       	ldi	r25, 0x00	; 0
    8926:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	
	uint8_t battery = adc_get_battery_percentage();
    892a:	0e 94 99 08 	call	0x1132	; 0x1132 <adc_get_battery_percentage>
	
	char buffer[5];
	itoa_simple(buffer,battery);
    892e:	48 2f       	mov	r20, r24
    8930:	50 e0       	ldi	r21, 0x00	; 0
    8932:	60 e0       	ldi	r22, 0x00	; 0
    8934:	70 e0       	ldi	r23, 0x00	; 0
    8936:	ce 01       	movw	r24, r28
    8938:	01 96       	adiw	r24, 0x01	; 1
    893a:	dc db       	rcall	.-2120   	; 0x80f4 <itoa_simple>
	
	display_draw_small_char(3,3,buffer[0],1,1);
    893c:	21 e0       	ldi	r18, 0x01	; 1
    893e:	30 e0       	ldi	r19, 0x00	; 0
    8940:	49 81       	ldd	r20, Y+1	; 0x01
    8942:	63 e0       	ldi	r22, 0x03	; 3
    8944:	70 e0       	ldi	r23, 0x00	; 0
    8946:	83 e0       	ldi	r24, 0x03	; 3
    8948:	90 e0       	ldi	r25, 0x00	; 0
    894a:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(7,3,buffer[1],1,1);
    894e:	21 e0       	ldi	r18, 0x01	; 1
    8950:	30 e0       	ldi	r19, 0x00	; 0
    8952:	4a 81       	ldd	r20, Y+2	; 0x02
    8954:	63 e0       	ldi	r22, 0x03	; 3
    8956:	70 e0       	ldi	r23, 0x00	; 0
    8958:	87 e0       	ldi	r24, 0x07	; 7
    895a:	90 e0       	ldi	r25, 0x00	; 0
    895c:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	display_draw_small_char(11,3,'%',1,1);
    8960:	21 e0       	ldi	r18, 0x01	; 1
    8962:	30 e0       	ldi	r19, 0x00	; 0
    8964:	45 e2       	ldi	r20, 0x25	; 37
    8966:	63 e0       	ldi	r22, 0x03	; 3
    8968:	70 e0       	ldi	r23, 0x00	; 0
    896a:	8b e0       	ldi	r24, 0x0B	; 11
    896c:	90 e0       	ldi	r25, 0x00	; 0
    896e:	0e 94 c7 23 	call	0x478e	; 0x478e <display_draw_small_char>
	
}
    8972:	25 96       	adiw	r28, 0x05	; 5
    8974:	cd bf       	out	0x3d, r28	; 61
    8976:	de bf       	out	0x3e, r29	; 62
    8978:	df 91       	pop	r29
    897a:	cf 91       	pop	r28
    897c:	0f 91       	pop	r16
    897e:	08 95       	ret

00008980 <menu_draw_config_frame>:

void menu_draw_config_frame(void) 
{
	display_draw_four_letter_word("CONF");
    8980:	8f ec       	ldi	r24, 0xCF	; 207
    8982:	97 e2       	ldi	r25, 0x27	; 39
    8984:	0c 94 4e 24 	jmp	0x489c	; 0x489c <display_draw_four_letter_word>

00008988 <menu_set_env_variables>:
}

void menu_set_env_variables(void) 
{
    8988:	ef 92       	push	r14
    898a:	ff 92       	push	r15
    898c:	0f 93       	push	r16
    898e:	1f 93       	push	r17
    8990:	cf 93       	push	r28
    8992:	df 93       	push	r29
	strncpy(env.name,CLOCK_NAME,sizeof(env.name));
    8994:	49 e1       	ldi	r20, 0x19	; 25
    8996:	50 e0       	ldi	r21, 0x00	; 0
    8998:	64 ed       	ldi	r22, 0xD4	; 212
    899a:	77 e2       	ldi	r23, 0x27	; 39
    899c:	82 e3       	ldi	r24, 0x32	; 50
    899e:	9b e2       	ldi	r25, 0x2B	; 43
    89a0:	0e 94 7f 55 	call	0xaafe	; 0xaafe <strncpy>
	env.id = CLOCK_ID;
    89a4:	81 e0       	ldi	r24, 0x01	; 1
    89a6:	80 93 22 2b 	sts	0x2B22, r24
	env.menu_id = 0;
    89aa:	10 92 23 2b 	sts	0x2B23, r1
	env.brightness = 0;
    89ae:	10 92 25 2b 	sts	0x2B25, r1
	env.runtime = 0;
    89b2:	10 92 2e 2b 	sts	0x2B2E, r1
    89b6:	10 92 2f 2b 	sts	0x2B2F, r1
    89ba:	10 92 30 2b 	sts	0x2B30, r1
    89be:	10 92 31 2b 	sts	0x2B31, r1
	
	strncpy(env.wifi_pswd,PASS, strlen(PASS));
    89c2:	8a e0       	ldi	r24, 0x0A	; 10
    89c4:	e9 ed       	ldi	r30, 0xD9	; 217
    89c6:	f7 e2       	ldi	r31, 0x27	; 39
    89c8:	af e8       	ldi	r26, 0x8F	; 143
    89ca:	bb e2       	ldi	r27, 0x2B	; 43
    89cc:	01 90       	ld	r0, Z+
    89ce:	0d 92       	st	X+, r0
    89d0:	8a 95       	dec	r24
    89d2:	e1 f7       	brne	.-8      	; 0x89cc <menu_set_env_variables+0x44>
	strncpy(env.wifi_ssid,SSID, strlen(SSID));
    89d4:	89 e0       	ldi	r24, 0x09	; 9
    89d6:	e4 ee       	ldi	r30, 0xE4	; 228
    89d8:	f7 e2       	ldi	r31, 0x27	; 39
    89da:	a8 ea       	ldi	r26, 0xA8	; 168
    89dc:	bb e2       	ldi	r27, 0x2B	; 43
    89de:	01 90       	ld	r0, Z+
    89e0:	0d 92       	st	X+, r0
    89e2:	8a 95       	dec	r24
    89e4:	e1 f7       	brne	.-8      	; 0x89de <menu_set_env_variables+0x56>
	
	env.temperature[0] = '0';
    89e6:	80 e3       	ldi	r24, 0x30	; 48
    89e8:	80 93 4b 2b 	sts	0x2B4B, r24
	env.city[0] = '0';
    89ec:	80 93 76 2b 	sts	0x2B76, r24
	
	env.time.seconds = 0;
    89f0:	10 92 c4 2b 	sts	0x2BC4, r1
	env.time.minutes = 0;
    89f4:	10 92 c5 2b 	sts	0x2BC5, r1
	env.time.hours = 0;
    89f8:	10 92 c6 2b 	sts	0x2BC6, r1
	env.time.day = 3;
    89fc:	c7 ec       	ldi	r28, 0xC7	; 199
    89fe:	db e2       	ldi	r29, 0x2B	; 43
    8a00:	83 e0       	ldi	r24, 0x03	; 3
    8a02:	88 83       	st	Y, r24
	env.time.month = Februrary;
    8a04:	0a ec       	ldi	r16, 0xCA	; 202
    8a06:	1b e2       	ldi	r17, 0x2B	; 43
    8a08:	82 e0       	ldi	r24, 0x02	; 2
    8a0a:	f8 01       	movw	r30, r16
    8a0c:	80 83       	st	Z, r24
	env.time.year = 2016;
    8a0e:	3b ec       	ldi	r19, 0xCB	; 203
    8a10:	e3 2e       	mov	r14, r19
    8a12:	3b e2       	ldi	r19, 0x2B	; 43
    8a14:	f3 2e       	mov	r15, r19
    8a16:	80 ee       	ldi	r24, 0xE0	; 224
    8a18:	97 e0       	ldi	r25, 0x07	; 7
    8a1a:	f7 01       	movw	r30, r14
    8a1c:	80 83       	st	Z, r24
    8a1e:	91 83       	std	Z+1, r25	; 0x01
	env.time.weekday = time_get_weekday(env.time.day, env.time.month, env.time.year);
    8a20:	40 ee       	ldi	r20, 0xE0	; 224
    8a22:	57 e0       	ldi	r21, 0x07	; 7
    8a24:	62 e0       	ldi	r22, 0x02	; 2
    8a26:	83 e0       	ldi	r24, 0x03	; 3
    8a28:	c9 d5       	rcall	.+2962   	; 0x95bc <time_get_weekday>
    8a2a:	80 93 c8 2b 	sts	0x2BC8, r24
	env.time.week = time_get_weeknumber(env.time.day, env.time.month, env.time.year);;
    8a2e:	f7 01       	movw	r30, r14
    8a30:	40 81       	ld	r20, Z
    8a32:	51 81       	ldd	r21, Z+1	; 0x01
    8a34:	f8 01       	movw	r30, r16
    8a36:	60 81       	ld	r22, Z
    8a38:	88 81       	ld	r24, Y
    8a3a:	25 d6       	rcall	.+3146   	; 0x9686 <time_get_weeknumber>
    8a3c:	80 93 c9 2b 	sts	0x2BC9, r24
	
	env.alarm.hours = 0;
    8a40:	10 92 c2 2b 	sts	0x2BC2, r1
	env.alarm.minutes = 0;
    8a44:	10 92 c1 2b 	sts	0x2BC1, r1
	
	eeprom_write_block(&env,EEPROM_START,sizeof(env));
    8a48:	4b ea       	ldi	r20, 0xAB	; 171
    8a4a:	50 e0       	ldi	r21, 0x00	; 0
    8a4c:	60 e0       	ldi	r22, 0x00	; 0
    8a4e:	70 e0       	ldi	r23, 0x00	; 0
    8a50:	82 e2       	ldi	r24, 0x22	; 34
    8a52:	9b e2       	ldi	r25, 0x2B	; 43
	
}
    8a54:	df 91       	pop	r29
    8a56:	cf 91       	pop	r28
    8a58:	1f 91       	pop	r17
    8a5a:	0f 91       	pop	r16
    8a5c:	ff 90       	pop	r15
    8a5e:	ef 90       	pop	r14
	env.time.week = time_get_weeknumber(env.time.day, env.time.month, env.time.year);;
	
	env.alarm.hours = 0;
	env.alarm.minutes = 0;
	
	eeprom_write_block(&env,EEPROM_START,sizeof(env));
    8a60:	0c 94 a0 59 	jmp	0xb340	; 0xb340 <__eewr_block_x64a4u>

00008a64 <menu_alarm>:
	
}

void menu_alarm(void) 
{
	rtc_disable_time_render();
    8a64:	0e 94 e7 12 	call	0x25ce	; 0x25ce <rtc_disable_time_render>
	display_slide_out_to_bottom();
    8a68:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <display_slide_out_to_bottom>
	display_fill_screen();
    8a6c:	0e 94 1c 21 	call	0x4238	; 0x4238 <display_fill_screen>
	display_refresh_screen();
    8a70:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
	display_fade_blink();
    8a74:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <display_fade_blink>
	display_fade_blink();
    8a78:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <display_fade_blink>
	display_fade_blink();
    8a7c:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <display_fade_blink>
	display_clear_screen();
    8a80:	0e 94 1e 21 	call	0x423c	; 0x423c <display_clear_screen>
	rtc_enable_time_render();
    8a84:	0e 94 69 13 	call	0x26d2	; 0x26d2 <rtc_enable_time_render>
	display_slide_in_from_bottom();
    8a88:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <display_slide_in_from_bottom>

00008a8c <menu_configure_brightnesss>:
	}	
	return MENU_SUCCESS;
}

void menu_configure_brightnesss(void) 
{	
    8a8c:	0f 93       	push	r16
	bool quit = false;
	
	ht1632c_set_brightness(env.brightness);
    8a8e:	80 91 25 2b 	lds	r24, 0x2B25
    8a92:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <ht1632c_set_brightness>
	display_draw_filled_rect(0,7,env.brightness+1,2,1);
    8a96:	40 91 25 2b 	lds	r20, 0x2B25
    8a9a:	4f 5f       	subi	r20, 0xFF	; 255
    8a9c:	01 e0       	ldi	r16, 0x01	; 1
    8a9e:	22 e0       	ldi	r18, 0x02	; 2
    8aa0:	67 e0       	ldi	r22, 0x07	; 7
    8aa2:	80 e0       	ldi	r24, 0x00	; 0
    8aa4:	0e 94 9b 21 	call	0x4336	; 0x4336 <display_draw_filled_rect>
	display_refresh_screen();
    8aa8:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
	
	while(!quit) {
		btn_status = btn_check_press();
    8aac:	0e 94 c8 11 	call	0x2390	; 0x2390 <btn_check_press>
    8ab0:	80 93 aa 2c 	sts	0x2CAA, r24

		switch(btn_status) {
    8ab4:	80 91 aa 2c 	lds	r24, 0x2CAA
    8ab8:	82 30       	cpi	r24, 0x02	; 2
    8aba:	09 f4       	brne	.+2      	; 0x8abe <menu_configure_brightnesss+0x32>
    8abc:	49 c0       	rjmp	.+146    	; 0x8b50 <menu_configure_brightnesss+0xc4>
    8abe:	18 f4       	brcc	.+6      	; 0x8ac6 <menu_configure_brightnesss+0x3a>
    8ac0:	81 30       	cpi	r24, 0x01	; 1
    8ac2:	69 f1       	breq	.+90     	; 0x8b1e <menu_configure_brightnesss+0x92>
    8ac4:	4b c0       	rjmp	.+150    	; 0x8b5c <menu_configure_brightnesss+0xd0>
    8ac6:	83 30       	cpi	r24, 0x03	; 3
    8ac8:	c9 f1       	breq	.+114    	; 0x8b3c <menu_configure_brightnesss+0xb0>
    8aca:	84 30       	cpi	r24, 0x04	; 4
    8acc:	09 f0       	breq	.+2      	; 0x8ad0 <menu_configure_brightnesss+0x44>
    8ace:	46 c0       	rjmp	.+140    	; 0x8b5c <menu_configure_brightnesss+0xd0>
			case BTN4:
				if (env.brightness < 15) {
    8ad0:	40 91 25 2b 	lds	r20, 0x2B25
    8ad4:	4f 30       	cpi	r20, 0x0F	; 15
    8ad6:	cc f4       	brge	.+50     	; 0x8b0a <menu_configure_brightnesss+0x7e>
					display_draw_filled_rect(0,7,env.brightness+1,2,0);
    8ad8:	4f 5f       	subi	r20, 0xFF	; 255
    8ada:	00 e0       	ldi	r16, 0x00	; 0
    8adc:	22 e0       	ldi	r18, 0x02	; 2
    8ade:	67 e0       	ldi	r22, 0x07	; 7
    8ae0:	80 e0       	ldi	r24, 0x00	; 0
    8ae2:	0e 94 9b 21 	call	0x4336	; 0x4336 <display_draw_filled_rect>
					ht1632c_set_brightness(++env.brightness);
    8ae6:	80 91 25 2b 	lds	r24, 0x2B25
    8aea:	8f 5f       	subi	r24, 0xFF	; 255
    8aec:	80 93 25 2b 	sts	0x2B25, r24
    8af0:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <ht1632c_set_brightness>
					display_draw_filled_rect(0,7,env.brightness+1,2,1);
    8af4:	40 91 25 2b 	lds	r20, 0x2B25
    8af8:	4f 5f       	subi	r20, 0xFF	; 255
    8afa:	01 e0       	ldi	r16, 0x01	; 1
    8afc:	22 e0       	ldi	r18, 0x02	; 2
    8afe:	67 e0       	ldi	r22, 0x07	; 7
    8b00:	80 e0       	ldi	r24, 0x00	; 0
    8b02:	0e 94 9b 21 	call	0x4336	; 0x4336 <display_draw_filled_rect>
					display_refresh_screen();
    8b06:	0e 94 22 21 	call	0x4244	; 0x4244 <display_refresh_screen>
    8b0a:	2f ef       	ldi	r18, 0xFF	; 255
    8b0c:	83 ec       	ldi	r24, 0xC3	; 195
    8b0e:	99 e0       	ldi	r25, 0x09	; 9
    8b10:	21 50       	subi	r18, 0x01	; 1
    8b12:	80 40       	sbci	r24, 0x00	; 0
    8b14:	90 40       	sbci	r25, 0x00	; 0
    8b16:	e1 f7       	brne	.-8      	; 0x8b10 <menu_configure_brightnesss+0x84>
    8b18:	00 c0       	rjmp	.+0      	; 0x8b1a <menu_configure_brightnesss+0x8e>
    8b1a:	00 00       	nop
    8b1c:	c7 cf       	rjmp	.-114    	; 0x8aac <menu_configure_brightnesss+0x20>
				}
				_delay_ms(100);
				break;
			case BTN1:
				if (env.brightness > 0) {
    8b1e:	40 91 25 2b 	lds	r20, 0x2B25
    8b22:	14 16       	cp	r1, r20
    8b24:	94 f7       	brge	.-28     	; 0x8b0a <menu_configure_brightnesss+0x7e>
					display_draw_filled_rect(0,7,env.brightness+1,2,0);
    8b26:	4f 5f       	subi	r20, 0xFF	; 255
    8b28:	00 e0       	ldi	r16, 0x00	; 0
    8b2a:	22 e0       	ldi	r18, 0x02	; 2
    8b2c:	67 e0       	ldi	r22, 0x07	; 7
    8b2e:	80 e0       	ldi	r24, 0x00	; 0
    8b30:	0e 94 9b 21 	call	0x4336	; 0x4336 <display_draw_filled_rect>
					ht1632c_set_brightness(--env.brightness);
    8b34:	80 91 25 2b 	lds	r24, 0x2B25
    8b38:	81 50       	subi	r24, 0x01	; 1
    8b3a:	d8 cf       	rjmp	.-80     	; 0x8aec <menu_configure_brightnesss+0x60>
					display_refresh_screen();
				}
				_delay_ms(100);
				break;
			case BTN3:
				display_clear_screen();
    8b3c:	0e 94 1e 21 	call	0x423c	; 0x423c <display_clear_screen>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("BRIGHTNESS SET",false);
    8b40:	60 e0       	ldi	r22, 0x00	; 0
    8b42:	8e ee       	ldi	r24, 0xEE	; 238
    8b44:	97 e2       	ldi	r25, 0x27	; 39
    8b46:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
				_delay_ms(100);
				btn_status = NO_BTN;
				break;
		}
	}
}
    8b4a:	0f 91       	pop	r16
				display_clear_screen();
#ifdef SHOW_MANUAL
				display_print_scrolling_text("BRIGHTNESS SET",false);
#endif
				quit = true;
				EEPROM_WriteEnv();
    8b4c:	0c 94 96 09 	jmp	0x132c	; 0x132c <EEPROM_WriteEnv>
				break;
			case BTN2:
#ifdef SHOW_MANUAL
				display_print_scrolling_text("EXIT",false);
    8b50:	60 e0       	ldi	r22, 0x00	; 0
    8b52:	8d ef       	ldi	r24, 0xFD	; 253
    8b54:	97 e2       	ldi	r25, 0x27	; 39
				_delay_ms(100);
				btn_status = NO_BTN;
				break;
		}
	}
}
    8b56:	0f 91       	pop	r16
				quit = true;
				EEPROM_WriteEnv();
				break;
			case BTN2:
#ifdef SHOW_MANUAL
				display_print_scrolling_text("EXIT",false);
    8b58:	0c 94 6f 23 	jmp	0x46de	; 0x46de <display_print_scrolling_text>
    8b5c:	2f ef       	ldi	r18, 0xFF	; 255
    8b5e:	83 ec       	ldi	r24, 0xC3	; 195
    8b60:	99 e0       	ldi	r25, 0x09	; 9
    8b62:	21 50       	subi	r18, 0x01	; 1
    8b64:	80 40       	sbci	r24, 0x00	; 0
    8b66:	90 40       	sbci	r25, 0x00	; 0
    8b68:	e1 f7       	brne	.-8      	; 0x8b62 <menu_configure_brightnesss+0xd6>
    8b6a:	00 c0       	rjmp	.+0      	; 0x8b6c <menu_configure_brightnesss+0xe0>
    8b6c:	00 00       	nop
#endif
				return;
			default:
				_delay_ms(100);
				btn_status = NO_BTN;
    8b6e:	10 92 aa 2c 	sts	0x2CAA, r1
				break;
    8b72:	9c cf       	rjmp	.-200    	; 0x8aac <menu_configure_brightnesss+0x20>

00008b74 <menu_set_time>:

uint8_t menu_set_time(void) 
{	
	bool next = false;
	
	display_slide_out_to_left();
    8b74:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
	display_draw_three_letter_word("HRS");
    8b78:	82 e0       	ldi	r24, 0x02	; 2
    8b7a:	98 e2       	ldi	r25, 0x28	; 40
    8b7c:	0e 94 77 24 	call	0x48ee	; 0x48ee <display_draw_three_letter_word>
	display_slide_in_from_right();
    8b80:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
    8b84:	2f ef       	ldi	r18, 0xFF	; 255
    8b86:	87 ea       	ldi	r24, 0xA7	; 167
    8b88:	91 e6       	ldi	r25, 0x61	; 97
    8b8a:	21 50       	subi	r18, 0x01	; 1
    8b8c:	80 40       	sbci	r24, 0x00	; 0
    8b8e:	90 40       	sbci	r25, 0x00	; 0
    8b90:	e1 f7       	brne	.-8      	; 0x8b8a <menu_set_time+0x16>
    8b92:	00 c0       	rjmp	.+0      	; 0x8b94 <menu_set_time+0x20>
    8b94:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8b96:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
	rtc_update_display(5,env.time.hours);
    8b9a:	60 91 c6 2b 	lds	r22, 0x2BC6
    8b9e:	85 e0       	ldi	r24, 0x05	; 5
    8ba0:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
	display_slide_in_from_right();
    8ba4:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
    8ba8:	0e 94 c8 11 	call	0x2390	; 0x2390 <btn_check_press>
    8bac:	80 93 aa 2c 	sts	0x2CAA, r24
		switch(btn_status) {
    8bb0:	80 91 aa 2c 	lds	r24, 0x2CAA
    8bb4:	82 30       	cpi	r24, 0x02	; 2
    8bb6:	09 f4       	brne	.+2      	; 0x8bba <menu_set_time+0x46>
    8bb8:	78 c1       	rjmp	.+752    	; 0x8eaa <menu_set_time+0x336>
    8bba:	38 f4       	brcc	.+14     	; 0x8bca <menu_set_time+0x56>
    8bbc:	81 30       	cpi	r24, 0x01	; 1
    8bbe:	d9 f5       	brne	.+118    	; 0x8c36 <menu_set_time+0xc2>
				display_clear_buffer();
				display_draw_and_increment_hour();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    8bc0:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_buffer>
				display_draw_and_decrement_hour();
    8bc4:	0e 94 98 25 	call	0x4b30	; 0x4b30 <display_draw_and_decrement_hour>
    8bc8:	08 c0       	rjmp	.+16     	; 0x8bda <menu_set_time+0x66>
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8bca:	83 30       	cpi	r24, 0x03	; 3
    8bcc:	81 f0       	breq	.+32     	; 0x8bee <menu_set_time+0x7a>
    8bce:	84 30       	cpi	r24, 0x04	; 4
    8bd0:	91 f5       	brne	.+100    	; 0x8c36 <menu_set_time+0xc2>
			case BTN4:
				display_clear_buffer();
    8bd2:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_buffer>
				display_draw_and_increment_hour();
    8bd6:	0e 94 88 25 	call	0x4b10	; 0x4b10 <display_draw_and_increment_hour>
    8bda:	2f ef       	ldi	r18, 0xFF	; 255
    8bdc:	89 e6       	ldi	r24, 0x69	; 105
    8bde:	98 e1       	ldi	r25, 0x18	; 24
    8be0:	21 50       	subi	r18, 0x01	; 1
    8be2:	80 40       	sbci	r24, 0x00	; 0
    8be4:	90 40       	sbci	r25, 0x00	; 0
    8be6:	e1 f7       	brne	.-8      	; 0x8be0 <menu_set_time+0x6c>
    8be8:	00 c0       	rjmp	.+0      	; 0x8bea <menu_set_time+0x76>
    8bea:	00 00       	nop
    8bec:	dd cf       	rjmp	.-70     	; 0x8ba8 <menu_set_time+0x34>
    8bee:	2f ef       	ldi	r18, 0xFF	; 255
    8bf0:	89 e6       	ldi	r24, 0x69	; 105
    8bf2:	98 e1       	ldi	r25, 0x18	; 24
    8bf4:	21 50       	subi	r18, 0x01	; 1
    8bf6:	80 40       	sbci	r24, 0x00	; 0
    8bf8:	90 40       	sbci	r25, 0x00	; 0
    8bfa:	e1 f7       	brne	.-8      	; 0x8bf4 <menu_set_time+0x80>
    8bfc:	00 c0       	rjmp	.+0      	; 0x8bfe <menu_set_time+0x8a>
    8bfe:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    8c00:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
	display_draw_three_letter_word("MIN");
    8c04:	86 e0       	ldi	r24, 0x06	; 6
    8c06:	98 e2       	ldi	r25, 0x28	; 40
    8c08:	0e 94 77 24 	call	0x48ee	; 0x48ee <display_draw_three_letter_word>
	display_slide_in_from_right();
    8c0c:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
    8c10:	2f ef       	ldi	r18, 0xFF	; 255
    8c12:	87 ea       	ldi	r24, 0xA7	; 167
    8c14:	91 e6       	ldi	r25, 0x61	; 97
    8c16:	21 50       	subi	r18, 0x01	; 1
    8c18:	80 40       	sbci	r24, 0x00	; 0
    8c1a:	90 40       	sbci	r25, 0x00	; 0
    8c1c:	e1 f7       	brne	.-8      	; 0x8c16 <menu_set_time+0xa2>
    8c1e:	00 c0       	rjmp	.+0      	; 0x8c20 <menu_set_time+0xac>
    8c20:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8c22:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
	rtc_update_display(5,env.time.minutes);
    8c26:	60 91 c5 2b 	lds	r22, 0x2BC5
    8c2a:	85 e0       	ldi	r24, 0x05	; 5
    8c2c:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
	display_slide_in_from_right();
    8c30:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
    8c34:	17 c0       	rjmp	.+46     	; 0x8c64 <menu_set_time+0xf0>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    8c36:	10 92 aa 2c 	sts	0x2CAA, r1
				break;
    8c3a:	b6 cf       	rjmp	.-148    	; 0x8ba8 <menu_set_time+0x34>
	//ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8c3c:	83 30       	cpi	r24, 0x03	; 3
    8c3e:	d8 f0       	brcs	.+54     	; 0x8c76 <menu_set_time+0x102>
    8c40:	83 30       	cpi	r24, 0x03	; 3
    8c42:	01 f1       	breq	.+64     	; 0x8c84 <menu_set_time+0x110>
    8c44:	84 30       	cpi	r24, 0x04	; 4
    8c46:	09 f0       	breq	.+2      	; 0x8c4a <menu_set_time+0xd6>
    8c48:	49 c0       	rjmp	.+146    	; 0x8cdc <menu_set_time+0x168>
			case BTN4:
				display_clear_buffer();
    8c4a:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_buffer>
				display_draw_and_increment_minute();
    8c4e:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <display_draw_and_increment_minute>
    8c52:	2f ef       	ldi	r18, 0xFF	; 255
    8c54:	89 e6       	ldi	r24, 0x69	; 105
    8c56:	98 e1       	ldi	r25, 0x18	; 24
    8c58:	21 50       	subi	r18, 0x01	; 1
    8c5a:	80 40       	sbci	r24, 0x00	; 0
    8c5c:	90 40       	sbci	r25, 0x00	; 0
    8c5e:	e1 f7       	brne	.-8      	; 0x8c58 <menu_set_time+0xe4>
    8c60:	00 c0       	rjmp	.+0      	; 0x8c62 <menu_set_time+0xee>
    8c62:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
    8c64:	0e 94 c8 11 	call	0x2390	; 0x2390 <btn_check_press>
    8c68:	80 93 aa 2c 	sts	0x2CAA, r24
		switch(btn_status) {
    8c6c:	80 91 aa 2c 	lds	r24, 0x2CAA
    8c70:	82 30       	cpi	r24, 0x02	; 2
    8c72:	21 f7       	brne	.-56     	; 0x8c3c <menu_set_time+0xc8>
    8c74:	1a c1       	rjmp	.+564    	; 0x8eaa <menu_set_time+0x336>
    8c76:	81 30       	cpi	r24, 0x01	; 1
    8c78:	89 f5       	brne	.+98     	; 0x8cdc <menu_set_time+0x168>
				display_clear_buffer();
				display_draw_and_increment_minute();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    8c7a:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_buffer>
				display_draw_and_decrement_minute();
    8c7e:	0e 94 b9 25 	call	0x4b72	; 0x4b72 <display_draw_and_decrement_minute>
    8c82:	e7 cf       	rjmp	.-50     	; 0x8c52 <menu_set_time+0xde>
    8c84:	2f ef       	ldi	r18, 0xFF	; 255
    8c86:	89 e6       	ldi	r24, 0x69	; 105
    8c88:	98 e1       	ldi	r25, 0x18	; 24
    8c8a:	21 50       	subi	r18, 0x01	; 1
    8c8c:	80 40       	sbci	r24, 0x00	; 0
    8c8e:	90 40       	sbci	r25, 0x00	; 0
    8c90:	e1 f7       	brne	.-8      	; 0x8c8a <menu_set_time+0x116>
    8c92:	00 c0       	rjmp	.+0      	; 0x8c94 <menu_set_time+0x120>
    8c94:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    8c96:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
	display_draw_four_letter_word("YEAR");
    8c9a:	84 e1       	ldi	r24, 0x14	; 20
    8c9c:	98 e2       	ldi	r25, 0x28	; 40
    8c9e:	0e 94 4e 24 	call	0x489c	; 0x489c <display_draw_four_letter_word>
	display_slide_in_from_right();
    8ca2:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
    8ca6:	2f ef       	ldi	r18, 0xFF	; 255
    8ca8:	87 ea       	ldi	r24, 0xA7	; 167
    8caa:	91 e6       	ldi	r25, 0x61	; 97
    8cac:	21 50       	subi	r18, 0x01	; 1
    8cae:	80 40       	sbci	r24, 0x00	; 0
    8cb0:	90 40       	sbci	r25, 0x00	; 0
    8cb2:	e1 f7       	brne	.-8      	; 0x8cac <menu_set_time+0x138>
    8cb4:	00 c0       	rjmp	.+0      	; 0x8cb6 <menu_set_time+0x142>
    8cb6:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8cb8:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
	char *year = NULL;
	itoa_simple(year,env.time.year);
    8cbc:	40 91 cb 2b 	lds	r20, 0x2BCB
    8cc0:	50 91 cc 2b 	lds	r21, 0x2BCC
    8cc4:	60 e0       	ldi	r22, 0x00	; 0
    8cc6:	70 e0       	ldi	r23, 0x00	; 0
    8cc8:	80 e0       	ldi	r24, 0x00	; 0
    8cca:	90 e0       	ldi	r25, 0x00	; 0
    8ccc:	13 da       	rcall	.-3034   	; 0x80f4 <itoa_simple>
	display_draw_four_letter_word(year);
    8cce:	80 e0       	ldi	r24, 0x00	; 0
    8cd0:	90 e0       	ldi	r25, 0x00	; 0
    8cd2:	0e 94 4e 24 	call	0x489c	; 0x489c <display_draw_four_letter_word>
	display_slide_in_from_right();
    8cd6:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
    8cda:	17 c0       	rjmp	.+46     	; 0x8d0a <menu_set_time+0x196>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    8cdc:	10 92 aa 2c 	sts	0x2CAA, r1
				break;
    8ce0:	c1 cf       	rjmp	.-126    	; 0x8c64 <menu_set_time+0xf0>
	//ht1632c_blink(true);
		
	//Set year
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8ce2:	83 30       	cpi	r24, 0x03	; 3
    8ce4:	d8 f0       	brcs	.+54     	; 0x8d1c <menu_set_time+0x1a8>
    8ce6:	83 30       	cpi	r24, 0x03	; 3
    8ce8:	01 f1       	breq	.+64     	; 0x8d2a <menu_set_time+0x1b6>
    8cea:	84 30       	cpi	r24, 0x04	; 4
    8cec:	09 f0       	breq	.+2      	; 0x8cf0 <menu_set_time+0x17c>
    8cee:	41 c0       	rjmp	.+130    	; 0x8d72 <menu_set_time+0x1fe>
			case BTN4:
				display_clear_buffer();
    8cf0:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_buffer>
				display_draw_and_increment_year();
    8cf4:	0e 94 1b 26 	call	0x4c36	; 0x4c36 <display_draw_and_increment_year>
    8cf8:	2f ef       	ldi	r18, 0xFF	; 255
    8cfa:	89 e6       	ldi	r24, 0x69	; 105
    8cfc:	98 e1       	ldi	r25, 0x18	; 24
    8cfe:	21 50       	subi	r18, 0x01	; 1
    8d00:	80 40       	sbci	r24, 0x00	; 0
    8d02:	90 40       	sbci	r25, 0x00	; 0
    8d04:	e1 f7       	brne	.-8      	; 0x8cfe <menu_set_time+0x18a>
    8d06:	00 c0       	rjmp	.+0      	; 0x8d08 <menu_set_time+0x194>
    8d08:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
		
	//Set year
	while(!next) {
		btn_status = btn_check_press();
    8d0a:	0e 94 c8 11 	call	0x2390	; 0x2390 <btn_check_press>
    8d0e:	80 93 aa 2c 	sts	0x2CAA, r24
		switch(btn_status) {
    8d12:	80 91 aa 2c 	lds	r24, 0x2CAA
    8d16:	82 30       	cpi	r24, 0x02	; 2
    8d18:	21 f7       	brne	.-56     	; 0x8ce2 <menu_set_time+0x16e>
    8d1a:	c7 c0       	rjmp	.+398    	; 0x8eaa <menu_set_time+0x336>
    8d1c:	81 30       	cpi	r24, 0x01	; 1
    8d1e:	49 f5       	brne	.+82     	; 0x8d72 <menu_set_time+0x1fe>
				display_clear_buffer();
				display_draw_and_increment_year();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    8d20:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_buffer>
				display_draw_and_decrement_year();
    8d24:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <display_draw_and_decrement_year>
    8d28:	e7 cf       	rjmp	.-50     	; 0x8cf8 <menu_set_time+0x184>
    8d2a:	2f ef       	ldi	r18, 0xFF	; 255
    8d2c:	89 e6       	ldi	r24, 0x69	; 105
    8d2e:	98 e1       	ldi	r25, 0x18	; 24
    8d30:	21 50       	subi	r18, 0x01	; 1
    8d32:	80 40       	sbci	r24, 0x00	; 0
    8d34:	90 40       	sbci	r25, 0x00	; 0
    8d36:	e1 f7       	brne	.-8      	; 0x8d30 <menu_set_time+0x1bc>
    8d38:	00 c0       	rjmp	.+0      	; 0x8d3a <menu_set_time+0x1c6>
    8d3a:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    8d3c:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
	display_draw_four_letter_word("MNTH");
    8d40:	89 e1       	ldi	r24, 0x19	; 25
    8d42:	98 e2       	ldi	r25, 0x28	; 40
    8d44:	0e 94 4e 24 	call	0x489c	; 0x489c <display_draw_four_letter_word>
	display_slide_in_from_right();
    8d48:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
    8d4c:	2f ef       	ldi	r18, 0xFF	; 255
    8d4e:	87 ea       	ldi	r24, 0xA7	; 167
    8d50:	91 e6       	ldi	r25, 0x61	; 97
    8d52:	21 50       	subi	r18, 0x01	; 1
    8d54:	80 40       	sbci	r24, 0x00	; 0
    8d56:	90 40       	sbci	r25, 0x00	; 0
    8d58:	e1 f7       	brne	.-8      	; 0x8d52 <menu_set_time+0x1de>
    8d5a:	00 c0       	rjmp	.+0      	; 0x8d5c <menu_set_time+0x1e8>
    8d5c:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8d5e:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
	display_draw_three_letter_word(time_get_month_name(env.time.month));
    8d62:	80 91 ca 2b 	lds	r24, 0x2BCA
    8d66:	1b d4       	rcall	.+2102   	; 0x959e <time_get_month_name>
    8d68:	0e 94 77 24 	call	0x48ee	; 0x48ee <display_draw_three_letter_word>
	display_slide_in_from_right();
    8d6c:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
    8d70:	17 c0       	rjmp	.+46     	; 0x8da0 <menu_set_time+0x22c>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    8d72:	10 92 aa 2c 	sts	0x2CAA, r1
				break;
    8d76:	c9 cf       	rjmp	.-110    	; 0x8d0a <menu_set_time+0x196>
	//ht1632c_blink(true);
	
	//Set month
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8d78:	83 30       	cpi	r24, 0x03	; 3
    8d7a:	d8 f0       	brcs	.+54     	; 0x8db2 <menu_set_time+0x23e>
    8d7c:	83 30       	cpi	r24, 0x03	; 3
    8d7e:	01 f1       	breq	.+64     	; 0x8dc0 <menu_set_time+0x24c>
    8d80:	84 30       	cpi	r24, 0x04	; 4
    8d82:	09 f0       	breq	.+2      	; 0x8d86 <menu_set_time+0x212>
    8d84:	41 c0       	rjmp	.+130    	; 0x8e08 <menu_set_time+0x294>
			case BTN4:
				display_clear_buffer();
    8d86:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_buffer>
				display_draw_and_increment_month();
    8d8a:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <display_draw_and_increment_month>
    8d8e:	2f ef       	ldi	r18, 0xFF	; 255
    8d90:	89 e6       	ldi	r24, 0x69	; 105
    8d92:	98 e1       	ldi	r25, 0x18	; 24
    8d94:	21 50       	subi	r18, 0x01	; 1
    8d96:	80 40       	sbci	r24, 0x00	; 0
    8d98:	90 40       	sbci	r25, 0x00	; 0
    8d9a:	e1 f7       	brne	.-8      	; 0x8d94 <menu_set_time+0x220>
    8d9c:	00 c0       	rjmp	.+0      	; 0x8d9e <menu_set_time+0x22a>
    8d9e:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set month
	while(!next) {
		btn_status = btn_check_press();
    8da0:	0e 94 c8 11 	call	0x2390	; 0x2390 <btn_check_press>
    8da4:	80 93 aa 2c 	sts	0x2CAA, r24
		switch(btn_status) {
    8da8:	80 91 aa 2c 	lds	r24, 0x2CAA
    8dac:	82 30       	cpi	r24, 0x02	; 2
    8dae:	21 f7       	brne	.-56     	; 0x8d78 <menu_set_time+0x204>
    8db0:	7c c0       	rjmp	.+248    	; 0x8eaa <menu_set_time+0x336>
    8db2:	81 30       	cpi	r24, 0x01	; 1
    8db4:	49 f5       	brne	.+82     	; 0x8e08 <menu_set_time+0x294>
				display_clear_buffer();
				display_draw_and_increment_month();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    8db6:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_buffer>
				display_draw_and_decrement_month();
    8dba:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <display_draw_and_decrement_month>
    8dbe:	e7 cf       	rjmp	.-50     	; 0x8d8e <menu_set_time+0x21a>
    8dc0:	2f ef       	ldi	r18, 0xFF	; 255
    8dc2:	89 e6       	ldi	r24, 0x69	; 105
    8dc4:	98 e1       	ldi	r25, 0x18	; 24
    8dc6:	21 50       	subi	r18, 0x01	; 1
    8dc8:	80 40       	sbci	r24, 0x00	; 0
    8dca:	90 40       	sbci	r25, 0x00	; 0
    8dcc:	e1 f7       	brne	.-8      	; 0x8dc6 <menu_set_time+0x252>
    8dce:	00 c0       	rjmp	.+0      	; 0x8dd0 <menu_set_time+0x25c>
    8dd0:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    8dd2:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
	display_draw_three_letter_word("DAY");
    8dd6:	8e e1       	ldi	r24, 0x1E	; 30
    8dd8:	98 e2       	ldi	r25, 0x28	; 40
    8dda:	0e 94 77 24 	call	0x48ee	; 0x48ee <display_draw_three_letter_word>
	display_slide_in_from_right();
    8dde:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
    8de2:	2f ef       	ldi	r18, 0xFF	; 255
    8de4:	87 ea       	ldi	r24, 0xA7	; 167
    8de6:	91 e6       	ldi	r25, 0x61	; 97
    8de8:	21 50       	subi	r18, 0x01	; 1
    8dea:	80 40       	sbci	r24, 0x00	; 0
    8dec:	90 40       	sbci	r25, 0x00	; 0
    8dee:	e1 f7       	brne	.-8      	; 0x8de8 <menu_set_time+0x274>
    8df0:	00 c0       	rjmp	.+0      	; 0x8df2 <menu_set_time+0x27e>
    8df2:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8df4:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
	rtc_update_display(5,env.time.day);
    8df8:	60 91 c7 2b 	lds	r22, 0x2BC7
    8dfc:	85 e0       	ldi	r24, 0x05	; 5
    8dfe:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
	display_slide_in_from_right();
    8e02:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
    8e06:	17 c0       	rjmp	.+46     	; 0x8e36 <menu_set_time+0x2c2>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    8e08:	10 92 aa 2c 	sts	0x2CAA, r1
				break;
    8e0c:	c9 cf       	rjmp	.-110    	; 0x8da0 <menu_set_time+0x22c>
	//ht1632c_blink(true);
	
	//Set days
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8e0e:	83 30       	cpi	r24, 0x03	; 3
    8e10:	d8 f0       	brcs	.+54     	; 0x8e48 <menu_set_time+0x2d4>
    8e12:	83 30       	cpi	r24, 0x03	; 3
    8e14:	01 f1       	breq	.+64     	; 0x8e56 <menu_set_time+0x2e2>
    8e16:	84 30       	cpi	r24, 0x04	; 4
    8e18:	09 f0       	breq	.+2      	; 0x8e1c <menu_set_time+0x2a8>
    8e1a:	50 c0       	rjmp	.+160    	; 0x8ebc <menu_set_time+0x348>
			case BTN4:
				display_clear_buffer();
    8e1c:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_buffer>
				display_draw_and_increment_day();
    8e20:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <display_draw_and_increment_day>
    8e24:	2f ef       	ldi	r18, 0xFF	; 255
    8e26:	89 e6       	ldi	r24, 0x69	; 105
    8e28:	98 e1       	ldi	r25, 0x18	; 24
    8e2a:	21 50       	subi	r18, 0x01	; 1
    8e2c:	80 40       	sbci	r24, 0x00	; 0
    8e2e:	90 40       	sbci	r25, 0x00	; 0
    8e30:	e1 f7       	brne	.-8      	; 0x8e2a <menu_set_time+0x2b6>
    8e32:	00 c0       	rjmp	.+0      	; 0x8e34 <menu_set_time+0x2c0>
    8e34:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set days
	while(!next) {
		btn_status = btn_check_press();
    8e36:	0e 94 c8 11 	call	0x2390	; 0x2390 <btn_check_press>
    8e3a:	80 93 aa 2c 	sts	0x2CAA, r24
		switch(btn_status) {
    8e3e:	80 91 aa 2c 	lds	r24, 0x2CAA
    8e42:	82 30       	cpi	r24, 0x02	; 2
    8e44:	21 f7       	brne	.-56     	; 0x8e0e <menu_set_time+0x29a>
    8e46:	31 c0       	rjmp	.+98     	; 0x8eaa <menu_set_time+0x336>
    8e48:	81 30       	cpi	r24, 0x01	; 1
    8e4a:	c1 f5       	brne	.+112    	; 0x8ebc <menu_set_time+0x348>
				display_clear_buffer();
				display_draw_and_increment_day();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    8e4c:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_buffer>
				display_draw_and_decrement_day();
    8e50:	0e 94 e7 25 	call	0x4bce	; 0x4bce <display_draw_and_decrement_day>
    8e54:	e7 cf       	rjmp	.-50     	; 0x8e24 <menu_set_time+0x2b0>
    8e56:	2f ef       	ldi	r18, 0xFF	; 255
    8e58:	89 e6       	ldi	r24, 0x69	; 105
    8e5a:	98 e1       	ldi	r25, 0x18	; 24
    8e5c:	21 50       	subi	r18, 0x01	; 1
    8e5e:	80 40       	sbci	r24, 0x00	; 0
    8e60:	90 40       	sbci	r25, 0x00	; 0
    8e62:	e1 f7       	brne	.-8      	; 0x8e5c <menu_set_time+0x2e8>
    8e64:	00 c0       	rjmp	.+0      	; 0x8e66 <menu_set_time+0x2f2>
    8e66:	00 00       	nop
		}
	}
	next = false;
	
	//Calculate the rest
	env.time.weekday = time_get_weekday(env.time.day,env.time.month,env.time.year);
    8e68:	40 91 cb 2b 	lds	r20, 0x2BCB
    8e6c:	50 91 cc 2b 	lds	r21, 0x2BCC
    8e70:	60 91 ca 2b 	lds	r22, 0x2BCA
    8e74:	80 91 c7 2b 	lds	r24, 0x2BC7
    8e78:	a1 d3       	rcall	.+1858   	; 0x95bc <time_get_weekday>
    8e7a:	80 93 c8 2b 	sts	0x2BC8, r24
	env.time.week = time_get_weeknumber(env.time.day,env.time.month,env.time.year);
    8e7e:	40 91 cb 2b 	lds	r20, 0x2BCB
    8e82:	50 91 cc 2b 	lds	r21, 0x2BCC
    8e86:	60 91 ca 2b 	lds	r22, 0x2BCA
    8e8a:	80 91 c7 2b 	lds	r24, 0x2BC7
    8e8e:	fb d3       	rcall	.+2038   	; 0x9686 <time_get_weeknumber>
    8e90:	80 93 c9 2b 	sts	0x2BC9, r24
	
	//ht1632c_blink(false);
	EEPROM_WriteEnv();
    8e94:	0e 94 96 09 	call	0x132c	; 0x132c <EEPROM_WriteEnv>
	display_slide_out_to_bottom();
    8e98:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <display_slide_out_to_bottom>
	
#ifdef SHOW_MANUAL
	display_print_scrolling_text("TIME AND DATE SET",false);
    8e9c:	60 e0       	ldi	r22, 0x00	; 0
    8e9e:	82 e2       	ldi	r24, 0x22	; 34
    8ea0:	98 e2       	ldi	r25, 0x28	; 40
    8ea2:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
#endif
	
	return 1;
    8ea6:	81 e0       	ldi	r24, 0x01	; 1
    8ea8:	08 95       	ret
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    8eaa:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    8eae:	60 e0       	ldi	r22, 0x00	; 0
    8eb0:	8a e0       	ldi	r24, 0x0A	; 10
    8eb2:	98 e2       	ldi	r25, 0x28	; 40
    8eb4:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
#endif
				return 0;
    8eb8:	80 e0       	ldi	r24, 0x00	; 0
    8eba:	08 95       	ret
			default:
				btn_status = NO_BTN;
    8ebc:	10 92 aa 2c 	sts	0x2CAA, r1
				break;
    8ec0:	ba cf       	rjmp	.-140    	; 0x8e36 <menu_set_time+0x2c2>

00008ec2 <menu_set_alarm>:

uint8_t menu_set_alarm(void) 
{
	bool next = false;
	
	display_draw_three_letter_word("HRS");
    8ec2:	82 e0       	ldi	r24, 0x02	; 2
    8ec4:	98 e2       	ldi	r25, 0x28	; 40
    8ec6:	0e 94 77 24 	call	0x48ee	; 0x48ee <display_draw_three_letter_word>
	display_slide_in_from_right();
    8eca:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
    8ece:	2f ef       	ldi	r18, 0xFF	; 255
    8ed0:	87 ea       	ldi	r24, 0xA7	; 167
    8ed2:	91 e6       	ldi	r25, 0x61	; 97
    8ed4:	21 50       	subi	r18, 0x01	; 1
    8ed6:	80 40       	sbci	r24, 0x00	; 0
    8ed8:	90 40       	sbci	r25, 0x00	; 0
    8eda:	e1 f7       	brne	.-8      	; 0x8ed4 <menu_set_alarm+0x12>
    8edc:	00 c0       	rjmp	.+0      	; 0x8ede <menu_set_alarm+0x1c>
    8ede:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8ee0:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
	rtc_update_display(5,env.alarm.hours);
    8ee4:	60 91 c2 2b 	lds	r22, 0x2BC2
    8ee8:	85 e0       	ldi	r24, 0x05	; 5
    8eea:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
	display_slide_in_from_right();
    8eee:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
    8ef2:	0e 94 c8 11 	call	0x2390	; 0x2390 <btn_check_press>
    8ef6:	80 93 aa 2c 	sts	0x2CAA, r24
		switch(btn_status) {
    8efa:	80 91 aa 2c 	lds	r24, 0x2CAA
    8efe:	82 30       	cpi	r24, 0x02	; 2
    8f00:	09 f4       	brne	.+2      	; 0x8f04 <menu_set_alarm+0x42>
    8f02:	7b c0       	rjmp	.+246    	; 0x8ffa <menu_set_alarm+0x138>
    8f04:	38 f4       	brcc	.+14     	; 0x8f14 <menu_set_alarm+0x52>
    8f06:	81 30       	cpi	r24, 0x01	; 1
    8f08:	d9 f5       	brne	.+118    	; 0x8f80 <menu_set_alarm+0xbe>
				display_clear_buffer();
				display_alarm_increment_hour();
				_delay_ms(150);
				break;
			case BTN1:
				display_clear_buffer();
    8f0a:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_buffer>
				display_alarm_decrement_hour();
    8f0e:	0e 94 77 25 	call	0x4aee	; 0x4aee <display_alarm_decrement_hour>
    8f12:	08 c0       	rjmp	.+16     	; 0x8f24 <menu_set_alarm+0x62>
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8f14:	83 30       	cpi	r24, 0x03	; 3
    8f16:	81 f0       	breq	.+32     	; 0x8f38 <menu_set_alarm+0x76>
    8f18:	84 30       	cpi	r24, 0x04	; 4
    8f1a:	91 f5       	brne	.+100    	; 0x8f80 <menu_set_alarm+0xbe>
			case BTN4:
				display_clear_buffer();
    8f1c:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_buffer>
				display_alarm_increment_hour();
    8f20:	0e 94 66 25 	call	0x4acc	; 0x4acc <display_alarm_increment_hour>
    8f24:	2f ef       	ldi	r18, 0xFF	; 255
    8f26:	85 ea       	ldi	r24, 0xA5	; 165
    8f28:	9e e0       	ldi	r25, 0x0E	; 14
    8f2a:	21 50       	subi	r18, 0x01	; 1
    8f2c:	80 40       	sbci	r24, 0x00	; 0
    8f2e:	90 40       	sbci	r25, 0x00	; 0
    8f30:	e1 f7       	brne	.-8      	; 0x8f2a <menu_set_alarm+0x68>
    8f32:	00 c0       	rjmp	.+0      	; 0x8f34 <menu_set_alarm+0x72>
    8f34:	00 00       	nop
    8f36:	dd cf       	rjmp	.-70     	; 0x8ef2 <menu_set_alarm+0x30>
    8f38:	2f ef       	ldi	r18, 0xFF	; 255
    8f3a:	89 e6       	ldi	r24, 0x69	; 105
    8f3c:	98 e1       	ldi	r25, 0x18	; 24
    8f3e:	21 50       	subi	r18, 0x01	; 1
    8f40:	80 40       	sbci	r24, 0x00	; 0
    8f42:	90 40       	sbci	r25, 0x00	; 0
    8f44:	e1 f7       	brne	.-8      	; 0x8f3e <menu_set_alarm+0x7c>
    8f46:	00 c0       	rjmp	.+0      	; 0x8f48 <menu_set_alarm+0x86>
    8f48:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    8f4a:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
	display_draw_three_letter_word("MIN");
    8f4e:	86 e0       	ldi	r24, 0x06	; 6
    8f50:	98 e2       	ldi	r25, 0x28	; 40
    8f52:	0e 94 77 24 	call	0x48ee	; 0x48ee <display_draw_three_letter_word>
	display_slide_in_from_right();
    8f56:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
    8f5a:	2f ef       	ldi	r18, 0xFF	; 255
    8f5c:	87 ea       	ldi	r24, 0xA7	; 167
    8f5e:	91 e6       	ldi	r25, 0x61	; 97
    8f60:	21 50       	subi	r18, 0x01	; 1
    8f62:	80 40       	sbci	r24, 0x00	; 0
    8f64:	90 40       	sbci	r25, 0x00	; 0
    8f66:	e1 f7       	brne	.-8      	; 0x8f60 <menu_set_alarm+0x9e>
    8f68:	00 c0       	rjmp	.+0      	; 0x8f6a <menu_set_alarm+0xa8>
    8f6a:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8f6c:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
	rtc_update_display(5,env.alarm.minutes);
    8f70:	60 91 c1 2b 	lds	r22, 0x2BC1
    8f74:	85 e0       	ldi	r24, 0x05	; 5
    8f76:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
	display_slide_in_from_right();
    8f7a:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
    8f7e:	16 c0       	rjmp	.+44     	; 0x8fac <menu_set_alarm+0xea>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    8f80:	10 92 aa 2c 	sts	0x2CAA, r1
				break;
    8f84:	b6 cf       	rjmp	.-148    	; 0x8ef2 <menu_set_alarm+0x30>
	//ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8f86:	83 30       	cpi	r24, 0x03	; 3
    8f88:	d0 f0       	brcs	.+52     	; 0x8fbe <menu_set_alarm+0xfc>
    8f8a:	83 30       	cpi	r24, 0x03	; 3
    8f8c:	f9 f0       	breq	.+62     	; 0x8fcc <menu_set_alarm+0x10a>
    8f8e:	84 30       	cpi	r24, 0x04	; 4
    8f90:	e9 f5       	brne	.+122    	; 0x900c <menu_set_alarm+0x14a>
			case BTN4:
				display_clear_buffer();
    8f92:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_buffer>
				display_alarm_increment_minute();
    8f96:	0e 94 44 25 	call	0x4a88	; 0x4a88 <display_alarm_increment_minute>
    8f9a:	2f ef       	ldi	r18, 0xFF	; 255
    8f9c:	85 ea       	ldi	r24, 0xA5	; 165
    8f9e:	9e e0       	ldi	r25, 0x0E	; 14
    8fa0:	21 50       	subi	r18, 0x01	; 1
    8fa2:	80 40       	sbci	r24, 0x00	; 0
    8fa4:	90 40       	sbci	r25, 0x00	; 0
    8fa6:	e1 f7       	brne	.-8      	; 0x8fa0 <menu_set_alarm+0xde>
    8fa8:	00 c0       	rjmp	.+0      	; 0x8faa <menu_set_alarm+0xe8>
    8faa:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
    8fac:	0e 94 c8 11 	call	0x2390	; 0x2390 <btn_check_press>
    8fb0:	80 93 aa 2c 	sts	0x2CAA, r24
		switch(btn_status) {
    8fb4:	80 91 aa 2c 	lds	r24, 0x2CAA
    8fb8:	82 30       	cpi	r24, 0x02	; 2
    8fba:	29 f7       	brne	.-54     	; 0x8f86 <menu_set_alarm+0xc4>
    8fbc:	1e c0       	rjmp	.+60     	; 0x8ffa <menu_set_alarm+0x138>
    8fbe:	81 30       	cpi	r24, 0x01	; 1
    8fc0:	29 f5       	brne	.+74     	; 0x900c <menu_set_alarm+0x14a>
				display_clear_buffer();
				display_alarm_increment_minute();
				_delay_ms(150);
				break;
			case BTN1:
				display_clear_buffer();
    8fc2:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_buffer>
				display_alarm_decrement_minute();
    8fc6:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <display_alarm_decrement_minute>
    8fca:	e7 cf       	rjmp	.-50     	; 0x8f9a <menu_set_alarm+0xd8>
    8fcc:	2f ef       	ldi	r18, 0xFF	; 255
    8fce:	89 e6       	ldi	r24, 0x69	; 105
    8fd0:	98 e1       	ldi	r25, 0x18	; 24
    8fd2:	21 50       	subi	r18, 0x01	; 1
    8fd4:	80 40       	sbci	r24, 0x00	; 0
    8fd6:	90 40       	sbci	r25, 0x00	; 0
    8fd8:	e1 f7       	brne	.-8      	; 0x8fd2 <menu_set_alarm+0x110>
    8fda:	00 c0       	rjmp	.+0      	; 0x8fdc <menu_set_alarm+0x11a>
    8fdc:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	alarm_status = ALARM_ON;
    8fde:	81 e0       	ldi	r24, 0x01	; 1
    8fe0:	80 93 ab 2c 	sts	0x2CAB, r24
	EEPROM_WriteEnv();
    8fe4:	0e 94 96 09 	call	0x132c	; 0x132c <EEPROM_WriteEnv>
	display_slide_out_to_bottom();
    8fe8:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <display_slide_out_to_bottom>
	
#ifdef SHOW_MANUAL
	display_print_scrolling_text("ALARM SET",false);
    8fec:	60 e0       	ldi	r22, 0x00	; 0
    8fee:	84 e3       	ldi	r24, 0x34	; 52
    8ff0:	98 e2       	ldi	r25, 0x28	; 40
    8ff2:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
#endif

	return 1;
    8ff6:	81 e0       	ldi	r24, 0x01	; 1
    8ff8:	08 95       	ret
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    8ffa:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    8ffe:	60 e0       	ldi	r22, 0x00	; 0
    9000:	8a e0       	ldi	r24, 0x0A	; 10
    9002:	98 e2       	ldi	r25, 0x28	; 40
    9004:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
#endif
				return 0;
    9008:	80 e0       	ldi	r24, 0x00	; 0
    900a:	08 95       	ret
			default:
				btn_status = NO_BTN;
    900c:	10 92 aa 2c 	sts	0x2CAA, r1
				break;
    9010:	cd cf       	rjmp	.-102    	; 0x8fac <menu_set_alarm+0xea>

00009012 <menu_configuration>:
	}
	return MENU_SUCCESS;
}

menu_status_t menu_configuration(SI114X_IRQ_SAMPLE *samples) 
{	
    9012:	ef 92       	push	r14
    9014:	0f 93       	push	r16
    9016:	cf 93       	push	r28
    9018:	df 93       	push	r29
    901a:	ec 01       	movw	r28, r24
	btn_status = btn_check_press();
    901c:	0e 94 c8 11 	call	0x2390	; 0x2390 <btn_check_press>
    9020:	80 93 aa 2c 	sts	0x2CAA, r24
	
	//Menu ID select
	if (btn_status != NO_BTN) {
    9024:	80 91 aa 2c 	lds	r24, 0x2CAA
    9028:	88 23       	and	r24, r24
    902a:	d1 f0       	breq	.+52     	; 0x9060 <menu_configuration+0x4e>
		if (btn_status == BTN1) {
    902c:	80 91 aa 2c 	lds	r24, 0x2CAA
    9030:	81 30       	cpi	r24, 0x01	; 1
    9032:	49 f4       	brne	.+18     	; 0x9046 <menu_configuration+0x34>
			if (env.menu_id != NUMBER_OF_CONFIG_MENUS) {
    9034:	80 91 23 2b 	lds	r24, 0x2B23
    9038:	87 30       	cpi	r24, 0x07	; 7
    903a:	11 f0       	breq	.+4      	; 0x9040 <menu_configuration+0x2e>
				env.menu_id++;
    903c:	8f 5f       	subi	r24, 0xFF	; 255
    903e:	0e c0       	rjmp	.+28     	; 0x905c <menu_configuration+0x4a>
			} else {
				env.menu_id = 0;
    9040:	10 92 23 2b 	sts	0x2B23, r1
    9044:	0d c0       	rjmp	.+26     	; 0x9060 <menu_configuration+0x4e>
			}
		} else if (btn_status == BTN4) {
    9046:	80 91 aa 2c 	lds	r24, 0x2CAA
    904a:	84 30       	cpi	r24, 0x04	; 4
    904c:	49 f4       	brne	.+18     	; 0x9060 <menu_configuration+0x4e>
			if (env.menu_id != 0) {
    904e:	80 91 23 2b 	lds	r24, 0x2B23
    9052:	88 23       	and	r24, r24
    9054:	11 f0       	breq	.+4      	; 0x905a <menu_configuration+0x48>
				env.menu_id--;
    9056:	81 50       	subi	r24, 0x01	; 1
    9058:	01 c0       	rjmp	.+2      	; 0x905c <menu_configuration+0x4a>
			} else {
				env.menu_id = NUMBER_OF_CONFIG_MENUS;
    905a:	87 e0       	ldi	r24, 0x07	; 7
    905c:	80 93 23 2b 	sts	0x2B23, r24
			}
		}
	}
	
	if (btn_status == BTN1) {
    9060:	80 91 aa 2c 	lds	r24, 0x2CAA
    9064:	81 30       	cpi	r24, 0x01	; 1
    9066:	29 f4       	brne	.+10     	; 0x9072 <menu_configuration+0x60>
		rtc_disable_time_render();
    9068:	0e 94 e7 12 	call	0x25ce	; 0x25ce <rtc_disable_time_render>
		display_slide_out_to_right();
    906c:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <display_slide_out_to_right>
    9070:	0f c0       	rjmp	.+30     	; 0x9090 <menu_configuration+0x7e>
	} else if (btn_status == BTN4) {
    9072:	80 91 aa 2c 	lds	r24, 0x2CAA
    9076:	84 30       	cpi	r24, 0x04	; 4
    9078:	29 f4       	brne	.+10     	; 0x9084 <menu_configuration+0x72>
		rtc_disable_time_render();
    907a:	0e 94 e7 12 	call	0x25ce	; 0x25ce <rtc_disable_time_render>
		display_slide_out_to_left();
    907e:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
    9082:	06 c0       	rjmp	.+12     	; 0x9090 <menu_configuration+0x7e>
	} else if (btn_status == BTN3) {
    9084:	80 91 aa 2c 	lds	r24, 0x2CAA
    9088:	83 30       	cpi	r24, 0x03	; 3
    908a:	11 f4       	brne	.+4      	; 0x9090 <menu_configuration+0x7e>
		display_fade_blink();
    908c:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <display_fade_blink>
	}
	
	//Switch between menus
	if (btn_status != NO_BTN) {
    9090:	80 91 aa 2c 	lds	r24, 0x2CAA
    9094:	88 23       	and	r24, r24
    9096:	21 f1       	breq	.+72     	; 0x90e0 <menu_configuration+0xce>
		switch(env.menu_id) {
    9098:	80 91 23 2b 	lds	r24, 0x2B23
    909c:	90 e0       	ldi	r25, 0x00	; 0
    909e:	88 30       	cpi	r24, 0x08	; 8
    90a0:	91 05       	cpc	r25, r1
    90a2:	f0 f4       	brcc	.+60     	; 0x90e0 <menu_configuration+0xce>
    90a4:	fc 01       	movw	r30, r24
    90a6:	e2 50       	subi	r30, 0x02	; 2
    90a8:	ff 4f       	sbci	r31, 0xFF	; 255
    90aa:	0c 94 07 53 	jmp	0xa60e	; 0xa60e <__tablejump2__>
			case CONFIG_BRIGHTNESS:
				display_draw_four_letter_word("LGHT");
    90ae:	8e e3       	ldi	r24, 0x3E	; 62
    90b0:	98 e2       	ldi	r25, 0x28	; 40
    90b2:	14 c0       	rjmp	.+40     	; 0x90dc <menu_configuration+0xca>
				break;
			case CONFIG_TIME:
				display_draw_four_letter_word("TIME");
    90b4:	8f e3       	ldi	r24, 0x3F	; 63
    90b6:	99 e2       	ldi	r25, 0x29	; 41
    90b8:	11 c0       	rjmp	.+34     	; 0x90dc <menu_configuration+0xca>
				break;
			case CONFIG_WIFI:
				display_draw_four_letter_word("WIFI");
    90ba:	83 e4       	ldi	r24, 0x43	; 67
    90bc:	98 e2       	ldi	r25, 0x28	; 40
    90be:	0e c0       	rjmp	.+28     	; 0x90dc <menu_configuration+0xca>
				break;
			case CONFIG_ALARM:
				display_draw_four_letter_word("ALRM");
    90c0:	88 e4       	ldi	r24, 0x48	; 72
    90c2:	98 e2       	ldi	r25, 0x28	; 40
    90c4:	0b c0       	rjmp	.+22     	; 0x90dc <menu_configuration+0xca>
				break;
			case CONFIG_CALIBRATE:
				display_draw_four_letter_word("CALI");
    90c6:	8d e4       	ldi	r24, 0x4D	; 77
    90c8:	98 e2       	ldi	r25, 0x28	; 40
    90ca:	08 c0       	rjmp	.+16     	; 0x90dc <menu_configuration+0xca>
				break;
			case CONFIG_INFO:
				display_draw_four_letter_word("INFO");
    90cc:	82 e5       	ldi	r24, 0x52	; 82
    90ce:	98 e2       	ldi	r25, 0x28	; 40
    90d0:	05 c0       	rjmp	.+10     	; 0x90dc <menu_configuration+0xca>
				break;
			case CONFIG_MUSIC:
				display_draw_four_letter_word("DEMO");
    90d2:	87 e5       	ldi	r24, 0x57	; 87
    90d4:	98 e2       	ldi	r25, 0x28	; 40
    90d6:	02 c0       	rjmp	.+4      	; 0x90dc <menu_configuration+0xca>
				break;
			case CONFIG_EXIT:
				display_draw_four_letter_word("EXIT");
    90d8:	8d ef       	ldi	r24, 0xFD	; 253
    90da:	97 e2       	ldi	r25, 0x27	; 39
    90dc:	0e 94 4e 24 	call	0x489c	; 0x489c <display_draw_four_letter_word>
			default:
				break;
		}	
	}
	
	if (btn_status == BTN1) {
    90e0:	80 91 aa 2c 	lds	r24, 0x2CAA
    90e4:	81 30       	cpi	r24, 0x01	; 1
    90e6:	19 f4       	brne	.+6      	; 0x90ee <menu_configuration+0xdc>
		display_slide_in_from_left();
    90e8:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <display_slide_in_from_left>
    90ec:	06 c0       	rjmp	.+12     	; 0x90fa <menu_configuration+0xe8>
	} else if (btn_status == BTN4) {
    90ee:	80 91 aa 2c 	lds	r24, 0x2CAA
    90f2:	84 30       	cpi	r24, 0x04	; 4
    90f4:	11 f4       	brne	.+4      	; 0x90fa <menu_configuration+0xe8>
		display_slide_in_from_right();
    90f6:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
	}
	
	//Menu actions
	if (btn_status == BTN3) {
    90fa:	80 91 aa 2c 	lds	r24, 0x2CAA
    90fe:	83 30       	cpi	r24, 0x03	; 3
    9100:	09 f0       	breq	.+2      	; 0x9104 <menu_configuration+0xf2>
    9102:	82 c0       	rjmp	.+260    	; 0x9208 <menu_configuration+0x1f6>
		switch(env.menu_id) {
    9104:	40 91 23 2b 	lds	r20, 0x2B23
    9108:	50 e0       	ldi	r21, 0x00	; 0
    910a:	48 30       	cpi	r20, 0x08	; 8
    910c:	51 05       	cpc	r21, r1
    910e:	08 f0       	brcs	.+2      	; 0x9112 <menu_configuration+0x100>
    9110:	71 c0       	rjmp	.+226    	; 0x91f4 <menu_configuration+0x1e2>
    9112:	fa 01       	movw	r30, r20
    9114:	ea 5f       	subi	r30, 0xFA	; 250
    9116:	fe 4f       	sbci	r31, 0xFE	; 254
    9118:	0c 94 07 53 	jmp	0xa60e	; 0xa60e <__tablejump2__>
			case CONFIG_BRIGHTNESS:
				display_slide_out_to_top();
    911c:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <display_slide_out_to_top>
				menu_configure_brightnesss();
    9120:	b5 dc       	rcall	.-1686   	; 0x8a8c <menu_configure_brightnesss>
				ht1632c_set_brightness(MAX_BRIGHTNESS);
    9122:	8a e0       	ldi	r24, 0x0A	; 10
    9124:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <ht1632c_set_brightness>
				break;
    9128:	65 c0       	rjmp	.+202    	; 0x91f4 <menu_configuration+0x1e2>
			case CONFIG_TIME:
				display_slide_out_to_top();
    912a:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <display_slide_out_to_top>
				menu_set_time();
    912e:	22 dd       	rcall	.-1468   	; 0x8b74 <menu_set_time>
				break;
    9130:	61 c0       	rjmp	.+194    	; 0x91f4 <menu_configuration+0x1e2>
			case CONFIG_WIFI:
				display_slide_out_to_top();
    9132:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <display_slide_out_to_top>
				display_print_scrolling_text("CONNECT TO AP AND ENTER THE UPCOMMING IP ADDRESS",false);
    9136:	60 e0       	ldi	r22, 0x00	; 0
    9138:	8c e5       	ldi	r24, 0x5C	; 92
    913a:	98 e2       	ldi	r25, 0x28	; 40
    913c:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
				//Feature: Should draw wifi lines on display here.
				esp8266_on();
    9140:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <esp8266_on>
				if (esp8266_setup_webserver(false,true) == ESP8266_SUCCESS) {
    9144:	61 e0       	ldi	r22, 0x01	; 1
    9146:	80 e0       	ldi	r24, 0x00	; 0
    9148:	0e 94 5f 0b 	call	0x16be	; 0x16be <esp8266_setup_webserver>
    914c:	81 30       	cpi	r24, 0x01	; 1
    914e:	19 f5       	brne	.+70     	; 0x9196 <menu_configuration+0x184>
					start_wifi_indication();
    9150:	60 d8       	rcall	.-3904   	; 0x8212 <start_wifi_indication>
					while(esp8266_configure_ssid_and_password() != ESP8266_TIMEOUT) {
    9152:	0e 94 ce 0b 	call	0x179c	; 0x179c <esp8266_configure_ssid_and_password>
    9156:	83 30       	cpi	r24, 0x03	; 3
    9158:	d1 f0       	breq	.+52     	; 0x918e <menu_configuration+0x17c>
						btn_status = btn_check_press();
    915a:	0e 94 c8 11 	call	0x2390	; 0x2390 <btn_check_press>
    915e:	80 93 aa 2c 	sts	0x2CAA, r24
						if (btn_status == BTN4) {
    9162:	80 91 aa 2c 	lds	r24, 0x2CAA
    9166:	84 30       	cpi	r24, 0x04	; 4
    9168:	39 f4       	brne	.+14     	; 0x9178 <menu_configuration+0x166>
							stop_wifi_indication();
    916a:	6d d8       	rcall	.-3878   	; 0x8246 <stop_wifi_indication>
#ifdef SHOW_MANUAL
							display_print_scrolling_text("CANCELLED",false);
    916c:	60 e0       	ldi	r22, 0x00	; 0
    916e:	8a e0       	ldi	r24, 0x0A	; 10
    9170:	98 e2       	ldi	r25, 0x28	; 40
    9172:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
#endif							
							break;
    9176:	0b c0       	rjmp	.+22     	; 0x918e <menu_configuration+0x17c>
						}
						if (wdt_triggered) {
    9178:	80 91 21 2b 	lds	r24, 0x2B21
    917c:	88 23       	and	r24, r24
    917e:	49 f3       	breq	.-46     	; 0x9152 <menu_configuration+0x140>
							stop_wifi_indication();
    9180:	62 d8       	rcall	.-3900   	; 0x8246 <stop_wifi_indication>
#ifdef SHOW_MANUAL
							display_print_scrolling_text("SOMETHING WENT WRONG",false);
    9182:	60 e0       	ldi	r22, 0x00	; 0
    9184:	8d e8       	ldi	r24, 0x8D	; 141
    9186:	98 e2       	ldi	r25, 0x28	; 40
    9188:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
    918c:	e2 cf       	rjmp	.-60     	; 0x9152 <menu_configuration+0x140>
#endif
						}
					}
					EEPROM_WriteEnv();
    918e:	0e 94 96 09 	call	0x132c	; 0x132c <EEPROM_WriteEnv>
					stop_wifi_indication();
    9192:	59 d8       	rcall	.-3918   	; 0x8246 <stop_wifi_indication>
    9194:	05 c0       	rjmp	.+10     	; 0x91a0 <menu_configuration+0x18e>
				} else {
#ifdef SHOW_MANUAL
					display_print_scrolling_text("COULD NOT CONFIGURE WEBSERVER",false);
    9196:	60 e0       	ldi	r22, 0x00	; 0
    9198:	82 ea       	ldi	r24, 0xA2	; 162
    919a:	98 e2       	ldi	r25, 0x28	; 40
    919c:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
#endif					
				}
				esp8266_off();
    91a0:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <esp8266_off>
				break;
    91a4:	27 c0       	rjmp	.+78     	; 0x91f4 <menu_configuration+0x1e2>
			case CONFIG_ALARM:
				display_slide_out_to_top();
    91a6:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <display_slide_out_to_top>
				menu_set_alarm();
    91aa:	8b de       	rcall	.-746    	; 0x8ec2 <menu_set_alarm>
				break;
    91ac:	23 c0       	rjmp	.+70     	; 0x91f4 <menu_configuration+0x1e2>
			case CONFIG_CALIBRATE:
				display_slide_out_to_top();
    91ae:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <display_slide_out_to_top>
				si114x_baseline_calibration(samples);
    91b2:	ce 01       	movw	r24, r28
    91b4:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <si114x_baseline_calibration>
				break;
    91b8:	1d c0       	rjmp	.+58     	; 0x91f4 <menu_configuration+0x1e2>
			case CONFIG_INFO:
				display_slide_out_to_top();
    91ba:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <display_slide_out_to_top>
				display_print_scrolling_text("MADE BY: ERLEND HESTNES",false);
    91be:	60 e0       	ldi	r22, 0x00	; 0
    91c0:	80 ec       	ldi	r24, 0xC0	; 192
    91c2:	98 e2       	ldi	r25, 0x28	; 40
    91c4:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
				break;
    91c8:	15 c0       	rjmp	.+42     	; 0x91f4 <menu_configuration+0x1e2>
			case CONFIG_MUSIC:
				display_slide_out_to_bottom();
    91ca:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <display_slide_out_to_bottom>
				display_draw_bitmap(5,4,IMG_SPEAKER_A,IMG_SPEAKER_WIDTH,IMG_SPEAKER_HEIGHT,1);
    91ce:	ee 24       	eor	r14, r14
    91d0:	e3 94       	inc	r14
    91d2:	08 e0       	ldi	r16, 0x08	; 8
    91d4:	26 e0       	ldi	r18, 0x06	; 6
    91d6:	4f eb       	ldi	r20, 0xBF	; 191
    91d8:	5d e0       	ldi	r21, 0x0D	; 13
    91da:	64 e0       	ldi	r22, 0x04	; 4
    91dc:	85 e0       	ldi	r24, 0x05	; 5
    91de:	0e 94 09 22 	call	0x4412	; 0x4412 <display_draw_bitmap>
				display_slide_in_from_bottom();
    91e2:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <display_slide_in_from_bottom>
				play_sound();
    91e6:	0e 94 d9 40 	call	0x81b2	; 0x81b2 <play_sound>
				break;
    91ea:	04 c0       	rjmp	.+8      	; 0x91f4 <menu_configuration+0x1e2>
			case CONFIG_EXIT:
				display_slide_out_to_bottom();
    91ec:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <display_slide_out_to_bottom>
				return MENU_CLOSE;
    91f0:	82 e0       	ldi	r24, 0x02	; 2
    91f2:	0b c0       	rjmp	.+22     	; 0x920a <menu_configuration+0x1f8>
			default:
				break;
		}
		env.menu_id = 0;
    91f4:	10 92 23 2b 	sts	0x2B23, r1
		display_slide_out_to_bottom();
    91f8:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <display_slide_out_to_bottom>
		display_draw_four_letter_word("<  >");
    91fc:	88 ed       	ldi	r24, 0xD8	; 216
    91fe:	98 e2       	ldi	r25, 0x28	; 40
    9200:	0e 94 4e 24 	call	0x489c	; 0x489c <display_draw_four_letter_word>
		display_slide_in_from_top();
    9204:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <display_slide_in_from_top>
	}	
	return MENU_SUCCESS;
    9208:	81 e0       	ldi	r24, 0x01	; 1
}
    920a:	df 91       	pop	r29
    920c:	cf 91       	pop	r28
    920e:	0f 91       	pop	r16
    9210:	ef 90       	pop	r14
    9212:	08 95       	ret

00009214 <menu_state_machine>:
	rtc_enable_time_render();
	display_slide_in_from_bottom();
}

menu_status_t menu_state_machine(SI114X_IRQ_SAMPLE *samples) 
{	
    9214:	ff 92       	push	r15
    9216:	0f 93       	push	r16
    9218:	1f 93       	push	r17
    921a:	cf 93       	push	r28
    921c:	df 93       	push	r29
    921e:	cd b7       	in	r28, 0x3d	; 61
    9220:	de b7       	in	r29, 0x3e	; 62
    9222:	ed 97       	sbiw	r28, 0x3d	; 61
    9224:	cd bf       	out	0x3d, r28	; 61
    9226:	de bf       	out	0x3e, r29	; 62
    9228:	8c 01       	movw	r16, r24
	//Menu ID select
	if (samples->gesture != NO_GESTURE) {
    922a:	fc 01       	movw	r30, r24
    922c:	82 89       	ldd	r24, Z+18	; 0x12
    922e:	88 23       	and	r24, r24
    9230:	e1 f0       	breq	.+56     	; 0x926a <menu_state_machine+0x56>
		if (samples->gesture == LEFT_SWIPE) {
    9232:	82 30       	cpi	r24, 0x02	; 2
    9234:	59 f4       	brne	.+22     	; 0x924c <menu_state_machine+0x38>
			if (env.menu_id != NUMBER_OF_MENUS) {
    9236:	80 91 23 2b 	lds	r24, 0x2B23
    923a:	86 30       	cpi	r24, 0x06	; 6
    923c:	21 f0       	breq	.+8      	; 0x9246 <menu_state_machine+0x32>
				env.menu_id++;
    923e:	8f 5f       	subi	r24, 0xFF	; 255
    9240:	80 93 23 2b 	sts	0x2B23, r24
    9244:	3e c1       	rjmp	.+636    	; 0x94c2 <menu_state_machine+0x2ae>
			} else {
				env.menu_id = 0;
    9246:	10 92 23 2b 	sts	0x2B23, r1
    924a:	3b c1       	rjmp	.+630    	; 0x94c2 <menu_state_machine+0x2ae>
			}
		} else if (samples->gesture == RIGHT_SWIPE) {
    924c:	81 30       	cpi	r24, 0x01	; 1
    924e:	69 f4       	brne	.+26     	; 0x926a <menu_state_machine+0x56>
			if (env.menu_id != 0) {
    9250:	80 91 23 2b 	lds	r24, 0x2B23
    9254:	88 23       	and	r24, r24
    9256:	11 f0       	breq	.+4      	; 0x925c <menu_state_machine+0x48>
				env.menu_id--;
    9258:	81 50       	subi	r24, 0x01	; 1
    925a:	01 c0       	rjmp	.+2      	; 0x925e <menu_state_machine+0x4a>
			} else {
				env.menu_id = NUMBER_OF_MENUS;
    925c:	86 e0       	ldi	r24, 0x06	; 6
    925e:	80 93 23 2b 	sts	0x2B23, r24
	
	if (samples->gesture == LEFT_SWIPE) {
		rtc_disable_time_render();
		display_slide_out_to_right();
	} else if (samples->gesture == RIGHT_SWIPE) {
		rtc_disable_time_render();
    9262:	0e 94 e7 12 	call	0x25ce	; 0x25ce <rtc_disable_time_render>
		display_slide_out_to_left();
    9266:	0e 94 26 25 	call	0x4a4c	; 0x4a4c <display_slide_out_to_left>
	}
	
	//Switch between menus
	if (samples->gesture != NO_GESTURE) {
    926a:	f8 01       	movw	r30, r16
    926c:	82 89       	ldd	r24, Z+18	; 0x12
    926e:	88 23       	and	r24, r24
    9270:	c9 f0       	breq	.+50     	; 0x92a4 <menu_state_machine+0x90>
		switch(env.menu_id) {
    9272:	40 91 23 2b 	lds	r20, 0x2B23
    9276:	50 e0       	ldi	r21, 0x00	; 0
    9278:	47 30       	cpi	r20, 0x07	; 7
    927a:	51 05       	cpc	r21, r1
    927c:	98 f4       	brcc	.+38     	; 0x92a4 <menu_state_machine+0x90>
    927e:	fa 01       	movw	r30, r20
    9280:	e2 5f       	subi	r30, 0xF2	; 242
    9282:	fe 4f       	sbci	r31, 0xFE	; 254
    9284:	0c 94 07 53 	jmp	0xa60e	; 0xa60e <__tablejump2__>
			case MENU_TIME:
				rtc_enable_time_render();
    9288:	0e 94 69 13 	call	0x26d2	; 0x26d2 <rtc_enable_time_render>
				break;
    928c:	0b c0       	rjmp	.+22     	; 0x92a4 <menu_state_machine+0x90>
			case MENU_DATE:
				menu_draw_date_frame();
    928e:	f4 d9       	rcall	.-3096   	; 0x8678 <menu_draw_date_frame>
				break;
    9290:	09 c0       	rjmp	.+18     	; 0x92a4 <menu_state_machine+0x90>
			case MENU_WEEKDAY:
				menu_draw_weekday_frame();
    9292:	c6 da       	rcall	.-2676   	; 0x8820 <menu_draw_weekday_frame>
				break;
    9294:	07 c0       	rjmp	.+14     	; 0x92a4 <menu_state_machine+0x90>
			case MENU_WEEK:
				menu_draw_week_frame();
    9296:	70 da       	rcall	.-2848   	; 0x8778 <menu_draw_week_frame>
				break;
    9298:	05 c0       	rjmp	.+10     	; 0x92a4 <menu_state_machine+0x90>
			case MENU_TEMP:
				menu_draw_temperature_frame();
    929a:	8d d9       	rcall	.-3302   	; 0x85b6 <menu_draw_temperature_frame>
				break;
    929c:	03 c0       	rjmp	.+6      	; 0x92a4 <menu_state_machine+0x90>
			case MENU_BATTERY:
				menu_draw_battery_frame();
    929e:	18 db       	rcall	.-2512   	; 0x88d0 <menu_draw_battery_frame>
				break;
    92a0:	01 c0       	rjmp	.+2      	; 0x92a4 <menu_state_machine+0x90>
			case MENU_CONFIG:
				menu_draw_config_frame();
    92a2:	6e db       	rcall	.-2340   	; 0x8980 <menu_draw_config_frame>
			default:
				break;
		}	
	}
	
	if (samples->gesture == LEFT_SWIPE) {
    92a4:	f8 01       	movw	r30, r16
    92a6:	82 89       	ldd	r24, Z+18	; 0x12
    92a8:	82 30       	cpi	r24, 0x02	; 2
    92aa:	19 f4       	brne	.+6      	; 0x92b2 <menu_state_machine+0x9e>
		display_slide_in_from_left();
    92ac:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <display_slide_in_from_left>
    92b0:	04 c0       	rjmp	.+8      	; 0x92ba <menu_state_machine+0xa6>
	} else if (samples->gesture == RIGHT_SWIPE) {
    92b2:	81 30       	cpi	r24, 0x01	; 1
    92b4:	11 f4       	brne	.+4      	; 0x92ba <menu_state_machine+0xa6>
		display_slide_in_from_right();
    92b6:	0e 94 18 25 	call	0x4a30	; 0x4a30 <display_slide_in_from_right>
	}

	if (samples->gesture == PAUSE) {
    92ba:	f8 01       	movw	r30, r16
    92bc:	82 89       	ldd	r24, Z+18	; 0x12
    92be:	83 30       	cpi	r24, 0x03	; 3
    92c0:	09 f0       	breq	.+2      	; 0x92c4 <menu_state_machine+0xb0>
    92c2:	04 c1       	rjmp	.+520    	; 0x94cc <menu_state_machine+0x2b8>
		if (env.menu_id == MENU_CONFIG) {
    92c4:	80 91 23 2b 	lds	r24, 0x2B23
    92c8:	81 30       	cpi	r24, 0x01	; 1
    92ca:	69 f5       	brne	.+90     	; 0x9326 <menu_state_machine+0x112>
			Si114xPauseAll((HANDLE)SI114X_ADDR);
    92cc:	8a e5       	ldi	r24, 0x5A	; 90
    92ce:	90 e0       	ldi	r25, 0x00	; 0
    92d0:	0e 94 32 15 	call	0x2a64	; 0x2a64 <Si114xPauseAll>
			display_fade_blink();
    92d4:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <display_fade_blink>
			display_slide_out_to_top();
    92d8:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <display_slide_out_to_top>
#ifdef SHOW_MANUAL
			display_print_scrolling_text("USE BACK BUTTONS",false);
    92dc:	60 e0       	ldi	r22, 0x00	; 0
    92de:	8d ed       	ldi	r24, 0xDD	; 221
    92e0:	98 e2       	ldi	r25, 0x28	; 40
    92e2:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
#endif
			display_draw_four_letter_word("<  >");
    92e6:	88 ed       	ldi	r24, 0xD8	; 216
    92e8:	98 e2       	ldi	r25, 0x28	; 40
    92ea:	0e 94 4e 24 	call	0x489c	; 0x489c <display_draw_four_letter_word>
			display_slide_in_from_bottom();
    92ee:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <display_slide_in_from_bottom>
			env.menu_id = 0;
    92f2:	10 92 23 2b 	sts	0x2B23, r1
			while(menu_configuration(samples) == MENU_SUCCESS);
    92f6:	c8 01       	movw	r24, r16
    92f8:	8c de       	rcall	.-744    	; 0x9012 <menu_configuration>
    92fa:	81 30       	cpi	r24, 0x01	; 1
    92fc:	e1 f3       	breq	.-8      	; 0x92f6 <menu_state_machine+0xe2>
			Si114xPsAlsAuto((HANDLE)SI114X_ADDR);
    92fe:	8a e5       	ldi	r24, 0x5A	; 90
    9300:	90 e0       	ldi	r25, 0x00	; 0
    9302:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <Si114xPsAlsAuto>
			env.menu_id = 0;
    9306:	10 92 23 2b 	sts	0x2B23, r1
			rtc_enable_time_render();
    930a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <rtc_enable_time_render>
			display_slide_in_from_top();
    930e:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <display_slide_in_from_top>
    9312:	ff ef       	ldi	r31, 0xFF	; 255
    9314:	27 ea       	ldi	r18, 0xA7	; 167
    9316:	81 e6       	ldi	r24, 0x61	; 97
    9318:	f1 50       	subi	r31, 0x01	; 1
    931a:	20 40       	sbci	r18, 0x00	; 0
    931c:	80 40       	sbci	r24, 0x00	; 0
    931e:	e1 f7       	brne	.-8      	; 0x9318 <menu_state_machine+0x104>
    9320:	00 c0       	rjmp	.+0      	; 0x9322 <menu_state_machine+0x10e>
    9322:	00 00       	nop
    9324:	d3 c0       	rjmp	.+422    	; 0x94cc <menu_state_machine+0x2b8>
			//A little time to remove fingers from back buttons
			_delay_ms(1000);
		} else if (env.menu_id == MENU_TEMP) {
    9326:	83 30       	cpi	r24, 0x03	; 3
    9328:	09 f0       	breq	.+2      	; 0x932c <menu_state_machine+0x118>
    932a:	a1 c0       	rjmp	.+322    	; 0x946e <menu_state_machine+0x25a>
			esp8266_status_t status;
			Si114xPauseAll((HANDLE)SI114X_ADDR);
    932c:	8a e5       	ldi	r24, 0x5A	; 90
    932e:	90 e0       	ldi	r25, 0x00	; 0
    9330:	0e 94 32 15 	call	0x2a64	; 0x2a64 <Si114xPauseAll>
			display_fade_blink();
    9334:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <display_fade_blink>
			display_slide_out_to_top();
    9338:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <display_slide_out_to_top>
			
			//Weather don`t change that much
			if (timestamp == 0 || (env.runtime - timestamp > 15)) {
    933c:	40 91 1d 2b 	lds	r20, 0x2B1D
    9340:	50 91 1e 2b 	lds	r21, 0x2B1E
    9344:	60 91 1f 2b 	lds	r22, 0x2B1F
    9348:	70 91 20 2b 	lds	r23, 0x2B20
    934c:	41 15       	cp	r20, r1
    934e:	51 05       	cpc	r21, r1
    9350:	61 05       	cpc	r22, r1
    9352:	71 05       	cpc	r23, r1
    9354:	41 f1       	breq	.+80     	; 0x93a6 <menu_state_machine+0x192>
    9356:	80 91 2e 2b 	lds	r24, 0x2B2E
    935a:	90 91 2f 2b 	lds	r25, 0x2B2F
    935e:	a0 91 30 2b 	lds	r26, 0x2B30
    9362:	b0 91 31 2b 	lds	r27, 0x2B31
    9366:	84 1b       	sub	r24, r20
    9368:	95 0b       	sbc	r25, r21
    936a:	a6 0b       	sbc	r26, r22
    936c:	b7 0b       	sbc	r27, r23
    936e:	40 97       	sbiw	r24, 0x10	; 16
    9370:	a1 05       	cpc	r26, r1
    9372:	b1 05       	cpc	r27, r1
    9374:	c0 f4       	brcc	.+48     	; 0x93a6 <menu_state_machine+0x192>
			} else {
				status = ESP8266_SUCCESS;
			}
			
			if (status == ESP8266_SUCCESS) {
				timestamp = env.runtime; 
    9376:	80 91 2e 2b 	lds	r24, 0x2B2E
    937a:	90 91 2f 2b 	lds	r25, 0x2B2F
    937e:	a0 91 30 2b 	lds	r26, 0x2B30
    9382:	b0 91 31 2b 	lds	r27, 0x2B31
    9386:	80 93 1d 2b 	sts	0x2B1D, r24
    938a:	90 93 1e 2b 	sts	0x2B1E, r25
    938e:	a0 93 1f 2b 	sts	0x2B1F, r26
    9392:	b0 93 20 2b 	sts	0x2B20, r27
				uint8_t i = 0;
				char weather_info[60];
				strcpy(weather_info, "WEATHER FOR ");
    9396:	6e ee       	ldi	r22, 0xEE	; 238
    9398:	78 e2       	ldi	r23, 0x28	; 40
    939a:	ce 01       	movw	r24, r28
    939c:	01 96       	adiw	r24, 0x01	; 1
    939e:	0e 94 78 55 	call	0xaaf0	; 0xaaf0 <strcpy>
				status = ESP8266_SUCCESS;
			}
			
			if (status == ESP8266_SUCCESS) {
				timestamp = env.runtime; 
				uint8_t i = 0;
    93a2:	f1 2c       	mov	r15, r1
				char weather_info[60];
				strcpy(weather_info, "WEATHER FOR ");
				while(env.city[i]) {
    93a4:	1e c0       	rjmp	.+60     	; 0x93e2 <menu_state_machine+0x1ce>
			display_fade_blink();
			display_slide_out_to_top();
			
			//Weather don`t change that much
			if (timestamp == 0 || (env.runtime - timestamp > 15)) {
				start_loading();
    93a6:	0e 94 34 41 	call	0x8268	; 0x8268 <start_loading>
				esp8266_on();
    93aa:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <esp8266_on>
				status = get_internet_variables(false,true);
    93ae:	61 e0       	ldi	r22, 0x01	; 1
    93b0:	80 e0       	ldi	r24, 0x00	; 0
    93b2:	0e 94 5f 41 	call	0x82be	; 0x82be <get_internet_variables>
				esp8266_off();
    93b6:	8d af       	std	Y+61, r24	; 0x3d
    93b8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <esp8266_off>
				stop_loading();	
    93bc:	0e 94 4e 41 	call	0x829c	; 0x829c <stop_loading>
			} else {
				status = ESP8266_SUCCESS;
			}
			
			if (status == ESP8266_SUCCESS) {
    93c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    93c2:	81 30       	cpi	r24, 0x01	; 1
    93c4:	c1 f2       	breq	.-80     	; 0x9376 <menu_state_machine+0x162>
#ifdef SHOW_MANUAL
				display_print_scrolling_text(weather_info, false);
#endif
				EEPROM_WriteEnv();
			} else {
				timestamp = 0;
    93c6:	10 92 1d 2b 	sts	0x2B1D, r1
    93ca:	10 92 1e 2b 	sts	0x2B1E, r1
    93ce:	10 92 1f 2b 	sts	0x2B1F, r1
    93d2:	10 92 20 2b 	sts	0x2B20, r1
#ifdef SHOW_MANUAL
				display_print_scrolling_text("COULD NOT GET TEMPERATURE", false);
    93d6:	60 e0       	ldi	r22, 0x00	; 0
    93d8:	81 e0       	ldi	r24, 0x01	; 1
    93da:	99 e2       	ldi	r25, 0x29	; 41
    93dc:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
    93e0:	44 c0       	rjmp	.+136    	; 0x946a <menu_state_machine+0x256>
			if (status == ESP8266_SUCCESS) {
				timestamp = env.runtime; 
				uint8_t i = 0;
				char weather_info[60];
				strcpy(weather_info, "WEATHER FOR ");
				while(env.city[i]) {
    93e2:	0f 2d       	mov	r16, r15
    93e4:	10 e0       	ldi	r17, 0x00	; 0
    93e6:	0a 58       	subi	r16, 0x8A	; 138
    93e8:	14 4d       	sbci	r17, 0xD4	; 212
    93ea:	f8 01       	movw	r30, r16
    93ec:	80 81       	ld	r24, Z
    93ee:	88 23       	and	r24, r24
    93f0:	39 f0       	breq	.+14     	; 0x9400 <menu_state_machine+0x1ec>
					env.city[i] = toupper(env.city[i]);
    93f2:	90 e0       	ldi	r25, 0x00	; 0
    93f4:	0e 94 3f 55 	call	0xaa7e	; 0xaa7e <toupper>
    93f8:	f8 01       	movw	r30, r16
    93fa:	80 83       	st	Z, r24
					i++;
    93fc:	f3 94       	inc	r15
    93fe:	f1 cf       	rjmp	.-30     	; 0x93e2 <menu_state_machine+0x1ce>
				}
				strcat(weather_info,env.city);
    9400:	66 e7       	ldi	r22, 0x76	; 118
    9402:	7b e2       	ldi	r23, 0x2B	; 43
    9404:	ce 01       	movw	r24, r28
    9406:	01 96       	adiw	r24, 0x01	; 1
    9408:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
				strcat(weather_info,": ");
    940c:	6b ef       	ldi	r22, 0xFB	; 251
    940e:	78 e2       	ldi	r23, 0x28	; 40
    9410:	ce 01       	movw	r24, r28
    9412:	01 96       	adiw	r24, 0x01	; 1
    9414:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
				strcat(weather_info,env.temperature);
    9418:	6b e4       	ldi	r22, 0x4B	; 75
    941a:	7b e2       	ldi	r23, 0x2B	; 43
    941c:	ce 01       	movw	r24, r28
    941e:	01 96       	adiw	r24, 0x01	; 1
    9420:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
				strcat(weather_info,"C ");
    9424:	6e ef       	ldi	r22, 0xFE	; 254
    9426:	78 e2       	ldi	r23, 0x28	; 40
    9428:	ce 01       	movw	r24, r28
    942a:	01 96       	adiw	r24, 0x01	; 1
    942c:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
				i = 0;
    9430:	f1 2c       	mov	r15, r1
				while(env.weather_info[i]) {
    9432:	0f 2d       	mov	r16, r15
    9434:	10 e0       	ldi	r17, 0x00	; 0
    9436:	0e 5d       	subi	r16, 0xDE	; 222
    9438:	14 4d       	sbci	r17, 0xD4	; 212
    943a:	f8 01       	movw	r30, r16
    943c:	84 a5       	ldd	r24, Z+44	; 0x2c
    943e:	88 23       	and	r24, r24
    9440:	39 f0       	breq	.+14     	; 0x9450 <menu_state_machine+0x23c>
					env.weather_info[i] = toupper(env.weather_info[i]);
    9442:	90 e0       	ldi	r25, 0x00	; 0
    9444:	0e 94 3f 55 	call	0xaa7e	; 0xaa7e <toupper>
    9448:	f8 01       	movw	r30, r16
    944a:	84 a7       	std	Z+44, r24	; 0x2c
					i++;
    944c:	f3 94       	inc	r15
    944e:	f1 cf       	rjmp	.-30     	; 0x9432 <menu_state_machine+0x21e>
				}
				strcat(weather_info,env.weather_info);
    9450:	6e e4       	ldi	r22, 0x4E	; 78
    9452:	7b e2       	ldi	r23, 0x2B	; 43
    9454:	ce 01       	movw	r24, r28
    9456:	01 96       	adiw	r24, 0x01	; 1
    9458:	0e 94 62 55 	call	0xaac4	; 0xaac4 <strcat>
#ifdef SHOW_MANUAL
				display_print_scrolling_text(weather_info, false);
    945c:	60 e0       	ldi	r22, 0x00	; 0
    945e:	ce 01       	movw	r24, r28
    9460:	01 96       	adiw	r24, 0x01	; 1
    9462:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
#endif
				EEPROM_WriteEnv();
    9466:	0e 94 96 09 	call	0x132c	; 0x132c <EEPROM_WriteEnv>
				timestamp = 0;
#ifdef SHOW_MANUAL
				display_print_scrolling_text("COULD NOT GET TEMPERATURE", false);
#endif
			}
			menu_draw_temperature_frame();
    946a:	a5 d8       	rcall	.-3766   	; 0x85b6 <menu_draw_temperature_frame>
    946c:	23 c0       	rjmp	.+70     	; 0x94b4 <menu_state_machine+0x2a0>
			display_slide_in_from_top();
			Si114xPsAlsAuto((HANDLE)SI114X_ADDR);
		} else if (env.menu_id == MENU_DATE) {
    946e:	85 30       	cpi	r24, 0x05	; 5
    9470:	69 f5       	brne	.+90     	; 0x94cc <menu_state_machine+0x2b8>
			esp8266_status_t status;
			Si114xPauseAll((HANDLE)SI114X_ADDR);
    9472:	8a e5       	ldi	r24, 0x5A	; 90
    9474:	90 e0       	ldi	r25, 0x00	; 0
    9476:	0e 94 32 15 	call	0x2a64	; 0x2a64 <Si114xPauseAll>
			display_fade_blink();
    947a:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <display_fade_blink>
			display_slide_out_to_top();
    947e:	0e 94 2e 25 	call	0x4a5c	; 0x4a5c <display_slide_out_to_top>
			start_loading();
    9482:	0e 94 34 41 	call	0x8268	; 0x8268 <start_loading>
			esp8266_on();
    9486:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <esp8266_on>
			status = get_internet_variables(true,false);
    948a:	60 e0       	ldi	r22, 0x00	; 0
    948c:	81 e0       	ldi	r24, 0x01	; 1
    948e:	0e 94 5f 41 	call	0x82be	; 0x82be <get_internet_variables>
			esp8266_off();
    9492:	8d af       	std	Y+61, r24	; 0x3d
    9494:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <esp8266_off>
			stop_loading();
    9498:	0e 94 4e 41 	call	0x829c	; 0x829c <stop_loading>
			if (status == ESP8266_SUCCESS) {
    949c:	8d ad       	ldd	r24, Y+61	; 0x3d
				display_print_scrolling_text("TIME AND DATE UPDATED", false);
    949e:	60 e0       	ldi	r22, 0x00	; 0
			start_loading();
			esp8266_on();
			status = get_internet_variables(true,false);
			esp8266_off();
			stop_loading();
			if (status == ESP8266_SUCCESS) {
    94a0:	81 30       	cpi	r24, 0x01	; 1
    94a2:	19 f4       	brne	.+6      	; 0x94aa <menu_state_machine+0x296>
				display_print_scrolling_text("TIME AND DATE UPDATED", false);
    94a4:	8b e1       	ldi	r24, 0x1B	; 27
    94a6:	99 e2       	ldi	r25, 0x29	; 41
    94a8:	02 c0       	rjmp	.+4      	; 0x94ae <menu_state_machine+0x29a>
			} else {
				display_print_scrolling_text("COULD NOT GET TIME",false);
    94aa:	81 e3       	ldi	r24, 0x31	; 49
    94ac:	99 e2       	ldi	r25, 0x29	; 41
    94ae:	0e 94 6f 23 	call	0x46de	; 0x46de <display_print_scrolling_text>
			}
			menu_draw_date_frame();
    94b2:	e2 d8       	rcall	.-3644   	; 0x8678 <menu_draw_date_frame>
			display_slide_in_from_top();
    94b4:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <display_slide_in_from_top>
			Si114xPsAlsAuto((HANDLE)SI114X_ADDR);
    94b8:	8a e5       	ldi	r24, 0x5A	; 90
    94ba:	90 e0       	ldi	r25, 0x00	; 0
    94bc:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <Si114xPsAlsAuto>
    94c0:	05 c0       	rjmp	.+10     	; 0x94cc <menu_state_machine+0x2b8>
			}
		}
	}
	
	if (samples->gesture == LEFT_SWIPE) {
		rtc_disable_time_render();
    94c2:	0e 94 e7 12 	call	0x25ce	; 0x25ce <rtc_disable_time_render>
		display_slide_out_to_right();
    94c6:	0e 94 1e 25 	call	0x4a3c	; 0x4a3c <display_slide_out_to_right>
    94ca:	cf ce       	rjmp	.-610    	; 0x926a <menu_state_machine+0x56>
			display_slide_in_from_top();
			Si114xPsAlsAuto((HANDLE)SI114X_ADDR);
		}
	}
	return MENU_SUCCESS;
}
    94cc:	81 e0       	ldi	r24, 0x01	; 1
    94ce:	ed 96       	adiw	r28, 0x3d	; 61
    94d0:	cd bf       	out	0x3d, r28	; 61
    94d2:	de bf       	out	0x3e, r29	; 62
    94d4:	df 91       	pop	r29
    94d6:	cf 91       	pop	r28
    94d8:	1f 91       	pop	r17
    94da:	0f 91       	pop	r16
    94dc:	ff 90       	pop	r15
    94de:	08 95       	ret

000094e0 <__vector_16>:

	return 1;
}

ISR(TCC0_CCA_vect) 
{
    94e0:	1f 92       	push	r1
    94e2:	0f 92       	push	r0
    94e4:	0f b6       	in	r0, 0x3f	; 63
    94e6:	0f 92       	push	r0
    94e8:	11 24       	eor	r1, r1
    94ea:	0b b6       	in	r0, 0x3b	; 59
    94ec:	0f 92       	push	r0
    94ee:	2f 93       	push	r18
    94f0:	3f 93       	push	r19
    94f2:	4f 93       	push	r20
    94f4:	5f 93       	push	r21
    94f6:	6f 93       	push	r22
    94f8:	7f 93       	push	r23
    94fa:	8f 93       	push	r24
    94fc:	9f 93       	push	r25
    94fe:	af 93       	push	r26
    9500:	bf 93       	push	r27
    9502:	ef 93       	push	r30
    9504:	ff 93       	push	r31
	display_show_loading_square();
    9506:	0e 94 cc 21 	call	0x4398	; 0x4398 <display_show_loading_square>
}
    950a:	ff 91       	pop	r31
    950c:	ef 91       	pop	r30
    950e:	bf 91       	pop	r27
    9510:	af 91       	pop	r26
    9512:	9f 91       	pop	r25
    9514:	8f 91       	pop	r24
    9516:	7f 91       	pop	r23
    9518:	6f 91       	pop	r22
    951a:	5f 91       	pop	r21
    951c:	4f 91       	pop	r20
    951e:	3f 91       	pop	r19
    9520:	2f 91       	pop	r18
    9522:	0f 90       	pop	r0
    9524:	0b be       	out	0x3b, r0	; 59
    9526:	0f 90       	pop	r0
    9528:	0f be       	out	0x3f, r0	; 63
    952a:	0f 90       	pop	r0
    952c:	1f 90       	pop	r1
    952e:	18 95       	reti

00009530 <__vector_19>:

ISR(TCC0_CCD_vect)
{
    9530:	1f 92       	push	r1
    9532:	0f 92       	push	r0
    9534:	0f b6       	in	r0, 0x3f	; 63
    9536:	0f 92       	push	r0
    9538:	11 24       	eor	r1, r1
    953a:	0b b6       	in	r0, 0x3b	; 59
    953c:	0f 92       	push	r0
    953e:	2f 93       	push	r18
    9540:	3f 93       	push	r19
    9542:	4f 93       	push	r20
    9544:	5f 93       	push	r21
    9546:	6f 93       	push	r22
    9548:	7f 93       	push	r23
    954a:	8f 93       	push	r24
    954c:	9f 93       	push	r25
    954e:	af 93       	push	r26
    9550:	bf 93       	push	r27
    9552:	ef 93       	push	r30
    9554:	ff 93       	push	r31
	display_draw_wifi_icon();
    9556:	0e 94 98 24 	call	0x4930	; 0x4930 <display_draw_wifi_icon>
    955a:	ff 91       	pop	r31
    955c:	ef 91       	pop	r30
    955e:	bf 91       	pop	r27
    9560:	af 91       	pop	r26
    9562:	9f 91       	pop	r25
    9564:	8f 91       	pop	r24
    9566:	7f 91       	pop	r23
    9568:	6f 91       	pop	r22
    956a:	5f 91       	pop	r21
    956c:	4f 91       	pop	r20
    956e:	3f 91       	pop	r19
    9570:	2f 91       	pop	r18
    9572:	0f 90       	pop	r0
    9574:	0b be       	out	0x3b, r0	; 59
    9576:	0f 90       	pop	r0
    9578:	0f be       	out	0x3f, r0	; 63
    957a:	0f 90       	pop	r0
    957c:	1f 90       	pop	r1
    957e:	18 95       	reti

00009580 <time_get_day_name>:
		days_count += time_get_days_in_month(i,year);
	}
	days_count += day;
	
	return days_count;
}
    9580:	81 50       	subi	r24, 0x01	; 1
    9582:	88 30       	cpi	r24, 0x08	; 8
    9584:	48 f4       	brcc	.+18     	; 0x9598 <time_get_day_name+0x18>
    9586:	e8 2f       	mov	r30, r24
    9588:	f0 e0       	ldi	r31, 0x00	; 0
    958a:	ee 0f       	add	r30, r30
    958c:	ff 1f       	adc	r31, r31
    958e:	ef 51       	subi	r30, 0x1F	; 31
    9590:	f6 4d       	sbci	r31, 0xD6	; 214
    9592:	80 81       	ld	r24, Z
    9594:	91 81       	ldd	r25, Z+1	; 0x01
    9596:	08 95       	ret
    9598:	84 e4       	ldi	r24, 0x44	; 68
    959a:	99 e2       	ldi	r25, 0x29	; 41
    959c:	08 95       	ret

0000959e <time_get_month_name>:
    959e:	81 50       	subi	r24, 0x01	; 1
    95a0:	8c 30       	cpi	r24, 0x0C	; 12
    95a2:	48 f4       	brcc	.+18     	; 0x95b6 <time_get_month_name+0x18>
    95a4:	e8 2f       	mov	r30, r24
    95a6:	f0 e0       	ldi	r31, 0x00	; 0
    95a8:	ee 0f       	add	r30, r30
    95aa:	ff 1f       	adc	r31, r31
    95ac:	e7 53       	subi	r30, 0x37	; 55
    95ae:	f6 4d       	sbci	r31, 0xD6	; 214
    95b0:	80 81       	ld	r24, Z
    95b2:	91 81       	ldd	r25, Z+1	; 0x01
    95b4:	08 95       	ret
    95b6:	84 e4       	ldi	r24, 0x44	; 68
    95b8:	99 e2       	ldi	r25, 0x29	; 41
    95ba:	08 95       	ret

000095bc <time_get_weekday>:
    95bc:	cf 93       	push	r28
    95be:	df 93       	push	r29
    95c0:	e6 2f       	mov	r30, r22
    95c2:	21 e0       	ldi	r18, 0x01	; 1
    95c4:	30 e0       	ldi	r19, 0x00	; 0
    95c6:	63 30       	cpi	r22, 0x03	; 3
    95c8:	10 f0       	brcs	.+4      	; 0x95ce <time_get_weekday+0x12>
    95ca:	20 e0       	ldi	r18, 0x00	; 0
    95cc:	30 e0       	ldi	r19, 0x00	; 0
    95ce:	ea 01       	movw	r28, r20
    95d0:	c2 1b       	sub	r28, r18
    95d2:	d3 0b       	sbc	r29, r19
    95d4:	9e 01       	movw	r18, r28
    95d6:	28 0f       	add	r18, r24
    95d8:	31 1d       	adc	r19, r1
    95da:	ce 01       	movw	r24, r28
    95dc:	96 95       	lsr	r25
    95de:	87 95       	ror	r24
    95e0:	96 95       	lsr	r25
    95e2:	87 95       	ror	r24
    95e4:	28 0f       	add	r18, r24
    95e6:	39 1f       	adc	r19, r25
    95e8:	ce 01       	movw	r24, r28
    95ea:	60 e9       	ldi	r22, 0x90	; 144
    95ec:	71 e0       	ldi	r23, 0x01	; 1
    95ee:	c6 d7       	rcall	.+3980   	; 0xa57c <__udivmodhi4>
    95f0:	26 0f       	add	r18, r22
    95f2:	37 1f       	adc	r19, r23
    95f4:	f0 e0       	ldi	r31, 0x00	; 0
    95f6:	ee 0f       	add	r30, r30
    95f8:	ff 1f       	adc	r31, r31
    95fa:	e1 51       	subi	r30, 0x11	; 17
    95fc:	f6 4d       	sbci	r31, 0xD6	; 214
    95fe:	80 81       	ld	r24, Z
    9600:	91 81       	ldd	r25, Z+1	; 0x01
    9602:	28 0f       	add	r18, r24
    9604:	39 1f       	adc	r19, r25
    9606:	ce 01       	movw	r24, r28
    9608:	64 e6       	ldi	r22, 0x64	; 100
    960a:	70 e0       	ldi	r23, 0x00	; 0
    960c:	b7 d7       	rcall	.+3950   	; 0xa57c <__udivmodhi4>
    960e:	26 1b       	sub	r18, r22
    9610:	37 0b       	sbc	r19, r23
    9612:	c9 01       	movw	r24, r18
    9614:	67 e0       	ldi	r22, 0x07	; 7
    9616:	70 e0       	ldi	r23, 0x00	; 0
    9618:	b1 d7       	rcall	.+3938   	; 0xa57c <__udivmodhi4>
    961a:	8e 53       	subi	r24, 0x3E	; 62
    961c:	96 4d       	sbci	r25, 0xD6	; 214
    961e:	fc 01       	movw	r30, r24
    9620:	80 81       	ld	r24, Z
    9622:	df 91       	pop	r29
    9624:	cf 91       	pop	r28
    9626:	08 95       	ret

00009628 <time_is_leap_year>:
    9628:	9c 01       	movw	r18, r24
    962a:	83 70       	andi	r24, 0x03	; 3
    962c:	99 27       	eor	r25, r25
    962e:	89 2b       	or	r24, r25
    9630:	31 f4       	brne	.+12     	; 0x963e <time_is_leap_year+0x16>
    9632:	c9 01       	movw	r24, r18
    9634:	64 e6       	ldi	r22, 0x64	; 100
    9636:	70 e0       	ldi	r23, 0x00	; 0
    9638:	a1 d7       	rcall	.+3906   	; 0xa57c <__udivmodhi4>
    963a:	89 2b       	or	r24, r25
    963c:	49 f4       	brne	.+18     	; 0x9650 <time_is_leap_year+0x28>
    963e:	c9 01       	movw	r24, r18
    9640:	60 e9       	ldi	r22, 0x90	; 144
    9642:	71 e0       	ldi	r23, 0x01	; 1
    9644:	9b d7       	rcall	.+3894   	; 0xa57c <__udivmodhi4>
    9646:	21 e0       	ldi	r18, 0x01	; 1
    9648:	89 2b       	or	r24, r25
    964a:	19 f0       	breq	.+6      	; 0x9652 <time_is_leap_year+0x2a>
    964c:	20 e0       	ldi	r18, 0x00	; 0
    964e:	01 c0       	rjmp	.+2      	; 0x9652 <time_is_leap_year+0x2a>
    9650:	21 e0       	ldi	r18, 0x01	; 1
    9652:	82 2f       	mov	r24, r18
    9654:	08 95       	ret

00009656 <time_get_days_in_month>:
    9656:	48 2f       	mov	r20, r24
    9658:	cb 01       	movw	r24, r22
    965a:	50 e0       	ldi	r21, 0x00	; 0
    965c:	fa 01       	movw	r30, r20
    965e:	31 97       	sbiw	r30, 0x01	; 1
    9660:	ec 30       	cpi	r30, 0x0C	; 12
    9662:	f1 05       	cpc	r31, r1
    9664:	50 f4       	brcc	.+20     	; 0x967a <time_get_days_in_month+0x24>
    9666:	eb 5e       	subi	r30, 0xEB	; 235
    9668:	fe 4f       	sbci	r31, 0xFE	; 254
    966a:	d1 c7       	rjmp	.+4002   	; 0xa60e <__tablejump2__>
    966c:	8f e1       	ldi	r24, 0x1F	; 31
    966e:	08 95       	ret
    9670:	db df       	rcall	.-74     	; 0x9628 <time_is_leap_year>
    9672:	88 23       	and	r24, r24
    9674:	31 f0       	breq	.+12     	; 0x9682 <time_get_days_in_month+0x2c>
    9676:	8d e1       	ldi	r24, 0x1D	; 29
    9678:	08 95       	ret
    967a:	80 e0       	ldi	r24, 0x00	; 0
    967c:	08 95       	ret
    967e:	8e e1       	ldi	r24, 0x1E	; 30
    9680:	08 95       	ret
    9682:	8c e1       	ldi	r24, 0x1C	; 28
    9684:	08 95       	ret

00009686 <time_get_weeknumber>:
		return false;
}

// Static Method to return ISO WeekNumber (1-53) for a given year
int16_t time_get_weeknumber(uint8_t day, uint8_t month, uint16_t year) 
{	    
    9686:	cf 92       	push	r12
    9688:	df 92       	push	r13
    968a:	ef 92       	push	r14
    968c:	ff 92       	push	r15
    968e:	0f 93       	push	r16
    9690:	1f 93       	push	r17
    9692:	cf 93       	push	r28
    9694:	df 93       	push	r29
    9696:	cd b7       	in	r28, 0x3d	; 61
    9698:	de b7       	in	r29, 0x3e	; 62
    969a:	68 97       	sbiw	r28, 0x18	; 24
    969c:	cd bf       	out	0x3d, r28	; 61
    969e:	de bf       	out	0x3e, r29	; 62
    96a0:	7a 01       	movw	r14, r20
	int16_t yyyy = year;
	int16_t mm= month;
    96a2:	c6 2e       	mov	r12, r22
    96a4:	d1 2c       	mov	r13, r1
	int16_t day_of_year_number;
	int16_t jan_1_weekday;
	int16_t week_number = 0, weekday;
	    
	int16_t i,j,k,l,m,n;
	int16_t mnth[12] = {0,31,59,90,120,151,181,212,243,273,304,334};
    96a6:	98 e1       	ldi	r25, 0x18	; 24
    96a8:	ef eb       	ldi	r30, 0xBF	; 191
    96aa:	f0 e2       	ldi	r31, 0x20	; 32
    96ac:	de 01       	movw	r26, r28
    96ae:	11 96       	adiw	r26, 0x01	; 1
    96b0:	01 90       	ld	r0, Z+
    96b2:	0d 92       	st	X+, r0
    96b4:	9a 95       	dec	r25
    96b6:	e1 f7       	brne	.-8      	; 0x96b0 <time_get_weeknumber+0x2a>

	int16_t year_number;
	    
	// Set DayofYear Number for yyyy mm dd
	day_of_year_number = dd + mnth[mm-1];
    96b8:	f6 01       	movw	r30, r12
    96ba:	31 97       	sbiw	r30, 0x01	; 1
    96bc:	ee 0f       	add	r30, r30
    96be:	ff 1f       	adc	r31, r31
    96c0:	21 e0       	ldi	r18, 0x01	; 1
    96c2:	30 e0       	ldi	r19, 0x00	; 0
    96c4:	2c 0f       	add	r18, r28
    96c6:	3d 1f       	adc	r19, r29
    96c8:	e2 0f       	add	r30, r18
    96ca:	f3 1f       	adc	r31, r19
    96cc:	00 81       	ld	r16, Z
    96ce:	11 81       	ldd	r17, Z+1	; 0x01
    96d0:	08 0f       	add	r16, r24
    96d2:	11 1d       	adc	r17, r1

	// Increase of Dayof Year Number by 1, if year is leapyear and month is february
	if ((time_is_leap_year(yyyy) == true) && (mm == 2))
    96d4:	ca 01       	movw	r24, r20
    96d6:	a8 df       	rcall	.-176    	; 0x9628 <time_is_leap_year>
    96d8:	48 2f       	mov	r20, r24
    96da:	88 23       	and	r24, r24
    96dc:	31 f0       	breq	.+12     	; 0x96ea <time_get_weeknumber+0x64>
    96de:	32 e0       	ldi	r19, 0x02	; 2
    96e0:	c3 16       	cp	r12, r19
    96e2:	d1 04       	cpc	r13, r1
    96e4:	11 f4       	brne	.+4      	; 0x96ea <time_get_weeknumber+0x64>
	day_of_year_number += 1;
    96e6:	0f 5f       	subi	r16, 0xFF	; 255
    96e8:	1f 4f       	sbci	r17, 0xFF	; 255

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
    96ea:	51 e0       	ldi	r21, 0x01	; 1
    96ec:	e5 1a       	sub	r14, r21
    96ee:	f1 08       	sbc	r15, r1
    96f0:	e4 e6       	ldi	r30, 0x64	; 100
    96f2:	f0 e0       	ldi	r31, 0x00	; 0
    96f4:	c7 01       	movw	r24, r14
    96f6:	bf 01       	movw	r22, r30
    96f8:	55 d7       	rcall	.+3754   	; 0xa5a4 <__divmodhi4>
    96fa:	9c 01       	movw	r18, r24
	j = (yyyy - 1) - i;
    96fc:	c7 01       	movw	r24, r14
    96fe:	82 1b       	sub	r24, r18
    9700:	93 0b       	sbc	r25, r19
	k = i + i/4;
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    9702:	bf 01       	movw	r22, r30
    9704:	4f d7       	rcall	.+3742   	; 0xa5a4 <__divmodhi4>
    9706:	cb 01       	movw	r24, r22
    9708:	64 e0       	ldi	r22, 0x04	; 4
    970a:	70 e0       	ldi	r23, 0x00	; 0
    970c:	4b d7       	rcall	.+3734   	; 0xa5a4 <__divmodhi4>
    970e:	55 e0       	ldi	r21, 0x05	; 5
    9710:	58 9f       	mul	r21, r24
    9712:	b0 01       	movw	r22, r0
    9714:	59 9f       	mul	r21, r25
    9716:	70 0d       	add	r23, r0
    9718:	11 24       	eor	r1, r1
	day_of_year_number += 1;

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
	j = (yyyy - 1) - i;
	k = i + i/4;
    971a:	c9 01       	movw	r24, r18
    971c:	37 fd       	sbrc	r19, 7
    971e:	03 96       	adiw	r24, 0x03	; 3
    9720:	95 95       	asr	r25
    9722:	87 95       	ror	r24
    9724:	95 95       	asr	r25
    9726:	87 95       	ror	r24
    9728:	82 0f       	add	r24, r18
    972a:	93 1f       	adc	r25, r19
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    972c:	86 0f       	add	r24, r22
    972e:	97 1f       	adc	r25, r23
    9730:	27 e0       	ldi	r18, 0x07	; 7
    9732:	e2 2e       	mov	r14, r18
    9734:	f1 2c       	mov	r15, r1
    9736:	b7 01       	movw	r22, r14
    9738:	35 d7       	rcall	.+3690   	; 0xa5a4 <__divmodhi4>
    973a:	9c 01       	movw	r18, r24
    973c:	fc 01       	movw	r30, r24
    973e:	31 96       	adiw	r30, 0x01	; 1
	// Calcuate the WeekDay for the given date
	l = day_of_year_number + (jan_1_weekday - 1);
	weekday = 1 + ((l - 1) % 7);

	// Find if the date falls in YearNumber set WeekNumber to 52 or 53
	if ((day_of_year_number <= (8 - jan_1_weekday)) && (jan_1_weekday > 4))
    9740:	e8 1a       	sub	r14, r24
    9742:	f9 0a       	sbc	r15, r25
    9744:	e0 16       	cp	r14, r16
    9746:	f1 06       	cpc	r15, r17
    9748:	5c f0       	brlt	.+22     	; 0x9760 <time_get_weeknumber+0xda>
    974a:	e5 30       	cpi	r30, 0x05	; 5
    974c:	f1 05       	cpc	r31, r1
    974e:	44 f0       	brlt	.+16     	; 0x9760 <time_get_weeknumber+0xda>
	{
		year_number = yyyy - 1;
		if ((jan_1_weekday == 5) || ((jan_1_weekday == 6) && (jan_1_weekday > 4)))
    9750:	37 97       	sbiw	r30, 0x07	; 7
    9752:	19 f4       	brne	.+6      	; 0x975a <time_get_weeknumber+0xd4>
		week_number = 53;
		else
		week_number = 52;
    9754:	84 e3       	ldi	r24, 0x34	; 52
    9756:	90 e0       	ldi	r25, 0x00	; 0
    9758:	30 c0       	rjmp	.+96     	; 0x97ba <time_get_weeknumber+0x134>
	// Find if the date falls in YearNumber set WeekNumber to 52 or 53
	if ((day_of_year_number <= (8 - jan_1_weekday)) && (jan_1_weekday > 4))
	{
		year_number = yyyy - 1;
		if ((jan_1_weekday == 5) || ((jan_1_weekday == 6) && (jan_1_weekday > 4)))
		week_number = 53;
    975a:	85 e3       	ldi	r24, 0x35	; 53
    975c:	90 e0       	ldi	r25, 0x00	; 0
    975e:	2d c0       	rjmp	.+90     	; 0x97ba <time_get_weeknumber+0x134>
	year_number = yyyy;
	    
	// Set WeekNumber to 1 to 53 if date falls in YearNumber
	if (year_number == yyyy)
	{
		if (time_is_leap_year(yyyy)==true)
    9760:	44 23       	and	r20, r20
    9762:	29 f0       	breq	.+10     	; 0x976e <time_get_weeknumber+0xe8>
		m = 366;
    9764:	ae e6       	ldi	r26, 0x6E	; 110
    9766:	ca 2e       	mov	r12, r26
    9768:	dd 24       	eor	r13, r13
    976a:	d3 94       	inc	r13
    976c:	04 c0       	rjmp	.+8      	; 0x9776 <time_get_weeknumber+0xf0>
		else
		m = 365;
    976e:	7d e6       	ldi	r23, 0x6D	; 109
    9770:	c7 2e       	mov	r12, r23
    9772:	dd 24       	eor	r13, r13
    9774:	d3 94       	inc	r13
	j = (yyyy - 1) - i;
	k = i + i/4;
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);

	// Calcuate the WeekDay for the given date
	l = day_of_year_number + (jan_1_weekday - 1);
    9776:	c8 01       	movw	r24, r16
    9778:	82 0f       	add	r24, r18
    977a:	93 1f       	adc	r25, r19
	weekday = 1 + ((l - 1) % 7);
    977c:	01 97       	sbiw	r24, 0x01	; 1
    977e:	67 e0       	ldi	r22, 0x07	; 7
    9780:	e6 2e       	mov	r14, r22
    9782:	f1 2c       	mov	r15, r1
    9784:	b7 01       	movw	r22, r14
    9786:	0e d7       	rcall	.+3612   	; 0xa5a4 <__divmodhi4>
	{
		if (time_is_leap_year(yyyy)==true)
		m = 366;
		else
		m = 365;
		if ((m - day_of_year_number) < (4-weekday))
    9788:	c0 1a       	sub	r12, r16
    978a:	d1 0a       	sbc	r13, r17
    978c:	43 e0       	ldi	r20, 0x03	; 3
    978e:	50 e0       	ldi	r21, 0x00	; 0
    9790:	48 1b       	sub	r20, r24
    9792:	59 0b       	sbc	r21, r25
    9794:	c4 16       	cp	r12, r20
    9796:	d5 06       	cpc	r13, r21
    9798:	74 f0       	brlt	.+28     	; 0x97b6 <time_get_weeknumber+0x130>
			week_number = 1;
		}
	}
	    
	if (year_number==yyyy) {
		n = day_of_year_number + (7 - weekday) + (jan_1_weekday -1);
    979a:	a8 01       	movw	r20, r16
    979c:	48 1b       	sub	r20, r24
    979e:	59 0b       	sbc	r21, r25
    97a0:	ca 01       	movw	r24, r20
    97a2:	06 96       	adiw	r24, 0x06	; 6
    97a4:	82 0f       	add	r24, r18
    97a6:	93 1f       	adc	r25, r19
		week_number = n / 7;
    97a8:	b7 01       	movw	r22, r14
    97aa:	fc d6       	rcall	.+3576   	; 0xa5a4 <__divmodhi4>
    97ac:	cb 01       	movw	r24, r22
		if (jan_1_weekday > 4)
    97ae:	35 97       	sbiw	r30, 0x05	; 5
    97b0:	24 f0       	brlt	.+8      	; 0x97ba <time_get_weeknumber+0x134>
		week_number -= 1;
    97b2:	01 97       	sbiw	r24, 0x01	; 1
    97b4:	02 c0       	rjmp	.+4      	; 0x97ba <time_get_weeknumber+0x134>
		else
		m = 365;
		if ((m - day_of_year_number) < (4-weekday))
		{
			year_number = yyyy + 1;
			week_number = 1;
    97b6:	81 e0       	ldi	r24, 0x01	; 1
    97b8:	90 e0       	ldi	r25, 0x00	; 0
		if (jan_1_weekday > 4)
		week_number -= 1;
	}

	return (week_number);
}
    97ba:	68 96       	adiw	r28, 0x18	; 24
    97bc:	cd bf       	out	0x3d, r28	; 61
    97be:	de bf       	out	0x3e, r29	; 62
    97c0:	df 91       	pop	r29
    97c2:	cf 91       	pop	r28
    97c4:	1f 91       	pop	r17
    97c6:	0f 91       	pop	r16
    97c8:	ff 90       	pop	r15
    97ca:	ef 90       	pop	r14
    97cc:	df 90       	pop	r13
    97ce:	cf 90       	pop	r12
    97d0:	08 95       	ret

000097d2 <__subsf3>:
    97d2:	50 58       	subi	r21, 0x80	; 128

000097d4 <__addsf3>:
    97d4:	bb 27       	eor	r27, r27
    97d6:	aa 27       	eor	r26, r26
    97d8:	0e d0       	rcall	.+28     	; 0x97f6 <__addsf3x>
    97da:	4d c1       	rjmp	.+666    	; 0x9a76 <__fp_round>
    97dc:	3e d1       	rcall	.+636    	; 0x9a5a <__fp_pscA>
    97de:	30 f0       	brcs	.+12     	; 0x97ec <__addsf3+0x18>
    97e0:	43 d1       	rcall	.+646    	; 0x9a68 <__fp_pscB>
    97e2:	20 f0       	brcs	.+8      	; 0x97ec <__addsf3+0x18>
    97e4:	31 f4       	brne	.+12     	; 0x97f2 <__addsf3+0x1e>
    97e6:	9f 3f       	cpi	r25, 0xFF	; 255
    97e8:	11 f4       	brne	.+4      	; 0x97ee <__addsf3+0x1a>
    97ea:	1e f4       	brtc	.+6      	; 0x97f2 <__addsf3+0x1e>
    97ec:	33 c1       	rjmp	.+614    	; 0x9a54 <__fp_nan>
    97ee:	0e f4       	brtc	.+2      	; 0x97f2 <__addsf3+0x1e>
    97f0:	e0 95       	com	r30
    97f2:	e7 fb       	bst	r30, 7
    97f4:	29 c1       	rjmp	.+594    	; 0x9a48 <__fp_inf>

000097f6 <__addsf3x>:
    97f6:	e9 2f       	mov	r30, r25
    97f8:	4f d1       	rcall	.+670    	; 0x9a98 <__fp_split3>
    97fa:	80 f3       	brcs	.-32     	; 0x97dc <__addsf3+0x8>
    97fc:	ba 17       	cp	r27, r26
    97fe:	62 07       	cpc	r22, r18
    9800:	73 07       	cpc	r23, r19
    9802:	84 07       	cpc	r24, r20
    9804:	95 07       	cpc	r25, r21
    9806:	18 f0       	brcs	.+6      	; 0x980e <__addsf3x+0x18>
    9808:	71 f4       	brne	.+28     	; 0x9826 <__addsf3x+0x30>
    980a:	9e f5       	brtc	.+102    	; 0x9872 <__addsf3x+0x7c>
    980c:	67 c1       	rjmp	.+718    	; 0x9adc <__fp_zero>
    980e:	0e f4       	brtc	.+2      	; 0x9812 <__addsf3x+0x1c>
    9810:	e0 95       	com	r30
    9812:	0b 2e       	mov	r0, r27
    9814:	ba 2f       	mov	r27, r26
    9816:	a0 2d       	mov	r26, r0
    9818:	0b 01       	movw	r0, r22
    981a:	b9 01       	movw	r22, r18
    981c:	90 01       	movw	r18, r0
    981e:	0c 01       	movw	r0, r24
    9820:	ca 01       	movw	r24, r20
    9822:	a0 01       	movw	r20, r0
    9824:	11 24       	eor	r1, r1
    9826:	ff 27       	eor	r31, r31
    9828:	59 1b       	sub	r21, r25
    982a:	99 f0       	breq	.+38     	; 0x9852 <__addsf3x+0x5c>
    982c:	59 3f       	cpi	r21, 0xF9	; 249
    982e:	50 f4       	brcc	.+20     	; 0x9844 <__addsf3x+0x4e>
    9830:	50 3e       	cpi	r21, 0xE0	; 224
    9832:	68 f1       	brcs	.+90     	; 0x988e <__addsf3x+0x98>
    9834:	1a 16       	cp	r1, r26
    9836:	f0 40       	sbci	r31, 0x00	; 0
    9838:	a2 2f       	mov	r26, r18
    983a:	23 2f       	mov	r18, r19
    983c:	34 2f       	mov	r19, r20
    983e:	44 27       	eor	r20, r20
    9840:	58 5f       	subi	r21, 0xF8	; 248
    9842:	f3 cf       	rjmp	.-26     	; 0x982a <__addsf3x+0x34>
    9844:	46 95       	lsr	r20
    9846:	37 95       	ror	r19
    9848:	27 95       	ror	r18
    984a:	a7 95       	ror	r26
    984c:	f0 40       	sbci	r31, 0x00	; 0
    984e:	53 95       	inc	r21
    9850:	c9 f7       	brne	.-14     	; 0x9844 <__addsf3x+0x4e>
    9852:	7e f4       	brtc	.+30     	; 0x9872 <__addsf3x+0x7c>
    9854:	1f 16       	cp	r1, r31
    9856:	ba 0b       	sbc	r27, r26
    9858:	62 0b       	sbc	r22, r18
    985a:	73 0b       	sbc	r23, r19
    985c:	84 0b       	sbc	r24, r20
    985e:	ba f0       	brmi	.+46     	; 0x988e <__addsf3x+0x98>
    9860:	91 50       	subi	r25, 0x01	; 1
    9862:	a1 f0       	breq	.+40     	; 0x988c <__addsf3x+0x96>
    9864:	ff 0f       	add	r31, r31
    9866:	bb 1f       	adc	r27, r27
    9868:	66 1f       	adc	r22, r22
    986a:	77 1f       	adc	r23, r23
    986c:	88 1f       	adc	r24, r24
    986e:	c2 f7       	brpl	.-16     	; 0x9860 <__addsf3x+0x6a>
    9870:	0e c0       	rjmp	.+28     	; 0x988e <__addsf3x+0x98>
    9872:	ba 0f       	add	r27, r26
    9874:	62 1f       	adc	r22, r18
    9876:	73 1f       	adc	r23, r19
    9878:	84 1f       	adc	r24, r20
    987a:	48 f4       	brcc	.+18     	; 0x988e <__addsf3x+0x98>
    987c:	87 95       	ror	r24
    987e:	77 95       	ror	r23
    9880:	67 95       	ror	r22
    9882:	b7 95       	ror	r27
    9884:	f7 95       	ror	r31
    9886:	9e 3f       	cpi	r25, 0xFE	; 254
    9888:	08 f0       	brcs	.+2      	; 0x988c <__addsf3x+0x96>
    988a:	b3 cf       	rjmp	.-154    	; 0x97f2 <__addsf3+0x1e>
    988c:	93 95       	inc	r25
    988e:	88 0f       	add	r24, r24
    9890:	08 f0       	brcs	.+2      	; 0x9894 <__addsf3x+0x9e>
    9892:	99 27       	eor	r25, r25
    9894:	ee 0f       	add	r30, r30
    9896:	97 95       	ror	r25
    9898:	87 95       	ror	r24
    989a:	08 95       	ret

0000989c <__divsf3>:
    989c:	0c d0       	rcall	.+24     	; 0x98b6 <__divsf3x>
    989e:	eb c0       	rjmp	.+470    	; 0x9a76 <__fp_round>
    98a0:	e3 d0       	rcall	.+454    	; 0x9a68 <__fp_pscB>
    98a2:	40 f0       	brcs	.+16     	; 0x98b4 <__divsf3+0x18>
    98a4:	da d0       	rcall	.+436    	; 0x9a5a <__fp_pscA>
    98a6:	30 f0       	brcs	.+12     	; 0x98b4 <__divsf3+0x18>
    98a8:	21 f4       	brne	.+8      	; 0x98b2 <__divsf3+0x16>
    98aa:	5f 3f       	cpi	r21, 0xFF	; 255
    98ac:	19 f0       	breq	.+6      	; 0x98b4 <__divsf3+0x18>
    98ae:	cc c0       	rjmp	.+408    	; 0x9a48 <__fp_inf>
    98b0:	51 11       	cpse	r21, r1
    98b2:	15 c1       	rjmp	.+554    	; 0x9ade <__fp_szero>
    98b4:	cf c0       	rjmp	.+414    	; 0x9a54 <__fp_nan>

000098b6 <__divsf3x>:
    98b6:	f0 d0       	rcall	.+480    	; 0x9a98 <__fp_split3>
    98b8:	98 f3       	brcs	.-26     	; 0x98a0 <__divsf3+0x4>

000098ba <__divsf3_pse>:
    98ba:	99 23       	and	r25, r25
    98bc:	c9 f3       	breq	.-14     	; 0x98b0 <__divsf3+0x14>
    98be:	55 23       	and	r21, r21
    98c0:	b1 f3       	breq	.-20     	; 0x98ae <__divsf3+0x12>
    98c2:	95 1b       	sub	r25, r21
    98c4:	55 0b       	sbc	r21, r21
    98c6:	bb 27       	eor	r27, r27
    98c8:	aa 27       	eor	r26, r26
    98ca:	62 17       	cp	r22, r18
    98cc:	73 07       	cpc	r23, r19
    98ce:	84 07       	cpc	r24, r20
    98d0:	38 f0       	brcs	.+14     	; 0x98e0 <__divsf3_pse+0x26>
    98d2:	9f 5f       	subi	r25, 0xFF	; 255
    98d4:	5f 4f       	sbci	r21, 0xFF	; 255
    98d6:	22 0f       	add	r18, r18
    98d8:	33 1f       	adc	r19, r19
    98da:	44 1f       	adc	r20, r20
    98dc:	aa 1f       	adc	r26, r26
    98de:	a9 f3       	breq	.-22     	; 0x98ca <__divsf3_pse+0x10>
    98e0:	33 d0       	rcall	.+102    	; 0x9948 <__divsf3_pse+0x8e>
    98e2:	0e 2e       	mov	r0, r30
    98e4:	3a f0       	brmi	.+14     	; 0x98f4 <__divsf3_pse+0x3a>
    98e6:	e0 e8       	ldi	r30, 0x80	; 128
    98e8:	30 d0       	rcall	.+96     	; 0x994a <__divsf3_pse+0x90>
    98ea:	91 50       	subi	r25, 0x01	; 1
    98ec:	50 40       	sbci	r21, 0x00	; 0
    98ee:	e6 95       	lsr	r30
    98f0:	00 1c       	adc	r0, r0
    98f2:	ca f7       	brpl	.-14     	; 0x98e6 <__divsf3_pse+0x2c>
    98f4:	29 d0       	rcall	.+82     	; 0x9948 <__divsf3_pse+0x8e>
    98f6:	fe 2f       	mov	r31, r30
    98f8:	27 d0       	rcall	.+78     	; 0x9948 <__divsf3_pse+0x8e>
    98fa:	66 0f       	add	r22, r22
    98fc:	77 1f       	adc	r23, r23
    98fe:	88 1f       	adc	r24, r24
    9900:	bb 1f       	adc	r27, r27
    9902:	26 17       	cp	r18, r22
    9904:	37 07       	cpc	r19, r23
    9906:	48 07       	cpc	r20, r24
    9908:	ab 07       	cpc	r26, r27
    990a:	b0 e8       	ldi	r27, 0x80	; 128
    990c:	09 f0       	breq	.+2      	; 0x9910 <__divsf3_pse+0x56>
    990e:	bb 0b       	sbc	r27, r27
    9910:	80 2d       	mov	r24, r0
    9912:	bf 01       	movw	r22, r30
    9914:	ff 27       	eor	r31, r31
    9916:	93 58       	subi	r25, 0x83	; 131
    9918:	5f 4f       	sbci	r21, 0xFF	; 255
    991a:	2a f0       	brmi	.+10     	; 0x9926 <__divsf3_pse+0x6c>
    991c:	9e 3f       	cpi	r25, 0xFE	; 254
    991e:	51 05       	cpc	r21, r1
    9920:	68 f0       	brcs	.+26     	; 0x993c <__divsf3_pse+0x82>
    9922:	92 c0       	rjmp	.+292    	; 0x9a48 <__fp_inf>
    9924:	dc c0       	rjmp	.+440    	; 0x9ade <__fp_szero>
    9926:	5f 3f       	cpi	r21, 0xFF	; 255
    9928:	ec f3       	brlt	.-6      	; 0x9924 <__divsf3_pse+0x6a>
    992a:	98 3e       	cpi	r25, 0xE8	; 232
    992c:	dc f3       	brlt	.-10     	; 0x9924 <__divsf3_pse+0x6a>
    992e:	86 95       	lsr	r24
    9930:	77 95       	ror	r23
    9932:	67 95       	ror	r22
    9934:	b7 95       	ror	r27
    9936:	f7 95       	ror	r31
    9938:	9f 5f       	subi	r25, 0xFF	; 255
    993a:	c9 f7       	brne	.-14     	; 0x992e <__divsf3_pse+0x74>
    993c:	88 0f       	add	r24, r24
    993e:	91 1d       	adc	r25, r1
    9940:	96 95       	lsr	r25
    9942:	87 95       	ror	r24
    9944:	97 f9       	bld	r25, 7
    9946:	08 95       	ret
    9948:	e1 e0       	ldi	r30, 0x01	; 1
    994a:	66 0f       	add	r22, r22
    994c:	77 1f       	adc	r23, r23
    994e:	88 1f       	adc	r24, r24
    9950:	bb 1f       	adc	r27, r27
    9952:	62 17       	cp	r22, r18
    9954:	73 07       	cpc	r23, r19
    9956:	84 07       	cpc	r24, r20
    9958:	ba 07       	cpc	r27, r26
    995a:	20 f0       	brcs	.+8      	; 0x9964 <__divsf3_pse+0xaa>
    995c:	62 1b       	sub	r22, r18
    995e:	73 0b       	sbc	r23, r19
    9960:	84 0b       	sbc	r24, r20
    9962:	ba 0b       	sbc	r27, r26
    9964:	ee 1f       	adc	r30, r30
    9966:	88 f7       	brcc	.-30     	; 0x994a <__divsf3_pse+0x90>
    9968:	e0 95       	com	r30
    996a:	08 95       	ret

0000996c <__fixsfsi>:
    996c:	04 d0       	rcall	.+8      	; 0x9976 <__fixunssfsi>
    996e:	68 94       	set
    9970:	b1 11       	cpse	r27, r1
    9972:	b5 c0       	rjmp	.+362    	; 0x9ade <__fp_szero>
    9974:	08 95       	ret

00009976 <__fixunssfsi>:
    9976:	98 d0       	rcall	.+304    	; 0x9aa8 <__fp_splitA>
    9978:	88 f0       	brcs	.+34     	; 0x999c <__fixunssfsi+0x26>
    997a:	9f 57       	subi	r25, 0x7F	; 127
    997c:	90 f0       	brcs	.+36     	; 0x99a2 <__fixunssfsi+0x2c>
    997e:	b9 2f       	mov	r27, r25
    9980:	99 27       	eor	r25, r25
    9982:	b7 51       	subi	r27, 0x17	; 23
    9984:	a0 f0       	brcs	.+40     	; 0x99ae <__fixunssfsi+0x38>
    9986:	d1 f0       	breq	.+52     	; 0x99bc <__fixunssfsi+0x46>
    9988:	66 0f       	add	r22, r22
    998a:	77 1f       	adc	r23, r23
    998c:	88 1f       	adc	r24, r24
    998e:	99 1f       	adc	r25, r25
    9990:	1a f0       	brmi	.+6      	; 0x9998 <__fixunssfsi+0x22>
    9992:	ba 95       	dec	r27
    9994:	c9 f7       	brne	.-14     	; 0x9988 <__fixunssfsi+0x12>
    9996:	12 c0       	rjmp	.+36     	; 0x99bc <__fixunssfsi+0x46>
    9998:	b1 30       	cpi	r27, 0x01	; 1
    999a:	81 f0       	breq	.+32     	; 0x99bc <__fixunssfsi+0x46>
    999c:	9f d0       	rcall	.+318    	; 0x9adc <__fp_zero>
    999e:	b1 e0       	ldi	r27, 0x01	; 1
    99a0:	08 95       	ret
    99a2:	9c c0       	rjmp	.+312    	; 0x9adc <__fp_zero>
    99a4:	67 2f       	mov	r22, r23
    99a6:	78 2f       	mov	r23, r24
    99a8:	88 27       	eor	r24, r24
    99aa:	b8 5f       	subi	r27, 0xF8	; 248
    99ac:	39 f0       	breq	.+14     	; 0x99bc <__fixunssfsi+0x46>
    99ae:	b9 3f       	cpi	r27, 0xF9	; 249
    99b0:	cc f3       	brlt	.-14     	; 0x99a4 <__fixunssfsi+0x2e>
    99b2:	86 95       	lsr	r24
    99b4:	77 95       	ror	r23
    99b6:	67 95       	ror	r22
    99b8:	b3 95       	inc	r27
    99ba:	d9 f7       	brne	.-10     	; 0x99b2 <__fixunssfsi+0x3c>
    99bc:	3e f4       	brtc	.+14     	; 0x99cc <__fixunssfsi+0x56>
    99be:	90 95       	com	r25
    99c0:	80 95       	com	r24
    99c2:	70 95       	com	r23
    99c4:	61 95       	neg	r22
    99c6:	7f 4f       	sbci	r23, 0xFF	; 255
    99c8:	8f 4f       	sbci	r24, 0xFF	; 255
    99ca:	9f 4f       	sbci	r25, 0xFF	; 255
    99cc:	08 95       	ret

000099ce <__floatunsisf>:
    99ce:	e8 94       	clt
    99d0:	09 c0       	rjmp	.+18     	; 0x99e4 <__floatsisf+0x12>

000099d2 <__floatsisf>:
    99d2:	97 fb       	bst	r25, 7
    99d4:	3e f4       	brtc	.+14     	; 0x99e4 <__floatsisf+0x12>
    99d6:	90 95       	com	r25
    99d8:	80 95       	com	r24
    99da:	70 95       	com	r23
    99dc:	61 95       	neg	r22
    99de:	7f 4f       	sbci	r23, 0xFF	; 255
    99e0:	8f 4f       	sbci	r24, 0xFF	; 255
    99e2:	9f 4f       	sbci	r25, 0xFF	; 255
    99e4:	99 23       	and	r25, r25
    99e6:	a9 f0       	breq	.+42     	; 0x9a12 <__floatsisf+0x40>
    99e8:	f9 2f       	mov	r31, r25
    99ea:	96 e9       	ldi	r25, 0x96	; 150
    99ec:	bb 27       	eor	r27, r27
    99ee:	93 95       	inc	r25
    99f0:	f6 95       	lsr	r31
    99f2:	87 95       	ror	r24
    99f4:	77 95       	ror	r23
    99f6:	67 95       	ror	r22
    99f8:	b7 95       	ror	r27
    99fa:	f1 11       	cpse	r31, r1
    99fc:	f8 cf       	rjmp	.-16     	; 0x99ee <__floatsisf+0x1c>
    99fe:	fa f4       	brpl	.+62     	; 0x9a3e <__floatsisf+0x6c>
    9a00:	bb 0f       	add	r27, r27
    9a02:	11 f4       	brne	.+4      	; 0x9a08 <__floatsisf+0x36>
    9a04:	60 ff       	sbrs	r22, 0
    9a06:	1b c0       	rjmp	.+54     	; 0x9a3e <__floatsisf+0x6c>
    9a08:	6f 5f       	subi	r22, 0xFF	; 255
    9a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    9a0c:	8f 4f       	sbci	r24, 0xFF	; 255
    9a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    9a10:	16 c0       	rjmp	.+44     	; 0x9a3e <__floatsisf+0x6c>
    9a12:	88 23       	and	r24, r24
    9a14:	11 f0       	breq	.+4      	; 0x9a1a <__floatsisf+0x48>
    9a16:	96 e9       	ldi	r25, 0x96	; 150
    9a18:	11 c0       	rjmp	.+34     	; 0x9a3c <__floatsisf+0x6a>
    9a1a:	77 23       	and	r23, r23
    9a1c:	21 f0       	breq	.+8      	; 0x9a26 <__floatsisf+0x54>
    9a1e:	9e e8       	ldi	r25, 0x8E	; 142
    9a20:	87 2f       	mov	r24, r23
    9a22:	76 2f       	mov	r23, r22
    9a24:	05 c0       	rjmp	.+10     	; 0x9a30 <__floatsisf+0x5e>
    9a26:	66 23       	and	r22, r22
    9a28:	71 f0       	breq	.+28     	; 0x9a46 <__floatsisf+0x74>
    9a2a:	96 e8       	ldi	r25, 0x86	; 134
    9a2c:	86 2f       	mov	r24, r22
    9a2e:	70 e0       	ldi	r23, 0x00	; 0
    9a30:	60 e0       	ldi	r22, 0x00	; 0
    9a32:	2a f0       	brmi	.+10     	; 0x9a3e <__floatsisf+0x6c>
    9a34:	9a 95       	dec	r25
    9a36:	66 0f       	add	r22, r22
    9a38:	77 1f       	adc	r23, r23
    9a3a:	88 1f       	adc	r24, r24
    9a3c:	da f7       	brpl	.-10     	; 0x9a34 <__floatsisf+0x62>
    9a3e:	88 0f       	add	r24, r24
    9a40:	96 95       	lsr	r25
    9a42:	87 95       	ror	r24
    9a44:	97 f9       	bld	r25, 7
    9a46:	08 95       	ret

00009a48 <__fp_inf>:
    9a48:	97 f9       	bld	r25, 7
    9a4a:	9f 67       	ori	r25, 0x7F	; 127
    9a4c:	80 e8       	ldi	r24, 0x80	; 128
    9a4e:	70 e0       	ldi	r23, 0x00	; 0
    9a50:	60 e0       	ldi	r22, 0x00	; 0
    9a52:	08 95       	ret

00009a54 <__fp_nan>:
    9a54:	9f ef       	ldi	r25, 0xFF	; 255
    9a56:	80 ec       	ldi	r24, 0xC0	; 192
    9a58:	08 95       	ret

00009a5a <__fp_pscA>:
    9a5a:	00 24       	eor	r0, r0
    9a5c:	0a 94       	dec	r0
    9a5e:	16 16       	cp	r1, r22
    9a60:	17 06       	cpc	r1, r23
    9a62:	18 06       	cpc	r1, r24
    9a64:	09 06       	cpc	r0, r25
    9a66:	08 95       	ret

00009a68 <__fp_pscB>:
    9a68:	00 24       	eor	r0, r0
    9a6a:	0a 94       	dec	r0
    9a6c:	12 16       	cp	r1, r18
    9a6e:	13 06       	cpc	r1, r19
    9a70:	14 06       	cpc	r1, r20
    9a72:	05 06       	cpc	r0, r21
    9a74:	08 95       	ret

00009a76 <__fp_round>:
    9a76:	09 2e       	mov	r0, r25
    9a78:	03 94       	inc	r0
    9a7a:	00 0c       	add	r0, r0
    9a7c:	11 f4       	brne	.+4      	; 0x9a82 <__fp_round+0xc>
    9a7e:	88 23       	and	r24, r24
    9a80:	52 f0       	brmi	.+20     	; 0x9a96 <__fp_round+0x20>
    9a82:	bb 0f       	add	r27, r27
    9a84:	40 f4       	brcc	.+16     	; 0x9a96 <__fp_round+0x20>
    9a86:	bf 2b       	or	r27, r31
    9a88:	11 f4       	brne	.+4      	; 0x9a8e <__fp_round+0x18>
    9a8a:	60 ff       	sbrs	r22, 0
    9a8c:	04 c0       	rjmp	.+8      	; 0x9a96 <__fp_round+0x20>
    9a8e:	6f 5f       	subi	r22, 0xFF	; 255
    9a90:	7f 4f       	sbci	r23, 0xFF	; 255
    9a92:	8f 4f       	sbci	r24, 0xFF	; 255
    9a94:	9f 4f       	sbci	r25, 0xFF	; 255
    9a96:	08 95       	ret

00009a98 <__fp_split3>:
    9a98:	57 fd       	sbrc	r21, 7
    9a9a:	90 58       	subi	r25, 0x80	; 128
    9a9c:	44 0f       	add	r20, r20
    9a9e:	55 1f       	adc	r21, r21
    9aa0:	59 f0       	breq	.+22     	; 0x9ab8 <__fp_splitA+0x10>
    9aa2:	5f 3f       	cpi	r21, 0xFF	; 255
    9aa4:	71 f0       	breq	.+28     	; 0x9ac2 <__fp_splitA+0x1a>
    9aa6:	47 95       	ror	r20

00009aa8 <__fp_splitA>:
    9aa8:	88 0f       	add	r24, r24
    9aaa:	97 fb       	bst	r25, 7
    9aac:	99 1f       	adc	r25, r25
    9aae:	61 f0       	breq	.+24     	; 0x9ac8 <__fp_splitA+0x20>
    9ab0:	9f 3f       	cpi	r25, 0xFF	; 255
    9ab2:	79 f0       	breq	.+30     	; 0x9ad2 <__fp_splitA+0x2a>
    9ab4:	87 95       	ror	r24
    9ab6:	08 95       	ret
    9ab8:	12 16       	cp	r1, r18
    9aba:	13 06       	cpc	r1, r19
    9abc:	14 06       	cpc	r1, r20
    9abe:	55 1f       	adc	r21, r21
    9ac0:	f2 cf       	rjmp	.-28     	; 0x9aa6 <__fp_split3+0xe>
    9ac2:	46 95       	lsr	r20
    9ac4:	f1 df       	rcall	.-30     	; 0x9aa8 <__fp_splitA>
    9ac6:	08 c0       	rjmp	.+16     	; 0x9ad8 <__fp_splitA+0x30>
    9ac8:	16 16       	cp	r1, r22
    9aca:	17 06       	cpc	r1, r23
    9acc:	18 06       	cpc	r1, r24
    9ace:	99 1f       	adc	r25, r25
    9ad0:	f1 cf       	rjmp	.-30     	; 0x9ab4 <__fp_splitA+0xc>
    9ad2:	86 95       	lsr	r24
    9ad4:	71 05       	cpc	r23, r1
    9ad6:	61 05       	cpc	r22, r1
    9ad8:	08 94       	sec
    9ada:	08 95       	ret

00009adc <__fp_zero>:
    9adc:	e8 94       	clt

00009ade <__fp_szero>:
    9ade:	bb 27       	eor	r27, r27
    9ae0:	66 27       	eor	r22, r22
    9ae2:	77 27       	eor	r23, r23
    9ae4:	cb 01       	movw	r24, r22
    9ae6:	97 f9       	bld	r25, 7
    9ae8:	08 95       	ret

00009aea <__mulsf3>:
    9aea:	0b d0       	rcall	.+22     	; 0x9b02 <__mulsf3x>
    9aec:	c4 cf       	rjmp	.-120    	; 0x9a76 <__fp_round>
    9aee:	b5 df       	rcall	.-150    	; 0x9a5a <__fp_pscA>
    9af0:	28 f0       	brcs	.+10     	; 0x9afc <__mulsf3+0x12>
    9af2:	ba df       	rcall	.-140    	; 0x9a68 <__fp_pscB>
    9af4:	18 f0       	brcs	.+6      	; 0x9afc <__mulsf3+0x12>
    9af6:	95 23       	and	r25, r21
    9af8:	09 f0       	breq	.+2      	; 0x9afc <__mulsf3+0x12>
    9afa:	a6 cf       	rjmp	.-180    	; 0x9a48 <__fp_inf>
    9afc:	ab cf       	rjmp	.-170    	; 0x9a54 <__fp_nan>
    9afe:	11 24       	eor	r1, r1
    9b00:	ee cf       	rjmp	.-36     	; 0x9ade <__fp_szero>

00009b02 <__mulsf3x>:
    9b02:	ca df       	rcall	.-108    	; 0x9a98 <__fp_split3>
    9b04:	a0 f3       	brcs	.-24     	; 0x9aee <__mulsf3+0x4>

00009b06 <__mulsf3_pse>:
    9b06:	95 9f       	mul	r25, r21
    9b08:	d1 f3       	breq	.-12     	; 0x9afe <__mulsf3+0x14>
    9b0a:	95 0f       	add	r25, r21
    9b0c:	50 e0       	ldi	r21, 0x00	; 0
    9b0e:	55 1f       	adc	r21, r21
    9b10:	62 9f       	mul	r22, r18
    9b12:	f0 01       	movw	r30, r0
    9b14:	72 9f       	mul	r23, r18
    9b16:	bb 27       	eor	r27, r27
    9b18:	f0 0d       	add	r31, r0
    9b1a:	b1 1d       	adc	r27, r1
    9b1c:	63 9f       	mul	r22, r19
    9b1e:	aa 27       	eor	r26, r26
    9b20:	f0 0d       	add	r31, r0
    9b22:	b1 1d       	adc	r27, r1
    9b24:	aa 1f       	adc	r26, r26
    9b26:	64 9f       	mul	r22, r20
    9b28:	66 27       	eor	r22, r22
    9b2a:	b0 0d       	add	r27, r0
    9b2c:	a1 1d       	adc	r26, r1
    9b2e:	66 1f       	adc	r22, r22
    9b30:	82 9f       	mul	r24, r18
    9b32:	22 27       	eor	r18, r18
    9b34:	b0 0d       	add	r27, r0
    9b36:	a1 1d       	adc	r26, r1
    9b38:	62 1f       	adc	r22, r18
    9b3a:	73 9f       	mul	r23, r19
    9b3c:	b0 0d       	add	r27, r0
    9b3e:	a1 1d       	adc	r26, r1
    9b40:	62 1f       	adc	r22, r18
    9b42:	83 9f       	mul	r24, r19
    9b44:	a0 0d       	add	r26, r0
    9b46:	61 1d       	adc	r22, r1
    9b48:	22 1f       	adc	r18, r18
    9b4a:	74 9f       	mul	r23, r20
    9b4c:	33 27       	eor	r19, r19
    9b4e:	a0 0d       	add	r26, r0
    9b50:	61 1d       	adc	r22, r1
    9b52:	23 1f       	adc	r18, r19
    9b54:	84 9f       	mul	r24, r20
    9b56:	60 0d       	add	r22, r0
    9b58:	21 1d       	adc	r18, r1
    9b5a:	82 2f       	mov	r24, r18
    9b5c:	76 2f       	mov	r23, r22
    9b5e:	6a 2f       	mov	r22, r26
    9b60:	11 24       	eor	r1, r1
    9b62:	9f 57       	subi	r25, 0x7F	; 127
    9b64:	50 40       	sbci	r21, 0x00	; 0
    9b66:	8a f0       	brmi	.+34     	; 0x9b8a <__mulsf3_pse+0x84>
    9b68:	e1 f0       	breq	.+56     	; 0x9ba2 <__mulsf3_pse+0x9c>
    9b6a:	88 23       	and	r24, r24
    9b6c:	4a f0       	brmi	.+18     	; 0x9b80 <__mulsf3_pse+0x7a>
    9b6e:	ee 0f       	add	r30, r30
    9b70:	ff 1f       	adc	r31, r31
    9b72:	bb 1f       	adc	r27, r27
    9b74:	66 1f       	adc	r22, r22
    9b76:	77 1f       	adc	r23, r23
    9b78:	88 1f       	adc	r24, r24
    9b7a:	91 50       	subi	r25, 0x01	; 1
    9b7c:	50 40       	sbci	r21, 0x00	; 0
    9b7e:	a9 f7       	brne	.-22     	; 0x9b6a <__mulsf3_pse+0x64>
    9b80:	9e 3f       	cpi	r25, 0xFE	; 254
    9b82:	51 05       	cpc	r21, r1
    9b84:	70 f0       	brcs	.+28     	; 0x9ba2 <__mulsf3_pse+0x9c>
    9b86:	60 cf       	rjmp	.-320    	; 0x9a48 <__fp_inf>
    9b88:	aa cf       	rjmp	.-172    	; 0x9ade <__fp_szero>
    9b8a:	5f 3f       	cpi	r21, 0xFF	; 255
    9b8c:	ec f3       	brlt	.-6      	; 0x9b88 <__mulsf3_pse+0x82>
    9b8e:	98 3e       	cpi	r25, 0xE8	; 232
    9b90:	dc f3       	brlt	.-10     	; 0x9b88 <__mulsf3_pse+0x82>
    9b92:	86 95       	lsr	r24
    9b94:	77 95       	ror	r23
    9b96:	67 95       	ror	r22
    9b98:	b7 95       	ror	r27
    9b9a:	f7 95       	ror	r31
    9b9c:	e7 95       	ror	r30
    9b9e:	9f 5f       	subi	r25, 0xFF	; 255
    9ba0:	c1 f7       	brne	.-16     	; 0x9b92 <__mulsf3_pse+0x8c>
    9ba2:	fe 2b       	or	r31, r30
    9ba4:	88 0f       	add	r24, r24
    9ba6:	91 1d       	adc	r25, r1
    9ba8:	96 95       	lsr	r25
    9baa:	87 95       	ror	r24
    9bac:	97 f9       	bld	r25, 7
    9bae:	08 95       	ret

00009bb0 <pow>:
    9bb0:	fa 01       	movw	r30, r20
    9bb2:	ee 0f       	add	r30, r30
    9bb4:	ff 1f       	adc	r31, r31
    9bb6:	30 96       	adiw	r30, 0x00	; 0
    9bb8:	21 05       	cpc	r18, r1
    9bba:	31 05       	cpc	r19, r1
    9bbc:	99 f1       	breq	.+102    	; 0x9c24 <pow+0x74>
    9bbe:	61 15       	cp	r22, r1
    9bc0:	71 05       	cpc	r23, r1
    9bc2:	61 f4       	brne	.+24     	; 0x9bdc <pow+0x2c>
    9bc4:	80 38       	cpi	r24, 0x80	; 128
    9bc6:	bf e3       	ldi	r27, 0x3F	; 63
    9bc8:	9b 07       	cpc	r25, r27
    9bca:	49 f1       	breq	.+82     	; 0x9c1e <pow+0x6e>
    9bcc:	68 94       	set
    9bce:	90 38       	cpi	r25, 0x80	; 128
    9bd0:	81 05       	cpc	r24, r1
    9bd2:	61 f0       	breq	.+24     	; 0x9bec <pow+0x3c>
    9bd4:	80 38       	cpi	r24, 0x80	; 128
    9bd6:	bf ef       	ldi	r27, 0xFF	; 255
    9bd8:	9b 07       	cpc	r25, r27
    9bda:	41 f0       	breq	.+16     	; 0x9bec <pow+0x3c>
    9bdc:	99 23       	and	r25, r25
    9bde:	42 f5       	brpl	.+80     	; 0x9c30 <pow+0x80>
    9be0:	ff 3f       	cpi	r31, 0xFF	; 255
    9be2:	e1 05       	cpc	r30, r1
    9be4:	31 05       	cpc	r19, r1
    9be6:	21 05       	cpc	r18, r1
    9be8:	11 f1       	breq	.+68     	; 0x9c2e <pow+0x7e>
    9bea:	e8 94       	clt
    9bec:	08 94       	sec
    9bee:	e7 95       	ror	r30
    9bf0:	d9 01       	movw	r26, r18
    9bf2:	aa 23       	and	r26, r26
    9bf4:	29 f4       	brne	.+10     	; 0x9c00 <pow+0x50>
    9bf6:	ab 2f       	mov	r26, r27
    9bf8:	be 2f       	mov	r27, r30
    9bfa:	f8 5f       	subi	r31, 0xF8	; 248
    9bfc:	d0 f3       	brcs	.-12     	; 0x9bf2 <pow+0x42>
    9bfe:	10 c0       	rjmp	.+32     	; 0x9c20 <pow+0x70>
    9c00:	ff 5f       	subi	r31, 0xFF	; 255
    9c02:	70 f4       	brcc	.+28     	; 0x9c20 <pow+0x70>
    9c04:	a6 95       	lsr	r26
    9c06:	e0 f7       	brcc	.-8      	; 0x9c00 <pow+0x50>
    9c08:	f7 39       	cpi	r31, 0x97	; 151
    9c0a:	50 f0       	brcs	.+20     	; 0x9c20 <pow+0x70>
    9c0c:	19 f0       	breq	.+6      	; 0x9c14 <pow+0x64>
    9c0e:	ff 3a       	cpi	r31, 0xAF	; 175
    9c10:	38 f4       	brcc	.+14     	; 0x9c20 <pow+0x70>
    9c12:	9f 77       	andi	r25, 0x7F	; 127
    9c14:	9f 93       	push	r25
    9c16:	0c d0       	rcall	.+24     	; 0x9c30 <pow+0x80>
    9c18:	0f 90       	pop	r0
    9c1a:	07 fc       	sbrc	r0, 7
    9c1c:	90 58       	subi	r25, 0x80	; 128
    9c1e:	08 95       	ret
    9c20:	3e f0       	brts	.+14     	; 0x9c30 <pow+0x80>
    9c22:	18 cf       	rjmp	.-464    	; 0x9a54 <__fp_nan>
    9c24:	60 e0       	ldi	r22, 0x00	; 0
    9c26:	70 e0       	ldi	r23, 0x00	; 0
    9c28:	80 e8       	ldi	r24, 0x80	; 128
    9c2a:	9f e3       	ldi	r25, 0x3F	; 63
    9c2c:	08 95       	ret
    9c2e:	4f e7       	ldi	r20, 0x7F	; 127
    9c30:	9f 77       	andi	r25, 0x7F	; 127
    9c32:	5f 93       	push	r21
    9c34:	4f 93       	push	r20
    9c36:	3f 93       	push	r19
    9c38:	2f 93       	push	r18
    9c3a:	9e d0       	rcall	.+316    	; 0x9d78 <log>
    9c3c:	2f 91       	pop	r18
    9c3e:	3f 91       	pop	r19
    9c40:	4f 91       	pop	r20
    9c42:	5f 91       	pop	r21
    9c44:	52 df       	rcall	.-348    	; 0x9aea <__mulsf3>
    9c46:	05 c0       	rjmp	.+10     	; 0x9c52 <exp>
    9c48:	19 f4       	brne	.+6      	; 0x9c50 <pow+0xa0>
    9c4a:	0e f0       	brts	.+2      	; 0x9c4e <pow+0x9e>
    9c4c:	fd ce       	rjmp	.-518    	; 0x9a48 <__fp_inf>
    9c4e:	46 cf       	rjmp	.-372    	; 0x9adc <__fp_zero>
    9c50:	01 cf       	rjmp	.-510    	; 0x9a54 <__fp_nan>

00009c52 <exp>:
    9c52:	2a df       	rcall	.-428    	; 0x9aa8 <__fp_splitA>
    9c54:	c8 f3       	brcs	.-14     	; 0x9c48 <pow+0x98>
    9c56:	96 38       	cpi	r25, 0x86	; 134
    9c58:	c0 f7       	brcc	.-16     	; 0x9c4a <pow+0x9a>
    9c5a:	07 f8       	bld	r0, 7
    9c5c:	0f 92       	push	r0
    9c5e:	e8 94       	clt
    9c60:	2b e3       	ldi	r18, 0x3B	; 59
    9c62:	3a ea       	ldi	r19, 0xAA	; 170
    9c64:	48 eb       	ldi	r20, 0xB8	; 184
    9c66:	5f e7       	ldi	r21, 0x7F	; 127
    9c68:	4e df       	rcall	.-356    	; 0x9b06 <__mulsf3_pse>
    9c6a:	0f 92       	push	r0
    9c6c:	0f 92       	push	r0
    9c6e:	0f 92       	push	r0
    9c70:	4d b7       	in	r20, 0x3d	; 61
    9c72:	5e b7       	in	r21, 0x3e	; 62
    9c74:	0f 92       	push	r0
    9c76:	c0 d0       	rcall	.+384    	; 0x9df8 <modf>
    9c78:	e2 e4       	ldi	r30, 0x42	; 66
    9c7a:	f2 e0       	ldi	r31, 0x02	; 2
    9c7c:	16 d0       	rcall	.+44     	; 0x9caa <__fp_powser>
    9c7e:	4f 91       	pop	r20
    9c80:	5f 91       	pop	r21
    9c82:	ef 91       	pop	r30
    9c84:	ff 91       	pop	r31
    9c86:	e5 95       	asr	r30
    9c88:	ee 1f       	adc	r30, r30
    9c8a:	ff 1f       	adc	r31, r31
    9c8c:	49 f0       	breq	.+18     	; 0x9ca0 <exp+0x4e>
    9c8e:	fe 57       	subi	r31, 0x7E	; 126
    9c90:	e0 68       	ori	r30, 0x80	; 128
    9c92:	44 27       	eor	r20, r20
    9c94:	ee 0f       	add	r30, r30
    9c96:	44 1f       	adc	r20, r20
    9c98:	fa 95       	dec	r31
    9c9a:	e1 f7       	brne	.-8      	; 0x9c94 <exp+0x42>
    9c9c:	41 95       	neg	r20
    9c9e:	55 0b       	sbc	r21, r21
    9ca0:	32 d0       	rcall	.+100    	; 0x9d06 <ldexp>
    9ca2:	0f 90       	pop	r0
    9ca4:	07 fe       	sbrs	r0, 7
    9ca6:	26 c0       	rjmp	.+76     	; 0x9cf4 <inverse>
    9ca8:	08 95       	ret

00009caa <__fp_powser>:
    9caa:	df 93       	push	r29
    9cac:	cf 93       	push	r28
    9cae:	1f 93       	push	r17
    9cb0:	0f 93       	push	r16
    9cb2:	ff 92       	push	r15
    9cb4:	ef 92       	push	r14
    9cb6:	df 92       	push	r13
    9cb8:	7b 01       	movw	r14, r22
    9cba:	8c 01       	movw	r16, r24
    9cbc:	68 94       	set
    9cbe:	05 c0       	rjmp	.+10     	; 0x9cca <__fp_powser+0x20>
    9cc0:	da 2e       	mov	r13, r26
    9cc2:	ef 01       	movw	r28, r30
    9cc4:	1e df       	rcall	.-452    	; 0x9b02 <__mulsf3x>
    9cc6:	fe 01       	movw	r30, r28
    9cc8:	e8 94       	clt
    9cca:	a5 91       	lpm	r26, Z+
    9ccc:	25 91       	lpm	r18, Z+
    9cce:	35 91       	lpm	r19, Z+
    9cd0:	45 91       	lpm	r20, Z+
    9cd2:	55 91       	lpm	r21, Z+
    9cd4:	ae f3       	brts	.-22     	; 0x9cc0 <__fp_powser+0x16>
    9cd6:	ef 01       	movw	r28, r30
    9cd8:	8e dd       	rcall	.-1252   	; 0x97f6 <__addsf3x>
    9cda:	fe 01       	movw	r30, r28
    9cdc:	97 01       	movw	r18, r14
    9cde:	a8 01       	movw	r20, r16
    9ce0:	da 94       	dec	r13
    9ce2:	79 f7       	brne	.-34     	; 0x9cc2 <__fp_powser+0x18>
    9ce4:	df 90       	pop	r13
    9ce6:	ef 90       	pop	r14
    9ce8:	ff 90       	pop	r15
    9cea:	0f 91       	pop	r16
    9cec:	1f 91       	pop	r17
    9cee:	cf 91       	pop	r28
    9cf0:	df 91       	pop	r29
    9cf2:	08 95       	ret

00009cf4 <inverse>:
    9cf4:	9b 01       	movw	r18, r22
    9cf6:	ac 01       	movw	r20, r24
    9cf8:	60 e0       	ldi	r22, 0x00	; 0
    9cfa:	70 e0       	ldi	r23, 0x00	; 0
    9cfc:	80 e8       	ldi	r24, 0x80	; 128
    9cfe:	9f e3       	ldi	r25, 0x3F	; 63
    9d00:	cd cd       	rjmp	.-1126   	; 0x989c <__divsf3>
    9d02:	a2 ce       	rjmp	.-700    	; 0x9a48 <__fp_inf>
    9d04:	ac c0       	rjmp	.+344    	; 0x9e5e <__fp_mpack>

00009d06 <ldexp>:
    9d06:	d0 de       	rcall	.-608    	; 0x9aa8 <__fp_splitA>
    9d08:	e8 f3       	brcs	.-6      	; 0x9d04 <inverse+0x10>
    9d0a:	99 23       	and	r25, r25
    9d0c:	d9 f3       	breq	.-10     	; 0x9d04 <inverse+0x10>
    9d0e:	94 0f       	add	r25, r20
    9d10:	51 1d       	adc	r21, r1
    9d12:	bb f3       	brvs	.-18     	; 0x9d02 <inverse+0xe>
    9d14:	91 50       	subi	r25, 0x01	; 1
    9d16:	50 40       	sbci	r21, 0x00	; 0
    9d18:	94 f0       	brlt	.+36     	; 0x9d3e <ldexp+0x38>
    9d1a:	59 f0       	breq	.+22     	; 0x9d32 <ldexp+0x2c>
    9d1c:	88 23       	and	r24, r24
    9d1e:	32 f0       	brmi	.+12     	; 0x9d2c <ldexp+0x26>
    9d20:	66 0f       	add	r22, r22
    9d22:	77 1f       	adc	r23, r23
    9d24:	88 1f       	adc	r24, r24
    9d26:	91 50       	subi	r25, 0x01	; 1
    9d28:	50 40       	sbci	r21, 0x00	; 0
    9d2a:	c1 f7       	brne	.-16     	; 0x9d1c <ldexp+0x16>
    9d2c:	9e 3f       	cpi	r25, 0xFE	; 254
    9d2e:	51 05       	cpc	r21, r1
    9d30:	44 f7       	brge	.-48     	; 0x9d02 <inverse+0xe>
    9d32:	88 0f       	add	r24, r24
    9d34:	91 1d       	adc	r25, r1
    9d36:	96 95       	lsr	r25
    9d38:	87 95       	ror	r24
    9d3a:	97 f9       	bld	r25, 7
    9d3c:	08 95       	ret
    9d3e:	5f 3f       	cpi	r21, 0xFF	; 255
    9d40:	ac f0       	brlt	.+42     	; 0x9d6c <ldexp+0x66>
    9d42:	98 3e       	cpi	r25, 0xE8	; 232
    9d44:	9c f0       	brlt	.+38     	; 0x9d6c <ldexp+0x66>
    9d46:	bb 27       	eor	r27, r27
    9d48:	86 95       	lsr	r24
    9d4a:	77 95       	ror	r23
    9d4c:	67 95       	ror	r22
    9d4e:	b7 95       	ror	r27
    9d50:	08 f4       	brcc	.+2      	; 0x9d54 <ldexp+0x4e>
    9d52:	b1 60       	ori	r27, 0x01	; 1
    9d54:	93 95       	inc	r25
    9d56:	c1 f7       	brne	.-16     	; 0x9d48 <ldexp+0x42>
    9d58:	bb 0f       	add	r27, r27
    9d5a:	58 f7       	brcc	.-42     	; 0x9d32 <ldexp+0x2c>
    9d5c:	11 f4       	brne	.+4      	; 0x9d62 <ldexp+0x5c>
    9d5e:	60 ff       	sbrs	r22, 0
    9d60:	e8 cf       	rjmp	.-48     	; 0x9d32 <ldexp+0x2c>
    9d62:	6f 5f       	subi	r22, 0xFF	; 255
    9d64:	7f 4f       	sbci	r23, 0xFF	; 255
    9d66:	8f 4f       	sbci	r24, 0xFF	; 255
    9d68:	9f 4f       	sbci	r25, 0xFF	; 255
    9d6a:	e3 cf       	rjmp	.-58     	; 0x9d32 <ldexp+0x2c>
    9d6c:	b8 ce       	rjmp	.-656    	; 0x9ade <__fp_szero>
    9d6e:	0e f0       	brts	.+2      	; 0x9d72 <ldexp+0x6c>
    9d70:	76 c0       	rjmp	.+236    	; 0x9e5e <__fp_mpack>
    9d72:	70 ce       	rjmp	.-800    	; 0x9a54 <__fp_nan>
    9d74:	68 94       	set
    9d76:	68 ce       	rjmp	.-816    	; 0x9a48 <__fp_inf>

00009d78 <log>:
    9d78:	97 de       	rcall	.-722    	; 0x9aa8 <__fp_splitA>
    9d7a:	c8 f3       	brcs	.-14     	; 0x9d6e <ldexp+0x68>
    9d7c:	99 23       	and	r25, r25
    9d7e:	d1 f3       	breq	.-12     	; 0x9d74 <ldexp+0x6e>
    9d80:	c6 f3       	brts	.-16     	; 0x9d72 <ldexp+0x6c>
    9d82:	df 93       	push	r29
    9d84:	cf 93       	push	r28
    9d86:	1f 93       	push	r17
    9d88:	0f 93       	push	r16
    9d8a:	ff 92       	push	r15
    9d8c:	c9 2f       	mov	r28, r25
    9d8e:	dd 27       	eor	r29, r29
    9d90:	88 23       	and	r24, r24
    9d92:	2a f0       	brmi	.+10     	; 0x9d9e <log+0x26>
    9d94:	21 97       	sbiw	r28, 0x01	; 1
    9d96:	66 0f       	add	r22, r22
    9d98:	77 1f       	adc	r23, r23
    9d9a:	88 1f       	adc	r24, r24
    9d9c:	da f7       	brpl	.-10     	; 0x9d94 <log+0x1c>
    9d9e:	20 e0       	ldi	r18, 0x00	; 0
    9da0:	30 e0       	ldi	r19, 0x00	; 0
    9da2:	40 e8       	ldi	r20, 0x80	; 128
    9da4:	5f eb       	ldi	r21, 0xBF	; 191
    9da6:	9f e3       	ldi	r25, 0x3F	; 63
    9da8:	88 39       	cpi	r24, 0x98	; 152
    9daa:	20 f0       	brcs	.+8      	; 0x9db4 <log+0x3c>
    9dac:	80 3e       	cpi	r24, 0xE0	; 224
    9dae:	30 f0       	brcs	.+12     	; 0x9dbc <log+0x44>
    9db0:	21 96       	adiw	r28, 0x01	; 1
    9db2:	8f 77       	andi	r24, 0x7F	; 127
    9db4:	0f dd       	rcall	.-1506   	; 0x97d4 <__addsf3>
    9db6:	ea e6       	ldi	r30, 0x6A	; 106
    9db8:	f2 e0       	ldi	r31, 0x02	; 2
    9dba:	03 c0       	rjmp	.+6      	; 0x9dc2 <log+0x4a>
    9dbc:	0b dd       	rcall	.-1514   	; 0x97d4 <__addsf3>
    9dbe:	e7 e9       	ldi	r30, 0x97	; 151
    9dc0:	f2 e0       	ldi	r31, 0x02	; 2
    9dc2:	73 df       	rcall	.-282    	; 0x9caa <__fp_powser>
    9dc4:	8b 01       	movw	r16, r22
    9dc6:	be 01       	movw	r22, r28
    9dc8:	ec 01       	movw	r28, r24
    9dca:	fb 2e       	mov	r15, r27
    9dcc:	6f 57       	subi	r22, 0x7F	; 127
    9dce:	71 09       	sbc	r23, r1
    9dd0:	75 95       	asr	r23
    9dd2:	77 1f       	adc	r23, r23
    9dd4:	88 0b       	sbc	r24, r24
    9dd6:	99 0b       	sbc	r25, r25
    9dd8:	fc dd       	rcall	.-1032   	; 0x99d2 <__floatsisf>
    9dda:	28 e1       	ldi	r18, 0x18	; 24
    9ddc:	32 e7       	ldi	r19, 0x72	; 114
    9dde:	41 e3       	ldi	r20, 0x31	; 49
    9de0:	5f e3       	ldi	r21, 0x3F	; 63
    9de2:	8f de       	rcall	.-738    	; 0x9b02 <__mulsf3x>
    9de4:	af 2d       	mov	r26, r15
    9de6:	98 01       	movw	r18, r16
    9de8:	ae 01       	movw	r20, r28
    9dea:	ff 90       	pop	r15
    9dec:	0f 91       	pop	r16
    9dee:	1f 91       	pop	r17
    9df0:	cf 91       	pop	r28
    9df2:	df 91       	pop	r29
    9df4:	00 dd       	rcall	.-1536   	; 0x97f6 <__addsf3x>
    9df6:	3f ce       	rjmp	.-898    	; 0x9a76 <__fp_round>

00009df8 <modf>:
    9df8:	fa 01       	movw	r30, r20
    9dfa:	dc 01       	movw	r26, r24
    9dfc:	aa 0f       	add	r26, r26
    9dfe:	bb 1f       	adc	r27, r27
    9e00:	9b 01       	movw	r18, r22
    9e02:	ac 01       	movw	r20, r24
    9e04:	bf 57       	subi	r27, 0x7F	; 127
    9e06:	28 f4       	brcc	.+10     	; 0x9e12 <modf+0x1a>
    9e08:	22 27       	eor	r18, r18
    9e0a:	33 27       	eor	r19, r19
    9e0c:	44 27       	eor	r20, r20
    9e0e:	50 78       	andi	r21, 0x80	; 128
    9e10:	1f c0       	rjmp	.+62     	; 0x9e50 <modf+0x58>
    9e12:	b7 51       	subi	r27, 0x17	; 23
    9e14:	88 f4       	brcc	.+34     	; 0x9e38 <modf+0x40>
    9e16:	ab 2f       	mov	r26, r27
    9e18:	00 24       	eor	r0, r0
    9e1a:	46 95       	lsr	r20
    9e1c:	37 95       	ror	r19
    9e1e:	27 95       	ror	r18
    9e20:	01 1c       	adc	r0, r1
    9e22:	a3 95       	inc	r26
    9e24:	d2 f3       	brmi	.-12     	; 0x9e1a <modf+0x22>
    9e26:	00 20       	and	r0, r0
    9e28:	69 f0       	breq	.+26     	; 0x9e44 <modf+0x4c>
    9e2a:	22 0f       	add	r18, r18
    9e2c:	33 1f       	adc	r19, r19
    9e2e:	44 1f       	adc	r20, r20
    9e30:	b3 95       	inc	r27
    9e32:	da f3       	brmi	.-10     	; 0x9e2a <modf+0x32>
    9e34:	0d d0       	rcall	.+26     	; 0x9e50 <modf+0x58>
    9e36:	cd cc       	rjmp	.-1638   	; 0x97d2 <__subsf3>
    9e38:	61 30       	cpi	r22, 0x01	; 1
    9e3a:	71 05       	cpc	r23, r1
    9e3c:	a0 e8       	ldi	r26, 0x80	; 128
    9e3e:	8a 07       	cpc	r24, r26
    9e40:	b9 46       	sbci	r27, 0x69	; 105
    9e42:	30 f4       	brcc	.+12     	; 0x9e50 <modf+0x58>
    9e44:	9b 01       	movw	r18, r22
    9e46:	ac 01       	movw	r20, r24
    9e48:	66 27       	eor	r22, r22
    9e4a:	77 27       	eor	r23, r23
    9e4c:	88 27       	eor	r24, r24
    9e4e:	90 78       	andi	r25, 0x80	; 128
    9e50:	30 96       	adiw	r30, 0x00	; 0
    9e52:	21 f0       	breq	.+8      	; 0x9e5c <modf+0x64>
    9e54:	20 83       	st	Z, r18
    9e56:	31 83       	std	Z+1, r19	; 0x01
    9e58:	42 83       	std	Z+2, r20	; 0x02
    9e5a:	53 83       	std	Z+3, r21	; 0x03
    9e5c:	08 95       	ret

00009e5e <__fp_mpack>:
    9e5e:	9f 3f       	cpi	r25, 0xFF	; 255
    9e60:	31 f0       	breq	.+12     	; 0x9e6e <__fp_mpack_finite+0xc>

00009e62 <__fp_mpack_finite>:
    9e62:	91 50       	subi	r25, 0x01	; 1
    9e64:	20 f4       	brcc	.+8      	; 0x9e6e <__fp_mpack_finite+0xc>
    9e66:	87 95       	ror	r24
    9e68:	77 95       	ror	r23
    9e6a:	67 95       	ror	r22
    9e6c:	b7 95       	ror	r27
    9e6e:	88 0f       	add	r24, r24
    9e70:	91 1d       	adc	r25, r1
    9e72:	96 95       	lsr	r25
    9e74:	87 95       	ror	r24
    9e76:	97 f9       	bld	r25, 7
    9e78:	08 95       	ret

00009e7a <vfprintf>:
    9e7a:	2f 92       	push	r2
    9e7c:	3f 92       	push	r3
    9e7e:	4f 92       	push	r4
    9e80:	5f 92       	push	r5
    9e82:	6f 92       	push	r6
    9e84:	7f 92       	push	r7
    9e86:	8f 92       	push	r8
    9e88:	9f 92       	push	r9
    9e8a:	af 92       	push	r10
    9e8c:	bf 92       	push	r11
    9e8e:	cf 92       	push	r12
    9e90:	df 92       	push	r13
    9e92:	ef 92       	push	r14
    9e94:	ff 92       	push	r15
    9e96:	0f 93       	push	r16
    9e98:	1f 93       	push	r17
    9e9a:	cf 93       	push	r28
    9e9c:	df 93       	push	r29
    9e9e:	cd b7       	in	r28, 0x3d	; 61
    9ea0:	de b7       	in	r29, 0x3e	; 62
    9ea2:	63 97       	sbiw	r28, 0x13	; 19
    9ea4:	cd bf       	out	0x3d, r28	; 61
    9ea6:	de bf       	out	0x3e, r29	; 62
    9ea8:	7c 01       	movw	r14, r24
    9eaa:	1b 01       	movw	r2, r22
    9eac:	6a 01       	movw	r12, r20
    9eae:	fc 01       	movw	r30, r24
    9eb0:	16 82       	std	Z+6, r1	; 0x06
    9eb2:	17 82       	std	Z+7, r1	; 0x07
    9eb4:	83 81       	ldd	r24, Z+3	; 0x03
    9eb6:	81 ff       	sbrs	r24, 1
    9eb8:	49 c3       	rjmp	.+1682   	; 0xa54c <vfprintf+0x6d2>
    9eba:	be 01       	movw	r22, r28
    9ebc:	6f 5f       	subi	r22, 0xFF	; 255
    9ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    9ec0:	4b 01       	movw	r8, r22
    9ec2:	f7 01       	movw	r30, r14
    9ec4:	93 81       	ldd	r25, Z+3	; 0x03
    9ec6:	f1 01       	movw	r30, r2
    9ec8:	93 fd       	sbrc	r25, 3
    9eca:	85 91       	lpm	r24, Z+
    9ecc:	93 ff       	sbrs	r25, 3
    9ece:	81 91       	ld	r24, Z+
    9ed0:	1f 01       	movw	r2, r30
    9ed2:	88 23       	and	r24, r24
    9ed4:	09 f4       	brne	.+2      	; 0x9ed8 <vfprintf+0x5e>
    9ed6:	36 c3       	rjmp	.+1644   	; 0xa544 <vfprintf+0x6ca>
    9ed8:	85 32       	cpi	r24, 0x25	; 37
    9eda:	39 f4       	brne	.+14     	; 0x9eea <vfprintf+0x70>
    9edc:	93 fd       	sbrc	r25, 3
    9ede:	85 91       	lpm	r24, Z+
    9ee0:	93 ff       	sbrs	r25, 3
    9ee2:	81 91       	ld	r24, Z+
    9ee4:	1f 01       	movw	r2, r30
    9ee6:	85 32       	cpi	r24, 0x25	; 37
    9ee8:	31 f4       	brne	.+12     	; 0x9ef6 <vfprintf+0x7c>
    9eea:	b7 01       	movw	r22, r14
    9eec:	90 e0       	ldi	r25, 0x00	; 0
    9eee:	69 d6       	rcall	.+3282   	; 0xabc2 <fputc>
    9ef0:	56 01       	movw	r10, r12
    9ef2:	65 01       	movw	r12, r10
    9ef4:	e6 cf       	rjmp	.-52     	; 0x9ec2 <vfprintf+0x48>
    9ef6:	10 e0       	ldi	r17, 0x00	; 0
    9ef8:	51 2c       	mov	r5, r1
    9efa:	20 e0       	ldi	r18, 0x00	; 0
    9efc:	20 32       	cpi	r18, 0x20	; 32
    9efe:	a0 f4       	brcc	.+40     	; 0x9f28 <vfprintf+0xae>
    9f00:	8b 32       	cpi	r24, 0x2B	; 43
    9f02:	69 f0       	breq	.+26     	; 0x9f1e <vfprintf+0xa4>
    9f04:	30 f4       	brcc	.+12     	; 0x9f12 <vfprintf+0x98>
    9f06:	80 32       	cpi	r24, 0x20	; 32
    9f08:	59 f0       	breq	.+22     	; 0x9f20 <vfprintf+0xa6>
    9f0a:	83 32       	cpi	r24, 0x23	; 35
    9f0c:	69 f4       	brne	.+26     	; 0x9f28 <vfprintf+0xae>
    9f0e:	20 61       	ori	r18, 0x10	; 16
    9f10:	2c c0       	rjmp	.+88     	; 0x9f6a <vfprintf+0xf0>
    9f12:	8d 32       	cpi	r24, 0x2D	; 45
    9f14:	39 f0       	breq	.+14     	; 0x9f24 <vfprintf+0xaa>
    9f16:	80 33       	cpi	r24, 0x30	; 48
    9f18:	39 f4       	brne	.+14     	; 0x9f28 <vfprintf+0xae>
    9f1a:	21 60       	ori	r18, 0x01	; 1
    9f1c:	26 c0       	rjmp	.+76     	; 0x9f6a <vfprintf+0xf0>
    9f1e:	22 60       	ori	r18, 0x02	; 2
    9f20:	24 60       	ori	r18, 0x04	; 4
    9f22:	23 c0       	rjmp	.+70     	; 0x9f6a <vfprintf+0xf0>
    9f24:	28 60       	ori	r18, 0x08	; 8
    9f26:	21 c0       	rjmp	.+66     	; 0x9f6a <vfprintf+0xf0>
    9f28:	27 fd       	sbrc	r18, 7
    9f2a:	27 c0       	rjmp	.+78     	; 0x9f7a <vfprintf+0x100>
    9f2c:	30 ed       	ldi	r19, 0xD0	; 208
    9f2e:	38 0f       	add	r19, r24
    9f30:	3a 30       	cpi	r19, 0x0A	; 10
    9f32:	78 f4       	brcc	.+30     	; 0x9f52 <vfprintf+0xd8>
    9f34:	26 ff       	sbrs	r18, 6
    9f36:	06 c0       	rjmp	.+12     	; 0x9f44 <vfprintf+0xca>
    9f38:	fa e0       	ldi	r31, 0x0A	; 10
    9f3a:	1f 9f       	mul	r17, r31
    9f3c:	30 0d       	add	r19, r0
    9f3e:	11 24       	eor	r1, r1
    9f40:	13 2f       	mov	r17, r19
    9f42:	13 c0       	rjmp	.+38     	; 0x9f6a <vfprintf+0xf0>
    9f44:	6a e0       	ldi	r22, 0x0A	; 10
    9f46:	56 9e       	mul	r5, r22
    9f48:	30 0d       	add	r19, r0
    9f4a:	11 24       	eor	r1, r1
    9f4c:	53 2e       	mov	r5, r19
    9f4e:	20 62       	ori	r18, 0x20	; 32
    9f50:	0c c0       	rjmp	.+24     	; 0x9f6a <vfprintf+0xf0>
    9f52:	8e 32       	cpi	r24, 0x2E	; 46
    9f54:	21 f4       	brne	.+8      	; 0x9f5e <vfprintf+0xe4>
    9f56:	26 fd       	sbrc	r18, 6
    9f58:	f5 c2       	rjmp	.+1514   	; 0xa544 <vfprintf+0x6ca>
    9f5a:	20 64       	ori	r18, 0x40	; 64
    9f5c:	06 c0       	rjmp	.+12     	; 0x9f6a <vfprintf+0xf0>
    9f5e:	8c 36       	cpi	r24, 0x6C	; 108
    9f60:	11 f4       	brne	.+4      	; 0x9f66 <vfprintf+0xec>
    9f62:	20 68       	ori	r18, 0x80	; 128
    9f64:	02 c0       	rjmp	.+4      	; 0x9f6a <vfprintf+0xf0>
    9f66:	88 36       	cpi	r24, 0x68	; 104
    9f68:	41 f4       	brne	.+16     	; 0x9f7a <vfprintf+0x100>
    9f6a:	f1 01       	movw	r30, r2
    9f6c:	93 fd       	sbrc	r25, 3
    9f6e:	85 91       	lpm	r24, Z+
    9f70:	93 ff       	sbrs	r25, 3
    9f72:	81 91       	ld	r24, Z+
    9f74:	1f 01       	movw	r2, r30
    9f76:	81 11       	cpse	r24, r1
    9f78:	c1 cf       	rjmp	.-126    	; 0x9efc <vfprintf+0x82>
    9f7a:	9b eb       	ldi	r25, 0xBB	; 187
    9f7c:	98 0f       	add	r25, r24
    9f7e:	93 30       	cpi	r25, 0x03	; 3
    9f80:	18 f4       	brcc	.+6      	; 0x9f88 <vfprintf+0x10e>
    9f82:	20 61       	ori	r18, 0x10	; 16
    9f84:	80 5e       	subi	r24, 0xE0	; 224
    9f86:	06 c0       	rjmp	.+12     	; 0x9f94 <vfprintf+0x11a>
    9f88:	9b e9       	ldi	r25, 0x9B	; 155
    9f8a:	98 0f       	add	r25, r24
    9f8c:	93 30       	cpi	r25, 0x03	; 3
    9f8e:	08 f0       	brcs	.+2      	; 0x9f92 <vfprintf+0x118>
    9f90:	9a c1       	rjmp	.+820    	; 0xa2c6 <vfprintf+0x44c>
    9f92:	2f 7e       	andi	r18, 0xEF	; 239
    9f94:	26 ff       	sbrs	r18, 6
    9f96:	16 e0       	ldi	r17, 0x06	; 6
    9f98:	2f 73       	andi	r18, 0x3F	; 63
    9f9a:	72 2e       	mov	r7, r18
    9f9c:	85 36       	cpi	r24, 0x65	; 101
    9f9e:	21 f4       	brne	.+8      	; 0x9fa8 <vfprintf+0x12e>
    9fa0:	f2 2f       	mov	r31, r18
    9fa2:	f0 64       	ori	r31, 0x40	; 64
    9fa4:	7f 2e       	mov	r7, r31
    9fa6:	08 c0       	rjmp	.+16     	; 0x9fb8 <vfprintf+0x13e>
    9fa8:	86 36       	cpi	r24, 0x66	; 102
    9faa:	21 f4       	brne	.+8      	; 0x9fb4 <vfprintf+0x13a>
    9fac:	62 2f       	mov	r22, r18
    9fae:	60 68       	ori	r22, 0x80	; 128
    9fb0:	76 2e       	mov	r7, r22
    9fb2:	02 c0       	rjmp	.+4      	; 0x9fb8 <vfprintf+0x13e>
    9fb4:	11 11       	cpse	r17, r1
    9fb6:	11 50       	subi	r17, 0x01	; 1
    9fb8:	77 fe       	sbrs	r7, 7
    9fba:	07 c0       	rjmp	.+14     	; 0x9fca <vfprintf+0x150>
    9fbc:	1c 33       	cpi	r17, 0x3C	; 60
    9fbe:	48 f4       	brcc	.+18     	; 0x9fd2 <vfprintf+0x158>
    9fc0:	44 24       	eor	r4, r4
    9fc2:	43 94       	inc	r4
    9fc4:	41 0e       	add	r4, r17
    9fc6:	27 e0       	ldi	r18, 0x07	; 7
    9fc8:	0b c0       	rjmp	.+22     	; 0x9fe0 <vfprintf+0x166>
    9fca:	18 30       	cpi	r17, 0x08	; 8
    9fcc:	30 f4       	brcc	.+12     	; 0x9fda <vfprintf+0x160>
    9fce:	21 2f       	mov	r18, r17
    9fd0:	06 c0       	rjmp	.+12     	; 0x9fde <vfprintf+0x164>
    9fd2:	27 e0       	ldi	r18, 0x07	; 7
    9fd4:	4c e3       	ldi	r20, 0x3C	; 60
    9fd6:	44 2e       	mov	r4, r20
    9fd8:	03 c0       	rjmp	.+6      	; 0x9fe0 <vfprintf+0x166>
    9fda:	27 e0       	ldi	r18, 0x07	; 7
    9fdc:	17 e0       	ldi	r17, 0x07	; 7
    9fde:	41 2c       	mov	r4, r1
    9fe0:	56 01       	movw	r10, r12
    9fe2:	74 e0       	ldi	r23, 0x04	; 4
    9fe4:	a7 0e       	add	r10, r23
    9fe6:	b1 1c       	adc	r11, r1
    9fe8:	f6 01       	movw	r30, r12
    9fea:	60 81       	ld	r22, Z
    9fec:	71 81       	ldd	r23, Z+1	; 0x01
    9fee:	82 81       	ldd	r24, Z+2	; 0x02
    9ff0:	93 81       	ldd	r25, Z+3	; 0x03
    9ff2:	04 2d       	mov	r16, r4
    9ff4:	a4 01       	movw	r20, r8
    9ff6:	6b d4       	rcall	.+2262   	; 0xa8ce <__ftoa_engine>
    9ff8:	6c 01       	movw	r12, r24
    9ffa:	09 81       	ldd	r16, Y+1	; 0x01
    9ffc:	00 ff       	sbrs	r16, 0
    9ffe:	02 c0       	rjmp	.+4      	; 0xa004 <vfprintf+0x18a>
    a000:	03 ff       	sbrs	r16, 3
    a002:	06 c0       	rjmp	.+12     	; 0xa010 <vfprintf+0x196>
    a004:	71 fc       	sbrc	r7, 1
    a006:	07 c0       	rjmp	.+14     	; 0xa016 <vfprintf+0x19c>
    a008:	72 fc       	sbrc	r7, 2
    a00a:	08 c0       	rjmp	.+16     	; 0xa01c <vfprintf+0x1a2>
    a00c:	61 2c       	mov	r6, r1
    a00e:	08 c0       	rjmp	.+16     	; 0xa020 <vfprintf+0x1a6>
    a010:	3d e2       	ldi	r19, 0x2D	; 45
    a012:	63 2e       	mov	r6, r19
    a014:	05 c0       	rjmp	.+10     	; 0xa020 <vfprintf+0x1a6>
    a016:	2b e2       	ldi	r18, 0x2B	; 43
    a018:	62 2e       	mov	r6, r18
    a01a:	02 c0       	rjmp	.+4      	; 0xa020 <vfprintf+0x1a6>
    a01c:	90 e2       	ldi	r25, 0x20	; 32
    a01e:	69 2e       	mov	r6, r25
    a020:	80 2f       	mov	r24, r16
    a022:	8c 70       	andi	r24, 0x0C	; 12
    a024:	81 f1       	breq	.+96     	; 0xa086 <vfprintf+0x20c>
    a026:	66 20       	and	r6, r6
    a028:	11 f0       	breq	.+4      	; 0xa02e <vfprintf+0x1b4>
    a02a:	84 e0       	ldi	r24, 0x04	; 4
    a02c:	01 c0       	rjmp	.+2      	; 0xa030 <vfprintf+0x1b6>
    a02e:	83 e0       	ldi	r24, 0x03	; 3
    a030:	85 15       	cp	r24, r5
    a032:	10 f0       	brcs	.+4      	; 0xa038 <vfprintf+0x1be>
    a034:	51 2c       	mov	r5, r1
    a036:	0a c0       	rjmp	.+20     	; 0xa04c <vfprintf+0x1d2>
    a038:	58 1a       	sub	r5, r24
    a03a:	73 fc       	sbrc	r7, 3
    a03c:	07 c0       	rjmp	.+14     	; 0xa04c <vfprintf+0x1d2>
    a03e:	b7 01       	movw	r22, r14
    a040:	80 e2       	ldi	r24, 0x20	; 32
    a042:	90 e0       	ldi	r25, 0x00	; 0
    a044:	be d5       	rcall	.+2940   	; 0xabc2 <fputc>
    a046:	5a 94       	dec	r5
    a048:	d1 f7       	brne	.-12     	; 0xa03e <vfprintf+0x1c4>
    a04a:	f4 cf       	rjmp	.-24     	; 0xa034 <vfprintf+0x1ba>
    a04c:	66 20       	and	r6, r6
    a04e:	21 f0       	breq	.+8      	; 0xa058 <vfprintf+0x1de>
    a050:	b7 01       	movw	r22, r14
    a052:	86 2d       	mov	r24, r6
    a054:	90 e0       	ldi	r25, 0x00	; 0
    a056:	b5 d5       	rcall	.+2922   	; 0xabc2 <fputc>
    a058:	03 fd       	sbrc	r16, 3
    a05a:	03 c0       	rjmp	.+6      	; 0xa062 <vfprintf+0x1e8>
    a05c:	09 ec       	ldi	r16, 0xC9	; 201
    a05e:	1d e0       	ldi	r17, 0x0D	; 13
    a060:	02 c0       	rjmp	.+4      	; 0xa066 <vfprintf+0x1ec>
    a062:	05 ec       	ldi	r16, 0xC5	; 197
    a064:	1d e0       	ldi	r17, 0x0D	; 13
    a066:	f7 2d       	mov	r31, r7
    a068:	f0 71       	andi	r31, 0x10	; 16
    a06a:	7f 2e       	mov	r7, r31
    a06c:	f8 01       	movw	r30, r16
    a06e:	84 91       	lpm	r24, Z
    a070:	88 23       	and	r24, r24
    a072:	09 f4       	brne	.+2      	; 0xa076 <vfprintf+0x1fc>
    a074:	5e c2       	rjmp	.+1212   	; 0xa532 <vfprintf+0x6b8>
    a076:	71 10       	cpse	r7, r1
    a078:	80 52       	subi	r24, 0x20	; 32
    a07a:	b7 01       	movw	r22, r14
    a07c:	90 e0       	ldi	r25, 0x00	; 0
    a07e:	a1 d5       	rcall	.+2882   	; 0xabc2 <fputc>
    a080:	0f 5f       	subi	r16, 0xFF	; 255
    a082:	1f 4f       	sbci	r17, 0xFF	; 255
    a084:	f3 cf       	rjmp	.-26     	; 0xa06c <vfprintf+0x1f2>
    a086:	77 fe       	sbrs	r7, 7
    a088:	0f c0       	rjmp	.+30     	; 0xa0a8 <vfprintf+0x22e>
    a08a:	4c 0c       	add	r4, r12
    a08c:	04 ff       	sbrs	r16, 4
    a08e:	04 c0       	rjmp	.+8      	; 0xa098 <vfprintf+0x21e>
    a090:	8a 81       	ldd	r24, Y+2	; 0x02
    a092:	81 33       	cpi	r24, 0x31	; 49
    a094:	09 f4       	brne	.+2      	; 0xa098 <vfprintf+0x21e>
    a096:	4a 94       	dec	r4
    a098:	14 14       	cp	r1, r4
    a09a:	74 f5       	brge	.+92     	; 0xa0f8 <vfprintf+0x27e>
    a09c:	f8 e0       	ldi	r31, 0x08	; 8
    a09e:	f4 15       	cp	r31, r4
    a0a0:	78 f5       	brcc	.+94     	; 0xa100 <vfprintf+0x286>
    a0a2:	88 e0       	ldi	r24, 0x08	; 8
    a0a4:	48 2e       	mov	r4, r24
    a0a6:	2c c0       	rjmp	.+88     	; 0xa100 <vfprintf+0x286>
    a0a8:	76 fc       	sbrc	r7, 6
    a0aa:	2a c0       	rjmp	.+84     	; 0xa100 <vfprintf+0x286>
    a0ac:	81 2f       	mov	r24, r17
    a0ae:	90 e0       	ldi	r25, 0x00	; 0
    a0b0:	8c 15       	cp	r24, r12
    a0b2:	9d 05       	cpc	r25, r13
    a0b4:	9c f0       	brlt	.+38     	; 0xa0dc <vfprintf+0x262>
    a0b6:	6c ef       	ldi	r22, 0xFC	; 252
    a0b8:	c6 16       	cp	r12, r22
    a0ba:	6f ef       	ldi	r22, 0xFF	; 255
    a0bc:	d6 06       	cpc	r13, r22
    a0be:	74 f0       	brlt	.+28     	; 0xa0dc <vfprintf+0x262>
    a0c0:	77 2d       	mov	r23, r7
    a0c2:	70 68       	ori	r23, 0x80	; 128
    a0c4:	77 2e       	mov	r7, r23
    a0c6:	0a c0       	rjmp	.+20     	; 0xa0dc <vfprintf+0x262>
    a0c8:	e2 e0       	ldi	r30, 0x02	; 2
    a0ca:	f0 e0       	ldi	r31, 0x00	; 0
    a0cc:	ec 0f       	add	r30, r28
    a0ce:	fd 1f       	adc	r31, r29
    a0d0:	e1 0f       	add	r30, r17
    a0d2:	f1 1d       	adc	r31, r1
    a0d4:	80 81       	ld	r24, Z
    a0d6:	80 33       	cpi	r24, 0x30	; 48
    a0d8:	19 f4       	brne	.+6      	; 0xa0e0 <vfprintf+0x266>
    a0da:	11 50       	subi	r17, 0x01	; 1
    a0dc:	11 11       	cpse	r17, r1
    a0de:	f4 cf       	rjmp	.-24     	; 0xa0c8 <vfprintf+0x24e>
    a0e0:	77 fe       	sbrs	r7, 7
    a0e2:	0e c0       	rjmp	.+28     	; 0xa100 <vfprintf+0x286>
    a0e4:	44 24       	eor	r4, r4
    a0e6:	43 94       	inc	r4
    a0e8:	41 0e       	add	r4, r17
    a0ea:	81 2f       	mov	r24, r17
    a0ec:	90 e0       	ldi	r25, 0x00	; 0
    a0ee:	c8 16       	cp	r12, r24
    a0f0:	d9 06       	cpc	r13, r25
    a0f2:	2c f4       	brge	.+10     	; 0xa0fe <vfprintf+0x284>
    a0f4:	1c 19       	sub	r17, r12
    a0f6:	04 c0       	rjmp	.+8      	; 0xa100 <vfprintf+0x286>
    a0f8:	44 24       	eor	r4, r4
    a0fa:	43 94       	inc	r4
    a0fc:	01 c0       	rjmp	.+2      	; 0xa100 <vfprintf+0x286>
    a0fe:	10 e0       	ldi	r17, 0x00	; 0
    a100:	77 fe       	sbrs	r7, 7
    a102:	07 c0       	rjmp	.+14     	; 0xa112 <vfprintf+0x298>
    a104:	1c 14       	cp	r1, r12
    a106:	1d 04       	cpc	r1, r13
    a108:	3c f4       	brge	.+14     	; 0xa118 <vfprintf+0x29e>
    a10a:	96 01       	movw	r18, r12
    a10c:	2f 5f       	subi	r18, 0xFF	; 255
    a10e:	3f 4f       	sbci	r19, 0xFF	; 255
    a110:	05 c0       	rjmp	.+10     	; 0xa11c <vfprintf+0x2a2>
    a112:	25 e0       	ldi	r18, 0x05	; 5
    a114:	30 e0       	ldi	r19, 0x00	; 0
    a116:	02 c0       	rjmp	.+4      	; 0xa11c <vfprintf+0x2a2>
    a118:	21 e0       	ldi	r18, 0x01	; 1
    a11a:	30 e0       	ldi	r19, 0x00	; 0
    a11c:	66 20       	and	r6, r6
    a11e:	11 f0       	breq	.+4      	; 0xa124 <vfprintf+0x2aa>
    a120:	2f 5f       	subi	r18, 0xFF	; 255
    a122:	3f 4f       	sbci	r19, 0xFF	; 255
    a124:	11 23       	and	r17, r17
    a126:	31 f0       	breq	.+12     	; 0xa134 <vfprintf+0x2ba>
    a128:	41 2f       	mov	r20, r17
    a12a:	50 e0       	ldi	r21, 0x00	; 0
    a12c:	4f 5f       	subi	r20, 0xFF	; 255
    a12e:	5f 4f       	sbci	r21, 0xFF	; 255
    a130:	24 0f       	add	r18, r20
    a132:	35 1f       	adc	r19, r21
    a134:	45 2d       	mov	r20, r5
    a136:	50 e0       	ldi	r21, 0x00	; 0
    a138:	24 17       	cp	r18, r20
    a13a:	35 07       	cpc	r19, r21
    a13c:	14 f4       	brge	.+4      	; 0xa142 <vfprintf+0x2c8>
    a13e:	52 1a       	sub	r5, r18
    a140:	01 c0       	rjmp	.+2      	; 0xa144 <vfprintf+0x2ca>
    a142:	51 2c       	mov	r5, r1
    a144:	87 2d       	mov	r24, r7
    a146:	89 70       	andi	r24, 0x09	; 9
    a148:	41 f4       	brne	.+16     	; 0xa15a <vfprintf+0x2e0>
    a14a:	55 20       	and	r5, r5
    a14c:	31 f0       	breq	.+12     	; 0xa15a <vfprintf+0x2e0>
    a14e:	b7 01       	movw	r22, r14
    a150:	80 e2       	ldi	r24, 0x20	; 32
    a152:	90 e0       	ldi	r25, 0x00	; 0
    a154:	36 d5       	rcall	.+2668   	; 0xabc2 <fputc>
    a156:	5a 94       	dec	r5
    a158:	f8 cf       	rjmp	.-16     	; 0xa14a <vfprintf+0x2d0>
    a15a:	66 20       	and	r6, r6
    a15c:	21 f0       	breq	.+8      	; 0xa166 <vfprintf+0x2ec>
    a15e:	b7 01       	movw	r22, r14
    a160:	86 2d       	mov	r24, r6
    a162:	90 e0       	ldi	r25, 0x00	; 0
    a164:	2e d5       	rcall	.+2652   	; 0xabc2 <fputc>
    a166:	73 fc       	sbrc	r7, 3
    a168:	08 c0       	rjmp	.+16     	; 0xa17a <vfprintf+0x300>
    a16a:	55 20       	and	r5, r5
    a16c:	31 f0       	breq	.+12     	; 0xa17a <vfprintf+0x300>
    a16e:	b7 01       	movw	r22, r14
    a170:	80 e3       	ldi	r24, 0x30	; 48
    a172:	90 e0       	ldi	r25, 0x00	; 0
    a174:	26 d5       	rcall	.+2636   	; 0xabc2 <fputc>
    a176:	5a 94       	dec	r5
    a178:	f8 cf       	rjmp	.-16     	; 0xa16a <vfprintf+0x2f0>
    a17a:	77 fe       	sbrs	r7, 7
    a17c:	5d c0       	rjmp	.+186    	; 0xa238 <vfprintf+0x3be>
    a17e:	9c 2d       	mov	r25, r12
    a180:	8d 2d       	mov	r24, r13
    a182:	d7 fe       	sbrs	r13, 7
    a184:	02 c0       	rjmp	.+4      	; 0xa18a <vfprintf+0x310>
    a186:	90 e0       	ldi	r25, 0x00	; 0
    a188:	80 e0       	ldi	r24, 0x00	; 0
    a18a:	69 2e       	mov	r6, r25
    a18c:	78 2e       	mov	r7, r24
    a18e:	40 e0       	ldi	r20, 0x00	; 0
    a190:	50 e0       	ldi	r21, 0x00	; 0
    a192:	c6 01       	movw	r24, r12
    a194:	84 19       	sub	r24, r4
    a196:	91 09       	sbc	r25, r1
    a198:	8c 87       	std	Y+12, r24	; 0x0c
    a19a:	9d 87       	std	Y+13, r25	; 0x0d
    a19c:	96 01       	movw	r18, r12
    a19e:	26 19       	sub	r18, r6
    a1a0:	37 09       	sbc	r19, r7
    a1a2:	28 0d       	add	r18, r8
    a1a4:	39 1d       	adc	r19, r9
    a1a6:	81 2f       	mov	r24, r17
    a1a8:	90 e0       	ldi	r25, 0x00	; 0
    a1aa:	ee 27       	eor	r30, r30
    a1ac:	ff 27       	eor	r31, r31
    a1ae:	e8 1b       	sub	r30, r24
    a1b0:	f9 0b       	sbc	r31, r25
    a1b2:	ee 87       	std	Y+14, r30	; 0x0e
    a1b4:	ff 87       	std	Y+15, r31	; 0x0f
    a1b6:	ff ef       	ldi	r31, 0xFF	; 255
    a1b8:	6f 16       	cp	r6, r31
    a1ba:	7f 06       	cpc	r7, r31
    a1bc:	61 f4       	brne	.+24     	; 0xa1d6 <vfprintf+0x35c>
    a1be:	b7 01       	movw	r22, r14
    a1c0:	8e e2       	ldi	r24, 0x2E	; 46
    a1c2:	90 e0       	ldi	r25, 0x00	; 0
    a1c4:	2b 8b       	std	Y+19, r18	; 0x13
    a1c6:	3a 8b       	std	Y+18, r19	; 0x12
    a1c8:	48 8b       	std	Y+16, r20	; 0x10
    a1ca:	59 8b       	std	Y+17, r21	; 0x11
    a1cc:	fa d4       	rcall	.+2548   	; 0xabc2 <fputc>
    a1ce:	59 89       	ldd	r21, Y+17	; 0x11
    a1d0:	48 89       	ldd	r20, Y+16	; 0x10
    a1d2:	3a 89       	ldd	r19, Y+18	; 0x12
    a1d4:	2b 89       	ldd	r18, Y+19	; 0x13
    a1d6:	c6 14       	cp	r12, r6
    a1d8:	d7 04       	cpc	r13, r7
    a1da:	54 f0       	brlt	.+20     	; 0xa1f0 <vfprintf+0x376>
    a1dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    a1de:	7d 85       	ldd	r23, Y+13	; 0x0d
    a1e0:	66 15       	cp	r22, r6
    a1e2:	77 05       	cpc	r23, r7
    a1e4:	2c f4       	brge	.+10     	; 0xa1f0 <vfprintf+0x376>
    a1e6:	f9 01       	movw	r30, r18
    a1e8:	e4 0f       	add	r30, r20
    a1ea:	f5 1f       	adc	r31, r21
    a1ec:	81 81       	ldd	r24, Z+1	; 0x01
    a1ee:	01 c0       	rjmp	.+2      	; 0xa1f2 <vfprintf+0x378>
    a1f0:	80 e3       	ldi	r24, 0x30	; 48
    a1f2:	71 e0       	ldi	r23, 0x01	; 1
    a1f4:	67 1a       	sub	r6, r23
    a1f6:	71 08       	sbc	r7, r1
    a1f8:	4f 5f       	subi	r20, 0xFF	; 255
    a1fa:	5f 4f       	sbci	r21, 0xFF	; 255
    a1fc:	ee 85       	ldd	r30, Y+14	; 0x0e
    a1fe:	ff 85       	ldd	r31, Y+15	; 0x0f
    a200:	6e 16       	cp	r6, r30
    a202:	7f 06       	cpc	r7, r31
    a204:	64 f0       	brlt	.+24     	; 0xa21e <vfprintf+0x3a4>
    a206:	b7 01       	movw	r22, r14
    a208:	90 e0       	ldi	r25, 0x00	; 0
    a20a:	2b 8b       	std	Y+19, r18	; 0x13
    a20c:	3a 8b       	std	Y+18, r19	; 0x12
    a20e:	48 8b       	std	Y+16, r20	; 0x10
    a210:	59 8b       	std	Y+17, r21	; 0x11
    a212:	d7 d4       	rcall	.+2478   	; 0xabc2 <fputc>
    a214:	2b 89       	ldd	r18, Y+19	; 0x13
    a216:	3a 89       	ldd	r19, Y+18	; 0x12
    a218:	48 89       	ldd	r20, Y+16	; 0x10
    a21a:	59 89       	ldd	r21, Y+17	; 0x11
    a21c:	cc cf       	rjmp	.-104    	; 0xa1b6 <vfprintf+0x33c>
    a21e:	6c 14       	cp	r6, r12
    a220:	7d 04       	cpc	r7, r13
    a222:	39 f4       	brne	.+14     	; 0xa232 <vfprintf+0x3b8>
    a224:	9a 81       	ldd	r25, Y+2	; 0x02
    a226:	96 33       	cpi	r25, 0x36	; 54
    a228:	18 f4       	brcc	.+6      	; 0xa230 <vfprintf+0x3b6>
    a22a:	95 33       	cpi	r25, 0x35	; 53
    a22c:	11 f4       	brne	.+4      	; 0xa232 <vfprintf+0x3b8>
    a22e:	04 ff       	sbrs	r16, 4
    a230:	81 e3       	ldi	r24, 0x31	; 49
    a232:	b7 01       	movw	r22, r14
    a234:	90 e0       	ldi	r25, 0x00	; 0
    a236:	45 c0       	rjmp	.+138    	; 0xa2c2 <vfprintf+0x448>
    a238:	8a 81       	ldd	r24, Y+2	; 0x02
    a23a:	81 33       	cpi	r24, 0x31	; 49
    a23c:	09 f0       	breq	.+2      	; 0xa240 <vfprintf+0x3c6>
    a23e:	0f 7e       	andi	r16, 0xEF	; 239
    a240:	b7 01       	movw	r22, r14
    a242:	90 e0       	ldi	r25, 0x00	; 0
    a244:	be d4       	rcall	.+2428   	; 0xabc2 <fputc>
    a246:	11 11       	cpse	r17, r1
    a248:	05 c0       	rjmp	.+10     	; 0xa254 <vfprintf+0x3da>
    a24a:	74 fe       	sbrs	r7, 4
    a24c:	16 c0       	rjmp	.+44     	; 0xa27a <vfprintf+0x400>
    a24e:	85 e4       	ldi	r24, 0x45	; 69
    a250:	90 e0       	ldi	r25, 0x00	; 0
    a252:	15 c0       	rjmp	.+42     	; 0xa27e <vfprintf+0x404>
    a254:	b7 01       	movw	r22, r14
    a256:	8e e2       	ldi	r24, 0x2E	; 46
    a258:	90 e0       	ldi	r25, 0x00	; 0
    a25a:	b3 d4       	rcall	.+2406   	; 0xabc2 <fputc>
    a25c:	82 e0       	ldi	r24, 0x02	; 2
    a25e:	66 24       	eor	r6, r6
    a260:	63 94       	inc	r6
    a262:	68 0e       	add	r6, r24
    a264:	f4 01       	movw	r30, r8
    a266:	e8 0f       	add	r30, r24
    a268:	f1 1d       	adc	r31, r1
    a26a:	80 81       	ld	r24, Z
    a26c:	b7 01       	movw	r22, r14
    a26e:	90 e0       	ldi	r25, 0x00	; 0
    a270:	a8 d4       	rcall	.+2384   	; 0xabc2 <fputc>
    a272:	11 50       	subi	r17, 0x01	; 1
    a274:	51 f3       	breq	.-44     	; 0xa24a <vfprintf+0x3d0>
    a276:	86 2d       	mov	r24, r6
    a278:	f2 cf       	rjmp	.-28     	; 0xa25e <vfprintf+0x3e4>
    a27a:	85 e6       	ldi	r24, 0x65	; 101
    a27c:	90 e0       	ldi	r25, 0x00	; 0
    a27e:	b7 01       	movw	r22, r14
    a280:	a0 d4       	rcall	.+2368   	; 0xabc2 <fputc>
    a282:	d7 fc       	sbrc	r13, 7
    a284:	05 c0       	rjmp	.+10     	; 0xa290 <vfprintf+0x416>
    a286:	c1 14       	cp	r12, r1
    a288:	d1 04       	cpc	r13, r1
    a28a:	39 f4       	brne	.+14     	; 0xa29a <vfprintf+0x420>
    a28c:	04 ff       	sbrs	r16, 4
    a28e:	05 c0       	rjmp	.+10     	; 0xa29a <vfprintf+0x420>
    a290:	d1 94       	neg	r13
    a292:	c1 94       	neg	r12
    a294:	d1 08       	sbc	r13, r1
    a296:	8d e2       	ldi	r24, 0x2D	; 45
    a298:	01 c0       	rjmp	.+2      	; 0xa29c <vfprintf+0x422>
    a29a:	8b e2       	ldi	r24, 0x2B	; 43
    a29c:	b7 01       	movw	r22, r14
    a29e:	90 e0       	ldi	r25, 0x00	; 0
    a2a0:	90 d4       	rcall	.+2336   	; 0xabc2 <fputc>
    a2a2:	80 e3       	ldi	r24, 0x30	; 48
    a2a4:	6a e0       	ldi	r22, 0x0A	; 10
    a2a6:	c6 16       	cp	r12, r22
    a2a8:	d1 04       	cpc	r13, r1
    a2aa:	2c f0       	brlt	.+10     	; 0xa2b6 <vfprintf+0x43c>
    a2ac:	8f 5f       	subi	r24, 0xFF	; 255
    a2ae:	fa e0       	ldi	r31, 0x0A	; 10
    a2b0:	cf 1a       	sub	r12, r31
    a2b2:	d1 08       	sbc	r13, r1
    a2b4:	f7 cf       	rjmp	.-18     	; 0xa2a4 <vfprintf+0x42a>
    a2b6:	b7 01       	movw	r22, r14
    a2b8:	90 e0       	ldi	r25, 0x00	; 0
    a2ba:	83 d4       	rcall	.+2310   	; 0xabc2 <fputc>
    a2bc:	b7 01       	movw	r22, r14
    a2be:	c6 01       	movw	r24, r12
    a2c0:	c0 96       	adiw	r24, 0x30	; 48
    a2c2:	7f d4       	rcall	.+2302   	; 0xabc2 <fputc>
    a2c4:	36 c1       	rjmp	.+620    	; 0xa532 <vfprintf+0x6b8>
    a2c6:	83 36       	cpi	r24, 0x63	; 99
    a2c8:	31 f0       	breq	.+12     	; 0xa2d6 <vfprintf+0x45c>
    a2ca:	83 37       	cpi	r24, 0x73	; 115
    a2cc:	79 f0       	breq	.+30     	; 0xa2ec <vfprintf+0x472>
    a2ce:	83 35       	cpi	r24, 0x53	; 83
    a2d0:	09 f0       	breq	.+2      	; 0xa2d4 <vfprintf+0x45a>
    a2d2:	54 c0       	rjmp	.+168    	; 0xa37c <vfprintf+0x502>
    a2d4:	20 c0       	rjmp	.+64     	; 0xa316 <vfprintf+0x49c>
    a2d6:	56 01       	movw	r10, r12
    a2d8:	72 e0       	ldi	r23, 0x02	; 2
    a2da:	a7 0e       	add	r10, r23
    a2dc:	b1 1c       	adc	r11, r1
    a2de:	f6 01       	movw	r30, r12
    a2e0:	80 81       	ld	r24, Z
    a2e2:	89 83       	std	Y+1, r24	; 0x01
    a2e4:	01 e0       	ldi	r16, 0x01	; 1
    a2e6:	10 e0       	ldi	r17, 0x00	; 0
    a2e8:	64 01       	movw	r12, r8
    a2ea:	13 c0       	rjmp	.+38     	; 0xa312 <vfprintf+0x498>
    a2ec:	56 01       	movw	r10, r12
    a2ee:	f2 e0       	ldi	r31, 0x02	; 2
    a2f0:	af 0e       	add	r10, r31
    a2f2:	b1 1c       	adc	r11, r1
    a2f4:	f6 01       	movw	r30, r12
    a2f6:	c0 80       	ld	r12, Z
    a2f8:	d1 80       	ldd	r13, Z+1	; 0x01
    a2fa:	26 ff       	sbrs	r18, 6
    a2fc:	03 c0       	rjmp	.+6      	; 0xa304 <vfprintf+0x48a>
    a2fe:	61 2f       	mov	r22, r17
    a300:	70 e0       	ldi	r23, 0x00	; 0
    a302:	02 c0       	rjmp	.+4      	; 0xa308 <vfprintf+0x48e>
    a304:	6f ef       	ldi	r22, 0xFF	; 255
    a306:	7f ef       	ldi	r23, 0xFF	; 255
    a308:	c6 01       	movw	r24, r12
    a30a:	2b 8b       	std	Y+19, r18	; 0x13
    a30c:	07 d4       	rcall	.+2062   	; 0xab1c <strnlen>
    a30e:	8c 01       	movw	r16, r24
    a310:	2b 89       	ldd	r18, Y+19	; 0x13
    a312:	2f 77       	andi	r18, 0x7F	; 127
    a314:	14 c0       	rjmp	.+40     	; 0xa33e <vfprintf+0x4c4>
    a316:	56 01       	movw	r10, r12
    a318:	f2 e0       	ldi	r31, 0x02	; 2
    a31a:	af 0e       	add	r10, r31
    a31c:	b1 1c       	adc	r11, r1
    a31e:	f6 01       	movw	r30, r12
    a320:	c0 80       	ld	r12, Z
    a322:	d1 80       	ldd	r13, Z+1	; 0x01
    a324:	26 ff       	sbrs	r18, 6
    a326:	03 c0       	rjmp	.+6      	; 0xa32e <vfprintf+0x4b4>
    a328:	61 2f       	mov	r22, r17
    a32a:	70 e0       	ldi	r23, 0x00	; 0
    a32c:	02 c0       	rjmp	.+4      	; 0xa332 <vfprintf+0x4b8>
    a32e:	6f ef       	ldi	r22, 0xFF	; 255
    a330:	7f ef       	ldi	r23, 0xFF	; 255
    a332:	c6 01       	movw	r24, r12
    a334:	2b 8b       	std	Y+19, r18	; 0x13
    a336:	ab d3       	rcall	.+1878   	; 0xaa8e <strnlen_P>
    a338:	8c 01       	movw	r16, r24
    a33a:	2b 89       	ldd	r18, Y+19	; 0x13
    a33c:	20 68       	ori	r18, 0x80	; 128
    a33e:	72 2e       	mov	r7, r18
    a340:	23 fd       	sbrc	r18, 3
    a342:	18 c0       	rjmp	.+48     	; 0xa374 <vfprintf+0x4fa>
    a344:	85 2d       	mov	r24, r5
    a346:	90 e0       	ldi	r25, 0x00	; 0
    a348:	08 17       	cp	r16, r24
    a34a:	19 07       	cpc	r17, r25
    a34c:	98 f4       	brcc	.+38     	; 0xa374 <vfprintf+0x4fa>
    a34e:	b7 01       	movw	r22, r14
    a350:	80 e2       	ldi	r24, 0x20	; 32
    a352:	90 e0       	ldi	r25, 0x00	; 0
    a354:	36 d4       	rcall	.+2156   	; 0xabc2 <fputc>
    a356:	5a 94       	dec	r5
    a358:	f5 cf       	rjmp	.-22     	; 0xa344 <vfprintf+0x4ca>
    a35a:	f6 01       	movw	r30, r12
    a35c:	77 fc       	sbrc	r7, 7
    a35e:	85 91       	lpm	r24, Z+
    a360:	77 fe       	sbrs	r7, 7
    a362:	81 91       	ld	r24, Z+
    a364:	6f 01       	movw	r12, r30
    a366:	b7 01       	movw	r22, r14
    a368:	90 e0       	ldi	r25, 0x00	; 0
    a36a:	2b d4       	rcall	.+2134   	; 0xabc2 <fputc>
    a36c:	51 10       	cpse	r5, r1
    a36e:	5a 94       	dec	r5
    a370:	01 50       	subi	r16, 0x01	; 1
    a372:	11 09       	sbc	r17, r1
    a374:	01 15       	cp	r16, r1
    a376:	11 05       	cpc	r17, r1
    a378:	81 f7       	brne	.-32     	; 0xa35a <vfprintf+0x4e0>
    a37a:	db c0       	rjmp	.+438    	; 0xa532 <vfprintf+0x6b8>
    a37c:	84 36       	cpi	r24, 0x64	; 100
    a37e:	11 f0       	breq	.+4      	; 0xa384 <vfprintf+0x50a>
    a380:	89 36       	cpi	r24, 0x69	; 105
    a382:	49 f5       	brne	.+82     	; 0xa3d6 <vfprintf+0x55c>
    a384:	56 01       	movw	r10, r12
    a386:	27 ff       	sbrs	r18, 7
    a388:	09 c0       	rjmp	.+18     	; 0xa39c <vfprintf+0x522>
    a38a:	f4 e0       	ldi	r31, 0x04	; 4
    a38c:	af 0e       	add	r10, r31
    a38e:	b1 1c       	adc	r11, r1
    a390:	f6 01       	movw	r30, r12
    a392:	60 81       	ld	r22, Z
    a394:	71 81       	ldd	r23, Z+1	; 0x01
    a396:	82 81       	ldd	r24, Z+2	; 0x02
    a398:	93 81       	ldd	r25, Z+3	; 0x03
    a39a:	0a c0       	rjmp	.+20     	; 0xa3b0 <vfprintf+0x536>
    a39c:	f2 e0       	ldi	r31, 0x02	; 2
    a39e:	af 0e       	add	r10, r31
    a3a0:	b1 1c       	adc	r11, r1
    a3a2:	f6 01       	movw	r30, r12
    a3a4:	60 81       	ld	r22, Z
    a3a6:	71 81       	ldd	r23, Z+1	; 0x01
    a3a8:	88 27       	eor	r24, r24
    a3aa:	77 fd       	sbrc	r23, 7
    a3ac:	80 95       	com	r24
    a3ae:	98 2f       	mov	r25, r24
    a3b0:	02 2f       	mov	r16, r18
    a3b2:	0f 76       	andi	r16, 0x6F	; 111
    a3b4:	97 ff       	sbrs	r25, 7
    a3b6:	08 c0       	rjmp	.+16     	; 0xa3c8 <vfprintf+0x54e>
    a3b8:	90 95       	com	r25
    a3ba:	80 95       	com	r24
    a3bc:	70 95       	com	r23
    a3be:	61 95       	neg	r22
    a3c0:	7f 4f       	sbci	r23, 0xFF	; 255
    a3c2:	8f 4f       	sbci	r24, 0xFF	; 255
    a3c4:	9f 4f       	sbci	r25, 0xFF	; 255
    a3c6:	00 68       	ori	r16, 0x80	; 128
    a3c8:	2a e0       	ldi	r18, 0x0A	; 10
    a3ca:	30 e0       	ldi	r19, 0x00	; 0
    a3cc:	a4 01       	movw	r20, r8
    a3ce:	84 d4       	rcall	.+2312   	; 0xacd8 <__ultoa_invert>
    a3d0:	c8 2e       	mov	r12, r24
    a3d2:	c8 18       	sub	r12, r8
    a3d4:	3d c0       	rjmp	.+122    	; 0xa450 <vfprintf+0x5d6>
    a3d6:	02 2f       	mov	r16, r18
    a3d8:	85 37       	cpi	r24, 0x75	; 117
    a3da:	21 f4       	brne	.+8      	; 0xa3e4 <vfprintf+0x56a>
    a3dc:	0f 7e       	andi	r16, 0xEF	; 239
    a3de:	2a e0       	ldi	r18, 0x0A	; 10
    a3e0:	30 e0       	ldi	r19, 0x00	; 0
    a3e2:	1d c0       	rjmp	.+58     	; 0xa41e <vfprintf+0x5a4>
    a3e4:	09 7f       	andi	r16, 0xF9	; 249
    a3e6:	8f 36       	cpi	r24, 0x6F	; 111
    a3e8:	91 f0       	breq	.+36     	; 0xa40e <vfprintf+0x594>
    a3ea:	18 f4       	brcc	.+6      	; 0xa3f2 <vfprintf+0x578>
    a3ec:	88 35       	cpi	r24, 0x58	; 88
    a3ee:	59 f0       	breq	.+22     	; 0xa406 <vfprintf+0x58c>
    a3f0:	a9 c0       	rjmp	.+338    	; 0xa544 <vfprintf+0x6ca>
    a3f2:	80 37       	cpi	r24, 0x70	; 112
    a3f4:	19 f0       	breq	.+6      	; 0xa3fc <vfprintf+0x582>
    a3f6:	88 37       	cpi	r24, 0x78	; 120
    a3f8:	11 f0       	breq	.+4      	; 0xa3fe <vfprintf+0x584>
    a3fa:	a4 c0       	rjmp	.+328    	; 0xa544 <vfprintf+0x6ca>
    a3fc:	00 61       	ori	r16, 0x10	; 16
    a3fe:	04 ff       	sbrs	r16, 4
    a400:	09 c0       	rjmp	.+18     	; 0xa414 <vfprintf+0x59a>
    a402:	04 60       	ori	r16, 0x04	; 4
    a404:	07 c0       	rjmp	.+14     	; 0xa414 <vfprintf+0x59a>
    a406:	24 ff       	sbrs	r18, 4
    a408:	08 c0       	rjmp	.+16     	; 0xa41a <vfprintf+0x5a0>
    a40a:	06 60       	ori	r16, 0x06	; 6
    a40c:	06 c0       	rjmp	.+12     	; 0xa41a <vfprintf+0x5a0>
    a40e:	28 e0       	ldi	r18, 0x08	; 8
    a410:	30 e0       	ldi	r19, 0x00	; 0
    a412:	05 c0       	rjmp	.+10     	; 0xa41e <vfprintf+0x5a4>
    a414:	20 e1       	ldi	r18, 0x10	; 16
    a416:	30 e0       	ldi	r19, 0x00	; 0
    a418:	02 c0       	rjmp	.+4      	; 0xa41e <vfprintf+0x5a4>
    a41a:	20 e1       	ldi	r18, 0x10	; 16
    a41c:	32 e0       	ldi	r19, 0x02	; 2
    a41e:	56 01       	movw	r10, r12
    a420:	07 ff       	sbrs	r16, 7
    a422:	09 c0       	rjmp	.+18     	; 0xa436 <vfprintf+0x5bc>
    a424:	f4 e0       	ldi	r31, 0x04	; 4
    a426:	af 0e       	add	r10, r31
    a428:	b1 1c       	adc	r11, r1
    a42a:	f6 01       	movw	r30, r12
    a42c:	60 81       	ld	r22, Z
    a42e:	71 81       	ldd	r23, Z+1	; 0x01
    a430:	82 81       	ldd	r24, Z+2	; 0x02
    a432:	93 81       	ldd	r25, Z+3	; 0x03
    a434:	08 c0       	rjmp	.+16     	; 0xa446 <vfprintf+0x5cc>
    a436:	f2 e0       	ldi	r31, 0x02	; 2
    a438:	af 0e       	add	r10, r31
    a43a:	b1 1c       	adc	r11, r1
    a43c:	f6 01       	movw	r30, r12
    a43e:	60 81       	ld	r22, Z
    a440:	71 81       	ldd	r23, Z+1	; 0x01
    a442:	80 e0       	ldi	r24, 0x00	; 0
    a444:	90 e0       	ldi	r25, 0x00	; 0
    a446:	a4 01       	movw	r20, r8
    a448:	47 d4       	rcall	.+2190   	; 0xacd8 <__ultoa_invert>
    a44a:	c8 2e       	mov	r12, r24
    a44c:	c8 18       	sub	r12, r8
    a44e:	0f 77       	andi	r16, 0x7F	; 127
    a450:	06 ff       	sbrs	r16, 6
    a452:	0b c0       	rjmp	.+22     	; 0xa46a <vfprintf+0x5f0>
    a454:	20 2f       	mov	r18, r16
    a456:	2e 7f       	andi	r18, 0xFE	; 254
    a458:	c1 16       	cp	r12, r17
    a45a:	50 f4       	brcc	.+20     	; 0xa470 <vfprintf+0x5f6>
    a45c:	04 ff       	sbrs	r16, 4
    a45e:	0a c0       	rjmp	.+20     	; 0xa474 <vfprintf+0x5fa>
    a460:	02 fd       	sbrc	r16, 2
    a462:	08 c0       	rjmp	.+16     	; 0xa474 <vfprintf+0x5fa>
    a464:	20 2f       	mov	r18, r16
    a466:	2e 7e       	andi	r18, 0xEE	; 238
    a468:	05 c0       	rjmp	.+10     	; 0xa474 <vfprintf+0x5fa>
    a46a:	dc 2c       	mov	r13, r12
    a46c:	20 2f       	mov	r18, r16
    a46e:	03 c0       	rjmp	.+6      	; 0xa476 <vfprintf+0x5fc>
    a470:	dc 2c       	mov	r13, r12
    a472:	01 c0       	rjmp	.+2      	; 0xa476 <vfprintf+0x5fc>
    a474:	d1 2e       	mov	r13, r17
    a476:	24 ff       	sbrs	r18, 4
    a478:	0d c0       	rjmp	.+26     	; 0xa494 <vfprintf+0x61a>
    a47a:	fe 01       	movw	r30, r28
    a47c:	ec 0d       	add	r30, r12
    a47e:	f1 1d       	adc	r31, r1
    a480:	80 81       	ld	r24, Z
    a482:	80 33       	cpi	r24, 0x30	; 48
    a484:	11 f4       	brne	.+4      	; 0xa48a <vfprintf+0x610>
    a486:	29 7e       	andi	r18, 0xE9	; 233
    a488:	09 c0       	rjmp	.+18     	; 0xa49c <vfprintf+0x622>
    a48a:	22 ff       	sbrs	r18, 2
    a48c:	06 c0       	rjmp	.+12     	; 0xa49a <vfprintf+0x620>
    a48e:	d3 94       	inc	r13
    a490:	d3 94       	inc	r13
    a492:	04 c0       	rjmp	.+8      	; 0xa49c <vfprintf+0x622>
    a494:	82 2f       	mov	r24, r18
    a496:	86 78       	andi	r24, 0x86	; 134
    a498:	09 f0       	breq	.+2      	; 0xa49c <vfprintf+0x622>
    a49a:	d3 94       	inc	r13
    a49c:	23 fd       	sbrc	r18, 3
    a49e:	12 c0       	rjmp	.+36     	; 0xa4c4 <vfprintf+0x64a>
    a4a0:	20 ff       	sbrs	r18, 0
    a4a2:	06 c0       	rjmp	.+12     	; 0xa4b0 <vfprintf+0x636>
    a4a4:	1c 2d       	mov	r17, r12
    a4a6:	d5 14       	cp	r13, r5
    a4a8:	18 f4       	brcc	.+6      	; 0xa4b0 <vfprintf+0x636>
    a4aa:	15 0d       	add	r17, r5
    a4ac:	1d 19       	sub	r17, r13
    a4ae:	d5 2c       	mov	r13, r5
    a4b0:	d5 14       	cp	r13, r5
    a4b2:	60 f4       	brcc	.+24     	; 0xa4cc <vfprintf+0x652>
    a4b4:	b7 01       	movw	r22, r14
    a4b6:	80 e2       	ldi	r24, 0x20	; 32
    a4b8:	90 e0       	ldi	r25, 0x00	; 0
    a4ba:	2b 8b       	std	Y+19, r18	; 0x13
    a4bc:	82 d3       	rcall	.+1796   	; 0xabc2 <fputc>
    a4be:	d3 94       	inc	r13
    a4c0:	2b 89       	ldd	r18, Y+19	; 0x13
    a4c2:	f6 cf       	rjmp	.-20     	; 0xa4b0 <vfprintf+0x636>
    a4c4:	d5 14       	cp	r13, r5
    a4c6:	10 f4       	brcc	.+4      	; 0xa4cc <vfprintf+0x652>
    a4c8:	5d 18       	sub	r5, r13
    a4ca:	01 c0       	rjmp	.+2      	; 0xa4ce <vfprintf+0x654>
    a4cc:	51 2c       	mov	r5, r1
    a4ce:	24 ff       	sbrs	r18, 4
    a4d0:	11 c0       	rjmp	.+34     	; 0xa4f4 <vfprintf+0x67a>
    a4d2:	b7 01       	movw	r22, r14
    a4d4:	80 e3       	ldi	r24, 0x30	; 48
    a4d6:	90 e0       	ldi	r25, 0x00	; 0
    a4d8:	2b 8b       	std	Y+19, r18	; 0x13
    a4da:	73 d3       	rcall	.+1766   	; 0xabc2 <fputc>
    a4dc:	2b 89       	ldd	r18, Y+19	; 0x13
    a4de:	22 ff       	sbrs	r18, 2
    a4e0:	16 c0       	rjmp	.+44     	; 0xa50e <vfprintf+0x694>
    a4e2:	21 ff       	sbrs	r18, 1
    a4e4:	03 c0       	rjmp	.+6      	; 0xa4ec <vfprintf+0x672>
    a4e6:	88 e5       	ldi	r24, 0x58	; 88
    a4e8:	90 e0       	ldi	r25, 0x00	; 0
    a4ea:	02 c0       	rjmp	.+4      	; 0xa4f0 <vfprintf+0x676>
    a4ec:	88 e7       	ldi	r24, 0x78	; 120
    a4ee:	90 e0       	ldi	r25, 0x00	; 0
    a4f0:	b7 01       	movw	r22, r14
    a4f2:	0c c0       	rjmp	.+24     	; 0xa50c <vfprintf+0x692>
    a4f4:	82 2f       	mov	r24, r18
    a4f6:	86 78       	andi	r24, 0x86	; 134
    a4f8:	51 f0       	breq	.+20     	; 0xa50e <vfprintf+0x694>
    a4fa:	21 fd       	sbrc	r18, 1
    a4fc:	02 c0       	rjmp	.+4      	; 0xa502 <vfprintf+0x688>
    a4fe:	80 e2       	ldi	r24, 0x20	; 32
    a500:	01 c0       	rjmp	.+2      	; 0xa504 <vfprintf+0x68a>
    a502:	8b e2       	ldi	r24, 0x2B	; 43
    a504:	27 fd       	sbrc	r18, 7
    a506:	8d e2       	ldi	r24, 0x2D	; 45
    a508:	b7 01       	movw	r22, r14
    a50a:	90 e0       	ldi	r25, 0x00	; 0
    a50c:	5a d3       	rcall	.+1716   	; 0xabc2 <fputc>
    a50e:	c1 16       	cp	r12, r17
    a510:	30 f4       	brcc	.+12     	; 0xa51e <vfprintf+0x6a4>
    a512:	b7 01       	movw	r22, r14
    a514:	80 e3       	ldi	r24, 0x30	; 48
    a516:	90 e0       	ldi	r25, 0x00	; 0
    a518:	54 d3       	rcall	.+1704   	; 0xabc2 <fputc>
    a51a:	11 50       	subi	r17, 0x01	; 1
    a51c:	f8 cf       	rjmp	.-16     	; 0xa50e <vfprintf+0x694>
    a51e:	ca 94       	dec	r12
    a520:	f4 01       	movw	r30, r8
    a522:	ec 0d       	add	r30, r12
    a524:	f1 1d       	adc	r31, r1
    a526:	80 81       	ld	r24, Z
    a528:	b7 01       	movw	r22, r14
    a52a:	90 e0       	ldi	r25, 0x00	; 0
    a52c:	4a d3       	rcall	.+1684   	; 0xabc2 <fputc>
    a52e:	c1 10       	cpse	r12, r1
    a530:	f6 cf       	rjmp	.-20     	; 0xa51e <vfprintf+0x6a4>
    a532:	55 20       	and	r5, r5
    a534:	09 f4       	brne	.+2      	; 0xa538 <vfprintf+0x6be>
    a536:	dd cc       	rjmp	.-1606   	; 0x9ef2 <vfprintf+0x78>
    a538:	b7 01       	movw	r22, r14
    a53a:	80 e2       	ldi	r24, 0x20	; 32
    a53c:	90 e0       	ldi	r25, 0x00	; 0
    a53e:	41 d3       	rcall	.+1666   	; 0xabc2 <fputc>
    a540:	5a 94       	dec	r5
    a542:	f7 cf       	rjmp	.-18     	; 0xa532 <vfprintf+0x6b8>
    a544:	f7 01       	movw	r30, r14
    a546:	86 81       	ldd	r24, Z+6	; 0x06
    a548:	97 81       	ldd	r25, Z+7	; 0x07
    a54a:	02 c0       	rjmp	.+4      	; 0xa550 <vfprintf+0x6d6>
    a54c:	8f ef       	ldi	r24, 0xFF	; 255
    a54e:	9f ef       	ldi	r25, 0xFF	; 255
    a550:	63 96       	adiw	r28, 0x13	; 19
    a552:	cd bf       	out	0x3d, r28	; 61
    a554:	de bf       	out	0x3e, r29	; 62
    a556:	df 91       	pop	r29
    a558:	cf 91       	pop	r28
    a55a:	1f 91       	pop	r17
    a55c:	0f 91       	pop	r16
    a55e:	ff 90       	pop	r15
    a560:	ef 90       	pop	r14
    a562:	df 90       	pop	r13
    a564:	cf 90       	pop	r12
    a566:	bf 90       	pop	r11
    a568:	af 90       	pop	r10
    a56a:	9f 90       	pop	r9
    a56c:	8f 90       	pop	r8
    a56e:	7f 90       	pop	r7
    a570:	6f 90       	pop	r6
    a572:	5f 90       	pop	r5
    a574:	4f 90       	pop	r4
    a576:	3f 90       	pop	r3
    a578:	2f 90       	pop	r2
    a57a:	08 95       	ret

0000a57c <__udivmodhi4>:
    a57c:	aa 1b       	sub	r26, r26
    a57e:	bb 1b       	sub	r27, r27
    a580:	51 e1       	ldi	r21, 0x11	; 17
    a582:	07 c0       	rjmp	.+14     	; 0xa592 <__udivmodhi4_ep>

0000a584 <__udivmodhi4_loop>:
    a584:	aa 1f       	adc	r26, r26
    a586:	bb 1f       	adc	r27, r27
    a588:	a6 17       	cp	r26, r22
    a58a:	b7 07       	cpc	r27, r23
    a58c:	10 f0       	brcs	.+4      	; 0xa592 <__udivmodhi4_ep>
    a58e:	a6 1b       	sub	r26, r22
    a590:	b7 0b       	sbc	r27, r23

0000a592 <__udivmodhi4_ep>:
    a592:	88 1f       	adc	r24, r24
    a594:	99 1f       	adc	r25, r25
    a596:	5a 95       	dec	r21
    a598:	a9 f7       	brne	.-22     	; 0xa584 <__udivmodhi4_loop>
    a59a:	80 95       	com	r24
    a59c:	90 95       	com	r25
    a59e:	bc 01       	movw	r22, r24
    a5a0:	cd 01       	movw	r24, r26
    a5a2:	08 95       	ret

0000a5a4 <__divmodhi4>:
    a5a4:	97 fb       	bst	r25, 7
    a5a6:	07 2e       	mov	r0, r23
    a5a8:	16 f4       	brtc	.+4      	; 0xa5ae <__divmodhi4+0xa>
    a5aa:	00 94       	com	r0
    a5ac:	06 d0       	rcall	.+12     	; 0xa5ba <__divmodhi4_neg1>
    a5ae:	77 fd       	sbrc	r23, 7
    a5b0:	08 d0       	rcall	.+16     	; 0xa5c2 <__divmodhi4_neg2>
    a5b2:	e4 df       	rcall	.-56     	; 0xa57c <__udivmodhi4>
    a5b4:	07 fc       	sbrc	r0, 7
    a5b6:	05 d0       	rcall	.+10     	; 0xa5c2 <__divmodhi4_neg2>
    a5b8:	3e f4       	brtc	.+14     	; 0xa5c8 <__divmodhi4_exit>

0000a5ba <__divmodhi4_neg1>:
    a5ba:	90 95       	com	r25
    a5bc:	81 95       	neg	r24
    a5be:	9f 4f       	sbci	r25, 0xFF	; 255
    a5c0:	08 95       	ret

0000a5c2 <__divmodhi4_neg2>:
    a5c2:	70 95       	com	r23
    a5c4:	61 95       	neg	r22
    a5c6:	7f 4f       	sbci	r23, 0xFF	; 255

0000a5c8 <__divmodhi4_exit>:
    a5c8:	08 95       	ret

0000a5ca <__udivmodsi4>:
    a5ca:	a1 e2       	ldi	r26, 0x21	; 33
    a5cc:	1a 2e       	mov	r1, r26
    a5ce:	aa 1b       	sub	r26, r26
    a5d0:	bb 1b       	sub	r27, r27
    a5d2:	fd 01       	movw	r30, r26
    a5d4:	0d c0       	rjmp	.+26     	; 0xa5f0 <__udivmodsi4_ep>

0000a5d6 <__udivmodsi4_loop>:
    a5d6:	aa 1f       	adc	r26, r26
    a5d8:	bb 1f       	adc	r27, r27
    a5da:	ee 1f       	adc	r30, r30
    a5dc:	ff 1f       	adc	r31, r31
    a5de:	a2 17       	cp	r26, r18
    a5e0:	b3 07       	cpc	r27, r19
    a5e2:	e4 07       	cpc	r30, r20
    a5e4:	f5 07       	cpc	r31, r21
    a5e6:	20 f0       	brcs	.+8      	; 0xa5f0 <__udivmodsi4_ep>
    a5e8:	a2 1b       	sub	r26, r18
    a5ea:	b3 0b       	sbc	r27, r19
    a5ec:	e4 0b       	sbc	r30, r20
    a5ee:	f5 0b       	sbc	r31, r21

0000a5f0 <__udivmodsi4_ep>:
    a5f0:	66 1f       	adc	r22, r22
    a5f2:	77 1f       	adc	r23, r23
    a5f4:	88 1f       	adc	r24, r24
    a5f6:	99 1f       	adc	r25, r25
    a5f8:	1a 94       	dec	r1
    a5fa:	69 f7       	brne	.-38     	; 0xa5d6 <__udivmodsi4_loop>
    a5fc:	60 95       	com	r22
    a5fe:	70 95       	com	r23
    a600:	80 95       	com	r24
    a602:	90 95       	com	r25
    a604:	9b 01       	movw	r18, r22
    a606:	ac 01       	movw	r20, r24
    a608:	bd 01       	movw	r22, r26
    a60a:	cf 01       	movw	r24, r30
    a60c:	08 95       	ret

0000a60e <__tablejump2__>:
    a60e:	ee 0f       	add	r30, r30
    a610:	ff 1f       	adc	r31, r31

0000a612 <__tablejump__>:
    a612:	05 90       	lpm	r0, Z+
    a614:	f4 91       	lpm	r31, Z
    a616:	e0 2d       	mov	r30, r0
    a618:	09 94       	ijmp

0000a61a <__umulhisi3>:
    a61a:	a2 9f       	mul	r26, r18
    a61c:	b0 01       	movw	r22, r0
    a61e:	b3 9f       	mul	r27, r19
    a620:	c0 01       	movw	r24, r0
    a622:	a3 9f       	mul	r26, r19
    a624:	70 0d       	add	r23, r0
    a626:	81 1d       	adc	r24, r1
    a628:	11 24       	eor	r1, r1
    a62a:	91 1d       	adc	r25, r1
    a62c:	b2 9f       	mul	r27, r18
    a62e:	70 0d       	add	r23, r0
    a630:	81 1d       	adc	r24, r1
    a632:	11 24       	eor	r1, r1
    a634:	91 1d       	adc	r25, r1
    a636:	08 95       	ret

0000a638 <__muluhisi3>:
    a638:	f0 df       	rcall	.-32     	; 0xa61a <__umulhisi3>
    a63a:	a5 9f       	mul	r26, r21
    a63c:	90 0d       	add	r25, r0
    a63e:	b4 9f       	mul	r27, r20
    a640:	90 0d       	add	r25, r0
    a642:	a4 9f       	mul	r26, r20
    a644:	80 0d       	add	r24, r0
    a646:	91 1d       	adc	r25, r1
    a648:	11 24       	eor	r1, r1
    a64a:	08 95       	ret

0000a64c <calloc>:
    a64c:	0f 93       	push	r16
    a64e:	1f 93       	push	r17
    a650:	cf 93       	push	r28
    a652:	df 93       	push	r29
    a654:	86 9f       	mul	r24, r22
    a656:	80 01       	movw	r16, r0
    a658:	87 9f       	mul	r24, r23
    a65a:	10 0d       	add	r17, r0
    a65c:	96 9f       	mul	r25, r22
    a65e:	10 0d       	add	r17, r0
    a660:	11 24       	eor	r1, r1
    a662:	c8 01       	movw	r24, r16
    a664:	0d d0       	rcall	.+26     	; 0xa680 <malloc>
    a666:	ec 01       	movw	r28, r24
    a668:	00 97       	sbiw	r24, 0x00	; 0
    a66a:	21 f0       	breq	.+8      	; 0xa674 <calloc+0x28>
    a66c:	a8 01       	movw	r20, r16
    a66e:	60 e0       	ldi	r22, 0x00	; 0
    a670:	70 e0       	ldi	r23, 0x00	; 0
    a672:	21 d2       	rcall	.+1090   	; 0xaab6 <memset>
    a674:	ce 01       	movw	r24, r28
    a676:	df 91       	pop	r29
    a678:	cf 91       	pop	r28
    a67a:	1f 91       	pop	r17
    a67c:	0f 91       	pop	r16
    a67e:	08 95       	ret

0000a680 <malloc>:
    a680:	cf 93       	push	r28
    a682:	df 93       	push	r29
    a684:	82 30       	cpi	r24, 0x02	; 2
    a686:	91 05       	cpc	r25, r1
    a688:	10 f4       	brcc	.+4      	; 0xa68e <malloc+0xe>
    a68a:	82 e0       	ldi	r24, 0x02	; 2
    a68c:	90 e0       	ldi	r25, 0x00	; 0
    a68e:	e0 91 d6 2c 	lds	r30, 0x2CD6
    a692:	f0 91 d7 2c 	lds	r31, 0x2CD7
    a696:	20 e0       	ldi	r18, 0x00	; 0
    a698:	30 e0       	ldi	r19, 0x00	; 0
    a69a:	a0 e0       	ldi	r26, 0x00	; 0
    a69c:	b0 e0       	ldi	r27, 0x00	; 0
    a69e:	30 97       	sbiw	r30, 0x00	; 0
    a6a0:	39 f1       	breq	.+78     	; 0xa6f0 <malloc+0x70>
    a6a2:	40 81       	ld	r20, Z
    a6a4:	51 81       	ldd	r21, Z+1	; 0x01
    a6a6:	48 17       	cp	r20, r24
    a6a8:	59 07       	cpc	r21, r25
    a6aa:	b8 f0       	brcs	.+46     	; 0xa6da <malloc+0x5a>
    a6ac:	48 17       	cp	r20, r24
    a6ae:	59 07       	cpc	r21, r25
    a6b0:	71 f4       	brne	.+28     	; 0xa6ce <malloc+0x4e>
    a6b2:	82 81       	ldd	r24, Z+2	; 0x02
    a6b4:	93 81       	ldd	r25, Z+3	; 0x03
    a6b6:	10 97       	sbiw	r26, 0x00	; 0
    a6b8:	29 f0       	breq	.+10     	; 0xa6c4 <malloc+0x44>
    a6ba:	12 96       	adiw	r26, 0x02	; 2
    a6bc:	8d 93       	st	X+, r24
    a6be:	9c 93       	st	X, r25
    a6c0:	13 97       	sbiw	r26, 0x03	; 3
    a6c2:	2c c0       	rjmp	.+88     	; 0xa71c <malloc+0x9c>
    a6c4:	80 93 d6 2c 	sts	0x2CD6, r24
    a6c8:	90 93 d7 2c 	sts	0x2CD7, r25
    a6cc:	27 c0       	rjmp	.+78     	; 0xa71c <malloc+0x9c>
    a6ce:	21 15       	cp	r18, r1
    a6d0:	31 05       	cpc	r19, r1
    a6d2:	31 f0       	breq	.+12     	; 0xa6e0 <malloc+0x60>
    a6d4:	42 17       	cp	r20, r18
    a6d6:	53 07       	cpc	r21, r19
    a6d8:	18 f0       	brcs	.+6      	; 0xa6e0 <malloc+0x60>
    a6da:	a9 01       	movw	r20, r18
    a6dc:	db 01       	movw	r26, r22
    a6de:	01 c0       	rjmp	.+2      	; 0xa6e2 <malloc+0x62>
    a6e0:	ef 01       	movw	r28, r30
    a6e2:	9a 01       	movw	r18, r20
    a6e4:	bd 01       	movw	r22, r26
    a6e6:	df 01       	movw	r26, r30
    a6e8:	02 80       	ldd	r0, Z+2	; 0x02
    a6ea:	f3 81       	ldd	r31, Z+3	; 0x03
    a6ec:	e0 2d       	mov	r30, r0
    a6ee:	d7 cf       	rjmp	.-82     	; 0xa69e <malloc+0x1e>
    a6f0:	21 15       	cp	r18, r1
    a6f2:	31 05       	cpc	r19, r1
    a6f4:	f9 f0       	breq	.+62     	; 0xa734 <malloc+0xb4>
    a6f6:	28 1b       	sub	r18, r24
    a6f8:	39 0b       	sbc	r19, r25
    a6fa:	24 30       	cpi	r18, 0x04	; 4
    a6fc:	31 05       	cpc	r19, r1
    a6fe:	80 f4       	brcc	.+32     	; 0xa720 <malloc+0xa0>
    a700:	8a 81       	ldd	r24, Y+2	; 0x02
    a702:	9b 81       	ldd	r25, Y+3	; 0x03
    a704:	61 15       	cp	r22, r1
    a706:	71 05       	cpc	r23, r1
    a708:	21 f0       	breq	.+8      	; 0xa712 <malloc+0x92>
    a70a:	fb 01       	movw	r30, r22
    a70c:	82 83       	std	Z+2, r24	; 0x02
    a70e:	93 83       	std	Z+3, r25	; 0x03
    a710:	04 c0       	rjmp	.+8      	; 0xa71a <malloc+0x9a>
    a712:	80 93 d6 2c 	sts	0x2CD6, r24
    a716:	90 93 d7 2c 	sts	0x2CD7, r25
    a71a:	fe 01       	movw	r30, r28
    a71c:	32 96       	adiw	r30, 0x02	; 2
    a71e:	44 c0       	rjmp	.+136    	; 0xa7a8 <malloc+0x128>
    a720:	fe 01       	movw	r30, r28
    a722:	e2 0f       	add	r30, r18
    a724:	f3 1f       	adc	r31, r19
    a726:	81 93       	st	Z+, r24
    a728:	91 93       	st	Z+, r25
    a72a:	22 50       	subi	r18, 0x02	; 2
    a72c:	31 09       	sbc	r19, r1
    a72e:	28 83       	st	Y, r18
    a730:	39 83       	std	Y+1, r19	; 0x01
    a732:	3a c0       	rjmp	.+116    	; 0xa7a8 <malloc+0x128>
    a734:	20 91 d4 2c 	lds	r18, 0x2CD4
    a738:	30 91 d5 2c 	lds	r19, 0x2CD5
    a73c:	23 2b       	or	r18, r19
    a73e:	41 f4       	brne	.+16     	; 0xa750 <malloc+0xd0>
    a740:	20 91 02 20 	lds	r18, 0x2002
    a744:	30 91 03 20 	lds	r19, 0x2003
    a748:	20 93 d4 2c 	sts	0x2CD4, r18
    a74c:	30 93 d5 2c 	sts	0x2CD5, r19
    a750:	20 91 00 20 	lds	r18, 0x2000
    a754:	30 91 01 20 	lds	r19, 0x2001
    a758:	21 15       	cp	r18, r1
    a75a:	31 05       	cpc	r19, r1
    a75c:	41 f4       	brne	.+16     	; 0xa76e <malloc+0xee>
    a75e:	2d b7       	in	r18, 0x3d	; 61
    a760:	3e b7       	in	r19, 0x3e	; 62
    a762:	40 91 04 20 	lds	r20, 0x2004
    a766:	50 91 05 20 	lds	r21, 0x2005
    a76a:	24 1b       	sub	r18, r20
    a76c:	35 0b       	sbc	r19, r21
    a76e:	e0 91 d4 2c 	lds	r30, 0x2CD4
    a772:	f0 91 d5 2c 	lds	r31, 0x2CD5
    a776:	e2 17       	cp	r30, r18
    a778:	f3 07       	cpc	r31, r19
    a77a:	a0 f4       	brcc	.+40     	; 0xa7a4 <malloc+0x124>
    a77c:	2e 1b       	sub	r18, r30
    a77e:	3f 0b       	sbc	r19, r31
    a780:	28 17       	cp	r18, r24
    a782:	39 07       	cpc	r19, r25
    a784:	78 f0       	brcs	.+30     	; 0xa7a4 <malloc+0x124>
    a786:	ac 01       	movw	r20, r24
    a788:	4e 5f       	subi	r20, 0xFE	; 254
    a78a:	5f 4f       	sbci	r21, 0xFF	; 255
    a78c:	24 17       	cp	r18, r20
    a78e:	35 07       	cpc	r19, r21
    a790:	48 f0       	brcs	.+18     	; 0xa7a4 <malloc+0x124>
    a792:	4e 0f       	add	r20, r30
    a794:	5f 1f       	adc	r21, r31
    a796:	40 93 d4 2c 	sts	0x2CD4, r20
    a79a:	50 93 d5 2c 	sts	0x2CD5, r21
    a79e:	81 93       	st	Z+, r24
    a7a0:	91 93       	st	Z+, r25
    a7a2:	02 c0       	rjmp	.+4      	; 0xa7a8 <malloc+0x128>
    a7a4:	e0 e0       	ldi	r30, 0x00	; 0
    a7a6:	f0 e0       	ldi	r31, 0x00	; 0
    a7a8:	cf 01       	movw	r24, r30
    a7aa:	df 91       	pop	r29
    a7ac:	cf 91       	pop	r28
    a7ae:	08 95       	ret

0000a7b0 <free>:
    a7b0:	cf 93       	push	r28
    a7b2:	df 93       	push	r29
    a7b4:	00 97       	sbiw	r24, 0x00	; 0
    a7b6:	09 f4       	brne	.+2      	; 0xa7ba <free+0xa>
    a7b8:	87 c0       	rjmp	.+270    	; 0xa8c8 <free+0x118>
    a7ba:	fc 01       	movw	r30, r24
    a7bc:	32 97       	sbiw	r30, 0x02	; 2
    a7be:	12 82       	std	Z+2, r1	; 0x02
    a7c0:	13 82       	std	Z+3, r1	; 0x03
    a7c2:	c0 91 d6 2c 	lds	r28, 0x2CD6
    a7c6:	d0 91 d7 2c 	lds	r29, 0x2CD7
    a7ca:	20 97       	sbiw	r28, 0x00	; 0
    a7cc:	81 f4       	brne	.+32     	; 0xa7ee <free+0x3e>
    a7ce:	20 81       	ld	r18, Z
    a7d0:	31 81       	ldd	r19, Z+1	; 0x01
    a7d2:	28 0f       	add	r18, r24
    a7d4:	39 1f       	adc	r19, r25
    a7d6:	80 91 d4 2c 	lds	r24, 0x2CD4
    a7da:	90 91 d5 2c 	lds	r25, 0x2CD5
    a7de:	82 17       	cp	r24, r18
    a7e0:	93 07       	cpc	r25, r19
    a7e2:	79 f5       	brne	.+94     	; 0xa842 <free+0x92>
    a7e4:	e0 93 d4 2c 	sts	0x2CD4, r30
    a7e8:	f0 93 d5 2c 	sts	0x2CD5, r31
    a7ec:	6d c0       	rjmp	.+218    	; 0xa8c8 <free+0x118>
    a7ee:	de 01       	movw	r26, r28
    a7f0:	20 e0       	ldi	r18, 0x00	; 0
    a7f2:	30 e0       	ldi	r19, 0x00	; 0
    a7f4:	ae 17       	cp	r26, r30
    a7f6:	bf 07       	cpc	r27, r31
    a7f8:	50 f4       	brcc	.+20     	; 0xa80e <free+0x5e>
    a7fa:	12 96       	adiw	r26, 0x02	; 2
    a7fc:	4d 91       	ld	r20, X+
    a7fe:	5c 91       	ld	r21, X
    a800:	13 97       	sbiw	r26, 0x03	; 3
    a802:	9d 01       	movw	r18, r26
    a804:	41 15       	cp	r20, r1
    a806:	51 05       	cpc	r21, r1
    a808:	09 f1       	breq	.+66     	; 0xa84c <free+0x9c>
    a80a:	da 01       	movw	r26, r20
    a80c:	f3 cf       	rjmp	.-26     	; 0xa7f4 <free+0x44>
    a80e:	a2 83       	std	Z+2, r26	; 0x02
    a810:	b3 83       	std	Z+3, r27	; 0x03
    a812:	40 81       	ld	r20, Z
    a814:	51 81       	ldd	r21, Z+1	; 0x01
    a816:	84 0f       	add	r24, r20
    a818:	95 1f       	adc	r25, r21
    a81a:	8a 17       	cp	r24, r26
    a81c:	9b 07       	cpc	r25, r27
    a81e:	71 f4       	brne	.+28     	; 0xa83c <free+0x8c>
    a820:	8d 91       	ld	r24, X+
    a822:	9c 91       	ld	r25, X
    a824:	11 97       	sbiw	r26, 0x01	; 1
    a826:	84 0f       	add	r24, r20
    a828:	95 1f       	adc	r25, r21
    a82a:	02 96       	adiw	r24, 0x02	; 2
    a82c:	80 83       	st	Z, r24
    a82e:	91 83       	std	Z+1, r25	; 0x01
    a830:	12 96       	adiw	r26, 0x02	; 2
    a832:	8d 91       	ld	r24, X+
    a834:	9c 91       	ld	r25, X
    a836:	13 97       	sbiw	r26, 0x03	; 3
    a838:	82 83       	std	Z+2, r24	; 0x02
    a83a:	93 83       	std	Z+3, r25	; 0x03
    a83c:	21 15       	cp	r18, r1
    a83e:	31 05       	cpc	r19, r1
    a840:	29 f4       	brne	.+10     	; 0xa84c <free+0x9c>
    a842:	e0 93 d6 2c 	sts	0x2CD6, r30
    a846:	f0 93 d7 2c 	sts	0x2CD7, r31
    a84a:	3e c0       	rjmp	.+124    	; 0xa8c8 <free+0x118>
    a84c:	d9 01       	movw	r26, r18
    a84e:	12 96       	adiw	r26, 0x02	; 2
    a850:	ed 93       	st	X+, r30
    a852:	fc 93       	st	X, r31
    a854:	13 97       	sbiw	r26, 0x03	; 3
    a856:	4d 91       	ld	r20, X+
    a858:	5d 91       	ld	r21, X+
    a85a:	a4 0f       	add	r26, r20
    a85c:	b5 1f       	adc	r27, r21
    a85e:	ea 17       	cp	r30, r26
    a860:	fb 07       	cpc	r31, r27
    a862:	79 f4       	brne	.+30     	; 0xa882 <free+0xd2>
    a864:	80 81       	ld	r24, Z
    a866:	91 81       	ldd	r25, Z+1	; 0x01
    a868:	84 0f       	add	r24, r20
    a86a:	95 1f       	adc	r25, r21
    a86c:	02 96       	adiw	r24, 0x02	; 2
    a86e:	d9 01       	movw	r26, r18
    a870:	8d 93       	st	X+, r24
    a872:	9c 93       	st	X, r25
    a874:	11 97       	sbiw	r26, 0x01	; 1
    a876:	82 81       	ldd	r24, Z+2	; 0x02
    a878:	93 81       	ldd	r25, Z+3	; 0x03
    a87a:	12 96       	adiw	r26, 0x02	; 2
    a87c:	8d 93       	st	X+, r24
    a87e:	9c 93       	st	X, r25
    a880:	13 97       	sbiw	r26, 0x03	; 3
    a882:	e0 e0       	ldi	r30, 0x00	; 0
    a884:	f0 e0       	ldi	r31, 0x00	; 0
    a886:	8a 81       	ldd	r24, Y+2	; 0x02
    a888:	9b 81       	ldd	r25, Y+3	; 0x03
    a88a:	00 97       	sbiw	r24, 0x00	; 0
    a88c:	19 f0       	breq	.+6      	; 0xa894 <free+0xe4>
    a88e:	fe 01       	movw	r30, r28
    a890:	ec 01       	movw	r28, r24
    a892:	f9 cf       	rjmp	.-14     	; 0xa886 <free+0xd6>
    a894:	ce 01       	movw	r24, r28
    a896:	02 96       	adiw	r24, 0x02	; 2
    a898:	28 81       	ld	r18, Y
    a89a:	39 81       	ldd	r19, Y+1	; 0x01
    a89c:	82 0f       	add	r24, r18
    a89e:	93 1f       	adc	r25, r19
    a8a0:	20 91 d4 2c 	lds	r18, 0x2CD4
    a8a4:	30 91 d5 2c 	lds	r19, 0x2CD5
    a8a8:	28 17       	cp	r18, r24
    a8aa:	39 07       	cpc	r19, r25
    a8ac:	69 f4       	brne	.+26     	; 0xa8c8 <free+0x118>
    a8ae:	30 97       	sbiw	r30, 0x00	; 0
    a8b0:	29 f4       	brne	.+10     	; 0xa8bc <free+0x10c>
    a8b2:	10 92 d6 2c 	sts	0x2CD6, r1
    a8b6:	10 92 d7 2c 	sts	0x2CD7, r1
    a8ba:	02 c0       	rjmp	.+4      	; 0xa8c0 <free+0x110>
    a8bc:	12 82       	std	Z+2, r1	; 0x02
    a8be:	13 82       	std	Z+3, r1	; 0x03
    a8c0:	c0 93 d4 2c 	sts	0x2CD4, r28
    a8c4:	d0 93 d5 2c 	sts	0x2CD5, r29
    a8c8:	df 91       	pop	r29
    a8ca:	cf 91       	pop	r28
    a8cc:	08 95       	ret

0000a8ce <__ftoa_engine>:
    a8ce:	28 30       	cpi	r18, 0x08	; 8
    a8d0:	08 f0       	brcs	.+2      	; 0xa8d4 <__ftoa_engine+0x6>
    a8d2:	27 e0       	ldi	r18, 0x07	; 7
    a8d4:	33 27       	eor	r19, r19
    a8d6:	da 01       	movw	r26, r20
    a8d8:	99 0f       	add	r25, r25
    a8da:	31 1d       	adc	r19, r1
    a8dc:	87 fd       	sbrc	r24, 7
    a8de:	91 60       	ori	r25, 0x01	; 1
    a8e0:	00 96       	adiw	r24, 0x00	; 0
    a8e2:	61 05       	cpc	r22, r1
    a8e4:	71 05       	cpc	r23, r1
    a8e6:	39 f4       	brne	.+14     	; 0xa8f6 <__ftoa_engine+0x28>
    a8e8:	32 60       	ori	r19, 0x02	; 2
    a8ea:	2e 5f       	subi	r18, 0xFE	; 254
    a8ec:	3d 93       	st	X+, r19
    a8ee:	30 e3       	ldi	r19, 0x30	; 48
    a8f0:	2a 95       	dec	r18
    a8f2:	e1 f7       	brne	.-8      	; 0xa8ec <__ftoa_engine+0x1e>
    a8f4:	08 95       	ret
    a8f6:	9f 3f       	cpi	r25, 0xFF	; 255
    a8f8:	30 f0       	brcs	.+12     	; 0xa906 <__ftoa_engine+0x38>
    a8fa:	80 38       	cpi	r24, 0x80	; 128
    a8fc:	71 05       	cpc	r23, r1
    a8fe:	61 05       	cpc	r22, r1
    a900:	09 f0       	breq	.+2      	; 0xa904 <__ftoa_engine+0x36>
    a902:	3c 5f       	subi	r19, 0xFC	; 252
    a904:	3c 5f       	subi	r19, 0xFC	; 252
    a906:	3d 93       	st	X+, r19
    a908:	91 30       	cpi	r25, 0x01	; 1
    a90a:	08 f0       	brcs	.+2      	; 0xa90e <__ftoa_engine+0x40>
    a90c:	80 68       	ori	r24, 0x80	; 128
    a90e:	91 1d       	adc	r25, r1
    a910:	df 93       	push	r29
    a912:	cf 93       	push	r28
    a914:	1f 93       	push	r17
    a916:	0f 93       	push	r16
    a918:	ff 92       	push	r15
    a91a:	ef 92       	push	r14
    a91c:	19 2f       	mov	r17, r25
    a91e:	98 7f       	andi	r25, 0xF8	; 248
    a920:	96 95       	lsr	r25
    a922:	e9 2f       	mov	r30, r25
    a924:	96 95       	lsr	r25
    a926:	96 95       	lsr	r25
    a928:	e9 0f       	add	r30, r25
    a92a:	ff 27       	eor	r31, r31
    a92c:	e9 5d       	subi	r30, 0xD9	; 217
    a92e:	f1 4f       	sbci	r31, 0xF1	; 241
    a930:	99 27       	eor	r25, r25
    a932:	33 27       	eor	r19, r19
    a934:	ee 24       	eor	r14, r14
    a936:	ff 24       	eor	r15, r15
    a938:	a7 01       	movw	r20, r14
    a93a:	e7 01       	movw	r28, r14
    a93c:	05 90       	lpm	r0, Z+
    a93e:	08 94       	sec
    a940:	07 94       	ror	r0
    a942:	28 f4       	brcc	.+10     	; 0xa94e <__ftoa_engine+0x80>
    a944:	36 0f       	add	r19, r22
    a946:	e7 1e       	adc	r14, r23
    a948:	f8 1e       	adc	r15, r24
    a94a:	49 1f       	adc	r20, r25
    a94c:	51 1d       	adc	r21, r1
    a94e:	66 0f       	add	r22, r22
    a950:	77 1f       	adc	r23, r23
    a952:	88 1f       	adc	r24, r24
    a954:	99 1f       	adc	r25, r25
    a956:	06 94       	lsr	r0
    a958:	a1 f7       	brne	.-24     	; 0xa942 <__ftoa_engine+0x74>
    a95a:	05 90       	lpm	r0, Z+
    a95c:	07 94       	ror	r0
    a95e:	28 f4       	brcc	.+10     	; 0xa96a <__ftoa_engine+0x9c>
    a960:	e7 0e       	add	r14, r23
    a962:	f8 1e       	adc	r15, r24
    a964:	49 1f       	adc	r20, r25
    a966:	56 1f       	adc	r21, r22
    a968:	c1 1d       	adc	r28, r1
    a96a:	77 0f       	add	r23, r23
    a96c:	88 1f       	adc	r24, r24
    a96e:	99 1f       	adc	r25, r25
    a970:	66 1f       	adc	r22, r22
    a972:	06 94       	lsr	r0
    a974:	a1 f7       	brne	.-24     	; 0xa95e <__ftoa_engine+0x90>
    a976:	05 90       	lpm	r0, Z+
    a978:	07 94       	ror	r0
    a97a:	28 f4       	brcc	.+10     	; 0xa986 <__ftoa_engine+0xb8>
    a97c:	f8 0e       	add	r15, r24
    a97e:	49 1f       	adc	r20, r25
    a980:	56 1f       	adc	r21, r22
    a982:	c7 1f       	adc	r28, r23
    a984:	d1 1d       	adc	r29, r1
    a986:	88 0f       	add	r24, r24
    a988:	99 1f       	adc	r25, r25
    a98a:	66 1f       	adc	r22, r22
    a98c:	77 1f       	adc	r23, r23
    a98e:	06 94       	lsr	r0
    a990:	a1 f7       	brne	.-24     	; 0xa97a <__ftoa_engine+0xac>
    a992:	05 90       	lpm	r0, Z+
    a994:	07 94       	ror	r0
    a996:	20 f4       	brcc	.+8      	; 0xa9a0 <__ftoa_engine+0xd2>
    a998:	49 0f       	add	r20, r25
    a99a:	56 1f       	adc	r21, r22
    a99c:	c7 1f       	adc	r28, r23
    a99e:	d8 1f       	adc	r29, r24
    a9a0:	99 0f       	add	r25, r25
    a9a2:	66 1f       	adc	r22, r22
    a9a4:	77 1f       	adc	r23, r23
    a9a6:	88 1f       	adc	r24, r24
    a9a8:	06 94       	lsr	r0
    a9aa:	a9 f7       	brne	.-22     	; 0xa996 <__ftoa_engine+0xc8>
    a9ac:	84 91       	lpm	r24, Z
    a9ae:	10 95       	com	r17
    a9b0:	17 70       	andi	r17, 0x07	; 7
    a9b2:	41 f0       	breq	.+16     	; 0xa9c4 <__ftoa_engine+0xf6>
    a9b4:	d6 95       	lsr	r29
    a9b6:	c7 95       	ror	r28
    a9b8:	57 95       	ror	r21
    a9ba:	47 95       	ror	r20
    a9bc:	f7 94       	ror	r15
    a9be:	e7 94       	ror	r14
    a9c0:	1a 95       	dec	r17
    a9c2:	c1 f7       	brne	.-16     	; 0xa9b4 <__ftoa_engine+0xe6>
    a9c4:	ed ec       	ldi	r30, 0xCD	; 205
    a9c6:	fd e0       	ldi	r31, 0x0D	; 13
    a9c8:	68 94       	set
    a9ca:	15 90       	lpm	r1, Z+
    a9cc:	15 91       	lpm	r17, Z+
    a9ce:	35 91       	lpm	r19, Z+
    a9d0:	65 91       	lpm	r22, Z+
    a9d2:	95 91       	lpm	r25, Z+
    a9d4:	05 90       	lpm	r0, Z+
    a9d6:	7f e2       	ldi	r23, 0x2F	; 47
    a9d8:	73 95       	inc	r23
    a9da:	e1 18       	sub	r14, r1
    a9dc:	f1 0a       	sbc	r15, r17
    a9de:	43 0b       	sbc	r20, r19
    a9e0:	56 0b       	sbc	r21, r22
    a9e2:	c9 0b       	sbc	r28, r25
    a9e4:	d0 09       	sbc	r29, r0
    a9e6:	c0 f7       	brcc	.-16     	; 0xa9d8 <__ftoa_engine+0x10a>
    a9e8:	e1 0c       	add	r14, r1
    a9ea:	f1 1e       	adc	r15, r17
    a9ec:	43 1f       	adc	r20, r19
    a9ee:	56 1f       	adc	r21, r22
    a9f0:	c9 1f       	adc	r28, r25
    a9f2:	d0 1d       	adc	r29, r0
    a9f4:	7e f4       	brtc	.+30     	; 0xaa14 <__ftoa_engine+0x146>
    a9f6:	70 33       	cpi	r23, 0x30	; 48
    a9f8:	11 f4       	brne	.+4      	; 0xa9fe <__ftoa_engine+0x130>
    a9fa:	8a 95       	dec	r24
    a9fc:	e6 cf       	rjmp	.-52     	; 0xa9ca <__ftoa_engine+0xfc>
    a9fe:	e8 94       	clt
    aa00:	01 50       	subi	r16, 0x01	; 1
    aa02:	30 f0       	brcs	.+12     	; 0xaa10 <__ftoa_engine+0x142>
    aa04:	08 0f       	add	r16, r24
    aa06:	0a f4       	brpl	.+2      	; 0xaa0a <__ftoa_engine+0x13c>
    aa08:	00 27       	eor	r16, r16
    aa0a:	02 17       	cp	r16, r18
    aa0c:	08 f4       	brcc	.+2      	; 0xaa10 <__ftoa_engine+0x142>
    aa0e:	20 2f       	mov	r18, r16
    aa10:	23 95       	inc	r18
    aa12:	02 2f       	mov	r16, r18
    aa14:	7a 33       	cpi	r23, 0x3A	; 58
    aa16:	28 f0       	brcs	.+10     	; 0xaa22 <__ftoa_engine+0x154>
    aa18:	79 e3       	ldi	r23, 0x39	; 57
    aa1a:	7d 93       	st	X+, r23
    aa1c:	2a 95       	dec	r18
    aa1e:	e9 f7       	brne	.-6      	; 0xaa1a <__ftoa_engine+0x14c>
    aa20:	10 c0       	rjmp	.+32     	; 0xaa42 <__ftoa_engine+0x174>
    aa22:	7d 93       	st	X+, r23
    aa24:	2a 95       	dec	r18
    aa26:	89 f6       	brne	.-94     	; 0xa9ca <__ftoa_engine+0xfc>
    aa28:	06 94       	lsr	r0
    aa2a:	97 95       	ror	r25
    aa2c:	67 95       	ror	r22
    aa2e:	37 95       	ror	r19
    aa30:	17 95       	ror	r17
    aa32:	17 94       	ror	r1
    aa34:	e1 18       	sub	r14, r1
    aa36:	f1 0a       	sbc	r15, r17
    aa38:	43 0b       	sbc	r20, r19
    aa3a:	56 0b       	sbc	r21, r22
    aa3c:	c9 0b       	sbc	r28, r25
    aa3e:	d0 09       	sbc	r29, r0
    aa40:	98 f0       	brcs	.+38     	; 0xaa68 <__ftoa_engine+0x19a>
    aa42:	23 95       	inc	r18
    aa44:	7e 91       	ld	r23, -X
    aa46:	73 95       	inc	r23
    aa48:	7a 33       	cpi	r23, 0x3A	; 58
    aa4a:	08 f0       	brcs	.+2      	; 0xaa4e <__ftoa_engine+0x180>
    aa4c:	70 e3       	ldi	r23, 0x30	; 48
    aa4e:	7c 93       	st	X, r23
    aa50:	20 13       	cpse	r18, r16
    aa52:	b8 f7       	brcc	.-18     	; 0xaa42 <__ftoa_engine+0x174>
    aa54:	7e 91       	ld	r23, -X
    aa56:	70 61       	ori	r23, 0x10	; 16
    aa58:	7d 93       	st	X+, r23
    aa5a:	30 f0       	brcs	.+12     	; 0xaa68 <__ftoa_engine+0x19a>
    aa5c:	83 95       	inc	r24
    aa5e:	71 e3       	ldi	r23, 0x31	; 49
    aa60:	7d 93       	st	X+, r23
    aa62:	70 e3       	ldi	r23, 0x30	; 48
    aa64:	2a 95       	dec	r18
    aa66:	e1 f7       	brne	.-8      	; 0xaa60 <__ftoa_engine+0x192>
    aa68:	11 24       	eor	r1, r1
    aa6a:	ef 90       	pop	r14
    aa6c:	ff 90       	pop	r15
    aa6e:	0f 91       	pop	r16
    aa70:	1f 91       	pop	r17
    aa72:	cf 91       	pop	r28
    aa74:	df 91       	pop	r29
    aa76:	99 27       	eor	r25, r25
    aa78:	87 fd       	sbrc	r24, 7
    aa7a:	90 95       	com	r25
    aa7c:	08 95       	ret

0000aa7e <toupper>:
    aa7e:	91 11       	cpse	r25, r1
    aa80:	08 95       	ret
    aa82:	81 56       	subi	r24, 0x61	; 97
    aa84:	8a 51       	subi	r24, 0x1A	; 26
    aa86:	08 f4       	brcc	.+2      	; 0xaa8a <toupper+0xc>
    aa88:	80 52       	subi	r24, 0x20	; 32
    aa8a:	85 58       	subi	r24, 0x85	; 133
    aa8c:	08 95       	ret

0000aa8e <strnlen_P>:
    aa8e:	fc 01       	movw	r30, r24
    aa90:	05 90       	lpm	r0, Z+
    aa92:	61 50       	subi	r22, 0x01	; 1
    aa94:	70 40       	sbci	r23, 0x00	; 0
    aa96:	01 10       	cpse	r0, r1
    aa98:	d8 f7       	brcc	.-10     	; 0xaa90 <strnlen_P+0x2>
    aa9a:	80 95       	com	r24
    aa9c:	90 95       	com	r25
    aa9e:	8e 0f       	add	r24, r30
    aaa0:	9f 1f       	adc	r25, r31
    aaa2:	08 95       	ret

0000aaa4 <memcpy>:
    aaa4:	fb 01       	movw	r30, r22
    aaa6:	dc 01       	movw	r26, r24
    aaa8:	02 c0       	rjmp	.+4      	; 0xaaae <memcpy+0xa>
    aaaa:	01 90       	ld	r0, Z+
    aaac:	0d 92       	st	X+, r0
    aaae:	41 50       	subi	r20, 0x01	; 1
    aab0:	50 40       	sbci	r21, 0x00	; 0
    aab2:	d8 f7       	brcc	.-10     	; 0xaaaa <memcpy+0x6>
    aab4:	08 95       	ret

0000aab6 <memset>:
    aab6:	dc 01       	movw	r26, r24
    aab8:	01 c0       	rjmp	.+2      	; 0xaabc <memset+0x6>
    aaba:	6d 93       	st	X+, r22
    aabc:	41 50       	subi	r20, 0x01	; 1
    aabe:	50 40       	sbci	r21, 0x00	; 0
    aac0:	e0 f7       	brcc	.-8      	; 0xaaba <memset+0x4>
    aac2:	08 95       	ret

0000aac4 <strcat>:
    aac4:	fb 01       	movw	r30, r22
    aac6:	dc 01       	movw	r26, r24
    aac8:	0d 90       	ld	r0, X+
    aaca:	00 20       	and	r0, r0
    aacc:	e9 f7       	brne	.-6      	; 0xaac8 <strcat+0x4>
    aace:	11 97       	sbiw	r26, 0x01	; 1
    aad0:	01 90       	ld	r0, Z+
    aad2:	0d 92       	st	X+, r0
    aad4:	00 20       	and	r0, r0
    aad6:	e1 f7       	brne	.-8      	; 0xaad0 <strcat+0xc>
    aad8:	08 95       	ret

0000aada <strchr>:
    aada:	fc 01       	movw	r30, r24
    aadc:	81 91       	ld	r24, Z+
    aade:	86 17       	cp	r24, r22
    aae0:	21 f0       	breq	.+8      	; 0xaaea <strchr+0x10>
    aae2:	88 23       	and	r24, r24
    aae4:	d9 f7       	brne	.-10     	; 0xaadc <strchr+0x2>
    aae6:	99 27       	eor	r25, r25
    aae8:	08 95       	ret
    aaea:	31 97       	sbiw	r30, 0x01	; 1
    aaec:	cf 01       	movw	r24, r30
    aaee:	08 95       	ret

0000aaf0 <strcpy>:
    aaf0:	fb 01       	movw	r30, r22
    aaf2:	dc 01       	movw	r26, r24
    aaf4:	01 90       	ld	r0, Z+
    aaf6:	0d 92       	st	X+, r0
    aaf8:	00 20       	and	r0, r0
    aafa:	e1 f7       	brne	.-8      	; 0xaaf4 <strcpy+0x4>
    aafc:	08 95       	ret

0000aafe <strncpy>:
    aafe:	fb 01       	movw	r30, r22
    ab00:	dc 01       	movw	r26, r24
    ab02:	41 50       	subi	r20, 0x01	; 1
    ab04:	50 40       	sbci	r21, 0x00	; 0
    ab06:	48 f0       	brcs	.+18     	; 0xab1a <strncpy+0x1c>
    ab08:	01 90       	ld	r0, Z+
    ab0a:	0d 92       	st	X+, r0
    ab0c:	00 20       	and	r0, r0
    ab0e:	c9 f7       	brne	.-14     	; 0xab02 <strncpy+0x4>
    ab10:	01 c0       	rjmp	.+2      	; 0xab14 <strncpy+0x16>
    ab12:	1d 92       	st	X+, r1
    ab14:	41 50       	subi	r20, 0x01	; 1
    ab16:	50 40       	sbci	r21, 0x00	; 0
    ab18:	e0 f7       	brcc	.-8      	; 0xab12 <strncpy+0x14>
    ab1a:	08 95       	ret

0000ab1c <strnlen>:
    ab1c:	fc 01       	movw	r30, r24
    ab1e:	61 50       	subi	r22, 0x01	; 1
    ab20:	70 40       	sbci	r23, 0x00	; 0
    ab22:	01 90       	ld	r0, Z+
    ab24:	01 10       	cpse	r0, r1
    ab26:	d8 f7       	brcc	.-10     	; 0xab1e <strnlen+0x2>
    ab28:	80 95       	com	r24
    ab2a:	90 95       	com	r25
    ab2c:	8e 0f       	add	r24, r30
    ab2e:	9f 1f       	adc	r25, r31
    ab30:	08 95       	ret

0000ab32 <strrchr>:
    ab32:	fc 01       	movw	r30, r24
    ab34:	81 e0       	ldi	r24, 0x01	; 1
    ab36:	90 e0       	ldi	r25, 0x00	; 0
    ab38:	01 90       	ld	r0, Z+
    ab3a:	06 16       	cp	r0, r22
    ab3c:	09 f4       	brne	.+2      	; 0xab40 <strrchr+0xe>
    ab3e:	cf 01       	movw	r24, r30
    ab40:	00 20       	and	r0, r0
    ab42:	d1 f7       	brne	.-12     	; 0xab38 <strrchr+0x6>
    ab44:	01 97       	sbiw	r24, 0x01	; 1
    ab46:	08 95       	ret

0000ab48 <strstr>:
    ab48:	fb 01       	movw	r30, r22
    ab4a:	51 91       	ld	r21, Z+
    ab4c:	55 23       	and	r21, r21
    ab4e:	a9 f0       	breq	.+42     	; 0xab7a <strstr+0x32>
    ab50:	bf 01       	movw	r22, r30
    ab52:	dc 01       	movw	r26, r24
    ab54:	4d 91       	ld	r20, X+
    ab56:	45 17       	cp	r20, r21
    ab58:	41 11       	cpse	r20, r1
    ab5a:	e1 f7       	brne	.-8      	; 0xab54 <strstr+0xc>
    ab5c:	59 f4       	brne	.+22     	; 0xab74 <strstr+0x2c>
    ab5e:	cd 01       	movw	r24, r26
    ab60:	01 90       	ld	r0, Z+
    ab62:	00 20       	and	r0, r0
    ab64:	49 f0       	breq	.+18     	; 0xab78 <strstr+0x30>
    ab66:	4d 91       	ld	r20, X+
    ab68:	40 15       	cp	r20, r0
    ab6a:	41 11       	cpse	r20, r1
    ab6c:	c9 f3       	breq	.-14     	; 0xab60 <strstr+0x18>
    ab6e:	fb 01       	movw	r30, r22
    ab70:	41 11       	cpse	r20, r1
    ab72:	ef cf       	rjmp	.-34     	; 0xab52 <strstr+0xa>
    ab74:	81 e0       	ldi	r24, 0x01	; 1
    ab76:	90 e0       	ldi	r25, 0x00	; 0
    ab78:	01 97       	sbiw	r24, 0x01	; 1
    ab7a:	08 95       	ret

0000ab7c <__itoa_ncheck>:
    ab7c:	bb 27       	eor	r27, r27
    ab7e:	4a 30       	cpi	r20, 0x0A	; 10
    ab80:	31 f4       	brne	.+12     	; 0xab8e <__itoa_ncheck+0x12>
    ab82:	99 23       	and	r25, r25
    ab84:	22 f4       	brpl	.+8      	; 0xab8e <__itoa_ncheck+0x12>
    ab86:	bd e2       	ldi	r27, 0x2D	; 45
    ab88:	90 95       	com	r25
    ab8a:	81 95       	neg	r24
    ab8c:	9f 4f       	sbci	r25, 0xFF	; 255
    ab8e:	01 c0       	rjmp	.+2      	; 0xab92 <__utoa_common>

0000ab90 <__utoa_ncheck>:
    ab90:	bb 27       	eor	r27, r27

0000ab92 <__utoa_common>:
    ab92:	fb 01       	movw	r30, r22
    ab94:	55 27       	eor	r21, r21
    ab96:	aa 27       	eor	r26, r26
    ab98:	88 0f       	add	r24, r24
    ab9a:	99 1f       	adc	r25, r25
    ab9c:	aa 1f       	adc	r26, r26
    ab9e:	a4 17       	cp	r26, r20
    aba0:	10 f0       	brcs	.+4      	; 0xaba6 <__utoa_common+0x14>
    aba2:	a4 1b       	sub	r26, r20
    aba4:	83 95       	inc	r24
    aba6:	50 51       	subi	r21, 0x10	; 16
    aba8:	b9 f7       	brne	.-18     	; 0xab98 <__utoa_common+0x6>
    abaa:	a0 5d       	subi	r26, 0xD0	; 208
    abac:	aa 33       	cpi	r26, 0x3A	; 58
    abae:	08 f0       	brcs	.+2      	; 0xabb2 <__utoa_common+0x20>
    abb0:	a9 5d       	subi	r26, 0xD9	; 217
    abb2:	a1 93       	st	Z+, r26
    abb4:	00 97       	sbiw	r24, 0x00	; 0
    abb6:	79 f7       	brne	.-34     	; 0xab96 <__utoa_common+0x4>
    abb8:	b1 11       	cpse	r27, r1
    abba:	b1 93       	st	Z+, r27
    abbc:	11 92       	st	Z+, r1
    abbe:	cb 01       	movw	r24, r22
    abc0:	0e c4       	rjmp	.+2076   	; 0xb3de <strrev>

0000abc2 <fputc>:
    abc2:	0f 93       	push	r16
    abc4:	1f 93       	push	r17
    abc6:	cf 93       	push	r28
    abc8:	df 93       	push	r29
    abca:	18 2f       	mov	r17, r24
    abcc:	09 2f       	mov	r16, r25
    abce:	eb 01       	movw	r28, r22
    abd0:	8b 81       	ldd	r24, Y+3	; 0x03
    abd2:	81 fd       	sbrc	r24, 1
    abd4:	03 c0       	rjmp	.+6      	; 0xabdc <fputc+0x1a>
    abd6:	8f ef       	ldi	r24, 0xFF	; 255
    abd8:	9f ef       	ldi	r25, 0xFF	; 255
    abda:	20 c0       	rjmp	.+64     	; 0xac1c <fputc+0x5a>
    abdc:	82 ff       	sbrs	r24, 2
    abde:	10 c0       	rjmp	.+32     	; 0xac00 <fputc+0x3e>
    abe0:	4e 81       	ldd	r20, Y+6	; 0x06
    abe2:	5f 81       	ldd	r21, Y+7	; 0x07
    abe4:	2c 81       	ldd	r18, Y+4	; 0x04
    abe6:	3d 81       	ldd	r19, Y+5	; 0x05
    abe8:	42 17       	cp	r20, r18
    abea:	53 07       	cpc	r21, r19
    abec:	7c f4       	brge	.+30     	; 0xac0c <fputc+0x4a>
    abee:	e8 81       	ld	r30, Y
    abf0:	f9 81       	ldd	r31, Y+1	; 0x01
    abf2:	9f 01       	movw	r18, r30
    abf4:	2f 5f       	subi	r18, 0xFF	; 255
    abf6:	3f 4f       	sbci	r19, 0xFF	; 255
    abf8:	28 83       	st	Y, r18
    abfa:	39 83       	std	Y+1, r19	; 0x01
    abfc:	10 83       	st	Z, r17
    abfe:	06 c0       	rjmp	.+12     	; 0xac0c <fputc+0x4a>
    ac00:	e8 85       	ldd	r30, Y+8	; 0x08
    ac02:	f9 85       	ldd	r31, Y+9	; 0x09
    ac04:	81 2f       	mov	r24, r17
    ac06:	09 95       	icall
    ac08:	89 2b       	or	r24, r25
    ac0a:	29 f7       	brne	.-54     	; 0xabd6 <fputc+0x14>
    ac0c:	2e 81       	ldd	r18, Y+6	; 0x06
    ac0e:	3f 81       	ldd	r19, Y+7	; 0x07
    ac10:	2f 5f       	subi	r18, 0xFF	; 255
    ac12:	3f 4f       	sbci	r19, 0xFF	; 255
    ac14:	2e 83       	std	Y+6, r18	; 0x06
    ac16:	3f 83       	std	Y+7, r19	; 0x07
    ac18:	81 2f       	mov	r24, r17
    ac1a:	90 2f       	mov	r25, r16
    ac1c:	df 91       	pop	r29
    ac1e:	cf 91       	pop	r28
    ac20:	1f 91       	pop	r17
    ac22:	0f 91       	pop	r16
    ac24:	08 95       	ret

0000ac26 <printf>:
    ac26:	cf 93       	push	r28
    ac28:	df 93       	push	r29
    ac2a:	cd b7       	in	r28, 0x3d	; 61
    ac2c:	de b7       	in	r29, 0x3e	; 62
    ac2e:	fe 01       	movw	r30, r28
    ac30:	35 96       	adiw	r30, 0x05	; 5
    ac32:	61 91       	ld	r22, Z+
    ac34:	71 91       	ld	r23, Z+
    ac36:	af 01       	movw	r20, r30
    ac38:	80 91 da 2c 	lds	r24, 0x2CDA
    ac3c:	90 91 db 2c 	lds	r25, 0x2CDB
    ac40:	1c d9       	rcall	.-3528   	; 0x9e7a <vfprintf>
    ac42:	df 91       	pop	r29
    ac44:	cf 91       	pop	r28
    ac46:	08 95       	ret

0000ac48 <puts>:
    ac48:	0f 93       	push	r16
    ac4a:	1f 93       	push	r17
    ac4c:	cf 93       	push	r28
    ac4e:	df 93       	push	r29
    ac50:	e0 91 da 2c 	lds	r30, 0x2CDA
    ac54:	f0 91 db 2c 	lds	r31, 0x2CDB
    ac58:	23 81       	ldd	r18, Z+3	; 0x03
    ac5a:	21 ff       	sbrs	r18, 1
    ac5c:	1b c0       	rjmp	.+54     	; 0xac94 <puts+0x4c>
    ac5e:	ec 01       	movw	r28, r24
    ac60:	00 e0       	ldi	r16, 0x00	; 0
    ac62:	10 e0       	ldi	r17, 0x00	; 0
    ac64:	89 91       	ld	r24, Y+
    ac66:	60 91 da 2c 	lds	r22, 0x2CDA
    ac6a:	70 91 db 2c 	lds	r23, 0x2CDB
    ac6e:	db 01       	movw	r26, r22
    ac70:	18 96       	adiw	r26, 0x08	; 8
    ac72:	ed 91       	ld	r30, X+
    ac74:	fc 91       	ld	r31, X
    ac76:	19 97       	sbiw	r26, 0x09	; 9
    ac78:	88 23       	and	r24, r24
    ac7a:	31 f0       	breq	.+12     	; 0xac88 <puts+0x40>
    ac7c:	09 95       	icall
    ac7e:	89 2b       	or	r24, r25
    ac80:	89 f3       	breq	.-30     	; 0xac64 <puts+0x1c>
    ac82:	0f ef       	ldi	r16, 0xFF	; 255
    ac84:	1f ef       	ldi	r17, 0xFF	; 255
    ac86:	ee cf       	rjmp	.-36     	; 0xac64 <puts+0x1c>
    ac88:	8a e0       	ldi	r24, 0x0A	; 10
    ac8a:	09 95       	icall
    ac8c:	89 2b       	or	r24, r25
    ac8e:	11 f4       	brne	.+4      	; 0xac94 <puts+0x4c>
    ac90:	c8 01       	movw	r24, r16
    ac92:	02 c0       	rjmp	.+4      	; 0xac98 <puts+0x50>
    ac94:	8f ef       	ldi	r24, 0xFF	; 255
    ac96:	9f ef       	ldi	r25, 0xFF	; 255
    ac98:	df 91       	pop	r29
    ac9a:	cf 91       	pop	r28
    ac9c:	1f 91       	pop	r17
    ac9e:	0f 91       	pop	r16
    aca0:	08 95       	ret

0000aca2 <sscanf>:
    aca2:	cf 93       	push	r28
    aca4:	df 93       	push	r29
    aca6:	cd b7       	in	r28, 0x3d	; 61
    aca8:	de b7       	in	r29, 0x3e	; 62
    acaa:	2e 97       	sbiw	r28, 0x0e	; 14
    acac:	cd bf       	out	0x3d, r28	; 61
    acae:	de bf       	out	0x3e, r29	; 62
    acb0:	85 e0       	ldi	r24, 0x05	; 5
    acb2:	8c 83       	std	Y+4, r24	; 0x04
    acb4:	8b 89       	ldd	r24, Y+19	; 0x13
    acb6:	9c 89       	ldd	r25, Y+20	; 0x14
    acb8:	89 83       	std	Y+1, r24	; 0x01
    acba:	9a 83       	std	Y+2, r25	; 0x02
    acbc:	ae 01       	movw	r20, r28
    acbe:	49 5e       	subi	r20, 0xE9	; 233
    acc0:	5f 4f       	sbci	r21, 0xFF	; 255
    acc2:	6d 89       	ldd	r22, Y+21	; 0x15
    acc4:	7e 89       	ldd	r23, Y+22	; 0x16
    acc6:	ce 01       	movw	r24, r28
    acc8:	01 96       	adiw	r24, 0x01	; 1
    acca:	ee d1       	rcall	.+988    	; 0xb0a8 <vfscanf>
    accc:	2e 96       	adiw	r28, 0x0e	; 14
    acce:	cd bf       	out	0x3d, r28	; 61
    acd0:	de bf       	out	0x3e, r29	; 62
    acd2:	df 91       	pop	r29
    acd4:	cf 91       	pop	r28
    acd6:	08 95       	ret

0000acd8 <__ultoa_invert>:
    acd8:	fa 01       	movw	r30, r20
    acda:	aa 27       	eor	r26, r26
    acdc:	28 30       	cpi	r18, 0x08	; 8
    acde:	51 f1       	breq	.+84     	; 0xad34 <__ultoa_invert+0x5c>
    ace0:	20 31       	cpi	r18, 0x10	; 16
    ace2:	81 f1       	breq	.+96     	; 0xad44 <__ultoa_invert+0x6c>
    ace4:	e8 94       	clt
    ace6:	6f 93       	push	r22
    ace8:	6e 7f       	andi	r22, 0xFE	; 254
    acea:	6e 5f       	subi	r22, 0xFE	; 254
    acec:	7f 4f       	sbci	r23, 0xFF	; 255
    acee:	8f 4f       	sbci	r24, 0xFF	; 255
    acf0:	9f 4f       	sbci	r25, 0xFF	; 255
    acf2:	af 4f       	sbci	r26, 0xFF	; 255
    acf4:	b1 e0       	ldi	r27, 0x01	; 1
    acf6:	3e d0       	rcall	.+124    	; 0xad74 <__ultoa_invert+0x9c>
    acf8:	b4 e0       	ldi	r27, 0x04	; 4
    acfa:	3c d0       	rcall	.+120    	; 0xad74 <__ultoa_invert+0x9c>
    acfc:	67 0f       	add	r22, r23
    acfe:	78 1f       	adc	r23, r24
    ad00:	89 1f       	adc	r24, r25
    ad02:	9a 1f       	adc	r25, r26
    ad04:	a1 1d       	adc	r26, r1
    ad06:	68 0f       	add	r22, r24
    ad08:	79 1f       	adc	r23, r25
    ad0a:	8a 1f       	adc	r24, r26
    ad0c:	91 1d       	adc	r25, r1
    ad0e:	a1 1d       	adc	r26, r1
    ad10:	6a 0f       	add	r22, r26
    ad12:	71 1d       	adc	r23, r1
    ad14:	81 1d       	adc	r24, r1
    ad16:	91 1d       	adc	r25, r1
    ad18:	a1 1d       	adc	r26, r1
    ad1a:	20 d0       	rcall	.+64     	; 0xad5c <__ultoa_invert+0x84>
    ad1c:	09 f4       	brne	.+2      	; 0xad20 <__ultoa_invert+0x48>
    ad1e:	68 94       	set
    ad20:	3f 91       	pop	r19
    ad22:	2a e0       	ldi	r18, 0x0A	; 10
    ad24:	26 9f       	mul	r18, r22
    ad26:	11 24       	eor	r1, r1
    ad28:	30 19       	sub	r19, r0
    ad2a:	30 5d       	subi	r19, 0xD0	; 208
    ad2c:	31 93       	st	Z+, r19
    ad2e:	de f6       	brtc	.-74     	; 0xace6 <__ultoa_invert+0xe>
    ad30:	cf 01       	movw	r24, r30
    ad32:	08 95       	ret
    ad34:	46 2f       	mov	r20, r22
    ad36:	47 70       	andi	r20, 0x07	; 7
    ad38:	40 5d       	subi	r20, 0xD0	; 208
    ad3a:	41 93       	st	Z+, r20
    ad3c:	b3 e0       	ldi	r27, 0x03	; 3
    ad3e:	0f d0       	rcall	.+30     	; 0xad5e <__ultoa_invert+0x86>
    ad40:	c9 f7       	brne	.-14     	; 0xad34 <__ultoa_invert+0x5c>
    ad42:	f6 cf       	rjmp	.-20     	; 0xad30 <__ultoa_invert+0x58>
    ad44:	46 2f       	mov	r20, r22
    ad46:	4f 70       	andi	r20, 0x0F	; 15
    ad48:	40 5d       	subi	r20, 0xD0	; 208
    ad4a:	4a 33       	cpi	r20, 0x3A	; 58
    ad4c:	18 f0       	brcs	.+6      	; 0xad54 <__ultoa_invert+0x7c>
    ad4e:	49 5d       	subi	r20, 0xD9	; 217
    ad50:	31 fd       	sbrc	r19, 1
    ad52:	40 52       	subi	r20, 0x20	; 32
    ad54:	41 93       	st	Z+, r20
    ad56:	02 d0       	rcall	.+4      	; 0xad5c <__ultoa_invert+0x84>
    ad58:	a9 f7       	brne	.-22     	; 0xad44 <__ultoa_invert+0x6c>
    ad5a:	ea cf       	rjmp	.-44     	; 0xad30 <__ultoa_invert+0x58>
    ad5c:	b4 e0       	ldi	r27, 0x04	; 4
    ad5e:	a6 95       	lsr	r26
    ad60:	97 95       	ror	r25
    ad62:	87 95       	ror	r24
    ad64:	77 95       	ror	r23
    ad66:	67 95       	ror	r22
    ad68:	ba 95       	dec	r27
    ad6a:	c9 f7       	brne	.-14     	; 0xad5e <__ultoa_invert+0x86>
    ad6c:	00 97       	sbiw	r24, 0x00	; 0
    ad6e:	61 05       	cpc	r22, r1
    ad70:	71 05       	cpc	r23, r1
    ad72:	08 95       	ret
    ad74:	9b 01       	movw	r18, r22
    ad76:	ac 01       	movw	r20, r24
    ad78:	0a 2e       	mov	r0, r26
    ad7a:	06 94       	lsr	r0
    ad7c:	57 95       	ror	r21
    ad7e:	47 95       	ror	r20
    ad80:	37 95       	ror	r19
    ad82:	27 95       	ror	r18
    ad84:	ba 95       	dec	r27
    ad86:	c9 f7       	brne	.-14     	; 0xad7a <__ultoa_invert+0xa2>
    ad88:	62 0f       	add	r22, r18
    ad8a:	73 1f       	adc	r23, r19
    ad8c:	84 1f       	adc	r24, r20
    ad8e:	95 1f       	adc	r25, r21
    ad90:	a0 1d       	adc	r26, r0
    ad92:	08 95       	ret

0000ad94 <putval>:
    ad94:	20 fd       	sbrc	r18, 0
    ad96:	09 c0       	rjmp	.+18     	; 0xadaa <putval+0x16>
    ad98:	fc 01       	movw	r30, r24
    ad9a:	23 fd       	sbrc	r18, 3
    ad9c:	05 c0       	rjmp	.+10     	; 0xada8 <putval+0x14>
    ad9e:	22 ff       	sbrs	r18, 2
    ada0:	02 c0       	rjmp	.+4      	; 0xada6 <putval+0x12>
    ada2:	73 83       	std	Z+3, r23	; 0x03
    ada4:	62 83       	std	Z+2, r22	; 0x02
    ada6:	51 83       	std	Z+1, r21	; 0x01
    ada8:	40 83       	st	Z, r20
    adaa:	08 95       	ret

0000adac <mulacc>:
    adac:	44 fd       	sbrc	r20, 4
    adae:	10 c0       	rjmp	.+32     	; 0xadd0 <mulacc+0x24>
    adb0:	46 fd       	sbrc	r20, 6
    adb2:	10 c0       	rjmp	.+32     	; 0xadd4 <mulacc+0x28>
    adb4:	db 01       	movw	r26, r22
    adb6:	fc 01       	movw	r30, r24
    adb8:	aa 0f       	add	r26, r26
    adba:	bb 1f       	adc	r27, r27
    adbc:	ee 1f       	adc	r30, r30
    adbe:	ff 1f       	adc	r31, r31
    adc0:	10 94       	com	r1
    adc2:	d1 f7       	brne	.-12     	; 0xadb8 <mulacc+0xc>
    adc4:	6a 0f       	add	r22, r26
    adc6:	7b 1f       	adc	r23, r27
    adc8:	8e 1f       	adc	r24, r30
    adca:	9f 1f       	adc	r25, r31
    adcc:	31 e0       	ldi	r19, 0x01	; 1
    adce:	03 c0       	rjmp	.+6      	; 0xadd6 <mulacc+0x2a>
    add0:	33 e0       	ldi	r19, 0x03	; 3
    add2:	01 c0       	rjmp	.+2      	; 0xadd6 <mulacc+0x2a>
    add4:	34 e0       	ldi	r19, 0x04	; 4
    add6:	66 0f       	add	r22, r22
    add8:	77 1f       	adc	r23, r23
    adda:	88 1f       	adc	r24, r24
    addc:	99 1f       	adc	r25, r25
    adde:	31 50       	subi	r19, 0x01	; 1
    ade0:	d1 f7       	brne	.-12     	; 0xadd6 <mulacc+0x2a>
    ade2:	62 0f       	add	r22, r18
    ade4:	71 1d       	adc	r23, r1
    ade6:	81 1d       	adc	r24, r1
    ade8:	91 1d       	adc	r25, r1
    adea:	08 95       	ret

0000adec <skip_spaces>:
    adec:	0f 93       	push	r16
    adee:	1f 93       	push	r17
    adf0:	cf 93       	push	r28
    adf2:	df 93       	push	r29
    adf4:	8c 01       	movw	r16, r24
    adf6:	c8 01       	movw	r24, r16
    adf8:	02 d3       	rcall	.+1540   	; 0xb3fe <fgetc>
    adfa:	ec 01       	movw	r28, r24
    adfc:	97 fd       	sbrc	r25, 7
    adfe:	06 c0       	rjmp	.+12     	; 0xae0c <skip_spaces+0x20>
    ae00:	db d2       	rcall	.+1462   	; 0xb3b8 <isspace>
    ae02:	89 2b       	or	r24, r25
    ae04:	c1 f7       	brne	.-16     	; 0xadf6 <skip_spaces+0xa>
    ae06:	b8 01       	movw	r22, r16
    ae08:	ce 01       	movw	r24, r28
    ae0a:	37 d3       	rcall	.+1646   	; 0xb47a <ungetc>
    ae0c:	ce 01       	movw	r24, r28
    ae0e:	df 91       	pop	r29
    ae10:	cf 91       	pop	r28
    ae12:	1f 91       	pop	r17
    ae14:	0f 91       	pop	r16
    ae16:	08 95       	ret

0000ae18 <conv_int>:
    ae18:	8f 92       	push	r8
    ae1a:	9f 92       	push	r9
    ae1c:	af 92       	push	r10
    ae1e:	cf 92       	push	r12
    ae20:	df 92       	push	r13
    ae22:	ef 92       	push	r14
    ae24:	ff 92       	push	r15
    ae26:	0f 93       	push	r16
    ae28:	1f 93       	push	r17
    ae2a:	cf 93       	push	r28
    ae2c:	df 93       	push	r29
    ae2e:	ec 01       	movw	r28, r24
    ae30:	a6 2e       	mov	r10, r22
    ae32:	4a 01       	movw	r8, r20
    ae34:	02 2f       	mov	r16, r18
    ae36:	e3 d2       	rcall	.+1478   	; 0xb3fe <fgetc>
    ae38:	ac 01       	movw	r20, r24
    ae3a:	55 27       	eor	r21, r21
    ae3c:	4b 32       	cpi	r20, 0x2B	; 43
    ae3e:	51 05       	cpc	r21, r1
    ae40:	21 f0       	breq	.+8      	; 0xae4a <conv_int+0x32>
    ae42:	4d 32       	cpi	r20, 0x2D	; 45
    ae44:	51 05       	cpc	r21, r1
    ae46:	49 f4       	brne	.+18     	; 0xae5a <conv_int+0x42>
    ae48:	00 68       	ori	r16, 0x80	; 128
    ae4a:	aa 94       	dec	r10
    ae4c:	11 f4       	brne	.+4      	; 0xae52 <conv_int+0x3a>
    ae4e:	80 e0       	ldi	r24, 0x00	; 0
    ae50:	60 c0       	rjmp	.+192    	; 0xaf12 <conv_int+0xfa>
    ae52:	ce 01       	movw	r24, r28
    ae54:	d4 d2       	rcall	.+1448   	; 0xb3fe <fgetc>
    ae56:	97 fd       	sbrc	r25, 7
    ae58:	fa cf       	rjmp	.-12     	; 0xae4e <conv_int+0x36>
    ae5a:	10 2f       	mov	r17, r16
    ae5c:	1d 7f       	andi	r17, 0xFD	; 253
    ae5e:	30 2f       	mov	r19, r16
    ae60:	30 73       	andi	r19, 0x30	; 48
    ae62:	f1 f4       	brne	.+60     	; 0xaea0 <conv_int+0x88>
    ae64:	80 33       	cpi	r24, 0x30	; 48
    ae66:	e1 f4       	brne	.+56     	; 0xaea0 <conv_int+0x88>
    ae68:	ff 24       	eor	r15, r15
    ae6a:	fa 94       	dec	r15
    ae6c:	fa 0c       	add	r15, r10
    ae6e:	09 f4       	brne	.+2      	; 0xae72 <conv_int+0x5a>
    ae70:	3d c0       	rjmp	.+122    	; 0xaeec <conv_int+0xd4>
    ae72:	ce 01       	movw	r24, r28
    ae74:	c4 d2       	rcall	.+1416   	; 0xb3fe <fgetc>
    ae76:	97 fd       	sbrc	r25, 7
    ae78:	39 c0       	rjmp	.+114    	; 0xaeec <conv_int+0xd4>
    ae7a:	38 2f       	mov	r19, r24
    ae7c:	3f 7d       	andi	r19, 0xDF	; 223
    ae7e:	38 35       	cpi	r19, 0x58	; 88
    ae80:	49 f4       	brne	.+18     	; 0xae94 <conv_int+0x7c>
    ae82:	12 64       	ori	r17, 0x42	; 66
    ae84:	aa 94       	dec	r10
    ae86:	aa 94       	dec	r10
    ae88:	89 f1       	breq	.+98     	; 0xaeec <conv_int+0xd4>
    ae8a:	ce 01       	movw	r24, r28
    ae8c:	b8 d2       	rcall	.+1392   	; 0xb3fe <fgetc>
    ae8e:	97 ff       	sbrs	r25, 7
    ae90:	07 c0       	rjmp	.+14     	; 0xaea0 <conv_int+0x88>
    ae92:	2c c0       	rjmp	.+88     	; 0xaeec <conv_int+0xd4>
    ae94:	06 ff       	sbrs	r16, 6
    ae96:	02 c0       	rjmp	.+4      	; 0xae9c <conv_int+0x84>
    ae98:	12 60       	ori	r17, 0x02	; 2
    ae9a:	01 c0       	rjmp	.+2      	; 0xae9e <conv_int+0x86>
    ae9c:	12 61       	ori	r17, 0x12	; 18
    ae9e:	af 2c       	mov	r10, r15
    aea0:	c1 2c       	mov	r12, r1
    aea2:	d1 2c       	mov	r13, r1
    aea4:	76 01       	movw	r14, r12
    aea6:	20 ed       	ldi	r18, 0xD0	; 208
    aea8:	28 0f       	add	r18, r24
    aeaa:	28 30       	cpi	r18, 0x08	; 8
    aeac:	78 f0       	brcs	.+30     	; 0xaecc <conv_int+0xb4>
    aeae:	14 ff       	sbrs	r17, 4
    aeb0:	03 c0       	rjmp	.+6      	; 0xaeb8 <conv_int+0xa0>
    aeb2:	be 01       	movw	r22, r28
    aeb4:	e2 d2       	rcall	.+1476   	; 0xb47a <ungetc>
    aeb6:	17 c0       	rjmp	.+46     	; 0xaee6 <conv_int+0xce>
    aeb8:	2a 30       	cpi	r18, 0x0A	; 10
    aeba:	40 f0       	brcs	.+16     	; 0xaecc <conv_int+0xb4>
    aebc:	16 ff       	sbrs	r17, 6
    aebe:	f9 cf       	rjmp	.-14     	; 0xaeb2 <conv_int+0x9a>
    aec0:	2f 7d       	andi	r18, 0xDF	; 223
    aec2:	3f ee       	ldi	r19, 0xEF	; 239
    aec4:	32 0f       	add	r19, r18
    aec6:	36 30       	cpi	r19, 0x06	; 6
    aec8:	a0 f7       	brcc	.-24     	; 0xaeb2 <conv_int+0x9a>
    aeca:	27 50       	subi	r18, 0x07	; 7
    aecc:	41 2f       	mov	r20, r17
    aece:	c7 01       	movw	r24, r14
    aed0:	b6 01       	movw	r22, r12
    aed2:	6c df       	rcall	.-296    	; 0xadac <mulacc>
    aed4:	6b 01       	movw	r12, r22
    aed6:	7c 01       	movw	r14, r24
    aed8:	12 60       	ori	r17, 0x02	; 2
    aeda:	aa 94       	dec	r10
    aedc:	51 f0       	breq	.+20     	; 0xaef2 <conv_int+0xda>
    aede:	ce 01       	movw	r24, r28
    aee0:	8e d2       	rcall	.+1308   	; 0xb3fe <fgetc>
    aee2:	97 ff       	sbrs	r25, 7
    aee4:	e0 cf       	rjmp	.-64     	; 0xaea6 <conv_int+0x8e>
    aee6:	11 fd       	sbrc	r17, 1
    aee8:	04 c0       	rjmp	.+8      	; 0xaef2 <conv_int+0xda>
    aeea:	b1 cf       	rjmp	.-158    	; 0xae4e <conv_int+0x36>
    aeec:	c1 2c       	mov	r12, r1
    aeee:	d1 2c       	mov	r13, r1
    aef0:	76 01       	movw	r14, r12
    aef2:	17 ff       	sbrs	r17, 7
    aef4:	08 c0       	rjmp	.+16     	; 0xaf06 <conv_int+0xee>
    aef6:	f0 94       	com	r15
    aef8:	e0 94       	com	r14
    aefa:	d0 94       	com	r13
    aefc:	c0 94       	com	r12
    aefe:	c1 1c       	adc	r12, r1
    af00:	d1 1c       	adc	r13, r1
    af02:	e1 1c       	adc	r14, r1
    af04:	f1 1c       	adc	r15, r1
    af06:	21 2f       	mov	r18, r17
    af08:	b7 01       	movw	r22, r14
    af0a:	a6 01       	movw	r20, r12
    af0c:	c4 01       	movw	r24, r8
    af0e:	42 df       	rcall	.-380    	; 0xad94 <putval>
    af10:	81 e0       	ldi	r24, 0x01	; 1
    af12:	df 91       	pop	r29
    af14:	cf 91       	pop	r28
    af16:	1f 91       	pop	r17
    af18:	0f 91       	pop	r16
    af1a:	ff 90       	pop	r15
    af1c:	ef 90       	pop	r14
    af1e:	df 90       	pop	r13
    af20:	cf 90       	pop	r12
    af22:	af 90       	pop	r10
    af24:	9f 90       	pop	r9
    af26:	8f 90       	pop	r8
    af28:	08 95       	ret

0000af2a <conv_brk>:
    af2a:	7f 92       	push	r7
    af2c:	8f 92       	push	r8
    af2e:	9f 92       	push	r9
    af30:	af 92       	push	r10
    af32:	bf 92       	push	r11
    af34:	cf 92       	push	r12
    af36:	df 92       	push	r13
    af38:	ef 92       	push	r14
    af3a:	ff 92       	push	r15
    af3c:	0f 93       	push	r16
    af3e:	1f 93       	push	r17
    af40:	cf 93       	push	r28
    af42:	df 93       	push	r29
    af44:	cd b7       	in	r28, 0x3d	; 61
    af46:	de b7       	in	r29, 0x3e	; 62
    af48:	a1 97       	sbiw	r28, 0x21	; 33
    af4a:	cd bf       	out	0x3d, r28	; 61
    af4c:	de bf       	out	0x3e, r29	; 62
    af4e:	5c 01       	movw	r10, r24
    af50:	7a 01       	movw	r14, r20
    af52:	8e 01       	movw	r16, r28
    af54:	0f 5f       	subi	r16, 0xFF	; 255
    af56:	1f 4f       	sbci	r17, 0xFF	; 255
    af58:	68 01       	movw	r12, r16
    af5a:	80 e2       	ldi	r24, 0x20	; 32
    af5c:	d8 01       	movw	r26, r16
    af5e:	1d 92       	st	X+, r1
    af60:	8a 95       	dec	r24
    af62:	e9 f7       	brne	.-6      	; 0xaf5e <conv_brk+0x34>
    af64:	f5 01       	movw	r30, r10
    af66:	73 80       	ldd	r7, Z+3	; 0x03
    af68:	40 e0       	ldi	r20, 0x00	; 0
    af6a:	50 e0       	ldi	r21, 0x00	; 0
    af6c:	81 2c       	mov	r8, r1
    af6e:	b0 e0       	ldi	r27, 0x00	; 0
    af70:	91 2c       	mov	r9, r1
    af72:	81 e0       	ldi	r24, 0x01	; 1
    af74:	90 e0       	ldi	r25, 0x00	; 0
    af76:	f9 01       	movw	r30, r18
    af78:	73 fc       	sbrc	r7, 3
    af7a:	a5 91       	lpm	r26, Z+
    af7c:	73 fe       	sbrs	r7, 3
    af7e:	a1 91       	ld	r26, Z+
    af80:	8f 01       	movw	r16, r30
    af82:	7a 2f       	mov	r23, r26
    af84:	9f 01       	movw	r18, r30
    af86:	a1 11       	cpse	r26, r1
    af88:	03 c0       	rjmp	.+6      	; 0xaf90 <conv_brk+0x66>
    af8a:	80 e0       	ldi	r24, 0x00	; 0
    af8c:	90 e0       	ldi	r25, 0x00	; 0
    af8e:	7b c0       	rjmp	.+246    	; 0xb086 <conv_brk+0x15c>
    af90:	ae 35       	cpi	r26, 0x5E	; 94
    af92:	19 f4       	brne	.+6      	; 0xaf9a <conv_brk+0x70>
    af94:	41 15       	cp	r20, r1
    af96:	51 05       	cpc	r21, r1
    af98:	59 f1       	breq	.+86     	; 0xaff0 <conv_brk+0xc6>
    af9a:	e9 2d       	mov	r30, r9
    af9c:	f0 e0       	ldi	r31, 0x00	; 0
    af9e:	e4 17       	cp	r30, r20
    afa0:	f5 07       	cpc	r31, r21
    afa2:	3c f4       	brge	.+14     	; 0xafb2 <conv_brk+0x88>
    afa4:	ad 35       	cpi	r26, 0x5D	; 93
    afa6:	69 f1       	breq	.+90     	; 0xb002 <conv_brk+0xd8>
    afa8:	ad 32       	cpi	r26, 0x2D	; 45
    afaa:	19 f4       	brne	.+6      	; 0xafb2 <conv_brk+0x88>
    afac:	bb 23       	and	r27, r27
    afae:	19 f1       	breq	.+70     	; 0xaff6 <conv_brk+0xcc>
    afb0:	03 c0       	rjmp	.+6      	; 0xafb8 <conv_brk+0x8e>
    afb2:	b1 11       	cpse	r27, r1
    afb4:	01 c0       	rjmp	.+2      	; 0xafb8 <conv_brk+0x8e>
    afb6:	8a 2e       	mov	r8, r26
    afb8:	e7 2f       	mov	r30, r23
    afba:	e6 95       	lsr	r30
    afbc:	e6 95       	lsr	r30
    afbe:	e6 95       	lsr	r30
    afc0:	86 01       	movw	r16, r12
    afc2:	0e 0f       	add	r16, r30
    afc4:	11 1d       	adc	r17, r1
    afc6:	f8 01       	movw	r30, r16
    afc8:	a7 2f       	mov	r26, r23
    afca:	a7 70       	andi	r26, 0x07	; 7
    afcc:	8c 01       	movw	r16, r24
    afce:	02 c0       	rjmp	.+4      	; 0xafd4 <conv_brk+0xaa>
    afd0:	00 0f       	add	r16, r16
    afd2:	11 1f       	adc	r17, r17
    afd4:	aa 95       	dec	r26
    afd6:	e2 f7       	brpl	.-8      	; 0xafd0 <conv_brk+0xa6>
    afd8:	d8 01       	movw	r26, r16
    afda:	b0 81       	ld	r27, Z
    afdc:	ba 2b       	or	r27, r26
    afde:	b0 83       	st	Z, r27
    afe0:	78 15       	cp	r23, r8
    afe2:	59 f0       	breq	.+22     	; 0xaffa <conv_brk+0xd0>
    afe4:	78 15       	cp	r23, r8
    afe6:	10 f4       	brcc	.+4      	; 0xafec <conv_brk+0xc2>
    afe8:	7f 5f       	subi	r23, 0xFF	; 255
    afea:	e6 cf       	rjmp	.-52     	; 0xafb8 <conv_brk+0x8e>
    afec:	71 50       	subi	r23, 0x01	; 1
    afee:	e4 cf       	rjmp	.-56     	; 0xafb8 <conv_brk+0x8e>
    aff0:	99 24       	eor	r9, r9
    aff2:	93 94       	inc	r9
    aff4:	03 c0       	rjmp	.+6      	; 0xaffc <conv_brk+0xd2>
    aff6:	b1 e0       	ldi	r27, 0x01	; 1
    aff8:	01 c0       	rjmp	.+2      	; 0xaffc <conv_brk+0xd2>
    affa:	b0 e0       	ldi	r27, 0x00	; 0
    affc:	4f 5f       	subi	r20, 0xFF	; 255
    affe:	5f 4f       	sbci	r21, 0xFF	; 255
    b000:	ba cf       	rjmp	.-140    	; 0xaf76 <conv_brk+0x4c>
    b002:	bb 23       	and	r27, r27
    b004:	19 f0       	breq	.+6      	; 0xb00c <conv_brk+0xe2>
    b006:	8e 81       	ldd	r24, Y+6	; 0x06
    b008:	80 62       	ori	r24, 0x20	; 32
    b00a:	8e 83       	std	Y+6, r24	; 0x06
    b00c:	91 10       	cpse	r9, r1
    b00e:	03 c0       	rjmp	.+6      	; 0xb016 <conv_brk+0xec>
    b010:	99 24       	eor	r9, r9
    b012:	93 94       	inc	r9
    b014:	15 c0       	rjmp	.+42     	; 0xb040 <conv_brk+0x116>
    b016:	f6 01       	movw	r30, r12
    b018:	ce 01       	movw	r24, r28
    b01a:	81 96       	adiw	r24, 0x21	; 33
    b01c:	20 81       	ld	r18, Z
    b01e:	20 95       	com	r18
    b020:	21 93       	st	Z+, r18
    b022:	e8 17       	cp	r30, r24
    b024:	f9 07       	cpc	r31, r25
    b026:	d1 f7       	brne	.-12     	; 0xb01c <conv_brk+0xf2>
    b028:	f3 cf       	rjmp	.-26     	; 0xb010 <conv_brk+0xe6>
    b02a:	e1 14       	cp	r14, r1
    b02c:	f1 04       	cpc	r15, r1
    b02e:	29 f0       	breq	.+10     	; 0xb03a <conv_brk+0x110>
    b030:	d7 01       	movw	r26, r14
    b032:	8c 93       	st	X, r24
    b034:	f7 01       	movw	r30, r14
    b036:	31 96       	adiw	r30, 0x01	; 1
    b038:	7f 01       	movw	r14, r30
    b03a:	61 50       	subi	r22, 0x01	; 1
    b03c:	f1 f0       	breq	.+60     	; 0xb07a <conv_brk+0x150>
    b03e:	91 2c       	mov	r9, r1
    b040:	c5 01       	movw	r24, r10
    b042:	69 a3       	std	Y+33, r22	; 0x21
    b044:	dc d1       	rcall	.+952    	; 0xb3fe <fgetc>
    b046:	69 a1       	ldd	r22, Y+33	; 0x21
    b048:	97 fd       	sbrc	r25, 7
    b04a:	15 c0       	rjmp	.+42     	; 0xb076 <conv_brk+0x14c>
    b04c:	28 2f       	mov	r18, r24
    b04e:	26 95       	lsr	r18
    b050:	26 95       	lsr	r18
    b052:	26 95       	lsr	r18
    b054:	f6 01       	movw	r30, r12
    b056:	e2 0f       	add	r30, r18
    b058:	f1 1d       	adc	r31, r1
    b05a:	20 81       	ld	r18, Z
    b05c:	30 e0       	ldi	r19, 0x00	; 0
    b05e:	ac 01       	movw	r20, r24
    b060:	47 70       	andi	r20, 0x07	; 7
    b062:	55 27       	eor	r21, r21
    b064:	02 c0       	rjmp	.+4      	; 0xb06a <conv_brk+0x140>
    b066:	35 95       	asr	r19
    b068:	27 95       	ror	r18
    b06a:	4a 95       	dec	r20
    b06c:	e2 f7       	brpl	.-8      	; 0xb066 <conv_brk+0x13c>
    b06e:	20 fd       	sbrc	r18, 0
    b070:	dc cf       	rjmp	.-72     	; 0xb02a <conv_brk+0x100>
    b072:	b5 01       	movw	r22, r10
    b074:	02 d2       	rcall	.+1028   	; 0xb47a <ungetc>
    b076:	91 10       	cpse	r9, r1
    b078:	88 cf       	rjmp	.-240    	; 0xaf8a <conv_brk+0x60>
    b07a:	e1 14       	cp	r14, r1
    b07c:	f1 04       	cpc	r15, r1
    b07e:	11 f0       	breq	.+4      	; 0xb084 <conv_brk+0x15a>
    b080:	d7 01       	movw	r26, r14
    b082:	1c 92       	st	X, r1
    b084:	c8 01       	movw	r24, r16
    b086:	a1 96       	adiw	r28, 0x21	; 33
    b088:	cd bf       	out	0x3d, r28	; 61
    b08a:	de bf       	out	0x3e, r29	; 62
    b08c:	df 91       	pop	r29
    b08e:	cf 91       	pop	r28
    b090:	1f 91       	pop	r17
    b092:	0f 91       	pop	r16
    b094:	ff 90       	pop	r15
    b096:	ef 90       	pop	r14
    b098:	df 90       	pop	r13
    b09a:	cf 90       	pop	r12
    b09c:	bf 90       	pop	r11
    b09e:	af 90       	pop	r10
    b0a0:	9f 90       	pop	r9
    b0a2:	8f 90       	pop	r8
    b0a4:	7f 90       	pop	r7
    b0a6:	08 95       	ret

0000b0a8 <vfscanf>:
    b0a8:	4f 92       	push	r4
    b0aa:	5f 92       	push	r5
    b0ac:	7f 92       	push	r7
    b0ae:	8f 92       	push	r8
    b0b0:	9f 92       	push	r9
    b0b2:	af 92       	push	r10
    b0b4:	bf 92       	push	r11
    b0b6:	cf 92       	push	r12
    b0b8:	df 92       	push	r13
    b0ba:	ef 92       	push	r14
    b0bc:	ff 92       	push	r15
    b0be:	0f 93       	push	r16
    b0c0:	1f 93       	push	r17
    b0c2:	cf 93       	push	r28
    b0c4:	df 93       	push	r29
    b0c6:	1f 92       	push	r1
    b0c8:	cd b7       	in	r28, 0x3d	; 61
    b0ca:	de b7       	in	r29, 0x3e	; 62
    b0cc:	8c 01       	movw	r16, r24
    b0ce:	2b 01       	movw	r4, r22
    b0d0:	7a 01       	movw	r14, r20
    b0d2:	fc 01       	movw	r30, r24
    b0d4:	16 82       	std	Z+6, r1	; 0x06
    b0d6:	17 82       	std	Z+7, r1	; 0x07
    b0d8:	a1 2c       	mov	r10, r1
    b0da:	f8 01       	movw	r30, r16
    b0dc:	d3 80       	ldd	r13, Z+3	; 0x03
    b0de:	f2 01       	movw	r30, r4
    b0e0:	d3 fc       	sbrc	r13, 3
    b0e2:	85 91       	lpm	r24, Z+
    b0e4:	d3 fe       	sbrs	r13, 3
    b0e6:	81 91       	ld	r24, Z+
    b0e8:	38 2f       	mov	r19, r24
    b0ea:	2f 01       	movw	r4, r30
    b0ec:	88 23       	and	r24, r24
    b0ee:	09 f4       	brne	.+2      	; 0xb0f2 <vfscanf+0x4a>
    b0f0:	ee c0       	rjmp	.+476    	; 0xb2ce <vfscanf+0x226>
    b0f2:	90 e0       	ldi	r25, 0x00	; 0
    b0f4:	39 83       	std	Y+1, r19	; 0x01
    b0f6:	60 d1       	rcall	.+704    	; 0xb3b8 <isspace>
    b0f8:	39 81       	ldd	r19, Y+1	; 0x01
    b0fa:	89 2b       	or	r24, r25
    b0fc:	19 f0       	breq	.+6      	; 0xb104 <vfscanf+0x5c>
    b0fe:	c8 01       	movw	r24, r16
    b100:	75 de       	rcall	.-790    	; 0xadec <skip_spaces>
    b102:	eb cf       	rjmp	.-42     	; 0xb0da <vfscanf+0x32>
    b104:	35 32       	cpi	r19, 0x25	; 37
    b106:	41 f4       	brne	.+16     	; 0xb118 <vfscanf+0x70>
    b108:	f2 01       	movw	r30, r4
    b10a:	d3 fc       	sbrc	r13, 3
    b10c:	35 91       	lpm	r19, Z+
    b10e:	d3 fe       	sbrs	r13, 3
    b110:	31 91       	ld	r19, Z+
    b112:	2f 01       	movw	r4, r30
    b114:	35 32       	cpi	r19, 0x25	; 37
    b116:	59 f4       	brne	.+22     	; 0xb12e <vfscanf+0x86>
    b118:	c8 01       	movw	r24, r16
    b11a:	39 83       	std	Y+1, r19	; 0x01
    b11c:	70 d1       	rcall	.+736    	; 0xb3fe <fgetc>
    b11e:	39 81       	ldd	r19, Y+1	; 0x01
    b120:	97 fd       	sbrc	r25, 7
    b122:	d3 c0       	rjmp	.+422    	; 0xb2ca <vfscanf+0x222>
    b124:	38 17       	cp	r19, r24
    b126:	c9 f2       	breq	.-78     	; 0xb0da <vfscanf+0x32>
    b128:	b8 01       	movw	r22, r16
    b12a:	a7 d1       	rcall	.+846    	; 0xb47a <ungetc>
    b12c:	d0 c0       	rjmp	.+416    	; 0xb2ce <vfscanf+0x226>
    b12e:	3a 32       	cpi	r19, 0x2A	; 42
    b130:	41 f4       	brne	.+16     	; 0xb142 <vfscanf+0x9a>
    b132:	d3 fc       	sbrc	r13, 3
    b134:	35 91       	lpm	r19, Z+
    b136:	d3 fe       	sbrs	r13, 3
    b138:	31 91       	ld	r19, Z+
    b13a:	2f 01       	movw	r4, r30
    b13c:	bb 24       	eor	r11, r11
    b13e:	b3 94       	inc	r11
    b140:	01 c0       	rjmp	.+2      	; 0xb144 <vfscanf+0x9c>
    b142:	b1 2c       	mov	r11, r1
    b144:	71 2c       	mov	r7, r1
    b146:	20 ed       	ldi	r18, 0xD0	; 208
    b148:	23 0f       	add	r18, r19
    b14a:	2a 30       	cpi	r18, 0x0A	; 10
    b14c:	88 f4       	brcc	.+34     	; 0xb170 <vfscanf+0xc8>
    b14e:	fb 2d       	mov	r31, r11
    b150:	f2 60       	ori	r31, 0x02	; 2
    b152:	bf 2e       	mov	r11, r31
    b154:	67 2d       	mov	r22, r7
    b156:	70 e0       	ldi	r23, 0x00	; 0
    b158:	80 e0       	ldi	r24, 0x00	; 0
    b15a:	90 e0       	ldi	r25, 0x00	; 0
    b15c:	40 e2       	ldi	r20, 0x20	; 32
    b15e:	26 de       	rcall	.-948    	; 0xadac <mulacc>
    b160:	76 2e       	mov	r7, r22
    b162:	f2 01       	movw	r30, r4
    b164:	d3 fc       	sbrc	r13, 3
    b166:	35 91       	lpm	r19, Z+
    b168:	d3 fe       	sbrs	r13, 3
    b16a:	31 91       	ld	r19, Z+
    b16c:	2f 01       	movw	r4, r30
    b16e:	eb cf       	rjmp	.-42     	; 0xb146 <vfscanf+0x9e>
    b170:	b1 fe       	sbrs	r11, 1
    b172:	03 c0       	rjmp	.+6      	; 0xb17a <vfscanf+0xd2>
    b174:	71 10       	cpse	r7, r1
    b176:	03 c0       	rjmp	.+6      	; 0xb17e <vfscanf+0xd6>
    b178:	aa c0       	rjmp	.+340    	; 0xb2ce <vfscanf+0x226>
    b17a:	77 24       	eor	r7, r7
    b17c:	7a 94       	dec	r7
    b17e:	38 36       	cpi	r19, 0x68	; 104
    b180:	19 f0       	breq	.+6      	; 0xb188 <vfscanf+0xe0>
    b182:	3c 36       	cpi	r19, 0x6C	; 108
    b184:	61 f0       	breq	.+24     	; 0xb19e <vfscanf+0xf6>
    b186:	14 c0       	rjmp	.+40     	; 0xb1b0 <vfscanf+0x108>
    b188:	f2 01       	movw	r30, r4
    b18a:	d3 fc       	sbrc	r13, 3
    b18c:	35 91       	lpm	r19, Z+
    b18e:	d3 fe       	sbrs	r13, 3
    b190:	31 91       	ld	r19, Z+
    b192:	2f 01       	movw	r4, r30
    b194:	38 36       	cpi	r19, 0x68	; 104
    b196:	61 f4       	brne	.+24     	; 0xb1b0 <vfscanf+0x108>
    b198:	fb 2d       	mov	r31, r11
    b19a:	f8 60       	ori	r31, 0x08	; 8
    b19c:	bf 2e       	mov	r11, r31
    b19e:	8b 2d       	mov	r24, r11
    b1a0:	84 60       	ori	r24, 0x04	; 4
    b1a2:	b8 2e       	mov	r11, r24
    b1a4:	f2 01       	movw	r30, r4
    b1a6:	d3 fc       	sbrc	r13, 3
    b1a8:	35 91       	lpm	r19, Z+
    b1aa:	d3 fe       	sbrs	r13, 3
    b1ac:	31 91       	ld	r19, Z+
    b1ae:	2f 01       	movw	r4, r30
    b1b0:	33 23       	and	r19, r19
    b1b2:	09 f4       	brne	.+2      	; 0xb1b6 <vfscanf+0x10e>
    b1b4:	8c c0       	rjmp	.+280    	; 0xb2ce <vfscanf+0x226>
    b1b6:	63 2f       	mov	r22, r19
    b1b8:	70 e0       	ldi	r23, 0x00	; 0
    b1ba:	87 ec       	ldi	r24, 0xC7	; 199
    b1bc:	9e e0       	ldi	r25, 0x0E	; 14
    b1be:	39 83       	std	Y+1, r19	; 0x01
    b1c0:	03 d1       	rcall	.+518    	; 0xb3c8 <strchr_P>
    b1c2:	39 81       	ldd	r19, Y+1	; 0x01
    b1c4:	89 2b       	or	r24, r25
    b1c6:	09 f4       	brne	.+2      	; 0xb1ca <vfscanf+0x122>
    b1c8:	82 c0       	rjmp	.+260    	; 0xb2ce <vfscanf+0x226>
    b1ca:	b0 fc       	sbrc	r11, 0
    b1cc:	07 c0       	rjmp	.+14     	; 0xb1dc <vfscanf+0x134>
    b1ce:	f7 01       	movw	r30, r14
    b1d0:	c0 80       	ld	r12, Z
    b1d2:	d1 80       	ldd	r13, Z+1	; 0x01
    b1d4:	c7 01       	movw	r24, r14
    b1d6:	02 96       	adiw	r24, 0x02	; 2
    b1d8:	7c 01       	movw	r14, r24
    b1da:	02 c0       	rjmp	.+4      	; 0xb1e0 <vfscanf+0x138>
    b1dc:	c1 2c       	mov	r12, r1
    b1de:	d1 2c       	mov	r13, r1
    b1e0:	3e 36       	cpi	r19, 0x6E	; 110
    b1e2:	49 f4       	brne	.+18     	; 0xb1f6 <vfscanf+0x14e>
    b1e4:	f8 01       	movw	r30, r16
    b1e6:	46 81       	ldd	r20, Z+6	; 0x06
    b1e8:	57 81       	ldd	r21, Z+7	; 0x07
    b1ea:	60 e0       	ldi	r22, 0x00	; 0
    b1ec:	70 e0       	ldi	r23, 0x00	; 0
    b1ee:	2b 2d       	mov	r18, r11
    b1f0:	c6 01       	movw	r24, r12
    b1f2:	d0 dd       	rcall	.-1120   	; 0xad94 <putval>
    b1f4:	72 cf       	rjmp	.-284    	; 0xb0da <vfscanf+0x32>
    b1f6:	33 36       	cpi	r19, 0x63	; 99
    b1f8:	99 f4       	brne	.+38     	; 0xb220 <vfscanf+0x178>
    b1fa:	b1 fc       	sbrc	r11, 1
    b1fc:	02 c0       	rjmp	.+4      	; 0xb202 <vfscanf+0x15a>
    b1fe:	77 24       	eor	r7, r7
    b200:	73 94       	inc	r7
    b202:	c8 01       	movw	r24, r16
    b204:	fc d0       	rcall	.+504    	; 0xb3fe <fgetc>
    b206:	97 fd       	sbrc	r25, 7
    b208:	60 c0       	rjmp	.+192    	; 0xb2ca <vfscanf+0x222>
    b20a:	c1 14       	cp	r12, r1
    b20c:	d1 04       	cpc	r13, r1
    b20e:	29 f0       	breq	.+10     	; 0xb21a <vfscanf+0x172>
    b210:	f6 01       	movw	r30, r12
    b212:	80 83       	st	Z, r24
    b214:	c6 01       	movw	r24, r12
    b216:	01 96       	adiw	r24, 0x01	; 1
    b218:	6c 01       	movw	r12, r24
    b21a:	7a 94       	dec	r7
    b21c:	91 f7       	brne	.-28     	; 0xb202 <vfscanf+0x15a>
    b21e:	51 c0       	rjmp	.+162    	; 0xb2c2 <vfscanf+0x21a>
    b220:	3b 35       	cpi	r19, 0x5B	; 91
    b222:	51 f4       	brne	.+20     	; 0xb238 <vfscanf+0x190>
    b224:	92 01       	movw	r18, r4
    b226:	a6 01       	movw	r20, r12
    b228:	67 2d       	mov	r22, r7
    b22a:	c8 01       	movw	r24, r16
    b22c:	7e de       	rcall	.-772    	; 0xaf2a <conv_brk>
    b22e:	2c 01       	movw	r4, r24
    b230:	00 97       	sbiw	r24, 0x00	; 0
    b232:	09 f0       	breq	.+2      	; 0xb236 <vfscanf+0x18e>
    b234:	46 c0       	rjmp	.+140    	; 0xb2c2 <vfscanf+0x21a>
    b236:	40 c0       	rjmp	.+128    	; 0xb2b8 <vfscanf+0x210>
    b238:	c8 01       	movw	r24, r16
    b23a:	39 83       	std	Y+1, r19	; 0x01
    b23c:	d7 dd       	rcall	.-1106   	; 0xadec <skip_spaces>
    b23e:	39 81       	ldd	r19, Y+1	; 0x01
    b240:	97 fd       	sbrc	r25, 7
    b242:	43 c0       	rjmp	.+134    	; 0xb2ca <vfscanf+0x222>
    b244:	3f 36       	cpi	r19, 0x6F	; 111
    b246:	51 f1       	breq	.+84     	; 0xb29c <vfscanf+0x1f4>
    b248:	28 f4       	brcc	.+10     	; 0xb254 <vfscanf+0x1ac>
    b24a:	34 36       	cpi	r19, 0x64	; 100
    b24c:	19 f1       	breq	.+70     	; 0xb294 <vfscanf+0x1ec>
    b24e:	39 36       	cpi	r19, 0x69	; 105
    b250:	61 f1       	breq	.+88     	; 0xb2aa <vfscanf+0x202>
    b252:	28 c0       	rjmp	.+80     	; 0xb2a4 <vfscanf+0x1fc>
    b254:	33 37       	cpi	r19, 0x73	; 115
    b256:	69 f0       	breq	.+26     	; 0xb272 <vfscanf+0x1ca>
    b258:	35 37       	cpi	r19, 0x75	; 117
    b25a:	e1 f0       	breq	.+56     	; 0xb294 <vfscanf+0x1ec>
    b25c:	23 c0       	rjmp	.+70     	; 0xb2a4 <vfscanf+0x1fc>
    b25e:	c1 14       	cp	r12, r1
    b260:	d1 04       	cpc	r13, r1
    b262:	29 f0       	breq	.+10     	; 0xb26e <vfscanf+0x1c6>
    b264:	f6 01       	movw	r30, r12
    b266:	80 82       	st	Z, r8
    b268:	c6 01       	movw	r24, r12
    b26a:	01 96       	adiw	r24, 0x01	; 1
    b26c:	6c 01       	movw	r12, r24
    b26e:	7a 94       	dec	r7
    b270:	59 f0       	breq	.+22     	; 0xb288 <vfscanf+0x1e0>
    b272:	c8 01       	movw	r24, r16
    b274:	c4 d0       	rcall	.+392    	; 0xb3fe <fgetc>
    b276:	4c 01       	movw	r8, r24
    b278:	97 fd       	sbrc	r25, 7
    b27a:	06 c0       	rjmp	.+12     	; 0xb288 <vfscanf+0x1e0>
    b27c:	9d d0       	rcall	.+314    	; 0xb3b8 <isspace>
    b27e:	89 2b       	or	r24, r25
    b280:	71 f3       	breq	.-36     	; 0xb25e <vfscanf+0x1b6>
    b282:	b8 01       	movw	r22, r16
    b284:	c4 01       	movw	r24, r8
    b286:	f9 d0       	rcall	.+498    	; 0xb47a <ungetc>
    b288:	c1 14       	cp	r12, r1
    b28a:	d1 04       	cpc	r13, r1
    b28c:	d1 f0       	breq	.+52     	; 0xb2c2 <vfscanf+0x21a>
    b28e:	f6 01       	movw	r30, r12
    b290:	10 82       	st	Z, r1
    b292:	17 c0       	rjmp	.+46     	; 0xb2c2 <vfscanf+0x21a>
    b294:	fb 2d       	mov	r31, r11
    b296:	f0 62       	ori	r31, 0x20	; 32
    b298:	bf 2e       	mov	r11, r31
    b29a:	07 c0       	rjmp	.+14     	; 0xb2aa <vfscanf+0x202>
    b29c:	8b 2d       	mov	r24, r11
    b29e:	80 61       	ori	r24, 0x10	; 16
    b2a0:	b8 2e       	mov	r11, r24
    b2a2:	03 c0       	rjmp	.+6      	; 0xb2aa <vfscanf+0x202>
    b2a4:	9b 2d       	mov	r25, r11
    b2a6:	90 64       	ori	r25, 0x40	; 64
    b2a8:	b9 2e       	mov	r11, r25
    b2aa:	2b 2d       	mov	r18, r11
    b2ac:	a6 01       	movw	r20, r12
    b2ae:	67 2d       	mov	r22, r7
    b2b0:	c8 01       	movw	r24, r16
    b2b2:	b2 dd       	rcall	.-1180   	; 0xae18 <conv_int>
    b2b4:	81 11       	cpse	r24, r1
    b2b6:	05 c0       	rjmp	.+10     	; 0xb2c2 <vfscanf+0x21a>
    b2b8:	f8 01       	movw	r30, r16
    b2ba:	83 81       	ldd	r24, Z+3	; 0x03
    b2bc:	80 73       	andi	r24, 0x30	; 48
    b2be:	29 f4       	brne	.+10     	; 0xb2ca <vfscanf+0x222>
    b2c0:	06 c0       	rjmp	.+12     	; 0xb2ce <vfscanf+0x226>
    b2c2:	b0 fc       	sbrc	r11, 0
    b2c4:	0a cf       	rjmp	.-492    	; 0xb0da <vfscanf+0x32>
    b2c6:	a3 94       	inc	r10
    b2c8:	08 cf       	rjmp	.-496    	; 0xb0da <vfscanf+0x32>
    b2ca:	aa 20       	and	r10, r10
    b2cc:	19 f0       	breq	.+6      	; 0xb2d4 <vfscanf+0x22c>
    b2ce:	8a 2d       	mov	r24, r10
    b2d0:	90 e0       	ldi	r25, 0x00	; 0
    b2d2:	02 c0       	rjmp	.+4      	; 0xb2d8 <vfscanf+0x230>
    b2d4:	8f ef       	ldi	r24, 0xFF	; 255
    b2d6:	9f ef       	ldi	r25, 0xFF	; 255
    b2d8:	0f 90       	pop	r0
    b2da:	df 91       	pop	r29
    b2dc:	cf 91       	pop	r28
    b2de:	1f 91       	pop	r17
    b2e0:	0f 91       	pop	r16
    b2e2:	ff 90       	pop	r15
    b2e4:	ef 90       	pop	r14
    b2e6:	df 90       	pop	r13
    b2e8:	cf 90       	pop	r12
    b2ea:	bf 90       	pop	r11
    b2ec:	af 90       	pop	r10
    b2ee:	9f 90       	pop	r9
    b2f0:	8f 90       	pop	r8
    b2f2:	7f 90       	pop	r7
    b2f4:	5f 90       	pop	r5
    b2f6:	4f 90       	pop	r4
    b2f8:	08 95       	ret

0000b2fa <__eerd_block_x64a4u>:
    b2fa:	e0 ec       	ldi	r30, 0xC0	; 192
    b2fc:	f1 e0       	ldi	r31, 0x01	; 1
    b2fe:	a7 85       	ldd	r26, Z+15	; 0x0f
    b300:	a7 fd       	sbrc	r26, 7
    b302:	fd cf       	rjmp	.-6      	; 0xb2fe <__eerd_block_x64a4u+0x4>
    b304:	a4 85       	ldd	r26, Z+12	; 0x0c
    b306:	a8 60       	ori	r26, 0x08	; 8
    b308:	a4 87       	std	Z+12, r26	; 0x0c
    b30a:	60 50       	subi	r22, 0x00	; 0
    b30c:	70 4f       	sbci	r23, 0xF0	; 240
    b30e:	ca cb       	rjmp	.-2156   	; 0xaaa4 <memcpy>

0000b310 <__eeupd_block_x64a4u>:
    b310:	dc 01       	movw	r26, r24
    b312:	a4 0f       	add	r26, r20
    b314:	b5 1f       	adc	r27, r21
    b316:	41 50       	subi	r20, 0x01	; 1
    b318:	50 40       	sbci	r21, 0x00	; 0
    b31a:	40 f0       	brcs	.+16     	; 0xb32c <__eeupd_block_x64a4u+0x1c>
    b31c:	cb 01       	movw	r24, r22
    b31e:	84 0f       	add	r24, r20
    b320:	95 1f       	adc	r25, r21
    b322:	2e 91       	ld	r18, -X
    b324:	05 d0       	rcall	.+10     	; 0xb330 <__eeupd_r18_x64a4u>
    b326:	41 50       	subi	r20, 0x01	; 1
    b328:	50 40       	sbci	r21, 0x00	; 0
    b32a:	d8 f7       	brcc	.-10     	; 0xb322 <__eeupd_block_x64a4u+0x12>
    b32c:	08 95       	ret

0000b32e <__eeupd_byte_x64a4u>:
    b32e:	26 2f       	mov	r18, r22

0000b330 <__eeupd_r18_x64a4u>:
    b330:	37 d0       	rcall	.+110    	; 0xb3a0 <eeprom_mapen>
    b332:	00 80       	ld	r0, Z
    b334:	02 16       	cp	r0, r18
    b336:	11 f0       	breq	.+4      	; 0xb33c <__eeupd_r18_x64a4u+0xc>
    b338:	0d d0       	rcall	.+26     	; 0xb354 <__eewr_r18_x64a4u>
    b33a:	01 97       	sbiw	r24, 0x01	; 1
    b33c:	01 97       	sbiw	r24, 0x01	; 1
    b33e:	08 95       	ret

0000b340 <__eewr_block_x64a4u>:
    b340:	dc 01       	movw	r26, r24
    b342:	cb 01       	movw	r24, r22
    b344:	02 c0       	rjmp	.+4      	; 0xb34a <__eewr_block_x64a4u+0xa>
    b346:	2d 91       	ld	r18, X+
    b348:	05 d0       	rcall	.+10     	; 0xb354 <__eewr_r18_x64a4u>
    b34a:	41 50       	subi	r20, 0x01	; 1
    b34c:	50 40       	sbci	r21, 0x00	; 0
    b34e:	d8 f7       	brcc	.-10     	; 0xb346 <__eewr_block_x64a4u+0x6>
    b350:	08 95       	ret

0000b352 <__eewr_byte_x64a4u>:
    b352:	26 2f       	mov	r18, r22

0000b354 <__eewr_r18_x64a4u>:
    b354:	e0 ec       	ldi	r30, 0xC0	; 192
    b356:	f1 e0       	ldi	r31, 0x01	; 1
    b358:	37 85       	ldd	r19, Z+15	; 0x0f
    b35a:	37 fd       	sbrc	r19, 7
    b35c:	fd cf       	rjmp	.-6      	; 0xb358 <__eewr_r18_x64a4u+0x4>
    b35e:	34 85       	ldd	r19, Z+12	; 0x0c
    b360:	37 7f       	andi	r19, 0xF7	; 247
    b362:	34 87       	std	Z+12, r19	; 0x0c
    b364:	37 85       	ldd	r19, Z+15	; 0x0f
    b366:	31 ff       	sbrs	r19, 1
    b368:	09 c0       	rjmp	.+18     	; 0xb37c <__eewr_r18_x64a4u+0x28>
    b36a:	36 e3       	ldi	r19, 0x36	; 54
    b36c:	32 87       	std	Z+10, r19	; 0x0a
    b36e:	38 ed       	ldi	r19, 0xD8	; 216
    b370:	34 bf       	out	0x34, r19	; 52
    b372:	31 e0       	ldi	r19, 0x01	; 1
    b374:	33 87       	std	Z+11, r19	; 0x0b
    b376:	37 85       	ldd	r19, Z+15	; 0x0f
    b378:	37 fd       	sbrc	r19, 7
    b37a:	fd cf       	rjmp	.-6      	; 0xb376 <__eewr_r18_x64a4u+0x22>
    b37c:	33 e3       	ldi	r19, 0x33	; 51
    b37e:	32 87       	std	Z+10, r19	; 0x0a
    b380:	80 83       	st	Z, r24
    b382:	91 83       	std	Z+1, r25	; 0x01
    b384:	12 82       	std	Z+2, r1	; 0x02
    b386:	24 83       	std	Z+4, r18	; 0x04
    b388:	25 e3       	ldi	r18, 0x35	; 53
    b38a:	22 87       	std	Z+10, r18	; 0x0a
    b38c:	28 ed       	ldi	r18, 0xD8	; 216
    b38e:	31 e0       	ldi	r19, 0x01	; 1
    b390:	24 bf       	out	0x34, r18	; 52
    b392:	33 87       	std	Z+11, r19	; 0x0b
    b394:	01 96       	adiw	r24, 0x01	; 1
    b396:	08 95       	ret

0000b398 <__eerd_byte_x64b1>:
    b398:	03 d0       	rcall	.+6      	; 0xb3a0 <eeprom_mapen>
    b39a:	80 81       	ld	r24, Z
    b39c:	99 27       	eor	r25, r25
    b39e:	08 95       	ret

0000b3a0 <eeprom_mapen>:
    b3a0:	e0 ec       	ldi	r30, 0xC0	; 192
    b3a2:	f1 e0       	ldi	r31, 0x01	; 1
    b3a4:	37 85       	ldd	r19, Z+15	; 0x0f
    b3a6:	37 fd       	sbrc	r19, 7
    b3a8:	fd cf       	rjmp	.-6      	; 0xb3a4 <eeprom_mapen+0x4>
    b3aa:	34 85       	ldd	r19, Z+12	; 0x0c
    b3ac:	38 60       	ori	r19, 0x08	; 8
    b3ae:	34 87       	std	Z+12, r19	; 0x0c
    b3b0:	fc 01       	movw	r30, r24
    b3b2:	e0 50       	subi	r30, 0x00	; 0
    b3b4:	f0 4f       	sbci	r31, 0xF0	; 240
    b3b6:	08 95       	ret

0000b3b8 <isspace>:
    b3b8:	91 11       	cpse	r25, r1
    b3ba:	78 c0       	rjmp	.+240    	; 0xb4ac <__ctype_isfalse>
    b3bc:	80 32       	cpi	r24, 0x20	; 32
    b3be:	19 f0       	breq	.+6      	; 0xb3c6 <isspace+0xe>
    b3c0:	89 50       	subi	r24, 0x09	; 9
    b3c2:	85 50       	subi	r24, 0x05	; 5
    b3c4:	d0 f7       	brcc	.-12     	; 0xb3ba <isspace+0x2>
    b3c6:	08 95       	ret

0000b3c8 <strchr_P>:
    b3c8:	fc 01       	movw	r30, r24
    b3ca:	05 90       	lpm	r0, Z+
    b3cc:	06 16       	cp	r0, r22
    b3ce:	21 f0       	breq	.+8      	; 0xb3d8 <strchr_P+0x10>
    b3d0:	00 20       	and	r0, r0
    b3d2:	d9 f7       	brne	.-10     	; 0xb3ca <strchr_P+0x2>
    b3d4:	c0 01       	movw	r24, r0
    b3d6:	08 95       	ret
    b3d8:	31 97       	sbiw	r30, 0x01	; 1
    b3da:	cf 01       	movw	r24, r30
    b3dc:	08 95       	ret

0000b3de <strrev>:
    b3de:	dc 01       	movw	r26, r24
    b3e0:	fc 01       	movw	r30, r24
    b3e2:	67 2f       	mov	r22, r23
    b3e4:	71 91       	ld	r23, Z+
    b3e6:	77 23       	and	r23, r23
    b3e8:	e1 f7       	brne	.-8      	; 0xb3e2 <strrev+0x4>
    b3ea:	32 97       	sbiw	r30, 0x02	; 2
    b3ec:	04 c0       	rjmp	.+8      	; 0xb3f6 <strrev+0x18>
    b3ee:	7c 91       	ld	r23, X
    b3f0:	6d 93       	st	X+, r22
    b3f2:	70 83       	st	Z, r23
    b3f4:	62 91       	ld	r22, -Z
    b3f6:	ae 17       	cp	r26, r30
    b3f8:	bf 07       	cpc	r27, r31
    b3fa:	c8 f3       	brcs	.-14     	; 0xb3ee <strrev+0x10>
    b3fc:	08 95       	ret

0000b3fe <fgetc>:
    b3fe:	cf 93       	push	r28
    b400:	df 93       	push	r29
    b402:	ec 01       	movw	r28, r24
    b404:	2b 81       	ldd	r18, Y+3	; 0x03
    b406:	20 ff       	sbrs	r18, 0
    b408:	33 c0       	rjmp	.+102    	; 0xb470 <fgetc+0x72>
    b40a:	26 ff       	sbrs	r18, 6
    b40c:	0a c0       	rjmp	.+20     	; 0xb422 <fgetc+0x24>
    b40e:	2f 7b       	andi	r18, 0xBF	; 191
    b410:	2b 83       	std	Y+3, r18	; 0x03
    b412:	8e 81       	ldd	r24, Y+6	; 0x06
    b414:	9f 81       	ldd	r25, Y+7	; 0x07
    b416:	01 96       	adiw	r24, 0x01	; 1
    b418:	8e 83       	std	Y+6, r24	; 0x06
    b41a:	9f 83       	std	Y+7, r25	; 0x07
    b41c:	8a 81       	ldd	r24, Y+2	; 0x02
    b41e:	90 e0       	ldi	r25, 0x00	; 0
    b420:	29 c0       	rjmp	.+82     	; 0xb474 <fgetc+0x76>
    b422:	22 ff       	sbrs	r18, 2
    b424:	0f c0       	rjmp	.+30     	; 0xb444 <fgetc+0x46>
    b426:	e8 81       	ld	r30, Y
    b428:	f9 81       	ldd	r31, Y+1	; 0x01
    b42a:	80 81       	ld	r24, Z
    b42c:	99 27       	eor	r25, r25
    b42e:	87 fd       	sbrc	r24, 7
    b430:	90 95       	com	r25
    b432:	00 97       	sbiw	r24, 0x00	; 0
    b434:	19 f4       	brne	.+6      	; 0xb43c <fgetc+0x3e>
    b436:	20 62       	ori	r18, 0x20	; 32
    b438:	2b 83       	std	Y+3, r18	; 0x03
    b43a:	1a c0       	rjmp	.+52     	; 0xb470 <fgetc+0x72>
    b43c:	31 96       	adiw	r30, 0x01	; 1
    b43e:	e8 83       	st	Y, r30
    b440:	f9 83       	std	Y+1, r31	; 0x01
    b442:	0e c0       	rjmp	.+28     	; 0xb460 <fgetc+0x62>
    b444:	ea 85       	ldd	r30, Y+10	; 0x0a
    b446:	fb 85       	ldd	r31, Y+11	; 0x0b
    b448:	09 95       	icall
    b44a:	97 ff       	sbrs	r25, 7
    b44c:	09 c0       	rjmp	.+18     	; 0xb460 <fgetc+0x62>
    b44e:	2b 81       	ldd	r18, Y+3	; 0x03
    b450:	01 96       	adiw	r24, 0x01	; 1
    b452:	11 f4       	brne	.+4      	; 0xb458 <fgetc+0x5a>
    b454:	80 e1       	ldi	r24, 0x10	; 16
    b456:	01 c0       	rjmp	.+2      	; 0xb45a <fgetc+0x5c>
    b458:	80 e2       	ldi	r24, 0x20	; 32
    b45a:	82 2b       	or	r24, r18
    b45c:	8b 83       	std	Y+3, r24	; 0x03
    b45e:	08 c0       	rjmp	.+16     	; 0xb470 <fgetc+0x72>
    b460:	2e 81       	ldd	r18, Y+6	; 0x06
    b462:	3f 81       	ldd	r19, Y+7	; 0x07
    b464:	2f 5f       	subi	r18, 0xFF	; 255
    b466:	3f 4f       	sbci	r19, 0xFF	; 255
    b468:	2e 83       	std	Y+6, r18	; 0x06
    b46a:	3f 83       	std	Y+7, r19	; 0x07
    b46c:	99 27       	eor	r25, r25
    b46e:	02 c0       	rjmp	.+4      	; 0xb474 <fgetc+0x76>
    b470:	8f ef       	ldi	r24, 0xFF	; 255
    b472:	9f ef       	ldi	r25, 0xFF	; 255
    b474:	df 91       	pop	r29
    b476:	cf 91       	pop	r28
    b478:	08 95       	ret

0000b47a <ungetc>:
    b47a:	fb 01       	movw	r30, r22
    b47c:	23 81       	ldd	r18, Z+3	; 0x03
    b47e:	20 ff       	sbrs	r18, 0
    b480:	12 c0       	rjmp	.+36     	; 0xb4a6 <ungetc+0x2c>
    b482:	26 fd       	sbrc	r18, 6
    b484:	10 c0       	rjmp	.+32     	; 0xb4a6 <ungetc+0x2c>
    b486:	8f 3f       	cpi	r24, 0xFF	; 255
    b488:	3f ef       	ldi	r19, 0xFF	; 255
    b48a:	93 07       	cpc	r25, r19
    b48c:	61 f0       	breq	.+24     	; 0xb4a6 <ungetc+0x2c>
    b48e:	82 83       	std	Z+2, r24	; 0x02
    b490:	2f 7d       	andi	r18, 0xDF	; 223
    b492:	20 64       	ori	r18, 0x40	; 64
    b494:	23 83       	std	Z+3, r18	; 0x03
    b496:	26 81       	ldd	r18, Z+6	; 0x06
    b498:	37 81       	ldd	r19, Z+7	; 0x07
    b49a:	21 50       	subi	r18, 0x01	; 1
    b49c:	31 09       	sbc	r19, r1
    b49e:	26 83       	std	Z+6, r18	; 0x06
    b4a0:	37 83       	std	Z+7, r19	; 0x07
    b4a2:	99 27       	eor	r25, r25
    b4a4:	08 95       	ret
    b4a6:	8f ef       	ldi	r24, 0xFF	; 255
    b4a8:	9f ef       	ldi	r25, 0xFF	; 255
    b4aa:	08 95       	ret

0000b4ac <__ctype_isfalse>:
    b4ac:	99 27       	eor	r25, r25
    b4ae:	88 27       	eor	r24, r24

0000b4b0 <__ctype_istrue>:
    b4b0:	08 95       	ret

0000b4b2 <_exit>:
    b4b2:	f8 94       	cli

0000b4b4 <__stop_program>:
    b4b4:	ff cf       	rjmp	.-2      	; 0xb4b4 <__stop_program>
