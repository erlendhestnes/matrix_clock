
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008c18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000c4a  00802000  00008c18  00008cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000b46  00802c4a  00802c4a  000098f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000098f6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000d50  00000000  00000000  00009952  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0002be64  00000000  00000000  0000a6a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000042b0  00000000  00000000  00036506  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00010adc  00000000  00000000  0003a7b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00003974  00000000  00000000  0004b294  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000535c  00000000  00000000  0004ec08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002a755  00000000  00000000  00053f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000036f8  00000000  00000000  0007e6b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	31 c4       	rjmp	.+2146   	; 0x864 <_StackPaint>
       2:	00 00       	nop
       4:	6c c4       	rjmp	.+2264   	; 0x8de <__bad_interrupt>
       6:	00 00       	nop
       8:	6a c4       	rjmp	.+2260   	; 0x8de <__bad_interrupt>
       a:	00 00       	nop
       c:	68 c4       	rjmp	.+2256   	; 0x8de <__bad_interrupt>
       e:	00 00       	nop
      10:	66 c4       	rjmp	.+2252   	; 0x8de <__bad_interrupt>
      12:	00 00       	nop
      14:	64 c4       	rjmp	.+2248   	; 0x8de <__bad_interrupt>
      16:	00 00       	nop
      18:	72 c4       	rjmp	.+2276   	; 0x8fe <__vector_6>
      1a:	00 00       	nop
      1c:	60 c4       	rjmp	.+2240   	; 0x8de <__bad_interrupt>
      1e:	00 00       	nop
      20:	5e c4       	rjmp	.+2236   	; 0x8de <__bad_interrupt>
      22:	00 00       	nop
      24:	5c c4       	rjmp	.+2232   	; 0x8de <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__vector_10>
      2c:	58 c4       	rjmp	.+2224   	; 0x8de <__bad_interrupt>
      2e:	00 00       	nop
      30:	56 c4       	rjmp	.+2220   	; 0x8de <__bad_interrupt>
      32:	00 00       	nop
      34:	54 c4       	rjmp	.+2216   	; 0x8de <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 85 39 	jmp	0x730a	; 0x730a <__vector_14>
      3c:	50 c4       	rjmp	.+2208   	; 0x8de <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 93 3a 	jmp	0x7526	; 0x7526 <__vector_16>
      44:	0c 94 53 39 	jmp	0x72a6	; 0x72a6 <__vector_17>
      48:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__vector_18>
      4c:	0c 94 c6 3a 	jmp	0x758c	; 0x758c <__vector_19>
      50:	0c 94 c9 11 	jmp	0x2392	; 0x2392 <__vector_20>
      54:	44 c4       	rjmp	.+2184   	; 0x8de <__bad_interrupt>
      56:	00 00       	nop
      58:	42 c4       	rjmp	.+2180   	; 0x8de <__bad_interrupt>
      5a:	00 00       	nop
      5c:	40 c4       	rjmp	.+2176   	; 0x8de <__bad_interrupt>
      5e:	00 00       	nop
      60:	3e c4       	rjmp	.+2172   	; 0x8de <__bad_interrupt>
      62:	00 00       	nop
      64:	3c c4       	rjmp	.+2168   	; 0x8de <__bad_interrupt>
      66:	00 00       	nop
      68:	3a c4       	rjmp	.+2164   	; 0x8de <__bad_interrupt>
      6a:	00 00       	nop
      6c:	38 c4       	rjmp	.+2160   	; 0x8de <__bad_interrupt>
      6e:	00 00       	nop
      70:	36 c4       	rjmp	.+2156   	; 0x8de <__bad_interrupt>
      72:	00 00       	nop
      74:	34 c4       	rjmp	.+2152   	; 0x8de <__bad_interrupt>
      76:	00 00       	nop
      78:	32 c4       	rjmp	.+2148   	; 0x8de <__bad_interrupt>
      7a:	00 00       	nop
      7c:	30 c4       	rjmp	.+2144   	; 0x8de <__bad_interrupt>
      7e:	00 00       	nop
      80:	2e c4       	rjmp	.+2140   	; 0x8de <__bad_interrupt>
      82:	00 00       	nop
      84:	2c c4       	rjmp	.+2136   	; 0x8de <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_34>
      8c:	28 c4       	rjmp	.+2128   	; 0x8de <__bad_interrupt>
      8e:	00 00       	nop
      90:	26 c4       	rjmp	.+2124   	; 0x8de <__bad_interrupt>
      92:	00 00       	nop
      94:	24 c4       	rjmp	.+2120   	; 0x8de <__bad_interrupt>
      96:	00 00       	nop
      98:	22 c4       	rjmp	.+2116   	; 0x8de <__bad_interrupt>
      9a:	00 00       	nop
      9c:	20 c4       	rjmp	.+2112   	; 0x8de <__bad_interrupt>
      9e:	00 00       	nop
      a0:	1e c4       	rjmp	.+2108   	; 0x8de <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1c c4       	rjmp	.+2104   	; 0x8de <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1a c4       	rjmp	.+2100   	; 0x8de <__bad_interrupt>
      aa:	00 00       	nop
      ac:	18 c4       	rjmp	.+2096   	; 0x8de <__bad_interrupt>
      ae:	00 00       	nop
      b0:	16 c4       	rjmp	.+2092   	; 0x8de <__bad_interrupt>
      b2:	00 00       	nop
      b4:	14 c4       	rjmp	.+2088   	; 0x8de <__bad_interrupt>
      b6:	00 00       	nop
      b8:	12 c4       	rjmp	.+2084   	; 0x8de <__bad_interrupt>
      ba:	00 00       	nop
      bc:	10 c4       	rjmp	.+2080   	; 0x8de <__bad_interrupt>
      be:	00 00       	nop
      c0:	0e c4       	rjmp	.+2076   	; 0x8de <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0c c4       	rjmp	.+2072   	; 0x8de <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0a c4       	rjmp	.+2068   	; 0x8de <__bad_interrupt>
      ca:	00 00       	nop
      cc:	08 c4       	rjmp	.+2064   	; 0x8de <__bad_interrupt>
      ce:	00 00       	nop
      d0:	06 c4       	rjmp	.+2060   	; 0x8de <__bad_interrupt>
      d2:	00 00       	nop
      d4:	04 c4       	rjmp	.+2056   	; 0x8de <__bad_interrupt>
      d6:	00 00       	nop
      d8:	02 c4       	rjmp	.+2052   	; 0x8de <__bad_interrupt>
      da:	00 00       	nop
      dc:	00 c4       	rjmp	.+2048   	; 0x8de <__bad_interrupt>
      de:	00 00       	nop
      e0:	fe c3       	rjmp	.+2044   	; 0x8de <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fc c3       	rjmp	.+2040   	; 0x8de <__bad_interrupt>
      e6:	00 00       	nop
      e8:	fa c3       	rjmp	.+2036   	; 0x8de <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f8 c3       	rjmp	.+2032   	; 0x8de <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f6 c3       	rjmp	.+2028   	; 0x8de <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f4 c3       	rjmp	.+2024   	; 0x8de <__bad_interrupt>
      f6:	00 00       	nop
      f8:	f2 c3       	rjmp	.+2020   	; 0x8de <__bad_interrupt>
      fa:	00 00       	nop
      fc:	f0 c3       	rjmp	.+2016   	; 0x8de <__bad_interrupt>
      fe:	00 00       	nop
     100:	ee c3       	rjmp	.+2012   	; 0x8de <__bad_interrupt>
     102:	00 00       	nop
     104:	ec c3       	rjmp	.+2008   	; 0x8de <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__vector_66>
     10c:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__vector_67>
     110:	e6 c3       	rjmp	.+1996   	; 0x8de <__bad_interrupt>
     112:	00 00       	nop
     114:	e4 c3       	rjmp	.+1992   	; 0x8de <__bad_interrupt>
     116:	00 00       	nop
     118:	e2 c3       	rjmp	.+1988   	; 0x8de <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e0 c3       	rjmp	.+1984   	; 0x8de <__bad_interrupt>
     11e:	00 00       	nop
     120:	de c3       	rjmp	.+1980   	; 0x8de <__bad_interrupt>
     122:	00 00       	nop
     124:	dc c3       	rjmp	.+1976   	; 0x8de <__bad_interrupt>
     126:	00 00       	nop
     128:	da c3       	rjmp	.+1972   	; 0x8de <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d8 c3       	rjmp	.+1968   	; 0x8de <__bad_interrupt>
     12e:	00 00       	nop
     130:	d6 c3       	rjmp	.+1964   	; 0x8de <__bad_interrupt>
     132:	00 00       	nop
     134:	d4 c3       	rjmp	.+1960   	; 0x8de <__bad_interrupt>
     136:	00 00       	nop
     138:	d2 c3       	rjmp	.+1956   	; 0x8de <__bad_interrupt>
     13a:	00 00       	nop
     13c:	d0 c3       	rjmp	.+1952   	; 0x8de <__bad_interrupt>
     13e:	00 00       	nop
     140:	ce c3       	rjmp	.+1948   	; 0x8de <__bad_interrupt>
     142:	00 00       	nop
     144:	cc c3       	rjmp	.+1944   	; 0x8de <__bad_interrupt>
     146:	00 00       	nop
     148:	0c 94 96 3c 	jmp	0x792c	; 0x792c <__vector_82>
     14c:	c8 c3       	rjmp	.+1936   	; 0x8de <__bad_interrupt>
     14e:	00 00       	nop
     150:	c6 c3       	rjmp	.+1932   	; 0x8de <__bad_interrupt>
     152:	00 00       	nop
     154:	c4 c3       	rjmp	.+1928   	; 0x8de <__bad_interrupt>
     156:	00 00       	nop
     158:	c2 c3       	rjmp	.+1924   	; 0x8de <__bad_interrupt>
     15a:	00 00       	nop
     15c:	c0 c3       	rjmp	.+1920   	; 0x8de <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 f7 38 	jmp	0x71ee	; 0x71ee <__vector_88>
     164:	bc c3       	rjmp	.+1912   	; 0x8de <__bad_interrupt>
     166:	00 00       	nop
     168:	ba c3       	rjmp	.+1908   	; 0x8de <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b8 c3       	rjmp	.+1904   	; 0x8de <__bad_interrupt>
     16e:	00 00       	nop
     170:	b6 c3       	rjmp	.+1900   	; 0x8de <__bad_interrupt>
     172:	00 00       	nop
     174:	b4 c3       	rjmp	.+1896   	; 0x8de <__bad_interrupt>
     176:	00 00       	nop
     178:	b2 c3       	rjmp	.+1892   	; 0x8de <__bad_interrupt>
     17a:	00 00       	nop
     17c:	b0 c3       	rjmp	.+1888   	; 0x8de <__bad_interrupt>
     17e:	00 00       	nop
     180:	ae c3       	rjmp	.+1884   	; 0x8de <__bad_interrupt>
     182:	00 00       	nop
     184:	ac c3       	rjmp	.+1880   	; 0x8de <__bad_interrupt>
     186:	00 00       	nop
     188:	aa c3       	rjmp	.+1876   	; 0x8de <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a8 c3       	rjmp	.+1872   	; 0x8de <__bad_interrupt>
     18e:	00 00       	nop
     190:	a6 c3       	rjmp	.+1868   	; 0x8de <__bad_interrupt>
     192:	00 00       	nop
     194:	a4 c3       	rjmp	.+1864   	; 0x8de <__bad_interrupt>
     196:	00 00       	nop
     198:	a2 c3       	rjmp	.+1860   	; 0x8de <__bad_interrupt>
     19a:	00 00       	nop
     19c:	a0 c3       	rjmp	.+1856   	; 0x8de <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	9e c3       	rjmp	.+1852   	; 0x8de <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	9c c3       	rjmp	.+1848   	; 0x8de <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	9a c3       	rjmp	.+1844   	; 0x8de <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	98 c3       	rjmp	.+1840   	; 0x8de <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	96 c3       	rjmp	.+1836   	; 0x8de <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	94 c3       	rjmp	.+1832   	; 0x8de <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	92 c3       	rjmp	.+1828   	; 0x8de <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	90 c3       	rjmp	.+1824   	; 0x8de <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	8e c3       	rjmp	.+1820   	; 0x8de <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	8c c3       	rjmp	.+1816   	; 0x8de <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	8a c3       	rjmp	.+1812   	; 0x8de <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	88 c3       	rjmp	.+1808   	; 0x8de <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	86 c3       	rjmp	.+1804   	; 0x8de <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	84 c3       	rjmp	.+1800   	; 0x8de <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	82 c3       	rjmp	.+1796   	; 0x8de <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	80 c3       	rjmp	.+1792   	; 0x8de <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	7e c3       	rjmp	.+1788   	; 0x8de <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	7c c3       	rjmp	.+1784   	; 0x8de <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	7a c3       	rjmp	.+1780   	; 0x8de <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	78 c3       	rjmp	.+1776   	; 0x8de <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	76 c3       	rjmp	.+1772   	; 0x8de <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	74 c3       	rjmp	.+1768   	; 0x8de <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	72 c3       	rjmp	.+1764   	; 0x8de <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	48 25       	eor	r20, r8
     1fe:	d2 2a       	or	r13, r18
     200:	9c 2a       	or	r9, r28
     202:	56 25       	eor	r21, r6
     204:	86 2a       	or	r8, r22
     206:	cc 25       	eor	r28, r12
     208:	7d 2a       	or	r7, r29
     20a:	5f 2a       	or	r5, r31
     20c:	7d 2a       	or	r7, r29
     20e:	2d 2a       	or	r2, r29
     210:	7d 2a       	or	r7, r29
     212:	7e 28       	or	r7, r14
     214:	56 25       	eor	r21, r6
     216:	7d 2a       	or	r7, r29
     218:	6b 28       	or	r6, r11
     21a:	7d 2a       	or	r7, r29
     21c:	7d 2a       	or	r7, r29
     21e:	56 25       	eor	r21, r6
     220:	1d 2b       	or	r17, r29
     222:	7d 2a       	or	r7, r29
     224:	7d 2a       	or	r7, r29
     226:	00 2b       	or	r16, r16
     228:	f1 2a       	or	r15, r17
     22a:	37 25       	eor	r19, r7
     22c:	57 28       	or	r5, r7
     22e:	7d 2a       	or	r7, r29
     230:	56 25       	eor	r21, r6
     232:	56 25       	eor	r21, r6
     234:	56 25       	eor	r21, r6
     236:	56 25       	eor	r21, r6
     238:	48 25       	eor	r20, r8
     23a:	48 25       	eor	r20, r8
     23c:	48 25       	eor	r20, r8
     23e:	43 2b       	or	r20, r19
     240:	a9 2d       	mov	r26, r9
     242:	46 2d       	mov	r20, r6
     244:	f6 2c       	mov	r15, r6
     246:	e2 2c       	mov	r14, r2
     248:	93 2c       	mov	r9, r3
     24a:	3a 2c       	mov	r3, r10
     24c:	5a 2d       	mov	r21, r10
     24e:	0e 3d       	cpi	r16, 0xDE	; 222
     250:	dd 3c       	cpi	r29, 0xCD	; 205
     252:	0e 3d       	cpi	r16, 0xDE	; 222
     254:	db 3c       	cpi	r29, 0xCB	; 203
     256:	0e 3d       	cpi	r16, 0xDE	; 222
     258:	db 3c       	cpi	r29, 0xCB	; 203
     25a:	0e 3d       	cpi	r16, 0xDE	; 222
     25c:	0e 3d       	cpi	r16, 0xDE	; 222
     25e:	db 3c       	cpi	r29, 0xCB	; 203
     260:	0e 3d       	cpi	r16, 0xDE	; 222
     262:	db 3c       	cpi	r29, 0xCB	; 203
     264:	0e 3d       	cpi	r16, 0xDE	; 222

00000266 <__trampolines_end>:
     266:	00 00       	nop
     268:	00 00       	nop
     26a:	00 3e       	cpi	r16, 0xE0	; 224
     26c:	5b 4f       	sbci	r21, 0xFB	; 251
     26e:	5b 3e       	cpi	r21, 0xEB	; 235
     270:	3e 6b       	ori	r19, 0xBE	; 190
     272:	4f 6b       	ori	r20, 0xBF	; 191
     274:	3e 1c       	adc	r3, r14
     276:	3e 7c       	andi	r19, 0xCE	; 206
     278:	3e 1c       	adc	r3, r14
     27a:	18 3c       	cpi	r17, 0xC8	; 200
     27c:	7e 3c       	cpi	r23, 0xCE	; 206
     27e:	18 1c       	adc	r1, r8
     280:	57 7d       	andi	r21, 0xD7	; 215
     282:	57 1c       	adc	r5, r7
     284:	1c 5e       	subi	r17, 0xEC	; 236
     286:	7f 5e       	subi	r23, 0xEF	; 239
     288:	1c 00       	.word	0x001c	; ????
     28a:	18 3c       	cpi	r17, 0xC8	; 200
     28c:	18 00       	.word	0x0018	; ????
     28e:	ff e7       	ldi	r31, 0x7F	; 127
     290:	c3 e7       	ldi	r28, 0x73	; 115
     292:	ff 00       	.word	0x00ff	; ????
     294:	18 24       	eor	r1, r8
     296:	18 00       	.word	0x0018	; ????
     298:	ff e7       	ldi	r31, 0x7F	; 127
     29a:	db e7       	ldi	r29, 0x7B	; 123
     29c:	ff 30       	cpi	r31, 0x0F	; 15
     29e:	48 3a       	cpi	r20, 0xA8	; 168
     2a0:	06 0e       	add	r0, r22
     2a2:	26 29       	or	r18, r6
     2a4:	79 29       	or	r23, r9
     2a6:	26 40       	sbci	r18, 0x06	; 6
     2a8:	7f 05       	cpc	r23, r15
     2aa:	05 07       	cpc	r16, r21
     2ac:	40 7f       	andi	r20, 0xF0	; 240
     2ae:	05 25       	eor	r16, r5
     2b0:	3f 5a       	subi	r19, 0xAF	; 175
     2b2:	3c e7       	ldi	r19, 0x7C	; 124
     2b4:	3c 5a       	subi	r19, 0xAC	; 172
     2b6:	7f 3e       	cpi	r23, 0xEF	; 239
     2b8:	1c 1c       	adc	r1, r12
     2ba:	08 08       	sbc	r0, r8
     2bc:	1c 1c       	adc	r1, r12
     2be:	3e 7f       	andi	r19, 0xFE	; 254
     2c0:	14 22       	and	r1, r20
     2c2:	7f 22       	and	r7, r31
     2c4:	14 5f       	subi	r17, 0xF4	; 244
     2c6:	5f 00       	.word	0x005f	; ????
     2c8:	5f 5f       	subi	r21, 0xFF	; 255
     2ca:	06 09       	sbc	r16, r6
     2cc:	7f 01       	movw	r14, r30
     2ce:	7f 00       	.word	0x007f	; ????
     2d0:	66 89       	ldd	r22, Z+22	; 0x16
     2d2:	95 6a       	ori	r25, 0xA5	; 165
     2d4:	60 60       	ori	r22, 0x00	; 0
     2d6:	60 60       	ori	r22, 0x00	; 0
     2d8:	60 94       	com	r6
     2da:	a2 ff       	sbrs	r26, 2
     2dc:	a2 94       	swap	r10
     2de:	08 04       	cpc	r0, r8
     2e0:	7e 04       	cpc	r7, r14
     2e2:	08 10       	cpse	r0, r8
     2e4:	20 7e       	andi	r18, 0xE0	; 224
     2e6:	20 10       	cpse	r2, r0
     2e8:	08 08       	sbc	r0, r8
     2ea:	2a 1c       	adc	r2, r10
     2ec:	08 08       	sbc	r0, r8
     2ee:	1c 2a       	or	r1, r28
     2f0:	08 08       	sbc	r0, r8
     2f2:	1e 10       	cpse	r1, r14
     2f4:	10 10       	cpse	r1, r0
     2f6:	10 0c       	add	r1, r0
     2f8:	1e 0c       	add	r1, r14
     2fa:	1e 0c       	add	r1, r14
     2fc:	30 38       	cpi	r19, 0x80	; 128
     2fe:	3e 38       	cpi	r19, 0x8E	; 142
     300:	30 06       	cpc	r3, r16
     302:	0e 3e       	cpi	r16, 0xEE	; 238
     304:	0e 06       	cpc	r0, r30
     306:	00 00       	nop
     308:	00 00       	nop
     30a:	00 00       	nop
     30c:	00 5f       	subi	r16, 0xF0	; 240
     30e:	00 00       	nop
     310:	00 07       	cpc	r16, r16
     312:	00 07       	cpc	r16, r16
     314:	00 14       	cp	r0, r0
     316:	7f 14       	cp	r7, r15
     318:	7f 14       	cp	r7, r15
     31a:	24 2a       	or	r2, r20
     31c:	7f 2a       	or	r7, r31
     31e:	12 23       	and	r17, r18
     320:	13 08       	sbc	r1, r3
     322:	64 62       	ori	r22, 0x24	; 36
     324:	36 49       	sbci	r19, 0x96	; 150
     326:	56 20       	and	r5, r6
     328:	50 00       	.word	0x0050	; ????
     32a:	08 07       	cpc	r16, r24
     32c:	03 00       	.word	0x0003	; ????
     32e:	00 1c       	adc	r0, r0
     330:	22 41       	sbci	r18, 0x12	; 18
     332:	00 00       	nop
     334:	41 22       	and	r4, r17
     336:	1c 00       	.word	0x001c	; ????
     338:	2a 1c       	adc	r2, r10
     33a:	7f 1c       	adc	r7, r15
     33c:	2a 08       	sbc	r2, r10
     33e:	08 3e       	cpi	r16, 0xE8	; 232
     340:	08 08       	sbc	r0, r8
     342:	00 80       	ld	r0, Z
     344:	70 30       	cpi	r23, 0x00	; 0
     346:	00 08       	sbc	r0, r0
     348:	08 08       	sbc	r0, r8
     34a:	08 08       	sbc	r0, r8
     34c:	00 00       	nop
     34e:	60 60       	ori	r22, 0x00	; 0
     350:	00 20       	and	r0, r0
     352:	10 08       	sbc	r1, r0
     354:	04 02       	muls	r16, r20
     356:	3e 51       	subi	r19, 0x1E	; 30
     358:	49 45       	sbci	r20, 0x59	; 89
     35a:	3e 00       	.word	0x003e	; ????
     35c:	42 7f       	andi	r20, 0xF2	; 242
     35e:	40 00       	.word	0x0040	; ????
     360:	72 49       	sbci	r23, 0x92	; 146
     362:	49 49       	sbci	r20, 0x99	; 153
     364:	46 21       	and	r20, r6
     366:	41 49       	sbci	r20, 0x91	; 145
     368:	4d 33       	cpi	r20, 0x3D	; 61
     36a:	18 14       	cp	r1, r8
     36c:	12 7f       	andi	r17, 0xF2	; 242
     36e:	10 27       	eor	r17, r16
     370:	45 45       	sbci	r20, 0x55	; 85
     372:	45 39       	cpi	r20, 0x95	; 149
     374:	3c 4a       	sbci	r19, 0xAC	; 172
     376:	49 49       	sbci	r20, 0x99	; 153
     378:	31 01       	movw	r6, r2
     37a:	01 71       	andi	r16, 0x11	; 17
     37c:	09 07       	cpc	r16, r25
     37e:	36 49       	sbci	r19, 0x96	; 150
     380:	49 49       	sbci	r20, 0x99	; 153
     382:	36 46       	sbci	r19, 0x66	; 102
     384:	49 49       	sbci	r20, 0x99	; 153
     386:	29 1e       	adc	r2, r25
     388:	00 00       	nop
     38a:	14 00       	.word	0x0014	; ????
     38c:	00 00       	nop
     38e:	40 34       	cpi	r20, 0x40	; 64
     390:	00 00       	nop
     392:	00 08       	sbc	r0, r0
     394:	14 22       	and	r1, r20
     396:	41 14       	cp	r4, r1
     398:	14 14       	cp	r1, r4
     39a:	14 14       	cp	r1, r4
     39c:	00 41       	sbci	r16, 0x10	; 16
     39e:	22 14       	cp	r2, r2
     3a0:	08 02       	muls	r16, r24
     3a2:	01 59       	subi	r16, 0x91	; 145
     3a4:	09 06       	cpc	r0, r25
     3a6:	3e 41       	sbci	r19, 0x1E	; 30
     3a8:	5d 59       	subi	r21, 0x9D	; 157
     3aa:	4e 7c       	andi	r20, 0xCE	; 206
     3ac:	12 11       	cpse	r17, r2
     3ae:	12 7c       	andi	r17, 0xC2	; 194
     3b0:	7f 49       	sbci	r23, 0x9F	; 159
     3b2:	49 49       	sbci	r20, 0x99	; 153
     3b4:	36 3e       	cpi	r19, 0xE6	; 230
     3b6:	41 41       	sbci	r20, 0x11	; 17
     3b8:	41 22       	and	r4, r17
     3ba:	7f 41       	sbci	r23, 0x1F	; 31
     3bc:	41 41       	sbci	r20, 0x11	; 17
     3be:	3e 7f       	andi	r19, 0xFE	; 254
     3c0:	49 49       	sbci	r20, 0x99	; 153
     3c2:	49 41       	sbci	r20, 0x19	; 25
     3c4:	7f 09       	sbc	r23, r15
     3c6:	09 09       	sbc	r16, r9
     3c8:	01 3e       	cpi	r16, 0xE1	; 225
     3ca:	41 41       	sbci	r20, 0x11	; 17
     3cc:	51 73       	andi	r21, 0x31	; 49
     3ce:	7f 08       	sbc	r7, r15
     3d0:	08 08       	sbc	r0, r8
     3d2:	7f 00       	.word	0x007f	; ????
     3d4:	41 7f       	andi	r20, 0xF1	; 241
     3d6:	41 00       	.word	0x0041	; ????
     3d8:	20 40       	sbci	r18, 0x00	; 0
     3da:	41 3f       	cpi	r20, 0xF1	; 241
     3dc:	01 7f       	andi	r16, 0xF1	; 241
     3de:	08 14       	cp	r0, r8
     3e0:	22 41       	sbci	r18, 0x12	; 18
     3e2:	7f 40       	sbci	r23, 0x0F	; 15
     3e4:	40 40       	sbci	r20, 0x00	; 0
     3e6:	40 7f       	andi	r20, 0xF0	; 240
     3e8:	02 1c       	adc	r0, r2
     3ea:	02 7f       	andi	r16, 0xF2	; 242
     3ec:	7f 04       	cpc	r7, r15
     3ee:	08 10       	cpse	r0, r8
     3f0:	7f 3e       	cpi	r23, 0xEF	; 239
     3f2:	41 41       	sbci	r20, 0x11	; 17
     3f4:	41 3e       	cpi	r20, 0xE1	; 225
     3f6:	7f 09       	sbc	r23, r15
     3f8:	09 09       	sbc	r16, r9
     3fa:	06 3e       	cpi	r16, 0xE6	; 230
     3fc:	41 51       	subi	r20, 0x11	; 17
     3fe:	21 5e       	subi	r18, 0xE1	; 225
     400:	7f 09       	sbc	r23, r15
     402:	19 29       	or	r17, r9
     404:	46 26       	eor	r4, r22
     406:	49 49       	sbci	r20, 0x99	; 153
     408:	49 32       	cpi	r20, 0x29	; 41
     40a:	03 01       	movw	r0, r6
     40c:	7f 01       	movw	r14, r30
     40e:	03 3f       	cpi	r16, 0xF3	; 243
     410:	40 40       	sbci	r20, 0x00	; 0
     412:	40 3f       	cpi	r20, 0xF0	; 240
     414:	1f 20       	and	r1, r15
     416:	40 20       	and	r4, r0
     418:	1f 3f       	cpi	r17, 0xFF	; 255
     41a:	40 38       	cpi	r20, 0x80	; 128
     41c:	40 3f       	cpi	r20, 0xF0	; 240
     41e:	63 14       	cp	r6, r3
     420:	08 14       	cp	r0, r8
     422:	63 03       	mulsu	r22, r19
     424:	04 78       	andi	r16, 0x84	; 132
     426:	04 03       	mulsu	r16, r20
     428:	61 59       	subi	r22, 0x91	; 145
     42a:	49 4d       	sbci	r20, 0xD9	; 217
     42c:	43 00       	.word	0x0043	; ????
     42e:	7f 41       	sbci	r23, 0x1F	; 31
     430:	41 41       	sbci	r20, 0x11	; 17
     432:	02 04       	cpc	r0, r2
     434:	08 10       	cpse	r0, r8
     436:	20 00       	.word	0x0020	; ????
     438:	41 41       	sbci	r20, 0x11	; 17
     43a:	41 7f       	andi	r20, 0xF1	; 241
     43c:	04 02       	muls	r16, r20
     43e:	01 02       	muls	r16, r17
     440:	04 40       	sbci	r16, 0x04	; 4
     442:	40 40       	sbci	r20, 0x00	; 0
     444:	40 40       	sbci	r20, 0x00	; 0
     446:	00 03       	mulsu	r16, r16
     448:	07 08       	sbc	r0, r7
     44a:	00 20       	and	r0, r0
     44c:	54 54       	subi	r21, 0x44	; 68
     44e:	78 40       	sbci	r23, 0x08	; 8
     450:	7f 28       	or	r7, r15
     452:	44 44       	sbci	r20, 0x44	; 68
     454:	38 38       	cpi	r19, 0x88	; 136
     456:	44 44       	sbci	r20, 0x44	; 68
     458:	44 28       	or	r4, r4
     45a:	38 44       	sbci	r19, 0x48	; 72
     45c:	44 28       	or	r4, r4
     45e:	7f 38       	cpi	r23, 0x8F	; 143
     460:	54 54       	subi	r21, 0x44	; 68
     462:	54 18       	sub	r5, r4
     464:	00 08       	sbc	r0, r0
     466:	7e 09       	sbc	r23, r14
     468:	02 18       	sub	r0, r2
     46a:	a4 a4       	ldd	r10, Z+44	; 0x2c
     46c:	9c 78       	andi	r25, 0x8C	; 140
     46e:	7f 08       	sbc	r7, r15
     470:	04 04       	cpc	r0, r4
     472:	78 00       	.word	0x0078	; ????
     474:	44 7d       	andi	r20, 0xD4	; 212
     476:	40 00       	.word	0x0040	; ????
     478:	20 40       	sbci	r18, 0x00	; 0
     47a:	40 3d       	cpi	r20, 0xD0	; 208
     47c:	00 7f       	andi	r16, 0xF0	; 240
     47e:	10 28       	or	r1, r0
     480:	44 00       	.word	0x0044	; ????
     482:	00 41       	sbci	r16, 0x10	; 16
     484:	7f 40       	sbci	r23, 0x0F	; 15
     486:	00 7c       	andi	r16, 0xC0	; 192
     488:	04 78       	andi	r16, 0x84	; 132
     48a:	04 78       	andi	r16, 0x84	; 132
     48c:	7c 08       	sbc	r7, r12
     48e:	04 04       	cpc	r0, r4
     490:	78 38       	cpi	r23, 0x88	; 136
     492:	44 44       	sbci	r20, 0x44	; 68
     494:	44 38       	cpi	r20, 0x84	; 132
     496:	fc 18       	sub	r15, r12
     498:	24 24       	eor	r2, r4
     49a:	18 18       	sub	r1, r8
     49c:	24 24       	eor	r2, r4
     49e:	18 fc       	.word	0xfc18	; ????
     4a0:	7c 08       	sbc	r7, r12
     4a2:	04 04       	cpc	r0, r4
     4a4:	08 48       	sbci	r16, 0x88	; 136
     4a6:	54 54       	subi	r21, 0x44	; 68
     4a8:	54 24       	eor	r5, r4
     4aa:	04 04       	cpc	r0, r4
     4ac:	3f 44       	sbci	r19, 0x4F	; 79
     4ae:	24 3c       	cpi	r18, 0xC4	; 196
     4b0:	40 40       	sbci	r20, 0x00	; 0
     4b2:	20 7c       	andi	r18, 0xC0	; 192
     4b4:	1c 20       	and	r1, r12
     4b6:	40 20       	and	r4, r0
     4b8:	1c 3c       	cpi	r17, 0xCC	; 204
     4ba:	40 30       	cpi	r20, 0x00	; 0
     4bc:	40 3c       	cpi	r20, 0xC0	; 192
     4be:	44 28       	or	r4, r4
     4c0:	10 28       	or	r1, r0
     4c2:	44 4c       	sbci	r20, 0xC4	; 196
     4c4:	90 90 90 7c 	lds	r9, 0x7C90
     4c8:	44 64       	ori	r20, 0x44	; 68
     4ca:	54 4c       	sbci	r21, 0xC4	; 196
     4cc:	44 00       	.word	0x0044	; ????
     4ce:	08 36       	cpi	r16, 0x68	; 104
     4d0:	41 00       	.word	0x0041	; ????
     4d2:	00 00       	nop
     4d4:	77 00       	.word	0x0077	; ????
     4d6:	00 00       	nop
     4d8:	41 36       	cpi	r20, 0x61	; 97
     4da:	08 00       	.word	0x0008	; ????
     4dc:	02 01       	movw	r0, r4
     4de:	02 04       	cpc	r0, r2
     4e0:	02 3c       	cpi	r16, 0xC2	; 194
     4e2:	26 23       	and	r18, r22
     4e4:	26 3c       	cpi	r18, 0xC6	; 198
     4e6:	1e a1       	ldd	r17, Y+38	; 0x26
     4e8:	a1 61       	ori	r26, 0x11	; 17
     4ea:	12 3a       	cpi	r17, 0xA2	; 162
     4ec:	40 40       	sbci	r20, 0x00	; 0
     4ee:	20 7a       	andi	r18, 0xA0	; 160
     4f0:	38 54       	subi	r19, 0x48	; 72
     4f2:	54 55       	subi	r21, 0x54	; 84
     4f4:	59 21       	and	r21, r9
     4f6:	55 55       	subi	r21, 0x55	; 85
     4f8:	79 41       	sbci	r23, 0x19	; 25
     4fa:	21 54       	subi	r18, 0x41	; 65
     4fc:	54 78       	andi	r21, 0x84	; 132
     4fe:	41 21       	and	r20, r1
     500:	55 54       	subi	r21, 0x45	; 69
     502:	78 40       	sbci	r23, 0x08	; 8
     504:	20 54       	subi	r18, 0x40	; 64
     506:	55 79       	andi	r21, 0x95	; 149
     508:	40 0c       	add	r4, r0
     50a:	1e 52       	subi	r17, 0x2E	; 46
     50c:	72 12       	cpse	r7, r18
     50e:	39 55       	subi	r19, 0x59	; 89
     510:	55 55       	subi	r21, 0x55	; 85
     512:	59 39       	cpi	r21, 0x99	; 153
     514:	54 54       	subi	r21, 0x44	; 68
     516:	54 59       	subi	r21, 0x94	; 148
     518:	39 55       	subi	r19, 0x59	; 89
     51a:	54 54       	subi	r21, 0x44	; 68
     51c:	58 00       	.word	0x0058	; ????
     51e:	00 45       	sbci	r16, 0x50	; 80
     520:	7c 41       	sbci	r23, 0x1C	; 28
     522:	00 02       	muls	r16, r16
     524:	45 7d       	andi	r20, 0xD5	; 213
     526:	42 00       	.word	0x0042	; ????
     528:	01 45       	sbci	r16, 0x51	; 81
     52a:	7c 40       	sbci	r23, 0x0C	; 12
     52c:	f0 29       	or	r31, r0
     52e:	24 29       	or	r18, r4
     530:	f0 f0       	brcs	.+60     	; 0x56e <__trampolines_end+0x308>
     532:	28 25       	eor	r18, r8
     534:	28 f0       	brcs	.+10     	; 0x540 <__trampolines_end+0x2da>
     536:	7c 54       	subi	r23, 0x4C	; 76
     538:	55 45       	sbci	r21, 0x55	; 85
     53a:	00 20       	and	r0, r0
     53c:	54 54       	subi	r21, 0x44	; 68
     53e:	7c 54       	subi	r23, 0x4C	; 76
     540:	7c 0a       	sbc	r7, r28
     542:	09 7f       	andi	r16, 0xF9	; 249
     544:	49 32       	cpi	r20, 0x29	; 41
     546:	49 49       	sbci	r20, 0x99	; 153
     548:	49 32       	cpi	r20, 0x29	; 41
     54a:	32 48       	sbci	r19, 0x82	; 130
     54c:	48 48       	sbci	r20, 0x88	; 136
     54e:	32 32       	cpi	r19, 0x22	; 34
     550:	4a 48       	sbci	r20, 0x8A	; 138
     552:	48 30       	cpi	r20, 0x08	; 8
     554:	3a 41       	sbci	r19, 0x1A	; 26
     556:	41 21       	and	r20, r1
     558:	7a 3a       	cpi	r23, 0xAA	; 170
     55a:	42 40       	sbci	r20, 0x02	; 2
     55c:	20 78       	andi	r18, 0x80	; 128
     55e:	00 9d       	mul	r16, r0
     560:	a0 a0       	ldd	r10, Z+32	; 0x20
     562:	7d 39       	cpi	r23, 0x9D	; 157
     564:	44 44       	sbci	r20, 0x44	; 68
     566:	44 39       	cpi	r20, 0x94	; 148
     568:	3d 40       	sbci	r19, 0x0D	; 13
     56a:	40 40       	sbci	r20, 0x00	; 0
     56c:	3d 3c       	cpi	r19, 0xCD	; 205
     56e:	24 ff       	sbrs	r18, 4
     570:	24 24       	eor	r2, r4
     572:	48 7e       	andi	r20, 0xE8	; 232
     574:	49 43       	sbci	r20, 0x39	; 57
     576:	66 2b       	or	r22, r22
     578:	2f fc       	.word	0xfc2f	; ????
     57a:	2f 2b       	or	r18, r31
     57c:	ff 09       	sbc	r31, r15
     57e:	29 f6       	brne	.-118    	; 0x50a <__trampolines_end+0x2a4>
     580:	20 c0       	rjmp	.+64     	; 0x5c2 <__trampolines_end+0x35c>
     582:	88 7e       	andi	r24, 0xE8	; 232
     584:	09 03       	fmul	r16, r17
     586:	20 54       	subi	r18, 0x40	; 64
     588:	54 79       	andi	r21, 0x94	; 148
     58a:	41 00       	.word	0x0041	; ????
     58c:	00 44       	sbci	r16, 0x40	; 64
     58e:	7d 41       	sbci	r23, 0x1D	; 29
     590:	30 48       	sbci	r19, 0x80	; 128
     592:	48 4a       	sbci	r20, 0xA8	; 168
     594:	32 38       	cpi	r19, 0x82	; 130
     596:	40 40       	sbci	r20, 0x00	; 0
     598:	22 7a       	andi	r18, 0xA2	; 162
     59a:	00 7a       	andi	r16, 0xA0	; 160
     59c:	0a 0a       	sbc	r0, r26
     59e:	72 7d       	andi	r23, 0xD2	; 210
     5a0:	0d 19       	sub	r16, r13
     5a2:	31 7d       	andi	r19, 0xD1	; 209
     5a4:	26 29       	or	r18, r6
     5a6:	29 2f       	mov	r18, r25
     5a8:	28 26       	eor	r2, r24
     5aa:	29 29       	or	r18, r9
     5ac:	29 26       	eor	r2, r25
     5ae:	30 48       	sbci	r19, 0x80	; 128
     5b0:	4d 40       	sbci	r20, 0x0D	; 13
     5b2:	20 38       	cpi	r18, 0x80	; 128
     5b4:	08 08       	sbc	r0, r8
     5b6:	08 08       	sbc	r0, r8
     5b8:	08 08       	sbc	r0, r8
     5ba:	08 08       	sbc	r0, r8
     5bc:	38 2f       	mov	r19, r24
     5be:	10 c8       	rjmp	.-4064   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>
     5c0:	ac ba       	out	0x1c, r10	; 28
     5c2:	2f 10       	cpse	r2, r15
     5c4:	28 34       	cpi	r18, 0x48	; 72
     5c6:	fa 00       	.word	0x00fa	; ????
     5c8:	00 7b       	andi	r16, 0xB0	; 176
     5ca:	00 00       	nop
     5cc:	08 14       	cp	r0, r8
     5ce:	2a 14       	cp	r2, r10
     5d0:	22 22       	and	r2, r18
     5d2:	14 2a       	or	r1, r20
     5d4:	14 08       	sbc	r1, r4
     5d6:	aa 00       	.word	0x00aa	; ????
     5d8:	55 00       	.word	0x0055	; ????
     5da:	aa aa       	std	Y+50, r10	; 0x32
     5dc:	55 aa       	std	Z+53, r5	; 0x35
     5de:	55 aa       	std	Z+53, r5	; 0x35
     5e0:	00 00       	nop
     5e2:	00 ff       	sbrs	r16, 0
     5e4:	00 10       	cpse	r0, r0
     5e6:	10 10       	cpse	r1, r0
     5e8:	ff 00       	.word	0x00ff	; ????
     5ea:	14 14       	cp	r1, r4
     5ec:	14 ff       	sbrs	r17, 4
     5ee:	00 10       	cpse	r0, r0
     5f0:	10 ff       	sbrs	r17, 0
     5f2:	00 ff       	sbrs	r16, 0
     5f4:	10 10       	cpse	r1, r0
     5f6:	f0 10       	cpse	r15, r0
     5f8:	f0 14       	cp	r15, r0
     5fa:	14 14       	cp	r1, r4
     5fc:	fc 00       	.word	0x00fc	; ????
     5fe:	14 14       	cp	r1, r4
     600:	f7 00       	.word	0x00f7	; ????
     602:	ff 00       	.word	0x00ff	; ????
     604:	00 ff       	sbrs	r16, 0
     606:	00 ff       	sbrs	r16, 0
     608:	14 14       	cp	r1, r4
     60a:	f4 04       	cpc	r15, r4
     60c:	fc 14       	cp	r15, r12
     60e:	14 17       	cp	r17, r20
     610:	10 1f       	adc	r17, r16
     612:	10 10       	cpse	r1, r0
     614:	1f 10       	cpse	r1, r15
     616:	1f 14       	cp	r1, r15
     618:	14 14       	cp	r1, r4
     61a:	1f 00       	.word	0x001f	; ????
     61c:	10 10       	cpse	r1, r0
     61e:	10 f0       	brcs	.+4      	; 0x624 <__trampolines_end+0x3be>
     620:	00 00       	nop
     622:	00 00       	nop
     624:	1f 10       	cpse	r1, r15
     626:	10 10       	cpse	r1, r0
     628:	10 1f       	adc	r17, r16
     62a:	10 10       	cpse	r1, r0
     62c:	10 10       	cpse	r1, r0
     62e:	f0 10       	cpse	r15, r0
     630:	00 00       	nop
     632:	00 ff       	sbrs	r16, 0
     634:	10 10       	cpse	r1, r0
     636:	10 10       	cpse	r1, r0
     638:	10 10       	cpse	r1, r0
     63a:	10 10       	cpse	r1, r0
     63c:	10 ff       	sbrs	r17, 0
     63e:	10 00       	.word	0x0010	; ????
     640:	00 00       	nop
     642:	ff 14       	cp	r15, r15
     644:	00 00       	nop
     646:	ff 00       	.word	0x00ff	; ????
     648:	ff 00       	.word	0x00ff	; ????
     64a:	00 1f       	adc	r16, r16
     64c:	10 17       	cp	r17, r16
     64e:	00 00       	nop
     650:	fc 04       	cpc	r15, r12
     652:	f4 14       	cp	r15, r4
     654:	14 17       	cp	r17, r20
     656:	10 17       	cp	r17, r16
     658:	14 14       	cp	r1, r4
     65a:	f4 04       	cpc	r15, r4
     65c:	f4 00       	.word	0x00f4	; ????
     65e:	00 ff       	sbrs	r16, 0
     660:	00 f7       	brcc	.-64     	; 0x622 <__trampolines_end+0x3bc>
     662:	14 14       	cp	r1, r4
     664:	14 14       	cp	r1, r4
     666:	14 14       	cp	r1, r4
     668:	14 f7       	brge	.-60     	; 0x62e <__trampolines_end+0x3c8>
     66a:	00 f7       	brcc	.-64     	; 0x62c <__trampolines_end+0x3c6>
     66c:	14 14       	cp	r1, r4
     66e:	14 17       	cp	r17, r20
     670:	14 10       	cpse	r1, r4
     672:	10 1f       	adc	r17, r16
     674:	10 1f       	adc	r17, r16
     676:	14 14       	cp	r1, r4
     678:	14 f4       	brge	.+4      	; 0x67e <__trampolines_end+0x418>
     67a:	14 10       	cpse	r1, r4
     67c:	10 f0       	brcs	.+4      	; 0x682 <__trampolines_end+0x41c>
     67e:	10 f0       	brcs	.+4      	; 0x684 <__trampolines_end+0x41e>
     680:	00 00       	nop
     682:	1f 10       	cpse	r1, r15
     684:	1f 00       	.word	0x001f	; ????
     686:	00 00       	nop
     688:	1f 14       	cp	r1, r15
     68a:	00 00       	nop
     68c:	00 fc       	sbrc	r0, 0
     68e:	14 00       	.word	0x0014	; ????
     690:	00 f0       	brcs	.+0      	; 0x692 <__trampolines_end+0x42c>
     692:	10 f0       	brcs	.+4      	; 0x698 <__trampolines_end+0x432>
     694:	10 10       	cpse	r1, r0
     696:	ff 10       	cpse	r15, r15
     698:	ff 14       	cp	r15, r15
     69a:	14 14       	cp	r1, r4
     69c:	ff 14       	cp	r15, r15
     69e:	10 10       	cpse	r1, r0
     6a0:	10 1f       	adc	r17, r16
     6a2:	00 00       	nop
     6a4:	00 00       	nop
     6a6:	f0 10       	cpse	r15, r0
     6a8:	ff ff       	.word	0xffff	; ????
     6aa:	ff ff       	.word	0xffff	; ????
     6ac:	ff f0       	brie	.+62     	; 0x6ec <__trampolines_end+0x486>
     6ae:	f0 f0       	brcs	.+60     	; 0x6ec <__trampolines_end+0x486>
     6b0:	f0 f0       	brcs	.+60     	; 0x6ee <__trampolines_end+0x488>
     6b2:	ff ff       	.word	0xffff	; ????
     6b4:	ff 00       	.word	0x00ff	; ????
     6b6:	00 00       	nop
     6b8:	00 00       	nop
     6ba:	ff ff       	.word	0xffff	; ????
     6bc:	0f 0f       	add	r16, r31
     6be:	0f 0f       	add	r16, r31
     6c0:	0f 38       	cpi	r16, 0x8F	; 143
     6c2:	44 44       	sbci	r20, 0x44	; 68
     6c4:	38 44       	sbci	r19, 0x48	; 72
     6c6:	7c 2a       	or	r7, r28
     6c8:	2a 3e       	cpi	r18, 0xEA	; 234
     6ca:	14 7e       	andi	r17, 0xE4	; 228
     6cc:	02 02       	muls	r16, r18
     6ce:	06 06       	cpc	r0, r22
     6d0:	02 7e       	andi	r16, 0xE2	; 226
     6d2:	02 7e       	andi	r16, 0xE2	; 226
     6d4:	02 63       	ori	r16, 0x32	; 50
     6d6:	55 49       	sbci	r21, 0x95	; 149
     6d8:	41 63       	ori	r20, 0x31	; 49
     6da:	38 44       	sbci	r19, 0x48	; 72
     6dc:	44 3c       	cpi	r20, 0xC4	; 196
     6de:	04 40       	sbci	r16, 0x04	; 4
     6e0:	7e 20       	and	r7, r14
     6e2:	1e 20       	and	r1, r14
     6e4:	06 02       	muls	r16, r22
     6e6:	7e 02       	muls	r23, r30
     6e8:	02 99       	sbic	0x00, 2	; 0
     6ea:	a5 e7       	ldi	r26, 0x75	; 117
     6ec:	a5 99       	sbic	0x14, 5	; 20
     6ee:	1c 2a       	or	r1, r28
     6f0:	49 2a       	or	r4, r25
     6f2:	1c 4c       	sbci	r17, 0xCC	; 204
     6f4:	72 01       	movw	r14, r4
     6f6:	72 4c       	sbci	r23, 0xC2	; 194
     6f8:	30 4a       	sbci	r19, 0xA0	; 160
     6fa:	4d 4d       	sbci	r20, 0xDD	; 221
     6fc:	30 30       	cpi	r19, 0x00	; 0
     6fe:	48 78       	andi	r20, 0x88	; 136
     700:	48 30       	cpi	r20, 0x08	; 8
     702:	bc 62       	ori	r27, 0x2C	; 44
     704:	5a 46       	sbci	r21, 0x6A	; 106
     706:	3d 3e       	cpi	r19, 0xED	; 237
     708:	49 49       	sbci	r20, 0x99	; 153
     70a:	49 00       	.word	0x0049	; ????
     70c:	7e 01       	movw	r14, r28
     70e:	01 01       	movw	r0, r2
     710:	7e 2a       	or	r7, r30
     712:	2a 2a       	or	r2, r26
     714:	2a 2a       	or	r2, r26
     716:	44 44       	sbci	r20, 0x44	; 68
     718:	5f 44       	sbci	r21, 0x4F	; 79
     71a:	44 40       	sbci	r20, 0x04	; 4
     71c:	51 4a       	sbci	r21, 0xA1	; 161
     71e:	44 40       	sbci	r20, 0x04	; 4
     720:	40 44       	sbci	r20, 0x40	; 64
     722:	4a 51       	subi	r20, 0x1A	; 26
     724:	40 00       	.word	0x0040	; ????
     726:	00 ff       	sbrs	r16, 0
     728:	01 03       	mulsu	r16, r17
     72a:	e0 80       	ld	r14, Z
     72c:	ff 00       	.word	0x00ff	; ????
     72e:	00 08       	sbc	r0, r0
     730:	08 6b       	ori	r16, 0xB8	; 184
     732:	6b 08       	sbc	r6, r11
     734:	36 12       	cpse	r3, r22
     736:	36 24       	eor	r3, r6
     738:	36 06       	cpc	r3, r22
     73a:	0f 09       	sbc	r16, r15
     73c:	0f 06       	cpc	r0, r31
     73e:	00 00       	nop
     740:	18 18       	sub	r1, r8
     742:	00 00       	nop
     744:	00 10       	cpse	r0, r0
     746:	10 00       	.word	0x0010	; ????
     748:	30 40       	sbci	r19, 0x00	; 0
     74a:	ff 01       	movw	r30, r30
     74c:	01 00       	.word	0x0001	; ????
     74e:	1f 01       	movw	r2, r30
     750:	01 1e       	adc	r0, r17
     752:	00 19       	sub	r16, r0
     754:	1d 17       	cp	r17, r29
     756:	12 00       	.word	0x0012	; ????
     758:	3c 3c       	cpi	r19, 0xCC	; 204
     75a:	3c 3c       	cpi	r19, 0xCC	; 204
     75c:	00 00       	nop
     75e:	00 00       	nop
	...

00000761 <__c.2161>:
     761:	6e 61 6e 00                                         nan.

00000765 <__c.2159>:
     765:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     775:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     785:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     795:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     7a5:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     7b5:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     7c5:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     7d5:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     7e5:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     7f5:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     805:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     815:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     825:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     835:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     845:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     855:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000864 <_StackPaint>:
 *  the maximum stack usage of the running application.
 */
void _StackPaint(void) __attribute__((naked)) __attribute__((optimize("O3"))) __attribute__((section (".init1")));
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
     864:	e0 e9       	ldi	r30, 0x90	; 144
     866:	f7 e3       	ldi	r31, 0x37	; 55
     868:	e3 70       	andi	r30, 0x03	; 3
     86a:	ff 27       	eor	r31, r31
     86c:	e0 57       	subi	r30, 0x70	; 112
     86e:	f8 4c       	sbci	r31, 0xC8	; 200
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
     870:	2f ef       	ldi	r18, 0xFF	; 255
     872:	3f e3       	ldi	r19, 0x3F	; 63
     874:	2c 7f       	andi	r18, 0xFC	; 252
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     876:	e2 17       	cp	r30, r18
     878:	f3 07       	cpc	r31, r19
     87a:	58 f4       	brcc	.+22     	; 0x892 <_StackPaint+0x2e>
		*fill_pos = __SWAP_ENDIAN32(0xDEADBEEF);
     87c:	8e ed       	ldi	r24, 0xDE	; 222
     87e:	9d ea       	ldi	r25, 0xAD	; 173
     880:	ae eb       	ldi	r26, 0xBE	; 190
     882:	bf ee       	ldi	r27, 0xEF	; 239
     884:	81 93       	st	Z+, r24
     886:	91 93       	st	Z+, r25
     888:	a1 93       	st	Z+, r26
     88a:	b1 93       	st	Z+, r27
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     88c:	e2 17       	cp	r30, r18
     88e:	f3 07       	cpc	r31, r19
     890:	c8 f3       	brcs	.-14     	; 0x884 <_StackPaint+0x20>
     892:	11 24       	eor	r1, r1
     894:	1f be       	out	0x3f, r1	; 63
     896:	cf ef       	ldi	r28, 0xFF	; 255
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	df e3       	ldi	r29, 0x3F	; 63
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	00 e0       	ldi	r16, 0x00	; 0
     8a0:	0c bf       	out	0x3c, r16	; 60
     8a2:	18 be       	out	0x38, r1	; 56
     8a4:	19 be       	out	0x39, r1	; 57
     8a6:	1a be       	out	0x3a, r1	; 58
     8a8:	1b be       	out	0x3b, r1	; 59

000008aa <__do_copy_data>:
     8aa:	1c e2       	ldi	r17, 0x2C	; 44
     8ac:	a0 e0       	ldi	r26, 0x00	; 0
     8ae:	b0 e2       	ldi	r27, 0x20	; 32
     8b0:	e8 e1       	ldi	r30, 0x18	; 24
     8b2:	fc e8       	ldi	r31, 0x8C	; 140
     8b4:	00 e0       	ldi	r16, 0x00	; 0
     8b6:	0b bf       	out	0x3b, r16	; 59
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <__do_copy_data+0x14>
     8ba:	07 90       	elpm	r0, Z+
     8bc:	0d 92       	st	X+, r0
     8be:	aa 34       	cpi	r26, 0x4A	; 74
     8c0:	b1 07       	cpc	r27, r17
     8c2:	d9 f7       	brne	.-10     	; 0x8ba <__do_copy_data+0x10>
     8c4:	1b be       	out	0x3b, r1	; 59

000008c6 <__do_clear_bss>:
     8c6:	27 e3       	ldi	r18, 0x37	; 55
     8c8:	aa e4       	ldi	r26, 0x4A	; 74
     8ca:	bc e2       	ldi	r27, 0x2C	; 44
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <.do_clear_bss_start>

000008ce <.do_clear_bss_loop>:
     8ce:	1d 92       	st	X+, r1

000008d0 <.do_clear_bss_start>:
     8d0:	a0 39       	cpi	r26, 0x90	; 144
     8d2:	b2 07       	cpc	r27, r18
     8d4:	e1 f7       	brne	.-8      	; 0x8ce <.do_clear_bss_loop>
     8d6:	0e 94 2c 14 	call	0x2858	; 0x2858 <main>
     8da:	0c 94 0a 46 	jmp	0x8c14	; 0x8c14 <_exit>

000008de <__bad_interrupt>:
     8de:	90 cb       	rjmp	.-2272   	; 0x0 <__vectors>

000008e0 <clock_setup_32_mhz>:
	CLK.CTRL	= CLK_SCLKSEL_RC32M_gc;
}

void clock_setup_32_mhz(void) 
{	
	OSC.CTRL	|= OSC_RC32MEN_bm;
     8e0:	80 91 50 00 	lds	r24, 0x0050
     8e4:	82 60       	ori	r24, 0x02	; 2
     8e6:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     8ea:	80 91 51 00 	lds	r24, 0x0051
     8ee:	81 ff       	sbrs	r24, 1
     8f0:	fc cf       	rjmp	.-8      	; 0x8ea <clock_setup_32_mhz+0xa>
	CCP			= CCP_IOREG_gc;
     8f2:	88 ed       	ldi	r24, 0xD8	; 216
     8f4:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL	= CLK_SCLKSEL_RC32M_gc;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	80 93 40 00 	sts	0x0040, r24
     8fc:	08 95       	ret

000008fe <__vector_6>:
}
*/

//! DMA CH0 Interrupt service routine. Clear interrupt flags after check. 
ISR(DMA_CH0_vect)
{
     8fe:	1f 92       	push	r1
     900:	0f 92       	push	r0
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	0f 92       	push	r0
     906:	11 24       	eor	r1, r1
     908:	08 b6       	in	r0, 0x38	; 56
     90a:	0f 92       	push	r0
     90c:	18 be       	out	0x38, r1	; 56
     90e:	8f 93       	push	r24
	if (DMA.CH0.CTRLB & DMA_CH_ERRIF_bm) {
     910:	80 91 11 01 	lds	r24, 0x0111
     914:	85 fd       	sbrc	r24, 5
     916:	13 c0       	rjmp	.+38     	; 0x93e <__vector_6+0x40>
		DMA.CH0.CTRLB |= DMA_CH_ERRIF_bm;
		gStatus = false;
	} else {
		DMA.CH0.CTRLB |= DMA_CH_TRNIF_bm;
     918:	80 91 11 01 	lds	r24, 0x0111
     91c:	80 61       	ori	r24, 0x10	; 16
     91e:	80 93 11 01 	sts	0x0111, r24
		gStatus = true;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 ca 35 	sts	0x35CA, r24
	}
	gInterruptDone = true;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	80 93 cb 35 	sts	0x35CB, r24
}
     92e:	8f 91       	pop	r24
     930:	0f 90       	pop	r0
     932:	08 be       	out	0x38, r0	; 56
     934:	0f 90       	pop	r0
     936:	0f be       	out	0x3f, r0	; 63
     938:	0f 90       	pop	r0
     93a:	1f 90       	pop	r1
     93c:	18 95       	reti

//! DMA CH0 Interrupt service routine. Clear interrupt flags after check. 
ISR(DMA_CH0_vect)
{
	if (DMA.CH0.CTRLB & DMA_CH_ERRIF_bm) {
		DMA.CH0.CTRLB |= DMA_CH_ERRIF_bm;
     93e:	80 91 11 01 	lds	r24, 0x0111
     942:	80 62       	ori	r24, 0x20	; 32
     944:	80 93 11 01 	sts	0x0111, r24
		gStatus = false;
     948:	10 92 ca 35 	sts	0x35CA, r1
     94c:	ed cf       	rjmp	.-38     	; 0x928 <__vector_6+0x2a>

0000094e <EEPROM_ReadEnv>:
	
	return 1;
}

uint8_t EEPROM_ReadEnv(void) 
{
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
     95a:	cb 5a       	subi	r28, 0xAB	; 171
     95c:	d1 09       	sbc	r29, r1
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	de bf       	out	0x3e, r29	; 62
	env_variables_t temp;
	memset(&temp,0,sizeof(temp));
     962:	8e 01       	movw	r16, r28
     964:	0f 5f       	subi	r16, 0xFF	; 255
     966:	1f 4f       	sbci	r17, 0xFF	; 255
     968:	8b ea       	ldi	r24, 0xAB	; 171
     96a:	f8 01       	movw	r30, r16
     96c:	11 92       	st	Z+, r1
     96e:	8a 95       	dec	r24
     970:	e9 f7       	brne	.-6      	; 0x96c <EEPROM_ReadEnv+0x1e>
	eeprom_read_block(&temp,EEPROM_START,sizeof(temp));
     972:	4b ea       	ldi	r20, 0xAB	; 171
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	c8 01       	movw	r24, r16
     97c:	0e 94 d3 45 	call	0x8ba6	; 0x8ba6 <__eerd_block_x128a4u>
	}
	
	memcpy(&env, temp, sizeof(temp));
	*/
	
	if (temp.id != 0 && temp.id != 0xff) {
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	81 50       	subi	r24, 0x01	; 1
     984:	8e 3f       	cpi	r24, 0xFE	; 254
     986:	90 f4       	brcc	.+36     	; 0x9ac <EEPROM_ReadEnv+0x5e>
		memcpy(&env,&temp,sizeof(temp));
     988:	8b ea       	ldi	r24, 0xAB	; 171
     98a:	f8 01       	movw	r30, r16
     98c:	ab eb       	ldi	r26, 0xBB	; 187
     98e:	b4 e3       	ldi	r27, 0x34	; 52
     990:	01 90       	ld	r0, Z+
     992:	0d 92       	st	X+, r0
     994:	8a 95       	dec	r24
     996:	e1 f7       	brne	.-8      	; 0x990 <EEPROM_ReadEnv+0x42>
		return 1;
     998:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return 0;
     99a:	c5 55       	subi	r28, 0x55	; 85
     99c:	df 4f       	sbci	r29, 0xFF	; 255
     99e:	cd bf       	out	0x3d, r28	; 61
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	08 95       	ret
	if (temp.id != 0 && temp.id != 0xff) {
		memcpy(&env,&temp,sizeof(temp));
		return 1;
	}
	
	return 0;
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	f5 cf       	rjmp	.-22     	; 0x99a <EEPROM_ReadEnv+0x4c>

000009b0 <ht1632c_setup>:
	d <<= 4;
	d |= data & 0xF;
		
	PORTE.OUTCLR = HT1632C_CS;
	ht1632c_write_data(d, 14);
	PORTE.OUTSET = HT1632C_CS;
     9b0:	9d e0       	ldi	r25, 0x0D	; 13
     9b2:	90 93 81 06 	sts	0x0681, r25
     9b6:	95 e0       	ldi	r25, 0x05	; 5
     9b8:	90 93 85 06 	sts	0x0685, r25
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	40 93 86 06 	sts	0x0686, r20
     9c2:	24 e0       	ldi	r18, 0x04	; 4
     9c4:	20 93 86 06 	sts	0x0686, r18
     9c8:	38 e0       	ldi	r19, 0x08	; 8
     9ca:	30 93 85 06 	sts	0x0685, r19
     9ce:	20 93 85 06 	sts	0x0685, r18
     9d2:	20 93 86 06 	sts	0x0686, r18
     9d6:	30 93 86 06 	sts	0x0686, r19
     9da:	20 93 85 06 	sts	0x0685, r18
     9de:	20 93 86 06 	sts	0x0686, r18
     9e2:	30 93 86 06 	sts	0x0686, r19
     9e6:	20 93 85 06 	sts	0x0685, r18
     9ea:	20 93 86 06 	sts	0x0686, r18
     9ee:	30 93 86 06 	sts	0x0686, r19
     9f2:	20 93 85 06 	sts	0x0685, r18
     9f6:	20 93 86 06 	sts	0x0686, r18
     9fa:	30 93 86 06 	sts	0x0686, r19
     9fe:	20 93 85 06 	sts	0x0685, r18
     a02:	20 93 86 06 	sts	0x0686, r18
     a06:	30 93 86 06 	sts	0x0686, r19
     a0a:	20 93 85 06 	sts	0x0685, r18
     a0e:	20 93 86 06 	sts	0x0686, r18
     a12:	30 93 86 06 	sts	0x0686, r19
     a16:	20 93 85 06 	sts	0x0685, r18
     a1a:	20 93 86 06 	sts	0x0686, r18
     a1e:	30 93 86 06 	sts	0x0686, r19
     a22:	20 93 85 06 	sts	0x0685, r18
     a26:	20 93 86 06 	sts	0x0686, r18
     a2a:	30 93 86 06 	sts	0x0686, r19
     a2e:	20 93 85 06 	sts	0x0685, r18
     a32:	20 93 86 06 	sts	0x0686, r18
     a36:	30 93 86 06 	sts	0x0686, r19
     a3a:	20 93 85 06 	sts	0x0685, r18
     a3e:	20 93 86 06 	sts	0x0686, r18
     a42:	30 93 85 06 	sts	0x0685, r19
     a46:	20 93 85 06 	sts	0x0685, r18
     a4a:	20 93 86 06 	sts	0x0686, r18
     a4e:	30 93 86 06 	sts	0x0686, r19
     a52:	20 93 85 06 	sts	0x0685, r18
     a56:	40 93 85 06 	sts	0x0685, r20
     a5a:	40 93 86 06 	sts	0x0686, r20
     a5e:	20 93 86 06 	sts	0x0686, r18
     a62:	30 93 85 06 	sts	0x0685, r19
     a66:	20 93 85 06 	sts	0x0685, r18
     a6a:	20 93 86 06 	sts	0x0686, r18
     a6e:	30 93 86 06 	sts	0x0686, r19
     a72:	20 93 85 06 	sts	0x0685, r18
     a76:	20 93 86 06 	sts	0x0686, r18
     a7a:	30 93 86 06 	sts	0x0686, r19
     a7e:	20 93 85 06 	sts	0x0685, r18
     a82:	20 93 86 06 	sts	0x0686, r18
     a86:	30 93 86 06 	sts	0x0686, r19
     a8a:	20 93 85 06 	sts	0x0685, r18
     a8e:	20 93 86 06 	sts	0x0686, r18
     a92:	30 93 86 06 	sts	0x0686, r19
     a96:	20 93 85 06 	sts	0x0685, r18
     a9a:	20 93 86 06 	sts	0x0686, r18
     a9e:	30 93 86 06 	sts	0x0686, r19
     aa2:	20 93 85 06 	sts	0x0685, r18
     aa6:	20 93 86 06 	sts	0x0686, r18
     aaa:	30 93 86 06 	sts	0x0686, r19
     aae:	20 93 85 06 	sts	0x0685, r18
     ab2:	20 93 86 06 	sts	0x0686, r18
     ab6:	30 93 86 06 	sts	0x0686, r19
     aba:	20 93 85 06 	sts	0x0685, r18
     abe:	20 93 86 06 	sts	0x0686, r18
     ac2:	30 93 86 06 	sts	0x0686, r19
     ac6:	20 93 85 06 	sts	0x0685, r18
     aca:	20 93 86 06 	sts	0x0686, r18
     ace:	30 93 85 06 	sts	0x0685, r19
     ad2:	20 93 85 06 	sts	0x0685, r18
     ad6:	20 93 86 06 	sts	0x0686, r18
     ada:	30 93 85 06 	sts	0x0685, r19
     ade:	20 93 85 06 	sts	0x0685, r18
     ae2:	20 93 86 06 	sts	0x0686, r18
     ae6:	30 93 86 06 	sts	0x0686, r19
     aea:	20 93 85 06 	sts	0x0685, r18
     aee:	40 93 85 06 	sts	0x0685, r20
     af2:	40 93 86 06 	sts	0x0686, r20
     af6:	20 93 86 06 	sts	0x0686, r18
     afa:	30 93 85 06 	sts	0x0685, r19
     afe:	20 93 85 06 	sts	0x0685, r18
     b02:	20 93 86 06 	sts	0x0686, r18
     b06:	30 93 86 06 	sts	0x0686, r19
     b0a:	20 93 85 06 	sts	0x0685, r18
     b0e:	20 93 86 06 	sts	0x0686, r18
     b12:	30 93 86 06 	sts	0x0686, r19
     b16:	20 93 85 06 	sts	0x0685, r18
     b1a:	20 93 86 06 	sts	0x0686, r18
     b1e:	30 93 86 06 	sts	0x0686, r19
     b22:	20 93 85 06 	sts	0x0685, r18
     b26:	20 93 86 06 	sts	0x0686, r18
     b2a:	30 93 86 06 	sts	0x0686, r19
     b2e:	20 93 85 06 	sts	0x0685, r18
     b32:	20 93 86 06 	sts	0x0686, r18
     b36:	30 93 86 06 	sts	0x0686, r19
     b3a:	20 93 85 06 	sts	0x0685, r18
     b3e:	20 93 86 06 	sts	0x0686, r18
     b42:	30 93 86 06 	sts	0x0686, r19
     b46:	20 93 85 06 	sts	0x0685, r18
     b4a:	20 93 86 06 	sts	0x0686, r18
     b4e:	30 93 85 06 	sts	0x0685, r19
     b52:	20 93 85 06 	sts	0x0685, r18
     b56:	20 93 86 06 	sts	0x0686, r18
     b5a:	30 93 86 06 	sts	0x0686, r19
     b5e:	20 93 85 06 	sts	0x0685, r18
     b62:	20 93 86 06 	sts	0x0686, r18
     b66:	30 93 86 06 	sts	0x0686, r19
     b6a:	20 93 85 06 	sts	0x0685, r18
     b6e:	20 93 86 06 	sts	0x0686, r18
     b72:	30 93 86 06 	sts	0x0686, r19
     b76:	20 93 85 06 	sts	0x0685, r18
     b7a:	20 93 86 06 	sts	0x0686, r18
     b7e:	30 93 86 06 	sts	0x0686, r19
     b82:	20 93 85 06 	sts	0x0685, r18
     b86:	40 93 85 06 	sts	0x0685, r20
     b8a:	40 93 86 06 	sts	0x0686, r20
     b8e:	20 93 86 06 	sts	0x0686, r18
     b92:	30 93 85 06 	sts	0x0685, r19
     b96:	20 93 85 06 	sts	0x0685, r18
     b9a:	20 93 86 06 	sts	0x0686, r18
     b9e:	30 93 86 06 	sts	0x0686, r19
     ba2:	20 93 85 06 	sts	0x0685, r18
     ba6:	20 93 86 06 	sts	0x0686, r18
     baa:	30 93 86 06 	sts	0x0686, r19
     bae:	20 93 85 06 	sts	0x0685, r18
     bb2:	20 93 86 06 	sts	0x0686, r18
     bb6:	30 93 86 06 	sts	0x0686, r19
     bba:	20 93 85 06 	sts	0x0685, r18
     bbe:	20 93 86 06 	sts	0x0686, r18
     bc2:	30 93 86 06 	sts	0x0686, r19
     bc6:	20 93 85 06 	sts	0x0685, r18
     bca:	20 93 86 06 	sts	0x0686, r18
     bce:	30 93 86 06 	sts	0x0686, r19
     bd2:	20 93 85 06 	sts	0x0685, r18
     bd6:	20 93 86 06 	sts	0x0686, r18
     bda:	30 93 85 06 	sts	0x0685, r19
     bde:	20 93 85 06 	sts	0x0685, r18
     be2:	20 93 86 06 	sts	0x0686, r18
     be6:	30 93 86 06 	sts	0x0686, r19
     bea:	20 93 85 06 	sts	0x0685, r18
     bee:	20 93 86 06 	sts	0x0686, r18
     bf2:	30 93 85 06 	sts	0x0685, r19
     bf6:	20 93 85 06 	sts	0x0685, r18
     bfa:	20 93 86 06 	sts	0x0686, r18
     bfe:	30 93 86 06 	sts	0x0686, r19
     c02:	20 93 85 06 	sts	0x0685, r18
     c06:	20 93 86 06 	sts	0x0686, r18
     c0a:	30 93 86 06 	sts	0x0686, r19
     c0e:	20 93 85 06 	sts	0x0685, r18
     c12:	20 93 86 06 	sts	0x0686, r18
     c16:	30 93 86 06 	sts	0x0686, r19
     c1a:	20 93 85 06 	sts	0x0685, r18
     c1e:	40 93 85 06 	sts	0x0685, r20
     c22:	40 93 86 06 	sts	0x0686, r20
     c26:	20 93 86 06 	sts	0x0686, r18
     c2a:	30 93 85 06 	sts	0x0685, r19
     c2e:	20 93 85 06 	sts	0x0685, r18
     c32:	20 93 86 06 	sts	0x0686, r18
     c36:	30 93 86 06 	sts	0x0686, r19
     c3a:	20 93 85 06 	sts	0x0685, r18
     c3e:	20 93 86 06 	sts	0x0686, r18
     c42:	30 93 86 06 	sts	0x0686, r19
     c46:	20 93 85 06 	sts	0x0685, r18
     c4a:	20 93 86 06 	sts	0x0686, r18
     c4e:	30 93 86 06 	sts	0x0686, r19
     c52:	20 93 85 06 	sts	0x0685, r18
     c56:	20 93 86 06 	sts	0x0686, r18
     c5a:	30 93 86 06 	sts	0x0686, r19
     c5e:	20 93 85 06 	sts	0x0685, r18
     c62:	20 93 86 06 	sts	0x0686, r18
     c66:	30 93 86 06 	sts	0x0686, r19
     c6a:	20 93 85 06 	sts	0x0685, r18
     c6e:	20 93 86 06 	sts	0x0686, r18
     c72:	30 93 85 06 	sts	0x0685, r19
     c76:	20 93 85 06 	sts	0x0685, r18
     c7a:	20 93 86 06 	sts	0x0686, r18
     c7e:	30 93 85 06 	sts	0x0685, r19
     c82:	20 93 85 06 	sts	0x0685, r18
     c86:	20 93 86 06 	sts	0x0686, r18
     c8a:	30 93 86 06 	sts	0x0686, r19
     c8e:	20 93 85 06 	sts	0x0685, r18
     c92:	20 93 86 06 	sts	0x0686, r18
     c96:	30 93 86 06 	sts	0x0686, r19
     c9a:	20 93 85 06 	sts	0x0685, r18
     c9e:	20 93 86 06 	sts	0x0686, r18
     ca2:	30 93 86 06 	sts	0x0686, r19
     ca6:	20 93 85 06 	sts	0x0685, r18
     caa:	20 93 86 06 	sts	0x0686, r18
     cae:	30 93 86 06 	sts	0x0686, r19
     cb2:	20 93 85 06 	sts	0x0685, r18
     cb6:	40 93 85 06 	sts	0x0685, r20
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	94 60       	ori	r25, 0x04	; 4
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	40 93 86 06 	sts	0x0686, r20
     cc6:	20 93 86 06 	sts	0x0686, r18
     cca:	30 93 85 06 	sts	0x0685, r19
     cce:	20 93 85 06 	sts	0x0685, r18
     cd2:	20 93 86 06 	sts	0x0686, r18
     cd6:	30 93 86 06 	sts	0x0686, r19
     cda:	20 93 85 06 	sts	0x0685, r18
     cde:	20 93 86 06 	sts	0x0686, r18
     ce2:	30 93 86 06 	sts	0x0686, r19
     ce6:	20 93 85 06 	sts	0x0685, r18
     cea:	20 93 86 06 	sts	0x0686, r18
     cee:	90 fd       	sbrc	r25, 0
     cf0:	e1 c0       	rjmp	.+450    	; 0xeb4 <ht1632c_setup+0x504>
     cf2:	30 93 86 06 	sts	0x0686, r19
     cf6:	24 e0       	ldi	r18, 0x04	; 4
     cf8:	20 93 85 06 	sts	0x0685, r18
     cfc:	20 93 86 06 	sts	0x0686, r18
     d00:	28 e0       	ldi	r18, 0x08	; 8
     d02:	87 fd       	sbrc	r24, 7
     d04:	98 c0       	rjmp	.+304    	; 0xe36 <ht1632c_setup+0x486>
     d06:	20 93 86 06 	sts	0x0686, r18
     d0a:	24 e0       	ldi	r18, 0x04	; 4
     d0c:	20 93 85 06 	sts	0x0685, r18
     d10:	20 93 86 06 	sts	0x0686, r18
     d14:	28 e0       	ldi	r18, 0x08	; 8
     d16:	86 fd       	sbrc	r24, 6
     d18:	98 c0       	rjmp	.+304    	; 0xe4a <ht1632c_setup+0x49a>
     d1a:	20 93 86 06 	sts	0x0686, r18
     d1e:	24 e0       	ldi	r18, 0x04	; 4
     d20:	20 93 85 06 	sts	0x0685, r18
     d24:	20 93 86 06 	sts	0x0686, r18
     d28:	28 e0       	ldi	r18, 0x08	; 8
     d2a:	85 fd       	sbrc	r24, 5
     d2c:	98 c0       	rjmp	.+304    	; 0xe5e <ht1632c_setup+0x4ae>
     d2e:	20 93 86 06 	sts	0x0686, r18
     d32:	24 e0       	ldi	r18, 0x04	; 4
     d34:	20 93 85 06 	sts	0x0685, r18
     d38:	20 93 86 06 	sts	0x0686, r18
     d3c:	28 e0       	ldi	r18, 0x08	; 8
     d3e:	84 fd       	sbrc	r24, 4
     d40:	98 c0       	rjmp	.+304    	; 0xe72 <ht1632c_setup+0x4c2>
     d42:	20 93 86 06 	sts	0x0686, r18
     d46:	24 e0       	ldi	r18, 0x04	; 4
     d48:	20 93 85 06 	sts	0x0685, r18
     d4c:	20 93 86 06 	sts	0x0686, r18
     d50:	28 e0       	ldi	r18, 0x08	; 8
     d52:	83 fd       	sbrc	r24, 3
     d54:	98 c0       	rjmp	.+304    	; 0xe86 <ht1632c_setup+0x4d6>
     d56:	20 93 86 06 	sts	0x0686, r18
     d5a:	24 e0       	ldi	r18, 0x04	; 4
     d5c:	20 93 85 06 	sts	0x0685, r18
     d60:	20 93 86 06 	sts	0x0686, r18
     d64:	28 e0       	ldi	r18, 0x08	; 8
     d66:	82 fd       	sbrc	r24, 2
     d68:	98 c0       	rjmp	.+304    	; 0xe9a <ht1632c_setup+0x4ea>
     d6a:	20 93 86 06 	sts	0x0686, r18
     d6e:	94 e0       	ldi	r25, 0x04	; 4
     d70:	90 93 85 06 	sts	0x0685, r25
     d74:	90 93 86 06 	sts	0x0686, r25
     d78:	81 fd       	sbrc	r24, 1
     d7a:	98 c0       	rjmp	.+304    	; 0xeac <ht1632c_setup+0x4fc>
     d7c:	88 e0       	ldi	r24, 0x08	; 8
     d7e:	80 93 86 06 	sts	0x0686, r24
     d82:	84 e0       	ldi	r24, 0x04	; 4
     d84:	80 93 85 06 	sts	0x0685, r24
     d88:	80 93 86 06 	sts	0x0686, r24
     d8c:	98 e0       	ldi	r25, 0x08	; 8
     d8e:	90 93 86 06 	sts	0x0686, r25
     d92:	80 93 85 06 	sts	0x0685, r24
     d96:	21 e0       	ldi	r18, 0x01	; 1
     d98:	20 93 85 06 	sts	0x0685, r18
     d9c:	20 93 86 06 	sts	0x0686, r18
     da0:	80 93 86 06 	sts	0x0686, r24
     da4:	90 93 85 06 	sts	0x0685, r25
     da8:	80 93 85 06 	sts	0x0685, r24
     dac:	80 93 86 06 	sts	0x0686, r24
     db0:	90 93 86 06 	sts	0x0686, r25
     db4:	80 93 85 06 	sts	0x0685, r24
     db8:	80 93 86 06 	sts	0x0686, r24
     dbc:	90 93 86 06 	sts	0x0686, r25
     dc0:	80 93 85 06 	sts	0x0685, r24
     dc4:	80 93 86 06 	sts	0x0686, r24
     dc8:	90 93 85 06 	sts	0x0685, r25
     dcc:	80 93 85 06 	sts	0x0685, r24
     dd0:	80 93 86 06 	sts	0x0686, r24
     dd4:	90 93 86 06 	sts	0x0686, r25
     dd8:	80 93 85 06 	sts	0x0685, r24
     ddc:	80 93 86 06 	sts	0x0686, r24
     de0:	90 93 85 06 	sts	0x0685, r25
     de4:	80 93 85 06 	sts	0x0685, r24
     de8:	80 93 86 06 	sts	0x0686, r24
     dec:	90 93 86 06 	sts	0x0686, r25
     df0:	80 93 85 06 	sts	0x0685, r24
     df4:	80 93 86 06 	sts	0x0686, r24
     df8:	90 93 86 06 	sts	0x0686, r25
     dfc:	80 93 85 06 	sts	0x0685, r24
     e00:	80 93 86 06 	sts	0x0686, r24
     e04:	90 93 86 06 	sts	0x0686, r25
     e08:	80 93 85 06 	sts	0x0685, r24
     e0c:	80 93 86 06 	sts	0x0686, r24
     e10:	90 93 86 06 	sts	0x0686, r25
     e14:	80 93 85 06 	sts	0x0685, r24
     e18:	80 93 86 06 	sts	0x0686, r24
     e1c:	90 93 85 06 	sts	0x0685, r25
     e20:	80 93 85 06 	sts	0x0685, r24
     e24:	80 93 86 06 	sts	0x0686, r24
     e28:	90 93 86 06 	sts	0x0686, r25
     e2c:	80 93 85 06 	sts	0x0685, r24
     e30:	20 93 85 06 	sts	0x0685, r18
     e34:	08 95       	ret
     e36:	20 93 85 06 	sts	0x0685, r18
     e3a:	24 e0       	ldi	r18, 0x04	; 4
     e3c:	20 93 85 06 	sts	0x0685, r18
     e40:	20 93 86 06 	sts	0x0686, r18
     e44:	28 e0       	ldi	r18, 0x08	; 8
     e46:	86 ff       	sbrs	r24, 6
     e48:	68 cf       	rjmp	.-304    	; 0xd1a <ht1632c_setup+0x36a>
     e4a:	20 93 85 06 	sts	0x0685, r18
     e4e:	24 e0       	ldi	r18, 0x04	; 4
     e50:	20 93 85 06 	sts	0x0685, r18
     e54:	20 93 86 06 	sts	0x0686, r18
     e58:	28 e0       	ldi	r18, 0x08	; 8
     e5a:	85 ff       	sbrs	r24, 5
     e5c:	68 cf       	rjmp	.-304    	; 0xd2e <ht1632c_setup+0x37e>
     e5e:	20 93 85 06 	sts	0x0685, r18
     e62:	24 e0       	ldi	r18, 0x04	; 4
     e64:	20 93 85 06 	sts	0x0685, r18
     e68:	20 93 86 06 	sts	0x0686, r18
     e6c:	28 e0       	ldi	r18, 0x08	; 8
     e6e:	84 ff       	sbrs	r24, 4
     e70:	68 cf       	rjmp	.-304    	; 0xd42 <ht1632c_setup+0x392>
     e72:	20 93 85 06 	sts	0x0685, r18
     e76:	24 e0       	ldi	r18, 0x04	; 4
     e78:	20 93 85 06 	sts	0x0685, r18
     e7c:	20 93 86 06 	sts	0x0686, r18
     e80:	28 e0       	ldi	r18, 0x08	; 8
     e82:	83 ff       	sbrs	r24, 3
     e84:	68 cf       	rjmp	.-304    	; 0xd56 <ht1632c_setup+0x3a6>
     e86:	20 93 85 06 	sts	0x0685, r18
     e8a:	24 e0       	ldi	r18, 0x04	; 4
     e8c:	20 93 85 06 	sts	0x0685, r18
     e90:	20 93 86 06 	sts	0x0686, r18
     e94:	28 e0       	ldi	r18, 0x08	; 8
     e96:	82 ff       	sbrs	r24, 2
     e98:	68 cf       	rjmp	.-304    	; 0xd6a <ht1632c_setup+0x3ba>
     e9a:	20 93 85 06 	sts	0x0685, r18
     e9e:	94 e0       	ldi	r25, 0x04	; 4
     ea0:	90 93 85 06 	sts	0x0685, r25
     ea4:	90 93 86 06 	sts	0x0686, r25
     ea8:	81 ff       	sbrs	r24, 1
     eaa:	68 cf       	rjmp	.-304    	; 0xd7c <ht1632c_setup+0x3cc>
     eac:	88 e0       	ldi	r24, 0x08	; 8
     eae:	80 93 85 06 	sts	0x0685, r24
     eb2:	67 cf       	rjmp	.-306    	; 0xd82 <ht1632c_setup+0x3d2>
     eb4:	30 93 85 06 	sts	0x0685, r19
     eb8:	24 e0       	ldi	r18, 0x04	; 4
     eba:	20 93 85 06 	sts	0x0685, r18
     ebe:	20 93 86 06 	sts	0x0686, r18
     ec2:	28 e0       	ldi	r18, 0x08	; 8
     ec4:	87 fd       	sbrc	r24, 7
     ec6:	b7 cf       	rjmp	.-146    	; 0xe36 <ht1632c_setup+0x486>
     ec8:	1e cf       	rjmp	.-452    	; 0xd06 <ht1632c_setup+0x356>

00000eca <ht1632c_power_down>:
     eca:	e0 e8       	ldi	r30, 0x80	; 128
     ecc:	f6 e0       	ldi	r31, 0x06	; 6
     ece:	21 e0       	ldi	r18, 0x01	; 1
     ed0:	26 83       	std	Z+6, r18	; 0x06
     ed2:	84 e0       	ldi	r24, 0x04	; 4
     ed4:	86 83       	std	Z+6, r24	; 0x06
     ed6:	98 e0       	ldi	r25, 0x08	; 8
     ed8:	95 83       	std	Z+5, r25	; 0x05
     eda:	85 83       	std	Z+5, r24	; 0x05
     edc:	86 83       	std	Z+6, r24	; 0x06
     ede:	96 83       	std	Z+6, r25	; 0x06
     ee0:	85 83       	std	Z+5, r24	; 0x05
     ee2:	86 83       	std	Z+6, r24	; 0x06
     ee4:	96 83       	std	Z+6, r25	; 0x06
     ee6:	85 83       	std	Z+5, r24	; 0x05
     ee8:	86 83       	std	Z+6, r24	; 0x06
     eea:	96 83       	std	Z+6, r25	; 0x06
     eec:	85 83       	std	Z+5, r24	; 0x05
     eee:	86 83       	std	Z+6, r24	; 0x06
     ef0:	96 83       	std	Z+6, r25	; 0x06
     ef2:	85 83       	std	Z+5, r24	; 0x05
     ef4:	86 83       	std	Z+6, r24	; 0x06
     ef6:	96 83       	std	Z+6, r25	; 0x06
     ef8:	85 83       	std	Z+5, r24	; 0x05
     efa:	86 83       	std	Z+6, r24	; 0x06
     efc:	96 83       	std	Z+6, r25	; 0x06
     efe:	85 83       	std	Z+5, r24	; 0x05
     f00:	86 83       	std	Z+6, r24	; 0x06
     f02:	96 83       	std	Z+6, r25	; 0x06
     f04:	85 83       	std	Z+5, r24	; 0x05
     f06:	86 83       	std	Z+6, r24	; 0x06
     f08:	96 83       	std	Z+6, r25	; 0x06
     f0a:	85 83       	std	Z+5, r24	; 0x05
     f0c:	86 83       	std	Z+6, r24	; 0x06
     f0e:	95 83       	std	Z+5, r25	; 0x05
     f10:	85 83       	std	Z+5, r24	; 0x05
     f12:	86 83       	std	Z+6, r24	; 0x06
     f14:	96 83       	std	Z+6, r25	; 0x06
     f16:	85 83       	std	Z+5, r24	; 0x05
     f18:	86 83       	std	Z+6, r24	; 0x06
     f1a:	96 83       	std	Z+6, r25	; 0x06
     f1c:	85 83       	std	Z+5, r24	; 0x05
     f1e:	25 83       	std	Z+5, r18	; 0x05
     f20:	26 83       	std	Z+6, r18	; 0x06
     f22:	86 83       	std	Z+6, r24	; 0x06
     f24:	95 83       	std	Z+5, r25	; 0x05
     f26:	85 83       	std	Z+5, r24	; 0x05
     f28:	86 83       	std	Z+6, r24	; 0x06
     f2a:	96 83       	std	Z+6, r25	; 0x06
     f2c:	85 83       	std	Z+5, r24	; 0x05
     f2e:	86 83       	std	Z+6, r24	; 0x06
     f30:	96 83       	std	Z+6, r25	; 0x06
     f32:	85 83       	std	Z+5, r24	; 0x05
     f34:	86 83       	std	Z+6, r24	; 0x06
     f36:	96 83       	std	Z+6, r25	; 0x06
     f38:	85 83       	std	Z+5, r24	; 0x05
     f3a:	86 83       	std	Z+6, r24	; 0x06
     f3c:	96 83       	std	Z+6, r25	; 0x06
     f3e:	85 83       	std	Z+5, r24	; 0x05
     f40:	86 83       	std	Z+6, r24	; 0x06
     f42:	96 83       	std	Z+6, r25	; 0x06
     f44:	85 83       	std	Z+5, r24	; 0x05
     f46:	86 83       	std	Z+6, r24	; 0x06
     f48:	96 83       	std	Z+6, r25	; 0x06
     f4a:	85 83       	std	Z+5, r24	; 0x05
     f4c:	86 83       	std	Z+6, r24	; 0x06
     f4e:	96 83       	std	Z+6, r25	; 0x06
     f50:	85 83       	std	Z+5, r24	; 0x05
     f52:	86 83       	std	Z+6, r24	; 0x06
     f54:	96 83       	std	Z+6, r25	; 0x06
     f56:	85 83       	std	Z+5, r24	; 0x05
     f58:	86 83       	std	Z+6, r24	; 0x06
     f5a:	96 83       	std	Z+6, r25	; 0x06
     f5c:	85 83       	std	Z+5, r24	; 0x05
     f5e:	86 83       	std	Z+6, r24	; 0x06
     f60:	96 83       	std	Z+6, r25	; 0x06
     f62:	85 83       	std	Z+5, r24	; 0x05
     f64:	86 83       	std	Z+6, r24	; 0x06
     f66:	96 83       	std	Z+6, r25	; 0x06
     f68:	85 83       	std	Z+5, r24	; 0x05
     f6a:	25 83       	std	Z+5, r18	; 0x05
     f6c:	8f e0       	ldi	r24, 0x0F	; 15
     f6e:	82 83       	std	Z+2, r24	; 0x02
     f70:	88 e1       	ldi	r24, 0x18	; 24
     f72:	80 8b       	std	Z+16, r24	; 0x10
     f74:	81 8b       	std	Z+17, r24	; 0x11
     f76:	82 8b       	std	Z+18, r24	; 0x12
     f78:	83 8b       	std	Z+19, r24	; 0x13
     f7a:	08 95       	ret

00000f7c <ht1632c_set_brightness>:
     f7c:	87 fd       	sbrc	r24, 7
     f7e:	c3 c0       	rjmp	.+390    	; 0x1106 <ht1632c_set_brightness+0x18a>
     f80:	80 31       	cpi	r24, 0x10	; 16
     f82:	0c f0       	brlt	.+2      	; 0xf86 <ht1632c_set_brightness+0xa>
     f84:	8f e0       	ldi	r24, 0x0F	; 15
     f86:	80 6a       	ori	r24, 0xA0	; 160
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	94 60       	ori	r25, 0x04	; 4
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	21 e0       	ldi	r18, 0x01	; 1
     f92:	20 93 86 06 	sts	0x0686, r18
     f96:	24 e0       	ldi	r18, 0x04	; 4
     f98:	20 93 86 06 	sts	0x0686, r18
     f9c:	38 e0       	ldi	r19, 0x08	; 8
     f9e:	30 93 85 06 	sts	0x0685, r19
     fa2:	20 93 85 06 	sts	0x0685, r18
     fa6:	20 93 86 06 	sts	0x0686, r18
     faa:	30 93 86 06 	sts	0x0686, r19
     fae:	20 93 85 06 	sts	0x0685, r18
     fb2:	20 93 86 06 	sts	0x0686, r18
     fb6:	30 93 86 06 	sts	0x0686, r19
     fba:	20 93 85 06 	sts	0x0685, r18
     fbe:	20 93 86 06 	sts	0x0686, r18
     fc2:	90 fd       	sbrc	r25, 0
     fc4:	95 c0       	rjmp	.+298    	; 0x10f0 <ht1632c_set_brightness+0x174>
     fc6:	30 93 86 06 	sts	0x0686, r19
     fca:	24 e0       	ldi	r18, 0x04	; 4
     fcc:	20 93 85 06 	sts	0x0685, r18
     fd0:	20 93 86 06 	sts	0x0686, r18
     fd4:	28 e0       	ldi	r18, 0x08	; 8
     fd6:	87 fd       	sbrc	r24, 7
     fd8:	4c c0       	rjmp	.+152    	; 0x1072 <ht1632c_set_brightness+0xf6>
     fda:	20 93 86 06 	sts	0x0686, r18
     fde:	24 e0       	ldi	r18, 0x04	; 4
     fe0:	20 93 85 06 	sts	0x0685, r18
     fe4:	20 93 86 06 	sts	0x0686, r18
     fe8:	28 e0       	ldi	r18, 0x08	; 8
     fea:	86 fd       	sbrc	r24, 6
     fec:	4c c0       	rjmp	.+152    	; 0x1086 <ht1632c_set_brightness+0x10a>
     fee:	20 93 86 06 	sts	0x0686, r18
     ff2:	24 e0       	ldi	r18, 0x04	; 4
     ff4:	20 93 85 06 	sts	0x0685, r18
     ff8:	20 93 86 06 	sts	0x0686, r18
     ffc:	28 e0       	ldi	r18, 0x08	; 8
     ffe:	85 fd       	sbrc	r24, 5
    1000:	4c c0       	rjmp	.+152    	; 0x109a <ht1632c_set_brightness+0x11e>
    1002:	20 93 86 06 	sts	0x0686, r18
    1006:	24 e0       	ldi	r18, 0x04	; 4
    1008:	20 93 85 06 	sts	0x0685, r18
    100c:	20 93 86 06 	sts	0x0686, r18
    1010:	28 e0       	ldi	r18, 0x08	; 8
    1012:	84 fd       	sbrc	r24, 4
    1014:	4c c0       	rjmp	.+152    	; 0x10ae <ht1632c_set_brightness+0x132>
    1016:	20 93 86 06 	sts	0x0686, r18
    101a:	24 e0       	ldi	r18, 0x04	; 4
    101c:	20 93 85 06 	sts	0x0685, r18
    1020:	20 93 86 06 	sts	0x0686, r18
    1024:	28 e0       	ldi	r18, 0x08	; 8
    1026:	83 fd       	sbrc	r24, 3
    1028:	4c c0       	rjmp	.+152    	; 0x10c2 <ht1632c_set_brightness+0x146>
    102a:	20 93 86 06 	sts	0x0686, r18
    102e:	24 e0       	ldi	r18, 0x04	; 4
    1030:	20 93 85 06 	sts	0x0685, r18
    1034:	20 93 86 06 	sts	0x0686, r18
    1038:	28 e0       	ldi	r18, 0x08	; 8
    103a:	82 fd       	sbrc	r24, 2
    103c:	4c c0       	rjmp	.+152    	; 0x10d6 <ht1632c_set_brightness+0x15a>
    103e:	20 93 86 06 	sts	0x0686, r18
    1042:	94 e0       	ldi	r25, 0x04	; 4
    1044:	90 93 85 06 	sts	0x0685, r25
    1048:	90 93 86 06 	sts	0x0686, r25
    104c:	81 fd       	sbrc	r24, 1
    104e:	4c c0       	rjmp	.+152    	; 0x10e8 <ht1632c_set_brightness+0x16c>
    1050:	88 e0       	ldi	r24, 0x08	; 8
    1052:	80 93 86 06 	sts	0x0686, r24
    1056:	84 e0       	ldi	r24, 0x04	; 4
    1058:	80 93 85 06 	sts	0x0685, r24
    105c:	80 93 86 06 	sts	0x0686, r24
    1060:	98 e0       	ldi	r25, 0x08	; 8
    1062:	90 93 86 06 	sts	0x0686, r25
    1066:	80 93 85 06 	sts	0x0685, r24
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	80 93 85 06 	sts	0x0685, r24
    1070:	08 95       	ret
    1072:	20 93 85 06 	sts	0x0685, r18
    1076:	24 e0       	ldi	r18, 0x04	; 4
    1078:	20 93 85 06 	sts	0x0685, r18
    107c:	20 93 86 06 	sts	0x0686, r18
    1080:	28 e0       	ldi	r18, 0x08	; 8
    1082:	86 ff       	sbrs	r24, 6
    1084:	b4 cf       	rjmp	.-152    	; 0xfee <ht1632c_set_brightness+0x72>
    1086:	20 93 85 06 	sts	0x0685, r18
    108a:	24 e0       	ldi	r18, 0x04	; 4
    108c:	20 93 85 06 	sts	0x0685, r18
    1090:	20 93 86 06 	sts	0x0686, r18
    1094:	28 e0       	ldi	r18, 0x08	; 8
    1096:	85 ff       	sbrs	r24, 5
    1098:	b4 cf       	rjmp	.-152    	; 0x1002 <ht1632c_set_brightness+0x86>
    109a:	20 93 85 06 	sts	0x0685, r18
    109e:	24 e0       	ldi	r18, 0x04	; 4
    10a0:	20 93 85 06 	sts	0x0685, r18
    10a4:	20 93 86 06 	sts	0x0686, r18
    10a8:	28 e0       	ldi	r18, 0x08	; 8
    10aa:	84 ff       	sbrs	r24, 4
    10ac:	b4 cf       	rjmp	.-152    	; 0x1016 <ht1632c_set_brightness+0x9a>
    10ae:	20 93 85 06 	sts	0x0685, r18
    10b2:	24 e0       	ldi	r18, 0x04	; 4
    10b4:	20 93 85 06 	sts	0x0685, r18
    10b8:	20 93 86 06 	sts	0x0686, r18
    10bc:	28 e0       	ldi	r18, 0x08	; 8
    10be:	83 ff       	sbrs	r24, 3
    10c0:	b4 cf       	rjmp	.-152    	; 0x102a <ht1632c_set_brightness+0xae>
    10c2:	20 93 85 06 	sts	0x0685, r18
    10c6:	24 e0       	ldi	r18, 0x04	; 4
    10c8:	20 93 85 06 	sts	0x0685, r18
    10cc:	20 93 86 06 	sts	0x0686, r18
    10d0:	28 e0       	ldi	r18, 0x08	; 8
    10d2:	82 ff       	sbrs	r24, 2
    10d4:	b4 cf       	rjmp	.-152    	; 0x103e <ht1632c_set_brightness+0xc2>
    10d6:	20 93 85 06 	sts	0x0685, r18
    10da:	94 e0       	ldi	r25, 0x04	; 4
    10dc:	90 93 85 06 	sts	0x0685, r25
    10e0:	90 93 86 06 	sts	0x0686, r25
    10e4:	81 ff       	sbrs	r24, 1
    10e6:	b4 cf       	rjmp	.-152    	; 0x1050 <ht1632c_set_brightness+0xd4>
    10e8:	88 e0       	ldi	r24, 0x08	; 8
    10ea:	80 93 85 06 	sts	0x0685, r24
    10ee:	b3 cf       	rjmp	.-154    	; 0x1056 <ht1632c_set_brightness+0xda>
    10f0:	30 93 85 06 	sts	0x0685, r19
    10f4:	24 e0       	ldi	r18, 0x04	; 4
    10f6:	20 93 85 06 	sts	0x0685, r18
    10fa:	20 93 86 06 	sts	0x0686, r18
    10fe:	28 e0       	ldi	r18, 0x08	; 8
    1100:	87 fd       	sbrc	r24, 7
    1102:	b7 cf       	rjmp	.-146    	; 0x1072 <ht1632c_set_brightness+0xf6>
    1104:	6a cf       	rjmp	.-300    	; 0xfda <ht1632c_set_brightness+0x5e>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	3b cf       	rjmp	.-394    	; 0xf80 <ht1632c_set_brightness+0x4>

0000110a <ht1632c_set_pixel>:
    110a:	fc 01       	movw	r30, r24
    110c:	f6 95       	lsr	r31
    110e:	e7 95       	ror	r30
    1110:	f6 95       	lsr	r31
    1112:	e7 95       	ror	r30
    1114:	f6 95       	lsr	r31
    1116:	e7 95       	ror	r30
    1118:	ef 5c       	subi	r30, 0xCF	; 207
    111a:	f9 4c       	sbci	r31, 0xC9	; 201
    111c:	87 70       	andi	r24, 0x07	; 7
    111e:	99 27       	eor	r25, r25
    1120:	21 e0       	ldi	r18, 0x01	; 1
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <ht1632c_set_pixel+0x1e>
    1126:	22 0f       	add	r18, r18
    1128:	8a 95       	dec	r24
    112a:	ea f7       	brpl	.-6      	; 0x1126 <ht1632c_set_pixel+0x1c>
    112c:	80 81       	ld	r24, Z
    112e:	82 2b       	or	r24, r18
    1130:	80 83       	st	Z, r24
    1132:	08 95       	ret

00001134 <ht1632c_clr_pixel>:
    1134:	fc 01       	movw	r30, r24
    1136:	f6 95       	lsr	r31
    1138:	e7 95       	ror	r30
    113a:	f6 95       	lsr	r31
    113c:	e7 95       	ror	r30
    113e:	f6 95       	lsr	r31
    1140:	e7 95       	ror	r30
    1142:	ef 5c       	subi	r30, 0xCF	; 207
    1144:	f9 4c       	sbci	r31, 0xC9	; 201
    1146:	87 70       	andi	r24, 0x07	; 7
    1148:	99 27       	eor	r25, r25
    114a:	21 e0       	ldi	r18, 0x01	; 1
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <ht1632c_clr_pixel+0x1e>
    1150:	22 0f       	add	r18, r18
    1152:	8a 95       	dec	r24
    1154:	ea f7       	brpl	.-6      	; 0x1150 <ht1632c_clr_pixel+0x1c>
    1156:	20 95       	com	r18
    1158:	80 81       	ld	r24, Z
    115a:	28 23       	and	r18, r24
    115c:	20 83       	st	Z, r18
    115e:	08 95       	ret

00001160 <ht1632c_clear_screen>:
    1160:	80 e2       	ldi	r24, 0x20	; 32
    1162:	e1 e3       	ldi	r30, 0x31	; 49
    1164:	f6 e3       	ldi	r31, 0x36	; 54
    1166:	df 01       	movw	r26, r30
    1168:	1d 92       	st	X+, r1
    116a:	8a 95       	dec	r24
    116c:	e9 f7       	brne	.-6      	; 0x1168 <ht1632c_clear_screen+0x8>
    116e:	0c 94 98 14 	jmp	0x2930	; 0x2930 <display_refresh_screen>

00001172 <ht1632c_refresh_screen>:
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	80 93 86 06 	sts	0x0686, r24
    1178:	84 e0       	ldi	r24, 0x04	; 4
    117a:	80 93 86 06 	sts	0x0686, r24
    117e:	98 e0       	ldi	r25, 0x08	; 8
    1180:	90 93 85 06 	sts	0x0685, r25
    1184:	80 93 85 06 	sts	0x0685, r24
    1188:	80 93 86 06 	sts	0x0686, r24
    118c:	90 93 86 06 	sts	0x0686, r25
    1190:	80 93 85 06 	sts	0x0685, r24
    1194:	80 93 86 06 	sts	0x0686, r24
    1198:	90 93 85 06 	sts	0x0685, r25
    119c:	80 93 85 06 	sts	0x0685, r24
    11a0:	80 93 86 06 	sts	0x0686, r24
    11a4:	90 93 86 06 	sts	0x0686, r25
    11a8:	80 93 85 06 	sts	0x0685, r24
    11ac:	80 93 86 06 	sts	0x0686, r24
    11b0:	90 93 86 06 	sts	0x0686, r25
    11b4:	80 93 85 06 	sts	0x0685, r24
    11b8:	80 93 86 06 	sts	0x0686, r24
    11bc:	90 93 86 06 	sts	0x0686, r25
    11c0:	80 93 85 06 	sts	0x0685, r24
    11c4:	80 93 86 06 	sts	0x0686, r24
    11c8:	90 93 86 06 	sts	0x0686, r25
    11cc:	80 93 85 06 	sts	0x0685, r24
    11d0:	80 93 86 06 	sts	0x0686, r24
    11d4:	90 93 86 06 	sts	0x0686, r25
    11d8:	80 93 85 06 	sts	0x0685, r24
    11dc:	80 93 86 06 	sts	0x0686, r24
    11e0:	90 93 86 06 	sts	0x0686, r25
    11e4:	80 93 85 06 	sts	0x0685, r24
    11e8:	80 93 86 06 	sts	0x0686, r24
    11ec:	90 93 86 06 	sts	0x0686, r25
    11f0:	80 93 85 06 	sts	0x0685, r24
    11f4:	e2 e3       	ldi	r30, 0x32	; 50
    11f6:	f6 e3       	ldi	r31, 0x36	; 54
    11f8:	24 e0       	ldi	r18, 0x04	; 4
    11fa:	38 e0       	ldi	r19, 0x08	; 8
    11fc:	7a c0       	rjmp	.+244    	; 0x12f2 <ht1632c_refresh_screen+0x180>
    11fe:	30 93 86 06 	sts	0x0686, r19
    1202:	20 93 85 06 	sts	0x0685, r18
    1206:	20 93 86 06 	sts	0x0686, r18
    120a:	95 fd       	sbrc	r25, 5
    120c:	8e c0       	rjmp	.+284    	; 0x132a <ht1632c_refresh_screen+0x1b8>
    120e:	30 93 86 06 	sts	0x0686, r19
    1212:	20 93 85 06 	sts	0x0685, r18
    1216:	20 93 86 06 	sts	0x0686, r18
    121a:	94 fd       	sbrc	r25, 4
    121c:	8e c0       	rjmp	.+284    	; 0x133a <ht1632c_refresh_screen+0x1c8>
    121e:	30 93 86 06 	sts	0x0686, r19
    1222:	20 93 85 06 	sts	0x0685, r18
    1226:	20 93 86 06 	sts	0x0686, r18
    122a:	93 fd       	sbrc	r25, 3
    122c:	8e c0       	rjmp	.+284    	; 0x134a <ht1632c_refresh_screen+0x1d8>
    122e:	30 93 86 06 	sts	0x0686, r19
    1232:	20 93 85 06 	sts	0x0685, r18
    1236:	20 93 86 06 	sts	0x0686, r18
    123a:	92 fd       	sbrc	r25, 2
    123c:	8e c0       	rjmp	.+284    	; 0x135a <ht1632c_refresh_screen+0x1e8>
    123e:	30 93 86 06 	sts	0x0686, r19
    1242:	20 93 85 06 	sts	0x0685, r18
    1246:	20 93 86 06 	sts	0x0686, r18
    124a:	91 fd       	sbrc	r25, 1
    124c:	8e c0       	rjmp	.+284    	; 0x136a <ht1632c_refresh_screen+0x1f8>
    124e:	30 93 86 06 	sts	0x0686, r19
    1252:	20 93 85 06 	sts	0x0685, r18
    1256:	20 93 86 06 	sts	0x0686, r18
    125a:	90 fd       	sbrc	r25, 0
    125c:	8e c0       	rjmp	.+284    	; 0x137a <ht1632c_refresh_screen+0x208>
    125e:	30 93 86 06 	sts	0x0686, r19
    1262:	20 93 85 06 	sts	0x0685, r18
    1266:	20 93 86 06 	sts	0x0686, r18
    126a:	87 fd       	sbrc	r24, 7
    126c:	8e c0       	rjmp	.+284    	; 0x138a <ht1632c_refresh_screen+0x218>
    126e:	30 93 86 06 	sts	0x0686, r19
    1272:	20 93 85 06 	sts	0x0685, r18
    1276:	20 93 86 06 	sts	0x0686, r18
    127a:	86 fd       	sbrc	r24, 6
    127c:	8e c0       	rjmp	.+284    	; 0x139a <ht1632c_refresh_screen+0x228>
    127e:	30 93 86 06 	sts	0x0686, r19
    1282:	20 93 85 06 	sts	0x0685, r18
    1286:	20 93 86 06 	sts	0x0686, r18
    128a:	85 fd       	sbrc	r24, 5
    128c:	8e c0       	rjmp	.+284    	; 0x13aa <ht1632c_refresh_screen+0x238>
    128e:	30 93 86 06 	sts	0x0686, r19
    1292:	20 93 85 06 	sts	0x0685, r18
    1296:	20 93 86 06 	sts	0x0686, r18
    129a:	84 fd       	sbrc	r24, 4
    129c:	8e c0       	rjmp	.+284    	; 0x13ba <ht1632c_refresh_screen+0x248>
    129e:	30 93 86 06 	sts	0x0686, r19
    12a2:	20 93 85 06 	sts	0x0685, r18
    12a6:	20 93 86 06 	sts	0x0686, r18
    12aa:	83 fd       	sbrc	r24, 3
    12ac:	8e c0       	rjmp	.+284    	; 0x13ca <ht1632c_refresh_screen+0x258>
    12ae:	30 93 86 06 	sts	0x0686, r19
    12b2:	20 93 85 06 	sts	0x0685, r18
    12b6:	20 93 86 06 	sts	0x0686, r18
    12ba:	82 fd       	sbrc	r24, 2
    12bc:	8e c0       	rjmp	.+284    	; 0x13da <ht1632c_refresh_screen+0x268>
    12be:	30 93 86 06 	sts	0x0686, r19
    12c2:	20 93 85 06 	sts	0x0685, r18
    12c6:	20 93 86 06 	sts	0x0686, r18
    12ca:	81 fd       	sbrc	r24, 1
    12cc:	8e c0       	rjmp	.+284    	; 0x13ea <ht1632c_refresh_screen+0x278>
    12ce:	30 93 86 06 	sts	0x0686, r19
    12d2:	20 93 85 06 	sts	0x0685, r18
    12d6:	20 93 86 06 	sts	0x0686, r18
    12da:	80 fd       	sbrc	r24, 0
    12dc:	8e c0       	rjmp	.+284    	; 0x13fa <ht1632c_refresh_screen+0x288>
    12de:	30 93 86 06 	sts	0x0686, r19
    12e2:	20 93 85 06 	sts	0x0685, r18
    12e6:	32 96       	adiw	r30, 0x02	; 2
    12e8:	86 e3       	ldi	r24, 0x36	; 54
    12ea:	e2 35       	cpi	r30, 0x52	; 82
    12ec:	f8 07       	cpc	r31, r24
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <ht1632c_refresh_screen+0x180>
    12f0:	8e c0       	rjmp	.+284    	; 0x140e <ht1632c_refresh_screen+0x29c>
    12f2:	df 01       	movw	r26, r30
    12f4:	11 97       	sbiw	r26, 0x01	; 1
    12f6:	8c 91       	ld	r24, X
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	98 2f       	mov	r25, r24
    12fc:	88 27       	eor	r24, r24
    12fe:	40 81       	ld	r20, Z
    1300:	84 2b       	or	r24, r20
    1302:	20 93 86 06 	sts	0x0686, r18
    1306:	97 fd       	sbrc	r25, 7
    1308:	86 c0       	rjmp	.+268    	; 0x1416 <ht1632c_refresh_screen+0x2a4>
    130a:	30 93 86 06 	sts	0x0686, r19
    130e:	20 93 85 06 	sts	0x0685, r18
    1312:	20 93 86 06 	sts	0x0686, r18
    1316:	96 ff       	sbrs	r25, 6
    1318:	72 cf       	rjmp	.-284    	; 0x11fe <ht1632c_refresh_screen+0x8c>
    131a:	30 93 85 06 	sts	0x0685, r19
    131e:	20 93 85 06 	sts	0x0685, r18
    1322:	20 93 86 06 	sts	0x0686, r18
    1326:	95 ff       	sbrs	r25, 5
    1328:	72 cf       	rjmp	.-284    	; 0x120e <ht1632c_refresh_screen+0x9c>
    132a:	30 93 85 06 	sts	0x0685, r19
    132e:	20 93 85 06 	sts	0x0685, r18
    1332:	20 93 86 06 	sts	0x0686, r18
    1336:	94 ff       	sbrs	r25, 4
    1338:	72 cf       	rjmp	.-284    	; 0x121e <ht1632c_refresh_screen+0xac>
    133a:	30 93 85 06 	sts	0x0685, r19
    133e:	20 93 85 06 	sts	0x0685, r18
    1342:	20 93 86 06 	sts	0x0686, r18
    1346:	93 ff       	sbrs	r25, 3
    1348:	72 cf       	rjmp	.-284    	; 0x122e <ht1632c_refresh_screen+0xbc>
    134a:	30 93 85 06 	sts	0x0685, r19
    134e:	20 93 85 06 	sts	0x0685, r18
    1352:	20 93 86 06 	sts	0x0686, r18
    1356:	92 ff       	sbrs	r25, 2
    1358:	72 cf       	rjmp	.-284    	; 0x123e <ht1632c_refresh_screen+0xcc>
    135a:	30 93 85 06 	sts	0x0685, r19
    135e:	20 93 85 06 	sts	0x0685, r18
    1362:	20 93 86 06 	sts	0x0686, r18
    1366:	91 ff       	sbrs	r25, 1
    1368:	72 cf       	rjmp	.-284    	; 0x124e <ht1632c_refresh_screen+0xdc>
    136a:	30 93 85 06 	sts	0x0685, r19
    136e:	20 93 85 06 	sts	0x0685, r18
    1372:	20 93 86 06 	sts	0x0686, r18
    1376:	90 ff       	sbrs	r25, 0
    1378:	72 cf       	rjmp	.-284    	; 0x125e <ht1632c_refresh_screen+0xec>
    137a:	30 93 85 06 	sts	0x0685, r19
    137e:	20 93 85 06 	sts	0x0685, r18
    1382:	20 93 86 06 	sts	0x0686, r18
    1386:	87 ff       	sbrs	r24, 7
    1388:	72 cf       	rjmp	.-284    	; 0x126e <ht1632c_refresh_screen+0xfc>
    138a:	30 93 85 06 	sts	0x0685, r19
    138e:	20 93 85 06 	sts	0x0685, r18
    1392:	20 93 86 06 	sts	0x0686, r18
    1396:	86 ff       	sbrs	r24, 6
    1398:	72 cf       	rjmp	.-284    	; 0x127e <ht1632c_refresh_screen+0x10c>
    139a:	30 93 85 06 	sts	0x0685, r19
    139e:	20 93 85 06 	sts	0x0685, r18
    13a2:	20 93 86 06 	sts	0x0686, r18
    13a6:	85 ff       	sbrs	r24, 5
    13a8:	72 cf       	rjmp	.-284    	; 0x128e <ht1632c_refresh_screen+0x11c>
    13aa:	30 93 85 06 	sts	0x0685, r19
    13ae:	20 93 85 06 	sts	0x0685, r18
    13b2:	20 93 86 06 	sts	0x0686, r18
    13b6:	84 ff       	sbrs	r24, 4
    13b8:	72 cf       	rjmp	.-284    	; 0x129e <ht1632c_refresh_screen+0x12c>
    13ba:	30 93 85 06 	sts	0x0685, r19
    13be:	20 93 85 06 	sts	0x0685, r18
    13c2:	20 93 86 06 	sts	0x0686, r18
    13c6:	83 ff       	sbrs	r24, 3
    13c8:	72 cf       	rjmp	.-284    	; 0x12ae <ht1632c_refresh_screen+0x13c>
    13ca:	30 93 85 06 	sts	0x0685, r19
    13ce:	20 93 85 06 	sts	0x0685, r18
    13d2:	20 93 86 06 	sts	0x0686, r18
    13d6:	82 ff       	sbrs	r24, 2
    13d8:	72 cf       	rjmp	.-284    	; 0x12be <ht1632c_refresh_screen+0x14c>
    13da:	30 93 85 06 	sts	0x0685, r19
    13de:	20 93 85 06 	sts	0x0685, r18
    13e2:	20 93 86 06 	sts	0x0686, r18
    13e6:	81 ff       	sbrs	r24, 1
    13e8:	72 cf       	rjmp	.-284    	; 0x12ce <ht1632c_refresh_screen+0x15c>
    13ea:	30 93 85 06 	sts	0x0685, r19
    13ee:	20 93 85 06 	sts	0x0685, r18
    13f2:	20 93 86 06 	sts	0x0686, r18
    13f6:	80 ff       	sbrs	r24, 0
    13f8:	72 cf       	rjmp	.-284    	; 0x12de <ht1632c_refresh_screen+0x16c>
    13fa:	30 93 85 06 	sts	0x0685, r19
    13fe:	20 93 85 06 	sts	0x0685, r18
    1402:	32 96       	adiw	r30, 0x02	; 2
    1404:	86 e3       	ldi	r24, 0x36	; 54
    1406:	e2 35       	cpi	r30, 0x52	; 82
    1408:	f8 07       	cpc	r31, r24
    140a:	09 f0       	breq	.+2      	; 0x140e <ht1632c_refresh_screen+0x29c>
    140c:	72 cf       	rjmp	.-284    	; 0x12f2 <ht1632c_refresh_screen+0x180>
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	80 93 85 06 	sts	0x0685, r24
    1414:	08 95       	ret
    1416:	30 93 85 06 	sts	0x0685, r19
    141a:	79 cf       	rjmp	.-270    	; 0x130e <ht1632c_refresh_screen+0x19c>

0000141c <ht1632c_write_command>:
void ht1632c_write_command(uint8_t cmd) 
{
	uint16_t data = 0;
	data = HT1632_COMMAND;
	data <<= 8;
	data |= cmd;
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	94 60       	ori	r25, 0x04	; 4
	data <<= 1;
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
		
	PORTE.OUTCLR = HT1632C_CS;
    1424:	21 e0       	ldi	r18, 0x01	; 1
    1426:	20 93 86 06 	sts	0x0686, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    142a:	24 e0       	ldi	r18, 0x04	; 4
    142c:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
    1430:	38 e0       	ldi	r19, 0x08	; 8
    1432:	30 93 85 06 	sts	0x0685, r19
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
		}
		PORTE.OUTSET = HT1632C_WR;
    1436:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    143a:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
    143e:	30 93 86 06 	sts	0x0686, r19
		}
		PORTE.OUTSET = HT1632C_WR;
    1442:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    1446:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
    144a:	30 93 86 06 	sts	0x0686, r19
		}
		PORTE.OUTSET = HT1632C_WR;
    144e:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    1452:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
    1456:	90 fd       	sbrc	r25, 0
    1458:	95 c0       	rjmp	.+298    	; 0x1584 <ht1632c_write_command+0x168>
			PORTE.OUTSET = HT1632C_DATA;
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
    145a:	30 93 86 06 	sts	0x0686, r19
		}
		PORTE.OUTSET = HT1632C_WR;
    145e:	24 e0       	ldi	r18, 0x04	; 4
    1460:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    1464:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
    1468:	28 e0       	ldi	r18, 0x08	; 8

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
		if (data & _BV(i-1)) {
    146a:	87 fd       	sbrc	r24, 7
    146c:	4c c0       	rjmp	.+152    	; 0x1506 <ht1632c_write_command+0xea>
			PORTE.OUTSET = HT1632C_DATA;
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
    146e:	20 93 86 06 	sts	0x0686, r18
		}
		PORTE.OUTSET = HT1632C_WR;
    1472:	24 e0       	ldi	r18, 0x04	; 4
    1474:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    1478:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
    147c:	28 e0       	ldi	r18, 0x08	; 8

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
		if (data & _BV(i-1)) {
    147e:	86 fd       	sbrc	r24, 6
    1480:	4c c0       	rjmp	.+152    	; 0x151a <ht1632c_write_command+0xfe>
			PORTE.OUTSET = HT1632C_DATA;
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
    1482:	20 93 86 06 	sts	0x0686, r18
		}
		PORTE.OUTSET = HT1632C_WR;
    1486:	24 e0       	ldi	r18, 0x04	; 4
    1488:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    148c:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
    1490:	28 e0       	ldi	r18, 0x08	; 8

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
		if (data & _BV(i-1)) {
    1492:	85 fd       	sbrc	r24, 5
    1494:	4c c0       	rjmp	.+152    	; 0x152e <ht1632c_write_command+0x112>
			PORTE.OUTSET = HT1632C_DATA;
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
    1496:	20 93 86 06 	sts	0x0686, r18
		}
		PORTE.OUTSET = HT1632C_WR;
    149a:	24 e0       	ldi	r18, 0x04	; 4
    149c:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    14a0:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
    14a4:	28 e0       	ldi	r18, 0x08	; 8

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
		if (data & _BV(i-1)) {
    14a6:	84 fd       	sbrc	r24, 4
    14a8:	4c c0       	rjmp	.+152    	; 0x1542 <ht1632c_write_command+0x126>
			PORTE.OUTSET = HT1632C_DATA;
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
    14aa:	20 93 86 06 	sts	0x0686, r18
		}
		PORTE.OUTSET = HT1632C_WR;
    14ae:	24 e0       	ldi	r18, 0x04	; 4
    14b0:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    14b4:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
    14b8:	28 e0       	ldi	r18, 0x08	; 8

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
		if (data & _BV(i-1)) {
    14ba:	83 fd       	sbrc	r24, 3
    14bc:	4c c0       	rjmp	.+152    	; 0x1556 <ht1632c_write_command+0x13a>
			PORTE.OUTSET = HT1632C_DATA;
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
    14be:	20 93 86 06 	sts	0x0686, r18
		}
		PORTE.OUTSET = HT1632C_WR;
    14c2:	24 e0       	ldi	r18, 0x04	; 4
    14c4:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    14c8:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
    14cc:	28 e0       	ldi	r18, 0x08	; 8

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
		if (data & _BV(i-1)) {
    14ce:	82 fd       	sbrc	r24, 2
    14d0:	4c c0       	rjmp	.+152    	; 0x156a <ht1632c_write_command+0x14e>
			PORTE.OUTSET = HT1632C_DATA;
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
    14d2:	20 93 86 06 	sts	0x0686, r18
		}
		PORTE.OUTSET = HT1632C_WR;
    14d6:	94 e0       	ldi	r25, 0x04	; 4
    14d8:	90 93 85 06 	sts	0x0685, r25
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    14dc:	90 93 86 06 	sts	0x0686, r25
		if (data & _BV(i-1)) {
    14e0:	81 fd       	sbrc	r24, 1
    14e2:	4c c0       	rjmp	.+152    	; 0x157c <ht1632c_write_command+0x160>
			PORTE.OUTSET = HT1632C_DATA;
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
    14e4:	88 e0       	ldi	r24, 0x08	; 8
    14e6:	80 93 86 06 	sts	0x0686, r24
		}
		PORTE.OUTSET = HT1632C_WR;
    14ea:	84 e0       	ldi	r24, 0x04	; 4
    14ec:	80 93 85 06 	sts	0x0685, r24
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    14f0:	80 93 86 06 	sts	0x0686, r24
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
    14f4:	98 e0       	ldi	r25, 0x08	; 8
    14f6:	90 93 86 06 	sts	0x0686, r25
		}
		PORTE.OUTSET = HT1632C_WR;
    14fa:	80 93 85 06 	sts	0x0685, r24
	data |= cmd;
	data <<= 1;
		
	PORTE.OUTCLR = HT1632C_CS;
	ht1632c_write_data(data, 12);
	PORTE.OUTSET = HT1632C_CS;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 93 85 06 	sts	0x0685, r24
    1504:	08 95       	ret
void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
    1506:	20 93 85 06 	sts	0x0685, r18
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
		}
		PORTE.OUTSET = HT1632C_WR;
    150a:	24 e0       	ldi	r18, 0x04	; 4
    150c:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    1510:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
    1514:	28 e0       	ldi	r18, 0x08	; 8

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
		if (data & _BV(i-1)) {
    1516:	86 ff       	sbrs	r24, 6
    1518:	b4 cf       	rjmp	.-152    	; 0x1482 <ht1632c_write_command+0x66>
			PORTE.OUTSET = HT1632C_DATA;
    151a:	20 93 85 06 	sts	0x0685, r18
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
		}
		PORTE.OUTSET = HT1632C_WR;
    151e:	24 e0       	ldi	r18, 0x04	; 4
    1520:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    1524:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
    1528:	28 e0       	ldi	r18, 0x08	; 8

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
		if (data & _BV(i-1)) {
    152a:	85 ff       	sbrs	r24, 5
    152c:	b4 cf       	rjmp	.-152    	; 0x1496 <ht1632c_write_command+0x7a>
			PORTE.OUTSET = HT1632C_DATA;
    152e:	20 93 85 06 	sts	0x0685, r18
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
		}
		PORTE.OUTSET = HT1632C_WR;
    1532:	24 e0       	ldi	r18, 0x04	; 4
    1534:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    1538:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
    153c:	28 e0       	ldi	r18, 0x08	; 8

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
		if (data & _BV(i-1)) {
    153e:	84 ff       	sbrs	r24, 4
    1540:	b4 cf       	rjmp	.-152    	; 0x14aa <ht1632c_write_command+0x8e>
			PORTE.OUTSET = HT1632C_DATA;
    1542:	20 93 85 06 	sts	0x0685, r18
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
		}
		PORTE.OUTSET = HT1632C_WR;
    1546:	24 e0       	ldi	r18, 0x04	; 4
    1548:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    154c:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
    1550:	28 e0       	ldi	r18, 0x08	; 8

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
		if (data & _BV(i-1)) {
    1552:	83 ff       	sbrs	r24, 3
    1554:	b4 cf       	rjmp	.-152    	; 0x14be <ht1632c_write_command+0xa2>
			PORTE.OUTSET = HT1632C_DATA;
    1556:	20 93 85 06 	sts	0x0685, r18
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
		}
		PORTE.OUTSET = HT1632C_WR;
    155a:	24 e0       	ldi	r18, 0x04	; 4
    155c:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    1560:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
    1564:	28 e0       	ldi	r18, 0x08	; 8

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
		if (data & _BV(i-1)) {
    1566:	82 ff       	sbrs	r24, 2
    1568:	b4 cf       	rjmp	.-152    	; 0x14d2 <ht1632c_write_command+0xb6>
			PORTE.OUTSET = HT1632C_DATA;
    156a:	20 93 85 06 	sts	0x0685, r18
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
		}
		PORTE.OUTSET = HT1632C_WR;
    156e:	94 e0       	ldi	r25, 0x04	; 4
    1570:	90 93 85 06 	sts	0x0685, r25
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    1574:	90 93 86 06 	sts	0x0686, r25
		if (data & _BV(i-1)) {
    1578:	81 ff       	sbrs	r24, 1
    157a:	b4 cf       	rjmp	.-152    	; 0x14e4 <ht1632c_write_command+0xc8>
			PORTE.OUTSET = HT1632C_DATA;
    157c:	88 e0       	ldi	r24, 0x08	; 8
    157e:	80 93 85 06 	sts	0x0685, r24
    1582:	b3 cf       	rjmp	.-154    	; 0x14ea <ht1632c_write_command+0xce>
    1584:	30 93 85 06 	sts	0x0685, r19
		} else {
			PORTE.OUTCLR = HT1632C_DATA;
		}
		PORTE.OUTSET = HT1632C_WR;
    1588:	24 e0       	ldi	r18, 0x04	; 4
    158a:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
    158e:	20 93 86 06 	sts	0x0686, r18
		if (data & _BV(i-1)) {
			PORTE.OUTSET = HT1632C_DATA;
    1592:	28 e0       	ldi	r18, 0x08	; 8

void ht1632c_write_data(uint16_t data, uint8_t bits) 
{
	for (uint8_t i = bits; i > 0; i--) {
		PORTE.OUTCLR = HT1632C_WR;
		if (data & _BV(i-1)) {
    1594:	87 fd       	sbrc	r24, 7
    1596:	b7 cf       	rjmp	.-146    	; 0x1506 <ht1632c_write_command+0xea>
    1598:	6a cf       	rjmp	.-300    	; 0x146e <ht1632c_write_command+0x52>

0000159a <btn_setup>:
void btn_top_setup(void) 
{	
	PORTC.DIRCLR   = TOP_BUTTON;
	PORTC.PIN2CTRL |= PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
	PORTC.INT0MASK |= TOP_BUTTON;
	PORTC.INTCTRL  |= PORT_INT0LVL_HI_gc;
    159a:	90 ee       	ldi	r25, 0xE0	; 224
    159c:	90 93 02 06 	sts	0x0602, r25
    15a0:	91 e0       	ldi	r25, 0x01	; 1
    15a2:	90 93 22 06 	sts	0x0622, r25
    15a6:	90 91 15 06 	lds	r25, 0x0615
    15aa:	9a 61       	ori	r25, 0x1A	; 26
    15ac:	90 93 15 06 	sts	0x0615, r25
    15b0:	90 91 16 06 	lds	r25, 0x0616
    15b4:	9a 61       	ori	r25, 0x1A	; 26
    15b6:	90 93 16 06 	sts	0x0616, r25
    15ba:	90 91 17 06 	lds	r25, 0x0617
    15be:	9a 61       	ori	r25, 0x1A	; 26
    15c0:	90 93 17 06 	sts	0x0617, r25
    15c4:	90 91 30 06 	lds	r25, 0x0630
    15c8:	9a 61       	ori	r25, 0x1A	; 26
    15ca:	90 93 30 06 	sts	0x0630, r25
    15ce:	81 11       	cpse	r24, r1
    15d0:	15 c0       	rjmp	.+42     	; 0x15fc <btn_setup+0x62>
    15d2:	80 91 0a 06 	lds	r24, 0x060A
    15d6:	8f 71       	andi	r24, 0x1F	; 31
    15d8:	80 93 0a 06 	sts	0x060A, r24
    15dc:	80 91 2a 06 	lds	r24, 0x062A
    15e0:	8e 7f       	andi	r24, 0xFE	; 254
    15e2:	80 93 2a 06 	sts	0x062A, r24
    15e6:	80 91 09 06 	lds	r24, 0x0609
    15ea:	8c 7f       	andi	r24, 0xFC	; 252
    15ec:	80 93 09 06 	sts	0x0609, r24
    15f0:	80 91 29 06 	lds	r24, 0x0629
    15f4:	8c 7f       	andi	r24, 0xFC	; 252
    15f6:	80 93 29 06 	sts	0x0629, r24
    15fa:	08 95       	ret
    15fc:	80 91 0a 06 	lds	r24, 0x060A
    1600:	80 6e       	ori	r24, 0xE0	; 224
    1602:	80 93 0a 06 	sts	0x060A, r24
    1606:	80 91 2a 06 	lds	r24, 0x062A
    160a:	81 60       	ori	r24, 0x01	; 1
    160c:	80 93 2a 06 	sts	0x062A, r24
    1610:	80 91 09 06 	lds	r24, 0x0609
    1614:	83 60       	ori	r24, 0x03	; 3
    1616:	80 93 09 06 	sts	0x0609, r24
    161a:	80 91 29 06 	lds	r24, 0x0629
    161e:	83 60       	ori	r24, 0x03	; 3
    1620:	80 93 29 06 	sts	0x0629, r24
    1624:	08 95       	ret

00001626 <btn_si114x_enable_interrupt>:
    1626:	e0 e0       	ldi	r30, 0x00	; 0
    1628:	f6 e0       	ldi	r31, 0x06	; 6
    162a:	84 e0       	ldi	r24, 0x04	; 4
    162c:	82 83       	std	Z+2, r24	; 0x02
    162e:	82 89       	ldd	r24, Z+18	; 0x12
    1630:	82 60       	ori	r24, 0x02	; 2
    1632:	82 8b       	std	Z+18, r24	; 0x12
    1634:	83 85       	ldd	r24, Z+11	; 0x0b
    1636:	84 60       	ori	r24, 0x04	; 4
    1638:	83 87       	std	Z+11, r24	; 0x0b
    163a:	81 85       	ldd	r24, Z+9	; 0x09
    163c:	8c 60       	ori	r24, 0x0C	; 12
    163e:	81 87       	std	Z+9, r24	; 0x09
    1640:	08 95       	ret

00001642 <btn_check_press>:

button_t btn_check_press(void) 
{	
	button_t btn_mask = NO_BTN;
	
	if (!(PORTA.IN & BUTTON1)) {
    1642:	80 91 08 06 	lds	r24, 0x0608
    1646:	85 fb       	bst	r24, 5
    1648:	88 27       	eor	r24, r24
    164a:	80 f9       	bld	r24, 0
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	89 27       	eor	r24, r25
		btn_mask |= BTN1;
	}
	if (!(PORTA.IN & BUTTON2)) {
    1650:	90 91 08 06 	lds	r25, 0x0608
    1654:	96 ff       	sbrs	r25, 6
		btn_mask |= BTN2;
    1656:	82 60       	ori	r24, 0x02	; 2
	}
	if (!(PORTA.IN & BUTTON3)) {
    1658:	90 91 08 06 	lds	r25, 0x0608
    165c:	97 ff       	sbrs	r25, 7
		btn_mask |= BTN3;
    165e:	83 e0       	ldi	r24, 0x03	; 3
	} 
	if (!(PORTB.IN & BUTTON4)) {
    1660:	90 91 28 06 	lds	r25, 0x0628
    1664:	90 ff       	sbrs	r25, 0
		btn_mask |= BTN4;
    1666:	84 60       	ori	r24, 0x04	; 4
	}
	return btn_mask;
}
    1668:	08 95       	ret

0000166a <__vector_66>:

ISR(PORTA_INT0_vect) 
{
    166a:	1f 92       	push	r1
    166c:	0f 92       	push	r0
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	0f 92       	push	r0
    1672:	11 24       	eor	r1, r1
    1674:	08 b6       	in	r0, 0x38	; 56
    1676:	0f 92       	push	r0
    1678:	18 be       	out	0x38, r1	; 56
    167a:	09 b6       	in	r0, 0x39	; 57
    167c:	0f 92       	push	r0
    167e:	19 be       	out	0x39, r1	; 57
    1680:	0b b6       	in	r0, 0x3b	; 59
    1682:	0f 92       	push	r0
    1684:	1b be       	out	0x3b, r1	; 59
    1686:	2f 93       	push	r18
    1688:	3f 93       	push	r19
    168a:	4f 93       	push	r20
    168c:	5f 93       	push	r21
    168e:	6f 93       	push	r22
    1690:	7f 93       	push	r23
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	af 93       	push	r26
    1698:	bf 93       	push	r27
    169a:	ef 93       	push	r30
    169c:	ff 93       	push	r31

button_t btn_check_press(void) 
{	
	button_t btn_mask = NO_BTN;
	
	if (!(PORTA.IN & BUTTON1)) {
    169e:	80 91 08 06 	lds	r24, 0x0608
    16a2:	85 fb       	bst	r24, 5
    16a4:	88 27       	eor	r24, r24
    16a6:	80 f9       	bld	r24, 0
    16a8:	91 e0       	ldi	r25, 0x01	; 1
    16aa:	89 27       	eor	r24, r25
		btn_mask |= BTN1;
	}
	if (!(PORTA.IN & BUTTON2)) {
    16ac:	90 91 08 06 	lds	r25, 0x0608
    16b0:	96 ff       	sbrs	r25, 6
		btn_mask |= BTN2;
    16b2:	82 60       	ori	r24, 0x02	; 2
	}
	if (!(PORTA.IN & BUTTON3)) {
    16b4:	90 91 08 06 	lds	r25, 0x0608
    16b8:	97 ff       	sbrs	r25, 7
		btn_mask |= BTN3;
    16ba:	83 e0       	ldi	r24, 0x03	; 3
	} 
	if (!(PORTB.IN & BUTTON4)) {
    16bc:	90 91 28 06 	lds	r25, 0x0628
    16c0:	90 ff       	sbrs	r25, 0
		btn_mask |= BTN4;
    16c2:	84 60       	ori	r24, 0x04	; 4
	return btn_mask;
}

ISR(PORTA_INT0_vect) 
{
	btn_status = btn_check_press();
    16c4:	80 93 51 36 	sts	0x3651, r24
#ifdef DEBUG_ON
	printf("DEBUG: BTN: %d \r\n",btn_status);
    16c8:	80 91 51 36 	lds	r24, 0x3651
    16cc:	1f 92       	push	r1
    16ce:	8f 93       	push	r24
    16d0:	81 e3       	ldi	r24, 0x31	; 49
    16d2:	90 e2       	ldi	r25, 0x20	; 32
    16d4:	9f 93       	push	r25
    16d6:	8f 93       	push	r24
    16d8:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
#endif
}
    16e4:	ff 91       	pop	r31
    16e6:	ef 91       	pop	r30
    16e8:	bf 91       	pop	r27
    16ea:	af 91       	pop	r26
    16ec:	9f 91       	pop	r25
    16ee:	8f 91       	pop	r24
    16f0:	7f 91       	pop	r23
    16f2:	6f 91       	pop	r22
    16f4:	5f 91       	pop	r21
    16f6:	4f 91       	pop	r20
    16f8:	3f 91       	pop	r19
    16fa:	2f 91       	pop	r18
    16fc:	0f 90       	pop	r0
    16fe:	0b be       	out	0x3b, r0	; 59
    1700:	0f 90       	pop	r0
    1702:	09 be       	out	0x39, r0	; 57
    1704:	0f 90       	pop	r0
    1706:	08 be       	out	0x38, r0	; 56
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <__vector_34>:

ISR(PORTB_INT0_vect) 
{
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	08 b6       	in	r0, 0x38	; 56
    171e:	0f 92       	push	r0
    1720:	18 be       	out	0x38, r1	; 56
    1722:	09 b6       	in	r0, 0x39	; 57
    1724:	0f 92       	push	r0
    1726:	19 be       	out	0x39, r1	; 57
    1728:	0b b6       	in	r0, 0x3b	; 59
    172a:	0f 92       	push	r0
    172c:	1b be       	out	0x3b, r1	; 59
    172e:	2f 93       	push	r18
    1730:	3f 93       	push	r19
    1732:	4f 93       	push	r20
    1734:	5f 93       	push	r21
    1736:	6f 93       	push	r22
    1738:	7f 93       	push	r23
    173a:	8f 93       	push	r24
    173c:	9f 93       	push	r25
    173e:	af 93       	push	r26
    1740:	bf 93       	push	r27
    1742:	ef 93       	push	r30
    1744:	ff 93       	push	r31

button_t btn_check_press(void) 
{	
	button_t btn_mask = NO_BTN;
	
	if (!(PORTA.IN & BUTTON1)) {
    1746:	80 91 08 06 	lds	r24, 0x0608
    174a:	85 fb       	bst	r24, 5
    174c:	88 27       	eor	r24, r24
    174e:	80 f9       	bld	r24, 0
    1750:	91 e0       	ldi	r25, 0x01	; 1
    1752:	89 27       	eor	r24, r25
		btn_mask |= BTN1;
	}
	if (!(PORTA.IN & BUTTON2)) {
    1754:	90 91 08 06 	lds	r25, 0x0608
    1758:	96 ff       	sbrs	r25, 6
		btn_mask |= BTN2;
    175a:	82 60       	ori	r24, 0x02	; 2
	}
	if (!(PORTA.IN & BUTTON3)) {
    175c:	90 91 08 06 	lds	r25, 0x0608
    1760:	97 ff       	sbrs	r25, 7
		btn_mask |= BTN3;
    1762:	83 e0       	ldi	r24, 0x03	; 3
	} 
	if (!(PORTB.IN & BUTTON4)) {
    1764:	90 91 28 06 	lds	r25, 0x0628
    1768:	90 ff       	sbrs	r25, 0
		btn_mask |= BTN4;
    176a:	84 60       	ori	r24, 0x04	; 4
#endif
}

ISR(PORTB_INT0_vect) 
{
	btn_status = btn_check_press();
    176c:	80 93 51 36 	sts	0x3651, r24
#ifdef DEBUG_ON
	printf("DEBUG: BTN: %d \r\n",btn_status);
    1770:	80 91 51 36 	lds	r24, 0x3651
    1774:	1f 92       	push	r1
    1776:	8f 93       	push	r24
    1778:	81 e3       	ldi	r24, 0x31	; 49
    177a:	90 e2       	ldi	r25, 0x20	; 32
    177c:	9f 93       	push	r25
    177e:	8f 93       	push	r24
    1780:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
#endif
}
    178c:	ff 91       	pop	r31
    178e:	ef 91       	pop	r30
    1790:	bf 91       	pop	r27
    1792:	af 91       	pop	r26
    1794:	9f 91       	pop	r25
    1796:	8f 91       	pop	r24
    1798:	7f 91       	pop	r23
    179a:	6f 91       	pop	r22
    179c:	5f 91       	pop	r21
    179e:	4f 91       	pop	r20
    17a0:	3f 91       	pop	r19
    17a2:	2f 91       	pop	r18
    17a4:	0f 90       	pop	r0
    17a6:	0b be       	out	0x3b, r0	; 59
    17a8:	0f 90       	pop	r0
    17aa:	09 be       	out	0x39, r0	; 57
    17ac:	0f 90       	pop	r0
    17ae:	08 be       	out	0x38, r0	; 56
    17b0:	0f 90       	pop	r0
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	0f 90       	pop	r0
    17b6:	1f 90       	pop	r1
    17b8:	18 95       	reti

000017ba <__vector_67>:

ISR(PORTA_INT1_vect) 
{	
    17ba:	1f 92       	push	r1
    17bc:	0f 92       	push	r0
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	0f 92       	push	r0
    17c2:	11 24       	eor	r1, r1
    17c4:	08 b6       	in	r0, 0x38	; 56
    17c6:	0f 92       	push	r0
    17c8:	18 be       	out	0x38, r1	; 56
    17ca:	09 b6       	in	r0, 0x39	; 57
    17cc:	0f 92       	push	r0
    17ce:	19 be       	out	0x39, r1	; 57
    17d0:	0a b6       	in	r0, 0x3a	; 58
    17d2:	0f 92       	push	r0
    17d4:	1a be       	out	0x3a, r1	; 58
    17d6:	0b b6       	in	r0, 0x3b	; 59
    17d8:	0f 92       	push	r0
    17da:	1b be       	out	0x3b, r1	; 59
    17dc:	ef 92       	push	r14
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	2f 93       	push	r18
    17e4:	3f 93       	push	r19
    17e6:	4f 93       	push	r20
    17e8:	5f 93       	push	r21
    17ea:	6f 93       	push	r22
    17ec:	7f 93       	push	r23
    17ee:	8f 93       	push	r24
    17f0:	9f 93       	push	r25
    17f2:	af 93       	push	r26
    17f4:	bf 93       	push	r27
    17f6:	ef 93       	push	r30
    17f8:	ff 93       	push	r31
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	1f 92       	push	r1
    1800:	1f 92       	push	r1
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
	//twi_on();
	uint8_t data[2];
	twi_read_packet(&TWIC,SI114X_ADDR,50,REG_IRQ_STATUS,data,1);
    1806:	ee 24       	eor	r14, r14
    1808:	e3 94       	inc	r14
    180a:	8e 01       	movw	r16, r28
    180c:	0f 5f       	subi	r16, 0xFF	; 255
    180e:	1f 4f       	sbci	r17, 0xFF	; 255
    1810:	21 e2       	ldi	r18, 0x21	; 33
    1812:	42 e3       	ldi	r20, 0x32	; 50
    1814:	50 e0       	ldi	r21, 0x00	; 0
    1816:	6a e5       	ldi	r22, 0x5A	; 90
    1818:	80 e8       	ldi	r24, 0x80	; 128
    181a:	94 e0       	ldi	r25, 0x04	; 4
    181c:	6c d6       	rcall	.+3288   	; 0x24f6 <twi_read_packet>
	si114x_status = data[0];
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	80 93 52 36 	sts	0x3652, r24
#ifdef DEBUG_ON
	printf("DEBUG: Interrupt from Si114x! Code: %d \r\n", si114x_status);
    1824:	80 91 52 36 	lds	r24, 0x3652
    1828:	1f 92       	push	r1
    182a:	8f 93       	push	r24
    182c:	83 e4       	ldi	r24, 0x43	; 67
    182e:	90 e2       	ldi	r25, 0x20	; 32
    1830:	9f 93       	push	r25
    1832:	8f 93       	push	r24
    1834:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
#endif
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	ff 91       	pop	r31
    184a:	ef 91       	pop	r30
    184c:	bf 91       	pop	r27
    184e:	af 91       	pop	r26
    1850:	9f 91       	pop	r25
    1852:	8f 91       	pop	r24
    1854:	7f 91       	pop	r23
    1856:	6f 91       	pop	r22
    1858:	5f 91       	pop	r21
    185a:	4f 91       	pop	r20
    185c:	3f 91       	pop	r19
    185e:	2f 91       	pop	r18
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	ef 90       	pop	r14
    1866:	0f 90       	pop	r0
    1868:	0b be       	out	0x3b, r0	; 59
    186a:	0f 90       	pop	r0
    186c:	0a be       	out	0x3a, r0	; 58
    186e:	0f 90       	pop	r0
    1870:	09 be       	out	0x39, r0	; 57
    1872:	0f 90       	pop	r0
    1874:	08 be       	out	0x38, r0	; 56
    1876:	0f 90       	pop	r0
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	0f 90       	pop	r0
    187c:	1f 90       	pop	r1
    187e:	18 95       	reti

00001880 <rtc_update_display.constprop.1>:
		buffer[1] = temp;
	}
	
	//Clear old numbers
	if (pos == BOTTOM_HALF) {
		display_draw_filled_rect(0,0,16,8,0);
    1880:	7f 92       	push	r7
    1882:	8f 92       	push	r8
    1884:	9f 92       	push	r9
    1886:	af 92       	push	r10
    1888:	bf 92       	push	r11
    188a:	cf 92       	push	r12
    188c:	df 92       	push	r13
    188e:	ef 92       	push	r14
    1890:	ff 92       	push	r15
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	1f 92       	push	r1
    189c:	1f 92       	push	r1
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	78 2e       	mov	r7, r24
    18a4:	68 2f       	mov	r22, r24
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9e 01       	movw	r18, r28
    18ae:	2f 5f       	subi	r18, 0xFF	; 255
    18b0:	3f 4f       	sbci	r19, 0xFF	; 255
    18b2:	69 01       	movw	r12, r18
    18b4:	89 01       	movw	r16, r18
    18b6:	2a e0       	ldi	r18, 0x0A	; 10
    18b8:	82 2e       	mov	r8, r18
    18ba:	91 2c       	mov	r9, r1
    18bc:	a1 2c       	mov	r10, r1
    18be:	b1 2c       	mov	r11, r1
    18c0:	01 c0       	rjmp	.+2      	; 0x18c4 <rtc_update_display.constprop.1+0x44>
    18c2:	87 01       	movw	r16, r14
    18c4:	78 01       	movw	r14, r16
    18c6:	3f ef       	ldi	r19, 0xFF	; 255
    18c8:	e3 1a       	sub	r14, r19
    18ca:	f3 0a       	sbc	r15, r19
    18cc:	a5 01       	movw	r20, r10
    18ce:	94 01       	movw	r18, r8
    18d0:	0e 94 1e 42 	call	0x843c	; 0x843c <__udivmodsi4>
    18d4:	60 5d       	subi	r22, 0xD0	; 208
    18d6:	f8 01       	movw	r30, r16
    18d8:	60 83       	st	Z, r22
    18da:	b9 01       	movw	r22, r18
    18dc:	ca 01       	movw	r24, r20
    18de:	61 15       	cp	r22, r1
    18e0:	71 05       	cpc	r23, r1
    18e2:	81 05       	cpc	r24, r1
    18e4:	91 05       	cpc	r25, r1
    18e6:	69 f7       	brne	.-38     	; 0x18c2 <rtc_update_display.constprop.1+0x42>
    18e8:	ec 18       	sub	r14, r12
    18ea:	fd 08       	sbc	r15, r13
    18ec:	c7 01       	movw	r24, r14
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	18 16       	cp	r1, r24
    18f2:	19 06       	cpc	r1, r25
    18f4:	84 f4       	brge	.+32     	; 0x1916 <rtc_update_display.constprop.1+0x96>
    18f6:	d6 01       	movw	r26, r12
    18f8:	ae 0d       	add	r26, r14
    18fa:	bf 1d       	adc	r27, r15
    18fc:	f6 01       	movw	r30, r12
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 81       	ld	r20, Z
    1904:	5e 91       	ld	r21, -X
    1906:	51 93       	st	Z+, r21
    1908:	4c 93       	st	X, r20
    190a:	2f 5f       	subi	r18, 0xFF	; 255
    190c:	3f 4f       	sbci	r19, 0xFF	; 255
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	28 17       	cp	r18, r24
    1912:	39 07       	cpc	r19, r25
    1914:	b4 f3       	brlt	.-20     	; 0x1902 <rtc_update_display.constprop.1+0x82>
    1916:	f9 e0       	ldi	r31, 0x09	; 9
    1918:	f7 15       	cp	r31, r7
    191a:	68 f1       	brcs	.+90     	; 0x1976 <rtc_update_display.constprop.1+0xf6>
    191c:	19 81       	ldd	r17, Y+1	; 0x01
    191e:	80 e3       	ldi	r24, 0x30	; 48
    1920:	f8 2e       	mov	r15, r24
    1922:	00 e0       	ldi	r16, 0x00	; 0
    1924:	28 e0       	ldi	r18, 0x08	; 8
    1926:	40 e1       	ldi	r20, 0x10	; 16
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <display_draw_filled_rect>
    1930:	01 e0       	ldi	r16, 0x01	; 1
    1932:	21 e0       	ldi	r18, 0x01	; 1
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	4f 2d       	mov	r20, r15
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	82 e0       	ldi	r24, 0x02	; 2
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <display_draw_char>
    1944:	21 e0       	ldi	r18, 0x01	; 1
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	41 2f       	mov	r20, r17
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	89 e0       	ldi	r24, 0x09	; 9
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <display_draw_char>
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	1f 91       	pop	r17
    1960:	0f 91       	pop	r16
    1962:	ff 90       	pop	r15
    1964:	ef 90       	pop	r14
    1966:	df 90       	pop	r13
    1968:	cf 90       	pop	r12
    196a:	bf 90       	pop	r11
    196c:	af 90       	pop	r10
    196e:	9f 90       	pop	r9
    1970:	8f 90       	pop	r8
    1972:	7f 90       	pop	r7
    1974:	08 95       	ret
    1976:	f9 80       	ldd	r15, Y+1	; 0x01
    1978:	1a 81       	ldd	r17, Y+2	; 0x02
    197a:	d3 cf       	rjmp	.-90     	; 0x1922 <rtc_update_display.constprop.1+0xa2>

0000197c <rtc_update_display.constprop.0>:
    197c:	7f 92       	push	r7
    197e:	8f 92       	push	r8
    1980:	9f 92       	push	r9
    1982:	af 92       	push	r10
    1984:	bf 92       	push	r11
    1986:	cf 92       	push	r12
    1988:	df 92       	push	r13
    198a:	ef 92       	push	r14
    198c:	ff 92       	push	r15
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	1f 92       	push	r1
    1998:	1f 92       	push	r1
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	78 2e       	mov	r7, r24
    19a0:	68 2f       	mov	r22, r24
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9e 01       	movw	r18, r28
    19aa:	2f 5f       	subi	r18, 0xFF	; 255
    19ac:	3f 4f       	sbci	r19, 0xFF	; 255
    19ae:	69 01       	movw	r12, r18
    19b0:	89 01       	movw	r16, r18
    19b2:	4a e0       	ldi	r20, 0x0A	; 10
    19b4:	84 2e       	mov	r8, r20
    19b6:	91 2c       	mov	r9, r1
    19b8:	a1 2c       	mov	r10, r1
    19ba:	b1 2c       	mov	r11, r1
    19bc:	01 c0       	rjmp	.+2      	; 0x19c0 <rtc_update_display.constprop.0+0x44>
    19be:	87 01       	movw	r16, r14
    19c0:	78 01       	movw	r14, r16
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	e3 1a       	sub	r14, r19
    19c6:	f3 0a       	sbc	r15, r19
    19c8:	a5 01       	movw	r20, r10
    19ca:	94 01       	movw	r18, r8
    19cc:	0e 94 1e 42 	call	0x843c	; 0x843c <__udivmodsi4>
    19d0:	60 5d       	subi	r22, 0xD0	; 208
    19d2:	f8 01       	movw	r30, r16
    19d4:	60 83       	st	Z, r22
    19d6:	b9 01       	movw	r22, r18
    19d8:	ca 01       	movw	r24, r20
    19da:	61 15       	cp	r22, r1
    19dc:	71 05       	cpc	r23, r1
    19de:	81 05       	cpc	r24, r1
    19e0:	91 05       	cpc	r25, r1
    19e2:	69 f7       	brne	.-38     	; 0x19be <rtc_update_display.constprop.0+0x42>
    19e4:	ec 18       	sub	r14, r12
    19e6:	fd 08       	sbc	r15, r13
    19e8:	c7 01       	movw	r24, r14
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	18 16       	cp	r1, r24
    19ee:	19 06       	cpc	r1, r25
    19f0:	84 f4       	brge	.+32     	; 0x1a12 <rtc_update_display.constprop.0+0x96>
    19f2:	d6 01       	movw	r26, r12
    19f4:	ae 0d       	add	r26, r14
    19f6:	bf 1d       	adc	r27, r15
    19f8:	f6 01       	movw	r30, r12
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 81       	ld	r20, Z
    1a00:	5e 91       	ld	r21, -X
    1a02:	51 93       	st	Z+, r21
    1a04:	4c 93       	st	X, r20
    1a06:	2f 5f       	subi	r18, 0xFF	; 255
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	28 17       	cp	r18, r24
    1a0e:	39 07       	cpc	r19, r25
    1a10:	b4 f3       	brlt	.-20     	; 0x19fe <rtc_update_display.constprop.0+0x82>
    1a12:	f9 e0       	ldi	r31, 0x09	; 9
    1a14:	f7 15       	cp	r31, r7
    1a16:	68 f1       	brcs	.+90     	; 0x1a72 <rtc_update_display.constprop.0+0xf6>
    1a18:	19 81       	ldd	r17, Y+1	; 0x01
    1a1a:	30 e3       	ldi	r19, 0x30	; 48
    1a1c:	f3 2e       	mov	r15, r19
    1a1e:	00 e0       	ldi	r16, 0x00	; 0
    1a20:	29 e0       	ldi	r18, 0x09	; 9
    1a22:	40 e1       	ldi	r20, 0x10	; 16
    1a24:	67 e0       	ldi	r22, 0x07	; 7
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <display_draw_filled_rect>
    1a2c:	01 e0       	ldi	r16, 0x01	; 1
    1a2e:	21 e0       	ldi	r18, 0x01	; 1
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4f 2d       	mov	r20, r15
    1a34:	69 e0       	ldi	r22, 0x09	; 9
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <display_draw_char>
    1a40:	21 e0       	ldi	r18, 0x01	; 1
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	41 2f       	mov	r20, r17
    1a46:	69 e0       	ldi	r22, 0x09	; 9
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	89 e0       	ldi	r24, 0x09	; 9
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <display_draw_char>
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	ff 90       	pop	r15
    1a60:	ef 90       	pop	r14
    1a62:	df 90       	pop	r13
    1a64:	cf 90       	pop	r12
    1a66:	bf 90       	pop	r11
    1a68:	af 90       	pop	r10
    1a6a:	9f 90       	pop	r9
    1a6c:	8f 90       	pop	r8
    1a6e:	7f 90       	pop	r7
    1a70:	08 95       	ret
    1a72:	f9 80       	ldd	r15, Y+1	; 0x01
    1a74:	1a 81       	ldd	r17, Y+2	; 0x02
    1a76:	d3 cf       	rjmp	.-90     	; 0x1a1e <rtc_update_display.constprop.0+0xa2>

00001a78 <__vector_10>:
	display_draw_char(2,pos,buffer[0],1,1);
	display_draw_char(9,pos,buffer[1],1,1);
}

ISR(RTC_OVF_vect) 
{
    1a78:	1f 92       	push	r1
    1a7a:	0f 92       	push	r0
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	0f 92       	push	r0
    1a80:	11 24       	eor	r1, r1
    1a82:	08 b6       	in	r0, 0x38	; 56
    1a84:	0f 92       	push	r0
    1a86:	18 be       	out	0x38, r1	; 56
    1a88:	09 b6       	in	r0, 0x39	; 57
    1a8a:	0f 92       	push	r0
    1a8c:	19 be       	out	0x39, r1	; 57
    1a8e:	0b b6       	in	r0, 0x3b	; 59
    1a90:	0f 92       	push	r0
    1a92:	1b be       	out	0x3b, r1	; 59
    1a94:	2f 93       	push	r18
    1a96:	3f 93       	push	r19
    1a98:	4f 93       	push	r20
    1a9a:	5f 93       	push	r21
    1a9c:	6f 93       	push	r22
    1a9e:	7f 93       	push	r23
    1aa0:	8f 93       	push	r24
    1aa2:	9f 93       	push	r25
    1aa4:	af 93       	push	r26
    1aa6:	bf 93       	push	r27
    1aa8:	cf 93       	push	r28
    1aaa:	ef 93       	push	r30
    1aac:	ff 93       	push	r31
	//Variable to check system-runtime
	env.runtime++;
    1aae:	80 91 c7 34 	lds	r24, 0x34C7
    1ab2:	90 91 c8 34 	lds	r25, 0x34C8
    1ab6:	a0 91 c9 34 	lds	r26, 0x34C9
    1aba:	b0 91 ca 34 	lds	r27, 0x34CA
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	a1 1d       	adc	r26, r1
    1ac2:	b1 1d       	adc	r27, r1
    1ac4:	80 93 c7 34 	sts	0x34C7, r24
    1ac8:	90 93 c8 34 	sts	0x34C8, r25
    1acc:	a0 93 c9 34 	sts	0x34C9, r26
    1ad0:	b0 93 ca 34 	sts	0x34CA, r27
	
	if (++env.time.minutes >= 60) {
    1ad4:	80 91 5e 35 	lds	r24, 0x355E
    1ad8:	8f 5f       	subi	r24, 0xFF	; 255
    1ada:	80 93 5e 35 	sts	0x355E, r24
    1ade:	8c 33       	cpi	r24, 0x3C	; 60
    1ae0:	08 f4       	brcc	.+2      	; 0x1ae4 <__vector_10+0x6c>
    1ae2:	63 c0       	rjmp	.+198    	; 0x1baa <__vector_10+0x132>
		
		env.time.minutes = 0;
    1ae4:	10 92 5e 35 	sts	0x355E, r1
		if (disp_time) {
    1ae8:	80 91 06 20 	lds	r24, 0x2006
    1aec:	81 11       	cpse	r24, r1
    1aee:	7d c0       	rjmp	.+250    	; 0x1bea <__vector_10+0x172>
			rtc_update_display(BOTTOM_HALF,env.time.minutes);
			display_refresh_screen();
		}
		if (++env.time.hours >= 24) {
    1af0:	80 91 5f 35 	lds	r24, 0x355F
    1af4:	8f 5f       	subi	r24, 0xFF	; 255
    1af6:	80 93 5f 35 	sts	0x355F, r24
    1afa:	88 31       	cpi	r24, 0x18	; 24
    1afc:	08 f4       	brcc	.+2      	; 0x1b00 <__vector_10+0x88>
    1afe:	6e c0       	rjmp	.+220    	; 0x1bdc <__vector_10+0x164>
			if (env.time.weekday++ >= Sunday) {
    1b00:	80 91 61 35 	lds	r24, 0x3561
    1b04:	91 e0       	ldi	r25, 0x01	; 1
    1b06:	98 0f       	add	r25, r24
    1b08:	90 93 61 35 	sts	0x3561, r25
    1b0c:	87 30       	cpi	r24, 0x07	; 7
    1b0e:	68 f0       	brcs	.+26     	; 0x1b2a <__vector_10+0xb2>
				env.time.weekday = Monday;
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	90 93 61 35 	sts	0x3561, r25
				if (env.time.week++ >= 53) {
    1b16:	80 91 62 35 	lds	r24, 0x3562
    1b1a:	21 e0       	ldi	r18, 0x01	; 1
    1b1c:	28 0f       	add	r18, r24
    1b1e:	20 93 62 35 	sts	0x3562, r18
    1b22:	85 33       	cpi	r24, 0x35	; 53
    1b24:	10 f0       	brcs	.+4      	; 0x1b2a <__vector_10+0xb2>
					env.time.week = 1;
    1b26:	90 93 62 35 	sts	0x3562, r25
				}
			}
			if (env.time.day++ >= time_get_days_in_month(env.time.month,env.time.year)) {
    1b2a:	c0 91 60 35 	lds	r28, 0x3560
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	8c 0f       	add	r24, r28
    1b32:	80 93 60 35 	sts	0x3560, r24
    1b36:	60 91 64 35 	lds	r22, 0x3564
    1b3a:	70 91 65 35 	lds	r23, 0x3565
    1b3e:	80 91 63 35 	lds	r24, 0x3563
    1b42:	0e 94 cf 3c 	call	0x799e	; 0x799e <time_get_days_in_month>
    1b46:	c8 17       	cp	r28, r24
    1b48:	60 f0       	brcs	.+24     	; 0x1b62 <__vector_10+0xea>
				env.time.day = 1;
    1b4a:	91 e0       	ldi	r25, 0x01	; 1
    1b4c:	90 93 60 35 	sts	0x3560, r25
				if (env.time.month++ >= December) {
    1b50:	80 91 63 35 	lds	r24, 0x3563
    1b54:	21 e0       	ldi	r18, 0x01	; 1
    1b56:	28 0f       	add	r18, r24
    1b58:	20 93 63 35 	sts	0x3563, r18
    1b5c:	8c 30       	cpi	r24, 0x0C	; 12
    1b5e:	08 f0       	brcs	.+2      	; 0x1b62 <__vector_10+0xea>
    1b60:	53 c0       	rjmp	.+166    	; 0x1c08 <__vector_10+0x190>
					env.time.month = January;
					env.time.year++;
					env.time.week = time_get_weeknumber(env.time.day,env.time.month,env.time.year);
				}
			}
			env.time.hours = 0;
    1b62:	10 92 5f 35 	sts	0x355F, r1
			if (disp_time) {
    1b66:	80 91 06 20 	lds	r24, 0x2006
    1b6a:	81 11       	cpse	r24, r1
    1b6c:	49 c0       	rjmp	.+146    	; 0x1c00 <__vector_10+0x188>
			if (disp_time) {
				rtc_update_display(TOP_HALF,env.time.hours);
				display_refresh_screen();
			}
		}
		env.time.minutes = 0;
    1b6e:	10 92 5e 35 	sts	0x355E, r1
		if (disp_time) {
			rtc_update_display(BOTTOM_HALF,env.time.minutes);
			display_refresh_screen();
		}
	}
	if (alarm_status == ALARM_ON) {
    1b72:	80 91 30 36 	lds	r24, 0x3630
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	11 f1       	breq	.+68     	; 0x1bbe <__vector_10+0x146>
			{
				alarm_status = ALARM_TRIGGERED;
			}
		}
	}
    1b7a:	ff 91       	pop	r31
    1b7c:	ef 91       	pop	r30
    1b7e:	cf 91       	pop	r28
    1b80:	bf 91       	pop	r27
    1b82:	af 91       	pop	r26
    1b84:	9f 91       	pop	r25
    1b86:	8f 91       	pop	r24
    1b88:	7f 91       	pop	r23
    1b8a:	6f 91       	pop	r22
    1b8c:	5f 91       	pop	r21
    1b8e:	4f 91       	pop	r20
    1b90:	3f 91       	pop	r19
    1b92:	2f 91       	pop	r18
    1b94:	0f 90       	pop	r0
    1b96:	0b be       	out	0x3b, r0	; 59
    1b98:	0f 90       	pop	r0
    1b9a:	09 be       	out	0x39, r0	; 57
    1b9c:	0f 90       	pop	r0
    1b9e:	08 be       	out	0x38, r0	; 56
    1ba0:	0f 90       	pop	r0
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	0f 90       	pop	r0
    1ba6:	1f 90       	pop	r1
    1ba8:	18 95       	reti
				display_refresh_screen();
			}
		}
		env.time.minutes = 0;
	} else {
		if (disp_time) {
    1baa:	90 91 06 20 	lds	r25, 0x2006
    1bae:	99 23       	and	r25, r25
    1bb0:	01 f3       	breq	.-64     	; 0x1b72 <__vector_10+0xfa>
			rtc_update_display(BOTTOM_HALF,env.time.minutes);
    1bb2:	66 de       	rcall	.-820    	; 0x1880 <rtc_update_display.constprop.1>
			display_refresh_screen();
    1bb4:	bd d6       	rcall	.+3450   	; 0x2930 <display_refresh_screen>
		}
	}
	if (alarm_status == ALARM_ON) {
    1bb6:	80 91 30 36 	lds	r24, 0x3630
    1bba:	81 30       	cpi	r24, 0x01	; 1
    1bbc:	f1 f6       	brne	.-68     	; 0x1b7a <__vector_10+0x102>
		if (env.time.hours == env.alarm.hours) {
    1bbe:	90 91 5f 35 	lds	r25, 0x355F
    1bc2:	80 91 5b 35 	lds	r24, 0x355B
    1bc6:	98 13       	cpse	r25, r24
    1bc8:	d8 cf       	rjmp	.-80     	; 0x1b7a <__vector_10+0x102>
			if (env.time.minutes == env.alarm.minutes)
    1bca:	90 91 5e 35 	lds	r25, 0x355E
    1bce:	80 91 5a 35 	lds	r24, 0x355A
    1bd2:	98 13       	cpse	r25, r24
    1bd4:	d2 cf       	rjmp	.-92     	; 0x1b7a <__vector_10+0x102>
			{
				alarm_status = ALARM_TRIGGERED;
    1bd6:	10 92 30 36 	sts	0x3630, r1
    1bda:	cf cf       	rjmp	.-98     	; 0x1b7a <__vector_10+0x102>
			if (disp_time) {
				rtc_update_display(TOP_HALF,env.time.hours);
				display_refresh_screen();
			}
		} else {
			if (disp_time) {
    1bdc:	90 91 06 20 	lds	r25, 0x2006
    1be0:	99 23       	and	r25, r25
    1be2:	29 f2       	breq	.-118    	; 0x1b6e <__vector_10+0xf6>
				rtc_update_display(TOP_HALF,env.time.hours);
    1be4:	cb de       	rcall	.-618    	; 0x197c <rtc_update_display.constprop.0>
				display_refresh_screen();
    1be6:	a4 d6       	rcall	.+3400   	; 0x2930 <display_refresh_screen>
    1be8:	c2 cf       	rjmp	.-124    	; 0x1b6e <__vector_10+0xf6>
	
	if (++env.time.minutes >= 60) {
		
		env.time.minutes = 0;
		if (disp_time) {
			rtc_update_display(BOTTOM_HALF,env.time.minutes);
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	49 de       	rcall	.-878    	; 0x1880 <rtc_update_display.constprop.1>
			display_refresh_screen();
    1bee:	a0 d6       	rcall	.+3392   	; 0x2930 <display_refresh_screen>
		}
		if (++env.time.hours >= 24) {
    1bf0:	80 91 5f 35 	lds	r24, 0x355F
    1bf4:	8f 5f       	subi	r24, 0xFF	; 255
    1bf6:	80 93 5f 35 	sts	0x355F, r24
    1bfa:	88 31       	cpi	r24, 0x18	; 24
    1bfc:	78 f3       	brcs	.-34     	; 0x1bdc <__vector_10+0x164>
    1bfe:	80 cf       	rjmp	.-256    	; 0x1b00 <__vector_10+0x88>
					env.time.week = time_get_weeknumber(env.time.day,env.time.month,env.time.year);
				}
			}
			env.time.hours = 0;
			if (disp_time) {
				rtc_update_display(TOP_HALF,env.time.hours);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	bc de       	rcall	.-648    	; 0x197c <rtc_update_display.constprop.0>
				display_refresh_screen();
    1c04:	95 d6       	rcall	.+3370   	; 0x2930 <display_refresh_screen>
    1c06:	b3 cf       	rjmp	.-154    	; 0x1b6e <__vector_10+0xf6>
				}
			}
			if (env.time.day++ >= time_get_days_in_month(env.time.month,env.time.year)) {
				env.time.day = 1;
				if (env.time.month++ >= December) {
					env.time.month = January;
    1c08:	90 93 63 35 	sts	0x3563, r25
					env.time.year++;
    1c0c:	40 91 64 35 	lds	r20, 0x3564
    1c10:	50 91 65 35 	lds	r21, 0x3565
    1c14:	4f 5f       	subi	r20, 0xFF	; 255
    1c16:	5f 4f       	sbci	r21, 0xFF	; 255
    1c18:	40 93 64 35 	sts	0x3564, r20
    1c1c:	50 93 65 35 	sts	0x3565, r21
					env.time.week = time_get_weeknumber(env.time.day,env.time.month,env.time.year);
    1c20:	61 e0       	ldi	r22, 0x01	; 1
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	0e 94 66 3d 	call	0x7acc	; 0x7acc <time_get_weeknumber>
    1c28:	80 93 62 35 	sts	0x3562, r24
    1c2c:	9a cf       	rjmp	.-204    	; 0x1b62 <__vector_10+0xea>

00001c2e <Si114xPauseAll>:
	u8 code ucoef[4] = { 0x7B, 0x6B, 0x01, 0x00 } ;
	
	// This will write 4 bytes starting with I2C address 0x13
	response = Si114xBlockWrite( si114x_handle, REG_UCOEF0, 4, &ucoef[0] );
	return response;
}
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	ec 01       	movw	r28, r24
    1c38:	60 e2       	ldi	r22, 0x20	; 32
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	e4 d3       	rcall	.+1992   	; 0x2406 <Si114xReadFromRegister>
    1c3e:	60 e2       	ldi	r22, 0x20	; 32
    1c40:	89 2b       	or	r24, r25
    1c42:	61 f5       	brne	.+88     	; 0x1c9c <Si114xPauseAll+0x6e>
    1c44:	ce 01       	movw	r24, r28
    1c46:	df d3       	rcall	.+1982   	; 0x2406 <Si114xReadFromRegister>
    1c48:	8c 01       	movw	r16, r24
    1c4a:	97 fd       	sbrc	r25, 7
    1c4c:	16 c0       	rjmp	.+44     	; 0x1c7a <Si114xPauseAll+0x4c>
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <Si114xPauseAll+0x26>
    1c50:	97 fd       	sbrc	r25, 7
    1c52:	13 c0       	rjmp	.+38     	; 0x1c7a <Si114xPauseAll+0x4c>
    1c54:	60 e3       	ldi	r22, 0x30	; 48
    1c56:	ce 01       	movw	r24, r28
    1c58:	d6 d3       	rcall	.+1964   	; 0x2406 <Si114xReadFromRegister>
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	c1 f7       	brne	.-16     	; 0x1c50 <Si114xPauseAll+0x22>
    1c60:	60 e2       	ldi	r22, 0x20	; 32
    1c62:	ce 01       	movw	r24, r28
    1c64:	d0 d3       	rcall	.+1952   	; 0x2406 <Si114xReadFromRegister>
    1c66:	80 17       	cp	r24, r16
    1c68:	91 07       	cpc	r25, r17
    1c6a:	39 f1       	breq	.+78     	; 0x1cba <Si114xPauseAll+0x8c>
    1c6c:	97 fd       	sbrc	r25, 7
    1c6e:	05 c0       	rjmp	.+10     	; 0x1c7a <Si114xPauseAll+0x4c>
    1c70:	8c 01       	movw	r16, r24
    1c72:	f0 cf       	rjmp	.-32     	; 0x1c54 <Si114xPauseAll+0x26>
    1c74:	60 e2       	ldi	r22, 0x20	; 32
    1c76:	ce 01       	movw	r24, r28
    1c78:	c6 d3       	rcall	.+1932   	; 0x2406 <Si114xReadFromRegister>
    1c7a:	60 e2       	ldi	r22, 0x20	; 32
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	c3 d3       	rcall	.+1926   	; 0x2406 <Si114xReadFromRegister>
    1c80:	89 2b       	or	r24, r25
    1c82:	d9 f3       	breq	.-10     	; 0x1c7a <Si114xPauseAll+0x4c>
    1c84:	60 e2       	ldi	r22, 0x20	; 32
    1c86:	ce 01       	movw	r24, r28
    1c88:	be d3       	rcall	.+1916   	; 0x2406 <Si114xReadFromRegister>
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	a9 f6       	brne	.-86     	; 0x1c38 <Si114xPauseAll+0xa>
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	08 95       	ret
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	b3 d3       	rcall	.+1894   	; 0x2406 <Si114xReadFromRegister>
    1ca0:	97 fd       	sbrc	r25, 7
    1ca2:	ca cf       	rjmp	.-108    	; 0x1c38 <Si114xPauseAll+0xa>
    1ca4:	60 e3       	ldi	r22, 0x30	; 48
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	ae d3       	rcall	.+1884   	; 0x2406 <Si114xReadFromRegister>
    1caa:	81 30       	cpi	r24, 0x01	; 1
    1cac:	91 05       	cpc	r25, r1
    1cae:	c1 f7       	brne	.-16     	; 0x1ca0 <Si114xPauseAll+0x72>
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	68 e1       	ldi	r22, 0x18	; 24
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	89 d3       	rcall	.+1810   	; 0x23ca <Si114xWriteToRegister>
    1cb8:	bf cf       	rjmp	.-130    	; 0x1c38 <Si114xPauseAll+0xa>
    1cba:	4b e0       	ldi	r20, 0x0B	; 11
    1cbc:	68 e1       	ldi	r22, 0x18	; 24
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	84 d3       	rcall	.+1800   	; 0x23ca <Si114xWriteToRegister>
    1cc2:	89 2b       	or	r24, r25
    1cc4:	d1 f6       	brne	.-76     	; 0x1c7a <Si114xPauseAll+0x4c>
    1cc6:	17 fd       	sbrc	r17, 7
    1cc8:	d5 cf       	rjmp	.-86     	; 0x1c74 <Si114xPauseAll+0x46>
    1cca:	60 e2       	ldi	r22, 0x20	; 32
    1ccc:	ce 01       	movw	r24, r28
    1cce:	9b d3       	rcall	.+1846   	; 0x2406 <Si114xReadFromRegister>
    1cd0:	08 17       	cp	r16, r24
    1cd2:	19 07       	cpc	r17, r25
    1cd4:	d1 f3       	breq	.-12     	; 0x1cca <Si114xPauseAll+0x9c>
    1cd6:	60 e2       	ldi	r22, 0x20	; 32
    1cd8:	ce 01       	movw	r24, r28
    1cda:	95 d3       	rcall	.+1834   	; 0x2406 <Si114xReadFromRegister>
    1cdc:	89 2b       	or	r24, r25
    1cde:	69 f2       	breq	.-102    	; 0x1c7a <Si114xPauseAll+0x4c>
    1ce0:	d1 cf       	rjmp	.-94     	; 0x1c84 <Si114xPauseAll+0x56>

00001ce2 <si114x_reset>:
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	8c 01       	movw	r16, r24
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	68 e0       	ldi	r22, 0x08	; 8
    1cf0:	6c d3       	rcall	.+1752   	; 0x23ca <Si114xWriteToRegister>
    1cf2:	ec 01       	movw	r28, r24
    1cf4:	c8 01       	movw	r24, r16
    1cf6:	9b df       	rcall	.-202    	; 0x1c2e <Si114xPauseAll>
    1cf8:	c8 0f       	add	r28, r24
    1cfa:	d9 1f       	adc	r29, r25
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	68 e0       	ldi	r22, 0x08	; 8
    1d00:	c8 01       	movw	r24, r16
    1d02:	63 d3       	rcall	.+1734   	; 0x23ca <Si114xWriteToRegister>
    1d04:	c8 0f       	add	r28, r24
    1d06:	d9 1f       	adc	r29, r25
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	64 e0       	ldi	r22, 0x04	; 4
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	5d d3       	rcall	.+1722   	; 0x23ca <Si114xWriteToRegister>
    1d10:	c8 0f       	add	r28, r24
    1d12:	d9 1f       	adc	r29, r25
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	65 e0       	ldi	r22, 0x05	; 5
    1d18:	c8 01       	movw	r24, r16
    1d1a:	57 d3       	rcall	.+1710   	; 0x23ca <Si114xWriteToRegister>
    1d1c:	c8 0f       	add	r28, r24
    1d1e:	d9 1f       	adc	r29, r25
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	66 e0       	ldi	r22, 0x06	; 6
    1d24:	c8 01       	movw	r24, r16
    1d26:	51 d3       	rcall	.+1698   	; 0x23ca <Si114xWriteToRegister>
    1d28:	c8 0f       	add	r28, r24
    1d2a:	d9 1f       	adc	r29, r25
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	63 e0       	ldi	r22, 0x03	; 3
    1d30:	c8 01       	movw	r24, r16
    1d32:	4b d3       	rcall	.+1686   	; 0x23ca <Si114xWriteToRegister>
    1d34:	c8 0f       	add	r28, r24
    1d36:	d9 1f       	adc	r29, r25
    1d38:	4f ef       	ldi	r20, 0xFF	; 255
    1d3a:	61 e2       	ldi	r22, 0x21	; 33
    1d3c:	c8 01       	movw	r24, r16
    1d3e:	45 d3       	rcall	.+1674   	; 0x23ca <Si114xWriteToRegister>
    1d40:	c8 0f       	add	r28, r24
    1d42:	d9 1f       	adc	r29, r25
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	68 e1       	ldi	r22, 0x18	; 24
    1d48:	c8 01       	movw	r24, r16
    1d4a:	3f d3       	rcall	.+1662   	; 0x23ca <Si114xWriteToRegister>
    1d4c:	c8 0f       	add	r28, r24
    1d4e:	d9 1f       	adc	r29, r25
    1d50:	99 d3       	rcall	.+1842   	; 0x2484 <delay_10ms>
    1d52:	47 e1       	ldi	r20, 0x17	; 23
    1d54:	67 e0       	ldi	r22, 0x07	; 7
    1d56:	c8 01       	movw	r24, r16
    1d58:	38 d3       	rcall	.+1648   	; 0x23ca <Si114xWriteToRegister>
    1d5a:	8c 0f       	add	r24, r28
    1d5c:	9d 1f       	adc	r25, r29
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	08 95       	ret

00001d68 <si114x_init_ps1_als>:
    1d68:	9f 92       	push	r9
    1d6a:	af 92       	push	r10
    1d6c:	bf 92       	push	r11
    1d6e:	cf 92       	push	r12
    1d70:	df 92       	push	r13
    1d72:	ef 92       	push	r14
    1d74:	ff 92       	push	r15
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	1f 92       	push	r1
    1d80:	1f 92       	push	r1
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	8c 01       	movw	r16, r24
    1d88:	96 2e       	mov	r9, r22
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	68 e0       	ldi	r22, 0x08	; 8
    1d8e:	1d d3       	rcall	.+1594   	; 0x23ca <Si114xWriteToRegister>
    1d90:	6c 01       	movw	r12, r24
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	6a e0       	ldi	r22, 0x0A	; 10
    1d96:	c8 01       	movw	r24, r16
    1d98:	18 d3       	rcall	.+1584   	; 0x23ca <Si114xWriteToRegister>
    1d9a:	c8 0e       	add	r12, r24
    1d9c:	d9 1e       	adc	r13, r25
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	69 e0       	ldi	r22, 0x09	; 9
    1da2:	c8 01       	movw	r24, r16
    1da4:	12 d3       	rcall	.+1572   	; 0x23ca <Si114xWriteToRegister>
    1da6:	c8 0e       	add	r12, r24
    1da8:	d9 1e       	adc	r13, r25
    1daa:	c8 01       	movw	r24, r16
    1dac:	9a df       	rcall	.-204    	; 0x1ce2 <si114x_reset>
    1dae:	c8 0e       	add	r12, r24
    1db0:	d9 1e       	adc	r13, r25
    1db2:	43 e0       	ldi	r20, 0x03	; 3
    1db4:	6f e0       	ldi	r22, 0x0F	; 15
    1db6:	c8 01       	movw	r24, r16
    1db8:	08 d3       	rcall	.+1552   	; 0x23ca <Si114xWriteToRegister>
    1dba:	c8 0e       	add	r12, r24
    1dbc:	d9 1e       	adc	r13, r25
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <si114x_init_ps1_als+0x5c>
    1dc0:	97 fd       	sbrc	r25, 7
    1dc2:	87 c2       	rjmp	.+1294   	; 0x22d2 <si114x_init_ps1_als+0x56a>
    1dc4:	60 e3       	ldi	r22, 0x30	; 48
    1dc6:	c8 01       	movw	r24, r16
    1dc8:	1e d3       	rcall	.+1596   	; 0x2406 <Si114xReadFromRegister>
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	91 05       	cpc	r25, r1
    1dce:	c1 f7       	brne	.-16     	; 0x1dc0 <si114x_init_ps1_als+0x58>
    1dd0:	60 e2       	ldi	r22, 0x20	; 32
    1dd2:	c8 01       	movw	r24, r16
    1dd4:	18 d3       	rcall	.+1584   	; 0x2406 <Si114xReadFromRegister>
    1dd6:	5c 01       	movw	r10, r24
    1dd8:	81 e3       	ldi	r24, 0x31	; 49
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	81 ea       	ldi	r24, 0xA1	; 161
    1dde:	8a 83       	std	Y+2, r24	; 0x02
    1de0:	9e 01       	movw	r18, r28
    1de2:	2f 5f       	subi	r18, 0xFF	; 255
    1de4:	3f 4f       	sbci	r19, 0xFF	; 255
    1de6:	79 01       	movw	r14, r18
    1de8:	42 e0       	ldi	r20, 0x02	; 2
    1dea:	67 e1       	ldi	r22, 0x17	; 23
    1dec:	c8 01       	movw	r24, r16
    1dee:	28 d3       	rcall	.+1616   	; 0x2440 <Si114xBlockWrite>
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	59 f4       	brne	.+22     	; 0x1e0a <si114x_init_ps1_als+0xa2>
    1df4:	60 e2       	ldi	r22, 0x20	; 32
    1df6:	c8 01       	movw	r24, r16
    1df8:	06 d3       	rcall	.+1548   	; 0x2406 <Si114xReadFromRegister>
    1dfa:	a8 16       	cp	r10, r24
    1dfc:	b9 06       	cpc	r11, r25
    1dfe:	d1 f3       	breq	.-12     	; 0x1df4 <si114x_init_ps1_als+0x8c>
    1e00:	18 16       	cp	r1, r24
    1e02:	19 06       	cpc	r1, r25
    1e04:	14 f4       	brge	.+4      	; 0x1e0a <si114x_init_ps1_als+0xa2>
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	c8 0e       	add	r12, r24
    1e0c:	d9 1e       	adc	r13, r25
    1e0e:	43 e0       	ldi	r20, 0x03	; 3
    1e10:	63 e0       	ldi	r22, 0x03	; 3
    1e12:	c8 01       	movw	r24, r16
    1e14:	da d2       	rcall	.+1460   	; 0x23ca <Si114xWriteToRegister>
    1e16:	c8 0e       	add	r12, r24
    1e18:	d9 1e       	adc	r13, r25
    1e1a:	91 10       	cpse	r9, r1
    1e1c:	5f c2       	rjmp	.+1214   	; 0x22dc <si114x_init_ps1_als+0x574>
    1e1e:	45 e0       	ldi	r20, 0x05	; 5
    1e20:	64 e0       	ldi	r22, 0x04	; 4
    1e22:	c8 01       	movw	r24, r16
    1e24:	d2 d2       	rcall	.+1444   	; 0x23ca <Si114xWriteToRegister>
    1e26:	c8 0e       	add	r12, r24
    1e28:	d9 1e       	adc	r13, r25
    1e2a:	43 e3       	ldi	r20, 0x33	; 51
    1e2c:	65 e0       	ldi	r22, 0x05	; 5
    1e2e:	c8 01       	movw	r24, r16
    1e30:	cc d2       	rcall	.+1432   	; 0x23ca <Si114xWriteToRegister>
    1e32:	c8 0e       	add	r12, r24
    1e34:	d9 1e       	adc	r13, r25
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <si114x_init_ps1_als+0xd4>
    1e38:	97 fd       	sbrc	r25, 7
    1e3a:	20 c0       	rjmp	.+64     	; 0x1e7c <si114x_init_ps1_als+0x114>
    1e3c:	60 e3       	ldi	r22, 0x30	; 48
    1e3e:	c8 01       	movw	r24, r16
    1e40:	e2 d2       	rcall	.+1476   	; 0x2406 <Si114xReadFromRegister>
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	91 05       	cpc	r25, r1
    1e46:	c1 f7       	brne	.-16     	; 0x1e38 <si114x_init_ps1_als+0xd0>
    1e48:	60 e2       	ldi	r22, 0x20	; 32
    1e4a:	c8 01       	movw	r24, r16
    1e4c:	dc d2       	rcall	.+1464   	; 0x2406 <Si114xReadFromRegister>
    1e4e:	5c 01       	movw	r10, r24
    1e50:	83 e0       	ldi	r24, 0x03	; 3
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	87 ea       	ldi	r24, 0xA7	; 167
    1e56:	8a 83       	std	Y+2, r24	; 0x02
    1e58:	97 01       	movw	r18, r14
    1e5a:	42 e0       	ldi	r20, 0x02	; 2
    1e5c:	67 e1       	ldi	r22, 0x17	; 23
    1e5e:	c8 01       	movw	r24, r16
    1e60:	ef d2       	rcall	.+1502   	; 0x2440 <Si114xBlockWrite>
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	59 f4       	brne	.+22     	; 0x1e7c <si114x_init_ps1_als+0x114>
    1e66:	60 e2       	ldi	r22, 0x20	; 32
    1e68:	c8 01       	movw	r24, r16
    1e6a:	cd d2       	rcall	.+1434   	; 0x2406 <Si114xReadFromRegister>
    1e6c:	a8 16       	cp	r10, r24
    1e6e:	b9 06       	cpc	r11, r25
    1e70:	d1 f3       	breq	.-12     	; 0x1e66 <si114x_init_ps1_als+0xfe>
    1e72:	18 16       	cp	r1, r24
    1e74:	19 06       	cpc	r1, r25
    1e76:	14 f4       	brge	.+4      	; 0x1e7c <si114x_init_ps1_als+0x114>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	c8 0e       	add	r12, r24
    1e7e:	d9 1e       	adc	r13, r25
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <si114x_init_ps1_als+0x11e>
    1e82:	97 fd       	sbrc	r25, 7
    1e84:	20 c0       	rjmp	.+64     	; 0x1ec6 <si114x_init_ps1_als+0x15e>
    1e86:	60 e3       	ldi	r22, 0x30	; 48
    1e88:	c8 01       	movw	r24, r16
    1e8a:	bd d2       	rcall	.+1402   	; 0x2406 <Si114xReadFromRegister>
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	91 05       	cpc	r25, r1
    1e90:	c1 f7       	brne	.-16     	; 0x1e82 <si114x_init_ps1_als+0x11a>
    1e92:	60 e2       	ldi	r22, 0x20	; 32
    1e94:	c8 01       	movw	r24, r16
    1e96:	b7 d2       	rcall	.+1390   	; 0x2406 <Si114xReadFromRegister>
    1e98:	5c 01       	movw	r10, r24
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	8e ea       	ldi	r24, 0xAE	; 174
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
    1ea2:	97 01       	movw	r18, r14
    1ea4:	42 e0       	ldi	r20, 0x02	; 2
    1ea6:	67 e1       	ldi	r22, 0x17	; 23
    1ea8:	c8 01       	movw	r24, r16
    1eaa:	ca d2       	rcall	.+1428   	; 0x2440 <Si114xBlockWrite>
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	59 f4       	brne	.+22     	; 0x1ec6 <si114x_init_ps1_als+0x15e>
    1eb0:	60 e2       	ldi	r22, 0x20	; 32
    1eb2:	c8 01       	movw	r24, r16
    1eb4:	a8 d2       	rcall	.+1360   	; 0x2406 <Si114xReadFromRegister>
    1eb6:	a8 16       	cp	r10, r24
    1eb8:	b9 06       	cpc	r11, r25
    1eba:	d1 f3       	breq	.-12     	; 0x1eb0 <si114x_init_ps1_als+0x148>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	19 06       	cpc	r1, r25
    1ec0:	14 f4       	brge	.+4      	; 0x1ec6 <si114x_init_ps1_als+0x15e>
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	c8 0e       	add	r12, r24
    1ec8:	d9 1e       	adc	r13, r25
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <si114x_init_ps1_als+0x168>
    1ecc:	97 fd       	sbrc	r25, 7
    1ece:	21 c0       	rjmp	.+66     	; 0x1f12 <si114x_init_ps1_als+0x1aa>
    1ed0:	60 e3       	ldi	r22, 0x30	; 48
    1ed2:	c8 01       	movw	r24, r16
    1ed4:	98 d2       	rcall	.+1328   	; 0x2406 <Si114xReadFromRegister>
    1ed6:	81 30       	cpi	r24, 0x01	; 1
    1ed8:	91 05       	cpc	r25, r1
    1eda:	c1 f7       	brne	.-16     	; 0x1ecc <si114x_init_ps1_als+0x164>
    1edc:	60 e2       	ldi	r22, 0x20	; 32
    1ede:	c8 01       	movw	r24, r16
    1ee0:	92 d2       	rcall	.+1316   	; 0x2406 <Si114xReadFromRegister>
    1ee2:	5c 01       	movw	r10, r24
    1ee4:	19 82       	std	Y+1, r1	; 0x01
    1ee6:	8b ea       	ldi	r24, 0xAB	; 171
    1ee8:	8a 83       	std	Y+2, r24	; 0x02
    1eea:	97 01       	movw	r18, r14
    1eec:	42 e0       	ldi	r20, 0x02	; 2
    1eee:	67 e1       	ldi	r22, 0x17	; 23
    1ef0:	c8 01       	movw	r24, r16
    1ef2:	a6 d2       	rcall	.+1356   	; 0x2440 <Si114xBlockWrite>
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	69 f4       	brne	.+26     	; 0x1f12 <si114x_init_ps1_als+0x1aa>
    1ef8:	60 e2       	ldi	r22, 0x20	; 32
    1efa:	c8 01       	movw	r24, r16
    1efc:	84 d2       	rcall	.+1288   	; 0x2406 <Si114xReadFromRegister>
    1efe:	a8 16       	cp	r10, r24
    1f00:	b9 06       	cpc	r11, r25
    1f02:	d1 f3       	breq	.-12     	; 0x1ef8 <si114x_init_ps1_als+0x190>
    1f04:	5c 01       	movw	r10, r24
    1f06:	18 16       	cp	r1, r24
    1f08:	19 06       	cpc	r1, r25
    1f0a:	24 f4       	brge	.+8      	; 0x1f14 <si114x_init_ps1_als+0x1ac>
    1f0c:	a1 2c       	mov	r10, r1
    1f0e:	b1 2c       	mov	r11, r1
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <si114x_init_ps1_als+0x1ac>
    1f12:	5c 01       	movw	r10, r24
    1f14:	ac 0c       	add	r10, r12
    1f16:	bd 1c       	adc	r11, r13
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <si114x_init_ps1_als+0x1b6>
    1f1a:	97 fd       	sbrc	r25, 7
    1f1c:	20 c0       	rjmp	.+64     	; 0x1f5e <si114x_init_ps1_als+0x1f6>
    1f1e:	60 e3       	ldi	r22, 0x30	; 48
    1f20:	c8 01       	movw	r24, r16
    1f22:	71 d2       	rcall	.+1250   	; 0x2406 <Si114xReadFromRegister>
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	91 05       	cpc	r25, r1
    1f28:	c1 f7       	brne	.-16     	; 0x1f1a <si114x_init_ps1_als+0x1b2>
    1f2a:	60 e2       	ldi	r22, 0x20	; 32
    1f2c:	c8 01       	movw	r24, r16
    1f2e:	6b d2       	rcall	.+1238   	; 0x2406 <Si114xReadFromRegister>
    1f30:	6c 01       	movw	r12, r24
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	82 ea       	ldi	r24, 0xA2	; 162
    1f38:	8a 83       	std	Y+2, r24	; 0x02
    1f3a:	97 01       	movw	r18, r14
    1f3c:	42 e0       	ldi	r20, 0x02	; 2
    1f3e:	67 e1       	ldi	r22, 0x17	; 23
    1f40:	c8 01       	movw	r24, r16
    1f42:	7e d2       	rcall	.+1276   	; 0x2440 <Si114xBlockWrite>
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	59 f4       	brne	.+22     	; 0x1f5e <si114x_init_ps1_als+0x1f6>
    1f48:	60 e2       	ldi	r22, 0x20	; 32
    1f4a:	c8 01       	movw	r24, r16
    1f4c:	5c d2       	rcall	.+1208   	; 0x2406 <Si114xReadFromRegister>
    1f4e:	c8 16       	cp	r12, r24
    1f50:	d9 06       	cpc	r13, r25
    1f52:	d1 f3       	breq	.-12     	; 0x1f48 <si114x_init_ps1_als+0x1e0>
    1f54:	18 16       	cp	r1, r24
    1f56:	19 06       	cpc	r1, r25
    1f58:	14 f4       	brge	.+4      	; 0x1f5e <si114x_init_ps1_als+0x1f6>
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a8 0e       	add	r10, r24
    1f60:	b9 1e       	adc	r11, r25
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <si114x_init_ps1_als+0x200>
    1f64:	97 fd       	sbrc	r25, 7
    1f66:	20 c0       	rjmp	.+64     	; 0x1fa8 <si114x_init_ps1_als+0x240>
    1f68:	60 e3       	ldi	r22, 0x30	; 48
    1f6a:	c8 01       	movw	r24, r16
    1f6c:	4c d2       	rcall	.+1176   	; 0x2406 <Si114xReadFromRegister>
    1f6e:	81 30       	cpi	r24, 0x01	; 1
    1f70:	91 05       	cpc	r25, r1
    1f72:	c1 f7       	brne	.-16     	; 0x1f64 <si114x_init_ps1_als+0x1fc>
    1f74:	60 e2       	ldi	r22, 0x20	; 32
    1f76:	c8 01       	movw	r24, r16
    1f78:	46 d2       	rcall	.+1164   	; 0x2406 <Si114xReadFromRegister>
    1f7a:	6c 01       	movw	r12, r24
    1f7c:	80 e7       	ldi	r24, 0x70	; 112
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	8a ea       	ldi	r24, 0xAA	; 170
    1f82:	8a 83       	std	Y+2, r24	; 0x02
    1f84:	97 01       	movw	r18, r14
    1f86:	42 e0       	ldi	r20, 0x02	; 2
    1f88:	67 e1       	ldi	r22, 0x17	; 23
    1f8a:	c8 01       	movw	r24, r16
    1f8c:	59 d2       	rcall	.+1202   	; 0x2440 <Si114xBlockWrite>
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	59 f4       	brne	.+22     	; 0x1fa8 <si114x_init_ps1_als+0x240>
    1f92:	60 e2       	ldi	r22, 0x20	; 32
    1f94:	c8 01       	movw	r24, r16
    1f96:	37 d2       	rcall	.+1134   	; 0x2406 <Si114xReadFromRegister>
    1f98:	c8 16       	cp	r12, r24
    1f9a:	d9 06       	cpc	r13, r25
    1f9c:	d1 f3       	breq	.-12     	; 0x1f92 <si114x_init_ps1_als+0x22a>
    1f9e:	18 16       	cp	r1, r24
    1fa0:	19 06       	cpc	r1, r25
    1fa2:	14 f4       	brge	.+4      	; 0x1fa8 <si114x_init_ps1_als+0x240>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a8 0e       	add	r10, r24
    1faa:	b9 1e       	adc	r11, r25
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <si114x_init_ps1_als+0x24a>
    1fae:	97 fd       	sbrc	r25, 7
    1fb0:	20 c0       	rjmp	.+64     	; 0x1ff2 <si114x_init_ps1_als+0x28a>
    1fb2:	60 e3       	ldi	r22, 0x30	; 48
    1fb4:	c8 01       	movw	r24, r16
    1fb6:	27 d2       	rcall	.+1102   	; 0x2406 <Si114xReadFromRegister>
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	91 05       	cpc	r25, r1
    1fbc:	c1 f7       	brne	.-16     	; 0x1fae <si114x_init_ps1_als+0x246>
    1fbe:	60 e2       	ldi	r22, 0x20	; 32
    1fc0:	c8 01       	movw	r24, r16
    1fc2:	21 d2       	rcall	.+1090   	; 0x2406 <Si114xReadFromRegister>
    1fc4:	6c 01       	movw	r12, r24
    1fc6:	84 e0       	ldi	r24, 0x04	; 4
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	8c ea       	ldi	r24, 0xAC	; 172
    1fcc:	8a 83       	std	Y+2, r24	; 0x02
    1fce:	97 01       	movw	r18, r14
    1fd0:	42 e0       	ldi	r20, 0x02	; 2
    1fd2:	67 e1       	ldi	r22, 0x17	; 23
    1fd4:	c8 01       	movw	r24, r16
    1fd6:	34 d2       	rcall	.+1128   	; 0x2440 <Si114xBlockWrite>
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	59 f4       	brne	.+22     	; 0x1ff2 <si114x_init_ps1_als+0x28a>
    1fdc:	60 e2       	ldi	r22, 0x20	; 32
    1fde:	c8 01       	movw	r24, r16
    1fe0:	12 d2       	rcall	.+1060   	; 0x2406 <Si114xReadFromRegister>
    1fe2:	c8 16       	cp	r12, r24
    1fe4:	d9 06       	cpc	r13, r25
    1fe6:	d1 f3       	breq	.-12     	; 0x1fdc <si114x_init_ps1_als+0x274>
    1fe8:	18 16       	cp	r1, r24
    1fea:	19 06       	cpc	r1, r25
    1fec:	14 f4       	brge	.+4      	; 0x1ff2 <si114x_init_ps1_als+0x28a>
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a8 0e       	add	r10, r24
    1ff4:	b9 1e       	adc	r11, r25
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <si114x_init_ps1_als+0x294>
    1ff8:	97 fd       	sbrc	r25, 7
    1ffa:	1f c0       	rjmp	.+62     	; 0x203a <si114x_init_ps1_als+0x2d2>
    1ffc:	60 e3       	ldi	r22, 0x30	; 48
    1ffe:	c8 01       	movw	r24, r16
    2000:	02 d2       	rcall	.+1028   	; 0x2406 <Si114xReadFromRegister>
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	91 05       	cpc	r25, r1
    2006:	c1 f7       	brne	.-16     	; 0x1ff8 <si114x_init_ps1_als+0x290>
    2008:	60 e2       	ldi	r22, 0x20	; 32
    200a:	c8 01       	movw	r24, r16
    200c:	fc d1       	rcall	.+1016   	; 0x2406 <Si114xReadFromRegister>
    200e:	6c 01       	movw	r12, r24
    2010:	19 82       	std	Y+1, r1	; 0x01
    2012:	8e eb       	ldi	r24, 0xBE	; 190
    2014:	8a 83       	std	Y+2, r24	; 0x02
    2016:	97 01       	movw	r18, r14
    2018:	42 e0       	ldi	r20, 0x02	; 2
    201a:	67 e1       	ldi	r22, 0x17	; 23
    201c:	c8 01       	movw	r24, r16
    201e:	10 d2       	rcall	.+1056   	; 0x2440 <Si114xBlockWrite>
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	59 f4       	brne	.+22     	; 0x203a <si114x_init_ps1_als+0x2d2>
    2024:	60 e2       	ldi	r22, 0x20	; 32
    2026:	c8 01       	movw	r24, r16
    2028:	ee d1       	rcall	.+988    	; 0x2406 <Si114xReadFromRegister>
    202a:	c8 16       	cp	r12, r24
    202c:	d9 06       	cpc	r13, r25
    202e:	d1 f3       	breq	.-12     	; 0x2024 <si114x_init_ps1_als+0x2bc>
    2030:	18 16       	cp	r1, r24
    2032:	19 06       	cpc	r1, r25
    2034:	14 f4       	brge	.+4      	; 0x203a <si114x_init_ps1_als+0x2d2>
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a8 0e       	add	r10, r24
    203c:	b9 1e       	adc	r11, r25
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <si114x_init_ps1_als+0x2dc>
    2040:	97 fd       	sbrc	r25, 7
    2042:	1f c0       	rjmp	.+62     	; 0x2082 <si114x_init_ps1_als+0x31a>
    2044:	60 e3       	ldi	r22, 0x30	; 48
    2046:	c8 01       	movw	r24, r16
    2048:	de d1       	rcall	.+956    	; 0x2406 <Si114xReadFromRegister>
    204a:	81 30       	cpi	r24, 0x01	; 1
    204c:	91 05       	cpc	r25, r1
    204e:	c1 f7       	brne	.-16     	; 0x2040 <si114x_init_ps1_als+0x2d8>
    2050:	60 e2       	ldi	r22, 0x20	; 32
    2052:	c8 01       	movw	r24, r16
    2054:	d8 d1       	rcall	.+944    	; 0x2406 <Si114xReadFromRegister>
    2056:	6c 01       	movw	r12, r24
    2058:	19 82       	std	Y+1, r1	; 0x01
    205a:	81 eb       	ldi	r24, 0xB1	; 177
    205c:	8a 83       	std	Y+2, r24	; 0x02
    205e:	97 01       	movw	r18, r14
    2060:	42 e0       	ldi	r20, 0x02	; 2
    2062:	67 e1       	ldi	r22, 0x17	; 23
    2064:	c8 01       	movw	r24, r16
    2066:	ec d1       	rcall	.+984    	; 0x2440 <Si114xBlockWrite>
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	59 f4       	brne	.+22     	; 0x2082 <si114x_init_ps1_als+0x31a>
    206c:	60 e2       	ldi	r22, 0x20	; 32
    206e:	c8 01       	movw	r24, r16
    2070:	ca d1       	rcall	.+916    	; 0x2406 <Si114xReadFromRegister>
    2072:	c8 16       	cp	r12, r24
    2074:	d9 06       	cpc	r13, r25
    2076:	d1 f3       	breq	.-12     	; 0x206c <si114x_init_ps1_als+0x304>
    2078:	18 16       	cp	r1, r24
    207a:	19 06       	cpc	r1, r25
    207c:	14 f4       	brge	.+4      	; 0x2082 <si114x_init_ps1_als+0x31a>
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a8 0e       	add	r10, r24
    2084:	b9 1e       	adc	r11, r25
    2086:	02 c0       	rjmp	.+4      	; 0x208c <si114x_init_ps1_als+0x324>
    2088:	97 fd       	sbrc	r25, 7
    208a:	20 c0       	rjmp	.+64     	; 0x20cc <si114x_init_ps1_als+0x364>
    208c:	60 e3       	ldi	r22, 0x30	; 48
    208e:	c8 01       	movw	r24, r16
    2090:	ba d1       	rcall	.+884    	; 0x2406 <Si114xReadFromRegister>
    2092:	81 30       	cpi	r24, 0x01	; 1
    2094:	91 05       	cpc	r25, r1
    2096:	c1 f7       	brne	.-16     	; 0x2088 <si114x_init_ps1_als+0x320>
    2098:	60 e2       	ldi	r22, 0x20	; 32
    209a:	c8 01       	movw	r24, r16
    209c:	b4 d1       	rcall	.+872    	; 0x2406 <Si114xReadFromRegister>
    209e:	6c 01       	movw	r12, r24
    20a0:	80 e7       	ldi	r24, 0x70	; 112
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	8d eb       	ldi	r24, 0xBD	; 189
    20a6:	8a 83       	std	Y+2, r24	; 0x02
    20a8:	97 01       	movw	r18, r14
    20aa:	42 e0       	ldi	r20, 0x02	; 2
    20ac:	67 e1       	ldi	r22, 0x17	; 23
    20ae:	c8 01       	movw	r24, r16
    20b0:	c7 d1       	rcall	.+910    	; 0x2440 <Si114xBlockWrite>
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	59 f4       	brne	.+22     	; 0x20cc <si114x_init_ps1_als+0x364>
    20b6:	60 e2       	ldi	r22, 0x20	; 32
    20b8:	c8 01       	movw	r24, r16
    20ba:	a5 d1       	rcall	.+842    	; 0x2406 <Si114xReadFromRegister>
    20bc:	c8 16       	cp	r12, r24
    20be:	d9 06       	cpc	r13, r25
    20c0:	d1 f3       	breq	.-12     	; 0x20b6 <si114x_init_ps1_als+0x34e>
    20c2:	18 16       	cp	r1, r24
    20c4:	19 06       	cpc	r1, r25
    20c6:	14 f4       	brge	.+4      	; 0x20cc <si114x_init_ps1_als+0x364>
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	a8 0e       	add	r10, r24
    20ce:	b9 1e       	adc	r11, r25
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <si114x_init_ps1_als+0x36e>
    20d2:	97 fd       	sbrc	r25, 7
    20d4:	22 c0       	rjmp	.+68     	; 0x211a <si114x_init_ps1_als+0x3b2>
    20d6:	60 e3       	ldi	r22, 0x30	; 48
    20d8:	c8 01       	movw	r24, r16
    20da:	95 d1       	rcall	.+810    	; 0x2406 <Si114xReadFromRegister>
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	91 05       	cpc	r25, r1
    20e0:	c1 f7       	brne	.-16     	; 0x20d2 <si114x_init_ps1_als+0x36a>
    20e2:	60 e2       	ldi	r22, 0x20	; 32
    20e4:	c8 01       	movw	r24, r16
    20e6:	8f d1       	rcall	.+798    	; 0x2406 <Si114xReadFromRegister>
    20e8:	6c 01       	movw	r12, r24
    20ea:	80 e7       	ldi	r24, 0x70	; 112
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	80 eb       	ldi	r24, 0xB0	; 176
    20f0:	8a 83       	std	Y+2, r24	; 0x02
    20f2:	97 01       	movw	r18, r14
    20f4:	42 e0       	ldi	r20, 0x02	; 2
    20f6:	67 e1       	ldi	r22, 0x17	; 23
    20f8:	c8 01       	movw	r24, r16
    20fa:	a2 d1       	rcall	.+836    	; 0x2440 <Si114xBlockWrite>
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	69 f4       	brne	.+26     	; 0x211a <si114x_init_ps1_als+0x3b2>
    2100:	60 e2       	ldi	r22, 0x20	; 32
    2102:	c8 01       	movw	r24, r16
    2104:	80 d1       	rcall	.+768    	; 0x2406 <Si114xReadFromRegister>
    2106:	c8 16       	cp	r12, r24
    2108:	d9 06       	cpc	r13, r25
    210a:	d1 f3       	breq	.-12     	; 0x2100 <si114x_init_ps1_als+0x398>
    210c:	6c 01       	movw	r12, r24
    210e:	18 16       	cp	r1, r24
    2110:	19 06       	cpc	r1, r25
    2112:	24 f4       	brge	.+8      	; 0x211c <si114x_init_ps1_als+0x3b4>
    2114:	c1 2c       	mov	r12, r1
    2116:	d1 2c       	mov	r13, r1
    2118:	01 c0       	rjmp	.+2      	; 0x211c <si114x_init_ps1_als+0x3b4>
    211a:	6c 01       	movw	r12, r24
    211c:	ca 0c       	add	r12, r10
    211e:	db 1c       	adc	r13, r11
    2120:	02 c0       	rjmp	.+4      	; 0x2126 <si114x_init_ps1_als+0x3be>
    2122:	97 fd       	sbrc	r25, 7
    2124:	20 c0       	rjmp	.+64     	; 0x2166 <si114x_init_ps1_als+0x3fe>
    2126:	60 e3       	ldi	r22, 0x30	; 48
    2128:	c8 01       	movw	r24, r16
    212a:	6d d1       	rcall	.+730    	; 0x2406 <Si114xReadFromRegister>
    212c:	81 30       	cpi	r24, 0x01	; 1
    212e:	91 05       	cpc	r25, r1
    2130:	c1 f7       	brne	.-16     	; 0x2122 <si114x_init_ps1_als+0x3ba>
    2132:	60 e2       	ldi	r22, 0x20	; 32
    2134:	c8 01       	movw	r24, r16
    2136:	67 d1       	rcall	.+718    	; 0x2406 <Si114xReadFromRegister>
    2138:	5c 01       	movw	r10, r24
    213a:	80 e2       	ldi	r24, 0x20	; 32
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	8f eb       	ldi	r24, 0xBF	; 191
    2140:	8a 83       	std	Y+2, r24	; 0x02
    2142:	97 01       	movw	r18, r14
    2144:	42 e0       	ldi	r20, 0x02	; 2
    2146:	67 e1       	ldi	r22, 0x17	; 23
    2148:	c8 01       	movw	r24, r16
    214a:	7a d1       	rcall	.+756    	; 0x2440 <Si114xBlockWrite>
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	59 f4       	brne	.+22     	; 0x2166 <si114x_init_ps1_als+0x3fe>
    2150:	60 e2       	ldi	r22, 0x20	; 32
    2152:	c8 01       	movw	r24, r16
    2154:	58 d1       	rcall	.+688    	; 0x2406 <Si114xReadFromRegister>
    2156:	a8 16       	cp	r10, r24
    2158:	b9 06       	cpc	r11, r25
    215a:	d1 f3       	breq	.-12     	; 0x2150 <si114x_init_ps1_als+0x3e8>
    215c:	18 16       	cp	r1, r24
    215e:	19 06       	cpc	r1, r25
    2160:	14 f4       	brge	.+4      	; 0x2166 <si114x_init_ps1_als+0x3fe>
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	c8 0e       	add	r12, r24
    2168:	d9 1e       	adc	r13, r25
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <si114x_init_ps1_als+0x408>
    216c:	97 fd       	sbrc	r25, 7
    216e:	20 c0       	rjmp	.+64     	; 0x21b0 <si114x_init_ps1_als+0x448>
    2170:	60 e3       	ldi	r22, 0x30	; 48
    2172:	c8 01       	movw	r24, r16
    2174:	48 d1       	rcall	.+656    	; 0x2406 <Si114xReadFromRegister>
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	91 05       	cpc	r25, r1
    217a:	c1 f7       	brne	.-16     	; 0x216c <si114x_init_ps1_als+0x404>
    217c:	60 e2       	ldi	r22, 0x20	; 32
    217e:	c8 01       	movw	r24, r16
    2180:	42 d1       	rcall	.+644    	; 0x2406 <Si114xReadFromRegister>
    2182:	5c 01       	movw	r10, r24
    2184:	80 e2       	ldi	r24, 0x20	; 32
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	82 eb       	ldi	r24, 0xB2	; 178
    218a:	8a 83       	std	Y+2, r24	; 0x02
    218c:	97 01       	movw	r18, r14
    218e:	42 e0       	ldi	r20, 0x02	; 2
    2190:	67 e1       	ldi	r22, 0x17	; 23
    2192:	c8 01       	movw	r24, r16
    2194:	55 d1       	rcall	.+682    	; 0x2440 <Si114xBlockWrite>
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	59 f4       	brne	.+22     	; 0x21b0 <si114x_init_ps1_als+0x448>
    219a:	60 e2       	ldi	r22, 0x20	; 32
    219c:	c8 01       	movw	r24, r16
    219e:	33 d1       	rcall	.+614    	; 0x2406 <Si114xReadFromRegister>
    21a0:	a8 16       	cp	r10, r24
    21a2:	b9 06       	cpc	r11, r25
    21a4:	d1 f3       	breq	.-12     	; 0x219a <si114x_init_ps1_als+0x432>
    21a6:	18 16       	cp	r1, r24
    21a8:	19 06       	cpc	r1, r25
    21aa:	14 f4       	brge	.+4      	; 0x21b0 <si114x_init_ps1_als+0x448>
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	c8 0e       	add	r12, r24
    21b2:	d9 1e       	adc	r13, r25
    21b4:	48 e6       	ldi	r20, 0x68	; 104
    21b6:	61 e1       	ldi	r22, 0x11	; 17
    21b8:	c8 01       	movw	r24, r16
    21ba:	07 d1       	rcall	.+526    	; 0x23ca <Si114xWriteToRegister>
    21bc:	c8 0e       	add	r12, r24
    21be:	d9 1e       	adc	r13, r25
    21c0:	41 e0       	ldi	r20, 0x01	; 1
    21c2:	62 e1       	ldi	r22, 0x12	; 18
    21c4:	c8 01       	movw	r24, r16
    21c6:	01 d1       	rcall	.+514    	; 0x23ca <Si114xWriteToRegister>
    21c8:	c8 0e       	add	r12, r24
    21ca:	d9 1e       	adc	r13, r25
    21cc:	4c e2       	ldi	r20, 0x2C	; 44
    21ce:	6b e0       	ldi	r22, 0x0B	; 11
    21d0:	c8 01       	movw	r24, r16
    21d2:	fb d0       	rcall	.+502    	; 0x23ca <Si114xWriteToRegister>
    21d4:	c8 0e       	add	r12, r24
    21d6:	d9 1e       	adc	r13, r25
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	6c e0       	ldi	r22, 0x0C	; 12
    21dc:	c8 01       	movw	r24, r16
    21de:	f5 d0       	rcall	.+490    	; 0x23ca <Si114xWriteToRegister>
    21e0:	c8 0e       	add	r12, r24
    21e2:	d9 1e       	adc	r13, r25
    21e4:	97 01       	movw	r18, r14
    21e6:	42 e0       	ldi	r20, 0x02	; 2
    21e8:	6b e0       	ldi	r22, 0x0B	; 11
    21ea:	c8 01       	movw	r24, r16
    21ec:	3a d1       	rcall	.+628    	; 0x2462 <Si114xBlockRead>
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	98 2f       	mov	r25, r24
    21f4:	88 27       	eor	r24, r24
    21f6:	29 81       	ldd	r18, Y+1	; 0x01
    21f8:	82 2b       	or	r24, r18
    21fa:	9f 93       	push	r25
    21fc:	8f 93       	push	r24
    21fe:	80 e8       	ldi	r24, 0x80	; 128
    2200:	90 e2       	ldi	r25, 0x20	; 32
    2202:	9f 93       	push	r25
    2204:	8f 93       	push	r24
    2206:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    220a:	40 ed       	ldi	r20, 0xD0	; 208
    220c:	6d e0       	ldi	r22, 0x0D	; 13
    220e:	c8 01       	movw	r24, r16
    2210:	dc d0       	rcall	.+440    	; 0x23ca <Si114xWriteToRegister>
    2212:	c8 0e       	add	r12, r24
    2214:	d9 1e       	adc	r13, r25
    2216:	47 e0       	ldi	r20, 0x07	; 7
    2218:	6e e0       	ldi	r22, 0x0E	; 14
    221a:	c8 01       	movw	r24, r16
    221c:	d6 d0       	rcall	.+428    	; 0x23ca <Si114xWriteToRegister>
    221e:	c8 0e       	add	r12, r24
    2220:	d9 1e       	adc	r13, r25
    2222:	97 01       	movw	r18, r14
    2224:	42 e0       	ldi	r20, 0x02	; 2
    2226:	6d e0       	ldi	r22, 0x0D	; 13
    2228:	c8 01       	movw	r24, r16
    222a:	1b d1       	rcall	.+566    	; 0x2462 <Si114xBlockRead>
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	98 2f       	mov	r25, r24
    2232:	88 27       	eor	r24, r24
    2234:	29 81       	ldd	r18, Y+1	; 0x01
    2236:	82 2b       	or	r24, r18
    2238:	9f 93       	push	r25
    223a:	8f 93       	push	r24
    223c:	89 e9       	ldi	r24, 0x99	; 153
    223e:	90 e2       	ldi	r25, 0x20	; 32
    2240:	9f 93       	push	r25
    2242:	8f 93       	push	r24
    2244:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    2248:	40 ea       	ldi	r20, 0xA0	; 160
    224a:	68 e0       	ldi	r22, 0x08	; 8
    224c:	c8 01       	movw	r24, r16
    224e:	bd d0       	rcall	.+378    	; 0x23ca <Si114xWriteToRegister>
    2250:	c8 0e       	add	r12, r24
    2252:	d9 1e       	adc	r13, r25
    2254:	48 e0       	ldi	r20, 0x08	; 8
    2256:	6a e0       	ldi	r22, 0x0A	; 10
    2258:	c8 01       	movw	r24, r16
    225a:	b7 d0       	rcall	.+366    	; 0x23ca <Si114xWriteToRegister>
    225c:	c8 0e       	add	r12, r24
    225e:	d9 1e       	adc	r13, r25
    2260:	48 e0       	ldi	r20, 0x08	; 8
    2262:	69 e0       	ldi	r22, 0x09	; 9
    2264:	c8 01       	movw	r24, r16
    2266:	b1 d0       	rcall	.+354    	; 0x23ca <Si114xWriteToRegister>
    2268:	c8 0e       	add	r12, r24
    226a:	d9 1e       	adc	r13, r25
    226c:	60 e2       	ldi	r22, 0x20	; 32
    226e:	c8 01       	movw	r24, r16
    2270:	ca d0       	rcall	.+404    	; 0x2406 <Si114xReadFromRegister>
    2272:	7c 01       	movw	r14, r24
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	97 fd       	sbrc	r25, 7
    227a:	43 c0       	rjmp	.+134    	; 0x2302 <si114x_init_ps1_als+0x59a>
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <si114x_init_ps1_als+0x51a>
    227e:	97 fd       	sbrc	r25, 7
    2280:	16 c0       	rjmp	.+44     	; 0x22ae <si114x_init_ps1_als+0x546>
    2282:	60 e3       	ldi	r22, 0x30	; 48
    2284:	c8 01       	movw	r24, r16
    2286:	bf d0       	rcall	.+382    	; 0x2406 <Si114xReadFromRegister>
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	91 05       	cpc	r25, r1
    228c:	c1 f7       	brne	.-16     	; 0x227e <si114x_init_ps1_als+0x516>
    228e:	60 e2       	ldi	r22, 0x20	; 32
    2290:	c8 01       	movw	r24, r16
    2292:	b9 d0       	rcall	.+370    	; 0x2406 <Si114xReadFromRegister>
    2294:	8e 15       	cp	r24, r14
    2296:	9f 05       	cpc	r25, r15
    2298:	21 f0       	breq	.+8      	; 0x22a2 <si114x_init_ps1_als+0x53a>
    229a:	97 fd       	sbrc	r25, 7
    229c:	08 c0       	rjmp	.+16     	; 0x22ae <si114x_init_ps1_als+0x546>
    229e:	7c 01       	movw	r14, r24
    22a0:	f0 cf       	rjmp	.-32     	; 0x2282 <si114x_init_ps1_als+0x51a>
    22a2:	4f e0       	ldi	r20, 0x0F	; 15
    22a4:	68 e1       	ldi	r22, 0x18	; 24
    22a6:	c8 01       	movw	r24, r16
    22a8:	90 d0       	rcall	.+288    	; 0x23ca <Si114xWriteToRegister>
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	61 f1       	breq	.+88     	; 0x2306 <si114x_init_ps1_als+0x59e>
    22ae:	9c 01       	movw	r18, r24
    22b0:	c6 01       	movw	r24, r12
    22b2:	82 0f       	add	r24, r18
    22b4:	93 1f       	adc	r25, r19
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	1f 91       	pop	r17
    22c0:	0f 91       	pop	r16
    22c2:	ff 90       	pop	r15
    22c4:	ef 90       	pop	r14
    22c6:	df 90       	pop	r13
    22c8:	cf 90       	pop	r12
    22ca:	bf 90       	pop	r11
    22cc:	af 90       	pop	r10
    22ce:	9f 90       	pop	r9
    22d0:	08 95       	ret
    22d2:	9e 01       	movw	r18, r28
    22d4:	2f 5f       	subi	r18, 0xFF	; 255
    22d6:	3f 4f       	sbci	r19, 0xFF	; 255
    22d8:	79 01       	movw	r14, r18
    22da:	97 cd       	rjmp	.-1234   	; 0x1e0a <si114x_init_ps1_als+0xa2>
    22dc:	46 e0       	ldi	r20, 0x06	; 6
    22de:	64 e0       	ldi	r22, 0x04	; 4
    22e0:	c8 01       	movw	r24, r16
    22e2:	73 d0       	rcall	.+230    	; 0x23ca <Si114xWriteToRegister>
    22e4:	c8 0e       	add	r12, r24
    22e6:	d9 1e       	adc	r13, r25
    22e8:	46 e3       	ldi	r20, 0x36	; 54
    22ea:	65 e0       	ldi	r22, 0x05	; 5
    22ec:	c8 01       	movw	r24, r16
    22ee:	6d d0       	rcall	.+218    	; 0x23ca <Si114xWriteToRegister>
    22f0:	c8 0e       	add	r12, r24
    22f2:	d9 1e       	adc	r13, r25
    22f4:	a3 cd       	rjmp	.-1210   	; 0x1e3c <si114x_init_ps1_als+0xd4>
    22f6:	60 e2       	ldi	r22, 0x20	; 32
    22f8:	c8 01       	movw	r24, r16
    22fa:	85 d0       	rcall	.+266    	; 0x2406 <Si114xReadFromRegister>
    22fc:	e8 16       	cp	r14, r24
    22fe:	f9 06       	cpc	r15, r25
    2300:	51 f4       	brne	.+20     	; 0x2316 <si114x_init_ps1_als+0x5ae>
    2302:	97 01       	movw	r18, r14
    2304:	d5 cf       	rjmp	.-86     	; 0x22b0 <si114x_init_ps1_als+0x548>
    2306:	f7 fc       	sbrc	r15, 7
    2308:	f6 cf       	rjmp	.-20     	; 0x22f6 <si114x_init_ps1_als+0x58e>
    230a:	60 e2       	ldi	r22, 0x20	; 32
    230c:	c8 01       	movw	r24, r16
    230e:	7b d0       	rcall	.+246    	; 0x2406 <Si114xReadFromRegister>
    2310:	e8 16       	cp	r14, r24
    2312:	f9 06       	cpc	r15, r25
    2314:	d1 f3       	breq	.-12     	; 0x230a <si114x_init_ps1_als+0x5a2>
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	ca cf       	rjmp	.-108    	; 0x22b0 <si114x_init_ps1_als+0x548>

0000231c <si114x_setup_ps1>:
    231c:	8a e5       	ldi	r24, 0x5A	; 90
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	e0 dc       	rcall	.-1600   	; 0x1ce2 <si114x_reset>
    2322:	2f ef       	ldi	r18, 0xFF	; 255
    2324:	81 ee       	ldi	r24, 0xE1	; 225
    2326:	94 e0       	ldi	r25, 0x04	; 4
    2328:	21 50       	subi	r18, 0x01	; 1
    232a:	80 40       	sbci	r24, 0x00	; 0
    232c:	90 40       	sbci	r25, 0x00	; 0
    232e:	e1 f7       	brne	.-8      	; 0x2328 <si114x_setup_ps1+0xc>
    2330:	00 c0       	rjmp	.+0      	; 0x2332 <si114x_setup_ps1+0x16>
    2332:	00 00       	nop
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	8a e5       	ldi	r24, 0x5A	; 90
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	16 dd       	rcall	.-1492   	; 0x1d68 <si114x_init_ps1_als>
    233c:	74 d9       	rcall	.-3352   	; 0x1626 <btn_si114x_enable_interrupt>
    233e:	60 e0       	ldi	r22, 0x00	; 0
    2340:	8a e5       	ldi	r24, 0x5A	; 90
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	60 d0       	rcall	.+192    	; 0x2406 <Si114xReadFromRegister>
    2346:	9f 93       	push	r25
    2348:	8f 93       	push	r24
    234a:	83 eb       	ldi	r24, 0xB3	; 179
    234c:	90 e2       	ldi	r25, 0x20	; 32
    234e:	9f 93       	push	r25
    2350:	8f 93       	push	r24
    2352:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    2356:	61 e0       	ldi	r22, 0x01	; 1
    2358:	8a e5       	ldi	r24, 0x5A	; 90
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	54 d0       	rcall	.+168    	; 0x2406 <Si114xReadFromRegister>
    235e:	9f 93       	push	r25
    2360:	8f 93       	push	r24
    2362:	81 ec       	ldi	r24, 0xC1	; 193
    2364:	90 e2       	ldi	r25, 0x20	; 32
    2366:	9f 93       	push	r25
    2368:	8f 93       	push	r24
    236a:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    236e:	62 e0       	ldi	r22, 0x02	; 2
    2370:	8a e5       	ldi	r24, 0x5A	; 90
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	48 d0       	rcall	.+144    	; 0x2406 <Si114xReadFromRegister>
    2376:	9f 93       	push	r25
    2378:	8f 93       	push	r24
    237a:	8e ec       	ldi	r24, 0xCE	; 206
    237c:	90 e2       	ldi	r25, 0x20	; 32
    237e:	9f 93       	push	r25
    2380:	8f 93       	push	r24
    2382:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    2386:	8d b7       	in	r24, 0x3d	; 61
    2388:	9e b7       	in	r25, 0x3e	; 62
    238a:	0c 96       	adiw	r24, 0x0c	; 12
    238c:	8d bf       	out	0x3d, r24	; 61
    238e:	9e bf       	out	0x3e, r25	; 62
    2390:	08 95       	ret

00002392 <__vector_20>:

ISR(TCC1_OVF_vect) {
    2392:	1f 92       	push	r1
    2394:	0f 92       	push	r0
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	0f 92       	push	r0
    239a:	11 24       	eor	r1, r1
    239c:	08 b6       	in	r0, 0x38	; 56
    239e:	0f 92       	push	r0
    23a0:	18 be       	out	0x38, r1	; 56
    23a2:	8f 93       	push	r24
    23a4:	9f 93       	push	r25
	counter++;
    23a6:	80 91 4c 2c 	lds	r24, 0x2C4C
    23aa:	90 91 4d 2c 	lds	r25, 0x2C4D
    23ae:	01 96       	adiw	r24, 0x01	; 1
    23b0:	80 93 4c 2c 	sts	0x2C4C, r24
    23b4:	90 93 4d 2c 	sts	0x2C4D, r25
}
    23b8:	9f 91       	pop	r25
    23ba:	8f 91       	pop	r24
    23bc:	0f 90       	pop	r0
    23be:	08 be       	out	0x38, r0	; 56
    23c0:	0f 90       	pop	r0
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	0f 90       	pop	r0
    23c6:	1f 90       	pop	r1
    23c8:	18 95       	reti

000023ca <Si114xWriteToRegister>:
	//return PT_i2c_smbus_read_byte_data(mcu_handle, port) < 0 ;
	return 1;
}

s16 Si114xWriteToRegister(HANDLE si114x_handle, u8 address, u8 val)
{
    23ca:	ef 92       	push	r14
    23cc:	0f 93       	push	r16
    23ce:	1f 93       	push	r17
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	1f 92       	push	r1
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	26 2f       	mov	r18, r22
    23dc:	49 83       	std	Y+1, r20	; 0x01
	twi_write_packet(&TWIC,SI114X_ADDR,1000,address,&val,1);
    23de:	ee 24       	eor	r14, r14
    23e0:	e3 94       	inc	r14
    23e2:	8e 01       	movw	r16, r28
    23e4:	0f 5f       	subi	r16, 0xFF	; 255
    23e6:	1f 4f       	sbci	r17, 0xFF	; 255
    23e8:	48 ee       	ldi	r20, 0xE8	; 232
    23ea:	53 e0       	ldi	r21, 0x03	; 3
    23ec:	6a e5       	ldi	r22, 0x5A	; 90
    23ee:	80 e8       	ldi	r24, 0x80	; 128
    23f0:	94 e0       	ldi	r25, 0x04	; 4
    23f2:	1f d1       	rcall	.+574    	; 0x2632 <twi_write_packet>
	return 0;
}
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	0f 90       	pop	r0
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	1f 91       	pop	r17
    2400:	0f 91       	pop	r16
    2402:	ef 90       	pop	r14
    2404:	08 95       	ret

00002406 <Si114xReadFromRegister>:

s16 Si114xReadFromRegister(HANDLE si114x_handle, u8 address)
{
    2406:	ef 92       	push	r14
    2408:	0f 93       	push	r16
    240a:	1f 93       	push	r17
    240c:	cf 93       	push	r28
    240e:	df 93       	push	r29
    2410:	1f 92       	push	r1
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	26 2f       	mov	r18, r22
	u8 val;
	twi_read_packet(&TWIC,SI114X_ADDR,1000,address,&val,1);
    2418:	ee 24       	eor	r14, r14
    241a:	e3 94       	inc	r14
    241c:	8e 01       	movw	r16, r28
    241e:	0f 5f       	subi	r16, 0xFF	; 255
    2420:	1f 4f       	sbci	r17, 0xFF	; 255
    2422:	48 ee       	ldi	r20, 0xE8	; 232
    2424:	53 e0       	ldi	r21, 0x03	; 3
    2426:	6a e5       	ldi	r22, 0x5A	; 90
    2428:	80 e8       	ldi	r24, 0x80	; 128
    242a:	94 e0       	ldi	r25, 0x04	; 4
    242c:	64 d0       	rcall	.+200    	; 0x24f6 <twi_read_packet>
	return val;
    242e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0f 90       	pop	r0
    2434:	df 91       	pop	r29
    2436:	cf 91       	pop	r28
    2438:	1f 91       	pop	r17
    243a:	0f 91       	pop	r16
    243c:	ef 90       	pop	r14
    243e:	08 95       	ret

00002440 <Si114xBlockWrite>:

s16 Si114xBlockWrite(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
    2440:	ef 92       	push	r14
    2442:	0f 93       	push	r16
    2444:	1f 93       	push	r17
    2446:	89 01       	movw	r16, r18
	return twi_write_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
    2448:	e4 2e       	mov	r14, r20
    244a:	26 2f       	mov	r18, r22
    244c:	48 ee       	ldi	r20, 0xE8	; 232
    244e:	53 e0       	ldi	r21, 0x03	; 3
    2450:	6a e5       	ldi	r22, 0x5A	; 90
    2452:	80 e8       	ldi	r24, 0x80	; 128
    2454:	94 e0       	ldi	r25, 0x04	; 4
    2456:	ed d0       	rcall	.+474    	; 0x2632 <twi_write_packet>
}
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	1f 91       	pop	r17
    245c:	0f 91       	pop	r16
    245e:	ef 90       	pop	r14
    2460:	08 95       	ret

00002462 <Si114xBlockRead>:

s16 Si114xBlockRead(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
    2462:	ef 92       	push	r14
    2464:	0f 93       	push	r16
    2466:	1f 93       	push	r17
    2468:	89 01       	movw	r16, r18
	return twi_read_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
    246a:	e4 2e       	mov	r14, r20
    246c:	26 2f       	mov	r18, r22
    246e:	48 ee       	ldi	r20, 0xE8	; 232
    2470:	53 e0       	ldi	r21, 0x03	; 3
    2472:	6a e5       	ldi	r22, 0x5A	; 90
    2474:	80 e8       	ldi	r24, 0x80	; 128
    2476:	94 e0       	ldi	r25, 0x04	; 4
    2478:	3e d0       	rcall	.+124    	; 0x24f6 <twi_read_packet>
}
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	ef 90       	pop	r14
    2482:	08 95       	ret

00002484 <delay_10ms>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2484:	2f ef       	ldi	r18, 0xFF	; 255
    2486:	89 ef       	ldi	r24, 0xF9	; 249
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	21 50       	subi	r18, 0x01	; 1
    248c:	80 40       	sbci	r24, 0x00	; 0
    248e:	90 40       	sbci	r25, 0x00	; 0
    2490:	e1 f7       	brne	.-8      	; 0x248a <delay_10ms+0x6>
    2492:	00 c0       	rjmp	.+0      	; 0x2494 <delay_10ms+0x10>
    2494:	00 00       	nop
    2496:	08 95       	ret

00002498 <spi_disable>:
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
}

void spi_disable(void) 
{	
	SPIC.CTRL = 0;
    2498:	10 92 c0 08 	sts	0x08C0, r1
	
	PORTC.DIRCLR   = SD_CS | SD_MOSI | SD_MISO | SD_SCK | SD_CD;
    249c:	e0 e4       	ldi	r30, 0x40	; 64
    249e:	f6 e0       	ldi	r31, 0x06	; 6
    24a0:	88 ef       	ldi	r24, 0xF8	; 248
    24a2:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN3CTRL = PORT_OPC_PULLDOWN_gc;
    24a4:	80 e1       	ldi	r24, 0x10	; 16
    24a6:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLDOWN_gc;
    24a8:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLDOWN_gc;
    24aa:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLDOWN_gc;
    24ac:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLDOWN_gc;
    24ae:	87 8b       	std	Z+23, r24	; 0x17
	
	//Cut power to SD card
	PORTB.DIRSET = SD_POWER; 
    24b0:	e0 e2       	ldi	r30, 0x20	; 32
    24b2:	f6 e0       	ldi	r31, 0x06	; 6
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTSET = SD_POWER;
    24b8:	85 83       	std	Z+5, r24	; 0x05
	
	//Enable power reduction for SPIC 
	PR.PRPC |= 0x08;
    24ba:	e0 e7       	ldi	r30, 0x70	; 112
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	83 81       	ldd	r24, Z+3	; 0x03
    24c0:	88 60       	ori	r24, 0x08	; 8
    24c2:	83 83       	std	Z+3, r24	; 0x03
    24c4:	08 95       	ret

000024c6 <twi_setup>:
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
}
    24c6:	e0 e7       	ldi	r30, 0x70	; 112
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	83 81       	ldd	r24, Z+3	; 0x03
    24cc:	8f 7b       	andi	r24, 0xBF	; 191
    24ce:	83 83       	std	Z+3, r24	; 0x03
    24d0:	e0 e8       	ldi	r30, 0x80	; 128
    24d2:	f4 e0       	ldi	r31, 0x04	; 4
    24d4:	12 82       	std	Z+2, r1	; 0x02
    24d6:	89 e0       	ldi	r24, 0x09	; 9
    24d8:	85 83       	std	Z+5, r24	; 0x05
    24da:	88 e0       	ldi	r24, 0x08	; 8
    24dc:	81 83       	std	Z+1, r24	; 0x01
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	84 83       	std	Z+4, r24	; 0x04
    24e2:	08 95       	ret

000024e4 <twi_off>:
    24e4:	e0 e8       	ldi	r30, 0x80	; 128
    24e6:	f4 e0       	ldi	r31, 0x04	; 4
    24e8:	11 82       	std	Z+1, r1	; 0x01
    24ea:	e0 e7       	ldi	r30, 0x70	; 112
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	83 81       	ldd	r24, Z+3	; 0x03
    24f0:	80 64       	ori	r24, 0x40	; 64
    24f2:	83 83       	std	Z+3, r24	; 0x03
    24f4:	08 95       	ret

000024f6 <twi_read_packet>:
const uint8_t slave_address,
const uint16_t timeout_ms,
const uint8_t reg,
uint8_t* data,
uint8_t length)
{
    24f6:	ef 92       	push	r14
    24f8:	0f 93       	push	r16
    24fa:	1f 93       	push	r17
    24fc:	cf 93       	push	r28
    24fe:	df 93       	push	r29
    2500:	fc 01       	movw	r30, r24
	uint8_t error_code;
	uint8_t len = length;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    2502:	76 2f       	mov	r23, r22
    2504:	77 0f       	add	r23, r23
const uint8_t slave_address,
const uint16_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    2506:	76 83       	std	Z+6, r23	; 0x06

	timeout_remaining = (timeout_ms * 100);
    2508:	94 e6       	ldi	r25, 0x64	; 100
    250a:	94 9f       	mul	r25, r20
    250c:	d0 01       	movw	r26, r0
    250e:	95 9f       	mul	r25, r21
    2510:	b0 0d       	add	r27, r0
    2512:	11 24       	eor	r1, r1
	while (timeout_remaining)
    2514:	10 97       	sbiw	r26, 0x00	; 0
    2516:	c1 f0       	breq	.+48     	; 0x2548 <twi_read_packet+0x52>
    2518:	ad 01       	movw	r20, r26
    251a:	0f c0       	rjmp	.+30     	; 0x253a <twi_read_packet+0x44>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    251c:	39 2f       	mov	r19, r25
    251e:	30 75       	andi	r19, 0x50	; 80
    2520:	30 35       	cpi	r19, 0x50	; 80
    2522:	a9 f0       	breq	.+42     	; 0x254e <twi_read_packet+0x58>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    2524:	90 7c       	andi	r25, 0xC0	; 192
    2526:	e1 f4       	brne	.+56     	; 0x2560 <twi_read_packet+0x6a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2528:	8a e6       	ldi	r24, 0x6A	; 106
    252a:	8a 95       	dec	r24
    252c:	f1 f7       	brne	.-4      	; 0x252a <twi_read_packet+0x34>
    252e:	00 c0       	rjmp	.+0      	; 0x2530 <twi_read_packet+0x3a>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    2530:	41 50       	subi	r20, 0x01	; 1
    2532:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    2534:	41 15       	cp	r20, r1
    2536:	51 05       	cpc	r21, r1
    2538:	39 f0       	breq	.+14     	; 0x2548 <twi_read_packet+0x52>
	{
		uint8_t status = TWI->MASTER.STATUS;
    253a:	94 81       	ldd	r25, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    253c:	39 2f       	mov	r19, r25
    253e:	38 74       	andi	r19, 0x48	; 72
    2540:	38 34       	cpi	r19, 0x48	; 72
    2542:	61 f7       	brne	.-40     	; 0x251c <twi_read_packet+0x26>
		{
			TWI->MASTER.ADDR = slave_address;
    2544:	76 83       	std	Z+6, r23	; 0x06
    2546:	f0 cf       	rjmp	.-32     	; 0x2528 <twi_read_packet+0x32>
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    2548:	84 81       	ldd	r24, Z+4	; 0x04
    254a:	85 ff       	sbrs	r24, 5
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <twi_read_packet+0x5c>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    254e:	87 e0       	ldi	r24, 0x07	; 7
    2550:	83 83       	std	Z+3, r24	; 0x03
		}

		twi_stop_transmission(TWI);
	}

	return len;
    2552:	8e 2d       	mov	r24, r14
}
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	1f 91       	pop	r17
    255a:	0f 91       	pop	r16
    255c:	ef 90       	pop	r14
    255e:	08 95       	ret
const uint16_t timeout_ms,
const uint8_t data)
{
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
    2560:	27 83       	std	Z+7, r18	; 0x07
	
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    2562:	84 81       	ldd	r24, Z+4	; 0x04
    2564:	86 fd       	sbrc	r24, 6
    2566:	0e c0       	rjmp	.+28     	; 0x2584 <twi_read_packet+0x8e>
    2568:	9d 01       	movw	r18, r26
    256a:	03 c0       	rjmp	.+6      	; 0x2572 <twi_read_packet+0x7c>
    256c:	21 15       	cp	r18, r1
    256e:	31 05       	cpc	r19, r1
    2570:	49 f0       	breq	.+18     	; 0x2584 <twi_read_packet+0x8e>
    2572:	8a e6       	ldi	r24, 0x6A	; 106
    2574:	8a 95       	dec	r24
    2576:	f1 f7       	brne	.-4      	; 0x2574 <twi_read_packet+0x7e>
    2578:	00 c0       	rjmp	.+0      	; 0x257a <twi_read_packet+0x84>
		_delay_us(10);
		timeout_remaining--;
    257a:	21 50       	subi	r18, 0x01	; 1
    257c:	31 09       	sbc	r19, r1
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
	
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    257e:	94 81       	ldd	r25, Z+4	; 0x04
    2580:	96 ff       	sbrs	r25, 6
    2582:	f4 cf       	rjmp	.-24     	; 0x256c <twi_read_packet+0x76>
		_delay_us(10);
		timeout_remaining--;
	}

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    2584:	84 81       	ldd	r24, Z+4	; 0x04
    2586:	86 ff       	sbrs	r24, 6
    2588:	1e c0       	rjmp	.+60     	; 0x25c6 <twi_read_packet+0xd0>
    258a:	84 81       	ldd	r24, Z+4	; 0x04
    258c:	84 fd       	sbrc	r24, 4
    258e:	1b c0       	rjmp	.+54     	; 0x25c6 <twi_read_packet+0xd0>
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
    2590:	66 0f       	add	r22, r22
    2592:	61 60       	ori	r22, 0x01	; 1
const uint8_t slave_address,
const uint16_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    2594:	66 83       	std	Z+6, r22	; 0x06
    2596:	9d 01       	movw	r18, r26
    2598:	0f c0       	rjmp	.+30     	; 0x25b8 <twi_read_packet+0xc2>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    259a:	89 2f       	mov	r24, r25
    259c:	80 75       	andi	r24, 0x50	; 80
    259e:	80 35       	cpi	r24, 0x50	; 80
    25a0:	e1 f0       	breq	.+56     	; 0x25da <twi_read_packet+0xe4>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    25a2:	90 7c       	andi	r25, 0xC0	; 192
    25a4:	01 f5       	brne	.+64     	; 0x25e6 <twi_read_packet+0xf0>
    25a6:	8a e6       	ldi	r24, 0x6A	; 106
    25a8:	8a 95       	dec	r24
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <twi_read_packet+0xb2>
    25ac:	00 c0       	rjmp	.+0      	; 0x25ae <twi_read_packet+0xb8>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    25ae:	21 50       	subi	r18, 0x01	; 1
    25b0:	31 09       	sbc	r19, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    25b2:	21 15       	cp	r18, r1
    25b4:	31 05       	cpc	r19, r1
    25b6:	71 f0       	breq	.+28     	; 0x25d4 <twi_read_packet+0xde>
	{
		uint8_t status = TWI->MASTER.STATUS;
    25b8:	94 81       	ldd	r25, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    25ba:	89 2f       	mov	r24, r25
    25bc:	88 74       	andi	r24, 0x48	; 72
    25be:	88 34       	cpi	r24, 0x48	; 72
    25c0:	61 f7       	brne	.-40     	; 0x259a <twi_read_packet+0xa4>
		{
			TWI->MASTER.ADDR = slave_address;
    25c2:	66 83       	std	Z+6, r22	; 0x06
    25c4:	f0 cf       	rjmp	.-32     	; 0x25a6 <twi_read_packet+0xb0>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    25c6:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return len;
}
    25c8:	df 91       	pop	r29
    25ca:	cf 91       	pop	r28
    25cc:	1f 91       	pop	r17
    25ce:	0f 91       	pop	r16
    25d0:	ef 90       	pop	r14
    25d2:	08 95       	ret
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    25d4:	84 81       	ldd	r24, Z+4	; 0x04
    25d6:	85 ff       	sbrs	r24, 5
    25d8:	02 c0       	rjmp	.+4      	; 0x25de <twi_read_packet+0xe8>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    25da:	87 e0       	ldi	r24, 0x07	; 7
    25dc:	83 83       	std	Z+3, r24	; 0x03
    25de:	87 e0       	ldi	r24, 0x07	; 7
    25e0:	83 83       	std	Z+3, r24	; 0x03
		}

		twi_stop_transmission(TWI);
	}

	return len;
    25e2:	8e 2d       	mov	r24, r14
    25e4:	b7 cf       	rjmp	.-146    	; 0x2554 <twi_read_packet+0x5e>
    25e6:	4f ef       	ldi	r20, 0xFF	; 255
    25e8:	4e 0d       	add	r20, r14
    25ea:	e8 01       	movw	r28, r16
	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    25ec:	62 e0       	ldi	r22, 0x02	; 2
	}

	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    25ee:	57 e0       	ldi	r21, 0x07	; 7
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
    25f0:	4f 3f       	cpi	r20, 0xFF	; 255
    25f2:	a9 f3       	breq	.-22     	; 0x25de <twi_read_packet+0xe8>
uint8_t* const data,
const uint8_t end_of_data)
{
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
    25f4:	84 81       	ldd	r24, Z+4	; 0x04
    25f6:	8c 70       	andi	r24, 0x0C	; 12
    25f8:	8c 30       	cpi	r24, 0x0C	; 12
    25fa:	89 f3       	breq	.-30     	; 0x25de <twi_read_packet+0xe8>
		return false;
	}
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm) && timeout_remaining) {
    25fc:	84 81       	ldd	r24, Z+4	; 0x04
    25fe:	87 fd       	sbrc	r24, 7
    2600:	0e c0       	rjmp	.+28     	; 0x261e <twi_read_packet+0x128>
    2602:	9d 01       	movw	r18, r26
    2604:	03 c0       	rjmp	.+6      	; 0x260c <twi_read_packet+0x116>
    2606:	21 15       	cp	r18, r1
    2608:	31 05       	cpc	r19, r1
    260a:	49 f0       	breq	.+18     	; 0x261e <twi_read_packet+0x128>
    260c:	8a e6       	ldi	r24, 0x6A	; 106
    260e:	8a 95       	dec	r24
    2610:	f1 f7       	brne	.-4      	; 0x260e <twi_read_packet+0x118>
    2612:	00 c0       	rjmp	.+0      	; 0x2614 <twi_read_packet+0x11e>
		_delay_us(10);
		timeout_remaining--;
    2614:	21 50       	subi	r18, 0x01	; 1
    2616:	31 09       	sbc	r19, r1
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
		return false;
	}
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm) && timeout_remaining) {
    2618:	94 81       	ldd	r25, Z+4	; 0x04
    261a:	97 ff       	sbrs	r25, 7
    261c:	f4 cf       	rjmp	.-24     	; 0x2606 <twi_read_packet+0x110>
		_delay_us(10);
		timeout_remaining--;
	}

	*data = TWI->MASTER.DATA;
    261e:	87 81       	ldd	r24, Z+7	; 0x07
    2620:	89 93       	st	Y+, r24

	if (end_of_data)
    2622:	41 11       	cpse	r20, r1
    2624:	03 c0       	rjmp	.+6      	; 0x262c <twi_read_packet+0x136>
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2626:	53 83       	std	Z+3, r21	; 0x03
    2628:	41 50       	subi	r20, 0x01	; 1
    262a:	e2 cf       	rjmp	.-60     	; 0x25f0 <twi_read_packet+0xfa>
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    262c:	63 83       	std	Z+3, r22	; 0x03
    262e:	41 50       	subi	r20, 0x01	; 1
    2630:	df cf       	rjmp	.-66     	; 0x25f0 <twi_read_packet+0xfa>

00002632 <twi_write_packet>:
const uint8_t slave_address,
const uint16_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    2632:	ef 92       	push	r14
    2634:	0f 93       	push	r16
    2636:	1f 93       	push	r17
    2638:	cf 93       	push	r28
    263a:	df 93       	push	r29
    263c:	fc 01       	movw	r30, r24
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    263e:	66 0f       	add	r22, r22
const uint8_t slave_address,
const uint16_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    2640:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    2642:	94 e6       	ldi	r25, 0x64	; 100
    2644:	94 9f       	mul	r25, r20
    2646:	d0 01       	movw	r26, r0
    2648:	95 9f       	mul	r25, r21
    264a:	b0 0d       	add	r27, r0
    264c:	11 24       	eor	r1, r1
	while (timeout_remaining)
    264e:	10 97       	sbiw	r26, 0x00	; 0
    2650:	c1 f0       	breq	.+48     	; 0x2682 <twi_write_packet+0x50>
    2652:	ad 01       	movw	r20, r26
    2654:	0f c0       	rjmp	.+30     	; 0x2674 <twi_write_packet+0x42>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    2656:	39 2f       	mov	r19, r25
    2658:	30 75       	andi	r19, 0x50	; 80
    265a:	30 35       	cpi	r19, 0x50	; 80
    265c:	a9 f0       	breq	.+42     	; 0x2688 <twi_write_packet+0x56>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    265e:	90 7c       	andi	r25, 0xC0	; 192
    2660:	e1 f4       	brne	.+56     	; 0x269a <twi_write_packet+0x68>
    2662:	8a e6       	ldi	r24, 0x6A	; 106
    2664:	8a 95       	dec	r24
    2666:	f1 f7       	brne	.-4      	; 0x2664 <twi_write_packet+0x32>
    2668:	00 c0       	rjmp	.+0      	; 0x266a <twi_write_packet+0x38>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    266a:	41 50       	subi	r20, 0x01	; 1
    266c:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    266e:	41 15       	cp	r20, r1
    2670:	51 05       	cpc	r21, r1
    2672:	39 f0       	breq	.+14     	; 0x2682 <twi_write_packet+0x50>
	{
		uint8_t status = TWI->MASTER.STATUS;
    2674:	94 81       	ldd	r25, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    2676:	39 2f       	mov	r19, r25
    2678:	38 74       	andi	r19, 0x48	; 72
    267a:	38 34       	cpi	r19, 0x48	; 72
    267c:	61 f7       	brne	.-40     	; 0x2656 <twi_write_packet+0x24>
		{
			TWI->MASTER.ADDR = slave_address;
    267e:	66 83       	std	Z+6, r22	; 0x06
    2680:	f0 cf       	rjmp	.-32     	; 0x2662 <twi_write_packet+0x30>
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    2682:	84 81       	ldd	r24, Z+4	; 0x04
    2684:	85 ff       	sbrs	r24, 5
    2686:	02 c0       	rjmp	.+4      	; 0x268c <twi_write_packet+0x5a>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2688:	87 e0       	ldi	r24, 0x07	; 7
    268a:	83 83       	std	Z+3, r24	; 0x03
    268c:	8e 2d       	mov	r24, r14

		twi_stop_transmission(TWI);
	}

	return length;
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	1f 91       	pop	r17
    2694:	0f 91       	pop	r16
    2696:	ef 90       	pop	r14
    2698:	08 95       	ret
const uint16_t timeout_ms,
const uint8_t data)
{
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
    269a:	27 83       	std	Z+7, r18	; 0x07
	
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    269c:	84 81       	ldd	r24, Z+4	; 0x04
    269e:	86 fd       	sbrc	r24, 6
    26a0:	0e c0       	rjmp	.+28     	; 0x26be <twi_write_packet+0x8c>
    26a2:	9d 01       	movw	r18, r26
    26a4:	03 c0       	rjmp	.+6      	; 0x26ac <twi_write_packet+0x7a>
    26a6:	21 15       	cp	r18, r1
    26a8:	31 05       	cpc	r19, r1
    26aa:	49 f0       	breq	.+18     	; 0x26be <twi_write_packet+0x8c>
    26ac:	9a e6       	ldi	r25, 0x6A	; 106
    26ae:	9a 95       	dec	r25
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <twi_write_packet+0x7c>
    26b2:	00 c0       	rjmp	.+0      	; 0x26b4 <twi_write_packet+0x82>
		_delay_us(10);
		timeout_remaining--;
    26b4:	21 50       	subi	r18, 0x01	; 1
    26b6:	31 09       	sbc	r19, r1
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
	
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    26b8:	94 81       	ldd	r25, Z+4	; 0x04
    26ba:	96 ff       	sbrs	r25, 6
    26bc:	f4 cf       	rjmp	.-24     	; 0x26a6 <twi_write_packet+0x74>
		_delay_us(10);
		timeout_remaining--;
	}

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    26be:	84 81       	ldd	r24, Z+4	; 0x04
    26c0:	86 ff       	sbrs	r24, 6
    26c2:	21 c0       	rjmp	.+66     	; 0x2706 <twi_write_packet+0xd4>
    26c4:	84 81       	ldd	r24, Z+4	; 0x04
    26c6:	84 fd       	sbrc	r24, 4
    26c8:	1e c0       	rjmp	.+60     	; 0x2706 <twi_write_packet+0xd4>
    26ca:	e8 01       	movw	r28, r16
    26cc:	8f ef       	ldi	r24, 0xFF	; 255
    26ce:	8e 0d       	add	r24, r14
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    26d0:	8f 3f       	cpi	r24, 0xFF	; 255
    26d2:	b1 f0       	breq	.+44     	; 0x2700 <twi_write_packet+0xce>
		{
			if (!(twi_send_byte(TWI, timeout_ms, *(data++))))
    26d4:	99 91       	ld	r25, Y+
const uint16_t timeout_ms,
const uint8_t data)
{
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
    26d6:	97 83       	std	Z+7, r25	; 0x07
	
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    26d8:	94 81       	ldd	r25, Z+4	; 0x04
    26da:	96 fd       	sbrc	r25, 6
    26dc:	0e c0       	rjmp	.+28     	; 0x26fa <twi_write_packet+0xc8>
    26de:	9d 01       	movw	r18, r26
    26e0:	03 c0       	rjmp	.+6      	; 0x26e8 <twi_write_packet+0xb6>
    26e2:	21 15       	cp	r18, r1
    26e4:	31 05       	cpc	r19, r1
    26e6:	49 f0       	breq	.+18     	; 0x26fa <twi_write_packet+0xc8>
    26e8:	9a e6       	ldi	r25, 0x6A	; 106
    26ea:	9a 95       	dec	r25
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <twi_write_packet+0xb8>
    26ee:	00 c0       	rjmp	.+0      	; 0x26f0 <twi_write_packet+0xbe>
		_delay_us(10);
		timeout_remaining--;
    26f0:	21 50       	subi	r18, 0x01	; 1
    26f2:	31 09       	sbc	r19, r1
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
	
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    26f4:	94 81       	ldd	r25, Z+4	; 0x04
    26f6:	96 ff       	sbrs	r25, 6
    26f8:	f4 cf       	rjmp	.-24     	; 0x26e2 <twi_write_packet+0xb0>
		_delay_us(10);
		timeout_remaining--;
	}

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    26fa:	94 81       	ldd	r25, Z+4	; 0x04
    26fc:	96 fd       	sbrc	r25, 6
    26fe:	0a c0       	rjmp	.+20     	; 0x2714 <twi_write_packet+0xe2>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2700:	97 e0       	ldi	r25, 0x07	; 7
    2702:	93 83       	std	Z+3, r25	; 0x03
    2704:	c4 cf       	rjmp	.-120    	; 0x268e <twi_write_packet+0x5c>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    2706:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return length;
    2708:	df 91       	pop	r29
    270a:	cf 91       	pop	r28
    270c:	1f 91       	pop	r17
    270e:	0f 91       	pop	r16
    2710:	ef 90       	pop	r14
    2712:	08 95       	ret
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
		_delay_us(10);
		timeout_remaining--;
	}

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    2714:	94 81       	ldd	r25, Z+4	; 0x04
    2716:	2f ef       	ldi	r18, 0xFF	; 255
    2718:	28 0f       	add	r18, r24
    271a:	94 fd       	sbrc	r25, 4
    271c:	f1 cf       	rjmp	.-30     	; 0x2700 <twi_write_packet+0xce>
    271e:	82 2f       	mov	r24, r18
    2720:	d7 cf       	rjmp	.-82     	; 0x26d0 <twi_write_packet+0x9e>

00002722 <uart_setup>:

char uart_get_char(void) 
{
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
	return USARTD0.DATA;
}
    2722:	e0 e7       	ldi	r30, 0x70	; 112
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	84 81       	ldd	r24, Z+4	; 0x04
    2728:	8f 7e       	andi	r24, 0xEF	; 239
    272a:	84 83       	std	Z+4, r24	; 0x04
    272c:	e0 e6       	ldi	r30, 0x60	; 96
    272e:	f6 e0       	ldi	r31, 0x06	; 6
    2730:	84 e0       	ldi	r24, 0x04	; 4
    2732:	82 83       	std	Z+2, r24	; 0x02
    2734:	88 e0       	ldi	r24, 0x08	; 8
    2736:	81 83       	std	Z+1, r24	; 0x01
    2738:	88 e1       	ldi	r24, 0x18	; 24
    273a:	82 8b       	std	Z+18, r24	; 0x12
    273c:	83 8b       	std	Z+19, r24	; 0x13
    273e:	e0 ea       	ldi	r30, 0xA0	; 160
    2740:	f9 e0       	ldi	r31, 0x09	; 9
    2742:	90 e2       	ldi	r25, 0x20	; 32
    2744:	93 83       	std	Z+3, r25	; 0x03
    2746:	9e e2       	ldi	r25, 0x2E	; 46
    2748:	96 83       	std	Z+6, r25	; 0x06
    274a:	98 e9       	ldi	r25, 0x98	; 152
    274c:	97 83       	std	Z+7, r25	; 0x07
    274e:	93 e0       	ldi	r25, 0x03	; 3
    2750:	95 83       	std	Z+5, r25	; 0x05
    2752:	84 83       	std	Z+4, r24	; 0x04
    2754:	08 95       	ret

00002756 <uart_setup_debug>:
    2756:	e0 e7       	ldi	r30, 0x70	; 112
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	84 81       	ldd	r24, Z+4	; 0x04
    275c:	8f 7d       	andi	r24, 0xDF	; 223
    275e:	84 83       	std	Z+4, r24	; 0x04
    2760:	e0 e6       	ldi	r30, 0x60	; 96
    2762:	f6 e0       	ldi	r31, 0x06	; 6
    2764:	80 e4       	ldi	r24, 0x40	; 64
    2766:	82 83       	std	Z+2, r24	; 0x02
    2768:	80 e8       	ldi	r24, 0x80	; 128
    276a:	81 83       	std	Z+1, r24	; 0x01
    276c:	88 e1       	ldi	r24, 0x18	; 24
    276e:	86 8b       	std	Z+22, r24	; 0x16
    2770:	87 8b       	std	Z+23, r24	; 0x17
    2772:	e0 eb       	ldi	r30, 0xB0	; 176
    2774:	f9 e0       	ldi	r31, 0x09	; 9
    2776:	13 82       	std	Z+3, r1	; 0x03
    2778:	9e e2       	ldi	r25, 0x2E	; 46
    277a:	96 83       	std	Z+6, r25	; 0x06
    277c:	98 e9       	ldi	r25, 0x98	; 152
    277e:	97 83       	std	Z+7, r25	; 0x07
    2780:	93 e0       	ldi	r25, 0x03	; 3
    2782:	95 83       	std	Z+5, r25	; 0x05
    2784:	84 83       	std	Z+4, r24	; 0x04
    2786:	08 95       	ret

00002788 <uart_disable>:
    2788:	e0 ea       	ldi	r30, 0xA0	; 160
    278a:	f9 e0       	ldi	r31, 0x09	; 9
    278c:	14 82       	std	Z+4, r1	; 0x04
    278e:	e0 e6       	ldi	r30, 0x60	; 96
    2790:	f6 e0       	ldi	r31, 0x06	; 6
    2792:	8c e0       	ldi	r24, 0x0C	; 12
    2794:	82 83       	std	Z+2, r24	; 0x02
    2796:	80 e1       	ldi	r24, 0x10	; 16
    2798:	82 8b       	std	Z+18, r24	; 0x12
    279a:	83 8b       	std	Z+19, r24	; 0x13
    279c:	e0 e7       	ldi	r30, 0x70	; 112
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	84 81       	ldd	r24, Z+4	; 0x04
    27a2:	80 61       	ori	r24, 0x10	; 16
    27a4:	84 83       	std	Z+4, r24	; 0x04
    27a6:	08 95       	ret

000027a8 <uart_put_char>:
    27a8:	90 91 a1 09 	lds	r25, 0x09A1
    27ac:	95 ff       	sbrs	r25, 5
    27ae:	fc cf       	rjmp	.-8      	; 0x27a8 <uart_put_char>
    27b0:	80 93 a0 09 	sts	0x09A0, r24
    27b4:	08 95       	ret

000027b6 <uart_put_char_debug>:

void uart_put_char_debug(char c)
{
	while (!(USARTD1.STATUS & USART_DREIF_bm));
    27b6:	90 91 b1 09 	lds	r25, 0x09B1
    27ba:	95 ff       	sbrs	r25, 5
    27bc:	fc cf       	rjmp	.-8      	; 0x27b6 <uart_put_char_debug>
	USARTD1.DATA = c;
    27be:	80 93 b0 09 	sts	0x09B0, r24
    27c2:	08 95       	ret

000027c4 <uart_get_char_debug>:
}

char uart_get_char_debug(void)
{
	while (!(USARTD1.STATUS & USART_RXCIF_bm));
    27c4:	80 91 b1 09 	lds	r24, 0x09B1
    27c8:	87 ff       	sbrs	r24, 7
    27ca:	fc cf       	rjmp	.-8      	; 0x27c4 <uart_get_char_debug>
	return USARTD1.DATA;
    27cc:	80 91 b0 09 	lds	r24, 0x09B0
}
    27d0:	08 95       	ret

000027d2 <__vector_18>:
	dac_setup(false);
	timer_setup();
}

ISR(TCC0_CCC_vect) 
{
    27d2:	1f 92       	push	r1
    27d4:	0f 92       	push	r0
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	0f 92       	push	r0
    27da:	11 24       	eor	r1, r1
    27dc:	08 b6       	in	r0, 0x38	; 56
    27de:	0f 92       	push	r0
    27e0:	18 be       	out	0x38, r1	; 56
    27e2:	8f 93       	push	r24
    27e4:	9f 93       	push	r25
	if (test_val == 1)
    27e6:	80 91 4e 2c 	lds	r24, 0x2C4E
    27ea:	90 91 4f 2c 	lds	r25, 0x2C4F
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	99 f0       	breq	.+38     	; 0x2818 <__vector_18+0x46>
	{
		DACB.CH0DATA = 0xfff;
		test_val = 0;
	} else {
		DACB.CH0DATA = 0x000;
    27f2:	10 92 38 03 	sts	0x0338, r1
    27f6:	10 92 39 03 	sts	0x0339, r1
		test_val = 1;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	80 93 4e 2c 	sts	0x2C4E, r24
    2802:	90 93 4f 2c 	sts	0x2C4F, r25
	}
	
}
    2806:	9f 91       	pop	r25
    2808:	8f 91       	pop	r24
    280a:	0f 90       	pop	r0
    280c:	08 be       	out	0x38, r0	; 56
    280e:	0f 90       	pop	r0
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	0f 90       	pop	r0
    2814:	1f 90       	pop	r1
    2816:	18 95       	reti

ISR(TCC0_CCC_vect) 
{
	if (test_val == 1)
	{
		DACB.CH0DATA = 0xfff;
    2818:	8f ef       	ldi	r24, 0xFF	; 255
    281a:	9f e0       	ldi	r25, 0x0F	; 15
    281c:	80 93 38 03 	sts	0x0338, r24
    2820:	90 93 39 03 	sts	0x0339, r25
		test_val = 0;
    2824:	10 92 4e 2c 	sts	0x2C4E, r1
    2828:	10 92 4f 2c 	sts	0x2C4F, r1
    282c:	ec cf       	rjmp	.-40     	; 0x2806 <__vector_18+0x34>

0000282e <ultra_power_saving_mode_test>:
}

void ultra_power_saving_mode_test(void) 
{	
	//maybe add pullups
	si114x_reset((HANDLE)SI114X_ADDR);
    282e:	8a e5       	ldi	r24, 0x5A	; 90
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	57 da       	rcall	.-2898   	; 0x1ce2 <si114x_reset>
	si114x_setup_ps1();
    2834:	73 dd       	rcall	.-1306   	; 0x231c <si114x_setup_ps1>
	twi_off();
    2836:	56 de       	rcall	.-852    	; 0x24e4 <twi_off>
	uart_disable();
    2838:	a7 df       	rcall	.-178    	; 0x2788 <uart_disable>
	display_clear_screen();
    283a:	78 d0       	rcall	.+240    	; 0x292c <display_clear_screen>
	ht1632c_power_down();
    283c:	0e 94 65 07 	call	0xeca	; 0xeca <ht1632c_power_down>
	SLEEP.CTRL |= SLEEP_MODE_PWR_SAVE;
    2840:	80 91 48 00 	lds	r24, 0x0048
    2844:	86 60       	ori	r24, 0x06	; 6
    2846:	80 93 48 00 	sts	0x0048, r24
	SLEEP.CTRL |= SLEEP_SEN_bm;
    284a:	80 91 48 00 	lds	r24, 0x0048
    284e:	81 60       	ori	r24, 0x01	; 1
    2850:	80 93 48 00 	sts	0x0048, r24
	asm("sleep");
    2854:	88 95       	sleep
    2856:	ff cf       	rjmp	.-2      	; 0x2856 <ultra_power_saving_mode_test+0x28>

00002858 <main>:
{	
	//Structures
	SI114X_IRQ_SAMPLE sensor_data;
	
	//System
	clock_setup_32_mhz();
    2858:	0e 94 70 04 	call	0x8e0	; 0x8e0 <clock_setup_32_mhz>
	
	//lowpower_setup();
	display_setup();	
    285c:	5c d0       	rcall	.+184    	; 0x2916 <display_setup>
	spi_disable();
    285e:	1c de       	rcall	.-968    	; 0x2498 <spi_disable>
	uart_disable();
    2860:	93 df       	rcall	.-218    	; 0x2788 <uart_disable>
	btn_setup(POLL_MODE);
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	0e 94 cd 0a 	call	0x159a	; 0x159a <btn_setup>
	
	SLEEP.CTRL |= SLEEP_MODE_PWR_SAVE;
    2868:	80 91 48 00 	lds	r24, 0x0048
    286c:	86 60       	ori	r24, 0x06	; 6
    286e:	80 93 48 00 	sts	0x0048, r24
	
	//Init env variables
	btn_status = btn_check_press();
    2872:	0e 94 21 0b 	call	0x1642	; 0x1642 <btn_check_press>
    2876:	80 93 51 36 	sts	0x3651, r24
	
	if (!EEPROM_ReadEnv() || (btn_status == BTN1)) {
    287a:	0e 94 a7 04 	call	0x94e	; 0x94e <EEPROM_ReadEnv>
    287e:	88 23       	and	r24, r24
    2880:	09 f4       	brne	.+2      	; 0x2884 <main+0x2c>
    2882:	41 c0       	rjmp	.+130    	; 0x2906 <main+0xae>
    2884:	80 91 51 36 	lds	r24, 0x3651
    2888:	81 30       	cpi	r24, 0x01	; 1
    288a:	09 f4       	brne	.+2      	; 0x288e <main+0x36>
    288c:	3c c0       	rjmp	.+120    	; 0x2906 <main+0xae>
		menu_set_env_variables();
	} 
	
	//Debug interface
#ifdef DEBUG_ON
	uart_setup_debug();
    288e:	63 df       	rcall	.-314    	; 0x2756 <uart_setup_debug>
	stdout = stdin = &mystdout;
    2890:	87 e0       	ldi	r24, 0x07	; 7
    2892:	90 e2       	ldi	r25, 0x20	; 32
    2894:	80 93 8a 37 	sts	0x378A, r24
    2898:	90 93 8b 37 	sts	0x378B, r25
    289c:	80 93 8c 37 	sts	0x378C, r24
    28a0:	90 93 8d 37 	sts	0x378D, r25
	puts("- SQUARECLOCK - By: Erlend Hestnes (2016)\r\n");
    28a4:	84 e4       	ldi	r24, 0x44	; 68
    28a6:	91 e2       	ldi	r25, 0x21	; 33
    28a8:	0e 94 48 45 	call	0x8a90	; 0x8a90 <puts>
#endif

	puts("Configure UART driver...\r\n");
    28ac:	80 e7       	ldi	r24, 0x70	; 112
    28ae:	91 e2       	ldi	r25, 0x21	; 33
    28b0:	0e 94 48 45 	call	0x8a90	; 0x8a90 <puts>
	uart_setup();
    28b4:	36 df       	rcall	.-404    	; 0x2722 <uart_setup>
	puts("Success!");
    28b6:	8b e8       	ldi	r24, 0x8B	; 139
    28b8:	91 e2       	ldi	r25, 0x21	; 33
    28ba:	0e 94 48 45 	call	0x8a90	; 0x8a90 <puts>

	//Enable interrupts
	puts("Enable interrupts...\r\n");
    28be:	84 e9       	ldi	r24, 0x94	; 148
    28c0:	91 e2       	ldi	r25, 0x21	; 33
    28c2:	0e 94 48 45 	call	0x8a90	; 0x8a90 <puts>

static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char_debug,uart_get_char_debug,_FDEV_SETUP_WRITE);

void pmic_setup(void) 
{
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    28c6:	87 e0       	ldi	r24, 0x07	; 7
    28c8:	80 93 a2 00 	sts	0x00A2, r24
	puts("Success!");

	//Enable interrupts
	puts("Enable interrupts...\r\n");
	pmic_setup();
	sei();
    28cc:	78 94       	sei
	puts("Success!");
    28ce:	8b e8       	ldi	r24, 0x8B	; 139
    28d0:	91 e2       	ldi	r25, 0x21	; 33
    28d2:	0e 94 48 45 	call	0x8a90	; 0x8a90 <puts>
	}
	*/

#ifdef WIFI_ON
	//Configure WIFI buffers
	puts("Configure ESP8266 driver...\r\n");
    28d6:	8b ea       	ldi	r24, 0xAB	; 171
    28d8:	91 e2       	ldi	r25, 0x21	; 33
    28da:	0e 94 48 45 	call	0x8a90	; 0x8a90 <puts>
	if (menu_esp8266_setup() == MENU_SUCCESS) {
    28de:	0e 94 10 3a 	call	0x7420	; 0x7420 <menu_esp8266_setup>
    28e2:	81 30       	cpi	r24, 0x01	; 1
    28e4:	99 f0       	breq	.+38     	; 0x290c <main+0xb4>
		puts("Success!");	
	} else {
		puts("Error!");
    28e6:	89 ec       	ldi	r24, 0xC9	; 201
    28e8:	91 e2       	ldi	r25, 0x21	; 33
    28ea:	0e 94 48 45 	call	0x8a90	; 0x8a90 <puts>
	ESP8266_TimerStop();
	ESP8266_Off();
	*/
	
	//Turn on proximity channel 1 with ISR and threshold
	puts("Configure TWI driver...\r\n");
    28ee:	80 ed       	ldi	r24, 0xD0	; 208
    28f0:	91 e2       	ldi	r25, 0x21	; 33
    28f2:	0e 94 48 45 	call	0x8a90	; 0x8a90 <puts>
	twi_setup(&TWIC);
    28f6:	80 e8       	ldi	r24, 0x80	; 128
    28f8:	94 e0       	ldi	r25, 0x04	; 4
    28fa:	e5 dd       	rcall	.-1078   	; 0x24c6 <twi_setup>
	puts("Success!");
    28fc:	8b e8       	ldi	r24, 0x8B	; 139
    28fe:	91 e2       	ldi	r25, 0x21	; 33
    2900:	0e 94 48 45 	call	0x8a90	; 0x8a90 <puts>
	
	ultra_power_saving_mode_test();
    2904:	94 df       	rcall	.-216    	; 0x282e <ultra_power_saving_mode_test>
	
	//Init env variables
	btn_status = btn_check_press();
	
	if (!EEPROM_ReadEnv() || (btn_status == BTN1)) {
		menu_set_env_variables();
    2906:	0e 94 25 3a 	call	0x744a	; 0x744a <menu_set_env_variables>
    290a:	c1 cf       	rjmp	.-126    	; 0x288e <main+0x36>

#ifdef WIFI_ON
	//Configure WIFI buffers
	puts("Configure ESP8266 driver...\r\n");
	if (menu_esp8266_setup() == MENU_SUCCESS) {
		puts("Success!");	
    290c:	8b e8       	ldi	r24, 0x8B	; 139
    290e:	91 e2       	ldi	r25, 0x21	; 33
    2910:	0e 94 48 45 	call	0x8a90	; 0x8a90 <puts>
    2914:	ec cf       	rjmp	.-40     	; 0x28ee <main+0x96>

00002916 <display_setup>:
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    2916:	84 e2       	ldi	r24, 0x24	; 36
    2918:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <ht1632c_setup>
    291c:	8f e0       	ldi	r24, 0x0F	; 15
    291e:	0e 94 be 07 	call	0xf7c	; 0xf7c <ht1632c_set_brightness>
    2922:	0e 94 b0 08 	call	0x1160	; 0x1160 <ht1632c_clear_screen>
    2926:	83 e0       	ldi	r24, 0x03	; 3
    2928:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <ht1632c_write_command>

0000292c <display_clear_screen>:
    292c:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <ht1632c_clear_screen>

00002930 <display_refresh_screen>:
    2930:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <ht1632c_refresh_screen>

00002934 <display_show_loading_square>:
    2934:	7f 92       	push	r7
    2936:	8f 92       	push	r8
    2938:	9f 92       	push	r9
    293a:	af 92       	push	r10
    293c:	bf 92       	push	r11
    293e:	cf 92       	push	r12
    2940:	df 92       	push	r13
    2942:	ef 92       	push	r14
    2944:	ff 92       	push	r15
    2946:	0f 93       	push	r16
    2948:	1f 93       	push	r17
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
    294e:	90 90 17 20 	lds	r9, 0x2017
    2952:	80 90 16 20 	lds	r8, 0x2016
    2956:	e8 2c       	mov	r14, r8
    2958:	f1 2c       	mov	r15, r1
    295a:	c9 2d       	mov	r28, r9
    295c:	d0 e0       	ldi	r29, 0x00	; 0
    295e:	c7 01       	movw	r24, r14
    2960:	5f e0       	ldi	r21, 0x0F	; 15
    2962:	a5 2e       	mov	r10, r21
    2964:	b1 2c       	mov	r11, r1
    2966:	68 e1       	ldi	r22, 0x18	; 24
    2968:	c6 2e       	mov	r12, r22
    296a:	d1 2c       	mov	r13, r1
    296c:	9c 01       	movw	r18, r24
    296e:	22 0f       	add	r18, r18
    2970:	33 1f       	adc	r19, r19
    2972:	89 01       	movw	r16, r18
    2974:	0f 50       	subi	r16, 0x0F	; 15
    2976:	11 09       	sbc	r17, r1
    2978:	88 30       	cpi	r24, 0x08	; 8
    297a:	91 05       	cpc	r25, r1
    297c:	0c f0       	brlt	.+2      	; 0x2980 <display_show_loading_square+0x4c>
    297e:	98 01       	movw	r18, r16
    2980:	89 01       	movw	r16, r18
    2982:	00 0f       	add	r16, r16
    2984:	11 1f       	adc	r17, r17
    2986:	00 0f       	add	r16, r16
    2988:	11 1f       	adc	r17, r17
    298a:	00 0f       	add	r16, r16
    298c:	11 1f       	adc	r17, r17
    298e:	40 97       	sbiw	r24, 0x10	; 16
    2990:	8c f1       	brlt	.+98     	; 0x29f4 <display_show_loading_square+0xc0>
    2992:	29 2d       	mov	r18, r9
    2994:	2f 5f       	subi	r18, 0xFF	; 255
    2996:	82 2f       	mov	r24, r18
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	c8 17       	cp	r28, r24
    299c:	d9 07       	cpc	r29, r25
    299e:	d4 f7       	brge	.-12     	; 0x2994 <display_show_loading_square+0x60>
    29a0:	83 94       	inc	r8
    29a2:	88 2d       	mov	r24, r8
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	e8 16       	cp	r14, r24
    29a8:	f9 06       	cpc	r15, r25
    29aa:	04 f7       	brge	.-64     	; 0x296c <display_show_loading_square+0x38>
    29ac:	80 91 17 20 	lds	r24, 0x2017
    29b0:	90 91 16 20 	lds	r25, 0x2016
    29b4:	87 30       	cpi	r24, 0x07	; 7
    29b6:	08 f4       	brcc	.+2      	; 0x29ba <display_show_loading_square+0x86>
    29b8:	49 c0       	rjmp	.+146    	; 0x2a4c <display_show_loading_square+0x118>
    29ba:	99 30       	cpi	r25, 0x09	; 9
    29bc:	09 f4       	brne	.+2      	; 0x29c0 <display_show_loading_square+0x8c>
    29be:	ba c0       	rjmp	.+372    	; 0x2b34 <display_show_loading_square+0x200>
    29c0:	89 30       	cpi	r24, 0x09	; 9
    29c2:	08 f4       	brcc	.+2      	; 0x29c6 <display_show_loading_square+0x92>
    29c4:	48 c0       	rjmp	.+144    	; 0x2a56 <display_show_loading_square+0x122>
    29c6:	89 30       	cpi	r24, 0x09	; 9
    29c8:	09 f0       	breq	.+2      	; 0x29cc <display_show_loading_square+0x98>
    29ca:	48 c0       	rjmp	.+144    	; 0x2a5c <display_show_loading_square+0x128>
    29cc:	99 30       	cpi	r25, 0x09	; 9
    29ce:	08 f0       	brcs	.+2      	; 0x29d2 <display_show_loading_square+0x9e>
    29d0:	81 c0       	rjmp	.+258    	; 0x2ad4 <display_show_loading_square+0x1a0>
    29d2:	9f 5f       	subi	r25, 0xFF	; 255
    29d4:	90 93 16 20 	sts	0x2016, r25
    29d8:	99 30       	cpi	r25, 0x09	; 9
    29da:	09 f0       	breq	.+2      	; 0x29de <display_show_loading_square+0xaa>
    29dc:	7b c0       	rjmp	.+246    	; 0x2ad4 <display_show_loading_square+0x1a0>
    29de:	80 91 15 20 	lds	r24, 0x2015
    29e2:	91 e0       	ldi	r25, 0x01	; 1
    29e4:	89 27       	eor	r24, r25
    29e6:	80 93 15 20 	sts	0x2015, r24
    29ea:	e9 e0       	ldi	r30, 0x09	; 9
    29ec:	8e 2e       	mov	r8, r30
    29ee:	f9 e0       	ldi	r31, 0x09	; 9
    29f0:	9f 2e       	mov	r9, r31
    29f2:	36 c0       	rjmp	.+108    	; 0x2a60 <display_show_loading_square+0x12c>
    29f4:	79 2c       	mov	r7, r9
    29f6:	ce 01       	movw	r24, r28
    29f8:	06 c0       	rjmp	.+12     	; 0x2a06 <display_show_loading_square+0xd2>
    29fa:	73 94       	inc	r7
    29fc:	87 2d       	mov	r24, r7
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	c8 17       	cp	r28, r24
    2a02:	d9 07       	cpc	r29, r25
    2a04:	6c f2       	brlt	.-102    	; 0x29a0 <display_show_loading_square+0x6c>
    2a06:	80 31       	cpi	r24, 0x10	; 16
    2a08:	91 05       	cpc	r25, r1
    2a0a:	bc f7       	brge	.-18     	; 0x29fa <display_show_loading_square+0xc6>
    2a0c:	95 01       	movw	r18, r10
    2a0e:	28 1b       	sub	r18, r24
    2a10:	39 0b       	sbc	r19, r25
    2a12:	c9 01       	movw	r24, r18
    2a14:	b6 01       	movw	r22, r12
    2a16:	0e 94 0b 42 	call	0x8416	; 0x8416 <__divmodhi4>
    2a1a:	88 30       	cpi	r24, 0x08	; 8
    2a1c:	91 05       	cpc	r25, r1
    2a1e:	6c f4       	brge	.+26     	; 0x2a3a <display_show_loading_square+0x106>
    2a20:	27 e0       	ldi	r18, 0x07	; 7
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	87 70       	andi	r24, 0x07	; 7
    2a26:	99 27       	eor	r25, r25
    2a28:	a9 01       	movw	r20, r18
    2a2a:	48 1b       	sub	r20, r24
    2a2c:	59 0b       	sbc	r21, r25
    2a2e:	ca 01       	movw	r24, r20
    2a30:	80 0f       	add	r24, r16
    2a32:	91 1f       	adc	r25, r17
    2a34:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    2a38:	e0 cf       	rjmp	.-64     	; 0x29fa <display_show_loading_square+0xc6>
    2a3a:	80 31       	cpi	r24, 0x10	; 16
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	1c f4       	brge	.+6      	; 0x2a46 <display_show_loading_square+0x112>
    2a40:	27 e8       	ldi	r18, 0x87	; 135
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	ef cf       	rjmp	.-34     	; 0x2a24 <display_show_loading_square+0xf0>
    2a46:	27 e0       	ldi	r18, 0x07	; 7
    2a48:	31 e0       	ldi	r19, 0x01	; 1
    2a4a:	ec cf       	rjmp	.-40     	; 0x2a24 <display_show_loading_square+0xf0>
    2a4c:	86 30       	cpi	r24, 0x06	; 6
    2a4e:	19 f4       	brne	.+6      	; 0x2a56 <display_show_loading_square+0x122>
    2a50:	97 30       	cpi	r25, 0x07	; 7
    2a52:	08 f0       	brcs	.+2      	; 0x2a56 <display_show_loading_square+0x122>
    2a54:	76 c0       	rjmp	.+236    	; 0x2b42 <display_show_loading_square+0x20e>
    2a56:	96 30       	cpi	r25, 0x06	; 6
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <display_show_loading_square+0x128>
    2a5a:	7a c0       	rjmp	.+244    	; 0x2b50 <display_show_loading_square+0x21c>
    2a5c:	89 2e       	mov	r8, r25
    2a5e:	98 2e       	mov	r9, r24
    2a60:	e8 2c       	mov	r14, r8
    2a62:	f1 2c       	mov	r15, r1
    2a64:	c9 2d       	mov	r28, r9
    2a66:	d0 e0       	ldi	r29, 0x00	; 0
    2a68:	c7 01       	movw	r24, r14
    2a6a:	5f e0       	ldi	r21, 0x0F	; 15
    2a6c:	a5 2e       	mov	r10, r21
    2a6e:	b1 2c       	mov	r11, r1
    2a70:	68 e1       	ldi	r22, 0x18	; 24
    2a72:	c6 2e       	mov	r12, r22
    2a74:	d1 2c       	mov	r13, r1
    2a76:	9c 01       	movw	r18, r24
    2a78:	22 0f       	add	r18, r18
    2a7a:	33 1f       	adc	r19, r19
    2a7c:	89 01       	movw	r16, r18
    2a7e:	0f 50       	subi	r16, 0x0F	; 15
    2a80:	11 09       	sbc	r17, r1
    2a82:	88 30       	cpi	r24, 0x08	; 8
    2a84:	91 05       	cpc	r25, r1
    2a86:	0c f0       	brlt	.+2      	; 0x2a8a <display_show_loading_square+0x156>
    2a88:	98 01       	movw	r18, r16
    2a8a:	89 01       	movw	r16, r18
    2a8c:	00 0f       	add	r16, r16
    2a8e:	11 1f       	adc	r17, r17
    2a90:	00 0f       	add	r16, r16
    2a92:	11 1f       	adc	r17, r17
    2a94:	00 0f       	add	r16, r16
    2a96:	11 1f       	adc	r17, r17
    2a98:	40 97       	sbiw	r24, 0x10	; 16
    2a9a:	04 f1       	brlt	.+64     	; 0x2adc <display_show_loading_square+0x1a8>
    2a9c:	29 2d       	mov	r18, r9
    2a9e:	2f 5f       	subi	r18, 0xFF	; 255
    2aa0:	82 2f       	mov	r24, r18
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	c8 17       	cp	r28, r24
    2aa6:	d9 07       	cpc	r29, r25
    2aa8:	d4 f7       	brge	.-12     	; 0x2a9e <display_show_loading_square+0x16a>
    2aaa:	83 94       	inc	r8
    2aac:	88 2d       	mov	r24, r8
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	e8 16       	cp	r14, r24
    2ab2:	f9 06       	cpc	r15, r25
    2ab4:	04 f7       	brge	.-64     	; 0x2a76 <display_show_loading_square+0x142>
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	1f 91       	pop	r17
    2abc:	0f 91       	pop	r16
    2abe:	ff 90       	pop	r15
    2ac0:	ef 90       	pop	r14
    2ac2:	df 90       	pop	r13
    2ac4:	cf 90       	pop	r12
    2ac6:	bf 90       	pop	r11
    2ac8:	af 90       	pop	r10
    2aca:	9f 90       	pop	r9
    2acc:	8f 90       	pop	r8
    2ace:	7f 90       	pop	r7
    2ad0:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <ht1632c_refresh_screen>
    2ad4:	89 2e       	mov	r8, r25
    2ad6:	79 e0       	ldi	r23, 0x09	; 9
    2ad8:	97 2e       	mov	r9, r23
    2ada:	c2 cf       	rjmp	.-124    	; 0x2a60 <display_show_loading_square+0x12c>
    2adc:	79 2c       	mov	r7, r9
    2ade:	ce 01       	movw	r24, r28
    2ae0:	06 c0       	rjmp	.+12     	; 0x2aee <display_show_loading_square+0x1ba>
    2ae2:	73 94       	inc	r7
    2ae4:	87 2d       	mov	r24, r7
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	c8 17       	cp	r28, r24
    2aea:	d9 07       	cpc	r29, r25
    2aec:	f4 f2       	brlt	.-68     	; 0x2aaa <display_show_loading_square+0x176>
    2aee:	80 31       	cpi	r24, 0x10	; 16
    2af0:	91 05       	cpc	r25, r1
    2af2:	bc f7       	brge	.-18     	; 0x2ae2 <display_show_loading_square+0x1ae>
    2af4:	95 01       	movw	r18, r10
    2af6:	28 1b       	sub	r18, r24
    2af8:	39 0b       	sbc	r19, r25
    2afa:	c9 01       	movw	r24, r18
    2afc:	b6 01       	movw	r22, r12
    2afe:	0e 94 0b 42 	call	0x8416	; 0x8416 <__divmodhi4>
    2b02:	88 30       	cpi	r24, 0x08	; 8
    2b04:	91 05       	cpc	r25, r1
    2b06:	6c f4       	brge	.+26     	; 0x2b22 <display_show_loading_square+0x1ee>
    2b08:	27 e0       	ldi	r18, 0x07	; 7
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	87 70       	andi	r24, 0x07	; 7
    2b0e:	99 27       	eor	r25, r25
    2b10:	a9 01       	movw	r20, r18
    2b12:	48 1b       	sub	r20, r24
    2b14:	59 0b       	sbc	r21, r25
    2b16:	ca 01       	movw	r24, r20
    2b18:	80 0f       	add	r24, r16
    2b1a:	91 1f       	adc	r25, r17
    2b1c:	0e 94 9a 08 	call	0x1134	; 0x1134 <ht1632c_clr_pixel>
    2b20:	e0 cf       	rjmp	.-64     	; 0x2ae2 <display_show_loading_square+0x1ae>
    2b22:	80 31       	cpi	r24, 0x10	; 16
    2b24:	91 05       	cpc	r25, r1
    2b26:	1c f4       	brge	.+6      	; 0x2b2e <display_show_loading_square+0x1fa>
    2b28:	27 e8       	ldi	r18, 0x87	; 135
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	ef cf       	rjmp	.-34     	; 0x2b0c <display_show_loading_square+0x1d8>
    2b2e:	27 e0       	ldi	r18, 0x07	; 7
    2b30:	31 e0       	ldi	r19, 0x01	; 1
    2b32:	ec cf       	rjmp	.-40     	; 0x2b0c <display_show_loading_square+0x1d8>
    2b34:	81 50       	subi	r24, 0x01	; 1
    2b36:	80 93 17 20 	sts	0x2017, r24
    2b3a:	98 2e       	mov	r9, r24
    2b3c:	c9 e0       	ldi	r28, 0x09	; 9
    2b3e:	8c 2e       	mov	r8, r28
    2b40:	8f cf       	rjmp	.-226    	; 0x2a60 <display_show_loading_square+0x12c>
    2b42:	91 50       	subi	r25, 0x01	; 1
    2b44:	90 93 16 20 	sts	0x2016, r25
    2b48:	89 2e       	mov	r8, r25
    2b4a:	b6 e0       	ldi	r27, 0x06	; 6
    2b4c:	9b 2e       	mov	r9, r27
    2b4e:	88 cf       	rjmp	.-240    	; 0x2a60 <display_show_loading_square+0x12c>
    2b50:	8f 5f       	subi	r24, 0xFF	; 255
    2b52:	80 93 17 20 	sts	0x2017, r24
    2b56:	a6 e0       	ldi	r26, 0x06	; 6
    2b58:	8a 2e       	mov	r8, r26
    2b5a:	98 2e       	mov	r9, r24
    2b5c:	81 cf       	rjmp	.-254    	; 0x2a60 <display_show_loading_square+0x12c>

00002b5e <display_draw_filled_rect>:
    2b5e:	4f 92       	push	r4
    2b60:	5f 92       	push	r5
    2b62:	6f 92       	push	r6
    2b64:	7f 92       	push	r7
    2b66:	8f 92       	push	r8
    2b68:	9f 92       	push	r9
    2b6a:	af 92       	push	r10
    2b6c:	bf 92       	push	r11
    2b6e:	cf 92       	push	r12
    2b70:	df 92       	push	r13
    2b72:	ef 92       	push	r14
    2b74:	ff 92       	push	r15
    2b76:	0f 93       	push	r16
    2b78:	1f 93       	push	r17
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	18 2f       	mov	r17, r24
    2b80:	56 2e       	mov	r5, r22
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	5c 01       	movw	r10, r24
    2b86:	a4 0e       	add	r10, r20
    2b88:	b1 1c       	adc	r11, r1
    2b8a:	8a 15       	cp	r24, r10
    2b8c:	9b 05       	cpc	r25, r11
    2b8e:	7c f5       	brge	.+94     	; 0x2bee <display_draw_filled_rect+0x90>
    2b90:	e6 2e       	mov	r14, r22
    2b92:	f1 2c       	mov	r15, r1
    2b94:	e7 01       	movw	r28, r14
    2b96:	c2 0f       	add	r28, r18
    2b98:	d1 1d       	adc	r29, r1
    2b9a:	7f e0       	ldi	r23, 0x0F	; 15
    2b9c:	67 2e       	mov	r6, r23
    2b9e:	71 2c       	mov	r7, r1
    2ba0:	e8 e1       	ldi	r30, 0x18	; 24
    2ba2:	8e 2e       	mov	r8, r30
    2ba4:	91 2c       	mov	r9, r1
    2ba6:	ec 16       	cp	r14, r28
    2ba8:	fd 06       	cpc	r15, r29
    2baa:	dc f4       	brge	.+54     	; 0x2be2 <display_draw_filled_rect+0x84>
    2bac:	9c 01       	movw	r18, r24
    2bae:	22 0f       	add	r18, r18
    2bb0:	33 1f       	adc	r19, r19
    2bb2:	69 01       	movw	r12, r18
    2bb4:	4f e0       	ldi	r20, 0x0F	; 15
    2bb6:	c4 1a       	sub	r12, r20
    2bb8:	d1 08       	sbc	r13, r1
    2bba:	88 30       	cpi	r24, 0x08	; 8
    2bbc:	91 05       	cpc	r25, r1
    2bbe:	0c f0       	brlt	.+2      	; 0x2bc2 <display_draw_filled_rect+0x64>
    2bc0:	96 01       	movw	r18, r12
    2bc2:	69 01       	movw	r12, r18
    2bc4:	cc 0c       	add	r12, r12
    2bc6:	dd 1c       	adc	r13, r13
    2bc8:	cc 0c       	add	r12, r12
    2bca:	dd 1c       	adc	r13, r13
    2bcc:	cc 0c       	add	r12, r12
    2bce:	dd 1c       	adc	r13, r13
    2bd0:	40 97       	sbiw	r24, 0x10	; 16
    2bd2:	f4 f0       	brlt	.+60     	; 0x2c10 <display_draw_filled_rect+0xb2>
    2bd4:	85 2d       	mov	r24, r5
    2bd6:	8f 5f       	subi	r24, 0xFF	; 255
    2bd8:	28 2f       	mov	r18, r24
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	2c 17       	cp	r18, r28
    2bde:	3d 07       	cpc	r19, r29
    2be0:	d4 f3       	brlt	.-12     	; 0x2bd6 <display_draw_filled_rect+0x78>
    2be2:	1f 5f       	subi	r17, 0xFF	; 255
    2be4:	81 2f       	mov	r24, r17
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	8a 15       	cp	r24, r10
    2bea:	9b 05       	cpc	r25, r11
    2bec:	e4 f2       	brlt	.-72     	; 0x2ba6 <display_draw_filled_rect+0x48>
    2bee:	df 91       	pop	r29
    2bf0:	cf 91       	pop	r28
    2bf2:	1f 91       	pop	r17
    2bf4:	0f 91       	pop	r16
    2bf6:	ff 90       	pop	r15
    2bf8:	ef 90       	pop	r14
    2bfa:	df 90       	pop	r13
    2bfc:	cf 90       	pop	r12
    2bfe:	bf 90       	pop	r11
    2c00:	af 90       	pop	r10
    2c02:	9f 90       	pop	r9
    2c04:	8f 90       	pop	r8
    2c06:	7f 90       	pop	r7
    2c08:	6f 90       	pop	r6
    2c0a:	5f 90       	pop	r5
    2c0c:	4f 90       	pop	r4
    2c0e:	08 95       	ret
    2c10:	c7 01       	movw	r24, r14
    2c12:	45 2c       	mov	r4, r5
    2c14:	00 23       	and	r16, r16
    2c16:	39 f0       	breq	.+14     	; 0x2c26 <display_draw_filled_rect+0xc8>
    2c18:	40 c0       	rjmp	.+128    	; 0x2c9a <display_draw_filled_rect+0x13c>
    2c1a:	43 94       	inc	r4
    2c1c:	84 2d       	mov	r24, r4
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	8c 17       	cp	r24, r28
    2c22:	9d 07       	cpc	r25, r29
    2c24:	f4 f6       	brge	.-68     	; 0x2be2 <display_draw_filled_rect+0x84>
    2c26:	80 31       	cpi	r24, 0x10	; 16
    2c28:	91 05       	cpc	r25, r1
    2c2a:	bc f7       	brge	.-18     	; 0x2c1a <display_draw_filled_rect+0xbc>
    2c2c:	93 01       	movw	r18, r6
    2c2e:	28 1b       	sub	r18, r24
    2c30:	39 0b       	sbc	r19, r25
    2c32:	c9 01       	movw	r24, r18
    2c34:	b4 01       	movw	r22, r8
    2c36:	0e 94 0b 42 	call	0x8416	; 0x8416 <__divmodhi4>
    2c3a:	88 30       	cpi	r24, 0x08	; 8
    2c3c:	91 05       	cpc	r25, r1
    2c3e:	8c f1       	brlt	.+98     	; 0x2ca2 <display_draw_filled_rect+0x144>
    2c40:	80 31       	cpi	r24, 0x10	; 16
    2c42:	91 05       	cpc	r25, r1
    2c44:	bc f5       	brge	.+110    	; 0x2cb4 <display_draw_filled_rect+0x156>
    2c46:	27 e8       	ldi	r18, 0x87	; 135
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	87 70       	andi	r24, 0x07	; 7
    2c4c:	99 27       	eor	r25, r25
    2c4e:	a9 01       	movw	r20, r18
    2c50:	48 1b       	sub	r20, r24
    2c52:	59 0b       	sbc	r21, r25
    2c54:	ca 01       	movw	r24, r20
    2c56:	8c 0d       	add	r24, r12
    2c58:	9d 1d       	adc	r25, r13
    2c5a:	0e 94 9a 08 	call	0x1134	; 0x1134 <ht1632c_clr_pixel>
    2c5e:	dd cf       	rjmp	.-70     	; 0x2c1a <display_draw_filled_rect+0xbc>
    2c60:	93 01       	movw	r18, r6
    2c62:	28 1b       	sub	r18, r24
    2c64:	39 0b       	sbc	r19, r25
    2c66:	c9 01       	movw	r24, r18
    2c68:	b4 01       	movw	r22, r8
    2c6a:	0e 94 0b 42 	call	0x8416	; 0x8416 <__divmodhi4>
    2c6e:	88 30       	cpi	r24, 0x08	; 8
    2c70:	91 05       	cpc	r25, r1
    2c72:	d4 f4       	brge	.+52     	; 0x2ca8 <display_draw_filled_rect+0x14a>
    2c74:	27 e0       	ldi	r18, 0x07	; 7
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	87 70       	andi	r24, 0x07	; 7
    2c7a:	99 27       	eor	r25, r25
    2c7c:	a9 01       	movw	r20, r18
    2c7e:	48 1b       	sub	r20, r24
    2c80:	59 0b       	sbc	r21, r25
    2c82:	ca 01       	movw	r24, r20
    2c84:	8c 0d       	add	r24, r12
    2c86:	9d 1d       	adc	r25, r13
    2c88:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    2c8c:	43 94       	inc	r4
    2c8e:	84 2d       	mov	r24, r4
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	8c 17       	cp	r24, r28
    2c94:	9d 07       	cpc	r25, r29
    2c96:	0c f0       	brlt	.+2      	; 0x2c9a <display_draw_filled_rect+0x13c>
    2c98:	a4 cf       	rjmp	.-184    	; 0x2be2 <display_draw_filled_rect+0x84>
    2c9a:	80 31       	cpi	r24, 0x10	; 16
    2c9c:	91 05       	cpc	r25, r1
    2c9e:	b4 f7       	brge	.-20     	; 0x2c8c <display_draw_filled_rect+0x12e>
    2ca0:	df cf       	rjmp	.-66     	; 0x2c60 <display_draw_filled_rect+0x102>
    2ca2:	27 e0       	ldi	r18, 0x07	; 7
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	d1 cf       	rjmp	.-94     	; 0x2c4a <display_draw_filled_rect+0xec>
    2ca8:	80 31       	cpi	r24, 0x10	; 16
    2caa:	91 05       	cpc	r25, r1
    2cac:	34 f4       	brge	.+12     	; 0x2cba <display_draw_filled_rect+0x15c>
    2cae:	27 e8       	ldi	r18, 0x87	; 135
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	e2 cf       	rjmp	.-60     	; 0x2c78 <display_draw_filled_rect+0x11a>
    2cb4:	27 e0       	ldi	r18, 0x07	; 7
    2cb6:	31 e0       	ldi	r19, 0x01	; 1
    2cb8:	c8 cf       	rjmp	.-112    	; 0x2c4a <display_draw_filled_rect+0xec>
    2cba:	27 e0       	ldi	r18, 0x07	; 7
    2cbc:	31 e0       	ldi	r19, 0x01	; 1
    2cbe:	dc cf       	rjmp	.-72     	; 0x2c78 <display_draw_filled_rect+0x11a>

00002cc0 <display_draw_char>:
    2cc0:	2f 92       	push	r2
    2cc2:	3f 92       	push	r3
    2cc4:	4f 92       	push	r4
    2cc6:	5f 92       	push	r5
    2cc8:	6f 92       	push	r6
    2cca:	7f 92       	push	r7
    2ccc:	8f 92       	push	r8
    2cce:	9f 92       	push	r9
    2cd0:	af 92       	push	r10
    2cd2:	bf 92       	push	r11
    2cd4:	cf 92       	push	r12
    2cd6:	df 92       	push	r13
    2cd8:	ef 92       	push	r14
    2cda:	ff 92       	push	r15
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	6d 97       	sbiw	r28, 0x1d	; 29
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	6c 83       	std	Y+4, r22	; 0x04
    2cf0:	7d 83       	std	Y+5, r23	; 0x05
    2cf2:	2b 8b       	std	Y+19, r18	; 0x13
    2cf4:	0b 83       	std	Y+3, r16	; 0x03
    2cf6:	55 e0       	ldi	r21, 0x05	; 5
    2cf8:	45 9f       	mul	r20, r21
    2cfa:	90 01       	movw	r18, r0
    2cfc:	11 24       	eor	r1, r1
    2cfe:	2a 59       	subi	r18, 0x9A	; 154
    2d00:	3d 4f       	sbci	r19, 0xFD	; 253
    2d02:	2b 87       	std	Y+11, r18	; 0x0b
    2d04:	3c 87       	std	Y+12, r19	; 0x0c
    2d06:	8e 83       	std	Y+6, r24	; 0x06
    2d08:	9f 83       	std	Y+7, r25	; 0x07
    2d0a:	88 0f       	add	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	8e 87       	std	Y+14, r24	; 0x0e
    2d10:	9f 87       	std	Y+15, r25	; 0x0f
    2d12:	2e 81       	ldd	r18, Y+6	; 0x06
    2d14:	3f 81       	ldd	r19, Y+7	; 0x07
    2d16:	2b 5f       	subi	r18, 0xFB	; 251
    2d18:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1a:	28 8f       	std	Y+24, r18	; 0x18
    2d1c:	39 8f       	std	Y+25, r19	; 0x19
    2d1e:	30 2f       	mov	r19, r16
    2d20:	33 0f       	add	r19, r19
    2d22:	33 0f       	add	r19, r19
    2d24:	33 0f       	add	r19, r19
    2d26:	30 1b       	sub	r19, r16
    2d28:	5c 81       	ldd	r21, Y+4	; 0x04
    2d2a:	35 0f       	add	r19, r21
    2d2c:	3a 8b       	std	Y+18, r19	; 0x12
    2d2e:	2e 81       	ldd	r18, Y+6	; 0x06
    2d30:	2a 87       	std	Y+10, r18	; 0x0a
    2d32:	40 2f       	mov	r20, r16
    2d34:	50 e0       	ldi	r21, 0x00	; 0
    2d36:	48 8b       	std	Y+16, r20	; 0x10
    2d38:	59 8b       	std	Y+17, r21	; 0x11
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	07 96       	adiw	r24, 0x07	; 7
    2d3e:	8a 8f       	std	Y+26, r24	; 0x1a
    2d40:	9b 8f       	std	Y+27, r25	; 0x1b
    2d42:	29 e0       	ldi	r18, 0x09	; 9
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	26 1b       	sub	r18, r22
    2d48:	37 0b       	sbc	r19, r23
    2d4a:	2c 8b       	std	Y+20, r18	; 0x14
    2d4c:	3d 8b       	std	Y+21, r19	; 0x15
    2d4e:	ff e0       	ldi	r31, 0x0F	; 15
    2d50:	af 2e       	mov	r10, r31
    2d52:	b1 2c       	mov	r11, r1
    2d54:	a8 e1       	ldi	r26, 0x18	; 24
    2d56:	6a 2e       	mov	r6, r26
    2d58:	71 2c       	mov	r7, r1
    2d5a:	eb 85       	ldd	r30, Y+11	; 0x0b
    2d5c:	fc 85       	ldd	r31, Y+12	; 0x0c
    2d5e:	24 90       	lpm	r2, Z
    2d60:	2e 81       	ldd	r18, Y+6	; 0x06
    2d62:	3f 81       	ldd	r19, Y+7	; 0x07
    2d64:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d66:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d68:	28 30       	cpi	r18, 0x08	; 8
    2d6a:	31 05       	cpc	r19, r1
    2d6c:	0c f0       	brlt	.+2      	; 0x2d70 <display_draw_char+0xb0>
    2d6e:	0f 97       	sbiw	r24, 0x0f	; 15
    2d70:	ac 01       	movw	r20, r24
    2d72:	44 0f       	add	r20, r20
    2d74:	55 1f       	adc	r21, r21
    2d76:	44 0f       	add	r20, r20
    2d78:	55 1f       	adc	r21, r21
    2d7a:	44 0f       	add	r20, r20
    2d7c:	55 1f       	adc	r21, r21
    2d7e:	4e 8b       	std	Y+22, r20	; 0x16
    2d80:	5f 8b       	std	Y+23, r21	; 0x17
    2d82:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d84:	23 2f       	mov	r18, r19
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	28 87       	std	Y+8, r18	; 0x08
    2d8a:	39 87       	std	Y+9, r19	; 0x09
    2d8c:	69 01       	movw	r12, r18
    2d8e:	48 89       	ldd	r20, Y+16	; 0x10
    2d90:	59 89       	ldd	r21, Y+17	; 0x11
    2d92:	c4 0e       	add	r12, r20
    2d94:	d5 1e       	adc	r13, r21
    2d96:	2c 89       	ldd	r18, Y+20	; 0x14
    2d98:	3d 89       	ldd	r19, Y+21	; 0x15
    2d9a:	29 83       	std	Y+1, r18	; 0x01
    2d9c:	3a 83       	std	Y+2, r19	; 0x02
    2d9e:	ea 8c       	ldd	r14, Y+26	; 0x1a
    2da0:	fb 8c       	ldd	r15, Y+27	; 0x1b
    2da2:	4a 88       	ldd	r4, Y+18	; 0x12
    2da4:	1c c0       	rjmp	.+56     	; 0x2dde <display_draw_char+0x11e>
    2da6:	4e 81       	ldd	r20, Y+6	; 0x06
    2da8:	5f 81       	ldd	r21, Y+7	; 0x07
    2daa:	40 31       	cpi	r20, 0x10	; 16
    2dac:	51 05       	cpc	r21, r1
    2dae:	28 f4       	brcc	.+10     	; 0x2dba <display_draw_char+0xfa>
    2db0:	51 e1       	ldi	r21, 0x11	; 17
    2db2:	e5 16       	cp	r14, r21
    2db4:	f1 04       	cpc	r15, r1
    2db6:	0c f4       	brge	.+2      	; 0x2dba <display_draw_char+0xfa>
    2db8:	e6 c0       	rjmp	.+460    	; 0x2f86 <display_draw_char+0x2c6>
    2dba:	26 94       	lsr	r2
    2dbc:	49 81       	ldd	r20, Y+1	; 0x01
    2dbe:	5a 81       	ldd	r21, Y+2	; 0x02
    2dc0:	4f 5f       	subi	r20, 0xFF	; 255
    2dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc4:	49 83       	std	Y+1, r20	; 0x01
    2dc6:	5a 83       	std	Y+2, r21	; 0x02
    2dc8:	51 e0       	ldi	r21, 0x01	; 1
    2dca:	e5 1a       	sub	r14, r21
    2dcc:	f1 08       	sbc	r15, r1
    2dce:	2b 81       	ldd	r18, Y+3	; 0x03
    2dd0:	42 1a       	sub	r4, r18
    2dd2:	4c 81       	ldd	r20, Y+4	; 0x04
    2dd4:	5d 81       	ldd	r21, Y+5	; 0x05
    2dd6:	e4 16       	cp	r14, r20
    2dd8:	f5 06       	cpc	r15, r21
    2dda:	09 f4       	brne	.+2      	; 0x2dde <display_draw_char+0x11e>
    2ddc:	a2 c0       	rjmp	.+324    	; 0x2f22 <display_draw_char+0x262>
    2dde:	20 fe       	sbrs	r2, 0
    2de0:	ec cf       	rjmp	.-40     	; 0x2dba <display_draw_char+0xfa>
    2de2:	3b 81       	ldd	r19, Y+3	; 0x03
    2de4:	31 30       	cpi	r19, 0x01	; 1
    2de6:	f9 f2       	breq	.-66     	; 0x2da6 <display_draw_char+0xe6>
    2de8:	48 85       	ldd	r20, Y+8	; 0x08
    2dea:	59 85       	ldd	r21, Y+9	; 0x09
    2dec:	4c 15       	cp	r20, r12
    2dee:	5d 05       	cpc	r21, r13
    2df0:	24 f7       	brge	.-56     	; 0x2dba <display_draw_char+0xfa>
    2df2:	04 2d       	mov	r16, r4
    2df4:	10 e0       	ldi	r17, 0x00	; 0
    2df6:	68 89       	ldd	r22, Y+16	; 0x10
    2df8:	79 89       	ldd	r23, Y+17	; 0x11
    2dfa:	60 0f       	add	r22, r16
    2dfc:	71 1f       	adc	r23, r17
    2dfe:	5a 84       	ldd	r5, Y+10	; 0x0a
    2e00:	ca 01       	movw	r24, r20
    2e02:	2d 86       	std	Y+13, r2	; 0x0d
    2e04:	2b 88       	ldd	r2, Y+19	; 0x13
    2e06:	06 17       	cp	r16, r22
    2e08:	17 07       	cpc	r17, r23
    2e0a:	e4 f4       	brge	.+56     	; 0x2e44 <display_draw_char+0x184>
    2e0c:	9c 01       	movw	r18, r24
    2e0e:	22 0f       	add	r18, r18
    2e10:	33 1f       	adc	r19, r19
    2e12:	49 01       	movw	r8, r18
    2e14:	5f e0       	ldi	r21, 0x0F	; 15
    2e16:	85 1a       	sub	r8, r21
    2e18:	91 08       	sbc	r9, r1
    2e1a:	88 30       	cpi	r24, 0x08	; 8
    2e1c:	91 05       	cpc	r25, r1
    2e1e:	0c f4       	brge	.+2      	; 0x2e22 <display_draw_char+0x162>
    2e20:	49 01       	movw	r8, r18
    2e22:	88 0c       	add	r8, r8
    2e24:	99 1c       	adc	r9, r9
    2e26:	88 0c       	add	r8, r8
    2e28:	99 1c       	adc	r9, r9
    2e2a:	88 0c       	add	r8, r8
    2e2c:	99 1c       	adc	r9, r9
    2e2e:	40 97       	sbiw	r24, 0x10	; 16
    2e30:	8c f0       	brlt	.+34     	; 0x2e54 <display_draw_char+0x194>
    2e32:	24 2d       	mov	r18, r4
    2e34:	ab 01       	movw	r20, r22
    2e36:	2f 5f       	subi	r18, 0xFF	; 255
    2e38:	82 2f       	mov	r24, r18
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	84 17       	cp	r24, r20
    2e3e:	95 07       	cpc	r25, r21
    2e40:	d4 f3       	brlt	.-12     	; 0x2e36 <display_draw_char+0x176>
    2e42:	ba 01       	movw	r22, r20
    2e44:	53 94       	inc	r5
    2e46:	85 2d       	mov	r24, r5
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	8c 15       	cp	r24, r12
    2e4c:	9d 05       	cpc	r25, r13
    2e4e:	dc f2       	brlt	.-74     	; 0x2e06 <display_draw_char+0x146>
    2e50:	2d 84       	ldd	r2, Y+13	; 0x0d
    2e52:	b3 cf       	rjmp	.-154    	; 0x2dba <display_draw_char+0xfa>
    2e54:	34 2c       	mov	r3, r4
    2e56:	c8 01       	movw	r24, r16
    2e58:	6c 8f       	std	Y+28, r22	; 0x1c
    2e5a:	7d 8f       	std	Y+29, r23	; 0x1d
    2e5c:	22 20       	and	r2, r2
    2e5e:	49 f0       	breq	.+18     	; 0x2e72 <display_draw_char+0x1b2>
    2e60:	4d c0       	rjmp	.+154    	; 0x2efc <display_draw_char+0x23c>
    2e62:	33 94       	inc	r3
    2e64:	83 2d       	mov	r24, r3
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2e6a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2e6c:	82 17       	cp	r24, r18
    2e6e:	93 07       	cpc	r25, r19
    2e70:	2c f5       	brge	.+74     	; 0x2ebc <display_draw_char+0x1fc>
    2e72:	80 31       	cpi	r24, 0x10	; 16
    2e74:	91 05       	cpc	r25, r1
    2e76:	ac f7       	brge	.-22     	; 0x2e62 <display_draw_char+0x1a2>
    2e78:	f5 01       	movw	r30, r10
    2e7a:	e8 1b       	sub	r30, r24
    2e7c:	f9 0b       	sbc	r31, r25
    2e7e:	cf 01       	movw	r24, r30
    2e80:	b3 01       	movw	r22, r6
    2e82:	0e 94 0b 42 	call	0x8416	; 0x8416 <__divmodhi4>
    2e86:	88 30       	cpi	r24, 0x08	; 8
    2e88:	91 05       	cpc	r25, r1
    2e8a:	e4 f1       	brlt	.+120    	; 0x2f04 <display_draw_char+0x244>
    2e8c:	80 31       	cpi	r24, 0x10	; 16
    2e8e:	91 05       	cpc	r25, r1
    2e90:	0c f0       	brlt	.+2      	; 0x2e94 <display_draw_char+0x1d4>
    2e92:	41 c0       	rjmp	.+130    	; 0x2f16 <display_draw_char+0x256>
    2e94:	27 e8       	ldi	r18, 0x87	; 135
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	87 70       	andi	r24, 0x07	; 7
    2e9a:	99 27       	eor	r25, r25
    2e9c:	a9 01       	movw	r20, r18
    2e9e:	48 1b       	sub	r20, r24
    2ea0:	59 0b       	sbc	r21, r25
    2ea2:	ca 01       	movw	r24, r20
    2ea4:	88 0d       	add	r24, r8
    2ea6:	99 1d       	adc	r25, r9
    2ea8:	0e 94 9a 08 	call	0x1134	; 0x1134 <ht1632c_clr_pixel>
    2eac:	33 94       	inc	r3
    2eae:	83 2d       	mov	r24, r3
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2eb4:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2eb6:	82 17       	cp	r24, r18
    2eb8:	93 07       	cpc	r25, r19
    2eba:	dc f2       	brlt	.-74     	; 0x2e72 <display_draw_char+0x1b2>
    2ebc:	b9 01       	movw	r22, r18
    2ebe:	c2 cf       	rjmp	.-124    	; 0x2e44 <display_draw_char+0x184>
    2ec0:	a5 01       	movw	r20, r10
    2ec2:	48 1b       	sub	r20, r24
    2ec4:	59 0b       	sbc	r21, r25
    2ec6:	ca 01       	movw	r24, r20
    2ec8:	b3 01       	movw	r22, r6
    2eca:	0e 94 0b 42 	call	0x8416	; 0x8416 <__divmodhi4>
    2ece:	88 30       	cpi	r24, 0x08	; 8
    2ed0:	91 05       	cpc	r25, r1
    2ed2:	dc f4       	brge	.+54     	; 0x2f0a <display_draw_char+0x24a>
    2ed4:	27 e0       	ldi	r18, 0x07	; 7
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	87 70       	andi	r24, 0x07	; 7
    2eda:	99 27       	eor	r25, r25
    2edc:	f9 01       	movw	r30, r18
    2ede:	e8 1b       	sub	r30, r24
    2ee0:	f9 0b       	sbc	r31, r25
    2ee2:	cf 01       	movw	r24, r30
    2ee4:	88 0d       	add	r24, r8
    2ee6:	99 1d       	adc	r25, r9
    2ee8:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    2eec:	33 94       	inc	r3
    2eee:	83 2d       	mov	r24, r3
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2ef4:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2ef6:	82 17       	cp	r24, r18
    2ef8:	93 07       	cpc	r25, r19
    2efa:	04 f7       	brge	.-64     	; 0x2ebc <display_draw_char+0x1fc>
    2efc:	80 31       	cpi	r24, 0x10	; 16
    2efe:	91 05       	cpc	r25, r1
    2f00:	ac f7       	brge	.-22     	; 0x2eec <display_draw_char+0x22c>
    2f02:	de cf       	rjmp	.-68     	; 0x2ec0 <display_draw_char+0x200>
    2f04:	27 e0       	ldi	r18, 0x07	; 7
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	c7 cf       	rjmp	.-114    	; 0x2e98 <display_draw_char+0x1d8>
    2f0a:	80 31       	cpi	r24, 0x10	; 16
    2f0c:	91 05       	cpc	r25, r1
    2f0e:	34 f4       	brge	.+12     	; 0x2f1c <display_draw_char+0x25c>
    2f10:	27 e8       	ldi	r18, 0x87	; 135
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	e1 cf       	rjmp	.-62     	; 0x2ed8 <display_draw_char+0x218>
    2f16:	27 e0       	ldi	r18, 0x07	; 7
    2f18:	31 e0       	ldi	r19, 0x01	; 1
    2f1a:	be cf       	rjmp	.-132    	; 0x2e98 <display_draw_char+0x1d8>
    2f1c:	27 e0       	ldi	r18, 0x07	; 7
    2f1e:	31 e0       	ldi	r19, 0x01	; 1
    2f20:	db cf       	rjmp	.-74     	; 0x2ed8 <display_draw_char+0x218>
    2f22:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f24:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f26:	2f 5f       	subi	r18, 0xFF	; 255
    2f28:	3f 4f       	sbci	r19, 0xFF	; 255
    2f2a:	2b 87       	std	Y+11, r18	; 0x0b
    2f2c:	3c 87       	std	Y+12, r19	; 0x0c
    2f2e:	4e 81       	ldd	r20, Y+6	; 0x06
    2f30:	5f 81       	ldd	r21, Y+7	; 0x07
    2f32:	4f 5f       	subi	r20, 0xFF	; 255
    2f34:	5f 4f       	sbci	r21, 0xFF	; 255
    2f36:	4e 83       	std	Y+6, r20	; 0x06
    2f38:	5f 83       	std	Y+7, r21	; 0x07
    2f3a:	2e 85       	ldd	r18, Y+14	; 0x0e
    2f3c:	3f 85       	ldd	r19, Y+15	; 0x0f
    2f3e:	2e 5f       	subi	r18, 0xFE	; 254
    2f40:	3f 4f       	sbci	r19, 0xFF	; 255
    2f42:	2e 87       	std	Y+14, r18	; 0x0e
    2f44:	3f 87       	std	Y+15, r19	; 0x0f
    2f46:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f48:	3b 81       	ldd	r19, Y+3	; 0x03
    2f4a:	83 0f       	add	r24, r19
    2f4c:	28 8d       	ldd	r18, Y+24	; 0x18
    2f4e:	39 8d       	ldd	r19, Y+25	; 0x19
    2f50:	42 17       	cp	r20, r18
    2f52:	53 07       	cpc	r21, r19
    2f54:	11 f0       	breq	.+4      	; 0x2f5a <display_draw_char+0x29a>
    2f56:	8a 87       	std	Y+10, r24	; 0x0a
    2f58:	00 cf       	rjmp	.-512    	; 0x2d5a <display_draw_char+0x9a>
    2f5a:	6d 96       	adiw	r28, 0x1d	; 29
    2f5c:	cd bf       	out	0x3d, r28	; 61
    2f5e:	de bf       	out	0x3e, r29	; 62
    2f60:	df 91       	pop	r29
    2f62:	cf 91       	pop	r28
    2f64:	1f 91       	pop	r17
    2f66:	0f 91       	pop	r16
    2f68:	ff 90       	pop	r15
    2f6a:	ef 90       	pop	r14
    2f6c:	df 90       	pop	r13
    2f6e:	cf 90       	pop	r12
    2f70:	bf 90       	pop	r11
    2f72:	af 90       	pop	r10
    2f74:	9f 90       	pop	r9
    2f76:	8f 90       	pop	r8
    2f78:	7f 90       	pop	r7
    2f7a:	6f 90       	pop	r6
    2f7c:	5f 90       	pop	r5
    2f7e:	4f 90       	pop	r4
    2f80:	3f 90       	pop	r3
    2f82:	2f 90       	pop	r2
    2f84:	08 95       	ret
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	9a 81       	ldd	r25, Y+2	; 0x02
    2f8a:	b3 01       	movw	r22, r6
    2f8c:	0e 94 0b 42 	call	0x8416	; 0x8416 <__divmodhi4>
    2f90:	88 30       	cpi	r24, 0x08	; 8
    2f92:	91 05       	cpc	r25, r1
    2f94:	74 f0       	brlt	.+28     	; 0x2fb2 <display_draw_char+0x2f2>
    2f96:	80 31       	cpi	r24, 0x10	; 16
    2f98:	91 05       	cpc	r25, r1
    2f9a:	fc f4       	brge	.+62     	; 0x2fda <display_draw_char+0x31a>
    2f9c:	27 e8       	ldi	r18, 0x87	; 135
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	87 70       	andi	r24, 0x07	; 7
    2fa2:	90 78       	andi	r25, 0x80	; 128
    2fa4:	97 ff       	sbrs	r25, 7
    2fa6:	0b c0       	rjmp	.+22     	; 0x2fbe <display_draw_char+0x2fe>
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	88 6f       	ori	r24, 0xF8	; 248
    2fac:	9f 6f       	ori	r25, 0xFF	; 255
    2fae:	01 96       	adiw	r24, 0x01	; 1
    2fb0:	06 c0       	rjmp	.+12     	; 0x2fbe <display_draw_char+0x2fe>
    2fb2:	27 e0       	ldi	r18, 0x07	; 7
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	87 70       	andi	r24, 0x07	; 7
    2fb8:	90 78       	andi	r25, 0x80	; 128
    2fba:	97 fd       	sbrc	r25, 7
    2fbc:	f5 cf       	rjmp	.-22     	; 0x2fa8 <display_draw_char+0x2e8>
    2fbe:	f9 01       	movw	r30, r18
    2fc0:	e8 1b       	sub	r30, r24
    2fc2:	f9 0b       	sbc	r31, r25
    2fc4:	cf 01       	movw	r24, r30
    2fc6:	2e 89       	ldd	r18, Y+22	; 0x16
    2fc8:	3f 89       	ldd	r19, Y+23	; 0x17
    2fca:	82 0f       	add	r24, r18
    2fcc:	93 1f       	adc	r25, r19
    2fce:	3b 89       	ldd	r19, Y+19	; 0x13
    2fd0:	31 11       	cpse	r19, r1
    2fd2:	06 c0       	rjmp	.+12     	; 0x2fe0 <display_draw_char+0x320>
    2fd4:	0e 94 9a 08 	call	0x1134	; 0x1134 <ht1632c_clr_pixel>
    2fd8:	f0 ce       	rjmp	.-544    	; 0x2dba <display_draw_char+0xfa>
    2fda:	27 e0       	ldi	r18, 0x07	; 7
    2fdc:	31 e0       	ldi	r19, 0x01	; 1
    2fde:	eb cf       	rjmp	.-42     	; 0x2fb6 <display_draw_char+0x2f6>
    2fe0:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    2fe4:	ea ce       	rjmp	.-556    	; 0x2dba <display_draw_char+0xfa>

00002fe6 <display_draw_wifi_icon>:
}

void display_draw_wifi_icon(void) {
	static uint8_t n = 0;

	switch(n) {
    2fe6:	80 91 50 2c 	lds	r24, 0x2C50
    2fea:	81 30       	cpi	r24, 0x01	; 1
    2fec:	09 f4       	brne	.+2      	; 0x2ff0 <display_draw_wifi_icon+0xa>
    2fee:	77 c0       	rjmp	.+238    	; 0x30de <display_draw_wifi_icon+0xf8>
    2ff0:	08 f4       	brcc	.+2      	; 0x2ff4 <display_draw_wifi_icon+0xe>
    2ff2:	6a c0       	rjmp	.+212    	; 0x30c8 <display_draw_wifi_icon+0xe2>
    2ff4:	82 30       	cpi	r24, 0x02	; 2
    2ff6:	e1 f1       	breq	.+120    	; 0x3070 <display_draw_wifi_icon+0x8a>
    2ff8:	83 30       	cpi	r24, 0x03	; 3
    2ffa:	91 f5       	brne	.+100    	; 0x3060 <display_draw_wifi_icon+0x7a>
	}

	i += x * 8;

	if (color) {
		ht1632c_set_pixel(i);
    2ffc:	82 e2       	ldi	r24, 0x22	; 34
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    3004:	83 e3       	ldi	r24, 0x33	; 51
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    300c:	84 e4       	ldi	r24, 0x44	; 68
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    3014:	84 e5       	ldi	r24, 0x54	; 84
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    301c:	85 e6       	ldi	r24, 0x65	; 101
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    3024:	85 e7       	ldi	r24, 0x75	; 117
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    302c:	8d e0       	ldi	r24, 0x0D	; 13
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    3034:	8d e1       	ldi	r24, 0x1D	; 29
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    303c:	8c e2       	ldi	r24, 0x2C	; 44
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    3044:	8c e3       	ldi	r24, 0x3C	; 60
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    304c:	8b e4       	ldi	r24, 0x4B	; 75
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    3054:	8a e5       	ldi	r24, 0x5A	; 90
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    305c:	80 91 50 2c 	lds	r24, 0x2C50
			display_draw_pixel(15,11,1);
			break;
*/
	}
		
	if (n++ == 4) {
    3060:	91 e0       	ldi	r25, 0x01	; 1
    3062:	98 0f       	add	r25, r24
    3064:	90 93 50 2c 	sts	0x2C50, r25
    3068:	84 30       	cpi	r24, 0x04	; 4
    306a:	51 f1       	breq	.+84     	; 0x30c0 <display_draw_wifi_icon+0xda>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    306c:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <ht1632c_refresh_screen>
	}

	i += x * 8;

	if (color) {
		ht1632c_set_pixel(i);
    3070:	87 ec       	ldi	r24, 0xC7	; 199
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    3078:	80 e5       	ldi	r24, 0x50	; 80
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    3080:	81 e6       	ldi	r24, 0x61	; 97
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    3088:	81 e7       	ldi	r24, 0x71	; 113
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    3090:	89 e0       	ldi	r24, 0x09	; 9
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    3098:	89 e1       	ldi	r24, 0x19	; 25
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    30a0:	88 e2       	ldi	r24, 0x28	; 40
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    30a8:	8f eb       	ldi	r24, 0xBF	; 191
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    30b0:	80 91 50 2c 	lds	r24, 0x2C50
			display_draw_pixel(15,11,1);
			break;
*/
	}
		
	if (n++ == 4) {
    30b4:	91 e0       	ldi	r25, 0x01	; 1
    30b6:	98 0f       	add	r25, r24
    30b8:	90 93 50 2c 	sts	0x2C50, r25
    30bc:	84 30       	cpi	r24, 0x04	; 4
    30be:	b1 f6       	brne	.-84     	; 0x306c <display_draw_wifi_icon+0x86>
		n = 0;
    30c0:	10 92 50 2c 	sts	0x2C50, r1
	ht1632c_fill_screen();
}

void display_clear_screen(void) 
{
	ht1632c_clear_screen();
    30c4:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <ht1632c_clear_screen>
	}

	i += x * 8;

	if (color) {
		ht1632c_set_pixel(i);
    30c8:	83 ef       	ldi	r24, 0xF3	; 243
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    30d0:	8b e8       	ldi	r24, 0x8B	; 139
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    30d8:	80 91 50 2c 	lds	r24, 0x2C50
    30dc:	c1 cf       	rjmp	.-126    	; 0x3060 <display_draw_wifi_icon+0x7a>
    30de:	85 ee       	ldi	r24, 0xE5	; 229
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    30e6:	86 ef       	ldi	r24, 0xF6	; 246
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    30ee:	8e e8       	ldi	r24, 0x8E	; 142
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    30f6:	8d e9       	ldi	r24, 0x9D	; 157
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	0e 94 85 08 	call	0x110a	; 0x110a <ht1632c_set_pixel>
    30fe:	80 91 50 2c 	lds	r24, 0x2C50
    3102:	ae cf       	rjmp	.-164    	; 0x3060 <display_draw_wifi_icon+0x7a>

00003104 <BUFFER_Init>:
	}
	
	/* Check pointers and return values */
	/* Buffer is not in overflow mode */
	if (in > out) {
		size = in - out;
    3104:	cf 93       	push	r28
    3106:	df 93       	push	r29
    3108:	ec 01       	movw	r28, r24
    310a:	82 e1       	ldi	r24, 0x12	; 18
    310c:	fe 01       	movw	r30, r28
    310e:	11 92       	st	Z+, r1
    3110:	8a 95       	dec	r24
    3112:	e9 f7       	brne	.-6      	; 0x310e <BUFFER_Init+0xa>
    3114:	48 83       	st	Y, r20
    3116:	59 83       	std	Y+1, r21	; 0x01
    3118:	6a 83       	std	Y+2, r22	; 0x02
    311a:	7b 83       	std	Y+3, r23	; 0x03
    311c:	2c 87       	std	Y+12, r18	; 0x0c
    311e:	3d 87       	std	Y+13, r19	; 0x0d
    3120:	8a e0       	ldi	r24, 0x0A	; 10
    3122:	8f 87       	std	Y+15, r24	; 0x0f
    3124:	23 2b       	or	r18, r19
    3126:	39 f0       	breq	.+14     	; 0x3136 <BUFFER_Init+0x32>
    3128:	8e 85       	ldd	r24, Y+14	; 0x0e
    312a:	81 60       	ori	r24, 0x01	; 1
    312c:	8e 87       	std	Y+14, r24	; 0x0e
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	df 91       	pop	r29
    3132:	cf 91       	pop	r28
    3134:	08 95       	ret
    3136:	ca 01       	movw	r24, r20
    3138:	0e 94 69 42 	call	0x84d2	; 0x84d2 <malloc>
    313c:	8c 87       	std	Y+12, r24	; 0x0c
    313e:	9d 87       	std	Y+13, r25	; 0x0d
    3140:	89 2b       	or	r24, r25
    3142:	19 f0       	breq	.+6      	; 0x314a <BUFFER_Init+0x46>
    3144:	8e 85       	ldd	r24, Y+14	; 0x0e
    3146:	82 60       	ori	r24, 0x02	; 2
    3148:	f0 cf       	rjmp	.-32     	; 0x312a <BUFFER_Init+0x26>
    314a:	18 82       	st	Y, r1
    314c:	19 82       	std	Y+1, r1	; 0x01
    314e:	1a 82       	std	Y+2, r1	; 0x02
    3150:	1b 82       	std	Y+3, r1	; 0x03
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	ed cf       	rjmp	.-38     	; 0x3130 <BUFFER_Init+0x2c>

00003156 <BUFFER_Write>:
    3156:	4f 92       	push	r4
    3158:	5f 92       	push	r5
    315a:	6f 92       	push	r6
    315c:	7f 92       	push	r7
    315e:	8f 92       	push	r8
    3160:	9f 92       	push	r9
    3162:	af 92       	push	r10
    3164:	bf 92       	push	r11
    3166:	cf 92       	push	r12
    3168:	df 92       	push	r13
    316a:	ef 92       	push	r14
    316c:	ff 92       	push	r15
    316e:	0f 93       	push	r16
    3170:	1f 93       	push	r17
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
    3176:	ec 01       	movw	r28, r24
    3178:	8b 01       	movw	r16, r22
    317a:	69 01       	movw	r12, r18
    317c:	7a 01       	movw	r14, r20
    317e:	00 97       	sbiw	r24, 0x00	; 0
    3180:	09 f4       	brne	.+2      	; 0x3184 <BUFFER_Write+0x2e>
    3182:	8b c0       	rjmp	.+278    	; 0x329a <BUFFER_Write+0x144>
    3184:	21 15       	cp	r18, r1
    3186:	31 05       	cpc	r19, r1
    3188:	41 05       	cpc	r20, r1
    318a:	51 05       	cpc	r21, r1
    318c:	09 f4       	brne	.+2      	; 0x3190 <BUFFER_Write+0x3a>
    318e:	85 c0       	rjmp	.+266    	; 0x329a <BUFFER_Write+0x144>
    3190:	4c 81       	ldd	r20, Y+4	; 0x04
    3192:	5d 81       	ldd	r21, Y+5	; 0x05
    3194:	6e 81       	ldd	r22, Y+6	; 0x06
    3196:	7f 81       	ldd	r23, Y+7	; 0x07
    3198:	88 80       	ld	r8, Y
    319a:	99 80       	ldd	r9, Y+1	; 0x01
    319c:	aa 80       	ldd	r10, Y+2	; 0x02
    319e:	bb 80       	ldd	r11, Y+3	; 0x03
    31a0:	48 15       	cp	r20, r8
    31a2:	59 05       	cpc	r21, r9
    31a4:	6a 05       	cpc	r22, r10
    31a6:	7b 05       	cpc	r23, r11
    31a8:	38 f0       	brcs	.+14     	; 0x31b8 <BUFFER_Write+0x62>
    31aa:	1c 82       	std	Y+4, r1	; 0x04
    31ac:	1d 82       	std	Y+5, r1	; 0x05
    31ae:	1e 82       	std	Y+6, r1	; 0x06
    31b0:	1f 82       	std	Y+7, r1	; 0x07
    31b2:	40 e0       	ldi	r20, 0x00	; 0
    31b4:	50 e0       	ldi	r21, 0x00	; 0
    31b6:	ba 01       	movw	r22, r20
    31b8:	88 85       	ldd	r24, Y+8	; 0x08
    31ba:	99 85       	ldd	r25, Y+9	; 0x09
    31bc:	aa 85       	ldd	r26, Y+10	; 0x0a
    31be:	bb 85       	ldd	r27, Y+11	; 0x0b
    31c0:	48 17       	cp	r20, r24
    31c2:	59 07       	cpc	r21, r25
    31c4:	6a 07       	cpc	r22, r26
    31c6:	7b 07       	cpc	r23, r27
    31c8:	09 f4       	brne	.+2      	; 0x31cc <BUFFER_Write+0x76>
    31ca:	7c c0       	rjmp	.+248    	; 0x32c4 <BUFFER_Write+0x16e>
    31cc:	48 17       	cp	r20, r24
    31ce:	59 07       	cpc	r21, r25
    31d0:	6a 07       	cpc	r22, r26
    31d2:	7b 07       	cpc	r23, r27
    31d4:	08 f0       	brcs	.+2      	; 0x31d8 <BUFFER_Write+0x82>
    31d6:	88 c0       	rjmp	.+272    	; 0x32e8 <BUFFER_Write+0x192>
    31d8:	2c 01       	movw	r4, r24
    31da:	3d 01       	movw	r6, r26
    31dc:	44 1a       	sub	r4, r20
    31de:	55 0a       	sbc	r5, r21
    31e0:	66 0a       	sbc	r6, r22
    31e2:	77 0a       	sbc	r7, r23
    31e4:	84 17       	cp	r24, r20
    31e6:	95 07       	cpc	r25, r21
    31e8:	a6 07       	cpc	r26, r22
    31ea:	b7 07       	cpc	r27, r23
    31ec:	50 f4       	brcc	.+20     	; 0x3202 <BUFFER_Write+0xac>
    31ee:	2c 01       	movw	r4, r24
    31f0:	3d 01       	movw	r6, r26
    31f2:	48 0c       	add	r4, r8
    31f4:	59 1c       	adc	r5, r9
    31f6:	6a 1c       	adc	r6, r10
    31f8:	7b 1c       	adc	r7, r11
    31fa:	44 1a       	sub	r4, r20
    31fc:	55 0a       	sbc	r5, r21
    31fe:	66 0a       	sbc	r6, r22
    3200:	77 0a       	sbc	r7, r23
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	48 1a       	sub	r4, r24
    3206:	51 08       	sbc	r5, r1
    3208:	61 08       	sbc	r6, r1
    320a:	71 08       	sbc	r7, r1
    320c:	4c 14       	cp	r4, r12
    320e:	5d 04       	cpc	r5, r13
    3210:	6e 04       	cpc	r6, r14
    3212:	7f 04       	cpc	r7, r15
    3214:	40 f4       	brcc	.+16     	; 0x3226 <BUFFER_Write+0xd0>
    3216:	41 14       	cp	r4, r1
    3218:	51 04       	cpc	r5, r1
    321a:	61 04       	cpc	r6, r1
    321c:	71 04       	cpc	r7, r1
    321e:	09 f4       	brne	.+2      	; 0x3222 <BUFFER_Write+0xcc>
    3220:	3c c0       	rjmp	.+120    	; 0x329a <BUFFER_Write+0x144>
    3222:	73 01       	movw	r14, r6
    3224:	62 01       	movw	r12, r4
    3226:	d5 01       	movw	r26, r10
    3228:	c4 01       	movw	r24, r8
    322a:	84 1b       	sub	r24, r20
    322c:	95 0b       	sbc	r25, r21
    322e:	a6 0b       	sbc	r26, r22
    3230:	b7 0b       	sbc	r27, r23
    3232:	46 01       	movw	r8, r12
    3234:	57 01       	movw	r10, r14
    3236:	8c 15       	cp	r24, r12
    3238:	9d 05       	cpc	r25, r13
    323a:	ae 05       	cpc	r26, r14
    323c:	bf 05       	cpc	r27, r15
    323e:	10 f4       	brcc	.+4      	; 0x3244 <BUFFER_Write+0xee>
    3240:	4c 01       	movw	r8, r24
    3242:	5d 01       	movw	r10, r26
    3244:	8c 85       	ldd	r24, Y+12	; 0x0c
    3246:	9d 85       	ldd	r25, Y+13	; 0x0d
    3248:	84 0f       	add	r24, r20
    324a:	95 1f       	adc	r25, r21
    324c:	a4 01       	movw	r20, r8
    324e:	b8 01       	movw	r22, r16
    3250:	0e 94 83 44 	call	0x8906	; 0x8906 <memcpy>
    3254:	8c 81       	ldd	r24, Y+4	; 0x04
    3256:	9d 81       	ldd	r25, Y+5	; 0x05
    3258:	ae 81       	ldd	r26, Y+6	; 0x06
    325a:	bf 81       	ldd	r27, Y+7	; 0x07
    325c:	88 0d       	add	r24, r8
    325e:	99 1d       	adc	r25, r9
    3260:	aa 1d       	adc	r26, r10
    3262:	bb 1d       	adc	r27, r11
    3264:	8c 83       	std	Y+4, r24	; 0x04
    3266:	9d 83       	std	Y+5, r25	; 0x05
    3268:	ae 83       	std	Y+6, r26	; 0x06
    326a:	bf 83       	std	Y+7, r27	; 0x07
    326c:	26 01       	movw	r4, r12
    326e:	37 01       	movw	r6, r14
    3270:	48 18       	sub	r4, r8
    3272:	59 08       	sbc	r5, r9
    3274:	6a 08       	sbc	r6, r10
    3276:	7b 08       	sbc	r7, r11
    3278:	41 f5       	brne	.+80     	; 0x32ca <BUFFER_Write+0x174>
    327a:	48 81       	ld	r20, Y
    327c:	59 81       	ldd	r21, Y+1	; 0x01
    327e:	6a 81       	ldd	r22, Y+2	; 0x02
    3280:	7b 81       	ldd	r23, Y+3	; 0x03
    3282:	84 17       	cp	r24, r20
    3284:	95 07       	cpc	r25, r21
    3286:	a6 07       	cpc	r26, r22
    3288:	b7 07       	cpc	r27, r23
    328a:	20 f0       	brcs	.+8      	; 0x3294 <BUFFER_Write+0x13e>
    328c:	1c 82       	std	Y+4, r1	; 0x04
    328e:	1d 82       	std	Y+5, r1	; 0x05
    3290:	1e 82       	std	Y+6, r1	; 0x06
    3292:	1f 82       	std	Y+7, r1	; 0x07
    3294:	b6 01       	movw	r22, r12
    3296:	c7 01       	movw	r24, r14
    3298:	04 c0       	rjmp	.+8      	; 0x32a2 <BUFFER_Write+0x14c>
    329a:	60 e0       	ldi	r22, 0x00	; 0
    329c:	70 e0       	ldi	r23, 0x00	; 0
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	df 91       	pop	r29
    32a4:	cf 91       	pop	r28
    32a6:	1f 91       	pop	r17
    32a8:	0f 91       	pop	r16
    32aa:	ff 90       	pop	r15
    32ac:	ef 90       	pop	r14
    32ae:	df 90       	pop	r13
    32b0:	cf 90       	pop	r12
    32b2:	bf 90       	pop	r11
    32b4:	af 90       	pop	r10
    32b6:	9f 90       	pop	r9
    32b8:	8f 90       	pop	r8
    32ba:	7f 90       	pop	r7
    32bc:	6f 90       	pop	r6
    32be:	5f 90       	pop	r5
    32c0:	4f 90       	pop	r4
    32c2:	08 95       	ret
    32c4:	24 01       	movw	r4, r8
    32c6:	35 01       	movw	r6, r10
    32c8:	9c cf       	rjmp	.-200    	; 0x3202 <BUFFER_Write+0xac>
    32ca:	b8 01       	movw	r22, r16
    32cc:	68 0d       	add	r22, r8
    32ce:	79 1d       	adc	r23, r9
    32d0:	a2 01       	movw	r20, r4
    32d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    32d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    32d6:	0e 94 83 44 	call	0x8906	; 0x8906 <memcpy>
    32da:	4c 82       	std	Y+4, r4	; 0x04
    32dc:	5d 82       	std	Y+5, r5	; 0x05
    32de:	6e 82       	std	Y+6, r6	; 0x06
    32e0:	7f 82       	std	Y+7, r7	; 0x07
    32e2:	d3 01       	movw	r26, r6
    32e4:	c2 01       	movw	r24, r4
    32e6:	c9 cf       	rjmp	.-110    	; 0x327a <BUFFER_Write+0x124>
    32e8:	41 2c       	mov	r4, r1
    32ea:	51 2c       	mov	r5, r1
    32ec:	32 01       	movw	r6, r4
    32ee:	7a cf       	rjmp	.-268    	; 0x31e4 <BUFFER_Write+0x8e>

000032f0 <BUFFER_Read>:
    32f0:	4f 92       	push	r4
    32f2:	5f 92       	push	r5
    32f4:	6f 92       	push	r6
    32f6:	7f 92       	push	r7
    32f8:	8f 92       	push	r8
    32fa:	9f 92       	push	r9
    32fc:	af 92       	push	r10
    32fe:	bf 92       	push	r11
    3300:	cf 92       	push	r12
    3302:	df 92       	push	r13
    3304:	ef 92       	push	r14
    3306:	ff 92       	push	r15
    3308:	0f 93       	push	r16
    330a:	1f 93       	push	r17
    330c:	cf 93       	push	r28
    330e:	df 93       	push	r29
    3310:	ec 01       	movw	r28, r24
    3312:	8b 01       	movw	r16, r22
    3314:	69 01       	movw	r12, r18
    3316:	7a 01       	movw	r14, r20
    3318:	00 97       	sbiw	r24, 0x00	; 0
    331a:	09 f4       	brne	.+2      	; 0x331e <BUFFER_Read+0x2e>
    331c:	7a c0       	rjmp	.+244    	; 0x3412 <BUFFER_Read+0x122>
    331e:	21 15       	cp	r18, r1
    3320:	31 05       	cpc	r19, r1
    3322:	41 05       	cpc	r20, r1
    3324:	51 05       	cpc	r21, r1
    3326:	09 f4       	brne	.+2      	; 0x332a <BUFFER_Read+0x3a>
    3328:	74 c0       	rjmp	.+232    	; 0x3412 <BUFFER_Read+0x122>
    332a:	88 85       	ldd	r24, Y+8	; 0x08
    332c:	99 85       	ldd	r25, Y+9	; 0x09
    332e:	aa 85       	ldd	r26, Y+10	; 0x0a
    3330:	bb 85       	ldd	r27, Y+11	; 0x0b
    3332:	48 80       	ld	r4, Y
    3334:	59 80       	ldd	r5, Y+1	; 0x01
    3336:	6a 80       	ldd	r6, Y+2	; 0x02
    3338:	7b 80       	ldd	r7, Y+3	; 0x03
    333a:	84 15       	cp	r24, r4
    333c:	95 05       	cpc	r25, r5
    333e:	a6 05       	cpc	r26, r6
    3340:	b7 05       	cpc	r27, r7
    3342:	38 f0       	brcs	.+14     	; 0x3352 <BUFFER_Read+0x62>
    3344:	18 86       	std	Y+8, r1	; 0x08
    3346:	19 86       	std	Y+9, r1	; 0x09
    3348:	1a 86       	std	Y+10, r1	; 0x0a
    334a:	1b 86       	std	Y+11, r1	; 0x0b
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	dc 01       	movw	r26, r24
    3352:	8c 80       	ldd	r8, Y+4	; 0x04
    3354:	9d 80       	ldd	r9, Y+5	; 0x05
    3356:	ae 80       	ldd	r10, Y+6	; 0x06
    3358:	bf 80       	ldd	r11, Y+7	; 0x07
    335a:	88 15       	cp	r24, r8
    335c:	99 05       	cpc	r25, r9
    335e:	aa 05       	cpc	r26, r10
    3360:	bb 05       	cpc	r27, r11
    3362:	08 f4       	brcc	.+2      	; 0x3366 <BUFFER_Read+0x76>
    3364:	6b c0       	rjmp	.+214    	; 0x343c <BUFFER_Read+0x14c>
    3366:	40 e0       	ldi	r20, 0x00	; 0
    3368:	50 e0       	ldi	r21, 0x00	; 0
    336a:	ba 01       	movw	r22, r20
    336c:	88 16       	cp	r8, r24
    336e:	99 06       	cpc	r9, r25
    3370:	aa 06       	cpc	r10, r26
    3372:	bb 06       	cpc	r11, r27
    3374:	50 f4       	brcc	.+20     	; 0x338a <BUFFER_Read+0x9a>
    3376:	b5 01       	movw	r22, r10
    3378:	a4 01       	movw	r20, r8
    337a:	44 0d       	add	r20, r4
    337c:	55 1d       	adc	r21, r5
    337e:	66 1d       	adc	r22, r6
    3380:	77 1d       	adc	r23, r7
    3382:	48 1b       	sub	r20, r24
    3384:	59 0b       	sbc	r21, r25
    3386:	6a 0b       	sbc	r22, r26
    3388:	7b 0b       	sbc	r23, r27
    338a:	4c 15       	cp	r20, r12
    338c:	5d 05       	cpc	r21, r13
    338e:	6e 05       	cpc	r22, r14
    3390:	7f 05       	cpc	r23, r15
    3392:	38 f4       	brcc	.+14     	; 0x33a2 <BUFFER_Read+0xb2>
    3394:	41 15       	cp	r20, r1
    3396:	51 05       	cpc	r21, r1
    3398:	61 05       	cpc	r22, r1
    339a:	71 05       	cpc	r23, r1
    339c:	d1 f1       	breq	.+116    	; 0x3412 <BUFFER_Read+0x122>
    339e:	6a 01       	movw	r12, r20
    33a0:	7b 01       	movw	r14, r22
    33a2:	48 1a       	sub	r4, r24
    33a4:	59 0a       	sbc	r5, r25
    33a6:	6a 0a       	sbc	r6, r26
    33a8:	7b 0a       	sbc	r7, r27
    33aa:	46 01       	movw	r8, r12
    33ac:	57 01       	movw	r10, r14
    33ae:	4c 14       	cp	r4, r12
    33b0:	5d 04       	cpc	r5, r13
    33b2:	6e 04       	cpc	r6, r14
    33b4:	7f 04       	cpc	r7, r15
    33b6:	10 f4       	brcc	.+4      	; 0x33bc <BUFFER_Read+0xcc>
    33b8:	53 01       	movw	r10, r6
    33ba:	42 01       	movw	r8, r4
    33bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    33be:	7d 85       	ldd	r23, Y+13	; 0x0d
    33c0:	68 0f       	add	r22, r24
    33c2:	79 1f       	adc	r23, r25
    33c4:	a4 01       	movw	r20, r8
    33c6:	c8 01       	movw	r24, r16
    33c8:	0e 94 83 44 	call	0x8906	; 0x8906 <memcpy>
    33cc:	88 85       	ldd	r24, Y+8	; 0x08
    33ce:	99 85       	ldd	r25, Y+9	; 0x09
    33d0:	aa 85       	ldd	r26, Y+10	; 0x0a
    33d2:	bb 85       	ldd	r27, Y+11	; 0x0b
    33d4:	88 0d       	add	r24, r8
    33d6:	99 1d       	adc	r25, r9
    33d8:	aa 1d       	adc	r26, r10
    33da:	bb 1d       	adc	r27, r11
    33dc:	88 87       	std	Y+8, r24	; 0x08
    33de:	99 87       	std	Y+9, r25	; 0x09
    33e0:	aa 87       	std	Y+10, r26	; 0x0a
    33e2:	bb 87       	std	Y+11, r27	; 0x0b
    33e4:	26 01       	movw	r4, r12
    33e6:	37 01       	movw	r6, r14
    33e8:	48 18       	sub	r4, r8
    33ea:	59 08       	sbc	r5, r9
    33ec:	6a 08       	sbc	r6, r10
    33ee:	7b 08       	sbc	r7, r11
    33f0:	61 f5       	brne	.+88     	; 0x344a <BUFFER_Read+0x15a>
    33f2:	48 81       	ld	r20, Y
    33f4:	59 81       	ldd	r21, Y+1	; 0x01
    33f6:	6a 81       	ldd	r22, Y+2	; 0x02
    33f8:	7b 81       	ldd	r23, Y+3	; 0x03
    33fa:	84 17       	cp	r24, r20
    33fc:	95 07       	cpc	r25, r21
    33fe:	a6 07       	cpc	r26, r22
    3400:	b7 07       	cpc	r27, r23
    3402:	20 f0       	brcs	.+8      	; 0x340c <BUFFER_Read+0x11c>
    3404:	18 86       	std	Y+8, r1	; 0x08
    3406:	19 86       	std	Y+9, r1	; 0x09
    3408:	1a 86       	std	Y+10, r1	; 0x0a
    340a:	1b 86       	std	Y+11, r1	; 0x0b
    340c:	b6 01       	movw	r22, r12
    340e:	c7 01       	movw	r24, r14
    3410:	04 c0       	rjmp	.+8      	; 0x341a <BUFFER_Read+0x12a>
    3412:	60 e0       	ldi	r22, 0x00	; 0
    3414:	70 e0       	ldi	r23, 0x00	; 0
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	df 91       	pop	r29
    341c:	cf 91       	pop	r28
    341e:	1f 91       	pop	r17
    3420:	0f 91       	pop	r16
    3422:	ff 90       	pop	r15
    3424:	ef 90       	pop	r14
    3426:	df 90       	pop	r13
    3428:	cf 90       	pop	r12
    342a:	bf 90       	pop	r11
    342c:	af 90       	pop	r10
    342e:	9f 90       	pop	r9
    3430:	8f 90       	pop	r8
    3432:	7f 90       	pop	r7
    3434:	6f 90       	pop	r6
    3436:	5f 90       	pop	r5
    3438:	4f 90       	pop	r4
    343a:	08 95       	ret
    343c:	b5 01       	movw	r22, r10
    343e:	a4 01       	movw	r20, r8
    3440:	48 1b       	sub	r20, r24
    3442:	59 0b       	sbc	r21, r25
    3444:	6a 0b       	sbc	r22, r26
    3446:	7b 0b       	sbc	r23, r27
    3448:	91 cf       	rjmp	.-222    	; 0x336c <BUFFER_Read+0x7c>
    344a:	c8 01       	movw	r24, r16
    344c:	88 0d       	add	r24, r8
    344e:	99 1d       	adc	r25, r9
    3450:	6c 85       	ldd	r22, Y+12	; 0x0c
    3452:	7d 85       	ldd	r23, Y+13	; 0x0d
    3454:	a2 01       	movw	r20, r4
    3456:	0e 94 83 44 	call	0x8906	; 0x8906 <memcpy>
    345a:	48 86       	std	Y+8, r4	; 0x08
    345c:	59 86       	std	Y+9, r5	; 0x09
    345e:	6a 86       	std	Y+10, r6	; 0x0a
    3460:	7b 86       	std	Y+11, r7	; 0x0b
    3462:	d3 01       	movw	r26, r6
    3464:	c2 01       	movw	r24, r4
    3466:	c5 cf       	rjmp	.-118    	; 0x33f2 <BUFFER_Read+0x102>

00003468 <BUFFER_GetFull>:
    3468:	cf 92       	push	r12
    346a:	df 92       	push	r13
    346c:	ef 92       	push	r14
    346e:	ff 92       	push	r15
    3470:	0f 93       	push	r16
    3472:	1f 93       	push	r17
    3474:	fc 01       	movw	r30, r24
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	e1 f1       	breq	.+120    	; 0x34f2 <BUFFER_GetFull+0x8a>
    347a:	c4 80       	ldd	r12, Z+4	; 0x04
    347c:	d5 80       	ldd	r13, Z+5	; 0x05
    347e:	e6 80       	ldd	r14, Z+6	; 0x06
    3480:	f7 80       	ldd	r15, Z+7	; 0x07
    3482:	00 85       	ldd	r16, Z+8	; 0x08
    3484:	11 85       	ldd	r17, Z+9	; 0x09
    3486:	22 85       	ldd	r18, Z+10	; 0x0a
    3488:	33 85       	ldd	r19, Z+11	; 0x0b
    348a:	0c 15       	cp	r16, r12
    348c:	1d 05       	cpc	r17, r13
    348e:	2e 05       	cpc	r18, r14
    3490:	3f 05       	cpc	r19, r15
    3492:	d8 f0       	brcs	.+54     	; 0x34ca <BUFFER_GetFull+0x62>
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	dc 01       	movw	r26, r24
    349a:	c0 16       	cp	r12, r16
    349c:	d1 06       	cpc	r13, r17
    349e:	e2 06       	cpc	r14, r18
    34a0:	f3 06       	cpc	r15, r19
    34a2:	f0 f4       	brcc	.+60     	; 0x34e0 <BUFFER_GetFull+0x78>
    34a4:	60 81       	ld	r22, Z
    34a6:	71 81       	ldd	r23, Z+1	; 0x01
    34a8:	82 81       	ldd	r24, Z+2	; 0x02
    34aa:	93 81       	ldd	r25, Z+3	; 0x03
    34ac:	6c 0d       	add	r22, r12
    34ae:	7d 1d       	adc	r23, r13
    34b0:	8e 1d       	adc	r24, r14
    34b2:	9f 1d       	adc	r25, r15
    34b4:	60 1b       	sub	r22, r16
    34b6:	71 0b       	sbc	r23, r17
    34b8:	82 0b       	sbc	r24, r18
    34ba:	93 0b       	sbc	r25, r19
    34bc:	1f 91       	pop	r17
    34be:	0f 91       	pop	r16
    34c0:	ff 90       	pop	r15
    34c2:	ef 90       	pop	r14
    34c4:	df 90       	pop	r13
    34c6:	cf 90       	pop	r12
    34c8:	08 95       	ret
    34ca:	d7 01       	movw	r26, r14
    34cc:	c6 01       	movw	r24, r12
    34ce:	80 1b       	sub	r24, r16
    34d0:	91 0b       	sbc	r25, r17
    34d2:	a2 0b       	sbc	r26, r18
    34d4:	b3 0b       	sbc	r27, r19
    34d6:	c0 16       	cp	r12, r16
    34d8:	d1 06       	cpc	r13, r17
    34da:	e2 06       	cpc	r14, r18
    34dc:	f3 06       	cpc	r15, r19
    34de:	10 f3       	brcs	.-60     	; 0x34a4 <BUFFER_GetFull+0x3c>
    34e0:	bc 01       	movw	r22, r24
    34e2:	cd 01       	movw	r24, r26
    34e4:	1f 91       	pop	r17
    34e6:	0f 91       	pop	r16
    34e8:	ff 90       	pop	r15
    34ea:	ef 90       	pop	r14
    34ec:	df 90       	pop	r13
    34ee:	cf 90       	pop	r12
    34f0:	08 95       	ret
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	70 e0       	ldi	r23, 0x00	; 0
    34f6:	cb 01       	movw	r24, r22
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	ff 90       	pop	r15
    34fe:	ef 90       	pop	r14
    3500:	df 90       	pop	r13
    3502:	cf 90       	pop	r12
    3504:	08 95       	ret

00003506 <BUFFER_Reset>:
    3506:	00 97       	sbiw	r24, 0x00	; 0
    3508:	49 f0       	breq	.+18     	; 0x351c <BUFFER_Reset+0x16>
    350a:	fc 01       	movw	r30, r24
    350c:	14 82       	std	Z+4, r1	; 0x04
    350e:	15 82       	std	Z+5, r1	; 0x05
    3510:	16 82       	std	Z+6, r1	; 0x06
    3512:	17 82       	std	Z+7, r1	; 0x07
    3514:	10 86       	std	Z+8, r1	; 0x08
    3516:	11 86       	std	Z+9, r1	; 0x09
    3518:	12 86       	std	Z+10, r1	; 0x0a
    351a:	13 86       	std	Z+11, r1	; 0x0b
    351c:	08 95       	ret

0000351e <BUFFER_Find>:
	
	/* Element is not in buffer */
	return -1;
}

int32_t BUFFER_Find(BUFFER_t* Buffer, uint8_t* Data, uint32_t Size) {
    351e:	2f 92       	push	r2
    3520:	3f 92       	push	r3
    3522:	4f 92       	push	r4
    3524:	5f 92       	push	r5
    3526:	6f 92       	push	r6
    3528:	7f 92       	push	r7
    352a:	8f 92       	push	r8
    352c:	9f 92       	push	r9
    352e:	af 92       	push	r10
    3530:	bf 92       	push	r11
    3532:	cf 92       	push	r12
    3534:	df 92       	push	r13
    3536:	ef 92       	push	r14
    3538:	ff 92       	push	r15
    353a:	0f 93       	push	r16
    353c:	1f 93       	push	r17
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	cd b7       	in	r28, 0x3d	; 61
    3544:	de b7       	in	r29, 0x3e	; 62
    3546:	60 97       	sbiw	r28, 0x10	; 16
    3548:	cd bf       	out	0x3d, r28	; 61
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	fc 01       	movw	r30, r24
    354e:	cb 01       	movw	r24, r22
	uint32_t Num, Out, i, retval = 0;
	uint8_t found = 0;

	/* Check buffer structure and number of elements in buffer */
	if (Buffer == NULL || (Num = BUFFER_GetFull(Buffer)) < Size) {
    3550:	30 97       	sbiw	r30, 0x00	; 0
    3552:	09 f4       	brne	.+2      	; 0x3556 <BUFFER_Find+0x38>
    3554:	d6 c0       	rjmp	.+428    	; 0x3702 <BUFFER_Find+0x1e4>
	if (Buffer == NULL) {
		return 0;
	}
	
	/* Save values */
	in = Buffer->In;
    3556:	c4 80       	ldd	r12, Z+4	; 0x04
    3558:	d5 80       	ldd	r13, Z+5	; 0x05
    355a:	e6 80       	ldd	r14, Z+6	; 0x06
    355c:	f7 80       	ldd	r15, Z+7	; 0x07
	out = Buffer->Out;
    355e:	40 84       	ldd	r4, Z+8	; 0x08
    3560:	51 84       	ldd	r5, Z+9	; 0x09
    3562:	62 84       	ldd	r6, Z+10	; 0x0a
    3564:	73 84       	ldd	r7, Z+11	; 0x0b
    3566:	49 82       	std	Y+1, r4	; 0x01
    3568:	5a 82       	std	Y+2, r5	; 0x02
    356a:	6b 82       	std	Y+3, r6	; 0x03
    356c:	7c 82       	std	Y+4, r7	; 0x04
		size = 0;
	}
	
	/* Check pointers and return values */
	/* Buffer is not in overflow mode */
	if (in > out) {
    356e:	4c 14       	cp	r4, r12
    3570:	5d 04       	cpc	r5, r13
    3572:	6e 04       	cpc	r6, r14
    3574:	7f 04       	cpc	r7, r15
    3576:	08 f4       	brcc	.+2      	; 0x357a <BUFFER_Find+0x5c>
    3578:	dd c0       	rjmp	.+442    	; 0x3734 <BUFFER_Find+0x216>
    357a:	81 2c       	mov	r8, r1
    357c:	91 2c       	mov	r9, r1
    357e:	54 01       	movw	r10, r8
		size = in - out;
	}
	
	/* Buffer is in overflow mode */
	if (out > in) {
    3580:	49 80       	ldd	r4, Y+1	; 0x01
    3582:	5a 80       	ldd	r5, Y+2	; 0x02
    3584:	6b 80       	ldd	r6, Y+3	; 0x03
    3586:	7c 80       	ldd	r7, Y+4	; 0x04
    3588:	c4 14       	cp	r12, r4
    358a:	d5 04       	cpc	r13, r5
    358c:	e6 04       	cpc	r14, r6
    358e:	f7 04       	cpc	r15, r7
    3590:	60 f4       	brcc	.+24     	; 0x35aa <BUFFER_Find+0x8c>
		size = Buffer->Size - (out - in);
    3592:	80 80       	ld	r8, Z
    3594:	91 80       	ldd	r9, Z+1	; 0x01
    3596:	a2 80       	ldd	r10, Z+2	; 0x02
    3598:	b3 80       	ldd	r11, Z+3	; 0x03
    359a:	8c 0c       	add	r8, r12
    359c:	9d 1c       	adc	r9, r13
    359e:	ae 1c       	adc	r10, r14
    35a0:	bf 1c       	adc	r11, r15
    35a2:	84 18       	sub	r8, r4
    35a4:	95 08       	sbc	r9, r5
    35a6:	a6 08       	sbc	r10, r6
    35a8:	b7 08       	sbc	r11, r7
int32_t BUFFER_Find(BUFFER_t* Buffer, uint8_t* Data, uint32_t Size) {
	uint32_t Num, Out, i, retval = 0;
	uint8_t found = 0;

	/* Check buffer structure and number of elements in buffer */
	if (Buffer == NULL || (Num = BUFFER_GetFull(Buffer)) < Size) {
    35aa:	82 16       	cp	r8, r18
    35ac:	93 06       	cpc	r9, r19
    35ae:	a4 06       	cpc	r10, r20
    35b0:	b5 06       	cpc	r11, r21
    35b2:	08 f4       	brcc	.+2      	; 0x35b6 <BUFFER_Find+0x98>
    35b4:	a6 c0       	rjmp	.+332    	; 0x3702 <BUFFER_Find+0x1e4>

	/* Create temporary variables */
	Out = Buffer->Out;

	/* Go through input elements in buffer */
	while (Num > 0) {
    35b6:	81 14       	cp	r8, r1
    35b8:	91 04       	cpc	r9, r1
    35ba:	a1 04       	cpc	r10, r1
    35bc:	b1 04       	cpc	r11, r1
    35be:	09 f4       	brne	.+2      	; 0x35c2 <BUFFER_Find+0xa4>
    35c0:	a0 c0       	rjmp	.+320    	; 0x3702 <BUFFER_Find+0x1e4>
    35c2:	c0 80       	ld	r12, Z
    35c4:	d1 80       	ldd	r13, Z+1	; 0x01
    35c6:	e2 80       	ldd	r14, Z+2	; 0x02
    35c8:	f3 80       	ldd	r15, Z+3	; 0x03
    35ca:	64 84       	ldd	r6, Z+12	; 0x0c
    35cc:	75 84       	ldd	r7, Z+13	; 0x0d
    35ce:	dc 01       	movw	r26, r24
    35d0:	4d 90       	ld	r4, X+
    35d2:	1d 01       	movw	r2, r26
	return -1;
}

int32_t BUFFER_Find(BUFFER_t* Buffer, uint8_t* Data, uint32_t Size) {
	uint32_t Num, Out, i, retval = 0;
	uint8_t found = 0;
    35d4:	80 e0       	ldi	r24, 0x00	; 0
	/* Element is not in buffer */
	return -1;
}

int32_t BUFFER_Find(BUFFER_t* Buffer, uint8_t* Data, uint32_t Size) {
	uint32_t Num, Out, i, retval = 0;
    35d6:	1d 82       	std	Y+5, r1	; 0x05
    35d8:	1e 82       	std	Y+6, r1	; 0x06
    35da:	1f 82       	std	Y+7, r1	; 0x07
    35dc:	18 86       	std	Y+8, r1	; 0x08
    35de:	29 87       	std	Y+9, r18	; 0x09
    35e0:	3a 87       	std	Y+10, r19	; 0x0a
    35e2:	4b 87       	std	Y+11, r20	; 0x0b
    35e4:	5c 87       	std	Y+12, r21	; 0x0c
    35e6:	49 81       	ldd	r20, Y+1	; 0x01
    35e8:	5a 81       	ldd	r21, Y+2	; 0x02
    35ea:	6b 81       	ldd	r22, Y+3	; 0x03
    35ec:	7c 81       	ldd	r23, Y+4	; 0x04
    35ee:	2b c0       	rjmp	.+86     	; 0x3646 <BUFFER_Find+0x128>
    35f0:	fa 01       	movw	r30, r20
	Out = Buffer->Out;

	/* Go through input elements in buffer */
	while (Num > 0) {
		/* Check output overflow */
		if (Out >= Buffer->Size) {
    35f2:	4f 5f       	subi	r20, 0xFF	; 255
    35f4:	5f 4f       	sbci	r21, 0xFF	; 255
    35f6:	6f 4f       	sbci	r22, 0xFF	; 255
    35f8:	7f 4f       	sbci	r23, 0xFF	; 255
			Out = 0;
		}

		/* Check if current element in buffer matches first element in data array */
		if ((uint8_t)Buffer->Buffer[Out] == (uint8_t)Data[0]) {
    35fa:	e6 0d       	add	r30, r6
    35fc:	f7 1d       	adc	r31, r7
    35fe:	90 81       	ld	r25, Z
    3600:	94 15       	cp	r25, r4
    3602:	89 f1       	breq	.+98     	; 0x3666 <BUFFER_Find+0x148>
			found = 1;
		}

		/* Set new variables */
		Out++;
		Num--;
    3604:	b1 e0       	ldi	r27, 0x01	; 1
    3606:	8b 1a       	sub	r8, r27
    3608:	91 08       	sbc	r9, r1
    360a:	a1 08       	sbc	r10, r1
    360c:	b1 08       	sbc	r11, r1
		retval++;
    360e:	0d 81       	ldd	r16, Y+5	; 0x05
    3610:	1e 81       	ldd	r17, Y+6	; 0x06
    3612:	2f 81       	ldd	r18, Y+7	; 0x07
    3614:	38 85       	ldd	r19, Y+8	; 0x08
    3616:	0f 5f       	subi	r16, 0xFF	; 255
    3618:	1f 4f       	sbci	r17, 0xFF	; 255
    361a:	2f 4f       	sbci	r18, 0xFF	; 255
    361c:	3f 4f       	sbci	r19, 0xFF	; 255
    361e:	09 83       	std	Y+1, r16	; 0x01
    3620:	1a 83       	std	Y+2, r17	; 0x02
    3622:	2b 83       	std	Y+3, r18	; 0x03
    3624:	3c 83       	std	Y+4, r19	; 0x04

		/* We have found first element */
		if (found) {
    3626:	81 11       	cpse	r24, r1
    3628:	2e c0       	rjmp	.+92     	; 0x3686 <BUFFER_Find+0x168>

	/* Create temporary variables */
	Out = Buffer->Out;

	/* Go through input elements in buffer */
	while (Num > 0) {
    362a:	81 14       	cp	r8, r1
    362c:	91 04       	cpc	r9, r1
    362e:	a1 04       	cpc	r10, r1
    3630:	b1 04       	cpc	r11, r1
    3632:	09 f4       	brne	.+2      	; 0x3636 <BUFFER_Find+0x118>
    3634:	66 c0       	rjmp	.+204    	; 0x3702 <BUFFER_Find+0x1e4>
    3636:	09 81       	ldd	r16, Y+1	; 0x01
    3638:	1a 81       	ldd	r17, Y+2	; 0x02
    363a:	2b 81       	ldd	r18, Y+3	; 0x03
    363c:	3c 81       	ldd	r19, Y+4	; 0x04
    363e:	0d 83       	std	Y+5, r16	; 0x05
    3640:	1e 83       	std	Y+6, r17	; 0x06
    3642:	2f 83       	std	Y+7, r18	; 0x07
    3644:	38 87       	std	Y+8, r19	; 0x08
		/* Check output overflow */
		if (Out >= Buffer->Size) {
    3646:	4c 15       	cp	r20, r12
    3648:	5d 05       	cpc	r21, r13
    364a:	6e 05       	cpc	r22, r14
    364c:	7f 05       	cpc	r23, r15
    364e:	80 f2       	brcs	.-96     	; 0x35f0 <BUFFER_Find+0xd2>
    3650:	41 e0       	ldi	r20, 0x01	; 1
    3652:	50 e0       	ldi	r21, 0x00	; 0
    3654:	60 e0       	ldi	r22, 0x00	; 0
    3656:	70 e0       	ldi	r23, 0x00	; 0
    3658:	e0 e0       	ldi	r30, 0x00	; 0
    365a:	f0 e0       	ldi	r31, 0x00	; 0
			Out = 0;
		}

		/* Check if current element in buffer matches first element in data array */
		if ((uint8_t)Buffer->Buffer[Out] == (uint8_t)Data[0]) {
    365c:	e6 0d       	add	r30, r6
    365e:	f7 1d       	adc	r31, r7
    3660:	90 81       	ld	r25, Z
    3662:	94 11       	cpse	r25, r4
    3664:	cf cf       	rjmp	.-98     	; 0x3604 <BUFFER_Find+0xe6>
			found = 1;
		}

		/* Set new variables */
		Out++;
		Num--;
    3666:	11 e0       	ldi	r17, 0x01	; 1
    3668:	81 1a       	sub	r8, r17
    366a:	91 08       	sbc	r9, r1
    366c:	a1 08       	sbc	r10, r1
    366e:	b1 08       	sbc	r11, r1
		retval++;
    3670:	8d 81       	ldd	r24, Y+5	; 0x05
    3672:	9e 81       	ldd	r25, Y+6	; 0x06
    3674:	af 81       	ldd	r26, Y+7	; 0x07
    3676:	b8 85       	ldd	r27, Y+8	; 0x08
    3678:	01 96       	adiw	r24, 0x01	; 1
    367a:	a1 1d       	adc	r26, r1
    367c:	b1 1d       	adc	r27, r1
    367e:	89 83       	std	Y+1, r24	; 0x01
    3680:	9a 83       	std	Y+2, r25	; 0x02
    3682:	ab 83       	std	Y+3, r26	; 0x03
    3684:	bc 83       	std	Y+4, r27	; 0x04
		/* We have found first element */
		if (found) {
			/* First character found */
			/* Check others */
			i = 1;
			while (i < Size) {
    3686:	89 85       	ldd	r24, Y+9	; 0x09
    3688:	9a 85       	ldd	r25, Y+10	; 0x0a
    368a:	ab 85       	ldd	r26, Y+11	; 0x0b
    368c:	bc 85       	ldd	r27, Y+12	; 0x0c
    368e:	82 30       	cpi	r24, 0x02	; 2
    3690:	91 05       	cpc	r25, r1
    3692:	a1 05       	cpc	r26, r1
    3694:	b1 05       	cpc	r27, r1
    3696:	08 f4       	brcc	.+2      	; 0x369a <BUFFER_Find+0x17c>
    3698:	6b c0       	rjmp	.+214    	; 0x3770 <BUFFER_Find+0x252>
    369a:	8c 01       	movw	r16, r24
    369c:	9d 01       	movw	r18, r26
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	a0 e0       	ldi	r26, 0x00	; 0
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	2d 86       	std	Y+13, r2	; 0x0d
    36a8:	3e 86       	std	Y+14, r3	; 0x0e
    36aa:	20 c0       	rjmp	.+64     	; 0x36ec <BUFFER_Find+0x1ce>
    36ac:	4f 87       	std	Y+15, r20	; 0x0f
    36ae:	58 8b       	std	Y+16, r21	; 0x10
				if (Out >= Buffer->Size) {
					Out = 0;
				}

				/* Check if current character in buffer matches character in string */
				if ((uint8_t)Buffer->Buffer[Out] != (uint8_t)Data[i]) {
    36b0:	ed 85       	ldd	r30, Y+13	; 0x0d
    36b2:	fe 85       	ldd	r31, Y+14	; 0x0e
    36b4:	51 90       	ld	r5, Z+
    36b6:	ed 87       	std	Y+13, r30	; 0x0d
    36b8:	fe 87       	std	Y+14, r31	; 0x0e
    36ba:	ef 85       	ldd	r30, Y+15	; 0x0f
    36bc:	f8 89       	ldd	r31, Y+16	; 0x10
    36be:	e6 0d       	add	r30, r6
    36c0:	f7 1d       	adc	r31, r7
    36c2:	e0 81       	ld	r30, Z
    36c4:	e5 11       	cpse	r30, r5
    36c6:	3d c0       	rjmp	.+122    	; 0x3742 <BUFFER_Find+0x224>
					retval += i - 1;
					break;
				}

				/* Set new variables */
				Out++;
    36c8:	4f 5f       	subi	r20, 0xFF	; 255
    36ca:	5f 4f       	sbci	r21, 0xFF	; 255
    36cc:	6f 4f       	sbci	r22, 0xFF	; 255
    36ce:	7f 4f       	sbci	r23, 0xFF	; 255
				Num--;
    36d0:	e1 e0       	ldi	r30, 0x01	; 1
    36d2:	8e 1a       	sub	r8, r30
    36d4:	91 08       	sbc	r9, r1
    36d6:	a1 08       	sbc	r10, r1
    36d8:	b1 08       	sbc	r11, r1
				i++;
    36da:	01 96       	adiw	r24, 0x01	; 1
    36dc:	a1 1d       	adc	r26, r1
    36de:	b1 1d       	adc	r27, r1
		/* We have found first element */
		if (found) {
			/* First character found */
			/* Check others */
			i = 1;
			while (i < Size) {
    36e0:	80 17       	cp	r24, r16
    36e2:	91 07       	cpc	r25, r17
    36e4:	a2 07       	cpc	r26, r18
    36e6:	b3 07       	cpc	r27, r19
    36e8:	09 f4       	brne	.+2      	; 0x36ec <BUFFER_Find+0x1ce>
    36ea:	47 c0       	rjmp	.+142    	; 0x377a <BUFFER_Find+0x25c>
				/* Check output overflow */
				if (Out >= Buffer->Size) {
    36ec:	4c 15       	cp	r20, r12
    36ee:	5d 05       	cpc	r21, r13
    36f0:	6e 05       	cpc	r22, r14
    36f2:	7f 05       	cpc	r23, r15
    36f4:	d8 f2       	brcs	.-74     	; 0x36ac <BUFFER_Find+0x18e>
    36f6:	1f 86       	std	Y+15, r1	; 0x0f
    36f8:	18 8a       	std	Y+16, r1	; 0x10
					Out = 0;
    36fa:	40 e0       	ldi	r20, 0x00	; 0
    36fc:	50 e0       	ldi	r21, 0x00	; 0
    36fe:	ba 01       	movw	r22, r20
    3700:	d7 cf       	rjmp	.-82     	; 0x36b0 <BUFFER_Find+0x192>
	uint32_t Num, Out, i, retval = 0;
	uint8_t found = 0;

	/* Check buffer structure and number of elements in buffer */
	if (Buffer == NULL || (Num = BUFFER_GetFull(Buffer)) < Size) {
		return -1;
    3702:	6f ef       	ldi	r22, 0xFF	; 255
    3704:	7f ef       	ldi	r23, 0xFF	; 255
    3706:	cb 01       	movw	r24, r22
		}
	}

	/* Data sequence is not in buffer */
	return -1;
}
    3708:	60 96       	adiw	r28, 0x10	; 16
    370a:	cd bf       	out	0x3d, r28	; 61
    370c:	de bf       	out	0x3e, r29	; 62
    370e:	df 91       	pop	r29
    3710:	cf 91       	pop	r28
    3712:	1f 91       	pop	r17
    3714:	0f 91       	pop	r16
    3716:	ff 90       	pop	r15
    3718:	ef 90       	pop	r14
    371a:	df 90       	pop	r13
    371c:	cf 90       	pop	r12
    371e:	bf 90       	pop	r11
    3720:	af 90       	pop	r10
    3722:	9f 90       	pop	r9
    3724:	8f 90       	pop	r8
    3726:	7f 90       	pop	r7
    3728:	6f 90       	pop	r6
    372a:	5f 90       	pop	r5
    372c:	4f 90       	pop	r4
    372e:	3f 90       	pop	r3
    3730:	2f 90       	pop	r2
    3732:	08 95       	ret
	}
	
	/* Check pointers and return values */
	/* Buffer is not in overflow mode */
	if (in > out) {
		size = in - out;
    3734:	46 01       	movw	r8, r12
    3736:	57 01       	movw	r10, r14
    3738:	84 18       	sub	r8, r4
    373a:	95 08       	sbc	r9, r5
    373c:	a6 08       	sbc	r10, r6
    373e:	b7 08       	sbc	r11, r7
    3740:	1f cf       	rjmp	.-450    	; 0x3580 <BUFFER_Find+0x62>
					Out = 0;
				}

				/* Check if current character in buffer matches character in string */
				if ((uint8_t)Buffer->Buffer[Out] != (uint8_t)Data[i]) {
					retval += i - 1;
    3742:	0d 81       	ldd	r16, Y+5	; 0x05
    3744:	1e 81       	ldd	r17, Y+6	; 0x06
    3746:	2f 81       	ldd	r18, Y+7	; 0x07
    3748:	38 85       	ldd	r19, Y+8	; 0x08
    374a:	08 0f       	add	r16, r24
    374c:	19 1f       	adc	r17, r25
    374e:	2a 1f       	adc	r18, r26
    3750:	3b 1f       	adc	r19, r27
    3752:	09 83       	std	Y+1, r16	; 0x01
    3754:	1a 83       	std	Y+2, r17	; 0x02
    3756:	2b 83       	std	Y+3, r18	; 0x03
    3758:	3c 83       	std	Y+4, r19	; 0x04
				Num--;
				i++;
			}

			/* We have found data sequence in buffer */
			if (i == Size) {
    375a:	09 85       	ldd	r16, Y+9	; 0x09
    375c:	1a 85       	ldd	r17, Y+10	; 0x0a
    375e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3760:	3c 85       	ldd	r19, Y+12	; 0x0c
    3762:	80 17       	cp	r24, r16
    3764:	91 07       	cpc	r25, r17
    3766:	a2 07       	cpc	r26, r18
    3768:	b3 07       	cpc	r27, r19
    376a:	39 f0       	breq	.+14     	; 0x377a <BUFFER_Find+0x25c>
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	5d cf       	rjmp	.-326    	; 0x362a <BUFFER_Find+0x10c>
		/* We have found first element */
		if (found) {
			/* First character found */
			/* Check others */
			i = 1;
			while (i < Size) {
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	90 e0       	ldi	r25, 0x00	; 0
    3774:	a0 e0       	ldi	r26, 0x00	; 0
    3776:	b0 e0       	ldi	r27, 0x00	; 0
    3778:	f0 cf       	rjmp	.-32     	; 0x375a <BUFFER_Find+0x23c>
				i++;
			}

			/* We have found data sequence in buffer */
			if (i == Size) {
				return retval - 1;
    377a:	69 81       	ldd	r22, Y+1	; 0x01
    377c:	7a 81       	ldd	r23, Y+2	; 0x02
    377e:	8b 81       	ldd	r24, Y+3	; 0x03
    3780:	9c 81       	ldd	r25, Y+4	; 0x04
    3782:	61 50       	subi	r22, 0x01	; 1
    3784:	71 09       	sbc	r23, r1
    3786:	81 09       	sbc	r24, r1
    3788:	91 09       	sbc	r25, r1
    378a:	be cf       	rjmp	.-132    	; 0x3708 <BUFFER_Find+0x1ea>

0000378c <BUFFER_WriteString>:

	/* Data sequence is not in buffer */
	return -1;
}

uint32_t BUFFER_WriteString(BUFFER_t* Buffer, char* buff) {
    378c:	4f 92       	push	r4
    378e:	5f 92       	push	r5
    3790:	6f 92       	push	r6
    3792:	7f 92       	push	r7
    3794:	8f 92       	push	r8
    3796:	9f 92       	push	r9
    3798:	af 92       	push	r10
    379a:	bf 92       	push	r11
    379c:	cf 92       	push	r12
    379e:	df 92       	push	r13
    37a0:	ef 92       	push	r14
    37a2:	ff 92       	push	r15
    37a4:	0f 93       	push	r16
    37a6:	1f 93       	push	r17
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	ec 01       	movw	r28, r24
    37ae:	8b 01       	movw	r16, r22
	/* Write string to buffer */
	return BUFFER_Write(Buffer, (uint8_t *)buff, strlen(buff));
    37b0:	fb 01       	movw	r30, r22
    37b2:	01 90       	ld	r0, Z+
    37b4:	00 20       	and	r0, r0
    37b6:	e9 f7       	brne	.-6      	; 0x37b2 <BUFFER_WriteString+0x26>
    37b8:	31 97       	sbiw	r30, 0x01	; 1
    37ba:	e6 1b       	sub	r30, r22
    37bc:	f7 0b       	sbc	r31, r23
    37be:	6f 01       	movw	r12, r30
    37c0:	e1 2c       	mov	r14, r1
    37c2:	f1 2c       	mov	r15, r1
#if BUFFER_FAST
	uint32_t tocopy;
#endif

	/* Check buffer structure */
	if (Buffer == NULL || count == 0) {
    37c4:	00 97       	sbiw	r24, 0x00	; 0
    37c6:	09 f4       	brne	.+2      	; 0x37ca <BUFFER_WriteString+0x3e>
    37c8:	88 c0       	rjmp	.+272    	; 0x38da <BUFFER_WriteString+0x14e>
    37ca:	c1 14       	cp	r12, r1
    37cc:	d1 04       	cpc	r13, r1
    37ce:	e1 04       	cpc	r14, r1
    37d0:	f1 04       	cpc	r15, r1
    37d2:	09 f4       	brne	.+2      	; 0x37d6 <BUFFER_WriteString+0x4a>
    37d4:	82 c0       	rjmp	.+260    	; 0x38da <BUFFER_WriteString+0x14e>
		return 0;
	}

	/* Check input pointer */
	if (Buffer->In >= Buffer->Size) {
    37d6:	4c 81       	ldd	r20, Y+4	; 0x04
    37d8:	5d 81       	ldd	r21, Y+5	; 0x05
    37da:	6e 81       	ldd	r22, Y+6	; 0x06
    37dc:	7f 81       	ldd	r23, Y+7	; 0x07
    37de:	88 80       	ld	r8, Y
    37e0:	99 80       	ldd	r9, Y+1	; 0x01
    37e2:	aa 80       	ldd	r10, Y+2	; 0x02
    37e4:	bb 80       	ldd	r11, Y+3	; 0x03
    37e6:	48 15       	cp	r20, r8
    37e8:	59 05       	cpc	r21, r9
    37ea:	6a 05       	cpc	r22, r10
    37ec:	7b 05       	cpc	r23, r11
    37ee:	38 f0       	brcs	.+14     	; 0x37fe <BUFFER_WriteString+0x72>
		Buffer->In = 0;
    37f0:	1c 82       	std	Y+4, r1	; 0x04
    37f2:	1d 82       	std	Y+5, r1	; 0x05
    37f4:	1e 82       	std	Y+6, r1	; 0x06
    37f6:	1f 82       	std	Y+7, r1	; 0x07
    37f8:	40 e0       	ldi	r20, 0x00	; 0
    37fa:	50 e0       	ldi	r21, 0x00	; 0
    37fc:	ba 01       	movw	r22, r20
		return 0;
	}
	
	/* Save values */
	in = Buffer->In;
	out = Buffer->Out;
    37fe:	88 85       	ldd	r24, Y+8	; 0x08
    3800:	99 85       	ldd	r25, Y+9	; 0x09
    3802:	aa 85       	ldd	r26, Y+10	; 0x0a
    3804:	bb 85       	ldd	r27, Y+11	; 0x0b
	
	/* Check if the same */
	if (in == out) {
    3806:	84 17       	cp	r24, r20
    3808:	95 07       	cpc	r25, r21
    380a:	a6 07       	cpc	r26, r22
    380c:	b7 07       	cpc	r27, r23
    380e:	09 f4       	brne	.+2      	; 0x3812 <BUFFER_WriteString+0x86>
    3810:	7c c0       	rjmp	.+248    	; 0x390a <BUFFER_WriteString+0x17e>
		size = Buffer->Size;
	}

	/* Check normal mode */
	if (out > in) {
    3812:	48 17       	cp	r20, r24
    3814:	59 07       	cpc	r21, r25
    3816:	6a 07       	cpc	r22, r26
    3818:	7b 07       	cpc	r23, r27
    381a:	08 f0       	brcs	.+2      	; 0x381e <BUFFER_WriteString+0x92>
    381c:	88 c0       	rjmp	.+272    	; 0x392e <BUFFER_WriteString+0x1a2>
		size = out - in;
    381e:	2c 01       	movw	r4, r24
    3820:	3d 01       	movw	r6, r26
    3822:	44 1a       	sub	r4, r20
    3824:	55 0a       	sbc	r5, r21
    3826:	66 0a       	sbc	r6, r22
    3828:	77 0a       	sbc	r7, r23
	}
	
	/* Check if overflow mode */
	if (in > out) {
    382a:	84 17       	cp	r24, r20
    382c:	95 07       	cpc	r25, r21
    382e:	a6 07       	cpc	r26, r22
    3830:	b7 07       	cpc	r27, r23
    3832:	50 f4       	brcc	.+20     	; 0x3848 <BUFFER_WriteString+0xbc>
		size = Buffer->Size - (in - out);
    3834:	2c 01       	movw	r4, r24
    3836:	3d 01       	movw	r6, r26
    3838:	48 0c       	add	r4, r8
    383a:	59 1c       	adc	r5, r9
    383c:	6a 1c       	adc	r6, r10
    383e:	7b 1c       	adc	r7, r11
    3840:	44 1a       	sub	r4, r20
    3842:	55 0a       	sbc	r5, r21
    3844:	66 0a       	sbc	r6, r22
    3846:	77 0a       	sbc	r7, r23
	}
	
	/* Return free memory */
	return size - 1;
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	48 1a       	sub	r4, r24
    384c:	51 08       	sbc	r5, r1
    384e:	61 08       	sbc	r6, r1
    3850:	71 08       	sbc	r7, r1

	/* Get free memory */
	free = BUFFER_GetFree(Buffer);

	/* Check available memory */
	if (free < count) {
    3852:	4c 14       	cp	r4, r12
    3854:	5d 04       	cpc	r5, r13
    3856:	6e 04       	cpc	r6, r14
    3858:	7f 04       	cpc	r7, r15
    385a:	d0 f1       	brcs	.+116    	; 0x38d0 <BUFFER_WriteString+0x144>

	/* We have calculated memory for write */

#if BUFFER_FAST
	/* Calculate number of elements we can put at the end of buffer */
	tocopy = Buffer->Size - Buffer->In;
    385c:	d5 01       	movw	r26, r10
    385e:	c4 01       	movw	r24, r8
    3860:	84 1b       	sub	r24, r20
    3862:	95 0b       	sbc	r25, r21
    3864:	a6 0b       	sbc	r26, r22
    3866:	b7 0b       	sbc	r27, r23
    3868:	46 01       	movw	r8, r12
    386a:	57 01       	movw	r10, r14
    386c:	8c 15       	cp	r24, r12
    386e:	9d 05       	cpc	r25, r13
    3870:	ae 05       	cpc	r26, r14
    3872:	bf 05       	cpc	r27, r15
    3874:	10 f4       	brcc	.+4      	; 0x387a <BUFFER_WriteString+0xee>
    3876:	4c 01       	movw	r8, r24
    3878:	5d 01       	movw	r10, r26
	if (tocopy > count) {
		tocopy = count;
	}

	/* Copy content to buffer */
	memcpy(&Buffer->Buffer[Buffer->In], Data, tocopy);
    387a:	8c 85       	ldd	r24, Y+12	; 0x0c
    387c:	9d 85       	ldd	r25, Y+13	; 0x0d
    387e:	84 0f       	add	r24, r20
    3880:	95 1f       	adc	r25, r21
    3882:	a4 01       	movw	r20, r8
    3884:	b8 01       	movw	r22, r16
    3886:	0e 94 83 44 	call	0x8906	; 0x8906 <memcpy>

	/* Increase number of bytes we copied already */
	i += tocopy;
	Buffer->In += tocopy;
    388a:	8c 81       	ldd	r24, Y+4	; 0x04
    388c:	9d 81       	ldd	r25, Y+5	; 0x05
    388e:	ae 81       	ldd	r26, Y+6	; 0x06
    3890:	bf 81       	ldd	r27, Y+7	; 0x07
    3892:	88 0d       	add	r24, r8
    3894:	99 1d       	adc	r25, r9
    3896:	aa 1d       	adc	r26, r10
    3898:	bb 1d       	adc	r27, r11
    389a:	8c 83       	std	Y+4, r24	; 0x04
    389c:	9d 83       	std	Y+5, r25	; 0x05
    389e:	ae 83       	std	Y+6, r26	; 0x06
    38a0:	bf 83       	std	Y+7, r27	; 0x07
	count -= tocopy;
    38a2:	26 01       	movw	r4, r12
    38a4:	37 01       	movw	r6, r14
    38a6:	48 18       	sub	r4, r8
    38a8:	59 08       	sbc	r5, r9
    38aa:	6a 08       	sbc	r6, r10
    38ac:	7b 08       	sbc	r7, r11

	/* Check if anything to write */
	if (count > 0) {
    38ae:	81 f5       	brne	.+96     	; 0x3910 <BUFFER_WriteString+0x184>
		/* Set input pointer */
		Buffer->In = count;
	}

	/* Check input overflow */
	if (Buffer->In >= Buffer->Size) {
    38b0:	48 81       	ld	r20, Y
    38b2:	59 81       	ldd	r21, Y+1	; 0x01
    38b4:	6a 81       	ldd	r22, Y+2	; 0x02
    38b6:	7b 81       	ldd	r23, Y+3	; 0x03
    38b8:	84 17       	cp	r24, r20
    38ba:	95 07       	cpc	r25, r21
    38bc:	a6 07       	cpc	r26, r22
    38be:	b7 07       	cpc	r27, r23
    38c0:	20 f0       	brcs	.+8      	; 0x38ca <BUFFER_WriteString+0x13e>
		Buffer->In = 0;
    38c2:	1c 82       	std	Y+4, r1	; 0x04
    38c4:	1d 82       	std	Y+5, r1	; 0x05
    38c6:	1e 82       	std	Y+6, r1	; 0x06
    38c8:	1f 82       	std	Y+7, r1	; 0x07
	uint32_t tocopy;
#endif

	/* Check buffer structure */
	if (Buffer == NULL || count == 0) {
		return 0;
    38ca:	b6 01       	movw	r22, r12
    38cc:	c7 01       	movw	r24, r14
    38ce:	09 c0       	rjmp	.+18     	; 0x38e2 <BUFFER_WriteString+0x156>
	free = BUFFER_GetFree(Buffer);

	/* Check available memory */
	if (free < count) {
		/* If no memory, stop execution */
		if (free == 0) {
    38d0:	41 14       	cp	r4, r1
    38d2:	51 04       	cpc	r5, r1
    38d4:	61 04       	cpc	r6, r1
    38d6:	71 04       	cpc	r7, r1
    38d8:	a9 f4       	brne	.+42     	; 0x3904 <BUFFER_WriteString+0x178>
	uint32_t tocopy;
#endif

	/* Check buffer structure */
	if (Buffer == NULL || count == 0) {
		return 0;
    38da:	60 e0       	ldi	r22, 0x00	; 0
    38dc:	70 e0       	ldi	r23, 0x00	; 0
    38de:	80 e0       	ldi	r24, 0x00	; 0
    38e0:	90 e0       	ldi	r25, 0x00	; 0
}

uint32_t BUFFER_WriteString(BUFFER_t* Buffer, char* buff) {
	/* Write string to buffer */
	return BUFFER_Write(Buffer, (uint8_t *)buff, strlen(buff));
}
    38e2:	df 91       	pop	r29
    38e4:	cf 91       	pop	r28
    38e6:	1f 91       	pop	r17
    38e8:	0f 91       	pop	r16
    38ea:	ff 90       	pop	r15
    38ec:	ef 90       	pop	r14
    38ee:	df 90       	pop	r13
    38f0:	cf 90       	pop	r12
    38f2:	bf 90       	pop	r11
    38f4:	af 90       	pop	r10
    38f6:	9f 90       	pop	r9
    38f8:	8f 90       	pop	r8
    38fa:	7f 90       	pop	r7
    38fc:	6f 90       	pop	r6
    38fe:	5f 90       	pop	r5
    3900:	4f 90       	pop	r4
    3902:	08 95       	ret
	free = BUFFER_GetFree(Buffer);

	/* Check available memory */
	if (free < count) {
		/* If no memory, stop execution */
		if (free == 0) {
    3904:	73 01       	movw	r14, r6
    3906:	62 01       	movw	r12, r4
    3908:	a9 cf       	rjmp	.-174    	; 0x385c <BUFFER_WriteString+0xd0>
	if (Buffer == NULL || count == 0) {
		return 0;
	}

	/* Check input pointer */
	if (Buffer->In >= Buffer->Size) {
    390a:	24 01       	movw	r4, r8
    390c:	35 01       	movw	r6, r10
    390e:	9c cf       	rjmp	.-200    	; 0x3848 <BUFFER_WriteString+0xbc>
	count -= tocopy;

	/* Check if anything to write */
	if (count > 0) {
		/* Copy content */
		memcpy(Buffer->Buffer, &Data[i], count);
    3910:	b8 01       	movw	r22, r16
    3912:	68 0d       	add	r22, r8
    3914:	79 1d       	adc	r23, r9
    3916:	a2 01       	movw	r20, r4
    3918:	8c 85       	ldd	r24, Y+12	; 0x0c
    391a:	9d 85       	ldd	r25, Y+13	; 0x0d
    391c:	0e 94 83 44 	call	0x8906	; 0x8906 <memcpy>

		/* Set input pointer */
		Buffer->In = count;
    3920:	4c 82       	std	Y+4, r4	; 0x04
    3922:	5d 82       	std	Y+5, r5	; 0x05
    3924:	6e 82       	std	Y+6, r6	; 0x06
    3926:	7f 82       	std	Y+7, r7	; 0x07
    3928:	d3 01       	movw	r26, r6
    392a:	c2 01       	movw	r24, r4
    392c:	c1 cf       	rjmp	.-126    	; 0x38b0 <BUFFER_WriteString+0x124>
	return i;
#endif
}

uint32_t BUFFER_GetFree(BUFFER_t* Buffer) {
	uint32_t size = 0, in, out;
    392e:	41 2c       	mov	r4, r1
    3930:	51 2c       	mov	r5, r1
    3932:	32 01       	movw	r6, r4
    3934:	7a cf       	rjmp	.-268    	; 0x382a <BUFFER_WriteString+0x9e>

00003936 <BUFFER_ReadString>:
uint32_t BUFFER_WriteString(BUFFER_t* Buffer, char* buff) {
	/* Write string to buffer */
	return BUFFER_Write(Buffer, (uint8_t *)buff, strlen(buff));
}

uint32_t BUFFER_ReadString(BUFFER_t* Buffer, char* buff, uint32_t buffsize) {
    3936:	2f 92       	push	r2
    3938:	3f 92       	push	r3
    393a:	4f 92       	push	r4
    393c:	5f 92       	push	r5
    393e:	6f 92       	push	r6
    3940:	7f 92       	push	r7
    3942:	8f 92       	push	r8
    3944:	9f 92       	push	r9
    3946:	af 92       	push	r10
    3948:	bf 92       	push	r11
    394a:	cf 92       	push	r12
    394c:	df 92       	push	r13
    394e:	ef 92       	push	r14
    3950:	ff 92       	push	r15
    3952:	0f 93       	push	r16
    3954:	1f 93       	push	r17
    3956:	cf 93       	push	r28
    3958:	df 93       	push	r29
    395a:	cd b7       	in	r28, 0x3d	; 61
    395c:	de b7       	in	r29, 0x3e	; 62
    395e:	67 97       	sbiw	r28, 0x17	; 23
    3960:	cd bf       	out	0x3d, r28	; 61
    3962:	de bf       	out	0x3e, r29	; 62
    3964:	1c 01       	movw	r2, r24
    3966:	6a 8b       	std	Y+18, r22	; 0x12
    3968:	7b 8b       	std	Y+19, r23	; 0x13
	uint32_t i = 0;
	uint8_t ch;
	uint32_t freeMem, fullMem;
	
	/* Check value buffer */
	if (Buffer == NULL) {
    396a:	00 97       	sbiw	r24, 0x00	; 0
    396c:	09 f4       	brne	.+2      	; 0x3970 <BUFFER_ReadString+0x3a>
    396e:	26 c2       	rjmp	.+1100   	; 0x3dbc <BUFFER_ReadString+0x486>
	if (Buffer == NULL) {
		return 0;
	}
	
	/* Save values */
	in = Buffer->In;
    3970:	dc 01       	movw	r26, r24
    3972:	14 96       	adiw	r26, 0x04	; 4
    3974:	4d 90       	ld	r4, X+
    3976:	5d 90       	ld	r5, X+
    3978:	6d 90       	ld	r6, X+
    397a:	7c 90       	ld	r7, X
    397c:	17 97       	sbiw	r26, 0x07	; 7
    397e:	4e 86       	std	Y+14, r4	; 0x0e
    3980:	5f 86       	std	Y+15, r5	; 0x0f
    3982:	68 8a       	std	Y+16, r6	; 0x10
    3984:	79 8a       	std	Y+17, r7	; 0x11
	out = Buffer->Out;
    3986:	18 96       	adiw	r26, 0x08	; 8
    3988:	4d 90       	ld	r4, X+
    398a:	5d 90       	ld	r5, X+
    398c:	6d 90       	ld	r6, X+
    398e:	7c 90       	ld	r7, X
    3990:	1b 97       	sbiw	r26, 0x0b	; 11
    3992:	4a 86       	std	Y+10, r4	; 0x0a
    3994:	5b 86       	std	Y+11, r5	; 0x0b
    3996:	6c 86       	std	Y+12, r6	; 0x0c
    3998:	7d 86       	std	Y+13, r7	; 0x0d
	
	/* Check if the same */
	if (in == out) {
    399a:	8e 84       	ldd	r8, Y+14	; 0x0e
    399c:	9f 84       	ldd	r9, Y+15	; 0x0f
    399e:	a8 88       	ldd	r10, Y+16	; 0x10
    39a0:	b9 88       	ldd	r11, Y+17	; 0x11
    39a2:	84 14       	cp	r8, r4
    39a4:	95 04       	cpc	r9, r5
    39a6:	a6 04       	cpc	r10, r6
    39a8:	b7 04       	cpc	r11, r7
    39aa:	09 f4       	brne	.+2      	; 0x39ae <BUFFER_ReadString+0x78>
    39ac:	c2 c1       	rjmp	.+900    	; 0x3d32 <BUFFER_ReadString+0x3fc>
    39ae:	65 01       	movw	r12, r10
    39b0:	54 01       	movw	r10, r8
		size = Buffer->Size;
	}

	/* Check normal mode */
	if (out > in) {
    39b2:	a4 14       	cp	r10, r4
    39b4:	b5 04       	cpc	r11, r5
    39b6:	c6 04       	cpc	r12, r6
    39b8:	d7 04       	cpc	r13, r7
    39ba:	08 f0       	brcs	.+2      	; 0x39be <BUFFER_ReadString+0x88>
    39bc:	03 c2       	rjmp	.+1030   	; 0x3dc4 <BUFFER_ReadString+0x48e>
		size = out - in;
    39be:	4a 18       	sub	r4, r10
    39c0:	5b 08       	sbc	r5, r11
    39c2:	6c 08       	sbc	r6, r12
    39c4:	7d 08       	sbc	r7, r13
	}
	
	/* Check if overflow mode */
	if (in > out) {
    39c6:	8e 85       	ldd	r24, Y+14	; 0x0e
    39c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    39ca:	a8 89       	ldd	r26, Y+16	; 0x10
    39cc:	b9 89       	ldd	r27, Y+17	; 0x11
    39ce:	8a 84       	ldd	r8, Y+10	; 0x0a
    39d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    39d2:	ac 84       	ldd	r10, Y+12	; 0x0c
    39d4:	bd 84       	ldd	r11, Y+13	; 0x0d
    39d6:	88 16       	cp	r8, r24
    39d8:	99 06       	cpc	r9, r25
    39da:	aa 06       	cpc	r10, r26
    39dc:	bb 06       	cpc	r11, r27
    39de:	08 f0       	brcs	.+2      	; 0x39e2 <BUFFER_ReadString+0xac>
    39e0:	ac c1       	rjmp	.+856    	; 0x3d3a <BUFFER_ReadString+0x404>
    39e2:	24 01       	movw	r4, r8
    39e4:	35 01       	movw	r6, r10
		size = Buffer->Size - (in - out);
    39e6:	d1 01       	movw	r26, r2
    39e8:	ad 90       	ld	r10, X+
    39ea:	bd 90       	ld	r11, X+
    39ec:	cd 90       	ld	r12, X+
    39ee:	dc 90       	ld	r13, X
    39f0:	4a 0c       	add	r4, r10
    39f2:	5b 1c       	adc	r5, r11
    39f4:	6c 1c       	adc	r6, r12
    39f6:	7d 1c       	adc	r7, r13
    39f8:	d3 01       	movw	r26, r6
    39fa:	c2 01       	movw	r24, r4
    39fc:	01 97       	sbiw	r24, 0x01	; 1
    39fe:	a1 09       	sbc	r26, r1
    3a00:	b1 09       	sbc	r27, r1
	}
	
	/* Return free memory */
	return size - 1;
    3a02:	4e 84       	ldd	r4, Y+14	; 0x0e
    3a04:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a06:	68 88       	ldd	r6, Y+16	; 0x10
    3a08:	79 88       	ldd	r7, Y+17	; 0x11
    3a0a:	84 19       	sub	r24, r4
    3a0c:	95 09       	sbc	r25, r5
    3a0e:	a6 09       	sbc	r26, r6
    3a10:	b7 09       	sbc	r27, r7
    3a12:	8a 83       	std	Y+2, r24	; 0x02
    3a14:	9b 83       	std	Y+3, r25	; 0x03
    3a16:	ac 83       	std	Y+4, r26	; 0x04
    3a18:	bd 83       	std	Y+5, r27	; 0x05
	}
	
	/* Check pointers and return values */
	/* Buffer is not in overflow mode */
	if (in > out) {
		size = in - out;
    3a1a:	d3 01       	movw	r26, r6
    3a1c:	c2 01       	movw	r24, r4
    3a1e:	6a 84       	ldd	r6, Y+10	; 0x0a
    3a20:	7b 84       	ldd	r7, Y+11	; 0x0b
    3a22:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a24:	9d 84       	ldd	r9, Y+13	; 0x0d
    3a26:	86 19       	sub	r24, r6
    3a28:	97 09       	sbc	r25, r7
    3a2a:	a8 09       	sbc	r26, r8
    3a2c:	b9 09       	sbc	r27, r9
    3a2e:	74 01       	movw	r14, r8
    3a30:	63 01       	movw	r12, r6
	}
	
	/* Buffer is in overflow mode */
	if (out > in) {
    3a32:	8e 84       	ldd	r8, Y+14	; 0x0e
    3a34:	9f 84       	ldd	r9, Y+15	; 0x0f
    3a36:	a8 88       	ldd	r10, Y+16	; 0x10
    3a38:	b9 88       	ldd	r11, Y+17	; 0x11
    3a3a:	8c 14       	cp	r8, r12
    3a3c:	9d 04       	cpc	r9, r13
    3a3e:	ae 04       	cpc	r10, r14
    3a40:	bf 04       	cpc	r11, r15
    3a42:	08 f0       	brcs	.+2      	; 0x3a46 <BUFFER_ReadString+0x110>
    3a44:	73 c1       	rjmp	.+742    	; 0x3d2c <BUFFER_ReadString+0x3f6>
		size = Buffer->Size - (out - in);
    3a46:	d1 01       	movw	r26, r2
    3a48:	6d 91       	ld	r22, X+
    3a4a:	7d 91       	ld	r23, X+
    3a4c:	8d 91       	ld	r24, X+
    3a4e:	9c 91       	ld	r25, X
    3a50:	68 0d       	add	r22, r8
    3a52:	79 1d       	adc	r23, r9
    3a54:	8a 1d       	adc	r24, r10
    3a56:	9b 1d       	adc	r25, r11
    3a58:	6c 19       	sub	r22, r12
    3a5a:	7d 09       	sbc	r23, r13
    3a5c:	8e 09       	sbc	r24, r14
    3a5e:	9f 09       	sbc	r25, r15
	/* Get free */
	freeMem = BUFFER_GetFree(Buffer);
	fullMem = BUFFER_GetFull(Buffer);
	
	/* Check for any data on USART */
	if (
    3a60:	61 15       	cp	r22, r1
    3a62:	71 05       	cpc	r23, r1
    3a64:	81 05       	cpc	r24, r1
    3a66:	91 05       	cpc	r25, r1
    3a68:	09 f4       	brne	.+2      	; 0x3a6c <BUFFER_ReadString+0x136>
    3a6a:	4a c1       	rjmp	.+660    	; 0x3d00 <BUFFER_ReadString+0x3ca>
		fullMem == 0 ||                                                /*!< Buffer empty */
		(
			BUFFER_FindElement(Buffer, Buffer->StringDelimiter) < 0 && /*!< String delimiter is not in buffer */
    3a6c:	f1 01       	movw	r30, r2
    3a6e:	17 85       	ldd	r17, Z+15	; 0x0f
		size = 0;
	}
	
	/* Check pointers and return values */
	/* Buffer is not in overflow mode */
	if (in > out) {
    3a70:	4e 84       	ldd	r4, Y+14	; 0x0e
    3a72:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a74:	68 88       	ldd	r6, Y+16	; 0x10
    3a76:	79 88       	ldd	r7, Y+17	; 0x11
    3a78:	8a 84       	ldd	r8, Y+10	; 0x0a
    3a7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a7c:	ac 84       	ldd	r10, Y+12	; 0x0c
    3a7e:	bd 84       	ldd	r11, Y+13	; 0x0d
    3a80:	84 14       	cp	r8, r4
    3a82:	95 04       	cpc	r9, r5
    3a84:	a6 04       	cpc	r10, r6
    3a86:	b7 04       	cpc	r11, r7
    3a88:	08 f0       	brcs	.+2      	; 0x3a8c <BUFFER_ReadString+0x156>
    3a8a:	68 c1       	rjmp	.+720    	; 0x3d5c <BUFFER_ReadString+0x426>
		size = in - out;
    3a8c:	73 01       	movw	r14, r6
    3a8e:	62 01       	movw	r12, r4
    3a90:	c8 18       	sub	r12, r8
    3a92:	d9 08       	sbc	r13, r9
    3a94:	ea 08       	sbc	r14, r10
    3a96:	fb 08       	sbc	r15, r11
	}
	
	/* Buffer is in overflow mode */
	if (out > in) {
    3a98:	4e 84       	ldd	r4, Y+14	; 0x0e
    3a9a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a9c:	68 88       	ldd	r6, Y+16	; 0x10
    3a9e:	79 88       	ldd	r7, Y+17	; 0x11
    3aa0:	8a 84       	ldd	r8, Y+10	; 0x0a
    3aa2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3aa4:	ac 84       	ldd	r10, Y+12	; 0x0c
    3aa6:	bd 84       	ldd	r11, Y+13	; 0x0d
    3aa8:	48 14       	cp	r4, r8
    3aaa:	59 04       	cpc	r5, r9
    3aac:	6a 04       	cpc	r6, r10
    3aae:	7b 04       	cpc	r7, r11
    3ab0:	68 f4       	brcc	.+26     	; 0x3acc <BUFFER_ReadString+0x196>
		size = Buffer->Size - (out - in);
    3ab2:	d1 01       	movw	r26, r2
    3ab4:	cd 90       	ld	r12, X+
    3ab6:	dd 90       	ld	r13, X+
    3ab8:	ed 90       	ld	r14, X+
    3aba:	fc 90       	ld	r15, X
    3abc:	c4 0c       	add	r12, r4
    3abe:	d5 1c       	adc	r13, r5
    3ac0:	e6 1c       	adc	r14, r6
    3ac2:	f7 1c       	adc	r15, r7
    3ac4:	c8 18       	sub	r12, r8
    3ac6:	d9 08       	sbc	r13, r9
    3ac8:	ea 08       	sbc	r14, r10
    3aca:	fb 08       	sbc	r15, r11
	/* Create temporary variables */
	Num = BUFFER_GetFull(Buffer);
	Out = Buffer->Out;
	
	/* Go through input elements */
	while (Num > 0) {
    3acc:	c1 14       	cp	r12, r1
    3ace:	d1 04       	cpc	r13, r1
    3ad0:	e1 04       	cpc	r14, r1
    3ad2:	f1 04       	cpc	r15, r1
    3ad4:	09 f4       	brne	.+2      	; 0x3ad8 <BUFFER_ReadString+0x1a2>
    3ad6:	63 c1       	rjmp	.+710    	; 0x3d9e <BUFFER_ReadString+0x468>
    3ad8:	d1 01       	movw	r26, r2
    3ada:	4d 90       	ld	r4, X+
    3adc:	5d 90       	ld	r5, X+
    3ade:	6d 90       	ld	r6, X+
    3ae0:	7c 90       	ld	r7, X
    3ae2:	13 97       	sbiw	r26, 0x03	; 3
    3ae4:	4e 82       	std	Y+6, r4	; 0x06
    3ae6:	5f 82       	std	Y+7, r5	; 0x07
    3ae8:	68 86       	std	Y+8, r6	; 0x08
    3aea:	79 86       	std	Y+9, r7	; 0x09
    3aec:	1c 96       	adiw	r26, 0x0c	; 12
    3aee:	0d 90       	ld	r0, X+
    3af0:	bc 91       	ld	r27, X
    3af2:	a0 2d       	mov	r26, r0
		return 0;
	}
	
	/* Save values */
	in = Buffer->In;
	out = Buffer->Out;
    3af4:	8a 84       	ldd	r8, Y+10	; 0x0a
    3af6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3af8:	ac 84       	ldd	r10, Y+12	; 0x0c
    3afa:	bd 84       	ldd	r11, Y+13	; 0x0d
	Buffer->In = 0;
	Buffer->Out = 0;
}

int32_t BUFFER_FindElement(BUFFER_t* Buffer, uint8_t Element) {
	uint32_t Num, Out, retval = 0;
    3afc:	41 2c       	mov	r4, r1
    3afe:	51 2c       	mov	r5, r1
    3b00:	32 01       	movw	r6, r4
    3b02:	6c 8b       	std	Y+20, r22	; 0x14
    3b04:	7d 8b       	std	Y+21, r23	; 0x15
    3b06:	8e 8b       	std	Y+22, r24	; 0x16
    3b08:	9f 8b       	std	Y+23, r25	; 0x17
    3b0a:	81 2f       	mov	r24, r17
    3b0c:	89 01       	movw	r16, r18
    3b0e:	9a 01       	movw	r18, r20
    3b10:	4e 81       	ldd	r20, Y+6	; 0x06
    3b12:	5f 81       	ldd	r21, Y+7	; 0x07
    3b14:	68 85       	ldd	r22, Y+8	; 0x08
    3b16:	79 85       	ldd	r23, Y+9	; 0x09
    3b18:	16 c0       	rjmp	.+44     	; 0x3b46 <BUFFER_ReadString+0x210>
    3b1a:	f4 01       	movw	r30, r8
		if (Out >= Buffer->Size) {
			Out = 0;
		}
		
		/* Check for element */
		if ((uint8_t)Buffer->Buffer[Out] == (uint8_t)Element) {
    3b1c:	ea 0f       	add	r30, r26
    3b1e:	fb 1f       	adc	r31, r27
    3b20:	90 81       	ld	r25, Z
    3b22:	89 17       	cp	r24, r25
    3b24:	f9 f0       	breq	.+62     	; 0x3b64 <BUFFER_ReadString+0x22e>
			/* Element found, return position in buffer */
			return retval;
		}
		
		/* Set new variables */
		Out++;
    3b26:	9f ef       	ldi	r25, 0xFF	; 255
    3b28:	89 1a       	sub	r8, r25
    3b2a:	99 0a       	sbc	r9, r25
    3b2c:	a9 0a       	sbc	r10, r25
    3b2e:	b9 0a       	sbc	r11, r25
		Num--;
		retval++;
    3b30:	ef ef       	ldi	r30, 0xFF	; 255
    3b32:	4e 1a       	sub	r4, r30
    3b34:	5e 0a       	sbc	r5, r30
    3b36:	6e 0a       	sbc	r6, r30
    3b38:	7e 0a       	sbc	r7, r30
	/* Create temporary variables */
	Num = BUFFER_GetFull(Buffer);
	Out = Buffer->Out;
	
	/* Go through input elements */
	while (Num > 0) {
    3b3a:	4c 14       	cp	r4, r12
    3b3c:	5d 04       	cpc	r5, r13
    3b3e:	6e 04       	cpc	r6, r14
    3b40:	7f 04       	cpc	r7, r15
    3b42:	09 f4       	brne	.+2      	; 0x3b46 <BUFFER_ReadString+0x210>
    3b44:	26 c1       	rjmp	.+588    	; 0x3d92 <BUFFER_ReadString+0x45c>
		/* Check output overflow */
		if (Out >= Buffer->Size) {
    3b46:	84 16       	cp	r8, r20
    3b48:	95 06       	cpc	r9, r21
    3b4a:	a6 06       	cpc	r10, r22
    3b4c:	b7 06       	cpc	r11, r23
    3b4e:	28 f3       	brcs	.-54     	; 0x3b1a <BUFFER_ReadString+0x1e4>
    3b50:	e0 e0       	ldi	r30, 0x00	; 0
    3b52:	f0 e0       	ldi	r31, 0x00	; 0
			Out = 0;
    3b54:	81 2c       	mov	r8, r1
    3b56:	91 2c       	mov	r9, r1
    3b58:	54 01       	movw	r10, r8
		}
		
		/* Check for element */
		if ((uint8_t)Buffer->Buffer[Out] == (uint8_t)Element) {
    3b5a:	ea 0f       	add	r30, r26
    3b5c:	fb 1f       	adc	r31, r27
    3b5e:	90 81       	ld	r25, Z
    3b60:	89 13       	cpse	r24, r25
    3b62:	e1 cf       	rjmp	.-62     	; 0x3b26 <BUFFER_ReadString+0x1f0>
    3b64:	6c 89       	ldd	r22, Y+20	; 0x14
    3b66:	7d 89       	ldd	r23, Y+21	; 0x15
    3b68:	8e 89       	ldd	r24, Y+22	; 0x16
    3b6a:	9f 89       	ldd	r25, Y+23	; 0x17
    3b6c:	a9 01       	movw	r20, r18
    3b6e:	98 01       	movw	r18, r16
	freeMem = BUFFER_GetFree(Buffer);
	fullMem = BUFFER_GetFull(Buffer);
	
	/* Check for any data on USART */
	if (
		fullMem == 0 ||                                                /*!< Buffer empty */
    3b70:	77 fc       	sbrc	r7, 7
    3b72:	15 c1       	rjmp	.+554    	; 0x3d9e <BUFFER_ReadString+0x468>
		/* Return 0 */
		return 0;
	}
	
	/* If available buffer size is more than 0 characters */
	while (i < (buffsize - 1)) {
    3b74:	da 01       	movw	r26, r20
    3b76:	c9 01       	movw	r24, r18
    3b78:	01 97       	sbiw	r24, 0x01	; 1
    3b7a:	a1 09       	sbc	r26, r1
    3b7c:	b1 09       	sbc	r27, r1
    3b7e:	8e 83       	std	Y+6, r24	; 0x06
    3b80:	9f 83       	std	Y+7, r25	; 0x07
    3b82:	a8 87       	std	Y+8, r26	; 0x08
    3b84:	b9 87       	std	Y+9, r27	; 0x09
    3b86:	89 2b       	or	r24, r25
    3b88:	8a 2b       	or	r24, r26
    3b8a:	8b 2b       	or	r24, r27
    3b8c:	09 f4       	brne	.+2      	; 0x3b90 <BUFFER_ReadString+0x25a>
    3b8e:	2a c1       	rjmp	.+596    	; 0x3de4 <BUFFER_ReadString+0x4ae>
    3b90:	6a 88       	ldd	r6, Y+18	; 0x12
    3b92:	7b 88       	ldd	r7, Y+19	; 0x13
    3b94:	6a 82       	std	Y+2, r6	; 0x02
    3b96:	7b 82       	std	Y+3, r7	; 0x03
	if (Buffer == NULL) {
		return 0;
	}
	
	/* Save values */
	in = Buffer->In;
    3b98:	4e 85       	ldd	r20, Y+14	; 0x0e
    3b9a:	5f 85       	ldd	r21, Y+15	; 0x0f
    3b9c:	68 89       	ldd	r22, Y+16	; 0x10
    3b9e:	79 89       	ldd	r23, Y+17	; 0x11
	out = Buffer->Out;
    3ba0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ba2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ba4:	ac 85       	ldd	r26, Y+12	; 0x0c
    3ba6:	bd 85       	ldd	r27, Y+13	; 0x0d
		/* Return 0 */
		return 0;
	}
	
	/* If available buffer size is more than 0 characters */
	while (i < (buffsize - 1)) {
    3ba8:	81 2c       	mov	r8, r1
    3baa:	91 2c       	mov	r9, r1
    3bac:	54 01       	movw	r10, r8
    3bae:	77 c0       	rjmp	.+238    	; 0x3c9e <BUFFER_ReadString+0x368>
	}
	
	/* Check pointers and return values */
	/* Buffer is not in overflow mode */
	if (in > out) {
		size = in - out;
    3bb0:	8a 01       	movw	r16, r20
    3bb2:	9b 01       	movw	r18, r22
    3bb4:	08 1b       	sub	r16, r24
    3bb6:	19 0b       	sbc	r17, r25
    3bb8:	2a 0b       	sbc	r18, r26
    3bba:	3b 0b       	sbc	r19, r27
	}
	
	/* Buffer is in overflow mode */
	if (out > in) {
    3bbc:	48 17       	cp	r20, r24
    3bbe:	59 07       	cpc	r21, r25
    3bc0:	6a 07       	cpc	r22, r26
    3bc2:	7b 07       	cpc	r23, r27
    3bc4:	50 f4       	brcc	.+20     	; 0x3bda <BUFFER_ReadString+0x2a4>
		size = Buffer->Size - (out - in);
    3bc6:	8a 01       	movw	r16, r20
    3bc8:	9b 01       	movw	r18, r22
    3bca:	0c 0d       	add	r16, r12
    3bcc:	1d 1d       	adc	r17, r13
    3bce:	2e 1d       	adc	r18, r14
    3bd0:	3f 1d       	adc	r19, r15
    3bd2:	08 1b       	sub	r16, r24
    3bd4:	19 0b       	sbc	r17, r25
    3bd6:	2a 0b       	sbc	r18, r26
    3bd8:	3b 0b       	sbc	r19, r27

	/* Get free memory */
	full = BUFFER_GetFull(Buffer);

	/* Check available memory */
	if (full < count) {
    3bda:	01 2b       	or	r16, r17
    3bdc:	02 2b       	or	r16, r18
    3bde:	03 2b       	or	r16, r19
    3be0:	e9 f1       	breq	.+122    	; 0x3c5c <BUFFER_ReadString+0x326>

	/* We have calculated memory for write */

#if BUFFER_FAST
	/* Calculate number of elements we can put at the end of buffer */
	tocopy = Buffer->Size - Buffer->Out;
    3be2:	26 01       	movw	r4, r12
    3be4:	37 01       	movw	r6, r14
    3be6:	48 1a       	sub	r4, r24
    3be8:	59 0a       	sbc	r5, r25
    3bea:	6a 0a       	sbc	r6, r26
    3bec:	7b 0a       	sbc	r7, r27

	/* Check for copy count */
	if (tocopy > count) {
    3bee:	e2 e0       	ldi	r30, 0x02	; 2
    3bf0:	4e 16       	cp	r4, r30
    3bf2:	51 04       	cpc	r5, r1
    3bf4:	61 04       	cpc	r6, r1
    3bf6:	71 04       	cpc	r7, r1
    3bf8:	08 f0       	brcs	.+2      	; 0x3bfc <BUFFER_ReadString+0x2c6>
    3bfa:	ba c0       	rjmp	.+372    	; 0x3d70 <BUFFER_ReadString+0x43a>
		tocopy = count;
	}

	/* Copy content from buffer */
	memcpy(Data, &Buffer->Buffer[Buffer->Out], tocopy);
    3bfc:	f1 01       	movw	r30, r2
    3bfe:	04 85       	ldd	r16, Z+12	; 0x0c
    3c00:	15 85       	ldd	r17, Z+13	; 0x0d
    3c02:	b8 01       	movw	r22, r16
    3c04:	68 0f       	add	r22, r24
    3c06:	79 1f       	adc	r23, r25
    3c08:	a2 01       	movw	r20, r4
    3c0a:	ce 01       	movw	r24, r28
    3c0c:	01 96       	adiw	r24, 0x01	; 1
    3c0e:	0e 94 83 44 	call	0x8906	; 0x8906 <memcpy>

	/* Increase number of bytes we copied already */
	i += tocopy;
	Buffer->Out += tocopy;
    3c12:	d1 01       	movw	r26, r2
    3c14:	18 96       	adiw	r26, 0x08	; 8
    3c16:	cd 92       	st	X+, r12
    3c18:	dd 92       	st	X+, r13
    3c1a:	ed 92       	st	X+, r14
    3c1c:	fc 92       	st	X, r15
    3c1e:	1b 97       	sbiw	r26, 0x0b	; 11
	count -= tocopy;

	/* Check if anything to read */
	if (count > 0) {
    3c20:	4a 94       	dec	r4
    3c22:	45 28       	or	r4, r5
    3c24:	46 28       	or	r4, r6
    3c26:	47 28       	or	r4, r7
    3c28:	09 f4       	brne	.+2      	; 0x3c2c <BUFFER_ReadString+0x2f6>
    3c2a:	9c c0       	rjmp	.+312    	; 0x3d64 <BUFFER_ReadString+0x42e>
		/* Copy content */
		memcpy(&Data[i], Buffer->Buffer, count);
    3c2c:	f8 01       	movw	r30, r16
    3c2e:	80 81       	ld	r24, Z
    3c30:	89 83       	std	Y+1, r24	; 0x01

		/* Set input pointer */
		Buffer->Out = count;
    3c32:	41 2c       	mov	r4, r1
    3c34:	51 2c       	mov	r5, r1
    3c36:	32 01       	movw	r6, r4
    3c38:	43 94       	inc	r4
    3c3a:	d1 01       	movw	r26, r2
    3c3c:	18 96       	adiw	r26, 0x08	; 8
    3c3e:	4d 92       	st	X+, r4
    3c40:	5d 92       	st	X+, r5
    3c42:	6d 92       	st	X+, r6
    3c44:	7c 92       	st	X, r7
    3c46:	1b 97       	sbiw	r26, 0x0b	; 11
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	a0 e0       	ldi	r26, 0x00	; 0
    3c4e:	b0 e0       	ldi	r27, 0x00	; 0
	}

	/* Check output overflow */
	if (Buffer->Out >= Buffer->Size) {
    3c50:	8c 15       	cp	r24, r12
    3c52:	9d 05       	cpc	r25, r13
    3c54:	ae 05       	cpc	r26, r14
    3c56:	bf 05       	cpc	r27, r15
    3c58:	08 f0       	brcs	.+2      	; 0x3c5c <BUFFER_ReadString+0x326>
    3c5a:	84 c0       	rjmp	.+264    	; 0x3d64 <BUFFER_ReadString+0x42e>
	while (i < (buffsize - 1)) {
		/* We have available data */
		BUFFER_Read(Buffer, &ch, 1);
		
		/* Save character */
		buff[i] = (char)ch;
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	aa 81       	ldd	r26, Y+2	; 0x02
    3c60:	bb 81       	ldd	r27, Y+3	; 0x03
    3c62:	8d 93       	st	X+, r24
    3c64:	aa 83       	std	Y+2, r26	; 0x02
    3c66:	bb 83       	std	Y+3, r27	; 0x03
		
		/* Check for end of string */
		if ((char)buff[i] == (char)Buffer->StringDelimiter) {
    3c68:	f1 01       	movw	r30, r2
    3c6a:	97 85       	ldd	r25, Z+15	; 0x0f
    3c6c:	89 17       	cp	r24, r25
    3c6e:	91 f1       	breq	.+100    	; 0x3cd4 <BUFFER_ReadString+0x39e>
			/* Done */
			break;
		}
		
		/* Increase */
		i++;
    3c70:	ff ef       	ldi	r31, 0xFF	; 255
    3c72:	8f 1a       	sub	r8, r31
    3c74:	9f 0a       	sbc	r9, r31
    3c76:	af 0a       	sbc	r10, r31
    3c78:	bf 0a       	sbc	r11, r31
		/* Return 0 */
		return 0;
	}
	
	/* If available buffer size is more than 0 characters */
	while (i < (buffsize - 1)) {
    3c7a:	4e 80       	ldd	r4, Y+6	; 0x06
    3c7c:	5f 80       	ldd	r5, Y+7	; 0x07
    3c7e:	68 84       	ldd	r6, Y+8	; 0x08
    3c80:	79 84       	ldd	r7, Y+9	; 0x09
    3c82:	84 14       	cp	r8, r4
    3c84:	95 04       	cpc	r9, r5
    3c86:	a6 04       	cpc	r10, r6
    3c88:	b7 04       	cpc	r11, r7
    3c8a:	20 f5       	brcc	.+72     	; 0x3cd4 <BUFFER_ReadString+0x39e>
    3c8c:	f1 01       	movw	r30, r2
    3c8e:	80 85       	ldd	r24, Z+8	; 0x08
    3c90:	91 85       	ldd	r25, Z+9	; 0x09
    3c92:	a2 85       	ldd	r26, Z+10	; 0x0a
    3c94:	b3 85       	ldd	r27, Z+11	; 0x0b
    3c96:	44 81       	ldd	r20, Z+4	; 0x04
    3c98:	55 81       	ldd	r21, Z+5	; 0x05
    3c9a:	66 81       	ldd	r22, Z+6	; 0x06
    3c9c:	77 81       	ldd	r23, Z+7	; 0x07
	if (Buffer == NULL || count == 0) {
		return 0;
	}

	/* Check output pointer */
	if (Buffer->Out >= Buffer->Size) {
    3c9e:	f1 01       	movw	r30, r2
    3ca0:	c0 80       	ld	r12, Z
    3ca2:	d1 80       	ldd	r13, Z+1	; 0x01
    3ca4:	e2 80       	ldd	r14, Z+2	; 0x02
    3ca6:	f3 80       	ldd	r15, Z+3	; 0x03
    3ca8:	8c 15       	cp	r24, r12
    3caa:	9d 05       	cpc	r25, r13
    3cac:	ae 05       	cpc	r26, r14
    3cae:	bf 05       	cpc	r27, r15
    3cb0:	38 f0       	brcs	.+14     	; 0x3cc0 <BUFFER_ReadString+0x38a>
		Buffer->Out = 0;
    3cb2:	10 86       	std	Z+8, r1	; 0x08
    3cb4:	11 86       	std	Z+9, r1	; 0x09
    3cb6:	12 86       	std	Z+10, r1	; 0x0a
    3cb8:	13 86       	std	Z+11, r1	; 0x0b
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	dc 01       	movw	r26, r24
		size = 0;
	}
	
	/* Check pointers and return values */
	/* Buffer is not in overflow mode */
	if (in > out) {
    3cc0:	84 17       	cp	r24, r20
    3cc2:	95 07       	cpc	r25, r21
    3cc4:	a6 07       	cpc	r26, r22
    3cc6:	b7 07       	cpc	r27, r23
    3cc8:	08 f4       	brcc	.+2      	; 0x3ccc <BUFFER_ReadString+0x396>
    3cca:	72 cf       	rjmp	.-284    	; 0x3bb0 <BUFFER_ReadString+0x27a>
    3ccc:	00 e0       	ldi	r16, 0x00	; 0
    3cce:	10 e0       	ldi	r17, 0x00	; 0
    3cd0:	98 01       	movw	r18, r16
    3cd2:	74 cf       	rjmp	.-280    	; 0x3bbc <BUFFER_ReadString+0x286>
		/* Increase */
		i++;
	}
	
	/* Add zero to the end of string */
	if (i == (buffsize - 1)) {
    3cd4:	4e 80       	ldd	r4, Y+6	; 0x06
    3cd6:	5f 80       	ldd	r5, Y+7	; 0x07
    3cd8:	68 84       	ldd	r6, Y+8	; 0x08
    3cda:	79 84       	ldd	r7, Y+9	; 0x09
    3cdc:	48 14       	cp	r4, r8
    3cde:	59 04       	cpc	r5, r9
    3ce0:	6a 04       	cpc	r6, r10
    3ce2:	7b 04       	cpc	r7, r11
    3ce4:	09 f4       	brne	.+2      	; 0x3ce8 <BUFFER_ReadString+0x3b2>
    3ce6:	72 c0       	rjmp	.+228    	; 0x3dcc <BUFFER_ReadString+0x496>
		buff[i] = 0;
	} else {
		buff[++i] = 0;
    3ce8:	0f ef       	ldi	r16, 0xFF	; 255
    3cea:	80 1a       	sub	r8, r16
    3cec:	90 0a       	sbc	r9, r16
    3cee:	a0 0a       	sbc	r10, r16
    3cf0:	b0 0a       	sbc	r11, r16
    3cf2:	ea 89       	ldd	r30, Y+18	; 0x12
    3cf4:	fb 89       	ldd	r31, Y+19	; 0x13
    3cf6:	e8 0d       	add	r30, r8
    3cf8:	f9 1d       	adc	r31, r9
    3cfa:	10 82       	st	Z, r1
    3cfc:	c5 01       	movw	r24, r10
    3cfe:	b4 01       	movw	r22, r8
	}

	/* Return number of characters in buffer */
	return i;
}
    3d00:	67 96       	adiw	r28, 0x17	; 23
    3d02:	cd bf       	out	0x3d, r28	; 61
    3d04:	de bf       	out	0x3e, r29	; 62
    3d06:	df 91       	pop	r29
    3d08:	cf 91       	pop	r28
    3d0a:	1f 91       	pop	r17
    3d0c:	0f 91       	pop	r16
    3d0e:	ff 90       	pop	r15
    3d10:	ef 90       	pop	r14
    3d12:	df 90       	pop	r13
    3d14:	cf 90       	pop	r12
    3d16:	bf 90       	pop	r11
    3d18:	af 90       	pop	r10
    3d1a:	9f 90       	pop	r9
    3d1c:	8f 90       	pop	r8
    3d1e:	7f 90       	pop	r7
    3d20:	6f 90       	pop	r6
    3d22:	5f 90       	pop	r5
    3d24:	4f 90       	pop	r4
    3d26:	3f 90       	pop	r3
    3d28:	2f 90       	pop	r2
    3d2a:	08 95       	ret
	if (in > out) {
		size = in - out;
	}
	
	/* Buffer is in overflow mode */
	if (out > in) {
    3d2c:	bc 01       	movw	r22, r24
    3d2e:	cd 01       	movw	r24, r26
    3d30:	97 ce       	rjmp	.-722    	; 0x3a60 <BUFFER_ReadString+0x12a>
	in = Buffer->In;
	out = Buffer->Out;
	
	/* Check if the same */
	if (in == out) {
		size = Buffer->Size;
    3d32:	4d 90       	ld	r4, X+
    3d34:	5d 90       	ld	r5, X+
    3d36:	6d 90       	ld	r6, X+
    3d38:	7c 90       	ld	r7, X
	if (in > out) {
		size = Buffer->Size - (in - out);
	}
	
	/* Return free memory */
	return size - 1;
    3d3a:	d3 01       	movw	r26, r6
    3d3c:	c2 01       	movw	r24, r4
    3d3e:	01 97       	sbiw	r24, 0x01	; 1
    3d40:	a1 09       	sbc	r26, r1
    3d42:	b1 09       	sbc	r27, r1
    3d44:	8a 83       	std	Y+2, r24	; 0x02
    3d46:	9b 83       	std	Y+3, r25	; 0x03
    3d48:	ac 83       	std	Y+4, r26	; 0x04
    3d4a:	bd 83       	std	Y+5, r27	; 0x05
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	dc 01       	movw	r26, r24
    3d52:	ca 84       	ldd	r12, Y+10	; 0x0a
    3d54:	db 84       	ldd	r13, Y+11	; 0x0b
    3d56:	ec 84       	ldd	r14, Y+12	; 0x0c
    3d58:	fd 84       	ldd	r15, Y+13	; 0x0d
    3d5a:	6b ce       	rjmp	.-810    	; 0x3a32 <BUFFER_ReadString+0xfc>
		size = 0;
	}
	
	/* Check pointers and return values */
	/* Buffer is not in overflow mode */
	if (in > out) {
    3d5c:	c1 2c       	mov	r12, r1
    3d5e:	d1 2c       	mov	r13, r1
    3d60:	76 01       	movw	r14, r12
    3d62:	9a ce       	rjmp	.-716    	; 0x3a98 <BUFFER_ReadString+0x162>
		Buffer->Out = count;
	}

	/* Check output overflow */
	if (Buffer->Out >= Buffer->Size) {
		Buffer->Out = 0;
    3d64:	f1 01       	movw	r30, r2
    3d66:	10 86       	std	Z+8, r1	; 0x08
    3d68:	11 86       	std	Z+9, r1	; 0x09
    3d6a:	12 86       	std	Z+10, r1	; 0x0a
    3d6c:	13 86       	std	Z+11, r1	; 0x0b
    3d6e:	76 cf       	rjmp	.-276    	; 0x3c5c <BUFFER_ReadString+0x326>
	if (tocopy > count) {
		tocopy = count;
	}

	/* Copy content from buffer */
	memcpy(Data, &Buffer->Buffer[Buffer->Out], tocopy);
    3d70:	f1 01       	movw	r30, r2
    3d72:	24 85       	ldd	r18, Z+12	; 0x0c
    3d74:	35 85       	ldd	r19, Z+13	; 0x0d
    3d76:	28 0f       	add	r18, r24
    3d78:	39 1f       	adc	r19, r25
    3d7a:	f9 01       	movw	r30, r18
    3d7c:	20 81       	ld	r18, Z
    3d7e:	29 83       	std	Y+1, r18	; 0x01

	/* Increase number of bytes we copied already */
	i += tocopy;
	Buffer->Out += tocopy;
    3d80:	01 96       	adiw	r24, 0x01	; 1
    3d82:	a1 1d       	adc	r26, r1
    3d84:	b1 1d       	adc	r27, r1
    3d86:	f1 01       	movw	r30, r2
    3d88:	80 87       	std	Z+8, r24	; 0x08
    3d8a:	91 87       	std	Z+9, r25	; 0x09
    3d8c:	a2 87       	std	Z+10, r26	; 0x0a
    3d8e:	b3 87       	std	Z+11, r27	; 0x0b
    3d90:	5f cf       	rjmp	.-322    	; 0x3c50 <BUFFER_ReadString+0x31a>
    3d92:	6c 89       	ldd	r22, Y+20	; 0x14
    3d94:	7d 89       	ldd	r23, Y+21	; 0x15
    3d96:	8e 89       	ldd	r24, Y+22	; 0x16
    3d98:	9f 89       	ldd	r25, Y+23	; 0x17
    3d9a:	a9 01       	movw	r20, r18
    3d9c:	98 01       	movw	r18, r16
	
	/* Check for any data on USART */
	if (
		fullMem == 0 ||                                                /*!< Buffer empty */
		(
			BUFFER_FindElement(Buffer, Buffer->StringDelimiter) < 0 && /*!< String delimiter is not in buffer */
    3d9e:	4a 80       	ldd	r4, Y+2	; 0x02
    3da0:	5b 80       	ldd	r5, Y+3	; 0x03
    3da2:	6c 80       	ldd	r6, Y+4	; 0x04
    3da4:	7d 80       	ldd	r7, Y+5	; 0x05
    3da6:	45 28       	or	r4, r5
    3da8:	46 28       	or	r4, r6
    3daa:	47 28       	or	r4, r7
    3dac:	09 f4       	brne	.+2      	; 0x3db0 <BUFFER_ReadString+0x47a>
    3dae:	e2 ce       	rjmp	.-572    	; 0x3b74 <BUFFER_ReadString+0x23e>
			freeMem != 0 &&                                            /*!< Buffer is not full */
    3db0:	62 17       	cp	r22, r18
    3db2:	73 07       	cpc	r23, r19
    3db4:	84 07       	cpc	r24, r20
    3db6:	95 07       	cpc	r25, r21
    3db8:	08 f0       	brcs	.+2      	; 0x3dbc <BUFFER_ReadString+0x486>
    3dba:	dc ce       	rjmp	.-584    	; 0x3b74 <BUFFER_ReadString+0x23e>
	uint8_t ch;
	uint32_t freeMem, fullMem;
	
	/* Check value buffer */
	if (Buffer == NULL) {
		return 0;
    3dbc:	60 e0       	ldi	r22, 0x00	; 0
    3dbe:	70 e0       	ldi	r23, 0x00	; 0
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	9e cf       	rjmp	.-196    	; 0x3d00 <BUFFER_ReadString+0x3ca>
	return i;
#endif
}

uint32_t BUFFER_GetFree(BUFFER_t* Buffer) {
	uint32_t size = 0, in, out;
    3dc4:	41 2c       	mov	r4, r1
    3dc6:	51 2c       	mov	r5, r1
    3dc8:	32 01       	movw	r6, r4
    3dca:	fd cd       	rjmp	.-1030   	; 0x39c6 <BUFFER_ReadString+0x90>
    3dcc:	ee 81       	ldd	r30, Y+6	; 0x06
    3dce:	ff 81       	ldd	r31, Y+7	; 0x07
		i++;
	}
	
	/* Add zero to the end of string */
	if (i == (buffsize - 1)) {
		buff[i] = 0;
    3dd0:	6a 88       	ldd	r6, Y+18	; 0x12
    3dd2:	7b 88       	ldd	r7, Y+19	; 0x13
    3dd4:	e6 0d       	add	r30, r6
    3dd6:	f7 1d       	adc	r31, r7
    3dd8:	10 82       	st	Z, r1
    3dda:	6e 81       	ldd	r22, Y+6	; 0x06
    3ddc:	7f 81       	ldd	r23, Y+7	; 0x07
    3dde:	88 85       	ldd	r24, Y+8	; 0x08
    3de0:	99 85       	ldd	r25, Y+9	; 0x09
    3de2:	8e cf       	rjmp	.-228    	; 0x3d00 <BUFFER_ReadString+0x3ca>
		/* Return 0 */
		return 0;
	}
	
	/* If available buffer size is more than 0 characters */
	while (i < (buffsize - 1)) {
    3de4:	e0 e0       	ldi	r30, 0x00	; 0
    3de6:	f0 e0       	ldi	r31, 0x00	; 0
    3de8:	f3 cf       	rjmp	.-26     	; 0x3dd0 <BUFFER_ReadString+0x49a>

00003dea <ParseMAC>:
	do {
		/* Check for wrapper */
		if (ESP8266->Flags.F.WaitForWrapper) {
			/* We have found it, stop execution here */
			if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {
				ESP8266->Flags.F.WaitForWrapper = 0;
    3dea:	ef 92       	push	r14
    3dec:	ff 92       	push	r15
    3dee:	0f 93       	push	r16
    3df0:	1f 93       	push	r17
    3df2:	cf 93       	push	r28
    3df4:	df 93       	push	r29
    3df6:	7b 01       	movw	r14, r22
    3df8:	8a 01       	movw	r16, r20
    3dfa:	6c e8       	ldi	r22, 0x8C	; 140
    3dfc:	73 e2       	ldi	r23, 0x23	; 35
    3dfe:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    3e02:	00 97       	sbiw	r24, 0x00	; 0
    3e04:	09 f4       	brne	.+2      	; 0x3e08 <ParseMAC+0x1e>
    3e06:	6e c0       	rjmp	.+220    	; 0x3ee4 <ParseMAC+0xfa>
    3e08:	e7 01       	movw	r28, r14
    3e0a:	e6 e0       	ldi	r30, 0x06	; 6
    3e0c:	fe 2e       	mov	r15, r30
    3e0e:	e1 2c       	mov	r14, r1
    3e10:	38 2f       	mov	r19, r24
    3e12:	fc 01       	movw	r30, r24
    3e14:	80 e0       	ldi	r24, 0x00	; 0
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	dc 01       	movw	r26, r24
    3e1a:	5e 2f       	mov	r21, r30
    3e1c:	53 1b       	sub	r21, r19
    3e1e:	21 91       	ld	r18, Z+
    3e20:	40 ed       	ldi	r20, 0xD0	; 208
    3e22:	42 0f       	add	r20, r18
    3e24:	4a 30       	cpi	r20, 0x0A	; 10
    3e26:	f0 f0       	brcs	.+60     	; 0x3e64 <ParseMAC+0x7a>
    3e28:	42 2f       	mov	r20, r18
    3e2a:	4f 7d       	andi	r20, 0xDF	; 223
    3e2c:	41 54       	subi	r20, 0x41	; 65
    3e2e:	46 30       	cpi	r20, 0x06	; 6
    3e30:	88 f1       	brcs	.+98     	; 0x3e94 <ParseMAC+0xaa>
    3e32:	89 93       	st	Y+, r24
    3e34:	e5 0e       	add	r14, r21
    3e36:	fa 94       	dec	r15
    3e38:	49 f0       	breq	.+18     	; 0x3e4c <ParseMAC+0x62>
    3e3a:	e3 94       	inc	r14
    3e3c:	6c e8       	ldi	r22, 0x8C	; 140
    3e3e:	73 e2       	ldi	r23, 0x23	; 35
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    3e48:	00 97       	sbiw	r24, 0x00	; 0
    3e4a:	11 f7       	brne	.-60     	; 0x3e10 <ParseMAC+0x26>
    3e4c:	01 15       	cp	r16, r1
    3e4e:	11 05       	cpc	r17, r1
    3e50:	11 f0       	breq	.+4      	; 0x3e56 <ParseMAC+0x6c>
    3e52:	f8 01       	movw	r30, r16
    3e54:	e0 82       	st	Z, r14
    3e56:	df 91       	pop	r29
    3e58:	cf 91       	pop	r28
    3e5a:	1f 91       	pop	r17
    3e5c:	0f 91       	pop	r16
    3e5e:	ff 90       	pop	r15
    3e60:	ef 90       	pop	r14
    3e62:	08 95       	ret
    3e64:	88 0f       	add	r24, r24
    3e66:	99 1f       	adc	r25, r25
    3e68:	aa 1f       	adc	r26, r26
    3e6a:	bb 1f       	adc	r27, r27
    3e6c:	88 0f       	add	r24, r24
    3e6e:	99 1f       	adc	r25, r25
    3e70:	aa 1f       	adc	r26, r26
    3e72:	bb 1f       	adc	r27, r27
    3e74:	88 0f       	add	r24, r24
    3e76:	99 1f       	adc	r25, r25
    3e78:	aa 1f       	adc	r26, r26
    3e7a:	bb 1f       	adc	r27, r27
    3e7c:	88 0f       	add	r24, r24
    3e7e:	99 1f       	adc	r25, r25
    3e80:	aa 1f       	adc	r26, r26
    3e82:	bb 1f       	adc	r27, r27
    3e84:	50 e0       	ldi	r21, 0x00	; 0
    3e86:	60 e0       	ldi	r22, 0x00	; 0
    3e88:	70 e0       	ldi	r23, 0x00	; 0
    3e8a:	84 0f       	add	r24, r20
    3e8c:	95 1f       	adc	r25, r21
    3e8e:	a6 1f       	adc	r26, r22
    3e90:	b7 1f       	adc	r27, r23
    3e92:	c3 cf       	rjmp	.-122    	; 0x3e1a <ParseMAC+0x30>
    3e94:	88 0f       	add	r24, r24
    3e96:	99 1f       	adc	r25, r25
    3e98:	aa 1f       	adc	r26, r26
    3e9a:	bb 1f       	adc	r27, r27
    3e9c:	88 0f       	add	r24, r24
    3e9e:	99 1f       	adc	r25, r25
    3ea0:	aa 1f       	adc	r26, r26
    3ea2:	bb 1f       	adc	r27, r27
    3ea4:	88 0f       	add	r24, r24
    3ea6:	99 1f       	adc	r25, r25
    3ea8:	aa 1f       	adc	r26, r26
    3eaa:	bb 1f       	adc	r27, r27
    3eac:	88 0f       	add	r24, r24
    3eae:	99 1f       	adc	r25, r25
    3eb0:	aa 1f       	adc	r26, r26
    3eb2:	bb 1f       	adc	r27, r27
    3eb4:	4f e9       	ldi	r20, 0x9F	; 159
    3eb6:	42 0f       	add	r20, r18
    3eb8:	46 30       	cpi	r20, 0x06	; 6
    3eba:	30 f4       	brcc	.+12     	; 0x3ec8 <ParseMAC+0xde>
    3ebc:	49 ea       	ldi	r20, 0xA9	; 169
    3ebe:	42 0f       	add	r20, r18
    3ec0:	50 e0       	ldi	r21, 0x00	; 0
    3ec2:	60 e0       	ldi	r22, 0x00	; 0
    3ec4:	70 e0       	ldi	r23, 0x00	; 0
    3ec6:	e1 cf       	rjmp	.-62     	; 0x3e8a <ParseMAC+0xa0>
    3ec8:	4f eb       	ldi	r20, 0xBF	; 191
    3eca:	42 0f       	add	r20, r18
    3ecc:	46 30       	cpi	r20, 0x06	; 6
    3ece:	30 f4       	brcc	.+12     	; 0x3edc <ParseMAC+0xf2>
    3ed0:	49 ec       	ldi	r20, 0xC9	; 201
    3ed2:	42 0f       	add	r20, r18
    3ed4:	50 e0       	ldi	r21, 0x00	; 0
    3ed6:	60 e0       	ldi	r22, 0x00	; 0
    3ed8:	70 e0       	ldi	r23, 0x00	; 0
    3eda:	d7 cf       	rjmp	.-82     	; 0x3e8a <ParseMAC+0xa0>
    3edc:	40 e0       	ldi	r20, 0x00	; 0
    3ede:	50 e0       	ldi	r21, 0x00	; 0
    3ee0:	ba 01       	movw	r22, r20
    3ee2:	d3 cf       	rjmp	.-90     	; 0x3e8a <ParseMAC+0xa0>
    3ee4:	e1 2c       	mov	r14, r1
    3ee6:	b2 cf       	rjmp	.-156    	; 0x3e4c <ParseMAC+0x62>

00003ee8 <ParseCIPSTA>:
    3ee8:	cf 92       	push	r12
    3eea:	df 92       	push	r13
    3eec:	ef 92       	push	r14
    3eee:	ff 92       	push	r15
    3ef0:	0f 93       	push	r16
    3ef2:	1f 93       	push	r17
    3ef4:	cf 93       	push	r28
    3ef6:	df 93       	push	r29
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
    3efc:	60 97       	sbiw	r28, 0x10	; 16
    3efe:	cd bf       	out	0x3d, r28	; 61
    3f00:	de bf       	out	0x3e, r29	; 62
    3f02:	8c 01       	movw	r16, r24
    3f04:	6b 01       	movw	r12, r22
    3f06:	4e e0       	ldi	r20, 0x0E	; 14
    3f08:	50 e0       	ldi	r21, 0x00	; 0
    3f0a:	8a ee       	ldi	r24, 0xEA	; 234
    3f0c:	91 e2       	ldi	r25, 0x21	; 33
    3f0e:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    3f12:	89 2b       	or	r24, r25
    3f14:	09 f4       	brne	.+2      	; 0x3f18 <ParseCIPSTA+0x30>
    3f16:	78 c0       	rjmp	.+240    	; 0x4008 <__stack+0x9>
    3f18:	43 e1       	ldi	r20, 0x13	; 19
    3f1a:	50 e0       	ldi	r21, 0x00	; 0
    3f1c:	b6 01       	movw	r22, r12
    3f1e:	89 ef       	ldi	r24, 0xF9	; 249
    3f20:	91 e2       	ldi	r25, 0x21	; 33
    3f22:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    3f26:	89 2b       	or	r24, r25
    3f28:	09 f0       	breq	.+2      	; 0x3f2c <ParseCIPSTA+0x44>
    3f2a:	e7 c0       	rjmp	.+462    	; 0x40fa <__stack+0xfb>
    3f2c:	e5 e1       	ldi	r30, 0x15	; 21
    3f2e:	f0 e0       	ldi	r31, 0x00	; 0
    3f30:	78 01       	movw	r14, r16
    3f32:	2b ed       	ldi	r18, 0xDB	; 219
    3f34:	e2 0e       	add	r14, r18
    3f36:	f1 1c       	adc	r15, r1
    3f38:	ec 0d       	add	r30, r12
    3f3a:	fd 1d       	adc	r31, r13
    3f3c:	8f e0       	ldi	r24, 0x0F	; 15
    3f3e:	de 01       	movw	r26, r28
    3f40:	11 96       	adiw	r26, 0x01	; 1
    3f42:	01 90       	ld	r0, Z+
    3f44:	0d 92       	st	X+, r0
    3f46:	8a 95       	dec	r24
    3f48:	e1 f7       	brne	.-8      	; 0x3f42 <ParseCIPSTA+0x5a>
    3f4a:	18 8a       	std	Y+16, r1	; 0x10
    3f4c:	68 ea       	ldi	r22, 0xA8	; 168
    3f4e:	72 e2       	ldi	r23, 0x22	; 34
    3f50:	ce 01       	movw	r24, r28
    3f52:	01 96       	adiw	r24, 0x01	; 1
    3f54:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    3f58:	00 97       	sbiw	r24, 0x00	; 0
    3f5a:	09 f4       	brne	.+2      	; 0x3f5e <ParseCIPSTA+0x76>
    3f5c:	4e c0       	rjmp	.+156    	; 0x3ffa <ParseCIPSTA+0x112>
    3f5e:	d1 2c       	mov	r13, r1
    3f60:	d3 94       	inc	r13
    3f62:	fc 01       	movw	r30, r24
    3f64:	20 81       	ld	r18, Z
    3f66:	2d 32       	cpi	r18, 0x2D	; 45
    3f68:	09 f4       	brne	.+2      	; 0x3f6c <ParseCIPSTA+0x84>
    3f6a:	08 c2       	rjmp	.+1040   	; 0x437c <__stack+0x37d>
    3f6c:	c1 2c       	mov	r12, r1
    3f6e:	30 ed       	ldi	r19, 0xD0	; 208
    3f70:	32 0f       	add	r19, r18
    3f72:	3a 30       	cpi	r19, 0x0A	; 10
    3f74:	08 f0       	brcs	.+2      	; 0x3f78 <ParseCIPSTA+0x90>
    3f76:	26 c2       	rjmp	.+1100   	; 0x43c4 <__stack+0x3c5>
    3f78:	fc 01       	movw	r30, r24
    3f7a:	31 96       	adiw	r30, 0x01	; 1
    3f7c:	40 e0       	ldi	r20, 0x00	; 0
    3f7e:	50 e0       	ldi	r21, 0x00	; 0
    3f80:	ba 01       	movw	r22, r20
    3f82:	db 01       	movw	r26, r22
    3f84:	ca 01       	movw	r24, r20
    3f86:	88 0f       	add	r24, r24
    3f88:	99 1f       	adc	r25, r25
    3f8a:	aa 1f       	adc	r26, r26
    3f8c:	bb 1f       	adc	r27, r27
    3f8e:	ac 01       	movw	r20, r24
    3f90:	bd 01       	movw	r22, r26
    3f92:	44 0f       	add	r20, r20
    3f94:	55 1f       	adc	r21, r21
    3f96:	66 1f       	adc	r22, r22
    3f98:	77 1f       	adc	r23, r23
    3f9a:	44 0f       	add	r20, r20
    3f9c:	55 1f       	adc	r21, r21
    3f9e:	66 1f       	adc	r22, r22
    3fa0:	77 1f       	adc	r23, r23
    3fa2:	48 0f       	add	r20, r24
    3fa4:	59 1f       	adc	r21, r25
    3fa6:	6a 1f       	adc	r22, r26
    3fa8:	7b 1f       	adc	r23, r27
    3faa:	82 2f       	mov	r24, r18
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	c0 97       	sbiw	r24, 0x30	; 48
    3fb0:	aa 27       	eor	r26, r26
    3fb2:	97 fd       	sbrc	r25, 7
    3fb4:	a0 95       	com	r26
    3fb6:	ba 2f       	mov	r27, r26
    3fb8:	48 0f       	add	r20, r24
    3fba:	59 1f       	adc	r21, r25
    3fbc:	6a 1f       	adc	r22, r26
    3fbe:	7b 1f       	adc	r23, r27
    3fc0:	21 91       	ld	r18, Z+
    3fc2:	80 ed       	ldi	r24, 0xD0	; 208
    3fc4:	82 0f       	add	r24, r18
    3fc6:	8a 30       	cpi	r24, 0x0A	; 10
    3fc8:	e0 f2       	brcs	.-72     	; 0x3f82 <ParseCIPSTA+0x9a>
    3fca:	cc 20       	and	r12, r12
    3fcc:	39 f0       	breq	.+14     	; 0x3fdc <ParseCIPSTA+0xf4>
    3fce:	70 95       	com	r23
    3fd0:	60 95       	com	r22
    3fd2:	50 95       	com	r21
    3fd4:	41 95       	neg	r20
    3fd6:	5f 4f       	sbci	r21, 0xFF	; 255
    3fd8:	6f 4f       	sbci	r22, 0xFF	; 255
    3fda:	7f 4f       	sbci	r23, 0xFF	; 255
    3fdc:	f7 01       	movw	r30, r14
    3fde:	41 93       	st	Z+, r20
    3fe0:	7f 01       	movw	r14, r30
    3fe2:	f4 e0       	ldi	r31, 0x04	; 4
    3fe4:	df 16       	cp	r13, r31
    3fe6:	49 f0       	breq	.+18     	; 0x3ffa <ParseCIPSTA+0x112>
    3fe8:	68 ea       	ldi	r22, 0xA8	; 168
    3fea:	72 e2       	ldi	r23, 0x22	; 34
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    3ff4:	00 97       	sbiw	r24, 0x00	; 0
    3ff6:	09 f0       	breq	.+2      	; 0x3ffa <ParseCIPSTA+0x112>
    3ff8:	b3 cf       	rjmp	.-154    	; 0x3f60 <ParseCIPSTA+0x78>
    3ffa:	f8 01       	movw	r30, r16
    3ffc:	e3 5d       	subi	r30, 0xD3	; 211
    3ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    4000:	80 81       	ld	r24, Z
    4002:	82 60       	ori	r24, 0x02	; 2
    4004:	80 83       	st	Z, r24
    4006:	6d c0       	rjmp	.+218    	; 0x40e2 <__stack+0xe3>
    4008:	e0 e1       	ldi	r30, 0x10	; 16
    400a:	f0 e0       	ldi	r31, 0x00	; 0
    400c:	78 01       	movw	r14, r16
    400e:	83 ed       	ldi	r24, 0xD3	; 211
    4010:	e8 0e       	add	r14, r24
    4012:	f1 1c       	adc	r15, r1
    4014:	ec 0d       	add	r30, r12
    4016:	fd 1d       	adc	r31, r13
    4018:	8f e0       	ldi	r24, 0x0F	; 15
    401a:	de 01       	movw	r26, r28
    401c:	11 96       	adiw	r26, 0x01	; 1
    401e:	01 90       	ld	r0, Z+
    4020:	0d 92       	st	X+, r0
    4022:	8a 95       	dec	r24
    4024:	e1 f7       	brne	.-8      	; 0x401e <__stack+0x1f>
    4026:	18 8a       	std	Y+16, r1	; 0x10
    4028:	68 ea       	ldi	r22, 0xA8	; 168
    402a:	72 e2       	ldi	r23, 0x22	; 34
    402c:	ce 01       	movw	r24, r28
    402e:	01 96       	adiw	r24, 0x01	; 1
    4030:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    4034:	00 97       	sbiw	r24, 0x00	; 0
    4036:	09 f4       	brne	.+2      	; 0x403a <__stack+0x3b>
    4038:	4e c0       	rjmp	.+156    	; 0x40d6 <__stack+0xd7>
    403a:	d1 2c       	mov	r13, r1
    403c:	d3 94       	inc	r13
    403e:	fc 01       	movw	r30, r24
    4040:	20 81       	ld	r18, Z
    4042:	2d 32       	cpi	r18, 0x2D	; 45
    4044:	09 f4       	brne	.+2      	; 0x4048 <__stack+0x49>
    4046:	9f c1       	rjmp	.+830    	; 0x4386 <__stack+0x387>
    4048:	c1 2c       	mov	r12, r1
    404a:	30 ed       	ldi	r19, 0xD0	; 208
    404c:	32 0f       	add	r19, r18
    404e:	3a 30       	cpi	r19, 0x0A	; 10
    4050:	08 f0       	brcs	.+2      	; 0x4054 <__stack+0x55>
    4052:	b4 c1       	rjmp	.+872    	; 0x43bc <__stack+0x3bd>
    4054:	fc 01       	movw	r30, r24
    4056:	31 96       	adiw	r30, 0x01	; 1
    4058:	40 e0       	ldi	r20, 0x00	; 0
    405a:	50 e0       	ldi	r21, 0x00	; 0
    405c:	ba 01       	movw	r22, r20
    405e:	db 01       	movw	r26, r22
    4060:	ca 01       	movw	r24, r20
    4062:	88 0f       	add	r24, r24
    4064:	99 1f       	adc	r25, r25
    4066:	aa 1f       	adc	r26, r26
    4068:	bb 1f       	adc	r27, r27
    406a:	ac 01       	movw	r20, r24
    406c:	bd 01       	movw	r22, r26
    406e:	44 0f       	add	r20, r20
    4070:	55 1f       	adc	r21, r21
    4072:	66 1f       	adc	r22, r22
    4074:	77 1f       	adc	r23, r23
    4076:	44 0f       	add	r20, r20
    4078:	55 1f       	adc	r21, r21
    407a:	66 1f       	adc	r22, r22
    407c:	77 1f       	adc	r23, r23
    407e:	48 0f       	add	r20, r24
    4080:	59 1f       	adc	r21, r25
    4082:	6a 1f       	adc	r22, r26
    4084:	7b 1f       	adc	r23, r27
    4086:	82 2f       	mov	r24, r18
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	c0 97       	sbiw	r24, 0x30	; 48
    408c:	aa 27       	eor	r26, r26
    408e:	97 fd       	sbrc	r25, 7
    4090:	a0 95       	com	r26
    4092:	ba 2f       	mov	r27, r26
    4094:	48 0f       	add	r20, r24
    4096:	59 1f       	adc	r21, r25
    4098:	6a 1f       	adc	r22, r26
    409a:	7b 1f       	adc	r23, r27
    409c:	21 91       	ld	r18, Z+
    409e:	80 ed       	ldi	r24, 0xD0	; 208
    40a0:	82 0f       	add	r24, r18
    40a2:	8a 30       	cpi	r24, 0x0A	; 10
    40a4:	e0 f2       	brcs	.-72     	; 0x405e <__stack+0x5f>
    40a6:	cc 20       	and	r12, r12
    40a8:	39 f0       	breq	.+14     	; 0x40b8 <__stack+0xb9>
    40aa:	70 95       	com	r23
    40ac:	60 95       	com	r22
    40ae:	50 95       	com	r21
    40b0:	41 95       	neg	r20
    40b2:	5f 4f       	sbci	r21, 0xFF	; 255
    40b4:	6f 4f       	sbci	r22, 0xFF	; 255
    40b6:	7f 4f       	sbci	r23, 0xFF	; 255
    40b8:	f7 01       	movw	r30, r14
    40ba:	41 93       	st	Z+, r20
    40bc:	7f 01       	movw	r14, r30
    40be:	f4 e0       	ldi	r31, 0x04	; 4
    40c0:	df 16       	cp	r13, r31
    40c2:	49 f0       	breq	.+18     	; 0x40d6 <__stack+0xd7>
    40c4:	68 ea       	ldi	r22, 0xA8	; 168
    40c6:	72 e2       	ldi	r23, 0x22	; 34
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    40d0:	00 97       	sbiw	r24, 0x00	; 0
    40d2:	09 f0       	breq	.+2      	; 0x40d6 <__stack+0xd7>
    40d4:	b3 cf       	rjmp	.-154    	; 0x403c <__stack+0x3d>
    40d6:	f8 01       	movw	r30, r16
    40d8:	e3 5d       	subi	r30, 0xD3	; 211
    40da:	fe 4f       	sbci	r31, 0xFE	; 254
    40dc:	80 81       	ld	r24, Z
    40de:	81 60       	ori	r24, 0x01	; 1
    40e0:	80 83       	st	Z, r24
    40e2:	60 96       	adiw	r28, 0x10	; 16
    40e4:	cd bf       	out	0x3d, r28	; 61
    40e6:	de bf       	out	0x3e, r29	; 62
    40e8:	df 91       	pop	r29
    40ea:	cf 91       	pop	r28
    40ec:	1f 91       	pop	r17
    40ee:	0f 91       	pop	r16
    40f0:	ff 90       	pop	r15
    40f2:	ef 90       	pop	r14
    40f4:	df 90       	pop	r13
    40f6:	cf 90       	pop	r12
    40f8:	08 95       	ret
    40fa:	43 e1       	ldi	r20, 0x13	; 19
    40fc:	50 e0       	ldi	r21, 0x00	; 0
    40fe:	b6 01       	movw	r22, r12
    4100:	8d e0       	ldi	r24, 0x0D	; 13
    4102:	92 e2       	ldi	r25, 0x22	; 34
    4104:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    4108:	89 2b       	or	r24, r25
    410a:	09 f0       	breq	.+2      	; 0x410e <__stack+0x10f>
    410c:	6e c0       	rjmp	.+220    	; 0x41ea <__stack+0x1eb>
    410e:	e5 e1       	ldi	r30, 0x15	; 21
    4110:	f0 e0       	ldi	r31, 0x00	; 0
    4112:	78 01       	movw	r14, r16
    4114:	27 ed       	ldi	r18, 0xD7	; 215
    4116:	e2 0e       	add	r14, r18
    4118:	f1 1c       	adc	r15, r1
    411a:	ec 0d       	add	r30, r12
    411c:	fd 1d       	adc	r31, r13
    411e:	8f e0       	ldi	r24, 0x0F	; 15
    4120:	de 01       	movw	r26, r28
    4122:	11 96       	adiw	r26, 0x01	; 1
    4124:	01 90       	ld	r0, Z+
    4126:	0d 92       	st	X+, r0
    4128:	8a 95       	dec	r24
    412a:	e1 f7       	brne	.-8      	; 0x4124 <__stack+0x125>
    412c:	18 8a       	std	Y+16, r1	; 0x10
    412e:	68 ea       	ldi	r22, 0xA8	; 168
    4130:	72 e2       	ldi	r23, 0x22	; 34
    4132:	ce 01       	movw	r24, r28
    4134:	01 96       	adiw	r24, 0x01	; 1
    4136:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    413a:	fc 01       	movw	r30, r24
    413c:	00 97       	sbiw	r24, 0x00	; 0
    413e:	09 f4       	brne	.+2      	; 0x4142 <__stack+0x143>
    4140:	4d c0       	rjmp	.+154    	; 0x41dc <__stack+0x1dd>
    4142:	d1 2c       	mov	r13, r1
    4144:	d3 94       	inc	r13
    4146:	20 81       	ld	r18, Z
    4148:	2d 32       	cpi	r18, 0x2D	; 45
    414a:	09 f4       	brne	.+2      	; 0x414e <__stack+0x14f>
    414c:	21 c1       	rjmp	.+578    	; 0x4390 <__stack+0x391>
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	80 ed       	ldi	r24, 0xD0	; 208
    4152:	82 0f       	add	r24, r18
    4154:	8a 30       	cpi	r24, 0x0A	; 10
    4156:	08 f0       	brcs	.+2      	; 0x415a <__stack+0x15b>
    4158:	2d c1       	rjmp	.+602    	; 0x43b4 <__stack+0x3b5>
    415a:	31 96       	adiw	r30, 0x01	; 1
    415c:	40 e0       	ldi	r20, 0x00	; 0
    415e:	50 e0       	ldi	r21, 0x00	; 0
    4160:	ba 01       	movw	r22, r20
    4162:	db 01       	movw	r26, r22
    4164:	ca 01       	movw	r24, r20
    4166:	88 0f       	add	r24, r24
    4168:	99 1f       	adc	r25, r25
    416a:	aa 1f       	adc	r26, r26
    416c:	bb 1f       	adc	r27, r27
    416e:	ac 01       	movw	r20, r24
    4170:	bd 01       	movw	r22, r26
    4172:	44 0f       	add	r20, r20
    4174:	55 1f       	adc	r21, r21
    4176:	66 1f       	adc	r22, r22
    4178:	77 1f       	adc	r23, r23
    417a:	44 0f       	add	r20, r20
    417c:	55 1f       	adc	r21, r21
    417e:	66 1f       	adc	r22, r22
    4180:	77 1f       	adc	r23, r23
    4182:	48 0f       	add	r20, r24
    4184:	59 1f       	adc	r21, r25
    4186:	6a 1f       	adc	r22, r26
    4188:	7b 1f       	adc	r23, r27
    418a:	82 2f       	mov	r24, r18
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	c0 97       	sbiw	r24, 0x30	; 48
    4190:	aa 27       	eor	r26, r26
    4192:	97 fd       	sbrc	r25, 7
    4194:	a0 95       	com	r26
    4196:	ba 2f       	mov	r27, r26
    4198:	48 0f       	add	r20, r24
    419a:	59 1f       	adc	r21, r25
    419c:	6a 1f       	adc	r22, r26
    419e:	7b 1f       	adc	r23, r27
    41a0:	21 91       	ld	r18, Z+
    41a2:	80 ed       	ldi	r24, 0xD0	; 208
    41a4:	82 0f       	add	r24, r18
    41a6:	8a 30       	cpi	r24, 0x0A	; 10
    41a8:	e0 f2       	brcs	.-72     	; 0x4162 <__stack+0x163>
    41aa:	33 23       	and	r19, r19
    41ac:	39 f0       	breq	.+14     	; 0x41bc <__stack+0x1bd>
    41ae:	70 95       	com	r23
    41b0:	60 95       	com	r22
    41b2:	50 95       	com	r21
    41b4:	41 95       	neg	r20
    41b6:	5f 4f       	sbci	r21, 0xFF	; 255
    41b8:	6f 4f       	sbci	r22, 0xFF	; 255
    41ba:	7f 4f       	sbci	r23, 0xFF	; 255
    41bc:	f7 01       	movw	r30, r14
    41be:	41 93       	st	Z+, r20
    41c0:	7f 01       	movw	r14, r30
    41c2:	f4 e0       	ldi	r31, 0x04	; 4
    41c4:	df 16       	cp	r13, r31
    41c6:	51 f0       	breq	.+20     	; 0x41dc <__stack+0x1dd>
    41c8:	68 ea       	ldi	r22, 0xA8	; 168
    41ca:	72 e2       	ldi	r23, 0x22	; 34
    41cc:	80 e0       	ldi	r24, 0x00	; 0
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    41d4:	fc 01       	movw	r30, r24
    41d6:	00 97       	sbiw	r24, 0x00	; 0
    41d8:	09 f0       	breq	.+2      	; 0x41dc <__stack+0x1dd>
    41da:	b4 cf       	rjmp	.-152    	; 0x4144 <__stack+0x145>
    41dc:	f8 01       	movw	r30, r16
    41de:	e3 5d       	subi	r30, 0xD3	; 211
    41e0:	fe 4f       	sbci	r31, 0xFE	; 254
    41e2:	80 81       	ld	r24, Z
    41e4:	84 60       	ori	r24, 0x04	; 4
    41e6:	80 83       	st	Z, r24
    41e8:	7c cf       	rjmp	.-264    	; 0x40e2 <__stack+0xe3>
    41ea:	4a e0       	ldi	r20, 0x0A	; 10
    41ec:	50 e0       	ldi	r21, 0x00	; 0
    41ee:	b6 01       	movw	r22, r12
    41f0:	81 e2       	ldi	r24, 0x21	; 33
    41f2:	92 e2       	ldi	r25, 0x22	; 34
    41f4:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    41f8:	89 2b       	or	r24, r25
    41fa:	09 f4       	brne	.+2      	; 0x41fe <__stack+0x1ff>
    41fc:	cd c0       	rjmp	.+410    	; 0x4398 <__stack+0x399>
    41fe:	4f e0       	ldi	r20, 0x0F	; 15
    4200:	50 e0       	ldi	r21, 0x00	; 0
    4202:	b6 01       	movw	r22, r12
    4204:	8c e2       	ldi	r24, 0x2C	; 44
    4206:	92 e2       	ldi	r25, 0x22	; 34
    4208:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    420c:	89 2b       	or	r24, r25
    420e:	09 f4       	brne	.+2      	; 0x4212 <__stack+0x213>
    4210:	c6 c0       	rjmp	.+396    	; 0x439e <__stack+0x39f>
    4212:	4f e0       	ldi	r20, 0x0F	; 15
    4214:	50 e0       	ldi	r21, 0x00	; 0
    4216:	b6 01       	movw	r22, r12
    4218:	8c e3       	ldi	r24, 0x3C	; 60
    421a:	92 e2       	ldi	r25, 0x22	; 34
    421c:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    4220:	89 2b       	or	r24, r25
    4222:	09 f4       	brne	.+2      	; 0x4226 <__stack+0x227>
    4224:	d3 c0       	rjmp	.+422    	; 0x43cc <__stack+0x3cd>
    4226:	4d e0       	ldi	r20, 0x0D	; 13
    4228:	50 e0       	ldi	r21, 0x00	; 0
    422a:	b6 01       	movw	r22, r12
    422c:	8c e4       	ldi	r24, 0x4C	; 76
    422e:	92 e2       	ldi	r25, 0x22	; 34
    4230:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    4234:	89 2b       	or	r24, r25
    4236:	09 f4       	brne	.+2      	; 0x423a <__stack+0x23b>
    4238:	cc c0       	rjmp	.+408    	; 0x43d2 <__stack+0x3d3>
    423a:	42 e1       	ldi	r20, 0x12	; 18
    423c:	50 e0       	ldi	r21, 0x00	; 0
    423e:	b6 01       	movw	r22, r12
    4240:	8a e5       	ldi	r24, 0x5A	; 90
    4242:	92 e2       	ldi	r25, 0x22	; 34
    4244:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    4248:	89 2b       	or	r24, r25
    424a:	09 f4       	brne	.+2      	; 0x424e <__stack+0x24f>
    424c:	39 c1       	rjmp	.+626    	; 0x44c0 <__stack+0x4c1>
    424e:	42 e1       	ldi	r20, 0x12	; 18
    4250:	50 e0       	ldi	r21, 0x00	; 0
    4252:	b6 01       	movw	r22, r12
    4254:	8d e6       	ldi	r24, 0x6D	; 109
    4256:	92 e2       	ldi	r25, 0x22	; 34
    4258:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    425c:	89 2b       	or	r24, r25
    425e:	09 f4       	brne	.+2      	; 0x4262 <__stack+0x263>
    4260:	a6 c1       	rjmp	.+844    	; 0x45ae <__stack+0x5af>
    4262:	49 e0       	ldi	r20, 0x09	; 9
    4264:	50 e0       	ldi	r21, 0x00	; 0
    4266:	b6 01       	movw	r22, r12
    4268:	80 e8       	ldi	r24, 0x80	; 128
    426a:	92 e2       	ldi	r25, 0x22	; 34
    426c:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    4270:	89 2b       	or	r24, r25
    4272:	09 f4       	brne	.+2      	; 0x4276 <__stack+0x277>
    4274:	9f c1       	rjmp	.+830    	; 0x45b4 <__stack+0x5b5>
    4276:	4e e0       	ldi	r20, 0x0E	; 14
    4278:	50 e0       	ldi	r21, 0x00	; 0
    427a:	b6 01       	movw	r22, r12
    427c:	8a e8       	ldi	r24, 0x8A	; 138
    427e:	92 e2       	ldi	r25, 0x22	; 34
    4280:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    4284:	89 2b       	or	r24, r25
    4286:	09 f4       	brne	.+2      	; 0x428a <__stack+0x28b>
    4288:	98 c1       	rjmp	.+816    	; 0x45ba <__stack+0x5bb>
    428a:	4e e0       	ldi	r20, 0x0E	; 14
    428c:	50 e0       	ldi	r21, 0x00	; 0
    428e:	b6 01       	movw	r22, r12
    4290:	89 e9       	ldi	r24, 0x99	; 153
    4292:	92 e2       	ldi	r25, 0x22	; 34
    4294:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    4298:	89 2b       	or	r24, r25
    429a:	09 f0       	breq	.+2      	; 0x429e <__stack+0x29f>
    429c:	22 cf       	rjmp	.-444    	; 0x40e2 <__stack+0xe3>
    429e:	80 e1       	ldi	r24, 0x10	; 16
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	78 01       	movw	r14, r16
    42a4:	e9 ee       	ldi	r30, 0xE9	; 233
    42a6:	ee 0e       	add	r14, r30
    42a8:	f1 1c       	adc	r15, r1
    42aa:	f6 01       	movw	r30, r12
    42ac:	e8 0f       	add	r30, r24
    42ae:	f9 1f       	adc	r31, r25
    42b0:	8f e0       	ldi	r24, 0x0F	; 15
    42b2:	de 01       	movw	r26, r28
    42b4:	11 96       	adiw	r26, 0x01	; 1
    42b6:	01 90       	ld	r0, Z+
    42b8:	0d 92       	st	X+, r0
    42ba:	8a 95       	dec	r24
    42bc:	e1 f7       	brne	.-8      	; 0x42b6 <__stack+0x2b7>
    42be:	18 8a       	std	Y+16, r1	; 0x10
    42c0:	68 ea       	ldi	r22, 0xA8	; 168
    42c2:	72 e2       	ldi	r23, 0x22	; 34
    42c4:	ce 01       	movw	r24, r28
    42c6:	01 96       	adiw	r24, 0x01	; 1
    42c8:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    42cc:	fc 01       	movw	r30, r24
    42ce:	00 97       	sbiw	r24, 0x00	; 0
    42d0:	09 f4       	brne	.+2      	; 0x42d4 <__stack+0x2d5>
    42d2:	4d c0       	rjmp	.+154    	; 0x436e <__stack+0x36f>
    42d4:	d1 2c       	mov	r13, r1
    42d6:	d3 94       	inc	r13
    42d8:	20 81       	ld	r18, Z
    42da:	2d 32       	cpi	r18, 0x2D	; 45
    42dc:	09 f4       	brne	.+2      	; 0x42e0 <__stack+0x2e1>
    42de:	62 c0       	rjmp	.+196    	; 0x43a4 <__stack+0x3a5>
    42e0:	30 e0       	ldi	r19, 0x00	; 0
    42e2:	80 ed       	ldi	r24, 0xD0	; 208
    42e4:	82 0f       	add	r24, r18
    42e6:	8a 30       	cpi	r24, 0x0A	; 10
    42e8:	08 f0       	brcs	.+2      	; 0x42ec <__stack+0x2ed>
    42ea:	60 c0       	rjmp	.+192    	; 0x43ac <__stack+0x3ad>
    42ec:	31 96       	adiw	r30, 0x01	; 1
    42ee:	40 e0       	ldi	r20, 0x00	; 0
    42f0:	50 e0       	ldi	r21, 0x00	; 0
    42f2:	ba 01       	movw	r22, r20
    42f4:	db 01       	movw	r26, r22
    42f6:	ca 01       	movw	r24, r20
    42f8:	88 0f       	add	r24, r24
    42fa:	99 1f       	adc	r25, r25
    42fc:	aa 1f       	adc	r26, r26
    42fe:	bb 1f       	adc	r27, r27
    4300:	ac 01       	movw	r20, r24
    4302:	bd 01       	movw	r22, r26
    4304:	44 0f       	add	r20, r20
    4306:	55 1f       	adc	r21, r21
    4308:	66 1f       	adc	r22, r22
    430a:	77 1f       	adc	r23, r23
    430c:	44 0f       	add	r20, r20
    430e:	55 1f       	adc	r21, r21
    4310:	66 1f       	adc	r22, r22
    4312:	77 1f       	adc	r23, r23
    4314:	48 0f       	add	r20, r24
    4316:	59 1f       	adc	r21, r25
    4318:	6a 1f       	adc	r22, r26
    431a:	7b 1f       	adc	r23, r27
    431c:	82 2f       	mov	r24, r18
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	c0 97       	sbiw	r24, 0x30	; 48
    4322:	aa 27       	eor	r26, r26
    4324:	97 fd       	sbrc	r25, 7
    4326:	a0 95       	com	r26
    4328:	ba 2f       	mov	r27, r26
    432a:	48 0f       	add	r20, r24
    432c:	59 1f       	adc	r21, r25
    432e:	6a 1f       	adc	r22, r26
    4330:	7b 1f       	adc	r23, r27
    4332:	21 91       	ld	r18, Z+
    4334:	80 ed       	ldi	r24, 0xD0	; 208
    4336:	82 0f       	add	r24, r18
    4338:	8a 30       	cpi	r24, 0x0A	; 10
    433a:	e0 f2       	brcs	.-72     	; 0x42f4 <__stack+0x2f5>
    433c:	33 23       	and	r19, r19
    433e:	39 f0       	breq	.+14     	; 0x434e <__stack+0x34f>
    4340:	70 95       	com	r23
    4342:	60 95       	com	r22
    4344:	50 95       	com	r21
    4346:	41 95       	neg	r20
    4348:	5f 4f       	sbci	r21, 0xFF	; 255
    434a:	6f 4f       	sbci	r22, 0xFF	; 255
    434c:	7f 4f       	sbci	r23, 0xFF	; 255
    434e:	f7 01       	movw	r30, r14
    4350:	41 93       	st	Z+, r20
    4352:	7f 01       	movw	r14, r30
    4354:	f4 e0       	ldi	r31, 0x04	; 4
    4356:	df 16       	cp	r13, r31
    4358:	51 f0       	breq	.+20     	; 0x436e <__stack+0x36f>
    435a:	68 ea       	ldi	r22, 0xA8	; 168
    435c:	72 e2       	ldi	r23, 0x22	; 34
    435e:	80 e0       	ldi	r24, 0x00	; 0
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    4366:	fc 01       	movw	r30, r24
    4368:	00 97       	sbiw	r24, 0x00	; 0
    436a:	09 f0       	breq	.+2      	; 0x436e <__stack+0x36f>
    436c:	b4 cf       	rjmp	.-152    	; 0x42d6 <__stack+0x2d7>
    436e:	f8 01       	movw	r30, r16
    4370:	e3 5d       	subi	r30, 0xD3	; 211
    4372:	fe 4f       	sbci	r31, 0xFE	; 254
    4374:	80 81       	ld	r24, Z
    4376:	80 64       	ori	r24, 0x40	; 64
    4378:	80 83       	st	Z, r24
    437a:	b3 ce       	rjmp	.-666    	; 0x40e2 <__stack+0xe3>
    437c:	21 81       	ldd	r18, Z+1	; 0x01
    437e:	01 96       	adiw	r24, 0x01	; 1
    4380:	cc 24       	eor	r12, r12
    4382:	c3 94       	inc	r12
    4384:	f4 cd       	rjmp	.-1048   	; 0x3f6e <ParseCIPSTA+0x86>
    4386:	21 81       	ldd	r18, Z+1	; 0x01
    4388:	01 96       	adiw	r24, 0x01	; 1
    438a:	cc 24       	eor	r12, r12
    438c:	c3 94       	inc	r12
    438e:	5d ce       	rjmp	.-838    	; 0x404a <__stack+0x4b>
    4390:	21 81       	ldd	r18, Z+1	; 0x01
    4392:	31 96       	adiw	r30, 0x01	; 1
    4394:	31 e0       	ldi	r19, 0x01	; 1
    4396:	dc ce       	rjmp	.-584    	; 0x4150 <__stack+0x151>
    4398:	ec e0       	ldi	r30, 0x0C	; 12
    439a:	f0 e0       	ldi	r31, 0x00	; 0
    439c:	37 ce       	rjmp	.-914    	; 0x400c <__stack+0xd>
    439e:	e1 e1       	ldi	r30, 0x11	; 17
    43a0:	f0 e0       	ldi	r31, 0x00	; 0
    43a2:	c6 cd       	rjmp	.-1140   	; 0x3f30 <ParseCIPSTA+0x48>
    43a4:	21 81       	ldd	r18, Z+1	; 0x01
    43a6:	31 96       	adiw	r30, 0x01	; 1
    43a8:	31 e0       	ldi	r19, 0x01	; 1
    43aa:	9b cf       	rjmp	.-202    	; 0x42e2 <__stack+0x2e3>
    43ac:	40 e0       	ldi	r20, 0x00	; 0
    43ae:	50 e0       	ldi	r21, 0x00	; 0
    43b0:	ba 01       	movw	r22, r20
    43b2:	c4 cf       	rjmp	.-120    	; 0x433c <__stack+0x33d>
    43b4:	40 e0       	ldi	r20, 0x00	; 0
    43b6:	50 e0       	ldi	r21, 0x00	; 0
    43b8:	ba 01       	movw	r22, r20
    43ba:	f7 ce       	rjmp	.-530    	; 0x41aa <__stack+0x1ab>
    43bc:	40 e0       	ldi	r20, 0x00	; 0
    43be:	50 e0       	ldi	r21, 0x00	; 0
    43c0:	ba 01       	movw	r22, r20
    43c2:	71 ce       	rjmp	.-798    	; 0x40a6 <__stack+0xa7>
    43c4:	40 e0       	ldi	r20, 0x00	; 0
    43c6:	50 e0       	ldi	r21, 0x00	; 0
    43c8:	ba 01       	movw	r22, r20
    43ca:	ff cd       	rjmp	.-1026   	; 0x3fca <ParseCIPSTA+0xe2>
    43cc:	e1 e1       	ldi	r30, 0x11	; 17
    43ce:	f0 e0       	ldi	r31, 0x00	; 0
    43d0:	a0 ce       	rjmp	.-704    	; 0x4112 <__stack+0x113>
    43d2:	8f e0       	ldi	r24, 0x0F	; 15
    43d4:	90 e0       	ldi	r25, 0x00	; 0
    43d6:	78 01       	movw	r14, r16
    43d8:	e5 ee       	ldi	r30, 0xE5	; 229
    43da:	ee 0e       	add	r14, r30
    43dc:	f1 1c       	adc	r15, r1
    43de:	f6 01       	movw	r30, r12
    43e0:	e8 0f       	add	r30, r24
    43e2:	f9 1f       	adc	r31, r25
    43e4:	8f e0       	ldi	r24, 0x0F	; 15
    43e6:	de 01       	movw	r26, r28
    43e8:	11 96       	adiw	r26, 0x01	; 1
    43ea:	01 90       	ld	r0, Z+
    43ec:	0d 92       	st	X+, r0
    43ee:	8a 95       	dec	r24
    43f0:	e1 f7       	brne	.-8      	; 0x43ea <__stack+0x3eb>
    43f2:	18 8a       	std	Y+16, r1	; 0x10
    43f4:	68 ea       	ldi	r22, 0xA8	; 168
    43f6:	72 e2       	ldi	r23, 0x22	; 34
    43f8:	ce 01       	movw	r24, r28
    43fa:	01 96       	adiw	r24, 0x01	; 1
    43fc:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    4400:	fc 01       	movw	r30, r24
    4402:	00 97       	sbiw	r24, 0x00	; 0
    4404:	09 f4       	brne	.+2      	; 0x4408 <__stack+0x409>
    4406:	4d c0       	rjmp	.+154    	; 0x44a2 <__stack+0x4a3>
    4408:	d1 2c       	mov	r13, r1
    440a:	d3 94       	inc	r13
    440c:	20 81       	ld	r18, Z
    440e:	2d 32       	cpi	r18, 0x2D	; 45
    4410:	09 f4       	brne	.+2      	; 0x4414 <__stack+0x415>
    4412:	4e c0       	rjmp	.+156    	; 0x44b0 <__stack+0x4b1>
    4414:	30 e0       	ldi	r19, 0x00	; 0
    4416:	80 ed       	ldi	r24, 0xD0	; 208
    4418:	82 0f       	add	r24, r18
    441a:	8a 30       	cpi	r24, 0x0A	; 10
    441c:	08 f0       	brcs	.+2      	; 0x4420 <__stack+0x421>
    441e:	4c c0       	rjmp	.+152    	; 0x44b8 <__stack+0x4b9>
    4420:	31 96       	adiw	r30, 0x01	; 1
    4422:	40 e0       	ldi	r20, 0x00	; 0
    4424:	50 e0       	ldi	r21, 0x00	; 0
    4426:	ba 01       	movw	r22, r20
    4428:	db 01       	movw	r26, r22
    442a:	ca 01       	movw	r24, r20
    442c:	88 0f       	add	r24, r24
    442e:	99 1f       	adc	r25, r25
    4430:	aa 1f       	adc	r26, r26
    4432:	bb 1f       	adc	r27, r27
    4434:	ac 01       	movw	r20, r24
    4436:	bd 01       	movw	r22, r26
    4438:	44 0f       	add	r20, r20
    443a:	55 1f       	adc	r21, r21
    443c:	66 1f       	adc	r22, r22
    443e:	77 1f       	adc	r23, r23
    4440:	44 0f       	add	r20, r20
    4442:	55 1f       	adc	r21, r21
    4444:	66 1f       	adc	r22, r22
    4446:	77 1f       	adc	r23, r23
    4448:	48 0f       	add	r20, r24
    444a:	59 1f       	adc	r21, r25
    444c:	6a 1f       	adc	r22, r26
    444e:	7b 1f       	adc	r23, r27
    4450:	82 2f       	mov	r24, r18
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	c0 97       	sbiw	r24, 0x30	; 48
    4456:	aa 27       	eor	r26, r26
    4458:	97 fd       	sbrc	r25, 7
    445a:	a0 95       	com	r26
    445c:	ba 2f       	mov	r27, r26
    445e:	48 0f       	add	r20, r24
    4460:	59 1f       	adc	r21, r25
    4462:	6a 1f       	adc	r22, r26
    4464:	7b 1f       	adc	r23, r27
    4466:	21 91       	ld	r18, Z+
    4468:	80 ed       	ldi	r24, 0xD0	; 208
    446a:	82 0f       	add	r24, r18
    446c:	8a 30       	cpi	r24, 0x0A	; 10
    446e:	e0 f2       	brcs	.-72     	; 0x4428 <__stack+0x429>
    4470:	33 23       	and	r19, r19
    4472:	39 f0       	breq	.+14     	; 0x4482 <__stack+0x483>
    4474:	70 95       	com	r23
    4476:	60 95       	com	r22
    4478:	50 95       	com	r21
    447a:	41 95       	neg	r20
    447c:	5f 4f       	sbci	r21, 0xFF	; 255
    447e:	6f 4f       	sbci	r22, 0xFF	; 255
    4480:	7f 4f       	sbci	r23, 0xFF	; 255
    4482:	f7 01       	movw	r30, r14
    4484:	41 93       	st	Z+, r20
    4486:	7f 01       	movw	r14, r30
    4488:	f4 e0       	ldi	r31, 0x04	; 4
    448a:	df 16       	cp	r13, r31
    448c:	51 f0       	breq	.+20     	; 0x44a2 <__stack+0x4a3>
    448e:	68 ea       	ldi	r22, 0xA8	; 168
    4490:	72 e2       	ldi	r23, 0x22	; 34
    4492:	80 e0       	ldi	r24, 0x00	; 0
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    449a:	fc 01       	movw	r30, r24
    449c:	00 97       	sbiw	r24, 0x00	; 0
    449e:	09 f0       	breq	.+2      	; 0x44a2 <__stack+0x4a3>
    44a0:	b4 cf       	rjmp	.-152    	; 0x440a <__stack+0x40b>
    44a2:	f8 01       	movw	r30, r16
    44a4:	e3 5d       	subi	r30, 0xD3	; 211
    44a6:	fe 4f       	sbci	r31, 0xFE	; 254
    44a8:	80 81       	ld	r24, Z
    44aa:	80 61       	ori	r24, 0x10	; 16
    44ac:	80 83       	st	Z, r24
    44ae:	19 ce       	rjmp	.-974    	; 0x40e2 <__stack+0xe3>
    44b0:	21 81       	ldd	r18, Z+1	; 0x01
    44b2:	31 96       	adiw	r30, 0x01	; 1
    44b4:	31 e0       	ldi	r19, 0x01	; 1
    44b6:	af cf       	rjmp	.-162    	; 0x4416 <__stack+0x417>
    44b8:	40 e0       	ldi	r20, 0x00	; 0
    44ba:	50 e0       	ldi	r21, 0x00	; 0
    44bc:	ba 01       	movw	r22, r20
    44be:	d8 cf       	rjmp	.-80     	; 0x4470 <__stack+0x471>
    44c0:	84 e1       	ldi	r24, 0x14	; 20
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	78 01       	movw	r14, r16
    44c6:	2d ee       	ldi	r18, 0xED	; 237
    44c8:	e2 0e       	add	r14, r18
    44ca:	f1 1c       	adc	r15, r1
    44cc:	f6 01       	movw	r30, r12
    44ce:	e8 0f       	add	r30, r24
    44d0:	f9 1f       	adc	r31, r25
    44d2:	8f e0       	ldi	r24, 0x0F	; 15
    44d4:	de 01       	movw	r26, r28
    44d6:	11 96       	adiw	r26, 0x01	; 1
    44d8:	01 90       	ld	r0, Z+
    44da:	0d 92       	st	X+, r0
    44dc:	8a 95       	dec	r24
    44de:	e1 f7       	brne	.-8      	; 0x44d8 <__stack+0x4d9>
    44e0:	18 8a       	std	Y+16, r1	; 0x10
    44e2:	68 ea       	ldi	r22, 0xA8	; 168
    44e4:	72 e2       	ldi	r23, 0x22	; 34
    44e6:	ce 01       	movw	r24, r28
    44e8:	01 96       	adiw	r24, 0x01	; 1
    44ea:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    44ee:	fc 01       	movw	r30, r24
    44f0:	00 97       	sbiw	r24, 0x00	; 0
    44f2:	09 f4       	brne	.+2      	; 0x44f6 <__stack+0x4f7>
    44f4:	4d c0       	rjmp	.+154    	; 0x4590 <__stack+0x591>
    44f6:	d1 2c       	mov	r13, r1
    44f8:	d3 94       	inc	r13
    44fa:	20 81       	ld	r18, Z
    44fc:	2d 32       	cpi	r18, 0x2D	; 45
    44fe:	09 f4       	brne	.+2      	; 0x4502 <__stack+0x503>
    4500:	4e c0       	rjmp	.+156    	; 0x459e <__stack+0x59f>
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	80 ed       	ldi	r24, 0xD0	; 208
    4506:	82 0f       	add	r24, r18
    4508:	8a 30       	cpi	r24, 0x0A	; 10
    450a:	08 f0       	brcs	.+2      	; 0x450e <__stack+0x50f>
    450c:	4c c0       	rjmp	.+152    	; 0x45a6 <__stack+0x5a7>
    450e:	31 96       	adiw	r30, 0x01	; 1
    4510:	40 e0       	ldi	r20, 0x00	; 0
    4512:	50 e0       	ldi	r21, 0x00	; 0
    4514:	ba 01       	movw	r22, r20
    4516:	db 01       	movw	r26, r22
    4518:	ca 01       	movw	r24, r20
    451a:	88 0f       	add	r24, r24
    451c:	99 1f       	adc	r25, r25
    451e:	aa 1f       	adc	r26, r26
    4520:	bb 1f       	adc	r27, r27
    4522:	ac 01       	movw	r20, r24
    4524:	bd 01       	movw	r22, r26
    4526:	44 0f       	add	r20, r20
    4528:	55 1f       	adc	r21, r21
    452a:	66 1f       	adc	r22, r22
    452c:	77 1f       	adc	r23, r23
    452e:	44 0f       	add	r20, r20
    4530:	55 1f       	adc	r21, r21
    4532:	66 1f       	adc	r22, r22
    4534:	77 1f       	adc	r23, r23
    4536:	48 0f       	add	r20, r24
    4538:	59 1f       	adc	r21, r25
    453a:	6a 1f       	adc	r22, r26
    453c:	7b 1f       	adc	r23, r27
    453e:	82 2f       	mov	r24, r18
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	c0 97       	sbiw	r24, 0x30	; 48
    4544:	aa 27       	eor	r26, r26
    4546:	97 fd       	sbrc	r25, 7
    4548:	a0 95       	com	r26
    454a:	ba 2f       	mov	r27, r26
    454c:	48 0f       	add	r20, r24
    454e:	59 1f       	adc	r21, r25
    4550:	6a 1f       	adc	r22, r26
    4552:	7b 1f       	adc	r23, r27
    4554:	21 91       	ld	r18, Z+
    4556:	80 ed       	ldi	r24, 0xD0	; 208
    4558:	82 0f       	add	r24, r18
    455a:	8a 30       	cpi	r24, 0x0A	; 10
    455c:	e0 f2       	brcs	.-72     	; 0x4516 <__stack+0x517>
    455e:	33 23       	and	r19, r19
    4560:	39 f0       	breq	.+14     	; 0x4570 <__stack+0x571>
    4562:	70 95       	com	r23
    4564:	60 95       	com	r22
    4566:	50 95       	com	r21
    4568:	41 95       	neg	r20
    456a:	5f 4f       	sbci	r21, 0xFF	; 255
    456c:	6f 4f       	sbci	r22, 0xFF	; 255
    456e:	7f 4f       	sbci	r23, 0xFF	; 255
    4570:	f7 01       	movw	r30, r14
    4572:	41 93       	st	Z+, r20
    4574:	7f 01       	movw	r14, r30
    4576:	f4 e0       	ldi	r31, 0x04	; 4
    4578:	df 16       	cp	r13, r31
    457a:	51 f0       	breq	.+20     	; 0x4590 <__stack+0x591>
    457c:	68 ea       	ldi	r22, 0xA8	; 168
    457e:	72 e2       	ldi	r23, 0x22	; 34
    4580:	80 e0       	ldi	r24, 0x00	; 0
    4582:	90 e0       	ldi	r25, 0x00	; 0
    4584:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    4588:	fc 01       	movw	r30, r24
    458a:	00 97       	sbiw	r24, 0x00	; 0
    458c:	09 f0       	breq	.+2      	; 0x4590 <__stack+0x591>
    458e:	b4 cf       	rjmp	.-152    	; 0x44f8 <__stack+0x4f9>
    4590:	f8 01       	movw	r30, r16
    4592:	e3 5d       	subi	r30, 0xD3	; 211
    4594:	fe 4f       	sbci	r31, 0xFE	; 254
    4596:	80 81       	ld	r24, Z
    4598:	80 62       	ori	r24, 0x20	; 32
    459a:	80 83       	st	Z, r24
    459c:	a2 cd       	rjmp	.-1212   	; 0x40e2 <__stack+0xe3>
    459e:	21 81       	ldd	r18, Z+1	; 0x01
    45a0:	31 96       	adiw	r30, 0x01	; 1
    45a2:	31 e0       	ldi	r19, 0x01	; 1
    45a4:	af cf       	rjmp	.-162    	; 0x4504 <__stack+0x505>
    45a6:	40 e0       	ldi	r20, 0x00	; 0
    45a8:	50 e0       	ldi	r21, 0x00	; 0
    45aa:	ba 01       	movw	r22, r20
    45ac:	d8 cf       	rjmp	.-80     	; 0x455e <__stack+0x55f>
    45ae:	84 e1       	ldi	r24, 0x14	; 20
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	77 ce       	rjmp	.-786    	; 0x42a2 <__stack+0x2a3>
    45b4:	8b e0       	ldi	r24, 0x0B	; 11
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	0e cf       	rjmp	.-484    	; 0x43d6 <__stack+0x3d7>
    45ba:	80 e1       	ldi	r24, 0x10	; 16
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	82 cf       	rjmp	.-252    	; 0x44c4 <__stack+0x4c5>

000045c0 <ESP8266_On>:
    45c0:	e0 e6       	ldi	r30, 0x60	; 96
    45c2:	f6 e0       	ldi	r31, 0x06	; 6
    45c4:	81 e3       	ldi	r24, 0x31	; 49
    45c6:	81 83       	std	Z+1, r24	; 0x01
    45c8:	80 e3       	ldi	r24, 0x30	; 48
    45ca:	85 83       	std	Z+5, r24	; 0x05
    45cc:	81 e0       	ldi	r24, 0x01	; 1
    45ce:	86 83       	std	Z+6, r24	; 0x06
    45d0:	2f ef       	ldi	r18, 0xFF	; 255
    45d2:	87 ea       	ldi	r24, 0xA7	; 167
    45d4:	91 e6       	ldi	r25, 0x61	; 97
    45d6:	21 50       	subi	r18, 0x01	; 1
    45d8:	80 40       	sbci	r24, 0x00	; 0
    45da:	90 40       	sbci	r25, 0x00	; 0
    45dc:	e1 f7       	brne	.-8      	; 0x45d6 <ESP8266_On+0x16>
    45de:	00 c0       	rjmp	.+0      	; 0x45e0 <ESP8266_On+0x20>
    45e0:	00 00       	nop
    45e2:	08 95       	ret

000045e4 <ESP8266_Off>:
    45e4:	e0 e6       	ldi	r30, 0x60	; 96
    45e6:	f6 e0       	ldi	r31, 0x06	; 6
    45e8:	81 e2       	ldi	r24, 0x21	; 33
    45ea:	81 83       	std	Z+1, r24	; 0x01
    45ec:	80 e2       	ldi	r24, 0x20	; 32
    45ee:	86 83       	std	Z+6, r24	; 0x06
    45f0:	81 e0       	ldi	r24, 0x01	; 1
    45f2:	85 83       	std	Z+5, r24	; 0x05
    45f4:	08 95       	ret

000045f6 <ESP8266_TimerStart>:
    45f6:	e0 e7       	ldi	r30, 0x70	; 112
    45f8:	f0 e0       	ldi	r31, 0x00	; 0
    45fa:	84 81       	ldd	r24, Z+4	; 0x04
    45fc:	8e 7f       	andi	r24, 0xFE	; 254
    45fe:	84 83       	std	Z+4, r24	; 0x04
    4600:	e0 e0       	ldi	r30, 0x00	; 0
    4602:	f9 e0       	ldi	r31, 0x09	; 9
    4604:	10 a2       	std	Z+32, r1	; 0x20
    4606:	11 a2       	std	Z+33, r1	; 0x21
    4608:	8d e7       	ldi	r24, 0x7D	; 125
    460a:	90 e0       	ldi	r25, 0x00	; 0
    460c:	86 a3       	std	Z+38, r24	; 0x26
    460e:	97 a3       	std	Z+39, r25	; 0x27
    4610:	26 e0       	ldi	r18, 0x06	; 6
    4612:	20 83       	st	Z, r18
    4614:	86 a7       	std	Z+46, r24	; 0x2e
    4616:	97 a7       	std	Z+47, r25	; 0x2f
    4618:	87 81       	ldd	r24, Z+7	; 0x07
    461a:	80 64       	ori	r24, 0x40	; 64
    461c:	87 83       	std	Z+7, r24	; 0x07
    461e:	81 81       	ldd	r24, Z+1	; 0x01
    4620:	80 68       	ori	r24, 0x80	; 128
    4622:	81 83       	std	Z+1, r24	; 0x01
    4624:	08 95       	ret

00004626 <ESP8266_TimerStop>:
    4626:	e0 e0       	ldi	r30, 0x00	; 0
    4628:	f9 e0       	ldi	r31, 0x09	; 9
    462a:	10 82       	st	Z, r1
    462c:	87 81       	ldd	r24, Z+7	; 0x07
    462e:	8f 7b       	andi	r24, 0xBF	; 191
    4630:	87 83       	std	Z+7, r24	; 0x07
    4632:	81 81       	ldd	r24, Z+1	; 0x01
    4634:	8f 77       	andi	r24, 0x7F	; 127
    4636:	81 83       	std	Z+1, r24	; 0x01
    4638:	e0 e7       	ldi	r30, 0x70	; 112
    463a:	f0 e0       	ldi	r31, 0x00	; 0
    463c:	84 81       	ldd	r24, Z+4	; 0x04
    463e:	81 60       	ori	r24, 0x01	; 1
    4640:	84 83       	std	Z+4, r24	; 0x04
    4642:	08 95       	ret

00004644 <ESP8266_TimeUpdate>:
    4644:	0f 93       	push	r16
    4646:	1f 93       	push	r17
    4648:	fc 01       	movw	r30, r24
    464a:	06 85       	ldd	r16, Z+14	; 0x0e
    464c:	17 85       	ldd	r17, Z+15	; 0x0f
    464e:	20 89       	ldd	r18, Z+16	; 0x10
    4650:	31 89       	ldd	r19, Z+17	; 0x11
    4652:	40 0f       	add	r20, r16
    4654:	51 1f       	adc	r21, r17
    4656:	62 1f       	adc	r22, r18
    4658:	73 1f       	adc	r23, r19
    465a:	46 87       	std	Z+14, r20	; 0x0e
    465c:	57 87       	std	Z+15, r21	; 0x0f
    465e:	60 8b       	std	Z+16, r22	; 0x10
    4660:	71 8b       	std	Z+17, r23	; 0x11
    4662:	1f 91       	pop	r17
    4664:	0f 91       	pop	r16
    4666:	08 95       	ret

00004668 <ESP8266_DataReceived>:
    4668:	9b 01       	movw	r18, r22
    466a:	40 e0       	ldi	r20, 0x00	; 0
    466c:	50 e0       	ldi	r21, 0x00	; 0
    466e:	bc 01       	movw	r22, r24
    4670:	82 e9       	ldi	r24, 0x92	; 146
    4672:	94 e3       	ldi	r25, 0x34	; 52
    4674:	0e 94 ab 18 	call	0x3156	; 0x3156 <BUFFER_Write>
    4678:	cb 01       	movw	r24, r22
    467a:	08 95       	ret

0000467c <ESP8266_Callback_ServerConnectionActive>:
    467c:	08 95       	ret

0000467e <ESP8266_Callback_ServerConnectionClosed>:
    467e:	08 95       	ret

00004680 <ESP8266_Callback_ServerConnectionDataReceived>:
    4680:	08 95       	ret

00004682 <ESP8266_Callback_ServerConnectionSendData>:
    4682:	80 e0       	ldi	r24, 0x00	; 0
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	08 95       	ret

00004688 <ESP8266_Callback_ServerConnectionDataSent>:
    4688:	08 95       	ret

0000468a <ParseReceived>:
    468a:	2f 92       	push	r2
    468c:	3f 92       	push	r3
    468e:	4f 92       	push	r4
    4690:	5f 92       	push	r5
    4692:	6f 92       	push	r6
    4694:	7f 92       	push	r7
    4696:	8f 92       	push	r8
    4698:	9f 92       	push	r9
    469a:	af 92       	push	r10
    469c:	bf 92       	push	r11
    469e:	cf 92       	push	r12
    46a0:	df 92       	push	r13
    46a2:	ef 92       	push	r14
    46a4:	ff 92       	push	r15
    46a6:	0f 93       	push	r16
    46a8:	1f 93       	push	r17
    46aa:	cf 93       	push	r28
    46ac:	df 93       	push	r29
    46ae:	cd b7       	in	r28, 0x3d	; 61
    46b0:	de b7       	in	r29, 0x3e	; 62
    46b2:	66 97       	sbiw	r28, 0x16	; 22
    46b4:	cd bf       	out	0x3d, r28	; 61
    46b6:	de bf       	out	0x3e, r29	; 62
    46b8:	8c 01       	movw	r16, r24
    46ba:	7b 01       	movw	r14, r22
    46bc:	b4 2e       	mov	r11, r20
    46be:	69 01       	movw	r12, r18
    46c0:	fc 01       	movw	r30, r24
    46c2:	86 85       	ldd	r24, Z+14	; 0x0e
    46c4:	97 85       	ldd	r25, Z+15	; 0x0f
    46c6:	a0 89       	ldd	r26, Z+16	; 0x10
    46c8:	b1 89       	ldd	r27, Z+17	; 0x11
    46ca:	82 8b       	std	Z+18, r24	; 0x12
    46cc:	93 8b       	std	Z+19, r25	; 0x13
    46ce:	a4 8b       	std	Z+20, r26	; 0x14
    46d0:	b5 8b       	std	Z+21, r27	; 0x15
    46d2:	22 30       	cpi	r18, 0x02	; 2
    46d4:	31 05       	cpc	r19, r1
    46d6:	09 f4       	brne	.+2      	; 0x46da <ParseReceived+0x50>
    46d8:	9d c4       	rjmp	.+2362   	; 0x5014 <ParseReceived+0x98a>
    46da:	f8 01       	movw	r30, r16
    46dc:	84 81       	ldd	r24, Z+4	; 0x04
    46de:	95 81       	ldd	r25, Z+5	; 0x05
    46e0:	a6 81       	ldd	r26, Z+6	; 0x06
    46e2:	b7 81       	ldd	r27, Z+7	; 0x07
    46e4:	89 2b       	or	r24, r25
    46e6:	8a 2b       	or	r24, r26
    46e8:	8b 2b       	or	r24, r27
    46ea:	09 f0       	breq	.+2      	; 0x46ee <ParseReceived+0x64>
    46ec:	59 c1       	rjmp	.+690    	; 0x49a0 <ParseReceived+0x316>
    46ee:	66 ed       	ldi	r22, 0xD6	; 214
    46f0:	72 e2       	ldi	r23, 0x22	; 34
    46f2:	c7 01       	movw	r24, r14
    46f4:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    46f8:	89 2b       	or	r24, r25
    46fa:	09 f4       	brne	.+2      	; 0x46fe <ParseReceived+0x74>
    46fc:	6f c4       	rjmp	.+2270   	; 0x4fdc <ParseReceived+0x952>
    46fe:	45 e0       	ldi	r20, 0x05	; 5
    4700:	50 e0       	ldi	r21, 0x00	; 0
    4702:	63 ef       	ldi	r22, 0xF3	; 243
    4704:	72 e2       	ldi	r23, 0x22	; 34
    4706:	c7 01       	movw	r24, r14
    4708:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    470c:	89 2b       	or	r24, r25
    470e:	09 f4       	brne	.+2      	; 0x4712 <ParseReceived+0x88>
    4710:	51 c4       	rjmp	.+2210   	; 0x4fb4 <ParseReceived+0x92a>
    4712:	49 e0       	ldi	r20, 0x09	; 9
    4714:	50 e0       	ldi	r21, 0x00	; 0
    4716:	69 ef       	ldi	r22, 0xF9	; 249
    4718:	72 e2       	ldi	r23, 0x22	; 34
    471a:	c7 01       	movw	r24, r14
    471c:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    4720:	89 2b       	or	r24, r25
    4722:	09 f4       	brne	.+2      	; 0x4726 <ParseReceived+0x9c>
    4724:	63 c4       	rjmp	.+2246   	; 0x4fec <ParseReceived+0x962>
    4726:	6c eb       	ldi	r22, 0xBC	; 188
    4728:	72 e2       	ldi	r23, 0x22	; 34
    472a:	c7 01       	movw	r24, r14
    472c:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    4730:	89 2b       	or	r24, r25
    4732:	09 f4       	brne	.+2      	; 0x4736 <ParseReceived+0xac>
    4734:	57 c4       	rjmp	.+2222   	; 0x4fe4 <ParseReceived+0x95a>
    4736:	63 e0       	ldi	r22, 0x03	; 3
    4738:	73 e2       	ldi	r23, 0x23	; 35
    473a:	c7 01       	movw	r24, r14
    473c:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    4740:	89 2b       	or	r24, r25
    4742:	09 f4       	brne	.+2      	; 0x4746 <ParseReceived+0xbc>
    4744:	44 c2       	rjmp	.+1160   	; 0x4bce <ParseReceived+0x544>
    4746:	d8 01       	movw	r26, r16
    4748:	5a 96       	adiw	r26, 0x1a	; 26
    474a:	8c 91       	ld	r24, X
    474c:	5a 97       	sbiw	r26, 0x1a	; 26
    474e:	88 23       	and	r24, r24
    4750:	a9 f0       	breq	.+42     	; 0x477c <ParseReceived+0xf2>
    4752:	d3 96       	adiw	r26, 0x33	; 51
    4754:	8c 91       	ld	r24, X
    4756:	d3 97       	sbiw	r26, 0x33	; 51
    4758:	88 23       	and	r24, r24
    475a:	81 f0       	breq	.+32     	; 0x477c <ParseReceived+0xf2>
    475c:	5c 96       	adiw	r26, 0x1c	; 28
    475e:	2c 91       	ld	r18, X
    4760:	22 23       	and	r18, r18
    4762:	09 f4       	brne	.+2      	; 0x4766 <ParseReceived+0xdc>
    4764:	62 c4       	rjmp	.+2244   	; 0x502a <ParseReceived+0x9a0>
    4766:	f8 01       	movw	r30, r16
    4768:	13 aa       	std	Z+51, r1	; 0x33
    476a:	21 11       	cpse	r18, r1
    476c:	f0 c7       	rjmp	.+4064   	; 0x574e <ParseReceived+0x10c4>
    476e:	46 a5       	ldd	r20, Z+46	; 0x2e
    4770:	57 a5       	ldd	r21, Z+47	; 0x2f
    4772:	b8 01       	movw	r22, r16
    4774:	66 5e       	subi	r22, 0xE6	; 230
    4776:	7f 4f       	sbci	r23, 0xFF	; 255
    4778:	c8 01       	movw	r24, r16
    477a:	82 df       	rcall	.-252    	; 0x4680 <ESP8266_Callback_ServerConnectionDataReceived>
    477c:	d8 01       	movw	r26, r16
    477e:	df 96       	adiw	r26, 0x3f	; 63
    4780:	8c 91       	ld	r24, X
    4782:	88 23       	and	r24, r24
    4784:	e9 f0       	breq	.+58     	; 0x47c0 <ParseReceived+0x136>
    4786:	f8 01       	movw	r30, r16
    4788:	e8 5a       	subi	r30, 0xA8	; 168
    478a:	ff 4f       	sbci	r31, 0xFF	; 255
    478c:	80 81       	ld	r24, Z
    478e:	88 23       	and	r24, r24
    4790:	b9 f0       	breq	.+46     	; 0x47c0 <ParseReceived+0x136>
    4792:	98 01       	movw	r18, r16
    4794:	2f 5b       	subi	r18, 0xBF	; 191
    4796:	3f 4f       	sbci	r19, 0xFF	; 255
    4798:	d9 01       	movw	r26, r18
    479a:	8c 91       	ld	r24, X
    479c:	88 23       	and	r24, r24
    479e:	09 f4       	brne	.+2      	; 0x47a2 <ParseReceived+0x118>
    47a0:	4f c4       	rjmp	.+2206   	; 0x5040 <ParseReceived+0x9b6>
    47a2:	10 82       	st	Z, r1
    47a4:	f9 01       	movw	r30, r18
    47a6:	80 81       	ld	r24, Z
    47a8:	f8 01       	movw	r30, r16
    47aa:	ed 5a       	subi	r30, 0xAD	; 173
    47ac:	ff 4f       	sbci	r31, 0xFF	; 255
    47ae:	40 81       	ld	r20, Z
    47b0:	51 81       	ldd	r21, Z+1	; 0x01
    47b2:	b8 01       	movw	r22, r16
    47b4:	61 5c       	subi	r22, 0xC1	; 193
    47b6:	7f 4f       	sbci	r23, 0xFF	; 255
    47b8:	81 11       	cpse	r24, r1
    47ba:	d6 c7       	rjmp	.+4012   	; 0x5768 <ParseReceived+0x10de>
    47bc:	c8 01       	movw	r24, r16
    47be:	60 df       	rcall	.-320    	; 0x4680 <ESP8266_Callback_ServerConnectionDataReceived>
    47c0:	f8 01       	movw	r30, r16
    47c2:	ec 59       	subi	r30, 0x9C	; 156
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	80 81       	ld	r24, Z
    47c8:	88 23       	and	r24, r24
    47ca:	e9 f0       	breq	.+58     	; 0x4806 <ParseReceived+0x17c>
    47cc:	98 01       	movw	r18, r16
    47ce:	23 58       	subi	r18, 0x83	; 131
    47d0:	3f 4f       	sbci	r19, 0xFF	; 255
    47d2:	d9 01       	movw	r26, r18
    47d4:	8c 91       	ld	r24, X
    47d6:	88 23       	and	r24, r24
    47d8:	b1 f0       	breq	.+44     	; 0x4806 <ParseReceived+0x17c>
    47da:	a8 01       	movw	r20, r16
    47dc:	4a 59       	subi	r20, 0x9A	; 154
    47de:	5f 4f       	sbci	r21, 0xFF	; 255
    47e0:	da 01       	movw	r26, r20
    47e2:	8c 91       	ld	r24, X
    47e4:	88 23       	and	r24, r24
    47e6:	09 f4       	brne	.+2      	; 0x47ea <ParseReceived+0x160>
    47e8:	38 c4       	rjmp	.+2160   	; 0x505a <ParseReceived+0x9d0>
    47ea:	d9 01       	movw	r26, r18
    47ec:	1c 92       	st	X, r1
    47ee:	da 01       	movw	r26, r20
    47f0:	8c 91       	ld	r24, X
    47f2:	d8 01       	movw	r26, r16
    47f4:	a8 58       	subi	r26, 0x88	; 136
    47f6:	bf 4f       	sbci	r27, 0xFF	; 255
    47f8:	4d 91       	ld	r20, X+
    47fa:	5c 91       	ld	r21, X
    47fc:	bf 01       	movw	r22, r30
    47fe:	81 11       	cpse	r24, r1
    4800:	9e c7       	rjmp	.+3900   	; 0x573e <ParseReceived+0x10b4>
    4802:	c8 01       	movw	r24, r16
    4804:	3d df       	rcall	.-390    	; 0x4680 <ESP8266_Callback_ServerConnectionDataReceived>
    4806:	f8 01       	movw	r30, r16
    4808:	e7 57       	subi	r30, 0x77	; 119
    480a:	ff 4f       	sbci	r31, 0xFF	; 255
    480c:	80 81       	ld	r24, Z
    480e:	88 23       	and	r24, r24
    4810:	e9 f0       	breq	.+58     	; 0x484c <ParseReceived+0x1c2>
    4812:	98 01       	movw	r18, r16
    4814:	2e 55       	subi	r18, 0x5E	; 94
    4816:	3f 4f       	sbci	r19, 0xFF	; 255
    4818:	d9 01       	movw	r26, r18
    481a:	8c 91       	ld	r24, X
    481c:	88 23       	and	r24, r24
    481e:	b1 f0       	breq	.+44     	; 0x484c <ParseReceived+0x1c2>
    4820:	a8 01       	movw	r20, r16
    4822:	45 57       	subi	r20, 0x75	; 117
    4824:	5f 4f       	sbci	r21, 0xFF	; 255
    4826:	da 01       	movw	r26, r20
    4828:	8c 91       	ld	r24, X
    482a:	88 23       	and	r24, r24
    482c:	09 f4       	brne	.+2      	; 0x4830 <ParseReceived+0x1a6>
    482e:	22 c4       	rjmp	.+2116   	; 0x5074 <ParseReceived+0x9ea>
    4830:	d9 01       	movw	r26, r18
    4832:	1c 92       	st	X, r1
    4834:	da 01       	movw	r26, r20
    4836:	8c 91       	ld	r24, X
    4838:	d8 01       	movw	r26, r16
    483a:	a3 56       	subi	r26, 0x63	; 99
    483c:	bf 4f       	sbci	r27, 0xFF	; 255
    483e:	4d 91       	ld	r20, X+
    4840:	5c 91       	ld	r21, X
    4842:	bf 01       	movw	r22, r30
    4844:	81 11       	cpse	r24, r1
    4846:	8c c7       	rjmp	.+3864   	; 0x5760 <ParseReceived+0x10d6>
    4848:	c8 01       	movw	r24, r16
    484a:	1a df       	rcall	.-460    	; 0x4680 <ESP8266_Callback_ServerConnectionDataReceived>
    484c:	f8 01       	movw	r30, r16
    484e:	e2 55       	subi	r30, 0x52	; 82
    4850:	ff 4f       	sbci	r31, 0xFF	; 255
    4852:	80 81       	ld	r24, Z
    4854:	88 23       	and	r24, r24
    4856:	f9 f0       	breq	.+62     	; 0x4896 <ParseReceived+0x20c>
    4858:	98 01       	movw	r18, r16
    485a:	29 53       	subi	r18, 0x39	; 57
    485c:	3f 4f       	sbci	r19, 0xFF	; 255
    485e:	d9 01       	movw	r26, r18
    4860:	8c 91       	ld	r24, X
    4862:	88 23       	and	r24, r24
    4864:	c1 f0       	breq	.+48     	; 0x4896 <ParseReceived+0x20c>
    4866:	a8 01       	movw	r20, r16
    4868:	40 55       	subi	r20, 0x50	; 80
    486a:	5f 4f       	sbci	r21, 0xFF	; 255
    486c:	da 01       	movw	r26, r20
    486e:	8c 91       	ld	r24, X
    4870:	88 23       	and	r24, r24
    4872:	09 f4       	brne	.+2      	; 0x4876 <ParseReceived+0x1ec>
    4874:	0c c4       	rjmp	.+2072   	; 0x508e <ParseReceived+0xa04>
    4876:	d9 01       	movw	r26, r18
    4878:	1c 92       	st	X, r1
    487a:	da 01       	movw	r26, r20
    487c:	8c 91       	ld	r24, X
    487e:	d8 01       	movw	r26, r16
    4880:	ae 53       	subi	r26, 0x3E	; 62
    4882:	bf 4f       	sbci	r27, 0xFF	; 255
    4884:	4d 91       	ld	r20, X+
    4886:	5c 91       	ld	r21, X
    4888:	bf 01       	movw	r22, r30
    488a:	88 23       	and	r24, r24
    488c:	09 f4       	brne	.+2      	; 0x4890 <ParseReceived+0x206>
    488e:	5b c7       	rjmp	.+3766   	; 0x5746 <ParseReceived+0x10bc>
    4890:	c8 01       	movw	r24, r16
    4892:	0e 94 18 3c 	call	0x7830	; 0x7830 <ESP8266_Callback_ClientConnectionDataReceived>
    4896:	6f e0       	ldi	r22, 0x0F	; 15
    4898:	73 e2       	ldi	r23, 0x23	; 35
    489a:	c7 01       	movw	r24, r14
    489c:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    48a0:	89 2b       	or	r24, r25
    48a2:	09 f4       	brne	.+2      	; 0x48a6 <ParseReceived+0x21c>
    48a4:	8a c1       	rjmp	.+788    	; 0x4bba <ParseReceived+0x530>
    48a6:	60 e2       	ldi	r22, 0x20	; 32
    48a8:	73 e2       	ldi	r23, 0x23	; 35
    48aa:	c7 01       	movw	r24, r14
    48ac:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    48b0:	89 2b       	or	r24, r25
    48b2:	09 f4       	brne	.+2      	; 0x48b6 <ParseReceived+0x22c>
    48b4:	c4 c0       	rjmp	.+392    	; 0x4a3e <ParseReceived+0x3b4>
    48b6:	62 e3       	ldi	r22, 0x32	; 50
    48b8:	73 e2       	ldi	r23, 0x23	; 35
    48ba:	c7 01       	movw	r24, r14
    48bc:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    48c0:	89 2b       	or	r24, r25
    48c2:	09 f4       	brne	.+2      	; 0x48c6 <ParseReceived+0x23c>
    48c4:	27 c7       	rjmp	.+3662   	; 0x5714 <ParseReceived+0x108a>
    48c6:	60 e4       	ldi	r22, 0x40	; 64
    48c8:	73 e2       	ldi	r23, 0x23	; 35
    48ca:	c7 01       	movw	r24, r14
    48cc:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    48d0:	89 2b       	or	r24, r25
    48d2:	09 f4       	brne	.+2      	; 0x48d6 <ParseReceived+0x24c>
    48d4:	30 c7       	rjmp	.+3680   	; 0x5736 <ParseReceived+0x10ac>
    48d6:	6a ea       	ldi	r22, 0xAA	; 170
    48d8:	72 e2       	ldi	r23, 0x22	; 34
    48da:	c7 01       	movw	r24, r14
    48dc:	0e 94 c4 44 	call	0x8988	; 0x8988 <strstr>
    48e0:	89 2b       	or	r24, r25
    48e2:	49 f1       	breq	.+82     	; 0x4936 <ParseReceived+0x2ac>
    48e4:	f8 01       	movw	r30, r16
    48e6:	14 82       	std	Z+4, r1	; 0x04
    48e8:	15 82       	std	Z+5, r1	; 0x05
    48ea:	16 82       	std	Z+6, r1	; 0x06
    48ec:	17 82       	std	Z+7, r1	; 0x07
    48ee:	48 01       	movw	r8, r16
    48f0:	fd e2       	ldi	r31, 0x2D	; 45
    48f2:	8f 0e       	add	r8, r31
    48f4:	91 1c       	adc	r9, r1
    48f6:	28 01       	movw	r4, r16
    48f8:	2a e1       	ldi	r18, 0x1A	; 26
    48fa:	42 0e       	add	r4, r18
    48fc:	51 1c       	adc	r5, r1
    48fe:	38 01       	movw	r6, r16
    4900:	33 ed       	ldi	r19, 0xD3	; 211
    4902:	63 0e       	add	r6, r19
    4904:	71 1c       	adc	r7, r1
    4906:	d4 01       	movw	r26, r8
    4908:	8c 91       	ld	r24, X
    490a:	88 23       	and	r24, r24
    490c:	59 f0       	breq	.+22     	; 0x4924 <ParseReceived+0x29a>
    490e:	1c 92       	st	X, r1
    4910:	f4 01       	movw	r30, r8
    4912:	71 97       	sbiw	r30, 0x11	; 17
    4914:	80 81       	ld	r24, Z
    4916:	b2 01       	movw	r22, r4
    4918:	88 23       	and	r24, r24
    491a:	09 f4       	brne	.+2      	; 0x491e <ParseReceived+0x294>
    491c:	4b c1       	rjmp	.+662    	; 0x4bb4 <ParseReceived+0x52a>
    491e:	c8 01       	movw	r24, r16
    4920:	0e 94 14 3c 	call	0x7828	; 0x7828 <ESP8266_Callback_ClientConnectionDataSent>
    4924:	b5 e2       	ldi	r27, 0x25	; 37
    4926:	8b 0e       	add	r8, r27
    4928:	91 1c       	adc	r9, r1
    492a:	e5 e2       	ldi	r30, 0x25	; 37
    492c:	4e 0e       	add	r4, r30
    492e:	51 1c       	adc	r5, r1
    4930:	46 14       	cp	r4, r6
    4932:	57 04       	cpc	r5, r7
    4934:	41 f7       	brne	.-48     	; 0x4906 <ParseReceived+0x27c>
    4936:	bb e0       	ldi	r27, 0x0B	; 11
    4938:	cb 16       	cp	r12, r27
    493a:	d1 04       	cpc	r13, r1
    493c:	80 f0       	brcs	.+32     	; 0x495e <ParseReceived+0x2d4>
    493e:	46 01       	movw	r8, r12
    4940:	fa e0       	ldi	r31, 0x0A	; 10
    4942:	8f 1a       	sub	r8, r31
    4944:	91 08       	sbc	r9, r1
    4946:	8e 0c       	add	r8, r14
    4948:	9f 1c       	adc	r9, r15
    494a:	4a e0       	ldi	r20, 0x0A	; 10
    494c:	50 e0       	ldi	r21, 0x00	; 0
    494e:	6d e4       	ldi	r22, 0x4D	; 77
    4950:	73 e2       	ldi	r23, 0x23	; 35
    4952:	c4 01       	movw	r24, r8
    4954:	0e 94 76 44 	call	0x88ec	; 0x88ec <memcmp>
    4958:	89 2b       	or	r24, r25
    495a:	09 f4       	brne	.+2      	; 0x495e <ParseReceived+0x2d4>
    495c:	b0 c6       	rjmp	.+3424   	; 0x56be <ParseReceived+0x1034>
    495e:	68 e5       	ldi	r22, 0x58	; 88
    4960:	73 e2       	ldi	r23, 0x23	; 35
    4962:	c7 01       	movw	r24, r14
    4964:	0e 94 c4 44 	call	0x8988	; 0x8988 <strstr>
    4968:	89 2b       	or	r24, r25
    496a:	09 f4       	brne	.+2      	; 0x496e <ParseReceived+0x2e4>
    496c:	06 c7       	rjmp	.+3596   	; 0x577a <ParseReceived+0x10f0>
    496e:	45 e0       	ldi	r20, 0x05	; 5
    4970:	50 e0       	ldi	r21, 0x00	; 0
    4972:	60 ed       	ldi	r22, 0xD0	; 208
    4974:	72 e2       	ldi	r23, 0x22	; 34
    4976:	c7 01       	movw	r24, r14
    4978:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    497c:	89 2b       	or	r24, r25
    497e:	09 f4       	brne	.+2      	; 0x4982 <ParseReceived+0x2f8>
    4980:	2a c1       	rjmp	.+596    	; 0x4bd6 <ParseReceived+0x54c>
    4982:	f8 01       	movw	r30, r16
    4984:	84 81       	ldd	r24, Z+4	; 0x04
    4986:	95 81       	ldd	r25, Z+5	; 0x05
    4988:	a6 81       	ldd	r26, Z+6	; 0x06
    498a:	b7 81       	ldd	r27, Z+7	; 0x07
    498c:	fc 01       	movw	r30, r24
    498e:	31 97       	sbiw	r30, 0x01	; 1
    4990:	e2 32       	cpi	r30, 0x22	; 34
    4992:	f1 05       	cpc	r31, r1
    4994:	08 f0       	brcs	.+2      	; 0x4998 <ParseReceived+0x30e>
    4996:	8a c0       	rjmp	.+276    	; 0x4aac <ParseReceived+0x422>
    4998:	e2 50       	subi	r30, 0x02	; 2
    499a:	ff 4f       	sbci	r31, 0xFF	; 255
    499c:	0c 94 40 42 	jmp	0x8480	; 0x8480 <__tablejump2__>
    49a0:	bb 20       	and	r11, r11
    49a2:	09 f4       	brne	.+2      	; 0x49a6 <ParseReceived+0x31c>
    49a4:	a4 ce       	rjmp	.-696    	; 0x46ee <ParseReceived+0x64>
    49a6:	6f ea       	ldi	r22, 0xAF	; 175
    49a8:	72 e2       	ldi	r23, 0x22	; 34
    49aa:	c7 01       	movw	r24, r14
    49ac:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    49b0:	89 2b       	or	r24, r25
    49b2:	09 f4       	brne	.+2      	; 0x49b6 <ParseReceived+0x32c>
    49b4:	9c ce       	rjmp	.-712    	; 0x46ee <ParseReceived+0x64>
    49b6:	6a ea       	ldi	r22, 0xAA	; 170
    49b8:	72 e2       	ldi	r23, 0x22	; 34
    49ba:	c7 01       	movw	r24, r14
    49bc:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    49c0:	89 2b       	or	r24, r25
    49c2:	09 f4       	brne	.+2      	; 0x49c6 <ParseReceived+0x33c>
    49c4:	94 ce       	rjmp	.-728    	; 0x46ee <ParseReceived+0x64>
    49c6:	64 eb       	ldi	r22, 0xB4	; 180
    49c8:	72 e2       	ldi	r23, 0x22	; 34
    49ca:	c7 01       	movw	r24, r14
    49cc:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    49d0:	89 2b       	or	r24, r25
    49d2:	09 f4       	brne	.+2      	; 0x49d6 <ParseReceived+0x34c>
    49d4:	8c ce       	rjmp	.-744    	; 0x46ee <ParseReceived+0x64>
    49d6:	6c eb       	ldi	r22, 0xBC	; 188
    49d8:	72 e2       	ldi	r23, 0x22	; 34
    49da:	c7 01       	movw	r24, r14
    49dc:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    49e0:	89 2b       	or	r24, r25
    49e2:	09 f4       	brne	.+2      	; 0x49e6 <ParseReceived+0x35c>
    49e4:	84 ce       	rjmp	.-760    	; 0x46ee <ParseReceived+0x64>
    49e6:	64 ec       	ldi	r22, 0xC4	; 196
    49e8:	72 e2       	ldi	r23, 0x22	; 34
    49ea:	c7 01       	movw	r24, r14
    49ec:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    49f0:	89 2b       	or	r24, r25
    49f2:	09 f4       	brne	.+2      	; 0x49f6 <ParseReceived+0x36c>
    49f4:	7c ce       	rjmp	.-776    	; 0x46ee <ParseReceived+0x64>
    49f6:	45 e0       	ldi	r20, 0x05	; 5
    49f8:	50 e0       	ldi	r21, 0x00	; 0
    49fa:	60 ed       	ldi	r22, 0xD0	; 208
    49fc:	72 e2       	ldi	r23, 0x22	; 34
    49fe:	c7 01       	movw	r24, r14
    4a00:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    4a04:	89 2b       	or	r24, r25
    4a06:	09 f4       	brne	.+2      	; 0x4a0a <ParseReceived+0x380>
    4a08:	72 ce       	rjmp	.-796    	; 0x46ee <ParseReceived+0x64>
    4a0a:	d8 01       	movw	r26, r16
    4a0c:	18 96       	adiw	r26, 0x08	; 8
    4a0e:	6d 91       	ld	r22, X+
    4a10:	7c 91       	ld	r23, X
    4a12:	19 97       	sbiw	r26, 0x09	; 9
    4a14:	fb 01       	movw	r30, r22
    4a16:	01 90       	ld	r0, Z+
    4a18:	00 20       	and	r0, r0
    4a1a:	e9 f7       	brne	.-6      	; 0x4a16 <ParseReceived+0x38c>
    4a1c:	af 01       	movw	r20, r30
    4a1e:	41 50       	subi	r20, 0x01	; 1
    4a20:	51 09       	sbc	r21, r1
    4a22:	46 1b       	sub	r20, r22
    4a24:	57 0b       	sbc	r21, r23
    4a26:	c7 01       	movw	r24, r14
    4a28:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    4a2c:	89 2b       	or	r24, r25
    4a2e:	09 f4       	brne	.+2      	; 0x4a32 <ParseReceived+0x3a8>
    4a30:	5e ce       	rjmp	.-836    	; 0x46ee <ParseReceived+0x64>
    4a32:	b7 01       	movw	r22, r14
    4a34:	84 ea       	ldi	r24, 0xA4	; 164
    4a36:	94 e3       	ldi	r25, 0x34	; 52
    4a38:	0e 94 c6 1b 	call	0x378c	; 0x378c <BUFFER_WriteString>
    4a3c:	86 c0       	rjmp	.+268    	; 0x4b4a <ParseReceived+0x4c0>
    4a3e:	f8 01       	movw	r30, r16
    4a40:	e3 5d       	subi	r30, 0xD3	; 211
    4a42:	fe 4f       	sbci	r31, 0xFE	; 254
    4a44:	81 81       	ldd	r24, Z+1	; 0x01
    4a46:	8b 7f       	andi	r24, 0xFB	; 251
    4a48:	87 7f       	andi	r24, 0xF7	; 247
    4a4a:	81 83       	std	Z+1, r24	; 0x01
    4a4c:	89 e1       	ldi	r24, 0x19	; 25
    4a4e:	b5 97       	sbiw	r30, 0x25	; 37
    4a50:	df 01       	movw	r26, r30
    4a52:	1d 92       	st	X+, r1
    4a54:	8a 95       	dec	r24
    4a56:	e9 f7       	brne	.-6      	; 0x4a52 <ParseReceived+0x3c8>
    4a58:	89 eb       	ldi	r24, 0xB9	; 185
    4a5a:	ee 5e       	subi	r30, 0xEE	; 238
    4a5c:	f1 09       	sbc	r31, r1
    4a5e:	df 01       	movw	r26, r30
    4a60:	1d 92       	st	X+, r1
    4a62:	8a 95       	dec	r24
    4a64:	e9 f7       	brne	.-6      	; 0x4a60 <ParseReceived+0x3d6>
    4a66:	c8 01       	movw	r24, r16
    4a68:	0e 94 16 3b 	call	0x762c	; 0x762c <ESP8266_Callback_WifiDisconnected>
    4a6c:	34 cf       	rjmp	.-408    	; 0x48d6 <ParseReceived+0x24c>
    4a6e:	4a e0       	ldi	r20, 0x0A	; 10
    4a70:	50 e0       	ldi	r21, 0x00	; 0
    4a72:	68 ec       	ldi	r22, 0xC8	; 200
    4a74:	73 e2       	ldi	r23, 0x23	; 35
    4a76:	c7 01       	movw	r24, r14
    4a78:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    4a7c:	89 2b       	or	r24, r25
    4a7e:	41 f4       	brne	.+16     	; 0x4a90 <ParseReceived+0x406>
    4a80:	40 e0       	ldi	r20, 0x00	; 0
    4a82:	50 e0       	ldi	r21, 0x00	; 0
    4a84:	b8 01       	movw	r22, r16
    4a86:	61 52       	subi	r22, 0x21	; 33
    4a88:	7f 4f       	sbci	r23, 0xFF	; 255
    4a8a:	c7 01       	movw	r24, r14
    4a8c:	0c 96       	adiw	r24, 0x0c	; 12
    4a8e:	ad d9       	rcall	.-3238   	; 0x3dea <ParseMAC>
    4a90:	6f ea       	ldi	r22, 0xAF	; 175
    4a92:	72 e2       	ldi	r23, 0x22	; 34
    4a94:	c7 01       	movw	r24, r14
    4a96:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    4a9a:	89 2b       	or	r24, r25
    4a9c:	49 f5       	brne	.+82     	; 0x4af0 <ParseReceived+0x466>
    4a9e:	d8 01       	movw	r26, r16
    4aa0:	14 96       	adiw	r26, 0x04	; 4
    4aa2:	1d 92       	st	X+, r1
    4aa4:	1d 92       	st	X+, r1
    4aa6:	1d 92       	st	X+, r1
    4aa8:	1c 92       	st	X, r1
    4aaa:	17 97       	sbiw	r26, 0x07	; 7
    4aac:	6f ea       	ldi	r22, 0xAF	; 175
    4aae:	72 e2       	ldi	r23, 0x22	; 34
    4ab0:	c7 01       	movw	r24, r14
    4ab2:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    4ab6:	89 2b       	or	r24, r25
    4ab8:	d9 f4       	brne	.+54     	; 0x4af0 <ParseReceived+0x466>
    4aba:	f8 01       	movw	r30, r16
    4abc:	e3 5d       	subi	r30, 0xD3	; 211
    4abe:	fe 4f       	sbci	r31, 0xFE	; 254
    4ac0:	81 81       	ldd	r24, Z+1	; 0x01
    4ac2:	82 60       	ori	r24, 0x02	; 2
    4ac4:	81 83       	std	Z+1, r24	; 0x01
    4ac6:	f8 01       	movw	r30, r16
    4ac8:	84 81       	ldd	r24, Z+4	; 0x04
    4aca:	95 81       	ldd	r25, Z+5	; 0x05
    4acc:	a6 81       	ldd	r26, Z+6	; 0x06
    4ace:	b7 81       	ldd	r27, Z+7	; 0x07
    4ad0:	08 97       	sbiw	r24, 0x08	; 8
    4ad2:	a1 05       	cpc	r26, r1
    4ad4:	b1 05       	cpc	r27, r1
    4ad6:	61 f0       	breq	.+24     	; 0x4af0 <ParseReceived+0x466>
    4ad8:	84 81       	ldd	r24, Z+4	; 0x04
    4ada:	95 81       	ldd	r25, Z+5	; 0x05
    4adc:	a6 81       	ldd	r26, Z+6	; 0x06
    4ade:	b7 81       	ldd	r27, Z+7	; 0x07
    4ae0:	4d 97       	sbiw	r24, 0x1d	; 29
    4ae2:	a1 05       	cpc	r26, r1
    4ae4:	b1 05       	cpc	r27, r1
    4ae6:	21 f0       	breq	.+8      	; 0x4af0 <ParseReceived+0x466>
    4ae8:	14 82       	std	Z+4, r1	; 0x04
    4aea:	15 82       	std	Z+5, r1	; 0x05
    4aec:	16 82       	std	Z+6, r1	; 0x06
    4aee:	17 82       	std	Z+7, r1	; 0x07
    4af0:	64 eb       	ldi	r22, 0xB4	; 180
    4af2:	72 e2       	ldi	r23, 0x22	; 34
    4af4:	c7 01       	movw	r24, r14
    4af6:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    4afa:	89 2b       	or	r24, r25
    4afc:	39 f0       	breq	.+14     	; 0x4b0c <ParseReceived+0x482>
    4afe:	64 ec       	ldi	r22, 0xC4	; 196
    4b00:	72 e2       	ldi	r23, 0x22	; 34
    4b02:	c7 01       	movw	r24, r14
    4b04:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    4b08:	89 2b       	or	r24, r25
    4b0a:	59 f4       	brne	.+22     	; 0x4b22 <ParseReceived+0x498>
    4b0c:	f8 01       	movw	r30, r16
    4b0e:	e3 5d       	subi	r30, 0xD3	; 211
    4b10:	fe 4f       	sbci	r31, 0xFE	; 254
    4b12:	81 81       	ldd	r24, Z+1	; 0x01
    4b14:	8d 7f       	andi	r24, 0xFD	; 253
    4b16:	81 83       	std	Z+1, r24	; 0x01
    4b18:	f8 01       	movw	r30, r16
    4b1a:	14 82       	std	Z+4, r1	; 0x04
    4b1c:	15 82       	std	Z+5, r1	; 0x05
    4b1e:	16 82       	std	Z+6, r1	; 0x06
    4b20:	17 82       	std	Z+7, r1	; 0x07
    4b22:	6a ea       	ldi	r22, 0xAA	; 170
    4b24:	72 e2       	ldi	r23, 0x22	; 34
    4b26:	c7 01       	movw	r24, r14
    4b28:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    4b2c:	89 2b       	or	r24, r25
    4b2e:	69 f4       	brne	.+26     	; 0x4b4a <ParseReceived+0x4c0>
    4b30:	d8 01       	movw	r26, r16
    4b32:	14 96       	adiw	r26, 0x04	; 4
    4b34:	1d 92       	st	X+, r1
    4b36:	1d 92       	st	X+, r1
    4b38:	1d 92       	st	X+, r1
    4b3a:	1c 92       	st	X, r1
    4b3c:	17 97       	sbiw	r26, 0x07	; 7
    4b3e:	f8 01       	movw	r30, r16
    4b40:	e3 5d       	subi	r30, 0xD3	; 211
    4b42:	fe 4f       	sbci	r31, 0xFE	; 254
    4b44:	81 81       	ldd	r24, Z+1	; 0x01
    4b46:	8e 7f       	andi	r24, 0xFE	; 254
    4b48:	81 83       	std	Z+1, r24	; 0x01
    4b4a:	66 96       	adiw	r28, 0x16	; 22
    4b4c:	cd bf       	out	0x3d, r28	; 61
    4b4e:	de bf       	out	0x3e, r29	; 62
    4b50:	df 91       	pop	r29
    4b52:	cf 91       	pop	r28
    4b54:	1f 91       	pop	r17
    4b56:	0f 91       	pop	r16
    4b58:	ff 90       	pop	r15
    4b5a:	ef 90       	pop	r14
    4b5c:	df 90       	pop	r13
    4b5e:	cf 90       	pop	r12
    4b60:	bf 90       	pop	r11
    4b62:	af 90       	pop	r10
    4b64:	9f 90       	pop	r9
    4b66:	8f 90       	pop	r8
    4b68:	7f 90       	pop	r7
    4b6a:	6f 90       	pop	r6
    4b6c:	5f 90       	pop	r5
    4b6e:	4f 90       	pop	r4
    4b70:	3f 90       	pop	r3
    4b72:	2f 90       	pop	r2
    4b74:	08 95       	ret
    4b76:	80 e0       	ldi	r24, 0x00	; 0
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	dc 01       	movw	r26, r24
    4b7c:	dd 20       	and	r13, r13
    4b7e:	39 f0       	breq	.+14     	; 0x4b8e <ParseReceived+0x504>
    4b80:	b0 95       	com	r27
    4b82:	a0 95       	com	r26
    4b84:	90 95       	com	r25
    4b86:	81 95       	neg	r24
    4b88:	9f 4f       	sbci	r25, 0xFF	; 255
    4b8a:	af 4f       	sbci	r26, 0xFF	; 255
    4b8c:	bf 4f       	sbci	r27, 0xFF	; 255
    4b8e:	f8 01       	movw	r30, r16
    4b90:	e1 5e       	subi	r30, 0xE1	; 225
    4b92:	fe 4f       	sbci	r31, 0xFE	; 254
    4b94:	80 83       	st	Z, r24
    4b96:	91 83       	std	Z+1, r25	; 0x01
    4b98:	6f ea       	ldi	r22, 0xAF	; 175
    4b9a:	72 e2       	ldi	r23, 0x22	; 34
    4b9c:	c7 01       	movw	r24, r14
    4b9e:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    4ba2:	89 2b       	or	r24, r25
    4ba4:	09 f0       	breq	.+2      	; 0x4ba8 <ParseReceived+0x51e>
    4ba6:	a4 cf       	rjmp	.-184    	; 0x4af0 <ParseReceived+0x466>
    4ba8:	f8 01       	movw	r30, r16
    4baa:	14 82       	std	Z+4, r1	; 0x04
    4bac:	15 82       	std	Z+5, r1	; 0x05
    4bae:	16 82       	std	Z+6, r1	; 0x06
    4bb0:	17 82       	std	Z+7, r1	; 0x07
    4bb2:	7c cf       	rjmp	.-264    	; 0x4aac <ParseReceived+0x422>
    4bb4:	c8 01       	movw	r24, r16
    4bb6:	68 dd       	rcall	.-1328   	; 0x4688 <ESP8266_Callback_ServerConnectionDataSent>
    4bb8:	b5 ce       	rjmp	.-662    	; 0x4924 <ParseReceived+0x29a>
    4bba:	f8 01       	movw	r30, r16
    4bbc:	e3 5d       	subi	r30, 0xD3	; 211
    4bbe:	fe 4f       	sbci	r31, 0xFE	; 254
    4bc0:	81 81       	ldd	r24, Z+1	; 0x01
    4bc2:	84 60       	ori	r24, 0x04	; 4
    4bc4:	81 83       	std	Z+1, r24	; 0x01
    4bc6:	c8 01       	movw	r24, r16
    4bc8:	0e 94 1a 3b 	call	0x7634	; 0x7634 <ESP8266_Callback_WifiConnected>
    4bcc:	84 ce       	rjmp	.-760    	; 0x48d6 <ParseReceived+0x24c>
    4bce:	c8 01       	movw	r24, r16
    4bd0:	0e 94 12 3b 	call	0x7624	; 0x7624 <ESP8266_Callback_WatchdogReset>
    4bd4:	b8 cd       	rjmp	.-1168   	; 0x4746 <ParseReceived+0xbc>
    4bd6:	98 01       	movw	r18, r16
    4bd8:	2f 5f       	subi	r18, 0xFF	; 255
    4bda:	3e 4f       	sbci	r19, 0xFE	; 254
    4bdc:	2d 8b       	std	Y+21, r18	; 0x15
    4bde:	3e 8b       	std	Y+22, r19	; 0x16
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	d9 01       	movw	r26, r18
    4be4:	8c 93       	st	X, r24
    4be6:	f8 01       	movw	r30, r16
    4be8:	e9 5f       	subi	r30, 0xF9	; 249
    4bea:	fe 4f       	sbci	r31, 0xFE	; 254
    4bec:	b0 82       	st	Z, r11
    4bee:	f7 01       	movw	r30, r14
    4bf0:	85 81       	ldd	r24, Z+5	; 0x05
    4bf2:	80 53       	subi	r24, 0x30	; 48
    4bf4:	f8 01       	movw	r30, r16
    4bf6:	ea 5f       	subi	r30, 0xFA	; 250
    4bf8:	fe 4f       	sbci	r31, 0xFE	; 254
    4bfa:	80 83       	st	Z, r24
    4bfc:	48 01       	movw	r8, r16
    4bfe:	25 e2       	ldi	r18, 0x25	; 37
    4c00:	82 9f       	mul	r24, r18
    4c02:	80 0c       	add	r8, r0
    4c04:	91 1c       	adc	r9, r1
    4c06:	11 24       	eor	r1, r1
    4c08:	a4 01       	movw	r20, r8
    4c0a:	46 5e       	subi	r20, 0xE6	; 230
    4c0c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c0e:	4a 01       	movw	r8, r20
    4c10:	81 e5       	ldi	r24, 0x51	; 81
    4c12:	9c e2       	ldi	r25, 0x2C	; 44
    4c14:	da 01       	movw	r26, r20
    4c16:	54 96       	adiw	r26, 0x14	; 20
    4c18:	8d 93       	st	X+, r24
    4c1a:	9c 93       	st	X, r25
    4c1c:	55 97       	sbiw	r26, 0x15	; 21
    4c1e:	80 81       	ld	r24, Z
    4c20:	11 96       	adiw	r26, 0x01	; 1
    4c22:	8c 93       	st	X, r24
    4c24:	f7 01       	movw	r30, r14
    4c26:	27 81       	ldd	r18, Z+7	; 0x07
    4c28:	2d 32       	cpi	r18, 0x2D	; 45
    4c2a:	09 f4       	brne	.+2      	; 0x4c2e <ParseReceived+0x5a4>
    4c2c:	eb c5       	rjmp	.+3030   	; 0x5804 <ParseReceived+0x117a>
    4c2e:	37 96       	adiw	r30, 0x07	; 7
    4c30:	88 e0       	ldi	r24, 0x08	; 8
    4c32:	28 2e       	mov	r2, r24
    4c34:	31 2c       	mov	r3, r1
    4c36:	98 e0       	ldi	r25, 0x08	; 8
    4c38:	49 2e       	mov	r4, r25
    4c3a:	51 2c       	mov	r5, r1
    4c3c:	61 2c       	mov	r6, r1
    4c3e:	71 2c       	mov	r7, r1
    4c40:	60 e0       	ldi	r22, 0x00	; 0
    4c42:	80 ed       	ldi	r24, 0xD0	; 208
    4c44:	82 0f       	add	r24, r18
    4c46:	8a 30       	cpi	r24, 0x0A	; 10
    4c48:	08 f0       	brcs	.+2      	; 0x4c4c <ParseReceived+0x5c2>
    4c4a:	d2 c7       	rjmp	.+4004   	; 0x5bf0 <ParseReceived+0x1566>
    4c4c:	31 96       	adiw	r30, 0x01	; 1
    4c4e:	46 2f       	mov	r20, r22
    4c50:	80 e0       	ldi	r24, 0x00	; 0
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	dc 01       	movw	r26, r24
    4c56:	2c 01       	movw	r4, r24
    4c58:	3d 01       	movw	r6, r26
    4c5a:	44 0c       	add	r4, r4
    4c5c:	55 1c       	adc	r5, r5
    4c5e:	66 1c       	adc	r6, r6
    4c60:	77 1c       	adc	r7, r7
    4c62:	d3 01       	movw	r26, r6
    4c64:	c2 01       	movw	r24, r4
    4c66:	88 0f       	add	r24, r24
    4c68:	99 1f       	adc	r25, r25
    4c6a:	aa 1f       	adc	r26, r26
    4c6c:	bb 1f       	adc	r27, r27
    4c6e:	88 0f       	add	r24, r24
    4c70:	99 1f       	adc	r25, r25
    4c72:	aa 1f       	adc	r26, r26
    4c74:	bb 1f       	adc	r27, r27
    4c76:	84 0d       	add	r24, r4
    4c78:	95 1d       	adc	r25, r5
    4c7a:	a6 1d       	adc	r26, r6
    4c7c:	b7 1d       	adc	r27, r7
    4c7e:	42 2e       	mov	r4, r18
    4c80:	51 2c       	mov	r5, r1
    4c82:	20 e3       	ldi	r18, 0x30	; 48
    4c84:	42 1a       	sub	r4, r18
    4c86:	51 08       	sbc	r5, r1
    4c88:	66 24       	eor	r6, r6
    4c8a:	57 fc       	sbrc	r5, 7
    4c8c:	60 94       	com	r6
    4c8e:	76 2c       	mov	r7, r6
    4c90:	84 0d       	add	r24, r4
    4c92:	95 1d       	adc	r25, r5
    4c94:	a6 1d       	adc	r26, r6
    4c96:	b7 1d       	adc	r27, r7
    4c98:	4f 5f       	subi	r20, 0xFF	; 255
    4c9a:	21 91       	ld	r18, Z+
    4c9c:	30 ed       	ldi	r19, 0xD0	; 208
    4c9e:	32 0f       	add	r19, r18
    4ca0:	3a 30       	cpi	r19, 0x0A	; 10
    4ca2:	c8 f2       	brcs	.-78     	; 0x4c56 <ParseReceived+0x5cc>
    4ca4:	44 2e       	mov	r4, r20
    4ca6:	51 2c       	mov	r5, r1
    4ca8:	3f ef       	ldi	r19, 0xFF	; 255
    4caa:	43 1a       	sub	r4, r19
    4cac:	53 0a       	sbc	r5, r19
    4cae:	66 24       	eor	r6, r6
    4cb0:	57 fc       	sbrc	r5, 7
    4cb2:	60 94       	com	r6
    4cb4:	76 2c       	mov	r7, r6
    4cb6:	47 e0       	ldi	r20, 0x07	; 7
    4cb8:	44 0e       	add	r4, r20
    4cba:	51 1c       	adc	r5, r1
    4cbc:	61 1c       	adc	r6, r1
    4cbe:	71 1c       	adc	r7, r1
    4cc0:	12 01       	movw	r2, r4
    4cc2:	66 23       	and	r22, r22
    4cc4:	09 f4       	brne	.+2      	; 0x4cc8 <ParseReceived+0x63e>
    4cc6:	f0 c1       	rjmp	.+992    	; 0x50a8 <ParseReceived+0xa1e>
    4cc8:	44 27       	eor	r20, r20
    4cca:	55 27       	eor	r21, r21
    4ccc:	ba 01       	movw	r22, r20
    4cce:	48 1b       	sub	r20, r24
    4cd0:	59 0b       	sbc	r21, r25
    4cd2:	6a 0b       	sbc	r22, r26
    4cd4:	7b 0b       	sbc	r23, r27
    4cd6:	d4 01       	movw	r26, r8
    4cd8:	1a 96       	adiw	r26, 0x0a	; 10
    4cda:	4d 93       	st	X+, r20
    4cdc:	5d 93       	st	X+, r21
    4cde:	6d 93       	st	X+, r22
    4ce0:	7c 93       	st	X, r23
    4ce2:	1d 97       	sbiw	r26, 0x0d	; 13
    4ce4:	1e 96       	adiw	r26, 0x0e	; 14
    4ce6:	8d 91       	ld	r24, X+
    4ce8:	9d 91       	ld	r25, X+
    4cea:	0d 90       	ld	r0, X+
    4cec:	bc 91       	ld	r27, X
    4cee:	a0 2d       	mov	r26, r0
    4cf0:	f4 01       	movw	r30, r8
    4cf2:	00 97       	sbiw	r24, 0x00	; 0
    4cf4:	a1 05       	cpc	r26, r1
    4cf6:	b1 05       	cpc	r27, r1
    4cf8:	09 f0       	breq	.+2      	; 0x4cfc <ParseReceived+0x672>
    4cfa:	16 c5       	rjmp	.+2604   	; 0x5728 <ParseReceived+0x109e>
    4cfc:	12 a2       	std	Z+34, r1	; 0x22
    4cfe:	21 e0       	ldi	r18, 0x01	; 1
    4d00:	23 a3       	std	Z+35, r18	; 0x23
    4d02:	84 0f       	add	r24, r20
    4d04:	95 1f       	adc	r25, r21
    4d06:	a6 1f       	adc	r26, r22
    4d08:	b7 1f       	adc	r27, r23
    4d0a:	f4 01       	movw	r30, r8
    4d0c:	86 87       	std	Z+14, r24	; 0x0e
    4d0e:	97 87       	std	Z+15, r25	; 0x0f
    4d10:	a0 8b       	std	Z+16, r26	; 0x10
    4d12:	b1 8b       	std	Z+17, r27	; 0x11
    4d14:	f8 01       	movw	r30, r16
    4d16:	ed 5d       	subi	r30, 0xDD	; 221
    4d18:	fe 4f       	sbci	r31, 0xFE	; 254
    4d1a:	80 81       	ld	r24, Z
    4d1c:	91 81       	ldd	r25, Z+1	; 0x01
    4d1e:	a2 81       	ldd	r26, Z+2	; 0x02
    4d20:	b3 81       	ldd	r27, Z+3	; 0x03
    4d22:	84 0f       	add	r24, r20
    4d24:	95 1f       	adc	r25, r21
    4d26:	a6 1f       	adc	r26, r22
    4d28:	b7 1f       	adc	r27, r23
    4d2a:	80 83       	st	Z, r24
    4d2c:	91 83       	std	Z+1, r25	; 0x01
    4d2e:	a2 83       	std	Z+2, r26	; 0x02
    4d30:	b3 83       	std	Z+3, r27	; 0x03
    4d32:	54 01       	movw	r10, r8
    4d34:	f5 e0       	ldi	r31, 0x05	; 5
    4d36:	af 0e       	add	r10, r31
    4d38:	b1 1c       	adc	r11, r1
    4d3a:	f7 01       	movw	r30, r14
    4d3c:	e2 0d       	add	r30, r2
    4d3e:	f3 1d       	adc	r31, r3
    4d40:	8f e0       	ldi	r24, 0x0F	; 15
    4d42:	de 01       	movw	r26, r28
    4d44:	11 96       	adiw	r26, 0x01	; 1
    4d46:	01 90       	ld	r0, Z+
    4d48:	0d 92       	st	X+, r0
    4d4a:	8a 95       	dec	r24
    4d4c:	e1 f7       	brne	.-8      	; 0x4d46 <ParseReceived+0x6bc>
    4d4e:	18 8a       	std	Y+16, r1	; 0x10
    4d50:	68 ea       	ldi	r22, 0xA8	; 168
    4d52:	72 e2       	ldi	r23, 0x22	; 34
    4d54:	ce 01       	movw	r24, r28
    4d56:	01 96       	adiw	r24, 0x01	; 1
    4d58:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    4d5c:	fc 01       	movw	r30, r24
    4d5e:	00 97       	sbiw	r24, 0x00	; 0
    4d60:	09 f4       	brne	.+2      	; 0x4d64 <ParseReceived+0x6da>
    4d62:	7a c7       	rjmp	.+3828   	; 0x5c58 <ParseReceived+0x15ce>
    4d64:	95 01       	movw	r18, r10
    4d66:	44 e0       	ldi	r20, 0x04	; 4
    4d68:	b4 2e       	mov	r11, r20
    4d6a:	a1 2c       	mov	r10, r1
    4d6c:	09 8b       	std	Y+17, r16	; 0x11
    4d6e:	1a 8b       	std	Y+18, r17	; 0x12
    4d70:	89 01       	movw	r16, r18
    4d72:	20 81       	ld	r18, Z
    4d74:	2d 32       	cpi	r18, 0x2D	; 45
    4d76:	09 f4       	brne	.+2      	; 0x4d7a <ParseReceived+0x6f0>
    4d78:	9d c4       	rjmp	.+2362   	; 0x56b4 <ParseReceived+0x102a>
    4d7a:	21 2c       	mov	r2, r1
    4d7c:	80 ed       	ldi	r24, 0xD0	; 208
    4d7e:	82 0f       	add	r24, r18
    4d80:	8a 30       	cpi	r24, 0x0A	; 10
    4d82:	08 f0       	brcs	.+2      	; 0x4d86 <ParseReceived+0x6fc>
    4d84:	f5 c4       	rjmp	.+2538   	; 0x5770 <ParseReceived+0x10e6>
    4d86:	31 96       	adiw	r30, 0x01	; 1
    4d88:	32 2c       	mov	r3, r2
    4d8a:	80 e0       	ldi	r24, 0x00	; 0
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	dc 01       	movw	r26, r24
    4d90:	ac 01       	movw	r20, r24
    4d92:	bd 01       	movw	r22, r26
    4d94:	44 0f       	add	r20, r20
    4d96:	55 1f       	adc	r21, r21
    4d98:	66 1f       	adc	r22, r22
    4d9a:	77 1f       	adc	r23, r23
    4d9c:	db 01       	movw	r26, r22
    4d9e:	ca 01       	movw	r24, r20
    4da0:	88 0f       	add	r24, r24
    4da2:	99 1f       	adc	r25, r25
    4da4:	aa 1f       	adc	r26, r26
    4da6:	bb 1f       	adc	r27, r27
    4da8:	88 0f       	add	r24, r24
    4daa:	99 1f       	adc	r25, r25
    4dac:	aa 1f       	adc	r26, r26
    4dae:	bb 1f       	adc	r27, r27
    4db0:	84 0f       	add	r24, r20
    4db2:	95 1f       	adc	r25, r21
    4db4:	a6 1f       	adc	r26, r22
    4db6:	b7 1f       	adc	r27, r23
    4db8:	30 e0       	ldi	r19, 0x00	; 0
    4dba:	20 53       	subi	r18, 0x30	; 48
    4dbc:	31 09       	sbc	r19, r1
    4dbe:	a9 01       	movw	r20, r18
    4dc0:	66 27       	eor	r22, r22
    4dc2:	57 fd       	sbrc	r21, 7
    4dc4:	60 95       	com	r22
    4dc6:	76 2f       	mov	r23, r22
    4dc8:	84 0f       	add	r24, r20
    4dca:	95 1f       	adc	r25, r21
    4dcc:	a6 1f       	adc	r26, r22
    4dce:	b7 1f       	adc	r27, r23
    4dd0:	33 94       	inc	r3
    4dd2:	21 91       	ld	r18, Z+
    4dd4:	30 ed       	ldi	r19, 0xD0	; 208
    4dd6:	32 0f       	add	r19, r18
    4dd8:	3a 30       	cpi	r19, 0x0A	; 10
    4dda:	d0 f2       	brcs	.-76     	; 0x4d90 <ParseReceived+0x706>
    4ddc:	22 20       	and	r2, r2
    4dde:	39 f0       	breq	.+14     	; 0x4dee <ParseReceived+0x764>
    4de0:	b0 95       	com	r27
    4de2:	a0 95       	com	r26
    4de4:	90 95       	com	r25
    4de6:	81 95       	neg	r24
    4de8:	9f 4f       	sbci	r25, 0xFF	; 255
    4dea:	af 4f       	sbci	r26, 0xFF	; 255
    4dec:	bf 4f       	sbci	r27, 0xFF	; 255
    4dee:	f8 01       	movw	r30, r16
    4df0:	81 93       	st	Z+, r24
    4df2:	8f 01       	movw	r16, r30
    4df4:	a3 0c       	add	r10, r3
    4df6:	ba 94       	dec	r11
    4df8:	59 f0       	breq	.+22     	; 0x4e10 <ParseReceived+0x786>
    4dfa:	a3 94       	inc	r10
    4dfc:	68 ea       	ldi	r22, 0xA8	; 168
    4dfe:	72 e2       	ldi	r23, 0x22	; 34
    4e00:	80 e0       	ldi	r24, 0x00	; 0
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    4e08:	fc 01       	movw	r30, r24
    4e0a:	00 97       	sbiw	r24, 0x00	; 0
    4e0c:	09 f0       	breq	.+2      	; 0x4e10 <ParseReceived+0x786>
    4e0e:	b1 cf       	rjmp	.-158    	; 0x4d72 <ParseReceived+0x6e8>
    4e10:	09 89       	ldd	r16, Y+17	; 0x11
    4e12:	1a 89       	ldd	r17, Y+18	; 0x12
    4e14:	8a 2d       	mov	r24, r10
    4e16:	90 e0       	ldi	r25, 0x00	; 0
    4e18:	01 96       	adiw	r24, 0x01	; 1
    4e1a:	aa 27       	eor	r26, r26
    4e1c:	97 fd       	sbrc	r25, 7
    4e1e:	a0 95       	com	r26
    4e20:	ba 2f       	mov	r27, r26
    4e22:	48 0e       	add	r4, r24
    4e24:	59 1e       	adc	r5, r25
    4e26:	6a 1e       	adc	r6, r26
    4e28:	7b 1e       	adc	r7, r27
    4e2a:	f7 01       	movw	r30, r14
    4e2c:	e4 0d       	add	r30, r4
    4e2e:	f5 1d       	adc	r31, r5
    4e30:	30 81       	ld	r19, Z
    4e32:	3d 32       	cpi	r19, 0x2D	; 45
    4e34:	09 f4       	brne	.+2      	; 0x4e38 <ParseReceived+0x7ae>
    4e36:	e2 c4       	rjmp	.+2500   	; 0x57fc <ParseReceived+0x1172>
    4e38:	20 e0       	ldi	r18, 0x00	; 0
    4e3a:	80 ed       	ldi	r24, 0xD0	; 208
    4e3c:	83 0f       	add	r24, r19
    4e3e:	8a 30       	cpi	r24, 0x0A	; 10
    4e40:	08 f0       	brcs	.+2      	; 0x4e44 <ParseReceived+0x7ba>
    4e42:	da c6       	rjmp	.+3508   	; 0x5bf8 <ParseReceived+0x156e>
    4e44:	31 96       	adiw	r30, 0x01	; 1
    4e46:	80 e0       	ldi	r24, 0x00	; 0
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	dc 01       	movw	r26, r24
    4e4c:	ac 01       	movw	r20, r24
    4e4e:	bd 01       	movw	r22, r26
    4e50:	44 0f       	add	r20, r20
    4e52:	55 1f       	adc	r21, r21
    4e54:	66 1f       	adc	r22, r22
    4e56:	77 1f       	adc	r23, r23
    4e58:	db 01       	movw	r26, r22
    4e5a:	ca 01       	movw	r24, r20
    4e5c:	88 0f       	add	r24, r24
    4e5e:	99 1f       	adc	r25, r25
    4e60:	aa 1f       	adc	r26, r26
    4e62:	bb 1f       	adc	r27, r27
    4e64:	88 0f       	add	r24, r24
    4e66:	99 1f       	adc	r25, r25
    4e68:	aa 1f       	adc	r26, r26
    4e6a:	bb 1f       	adc	r27, r27
    4e6c:	84 0f       	add	r24, r20
    4e6e:	95 1f       	adc	r25, r21
    4e70:	a6 1f       	adc	r26, r22
    4e72:	b7 1f       	adc	r27, r23
    4e74:	43 2f       	mov	r20, r19
    4e76:	50 e0       	ldi	r21, 0x00	; 0
    4e78:	40 53       	subi	r20, 0x30	; 48
    4e7a:	51 09       	sbc	r21, r1
    4e7c:	66 27       	eor	r22, r22
    4e7e:	57 fd       	sbrc	r21, 7
    4e80:	60 95       	com	r22
    4e82:	76 2f       	mov	r23, r22
    4e84:	84 0f       	add	r24, r20
    4e86:	95 1f       	adc	r25, r21
    4e88:	a6 1f       	adc	r26, r22
    4e8a:	b7 1f       	adc	r27, r23
    4e8c:	31 91       	ld	r19, Z+
    4e8e:	40 ed       	ldi	r20, 0xD0	; 208
    4e90:	43 0f       	add	r20, r19
    4e92:	4a 30       	cpi	r20, 0x0A	; 10
    4e94:	d8 f2       	brcs	.-74     	; 0x4e4c <ParseReceived+0x7c2>
    4e96:	22 23       	and	r18, r18
    4e98:	39 f0       	breq	.+14     	; 0x4ea8 <ParseReceived+0x81e>
    4e9a:	b0 95       	com	r27
    4e9c:	a0 95       	com	r26
    4e9e:	90 95       	com	r25
    4ea0:	81 95       	neg	r24
    4ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ea4:	af 4f       	sbci	r26, 0xFF	; 255
    4ea6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ea8:	f4 01       	movw	r30, r8
    4eaa:	83 83       	std	Z+3, r24	; 0x03
    4eac:	94 83       	std	Z+4, r25	; 0x04
    4eae:	d7 01       	movw	r26, r14
    4eb0:	8c 91       	ld	r24, X
    4eb2:	8a 33       	cpi	r24, 0x3A	; 58
    4eb4:	09 f4       	brne	.+2      	; 0x4eb8 <ParseReceived+0x82e>
    4eb6:	a4 c6       	rjmp	.+3400   	; 0x5c00 <ParseReceived+0x1576>
    4eb8:	c6 01       	movw	r24, r12
    4eba:	a0 e0       	ldi	r26, 0x00	; 0
    4ebc:	b0 e0       	ldi	r27, 0x00	; 0
    4ebe:	00 97       	sbiw	r24, 0x00	; 0
    4ec0:	a1 05       	cpc	r26, r1
    4ec2:	b1 05       	cpc	r27, r1
    4ec4:	09 f4       	brne	.+2      	; 0x4ec8 <ParseReceived+0x83e>
    4ec6:	9f c6       	rjmp	.+3390   	; 0x5c06 <ParseReceived+0x157c>
    4ec8:	f7 01       	movw	r30, r14
    4eca:	31 96       	adiw	r30, 0x01	; 1
    4ecc:	41 2c       	mov	r4, r1
    4ece:	51 2c       	mov	r5, r1
    4ed0:	32 01       	movw	r6, r4
    4ed2:	05 c0       	rjmp	.+10     	; 0x4ede <ParseReceived+0x854>
    4ed4:	48 16       	cp	r4, r24
    4ed6:	59 06       	cpc	r5, r25
    4ed8:	6a 06       	cpc	r6, r26
    4eda:	7b 06       	cpc	r7, r27
    4edc:	40 f4       	brcc	.+16     	; 0x4eee <ParseReceived+0x864>
    4ede:	3f ef       	ldi	r19, 0xFF	; 255
    4ee0:	43 1a       	sub	r4, r19
    4ee2:	53 0a       	sbc	r5, r19
    4ee4:	63 0a       	sbc	r6, r19
    4ee6:	73 0a       	sbc	r7, r19
    4ee8:	21 91       	ld	r18, Z+
    4eea:	2a 33       	cpi	r18, 0x3A	; 58
    4eec:	99 f7       	brne	.-26     	; 0x4ed4 <ParseReceived+0x84a>
    4eee:	a3 01       	movw	r20, r6
    4ef0:	92 01       	movw	r18, r4
    4ef2:	2f 5f       	subi	r18, 0xFF	; 255
    4ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ef6:	4f 4f       	sbci	r20, 0xFF	; 255
    4ef8:	5f 4f       	sbci	r21, 0xFF	; 255
    4efa:	29 8b       	std	Y+17, r18	; 0x11
    4efc:	3a 8b       	std	Y+18, r19	; 0x12
    4efe:	4b 8b       	std	Y+19, r20	; 0x13
    4f00:	5c 8b       	std	Y+20, r21	; 0x14
    4f02:	a9 88       	ldd	r10, Y+17	; 0x11
    4f04:	ba 88       	ldd	r11, Y+18	; 0x12
    4f06:	b5 01       	movw	r22, r10
    4f08:	2c 01       	movw	r4, r24
    4f0a:	3d 01       	movw	r6, r26
    4f0c:	42 1a       	sub	r4, r18
    4f0e:	53 0a       	sbc	r5, r19
    4f10:	64 0a       	sbc	r6, r20
    4f12:	75 0a       	sbc	r7, r21
    4f14:	f4 01       	movw	r30, r8
    4f16:	82 85       	ldd	r24, Z+10	; 0x0a
    4f18:	93 85       	ldd	r25, Z+11	; 0x0b
    4f1a:	a4 85       	ldd	r26, Z+12	; 0x0c
    4f1c:	b5 85       	ldd	r27, Z+13	; 0x0d
    4f1e:	84 15       	cp	r24, r4
    4f20:	95 05       	cpc	r25, r5
    4f22:	a6 05       	cpc	r26, r6
    4f24:	b7 05       	cpc	r27, r7
    4f26:	50 f4       	brcc	.+20     	; 0x4f3c <ParseReceived+0x8b2>
    4f28:	65 01       	movw	r12, r10
    4f2a:	c8 0e       	add	r12, r24
    4f2c:	d9 1e       	adc	r13, r25
    4f2e:	26 01       	movw	r4, r12
    4f30:	61 2c       	mov	r6, r1
    4f32:	71 2c       	mov	r7, r1
    4f34:	42 1a       	sub	r4, r18
    4f36:	53 0a       	sbc	r5, r19
    4f38:	64 0a       	sbc	r6, r20
    4f3a:	75 0a       	sbc	r7, r21
    4f3c:	ca 18       	sub	r12, r10
    4f3e:	db 08       	sbc	r13, r11
    4f40:	6e 0d       	add	r22, r14
    4f42:	7f 1d       	adc	r23, r15
    4f44:	a6 01       	movw	r20, r12
    4f46:	d4 01       	movw	r26, r8
    4f48:	54 96       	adiw	r26, 0x14	; 20
    4f4a:	8d 91       	ld	r24, X+
    4f4c:	9c 91       	ld	r25, X
    4f4e:	55 97       	sbiw	r26, 0x15	; 21
    4f50:	0e 94 83 44 	call	0x8906	; 0x8906 <memcpy>
    4f54:	f4 01       	movw	r30, r8
    4f56:	82 85       	ldd	r24, Z+10	; 0x0a
    4f58:	93 85       	ldd	r25, Z+11	; 0x0b
    4f5a:	a4 85       	ldd	r26, Z+12	; 0x0c
    4f5c:	b5 85       	ldd	r27, Z+13	; 0x0d
    4f5e:	84 15       	cp	r24, r4
    4f60:	95 05       	cpc	r25, r5
    4f62:	a6 05       	cpc	r26, r6
    4f64:	b7 05       	cpc	r27, r7
    4f66:	50 f4       	brcc	.+20     	; 0x4f7c <ParseReceived+0x8f2>
    4f68:	24 89       	ldd	r18, Z+20	; 0x14
    4f6a:	35 89       	ldd	r19, Z+21	; 0x15
    4f6c:	28 0f       	add	r18, r24
    4f6e:	39 1f       	adc	r19, r25
    4f70:	d9 01       	movw	r26, r18
    4f72:	1c 92       	st	X, r1
    4f74:	82 85       	ldd	r24, Z+10	; 0x0a
    4f76:	93 85       	ldd	r25, Z+11	; 0x0b
    4f78:	a4 85       	ldd	r26, Z+12	; 0x0c
    4f7a:	b5 85       	ldd	r27, Z+13	; 0x0d
    4f7c:	f8 01       	movw	r30, r16
    4f7e:	ec 5f       	subi	r30, 0xFC	; 252
    4f80:	fe 4f       	sbci	r31, 0xFE	; 254
    4f82:	c0 82       	st	Z, r12
    4f84:	d1 82       	std	Z+1, r13	; 0x01
    4f86:	32 97       	sbiw	r30, 0x02	; 2
    4f88:	c0 82       	st	Z, r12
    4f8a:	d1 82       	std	Z+1, r13	; 0x01
    4f8c:	29 89       	ldd	r18, Y+17	; 0x11
    4f8e:	3a 89       	ldd	r19, Y+18	; 0x12
    4f90:	4b 89       	ldd	r20, Y+19	; 0x13
    4f92:	5c 89       	ldd	r21, Y+20	; 0x14
    4f94:	28 17       	cp	r18, r24
    4f96:	39 07       	cpc	r19, r25
    4f98:	4a 07       	cpc	r20, r26
    4f9a:	5b 07       	cpc	r21, r27
    4f9c:	08 f4       	brcc	.+2      	; 0x4fa0 <ParseReceived+0x916>
    4f9e:	f1 cc       	rjmp	.-1566   	; 0x4982 <ParseReceived+0x2f8>
    4fa0:	ad 89       	ldd	r26, Y+21	; 0x15
    4fa2:	be 89       	ldd	r27, Y+22	; 0x16
    4fa4:	1c 92       	st	X, r1
    4fa6:	f4 01       	movw	r30, r8
    4fa8:	a6 8a       	std	Z+22, r10	; 0x16
    4faa:	b7 8a       	std	Z+23, r11	; 0x17
    4fac:	81 e0       	ldi	r24, 0x01	; 1
    4fae:	80 8f       	std	Z+24, r24	; 0x18
    4fb0:	81 8f       	std	Z+25, r24	; 0x19
    4fb2:	e7 cc       	rjmp	.-1586   	; 0x4982 <ParseReceived+0x2f8>
    4fb4:	d7 01       	movw	r26, r14
    4fb6:	0d 90       	ld	r0, X+
    4fb8:	00 20       	and	r0, r0
    4fba:	e9 f7       	brne	.-6      	; 0x4fb6 <ParseReceived+0x92c>
    4fbc:	ad 01       	movw	r20, r26
    4fbe:	41 50       	subi	r20, 0x01	; 1
    4fc0:	51 09       	sbc	r21, r1
    4fc2:	4e 19       	sub	r20, r14
    4fc4:	5f 09       	sbc	r21, r15
    4fc6:	55 27       	eor	r21, r21
    4fc8:	47 50       	subi	r20, 0x07	; 7
    4fca:	51 09       	sbc	r21, r1
    4fcc:	b7 01       	movw	r22, r14
    4fce:	6b 5f       	subi	r22, 0xFB	; 251
    4fd0:	7f 4f       	sbci	r23, 0xFF	; 255
    4fd2:	81 e4       	ldi	r24, 0x41	; 65
    4fd4:	95 e3       	ldi	r25, 0x35	; 53
    4fd6:	0e 94 aa 44 	call	0x8954	; 0x8954 <strncpy>
    4fda:	9b cb       	rjmp	.-2250   	; 0x4712 <ParseReceived+0x88>
    4fdc:	c8 01       	movw	r24, r16
    4fde:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <ESP8266_Callback_SmartConfig>
    4fe2:	8d cb       	rjmp	.-2278   	; 0x46fe <ParseReceived+0x74>
    4fe4:	c8 01       	movw	r24, r16
    4fe6:	0e 94 0e 3b 	call	0x761c	; 0x761c <ESP8266_Callback_DeviceReady>
    4fea:	a5 cb       	rjmp	.-2230   	; 0x4736 <ParseReceived+0xac>
    4fec:	f7 01       	movw	r30, r14
    4fee:	01 90       	ld	r0, Z+
    4ff0:	00 20       	and	r0, r0
    4ff2:	e9 f7       	brne	.-6      	; 0x4fee <ParseReceived+0x964>
    4ff4:	af 01       	movw	r20, r30
    4ff6:	41 50       	subi	r20, 0x01	; 1
    4ff8:	51 09       	sbc	r21, r1
    4ffa:	4e 19       	sub	r20, r14
    4ffc:	5f 09       	sbc	r21, r15
    4ffe:	55 27       	eor	r21, r21
    5000:	4b 50       	subi	r20, 0x0B	; 11
    5002:	51 09       	sbc	r21, r1
    5004:	b7 01       	movw	r22, r14
    5006:	67 5f       	subi	r22, 0xF7	; 247
    5008:	7f 4f       	sbci	r23, 0xFF	; 255
    500a:	88 e2       	ldi	r24, 0x28	; 40
    500c:	95 e3       	ldi	r25, 0x35	; 53
    500e:	0e 94 aa 44 	call	0x8954	; 0x8954 <strncpy>
    5012:	89 cb       	rjmp	.-2286   	; 0x4726 <ParseReceived+0x9c>
    5014:	db 01       	movw	r26, r22
    5016:	8c 91       	ld	r24, X
    5018:	8d 30       	cpi	r24, 0x0D	; 13
    501a:	09 f0       	breq	.+2      	; 0x501e <ParseReceived+0x994>
    501c:	5e cb       	rjmp	.-2372   	; 0x46da <ParseReceived+0x50>
    501e:	11 96       	adiw	r26, 0x01	; 1
    5020:	8c 91       	ld	r24, X
    5022:	8a 30       	cpi	r24, 0x0A	; 10
    5024:	09 f0       	breq	.+2      	; 0x5028 <ParseReceived+0x99e>
    5026:	59 cb       	rjmp	.-2382   	; 0x46da <ParseReceived+0x50>
    5028:	90 cd       	rjmp	.-1248   	; 0x4b4a <ParseReceived+0x4c0>
    502a:	f8 01       	movw	r30, r16
    502c:	84 81       	ldd	r24, Z+4	; 0x04
    502e:	95 81       	ldd	r25, Z+5	; 0x05
    5030:	a6 81       	ldd	r26, Z+6	; 0x06
    5032:	b7 81       	ldd	r27, Z+7	; 0x07
    5034:	89 2b       	or	r24, r25
    5036:	8a 2b       	or	r24, r26
    5038:	8b 2b       	or	r24, r27
    503a:	09 f4       	brne	.+2      	; 0x503e <ParseReceived+0x9b4>
    503c:	94 cb       	rjmp	.-2264   	; 0x4766 <ParseReceived+0xdc>
    503e:	9e cb       	rjmp	.-2244   	; 0x477c <ParseReceived+0xf2>
    5040:	d8 01       	movw	r26, r16
    5042:	14 96       	adiw	r26, 0x04	; 4
    5044:	4d 91       	ld	r20, X+
    5046:	5d 91       	ld	r21, X+
    5048:	6d 91       	ld	r22, X+
    504a:	7c 91       	ld	r23, X
    504c:	17 97       	sbiw	r26, 0x07	; 7
    504e:	45 2b       	or	r20, r21
    5050:	46 2b       	or	r20, r22
    5052:	47 2b       	or	r20, r23
    5054:	09 f4       	brne	.+2      	; 0x5058 <ParseReceived+0x9ce>
    5056:	a5 cb       	rjmp	.-2230   	; 0x47a2 <ParseReceived+0x118>
    5058:	b3 cb       	rjmp	.-2202   	; 0x47c0 <ParseReceived+0x136>
    505a:	d8 01       	movw	r26, r16
    505c:	14 96       	adiw	r26, 0x04	; 4
    505e:	4d 90       	ld	r4, X+
    5060:	5d 90       	ld	r5, X+
    5062:	6d 90       	ld	r6, X+
    5064:	7c 90       	ld	r7, X
    5066:	17 97       	sbiw	r26, 0x07	; 7
    5068:	45 28       	or	r4, r5
    506a:	46 28       	or	r4, r6
    506c:	47 28       	or	r4, r7
    506e:	09 f4       	brne	.+2      	; 0x5072 <ParseReceived+0x9e8>
    5070:	bc cb       	rjmp	.-2184   	; 0x47ea <ParseReceived+0x160>
    5072:	c9 cb       	rjmp	.-2158   	; 0x4806 <ParseReceived+0x17c>
    5074:	d8 01       	movw	r26, r16
    5076:	14 96       	adiw	r26, 0x04	; 4
    5078:	4d 90       	ld	r4, X+
    507a:	5d 90       	ld	r5, X+
    507c:	6d 90       	ld	r6, X+
    507e:	7c 90       	ld	r7, X
    5080:	17 97       	sbiw	r26, 0x07	; 7
    5082:	45 28       	or	r4, r5
    5084:	46 28       	or	r4, r6
    5086:	47 28       	or	r4, r7
    5088:	09 f4       	brne	.+2      	; 0x508c <ParseReceived+0xa02>
    508a:	d2 cb       	rjmp	.-2140   	; 0x4830 <ParseReceived+0x1a6>
    508c:	df cb       	rjmp	.-2114   	; 0x484c <ParseReceived+0x1c2>
    508e:	d8 01       	movw	r26, r16
    5090:	14 96       	adiw	r26, 0x04	; 4
    5092:	4d 90       	ld	r4, X+
    5094:	5d 90       	ld	r5, X+
    5096:	6d 90       	ld	r6, X+
    5098:	7c 90       	ld	r7, X
    509a:	17 97       	sbiw	r26, 0x07	; 7
    509c:	45 28       	or	r4, r5
    509e:	46 28       	or	r4, r6
    50a0:	47 28       	or	r4, r7
    50a2:	09 f0       	breq	.+2      	; 0x50a6 <ParseReceived+0xa1c>
    50a4:	f8 cb       	rjmp	.-2064   	; 0x4896 <ParseReceived+0x20c>
    50a6:	e7 cb       	rjmp	.-2098   	; 0x4876 <ParseReceived+0x1ec>
    50a8:	ac 01       	movw	r20, r24
    50aa:	bd 01       	movw	r22, r26
    50ac:	14 ce       	rjmp	.-984    	; 0x4cd6 <ParseReceived+0x64c>
    50ae:	49 e0       	ldi	r20, 0x09	; 9
    50b0:	50 e0       	ldi	r21, 0x00	; 0
    50b2:	63 ed       	ldi	r22, 0xD3	; 211
    50b4:	73 e2       	ldi	r23, 0x23	; 35
    50b6:	c7 01       	movw	r24, r14
    50b8:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    50bc:	89 2b       	or	r24, r25
    50be:	09 f0       	breq	.+2      	; 0x50c2 <ParseReceived+0xa38>
    50c0:	6b cd       	rjmp	.-1322   	; 0x4b98 <ParseReceived+0x50e>
    50c2:	40 e0       	ldi	r20, 0x00	; 0
    50c4:	50 e0       	ldi	r21, 0x00	; 0
    50c6:	b8 01       	movw	r22, r16
    50c8:	6f 50       	subi	r22, 0x0F	; 15
    50ca:	7f 4f       	sbci	r23, 0xFF	; 255
    50cc:	c7 01       	movw	r24, r14
    50ce:	0b 96       	adiw	r24, 0x0b	; 11
    50d0:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <ParseMAC>
    50d4:	61 cd       	rjmp	.-1342   	; 0x4b98 <ParseReceived+0x50e>
    50d6:	6c eb       	ldi	r22, 0xBC	; 188
    50d8:	72 e2       	ldi	r23, 0x22	; 34
    50da:	c7 01       	movw	r24, r14
    50dc:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    50e0:	89 2b       	or	r24, r25
    50e2:	09 f0       	breq	.+2      	; 0x50e6 <ParseReceived+0xa5c>
    50e4:	e3 cc       	rjmp	.-1594   	; 0x4aac <ParseReceived+0x422>
    50e6:	f8 01       	movw	r30, r16
    50e8:	14 82       	std	Z+4, r1	; 0x04
    50ea:	15 82       	std	Z+5, r1	; 0x05
    50ec:	16 82       	std	Z+6, r1	; 0x06
    50ee:	17 82       	std	Z+7, r1	; 0x07
    50f0:	e3 5d       	subi	r30, 0xD3	; 211
    50f2:	fe 4f       	sbci	r31, 0xFE	; 254
    50f4:	81 81       	ldd	r24, Z+1	; 0x01
    50f6:	82 60       	ori	r24, 0x02	; 2
    50f8:	81 83       	std	Z+1, r24	; 0x01
    50fa:	d8 cc       	rjmp	.-1616   	; 0x4aac <ParseReceived+0x422>
    50fc:	46 e0       	ldi	r20, 0x06	; 6
    50fe:	50 e0       	ldi	r21, 0x00	; 0
    5100:	6a ea       	ldi	r22, 0xAA	; 170
    5102:	73 e2       	ldi	r23, 0x23	; 35
    5104:	c7 01       	movw	r24, r14
    5106:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    510a:	89 2b       	or	r24, r25
    510c:	09 f0       	breq	.+2      	; 0x5110 <ParseReceived+0xa86>
    510e:	44 cd       	rjmp	.-1400   	; 0x4b98 <ParseReceived+0x50e>
    5110:	f7 01       	movw	r30, r14
    5112:	80 81       	ld	r24, Z
    5114:	88 23       	and	r24, r24
    5116:	09 f4       	brne	.+2      	; 0x511a <ParseReceived+0xa90>
    5118:	d9 c6       	rjmp	.+3506   	; 0x5ecc <ParseReceived+0x1842>
    511a:	8a 33       	cpi	r24, 0x3A	; 58
    511c:	09 f4       	brne	.+2      	; 0x5120 <ParseReceived+0xa96>
    511e:	d6 c6       	rjmp	.+3500   	; 0x5ecc <ParseReceived+0x1842>
    5120:	31 96       	adiw	r30, 0x01	; 1
    5122:	02 c0       	rjmp	.+4      	; 0x5128 <ParseReceived+0xa9e>
    5124:	8a 33       	cpi	r24, 0x3A	; 58
    5126:	21 f0       	breq	.+8      	; 0x5130 <ParseReceived+0xaa6>
    5128:	9f 01       	movw	r18, r30
    512a:	81 91       	ld	r24, Z+
    512c:	81 11       	cpse	r24, r1
    512e:	fa cf       	rjmp	.-12     	; 0x5124 <ParseReceived+0xa9a>
    5130:	21 15       	cp	r18, r1
    5132:	31 05       	cpc	r19, r1
    5134:	09 f4       	brne	.+2      	; 0x5138 <ParseReceived+0xaae>
    5136:	30 cd       	rjmp	.-1440   	; 0x4b98 <ParseReceived+0x50e>
    5138:	c8 01       	movw	r24, r16
    513a:	87 50       	subi	r24, 0x07	; 7
    513c:	9f 4f       	sbci	r25, 0xFF	; 255
    513e:	dc 01       	movw	r26, r24
    5140:	ed 91       	ld	r30, X+
    5142:	fc 91       	ld	r31, X
    5144:	10 82       	st	Z, r1
    5146:	f9 01       	movw	r30, r18
    5148:	41 81       	ldd	r20, Z+1	; 0x01
    514a:	d9 01       	movw	r26, r18
    514c:	42 32       	cpi	r20, 0x22	; 34
    514e:	09 f4       	brne	.+2      	; 0x5152 <ParseReceived+0xac8>
    5150:	96 c6       	rjmp	.+3372   	; 0x5e7e <ParseReceived+0x17f4>
    5152:	11 96       	adiw	r26, 0x01	; 1
    5154:	44 23       	and	r20, r20
    5156:	09 f4       	brne	.+2      	; 0x515a <ParseReceived+0xad0>
    5158:	df c6       	rjmp	.+3518   	; 0x5f18 <ParseReceived+0x188e>
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	bd 01       	movw	r22, r26
    515e:	10 c0       	rjmp	.+32     	; 0x5180 <ParseReceived+0xaf6>
    5160:	31 e0       	ldi	r19, 0x01	; 1
    5162:	32 0f       	add	r19, r18
    5164:	6f 5f       	subi	r22, 0xFF	; 255
    5166:	7f 4f       	sbci	r23, 0xFF	; 255
    5168:	dc 01       	movw	r26, r24
    516a:	ed 91       	ld	r30, X+
    516c:	fc 91       	ld	r31, X
    516e:	e2 0f       	add	r30, r18
    5170:	f1 1d       	adc	r31, r1
    5172:	40 83       	st	Z, r20
    5174:	fb 01       	movw	r30, r22
    5176:	40 81       	ld	r20, Z
    5178:	44 23       	and	r20, r20
    517a:	09 f4       	brne	.+2      	; 0x517e <ParseReceived+0xaf4>
    517c:	72 c5       	rjmp	.+2788   	; 0x5c62 <ParseReceived+0x15d8>
    517e:	23 2f       	mov	r18, r19
    5180:	42 32       	cpi	r20, 0x22	; 34
    5182:	71 f7       	brne	.-36     	; 0x5160 <ParseReceived+0xad6>
    5184:	db 01       	movw	r26, r22
    5186:	11 96       	adiw	r26, 0x01	; 1
    5188:	3c 91       	ld	r19, X
    518a:	11 97       	sbiw	r26, 0x01	; 1
    518c:	3c 32       	cpi	r19, 0x2C	; 44
    518e:	41 f7       	brne	.-48     	; 0x5160 <ParseReceived+0xad6>
    5190:	12 96       	adiw	r26, 0x02	; 2
    5192:	3c 91       	ld	r19, X
    5194:	12 97       	sbiw	r26, 0x02	; 2
    5196:	32 32       	cpi	r19, 0x22	; 34
    5198:	19 f7       	brne	.-58     	; 0x5160 <ParseReceived+0xad6>
    519a:	30 e0       	ldi	r19, 0x00	; 0
    519c:	fc 01       	movw	r30, r24
    519e:	80 81       	ld	r24, Z
    51a0:	91 81       	ldd	r25, Z+1	; 0x01
    51a2:	82 0f       	add	r24, r18
    51a4:	93 1f       	adc	r25, r19
    51a6:	fc 01       	movw	r30, r24
    51a8:	10 82       	st	Z, r1
    51aa:	cd 01       	movw	r24, r26
    51ac:	03 96       	adiw	r24, 0x03	; 3
    51ae:	13 96       	adiw	r26, 0x03	; 3
    51b0:	3c 91       	ld	r19, X
    51b2:	33 23       	and	r19, r19
    51b4:	09 f4       	brne	.+2      	; 0x51b8 <ParseReceived+0xb2e>
    51b6:	b3 c6       	rjmp	.+3430   	; 0x5f1e <ParseReceived+0x1894>
    51b8:	20 e0       	ldi	r18, 0x00	; 0
    51ba:	d8 01       	movw	r26, r16
    51bc:	a5 50       	subi	r26, 0x05	; 5
    51be:	bf 4f       	sbci	r27, 0xFF	; 255
    51c0:	bc 01       	movw	r22, r24
    51c2:	cd 01       	movw	r24, r26
    51c4:	11 c0       	rjmp	.+34     	; 0x51e8 <ParseReceived+0xb5e>
    51c6:	41 e0       	ldi	r20, 0x01	; 1
    51c8:	42 0f       	add	r20, r18
    51ca:	6f 5f       	subi	r22, 0xFF	; 255
    51cc:	7f 4f       	sbci	r23, 0xFF	; 255
    51ce:	dc 01       	movw	r26, r24
    51d0:	ed 91       	ld	r30, X+
    51d2:	fc 91       	ld	r31, X
    51d4:	11 97       	sbiw	r26, 0x01	; 1
    51d6:	e2 0f       	add	r30, r18
    51d8:	f1 1d       	adc	r31, r1
    51da:	30 83       	st	Z, r19
    51dc:	fb 01       	movw	r30, r22
    51de:	30 81       	ld	r19, Z
    51e0:	33 23       	and	r19, r19
    51e2:	09 f4       	brne	.+2      	; 0x51e6 <ParseReceived+0xb5c>
    51e4:	48 c5       	rjmp	.+2704   	; 0x5c76 <ParseReceived+0x15ec>
    51e6:	24 2f       	mov	r18, r20
    51e8:	32 32       	cpi	r19, 0x22	; 34
    51ea:	69 f7       	brne	.-38     	; 0x51c6 <ParseReceived+0xb3c>
    51ec:	db 01       	movw	r26, r22
    51ee:	11 96       	adiw	r26, 0x01	; 1
    51f0:	4c 91       	ld	r20, X
    51f2:	4c 32       	cpi	r20, 0x2C	; 44
    51f4:	41 f7       	brne	.-48     	; 0x51c6 <ParseReceived+0xb3c>
    51f6:	ac 01       	movw	r20, r24
    51f8:	cb 01       	movw	r24, r22
    51fa:	da 01       	movw	r26, r20
    51fc:	30 e0       	ldi	r19, 0x00	; 0
    51fe:	ed 91       	ld	r30, X+
    5200:	fc 91       	ld	r31, X
    5202:	e2 0f       	add	r30, r18
    5204:	f3 1f       	adc	r31, r19
    5206:	10 82       	st	Z, r1
    5208:	4c 01       	movw	r8, r24
    520a:	b2 e0       	ldi	r27, 0x02	; 2
    520c:	8b 0e       	add	r8, r27
    520e:	91 1c       	adc	r9, r1
    5210:	fc 01       	movw	r30, r24
    5212:	22 81       	ldd	r18, Z+2	; 0x02
    5214:	2d 32       	cpi	r18, 0x2D	; 45
    5216:	09 f4       	brne	.+2      	; 0x521a <ParseReceived+0xb90>
    5218:	29 c6       	rjmp	.+3154   	; 0x5e6c <ParseReceived+0x17e2>
    521a:	f4 01       	movw	r30, r8
    521c:	61 e0       	ldi	r22, 0x01	; 1
    521e:	70 e0       	ldi	r23, 0x00	; 0
    5220:	c1 2c       	mov	r12, r1
    5222:	80 ed       	ldi	r24, 0xD0	; 208
    5224:	82 0f       	add	r24, r18
    5226:	8a 30       	cpi	r24, 0x0A	; 10
    5228:	08 f0       	brcs	.+2      	; 0x522c <ParseReceived+0xba2>
    522a:	72 c6       	rjmp	.+3300   	; 0x5f10 <ParseReceived+0x1886>
    522c:	31 96       	adiw	r30, 0x01	; 1
    522e:	bc 2c       	mov	r11, r12
    5230:	80 e0       	ldi	r24, 0x00	; 0
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	dc 01       	movw	r26, r24
    5236:	ac 01       	movw	r20, r24
    5238:	bd 01       	movw	r22, r26
    523a:	44 0f       	add	r20, r20
    523c:	55 1f       	adc	r21, r21
    523e:	66 1f       	adc	r22, r22
    5240:	77 1f       	adc	r23, r23
    5242:	db 01       	movw	r26, r22
    5244:	ca 01       	movw	r24, r20
    5246:	88 0f       	add	r24, r24
    5248:	99 1f       	adc	r25, r25
    524a:	aa 1f       	adc	r26, r26
    524c:	bb 1f       	adc	r27, r27
    524e:	88 0f       	add	r24, r24
    5250:	99 1f       	adc	r25, r25
    5252:	aa 1f       	adc	r26, r26
    5254:	bb 1f       	adc	r27, r27
    5256:	84 0f       	add	r24, r20
    5258:	95 1f       	adc	r25, r21
    525a:	a6 1f       	adc	r26, r22
    525c:	b7 1f       	adc	r27, r23
    525e:	42 2f       	mov	r20, r18
    5260:	50 e0       	ldi	r21, 0x00	; 0
    5262:	40 53       	subi	r20, 0x30	; 48
    5264:	51 09       	sbc	r21, r1
    5266:	66 27       	eor	r22, r22
    5268:	57 fd       	sbrc	r21, 7
    526a:	60 95       	com	r22
    526c:	76 2f       	mov	r23, r22
    526e:	84 0f       	add	r24, r20
    5270:	95 1f       	adc	r25, r21
    5272:	a6 1f       	adc	r26, r22
    5274:	b7 1f       	adc	r27, r23
    5276:	b3 94       	inc	r11
    5278:	21 91       	ld	r18, Z+
    527a:	30 ed       	ldi	r19, 0xD0	; 208
    527c:	32 0f       	add	r19, r18
    527e:	3a 30       	cpi	r19, 0x0A	; 10
    5280:	d0 f2       	brcs	.-76     	; 0x5236 <ParseReceived+0xbac>
    5282:	6b 2d       	mov	r22, r11
    5284:	70 e0       	ldi	r23, 0x00	; 0
    5286:	6f 5f       	subi	r22, 0xFF	; 255
    5288:	7f 4f       	sbci	r23, 0xFF	; 255
    528a:	cc 20       	and	r12, r12
    528c:	39 f0       	breq	.+14     	; 0x529c <ParseReceived+0xc12>
    528e:	b0 95       	com	r27
    5290:	a0 95       	com	r26
    5292:	90 95       	com	r25
    5294:	81 95       	neg	r24
    5296:	9f 4f       	sbci	r25, 0xFF	; 255
    5298:	af 4f       	sbci	r26, 0xFF	; 255
    529a:	bf 4f       	sbci	r27, 0xFF	; 255
    529c:	f8 01       	movw	r30, r16
    529e:	e2 50       	subi	r30, 0x02	; 2
    52a0:	ff 4f       	sbci	r31, 0xFF	; 255
    52a2:	80 83       	st	Z, r24
    52a4:	86 0e       	add	r8, r22
    52a6:	97 1e       	adc	r9, r23
    52a8:	f4 01       	movw	r30, r8
    52aa:	20 81       	ld	r18, Z
    52ac:	2d 32       	cpi	r18, 0x2D	; 45
    52ae:	09 f4       	brne	.+2      	; 0x52b2 <ParseReceived+0xc28>
    52b0:	d4 c5       	rjmp	.+2984   	; 0x5e5a <ParseReceived+0x17d0>
    52b2:	f4 01       	movw	r30, r8
    52b4:	61 e0       	ldi	r22, 0x01	; 1
    52b6:	70 e0       	ldi	r23, 0x00	; 0
    52b8:	c1 2c       	mov	r12, r1
    52ba:	80 ed       	ldi	r24, 0xD0	; 208
    52bc:	82 0f       	add	r24, r18
    52be:	8a 30       	cpi	r24, 0x0A	; 10
    52c0:	08 f0       	brcs	.+2      	; 0x52c4 <ParseReceived+0xc3a>
    52c2:	22 c6       	rjmp	.+3140   	; 0x5f08 <ParseReceived+0x187e>
    52c4:	31 96       	adiw	r30, 0x01	; 1
    52c6:	bc 2c       	mov	r11, r12
    52c8:	80 e0       	ldi	r24, 0x00	; 0
    52ca:	90 e0       	ldi	r25, 0x00	; 0
    52cc:	dc 01       	movw	r26, r24
    52ce:	ac 01       	movw	r20, r24
    52d0:	bd 01       	movw	r22, r26
    52d2:	44 0f       	add	r20, r20
    52d4:	55 1f       	adc	r21, r21
    52d6:	66 1f       	adc	r22, r22
    52d8:	77 1f       	adc	r23, r23
    52da:	db 01       	movw	r26, r22
    52dc:	ca 01       	movw	r24, r20
    52de:	88 0f       	add	r24, r24
    52e0:	99 1f       	adc	r25, r25
    52e2:	aa 1f       	adc	r26, r26
    52e4:	bb 1f       	adc	r27, r27
    52e6:	88 0f       	add	r24, r24
    52e8:	99 1f       	adc	r25, r25
    52ea:	aa 1f       	adc	r26, r26
    52ec:	bb 1f       	adc	r27, r27
    52ee:	84 0f       	add	r24, r20
    52f0:	95 1f       	adc	r25, r21
    52f2:	a6 1f       	adc	r26, r22
    52f4:	b7 1f       	adc	r27, r23
    52f6:	42 2f       	mov	r20, r18
    52f8:	50 e0       	ldi	r21, 0x00	; 0
    52fa:	40 53       	subi	r20, 0x30	; 48
    52fc:	51 09       	sbc	r21, r1
    52fe:	66 27       	eor	r22, r22
    5300:	57 fd       	sbrc	r21, 7
    5302:	60 95       	com	r22
    5304:	76 2f       	mov	r23, r22
    5306:	84 0f       	add	r24, r20
    5308:	95 1f       	adc	r25, r21
    530a:	a6 1f       	adc	r26, r22
    530c:	b7 1f       	adc	r27, r23
    530e:	b3 94       	inc	r11
    5310:	21 91       	ld	r18, Z+
    5312:	30 ed       	ldi	r19, 0xD0	; 208
    5314:	32 0f       	add	r19, r18
    5316:	3a 30       	cpi	r19, 0x0A	; 10
    5318:	d0 f2       	brcs	.-76     	; 0x52ce <ParseReceived+0xc44>
    531a:	6b 2d       	mov	r22, r11
    531c:	70 e0       	ldi	r23, 0x00	; 0
    531e:	6f 5f       	subi	r22, 0xFF	; 255
    5320:	7f 4f       	sbci	r23, 0xFF	; 255
    5322:	cc 20       	and	r12, r12
    5324:	39 f0       	breq	.+14     	; 0x5334 <ParseReceived+0xcaa>
    5326:	b0 95       	com	r27
    5328:	a0 95       	com	r26
    532a:	90 95       	com	r25
    532c:	81 95       	neg	r24
    532e:	9f 4f       	sbci	r25, 0xFF	; 255
    5330:	af 4f       	sbci	r26, 0xFF	; 255
    5332:	bf 4f       	sbci	r27, 0xFF	; 255
    5334:	f8 01       	movw	r30, r16
    5336:	e3 50       	subi	r30, 0x03	; 3
    5338:	ff 4f       	sbci	r31, 0xFF	; 255
    533a:	80 83       	st	Z, r24
    533c:	86 0e       	add	r8, r22
    533e:	97 1e       	adc	r9, r23
    5340:	f4 01       	movw	r30, r8
    5342:	20 81       	ld	r18, Z
    5344:	2d 32       	cpi	r18, 0x2D	; 45
    5346:	09 f4       	brne	.+2      	; 0x534a <ParseReceived+0xcc0>
    5348:	7f c5       	rjmp	.+2814   	; 0x5e48 <ParseReceived+0x17be>
    534a:	f4 01       	movw	r30, r8
    534c:	61 e0       	ldi	r22, 0x01	; 1
    534e:	70 e0       	ldi	r23, 0x00	; 0
    5350:	c1 2c       	mov	r12, r1
    5352:	80 ed       	ldi	r24, 0xD0	; 208
    5354:	82 0f       	add	r24, r18
    5356:	8a 30       	cpi	r24, 0x0A	; 10
    5358:	08 f0       	brcs	.+2      	; 0x535c <ParseReceived+0xcd2>
    535a:	d2 c5       	rjmp	.+2980   	; 0x5f00 <ParseReceived+0x1876>
    535c:	31 96       	adiw	r30, 0x01	; 1
    535e:	bc 2c       	mov	r11, r12
    5360:	80 e0       	ldi	r24, 0x00	; 0
    5362:	90 e0       	ldi	r25, 0x00	; 0
    5364:	dc 01       	movw	r26, r24
    5366:	ac 01       	movw	r20, r24
    5368:	bd 01       	movw	r22, r26
    536a:	44 0f       	add	r20, r20
    536c:	55 1f       	adc	r21, r21
    536e:	66 1f       	adc	r22, r22
    5370:	77 1f       	adc	r23, r23
    5372:	db 01       	movw	r26, r22
    5374:	ca 01       	movw	r24, r20
    5376:	88 0f       	add	r24, r24
    5378:	99 1f       	adc	r25, r25
    537a:	aa 1f       	adc	r26, r26
    537c:	bb 1f       	adc	r27, r27
    537e:	88 0f       	add	r24, r24
    5380:	99 1f       	adc	r25, r25
    5382:	aa 1f       	adc	r26, r26
    5384:	bb 1f       	adc	r27, r27
    5386:	84 0f       	add	r24, r20
    5388:	95 1f       	adc	r25, r21
    538a:	a6 1f       	adc	r26, r22
    538c:	b7 1f       	adc	r27, r23
    538e:	42 2f       	mov	r20, r18
    5390:	50 e0       	ldi	r21, 0x00	; 0
    5392:	40 53       	subi	r20, 0x30	; 48
    5394:	51 09       	sbc	r21, r1
    5396:	66 27       	eor	r22, r22
    5398:	57 fd       	sbrc	r21, 7
    539a:	60 95       	com	r22
    539c:	76 2f       	mov	r23, r22
    539e:	84 0f       	add	r24, r20
    53a0:	95 1f       	adc	r25, r21
    53a2:	a6 1f       	adc	r26, r22
    53a4:	b7 1f       	adc	r27, r23
    53a6:	b3 94       	inc	r11
    53a8:	21 91       	ld	r18, Z+
    53aa:	30 ed       	ldi	r19, 0xD0	; 208
    53ac:	32 0f       	add	r19, r18
    53ae:	3a 30       	cpi	r19, 0x0A	; 10
    53b0:	d0 f2       	brcs	.-76     	; 0x5366 <ParseReceived+0xcdc>
    53b2:	6b 2d       	mov	r22, r11
    53b4:	70 e0       	ldi	r23, 0x00	; 0
    53b6:	6f 5f       	subi	r22, 0xFF	; 255
    53b8:	7f 4f       	sbci	r23, 0xFF	; 255
    53ba:	cc 20       	and	r12, r12
    53bc:	39 f0       	breq	.+14     	; 0x53cc <ParseReceived+0xd42>
    53be:	b0 95       	com	r27
    53c0:	a0 95       	com	r26
    53c2:	90 95       	com	r25
    53c4:	81 95       	neg	r24
    53c6:	9f 4f       	sbci	r25, 0xFF	; 255
    53c8:	af 4f       	sbci	r26, 0xFF	; 255
    53ca:	bf 4f       	sbci	r27, 0xFF	; 255
    53cc:	f8 01       	movw	r30, r16
    53ce:	e1 50       	subi	r30, 0x01	; 1
    53d0:	ff 4f       	sbci	r31, 0xFF	; 255
    53d2:	80 83       	st	Z, r24
    53d4:	f4 01       	movw	r30, r8
    53d6:	e6 0f       	add	r30, r22
    53d8:	f7 1f       	adc	r31, r23
    53da:	20 81       	ld	r18, Z
    53dc:	2d 32       	cpi	r18, 0x2D	; 45
    53de:	09 f4       	brne	.+2      	; 0x53e2 <ParseReceived+0xd58>
    53e0:	2e c5       	rjmp	.+2652   	; 0x5e3e <ParseReceived+0x17b4>
    53e2:	d1 2c       	mov	r13, r1
    53e4:	80 ed       	ldi	r24, 0xD0	; 208
    53e6:	82 0f       	add	r24, r18
    53e8:	8a 30       	cpi	r24, 0x0A	; 10
    53ea:	08 f0       	brcs	.+2      	; 0x53ee <ParseReceived+0xd64>
    53ec:	85 c5       	rjmp	.+2826   	; 0x5ef8 <ParseReceived+0x186e>
    53ee:	31 96       	adiw	r30, 0x01	; 1
    53f0:	80 e0       	ldi	r24, 0x00	; 0
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	dc 01       	movw	r26, r24
    53f6:	ac 01       	movw	r20, r24
    53f8:	bd 01       	movw	r22, r26
    53fa:	44 0f       	add	r20, r20
    53fc:	55 1f       	adc	r21, r21
    53fe:	66 1f       	adc	r22, r22
    5400:	77 1f       	adc	r23, r23
    5402:	db 01       	movw	r26, r22
    5404:	ca 01       	movw	r24, r20
    5406:	88 0f       	add	r24, r24
    5408:	99 1f       	adc	r25, r25
    540a:	aa 1f       	adc	r26, r26
    540c:	bb 1f       	adc	r27, r27
    540e:	88 0f       	add	r24, r24
    5410:	99 1f       	adc	r25, r25
    5412:	aa 1f       	adc	r26, r26
    5414:	bb 1f       	adc	r27, r27
    5416:	84 0f       	add	r24, r20
    5418:	95 1f       	adc	r25, r21
    541a:	a6 1f       	adc	r26, r22
    541c:	b7 1f       	adc	r27, r23
    541e:	42 2f       	mov	r20, r18
    5420:	50 e0       	ldi	r21, 0x00	; 0
    5422:	40 53       	subi	r20, 0x30	; 48
    5424:	51 09       	sbc	r21, r1
    5426:	66 27       	eor	r22, r22
    5428:	57 fd       	sbrc	r21, 7
    542a:	60 95       	com	r22
    542c:	76 2f       	mov	r23, r22
    542e:	84 0f       	add	r24, r20
    5430:	95 1f       	adc	r25, r21
    5432:	a6 1f       	adc	r26, r22
    5434:	b7 1f       	adc	r27, r23
    5436:	21 91       	ld	r18, Z+
    5438:	30 ed       	ldi	r19, 0xD0	; 208
    543a:	32 0f       	add	r19, r18
    543c:	3a 30       	cpi	r19, 0x0A	; 10
    543e:	d8 f2       	brcs	.-74     	; 0x53f6 <ParseReceived+0xd6c>
    5440:	dd 20       	and	r13, r13
    5442:	39 f0       	breq	.+14     	; 0x5452 <ParseReceived+0xdc8>
    5444:	b0 95       	com	r27
    5446:	a0 95       	com	r26
    5448:	90 95       	com	r25
    544a:	81 95       	neg	r24
    544c:	9f 4f       	sbci	r25, 0xFF	; 255
    544e:	af 4f       	sbci	r26, 0xFF	; 255
    5450:	bf 4f       	sbci	r27, 0xFF	; 255
    5452:	f8 01       	movw	r30, r16
    5454:	f3 95       	inc	r31
    5456:	80 83       	st	Z, r24
    5458:	9f cb       	rjmp	.-2242   	; 0x4b98 <ParseReceived+0x50e>
    545a:	6f ea       	ldi	r22, 0xAF	; 175
    545c:	72 e2       	ldi	r23, 0x22	; 34
    545e:	c7 01       	movw	r24, r14
    5460:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    5464:	89 2b       	or	r24, r25
    5466:	29 f4       	brne	.+10     	; 0x5472 <ParseReceived+0xde8>
    5468:	f8 01       	movw	r30, r16
    546a:	14 82       	std	Z+4, r1	; 0x04
    546c:	15 82       	std	Z+5, r1	; 0x05
    546e:	16 82       	std	Z+6, r1	; 0x06
    5470:	17 82       	std	Z+7, r1	; 0x07
    5472:	64 eb       	ldi	r22, 0xB4	; 180
    5474:	72 e2       	ldi	r23, 0x22	; 34
    5476:	c7 01       	movw	r24, r14
    5478:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    547c:	89 2b       	or	r24, r25
    547e:	09 f0       	breq	.+2      	; 0x5482 <ParseReceived+0xdf8>
    5480:	15 cb       	rjmp	.-2518   	; 0x4aac <ParseReceived+0x422>
    5482:	d8 01       	movw	r26, r16
    5484:	14 96       	adiw	r26, 0x04	; 4
    5486:	1d 92       	st	X+, r1
    5488:	1d 92       	st	X+, r1
    548a:	1d 92       	st	X+, r1
    548c:	1c 92       	st	X, r1
    548e:	17 97       	sbiw	r26, 0x07	; 7
    5490:	f8 01       	movw	r30, r16
    5492:	ee 5d       	subi	r30, 0xDE	; 222
    5494:	fe 4f       	sbci	r31, 0xFE	; 254
    5496:	60 81       	ld	r22, Z
    5498:	b5 e2       	ldi	r27, 0x25	; 37
    549a:	6b 02       	muls	r22, r27
    549c:	b0 01       	movw	r22, r0
    549e:	11 24       	eor	r1, r1
    54a0:	f8 01       	movw	r30, r16
    54a2:	e6 0f       	add	r30, r22
    54a4:	f7 1f       	adc	r31, r23
    54a6:	12 8e       	std	Z+26, r1	; 0x1a
    54a8:	14 8e       	std	Z+28, r1	; 0x1c
    54aa:	15 ae       	std	Z+61, r1	; 0x3d
    54ac:	14 ae       	std	Z+60, r1	; 0x3c
    54ae:	66 5e       	subi	r22, 0xE6	; 230
    54b0:	7f 4f       	sbci	r23, 0xFF	; 255
    54b2:	60 0f       	add	r22, r16
    54b4:	71 1f       	adc	r23, r17
    54b6:	c8 01       	movw	r24, r16
    54b8:	0e 94 c6 3b 	call	0x778c	; 0x778c <ESP8266_Callback_ClientConnectionError>
    54bc:	f7 ca       	rjmp	.-2578   	; 0x4aac <ParseReceived+0x422>
    54be:	6f ea       	ldi	r22, 0xAF	; 175
    54c0:	72 e2       	ldi	r23, 0x22	; 34
    54c2:	c7 01       	movw	r24, r14
    54c4:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    54c8:	89 2b       	or	r24, r25
    54ca:	09 f0       	breq	.+2      	; 0x54ce <ParseReceived+0xe44>
    54cc:	11 cb       	rjmp	.-2526   	; 0x4af0 <ParseReceived+0x466>
    54ce:	8d e1       	ldi	r24, 0x1D	; 29
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	a0 e0       	ldi	r26, 0x00	; 0
    54d4:	b0 e0       	ldi	r27, 0x00	; 0
    54d6:	f8 01       	movw	r30, r16
    54d8:	84 83       	std	Z+4, r24	; 0x04
    54da:	95 83       	std	Z+5, r25	; 0x05
    54dc:	a6 83       	std	Z+6, r26	; 0x06
    54de:	b7 83       	std	Z+7, r27	; 0x07
    54e0:	e3 5d       	subi	r30, 0xD3	; 211
    54e2:	fe 4f       	sbci	r31, 0xFE	; 254
    54e4:	81 81       	ldd	r24, Z+1	; 0x01
    54e6:	81 60       	ori	r24, 0x01	; 1
    54e8:	81 83       	std	Z+1, r24	; 0x01
    54ea:	80 ec       	ldi	r24, 0xC0	; 192
    54ec:	93 e2       	ldi	r25, 0x23	; 35
    54ee:	d8 01       	movw	r26, r16
    54f0:	18 96       	adiw	r26, 0x08	; 8
    54f2:	8d 93       	st	X+, r24
    54f4:	9c 93       	st	X, r25
    54f6:	19 97       	sbiw	r26, 0x09	; 9
    54f8:	d9 ca       	rjmp	.-2638   	; 0x4aac <ParseReceived+0x422>
    54fa:	6c eb       	ldi	r22, 0xBC	; 188
    54fc:	72 e2       	ldi	r23, 0x22	; 34
    54fe:	c7 01       	movw	r24, r14
    5500:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    5504:	89 2b       	or	r24, r25
    5506:	09 f0       	breq	.+2      	; 0x550a <ParseReceived+0xe80>
    5508:	d1 ca       	rjmp	.-2654   	; 0x4aac <ParseReceived+0x422>
    550a:	4e cb       	rjmp	.-2404   	; 0x4ba8 <ParseReceived+0x51e>
    550c:	6f ea       	ldi	r22, 0xAF	; 175
    550e:	72 e2       	ldi	r23, 0x22	; 34
    5510:	c7 01       	movw	r24, r14
    5512:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    5516:	89 2b       	or	r24, r25
    5518:	09 f0       	breq	.+2      	; 0x551c <ParseReceived+0xe92>
    551a:	ea ca       	rjmp	.-2604   	; 0x4af0 <ParseReceived+0x466>
    551c:	d8 01       	movw	r26, r16
    551e:	14 96       	adiw	r26, 0x04	; 4
    5520:	1d 92       	st	X+, r1
    5522:	1d 92       	st	X+, r1
    5524:	1d 92       	st	X+, r1
    5526:	1c 92       	st	X, r1
    5528:	17 97       	sbiw	r26, 0x07	; 7
    552a:	f8 01       	movw	r30, r16
    552c:	e9 50       	subi	r30, 0x09	; 9
    552e:	ff 4f       	sbci	r31, 0xFF	; 255
    5530:	80 81       	ld	r24, Z
    5532:	31 96       	adiw	r30, 0x01	; 1
    5534:	80 83       	st	Z, r24
    5536:	ba ca       	rjmp	.-2700   	; 0x4aac <ParseReceived+0x422>
    5538:	47 e0       	ldi	r20, 0x07	; 7
    553a:	50 e0       	ldi	r21, 0x00	; 0
    553c:	66 e8       	ldi	r22, 0x86	; 134
    553e:	73 e2       	ldi	r23, 0x23	; 35
    5540:	c7 01       	movw	r24, r14
    5542:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    5546:	89 2b       	or	r24, r25
    5548:	71 f4       	brne	.+28     	; 0x5566 <ParseReceived+0xedc>
    554a:	8f e7       	ldi	r24, 0x7F	; 127
    554c:	93 e2       	ldi	r25, 0x23	; 35
    554e:	d8 01       	movw	r26, r16
    5550:	18 96       	adiw	r26, 0x08	; 8
    5552:	8d 93       	st	X+, r24
    5554:	9c 93       	st	X, r25
    5556:	19 97       	sbiw	r26, 0x09	; 9
    5558:	f7 01       	movw	r30, r14
    555a:	87 81       	ldd	r24, Z+7	; 0x07
    555c:	80 53       	subi	r24, 0x30	; 48
    555e:	f8 01       	movw	r30, r16
    5560:	ef 5d       	subi	r30, 0xDF	; 223
    5562:	fe 4f       	sbci	r31, 0xFE	; 254
    5564:	80 83       	st	Z, r24
    5566:	6f ea       	ldi	r22, 0xAF	; 175
    5568:	72 e2       	ldi	r23, 0x22	; 34
    556a:	c7 01       	movw	r24, r14
    556c:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    5570:	89 2b       	or	r24, r25
    5572:	39 f4       	brne	.+14     	; 0x5582 <ParseReceived+0xef8>
    5574:	d8 01       	movw	r26, r16
    5576:	14 96       	adiw	r26, 0x04	; 4
    5578:	1d 92       	st	X+, r1
    557a:	1d 92       	st	X+, r1
    557c:	1d 92       	st	X+, r1
    557e:	1c 92       	st	X, r1
    5580:	17 97       	sbiw	r26, 0x07	; 7
    5582:	6f e7       	ldi	r22, 0x7F	; 127
    5584:	73 e2       	ldi	r23, 0x23	; 35
    5586:	c7 01       	movw	r24, r14
    5588:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    558c:	89 2b       	or	r24, r25
    558e:	09 f0       	breq	.+2      	; 0x5592 <ParseReceived+0xf08>
    5590:	8d ca       	rjmp	.-2790   	; 0x4aac <ParseReceived+0x422>
    5592:	f8 01       	movw	r30, r16
    5594:	14 82       	std	Z+4, r1	; 0x04
    5596:	15 82       	std	Z+5, r1	; 0x05
    5598:	16 82       	std	Z+6, r1	; 0x06
    559a:	17 82       	std	Z+7, r1	; 0x07
    559c:	c8 01       	movw	r24, r16
    559e:	0e 94 1e 3b 	call	0x763c	; 0x763c <ESP8266_Callback_WifiConnectFailed>
    55a2:	84 ca       	rjmp	.-2808   	; 0x4aac <ParseReceived+0x422>
    55a4:	47 e0       	ldi	r20, 0x07	; 7
    55a6:	50 e0       	ldi	r21, 0x00	; 0
    55a8:	62 ea       	ldi	r22, 0xA2	; 162
    55aa:	73 e2       	ldi	r23, 0x23	; 35
    55ac:	c7 01       	movw	r24, r14
    55ae:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    55b2:	89 2b       	or	r24, r25
    55b4:	09 f4       	brne	.+2      	; 0x55b8 <ParseReceived+0xf2e>
    55b6:	35 c1       	rjmp	.+618    	; 0x5822 <ParseReceived+0x1198>
    55b8:	6f ea       	ldi	r22, 0xAF	; 175
    55ba:	72 e2       	ldi	r23, 0x22	; 34
    55bc:	c7 01       	movw	r24, r14
    55be:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    55c2:	89 2b       	or	r24, r25
    55c4:	09 f0       	breq	.+2      	; 0x55c8 <ParseReceived+0xf3e>
    55c6:	94 ca       	rjmp	.-2776   	; 0x4af0 <ParseReceived+0x466>
    55c8:	d8 01       	movw	r26, r16
    55ca:	14 96       	adiw	r26, 0x04	; 4
    55cc:	1d 92       	st	X+, r1
    55ce:	1d 92       	st	X+, r1
    55d0:	1d 92       	st	X+, r1
    55d2:	1c 92       	st	X, r1
    55d4:	17 97       	sbiw	r26, 0x07	; 7
    55d6:	61 e5       	ldi	r22, 0x51	; 81
    55d8:	7d e2       	ldi	r23, 0x2D	; 45
    55da:	c8 01       	movw	r24, r16
    55dc:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <ESP8266_Callback_WifiDetected>
    55e0:	65 ca       	rjmp	.-2870   	; 0x4aac <ParseReceived+0x422>
    55e2:	46 e0       	ldi	r20, 0x06	; 6
    55e4:	50 e0       	ldi	r21, 0x00	; 0
    55e6:	69 eb       	ldi	r22, 0xB9	; 185
    55e8:	73 e2       	ldi	r23, 0x23	; 35
    55ea:	c7 01       	movw	r24, r14
    55ec:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    55f0:	89 2b       	or	r24, r25
    55f2:	09 f0       	breq	.+2      	; 0x55f6 <ParseReceived+0xf6c>
    55f4:	d1 ca       	rjmp	.-2654   	; 0x4b98 <ParseReceived+0x50e>
    55f6:	b7 01       	movw	r22, r14
    55f8:	c8 01       	movw	r24, r16
    55fa:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <ParseCIPSTA>
    55fe:	cc ca       	rjmp	.-2664   	; 0x4b98 <ParseReceived+0x50e>
    5600:	47 e0       	ldi	r20, 0x07	; 7
    5602:	50 e0       	ldi	r21, 0x00	; 0
    5604:	61 eb       	ldi	r22, 0xB1	; 177
    5606:	73 e2       	ldi	r23, 0x23	; 35
    5608:	c7 01       	movw	r24, r14
    560a:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    560e:	89 2b       	or	r24, r25
    5610:	09 f4       	brne	.+2      	; 0x5614 <ParseReceived+0xf8a>
    5612:	2b c1       	rjmp	.+598    	; 0x586a <ParseReceived+0x11e0>
    5614:	6f ea       	ldi	r22, 0xAF	; 175
    5616:	72 e2       	ldi	r23, 0x22	; 34
    5618:	c7 01       	movw	r24, r14
    561a:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    561e:	89 2b       	or	r24, r25
    5620:	09 f0       	breq	.+2      	; 0x5624 <ParseReceived+0xf9a>
    5622:	66 ca       	rjmp	.-2868   	; 0x4af0 <ParseReceived+0x466>
    5624:	d8 01       	movw	r26, r16
    5626:	14 96       	adiw	r26, 0x04	; 4
    5628:	1d 92       	st	X+, r1
    562a:	1d 92       	st	X+, r1
    562c:	1d 92       	st	X+, r1
    562e:	1c 92       	st	X, r1
    5630:	17 97       	sbiw	r26, 0x07	; 7
    5632:	c8 01       	movw	r24, r16
    5634:	0e 94 47 3b 	call	0x768e	; 0x768e <ESP8266_Callback_WifiIPSet>
    5638:	39 ca       	rjmp	.-2958   	; 0x4aac <ParseReceived+0x422>
    563a:	4b e0       	ldi	r20, 0x0B	; 11
    563c:	50 e0       	ldi	r21, 0x00	; 0
    563e:	6e e8       	ldi	r22, 0x8E	; 142
    5640:	73 e2       	ldi	r23, 0x23	; 35
    5642:	c7 01       	movw	r24, r14
    5644:	0e 94 9c 44 	call	0x8938	; 0x8938 <strncmp>
    5648:	6c 01       	movw	r12, r24
    564a:	00 97       	sbiw	r24, 0x00	; 0
    564c:	09 f0       	breq	.+2      	; 0x5650 <ParseReceived+0xfc6>
    564e:	a4 ca       	rjmp	.-2744   	; 0x4b98 <ParseReceived+0x50e>
    5650:	6a e9       	ldi	r22, 0x9A	; 154
    5652:	73 e2       	ldi	r23, 0x23	; 35
    5654:	c7 01       	movw	r24, r14
    5656:	0e 94 c4 44 	call	0x8988	; 0x8988 <strstr>
    565a:	89 2b       	or	r24, r25
    565c:	09 f4       	brne	.+2      	; 0x5660 <ParseReceived+0xfd6>
    565e:	9c ca       	rjmp	.-2760   	; 0x4b98 <ParseReceived+0x50e>
    5660:	d7 01       	movw	r26, r14
    5662:	8c 91       	ld	r24, X
    5664:	88 23       	and	r24, r24
    5666:	09 f4       	brne	.+2      	; 0x566a <ParseReceived+0xfe0>
    5668:	97 ca       	rjmp	.-2770   	; 0x4b98 <ParseReceived+0x50e>
    566a:	82 32       	cpi	r24, 0x22	; 34
    566c:	09 f4       	brne	.+2      	; 0x5670 <ParseReceived+0xfe6>
    566e:	25 c3       	rjmp	.+1610   	; 0x5cba <ParseReceived+0x1630>
    5670:	f7 01       	movw	r30, r14
    5672:	31 96       	adiw	r30, 0x01	; 1
    5674:	03 c0       	rjmp	.+6      	; 0x567c <ParseReceived+0xff2>
    5676:	82 32       	cpi	r24, 0x22	; 34
    5678:	09 f4       	brne	.+2      	; 0x567c <ParseReceived+0xff2>
    567a:	20 c3       	rjmp	.+1600   	; 0x5cbc <ParseReceived+0x1632>
    567c:	df 01       	movw	r26, r30
    567e:	81 91       	ld	r24, Z+
    5680:	81 11       	cpse	r24, r1
    5682:	f9 cf       	rjmp	.-14     	; 0x5676 <ParseReceived+0xfec>
    5684:	89 ca       	rjmp	.-2798   	; 0x4b98 <ParseReceived+0x50e>
    5686:	6f ea       	ldi	r22, 0xAF	; 175
    5688:	72 e2       	ldi	r23, 0x22	; 34
    568a:	c7 01       	movw	r24, r14
    568c:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    5690:	89 2b       	or	r24, r25
    5692:	39 f4       	brne	.+14     	; 0x56a2 <ParseReceived+0x1018>
    5694:	d8 01       	movw	r26, r16
    5696:	14 96       	adiw	r26, 0x04	; 4
    5698:	1d 92       	st	X+, r1
    569a:	1d 92       	st	X+, r1
    569c:	1d 92       	st	X+, r1
    569e:	1c 92       	st	X, r1
    56a0:	17 97       	sbiw	r26, 0x07	; 7
    56a2:	64 eb       	ldi	r22, 0xB4	; 180
    56a4:	72 e2       	ldi	r23, 0x22	; 34
    56a6:	c7 01       	movw	r24, r14
    56a8:	0e 94 8c 44 	call	0x8918	; 0x8918 <strcmp>
    56ac:	89 2b       	or	r24, r25
    56ae:	09 f0       	breq	.+2      	; 0x56b2 <ParseReceived+0x1028>
    56b0:	fd c9       	rjmp	.-3078   	; 0x4aac <ParseReceived+0x422>
    56b2:	7a ca       	rjmp	.-2828   	; 0x4ba8 <ParseReceived+0x51e>
    56b4:	21 81       	ldd	r18, Z+1	; 0x01
    56b6:	31 96       	adiw	r30, 0x01	; 1
    56b8:	22 24       	eor	r2, r2
    56ba:	23 94       	inc	r2
    56bc:	5f cb       	rjmp	.-2370   	; 0x4d7c <ParseReceived+0x6f2>
    56be:	81 14       	cp	r8, r1
    56c0:	91 04       	cpc	r9, r1
    56c2:	09 f4       	brne	.+2      	; 0x56c6 <ParseReceived+0x103c>
    56c4:	4c c9       	rjmp	.-3432   	; 0x495e <ParseReceived+0x2d4>
    56c6:	d4 01       	movw	r26, r8
    56c8:	8e 91       	ld	r24, -X
    56ca:	90 e0       	ldi	r25, 0x00	; 0
    56cc:	c0 97       	sbiw	r24, 0x30	; 48
    56ce:	25 e2       	ldi	r18, 0x25	; 37
    56d0:	28 9f       	mul	r18, r24
    56d2:	f0 01       	movw	r30, r0
    56d4:	29 9f       	mul	r18, r25
    56d6:	f0 0d       	add	r31, r0
    56d8:	11 24       	eor	r1, r1
    56da:	7a 96       	adiw	r30, 0x1a	; 26
    56dc:	e0 0f       	add	r30, r16
    56de:	f1 1f       	adc	r31, r17
    56e0:	81 e0       	ldi	r24, 0x01	; 1
    56e2:	80 83       	st	Z, r24
    56e4:	8c 91       	ld	r24, X
    56e6:	80 53       	subi	r24, 0x30	; 48
    56e8:	81 83       	std	Z+1, r24	; 0x01
    56ea:	82 81       	ldd	r24, Z+2	; 0x02
    56ec:	88 23       	and	r24, r24
    56ee:	f1 f0       	breq	.+60     	; 0x572c <ParseReceived+0x10a2>
    56f0:	d8 01       	movw	r26, r16
    56f2:	14 96       	adiw	r26, 0x04	; 4
    56f4:	4d 91       	ld	r20, X+
    56f6:	5d 91       	ld	r21, X+
    56f8:	6d 91       	ld	r22, X+
    56fa:	7c 91       	ld	r23, X
    56fc:	17 97       	sbiw	r26, 0x07	; 7
    56fe:	4a 30       	cpi	r20, 0x0A	; 10
    5700:	51 05       	cpc	r21, r1
    5702:	61 05       	cpc	r22, r1
    5704:	71 05       	cpc	r23, r1
    5706:	09 f4       	brne	.+2      	; 0x570a <ParseReceived+0x1080>
    5708:	72 c0       	rjmp	.+228    	; 0x57ee <ParseReceived+0x1164>
    570a:	bf 01       	movw	r22, r30
    570c:	c8 01       	movw	r24, r16
    570e:	0e 94 ab 3b 	call	0x7756	; 0x7756 <ESP8266_Callback_ClientConnectionConnected>
    5712:	2d c9       	rjmp	.-3494   	; 0x496e <ParseReceived+0x2e4>
    5714:	f8 01       	movw	r30, r16
    5716:	e3 5d       	subi	r30, 0xD3	; 211
    5718:	fe 4f       	sbci	r31, 0xFE	; 254
    571a:	81 81       	ldd	r24, Z+1	; 0x01
    571c:	88 60       	ori	r24, 0x08	; 8
    571e:	81 83       	std	Z+1, r24	; 0x01
    5720:	c8 01       	movw	r24, r16
    5722:	0e 94 2f 3b 	call	0x765e	; 0x765e <ESP8266_Callback_WifiGotIP>
    5726:	d7 c8       	rjmp	.-3666   	; 0x48d6 <ParseReceived+0x24c>
    5728:	13 a2       	std	Z+35, r1	; 0x23
    572a:	eb ca       	rjmp	.-2602   	; 0x4d02 <ParseReceived+0x678>
    572c:	bf 01       	movw	r22, r30
    572e:	c8 01       	movw	r24, r16
    5730:	0e 94 3e 23 	call	0x467c	; 0x467c <ESP8266_Callback_ServerConnectionActive>
    5734:	1c c9       	rjmp	.-3528   	; 0x496e <ParseReceived+0x2e4>
    5736:	c8 01       	movw	r24, r16
    5738:	0e 94 65 3b 	call	0x76ca	; 0x76ca <ESP8266_Callback_DHCPTimeout>
    573c:	cc c8       	rjmp	.-3688   	; 0x48d6 <ParseReceived+0x24c>
    573e:	c8 01       	movw	r24, r16
    5740:	0e 94 18 3c 	call	0x7830	; 0x7830 <ESP8266_Callback_ClientConnectionDataReceived>
    5744:	60 c8       	rjmp	.-3904   	; 0x4806 <ParseReceived+0x17c>
    5746:	c8 01       	movw	r24, r16
    5748:	0e 94 40 23 	call	0x4680	; 0x4680 <ESP8266_Callback_ServerConnectionDataReceived>
    574c:	a4 c8       	rjmp	.-3768   	; 0x4896 <ParseReceived+0x20c>
    574e:	46 a5       	ldd	r20, Z+46	; 0x2e
    5750:	57 a5       	ldd	r21, Z+47	; 0x2f
    5752:	b8 01       	movw	r22, r16
    5754:	66 5e       	subi	r22, 0xE6	; 230
    5756:	7f 4f       	sbci	r23, 0xFF	; 255
    5758:	c8 01       	movw	r24, r16
    575a:	0e 94 18 3c 	call	0x7830	; 0x7830 <ESP8266_Callback_ClientConnectionDataReceived>
    575e:	0e c8       	rjmp	.-4068   	; 0x477c <ParseReceived+0xf2>
    5760:	c8 01       	movw	r24, r16
    5762:	0e 94 18 3c 	call	0x7830	; 0x7830 <ESP8266_Callback_ClientConnectionDataReceived>
    5766:	72 c8       	rjmp	.-3868   	; 0x484c <ParseReceived+0x1c2>
    5768:	c8 01       	movw	r24, r16
    576a:	0e 94 18 3c 	call	0x7830	; 0x7830 <ESP8266_Callback_ClientConnectionDataReceived>
    576e:	28 c8       	rjmp	.-4016   	; 0x47c0 <ParseReceived+0x136>
    5770:	32 2c       	mov	r3, r2
    5772:	80 e0       	ldi	r24, 0x00	; 0
    5774:	90 e0       	ldi	r25, 0x00	; 0
    5776:	dc 01       	movw	r26, r24
    5778:	31 cb       	rjmp	.-2462   	; 0x4ddc <ParseReceived+0x752>
    577a:	ba e0       	ldi	r27, 0x0A	; 10
    577c:	cb 16       	cp	r12, r27
    577e:	d1 04       	cpc	r13, r1
    5780:	08 f4       	brcc	.+2      	; 0x5784 <ParseReceived+0x10fa>
    5782:	f5 c8       	rjmp	.-3606   	; 0x496e <ParseReceived+0x2e4>
    5784:	46 01       	movw	r8, r12
    5786:	e9 e0       	ldi	r30, 0x09	; 9
    5788:	8e 1a       	sub	r8, r30
    578a:	91 08       	sbc	r9, r1
    578c:	8e 0c       	add	r8, r14
    578e:	9f 1c       	adc	r9, r15
    5790:	49 e0       	ldi	r20, 0x09	; 9
    5792:	50 e0       	ldi	r21, 0x00	; 0
    5794:	6c e6       	ldi	r22, 0x6C	; 108
    5796:	73 e2       	ldi	r23, 0x23	; 35
    5798:	c4 01       	movw	r24, r8
    579a:	0e 94 76 44 	call	0x88ec	; 0x88ec <memcmp>
    579e:	89 2b       	or	r24, r25
    57a0:	09 f4       	brne	.+2      	; 0x57a4 <ParseReceived+0x111a>
    57a2:	3f c2       	rjmp	.+1150   	; 0x5c22 <ParseReceived+0x1598>
    57a4:	b1 e1       	ldi	r27, 0x11	; 17
    57a6:	cb 16       	cp	r12, r27
    57a8:	d1 04       	cpc	r13, r1
    57aa:	08 f4       	brcc	.+2      	; 0x57ae <ParseReceived+0x1124>
    57ac:	e0 c8       	rjmp	.-3648   	; 0x496e <ParseReceived+0x2e4>
    57ae:	66 e7       	ldi	r22, 0x76	; 118
    57b0:	73 e2       	ldi	r23, 0x23	; 35
    57b2:	c6 01       	movw	r24, r12
    57b4:	0f 97       	sbiw	r24, 0x0f	; 15
    57b6:	8e 0d       	add	r24, r14
    57b8:	9f 1d       	adc	r25, r15
    57ba:	0e 94 c4 44 	call	0x8988	; 0x8988 <strstr>
    57be:	00 97       	sbiw	r24, 0x00	; 0
    57c0:	09 f4       	brne	.+2      	; 0x57c4 <ParseReceived+0x113a>
    57c2:	d5 c8       	rjmp	.-3670   	; 0x496e <ParseReceived+0x2e4>
    57c4:	dc 01       	movw	r26, r24
    57c6:	8e 91       	ld	r24, -X
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	c0 97       	sbiw	r24, 0x30	; 48
    57cc:	25 e2       	ldi	r18, 0x25	; 37
    57ce:	28 9f       	mul	r18, r24
    57d0:	f0 01       	movw	r30, r0
    57d2:	29 9f       	mul	r18, r25
    57d4:	f0 0d       	add	r31, r0
    57d6:	11 24       	eor	r1, r1
    57d8:	7a 96       	adiw	r30, 0x1a	; 26
    57da:	e0 0f       	add	r30, r16
    57dc:	f1 1f       	adc	r31, r17
    57de:	10 82       	st	Z, r1
    57e0:	12 82       	std	Z+2, r1	; 0x02
    57e2:	13 a2       	std	Z+35, r1	; 0x23
    57e4:	12 a2       	std	Z+34, r1	; 0x22
    57e6:	8c 91       	ld	r24, X
    57e8:	80 53       	subi	r24, 0x30	; 48
    57ea:	81 83       	std	Z+1, r24	; 0x01
    57ec:	c0 c8       	rjmp	.-3712   	; 0x496e <ParseReceived+0x2e4>
    57ee:	14 96       	adiw	r26, 0x04	; 4
    57f0:	1d 92       	st	X+, r1
    57f2:	1d 92       	st	X+, r1
    57f4:	1d 92       	st	X+, r1
    57f6:	1c 92       	st	X, r1
    57f8:	17 97       	sbiw	r26, 0x07	; 7
    57fa:	87 cf       	rjmp	.-242    	; 0x570a <ParseReceived+0x1080>
    57fc:	31 81       	ldd	r19, Z+1	; 0x01
    57fe:	31 96       	adiw	r30, 0x01	; 1
    5800:	21 e0       	ldi	r18, 0x01	; 1
    5802:	1b cb       	rjmp	.-2506   	; 0x4e3a <ParseReceived+0x7b0>
    5804:	f7 01       	movw	r30, r14
    5806:	38 96       	adiw	r30, 0x08	; 8
    5808:	d7 01       	movw	r26, r14
    580a:	18 96       	adiw	r26, 0x08	; 8
    580c:	2c 91       	ld	r18, X
    580e:	a9 e0       	ldi	r26, 0x09	; 9
    5810:	2a 2e       	mov	r2, r26
    5812:	31 2c       	mov	r3, r1
    5814:	b9 e0       	ldi	r27, 0x09	; 9
    5816:	4b 2e       	mov	r4, r27
    5818:	51 2c       	mov	r5, r1
    581a:	61 2c       	mov	r6, r1
    581c:	71 2c       	mov	r7, r1
    581e:	61 e0       	ldi	r22, 0x01	; 1
    5820:	10 ca       	rjmp	.-3040   	; 0x4c42 <ParseReceived+0x5b8>
    5822:	80 91 91 2e 	lds	r24, 0x2E91
    5826:	85 30       	cpi	r24, 0x05	; 5
    5828:	08 f0       	brcs	.+2      	; 0x582c <ParseReceived+0x11a2>
    582a:	c6 ce       	rjmp	.-628    	; 0x55b8 <ParseReceived+0xf2e>
    582c:	d7 01       	movw	r26, r14
    582e:	17 96       	adiw	r26, 0x07	; 7
    5830:	8c 91       	ld	r24, X
    5832:	88 32       	cpi	r24, 0x28	; 40
    5834:	09 f4       	brne	.+2      	; 0x5838 <ParseReceived+0x11ae>
    5836:	3d c3       	rjmp	.+1658   	; 0x5eb2 <ParseReceived+0x1828>
    5838:	87 e0       	ldi	r24, 0x07	; 7
    583a:	90 e0       	ldi	r25, 0x00	; 0
    583c:	6d ef       	ldi	r22, 0xFD	; 253
    583e:	74 e2       	ldi	r23, 0x24	; 36
    5840:	8e 0d       	add	r24, r14
    5842:	9f 1d       	adc	r25, r15
    5844:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    5848:	00 97       	sbiw	r24, 0x00	; 0
    584a:	09 f4       	brne	.+2      	; 0x584e <ParseReceived+0x11c4>
    584c:	0e c2       	rjmp	.+1052   	; 0x5c6a <ParseReceived+0x15e0>
    584e:	40 e0       	ldi	r20, 0x00	; 0
    5850:	dd 24       	eor	r13, r13
    5852:	d3 94       	inc	r13
    5854:	d4 0e       	add	r13, r20
    5856:	50 e0       	ldi	r21, 0x00	; 0
    5858:	47 30       	cpi	r20, 0x07	; 7
    585a:	51 05       	cpc	r21, r1
    585c:	08 f0       	brcs	.+2      	; 0x5860 <ParseReceived+0x11d6>
    585e:	58 c0       	rjmp	.+176    	; 0x5910 <ParseReceived+0x1286>
    5860:	fa 01       	movw	r30, r20
    5862:	e0 5e       	subi	r30, 0xE0	; 224
    5864:	fe 4f       	sbci	r31, 0xFE	; 254
    5866:	0c 94 40 42 	jmp	0x8480	; 0x8480 <__tablejump2__>
    586a:	b7 01       	movw	r22, r14
    586c:	c8 01       	movw	r24, r16
    586e:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <ParseCIPSTA>
    5872:	d0 ce       	rjmp	.-608    	; 0x5614 <ParseReceived+0xf8a>
    5874:	20 91 91 2e 	lds	r18, 0x2E91
    5878:	82 2e       	mov	r8, r18
    587a:	91 2c       	mov	r9, r1
    587c:	dc 01       	movw	r26, r24
    587e:	2c 91       	ld	r18, X
    5880:	2d 32       	cpi	r18, 0x2D	; 45
    5882:	09 f4       	brne	.+2      	; 0x5886 <ParseReceived+0x11fc>
    5884:	10 c3       	rjmp	.+1568   	; 0x5ea6 <ParseReceived+0x181c>
    5886:	b1 2c       	mov	r11, r1
    5888:	40 ed       	ldi	r20, 0xD0	; 208
    588a:	42 0f       	add	r20, r18
    588c:	4a 30       	cpi	r20, 0x0A	; 10
    588e:	08 f0       	brcs	.+2      	; 0x5892 <ParseReceived+0x1208>
    5890:	54 c3       	rjmp	.+1704   	; 0x5f3a <ParseReceived+0x18b0>
    5892:	fc 01       	movw	r30, r24
    5894:	31 96       	adiw	r30, 0x01	; 1
    5896:	80 e0       	ldi	r24, 0x00	; 0
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	dc 01       	movw	r26, r24
    589c:	ac 01       	movw	r20, r24
    589e:	bd 01       	movw	r22, r26
    58a0:	44 0f       	add	r20, r20
    58a2:	55 1f       	adc	r21, r21
    58a4:	66 1f       	adc	r22, r22
    58a6:	77 1f       	adc	r23, r23
    58a8:	db 01       	movw	r26, r22
    58aa:	ca 01       	movw	r24, r20
    58ac:	88 0f       	add	r24, r24
    58ae:	99 1f       	adc	r25, r25
    58b0:	aa 1f       	adc	r26, r26
    58b2:	bb 1f       	adc	r27, r27
    58b4:	88 0f       	add	r24, r24
    58b6:	99 1f       	adc	r25, r25
    58b8:	aa 1f       	adc	r26, r26
    58ba:	bb 1f       	adc	r27, r27
    58bc:	84 0f       	add	r24, r20
    58be:	95 1f       	adc	r25, r21
    58c0:	a6 1f       	adc	r26, r22
    58c2:	b7 1f       	adc	r27, r23
    58c4:	42 2f       	mov	r20, r18
    58c6:	50 e0       	ldi	r21, 0x00	; 0
    58c8:	40 53       	subi	r20, 0x30	; 48
    58ca:	51 09       	sbc	r21, r1
    58cc:	66 27       	eor	r22, r22
    58ce:	57 fd       	sbrc	r21, 7
    58d0:	60 95       	com	r22
    58d2:	76 2f       	mov	r23, r22
    58d4:	84 0f       	add	r24, r20
    58d6:	95 1f       	adc	r25, r21
    58d8:	a6 1f       	adc	r26, r22
    58da:	b7 1f       	adc	r27, r23
    58dc:	21 91       	ld	r18, Z+
    58de:	40 ed       	ldi	r20, 0xD0	; 208
    58e0:	42 0f       	add	r20, r18
    58e2:	4a 30       	cpi	r20, 0x0A	; 10
    58e4:	d8 f2       	brcs	.-74     	; 0x589c <ParseReceived+0x1212>
    58e6:	bb 20       	and	r11, r11
    58e8:	39 f0       	breq	.+14     	; 0x58f8 <ParseReceived+0x126e>
    58ea:	b0 95       	com	r27
    58ec:	a0 95       	com	r26
    58ee:	90 95       	com	r25
    58f0:	81 95       	neg	r24
    58f2:	9f 4f       	sbci	r25, 0xFF	; 255
    58f4:	af 4f       	sbci	r26, 0xFF	; 255
    58f6:	bf 4f       	sbci	r27, 0xFF	; 255
    58f8:	f4 01       	movw	r30, r8
    58fa:	ee 0f       	add	r30, r30
    58fc:	ff 1f       	adc	r31, r31
    58fe:	e2 95       	swap	r30
    5900:	f2 95       	swap	r31
    5902:	f0 7f       	andi	r31, 0xF0	; 240
    5904:	fe 27       	eor	r31, r30
    5906:	e0 7f       	andi	r30, 0xF0	; 240
    5908:	fe 27       	eor	r31, r30
    590a:	ef 5a       	subi	r30, 0xAF	; 175
    590c:	f2 4d       	sbci	r31, 0xD2	; 210
    590e:	86 8f       	std	Z+30, r24	; 0x1e
    5910:	6d ef       	ldi	r22, 0xFD	; 253
    5912:	74 e2       	ldi	r23, 0x24	; 36
    5914:	80 e0       	ldi	r24, 0x00	; 0
    5916:	90 e0       	ldi	r25, 0x00	; 0
    5918:	0e 94 73 44 	call	0x88e6	; 0x88e6 <strtok>
    591c:	00 97       	sbiw	r24, 0x00	; 0
    591e:	09 f4       	brne	.+2      	; 0x5922 <ParseReceived+0x1298>
    5920:	a4 c1       	rjmp	.+840    	; 0x5c6a <ParseReceived+0x15e0>
    5922:	4d 2d       	mov	r20, r13
    5924:	95 cf       	rjmp	.-214    	; 0x5850 <ParseReceived+0x11c6>
    5926:	20 91 91 2e 	lds	r18, 0x2E91
    592a:	82 2e       	mov	r8, r18
    592c:	91 2c       	mov	r9, r1
    592e:	fc 01       	movw	r30, r24
    5930:	20 81       	ld	r18, Z
    5932:	2d 32       	cpi	r18, 0x2D	; 45
    5934:	09 f4       	brne	.+2      	; 0x5938 <ParseReceived+0x12ae>
    5936:	b2 c2       	rjmp	.+1380   	; 0x5e9c <ParseReceived+0x1812>
    5938:	b1 2c       	mov	r11, r1
    593a:	40 ed       	ldi	r20, 0xD0	; 208
    593c:	42 0f       	add	r20, r18
    593e:	4a 30       	cpi	r20, 0x0A	; 10
    5940:	08 f0       	brcs	.+2      	; 0x5944 <ParseReceived+0x12ba>
    5942:	f7 c2       	rjmp	.+1518   	; 0x5f32 <ParseReceived+0x18a8>
    5944:	fc 01       	movw	r30, r24
    5946:	31 96       	adiw	r30, 0x01	; 1
    5948:	80 e0       	ldi	r24, 0x00	; 0
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	dc 01       	movw	r26, r24
    594e:	ac 01       	movw	r20, r24
    5950:	bd 01       	movw	r22, r26
    5952:	44 0f       	add	r20, r20
    5954:	55 1f       	adc	r21, r21
    5956:	66 1f       	adc	r22, r22
    5958:	77 1f       	adc	r23, r23
    595a:	db 01       	movw	r26, r22
    595c:	ca 01       	movw	r24, r20
    595e:	88 0f       	add	r24, r24
    5960:	99 1f       	adc	r25, r25
    5962:	aa 1f       	adc	r26, r26
    5964:	bb 1f       	adc	r27, r27
    5966:	88 0f       	add	r24, r24
    5968:	99 1f       	adc	r25, r25
    596a:	aa 1f       	adc	r26, r26
    596c:	bb 1f       	adc	r27, r27
    596e:	84 0f       	add	r24, r20
    5970:	95 1f       	adc	r25, r21
    5972:	a6 1f       	adc	r26, r22
    5974:	b7 1f       	adc	r27, r23
    5976:	42 2f       	mov	r20, r18
    5978:	50 e0       	ldi	r21, 0x00	; 0
    597a:	40 53       	subi	r20, 0x30	; 48
    597c:	51 09       	sbc	r21, r1
    597e:	66 27       	eor	r22, r22
    5980:	57 fd       	sbrc	r21, 7
    5982:	60 95       	com	r22
    5984:	76 2f       	mov	r23, r22
    5986:	84 0f       	add	r24, r20
    5988:	95 1f       	adc	r25, r21
    598a:	a6 1f       	adc	r26, r22
    598c:	b7 1f       	adc	r27, r23
    598e:	21 91       	ld	r18, Z+
    5990:	40 ed       	ldi	r20, 0xD0	; 208
    5992:	42 0f       	add	r20, r18
    5994:	4a 30       	cpi	r20, 0x0A	; 10
    5996:	d8 f2       	brcs	.-74     	; 0x594e <ParseReceived+0x12c4>
    5998:	bb 20       	and	r11, r11
    599a:	39 f0       	breq	.+14     	; 0x59aa <ParseReceived+0x1320>
    599c:	b0 95       	com	r27
    599e:	a0 95       	com	r26
    59a0:	90 95       	com	r25
    59a2:	81 95       	neg	r24
    59a4:	9f 4f       	sbci	r25, 0xFF	; 255
    59a6:	af 4f       	sbci	r26, 0xFF	; 255
    59a8:	bf 4f       	sbci	r27, 0xFF	; 255
    59aa:	f4 01       	movw	r30, r8
    59ac:	ee 0f       	add	r30, r30
    59ae:	ff 1f       	adc	r31, r31
    59b0:	e2 95       	swap	r30
    59b2:	f2 95       	swap	r31
    59b4:	f0 7f       	andi	r31, 0xF0	; 240
    59b6:	fe 27       	eor	r31, r30
    59b8:	e0 7f       	andi	r30, 0xF0	; 240
    59ba:	fe 27       	eor	r31, r30
    59bc:	ef 5a       	subi	r30, 0xAF	; 175
    59be:	f2 4d       	sbci	r31, 0xD2	; 210
    59c0:	85 8f       	std	Z+29, r24	; 0x1d
    59c2:	a6 cf       	rjmp	.-180    	; 0x5910 <ParseReceived+0x1286>
    59c4:	01 96       	adiw	r24, 0x01	; 1
    59c6:	fc 01       	movw	r30, r24
    59c8:	01 90       	ld	r0, Z+
    59ca:	00 20       	and	r0, r0
    59cc:	e9 f7       	brne	.-6      	; 0x59c8 <ParseReceived+0x133e>
    59ce:	32 97       	sbiw	r30, 0x02	; 2
    59d0:	10 82       	st	Z, r1
    59d2:	60 91 91 2e 	lds	r22, 0x2E91
    59d6:	b0 e2       	ldi	r27, 0x20	; 32
    59d8:	6b 9f       	mul	r22, r27
    59da:	b0 01       	movw	r22, r0
    59dc:	11 24       	eor	r1, r1
    59de:	68 59       	subi	r22, 0x98	; 152
    59e0:	72 4d       	sbci	r23, 0xD2	; 210
    59e2:	40 e0       	ldi	r20, 0x00	; 0
    59e4:	50 e0       	ldi	r21, 0x00	; 0
    59e6:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <ParseMAC>
    59ea:	92 cf       	rjmp	.-220    	; 0x5910 <ParseReceived+0x1286>
    59ec:	20 91 91 2e 	lds	r18, 0x2E91
    59f0:	82 2e       	mov	r8, r18
    59f2:	91 2c       	mov	r9, r1
    59f4:	dc 01       	movw	r26, r24
    59f6:	2c 91       	ld	r18, X
    59f8:	2d 32       	cpi	r18, 0x2D	; 45
    59fa:	09 f4       	brne	.+2      	; 0x59fe <ParseReceived+0x1374>
    59fc:	49 c2       	rjmp	.+1170   	; 0x5e90 <ParseReceived+0x1806>
    59fe:	b1 2c       	mov	r11, r1
    5a00:	40 ed       	ldi	r20, 0xD0	; 208
    5a02:	42 0f       	add	r20, r18
    5a04:	4a 30       	cpi	r20, 0x0A	; 10
    5a06:	08 f0       	brcs	.+2      	; 0x5a0a <ParseReceived+0x1380>
    5a08:	a0 c2       	rjmp	.+1344   	; 0x5f4a <ParseReceived+0x18c0>
    5a0a:	fc 01       	movw	r30, r24
    5a0c:	31 96       	adiw	r30, 0x01	; 1
    5a0e:	80 e0       	ldi	r24, 0x00	; 0
    5a10:	90 e0       	ldi	r25, 0x00	; 0
    5a12:	dc 01       	movw	r26, r24
    5a14:	ac 01       	movw	r20, r24
    5a16:	bd 01       	movw	r22, r26
    5a18:	44 0f       	add	r20, r20
    5a1a:	55 1f       	adc	r21, r21
    5a1c:	66 1f       	adc	r22, r22
    5a1e:	77 1f       	adc	r23, r23
    5a20:	db 01       	movw	r26, r22
    5a22:	ca 01       	movw	r24, r20
    5a24:	88 0f       	add	r24, r24
    5a26:	99 1f       	adc	r25, r25
    5a28:	aa 1f       	adc	r26, r26
    5a2a:	bb 1f       	adc	r27, r27
    5a2c:	88 0f       	add	r24, r24
    5a2e:	99 1f       	adc	r25, r25
    5a30:	aa 1f       	adc	r26, r26
    5a32:	bb 1f       	adc	r27, r27
    5a34:	84 0f       	add	r24, r20
    5a36:	95 1f       	adc	r25, r21
    5a38:	a6 1f       	adc	r26, r22
    5a3a:	b7 1f       	adc	r27, r23
    5a3c:	42 2f       	mov	r20, r18
    5a3e:	50 e0       	ldi	r21, 0x00	; 0
    5a40:	40 53       	subi	r20, 0x30	; 48
    5a42:	51 09       	sbc	r21, r1
    5a44:	66 27       	eor	r22, r22
    5a46:	57 fd       	sbrc	r21, 7
    5a48:	60 95       	com	r22
    5a4a:	76 2f       	mov	r23, r22
    5a4c:	84 0f       	add	r24, r20
    5a4e:	95 1f       	adc	r25, r21
    5a50:	a6 1f       	adc	r26, r22
    5a52:	b7 1f       	adc	r27, r23
    5a54:	21 91       	ld	r18, Z+
    5a56:	40 ed       	ldi	r20, 0xD0	; 208
    5a58:	42 0f       	add	r20, r18
    5a5a:	4a 30       	cpi	r20, 0x0A	; 10
    5a5c:	d8 f2       	brcs	.-74     	; 0x5a14 <ParseReceived+0x138a>
    5a5e:	bb 20       	and	r11, r11
    5a60:	39 f0       	breq	.+14     	; 0x5a70 <ParseReceived+0x13e6>
    5a62:	b0 95       	com	r27
    5a64:	a0 95       	com	r26
    5a66:	90 95       	com	r25
    5a68:	81 95       	neg	r24
    5a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a6c:	af 4f       	sbci	r26, 0xFF	; 255
    5a6e:	bf 4f       	sbci	r27, 0xFF	; 255
    5a70:	f4 01       	movw	r30, r8
    5a72:	ee 0f       	add	r30, r30
    5a74:	ff 1f       	adc	r31, r31
    5a76:	e2 95       	swap	r30
    5a78:	f2 95       	swap	r31
    5a7a:	f0 7f       	andi	r31, 0xF0	; 240
    5a7c:	fe 27       	eor	r31, r30
    5a7e:	e0 7f       	andi	r30, 0xF0	; 240
    5a80:	fe 27       	eor	r31, r30
    5a82:	ef 5a       	subi	r30, 0xAF	; 175
    5a84:	f2 4d       	sbci	r31, 0xD2	; 210
    5a86:	85 8b       	std	Z+21, r24	; 0x15
    5a88:	96 8b       	std	Z+22, r25	; 0x16
    5a8a:	42 cf       	rjmp	.-380    	; 0x5910 <ParseReceived+0x1286>
    5a8c:	bc 01       	movw	r22, r24
    5a8e:	6f 5f       	subi	r22, 0xFF	; 255
    5a90:	7f 4f       	sbci	r23, 0xFF	; 255
    5a92:	fb 01       	movw	r30, r22
    5a94:	01 90       	ld	r0, Z+
    5a96:	00 20       	and	r0, r0
    5a98:	e9 f7       	brne	.-6      	; 0x5a94 <ParseReceived+0x140a>
    5a9a:	32 97       	sbiw	r30, 0x02	; 2
    5a9c:	10 82       	st	Z, r1
    5a9e:	80 91 91 2e 	lds	r24, 0x2E91
    5aa2:	f0 e2       	ldi	r31, 0x20	; 32
    5aa4:	8f 9f       	mul	r24, r31
    5aa6:	c0 01       	movw	r24, r0
    5aa8:	11 24       	eor	r1, r1
    5aaa:	8e 5a       	subi	r24, 0xAE	; 174
    5aac:	92 4d       	sbci	r25, 0xD2	; 210
    5aae:	0e 94 95 44 	call	0x892a	; 0x892a <strcpy>
    5ab2:	2e cf       	rjmp	.-420    	; 0x5910 <ParseReceived+0x1286>
    5ab4:	20 91 91 2e 	lds	r18, 0x2E91
    5ab8:	82 2e       	mov	r8, r18
    5aba:	91 2c       	mov	r9, r1
    5abc:	fc 01       	movw	r30, r24
    5abe:	20 81       	ld	r18, Z
    5ac0:	2d 32       	cpi	r18, 0x2D	; 45
    5ac2:	09 f4       	brne	.+2      	; 0x5ac6 <ParseReceived+0x143c>
    5ac4:	e0 c1       	rjmp	.+960    	; 0x5e86 <ParseReceived+0x17fc>
    5ac6:	b1 2c       	mov	r11, r1
    5ac8:	40 ed       	ldi	r20, 0xD0	; 208
    5aca:	42 0f       	add	r20, r18
    5acc:	4a 30       	cpi	r20, 0x0A	; 10
    5ace:	08 f0       	brcs	.+2      	; 0x5ad2 <ParseReceived+0x1448>
    5ad0:	38 c2       	rjmp	.+1136   	; 0x5f42 <ParseReceived+0x18b8>
    5ad2:	fc 01       	movw	r30, r24
    5ad4:	31 96       	adiw	r30, 0x01	; 1
    5ad6:	80 e0       	ldi	r24, 0x00	; 0
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	dc 01       	movw	r26, r24
    5adc:	ac 01       	movw	r20, r24
    5ade:	bd 01       	movw	r22, r26
    5ae0:	44 0f       	add	r20, r20
    5ae2:	55 1f       	adc	r21, r21
    5ae4:	66 1f       	adc	r22, r22
    5ae6:	77 1f       	adc	r23, r23
    5ae8:	db 01       	movw	r26, r22
    5aea:	ca 01       	movw	r24, r20
    5aec:	88 0f       	add	r24, r24
    5aee:	99 1f       	adc	r25, r25
    5af0:	aa 1f       	adc	r26, r26
    5af2:	bb 1f       	adc	r27, r27
    5af4:	88 0f       	add	r24, r24
    5af6:	99 1f       	adc	r25, r25
    5af8:	aa 1f       	adc	r26, r26
    5afa:	bb 1f       	adc	r27, r27
    5afc:	84 0f       	add	r24, r20
    5afe:	95 1f       	adc	r25, r21
    5b00:	a6 1f       	adc	r26, r22
    5b02:	b7 1f       	adc	r27, r23
    5b04:	42 2f       	mov	r20, r18
    5b06:	50 e0       	ldi	r21, 0x00	; 0
    5b08:	40 53       	subi	r20, 0x30	; 48
    5b0a:	51 09       	sbc	r21, r1
    5b0c:	66 27       	eor	r22, r22
    5b0e:	57 fd       	sbrc	r21, 7
    5b10:	60 95       	com	r22
    5b12:	76 2f       	mov	r23, r22
    5b14:	84 0f       	add	r24, r20
    5b16:	95 1f       	adc	r25, r21
    5b18:	a6 1f       	adc	r26, r22
    5b1a:	b7 1f       	adc	r27, r23
    5b1c:	21 91       	ld	r18, Z+
    5b1e:	40 ed       	ldi	r20, 0xD0	; 208
    5b20:	42 0f       	add	r20, r18
    5b22:	4a 30       	cpi	r20, 0x0A	; 10
    5b24:	d8 f2       	brcs	.-74     	; 0x5adc <ParseReceived+0x1452>
    5b26:	bb 20       	and	r11, r11
    5b28:	39 f0       	breq	.+14     	; 0x5b38 <ParseReceived+0x14ae>
    5b2a:	b0 95       	com	r27
    5b2c:	a0 95       	com	r26
    5b2e:	90 95       	com	r25
    5b30:	81 95       	neg	r24
    5b32:	9f 4f       	sbci	r25, 0xFF	; 255
    5b34:	af 4f       	sbci	r26, 0xFF	; 255
    5b36:	bf 4f       	sbci	r27, 0xFF	; 255
    5b38:	f4 01       	movw	r30, r8
    5b3a:	ee 0f       	add	r30, r30
    5b3c:	ff 1f       	adc	r31, r31
    5b3e:	e2 95       	swap	r30
    5b40:	f2 95       	swap	r31
    5b42:	f0 7f       	andi	r31, 0xF0	; 240
    5b44:	fe 27       	eor	r31, r30
    5b46:	e0 7f       	andi	r30, 0xF0	; 240
    5b48:	fe 27       	eor	r31, r30
    5b4a:	ef 5a       	subi	r30, 0xAF	; 175
    5b4c:	f2 4d       	sbci	r31, 0xD2	; 210
    5b4e:	87 8f       	std	Z+31, r24	; 0x1f
    5b50:	df ce       	rjmp	.-578    	; 0x5910 <ParseReceived+0x1286>
    5b52:	20 91 91 2e 	lds	r18, 0x2E91
    5b56:	82 2e       	mov	r8, r18
    5b58:	91 2c       	mov	r9, r1
    5b5a:	fc 01       	movw	r30, r24
    5b5c:	20 81       	ld	r18, Z
    5b5e:	2d 32       	cpi	r18, 0x2D	; 45
    5b60:	09 f4       	brne	.+2      	; 0x5b64 <ParseReceived+0x14da>
    5b62:	aa c1       	rjmp	.+852    	; 0x5eb8 <ParseReceived+0x182e>
    5b64:	b1 2c       	mov	r11, r1
    5b66:	40 ed       	ldi	r20, 0xD0	; 208
    5b68:	42 0f       	add	r20, r18
    5b6a:	4a 30       	cpi	r20, 0x0A	; 10
    5b6c:	08 f0       	brcs	.+2      	; 0x5b70 <ParseReceived+0x14e6>
    5b6e:	dd c1       	rjmp	.+954    	; 0x5f2a <ParseReceived+0x18a0>
    5b70:	fc 01       	movw	r30, r24
    5b72:	31 96       	adiw	r30, 0x01	; 1
    5b74:	80 e0       	ldi	r24, 0x00	; 0
    5b76:	90 e0       	ldi	r25, 0x00	; 0
    5b78:	dc 01       	movw	r26, r24
    5b7a:	ac 01       	movw	r20, r24
    5b7c:	bd 01       	movw	r22, r26
    5b7e:	44 0f       	add	r20, r20
    5b80:	55 1f       	adc	r21, r21
    5b82:	66 1f       	adc	r22, r22
    5b84:	77 1f       	adc	r23, r23
    5b86:	db 01       	movw	r26, r22
    5b88:	ca 01       	movw	r24, r20
    5b8a:	88 0f       	add	r24, r24
    5b8c:	99 1f       	adc	r25, r25
    5b8e:	aa 1f       	adc	r26, r26
    5b90:	bb 1f       	adc	r27, r27
    5b92:	88 0f       	add	r24, r24
    5b94:	99 1f       	adc	r25, r25
    5b96:	aa 1f       	adc	r26, r26
    5b98:	bb 1f       	adc	r27, r27
    5b9a:	84 0f       	add	r24, r20
    5b9c:	95 1f       	adc	r25, r21
    5b9e:	a6 1f       	adc	r26, r22
    5ba0:	b7 1f       	adc	r27, r23
    5ba2:	42 2f       	mov	r20, r18
    5ba4:	50 e0       	ldi	r21, 0x00	; 0
    5ba6:	40 53       	subi	r20, 0x30	; 48
    5ba8:	51 09       	sbc	r21, r1
    5baa:	66 27       	eor	r22, r22
    5bac:	57 fd       	sbrc	r21, 7
    5bae:	60 95       	com	r22
    5bb0:	76 2f       	mov	r23, r22
    5bb2:	84 0f       	add	r24, r20
    5bb4:	95 1f       	adc	r25, r21
    5bb6:	a6 1f       	adc	r26, r22
    5bb8:	b7 1f       	adc	r27, r23
    5bba:	21 91       	ld	r18, Z+
    5bbc:	40 ed       	ldi	r20, 0xD0	; 208
    5bbe:	42 0f       	add	r20, r18
    5bc0:	4a 30       	cpi	r20, 0x0A	; 10
    5bc2:	d8 f2       	brcs	.-74     	; 0x5b7a <ParseReceived+0x14f0>
    5bc4:	bb 20       	and	r11, r11
    5bc6:	39 f0       	breq	.+14     	; 0x5bd6 <ParseReceived+0x154c>
    5bc8:	b0 95       	com	r27
    5bca:	a0 95       	com	r26
    5bcc:	90 95       	com	r25
    5bce:	81 95       	neg	r24
    5bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    5bd2:	af 4f       	sbci	r26, 0xFF	; 255
    5bd4:	bf 4f       	sbci	r27, 0xFF	; 255
    5bd6:	f4 01       	movw	r30, r8
    5bd8:	ee 0f       	add	r30, r30
    5bda:	ff 1f       	adc	r31, r31
    5bdc:	e2 95       	swap	r30
    5bde:	f2 95       	swap	r31
    5be0:	f0 7f       	andi	r31, 0xF0	; 240
    5be2:	fe 27       	eor	r31, r30
    5be4:	e0 7f       	andi	r30, 0xF0	; 240
    5be6:	fe 27       	eor	r31, r30
    5be8:	ef 5a       	subi	r30, 0xAF	; 175
    5bea:	f2 4d       	sbci	r31, 0xD2	; 210
    5bec:	80 83       	st	Z, r24
    5bee:	90 ce       	rjmp	.-736    	; 0x5910 <ParseReceived+0x1286>
    5bf0:	80 e0       	ldi	r24, 0x00	; 0
    5bf2:	90 e0       	ldi	r25, 0x00	; 0
    5bf4:	dc 01       	movw	r26, r24
    5bf6:	65 c8       	rjmp	.-3894   	; 0x4cc2 <ParseReceived+0x638>
    5bf8:	80 e0       	ldi	r24, 0x00	; 0
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	dc 01       	movw	r26, r24
    5bfe:	4b c9       	rjmp	.-3434   	; 0x4e96 <ParseReceived+0x80c>
    5c00:	c6 01       	movw	r24, r12
    5c02:	a0 e0       	ldi	r26, 0x00	; 0
    5c04:	b0 e0       	ldi	r27, 0x00	; 0
    5c06:	61 e0       	ldi	r22, 0x01	; 1
    5c08:	70 e0       	ldi	r23, 0x00	; 0
    5c0a:	aa 24       	eor	r10, r10
    5c0c:	a3 94       	inc	r10
    5c0e:	b1 2c       	mov	r11, r1
    5c10:	21 e0       	ldi	r18, 0x01	; 1
    5c12:	30 e0       	ldi	r19, 0x00	; 0
    5c14:	40 e0       	ldi	r20, 0x00	; 0
    5c16:	50 e0       	ldi	r21, 0x00	; 0
    5c18:	29 8b       	std	Y+17, r18	; 0x11
    5c1a:	3a 8b       	std	Y+18, r19	; 0x12
    5c1c:	4b 8b       	std	Y+19, r20	; 0x13
    5c1e:	5c 8b       	std	Y+20, r21	; 0x14
    5c20:	73 c9       	rjmp	.-3354   	; 0x4f08 <ParseReceived+0x87e>
    5c22:	81 14       	cp	r8, r1
    5c24:	91 04       	cpc	r9, r1
    5c26:	09 f4       	brne	.+2      	; 0x5c2a <ParseReceived+0x15a0>
    5c28:	bd cd       	rjmp	.-1158   	; 0x57a4 <ParseReceived+0x111a>
    5c2a:	e8 14       	cp	r14, r8
    5c2c:	f9 04       	cpc	r15, r9
    5c2e:	09 f4       	brne	.+2      	; 0x5c32 <ParseReceived+0x15a8>
    5c30:	b9 cd       	rjmp	.-1166   	; 0x57a4 <ParseReceived+0x111a>
    5c32:	d4 01       	movw	r26, r8
    5c34:	8e 91       	ld	r24, -X
    5c36:	bd 01       	movw	r22, r26
    5c38:	97 01       	movw	r18, r14
    5c3a:	2f 5f       	subi	r18, 0xFF	; 255
    5c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c3e:	82 16       	cp	r8, r18
    5c40:	93 06       	cpc	r9, r19
    5c42:	e9 f0       	breq	.+58     	; 0x5c7e <ParseReceived+0x15f4>
    5c44:	2a e0       	ldi	r18, 0x0A	; 10
    5c46:	30 e0       	ldi	r19, 0x00	; 0
    5c48:	40 e0       	ldi	r20, 0x00	; 0
    5c4a:	50 e0       	ldi	r21, 0x00	; 0
    5c4c:	84 ea       	ldi	r24, 0xA4	; 164
    5c4e:	94 e3       	ldi	r25, 0x34	; 52
    5c50:	0e 94 ab 18 	call	0x3156	; 0x3156 <BUFFER_Write>
    5c54:	0c 94 b7 24 	jmp	0x496e	; 0x496e <ParseReceived+0x2e4>
    5c58:	81 e0       	ldi	r24, 0x01	; 1
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	a0 e0       	ldi	r26, 0x00	; 0
    5c5e:	b0 e0       	ldi	r27, 0x00	; 0
    5c60:	e0 c8       	rjmp	.-3648   	; 0x4e22 <ParseReceived+0x798>
    5c62:	db 01       	movw	r26, r22
    5c64:	23 2f       	mov	r18, r19
    5c66:	30 e0       	ldi	r19, 0x00	; 0
    5c68:	99 ca       	rjmp	.-2766   	; 0x519c <ParseReceived+0xb12>
    5c6a:	80 91 91 2e 	lds	r24, 0x2E91
    5c6e:	8f 5f       	subi	r24, 0xFF	; 255
    5c70:	80 93 91 2e 	sts	0x2E91, r24
    5c74:	a1 cc       	rjmp	.-1726   	; 0x55b8 <ParseReceived+0xf2e>
    5c76:	cb 01       	movw	r24, r22
    5c78:	24 2f       	mov	r18, r20
    5c7a:	30 e0       	ldi	r19, 0x00	; 0
    5c7c:	c0 ca       	rjmp	.-2688   	; 0x51fe <ParseReceived+0xb74>
    5c7e:	90 e0       	ldi	r25, 0x00	; 0
    5c80:	c0 97       	sbiw	r24, 0x30	; 48
    5c82:	25 e2       	ldi	r18, 0x25	; 37
    5c84:	28 9f       	mul	r18, r24
    5c86:	f0 01       	movw	r30, r0
    5c88:	29 9f       	mul	r18, r25
    5c8a:	f0 0d       	add	r31, r0
    5c8c:	11 24       	eor	r1, r1
    5c8e:	7a 96       	adiw	r30, 0x1a	; 26
    5c90:	e0 0f       	add	r30, r16
    5c92:	f1 1f       	adc	r31, r17
    5c94:	82 81       	ldd	r24, Z+2	; 0x02
    5c96:	90 81       	ld	r25, Z
    5c98:	10 82       	st	Z, r1
    5c9a:	12 82       	std	Z+2, r1	; 0x02
    5c9c:	13 a2       	std	Z+35, r1	; 0x23
    5c9e:	12 a2       	std	Z+34, r1	; 0x22
    5ca0:	99 23       	and	r25, r25
    5ca2:	11 f4       	brne	.+4      	; 0x5ca8 <ParseReceived+0x161e>
    5ca4:	0c 94 b7 24 	jmp	0x496e	; 0x496e <ParseReceived+0x2e4>
    5ca8:	bf 01       	movw	r22, r30
    5caa:	88 23       	and	r24, r24
    5cac:	09 f4       	brne	.+2      	; 0x5cb0 <ParseReceived+0x1626>
    5cae:	09 c1       	rjmp	.+530    	; 0x5ec2 <ParseReceived+0x1838>
    5cb0:	c8 01       	movw	r24, r16
    5cb2:	0e 94 65 3c 	call	0x78ca	; 0x78ca <ESP8266_Callback_ClientConnectionClosed>
    5cb6:	0c 94 b7 24 	jmp	0x496e	; 0x496e <ParseReceived+0x2e4>
    5cba:	d7 01       	movw	r26, r14
    5cbc:	fd 01       	movw	r30, r26
    5cbe:	31 96       	adiw	r30, 0x01	; 1
    5cc0:	11 96       	adiw	r26, 0x01	; 1
    5cc2:	8c 91       	ld	r24, X
    5cc4:	88 23       	and	r24, r24
    5cc6:	d1 f0       	breq	.+52     	; 0x5cfc <ParseReceived+0x1672>
    5cc8:	90 e0       	ldi	r25, 0x00	; 0
    5cca:	0e c0       	rjmp	.+28     	; 0x5ce8 <ParseReceived+0x165e>
    5ccc:	cc 24       	eor	r12, r12
    5cce:	c3 94       	inc	r12
    5cd0:	c9 0e       	add	r12, r25
    5cd2:	31 96       	adiw	r30, 0x01	; 1
    5cd4:	d8 01       	movw	r26, r16
    5cd6:	a9 0f       	add	r26, r25
    5cd8:	b1 1d       	adc	r27, r1
    5cda:	a8 5f       	subi	r26, 0xF8	; 248
    5cdc:	be 4f       	sbci	r27, 0xFE	; 254
    5cde:	8c 93       	st	X, r24
    5ce0:	80 81       	ld	r24, Z
    5ce2:	88 23       	and	r24, r24
    5ce4:	51 f0       	breq	.+20     	; 0x5cfa <ParseReceived+0x1670>
    5ce6:	9c 2d       	mov	r25, r12
    5ce8:	82 32       	cpi	r24, 0x22	; 34
    5cea:	81 f7       	brne	.-32     	; 0x5ccc <ParseReceived+0x1642>
    5cec:	21 81       	ldd	r18, Z+1	; 0x01
    5cee:	2c 32       	cpi	r18, 0x2C	; 44
    5cf0:	69 f7       	brne	.-38     	; 0x5ccc <ParseReceived+0x1642>
    5cf2:	22 81       	ldd	r18, Z+2	; 0x02
    5cf4:	22 32       	cpi	r18, 0x22	; 34
    5cf6:	51 f7       	brne	.-44     	; 0x5ccc <ParseReceived+0x1642>
    5cf8:	c9 2e       	mov	r12, r25
    5cfa:	d1 2c       	mov	r13, r1
    5cfc:	d8 01       	movw	r26, r16
    5cfe:	ac 0d       	add	r26, r12
    5d00:	bd 1d       	adc	r27, r13
    5d02:	a8 5f       	subi	r26, 0xF8	; 248
    5d04:	be 4f       	sbci	r27, 0xFE	; 254
    5d06:	1c 92       	st	X, r1
    5d08:	6f 01       	movw	r12, r30
    5d0a:	b3 e0       	ldi	r27, 0x03	; 3
    5d0c:	cb 0e       	add	r12, r27
    5d0e:	d1 1c       	adc	r13, r1
    5d10:	ae 01       	movw	r20, r28
    5d12:	4f 5f       	subi	r20, 0xFF	; 255
    5d14:	5f 4f       	sbci	r21, 0xFF	; 255
    5d16:	b8 01       	movw	r22, r16
    5d18:	68 5e       	subi	r22, 0xE8	; 232
    5d1a:	7e 4f       	sbci	r23, 0xFE	; 254
    5d1c:	c6 01       	movw	r24, r12
    5d1e:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <ParseMAC>
    5d22:	29 81       	ldd	r18, Y+1	; 0x01
    5d24:	30 e0       	ldi	r19, 0x00	; 0
    5d26:	2e 5f       	subi	r18, 0xFE	; 254
    5d28:	3f 4f       	sbci	r19, 0xFF	; 255
    5d2a:	2c 0d       	add	r18, r12
    5d2c:	3d 1d       	adc	r19, r13
    5d2e:	f9 01       	movw	r30, r18
    5d30:	d0 80       	ld	r13, Z
    5d32:	fd e2       	ldi	r31, 0x2D	; 45
    5d34:	df 16       	cp	r13, r31
    5d36:	09 f4       	brne	.+2      	; 0x5d3a <ParseReceived+0x16b0>
    5d38:	d0 c0       	rjmp	.+416    	; 0x5eda <ParseReceived+0x1850>
    5d3a:	f9 01       	movw	r30, r18
    5d3c:	61 e0       	ldi	r22, 0x01	; 1
    5d3e:	70 e0       	ldi	r23, 0x00	; 0
    5d40:	c1 2c       	mov	r12, r1
    5d42:	80 ed       	ldi	r24, 0xD0	; 208
    5d44:	8d 0d       	add	r24, r13
    5d46:	8a 30       	cpi	r24, 0x0A	; 10
    5d48:	08 f0       	brcs	.+2      	; 0x5d4c <ParseReceived+0x16c2>
    5d4a:	d1 c0       	rjmp	.+418    	; 0x5eee <ParseReceived+0x1864>
    5d4c:	31 96       	adiw	r30, 0x01	; 1
    5d4e:	bc 2c       	mov	r11, r12
    5d50:	80 e0       	ldi	r24, 0x00	; 0
    5d52:	90 e0       	ldi	r25, 0x00	; 0
    5d54:	dc 01       	movw	r26, r24
    5d56:	49 01       	movw	r8, r18
    5d58:	2d 2d       	mov	r18, r13
    5d5a:	ac 01       	movw	r20, r24
    5d5c:	bd 01       	movw	r22, r26
    5d5e:	44 0f       	add	r20, r20
    5d60:	55 1f       	adc	r21, r21
    5d62:	66 1f       	adc	r22, r22
    5d64:	77 1f       	adc	r23, r23
    5d66:	db 01       	movw	r26, r22
    5d68:	ca 01       	movw	r24, r20
    5d6a:	88 0f       	add	r24, r24
    5d6c:	99 1f       	adc	r25, r25
    5d6e:	aa 1f       	adc	r26, r26
    5d70:	bb 1f       	adc	r27, r27
    5d72:	88 0f       	add	r24, r24
    5d74:	99 1f       	adc	r25, r25
    5d76:	aa 1f       	adc	r26, r26
    5d78:	bb 1f       	adc	r27, r27
    5d7a:	84 0f       	add	r24, r20
    5d7c:	95 1f       	adc	r25, r21
    5d7e:	a6 1f       	adc	r26, r22
    5d80:	b7 1f       	adc	r27, r23
    5d82:	42 2f       	mov	r20, r18
    5d84:	50 e0       	ldi	r21, 0x00	; 0
    5d86:	40 53       	subi	r20, 0x30	; 48
    5d88:	51 09       	sbc	r21, r1
    5d8a:	66 27       	eor	r22, r22
    5d8c:	57 fd       	sbrc	r21, 7
    5d8e:	60 95       	com	r22
    5d90:	76 2f       	mov	r23, r22
    5d92:	84 0f       	add	r24, r20
    5d94:	95 1f       	adc	r25, r21
    5d96:	a6 1f       	adc	r26, r22
    5d98:	b7 1f       	adc	r27, r23
    5d9a:	b3 94       	inc	r11
    5d9c:	21 91       	ld	r18, Z+
    5d9e:	40 ed       	ldi	r20, 0xD0	; 208
    5da0:	42 0f       	add	r20, r18
    5da2:	4a 30       	cpi	r20, 0x0A	; 10
    5da4:	d0 f2       	brcs	.-76     	; 0x5d5a <ParseReceived+0x16d0>
    5da6:	94 01       	movw	r18, r8
    5da8:	6b 2d       	mov	r22, r11
    5daa:	70 e0       	ldi	r23, 0x00	; 0
    5dac:	6f 5f       	subi	r22, 0xFF	; 255
    5dae:	7f 4f       	sbci	r23, 0xFF	; 255
    5db0:	b9 82       	std	Y+1, r11	; 0x01
    5db2:	cc 20       	and	r12, r12
    5db4:	39 f0       	breq	.+14     	; 0x5dc4 <ParseReceived+0x173a>
    5db6:	b0 95       	com	r27
    5db8:	a0 95       	com	r26
    5dba:	90 95       	com	r25
    5dbc:	81 95       	neg	r24
    5dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    5dc0:	af 4f       	sbci	r26, 0xFF	; 255
    5dc2:	bf 4f       	sbci	r27, 0xFF	; 255
    5dc4:	f8 01       	movw	r30, r16
    5dc6:	e2 5e       	subi	r30, 0xE2	; 226
    5dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    5dca:	80 83       	st	Z, r24
    5dcc:	f9 01       	movw	r30, r18
    5dce:	e6 0f       	add	r30, r22
    5dd0:	f7 1f       	adc	r31, r23
    5dd2:	20 81       	ld	r18, Z
    5dd4:	2d 32       	cpi	r18, 0x2D	; 45
    5dd6:	09 f4       	brne	.+2      	; 0x5dda <ParseReceived+0x1750>
    5dd8:	7b c0       	rjmp	.+246    	; 0x5ed0 <ParseReceived+0x1846>
    5dda:	d1 2c       	mov	r13, r1
    5ddc:	80 ed       	ldi	r24, 0xD0	; 208
    5dde:	82 0f       	add	r24, r18
    5de0:	8a 30       	cpi	r24, 0x0A	; 10
    5de2:	10 f0       	brcs	.+4      	; 0x5de8 <ParseReceived+0x175e>
    5de4:	0c 94 bb 25 	jmp	0x4b76	; 0x4b76 <ParseReceived+0x4ec>
    5de8:	31 96       	adiw	r30, 0x01	; 1
    5dea:	80 e0       	ldi	r24, 0x00	; 0
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	dc 01       	movw	r26, r24
    5df0:	ac 01       	movw	r20, r24
    5df2:	bd 01       	movw	r22, r26
    5df4:	44 0f       	add	r20, r20
    5df6:	55 1f       	adc	r21, r21
    5df8:	66 1f       	adc	r22, r22
    5dfa:	77 1f       	adc	r23, r23
    5dfc:	db 01       	movw	r26, r22
    5dfe:	ca 01       	movw	r24, r20
    5e00:	88 0f       	add	r24, r24
    5e02:	99 1f       	adc	r25, r25
    5e04:	aa 1f       	adc	r26, r26
    5e06:	bb 1f       	adc	r27, r27
    5e08:	88 0f       	add	r24, r24
    5e0a:	99 1f       	adc	r25, r25
    5e0c:	aa 1f       	adc	r26, r26
    5e0e:	bb 1f       	adc	r27, r27
    5e10:	84 0f       	add	r24, r20
    5e12:	95 1f       	adc	r25, r21
    5e14:	a6 1f       	adc	r26, r22
    5e16:	b7 1f       	adc	r27, r23
    5e18:	42 2f       	mov	r20, r18
    5e1a:	50 e0       	ldi	r21, 0x00	; 0
    5e1c:	40 53       	subi	r20, 0x30	; 48
    5e1e:	51 09       	sbc	r21, r1
    5e20:	66 27       	eor	r22, r22
    5e22:	57 fd       	sbrc	r21, 7
    5e24:	60 95       	com	r22
    5e26:	76 2f       	mov	r23, r22
    5e28:	84 0f       	add	r24, r20
    5e2a:	95 1f       	adc	r25, r21
    5e2c:	a6 1f       	adc	r26, r22
    5e2e:	b7 1f       	adc	r27, r23
    5e30:	21 91       	ld	r18, Z+
    5e32:	30 ed       	ldi	r19, 0xD0	; 208
    5e34:	32 0f       	add	r19, r18
    5e36:	3a 30       	cpi	r19, 0x0A	; 10
    5e38:	d8 f2       	brcs	.-74     	; 0x5df0 <ParseReceived+0x1766>
    5e3a:	0c 94 be 25 	jmp	0x4b7c	; 0x4b7c <ParseReceived+0x4f2>
    5e3e:	21 81       	ldd	r18, Z+1	; 0x01
    5e40:	31 96       	adiw	r30, 0x01	; 1
    5e42:	dd 24       	eor	r13, r13
    5e44:	d3 94       	inc	r13
    5e46:	ce ca       	rjmp	.-2660   	; 0x53e4 <ParseReceived+0xd5a>
    5e48:	31 96       	adiw	r30, 0x01	; 1
    5e4a:	d4 01       	movw	r26, r8
    5e4c:	11 96       	adiw	r26, 0x01	; 1
    5e4e:	2c 91       	ld	r18, X
    5e50:	62 e0       	ldi	r22, 0x02	; 2
    5e52:	70 e0       	ldi	r23, 0x00	; 0
    5e54:	cc 24       	eor	r12, r12
    5e56:	c3 94       	inc	r12
    5e58:	7c ca       	rjmp	.-2824   	; 0x5352 <ParseReceived+0xcc8>
    5e5a:	31 96       	adiw	r30, 0x01	; 1
    5e5c:	d4 01       	movw	r26, r8
    5e5e:	11 96       	adiw	r26, 0x01	; 1
    5e60:	2c 91       	ld	r18, X
    5e62:	62 e0       	ldi	r22, 0x02	; 2
    5e64:	70 e0       	ldi	r23, 0x00	; 0
    5e66:	cc 24       	eor	r12, r12
    5e68:	c3 94       	inc	r12
    5e6a:	27 ca       	rjmp	.-2994   	; 0x52ba <ParseReceived+0xc30>
    5e6c:	33 96       	adiw	r30, 0x03	; 3
    5e6e:	dc 01       	movw	r26, r24
    5e70:	13 96       	adiw	r26, 0x03	; 3
    5e72:	2c 91       	ld	r18, X
    5e74:	62 e0       	ldi	r22, 0x02	; 2
    5e76:	70 e0       	ldi	r23, 0x00	; 0
    5e78:	cc 24       	eor	r12, r12
    5e7a:	c3 94       	inc	r12
    5e7c:	d2 c9       	rjmp	.-3164   	; 0x5222 <ParseReceived+0xb98>
    5e7e:	12 96       	adiw	r26, 0x02	; 2
    5e80:	f9 01       	movw	r30, r18
    5e82:	42 81       	ldd	r20, Z+2	; 0x02
    5e84:	67 c9       	rjmp	.-3378   	; 0x5154 <ParseReceived+0xaca>
    5e86:	21 81       	ldd	r18, Z+1	; 0x01
    5e88:	01 96       	adiw	r24, 0x01	; 1
    5e8a:	bb 24       	eor	r11, r11
    5e8c:	b3 94       	inc	r11
    5e8e:	1c ce       	rjmp	.-968    	; 0x5ac8 <ParseReceived+0x143e>
    5e90:	11 96       	adiw	r26, 0x01	; 1
    5e92:	2c 91       	ld	r18, X
    5e94:	01 96       	adiw	r24, 0x01	; 1
    5e96:	bb 24       	eor	r11, r11
    5e98:	b3 94       	inc	r11
    5e9a:	b2 cd       	rjmp	.-1180   	; 0x5a00 <ParseReceived+0x1376>
    5e9c:	21 81       	ldd	r18, Z+1	; 0x01
    5e9e:	01 96       	adiw	r24, 0x01	; 1
    5ea0:	bb 24       	eor	r11, r11
    5ea2:	b3 94       	inc	r11
    5ea4:	4a cd       	rjmp	.-1388   	; 0x593a <ParseReceived+0x12b0>
    5ea6:	11 96       	adiw	r26, 0x01	; 1
    5ea8:	2c 91       	ld	r18, X
    5eaa:	01 96       	adiw	r24, 0x01	; 1
    5eac:	bb 24       	eor	r11, r11
    5eae:	b3 94       	inc	r11
    5eb0:	eb cc       	rjmp	.-1578   	; 0x5888 <ParseReceived+0x11fe>
    5eb2:	88 e0       	ldi	r24, 0x08	; 8
    5eb4:	90 e0       	ldi	r25, 0x00	; 0
    5eb6:	c2 cc       	rjmp	.-1660   	; 0x583c <ParseReceived+0x11b2>
    5eb8:	21 81       	ldd	r18, Z+1	; 0x01
    5eba:	01 96       	adiw	r24, 0x01	; 1
    5ebc:	bb 24       	eor	r11, r11
    5ebe:	b3 94       	inc	r11
    5ec0:	52 ce       	rjmp	.-860    	; 0x5b66 <ParseReceived+0x14dc>
    5ec2:	c8 01       	movw	r24, r16
    5ec4:	0e 94 3f 23 	call	0x467e	; 0x467e <ESP8266_Callback_ServerConnectionClosed>
    5ec8:	0c 94 b7 24 	jmp	0x496e	; 0x496e <ParseReceived+0x2e4>
    5ecc:	97 01       	movw	r18, r14
    5ece:	30 c9       	rjmp	.-3488   	; 0x5130 <ParseReceived+0xaa6>
    5ed0:	21 81       	ldd	r18, Z+1	; 0x01
    5ed2:	31 96       	adiw	r30, 0x01	; 1
    5ed4:	dd 24       	eor	r13, r13
    5ed6:	d3 94       	inc	r13
    5ed8:	81 cf       	rjmp	.-254    	; 0x5ddc <ParseReceived+0x1752>
    5eda:	f9 01       	movw	r30, r18
    5edc:	31 96       	adiw	r30, 0x01	; 1
    5ede:	d9 01       	movw	r26, r18
    5ee0:	11 96       	adiw	r26, 0x01	; 1
    5ee2:	dc 90       	ld	r13, X
    5ee4:	62 e0       	ldi	r22, 0x02	; 2
    5ee6:	70 e0       	ldi	r23, 0x00	; 0
    5ee8:	cc 24       	eor	r12, r12
    5eea:	c3 94       	inc	r12
    5eec:	2a cf       	rjmp	.-428    	; 0x5d42 <ParseReceived+0x16b8>
    5eee:	bc 2c       	mov	r11, r12
    5ef0:	80 e0       	ldi	r24, 0x00	; 0
    5ef2:	90 e0       	ldi	r25, 0x00	; 0
    5ef4:	dc 01       	movw	r26, r24
    5ef6:	5c cf       	rjmp	.-328    	; 0x5db0 <ParseReceived+0x1726>
    5ef8:	80 e0       	ldi	r24, 0x00	; 0
    5efa:	90 e0       	ldi	r25, 0x00	; 0
    5efc:	dc 01       	movw	r26, r24
    5efe:	a0 ca       	rjmp	.-2752   	; 0x5440 <ParseReceived+0xdb6>
    5f00:	80 e0       	ldi	r24, 0x00	; 0
    5f02:	90 e0       	ldi	r25, 0x00	; 0
    5f04:	dc 01       	movw	r26, r24
    5f06:	59 ca       	rjmp	.-2894   	; 0x53ba <ParseReceived+0xd30>
    5f08:	80 e0       	ldi	r24, 0x00	; 0
    5f0a:	90 e0       	ldi	r25, 0x00	; 0
    5f0c:	dc 01       	movw	r26, r24
    5f0e:	09 ca       	rjmp	.-3054   	; 0x5322 <ParseReceived+0xc98>
    5f10:	80 e0       	ldi	r24, 0x00	; 0
    5f12:	90 e0       	ldi	r25, 0x00	; 0
    5f14:	dc 01       	movw	r26, r24
    5f16:	b9 c9       	rjmp	.-3214   	; 0x528a <ParseReceived+0xc00>
    5f18:	20 e0       	ldi	r18, 0x00	; 0
    5f1a:	30 e0       	ldi	r19, 0x00	; 0
    5f1c:	3f c9       	rjmp	.-3458   	; 0x519c <ParseReceived+0xb12>
    5f1e:	20 e0       	ldi	r18, 0x00	; 0
    5f20:	30 e0       	ldi	r19, 0x00	; 0
    5f22:	d8 01       	movw	r26, r16
    5f24:	a5 50       	subi	r26, 0x05	; 5
    5f26:	bf 4f       	sbci	r27, 0xFF	; 255
    5f28:	6a c9       	rjmp	.-3372   	; 0x51fe <ParseReceived+0xb74>
    5f2a:	80 e0       	ldi	r24, 0x00	; 0
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    5f2e:	dc 01       	movw	r26, r24
    5f30:	49 ce       	rjmp	.-878    	; 0x5bc4 <ParseReceived+0x153a>
    5f32:	80 e0       	ldi	r24, 0x00	; 0
    5f34:	90 e0       	ldi	r25, 0x00	; 0
    5f36:	dc 01       	movw	r26, r24
    5f38:	2f cd       	rjmp	.-1442   	; 0x5998 <ParseReceived+0x130e>
    5f3a:	80 e0       	ldi	r24, 0x00	; 0
    5f3c:	90 e0       	ldi	r25, 0x00	; 0
    5f3e:	dc 01       	movw	r26, r24
    5f40:	d2 cc       	rjmp	.-1628   	; 0x58e6 <ParseReceived+0x125c>
    5f42:	80 e0       	ldi	r24, 0x00	; 0
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	dc 01       	movw	r26, r24
    5f48:	ee cd       	rjmp	.-1060   	; 0x5b26 <ParseReceived+0x149c>
    5f4a:	80 e0       	ldi	r24, 0x00	; 0
    5f4c:	90 e0       	ldi	r25, 0x00	; 0
    5f4e:	dc 01       	movw	r26, r24
    5f50:	86 cd       	rjmp	.-1268   	; 0x5a5e <ParseReceived+0x13d4>

00005f52 <ESP8266_Update>:
    5f52:	2f 92       	push	r2
    5f54:	3f 92       	push	r3
    5f56:	4f 92       	push	r4
    5f58:	5f 92       	push	r5
    5f5a:	7f 92       	push	r7
    5f5c:	8f 92       	push	r8
    5f5e:	9f 92       	push	r9
    5f60:	af 92       	push	r10
    5f62:	bf 92       	push	r11
    5f64:	cf 92       	push	r12
    5f66:	df 92       	push	r13
    5f68:	ef 92       	push	r14
    5f6a:	ff 92       	push	r15
    5f6c:	0f 93       	push	r16
    5f6e:	1f 93       	push	r17
    5f70:	cf 93       	push	r28
    5f72:	df 93       	push	r29
    5f74:	cd b7       	in	r28, 0x3d	; 61
    5f76:	de b7       	in	r29, 0x3e	; 62
    5f78:	c3 58       	subi	r28, 0x83	; 131
    5f7a:	d1 09       	sbc	r29, r1
    5f7c:	cd bf       	out	0x3d, r28	; 61
    5f7e:	de bf       	out	0x3e, r29	; 62
    5f80:	8c 01       	movw	r16, r24
    5f82:	fc 01       	movw	r30, r24
    5f84:	86 89       	ldd	r24, Z+22	; 0x16
    5f86:	97 89       	ldd	r25, Z+23	; 0x17
    5f88:	a0 8d       	ldd	r26, Z+24	; 0x18
    5f8a:	b1 8d       	ldd	r27, Z+25	; 0x19
    5f8c:	00 97       	sbiw	r24, 0x00	; 0
    5f8e:	a1 05       	cpc	r26, r1
    5f90:	b1 05       	cpc	r27, r1
    5f92:	09 f0       	breq	.+2      	; 0x5f96 <ESP8266_Update+0x44>
    5f94:	03 c2       	rjmp	.+1030   	; 0x639c <ESP8266_Update+0x44a>
    5f96:	80 e3       	ldi	r24, 0x30	; 48
    5f98:	95 e7       	ldi	r25, 0x75	; 117
    5f9a:	a0 e0       	ldi	r26, 0x00	; 0
    5f9c:	b0 e0       	ldi	r27, 0x00	; 0
    5f9e:	86 8b       	std	Z+22, r24	; 0x16
    5fa0:	97 8b       	std	Z+23, r25	; 0x17
    5fa2:	a0 8f       	std	Z+24, r26	; 0x18
    5fa4:	b1 8f       	std	Z+25, r27	; 0x19
    5fa6:	b0 e3       	ldi	r27, 0x30	; 48
    5fa8:	cb 2e       	mov	r12, r27
    5faa:	b5 e7       	ldi	r27, 0x75	; 117
    5fac:	db 2e       	mov	r13, r27
    5fae:	e1 2c       	mov	r14, r1
    5fb0:	f1 2c       	mov	r15, r1
    5fb2:	f8 01       	movw	r30, r16
    5fb4:	86 85       	ldd	r24, Z+14	; 0x0e
    5fb6:	97 85       	ldd	r25, Z+15	; 0x0f
    5fb8:	a0 89       	ldd	r26, Z+16	; 0x10
    5fba:	b1 89       	ldd	r27, Z+17	; 0x11
    5fbc:	42 85       	ldd	r20, Z+10	; 0x0a
    5fbe:	53 85       	ldd	r21, Z+11	; 0x0b
    5fc0:	64 85       	ldd	r22, Z+12	; 0x0c
    5fc2:	75 85       	ldd	r23, Z+13	; 0x0d
    5fc4:	84 1b       	sub	r24, r20
    5fc6:	95 0b       	sbc	r25, r21
    5fc8:	a6 0b       	sbc	r26, r22
    5fca:	b7 0b       	sbc	r27, r23
    5fcc:	c8 16       	cp	r12, r24
    5fce:	d9 06       	cpc	r13, r25
    5fd0:	ea 06       	cpc	r14, r26
    5fd2:	fb 06       	cpc	r15, r27
    5fd4:	58 f4       	brcc	.+22     	; 0x5fec <ESP8266_Update+0x9a>
    5fd6:	84 81       	ldd	r24, Z+4	; 0x04
    5fd8:	95 81       	ldd	r25, Z+5	; 0x05
    5fda:	a6 81       	ldd	r26, Z+6	; 0x06
    5fdc:	b7 81       	ldd	r27, Z+7	; 0x07
    5fde:	14 82       	std	Z+4, r1	; 0x04
    5fe0:	15 82       	std	Z+5, r1	; 0x05
    5fe2:	16 82       	std	Z+6, r1	; 0x06
    5fe4:	17 82       	std	Z+7, r1	; 0x07
    5fe6:	8a 30       	cpi	r24, 0x0A	; 10
    5fe8:	09 f4       	brne	.+2      	; 0x5fec <ESP8266_Update+0x9a>
    5fea:	29 c3       	rjmp	.+1618   	; 0x663e <ESP8266_Update+0x6ec>
    5fec:	f8 01       	movw	r30, r16
    5fee:	84 81       	ldd	r24, Z+4	; 0x04
    5ff0:	95 81       	ldd	r25, Z+5	; 0x05
    5ff2:	a6 81       	ldd	r26, Z+6	; 0x06
    5ff4:	b7 81       	ldd	r27, Z+7	; 0x07
    5ff6:	4d 97       	sbiw	r24, 0x1d	; 29
    5ff8:	a1 05       	cpc	r26, r1
    5ffa:	b1 05       	cpc	r27, r1
    5ffc:	09 f4       	brne	.+2      	; 0x6000 <ESP8266_Update+0xae>
    5ffe:	7d c2       	rjmp	.+1274   	; 0x64fa <ESP8266_Update+0x5a8>
    6000:	f8 01       	movw	r30, r16
    6002:	84 81       	ldd	r24, Z+4	; 0x04
    6004:	95 81       	ldd	r25, Z+5	; 0x05
    6006:	a6 81       	ldd	r26, Z+6	; 0x06
    6008:	b7 81       	ldd	r27, Z+7	; 0x07
    600a:	41 97       	sbiw	r24, 0x11	; 17
    600c:	a1 05       	cpc	r26, r1
    600e:	b1 05       	cpc	r27, r1
    6010:	09 f4       	brne	.+2      	; 0x6014 <ESP8266_Update+0xc2>
    6012:	af c0       	rjmp	.+350    	; 0x6172 <ESP8266_Update+0x220>
    6014:	c8 01       	movw	r24, r16
    6016:	8f 5f       	subi	r24, 0xFF	; 255
    6018:	9e 4f       	sbci	r25, 0xFE	; 254
    601a:	7c 01       	movw	r14, r24
    601c:	d7 01       	movw	r26, r14
    601e:	8c 91       	ld	r24, X
    6020:	81 11       	cpse	r24, r1
    6022:	b0 c0       	rjmp	.+352    	; 0x6184 <ESP8266_Update+0x232>
    6024:	ce 01       	movw	r24, r28
    6026:	01 96       	adiw	r24, 0x01	; 1
    6028:	6c 01       	movw	r12, r24
    602a:	0a c0       	rjmp	.+20     	; 0x6040 <ESP8266_Update+0xee>
    602c:	9b 01       	movw	r18, r22
    602e:	41 e0       	ldi	r20, 0x01	; 1
    6030:	b6 01       	movw	r22, r12
    6032:	c8 01       	movw	r24, r16
    6034:	0e 94 45 23 	call	0x468a	; 0x468a <ParseReceived>
    6038:	f7 01       	movw	r30, r14
    603a:	80 81       	ld	r24, Z
    603c:	81 11       	cpse	r24, r1
    603e:	a2 c0       	rjmp	.+324    	; 0x6184 <ESP8266_Update+0x232>
    6040:	20 e8       	ldi	r18, 0x80	; 128
    6042:	30 e0       	ldi	r19, 0x00	; 0
    6044:	40 e0       	ldi	r20, 0x00	; 0
    6046:	50 e0       	ldi	r21, 0x00	; 0
    6048:	b6 01       	movw	r22, r12
    604a:	82 e9       	ldi	r24, 0x92	; 146
    604c:	94 e3       	ldi	r25, 0x34	; 52
    604e:	0e 94 9b 1c 	call	0x3936	; 0x3936 <BUFFER_ReadString>
    6052:	61 15       	cp	r22, r1
    6054:	71 05       	cpc	r23, r1
    6056:	51 f7       	brne	.-44     	; 0x602c <ESP8266_Update+0xda>
    6058:	13 c0       	rjmp	.+38     	; 0x6080 <ESP8266_Update+0x12e>
    605a:	20 e8       	ldi	r18, 0x80	; 128
    605c:	30 e0       	ldi	r19, 0x00	; 0
    605e:	40 e0       	ldi	r20, 0x00	; 0
    6060:	50 e0       	ldi	r21, 0x00	; 0
    6062:	b6 01       	movw	r22, r12
    6064:	84 ea       	ldi	r24, 0xA4	; 164
    6066:	94 e3       	ldi	r25, 0x34	; 52
    6068:	0e 94 9b 1c 	call	0x3936	; 0x3936 <BUFFER_ReadString>
    606c:	61 15       	cp	r22, r1
    606e:	71 05       	cpc	r23, r1
    6070:	09 f4       	brne	.+2      	; 0x6074 <ESP8266_Update+0x122>
    6072:	6c c3       	rjmp	.+1752   	; 0x674c <ESP8266_Update+0x7fa>
    6074:	9b 01       	movw	r18, r22
    6076:	40 e0       	ldi	r20, 0x00	; 0
    6078:	b6 01       	movw	r22, r12
    607a:	c8 01       	movw	r24, r16
    607c:	0e 94 45 23 	call	0x468a	; 0x468a <ParseReceived>
    6080:	d7 01       	movw	r26, r14
    6082:	8c 91       	ld	r24, X
    6084:	81 11       	cpse	r24, r1
    6086:	7e c0       	rjmp	.+252    	; 0x6184 <ESP8266_Update+0x232>
    6088:	f8 01       	movw	r30, r16
    608a:	84 81       	ldd	r24, Z+4	; 0x04
    608c:	95 81       	ldd	r25, Z+5	; 0x05
    608e:	a6 81       	ldd	r26, Z+6	; 0x06
    6090:	b7 81       	ldd	r27, Z+7	; 0x07
    6092:	89 2b       	or	r24, r25
    6094:	8a 2b       	or	r24, r26
    6096:	8b 2b       	or	r24, r27
    6098:	01 f3       	breq	.-64     	; 0x605a <ESP8266_Update+0x108>
    609a:	f8 01       	movw	r30, r16
    609c:	82 8d       	ldd	r24, Z+26	; 0x1a
    609e:	88 23       	and	r24, r24
    60a0:	19 f0       	breq	.+6      	; 0x60a8 <ESP8266_Update+0x156>
    60a2:	83 a9       	ldd	r24, Z+51	; 0x33
    60a4:	81 11       	cpse	r24, r1
    60a6:	cb c1       	rjmp	.+918    	; 0x643e <ESP8266_Update+0x4ec>
    60a8:	d8 01       	movw	r26, r16
    60aa:	df 96       	adiw	r26, 0x3f	; 63
    60ac:	8c 91       	ld	r24, X
    60ae:	88 23       	and	r24, r24
    60b0:	31 f0       	breq	.+12     	; 0x60be <ESP8266_Update+0x16c>
    60b2:	f8 01       	movw	r30, r16
    60b4:	e8 5a       	subi	r30, 0xA8	; 168
    60b6:	ff 4f       	sbci	r31, 0xFF	; 255
    60b8:	80 81       	ld	r24, Z
    60ba:	81 11       	cpse	r24, r1
    60bc:	a7 c1       	rjmp	.+846    	; 0x640c <ESP8266_Update+0x4ba>
    60be:	f8 01       	movw	r30, r16
    60c0:	ec 59       	subi	r30, 0x9C	; 156
    60c2:	ff 4f       	sbci	r31, 0xFF	; 255
    60c4:	80 81       	ld	r24, Z
    60c6:	88 23       	and	r24, r24
    60c8:	39 f0       	breq	.+14     	; 0x60d8 <ESP8266_Update+0x186>
    60ca:	98 01       	movw	r18, r16
    60cc:	23 58       	subi	r18, 0x83	; 131
    60ce:	3f 4f       	sbci	r19, 0xFF	; 255
    60d0:	d9 01       	movw	r26, r18
    60d2:	8c 91       	ld	r24, X
    60d4:	81 11       	cpse	r24, r1
    60d6:	82 c1       	rjmp	.+772    	; 0x63dc <ESP8266_Update+0x48a>
    60d8:	f8 01       	movw	r30, r16
    60da:	e7 57       	subi	r30, 0x77	; 119
    60dc:	ff 4f       	sbci	r31, 0xFF	; 255
    60de:	80 81       	ld	r24, Z
    60e0:	88 23       	and	r24, r24
    60e2:	39 f0       	breq	.+14     	; 0x60f2 <ESP8266_Update+0x1a0>
    60e4:	98 01       	movw	r18, r16
    60e6:	2e 55       	subi	r18, 0x5E	; 94
    60e8:	3f 4f       	sbci	r19, 0xFF	; 255
    60ea:	d9 01       	movw	r26, r18
    60ec:	8c 91       	ld	r24, X
    60ee:	81 11       	cpse	r24, r1
    60f0:	5d c1       	rjmp	.+698    	; 0x63ac <ESP8266_Update+0x45a>
    60f2:	f8 01       	movw	r30, r16
    60f4:	e2 55       	subi	r30, 0x52	; 82
    60f6:	ff 4f       	sbci	r31, 0xFF	; 255
    60f8:	80 81       	ld	r24, Z
    60fa:	88 23       	and	r24, r24
    60fc:	f9 f0       	breq	.+62     	; 0x613c <ESP8266_Update+0x1ea>
    60fe:	98 01       	movw	r18, r16
    6100:	29 53       	subi	r18, 0x39	; 57
    6102:	3f 4f       	sbci	r19, 0xFF	; 255
    6104:	d9 01       	movw	r26, r18
    6106:	8c 91       	ld	r24, X
    6108:	88 23       	and	r24, r24
    610a:	c1 f0       	breq	.+48     	; 0x613c <ESP8266_Update+0x1ea>
    610c:	a8 01       	movw	r20, r16
    610e:	40 55       	subi	r20, 0x50	; 80
    6110:	5f 4f       	sbci	r21, 0xFF	; 255
    6112:	da 01       	movw	r26, r20
    6114:	8c 91       	ld	r24, X
    6116:	88 23       	and	r24, r24
    6118:	09 f4       	brne	.+2      	; 0x611c <ESP8266_Update+0x1ca>
    611a:	69 c2       	rjmp	.+1234   	; 0x65ee <ESP8266_Update+0x69c>
    611c:	d9 01       	movw	r26, r18
    611e:	1c 92       	st	X, r1
    6120:	da 01       	movw	r26, r20
    6122:	8c 91       	ld	r24, X
    6124:	d8 01       	movw	r26, r16
    6126:	ae 53       	subi	r26, 0x3E	; 62
    6128:	bf 4f       	sbci	r27, 0xFF	; 255
    612a:	4d 91       	ld	r20, X+
    612c:	5c 91       	ld	r21, X
    612e:	bf 01       	movw	r22, r30
    6130:	88 23       	and	r24, r24
    6132:	09 f4       	brne	.+2      	; 0x6136 <ESP8266_Update+0x1e4>
    6134:	9a c2       	rjmp	.+1332   	; 0x666a <ESP8266_Update+0x718>
    6136:	c8 01       	movw	r24, r16
    6138:	0e 94 18 3c 	call	0x7830	; 0x7830 <ESP8266_Callback_ClientConnectionDataReceived>
    613c:	f8 01       	movw	r30, r16
    613e:	ef 5c       	subi	r30, 0xCF	; 207
    6140:	fe 4f       	sbci	r31, 0xFE	; 254
    6142:	10 82       	st	Z, r1
    6144:	80 e0       	ldi	r24, 0x00	; 0
    6146:	cd 57       	subi	r28, 0x7D	; 125
    6148:	df 4f       	sbci	r29, 0xFF	; 255
    614a:	cd bf       	out	0x3d, r28	; 61
    614c:	de bf       	out	0x3e, r29	; 62
    614e:	df 91       	pop	r29
    6150:	cf 91       	pop	r28
    6152:	1f 91       	pop	r17
    6154:	0f 91       	pop	r16
    6156:	ff 90       	pop	r15
    6158:	ef 90       	pop	r14
    615a:	df 90       	pop	r13
    615c:	cf 90       	pop	r12
    615e:	bf 90       	pop	r11
    6160:	af 90       	pop	r10
    6162:	9f 90       	pop	r9
    6164:	8f 90       	pop	r8
    6166:	7f 90       	pop	r7
    6168:	5f 90       	pop	r5
    616a:	4f 90       	pop	r4
    616c:	3f 90       	pop	r3
    616e:	2f 90       	pop	r2
    6170:	08 95       	ret
    6172:	78 01       	movw	r14, r16
    6174:	91 e0       	ldi	r25, 0x01	; 1
    6176:	e9 0e       	add	r14, r25
    6178:	f9 1e       	adc	r15, r25
    617a:	d7 01       	movw	r26, r14
    617c:	8c 91       	ld	r24, X
    617e:	88 23       	and	r24, r24
    6180:	09 f4       	brne	.+2      	; 0x6184 <ESP8266_Update+0x232>
    6182:	42 c2       	rjmp	.+1156   	; 0x6608 <ESP8266_Update+0x6b6>
    6184:	f8 01       	movw	r30, r16
    6186:	e9 5f       	subi	r30, 0xF9	; 249
    6188:	fe 4f       	sbci	r31, 0xFE	; 254
    618a:	80 81       	ld	r24, Z
    618c:	81 11       	cpse	r24, r1
    618e:	09 c1       	rjmp	.+530    	; 0x63a2 <ESP8266_Update+0x450>
    6190:	e4 ea       	ldi	r30, 0xA4	; 164
    6192:	8e 2e       	mov	r8, r30
    6194:	e4 e3       	ldi	r30, 0x34	; 52
    6196:	9e 2e       	mov	r9, r30
    6198:	68 01       	movw	r12, r16
    619a:	be ef       	ldi	r27, 0xFE	; 254
    619c:	cb 1a       	sub	r12, r27
    619e:	db 0a       	sbc	r13, r27
    61a0:	f6 01       	movw	r30, r12
    61a2:	80 81       	ld	r24, Z
    61a4:	91 81       	ldd	r25, Z+1	; 0x01
    61a6:	58 01       	movw	r10, r16
    61a8:	fa ef       	ldi	r31, 0xFA	; 250
    61aa:	af 1a       	sub	r10, r31
    61ac:	fe ef       	ldi	r31, 0xFE	; 254
    61ae:	bf 0a       	sbc	r11, r31
    61b0:	d5 01       	movw	r26, r10
    61b2:	6c 91       	ld	r22, X
    61b4:	f8 01       	movw	r30, r16
    61b6:	b5 e2       	ldi	r27, 0x25	; 37
    61b8:	6b 9f       	mul	r22, r27
    61ba:	e0 0d       	add	r30, r0
    61bc:	f1 1d       	adc	r31, r1
    61be:	11 24       	eor	r1, r1
    61c0:	24 a1       	ldd	r18, Z+36	; 0x24
    61c2:	35 a1       	ldd	r19, Z+37	; 0x25
    61c4:	46 a1       	ldd	r20, Z+38	; 0x26
    61c6:	57 a1       	ldd	r21, Z+39	; 0x27
    61c8:	f8 01       	movw	r30, r16
    61ca:	ec 5f       	subi	r30, 0xFC	; 252
    61cc:	fe 4f       	sbci	r31, 0xFE	; 254
    61ce:	ce 57       	subi	r28, 0x7E	; 126
    61d0:	df 4f       	sbci	r29, 0xFF	; 255
    61d2:	e8 83       	st	Y, r30
    61d4:	f9 83       	std	Y+1, r31	; 0x01
    61d6:	c2 58       	subi	r28, 0x82	; 130
    61d8:	d0 40       	sbci	r29, 0x00	; 0
    61da:	75 e2       	ldi	r23, 0x25	; 37
    61dc:	77 2e       	mov	r7, r23
    61de:	a0 e0       	ldi	r26, 0x00	; 0
    61e0:	b0 e0       	ldi	r27, 0x00	; 0
    61e2:	82 17       	cp	r24, r18
    61e4:	93 07       	cpc	r25, r19
    61e6:	a4 07       	cpc	r26, r20
    61e8:	b5 07       	cpc	r27, r21
    61ea:	08 f0       	brcs	.+2      	; 0x61ee <ESP8266_Update+0x29c>
    61ec:	52 c0       	rjmp	.+164    	; 0x6292 <ESP8266_Update+0x340>
    61ee:	c4 01       	movw	r24, r8
    61f0:	0e 94 34 1a 	call	0x3468	; 0x3468 <BUFFER_GetFull>
    61f4:	67 2b       	or	r22, r23
    61f6:	68 2b       	or	r22, r24
    61f8:	69 2b       	or	r22, r25
    61fa:	09 f4       	brne	.+2      	; 0x61fe <ESP8266_Update+0x2ac>
    61fc:	6f c1       	rjmp	.+734    	; 0x64dc <ESP8266_Update+0x58a>
    61fe:	21 e0       	ldi	r18, 0x01	; 1
    6200:	30 e0       	ldi	r19, 0x00	; 0
    6202:	40 e0       	ldi	r20, 0x00	; 0
    6204:	50 e0       	ldi	r21, 0x00	; 0
    6206:	be 01       	movw	r22, r28
    6208:	6f 57       	subi	r22, 0x7F	; 127
    620a:	7f 4f       	sbci	r23, 0xFF	; 255
    620c:	c4 01       	movw	r24, r8
    620e:	0e 94 78 19 	call	0x32f0	; 0x32f0 <BUFFER_Read>
    6212:	cf 57       	subi	r28, 0x7F	; 127
    6214:	df 4f       	sbci	r29, 0xFF	; 255
    6216:	28 81       	ld	r18, Y
    6218:	c1 58       	subi	r28, 0x81	; 129
    621a:	d0 40       	sbci	r29, 0x00	; 0
    621c:	d5 01       	movw	r26, r10
    621e:	8c 91       	ld	r24, X
    6220:	f8 01       	movw	r30, r16
    6222:	78 9e       	mul	r7, r24
    6224:	e0 0d       	add	r30, r0
    6226:	f1 1d       	adc	r31, r1
    6228:	11 24       	eor	r1, r1
    622a:	06 a4       	ldd	r0, Z+46	; 0x2e
    622c:	f7 a5       	ldd	r31, Z+47	; 0x2f
    622e:	e0 2d       	mov	r30, r0
    6230:	d6 01       	movw	r26, r12
    6232:	8d 91       	ld	r24, X+
    6234:	9c 91       	ld	r25, X
    6236:	11 97       	sbiw	r26, 0x01	; 1
    6238:	e8 0f       	add	r30, r24
    623a:	f9 1f       	adc	r31, r25
    623c:	20 83       	st	Z, r18
    623e:	8d 91       	ld	r24, X+
    6240:	9c 91       	ld	r25, X
    6242:	11 97       	sbiw	r26, 0x01	; 1
    6244:	01 96       	adiw	r24, 0x01	; 1
    6246:	8d 93       	st	X+, r24
    6248:	9c 93       	st	X, r25
    624a:	ce 57       	subi	r28, 0x7E	; 126
    624c:	df 4f       	sbci	r29, 0xFF	; 255
    624e:	e8 81       	ld	r30, Y
    6250:	f9 81       	ldd	r31, Y+1	; 0x01
    6252:	c2 58       	subi	r28, 0x82	; 130
    6254:	d0 40       	sbci	r29, 0x00	; 0
    6256:	20 81       	ld	r18, Z
    6258:	31 81       	ldd	r19, Z+1	; 0x01
    625a:	2f 5f       	subi	r18, 0xFF	; 255
    625c:	3f 4f       	sbci	r19, 0xFF	; 255
    625e:	20 83       	st	Z, r18
    6260:	31 83       	std	Z+1, r19	; 0x01
    6262:	8f 3f       	cpi	r24, 0xFF	; 255
    6264:	91 05       	cpc	r25, r1
    6266:	11 f0       	breq	.+4      	; 0x626c <ESP8266_Update+0x31a>
    6268:	08 f0       	brcs	.+2      	; 0x626c <ESP8266_Update+0x31a>
    626a:	fe c0       	rjmp	.+508    	; 0x6468 <ESP8266_Update+0x516>
    626c:	d5 01       	movw	r26, r10
    626e:	6c 91       	ld	r22, X
    6270:	f8 01       	movw	r30, r16
    6272:	76 9e       	mul	r7, r22
    6274:	e0 0d       	add	r30, r0
    6276:	f1 1d       	adc	r31, r1
    6278:	11 24       	eor	r1, r1
    627a:	24 a1       	ldd	r18, Z+36	; 0x24
    627c:	35 a1       	ldd	r19, Z+37	; 0x25
    627e:	46 a1       	ldd	r20, Z+38	; 0x26
    6280:	57 a1       	ldd	r21, Z+39	; 0x27
    6282:	a0 e0       	ldi	r26, 0x00	; 0
    6284:	b0 e0       	ldi	r27, 0x00	; 0
    6286:	82 17       	cp	r24, r18
    6288:	93 07       	cpc	r25, r19
    628a:	a4 07       	cpc	r26, r20
    628c:	b5 07       	cpc	r27, r21
    628e:	08 f4       	brcc	.+2      	; 0x6292 <ESP8266_Update+0x340>
    6290:	ae cf       	rjmp	.-164    	; 0x61ee <ESP8266_Update+0x29c>
    6292:	a6 2e       	mov	r10, r22
    6294:	b1 2c       	mov	r11, r1
    6296:	ce 57       	subi	r28, 0x7E	; 126
    6298:	df 4f       	sbci	r29, 0xFF	; 255
    629a:	e8 81       	ld	r30, Y
    629c:	f9 81       	ldd	r31, Y+1	; 0x01
    629e:	c2 58       	subi	r28, 0x82	; 130
    62a0:	d0 40       	sbci	r29, 0x00	; 0
    62a2:	80 81       	ld	r24, Z
    62a4:	91 81       	ldd	r25, Z+1	; 0x01
    62a6:	a0 e0       	ldi	r26, 0x00	; 0
    62a8:	b0 e0       	ldi	r27, 0x00	; 0
    62aa:	82 17       	cp	r24, r18
    62ac:	93 07       	cpc	r25, r19
    62ae:	a4 07       	cpc	r26, r20
    62b0:	b5 07       	cpc	r27, r21
    62b2:	08 f4       	brcc	.+2      	; 0x62b6 <ESP8266_Update+0x364>
    62b4:	f2 ce       	rjmp	.-540    	; 0x609a <ESP8266_Update+0x148>
    62b6:	d7 01       	movw	r26, r14
    62b8:	1c 92       	st	X, r1
    62ba:	85 e2       	ldi	r24, 0x25	; 37
    62bc:	8a 9d       	mul	r24, r10
    62be:	f0 01       	movw	r30, r0
    62c0:	8b 9d       	mul	r24, r11
    62c2:	f0 0d       	add	r31, r0
    62c4:	11 24       	eor	r1, r1
    62c6:	e0 0f       	add	r30, r16
    62c8:	f1 1f       	adc	r31, r17
    62ca:	d6 01       	movw	r26, r12
    62cc:	8d 91       	ld	r24, X+
    62ce:	9c 91       	ld	r25, X
    62d0:	80 ab       	std	Z+48, r24	; 0x30
    62d2:	91 ab       	std	Z+49, r25	; 0x31
    62d4:	81 e0       	ldi	r24, 0x01	; 1
    62d6:	82 ab       	std	Z+50, r24	; 0x32
    62d8:	85 ad       	ldd	r24, Z+61	; 0x3d
    62da:	88 23       	and	r24, r24
    62dc:	09 f4       	brne	.+2      	; 0x62e0 <ESP8266_Update+0x38e>
    62de:	53 c0       	rjmp	.+166    	; 0x6386 <ESP8266_Update+0x434>
    62e0:	63 ee       	ldi	r22, 0xE3	; 227
    62e2:	73 e2       	ldi	r23, 0x23	; 35
    62e4:	86 a5       	ldd	r24, Z+46	; 0x2e
    62e6:	97 a5       	ldd	r25, Z+47	; 0x2f
    62e8:	0e 94 c4 44 	call	0x8988	; 0x8988 <strstr>
    62ec:	00 97       	sbiw	r24, 0x00	; 0
    62ee:	09 f4       	brne	.+2      	; 0x62f2 <ESP8266_Update+0x3a0>
    62f0:	4a c0       	rjmp	.+148    	; 0x6386 <ESP8266_Update+0x434>
    62f2:	fc 01       	movw	r30, r24
    62f4:	20 89       	ldd	r18, Z+16	; 0x10
    62f6:	2d 32       	cpi	r18, 0x2D	; 45
    62f8:	09 f4       	brne	.+2      	; 0x62fc <ESP8266_Update+0x3aa>
    62fa:	db c1       	rjmp	.+950    	; 0x66b2 <ESP8266_Update+0x760>
    62fc:	70 96       	adiw	r30, 0x10	; 16
    62fe:	f1 2c       	mov	r15, r1
    6300:	80 ed       	ldi	r24, 0xD0	; 208
    6302:	82 0f       	add	r24, r18
    6304:	8a 30       	cpi	r24, 0x0A	; 10
    6306:	08 f0       	brcs	.+2      	; 0x630a <ESP8266_Update+0x3b8>
    6308:	03 c2       	rjmp	.+1030   	; 0x6710 <ESP8266_Update+0x7be>
    630a:	31 96       	adiw	r30, 0x01	; 1
    630c:	80 e0       	ldi	r24, 0x00	; 0
    630e:	90 e0       	ldi	r25, 0x00	; 0
    6310:	dc 01       	movw	r26, r24
    6312:	ac 01       	movw	r20, r24
    6314:	bd 01       	movw	r22, r26
    6316:	44 0f       	add	r20, r20
    6318:	55 1f       	adc	r21, r21
    631a:	66 1f       	adc	r22, r22
    631c:	77 1f       	adc	r23, r23
    631e:	db 01       	movw	r26, r22
    6320:	ca 01       	movw	r24, r20
    6322:	88 0f       	add	r24, r24
    6324:	99 1f       	adc	r25, r25
    6326:	aa 1f       	adc	r26, r26
    6328:	bb 1f       	adc	r27, r27
    632a:	88 0f       	add	r24, r24
    632c:	99 1f       	adc	r25, r25
    632e:	aa 1f       	adc	r26, r26
    6330:	bb 1f       	adc	r27, r27
    6332:	84 0f       	add	r24, r20
    6334:	95 1f       	adc	r25, r21
    6336:	a6 1f       	adc	r26, r22
    6338:	b7 1f       	adc	r27, r23
    633a:	42 2f       	mov	r20, r18
    633c:	50 e0       	ldi	r21, 0x00	; 0
    633e:	40 53       	subi	r20, 0x30	; 48
    6340:	51 09       	sbc	r21, r1
    6342:	66 27       	eor	r22, r22
    6344:	57 fd       	sbrc	r21, 7
    6346:	60 95       	com	r22
    6348:	76 2f       	mov	r23, r22
    634a:	84 0f       	add	r24, r20
    634c:	95 1f       	adc	r25, r21
    634e:	a6 1f       	adc	r26, r22
    6350:	b7 1f       	adc	r27, r23
    6352:	21 91       	ld	r18, Z+
    6354:	30 ed       	ldi	r19, 0xD0	; 208
    6356:	32 0f       	add	r19, r18
    6358:	3a 30       	cpi	r19, 0x0A	; 10
    635a:	d8 f2       	brcs	.-74     	; 0x6312 <ESP8266_Update+0x3c0>
    635c:	ff 20       	and	r15, r15
    635e:	39 f0       	breq	.+14     	; 0x636e <ESP8266_Update+0x41c>
    6360:	b0 95       	com	r27
    6362:	a0 95       	com	r26
    6364:	90 95       	com	r25
    6366:	81 95       	neg	r24
    6368:	9f 4f       	sbci	r25, 0xFF	; 255
    636a:	af 4f       	sbci	r26, 0xFF	; 255
    636c:	bf 4f       	sbci	r27, 0xFF	; 255
    636e:	25 e2       	ldi	r18, 0x25	; 37
    6370:	2a 9d       	mul	r18, r10
    6372:	f0 01       	movw	r30, r0
    6374:	2b 9d       	mul	r18, r11
    6376:	f0 0d       	add	r31, r0
    6378:	11 24       	eor	r1, r1
    637a:	e0 0f       	add	r30, r16
    637c:	f1 1f       	adc	r31, r17
    637e:	84 ab       	std	Z+52, r24	; 0x34
    6380:	95 ab       	std	Z+53, r25	; 0x35
    6382:	a6 ab       	std	Z+54, r26	; 0x36
    6384:	b7 ab       	std	Z+55, r27	; 0x37
    6386:	85 e2       	ldi	r24, 0x25	; 37
    6388:	8a 9d       	mul	r24, r10
    638a:	f0 01       	movw	r30, r0
    638c:	8b 9d       	mul	r24, r11
    638e:	f0 0d       	add	r31, r0
    6390:	11 24       	eor	r1, r1
    6392:	e0 0f       	add	r30, r16
    6394:	f1 1f       	adc	r31, r17
    6396:	81 e0       	ldi	r24, 0x01	; 1
    6398:	83 ab       	std	Z+51, r24	; 0x33
    639a:	7f ce       	rjmp	.-770    	; 0x609a <ESP8266_Update+0x148>
    639c:	6c 01       	movw	r12, r24
    639e:	7d 01       	movw	r14, r26
    63a0:	08 ce       	rjmp	.-1008   	; 0x5fb2 <ESP8266_Update+0x60>
    63a2:	f2 e9       	ldi	r31, 0x92	; 146
    63a4:	8f 2e       	mov	r8, r31
    63a6:	f4 e3       	ldi	r31, 0x34	; 52
    63a8:	9f 2e       	mov	r9, r31
    63aa:	f6 ce       	rjmp	.-532    	; 0x6198 <ESP8266_Update+0x246>
    63ac:	a8 01       	movw	r20, r16
    63ae:	45 57       	subi	r20, 0x75	; 117
    63b0:	5f 4f       	sbci	r21, 0xFF	; 255
    63b2:	da 01       	movw	r26, r20
    63b4:	8c 91       	ld	r24, X
    63b6:	88 23       	and	r24, r24
    63b8:	09 f4       	brne	.+2      	; 0x63bc <ESP8266_Update+0x46a>
    63ba:	0c c1       	rjmp	.+536    	; 0x65d4 <ESP8266_Update+0x682>
    63bc:	d9 01       	movw	r26, r18
    63be:	1c 92       	st	X, r1
    63c0:	da 01       	movw	r26, r20
    63c2:	8c 91       	ld	r24, X
    63c4:	d8 01       	movw	r26, r16
    63c6:	a3 56       	subi	r26, 0x63	; 99
    63c8:	bf 4f       	sbci	r27, 0xFF	; 255
    63ca:	4d 91       	ld	r20, X+
    63cc:	5c 91       	ld	r21, X
    63ce:	bf 01       	movw	r22, r30
    63d0:	81 11       	cpse	r24, r1
    63d2:	53 c1       	rjmp	.+678    	; 0x667a <ESP8266_Update+0x728>
    63d4:	c8 01       	movw	r24, r16
    63d6:	0e 94 40 23 	call	0x4680	; 0x4680 <ESP8266_Callback_ServerConnectionDataReceived>
    63da:	8b ce       	rjmp	.-746    	; 0x60f2 <ESP8266_Update+0x1a0>
    63dc:	a8 01       	movw	r20, r16
    63de:	4a 59       	subi	r20, 0x9A	; 154
    63e0:	5f 4f       	sbci	r21, 0xFF	; 255
    63e2:	da 01       	movw	r26, r20
    63e4:	8c 91       	ld	r24, X
    63e6:	88 23       	and	r24, r24
    63e8:	09 f4       	brne	.+2      	; 0x63ec <ESP8266_Update+0x49a>
    63ea:	e7 c0       	rjmp	.+462    	; 0x65ba <ESP8266_Update+0x668>
    63ec:	d9 01       	movw	r26, r18
    63ee:	1c 92       	st	X, r1
    63f0:	da 01       	movw	r26, r20
    63f2:	8c 91       	ld	r24, X
    63f4:	d8 01       	movw	r26, r16
    63f6:	a8 58       	subi	r26, 0x88	; 136
    63f8:	bf 4f       	sbci	r27, 0xFF	; 255
    63fa:	4d 91       	ld	r20, X+
    63fc:	5c 91       	ld	r21, X
    63fe:	bf 01       	movw	r22, r30
    6400:	81 11       	cpse	r24, r1
    6402:	37 c1       	rjmp	.+622    	; 0x6672 <ESP8266_Update+0x720>
    6404:	c8 01       	movw	r24, r16
    6406:	0e 94 40 23 	call	0x4680	; 0x4680 <ESP8266_Callback_ServerConnectionDataReceived>
    640a:	66 ce       	rjmp	.-820    	; 0x60d8 <ESP8266_Update+0x186>
    640c:	98 01       	movw	r18, r16
    640e:	2f 5b       	subi	r18, 0xBF	; 191
    6410:	3f 4f       	sbci	r19, 0xFF	; 255
    6412:	d9 01       	movw	r26, r18
    6414:	8c 91       	ld	r24, X
    6416:	88 23       	and	r24, r24
    6418:	09 f4       	brne	.+2      	; 0x641c <ESP8266_Update+0x4ca>
    641a:	c2 c0       	rjmp	.+388    	; 0x65a0 <ESP8266_Update+0x64e>
    641c:	10 82       	st	Z, r1
    641e:	f9 01       	movw	r30, r18
    6420:	80 81       	ld	r24, Z
    6422:	f8 01       	movw	r30, r16
    6424:	ed 5a       	subi	r30, 0xAD	; 173
    6426:	ff 4f       	sbci	r31, 0xFF	; 255
    6428:	40 81       	ld	r20, Z
    642a:	51 81       	ldd	r21, Z+1	; 0x01
    642c:	b8 01       	movw	r22, r16
    642e:	61 5c       	subi	r22, 0xC1	; 193
    6430:	7f 4f       	sbci	r23, 0xFF	; 255
    6432:	81 11       	cpse	r24, r1
    6434:	30 c1       	rjmp	.+608    	; 0x6696 <ESP8266_Update+0x744>
    6436:	c8 01       	movw	r24, r16
    6438:	0e 94 40 23 	call	0x4680	; 0x4680 <ESP8266_Callback_ServerConnectionDataReceived>
    643c:	40 ce       	rjmp	.-896    	; 0x60be <ESP8266_Update+0x16c>
    643e:	24 8d       	ldd	r18, Z+28	; 0x1c
    6440:	22 23       	and	r18, r18
    6442:	09 f4       	brne	.+2      	; 0x6446 <ESP8266_Update+0x4f4>
    6444:	a2 c0       	rjmp	.+324    	; 0x658a <ESP8266_Update+0x638>
    6446:	d8 01       	movw	r26, r16
    6448:	d3 96       	adiw	r26, 0x33	; 51
    644a:	1c 92       	st	X, r1
    644c:	d3 97       	sbiw	r26, 0x33	; 51
    644e:	21 11       	cpse	r18, r1
    6450:	18 c1       	rjmp	.+560    	; 0x6682 <ESP8266_Update+0x730>
    6452:	9e 96       	adiw	r26, 0x2e	; 46
    6454:	4d 91       	ld	r20, X+
    6456:	5c 91       	ld	r21, X
    6458:	9f 97       	sbiw	r26, 0x2f	; 47
    645a:	b8 01       	movw	r22, r16
    645c:	66 5e       	subi	r22, 0xE6	; 230
    645e:	7f 4f       	sbci	r23, 0xFF	; 255
    6460:	c8 01       	movw	r24, r16
    6462:	0e 94 40 23 	call	0x4680	; 0x4680 <ESP8266_Callback_ServerConnectionDataReceived>
    6466:	20 ce       	rjmp	.-960    	; 0x60a8 <ESP8266_Update+0x156>
    6468:	f5 01       	movw	r30, r10
    646a:	a0 81       	ld	r26, Z
    646c:	7a 9e       	mul	r7, r26
    646e:	b0 01       	movw	r22, r0
    6470:	11 24       	eor	r1, r1
    6472:	f8 01       	movw	r30, r16
    6474:	e6 0f       	add	r30, r22
    6476:	f7 1f       	adc	r31, r23
    6478:	24 a0       	ldd	r2, Z+36	; 0x24
    647a:	35 a0       	ldd	r3, Z+37	; 0x25
    647c:	46 a0       	ldd	r4, Z+38	; 0x26
    647e:	57 a0       	ldd	r5, Z+39	; 0x27
    6480:	9c 01       	movw	r18, r24
    6482:	40 e0       	ldi	r20, 0x00	; 0
    6484:	50 e0       	ldi	r21, 0x00	; 0
    6486:	22 15       	cp	r18, r2
    6488:	33 05       	cpc	r19, r3
    648a:	44 05       	cpc	r20, r4
    648c:	55 05       	cpc	r21, r5
    648e:	21 f1       	breq	.+72     	; 0x64d8 <ESP8266_Update+0x586>
    6490:	80 ab       	std	Z+48, r24	; 0x30
    6492:	91 ab       	std	Z+49, r25	; 0x31
    6494:	12 aa       	std	Z+50, r1	; 0x32
    6496:	84 8d       	ldd	r24, Z+28	; 0x1c
    6498:	46 a5       	ldd	r20, Z+46	; 0x2e
    649a:	57 a5       	ldd	r21, Z+47	; 0x2f
    649c:	66 5e       	subi	r22, 0xE6	; 230
    649e:	7f 4f       	sbci	r23, 0xFF	; 255
    64a0:	60 0f       	add	r22, r16
    64a2:	71 1f       	adc	r23, r17
    64a4:	88 23       	and	r24, r24
    64a6:	a1 f0       	breq	.+40     	; 0x64d0 <ESP8266_Update+0x57e>
    64a8:	c8 01       	movw	r24, r16
    64aa:	0e 94 18 3c 	call	0x7830	; 0x7830 <ESP8266_Callback_ClientConnectionDataReceived>
    64ae:	d6 01       	movw	r26, r12
    64b0:	1d 92       	st	X+, r1
    64b2:	1c 92       	st	X, r1
    64b4:	f5 01       	movw	r30, r10
    64b6:	60 81       	ld	r22, Z
    64b8:	f8 01       	movw	r30, r16
    64ba:	76 9e       	mul	r7, r22
    64bc:	e0 0d       	add	r30, r0
    64be:	f1 1d       	adc	r31, r1
    64c0:	11 24       	eor	r1, r1
    64c2:	24 a1       	ldd	r18, Z+36	; 0x24
    64c4:	35 a1       	ldd	r19, Z+37	; 0x25
    64c6:	46 a1       	ldd	r20, Z+38	; 0x26
    64c8:	57 a1       	ldd	r21, Z+39	; 0x27
    64ca:	80 e0       	ldi	r24, 0x00	; 0
    64cc:	90 e0       	ldi	r25, 0x00	; 0
    64ce:	87 ce       	rjmp	.-754    	; 0x61de <ESP8266_Update+0x28c>
    64d0:	c8 01       	movw	r24, r16
    64d2:	0e 94 40 23 	call	0x4680	; 0x4680 <ESP8266_Callback_ServerConnectionDataReceived>
    64d6:	eb cf       	rjmp	.-42     	; 0x64ae <ESP8266_Update+0x55c>
    64d8:	6a 2f       	mov	r22, r26
    64da:	81 ce       	rjmp	.-766    	; 0x61de <ESP8266_Update+0x28c>
    64dc:	d5 01       	movw	r26, r10
    64de:	8c 91       	ld	r24, X
    64e0:	a8 2e       	mov	r10, r24
    64e2:	b1 2c       	mov	r11, r1
    64e4:	f8 01       	movw	r30, r16
    64e6:	b5 e2       	ldi	r27, 0x25	; 37
    64e8:	8b 9f       	mul	r24, r27
    64ea:	e0 0d       	add	r30, r0
    64ec:	f1 1d       	adc	r31, r1
    64ee:	11 24       	eor	r1, r1
    64f0:	24 a1       	ldd	r18, Z+36	; 0x24
    64f2:	35 a1       	ldd	r19, Z+37	; 0x25
    64f4:	46 a1       	ldd	r20, Z+38	; 0x26
    64f6:	57 a1       	ldd	r21, Z+39	; 0x27
    64f8:	ce ce       	rjmp	.-612    	; 0x6296 <ESP8266_Update+0x344>
    64fa:	e2 5d       	subi	r30, 0xD2	; 210
    64fc:	fe 4f       	sbci	r31, 0xFE	; 254
    64fe:	80 81       	ld	r24, Z
    6500:	80 ff       	sbrs	r24, 0
    6502:	7e cd       	rjmp	.-1284   	; 0x6000 <ESP8266_Update+0xae>
    6504:	22 e0       	ldi	r18, 0x02	; 2
    6506:	30 e0       	ldi	r19, 0x00	; 0
    6508:	40 e0       	ldi	r20, 0x00	; 0
    650a:	50 e0       	ldi	r21, 0x00	; 0
    650c:	6d ed       	ldi	r22, 0xDD	; 221
    650e:	73 e2       	ldi	r23, 0x23	; 35
    6510:	82 e9       	ldi	r24, 0x92	; 146
    6512:	94 e3       	ldi	r25, 0x34	; 52
    6514:	0e 94 8f 1a 	call	0x351e	; 0x351e <BUFFER_Find>
    6518:	77 fd       	sbrc	r23, 7
    651a:	fe c0       	rjmp	.+508    	; 0x6718 <ESP8266_Update+0x7c6>
    651c:	67 2b       	or	r22, r23
    651e:	09 f4       	brne	.+2      	; 0x6522 <ESP8266_Update+0x5d0>
    6520:	eb c0       	rjmp	.+470    	; 0x66f8 <ESP8266_Update+0x7a6>
    6522:	f8 01       	movw	r30, r16
    6524:	e5 5d       	subi	r30, 0xD5	; 213
    6526:	fe 4f       	sbci	r31, 0xFE	; 254
    6528:	e0 80       	ld	r14, Z
    652a:	f1 80       	ldd	r15, Z+1	; 0x01
    652c:	32 96       	adiw	r30, 0x02	; 2
    652e:	81 81       	ldd	r24, Z+1	; 0x01
    6530:	8e 7f       	andi	r24, 0xFE	; 254
    6532:	81 83       	std	Z+1, r24	; 0x01
    6534:	8d e1       	ldi	r24, 0x1D	; 29
    6536:	90 e0       	ldi	r25, 0x00	; 0
    6538:	a0 e0       	ldi	r26, 0x00	; 0
    653a:	b0 e0       	ldi	r27, 0x00	; 0
    653c:	f8 01       	movw	r30, r16
    653e:	84 83       	std	Z+4, r24	; 0x04
    6540:	95 83       	std	Z+5, r25	; 0x05
    6542:	a6 83       	std	Z+6, r26	; 0x06
    6544:	b7 83       	std	Z+7, r27	; 0x07
    6546:	d7 01       	movw	r26, r14
    6548:	12 96       	adiw	r26, 0x02	; 2
    654a:	8c 91       	ld	r24, X
    654c:	81 11       	cpse	r24, r1
    654e:	a7 c0       	rjmp	.+334    	; 0x669e <ESP8266_Update+0x74c>
    6550:	d7 01       	movw	r26, r14
    6552:	54 96       	adiw	r26, 0x14	; 20
    6554:	4d 91       	ld	r20, X+
    6556:	5c 91       	ld	r21, X
    6558:	55 97       	sbiw	r26, 0x15	; 21
    655a:	20 e0       	ldi	r18, 0x00	; 0
    655c:	31 e0       	ldi	r19, 0x01	; 1
    655e:	b7 01       	movw	r22, r14
    6560:	c8 01       	movw	r24, r16
    6562:	0e 94 41 23 	call	0x4682	; 0x4682 <ESP8266_Callback_ServerConnectionSendData>
    6566:	81 30       	cpi	r24, 0x01	; 1
    6568:	b1 e0       	ldi	r27, 0x01	; 1
    656a:	9b 07       	cpc	r25, r27
    656c:	08 f0       	brcs	.+2      	; 0x6570 <ESP8266_Update+0x61e>
    656e:	a9 c0       	rjmp	.+338    	; 0x66c2 <ESP8266_Update+0x770>
    6570:	00 97       	sbiw	r24, 0x00	; 0
    6572:	09 f0       	breq	.+2      	; 0x6576 <ESP8266_Update+0x624>
    6574:	f1 c0       	rjmp	.+482    	; 0x6758 <ESP8266_Update+0x806>
    6576:	62 e0       	ldi	r22, 0x02	; 2
    6578:	70 e0       	ldi	r23, 0x00	; 0
    657a:	80 ee       	ldi	r24, 0xE0	; 224
    657c:	93 e2       	ldi	r25, 0x23	; 35
    657e:	20 d6       	rcall	.+3136   	; 0x71c0 <ESP8266_LL_USARTSend>
    6580:	81 e0       	ldi	r24, 0x01	; 1
    6582:	d7 01       	movw	r26, r14
    6584:	53 96       	adiw	r26, 0x13	; 19
    6586:	8c 93       	st	X, r24
    6588:	3b cd       	rjmp	.-1418   	; 0x6000 <ESP8266_Update+0xae>
    658a:	f8 01       	movw	r30, r16
    658c:	84 81       	ldd	r24, Z+4	; 0x04
    658e:	95 81       	ldd	r25, Z+5	; 0x05
    6590:	a6 81       	ldd	r26, Z+6	; 0x06
    6592:	b7 81       	ldd	r27, Z+7	; 0x07
    6594:	89 2b       	or	r24, r25
    6596:	8a 2b       	or	r24, r26
    6598:	8b 2b       	or	r24, r27
    659a:	09 f4       	brne	.+2      	; 0x659e <ESP8266_Update+0x64c>
    659c:	54 cf       	rjmp	.-344    	; 0x6446 <ESP8266_Update+0x4f4>
    659e:	84 cd       	rjmp	.-1272   	; 0x60a8 <ESP8266_Update+0x156>
    65a0:	d8 01       	movw	r26, r16
    65a2:	14 96       	adiw	r26, 0x04	; 4
    65a4:	4d 91       	ld	r20, X+
    65a6:	5d 91       	ld	r21, X+
    65a8:	6d 91       	ld	r22, X+
    65aa:	7c 91       	ld	r23, X
    65ac:	17 97       	sbiw	r26, 0x07	; 7
    65ae:	45 2b       	or	r20, r21
    65b0:	46 2b       	or	r20, r22
    65b2:	47 2b       	or	r20, r23
    65b4:	09 f4       	brne	.+2      	; 0x65b8 <ESP8266_Update+0x666>
    65b6:	32 cf       	rjmp	.-412    	; 0x641c <ESP8266_Update+0x4ca>
    65b8:	82 cd       	rjmp	.-1276   	; 0x60be <ESP8266_Update+0x16c>
    65ba:	d8 01       	movw	r26, r16
    65bc:	14 96       	adiw	r26, 0x04	; 4
    65be:	cd 90       	ld	r12, X+
    65c0:	dd 90       	ld	r13, X+
    65c2:	ed 90       	ld	r14, X+
    65c4:	fc 90       	ld	r15, X
    65c6:	17 97       	sbiw	r26, 0x07	; 7
    65c8:	cd 28       	or	r12, r13
    65ca:	ce 28       	or	r12, r14
    65cc:	cf 28       	or	r12, r15
    65ce:	09 f4       	brne	.+2      	; 0x65d2 <ESP8266_Update+0x680>
    65d0:	0d cf       	rjmp	.-486    	; 0x63ec <ESP8266_Update+0x49a>
    65d2:	82 cd       	rjmp	.-1276   	; 0x60d8 <ESP8266_Update+0x186>
    65d4:	d8 01       	movw	r26, r16
    65d6:	14 96       	adiw	r26, 0x04	; 4
    65d8:	cd 90       	ld	r12, X+
    65da:	dd 90       	ld	r13, X+
    65dc:	ed 90       	ld	r14, X+
    65de:	fc 90       	ld	r15, X
    65e0:	17 97       	sbiw	r26, 0x07	; 7
    65e2:	cd 28       	or	r12, r13
    65e4:	ce 28       	or	r12, r14
    65e6:	cf 28       	or	r12, r15
    65e8:	09 f4       	brne	.+2      	; 0x65ec <ESP8266_Update+0x69a>
    65ea:	e8 ce       	rjmp	.-560    	; 0x63bc <ESP8266_Update+0x46a>
    65ec:	82 cd       	rjmp	.-1276   	; 0x60f2 <ESP8266_Update+0x1a0>
    65ee:	d8 01       	movw	r26, r16
    65f0:	14 96       	adiw	r26, 0x04	; 4
    65f2:	cd 90       	ld	r12, X+
    65f4:	dd 90       	ld	r13, X+
    65f6:	ed 90       	ld	r14, X+
    65f8:	fc 90       	ld	r15, X
    65fa:	17 97       	sbiw	r26, 0x07	; 7
    65fc:	cd 28       	or	r12, r13
    65fe:	ce 28       	or	r12, r14
    6600:	cf 28       	or	r12, r15
    6602:	09 f0       	breq	.+2      	; 0x6606 <ESP8266_Update+0x6b4>
    6604:	9b cd       	rjmp	.-1226   	; 0x613c <ESP8266_Update+0x1ea>
    6606:	8a cd       	rjmp	.-1260   	; 0x611c <ESP8266_Update+0x1ca>
    6608:	24 e0       	ldi	r18, 0x04	; 4
    660a:	30 e0       	ldi	r19, 0x00	; 0
    660c:	40 e0       	ldi	r20, 0x00	; 0
    660e:	50 e0       	ldi	r21, 0x00	; 0
    6610:	6f ea       	ldi	r22, 0xAF	; 175
    6612:	72 e2       	ldi	r23, 0x22	; 34
    6614:	82 e9       	ldi	r24, 0x92	; 146
    6616:	94 e3       	ldi	r25, 0x34	; 52
    6618:	0e 94 8f 1a 	call	0x351e	; 0x351e <BUFFER_Find>
    661c:	97 fd       	sbrc	r25, 7
    661e:	fe cc       	rjmp	.-1540   	; 0x601c <ESP8266_Update+0xca>
    6620:	82 e9       	ldi	r24, 0x92	; 146
    6622:	94 e3       	ldi	r25, 0x34	; 52
    6624:	0e 94 83 1a 	call	0x3506	; 0x3506 <BUFFER_Reset>
    6628:	f8 01       	movw	r30, r16
    662a:	14 82       	std	Z+4, r1	; 0x04
    662c:	15 82       	std	Z+5, r1	; 0x05
    662e:	16 82       	std	Z+6, r1	; 0x06
    6630:	17 82       	std	Z+7, r1	; 0x07
    6632:	e3 5d       	subi	r30, 0xD3	; 211
    6634:	fe 4f       	sbci	r31, 0xFE	; 254
    6636:	81 81       	ldd	r24, Z+1	; 0x01
    6638:	82 60       	ori	r24, 0x02	; 2
    663a:	81 83       	std	Z+1, r24	; 0x01
    663c:	ef cc       	rjmp	.-1570   	; 0x601c <ESP8266_Update+0xca>
    663e:	ee 5d       	subi	r30, 0xDE	; 222
    6640:	fe 4f       	sbci	r31, 0xFE	; 254
    6642:	60 81       	ld	r22, Z
    6644:	f5 e2       	ldi	r31, 0x25	; 37
    6646:	6f 02       	muls	r22, r31
    6648:	b0 01       	movw	r22, r0
    664a:	11 24       	eor	r1, r1
    664c:	f8 01       	movw	r30, r16
    664e:	e6 0f       	add	r30, r22
    6650:	f7 1f       	adc	r31, r23
    6652:	12 8e       	std	Z+26, r1	; 0x1a
    6654:	14 8e       	std	Z+28, r1	; 0x1c
    6656:	15 ae       	std	Z+61, r1	; 0x3d
    6658:	14 ae       	std	Z+60, r1	; 0x3c
    665a:	66 5e       	subi	r22, 0xE6	; 230
    665c:	7f 4f       	sbci	r23, 0xFF	; 255
    665e:	60 0f       	add	r22, r16
    6660:	71 1f       	adc	r23, r17
    6662:	c8 01       	movw	r24, r16
    6664:	0e 94 87 3c 	call	0x790e	; 0x790e <ESP8266_Callback_ClientConnectionTimeout>
    6668:	c1 cc       	rjmp	.-1662   	; 0x5fec <ESP8266_Update+0x9a>
    666a:	c8 01       	movw	r24, r16
    666c:	0e 94 40 23 	call	0x4680	; 0x4680 <ESP8266_Callback_ServerConnectionDataReceived>
    6670:	65 cd       	rjmp	.-1334   	; 0x613c <ESP8266_Update+0x1ea>
    6672:	c8 01       	movw	r24, r16
    6674:	0e 94 18 3c 	call	0x7830	; 0x7830 <ESP8266_Callback_ClientConnectionDataReceived>
    6678:	2f cd       	rjmp	.-1442   	; 0x60d8 <ESP8266_Update+0x186>
    667a:	c8 01       	movw	r24, r16
    667c:	0e 94 18 3c 	call	0x7830	; 0x7830 <ESP8266_Callback_ClientConnectionDataReceived>
    6680:	38 cd       	rjmp	.-1424   	; 0x60f2 <ESP8266_Update+0x1a0>
    6682:	f8 01       	movw	r30, r16
    6684:	46 a5       	ldd	r20, Z+46	; 0x2e
    6686:	57 a5       	ldd	r21, Z+47	; 0x2f
    6688:	b8 01       	movw	r22, r16
    668a:	66 5e       	subi	r22, 0xE6	; 230
    668c:	7f 4f       	sbci	r23, 0xFF	; 255
    668e:	c8 01       	movw	r24, r16
    6690:	0e 94 18 3c 	call	0x7830	; 0x7830 <ESP8266_Callback_ClientConnectionDataReceived>
    6694:	09 cd       	rjmp	.-1518   	; 0x60a8 <ESP8266_Update+0x156>
    6696:	c8 01       	movw	r24, r16
    6698:	0e 94 18 3c 	call	0x7830	; 0x7830 <ESP8266_Callback_ClientConnectionDataReceived>
    669c:	10 cd       	rjmp	.-1504   	; 0x60be <ESP8266_Update+0x16c>
    669e:	f7 01       	movw	r30, r14
    66a0:	44 89       	ldd	r20, Z+20	; 0x14
    66a2:	55 89       	ldd	r21, Z+21	; 0x15
    66a4:	20 e0       	ldi	r18, 0x00	; 0
    66a6:	31 e0       	ldi	r19, 0x01	; 1
    66a8:	b7 01       	movw	r22, r14
    66aa:	c8 01       	movw	r24, r16
    66ac:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <ESP8266_Callback_ClientConnectionSendData>
    66b0:	5a cf       	rjmp	.-332    	; 0x6566 <ESP8266_Update+0x614>
    66b2:	fc 01       	movw	r30, r24
    66b4:	71 96       	adiw	r30, 0x11	; 17
    66b6:	dc 01       	movw	r26, r24
    66b8:	51 96       	adiw	r26, 0x11	; 17
    66ba:	2c 91       	ld	r18, X
    66bc:	ff 24       	eor	r15, r15
    66be:	f3 94       	inc	r15
    66c0:	1f ce       	rjmp	.-962    	; 0x6300 <ESP8266_Update+0x3ae>
    66c2:	81 2c       	mov	r8, r1
    66c4:	91 2c       	mov	r9, r1
    66c6:	54 01       	movw	r10, r8
    66c8:	93 94       	inc	r9
    66ca:	80 e0       	ldi	r24, 0x00	; 0
    66cc:	91 e0       	ldi	r25, 0x01	; 1
    66ce:	bc 01       	movw	r22, r24
    66d0:	f7 01       	movw	r30, r14
    66d2:	84 89       	ldd	r24, Z+20	; 0x14
    66d4:	95 89       	ldd	r25, Z+21	; 0x15
    66d6:	74 d5       	rcall	.+2792   	; 0x71c0 <ESP8266_LL_USARTSend>
    66d8:	f8 01       	movw	r30, r16
    66da:	e9 5d       	subi	r30, 0xD9	; 217
    66dc:	fe 4f       	sbci	r31, 0xFE	; 254
    66de:	80 81       	ld	r24, Z
    66e0:	91 81       	ldd	r25, Z+1	; 0x01
    66e2:	a2 81       	ldd	r26, Z+2	; 0x02
    66e4:	b3 81       	ldd	r27, Z+3	; 0x03
    66e6:	88 0d       	add	r24, r8
    66e8:	99 1d       	adc	r25, r9
    66ea:	aa 1d       	adc	r26, r10
    66ec:	bb 1d       	adc	r27, r11
    66ee:	80 83       	st	Z, r24
    66f0:	91 83       	std	Z+1, r25	; 0x01
    66f2:	a2 83       	std	Z+2, r26	; 0x02
    66f4:	b3 83       	std	Z+3, r27	; 0x03
    66f6:	3f cf       	rjmp	.-386    	; 0x6576 <ESP8266_Update+0x624>
    66f8:	22 e0       	ldi	r18, 0x02	; 2
    66fa:	30 e0       	ldi	r19, 0x00	; 0
    66fc:	40 e0       	ldi	r20, 0x00	; 0
    66fe:	50 e0       	ldi	r21, 0x00	; 0
    6700:	ce 01       	movw	r24, r28
    6702:	01 96       	adiw	r24, 0x01	; 1
    6704:	bc 01       	movw	r22, r24
    6706:	82 e9       	ldi	r24, 0x92	; 146
    6708:	94 e3       	ldi	r25, 0x34	; 52
    670a:	0e 94 78 19 	call	0x32f0	; 0x32f0 <BUFFER_Read>
    670e:	09 cf       	rjmp	.-494    	; 0x6522 <ESP8266_Update+0x5d0>
    6710:	80 e0       	ldi	r24, 0x00	; 0
    6712:	90 e0       	ldi	r25, 0x00	; 0
    6714:	dc 01       	movw	r26, r24
    6716:	22 ce       	rjmp	.-956    	; 0x635c <ESP8266_Update+0x40a>
    6718:	20 e0       	ldi	r18, 0x00	; 0
    671a:	30 e0       	ldi	r19, 0x00	; 0
    671c:	a9 01       	movw	r20, r18
    671e:	6d ed       	ldi	r22, 0xDD	; 221
    6720:	73 e2       	ldi	r23, 0x23	; 35
    6722:	84 ea       	ldi	r24, 0xA4	; 164
    6724:	94 e3       	ldi	r25, 0x34	; 52
    6726:	0e 94 8f 1a 	call	0x351e	; 0x351e <BUFFER_Find>
    672a:	77 fd       	sbrc	r23, 7
    672c:	69 cc       	rjmp	.-1838   	; 0x6000 <ESP8266_Update+0xae>
    672e:	67 2b       	or	r22, r23
    6730:	09 f0       	breq	.+2      	; 0x6734 <ESP8266_Update+0x7e2>
    6732:	f7 ce       	rjmp	.-530    	; 0x6522 <ESP8266_Update+0x5d0>
    6734:	22 e0       	ldi	r18, 0x02	; 2
    6736:	30 e0       	ldi	r19, 0x00	; 0
    6738:	40 e0       	ldi	r20, 0x00	; 0
    673a:	50 e0       	ldi	r21, 0x00	; 0
    673c:	de 01       	movw	r26, r28
    673e:	11 96       	adiw	r26, 0x01	; 1
    6740:	bd 01       	movw	r22, r26
    6742:	84 ea       	ldi	r24, 0xA4	; 164
    6744:	94 e3       	ldi	r25, 0x34	; 52
    6746:	0e 94 78 19 	call	0x32f0	; 0x32f0 <BUFFER_Read>
    674a:	eb ce       	rjmp	.-554    	; 0x6522 <ESP8266_Update+0x5d0>
    674c:	d7 01       	movw	r26, r14
    674e:	8c 91       	ld	r24, X
    6750:	88 23       	and	r24, r24
    6752:	09 f4       	brne	.+2      	; 0x6756 <ESP8266_Update+0x804>
    6754:	a2 cc       	rjmp	.-1724   	; 0x609a <ESP8266_Update+0x148>
    6756:	16 cd       	rjmp	.-1492   	; 0x6184 <ESP8266_Update+0x232>
    6758:	4c 01       	movw	r8, r24
    675a:	a1 2c       	mov	r10, r1
    675c:	b1 2c       	mov	r11, r1
    675e:	b7 cf       	rjmp	.-146    	; 0x66ce <ESP8266_Update+0x77c>

00006760 <ESP8266_WaitReady>:
    6760:	0f 93       	push	r16
    6762:	1f 93       	push	r17
    6764:	cf 93       	push	r28
    6766:	df 93       	push	r29
    6768:	ec 01       	movw	r28, r24
    676a:	8c 01       	movw	r16, r24
    676c:	02 5d       	subi	r16, 0xD2	; 210
    676e:	1e 4f       	sbci	r17, 0xFE	; 254
    6770:	f8 01       	movw	r30, r16
    6772:	80 81       	ld	r24, Z
    6774:	80 ff       	sbrs	r24, 0
    6776:	0c c0       	rjmp	.+24     	; 0x6790 <ESP8266_WaitReady+0x30>
    6778:	22 e0       	ldi	r18, 0x02	; 2
    677a:	30 e0       	ldi	r19, 0x00	; 0
    677c:	40 e0       	ldi	r20, 0x00	; 0
    677e:	50 e0       	ldi	r21, 0x00	; 0
    6780:	6d ed       	ldi	r22, 0xDD	; 221
    6782:	73 e2       	ldi	r23, 0x23	; 35
    6784:	82 e9       	ldi	r24, 0x92	; 146
    6786:	94 e3       	ldi	r25, 0x34	; 52
    6788:	0e 94 8f 1a 	call	0x351e	; 0x351e <BUFFER_Find>
    678c:	97 ff       	sbrs	r25, 7
    678e:	13 c0       	rjmp	.+38     	; 0x67b6 <ESP8266_WaitReady+0x56>
    6790:	ce 01       	movw	r24, r28
    6792:	df db       	rcall	.-2114   	; 0x5f52 <ESP8266_Update>
    6794:	4c 81       	ldd	r20, Y+4	; 0x04
    6796:	5d 81       	ldd	r21, Y+5	; 0x05
    6798:	6e 81       	ldd	r22, Y+6	; 0x06
    679a:	7f 81       	ldd	r23, Y+7	; 0x07
    679c:	45 2b       	or	r20, r21
    679e:	46 2b       	or	r20, r22
    67a0:	47 2b       	or	r20, r23
    67a2:	31 f7       	brne	.-52     	; 0x6770 <ESP8266_WaitReady+0x10>
    67a4:	cf 5c       	subi	r28, 0xCF	; 207
    67a6:	de 4f       	sbci	r29, 0xFE	; 254
    67a8:	18 82       	st	Y, r1
    67aa:	80 e0       	ldi	r24, 0x00	; 0
    67ac:	df 91       	pop	r29
    67ae:	cf 91       	pop	r28
    67b0:	1f 91       	pop	r17
    67b2:	0f 91       	pop	r16
    67b4:	08 95       	ret
    67b6:	fe 01       	movw	r30, r28
    67b8:	e3 5d       	subi	r30, 0xD3	; 211
    67ba:	fe 4f       	sbci	r31, 0xFE	; 254
    67bc:	81 81       	ldd	r24, Z+1	; 0x01
    67be:	8e 7f       	andi	r24, 0xFE	; 254
    67c0:	81 83       	std	Z+1, r24	; 0x01
    67c2:	f0 cf       	rjmp	.-32     	; 0x67a4 <ESP8266_WaitReady+0x44>

000067c4 <ESP8266_RequestSendData>:
    67c4:	0f 93       	push	r16
    67c6:	1f 93       	push	r17
    67c8:	cf 93       	push	r28
    67ca:	df 93       	push	r29
    67cc:	ec 01       	movw	r28, r24
    67ce:	8b 01       	movw	r16, r22
    67d0:	4c 81       	ldd	r20, Y+4	; 0x04
    67d2:	5d 81       	ldd	r21, Y+5	; 0x05
    67d4:	6e 81       	ldd	r22, Y+6	; 0x06
    67d6:	7f 81       	ldd	r23, Y+7	; 0x07
    67d8:	45 2b       	or	r20, r21
    67da:	46 2b       	or	r20, r22
    67dc:	47 2b       	or	r20, r23
    67de:	59 f0       	breq	.+22     	; 0x67f6 <ESP8266_RequestSendData+0x32>
    67e0:	ce 01       	movw	r24, r28
    67e2:	b7 db       	rcall	.-2194   	; 0x5f52 <ESP8266_Update>
    67e4:	cf 5c       	subi	r28, 0xCF	; 207
    67e6:	de 4f       	sbci	r29, 0xFE	; 254
    67e8:	87 e0       	ldi	r24, 0x07	; 7
    67ea:	88 83       	st	Y, r24
    67ec:	df 91       	pop	r29
    67ee:	cf 91       	pop	r28
    67f0:	1f 91       	pop	r17
    67f2:	0f 91       	pop	r16
    67f4:	08 95       	ret
    67f6:	d8 01       	movw	r26, r16
    67f8:	11 96       	adiw	r26, 0x01	; 1
    67fa:	8c 91       	ld	r24, X
    67fc:	11 97       	sbiw	r26, 0x01	; 1
    67fe:	80 5d       	subi	r24, 0xD0	; 208
    6800:	11 96       	adiw	r26, 0x01	; 1
    6802:	8c 93       	st	X, r24
    6804:	6d e0       	ldi	r22, 0x0D	; 13
    6806:	70 e0       	ldi	r23, 0x00	; 0
    6808:	81 e0       	ldi	r24, 0x01	; 1
    680a:	94 e2       	ldi	r25, 0x24	; 36
    680c:	d9 d4       	rcall	.+2482   	; 0x71c0 <ESP8266_LL_USARTSend>
    680e:	61 e0       	ldi	r22, 0x01	; 1
    6810:	70 e0       	ldi	r23, 0x00	; 0
    6812:	c8 01       	movw	r24, r16
    6814:	01 96       	adiw	r24, 0x01	; 1
    6816:	d4 d4       	rcall	.+2472   	; 0x71c0 <ESP8266_LL_USARTSend>
    6818:	67 e0       	ldi	r22, 0x07	; 7
    681a:	70 e0       	ldi	r23, 0x00	; 0
    681c:	8f e0       	ldi	r24, 0x0F	; 15
    681e:	94 e2       	ldi	r25, 0x24	; 36
    6820:	cf d4       	rcall	.+2462   	; 0x71c0 <ESP8266_LL_USARTSend>
    6822:	f8 01       	movw	r30, r16
    6824:	81 81       	ldd	r24, Z+1	; 0x01
    6826:	80 53       	subi	r24, 0x30	; 48
    6828:	81 83       	std	Z+1, r24	; 0x01
    682a:	4c 81       	ldd	r20, Y+4	; 0x04
    682c:	5d 81       	ldd	r21, Y+5	; 0x05
    682e:	6e 81       	ldd	r22, Y+6	; 0x06
    6830:	7f 81       	ldd	r23, Y+7	; 0x07
    6832:	45 2b       	or	r20, r21
    6834:	46 2b       	or	r20, r22
    6836:	47 2b       	or	r20, r23
    6838:	99 f6       	brne	.-90     	; 0x67e0 <ESP8266_RequestSendData+0x1c>
    683a:	88 e0       	ldi	r24, 0x08	; 8
    683c:	90 e0       	ldi	r25, 0x00	; 0
    683e:	a0 e0       	ldi	r26, 0x00	; 0
    6840:	b0 e0       	ldi	r27, 0x00	; 0
    6842:	8c 83       	std	Y+4, r24	; 0x04
    6844:	9d 83       	std	Y+5, r25	; 0x05
    6846:	ae 83       	std	Y+6, r26	; 0x06
    6848:	bf 83       	std	Y+7, r27	; 0x07
    684a:	18 86       	std	Y+8, r1	; 0x08
    684c:	19 86       	std	Y+9, r1	; 0x09
    684e:	8e 85       	ldd	r24, Y+14	; 0x0e
    6850:	9f 85       	ldd	r25, Y+15	; 0x0f
    6852:	a8 89       	ldd	r26, Y+16	; 0x10
    6854:	b9 89       	ldd	r27, Y+17	; 0x11
    6856:	8a 87       	std	Y+10, r24	; 0x0a
    6858:	9b 87       	std	Y+11, r25	; 0x0b
    685a:	ac 87       	std	Y+12, r26	; 0x0c
    685c:	bd 87       	std	Y+13, r27	; 0x0d
    685e:	fe 01       	movw	r30, r28
    6860:	ef 5c       	subi	r30, 0xCF	; 207
    6862:	fe 4f       	sbci	r31, 0xFE	; 254
    6864:	10 82       	st	Z, r1
    6866:	81 e0       	ldi	r24, 0x01	; 1
    6868:	d8 01       	movw	r26, r16
    686a:	52 96       	adiw	r26, 0x12	; 18
    686c:	8c 93       	st	X, r24
    686e:	de 01       	movw	r26, r28
    6870:	a3 5d       	subi	r26, 0xD3	; 211
    6872:	be 4f       	sbci	r27, 0xFE	; 254
    6874:	11 96       	adiw	r26, 0x01	; 1
    6876:	8c 91       	ld	r24, X
    6878:	11 97       	sbiw	r26, 0x01	; 1
    687a:	81 60       	ori	r24, 0x01	; 1
    687c:	11 96       	adiw	r26, 0x01	; 1
    687e:	8c 93       	st	X, r24
    6880:	c5 5d       	subi	r28, 0xD5	; 213
    6882:	de 4f       	sbci	r29, 0xFE	; 254
    6884:	08 83       	st	Y, r16
    6886:	19 83       	std	Y+1, r17	; 0x01
    6888:	80 81       	ld	r24, Z
    688a:	df 91       	pop	r29
    688c:	cf 91       	pop	r28
    688e:	1f 91       	pop	r17
    6890:	0f 91       	pop	r16
    6892:	08 95       	ret

00006894 <ESP8266_GetSTAIP>:
    6894:	cf 93       	push	r28
    6896:	df 93       	push	r29
    6898:	ec 01       	movw	r28, r24
    689a:	4c 81       	ldd	r20, Y+4	; 0x04
    689c:	5d 81       	ldd	r21, Y+5	; 0x05
    689e:	6e 81       	ldd	r22, Y+6	; 0x06
    68a0:	7f 81       	ldd	r23, Y+7	; 0x07
    68a2:	45 2b       	or	r20, r21
    68a4:	46 2b       	or	r20, r22
    68a6:	47 2b       	or	r20, r23
    68a8:	39 f5       	brne	.+78     	; 0x68f8 <ESP8266_GetSTAIP+0x64>
    68aa:	60 e1       	ldi	r22, 0x10	; 16
    68ac:	70 e0       	ldi	r23, 0x00	; 0
    68ae:	89 ec       	ldi	r24, 0xC9	; 201
    68b0:	94 e2       	ldi	r25, 0x24	; 36
    68b2:	86 d4       	rcall	.+2316   	; 0x71c0 <ESP8266_LL_USARTSend>
    68b4:	46 e1       	ldi	r20, 0x16	; 22
    68b6:	50 e0       	ldi	r21, 0x00	; 0
    68b8:	60 e0       	ldi	r22, 0x00	; 0
    68ba:	70 e0       	ldi	r23, 0x00	; 0
    68bc:	4c 83       	std	Y+4, r20	; 0x04
    68be:	5d 83       	std	Y+5, r21	; 0x05
    68c0:	6e 83       	std	Y+6, r22	; 0x06
    68c2:	7f 83       	std	Y+7, r23	; 0x07
    68c4:	8a ed       	ldi	r24, 0xDA	; 218
    68c6:	94 e2       	ldi	r25, 0x24	; 36
    68c8:	88 87       	std	Y+8, r24	; 0x08
    68ca:	99 87       	std	Y+9, r25	; 0x09
    68cc:	4e 85       	ldd	r20, Y+14	; 0x0e
    68ce:	5f 85       	ldd	r21, Y+15	; 0x0f
    68d0:	68 89       	ldd	r22, Y+16	; 0x10
    68d2:	79 89       	ldd	r23, Y+17	; 0x11
    68d4:	4a 87       	std	Y+10, r20	; 0x0a
    68d6:	5b 87       	std	Y+11, r21	; 0x0b
    68d8:	6c 87       	std	Y+12, r22	; 0x0c
    68da:	7d 87       	std	Y+13, r23	; 0x0d
    68dc:	fe 01       	movw	r30, r28
    68de:	ef 5c       	subi	r30, 0xCF	; 207
    68e0:	fe 4f       	sbci	r31, 0xFE	; 254
    68e2:	10 82       	st	Z, r1
    68e4:	c3 5d       	subi	r28, 0xD3	; 211
    68e6:	de 4f       	sbci	r29, 0xFE	; 254
    68e8:	88 81       	ld	r24, Y
    68ea:	8c 7f       	andi	r24, 0xFC	; 252
    68ec:	8b 7f       	andi	r24, 0xFB	; 251
    68ee:	88 83       	st	Y, r24
    68f0:	80 e0       	ldi	r24, 0x00	; 0
    68f2:	df 91       	pop	r29
    68f4:	cf 91       	pop	r28
    68f6:	08 95       	ret
    68f8:	2c db       	rcall	.-2472   	; 0x5f52 <ESP8266_Update>
    68fa:	cf 5c       	subi	r28, 0xCF	; 207
    68fc:	de 4f       	sbci	r29, 0xFE	; 254
    68fe:	87 e0       	ldi	r24, 0x07	; 7
    6900:	88 83       	st	Y, r24
    6902:	df 91       	pop	r29
    6904:	cf 91       	pop	r28
    6906:	08 95       	ret

00006908 <ESP8266_Init>:
}

/******************************************/
/*          Basic AT commands Set         */
/******************************************/
ESP8266_Result_t ESP8266_Init(ESP8266_t* ESP8266, uint32_t baudrate) {
    6908:	2f 92       	push	r2
    690a:	3f 92       	push	r3
    690c:	4f 92       	push	r4
    690e:	5f 92       	push	r5
    6910:	6f 92       	push	r6
    6912:	7f 92       	push	r7
    6914:	8f 92       	push	r8
    6916:	9f 92       	push	r9
    6918:	af 92       	push	r10
    691a:	bf 92       	push	r11
    691c:	cf 92       	push	r12
    691e:	df 92       	push	r13
    6920:	ef 92       	push	r14
    6922:	ff 92       	push	r15
    6924:	0f 93       	push	r16
    6926:	1f 93       	push	r17
    6928:	cf 93       	push	r28
    692a:	df 93       	push	r29
    692c:	cd b7       	in	r28, 0x3d	; 61
    692e:	de b7       	in	r29, 0x3e	; 62
    6930:	2d 97       	sbiw	r28, 0x0d	; 13
    6932:	cd bf       	out	0x3d, r28	; 61
    6934:	de bf       	out	0x3e, r29	; 62
    6936:	8c 01       	movw	r16, r24
    6938:	6a 01       	movw	r12, r20
    693a:	7b 01       	movw	r14, r22
	uint8_t i;
	
	/* Save settings */
	ESP8266->Timeout = 0;
    693c:	dc 01       	movw	r26, r24
    693e:	56 96       	adiw	r26, 0x16	; 22
    6940:	1d 92       	st	X+, r1
    6942:	1d 92       	st	X+, r1
    6944:	1d 92       	st	X+, r1
    6946:	1c 92       	st	X, r1
    6948:	59 97       	sbiw	r26, 0x19	; 25
	
	/* Init temporary buffer */
	if (BUFFER_Init(&TMP_Buffer, ESP8266_TMPBUFFER_SIZE, TMPBuffer)) {
    694a:	22 e9       	ldi	r18, 0x92	; 146
    694c:	32 e3       	ldi	r19, 0x32	; 50
    694e:	40 e0       	ldi	r20, 0x00	; 0
    6950:	52 e0       	ldi	r21, 0x02	; 2
    6952:	60 e0       	ldi	r22, 0x00	; 0
    6954:	70 e0       	ldi	r23, 0x00	; 0
    6956:	84 ea       	ldi	r24, 0xA4	; 164
    6958:	94 e3       	ldi	r25, 0x34	; 52
    695a:	0e 94 82 18 	call	0x3104	; 0x3104 <BUFFER_Init>
    695e:	88 23       	and	r24, r24
    6960:	d9 f0       	breq	.+54     	; 0x6998 <ESP8266_Init+0x90>
	
	
	/* Init USART working */
	if (BUFFER_Init(&USART_Buffer, ESP8266_USARTBUFFER_SIZE, USARTBuffer)) {
		/* Return from function */
		ESP8266_RETURNWITHSTATUS(ESP8266, ESP_NOHEAP);
    6962:	f8 01       	movw	r30, r16
    6964:	ef 5c       	subi	r30, 0xCF	; 207
    6966:	fe 4f       	sbci	r31, 0xFE	; 254
    6968:	85 e0       	ldi	r24, 0x05	; 5
    696a:	80 83       	st	Z, r24
	/* Get softAP MAC */
	while (ESP8266_GetAPIP(ESP8266) != ESP_OK);
	
	/* Return OK */
	return ESP8266_WaitReady(ESP8266);
}
    696c:	2d 96       	adiw	r28, 0x0d	; 13
    696e:	cd bf       	out	0x3d, r28	; 61
    6970:	de bf       	out	0x3e, r29	; 62
    6972:	df 91       	pop	r29
    6974:	cf 91       	pop	r28
    6976:	1f 91       	pop	r17
    6978:	0f 91       	pop	r16
    697a:	ff 90       	pop	r15
    697c:	ef 90       	pop	r14
    697e:	df 90       	pop	r13
    6980:	cf 90       	pop	r12
    6982:	bf 90       	pop	r11
    6984:	af 90       	pop	r10
    6986:	9f 90       	pop	r9
    6988:	8f 90       	pop	r8
    698a:	7f 90       	pop	r7
    698c:	6f 90       	pop	r6
    698e:	5f 90       	pop	r5
    6990:	4f 90       	pop	r4
    6992:	3f 90       	pop	r3
    6994:	2f 90       	pop	r2
    6996:	08 95       	ret
		ESP8266_RETURNWITHSTATUS(ESP8266, ESP_NOHEAP);
	}
	
	
	/* Init USART working */
	if (BUFFER_Init(&USART_Buffer, ESP8266_USARTBUFFER_SIZE, USARTBuffer)) {
    6998:	22 e9       	ldi	r18, 0x92	; 146
    699a:	3e e2       	ldi	r19, 0x2E	; 46
    699c:	40 e0       	ldi	r20, 0x00	; 0
    699e:	54 e0       	ldi	r21, 0x04	; 4
    69a0:	60 e0       	ldi	r22, 0x00	; 0
    69a2:	70 e0       	ldi	r23, 0x00	; 0
    69a4:	82 e9       	ldi	r24, 0x92	; 146
    69a6:	94 e3       	ldi	r25, 0x34	; 52
    69a8:	0e 94 82 18 	call	0x3104	; 0x3104 <BUFFER_Init>
    69ac:	81 11       	cpse	r24, r1
    69ae:	d9 cf       	rjmp	.-78     	; 0x6962 <ESP8266_Init+0x5a>
		/* Return from function */
		ESP8266_RETURNWITHSTATUS(ESP8266, ESP_NOHEAP);
	}

	/* Init RESET pin */
	ESP8266_RESET_INIT;
    69b0:	80 e1       	ldi	r24, 0x10	; 16
    69b2:	80 93 61 06 	sts	0x0661, r24
	
	/* Set pin low */
	ESP8266_RESET_LOW;
    69b6:	80 93 66 06 	sts	0x0666, r24
	
	/* Delay for while */
	ESP8266_DELAYMS(ESP8266, 100);
    69ba:	f8 01       	movw	r30, r16
    69bc:	86 85       	ldd	r24, Z+14	; 0x0e
    69be:	97 85       	ldd	r25, Z+15	; 0x0f
    69c0:	a0 89       	ldd	r26, Z+16	; 0x10
    69c2:	b1 89       	ldd	r27, Z+17	; 0x11
    69c4:	8d 83       	std	Y+5, r24	; 0x05
    69c6:	9e 83       	std	Y+6, r25	; 0x06
    69c8:	af 83       	std	Y+7, r26	; 0x07
    69ca:	b8 87       	std	Y+8, r27	; 0x08
    69cc:	86 85       	ldd	r24, Z+14	; 0x0e
    69ce:	97 85       	ldd	r25, Z+15	; 0x0f
    69d0:	a0 89       	ldd	r26, Z+16	; 0x10
    69d2:	b1 89       	ldd	r27, Z+17	; 0x11
    69d4:	4d 81       	ldd	r20, Y+5	; 0x05
    69d6:	5e 81       	ldd	r21, Y+6	; 0x06
    69d8:	6f 81       	ldd	r22, Y+7	; 0x07
    69da:	78 85       	ldd	r23, Y+8	; 0x08
    69dc:	84 1b       	sub	r24, r20
    69de:	95 0b       	sbc	r25, r21
    69e0:	a6 0b       	sbc	r26, r22
    69e2:	b7 0b       	sbc	r27, r23
    69e4:	84 36       	cpi	r24, 0x64	; 100
    69e6:	91 05       	cpc	r25, r1
    69e8:	a1 05       	cpc	r26, r1
    69ea:	b1 05       	cpc	r27, r1
    69ec:	78 f3       	brcs	.-34     	; 0x69cc <ESP8266_Init+0xc4>
	
	/* Set pin high */
	ESP8266_RESET_HIGH;
    69ee:	80 e1       	ldi	r24, 0x10	; 16
    69f0:	80 93 65 06 	sts	0x0665, r24
	
	/* Delay for while */
	ESP8266_DELAYMS(ESP8266, 100);
    69f4:	86 85       	ldd	r24, Z+14	; 0x0e
    69f6:	97 85       	ldd	r25, Z+15	; 0x0f
    69f8:	a0 89       	ldd	r26, Z+16	; 0x10
    69fa:	b1 89       	ldd	r27, Z+17	; 0x11
    69fc:	89 83       	std	Y+1, r24	; 0x01
    69fe:	9a 83       	std	Y+2, r25	; 0x02
    6a00:	ab 83       	std	Y+3, r26	; 0x03
    6a02:	bc 83       	std	Y+4, r27	; 0x04
    6a04:	86 85       	ldd	r24, Z+14	; 0x0e
    6a06:	97 85       	ldd	r25, Z+15	; 0x0f
    6a08:	a0 89       	ldd	r26, Z+16	; 0x10
    6a0a:	b1 89       	ldd	r27, Z+17	; 0x11
    6a0c:	49 81       	ldd	r20, Y+1	; 0x01
    6a0e:	5a 81       	ldd	r21, Y+2	; 0x02
    6a10:	6b 81       	ldd	r22, Y+3	; 0x03
    6a12:	7c 81       	ldd	r23, Y+4	; 0x04
    6a14:	84 1b       	sub	r24, r20
    6a16:	95 0b       	sbc	r25, r21
    6a18:	a6 0b       	sbc	r26, r22
    6a1a:	b7 0b       	sbc	r27, r23
    6a1c:	84 36       	cpi	r24, 0x64	; 100
    6a1e:	91 05       	cpc	r25, r1
    6a20:	a1 05       	cpc	r26, r1
    6a22:	b1 05       	cpc	r27, r1
    6a24:	78 f3       	brcs	.-34     	; 0x6a04 <ESP8266_Init+0xfc>
    6a26:	8f 01       	movw	r16, r30
	
	/* Save current baudrate */
	ESP8266->Baudrate = baudrate;
    6a28:	c0 82       	st	Z, r12
    6a2a:	d1 82       	std	Z+1, r13	; 0x01
    6a2c:	e2 82       	std	Z+2, r14	; 0x02
    6a2e:	f3 82       	std	Z+3, r15	; 0x03
	
	/* Init USART */
	ESP8266_LL_USARTInit(ESP8266->Baudrate);
    6a30:	c7 01       	movw	r24, r14
    6a32:	b6 01       	movw	r22, r12
    6a34:	c1 d3       	rcall	.+1922   	; 0x71b8 <ESP8266_LL_USARTInit>
	
	/* Set allowed timeout */
	ESP8266->Timeout = 1000;
    6a36:	88 ee       	ldi	r24, 0xE8	; 232
    6a38:	93 e0       	ldi	r25, 0x03	; 3
    6a3a:	a0 e0       	ldi	r26, 0x00	; 0
    6a3c:	b0 e0       	ldi	r27, 0x00	; 0
    6a3e:	f8 01       	movw	r30, r16
    6a40:	86 8b       	std	Z+22, r24	; 0x16
    6a42:	97 8b       	std	Z+23, r25	; 0x17
    6a44:	a0 8f       	std	Z+24, r26	; 0x18
    6a46:	b1 8f       	std	Z+25, r27	; 0x19
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    6a48:	84 81       	ldd	r24, Z+4	; 0x04
    6a4a:	95 81       	ldd	r25, Z+5	; 0x05
    6a4c:	a6 81       	ldd	r26, Z+6	; 0x06
    6a4e:	b7 81       	ldd	r27, Z+7	; 0x07
    6a50:	89 2b       	or	r24, r25
    6a52:	8a 2b       	or	r24, r26
    6a54:	8b 2b       	or	r24, r27
    6a56:	09 f0       	breq	.+2      	; 0x6a5a <ESP8266_Init+0x152>
    6a58:	c1 c0       	rjmp	.+386    	; 0x6bdc <ESP8266_Init+0x2d4>
	}
	
	/* Send command if valid pointer */
	if (CommandStr != NULL) {
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
    6a5a:	68 e0       	ldi	r22, 0x08	; 8
    6a5c:	70 e0       	ldi	r23, 0x00	; 0
    6a5e:	8a eb       	ldi	r24, 0xBA	; 186
    6a60:	96 e2       	ldi	r25, 0x26	; 38
    6a62:	ae d3       	rcall	.+1884   	; 0x71c0 <ESP8266_LL_USARTSend>
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    6a64:	8f e0       	ldi	r24, 0x0F	; 15
    6a66:	90 e0       	ldi	r25, 0x00	; 0
    6a68:	a0 e0       	ldi	r26, 0x00	; 0
    6a6a:	b0 e0       	ldi	r27, 0x00	; 0
    6a6c:	f8 01       	movw	r30, r16
    6a6e:	84 83       	std	Z+4, r24	; 0x04
    6a70:	95 83       	std	Z+5, r25	; 0x05
    6a72:	a6 83       	std	Z+6, r26	; 0x06
    6a74:	b7 83       	std	Z+7, r27	; 0x07
	ESP8266->ActiveCommandResponse = (char *)StartRespond;
    6a76:	8c eb       	ldi	r24, 0xBC	; 188
    6a78:	92 e2       	ldi	r25, 0x22	; 34
    6a7a:	80 87       	std	Z+8, r24	; 0x08
    6a7c:	91 87       	std	Z+9, r25	; 0x09
	
	/* Set command start time */
	ESP8266->StartTime = ESP8266->Time;
    6a7e:	86 85       	ldd	r24, Z+14	; 0x0e
    6a80:	97 85       	ldd	r25, Z+15	; 0x0f
    6a82:	a0 89       	ldd	r26, Z+16	; 0x10
    6a84:	b1 89       	ldd	r27, Z+17	; 0x11
    6a86:	82 87       	std	Z+10, r24	; 0x0a
    6a88:	93 87       	std	Z+11, r25	; 0x0b
    6a8a:	a4 87       	std	Z+12, r26	; 0x0c
    6a8c:	b5 87       	std	Z+13, r27	; 0x0d
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    6a8e:	48 01       	movw	r8, r16
    6a90:	ff ec       	ldi	r31, 0xCF	; 207
    6a92:	8f 1a       	sub	r8, r31
    6a94:	fe ef       	ldi	r31, 0xFE	; 254
    6a96:	9f 0a       	sbc	r9, r31
    6a98:	d4 01       	movw	r26, r8
    6a9a:	1c 92       	st	X, r1
    6a9c:	f8 01       	movw	r30, r16
    6a9e:	e2 5d       	subi	r30, 0xD2	; 210
    6aa0:	fe 4f       	sbci	r31, 0xFE	; 254
    6aa2:	1f 01       	movw	r2, r30

ESP8266_Result_t ESP8266_WaitReady(ESP8266_t* ESP8266) {
	/* Do job */
	do {
		/* Check for wrapper */
		if (ESP8266->Flags.F.WaitForWrapper) {
    6aa4:	d1 01       	movw	r26, r2
    6aa6:	8c 91       	ld	r24, X
    6aa8:	80 ff       	sbrs	r24, 0
    6aaa:	0c c0       	rjmp	.+24     	; 0x6ac4 <ESP8266_Init+0x1bc>
			/* We have found it, stop execution here */
			if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {
    6aac:	22 e0       	ldi	r18, 0x02	; 2
    6aae:	30 e0       	ldi	r19, 0x00	; 0
    6ab0:	40 e0       	ldi	r20, 0x00	; 0
    6ab2:	50 e0       	ldi	r21, 0x00	; 0
    6ab4:	6d ed       	ldi	r22, 0xDD	; 221
    6ab6:	73 e2       	ldi	r23, 0x23	; 35
    6ab8:	82 e9       	ldi	r24, 0x92	; 146
    6aba:	94 e3       	ldi	r25, 0x34	; 52
    6abc:	0e 94 8f 1a 	call	0x351e	; 0x351e <BUFFER_Find>
    6ac0:	97 ff       	sbrs	r25, 7
    6ac2:	08 c1       	rjmp	.+528    	; 0x6cd4 <ESP8266_Init+0x3cc>
				ESP8266->Flags.F.WaitForWrapper = 0;
				break;
			}
		}
		/* Update device */
		ESP8266_Update(ESP8266);
    6ac4:	c8 01       	movw	r24, r16
    6ac6:	45 da       	rcall	.-2934   	; 0x5f52 <ESP8266_Update>
	} while (ESP8266->ActiveCommand != ESP8266_COMMAND_IDLE);
    6ac8:	d8 01       	movw	r26, r16
    6aca:	14 96       	adiw	r26, 0x04	; 4
    6acc:	4d 91       	ld	r20, X+
    6ace:	5d 91       	ld	r21, X+
    6ad0:	6d 91       	ld	r22, X+
    6ad2:	7c 91       	ld	r23, X
    6ad4:	17 97       	sbiw	r26, 0x07	; 7
    6ad6:	45 2b       	or	r20, r21
    6ad8:	46 2b       	or	r20, r22
    6ada:	47 2b       	or	r20, r23
    6adc:	19 f7       	brne	.-58     	; 0x6aa4 <ESP8266_Init+0x19c>
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    6ade:	f4 01       	movw	r30, r8
    6ae0:	10 82       	st	Z, r1
	
	/* Wait till idle */
	ESP8266_WaitReady(ESP8266);

	/* Check status */
	if (!ESP8266->Flags.F.LastOperationStatus) {
    6ae2:	d1 01       	movw	r26, r2
    6ae4:	8c 91       	ld	r24, X
    6ae6:	81 fd       	sbrc	r24, 1
    6ae8:	a3 c0       	rjmp	.+326    	; 0x6c30 <ESP8266_Init+0x328>
    6aea:	e4 ed       	ldi	r30, 0xD4	; 212
    6aec:	f6 e2       	ldi	r31, 0x26	; 38
    6aee:	ea 87       	std	Y+10, r30	; 0x0a
    6af0:	fb 87       	std	Y+11, r31	; 0x0b
    6af2:	a1 2c       	mov	r10, r1
    6af4:	b1 2c       	mov	r11, r1
		for (i = 0; i < sizeof(ESP8266_Baudrate) / sizeof(ESP8266_Baudrate[0]); i++) {
			/* Init USART */
			ESP8266_LL_USARTInit(ESP8266_Baudrate[i]);
			
			/* Set allowed timeout */
			ESP8266->Timeout = 1000;
    6af6:	88 ee       	ldi	r24, 0xE8	; 232
    6af8:	c8 2e       	mov	r12, r24
    6afa:	83 e0       	ldi	r24, 0x03	; 3
    6afc:	d8 2e       	mov	r13, r24
    6afe:	e1 2c       	mov	r14, r1
    6b00:	f1 2c       	mov	r15, r1
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    6b02:	9f e0       	ldi	r25, 0x0F	; 15
    6b04:	49 2e       	mov	r4, r25
    6b06:	51 2c       	mov	r5, r1
    6b08:	61 2c       	mov	r6, r1
    6b0a:	71 2c       	mov	r7, r1
	do {
		/* Check for wrapper */
		if (ESP8266->Flags.F.WaitForWrapper) {
			/* We have found it, stop execution here */
			if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {
				ESP8266->Flags.F.WaitForWrapper = 0;
    6b0c:	c8 01       	movw	r24, r16
    6b0e:	83 5d       	subi	r24, 0xD3	; 211
    6b10:	9e 4f       	sbci	r25, 0xFE	; 254
    6b12:	8c 87       	std	Y+12, r24	; 0x0c
    6b14:	9d 87       	std	Y+13, r25	; 0x0d
	/* Check status */
	if (!ESP8266->Flags.F.LastOperationStatus) {
		/* Check for baudrate, try with predefined baudrates */
		for (i = 0; i < sizeof(ESP8266_Baudrate) / sizeof(ESP8266_Baudrate[0]); i++) {
			/* Init USART */
			ESP8266_LL_USARTInit(ESP8266_Baudrate[i]);
    6b16:	aa 85       	ldd	r26, Y+10	; 0x0a
    6b18:	bb 85       	ldd	r27, Y+11	; 0x0b
    6b1a:	6d 91       	ld	r22, X+
    6b1c:	7d 91       	ld	r23, X+
    6b1e:	8d 91       	ld	r24, X+
    6b20:	9d 91       	ld	r25, X+
    6b22:	aa 87       	std	Y+10, r26	; 0x0a
    6b24:	bb 87       	std	Y+11, r27	; 0x0b
    6b26:	48 d3       	rcall	.+1680   	; 0x71b8 <ESP8266_LL_USARTInit>
			
			/* Set allowed timeout */
			ESP8266->Timeout = 1000;
    6b28:	f8 01       	movw	r30, r16
    6b2a:	c6 8a       	std	Z+22, r12	; 0x16
    6b2c:	d7 8a       	std	Z+23, r13	; 0x17
    6b2e:	e0 8e       	std	Z+24, r14	; 0x18
    6b30:	f1 8e       	std	Z+25, r15	; 0x19
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    6b32:	84 81       	ldd	r24, Z+4	; 0x04
    6b34:	95 81       	ldd	r25, Z+5	; 0x05
    6b36:	a6 81       	ldd	r26, Z+6	; 0x06
    6b38:	b7 81       	ldd	r27, Z+7	; 0x07
    6b3a:	89 2b       	or	r24, r25
    6b3c:	8a 2b       	or	r24, r26
    6b3e:	8b 2b       	or	r24, r27
    6b40:	09 f0       	breq	.+2      	; 0x6b44 <ESP8266_Init+0x23c>
    6b42:	57 c0       	rjmp	.+174    	; 0x6bf2 <ESP8266_Init+0x2ea>
	}
	
	/* Send command if valid pointer */
	if (CommandStr != NULL) {
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
    6b44:	68 e0       	ldi	r22, 0x08	; 8
    6b46:	70 e0       	ldi	r23, 0x00	; 0
    6b48:	8a eb       	ldi	r24, 0xBA	; 186
    6b4a:	96 e2       	ldi	r25, 0x26	; 38
    6b4c:	39 d3       	rcall	.+1650   	; 0x71c0 <ESP8266_LL_USARTSend>
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    6b4e:	d8 01       	movw	r26, r16
    6b50:	14 96       	adiw	r26, 0x04	; 4
    6b52:	4d 92       	st	X+, r4
    6b54:	5d 92       	st	X+, r5
    6b56:	6d 92       	st	X+, r6
    6b58:	7c 92       	st	X, r7
    6b5a:	17 97       	sbiw	r26, 0x07	; 7
	ESP8266->ActiveCommandResponse = (char *)StartRespond;
    6b5c:	ec eb       	ldi	r30, 0xBC	; 188
    6b5e:	f2 e2       	ldi	r31, 0x22	; 34
    6b60:	18 96       	adiw	r26, 0x08	; 8
    6b62:	ed 93       	st	X+, r30
    6b64:	fc 93       	st	X, r31
    6b66:	19 97       	sbiw	r26, 0x09	; 9
	
	/* Set command start time */
	ESP8266->StartTime = ESP8266->Time;
    6b68:	1e 96       	adiw	r26, 0x0e	; 14
    6b6a:	8d 91       	ld	r24, X+
    6b6c:	9d 91       	ld	r25, X+
    6b6e:	0d 90       	ld	r0, X+
    6b70:	bc 91       	ld	r27, X
    6b72:	a0 2d       	mov	r26, r0
    6b74:	f8 01       	movw	r30, r16
    6b76:	82 87       	std	Z+10, r24	; 0x0a
    6b78:	93 87       	std	Z+11, r25	; 0x0b
    6b7a:	a4 87       	std	Z+12, r26	; 0x0c
    6b7c:	b5 87       	std	Z+13, r27	; 0x0d
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    6b7e:	d4 01       	movw	r26, r8
    6b80:	1c 92       	st	X, r1

ESP8266_Result_t ESP8266_WaitReady(ESP8266_t* ESP8266) {
	/* Do job */
	do {
		/* Check for wrapper */
		if (ESP8266->Flags.F.WaitForWrapper) {
    6b82:	f1 01       	movw	r30, r2
    6b84:	80 81       	ld	r24, Z
    6b86:	80 ff       	sbrs	r24, 0
    6b88:	0c c0       	rjmp	.+24     	; 0x6ba2 <ESP8266_Init+0x29a>
			/* We have found it, stop execution here */
			if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {
    6b8a:	22 e0       	ldi	r18, 0x02	; 2
    6b8c:	30 e0       	ldi	r19, 0x00	; 0
    6b8e:	40 e0       	ldi	r20, 0x00	; 0
    6b90:	50 e0       	ldi	r21, 0x00	; 0
    6b92:	6d ed       	ldi	r22, 0xDD	; 221
    6b94:	73 e2       	ldi	r23, 0x23	; 35
    6b96:	82 e9       	ldi	r24, 0x92	; 146
    6b98:	94 e3       	ldi	r25, 0x34	; 52
    6b9a:	0e 94 8f 1a 	call	0x351e	; 0x351e <BUFFER_Find>
    6b9e:	97 ff       	sbrs	r25, 7
    6ba0:	2e c0       	rjmp	.+92     	; 0x6bfe <ESP8266_Init+0x2f6>
				ESP8266->Flags.F.WaitForWrapper = 0;
				break;
			}
		}
		/* Update device */
		ESP8266_Update(ESP8266);
    6ba2:	c8 01       	movw	r24, r16
    6ba4:	d6 d9       	rcall	.-3156   	; 0x5f52 <ESP8266_Update>
	} while (ESP8266->ActiveCommand != ESP8266_COMMAND_IDLE);
    6ba6:	f8 01       	movw	r30, r16
    6ba8:	84 81       	ldd	r24, Z+4	; 0x04
    6baa:	95 81       	ldd	r25, Z+5	; 0x05
    6bac:	a6 81       	ldd	r26, Z+6	; 0x06
    6bae:	b7 81       	ldd	r27, Z+7	; 0x07
    6bb0:	89 2b       	or	r24, r25
    6bb2:	8a 2b       	or	r24, r26
    6bb4:	8b 2b       	or	r24, r27
    6bb6:	29 f7       	brne	.-54     	; 0x6b82 <ESP8266_Init+0x27a>
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    6bb8:	d4 01       	movw	r26, r8
    6bba:	1c 92       	st	X, r1
			
			/* Wait till idle */
			ESP8266_WaitReady(ESP8266);
		
			/* Check status */
			if (ESP8266->Flags.F.LastOperationStatus) {
    6bbc:	f1 01       	movw	r30, r2
    6bbe:	80 81       	ld	r24, Z
    6bc0:	81 fd       	sbrc	r24, 1
    6bc2:	26 c0       	rjmp	.+76     	; 0x6c10 <ESP8266_Init+0x308>
    6bc4:	bf ef       	ldi	r27, 0xFF	; 255
    6bc6:	ab 1a       	sub	r10, r27
    6bc8:	bb 0a       	sbc	r11, r27
	ESP8266_WaitReady(ESP8266);

	/* Check status */
	if (!ESP8266->Flags.F.LastOperationStatus) {
		/* Check for baudrate, try with predefined baudrates */
		for (i = 0; i < sizeof(ESP8266_Baudrate) / sizeof(ESP8266_Baudrate[0]); i++) {
    6bca:	e4 e0       	ldi	r30, 0x04	; 4
    6bcc:	ae 16       	cp	r10, r30
    6bce:	b1 04       	cpc	r11, r1
    6bd0:	09 f0       	breq	.+2      	; 0x6bd4 <ESP8266_Init+0x2cc>
    6bd2:	a1 cf       	rjmp	.-190    	; 0x6b16 <ESP8266_Init+0x20e>
	}
	
	/* Check status */
	if (!ESP8266->Flags.F.LastOperationStatus) {		
		/* Device is not connected */
		ESP8266_RETURNWITHSTATUS(ESP8266, ESP_DEVICENOTCONNECTED);
    6bd4:	82 e0       	ldi	r24, 0x02	; 2
    6bd6:	d4 01       	movw	r26, r8
    6bd8:	8c 93       	st	X, r24
    6bda:	c8 ce       	rjmp	.-624    	; 0x696c <ESP8266_Init+0x64>
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    6bdc:	c8 01       	movw	r24, r16
    6bde:	b9 d9       	rcall	.-3214   	; 0x5f52 <ESP8266_Update>
    6be0:	48 01       	movw	r8, r16
    6be2:	ff ec       	ldi	r31, 0xCF	; 207
    6be4:	8f 1a       	sub	r8, r31
    6be6:	fe ef       	ldi	r31, 0xFE	; 254
    6be8:	9f 0a       	sbc	r9, r31
    6bea:	87 e0       	ldi	r24, 0x07	; 7
    6bec:	d4 01       	movw	r26, r8
    6bee:	8c 93       	st	X, r24
    6bf0:	55 cf       	rjmp	.-342    	; 0x6a9c <ESP8266_Init+0x194>
    6bf2:	c8 01       	movw	r24, r16
    6bf4:	ae d9       	rcall	.-3236   	; 0x5f52 <ESP8266_Update>
    6bf6:	e7 e0       	ldi	r30, 0x07	; 7
    6bf8:	d4 01       	movw	r26, r8
    6bfa:	ec 93       	st	X, r30
    6bfc:	c2 cf       	rjmp	.-124    	; 0x6b82 <ESP8266_Init+0x27a>
	do {
		/* Check for wrapper */
		if (ESP8266->Flags.F.WaitForWrapper) {
			/* We have found it, stop execution here */
			if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {
				ESP8266->Flags.F.WaitForWrapper = 0;
    6bfe:	ac 85       	ldd	r26, Y+12	; 0x0c
    6c00:	bd 85       	ldd	r27, Y+13	; 0x0d
    6c02:	11 96       	adiw	r26, 0x01	; 1
    6c04:	8c 91       	ld	r24, X
    6c06:	11 97       	sbiw	r26, 0x01	; 1
    6c08:	8e 7f       	andi	r24, 0xFE	; 254
    6c0a:	11 96       	adiw	r26, 0x01	; 1
    6c0c:	8c 93       	st	X, r24
    6c0e:	d4 cf       	rjmp	.-88     	; 0x6bb8 <ESP8266_Init+0x2b0>
			ESP8266_WaitReady(ESP8266);
		
			/* Check status */
			if (ESP8266->Flags.F.LastOperationStatus) {
				/* Save current baudrate */
				ESP8266->Baudrate = ESP8266_Baudrate[i];
    6c10:	f5 01       	movw	r30, r10
    6c12:	ee 0f       	add	r30, r30
    6c14:	ff 1f       	adc	r31, r31
    6c16:	ee 0f       	add	r30, r30
    6c18:	ff 1f       	adc	r31, r31
    6c1a:	ec 52       	subi	r30, 0x2C	; 44
    6c1c:	f9 4d       	sbci	r31, 0xD9	; 217
    6c1e:	80 81       	ld	r24, Z
    6c20:	91 81       	ldd	r25, Z+1	; 0x01
    6c22:	a2 81       	ldd	r26, Z+2	; 0x02
    6c24:	b3 81       	ldd	r27, Z+3	; 0x03
    6c26:	f8 01       	movw	r30, r16
    6c28:	80 83       	st	Z, r24
    6c2a:	91 83       	std	Z+1, r25	; 0x01
    6c2c:	a2 83       	std	Z+2, r26	; 0x02
    6c2e:	b3 83       	std	Z+3, r27	; 0x03
		/* Device is not connected */
		ESP8266_RETURNWITHSTATUS(ESP8266, ESP_DEVICENOTCONNECTED);
	}
	
	/* Set allowed timeout to 30sec */
	ESP8266->Timeout = ESP8266_TIMEOUT;
    6c30:	80 e3       	ldi	r24, 0x30	; 48
    6c32:	95 e7       	ldi	r25, 0x75	; 117
    6c34:	a0 e0       	ldi	r26, 0x00	; 0
    6c36:	b0 e0       	ldi	r27, 0x00	; 0
    6c38:	f8 01       	movw	r30, r16
    6c3a:	86 8b       	std	Z+22, r24	; 0x16
    6c3c:	97 8b       	std	Z+23, r25	; 0x17
    6c3e:	a0 8f       	std	Z+24, r26	; 0x18
    6c40:	b1 8f       	std	Z+25, r27	; 0x19
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    6c42:	84 81       	ldd	r24, Z+4	; 0x04
    6c44:	95 81       	ldd	r25, Z+5	; 0x05
    6c46:	a6 81       	ldd	r26, Z+6	; 0x06
    6c48:	b7 81       	ldd	r27, Z+7	; 0x07
    6c4a:	89 2b       	or	r24, r25
    6c4c:	8a 2b       	or	r24, r26
    6c4e:	8b 2b       	or	r24, r27
    6c50:	09 f0       	breq	.+2      	; 0x6c54 <ESP8266_Init+0x34c>
    6c52:	4a c0       	rjmp	.+148    	; 0x6ce8 <ESP8266_Init+0x3e0>
	}
	
	/* Send command if valid pointer */
	if (CommandStr != NULL) {
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
    6c54:	64 e0       	ldi	r22, 0x04	; 4
    6c56:	70 e0       	ldi	r23, 0x00	; 0
    6c58:	83 ec       	ldi	r24, 0xC3	; 195
    6c5a:	96 e2       	ldi	r25, 0x26	; 38
    6c5c:	b1 d2       	rcall	.+1378   	; 0x71c0 <ESP8266_LL_USARTSend>
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    6c5e:	8e e0       	ldi	r24, 0x0E	; 14
    6c60:	90 e0       	ldi	r25, 0x00	; 0
    6c62:	a0 e0       	ldi	r26, 0x00	; 0
    6c64:	b0 e0       	ldi	r27, 0x00	; 0
    6c66:	f8 01       	movw	r30, r16
    6c68:	84 83       	std	Z+4, r24	; 0x04
    6c6a:	95 83       	std	Z+5, r25	; 0x05
    6c6c:	a6 83       	std	Z+6, r26	; 0x06
    6c6e:	b7 83       	std	Z+7, r27	; 0x07
	ESP8266->ActiveCommandResponse = (char *)StartRespond;
    6c70:	8f ea       	ldi	r24, 0xAF	; 175
    6c72:	92 e2       	ldi	r25, 0x22	; 34
    6c74:	80 87       	std	Z+8, r24	; 0x08
    6c76:	91 87       	std	Z+9, r25	; 0x09
	
	/* Set command start time */
	ESP8266->StartTime = ESP8266->Time;
    6c78:	86 85       	ldd	r24, Z+14	; 0x0e
    6c7a:	97 85       	ldd	r25, Z+15	; 0x0f
    6c7c:	a0 89       	ldd	r26, Z+16	; 0x10
    6c7e:	b1 89       	ldd	r27, Z+17	; 0x11
    6c80:	82 87       	std	Z+10, r24	; 0x0a
    6c82:	93 87       	std	Z+11, r25	; 0x0b
    6c84:	a4 87       	std	Z+12, r26	; 0x0c
    6c86:	b5 87       	std	Z+13, r27	; 0x0d
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    6c88:	d4 01       	movw	r26, r8
    6c8a:	1c 92       	st	X, r1

ESP8266_Result_t ESP8266_WaitReady(ESP8266_t* ESP8266) {
	/* Do job */
	do {
		/* Check for wrapper */
		if (ESP8266->Flags.F.WaitForWrapper) {
    6c8c:	f1 01       	movw	r30, r2
    6c8e:	80 81       	ld	r24, Z
    6c90:	80 ff       	sbrs	r24, 0
    6c92:	0c c0       	rjmp	.+24     	; 0x6cac <ESP8266_Init+0x3a4>
			/* We have found it, stop execution here */
			if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {
    6c94:	22 e0       	ldi	r18, 0x02	; 2
    6c96:	30 e0       	ldi	r19, 0x00	; 0
    6c98:	40 e0       	ldi	r20, 0x00	; 0
    6c9a:	50 e0       	ldi	r21, 0x00	; 0
    6c9c:	6d ed       	ldi	r22, 0xDD	; 221
    6c9e:	73 e2       	ldi	r23, 0x23	; 35
    6ca0:	82 e9       	ldi	r24, 0x92	; 146
    6ca2:	94 e3       	ldi	r25, 0x34	; 52
    6ca4:	0e 94 8f 1a 	call	0x351e	; 0x351e <BUFFER_Find>
    6ca8:	97 ff       	sbrs	r25, 7
    6caa:	24 c0       	rjmp	.+72     	; 0x6cf4 <ESP8266_Init+0x3ec>
				ESP8266->Flags.F.WaitForWrapper = 0;
				break;
			}
		}
		/* Update device */
		ESP8266_Update(ESP8266);
    6cac:	c8 01       	movw	r24, r16
    6cae:	51 d9       	rcall	.-3422   	; 0x5f52 <ESP8266_Update>
	} while (ESP8266->ActiveCommand != ESP8266_COMMAND_IDLE);
    6cb0:	f8 01       	movw	r30, r16
    6cb2:	44 81       	ldd	r20, Z+4	; 0x04
    6cb4:	55 81       	ldd	r21, Z+5	; 0x05
    6cb6:	66 81       	ldd	r22, Z+6	; 0x06
    6cb8:	77 81       	ldd	r23, Z+7	; 0x07
    6cba:	45 2b       	or	r20, r21
    6cbc:	46 2b       	or	r20, r22
    6cbe:	47 2b       	or	r20, r23
    6cc0:	29 f7       	brne	.-54     	; 0x6c8c <ESP8266_Init+0x384>
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    6cc2:	d4 01       	movw	r26, r8
    6cc4:	1c 92       	st	X, r1
	
	/* Wait till idle */
	ESP8266_WaitReady(ESP8266);
	
	/* Check status */
	if (!ESP8266->Flags.F.LastOperationStatus) {		
    6cc6:	f1 01       	movw	r30, r2
    6cc8:	80 81       	ld	r24, Z
    6cca:	81 fd       	sbrc	r24, 1
    6ccc:	20 c0       	rjmp	.+64     	; 0x6d0e <ESP8266_Init+0x406>
		ESP8266_RETURNWITHSTATUS(ESP8266, ESP_DEVICENOTCONNECTED);
    6cce:	82 e0       	ldi	r24, 0x02	; 2
    6cd0:	8c 93       	st	X, r24
    6cd2:	4c ce       	rjmp	.-872    	; 0x696c <ESP8266_Init+0x64>
	do {
		/* Check for wrapper */
		if (ESP8266->Flags.F.WaitForWrapper) {
			/* We have found it, stop execution here */
			if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {
				ESP8266->Flags.F.WaitForWrapper = 0;
    6cd4:	78 01       	movw	r14, r16
    6cd6:	b3 ed       	ldi	r27, 0xD3	; 211
    6cd8:	eb 1a       	sub	r14, r27
    6cda:	be ef       	ldi	r27, 0xFE	; 254
    6cdc:	fb 0a       	sbc	r15, r27
    6cde:	f7 01       	movw	r30, r14
    6ce0:	81 81       	ldd	r24, Z+1	; 0x01
    6ce2:	8e 7f       	andi	r24, 0xFE	; 254
    6ce4:	81 83       	std	Z+1, r24	; 0x01
    6ce6:	fb ce       	rjmp	.-522    	; 0x6ade <ESP8266_Init+0x1d6>
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    6ce8:	c8 01       	movw	r24, r16
    6cea:	33 d9       	rcall	.-3482   	; 0x5f52 <ESP8266_Update>
    6cec:	87 e0       	ldi	r24, 0x07	; 7
    6cee:	d4 01       	movw	r26, r8
    6cf0:	8c 93       	st	X, r24
    6cf2:	cc cf       	rjmp	.-104    	; 0x6c8c <ESP8266_Init+0x384>
	do {
		/* Check for wrapper */
		if (ESP8266->Flags.F.WaitForWrapper) {
			/* We have found it, stop execution here */
			if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {
				ESP8266->Flags.F.WaitForWrapper = 0;
    6cf4:	78 01       	movw	r14, r16
    6cf6:	f3 ed       	ldi	r31, 0xD3	; 211
    6cf8:	ef 1a       	sub	r14, r31
    6cfa:	fe ef       	ldi	r31, 0xFE	; 254
    6cfc:	ff 0a       	sbc	r15, r31
    6cfe:	d7 01       	movw	r26, r14
    6d00:	11 96       	adiw	r26, 0x01	; 1
    6d02:	8c 91       	ld	r24, X
    6d04:	11 97       	sbiw	r26, 0x01	; 1
    6d06:	8e 7f       	andi	r24, 0xFE	; 254
    6d08:	11 96       	adiw	r26, 0x01	; 1
    6d0a:	8c 93       	st	X, r24
    6d0c:	da cf       	rjmp	.-76     	; 0x6cc2 <ESP8266_Init+0x3ba>
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    6d0e:	f8 01       	movw	r30, r16
    6d10:	84 81       	ldd	r24, Z+4	; 0x04
    6d12:	95 81       	ldd	r25, Z+5	; 0x05
    6d14:	a6 81       	ldd	r26, Z+6	; 0x06
    6d16:	b7 81       	ldd	r27, Z+7	; 0x07
    6d18:	89 2b       	or	r24, r25
    6d1a:	8a 2b       	or	r24, r26
    6d1c:	8b 2b       	or	r24, r27
    6d1e:	09 f0       	breq	.+2      	; 0x6d22 <ESP8266_Init+0x41a>
    6d20:	79 c1       	rjmp	.+754    	; 0x7014 <ESP8266_Init+0x70c>
	}
	
	/* Send command if valid pointer */
	if (CommandStr != NULL) {
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
    6d22:	66 e0       	ldi	r22, 0x06	; 6
    6d24:	70 e0       	ldi	r23, 0x00	; 0
    6d26:	88 ec       	ldi	r24, 0xC8	; 200
    6d28:	96 e2       	ldi	r25, 0x26	; 38
    6d2a:	4a d2       	rcall	.+1172   	; 0x71c0 <ESP8266_LL_USARTSend>
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    6d2c:	8d e0       	ldi	r24, 0x0D	; 13
    6d2e:	90 e0       	ldi	r25, 0x00	; 0
    6d30:	a0 e0       	ldi	r26, 0x00	; 0
    6d32:	b0 e0       	ldi	r27, 0x00	; 0
    6d34:	f8 01       	movw	r30, r16
    6d36:	84 83       	std	Z+4, r24	; 0x04
    6d38:	95 83       	std	Z+5, r25	; 0x05
    6d3a:	a6 83       	std	Z+6, r26	; 0x06
    6d3c:	b7 83       	std	Z+7, r27	; 0x07
	ESP8266->ActiveCommandResponse = (char *)StartRespond;
    6d3e:	8f ec       	ldi	r24, 0xCF	; 207
    6d40:	96 e2       	ldi	r25, 0x26	; 38
    6d42:	80 87       	std	Z+8, r24	; 0x08
    6d44:	91 87       	std	Z+9, r25	; 0x09
	
	/* Set command start time */
	ESP8266->StartTime = ESP8266->Time;
    6d46:	86 85       	ldd	r24, Z+14	; 0x0e
    6d48:	97 85       	ldd	r25, Z+15	; 0x0f
    6d4a:	a0 89       	ldd	r26, Z+16	; 0x10
    6d4c:	b1 89       	ldd	r27, Z+17	; 0x11
    6d4e:	82 87       	std	Z+10, r24	; 0x0a
    6d50:	93 87       	std	Z+11, r25	; 0x0b
    6d52:	a4 87       	std	Z+12, r26	; 0x0c
    6d54:	b5 87       	std	Z+13, r27	; 0x0d
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    6d56:	d4 01       	movw	r26, r8
    6d58:	1c 92       	st	X, r1
	/* Disable echo if not already */
	SendCommand(ESP8266, ESP8266_COMMAND_ATE, "ATE0\r\n", "ATE0");
#endif
	
	/* Wait till idle */
	ESP8266_WaitReady(ESP8266);
    6d5a:	c8 01       	movw	r24, r16
    6d5c:	01 dd       	rcall	.-1534   	; 0x6760 <ESP8266_WaitReady>
    6d5e:	f8 01       	movw	r30, r16
    6d60:	e3 5d       	subi	r30, 0xD3	; 211
    6d62:	fe 4f       	sbci	r31, 0xFE	; 254
    6d64:	7f 01       	movw	r14, r30
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
}

ESP8266_Result_t ESP8266_SetMux(ESP8266_t* ESP8266, uint8_t mux) {
	char m = (char) mux + '0';
    6d66:	e1 e3       	ldi	r30, 0x31	; 49
    6d68:	de 2e       	mov	r13, r30
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    6d6a:	fb e0       	ldi	r31, 0x0B	; 11
    6d6c:	4f 2e       	mov	r4, r31
    6d6e:	51 2c       	mov	r5, r1
    6d70:	61 2c       	mov	r6, r1
    6d72:	71 2c       	mov	r7, r1
	ESP8266_WaitReady(ESP8266);
	
	/* Check last status */
	if (!ESP8266->Flags.F.LastOperationStatus) {
		/* Return error */
		ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);
    6d74:	bb 24       	eor	r11, r11
    6d76:	b3 94       	inc	r11
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    6d78:	a7 e0       	ldi	r26, 0x07	; 7
    6d7a:	ca 2e       	mov	r12, r26
	
	/* Wait till idle */
	ESP8266_WaitReady(ESP8266);
	
	/* Enable multiple connections */
	while (ESP8266_SetMux(ESP8266, 1) != ESP_OK);
    6d7c:	04 c0       	rjmp	.+8      	; 0x6d86 <ESP8266_Init+0x47e>
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    6d7e:	c8 01       	movw	r24, r16
    6d80:	e8 d8       	rcall	.-3632   	; 0x5f52 <ESP8266_Update>
    6d82:	d4 01       	movw	r26, r8
    6d84:	cc 92       	st	X, r12
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
}

ESP8266_Result_t ESP8266_SetMux(ESP8266_t* ESP8266, uint8_t mux) {
	char m = (char) mux + '0';
    6d86:	d9 86       	std	Y+9, r13	; 0x09
	
	/* Check idle */
	ESP8266_CHECK_IDLE(ESP8266);
    6d88:	f8 01       	movw	r30, r16
    6d8a:	84 81       	ldd	r24, Z+4	; 0x04
    6d8c:	95 81       	ldd	r25, Z+5	; 0x05
    6d8e:	a6 81       	ldd	r26, Z+6	; 0x06
    6d90:	b7 81       	ldd	r27, Z+7	; 0x07
    6d92:	89 2b       	or	r24, r25
    6d94:	8a 2b       	or	r24, r26
    6d96:	8b 2b       	or	r24, r27
    6d98:	91 f7       	brne	.-28     	; 0x6d7e <ESP8266_Init+0x476>
	
	/* Format command */
	ESP8266_USARTSENDSTRING("AT+CIPMUX=");
    6d9a:	6a e0       	ldi	r22, 0x0A	; 10
    6d9c:	70 e0       	ldi	r23, 0x00	; 0
    6d9e:	84 ed       	ldi	r24, 0xD4	; 212
    6da0:	95 e2       	ldi	r25, 0x25	; 37
    6da2:	0e d2       	rcall	.+1052   	; 0x71c0 <ESP8266_LL_USARTSend>
	ESP8266_USARTSENDCHAR(&m);
    6da4:	61 e0       	ldi	r22, 0x01	; 1
    6da6:	70 e0       	ldi	r23, 0x00	; 0
    6da8:	ce 01       	movw	r24, r28
    6daa:	09 96       	adiw	r24, 0x09	; 9
    6dac:	09 d2       	rcall	.+1042   	; 0x71c0 <ESP8266_LL_USARTSend>
	ESP8266_USARTSENDSTRING("\r\n");
    6dae:	62 e0       	ldi	r22, 0x02	; 2
    6db0:	70 e0       	ldi	r23, 0x00	; 0
    6db2:	81 e4       	ldi	r24, 0x41	; 65
    6db4:	91 e2       	ldi	r25, 0x21	; 33
    6db6:	04 d2       	rcall	.+1032   	; 0x71c0 <ESP8266_LL_USARTSend>
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    6db8:	f8 01       	movw	r30, r16
    6dba:	84 81       	ldd	r24, Z+4	; 0x04
    6dbc:	95 81       	ldd	r25, Z+5	; 0x05
    6dbe:	a6 81       	ldd	r26, Z+6	; 0x06
    6dc0:	b7 81       	ldd	r27, Z+7	; 0x07
    6dc2:	89 2b       	or	r24, r25
    6dc4:	8a 2b       	or	r24, r26
    6dc6:	8b 2b       	or	r24, r27
    6dc8:	d1 f6       	brne	.-76     	; 0x6d7e <ESP8266_Init+0x476>
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    6dca:	f8 01       	movw	r30, r16
    6dcc:	44 82       	std	Z+4, r4	; 0x04
    6dce:	55 82       	std	Z+5, r5	; 0x05
    6dd0:	66 82       	std	Z+6, r6	; 0x06
    6dd2:	77 82       	std	Z+7, r7	; 0x07
	ESP8266->ActiveCommandResponse = (char *)StartRespond;
    6dd4:	10 86       	std	Z+8, r1	; 0x08
    6dd6:	11 86       	std	Z+9, r1	; 0x09
	
	/* Set command start time */
	ESP8266->StartTime = ESP8266->Time;
    6dd8:	86 85       	ldd	r24, Z+14	; 0x0e
    6dda:	97 85       	ldd	r25, Z+15	; 0x0f
    6ddc:	a0 89       	ldd	r26, Z+16	; 0x10
    6dde:	b1 89       	ldd	r27, Z+17	; 0x11
    6de0:	82 87       	std	Z+10, r24	; 0x0a
    6de2:	93 87       	std	Z+11, r25	; 0x0b
    6de4:	a4 87       	std	Z+12, r26	; 0x0c
    6de6:	b5 87       	std	Z+13, r27	; 0x0d
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    6de8:	d4 01       	movw	r26, r8
    6dea:	1c 92       	st	X, r1

ESP8266_Result_t ESP8266_WaitReady(ESP8266_t* ESP8266) {
	/* Do job */
	do {
		/* Check for wrapper */
		if (ESP8266->Flags.F.WaitForWrapper) {
    6dec:	f1 01       	movw	r30, r2
    6dee:	80 81       	ld	r24, Z
    6df0:	80 ff       	sbrs	r24, 0
    6df2:	0c c0       	rjmp	.+24     	; 0x6e0c <ESP8266_Init+0x504>
			/* We have found it, stop execution here */
			if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {
    6df4:	22 e0       	ldi	r18, 0x02	; 2
    6df6:	30 e0       	ldi	r19, 0x00	; 0
    6df8:	40 e0       	ldi	r20, 0x00	; 0
    6dfa:	50 e0       	ldi	r21, 0x00	; 0
    6dfc:	6d ed       	ldi	r22, 0xDD	; 221
    6dfe:	73 e2       	ldi	r23, 0x23	; 35
    6e00:	82 e9       	ldi	r24, 0x92	; 146
    6e02:	94 e3       	ldi	r25, 0x34	; 52
    6e04:	0e 94 8f 1a 	call	0x351e	; 0x351e <BUFFER_Find>
    6e08:	97 ff       	sbrs	r25, 7
    6e0a:	0b c1       	rjmp	.+534    	; 0x7022 <ESP8266_Init+0x71a>
				ESP8266->Flags.F.WaitForWrapper = 0;
				break;
			}
		}
		/* Update device */
		ESP8266_Update(ESP8266);
    6e0c:	c8 01       	movw	r24, r16
    6e0e:	a1 d8       	rcall	.-3774   	; 0x5f52 <ESP8266_Update>
	} while (ESP8266->ActiveCommand != ESP8266_COMMAND_IDLE);
    6e10:	f8 01       	movw	r30, r16
    6e12:	84 81       	ldd	r24, Z+4	; 0x04
    6e14:	95 81       	ldd	r25, Z+5	; 0x05
    6e16:	a6 81       	ldd	r26, Z+6	; 0x06
    6e18:	b7 81       	ldd	r27, Z+7	; 0x07
    6e1a:	89 2b       	or	r24, r25
    6e1c:	8a 2b       	or	r24, r26
    6e1e:	8b 2b       	or	r24, r27
    6e20:	29 f7       	brne	.-54     	; 0x6dec <ESP8266_Init+0x4e4>
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    6e22:	d4 01       	movw	r26, r8
    6e24:	1c 92       	st	X, r1
	
	/* Wait till command end */
	ESP8266_WaitReady(ESP8266);
	
	/* Check last status */
	if (!ESP8266->Flags.F.LastOperationStatus) {
    6e26:	f1 01       	movw	r30, r2
    6e28:	80 81       	ld	r24, Z
    6e2a:	81 ff       	sbrs	r24, 1
    6e2c:	e4 c0       	rjmp	.+456    	; 0x6ff6 <ESP8266_Init+0x6ee>
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
}

ESP8266_Result_t ESP8266_Setdinfo(ESP8266_t* ESP8266, uint8_t info) {
	char i = (char) info + '0';
    6e2e:	21 e3       	ldi	r18, 0x31	; 49
    6e30:	d2 2e       	mov	r13, r18
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    6e32:	37 e0       	ldi	r19, 0x07	; 7
    6e34:	43 2e       	mov	r4, r19
    6e36:	51 2c       	mov	r5, r1
    6e38:	61 2c       	mov	r6, r1
    6e3a:	71 2c       	mov	r7, r1
	ESP8266_WaitReady(ESP8266);
	
	/* Check last status */
	if (!ESP8266->Flags.F.LastOperationStatus) {
		/* Return error */
		ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);
    6e3c:	bb 24       	eor	r11, r11
    6e3e:	b3 94       	inc	r11
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    6e40:	47 e0       	ldi	r20, 0x07	; 7
    6e42:	c4 2e       	mov	r12, r20
    6e44:	04 c0       	rjmp	.+8      	; 0x6e4e <ESP8266_Init+0x546>
    6e46:	c8 01       	movw	r24, r16
    6e48:	84 d8       	rcall	.-3832   	; 0x5f52 <ESP8266_Update>
    6e4a:	d4 01       	movw	r26, r8
    6e4c:	cc 92       	st	X, r12
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
}

ESP8266_Result_t ESP8266_Setdinfo(ESP8266_t* ESP8266, uint8_t info) {
	char i = (char) info + '0';
    6e4e:	d9 86       	std	Y+9, r13	; 0x09
	
	/* Check idle */
	ESP8266_CHECK_IDLE(ESP8266);
    6e50:	f8 01       	movw	r30, r16
    6e52:	84 81       	ldd	r24, Z+4	; 0x04
    6e54:	95 81       	ldd	r25, Z+5	; 0x05
    6e56:	a6 81       	ldd	r26, Z+6	; 0x06
    6e58:	b7 81       	ldd	r27, Z+7	; 0x07
    6e5a:	89 2b       	or	r24, r25
    6e5c:	8a 2b       	or	r24, r26
    6e5e:	8b 2b       	or	r24, r27
    6e60:	91 f7       	brne	.-28     	; 0x6e46 <ESP8266_Init+0x53e>
	
	/* Format command */
	ESP8266_USARTSENDSTRING("AT+CIPDINFO=");
    6e62:	6c e0       	ldi	r22, 0x0C	; 12
    6e64:	70 e0       	ldi	r23, 0x00	; 0
    6e66:	87 ec       	ldi	r24, 0xC7	; 199
    6e68:	95 e2       	ldi	r25, 0x25	; 37
    6e6a:	aa d1       	rcall	.+852    	; 0x71c0 <ESP8266_LL_USARTSend>
	ESP8266_USARTSENDCHAR(&i);
    6e6c:	61 e0       	ldi	r22, 0x01	; 1
    6e6e:	70 e0       	ldi	r23, 0x00	; 0
    6e70:	ce 01       	movw	r24, r28
    6e72:	09 96       	adiw	r24, 0x09	; 9
    6e74:	a5 d1       	rcall	.+842    	; 0x71c0 <ESP8266_LL_USARTSend>
	ESP8266_USARTSENDSTRING("\r\n");
    6e76:	62 e0       	ldi	r22, 0x02	; 2
    6e78:	70 e0       	ldi	r23, 0x00	; 0
    6e7a:	81 e4       	ldi	r24, 0x41	; 65
    6e7c:	91 e2       	ldi	r25, 0x21	; 33
    6e7e:	a0 d1       	rcall	.+832    	; 0x71c0 <ESP8266_LL_USARTSend>
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    6e80:	f8 01       	movw	r30, r16
    6e82:	84 81       	ldd	r24, Z+4	; 0x04
    6e84:	95 81       	ldd	r25, Z+5	; 0x05
    6e86:	a6 81       	ldd	r26, Z+6	; 0x06
    6e88:	b7 81       	ldd	r27, Z+7	; 0x07
    6e8a:	89 2b       	or	r24, r25
    6e8c:	8a 2b       	or	r24, r26
    6e8e:	8b 2b       	or	r24, r27
    6e90:	d1 f6       	brne	.-76     	; 0x6e46 <ESP8266_Init+0x53e>
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    6e92:	f8 01       	movw	r30, r16
    6e94:	44 82       	std	Z+4, r4	; 0x04
    6e96:	55 82       	std	Z+5, r5	; 0x05
    6e98:	66 82       	std	Z+6, r6	; 0x06
    6e9a:	77 82       	std	Z+7, r7	; 0x07
	ESP8266->ActiveCommandResponse = (char *)StartRespond;
    6e9c:	10 86       	std	Z+8, r1	; 0x08
    6e9e:	11 86       	std	Z+9, r1	; 0x09
	
	/* Set command start time */
	ESP8266->StartTime = ESP8266->Time;
    6ea0:	86 85       	ldd	r24, Z+14	; 0x0e
    6ea2:	97 85       	ldd	r25, Z+15	; 0x0f
    6ea4:	a0 89       	ldd	r26, Z+16	; 0x10
    6ea6:	b1 89       	ldd	r27, Z+17	; 0x11
    6ea8:	82 87       	std	Z+10, r24	; 0x0a
    6eaa:	93 87       	std	Z+11, r25	; 0x0b
    6eac:	a4 87       	std	Z+12, r26	; 0x0c
    6eae:	b5 87       	std	Z+13, r27	; 0x0d
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    6eb0:	d4 01       	movw	r26, r8
    6eb2:	1c 92       	st	X, r1

ESP8266_Result_t ESP8266_WaitReady(ESP8266_t* ESP8266) {
	/* Do job */
	do {
		/* Check for wrapper */
		if (ESP8266->Flags.F.WaitForWrapper) {
    6eb4:	f1 01       	movw	r30, r2
    6eb6:	80 81       	ld	r24, Z
    6eb8:	80 ff       	sbrs	r24, 0
    6eba:	0c c0       	rjmp	.+24     	; 0x6ed4 <ESP8266_Init+0x5cc>
			/* We have found it, stop execution here */
			if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {
    6ebc:	22 e0       	ldi	r18, 0x02	; 2
    6ebe:	30 e0       	ldi	r19, 0x00	; 0
    6ec0:	40 e0       	ldi	r20, 0x00	; 0
    6ec2:	50 e0       	ldi	r21, 0x00	; 0
    6ec4:	6d ed       	ldi	r22, 0xDD	; 221
    6ec6:	73 e2       	ldi	r23, 0x23	; 35
    6ec8:	82 e9       	ldi	r24, 0x92	; 146
    6eca:	94 e3       	ldi	r25, 0x34	; 52
    6ecc:	0e 94 8f 1a 	call	0x351e	; 0x351e <BUFFER_Find>
    6ed0:	97 ff       	sbrs	r25, 7
    6ed2:	93 c0       	rjmp	.+294    	; 0x6ffa <ESP8266_Init+0x6f2>
				ESP8266->Flags.F.WaitForWrapper = 0;
				break;
			}
		}
		/* Update device */
		ESP8266_Update(ESP8266);
    6ed4:	c8 01       	movw	r24, r16
    6ed6:	3d d8       	rcall	.-3974   	; 0x5f52 <ESP8266_Update>
	} while (ESP8266->ActiveCommand != ESP8266_COMMAND_IDLE);
    6ed8:	f8 01       	movw	r30, r16
    6eda:	84 81       	ldd	r24, Z+4	; 0x04
    6edc:	95 81       	ldd	r25, Z+5	; 0x05
    6ede:	a6 81       	ldd	r26, Z+6	; 0x06
    6ee0:	b7 81       	ldd	r27, Z+7	; 0x07
    6ee2:	89 2b       	or	r24, r25
    6ee4:	8a 2b       	or	r24, r26
    6ee6:	8b 2b       	or	r24, r27
    6ee8:	29 f7       	brne	.-54     	; 0x6eb4 <ESP8266_Init+0x5ac>
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    6eea:	d4 01       	movw	r26, r8
    6eec:	1c 92       	st	X, r1

	/* Wait till command end */
	ESP8266_WaitReady(ESP8266);
	
	/* Check last status */
	if (!ESP8266->Flags.F.LastOperationStatus) {
    6eee:	f1 01       	movw	r30, r2
    6ef0:	80 81       	ld	r24, Z
    6ef2:	81 ff       	sbrs	r24, 1
    6ef4:	7e c0       	rjmp	.+252    	; 0x6ff2 <ESP8266_Init+0x6ea>
    6ef6:	a0 eb       	ldi	r26, 0xB0	; 176
    6ef8:	aa 2e       	mov	r10, r26
    6efa:	a6 e2       	ldi	r26, 0x26	; 38
    6efc:	ba 2e       	mov	r11, r26
    6efe:	c8 01       	movw	r24, r16
    6f00:	89 50       	subi	r24, 0x09	; 9
    6f02:	9f 4f       	sbci	r25, 0xFF	; 255
    6f04:	8a 87       	std	Y+10, r24	; 0x0a
    6f06:	9b 87       	std	Y+11, r25	; 0x0b
    6f08:	d8 01       	movw	r26, r16
    6f0a:	a8 50       	subi	r26, 0x08	; 8
    6f0c:	bf 4f       	sbci	r27, 0xFF	; 255
    6f0e:	ac 87       	std	Y+12, r26	; 0x0c
    6f10:	bd 87       	std	Y+13, r27	; 0x0d
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
}

ESP8266_Result_t ESP8266_SetMode(ESP8266_t* ESP8266, ESP8266_Mode_t Mode) {
	uint8_t m = (uint8_t) Mode;
    6f12:	b3 e0       	ldi	r27, 0x03	; 3
    6f14:	db 2e       	mov	r13, r27
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    6f16:	8c e0       	ldi	r24, 0x0C	; 12
    6f18:	48 2e       	mov	r4, r24
    6f1a:	51 2c       	mov	r5, r1
    6f1c:	61 2c       	mov	r6, r1
    6f1e:	71 2c       	mov	r7, r1
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    6f20:	97 e0       	ldi	r25, 0x07	; 7
    6f22:	c9 2e       	mov	r12, r25
    6f24:	04 c0       	rjmp	.+8      	; 0x6f2e <ESP8266_Init+0x626>
    6f26:	c8 01       	movw	r24, r16
    6f28:	14 d8       	rcall	.-4056   	; 0x5f52 <ESP8266_Update>
    6f2a:	d4 01       	movw	r26, r8
    6f2c:	cc 92       	st	X, r12
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
}

ESP8266_Result_t ESP8266_SetMode(ESP8266_t* ESP8266, ESP8266_Mode_t Mode) {
	uint8_t m = (uint8_t) Mode;
    6f2e:	d9 86       	std	Y+9, r13	; 0x09
	
	/* Check IDLE mode */
	ESP8266_CHECK_IDLE(ESP8266);
    6f30:	f8 01       	movw	r30, r16
    6f32:	84 81       	ldd	r24, Z+4	; 0x04
    6f34:	95 81       	ldd	r25, Z+5	; 0x05
    6f36:	a6 81       	ldd	r26, Z+6	; 0x06
    6f38:	b7 81       	ldd	r27, Z+7	; 0x07
    6f3a:	89 2b       	or	r24, r25
    6f3c:	8a 2b       	or	r24, r26
    6f3e:	8b 2b       	or	r24, r27
    6f40:	91 f7       	brne	.-28     	; 0x6f26 <ESP8266_Init+0x61e>
	
	/* Send command */
	m += '0';
    6f42:	b3 e3       	ldi	r27, 0x33	; 51
    6f44:	b9 87       	std	Y+9, r27	; 0x09
	ESP8266_USARTSENDSTRING("AT+CWMODE_CUR=");
    6f46:	6e e0       	ldi	r22, 0x0E	; 14
    6f48:	70 e0       	ldi	r23, 0x00	; 0
    6f4a:	81 ea       	ldi	r24, 0xA1	; 161
    6f4c:	96 e2       	ldi	r25, 0x26	; 38
    6f4e:	38 d1       	rcall	.+624    	; 0x71c0 <ESP8266_LL_USARTSend>
	ESP8266_USARTSENDCHAR(&m);
    6f50:	61 e0       	ldi	r22, 0x01	; 1
    6f52:	70 e0       	ldi	r23, 0x00	; 0
    6f54:	ce 01       	movw	r24, r28
    6f56:	09 96       	adiw	r24, 0x09	; 9
    6f58:	33 d1       	rcall	.+614    	; 0x71c0 <ESP8266_LL_USARTSend>
	ESP8266_USARTSENDSTRING("\r\n");
    6f5a:	62 e0       	ldi	r22, 0x02	; 2
    6f5c:	70 e0       	ldi	r23, 0x00	; 0
    6f5e:	81 e4       	ldi	r24, 0x41	; 65
    6f60:	91 e2       	ldi	r25, 0x21	; 33
    6f62:	2e d1       	rcall	.+604    	; 0x71c0 <ESP8266_LL_USARTSend>
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    6f64:	f8 01       	movw	r30, r16
    6f66:	84 81       	ldd	r24, Z+4	; 0x04
    6f68:	95 81       	ldd	r25, Z+5	; 0x05
    6f6a:	a6 81       	ldd	r26, Z+6	; 0x06
    6f6c:	b7 81       	ldd	r27, Z+7	; 0x07
    6f6e:	89 2b       	or	r24, r25
    6f70:	8a 2b       	or	r24, r26
    6f72:	8b 2b       	or	r24, r27
    6f74:	c1 f6       	brne	.-80     	; 0x6f26 <ESP8266_Init+0x61e>
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    6f76:	85 e0       	ldi	r24, 0x05	; 5
    6f78:	90 e0       	ldi	r25, 0x00	; 0
    6f7a:	a0 e0       	ldi	r26, 0x00	; 0
    6f7c:	b0 e0       	ldi	r27, 0x00	; 0
    6f7e:	f8 01       	movw	r30, r16
    6f80:	84 83       	std	Z+4, r24	; 0x04
    6f82:	95 83       	std	Z+5, r25	; 0x05
    6f84:	a6 83       	std	Z+6, r26	; 0x06
    6f86:	b7 83       	std	Z+7, r27	; 0x07
	ESP8266->ActiveCommandResponse = (char *)StartRespond;
    6f88:	a0 86       	std	Z+8, r10	; 0x08
    6f8a:	b1 86       	std	Z+9, r11	; 0x09
	
	/* Set command start time */
	ESP8266->StartTime = ESP8266->Time;
    6f8c:	86 85       	ldd	r24, Z+14	; 0x0e
    6f8e:	97 85       	ldd	r25, Z+15	; 0x0f
    6f90:	a0 89       	ldd	r26, Z+16	; 0x10
    6f92:	b1 89       	ldd	r27, Z+17	; 0x11
    6f94:	82 87       	std	Z+10, r24	; 0x0a
    6f96:	93 87       	std	Z+11, r25	; 0x0b
    6f98:	a4 87       	std	Z+12, r26	; 0x0c
    6f9a:	b5 87       	std	Z+13, r27	; 0x0d
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    6f9c:	d4 01       	movw	r26, r8
    6f9e:	1c 92       	st	X, r1
	if (SendCommand(ESP8266, ESP8266_COMMAND_CWMODE, NULL, "AT+CWMODE") != ESP_OK) {
		return ESP8266->Result;
	}
	
	/* Save mode we sent */
	ESP8266->SentMode = Mode;
    6fa0:	ea 85       	ldd	r30, Y+10	; 0x0a
    6fa2:	fb 85       	ldd	r31, Y+11	; 0x0b
    6fa4:	d0 82       	st	Z, r13

ESP8266_Result_t ESP8266_WaitReady(ESP8266_t* ESP8266) {
	/* Do job */
	do {
		/* Check for wrapper */
		if (ESP8266->Flags.F.WaitForWrapper) {
    6fa6:	d1 01       	movw	r26, r2
    6fa8:	8c 91       	ld	r24, X
    6faa:	80 ff       	sbrs	r24, 0
    6fac:	0c c0       	rjmp	.+24     	; 0x6fc6 <ESP8266_Init+0x6be>
			/* We have found it, stop execution here */
			if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {
    6fae:	22 e0       	ldi	r18, 0x02	; 2
    6fb0:	30 e0       	ldi	r19, 0x00	; 0
    6fb2:	40 e0       	ldi	r20, 0x00	; 0
    6fb4:	50 e0       	ldi	r21, 0x00	; 0
    6fb6:	6d ed       	ldi	r22, 0xDD	; 221
    6fb8:	73 e2       	ldi	r23, 0x23	; 35
    6fba:	82 e9       	ldi	r24, 0x92	; 146
    6fbc:	94 e3       	ldi	r25, 0x34	; 52
    6fbe:	0e 94 8f 1a 	call	0x351e	; 0x351e <BUFFER_Find>
    6fc2:	97 ff       	sbrs	r25, 7
    6fc4:	22 c0       	rjmp	.+68     	; 0x700a <ESP8266_Init+0x702>
				ESP8266->Flags.F.WaitForWrapper = 0;
				break;
			}
		}
		/* Update device */
		ESP8266_Update(ESP8266);
    6fc6:	c8 01       	movw	r24, r16
    6fc8:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <ESP8266_Update>
	} while (ESP8266->ActiveCommand != ESP8266_COMMAND_IDLE);
    6fcc:	f8 01       	movw	r30, r16
    6fce:	84 81       	ldd	r24, Z+4	; 0x04
    6fd0:	95 81       	ldd	r25, Z+5	; 0x05
    6fd2:	a6 81       	ldd	r26, Z+6	; 0x06
    6fd4:	b7 81       	ldd	r27, Z+7	; 0x07
    6fd6:	89 2b       	or	r24, r25
    6fd8:	8a 2b       	or	r24, r26
    6fda:	8b 2b       	or	r24, r27
    6fdc:	21 f7       	brne	.-56     	; 0x6fa6 <ESP8266_Init+0x69e>
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    6fde:	d4 01       	movw	r26, r8
    6fe0:	1c 92       	st	X, r1

	/* Wait till command end */
	ESP8266_WaitReady(ESP8266);
	
	/* Check status */
	if (ESP8266->Mode != Mode) {
    6fe2:	ec 85       	ldd	r30, Y+12	; 0x0c
    6fe4:	fd 85       	ldd	r31, Y+13	; 0x0d
    6fe6:	80 81       	ld	r24, Z
    6fe8:	83 30       	cpi	r24, 0x03	; 3
    6fea:	19 f1       	breq	.+70     	; 0x7032 <ESP8266_Init+0x72a>
		/* Return error */
		ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);
    6fec:	f1 e0       	ldi	r31, 0x01	; 1
    6fee:	fc 93       	st	X, r31
    6ff0:	9e cf       	rjmp	.-196    	; 0x6f2e <ESP8266_Init+0x626>
	ESP8266_WaitReady(ESP8266);
	
	/* Check last status */
	if (!ESP8266->Flags.F.LastOperationStatus) {
		/* Return error */
		ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);
    6ff2:	bc 92       	st	X, r11
    6ff4:	2c cf       	rjmp	.-424    	; 0x6e4e <ESP8266_Init+0x546>
	ESP8266_WaitReady(ESP8266);
	
	/* Check last status */
	if (!ESP8266->Flags.F.LastOperationStatus) {
		/* Return error */
		ESP8266_RETURNWITHSTATUS(ESP8266, ESP_ERROR);
    6ff6:	bc 92       	st	X, r11
    6ff8:	c6 ce       	rjmp	.-628    	; 0x6d86 <ESP8266_Init+0x47e>
	do {
		/* Check for wrapper */
		if (ESP8266->Flags.F.WaitForWrapper) {
			/* We have found it, stop execution here */
			if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {
				ESP8266->Flags.F.WaitForWrapper = 0;
    6ffa:	d7 01       	movw	r26, r14
    6ffc:	11 96       	adiw	r26, 0x01	; 1
    6ffe:	8c 91       	ld	r24, X
    7000:	11 97       	sbiw	r26, 0x01	; 1
    7002:	8e 7f       	andi	r24, 0xFE	; 254
    7004:	11 96       	adiw	r26, 0x01	; 1
    7006:	8c 93       	st	X, r24
    7008:	70 cf       	rjmp	.-288    	; 0x6eea <ESP8266_Init+0x5e2>
    700a:	f7 01       	movw	r30, r14
    700c:	81 81       	ldd	r24, Z+1	; 0x01
    700e:	8e 7f       	andi	r24, 0xFE	; 254
    7010:	81 83       	std	Z+1, r24	; 0x01
    7012:	e5 cf       	rjmp	.-54     	; 0x6fde <ESP8266_Init+0x6d6>
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    7014:	c8 01       	movw	r24, r16
    7016:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <ESP8266_Update>
    701a:	87 e0       	ldi	r24, 0x07	; 7
    701c:	d4 01       	movw	r26, r8
    701e:	8c 93       	st	X, r24
    7020:	9c ce       	rjmp	.-712    	; 0x6d5a <ESP8266_Init+0x452>
	do {
		/* Check for wrapper */
		if (ESP8266->Flags.F.WaitForWrapper) {
			/* We have found it, stop execution here */
			if (BUFFER_Find(&USART_Buffer, (uint8_t *)"> ", 2) >= 0) {
				ESP8266->Flags.F.WaitForWrapper = 0;
    7022:	d7 01       	movw	r26, r14
    7024:	11 96       	adiw	r26, 0x01	; 1
    7026:	8c 91       	ld	r24, X
    7028:	11 97       	sbiw	r26, 0x01	; 1
    702a:	8e 7f       	andi	r24, 0xFE	; 254
    702c:	11 96       	adiw	r26, 0x01	; 1
    702e:	8c 93       	st	X, r24
    7030:	f8 ce       	rjmp	.-528    	; 0x6e22 <ESP8266_Init+0x51a>
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    7032:	f8 01       	movw	r30, r16
    7034:	84 81       	ldd	r24, Z+4	; 0x04
    7036:	95 81       	ldd	r25, Z+5	; 0x05
    7038:	a6 81       	ldd	r26, Z+6	; 0x06
    703a:	b7 81       	ldd	r27, Z+7	; 0x07
    703c:	89 2b       	or	r24, r25
    703e:	8a 2b       	or	r24, r26
    7040:	8b 2b       	or	r24, r27
    7042:	09 f0       	breq	.+2      	; 0x7046 <ESP8266_Init+0x73e>
    7044:	70 cf       	rjmp	.-288    	; 0x6f26 <ESP8266_Init+0x61e>
	}
	
	/* Send command if valid pointer */
	if (CommandStr != NULL) {
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
    7046:	6b e0       	ldi	r22, 0x0B	; 11
    7048:	70 e0       	ldi	r23, 0x00	; 0
    704a:	87 e3       	ldi	r24, 0x37	; 55
    704c:	95 e2       	ldi	r25, 0x25	; 37
    704e:	b8 d0       	rcall	.+368    	; 0x71c0 <ESP8266_LL_USARTSend>
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    7050:	f8 01       	movw	r30, r16
    7052:	44 82       	std	Z+4, r4	; 0x04
    7054:	55 82       	std	Z+5, r5	; 0x05
    7056:	66 82       	std	Z+6, r6	; 0x06
    7058:	77 82       	std	Z+7, r7	; 0x07
	ESP8266->ActiveCommandResponse = (char *)StartRespond;
    705a:	8a ea       	ldi	r24, 0xAA	; 170
    705c:	93 e2       	ldi	r25, 0x23	; 35
    705e:	80 87       	std	Z+8, r24	; 0x08
    7060:	91 87       	std	Z+9, r25	; 0x09
	
	/* Set command start time */
	ESP8266->StartTime = ESP8266->Time;
    7062:	86 85       	ldd	r24, Z+14	; 0x0e
    7064:	97 85       	ldd	r25, Z+15	; 0x0f
    7066:	a0 89       	ldd	r26, Z+16	; 0x10
    7068:	b1 89       	ldd	r27, Z+17	; 0x11
    706a:	82 87       	std	Z+10, r24	; 0x0a
    706c:	93 87       	std	Z+11, r25	; 0x0b
    706e:	a4 87       	std	Z+12, r26	; 0x0c
    7070:	b5 87       	std	Z+13, r27	; 0x0d
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    7072:	d4 01       	movw	r26, r8
    7074:	1c 92       	st	X, r1
	if (SendCommand(ESP8266, ESP8266_COMMAND_CWSAP, "AT+CWSAP?\r\n", "+CWSAP") != ESP_OK) {
		return ESP8266->Result;
	}
	
	/* Wait till command end */
	return ESP8266_WaitReady(ESP8266);
    7076:	c8 01       	movw	r24, r16
    7078:	73 db       	rcall	.-2330   	; 0x6760 <ESP8266_WaitReady>
	
	/* Enable IP and PORT to be shown on +IPD statement */
	while (ESP8266_Setdinfo(ESP8266, 1) != ESP_OK);
	
	/* Set mode to STA+AP by default */
	while (ESP8266_SetMode(ESP8266, ESP8266_Mode_STA_AP) != ESP_OK);
    707a:	81 11       	cpse	r24, r1
    707c:	58 cf       	rjmp	.-336    	; 0x6f2e <ESP8266_Init+0x626>
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    707e:	77 e0       	ldi	r23, 0x07	; 7
    7080:	d7 2e       	mov	r13, r23
    7082:	f8 01       	movw	r30, r16
    7084:	44 81       	ldd	r20, Z+4	; 0x04
    7086:	55 81       	ldd	r21, Z+5	; 0x05
    7088:	66 81       	ldd	r22, Z+6	; 0x06
    708a:	77 81       	ldd	r23, Z+7	; 0x07
    708c:	45 2b       	or	r20, r21
    708e:	46 2b       	or	r20, r22
    7090:	47 2b       	or	r20, r23
    7092:	09 f0       	breq	.+2      	; 0x7096 <ESP8266_Init+0x78e>
    7094:	7f c0       	rjmp	.+254    	; 0x7194 <ESP8266_Init+0x88c>
	}
	
	/* Send command if valid pointer */
	if (CommandStr != NULL) {
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
    7096:	6f e0       	ldi	r22, 0x0F	; 15
    7098:	70 e0       	ldi	r23, 0x00	; 0
    709a:	8e e9       	ldi	r24, 0x9E	; 158
    709c:	94 e2       	ldi	r25, 0x24	; 36
    709e:	90 d0       	rcall	.+288    	; 0x71c0 <ESP8266_LL_USARTSend>
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    70a0:	88 e1       	ldi	r24, 0x18	; 24
    70a2:	90 e0       	ldi	r25, 0x00	; 0
    70a4:	a0 e0       	ldi	r26, 0x00	; 0
    70a6:	b0 e0       	ldi	r27, 0x00	; 0
    70a8:	f8 01       	movw	r30, r16
    70aa:	84 83       	std	Z+4, r24	; 0x04
    70ac:	95 83       	std	Z+5, r25	; 0x05
    70ae:	a6 83       	std	Z+6, r26	; 0x06
    70b0:	b7 83       	std	Z+7, r27	; 0x07
	ESP8266->ActiveCommandResponse = (char *)StartRespond;
    70b2:	88 ec       	ldi	r24, 0xC8	; 200
    70b4:	93 e2       	ldi	r25, 0x23	; 35
    70b6:	80 87       	std	Z+8, r24	; 0x08
    70b8:	91 87       	std	Z+9, r25	; 0x09
	
	/* Set command start time */
	ESP8266->StartTime = ESP8266->Time;
    70ba:	86 85       	ldd	r24, Z+14	; 0x0e
    70bc:	97 85       	ldd	r25, Z+15	; 0x0f
    70be:	a0 89       	ldd	r26, Z+16	; 0x10
    70c0:	b1 89       	ldd	r27, Z+17	; 0x11
    70c2:	82 87       	std	Z+10, r24	; 0x0a
    70c4:	93 87       	std	Z+11, r25	; 0x0b
    70c6:	a4 87       	std	Z+12, r26	; 0x0c
    70c8:	b5 87       	std	Z+13, r27	; 0x0d
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    70ca:	d4 01       	movw	r26, r8
    70cc:	1c 92       	st	X, r1
	SendCommand(ESP8266, ESP8266_COMMAND_CIPSTAMAC, "AT+CIPSTAMAC?\r\n", "+CIPSTAMAC");
	
	/* Check status */
	if (ESP8266->Result == ESP_OK) {
		/* Reset flags */
		ESP8266->Flags.F.STAMACIsSet = 0;
    70ce:	f7 01       	movw	r30, r14
    70d0:	80 81       	ld	r24, Z
    70d2:	87 7f       	andi	r24, 0xF7	; 247
    70d4:	80 83       	st	Z, r24
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    70d6:	67 e0       	ldi	r22, 0x07	; 7
    70d8:	d6 2e       	mov	r13, r22
    70da:	d8 01       	movw	r26, r16
    70dc:	14 96       	adiw	r26, 0x04	; 4
    70de:	4d 91       	ld	r20, X+
    70e0:	5d 91       	ld	r21, X+
    70e2:	6d 91       	ld	r22, X+
    70e4:	7c 91       	ld	r23, X
    70e6:	17 97       	sbiw	r26, 0x07	; 7
    70e8:	45 2b       	or	r20, r21
    70ea:	46 2b       	or	r20, r22
    70ec:	47 2b       	or	r20, r23
    70ee:	09 f0       	breq	.+2      	; 0x70f2 <ESP8266_Init+0x7ea>
    70f0:	5d c0       	rjmp	.+186    	; 0x71ac <ESP8266_Init+0x8a4>
	}
	
	/* Send command if valid pointer */
	if (CommandStr != NULL) {
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
    70f2:	6e e0       	ldi	r22, 0x0E	; 14
    70f4:	70 e0       	ldi	r23, 0x00	; 0
    70f6:	8f e8       	ldi	r24, 0x8F	; 143
    70f8:	94 e2       	ldi	r25, 0x24	; 36
    70fa:	62 d0       	rcall	.+196    	; 0x71c0 <ESP8266_LL_USARTSend>
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    70fc:	89 e1       	ldi	r24, 0x19	; 25
    70fe:	90 e0       	ldi	r25, 0x00	; 0
    7100:	a0 e0       	ldi	r26, 0x00	; 0
    7102:	b0 e0       	ldi	r27, 0x00	; 0
    7104:	f8 01       	movw	r30, r16
    7106:	84 83       	std	Z+4, r24	; 0x04
    7108:	95 83       	std	Z+5, r25	; 0x05
    710a:	a6 83       	std	Z+6, r26	; 0x06
    710c:	b7 83       	std	Z+7, r27	; 0x07
	ESP8266->ActiveCommandResponse = (char *)StartRespond;
    710e:	83 ed       	ldi	r24, 0xD3	; 211
    7110:	93 e2       	ldi	r25, 0x23	; 35
    7112:	80 87       	std	Z+8, r24	; 0x08
    7114:	91 87       	std	Z+9, r25	; 0x09
	
	/* Set command start time */
	ESP8266->StartTime = ESP8266->Time;
    7116:	86 85       	ldd	r24, Z+14	; 0x0e
    7118:	97 85       	ldd	r25, Z+15	; 0x0f
    711a:	a0 89       	ldd	r26, Z+16	; 0x10
    711c:	b1 89       	ldd	r27, Z+17	; 0x11
    711e:	82 87       	std	Z+10, r24	; 0x0a
    7120:	93 87       	std	Z+11, r25	; 0x0b
    7122:	a4 87       	std	Z+12, r26	; 0x0c
    7124:	b5 87       	std	Z+13, r27	; 0x0d
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    7126:	d4 01       	movw	r26, r8
    7128:	1c 92       	st	X, r1
	SendCommand(ESP8266, ESP8266_COMMAND_CIPAPMAC, "AT+CIPAPMAC?\r\n", "+CIPAPMAC");
	
	/* Check status */
	if (ESP8266->Result == ESP_OK) {
		/* Reset flags */
		ESP8266->Flags.F.APMACIsSet = 0;
    712a:	f7 01       	movw	r30, r14
    712c:	80 81       	ld	r24, Z
    712e:	8f 77       	andi	r24, 0x7F	; 127
    7130:	80 83       	st	Z, r24
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    7132:	57 e0       	ldi	r21, 0x07	; 7
    7134:	d5 2e       	mov	r13, r21
    7136:	d8 01       	movw	r26, r16
    7138:	14 96       	adiw	r26, 0x04	; 4
    713a:	4d 91       	ld	r20, X+
    713c:	5d 91       	ld	r21, X+
    713e:	6d 91       	ld	r22, X+
    7140:	7c 91       	ld	r23, X
    7142:	17 97       	sbiw	r26, 0x07	; 7
    7144:	45 2b       	or	r20, r21
    7146:	46 2b       	or	r20, r22
    7148:	47 2b       	or	r20, r23
    714a:	51 f5       	brne	.+84     	; 0x71a0 <ESP8266_Init+0x898>
	}
	
	/* Send command if valid pointer */
	if (CommandStr != NULL) {
		/* Clear buffer and send command */
		ESP8266_USARTSENDSTRING(CommandStr);
    714c:	6f e0       	ldi	r22, 0x0F	; 15
    714e:	70 e0       	ldi	r23, 0x00	; 0
    7150:	8e ea       	ldi	r24, 0xAE	; 174
    7152:	94 e2       	ldi	r25, 0x24	; 36
    7154:	35 d0       	rcall	.+106    	; 0x71c0 <ESP8266_LL_USARTSend>
	}
	
	/* Save current active command */
	ESP8266->ActiveCommand = Command;
    7156:	87 e1       	ldi	r24, 0x17	; 23
    7158:	90 e0       	ldi	r25, 0x00	; 0
    715a:	a0 e0       	ldi	r26, 0x00	; 0
    715c:	b0 e0       	ldi	r27, 0x00	; 0
    715e:	f8 01       	movw	r30, r16
    7160:	84 83       	std	Z+4, r24	; 0x04
    7162:	95 83       	std	Z+5, r25	; 0x05
    7164:	a6 83       	std	Z+6, r26	; 0x06
    7166:	b7 83       	std	Z+7, r27	; 0x07
	ESP8266->ActiveCommandResponse = (char *)StartRespond;
    7168:	8e eb       	ldi	r24, 0xBE	; 190
    716a:	94 e2       	ldi	r25, 0x24	; 36
    716c:	80 87       	std	Z+8, r24	; 0x08
    716e:	91 87       	std	Z+9, r25	; 0x09
	
	/* Set command start time */
	ESP8266->StartTime = ESP8266->Time;
    7170:	86 85       	ldd	r24, Z+14	; 0x0e
    7172:	97 85       	ldd	r25, Z+15	; 0x0f
    7174:	a0 89       	ldd	r26, Z+16	; 0x10
    7176:	b1 89       	ldd	r27, Z+17	; 0x11
    7178:	82 87       	std	Z+10, r24	; 0x0a
    717a:	93 87       	std	Z+11, r25	; 0x0b
    717c:	a4 87       	std	Z+12, r26	; 0x0c
    717e:	b5 87       	std	Z+13, r27	; 0x0d
	
	/* Return OK */
	ESP8266_RETURNWITHSTATUS(ESP8266, ESP_OK);
    7180:	d4 01       	movw	r26, r8
    7182:	1c 92       	st	X, r1
	SendCommand(ESP8266, ESP8266_COMMAND_CIPAP, "AT+CIPAP_CUR?\r\n", "+CIPAP_CUR");
	
	/* Check status */
	if (ESP8266->Result == ESP_OK) {
		/* Reset flags */
		ESP8266->Flags.F.APIPIsSet = 0;
    7184:	f7 01       	movw	r30, r14
    7186:	80 81       	ld	r24, Z
		ESP8266->Flags.F.APNetmaskIsSet = 0;
		ESP8266->Flags.F.APGatewayIsSet = 0;
    7188:	8f 7c       	andi	r24, 0xCF	; 207
    718a:	8f 7b       	andi	r24, 0xBF	; 191
    718c:	80 83       	st	Z, r24
	
	/* Get softAP MAC */
	while (ESP8266_GetAPIP(ESP8266) != ESP_OK);
	
	/* Return OK */
	return ESP8266_WaitReady(ESP8266);
    718e:	c8 01       	movw	r24, r16
    7190:	e7 da       	rcall	.-2610   	; 0x6760 <ESP8266_WaitReady>
    7192:	ec cb       	rjmp	.-2088   	; 0x696c <ESP8266_Init+0x64>
}

static
ESP8266_Result_t SendCommand(ESP8266_t* ESP8266, uint8_t Command, char* CommandStr, const char* StartRespond) {
	/* Check idle mode */
	ESP8266_CHECK_IDLE(ESP8266);
    7194:	c8 01       	movw	r24, r16
    7196:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <ESP8266_Update>
    719a:	d4 01       	movw	r26, r8
    719c:	dc 92       	st	X, r13
    719e:	71 cf       	rjmp	.-286    	; 0x7082 <ESP8266_Init+0x77a>
    71a0:	c8 01       	movw	r24, r16
    71a2:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <ESP8266_Update>
    71a6:	f4 01       	movw	r30, r8
    71a8:	d0 82       	st	Z, r13
    71aa:	c5 cf       	rjmp	.-118    	; 0x7136 <ESP8266_Init+0x82e>
    71ac:	c8 01       	movw	r24, r16
    71ae:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <ESP8266_Update>
    71b2:	f4 01       	movw	r30, r8
    71b4:	d0 82       	st	Z, r13
    71b6:	91 cf       	rjmp	.-222    	; 0x70da <ESP8266_Init+0x7d2>

000071b8 <ESP8266_LL_USARTInit>:
/**************************************************************************/
/**************************************************************************/

uint8_t ESP8266_LL_USARTInit(uint32_t baudrate) {
	/* Init USART */
	uart_setup();
    71b8:	0e 94 91 13 	call	0x2722	; 0x2722 <uart_setup>
	
	/* Return 0 = Successful */
	return 0;
}
    71bc:	80 e0       	ldi	r24, 0x00	; 0
    71be:	08 95       	ret

000071c0 <ESP8266_LL_USARTSend>:

uint8_t ESP8266_LL_USARTSend(uint8_t* data, uint16_t count) {
    71c0:	0f 93       	push	r16
    71c2:	1f 93       	push	r17
    71c4:	cf 93       	push	r28
    71c6:	df 93       	push	r29
	/* Send data via USART */
	while (count--) {
    71c8:	61 15       	cp	r22, r1
    71ca:	71 05       	cpc	r23, r1
    71cc:	51 f0       	breq	.+20     	; 0x71e2 <ESP8266_LL_USARTSend+0x22>
    71ce:	8c 01       	movw	r16, r24
    71d0:	eb 01       	movw	r28, r22
		uart_put_char(*data++);
    71d2:	f8 01       	movw	r30, r16
    71d4:	81 91       	ld	r24, Z+
    71d6:	8f 01       	movw	r16, r30
    71d8:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <uart_put_char>
    71dc:	21 97       	sbiw	r28, 0x01	; 1
	return 0;
}

uint8_t ESP8266_LL_USARTSend(uint8_t* data, uint16_t count) {
	/* Send data via USART */
	while (count--) {
    71de:	20 97       	sbiw	r28, 0x00	; 0
    71e0:	c1 f7       	brne	.-16     	; 0x71d2 <ESP8266_LL_USARTSend+0x12>
		uart_put_char(*data++);
	}
	
	/* Return 0 = Successful */
	return 0;
}
    71e2:	80 e0       	ldi	r24, 0x00	; 0
    71e4:	df 91       	pop	r29
    71e6:	cf 91       	pop	r28
    71e8:	1f 91       	pop	r17
    71ea:	0f 91       	pop	r16
    71ec:	08 95       	ret

000071ee <__vector_88>:

/* USART receive interrupt handler */
//void USART_RX_INTERRUPT_HANDLER_FUNCTION_NAME(void) 

ISR(USARTD0_RXC_vect) {
    71ee:	1f 92       	push	r1
    71f0:	0f 92       	push	r0
    71f2:	0f b6       	in	r0, 0x3f	; 63
    71f4:	0f 92       	push	r0
    71f6:	11 24       	eor	r1, r1
    71f8:	08 b6       	in	r0, 0x38	; 56
    71fa:	0f 92       	push	r0
    71fc:	18 be       	out	0x38, r1	; 56
    71fe:	09 b6       	in	r0, 0x39	; 57
    7200:	0f 92       	push	r0
    7202:	19 be       	out	0x39, r1	; 57
    7204:	0a b6       	in	r0, 0x3a	; 58
    7206:	0f 92       	push	r0
    7208:	1a be       	out	0x3a, r1	; 58
    720a:	0b b6       	in	r0, 0x3b	; 59
    720c:	0f 92       	push	r0
    720e:	1b be       	out	0x3b, r1	; 59
    7210:	2f 93       	push	r18
    7212:	3f 93       	push	r19
    7214:	4f 93       	push	r20
    7216:	5f 93       	push	r21
    7218:	6f 93       	push	r22
    721a:	7f 93       	push	r23
    721c:	8f 93       	push	r24
    721e:	9f 93       	push	r25
    7220:	af 93       	push	r26
    7222:	bf 93       	push	r27
    7224:	ef 93       	push	r30
    7226:	ff 93       	push	r31
    7228:	cf 93       	push	r28
    722a:	df 93       	push	r29
    722c:	1f 92       	push	r1
    722e:	cd b7       	in	r28, 0x3d	; 61
    7230:	de b7       	in	r29, 0x3e	; 62
	uint8_t ch;
	/* Get character from USART */
	ch = USARTD0.DATA;
    7232:	80 91 a0 09 	lds	r24, 0x09A0
    7236:	89 83       	std	Y+1, r24	; 0x01
	
	/* Send received character to ESP stack */
	ESP8266_DataReceived(&ch, 1);
    7238:	61 e0       	ldi	r22, 0x01	; 1
    723a:	70 e0       	ldi	r23, 0x00	; 0
    723c:	ce 01       	movw	r24, r28
    723e:	01 96       	adiw	r24, 0x01	; 1
    7240:	0e 94 34 23 	call	0x4668	; 0x4668 <ESP8266_DataReceived>
}
    7244:	0f 90       	pop	r0
    7246:	df 91       	pop	r29
    7248:	cf 91       	pop	r28
    724a:	ff 91       	pop	r31
    724c:	ef 91       	pop	r30
    724e:	bf 91       	pop	r27
    7250:	af 91       	pop	r26
    7252:	9f 91       	pop	r25
    7254:	8f 91       	pop	r24
    7256:	7f 91       	pop	r23
    7258:	6f 91       	pop	r22
    725a:	5f 91       	pop	r21
    725c:	4f 91       	pop	r20
    725e:	3f 91       	pop	r19
    7260:	2f 91       	pop	r18
    7262:	0f 90       	pop	r0
    7264:	0b be       	out	0x3b, r0	; 59
    7266:	0f 90       	pop	r0
    7268:	0a be       	out	0x3a, r0	; 58
    726a:	0f 90       	pop	r0
    726c:	09 be       	out	0x39, r0	; 57
    726e:	0f 90       	pop	r0
    7270:	08 be       	out	0x38, r0	; 56
    7272:	0f 90       	pop	r0
    7274:	0f be       	out	0x3f, r0	; 63
    7276:	0f 90       	pop	r0
    7278:	1f 90       	pop	r1
    727a:	18 95       	reti

0000727c <disk_timerproc>:
{
	#ifdef DRV_CFC
	cf_disk_timerproc();
	#endif
	#ifdef DRV_MMC
	mmc_disk_timerproc();
    727c:	00 c0       	rjmp	.+0      	; 0x727e <mmc_disk_timerproc>

0000727e <mmc_disk_timerproc>:
void mmc_disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    727e:	80 91 b7 34 	lds	r24, 0x34B7
	if (n) Timer1 = --n;
    7282:	88 23       	and	r24, r24
    7284:	19 f0       	breq	.+6      	; 0x728c <mmc_disk_timerproc+0xe>
    7286:	81 50       	subi	r24, 0x01	; 1
    7288:	80 93 b7 34 	sts	0x34B7, r24
	n = Timer2;
    728c:	80 91 b6 34 	lds	r24, 0x34B6
	if (n) Timer2 = --n;
    7290:	88 23       	and	r24, r24
    7292:	19 f0       	breq	.+6      	; 0x729a <mmc_disk_timerproc+0x1c>
    7294:	81 50       	subi	r24, 0x01	; 1
    7296:	80 93 b6 34 	sts	0x34B6, r24

	s = Stat;
    729a:	80 91 18 20 	lds	r24, 0x2018
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;

	if (MMC_CD)				/* Card inserted */
		s &= ~STA_NODISK;
    729e:	89 7f       	andi	r24, 0xF9	; 249
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
    72a0:	80 93 18 20 	sts	0x2018, r24
    72a4:	08 95       	ret

000072a6 <__vector_17>:
}

ISR(TCC0_CCB_vect) {
    72a6:	1f 92       	push	r1
    72a8:	0f 92       	push	r0
    72aa:	0f b6       	in	r0, 0x3f	; 63
    72ac:	0f 92       	push	r0
    72ae:	11 24       	eor	r1, r1
    72b0:	08 b6       	in	r0, 0x38	; 56
    72b2:	0f 92       	push	r0
    72b4:	18 be       	out	0x38, r1	; 56
    72b6:	09 b6       	in	r0, 0x39	; 57
    72b8:	0f 92       	push	r0
    72ba:	19 be       	out	0x39, r1	; 57
    72bc:	0b b6       	in	r0, 0x3b	; 59
    72be:	0f 92       	push	r0
    72c0:	1b be       	out	0x3b, r1	; 59
    72c2:	2f 93       	push	r18
    72c4:	3f 93       	push	r19
    72c6:	4f 93       	push	r20
    72c8:	5f 93       	push	r21
    72ca:	6f 93       	push	r22
    72cc:	7f 93       	push	r23
    72ce:	8f 93       	push	r24
    72d0:	9f 93       	push	r25
    72d2:	af 93       	push	r26
    72d4:	bf 93       	push	r27
    72d6:	ef 93       	push	r30
    72d8:	ff 93       	push	r31
	disk_timerproc();
    72da:	d0 df       	rcall	.-96     	; 0x727c <disk_timerproc>
    72dc:	ff 91       	pop	r31
    72de:	ef 91       	pop	r30
    72e0:	bf 91       	pop	r27
    72e2:	af 91       	pop	r26
    72e4:	9f 91       	pop	r25
    72e6:	8f 91       	pop	r24
    72e8:	7f 91       	pop	r23
    72ea:	6f 91       	pop	r22
    72ec:	5f 91       	pop	r21
    72ee:	4f 91       	pop	r20
    72f0:	3f 91       	pop	r19
    72f2:	2f 91       	pop	r18
    72f4:	0f 90       	pop	r0
    72f6:	0b be       	out	0x3b, r0	; 59
    72f8:	0f 90       	pop	r0
    72fa:	09 be       	out	0x39, r0	; 57
    72fc:	0f 90       	pop	r0
    72fe:	08 be       	out	0x38, r0	; 56
    7300:	0f 90       	pop	r0
    7302:	0f be       	out	0x3f, r0	; 63
    7304:	0f 90       	pop	r0
    7306:	1f 90       	pop	r1
    7308:	18 95       	reti

0000730a <__vector_14>:

#define SOUND_VOLUME 2
#define SOUND_OFFSET 2048

ISR(TCC0_OVF_vect)
{
    730a:	1f 92       	push	r1
    730c:	0f 92       	push	r0
    730e:	0f b6       	in	r0, 0x3f	; 63
    7310:	0f 92       	push	r0
    7312:	11 24       	eor	r1, r1
    7314:	08 b6       	in	r0, 0x38	; 56
    7316:	0f 92       	push	r0
    7318:	18 be       	out	0x38, r1	; 56
    731a:	09 b6       	in	r0, 0x39	; 57
    731c:	0f 92       	push	r0
    731e:	19 be       	out	0x39, r1	; 57
    7320:	0b b6       	in	r0, 0x3b	; 59
    7322:	0f 92       	push	r0
    7324:	1b be       	out	0x3b, r1	; 59
    7326:	2f 93       	push	r18
    7328:	3f 93       	push	r19
    732a:	4f 93       	push	r20
    732c:	5f 93       	push	r21
    732e:	6f 93       	push	r22
    7330:	8f 93       	push	r24
    7332:	9f 93       	push	r25
    7334:	af 93       	push	r26
    7336:	bf 93       	push	r27
    7338:	ef 93       	push	r30
    733a:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    733c:	e0 91 b8 34 	lds	r30, 0x34B8
    7340:	f0 91 b9 34 	lds	r31, 0x34B9
	UINT ri, ct;
	BYTE *buff, l, r;

	if (!fcb) return;
    7344:	30 97       	sbiw	r30, 0x00	; 0
    7346:	09 f4       	brne	.+2      	; 0x734a <__vector_14+0x40>
    7348:	42 c0       	rjmp	.+132    	; 0x73ce <__vector_14+0xc4>
	ct = fcb->ct; ri = fcb->ri;
    734a:	46 81       	ldd	r20, Z+6	; 0x06
    734c:	57 81       	ldd	r21, Z+7	; 0x07
    734e:	22 81       	ldd	r18, Z+2	; 0x02
    7350:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    7352:	a0 85       	ldd	r26, Z+8	; 0x08
    7354:	b1 85       	ldd	r27, Z+9	; 0x09
    7356:	a2 0f       	add	r26, r18
    7358:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    735a:	80 81       	ld	r24, Z
    735c:	91 81       	ldd	r25, Z+1	; 0x01
    735e:	81 30       	cpi	r24, 0x01	; 1
    7360:	91 05       	cpc	r25, r1
    7362:	81 f0       	breq	.+32     	; 0x7384 <__vector_14+0x7a>
    7364:	08 f4       	brcc	.+2      	; 0x7368 <__vector_14+0x5e>
    7366:	49 c0       	rjmp	.+146    	; 0x73fa <__vector_14+0xf0>
    7368:	02 97       	sbiw	r24, 0x02	; 2
    736a:	09 f0       	breq	.+2      	; 0x736e <__vector_14+0x64>
    736c:	4f c0       	rjmp	.+158    	; 0x740c <__vector_14+0x102>
		if (ct < 2) return;
		l = buff[0]; r = buff[1];
		ct -= 2; ri += 2;
		break;
	case 2:		/* Mono, 16bit */
		if (ct < 2) return;
    736e:	42 30       	cpi	r20, 0x02	; 2
    7370:	51 05       	cpc	r21, r1
    7372:	68 f1       	brcs	.+90     	; 0x73ce <__vector_14+0xc4>
		l = r = buff[1] + 128;
    7374:	11 96       	adiw	r26, 0x01	; 1
    7376:	6c 91       	ld	r22, X
    7378:	60 58       	subi	r22, 0x80	; 128
		ct -= 2; ri += 2;
    737a:	42 50       	subi	r20, 0x02	; 2
    737c:	51 09       	sbc	r21, r1
    737e:	2e 5f       	subi	r18, 0xFE	; 254
    7380:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    7382:	08 c0       	rjmp	.+16     	; 0x7394 <__vector_14+0x8a>
		if (ct < 1) return;
		l = r = buff[0];
		ct -= 1; ri += 1;
		break;
	case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
    7384:	42 30       	cpi	r20, 0x02	; 2
    7386:	51 05       	cpc	r21, r1
    7388:	10 f1       	brcs	.+68     	; 0x73ce <__vector_14+0xc4>
		l = buff[0]; r = buff[1];
    738a:	6c 91       	ld	r22, X
		ct -= 2; ri += 2;
    738c:	42 50       	subi	r20, 0x02	; 2
    738e:	51 09       	sbc	r21, r1
    7390:	2e 5f       	subi	r18, 0xFE	; 254
    7392:	3f 4f       	sbci	r19, 0xFF	; 255
	default:	/* Stereo, 16bit */
		if (ct < 4) return;
		l = buff[1]; r = buff[3];
		ct -= 4; ri += 4;
	}
	fcb->ct = ct;
    7394:	46 83       	std	Z+6, r20	; 0x06
    7396:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    7398:	82 85       	ldd	r24, Z+10	; 0x0a
    739a:	93 85       	ldd	r25, Z+11	; 0x0b
    739c:	01 97       	sbiw	r24, 0x01	; 1
    739e:	82 23       	and	r24, r18
    73a0:	93 23       	and	r25, r19
    73a2:	82 83       	std	Z+2, r24	; 0x02
    73a4:	93 83       	std	Z+3, r25	; 0x03
	
	dac_ch0_write(SOUND_OFFSET+(l*SOUND_VOLUME));
    73a6:	26 2f       	mov	r18, r22
    73a8:	30 e0       	ldi	r19, 0x00	; 0
    73aa:	c9 01       	movw	r24, r18
    73ac:	9c 5f       	subi	r25, 0xFC	; 252
    73ae:	88 0f       	add	r24, r24
    73b0:	99 1f       	adc	r25, r25
void dac_speaker_off(void);
void dac_setup(bool dual_channel);
void dac_disable(void);

static inline void dac_ch0_write(uint16_t data) {
	DACB.CH0DATA = data;
    73b2:	80 93 38 03 	sts	0x0338, r24
    73b6:	90 93 39 03 	sts	0x0339, r25
	dac_ch1_write(SOUND_OFFSET-(l*SOUND_VOLUME));
    73ba:	80 e0       	ldi	r24, 0x00	; 0
    73bc:	94 e0       	ldi	r25, 0x04	; 4
    73be:	82 1b       	sub	r24, r18
    73c0:	93 0b       	sbc	r25, r19
    73c2:	88 0f       	add	r24, r24
    73c4:	99 1f       	adc	r25, r25
}

static inline void dac_ch1_write(uint16_t data) {
	DACB.CH1DATA = data;
    73c6:	80 93 3a 03 	sts	0x033A, r24
    73ca:	90 93 3b 03 	sts	0x033B, r25
}
    73ce:	ff 91       	pop	r31
    73d0:	ef 91       	pop	r30
    73d2:	bf 91       	pop	r27
    73d4:	af 91       	pop	r26
    73d6:	9f 91       	pop	r25
    73d8:	8f 91       	pop	r24
    73da:	6f 91       	pop	r22
    73dc:	5f 91       	pop	r21
    73de:	4f 91       	pop	r20
    73e0:	3f 91       	pop	r19
    73e2:	2f 91       	pop	r18
    73e4:	0f 90       	pop	r0
    73e6:	0b be       	out	0x3b, r0	; 59
    73e8:	0f 90       	pop	r0
    73ea:	09 be       	out	0x39, r0	; 57
    73ec:	0f 90       	pop	r0
    73ee:	08 be       	out	0x38, r0	; 56
    73f0:	0f 90       	pop	r0
    73f2:	0f be       	out	0x3f, r0	; 63
    73f4:	0f 90       	pop	r0
    73f6:	1f 90       	pop	r1
    73f8:	18 95       	reti
	ct = fcb->ct; ri = fcb->ri;
	buff = fcb->buff + ri;

	switch (fcb->mode) {
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
    73fa:	41 15       	cp	r20, r1
    73fc:	51 05       	cpc	r21, r1
    73fe:	39 f3       	breq	.-50     	; 0x73ce <__vector_14+0xc4>
		l = r = buff[0];
    7400:	6c 91       	ld	r22, X
		ct -= 1; ri += 1;
    7402:	41 50       	subi	r20, 0x01	; 1
    7404:	51 09       	sbc	r21, r1
    7406:	2f 5f       	subi	r18, 0xFF	; 255
    7408:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    740a:	c4 cf       	rjmp	.-120    	; 0x7394 <__vector_14+0x8a>
		if (ct < 2) return;
		l = r = buff[1] + 128;
		ct -= 2; ri += 2;
		break;
	default:	/* Stereo, 16bit */
		if (ct < 4) return;
    740c:	44 30       	cpi	r20, 0x04	; 4
    740e:	51 05       	cpc	r21, r1
    7410:	f0 f2       	brcs	.-68     	; 0x73ce <__vector_14+0xc4>
		l = buff[1]; r = buff[3];
    7412:	11 96       	adiw	r26, 0x01	; 1
    7414:	6c 91       	ld	r22, X
		ct -= 4; ri += 4;
    7416:	44 50       	subi	r20, 0x04	; 4
    7418:	51 09       	sbc	r21, r1
    741a:	2c 5f       	subi	r18, 0xFC	; 252
    741c:	3f 4f       	sbci	r19, 0xFF	; 255
    741e:	ba cf       	rjmp	.-140    	; 0x7394 <__vector_14+0x8a>

00007420 <menu_esp8266_setup>:
	printf("Data successfully sent as client!\r\n");
}

/* Called when error returned trying to sent data */
void ESP8266_Callback_ClientConnectionDataSentError(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
	printf("Error while sending data on connection %d!\r\n", Connection->Number);
    7420:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <ESP8266_On>
    7424:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <ESP8266_TimerStart>
    7428:	40 e0       	ldi	r20, 0x00	; 0
    742a:	52 ec       	ldi	r21, 0xC2	; 194
    742c:	61 e0       	ldi	r22, 0x01	; 1
    742e:	70 e0       	ldi	r23, 0x00	; 0
    7430:	84 e5       	ldi	r24, 0x54	; 84
    7432:	96 e3       	ldi	r25, 0x36	; 54
    7434:	69 da       	rcall	.-2862   	; 0x6908 <ESP8266_Init>
    7436:	88 23       	and	r24, r24
    7438:	11 f0       	breq	.+4      	; 0x743e <menu_esp8266_setup+0x1e>
    743a:	80 e0       	ldi	r24, 0x00	; 0
    743c:	08 95       	ret
    743e:	0e 94 13 23 	call	0x4626	; 0x4626 <ESP8266_TimerStop>
    7442:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <ESP8266_Off>
    7446:	81 e0       	ldi	r24, 0x01	; 1
    7448:	08 95       	ret

0000744a <menu_set_env_variables>:
    744a:	ef 92       	push	r14
    744c:	ff 92       	push	r15
    744e:	0f 93       	push	r16
    7450:	1f 93       	push	r17
    7452:	cf 93       	push	r28
    7454:	df 93       	push	r29
    7456:	49 e1       	ldi	r20, 0x19	; 25
    7458:	50 e0       	ldi	r21, 0x00	; 0
    745a:	63 e4       	ldi	r22, 0x43	; 67
    745c:	77 e2       	ldi	r23, 0x27	; 39
    745e:	8b ec       	ldi	r24, 0xCB	; 203
    7460:	94 e3       	ldi	r25, 0x34	; 52
    7462:	0e 94 aa 44 	call	0x8954	; 0x8954 <strncpy>
    7466:	81 e0       	ldi	r24, 0x01	; 1
    7468:	80 93 bb 34 	sts	0x34BB, r24
    746c:	10 92 bc 34 	sts	0x34BC, r1
    7470:	82 e0       	ldi	r24, 0x02	; 2
    7472:	80 93 be 34 	sts	0x34BE, r24
    7476:	10 92 c7 34 	sts	0x34C7, r1
    747a:	10 92 c8 34 	sts	0x34C8, r1
    747e:	10 92 c9 34 	sts	0x34C9, r1
    7482:	10 92 ca 34 	sts	0x34CA, r1
    7486:	9a e0       	ldi	r25, 0x0A	; 10
    7488:	e8 e4       	ldi	r30, 0x48	; 72
    748a:	f7 e2       	ldi	r31, 0x27	; 39
    748c:	a8 e2       	ldi	r26, 0x28	; 40
    748e:	b5 e3       	ldi	r27, 0x35	; 53
    7490:	01 90       	ld	r0, Z+
    7492:	0d 92       	st	X+, r0
    7494:	9a 95       	dec	r25
    7496:	e1 f7       	brne	.-8      	; 0x7490 <menu_set_env_variables+0x46>
    7498:	99 e0       	ldi	r25, 0x09	; 9
    749a:	e3 e5       	ldi	r30, 0x53	; 83
    749c:	f7 e2       	ldi	r31, 0x27	; 39
    749e:	a1 e4       	ldi	r26, 0x41	; 65
    74a0:	b5 e3       	ldi	r27, 0x35	; 53
    74a2:	01 90       	ld	r0, Z+
    74a4:	0d 92       	st	X+, r0
    74a6:	9a 95       	dec	r25
    74a8:	e1 f7       	brne	.-8      	; 0x74a2 <menu_set_env_variables+0x58>
    74aa:	90 e3       	ldi	r25, 0x30	; 48
    74ac:	90 93 e4 34 	sts	0x34E4, r25
    74b0:	90 93 0f 35 	sts	0x350F, r25
    74b4:	10 92 5d 35 	sts	0x355D, r1
    74b8:	10 92 5e 35 	sts	0x355E, r1
    74bc:	10 92 5f 35 	sts	0x355F, r1
    74c0:	c0 e6       	ldi	r28, 0x60	; 96
    74c2:	d5 e3       	ldi	r29, 0x35	; 53
    74c4:	93 e0       	ldi	r25, 0x03	; 3
    74c6:	98 83       	st	Y, r25
    74c8:	03 e6       	ldi	r16, 0x63	; 99
    74ca:	15 e3       	ldi	r17, 0x35	; 53
    74cc:	f8 01       	movw	r30, r16
    74ce:	80 83       	st	Z, r24
    74d0:	64 e6       	ldi	r22, 0x64	; 100
    74d2:	e6 2e       	mov	r14, r22
    74d4:	65 e3       	ldi	r22, 0x35	; 53
    74d6:	f6 2e       	mov	r15, r22
    74d8:	80 ee       	ldi	r24, 0xE0	; 224
    74da:	97 e0       	ldi	r25, 0x07	; 7
    74dc:	f7 01       	movw	r30, r14
    74de:	80 83       	st	Z, r24
    74e0:	91 83       	std	Z+1, r25	; 0x01
    74e2:	40 ee       	ldi	r20, 0xE0	; 224
    74e4:	57 e0       	ldi	r21, 0x07	; 7
    74e6:	62 e0       	ldi	r22, 0x02	; 2
    74e8:	83 e0       	ldi	r24, 0x03	; 3
    74ea:	9c d2       	rcall	.+1336   	; 0x7a24 <time_get_weekday>
    74ec:	80 93 61 35 	sts	0x3561, r24
    74f0:	f7 01       	movw	r30, r14
    74f2:	40 81       	ld	r20, Z
    74f4:	51 81       	ldd	r21, Z+1	; 0x01
    74f6:	f8 01       	movw	r30, r16
    74f8:	60 81       	ld	r22, Z
    74fa:	88 81       	ld	r24, Y
    74fc:	e7 d2       	rcall	.+1486   	; 0x7acc <time_get_weeknumber>
    74fe:	80 93 62 35 	sts	0x3562, r24
    7502:	10 92 5b 35 	sts	0x355B, r1
    7506:	10 92 5a 35 	sts	0x355A, r1
    750a:	4b ea       	ldi	r20, 0xAB	; 171
    750c:	50 e0       	ldi	r21, 0x00	; 0
    750e:	60 e0       	ldi	r22, 0x00	; 0
    7510:	70 e0       	ldi	r23, 0x00	; 0
    7512:	8b eb       	ldi	r24, 0xBB	; 187
    7514:	94 e3       	ldi	r25, 0x34	; 52
    7516:	df 91       	pop	r29
    7518:	cf 91       	pop	r28
    751a:	1f 91       	pop	r17
    751c:	0f 91       	pop	r16
    751e:	ff 90       	pop	r15
    7520:	ef 90       	pop	r14
    7522:	0c 94 de 45 	jmp	0x8bbc	; 0x8bbc <__eewr_block_x128a4u>

00007526 <__vector_16>:
    7526:	1f 92       	push	r1
    7528:	0f 92       	push	r0
    752a:	0f b6       	in	r0, 0x3f	; 63
    752c:	0f 92       	push	r0
    752e:	11 24       	eor	r1, r1
    7530:	08 b6       	in	r0, 0x38	; 56
    7532:	0f 92       	push	r0
    7534:	18 be       	out	0x38, r1	; 56
    7536:	09 b6       	in	r0, 0x39	; 57
    7538:	0f 92       	push	r0
    753a:	19 be       	out	0x39, r1	; 57
    753c:	0b b6       	in	r0, 0x3b	; 59
    753e:	0f 92       	push	r0
    7540:	1b be       	out	0x3b, r1	; 59
    7542:	2f 93       	push	r18
    7544:	3f 93       	push	r19
    7546:	4f 93       	push	r20
    7548:	5f 93       	push	r21
    754a:	6f 93       	push	r22
    754c:	7f 93       	push	r23
    754e:	8f 93       	push	r24
    7550:	9f 93       	push	r25
    7552:	af 93       	push	r26
    7554:	bf 93       	push	r27
    7556:	ef 93       	push	r30
    7558:	ff 93       	push	r31
    755a:	0e 94 9a 14 	call	0x2934	; 0x2934 <display_show_loading_square>
    755e:	ff 91       	pop	r31
    7560:	ef 91       	pop	r30
    7562:	bf 91       	pop	r27
    7564:	af 91       	pop	r26
    7566:	9f 91       	pop	r25
    7568:	8f 91       	pop	r24
    756a:	7f 91       	pop	r23
    756c:	6f 91       	pop	r22
    756e:	5f 91       	pop	r21
    7570:	4f 91       	pop	r20
    7572:	3f 91       	pop	r19
    7574:	2f 91       	pop	r18
    7576:	0f 90       	pop	r0
    7578:	0b be       	out	0x3b, r0	; 59
    757a:	0f 90       	pop	r0
    757c:	09 be       	out	0x39, r0	; 57
    757e:	0f 90       	pop	r0
    7580:	08 be       	out	0x38, r0	; 56
    7582:	0f 90       	pop	r0
    7584:	0f be       	out	0x3f, r0	; 63
    7586:	0f 90       	pop	r0
    7588:	1f 90       	pop	r1
    758a:	18 95       	reti

0000758c <__vector_19>:
    758c:	1f 92       	push	r1
    758e:	0f 92       	push	r0
    7590:	0f b6       	in	r0, 0x3f	; 63
    7592:	0f 92       	push	r0
    7594:	11 24       	eor	r1, r1
    7596:	08 b6       	in	r0, 0x38	; 56
    7598:	0f 92       	push	r0
    759a:	18 be       	out	0x38, r1	; 56
    759c:	09 b6       	in	r0, 0x39	; 57
    759e:	0f 92       	push	r0
    75a0:	19 be       	out	0x39, r1	; 57
    75a2:	0b b6       	in	r0, 0x3b	; 59
    75a4:	0f 92       	push	r0
    75a6:	1b be       	out	0x3b, r1	; 59
    75a8:	2f 93       	push	r18
    75aa:	3f 93       	push	r19
    75ac:	4f 93       	push	r20
    75ae:	5f 93       	push	r21
    75b0:	6f 93       	push	r22
    75b2:	7f 93       	push	r23
    75b4:	8f 93       	push	r24
    75b6:	9f 93       	push	r25
    75b8:	af 93       	push	r26
    75ba:	bf 93       	push	r27
    75bc:	ef 93       	push	r30
    75be:	ff 93       	push	r31
    75c0:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <display_draw_wifi_icon>
    75c4:	ff 91       	pop	r31
    75c6:	ef 91       	pop	r30
    75c8:	bf 91       	pop	r27
    75ca:	af 91       	pop	r26
    75cc:	9f 91       	pop	r25
    75ce:	8f 91       	pop	r24
    75d0:	7f 91       	pop	r23
    75d2:	6f 91       	pop	r22
    75d4:	5f 91       	pop	r21
    75d6:	4f 91       	pop	r20
    75d8:	3f 91       	pop	r19
    75da:	2f 91       	pop	r18
    75dc:	0f 90       	pop	r0
    75de:	0b be       	out	0x3b, r0	; 59
    75e0:	0f 90       	pop	r0
    75e2:	09 be       	out	0x39, r0	; 57
    75e4:	0f 90       	pop	r0
    75e6:	08 be       	out	0x38, r0	; 56
    75e8:	0f 90       	pop	r0
    75ea:	0f be       	out	0x3f, r0	; 63
    75ec:	0f 90       	pop	r0
    75ee:	1f 90       	pop	r1
    75f0:	18 95       	reti

000075f2 <ESP8266_Callback_SmartConfig>:
    75f2:	88 e2       	ldi	r24, 0x28	; 40
    75f4:	95 e3       	ldi	r25, 0x35	; 53
    75f6:	9f 93       	push	r25
    75f8:	8f 93       	push	r24
    75fa:	81 e4       	ldi	r24, 0x41	; 65
    75fc:	95 e3       	ldi	r25, 0x35	; 53
    75fe:	9f 93       	push	r25
    7600:	8f 93       	push	r24
    7602:	8e e9       	ldi	r24, 0x9E	; 158
    7604:	98 e2       	ldi	r25, 0x28	; 40
    7606:	9f 93       	push	r25
    7608:	8f 93       	push	r24
    760a:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    760e:	0f 90       	pop	r0
    7610:	0f 90       	pop	r0
    7612:	0f 90       	pop	r0
    7614:	0f 90       	pop	r0
    7616:	0f 90       	pop	r0
    7618:	0f 90       	pop	r0
    761a:	08 95       	ret

0000761c <ESP8266_Callback_DeviceReady>:
    761c:	84 eb       	ldi	r24, 0xB4	; 180
    761e:	98 e2       	ldi	r25, 0x28	; 40
    7620:	0c 94 48 45 	jmp	0x8a90	; 0x8a90 <puts>

00007624 <ESP8266_Callback_WatchdogReset>:
    7624:	85 ec       	ldi	r24, 0xC5	; 197
    7626:	98 e2       	ldi	r25, 0x28	; 40
    7628:	0c 94 48 45 	jmp	0x8a90	; 0x8a90 <puts>

0000762c <ESP8266_Callback_WifiDisconnected>:
    762c:	8f ed       	ldi	r24, 0xDF	; 223
    762e:	98 e2       	ldi	r25, 0x28	; 40
    7630:	0c 94 48 45 	jmp	0x8a90	; 0x8a90 <puts>

00007634 <ESP8266_Callback_WifiConnected>:
    7634:	86 ef       	ldi	r24, 0xF6	; 246
    7636:	98 e2       	ldi	r25, 0x28	; 40
    7638:	0c 94 48 45 	jmp	0x8a90	; 0x8a90 <puts>

0000763c <ESP8266_Callback_WifiConnectFailed>:
    763c:	8f 5d       	subi	r24, 0xDF	; 223
    763e:	9e 4f       	sbci	r25, 0xFE	; 254
    7640:	fc 01       	movw	r30, r24
    7642:	80 81       	ld	r24, Z
    7644:	1f 92       	push	r1
    7646:	8f 93       	push	r24
    7648:	8a e0       	ldi	r24, 0x0A	; 10
    764a:	99 e2       	ldi	r25, 0x29	; 41
    764c:	9f 93       	push	r25
    764e:	8f 93       	push	r24
    7650:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    7654:	0f 90       	pop	r0
    7656:	0f 90       	pop	r0
    7658:	0f 90       	pop	r0
    765a:	0f 90       	pop	r0
    765c:	08 95       	ret

0000765e <ESP8266_Callback_WifiGotIP>:
    765e:	cf 93       	push	r28
    7660:	df 93       	push	r29
    7662:	ec 01       	movw	r28, r24
    7664:	8d e3       	ldi	r24, 0x3D	; 61
    7666:	99 e2       	ldi	r25, 0x29	; 41
    7668:	0e 94 48 45 	call	0x8a90	; 0x8a90 <puts>
    766c:	ce 01       	movw	r24, r28
    766e:	12 d9       	rcall	.-3548   	; 0x6894 <ESP8266_GetSTAIP>
    7670:	1f 92       	push	r1
    7672:	8f 93       	push	r24
    7674:	85 e5       	ldi	r24, 0x55	; 85
    7676:	99 e2       	ldi	r25, 0x29	; 41
    7678:	9f 93       	push	r25
    767a:	8f 93       	push	r24
    767c:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    7680:	0f 90       	pop	r0
    7682:	0f 90       	pop	r0
    7684:	0f 90       	pop	r0
    7686:	0f 90       	pop	r0
    7688:	df 91       	pop	r29
    768a:	cf 91       	pop	r28
    768c:	08 95       	ret

0000768e <ESP8266_Callback_WifiIPSet>:
    768e:	fc 01       	movw	r30, r24
    7690:	ea 52       	subi	r30, 0x2A	; 42
    7692:	ff 4f       	sbci	r31, 0xFF	; 255
    7694:	20 81       	ld	r18, Z
    7696:	1f 92       	push	r1
    7698:	2f 93       	push	r18
    769a:	31 97       	sbiw	r30, 0x01	; 1
    769c:	20 81       	ld	r18, Z
    769e:	1f 92       	push	r1
    76a0:	2f 93       	push	r18
    76a2:	31 97       	sbiw	r30, 0x01	; 1
    76a4:	20 81       	ld	r18, Z
    76a6:	1f 92       	push	r1
    76a8:	2f 93       	push	r18
    76aa:	31 97       	sbiw	r30, 0x01	; 1
    76ac:	80 81       	ld	r24, Z
    76ae:	1f 92       	push	r1
    76b0:	8f 93       	push	r24
    76b2:	8e e6       	ldi	r24, 0x6E	; 110
    76b4:	99 e2       	ldi	r25, 0x29	; 41
    76b6:	9f 93       	push	r25
    76b8:	8f 93       	push	r24
    76ba:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    76be:	8d b7       	in	r24, 0x3d	; 61
    76c0:	9e b7       	in	r25, 0x3e	; 62
    76c2:	0a 96       	adiw	r24, 0x0a	; 10
    76c4:	8d bf       	out	0x3d, r24	; 61
    76c6:	9e bf       	out	0x3e, r25	; 62
    76c8:	08 95       	ret

000076ca <ESP8266_Callback_DHCPTimeout>:
    76ca:	86 e9       	ldi	r24, 0x96	; 150
    76cc:	99 e2       	ldi	r25, 0x29	; 41
    76ce:	0c 94 48 45 	jmp	0x8a90	; 0x8a90 <puts>

000076d2 <ESP8266_Callback_WifiDetected>:
    76d2:	df 92       	push	r13
    76d4:	ef 92       	push	r14
    76d6:	ff 92       	push	r15
    76d8:	0f 93       	push	r16
    76da:	1f 93       	push	r17
    76dc:	cf 93       	push	r28
    76de:	df 93       	push	r29
    76e0:	7b 01       	movw	r14, r22
    76e2:	8b 01       	movw	r16, r22
    76e4:	00 5c       	subi	r16, 0xC0	; 192
    76e6:	1e 4f       	sbci	r17, 0xFE	; 254
    76e8:	f8 01       	movw	r30, r16
    76ea:	80 81       	ld	r24, Z
    76ec:	1f 92       	push	r1
    76ee:	8f 93       	push	r24
    76f0:	85 ea       	ldi	r24, 0xA5	; 165
    76f2:	99 e2       	ldi	r25, 0x29	; 41
    76f4:	9f 93       	push	r25
    76f6:	8f 93       	push	r24
    76f8:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    76fc:	0f 90       	pop	r0
    76fe:	0f 90       	pop	r0
    7700:	0f 90       	pop	r0
    7702:	0f 90       	pop	r0
    7704:	f8 01       	movw	r30, r16
    7706:	80 81       	ld	r24, Z
    7708:	88 23       	and	r24, r24
    770a:	e9 f0       	breq	.+58     	; 0x7746 <ESP8266_Callback_WifiDetected+0x74>
    770c:	d1 2c       	mov	r13, r1
    770e:	c7 ec       	ldi	r28, 0xC7	; 199
    7710:	d9 e2       	ldi	r29, 0x29	; 41
    7712:	c7 01       	movw	r24, r14
    7714:	f0 e2       	ldi	r31, 0x20	; 32
    7716:	df 9e       	mul	r13, r31
    7718:	80 0d       	add	r24, r0
    771a:	91 1d       	adc	r25, r1
    771c:	11 24       	eor	r1, r1
    771e:	01 96       	adiw	r24, 0x01	; 1
    7720:	9f 93       	push	r25
    7722:	8f 93       	push	r24
    7724:	1f 92       	push	r1
    7726:	df 92       	push	r13
    7728:	df 93       	push	r29
    772a:	cf 93       	push	r28
    772c:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    7730:	d3 94       	inc	r13
    7732:	0f 90       	pop	r0
    7734:	0f 90       	pop	r0
    7736:	0f 90       	pop	r0
    7738:	0f 90       	pop	r0
    773a:	0f 90       	pop	r0
    773c:	0f 90       	pop	r0
    773e:	f8 01       	movw	r30, r16
    7740:	80 81       	ld	r24, Z
    7742:	d8 16       	cp	r13, r24
    7744:	30 f3       	brcs	.-52     	; 0x7712 <ESP8266_Callback_WifiDetected+0x40>
    7746:	df 91       	pop	r29
    7748:	cf 91       	pop	r28
    774a:	1f 91       	pop	r17
    774c:	0f 91       	pop	r16
    774e:	ff 90       	pop	r15
    7750:	ef 90       	pop	r14
    7752:	df 90       	pop	r13
    7754:	08 95       	ret

00007756 <ESP8266_Callback_ClientConnectionConnected>:
    7756:	0f 93       	push	r16
    7758:	1f 93       	push	r17
    775a:	cf 93       	push	r28
    775c:	df 93       	push	r29
    775e:	8c 01       	movw	r16, r24
    7760:	eb 01       	movw	r28, r22
    7762:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7764:	8f 93       	push	r24
    7766:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7768:	8f 93       	push	r24
    776a:	21 ed       	ldi	r18, 0xD1	; 209
    776c:	39 e2       	ldi	r19, 0x29	; 41
    776e:	3f 93       	push	r19
    7770:	2f 93       	push	r18
    7772:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    7776:	0f 90       	pop	r0
    7778:	0f 90       	pop	r0
    777a:	0f 90       	pop	r0
    777c:	0f 90       	pop	r0
    777e:	be 01       	movw	r22, r28
    7780:	c8 01       	movw	r24, r16
    7782:	df 91       	pop	r29
    7784:	cf 91       	pop	r28
    7786:	1f 91       	pop	r17
    7788:	0f 91       	pop	r16
    778a:	1c c8       	rjmp	.-4040   	; 0x67c4 <ESP8266_RequestSendData>

0000778c <ESP8266_Callback_ClientConnectionError>:
    778c:	fb 01       	movw	r30, r22
    778e:	81 81       	ldd	r24, Z+1	; 0x01
    7790:	1f 92       	push	r1
    7792:	8f 93       	push	r24
    7794:	85 e0       	ldi	r24, 0x05	; 5
    7796:	9a e2       	ldi	r25, 0x2A	; 42
    7798:	9f 93       	push	r25
    779a:	8f 93       	push	r24
    779c:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    77a0:	0f 90       	pop	r0
    77a2:	0f 90       	pop	r0
    77a4:	0f 90       	pop	r0
    77a6:	0f 90       	pop	r0
    77a8:	08 95       	ret

000077aa <ESP8266_Callback_ClientConnectionSendData>:
    77aa:	80 91 ba 34 	lds	r24, 0x34BA
    77ae:	81 11       	cpse	r24, r1
    77b0:	32 c0       	rjmp	.+100    	; 0x7816 <ESP8266_Callback_ClientConnectionSendData+0x6c>
    77b2:	fb 01       	movw	r30, r22
    77b4:	a4 89       	ldd	r26, Z+20	; 0x14
    77b6:	b5 89       	ldd	r27, Z+21	; 0x15
    77b8:	8d e1       	ldi	r24, 0x1D	; 29
    77ba:	e4 e6       	ldi	r30, 0x64	; 100
    77bc:	fa e2       	ldi	r31, 0x2A	; 42
    77be:	01 90       	ld	r0, Z+
    77c0:	0d 92       	st	X+, r0
    77c2:	8a 95       	dec	r24
    77c4:	e1 f7       	brne	.-8      	; 0x77be <ESP8266_Callback_ClientConnectionSendData+0x14>
    77c6:	fa 01       	movw	r30, r20
    77c8:	01 90       	ld	r0, Z+
    77ca:	00 20       	and	r0, r0
    77cc:	e9 f7       	brne	.-6      	; 0x77c8 <ESP8266_Callback_ClientConnectionSendData+0x1e>
    77ce:	cf 01       	movw	r24, r30
    77d0:	01 97       	sbiw	r24, 0x01	; 1
    77d2:	84 1b       	sub	r24, r20
    77d4:	95 0b       	sbc	r25, r21
    77d6:	da 01       	movw	r26, r20
    77d8:	a8 0f       	add	r26, r24
    77da:	b9 1f       	adc	r27, r25
    77dc:	2a e1       	ldi	r18, 0x1A	; 26
    77de:	e1 e8       	ldi	r30, 0x81	; 129
    77e0:	fa e2       	ldi	r31, 0x2A	; 42
    77e2:	01 90       	ld	r0, Z+
    77e4:	0d 92       	st	X+, r0
    77e6:	2a 95       	dec	r18
    77e8:	e1 f7       	brne	.-8      	; 0x77e2 <ESP8266_Callback_ClientConnectionSendData+0x38>
    77ea:	dc 01       	movw	r26, r24
    77ec:	5a 96       	adiw	r26, 0x1a	; 26
    77ee:	a4 0f       	add	r26, r20
    77f0:	b5 1f       	adc	r27, r21
    77f2:	24 e1       	ldi	r18, 0x14	; 20
    77f4:	ec e9       	ldi	r30, 0x9C	; 156
    77f6:	fa e2       	ldi	r31, 0x2A	; 42
    77f8:	01 90       	ld	r0, Z+
    77fa:	0d 92       	st	X+, r0
    77fc:	2a 95       	dec	r18
    77fe:	e1 f7       	brne	.-8      	; 0x77f8 <ESP8266_Callback_ClientConnectionSendData+0x4e>
    7800:	fa 01       	movw	r30, r20
    7802:	e8 0f       	add	r30, r24
    7804:	f9 1f       	adc	r31, r25
    7806:	2d e0       	ldi	r18, 0x0D	; 13
    7808:	3a e0       	ldi	r19, 0x0A	; 10
    780a:	40 e0       	ldi	r20, 0x00	; 0
    780c:	25 a7       	std	Z+45, r18	; 0x2d
    780e:	36 a7       	std	Z+46, r19	; 0x2e
    7810:	47 a7       	std	Z+47, r20	; 0x2f
    7812:	8f 96       	adiw	r24, 0x2f	; 47
    7814:	08 95       	ret
    7816:	82 e2       	ldi	r24, 0x22	; 34
    7818:	e2 e4       	ldi	r30, 0x42	; 66
    781a:	fa e2       	ldi	r31, 0x2A	; 42
    781c:	da 01       	movw	r26, r20
    781e:	01 90       	ld	r0, Z+
    7820:	0d 92       	st	X+, r0
    7822:	8a 95       	dec	r24
    7824:	e1 f7       	brne	.-8      	; 0x781e <ESP8266_Callback_ClientConnectionSendData+0x74>
    7826:	cf cf       	rjmp	.-98     	; 0x77c6 <ESP8266_Callback_ClientConnectionSendData+0x1c>

00007828 <ESP8266_Callback_ClientConnectionDataSent>:
    7828:	80 eb       	ldi	r24, 0xB0	; 176
    782a:	9a e2       	ldi	r25, 0x2A	; 42
    782c:	0c 94 48 45 	jmp	0x8a90	; 0x8a90 <puts>

00007830 <ESP8266_Callback_ClientConnectionDataReceived>:
}

void ESP8266_Callback_ClientConnectionDataReceived(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection, char* Buffer) {
    7830:	cf 93       	push	r28
    7832:	df 93       	push	r29
    7834:	eb 01       	movw	r28, r22
	/* Data received from server back to client */
	printf("Data received from server on connection: %s; Number of bytes received: %lu; %lu / %lu;\r\n",
    7836:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7838:	8f 93       	push	r24
    783a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    783c:	8f 93       	push	r24
    783e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7840:	8f 93       	push	r24
    7842:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7844:	8f 93       	push	r24
    7846:	89 89       	ldd	r24, Y+17	; 0x11
    7848:	8f 93       	push	r24
    784a:	88 89       	ldd	r24, Y+16	; 0x10
    784c:	8f 93       	push	r24
    784e:	8f 85       	ldd	r24, Y+15	; 0x0f
    7850:	8f 93       	push	r24
    7852:	8e 85       	ldd	r24, Y+14	; 0x0e
    7854:	8f 93       	push	r24
    7856:	8d 85       	ldd	r24, Y+13	; 0x0d
    7858:	8f 93       	push	r24
    785a:	8c 85       	ldd	r24, Y+12	; 0x0c
    785c:	8f 93       	push	r24
    785e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7860:	8f 93       	push	r24
    7862:	8a 85       	ldd	r24, Y+10	; 0x0a
    7864:	8f 93       	push	r24
    7866:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7868:	8f 93       	push	r24
    786a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    786c:	8f 93       	push	r24
    786e:	80 e0       	ldi	r24, 0x00	; 0
    7870:	9b e2       	ldi	r25, 0x2B	; 43
    7872:	9f 93       	push	r25
    7874:	8f 93       	push	r24
    7876:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
	Connection->TotalBytesReceived,
	Connection->ContentLength
	);
	
	/* Print message when first packet */
	if (Connection->FirstPacket) {
    787a:	8d b7       	in	r24, 0x3d	; 61
    787c:	9e b7       	in	r25, 0x3e	; 62
    787e:	40 96       	adiw	r24, 0x10	; 16
    7880:	8d bf       	out	0x3d, r24	; 61
    7882:	9e bf       	out	0x3e, r25	; 62
    7884:	8b a1       	ldd	r24, Y+35	; 0x23
    7886:	88 23       	and	r24, r24
    7888:	e9 f0       	breq	.+58     	; 0x78c4 <ESP8266_Callback_ClientConnectionDataReceived+0x94>
		
		/* Print first message */
		printf("This is first packet received. Content length on this connection is: %lu\r\n", Connection->ContentLength);
    788a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    788c:	8f 93       	push	r24
    788e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7890:	8f 93       	push	r24
    7892:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7894:	8f 93       	push	r24
    7896:	8a 8d       	ldd	r24, Y+26	; 0x1a
    7898:	8f 93       	push	r24
    789a:	89 e5       	ldi	r24, 0x59	; 89
    789c:	9b e2       	ldi	r25, 0x2B	; 43
    789e:	9f 93       	push	r25
    78a0:	8f 93       	push	r24
    78a2:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
		printf("%s\r\n",Connection->Data);
    78a6:	8d 89       	ldd	r24, Y+21	; 0x15
    78a8:	8f 93       	push	r24
    78aa:	8c 89       	ldd	r24, Y+20	; 0x14
    78ac:	8f 93       	push	r24
    78ae:	8c ec       	ldi	r24, 0xCC	; 204
    78b0:	99 e2       	ldi	r25, 0x29	; 41
    78b2:	9f 93       	push	r25
    78b4:	8f 93       	push	r24
    78b6:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    78ba:	8d b7       	in	r24, 0x3d	; 61
    78bc:	9e b7       	in	r25, 0x3e	; 62
    78be:	0a 96       	adiw	r24, 0x0a	; 10
    78c0:	8d bf       	out	0x3d, r24	; 61
    78c2:	9e bf       	out	0x3e, r25	; 62
	}
}
    78c4:	df 91       	pop	r29
    78c6:	cf 91       	pop	r28
    78c8:	08 95       	ret

000078ca <ESP8266_Callback_ClientConnectionClosed>:

/* Called when connection is closed */
void ESP8266_Callback_ClientConnectionClosed(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
    78ca:	fb 01       	movw	r30, r22
	printf("Client connection closed, connection: %d; Total bytes received: %lu; Content-Length header: %lu\r\n",
    78cc:	85 8d       	ldd	r24, Z+29	; 0x1d
    78ce:	8f 93       	push	r24
    78d0:	84 8d       	ldd	r24, Z+28	; 0x1c
    78d2:	8f 93       	push	r24
    78d4:	83 8d       	ldd	r24, Z+27	; 0x1b
    78d6:	8f 93       	push	r24
    78d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    78da:	8f 93       	push	r24
    78dc:	81 89       	ldd	r24, Z+17	; 0x11
    78de:	8f 93       	push	r24
    78e0:	80 89       	ldd	r24, Z+16	; 0x10
    78e2:	8f 93       	push	r24
    78e4:	87 85       	ldd	r24, Z+15	; 0x0f
    78e6:	8f 93       	push	r24
    78e8:	86 85       	ldd	r24, Z+14	; 0x0e
    78ea:	8f 93       	push	r24
    78ec:	81 81       	ldd	r24, Z+1	; 0x01
    78ee:	1f 92       	push	r1
    78f0:	8f 93       	push	r24
    78f2:	84 ea       	ldi	r24, 0xA4	; 164
    78f4:	9b e2       	ldi	r25, 0x2B	; 43
    78f6:	9f 93       	push	r25
    78f8:	8f 93       	push	r24
    78fa:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
	Connection->Number, Connection->TotalBytesReceived, Connection->ContentLength
	);
	connection_open = false;
    78fe:	10 92 53 36 	sts	0x3653, r1
    7902:	8d b7       	in	r24, 0x3d	; 61
    7904:	9e b7       	in	r25, 0x3e	; 62
    7906:	0c 96       	adiw	r24, 0x0c	; 12
    7908:	8d bf       	out	0x3d, r24	; 61
    790a:	9e bf       	out	0x3e, r25	; 62
    790c:	08 95       	ret

0000790e <ESP8266_Callback_ClientConnectionTimeout>:
}

/* Called when timeout is reached on connection to server */
void ESP8266_Callback_ClientConnectionTimeout(ESP8266_t* ESP8266, ESP8266_Connection_t* Connection) {
	printf("Timeout reached on connection: %d\r\n", Connection->Number);
    790e:	fb 01       	movw	r30, r22
    7910:	81 81       	ldd	r24, Z+1	; 0x01
    7912:	1f 92       	push	r1
    7914:	8f 93       	push	r24
    7916:	86 e0       	ldi	r24, 0x06	; 6
    7918:	9c e2       	ldi	r25, 0x2C	; 44
    791a:	9f 93       	push	r25
    791c:	8f 93       	push	r24
    791e:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <printf>
    7922:	0f 90       	pop	r0
    7924:	0f 90       	pop	r0
    7926:	0f 90       	pop	r0
    7928:	0f 90       	pop	r0
    792a:	08 95       	ret

0000792c <__vector_82>:
}

ISR(TCD0_CCD_vect)
{
    792c:	1f 92       	push	r1
    792e:	0f 92       	push	r0
    7930:	0f b6       	in	r0, 0x3f	; 63
    7932:	0f 92       	push	r0
    7934:	11 24       	eor	r1, r1
    7936:	08 b6       	in	r0, 0x38	; 56
    7938:	0f 92       	push	r0
    793a:	18 be       	out	0x38, r1	; 56
    793c:	09 b6       	in	r0, 0x39	; 57
    793e:	0f 92       	push	r0
    7940:	19 be       	out	0x39, r1	; 57
    7942:	0b b6       	in	r0, 0x3b	; 59
    7944:	0f 92       	push	r0
    7946:	1b be       	out	0x3b, r1	; 59
    7948:	2f 93       	push	r18
    794a:	3f 93       	push	r19
    794c:	4f 93       	push	r20
    794e:	5f 93       	push	r21
    7950:	6f 93       	push	r22
    7952:	7f 93       	push	r23
    7954:	8f 93       	push	r24
    7956:	9f 93       	push	r25
    7958:	af 93       	push	r26
    795a:	bf 93       	push	r27
    795c:	ef 93       	push	r30
    795e:	ff 93       	push	r31
	ESP8266_TimeUpdate(&ESP8266, 1);
    7960:	41 e0       	ldi	r20, 0x01	; 1
    7962:	50 e0       	ldi	r21, 0x00	; 0
    7964:	60 e0       	ldi	r22, 0x00	; 0
    7966:	70 e0       	ldi	r23, 0x00	; 0
    7968:	84 e5       	ldi	r24, 0x54	; 84
    796a:	96 e3       	ldi	r25, 0x36	; 54
    796c:	0e 94 22 23 	call	0x4644	; 0x4644 <ESP8266_TimeUpdate>
    7970:	ff 91       	pop	r31
    7972:	ef 91       	pop	r30
    7974:	bf 91       	pop	r27
    7976:	af 91       	pop	r26
    7978:	9f 91       	pop	r25
    797a:	8f 91       	pop	r24
    797c:	7f 91       	pop	r23
    797e:	6f 91       	pop	r22
    7980:	5f 91       	pop	r21
    7982:	4f 91       	pop	r20
    7984:	3f 91       	pop	r19
    7986:	2f 91       	pop	r18
    7988:	0f 90       	pop	r0
    798a:	0b be       	out	0x3b, r0	; 59
    798c:	0f 90       	pop	r0
    798e:	09 be       	out	0x39, r0	; 57
    7990:	0f 90       	pop	r0
    7992:	08 be       	out	0x38, r0	; 56
    7994:	0f 90       	pop	r0
    7996:	0f be       	out	0x3f, r0	; 63
    7998:	0f 90       	pop	r0
    799a:	1f 90       	pop	r1
    799c:	18 95       	reti

0000799e <time_get_days_in_month>:
{	    
	if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
		return true;
	else
		return false;
}
    799e:	ab 01       	movw	r20, r22
    79a0:	90 e0       	ldi	r25, 0x00	; 0
    79a2:	fc 01       	movw	r30, r24
    79a4:	31 97       	sbiw	r30, 0x01	; 1
    79a6:	ec 30       	cpi	r30, 0x0C	; 12
    79a8:	f1 05       	cpc	r31, r1
    79aa:	10 f0       	brcs	.+4      	; 0x79b0 <time_get_days_in_month+0x12>
    79ac:	80 e0       	ldi	r24, 0x00	; 0
    79ae:	08 95       	ret
    79b0:	e9 5d       	subi	r30, 0xD9	; 217
    79b2:	fe 4f       	sbci	r31, 0xFE	; 254
    79b4:	65 c5       	rjmp	.+2762   	; 0x8480 <__tablejump2__>
    79b6:	8e e1       	ldi	r24, 0x1E	; 30
    79b8:	08 95       	ret
    79ba:	cb 01       	movw	r24, r22
    79bc:	83 70       	andi	r24, 0x03	; 3
    79be:	99 27       	eor	r25, r25
    79c0:	89 2b       	or	r24, r25
    79c2:	99 f4       	brne	.+38     	; 0x79ea <time_get_days_in_month+0x4c>
    79c4:	9b 01       	movw	r18, r22
    79c6:	36 95       	lsr	r19
    79c8:	27 95       	ror	r18
    79ca:	36 95       	lsr	r19
    79cc:	27 95       	ror	r18
    79ce:	ab e7       	ldi	r26, 0x7B	; 123
    79d0:	b4 e1       	ldi	r27, 0x14	; 20
    79d2:	5c d5       	rcall	.+2744   	; 0x848c <__umulhisi3>
    79d4:	96 95       	lsr	r25
    79d6:	87 95       	ror	r24
    79d8:	64 e6       	ldi	r22, 0x64	; 100
    79da:	68 9f       	mul	r22, r24
    79dc:	90 01       	movw	r18, r0
    79de:	69 9f       	mul	r22, r25
    79e0:	30 0d       	add	r19, r0
    79e2:	11 24       	eor	r1, r1
    79e4:	42 17       	cp	r20, r18
    79e6:	53 07       	cpc	r21, r19
    79e8:	d9 f4       	brne	.+54     	; 0x7a20 <time_get_days_in_month+0x82>
    79ea:	9a 01       	movw	r18, r20
    79ec:	32 95       	swap	r19
    79ee:	22 95       	swap	r18
    79f0:	2f 70       	andi	r18, 0x0F	; 15
    79f2:	23 27       	eor	r18, r19
    79f4:	3f 70       	andi	r19, 0x0F	; 15
    79f6:	23 27       	eor	r18, r19
    79f8:	ae e3       	ldi	r26, 0x3E	; 62
    79fa:	ba e0       	ldi	r27, 0x0A	; 10
    79fc:	47 d5       	rcall	.+2702   	; 0x848c <__umulhisi3>
    79fe:	20 e9       	ldi	r18, 0x90	; 144
    7a00:	31 e0       	ldi	r19, 0x01	; 1
    7a02:	bc 01       	movw	r22, r24
    7a04:	62 9f       	mul	r22, r18
    7a06:	c0 01       	movw	r24, r0
    7a08:	63 9f       	mul	r22, r19
    7a0a:	90 0d       	add	r25, r0
    7a0c:	72 9f       	mul	r23, r18
    7a0e:	90 0d       	add	r25, r0
    7a10:	11 24       	eor	r1, r1
    7a12:	48 17       	cp	r20, r24
    7a14:	59 07       	cpc	r21, r25
    7a16:	21 f0       	breq	.+8      	; 0x7a20 <time_get_days_in_month+0x82>
    7a18:	8c e1       	ldi	r24, 0x1C	; 28
    7a1a:	08 95       	ret
    7a1c:	8f e1       	ldi	r24, 0x1F	; 31
    7a1e:	08 95       	ret
    7a20:	8d e1       	ldi	r24, 0x1D	; 29
    7a22:	08 95       	ret

00007a24 <time_get_weekday>:
    7a24:	1f 93       	push	r17
    7a26:	cf 93       	push	r28
    7a28:	df 93       	push	r29
    7a2a:	16 2f       	mov	r17, r22
    7a2c:	21 e0       	ldi	r18, 0x01	; 1
    7a2e:	30 e0       	ldi	r19, 0x00	; 0
    7a30:	63 30       	cpi	r22, 0x03	; 3
    7a32:	10 f0       	brcs	.+4      	; 0x7a38 <time_get_weekday+0x14>
    7a34:	20 e0       	ldi	r18, 0x00	; 0
    7a36:	30 e0       	ldi	r19, 0x00	; 0
    7a38:	42 1b       	sub	r20, r18
    7a3a:	53 0b       	sbc	r21, r19
    7a3c:	fa 01       	movw	r30, r20
    7a3e:	e8 0f       	add	r30, r24
    7a40:	f1 1d       	adc	r31, r1
    7a42:	ea 01       	movw	r28, r20
    7a44:	d6 95       	lsr	r29
    7a46:	c7 95       	ror	r28
    7a48:	d6 95       	lsr	r29
    7a4a:	c7 95       	ror	r28
    7a4c:	ec 0f       	add	r30, r28
    7a4e:	fd 1f       	adc	r31, r29
    7a50:	9a 01       	movw	r18, r20
    7a52:	32 95       	swap	r19
    7a54:	22 95       	swap	r18
    7a56:	2f 70       	andi	r18, 0x0F	; 15
    7a58:	23 27       	eor	r18, r19
    7a5a:	3f 70       	andi	r19, 0x0F	; 15
    7a5c:	23 27       	eor	r18, r19
    7a5e:	ae e3       	ldi	r26, 0x3E	; 62
    7a60:	ba e0       	ldi	r27, 0x0A	; 10
    7a62:	14 d5       	rcall	.+2600   	; 0x848c <__umulhisi3>
    7a64:	e8 0f       	add	r30, r24
    7a66:	f9 1f       	adc	r31, r25
    7a68:	a1 2f       	mov	r26, r17
    7a6a:	b0 e0       	ldi	r27, 0x00	; 0
    7a6c:	aa 0f       	add	r26, r26
    7a6e:	bb 1f       	adc	r27, r27
    7a70:	a1 5d       	subi	r26, 0xD1	; 209
    7a72:	b3 4d       	sbci	r27, 0xD3	; 211
    7a74:	8d 91       	ld	r24, X+
    7a76:	9c 91       	ld	r25, X
    7a78:	e8 0f       	add	r30, r24
    7a7a:	f9 1f       	adc	r31, r25
    7a7c:	9e 01       	movw	r18, r28
    7a7e:	ab e7       	ldi	r26, 0x7B	; 123
    7a80:	b4 e1       	ldi	r27, 0x14	; 20
    7a82:	04 d5       	rcall	.+2568   	; 0x848c <__umulhisi3>
    7a84:	96 95       	lsr	r25
    7a86:	87 95       	ror	r24
    7a88:	e8 1b       	sub	r30, r24
    7a8a:	f9 0b       	sbc	r31, r25
    7a8c:	9f 01       	movw	r18, r30
    7a8e:	a3 e9       	ldi	r26, 0x93	; 147
    7a90:	b4 e2       	ldi	r27, 0x24	; 36
    7a92:	fc d4       	rcall	.+2552   	; 0x848c <__umulhisi3>
    7a94:	28 1b       	sub	r18, r24
    7a96:	39 0b       	sbc	r19, r25
    7a98:	36 95       	lsr	r19
    7a9a:	27 95       	ror	r18
    7a9c:	28 0f       	add	r18, r24
    7a9e:	39 1f       	adc	r19, r25
    7aa0:	36 95       	lsr	r19
    7aa2:	27 95       	ror	r18
    7aa4:	36 95       	lsr	r19
    7aa6:	27 95       	ror	r18
    7aa8:	c9 01       	movw	r24, r18
    7aaa:	88 0f       	add	r24, r24
    7aac:	99 1f       	adc	r25, r25
    7aae:	88 0f       	add	r24, r24
    7ab0:	99 1f       	adc	r25, r25
    7ab2:	88 0f       	add	r24, r24
    7ab4:	99 1f       	adc	r25, r25
    7ab6:	82 1b       	sub	r24, r18
    7ab8:	93 0b       	sbc	r25, r19
    7aba:	e8 1b       	sub	r30, r24
    7abc:	f9 0b       	sbc	r31, r25
    7abe:	e6 5d       	subi	r30, 0xD6	; 214
    7ac0:	f3 4d       	sbci	r31, 0xD3	; 211
    7ac2:	80 81       	ld	r24, Z
    7ac4:	df 91       	pop	r29
    7ac6:	cf 91       	pop	r28
    7ac8:	1f 91       	pop	r17
    7aca:	08 95       	ret

00007acc <time_get_weeknumber>:

// Static Method to return ISO WeekNumber (1-53) for a given year
int16_t time_get_weeknumber(uint8_t day, uint8_t month, uint16_t year) 
{	    
    7acc:	8f 92       	push	r8
    7ace:	9f 92       	push	r9
    7ad0:	af 92       	push	r10
    7ad2:	bf 92       	push	r11
    7ad4:	cf 92       	push	r12
    7ad6:	df 92       	push	r13
    7ad8:	ef 92       	push	r14
    7ada:	ff 92       	push	r15
    7adc:	0f 93       	push	r16
    7ade:	1f 93       	push	r17
    7ae0:	cf 93       	push	r28
    7ae2:	df 93       	push	r29
    7ae4:	cd b7       	in	r28, 0x3d	; 61
    7ae6:	de b7       	in	r29, 0x3e	; 62
    7ae8:	68 97       	sbiw	r28, 0x18	; 24
    7aea:	cd bf       	out	0x3d, r28	; 61
    7aec:	de bf       	out	0x3e, r29	; 62
    7aee:	8a 01       	movw	r16, r20
	int16_t yyyy = year;
	int16_t mm= month;
    7af0:	46 2f       	mov	r20, r22
    7af2:	50 e0       	ldi	r21, 0x00	; 0
	int16_t day_of_year_number;
	int16_t jan_1_weekday;
	int16_t week_number = 0, weekday;
	    
	int16_t i,j,k,l,m,n;
	int16_t mnth[12] = {0,31,59,90,120,151,181,212,243,273,304,334};
    7af4:	98 e1       	ldi	r25, 0x18	; 24
    7af6:	e9 e1       	ldi	r30, 0x19	; 25
    7af8:	f0 e2       	ldi	r31, 0x20	; 32
    7afa:	de 01       	movw	r26, r28
    7afc:	11 96       	adiw	r26, 0x01	; 1
    7afe:	01 90       	ld	r0, Z+
    7b00:	0d 92       	st	X+, r0
    7b02:	9a 95       	dec	r25
    7b04:	e1 f7       	brne	.-8      	; 0x7afe <time_get_weeknumber+0x32>

	int16_t year_number;
	    
	// Set DayofYear Number for yyyy mm dd
	day_of_year_number = dd + mnth[mm-1];
    7b06:	fa 01       	movw	r30, r20
    7b08:	31 97       	sbiw	r30, 0x01	; 1
    7b0a:	ee 0f       	add	r30, r30
    7b0c:	ff 1f       	adc	r31, r31
    7b0e:	21 e0       	ldi	r18, 0x01	; 1
    7b10:	30 e0       	ldi	r19, 0x00	; 0
    7b12:	2c 0f       	add	r18, r28
    7b14:	3d 1f       	adc	r19, r29
    7b16:	e2 0f       	add	r30, r18
    7b18:	f3 1f       	adc	r31, r19
    7b1a:	01 90       	ld	r0, Z+
    7b1c:	f0 81       	ld	r31, Z
    7b1e:	e0 2d       	mov	r30, r0
    7b20:	e8 0f       	add	r30, r24
    7b22:	f1 1d       	adc	r31, r1
}

// Method to check Leap Year
bool time_is_leap_year(uint16_t year) 
{	    
	if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
    7b24:	68 01       	movw	r12, r16
    7b26:	33 e0       	ldi	r19, 0x03	; 3
    7b28:	c3 22       	and	r12, r19
    7b2a:	dd 24       	eor	r13, r13
    7b2c:	c1 14       	cp	r12, r1
    7b2e:	d1 04       	cpc	r13, r1
    7b30:	09 f0       	breq	.+2      	; 0x7b34 <time_get_weeknumber+0x68>
    7b32:	7d c0       	rjmp	.+250    	; 0x7c2e <time_get_weeknumber+0x162>
    7b34:	98 01       	movw	r18, r16
    7b36:	36 95       	lsr	r19
    7b38:	27 95       	ror	r18
    7b3a:	36 95       	lsr	r19
    7b3c:	27 95       	ror	r18
    7b3e:	ab e7       	ldi	r26, 0x7B	; 123
    7b40:	b4 e1       	ldi	r27, 0x14	; 20
    7b42:	a4 d4       	rcall	.+2376   	; 0x848c <__umulhisi3>
    7b44:	96 95       	lsr	r25
    7b46:	87 95       	ror	r24
    7b48:	64 e6       	ldi	r22, 0x64	; 100
    7b4a:	68 9f       	mul	r22, r24
    7b4c:	90 01       	movw	r18, r0
    7b4e:	69 9f       	mul	r22, r25
    7b50:	30 0d       	add	r19, r0
    7b52:	11 24       	eor	r1, r1
    7b54:	02 17       	cp	r16, r18
    7b56:	13 07       	cpc	r17, r19
    7b58:	09 f4       	brne	.+2      	; 0x7b5c <time_get_weeknumber+0x90>
    7b5a:	69 c0       	rjmp	.+210    	; 0x7c2e <time_get_weeknumber+0x162>
	    
	// Set DayofYear Number for yyyy mm dd
	day_of_year_number = dd + mnth[mm-1];

	// Increase of Dayof Year Number by 1, if year is leapyear and month is february
	if ((time_is_leap_year(yyyy) == true) && (mm == 2))
    7b5c:	42 30       	cpi	r20, 0x02	; 2
    7b5e:	51 05       	cpc	r21, r1
    7b60:	09 f4       	brne	.+2      	; 0x7b64 <time_get_weeknumber+0x98>
    7b62:	c2 c0       	rjmp	.+388    	; 0x7ce8 <time_get_weeknumber+0x21c>
	day_of_year_number += 1;

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
    7b64:	24 e6       	ldi	r18, 0x64	; 100
    7b66:	30 e0       	ldi	r19, 0x00	; 0
    7b68:	58 01       	movw	r10, r16
    7b6a:	71 e0       	ldi	r23, 0x01	; 1
    7b6c:	a7 1a       	sub	r10, r23
    7b6e:	b1 08       	sbc	r11, r1
    7b70:	c5 01       	movw	r24, r10
    7b72:	b9 01       	movw	r22, r18
    7b74:	50 d4       	rcall	.+2208   	; 0x8416 <__divmodhi4>
    7b76:	7c 01       	movw	r14, r24
	j = (yyyy - 1) - i;
    7b78:	c5 01       	movw	r24, r10
    7b7a:	8e 19       	sub	r24, r14
    7b7c:	9f 09       	sbc	r25, r15
	k = i + i/4;
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    7b7e:	b9 01       	movw	r22, r18
    7b80:	4a d4       	rcall	.+2196   	; 0x8416 <__divmodhi4>
    7b82:	63 70       	andi	r22, 0x03	; 3
    7b84:	70 78       	andi	r23, 0x80	; 128
    7b86:	77 fd       	sbrc	r23, 7
    7b88:	a8 c0       	rjmp	.+336    	; 0x7cda <time_get_weeknumber+0x20e>
    7b8a:	cb 01       	movw	r24, r22
    7b8c:	88 0f       	add	r24, r24
    7b8e:	99 1f       	adc	r25, r25
    7b90:	88 0f       	add	r24, r24
    7b92:	99 1f       	adc	r25, r25
    7b94:	86 0f       	add	r24, r22
    7b96:	97 1f       	adc	r25, r23
	day_of_year_number += 1;

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
	j = (yyyy - 1) - i;
	k = i + i/4;
    7b98:	97 01       	movw	r18, r14
    7b9a:	f7 fc       	sbrc	r15, 7
    7b9c:	9b c0       	rjmp	.+310    	; 0x7cd4 <time_get_weeknumber+0x208>
    7b9e:	35 95       	asr	r19
    7ba0:	27 95       	ror	r18
    7ba2:	35 95       	asr	r19
    7ba4:	27 95       	ror	r18
    7ba6:	2e 0d       	add	r18, r14
    7ba8:	3f 1d       	adc	r19, r15
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    7baa:	28 0f       	add	r18, r24
    7bac:	39 1f       	adc	r19, r25
    7bae:	a7 e0       	ldi	r26, 0x07	; 7
    7bb0:	8a 2e       	mov	r8, r26
    7bb2:	91 2c       	mov	r9, r1
    7bb4:	c9 01       	movw	r24, r18
    7bb6:	b4 01       	movw	r22, r8
    7bb8:	2e d4       	rcall	.+2140   	; 0x8416 <__divmodhi4>
    7bba:	7c 01       	movw	r14, r24
    7bbc:	5c 01       	movw	r10, r24
    7bbe:	8f ef       	ldi	r24, 0xFF	; 255
    7bc0:	a8 1a       	sub	r10, r24
    7bc2:	b8 0a       	sbc	r11, r24
	// Calcuate the WeekDay for the given date
	l = day_of_year_number + (jan_1_weekday - 1);
	weekday = 1 + ((l - 1) % 7);

	// Find if the date falls in YearNumber set WeekNumber to 52 or 53
	if ((day_of_year_number <= (8 - jan_1_weekday)) && (jan_1_weekday > 4))
    7bc4:	8e 18       	sub	r8, r14
    7bc6:	9f 08       	sbc	r9, r15
    7bc8:	8e 16       	cp	r8, r30
    7bca:	9f 06       	cpc	r9, r31
    7bcc:	0c f0       	brlt	.+2      	; 0x7bd0 <time_get_weeknumber+0x104>
    7bce:	4c c0       	rjmp	.+152    	; 0x7c68 <time_get_weeknumber+0x19c>
}

// Method to check Leap Year
bool time_is_leap_year(uint16_t year) 
{	    
	if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
    7bd0:	cd 28       	or	r12, r13
    7bd2:	09 f0       	breq	.+2      	; 0x7bd6 <time_get_weeknumber+0x10a>
    7bd4:	64 c0       	rjmp	.+200    	; 0x7c9e <time_get_weeknumber+0x1d2>
    7bd6:	98 01       	movw	r18, r16
    7bd8:	36 95       	lsr	r19
    7bda:	27 95       	ror	r18
    7bdc:	36 95       	lsr	r19
    7bde:	27 95       	ror	r18
    7be0:	ab e7       	ldi	r26, 0x7B	; 123
    7be2:	b4 e1       	ldi	r27, 0x14	; 20
    7be4:	53 d4       	rcall	.+2214   	; 0x848c <__umulhisi3>
    7be6:	96 95       	lsr	r25
    7be8:	87 95       	ror	r24
    7bea:	44 e6       	ldi	r20, 0x64	; 100
    7bec:	48 9f       	mul	r20, r24
    7bee:	90 01       	movw	r18, r0
    7bf0:	49 9f       	mul	r20, r25
    7bf2:	30 0d       	add	r19, r0
    7bf4:	11 24       	eor	r1, r1
    7bf6:	02 17       	cp	r16, r18
    7bf8:	13 07       	cpc	r17, r19
    7bfa:	09 f4       	brne	.+2      	; 0x7bfe <time_get_weeknumber+0x132>
    7bfc:	50 c0       	rjmp	.+160    	; 0x7c9e <time_get_weeknumber+0x1d2>
	    
	// Set WeekNumber to 1 to 53 if date falls in YearNumber
	if (year_number == yyyy)
	{
		if (time_is_leap_year(yyyy)==true)
		m = 366;
    7bfe:	2e e6       	ldi	r18, 0x6E	; 110
    7c00:	31 e0       	ldi	r19, 0x01	; 1
	j = (yyyy - 1) - i;
	k = i + i/4;
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);

	// Calcuate the WeekDay for the given date
	l = day_of_year_number + (jan_1_weekday - 1);
    7c02:	cf 01       	movw	r24, r30
    7c04:	8e 0d       	add	r24, r14
    7c06:	9f 1d       	adc	r25, r15
	weekday = 1 + ((l - 1) % 7);
    7c08:	01 97       	sbiw	r24, 0x01	; 1
    7c0a:	07 e0       	ldi	r16, 0x07	; 7
    7c0c:	10 e0       	ldi	r17, 0x00	; 0
    7c0e:	b8 01       	movw	r22, r16
    7c10:	02 d4       	rcall	.+2052   	; 0x8416 <__divmodhi4>
	{
		if (time_is_leap_year(yyyy)==true)
		m = 366;
		else
		m = 365;
		if ((m - day_of_year_number) < (4-weekday))
    7c12:	a9 01       	movw	r20, r18
    7c14:	4e 1b       	sub	r20, r30
    7c16:	5f 0b       	sbc	r21, r31
    7c18:	23 e0       	ldi	r18, 0x03	; 3
    7c1a:	30 e0       	ldi	r19, 0x00	; 0
    7c1c:	28 1b       	sub	r18, r24
    7c1e:	39 0b       	sbc	r19, r25
    7c20:	42 17       	cp	r20, r18
    7c22:	53 07       	cpc	r21, r19
    7c24:	0c f0       	brlt	.+2      	; 0x7c28 <time_get_weeknumber+0x15c>
    7c26:	65 c0       	rjmp	.+202    	; 0x7cf2 <time_get_weeknumber+0x226>
		{
			year_number = yyyy + 1;
			week_number = 1;
    7c28:	81 e0       	ldi	r24, 0x01	; 1
    7c2a:	90 e0       	ldi	r25, 0x00	; 0
    7c2c:	28 c0       	rjmp	.+80     	; 0x7c7e <time_get_weeknumber+0x1b2>
}

// Method to check Leap Year
bool time_is_leap_year(uint16_t year) 
{	    
	if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
    7c2e:	98 01       	movw	r18, r16
    7c30:	32 95       	swap	r19
    7c32:	22 95       	swap	r18
    7c34:	2f 70       	andi	r18, 0x0F	; 15
    7c36:	23 27       	eor	r18, r19
    7c38:	3f 70       	andi	r19, 0x0F	; 15
    7c3a:	23 27       	eor	r18, r19
    7c3c:	ae e3       	ldi	r26, 0x3E	; 62
    7c3e:	ba e0       	ldi	r27, 0x0A	; 10
    7c40:	25 d4       	rcall	.+2122   	; 0x848c <__umulhisi3>
    7c42:	20 e9       	ldi	r18, 0x90	; 144
    7c44:	31 e0       	ldi	r19, 0x01	; 1
    7c46:	bc 01       	movw	r22, r24
    7c48:	62 9f       	mul	r22, r18
    7c4a:	c0 01       	movw	r24, r0
    7c4c:	63 9f       	mul	r22, r19
    7c4e:	90 0d       	add	r25, r0
    7c50:	72 9f       	mul	r23, r18
    7c52:	90 0d       	add	r25, r0
    7c54:	11 24       	eor	r1, r1
    7c56:	08 17       	cp	r16, r24
    7c58:	19 07       	cpc	r17, r25
    7c5a:	09 f0       	breq	.+2      	; 0x7c5e <time_get_weeknumber+0x192>
    7c5c:	83 cf       	rjmp	.-250    	; 0x7b64 <time_get_weeknumber+0x98>
	    
	// Set DayofYear Number for yyyy mm dd
	day_of_year_number = dd + mnth[mm-1];

	// Increase of Dayof Year Number by 1, if year is leapyear and month is february
	if ((time_is_leap_year(yyyy) == true) && (mm == 2))
    7c5e:	42 30       	cpi	r20, 0x02	; 2
    7c60:	51 05       	cpc	r21, r1
    7c62:	09 f0       	breq	.+2      	; 0x7c66 <time_get_weeknumber+0x19a>
    7c64:	7f cf       	rjmp	.-258    	; 0x7b64 <time_get_weeknumber+0x98>
    7c66:	40 c0       	rjmp	.+128    	; 0x7ce8 <time_get_weeknumber+0x21c>
	// Calcuate the WeekDay for the given date
	l = day_of_year_number + (jan_1_weekday - 1);
	weekday = 1 + ((l - 1) % 7);

	// Find if the date falls in YearNumber set WeekNumber to 52 or 53
	if ((day_of_year_number <= (8 - jan_1_weekday)) && (jan_1_weekday > 4))
    7c68:	25 e0       	ldi	r18, 0x05	; 5
    7c6a:	a2 16       	cp	r10, r18
    7c6c:	b1 04       	cpc	r11, r1
    7c6e:	0c f4       	brge	.+2      	; 0x7c72 <time_get_weeknumber+0x1a6>
    7c70:	af cf       	rjmp	.-162    	; 0x7bd0 <time_get_weeknumber+0x104>
	{
		year_number = yyyy - 1;
		if ((jan_1_weekday == 5) || ((jan_1_weekday == 6) && (jan_1_weekday > 4)))
    7c72:	37 e0       	ldi	r19, 0x07	; 7
    7c74:	a3 16       	cp	r10, r19
    7c76:	b1 04       	cpc	r11, r1
    7c78:	c9 f5       	brne	.+114    	; 0x7cec <time_get_weeknumber+0x220>
		week_number = 53;
		else
		week_number = 52;
    7c7a:	84 e3       	ldi	r24, 0x34	; 52
    7c7c:	90 e0       	ldi	r25, 0x00	; 0
		if (jan_1_weekday > 4)
		week_number -= 1;
	}

	return (week_number);
}
    7c7e:	68 96       	adiw	r28, 0x18	; 24
    7c80:	cd bf       	out	0x3d, r28	; 61
    7c82:	de bf       	out	0x3e, r29	; 62
    7c84:	df 91       	pop	r29
    7c86:	cf 91       	pop	r28
    7c88:	1f 91       	pop	r17
    7c8a:	0f 91       	pop	r16
    7c8c:	ff 90       	pop	r15
    7c8e:	ef 90       	pop	r14
    7c90:	df 90       	pop	r13
    7c92:	cf 90       	pop	r12
    7c94:	bf 90       	pop	r11
    7c96:	af 90       	pop	r10
    7c98:	9f 90       	pop	r9
    7c9a:	8f 90       	pop	r8
    7c9c:	08 95       	ret
}

// Method to check Leap Year
bool time_is_leap_year(uint16_t year) 
{	    
	if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
    7c9e:	98 01       	movw	r18, r16
    7ca0:	32 95       	swap	r19
    7ca2:	22 95       	swap	r18
    7ca4:	2f 70       	andi	r18, 0x0F	; 15
    7ca6:	23 27       	eor	r18, r19
    7ca8:	3f 70       	andi	r19, 0x0F	; 15
    7caa:	23 27       	eor	r18, r19
    7cac:	ae e3       	ldi	r26, 0x3E	; 62
    7cae:	ba e0       	ldi	r27, 0x0A	; 10
    7cb0:	ed d3       	rcall	.+2010   	; 0x848c <__umulhisi3>
    7cb2:	20 e9       	ldi	r18, 0x90	; 144
    7cb4:	31 e0       	ldi	r19, 0x01	; 1
    7cb6:	ac 01       	movw	r20, r24
    7cb8:	42 9f       	mul	r20, r18
    7cba:	c0 01       	movw	r24, r0
    7cbc:	43 9f       	mul	r20, r19
    7cbe:	90 0d       	add	r25, r0
    7cc0:	52 9f       	mul	r21, r18
    7cc2:	90 0d       	add	r25, r0
    7cc4:	11 24       	eor	r1, r1
    7cc6:	08 17       	cp	r16, r24
    7cc8:	19 07       	cpc	r17, r25
    7cca:	09 f4       	brne	.+2      	; 0x7cce <time_get_weeknumber+0x202>
    7ccc:	98 cf       	rjmp	.-208    	; 0x7bfe <time_get_weeknumber+0x132>
	if (year_number == yyyy)
	{
		if (time_is_leap_year(yyyy)==true)
		m = 366;
		else
		m = 365;
    7cce:	2d e6       	ldi	r18, 0x6D	; 109
    7cd0:	31 e0       	ldi	r19, 0x01	; 1
    7cd2:	97 cf       	rjmp	.-210    	; 0x7c02 <time_get_weeknumber+0x136>
	day_of_year_number += 1;

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
	j = (yyyy - 1) - i;
	k = i + i/4;
    7cd4:	2d 5f       	subi	r18, 0xFD	; 253
    7cd6:	3f 4f       	sbci	r19, 0xFF	; 255
    7cd8:	62 cf       	rjmp	.-316    	; 0x7b9e <time_get_weeknumber+0xd2>
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    7cda:	61 50       	subi	r22, 0x01	; 1
    7cdc:	71 09       	sbc	r23, r1
    7cde:	6c 6f       	ori	r22, 0xFC	; 252
    7ce0:	7f 6f       	ori	r23, 0xFF	; 255
    7ce2:	6f 5f       	subi	r22, 0xFF	; 255
    7ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    7ce6:	51 cf       	rjmp	.-350    	; 0x7b8a <time_get_weeknumber+0xbe>
	// Set DayofYear Number for yyyy mm dd
	day_of_year_number = dd + mnth[mm-1];

	// Increase of Dayof Year Number by 1, if year is leapyear and month is february
	if ((time_is_leap_year(yyyy) == true) && (mm == 2))
	day_of_year_number += 1;
    7ce8:	31 96       	adiw	r30, 0x01	; 1
    7cea:	3c cf       	rjmp	.-392    	; 0x7b64 <time_get_weeknumber+0x98>
	// Find if the date falls in YearNumber set WeekNumber to 52 or 53
	if ((day_of_year_number <= (8 - jan_1_weekday)) && (jan_1_weekday > 4))
	{
		year_number = yyyy - 1;
		if ((jan_1_weekday == 5) || ((jan_1_weekday == 6) && (jan_1_weekday > 4)))
		week_number = 53;
    7cec:	85 e3       	ldi	r24, 0x35	; 53
    7cee:	90 e0       	ldi	r25, 0x00	; 0
    7cf0:	c6 cf       	rjmp	.-116    	; 0x7c7e <time_get_weeknumber+0x1b2>
			week_number = 1;
		}
	}
	    
	if (year_number==yyyy) {
		n = day_of_year_number + (7 - weekday) + (jan_1_weekday -1);
    7cf2:	bf 01       	movw	r22, r30
    7cf4:	68 1b       	sub	r22, r24
    7cf6:	79 0b       	sbc	r23, r25
    7cf8:	cb 01       	movw	r24, r22
    7cfa:	06 96       	adiw	r24, 0x06	; 6
    7cfc:	8e 0d       	add	r24, r14
    7cfe:	9f 1d       	adc	r25, r15
		week_number = n / 7;
    7d00:	b8 01       	movw	r22, r16
    7d02:	89 d3       	rcall	.+1810   	; 0x8416 <__divmodhi4>
    7d04:	cb 01       	movw	r24, r22
		if (jan_1_weekday > 4)
    7d06:	75 e0       	ldi	r23, 0x05	; 5
    7d08:	a7 16       	cp	r10, r23
    7d0a:	b1 04       	cpc	r11, r1
    7d0c:	0c f4       	brge	.+2      	; 0x7d10 <time_get_weeknumber+0x244>
    7d0e:	b7 cf       	rjmp	.-146    	; 0x7c7e <time_get_weeknumber+0x1b2>
		week_number -= 1;
    7d10:	01 97       	sbiw	r24, 0x01	; 1
    7d12:	b5 cf       	rjmp	.-150    	; 0x7c7e <time_get_weeknumber+0x1b2>

00007d14 <vfprintf>:
    7d14:	2f 92       	push	r2
    7d16:	3f 92       	push	r3
    7d18:	4f 92       	push	r4
    7d1a:	5f 92       	push	r5
    7d1c:	6f 92       	push	r6
    7d1e:	7f 92       	push	r7
    7d20:	8f 92       	push	r8
    7d22:	9f 92       	push	r9
    7d24:	af 92       	push	r10
    7d26:	bf 92       	push	r11
    7d28:	cf 92       	push	r12
    7d2a:	df 92       	push	r13
    7d2c:	ef 92       	push	r14
    7d2e:	ff 92       	push	r15
    7d30:	0f 93       	push	r16
    7d32:	1f 93       	push	r17
    7d34:	cf 93       	push	r28
    7d36:	df 93       	push	r29
    7d38:	cd b7       	in	r28, 0x3d	; 61
    7d3a:	de b7       	in	r29, 0x3e	; 62
    7d3c:	63 97       	sbiw	r28, 0x13	; 19
    7d3e:	cd bf       	out	0x3d, r28	; 61
    7d40:	de bf       	out	0x3e, r29	; 62
    7d42:	7c 01       	movw	r14, r24
    7d44:	1b 01       	movw	r2, r22
    7d46:	6a 01       	movw	r12, r20
    7d48:	fc 01       	movw	r30, r24
    7d4a:	16 82       	std	Z+6, r1	; 0x06
    7d4c:	17 82       	std	Z+7, r1	; 0x07
    7d4e:	83 81       	ldd	r24, Z+3	; 0x03
    7d50:	81 ff       	sbrs	r24, 1
    7d52:	49 c3       	rjmp	.+1682   	; 0x83e6 <vfprintf+0x6d2>
    7d54:	be 01       	movw	r22, r28
    7d56:	6f 5f       	subi	r22, 0xFF	; 255
    7d58:	7f 4f       	sbci	r23, 0xFF	; 255
    7d5a:	4b 01       	movw	r8, r22
    7d5c:	f7 01       	movw	r30, r14
    7d5e:	93 81       	ldd	r25, Z+3	; 0x03
    7d60:	f1 01       	movw	r30, r2
    7d62:	93 fd       	sbrc	r25, 3
    7d64:	85 91       	lpm	r24, Z+
    7d66:	93 ff       	sbrs	r25, 3
    7d68:	81 91       	ld	r24, Z+
    7d6a:	1f 01       	movw	r2, r30
    7d6c:	88 23       	and	r24, r24
    7d6e:	09 f4       	brne	.+2      	; 0x7d72 <vfprintf+0x5e>
    7d70:	36 c3       	rjmp	.+1644   	; 0x83de <vfprintf+0x6ca>
    7d72:	85 32       	cpi	r24, 0x25	; 37
    7d74:	39 f4       	brne	.+14     	; 0x7d84 <vfprintf+0x70>
    7d76:	93 fd       	sbrc	r25, 3
    7d78:	85 91       	lpm	r24, Z+
    7d7a:	93 ff       	sbrs	r25, 3
    7d7c:	81 91       	ld	r24, Z+
    7d7e:	1f 01       	movw	r2, r30
    7d80:	85 32       	cpi	r24, 0x25	; 37
    7d82:	31 f4       	brne	.+12     	; 0x7d90 <vfprintf+0x7c>
    7d84:	b7 01       	movw	r22, r14
    7d86:	90 e0       	ldi	r25, 0x00	; 0
    7d88:	40 d6       	rcall	.+3200   	; 0x8a0a <fputc>
    7d8a:	56 01       	movw	r10, r12
    7d8c:	65 01       	movw	r12, r10
    7d8e:	e6 cf       	rjmp	.-52     	; 0x7d5c <vfprintf+0x48>
    7d90:	10 e0       	ldi	r17, 0x00	; 0
    7d92:	51 2c       	mov	r5, r1
    7d94:	20 e0       	ldi	r18, 0x00	; 0
    7d96:	20 32       	cpi	r18, 0x20	; 32
    7d98:	a0 f4       	brcc	.+40     	; 0x7dc2 <vfprintf+0xae>
    7d9a:	8b 32       	cpi	r24, 0x2B	; 43
    7d9c:	69 f0       	breq	.+26     	; 0x7db8 <vfprintf+0xa4>
    7d9e:	30 f4       	brcc	.+12     	; 0x7dac <vfprintf+0x98>
    7da0:	80 32       	cpi	r24, 0x20	; 32
    7da2:	59 f0       	breq	.+22     	; 0x7dba <vfprintf+0xa6>
    7da4:	83 32       	cpi	r24, 0x23	; 35
    7da6:	69 f4       	brne	.+26     	; 0x7dc2 <vfprintf+0xae>
    7da8:	20 61       	ori	r18, 0x10	; 16
    7daa:	2c c0       	rjmp	.+88     	; 0x7e04 <vfprintf+0xf0>
    7dac:	8d 32       	cpi	r24, 0x2D	; 45
    7dae:	39 f0       	breq	.+14     	; 0x7dbe <vfprintf+0xaa>
    7db0:	80 33       	cpi	r24, 0x30	; 48
    7db2:	39 f4       	brne	.+14     	; 0x7dc2 <vfprintf+0xae>
    7db4:	21 60       	ori	r18, 0x01	; 1
    7db6:	26 c0       	rjmp	.+76     	; 0x7e04 <vfprintf+0xf0>
    7db8:	22 60       	ori	r18, 0x02	; 2
    7dba:	24 60       	ori	r18, 0x04	; 4
    7dbc:	23 c0       	rjmp	.+70     	; 0x7e04 <vfprintf+0xf0>
    7dbe:	28 60       	ori	r18, 0x08	; 8
    7dc0:	21 c0       	rjmp	.+66     	; 0x7e04 <vfprintf+0xf0>
    7dc2:	27 fd       	sbrc	r18, 7
    7dc4:	27 c0       	rjmp	.+78     	; 0x7e14 <vfprintf+0x100>
    7dc6:	30 ed       	ldi	r19, 0xD0	; 208
    7dc8:	38 0f       	add	r19, r24
    7dca:	3a 30       	cpi	r19, 0x0A	; 10
    7dcc:	78 f4       	brcc	.+30     	; 0x7dec <vfprintf+0xd8>
    7dce:	26 ff       	sbrs	r18, 6
    7dd0:	06 c0       	rjmp	.+12     	; 0x7dde <vfprintf+0xca>
    7dd2:	fa e0       	ldi	r31, 0x0A	; 10
    7dd4:	1f 9f       	mul	r17, r31
    7dd6:	30 0d       	add	r19, r0
    7dd8:	11 24       	eor	r1, r1
    7dda:	13 2f       	mov	r17, r19
    7ddc:	13 c0       	rjmp	.+38     	; 0x7e04 <vfprintf+0xf0>
    7dde:	6a e0       	ldi	r22, 0x0A	; 10
    7de0:	56 9e       	mul	r5, r22
    7de2:	30 0d       	add	r19, r0
    7de4:	11 24       	eor	r1, r1
    7de6:	53 2e       	mov	r5, r19
    7de8:	20 62       	ori	r18, 0x20	; 32
    7dea:	0c c0       	rjmp	.+24     	; 0x7e04 <vfprintf+0xf0>
    7dec:	8e 32       	cpi	r24, 0x2E	; 46
    7dee:	21 f4       	brne	.+8      	; 0x7df8 <vfprintf+0xe4>
    7df0:	26 fd       	sbrc	r18, 6
    7df2:	f5 c2       	rjmp	.+1514   	; 0x83de <vfprintf+0x6ca>
    7df4:	20 64       	ori	r18, 0x40	; 64
    7df6:	06 c0       	rjmp	.+12     	; 0x7e04 <vfprintf+0xf0>
    7df8:	8c 36       	cpi	r24, 0x6C	; 108
    7dfa:	11 f4       	brne	.+4      	; 0x7e00 <vfprintf+0xec>
    7dfc:	20 68       	ori	r18, 0x80	; 128
    7dfe:	02 c0       	rjmp	.+4      	; 0x7e04 <vfprintf+0xf0>
    7e00:	88 36       	cpi	r24, 0x68	; 104
    7e02:	41 f4       	brne	.+16     	; 0x7e14 <vfprintf+0x100>
    7e04:	f1 01       	movw	r30, r2
    7e06:	93 fd       	sbrc	r25, 3
    7e08:	85 91       	lpm	r24, Z+
    7e0a:	93 ff       	sbrs	r25, 3
    7e0c:	81 91       	ld	r24, Z+
    7e0e:	1f 01       	movw	r2, r30
    7e10:	81 11       	cpse	r24, r1
    7e12:	c1 cf       	rjmp	.-126    	; 0x7d96 <vfprintf+0x82>
    7e14:	9b eb       	ldi	r25, 0xBB	; 187
    7e16:	98 0f       	add	r25, r24
    7e18:	93 30       	cpi	r25, 0x03	; 3
    7e1a:	18 f4       	brcc	.+6      	; 0x7e22 <vfprintf+0x10e>
    7e1c:	20 61       	ori	r18, 0x10	; 16
    7e1e:	80 5e       	subi	r24, 0xE0	; 224
    7e20:	06 c0       	rjmp	.+12     	; 0x7e2e <vfprintf+0x11a>
    7e22:	9b e9       	ldi	r25, 0x9B	; 155
    7e24:	98 0f       	add	r25, r24
    7e26:	93 30       	cpi	r25, 0x03	; 3
    7e28:	08 f0       	brcs	.+2      	; 0x7e2c <vfprintf+0x118>
    7e2a:	9a c1       	rjmp	.+820    	; 0x8160 <vfprintf+0x44c>
    7e2c:	2f 7e       	andi	r18, 0xEF	; 239
    7e2e:	26 ff       	sbrs	r18, 6
    7e30:	16 e0       	ldi	r17, 0x06	; 6
    7e32:	2f 73       	andi	r18, 0x3F	; 63
    7e34:	72 2e       	mov	r7, r18
    7e36:	85 36       	cpi	r24, 0x65	; 101
    7e38:	21 f4       	brne	.+8      	; 0x7e42 <vfprintf+0x12e>
    7e3a:	f2 2f       	mov	r31, r18
    7e3c:	f0 64       	ori	r31, 0x40	; 64
    7e3e:	7f 2e       	mov	r7, r31
    7e40:	08 c0       	rjmp	.+16     	; 0x7e52 <vfprintf+0x13e>
    7e42:	86 36       	cpi	r24, 0x66	; 102
    7e44:	21 f4       	brne	.+8      	; 0x7e4e <vfprintf+0x13a>
    7e46:	62 2f       	mov	r22, r18
    7e48:	60 68       	ori	r22, 0x80	; 128
    7e4a:	76 2e       	mov	r7, r22
    7e4c:	02 c0       	rjmp	.+4      	; 0x7e52 <vfprintf+0x13e>
    7e4e:	11 11       	cpse	r17, r1
    7e50:	11 50       	subi	r17, 0x01	; 1
    7e52:	77 fe       	sbrs	r7, 7
    7e54:	07 c0       	rjmp	.+14     	; 0x7e64 <vfprintf+0x150>
    7e56:	1c 33       	cpi	r17, 0x3C	; 60
    7e58:	48 f4       	brcc	.+18     	; 0x7e6c <vfprintf+0x158>
    7e5a:	44 24       	eor	r4, r4
    7e5c:	43 94       	inc	r4
    7e5e:	41 0e       	add	r4, r17
    7e60:	27 e0       	ldi	r18, 0x07	; 7
    7e62:	0b c0       	rjmp	.+22     	; 0x7e7a <vfprintf+0x166>
    7e64:	18 30       	cpi	r17, 0x08	; 8
    7e66:	30 f4       	brcc	.+12     	; 0x7e74 <vfprintf+0x160>
    7e68:	21 2f       	mov	r18, r17
    7e6a:	06 c0       	rjmp	.+12     	; 0x7e78 <vfprintf+0x164>
    7e6c:	27 e0       	ldi	r18, 0x07	; 7
    7e6e:	4c e3       	ldi	r20, 0x3C	; 60
    7e70:	44 2e       	mov	r4, r20
    7e72:	03 c0       	rjmp	.+6      	; 0x7e7a <vfprintf+0x166>
    7e74:	27 e0       	ldi	r18, 0x07	; 7
    7e76:	17 e0       	ldi	r17, 0x07	; 7
    7e78:	41 2c       	mov	r4, r1
    7e7a:	56 01       	movw	r10, r12
    7e7c:	74 e0       	ldi	r23, 0x04	; 4
    7e7e:	a7 0e       	add	r10, r23
    7e80:	b1 1c       	adc	r11, r1
    7e82:	f6 01       	movw	r30, r12
    7e84:	60 81       	ld	r22, Z
    7e86:	71 81       	ldd	r23, Z+1	; 0x01
    7e88:	82 81       	ldd	r24, Z+2	; 0x02
    7e8a:	93 81       	ldd	r25, Z+3	; 0x03
    7e8c:	04 2d       	mov	r16, r4
    7e8e:	a4 01       	movw	r20, r8
    7e90:	47 d4       	rcall	.+2190   	; 0x8720 <__ftoa_engine>
    7e92:	6c 01       	movw	r12, r24
    7e94:	09 81       	ldd	r16, Y+1	; 0x01
    7e96:	00 ff       	sbrs	r16, 0
    7e98:	02 c0       	rjmp	.+4      	; 0x7e9e <vfprintf+0x18a>
    7e9a:	03 ff       	sbrs	r16, 3
    7e9c:	06 c0       	rjmp	.+12     	; 0x7eaa <vfprintf+0x196>
    7e9e:	71 fc       	sbrc	r7, 1
    7ea0:	07 c0       	rjmp	.+14     	; 0x7eb0 <vfprintf+0x19c>
    7ea2:	72 fc       	sbrc	r7, 2
    7ea4:	08 c0       	rjmp	.+16     	; 0x7eb6 <vfprintf+0x1a2>
    7ea6:	61 2c       	mov	r6, r1
    7ea8:	08 c0       	rjmp	.+16     	; 0x7eba <vfprintf+0x1a6>
    7eaa:	3d e2       	ldi	r19, 0x2D	; 45
    7eac:	63 2e       	mov	r6, r19
    7eae:	05 c0       	rjmp	.+10     	; 0x7eba <vfprintf+0x1a6>
    7eb0:	2b e2       	ldi	r18, 0x2B	; 43
    7eb2:	62 2e       	mov	r6, r18
    7eb4:	02 c0       	rjmp	.+4      	; 0x7eba <vfprintf+0x1a6>
    7eb6:	90 e2       	ldi	r25, 0x20	; 32
    7eb8:	69 2e       	mov	r6, r25
    7eba:	80 2f       	mov	r24, r16
    7ebc:	8c 70       	andi	r24, 0x0C	; 12
    7ebe:	81 f1       	breq	.+96     	; 0x7f20 <vfprintf+0x20c>
    7ec0:	66 20       	and	r6, r6
    7ec2:	11 f0       	breq	.+4      	; 0x7ec8 <vfprintf+0x1b4>
    7ec4:	84 e0       	ldi	r24, 0x04	; 4
    7ec6:	01 c0       	rjmp	.+2      	; 0x7eca <vfprintf+0x1b6>
    7ec8:	83 e0       	ldi	r24, 0x03	; 3
    7eca:	85 15       	cp	r24, r5
    7ecc:	10 f0       	brcs	.+4      	; 0x7ed2 <vfprintf+0x1be>
    7ece:	51 2c       	mov	r5, r1
    7ed0:	0a c0       	rjmp	.+20     	; 0x7ee6 <vfprintf+0x1d2>
    7ed2:	58 1a       	sub	r5, r24
    7ed4:	73 fc       	sbrc	r7, 3
    7ed6:	07 c0       	rjmp	.+14     	; 0x7ee6 <vfprintf+0x1d2>
    7ed8:	b7 01       	movw	r22, r14
    7eda:	80 e2       	ldi	r24, 0x20	; 32
    7edc:	90 e0       	ldi	r25, 0x00	; 0
    7ede:	95 d5       	rcall	.+2858   	; 0x8a0a <fputc>
    7ee0:	5a 94       	dec	r5
    7ee2:	d1 f7       	brne	.-12     	; 0x7ed8 <vfprintf+0x1c4>
    7ee4:	f4 cf       	rjmp	.-24     	; 0x7ece <vfprintf+0x1ba>
    7ee6:	66 20       	and	r6, r6
    7ee8:	21 f0       	breq	.+8      	; 0x7ef2 <vfprintf+0x1de>
    7eea:	b7 01       	movw	r22, r14
    7eec:	86 2d       	mov	r24, r6
    7eee:	90 e0       	ldi	r25, 0x00	; 0
    7ef0:	8c d5       	rcall	.+2840   	; 0x8a0a <fputc>
    7ef2:	03 fd       	sbrc	r16, 3
    7ef4:	03 c0       	rjmp	.+6      	; 0x7efc <vfprintf+0x1e8>
    7ef6:	05 e6       	ldi	r16, 0x65	; 101
    7ef8:	17 e0       	ldi	r17, 0x07	; 7
    7efa:	02 c0       	rjmp	.+4      	; 0x7f00 <vfprintf+0x1ec>
    7efc:	01 e6       	ldi	r16, 0x61	; 97
    7efe:	17 e0       	ldi	r17, 0x07	; 7
    7f00:	f7 2d       	mov	r31, r7
    7f02:	f0 71       	andi	r31, 0x10	; 16
    7f04:	7f 2e       	mov	r7, r31
    7f06:	f8 01       	movw	r30, r16
    7f08:	84 91       	lpm	r24, Z
    7f0a:	88 23       	and	r24, r24
    7f0c:	09 f4       	brne	.+2      	; 0x7f10 <vfprintf+0x1fc>
    7f0e:	5e c2       	rjmp	.+1212   	; 0x83cc <vfprintf+0x6b8>
    7f10:	71 10       	cpse	r7, r1
    7f12:	80 52       	subi	r24, 0x20	; 32
    7f14:	b7 01       	movw	r22, r14
    7f16:	90 e0       	ldi	r25, 0x00	; 0
    7f18:	78 d5       	rcall	.+2800   	; 0x8a0a <fputc>
    7f1a:	0f 5f       	subi	r16, 0xFF	; 255
    7f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    7f1e:	f3 cf       	rjmp	.-26     	; 0x7f06 <vfprintf+0x1f2>
    7f20:	77 fe       	sbrs	r7, 7
    7f22:	0f c0       	rjmp	.+30     	; 0x7f42 <vfprintf+0x22e>
    7f24:	4c 0c       	add	r4, r12
    7f26:	04 ff       	sbrs	r16, 4
    7f28:	04 c0       	rjmp	.+8      	; 0x7f32 <vfprintf+0x21e>
    7f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    7f2c:	81 33       	cpi	r24, 0x31	; 49
    7f2e:	09 f4       	brne	.+2      	; 0x7f32 <vfprintf+0x21e>
    7f30:	4a 94       	dec	r4
    7f32:	14 14       	cp	r1, r4
    7f34:	74 f5       	brge	.+92     	; 0x7f92 <vfprintf+0x27e>
    7f36:	f8 e0       	ldi	r31, 0x08	; 8
    7f38:	f4 15       	cp	r31, r4
    7f3a:	78 f5       	brcc	.+94     	; 0x7f9a <vfprintf+0x286>
    7f3c:	88 e0       	ldi	r24, 0x08	; 8
    7f3e:	48 2e       	mov	r4, r24
    7f40:	2c c0       	rjmp	.+88     	; 0x7f9a <vfprintf+0x286>
    7f42:	76 fc       	sbrc	r7, 6
    7f44:	2a c0       	rjmp	.+84     	; 0x7f9a <vfprintf+0x286>
    7f46:	81 2f       	mov	r24, r17
    7f48:	90 e0       	ldi	r25, 0x00	; 0
    7f4a:	8c 15       	cp	r24, r12
    7f4c:	9d 05       	cpc	r25, r13
    7f4e:	9c f0       	brlt	.+38     	; 0x7f76 <vfprintf+0x262>
    7f50:	6c ef       	ldi	r22, 0xFC	; 252
    7f52:	c6 16       	cp	r12, r22
    7f54:	6f ef       	ldi	r22, 0xFF	; 255
    7f56:	d6 06       	cpc	r13, r22
    7f58:	74 f0       	brlt	.+28     	; 0x7f76 <vfprintf+0x262>
    7f5a:	77 2d       	mov	r23, r7
    7f5c:	70 68       	ori	r23, 0x80	; 128
    7f5e:	77 2e       	mov	r7, r23
    7f60:	0a c0       	rjmp	.+20     	; 0x7f76 <vfprintf+0x262>
    7f62:	e2 e0       	ldi	r30, 0x02	; 2
    7f64:	f0 e0       	ldi	r31, 0x00	; 0
    7f66:	ec 0f       	add	r30, r28
    7f68:	fd 1f       	adc	r31, r29
    7f6a:	e1 0f       	add	r30, r17
    7f6c:	f1 1d       	adc	r31, r1
    7f6e:	80 81       	ld	r24, Z
    7f70:	80 33       	cpi	r24, 0x30	; 48
    7f72:	19 f4       	brne	.+6      	; 0x7f7a <vfprintf+0x266>
    7f74:	11 50       	subi	r17, 0x01	; 1
    7f76:	11 11       	cpse	r17, r1
    7f78:	f4 cf       	rjmp	.-24     	; 0x7f62 <vfprintf+0x24e>
    7f7a:	77 fe       	sbrs	r7, 7
    7f7c:	0e c0       	rjmp	.+28     	; 0x7f9a <vfprintf+0x286>
    7f7e:	44 24       	eor	r4, r4
    7f80:	43 94       	inc	r4
    7f82:	41 0e       	add	r4, r17
    7f84:	81 2f       	mov	r24, r17
    7f86:	90 e0       	ldi	r25, 0x00	; 0
    7f88:	c8 16       	cp	r12, r24
    7f8a:	d9 06       	cpc	r13, r25
    7f8c:	2c f4       	brge	.+10     	; 0x7f98 <vfprintf+0x284>
    7f8e:	1c 19       	sub	r17, r12
    7f90:	04 c0       	rjmp	.+8      	; 0x7f9a <vfprintf+0x286>
    7f92:	44 24       	eor	r4, r4
    7f94:	43 94       	inc	r4
    7f96:	01 c0       	rjmp	.+2      	; 0x7f9a <vfprintf+0x286>
    7f98:	10 e0       	ldi	r17, 0x00	; 0
    7f9a:	77 fe       	sbrs	r7, 7
    7f9c:	07 c0       	rjmp	.+14     	; 0x7fac <vfprintf+0x298>
    7f9e:	1c 14       	cp	r1, r12
    7fa0:	1d 04       	cpc	r1, r13
    7fa2:	3c f4       	brge	.+14     	; 0x7fb2 <vfprintf+0x29e>
    7fa4:	96 01       	movw	r18, r12
    7fa6:	2f 5f       	subi	r18, 0xFF	; 255
    7fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    7faa:	05 c0       	rjmp	.+10     	; 0x7fb6 <vfprintf+0x2a2>
    7fac:	25 e0       	ldi	r18, 0x05	; 5
    7fae:	30 e0       	ldi	r19, 0x00	; 0
    7fb0:	02 c0       	rjmp	.+4      	; 0x7fb6 <vfprintf+0x2a2>
    7fb2:	21 e0       	ldi	r18, 0x01	; 1
    7fb4:	30 e0       	ldi	r19, 0x00	; 0
    7fb6:	66 20       	and	r6, r6
    7fb8:	11 f0       	breq	.+4      	; 0x7fbe <vfprintf+0x2aa>
    7fba:	2f 5f       	subi	r18, 0xFF	; 255
    7fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    7fbe:	11 23       	and	r17, r17
    7fc0:	31 f0       	breq	.+12     	; 0x7fce <vfprintf+0x2ba>
    7fc2:	41 2f       	mov	r20, r17
    7fc4:	50 e0       	ldi	r21, 0x00	; 0
    7fc6:	4f 5f       	subi	r20, 0xFF	; 255
    7fc8:	5f 4f       	sbci	r21, 0xFF	; 255
    7fca:	24 0f       	add	r18, r20
    7fcc:	35 1f       	adc	r19, r21
    7fce:	45 2d       	mov	r20, r5
    7fd0:	50 e0       	ldi	r21, 0x00	; 0
    7fd2:	24 17       	cp	r18, r20
    7fd4:	35 07       	cpc	r19, r21
    7fd6:	14 f4       	brge	.+4      	; 0x7fdc <vfprintf+0x2c8>
    7fd8:	52 1a       	sub	r5, r18
    7fda:	01 c0       	rjmp	.+2      	; 0x7fde <vfprintf+0x2ca>
    7fdc:	51 2c       	mov	r5, r1
    7fde:	87 2d       	mov	r24, r7
    7fe0:	89 70       	andi	r24, 0x09	; 9
    7fe2:	41 f4       	brne	.+16     	; 0x7ff4 <vfprintf+0x2e0>
    7fe4:	55 20       	and	r5, r5
    7fe6:	31 f0       	breq	.+12     	; 0x7ff4 <vfprintf+0x2e0>
    7fe8:	b7 01       	movw	r22, r14
    7fea:	80 e2       	ldi	r24, 0x20	; 32
    7fec:	90 e0       	ldi	r25, 0x00	; 0
    7fee:	0d d5       	rcall	.+2586   	; 0x8a0a <fputc>
    7ff0:	5a 94       	dec	r5
    7ff2:	f8 cf       	rjmp	.-16     	; 0x7fe4 <vfprintf+0x2d0>
    7ff4:	66 20       	and	r6, r6
    7ff6:	21 f0       	breq	.+8      	; 0x8000 <vfprintf+0x2ec>
    7ff8:	b7 01       	movw	r22, r14
    7ffa:	86 2d       	mov	r24, r6
    7ffc:	90 e0       	ldi	r25, 0x00	; 0
    7ffe:	05 d5       	rcall	.+2570   	; 0x8a0a <fputc>
    8000:	73 fc       	sbrc	r7, 3
    8002:	08 c0       	rjmp	.+16     	; 0x8014 <vfprintf+0x300>
    8004:	55 20       	and	r5, r5
    8006:	31 f0       	breq	.+12     	; 0x8014 <vfprintf+0x300>
    8008:	b7 01       	movw	r22, r14
    800a:	80 e3       	ldi	r24, 0x30	; 48
    800c:	90 e0       	ldi	r25, 0x00	; 0
    800e:	fd d4       	rcall	.+2554   	; 0x8a0a <fputc>
    8010:	5a 94       	dec	r5
    8012:	f8 cf       	rjmp	.-16     	; 0x8004 <vfprintf+0x2f0>
    8014:	77 fe       	sbrs	r7, 7
    8016:	5d c0       	rjmp	.+186    	; 0x80d2 <vfprintf+0x3be>
    8018:	9c 2d       	mov	r25, r12
    801a:	8d 2d       	mov	r24, r13
    801c:	d7 fe       	sbrs	r13, 7
    801e:	02 c0       	rjmp	.+4      	; 0x8024 <vfprintf+0x310>
    8020:	90 e0       	ldi	r25, 0x00	; 0
    8022:	80 e0       	ldi	r24, 0x00	; 0
    8024:	69 2e       	mov	r6, r25
    8026:	78 2e       	mov	r7, r24
    8028:	40 e0       	ldi	r20, 0x00	; 0
    802a:	50 e0       	ldi	r21, 0x00	; 0
    802c:	c6 01       	movw	r24, r12
    802e:	84 19       	sub	r24, r4
    8030:	91 09       	sbc	r25, r1
    8032:	8c 87       	std	Y+12, r24	; 0x0c
    8034:	9d 87       	std	Y+13, r25	; 0x0d
    8036:	96 01       	movw	r18, r12
    8038:	26 19       	sub	r18, r6
    803a:	37 09       	sbc	r19, r7
    803c:	28 0d       	add	r18, r8
    803e:	39 1d       	adc	r19, r9
    8040:	81 2f       	mov	r24, r17
    8042:	90 e0       	ldi	r25, 0x00	; 0
    8044:	ee 27       	eor	r30, r30
    8046:	ff 27       	eor	r31, r31
    8048:	e8 1b       	sub	r30, r24
    804a:	f9 0b       	sbc	r31, r25
    804c:	ee 87       	std	Y+14, r30	; 0x0e
    804e:	ff 87       	std	Y+15, r31	; 0x0f
    8050:	ff ef       	ldi	r31, 0xFF	; 255
    8052:	6f 16       	cp	r6, r31
    8054:	7f 06       	cpc	r7, r31
    8056:	61 f4       	brne	.+24     	; 0x8070 <vfprintf+0x35c>
    8058:	b7 01       	movw	r22, r14
    805a:	8e e2       	ldi	r24, 0x2E	; 46
    805c:	90 e0       	ldi	r25, 0x00	; 0
    805e:	2b 8b       	std	Y+19, r18	; 0x13
    8060:	3a 8b       	std	Y+18, r19	; 0x12
    8062:	48 8b       	std	Y+16, r20	; 0x10
    8064:	59 8b       	std	Y+17, r21	; 0x11
    8066:	d1 d4       	rcall	.+2466   	; 0x8a0a <fputc>
    8068:	59 89       	ldd	r21, Y+17	; 0x11
    806a:	48 89       	ldd	r20, Y+16	; 0x10
    806c:	3a 89       	ldd	r19, Y+18	; 0x12
    806e:	2b 89       	ldd	r18, Y+19	; 0x13
    8070:	c6 14       	cp	r12, r6
    8072:	d7 04       	cpc	r13, r7
    8074:	54 f0       	brlt	.+20     	; 0x808a <vfprintf+0x376>
    8076:	6c 85       	ldd	r22, Y+12	; 0x0c
    8078:	7d 85       	ldd	r23, Y+13	; 0x0d
    807a:	66 15       	cp	r22, r6
    807c:	77 05       	cpc	r23, r7
    807e:	2c f4       	brge	.+10     	; 0x808a <vfprintf+0x376>
    8080:	f9 01       	movw	r30, r18
    8082:	e4 0f       	add	r30, r20
    8084:	f5 1f       	adc	r31, r21
    8086:	81 81       	ldd	r24, Z+1	; 0x01
    8088:	01 c0       	rjmp	.+2      	; 0x808c <vfprintf+0x378>
    808a:	80 e3       	ldi	r24, 0x30	; 48
    808c:	71 e0       	ldi	r23, 0x01	; 1
    808e:	67 1a       	sub	r6, r23
    8090:	71 08       	sbc	r7, r1
    8092:	4f 5f       	subi	r20, 0xFF	; 255
    8094:	5f 4f       	sbci	r21, 0xFF	; 255
    8096:	ee 85       	ldd	r30, Y+14	; 0x0e
    8098:	ff 85       	ldd	r31, Y+15	; 0x0f
    809a:	6e 16       	cp	r6, r30
    809c:	7f 06       	cpc	r7, r31
    809e:	64 f0       	brlt	.+24     	; 0x80b8 <vfprintf+0x3a4>
    80a0:	b7 01       	movw	r22, r14
    80a2:	90 e0       	ldi	r25, 0x00	; 0
    80a4:	2b 8b       	std	Y+19, r18	; 0x13
    80a6:	3a 8b       	std	Y+18, r19	; 0x12
    80a8:	48 8b       	std	Y+16, r20	; 0x10
    80aa:	59 8b       	std	Y+17, r21	; 0x11
    80ac:	ae d4       	rcall	.+2396   	; 0x8a0a <fputc>
    80ae:	2b 89       	ldd	r18, Y+19	; 0x13
    80b0:	3a 89       	ldd	r19, Y+18	; 0x12
    80b2:	48 89       	ldd	r20, Y+16	; 0x10
    80b4:	59 89       	ldd	r21, Y+17	; 0x11
    80b6:	cc cf       	rjmp	.-104    	; 0x8050 <vfprintf+0x33c>
    80b8:	6c 14       	cp	r6, r12
    80ba:	7d 04       	cpc	r7, r13
    80bc:	39 f4       	brne	.+14     	; 0x80cc <vfprintf+0x3b8>
    80be:	9a 81       	ldd	r25, Y+2	; 0x02
    80c0:	96 33       	cpi	r25, 0x36	; 54
    80c2:	18 f4       	brcc	.+6      	; 0x80ca <vfprintf+0x3b6>
    80c4:	95 33       	cpi	r25, 0x35	; 53
    80c6:	11 f4       	brne	.+4      	; 0x80cc <vfprintf+0x3b8>
    80c8:	04 ff       	sbrs	r16, 4
    80ca:	81 e3       	ldi	r24, 0x31	; 49
    80cc:	b7 01       	movw	r22, r14
    80ce:	90 e0       	ldi	r25, 0x00	; 0
    80d0:	45 c0       	rjmp	.+138    	; 0x815c <vfprintf+0x448>
    80d2:	8a 81       	ldd	r24, Y+2	; 0x02
    80d4:	81 33       	cpi	r24, 0x31	; 49
    80d6:	09 f0       	breq	.+2      	; 0x80da <vfprintf+0x3c6>
    80d8:	0f 7e       	andi	r16, 0xEF	; 239
    80da:	b7 01       	movw	r22, r14
    80dc:	90 e0       	ldi	r25, 0x00	; 0
    80de:	95 d4       	rcall	.+2346   	; 0x8a0a <fputc>
    80e0:	11 11       	cpse	r17, r1
    80e2:	05 c0       	rjmp	.+10     	; 0x80ee <vfprintf+0x3da>
    80e4:	74 fe       	sbrs	r7, 4
    80e6:	16 c0       	rjmp	.+44     	; 0x8114 <vfprintf+0x400>
    80e8:	85 e4       	ldi	r24, 0x45	; 69
    80ea:	90 e0       	ldi	r25, 0x00	; 0
    80ec:	15 c0       	rjmp	.+42     	; 0x8118 <vfprintf+0x404>
    80ee:	b7 01       	movw	r22, r14
    80f0:	8e e2       	ldi	r24, 0x2E	; 46
    80f2:	90 e0       	ldi	r25, 0x00	; 0
    80f4:	8a d4       	rcall	.+2324   	; 0x8a0a <fputc>
    80f6:	82 e0       	ldi	r24, 0x02	; 2
    80f8:	66 24       	eor	r6, r6
    80fa:	63 94       	inc	r6
    80fc:	68 0e       	add	r6, r24
    80fe:	f4 01       	movw	r30, r8
    8100:	e8 0f       	add	r30, r24
    8102:	f1 1d       	adc	r31, r1
    8104:	80 81       	ld	r24, Z
    8106:	b7 01       	movw	r22, r14
    8108:	90 e0       	ldi	r25, 0x00	; 0
    810a:	7f d4       	rcall	.+2302   	; 0x8a0a <fputc>
    810c:	11 50       	subi	r17, 0x01	; 1
    810e:	51 f3       	breq	.-44     	; 0x80e4 <vfprintf+0x3d0>
    8110:	86 2d       	mov	r24, r6
    8112:	f2 cf       	rjmp	.-28     	; 0x80f8 <vfprintf+0x3e4>
    8114:	85 e6       	ldi	r24, 0x65	; 101
    8116:	90 e0       	ldi	r25, 0x00	; 0
    8118:	b7 01       	movw	r22, r14
    811a:	77 d4       	rcall	.+2286   	; 0x8a0a <fputc>
    811c:	d7 fc       	sbrc	r13, 7
    811e:	05 c0       	rjmp	.+10     	; 0x812a <vfprintf+0x416>
    8120:	c1 14       	cp	r12, r1
    8122:	d1 04       	cpc	r13, r1
    8124:	39 f4       	brne	.+14     	; 0x8134 <vfprintf+0x420>
    8126:	04 ff       	sbrs	r16, 4
    8128:	05 c0       	rjmp	.+10     	; 0x8134 <vfprintf+0x420>
    812a:	d1 94       	neg	r13
    812c:	c1 94       	neg	r12
    812e:	d1 08       	sbc	r13, r1
    8130:	8d e2       	ldi	r24, 0x2D	; 45
    8132:	01 c0       	rjmp	.+2      	; 0x8136 <vfprintf+0x422>
    8134:	8b e2       	ldi	r24, 0x2B	; 43
    8136:	b7 01       	movw	r22, r14
    8138:	90 e0       	ldi	r25, 0x00	; 0
    813a:	67 d4       	rcall	.+2254   	; 0x8a0a <fputc>
    813c:	80 e3       	ldi	r24, 0x30	; 48
    813e:	6a e0       	ldi	r22, 0x0A	; 10
    8140:	c6 16       	cp	r12, r22
    8142:	d1 04       	cpc	r13, r1
    8144:	2c f0       	brlt	.+10     	; 0x8150 <vfprintf+0x43c>
    8146:	8f 5f       	subi	r24, 0xFF	; 255
    8148:	fa e0       	ldi	r31, 0x0A	; 10
    814a:	cf 1a       	sub	r12, r31
    814c:	d1 08       	sbc	r13, r1
    814e:	f7 cf       	rjmp	.-18     	; 0x813e <vfprintf+0x42a>
    8150:	b7 01       	movw	r22, r14
    8152:	90 e0       	ldi	r25, 0x00	; 0
    8154:	5a d4       	rcall	.+2228   	; 0x8a0a <fputc>
    8156:	b7 01       	movw	r22, r14
    8158:	c6 01       	movw	r24, r12
    815a:	c0 96       	adiw	r24, 0x30	; 48
    815c:	56 d4       	rcall	.+2220   	; 0x8a0a <fputc>
    815e:	36 c1       	rjmp	.+620    	; 0x83cc <vfprintf+0x6b8>
    8160:	83 36       	cpi	r24, 0x63	; 99
    8162:	31 f0       	breq	.+12     	; 0x8170 <vfprintf+0x45c>
    8164:	83 37       	cpi	r24, 0x73	; 115
    8166:	79 f0       	breq	.+30     	; 0x8186 <vfprintf+0x472>
    8168:	83 35       	cpi	r24, 0x53	; 83
    816a:	09 f0       	breq	.+2      	; 0x816e <vfprintf+0x45a>
    816c:	54 c0       	rjmp	.+168    	; 0x8216 <vfprintf+0x502>
    816e:	20 c0       	rjmp	.+64     	; 0x81b0 <vfprintf+0x49c>
    8170:	56 01       	movw	r10, r12
    8172:	72 e0       	ldi	r23, 0x02	; 2
    8174:	a7 0e       	add	r10, r23
    8176:	b1 1c       	adc	r11, r1
    8178:	f6 01       	movw	r30, r12
    817a:	80 81       	ld	r24, Z
    817c:	89 83       	std	Y+1, r24	; 0x01
    817e:	01 e0       	ldi	r16, 0x01	; 1
    8180:	10 e0       	ldi	r17, 0x00	; 0
    8182:	64 01       	movw	r12, r8
    8184:	13 c0       	rjmp	.+38     	; 0x81ac <vfprintf+0x498>
    8186:	56 01       	movw	r10, r12
    8188:	f2 e0       	ldi	r31, 0x02	; 2
    818a:	af 0e       	add	r10, r31
    818c:	b1 1c       	adc	r11, r1
    818e:	f6 01       	movw	r30, r12
    8190:	c0 80       	ld	r12, Z
    8192:	d1 80       	ldd	r13, Z+1	; 0x01
    8194:	26 ff       	sbrs	r18, 6
    8196:	03 c0       	rjmp	.+6      	; 0x819e <vfprintf+0x48a>
    8198:	61 2f       	mov	r22, r17
    819a:	70 e0       	ldi	r23, 0x00	; 0
    819c:	02 c0       	rjmp	.+4      	; 0x81a2 <vfprintf+0x48e>
    819e:	6f ef       	ldi	r22, 0xFF	; 255
    81a0:	7f ef       	ldi	r23, 0xFF	; 255
    81a2:	c6 01       	movw	r24, r12
    81a4:	2b 8b       	std	Y+19, r18	; 0x13
    81a6:	e5 d3       	rcall	.+1994   	; 0x8972 <strnlen>
    81a8:	8c 01       	movw	r16, r24
    81aa:	2b 89       	ldd	r18, Y+19	; 0x13
    81ac:	2f 77       	andi	r18, 0x7F	; 127
    81ae:	14 c0       	rjmp	.+40     	; 0x81d8 <vfprintf+0x4c4>
    81b0:	56 01       	movw	r10, r12
    81b2:	f2 e0       	ldi	r31, 0x02	; 2
    81b4:	af 0e       	add	r10, r31
    81b6:	b1 1c       	adc	r11, r1
    81b8:	f6 01       	movw	r30, r12
    81ba:	c0 80       	ld	r12, Z
    81bc:	d1 80       	ldd	r13, Z+1	; 0x01
    81be:	26 ff       	sbrs	r18, 6
    81c0:	03 c0       	rjmp	.+6      	; 0x81c8 <vfprintf+0x4b4>
    81c2:	61 2f       	mov	r22, r17
    81c4:	70 e0       	ldi	r23, 0x00	; 0
    81c6:	02 c0       	rjmp	.+4      	; 0x81cc <vfprintf+0x4b8>
    81c8:	6f ef       	ldi	r22, 0xFF	; 255
    81ca:	7f ef       	ldi	r23, 0xFF	; 255
    81cc:	c6 01       	movw	r24, r12
    81ce:	2b 8b       	std	Y+19, r18	; 0x13
    81d0:	7f d3       	rcall	.+1790   	; 0x88d0 <strnlen_P>
    81d2:	8c 01       	movw	r16, r24
    81d4:	2b 89       	ldd	r18, Y+19	; 0x13
    81d6:	20 68       	ori	r18, 0x80	; 128
    81d8:	72 2e       	mov	r7, r18
    81da:	23 fd       	sbrc	r18, 3
    81dc:	18 c0       	rjmp	.+48     	; 0x820e <vfprintf+0x4fa>
    81de:	85 2d       	mov	r24, r5
    81e0:	90 e0       	ldi	r25, 0x00	; 0
    81e2:	08 17       	cp	r16, r24
    81e4:	19 07       	cpc	r17, r25
    81e6:	98 f4       	brcc	.+38     	; 0x820e <vfprintf+0x4fa>
    81e8:	b7 01       	movw	r22, r14
    81ea:	80 e2       	ldi	r24, 0x20	; 32
    81ec:	90 e0       	ldi	r25, 0x00	; 0
    81ee:	0d d4       	rcall	.+2074   	; 0x8a0a <fputc>
    81f0:	5a 94       	dec	r5
    81f2:	f5 cf       	rjmp	.-22     	; 0x81de <vfprintf+0x4ca>
    81f4:	f6 01       	movw	r30, r12
    81f6:	77 fc       	sbrc	r7, 7
    81f8:	85 91       	lpm	r24, Z+
    81fa:	77 fe       	sbrs	r7, 7
    81fc:	81 91       	ld	r24, Z+
    81fe:	6f 01       	movw	r12, r30
    8200:	b7 01       	movw	r22, r14
    8202:	90 e0       	ldi	r25, 0x00	; 0
    8204:	02 d4       	rcall	.+2052   	; 0x8a0a <fputc>
    8206:	51 10       	cpse	r5, r1
    8208:	5a 94       	dec	r5
    820a:	01 50       	subi	r16, 0x01	; 1
    820c:	11 09       	sbc	r17, r1
    820e:	01 15       	cp	r16, r1
    8210:	11 05       	cpc	r17, r1
    8212:	81 f7       	brne	.-32     	; 0x81f4 <vfprintf+0x4e0>
    8214:	db c0       	rjmp	.+438    	; 0x83cc <vfprintf+0x6b8>
    8216:	84 36       	cpi	r24, 0x64	; 100
    8218:	11 f0       	breq	.+4      	; 0x821e <vfprintf+0x50a>
    821a:	89 36       	cpi	r24, 0x69	; 105
    821c:	49 f5       	brne	.+82     	; 0x8270 <vfprintf+0x55c>
    821e:	56 01       	movw	r10, r12
    8220:	27 ff       	sbrs	r18, 7
    8222:	09 c0       	rjmp	.+18     	; 0x8236 <vfprintf+0x522>
    8224:	f4 e0       	ldi	r31, 0x04	; 4
    8226:	af 0e       	add	r10, r31
    8228:	b1 1c       	adc	r11, r1
    822a:	f6 01       	movw	r30, r12
    822c:	60 81       	ld	r22, Z
    822e:	71 81       	ldd	r23, Z+1	; 0x01
    8230:	82 81       	ldd	r24, Z+2	; 0x02
    8232:	93 81       	ldd	r25, Z+3	; 0x03
    8234:	0a c0       	rjmp	.+20     	; 0x824a <vfprintf+0x536>
    8236:	f2 e0       	ldi	r31, 0x02	; 2
    8238:	af 0e       	add	r10, r31
    823a:	b1 1c       	adc	r11, r1
    823c:	f6 01       	movw	r30, r12
    823e:	60 81       	ld	r22, Z
    8240:	71 81       	ldd	r23, Z+1	; 0x01
    8242:	88 27       	eor	r24, r24
    8244:	77 fd       	sbrc	r23, 7
    8246:	80 95       	com	r24
    8248:	98 2f       	mov	r25, r24
    824a:	02 2f       	mov	r16, r18
    824c:	0f 76       	andi	r16, 0x6F	; 111
    824e:	97 ff       	sbrs	r25, 7
    8250:	08 c0       	rjmp	.+16     	; 0x8262 <vfprintf+0x54e>
    8252:	90 95       	com	r25
    8254:	80 95       	com	r24
    8256:	70 95       	com	r23
    8258:	61 95       	neg	r22
    825a:	7f 4f       	sbci	r23, 0xFF	; 255
    825c:	8f 4f       	sbci	r24, 0xFF	; 255
    825e:	9f 4f       	sbci	r25, 0xFF	; 255
    8260:	00 68       	ori	r16, 0x80	; 128
    8262:	2a e0       	ldi	r18, 0x0A	; 10
    8264:	30 e0       	ldi	r19, 0x00	; 0
    8266:	a4 01       	movw	r20, r8
    8268:	40 d4       	rcall	.+2176   	; 0x8aea <__ultoa_invert>
    826a:	c8 2e       	mov	r12, r24
    826c:	c8 18       	sub	r12, r8
    826e:	3d c0       	rjmp	.+122    	; 0x82ea <vfprintf+0x5d6>
    8270:	02 2f       	mov	r16, r18
    8272:	85 37       	cpi	r24, 0x75	; 117
    8274:	21 f4       	brne	.+8      	; 0x827e <vfprintf+0x56a>
    8276:	0f 7e       	andi	r16, 0xEF	; 239
    8278:	2a e0       	ldi	r18, 0x0A	; 10
    827a:	30 e0       	ldi	r19, 0x00	; 0
    827c:	1d c0       	rjmp	.+58     	; 0x82b8 <vfprintf+0x5a4>
    827e:	09 7f       	andi	r16, 0xF9	; 249
    8280:	8f 36       	cpi	r24, 0x6F	; 111
    8282:	91 f0       	breq	.+36     	; 0x82a8 <vfprintf+0x594>
    8284:	18 f4       	brcc	.+6      	; 0x828c <vfprintf+0x578>
    8286:	88 35       	cpi	r24, 0x58	; 88
    8288:	59 f0       	breq	.+22     	; 0x82a0 <vfprintf+0x58c>
    828a:	a9 c0       	rjmp	.+338    	; 0x83de <vfprintf+0x6ca>
    828c:	80 37       	cpi	r24, 0x70	; 112
    828e:	19 f0       	breq	.+6      	; 0x8296 <vfprintf+0x582>
    8290:	88 37       	cpi	r24, 0x78	; 120
    8292:	11 f0       	breq	.+4      	; 0x8298 <vfprintf+0x584>
    8294:	a4 c0       	rjmp	.+328    	; 0x83de <vfprintf+0x6ca>
    8296:	00 61       	ori	r16, 0x10	; 16
    8298:	04 ff       	sbrs	r16, 4
    829a:	09 c0       	rjmp	.+18     	; 0x82ae <vfprintf+0x59a>
    829c:	04 60       	ori	r16, 0x04	; 4
    829e:	07 c0       	rjmp	.+14     	; 0x82ae <vfprintf+0x59a>
    82a0:	24 ff       	sbrs	r18, 4
    82a2:	08 c0       	rjmp	.+16     	; 0x82b4 <vfprintf+0x5a0>
    82a4:	06 60       	ori	r16, 0x06	; 6
    82a6:	06 c0       	rjmp	.+12     	; 0x82b4 <vfprintf+0x5a0>
    82a8:	28 e0       	ldi	r18, 0x08	; 8
    82aa:	30 e0       	ldi	r19, 0x00	; 0
    82ac:	05 c0       	rjmp	.+10     	; 0x82b8 <vfprintf+0x5a4>
    82ae:	20 e1       	ldi	r18, 0x10	; 16
    82b0:	30 e0       	ldi	r19, 0x00	; 0
    82b2:	02 c0       	rjmp	.+4      	; 0x82b8 <vfprintf+0x5a4>
    82b4:	20 e1       	ldi	r18, 0x10	; 16
    82b6:	32 e0       	ldi	r19, 0x02	; 2
    82b8:	56 01       	movw	r10, r12
    82ba:	07 ff       	sbrs	r16, 7
    82bc:	09 c0       	rjmp	.+18     	; 0x82d0 <vfprintf+0x5bc>
    82be:	f4 e0       	ldi	r31, 0x04	; 4
    82c0:	af 0e       	add	r10, r31
    82c2:	b1 1c       	adc	r11, r1
    82c4:	f6 01       	movw	r30, r12
    82c6:	60 81       	ld	r22, Z
    82c8:	71 81       	ldd	r23, Z+1	; 0x01
    82ca:	82 81       	ldd	r24, Z+2	; 0x02
    82cc:	93 81       	ldd	r25, Z+3	; 0x03
    82ce:	08 c0       	rjmp	.+16     	; 0x82e0 <vfprintf+0x5cc>
    82d0:	f2 e0       	ldi	r31, 0x02	; 2
    82d2:	af 0e       	add	r10, r31
    82d4:	b1 1c       	adc	r11, r1
    82d6:	f6 01       	movw	r30, r12
    82d8:	60 81       	ld	r22, Z
    82da:	71 81       	ldd	r23, Z+1	; 0x01
    82dc:	80 e0       	ldi	r24, 0x00	; 0
    82de:	90 e0       	ldi	r25, 0x00	; 0
    82e0:	a4 01       	movw	r20, r8
    82e2:	03 d4       	rcall	.+2054   	; 0x8aea <__ultoa_invert>
    82e4:	c8 2e       	mov	r12, r24
    82e6:	c8 18       	sub	r12, r8
    82e8:	0f 77       	andi	r16, 0x7F	; 127
    82ea:	06 ff       	sbrs	r16, 6
    82ec:	0b c0       	rjmp	.+22     	; 0x8304 <vfprintf+0x5f0>
    82ee:	20 2f       	mov	r18, r16
    82f0:	2e 7f       	andi	r18, 0xFE	; 254
    82f2:	c1 16       	cp	r12, r17
    82f4:	50 f4       	brcc	.+20     	; 0x830a <vfprintf+0x5f6>
    82f6:	04 ff       	sbrs	r16, 4
    82f8:	0a c0       	rjmp	.+20     	; 0x830e <vfprintf+0x5fa>
    82fa:	02 fd       	sbrc	r16, 2
    82fc:	08 c0       	rjmp	.+16     	; 0x830e <vfprintf+0x5fa>
    82fe:	20 2f       	mov	r18, r16
    8300:	2e 7e       	andi	r18, 0xEE	; 238
    8302:	05 c0       	rjmp	.+10     	; 0x830e <vfprintf+0x5fa>
    8304:	dc 2c       	mov	r13, r12
    8306:	20 2f       	mov	r18, r16
    8308:	03 c0       	rjmp	.+6      	; 0x8310 <vfprintf+0x5fc>
    830a:	dc 2c       	mov	r13, r12
    830c:	01 c0       	rjmp	.+2      	; 0x8310 <vfprintf+0x5fc>
    830e:	d1 2e       	mov	r13, r17
    8310:	24 ff       	sbrs	r18, 4
    8312:	0d c0       	rjmp	.+26     	; 0x832e <vfprintf+0x61a>
    8314:	fe 01       	movw	r30, r28
    8316:	ec 0d       	add	r30, r12
    8318:	f1 1d       	adc	r31, r1
    831a:	80 81       	ld	r24, Z
    831c:	80 33       	cpi	r24, 0x30	; 48
    831e:	11 f4       	brne	.+4      	; 0x8324 <vfprintf+0x610>
    8320:	29 7e       	andi	r18, 0xE9	; 233
    8322:	09 c0       	rjmp	.+18     	; 0x8336 <vfprintf+0x622>
    8324:	22 ff       	sbrs	r18, 2
    8326:	06 c0       	rjmp	.+12     	; 0x8334 <vfprintf+0x620>
    8328:	d3 94       	inc	r13
    832a:	d3 94       	inc	r13
    832c:	04 c0       	rjmp	.+8      	; 0x8336 <vfprintf+0x622>
    832e:	82 2f       	mov	r24, r18
    8330:	86 78       	andi	r24, 0x86	; 134
    8332:	09 f0       	breq	.+2      	; 0x8336 <vfprintf+0x622>
    8334:	d3 94       	inc	r13
    8336:	23 fd       	sbrc	r18, 3
    8338:	12 c0       	rjmp	.+36     	; 0x835e <vfprintf+0x64a>
    833a:	20 ff       	sbrs	r18, 0
    833c:	06 c0       	rjmp	.+12     	; 0x834a <vfprintf+0x636>
    833e:	1c 2d       	mov	r17, r12
    8340:	d5 14       	cp	r13, r5
    8342:	18 f4       	brcc	.+6      	; 0x834a <vfprintf+0x636>
    8344:	15 0d       	add	r17, r5
    8346:	1d 19       	sub	r17, r13
    8348:	d5 2c       	mov	r13, r5
    834a:	d5 14       	cp	r13, r5
    834c:	60 f4       	brcc	.+24     	; 0x8366 <vfprintf+0x652>
    834e:	b7 01       	movw	r22, r14
    8350:	80 e2       	ldi	r24, 0x20	; 32
    8352:	90 e0       	ldi	r25, 0x00	; 0
    8354:	2b 8b       	std	Y+19, r18	; 0x13
    8356:	59 d3       	rcall	.+1714   	; 0x8a0a <fputc>
    8358:	d3 94       	inc	r13
    835a:	2b 89       	ldd	r18, Y+19	; 0x13
    835c:	f6 cf       	rjmp	.-20     	; 0x834a <vfprintf+0x636>
    835e:	d5 14       	cp	r13, r5
    8360:	10 f4       	brcc	.+4      	; 0x8366 <vfprintf+0x652>
    8362:	5d 18       	sub	r5, r13
    8364:	01 c0       	rjmp	.+2      	; 0x8368 <vfprintf+0x654>
    8366:	51 2c       	mov	r5, r1
    8368:	24 ff       	sbrs	r18, 4
    836a:	11 c0       	rjmp	.+34     	; 0x838e <vfprintf+0x67a>
    836c:	b7 01       	movw	r22, r14
    836e:	80 e3       	ldi	r24, 0x30	; 48
    8370:	90 e0       	ldi	r25, 0x00	; 0
    8372:	2b 8b       	std	Y+19, r18	; 0x13
    8374:	4a d3       	rcall	.+1684   	; 0x8a0a <fputc>
    8376:	2b 89       	ldd	r18, Y+19	; 0x13
    8378:	22 ff       	sbrs	r18, 2
    837a:	16 c0       	rjmp	.+44     	; 0x83a8 <vfprintf+0x694>
    837c:	21 ff       	sbrs	r18, 1
    837e:	03 c0       	rjmp	.+6      	; 0x8386 <vfprintf+0x672>
    8380:	88 e5       	ldi	r24, 0x58	; 88
    8382:	90 e0       	ldi	r25, 0x00	; 0
    8384:	02 c0       	rjmp	.+4      	; 0x838a <vfprintf+0x676>
    8386:	88 e7       	ldi	r24, 0x78	; 120
    8388:	90 e0       	ldi	r25, 0x00	; 0
    838a:	b7 01       	movw	r22, r14
    838c:	0c c0       	rjmp	.+24     	; 0x83a6 <vfprintf+0x692>
    838e:	82 2f       	mov	r24, r18
    8390:	86 78       	andi	r24, 0x86	; 134
    8392:	51 f0       	breq	.+20     	; 0x83a8 <vfprintf+0x694>
    8394:	21 fd       	sbrc	r18, 1
    8396:	02 c0       	rjmp	.+4      	; 0x839c <vfprintf+0x688>
    8398:	80 e2       	ldi	r24, 0x20	; 32
    839a:	01 c0       	rjmp	.+2      	; 0x839e <vfprintf+0x68a>
    839c:	8b e2       	ldi	r24, 0x2B	; 43
    839e:	27 fd       	sbrc	r18, 7
    83a0:	8d e2       	ldi	r24, 0x2D	; 45
    83a2:	b7 01       	movw	r22, r14
    83a4:	90 e0       	ldi	r25, 0x00	; 0
    83a6:	31 d3       	rcall	.+1634   	; 0x8a0a <fputc>
    83a8:	c1 16       	cp	r12, r17
    83aa:	30 f4       	brcc	.+12     	; 0x83b8 <vfprintf+0x6a4>
    83ac:	b7 01       	movw	r22, r14
    83ae:	80 e3       	ldi	r24, 0x30	; 48
    83b0:	90 e0       	ldi	r25, 0x00	; 0
    83b2:	2b d3       	rcall	.+1622   	; 0x8a0a <fputc>
    83b4:	11 50       	subi	r17, 0x01	; 1
    83b6:	f8 cf       	rjmp	.-16     	; 0x83a8 <vfprintf+0x694>
    83b8:	ca 94       	dec	r12
    83ba:	f4 01       	movw	r30, r8
    83bc:	ec 0d       	add	r30, r12
    83be:	f1 1d       	adc	r31, r1
    83c0:	80 81       	ld	r24, Z
    83c2:	b7 01       	movw	r22, r14
    83c4:	90 e0       	ldi	r25, 0x00	; 0
    83c6:	21 d3       	rcall	.+1602   	; 0x8a0a <fputc>
    83c8:	c1 10       	cpse	r12, r1
    83ca:	f6 cf       	rjmp	.-20     	; 0x83b8 <vfprintf+0x6a4>
    83cc:	55 20       	and	r5, r5
    83ce:	09 f4       	brne	.+2      	; 0x83d2 <vfprintf+0x6be>
    83d0:	dd cc       	rjmp	.-1606   	; 0x7d8c <vfprintf+0x78>
    83d2:	b7 01       	movw	r22, r14
    83d4:	80 e2       	ldi	r24, 0x20	; 32
    83d6:	90 e0       	ldi	r25, 0x00	; 0
    83d8:	18 d3       	rcall	.+1584   	; 0x8a0a <fputc>
    83da:	5a 94       	dec	r5
    83dc:	f7 cf       	rjmp	.-18     	; 0x83cc <vfprintf+0x6b8>
    83de:	f7 01       	movw	r30, r14
    83e0:	86 81       	ldd	r24, Z+6	; 0x06
    83e2:	97 81       	ldd	r25, Z+7	; 0x07
    83e4:	02 c0       	rjmp	.+4      	; 0x83ea <vfprintf+0x6d6>
    83e6:	8f ef       	ldi	r24, 0xFF	; 255
    83e8:	9f ef       	ldi	r25, 0xFF	; 255
    83ea:	63 96       	adiw	r28, 0x13	; 19
    83ec:	cd bf       	out	0x3d, r28	; 61
    83ee:	de bf       	out	0x3e, r29	; 62
    83f0:	df 91       	pop	r29
    83f2:	cf 91       	pop	r28
    83f4:	1f 91       	pop	r17
    83f6:	0f 91       	pop	r16
    83f8:	ff 90       	pop	r15
    83fa:	ef 90       	pop	r14
    83fc:	df 90       	pop	r13
    83fe:	cf 90       	pop	r12
    8400:	bf 90       	pop	r11
    8402:	af 90       	pop	r10
    8404:	9f 90       	pop	r9
    8406:	8f 90       	pop	r8
    8408:	7f 90       	pop	r7
    840a:	6f 90       	pop	r6
    840c:	5f 90       	pop	r5
    840e:	4f 90       	pop	r4
    8410:	3f 90       	pop	r3
    8412:	2f 90       	pop	r2
    8414:	08 95       	ret

00008416 <__divmodhi4>:
    8416:	97 fb       	bst	r25, 7
    8418:	07 2e       	mov	r0, r23
    841a:	16 f4       	brtc	.+4      	; 0x8420 <__divmodhi4+0xa>
    841c:	00 94       	com	r0
    841e:	06 d0       	rcall	.+12     	; 0x842c <__divmodhi4_neg1>
    8420:	77 fd       	sbrc	r23, 7
    8422:	08 d0       	rcall	.+16     	; 0x8434 <__divmodhi4_neg2>
    8424:	42 d0       	rcall	.+132    	; 0x84aa <__udivmodhi4>
    8426:	07 fc       	sbrc	r0, 7
    8428:	05 d0       	rcall	.+10     	; 0x8434 <__divmodhi4_neg2>
    842a:	3e f4       	brtc	.+14     	; 0x843a <__divmodhi4_exit>

0000842c <__divmodhi4_neg1>:
    842c:	90 95       	com	r25
    842e:	81 95       	neg	r24
    8430:	9f 4f       	sbci	r25, 0xFF	; 255
    8432:	08 95       	ret

00008434 <__divmodhi4_neg2>:
    8434:	70 95       	com	r23
    8436:	61 95       	neg	r22
    8438:	7f 4f       	sbci	r23, 0xFF	; 255

0000843a <__divmodhi4_exit>:
    843a:	08 95       	ret

0000843c <__udivmodsi4>:
    843c:	a1 e2       	ldi	r26, 0x21	; 33
    843e:	1a 2e       	mov	r1, r26
    8440:	aa 1b       	sub	r26, r26
    8442:	bb 1b       	sub	r27, r27
    8444:	fd 01       	movw	r30, r26
    8446:	0d c0       	rjmp	.+26     	; 0x8462 <__udivmodsi4_ep>

00008448 <__udivmodsi4_loop>:
    8448:	aa 1f       	adc	r26, r26
    844a:	bb 1f       	adc	r27, r27
    844c:	ee 1f       	adc	r30, r30
    844e:	ff 1f       	adc	r31, r31
    8450:	a2 17       	cp	r26, r18
    8452:	b3 07       	cpc	r27, r19
    8454:	e4 07       	cpc	r30, r20
    8456:	f5 07       	cpc	r31, r21
    8458:	20 f0       	brcs	.+8      	; 0x8462 <__udivmodsi4_ep>
    845a:	a2 1b       	sub	r26, r18
    845c:	b3 0b       	sbc	r27, r19
    845e:	e4 0b       	sbc	r30, r20
    8460:	f5 0b       	sbc	r31, r21

00008462 <__udivmodsi4_ep>:
    8462:	66 1f       	adc	r22, r22
    8464:	77 1f       	adc	r23, r23
    8466:	88 1f       	adc	r24, r24
    8468:	99 1f       	adc	r25, r25
    846a:	1a 94       	dec	r1
    846c:	69 f7       	brne	.-38     	; 0x8448 <__udivmodsi4_loop>
    846e:	60 95       	com	r22
    8470:	70 95       	com	r23
    8472:	80 95       	com	r24
    8474:	90 95       	com	r25
    8476:	9b 01       	movw	r18, r22
    8478:	ac 01       	movw	r20, r24
    847a:	bd 01       	movw	r22, r26
    847c:	cf 01       	movw	r24, r30
    847e:	08 95       	ret

00008480 <__tablejump2__>:
    8480:	ee 0f       	add	r30, r30
    8482:	ff 1f       	adc	r31, r31

00008484 <__tablejump__>:
    8484:	05 90       	lpm	r0, Z+
    8486:	f4 91       	lpm	r31, Z
    8488:	e0 2d       	mov	r30, r0
    848a:	19 94       	eijmp

0000848c <__umulhisi3>:
    848c:	a2 9f       	mul	r26, r18
    848e:	b0 01       	movw	r22, r0
    8490:	b3 9f       	mul	r27, r19
    8492:	c0 01       	movw	r24, r0
    8494:	a3 9f       	mul	r26, r19
    8496:	70 0d       	add	r23, r0
    8498:	81 1d       	adc	r24, r1
    849a:	11 24       	eor	r1, r1
    849c:	91 1d       	adc	r25, r1
    849e:	b2 9f       	mul	r27, r18
    84a0:	70 0d       	add	r23, r0
    84a2:	81 1d       	adc	r24, r1
    84a4:	11 24       	eor	r1, r1
    84a6:	91 1d       	adc	r25, r1
    84a8:	08 95       	ret

000084aa <__udivmodhi4>:
    84aa:	aa 1b       	sub	r26, r26
    84ac:	bb 1b       	sub	r27, r27
    84ae:	51 e1       	ldi	r21, 0x11	; 17
    84b0:	07 c0       	rjmp	.+14     	; 0x84c0 <__udivmodhi4_ep>

000084b2 <__udivmodhi4_loop>:
    84b2:	aa 1f       	adc	r26, r26
    84b4:	bb 1f       	adc	r27, r27
    84b6:	a6 17       	cp	r26, r22
    84b8:	b7 07       	cpc	r27, r23
    84ba:	10 f0       	brcs	.+4      	; 0x84c0 <__udivmodhi4_ep>
    84bc:	a6 1b       	sub	r26, r22
    84be:	b7 0b       	sbc	r27, r23

000084c0 <__udivmodhi4_ep>:
    84c0:	88 1f       	adc	r24, r24
    84c2:	99 1f       	adc	r25, r25
    84c4:	5a 95       	dec	r21
    84c6:	a9 f7       	brne	.-22     	; 0x84b2 <__udivmodhi4_loop>
    84c8:	80 95       	com	r24
    84ca:	90 95       	com	r25
    84cc:	bc 01       	movw	r22, r24
    84ce:	cd 01       	movw	r24, r26
    84d0:	08 95       	ret

000084d2 <malloc>:
    84d2:	cf 93       	push	r28
    84d4:	df 93       	push	r29
    84d6:	82 30       	cpi	r24, 0x02	; 2
    84d8:	91 05       	cpc	r25, r1
    84da:	10 f4       	brcc	.+4      	; 0x84e0 <malloc+0xe>
    84dc:	82 e0       	ldi	r24, 0x02	; 2
    84de:	90 e0       	ldi	r25, 0x00	; 0
    84e0:	e0 91 88 37 	lds	r30, 0x3788
    84e4:	f0 91 89 37 	lds	r31, 0x3789
    84e8:	20 e0       	ldi	r18, 0x00	; 0
    84ea:	30 e0       	ldi	r19, 0x00	; 0
    84ec:	a0 e0       	ldi	r26, 0x00	; 0
    84ee:	b0 e0       	ldi	r27, 0x00	; 0
    84f0:	30 97       	sbiw	r30, 0x00	; 0
    84f2:	39 f1       	breq	.+78     	; 0x8542 <malloc+0x70>
    84f4:	40 81       	ld	r20, Z
    84f6:	51 81       	ldd	r21, Z+1	; 0x01
    84f8:	48 17       	cp	r20, r24
    84fa:	59 07       	cpc	r21, r25
    84fc:	b8 f0       	brcs	.+46     	; 0x852c <malloc+0x5a>
    84fe:	48 17       	cp	r20, r24
    8500:	59 07       	cpc	r21, r25
    8502:	71 f4       	brne	.+28     	; 0x8520 <malloc+0x4e>
    8504:	82 81       	ldd	r24, Z+2	; 0x02
    8506:	93 81       	ldd	r25, Z+3	; 0x03
    8508:	10 97       	sbiw	r26, 0x00	; 0
    850a:	29 f0       	breq	.+10     	; 0x8516 <malloc+0x44>
    850c:	12 96       	adiw	r26, 0x02	; 2
    850e:	8d 93       	st	X+, r24
    8510:	9c 93       	st	X, r25
    8512:	13 97       	sbiw	r26, 0x03	; 3
    8514:	2c c0       	rjmp	.+88     	; 0x856e <malloc+0x9c>
    8516:	80 93 88 37 	sts	0x3788, r24
    851a:	90 93 89 37 	sts	0x3789, r25
    851e:	27 c0       	rjmp	.+78     	; 0x856e <malloc+0x9c>
    8520:	21 15       	cp	r18, r1
    8522:	31 05       	cpc	r19, r1
    8524:	31 f0       	breq	.+12     	; 0x8532 <malloc+0x60>
    8526:	42 17       	cp	r20, r18
    8528:	53 07       	cpc	r21, r19
    852a:	18 f0       	brcs	.+6      	; 0x8532 <malloc+0x60>
    852c:	a9 01       	movw	r20, r18
    852e:	db 01       	movw	r26, r22
    8530:	01 c0       	rjmp	.+2      	; 0x8534 <malloc+0x62>
    8532:	ef 01       	movw	r28, r30
    8534:	9a 01       	movw	r18, r20
    8536:	bd 01       	movw	r22, r26
    8538:	df 01       	movw	r26, r30
    853a:	02 80       	ldd	r0, Z+2	; 0x02
    853c:	f3 81       	ldd	r31, Z+3	; 0x03
    853e:	e0 2d       	mov	r30, r0
    8540:	d7 cf       	rjmp	.-82     	; 0x84f0 <malloc+0x1e>
    8542:	21 15       	cp	r18, r1
    8544:	31 05       	cpc	r19, r1
    8546:	f9 f0       	breq	.+62     	; 0x8586 <malloc+0xb4>
    8548:	28 1b       	sub	r18, r24
    854a:	39 0b       	sbc	r19, r25
    854c:	24 30       	cpi	r18, 0x04	; 4
    854e:	31 05       	cpc	r19, r1
    8550:	80 f4       	brcc	.+32     	; 0x8572 <malloc+0xa0>
    8552:	8a 81       	ldd	r24, Y+2	; 0x02
    8554:	9b 81       	ldd	r25, Y+3	; 0x03
    8556:	61 15       	cp	r22, r1
    8558:	71 05       	cpc	r23, r1
    855a:	21 f0       	breq	.+8      	; 0x8564 <malloc+0x92>
    855c:	fb 01       	movw	r30, r22
    855e:	82 83       	std	Z+2, r24	; 0x02
    8560:	93 83       	std	Z+3, r25	; 0x03
    8562:	04 c0       	rjmp	.+8      	; 0x856c <malloc+0x9a>
    8564:	80 93 88 37 	sts	0x3788, r24
    8568:	90 93 89 37 	sts	0x3789, r25
    856c:	fe 01       	movw	r30, r28
    856e:	32 96       	adiw	r30, 0x02	; 2
    8570:	44 c0       	rjmp	.+136    	; 0x85fa <malloc+0x128>
    8572:	fe 01       	movw	r30, r28
    8574:	e2 0f       	add	r30, r18
    8576:	f3 1f       	adc	r31, r19
    8578:	81 93       	st	Z+, r24
    857a:	91 93       	st	Z+, r25
    857c:	22 50       	subi	r18, 0x02	; 2
    857e:	31 09       	sbc	r19, r1
    8580:	28 83       	st	Y, r18
    8582:	39 83       	std	Y+1, r19	; 0x01
    8584:	3a c0       	rjmp	.+116    	; 0x85fa <malloc+0x128>
    8586:	20 91 86 37 	lds	r18, 0x3786
    858a:	30 91 87 37 	lds	r19, 0x3787
    858e:	23 2b       	or	r18, r19
    8590:	41 f4       	brne	.+16     	; 0x85a2 <malloc+0xd0>
    8592:	20 91 02 20 	lds	r18, 0x2002
    8596:	30 91 03 20 	lds	r19, 0x2003
    859a:	20 93 86 37 	sts	0x3786, r18
    859e:	30 93 87 37 	sts	0x3787, r19
    85a2:	20 91 00 20 	lds	r18, 0x2000
    85a6:	30 91 01 20 	lds	r19, 0x2001
    85aa:	21 15       	cp	r18, r1
    85ac:	31 05       	cpc	r19, r1
    85ae:	41 f4       	brne	.+16     	; 0x85c0 <malloc+0xee>
    85b0:	2d b7       	in	r18, 0x3d	; 61
    85b2:	3e b7       	in	r19, 0x3e	; 62
    85b4:	40 91 04 20 	lds	r20, 0x2004
    85b8:	50 91 05 20 	lds	r21, 0x2005
    85bc:	24 1b       	sub	r18, r20
    85be:	35 0b       	sbc	r19, r21
    85c0:	e0 91 86 37 	lds	r30, 0x3786
    85c4:	f0 91 87 37 	lds	r31, 0x3787
    85c8:	e2 17       	cp	r30, r18
    85ca:	f3 07       	cpc	r31, r19
    85cc:	a0 f4       	brcc	.+40     	; 0x85f6 <malloc+0x124>
    85ce:	2e 1b       	sub	r18, r30
    85d0:	3f 0b       	sbc	r19, r31
    85d2:	28 17       	cp	r18, r24
    85d4:	39 07       	cpc	r19, r25
    85d6:	78 f0       	brcs	.+30     	; 0x85f6 <malloc+0x124>
    85d8:	ac 01       	movw	r20, r24
    85da:	4e 5f       	subi	r20, 0xFE	; 254
    85dc:	5f 4f       	sbci	r21, 0xFF	; 255
    85de:	24 17       	cp	r18, r20
    85e0:	35 07       	cpc	r19, r21
    85e2:	48 f0       	brcs	.+18     	; 0x85f6 <malloc+0x124>
    85e4:	4e 0f       	add	r20, r30
    85e6:	5f 1f       	adc	r21, r31
    85e8:	40 93 86 37 	sts	0x3786, r20
    85ec:	50 93 87 37 	sts	0x3787, r21
    85f0:	81 93       	st	Z+, r24
    85f2:	91 93       	st	Z+, r25
    85f4:	02 c0       	rjmp	.+4      	; 0x85fa <malloc+0x128>
    85f6:	e0 e0       	ldi	r30, 0x00	; 0
    85f8:	f0 e0       	ldi	r31, 0x00	; 0
    85fa:	cf 01       	movw	r24, r30
    85fc:	df 91       	pop	r29
    85fe:	cf 91       	pop	r28
    8600:	08 95       	ret

00008602 <free>:
    8602:	cf 93       	push	r28
    8604:	df 93       	push	r29
    8606:	00 97       	sbiw	r24, 0x00	; 0
    8608:	09 f4       	brne	.+2      	; 0x860c <free+0xa>
    860a:	87 c0       	rjmp	.+270    	; 0x871a <free+0x118>
    860c:	fc 01       	movw	r30, r24
    860e:	32 97       	sbiw	r30, 0x02	; 2
    8610:	12 82       	std	Z+2, r1	; 0x02
    8612:	13 82       	std	Z+3, r1	; 0x03
    8614:	c0 91 88 37 	lds	r28, 0x3788
    8618:	d0 91 89 37 	lds	r29, 0x3789
    861c:	20 97       	sbiw	r28, 0x00	; 0
    861e:	81 f4       	brne	.+32     	; 0x8640 <free+0x3e>
    8620:	20 81       	ld	r18, Z
    8622:	31 81       	ldd	r19, Z+1	; 0x01
    8624:	28 0f       	add	r18, r24
    8626:	39 1f       	adc	r19, r25
    8628:	80 91 86 37 	lds	r24, 0x3786
    862c:	90 91 87 37 	lds	r25, 0x3787
    8630:	82 17       	cp	r24, r18
    8632:	93 07       	cpc	r25, r19
    8634:	79 f5       	brne	.+94     	; 0x8694 <free+0x92>
    8636:	e0 93 86 37 	sts	0x3786, r30
    863a:	f0 93 87 37 	sts	0x3787, r31
    863e:	6d c0       	rjmp	.+218    	; 0x871a <free+0x118>
    8640:	de 01       	movw	r26, r28
    8642:	20 e0       	ldi	r18, 0x00	; 0
    8644:	30 e0       	ldi	r19, 0x00	; 0
    8646:	ae 17       	cp	r26, r30
    8648:	bf 07       	cpc	r27, r31
    864a:	50 f4       	brcc	.+20     	; 0x8660 <free+0x5e>
    864c:	12 96       	adiw	r26, 0x02	; 2
    864e:	4d 91       	ld	r20, X+
    8650:	5c 91       	ld	r21, X
    8652:	13 97       	sbiw	r26, 0x03	; 3
    8654:	9d 01       	movw	r18, r26
    8656:	41 15       	cp	r20, r1
    8658:	51 05       	cpc	r21, r1
    865a:	09 f1       	breq	.+66     	; 0x869e <free+0x9c>
    865c:	da 01       	movw	r26, r20
    865e:	f3 cf       	rjmp	.-26     	; 0x8646 <free+0x44>
    8660:	a2 83       	std	Z+2, r26	; 0x02
    8662:	b3 83       	std	Z+3, r27	; 0x03
    8664:	40 81       	ld	r20, Z
    8666:	51 81       	ldd	r21, Z+1	; 0x01
    8668:	84 0f       	add	r24, r20
    866a:	95 1f       	adc	r25, r21
    866c:	8a 17       	cp	r24, r26
    866e:	9b 07       	cpc	r25, r27
    8670:	71 f4       	brne	.+28     	; 0x868e <free+0x8c>
    8672:	8d 91       	ld	r24, X+
    8674:	9c 91       	ld	r25, X
    8676:	11 97       	sbiw	r26, 0x01	; 1
    8678:	84 0f       	add	r24, r20
    867a:	95 1f       	adc	r25, r21
    867c:	02 96       	adiw	r24, 0x02	; 2
    867e:	80 83       	st	Z, r24
    8680:	91 83       	std	Z+1, r25	; 0x01
    8682:	12 96       	adiw	r26, 0x02	; 2
    8684:	8d 91       	ld	r24, X+
    8686:	9c 91       	ld	r25, X
    8688:	13 97       	sbiw	r26, 0x03	; 3
    868a:	82 83       	std	Z+2, r24	; 0x02
    868c:	93 83       	std	Z+3, r25	; 0x03
    868e:	21 15       	cp	r18, r1
    8690:	31 05       	cpc	r19, r1
    8692:	29 f4       	brne	.+10     	; 0x869e <free+0x9c>
    8694:	e0 93 88 37 	sts	0x3788, r30
    8698:	f0 93 89 37 	sts	0x3789, r31
    869c:	3e c0       	rjmp	.+124    	; 0x871a <free+0x118>
    869e:	d9 01       	movw	r26, r18
    86a0:	12 96       	adiw	r26, 0x02	; 2
    86a2:	ed 93       	st	X+, r30
    86a4:	fc 93       	st	X, r31
    86a6:	13 97       	sbiw	r26, 0x03	; 3
    86a8:	4d 91       	ld	r20, X+
    86aa:	5d 91       	ld	r21, X+
    86ac:	a4 0f       	add	r26, r20
    86ae:	b5 1f       	adc	r27, r21
    86b0:	ea 17       	cp	r30, r26
    86b2:	fb 07       	cpc	r31, r27
    86b4:	79 f4       	brne	.+30     	; 0x86d4 <free+0xd2>
    86b6:	80 81       	ld	r24, Z
    86b8:	91 81       	ldd	r25, Z+1	; 0x01
    86ba:	84 0f       	add	r24, r20
    86bc:	95 1f       	adc	r25, r21
    86be:	02 96       	adiw	r24, 0x02	; 2
    86c0:	d9 01       	movw	r26, r18
    86c2:	8d 93       	st	X+, r24
    86c4:	9c 93       	st	X, r25
    86c6:	11 97       	sbiw	r26, 0x01	; 1
    86c8:	82 81       	ldd	r24, Z+2	; 0x02
    86ca:	93 81       	ldd	r25, Z+3	; 0x03
    86cc:	12 96       	adiw	r26, 0x02	; 2
    86ce:	8d 93       	st	X+, r24
    86d0:	9c 93       	st	X, r25
    86d2:	13 97       	sbiw	r26, 0x03	; 3
    86d4:	e0 e0       	ldi	r30, 0x00	; 0
    86d6:	f0 e0       	ldi	r31, 0x00	; 0
    86d8:	8a 81       	ldd	r24, Y+2	; 0x02
    86da:	9b 81       	ldd	r25, Y+3	; 0x03
    86dc:	00 97       	sbiw	r24, 0x00	; 0
    86de:	19 f0       	breq	.+6      	; 0x86e6 <free+0xe4>
    86e0:	fe 01       	movw	r30, r28
    86e2:	ec 01       	movw	r28, r24
    86e4:	f9 cf       	rjmp	.-14     	; 0x86d8 <free+0xd6>
    86e6:	ce 01       	movw	r24, r28
    86e8:	02 96       	adiw	r24, 0x02	; 2
    86ea:	28 81       	ld	r18, Y
    86ec:	39 81       	ldd	r19, Y+1	; 0x01
    86ee:	82 0f       	add	r24, r18
    86f0:	93 1f       	adc	r25, r19
    86f2:	20 91 86 37 	lds	r18, 0x3786
    86f6:	30 91 87 37 	lds	r19, 0x3787
    86fa:	28 17       	cp	r18, r24
    86fc:	39 07       	cpc	r19, r25
    86fe:	69 f4       	brne	.+26     	; 0x871a <free+0x118>
    8700:	30 97       	sbiw	r30, 0x00	; 0
    8702:	29 f4       	brne	.+10     	; 0x870e <free+0x10c>
    8704:	10 92 88 37 	sts	0x3788, r1
    8708:	10 92 89 37 	sts	0x3789, r1
    870c:	02 c0       	rjmp	.+4      	; 0x8712 <free+0x110>
    870e:	12 82       	std	Z+2, r1	; 0x02
    8710:	13 82       	std	Z+3, r1	; 0x03
    8712:	c0 93 86 37 	sts	0x3786, r28
    8716:	d0 93 87 37 	sts	0x3787, r29
    871a:	df 91       	pop	r29
    871c:	cf 91       	pop	r28
    871e:	08 95       	ret

00008720 <__ftoa_engine>:
    8720:	28 30       	cpi	r18, 0x08	; 8
    8722:	08 f0       	brcs	.+2      	; 0x8726 <__ftoa_engine+0x6>
    8724:	27 e0       	ldi	r18, 0x07	; 7
    8726:	33 27       	eor	r19, r19
    8728:	da 01       	movw	r26, r20
    872a:	99 0f       	add	r25, r25
    872c:	31 1d       	adc	r19, r1
    872e:	87 fd       	sbrc	r24, 7
    8730:	91 60       	ori	r25, 0x01	; 1
    8732:	00 96       	adiw	r24, 0x00	; 0
    8734:	61 05       	cpc	r22, r1
    8736:	71 05       	cpc	r23, r1
    8738:	39 f4       	brne	.+14     	; 0x8748 <__ftoa_engine+0x28>
    873a:	32 60       	ori	r19, 0x02	; 2
    873c:	2e 5f       	subi	r18, 0xFE	; 254
    873e:	3d 93       	st	X+, r19
    8740:	30 e3       	ldi	r19, 0x30	; 48
    8742:	2a 95       	dec	r18
    8744:	e1 f7       	brne	.-8      	; 0x873e <__ftoa_engine+0x1e>
    8746:	08 95       	ret
    8748:	9f 3f       	cpi	r25, 0xFF	; 255
    874a:	30 f0       	brcs	.+12     	; 0x8758 <__ftoa_engine+0x38>
    874c:	80 38       	cpi	r24, 0x80	; 128
    874e:	71 05       	cpc	r23, r1
    8750:	61 05       	cpc	r22, r1
    8752:	09 f0       	breq	.+2      	; 0x8756 <__ftoa_engine+0x36>
    8754:	3c 5f       	subi	r19, 0xFC	; 252
    8756:	3c 5f       	subi	r19, 0xFC	; 252
    8758:	3d 93       	st	X+, r19
    875a:	91 30       	cpi	r25, 0x01	; 1
    875c:	08 f0       	brcs	.+2      	; 0x8760 <__ftoa_engine+0x40>
    875e:	80 68       	ori	r24, 0x80	; 128
    8760:	91 1d       	adc	r25, r1
    8762:	df 93       	push	r29
    8764:	cf 93       	push	r28
    8766:	1f 93       	push	r17
    8768:	0f 93       	push	r16
    876a:	ff 92       	push	r15
    876c:	ef 92       	push	r14
    876e:	19 2f       	mov	r17, r25
    8770:	98 7f       	andi	r25, 0xF8	; 248
    8772:	96 95       	lsr	r25
    8774:	e9 2f       	mov	r30, r25
    8776:	96 95       	lsr	r25
    8778:	96 95       	lsr	r25
    877a:	e9 0f       	add	r30, r25
    877c:	ff 27       	eor	r31, r31
    877e:	ed 53       	subi	r30, 0x3D	; 61
    8780:	f8 4f       	sbci	r31, 0xF8	; 248
    8782:	99 27       	eor	r25, r25
    8784:	33 27       	eor	r19, r19
    8786:	ee 24       	eor	r14, r14
    8788:	ff 24       	eor	r15, r15
    878a:	a7 01       	movw	r20, r14
    878c:	e7 01       	movw	r28, r14
    878e:	05 90       	lpm	r0, Z+
    8790:	08 94       	sec
    8792:	07 94       	ror	r0
    8794:	28 f4       	brcc	.+10     	; 0x87a0 <__ftoa_engine+0x80>
    8796:	36 0f       	add	r19, r22
    8798:	e7 1e       	adc	r14, r23
    879a:	f8 1e       	adc	r15, r24
    879c:	49 1f       	adc	r20, r25
    879e:	51 1d       	adc	r21, r1
    87a0:	66 0f       	add	r22, r22
    87a2:	77 1f       	adc	r23, r23
    87a4:	88 1f       	adc	r24, r24
    87a6:	99 1f       	adc	r25, r25
    87a8:	06 94       	lsr	r0
    87aa:	a1 f7       	brne	.-24     	; 0x8794 <__ftoa_engine+0x74>
    87ac:	05 90       	lpm	r0, Z+
    87ae:	07 94       	ror	r0
    87b0:	28 f4       	brcc	.+10     	; 0x87bc <__ftoa_engine+0x9c>
    87b2:	e7 0e       	add	r14, r23
    87b4:	f8 1e       	adc	r15, r24
    87b6:	49 1f       	adc	r20, r25
    87b8:	56 1f       	adc	r21, r22
    87ba:	c1 1d       	adc	r28, r1
    87bc:	77 0f       	add	r23, r23
    87be:	88 1f       	adc	r24, r24
    87c0:	99 1f       	adc	r25, r25
    87c2:	66 1f       	adc	r22, r22
    87c4:	06 94       	lsr	r0
    87c6:	a1 f7       	brne	.-24     	; 0x87b0 <__ftoa_engine+0x90>
    87c8:	05 90       	lpm	r0, Z+
    87ca:	07 94       	ror	r0
    87cc:	28 f4       	brcc	.+10     	; 0x87d8 <__ftoa_engine+0xb8>
    87ce:	f8 0e       	add	r15, r24
    87d0:	49 1f       	adc	r20, r25
    87d2:	56 1f       	adc	r21, r22
    87d4:	c7 1f       	adc	r28, r23
    87d6:	d1 1d       	adc	r29, r1
    87d8:	88 0f       	add	r24, r24
    87da:	99 1f       	adc	r25, r25
    87dc:	66 1f       	adc	r22, r22
    87de:	77 1f       	adc	r23, r23
    87e0:	06 94       	lsr	r0
    87e2:	a1 f7       	brne	.-24     	; 0x87cc <__ftoa_engine+0xac>
    87e4:	05 90       	lpm	r0, Z+
    87e6:	07 94       	ror	r0
    87e8:	20 f4       	brcc	.+8      	; 0x87f2 <__ftoa_engine+0xd2>
    87ea:	49 0f       	add	r20, r25
    87ec:	56 1f       	adc	r21, r22
    87ee:	c7 1f       	adc	r28, r23
    87f0:	d8 1f       	adc	r29, r24
    87f2:	99 0f       	add	r25, r25
    87f4:	66 1f       	adc	r22, r22
    87f6:	77 1f       	adc	r23, r23
    87f8:	88 1f       	adc	r24, r24
    87fa:	06 94       	lsr	r0
    87fc:	a9 f7       	brne	.-22     	; 0x87e8 <__ftoa_engine+0xc8>
    87fe:	84 91       	lpm	r24, Z
    8800:	10 95       	com	r17
    8802:	17 70       	andi	r17, 0x07	; 7
    8804:	41 f0       	breq	.+16     	; 0x8816 <__ftoa_engine+0xf6>
    8806:	d6 95       	lsr	r29
    8808:	c7 95       	ror	r28
    880a:	57 95       	ror	r21
    880c:	47 95       	ror	r20
    880e:	f7 94       	ror	r15
    8810:	e7 94       	ror	r14
    8812:	1a 95       	dec	r17
    8814:	c1 f7       	brne	.-16     	; 0x8806 <__ftoa_engine+0xe6>
    8816:	e9 e6       	ldi	r30, 0x69	; 105
    8818:	f7 e0       	ldi	r31, 0x07	; 7
    881a:	68 94       	set
    881c:	15 90       	lpm	r1, Z+
    881e:	15 91       	lpm	r17, Z+
    8820:	35 91       	lpm	r19, Z+
    8822:	65 91       	lpm	r22, Z+
    8824:	95 91       	lpm	r25, Z+
    8826:	05 90       	lpm	r0, Z+
    8828:	7f e2       	ldi	r23, 0x2F	; 47
    882a:	73 95       	inc	r23
    882c:	e1 18       	sub	r14, r1
    882e:	f1 0a       	sbc	r15, r17
    8830:	43 0b       	sbc	r20, r19
    8832:	56 0b       	sbc	r21, r22
    8834:	c9 0b       	sbc	r28, r25
    8836:	d0 09       	sbc	r29, r0
    8838:	c0 f7       	brcc	.-16     	; 0x882a <__ftoa_engine+0x10a>
    883a:	e1 0c       	add	r14, r1
    883c:	f1 1e       	adc	r15, r17
    883e:	43 1f       	adc	r20, r19
    8840:	56 1f       	adc	r21, r22
    8842:	c9 1f       	adc	r28, r25
    8844:	d0 1d       	adc	r29, r0
    8846:	7e f4       	brtc	.+30     	; 0x8866 <__ftoa_engine+0x146>
    8848:	70 33       	cpi	r23, 0x30	; 48
    884a:	11 f4       	brne	.+4      	; 0x8850 <__ftoa_engine+0x130>
    884c:	8a 95       	dec	r24
    884e:	e6 cf       	rjmp	.-52     	; 0x881c <__ftoa_engine+0xfc>
    8850:	e8 94       	clt
    8852:	01 50       	subi	r16, 0x01	; 1
    8854:	30 f0       	brcs	.+12     	; 0x8862 <__ftoa_engine+0x142>
    8856:	08 0f       	add	r16, r24
    8858:	0a f4       	brpl	.+2      	; 0x885c <__ftoa_engine+0x13c>
    885a:	00 27       	eor	r16, r16
    885c:	02 17       	cp	r16, r18
    885e:	08 f4       	brcc	.+2      	; 0x8862 <__ftoa_engine+0x142>
    8860:	20 2f       	mov	r18, r16
    8862:	23 95       	inc	r18
    8864:	02 2f       	mov	r16, r18
    8866:	7a 33       	cpi	r23, 0x3A	; 58
    8868:	28 f0       	brcs	.+10     	; 0x8874 <__ftoa_engine+0x154>
    886a:	79 e3       	ldi	r23, 0x39	; 57
    886c:	7d 93       	st	X+, r23
    886e:	2a 95       	dec	r18
    8870:	e9 f7       	brne	.-6      	; 0x886c <__ftoa_engine+0x14c>
    8872:	10 c0       	rjmp	.+32     	; 0x8894 <__ftoa_engine+0x174>
    8874:	7d 93       	st	X+, r23
    8876:	2a 95       	dec	r18
    8878:	89 f6       	brne	.-94     	; 0x881c <__ftoa_engine+0xfc>
    887a:	06 94       	lsr	r0
    887c:	97 95       	ror	r25
    887e:	67 95       	ror	r22
    8880:	37 95       	ror	r19
    8882:	17 95       	ror	r17
    8884:	17 94       	ror	r1
    8886:	e1 18       	sub	r14, r1
    8888:	f1 0a       	sbc	r15, r17
    888a:	43 0b       	sbc	r20, r19
    888c:	56 0b       	sbc	r21, r22
    888e:	c9 0b       	sbc	r28, r25
    8890:	d0 09       	sbc	r29, r0
    8892:	98 f0       	brcs	.+38     	; 0x88ba <__ftoa_engine+0x19a>
    8894:	23 95       	inc	r18
    8896:	7e 91       	ld	r23, -X
    8898:	73 95       	inc	r23
    889a:	7a 33       	cpi	r23, 0x3A	; 58
    889c:	08 f0       	brcs	.+2      	; 0x88a0 <__ftoa_engine+0x180>
    889e:	70 e3       	ldi	r23, 0x30	; 48
    88a0:	7c 93       	st	X, r23
    88a2:	20 13       	cpse	r18, r16
    88a4:	b8 f7       	brcc	.-18     	; 0x8894 <__ftoa_engine+0x174>
    88a6:	7e 91       	ld	r23, -X
    88a8:	70 61       	ori	r23, 0x10	; 16
    88aa:	7d 93       	st	X+, r23
    88ac:	30 f0       	brcs	.+12     	; 0x88ba <__ftoa_engine+0x19a>
    88ae:	83 95       	inc	r24
    88b0:	71 e3       	ldi	r23, 0x31	; 49
    88b2:	7d 93       	st	X+, r23
    88b4:	70 e3       	ldi	r23, 0x30	; 48
    88b6:	2a 95       	dec	r18
    88b8:	e1 f7       	brne	.-8      	; 0x88b2 <__ftoa_engine+0x192>
    88ba:	11 24       	eor	r1, r1
    88bc:	ef 90       	pop	r14
    88be:	ff 90       	pop	r15
    88c0:	0f 91       	pop	r16
    88c2:	1f 91       	pop	r17
    88c4:	cf 91       	pop	r28
    88c6:	df 91       	pop	r29
    88c8:	99 27       	eor	r25, r25
    88ca:	87 fd       	sbrc	r24, 7
    88cc:	90 95       	com	r25
    88ce:	08 95       	ret

000088d0 <strnlen_P>:
    88d0:	fc 01       	movw	r30, r24
    88d2:	05 90       	lpm	r0, Z+
    88d4:	61 50       	subi	r22, 0x01	; 1
    88d6:	70 40       	sbci	r23, 0x00	; 0
    88d8:	01 10       	cpse	r0, r1
    88da:	d8 f7       	brcc	.-10     	; 0x88d2 <strnlen_P+0x2>
    88dc:	80 95       	com	r24
    88de:	90 95       	com	r25
    88e0:	8e 0f       	add	r24, r30
    88e2:	9f 1f       	adc	r25, r31
    88e4:	08 95       	ret

000088e6 <strtok>:
    88e6:	4a e4       	ldi	r20, 0x4A	; 74
    88e8:	5c e2       	ldi	r21, 0x2C	; 44
    88ea:	68 c0       	rjmp	.+208    	; 0x89bc <strtok_r>

000088ec <memcmp>:
    88ec:	fb 01       	movw	r30, r22
    88ee:	dc 01       	movw	r26, r24
    88f0:	04 c0       	rjmp	.+8      	; 0x88fa <memcmp+0xe>
    88f2:	8d 91       	ld	r24, X+
    88f4:	01 90       	ld	r0, Z+
    88f6:	80 19       	sub	r24, r0
    88f8:	21 f4       	brne	.+8      	; 0x8902 <memcmp+0x16>
    88fa:	41 50       	subi	r20, 0x01	; 1
    88fc:	50 40       	sbci	r21, 0x00	; 0
    88fe:	c8 f7       	brcc	.-14     	; 0x88f2 <memcmp+0x6>
    8900:	88 1b       	sub	r24, r24
    8902:	99 0b       	sbc	r25, r25
    8904:	08 95       	ret

00008906 <memcpy>:
    8906:	fb 01       	movw	r30, r22
    8908:	dc 01       	movw	r26, r24
    890a:	02 c0       	rjmp	.+4      	; 0x8910 <memcpy+0xa>
    890c:	01 90       	ld	r0, Z+
    890e:	0d 92       	st	X+, r0
    8910:	41 50       	subi	r20, 0x01	; 1
    8912:	50 40       	sbci	r21, 0x00	; 0
    8914:	d8 f7       	brcc	.-10     	; 0x890c <memcpy+0x6>
    8916:	08 95       	ret

00008918 <strcmp>:
    8918:	fb 01       	movw	r30, r22
    891a:	dc 01       	movw	r26, r24
    891c:	8d 91       	ld	r24, X+
    891e:	01 90       	ld	r0, Z+
    8920:	80 19       	sub	r24, r0
    8922:	01 10       	cpse	r0, r1
    8924:	d9 f3       	breq	.-10     	; 0x891c <strcmp+0x4>
    8926:	99 0b       	sbc	r25, r25
    8928:	08 95       	ret

0000892a <strcpy>:
    892a:	fb 01       	movw	r30, r22
    892c:	dc 01       	movw	r26, r24
    892e:	01 90       	ld	r0, Z+
    8930:	0d 92       	st	X+, r0
    8932:	00 20       	and	r0, r0
    8934:	e1 f7       	brne	.-8      	; 0x892e <strcpy+0x4>
    8936:	08 95       	ret

00008938 <strncmp>:
    8938:	fb 01       	movw	r30, r22
    893a:	dc 01       	movw	r26, r24
    893c:	41 50       	subi	r20, 0x01	; 1
    893e:	50 40       	sbci	r21, 0x00	; 0
    8940:	30 f0       	brcs	.+12     	; 0x894e <strncmp+0x16>
    8942:	8d 91       	ld	r24, X+
    8944:	01 90       	ld	r0, Z+
    8946:	80 19       	sub	r24, r0
    8948:	19 f4       	brne	.+6      	; 0x8950 <strncmp+0x18>
    894a:	00 20       	and	r0, r0
    894c:	b9 f7       	brne	.-18     	; 0x893c <strncmp+0x4>
    894e:	88 1b       	sub	r24, r24
    8950:	99 0b       	sbc	r25, r25
    8952:	08 95       	ret

00008954 <strncpy>:
    8954:	fb 01       	movw	r30, r22
    8956:	dc 01       	movw	r26, r24
    8958:	41 50       	subi	r20, 0x01	; 1
    895a:	50 40       	sbci	r21, 0x00	; 0
    895c:	48 f0       	brcs	.+18     	; 0x8970 <strncpy+0x1c>
    895e:	01 90       	ld	r0, Z+
    8960:	0d 92       	st	X+, r0
    8962:	00 20       	and	r0, r0
    8964:	c9 f7       	brne	.-14     	; 0x8958 <strncpy+0x4>
    8966:	01 c0       	rjmp	.+2      	; 0x896a <strncpy+0x16>
    8968:	1d 92       	st	X+, r1
    896a:	41 50       	subi	r20, 0x01	; 1
    896c:	50 40       	sbci	r21, 0x00	; 0
    896e:	e0 f7       	brcc	.-8      	; 0x8968 <strncpy+0x14>
    8970:	08 95       	ret

00008972 <strnlen>:
    8972:	fc 01       	movw	r30, r24
    8974:	61 50       	subi	r22, 0x01	; 1
    8976:	70 40       	sbci	r23, 0x00	; 0
    8978:	01 90       	ld	r0, Z+
    897a:	01 10       	cpse	r0, r1
    897c:	d8 f7       	brcc	.-10     	; 0x8974 <strnlen+0x2>
    897e:	80 95       	com	r24
    8980:	90 95       	com	r25
    8982:	8e 0f       	add	r24, r30
    8984:	9f 1f       	adc	r25, r31
    8986:	08 95       	ret

00008988 <strstr>:
    8988:	fb 01       	movw	r30, r22
    898a:	51 91       	ld	r21, Z+
    898c:	55 23       	and	r21, r21
    898e:	a9 f0       	breq	.+42     	; 0x89ba <strstr+0x32>
    8990:	bf 01       	movw	r22, r30
    8992:	dc 01       	movw	r26, r24
    8994:	4d 91       	ld	r20, X+
    8996:	45 17       	cp	r20, r21
    8998:	41 11       	cpse	r20, r1
    899a:	e1 f7       	brne	.-8      	; 0x8994 <strstr+0xc>
    899c:	59 f4       	brne	.+22     	; 0x89b4 <strstr+0x2c>
    899e:	cd 01       	movw	r24, r26
    89a0:	01 90       	ld	r0, Z+
    89a2:	00 20       	and	r0, r0
    89a4:	49 f0       	breq	.+18     	; 0x89b8 <strstr+0x30>
    89a6:	4d 91       	ld	r20, X+
    89a8:	40 15       	cp	r20, r0
    89aa:	41 11       	cpse	r20, r1
    89ac:	c9 f3       	breq	.-14     	; 0x89a0 <strstr+0x18>
    89ae:	fb 01       	movw	r30, r22
    89b0:	41 11       	cpse	r20, r1
    89b2:	ef cf       	rjmp	.-34     	; 0x8992 <strstr+0xa>
    89b4:	81 e0       	ldi	r24, 0x01	; 1
    89b6:	90 e0       	ldi	r25, 0x00	; 0
    89b8:	01 97       	sbiw	r24, 0x01	; 1
    89ba:	08 95       	ret

000089bc <strtok_r>:
    89bc:	fa 01       	movw	r30, r20
    89be:	a1 91       	ld	r26, Z+
    89c0:	b0 81       	ld	r27, Z
    89c2:	00 97       	sbiw	r24, 0x00	; 0
    89c4:	19 f4       	brne	.+6      	; 0x89cc <strtok_r+0x10>
    89c6:	10 97       	sbiw	r26, 0x00	; 0
    89c8:	e1 f0       	breq	.+56     	; 0x8a02 <strtok_r+0x46>
    89ca:	cd 01       	movw	r24, r26
    89cc:	dc 01       	movw	r26, r24
    89ce:	cd 01       	movw	r24, r26
    89d0:	0d 90       	ld	r0, X+
    89d2:	00 20       	and	r0, r0
    89d4:	11 f4       	brne	.+4      	; 0x89da <strtok_r+0x1e>
    89d6:	c0 01       	movw	r24, r0
    89d8:	13 c0       	rjmp	.+38     	; 0x8a00 <strtok_r+0x44>
    89da:	fb 01       	movw	r30, r22
    89dc:	21 91       	ld	r18, Z+
    89de:	22 23       	and	r18, r18
    89e0:	19 f0       	breq	.+6      	; 0x89e8 <strtok_r+0x2c>
    89e2:	20 15       	cp	r18, r0
    89e4:	d9 f7       	brne	.-10     	; 0x89dc <strtok_r+0x20>
    89e6:	f3 cf       	rjmp	.-26     	; 0x89ce <strtok_r+0x12>
    89e8:	fb 01       	movw	r30, r22
    89ea:	21 91       	ld	r18, Z+
    89ec:	20 15       	cp	r18, r0
    89ee:	19 f4       	brne	.+6      	; 0x89f6 <strtok_r+0x3a>
    89f0:	1e 92       	st	-X, r1
    89f2:	11 96       	adiw	r26, 0x01	; 1
    89f4:	06 c0       	rjmp	.+12     	; 0x8a02 <strtok_r+0x46>
    89f6:	22 23       	and	r18, r18
    89f8:	c1 f7       	brne	.-16     	; 0x89ea <strtok_r+0x2e>
    89fa:	0d 90       	ld	r0, X+
    89fc:	00 20       	and	r0, r0
    89fe:	a1 f7       	brne	.-24     	; 0x89e8 <strtok_r+0x2c>
    8a00:	d0 01       	movw	r26, r0
    8a02:	fa 01       	movw	r30, r20
    8a04:	a1 93       	st	Z+, r26
    8a06:	b0 83       	st	Z, r27
    8a08:	08 95       	ret

00008a0a <fputc>:
    8a0a:	0f 93       	push	r16
    8a0c:	1f 93       	push	r17
    8a0e:	cf 93       	push	r28
    8a10:	df 93       	push	r29
    8a12:	18 2f       	mov	r17, r24
    8a14:	09 2f       	mov	r16, r25
    8a16:	eb 01       	movw	r28, r22
    8a18:	8b 81       	ldd	r24, Y+3	; 0x03
    8a1a:	81 fd       	sbrc	r24, 1
    8a1c:	03 c0       	rjmp	.+6      	; 0x8a24 <fputc+0x1a>
    8a1e:	8f ef       	ldi	r24, 0xFF	; 255
    8a20:	9f ef       	ldi	r25, 0xFF	; 255
    8a22:	20 c0       	rjmp	.+64     	; 0x8a64 <fputc+0x5a>
    8a24:	82 ff       	sbrs	r24, 2
    8a26:	10 c0       	rjmp	.+32     	; 0x8a48 <fputc+0x3e>
    8a28:	4e 81       	ldd	r20, Y+6	; 0x06
    8a2a:	5f 81       	ldd	r21, Y+7	; 0x07
    8a2c:	2c 81       	ldd	r18, Y+4	; 0x04
    8a2e:	3d 81       	ldd	r19, Y+5	; 0x05
    8a30:	42 17       	cp	r20, r18
    8a32:	53 07       	cpc	r21, r19
    8a34:	7c f4       	brge	.+30     	; 0x8a54 <fputc+0x4a>
    8a36:	e8 81       	ld	r30, Y
    8a38:	f9 81       	ldd	r31, Y+1	; 0x01
    8a3a:	9f 01       	movw	r18, r30
    8a3c:	2f 5f       	subi	r18, 0xFF	; 255
    8a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    8a40:	28 83       	st	Y, r18
    8a42:	39 83       	std	Y+1, r19	; 0x01
    8a44:	10 83       	st	Z, r17
    8a46:	06 c0       	rjmp	.+12     	; 0x8a54 <fputc+0x4a>
    8a48:	e8 85       	ldd	r30, Y+8	; 0x08
    8a4a:	f9 85       	ldd	r31, Y+9	; 0x09
    8a4c:	81 2f       	mov	r24, r17
    8a4e:	19 95       	eicall
    8a50:	89 2b       	or	r24, r25
    8a52:	29 f7       	brne	.-54     	; 0x8a1e <fputc+0x14>
    8a54:	2e 81       	ldd	r18, Y+6	; 0x06
    8a56:	3f 81       	ldd	r19, Y+7	; 0x07
    8a58:	2f 5f       	subi	r18, 0xFF	; 255
    8a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    8a5c:	2e 83       	std	Y+6, r18	; 0x06
    8a5e:	3f 83       	std	Y+7, r19	; 0x07
    8a60:	81 2f       	mov	r24, r17
    8a62:	90 2f       	mov	r25, r16
    8a64:	df 91       	pop	r29
    8a66:	cf 91       	pop	r28
    8a68:	1f 91       	pop	r17
    8a6a:	0f 91       	pop	r16
    8a6c:	08 95       	ret

00008a6e <printf>:
    8a6e:	cf 93       	push	r28
    8a70:	df 93       	push	r29
    8a72:	cd b7       	in	r28, 0x3d	; 61
    8a74:	de b7       	in	r29, 0x3e	; 62
    8a76:	fe 01       	movw	r30, r28
    8a78:	36 96       	adiw	r30, 0x06	; 6
    8a7a:	61 91       	ld	r22, Z+
    8a7c:	71 91       	ld	r23, Z+
    8a7e:	af 01       	movw	r20, r30
    8a80:	80 91 8c 37 	lds	r24, 0x378C
    8a84:	90 91 8d 37 	lds	r25, 0x378D
    8a88:	45 d9       	rcall	.-3446   	; 0x7d14 <vfprintf>
    8a8a:	df 91       	pop	r29
    8a8c:	cf 91       	pop	r28
    8a8e:	08 95       	ret

00008a90 <puts>:
    8a90:	0f 93       	push	r16
    8a92:	1f 93       	push	r17
    8a94:	cf 93       	push	r28
    8a96:	df 93       	push	r29
    8a98:	e0 91 8c 37 	lds	r30, 0x378C
    8a9c:	f0 91 8d 37 	lds	r31, 0x378D
    8aa0:	23 81       	ldd	r18, Z+3	; 0x03
    8aa2:	21 ff       	sbrs	r18, 1
    8aa4:	1b c0       	rjmp	.+54     	; 0x8adc <puts+0x4c>
    8aa6:	ec 01       	movw	r28, r24
    8aa8:	00 e0       	ldi	r16, 0x00	; 0
    8aaa:	10 e0       	ldi	r17, 0x00	; 0
    8aac:	89 91       	ld	r24, Y+
    8aae:	60 91 8c 37 	lds	r22, 0x378C
    8ab2:	70 91 8d 37 	lds	r23, 0x378D
    8ab6:	db 01       	movw	r26, r22
    8ab8:	18 96       	adiw	r26, 0x08	; 8
    8aba:	ed 91       	ld	r30, X+
    8abc:	fc 91       	ld	r31, X
    8abe:	19 97       	sbiw	r26, 0x09	; 9
    8ac0:	88 23       	and	r24, r24
    8ac2:	31 f0       	breq	.+12     	; 0x8ad0 <puts+0x40>
    8ac4:	19 95       	eicall
    8ac6:	89 2b       	or	r24, r25
    8ac8:	89 f3       	breq	.-30     	; 0x8aac <puts+0x1c>
    8aca:	0f ef       	ldi	r16, 0xFF	; 255
    8acc:	1f ef       	ldi	r17, 0xFF	; 255
    8ace:	ee cf       	rjmp	.-36     	; 0x8aac <puts+0x1c>
    8ad0:	8a e0       	ldi	r24, 0x0A	; 10
    8ad2:	19 95       	eicall
    8ad4:	89 2b       	or	r24, r25
    8ad6:	11 f4       	brne	.+4      	; 0x8adc <puts+0x4c>
    8ad8:	c8 01       	movw	r24, r16
    8ada:	02 c0       	rjmp	.+4      	; 0x8ae0 <puts+0x50>
    8adc:	8f ef       	ldi	r24, 0xFF	; 255
    8ade:	9f ef       	ldi	r25, 0xFF	; 255
    8ae0:	df 91       	pop	r29
    8ae2:	cf 91       	pop	r28
    8ae4:	1f 91       	pop	r17
    8ae6:	0f 91       	pop	r16
    8ae8:	08 95       	ret

00008aea <__ultoa_invert>:
    8aea:	fa 01       	movw	r30, r20
    8aec:	aa 27       	eor	r26, r26
    8aee:	28 30       	cpi	r18, 0x08	; 8
    8af0:	51 f1       	breq	.+84     	; 0x8b46 <__ultoa_invert+0x5c>
    8af2:	20 31       	cpi	r18, 0x10	; 16
    8af4:	81 f1       	breq	.+96     	; 0x8b56 <__ultoa_invert+0x6c>
    8af6:	e8 94       	clt
    8af8:	6f 93       	push	r22
    8afa:	6e 7f       	andi	r22, 0xFE	; 254
    8afc:	6e 5f       	subi	r22, 0xFE	; 254
    8afe:	7f 4f       	sbci	r23, 0xFF	; 255
    8b00:	8f 4f       	sbci	r24, 0xFF	; 255
    8b02:	9f 4f       	sbci	r25, 0xFF	; 255
    8b04:	af 4f       	sbci	r26, 0xFF	; 255
    8b06:	b1 e0       	ldi	r27, 0x01	; 1
    8b08:	3e d0       	rcall	.+124    	; 0x8b86 <__ultoa_invert+0x9c>
    8b0a:	b4 e0       	ldi	r27, 0x04	; 4
    8b0c:	3c d0       	rcall	.+120    	; 0x8b86 <__ultoa_invert+0x9c>
    8b0e:	67 0f       	add	r22, r23
    8b10:	78 1f       	adc	r23, r24
    8b12:	89 1f       	adc	r24, r25
    8b14:	9a 1f       	adc	r25, r26
    8b16:	a1 1d       	adc	r26, r1
    8b18:	68 0f       	add	r22, r24
    8b1a:	79 1f       	adc	r23, r25
    8b1c:	8a 1f       	adc	r24, r26
    8b1e:	91 1d       	adc	r25, r1
    8b20:	a1 1d       	adc	r26, r1
    8b22:	6a 0f       	add	r22, r26
    8b24:	71 1d       	adc	r23, r1
    8b26:	81 1d       	adc	r24, r1
    8b28:	91 1d       	adc	r25, r1
    8b2a:	a1 1d       	adc	r26, r1
    8b2c:	20 d0       	rcall	.+64     	; 0x8b6e <__ultoa_invert+0x84>
    8b2e:	09 f4       	brne	.+2      	; 0x8b32 <__ultoa_invert+0x48>
    8b30:	68 94       	set
    8b32:	3f 91       	pop	r19
    8b34:	2a e0       	ldi	r18, 0x0A	; 10
    8b36:	26 9f       	mul	r18, r22
    8b38:	11 24       	eor	r1, r1
    8b3a:	30 19       	sub	r19, r0
    8b3c:	30 5d       	subi	r19, 0xD0	; 208
    8b3e:	31 93       	st	Z+, r19
    8b40:	de f6       	brtc	.-74     	; 0x8af8 <__ultoa_invert+0xe>
    8b42:	cf 01       	movw	r24, r30
    8b44:	08 95       	ret
    8b46:	46 2f       	mov	r20, r22
    8b48:	47 70       	andi	r20, 0x07	; 7
    8b4a:	40 5d       	subi	r20, 0xD0	; 208
    8b4c:	41 93       	st	Z+, r20
    8b4e:	b3 e0       	ldi	r27, 0x03	; 3
    8b50:	0f d0       	rcall	.+30     	; 0x8b70 <__ultoa_invert+0x86>
    8b52:	c9 f7       	brne	.-14     	; 0x8b46 <__ultoa_invert+0x5c>
    8b54:	f6 cf       	rjmp	.-20     	; 0x8b42 <__ultoa_invert+0x58>
    8b56:	46 2f       	mov	r20, r22
    8b58:	4f 70       	andi	r20, 0x0F	; 15
    8b5a:	40 5d       	subi	r20, 0xD0	; 208
    8b5c:	4a 33       	cpi	r20, 0x3A	; 58
    8b5e:	18 f0       	brcs	.+6      	; 0x8b66 <__ultoa_invert+0x7c>
    8b60:	49 5d       	subi	r20, 0xD9	; 217
    8b62:	31 fd       	sbrc	r19, 1
    8b64:	40 52       	subi	r20, 0x20	; 32
    8b66:	41 93       	st	Z+, r20
    8b68:	02 d0       	rcall	.+4      	; 0x8b6e <__ultoa_invert+0x84>
    8b6a:	a9 f7       	brne	.-22     	; 0x8b56 <__ultoa_invert+0x6c>
    8b6c:	ea cf       	rjmp	.-44     	; 0x8b42 <__ultoa_invert+0x58>
    8b6e:	b4 e0       	ldi	r27, 0x04	; 4
    8b70:	a6 95       	lsr	r26
    8b72:	97 95       	ror	r25
    8b74:	87 95       	ror	r24
    8b76:	77 95       	ror	r23
    8b78:	67 95       	ror	r22
    8b7a:	ba 95       	dec	r27
    8b7c:	c9 f7       	brne	.-14     	; 0x8b70 <__ultoa_invert+0x86>
    8b7e:	00 97       	sbiw	r24, 0x00	; 0
    8b80:	61 05       	cpc	r22, r1
    8b82:	71 05       	cpc	r23, r1
    8b84:	08 95       	ret
    8b86:	9b 01       	movw	r18, r22
    8b88:	ac 01       	movw	r20, r24
    8b8a:	0a 2e       	mov	r0, r26
    8b8c:	06 94       	lsr	r0
    8b8e:	57 95       	ror	r21
    8b90:	47 95       	ror	r20
    8b92:	37 95       	ror	r19
    8b94:	27 95       	ror	r18
    8b96:	ba 95       	dec	r27
    8b98:	c9 f7       	brne	.-14     	; 0x8b8c <__ultoa_invert+0xa2>
    8b9a:	62 0f       	add	r22, r18
    8b9c:	73 1f       	adc	r23, r19
    8b9e:	84 1f       	adc	r24, r20
    8ba0:	95 1f       	adc	r25, r21
    8ba2:	a0 1d       	adc	r26, r0
    8ba4:	08 95       	ret

00008ba6 <__eerd_block_x128a4u>:
    8ba6:	e0 ec       	ldi	r30, 0xC0	; 192
    8ba8:	f1 e0       	ldi	r31, 0x01	; 1
    8baa:	a7 85       	ldd	r26, Z+15	; 0x0f
    8bac:	a7 fd       	sbrc	r26, 7
    8bae:	fd cf       	rjmp	.-6      	; 0x8baa <__eerd_block_x128a4u+0x4>
    8bb0:	a4 85       	ldd	r26, Z+12	; 0x0c
    8bb2:	a8 60       	ori	r26, 0x08	; 8
    8bb4:	a4 87       	std	Z+12, r26	; 0x0c
    8bb6:	60 50       	subi	r22, 0x00	; 0
    8bb8:	70 4f       	sbci	r23, 0xF0	; 240
    8bba:	a5 ce       	rjmp	.-694    	; 0x8906 <memcpy>

00008bbc <__eewr_block_x128a4u>:
    8bbc:	dc 01       	movw	r26, r24
    8bbe:	cb 01       	movw	r24, r22
    8bc0:	02 c0       	rjmp	.+4      	; 0x8bc6 <__eewr_block_x128a4u+0xa>
    8bc2:	2d 91       	ld	r18, X+
    8bc4:	05 d0       	rcall	.+10     	; 0x8bd0 <__eewr_r18_x128a4u>
    8bc6:	41 50       	subi	r20, 0x01	; 1
    8bc8:	50 40       	sbci	r21, 0x00	; 0
    8bca:	d8 f7       	brcc	.-10     	; 0x8bc2 <__eewr_block_x128a4u+0x6>
    8bcc:	08 95       	ret

00008bce <__eewr_byte_x128a4u>:
    8bce:	26 2f       	mov	r18, r22

00008bd0 <__eewr_r18_x128a4u>:
    8bd0:	e0 ec       	ldi	r30, 0xC0	; 192
    8bd2:	f1 e0       	ldi	r31, 0x01	; 1
    8bd4:	37 85       	ldd	r19, Z+15	; 0x0f
    8bd6:	37 fd       	sbrc	r19, 7
    8bd8:	fd cf       	rjmp	.-6      	; 0x8bd4 <__eewr_r18_x128a4u+0x4>
    8bda:	34 85       	ldd	r19, Z+12	; 0x0c
    8bdc:	37 7f       	andi	r19, 0xF7	; 247
    8bde:	34 87       	std	Z+12, r19	; 0x0c
    8be0:	37 85       	ldd	r19, Z+15	; 0x0f
    8be2:	31 ff       	sbrs	r19, 1
    8be4:	09 c0       	rjmp	.+18     	; 0x8bf8 <__eewr_r18_x128a4u+0x28>
    8be6:	36 e3       	ldi	r19, 0x36	; 54
    8be8:	32 87       	std	Z+10, r19	; 0x0a
    8bea:	38 ed       	ldi	r19, 0xD8	; 216
    8bec:	34 bf       	out	0x34, r19	; 52
    8bee:	31 e0       	ldi	r19, 0x01	; 1
    8bf0:	33 87       	std	Z+11, r19	; 0x0b
    8bf2:	37 85       	ldd	r19, Z+15	; 0x0f
    8bf4:	37 fd       	sbrc	r19, 7
    8bf6:	fd cf       	rjmp	.-6      	; 0x8bf2 <__eewr_r18_x128a4u+0x22>
    8bf8:	33 e3       	ldi	r19, 0x33	; 51
    8bfa:	32 87       	std	Z+10, r19	; 0x0a
    8bfc:	80 83       	st	Z, r24
    8bfe:	91 83       	std	Z+1, r25	; 0x01
    8c00:	12 82       	std	Z+2, r1	; 0x02
    8c02:	24 83       	std	Z+4, r18	; 0x04
    8c04:	25 e3       	ldi	r18, 0x35	; 53
    8c06:	22 87       	std	Z+10, r18	; 0x0a
    8c08:	28 ed       	ldi	r18, 0xD8	; 216
    8c0a:	31 e0       	ldi	r19, 0x01	; 1
    8c0c:	24 bf       	out	0x34, r18	; 52
    8c0e:	33 87       	std	Z+11, r19	; 0x0b
    8c10:	01 96       	adiw	r24, 0x01	; 1
    8c12:	08 95       	ret

00008c14 <_exit>:
    8c14:	f8 94       	cli

00008c16 <__stop_program>:
    8c16:	ff cf       	rjmp	.-2      	; 0x8c16 <__stop_program>
