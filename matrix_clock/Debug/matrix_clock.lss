
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bc9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000928  00802000  0000bc9e  0000bd32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002fa  00802928  00802928  0000c65a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000c65a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000c58  00000000  00000000  0000c6b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001e548  00000000  00000000  0000d30e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004526  00000000  00000000  0002b856  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000b619  00000000  00000000  0002fd7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00002fac  00000000  00000000  0003b398  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000049d4  00000000  00000000  0003e344  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013d75  00000000  00000000  00042d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c90  00000000  00000000  00056a8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	43 c7       	rjmp	.+3718   	; 0xe88 <_StackPaint>
       2:	00 00       	nop
       4:	77 c7       	rjmp	.+3822   	; 0xef4 <__bad_interrupt>
       6:	00 00       	nop
       8:	75 c7       	rjmp	.+3818   	; 0xef4 <__bad_interrupt>
       a:	00 00       	nop
       c:	73 c7       	rjmp	.+3814   	; 0xef4 <__bad_interrupt>
       e:	00 00       	nop
      10:	71 c7       	rjmp	.+3810   	; 0xef4 <__bad_interrupt>
      12:	00 00       	nop
      14:	6f c7       	rjmp	.+3806   	; 0xef4 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 c9 08 	jmp	0x1192	; 0x1192 <__vector_6>
      1c:	6b c7       	rjmp	.+3798   	; 0xef4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	69 c7       	rjmp	.+3794   	; 0xef4 <__bad_interrupt>
      22:	00 00       	nop
      24:	67 c7       	rjmp	.+3790   	; 0xef4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 3a 14 	jmp	0x2874	; 0x2874 <__vector_10>
      2c:	63 c7       	rjmp	.+3782   	; 0xef4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	61 c7       	rjmp	.+3778   	; 0xef4 <__bad_interrupt>
      32:	00 00       	nop
      34:	5f c7       	rjmp	.+3774   	; 0xef4 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 c6 3d 	jmp	0x7b8c	; 0x7b8c <__vector_14>
      3c:	5b c7       	rjmp	.+3766   	; 0xef4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 fc 52 	jmp	0xa5f8	; 0xa5f8 <__vector_16>
      44:	0c 94 9f 3d 	jmp	0x7b3e	; 0x7b3e <__vector_17>
      48:	0c 94 fb 1f 	jmp	0x3ff6	; 0x3ff6 <__vector_18>
      4c:	53 c7       	rjmp	.+3750   	; 0xef4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 1e 18 	jmp	0x303c	; 0x303c <__vector_20>
      54:	4f c7       	rjmp	.+3742   	; 0xef4 <__bad_interrupt>
      56:	00 00       	nop
      58:	4d c7       	rjmp	.+3738   	; 0xef4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4b c7       	rjmp	.+3734   	; 0xef4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	49 c7       	rjmp	.+3730   	; 0xef4 <__bad_interrupt>
      62:	00 00       	nop
      64:	47 c7       	rjmp	.+3726   	; 0xef4 <__bad_interrupt>
      66:	00 00       	nop
      68:	45 c7       	rjmp	.+3722   	; 0xef4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	43 c7       	rjmp	.+3718   	; 0xef4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	41 c7       	rjmp	.+3714   	; 0xef4 <__bad_interrupt>
      72:	00 00       	nop
      74:	3f c7       	rjmp	.+3710   	; 0xef4 <__bad_interrupt>
      76:	00 00       	nop
      78:	3d c7       	rjmp	.+3706   	; 0xef4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3b c7       	rjmp	.+3702   	; 0xef4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	39 c7       	rjmp	.+3698   	; 0xef4 <__bad_interrupt>
      82:	00 00       	nop
      84:	37 c7       	rjmp	.+3694   	; 0xef4 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__vector_34>
      8c:	33 c7       	rjmp	.+3686   	; 0xef4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	31 c7       	rjmp	.+3682   	; 0xef4 <__bad_interrupt>
      92:	00 00       	nop
      94:	2f c7       	rjmp	.+3678   	; 0xef4 <__bad_interrupt>
      96:	00 00       	nop
      98:	2d c7       	rjmp	.+3674   	; 0xef4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2b c7       	rjmp	.+3670   	; 0xef4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	29 c7       	rjmp	.+3666   	; 0xef4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	27 c7       	rjmp	.+3662   	; 0xef4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	25 c7       	rjmp	.+3658   	; 0xef4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	23 c7       	rjmp	.+3654   	; 0xef4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	21 c7       	rjmp	.+3650   	; 0xef4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	1f c7       	rjmp	.+3646   	; 0xef4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	1d c7       	rjmp	.+3642   	; 0xef4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	1b c7       	rjmp	.+3638   	; 0xef4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	19 c7       	rjmp	.+3634   	; 0xef4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	17 c7       	rjmp	.+3630   	; 0xef4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	15 c7       	rjmp	.+3626   	; 0xef4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	13 c7       	rjmp	.+3622   	; 0xef4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	11 c7       	rjmp	.+3618   	; 0xef4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	0f c7       	rjmp	.+3614   	; 0xef4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0d c7       	rjmp	.+3610   	; 0xef4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	0b c7       	rjmp	.+3606   	; 0xef4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	09 c7       	rjmp	.+3602   	; 0xef4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 c7       	rjmp	.+3598   	; 0xef4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	05 c7       	rjmp	.+3594   	; 0xef4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	03 c7       	rjmp	.+3590   	; 0xef4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	01 c7       	rjmp	.+3586   	; 0xef4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ff c6       	rjmp	.+3582   	; 0xef4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	fd c6       	rjmp	.+3578   	; 0xef4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	fb c6       	rjmp	.+3574   	; 0xef4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	f9 c6       	rjmp	.+3570   	; 0xef4 <__bad_interrupt>
     102:	00 00       	nop
     104:	f7 c6       	rjmp	.+3566   	; 0xef4 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__vector_66>
     10c:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__vector_67>
     110:	f1 c6       	rjmp	.+3554   	; 0xef4 <__bad_interrupt>
     112:	00 00       	nop
     114:	ef c6       	rjmp	.+3550   	; 0xef4 <__bad_interrupt>
     116:	00 00       	nop
     118:	ed c6       	rjmp	.+3546   	; 0xef4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	eb c6       	rjmp	.+3542   	; 0xef4 <__bad_interrupt>
     11e:	00 00       	nop
     120:	e9 c6       	rjmp	.+3538   	; 0xef4 <__bad_interrupt>
     122:	00 00       	nop
     124:	e7 c6       	rjmp	.+3534   	; 0xef4 <__bad_interrupt>
     126:	00 00       	nop
     128:	e5 c6       	rjmp	.+3530   	; 0xef4 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	e3 c6       	rjmp	.+3526   	; 0xef4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	e1 c6       	rjmp	.+3522   	; 0xef4 <__bad_interrupt>
     132:	00 00       	nop
     134:	df c6       	rjmp	.+3518   	; 0xef4 <__bad_interrupt>
     136:	00 00       	nop
     138:	dd c6       	rjmp	.+3514   	; 0xef4 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	db c6       	rjmp	.+3510   	; 0xef4 <__bad_interrupt>
     13e:	00 00       	nop
     140:	d9 c6       	rjmp	.+3506   	; 0xef4 <__bad_interrupt>
     142:	00 00       	nop
     144:	d7 c6       	rjmp	.+3502   	; 0xef4 <__bad_interrupt>
     146:	00 00       	nop
     148:	d5 c6       	rjmp	.+3498   	; 0xef4 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	d3 c6       	rjmp	.+3494   	; 0xef4 <__bad_interrupt>
     14e:	00 00       	nop
     150:	d1 c6       	rjmp	.+3490   	; 0xef4 <__bad_interrupt>
     152:	00 00       	nop
     154:	cf c6       	rjmp	.+3486   	; 0xef4 <__bad_interrupt>
     156:	00 00       	nop
     158:	cd c6       	rjmp	.+3482   	; 0xef4 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	cb c6       	rjmp	.+3478   	; 0xef4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__vector_88>
     164:	c7 c6       	rjmp	.+3470   	; 0xef4 <__bad_interrupt>
     166:	00 00       	nop
     168:	c5 c6       	rjmp	.+3466   	; 0xef4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	c3 c6       	rjmp	.+3462   	; 0xef4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	c1 c6       	rjmp	.+3458   	; 0xef4 <__bad_interrupt>
     172:	00 00       	nop
     174:	bf c6       	rjmp	.+3454   	; 0xef4 <__bad_interrupt>
     176:	00 00       	nop
     178:	bd c6       	rjmp	.+3450   	; 0xef4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	bb c6       	rjmp	.+3446   	; 0xef4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	b9 c6       	rjmp	.+3442   	; 0xef4 <__bad_interrupt>
     182:	00 00       	nop
     184:	b7 c6       	rjmp	.+3438   	; 0xef4 <__bad_interrupt>
     186:	00 00       	nop
     188:	b5 c6       	rjmp	.+3434   	; 0xef4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	b3 c6       	rjmp	.+3430   	; 0xef4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	b1 c6       	rjmp	.+3426   	; 0xef4 <__bad_interrupt>
     192:	00 00       	nop
     194:	af c6       	rjmp	.+3422   	; 0xef4 <__bad_interrupt>
     196:	00 00       	nop
     198:	ad c6       	rjmp	.+3418   	; 0xef4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	ab c6       	rjmp	.+3414   	; 0xef4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	a9 c6       	rjmp	.+3410   	; 0xef4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	a7 c6       	rjmp	.+3406   	; 0xef4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	a5 c6       	rjmp	.+3402   	; 0xef4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	a3 c6       	rjmp	.+3398   	; 0xef4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	a1 c6       	rjmp	.+3394   	; 0xef4 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	9f c6       	rjmp	.+3390   	; 0xef4 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	9d c6       	rjmp	.+3386   	; 0xef4 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	9b c6       	rjmp	.+3382   	; 0xef4 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	99 c6       	rjmp	.+3378   	; 0xef4 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	97 c6       	rjmp	.+3374   	; 0xef4 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	95 c6       	rjmp	.+3370   	; 0xef4 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	93 c6       	rjmp	.+3366   	; 0xef4 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	91 c6       	rjmp	.+3362   	; 0xef4 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	8f c6       	rjmp	.+3358   	; 0xef4 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	8d c6       	rjmp	.+3354   	; 0xef4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	8b c6       	rjmp	.+3350   	; 0xef4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	89 c6       	rjmp	.+3346   	; 0xef4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	87 c6       	rjmp	.+3342   	; 0xef4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	85 c6       	rjmp	.+3338   	; 0xef4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	83 c6       	rjmp	.+3334   	; 0xef4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	81 c6       	rjmp	.+3330   	; 0xef4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	7f c6       	rjmp	.+3326   	; 0xef4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	7d c6       	rjmp	.+3322   	; 0xef4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	02 3c       	cpi	r16, 0xC2	; 194
     1fe:	09 3c       	cpi	r16, 0xC9	; 201
     200:	5c 3d       	cpi	r21, 0xDC	; 220
     202:	7a 3c       	cpi	r23, 0xCA	; 202
     204:	5c 3d       	cpi	r21, 0xDC	; 220
     206:	5c 3d       	cpi	r21, 0xDC	; 220
     208:	5c 3d       	cpi	r21, 0xDC	; 220
     20a:	54 3d       	cpi	r21, 0xD4	; 212
     20c:	5c 3d       	cpi	r21, 0xDC	; 220
     20e:	5c 3d       	cpi	r21, 0xDC	; 220
     210:	5c 3d       	cpi	r21, 0xDC	; 220
     212:	5c 3d       	cpi	r21, 0xDC	; 220
     214:	5c 3d       	cpi	r21, 0xDC	; 220
     216:	5c 3d       	cpi	r21, 0xDC	; 220
     218:	5c 3d       	cpi	r21, 0xDC	; 220
     21a:	5c 3d       	cpi	r21, 0xDC	; 220
     21c:	5c 3d       	cpi	r21, 0xDC	; 220
     21e:	5c 3d       	cpi	r21, 0xDC	; 220
     220:	5c 3d       	cpi	r21, 0xDC	; 220
     222:	5c 3d       	cpi	r21, 0xDC	; 220
     224:	5c 3d       	cpi	r21, 0xDC	; 220
     226:	5c 3d       	cpi	r21, 0xDC	; 220
     228:	5c 3d       	cpi	r21, 0xDC	; 220
     22a:	5c 3d       	cpi	r21, 0xDC	; 220
     22c:	5c 3d       	cpi	r21, 0xDC	; 220
     22e:	5c 3d       	cpi	r21, 0xDC	; 220
     230:	5c 3d       	cpi	r21, 0xDC	; 220
     232:	5c 3d       	cpi	r21, 0xDC	; 220
     234:	5c 3d       	cpi	r21, 0xDC	; 220
     236:	5c 3d       	cpi	r21, 0xDC	; 220
     238:	5c 3d       	cpi	r21, 0xDC	; 220
     23a:	5c 3d       	cpi	r21, 0xDC	; 220
     23c:	5c 3d       	cpi	r21, 0xDC	; 220
     23e:	5c 3d       	cpi	r21, 0xDC	; 220
     240:	5c 3d       	cpi	r21, 0xDC	; 220
     242:	5c 3d       	cpi	r21, 0xDC	; 220
     244:	5c 3d       	cpi	r21, 0xDC	; 220
     246:	5c 3d       	cpi	r21, 0xDC	; 220
     248:	5c 3d       	cpi	r21, 0xDC	; 220
     24a:	5c 3d       	cpi	r21, 0xDC	; 220
     24c:	5c 3d       	cpi	r21, 0xDC	; 220
     24e:	5c 3d       	cpi	r21, 0xDC	; 220
     250:	5c 3d       	cpi	r21, 0xDC	; 220
     252:	5c 3d       	cpi	r21, 0xDC	; 220
     254:	5c 3d       	cpi	r21, 0xDC	; 220
     256:	5c 3d       	cpi	r21, 0xDC	; 220
     258:	5c 3d       	cpi	r21, 0xDC	; 220
     25a:	5c 3d       	cpi	r21, 0xDC	; 220
     25c:	5c 3d       	cpi	r21, 0xDC	; 220
     25e:	5c 3d       	cpi	r21, 0xDC	; 220
     260:	06 3d       	cpi	r16, 0xD6	; 214
     262:	0c 3d       	cpi	r16, 0xDC	; 220
     264:	1d 3d       	cpi	r17, 0xDD	; 221
     266:	2e 3d       	cpi	r18, 0xDE	; 222
     268:	42 3d       	cpi	r20, 0xD2	; 210
     26a:	78 43       	sbci	r23, 0x38	; 56
     26c:	72 43       	sbci	r23, 0x32	; 50
     26e:	72 43       	sbci	r23, 0x32	; 50
     270:	72 43       	sbci	r23, 0x32	; 50
     272:	72 43       	sbci	r23, 0x32	; 50
     274:	72 43       	sbci	r23, 0x32	; 50
     276:	72 43       	sbci	r23, 0x32	; 50
     278:	72 43       	sbci	r23, 0x32	; 50
     27a:	72 43       	sbci	r23, 0x32	; 50
     27c:	72 43       	sbci	r23, 0x32	; 50
     27e:	72 43       	sbci	r23, 0x32	; 50
     280:	72 43       	sbci	r23, 0x32	; 50
     282:	72 43       	sbci	r23, 0x32	; 50
     284:	78 43       	sbci	r23, 0x38	; 56
     286:	72 43       	sbci	r23, 0x32	; 50
     288:	72 43       	sbci	r23, 0x32	; 50
     28a:	72 43       	sbci	r23, 0x32	; 50
     28c:	72 43       	sbci	r23, 0x32	; 50
     28e:	72 43       	sbci	r23, 0x32	; 50
     290:	72 43       	sbci	r23, 0x32	; 50
     292:	72 43       	sbci	r23, 0x32	; 50
     294:	72 43       	sbci	r23, 0x32	; 50
     296:	72 43       	sbci	r23, 0x32	; 50
     298:	72 43       	sbci	r23, 0x32	; 50
     29a:	72 43       	sbci	r23, 0x32	; 50
     29c:	72 43       	sbci	r23, 0x32	; 50
     29e:	72 43       	sbci	r23, 0x32	; 50
     2a0:	72 43       	sbci	r23, 0x32	; 50
     2a2:	72 43       	sbci	r23, 0x32	; 50
     2a4:	72 43       	sbci	r23, 0x32	; 50
     2a6:	72 43       	sbci	r23, 0x32	; 50
     2a8:	72 43       	sbci	r23, 0x32	; 50
     2aa:	72 43       	sbci	r23, 0x32	; 50
     2ac:	72 43       	sbci	r23, 0x32	; 50
     2ae:	72 43       	sbci	r23, 0x32	; 50
     2b0:	72 43       	sbci	r23, 0x32	; 50
     2b2:	72 43       	sbci	r23, 0x32	; 50
     2b4:	72 43       	sbci	r23, 0x32	; 50
     2b6:	72 43       	sbci	r23, 0x32	; 50
     2b8:	72 43       	sbci	r23, 0x32	; 50
     2ba:	72 43       	sbci	r23, 0x32	; 50
     2bc:	72 43       	sbci	r23, 0x32	; 50
     2be:	72 43       	sbci	r23, 0x32	; 50
     2c0:	72 43       	sbci	r23, 0x32	; 50
     2c2:	72 43       	sbci	r23, 0x32	; 50
     2c4:	72 43       	sbci	r23, 0x32	; 50
     2c6:	72 43       	sbci	r23, 0x32	; 50
     2c8:	72 43       	sbci	r23, 0x32	; 50
     2ca:	72 43       	sbci	r23, 0x32	; 50
     2cc:	72 43       	sbci	r23, 0x32	; 50
     2ce:	72 43       	sbci	r23, 0x32	; 50
     2d0:	72 43       	sbci	r23, 0x32	; 50
     2d2:	72 43       	sbci	r23, 0x32	; 50
     2d4:	72 43       	sbci	r23, 0x32	; 50
     2d6:	72 43       	sbci	r23, 0x32	; 50
     2d8:	72 43       	sbci	r23, 0x32	; 50
     2da:	72 43       	sbci	r23, 0x32	; 50
     2dc:	72 43       	sbci	r23, 0x32	; 50
     2de:	78 43       	sbci	r23, 0x38	; 56
     2e0:	72 43       	sbci	r23, 0x32	; 50
     2e2:	72 43       	sbci	r23, 0x32	; 50
     2e4:	72 43       	sbci	r23, 0x32	; 50
     2e6:	72 43       	sbci	r23, 0x32	; 50
     2e8:	72 43       	sbci	r23, 0x32	; 50
     2ea:	78 43       	sbci	r23, 0x38	; 56
     2ec:	72 43       	sbci	r23, 0x32	; 50
     2ee:	72 43       	sbci	r23, 0x32	; 50
     2f0:	72 43       	sbci	r23, 0x32	; 50
     2f2:	78 43       	sbci	r23, 0x38	; 56
     2f4:	72 43       	sbci	r23, 0x32	; 50
     2f6:	72 43       	sbci	r23, 0x32	; 50
     2f8:	72 43       	sbci	r23, 0x32	; 50
     2fa:	72 43       	sbci	r23, 0x32	; 50
     2fc:	72 43       	sbci	r23, 0x32	; 50
     2fe:	72 43       	sbci	r23, 0x32	; 50
     300:	72 43       	sbci	r23, 0x32	; 50
     302:	78 43       	sbci	r23, 0x38	; 56
     304:	72 43       	sbci	r23, 0x32	; 50
     306:	72 43       	sbci	r23, 0x32	; 50
     308:	72 43       	sbci	r23, 0x32	; 50
     30a:	78 43       	sbci	r23, 0x38	; 56
     30c:	72 43       	sbci	r23, 0x32	; 50
     30e:	78 43       	sbci	r23, 0x38	; 56
     310:	2c 43       	sbci	r18, 0x3C	; 60
     312:	8b 51       	subi	r24, 0x1B	; 27
     314:	81 51       	subi	r24, 0x11	; 17
     316:	86 51       	subi	r24, 0x16	; 22
     318:	72 51       	subi	r23, 0x12	; 18
     31a:	7c 51       	subi	r23, 0x1C	; 28
     31c:	68 51       	subi	r22, 0x18	; 24
     31e:	77 51       	subi	r23, 0x17	; 23
     320:	6d 51       	subi	r22, 0x1D	; 29
     322:	f1 51       	subi	r31, 0x11	; 17
     324:	e6 51       	subi	r30, 0x16	; 22
     326:	ee 51       	subi	r30, 0x1E	; 30
     328:	b7 51       	subi	r27, 0x17	; 23
     32a:	e0 51       	subi	r30, 0x10	; 16
     32c:	ac 51       	subi	r26, 0x1C	; 28
     32e:	dc 51       	subi	r29, 0x1C	; 28
     330:	b3 51       	subi	r27, 0x13	; 19
     332:	4d 52       	subi	r20, 0x2D	; 45
     334:	5f 52       	subi	r21, 0x2F	; 47
     336:	5c 52       	subi	r21, 0x2C	; 44
     338:	59 52       	subi	r21, 0x29	; 41
     33a:	56 52       	subi	r21, 0x26	; 38
     33c:	50 52       	subi	r21, 0x20	; 32
     33e:	53 52       	subi	r21, 0x23	; 35
     340:	2d 53       	subi	r18, 0x3D	; 61
     342:	45 53       	subi	r20, 0x35	; 53
     344:	30 53       	subi	r19, 0x30	; 48
     346:	33 53       	subi	r19, 0x33	; 51
     348:	36 53       	subi	r19, 0x36	; 54
     34a:	39 53       	subi	r19, 0x39	; 57
     34c:	3c 53       	subi	r19, 0x3C	; 60
     34e:	3f 53       	subi	r19, 0x3F	; 63
     350:	51 53       	subi	r21, 0x31	; 49
     352:	75 53       	subi	r23, 0x35	; 53
     354:	54 53       	subi	r21, 0x34	; 52
     356:	57 53       	subi	r21, 0x37	; 55
     358:	5a 53       	subi	r21, 0x3A	; 58
     35a:	5d 53       	subi	r21, 0x3D	; 61
     35c:	60 53       	subi	r22, 0x30	; 48
     35e:	63 53       	subi	r22, 0x33	; 51
     360:	66 53       	subi	r22, 0x36	; 54
     362:	69 53       	subi	r22, 0x39	; 57
     364:	6c 53       	subi	r22, 0x3C	; 60
     366:	6f 53       	subi	r22, 0x3F	; 63
     368:	b6 53       	subi	r27, 0x36	; 54
     36a:	b8 53       	subi	r27, 0x38	; 56
     36c:	b6 53       	subi	r27, 0x36	; 54
     36e:	bf 53       	subi	r27, 0x3F	; 63
     370:	b6 53       	subi	r27, 0x36	; 54
     372:	bf 53       	subi	r27, 0x3F	; 63
     374:	b6 53       	subi	r27, 0x36	; 54
     376:	b6 53       	subi	r27, 0x36	; 54
     378:	bf 53       	subi	r27, 0x3F	; 63
     37a:	b6 53       	subi	r27, 0x36	; 54
     37c:	bf 53       	subi	r27, 0x3F	; 63
     37e:	b6 53       	subi	r27, 0x36	; 54

00000380 <__trampolines_end>:
     380:	00 00       	nop
     382:	00 00       	nop
     384:	00 00       	nop
     386:	20 50       	subi	r18, 0x00	; 0
     388:	70 50       	subi	r23, 0x00	; 0
     38a:	20 00       	.word	0x0020	; ????
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	50 70       	andi	r21, 0x00	; 0
     390:	20 00       	.word	0x0020	; ????
     392:	00 50       	subi	r16, 0x00	; 0
     394:	70 70       	andi	r23, 0x00	; 0
     396:	20 00       	.word	0x0020	; ????
     398:	00 20       	and	r0, r0
     39a:	70 70       	andi	r23, 0x00	; 0
     39c:	20 00       	.word	0x0020	; ????
     39e:	20 70       	andi	r18, 0x00	; 0
     3a0:	70 20       	and	r7, r0
     3a2:	70 00       	.word	0x0070	; ????
     3a4:	20 20       	and	r2, r0
     3a6:	70 20       	and	r7, r0
     3a8:	70 00       	.word	0x0070	; ????
     3aa:	00 00       	nop
     3ac:	20 00       	.word	0x0020	; ????
     3ae:	00 00       	nop
     3b0:	f0 f0       	brcs	.+60     	; 0x3ee <__trampolines_end+0x6e>
     3b2:	d0 f0       	brcs	.+52     	; 0x3e8 <__trampolines_end+0x68>
     3b4:	f0 f0       	brcs	.+60     	; 0x3f2 <__trampolines_end+0x72>
     3b6:	00 70       	andi	r16, 0x00	; 0
     3b8:	50 70       	andi	r21, 0x00	; 0
     3ba:	00 00       	nop
     3bc:	f0 80       	ld	r15, Z
     3be:	a0 80       	ld	r10, Z
     3c0:	f0 f0       	brcs	.+60     	; 0x3fe <__trampolines_end+0x7e>
     3c2:	00 30       	cpi	r16, 0x00	; 0
     3c4:	10 60       	ori	r17, 0x00	; 0
     3c6:	60 00       	.word	0x0060	; ????
     3c8:	20 50       	subi	r18, 0x00	; 0
     3ca:	20 70       	andi	r18, 0x00	; 0
     3cc:	20 00       	.word	0x0020	; ????
     3ce:	20 30       	cpi	r18, 0x00	; 0
     3d0:	20 20       	and	r2, r0
     3d2:	60 00       	.word	0x0060	; ????
     3d4:	20 30       	cpi	r18, 0x00	; 0
     3d6:	50 10       	cpse	r5, r0
     3d8:	20 00       	.word	0x0020	; ????
     3da:	20 70       	andi	r18, 0x00	; 0
     3dc:	50 70       	andi	r21, 0x00	; 0
     3de:	20 00       	.word	0x0020	; ????
     3e0:	40 60       	ori	r20, 0x00	; 0
     3e2:	70 60       	ori	r23, 0x00	; 0
     3e4:	40 00       	.word	0x0040	; ????
     3e6:	10 30       	cpi	r17, 0x00	; 0
     3e8:	70 30       	cpi	r23, 0x00	; 0
     3ea:	10 00       	.word	0x0010	; ????
     3ec:	20 70       	andi	r18, 0x00	; 0
     3ee:	20 70       	andi	r18, 0x00	; 0
     3f0:	20 00       	.word	0x0020	; ????
     3f2:	50 50       	subi	r21, 0x00	; 0
     3f4:	50 00       	.word	0x0050	; ????
     3f6:	50 00       	.word	0x0050	; ????
     3f8:	70 d0       	rcall	.+224    	; 0x4da <__trampolines_end+0x15a>
     3fa:	d0 50       	subi	r29, 0x00	; 0
     3fc:	50 00       	.word	0x0050	; ????
     3fe:	30 60       	ori	r19, 0x00	; 0
     400:	50 30       	cpi	r21, 0x00	; 0
     402:	60 00       	.word	0x0060	; ????
     404:	00 00       	nop
     406:	00 00       	nop
     408:	70 00       	.word	0x0070	; ????
     40a:	20 70       	andi	r18, 0x00	; 0
     40c:	20 70       	andi	r18, 0x00	; 0
     40e:	20 70       	andi	r18, 0x00	; 0
     410:	20 70       	andi	r18, 0x00	; 0
     412:	20 20       	and	r2, r0
     414:	20 00       	.word	0x0020	; ????
     416:	20 20       	and	r2, r0
     418:	20 70       	andi	r18, 0x00	; 0
     41a:	20 00       	.word	0x0020	; ????
     41c:	00 20       	and	r0, r0
     41e:	f0 20       	and	r15, r0
     420:	00 00       	nop
     422:	00 40       	sbci	r16, 0x00	; 0
     424:	f0 40       	sbci	r31, 0x00	; 0
     426:	00 00       	nop
     428:	00 00       	nop
     42a:	40 70       	andi	r20, 0x00	; 0
     42c:	00 00       	nop
     42e:	00 50       	subi	r16, 0x00	; 0
     430:	70 50       	subi	r23, 0x00	; 0
     432:	00 00       	nop
     434:	00 20       	and	r0, r0
     436:	70 70       	andi	r23, 0x00	; 0
     438:	00 00       	nop
     43a:	00 70       	andi	r16, 0x00	; 0
     43c:	70 20       	and	r7, r0
	...
     446:	20 20       	and	r2, r0
     448:	20 00       	.word	0x0020	; ????
     44a:	20 00       	.word	0x0020	; ????
     44c:	50 50       	subi	r21, 0x00	; 0
     44e:	00 00       	nop
     450:	00 00       	nop
     452:	50 70       	andi	r21, 0x00	; 0
     454:	50 70       	andi	r21, 0x00	; 0
     456:	50 00       	.word	0x0050	; ????
     458:	20 30       	cpi	r18, 0x00	; 0
     45a:	60 30       	cpi	r22, 0x00	; 0
     45c:	60 20       	and	r6, r0
     45e:	40 10       	cpse	r4, r0
     460:	20 40       	sbci	r18, 0x00	; 0
     462:	10 00       	.word	0x0010	; ????
     464:	20 50       	subi	r18, 0x00	; 0
     466:	30 50       	subi	r19, 0x00	; 0
     468:	70 00       	.word	0x0070	; ????
     46a:	60 40       	sbci	r22, 0x00	; 0
     46c:	00 00       	nop
     46e:	00 00       	nop
     470:	20 40       	sbci	r18, 0x00	; 0
     472:	40 40       	sbci	r20, 0x00	; 0
     474:	20 00       	.word	0x0020	; ????
     476:	40 20       	and	r4, r0
     478:	20 20       	and	r2, r0
     47a:	40 00       	.word	0x0040	; ????
     47c:	50 20       	and	r5, r0
     47e:	70 20       	and	r7, r0
     480:	50 00       	.word	0x0050	; ????
     482:	00 20       	and	r0, r0
     484:	70 20       	and	r7, r0
     486:	00 00       	nop
     488:	00 00       	nop
     48a:	00 00       	nop
     48c:	60 40       	sbci	r22, 0x00	; 0
     48e:	00 00       	nop
     490:	70 00       	.word	0x0070	; ????
     492:	00 00       	nop
     494:	00 00       	nop
     496:	00 00       	nop
     498:	20 00       	.word	0x0020	; ????
     49a:	10 10       	cpse	r1, r0
     49c:	20 40       	sbci	r18, 0x00	; 0
     49e:	40 00       	.word	0x0040	; ????
     4a0:	20 50       	subi	r18, 0x00	; 0
     4a2:	50 50       	subi	r21, 0x00	; 0
     4a4:	20 00       	.word	0x0020	; ????
     4a6:	20 60       	ori	r18, 0x00	; 0
     4a8:	20 20       	and	r2, r0
     4aa:	70 00       	.word	0x0070	; ????
     4ac:	60 10       	cpse	r6, r0
     4ae:	20 40       	sbci	r18, 0x00	; 0
     4b0:	70 00       	.word	0x0070	; ????
     4b2:	60 10       	cpse	r6, r0
     4b4:	20 10       	cpse	r2, r0
     4b6:	60 00       	.word	0x0060	; ????
     4b8:	10 50       	subi	r17, 0x00	; 0
     4ba:	70 10       	cpse	r7, r0
     4bc:	10 00       	.word	0x0010	; ????
     4be:	70 40       	sbci	r23, 0x00	; 0
     4c0:	60 10       	cpse	r6, r0
     4c2:	60 00       	.word	0x0060	; ????
     4c4:	20 40       	sbci	r18, 0x00	; 0
     4c6:	60 50       	subi	r22, 0x00	; 0
     4c8:	20 00       	.word	0x0020	; ????
     4ca:	70 10       	cpse	r7, r0
     4cc:	30 20       	and	r3, r0
     4ce:	20 00       	.word	0x0020	; ????
     4d0:	20 50       	subi	r18, 0x00	; 0
     4d2:	20 50       	subi	r18, 0x00	; 0
     4d4:	20 00       	.word	0x0020	; ????
     4d6:	20 50       	subi	r18, 0x00	; 0
     4d8:	30 10       	cpse	r3, r0
     4da:	20 00       	.word	0x0020	; ????
     4dc:	00 00       	nop
     4de:	20 00       	.word	0x0020	; ????
     4e0:	20 00       	.word	0x0020	; ????
     4e2:	00 00       	nop
     4e4:	20 00       	.word	0x0020	; ????
     4e6:	60 40       	sbci	r22, 0x00	; 0
     4e8:	10 20       	and	r1, r0
     4ea:	40 20       	and	r4, r0
     4ec:	10 00       	.word	0x0010	; ????
     4ee:	00 00       	nop
     4f0:	70 00       	.word	0x0070	; ????
     4f2:	70 00       	.word	0x0070	; ????
     4f4:	40 20       	and	r4, r0
     4f6:	10 20       	and	r1, r0
     4f8:	40 00       	.word	0x0040	; ????
     4fa:	60 10       	cpse	r6, r0
     4fc:	20 00       	.word	0x0020	; ????
     4fe:	20 00       	.word	0x0020	; ????
     500:	70 50       	subi	r23, 0x00	; 0
     502:	50 40       	sbci	r21, 0x00	; 0
     504:	70 00       	.word	0x0070	; ????
     506:	20 50       	subi	r18, 0x00	; 0
     508:	70 50       	subi	r23, 0x00	; 0
     50a:	50 00       	.word	0x0050	; ????
     50c:	60 50       	subi	r22, 0x00	; 0
     50e:	60 50       	subi	r22, 0x00	; 0
     510:	60 00       	.word	0x0060	; ????
     512:	30 40       	sbci	r19, 0x00	; 0
     514:	40 40       	sbci	r20, 0x00	; 0
     516:	30 00       	.word	0x0030	; ????
     518:	60 50       	subi	r22, 0x00	; 0
     51a:	50 50       	subi	r21, 0x00	; 0
     51c:	60 00       	.word	0x0060	; ????
     51e:	70 40       	sbci	r23, 0x00	; 0
     520:	60 40       	sbci	r22, 0x00	; 0
     522:	70 00       	.word	0x0070	; ????
     524:	70 40       	sbci	r23, 0x00	; 0
     526:	60 40       	sbci	r22, 0x00	; 0
     528:	40 00       	.word	0x0040	; ????
     52a:	30 40       	sbci	r19, 0x00	; 0
     52c:	50 50       	subi	r21, 0x00	; 0
     52e:	30 00       	.word	0x0030	; ????
     530:	50 50       	subi	r21, 0x00	; 0
     532:	70 50       	subi	r23, 0x00	; 0
     534:	50 00       	.word	0x0050	; ????
     536:	70 20       	and	r7, r0
     538:	20 20       	and	r2, r0
     53a:	70 00       	.word	0x0070	; ????
     53c:	10 10       	cpse	r1, r0
     53e:	10 50       	subi	r17, 0x00	; 0
     540:	20 00       	.word	0x0020	; ????
     542:	50 50       	subi	r21, 0x00	; 0
     544:	60 50       	subi	r22, 0x00	; 0
     546:	50 00       	.word	0x0050	; ????
     548:	40 40       	sbci	r20, 0x00	; 0
     54a:	40 40       	sbci	r20, 0x00	; 0
     54c:	70 00       	.word	0x0070	; ????
     54e:	50 70       	andi	r21, 0x00	; 0
     550:	70 50       	subi	r23, 0x00	; 0
     552:	50 00       	.word	0x0050	; ????
     554:	60 50       	subi	r22, 0x00	; 0
     556:	50 50       	subi	r21, 0x00	; 0
     558:	50 00       	.word	0x0050	; ????
     55a:	70 50       	subi	r23, 0x00	; 0
     55c:	50 50       	subi	r21, 0x00	; 0
     55e:	70 00       	.word	0x0070	; ????
     560:	60 50       	subi	r22, 0x00	; 0
     562:	60 40       	sbci	r22, 0x00	; 0
     564:	40 00       	.word	0x0040	; ????
     566:	20 50       	subi	r18, 0x00	; 0
     568:	50 70       	andi	r21, 0x00	; 0
     56a:	30 00       	.word	0x0030	; ????
     56c:	60 50       	subi	r22, 0x00	; 0
     56e:	60 50       	subi	r22, 0x00	; 0
     570:	50 00       	.word	0x0050	; ????
     572:	30 40       	sbci	r19, 0x00	; 0
     574:	70 10       	cpse	r7, r0
     576:	60 00       	.word	0x0060	; ????
     578:	70 20       	and	r7, r0
     57a:	20 20       	and	r2, r0
     57c:	20 00       	.word	0x0020	; ????
     57e:	50 50       	subi	r21, 0x00	; 0
     580:	50 50       	subi	r21, 0x00	; 0
     582:	70 00       	.word	0x0070	; ????
     584:	50 50       	subi	r21, 0x00	; 0
     586:	50 50       	subi	r21, 0x00	; 0
     588:	20 00       	.word	0x0020	; ????
     58a:	50 50       	subi	r21, 0x00	; 0
     58c:	70 70       	andi	r23, 0x00	; 0
     58e:	50 00       	.word	0x0050	; ????
     590:	50 50       	subi	r21, 0x00	; 0
     592:	20 50       	subi	r18, 0x00	; 0
     594:	50 00       	.word	0x0050	; ????
     596:	50 50       	subi	r21, 0x00	; 0
     598:	20 20       	and	r2, r0
     59a:	20 00       	.word	0x0020	; ????
     59c:	70 10       	cpse	r7, r0
     59e:	20 40       	sbci	r18, 0x00	; 0
     5a0:	70 00       	.word	0x0070	; ????
     5a2:	60 40       	sbci	r22, 0x00	; 0
     5a4:	40 40       	sbci	r20, 0x00	; 0
     5a6:	60 00       	.word	0x0060	; ????
     5a8:	40 40       	sbci	r20, 0x00	; 0
     5aa:	20 10       	cpse	r2, r0
     5ac:	10 00       	.word	0x0010	; ????
     5ae:	60 20       	and	r6, r0
     5b0:	20 20       	and	r2, r0
     5b2:	60 00       	.word	0x0060	; ????
     5b4:	20 50       	subi	r18, 0x00	; 0
	...
     5be:	00 f0       	brcs	.+0      	; 0x5c0 <__trampolines_end+0x240>
     5c0:	60 20       	and	r6, r0
     5c2:	00 00       	nop
     5c4:	00 00       	nop
     5c6:	00 00       	nop
     5c8:	30 50       	subi	r19, 0x00	; 0
     5ca:	70 00       	.word	0x0070	; ????
     5cc:	40 40       	sbci	r20, 0x00	; 0
     5ce:	60 50       	subi	r22, 0x00	; 0
     5d0:	60 00       	.word	0x0060	; ????
     5d2:	00 00       	nop
     5d4:	30 40       	sbci	r19, 0x00	; 0
     5d6:	30 00       	.word	0x0030	; ????
     5d8:	10 10       	cpse	r1, r0
     5da:	30 50       	subi	r19, 0x00	; 0
     5dc:	30 00       	.word	0x0030	; ????
     5de:	00 00       	nop
     5e0:	70 60       	ori	r23, 0x00	; 0
     5e2:	30 00       	.word	0x0030	; ????
     5e4:	10 20       	and	r1, r0
     5e6:	70 20       	and	r7, r0
     5e8:	20 00       	.word	0x0020	; ????
     5ea:	00 00       	nop
     5ec:	70 50       	subi	r23, 0x00	; 0
     5ee:	10 70       	andi	r17, 0x00	; 0
     5f0:	40 40       	sbci	r20, 0x00	; 0
     5f2:	60 50       	subi	r22, 0x00	; 0
     5f4:	50 00       	.word	0x0050	; ????
     5f6:	20 00       	.word	0x0020	; ????
     5f8:	20 20       	and	r2, r0
     5fa:	20 00       	.word	0x0020	; ????
     5fc:	20 00       	.word	0x0020	; ????
     5fe:	20 20       	and	r2, r0
     600:	20 60       	ori	r18, 0x00	; 0
     602:	40 40       	sbci	r20, 0x00	; 0
     604:	50 60       	ori	r21, 0x00	; 0
     606:	50 00       	.word	0x0050	; ????
     608:	20 20       	and	r2, r0
     60a:	20 20       	and	r2, r0
     60c:	20 00       	.word	0x0020	; ????
     60e:	00 00       	nop
     610:	70 70       	andi	r23, 0x00	; 0
     612:	50 00       	.word	0x0050	; ????
     614:	00 00       	nop
     616:	60 50       	subi	r22, 0x00	; 0
     618:	50 00       	.word	0x0050	; ????
     61a:	00 00       	nop
     61c:	20 50       	subi	r18, 0x00	; 0
     61e:	20 00       	.word	0x0020	; ????
     620:	00 00       	nop
     622:	60 50       	subi	r22, 0x00	; 0
     624:	60 40       	sbci	r22, 0x00	; 0
     626:	00 00       	nop
     628:	30 50       	subi	r19, 0x00	; 0
     62a:	30 10       	cpse	r3, r0
     62c:	00 00       	nop
     62e:	60 40       	sbci	r22, 0x00	; 0
     630:	40 00       	.word	0x0040	; ????
     632:	00 00       	nop
     634:	30 20       	and	r3, r0
     636:	60 00       	.word	0x0060	; ????
     638:	00 20       	and	r0, r0
     63a:	70 20       	and	r7, r0
     63c:	30 00       	.word	0x0030	; ????
     63e:	00 00       	nop
     640:	50 50       	subi	r21, 0x00	; 0
     642:	70 00       	.word	0x0070	; ????
     644:	00 00       	nop
     646:	50 50       	subi	r21, 0x00	; 0
     648:	20 00       	.word	0x0020	; ????
     64a:	00 00       	nop
     64c:	50 70       	andi	r21, 0x00	; 0
     64e:	70 00       	.word	0x0070	; ????
     650:	00 00       	nop
     652:	50 20       	and	r5, r0
     654:	50 00       	.word	0x0050	; ????
     656:	00 00       	nop
     658:	50 50       	subi	r21, 0x00	; 0
     65a:	20 40       	sbci	r18, 0x00	; 0
     65c:	00 00       	nop
     65e:	60 20       	and	r6, r0
     660:	30 00       	.word	0x0030	; ????
     662:	30 20       	and	r3, r0
     664:	60 20       	and	r6, r0
     666:	30 00       	.word	0x0030	; ????
     668:	20 20       	and	r2, r0
     66a:	20 20       	and	r2, r0
     66c:	20 00       	.word	0x0020	; ????
     66e:	60 20       	and	r6, r0
     670:	30 20       	and	r3, r0
     672:	60 00       	.word	0x0060	; ????
     674:	50 a0       	ldd	r5, Z+32	; 0x20
     676:	00 00       	nop
     678:	00 00       	nop
     67a:	00 20       	and	r0, r0
     67c:	50 70       	andi	r21, 0x00	; 0
     67e:	00 00       	nop
     680:	30 40       	sbci	r19, 0x00	; 0
     682:	40 70       	andi	r20, 0x00	; 0
     684:	20 40       	sbci	r18, 0x00	; 0
     686:	50 00       	.word	0x0050	; ????
     688:	50 50       	subi	r21, 0x00	; 0
     68a:	30 00       	.word	0x0030	; ????
     68c:	10 20       	and	r1, r0
     68e:	70 60       	ori	r23, 0x00	; 0
     690:	30 00       	.word	0x0030	; ????
     692:	20 50       	subi	r18, 0x00	; 0
     694:	30 50       	subi	r19, 0x00	; 0
     696:	70 00       	.word	0x0070	; ????
     698:	50 00       	.word	0x0050	; ????
     69a:	30 50       	subi	r19, 0x00	; 0
     69c:	70 00       	.word	0x0070	; ????
     69e:	40 20       	and	r4, r0
     6a0:	30 50       	subi	r19, 0x00	; 0
     6a2:	70 00       	.word	0x0070	; ????
     6a4:	20 00       	.word	0x0020	; ????
     6a6:	30 50       	subi	r19, 0x00	; 0
     6a8:	70 00       	.word	0x0070	; ????
     6aa:	00 70       	andi	r16, 0x00	; 0
     6ac:	40 70       	andi	r20, 0x00	; 0
     6ae:	20 60       	ori	r18, 0x00	; 0
     6b0:	20 50       	subi	r18, 0x00	; 0
     6b2:	70 60       	ori	r23, 0x00	; 0
     6b4:	30 00       	.word	0x0030	; ????
     6b6:	50 00       	.word	0x0050	; ????
     6b8:	70 60       	ori	r23, 0x00	; 0
     6ba:	30 00       	.word	0x0030	; ????
     6bc:	40 20       	and	r4, r0
     6be:	70 60       	ori	r23, 0x00	; 0
     6c0:	30 00       	.word	0x0030	; ????
     6c2:	50 00       	.word	0x0050	; ????
     6c4:	20 20       	and	r2, r0
     6c6:	20 00       	.word	0x0020	; ????
     6c8:	20 50       	subi	r18, 0x00	; 0
     6ca:	00 20       	and	r0, r0
     6cc:	20 00       	.word	0x0020	; ????
     6ce:	40 20       	and	r4, r0
     6d0:	00 20       	and	r0, r0
     6d2:	20 00       	.word	0x0020	; ????
     6d4:	50 20       	and	r5, r0
     6d6:	50 70       	andi	r21, 0x00	; 0
     6d8:	50 00       	.word	0x0050	; ????
     6da:	20 20       	and	r2, r0
     6dc:	50 70       	andi	r21, 0x00	; 0
     6de:	50 00       	.word	0x0050	; ????
     6e0:	10 20       	and	r1, r0
     6e2:	70 60       	ori	r23, 0x00	; 0
     6e4:	70 00       	.word	0x0070	; ????
     6e6:	00 00       	nop
     6e8:	30 70       	andi	r19, 0x00	; 0
     6ea:	60 00       	.word	0x0060	; ????
     6ec:	30 60       	ori	r19, 0x00	; 0
     6ee:	70 60       	ori	r23, 0x00	; 0
     6f0:	70 00       	.word	0x0070	; ????
     6f2:	20 50       	subi	r18, 0x00	; 0
     6f4:	20 50       	subi	r18, 0x00	; 0
     6f6:	20 00       	.word	0x0020	; ????
     6f8:	50 00       	.word	0x0050	; ????
     6fa:	20 50       	subi	r18, 0x00	; 0
     6fc:	20 00       	.word	0x0020	; ????
     6fe:	40 20       	and	r4, r0
     700:	20 50       	subi	r18, 0x00	; 0
     702:	20 00       	.word	0x0020	; ????
     704:	20 50       	subi	r18, 0x00	; 0
     706:	00 50       	subi	r16, 0x00	; 0
     708:	70 00       	.word	0x0070	; ????
     70a:	40 20       	and	r4, r0
     70c:	50 50       	subi	r21, 0x00	; 0
     70e:	70 00       	.word	0x0070	; ????
     710:	50 00       	.word	0x0050	; ????
     712:	50 50       	subi	r21, 0x00	; 0
     714:	20 40       	sbci	r18, 0x00	; 0
     716:	50 20       	and	r5, r0
     718:	50 50       	subi	r21, 0x00	; 0
     71a:	20 00       	.word	0x0020	; ????
     71c:	50 00       	.word	0x0050	; ????
     71e:	50 50       	subi	r21, 0x00	; 0
     720:	70 00       	.word	0x0070	; ????
     722:	20 70       	andi	r18, 0x00	; 0
     724:	40 70       	andi	r20, 0x00	; 0
     726:	20 00       	.word	0x0020	; ????
     728:	10 20       	and	r1, r0
     72a:	70 20       	and	r7, r0
     72c:	70 00       	.word	0x0070	; ????
     72e:	50 70       	andi	r21, 0x00	; 0
     730:	20 70       	andi	r18, 0x00	; 0
     732:	20 00       	.word	0x0020	; ????
     734:	00 60       	ori	r16, 0x00	; 0
     736:	60 50       	subi	r22, 0x00	; 0
     738:	50 00       	.word	0x0050	; ????
     73a:	30 20       	and	r3, r0
     73c:	30 20       	and	r3, r0
     73e:	60 00       	.word	0x0060	; ????
     740:	10 20       	and	r1, r0
     742:	30 50       	subi	r19, 0x00	; 0
     744:	70 00       	.word	0x0070	; ????
     746:	10 20       	and	r1, r0
     748:	00 20       	and	r0, r0
     74a:	20 00       	.word	0x0020	; ????
     74c:	10 20       	and	r1, r0
     74e:	70 50       	subi	r23, 0x00	; 0
     750:	70 00       	.word	0x0070	; ????
     752:	10 20       	and	r1, r0
     754:	00 50       	subi	r16, 0x00	; 0
     756:	70 00       	.word	0x0070	; ????
     758:	70 00       	.word	0x0070	; ????
     75a:	70 50       	subi	r23, 0x00	; 0
     75c:	50 00       	.word	0x0050	; ????
     75e:	70 00       	.word	0x0070	; ????
     760:	50 70       	andi	r21, 0x00	; 0
     762:	50 00       	.word	0x0050	; ????
     764:	30 50       	subi	r19, 0x00	; 0
     766:	70 00       	.word	0x0070	; ????
     768:	70 00       	.word	0x0070	; ????
     76a:	20 50       	subi	r18, 0x00	; 0
     76c:	20 00       	.word	0x0020	; ????
     76e:	70 00       	.word	0x0070	; ????
     770:	20 00       	.word	0x0020	; ????
     772:	20 40       	sbci	r18, 0x00	; 0
     774:	30 00       	.word	0x0030	; ????
     776:	00 70       	andi	r16, 0x00	; 0
     778:	40 40       	sbci	r20, 0x00	; 0
     77a:	00 00       	nop
     77c:	00 e0       	ldi	r16, 0x00	; 0
     77e:	20 20       	and	r2, r0
     780:	00 00       	nop
     782:	40 50       	subi	r20, 0x00	; 0
     784:	20 50       	subi	r18, 0x00	; 0
     786:	30 00       	.word	0x0030	; ????
     788:	40 50       	subi	r20, 0x00	; 0
     78a:	20 70       	andi	r18, 0x00	; 0
     78c:	10 00       	.word	0x0010	; ????
     78e:	20 00       	.word	0x0020	; ????
     790:	20 20       	and	r2, r0
     792:	20 00       	.word	0x0020	; ????
     794:	00 50       	subi	r16, 0x00	; 0
     796:	a0 50       	subi	r26, 0x00	; 0
     798:	00 00       	nop
     79a:	00 a0       	ldd	r0, Z+32	; 0x20
     79c:	50 a0       	ldd	r5, Z+32	; 0x20
     79e:	00 00       	nop
     7a0:	40 10       	cpse	r4, r0
     7a2:	40 10       	cpse	r4, r0
     7a4:	40 10       	cpse	r4, r0
     7a6:	50 a0       	ldd	r5, Z+32	; 0x20
     7a8:	50 a0       	ldd	r5, Z+32	; 0x20
     7aa:	50 a0       	ldd	r5, Z+32	; 0x20
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	b0 e0       	ldi	r27, 0x00	; 0
     7b2:	20 20       	and	r2, r0
     7b4:	20 20       	and	r2, r0
     7b6:	20 20       	and	r2, r0
     7b8:	20 20       	and	r2, r0
     7ba:	e0 20       	and	r14, r0
     7bc:	20 20       	and	r2, r0
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	20 20       	and	r2, r0
     7c4:	50 50       	subi	r21, 0x00	; 0
     7c6:	d0 50       	subi	r29, 0x00	; 0
     7c8:	50 50       	subi	r21, 0x00	; 0
     7ca:	00 00       	nop
     7cc:	f0 50       	subi	r31, 0x00	; 0
     7ce:	50 50       	subi	r21, 0x00	; 0
     7d0:	00 e0       	ldi	r16, 0x00	; 0
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	20 20       	and	r2, r0
     7d6:	50 d0       	rcall	.+160    	; 0x878 <__trampolines_end+0x4f8>
     7d8:	10 d0       	rcall	.+32     	; 0x7fa <__trampolines_end+0x47a>
     7da:	50 50       	subi	r21, 0x00	; 0
     7dc:	50 50       	subi	r21, 0x00	; 0
     7de:	50 50       	subi	r21, 0x00	; 0
     7e0:	50 50       	subi	r21, 0x00	; 0
     7e2:	00 f0       	brcs	.+0      	; 0x7e4 <__trampolines_end+0x464>
     7e4:	10 d0       	rcall	.+32     	; 0x806 <__trampolines_end+0x486>
     7e6:	50 50       	subi	r21, 0x00	; 0
     7e8:	50 d0       	rcall	.+160    	; 0x88a <__trampolines_end+0x50a>
     7ea:	10 f0       	brcs	.+4      	; 0x7f0 <__trampolines_end+0x470>
     7ec:	00 00       	nop
     7ee:	50 50       	subi	r21, 0x00	; 0
     7f0:	f0 00       	.word	0x00f0	; ????
     7f2:	00 00       	nop
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	00 00       	nop
     7fa:	00 00       	nop
     7fc:	e0 20       	and	r14, r0
     7fe:	20 20       	and	r2, r0
     800:	20 20       	and	r2, r0
     802:	30 00       	.word	0x0030	; ????
     804:	00 00       	nop
     806:	20 20       	and	r2, r0
     808:	f0 00       	.word	0x00f0	; ????
     80a:	00 00       	nop
     80c:	00 00       	nop
     80e:	f0 20       	and	r15, r0
     810:	20 20       	and	r2, r0
     812:	20 20       	and	r2, r0
     814:	30 20       	and	r3, r0
     816:	20 20       	and	r2, r0
     818:	00 00       	nop
     81a:	f0 00       	.word	0x00f0	; ????
     81c:	00 00       	nop
     81e:	20 20       	and	r2, r0
     820:	f0 20       	and	r15, r0
     822:	20 20       	and	r2, r0
     824:	20 30       	cpi	r18, 0x00	; 0
     826:	20 30       	cpi	r18, 0x00	; 0
     828:	20 20       	and	r2, r0
     82a:	50 50       	subi	r21, 0x00	; 0
     82c:	50 50       	subi	r21, 0x00	; 0
     82e:	50 50       	subi	r21, 0x00	; 0
     830:	50 50       	subi	r21, 0x00	; 0
     832:	40 70       	andi	r20, 0x00	; 0
     834:	00 00       	nop
     836:	00 70       	andi	r16, 0x00	; 0
     838:	40 50       	subi	r20, 0x00	; 0
     83a:	50 50       	subi	r21, 0x00	; 0
     83c:	50 d0       	rcall	.+160    	; 0x8de <__trampolines_end+0x55e>
     83e:	00 f0       	brcs	.+0      	; 0x840 <__trampolines_end+0x4c0>
     840:	00 00       	nop
     842:	00 f0       	brcs	.+0      	; 0x844 <__trampolines_end+0x4c4>
     844:	00 d0       	rcall	.+0      	; 0x846 <__trampolines_end+0x4c6>
     846:	50 50       	subi	r21, 0x00	; 0
     848:	50 50       	subi	r21, 0x00	; 0
     84a:	40 50       	subi	r20, 0x00	; 0
     84c:	50 50       	subi	r21, 0x00	; 0
     84e:	00 f0       	brcs	.+0      	; 0x850 <__trampolines_end+0x4d0>
     850:	00 f0       	brcs	.+0      	; 0x852 <__trampolines_end+0x4d2>
     852:	00 00       	nop
     854:	50 d0       	rcall	.+160    	; 0x8f6 <__trampolines_end+0x576>
     856:	00 d0       	rcall	.+0      	; 0x858 <__trampolines_end+0x4d8>
     858:	50 50       	subi	r21, 0x00	; 0
     85a:	20 f0       	brcs	.+8      	; 0x864 <__trampolines_end+0x4e4>
     85c:	00 f0       	brcs	.+0      	; 0x85e <__trampolines_end+0x4de>
     85e:	00 00       	nop
     860:	50 50       	subi	r21, 0x00	; 0
     862:	f0 00       	.word	0x00f0	; ????
     864:	00 00       	nop
     866:	00 f0       	brcs	.+0      	; 0x868 <__trampolines_end+0x4e8>
     868:	00 f0       	brcs	.+0      	; 0x86a <__trampolines_end+0x4ea>
     86a:	20 20       	and	r2, r0
     86c:	00 00       	nop
     86e:	f0 50       	subi	r31, 0x00	; 0
     870:	50 50       	subi	r21, 0x00	; 0
     872:	50 50       	subi	r21, 0x00	; 0
     874:	70 00       	.word	0x0070	; ????
     876:	00 00       	nop
     878:	20 30       	cpi	r18, 0x00	; 0
     87a:	20 30       	cpi	r18, 0x00	; 0
     87c:	00 00       	nop
     87e:	00 30       	cpi	r16, 0x00	; 0
     880:	20 30       	cpi	r18, 0x00	; 0
     882:	20 20       	and	r2, r0
     884:	00 00       	nop
     886:	70 50       	subi	r23, 0x00	; 0
     888:	50 50       	subi	r21, 0x00	; 0
     88a:	50 50       	subi	r21, 0x00	; 0
     88c:	d0 50       	subi	r29, 0x00	; 0
     88e:	50 50       	subi	r21, 0x00	; 0
     890:	20 f0       	brcs	.+8      	; 0x89a <__trampolines_end+0x51a>
     892:	00 f0       	brcs	.+0      	; 0x894 <__trampolines_end+0x514>
     894:	20 20       	and	r2, r0
     896:	20 20       	and	r2, r0
     898:	e0 00       	.word	0x00e0	; ????
     89a:	00 00       	nop
     89c:	00 00       	nop
     89e:	30 20       	and	r3, r0
     8a0:	20 20       	and	r2, r0
     8a2:	f0 f0       	brcs	.+60     	; 0x8e0 <__trampolines_end+0x560>
     8a4:	f0 f0       	brcs	.+60     	; 0x8e2 <__trampolines_end+0x562>
     8a6:	f0 f0       	brcs	.+60     	; 0x8e4 <__trampolines_end+0x564>
     8a8:	00 00       	nop
     8aa:	00 f0       	brcs	.+0      	; 0x8ac <__trampolines_end+0x52c>
     8ac:	f0 f0       	brcs	.+60     	; 0x8ea <__trampolines_end+0x56a>
     8ae:	c0 c0       	rjmp	.+384    	; 0xa30 <font_5x7+0xb0>
     8b0:	c0 c0       	rjmp	.+384    	; 0xa32 <font_5x7+0xb2>
     8b2:	c0 c0       	rjmp	.+384    	; 0xa34 <font_5x7+0xb4>
     8b4:	30 30       	cpi	r19, 0x00	; 0
     8b6:	30 30       	cpi	r19, 0x00	; 0
     8b8:	30 30       	cpi	r19, 0x00	; 0
     8ba:	f0 f0       	brcs	.+60     	; 0x8f8 <__trampolines_end+0x578>
     8bc:	f0 00       	.word	0x00f0	; ????
     8be:	00 00       	nop
     8c0:	00 00       	nop
     8c2:	70 60       	ori	r23, 0x00	; 0
     8c4:	70 00       	.word	0x0070	; ????
     8c6:	20 50       	subi	r18, 0x00	; 0
     8c8:	60 50       	subi	r22, 0x00	; 0
     8ca:	60 40       	sbci	r22, 0x00	; 0
     8cc:	70 50       	subi	r23, 0x00	; 0
     8ce:	40 40       	sbci	r20, 0x00	; 0
     8d0:	40 00       	.word	0x0040	; ????
     8d2:	70 50       	subi	r23, 0x00	; 0
     8d4:	50 50       	subi	r21, 0x00	; 0
     8d6:	50 00       	.word	0x0050	; ????
     8d8:	70 40       	sbci	r23, 0x00	; 0
     8da:	20 40       	sbci	r18, 0x00	; 0
     8dc:	70 00       	.word	0x0070	; ????
     8de:	00 00       	nop
     8e0:	30 50       	subi	r19, 0x00	; 0
     8e2:	20 00       	.word	0x0020	; ????
     8e4:	00 00       	nop
     8e6:	50 50       	subi	r21, 0x00	; 0
     8e8:	70 40       	sbci	r23, 0x00	; 0
     8ea:	00 10       	cpse	r0, r0
     8ec:	60 20       	and	r6, r0
     8ee:	20 00       	.word	0x0020	; ????
     8f0:	70 20       	and	r7, r0
     8f2:	50 20       	and	r5, r0
     8f4:	70 00       	.word	0x0070	; ????
     8f6:	20 50       	subi	r18, 0x00	; 0
     8f8:	70 50       	subi	r23, 0x00	; 0
     8fa:	20 00       	.word	0x0020	; ????
     8fc:	00 20       	and	r0, r0
     8fe:	50 50       	subi	r21, 0x00	; 0
     900:	50 00       	.word	0x0050	; ????
     902:	30 40       	sbci	r19, 0x00	; 0
     904:	20 50       	subi	r18, 0x00	; 0
     906:	20 00       	.word	0x0020	; ????
     908:	00 00       	nop
     90a:	70 50       	subi	r23, 0x00	; 0
     90c:	70 00       	.word	0x0070	; ????
     90e:	20 70       	andi	r18, 0x00	; 0
     910:	50 70       	andi	r21, 0x00	; 0
     912:	20 00       	.word	0x0020	; ????
     914:	30 40       	sbci	r19, 0x00	; 0
     916:	70 40       	sbci	r23, 0x00	; 0
     918:	30 00       	.word	0x0030	; ????
     91a:	20 50       	subi	r18, 0x00	; 0
     91c:	50 50       	subi	r21, 0x00	; 0
     91e:	50 00       	.word	0x0050	; ????
     920:	70 00       	.word	0x0070	; ????
     922:	70 00       	.word	0x0070	; ????
     924:	70 00       	.word	0x0070	; ????
     926:	20 70       	andi	r18, 0x00	; 0
     928:	20 00       	.word	0x0020	; ????
     92a:	70 00       	.word	0x0070	; ????
     92c:	60 10       	cpse	r6, r0
     92e:	60 00       	.word	0x0060	; ????
     930:	70 00       	.word	0x0070	; ????
     932:	30 40       	sbci	r19, 0x00	; 0
     934:	30 00       	.word	0x0030	; ????
     936:	70 00       	.word	0x0070	; ????
     938:	00 10       	cpse	r0, r0
     93a:	20 20       	and	r2, r0
     93c:	20 20       	and	r2, r0
     93e:	20 20       	and	r2, r0
     940:	20 20       	and	r2, r0
     942:	40 00       	.word	0x0040	; ????
     944:	20 00       	.word	0x0020	; ????
     946:	70 00       	.word	0x0070	; ????
     948:	20 00       	.word	0x0020	; ????
     94a:	00 50       	subi	r16, 0x00	; 0
     94c:	a0 50       	subi	r26, 0x00	; 0
     94e:	a0 00       	.word	0x00a0	; ????
     950:	20 50       	subi	r18, 0x00	; 0
     952:	20 00       	.word	0x0020	; ????
     954:	00 00       	nop
     956:	00 20       	and	r0, r0
     958:	70 20       	and	r7, r0
     95a:	00 00       	nop
     95c:	00 00       	nop
     95e:	20 00       	.word	0x0020	; ????
     960:	00 00       	nop
     962:	30 20       	and	r3, r0
     964:	20 60       	ori	r18, 0x00	; 0
     966:	20 00       	.word	0x0020	; ????
     968:	70 50       	subi	r23, 0x00	; 0
     96a:	50 00       	.word	0x0050	; ????
     96c:	00 00       	nop
     96e:	60 20       	and	r6, r0
     970:	40 60       	ori	r20, 0x00	; 0
     972:	00 00       	nop
     974:	00 00       	nop
     976:	60 60       	ori	r22, 0x00	; 0
	...

00000980 <font_5x7>:
     980:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     990:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     9a0:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     9b0:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     9c0:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     9d0:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     9e0:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     9f0:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     a00:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     a10:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     a20:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     a30:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     a40:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     a50:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     a60:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     a70:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     a80:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     a90:	49 49 31 01 01 71 09 07 36 49 49 49 36 46 49 49     II1..q..6III6FII
     aa0:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     ab0:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     ac0:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     ad0:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     ae0:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     af0:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     b00:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     b10:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     b20:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     b30:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     b40:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     b50:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     b60:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     b70:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     b80:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     b90:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     ba0:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     bb0:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     bc0:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     bd0:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     be0:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     bf0:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     c00:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     c10:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
     c20:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     c30:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     c40:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
     c50:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     c60:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
     c70:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
     c80:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
     c90:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     ca0:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     cb0:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     cc0:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     cd0:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     ce0:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     cf0:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     d00:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     d10:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     d20:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     d30:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     d40:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     d50:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     d60:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     d70:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     d80:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     d90:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     da0:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     db0:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     dc0:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     dd0:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     de0:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
     df0:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     e00:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     e10:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     e20:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     e30:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     e40:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     e50:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     e60:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     e70:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00000e7b <__c.2299>:
     e7b:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

00000e88 <_StackPaint>:
 *  the maximum stack usage of the running application.
 */
void _StackPaint(void) __attribute__((naked)) __attribute__((optimize("O3"))) __attribute__((section (".init1")));
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
     e88:	e2 e2       	ldi	r30, 0x22	; 34
     e8a:	fc e2       	ldi	r31, 0x2C	; 44
     e8c:	e3 70       	andi	r30, 0x03	; 3
     e8e:	ff 27       	eor	r31, r31
     e90:	ee 5d       	subi	r30, 0xDE	; 222
     e92:	f3 4d       	sbci	r31, 0xD3	; 211
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
     e94:	2f ef       	ldi	r18, 0xFF	; 255
     e96:	3f e2       	ldi	r19, 0x2F	; 47
     e98:	2c 7f       	andi	r18, 0xFC	; 252
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     e9a:	e2 17       	cp	r30, r18
     e9c:	f3 07       	cpc	r31, r19
     e9e:	58 f4       	brcc	.+22     	; 0xeb6 <_StackPaint+0x2e>
		*fill_pos = __SWAP_ENDIAN32(0xDEADBEEF);
     ea0:	8e ed       	ldi	r24, 0xDE	; 222
     ea2:	9d ea       	ldi	r25, 0xAD	; 173
     ea4:	ae eb       	ldi	r26, 0xBE	; 190
     ea6:	bf ee       	ldi	r27, 0xEF	; 239
     ea8:	81 93       	st	Z+, r24
     eaa:	91 93       	st	Z+, r25
     eac:	a1 93       	st	Z+, r26
     eae:	b1 93       	st	Z+, r27
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     eb0:	e2 17       	cp	r30, r18
     eb2:	f3 07       	cpc	r31, r19
     eb4:	c8 f3       	brcs	.-14     	; 0xea8 <_StackPaint+0x20>
     eb6:	11 24       	eor	r1, r1
     eb8:	1f be       	out	0x3f, r1	; 63
     eba:	cf ef       	ldi	r28, 0xFF	; 255
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	df e2       	ldi	r29, 0x2F	; 47
     ec0:	de bf       	out	0x3e, r29	; 62

00000ec2 <__do_copy_data>:
     ec2:	19 e2       	ldi	r17, 0x29	; 41
     ec4:	a0 e0       	ldi	r26, 0x00	; 0
     ec6:	b0 e2       	ldi	r27, 0x20	; 32
     ec8:	ee e9       	ldi	r30, 0x9E	; 158
     eca:	fc eb       	ldi	r31, 0xBC	; 188
     ecc:	00 e0       	ldi	r16, 0x00	; 0
     ece:	0b bf       	out	0x3b, r16	; 59
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <__do_copy_data+0x14>
     ed2:	07 90       	elpm	r0, Z+
     ed4:	0d 92       	st	X+, r0
     ed6:	a8 32       	cpi	r26, 0x28	; 40
     ed8:	b1 07       	cpc	r27, r17
     eda:	d9 f7       	brne	.-10     	; 0xed2 <__do_copy_data+0x10>

00000edc <__do_clear_bss>:
     edc:	2c e2       	ldi	r18, 0x2C	; 44
     ede:	a8 e2       	ldi	r26, 0x28	; 40
     ee0:	b9 e2       	ldi	r27, 0x29	; 41
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <.do_clear_bss_start>

00000ee4 <.do_clear_bss_loop>:
     ee4:	1d 92       	st	X+, r1

00000ee6 <.do_clear_bss_start>:
     ee6:	a2 32       	cpi	r26, 0x22	; 34
     ee8:	b2 07       	cpc	r27, r18
     eea:	e1 f7       	brne	.-8      	; 0xee4 <.do_clear_bss_loop>
     eec:	0e 94 2c 20 	call	0x4058	; 0x4058 <main>
     ef0:	0c 94 4d 5e 	jmp	0xbc9a	; 0xbc9a <_exit>

00000ef4 <__bad_interrupt>:
     ef4:	85 c8       	rjmp	.-3830   	; 0x0 <__vectors>

00000ef6 <adc_init>:
#include "adc.h"

void adc_init(void) 
{	
	PR.PRPA &= ~0x02; // Clear ADC bit in Power Reduction Port B Register
     ef6:	e0 e7       	ldi	r30, 0x70	; 112
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	81 81       	ldd	r24, Z+1	; 0x01
     efc:	8d 7f       	andi	r24, 0xFD	; 253
     efe:	81 83       	std	Z+1, r24	; 0x01
	
	ADCA.CALL = 0x36;
     f00:	e0 e0       	ldi	r30, 0x00	; 0
     f02:	f2 e0       	ldi	r31, 0x02	; 2
     f04:	86 e3       	ldi	r24, 0x36	; 54
     f06:	84 87       	std	Z+12, r24	; 0x0c
	ADCA.CALH = 0x03;
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	85 87       	std	Z+13, r24	; 0x0d
	//ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
	//ADCA.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
	//ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
	//ADCA.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );	

	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
     f10:	11 a2       	std	Z+33, r1	; 0x21
	ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc;
     f12:	11 82       	std	Z+1, r1	; 0x01
	ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc;
     f14:	96 e0       	ldi	r25, 0x06	; 6
     f16:	94 83       	std	Z+4, r25	; 0x04
	ADCA.REFCTRL = ADC_REFSEL_INTVCC_gc;
     f18:	90 e1       	ldi	r25, 0x10	; 16
     f1a:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL = ADC_EVACT_NONE_gc;
     f1c:	13 82       	std	Z+3, r1	; 0x03
	ADCA.INTFLAGS = ADC_CH0IF_bm;
     f1e:	86 83       	std	Z+6, r24	; 0x06
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     f20:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CTRLA = ADC_ENABLE_bm;
     f22:	80 83       	st	Z, r24
     f24:	08 95       	ret

00000f26 <adc_disable>:
}

void adc_disable(void) 
{	
	PR.PRPA |= 0x02;
     f26:	e0 e7       	ldi	r30, 0x70	; 112
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	81 81       	ldd	r24, Z+1	; 0x01
     f2c:	82 60       	ori	r24, 0x02	; 2
     f2e:	81 83       	std	Z+1, r24	; 0x01
	ADCA.CTRLA &= ~(ADC_ENABLE_bm);
     f30:	e0 e0       	ldi	r30, 0x00	; 0
     f32:	f2 e0       	ldi	r31, 0x02	; 2
     f34:	80 81       	ld	r24, Z
     f36:	8e 7f       	andi	r24, 0xFE	; 254
     f38:	80 83       	st	Z, r24
     f3a:	08 95       	ret

00000f3c <adc_enable_current_measurement>:
	return 0;
}

void adc_enable_current_measurement(void) 
{	
	PORTA.DIRSET |= PIN1_bm;
     f3c:	e0 e0       	ldi	r30, 0x00	; 0
     f3e:	f6 e0       	ldi	r31, 0x06	; 6
     f40:	81 81       	ldd	r24, Z+1	; 0x01
     f42:	82 60       	ori	r24, 0x02	; 2
     f44:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR |= PIN1_bm;
     f46:	86 81       	ldd	r24, Z+6	; 0x06
     f48:	82 60       	ori	r24, 0x02	; 2
     f4a:	86 83       	std	Z+6, r24	; 0x06
     f4c:	08 95       	ret

00000f4e <adc_disable_current_measurement>:
}

void adc_disable_current_measurement(void) 
{	
	PORTA.DIRSET |= PIN1_bm;
     f4e:	e0 e0       	ldi	r30, 0x00	; 0
     f50:	f6 e0       	ldi	r31, 0x06	; 6
     f52:	81 81       	ldd	r24, Z+1	; 0x01
     f54:	82 60       	ori	r24, 0x02	; 2
     f56:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET |= PIN1_bm;
     f58:	85 81       	ldd	r24, Z+5	; 0x05
     f5a:	82 60       	ori	r24, 0x02	; 2
     f5c:	85 83       	std	Z+5, r24	; 0x05
     f5e:	08 95       	ret

00000f60 <adc_read_voltage>:
	PR.PRPA |= 0x02;
	ADCA.CTRLA &= ~(ADC_ENABLE_bm);
}

uint16_t adc_read_voltage(void) 
{	
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
	adc_enable_current_measurement();
     f64:	eb df       	rcall	.-42     	; 0xf3c <adc_enable_current_measurement>
     f66:	2a e0       	ldi	r18, 0x0A	; 10
	uint16_t val = 0;
     f68:	c0 e0       	ldi	r28, 0x00	; 0
     f6a:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < 10; i++) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
     f6c:	e0 e0       	ldi	r30, 0x00	; 0
     f6e:	f2 e0       	ldi	r31, 0x02	; 2
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
     f70:	31 e0       	ldi	r19, 0x01	; 1
uint16_t adc_read_voltage(void) 
{	
	adc_enable_current_measurement();
	uint16_t val = 0;
	for (uint8_t i = 0; i < 10; i++) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
     f72:	80 a1       	ldd	r24, Z+32	; 0x20
     f74:	80 68       	ori	r24, 0x80	; 128
     f76:	80 a3       	std	Z+32, r24	; 0x20
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
     f78:	83 a1       	ldd	r24, Z+35	; 0x23
     f7a:	80 ff       	sbrs	r24, 0
     f7c:	fd cf       	rjmp	.-6      	; 0xf78 <adc_read_voltage+0x18>
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
     f7e:	33 a3       	std	Z+35, r19	; 0x23
		val += ADCA.CH0.RES;
     f80:	84 a1       	ldd	r24, Z+36	; 0x24
     f82:	95 a1       	ldd	r25, Z+37	; 0x25
     f84:	c8 0f       	add	r28, r24
     f86:	d9 1f       	adc	r29, r25
     f88:	21 50       	subi	r18, 0x01	; 1

uint16_t adc_read_voltage(void) 
{	
	adc_enable_current_measurement();
	uint16_t val = 0;
	for (uint8_t i = 0; i < 10; i++) {
     f8a:	99 f7       	brne	.-26     	; 0xf72 <adc_read_voltage+0x12>
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
		val += ADCA.CH0.RES;
	}
	adc_disable_current_measurement();
     f8c:	e0 df       	rcall	.-64     	; 0xf4e <adc_disable_current_measurement>

	return val/10;
     f8e:	9e 01       	movw	r18, r28
     f90:	ad ec       	ldi	r26, 0xCD	; 205
     f92:	bc ec       	ldi	r27, 0xCC	; 204
     f94:	0e 94 47 56 	call	0xac8e	; 0xac8e <__umulhisi3>
}
     f98:	96 95       	lsr	r25
     f9a:	87 95       	ror	r24
     f9c:	96 95       	lsr	r25
     f9e:	87 95       	ror	r24
     fa0:	96 95       	lsr	r25
     fa2:	87 95       	ror	r24
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <adc_get_battery_percentage>:

uint8_t adc_get_battery_percentage(void) 
{	
     faa:	cf 92       	push	r12
     fac:	df 92       	push	r13
     fae:	ef 92       	push	r14
     fb0:	ff 92       	push	r15
	adc_init();
     fb2:	a1 df       	rcall	.-190    	; 0xef6 <adc_init>

	float voltage;
	voltage = (float)adc_read_voltage();
     fb4:	d5 df       	rcall	.-86     	; 0xf60 <adc_read_voltage>
     fb6:	bc 01       	movw	r22, r24
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 56 55 	call	0xaaac	; 0xaaac <__floatunsisf>
	voltage /= 6.6f;
     fc0:	23 e3       	ldi	r18, 0x33	; 51
     fc2:	33 e3       	ldi	r19, 0x33	; 51
     fc4:	43 ed       	ldi	r20, 0xD3	; 211
     fc6:	50 e4       	ldi	r21, 0x40	; 64
     fc8:	0e 94 ee 54 	call	0xa9dc	; 0xa9dc <__divsf3>
     fcc:	6b 01       	movw	r12, r22
     fce:	7c 01       	movw	r14, r24
	
	adc_disable();
     fd0:	aa df       	rcall	.-172    	; 0xf26 <adc_disable>
	
	if (voltage > 600) {
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	46 e1       	ldi	r20, 0x16	; 22
     fd8:	54 e4       	ldi	r21, 0x44	; 68
     fda:	c7 01       	movw	r24, r14
     fdc:	b6 01       	movw	r22, r12
     fde:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <__gesf2>
     fe2:	18 16       	cp	r1, r24
     fe4:	0c f4       	brge	.+2      	; 0xfe8 <adc_get_battery_percentage+0x3e>
     fe6:	60 c0       	rjmp	.+192    	; 0x10a8 <adc_get_battery_percentage+0xfe>
		return 99;
	} else if (voltage > 575) {
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 ec       	ldi	r19, 0xC0	; 192
     fec:	4f e0       	ldi	r20, 0x0F	; 15
     fee:	54 e4       	ldi	r21, 0x44	; 68
     ff0:	c7 01       	movw	r24, r14
     ff2:	b6 01       	movw	r22, r12
     ff4:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <__gesf2>
     ff8:	18 16       	cp	r1, r24
     ffa:	0c f4       	brge	.+2      	; 0xffe <adc_get_battery_percentage+0x54>
     ffc:	57 c0       	rjmp	.+174    	; 0x10ac <adc_get_battery_percentage+0x102>
		return 95;
	} else if (voltage > 550) {
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e8       	ldi	r19, 0x80	; 128
    1002:	49 e0       	ldi	r20, 0x09	; 9
    1004:	54 e4       	ldi	r21, 0x44	; 68
    1006:	c7 01       	movw	r24, r14
    1008:	b6 01       	movw	r22, r12
    100a:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <__gesf2>
    100e:	18 16       	cp	r1, r24
    1010:	0c f4       	brge	.+2      	; 0x1014 <adc_get_battery_percentage+0x6a>
    1012:	4e c0       	rjmp	.+156    	; 0x10b0 <adc_get_battery_percentage+0x106>
		return 90;
	} else if (voltage > 525) {
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e4       	ldi	r19, 0x40	; 64
    1018:	43 e0       	ldi	r20, 0x03	; 3
    101a:	54 e4       	ldi	r21, 0x44	; 68
    101c:	c7 01       	movw	r24, r14
    101e:	b6 01       	movw	r22, r12
    1020:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <__gesf2>
    1024:	18 16       	cp	r1, r24
    1026:	0c f4       	brge	.+2      	; 0x102a <adc_get_battery_percentage+0x80>
    1028:	45 c0       	rjmp	.+138    	; 0x10b4 <adc_get_battery_percentage+0x10a>
		return 80;
	} else if (voltage > 500) {
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	4a ef       	ldi	r20, 0xFA	; 250
    1030:	53 e4       	ldi	r21, 0x43	; 67
    1032:	c7 01       	movw	r24, r14
    1034:	b6 01       	movw	r22, r12
    1036:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <__gesf2>
    103a:	18 16       	cp	r1, r24
    103c:	0c f4       	brge	.+2      	; 0x1040 <adc_get_battery_percentage+0x96>
    103e:	3c c0       	rjmp	.+120    	; 0x10b8 <adc_get_battery_percentage+0x10e>
		return 70;
	} else if (voltage > 475) {
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e8       	ldi	r19, 0x80	; 128
    1044:	4d ee       	ldi	r20, 0xED	; 237
    1046:	53 e4       	ldi	r21, 0x43	; 67
    1048:	c7 01       	movw	r24, r14
    104a:	b6 01       	movw	r22, r12
    104c:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <__gesf2>
    1050:	18 16       	cp	r1, r24
    1052:	a4 f1       	brlt	.+104    	; 0x10bc <adc_get_battery_percentage+0x112>
		return 60;
	} else if (voltage > 450) {
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	41 ee       	ldi	r20, 0xE1	; 225
    105a:	53 e4       	ldi	r21, 0x43	; 67
    105c:	c7 01       	movw	r24, r14
    105e:	b6 01       	movw	r22, r12
    1060:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <__gesf2>
    1064:	18 16       	cp	r1, r24
    1066:	64 f1       	brlt	.+88     	; 0x10c0 <adc_get_battery_percentage+0x116>
		return 50;
	} else if (voltage > 425) {
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e8       	ldi	r19, 0x80	; 128
    106c:	44 ed       	ldi	r20, 0xD4	; 212
    106e:	53 e4       	ldi	r21, 0x43	; 67
    1070:	c7 01       	movw	r24, r14
    1072:	b6 01       	movw	r22, r12
    1074:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <__gesf2>
    1078:	18 16       	cp	r1, r24
    107a:	24 f1       	brlt	.+72     	; 0x10c4 <adc_get_battery_percentage+0x11a>
		return 40;
	} else if (voltage > 415) {
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e8       	ldi	r19, 0x80	; 128
    1080:	4f ec       	ldi	r20, 0xCF	; 207
    1082:	53 e4       	ldi	r21, 0x43	; 67
    1084:	c7 01       	movw	r24, r14
    1086:	b6 01       	movw	r22, r12
    1088:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <__gesf2>
    108c:	18 16       	cp	r1, r24
    108e:	e4 f0       	brlt	.+56     	; 0x10c8 <adc_get_battery_percentage+0x11e>
		return 30;
	} else if (voltage > 400) {
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	48 ec       	ldi	r20, 0xC8	; 200
    1096:	53 e4       	ldi	r21, 0x43	; 67
    1098:	c7 01       	movw	r24, r14
    109a:	b6 01       	movw	r22, r12
    109c:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <__gesf2>
    10a0:	18 16       	cp	r1, r24
    10a2:	a4 f4       	brge	.+40     	; 0x10cc <adc_get_battery_percentage+0x122>
		return 20;
    10a4:	84 e1       	ldi	r24, 0x14	; 20
    10a6:	13 c0       	rjmp	.+38     	; 0x10ce <adc_get_battery_percentage+0x124>
	voltage /= 6.6f;
	
	adc_disable();
	
	if (voltage > 600) {
		return 99;
    10a8:	83 e6       	ldi	r24, 0x63	; 99
    10aa:	11 c0       	rjmp	.+34     	; 0x10ce <adc_get_battery_percentage+0x124>
	} else if (voltage > 575) {
		return 95;
    10ac:	8f e5       	ldi	r24, 0x5F	; 95
    10ae:	0f c0       	rjmp	.+30     	; 0x10ce <adc_get_battery_percentage+0x124>
	} else if (voltage > 550) {
		return 90;
    10b0:	8a e5       	ldi	r24, 0x5A	; 90
    10b2:	0d c0       	rjmp	.+26     	; 0x10ce <adc_get_battery_percentage+0x124>
	} else if (voltage > 525) {
		return 80;
    10b4:	80 e5       	ldi	r24, 0x50	; 80
    10b6:	0b c0       	rjmp	.+22     	; 0x10ce <adc_get_battery_percentage+0x124>
	} else if (voltage > 500) {
		return 70;
    10b8:	86 e4       	ldi	r24, 0x46	; 70
    10ba:	09 c0       	rjmp	.+18     	; 0x10ce <adc_get_battery_percentage+0x124>
	} else if (voltage > 475) {
		return 60;
    10bc:	8c e3       	ldi	r24, 0x3C	; 60
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <adc_get_battery_percentage+0x124>
	} else if (voltage > 450) {
		return 50;
    10c0:	82 e3       	ldi	r24, 0x32	; 50
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <adc_get_battery_percentage+0x124>
	} else if (voltage > 425) {
		return 40;
    10c4:	88 e2       	ldi	r24, 0x28	; 40
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <adc_get_battery_percentage+0x124>
	} else if (voltage > 415) {
		return 30;
    10c8:	8e e1       	ldi	r24, 0x1E	; 30
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <adc_get_battery_percentage+0x124>
	} else if (voltage > 400) {
		return 20;
	}
	
	return 0;
    10cc:	80 e0       	ldi	r24, 0x00	; 0
}
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	df 90       	pop	r13
    10d4:	cf 90       	pop	r12
    10d6:	08 95       	ret

000010d8 <clock_setup_32_mhz>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
}

void clock_setup_32_mhz(void) 
{	
	OSC.CTRL |= OSC_RC32MEN_bm;
    10d8:	e0 e5       	ldi	r30, 0x50	; 80
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	82 60       	ori	r24, 0x02	; 2
    10e0:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    10e2:	81 81       	ldd	r24, Z+1	; 0x01
    10e4:	81 ff       	sbrs	r24, 1
    10e6:	fd cf       	rjmp	.-6      	; 0x10e2 <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc;
    10e8:	88 ed       	ldi	r24, 0xD8	; 216
    10ea:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	80 93 40 00 	sts	0x0040, r24
    10f2:	08 95       	ret

000010f4 <dac_speaker_on>:

#include "dac.h"

void dac_speaker_on(void) 
{
	PORTD.DIRSET |= PIN1_bm;
    10f4:	e0 e6       	ldi	r30, 0x60	; 96
    10f6:	f6 e0       	ldi	r31, 0x06	; 6
    10f8:	81 81       	ldd	r24, Z+1	; 0x01
    10fa:	82 60       	ori	r24, 0x02	; 2
    10fc:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET |= PIN1_bm;
    10fe:	85 81       	ldd	r24, Z+5	; 0x05
    1100:	82 60       	ori	r24, 0x02	; 2
    1102:	85 83       	std	Z+5, r24	; 0x05
    1104:	08 95       	ret

00001106 <dac_speaker_off>:
}

void dac_speaker_off(void) 
{
	PORTD.DIRSET |= PIN1_bm;
    1106:	e0 e6       	ldi	r30, 0x60	; 96
    1108:	f6 e0       	ldi	r31, 0x06	; 6
    110a:	81 81       	ldd	r24, Z+1	; 0x01
    110c:	82 60       	ori	r24, 0x02	; 2
    110e:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTCLR |= PIN1_bm;
    1110:	86 81       	ldd	r24, Z+6	; 0x06
    1112:	82 60       	ori	r24, 0x02	; 2
    1114:	86 83       	std	Z+6, r24	; 0x06
    1116:	08 95       	ret

00001118 <dac_setup>:
}

void dac_setup(bool dual_channel) 
{		
	if (dual_channel)
    1118:	88 23       	and	r24, r24
    111a:	89 f0       	breq	.+34     	; 0x113e <dac_setup+0x26>
	{
		DAC_PORT.DIRSET |= DAC0 | DAC1;
    111c:	e0 e2       	ldi	r30, 0x20	; 32
    111e:	f6 e0       	ldi	r31, 0x06	; 6
    1120:	81 81       	ldd	r24, Z+1	; 0x01
    1122:	8c 60       	ori	r24, 0x0C	; 12
    1124:	81 83       	std	Z+1, r24	; 0x01
		
		DACB.CTRLA |= DAC_CH0EN_bm | DAC_CH1EN_bm;
    1126:	e0 e2       	ldi	r30, 0x20	; 32
    1128:	f3 e0       	ldi	r31, 0x03	; 3
    112a:	80 81       	ld	r24, Z
    112c:	8c 60       	ori	r24, 0x0C	; 12
    112e:	80 83       	st	Z, r24
		DACB.CTRLC |= DAC_REFSEL_AVCC_gc;
    1130:	82 81       	ldd	r24, Z+2	; 0x02
    1132:	88 60       	ori	r24, 0x08	; 8
    1134:	82 83       	std	Z+2, r24	; 0x02
		DACB.CTRLB |= DAC_CHSEL_DUAL_gc;
    1136:	81 81       	ldd	r24, Z+1	; 0x01
    1138:	80 64       	ori	r24, 0x40	; 64
    113a:	81 83       	std	Z+1, r24	; 0x01
    113c:	0f c0       	rjmp	.+30     	; 0x115c <dac_setup+0x44>
	} else {
		DAC_PORT.DIRSET |= DAC0;
    113e:	e0 e2       	ldi	r30, 0x20	; 32
    1140:	f6 e0       	ldi	r31, 0x06	; 6
    1142:	81 81       	ldd	r24, Z+1	; 0x01
    1144:	84 60       	ori	r24, 0x04	; 4
    1146:	81 83       	std	Z+1, r24	; 0x01
		
		DACB.CTRLA |= DAC_CH0EN_bm;
    1148:	e0 e2       	ldi	r30, 0x20	; 32
    114a:	f3 e0       	ldi	r31, 0x03	; 3
    114c:	80 81       	ld	r24, Z
    114e:	84 60       	ori	r24, 0x04	; 4
    1150:	80 83       	st	Z, r24
		DACB.CTRLC |= DAC_REFSEL_AVCC_gc;
    1152:	82 81       	ldd	r24, Z+2	; 0x02
    1154:	88 60       	ori	r24, 0x08	; 8
    1156:	82 83       	std	Z+2, r24	; 0x02
		DACB.CTRLB |= DAC_CHSEL_SINGLE_gc;
    1158:	81 81       	ldd	r24, Z+1	; 0x01
    115a:	81 83       	std	Z+1, r24	; 0x01
	}
	
	//From calibration rows
	DACB.CH0OFFSETCAL = 0x07;
    115c:	e0 e2       	ldi	r30, 0x20	; 32
    115e:	f3 e0       	ldi	r31, 0x03	; 3
    1160:	87 e0       	ldi	r24, 0x07	; 7
    1162:	81 87       	std	Z+9, r24	; 0x09
	DACB.CH0GAINCAL = 0x1B;
    1164:	8b e1       	ldi	r24, 0x1B	; 27
    1166:	80 87       	std	Z+8, r24	; 0x08
	DACB.CH1GAINCAL = 0x0C;
    1168:	8c e0       	ldi	r24, 0x0C	; 12
    116a:	82 87       	std	Z+10, r24	; 0x0a
	DACB.CH1OFFSETCAL = 0x13;
    116c:	83 e1       	ldi	r24, 0x13	; 19
    116e:	83 87       	std	Z+11, r24	; 0x0b
	DACB.CH0GAINCAL = 0xB6;
	DACB.CH1GAINCAL = 0x0C;
	DACB.CH1OFFSETCAL = 0x13;
	*/
	
	DACB.CTRLA |= DAC_ENABLE_bm;
    1170:	80 81       	ld	r24, Z
    1172:	81 60       	ori	r24, 0x01	; 1
    1174:	80 83       	st	Z, r24
	
	dac_speaker_on();
    1176:	be cf       	rjmp	.-132    	; 0x10f4 <dac_speaker_on>
    1178:	08 95       	ret

0000117a <dac_off>:
}

void dac_off(void) 
{
	DAC_PORT.DIRCLR |= DAC0 | DAC1;
    117a:	e0 e2       	ldi	r30, 0x20	; 32
    117c:	f6 e0       	ldi	r31, 0x06	; 6
    117e:	82 81       	ldd	r24, Z+2	; 0x02
    1180:	8c 60       	ori	r24, 0x0C	; 12
    1182:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA &= ~(DAC_ENABLE_bm);
    1184:	e0 e2       	ldi	r30, 0x20	; 32
    1186:	f3 e0       	ldi	r31, 0x03	; 3
    1188:	80 81       	ld	r24, Z
    118a:	8e 7f       	andi	r24, 0xFE	; 254
    118c:	80 83       	st	Z, r24
	dac_speaker_off();
    118e:	bb cf       	rjmp	.-138    	; 0x1106 <dac_speaker_off>
    1190:	08 95       	ret

00001192 <__vector_6>:
}
*/

//! DMA CH0 Interrupt service routine. Clear interrupt flags after check. 
ISR(DMA_CH0_vect)
{
    1192:	1f 92       	push	r1
    1194:	0f 92       	push	r0
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	0f 92       	push	r0
    119a:	11 24       	eor	r1, r1
    119c:	0b b6       	in	r0, 0x3b	; 59
    119e:	0f 92       	push	r0
    11a0:	8f 93       	push	r24
    11a2:	ef 93       	push	r30
    11a4:	ff 93       	push	r31
	if (DMA.CH0.CTRLB & DMA_CH_ERRIF_bm) {
    11a6:	e0 e0       	ldi	r30, 0x00	; 0
    11a8:	f1 e0       	ldi	r31, 0x01	; 1
    11aa:	81 89       	ldd	r24, Z+17	; 0x11
    11ac:	85 ff       	sbrs	r24, 5
    11ae:	06 c0       	rjmp	.+12     	; 0x11bc <__vector_6+0x2a>
		DMA.CH0.CTRLB |= DMA_CH_ERRIF_bm;
    11b0:	81 89       	ldd	r24, Z+17	; 0x11
    11b2:	80 62       	ori	r24, 0x20	; 32
    11b4:	81 8b       	std	Z+17, r24	; 0x11
		gStatus = false;
    11b6:	10 92 76 2b 	sts	0x2B76, r1
    11ba:	08 c0       	rjmp	.+16     	; 0x11cc <__vector_6+0x3a>
	} else {
		DMA.CH0.CTRLB |= DMA_CH_TRNIF_bm;
    11bc:	e0 e0       	ldi	r30, 0x00	; 0
    11be:	f1 e0       	ldi	r31, 0x01	; 1
    11c0:	81 89       	ldd	r24, Z+17	; 0x11
    11c2:	80 61       	ori	r24, 0x10	; 16
    11c4:	81 8b       	std	Z+17, r24	; 0x11
		gStatus = true;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	80 93 76 2b 	sts	0x2B76, r24
	}
	gInterruptDone = true;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	80 93 77 2b 	sts	0x2B77, r24
}
    11d2:	ff 91       	pop	r31
    11d4:	ef 91       	pop	r30
    11d6:	8f 91       	pop	r24
    11d8:	0f 90       	pop	r0
    11da:	0b be       	out	0x3b, r0	; 59
    11dc:	0f 90       	pop	r0
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	0f 90       	pop	r0
    11e2:	1f 90       	pop	r1
    11e4:	18 95       	reti

000011e6 <EEPROM_WaitForNVM>:
	NVM.ADDR2 = 0x00;

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
	NVM_EXEC();
}
    11e6:	e0 ec       	ldi	r30, 0xC0	; 192
    11e8:	f1 e0       	ldi	r31, 0x01	; 1
    11ea:	87 85       	ldd	r24, Z+15	; 0x0f
    11ec:	88 23       	and	r24, r24
    11ee:	ec f3       	brlt	.-6      	; 0x11ea <EEPROM_WaitForNVM+0x4>
    11f0:	08 95       	ret

000011f2 <EEPROM_FlushBuffer>:
    11f2:	f9 df       	rcall	.-14     	; 0x11e6 <EEPROM_WaitForNVM>
    11f4:	e0 ec       	ldi	r30, 0xC0	; 192
    11f6:	f1 e0       	ldi	r31, 0x01	; 1
    11f8:	87 85       	ldd	r24, Z+15	; 0x0f
    11fa:	81 ff       	sbrs	r24, 1
    11fc:	10 c0       	rjmp	.+32     	; 0x121e <EEPROM_FlushBuffer+0x2c>
    11fe:	86 e3       	ldi	r24, 0x36	; 54
    1200:	82 87       	std	Z+10, r24	; 0x0a
    1202:	ef 93       	push	r30
    1204:	ff 93       	push	r31
    1206:	0f 93       	push	r16
    1208:	2f 93       	push	r18
    120a:	eb ec       	ldi	r30, 0xCB	; 203
    120c:	f1 e0       	ldi	r31, 0x01	; 1
    120e:	08 ed       	ldi	r16, 0xD8	; 216
    1210:	21 e0       	ldi	r18, 0x01	; 1
    1212:	04 bf       	out	0x34, r16	; 52
    1214:	20 83       	st	Z, r18
    1216:	2f 91       	pop	r18
    1218:	0f 91       	pop	r16
    121a:	ff 91       	pop	r31
    121c:	ef 91       	pop	r30
    121e:	08 95       	ret

00001220 <EEPROM_WriteByte>:
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	18 2f       	mov	r17, r24
    1228:	d6 2f       	mov	r29, r22
    122a:	c4 2f       	mov	r28, r20
    122c:	e2 df       	rcall	.-60     	; 0x11f2 <EEPROM_FlushBuffer>
    122e:	e0 ec       	ldi	r30, 0xC0	; 192
    1230:	f1 e0       	ldi	r31, 0x01	; 1
    1232:	83 e3       	ldi	r24, 0x33	; 51
    1234:	82 87       	std	Z+10, r24	; 0x0a
    1236:	20 e2       	ldi	r18, 0x20	; 32
    1238:	12 9f       	mul	r17, r18
    123a:	c0 01       	movw	r24, r0
    123c:	11 24       	eor	r1, r1
    123e:	df 71       	andi	r29, 0x1F	; 31
    1240:	8d 2b       	or	r24, r29
    1242:	80 83       	st	Z, r24
    1244:	89 2f       	mov	r24, r25
    1246:	8f 71       	andi	r24, 0x1F	; 31
    1248:	81 83       	std	Z+1, r24	; 0x01
    124a:	12 82       	std	Z+2, r1	; 0x02
    124c:	c4 83       	std	Z+4, r28	; 0x04
    124e:	85 e3       	ldi	r24, 0x35	; 53
    1250:	82 87       	std	Z+10, r24	; 0x0a
    1252:	ef 93       	push	r30
    1254:	ff 93       	push	r31
    1256:	0f 93       	push	r16
    1258:	2f 93       	push	r18
    125a:	eb ec       	ldi	r30, 0xCB	; 203
    125c:	f1 e0       	ldi	r31, 0x01	; 1
    125e:	08 ed       	ldi	r16, 0xD8	; 216
    1260:	21 e0       	ldi	r18, 0x01	; 1
    1262:	04 bf       	out	0x34, r16	; 52
    1264:	20 83       	st	Z, r18
    1266:	2f 91       	pop	r18
    1268:	0f 91       	pop	r16
    126a:	ff 91       	pop	r31
    126c:	ef 91       	pop	r30
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	08 95       	ret

00001276 <EEPROM_EraseAll>:
 *  This function erases the entire EEPROM memory block to 0xFF.
 */
void EEPROM_EraseAll( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    1276:	b7 df       	rcall	.-146    	; 0x11e6 <EEPROM_WaitForNVM>

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    1278:	80 e3       	ldi	r24, 0x30	; 48
    127a:	e0 ec       	ldi	r30, 0xC0	; 192
    127c:	f1 e0       	ldi	r31, 0x01	; 1
    127e:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1280:	ef 93       	push	r30
    1282:	ff 93       	push	r31
    1284:	0f 93       	push	r16
    1286:	2f 93       	push	r18
    1288:	eb ec       	ldi	r30, 0xCB	; 203
    128a:	f1 e0       	ldi	r31, 0x01	; 1
    128c:	08 ed       	ldi	r16, 0xD8	; 216
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	04 bf       	out	0x34, r16	; 52
    1292:	20 83       	st	Z, r18
    1294:	2f 91       	pop	r18
    1296:	0f 91       	pop	r16
    1298:	ff 91       	pop	r31
    129a:	ef 91       	pop	r30
    129c:	08 95       	ret

0000129e <EEPROM_WriteEnv>:
}

uint8_t EEPROM_WriteEnv(void) {
    129e:	af 92       	push	r10
    12a0:	bf 92       	push	r11
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	cd 5a       	subi	r28, 0xAD	; 173
    12b8:	d1 09       	sbc	r29, r1
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	de bf       	out	0x3e, r29	; 62
	
	uint8_t b[sizeof(env_var)];
	uint16_t page_addr;
	uint8_t page;
	
	EEPROM_FlushBuffer();
    12be:	99 df       	rcall	.-206    	; 0x11f2 <EEPROM_FlushBuffer>
	EEPROM_DisableMapping();
    12c0:	e0 ec       	ldi	r30, 0xC0	; 192
    12c2:	f1 e0       	ldi	r31, 0x01	; 1
    12c4:	84 85       	ldd	r24, Z+12	; 0x0c
    12c6:	87 7f       	andi	r24, 0xF7	; 247
    12c8:	84 87       	std	Z+12, r24	; 0x0c
	memcpy(b, &env_var, sizeof(env_var));
    12ca:	8d ea       	ldi	r24, 0xAD	; 173
    12cc:	e5 e6       	ldi	r30, 0x65	; 101
    12ce:	fa e2       	ldi	r31, 0x2A	; 42
    12d0:	9e 01       	movw	r18, r28
    12d2:	2f 5f       	subi	r18, 0xFF	; 255
    12d4:	3f 4f       	sbci	r19, 0xFF	; 255
    12d6:	d9 01       	movw	r26, r18
    12d8:	01 90       	ld	r0, Z+
    12da:	0d 92       	st	X+, r0
    12dc:	8a 95       	dec	r24
    12de:	e1 f7       	brne	.-8      	; 0x12d8 <EEPROM_WriteEnv+0x3a>
    12e0:	69 01       	movw	r12, r18
    12e2:	a1 2c       	mov	r10, r1
    12e4:	79 01       	movw	r14, r18
    12e6:	e0 94       	com	r14
    12e8:	f0 94       	com	r15
    12ea:	17 c0       	rjmp	.+46     	; 0x131a <EEPROM_WriteEnv+0x7c>
	
	for(page_addr = 0; page_addr < (sizeof(env_var)/EEPROM_PAGE_SIZE) + 1; page_addr += 1) {
		for(page = 0; page < EEPROM_PAGE_SIZE; page++) {
			EEPROM_WriteByte(page_addr,page,b[page+(page_addr*EEPROM_PAGE_SIZE)]);
    12ec:	f8 01       	movw	r30, r16
    12ee:	41 91       	ld	r20, Z+
    12f0:	8f 01       	movw	r16, r30
    12f2:	6b 2d       	mov	r22, r11
    12f4:	8a 2d       	mov	r24, r10
    12f6:	94 df       	rcall	.-216    	; 0x1220 <EEPROM_WriteByte>
    12f8:	97 01       	movw	r18, r14
    12fa:	20 0f       	add	r18, r16
    12fc:	31 1f       	adc	r19, r17
			if (page+(page_addr*EEPROM_PAGE_SIZE) >= sizeof(env_var)) {
    12fe:	2d 3a       	cpi	r18, 0xAD	; 173
    1300:	31 05       	cpc	r19, r1
    1302:	20 f4       	brcc	.+8      	; 0x130c <EEPROM_WriteEnv+0x6e>
	EEPROM_FlushBuffer();
	EEPROM_DisableMapping();
	memcpy(b, &env_var, sizeof(env_var));
	
	for(page_addr = 0; page_addr < (sizeof(env_var)/EEPROM_PAGE_SIZE) + 1; page_addr += 1) {
		for(page = 0; page < EEPROM_PAGE_SIZE; page++) {
    1304:	b3 94       	inc	r11
    1306:	f0 e2       	ldi	r31, 0x20	; 32
    1308:	bf 12       	cpse	r11, r31
    130a:	f0 cf       	rjmp	.-32     	; 0x12ec <EEPROM_WriteEnv+0x4e>
    130c:	80 e2       	ldi	r24, 0x20	; 32
    130e:	c8 0e       	add	r12, r24
    1310:	d1 1c       	adc	r13, r1
    1312:	a3 94       	inc	r10
	
	EEPROM_FlushBuffer();
	EEPROM_DisableMapping();
	memcpy(b, &env_var, sizeof(env_var));
	
	for(page_addr = 0; page_addr < (sizeof(env_var)/EEPROM_PAGE_SIZE) + 1; page_addr += 1) {
    1314:	e6 e0       	ldi	r30, 0x06	; 6
    1316:	ae 16       	cp	r10, r30
    1318:	19 f0       	breq	.+6      	; 0x1320 <EEPROM_WriteEnv+0x82>
	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
	NVM_EXEC();
}

uint8_t EEPROM_WriteEnv(void) {
    131a:	86 01       	movw	r16, r12
    131c:	b1 2c       	mov	r11, r1
    131e:	e6 cf       	rjmp	.-52     	; 0x12ec <EEPROM_WriteEnv+0x4e>
			}
		}
	}
	
	return 1;
}
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	c3 55       	subi	r28, 0x53	; 83
    1324:	df 4f       	sbci	r29, 0xFF	; 255
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	af 90       	pop	r10
    133e:	08 95       	ret

00001340 <esp8266_on>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1340:	e0 e6       	ldi	r30, 0x60	; 96
    1342:	f6 e0       	ldi	r31, 0x06	; 6
    1344:	80 e2       	ldi	r24, 0x20	; 32
    1346:	81 83       	std	Z+1, r24	; 0x01
    1348:	85 83       	std	Z+5, r24	; 0x05
    134a:	2f ef       	ldi	r18, 0xFF	; 255
    134c:	83 ed       	ldi	r24, 0xD3	; 211
    134e:	90 e3       	ldi	r25, 0x30	; 48
    1350:	21 50       	subi	r18, 0x01	; 1
    1352:	80 40       	sbci	r24, 0x00	; 0
    1354:	90 40       	sbci	r25, 0x00	; 0
    1356:	e1 f7       	brne	.-8      	; 0x1350 <esp8266_on+0x10>
    1358:	00 c0       	rjmp	.+0      	; 0x135a <esp8266_on+0x1a>
    135a:	00 00       	nop
    135c:	08 95       	ret

0000135e <esp8266_off>:
    135e:	80 e2       	ldi	r24, 0x20	; 32
    1360:	e0 e6       	ldi	r30, 0x60	; 96
    1362:	f6 e0       	ldi	r31, 0x06	; 6
    1364:	86 83       	std	Z+6, r24	; 0x06
    1366:	08 95       	ret

00001368 <esp8266_reset>:
    1368:	80 e1       	ldi	r24, 0x10	; 16
    136a:	e0 e6       	ldi	r30, 0x60	; 96
    136c:	f6 e0       	ldi	r31, 0x06	; 6
    136e:	85 83       	std	Z+5, r24	; 0x05
    1370:	2f ef       	ldi	r18, 0xFF	; 255
    1372:	83 ed       	ldi	r24, 0xD3	; 211
    1374:	90 e3       	ldi	r25, 0x30	; 48
    1376:	21 50       	subi	r18, 0x01	; 1
    1378:	80 40       	sbci	r24, 0x00	; 0
    137a:	90 40       	sbci	r25, 0x00	; 0
    137c:	e1 f7       	brne	.-8      	; 0x1376 <esp8266_reset+0xe>
    137e:	00 c0       	rjmp	.+0      	; 0x1380 <esp8266_reset+0x18>
    1380:	00 00       	nop
    1382:	80 e1       	ldi	r24, 0x10	; 16
    1384:	86 83       	std	Z+6, r24	; 0x06
    1386:	2f ef       	ldi	r18, 0xFF	; 255
    1388:	83 ed       	ldi	r24, 0xD3	; 211
    138a:	90 e3       	ldi	r25, 0x30	; 48
    138c:	21 50       	subi	r18, 0x01	; 1
    138e:	80 40       	sbci	r24, 0x00	; 0
    1390:	90 40       	sbci	r25, 0x00	; 0
    1392:	e1 f7       	brne	.-8      	; 0x138c <esp8266_reset+0x24>
    1394:	00 c0       	rjmp	.+0      	; 0x1396 <esp8266_reset+0x2e>
    1396:	00 00       	nop
    1398:	08 95       	ret

0000139a <esp8266_setup>:
    139a:	89 e0       	ldi	r24, 0x09	; 9
    139c:	80 93 11 2c 	sts	0x2C11, r24
    13a0:	86 ed       	ldi	r24, 0xD6	; 214
    13a2:	90 e2       	ldi	r25, 0x20	; 32
    13a4:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    13a8:	2a ea       	ldi	r18, 0xAA	; 170
    13aa:	36 ee       	ldi	r19, 0xE6	; 230
    13ac:	86 e9       	ldi	r24, 0x96	; 150
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	21 50       	subi	r18, 0x01	; 1
    13b2:	30 40       	sbci	r19, 0x00	; 0
    13b4:	80 40       	sbci	r24, 0x00	; 0
    13b6:	90 40       	sbci	r25, 0x00	; 0
    13b8:	d9 f7       	brne	.-10     	; 0x13b0 <esp8266_setup+0x16>
    13ba:	00 00       	nop
    13bc:	80 91 11 2c 	lds	r24, 0x2C11
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	d1 f5       	brne	.+116    	; 0x1438 <esp8266_setup+0x9e>
    13c4:	89 e0       	ldi	r24, 0x09	; 9
    13c6:	80 93 11 2c 	sts	0x2C11, r24
    13ca:	8d ed       	ldi	r24, 0xDD	; 221
    13cc:	90 e2       	ldi	r25, 0x20	; 32
    13ce:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    13d2:	2f ef       	ldi	r18, 0xFF	; 255
    13d4:	37 ea       	ldi	r19, 0xA7	; 167
    13d6:	81 e6       	ldi	r24, 0x61	; 97
    13d8:	21 50       	subi	r18, 0x01	; 1
    13da:	30 40       	sbci	r19, 0x00	; 0
    13dc:	80 40       	sbci	r24, 0x00	; 0
    13de:	e1 f7       	brne	.-8      	; 0x13d8 <esp8266_setup+0x3e>
    13e0:	00 c0       	rjmp	.+0      	; 0x13e2 <esp8266_setup+0x48>
    13e2:	00 00       	nop
    13e4:	80 91 11 2c 	lds	r24, 0x2C11
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	31 f5       	brne	.+76     	; 0x1438 <esp8266_setup+0x9e>
    13ec:	89 e0       	ldi	r24, 0x09	; 9
    13ee:	80 93 11 2c 	sts	0x2C11, r24
    13f2:	8a ee       	ldi	r24, 0xEA	; 234
    13f4:	90 e2       	ldi	r25, 0x20	; 32
    13f6:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    13fa:	9f ef       	ldi	r25, 0xFF	; 255
    13fc:	29 e6       	ldi	r18, 0x69	; 105
    13fe:	38 e1       	ldi	r19, 0x18	; 24
    1400:	91 50       	subi	r25, 0x01	; 1
    1402:	20 40       	sbci	r18, 0x00	; 0
    1404:	30 40       	sbci	r19, 0x00	; 0
    1406:	e1 f7       	brne	.-8      	; 0x1400 <esp8266_setup+0x66>
    1408:	00 c0       	rjmp	.+0      	; 0x140a <esp8266_setup+0x70>
    140a:	00 00       	nop
    140c:	80 91 11 2c 	lds	r24, 0x2C11
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	91 f4       	brne	.+36     	; 0x1438 <esp8266_setup+0x9e>
    1414:	89 e0       	ldi	r24, 0x09	; 9
    1416:	80 93 11 2c 	sts	0x2C11, r24
    141a:	86 ef       	ldi	r24, 0xF6	; 246
    141c:	90 e2       	ldi	r25, 0x20	; 32
    141e:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	99 e6       	ldi	r25, 0x69	; 105
    1426:	28 e1       	ldi	r18, 0x18	; 24
    1428:	81 50       	subi	r24, 0x01	; 1
    142a:	90 40       	sbci	r25, 0x00	; 0
    142c:	20 40       	sbci	r18, 0x00	; 0
    142e:	e1 f7       	brne	.-8      	; 0x1428 <esp8266_setup+0x8e>
    1430:	00 c0       	rjmp	.+0      	; 0x1432 <esp8266_setup+0x98>
    1432:	00 00       	nop
    1434:	80 91 11 2c 	lds	r24, 0x2C11
    1438:	08 95       	ret

0000143a <esp8266_join_ap>:
{
	esp8266_send_cmd("AT+CIPUPDATE",10000);
}

esp8266_status_t esp8266_join_ap(char *ssid, char *pass) 
{	
    143a:	ef 92       	push	r14
    143c:	ff 92       	push	r15
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	c4 56       	subi	r28, 0x64	; 100
    144c:	d1 09       	sbc	r29, r1
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	7b 01       	movw	r14, r22
	uint16_t timeout = 300;
	uint16_t cnt = 0;
	char cmd[100];
	
	strcpy(cmd,"AT+CWJAP=\"");
    1454:	2b e0       	ldi	r18, 0x0B	; 11
    1456:	e8 e1       	ldi	r30, 0x18	; 24
    1458:	f1 e2       	ldi	r31, 0x21	; 33
    145a:	8e 01       	movw	r16, r28
    145c:	0f 5f       	subi	r16, 0xFF	; 255
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	d8 01       	movw	r26, r16
    1462:	01 90       	ld	r0, Z+
    1464:	0d 92       	st	X+, r0
    1466:	2a 95       	dec	r18
    1468:	e1 f7       	brne	.-8      	; 0x1462 <esp8266_join_ap+0x28>
	strcat(cmd,ssid);
    146a:	bc 01       	movw	r22, r24
    146c:	c8 01       	movw	r24, r16
    146e:	0e 94 cd 57 	call	0xaf9a	; 0xaf9a <strcat>
	strcat(cmd,"\",\"");
    1472:	f8 01       	movw	r30, r16
    1474:	01 90       	ld	r0, Z+
    1476:	00 20       	and	r0, r0
    1478:	e9 f7       	brne	.-6      	; 0x1474 <esp8266_join_ap+0x3a>
    147a:	31 97       	sbiw	r30, 0x01	; 1
    147c:	42 e2       	ldi	r20, 0x22	; 34
    147e:	5c e2       	ldi	r21, 0x2C	; 44
    1480:	62 e2       	ldi	r22, 0x22	; 34
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	40 83       	st	Z, r20
    1486:	51 83       	std	Z+1, r21	; 0x01
    1488:	62 83       	std	Z+2, r22	; 0x02
    148a:	73 83       	std	Z+3, r23	; 0x03
	strcat(cmd,pass);
    148c:	b7 01       	movw	r22, r14
    148e:	c8 01       	movw	r24, r16
    1490:	0e 94 cd 57 	call	0xaf9a	; 0xaf9a <strcat>
	strcat(cmd,"\"");
    1494:	f8 01       	movw	r30, r16
    1496:	01 90       	ld	r0, Z+
    1498:	00 20       	and	r0, r0
    149a:	e9 f7       	brne	.-6      	; 0x1496 <esp8266_join_ap+0x5c>
    149c:	31 97       	sbiw	r30, 0x01	; 1
    149e:	82 e2       	ldi	r24, 0x22	; 34
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	80 83       	st	Z, r24
    14a4:	91 83       	std	Z+1, r25	; 0x01

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) 
{
	status = ESP8266_NONE;
    14a6:	89 e0       	ldi	r24, 0x09	; 9
    14a8:	80 93 11 2c 	sts	0x2C11, r24
	uart_write_str(str);
    14ac:	c8 01       	movw	r24, r16
    14ae:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    14b2:	2f ef       	ldi	r18, 0xFF	; 255
    14b4:	49 e6       	ldi	r20, 0x69	; 105
    14b6:	88 e1       	ldi	r24, 0x18	; 24
    14b8:	21 50       	subi	r18, 0x01	; 1
    14ba:	40 40       	sbci	r20, 0x00	; 0
    14bc:	80 40       	sbci	r24, 0x00	; 0
    14be:	e1 f7       	brne	.-8      	; 0x14b8 <esp8266_join_ap+0x7e>
    14c0:	00 c0       	rjmp	.+0      	; 0x14c2 <esp8266_join_ap+0x88>
    14c2:	00 00       	nop
    14c4:	2e e2       	ldi	r18, 0x2E	; 46
    14c6:	31 e0       	ldi	r19, 0x01	; 1
    14c8:	12 c0       	rjmp	.+36     	; 0x14ee <esp8266_join_ap+0xb4>
    14ca:	9f ef       	ldi	r25, 0xFF	; 255
    14cc:	43 ec       	ldi	r20, 0xC3	; 195
    14ce:	89 e0       	ldi	r24, 0x09	; 9
    14d0:	91 50       	subi	r25, 0x01	; 1
    14d2:	40 40       	sbci	r20, 0x00	; 0
    14d4:	80 40       	sbci	r24, 0x00	; 0
    14d6:	e1 f7       	brne	.-8      	; 0x14d0 <esp8266_join_ap+0x96>
    14d8:	00 c0       	rjmp	.+0      	; 0x14da <esp8266_join_ap+0xa0>
    14da:	00 00       	nop
    14dc:	21 50       	subi	r18, 0x01	; 1
    14de:	31 09       	sbc	r19, r1
	
	while (status != ESP8266_SUCCESS)
	{
		_delay_ms(100);
		
		if (cnt++ > timeout) {
    14e0:	21 15       	cp	r18, r1
    14e2:	31 05       	cpc	r19, r1
    14e4:	49 f0       	breq	.+18     	; 0x14f8 <esp8266_join_ap+0xbe>
			return ESP8266_TIMEOUT;
		} else if (status == ESP8266_ERROR) {
    14e6:	80 91 11 2c 	lds	r24, 0x2C11
    14ea:	88 23       	and	r24, r24
    14ec:	31 f0       	breq	.+12     	; 0x14fa <esp8266_join_ap+0xc0>
	strcat(cmd,"\",\"");
	strcat(cmd,pass);
	strcat(cmd,"\"");
	esp8266_send_cmd(cmd,250);
	
	while (status != ESP8266_SUCCESS)
    14ee:	80 91 11 2c 	lds	r24, 0x2C11
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	51 f7       	brne	.-44     	; 0x14ca <esp8266_join_ap+0x90>
    14f6:	01 c0       	rjmp	.+2      	; 0x14fa <esp8266_join_ap+0xc0>
	{
		_delay_ms(100);
		
		if (cnt++ > timeout) {
			return ESP8266_TIMEOUT;
    14f8:	83 e0       	ldi	r24, 0x03	; 3
			return status;
		}
	}

	return ESP8266_SUCCESS;
}
    14fa:	cc 59       	subi	r28, 0x9C	; 156
    14fc:	df 4f       	sbci	r29, 0xFF	; 255
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	08 95       	ret

00001510 <esp8266_get_json>:

esp8266_status_t esp8266_get_json(char *host, char *addr, char *json, uint8_t json_length) 
{	
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	c6 59       	subi	r28, 0x96	; 150
    151e:	d1 09       	sbc	r29, r1
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	de bf       	out	0x3e, r29	; 62
	uint16_t cnt = 0;
	//Try to make this dynamic?
	char cmd[150];
	
	//Set up TCP connection to host
	strcpy(cmd,"AT+CIPSTART=\"TCP\",\"");
    1524:	24 e1       	ldi	r18, 0x14	; 20
    1526:	e3 e2       	ldi	r30, 0x23	; 35
    1528:	f1 e2       	ldi	r31, 0x21	; 33
    152a:	8e 01       	movw	r16, r28
    152c:	0f 5f       	subi	r16, 0xFF	; 255
    152e:	1f 4f       	sbci	r17, 0xFF	; 255
    1530:	d8 01       	movw	r26, r16
    1532:	01 90       	ld	r0, Z+
    1534:	0d 92       	st	X+, r0
    1536:	2a 95       	dec	r18
    1538:	e1 f7       	brne	.-8      	; 0x1532 <esp8266_get_json+0x22>
	strcat(cmd,host);
    153a:	bc 01       	movw	r22, r24
    153c:	c8 01       	movw	r24, r16
    153e:	0e 94 cd 57 	call	0xaf9a	; 0xaf9a <strcat>
	strcat(cmd,"\",80");
    1542:	d8 01       	movw	r26, r16
    1544:	0d 90       	ld	r0, X+
    1546:	00 20       	and	r0, r0
    1548:	e9 f7       	brne	.-6      	; 0x1544 <esp8266_get_json+0x34>
    154a:	11 97       	sbiw	r26, 0x01	; 1
    154c:	85 e0       	ldi	r24, 0x05	; 5
    154e:	e7 e3       	ldi	r30, 0x37	; 55
    1550:	f1 e2       	ldi	r31, 0x21	; 33
    1552:	01 90       	ld	r0, Z+
    1554:	0d 92       	st	X+, r0
    1556:	8a 95       	dec	r24
    1558:	e1 f7       	brne	.-8      	; 0x1552 <esp8266_get_json+0x42>

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) 
{
	status = ESP8266_NONE;
    155a:	89 e0       	ldi	r24, 0x09	; 9
    155c:	80 93 11 2c 	sts	0x2C11, r24
	uart_write_str(str);
    1560:	c8 01       	movw	r24, r16
    1562:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    1566:	2f ef       	ldi	r18, 0xFF	; 255
    1568:	89 e6       	ldi	r24, 0x69	; 105
    156a:	98 e1       	ldi	r25, 0x18	; 24
    156c:	21 50       	subi	r18, 0x01	; 1
    156e:	80 40       	sbci	r24, 0x00	; 0
    1570:	90 40       	sbci	r25, 0x00	; 0
    1572:	e1 f7       	brne	.-8      	; 0x156c <esp8266_get_json+0x5c>
    1574:	00 c0       	rjmp	.+0      	; 0x1576 <esp8266_get_json+0x66>
    1576:	00 00       	nop
	}
	
	esp8266_send_cmd("AT+CIPCLOSE",50);
	
	return ESP8266_SUCCESS;
}
    1578:	80 91 11 2c 	lds	r24, 0x2C11
    157c:	ca 56       	subi	r28, 0x6A	; 106
    157e:	df 4f       	sbci	r29, 0xFF	; 255
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	08 95       	ret

0000158e <esp8266_setup_webserver>:

esp8266_status_t esp8266_setup_webserver(bool sta, bool ap) 
{	
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	c8 2f       	mov	r28, r24
    1594:	d6 2f       	mov	r29, r22
	//Reset module
	esp8266_reset();
    1596:	e8 de       	rcall	.-560    	; 0x1368 <esp8266_reset>

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) 
{
	status = ESP8266_NONE;
    1598:	99 e0       	ldi	r25, 0x09	; 9
    159a:	90 93 11 2c 	sts	0x2C11, r25
	uart_write_str(str);
    159e:	8d ed       	ldi	r24, 0xDD	; 221
    15a0:	90 e2       	ldi	r25, 0x20	; 32
    15a2:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    15a6:	2f ef       	ldi	r18, 0xFF	; 255
    15a8:	89 e6       	ldi	r24, 0x69	; 105
    15aa:	98 e1       	ldi	r25, 0x18	; 24
    15ac:	21 50       	subi	r18, 0x01	; 1
    15ae:	80 40       	sbci	r24, 0x00	; 0
    15b0:	90 40       	sbci	r25, 0x00	; 0
    15b2:	e1 f7       	brne	.-8      	; 0x15ac <esp8266_setup_webserver+0x1e>
    15b4:	00 c0       	rjmp	.+0      	; 0x15b6 <esp8266_setup_webserver+0x28>
    15b6:	00 00       	nop
	//Reset module
	esp8266_reset();
	
	//Set Data Mode
	esp8266_send_cmd("AT+CIPMODE=0",250);
	if (status != ESP8266_SUCCESS) {
    15b8:	90 91 11 2c 	lds	r25, 0x2C11
    15bc:	91 30       	cpi	r25, 0x01	; 1
    15be:	09 f0       	breq	.+2      	; 0x15c2 <esp8266_setup_webserver+0x34>
    15c0:	76 c0       	rjmp	.+236    	; 0x16ae <esp8266_setup_webserver+0x120>
		return status;
	}
	
	//Select mode
	if (sta) {
    15c2:	cc 23       	and	r28, r28
    15c4:	b1 f0       	breq	.+44     	; 0x15f2 <esp8266_setup_webserver+0x64>

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) 
{
	status = ESP8266_NONE;
    15c6:	89 e0       	ldi	r24, 0x09	; 9
    15c8:	80 93 11 2c 	sts	0x2C11, r24
	uart_write_str(str);
    15cc:	86 ef       	ldi	r24, 0xF6	; 246
    15ce:	90 e2       	ldi	r25, 0x20	; 32
    15d0:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    15d4:	2f ef       	ldi	r18, 0xFF	; 255
    15d6:	89 e6       	ldi	r24, 0x69	; 105
    15d8:	98 e1       	ldi	r25, 0x18	; 24
    15da:	21 50       	subi	r18, 0x01	; 1
    15dc:	80 40       	sbci	r24, 0x00	; 0
    15de:	90 40       	sbci	r25, 0x00	; 0
    15e0:	e1 f7       	brne	.-8      	; 0x15da <esp8266_setup_webserver+0x4c>
    15e2:	00 c0       	rjmp	.+0      	; 0x15e4 <esp8266_setup_webserver+0x56>
    15e4:	00 00       	nop
		esp8266_send_cmd("AT+CWMODE=3",250);
	} else {
		return ESP8266_ERROR;
	}
	
	if (status != ESP8266_SUCCESS) {
    15e6:	80 91 11 2c 	lds	r24, 0x2C11
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <esp8266_setup_webserver+0x62>
    15ee:	62 c0       	rjmp	.+196    	; 0x16b4 <esp8266_setup_webserver+0x126>
    15f0:	19 c0       	rjmp	.+50     	; 0x1624 <esp8266_setup_webserver+0x96>
	}
	
	//Select mode
	if (sta) {
		esp8266_send_cmd("AT+CWMODE=1",250);
	} else if (ap) {
    15f2:	dd 23       	and	r29, r29
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <esp8266_setup_webserver+0x6a>
    15f6:	5d c0       	rjmp	.+186    	; 0x16b2 <esp8266_setup_webserver+0x124>

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) 
{
	status = ESP8266_NONE;
    15f8:	89 e0       	ldi	r24, 0x09	; 9
    15fa:	80 93 11 2c 	sts	0x2C11, r24
	uart_write_str(str);
    15fe:	8c e3       	ldi	r24, 0x3C	; 60
    1600:	91 e2       	ldi	r25, 0x21	; 33
    1602:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    1606:	2f ef       	ldi	r18, 0xFF	; 255
    1608:	89 e6       	ldi	r24, 0x69	; 105
    160a:	98 e1       	ldi	r25, 0x18	; 24
    160c:	21 50       	subi	r18, 0x01	; 1
    160e:	80 40       	sbci	r24, 0x00	; 0
    1610:	90 40       	sbci	r25, 0x00	; 0
    1612:	e1 f7       	brne	.-8      	; 0x160c <esp8266_setup_webserver+0x7e>
    1614:	00 c0       	rjmp	.+0      	; 0x1616 <esp8266_setup_webserver+0x88>
    1616:	00 00       	nop
		esp8266_send_cmd("AT+CWMODE=3",250);
	} else {
		return ESP8266_ERROR;
	}
	
	if (status != ESP8266_SUCCESS) {
    1618:	80 91 11 2c 	lds	r24, 0x2C11
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	09 f0       	breq	.+2      	; 0x1622 <esp8266_setup_webserver+0x94>
    1620:	49 c0       	rjmp	.+146    	; 0x16b4 <esp8266_setup_webserver+0x126>
    1622:	05 c0       	rjmp	.+10     	; 0x162e <esp8266_setup_webserver+0xa0>
		return status;
	}
	
	if (sta || (sta && ap)) {
		esp8266_join_ap(env_var.wifi_ssid,env_var.wifi_pswd);
    1624:	66 ed       	ldi	r22, 0xD6	; 214
    1626:	7a e2       	ldi	r23, 0x2A	; 42
    1628:	8f ee       	ldi	r24, 0xEF	; 239
    162a:	9a e2       	ldi	r25, 0x2A	; 42
    162c:	06 df       	rcall	.-500    	; 0x143a <esp8266_join_ap>

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) 
{
	status = ESP8266_NONE;
    162e:	89 e0       	ldi	r24, 0x09	; 9
    1630:	80 93 11 2c 	sts	0x2C11, r24
	uart_write_str(str);
    1634:	88 e4       	ldi	r24, 0x48	; 72
    1636:	91 e2       	ldi	r25, 0x21	; 33
    1638:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    163c:	2f ef       	ldi	r18, 0xFF	; 255
    163e:	89 e6       	ldi	r24, 0x69	; 105
    1640:	98 e1       	ldi	r25, 0x18	; 24
    1642:	21 50       	subi	r18, 0x01	; 1
    1644:	80 40       	sbci	r24, 0x00	; 0
    1646:	90 40       	sbci	r25, 0x00	; 0
    1648:	e1 f7       	brne	.-8      	; 0x1642 <esp8266_setup_webserver+0xb4>
    164a:	00 c0       	rjmp	.+0      	; 0x164c <esp8266_setup_webserver+0xbe>
    164c:	00 00       	nop
		esp8266_join_ap(env_var.wifi_ssid,env_var.wifi_pswd);
	}
	
	//List ip addresses
	esp8266_send_cmd("AT+CIFSR", 250);
	if (status != ESP8266_SUCCESS) {
    164e:	80 91 11 2c 	lds	r24, 0x2C11
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	79 f5       	brne	.+94     	; 0x16b4 <esp8266_setup_webserver+0x126>
		return status;
	}
	
	//Show IP address to user
#ifdef SHOW_MANUAL
	display_print_scrolling_text(ip_address,false);
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	8c ed       	ldi	r24, 0xDC	; 220
    165a:	9b e2       	ldi	r25, 0x2B	; 43
    165c:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) 
{
	status = ESP8266_NONE;
    1660:	89 e0       	ldi	r24, 0x09	; 9
    1662:	80 93 11 2c 	sts	0x2C11, r24
	uart_write_str(str);
    1666:	81 e5       	ldi	r24, 0x51	; 81
    1668:	91 e2       	ldi	r25, 0x21	; 33
    166a:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    166e:	2f ef       	ldi	r18, 0xFF	; 255
    1670:	89 e6       	ldi	r24, 0x69	; 105
    1672:	98 e1       	ldi	r25, 0x18	; 24
    1674:	21 50       	subi	r18, 0x01	; 1
    1676:	80 40       	sbci	r24, 0x00	; 0
    1678:	90 40       	sbci	r25, 0x00	; 0
    167a:	e1 f7       	brne	.-8      	; 0x1674 <esp8266_setup_webserver+0xe6>
    167c:	00 c0       	rjmp	.+0      	; 0x167e <esp8266_setup_webserver+0xf0>
    167e:	00 00       	nop
#ifdef SHOW_MANUAL
	display_print_scrolling_text(ip_address,false);
#endif
	//Configure multiple connections
	esp8266_send_cmd("AT+CIPMUX=1",250);
	if (status != ESP8266_SUCCESS) {
    1680:	80 91 11 2c 	lds	r24, 0x2C11
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	b1 f4       	brne	.+44     	; 0x16b4 <esp8266_setup_webserver+0x126>

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) 
{
	status = ESP8266_NONE;
    1688:	89 e0       	ldi	r24, 0x09	; 9
    168a:	80 93 11 2c 	sts	0x2C11, r24
	uart_write_str(str);
    168e:	8d e5       	ldi	r24, 0x5D	; 93
    1690:	91 e2       	ldi	r25, 0x21	; 33
    1692:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    1696:	2f ef       	ldi	r18, 0xFF	; 255
    1698:	89 e6       	ldi	r24, 0x69	; 105
    169a:	98 e1       	ldi	r25, 0x18	; 24
    169c:	21 50       	subi	r18, 0x01	; 1
    169e:	80 40       	sbci	r24, 0x00	; 0
    16a0:	90 40       	sbci	r25, 0x00	; 0
    16a2:	e1 f7       	brne	.-8      	; 0x169c <esp8266_setup_webserver+0x10e>
    16a4:	00 c0       	rjmp	.+0      	; 0x16a6 <esp8266_setup_webserver+0x118>
    16a6:	00 00       	nop
		return status;
	}
	
	//Start server
	esp8266_send_cmd("AT+CIPSERVER=1,80",250);	
	if (status != ESP8266_SUCCESS) {
    16a8:	80 91 11 2c 	lds	r24, 0x2C11
    16ac:	03 c0       	rjmp	.+6      	; 0x16b4 <esp8266_setup_webserver+0x126>
	esp8266_reset();
	
	//Set Data Mode
	esp8266_send_cmd("AT+CIPMODE=0",250);
	if (status != ESP8266_SUCCESS) {
		return status;
    16ae:	89 2f       	mov	r24, r25
    16b0:	01 c0       	rjmp	.+2      	; 0x16b4 <esp8266_setup_webserver+0x126>
	} else if (ap) {
		esp8266_send_cmd("AT+CWMODE=2",250);
	} else if (ap && sta) {
		esp8266_send_cmd("AT+CWMODE=3",250);
	} else {
		return ESP8266_ERROR;
    16b2:	80 e0       	ldi	r24, 0x00	; 0
	if (status != ESP8266_SUCCESS) {
		return status;
	}
	
	return ESP8266_SUCCESS;
}
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <esp8266_configure_ssid_and_password>:
		uart_write_str("Could not access sd card...");
	}
}

esp8266_status_t esp8266_configure_ssid_and_password(void) 
{
    16ba:	af 92       	push	r10
    16bc:	bf 92       	push	r11
    16be:	cf 92       	push	r12
    16c0:	df 92       	push	r13
    16c2:	ef 92       	push	r14
    16c4:	ff 92       	push	r15
    16c6:	0f 93       	push	r16
    16c8:	1f 93       	push	r17
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	e7 97       	sbiw	r28, 0x37	; 55
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	de bf       	out	0x3e, r29	; 62
	if (status == ESP8266_GET_REQ) {
    16d8:	80 91 11 2c 	lds	r24, 0x2C11
    16dc:	87 30       	cpi	r24, 0x07	; 7
    16de:	09 f0       	breq	.+2      	; 0x16e2 <esp8266_configure_ssid_and_password+0x28>
    16e0:	9f c0       	rjmp	.+318    	; 0x1820 <esp8266_configure_ssid_and_password+0x166>
		
		at_cipsend(link_channel,"<!DOCTYPE html>\
    16e2:	10 91 06 20 	lds	r17, 0x2006
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    16e6:	4a e0       	ldi	r20, 0x0A	; 10
    16e8:	be 01       	movw	r22, r28
    16ea:	6d 5c       	subi	r22, 0xCD	; 205
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	87 eb       	ldi	r24, 0xB7	; 183
    16f0:	91 e0       	ldi	r25, 0x01	; 1
    16f2:	0e 94 13 58 	call	0xb026	; 0xb026 <__itoa_ncheck>
	char number_of_bytes[5];
	char cmd[50];
	uint16_t timeout = 0;
	
	itoa(strlen(str),number_of_bytes,10);
	if (channel == '0') {
    16f6:	10 33       	cpi	r17, 0x30	; 48
    16f8:	51 f4       	brne	.+20     	; 0x170e <esp8266_configure_ssid_and_password+0x54>
		strcpy(cmd, "AT+CIPSEND=0,");
    16fa:	8e e0       	ldi	r24, 0x0E	; 14
    16fc:	ef e6       	ldi	r30, 0x6F	; 111
    16fe:	f1 e2       	ldi	r31, 0x21	; 33
    1700:	de 01       	movw	r26, r28
    1702:	11 96       	adiw	r26, 0x01	; 1
    1704:	01 90       	ld	r0, Z+
    1706:	0d 92       	st	X+, r0
    1708:	8a 95       	dec	r24
    170a:	e1 f7       	brne	.-8      	; 0x1704 <esp8266_configure_ssid_and_password+0x4a>
    170c:	09 c0       	rjmp	.+18     	; 0x1720 <esp8266_configure_ssid_and_password+0x66>
	} else {
		strcpy(cmd, "AT+CIPSEND=1,");
    170e:	8e e0       	ldi	r24, 0x0E	; 14
    1710:	ed e7       	ldi	r30, 0x7D	; 125
    1712:	f1 e2       	ldi	r31, 0x21	; 33
    1714:	de 01       	movw	r26, r28
    1716:	11 96       	adiw	r26, 0x01	; 1
    1718:	01 90       	ld	r0, Z+
    171a:	0d 92       	st	X+, r0
    171c:	8a 95       	dec	r24
    171e:	e1 f7       	brne	.-8      	; 0x1718 <esp8266_configure_ssid_and_password+0x5e>
	}
	strcat(cmd,number_of_bytes);
    1720:	be 01       	movw	r22, r28
    1722:	6d 5c       	subi	r22, 0xCD	; 205
    1724:	7f 4f       	sbci	r23, 0xFF	; 255
    1726:	8e 01       	movw	r16, r28
    1728:	0f 5f       	subi	r16, 0xFF	; 255
    172a:	1f 4f       	sbci	r17, 0xFF	; 255
    172c:	c8 01       	movw	r24, r16
    172e:	0e 94 cd 57 	call	0xaf9a	; 0xaf9a <strcat>
	strcat(cmd,"\r");
    1732:	f8 01       	movw	r30, r16
    1734:	01 90       	ld	r0, Z+
    1736:	00 20       	and	r0, r0
    1738:	e9 f7       	brne	.-6      	; 0x1734 <esp8266_configure_ssid_and_password+0x7a>
    173a:	31 97       	sbiw	r30, 0x01	; 1
    173c:	8d e0       	ldi	r24, 0x0D	; 13
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	80 83       	st	Z, r24
    1742:	91 83       	std	Z+1, r25	; 0x01

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) 
{
	status = ESP8266_NONE;
    1744:	89 e0       	ldi	r24, 0x09	; 9
    1746:	80 93 11 2c 	sts	0x2C11, r24
	uart_write_str(str);
    174a:	c8 01       	movw	r24, r16
    174c:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    1750:	2f ef       	ldi	r18, 0xFF	; 255
    1752:	33 ec       	ldi	r19, 0xC3	; 195
    1754:	49 e0       	ldi	r20, 0x09	; 9
    1756:	21 50       	subi	r18, 0x01	; 1
    1758:	30 40       	sbci	r19, 0x00	; 0
    175a:	40 40       	sbci	r20, 0x00	; 0
    175c:	e1 f7       	brne	.-8      	; 0x1756 <esp8266_configure_ssid_and_password+0x9c>
    175e:	00 c0       	rjmp	.+0      	; 0x1760 <esp8266_configure_ssid_and_password+0xa6>
    1760:	00 00       	nop
	}
	strcat(cmd,number_of_bytes);
	strcat(cmd,"\r");

	esp8266_send_cmd(cmd,100);
	while((rx_buffer[0] != '>') && (timeout++ < 50)) {
    1762:	80 91 28 29 	lds	r24, 0x2928
    1766:	8e 33       	cpi	r24, 0x3E	; 62
    1768:	99 f0       	breq	.+38     	; 0x1790 <esp8266_configure_ssid_and_password+0xd6>
    176a:	82 e3       	ldi	r24, 0x32	; 50
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	e8 e2       	ldi	r30, 0x28	; 40
    1770:	f9 e2       	ldi	r31, 0x29	; 41
    1772:	af ef       	ldi	r26, 0xFF	; 255
    1774:	b3 ec       	ldi	r27, 0xC3	; 195
    1776:	29 e0       	ldi	r18, 0x09	; 9
    1778:	a1 50       	subi	r26, 0x01	; 1
    177a:	b0 40       	sbci	r27, 0x00	; 0
    177c:	20 40       	sbci	r18, 0x00	; 0
    177e:	e1 f7       	brne	.-8      	; 0x1778 <esp8266_configure_ssid_and_password+0xbe>
    1780:	00 c0       	rjmp	.+0      	; 0x1782 <esp8266_configure_ssid_and_password+0xc8>
    1782:	00 00       	nop
    1784:	20 81       	ld	r18, Z
    1786:	2e 33       	cpi	r18, 0x3E	; 62
    1788:	19 f0       	breq	.+6      	; 0x1790 <esp8266_configure_ssid_and_password+0xd6>
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	89 f7       	brne	.-30     	; 0x1772 <esp8266_configure_ssid_and_password+0xb8>
		_delay_ms(100);
	}
	printf("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nConnection: close\r\n\r\n%s\r\n\r\n",str);
    1790:	8b e8       	ldi	r24, 0x8B	; 139
    1792:	91 e2       	ldi	r25, 0x21	; 33
    1794:	9f 93       	push	r25
    1796:	8f 93       	push	r24
    1798:	83 e4       	ldi	r24, 0x43	; 67
    179a:	93 e2       	ldi	r25, 0x23	; 35
    179c:	9f 93       	push	r25
    179e:	8f 93       	push	r24
    17a0:	0e 94 36 58 	call	0xb06c	; 0xb06c <printf>
    17a4:	3f ef       	ldi	r19, 0xFF	; 255
    17a6:	43 ec       	ldi	r20, 0xC3	; 195
    17a8:	89 e0       	ldi	r24, 0x09	; 9
    17aa:	31 50       	subi	r19, 0x01	; 1
    17ac:	40 40       	sbci	r20, 0x00	; 0
    17ae:	80 40       	sbci	r24, 0x00	; 0
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <esp8266_configure_ssid_and_password+0xf0>
    17b2:	00 c0       	rjmp	.+0      	; 0x17b4 <esp8266_configure_ssid_and_password+0xfa>
    17b4:	00 00       	nop
    17b6:	9f ef       	ldi	r25, 0xFF	; 255
    17b8:	a7 ea       	ldi	r26, 0xA7	; 167
    17ba:	b1 e6       	ldi	r27, 0x61	; 97
    17bc:	91 50       	subi	r25, 0x01	; 1
    17be:	a0 40       	sbci	r26, 0x00	; 0
    17c0:	b0 40       	sbci	r27, 0x00	; 0
    17c2:	e1 f7       	brne	.-8      	; 0x17bc <esp8266_configure_ssid_and_password+0x102>
    17c4:	00 c0       	rjmp	.+0      	; 0x17c6 <esp8266_configure_ssid_and_password+0x10c>
    17c6:	00 00       	nop
		</body>\
		</html>");
		
		_delay_ms(1000);
		
		if (link_channel == '0') {
    17c8:	80 91 06 20 	lds	r24, 0x2006
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	80 33       	cpi	r24, 0x30	; 48
    17d6:	91 f4       	brne	.+36     	; 0x17fc <esp8266_configure_ssid_and_password+0x142>

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) 
{
	status = ESP8266_NONE;
    17d8:	89 e0       	ldi	r24, 0x09	; 9
    17da:	80 93 11 2c 	sts	0x2C11, r24
	uart_write_str(str);
    17de:	89 e8       	ldi	r24, 0x89	; 137
    17e0:	93 e2       	ldi	r25, 0x23	; 35
    17e2:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    17e6:	ef ef       	ldi	r30, 0xFF	; 255
    17e8:	f3 ec       	ldi	r31, 0xC3	; 195
    17ea:	29 e0       	ldi	r18, 0x09	; 9
    17ec:	e1 50       	subi	r30, 0x01	; 1
    17ee:	f0 40       	sbci	r31, 0x00	; 0
    17f0:	20 40       	sbci	r18, 0x00	; 0
    17f2:	e1 f7       	brne	.-8      	; 0x17ec <esp8266_configure_ssid_and_password+0x132>
    17f4:	00 c0       	rjmp	.+0      	; 0x17f6 <esp8266_configure_ssid_and_password+0x13c>
    17f6:	00 00       	nop
#endif
				return ESP8266_TIMEOUT;
			}	
		}
	}
	return ESP8266_SUCCESS;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	03 c1       	rjmp	.+518    	; 0x1a02 <esp8266_configure_ssid_and_password+0x348>

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) 
{
	status = ESP8266_NONE;
    17fc:	89 e0       	ldi	r24, 0x09	; 9
    17fe:	80 93 11 2c 	sts	0x2C11, r24
	uart_write_str(str);
    1802:	88 e9       	ldi	r24, 0x98	; 152
    1804:	93 e2       	ldi	r25, 0x23	; 35
    1806:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    180a:	3f ef       	ldi	r19, 0xFF	; 255
    180c:	43 ec       	ldi	r20, 0xC3	; 195
    180e:	89 e0       	ldi	r24, 0x09	; 9
    1810:	31 50       	subi	r19, 0x01	; 1
    1812:	40 40       	sbci	r20, 0x00	; 0
    1814:	80 40       	sbci	r24, 0x00	; 0
    1816:	e1 f7       	brne	.-8      	; 0x1810 <esp8266_configure_ssid_and_password+0x156>
    1818:	00 c0       	rjmp	.+0      	; 0x181a <esp8266_configure_ssid_and_password+0x160>
    181a:	00 00       	nop
#endif
				return ESP8266_TIMEOUT;
			}	
		}
	}
	return ESP8266_SUCCESS;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	f1 c0       	rjmp	.+482    	; 0x1a02 <esp8266_configure_ssid_and_password+0x348>
			esp8266_send_cmd("AT+CIPCLOSE=0\r", 100);
		} else {
			esp8266_send_cmd("AT+CIPCLOSE=1\r", 100);	
		}
		
	} else if(status == ESP8266_POST_REQ) {
    1820:	88 30       	cpi	r24, 0x08	; 8
    1822:	09 f0       	breq	.+2      	; 0x1826 <esp8266_configure_ssid_and_password+0x16c>
    1824:	eb c0       	rjmp	.+470    	; 0x19fc <esp8266_configure_ssid_and_password+0x342>
    1826:	0e e1       	ldi	r16, 0x1E	; 30
    1828:	10 e0       	ldi	r17, 0x00	; 0
    182a:	9f ef       	ldi	r25, 0xFF	; 255
    182c:	a3 ec       	ldi	r26, 0xC3	; 195
    182e:	b9 e0       	ldi	r27, 0x09	; 9
    1830:	91 50       	subi	r25, 0x01	; 1
    1832:	a0 40       	sbci	r26, 0x00	; 0
    1834:	b0 40       	sbci	r27, 0x00	; 0
    1836:	e1 f7       	brne	.-8      	; 0x1830 <esp8266_configure_ssid_and_password+0x176>
    1838:	00 c0       	rjmp	.+0      	; 0x183a <esp8266_configure_ssid_and_password+0x180>
    183a:	00 00       	nop
		uint16_t timeout = 0;
		
		while(timeout++ < 30) {
			_delay_ms(100);
			if (strstr(rx_buffer,"my_password") != NULL) {
    183c:	67 ea       	ldi	r22, 0xA7	; 167
    183e:	73 e2       	ldi	r23, 0x23	; 35
    1840:	88 e2       	ldi	r24, 0x28	; 40
    1842:	99 e2       	ldi	r25, 0x29	; 41
    1844:	0e 94 f9 57 	call	0xaff2	; 0xaff2 <strstr>
    1848:	89 2b       	or	r24, r25
    184a:	09 f4       	brne	.+2      	; 0x184e <esp8266_configure_ssid_and_password+0x194>
    184c:	d0 c0       	rjmp	.+416    	; 0x19ee <esp8266_configure_ssid_and_password+0x334>
				
				uint8_t ssid_len = sizeof(env_var.wifi_ssid);
				uint8_t pass_len = sizeof(env_var.wifi_pswd);
				
				memset(env_var.wifi_ssid,0,ssid_len);
    184e:	89 e1       	ldi	r24, 0x19	; 25
    1850:	ef ee       	ldi	r30, 0xEF	; 239
    1852:	fa e2       	ldi	r31, 0x2A	; 42
    1854:	df 01       	movw	r26, r30
    1856:	28 2f       	mov	r18, r24
    1858:	1d 92       	st	X+, r1
    185a:	2a 95       	dec	r18
    185c:	e9 f7       	brne	.-6      	; 0x1858 <esp8266_configure_ssid_and_password+0x19e>
				memset(env_var.wifi_pswd,0,pass_len);
    185e:	e6 ed       	ldi	r30, 0xD6	; 214
    1860:	fa e2       	ldi	r31, 0x2A	; 42
    1862:	df 01       	movw	r26, r30
    1864:	1d 92       	st	X+, r1
    1866:	8a 95       	dec	r24
    1868:	e9 f7       	brne	.-6      	; 0x1864 <esp8266_configure_ssid_and_password+0x1aa>
				
				uint16_t len = strlen(rx_buffer);
    186a:	e8 e2       	ldi	r30, 0x28	; 40
    186c:	f9 e2       	ldi	r31, 0x29	; 41
    186e:	01 90       	ld	r0, Z+
    1870:	00 20       	and	r0, r0
    1872:	e9 f7       	brne	.-6      	; 0x186e <esp8266_configure_ssid_and_password+0x1b4>
    1874:	31 97       	sbiw	r30, 0x01	; 1
    1876:	9f 01       	movw	r18, r30
    1878:	28 52       	subi	r18, 0x28	; 40
    187a:	39 42       	sbci	r19, 0x29	; 41
    187c:	79 01       	movw	r14, r18
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
    187e:	09 f4       	brne	.+2      	; 0x1882 <esp8266_configure_ssid_and_password+0x1c8>
    1880:	60 c0       	rjmp	.+192    	; 0x1942 <esp8266_configure_ssid_and_password+0x288>
    1882:	00 e0       	ldi	r16, 0x00	; 0
    1884:	10 e0       	ldi	r17, 0x00	; 0
				
				memset(env_var.wifi_ssid,0,ssid_len);
				memset(env_var.wifi_pswd,0,pass_len);
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
    1886:	b1 2c       	mov	r11, r1
				for (uint16_t i = 0; i < len; i++) {
					if(rx_buffer[i] == '=') {
						n++;
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
    1888:	0f 2e       	mov	r0, r31
    188a:	f4 e1       	ldi	r31, 0x14	; 20
    188c:	af 2e       	mov	r10, r31
    188e:	f0 2d       	mov	r31, r0
    1890:	ce 01       	movw	r24, r28
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	6c 01       	movw	r12, r24
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
					if(rx_buffer[i] == '=') {
    1896:	f8 01       	movw	r30, r16
    1898:	e8 5d       	subi	r30, 0xD8	; 216
    189a:	f6 4d       	sbci	r31, 0xD6	; 214
    189c:	80 81       	ld	r24, Z
    189e:	8d 33       	cpi	r24, 0x3D	; 61
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <esp8266_configure_ssid_and_password+0x1ea>
    18a2:	49 c0       	rjmp	.+146    	; 0x1936 <esp8266_configure_ssid_and_password+0x27c>
						n++;
    18a4:	b3 94       	inc	r11
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
    18a6:	d6 01       	movw	r26, r12
    18a8:	ea 2d       	mov	r30, r10
    18aa:	1d 92       	st	X+, r1
    18ac:	ea 95       	dec	r30
    18ae:	e9 f7       	brne	.-6      	; 0x18aa <esp8266_configure_ssid_and_password+0x1f0>
						while ((rx_buffer[++i] != '&') && (i != len)) {
    18b0:	c8 01       	movw	r24, r16
    18b2:	01 96       	adiw	r24, 0x01	; 1
    18b4:	fc 01       	movw	r30, r24
    18b6:	e8 5d       	subi	r30, 0xD8	; 216
    18b8:	f6 4d       	sbci	r31, 0xD6	; 214
    18ba:	20 81       	ld	r18, Z
    18bc:	26 32       	cpi	r18, 0x26	; 38
    18be:	91 f0       	breq	.+36     	; 0x18e4 <esp8266_configure_ssid_and_password+0x22a>
    18c0:	8e 15       	cp	r24, r14
    18c2:	9f 05       	cpc	r25, r15
    18c4:	89 f0       	breq	.+34     	; 0x18e8 <esp8266_configure_ssid_and_password+0x22e>
    18c6:	d6 01       	movw	r26, r12
    18c8:	f8 01       	movw	r30, r16
    18ca:	e6 5d       	subi	r30, 0xD6	; 214
    18cc:	f6 4d       	sbci	r31, 0xD6	; 214
    18ce:	8c 01       	movw	r16, r24
							temp[j++] = rx_buffer[i];
    18d0:	2d 93       	st	X+, r18
					if(rx_buffer[i] == '=') {
						n++;
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
						while ((rx_buffer[++i] != '&') && (i != len)) {
    18d2:	0f 5f       	subi	r16, 0xFF	; 255
    18d4:	1f 4f       	sbci	r17, 0xFF	; 255
    18d6:	21 91       	ld	r18, Z+
    18d8:	26 32       	cpi	r18, 0x26	; 38
    18da:	39 f0       	breq	.+14     	; 0x18ea <esp8266_configure_ssid_and_password+0x230>
    18dc:	0e 15       	cp	r16, r14
    18de:	1f 05       	cpc	r17, r15
    18e0:	b9 f7       	brne	.-18     	; 0x18d0 <esp8266_configure_ssid_and_password+0x216>
    18e2:	03 c0       	rjmp	.+6      	; 0x18ea <esp8266_configure_ssid_and_password+0x230>
    18e4:	8c 01       	movw	r16, r24
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <esp8266_configure_ssid_and_password+0x230>
    18e8:	8c 01       	movw	r16, r24
							temp[j++] = rx_buffer[i];
						}
						if (n == 1) {
    18ea:	f1 e0       	ldi	r31, 0x01	; 1
    18ec:	bf 12       	cpse	r11, r31
    18ee:	0f c0       	rjmp	.+30     	; 0x190e <esp8266_configure_ssid_and_password+0x254>
							if (strlen(temp) < ssid_len)
    18f0:	f6 01       	movw	r30, r12
    18f2:	01 90       	ld	r0, Z+
    18f4:	00 20       	and	r0, r0
    18f6:	e9 f7       	brne	.-6      	; 0x18f2 <esp8266_configure_ssid_and_password+0x238>
    18f8:	31 97       	sbiw	r30, 0x01	; 1
    18fa:	ec 19       	sub	r30, r12
    18fc:	fd 09       	sbc	r31, r13
    18fe:	79 97       	sbiw	r30, 0x19	; 25
    1900:	d0 f4       	brcc	.+52     	; 0x1936 <esp8266_configure_ssid_and_password+0x27c>
								strcpy(env_var.wifi_ssid,temp);
    1902:	b6 01       	movw	r22, r12
    1904:	8f ee       	ldi	r24, 0xEF	; 239
    1906:	9a e2       	ldi	r25, 0x2A	; 42
    1908:	0e 94 e3 57 	call	0xafc6	; 0xafc6 <strcpy>
    190c:	14 c0       	rjmp	.+40     	; 0x1936 <esp8266_configure_ssid_and_password+0x27c>
						} else if (n == 2) {
    190e:	22 e0       	ldi	r18, 0x02	; 2
    1910:	b2 12       	cpse	r11, r18
    1912:	11 c0       	rjmp	.+34     	; 0x1936 <esp8266_configure_ssid_and_password+0x27c>
							if (strlen(temp) < pass_len)
    1914:	de 01       	movw	r26, r28
    1916:	11 96       	adiw	r26, 0x01	; 1
    1918:	fd 01       	movw	r30, r26
    191a:	01 90       	ld	r0, Z+
    191c:	00 20       	and	r0, r0
    191e:	e9 f7       	brne	.-6      	; 0x191a <esp8266_configure_ssid_and_password+0x260>
    1920:	31 97       	sbiw	r30, 0x01	; 1
    1922:	ea 1b       	sub	r30, r26
    1924:	fb 0b       	sbc	r31, r27
    1926:	79 97       	sbiw	r30, 0x19	; 25
    1928:	60 f4       	brcc	.+24     	; 0x1942 <esp8266_configure_ssid_and_password+0x288>
								strcpy(env_var.wifi_pswd,temp);
    192a:	bd 01       	movw	r22, r26
    192c:	86 ed       	ldi	r24, 0xD6	; 214
    192e:	9a e2       	ldi	r25, 0x2A	; 42
    1930:	0e 94 e3 57 	call	0xafc6	; 0xafc6 <strcpy>
    1934:	06 c0       	rjmp	.+12     	; 0x1942 <esp8266_configure_ssid_and_password+0x288>
				memset(env_var.wifi_pswd,0,pass_len);
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
    1936:	0f 5f       	subi	r16, 0xFF	; 255
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	0e 15       	cp	r16, r14
    193c:	1f 05       	cpc	r17, r15
    193e:	08 f4       	brcc	.+2      	; 0x1942 <esp8266_configure_ssid_and_password+0x288>
    1940:	aa cf       	rjmp	.-172    	; 0x1896 <esp8266_configure_ssid_and_password+0x1dc>
							break;
						}
					}
				}
				
				if (link_channel == '0') {
    1942:	80 91 06 20 	lds	r24, 0x2006
    1946:	80 33       	cpi	r24, 0x30	; 48
    1948:	89 f4       	brne	.+34     	; 0x196c <esp8266_configure_ssid_and_password+0x2b2>

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) 
{
	status = ESP8266_NONE;
    194a:	89 e0       	ldi	r24, 0x09	; 9
    194c:	80 93 11 2c 	sts	0x2C11, r24
	uart_write_str(str);
    1950:	89 e8       	ldi	r24, 0x89	; 137
    1952:	93 e2       	ldi	r25, 0x23	; 35
    1954:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    1958:	3f ef       	ldi	r19, 0xFF	; 255
    195a:	43 ec       	ldi	r20, 0xC3	; 195
    195c:	89 e0       	ldi	r24, 0x09	; 9
    195e:	31 50       	subi	r19, 0x01	; 1
    1960:	40 40       	sbci	r20, 0x00	; 0
    1962:	80 40       	sbci	r24, 0x00	; 0
    1964:	e1 f7       	brne	.-8      	; 0x195e <esp8266_configure_ssid_and_password+0x2a4>
    1966:	00 c0       	rjmp	.+0      	; 0x1968 <esp8266_configure_ssid_and_password+0x2ae>
    1968:	00 00       	nop
    196a:	10 c0       	rjmp	.+32     	; 0x198c <esp8266_configure_ssid_and_password+0x2d2>

esp8266_status_t status;

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) 
{
	status = ESP8266_NONE;
    196c:	89 e0       	ldi	r24, 0x09	; 9
    196e:	80 93 11 2c 	sts	0x2C11, r24
	uart_write_str(str);
    1972:	88 e9       	ldi	r24, 0x98	; 152
    1974:	93 e2       	ldi	r25, 0x23	; 35
    1976:	0e 94 e9 1f 	call	0x3fd2	; 0x3fd2 <uart_write_str>
    197a:	9f ef       	ldi	r25, 0xFF	; 255
    197c:	a3 ec       	ldi	r26, 0xC3	; 195
    197e:	b9 e0       	ldi	r27, 0x09	; 9
    1980:	91 50       	subi	r25, 0x01	; 1
    1982:	a0 40       	sbci	r26, 0x00	; 0
    1984:	b0 40       	sbci	r27, 0x00	; 0
    1986:	e1 f7       	brne	.-8      	; 0x1980 <esp8266_configure_ssid_and_password+0x2c6>
    1988:	00 c0       	rjmp	.+0      	; 0x198a <esp8266_configure_ssid_and_password+0x2d0>
    198a:	00 00       	nop
	_delay_ms(500);
}

void esp8266_off(void) 
{
	PORTD.OUTCLR = CH_EN;
    198c:	80 e2       	ldi	r24, 0x20	; 32
    198e:	e0 e6       	ldi	r30, 0x60	; 96
    1990:	f6 e0       	ldi	r31, 0x06	; 6
    1992:	86 83       	std	Z+6, r24	; 0x06
    1994:	ef ef       	ldi	r30, 0xFF	; 255
    1996:	f7 ea       	ldi	r31, 0xA7	; 167
    1998:	21 e6       	ldi	r18, 0x61	; 97
    199a:	e1 50       	subi	r30, 0x01	; 1
    199c:	f0 40       	sbci	r31, 0x00	; 0
    199e:	20 40       	sbci	r18, 0x00	; 0
    19a0:	e1 f7       	brne	.-8      	; 0x199a <esp8266_configure_ssid_and_password+0x2e0>
    19a2:	00 c0       	rjmp	.+0      	; 0x19a4 <esp8266_configure_ssid_and_password+0x2ea>
    19a4:	00 00       	nop
					esp8266_send_cmd("AT+CIPCLOSE=1\r", 100);
				}
				
				esp8266_off();
				_delay_ms(1000);
				esp8266_on();
    19a6:	cc dc       	rcall	.-1640   	; 0x1340 <esp8266_on>
				status = esp8266_setup();
    19a8:	f8 dc       	rcall	.-1552   	; 0x139a <esp8266_setup>
    19aa:	80 93 11 2c 	sts	0x2C11, r24
				if (status != ESP8266_SUCCESS) {
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	39 f0       	breq	.+14     	; 0x19c0 <esp8266_configure_ssid_and_password+0x306>
#ifdef SHOW_MANUAL
					display_print_scrolling_text("COULD NOT JOIN AP",false);
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	83 eb       	ldi	r24, 0xB3	; 179
    19b6:	93 e2       	ldi	r25, 0x23	; 35
    19b8:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
					return ESP8266_TIMEOUT;
    19bc:	83 e0       	ldi	r24, 0x03	; 3
    19be:	21 c0       	rjmp	.+66     	; 0x1a02 <esp8266_configure_ssid_and_password+0x348>
				}
				
				status = esp8266_join_ap(env_var.wifi_ssid,env_var.wifi_pswd);
    19c0:	66 ed       	ldi	r22, 0xD6	; 214
    19c2:	7a e2       	ldi	r23, 0x2A	; 42
    19c4:	8f ee       	ldi	r24, 0xEF	; 239
    19c6:	9a e2       	ldi	r25, 0x2A	; 42
    19c8:	38 dd       	rcall	.-1424   	; 0x143a <esp8266_join_ap>
    19ca:	80 93 11 2c 	sts	0x2C11, r24
				if (status != ESP8266_SUCCESS) {
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	39 f0       	breq	.+14     	; 0x19e0 <esp8266_configure_ssid_and_password+0x326>
#ifdef SHOW_MANUAL
					display_print_scrolling_text("COULD NOT JOIN AP",false);
    19d2:	60 e0       	ldi	r22, 0x00	; 0
    19d4:	83 eb       	ldi	r24, 0xB3	; 179
    19d6:	93 e2       	ldi	r25, 0x23	; 35
    19d8:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
					return ESP8266_TIMEOUT;
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	11 c0       	rjmp	.+34     	; 0x1a02 <esp8266_configure_ssid_and_password+0x348>
				}
#ifdef SHOW_MANUAL
				display_print_scrolling_text("WIFI CONFIGURED",false);
    19e0:	60 e0       	ldi	r22, 0x00	; 0
    19e2:	85 ec       	ldi	r24, 0xC5	; 197
    19e4:	93 e2       	ldi	r25, 0x23	; 35
    19e6:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
				return ESP8266_TIMEOUT;
    19ea:	83 e0       	ldi	r24, 0x03	; 3
    19ec:	0a c0       	rjmp	.+20     	; 0x1a02 <esp8266_configure_ssid_and_password+0x348>
    19ee:	01 50       	subi	r16, 0x01	; 1
    19f0:	11 09       	sbc	r17, r1
		}
		
	} else if(status == ESP8266_POST_REQ) {
		uint16_t timeout = 0;
		
		while(timeout++ < 30) {
    19f2:	01 15       	cp	r16, r1
    19f4:	11 05       	cpc	r17, r1
    19f6:	09 f0       	breq	.+2      	; 0x19fa <esp8266_configure_ssid_and_password+0x340>
    19f8:	18 cf       	rjmp	.-464    	; 0x182a <esp8266_configure_ssid_and_password+0x170>
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <esp8266_configure_ssid_and_password+0x346>
#endif
				return ESP8266_TIMEOUT;
			}	
		}
	}
	return ESP8266_SUCCESS;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <esp8266_configure_ssid_and_password+0x348>
    1a00:	81 e0       	ldi	r24, 0x01	; 1
}
    1a02:	e7 96       	adiw	r28, 0x37	; 55
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	ff 90       	pop	r15
    1a12:	ef 90       	pop	r14
    1a14:	df 90       	pop	r13
    1a16:	cf 90       	pop	r12
    1a18:	bf 90       	pop	r11
    1a1a:	af 90       	pop	r10
    1a1c:	08 95       	ret

00001a1e <__vector_88>:

ISR(USARTD0_RXC_vect) 
{
    1a1e:	1f 92       	push	r1
    1a20:	0f 92       	push	r0
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	0f 92       	push	r0
    1a26:	11 24       	eor	r1, r1
    1a28:	0b b6       	in	r0, 0x3b	; 59
    1a2a:	0f 92       	push	r0
    1a2c:	2f 93       	push	r18
    1a2e:	3f 93       	push	r19
    1a30:	4f 93       	push	r20
    1a32:	5f 93       	push	r21
    1a34:	6f 93       	push	r22
    1a36:	7f 93       	push	r23
    1a38:	8f 93       	push	r24
    1a3a:	9f 93       	push	r25
    1a3c:	af 93       	push	r26
    1a3e:	bf 93       	push	r27
    1a40:	ef 93       	push	r30
    1a42:	ff 93       	push	r31
	
	char rx_temp = USARTD0.DATA;
    1a44:	40 91 a0 09 	lds	r20, 0x09A0
	
	if (rx_temp == '\n') {
    1a48:	4a 30       	cpi	r20, 0x0A	; 10
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <__vector_88+0x30>
    1a4c:	88 c0       	rjmp	.+272    	; 0x1b5e <__vector_88+0x140>
		if (strstr(rx_buffer,"OK") || strstr(rx_buffer,"ready")) {
    1a4e:	65 ed       	ldi	r22, 0xD5	; 213
    1a50:	73 e2       	ldi	r23, 0x23	; 35
    1a52:	88 e2       	ldi	r24, 0x28	; 40
    1a54:	99 e2       	ldi	r25, 0x29	; 41
    1a56:	0e 94 f9 57 	call	0xaff2	; 0xaff2 <strstr>
    1a5a:	89 2b       	or	r24, r25
    1a5c:	41 f4       	brne	.+16     	; 0x1a6e <__vector_88+0x50>
    1a5e:	68 ed       	ldi	r22, 0xD8	; 216
    1a60:	73 e2       	ldi	r23, 0x23	; 35
    1a62:	88 e2       	ldi	r24, 0x28	; 40
    1a64:	99 e2       	ldi	r25, 0x29	; 41
    1a66:	0e 94 f9 57 	call	0xaff2	; 0xaff2 <strstr>
    1a6a:	89 2b       	or	r24, r25
    1a6c:	21 f0       	breq	.+8      	; 0x1a76 <__vector_88+0x58>
			status = ESP8266_SUCCESS;
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	80 93 11 2c 	sts	0x2C11, r24
    1a74:	5c c0       	rjmp	.+184    	; 0x1b2e <__vector_88+0x110>
		} else if (strstr(rx_buffer,"ERROR") || strstr(rx_buffer,"FAIL")) {
    1a76:	6a e8       	ldi	r22, 0x8A	; 138
    1a78:	76 e2       	ldi	r23, 0x26	; 38
    1a7a:	88 e2       	ldi	r24, 0x28	; 40
    1a7c:	99 e2       	ldi	r25, 0x29	; 41
    1a7e:	0e 94 f9 57 	call	0xaff2	; 0xaff2 <strstr>
    1a82:	89 2b       	or	r24, r25
    1a84:	41 f4       	brne	.+16     	; 0x1a96 <__vector_88+0x78>
    1a86:	6e ed       	ldi	r22, 0xDE	; 222
    1a88:	73 e2       	ldi	r23, 0x23	; 35
    1a8a:	88 e2       	ldi	r24, 0x28	; 40
    1a8c:	99 e2       	ldi	r25, 0x29	; 41
    1a8e:	0e 94 f9 57 	call	0xaff2	; 0xaff2 <strstr>
    1a92:	89 2b       	or	r24, r25
    1a94:	19 f0       	breq	.+6      	; 0x1a9c <__vector_88+0x7e>
			status = ESP8266_ERROR;
    1a96:	10 92 11 2c 	sts	0x2C11, r1
    1a9a:	49 c0       	rjmp	.+146    	; 0x1b2e <__vector_88+0x110>
		} else if (strstr(rx_buffer,"CONNECT")) {
    1a9c:	63 ee       	ldi	r22, 0xE3	; 227
    1a9e:	73 e2       	ldi	r23, 0x23	; 35
    1aa0:	88 e2       	ldi	r24, 0x28	; 40
    1aa2:	99 e2       	ldi	r25, 0x29	; 41
    1aa4:	0e 94 f9 57 	call	0xaff2	; 0xaff2 <strstr>
    1aa8:	89 2b       	or	r24, r25
    1aaa:	21 f0       	breq	.+8      	; 0x1ab4 <__vector_88+0x96>
			status = ESP8266_CONNECT;
    1aac:	84 e0       	ldi	r24, 0x04	; 4
    1aae:	80 93 11 2c 	sts	0x2C11, r24
    1ab2:	3d c0       	rjmp	.+122    	; 0x1b2e <__vector_88+0x110>
		} else if (strstr(rx_buffer,"CLOSED")) {
    1ab4:	6b ee       	ldi	r22, 0xEB	; 235
    1ab6:	73 e2       	ldi	r23, 0x23	; 35
    1ab8:	88 e2       	ldi	r24, 0x28	; 40
    1aba:	99 e2       	ldi	r25, 0x29	; 41
    1abc:	0e 94 f9 57 	call	0xaff2	; 0xaff2 <strstr>
    1ac0:	89 2b       	or	r24, r25
    1ac2:	21 f0       	breq	.+8      	; 0x1acc <__vector_88+0xae>
			status = ESP8266_CLOSED;
    1ac4:	86 e0       	ldi	r24, 0x06	; 6
    1ac6:	80 93 11 2c 	sts	0x2C11, r24
    1aca:	31 c0       	rjmp	.+98     	; 0x1b2e <__vector_88+0x110>
		} else if (strstr(rx_buffer,"GET")) {
    1acc:	62 ef       	ldi	r22, 0xF2	; 242
    1ace:	73 e2       	ldi	r23, 0x23	; 35
    1ad0:	88 e2       	ldi	r24, 0x28	; 40
    1ad2:	99 e2       	ldi	r25, 0x29	; 41
    1ad4:	0e 94 f9 57 	call	0xaff2	; 0xaff2 <strstr>
    1ad8:	89 2b       	or	r24, r25
    1ada:	41 f0       	breq	.+16     	; 0x1aec <__vector_88+0xce>
			link_channel = rx_buffer[5];
    1adc:	80 91 2d 29 	lds	r24, 0x292D
    1ae0:	80 93 06 20 	sts	0x2006, r24
			status = ESP8266_GET_REQ;
    1ae4:	87 e0       	ldi	r24, 0x07	; 7
    1ae6:	80 93 11 2c 	sts	0x2C11, r24
    1aea:	21 c0       	rjmp	.+66     	; 0x1b2e <__vector_88+0x110>
		} else if (strstr(rx_buffer,"POST")) {
    1aec:	66 ef       	ldi	r22, 0xF6	; 246
    1aee:	73 e2       	ldi	r23, 0x23	; 35
    1af0:	88 e2       	ldi	r24, 0x28	; 40
    1af2:	99 e2       	ldi	r25, 0x29	; 41
    1af4:	0e 94 f9 57 	call	0xaff2	; 0xaff2 <strstr>
    1af8:	89 2b       	or	r24, r25
    1afa:	21 f0       	breq	.+8      	; 0x1b04 <__vector_88+0xe6>
			status = ESP8266_POST_REQ;
    1afc:	88 e0       	ldi	r24, 0x08	; 8
    1afe:	80 93 11 2c 	sts	0x2C11, r24
    1b02:	15 c0       	rjmp	.+42     	; 0x1b2e <__vector_88+0x110>
		} else if (strstr(rx_buffer,"192")) {
    1b04:	6b ef       	ldi	r22, 0xFB	; 251
    1b06:	73 e2       	ldi	r23, 0x23	; 35
    1b08:	88 e2       	ldi	r24, 0x28	; 40
    1b0a:	99 e2       	ldi	r25, 0x29	; 41
    1b0c:	0e 94 f9 57 	call	0xaff2	; 0xaff2 <strstr>
    1b10:	89 2b       	or	r24, r25
    1b12:	69 f0       	breq	.+26     	; 0x1b2e <__vector_88+0x110>
			strncpy(ip_address,strchr(rx_buffer,'\"'),19);
    1b14:	62 e2       	ldi	r22, 0x22	; 34
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	88 e2       	ldi	r24, 0x28	; 40
    1b1a:	99 e2       	ldi	r25, 0x29	; 41
    1b1c:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <strchr>
    1b20:	43 e1       	ldi	r20, 0x13	; 19
    1b22:	50 e0       	ldi	r21, 0x00	; 0
    1b24:	bc 01       	movw	r22, r24
    1b26:	8c ed       	ldi	r24, 0xDC	; 220
    1b28:	9b e2       	ldi	r25, 0x2B	; 43
    1b2a:	0e 94 ea 57 	call	0xafd4	; 0xafd4 <strncpy>
		} 
		if (strstr(rx_buffer,"{")) {
    1b2e:	6b e7       	ldi	r22, 0x7B	; 123
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	88 e2       	ldi	r24, 0x28	; 40
    1b34:	99 e2       	ldi	r25, 0x29	; 41
    1b36:	0e 94 d8 57 	call	0xafb0	; 0xafb0 <strchr>
    1b3a:	89 2b       	or	r24, r25
    1b3c:	21 f0       	breq	.+8      	; 0x1b46 <__vector_88+0x128>
			json_found = true;	
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	80 93 24 2a 	sts	0x2A24, r24
    1b44:	26 c0       	rjmp	.+76     	; 0x1b92 <__vector_88+0x174>
		} else {
			//Flush buffer
			rx_ptr = 0;
    1b46:	10 92 22 2a 	sts	0x2A22, r1
    1b4a:	10 92 23 2a 	sts	0x2A23, r1
			memset(rx_buffer, 0, RX_BUFFER);	
    1b4e:	8a ef       	ldi	r24, 0xFA	; 250
    1b50:	e8 e2       	ldi	r30, 0x28	; 40
    1b52:	f9 e2       	ldi	r31, 0x29	; 41
    1b54:	df 01       	movw	r26, r30
    1b56:	1d 92       	st	X+, r1
    1b58:	8a 95       	dec	r24
    1b5a:	e9 f7       	brne	.-6      	; 0x1b56 <__vector_88+0x138>
    1b5c:	1a c0       	rjmp	.+52     	; 0x1b92 <__vector_88+0x174>
		}
	} else {
		rx_buffer[rx_ptr++] = rx_temp;
    1b5e:	80 91 22 2a 	lds	r24, 0x2A22
    1b62:	90 91 23 2a 	lds	r25, 0x2A23
    1b66:	9c 01       	movw	r18, r24
    1b68:	2f 5f       	subi	r18, 0xFF	; 255
    1b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6c:	20 93 22 2a 	sts	0x2A22, r18
    1b70:	30 93 23 2a 	sts	0x2A23, r19
    1b74:	fc 01       	movw	r30, r24
    1b76:	e8 5d       	subi	r30, 0xD8	; 216
    1b78:	f6 4d       	sbci	r31, 0xD6	; 214
    1b7a:	40 83       	st	Z, r20
		
		//Buffer overflow guard
		if (rx_ptr == RX_BUFFER) {
    1b7c:	80 91 22 2a 	lds	r24, 0x2A22
    1b80:	90 91 23 2a 	lds	r25, 0x2A23
    1b84:	8a 3f       	cpi	r24, 0xFA	; 250
    1b86:	91 05       	cpc	r25, r1
    1b88:	21 f4       	brne	.+8      	; 0x1b92 <__vector_88+0x174>
			rx_ptr = 0;
    1b8a:	10 92 22 2a 	sts	0x2A22, r1
    1b8e:	10 92 23 2a 	sts	0x2A23, r1
		}
	}
    1b92:	ff 91       	pop	r31
    1b94:	ef 91       	pop	r30
    1b96:	bf 91       	pop	r27
    1b98:	af 91       	pop	r26
    1b9a:	9f 91       	pop	r25
    1b9c:	8f 91       	pop	r24
    1b9e:	7f 91       	pop	r23
    1ba0:	6f 91       	pop	r22
    1ba2:	5f 91       	pop	r21
    1ba4:	4f 91       	pop	r20
    1ba6:	3f 91       	pop	r19
    1ba8:	2f 91       	pop	r18
    1baa:	0f 90       	pop	r0
    1bac:	0b be       	out	0x3b, r0	; 59
    1bae:	0f 90       	pop	r0
    1bb0:	0f be       	out	0x3f, r0	; 63
    1bb2:	0f 90       	pop	r0
    1bb4:	1f 90       	pop	r1
    1bb6:	18 95       	reti

00001bb8 <ht1632c_set_pixel>:
void ht1632c_blink(bool blink_on) 
{	
	if (blink_on) {
		ht1632c_write_command(HT1632_BLINK_ON);	
	} else {
		ht1632c_write_command(HT1632_BLINK_OFF);	
    1bb8:	fc 01       	movw	r30, r24
    1bba:	f6 95       	lsr	r31
    1bbc:	e7 95       	ror	r30
    1bbe:	f6 95       	lsr	r31
    1bc0:	e7 95       	ror	r30
    1bc2:	f6 95       	lsr	r31
    1bc4:	e7 95       	ror	r30
    1bc6:	ef 50       	subi	r30, 0x0F	; 15
    1bc8:	f4 4d       	sbci	r31, 0xD4	; 212
    1bca:	87 70       	andi	r24, 0x07	; 7
    1bcc:	99 27       	eor	r25, r25
    1bce:	21 e0       	ldi	r18, 0x01	; 1
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	a9 01       	movw	r20, r18
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <ht1632c_set_pixel+0x22>
    1bd6:	44 0f       	add	r20, r20
    1bd8:	55 1f       	adc	r21, r21
    1bda:	8a 95       	dec	r24
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <ht1632c_set_pixel+0x1e>
    1bde:	ca 01       	movw	r24, r20
    1be0:	90 81       	ld	r25, Z
    1be2:	89 2b       	or	r24, r25
    1be4:	80 83       	st	Z, r24
    1be6:	08 95       	ret

00001be8 <ht1632c_clr_pixel>:
    1be8:	fc 01       	movw	r30, r24
    1bea:	f6 95       	lsr	r31
    1bec:	e7 95       	ror	r30
    1bee:	f6 95       	lsr	r31
    1bf0:	e7 95       	ror	r30
    1bf2:	f6 95       	lsr	r31
    1bf4:	e7 95       	ror	r30
    1bf6:	ef 50       	subi	r30, 0x0F	; 15
    1bf8:	f4 4d       	sbci	r31, 0xD4	; 212
    1bfa:	87 70       	andi	r24, 0x07	; 7
    1bfc:	99 27       	eor	r25, r25
    1bfe:	21 e0       	ldi	r18, 0x01	; 1
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	a9 01       	movw	r20, r18
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <ht1632c_clr_pixel+0x22>
    1c06:	44 0f       	add	r20, r20
    1c08:	55 1f       	adc	r21, r21
    1c0a:	8a 95       	dec	r24
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <ht1632c_clr_pixel+0x1e>
    1c0e:	ca 01       	movw	r24, r20
    1c10:	80 95       	com	r24
    1c12:	90 81       	ld	r25, Z
    1c14:	89 23       	and	r24, r25
    1c16:	80 83       	st	Z, r24
    1c18:	08 95       	ret

00001c1a <ht1632c_clear_screen>:
    1c1a:	e1 ef       	ldi	r30, 0xF1	; 241
    1c1c:	fb e2       	ldi	r31, 0x2B	; 43
    1c1e:	81 e1       	ldi	r24, 0x11	; 17
    1c20:	9c e2       	ldi	r25, 0x2C	; 44
    1c22:	11 92       	st	Z+, r1
    1c24:	e8 17       	cp	r30, r24
    1c26:	f9 07       	cpc	r31, r25
    1c28:	e1 f7       	brne	.-8      	; 0x1c22 <ht1632c_clear_screen+0x8>
    1c2a:	0c 94 23 21 	jmp	0x4246	; 0x4246 <display_refresh_screen>
    1c2e:	08 95       	ret

00001c30 <ht1632c_write_data>:
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	28 e0       	ldi	r18, 0x08	; 8
    1c36:	e0 e8       	ldi	r30, 0x80	; 128
    1c38:	f6 e0       	ldi	r31, 0x06	; 6
    1c3a:	21 83       	std	Z+1, r18	; 0x01
    1c3c:	66 23       	and	r22, r22
    1c3e:	c1 f0       	breq	.+48     	; 0x1c70 <ht1632c_write_data+0x40>
    1c40:	74 e0       	ldi	r23, 0x04	; 4
    1c42:	41 e0       	ldi	r20, 0x01	; 1
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	a8 e0       	ldi	r26, 0x08	; 8
    1c48:	76 83       	std	Z+6, r23	; 0x06
    1c4a:	2f ef       	ldi	r18, 0xFF	; 255
    1c4c:	26 0f       	add	r18, r22
    1c4e:	ea 01       	movw	r28, r20
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <ht1632c_write_data+0x26>
    1c52:	cc 0f       	add	r28, r28
    1c54:	dd 1f       	adc	r29, r29
    1c56:	2a 95       	dec	r18
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <ht1632c_write_data+0x22>
    1c5a:	9e 01       	movw	r18, r28
    1c5c:	28 23       	and	r18, r24
    1c5e:	39 23       	and	r19, r25
    1c60:	23 2b       	or	r18, r19
    1c62:	11 f0       	breq	.+4      	; 0x1c68 <ht1632c_write_data+0x38>
    1c64:	a5 83       	std	Z+5, r26	; 0x05
    1c66:	01 c0       	rjmp	.+2      	; 0x1c6a <ht1632c_write_data+0x3a>
    1c68:	a6 83       	std	Z+6, r26	; 0x06
    1c6a:	75 83       	std	Z+5, r23	; 0x05
    1c6c:	61 50       	subi	r22, 0x01	; 1
    1c6e:	61 f7       	brne	.-40     	; 0x1c48 <ht1632c_write_data+0x18>
    1c70:	88 e0       	ldi	r24, 0x08	; 8
    1c72:	e0 e8       	ldi	r30, 0x80	; 128
    1c74:	f6 e0       	ldi	r31, 0x06	; 6
    1c76:	86 83       	std	Z+6, r24	; 0x06
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

00001c7e <ht1632c_refresh_screen>:
    1c7e:	0f 93       	push	r16
    1c80:	1f 93       	push	r17
    1c82:	cf 93       	push	r28
    1c84:	df 93       	push	r29
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	e0 e8       	ldi	r30, 0x80	; 128
    1c8a:	f6 e0       	ldi	r31, 0x06	; 6
    1c8c:	86 83       	std	Z+6, r24	; 0x06
    1c8e:	63 e0       	ldi	r22, 0x03	; 3
    1c90:	85 e0       	ldi	r24, 0x05	; 5
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	cd df       	rcall	.-102    	; 0x1c30 <ht1632c_write_data>
    1c96:	67 e0       	ldi	r22, 0x07	; 7
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	c9 df       	rcall	.-110    	; 0x1c30 <ht1632c_write_data>
    1c9e:	c2 ef       	ldi	r28, 0xF2	; 242
    1ca0:	db e2       	ldi	r29, 0x2B	; 43
    1ca2:	02 e1       	ldi	r16, 0x12	; 18
    1ca4:	1c e2       	ldi	r17, 0x2C	; 44
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	31 97       	sbiw	r30, 0x01	; 1
    1caa:	80 81       	ld	r24, Z
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	98 2f       	mov	r25, r24
    1cb0:	88 27       	eor	r24, r24
    1cb2:	28 81       	ld	r18, Y
    1cb4:	60 e1       	ldi	r22, 0x10	; 16
    1cb6:	82 2b       	or	r24, r18
    1cb8:	bb df       	rcall	.-138    	; 0x1c30 <ht1632c_write_data>
    1cba:	22 96       	adiw	r28, 0x02	; 2
    1cbc:	c0 17       	cp	r28, r16
    1cbe:	d1 07       	cpc	r29, r17
    1cc0:	91 f7       	brne	.-28     	; 0x1ca6 <ht1632c_refresh_screen+0x28>
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	e0 e8       	ldi	r30, 0x80	; 128
    1cc6:	f6 e0       	ldi	r31, 0x06	; 6
    1cc8:	85 83       	std	Z+5, r24	; 0x05
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	08 95       	ret

00001cd4 <ht1632c_write_command>:
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	94 60       	ori	r25, 0x04	; 4
    1cde:	c0 e8       	ldi	r28, 0x80	; 128
    1ce0:	d6 e0       	ldi	r29, 0x06	; 6
    1ce2:	11 e0       	ldi	r17, 0x01	; 1
    1ce4:	1e 83       	std	Y+6, r17	; 0x06
    1ce6:	6c e0       	ldi	r22, 0x0C	; 12
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	a1 df       	rcall	.-190    	; 0x1c30 <ht1632c_write_data>
    1cee:	1d 83       	std	Y+5, r17	; 0x05
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	08 95       	ret

00001cf8 <ht1632c_setup>:
    1cf8:	cf 93       	push	r28
    1cfa:	c8 2f       	mov	r28, r24
    1cfc:	e0 e8       	ldi	r30, 0x80	; 128
    1cfe:	f6 e0       	ldi	r31, 0x06	; 6
    1d00:	91 e0       	ldi	r25, 0x01	; 1
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	95 83       	std	Z+5, r25	; 0x05
    1d06:	94 e0       	ldi	r25, 0x04	; 4
    1d08:	91 83       	std	Z+1, r25	; 0x01
    1d0a:	95 83       	std	Z+5, r25	; 0x05
    1d0c:	88 e0       	ldi	r24, 0x08	; 8
    1d0e:	81 83       	std	Z+1, r24	; 0x01
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	e0 df       	rcall	.-64     	; 0x1cd4 <ht1632c_write_command>
    1d14:	83 e0       	ldi	r24, 0x03	; 3
    1d16:	de df       	rcall	.-68     	; 0x1cd4 <ht1632c_write_command>
    1d18:	88 e0       	ldi	r24, 0x08	; 8
    1d1a:	dc df       	rcall	.-72     	; 0x1cd4 <ht1632c_write_command>
    1d1c:	84 e1       	ldi	r24, 0x14	; 20
    1d1e:	da df       	rcall	.-76     	; 0x1cd4 <ht1632c_write_command>
    1d20:	88 e1       	ldi	r24, 0x18	; 24
    1d22:	d8 df       	rcall	.-80     	; 0x1cd4 <ht1632c_write_command>
    1d24:	8c 2f       	mov	r24, r28
    1d26:	d6 df       	rcall	.-84     	; 0x1cd4 <ht1632c_write_command>
    1d28:	81 ea       	ldi	r24, 0xA1	; 161
    1d2a:	d4 df       	rcall	.-88     	; 0x1cd4 <ht1632c_write_command>
    1d2c:	cf 91       	pop	r28
    1d2e:	08 95       	ret

00001d30 <ht1632c_set_brightness>:
    1d30:	88 23       	and	r24, r24
    1d32:	0c f4       	brge	.+2      	; 0x1d36 <ht1632c_set_brightness+0x6>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	80 31       	cpi	r24, 0x10	; 16
    1d38:	0c f0       	brlt	.+2      	; 0x1d3c <ht1632c_set_brightness+0xc>
    1d3a:	8f e0       	ldi	r24, 0x0F	; 15
    1d3c:	80 6a       	ori	r24, 0xA0	; 160
    1d3e:	ca cf       	rjmp	.-108    	; 0x1cd4 <ht1632c_write_command>
    1d40:	08 95       	ret

00001d42 <ht1632c_shift_left>:


/*------------------------------SHIFT FUNCTIONS------------------------------*/

void ht1632c_shift_left(void) 
{
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
	int8_t i;
	
	display_refresh_screen();
    1d46:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    1d4a:	2f ef       	ldi	r18, 0xFF	; 255
    1d4c:	89 ef       	ldi	r24, 0xF9	; 249
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	21 50       	subi	r18, 0x01	; 1
    1d52:	80 40       	sbci	r24, 0x00	; 0
    1d54:	90 40       	sbci	r25, 0x00	; 0
    1d56:	e1 f7       	brne	.-8      	; 0x1d50 <ht1632c_shift_left+0xe>
    1d58:	00 c0       	rjmp	.+0      	; 0x1d5a <ht1632c_shift_left+0x18>
    1d5a:	00 00       	nop
    1d5c:	32 e0       	ldi	r19, 0x02	; 2
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
	_delay_ms(10);
	
	for (i = 0; i <= 30; i += 2) {
		if (i == 14) {
			ledmatrix[14] = ledmatrix[1];
    1d60:	cf ef       	ldi	r28, 0xFF	; 255
    1d62:	db e2       	ldi	r29, 0x2B	; 43
    1d64:	a2 ef       	ldi	r26, 0xF2	; 242
    1d66:	bb e2       	ldi	r27, 0x2B	; 43
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <ht1632c_shift_left+0x2c>
    1d6a:	2e 5f       	subi	r18, 0xFE	; 254
    1d6c:	3e 5f       	subi	r19, 0xFE	; 254
    1d6e:	e2 2f       	mov	r30, r18
	
	display_refresh_screen();
	_delay_ms(10);
	
	for (i = 0; i <= 30; i += 2) {
		if (i == 14) {
    1d70:	2e 30       	cpi	r18, 0x0E	; 14
    1d72:	19 f4       	brne	.+6      	; 0x1d7a <ht1632c_shift_left+0x38>
			ledmatrix[14] = ledmatrix[1];
    1d74:	4c 91       	ld	r20, X
    1d76:	48 83       	st	Y, r20
    1d78:	f8 cf       	rjmp	.-16     	; 0x1d6a <ht1632c_shift_left+0x28>
		} else if(i == 30) {
    1d7a:	2e 31       	cpi	r18, 0x1E	; 30
    1d7c:	29 f4       	brne	.+10     	; 0x1d88 <ht1632c_shift_left+0x46>
			ledmatrix[30] = ledmatrix[17];
    1d7e:	80 91 02 2c 	lds	r24, 0x2C02
    1d82:	80 93 0f 2c 	sts	0x2C0F, r24
    1d86:	09 c0       	rjmp	.+18     	; 0x1d9a <ht1632c_shift_left+0x58>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    1d88:	ff 27       	eor	r31, r31
    1d8a:	e7 fd       	sbrc	r30, 7
    1d8c:	f0 95       	com	r31
    1d8e:	ef 50       	subi	r30, 0x0F	; 15
    1d90:	f4 4d       	sbci	r31, 0xD4	; 212
    1d92:	42 81       	ldd	r20, Z+2	; 0x02
    1d94:	40 83       	st	Z, r20
	int8_t i;
	
	display_refresh_screen();
	_delay_ms(10);
	
	for (i = 0; i <= 30; i += 2) {
    1d96:	3f 31       	cpi	r19, 0x1F	; 31
    1d98:	44 f3       	brlt	.-48     	; 0x1d6a <ht1632c_shift_left+0x28>
    1d9a:	93 e0       	ldi	r25, 0x03	; 3
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
		if (i == 15) {
			ledmatrix[15] = 0;
    1d9e:	a0 e0       	ldi	r26, 0x00	; 0
    1da0:	bc e2       	ldi	r27, 0x2C	; 44
    1da2:	02 c0       	rjmp	.+4      	; 0x1da8 <ht1632c_shift_left+0x66>
    1da4:	8e 5f       	subi	r24, 0xFE	; 254
    1da6:	9e 5f       	subi	r25, 0xFE	; 254
    1da8:	e8 2f       	mov	r30, r24
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
		if (i == 15) {
    1daa:	8f 30       	cpi	r24, 0x0F	; 15
    1dac:	11 f4       	brne	.+4      	; 0x1db2 <ht1632c_shift_left+0x70>
			ledmatrix[15] = 0;
    1dae:	1c 92       	st	X, r1
    1db0:	f9 cf       	rjmp	.-14     	; 0x1da4 <ht1632c_shift_left+0x62>
		} else if (i == 31) {
    1db2:	8f 31       	cpi	r24, 0x1F	; 31
    1db4:	19 f4       	brne	.+6      	; 0x1dbc <ht1632c_shift_left+0x7a>
			ledmatrix[31] = 0;
    1db6:	10 92 10 2c 	sts	0x2C10, r1
    1dba:	09 c0       	rjmp	.+18     	; 0x1dce <ht1632c_shift_left+0x8c>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    1dbc:	ff 27       	eor	r31, r31
    1dbe:	e7 fd       	sbrc	r30, 7
    1dc0:	f0 95       	com	r31
    1dc2:	ef 50       	subi	r30, 0x0F	; 15
    1dc4:	f4 4d       	sbci	r31, 0xD4	; 212
    1dc6:	22 81       	ldd	r18, Z+2	; 0x02
    1dc8:	20 83       	st	Z, r18
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
    1dca:	90 32       	cpi	r25, 0x20	; 32
    1dcc:	5c f3       	brlt	.-42     	; 0x1da4 <ht1632c_shift_left+0x62>
			ledmatrix[31] = 0;
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
}
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	08 95       	ret

00001dd4 <ht1632c_shift_right>:

void ht1632c_shift_right(void) 
{	
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
	int8_t i;
	
	display_refresh_screen();
    1dd8:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    1ddc:	2f ef       	ldi	r18, 0xFF	; 255
    1dde:	89 ef       	ldi	r24, 0xF9	; 249
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	21 50       	subi	r18, 0x01	; 1
    1de4:	80 40       	sbci	r24, 0x00	; 0
    1de6:	90 40       	sbci	r25, 0x00	; 0
    1de8:	e1 f7       	brne	.-8      	; 0x1de2 <ht1632c_shift_right+0xe>
    1dea:	00 c0       	rjmp	.+0      	; 0x1dec <ht1632c_shift_right+0x18>
    1dec:	00 00       	nop
    1dee:	e0 e1       	ldi	r30, 0x10	; 16
    1df0:	fc e2       	ldi	r31, 0x2C	; 44
    1df2:	4d e1       	ldi	r20, 0x1D	; 29
	
	for (i = 31; i > 0; i -= 2) {
		if (i == 1) {
			ledmatrix[1] = ledmatrix[14];
		} else if(i == 17) {
			ledmatrix[17] = ledmatrix[30];
    1df4:	22 e0       	ldi	r18, 0x02	; 2
    1df6:	3c e2       	ldi	r19, 0x2C	; 44
    1df8:	cf e0       	ldi	r28, 0x0F	; 15
    1dfa:	dc e2       	ldi	r29, 0x2C	; 44
    1dfc:	09 c0       	rjmp	.+18     	; 0x1e10 <ht1632c_shift_right+0x3c>
    1dfe:	42 50       	subi	r20, 0x02	; 2
    1e00:	32 97       	sbiw	r30, 0x02	; 2
	
	display_refresh_screen();
	_delay_ms(10);
	
	for (i = 31; i > 0; i -= 2) {
		if (i == 1) {
    1e02:	4f 3f       	cpi	r20, 0xFF	; 255
    1e04:	29 f4       	brne	.+10     	; 0x1e10 <ht1632c_shift_right+0x3c>
			ledmatrix[1] = ledmatrix[14];
    1e06:	80 91 ff 2b 	lds	r24, 0x2BFF
    1e0a:	80 93 f2 2b 	sts	0x2BF2, r24
    1e0e:	0c c0       	rjmp	.+24     	; 0x1e28 <ht1632c_shift_right+0x54>
		} else if(i == 17) {
    1e10:	4f 30       	cpi	r20, 0x0F	; 15
    1e12:	21 f4       	brne	.+8      	; 0x1e1c <ht1632c_shift_right+0x48>
			ledmatrix[17] = ledmatrix[30];
    1e14:	58 81       	ld	r21, Y
    1e16:	d9 01       	movw	r26, r18
    1e18:	5c 93       	st	X, r21
    1e1a:	f1 cf       	rjmp	.-30     	; 0x1dfe <ht1632c_shift_right+0x2a>
    1e1c:	df 01       	movw	r26, r30
    1e1e:	12 97       	sbiw	r26, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i-2];
    1e20:	5c 91       	ld	r21, X
    1e22:	50 83       	st	Z, r21
	int8_t i;
	
	display_refresh_screen();
	_delay_ms(10);
	
	for (i = 31; i > 0; i -= 2) {
    1e24:	14 16       	cp	r1, r20
    1e26:	5c f3       	brlt	.-42     	; 0x1dfe <ht1632c_shift_right+0x2a>
    1e28:	ef e0       	ldi	r30, 0x0F	; 15
    1e2a:	fc e2       	ldi	r31, 0x2C	; 44
    1e2c:	2c e1       	ldi	r18, 0x1C	; 28
	}
	for (i = 30; i >= 0; i -= 2) {
		if (i == 0) {
			ledmatrix[0] = 0;
		} else if(i == 16) {
			ledmatrix[16] = 0;
    1e2e:	c1 e0       	ldi	r28, 0x01	; 1
    1e30:	dc e2       	ldi	r29, 0x2C	; 44
    1e32:	07 c0       	rjmp	.+14     	; 0x1e42 <ht1632c_shift_right+0x6e>
    1e34:	22 50       	subi	r18, 0x02	; 2
    1e36:	32 97       	sbiw	r30, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	for (i = 30; i >= 0; i -= 2) {
		if (i == 0) {
    1e38:	2e 3f       	cpi	r18, 0xFE	; 254
    1e3a:	19 f4       	brne	.+6      	; 0x1e42 <ht1632c_shift_right+0x6e>
			ledmatrix[0] = 0;
    1e3c:	10 92 f1 2b 	sts	0x2BF1, r1
    1e40:	0a c0       	rjmp	.+20     	; 0x1e56 <ht1632c_shift_right+0x82>
		} else if(i == 16) {
    1e42:	2e 30       	cpi	r18, 0x0E	; 14
    1e44:	11 f4       	brne	.+4      	; 0x1e4a <ht1632c_shift_right+0x76>
			ledmatrix[16] = 0;
    1e46:	18 82       	st	Y, r1
    1e48:	f5 cf       	rjmp	.-22     	; 0x1e34 <ht1632c_shift_right+0x60>
    1e4a:	df 01       	movw	r26, r30
    1e4c:	12 97       	sbiw	r26, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i-2];
    1e4e:	3c 91       	ld	r19, X
    1e50:	30 83       	st	Z, r19
			ledmatrix[17] = ledmatrix[30];
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	for (i = 30; i >= 0; i -= 2) {
    1e52:	22 23       	and	r18, r18
    1e54:	7c f7       	brge	.-34     	; 0x1e34 <ht1632c_shift_right+0x60>
			ledmatrix[16] = 0;
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
}
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	08 95       	ret

00001e5c <ht1632c_shift_up>:

void ht1632c_shift_up(void) 
{
    1e5c:	a1 ef       	ldi	r26, 0xF1	; 241
    1e5e:	bb e2       	ldi	r27, 0x2B	; 43
    1e60:	e1 e0       	ldi	r30, 0x01	; 1
    1e62:	fc e2       	ldi	r31, 0x2C	; 44
    1e64:	20 e1       	ldi	r18, 0x10	; 16
    1e66:	3c e2       	ldi	r19, 0x2C	; 44
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
		temp_top = ledmatrix[i];
		temp_bottom = ledmatrix[i+16];
		temp = (temp_top << 8) | (temp_bottom);
    1e68:	8c 91       	ld	r24, X
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	98 2f       	mov	r25, r24
    1e6e:	88 27       	eor	r24, r24
    1e70:	40 81       	ld	r20, Z
    1e72:	84 2b       	or	r24, r20
		temp <<= 1;
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
		ledmatrix[i] = (temp >> 8);
    1e78:	9d 93       	st	X+, r25
		ledmatrix[i+16] = temp;
    1e7a:	81 93       	st	Z+, r24
	uint8_t temp_bottom;
	uint16_t temp;
	
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
    1e7c:	e2 17       	cp	r30, r18
    1e7e:	f3 07       	cpc	r31, r19
    1e80:	99 f7       	brne	.-26     	; 0x1e68 <ht1632c_shift_up+0xc>
		temp <<= 1;
		ledmatrix[i] = (temp >> 8);
		ledmatrix[i+16] = temp;
	}
	
	display_refresh_screen();
    1e82:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    1e86:	2f ef       	ldi	r18, 0xFF	; 255
    1e88:	89 ef       	ldi	r24, 0xF9	; 249
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	21 50       	subi	r18, 0x01	; 1
    1e8e:	80 40       	sbci	r24, 0x00	; 0
    1e90:	90 40       	sbci	r25, 0x00	; 0
    1e92:	e1 f7       	brne	.-8      	; 0x1e8c <ht1632c_shift_up+0x30>
    1e94:	00 c0       	rjmp	.+0      	; 0x1e96 <ht1632c_shift_up+0x3a>
    1e96:	00 00       	nop
    1e98:	08 95       	ret

00001e9a <ht1632c_shift_down>:
	_delay_ms(10);
}

void ht1632c_shift_down(void) 
{
    1e9a:	a1 ef       	ldi	r26, 0xF1	; 241
    1e9c:	bb e2       	ldi	r27, 0x2B	; 43
    1e9e:	e1 e0       	ldi	r30, 0x01	; 1
    1ea0:	fc e2       	ldi	r31, 0x2C	; 44
    1ea2:	20 e1       	ldi	r18, 0x10	; 16
    1ea4:	3c e2       	ldi	r19, 0x2C	; 44
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
		temp_top = ledmatrix[i];
		temp_bottom = ledmatrix[i+16];
		temp = (temp_top << 8) | (temp_bottom);
    1ea6:	8c 91       	ld	r24, X
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	98 2f       	mov	r25, r24
    1eac:	88 27       	eor	r24, r24
    1eae:	40 81       	ld	r20, Z
    1eb0:	84 2b       	or	r24, r20
		temp >>= 1;
    1eb2:	96 95       	lsr	r25
    1eb4:	87 95       	ror	r24
		ledmatrix[i] = (temp >> 8);
    1eb6:	9d 93       	st	X+, r25
		ledmatrix[i+16] = temp;
    1eb8:	81 93       	st	Z+, r24
	uint8_t temp_bottom;
	uint16_t temp;
	
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
    1eba:	e2 17       	cp	r30, r18
    1ebc:	f3 07       	cpc	r31, r19
    1ebe:	99 f7       	brne	.-26     	; 0x1ea6 <ht1632c_shift_down+0xc>
		temp >>= 1;
		ledmatrix[i] = (temp >> 8);
		ledmatrix[i+16] = temp;
	}
	
	display_refresh_screen();
    1ec0:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    1ec4:	2f ef       	ldi	r18, 0xFF	; 255
    1ec6:	89 ef       	ldi	r24, 0xF9	; 249
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	21 50       	subi	r18, 0x01	; 1
    1ecc:	80 40       	sbci	r24, 0x00	; 0
    1ece:	90 40       	sbci	r25, 0x00	; 0
    1ed0:	e1 f7       	brne	.-8      	; 0x1eca <ht1632c_shift_down+0x30>
    1ed2:	00 c0       	rjmp	.+0      	; 0x1ed4 <ht1632c_shift_down+0x3a>
    1ed4:	00 00       	nop
    1ed6:	08 95       	ret

00001ed8 <ht1632c_slide_in_from_left>:
}

/*------------------------------SLIDE FUNCTIONS------------------------------*/

void ht1632c_slide_in_from_left(void) 
{
    1ed8:	8f 92       	push	r8
    1eda:	9f 92       	push	r9
    1edc:	af 92       	push	r10
    1ede:	bf 92       	push	r11
    1ee0:	cf 92       	push	r12
    1ee2:	df 92       	push	r13
    1ee4:	ef 92       	push	r14
    1ee6:	ff 92       	push	r15
    1ee8:	0f 93       	push	r16
    1eea:	1f 93       	push	r17
    1eec:	cf 93       	push	r28
    1eee:	df 93       	push	r29
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	a0 97       	sbiw	r28, 0x20	; 32
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    1efa:	20 e2       	ldi	r18, 0x20	; 32
    1efc:	ce 01       	movw	r24, r28
    1efe:	01 96       	adiw	r24, 0x01	; 1
    1f00:	dc 01       	movw	r26, r24
    1f02:	e2 2f       	mov	r30, r18
    1f04:	1d 92       	st	X+, r1
    1f06:	ea 95       	dec	r30
    1f08:	e9 f7       	brne	.-6      	; 0x1f04 <ht1632c_slide_in_from_left+0x2c>
	memcpy(temp,ledmatrix,32);
    1f0a:	30 e2       	ldi	r19, 0x20	; 32
    1f0c:	e1 ef       	ldi	r30, 0xF1	; 241
    1f0e:	fb e2       	ldi	r31, 0x2B	; 43
    1f10:	dc 01       	movw	r26, r24
    1f12:	01 90       	ld	r0, Z+
    1f14:	0d 92       	st	X+, r0
    1f16:	3a 95       	dec	r19
    1f18:	e1 f7       	brne	.-8      	; 0x1f12 <ht1632c_slide_in_from_left+0x3a>
	memset(ledmatrix,0,32);
    1f1a:	e1 ef       	ldi	r30, 0xF1	; 241
    1f1c:	fb e2       	ldi	r31, 0x2B	; 43
    1f1e:	df 01       	movw	r26, r30
    1f20:	1d 92       	st	X+, r1
    1f22:	2a 95       	dec	r18
    1f24:	e9 f7       	brne	.-6      	; 0x1f20 <ht1632c_slide_in_from_left+0x48>
    1f26:	8e 01       	movw	r16, r28
    1f28:	00 5e       	subi	r16, 0xE0	; 224
    1f2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f2c:	5c 01       	movw	r10, r24
    1f2e:	4e 01       	movw	r8, r28
    1f30:	b0 e1       	ldi	r27, 0x10	; 16
    1f32:	8b 0e       	add	r8, r27
    1f34:	91 1c       	adc	r9, r1
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2) {
		ledmatrix[0] = temp[i-16];
    1f36:	6f 01       	movw	r12, r30
		ledmatrix[16] = temp[i];
    1f38:	0f 2e       	mov	r0, r31
    1f3a:	f1 e0       	ldi	r31, 0x01	; 1
    1f3c:	ef 2e       	mov	r14, r31
    1f3e:	fc e2       	ldi	r31, 0x2C	; 44
    1f40:	ff 2e       	mov	r15, r31
    1f42:	f0 2d       	mov	r31, r0
    1f44:	f8 01       	movw	r30, r16
    1f46:	70 97       	sbiw	r30, 0x10	; 16
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2) {
		ledmatrix[0] = temp[i-16];
    1f48:	80 81       	ld	r24, Z
    1f4a:	f6 01       	movw	r30, r12
    1f4c:	80 83       	st	Z, r24
		ledmatrix[16] = temp[i];
    1f4e:	d8 01       	movw	r26, r16
    1f50:	8c 91       	ld	r24, X
    1f52:	f7 01       	movw	r30, r14
    1f54:	80 83       	st	Z, r24
		ht1632c_shift_right();
    1f56:	3e df       	rcall	.-388    	; 0x1dd4 <ht1632c_shift_right>
    1f58:	02 50       	subi	r16, 0x02	; 2
    1f5a:	11 09       	sbc	r17, r1
	memcpy(temp,ledmatrix,32);
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2) {
    1f5c:	08 15       	cp	r16, r8
    1f5e:	19 05       	cpc	r17, r9
    1f60:	89 f7       	brne	.-30     	; 0x1f44 <ht1632c_slide_in_from_left+0x6c>
    1f62:	13 c0       	rjmp	.+38     	; 0x1f8a <ht1632c_slide_in_from_left+0xb2>
	//TODO: This should really be 16
	for (i = 30; i >= 16; i -= 2) {
		ledmatrix[0] = temp[i-16];
		ledmatrix[16] = temp[i];
		if (i == 16) {
			display_refresh_screen();
    1f64:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    1f68:	29 c0       	rjmp	.+82     	; 0x1fbc <ht1632c_slide_in_from_left+0xe4>
		} else {
			ht1632c_shift_right();
    1f6a:	34 df       	rcall	.-408    	; 0x1dd4 <ht1632c_shift_right>
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	70 97       	sbiw	r30, 0x10	; 16
		ht1632c_shift_right();
	}
	
	//TODO: This should really be 16
	for (i = 30; i >= 16; i -= 2) {
		ledmatrix[0] = temp[i-16];
    1f70:	80 81       	ld	r24, Z
    1f72:	d6 01       	movw	r26, r12
    1f74:	8c 93       	st	X, r24
		ledmatrix[16] = temp[i];
    1f76:	f8 01       	movw	r30, r16
    1f78:	80 81       	ld	r24, Z
    1f7a:	d7 01       	movw	r26, r14
    1f7c:	8c 93       	st	X, r24
    1f7e:	02 50       	subi	r16, 0x02	; 2
    1f80:	11 09       	sbc	r17, r1
		if (i == 16) {
    1f82:	0a 15       	cp	r16, r10
    1f84:	1b 05       	cpc	r17, r11
    1f86:	89 f7       	brne	.-30     	; 0x1f6a <ht1632c_slide_in_from_left+0x92>
    1f88:	ed cf       	rjmp	.-38     	; 0x1f64 <ht1632c_slide_in_from_left+0x8c>
		ht1632c_shift_right();
	}
	
	//TODO: This should really be 16
	for (i = 30; i >= 16; i -= 2) {
		ledmatrix[0] = temp[i-16];
    1f8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f8c:	80 93 f1 2b 	sts	0x2BF1, r24
		ledmatrix[16] = temp[i];
    1f90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f92:	80 93 01 2c 	sts	0x2C01, r24
    1f96:	8e 01       	movw	r16, r28
    1f98:	03 5e       	subi	r16, 0xE3	; 227
    1f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9c:	be e0       	ldi	r27, 0x0E	; 14
    1f9e:	ab 0e       	add	r10, r27
    1fa0:	b1 1c       	adc	r11, r1
		ht1632c_shift_right();
	}
	
	//TODO: This should really be 16
	for (i = 30; i >= 16; i -= 2) {
		ledmatrix[0] = temp[i-16];
    1fa2:	0f 2e       	mov	r0, r31
    1fa4:	f1 ef       	ldi	r31, 0xF1	; 241
    1fa6:	cf 2e       	mov	r12, r31
    1fa8:	fb e2       	ldi	r31, 0x2B	; 43
    1faa:	df 2e       	mov	r13, r31
    1fac:	f0 2d       	mov	r31, r0
		ledmatrix[16] = temp[i];
    1fae:	0f 2e       	mov	r0, r31
    1fb0:	f1 e0       	ldi	r31, 0x01	; 1
    1fb2:	ef 2e       	mov	r14, r31
    1fb4:	fc e2       	ldi	r31, 0x2C	; 44
    1fb6:	ff 2e       	mov	r15, r31
    1fb8:	f0 2d       	mov	r31, r0
    1fba:	d7 cf       	rjmp	.-82     	; 0x1f6a <ht1632c_slide_in_from_left+0x92>
			display_refresh_screen();
		} else {
			ht1632c_shift_right();
		}
	}
}
    1fbc:	a0 96       	adiw	r28, 0x20	; 32
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	1f 91       	pop	r17
    1fc8:	0f 91       	pop	r16
    1fca:	ff 90       	pop	r15
    1fcc:	ef 90       	pop	r14
    1fce:	df 90       	pop	r13
    1fd0:	cf 90       	pop	r12
    1fd2:	bf 90       	pop	r11
    1fd4:	af 90       	pop	r10
    1fd6:	9f 90       	pop	r9
    1fd8:	8f 90       	pop	r8
    1fda:	08 95       	ret

00001fdc <ht1632c_slide_in_from_right>:

void ht1632c_slide_in_from_right(void) 
{
    1fdc:	8f 92       	push	r8
    1fde:	9f 92       	push	r9
    1fe0:	af 92       	push	r10
    1fe2:	bf 92       	push	r11
    1fe4:	cf 92       	push	r12
    1fe6:	df 92       	push	r13
    1fe8:	ef 92       	push	r14
    1fea:	ff 92       	push	r15
    1fec:	0f 93       	push	r16
    1fee:	1f 93       	push	r17
    1ff0:	cf 93       	push	r28
    1ff2:	df 93       	push	r29
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
    1ff8:	a0 97       	sbiw	r28, 0x20	; 32
    1ffa:	cd bf       	out	0x3d, r28	; 61
    1ffc:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    1ffe:	20 e2       	ldi	r18, 0x20	; 32
    2000:	ce 01       	movw	r24, r28
    2002:	01 96       	adiw	r24, 0x01	; 1
    2004:	dc 01       	movw	r26, r24
    2006:	e2 2f       	mov	r30, r18
    2008:	1d 92       	st	X+, r1
    200a:	ea 95       	dec	r30
    200c:	e9 f7       	brne	.-6      	; 0x2008 <ht1632c_slide_in_from_right+0x2c>
	memcpy(temp,ledmatrix,32);
    200e:	30 e2       	ldi	r19, 0x20	; 32
    2010:	e1 ef       	ldi	r30, 0xF1	; 241
    2012:	fb e2       	ldi	r31, 0x2B	; 43
    2014:	dc 01       	movw	r26, r24
    2016:	01 90       	ld	r0, Z+
    2018:	0d 92       	st	X+, r0
    201a:	3a 95       	dec	r19
    201c:	e1 f7       	brne	.-8      	; 0x2016 <ht1632c_slide_in_from_right+0x3a>
	memset(ledmatrix,0,32);
    201e:	e1 ef       	ldi	r30, 0xF1	; 241
    2020:	fb e2       	ldi	r31, 0x2B	; 43
    2022:	df 01       	movw	r26, r30
    2024:	1d 92       	st	X+, r1
    2026:	2a 95       	dec	r18
    2028:	e9 f7       	brne	.-6      	; 0x2024 <ht1632c_slide_in_from_right+0x48>
    202a:	8e 01       	movw	r16, r28
    202c:	0f 5e       	subi	r16, 0xEF	; 239
    202e:	1f 4f       	sbci	r17, 0xFF	; 255
    2030:	5c 01       	movw	r10, r24
    2032:	4e 01       	movw	r8, r28
    2034:	b1 e2       	ldi	r27, 0x21	; 33
    2036:	8b 0e       	add	r8, r27
    2038:	91 1c       	adc	r9, r1
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
	{
		ht1632c_shift_left();
		ledmatrix[15] = temp[i];
    203a:	0f 2e       	mov	r0, r31
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	cf 2e       	mov	r12, r31
    2040:	fc e2       	ldi	r31, 0x2C	; 44
    2042:	df 2e       	mov	r13, r31
    2044:	f0 2d       	mov	r31, r0
		ledmatrix[31] = temp[i+16];
    2046:	0f 2e       	mov	r0, r31
    2048:	f0 e1       	ldi	r31, 0x10	; 16
    204a:	ef 2e       	mov	r14, r31
    204c:	fc e2       	ldi	r31, 0x2C	; 44
    204e:	ff 2e       	mov	r15, r31
    2050:	f0 2d       	mov	r31, r0
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
	{
		ht1632c_shift_left();
    2052:	77 de       	rcall	.-786    	; 0x1d42 <ht1632c_shift_left>
    2054:	f8 01       	movw	r30, r16
    2056:	70 97       	sbiw	r30, 0x10	; 16
		ledmatrix[15] = temp[i];
    2058:	80 81       	ld	r24, Z
    205a:	f6 01       	movw	r30, r12
    205c:	80 83       	st	Z, r24
		ledmatrix[31] = temp[i+16];
    205e:	d8 01       	movw	r26, r16
    2060:	8c 91       	ld	r24, X
    2062:	f7 01       	movw	r30, r14
    2064:	80 83       	st	Z, r24
    2066:	0e 5f       	subi	r16, 0xFE	; 254
    2068:	1f 4f       	sbci	r17, 0xFF	; 255
	memcpy(temp,ledmatrix,32);
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
    206a:	08 15       	cp	r16, r8
    206c:	19 05       	cpc	r17, r9
    206e:	89 f7       	brne	.-30     	; 0x2052 <ht1632c_slide_in_from_right+0x76>
    2070:	8e 01       	movw	r16, r28
    2072:	0e 5e       	subi	r16, 0xEE	; 238
    2074:	1f 4f       	sbci	r17, 0xFF	; 255
    2076:	f1 e2       	ldi	r31, 0x21	; 33
    2078:	af 0e       	add	r10, r31
    207a:	b1 1c       	adc	r11, r1
	//This should be 15, not 13
	for (i = 1; i <= 15; i += 2)
	{
		//Alignment hack
		ht1632c_shift_left();
		ledmatrix[15] = temp[i];
    207c:	0f 2e       	mov	r0, r31
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	cf 2e       	mov	r12, r31
    2082:	fc e2       	ldi	r31, 0x2C	; 44
    2084:	df 2e       	mov	r13, r31
    2086:	f0 2d       	mov	r31, r0
		ledmatrix[31] = temp[i+16];
    2088:	0f 2e       	mov	r0, r31
    208a:	f0 e1       	ldi	r31, 0x10	; 16
    208c:	ef 2e       	mov	r14, r31
    208e:	fc e2       	ldi	r31, 0x2C	; 44
    2090:	ff 2e       	mov	r15, r31
    2092:	f0 2d       	mov	r31, r0
	
	//This should be 15, not 13
	for (i = 1; i <= 15; i += 2)
	{
		//Alignment hack
		ht1632c_shift_left();
    2094:	56 de       	rcall	.-852    	; 0x1d42 <ht1632c_shift_left>
    2096:	f8 01       	movw	r30, r16
    2098:	70 97       	sbiw	r30, 0x10	; 16
		ledmatrix[15] = temp[i];
    209a:	80 81       	ld	r24, Z
    209c:	d6 01       	movw	r26, r12
    209e:	8c 93       	st	X, r24
		ledmatrix[31] = temp[i+16];
    20a0:	f8 01       	movw	r30, r16
    20a2:	80 81       	ld	r24, Z
    20a4:	d7 01       	movw	r26, r14
    20a6:	8c 93       	st	X, r24
    20a8:	0e 5f       	subi	r16, 0xFE	; 254
    20aa:	1f 4f       	sbci	r17, 0xFF	; 255
		ledmatrix[15] = temp[i];
		ledmatrix[31] = temp[i+16];
	}
	
	//This should be 15, not 13
	for (i = 1; i <= 15; i += 2)
    20ac:	0a 15       	cp	r16, r10
    20ae:	1b 05       	cpc	r17, r11
    20b0:	89 f7       	brne	.-30     	; 0x2094 <ht1632c_slide_in_from_right+0xb8>
		//Alignment hack
		ht1632c_shift_left();
		ledmatrix[15] = temp[i];
		ledmatrix[31] = temp[i+16];
	}
}
    20b2:	a0 96       	adiw	r28, 0x20	; 32
    20b4:	cd bf       	out	0x3d, r28	; 61
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	1f 91       	pop	r17
    20be:	0f 91       	pop	r16
    20c0:	ff 90       	pop	r15
    20c2:	ef 90       	pop	r14
    20c4:	df 90       	pop	r13
    20c6:	cf 90       	pop	r12
    20c8:	bf 90       	pop	r11
    20ca:	af 90       	pop	r10
    20cc:	9f 90       	pop	r9
    20ce:	8f 90       	pop	r8
    20d0:	08 95       	ret

000020d2 <ht1632c_slide_in_from_bottom>:

void ht1632c_slide_in_from_bottom(void) 
{
    20d2:	2f 92       	push	r2
    20d4:	3f 92       	push	r3
    20d6:	4f 92       	push	r4
    20d8:	5f 92       	push	r5
    20da:	6f 92       	push	r6
    20dc:	7f 92       	push	r7
    20de:	8f 92       	push	r8
    20e0:	9f 92       	push	r9
    20e2:	af 92       	push	r10
    20e4:	bf 92       	push	r11
    20e6:	cf 92       	push	r12
    20e8:	df 92       	push	r13
    20ea:	ef 92       	push	r14
    20ec:	ff 92       	push	r15
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	a2 97       	sbiw	r28, 0x22	; 34
    20fc:	cd bf       	out	0x3d, r28	; 61
    20fe:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    2100:	80 e2       	ldi	r24, 0x20	; 32
    2102:	de 01       	movw	r26, r28
    2104:	11 96       	adiw	r26, 0x01	; 1
    2106:	fd 01       	movw	r30, r26
    2108:	98 2f       	mov	r25, r24
    210a:	11 92       	st	Z+, r1
    210c:	9a 95       	dec	r25
    210e:	e9 f7       	brne	.-6      	; 0x210a <ht1632c_slide_in_from_bottom+0x38>
	memcpy(temp,ledmatrix,32);
    2110:	90 e2       	ldi	r25, 0x20	; 32
    2112:	e1 ef       	ldi	r30, 0xF1	; 241
    2114:	fb e2       	ldi	r31, 0x2B	; 43
    2116:	01 90       	ld	r0, Z+
    2118:	0d 92       	st	X+, r0
    211a:	9a 95       	dec	r25
    211c:	e1 f7       	brne	.-8      	; 0x2116 <ht1632c_slide_in_from_bottom+0x44>
	memset(ledmatrix,0,32);
    211e:	e1 ef       	ldi	r30, 0xF1	; 241
    2120:	fb e2       	ldi	r31, 0x2B	; 43
    2122:	df 01       	movw	r26, r30
    2124:	1d 92       	st	X+, r1
    2126:	8a 95       	dec	r24
    2128:	e9 f7       	brne	.-6      	; 0x2124 <ht1632c_slide_in_from_bottom+0x52>
    212a:	e1 2c       	mov	r14, r1
    212c:	f1 2c       	mov	r15, r1
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
			if (row < 8) {
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
    212e:	68 94       	set
    2130:	88 24       	eor	r8, r8
    2132:	87 f8       	bld	r8, 7
    2134:	91 2c       	mov	r9, r1
    2136:	0f 2e       	mov	r0, r31
    2138:	f1 e0       	ldi	r31, 0x01	; 1
    213a:	2f 2e       	mov	r2, r31
    213c:	fc e2       	ldi	r31, 0x2C	; 44
    213e:	3f 2e       	mov	r3, r31
    2140:	f0 2d       	mov	r31, r0
    2142:	00 e1       	ldi	r16, 0x10	; 16
    2144:	1c e2       	ldi	r17, 0x2C	; 44
    2146:	0f 2e       	mov	r0, r31
    2148:	ff e0       	ldi	r31, 0x0F	; 15
    214a:	6f 2e       	mov	r6, r31
    214c:	71 2c       	mov	r7, r1
    214e:	f0 2d       	mov	r31, r0
    2150:	0f 2e       	mov	r0, r31
    2152:	f7 e0       	ldi	r31, 0x07	; 7
    2154:	4f 2e       	mov	r4, r31
    2156:	51 2c       	mov	r5, r1
    2158:	f0 2d       	mov	r31, r0
    215a:	3a c0       	rjmp	.+116    	; 0x21d0 <ht1632c_slide_in_from_bottom+0xfe>
    215c:	32 2f       	mov	r19, r18
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
			if (row < 8) {
    215e:	28 30       	cpi	r18, 0x08	; 8
    2160:	90 f4       	brcc	.+36     	; 0x2186 <ht1632c_slide_in_from_bottom+0xb4>
    2162:	89 a1       	ldd	r24, Y+33	; 0x21
    2164:	9a a1       	ldd	r25, Y+34	; 0x22
    2166:	40 97       	sbiw	r24, 0x10	; 16
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
    2168:	dc 01       	movw	r26, r24
    216a:	8c 91       	ld	r24, X
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	86 23       	and	r24, r22
    2170:	97 23       	and	r25, r23
    2172:	0a 2c       	mov	r0, r10
    2174:	02 c0       	rjmp	.+4      	; 0x217a <ht1632c_slide_in_from_bottom+0xa8>
    2176:	95 95       	asr	r25
    2178:	87 95       	ror	r24
    217a:	0a 94       	dec	r0
    217c:	e2 f7       	brpl	.-8      	; 0x2176 <ht1632c_slide_in_from_bottom+0xa4>
    217e:	90 81       	ld	r25, Z
    2180:	89 2b       	or	r24, r25
    2182:	80 83       	st	Z, r24
    2184:	0f c0       	rjmp	.+30     	; 0x21a4 <ht1632c_slide_in_from_bottom+0xd2>
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
    2186:	a9 a1       	ldd	r26, Y+33	; 0x21
    2188:	ba a1       	ldd	r27, Y+34	; 0x22
    218a:	8c 91       	ld	r24, X
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	84 23       	and	r24, r20
    2190:	95 23       	and	r25, r21
    2192:	0c 2c       	mov	r0, r12
    2194:	02 c0       	rjmp	.+4      	; 0x219a <ht1632c_slide_in_from_bottom+0xc8>
    2196:	95 95       	asr	r25
    2198:	87 95       	ror	r24
    219a:	0a 94       	dec	r0
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <ht1632c_slide_in_from_bottom+0xc4>
    219e:	90 81       	ld	r25, Z
    21a0:	89 2b       	or	r24, r25
    21a2:	80 83       	st	Z, r24
    21a4:	31 96       	adiw	r30, 0x01	; 1
    21a6:	89 a1       	ldd	r24, Y+33	; 0x21
    21a8:	9a a1       	ldd	r25, Y+34	; 0x22
    21aa:	01 96       	adiw	r24, 0x01	; 1
    21ac:	89 a3       	std	Y+33, r24	; 0x21
    21ae:	9a a3       	std	Y+34, r25	; 0x22
	
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
    21b0:	e0 17       	cp	r30, r16
    21b2:	f1 07       	cpc	r31, r17
    21b4:	99 f6       	brne	.-90     	; 0x215c <ht1632c_slide_in_from_bottom+0x8a>
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
			}
		}
		if (row < 15) {
    21b6:	3f 30       	cpi	r19, 0x0F	; 15
    21b8:	10 f4       	brcc	.+4      	; 0x21be <ht1632c_slide_in_from_bottom+0xec>
			ht1632c_shift_up();
    21ba:	50 de       	rcall	.-864    	; 0x1e5c <ht1632c_shift_up>
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <ht1632c_slide_in_from_bottom+0xf0>
			} else {
			display_refresh_screen();
    21be:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    21c2:	9f ef       	ldi	r25, 0xFF	; 255
    21c4:	e9 1a       	sub	r14, r25
    21c6:	f9 0a       	sbc	r15, r25
	memset(ledmatrix,0,32);
	
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
    21c8:	a0 e1       	ldi	r26, 0x10	; 16
    21ca:	ea 16       	cp	r14, r26
    21cc:	f1 04       	cpc	r15, r1
    21ce:	f1 f0       	breq	.+60     	; 0x220c <ht1632c_slide_in_from_bottom+0x13a>
		for (col = 0; col < 15; col++) {
			if (row < 8) {
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
    21d0:	b4 01       	movw	r22, r8
    21d2:	0e 2c       	mov	r0, r14
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <ht1632c_slide_in_from_bottom+0x108>
    21d6:	75 95       	asr	r23
    21d8:	67 95       	ror	r22
    21da:	0a 94       	dec	r0
    21dc:	e2 f7       	brpl	.-8      	; 0x21d6 <ht1632c_slide_in_from_bottom+0x104>
    21de:	a7 01       	movw	r20, r14
    21e0:	48 50       	subi	r20, 0x08	; 8
    21e2:	51 09       	sbc	r21, r1
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
    21e4:	f4 01       	movw	r30, r8
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <ht1632c_slide_in_from_bottom+0x11a>
    21e8:	f5 95       	asr	r31
    21ea:	e7 95       	ror	r30
    21ec:	4a 95       	dec	r20
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <ht1632c_slide_in_from_bottom+0x116>
    21f0:	af 01       	movw	r20, r30
    21f2:	f1 01       	movw	r30, r2
    21f4:	ce 01       	movw	r24, r28
    21f6:	41 96       	adiw	r24, 0x11	; 17
    21f8:	89 a3       	std	Y+33, r24	; 0x21
    21fa:	9a a3       	std	Y+34, r25	; 0x22
    21fc:	2e 2d       	mov	r18, r14
    21fe:	63 01       	movw	r12, r6
    2200:	ce 18       	sub	r12, r14
    2202:	df 08       	sbc	r13, r15
    2204:	52 01       	movw	r10, r4
    2206:	ae 18       	sub	r10, r14
    2208:	bf 08       	sbc	r11, r15
    220a:	a8 cf       	rjmp	.-176    	; 0x215c <ht1632c_slide_in_from_bottom+0x8a>
			ht1632c_shift_up();
			} else {
			display_refresh_screen();
		}
	}
}
    220c:	a2 96       	adiw	r28, 0x22	; 34
    220e:	cd bf       	out	0x3d, r28	; 61
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ff 90       	pop	r15
    221c:	ef 90       	pop	r14
    221e:	df 90       	pop	r13
    2220:	cf 90       	pop	r12
    2222:	bf 90       	pop	r11
    2224:	af 90       	pop	r10
    2226:	9f 90       	pop	r9
    2228:	8f 90       	pop	r8
    222a:	7f 90       	pop	r7
    222c:	6f 90       	pop	r6
    222e:	5f 90       	pop	r5
    2230:	4f 90       	pop	r4
    2232:	3f 90       	pop	r3
    2234:	2f 90       	pop	r2
    2236:	08 95       	ret

00002238 <ht1632c_slide_in_from_top>:

void ht1632c_slide_in_from_top(void) 
{
    2238:	2f 92       	push	r2
    223a:	3f 92       	push	r3
    223c:	4f 92       	push	r4
    223e:	5f 92       	push	r5
    2240:	6f 92       	push	r6
    2242:	7f 92       	push	r7
    2244:	8f 92       	push	r8
    2246:	9f 92       	push	r9
    2248:	bf 92       	push	r11
    224a:	cf 92       	push	r12
    224c:	ef 92       	push	r14
    224e:	ff 92       	push	r15
    2250:	0f 93       	push	r16
    2252:	1f 93       	push	r17
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	a4 97       	sbiw	r28, 0x24	; 36
    225e:	cd bf       	out	0x3d, r28	; 61
    2260:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    2262:	80 e2       	ldi	r24, 0x20	; 32
    2264:	de 01       	movw	r26, r28
    2266:	11 96       	adiw	r26, 0x01	; 1
    2268:	fd 01       	movw	r30, r26
    226a:	98 2f       	mov	r25, r24
    226c:	11 92       	st	Z+, r1
    226e:	9a 95       	dec	r25
    2270:	e9 f7       	brne	.-6      	; 0x226c <ht1632c_slide_in_from_top+0x34>
	memcpy(temp,ledmatrix,32);
    2272:	90 e2       	ldi	r25, 0x20	; 32
    2274:	e1 ef       	ldi	r30, 0xF1	; 241
    2276:	fb e2       	ldi	r31, 0x2B	; 43
    2278:	01 90       	ld	r0, Z+
    227a:	0d 92       	st	X+, r0
    227c:	9a 95       	dec	r25
    227e:	e1 f7       	brne	.-8      	; 0x2278 <ht1632c_slide_in_from_top+0x40>
	memset(ledmatrix,0,32);
    2280:	e1 ef       	ldi	r30, 0xF1	; 241
    2282:	fb e2       	ldi	r31, 0x2B	; 43
    2284:	df 01       	movw	r26, r30
    2286:	1d 92       	st	X+, r1
    2288:	8a 95       	dec	r24
    228a:	e9 f7       	brne	.-6      	; 0x2286 <ht1632c_slide_in_from_top+0x4e>
    228c:	0f 2e       	mov	r0, r31
    228e:	ff e0       	ldi	r31, 0x0F	; 15
    2290:	ef 2e       	mov	r14, r31
    2292:	f1 2c       	mov	r15, r1
    2294:	f0 2d       	mov	r31, r0
    2296:	0f 2e       	mov	r0, r31
    2298:	ff e0       	ldi	r31, 0x0F	; 15
    229a:	6f 2e       	mov	r6, r31
    229c:	71 2c       	mov	r7, r1
    229e:	f0 2d       	mov	r31, r0
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
			if (row > 7) {
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
    22a0:	88 24       	eor	r8, r8
    22a2:	83 94       	inc	r8
    22a4:	91 2c       	mov	r9, r1
    22a6:	0f 2e       	mov	r0, r31
    22a8:	f7 e0       	ldi	r31, 0x07	; 7
    22aa:	4f 2e       	mov	r4, r31
    22ac:	51 2c       	mov	r5, r1
    22ae:	f0 2d       	mov	r31, r0
    22b0:	1f 01       	movw	r2, r30
    22b2:	00 e0       	ldi	r16, 0x00	; 0
    22b4:	1c e2       	ldi	r17, 0x2C	; 44
    22b6:	37 c0       	rjmp	.+110    	; 0x2326 <ht1632c_slide_in_from_top+0xee>
    22b8:	c2 2e       	mov	r12, r18
	int8_t col;
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
			if (row > 7) {
    22ba:	28 30       	cpi	r18, 0x08	; 8
    22bc:	84 f0       	brlt	.+32     	; 0x22de <ht1632c_slide_in_from_top+0xa6>
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
    22be:	ab a1       	ldd	r26, Y+35	; 0x23
    22c0:	bc a1       	ldd	r27, Y+36	; 0x24
    22c2:	8c 91       	ld	r24, X
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	86 23       	and	r24, r22
    22c8:	97 23       	and	r25, r23
    22ca:	09 a0       	ldd	r0, Y+33	; 0x21
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <ht1632c_slide_in_from_top+0x9a>
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	0a 94       	dec	r0
    22d4:	e2 f7       	brpl	.-8      	; 0x22ce <ht1632c_slide_in_from_top+0x96>
    22d6:	90 81       	ld	r25, Z
    22d8:	89 2b       	or	r24, r25
    22da:	80 83       	st	Z, r24
    22dc:	11 c0       	rjmp	.+34     	; 0x2300 <ht1632c_slide_in_from_top+0xc8>
    22de:	8b a1       	ldd	r24, Y+35	; 0x23
    22e0:	9c a1       	ldd	r25, Y+36	; 0x24
    22e2:	40 97       	sbiw	r24, 0x10	; 16
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
    22e4:	dc 01       	movw	r26, r24
    22e6:	8c 91       	ld	r24, X
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	84 23       	and	r24, r20
    22ec:	95 23       	and	r25, r21
    22ee:	0b 2c       	mov	r0, r11
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <ht1632c_slide_in_from_top+0xbe>
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	0a 94       	dec	r0
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <ht1632c_slide_in_from_top+0xba>
    22fa:	90 81       	ld	r25, Z
    22fc:	89 2b       	or	r24, r25
    22fe:	80 83       	st	Z, r24
    2300:	31 96       	adiw	r30, 0x01	; 1
    2302:	8b a1       	ldd	r24, Y+35	; 0x23
    2304:	9c a1       	ldd	r25, Y+36	; 0x24
    2306:	01 96       	adiw	r24, 0x01	; 1
    2308:	8b a3       	std	Y+35, r24	; 0x23
    230a:	9c a3       	std	Y+36, r25	; 0x24
	
	int8_t col;
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
    230c:	e0 17       	cp	r30, r16
    230e:	f1 07       	cpc	r31, r17
    2310:	99 f6       	brne	.-90     	; 0x22b8 <ht1632c_slide_in_from_top+0x80>
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
			}
		}
		if (row > 0) {
    2312:	1c 14       	cp	r1, r12
    2314:	14 f4       	brge	.+4      	; 0x231a <ht1632c_slide_in_from_top+0xe2>
			ht1632c_shift_down();
    2316:	c1 dd       	rcall	.-1150   	; 0x1e9a <ht1632c_shift_down>
    2318:	02 c0       	rjmp	.+4      	; 0x231e <ht1632c_slide_in_from_top+0xe6>
		} else {
			display_refresh_screen();
    231a:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    231e:	91 e0       	ldi	r25, 0x01	; 1
    2320:	e9 1a       	sub	r14, r25
    2322:	f1 08       	sbc	r15, r1
    2324:	00 f1       	brcs	.+64     	; 0x2366 <ht1632c_slide_in_from_top+0x12e>
    2326:	b3 01       	movw	r22, r6
    2328:	6e 19       	sub	r22, r14
    232a:	7f 09       	sbc	r23, r15
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
			if (row > 7) {
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
    232c:	f4 01       	movw	r30, r8
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <ht1632c_slide_in_from_top+0xfc>
    2330:	ee 0f       	add	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	6a 95       	dec	r22
    2336:	e2 f7       	brpl	.-8      	; 0x2330 <ht1632c_slide_in_from_top+0xf8>
    2338:	bf 01       	movw	r22, r30
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
    233a:	be 2c       	mov	r11, r14
    233c:	a2 01       	movw	r20, r4
    233e:	4e 19       	sub	r20, r14
    2340:	5f 09       	sbc	r21, r15
    2342:	c4 01       	movw	r24, r8
    2344:	02 c0       	rjmp	.+4      	; 0x234a <ht1632c_slide_in_from_top+0x112>
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	4a 95       	dec	r20
    234c:	e2 f7       	brpl	.-8      	; 0x2346 <ht1632c_slide_in_from_top+0x10e>
    234e:	ac 01       	movw	r20, r24
    2350:	f1 01       	movw	r30, r2
    2352:	de 01       	movw	r26, r28
    2354:	51 96       	adiw	r26, 0x11	; 17
    2356:	ab a3       	std	Y+35, r26	; 0x23
    2358:	bc a3       	std	Y+36, r27	; 0x24
    235a:	2e 2d       	mov	r18, r14
    235c:	c7 01       	movw	r24, r14
    235e:	08 97       	sbiw	r24, 0x08	; 8
    2360:	89 a3       	std	Y+33, r24	; 0x21
    2362:	9a a3       	std	Y+34, r25	; 0x22
    2364:	a9 cf       	rjmp	.-174    	; 0x22b8 <ht1632c_slide_in_from_top+0x80>
			ht1632c_shift_down();
		} else {
			display_refresh_screen();
		}
	}
}
    2366:	a4 96       	adiw	r28, 0x24	; 36
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	1f 91       	pop	r17
    2372:	0f 91       	pop	r16
    2374:	ff 90       	pop	r15
    2376:	ef 90       	pop	r14
    2378:	cf 90       	pop	r12
    237a:	bf 90       	pop	r11
    237c:	9f 90       	pop	r9
    237e:	8f 90       	pop	r8
    2380:	7f 90       	pop	r7
    2382:	6f 90       	pop	r6
    2384:	5f 90       	pop	r5
    2386:	4f 90       	pop	r4
    2388:	3f 90       	pop	r3
    238a:	2f 90       	pop	r2
    238c:	08 95       	ret

0000238e <ht1632c_print_buffer>:

/*------------------------------PRINT FUNCTIONS------------------------------*/

void ht1632c_print_buffer(char *buffer, uint16_t length) 
{
    238e:	af 92       	push	r10
    2390:	bf 92       	push	r11
    2392:	cf 92       	push	r12
    2394:	df 92       	push	r13
    2396:	ef 92       	push	r14
    2398:	ff 92       	push	r15
    239a:	0f 93       	push	r16
    239c:	1f 93       	push	r17
    239e:	cf 93       	push	r28
    23a0:	df 93       	push	r29
    23a2:	5b 01       	movw	r10, r22
	uint16_t i;
	
	//Shift buffer into visible area
	for (i = 0; i < (length); i++) {
    23a4:	61 15       	cp	r22, r1
    23a6:	71 05       	cpc	r23, r1
    23a8:	91 f1       	breq	.+100    	; 0x240e <ht1632c_print_buffer+0x80>
    23aa:	ec 01       	movw	r28, r24
    23ac:	6c 01       	movw	r12, r24
    23ae:	c6 0e       	add	r12, r22
    23b0:	d7 1e       	adc	r13, r23
		ht1632c_shift_left();
		ledmatrix[15] = buffer[i] >> 3;
    23b2:	0f 2e       	mov	r0, r31
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	ef 2e       	mov	r14, r31
    23b8:	fc e2       	ldi	r31, 0x2C	; 44
    23ba:	ff 2e       	mov	r15, r31
    23bc:	f0 2d       	mov	r31, r0
		ledmatrix[31] = buffer[i] << 5;
    23be:	00 e1       	ldi	r16, 0x10	; 16
    23c0:	1c e2       	ldi	r17, 0x2C	; 44
{
	uint16_t i;
	
	//Shift buffer into visible area
	for (i = 0; i < (length); i++) {
		ht1632c_shift_left();
    23c2:	bf dc       	rcall	.-1666   	; 0x1d42 <ht1632c_shift_left>
    23c4:	fe 01       	movw	r30, r28
		ledmatrix[15] = buffer[i] >> 3;
    23c6:	89 91       	ld	r24, Y+
    23c8:	86 95       	lsr	r24
    23ca:	86 95       	lsr	r24
    23cc:	86 95       	lsr	r24
    23ce:	d7 01       	movw	r26, r14
    23d0:	8c 93       	st	X, r24
		ledmatrix[31] = buffer[i] << 5;
    23d2:	80 81       	ld	r24, Z
    23d4:	82 95       	swap	r24
    23d6:	88 0f       	add	r24, r24
    23d8:	80 7e       	andi	r24, 0xE0	; 224
    23da:	f8 01       	movw	r30, r16
    23dc:	80 83       	st	Z, r24
    23de:	ff ef       	ldi	r31, 0xFF	; 255
    23e0:	2d ee       	ldi	r18, 0xED	; 237
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	f1 50       	subi	r31, 0x01	; 1
    23e6:	20 40       	sbci	r18, 0x00	; 0
    23e8:	80 40       	sbci	r24, 0x00	; 0
    23ea:	e1 f7       	brne	.-8      	; 0x23e4 <ht1632c_print_buffer+0x56>
    23ec:	00 c0       	rjmp	.+0      	; 0x23ee <ht1632c_print_buffer+0x60>
    23ee:	00 00       	nop
void ht1632c_print_buffer(char *buffer, uint16_t length) 
{
	uint16_t i;
	
	//Shift buffer into visible area
	for (i = 0; i < (length); i++) {
    23f0:	cc 15       	cp	r28, r12
    23f2:	dd 05       	cpc	r29, r13
    23f4:	31 f7       	brne	.-52     	; 0x23c2 <ht1632c_print_buffer+0x34>
		_delay_ms(30);
	}
	
	//Shift buffer out of visible area
	
	if ((length/4) < 15) {
    23f6:	9c e3       	ldi	r25, 0x3C	; 60
    23f8:	a9 16       	cp	r10, r25
    23fa:	b1 04       	cpc	r11, r1
    23fc:	40 f0       	brcs	.+16     	; 0x240e <ht1632c_print_buffer+0x80>
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
			_delay_ms(30);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
    23fe:	b6 94       	lsr	r11
    2400:	a7 94       	ror	r10
    2402:	b6 94       	lsr	r11
    2404:	a7 94       	ror	r10
    2406:	a1 14       	cp	r10, r1
    2408:	b1 04       	cpc	r11, r1
    240a:	89 f4       	brne	.+34     	; 0x242e <ht1632c_print_buffer+0xa0>
    240c:	20 c0       	rjmp	.+64     	; 0x244e <ht1632c_print_buffer+0xc0>
}

/*------------------------------PRINT FUNCTIONS------------------------------*/

void ht1632c_print_buffer(char *buffer, uint16_t length) 
{
    240e:	ce e1       	ldi	r28, 0x1E	; 30
    2410:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Shift buffer out of visible area
	
	if ((length/4) < 15) {
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
    2412:	97 dc       	rcall	.-1746   	; 0x1d42 <ht1632c_shift_left>
    2414:	af ef       	ldi	r26, 0xFF	; 255
    2416:	bd ee       	ldi	r27, 0xED	; 237
    2418:	e2 e0       	ldi	r30, 0x02	; 2
    241a:	a1 50       	subi	r26, 0x01	; 1
    241c:	b0 40       	sbci	r27, 0x00	; 0
    241e:	e0 40       	sbci	r30, 0x00	; 0
    2420:	e1 f7       	brne	.-8      	; 0x241a <ht1632c_print_buffer+0x8c>
    2422:	00 c0       	rjmp	.+0      	; 0x2424 <ht1632c_print_buffer+0x96>
    2424:	00 00       	nop
    2426:	21 97       	sbiw	r28, 0x01	; 1
	}
	
	//Shift buffer out of visible area
	
	if ((length/4) < 15) {
		for (i = 0; i < 30; i++) {
    2428:	20 97       	sbiw	r28, 0x00	; 0
    242a:	99 f7       	brne	.-26     	; 0x2412 <ht1632c_print_buffer+0x84>
    242c:	10 c0       	rjmp	.+32     	; 0x244e <ht1632c_print_buffer+0xc0>
			ht1632c_shift_left();
			_delay_ms(30);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
    242e:	c0 e0       	ldi	r28, 0x00	; 0
    2430:	d0 e0       	ldi	r29, 0x00	; 0
			ht1632c_shift_left();
    2432:	87 dc       	rcall	.-1778   	; 0x1d42 <ht1632c_shift_left>
    2434:	ff ef       	ldi	r31, 0xFF	; 255
    2436:	2d ee       	ldi	r18, 0xED	; 237
    2438:	82 e0       	ldi	r24, 0x02	; 2
    243a:	f1 50       	subi	r31, 0x01	; 1
    243c:	20 40       	sbci	r18, 0x00	; 0
    243e:	80 40       	sbci	r24, 0x00	; 0
    2440:	e1 f7       	brne	.-8      	; 0x243a <ht1632c_print_buffer+0xac>
    2442:	00 c0       	rjmp	.+0      	; 0x2444 <ht1632c_print_buffer+0xb6>
    2444:	00 00       	nop
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
			_delay_ms(30);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
    2446:	21 96       	adiw	r28, 0x01	; 1
    2448:	ca 15       	cp	r28, r10
    244a:	db 05       	cpc	r29, r11
    244c:	91 f7       	brne	.-28     	; 0x2432 <ht1632c_print_buffer+0xa4>
			ht1632c_shift_left();
			_delay_ms(30);
		}
	}
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	1f 91       	pop	r17
    2454:	0f 91       	pop	r16
    2456:	ff 90       	pop	r15
    2458:	ef 90       	pop	r14
    245a:	df 90       	pop	r13
    245c:	cf 90       	pop	r12
    245e:	bf 90       	pop	r11
    2460:	af 90       	pop	r10
    2462:	08 95       	ret

00002464 <btn_setup>:
void btn_top_setup(void) 
{	
	PORTC.DIRCLR |= PIN2_bm;
	PORTC.PIN2CTRL |= PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
	PORTC.INT0MASK |= PIN2_bm;
	PORTC.INTCTRL |= PORT_INT0LVL_HI_gc;
    2464:	e0 e0       	ldi	r30, 0x00	; 0
    2466:	f6 e0       	ldi	r31, 0x06	; 6
    2468:	92 81       	ldd	r25, Z+2	; 0x02
    246a:	90 6e       	ori	r25, 0xE0	; 224
    246c:	92 83       	std	Z+2, r25	; 0x02
    246e:	e0 e2       	ldi	r30, 0x20	; 32
    2470:	f6 e0       	ldi	r31, 0x06	; 6
    2472:	92 81       	ldd	r25, Z+2	; 0x02
    2474:	91 60       	ori	r25, 0x01	; 1
    2476:	92 83       	std	Z+2, r25	; 0x02
    2478:	88 23       	and	r24, r24
    247a:	41 f1       	breq	.+80     	; 0x24cc <btn_setup+0x68>
    247c:	e0 e0       	ldi	r30, 0x00	; 0
    247e:	f6 e0       	ldi	r31, 0x06	; 6
    2480:	85 89       	ldd	r24, Z+21	; 0x15
    2482:	8a 61       	ori	r24, 0x1A	; 26
    2484:	85 8b       	std	Z+21, r24	; 0x15
    2486:	86 89       	ldd	r24, Z+22	; 0x16
    2488:	8a 61       	ori	r24, 0x1A	; 26
    248a:	86 8b       	std	Z+22, r24	; 0x16
    248c:	87 89       	ldd	r24, Z+23	; 0x17
    248e:	8a 61       	ori	r24, 0x1A	; 26
    2490:	87 8b       	std	Z+23, r24	; 0x17
    2492:	a0 e2       	ldi	r26, 0x20	; 32
    2494:	b6 e0       	ldi	r27, 0x06	; 6
    2496:	50 96       	adiw	r26, 0x10	; 16
    2498:	8c 91       	ld	r24, X
    249a:	50 97       	sbiw	r26, 0x10	; 16
    249c:	8a 61       	ori	r24, 0x1A	; 26
    249e:	50 96       	adiw	r26, 0x10	; 16
    24a0:	8c 93       	st	X, r24
    24a2:	50 97       	sbiw	r26, 0x10	; 16
    24a4:	82 85       	ldd	r24, Z+10	; 0x0a
    24a6:	80 6e       	ori	r24, 0xE0	; 224
    24a8:	82 87       	std	Z+10, r24	; 0x0a
    24aa:	1a 96       	adiw	r26, 0x0a	; 10
    24ac:	8c 91       	ld	r24, X
    24ae:	1a 97       	sbiw	r26, 0x0a	; 10
    24b0:	81 60       	ori	r24, 0x01	; 1
    24b2:	1a 96       	adiw	r26, 0x0a	; 10
    24b4:	8c 93       	st	X, r24
    24b6:	1a 97       	sbiw	r26, 0x0a	; 10
    24b8:	81 85       	ldd	r24, Z+9	; 0x09
    24ba:	83 60       	ori	r24, 0x03	; 3
    24bc:	81 87       	std	Z+9, r24	; 0x09
    24be:	19 96       	adiw	r26, 0x09	; 9
    24c0:	8c 91       	ld	r24, X
    24c2:	19 97       	sbiw	r26, 0x09	; 9
    24c4:	83 60       	ori	r24, 0x03	; 3
    24c6:	19 96       	adiw	r26, 0x09	; 9
    24c8:	8c 93       	st	X, r24
    24ca:	08 95       	ret
    24cc:	e0 e0       	ldi	r30, 0x00	; 0
    24ce:	f6 e0       	ldi	r31, 0x06	; 6
    24d0:	85 89       	ldd	r24, Z+21	; 0x15
    24d2:	8d 7f       	andi	r24, 0xFD	; 253
    24d4:	85 8b       	std	Z+21, r24	; 0x15
    24d6:	86 89       	ldd	r24, Z+22	; 0x16
    24d8:	8d 7f       	andi	r24, 0xFD	; 253
    24da:	86 8b       	std	Z+22, r24	; 0x16
    24dc:	87 89       	ldd	r24, Z+23	; 0x17
    24de:	8d 7f       	andi	r24, 0xFD	; 253
    24e0:	87 8b       	std	Z+23, r24	; 0x17
    24e2:	a0 e2       	ldi	r26, 0x20	; 32
    24e4:	b6 e0       	ldi	r27, 0x06	; 6
    24e6:	50 96       	adiw	r26, 0x10	; 16
    24e8:	8c 91       	ld	r24, X
    24ea:	50 97       	sbiw	r26, 0x10	; 16
    24ec:	8d 7f       	andi	r24, 0xFD	; 253
    24ee:	50 96       	adiw	r26, 0x10	; 16
    24f0:	8c 93       	st	X, r24
    24f2:	50 97       	sbiw	r26, 0x10	; 16
    24f4:	82 85       	ldd	r24, Z+10	; 0x0a
    24f6:	8f 71       	andi	r24, 0x1F	; 31
    24f8:	82 87       	std	Z+10, r24	; 0x0a
    24fa:	1a 96       	adiw	r26, 0x0a	; 10
    24fc:	8c 91       	ld	r24, X
    24fe:	1a 97       	sbiw	r26, 0x0a	; 10
    2500:	8e 7f       	andi	r24, 0xFE	; 254
    2502:	1a 96       	adiw	r26, 0x0a	; 10
    2504:	8c 93       	st	X, r24
    2506:	1a 97       	sbiw	r26, 0x0a	; 10
    2508:	81 85       	ldd	r24, Z+9	; 0x09
    250a:	8c 7f       	andi	r24, 0xFC	; 252
    250c:	81 87       	std	Z+9, r24	; 0x09
    250e:	19 96       	adiw	r26, 0x09	; 9
    2510:	8c 91       	ld	r24, X
    2512:	19 97       	sbiw	r26, 0x09	; 9
    2514:	8c 7f       	andi	r24, 0xFC	; 252
    2516:	19 96       	adiw	r26, 0x09	; 9
    2518:	8c 93       	st	X, r24
    251a:	08 95       	ret

0000251c <btn_si114x_enable_interrupt>:
    251c:	e0 e0       	ldi	r30, 0x00	; 0
    251e:	f6 e0       	ldi	r31, 0x06	; 6
    2520:	82 81       	ldd	r24, Z+2	; 0x02
    2522:	84 60       	ori	r24, 0x04	; 4
    2524:	82 83       	std	Z+2, r24	; 0x02
    2526:	82 89       	ldd	r24, Z+18	; 0x12
    2528:	82 60       	ori	r24, 0x02	; 2
    252a:	82 8b       	std	Z+18, r24	; 0x12
    252c:	83 85       	ldd	r24, Z+11	; 0x0b
    252e:	84 60       	ori	r24, 0x04	; 4
    2530:	83 87       	std	Z+11, r24	; 0x0b
    2532:	81 85       	ldd	r24, Z+9	; 0x09
    2534:	8c 60       	ori	r24, 0x0C	; 12
    2536:	81 87       	std	Z+9, r24	; 0x09
    2538:	08 95       	ret

0000253a <btn_si114x_disable_interrupt>:
    253a:	e0 e0       	ldi	r30, 0x00	; 0
    253c:	f6 e0       	ldi	r31, 0x06	; 6
    253e:	82 81       	ldd	r24, Z+2	; 0x02
    2540:	8b 7f       	andi	r24, 0xFB	; 251
    2542:	82 83       	std	Z+2, r24	; 0x02
    2544:	82 89       	ldd	r24, Z+18	; 0x12
    2546:	8d 7f       	andi	r24, 0xFD	; 253
    2548:	82 8b       	std	Z+18, r24	; 0x12
    254a:	83 85       	ldd	r24, Z+11	; 0x0b
    254c:	8b 7f       	andi	r24, 0xFB	; 251
    254e:	83 87       	std	Z+11, r24	; 0x0b
    2550:	81 85       	ldd	r24, Z+9	; 0x09
    2552:	83 7f       	andi	r24, 0xF3	; 243
    2554:	81 87       	std	Z+9, r24	; 0x09
    2556:	08 95       	ret

00002558 <btn_check_press>:

button_t btn_check_press(void) 
{	
	button_t btn_mask = NO_BTN;
	
	if (!(PORTA.IN & BUTTON0)) {
    2558:	e0 e0       	ldi	r30, 0x00	; 0
    255a:	f6 e0       	ldi	r31, 0x06	; 6
    255c:	80 85       	ldd	r24, Z+8	; 0x08
    255e:	85 fb       	bst	r24, 5
    2560:	88 27       	eor	r24, r24
    2562:	80 f9       	bld	r24, 0
    2564:	91 e0       	ldi	r25, 0x01	; 1
    2566:	89 27       	eor	r24, r25
		btn_mask |= BTN1;
	}
	if (!(PORTA.IN & BUTTON1)) {
    2568:	90 85       	ldd	r25, Z+8	; 0x08
    256a:	96 ff       	sbrs	r25, 6
		btn_mask |= BTN2;
    256c:	82 60       	ori	r24, 0x02	; 2
	}
	if (!(PORTA.IN & BUTTON2)) {
    256e:	e0 e0       	ldi	r30, 0x00	; 0
    2570:	f6 e0       	ldi	r31, 0x06	; 6
    2572:	90 85       	ldd	r25, Z+8	; 0x08
    2574:	99 23       	and	r25, r25
    2576:	0c f0       	brlt	.+2      	; 0x257a <btn_check_press+0x22>
		btn_mask |= BTN3;
    2578:	83 e0       	ldi	r24, 0x03	; 3
	} 
	if (!(PORTB.IN & BUTTON3)) {
    257a:	e0 e2       	ldi	r30, 0x20	; 32
    257c:	f6 e0       	ldi	r31, 0x06	; 6
    257e:	90 85       	ldd	r25, Z+8	; 0x08
    2580:	90 ff       	sbrs	r25, 0
		btn_mask |= BTN4;
    2582:	84 60       	ori	r24, 0x04	; 4
	}
	return btn_mask;
}
    2584:	08 95       	ret

00002586 <__vector_66>:

ISR(PORTA_INT0_vect) 
{
    2586:	1f 92       	push	r1
    2588:	0f 92       	push	r0
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	0f 92       	push	r0
    258e:	11 24       	eor	r1, r1
    2590:	0b b6       	in	r0, 0x3b	; 59
    2592:	0f 92       	push	r0
    2594:	2f 93       	push	r18
    2596:	3f 93       	push	r19
    2598:	4f 93       	push	r20
    259a:	5f 93       	push	r21
    259c:	6f 93       	push	r22
    259e:	7f 93       	push	r23
    25a0:	8f 93       	push	r24
    25a2:	9f 93       	push	r25
    25a4:	af 93       	push	r26
    25a6:	bf 93       	push	r27
    25a8:	ef 93       	push	r30
    25aa:	ff 93       	push	r31
	btn_status = btn_check_press();
    25ac:	d5 df       	rcall	.-86     	; 0x2558 <btn_check_press>
    25ae:	80 93 ef 2b 	sts	0x2BEF, r24
	printf("%d",btn_status);
    25b2:	80 91 ef 2b 	lds	r24, 0x2BEF
    25b6:	1f 92       	push	r1
    25b8:	8f 93       	push	r24
    25ba:	8f ef       	ldi	r24, 0xFF	; 255
    25bc:	93 e2       	ldi	r25, 0x23	; 35
    25be:	9f 93       	push	r25
    25c0:	8f 93       	push	r24
    25c2:	0e 94 36 58 	call	0xb06c	; 0xb06c <printf>
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
}
    25ce:	ff 91       	pop	r31
    25d0:	ef 91       	pop	r30
    25d2:	bf 91       	pop	r27
    25d4:	af 91       	pop	r26
    25d6:	9f 91       	pop	r25
    25d8:	8f 91       	pop	r24
    25da:	7f 91       	pop	r23
    25dc:	6f 91       	pop	r22
    25de:	5f 91       	pop	r21
    25e0:	4f 91       	pop	r20
    25e2:	3f 91       	pop	r19
    25e4:	2f 91       	pop	r18
    25e6:	0f 90       	pop	r0
    25e8:	0b be       	out	0x3b, r0	; 59
    25ea:	0f 90       	pop	r0
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	0f 90       	pop	r0
    25f0:	1f 90       	pop	r1
    25f2:	18 95       	reti

000025f4 <__vector_34>:

ISR(PORTB_INT0_vect) 
{
    25f4:	1f 92       	push	r1
    25f6:	0f 92       	push	r0
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	0f 92       	push	r0
    25fc:	11 24       	eor	r1, r1
    25fe:	0b b6       	in	r0, 0x3b	; 59
    2600:	0f 92       	push	r0
    2602:	2f 93       	push	r18
    2604:	3f 93       	push	r19
    2606:	4f 93       	push	r20
    2608:	5f 93       	push	r21
    260a:	6f 93       	push	r22
    260c:	7f 93       	push	r23
    260e:	8f 93       	push	r24
    2610:	9f 93       	push	r25
    2612:	af 93       	push	r26
    2614:	bf 93       	push	r27
    2616:	ef 93       	push	r30
    2618:	ff 93       	push	r31
	btn_status = btn_check_press();
    261a:	9e df       	rcall	.-196    	; 0x2558 <btn_check_press>
    261c:	80 93 ef 2b 	sts	0x2BEF, r24
	printf("%d",btn_status);
    2620:	80 91 ef 2b 	lds	r24, 0x2BEF
    2624:	1f 92       	push	r1
    2626:	8f 93       	push	r24
    2628:	8f ef       	ldi	r24, 0xFF	; 255
    262a:	93 e2       	ldi	r25, 0x23	; 35
    262c:	9f 93       	push	r25
    262e:	8f 93       	push	r24
    2630:	0e 94 36 58 	call	0xb06c	; 0xb06c <printf>
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	0f 90       	pop	r0
}
    263c:	ff 91       	pop	r31
    263e:	ef 91       	pop	r30
    2640:	bf 91       	pop	r27
    2642:	af 91       	pop	r26
    2644:	9f 91       	pop	r25
    2646:	8f 91       	pop	r24
    2648:	7f 91       	pop	r23
    264a:	6f 91       	pop	r22
    264c:	5f 91       	pop	r21
    264e:	4f 91       	pop	r20
    2650:	3f 91       	pop	r19
    2652:	2f 91       	pop	r18
    2654:	0f 90       	pop	r0
    2656:	0b be       	out	0x3b, r0	; 59
    2658:	0f 90       	pop	r0
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	0f 90       	pop	r0
    265e:	1f 90       	pop	r1
    2660:	18 95       	reti

00002662 <__vector_67>:

ISR(PORTA_INT1_vect) 
{	
    2662:	1f 92       	push	r1
    2664:	0f 92       	push	r0
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	0f 92       	push	r0
    266a:	11 24       	eor	r1, r1
    266c:	0b b6       	in	r0, 0x3b	; 59
    266e:	0f 92       	push	r0
    2670:	ef 92       	push	r14
    2672:	ff 92       	push	r15
    2674:	0f 93       	push	r16
    2676:	1f 93       	push	r17
    2678:	2f 93       	push	r18
    267a:	3f 93       	push	r19
    267c:	4f 93       	push	r20
    267e:	5f 93       	push	r21
    2680:	6f 93       	push	r22
    2682:	7f 93       	push	r23
    2684:	8f 93       	push	r24
    2686:	9f 93       	push	r25
    2688:	af 93       	push	r26
    268a:	bf 93       	push	r27
    268c:	ef 93       	push	r30
    268e:	ff 93       	push	r31
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
    2694:	00 d0       	rcall	.+0      	; 0x2696 <__vector_67+0x34>
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
	uint8_t data[2];
	twi_read_packet(&TWIC,SI114X_ADDR,50,REG_IRQ_STATUS,data,1);
    269a:	ee 24       	eor	r14, r14
    269c:	e3 94       	inc	r14
    269e:	f1 2c       	mov	r15, r1
    26a0:	8e 01       	movw	r16, r28
    26a2:	0f 5f       	subi	r16, 0xFF	; 255
    26a4:	1f 4f       	sbci	r17, 0xFF	; 255
    26a6:	21 e2       	ldi	r18, 0x21	; 33
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	42 e3       	ldi	r20, 0x32	; 50
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	6a e5       	ldi	r22, 0x5A	; 90
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	80 e8       	ldi	r24, 0x80	; 128
    26b4:	94 e0       	ldi	r25, 0x04	; 4
    26b6:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <twi_read_packet>
	si114x_status = data[0];
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	80 93 f0 2b 	sts	0x2BF0, r24
	//data[0] = 0x00;
	//twi_write_packet(&TWIC,SI114X_ADDR,50,REG_IRQ_STATUS,data,1);

	puts("Interrupt from Si114x! \n");
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	94 e2       	ldi	r25, 0x24	; 36
    26c4:	0e 94 47 58 	call	0xb08e	; 0xb08e <puts>
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	ff 91       	pop	r31
    26d2:	ef 91       	pop	r30
    26d4:	bf 91       	pop	r27
    26d6:	af 91       	pop	r26
    26d8:	9f 91       	pop	r25
    26da:	8f 91       	pop	r24
    26dc:	7f 91       	pop	r23
    26de:	6f 91       	pop	r22
    26e0:	5f 91       	pop	r21
    26e2:	4f 91       	pop	r20
    26e4:	3f 91       	pop	r19
    26e6:	2f 91       	pop	r18
    26e8:	1f 91       	pop	r17
    26ea:	0f 91       	pop	r16
    26ec:	ff 90       	pop	r15
    26ee:	ef 90       	pop	r14
    26f0:	0f 90       	pop	r0
    26f2:	0b be       	out	0x3b, r0	; 59
    26f4:	0f 90       	pop	r0
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	0f 90       	pop	r0
    26fa:	1f 90       	pop	r1
    26fc:	18 95       	reti

000026fe <rtc_setup>:
}

void rtc_show_minutes(void) 
{
	rtc_update_display(BOTTOM_HALF,env_var.time.minutes);
	disp_time = false;
    26fe:	88 ed       	ldi	r24, 0xD8	; 216
    2700:	84 bf       	out	0x34, r24	; 52
    2702:	8b e0       	ldi	r24, 0x0B	; 11
    2704:	e0 e4       	ldi	r30, 0x40	; 64
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	83 83       	std	Z+3, r24	; 0x03
    270a:	e0 e0       	ldi	r30, 0x00	; 0
    270c:	f4 e0       	ldi	r31, 0x04	; 4
    270e:	81 81       	ldd	r24, Z+1	; 0x01
    2710:	80 fd       	sbrc	r24, 0
    2712:	fd cf       	rjmp	.-6      	; 0x270e <rtc_setup+0x10>
    2714:	e0 e0       	ldi	r30, 0x00	; 0
    2716:	f4 e0       	ldi	r31, 0x04	; 4
    2718:	80 e8       	ldi	r24, 0x80	; 128
    271a:	97 e0       	ldi	r25, 0x07	; 7
    271c:	82 87       	std	Z+10, r24	; 0x0a
    271e:	93 87       	std	Z+11, r25	; 0x0b
    2720:	82 e0       	ldi	r24, 0x02	; 2
    2722:	82 83       	std	Z+2, r24	; 0x02
    2724:	10 86       	std	Z+8, r1	; 0x08
    2726:	11 86       	std	Z+9, r1	; 0x09
    2728:	14 86       	std	Z+12, r1	; 0x0c
    272a:	15 86       	std	Z+13, r1	; 0x0d
    272c:	87 e0       	ldi	r24, 0x07	; 7
    272e:	80 83       	st	Z, r24
    2730:	08 95       	ret

00002732 <rtc_disable_time_render>:
    2732:	10 92 07 20 	sts	0x2007, r1
    2736:	08 95       	ret

00002738 <rtc_update_display>:
    2738:	6f 92       	push	r6
    273a:	7f 92       	push	r7
    273c:	8f 92       	push	r8
    273e:	9f 92       	push	r9
    2740:	af 92       	push	r10
    2742:	bf 92       	push	r11
    2744:	cf 92       	push	r12
    2746:	df 92       	push	r13
    2748:	ef 92       	push	r14
    274a:	ff 92       	push	r15
    274c:	0f 93       	push	r16
    274e:	1f 93       	push	r17
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	00 d0       	rcall	.+0      	; 0x2756 <rtc_update_display+0x1e>
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	78 2e       	mov	r7, r24
    275c:	66 2e       	mov	r6, r22
    275e:	70 e0       	ldi	r23, 0x00	; 0
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	8e 01       	movw	r16, r28
    2766:	0f 5f       	subi	r16, 0xFF	; 255
    2768:	1f 4f       	sbci	r17, 0xFF	; 255
    276a:	0f 2e       	mov	r0, r31
    276c:	fa e0       	ldi	r31, 0x0A	; 10
    276e:	8f 2e       	mov	r8, r31
    2770:	91 2c       	mov	r9, r1
    2772:	a1 2c       	mov	r10, r1
    2774:	b1 2c       	mov	r11, r1
    2776:	f0 2d       	mov	r31, r0
    2778:	78 01       	movw	r14, r16
    277a:	2f ef       	ldi	r18, 0xFF	; 255
    277c:	e2 1a       	sub	r14, r18
    277e:	f2 0a       	sbc	r15, r18
    2780:	67 01       	movw	r12, r14
    2782:	a5 01       	movw	r20, r10
    2784:	94 01       	movw	r18, r8
    2786:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>
    278a:	60 5d       	subi	r22, 0xD0	; 208
    278c:	f8 01       	movw	r30, r16
    278e:	60 83       	st	Z, r22
    2790:	62 2f       	mov	r22, r18
    2792:	73 2f       	mov	r23, r19
    2794:	84 2f       	mov	r24, r20
    2796:	95 2f       	mov	r25, r21
    2798:	61 15       	cp	r22, r1
    279a:	71 05       	cpc	r23, r1
    279c:	81 05       	cpc	r24, r1
    279e:	91 05       	cpc	r25, r1
    27a0:	11 f0       	breq	.+4      	; 0x27a6 <rtc_update_display+0x6e>
    27a2:	87 01       	movw	r16, r14
    27a4:	e9 cf       	rjmp	.-46     	; 0x2778 <rtc_update_display+0x40>
    27a6:	ce 01       	movw	r24, r28
    27a8:	01 96       	adiw	r24, 0x01	; 1
    27aa:	c8 1a       	sub	r12, r24
    27ac:	d9 0a       	sbc	r13, r25
    27ae:	c6 01       	movw	r24, r12
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	18 16       	cp	r1, r24
    27b4:	19 06       	cpc	r1, r25
    27b6:	a4 f4       	brge	.+40     	; 0x27e0 <rtc_update_display+0xa8>
    27b8:	a1 e0       	ldi	r26, 0x01	; 1
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	ac 0f       	add	r26, r28
    27be:	bd 1f       	adc	r27, r29
    27c0:	ac 0d       	add	r26, r12
    27c2:	bd 1d       	adc	r27, r13
    27c4:	fe 01       	movw	r30, r28
    27c6:	31 96       	adiw	r30, 0x01	; 1
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 81       	ld	r20, Z
    27ce:	5e 91       	ld	r21, -X
    27d0:	51 93       	st	Z+, r21
    27d2:	4c 93       	st	X, r20
    27d4:	2f 5f       	subi	r18, 0xFF	; 255
    27d6:	3f 4f       	sbci	r19, 0xFF	; 255
    27d8:	01 97       	sbiw	r24, 0x01	; 1
    27da:	28 17       	cp	r18, r24
    27dc:	39 07       	cpc	r19, r25
    27de:	b4 f3       	brlt	.-20     	; 0x27cc <rtc_update_display+0x94>
    27e0:	f9 e0       	ldi	r31, 0x09	; 9
    27e2:	f6 15       	cp	r31, r6
    27e4:	20 f0       	brcs	.+8      	; 0x27ee <rtc_update_display+0xb6>
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	90 e3       	ldi	r25, 0x30	; 48
    27ea:	99 83       	std	Y+1, r25	; 0x01
    27ec:	8a 83       	std	Y+2, r24	; 0x02
    27ee:	71 10       	cpse	r7, r1
    27f0:	08 c0       	rjmp	.+16     	; 0x2802 <rtc_update_display+0xca>
    27f2:	00 e0       	ldi	r16, 0x00	; 0
    27f4:	28 e0       	ldi	r18, 0x08	; 8
    27f6:	40 e1       	ldi	r20, 0x10	; 16
    27f8:	60 e0       	ldi	r22, 0x00	; 0
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	0e 94 3b 22 	call	0x4476	; 0x4476 <display_draw_filled_rect>
    2800:	07 c0       	rjmp	.+14     	; 0x2810 <rtc_update_display+0xd8>
    2802:	00 e0       	ldi	r16, 0x00	; 0
    2804:	29 e0       	ldi	r18, 0x09	; 9
    2806:	40 e1       	ldi	r20, 0x10	; 16
    2808:	67 e0       	ldi	r22, 0x07	; 7
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	0e 94 3b 22 	call	0x4476	; 0x4476 <display_draw_filled_rect>
    2810:	e7 2c       	mov	r14, r7
    2812:	f1 2c       	mov	r15, r1
    2814:	01 e0       	ldi	r16, 0x01	; 1
    2816:	21 e0       	ldi	r18, 0x01	; 1
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	49 81       	ldd	r20, Y+1	; 0x01
    281c:	b7 01       	movw	r22, r14
    281e:	82 e0       	ldi	r24, 0x02	; 2
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	0e 94 e7 22 	call	0x45ce	; 0x45ce <display_draw_char>
    2826:	21 e0       	ldi	r18, 0x01	; 1
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	4a 81       	ldd	r20, Y+2	; 0x02
    282c:	b7 01       	movw	r22, r14
    282e:	89 e0       	ldi	r24, 0x09	; 9
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 e7 22 	call	0x45ce	; 0x45ce <display_draw_char>
    2836:	0f 90       	pop	r0
    2838:	0f 90       	pop	r0
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	ff 90       	pop	r15
    2844:	ef 90       	pop	r14
    2846:	df 90       	pop	r13
    2848:	cf 90       	pop	r12
    284a:	bf 90       	pop	r11
    284c:	af 90       	pop	r10
    284e:	9f 90       	pop	r9
    2850:	8f 90       	pop	r8
    2852:	7f 90       	pop	r7
    2854:	6f 90       	pop	r6
    2856:	08 95       	ret

00002858 <rtc_enable_time_render>:
}

void rtc_enable_time_render(void) 
{
	env_var.menu_id = 0;
    2858:	10 92 08 2b 	sts	0x2B08, r1
	rtc_update_display(BOTTOM_HALF,env_var.time.minutes);
    285c:	60 91 85 2a 	lds	r22, 0x2A85
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	6a df       	rcall	.-300    	; 0x2738 <rtc_update_display>
	rtc_update_display(TOP_HALF,env_var.time.hours);
    2864:	60 91 86 2a 	lds	r22, 0x2A86
    2868:	89 e0       	ldi	r24, 0x09	; 9
    286a:	66 df       	rcall	.-308    	; 0x2738 <rtc_update_display>
	disp_time = true;
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	80 93 07 20 	sts	0x2007, r24
    2872:	08 95       	ret

00002874 <__vector_10>:
	display_draw_char(2,pos,buffer[0],1,1);
	display_draw_char(9,pos,buffer[1],1,1);
}

ISR(RTC_OVF_vect) 
{
    2874:	1f 92       	push	r1
    2876:	0f 92       	push	r0
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	0f 92       	push	r0
    287c:	11 24       	eor	r1, r1
    287e:	0b b6       	in	r0, 0x3b	; 59
    2880:	0f 92       	push	r0
    2882:	2f 93       	push	r18
    2884:	3f 93       	push	r19
    2886:	4f 93       	push	r20
    2888:	5f 93       	push	r21
    288a:	6f 93       	push	r22
    288c:	7f 93       	push	r23
    288e:	8f 93       	push	r24
    2890:	9f 93       	push	r25
    2892:	af 93       	push	r26
    2894:	bf 93       	push	r27
    2896:	cf 93       	push	r28
    2898:	ef 93       	push	r30
    289a:	ff 93       	push	r31
	//Variable to check system-runtime
	env_var.runtime++;
    289c:	e7 e6       	ldi	r30, 0x67	; 103
    289e:	fa e2       	ldi	r31, 0x2A	; 42
    28a0:	80 81       	ld	r24, Z
    28a2:	91 81       	ldd	r25, Z+1	; 0x01
    28a4:	a2 81       	ldd	r26, Z+2	; 0x02
    28a6:	b3 81       	ldd	r27, Z+3	; 0x03
    28a8:	01 96       	adiw	r24, 0x01	; 1
    28aa:	a1 1d       	adc	r26, r1
    28ac:	b1 1d       	adc	r27, r1
    28ae:	80 83       	st	Z, r24
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	a2 83       	std	Z+2, r26	; 0x02
    28b4:	b3 83       	std	Z+3, r27	; 0x03
	
	if (++env_var.time.minutes >= 60) {
    28b6:	e5 e8       	ldi	r30, 0x85	; 133
    28b8:	fa e2       	ldi	r31, 0x2A	; 42
    28ba:	60 81       	ld	r22, Z
    28bc:	6f 5f       	subi	r22, 0xFF	; 255
    28be:	60 83       	st	Z, r22
    28c0:	6c 33       	cpi	r22, 0x3C	; 60
    28c2:	08 f4       	brcc	.+2      	; 0x28c6 <__vector_10+0x52>
    28c4:	61 c0       	rjmp	.+194    	; 0x2988 <__vector_10+0x114>
		
		env_var.time.minutes = 0;
    28c6:	10 92 85 2a 	sts	0x2A85, r1
		if (disp_time) {
    28ca:	80 91 07 20 	lds	r24, 0x2007
    28ce:	88 23       	and	r24, r24
    28d0:	29 f0       	breq	.+10     	; 0x28dc <__vector_10+0x68>
			rtc_update_display(BOTTOM_HALF,env_var.time.minutes);
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	30 df       	rcall	.-416    	; 0x2738 <rtc_update_display>
			display_refresh_screen();
    28d8:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
		}
		
		//Todo: implement DST - Daylight Saving Time
		
		if (++env_var.time.hours >= 24) {
    28dc:	e6 e8       	ldi	r30, 0x86	; 134
    28de:	fa e2       	ldi	r31, 0x2A	; 42
    28e0:	60 81       	ld	r22, Z
    28e2:	6f 5f       	subi	r22, 0xFF	; 255
    28e4:	60 83       	st	Z, r22
    28e6:	68 31       	cpi	r22, 0x18	; 24
    28e8:	08 f4       	brcc	.+2      	; 0x28ec <__vector_10+0x78>
    28ea:	43 c0       	rjmp	.+134    	; 0x2972 <__vector_10+0xfe>
			if (env_var.time.weekday++ >= Sunday) {
    28ec:	80 91 88 2a 	lds	r24, 0x2A88
    28f0:	87 30       	cpi	r24, 0x07	; 7
    28f2:	20 f4       	brcc	.+8      	; 0x28fc <__vector_10+0x88>
    28f4:	8f 5f       	subi	r24, 0xFF	; 255
    28f6:	80 93 88 2a 	sts	0x2A88, r24
    28fa:	08 c0       	rjmp	.+16     	; 0x290c <__vector_10+0x98>
				env_var.time.weekday = Monday;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	80 93 88 2a 	sts	0x2A88, r24
				env_var.time.week++;
    2902:	e9 e8       	ldi	r30, 0x89	; 137
    2904:	fa e2       	ldi	r31, 0x2A	; 42
    2906:	80 81       	ld	r24, Z
    2908:	8f 5f       	subi	r24, 0xFF	; 255
    290a:	80 83       	st	Z, r24
			}
			if (env_var.time.day++ >= time_get_days_in_month(env_var.time.month,env_var.time.year)) {
    290c:	e7 e8       	ldi	r30, 0x87	; 135
    290e:	fa e2       	ldi	r31, 0x2A	; 42
    2910:	c0 81       	ld	r28, Z
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	8c 0f       	add	r24, r28
    2916:	80 83       	st	Z, r24
    2918:	60 91 8b 2a 	lds	r22, 0x2A8B
    291c:	70 91 8c 2a 	lds	r23, 0x2A8C
    2920:	80 91 8a 2a 	lds	r24, 0x2A8A
    2924:	0e 94 ab 53 	call	0xa756	; 0xa756 <time_get_days_in_month>
    2928:	c8 17       	cp	r28, r24
    292a:	b8 f0       	brcs	.+46     	; 0x295a <__vector_10+0xe6>
				env_var.time.day = 1;
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	80 93 87 2a 	sts	0x2A87, r24
				if (env_var.time.month++ >= December) {
    2932:	80 91 8a 2a 	lds	r24, 0x2A8A
    2936:	8c 30       	cpi	r24, 0x0C	; 12
    2938:	20 f4       	brcc	.+8      	; 0x2942 <__vector_10+0xce>
    293a:	8f 5f       	subi	r24, 0xFF	; 255
    293c:	80 93 8a 2a 	sts	0x2A8A, r24
    2940:	0c c0       	rjmp	.+24     	; 0x295a <__vector_10+0xe6>
					env_var.time.month = January;
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	80 93 8a 2a 	sts	0x2A8A, r24
					env_var.time.week = 1;
    2948:	80 93 89 2a 	sts	0x2A89, r24
					env_var.time.year++;
    294c:	eb e8       	ldi	r30, 0x8B	; 139
    294e:	fa e2       	ldi	r31, 0x2A	; 42
    2950:	80 81       	ld	r24, Z
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	01 96       	adiw	r24, 0x01	; 1
    2956:	80 83       	st	Z, r24
    2958:	91 83       	std	Z+1, r25	; 0x01
				}
			}
			env_var.time.hours = 0;
    295a:	10 92 86 2a 	sts	0x2A86, r1
			if (disp_time) {
    295e:	80 91 07 20 	lds	r24, 0x2007
    2962:	88 23       	and	r24, r24
    2964:	71 f0       	breq	.+28     	; 0x2982 <__vector_10+0x10e>
				rtc_update_display(TOP_HALF,env_var.time.hours);
    2966:	60 e0       	ldi	r22, 0x00	; 0
    2968:	89 e0       	ldi	r24, 0x09	; 9
    296a:	e6 de       	rcall	.-564    	; 0x2738 <rtc_update_display>
				display_refresh_screen();
    296c:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    2970:	08 c0       	rjmp	.+16     	; 0x2982 <__vector_10+0x10e>
			}
		} else {
			if (disp_time) {
    2972:	80 91 07 20 	lds	r24, 0x2007
    2976:	88 23       	and	r24, r24
    2978:	21 f0       	breq	.+8      	; 0x2982 <__vector_10+0x10e>
				rtc_update_display(TOP_HALF,env_var.time.hours);
    297a:	89 e0       	ldi	r24, 0x09	; 9
    297c:	dd de       	rcall	.-582    	; 0x2738 <rtc_update_display>
				display_refresh_screen();
    297e:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
			}
		}
		env_var.time.minutes = 0;
    2982:	10 92 85 2a 	sts	0x2A85, r1
    2986:	08 c0       	rjmp	.+16     	; 0x2998 <__vector_10+0x124>
	} else {
		if (disp_time) {
    2988:	80 91 07 20 	lds	r24, 0x2007
    298c:	88 23       	and	r24, r24
    298e:	21 f0       	breq	.+8      	; 0x2998 <__vector_10+0x124>
			rtc_update_display(BOTTOM_HALF,env_var.time.minutes);
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	d2 de       	rcall	.-604    	; 0x2738 <rtc_update_display>
			display_refresh_screen();
    2994:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
		if (env_var.time.minutes == env_var.alarm.minutes)
		{
			//Alarm code goes here
		}	
	}
    2998:	ff 91       	pop	r31
    299a:	ef 91       	pop	r30
    299c:	cf 91       	pop	r28
    299e:	bf 91       	pop	r27
    29a0:	af 91       	pop	r26
    29a2:	9f 91       	pop	r25
    29a4:	8f 91       	pop	r24
    29a6:	7f 91       	pop	r23
    29a8:	6f 91       	pop	r22
    29aa:	5f 91       	pop	r21
    29ac:	4f 91       	pop	r20
    29ae:	3f 91       	pop	r19
    29b0:	2f 91       	pop	r18
    29b2:	0f 90       	pop	r0
    29b4:	0b be       	out	0x3b, r0	; 59
    29b6:	0f 90       	pop	r0
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	0f 90       	pop	r0
    29bc:	1f 90       	pop	r1
    29be:	18 95       	reti

000029c0 <_sendCmd>:
	u8 code ucoef[4] = { 0x7B, 0x6B, 0x01, 0x00 } ;
	
	// This will write 4 bytes starting with I2C address 0x13
	response = Si114xBlockWrite( si114x_handle, REG_UCOEF0, 4, &ucoef[0] );
	return response;
}
    29c0:	df 92       	push	r13
    29c2:	ef 92       	push	r14
    29c4:	ff 92       	push	r15
    29c6:	0f 93       	push	r16
    29c8:	1f 93       	push	r17
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	ec 01       	movw	r28, r24
    29d0:	d6 2e       	mov	r13, r22
    29d2:	60 e2       	ldi	r22, 0x20	; 32
    29d4:	53 d6       	rcall	.+3238   	; 0x367c <Si114xReadFromRegister>
    29d6:	8c 01       	movw	r16, r24
    29d8:	99 23       	and	r25, r25
    29da:	34 f1       	brlt	.+76     	; 0x2a28 <_sendCmd+0x68>
    29dc:	60 e3       	ldi	r22, 0x30	; 48
    29de:	ce 01       	movw	r24, r28
    29e0:	4d d6       	rcall	.+3226   	; 0x367c <Si114xReadFromRegister>
    29e2:	81 30       	cpi	r24, 0x01	; 1
    29e4:	91 05       	cpc	r25, r1
    29e6:	81 f1       	breq	.+96     	; 0x2a48 <_sendCmd+0x88>
    29e8:	99 23       	and	r25, r25
    29ea:	c4 f7       	brge	.-16     	; 0x29dc <_sendCmd+0x1c>
    29ec:	39 c0       	rjmp	.+114    	; 0x2a60 <_sendCmd+0xa0>
    29ee:	60 e2       	ldi	r22, 0x20	; 32
    29f0:	ce 01       	movw	r24, r28
    29f2:	44 d6       	rcall	.+3208   	; 0x367c <Si114xReadFromRegister>
    29f4:	80 17       	cp	r24, r16
    29f6:	91 07       	cpc	r25, r17
    29f8:	51 f1       	breq	.+84     	; 0x2a4e <_sendCmd+0x8e>
    29fa:	99 23       	and	r25, r25
    29fc:	8c f1       	brlt	.+98     	; 0x2a60 <_sendCmd+0xa0>
    29fe:	8c 01       	movw	r16, r24
    2a00:	ed cf       	rjmp	.-38     	; 0x29dc <_sendCmd+0x1c>
    2a02:	78 01       	movw	r14, r16
    2a04:	4d 2d       	mov	r20, r13
    2a06:	68 e1       	ldi	r22, 0x18	; 24
    2a08:	ce 01       	movw	r24, r28
    2a0a:	1b d6       	rcall	.+3126   	; 0x3642 <Si114xWriteToRegister>
    2a0c:	9c 01       	movw	r18, r24
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	69 f4       	brne	.+26     	; 0x2a2c <_sendCmd+0x6c>
    2a12:	dd 20       	and	r13, r13
    2a14:	69 f0       	breq	.+26     	; 0x2a30 <_sendCmd+0x70>
    2a16:	60 e2       	ldi	r22, 0x20	; 32
    2a18:	ce 01       	movw	r24, r28
    2a1a:	30 d6       	rcall	.+3168   	; 0x367c <Si114xReadFromRegister>
    2a1c:	8e 15       	cp	r24, r14
    2a1e:	9f 05       	cpc	r25, r15
    2a20:	51 f4       	brne	.+20     	; 0x2a36 <_sendCmd+0x76>
    2a22:	11 23       	and	r17, r17
    2a24:	c4 f7       	brge	.-16     	; 0x2a16 <_sendCmd+0x56>
    2a26:	0a c0       	rjmp	.+20     	; 0x2a3c <_sendCmd+0x7c>
    2a28:	91 2f       	mov	r25, r17
    2a2a:	1a c0       	rjmp	.+52     	; 0x2a60 <_sendCmd+0xa0>
    2a2c:	93 2f       	mov	r25, r19
    2a2e:	18 c0       	rjmp	.+48     	; 0x2a60 <_sendCmd+0xa0>
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	15 c0       	rjmp	.+42     	; 0x2a60 <_sendCmd+0xa0>
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	12 c0       	rjmp	.+36     	; 0x2a60 <_sendCmd+0xa0>
    2a3c:	80 2f       	mov	r24, r16
    2a3e:	91 2f       	mov	r25, r17
    2a40:	0f c0       	rjmp	.+30     	; 0x2a60 <_sendCmd+0xa0>
    2a42:	82 2f       	mov	r24, r18
    2a44:	93 2f       	mov	r25, r19
    2a46:	0c c0       	rjmp	.+24     	; 0x2a60 <_sendCmd+0xa0>
    2a48:	d1 10       	cpse	r13, r1
    2a4a:	d1 cf       	rjmp	.-94     	; 0x29ee <_sendCmd+0x2e>
    2a4c:	da cf       	rjmp	.-76     	; 0x2a02 <_sendCmd+0x42>
    2a4e:	78 01       	movw	r14, r16
    2a50:	4d 2d       	mov	r20, r13
    2a52:	68 e1       	ldi	r22, 0x18	; 24
    2a54:	ce 01       	movw	r24, r28
    2a56:	f5 d5       	rcall	.+3050   	; 0x3642 <Si114xWriteToRegister>
    2a58:	9c 01       	movw	r18, r24
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	e1 f2       	breq	.-72     	; 0x2a16 <_sendCmd+0x56>
    2a5e:	f1 cf       	rjmp	.-30     	; 0x2a42 <_sendCmd+0x82>
    2a60:	df 91       	pop	r29
    2a62:	cf 91       	pop	r28
    2a64:	1f 91       	pop	r17
    2a66:	0f 91       	pop	r16
    2a68:	ff 90       	pop	r15
    2a6a:	ef 90       	pop	r14
    2a6c:	df 90       	pop	r13
    2a6e:	08 95       	ret

00002a70 <si114x_get_data>:
    2a70:	cf 92       	push	r12
    2a72:	df 92       	push	r13
    2a74:	ef 92       	push	r14
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <si114x_get_data+0x10>
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    2a84:	6c 01       	movw	r12, r24
    2a86:	80 91 25 2a 	lds	r24, 0x2A25
    2a8a:	90 91 26 2a 	lds	r25, 0x2A26
    2a8e:	f6 01       	movw	r30, r12
    2a90:	82 83       	std	Z+2, r24	; 0x02
    2a92:	93 83       	std	Z+3, r25	; 0x03
    2a94:	68 94       	set
    2a96:	ee 24       	eor	r14, r14
    2a98:	e1 f8       	bld	r14, 1
    2a9a:	8e 01       	movw	r16, r28
    2a9c:	0f 5f       	subi	r16, 0xFF	; 255
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	26 e2       	ldi	r18, 0x26	; 38
    2aa2:	42 e3       	ldi	r20, 0x32	; 50
    2aa4:	6a e5       	ldi	r22, 0x5A	; 90
    2aa6:	80 e8       	ldi	r24, 0x80	; 128
    2aa8:	94 e0       	ldi	r25, 0x04	; 4
    2aaa:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <twi_read_packet>
    2aae:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	98 2f       	mov	r25, r24
    2ab4:	88 27       	eor	r24, r24
    2ab6:	29 81       	ldd	r18, Y+1	; 0x01
    2ab8:	82 2b       	or	r24, r18
    2aba:	f6 01       	movw	r30, r12
    2abc:	82 87       	std	Z+10, r24	; 0x0a
    2abe:	93 87       	std	Z+11, r25	; 0x0b
    2ac0:	28 e2       	ldi	r18, 0x28	; 40
    2ac2:	42 e3       	ldi	r20, 0x32	; 50
    2ac4:	6a e5       	ldi	r22, 0x5A	; 90
    2ac6:	80 e8       	ldi	r24, 0x80	; 128
    2ac8:	94 e0       	ldi	r25, 0x04	; 4
    2aca:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <twi_read_packet>
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	98 2f       	mov	r25, r24
    2ad4:	88 27       	eor	r24, r24
    2ad6:	29 81       	ldd	r18, Y+1	; 0x01
    2ad8:	82 2b       	or	r24, r18
    2ada:	f6 01       	movw	r30, r12
    2adc:	84 87       	std	Z+12, r24	; 0x0c
    2ade:	95 87       	std	Z+13, r25	; 0x0d
    2ae0:	2a e2       	ldi	r18, 0x2A	; 42
    2ae2:	42 e3       	ldi	r20, 0x32	; 50
    2ae4:	6a e5       	ldi	r22, 0x5A	; 90
    2ae6:	80 e8       	ldi	r24, 0x80	; 128
    2ae8:	94 e0       	ldi	r25, 0x04	; 4
    2aea:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <twi_read_packet>
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	98 2f       	mov	r25, r24
    2af4:	88 27       	eor	r24, r24
    2af6:	29 81       	ldd	r18, Y+1	; 0x01
    2af8:	82 2b       	or	r24, r18
    2afa:	f6 01       	movw	r30, r12
    2afc:	86 87       	std	Z+14, r24	; 0x0e
    2afe:	97 87       	std	Z+15, r25	; 0x0f
    2b00:	24 e2       	ldi	r18, 0x24	; 36
    2b02:	42 e3       	ldi	r20, 0x32	; 50
    2b04:	6a e5       	ldi	r22, 0x5A	; 90
    2b06:	80 e8       	ldi	r24, 0x80	; 128
    2b08:	94 e0       	ldi	r25, 0x04	; 4
    2b0a:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <twi_read_packet>
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	98 2f       	mov	r25, r24
    2b14:	88 27       	eor	r24, r24
    2b16:	29 81       	ldd	r18, Y+1	; 0x01
    2b18:	82 2b       	or	r24, r18
    2b1a:	f6 01       	movw	r30, r12
    2b1c:	80 87       	std	Z+8, r24	; 0x08
    2b1e:	91 87       	std	Z+9, r25	; 0x09
    2b20:	22 e2       	ldi	r18, 0x22	; 34
    2b22:	42 e3       	ldi	r20, 0x32	; 50
    2b24:	6a e5       	ldi	r22, 0x5A	; 90
    2b26:	80 e8       	ldi	r24, 0x80	; 128
    2b28:	94 e0       	ldi	r25, 0x04	; 4
    2b2a:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <twi_read_packet>
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	98 2f       	mov	r25, r24
    2b34:	88 27       	eor	r24, r24
    2b36:	29 81       	ldd	r18, Y+1	; 0x01
    2b38:	82 2b       	or	r24, r18
    2b3a:	f6 01       	movw	r30, r12
    2b3c:	86 83       	std	Z+6, r24	; 0x06
    2b3e:	97 83       	std	Z+7, r25	; 0x07
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	0f 90       	pop	r0
    2b44:	0f 90       	pop	r0
    2b46:	df 91       	pop	r29
    2b48:	cf 91       	pop	r28
    2b4a:	1f 91       	pop	r17
    2b4c:	0f 91       	pop	r16
    2b4e:	ef 90       	pop	r14
    2b50:	df 90       	pop	r13
    2b52:	cf 90       	pop	r12
    2b54:	08 95       	ret

00002b56 <Si114xNop>:
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	33 cf       	rjmp	.-410    	; 0x29c0 <_sendCmd>
    2b5a:	08 95       	ret

00002b5c <Si114xPsAuto>:
    2b5c:	6d e0       	ldi	r22, 0x0D	; 13
    2b5e:	30 cf       	rjmp	.-416    	; 0x29c0 <_sendCmd>
    2b60:	08 95       	ret

00002b62 <Si114xPsAlsAuto>:
    2b62:	6f e0       	ldi	r22, 0x0F	; 15
    2b64:	2d cf       	rjmp	.-422    	; 0x29c0 <_sendCmd>
    2b66:	08 95       	ret

00002b68 <Si114xParamSet>:
    2b68:	cf 92       	push	r12
    2b6a:	df 92       	push	r13
    2b6c:	ef 92       	push	r14
    2b6e:	ff 92       	push	r15
    2b70:	0f 93       	push	r16
    2b72:	1f 93       	push	r17
    2b74:	cf 93       	push	r28
    2b76:	df 93       	push	r29
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <Si114xParamSet+0x12>
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
    2b7e:	8c 01       	movw	r16, r24
    2b80:	d6 2e       	mov	r13, r22
    2b82:	c4 2e       	mov	r12, r20
    2b84:	60 e3       	ldi	r22, 0x30	; 48
    2b86:	c8 01       	movw	r24, r16
    2b88:	79 d5       	rcall	.+2802   	; 0x367c <Si114xReadFromRegister>
    2b8a:	81 30       	cpi	r24, 0x01	; 1
    2b8c:	91 05       	cpc	r25, r1
    2b8e:	79 f0       	breq	.+30     	; 0x2bae <Si114xParamSet+0x46>
    2b90:	99 23       	and	r25, r25
    2b92:	c4 f7       	brge	.-16     	; 0x2b84 <Si114xParamSet+0x1c>
    2b94:	1e c0       	rjmp	.+60     	; 0x2bd2 <Si114xParamSet+0x6a>
    2b96:	60 e2       	ldi	r22, 0x20	; 32
    2b98:	c8 01       	movw	r24, r16
    2b9a:	70 d5       	rcall	.+2784   	; 0x367c <Si114xReadFromRegister>
    2b9c:	8e 15       	cp	r24, r14
    2b9e:	9f 05       	cpc	r25, r15
    2ba0:	d1 f3       	breq	.-12     	; 0x2b96 <Si114xParamSet+0x2e>
    2ba2:	18 16       	cp	r1, r24
    2ba4:	19 06       	cpc	r1, r25
    2ba6:	ac f4       	brge	.+42     	; 0x2bd2 <Si114xParamSet+0x6a>
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	12 c0       	rjmp	.+36     	; 0x2bd2 <Si114xParamSet+0x6a>
    2bae:	60 e2       	ldi	r22, 0x20	; 32
    2bb0:	c8 01       	movw	r24, r16
    2bb2:	64 d5       	rcall	.+2760   	; 0x367c <Si114xReadFromRegister>
    2bb4:	7c 01       	movw	r14, r24
    2bb6:	c9 82       	std	Y+1, r12	; 0x01
    2bb8:	8d 2d       	mov	r24, r13
    2bba:	8f 71       	andi	r24, 0x1F	; 31
    2bbc:	80 56       	subi	r24, 0x60	; 96
    2bbe:	8a 83       	std	Y+2, r24	; 0x02
    2bc0:	9e 01       	movw	r18, r28
    2bc2:	2f 5f       	subi	r18, 0xFF	; 255
    2bc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc6:	42 e0       	ldi	r20, 0x02	; 2
    2bc8:	67 e1       	ldi	r22, 0x17	; 23
    2bca:	c8 01       	movw	r24, r16
    2bcc:	73 d5       	rcall	.+2790   	; 0x36b4 <Si114xBlockWrite>
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	11 f3       	breq	.-60     	; 0x2b96 <Si114xParamSet+0x2e>
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	1f 91       	pop	r17
    2bdc:	0f 91       	pop	r16
    2bde:	ff 90       	pop	r15
    2be0:	ef 90       	pop	r14
    2be2:	df 90       	pop	r13
    2be4:	cf 90       	pop	r12
    2be6:	08 95       	ret

00002be8 <Si114xPauseAll>:
    2be8:	cf 93       	push	r28
    2bea:	df 93       	push	r29
    2bec:	ec 01       	movw	r28, r24
    2bee:	60 e2       	ldi	r22, 0x20	; 32
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	44 d5       	rcall	.+2696   	; 0x367c <Si114xReadFromRegister>
    2bf4:	89 2b       	or	r24, r25
    2bf6:	19 f0       	breq	.+6      	; 0x2bfe <Si114xPauseAll+0x16>
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	ad df       	rcall	.-166    	; 0x2b56 <Si114xNop>
    2bfc:	f8 cf       	rjmp	.-16     	; 0x2bee <Si114xPauseAll+0x6>
    2bfe:	6b e0       	ldi	r22, 0x0B	; 11
    2c00:	ce 01       	movw	r24, r28
    2c02:	de de       	rcall	.-580    	; 0x29c0 <_sendCmd>
    2c04:	60 e2       	ldi	r22, 0x20	; 32
    2c06:	ce 01       	movw	r24, r28
    2c08:	39 d5       	rcall	.+2674   	; 0x367c <Si114xReadFromRegister>
    2c0a:	89 2b       	or	r24, r25
    2c0c:	d9 f3       	breq	.-10     	; 0x2c04 <Si114xPauseAll+0x1c>
    2c0e:	60 e2       	ldi	r22, 0x20	; 32
    2c10:	ce 01       	movw	r24, r28
    2c12:	34 d5       	rcall	.+2664   	; 0x367c <Si114xReadFromRegister>
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	59 f7       	brne	.-42     	; 0x2bee <Si114xPauseAll+0x6>
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	08 95       	ret

00002c22 <si114x_reset>:
    2c22:	0f 93       	push	r16
    2c24:	1f 93       	push	r17
    2c26:	cf 93       	push	r28
    2c28:	df 93       	push	r29
    2c2a:	ec 01       	movw	r28, r24
    2c2c:	40 e0       	ldi	r20, 0x00	; 0
    2c2e:	68 e0       	ldi	r22, 0x08	; 8
    2c30:	08 d5       	rcall	.+2576   	; 0x3642 <Si114xWriteToRegister>
    2c32:	8c 01       	movw	r16, r24
    2c34:	ce 01       	movw	r24, r28
    2c36:	d8 df       	rcall	.-80     	; 0x2be8 <Si114xPauseAll>
    2c38:	08 0f       	add	r16, r24
    2c3a:	19 1f       	adc	r17, r25
    2c3c:	40 e0       	ldi	r20, 0x00	; 0
    2c3e:	68 e0       	ldi	r22, 0x08	; 8
    2c40:	ce 01       	movw	r24, r28
    2c42:	ff d4       	rcall	.+2558   	; 0x3642 <Si114xWriteToRegister>
    2c44:	08 0f       	add	r16, r24
    2c46:	19 1f       	adc	r17, r25
    2c48:	40 e0       	ldi	r20, 0x00	; 0
    2c4a:	64 e0       	ldi	r22, 0x04	; 4
    2c4c:	ce 01       	movw	r24, r28
    2c4e:	f9 d4       	rcall	.+2546   	; 0x3642 <Si114xWriteToRegister>
    2c50:	08 0f       	add	r16, r24
    2c52:	19 1f       	adc	r17, r25
    2c54:	40 e0       	ldi	r20, 0x00	; 0
    2c56:	65 e0       	ldi	r22, 0x05	; 5
    2c58:	ce 01       	movw	r24, r28
    2c5a:	f3 d4       	rcall	.+2534   	; 0x3642 <Si114xWriteToRegister>
    2c5c:	08 0f       	add	r16, r24
    2c5e:	19 1f       	adc	r17, r25
    2c60:	40 e0       	ldi	r20, 0x00	; 0
    2c62:	66 e0       	ldi	r22, 0x06	; 6
    2c64:	ce 01       	movw	r24, r28
    2c66:	ed d4       	rcall	.+2522   	; 0x3642 <Si114xWriteToRegister>
    2c68:	08 0f       	add	r16, r24
    2c6a:	19 1f       	adc	r17, r25
    2c6c:	40 e0       	ldi	r20, 0x00	; 0
    2c6e:	63 e0       	ldi	r22, 0x03	; 3
    2c70:	ce 01       	movw	r24, r28
    2c72:	e7 d4       	rcall	.+2510   	; 0x3642 <Si114xWriteToRegister>
    2c74:	08 0f       	add	r16, r24
    2c76:	19 1f       	adc	r17, r25
    2c78:	4f ef       	ldi	r20, 0xFF	; 255
    2c7a:	61 e2       	ldi	r22, 0x21	; 33
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	e1 d4       	rcall	.+2498   	; 0x3642 <Si114xWriteToRegister>
    2c80:	08 0f       	add	r16, r24
    2c82:	19 1f       	adc	r17, r25
    2c84:	41 e0       	ldi	r20, 0x01	; 1
    2c86:	68 e1       	ldi	r22, 0x18	; 24
    2c88:	ce 01       	movw	r24, r28
    2c8a:	db d4       	rcall	.+2486   	; 0x3642 <Si114xWriteToRegister>
    2c8c:	08 0f       	add	r16, r24
    2c8e:	19 1f       	adc	r17, r25
    2c90:	21 d5       	rcall	.+2626   	; 0x36d4 <delay_10ms>
    2c92:	47 e1       	ldi	r20, 0x17	; 23
    2c94:	67 e0       	ldi	r22, 0x07	; 7
    2c96:	ce 01       	movw	r24, r28
    2c98:	d4 d4       	rcall	.+2472   	; 0x3642 <Si114xWriteToRegister>
    2c9a:	80 0f       	add	r24, r16
    2c9c:	91 1f       	adc	r25, r17
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	08 95       	ret

00002ca8 <si114x_init_ps1>:
    2ca8:	0f 93       	push	r16
    2caa:	1f 93       	push	r17
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	ec 01       	movw	r28, r24
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	68 e0       	ldi	r22, 0x08	; 8
    2cb6:	c5 d4       	rcall	.+2442   	; 0x3642 <Si114xWriteToRegister>
    2cb8:	8c 01       	movw	r16, r24
    2cba:	40 e0       	ldi	r20, 0x00	; 0
    2cbc:	6a e0       	ldi	r22, 0x0A	; 10
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	c0 d4       	rcall	.+2432   	; 0x3642 <Si114xWriteToRegister>
    2cc2:	08 0f       	add	r16, r24
    2cc4:	19 1f       	adc	r17, r25
    2cc6:	40 e0       	ldi	r20, 0x00	; 0
    2cc8:	69 e0       	ldi	r22, 0x09	; 9
    2cca:	ce 01       	movw	r24, r28
    2ccc:	ba d4       	rcall	.+2420   	; 0x3642 <Si114xWriteToRegister>
    2cce:	08 0f       	add	r16, r24
    2cd0:	19 1f       	adc	r17, r25
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	a6 df       	rcall	.-180    	; 0x2c22 <si114x_reset>
    2cd6:	08 0f       	add	r16, r24
    2cd8:	19 1f       	adc	r17, r25
    2cda:	4f e0       	ldi	r20, 0x0F	; 15
    2cdc:	6f e0       	ldi	r22, 0x0F	; 15
    2cde:	ce 01       	movw	r24, r28
    2ce0:	b0 d4       	rcall	.+2400   	; 0x3642 <Si114xWriteToRegister>
    2ce2:	08 0f       	add	r16, r24
    2ce4:	19 1f       	adc	r17, r25
    2ce6:	41 e0       	ldi	r20, 0x01	; 1
    2ce8:	61 e0       	ldi	r22, 0x01	; 1
    2cea:	ce 01       	movw	r24, r28
    2cec:	3d df       	rcall	.-390    	; 0x2b68 <Si114xParamSet>
    2cee:	08 0f       	add	r16, r24
    2cf0:	19 1f       	adc	r17, r25
    2cf2:	43 e0       	ldi	r20, 0x03	; 3
    2cf4:	63 e0       	ldi	r22, 0x03	; 3
    2cf6:	ce 01       	movw	r24, r28
    2cf8:	a4 d4       	rcall	.+2376   	; 0x3642 <Si114xWriteToRegister>
    2cfa:	08 0f       	add	r16, r24
    2cfc:	19 1f       	adc	r17, r25
    2cfe:	44 e0       	ldi	r20, 0x04	; 4
    2d00:	64 e0       	ldi	r22, 0x04	; 4
    2d02:	ce 01       	movw	r24, r28
    2d04:	9e d4       	rcall	.+2364   	; 0x3642 <Si114xWriteToRegister>
    2d06:	08 0f       	add	r16, r24
    2d08:	19 1f       	adc	r17, r25
    2d0a:	40 e3       	ldi	r20, 0x30	; 48
    2d0c:	65 e0       	ldi	r22, 0x05	; 5
    2d0e:	ce 01       	movw	r24, r28
    2d10:	98 d4       	rcall	.+2352   	; 0x3642 <Si114xWriteToRegister>
    2d12:	08 0f       	add	r16, r24
    2d14:	19 1f       	adc	r17, r25
    2d16:	43 e0       	ldi	r20, 0x03	; 3
    2d18:	67 e0       	ldi	r22, 0x07	; 7
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	25 df       	rcall	.-438    	; 0x2b68 <Si114xParamSet>
    2d1e:	08 0f       	add	r16, r24
    2d20:	19 1f       	adc	r17, r25
    2d22:	43 e0       	ldi	r20, 0x03	; 3
    2d24:	6e e0       	ldi	r22, 0x0E	; 14
    2d26:	ce 01       	movw	r24, r28
    2d28:	1f df       	rcall	.-450    	; 0x2b68 <Si114xParamSet>
    2d2a:	08 0f       	add	r16, r24
    2d2c:	19 1f       	adc	r17, r25
    2d2e:	40 e0       	ldi	r20, 0x00	; 0
    2d30:	6b e0       	ldi	r22, 0x0B	; 11
    2d32:	ce 01       	movw	r24, r28
    2d34:	19 df       	rcall	.-462    	; 0x2b68 <Si114xParamSet>
    2d36:	08 0f       	add	r16, r24
    2d38:	19 1f       	adc	r17, r25
    2d3a:	41 e0       	ldi	r20, 0x01	; 1
    2d3c:	62 e0       	ldi	r22, 0x02	; 2
    2d3e:	ce 01       	movw	r24, r28
    2d40:	13 df       	rcall	.-474    	; 0x2b68 <Si114xParamSet>
    2d42:	08 0f       	add	r16, r24
    2d44:	19 1f       	adc	r17, r25
    2d46:	40 e7       	ldi	r20, 0x70	; 112
    2d48:	6a e0       	ldi	r22, 0x0A	; 10
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	0d df       	rcall	.-486    	; 0x2b68 <Si114xParamSet>
    2d4e:	08 0f       	add	r16, r24
    2d50:	19 1f       	adc	r17, r25
    2d52:	44 e0       	ldi	r20, 0x04	; 4
    2d54:	6c e0       	ldi	r22, 0x0C	; 12
    2d56:	ce 01       	movw	r24, r28
    2d58:	07 df       	rcall	.-498    	; 0x2b68 <Si114xParamSet>
    2d5a:	08 0f       	add	r16, r24
    2d5c:	19 1f       	adc	r17, r25
    2d5e:	40 e4       	ldi	r20, 0x40	; 64
    2d60:	61 e1       	ldi	r22, 0x11	; 17
    2d62:	ce 01       	movw	r24, r28
    2d64:	6e d4       	rcall	.+2268   	; 0x3642 <Si114xWriteToRegister>
    2d66:	08 0f       	add	r16, r24
    2d68:	19 1f       	adc	r17, r25
    2d6a:	46 e0       	ldi	r20, 0x06	; 6
    2d6c:	62 e1       	ldi	r22, 0x12	; 18
    2d6e:	ce 01       	movw	r24, r28
    2d70:	68 d4       	rcall	.+2256   	; 0x3642 <Si114xWriteToRegister>
    2d72:	08 0f       	add	r16, r24
    2d74:	19 1f       	adc	r17, r25
    2d76:	49 eb       	ldi	r20, 0xB9	; 185
    2d78:	68 e0       	ldi	r22, 0x08	; 8
    2d7a:	ce 01       	movw	r24, r28
    2d7c:	62 d4       	rcall	.+2244   	; 0x3642 <Si114xWriteToRegister>
    2d7e:	08 0f       	add	r16, r24
    2d80:	19 1f       	adc	r17, r25
    2d82:	48 e0       	ldi	r20, 0x08	; 8
    2d84:	6a e0       	ldi	r22, 0x0A	; 10
    2d86:	ce 01       	movw	r24, r28
    2d88:	5c d4       	rcall	.+2232   	; 0x3642 <Si114xWriteToRegister>
    2d8a:	08 0f       	add	r16, r24
    2d8c:	19 1f       	adc	r17, r25
    2d8e:	ce 01       	movw	r24, r28
    2d90:	e5 de       	rcall	.-566    	; 0x2b5c <Si114xPsAuto>
    2d92:	80 0f       	add	r24, r16
    2d94:	91 1f       	adc	r25, r17
    2d96:	df 91       	pop	r29
    2d98:	cf 91       	pop	r28
    2d9a:	1f 91       	pop	r17
    2d9c:	0f 91       	pop	r16
    2d9e:	08 95       	ret

00002da0 <si114x_setup_ps1_only>:
    2da0:	8a e5       	ldi	r24, 0x5A	; 90
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	3e df       	rcall	.-388    	; 0x2c22 <si114x_reset>
    2da6:	2f ef       	ldi	r18, 0xFF	; 255
    2da8:	81 ee       	ldi	r24, 0xE1	; 225
    2daa:	94 e0       	ldi	r25, 0x04	; 4
    2dac:	21 50       	subi	r18, 0x01	; 1
    2dae:	80 40       	sbci	r24, 0x00	; 0
    2db0:	90 40       	sbci	r25, 0x00	; 0
    2db2:	e1 f7       	brne	.-8      	; 0x2dac <si114x_setup_ps1_only+0xc>
    2db4:	00 c0       	rjmp	.+0      	; 0x2db6 <si114x_setup_ps1_only+0x16>
    2db6:	00 00       	nop
    2db8:	8a e5       	ldi	r24, 0x5A	; 90
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	75 df       	rcall	.-278    	; 0x2ca8 <si114x_init_ps1>
    2dbe:	ae cb       	rjmp	.-2212   	; 0x251c <btn_si114x_enable_interrupt>
    2dc0:	08 95       	ret

00002dc2 <si114x_init>:
    2dc2:	0f 93       	push	r16
    2dc4:	1f 93       	push	r17
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
    2dca:	ec 01       	movw	r28, r24
    2dcc:	40 e0       	ldi	r20, 0x00	; 0
    2dce:	68 e0       	ldi	r22, 0x08	; 8
    2dd0:	38 d4       	rcall	.+2160   	; 0x3642 <Si114xWriteToRegister>
    2dd2:	8c 01       	movw	r16, r24
    2dd4:	40 e0       	ldi	r20, 0x00	; 0
    2dd6:	6a e0       	ldi	r22, 0x0A	; 10
    2dd8:	ce 01       	movw	r24, r28
    2dda:	33 d4       	rcall	.+2150   	; 0x3642 <Si114xWriteToRegister>
    2ddc:	08 0f       	add	r16, r24
    2dde:	19 1f       	adc	r17, r25
    2de0:	40 e0       	ldi	r20, 0x00	; 0
    2de2:	69 e0       	ldi	r22, 0x09	; 9
    2de4:	ce 01       	movw	r24, r28
    2de6:	2d d4       	rcall	.+2138   	; 0x3642 <Si114xWriteToRegister>
    2de8:	08 0f       	add	r16, r24
    2dea:	19 1f       	adc	r17, r25
    2dec:	ce 01       	movw	r24, r28
    2dee:	19 df       	rcall	.-462    	; 0x2c22 <si114x_reset>
    2df0:	08 0f       	add	r16, r24
    2df2:	19 1f       	adc	r17, r25
    2df4:	4f ef       	ldi	r20, 0xFF	; 255
    2df6:	6f e0       	ldi	r22, 0x0F	; 15
    2df8:	ce 01       	movw	r24, r28
    2dfa:	23 d4       	rcall	.+2118   	; 0x3642 <Si114xWriteToRegister>
    2dfc:	08 0f       	add	r16, r24
    2dfe:	19 1f       	adc	r17, r25
    2e00:	40 e0       	ldi	r20, 0x00	; 0
    2e02:	60 e1       	ldi	r22, 0x10	; 16
    2e04:	ce 01       	movw	r24, r28
    2e06:	1d d4       	rcall	.+2106   	; 0x3642 <Si114xWriteToRegister>
    2e08:	08 0f       	add	r16, r24
    2e0a:	19 1f       	adc	r17, r25
    2e0c:	47 e7       	ldi	r20, 0x77	; 119
    2e0e:	61 e0       	ldi	r22, 0x01	; 1
    2e10:	ce 01       	movw	r24, r28
    2e12:	aa de       	rcall	.-684    	; 0x2b68 <Si114xParamSet>
    2e14:	08 0f       	add	r16, r24
    2e16:	19 1f       	adc	r17, r25
    2e18:	41 e0       	ldi	r20, 0x01	; 1
    2e1a:	63 e0       	ldi	r22, 0x03	; 3
    2e1c:	ce 01       	movw	r24, r28
    2e1e:	11 d4       	rcall	.+2082   	; 0x3642 <Si114xWriteToRegister>
    2e20:	08 0f       	add	r16, r24
    2e22:	19 1f       	adc	r17, r25
    2e24:	4d e1       	ldi	r20, 0x1D	; 29
    2e26:	64 e0       	ldi	r22, 0x04	; 4
    2e28:	ce 01       	movw	r24, r28
    2e2a:	0b d4       	rcall	.+2070   	; 0x3642 <Si114xWriteToRegister>
    2e2c:	08 0f       	add	r16, r24
    2e2e:	19 1f       	adc	r17, r25
    2e30:	40 e0       	ldi	r20, 0x00	; 0
    2e32:	65 e0       	ldi	r22, 0x05	; 5
    2e34:	ce 01       	movw	r24, r28
    2e36:	05 d4       	rcall	.+2058   	; 0x3642 <Si114xWriteToRegister>
    2e38:	08 0f       	add	r16, r24
    2e3a:	19 1f       	adc	r17, r25
    2e3c:	40 e0       	ldi	r20, 0x00	; 0
    2e3e:	66 e0       	ldi	r22, 0x06	; 6
    2e40:	ce 01       	movw	r24, r28
    2e42:	ff d3       	rcall	.+2046   	; 0x3642 <Si114xWriteToRegister>
    2e44:	08 0f       	add	r16, r24
    2e46:	19 1f       	adc	r17, r25
    2e48:	43 e0       	ldi	r20, 0x03	; 3
    2e4a:	67 e0       	ldi	r22, 0x07	; 7
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	8c de       	rcall	.-744    	; 0x2b68 <Si114xParamSet>
    2e50:	08 0f       	add	r16, r24
    2e52:	19 1f       	adc	r17, r25
    2e54:	43 e0       	ldi	r20, 0x03	; 3
    2e56:	68 e0       	ldi	r22, 0x08	; 8
    2e58:	ce 01       	movw	r24, r28
    2e5a:	86 de       	rcall	.-756    	; 0x2b68 <Si114xParamSet>
    2e5c:	08 0f       	add	r16, r24
    2e5e:	19 1f       	adc	r17, r25
    2e60:	43 e0       	ldi	r20, 0x03	; 3
    2e62:	69 e0       	ldi	r22, 0x09	; 9
    2e64:	ce 01       	movw	r24, r28
    2e66:	80 de       	rcall	.-768    	; 0x2b68 <Si114xParamSet>
    2e68:	08 0f       	add	r16, r24
    2e6a:	19 1f       	adc	r17, r25
    2e6c:	43 e0       	ldi	r20, 0x03	; 3
    2e6e:	6e e0       	ldi	r22, 0x0E	; 14
    2e70:	ce 01       	movw	r24, r28
    2e72:	7a de       	rcall	.-780    	; 0x2b68 <Si114xParamSet>
    2e74:	08 0f       	add	r16, r24
    2e76:	19 1f       	adc	r17, r25
    2e78:	40 e0       	ldi	r20, 0x00	; 0
    2e7a:	6b e0       	ldi	r22, 0x0B	; 11
    2e7c:	ce 01       	movw	r24, r28
    2e7e:	74 de       	rcall	.-792    	; 0x2b68 <Si114xParamSet>
    2e80:	08 0f       	add	r16, r24
    2e82:	19 1f       	adc	r17, r25
    2e84:	40 e0       	ldi	r20, 0x00	; 0
    2e86:	6e e1       	ldi	r22, 0x1E	; 30
    2e88:	ce 01       	movw	r24, r28
    2e8a:	6e de       	rcall	.-804    	; 0x2b68 <Si114xParamSet>
    2e8c:	08 0f       	add	r16, r24
    2e8e:	19 1f       	adc	r17, r25
    2e90:	40 e0       	ldi	r20, 0x00	; 0
    2e92:	61 e1       	ldi	r22, 0x11	; 17
    2e94:	ce 01       	movw	r24, r28
    2e96:	68 de       	rcall	.-816    	; 0x2b68 <Si114xParamSet>
    2e98:	08 0f       	add	r16, r24
    2e9a:	19 1f       	adc	r17, r25
    2e9c:	41 e2       	ldi	r20, 0x21	; 33
    2e9e:	62 e0       	ldi	r22, 0x02	; 2
    2ea0:	ce 01       	movw	r24, r28
    2ea2:	62 de       	rcall	.-828    	; 0x2b68 <Si114xParamSet>
    2ea4:	08 0f       	add	r16, r24
    2ea6:	19 1f       	adc	r17, r25
    2ea8:	44 e0       	ldi	r20, 0x04	; 4
    2eaa:	63 e0       	ldi	r22, 0x03	; 3
    2eac:	ce 01       	movw	r24, r28
    2eae:	5c de       	rcall	.-840    	; 0x2b68 <Si114xParamSet>
    2eb0:	08 0f       	add	r16, r24
    2eb2:	19 1f       	adc	r17, r25
    2eb4:	40 e7       	ldi	r20, 0x70	; 112
    2eb6:	6a e0       	ldi	r22, 0x0A	; 10
    2eb8:	ce 01       	movw	r24, r28
    2eba:	56 de       	rcall	.-852    	; 0x2b68 <Si114xParamSet>
    2ebc:	08 0f       	add	r16, r24
    2ebe:	19 1f       	adc	r17, r25
    2ec0:	40 e7       	ldi	r20, 0x70	; 112
    2ec2:	6d e1       	ldi	r22, 0x1D	; 29
    2ec4:	ce 01       	movw	r24, r28
    2ec6:	50 de       	rcall	.-864    	; 0x2b68 <Si114xParamSet>
    2ec8:	08 0f       	add	r16, r24
    2eca:	19 1f       	adc	r17, r25
    2ecc:	40 e7       	ldi	r20, 0x70	; 112
    2ece:	60 e1       	ldi	r22, 0x10	; 16
    2ed0:	ce 01       	movw	r24, r28
    2ed2:	4a de       	rcall	.-876    	; 0x2b68 <Si114xParamSet>
    2ed4:	08 0f       	add	r16, r24
    2ed6:	19 1f       	adc	r17, r25
    2ed8:	44 e0       	ldi	r20, 0x04	; 4
    2eda:	6c e0       	ldi	r22, 0x0C	; 12
    2edc:	ce 01       	movw	r24, r28
    2ede:	44 de       	rcall	.-888    	; 0x2b68 <Si114xParamSet>
    2ee0:	08 0f       	add	r16, r24
    2ee2:	19 1f       	adc	r17, r25
    2ee4:	40 e2       	ldi	r20, 0x20	; 32
    2ee6:	6f e1       	ldi	r22, 0x1F	; 31
    2ee8:	ce 01       	movw	r24, r28
    2eea:	3e de       	rcall	.-900    	; 0x2b68 <Si114xParamSet>
    2eec:	08 0f       	add	r16, r24
    2eee:	19 1f       	adc	r17, r25
    2ef0:	40 e2       	ldi	r20, 0x20	; 32
    2ef2:	62 e1       	ldi	r22, 0x12	; 18
    2ef4:	ce 01       	movw	r24, r28
    2ef6:	38 de       	rcall	.-912    	; 0x2b68 <Si114xParamSet>
    2ef8:	08 0f       	add	r16, r24
    2efa:	19 1f       	adc	r17, r25
    2efc:	44 e9       	ldi	r20, 0x94	; 148
    2efe:	68 e0       	ldi	r22, 0x08	; 8
    2f00:	ce 01       	movw	r24, r28
    2f02:	9f d3       	rcall	.+1854   	; 0x3642 <Si114xWriteToRegister>
    2f04:	08 0f       	add	r16, r24
    2f06:	19 1f       	adc	r17, r25
    2f08:	48 e0       	ldi	r20, 0x08	; 8
    2f0a:	6a e0       	ldi	r22, 0x0A	; 10
    2f0c:	ce 01       	movw	r24, r28
    2f0e:	99 d3       	rcall	.+1842   	; 0x3642 <Si114xWriteToRegister>
    2f10:	08 0f       	add	r16, r24
    2f12:	19 1f       	adc	r17, r25
    2f14:	48 e0       	ldi	r20, 0x08	; 8
    2f16:	69 e0       	ldi	r22, 0x09	; 9
    2f18:	ce 01       	movw	r24, r28
    2f1a:	93 d3       	rcall	.+1830   	; 0x3642 <Si114xWriteToRegister>
    2f1c:	08 0f       	add	r16, r24
    2f1e:	19 1f       	adc	r17, r25
    2f20:	ce 01       	movw	r24, r28
    2f22:	1f de       	rcall	.-962    	; 0x2b62 <Si114xPsAlsAuto>
    2f24:	80 0f       	add	r24, r16
    2f26:	91 1f       	adc	r25, r17
    2f28:	df 91       	pop	r29
    2f2a:	cf 91       	pop	r28
    2f2c:	1f 91       	pop	r17
    2f2e:	0f 91       	pop	r16
    2f30:	08 95       	ret

00002f32 <si114x_setup>:
    2f32:	e0 e4       	ldi	r30, 0x40	; 64
    2f34:	f8 e0       	ldi	r31, 0x08	; 8
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	80 83       	st	Z, r24
    2f3a:	90 e8       	ldi	r25, 0x80	; 128
    2f3c:	96 a3       	std	Z+38, r25	; 0x26
    2f3e:	9c e0       	ldi	r25, 0x0C	; 12
    2f40:	97 a3       	std	Z+39, r25	; 0x27
    2f42:	86 83       	std	Z+6, r24	; 0x06
    2f44:	8a e5       	ldi	r24, 0x5A	; 90
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	6c de       	rcall	.-808    	; 0x2c22 <si114x_reset>
    2f4a:	2f ef       	ldi	r18, 0xFF	; 255
    2f4c:	81 ee       	ldi	r24, 0xE1	; 225
    2f4e:	94 e0       	ldi	r25, 0x04	; 4
    2f50:	21 50       	subi	r18, 0x01	; 1
    2f52:	80 40       	sbci	r24, 0x00	; 0
    2f54:	90 40       	sbci	r25, 0x00	; 0
    2f56:	e1 f7       	brne	.-8      	; 0x2f50 <si114x_setup+0x1e>
    2f58:	00 c0       	rjmp	.+0      	; 0x2f5a <si114x_setup+0x28>
    2f5a:	00 00       	nop
    2f5c:	8a e5       	ldi	r24, 0x5A	; 90
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	30 cf       	rjmp	.-416    	; 0x2dc2 <si114x_init>
    2f62:	08 95       	ret

00002f64 <si114x_baseline_calibration>:
    2f64:	ef 92       	push	r14
    2f66:	ff 92       	push	r15
    2f68:	0f 93       	push	r16
    2f6a:	1f 93       	push	r17
    2f6c:	cf 93       	push	r28
    2f6e:	df 93       	push	r29
    2f70:	ec 01       	movw	r28, r24
    2f72:	df df       	rcall	.-66     	; 0x2f32 <si114x_setup>
    2f74:	80 e8       	ldi	r24, 0x80	; 128
    2f76:	80 93 08 20 	sts	0x2008, r24
    2f7a:	60 e0       	ldi	r22, 0x00	; 0
    2f7c:	8b e1       	ldi	r24, 0x1B	; 27
    2f7e:	94 e2       	ldi	r25, 0x24	; 36
    2f80:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
    2f84:	0f 2e       	mov	r0, r31
    2f86:	f0 e4       	ldi	r31, 0x40	; 64
    2f88:	ef 2e       	mov	r14, r31
    2f8a:	f4 e2       	ldi	r31, 0x24	; 36
    2f8c:	ff 2e       	mov	r15, r31
    2f8e:	f0 2d       	mov	r31, r0
    2f90:	01 e0       	ldi	r16, 0x01	; 1
    2f92:	25 e0       	ldi	r18, 0x05	; 5
    2f94:	4a e0       	ldi	r20, 0x0A	; 10
    2f96:	6a e0       	ldi	r22, 0x0A	; 10
    2f98:	8a e0       	ldi	r24, 0x0A	; 10
    2f9a:	0e 94 9f 21 	call	0x433e	; 0x433e <display_draw_line>
    2f9e:	2a e0       	ldi	r18, 0x0A	; 10
    2fa0:	4a e0       	ldi	r20, 0x0A	; 10
    2fa2:	6a e0       	ldi	r22, 0x0A	; 10
    2fa4:	85 e0       	ldi	r24, 0x05	; 5
    2fa6:	0e 94 9f 21 	call	0x433e	; 0x433e <display_draw_line>
    2faa:	2a e0       	ldi	r18, 0x0A	; 10
    2fac:	45 e0       	ldi	r20, 0x05	; 5
    2fae:	65 e0       	ldi	r22, 0x05	; 5
    2fb0:	85 e0       	ldi	r24, 0x05	; 5
    2fb2:	0e 94 9f 21 	call	0x433e	; 0x433e <display_draw_line>
    2fb6:	25 e0       	ldi	r18, 0x05	; 5
    2fb8:	4a e0       	ldi	r20, 0x0A	; 10
    2fba:	65 e0       	ldi	r22, 0x05	; 5
    2fbc:	85 e0       	ldi	r24, 0x05	; 5
    2fbe:	0e 94 9f 21 	call	0x433e	; 0x433e <display_draw_line>
    2fc2:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    2fc6:	ce 01       	movw	r24, r28
    2fc8:	53 dd       	rcall	.-1370   	; 0x2a70 <si114x_get_data>
    2fca:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fcc:	8f 93       	push	r24
    2fce:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fd0:	8f 93       	push	r24
    2fd2:	ff 92       	push	r15
    2fd4:	ef 92       	push	r14
    2fd6:	0e 94 36 58 	call	0xb06c	; 0xb06c <printf>
    2fda:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fdc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	0f 90       	pop	r0
    2fe6:	81 34       	cpi	r24, 0x41	; 65
    2fe8:	26 e0       	ldi	r18, 0x06	; 6
    2fea:	92 07       	cpc	r25, r18
    2fec:	88 f6       	brcc	.-94     	; 0x2f90 <si114x_baseline_calibration+0x2c>
    2fee:	80 93 d4 2a 	sts	0x2AD4, r24
    2ff2:	90 93 d5 2a 	sts	0x2AD5, r25
    2ff6:	8f ef       	ldi	r24, 0xFF	; 255
    2ff8:	97 ea       	ldi	r25, 0xA7	; 167
    2ffa:	21 e6       	ldi	r18, 0x61	; 97
    2ffc:	81 50       	subi	r24, 0x01	; 1
    2ffe:	90 40       	sbci	r25, 0x00	; 0
    3000:	20 40       	sbci	r18, 0x00	; 0
    3002:	e1 f7       	brne	.-8      	; 0x2ffc <si114x_baseline_calibration+0x98>
    3004:	00 c0       	rjmp	.+0      	; 0x3006 <__stack+0x7>
    3006:	00 00       	nop
    3008:	00 e8       	ldi	r16, 0x80	; 128
    300a:	10 e0       	ldi	r17, 0x00	; 0
    300c:	80 91 25 2a 	lds	r24, 0x2A25
    3010:	90 91 26 2a 	lds	r25, 0x2A26
    3014:	8a 83       	std	Y+2, r24	; 0x02
    3016:	9b 83       	std	Y+3, r25	; 0x03
    3018:	ce 01       	movw	r24, r28
    301a:	2a dd       	rcall	.-1452   	; 0x2a70 <si114x_get_data>
    301c:	be 01       	movw	r22, r28
    301e:	8a e5       	ldi	r24, 0x5A	; 90
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	17 d2       	rcall	.+1070   	; 0x3452 <si114x_process_samples>
    3024:	01 50       	subi	r16, 0x01	; 1
    3026:	11 09       	sbc	r17, r1
    3028:	01 15       	cp	r16, r1
    302a:	11 05       	cpc	r17, r1
    302c:	79 f7       	brne	.-34     	; 0x300c <__stack+0xd>
    302e:	df 91       	pop	r29
    3030:	cf 91       	pop	r28
    3032:	1f 91       	pop	r17
    3034:	0f 91       	pop	r16
    3036:	ff 90       	pop	r15
    3038:	ef 90       	pop	r14
    303a:	08 95       	ret

0000303c <__vector_20>:

ISR(TCC1_OVF_vect) {
    303c:	1f 92       	push	r1
    303e:	0f 92       	push	r0
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	0f 92       	push	r0
    3044:	11 24       	eor	r1, r1
    3046:	8f 93       	push	r24
    3048:	9f 93       	push	r25
	counter++;
    304a:	80 91 25 2a 	lds	r24, 0x2A25
    304e:	90 91 26 2a 	lds	r25, 0x2A26
    3052:	01 96       	adiw	r24, 0x01	; 1
    3054:	80 93 25 2a 	sts	0x2A25, r24
    3058:	90 93 26 2a 	sts	0x2A26, r25
}
    305c:	9f 91       	pop	r25
    305e:	8f 91       	pop	r24
    3060:	0f 90       	pop	r0
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	0f 90       	pop	r0
    3066:	1f 90       	pop	r1
    3068:	18 95       	reti

0000306a <isIRStable>:
        }
    }
}

char isIRStable( SI114X_IRQ_SAMPLE *samples)
{
    306a:	cf 92       	push	r12
    306c:	df 92       	push	r13
    306e:	ef 92       	push	r14
    3070:	ff 92       	push	r15
    3072:	0f 93       	push	r16
    3074:	1f 93       	push	r17
                                        //
    u32 xdata IR = (u32) samples->ir; // Make a copy of ALS IR Reading
    
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 
    3076:	40 91 36 2a 	lds	r20, 0x2A36
    307a:	50 91 37 2a 	lds	r21, 0x2A37
    307e:	60 91 38 2a 	lds	r22, 0x2A38
    3082:	70 91 39 2a 	lds	r23, 0x2A39
    3086:	45 2b       	or	r20, r21
    3088:	46 2b       	or	r20, r22
    308a:	47 2b       	or	r20, r23
    308c:	71 f4       	brne	.+28     	; 0x30aa <isIRStable+0x40>
    308e:	fc 01       	movw	r30, r24
    3090:	40 85       	ldd	r20, Z+8	; 0x08
    3092:	51 85       	ldd	r21, Z+9	; 0x09
    3094:	60 e0       	ldi	r22, 0x00	; 0
    3096:	70 e0       	ldi	r23, 0x00	; 0
    3098:	40 93 36 2a 	sts	0x2A36, r20
    309c:	50 93 37 2a 	sts	0x2A37, r21
    30a0:	60 93 38 2a 	sts	0x2A38, r22
    30a4:	70 93 39 2a 	sts	0x2A39, r23
    30a8:	07 c0       	rjmp	.+14     	; 0x30b8 <isIRStable+0x4e>

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    30aa:	fc 01       	movw	r30, r24
    30ac:	20 85       	ldd	r18, Z+8	; 0x08
    30ae:	31 85       	ldd	r19, Z+9	; 0x09
    30b0:	21 38       	cpi	r18, 0x81	; 129
    30b2:	3b 4b       	sbci	r19, 0xBB	; 187
    30b4:	08 f0       	brcs	.+2      	; 0x30b8 <isIRStable+0x4e>
    30b6:	53 c0       	rjmp	.+166    	; 0x315e <isIRStable+0xf4>

    if( samples->ir < (IRlast + IRlast/2) && samples->ir > (IRlast - IRlast/2))
    30b8:	fc 01       	movw	r30, r24
    30ba:	40 85       	ldd	r20, Z+8	; 0x08
    30bc:	51 85       	ldd	r21, Z+9	; 0x09
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	70 e0       	ldi	r23, 0x00	; 0
    30c2:	80 91 36 2a 	lds	r24, 0x2A36
    30c6:	90 91 37 2a 	lds	r25, 0x2A37
    30ca:	a0 91 38 2a 	lds	r26, 0x2A38
    30ce:	b0 91 39 2a 	lds	r27, 0x2A39
    30d2:	8c 01       	movw	r16, r24
    30d4:	9d 01       	movw	r18, r26
    30d6:	36 95       	lsr	r19
    30d8:	27 95       	ror	r18
    30da:	17 95       	ror	r17
    30dc:	07 95       	ror	r16
    30de:	68 01       	movw	r12, r16
    30e0:	79 01       	movw	r14, r18
    30e2:	c8 0e       	add	r12, r24
    30e4:	d9 1e       	adc	r13, r25
    30e6:	ea 1e       	adc	r14, r26
    30e8:	fb 1e       	adc	r15, r27
    30ea:	4c 15       	cp	r20, r12
    30ec:	5d 05       	cpc	r21, r13
    30ee:	6e 05       	cpc	r22, r14
    30f0:	7f 05       	cpc	r23, r15
    30f2:	58 f5       	brcc	.+86     	; 0x314a <isIRStable+0xe0>
    30f4:	6c 01       	movw	r12, r24
    30f6:	7d 01       	movw	r14, r26
    30f8:	c0 1a       	sub	r12, r16
    30fa:	d1 0a       	sbc	r13, r17
    30fc:	e2 0a       	sbc	r14, r18
    30fe:	f3 0a       	sbc	r15, r19
    3100:	c4 16       	cp	r12, r20
    3102:	d5 06       	cpc	r13, r21
    3104:	e6 06       	cpc	r14, r22
    3106:	f7 06       	cpc	r15, r23
    3108:	00 f5       	brcc	.+64     	; 0x314a <isIRStable+0xe0>
    {
        // If IR is within 3 dB, declare it stable
        // and perform some averaging
        IRlast = (samples->ir + (IRlast*3)) / 4;
    310a:	8c 01       	movw	r16, r24
    310c:	9d 01       	movw	r18, r26
    310e:	00 0f       	add	r16, r16
    3110:	11 1f       	adc	r17, r17
    3112:	22 1f       	adc	r18, r18
    3114:	33 1f       	adc	r19, r19
    3116:	80 0f       	add	r24, r16
    3118:	91 1f       	adc	r25, r17
    311a:	a2 1f       	adc	r26, r18
    311c:	b3 1f       	adc	r27, r19
    311e:	48 0f       	add	r20, r24
    3120:	59 1f       	adc	r21, r25
    3122:	6a 1f       	adc	r22, r26
    3124:	7b 1f       	adc	r23, r27
    3126:	76 95       	lsr	r23
    3128:	67 95       	ror	r22
    312a:	57 95       	ror	r21
    312c:	47 95       	ror	r20
    312e:	76 95       	lsr	r23
    3130:	67 95       	ror	r22
    3132:	57 95       	ror	r21
    3134:	47 95       	ror	r20
    3136:	40 93 36 2a 	sts	0x2A36, r20
    313a:	50 93 37 2a 	sts	0x2A37, r21
    313e:	60 93 38 2a 	sts	0x2A38, r22
    3142:	70 93 39 2a 	sts	0x2A39, r23
        return 1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	0b c0       	rjmp	.+22     	; 0x3160 <isIRStable+0xf6>
    }
    else
    {
        // Otherwise, return false and update
        // new IRlast value for next time
        IRlast = samples->ir;
    314a:	40 93 36 2a 	sts	0x2A36, r20
    314e:	50 93 37 2a 	sts	0x2A37, r21
    3152:	60 93 38 2a 	sts	0x2A38, r22
    3156:	70 93 39 2a 	sts	0x2A39, r23
        return 0;
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	01 c0       	rjmp	.+2      	; 0x3160 <isIRStable+0xf6>
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    315e:	80 e0       	ldi	r24, 0x00	; 0
        // new IRlast value for next time
        IRlast = samples->ir;
        return 0;
    }
    return 0;
}
    3160:	1f 91       	pop	r17
    3162:	0f 91       	pop	r16
    3164:	ff 90       	pop	r15
    3166:	ef 90       	pop	r14
    3168:	df 90       	pop	r13
    316a:	cf 90       	pop	r12
    316c:	08 95       	ret

0000316e <IRCompensation>:
//             use { 11, 33, 33 }
//          Sm PD, PSRANGE = 1 
//             use { 23, 64, 56 }
////////////////////////////////////////////////////////////////////////////////
void IRCompensation(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u8 ircorrection[])
{
    316e:	0f 93       	push	r16
    3170:	1f 93       	push	r17
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
    3176:	eb 01       	movw	r28, r22
    // Calculate correction factor based on the ALS IR + PS reading 
    // subtracting out the 256 count offset contained in both measurements
    // Full equation comes out to:
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    3178:	81 30       	cpi	r24, 0x01	; 1
    317a:	29 f1       	breq	.+74     	; 0x31c6 <IRCompensation+0x58>
    317c:	20 f0       	brcs	.+8      	; 0x3186 <IRCompensation+0x18>
    317e:	82 30       	cpi	r24, 0x02	; 2
    3180:	09 f4       	brne	.+2      	; 0x3184 <IRCompensation+0x16>
    3182:	41 c0       	rjmp	.+130    	; 0x3206 <IRCompensation+0x98>
    3184:	5f c0       	rjmp	.+190    	; 0x3244 <IRCompensation+0xd6>
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    3186:	0a 85       	ldd	r16, Y+10	; 0x0a
    3188:	1b 85       	ldd	r17, Y+11	; 0x0b
    318a:	fa 01       	movw	r30, r20
    318c:	a0 81       	ld	r26, Z
    318e:	88 85       	ldd	r24, Y+8	; 0x08
    3190:	99 85       	ldd	r25, Y+9	; 0x09
    3192:	a8 01       	movw	r20, r16
    3194:	60 e0       	ldi	r22, 0x00	; 0
    3196:	70 e0       	ldi	r23, 0x00	; 0
    3198:	48 0f       	add	r20, r24
    319a:	59 1f       	adc	r21, r25
    319c:	61 1d       	adc	r22, r1
    319e:	71 1d       	adc	r23, r1
    31a0:	9a 01       	movw	r18, r20
    31a2:	ab 01       	movw	r20, r22
    31a4:	32 50       	subi	r19, 0x02	; 2
    31a6:	41 09       	sbc	r20, r1
    31a8:	51 09       	sbc	r21, r1
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	0e 94 56 56 	call	0xacac	; 0xacac <__muluhisi3>
            Correction = Correction/10000;
    31b0:	20 e1       	ldi	r18, 0x10	; 16
    31b2:	37 e2       	ldi	r19, 0x27	; 39
    31b4:	40 e0       	ldi	r20, 0x00	; 0
    31b6:	50 e0       	ldi	r21, 0x00	; 0
    31b8:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>
            samples->ps1 = samples->ps1 + Correction;    
    31bc:	20 0f       	add	r18, r16
    31be:	31 1f       	adc	r19, r17
    31c0:	2a 87       	std	Y+10, r18	; 0x0a
    31c2:	3b 87       	std	Y+11, r19	; 0x0b
            break;
    31c4:	3f c0       	rjmp	.+126    	; 0x3244 <IRCompensation+0xd6>
        case 1:
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
    31c6:	0c 85       	ldd	r16, Y+12	; 0x0c
    31c8:	1d 85       	ldd	r17, Y+13	; 0x0d
    31ca:	fa 01       	movw	r30, r20
    31cc:	a1 81       	ldd	r26, Z+1	; 0x01
    31ce:	88 85       	ldd	r24, Y+8	; 0x08
    31d0:	99 85       	ldd	r25, Y+9	; 0x09
    31d2:	a8 01       	movw	r20, r16
    31d4:	60 e0       	ldi	r22, 0x00	; 0
    31d6:	70 e0       	ldi	r23, 0x00	; 0
    31d8:	48 0f       	add	r20, r24
    31da:	59 1f       	adc	r21, r25
    31dc:	61 1d       	adc	r22, r1
    31de:	71 1d       	adc	r23, r1
    31e0:	9a 01       	movw	r18, r20
    31e2:	ab 01       	movw	r20, r22
    31e4:	32 50       	subi	r19, 0x02	; 2
    31e6:	41 09       	sbc	r20, r1
    31e8:	51 09       	sbc	r21, r1
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	0e 94 56 56 	call	0xacac	; 0xacac <__muluhisi3>
            Correction = Correction/10000;
    31f0:	20 e1       	ldi	r18, 0x10	; 16
    31f2:	37 e2       	ldi	r19, 0x27	; 39
    31f4:	40 e0       	ldi	r20, 0x00	; 0
    31f6:	50 e0       	ldi	r21, 0x00	; 0
    31f8:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>
            samples->ps2 = samples->ps2 + Correction;            
    31fc:	20 0f       	add	r18, r16
    31fe:	31 1f       	adc	r19, r17
    3200:	2c 87       	std	Y+12, r18	; 0x0c
    3202:	3d 87       	std	Y+13, r19	; 0x0d
            break;
    3204:	1f c0       	rjmp	.+62     	; 0x3244 <IRCompensation+0xd6>
		case 2:
			Correction = ((u32)samples->ir + (u32)(samples->ps3) - 512) * (u32) ircorrection[proxChannel];
    3206:	0e 85       	ldd	r16, Y+14	; 0x0e
    3208:	1f 85       	ldd	r17, Y+15	; 0x0f
    320a:	fa 01       	movw	r30, r20
    320c:	a2 81       	ldd	r26, Z+2	; 0x02
    320e:	88 85       	ldd	r24, Y+8	; 0x08
    3210:	99 85       	ldd	r25, Y+9	; 0x09
    3212:	a8 01       	movw	r20, r16
    3214:	60 e0       	ldi	r22, 0x00	; 0
    3216:	70 e0       	ldi	r23, 0x00	; 0
    3218:	48 0f       	add	r20, r24
    321a:	59 1f       	adc	r21, r25
    321c:	61 1d       	adc	r22, r1
    321e:	71 1d       	adc	r23, r1
    3220:	9a 01       	movw	r18, r20
    3222:	ab 01       	movw	r20, r22
    3224:	32 50       	subi	r19, 0x02	; 2
    3226:	41 09       	sbc	r20, r1
    3228:	51 09       	sbc	r21, r1
    322a:	b0 e0       	ldi	r27, 0x00	; 0
    322c:	0e 94 56 56 	call	0xacac	; 0xacac <__muluhisi3>
			Correction = Correction/10000;
    3230:	20 e1       	ldi	r18, 0x10	; 16
    3232:	37 e2       	ldi	r19, 0x27	; 39
    3234:	40 e0       	ldi	r20, 0x00	; 0
    3236:	50 e0       	ldi	r21, 0x00	; 0
    3238:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>
			samples->ps3 = samples->ps3 + Correction;
    323c:	20 0f       	add	r18, r16
    323e:	31 1f       	adc	r19, r17
    3240:	2e 87       	std	Y+14, r18	; 0x0e
    3242:	3f 87       	std	Y+15, r19	; 0x0f
			break;
        default:
            break;
    }
}
    3244:	df 91       	pop	r29
    3246:	cf 91       	pop	r28
    3248:	1f 91       	pop	r17
    324a:	0f 91       	pop	r16
    324c:	08 95       	ret

0000324e <calcBaseline>:
//          50  = Lg PD, PSRANGE=0, 180 mA 
//          10  = Lg PD, PSRANGE=1, 360 mA 
//          4  = Sm PD, PSRANGE=1, 360 mA 
////////////////////////////////////////////////////////////////////////////////
void calcBaseline(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u16 noise_margin)
{
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29

    static u16 xdata dynamic_baseline[3] = {0,0,0};

    u16 xdata *pPS;

    switch(proxChannel)
    3256:	81 30       	cpi	r24, 0x01	; 1
    3258:	39 f0       	breq	.+14     	; 0x3268 <calcBaseline+0x1a>
    325a:	18 f0       	brcs	.+6      	; 0x3262 <calcBaseline+0x14>
    325c:	82 30       	cpi	r24, 0x02	; 2
    325e:	39 f0       	breq	.+14     	; 0x326e <calcBaseline+0x20>
    3260:	09 c0       	rjmp	.+18     	; 0x3274 <calcBaseline+0x26>
    {
        case 0:
            pPS = &samples->ps1;
    3262:	fb 01       	movw	r30, r22
    3264:	3a 96       	adiw	r30, 0x0a	; 10
            break;
    3266:	25 c0       	rjmp	.+74     	; 0x32b2 <calcBaseline+0x64>
        case 1:
            pPS = &samples->ps2;
    3268:	fb 01       	movw	r30, r22
    326a:	3c 96       	adiw	r30, 0x0c	; 12
            break;
    326c:	22 c0       	rjmp	.+68     	; 0x32b2 <calcBaseline+0x64>
        case 2:
            pPS = &samples->ps3;
    326e:	fb 01       	movw	r30, r22
    3270:	3e 96       	adiw	r30, 0x0e	; 14
            break;
    3272:	1f c0       	rjmp	.+62     	; 0x32b2 <calcBaseline+0x64>
        default:
            // Invalid Prox Channel. Reset all static variables 
            // to initial values
            average    = 0;
            dynamic_baseline[0] = 0;
    3274:	10 92 30 2a 	sts	0x2A30, r1
    3278:	10 92 31 2a 	sts	0x2A31, r1
            dynamic_baseline[1] = 0;
    327c:	10 92 32 2a 	sts	0x2A32, r1
    3280:	10 92 33 2a 	sts	0x2A33, r1
			dynamic_baseline[2] = 0;
    3284:	10 92 34 2a 	sts	0x2A34, r1
    3288:	10 92 35 2a 	sts	0x2A35, r1
            rollingMax[0] = 0;
    328c:	10 92 2a 2a 	sts	0x2A2A, r1
    3290:	10 92 2b 2a 	sts	0x2A2B, r1
            rollingMax[1] = 0;
    3294:	10 92 2c 2a 	sts	0x2A2C, r1
    3298:	10 92 2d 2a 	sts	0x2A2D, r1
			rollingMax[2] = 0;
    329c:	10 92 2e 2a 	sts	0x2A2E, r1
    32a0:	10 92 2f 2a 	sts	0x2A2F, r1
            Maxcount[0]   = 0;
    32a4:	10 92 27 2a 	sts	0x2A27, r1
            Maxcount[1]   = 0;
    32a8:	10 92 28 2a 	sts	0x2A28, r1
			Maxcount[2]   = 0;
    32ac:	10 92 29 2a 	sts	0x2A29, r1
            return;
    32b0:	cb c0       	rjmp	.+406    	; 0x3448 <calcBaseline+0x1fa>
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	dc 01       	movw	r26, r24
    32b6:	aa 0f       	add	r26, r26
    32b8:	bb 1f       	adc	r27, r27
    32ba:	a0 5d       	subi	r26, 0xD0	; 208
    32bc:	b5 4d       	sbci	r27, 0xD5	; 213
    32be:	2d 91       	ld	r18, X+
    32c0:	3c 91       	ld	r19, X
    32c2:	23 2b       	or	r18, r19
    32c4:	d9 f4       	brne	.+54     	; 0x32fc <calcBaseline+0xae>
    32c6:	60 81       	ld	r22, Z
    32c8:	71 81       	ldd	r23, Z+1	; 0x01
    32ca:	dc 01       	movw	r26, r24
    32cc:	aa 0f       	add	r26, r26
    32ce:	bb 1f       	adc	r27, r27
    32d0:	a6 5c       	subi	r26, 0xC6	; 198
    32d2:	b5 4d       	sbci	r27, 0xD5	; 213
    32d4:	2d 91       	ld	r18, X+
    32d6:	3c 91       	ld	r19, X
    32d8:	62 17       	cp	r22, r18
    32da:	73 07       	cpc	r23, r19
    32dc:	40 f4       	brcc	.+16     	; 0x32ee <calcBaseline+0xa0>
    {
       dynamic_baseline[proxChannel] = *pPS;
    32de:	dc 01       	movw	r26, r24
    32e0:	aa 0f       	add	r26, r26
    32e2:	bb 1f       	adc	r27, r27
    32e4:	a0 5d       	subi	r26, 0xD0	; 208
    32e6:	b5 4d       	sbci	r27, 0xD5	; 213
    32e8:	6d 93       	st	X+, r22
    32ea:	7c 93       	st	X, r23
    32ec:	07 c0       	rjmp	.+14     	; 0x32fc <calcBaseline+0xae>
    } else if ( dynamic_baseline[proxChannel] == 0)
    {
       dynamic_baseline[proxChannel] = maxLeakage[proxChannel];
    32ee:	dc 01       	movw	r26, r24
    32f0:	aa 0f       	add	r26, r26
    32f2:	bb 1f       	adc	r27, r27
    32f4:	a0 5d       	subi	r26, 0xD0	; 208
    32f6:	b5 4d       	sbci	r27, 0xD5	; 213
    32f8:	2d 93       	st	X+, r18
    32fa:	3c 93       	st	X, r19
    } 

    // Only process samples which are below the maxLeakage values, anything 
    // higher is a signal created by an object in front of the system which 
    // should not be baselined
    if ( *pPS < maxLeakage[proxChannel] )
    32fc:	60 81       	ld	r22, Z
    32fe:	71 81       	ldd	r23, Z+1	; 0x01
    3300:	fc 01       	movw	r30, r24
    3302:	ee 0f       	add	r30, r30
    3304:	ff 1f       	adc	r31, r31
    3306:	e6 5c       	subi	r30, 0xC6	; 198
    3308:	f5 4d       	sbci	r31, 0xD5	; 213
    330a:	20 81       	ld	r18, Z
    330c:	31 81       	ldd	r19, Z+1	; 0x01
    330e:	62 17       	cp	r22, r18
    3310:	73 07       	cpc	r23, r19
    3312:	08 f0       	brcs	.+2      	; 0x3316 <calcBaseline+0xc8>
    3314:	77 c0       	rjmp	.+238    	; 0x3404 <calcBaseline+0x1b6>
    {
        average = dynamic_baseline[proxChannel]*7;
    3316:	fc 01       	movw	r30, r24
    3318:	ee 0f       	add	r30, r30
    331a:	ff 1f       	adc	r31, r31
    331c:	e0 5d       	subi	r30, 0xD0	; 208
    331e:	f5 4d       	sbci	r31, 0xD5	; 213
    3320:	01 90       	ld	r0, Z+
    3322:	f0 81       	ld	r31, Z
    3324:	e0 2d       	mov	r30, r0
    3326:	df 01       	movw	r26, r30
    3328:	aa 0f       	add	r26, r26
    332a:	bb 1f       	adc	r27, r27
    332c:	aa 0f       	add	r26, r26
    332e:	bb 1f       	adc	r27, r27
    3330:	aa 0f       	add	r26, r26
    3332:	bb 1f       	adc	r27, r27
    3334:	ae 1b       	sub	r26, r30
    3336:	bf 0b       	sbc	r27, r31
        average = average + (u32)(*pPS);
    3338:	8b 01       	movw	r16, r22
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	0a 0f       	add	r16, r26
    3340:	1b 1f       	adc	r17, r27
    3342:	21 1d       	adc	r18, r1
    3344:	31 1d       	adc	r19, r1
        average = average/8;
    3346:	68 94       	set
    3348:	12 f8       	bld	r1, 2
    334a:	36 95       	lsr	r19
    334c:	27 95       	ror	r18
    334e:	17 95       	ror	r17
    3350:	07 95       	ror	r16
    3352:	16 94       	lsr	r1
    3354:	d1 f7       	brne	.-12     	; 0x334a <calcBaseline+0xfc>
        // If the new sample has not changed the baseline average by a large 
        // amount, then allow the rollingMax variable to update. If the new 
        // sample did move the baseline average by a lot, then it's possible 
        // it was created by a proximity event. So, do not consider this part 
        // of the rollingMax
        if ( dynamic_baseline[proxChannel] <= (u16)average + (u16)average/64
    3356:	d8 01       	movw	r26, r16
    3358:	00 24       	eor	r0, r0
    335a:	aa 0f       	add	r26, r26
    335c:	bb 1f       	adc	r27, r27
    335e:	00 1c       	adc	r0, r0
    3360:	aa 0f       	add	r26, r26
    3362:	bb 1f       	adc	r27, r27
    3364:	00 1c       	adc	r0, r0
    3366:	ab 2f       	mov	r26, r27
    3368:	b0 2d       	mov	r27, r0
    336a:	ed 01       	movw	r28, r26
    336c:	c0 0f       	add	r28, r16
    336e:	d1 1f       	adc	r29, r17
    3370:	ce 17       	cp	r28, r30
    3372:	df 07       	cpc	r29, r31
    3374:	08 f4       	brcc	.+2      	; 0x3378 <calcBaseline+0x12a>
    3376:	3f c0       	rjmp	.+126    	; 0x33f6 <calcBaseline+0x1a8>
            && dynamic_baseline[proxChannel] >= (u16)average - (u16)average/64)
    3378:	e8 01       	movw	r28, r16
    337a:	ca 1b       	sub	r28, r26
    337c:	db 0b       	sbc	r29, r27
    337e:	ec 17       	cp	r30, r28
    3380:	fd 07       	cpc	r31, r29
    3382:	c8 f1       	brcs	.+114    	; 0x33f6 <calcBaseline+0x1a8>
        {
            if ( rollingMax[proxChannel] == 0 )
    3384:	fc 01       	movw	r30, r24
    3386:	ee 0f       	add	r30, r30
    3388:	ff 1f       	adc	r31, r31
    338a:	e6 5d       	subi	r30, 0xD6	; 214
    338c:	f5 4d       	sbci	r31, 0xD5	; 213
    338e:	01 90       	ld	r0, Z+
    3390:	f0 81       	ld	r31, Z
    3392:	e0 2d       	mov	r30, r0
    3394:	30 97       	sbiw	r30, 0x00	; 0
    3396:	61 f4       	brne	.+24     	; 0x33b0 <calcBaseline+0x162>
            {
                rollingMax[proxChannel] = *pPS;
    3398:	fc 01       	movw	r30, r24
    339a:	ee 0f       	add	r30, r30
    339c:	ff 1f       	adc	r31, r31
    339e:	e6 5d       	subi	r30, 0xD6	; 214
    33a0:	f5 4d       	sbci	r31, 0xD5	; 213
    33a2:	60 83       	st	Z, r22
    33a4:	71 83       	std	Z+1, r23	; 0x01
                Maxcount[proxChannel] = 0;
    33a6:	fc 01       	movw	r30, r24
    33a8:	e9 5d       	subi	r30, 0xD9	; 217
    33aa:	f5 4d       	sbci	r31, 0xD5	; 213
    33ac:	10 82       	st	Z, r1
    33ae:	23 c0       	rjmp	.+70     	; 0x33f6 <calcBaseline+0x1a8>
            } 
            else if ( rollingMax[proxChannel] >= *pPS )
    33b0:	e6 17       	cp	r30, r22
    33b2:	f7 07       	cpc	r31, r23
    33b4:	a8 f0       	brcs	.+42     	; 0x33e0 <calcBaseline+0x192>
            {
                (Maxcount[proxChannel]) += 1;
    33b6:	dc 01       	movw	r26, r24
    33b8:	a9 5d       	subi	r26, 0xD9	; 217
    33ba:	b5 4d       	sbci	r27, 0xD5	; 213
    33bc:	6c 91       	ld	r22, X
    33be:	6f 5f       	subi	r22, 0xFF	; 255
    33c0:	6c 93       	st	X, r22
                if ( Maxcount[proxChannel] > 64 )
    33c2:	61 34       	cpi	r22, 0x41	; 65
    33c4:	c0 f0       	brcs	.+48     	; 0x33f6 <calcBaseline+0x1a8>
                {
                    (rollingMax[proxChannel]) -= 1;
    33c6:	dc 01       	movw	r26, r24
    33c8:	aa 0f       	add	r26, r26
    33ca:	bb 1f       	adc	r27, r27
    33cc:	a6 5d       	subi	r26, 0xD6	; 214
    33ce:	b5 4d       	sbci	r27, 0xD5	; 213
    33d0:	31 97       	sbiw	r30, 0x01	; 1
    33d2:	ed 93       	st	X+, r30
    33d4:	fc 93       	st	X, r31
                    Maxcount[proxChannel] = 0;
    33d6:	fc 01       	movw	r30, r24
    33d8:	e9 5d       	subi	r30, 0xD9	; 217
    33da:	f5 4d       	sbci	r31, 0xD5	; 213
    33dc:	10 82       	st	Z, r1
    33de:	0b c0       	rjmp	.+22     	; 0x33f6 <calcBaseline+0x1a8>
                }
            } 
            else
            {
                rollingMax[proxChannel] = *pPS;
    33e0:	fc 01       	movw	r30, r24
    33e2:	ee 0f       	add	r30, r30
    33e4:	ff 1f       	adc	r31, r31
    33e6:	e6 5d       	subi	r30, 0xD6	; 214
    33e8:	f5 4d       	sbci	r31, 0xD5	; 213
    33ea:	60 83       	st	Z, r22
    33ec:	71 83       	std	Z+1, r23	; 0x01
                Maxcount[proxChannel] = 0;
    33ee:	fc 01       	movw	r30, r24
    33f0:	e9 5d       	subi	r30, 0xD9	; 217
    33f2:	f5 4d       	sbci	r31, 0xD5	; 213
    33f4:	10 82       	st	Z, r1
            }
        }

        // Update the stored baseline average with the new value
        dynamic_baseline[proxChannel] = (u16)average;
    33f6:	fc 01       	movw	r30, r24
    33f8:	ee 0f       	add	r30, r30
    33fa:	ff 1f       	adc	r31, r31
    33fc:	e0 5d       	subi	r30, 0xD0	; 208
    33fe:	f5 4d       	sbci	r31, 0xD5	; 213
    3400:	00 83       	st	Z, r16
    3402:	11 83       	std	Z+1, r17	; 0x01
    }

    // Use the rollingMax value to determine the baseline level
    if ( rollingMax[proxChannel] != 0 )
    3404:	fc 01       	movw	r30, r24
    3406:	ee 0f       	add	r30, r30
    3408:	ff 1f       	adc	r31, r31
    340a:	e6 5d       	subi	r30, 0xD6	; 214
    340c:	f5 4d       	sbci	r31, 0xD5	; 213
    340e:	20 81       	ld	r18, Z
    3410:	31 81       	ldd	r19, Z+1	; 0x01
    3412:	21 15       	cp	r18, r1
    3414:	31 05       	cpc	r19, r1
    3416:	51 f0       	breq	.+20     	; 0x342c <calcBaseline+0x1de>
    {
        baseline[proxChannel] = rollingMax[proxChannel] + noise_margin;
    3418:	fc 01       	movw	r30, r24
    341a:	ee 0f       	add	r30, r30
    341c:	ff 1f       	adc	r31, r31
    341e:	ee 5e       	subi	r30, 0xEE	; 238
    3420:	f3 4d       	sbci	r31, 0xD3	; 211
    3422:	42 0f       	add	r20, r18
    3424:	53 1f       	adc	r21, r19
    3426:	40 83       	st	Z, r20
    3428:	51 83       	std	Z+1, r21	; 0x01
    342a:	0e c0       	rjmp	.+28     	; 0x3448 <calcBaseline+0x1fa>
    } 
    else
    {  // If the rollingMax has not been determined yet, use the average
        baseline[proxChannel] = (u16) dynamic_baseline[proxChannel] + noise_margin;
    342c:	88 0f       	add	r24, r24
    342e:	99 1f       	adc	r25, r25
    3430:	fc 01       	movw	r30, r24
    3432:	ee 5e       	subi	r30, 0xEE	; 238
    3434:	f3 4d       	sbci	r31, 0xD3	; 211
    3436:	dc 01       	movw	r26, r24
    3438:	a0 5d       	subi	r26, 0xD0	; 208
    343a:	b5 4d       	sbci	r27, 0xD5	; 213
    343c:	8d 91       	ld	r24, X+
    343e:	9c 91       	ld	r25, X
    3440:	48 0f       	add	r20, r24
    3442:	59 1f       	adc	r21, r25
    3444:	40 83       	st	Z, r20
    3446:	51 83       	std	Z+1, r21	; 0x01
    }
}
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	1f 91       	pop	r17
    344e:	0f 91       	pop	r16
    3450:	08 95       	ret

00003452 <si114x_process_samples>:
u16 code scale           =  3;
u8  code ircorrection[3] =  { 17, 35, 29 };
#endif

void si114x_process_samples(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples)
{
    3452:	ef 92       	push	r14
    3454:	ff 92       	push	r15
    3456:	0f 93       	push	r16
    3458:	1f 93       	push	r17
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	8c 01       	movw	r16, r24
    3460:	eb 01       	movw	r28, r22
    if ((maxLeakage[0]==0)&&(maxLeakage[1]==0)&&(maxLeakage[2]==0)&&(initial_baseline_counter==128))
    3462:	20 91 3a 2a 	lds	r18, 0x2A3A
    3466:	30 91 3b 2a 	lds	r19, 0x2A3B
    346a:	23 2b       	or	r18, r19
    346c:	a1 f4       	brne	.+40     	; 0x3496 <si114x_process_samples+0x44>
    346e:	80 91 3c 2a 	lds	r24, 0x2A3C
    3472:	90 91 3d 2a 	lds	r25, 0x2A3D
    3476:	89 2b       	or	r24, r25
    3478:	71 f4       	brne	.+28     	; 0x3496 <si114x_process_samples+0x44>
    347a:	80 91 3e 2a 	lds	r24, 0x2A3E
    347e:	90 91 3f 2a 	lds	r25, 0x2A3F
    3482:	89 2b       	or	r24, r25
    3484:	41 f4       	brne	.+16     	; 0x3496 <si114x_process_samples+0x44>
    3486:	80 91 10 20 	lds	r24, 0x2010
    348a:	80 38       	cpi	r24, 0x80	; 128
    348c:	21 f4       	brne	.+8      	; 0x3496 <si114x_process_samples+0x44>
    {
#ifdef DEBUG_ON
        puts("DEBUG: Computing Baseline. Make sure nothing is in the vicinity of the EVB");
    348e:	87 e5       	ldi	r24, 0x57	; 87
    3490:	94 e2       	ldi	r25, 0x24	; 36
    3492:	0e 94 47 58 	call	0xb08e	; 0xb08e <puts>
#endif
    }

    if (initial_baseline_counter != 0)
    3496:	80 91 10 20 	lds	r24, 0x2010
    349a:	88 23       	and	r24, r24
    349c:	09 f4       	brne	.+2      	; 0x34a0 <si114x_process_samples+0x4e>
    349e:	86 c0       	rjmp	.+268    	; 0x35ac <si114x_process_samples+0x15a>
    {
        // The first 128 samples are used to establish the initial 
        // baseline
        if ( initial_baseline_counter > 1 )
    34a0:	82 30       	cpi	r24, 0x02	; 2
    34a2:	48 f1       	brcs	.+82     	; 0x34f6 <si114x_process_samples+0xa4>
        {
            // Look for maximum
            if( maxLeakage[0] < samples->ps1) maxLeakage[0] = samples->ps1;
    34a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    34a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    34a8:	20 91 3a 2a 	lds	r18, 0x2A3A
    34ac:	30 91 3b 2a 	lds	r19, 0x2A3B
    34b0:	28 17       	cp	r18, r24
    34b2:	39 07       	cpc	r19, r25
    34b4:	20 f4       	brcc	.+8      	; 0x34be <si114x_process_samples+0x6c>
    34b6:	80 93 3a 2a 	sts	0x2A3A, r24
    34ba:	90 93 3b 2a 	sts	0x2A3B, r25
            if( maxLeakage[1] < samples->ps2) maxLeakage[1] = samples->ps2;
    34be:	8c 85       	ldd	r24, Y+12	; 0x0c
    34c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    34c2:	20 91 3c 2a 	lds	r18, 0x2A3C
    34c6:	30 91 3d 2a 	lds	r19, 0x2A3D
    34ca:	28 17       	cp	r18, r24
    34cc:	39 07       	cpc	r19, r25
    34ce:	20 f4       	brcc	.+8      	; 0x34d8 <si114x_process_samples+0x86>
    34d0:	80 93 3c 2a 	sts	0x2A3C, r24
    34d4:	90 93 3d 2a 	sts	0x2A3D, r25
			if( maxLeakage[2] < samples->ps3) maxLeakage[2] = samples->ps3;
    34d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    34da:	9f 85       	ldd	r25, Y+15	; 0x0f
    34dc:	20 91 3e 2a 	lds	r18, 0x2A3E
    34e0:	30 91 3f 2a 	lds	r19, 0x2A3F
    34e4:	28 17       	cp	r18, r24
    34e6:	39 07       	cpc	r19, r25
    34e8:	08 f0       	brcs	.+2      	; 0x34ec <si114x_process_samples+0x9a>
    34ea:	5a c0       	rjmp	.+180    	; 0x35a0 <si114x_process_samples+0x14e>
    34ec:	80 93 3e 2a 	sts	0x2A3E, r24
    34f0:	90 93 3f 2a 	sts	0x2A3F, r25
    34f4:	55 c0       	rjmp	.+170    	; 0x35a0 <si114x_process_samples+0x14e>
        }
        else
        {
#ifdef DEBUG_ON
            printf("DEBUG: Initial Baseline Calculated, PS1 = %d, PS2 = %d, PS3 = %d \n", maxLeakage[0], maxLeakage[1],maxLeakage[2]);
    34f6:	ce e3       	ldi	r28, 0x3E	; 62
    34f8:	da e2       	ldi	r29, 0x2A	; 42
    34fa:	89 81       	ldd	r24, Y+1	; 0x01
    34fc:	8f 93       	push	r24
    34fe:	88 81       	ld	r24, Y
    3500:	8f 93       	push	r24
    3502:	0c e3       	ldi	r16, 0x3C	; 60
    3504:	1a e2       	ldi	r17, 0x2A	; 42
    3506:	f8 01       	movw	r30, r16
    3508:	81 81       	ldd	r24, Z+1	; 0x01
    350a:	8f 93       	push	r24
    350c:	80 81       	ld	r24, Z
    350e:	8f 93       	push	r24
    3510:	0f 2e       	mov	r0, r31
    3512:	fa e3       	ldi	r31, 0x3A	; 58
    3514:	ef 2e       	mov	r14, r31
    3516:	fa e2       	ldi	r31, 0x2A	; 42
    3518:	ff 2e       	mov	r15, r31
    351a:	f0 2d       	mov	r31, r0
    351c:	f7 01       	movw	r30, r14
    351e:	81 81       	ldd	r24, Z+1	; 0x01
    3520:	8f 93       	push	r24
    3522:	80 81       	ld	r24, Z
    3524:	8f 93       	push	r24
    3526:	82 ea       	ldi	r24, 0xA2	; 162
    3528:	94 e2       	ldi	r25, 0x24	; 36
    352a:	9f 93       	push	r25
    352c:	8f 93       	push	r24
    352e:	0e 94 36 58 	call	0xb06c	; 0xb06c <printf>
#endif
			
            // Set Max Leakage 
            maxLeakage[0] = maxLeakage[0] + noise_margin*2;
    3532:	80 91 0e 20 	lds	r24, 0x200E
    3536:	90 91 0f 20 	lds	r25, 0x200F
    353a:	88 0f       	add	r24, r24
    353c:	99 1f       	adc	r25, r25
    353e:	f7 01       	movw	r30, r14
    3540:	40 81       	ld	r20, Z
    3542:	51 81       	ldd	r21, Z+1	; 0x01
    3544:	48 0f       	add	r20, r24
    3546:	59 1f       	adc	r21, r25
    3548:	40 83       	st	Z, r20
    354a:	51 83       	std	Z+1, r21	; 0x01
            maxLeakage[1] = maxLeakage[1] + noise_margin*2;
    354c:	f8 01       	movw	r30, r16
    354e:	20 81       	ld	r18, Z
    3550:	31 81       	ldd	r19, Z+1	; 0x01
    3552:	28 0f       	add	r18, r24
    3554:	39 1f       	adc	r19, r25
    3556:	20 83       	st	Z, r18
    3558:	31 83       	std	Z+1, r19	; 0x01
			maxLeakage[2] = maxLeakage[2] + noise_margin*2;
    355a:	68 81       	ld	r22, Y
    355c:	79 81       	ldd	r23, Y+1	; 0x01
    355e:	86 0f       	add	r24, r22
    3560:	97 1f       	adc	r25, r23
    3562:	88 83       	st	Y, r24
    3564:	99 83       	std	Y+1, r25	; 0x01

            baseline[0] = maxLeakage[0];
    3566:	40 93 12 2c 	sts	0x2C12, r20
    356a:	50 93 13 2c 	sts	0x2C13, r21
            baseline[1] = maxLeakage[1];
    356e:	20 93 14 2c 	sts	0x2C14, r18
    3572:	30 93 15 2c 	sts	0x2C15, r19
			baseline[2] = maxLeakage[2];
    3576:	80 93 16 2c 	sts	0x2C16, r24
    357a:	90 93 17 2c 	sts	0x2C17, r25
			
			env_var.baseline[0] = baseline[0];
    357e:	40 93 0c 2b 	sts	0x2B0C, r20
    3582:	50 93 0d 2b 	sts	0x2B0D, r21
			env_var.baseline[1] = baseline[1];
    3586:	20 93 0e 2b 	sts	0x2B0E, r18
    358a:	30 93 0f 2b 	sts	0x2B0F, r19
			env_var.baseline[2] = baseline[2];
    358e:	80 93 10 2b 	sts	0x2B10, r24
    3592:	90 93 11 2b 	sts	0x2B11, r25
    3596:	8d b7       	in	r24, 0x3d	; 61
    3598:	9e b7       	in	r25, 0x3e	; 62
    359a:	08 96       	adiw	r24, 0x08	; 8
    359c:	8d bf       	out	0x3d, r24	; 61
    359e:	9e bf       	out	0x3e, r25	; 62
        }
        
        // Decrement counter
        initial_baseline_counter--;
    35a0:	80 91 10 20 	lds	r24, 0x2010
    35a4:	81 50       	subi	r24, 0x01	; 1
    35a6:	80 93 10 20 	sts	0x2010, r24
    35aa:	43 c0       	rjmp	.+134    	; 0x3632 <si114x_process_samples+0x1e0>
    else
    {
        //
        // Once the baseline has been set, do the actual loop
        // The first thing that happens is to check for saturation events
        if(samples->ps1 > 48000 || samples->ps2 > 48000 || samples->ps3 > 48000)
    35ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    35ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    35b0:	81 38       	cpi	r24, 0x81	; 129
    35b2:	9b 4b       	sbci	r25, 0xBB	; 187
    35b4:	50 f4       	brcc	.+20     	; 0x35ca <si114x_process_samples+0x178>
    35b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    35b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    35ba:	81 38       	cpi	r24, 0x81	; 129
    35bc:	9b 4b       	sbci	r25, 0xBB	; 187
    35be:	28 f4       	brcc	.+10     	; 0x35ca <si114x_process_samples+0x178>
    35c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    35c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    35c4:	81 38       	cpi	r24, 0x81	; 129
    35c6:	9b 4b       	sbci	r25, 0xBB	; 187
    35c8:	28 f0       	brcs	.+10     	; 0x35d4 <si114x_process_samples+0x182>
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
#ifdef DEBUG_ON
            puts("DEBUG: Samples are Saturated");
    35ca:	85 ee       	ldi	r24, 0xE5	; 229
    35cc:	94 e2       	ldi	r25, 0x24	; 36
    35ce:	0e 94 47 58 	call	0xb08e	; 0xb08e <puts>
    35d2:	2f c0       	rjmp	.+94     	; 0x3632 <si114x_process_samples+0x1e0>
#endif
		}
        else
        { 
            if( isIRStable( samples ) )
    35d4:	ce 01       	movw	r24, r28
    35d6:	49 dd       	rcall	.-1390   	; 0x306a <isIRStable>
    35d8:	88 23       	and	r24, r24
    35da:	59 f1       	breq	.+86     	; 0x3632 <si114x_process_samples+0x1e0>
            {
                IRCompensation( 0, samples, ircorrection );  // IR Ambient Compensation for PS1 Channel
    35dc:	49 e0       	ldi	r20, 0x09	; 9
    35de:	50 e2       	ldi	r21, 0x20	; 32
    35e0:	be 01       	movw	r22, r28
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	c4 dd       	rcall	.-1144   	; 0x316e <IRCompensation>
                IRCompensation( 1, samples, ircorrection );  // IR Ambient Compensation for PS2 Channel
    35e6:	49 e0       	ldi	r20, 0x09	; 9
    35e8:	50 e2       	ldi	r21, 0x20	; 32
    35ea:	be 01       	movw	r22, r28
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	bf dd       	rcall	.-1154   	; 0x316e <IRCompensation>
				IRCompensation( 2, samples, ircorrection );  // IR Ambient Compensation for PS3 Channel
    35f0:	49 e0       	ldi	r20, 0x09	; 9
    35f2:	50 e2       	ldi	r21, 0x20	; 32
    35f4:	be 01       	movw	r22, r28
    35f6:	82 e0       	ldi	r24, 0x02	; 2
    35f8:	ba dd       	rcall	.-1164   	; 0x316e <IRCompensation>

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
    35fa:	40 91 0e 20 	lds	r20, 0x200E
    35fe:	50 91 0f 20 	lds	r21, 0x200F
    3602:	be 01       	movw	r22, r28
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	23 de       	rcall	.-954    	; 0x324e <calcBaseline>
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
    3608:	40 91 0e 20 	lds	r20, 0x200E
    360c:	50 91 0f 20 	lds	r21, 0x200F
    3610:	be 01       	movw	r22, r28
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	1c de       	rcall	.-968    	; 0x324e <calcBaseline>
				calcBaseline( 2 , samples, noise_margin); // Calculate PS3 Baseline
    3616:	40 91 0e 20 	lds	r20, 0x200E
    361a:	50 91 0f 20 	lds	r21, 0x200F
    361e:	be 01       	movw	r22, r28
    3620:	82 e0       	ldi	r24, 0x02	; 2
    3622:	15 de       	rcall	.-982    	; 0x324e <calcBaseline>

                SliderAlgorithm(si114x_handle, samples, scale);
    3624:	40 91 0c 20 	lds	r20, 0x200C
    3628:	50 91 0d 20 	lds	r21, 0x200D
    362c:	be 01       	movw	r22, r28
    362e:	c8 01       	movw	r24, r16
    3630:	7d d1       	rcall	.+762    	; 0x392c <SliderAlgorithm>
            }
        }
    }
}
    3632:	df 91       	pop	r29
    3634:	cf 91       	pop	r28
    3636:	1f 91       	pop	r17
    3638:	0f 91       	pop	r16
    363a:	ff 90       	pop	r15
    363c:	ef 90       	pop	r14
    363e:	08 95       	ret

00003640 <PortSet>:

s16 Si114xBlockRead(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
}
    3640:	08 95       	ret

00003642 <Si114xWriteToRegister>:
    3642:	ef 92       	push	r14
    3644:	0f 93       	push	r16
    3646:	1f 93       	push	r17
    3648:	cf 93       	push	r28
    364a:	df 93       	push	r29
    364c:	1f 92       	push	r1
    364e:	cd b7       	in	r28, 0x3d	; 61
    3650:	de b7       	in	r29, 0x3e	; 62
    3652:	26 2f       	mov	r18, r22
    3654:	49 83       	std	Y+1, r20	; 0x01
    3656:	ee 24       	eor	r14, r14
    3658:	e3 94       	inc	r14
    365a:	8e 01       	movw	r16, r28
    365c:	0f 5f       	subi	r16, 0xFF	; 255
    365e:	1f 4f       	sbci	r17, 0xFF	; 255
    3660:	48 ee       	ldi	r20, 0xE8	; 232
    3662:	6a e5       	ldi	r22, 0x5A	; 90
    3664:	80 e8       	ldi	r24, 0x80	; 128
    3666:	94 e0       	ldi	r25, 0x04	; 4
    3668:	5a d4       	rcall	.+2228   	; 0x3f1e <twi_write_packet>
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	0f 90       	pop	r0
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	1f 91       	pop	r17
    3676:	0f 91       	pop	r16
    3678:	ef 90       	pop	r14
    367a:	08 95       	ret

0000367c <Si114xReadFromRegister>:
    367c:	ef 92       	push	r14
    367e:	0f 93       	push	r16
    3680:	1f 93       	push	r17
    3682:	cf 93       	push	r28
    3684:	df 93       	push	r29
    3686:	1f 92       	push	r1
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	26 2f       	mov	r18, r22
    368e:	ee 24       	eor	r14, r14
    3690:	e3 94       	inc	r14
    3692:	8e 01       	movw	r16, r28
    3694:	0f 5f       	subi	r16, 0xFF	; 255
    3696:	1f 4f       	sbci	r17, 0xFF	; 255
    3698:	48 ee       	ldi	r20, 0xE8	; 232
    369a:	6a e5       	ldi	r22, 0x5A	; 90
    369c:	80 e8       	ldi	r24, 0x80	; 128
    369e:	94 e0       	ldi	r25, 0x04	; 4
    36a0:	f8 d3       	rcall	.+2032   	; 0x3e92 <twi_read_packet>
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	0f 90       	pop	r0
    36a8:	df 91       	pop	r29
    36aa:	cf 91       	pop	r28
    36ac:	1f 91       	pop	r17
    36ae:	0f 91       	pop	r16
    36b0:	ef 90       	pop	r14
    36b2:	08 95       	ret

000036b4 <Si114xBlockWrite>:
    36b4:	ef 92       	push	r14
    36b6:	0f 93       	push	r16
    36b8:	1f 93       	push	r17
    36ba:	89 01       	movw	r16, r18
    36bc:	e4 2e       	mov	r14, r20
    36be:	26 2f       	mov	r18, r22
    36c0:	48 ee       	ldi	r20, 0xE8	; 232
    36c2:	6a e5       	ldi	r22, 0x5A	; 90
    36c4:	80 e8       	ldi	r24, 0x80	; 128
    36c6:	94 e0       	ldi	r25, 0x04	; 4
    36c8:	2a d4       	rcall	.+2132   	; 0x3f1e <twi_write_packet>
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	1f 91       	pop	r17
    36ce:	0f 91       	pop	r16
    36d0:	ef 90       	pop	r14
    36d2:	08 95       	ret

000036d4 <delay_10ms>:
    36d4:	2f ef       	ldi	r18, 0xFF	; 255
    36d6:	89 ef       	ldi	r24, 0xF9	; 249
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	21 50       	subi	r18, 0x01	; 1
    36dc:	80 40       	sbci	r24, 0x00	; 0
    36de:	90 40       	sbci	r25, 0x00	; 0
    36e0:	e1 f7       	brne	.-8      	; 0x36da <delay_10ms+0x6>
    36e2:	00 c0       	rjmp	.+0      	; 0x36e4 <delay_10ms+0x10>
    36e4:	00 00       	nop
    36e6:	08 95       	ret

000036e8 <QS_Counts_to_Distance>:
		distance = 139739*pow(counts,-0.88);
	} else if (led == 2) {
		distance = 155790*pow(counts,-0.91);
	}
	return (s16)distance;
}
    36e8:	ef 92       	push	r14
    36ea:	ff 92       	push	r15
    36ec:	0f 93       	push	r16
    36ee:	1f 93       	push	r17
    36f0:	cf 93       	push	r28
    36f2:	df 93       	push	r29
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62
    36f8:	c2 5a       	subi	r28, 0xA2	; 162
    36fa:	d1 09       	sbc	r29, r1
    36fc:	cd bf       	out	0x3d, r28	; 61
    36fe:	de bf       	out	0x3e, r29	; 62
    3700:	42 e1       	ldi	r20, 0x12	; 18
    3702:	e4 e2       	ldi	r30, 0x24	; 36
    3704:	f0 e2       	ldi	r31, 0x20	; 32
    3706:	de 01       	movw	r26, r28
    3708:	11 96       	adiw	r26, 0x01	; 1
    370a:	01 90       	ld	r0, Z+
    370c:	0d 92       	st	X+, r0
    370e:	4a 95       	dec	r20
    3710:	e1 f7       	brne	.-8      	; 0x370a <QS_Counts_to_Distance+0x22>
    3712:	42 e1       	ldi	r20, 0x12	; 18
    3714:	e6 e3       	ldi	r30, 0x36	; 54
    3716:	f0 e2       	ldi	r31, 0x20	; 32
    3718:	de 01       	movw	r26, r28
    371a:	53 96       	adiw	r26, 0x13	; 19
    371c:	01 90       	ld	r0, Z+
    371e:	0d 92       	st	X+, r0
    3720:	4a 95       	dec	r20
    3722:	e1 f7       	brne	.-8      	; 0x371c <QS_Counts_to_Distance+0x34>
    3724:	42 e1       	ldi	r20, 0x12	; 18
    3726:	e8 e4       	ldi	r30, 0x48	; 72
    3728:	f0 e2       	ldi	r31, 0x20	; 32
    372a:	de 01       	movw	r26, r28
    372c:	95 96       	adiw	r26, 0x25	; 37
    372e:	01 90       	ld	r0, Z+
    3730:	0d 92       	st	X+, r0
    3732:	4a 95       	dec	r20
    3734:	e1 f7       	brne	.-8      	; 0x372e <QS_Counts_to_Distance+0x46>
    3736:	42 e1       	ldi	r20, 0x12	; 18
    3738:	ea e5       	ldi	r30, 0x5A	; 90
    373a:	f0 e2       	ldi	r31, 0x20	; 32
    373c:	de 01       	movw	r26, r28
    373e:	d7 96       	adiw	r26, 0x37	; 55
    3740:	01 90       	ld	r0, Z+
    3742:	0d 92       	st	X+, r0
    3744:	4a 95       	dec	r20
    3746:	e1 f7       	brne	.-8      	; 0x3740 <QS_Counts_to_Distance+0x58>
    3748:	42 e1       	ldi	r20, 0x12	; 18
    374a:	ec e6       	ldi	r30, 0x6C	; 108
    374c:	f0 e2       	ldi	r31, 0x20	; 32
    374e:	de 01       	movw	r26, r28
    3750:	a7 5b       	subi	r26, 0xB7	; 183
    3752:	bf 4f       	sbci	r27, 0xFF	; 255
    3754:	01 90       	ld	r0, Z+
    3756:	0d 92       	st	X+, r0
    3758:	4a 95       	dec	r20
    375a:	e1 f7       	brne	.-8      	; 0x3754 <QS_Counts_to_Distance+0x6c>
    375c:	42 e1       	ldi	r20, 0x12	; 18
    375e:	ee e7       	ldi	r30, 0x7E	; 126
    3760:	f0 e2       	ldi	r31, 0x20	; 32
    3762:	de 01       	movw	r26, r28
    3764:	a5 5a       	subi	r26, 0xA5	; 165
    3766:	bf 4f       	sbci	r27, 0xFF	; 255
    3768:	01 90       	ld	r0, Z+
    376a:	0d 92       	st	X+, r0
    376c:	4a 95       	dec	r20
    376e:	e1 f7       	brne	.-8      	; 0x3768 <QS_Counts_to_Distance+0x80>
    3770:	42 e1       	ldi	r20, 0x12	; 18
    3772:	ea e5       	ldi	r30, 0x5A	; 90
    3774:	f0 e2       	ldi	r31, 0x20	; 32
    3776:	de 01       	movw	r26, r28
    3778:	a3 59       	subi	r26, 0x93	; 147
    377a:	bf 4f       	sbci	r27, 0xFF	; 255
    377c:	01 90       	ld	r0, Z+
    377e:	0d 92       	st	X+, r0
    3780:	4a 95       	dec	r20
    3782:	e1 f7       	brne	.-8      	; 0x377c <QS_Counts_to_Distance+0x94>
    3784:	42 e1       	ldi	r20, 0x12	; 18
    3786:	ec e6       	ldi	r30, 0x6C	; 108
    3788:	f0 e2       	ldi	r31, 0x20	; 32
    378a:	de 01       	movw	r26, r28
    378c:	a1 58       	subi	r26, 0x81	; 129
    378e:	bf 4f       	sbci	r27, 0xFF	; 255
    3790:	01 90       	ld	r0, Z+
    3792:	0d 92       	st	X+, r0
    3794:	4a 95       	dec	r20
    3796:	e1 f7       	brne	.-8      	; 0x3790 <QS_Counts_to_Distance+0xa8>
    3798:	42 e1       	ldi	r20, 0x12	; 18
    379a:	ee e7       	ldi	r30, 0x7E	; 126
    379c:	f0 e2       	ldi	r31, 0x20	; 32
    379e:	de 01       	movw	r26, r28
    37a0:	af 56       	subi	r26, 0x6F	; 111
    37a2:	bf 4f       	sbci	r27, 0xFF	; 255
    37a4:	01 90       	ld	r0, Z+
    37a6:	0d 92       	st	X+, r0
    37a8:	4a 95       	dec	r20
    37aa:	e1 f7       	brne	.-8      	; 0x37a4 <QS_Counts_to_Distance+0xbc>
    37ac:	61 30       	cpi	r22, 0x01	; 1
    37ae:	99 f5       	brne	.+102    	; 0x3816 <QS_Counts_to_Distance+0x12e>
    37b0:	4d a1       	ldd	r20, Y+37	; 0x25
    37b2:	5e a1       	ldd	r21, Y+38	; 0x26
    37b4:	48 17       	cp	r20, r24
    37b6:	59 07       	cpc	r21, r25
    37b8:	60 f0       	brcs	.+24     	; 0x37d2 <QS_Counts_to_Distance+0xea>
    37ba:	de 01       	movw	r26, r28
    37bc:	97 96       	adiw	r26, 0x27	; 39
    37be:	61 e0       	ldi	r22, 0x01	; 1
    37c0:	70 e0       	ldi	r23, 0x00	; 0
    37c2:	e6 2f       	mov	r30, r22
    37c4:	ab 01       	movw	r20, r22
    37c6:	ed 90       	ld	r14, X+
    37c8:	fd 90       	ld	r15, X+
    37ca:	e8 16       	cp	r14, r24
    37cc:	f9 06       	cpc	r15, r25
    37ce:	d8 f4       	brcc	.+54     	; 0x3806 <QS_Counts_to_Distance+0x11e>
    37d0:	03 c0       	rjmp	.+6      	; 0x37d8 <QS_Counts_to_Distance+0xf0>
    37d2:	40 e0       	ldi	r20, 0x00	; 0
    37d4:	50 e0       	ldi	r21, 0x00	; 0
    37d6:	e0 e0       	ldi	r30, 0x00	; 0
    37d8:	44 0f       	add	r20, r20
    37da:	55 1f       	adc	r21, r21
    37dc:	21 e0       	ldi	r18, 0x01	; 1
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	2c 0f       	add	r18, r28
    37e2:	3d 1f       	adc	r19, r29
    37e4:	42 0f       	add	r20, r18
    37e6:	53 1f       	adc	r21, r19
    37e8:	da 01       	movw	r26, r20
    37ea:	52 96       	adiw	r26, 0x12	; 18
    37ec:	2d 91       	ld	r18, X+
    37ee:	3c 91       	ld	r19, X
    37f0:	53 97       	sbiw	r26, 0x13	; 19
    37f2:	dc 01       	movw	r26, r24
    37f4:	0e 94 47 56 	call	0xac8e	; 0xac8e <__umulhisi3>
    37f8:	da 01       	movw	r26, r20
    37fa:	4d 91       	ld	r20, X+
    37fc:	5c 91       	ld	r21, X
    37fe:	8a 01       	movw	r16, r20
    3800:	08 1b       	sub	r16, r24
    3802:	19 0b       	sbc	r17, r25
    3804:	7d c0       	rjmp	.+250    	; 0x3900 <QS_Counts_to_Distance+0x218>
    3806:	e1 e0       	ldi	r30, 0x01	; 1
    3808:	e6 0f       	add	r30, r22
    380a:	6f 5f       	subi	r22, 0xFF	; 255
    380c:	7f 4f       	sbci	r23, 0xFF	; 255
    380e:	69 30       	cpi	r22, 0x09	; 9
    3810:	71 05       	cpc	r23, r1
    3812:	b9 f6       	brne	.-82     	; 0x37c2 <QS_Counts_to_Distance+0xda>
    3814:	75 c0       	rjmp	.+234    	; 0x3900 <QS_Counts_to_Distance+0x218>
    3816:	62 30       	cpi	r22, 0x02	; 2
    3818:	b9 f5       	brne	.+110    	; 0x3888 <QS_Counts_to_Distance+0x1a0>
    381a:	6d 96       	adiw	r28, 0x1d	; 29
    381c:	4e ad       	ldd	r20, Y+62	; 0x3e
    381e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3820:	6d 97       	sbiw	r28, 0x1d	; 29
    3822:	48 17       	cp	r20, r24
    3824:	59 07       	cpc	r21, r25
    3826:	68 f0       	brcs	.+26     	; 0x3842 <QS_Counts_to_Distance+0x15a>
    3828:	de 01       	movw	r26, r28
    382a:	a3 5a       	subi	r26, 0xA3	; 163
    382c:	bf 4f       	sbci	r27, 0xFF	; 255
    382e:	61 e0       	ldi	r22, 0x01	; 1
    3830:	70 e0       	ldi	r23, 0x00	; 0
    3832:	e6 2f       	mov	r30, r22
    3834:	ab 01       	movw	r20, r22
    3836:	ed 90       	ld	r14, X+
    3838:	fd 90       	ld	r15, X+
    383a:	e8 16       	cp	r14, r24
    383c:	f9 06       	cpc	r15, r25
    383e:	e0 f4       	brcc	.+56     	; 0x3878 <QS_Counts_to_Distance+0x190>
    3840:	03 c0       	rjmp	.+6      	; 0x3848 <QS_Counts_to_Distance+0x160>
    3842:	40 e0       	ldi	r20, 0x00	; 0
    3844:	50 e0       	ldi	r21, 0x00	; 0
    3846:	e0 e0       	ldi	r30, 0x00	; 0
    3848:	44 0f       	add	r20, r20
    384a:	55 1f       	adc	r21, r21
    384c:	a9 e4       	ldi	r26, 0x49	; 73
    384e:	b0 e0       	ldi	r27, 0x00	; 0
    3850:	ac 0f       	add	r26, r28
    3852:	bd 1f       	adc	r27, r29
    3854:	a4 0f       	add	r26, r20
    3856:	b5 1f       	adc	r27, r21
    3858:	2d 91       	ld	r18, X+
    385a:	3c 91       	ld	r19, X
    385c:	dc 01       	movw	r26, r24
    385e:	0e 94 47 56 	call	0xac8e	; 0xac8e <__umulhisi3>
    3862:	de 01       	movw	r26, r28
    3864:	a4 0f       	add	r26, r20
    3866:	b5 1f       	adc	r27, r21
    3868:	d7 96       	adiw	r26, 0x37	; 55
    386a:	4d 91       	ld	r20, X+
    386c:	5c 91       	ld	r21, X
    386e:	d8 97       	sbiw	r26, 0x38	; 56
    3870:	8a 01       	movw	r16, r20
    3872:	08 1b       	sub	r16, r24
    3874:	19 0b       	sbc	r17, r25
    3876:	44 c0       	rjmp	.+136    	; 0x3900 <QS_Counts_to_Distance+0x218>
    3878:	e1 e0       	ldi	r30, 0x01	; 1
    387a:	e6 0f       	add	r30, r22
    387c:	6f 5f       	subi	r22, 0xFF	; 255
    387e:	7f 4f       	sbci	r23, 0xFF	; 255
    3880:	69 30       	cpi	r22, 0x09	; 9
    3882:	71 05       	cpc	r23, r1
    3884:	b1 f6       	brne	.-84     	; 0x3832 <QS_Counts_to_Distance+0x14a>
    3886:	3c c0       	rjmp	.+120    	; 0x3900 <QS_Counts_to_Distance+0x218>
    3888:	63 30       	cpi	r22, 0x03	; 3
    388a:	09 f0       	breq	.+2      	; 0x388e <QS_Counts_to_Distance+0x1a6>
    388c:	42 c0       	rjmp	.+132    	; 0x3912 <QS_Counts_to_Distance+0x22a>
    388e:	cf 56       	subi	r28, 0x6F	; 111
    3890:	df 4f       	sbci	r29, 0xFF	; 255
    3892:	48 81       	ld	r20, Y
    3894:	59 81       	ldd	r21, Y+1	; 0x01
    3896:	c1 59       	subi	r28, 0x91	; 145
    3898:	d0 40       	sbci	r29, 0x00	; 0
    389a:	48 17       	cp	r20, r24
    389c:	59 07       	cpc	r21, r25
    389e:	68 f0       	brcs	.+26     	; 0x38ba <QS_Counts_to_Distance+0x1d2>
    38a0:	de 01       	movw	r26, r28
    38a2:	ad 56       	subi	r26, 0x6D	; 109
    38a4:	bf 4f       	sbci	r27, 0xFF	; 255
    38a6:	61 e0       	ldi	r22, 0x01	; 1
    38a8:	70 e0       	ldi	r23, 0x00	; 0
    38aa:	e6 2f       	mov	r30, r22
    38ac:	ab 01       	movw	r20, r22
    38ae:	ed 90       	ld	r14, X+
    38b0:	fd 90       	ld	r15, X+
    38b2:	e8 16       	cp	r14, r24
    38b4:	f9 06       	cpc	r15, r25
    38b6:	e8 f4       	brcc	.+58     	; 0x38f2 <QS_Counts_to_Distance+0x20a>
    38b8:	03 c0       	rjmp	.+6      	; 0x38c0 <QS_Counts_to_Distance+0x1d8>
    38ba:	40 e0       	ldi	r20, 0x00	; 0
    38bc:	50 e0       	ldi	r21, 0x00	; 0
    38be:	e0 e0       	ldi	r30, 0x00	; 0
    38c0:	44 0f       	add	r20, r20
    38c2:	55 1f       	adc	r21, r21
    38c4:	af e7       	ldi	r26, 0x7F	; 127
    38c6:	b0 e0       	ldi	r27, 0x00	; 0
    38c8:	ac 0f       	add	r26, r28
    38ca:	bd 1f       	adc	r27, r29
    38cc:	a4 0f       	add	r26, r20
    38ce:	b5 1f       	adc	r27, r21
    38d0:	2d 91       	ld	r18, X+
    38d2:	3c 91       	ld	r19, X
    38d4:	dc 01       	movw	r26, r24
    38d6:	0e 94 47 56 	call	0xac8e	; 0xac8e <__umulhisi3>
    38da:	ad e6       	ldi	r26, 0x6D	; 109
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	ac 0f       	add	r26, r28
    38e0:	bd 1f       	adc	r27, r29
    38e2:	a4 0f       	add	r26, r20
    38e4:	b5 1f       	adc	r27, r21
    38e6:	4d 91       	ld	r20, X+
    38e8:	5c 91       	ld	r21, X
    38ea:	8a 01       	movw	r16, r20
    38ec:	08 1b       	sub	r16, r24
    38ee:	19 0b       	sbc	r17, r25
    38f0:	07 c0       	rjmp	.+14     	; 0x3900 <QS_Counts_to_Distance+0x218>
    38f2:	e1 e0       	ldi	r30, 0x01	; 1
    38f4:	e6 0f       	add	r30, r22
    38f6:	6f 5f       	subi	r22, 0xFF	; 255
    38f8:	7f 4f       	sbci	r23, 0xFF	; 255
    38fa:	69 30       	cpi	r22, 0x09	; 9
    38fc:	71 05       	cpc	r23, r1
    38fe:	a9 f6       	brne	.-86     	; 0x38aa <QS_Counts_to_Distance+0x1c2>
    3900:	0b 3f       	cpi	r16, 0xFB	; 251
    3902:	11 05       	cpc	r17, r1
    3904:	10 f4       	brcc	.+4      	; 0x390a <QS_Counts_to_Distance+0x222>
    3906:	e9 30       	cpi	r30, 0x09	; 9
    3908:	11 f4       	brne	.+4      	; 0x390e <QS_Counts_to_Distance+0x226>
    390a:	0a ef       	ldi	r16, 0xFA	; 250
    390c:	10 e0       	ldi	r17, 0x00	; 0
    390e:	c8 01       	movw	r24, r16
    3910:	02 c0       	rjmp	.+4      	; 0x3916 <QS_Counts_to_Distance+0x22e>
    3912:	8f ef       	ldi	r24, 0xFF	; 255
    3914:	9f ef       	ldi	r25, 0xFF	; 255
    3916:	ce 55       	subi	r28, 0x5E	; 94
    3918:	df 4f       	sbci	r29, 0xFF	; 255
    391a:	cd bf       	out	0x3d, r28	; 61
    391c:	de bf       	out	0x3e, r29	; 62
    391e:	df 91       	pop	r29
    3920:	cf 91       	pop	r28
    3922:	1f 91       	pop	r17
    3924:	0f 91       	pop	r16
    3926:	ff 90       	pop	r15
    3928:	ef 90       	pop	r14
    392a:	08 95       	ret

0000392c <SliderAlgorithm>:

void SliderAlgorithm(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples, u16 scale)
{
    392c:	3f 92       	push	r3
    392e:	4f 92       	push	r4
    3930:	5f 92       	push	r5
    3932:	6f 92       	push	r6
    3934:	7f 92       	push	r7
    3936:	8f 92       	push	r8
    3938:	9f 92       	push	r9
    393a:	af 92       	push	r10
    393c:	bf 92       	push	r11
    393e:	cf 92       	push	r12
    3940:	df 92       	push	r13
    3942:	ef 92       	push	r14
    3944:	ff 92       	push	r15
    3946:	0f 93       	push	r16
    3948:	1f 93       	push	r17
    394a:	cf 93       	push	r28
    394c:	df 93       	push	r29
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62
    3952:	ae 97       	sbiw	r28, 0x2e	; 46
    3954:	cd bf       	out	0x3d, r28	; 61
    3956:	de bf       	out	0x3e, r29	; 62
    3958:	7b 01       	movw	r14, r22
    395a:	4a 01       	movw	r8, r20
	//My implementation
	static u16 previous_led_x = 0;
	static u16 previous_led_y = 0;

    // QS_GlobalCounterOverflow assumes milliseconds. Samples->timestamp is in 100 us.
    u16 xdata QS_GlobalCounterOverflow = samples->timestamp / 10;
    395c:	db 01       	movw	r26, r22
    395e:	12 96       	adiw	r26, 0x02	; 2
    3960:	2d 91       	ld	r18, X+
    3962:	3c 91       	ld	r19, X
    3964:	13 97       	sbiw	r26, 0x03	; 3
    3966:	ad ec       	ldi	r26, 0xCD	; 205
    3968:	bc ec       	ldi	r27, 0xCC	; 204
    396a:	0e 94 47 56 	call	0xac8e	; 0xac8e <__umulhisi3>
    396e:	6c 01       	movw	r12, r24
    3970:	d6 94       	lsr	r13
    3972:	c7 94       	ror	r12
    3974:	d6 94       	lsr	r13
    3976:	c7 94       	ror	r12
    3978:	d6 94       	lsr	r13
    397a:	c7 94       	ror	r12

    // x position "bucket" endpoints to determine LED states and recognize Pause gesture.
    u16 code xbucket_Array[10] = {1, 159, 272, 385, 498, 611, 724, 837, 1100, 1102};
    397c:	84 e1       	ldi	r24, 0x14	; 20
    397e:	e0 e9       	ldi	r30, 0x90	; 144
    3980:	f0 e2       	ldi	r31, 0x20	; 32
    3982:	de 01       	movw	r26, r28
    3984:	11 96       	adiw	r26, 0x01	; 1
    3986:	01 90       	ld	r0, Z+
    3988:	0d 92       	st	X+, r0
    398a:	8a 95       	dec	r24
    398c:	e1 f7       	brne	.-8      	; 0x3986 <SliderAlgorithm+0x5a>

    // P1 LED values corresponding to the position buckets
    u8 code LED_P1_Vals[10] = {0xFF, 0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F, 0xFF};   
    398e:	8a e0       	ldi	r24, 0x0A	; 10
    3990:	e4 ea       	ldi	r30, 0xA4	; 164
    3992:	f0 e2       	ldi	r31, 0x20	; 32
    3994:	de 01       	movw	r26, r28
    3996:	55 96       	adiw	r26, 0x15	; 21
    3998:	01 90       	ld	r0, Z+
    399a:	0d 92       	st	X+, r0
    399c:	8a 95       	dec	r24
    399e:	e1 f7       	brne	.-8      	; 0x3998 <SliderAlgorithm+0x6c>

    // P1 patterns for LED state machine.  Sent in reverse order, '0' bits are ON
    u8 code LED_swipe_left_pattern[8]  = 
    39a0:	88 e0       	ldi	r24, 0x08	; 8
    39a2:	ee ea       	ldi	r30, 0xAE	; 174
    39a4:	f0 e2       	ldi	r31, 0x20	; 32
    39a6:	de 01       	movw	r26, r28
    39a8:	5f 96       	adiw	r26, 0x1f	; 31
    39aa:	01 90       	ld	r0, Z+
    39ac:	0d 92       	st	X+, r0
    39ae:	8a 95       	dec	r24
    39b0:	e1 f7       	brne	.-8      	; 0x39aa <SliderAlgorithm+0x7e>
      {0xFF, 0xFE, 0xF8, 0xE1, 0x87, 0x1F, 0x7F, 0xFF};

    u8 code LED_swipe_right_pattern[8] = 
    39b2:	88 e0       	ldi	r24, 0x08	; 8
    39b4:	e6 eb       	ldi	r30, 0xB6	; 182
    39b6:	f0 e2       	ldi	r31, 0x20	; 32
    39b8:	de 01       	movw	r26, r28
    39ba:	97 96       	adiw	r26, 0x27	; 39
    39bc:	01 90       	ld	r0, Z+
    39be:	0d 92       	st	X+, r0
    39c0:	8a 95       	dec	r24
    39c2:	e1 f7       	brne	.-8      	; 0x39bc <SliderAlgorithm+0x90>
    s16 xdata xdiff;
    u8 xdata swipe_speed;

    int xdata ps;

    ps = (u32) samples->ps1 - (u32)baseline[0];
    39c4:	f7 01       	movw	r30, r14
    39c6:	82 85       	ldd	r24, Z+10	; 0x0a
    39c8:	93 85       	ldd	r25, Z+11	; 0x0b
    39ca:	20 91 12 2c 	lds	r18, 0x2C12
    39ce:	30 91 13 2c 	lds	r19, 0x2C13
    39d2:	82 1b       	sub	r24, r18
    39d4:	93 0b       	sbc	r25, r19
    39d6:	12 f4       	brpl	.+4      	; 0x39dc <SliderAlgorithm+0xb0>
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	90 e0       	ldi	r25, 0x00	; 0
    ps *= scale;

    // Raw IR sensor 0 and 1 are stored in channels 4 and 5
    // ALS is stored in channel 6
    // Calculate r1 and r2 distances; store in channels 0 and 1
    r1 = QS_Counts_to_Distance ((u16)ps, 1);
    39dc:	61 e0       	ldi	r22, 0x01	; 1
    39de:	9c 01       	movw	r18, r24
    39e0:	82 9e       	mul	r8, r18
    39e2:	c0 01       	movw	r24, r0
    39e4:	83 9e       	mul	r8, r19
    39e6:	90 0d       	add	r25, r0
    39e8:	92 9e       	mul	r9, r18
    39ea:	90 0d       	add	r25, r0
    39ec:	11 24       	eor	r1, r1
    39ee:	7c de       	rcall	.-776    	; 0x36e8 <QS_Counts_to_Distance>
    39f0:	8c 01       	movw	r16, r24
	
	//printf("r1 = %d , counts = %d \r\n",r1,(u16)ps);

    ps = (u32) samples->ps2 - (u32)baseline[1];
    39f2:	d7 01       	movw	r26, r14
    39f4:	1c 96       	adiw	r26, 0x0c	; 12
    39f6:	8d 91       	ld	r24, X+
    39f8:	9c 91       	ld	r25, X
    39fa:	1d 97       	sbiw	r26, 0x0d	; 13
    39fc:	20 91 14 2c 	lds	r18, 0x2C14
    3a00:	30 91 15 2c 	lds	r19, 0x2C15
    3a04:	82 1b       	sub	r24, r18
    3a06:	93 0b       	sbc	r25, r19
    3a08:	12 f4       	brpl	.+4      	; 0x3a0e <SliderAlgorithm+0xe2>
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    if (ps < 0) ps = 0;

    // Scale it
    ps *= (u32)scale;

    r2 = QS_Counts_to_Distance ((u16)ps, 1);
    3a0e:	61 e0       	ldi	r22, 0x01	; 1
    3a10:	fc 01       	movw	r30, r24
    3a12:	8e 9e       	mul	r8, r30
    3a14:	c0 01       	movw	r24, r0
    3a16:	8f 9e       	mul	r8, r31
    3a18:	90 0d       	add	r25, r0
    3a1a:	9e 9e       	mul	r9, r30
    3a1c:	90 0d       	add	r25, r0
    3a1e:	11 24       	eor	r1, r1
    3a20:	63 de       	rcall	.-826    	; 0x36e8 <QS_Counts_to_Distance>
    3a22:	4c 01       	movw	r8, r24
   ////////////////////////////////////////////////////////////////////////////
   // Position calculation and swipe gesture detection

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
    3a24:	98 01       	movw	r18, r16
    3a26:	d8 01       	movw	r26, r16
    3a28:	0e 94 47 56 	call	0xac8e	; 0xac8e <__umulhisi3>
   x.u32 = x.u32 + 33000;
    3a2c:	2b 01       	movw	r4, r22
    3a2e:	3c 01       	movw	r6, r24
    3a30:	f8 ee       	ldi	r31, 0xE8	; 232
    3a32:	4f 0e       	add	r4, r31
    3a34:	f0 e8       	ldi	r31, 0x80	; 128
    3a36:	5f 1e       	adc	r5, r31
    3a38:	61 1c       	adc	r6, r1
    3a3a:	71 1c       	adc	r7, r1
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    3a3c:	94 01       	movw	r18, r8
    3a3e:	d4 01       	movw	r26, r8
    3a40:	0e 94 47 56 	call	0xac8e	; 0xac8e <__umulhisi3>
    3a44:	a3 01       	movw	r20, r6
    3a46:	92 01       	movw	r18, r4
    3a48:	26 1b       	sub	r18, r22
    3a4a:	37 0b       	sbc	r19, r23
    3a4c:	48 0b       	sbc	r20, r24
    3a4e:	59 0b       	sbc	r21, r25
   if (x.s32 < 0)
    3a50:	1a f4       	brpl	.+6      	; 0x3a58 <SliderAlgorithm+0x12c>
   {
     x.s32 = 0;
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	a9 01       	movw	r20, r18
   }
   x.u32 = x.u32 / 60;
    3a58:	ca 01       	movw	r24, r20
    3a5a:	b9 01       	movw	r22, r18
    3a5c:	2c e3       	ldi	r18, 0x3C	; 60
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	40 e0       	ldi	r20, 0x00	; 0
    3a62:	50 e0       	ldi	r21, 0x00	; 0
    3a64:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>

   // limit x to maximum for pad
   if (x.u16[LSB] > 1101)
    3a68:	2e 34       	cpi	r18, 0x4E	; 78
    3a6a:	64 e0       	ldi	r22, 0x04	; 4
    3a6c:	36 07       	cpc	r19, r22
    3a6e:	10 f0       	brcs	.+4      	; 0x3a74 <SliderAlgorithm+0x148>
   {
     x.u16[LSB] = 1101;
    3a70:	2d e4       	ldi	r18, 0x4D	; 77
    3a72:	34 e0       	ldi	r19, 0x04	; 4
	   y.u16[LSB] = 1101;
   }

   
   // Determine "z" and recognize whether "swipe" type gesture has occured
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
    3a74:	01 3f       	cpi	r16, 0xF1	; 241
    3a76:	11 05       	cpc	r17, r1
    3a78:	20 f4       	brcc	.+8      	; 0x3a82 <SliderAlgorithm+0x156>
    3a7a:	81 ef       	ldi	r24, 0xF1	; 241
    3a7c:	88 16       	cp	r8, r24
    3a7e:	91 04       	cpc	r9, r1
    3a80:	c8 f1       	brcs	.+114    	; 0x3af4 <SliderAlgorithm+0x1c8>
   {
      // check for end of swipe
      if (out_of_range == 0)
    3a82:	80 91 11 20 	lds	r24, 0x2011
    3a86:	81 11       	cpse	r24, r1
    3a88:	1e c0       	rjmp	.+60     	; 0x3ac6 <SliderAlgorithm+0x19a>
      {
        xexit = xlast;
    3a8a:	80 91 54 2a 	lds	r24, 0x2A54
    3a8e:	90 91 55 2a 	lds	r25, 0x2A55
    3a92:	80 93 52 2a 	sts	0x2A52, r24
    3a96:	90 93 53 2a 	sts	0x2A53, r25

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
    3a9a:	60 91 50 2a 	lds	r22, 0x2A50
    3a9e:	70 91 51 2a 	lds	r23, 0x2A51
    3aa2:	f6 01       	movw	r30, r12
    3aa4:	e6 1b       	sub	r30, r22
    3aa6:	f7 0b       	sbc	r31, r23
    3aa8:	f3 97       	sbiw	r30, 0x33	; 51
    3aaa:	e2 31       	cpi	r30, 0x12	; 18
    3aac:	f1 40       	sbci	r31, 0x01	; 1
    3aae:	68 f4       	brcc	.+26     	; 0x3aca <SliderAlgorithm+0x19e>
        {
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
    3ab0:	6b 5b       	subi	r22, 0xBB	; 187
    3ab2:	36 2e       	mov	r3, r22
    3ab4:	3c 18       	sub	r3, r12
            xdiff = (s16)xenter-(s16)xexit;
    3ab6:	a0 90 4e 2a 	lds	r10, 0x2A4E
    3aba:	b0 90 4f 2a 	lds	r11, 0x2A4F
    3abe:	a8 1a       	sub	r10, r24
    3ac0:	b9 0a       	sbc	r11, r25
        xexit = xlast;

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
        {
            swipe_detect = 1;   // indicate that a swipe was detected
    3ac2:	e1 e0       	ldi	r30, 0x01	; 1
    3ac4:	03 c0       	rjmp	.+6      	; 0x3acc <SliderAlgorithm+0x1a0>
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    3ac6:	e0 e0       	ldi	r30, 0x00	; 0
    3ac8:	01 c0       	rjmp	.+2      	; 0x3acc <SliderAlgorithm+0x1a0>
    3aca:	e0 e0       	ldi	r30, 0x00	; 0
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
            xdiff = (s16)xenter-(s16)xexit;
        }
      }
      out_of_range = 1;
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	80 93 11 20 	sts	0x2011, r24
      if (xexit > 550)
    3ad2:	80 91 52 2a 	lds	r24, 0x2A52
    3ad6:	90 91 53 2a 	lds	r25, 0x2A53
    3ada:	87 32       	cpi	r24, 0x27	; 39
    3adc:	92 40       	sbci	r25, 0x02	; 2
    3ade:	18 f0       	brcs	.+6      	; 0x3ae6 <SliderAlgorithm+0x1ba>
      {
        x.u16[LSB] = 1101;
    3ae0:	2d e4       	ldi	r18, 0x4D	; 77
    3ae2:	34 e0       	ldi	r19, 0x04	; 4
    3ae4:	02 c0       	rjmp	.+4      	; 0x3aea <SliderAlgorithm+0x1be>
      }
      else
      {
        x.u16[LSB] = 0;
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
      }
      z = MAX_RADIUS;
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3aea:	c0 92 4c 2a 	sts	0x2A4C, r12
    3aee:	d0 92 4d 2a 	sts	0x2A4D, r13
    3af2:	13 c0       	rjmp	.+38     	; 0x3b1a <SliderAlgorithm+0x1ee>
   }
   else
   {
      // check for start of swipe
      if (out_of_range == 1)
    3af4:	80 91 11 20 	lds	r24, 0x2011
    3af8:	81 30       	cpi	r24, 0x01	; 1
    3afa:	41 f4       	brne	.+16     	; 0x3b0c <SliderAlgorithm+0x1e0>
      {
        xenter = x.u16[LSB];
    3afc:	20 93 4e 2a 	sts	0x2A4E, r18
    3b00:	30 93 4f 2a 	sts	0x2A4F, r19
        SwipeStartTime = QS_GlobalCounterOverflow;
    3b04:	c0 92 50 2a 	sts	0x2A50, r12
    3b08:	d0 92 51 2a 	sts	0x2A51, r13
      }
      out_of_range = 0;
    3b0c:	10 92 11 20 	sts	0x2011, r1

      xlast = x.u16[LSB];
    3b10:	20 93 54 2a 	sts	0x2A54, r18
    3b14:	30 93 55 2a 	sts	0x2A55, r19
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    3b18:	e0 e0       	ldi	r30, 0x00	; 0
      {
         z = r1;
      }
   }
   
   int16_t tmp_x = 15-((x.u16[LSB])/73);
    3b1a:	89 01       	movw	r16, r18
    3b1c:	a1 e7       	ldi	r26, 0x71	; 113
    3b1e:	b0 ee       	ldi	r27, 0xE0	; 224
    3b20:	0e 94 47 56 	call	0xac8e	; 0xac8e <__umulhisi3>
    3b24:	9c 01       	movw	r18, r24
    3b26:	00 24       	eor	r0, r0
    3b28:	22 0f       	add	r18, r18
    3b2a:	33 1f       	adc	r19, r19
    3b2c:	00 1c       	adc	r0, r0
    3b2e:	22 0f       	add	r18, r18
    3b30:	33 1f       	adc	r19, r19
    3b32:	00 1c       	adc	r0, r0
    3b34:	23 2f       	mov	r18, r19
    3b36:	30 2d       	mov	r19, r0
    3b38:	8f e0       	ldi	r24, 0x0F	; 15
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	82 1b       	sub	r24, r18
    3b3e:	93 0b       	sbc	r25, r19
   
   if (tmp_x < 0) {
    3b40:	22 f4       	brpl	.+8      	; 0x3b4a <SliderAlgorithm+0x21e>
	   samples->x_axis = 0;
    3b42:	d7 01       	movw	r26, r14
    3b44:	53 96       	adiw	r26, 0x13	; 19
    3b46:	1c 92       	st	X, r1
    3b48:	0b c0       	rjmp	.+22     	; 0x3b60 <SliderAlgorithm+0x234>
   } else if (tmp_x > 15) {
    3b4a:	80 31       	cpi	r24, 0x10	; 16
    3b4c:	91 05       	cpc	r25, r1
    3b4e:	2c f0       	brlt	.+10     	; 0x3b5a <SliderAlgorithm+0x22e>
	   samples->x_axis = 15;
    3b50:	8f e0       	ldi	r24, 0x0F	; 15
    3b52:	d7 01       	movw	r26, r14
    3b54:	53 96       	adiw	r26, 0x13	; 19
    3b56:	8c 93       	st	X, r24
    3b58:	03 c0       	rjmp	.+6      	; 0x3b60 <SliderAlgorithm+0x234>
   } else {
	   samples->x_axis = tmp_x;   
    3b5a:	d7 01       	movw	r26, r14
    3b5c:	53 96       	adiw	r26, 0x13	; 19
    3b5e:	8c 93       	st	X, r24
   // REPLACE_0_PS3( x.u16[LSB] );
   // REPLACE_0_AUX( z );

   // If a swipe was detected, determine the direction (L/R), set up LED state machine
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
    3b60:	e1 30       	cpi	r30, 0x01	; 1
    3b62:	09 f0       	breq	.+2      	; 0x3b66 <SliderAlgorithm+0x23a>
    3b64:	51 c0       	rjmp	.+162    	; 0x3c08 <SliderAlgorithm+0x2dc>
   {
       if (xdiff > 150)             // Left Swipe
    3b66:	b7 e9       	ldi	r27, 0x97	; 151
    3b68:	ab 16       	cp	r10, r27
    3b6a:	b1 04       	cpc	r11, r1
    3b6c:	14 f1       	brlt	.+68     	; 0x3bb2 <SliderAlgorithm+0x286>
    3b6e:	fe 01       	movw	r30, r28
    3b70:	7f 96       	adiw	r30, 0x1f	; 31
    3b72:	a3 e4       	ldi	r26, 0x43	; 67
    3b74:	ba e2       	ldi	r27, 0x2A	; 42
    3b76:	ce 01       	movw	r24, r28
    3b78:	87 96       	adiw	r24, 0x27	; 39
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
    3b7a:	21 91       	ld	r18, Z+
    3b7c:	2d 93       	st	X+, r18
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
   {
       if (xdiff > 150)             // Left Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    3b7e:	e8 17       	cp	r30, r24
    3b80:	f9 07       	cpc	r31, r25
    3b82:	d9 f7       	brne	.-10     	; 0x3b7a <SliderAlgorithm+0x24e>
    3b84:	88 e0       	ldi	r24, 0x08	; 8
    3b86:	80 93 4b 2a 	sts	0x2A4B, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send LEFT_SWIPE gesture
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
    3b8a:	bf 92       	push	r11
    3b8c:	af 92       	push	r10
    3b8e:	1f 92       	push	r1
    3b90:	3f 92       	push	r3
    3b92:	82 e0       	ldi	r24, 0x02	; 2
    3b94:	95 e2       	ldi	r25, 0x25	; 37
    3b96:	9f 93       	push	r25
    3b98:	8f 93       	push	r24
    3b9a:	8d e0       	ldi	r24, 0x0D	; 13
    3b9c:	95 e2       	ldi	r25, 0x25	; 37
    3b9e:	9f 93       	push	r25
    3ba0:	8f 93       	push	r24
    3ba2:	0e 94 36 58 	call	0xb06c	; 0xb06c <printf>
			samples->gesture = LEFT_SWIPE;
    3ba6:	82 e0       	ldi	r24, 0x02	; 2
    3ba8:	f7 01       	movw	r30, r14
    3baa:	82 8b       	std	Z+18, r24	; 0x12
    3bac:	cd bf       	out	0x3d, r28	; 61
    3bae:	de bf       	out	0x3e, r29	; 62
    3bb0:	2e c0       	rjmp	.+92     	; 0x3c0e <SliderAlgorithm+0x2e2>
       }
       else if (xdiff < -150)       // Right Swipe
    3bb2:	3a e6       	ldi	r19, 0x6A	; 106
    3bb4:	a3 16       	cp	r10, r19
    3bb6:	3f ef       	ldi	r19, 0xFF	; 255
    3bb8:	b3 06       	cpc	r11, r19
    3bba:	4c f5       	brge	.+82     	; 0x3c0e <SliderAlgorithm+0x2e2>
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	b7 96       	adiw	r30, 0x27	; 39
    3bc0:	a3 e4       	ldi	r26, 0x43	; 67
    3bc2:	ba e2       	ldi	r27, 0x2A	; 42
    3bc4:	ce 01       	movw	r24, r28
    3bc6:	8f 96       	adiw	r24, 0x2f	; 47
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
    3bc8:	21 91       	ld	r18, Z+
    3bca:	2d 93       	st	X+, r18
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
			samples->gesture = LEFT_SWIPE;
       }
       else if (xdiff < -150)       // Right Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    3bcc:	e8 17       	cp	r30, r24
    3bce:	f9 07       	cpc	r31, r25
    3bd0:	d9 f7       	brne	.-10     	; 0x3bc8 <SliderAlgorithm+0x29c>
    3bd2:	88 e0       	ldi	r24, 0x08	; 8
    3bd4:	80 93 4b 2a 	sts	0x2A4B, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send RIGHT_SWIPE gesture
            printf("                            %s: %d, %d\n", "RIGHT_SWIPE", swipe_speed, -xdiff) ;     
    3bd8:	b1 94       	neg	r11
    3bda:	a1 94       	neg	r10
    3bdc:	b1 08       	sbc	r11, r1
    3bde:	bf 92       	push	r11
    3be0:	af 92       	push	r10
    3be2:	1f 92       	push	r1
    3be4:	3f 92       	push	r3
    3be6:	85 e3       	ldi	r24, 0x35	; 53
    3be8:	95 e2       	ldi	r25, 0x25	; 37
    3bea:	9f 93       	push	r25
    3bec:	8f 93       	push	r24
    3bee:	8d e0       	ldi	r24, 0x0D	; 13
    3bf0:	95 e2       	ldi	r25, 0x25	; 37
    3bf2:	9f 93       	push	r25
    3bf4:	8f 93       	push	r24
    3bf6:	0e 94 36 58 	call	0xb06c	; 0xb06c <printf>
			samples->gesture = RIGHT_SWIPE;       
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	d7 01       	movw	r26, r14
    3bfe:	52 96       	adiw	r26, 0x12	; 18
    3c00:	8c 93       	st	X, r24
    3c02:	cd bf       	out	0x3d, r28	; 61
    3c04:	de bf       	out	0x3e, r29	; 62
    3c06:	03 c0       	rjmp	.+6      	; 0x3c0e <SliderAlgorithm+0x2e2>
       }
   } else {
	   samples->gesture = 0;
    3c08:	d7 01       	movw	r26, r14
    3c0a:	52 96       	adiw	r26, 0x12	; 18
    3c0c:	1c 92       	st	X, r1
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
   {
        if (x.u16[LSB] < xbucket_Array[xbucket])
    3c0e:	89 81       	ldd	r24, Y+1	; 0x01
    3c10:	9a 81       	ldd	r25, Y+2	; 0x02
    3c12:	08 17       	cp	r16, r24
    3c14:	19 07       	cpc	r17, r25
    3c16:	a8 f0       	brcs	.+42     	; 0x3c42 <SliderAlgorithm+0x316>
    3c18:	fe 01       	movw	r30, r28
    3c1a:	33 96       	adiw	r30, 0x03	; 3

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    3c1c:	21 e0       	ldi	r18, 0x01	; 1
   {
        if (x.u16[LSB] < xbucket_Array[xbucket])
    3c1e:	81 91       	ld	r24, Z+
    3c20:	91 91       	ld	r25, Z+
    3c22:	08 17       	cp	r16, r24
    3c24:	19 07       	cpc	r17, r25
    3c26:	20 f0       	brcs	.+8      	; 0x3c30 <SliderAlgorithm+0x304>

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    3c28:	2f 5f       	subi	r18, 0xFF	; 255
    3c2a:	2a 30       	cpi	r18, 0x0A	; 10
    3c2c:	c1 f7       	brne	.-16     	; 0x3c1e <SliderAlgorithm+0x2f2>
    3c2e:	6e c0       	rjmp	.+220    	; 0x3d0c <SliderAlgorithm+0x3e0>
            break;
        }
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
    3c30:	80 91 42 2a 	lds	r24, 0x2A42
    3c34:	28 13       	cpse	r18, r24
    3c36:	06 c0       	rjmp	.+12     	; 0x3c44 <SliderAlgorithm+0x318>
    3c38:	29 30       	cpi	r18, 0x09	; 9
    3c3a:	21 f0       	breq	.+8      	; 0x3c44 <SliderAlgorithm+0x318>
    3c3c:	21 11       	cpse	r18, r1
    3c3e:	06 c0       	rjmp	.+12     	; 0x3c4c <SliderAlgorithm+0x320>
    3c40:	01 c0       	rjmp	.+2      	; 0x3c44 <SliderAlgorithm+0x318>

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    3c42:	20 e0       	ldi	r18, 0x00	; 0
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
   {
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3c44:	c0 92 4c 2a 	sts	0x2A4C, r12
    3c48:	d0 92 4d 2a 	sts	0x2A4D, r13
   }
   last_xbucket = xbucket;  // store latest information for next comparison
    3c4c:	20 93 42 2a 	sts	0x2A42, r18

   // LED State machine - Pause gesture recognition is also integrated here 
   if (LED_State != 0)  // indicate gesture pattern
    3c50:	e0 91 4b 2a 	lds	r30, 0x2A4B
    3c54:	ee 23       	and	r30, r30
    3c56:	e1 f0       	breq	.+56     	; 0x3c90 <SliderAlgorithm+0x364>
   {
      if ((u8)(QS_GlobalCounterOverflow - LED_flash_timeout) >= LED_STATE_TIME)
    3c58:	80 91 40 2a 	lds	r24, 0x2A40
    3c5c:	bc 2d       	mov	r27, r12
    3c5e:	b8 1b       	sub	r27, r24
    3c60:	b7 32       	cpi	r27, 0x27	; 39
    3c62:	08 f4       	brcc	.+2      	; 0x3c66 <SliderAlgorithm+0x33a>
    3c64:	58 c0       	rjmp	.+176    	; 0x3d16 <SliderAlgorithm+0x3ea>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    3c66:	c0 92 40 2a 	sts	0x2A40, r12
    3c6a:	d0 92 41 2a 	sts	0x2A41, r13

         // Write to Port 1 of the MCU
         PortSet( 1, LED_flash_pattern[(--LED_State)%8]); 
    3c6e:	e1 50       	subi	r30, 0x01	; 1
    3c70:	e0 93 4b 2a 	sts	0x2A4B, r30
    3c74:	e7 70       	andi	r30, 0x07	; 7
    3c76:	f0 e0       	ldi	r31, 0x00	; 0
    3c78:	ed 5b       	subi	r30, 0xBD	; 189
    3c7a:	f5 4d       	sbci	r31, 0xD5	; 213
    3c7c:	60 81       	ld	r22, Z
    3c7e:	70 e0       	ldi	r23, 0x00	; 0
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	dd dc       	rcall	.-1606   	; 0x3640 <PortSet>

         Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3c86:	c0 92 4c 2a 	sts	0x2A4C, r12
    3c8a:	d0 92 4d 2a 	sts	0x2A4D, r13
    3c8e:	43 c0       	rjmp	.+134    	; 0x3d16 <SliderAlgorithm+0x3ea>
      //PortSet( 1, LED_P1_Vals[xbucket]);
	  //printf("x: %d \r\n",x.u16[LSB]);


      // check time stamp for pause
      if ((QS_GlobalCounterOverflow - Pause_gesture_timeout) >= PAUSE_TIMEOUT) 
    3c90:	80 91 4c 2a 	lds	r24, 0x2A4C
    3c94:	90 91 4d 2a 	lds	r25, 0x2A4D
    3c98:	f6 01       	movw	r30, r12
    3c9a:	e8 1b       	sub	r30, r24
    3c9c:	f9 0b       	sbc	r31, r25
    3c9e:	cf 01       	movw	r24, r30
    3ca0:	8a 38       	cpi	r24, 0x8A	; 138
    3ca2:	92 40       	sbci	r25, 0x02	; 2
    3ca4:	c0 f1       	brcs	.+112    	; 0x3d16 <SliderAlgorithm+0x3ea>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    3ca6:	c0 92 40 2a 	sts	0x2A40, r12
    3caa:	d0 92 41 2a 	sts	0x2A41, r13
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3cae:	fe 01       	movw	r30, r28
    3cb0:	e2 0f       	add	r30, r18
    3cb2:	f1 1d       	adc	r31, r1
    3cb4:	85 89       	ldd	r24, Z+21	; 0x15
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    3cb6:	9f ef       	ldi	r25, 0xFF	; 255
    3cb8:	90 93 43 2a 	sts	0x2A43, r25
            LED_flash_pattern[LED_State++] = 0xFF;
    3cbc:	90 93 44 2a 	sts	0x2A44, r25
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3cc0:	80 93 45 2a 	sts	0x2A45, r24
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3cc4:	80 93 46 2a 	sts	0x2A46, r24
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    3cc8:	90 93 47 2a 	sts	0x2A47, r25
            LED_flash_pattern[LED_State++] = 0xFF;
    3ccc:	90 93 48 2a 	sts	0x2A48, r25
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3cd0:	80 93 49 2a 	sts	0x2A49, r24
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3cd4:	80 93 4a 2a 	sts	0x2A4A, r24
         } // LED_State should be 8 when this loop is finished.

         LED_State = 16; // Set LED_State to 16 to repeat the pattern twice
    3cd8:	80 e1       	ldi	r24, 0x10	; 16
    3cda:	80 93 4b 2a 	sts	0x2A4B, r24

         // Send off a PAUSE gesture to host.
         printf("                            %s: %d\n", "PAUSE", xbucket<<8) ;   
    3cde:	2f 93       	push	r18
    3ce0:	1f 92       	push	r1
    3ce2:	81 e4       	ldi	r24, 0x41	; 65
    3ce4:	95 e2       	ldi	r25, 0x25	; 37
    3ce6:	9f 93       	push	r25
    3ce8:	8f 93       	push	r24
    3cea:	87 e4       	ldi	r24, 0x47	; 71
    3cec:	95 e2       	ldi	r25, 0x25	; 37
    3cee:	9f 93       	push	r25
    3cf0:	8f 93       	push	r24
    3cf2:	0e 94 36 58 	call	0xb06c	; 0xb06c <printf>
		 samples->gesture = PAUSE;         
    3cf6:	83 e0       	ldi	r24, 0x03	; 3
    3cf8:	d7 01       	movw	r26, r14
    3cfa:	52 96       	adiw	r26, 0x12	; 18
    3cfc:	8c 93       	st	X, r24
    3cfe:	0f 90       	pop	r0
    3d00:	0f 90       	pop	r0
    3d02:	0f 90       	pop	r0
    3d04:	0f 90       	pop	r0
    3d06:	0f 90       	pop	r0
    3d08:	0f 90       	pop	r0
    3d0a:	05 c0       	rjmp	.+10     	; 0x3d16 <SliderAlgorithm+0x3ea>
            break;
        }
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
    3d0c:	80 91 42 2a 	lds	r24, 0x2A42
    3d10:	28 13       	cpse	r18, r24
    3d12:	98 cf       	rjmp	.-208    	; 0x3c44 <SliderAlgorithm+0x318>
    3d14:	9b cf       	rjmp	.-202    	; 0x3c4c <SliderAlgorithm+0x320>
       // It is best to display this than printf. Use AUX and PS3 channels
       //REPLACE_0_PS3( 0 );
       //REPLACE_0_AUX( 0 ); 
	    //printf("no touch \r\n");
   }
}
    3d16:	ae 96       	adiw	r28, 0x2e	; 46
    3d18:	cd bf       	out	0x3d, r28	; 61
    3d1a:	de bf       	out	0x3e, r29	; 62
    3d1c:	df 91       	pop	r29
    3d1e:	cf 91       	pop	r28
    3d20:	1f 91       	pop	r17
    3d22:	0f 91       	pop	r16
    3d24:	ff 90       	pop	r15
    3d26:	ef 90       	pop	r14
    3d28:	df 90       	pop	r13
    3d2a:	cf 90       	pop	r12
    3d2c:	bf 90       	pop	r11
    3d2e:	af 90       	pop	r10
    3d30:	9f 90       	pop	r9
    3d32:	8f 90       	pop	r8
    3d34:	7f 90       	pop	r7
    3d36:	6f 90       	pop	r6
    3d38:	5f 90       	pop	r5
    3d3a:	4f 90       	pop	r4
    3d3c:	3f 90       	pop	r3
    3d3e:	08 95       	ret

00003d40 <spi_setup>:

#include "spi.h"

void spi_setup(void) 
{	
	SD_PORT.DIRSET = SD_CS | SD_MOSI | SD_SCK;
    3d40:	e0 e4       	ldi	r30, 0x40	; 64
    3d42:	f6 e0       	ldi	r31, 0x06	; 6
    3d44:	80 eb       	ldi	r24, 0xB0	; 176
    3d46:	81 83       	std	Z+1, r24	; 0x01
	SD_PORT.OUTSET = SD_CS;
    3d48:	80 e1       	ldi	r24, 0x10	; 16
    3d4a:	85 83       	std	Z+5, r24	; 0x05
	SD_SPI.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    3d4c:	80 ed       	ldi	r24, 0xD0	; 208
    3d4e:	80 93 c0 08 	sts	0x08C0, r24
    3d52:	08 95       	ret

00003d54 <spi_off>:
}

void spi_off(void) 
{	
	SD_SPI.CTRL &= ~(SPI_ENABLE_bm);
    3d54:	e0 ec       	ldi	r30, 0xC0	; 192
    3d56:	f8 e0       	ldi	r31, 0x08	; 8
    3d58:	80 81       	ld	r24, Z
    3d5a:	8f 7b       	andi	r24, 0xBF	; 191
    3d5c:	80 83       	st	Z, r24
	SD_PORT.DIRCLR = SD_CS | SD_MOSI | SD_SCK;
    3d5e:	e0 e4       	ldi	r30, 0x40	; 64
    3d60:	f6 e0       	ldi	r31, 0x06	; 6
    3d62:	80 eb       	ldi	r24, 0xB0	; 176
    3d64:	82 83       	std	Z+2, r24	; 0x02
	SD_PORT.PIN4CTRL = PORT_OPC_PULLUP_gc;
    3d66:	88 e1       	ldi	r24, 0x18	; 24
    3d68:	84 8b       	std	Z+20, r24	; 0x14
	SD_PORT.PIN5CTRL = PORT_OPC_PULLUP_gc;
    3d6a:	85 8b       	std	Z+21, r24	; 0x15
	SD_PORT.PIN6CTRL = PORT_OPC_PULLUP_gc;
    3d6c:	86 8b       	std	Z+22, r24	; 0x16
	SD_PORT.PIN7CTRL = PORT_OPC_PULLUP_gc;
    3d6e:	87 8b       	std	Z+23, r24	; 0x17
    3d70:	08 95       	ret

00003d72 <spi_wr_rd>:
}

uint8_t spi_wr_rd(uint8_t data) 
{	
	SD_SPI.DATA = data;
    3d72:	e0 ec       	ldi	r30, 0xC0	; 192
    3d74:	f8 e0       	ldi	r31, 0x08	; 8
    3d76:	83 83       	std	Z+3, r24	; 0x03
	//Warning: this may hang
	while(!(SPIC.STATUS & SPI_IF_bm));
    3d78:	82 81       	ldd	r24, Z+2	; 0x02
    3d7a:	88 23       	and	r24, r24
    3d7c:	ec f7       	brge	.-6      	; 0x3d78 <spi_wr_rd+0x6>
	return SD_SPI.DATA;
    3d7e:	e0 ec       	ldi	r30, 0xC0	; 192
    3d80:	f8 e0       	ldi	r31, 0x08	; 8
    3d82:	83 81       	ldd	r24, Z+3	; 0x03
}
    3d84:	08 95       	ret

00003d86 <twi_setup>:
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3d86:	e0 e8       	ldi	r30, 0x80	; 128
    3d88:	f4 e0       	ldi	r31, 0x04	; 4
    3d8a:	12 82       	std	Z+2, r1	; 0x02
    3d8c:	89 e0       	ldi	r24, 0x09	; 9
    3d8e:	85 83       	std	Z+5, r24	; 0x05
    3d90:	88 e0       	ldi	r24, 0x08	; 8
    3d92:	81 83       	std	Z+1, r24	; 0x01
    3d94:	81 e0       	ldi	r24, 0x01	; 1
    3d96:	84 83       	std	Z+4, r24	; 0x04
    3d98:	08 95       	ret

00003d9a <twi_start_transmission>:
}

uint8_t twi_start_transmission(TWI_t* const TWI,
const uint8_t slave_address,
const uint8_t timeout_ms)
{
    3d9a:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    3d9c:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    3d9e:	84 e6       	ldi	r24, 0x64	; 100
    3da0:	48 9f       	mul	r20, r24
    3da2:	a0 01       	movw	r20, r0
    3da4:	11 24       	eor	r1, r1
	while (timeout_remaining)
    3da6:	41 15       	cp	r20, r1
    3da8:	51 05       	cpc	r21, r1
    3daa:	09 f1       	breq	.+66     	; 0x3dee <twi_start_transmission+0x54>
	{
		uint8_t status = TWI->MASTER.STATUS;
    3dac:	84 81       	ldd	r24, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    3dae:	98 2f       	mov	r25, r24
    3db0:	98 74       	andi	r25, 0x48	; 72
    3db2:	98 34       	cpi	r25, 0x48	; 72
    3db4:	11 f4       	brne	.+4      	; 0x3dba <twi_start_transmission+0x20>
		{
			TWI->MASTER.ADDR = slave_address;
    3db6:	66 83       	std	Z+6, r22	; 0x06
    3db8:	0a c0       	rjmp	.+20     	; 0x3dce <twi_start_transmission+0x34>
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    3dba:	98 2f       	mov	r25, r24
    3dbc:	90 75       	andi	r25, 0x50	; 80
    3dbe:	90 35       	cpi	r25, 0x50	; 80
    3dc0:	21 f4       	brne	.+8      	; 0x3dca <twi_start_transmission+0x30>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3dc2:	87 e0       	ldi	r24, 0x07	; 7
    3dc4:	83 83       	std	Z+3, r24	; 0x03
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
    3dc6:	84 e0       	ldi	r24, 0x04	; 4
    3dc8:	08 95       	ret
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    3dca:	80 7c       	andi	r24, 0xC0	; 192
    3dcc:	71 f4       	brne	.+28     	; 0x3dea <twi_start_transmission+0x50>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3dce:	8a e6       	ldi	r24, 0x6A	; 106
    3dd0:	8a 95       	dec	r24
    3dd2:	f1 f7       	brne	.-4      	; 0x3dd0 <twi_start_transmission+0x36>
    3dd4:	00 c0       	rjmp	.+0      	; 0x3dd6 <twi_start_transmission+0x3c>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    3dd6:	41 50       	subi	r20, 0x01	; 1
    3dd8:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    3dda:	41 15       	cp	r20, r1
    3ddc:	51 05       	cpc	r21, r1
    3dde:	31 f7       	brne	.-52     	; 0x3dac <twi_start_transmission+0x12>
    3de0:	06 c0       	rjmp	.+12     	; 0x3dee <twi_start_transmission+0x54>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3de2:	87 e0       	ldi	r24, 0x07	; 7
    3de4:	83 83       	std	Z+3, r24	; 0x03
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
			twi_stop_transmission(TWI);
		}
	}

	return TWI_ERROR_BUS_CAP_TIMEOUT;
    3de6:	83 e0       	ldi	r24, 0x03	; 3
    3de8:	08 95       	ret
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
		{
			return TWI_ERROR_NO_ERROR;
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	08 95       	ret
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    3dee:	84 81       	ldd	r24, Z+4	; 0x04
    3df0:	85 fd       	sbrc	r24, 5
    3df2:	f7 cf       	rjmp	.-18     	; 0x3de2 <twi_start_transmission+0x48>
			twi_stop_transmission(TWI);
		}
	}

	return TWI_ERROR_BUS_CAP_TIMEOUT;
    3df4:	83 e0       	ldi	r24, 0x03	; 3
}
    3df6:	08 95       	ret

00003df8 <twi_send_byte>:

uint8_t twi_send_byte(TWI_t* const TWI,
const uint8_t timeout_ms,
const uint8_t data)
{
    3df8:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
    3dfa:	47 83       	std	Z+7, r20	; 0x07
	
	timeout_remaining = (timeout_ms * 100);
    3dfc:	84 e6       	ldi	r24, 0x64	; 100
    3dfe:	68 9f       	mul	r22, r24
    3e00:	b0 01       	movw	r22, r0
    3e02:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    3e04:	84 81       	ldd	r24, Z+4	; 0x04
    3e06:	86 fd       	sbrc	r24, 6
    3e08:	0f c0       	rjmp	.+30     	; 0x3e28 <twi_send_byte+0x30>
    3e0a:	61 15       	cp	r22, r1
    3e0c:	71 05       	cpc	r23, r1
    3e0e:	61 f0       	breq	.+24     	; 0x3e28 <twi_send_byte+0x30>
    3e10:	8a e6       	ldi	r24, 0x6A	; 106
    3e12:	8a 95       	dec	r24
    3e14:	f1 f7       	brne	.-4      	; 0x3e12 <twi_send_byte+0x1a>
    3e16:	00 c0       	rjmp	.+0      	; 0x3e18 <twi_send_byte+0x20>
		_delay_us(10);
		timeout_remaining--;
    3e18:	61 50       	subi	r22, 0x01	; 1
    3e1a:	71 09       	sbc	r23, r1
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
	
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    3e1c:	84 81       	ldd	r24, Z+4	; 0x04
    3e1e:	86 fd       	sbrc	r24, 6
    3e20:	03 c0       	rjmp	.+6      	; 0x3e28 <twi_send_byte+0x30>
    3e22:	61 15       	cp	r22, r1
    3e24:	71 05       	cpc	r23, r1
    3e26:	a1 f7       	brne	.-24     	; 0x3e10 <twi_send_byte+0x18>
		_delay_us(10);
		timeout_remaining--;
	}

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    3e28:	84 81       	ldd	r24, Z+4	; 0x04
    3e2a:	86 ff       	sbrs	r24, 6
    3e2c:	06 c0       	rjmp	.+12     	; 0x3e3a <twi_send_byte+0x42>
    3e2e:	94 81       	ldd	r25, Z+4	; 0x04
    3e30:	92 95       	swap	r25
    3e32:	91 70       	andi	r25, 0x01	; 1
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	89 27       	eor	r24, r25
    3e38:	08 95       	ret
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
}
    3e3c:	08 95       	ret

00003e3e <twi_receive_byte>:

uint8_t twi_receive_byte(TWI_t* const TWI,
const uint8_t timeout_ms,
uint8_t* const data,
const uint8_t end_of_data)
{
    3e3e:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
    3e40:	84 81       	ldd	r24, Z+4	; 0x04
    3e42:	8c 70       	andi	r24, 0x0C	; 12
    3e44:	8c 30       	cpi	r24, 0x0C	; 12
    3e46:	19 f1       	breq	.+70     	; 0x3e8e <twi_receive_byte+0x50>
		return false;
	}
	timeout_remaining = (timeout_ms * 100);
    3e48:	84 e6       	ldi	r24, 0x64	; 100
    3e4a:	68 9f       	mul	r22, r24
    3e4c:	b0 01       	movw	r22, r0
    3e4e:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm) && timeout_remaining) {
    3e50:	84 81       	ldd	r24, Z+4	; 0x04
    3e52:	88 23       	and	r24, r24
    3e54:	7c f0       	brlt	.+30     	; 0x3e74 <twi_receive_byte+0x36>
    3e56:	61 15       	cp	r22, r1
    3e58:	71 05       	cpc	r23, r1
    3e5a:	61 f0       	breq	.+24     	; 0x3e74 <twi_receive_byte+0x36>
    3e5c:	aa e6       	ldi	r26, 0x6A	; 106
    3e5e:	aa 95       	dec	r26
    3e60:	f1 f7       	brne	.-4      	; 0x3e5e <twi_receive_byte+0x20>
    3e62:	00 c0       	rjmp	.+0      	; 0x3e64 <twi_receive_byte+0x26>
		_delay_us(10);
		timeout_remaining--;
    3e64:	61 50       	subi	r22, 0x01	; 1
    3e66:	71 09       	sbc	r23, r1
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
		return false;
	}
	timeout_remaining = (timeout_ms * 100);
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm) && timeout_remaining) {
    3e68:	84 81       	ldd	r24, Z+4	; 0x04
    3e6a:	88 23       	and	r24, r24
    3e6c:	1c f0       	brlt	.+6      	; 0x3e74 <twi_receive_byte+0x36>
    3e6e:	61 15       	cp	r22, r1
    3e70:	71 05       	cpc	r23, r1
    3e72:	a1 f7       	brne	.-24     	; 0x3e5c <twi_receive_byte+0x1e>
		_delay_us(10);
		timeout_remaining--;
	}

	*data = TWI->MASTER.DATA;
    3e74:	87 81       	ldd	r24, Z+7	; 0x07
    3e76:	da 01       	movw	r26, r20
    3e78:	8c 93       	st	X, r24

	if (end_of_data)
    3e7a:	22 23       	and	r18, r18
    3e7c:	21 f0       	breq	.+8      	; 0x3e86 <twi_receive_byte+0x48>
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3e7e:	87 e0       	ldi	r24, 0x07	; 7
    3e80:	83 83       	std	Z+3, r24	; 0x03
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	08 95       	ret
	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    3e86:	82 e0       	ldi	r24, 0x02	; 2
    3e88:	83 83       	std	Z+3, r24	; 0x03

	return true;
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	08 95       	ret
const uint8_t end_of_data)
{
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
		return false;
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
}
    3e90:	08 95       	ret

00003e92 <twi_read_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
uint8_t* data,
uint8_t length)
{
    3e92:	bf 92       	push	r11
    3e94:	cf 92       	push	r12
    3e96:	df 92       	push	r13
    3e98:	ef 92       	push	r14
    3e9a:	ff 92       	push	r15
    3e9c:	0f 93       	push	r16
    3e9e:	1f 93       	push	r17
    3ea0:	cf 93       	push	r28
    3ea2:	df 93       	push	r29
    3ea4:	ec 01       	movw	r28, r24
    3ea6:	d6 2e       	mov	r13, r22
    3ea8:	f4 2e       	mov	r15, r20
    3eaa:	c2 2e       	mov	r12, r18
	uint8_t error_code;
	uint8_t len = length;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    3eac:	66 0f       	add	r22, r22
    3eae:	75 df       	rcall	.-278    	; 0x3d9a <twi_start_transmission>
    3eb0:	81 30       	cpi	r24, 0x01	; 1
    3eb2:	41 f5       	brne	.+80     	; 0x3f04 <twi_read_packet+0x72>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
    3eb4:	4c 2d       	mov	r20, r12
    3eb6:	6f 2d       	mov	r22, r15
    3eb8:	ce 01       	movw	r24, r28
    3eba:	9e df       	rcall	.-196    	; 0x3df8 <twi_send_byte>
    3ebc:	88 23       	and	r24, r24
    3ebe:	21 f1       	breq	.+72     	; 0x3f08 <twi_read_packet+0x76>
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
    3ec0:	6d 2d       	mov	r22, r13
    3ec2:	66 0f       	add	r22, r22
    3ec4:	61 60       	ori	r22, 0x01	; 1
    3ec6:	4f 2d       	mov	r20, r15
    3ec8:	ce 01       	movw	r24, r28
    3eca:	67 df       	rcall	.-306    	; 0x3d9a <twi_start_transmission>
    3ecc:	81 30       	cpi	r24, 0x01	; 1
    3ece:	b1 f4       	brne	.+44     	; 0x3efc <twi_read_packet+0x6a>
    3ed0:	bb 24       	eor	r11, r11
    3ed2:	ba 94       	dec	r11
    3ed4:	be 0c       	add	r11, r14
    3ed6:	0f c0       	rjmp	.+30     	; 0x3ef6 <twi_read_packet+0x64>
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
			{
				if (!(twi_receive_byte(TWI, timeout_ms, data++, (length == 0))))
    3ed8:	68 01       	movw	r12, r16
    3eda:	8f ef       	ldi	r24, 0xFF	; 255
    3edc:	c8 1a       	sub	r12, r24
    3ede:	d8 0a       	sbc	r13, r24
    3ee0:	21 e0       	ldi	r18, 0x01	; 1
    3ee2:	b1 10       	cpse	r11, r1
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	a8 01       	movw	r20, r16
    3ee8:	6f 2d       	mov	r22, r15
    3eea:	ce 01       	movw	r24, r28
    3eec:	a8 df       	rcall	.-176    	; 0x3e3e <twi_receive_byte>
    3eee:	ba 94       	dec	r11
    3ef0:	88 23       	and	r24, r24
    3ef2:	21 f0       	breq	.+8      	; 0x3efc <twi_read_packet+0x6a>
    3ef4:	86 01       	movw	r16, r12
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
    3ef6:	8f ef       	ldi	r24, 0xFF	; 255
    3ef8:	b8 12       	cpse	r11, r24
    3efa:	ee cf       	rjmp	.-36     	; 0x3ed8 <twi_read_packet+0x46>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3efc:	87 e0       	ldi	r24, 0x07	; 7
    3efe:	8b 83       	std	Y+3, r24	; 0x03
		}

		twi_stop_transmission(TWI);
	}

	return len;
    3f00:	8e 2d       	mov	r24, r14
    3f02:	03 c0       	rjmp	.+6      	; 0x3f0a <twi_read_packet+0x78>
    3f04:	8e 2d       	mov	r24, r14
    3f06:	01 c0       	rjmp	.+2      	; 0x3f0a <twi_read_packet+0x78>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    3f08:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return len;
}
    3f0a:	df 91       	pop	r29
    3f0c:	cf 91       	pop	r28
    3f0e:	1f 91       	pop	r17
    3f10:	0f 91       	pop	r16
    3f12:	ff 90       	pop	r15
    3f14:	ef 90       	pop	r14
    3f16:	df 90       	pop	r13
    3f18:	cf 90       	pop	r12
    3f1a:	bf 90       	pop	r11
    3f1c:	08 95       	ret

00003f1e <twi_write_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    3f1e:	cf 92       	push	r12
    3f20:	df 92       	push	r13
    3f22:	ef 92       	push	r14
    3f24:	ff 92       	push	r15
    3f26:	0f 93       	push	r16
    3f28:	1f 93       	push	r17
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	ec 01       	movw	r28, r24
    3f30:	f4 2e       	mov	r15, r20
    3f32:	d2 2e       	mov	r13, r18
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    3f34:	66 0f       	add	r22, r22
    3f36:	31 df       	rcall	.-414    	; 0x3d9a <twi_start_transmission>
    3f38:	81 30       	cpi	r24, 0x01	; 1
    3f3a:	e1 f4       	brne	.+56     	; 0x3f74 <twi_write_packet+0x56>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
    3f3c:	4d 2d       	mov	r20, r13
    3f3e:	6f 2d       	mov	r22, r15
    3f40:	ce 01       	movw	r24, r28
    3f42:	5a df       	rcall	.-332    	; 0x3df8 <twi_send_byte>
    3f44:	88 23       	and	r24, r24
    3f46:	c1 f0       	breq	.+48     	; 0x3f78 <twi_write_packet+0x5a>
    3f48:	ea 94       	dec	r14
    3f4a:	c0 2e       	mov	r12, r16
    3f4c:	d1 2e       	mov	r13, r17
    3f4e:	0b c0       	rjmp	.+22     	; 0x3f66 <twi_write_packet+0x48>
			return error_code;
		}

		while (length--)
		{
			if (!(twi_send_byte(TWI, timeout_ms, *(data++))))
    3f50:	f6 01       	movw	r30, r12
    3f52:	41 91       	ld	r20, Z+
    3f54:	6f 01       	movw	r12, r30
    3f56:	6f 2d       	mov	r22, r15
    3f58:	ce 01       	movw	r24, r28
    3f5a:	4e df       	rcall	.-356    	; 0x3df8 <twi_send_byte>
    3f5c:	9f ef       	ldi	r25, 0xFF	; 255
    3f5e:	9e 0d       	add	r25, r14
    3f60:	88 23       	and	r24, r24
    3f62:	21 f0       	breq	.+8      	; 0x3f6c <twi_write_packet+0x4e>
    3f64:	e9 2e       	mov	r14, r25
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    3f66:	ff ef       	ldi	r31, 0xFF	; 255
    3f68:	ef 12       	cpse	r14, r31
    3f6a:	f2 cf       	rjmp	.-28     	; 0x3f50 <twi_write_packet+0x32>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3f6c:	87 e0       	ldi	r24, 0x07	; 7
    3f6e:	8b 83       	std	Y+3, r24	; 0x03
    3f70:	8e 2d       	mov	r24, r14
    3f72:	03 c0       	rjmp	.+6      	; 0x3f7a <twi_write_packet+0x5c>
    3f74:	8e 2d       	mov	r24, r14
    3f76:	01 c0       	rjmp	.+2      	; 0x3f7a <twi_write_packet+0x5c>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    3f78:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return length;
    3f7a:	df 91       	pop	r29
    3f7c:	cf 91       	pop	r28
    3f7e:	1f 91       	pop	r17
    3f80:	0f 91       	pop	r16
    3f82:	ff 90       	pop	r15
    3f84:	ef 90       	pop	r14
    3f86:	df 90       	pop	r13
    3f88:	cf 90       	pop	r12
    3f8a:	08 95       	ret

00003f8c <uart_setup>:

#include "uart.h"

void uart_setup(void) 
{	
	UART_PORT.DIRSET = UART_TX;
    3f8c:	e0 e6       	ldi	r30, 0x60	; 96
    3f8e:	f6 e0       	ldi	r31, 0x06	; 6
    3f90:	88 e0       	ldi	r24, 0x08	; 8
    3f92:	81 83       	std	Z+1, r24	; 0x01
	UART_PORT.DIRCLR = UART_RX;
    3f94:	84 e0       	ldi	r24, 0x04	; 4
    3f96:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
    3f98:	e0 ea       	ldi	r30, 0xA0	; 160
    3f9a:	f9 e0       	ldi	r31, 0x09	; 9
    3f9c:	80 e2       	ldi	r24, 0x20	; 32
    3f9e:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 2094;
    3fa0:	8e e2       	ldi	r24, 0x2E	; 46
    3fa2:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (-7 << 4) | (2094 >> 8);
    3fa4:	88 e9       	ldi	r24, 0x98	; 152
    3fa6:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
    3fa8:	83 e0       	ldi	r24, 0x03	; 3
    3faa:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    3fac:	88 e1       	ldi	r24, 0x18	; 24
    3fae:	84 83       	std	Z+4, r24	; 0x04
    3fb0:	08 95       	ret

00003fb2 <uart_put_char>:
}

void uart_put_char(char c) 
{
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    3fb2:	e0 ea       	ldi	r30, 0xA0	; 160
    3fb4:	f9 e0       	ldi	r31, 0x09	; 9
    3fb6:	91 81       	ldd	r25, Z+1	; 0x01
    3fb8:	95 ff       	sbrs	r25, 5
    3fba:	fd cf       	rjmp	.-6      	; 0x3fb6 <uart_put_char+0x4>
	USARTD0.DATA = c;
    3fbc:	80 93 a0 09 	sts	0x09A0, r24
    3fc0:	08 95       	ret

00003fc2 <uart_get_char>:
}

char uart_get_char(void) 
{
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
    3fc2:	e0 ea       	ldi	r30, 0xA0	; 160
    3fc4:	f9 e0       	ldi	r31, 0x09	; 9
    3fc6:	81 81       	ldd	r24, Z+1	; 0x01
    3fc8:	88 23       	and	r24, r24
    3fca:	ec f7       	brge	.-6      	; 0x3fc6 <uart_get_char+0x4>
	return USARTD0.DATA;
    3fcc:	80 91 a0 09 	lds	r24, 0x09A0
}
    3fd0:	08 95       	ret

00003fd2 <uart_write_str>:

void uart_write_str(char *str) 
{
    3fd2:	cf 93       	push	r28
    3fd4:	df 93       	push	r29
    3fd6:	ec 01       	movw	r28, r24
	while (*str) {
    3fd8:	88 81       	ld	r24, Y
    3fda:	88 23       	and	r24, r24
    3fdc:	29 f0       	breq	.+10     	; 0x3fe8 <uart_write_str+0x16>
    3fde:	21 96       	adiw	r28, 0x01	; 1
		uart_put_char(*str++);
    3fe0:	e8 df       	rcall	.-48     	; 0x3fb2 <uart_put_char>
	return USARTD0.DATA;
}

void uart_write_str(char *str) 
{
	while (*str) {
    3fe2:	89 91       	ld	r24, Y+
    3fe4:	81 11       	cpse	r24, r1
    3fe6:	fc cf       	rjmp	.-8      	; 0x3fe0 <uart_write_str+0xe>
		uart_put_char(*str++);
	}
	uart_put_char('\r');
    3fe8:	8d e0       	ldi	r24, 0x0D	; 13
    3fea:	e3 df       	rcall	.-58     	; 0x3fb2 <uart_put_char>
	uart_put_char('\n');
    3fec:	8a e0       	ldi	r24, 0x0A	; 10
    3fee:	e1 df       	rcall	.-62     	; 0x3fb2 <uart_put_char>
}
    3ff0:	df 91       	pop	r29
    3ff2:	cf 91       	pop	r28
    3ff4:	08 95       	ret

00003ff6 <__vector_18>:
	dac_setup(false);
	timer_setup();
}

ISR(TCC0_CCC_vect) 
{
    3ff6:	1f 92       	push	r1
    3ff8:	0f 92       	push	r0
    3ffa:	0f b6       	in	r0, 0x3f	; 63
    3ffc:	0f 92       	push	r0
    3ffe:	11 24       	eor	r1, r1
    4000:	0b b6       	in	r0, 0x3b	; 59
    4002:	0f 92       	push	r0
    4004:	8f 93       	push	r24
    4006:	9f 93       	push	r25
    4008:	ef 93       	push	r30
    400a:	ff 93       	push	r31
	if (test_val == 1)
    400c:	80 91 56 2a 	lds	r24, 0x2A56
    4010:	90 91 57 2a 	lds	r25, 0x2A57
    4014:	01 97       	sbiw	r24, 0x01	; 1
    4016:	59 f4       	brne	.+22     	; 0x402e <__vector_18+0x38>
	{
		DACB.CH0DATA = 0xfff;
    4018:	8f ef       	ldi	r24, 0xFF	; 255
    401a:	9f e0       	ldi	r25, 0x0F	; 15
    401c:	e0 e2       	ldi	r30, 0x20	; 32
    401e:	f3 e0       	ldi	r31, 0x03	; 3
    4020:	80 8f       	std	Z+24, r24	; 0x18
    4022:	91 8f       	std	Z+25, r25	; 0x19
		test_val = 0;
    4024:	10 92 56 2a 	sts	0x2A56, r1
    4028:	10 92 57 2a 	sts	0x2A57, r1
    402c:	0a c0       	rjmp	.+20     	; 0x4042 <__vector_18+0x4c>
	} else {
		DACB.CH0DATA = 0x000;
    402e:	e0 e2       	ldi	r30, 0x20	; 32
    4030:	f3 e0       	ldi	r31, 0x03	; 3
    4032:	10 8e       	std	Z+24, r1	; 0x18
    4034:	11 8e       	std	Z+25, r1	; 0x19
		test_val = 1;
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	80 93 56 2a 	sts	0x2A56, r24
    403e:	90 93 57 2a 	sts	0x2A57, r25
	}
	
}
    4042:	ff 91       	pop	r31
    4044:	ef 91       	pop	r30
    4046:	9f 91       	pop	r25
    4048:	8f 91       	pop	r24
    404a:	0f 90       	pop	r0
    404c:	0b be       	out	0x3b, r0	; 59
    404e:	0f 90       	pop	r0
    4050:	0f be       	out	0x3f, r0	; 63
    4052:	0f 90       	pop	r0
    4054:	1f 90       	pop	r1
    4056:	18 95       	reti

00004058 <main>:
{
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
}

int main(void) 
{	
    4058:	cf 93       	push	r28
    405a:	df 93       	push	r29
    405c:	cd b7       	in	r28, 0x3d	; 61
    405e:	de b7       	in	r29, 0x3e	; 62
    4060:	64 97       	sbiw	r28, 0x14	; 20
    4062:	cd bf       	out	0x3d, r28	; 61
    4064:	de bf       	out	0x3e, r29	; 62
	//Structures
	SI114X_IRQ_SAMPLE sensor_data;
	
	//System
	clock_setup_32_mhz();
    4066:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <clock_setup_32_mhz>
	display_setup();
    406a:	d6 d0       	rcall	.+428    	; 0x4218 <display_setup>
	adc_disable_current_measurement();
    406c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <adc_disable_current_measurement>
	esp8266_off();
    4070:	0e 94 af 09 	call	0x135e	; 0x135e <esp8266_off>
	
	//Init env variables
	if(1)
	//if (!EEPROM_ReadEnv())
	{
		menu_set_env_variables();
    4074:	0e 94 f7 49 	call	0x93ee	; 0x93ee <menu_set_env_variables>
	}
	
	//Debug interface
	uart_setup();
    4078:	89 df       	rcall	.-238    	; 0x3f8c <uart_setup>
	stdout = stdin = &mystdout;
    407a:	82 e1       	ldi	r24, 0x12	; 18
    407c:	90 e2       	ldi	r25, 0x20	; 32
    407e:	80 93 1c 2c 	sts	0x2C1C, r24
    4082:	90 93 1d 2c 	sts	0x2C1D, r25
    4086:	80 93 1e 2c 	sts	0x2C1E, r24
    408a:	90 93 1f 2c 	sts	0x2C1F, r25

#ifdef DEBUG_ON
	puts("SMART Clock - By: Erlend Hestnes\r\n");
    408e:	8b e6       	ldi	r24, 0x6B	; 107
    4090:	95 e2       	ldi	r25, 0x25	; 37
    4092:	0e 94 47 58 	call	0xb08e	; 0xb08e <puts>

static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) 
{
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    4096:	87 e0       	ldi	r24, 0x07	; 7
    4098:	e0 ea       	ldi	r30, 0xA0	; 160
    409a:	f0 e0       	ldi	r31, 0x00	; 0
    409c:	82 83       	std	Z+2, r24	; 0x02
	puts("SMART Clock - By: Erlend Hestnes\r\n");
#endif

	//Enable interrupts
	pmic_setup();
	btn_setup(true);
    409e:	81 e0       	ldi	r24, 0x01	; 1
    40a0:	0e 94 32 12 	call	0x2464	; 0x2464 <btn_setup>
	
	twi_setup(&TWIC);
    40a4:	80 e8       	ldi	r24, 0x80	; 128
    40a6:	94 e0       	ldi	r25, 0x04	; 4
    40a8:	6e de       	rcall	.-804    	; 0x3d86 <twi_setup>

	SLEEP.CTRL |= SLEEP_MODE_PWR_SAVE;
    40aa:	e8 e4       	ldi	r30, 0x48	; 72
    40ac:	f0 e0       	ldi	r31, 0x00	; 0
    40ae:	80 81       	ld	r24, Z
    40b0:	86 60       	ori	r24, 0x06	; 6
    40b2:	80 83       	st	Z, r24
	
	sei();
    40b4:	78 94       	sei
	
	//Calculate baseline for Si114x
	si114x_baseline_calibration(&sensor_data);
    40b6:	ce 01       	movw	r24, r28
    40b8:	01 96       	adiw	r24, 0x01	; 1
    40ba:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <si114x_baseline_calibration>
		_delay_ms(500);	
	}
	*/
	
	//Turn on proximity channel 1 with ISR and threshold
	si114x_setup_ps1_only();
    40be:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <si114x_setup_ps1_only>
	
	//Turn on RTC
	rtc_enable_time_render();
    40c2:	0e 94 2c 14 	call	0x2858	; 0x2858 <rtc_enable_time_render>
	display_refresh_screen();
    40c6:	bf d0       	rcall	.+382    	; 0x4246 <display_refresh_screen>
	rtc_setup();
    40c8:	0e 94 7f 13 	call	0x26fe	; 0x26fe <rtc_setup>
	
	EEPROM_WriteEnv();
    40cc:	0e 94 4f 09 	call	0x129e	; 0x129e <EEPROM_WriteEnv>
	
	//This should flip MOSI and SCK, if DMA should be used at some point...
	//PORTC.REMAP |= PORT_SPI_bm;
	
	bool display = true;
    40d0:	99 24       	eor	r9, r9
    40d2:	93 94       	inc	r9
			} else {
				display_on();
				_delay_ms(1000);
			}
			btn_status = NO_BTN;
			display ^= true;
    40d4:	88 24       	eor	r8, r8
    40d6:	83 94       	inc	r8
			display_fade(MAX_BRIGHTNESS);
#ifdef DEBUG_ON
			puts("DEBUG: Entered gesture mode.");
#endif
			//Guard
			env_var.menu_id = 0;
    40d8:	0f 2e       	mov	r0, r31
    40da:	f8 e0       	ldi	r31, 0x08	; 8
    40dc:	cf 2e       	mov	r12, r31
    40de:	fb e2       	ldi	r31, 0x2B	; 43
    40e0:	df 2e       	mov	r13, r31
    40e2:	f0 2d       	mov	r31, r0
			if (env_var.menu_id != 0) {
				display_slide_out_to_bottom();
				rtc_enable_time_render();
				display_slide_in_from_top();
			}
			display_fade(env_var.brightness);
    40e4:	0f 2e       	mov	r0, r31
    40e6:	f3 ed       	ldi	r31, 0xD3	; 211
    40e8:	af 2e       	mov	r10, r31
    40ea:	fa e2       	ldi	r31, 0x2A	; 42
    40ec:	bf 2e       	mov	r11, r31
    40ee:	f0 2d       	mov	r31, r0
			}
			btn_status = NO_BTN;
			display ^= true;
		}
		
		SLEEP.CTRL |= SLEEP_SEN_bm;
    40f0:	0f 2e       	mov	r0, r31
    40f2:	f8 e4       	ldi	r31, 0x48	; 72
    40f4:	ef 2e       	mov	r14, r31
    40f6:	f1 2c       	mov	r15, r1
    40f8:	f0 2d       	mov	r31, r0
	//PORTC.REMAP |= PORT_SPI_bm;
	
	bool display = true;
	
	while (1) { 	
		if (si114x_status == PS1_INT) {
    40fa:	90 91 f0 2b 	lds	r25, 0x2BF0
    40fe:	94 30       	cpi	r25, 0x04	; 4
    4100:	09 f0       	breq	.+2      	; 0x4104 <main+0xac>
    4102:	50 c0       	rjmp	.+160    	; 0x41a4 <main+0x14c>
			uint16_t timeout_ms = 0;
			bool timeout = false;
			
			btn_setup(false);
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	0e 94 32 12 	call	0x2464	; 0x2464 <btn_setup>
			btn_si114x_disable_interrupt();
    410a:	0e 94 9d 12 	call	0x253a	; 0x253a <btn_si114x_disable_interrupt>
			
			display_fade(MAX_BRIGHTNESS);
    410e:	8f e0       	ldi	r24, 0x0F	; 15
    4110:	9d d0       	rcall	.+314    	; 0x424c <display_fade>
#ifdef DEBUG_ON
			puts("DEBUG: Entered gesture mode.");
    4112:	8e e8       	ldi	r24, 0x8E	; 142
    4114:	95 e2       	ldi	r25, 0x25	; 37
    4116:	0e 94 47 58 	call	0xb08e	; 0xb08e <puts>
#endif
			//Guard
			env_var.menu_id = 0;
    411a:	f6 01       	movw	r30, r12
    411c:	10 82       	st	Z, r1

			si114x_setup();
    411e:	0e 94 99 17 	call	0x2f32	; 0x2f32 <si114x_setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4122:	ff ef       	ldi	r31, 0xFF	; 255
    4124:	23 ed       	ldi	r18, 0xD3	; 211
    4126:	80 e3       	ldi	r24, 0x30	; 48
    4128:	f1 50       	subi	r31, 0x01	; 1
    412a:	20 40       	sbci	r18, 0x00	; 0
    412c:	80 40       	sbci	r24, 0x00	; 0
    412e:	e1 f7       	brne	.-8      	; 0x4128 <main+0xd0>
    4130:	00 c0       	rjmp	.+0      	; 0x4132 <main+0xda>
    4132:	00 00       	nop
	
	bool display = true;
	
	while (1) { 	
		if (si114x_status == PS1_INT) {
			uint16_t timeout_ms = 0;
    4134:	00 e0       	ldi	r16, 0x00	; 0
    4136:	10 e0       	ldi	r17, 0x00	; 0
			si114x_setup();
			
			_delay_ms(500);
			
			while(!timeout) {
				si114x_get_data(&sensor_data);
    4138:	ce 01       	movw	r24, r28
    413a:	01 96       	adiw	r24, 0x01	; 1
    413c:	0e 94 38 15 	call	0x2a70	; 0x2a70 <si114x_get_data>
				si114x_process_samples((HANDLE)SI114X_ADDR,&sensor_data);
    4140:	be 01       	movw	r22, r28
    4142:	6f 5f       	subi	r22, 0xFF	; 255
    4144:	7f 4f       	sbci	r23, 0xFF	; 255
    4146:	8a e5       	ldi	r24, 0x5A	; 90
    4148:	90 e0       	ldi	r25, 0x00	; 0
    414a:	83 d9       	rcall	.-3322   	; 0x3452 <si114x_process_samples>
				menu_state_machine(&sensor_data);
    414c:	ce 01       	movw	r24, r28
    414e:	01 96       	adiw	r24, 0x01	; 1
    4150:	0e 94 05 52 	call	0xa40a	; 0xa40a <menu_state_machine>
				
				if (sensor_data.ps1 < PROXIMITY_THRESHOLD) {
    4154:	2b 85       	ldd	r18, Y+11	; 0x0b
    4156:	3c 85       	ldd	r19, Y+12	; 0x0c
    4158:	20 34       	cpi	r18, 0x40	; 64
    415a:	36 40       	sbci	r19, 0x06	; 6
    415c:	38 f4       	brcc	.+14     	; 0x416c <main+0x114>
					if (timeout_ms++ > MENU_TIMEOUT) {
    415e:	09 39       	cpi	r16, 0x99	; 153
    4160:	ea e3       	ldi	r30, 0x3A	; 58
    4162:	1e 07       	cpc	r17, r30
    4164:	30 f4       	brcc	.+12     	; 0x4172 <main+0x11a>
    4166:	0f 5f       	subi	r16, 0xFF	; 255
    4168:	1f 4f       	sbci	r17, 0xFF	; 255
    416a:	e6 cf       	rjmp	.-52     	; 0x4138 <main+0xe0>
						timeout = true;
					}
				} else {
					timeout_ms = 0;
    416c:	00 e0       	ldi	r16, 0x00	; 0
    416e:	10 e0       	ldi	r17, 0x00	; 0
    4170:	e3 cf       	rjmp	.-58     	; 0x4138 <main+0xe0>
			//Should not write too often to EEPROM
		    //EEPROM_WriteEnv();
			
			timeout_ms = 0;
#ifdef DEBUG_ON
			puts("DEBUG: Timeout! Leaving gesture mode.");
    4172:	8b ea       	ldi	r24, 0xAB	; 171
    4174:	95 e2       	ldi	r25, 0x25	; 37
    4176:	0e 94 47 58 	call	0xb08e	; 0xb08e <puts>
#endif
			if (env_var.menu_id != 0) {
    417a:	f6 01       	movw	r30, r12
    417c:	80 81       	ld	r24, Z
    417e:	88 23       	and	r24, r24
    4180:	21 f0       	breq	.+8      	; 0x418a <main+0x132>
				display_slide_out_to_bottom();
    4182:	41 d4       	rcall	.+2178   	; 0x4a06 <display_slide_out_to_bottom>
				rtc_enable_time_render();
    4184:	0e 94 2c 14 	call	0x2858	; 0x2858 <rtc_enable_time_render>
				display_slide_in_from_top();
    4188:	1e d4       	rcall	.+2108   	; 0x49c6 <display_slide_in_from_top>
			}
			display_fade(env_var.brightness);
    418a:	f5 01       	movw	r30, r10
    418c:	80 81       	ld	r24, Z
    418e:	5e d0       	rcall	.+188    	; 0x424c <display_fade>
			btn_setup(true);
    4190:	88 2d       	mov	r24, r8
    4192:	0e 94 32 12 	call	0x2464	; 0x2464 <btn_setup>
			btn_si114x_enable_interrupt();
    4196:	0e 94 8e 12 	call	0x251c	; 0x251c <btn_si114x_enable_interrupt>
			si114x_setup_ps1_only();
    419a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <si114x_setup_ps1_only>
			si114x_status = 0;
    419e:	10 92 f0 2b 	sts	0x2BF0, r1
    41a2:	34 c0       	rjmp	.+104    	; 0x420c <main+0x1b4>
		} else if (si114x_status == ALS_INT_2) {
    41a4:	90 91 f0 2b 	lds	r25, 0x2BF0
    41a8:	92 30       	cpi	r25, 0x02	; 2
    41aa:	29 f4       	brne	.+10     	; 0x41b6 <main+0x15e>
			//Dim light by using the light sensor
#ifdef DEBUG_ON
			puts("DEBUG: Somebody turned off the lights!");
    41ac:	81 ed       	ldi	r24, 0xD1	; 209
    41ae:	95 e2       	ldi	r25, 0x25	; 37
    41b0:	0e 94 47 58 	call	0xb08e	; 0xb08e <puts>
    41b4:	2b c0       	rjmp	.+86     	; 0x420c <main+0x1b4>
#endif
		} else if (btn_status == (BTN1 | BTN4)) {
    41b6:	80 91 ef 2b 	lds	r24, 0x2BEF
    41ba:	85 30       	cpi	r24, 0x05	; 5
    41bc:	49 f4       	brne	.+18     	; 0x41d0 <main+0x178>
			//Calculate baseline for Si114x
			display_slide_out_to_bottom();
    41be:	23 d4       	rcall	.+2118   	; 0x4a06 <display_slide_out_to_bottom>
			si114x_baseline_calibration(&sensor_data);
    41c0:	ce 01       	movw	r24, r28
    41c2:	01 96       	adiw	r24, 0x01	; 1
    41c4:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <si114x_baseline_calibration>
			rtc_enable_time_render();
    41c8:	0e 94 2c 14 	call	0x2858	; 0x2858 <rtc_enable_time_render>
			display_slide_in_from_top();
    41cc:	fc d3       	rcall	.+2040   	; 0x49c6 <display_slide_in_from_top>
    41ce:	1e c0       	rjmp	.+60     	; 0x420c <main+0x1b4>
		} else if (btn_status == BTN4) {
    41d0:	80 91 ef 2b 	lds	r24, 0x2BEF
    41d4:	84 30       	cpi	r24, 0x04	; 4
    41d6:	d1 f4       	brne	.+52     	; 0x420c <main+0x1b4>
			if (display) {
    41d8:	99 20       	and	r9, r9
    41da:	59 f0       	breq	.+22     	; 0x41f2 <main+0x19a>
				display_off();
    41dc:	0f d4       	rcall	.+2078   	; 0x49fc <display_off>
    41de:	ff ef       	ldi	r31, 0xFF	; 255
    41e0:	27 ea       	ldi	r18, 0xA7	; 167
    41e2:	81 e6       	ldi	r24, 0x61	; 97
    41e4:	f1 50       	subi	r31, 0x01	; 1
    41e6:	20 40       	sbci	r18, 0x00	; 0
    41e8:	80 40       	sbci	r24, 0x00	; 0
    41ea:	e1 f7       	brne	.-8      	; 0x41e4 <main+0x18c>
    41ec:	00 c0       	rjmp	.+0      	; 0x41ee <main+0x196>
    41ee:	00 00       	nop
    41f0:	0a c0       	rjmp	.+20     	; 0x4206 <main+0x1ae>
				_delay_ms(1000);
			} else {
				display_on();
    41f2:	1e d0       	rcall	.+60     	; 0x4230 <display_on>
    41f4:	9f ef       	ldi	r25, 0xFF	; 255
    41f6:	e7 ea       	ldi	r30, 0xA7	; 167
    41f8:	f1 e6       	ldi	r31, 0x61	; 97
    41fa:	91 50       	subi	r25, 0x01	; 1
    41fc:	e0 40       	sbci	r30, 0x00	; 0
    41fe:	f0 40       	sbci	r31, 0x00	; 0
    4200:	e1 f7       	brne	.-8      	; 0x41fa <main+0x1a2>
    4202:	00 c0       	rjmp	.+0      	; 0x4204 <main+0x1ac>
    4204:	00 00       	nop
				_delay_ms(1000);
			}
			btn_status = NO_BTN;
    4206:	10 92 ef 2b 	sts	0x2BEF, r1
			display ^= true;
    420a:	98 24       	eor	r9, r8
		}
		
		SLEEP.CTRL |= SLEEP_SEN_bm;
    420c:	f7 01       	movw	r30, r14
    420e:	90 81       	ld	r25, Z
    4210:	91 60       	ori	r25, 0x01	; 1
    4212:	90 83       	st	Z, r25
		asm("sleep");
    4214:	88 95       	sleep
	}
    4216:	71 cf       	rjmp	.-286    	; 0x40fa <main+0xa2>

00004218 <display_setup>:
	ht1632c_fill_screen();
}

void display_clear_screen(void) 
{
	ht1632c_clear_screen();
    4218:	84 e2       	ldi	r24, 0x24	; 36
    421a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <ht1632c_setup>
    421e:	80 e0       	ldi	r24, 0x00	; 0
    4220:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <ht1632c_set_brightness>
    4224:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <ht1632c_clear_screen>
    4228:	83 e0       	ldi	r24, 0x03	; 3
    422a:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <ht1632c_write_command>
    422e:	08 95       	ret

00004230 <display_on>:
    4230:	83 e0       	ldi	r24, 0x03	; 3
    4232:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <ht1632c_write_command>
    4236:	0e 94 2c 14 	call	0x2858	; 0x2858 <rtc_enable_time_render>
    423a:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <ht1632c_slide_in_from_top>
    423e:	08 95       	ret

00004240 <display_clear_screen>:
    4240:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <ht1632c_clear_screen>
    4244:	08 95       	ret

00004246 <display_refresh_screen>:
    4246:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    424a:	08 95       	ret

0000424c <display_fade>:
    424c:	cf 93       	push	r28
    424e:	df 93       	push	r29
    4250:	d8 2f       	mov	r29, r24
    4252:	c0 91 58 2a 	lds	r28, 0x2A58
    4256:	c8 17       	cp	r28, r24
    4258:	80 f4       	brcc	.+32     	; 0x427a <display_fade+0x2e>
    425a:	8c 2f       	mov	r24, r28
    425c:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <ht1632c_set_brightness>
    4260:	2f ef       	ldi	r18, 0xFF	; 255
    4262:	86 e7       	ldi	r24, 0x76	; 118
    4264:	91 e0       	ldi	r25, 0x01	; 1
    4266:	21 50       	subi	r18, 0x01	; 1
    4268:	80 40       	sbci	r24, 0x00	; 0
    426a:	90 40       	sbci	r25, 0x00	; 0
    426c:	e1 f7       	brne	.-8      	; 0x4266 <display_fade+0x1a>
    426e:	00 c0       	rjmp	.+0      	; 0x4270 <display_fade+0x24>
    4270:	00 00       	nop
    4272:	cf 5f       	subi	r28, 0xFF	; 255
    4274:	cd 17       	cp	r28, r29
    4276:	88 f3       	brcs	.-30     	; 0x425a <display_fade+0xe>
    4278:	11 c0       	rjmp	.+34     	; 0x429c <display_fade+0x50>
    427a:	8c 17       	cp	r24, r28
    427c:	78 f4       	brcc	.+30     	; 0x429c <display_fade+0x50>
    427e:	8c 2f       	mov	r24, r28
    4280:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <ht1632c_set_brightness>
    4284:	2f ef       	ldi	r18, 0xFF	; 255
    4286:	86 e7       	ldi	r24, 0x76	; 118
    4288:	91 e0       	ldi	r25, 0x01	; 1
    428a:	21 50       	subi	r18, 0x01	; 1
    428c:	80 40       	sbci	r24, 0x00	; 0
    428e:	90 40       	sbci	r25, 0x00	; 0
    4290:	e1 f7       	brne	.-8      	; 0x428a <display_fade+0x3e>
    4292:	00 c0       	rjmp	.+0      	; 0x4294 <display_fade+0x48>
    4294:	00 00       	nop
    4296:	c1 50       	subi	r28, 0x01	; 1
    4298:	dc 17       	cp	r29, r28
    429a:	88 f3       	brcs	.-30     	; 0x427e <display_fade+0x32>
    429c:	d0 93 58 2a 	sts	0x2A58, r29
    42a0:	df 91       	pop	r29
    42a2:	cf 91       	pop	r28
    42a4:	08 95       	ret

000042a6 <display_fade_blink>:
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	d1 df       	rcall	.-94     	; 0x424c <display_fade>
    42aa:	8f e0       	ldi	r24, 0x0F	; 15
    42ac:	cf df       	rcall	.-98     	; 0x424c <display_fade>
    42ae:	81 e0       	ldi	r24, 0x01	; 1
    42b0:	cd df       	rcall	.-102    	; 0x424c <display_fade>
    42b2:	8f e0       	ldi	r24, 0x0F	; 15
    42b4:	cb cf       	rjmp	.-106    	; 0x424c <display_fade>
    42b6:	08 95       	ret

000042b8 <display_draw_pixel>:
    42b8:	9c 01       	movw	r18, r24
    42ba:	80 31       	cpi	r24, 0x10	; 16
    42bc:	91 05       	cpc	r25, r1
    42be:	f4 f5       	brge	.+124    	; 0x433c <display_draw_pixel+0x84>
    42c0:	60 31       	cpi	r22, 0x10	; 16
    42c2:	71 05       	cpc	r23, r1
    42c4:	dc f5       	brge	.+118    	; 0x433c <display_draw_pixel+0x84>
    42c6:	8f e0       	ldi	r24, 0x0F	; 15
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	86 1b       	sub	r24, r22
    42cc:	97 0b       	sbc	r25, r23
    42ce:	68 e1       	ldi	r22, 0x18	; 24
    42d0:	70 e0       	ldi	r23, 0x00	; 0
    42d2:	0e 94 0c 56 	call	0xac18	; 0xac18 <__divmodhi4>
    42d6:	88 30       	cpi	r24, 0x08	; 8
    42d8:	91 05       	cpc	r25, r1
    42da:	34 f0       	brlt	.+12     	; 0x42e8 <display_draw_pixel+0x30>
    42dc:	80 31       	cpi	r24, 0x10	; 16
    42de:	91 05       	cpc	r25, r1
    42e0:	34 f4       	brge	.+12     	; 0x42ee <display_draw_pixel+0x36>
    42e2:	67 e8       	ldi	r22, 0x87	; 135
    42e4:	70 e0       	ldi	r23, 0x00	; 0
    42e6:	05 c0       	rjmp	.+10     	; 0x42f2 <display_draw_pixel+0x3a>
    42e8:	67 e0       	ldi	r22, 0x07	; 7
    42ea:	70 e0       	ldi	r23, 0x00	; 0
    42ec:	02 c0       	rjmp	.+4      	; 0x42f2 <display_draw_pixel+0x3a>
    42ee:	67 e0       	ldi	r22, 0x07	; 7
    42f0:	71 e0       	ldi	r23, 0x01	; 1
    42f2:	87 70       	andi	r24, 0x07	; 7
    42f4:	90 78       	andi	r25, 0x80	; 128
    42f6:	99 23       	and	r25, r25
    42f8:	24 f4       	brge	.+8      	; 0x4302 <display_draw_pixel+0x4a>
    42fa:	01 97       	sbiw	r24, 0x01	; 1
    42fc:	88 6f       	ori	r24, 0xF8	; 248
    42fe:	9f 6f       	ori	r25, 0xFF	; 255
    4300:	01 96       	adiw	r24, 0x01	; 1
    4302:	fb 01       	movw	r30, r22
    4304:	e8 1b       	sub	r30, r24
    4306:	f9 0b       	sbc	r31, r25
    4308:	cf 01       	movw	r24, r30
    430a:	28 30       	cpi	r18, 0x08	; 8
    430c:	31 05       	cpc	r19, r1
    430e:	1c f4       	brge	.+6      	; 0x4316 <display_draw_pixel+0x5e>
    4310:	22 0f       	add	r18, r18
    4312:	33 1f       	adc	r19, r19
    4314:	04 c0       	rjmp	.+8      	; 0x431e <display_draw_pixel+0x66>
    4316:	22 0f       	add	r18, r18
    4318:	33 1f       	adc	r19, r19
    431a:	2f 50       	subi	r18, 0x0F	; 15
    431c:	31 09       	sbc	r19, r1
    431e:	22 0f       	add	r18, r18
    4320:	33 1f       	adc	r19, r19
    4322:	22 0f       	add	r18, r18
    4324:	33 1f       	adc	r19, r19
    4326:	22 0f       	add	r18, r18
    4328:	33 1f       	adc	r19, r19
    432a:	82 0f       	add	r24, r18
    432c:	93 1f       	adc	r25, r19
    432e:	44 23       	and	r20, r20
    4330:	19 f0       	breq	.+6      	; 0x4338 <display_draw_pixel+0x80>
    4332:	0c 94 dc 0d 	jmp	0x1bb8	; 0x1bb8 <ht1632c_set_pixel>
    4336:	08 95       	ret
    4338:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <ht1632c_clr_pixel>
    433c:	08 95       	ret

0000433e <display_draw_line>:
    433e:	7f 92       	push	r7
    4340:	8f 92       	push	r8
    4342:	9f 92       	push	r9
    4344:	af 92       	push	r10
    4346:	bf 92       	push	r11
    4348:	cf 92       	push	r12
    434a:	df 92       	push	r13
    434c:	ef 92       	push	r14
    434e:	ff 92       	push	r15
    4350:	0f 93       	push	r16
    4352:	1f 93       	push	r17
    4354:	cf 93       	push	r28
    4356:	df 93       	push	r29
    4358:	18 2f       	mov	r17, r24
    435a:	96 2e       	mov	r9, r22
    435c:	84 2e       	mov	r8, r20
    435e:	82 2f       	mov	r24, r18
    4360:	99 27       	eor	r25, r25
    4362:	87 fd       	sbrc	r24, 7
    4364:	90 95       	com	r25
    4366:	86 1b       	sub	r24, r22
    4368:	91 09       	sbc	r25, r1
    436a:	67 fd       	sbrc	r22, 7
    436c:	93 95       	inc	r25
    436e:	ac 01       	movw	r20, r24
    4370:	99 23       	and	r25, r25
    4372:	24 f4       	brge	.+8      	; 0x437c <display_draw_line+0x3e>
    4374:	44 27       	eor	r20, r20
    4376:	55 27       	eor	r21, r21
    4378:	48 1b       	sub	r20, r24
    437a:	59 0b       	sbc	r21, r25
    437c:	68 2d       	mov	r22, r8
    437e:	77 27       	eor	r23, r23
    4380:	67 fd       	sbrc	r22, 7
    4382:	70 95       	com	r23
    4384:	61 1b       	sub	r22, r17
    4386:	71 09       	sbc	r23, r1
    4388:	17 fd       	sbrc	r17, 7
    438a:	73 95       	inc	r23
    438c:	cb 01       	movw	r24, r22
    438e:	99 23       	and	r25, r25
    4390:	24 f4       	brge	.+8      	; 0x439a <display_draw_line+0x5c>
    4392:	88 27       	eor	r24, r24
    4394:	99 27       	eor	r25, r25
    4396:	86 1b       	sub	r24, r22
    4398:	97 0b       	sbc	r25, r23
    439a:	61 e0       	ldi	r22, 0x01	; 1
    439c:	30 e0       	ldi	r19, 0x00	; 0
    439e:	84 17       	cp	r24, r20
    43a0:	95 07       	cpc	r25, r21
    43a2:	0c f0       	brlt	.+2      	; 0x43a6 <display_draw_line+0x68>
    43a4:	60 e0       	ldi	r22, 0x00	; 0
    43a6:	e6 2e       	mov	r14, r22
    43a8:	f3 2e       	mov	r15, r19
    43aa:	e1 14       	cp	r14, r1
    43ac:	f1 04       	cpc	r15, r1
    43ae:	31 f0       	breq	.+12     	; 0x43bc <display_draw_line+0x7e>
    43b0:	88 2d       	mov	r24, r8
    43b2:	82 2e       	mov	r8, r18
    43b4:	28 2f       	mov	r18, r24
    43b6:	81 2f       	mov	r24, r17
    43b8:	19 2d       	mov	r17, r9
    43ba:	98 2e       	mov	r9, r24
    43bc:	81 16       	cp	r8, r17
    43be:	34 f4       	brge	.+12     	; 0x43cc <display_draw_line+0x8e>
    43c0:	89 2d       	mov	r24, r9
    43c2:	92 2e       	mov	r9, r18
    43c4:	28 2f       	mov	r18, r24
    43c6:	81 2f       	mov	r24, r17
    43c8:	18 2d       	mov	r17, r8
    43ca:	88 2e       	mov	r8, r24
    43cc:	a8 2c       	mov	r10, r8
    43ce:	bb 24       	eor	r11, r11
    43d0:	a7 fc       	sbrc	r10, 7
    43d2:	b0 94       	com	r11
    43d4:	a1 1a       	sub	r10, r17
    43d6:	b1 08       	sbc	r11, r1
    43d8:	17 fd       	sbrc	r17, 7
    43da:	b3 94       	inc	r11
    43dc:	82 2f       	mov	r24, r18
    43de:	99 27       	eor	r25, r25
    43e0:	87 fd       	sbrc	r24, 7
    43e2:	90 95       	com	r25
    43e4:	89 19       	sub	r24, r9
    43e6:	91 09       	sbc	r25, r1
    43e8:	97 fc       	sbrc	r9, 7
    43ea:	93 95       	inc	r25
    43ec:	6c 01       	movw	r12, r24
    43ee:	99 23       	and	r25, r25
    43f0:	24 f4       	brge	.+8      	; 0x43fa <display_draw_line+0xbc>
    43f2:	cc 24       	eor	r12, r12
    43f4:	dd 24       	eor	r13, r13
    43f6:	c8 1a       	sub	r12, r24
    43f8:	d9 0a       	sbc	r13, r25
    43fa:	e5 01       	movw	r28, r10
    43fc:	d6 95       	lsr	r29
    43fe:	c7 95       	ror	r28
    4400:	92 16       	cp	r9, r18
    4402:	1c f4       	brge	.+6      	; 0x440a <display_draw_line+0xcc>
    4404:	77 24       	eor	r7, r7
    4406:	73 94       	inc	r7
    4408:	02 c0       	rjmp	.+4      	; 0x440e <display_draw_line+0xd0>
    440a:	77 24       	eor	r7, r7
    440c:	7a 94       	dec	r7
    440e:	81 16       	cp	r8, r17
    4410:	24 f1       	brlt	.+72     	; 0x445a <display_draw_line+0x11c>
    4412:	e1 14       	cp	r14, r1
    4414:	f1 04       	cpc	r15, r1
    4416:	59 f0       	breq	.+22     	; 0x442e <display_draw_line+0xf0>
    4418:	40 2f       	mov	r20, r16
    441a:	61 2f       	mov	r22, r17
    441c:	77 27       	eor	r23, r23
    441e:	67 fd       	sbrc	r22, 7
    4420:	70 95       	com	r23
    4422:	89 2d       	mov	r24, r9
    4424:	99 27       	eor	r25, r25
    4426:	87 fd       	sbrc	r24, 7
    4428:	90 95       	com	r25
    442a:	46 df       	rcall	.-372    	; 0x42b8 <display_draw_pixel>
    442c:	0a c0       	rjmp	.+20     	; 0x4442 <display_draw_line+0x104>
    442e:	40 2f       	mov	r20, r16
    4430:	69 2d       	mov	r22, r9
    4432:	77 27       	eor	r23, r23
    4434:	67 fd       	sbrc	r22, 7
    4436:	70 95       	com	r23
    4438:	81 2f       	mov	r24, r17
    443a:	99 27       	eor	r25, r25
    443c:	87 fd       	sbrc	r24, 7
    443e:	90 95       	com	r25
    4440:	3b df       	rcall	.-394    	; 0x42b8 <display_draw_pixel>
    4442:	9e 01       	movw	r18, r28
    4444:	2c 19       	sub	r18, r12
    4446:	3d 09       	sbc	r19, r13
    4448:	e9 01       	movw	r28, r18
    444a:	dd 23       	and	r29, r29
    444c:	1c f4       	brge	.+6      	; 0x4454 <display_draw_line+0x116>
    444e:	97 0c       	add	r9, r7
    4450:	ca 0d       	add	r28, r10
    4452:	db 1d       	adc	r29, r11
    4454:	1f 5f       	subi	r17, 0xFF	; 255
    4456:	81 16       	cp	r8, r17
    4458:	e4 f6       	brge	.-72     	; 0x4412 <display_draw_line+0xd4>
    445a:	df 91       	pop	r29
    445c:	cf 91       	pop	r28
    445e:	1f 91       	pop	r17
    4460:	0f 91       	pop	r16
    4462:	ff 90       	pop	r15
    4464:	ef 90       	pop	r14
    4466:	df 90       	pop	r13
    4468:	cf 90       	pop	r12
    446a:	bf 90       	pop	r11
    446c:	af 90       	pop	r10
    446e:	9f 90       	pop	r9
    4470:	8f 90       	pop	r8
    4472:	7f 90       	pop	r7
    4474:	08 95       	ret

00004476 <display_draw_filled_rect>:
    4476:	8f 92       	push	r8
    4478:	9f 92       	push	r9
    447a:	af 92       	push	r10
    447c:	bf 92       	push	r11
    447e:	cf 92       	push	r12
    4480:	df 92       	push	r13
    4482:	ef 92       	push	r14
    4484:	ff 92       	push	r15
    4486:	0f 93       	push	r16
    4488:	1f 93       	push	r17
    448a:	cf 93       	push	r28
    448c:	df 93       	push	r29
    448e:	98 2e       	mov	r9, r24
    4490:	c8 2f       	mov	r28, r24
    4492:	d0 e0       	ldi	r29, 0x00	; 0
    4494:	5e 01       	movw	r10, r28
    4496:	a4 0e       	add	r10, r20
    4498:	b1 1c       	adc	r11, r1
    449a:	ca 15       	cp	r28, r10
    449c:	db 05       	cpc	r29, r11
    449e:	e4 f4       	brge	.+56     	; 0x44d8 <display_draw_filled_rect+0x62>
    44a0:	c6 2e       	mov	r12, r22
    44a2:	d1 2c       	mov	r13, r1
    44a4:	76 01       	movw	r14, r12
    44a6:	e2 0e       	add	r14, r18
    44a8:	f1 1c       	adc	r15, r1
    44aa:	86 2e       	mov	r8, r22
    44ac:	0f c0       	rjmp	.+30     	; 0x44cc <display_draw_filled_rect+0x56>
    44ae:	40 2f       	mov	r20, r16
    44b0:	ce 01       	movw	r24, r28
    44b2:	02 df       	rcall	.-508    	; 0x42b8 <display_draw_pixel>
    44b4:	1f 5f       	subi	r17, 0xFF	; 255
    44b6:	61 2f       	mov	r22, r17
    44b8:	70 e0       	ldi	r23, 0x00	; 0
    44ba:	6e 15       	cp	r22, r14
    44bc:	7f 05       	cpc	r23, r15
    44be:	bc f3       	brlt	.-18     	; 0x44ae <display_draw_filled_rect+0x38>
    44c0:	93 94       	inc	r9
    44c2:	c9 2d       	mov	r28, r9
    44c4:	d0 e0       	ldi	r29, 0x00	; 0
    44c6:	ca 15       	cp	r28, r10
    44c8:	db 05       	cpc	r29, r11
    44ca:	34 f4       	brge	.+12     	; 0x44d8 <display_draw_filled_rect+0x62>
    44cc:	b6 01       	movw	r22, r12
    44ce:	ce 14       	cp	r12, r14
    44d0:	df 04       	cpc	r13, r15
    44d2:	b4 f7       	brge	.-20     	; 0x44c0 <display_draw_filled_rect+0x4a>
    44d4:	18 2d       	mov	r17, r8
    44d6:	eb cf       	rjmp	.-42     	; 0x44ae <display_draw_filled_rect+0x38>
    44d8:	df 91       	pop	r29
    44da:	cf 91       	pop	r28
    44dc:	1f 91       	pop	r17
    44de:	0f 91       	pop	r16
    44e0:	ff 90       	pop	r15
    44e2:	ef 90       	pop	r14
    44e4:	df 90       	pop	r13
    44e6:	cf 90       	pop	r12
    44e8:	bf 90       	pop	r11
    44ea:	af 90       	pop	r10
    44ec:	9f 90       	pop	r9
    44ee:	8f 90       	pop	r8
    44f0:	08 95       	ret

000044f2 <display_show_loading_square>:
    44f2:	0f 93       	push	r16
    44f4:	01 e0       	ldi	r16, 0x01	; 1
    44f6:	21 e0       	ldi	r18, 0x01	; 1
    44f8:	41 e0       	ldi	r20, 0x01	; 1
    44fa:	60 91 22 20 	lds	r22, 0x2022
    44fe:	80 91 21 20 	lds	r24, 0x2021
    4502:	b9 df       	rcall	.-142    	; 0x4476 <display_draw_filled_rect>
    4504:	80 91 22 20 	lds	r24, 0x2022
    4508:	87 30       	cpi	r24, 0x07	; 7
    450a:	40 f0       	brcs	.+16     	; 0x451c <display_show_loading_square+0x2a>
    450c:	90 91 21 20 	lds	r25, 0x2021
    4510:	99 30       	cpi	r25, 0x09	; 9
    4512:	21 f4       	brne	.+8      	; 0x451c <display_show_loading_square+0x2a>
    4514:	81 50       	subi	r24, 0x01	; 1
    4516:	80 93 22 20 	sts	0x2022, r24
    451a:	25 c0       	rjmp	.+74     	; 0x4566 <display_show_loading_square+0x74>
    451c:	86 30       	cpi	r24, 0x06	; 6
    451e:	41 f4       	brne	.+16     	; 0x4530 <display_show_loading_square+0x3e>
    4520:	90 91 21 20 	lds	r25, 0x2021
    4524:	97 30       	cpi	r25, 0x07	; 7
    4526:	30 f0       	brcs	.+12     	; 0x4534 <display_show_loading_square+0x42>
    4528:	91 50       	subi	r25, 0x01	; 1
    452a:	90 93 21 20 	sts	0x2021, r25
    452e:	1b c0       	rjmp	.+54     	; 0x4566 <display_show_loading_square+0x74>
    4530:	89 30       	cpi	r24, 0x09	; 9
    4532:	40 f4       	brcc	.+16     	; 0x4544 <display_show_loading_square+0x52>
    4534:	90 91 21 20 	lds	r25, 0x2021
    4538:	96 30       	cpi	r25, 0x06	; 6
    453a:	21 f4       	brne	.+8      	; 0x4544 <display_show_loading_square+0x52>
    453c:	8f 5f       	subi	r24, 0xFF	; 255
    453e:	80 93 22 20 	sts	0x2022, r24
    4542:	11 c0       	rjmp	.+34     	; 0x4566 <display_show_loading_square+0x74>
    4544:	89 30       	cpi	r24, 0x09	; 9
    4546:	79 f4       	brne	.+30     	; 0x4566 <display_show_loading_square+0x74>
    4548:	80 91 21 20 	lds	r24, 0x2021
    454c:	89 30       	cpi	r24, 0x09	; 9
    454e:	58 f4       	brcc	.+22     	; 0x4566 <display_show_loading_square+0x74>
    4550:	8f 5f       	subi	r24, 0xFF	; 255
    4552:	80 93 21 20 	sts	0x2021, r24
    4556:	89 30       	cpi	r24, 0x09	; 9
    4558:	31 f4       	brne	.+12     	; 0x4566 <display_show_loading_square+0x74>
    455a:	90 91 20 20 	lds	r25, 0x2020
    455e:	81 e0       	ldi	r24, 0x01	; 1
    4560:	89 27       	eor	r24, r25
    4562:	80 93 20 20 	sts	0x2020, r24
    4566:	00 e0       	ldi	r16, 0x00	; 0
    4568:	21 e0       	ldi	r18, 0x01	; 1
    456a:	41 e0       	ldi	r20, 0x01	; 1
    456c:	60 91 22 20 	lds	r22, 0x2022
    4570:	80 91 21 20 	lds	r24, 0x2021
    4574:	80 df       	rcall	.-256    	; 0x4476 <display_draw_filled_rect>
    4576:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    457a:	0f 91       	pop	r16
    457c:	08 95       	ret

0000457e <display_draw_char_to_buffer>:
    457e:	70 e0       	ldi	r23, 0x00	; 0
    4580:	9b 01       	movw	r18, r22
    4582:	22 0f       	add	r18, r18
    4584:	33 1f       	adc	r19, r19
    4586:	22 0f       	add	r18, r18
    4588:	33 1f       	adc	r19, r19
    458a:	62 0f       	add	r22, r18
    458c:	73 1f       	adc	r23, r19
    458e:	fb 01       	movw	r30, r22
    4590:	e0 58       	subi	r30, 0x80	; 128
    4592:	f6 4f       	sbci	r31, 0xF6	; 246
    4594:	da 01       	movw	r26, r20
    4596:	a8 0f       	add	r26, r24
    4598:	b9 1f       	adc	r27, r25
    459a:	cb 01       	movw	r24, r22
    459c:	8b 57       	subi	r24, 0x7B	; 123
    459e:	96 4f       	sbci	r25, 0xF6	; 246
    45a0:	34 91       	lpm	r19, Z
    45a2:	32 95       	swap	r19
    45a4:	43 2f       	mov	r20, r19
    45a6:	43 73       	andi	r20, 0x33	; 51
    45a8:	44 0f       	add	r20, r20
    45aa:	44 0f       	add	r20, r20
    45ac:	23 2f       	mov	r18, r19
    45ae:	2c 7c       	andi	r18, 0xCC	; 204
    45b0:	26 95       	lsr	r18
    45b2:	26 95       	lsr	r18
    45b4:	24 2b       	or	r18, r20
    45b6:	32 2f       	mov	r19, r18
    45b8:	35 75       	andi	r19, 0x55	; 85
    45ba:	33 0f       	add	r19, r19
    45bc:	2a 7a       	andi	r18, 0xAA	; 170
    45be:	26 95       	lsr	r18
    45c0:	23 2b       	or	r18, r19
    45c2:	2d 93       	st	X+, r18
    45c4:	31 96       	adiw	r30, 0x01	; 1
    45c6:	e8 17       	cp	r30, r24
    45c8:	f9 07       	cpc	r31, r25
    45ca:	51 f7       	brne	.-44     	; 0x45a0 <display_draw_char_to_buffer+0x22>
    45cc:	08 95       	ret

000045ce <display_draw_char>:
    45ce:	2f 92       	push	r2
    45d0:	3f 92       	push	r3
    45d2:	4f 92       	push	r4
    45d4:	5f 92       	push	r5
    45d6:	6f 92       	push	r6
    45d8:	7f 92       	push	r7
    45da:	8f 92       	push	r8
    45dc:	9f 92       	push	r9
    45de:	af 92       	push	r10
    45e0:	bf 92       	push	r11
    45e2:	cf 92       	push	r12
    45e4:	df 92       	push	r13
    45e6:	ef 92       	push	r14
    45e8:	ff 92       	push	r15
    45ea:	0f 93       	push	r16
    45ec:	1f 93       	push	r17
    45ee:	cf 93       	push	r28
    45f0:	df 93       	push	r29
    45f2:	00 d0       	rcall	.+0      	; 0x45f4 <display_draw_char+0x26>
    45f4:	1f 92       	push	r1
    45f6:	cd b7       	in	r28, 0x3d	; 61
    45f8:	de b7       	in	r29, 0x3e	; 62
    45fa:	22 2e       	mov	r2, r18
    45fc:	40 2e       	mov	r4, r16
    45fe:	50 e0       	ldi	r21, 0x00	; 0
    4600:	5a 01       	movw	r10, r20
    4602:	aa 0c       	add	r10, r10
    4604:	bb 1c       	adc	r11, r11
    4606:	aa 0c       	add	r10, r10
    4608:	bb 1c       	adc	r11, r11
    460a:	4a 0d       	add	r20, r10
    460c:	5b 1d       	adc	r21, r11
    460e:	9a 01       	movw	r18, r20
    4610:	20 58       	subi	r18, 0x80	; 128
    4612:	36 4f       	sbci	r19, 0xF6	; 246
    4614:	59 01       	movw	r10, r18
    4616:	c8 2e       	mov	r12, r24
    4618:	d9 2e       	mov	r13, r25
    461a:	38 2e       	mov	r3, r24
    461c:	36 01       	movw	r6, r12
    461e:	35 e0       	ldi	r19, 0x05	; 5
    4620:	63 0e       	add	r6, r19
    4622:	71 1c       	adc	r7, r1
    4624:	80 2f       	mov	r24, r16
    4626:	88 0f       	add	r24, r24
    4628:	88 0f       	add	r24, r24
    462a:	88 0f       	add	r24, r24
    462c:	80 1b       	sub	r24, r16
    462e:	4b 01       	movw	r8, r22
    4630:	96 e0       	ldi	r25, 0x06	; 6
    4632:	89 0e       	add	r8, r25
    4634:	91 1c       	adc	r9, r1
    4636:	7b 01       	movw	r14, r22
    4638:	e1 e0       	ldi	r30, 0x01	; 1
    463a:	ee 1a       	sub	r14, r30
    463c:	f1 08       	sbc	r15, r1
    463e:	86 0f       	add	r24, r22
    4640:	89 83       	std	Y+1, r24	; 0x01
    4642:	f5 01       	movw	r30, r10
    4644:	14 91       	lpm	r17, Z
    4646:	8a 82       	std	Y+2, r8	; 0x02
    4648:	9b 82       	std	Y+3, r9	; 0x03
    464a:	59 80       	ldd	r5, Y+1	; 0x01
    464c:	10 ff       	sbrs	r17, 0
    464e:	11 c0       	rjmp	.+34     	; 0x4672 <display_draw_char+0xa4>
    4650:	f1 e0       	ldi	r31, 0x01	; 1
    4652:	4f 12       	cpse	r4, r31
    4654:	08 c0       	rjmp	.+16     	; 0x4666 <display_draw_char+0x98>
    4656:	dd 20       	and	r13, r13
    4658:	64 f0       	brlt	.+24     	; 0x4672 <display_draw_char+0xa4>
    465a:	42 2d       	mov	r20, r2
    465c:	6a 81       	ldd	r22, Y+2	; 0x02
    465e:	7b 81       	ldd	r23, Y+3	; 0x03
    4660:	c6 01       	movw	r24, r12
    4662:	2a de       	rcall	.-940    	; 0x42b8 <display_draw_pixel>
    4664:	06 c0       	rjmp	.+12     	; 0x4672 <display_draw_char+0xa4>
    4666:	02 2d       	mov	r16, r2
    4668:	24 2d       	mov	r18, r4
    466a:	44 2d       	mov	r20, r4
    466c:	65 2d       	mov	r22, r5
    466e:	83 2d       	mov	r24, r3
    4670:	02 df       	rcall	.-508    	; 0x4476 <display_draw_filled_rect>
    4672:	16 95       	lsr	r17
    4674:	2a 81       	ldd	r18, Y+2	; 0x02
    4676:	3b 81       	ldd	r19, Y+3	; 0x03
    4678:	21 50       	subi	r18, 0x01	; 1
    467a:	31 09       	sbc	r19, r1
    467c:	2a 83       	std	Y+2, r18	; 0x02
    467e:	3b 83       	std	Y+3, r19	; 0x03
    4680:	54 18       	sub	r5, r4
    4682:	2e 15       	cp	r18, r14
    4684:	3f 05       	cpc	r19, r15
    4686:	11 f7       	brne	.-60     	; 0x464c <display_draw_char+0x7e>
    4688:	3f ef       	ldi	r19, 0xFF	; 255
    468a:	a3 1a       	sub	r10, r19
    468c:	b3 0a       	sbc	r11, r19
    468e:	8f ef       	ldi	r24, 0xFF	; 255
    4690:	c8 1a       	sub	r12, r24
    4692:	d8 0a       	sbc	r13, r24
    4694:	34 0c       	add	r3, r4
    4696:	c6 14       	cp	r12, r6
    4698:	d7 04       	cpc	r13, r7
    469a:	99 f6       	brne	.-90     	; 0x4642 <display_draw_char+0x74>
    469c:	23 96       	adiw	r28, 0x03	; 3
    469e:	cd bf       	out	0x3d, r28	; 61
    46a0:	de bf       	out	0x3e, r29	; 62
    46a2:	df 91       	pop	r29
    46a4:	cf 91       	pop	r28
    46a6:	1f 91       	pop	r17
    46a8:	0f 91       	pop	r16
    46aa:	ff 90       	pop	r15
    46ac:	ef 90       	pop	r14
    46ae:	df 90       	pop	r13
    46b0:	cf 90       	pop	r12
    46b2:	bf 90       	pop	r11
    46b4:	af 90       	pop	r10
    46b6:	9f 90       	pop	r9
    46b8:	8f 90       	pop	r8
    46ba:	7f 90       	pop	r7
    46bc:	6f 90       	pop	r6
    46be:	5f 90       	pop	r5
    46c0:	4f 90       	pop	r4
    46c2:	3f 90       	pop	r3
    46c4:	2f 90       	pop	r2
    46c6:	08 95       	ret

000046c8 <display_draw_small_char_to_buffer>:
    46c8:	cf 92       	push	r12
    46ca:	df 92       	push	r13
    46cc:	ef 92       	push	r14
    46ce:	ff 92       	push	r15
    46d0:	0f 93       	push	r16
    46d2:	1f 93       	push	r17
    46d4:	cf 93       	push	r28
    46d6:	df 93       	push	r29
    46d8:	cd b7       	in	r28, 0x3d	; 61
    46da:	de b7       	in	r29, 0x3e	; 62
    46dc:	25 97       	sbiw	r28, 0x05	; 5
    46de:	cd bf       	out	0x3d, r28	; 61
    46e0:	de bf       	out	0x3e, r29	; 62
    46e2:	70 e0       	ldi	r23, 0x00	; 0
    46e4:	fb 01       	movw	r30, r22
    46e6:	ee 0f       	add	r30, r30
    46e8:	ff 1f       	adc	r31, r31
    46ea:	6e 0f       	add	r22, r30
    46ec:	7f 1f       	adc	r23, r31
    46ee:	fb 01       	movw	r30, r22
    46f0:	ee 0f       	add	r30, r30
    46f2:	ff 1f       	adc	r31, r31
    46f4:	e0 58       	subi	r30, 0x80	; 128
    46f6:	fc 4f       	sbci	r31, 0xFC	; 252
    46f8:	9e 01       	movw	r18, r28
    46fa:	2f 5f       	subi	r18, 0xFF	; 255
    46fc:	3f 4f       	sbci	r19, 0xFF	; 255
    46fe:	69 01       	movw	r12, r18
    4700:	65 e0       	ldi	r22, 0x05	; 5
    4702:	70 e0       	ldi	r23, 0x00	; 0
    4704:	03 96       	adiw	r24, 0x03	; 3
    4706:	48 0f       	add	r20, r24
    4708:	59 1f       	adc	r21, r25
    470a:	84 91       	lpm	r24, Z
    470c:	82 95       	swap	r24
    470e:	8f 70       	andi	r24, 0x0F	; 15
    4710:	d6 01       	movw	r26, r12
    4712:	8d 93       	st	X+, r24
    4714:	6d 01       	movw	r12, r26
    4716:	da 01       	movw	r26, r20
    4718:	23 e0       	ldi	r18, 0x03	; 3
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	08 2f       	mov	r16, r24
    471e:	01 70       	andi	r16, 0x01	; 1
    4720:	10 e0       	ldi	r17, 0x00	; 0
    4722:	78 01       	movw	r14, r16
    4724:	06 2e       	mov	r0, r22
    4726:	02 c0       	rjmp	.+4      	; 0x472c <display_draw_small_char_to_buffer+0x64>
    4728:	ee 0c       	add	r14, r14
    472a:	ff 1c       	adc	r15, r15
    472c:	0a 94       	dec	r0
    472e:	e2 f7       	brpl	.-8      	; 0x4728 <display_draw_small_char_to_buffer+0x60>
    4730:	9e 91       	ld	r25, -X
    4732:	e9 2a       	or	r14, r25
    4734:	ec 92       	st	X, r14
    4736:	86 95       	lsr	r24
    4738:	21 50       	subi	r18, 0x01	; 1
    473a:	31 09       	sbc	r19, r1
    473c:	21 15       	cp	r18, r1
    473e:	31 05       	cpc	r19, r1
    4740:	69 f7       	brne	.-38     	; 0x471c <display_draw_small_char_to_buffer+0x54>
    4742:	61 50       	subi	r22, 0x01	; 1
    4744:	71 09       	sbc	r23, r1
    4746:	31 96       	adiw	r30, 0x01	; 1
    4748:	61 15       	cp	r22, r1
    474a:	71 05       	cpc	r23, r1
    474c:	f1 f6       	brne	.-68     	; 0x470a <display_draw_small_char_to_buffer+0x42>
    474e:	25 96       	adiw	r28, 0x05	; 5
    4750:	cd bf       	out	0x3d, r28	; 61
    4752:	de bf       	out	0x3e, r29	; 62
    4754:	df 91       	pop	r29
    4756:	cf 91       	pop	r28
    4758:	1f 91       	pop	r17
    475a:	0f 91       	pop	r16
    475c:	ff 90       	pop	r15
    475e:	ef 90       	pop	r14
    4760:	df 90       	pop	r13
    4762:	cf 90       	pop	r12
    4764:	08 95       	ret

00004766 <display_print_scrolling_text>:
    4766:	9f 92       	push	r9
    4768:	af 92       	push	r10
    476a:	bf 92       	push	r11
    476c:	cf 92       	push	r12
    476e:	df 92       	push	r13
    4770:	ef 92       	push	r14
    4772:	ff 92       	push	r15
    4774:	0f 93       	push	r16
    4776:	1f 93       	push	r17
    4778:	cf 93       	push	r28
    477a:	df 93       	push	r29
    477c:	ec 01       	movw	r28, r24
    477e:	96 2e       	mov	r9, r22
    4780:	66 23       	and	r22, r22
    4782:	81 f0       	breq	.+32     	; 0x47a4 <display_print_scrolling_text+0x3e>
    4784:	fc 01       	movw	r30, r24
    4786:	01 90       	ld	r0, Z+
    4788:	00 20       	and	r0, r0
    478a:	e9 f7       	brne	.-6      	; 0x4786 <display_print_scrolling_text+0x20>
    478c:	31 97       	sbiw	r30, 0x01	; 1
    478e:	e8 1b       	sub	r30, r24
    4790:	f9 0b       	sbc	r31, r25
    4792:	5f 01       	movw	r10, r30
    4794:	aa 0c       	add	r10, r10
    4796:	bb 1c       	adc	r11, r11
    4798:	ea 0d       	add	r30, r10
    479a:	fb 1d       	adc	r31, r11
    479c:	5f 01       	movw	r10, r30
    479e:	aa 0c       	add	r10, r10
    47a0:	bb 1c       	adc	r11, r11
    47a2:	0c c0       	rjmp	.+24     	; 0x47bc <display_print_scrolling_text+0x56>
    47a4:	fc 01       	movw	r30, r24
    47a6:	01 90       	ld	r0, Z+
    47a8:	00 20       	and	r0, r0
    47aa:	e9 f7       	brne	.-6      	; 0x47a6 <display_print_scrolling_text+0x40>
    47ac:	31 97       	sbiw	r30, 0x01	; 1
    47ae:	e8 1b       	sub	r30, r24
    47b0:	f9 0b       	sbc	r31, r25
    47b2:	5f 01       	movw	r10, r30
    47b4:	aa 0c       	add	r10, r10
    47b6:	bb 1c       	adc	r11, r11
    47b8:	aa 0c       	add	r10, r10
    47ba:	bb 1c       	adc	r11, r11
    47bc:	61 e0       	ldi	r22, 0x01	; 1
    47be:	70 e0       	ldi	r23, 0x00	; 0
    47c0:	c5 01       	movw	r24, r10
    47c2:	0e 94 74 56 	call	0xace8	; 0xace8 <calloc>
    47c6:	6c 01       	movw	r12, r24
    47c8:	7e 01       	movw	r14, r28
    47ca:	00 e0       	ldi	r16, 0x00	; 0
    47cc:	10 e0       	ldi	r17, 0x00	; 0
    47ce:	c0 e0       	ldi	r28, 0x00	; 0
    47d0:	d0 e0       	ldi	r29, 0x00	; 0
    47d2:	0c c0       	rjmp	.+24     	; 0x47ec <display_print_scrolling_text+0x86>
    47d4:	99 20       	and	r9, r9
    47d6:	21 f0       	breq	.+8      	; 0x47e0 <display_print_scrolling_text+0x7a>
    47d8:	a6 01       	movw	r20, r12
    47da:	ce 01       	movw	r24, r28
    47dc:	d0 de       	rcall	.-608    	; 0x457e <display_draw_char_to_buffer>
    47de:	03 c0       	rjmp	.+6      	; 0x47e6 <display_print_scrolling_text+0x80>
    47e0:	a6 01       	movw	r20, r12
    47e2:	c8 01       	movw	r24, r16
    47e4:	71 df       	rcall	.-286    	; 0x46c8 <display_draw_small_char_to_buffer>
    47e6:	26 96       	adiw	r28, 0x06	; 6
    47e8:	0c 5f       	subi	r16, 0xFC	; 252
    47ea:	1f 4f       	sbci	r17, 0xFF	; 255
    47ec:	f7 01       	movw	r30, r14
    47ee:	61 91       	ld	r22, Z+
    47f0:	7f 01       	movw	r14, r30
    47f2:	61 11       	cpse	r22, r1
    47f4:	ef cf       	rjmp	.-34     	; 0x47d4 <display_print_scrolling_text+0x6e>
    47f6:	b5 01       	movw	r22, r10
    47f8:	c6 01       	movw	r24, r12
    47fa:	0e 94 c7 11 	call	0x238e	; 0x238e <ht1632c_print_buffer>
    47fe:	c6 01       	movw	r24, r12
    4800:	0e 94 26 57 	call	0xae4c	; 0xae4c <free>
    4804:	df 91       	pop	r29
    4806:	cf 91       	pop	r28
    4808:	1f 91       	pop	r17
    480a:	0f 91       	pop	r16
    480c:	ff 90       	pop	r15
    480e:	ef 90       	pop	r14
    4810:	df 90       	pop	r13
    4812:	cf 90       	pop	r12
    4814:	bf 90       	pop	r11
    4816:	af 90       	pop	r10
    4818:	9f 90       	pop	r9
    481a:	08 95       	ret

0000481c <display_draw_small_char>:
    481c:	2f 92       	push	r2
    481e:	3f 92       	push	r3
    4820:	4f 92       	push	r4
    4822:	5f 92       	push	r5
    4824:	6f 92       	push	r6
    4826:	7f 92       	push	r7
    4828:	8f 92       	push	r8
    482a:	9f 92       	push	r9
    482c:	af 92       	push	r10
    482e:	bf 92       	push	r11
    4830:	cf 92       	push	r12
    4832:	df 92       	push	r13
    4834:	ef 92       	push	r14
    4836:	ff 92       	push	r15
    4838:	0f 93       	push	r16
    483a:	1f 93       	push	r17
    483c:	cf 93       	push	r28
    483e:	df 93       	push	r29
    4840:	cd b7       	in	r28, 0x3d	; 61
    4842:	de b7       	in	r29, 0x3e	; 62
    4844:	25 97       	sbiw	r28, 0x05	; 5
    4846:	cd bf       	out	0x3d, r28	; 61
    4848:	de bf       	out	0x3e, r29	; 62
    484a:	22 2e       	mov	r2, r18
    484c:	40 2e       	mov	r4, r16
    484e:	50 e0       	ldi	r21, 0x00	; 0
    4850:	3a 01       	movw	r6, r20
    4852:	66 0c       	add	r6, r6
    4854:	77 1c       	adc	r7, r7
    4856:	46 0d       	add	r20, r6
    4858:	57 1d       	adc	r21, r7
    485a:	44 0f       	add	r20, r20
    485c:	55 1f       	adc	r21, r21
    485e:	36 2e       	mov	r3, r22
    4860:	20 2f       	mov	r18, r16
    4862:	22 0f       	add	r18, r18
    4864:	22 0f       	add	r18, r18
    4866:	22 0f       	add	r18, r18
    4868:	20 1b       	sub	r18, r16
    486a:	c1 2c       	mov	r12, r1
    486c:	d1 2c       	mov	r13, r1
    486e:	fa 01       	movw	r30, r20
    4870:	e0 58       	subi	r30, 0x80	; 128
    4872:	fc 4f       	sbci	r31, 0xFC	; 252
    4874:	3f 01       	movw	r6, r30
    4876:	4c 01       	movw	r8, r24
    4878:	f5 e0       	ldi	r31, 0x05	; 5
    487a:	8f 0e       	add	r8, r31
    487c:	91 1c       	adc	r9, r1
    487e:	7c 01       	movw	r14, r24
    4880:	33 e0       	ldi	r19, 0x03	; 3
    4882:	e3 1a       	sub	r14, r19
    4884:	f1 08       	sbc	r15, r1
    4886:	28 0f       	add	r18, r24
    4888:	29 83       	std	Y+1, r18	; 0x01
    488a:	cb 01       	movw	r24, r22
    488c:	03 96       	adiw	r24, 0x03	; 3
    488e:	8a 83       	std	Y+2, r24	; 0x02
    4890:	9b 83       	std	Y+3, r25	; 0x03
    4892:	f3 01       	movw	r30, r6
    4894:	ec 0d       	add	r30, r12
    4896:	fd 1d       	adc	r31, r13
    4898:	14 91       	lpm	r17, Z
    489a:	8c 82       	std	Y+4, r8	; 0x04
    489c:	9d 82       	std	Y+5, r9	; 0x05
    489e:	59 80       	ldd	r5, Y+1	; 0x01
    48a0:	aa 80       	ldd	r10, Y+2	; 0x02
    48a2:	bb 80       	ldd	r11, Y+3	; 0x03
    48a4:	ac 18       	sub	r10, r12
    48a6:	bd 08       	sbc	r11, r13
    48a8:	10 ff       	sbrs	r17, 0
    48aa:	12 c0       	rjmp	.+36     	; 0x48d0 <display_draw_small_char+0xb4>
    48ac:	91 e0       	ldi	r25, 0x01	; 1
    48ae:	49 12       	cpse	r4, r25
    48b0:	09 c0       	rjmp	.+18     	; 0x48c4 <display_draw_small_char+0xa8>
    48b2:	ec 81       	ldd	r30, Y+4	; 0x04
    48b4:	fd 81       	ldd	r31, Y+5	; 0x05
    48b6:	ff 23       	and	r31, r31
    48b8:	5c f0       	brlt	.+22     	; 0x48d0 <display_draw_small_char+0xb4>
    48ba:	42 2d       	mov	r20, r2
    48bc:	b5 01       	movw	r22, r10
    48be:	cf 01       	movw	r24, r30
    48c0:	fb dc       	rcall	.-1546   	; 0x42b8 <display_draw_pixel>
    48c2:	06 c0       	rjmp	.+12     	; 0x48d0 <display_draw_small_char+0xb4>
    48c4:	02 2d       	mov	r16, r2
    48c6:	24 2d       	mov	r18, r4
    48c8:	44 2d       	mov	r20, r4
    48ca:	63 2d       	mov	r22, r3
    48cc:	85 2d       	mov	r24, r5
    48ce:	d3 dd       	rcall	.-1114   	; 0x4476 <display_draw_filled_rect>
    48d0:	16 95       	lsr	r17
    48d2:	8c 81       	ldd	r24, Y+4	; 0x04
    48d4:	9d 81       	ldd	r25, Y+5	; 0x05
    48d6:	01 97       	sbiw	r24, 0x01	; 1
    48d8:	8c 83       	std	Y+4, r24	; 0x04
    48da:	9d 83       	std	Y+5, r25	; 0x05
    48dc:	54 18       	sub	r5, r4
    48de:	8e 15       	cp	r24, r14
    48e0:	9f 05       	cpc	r25, r15
    48e2:	11 f7       	brne	.-60     	; 0x48a8 <display_draw_small_char+0x8c>
    48e4:	9f ef       	ldi	r25, 0xFF	; 255
    48e6:	c9 1a       	sub	r12, r25
    48e8:	d9 0a       	sbc	r13, r25
    48ea:	34 18       	sub	r3, r4
    48ec:	e6 e0       	ldi	r30, 0x06	; 6
    48ee:	ce 16       	cp	r12, r30
    48f0:	d1 04       	cpc	r13, r1
    48f2:	79 f6       	brne	.-98     	; 0x4892 <display_draw_small_char+0x76>
    48f4:	25 96       	adiw	r28, 0x05	; 5
    48f6:	cd bf       	out	0x3d, r28	; 61
    48f8:	de bf       	out	0x3e, r29	; 62
    48fa:	df 91       	pop	r29
    48fc:	cf 91       	pop	r28
    48fe:	1f 91       	pop	r17
    4900:	0f 91       	pop	r16
    4902:	ff 90       	pop	r15
    4904:	ef 90       	pop	r14
    4906:	df 90       	pop	r13
    4908:	cf 90       	pop	r12
    490a:	bf 90       	pop	r11
    490c:	af 90       	pop	r10
    490e:	9f 90       	pop	r9
    4910:	8f 90       	pop	r8
    4912:	7f 90       	pop	r7
    4914:	6f 90       	pop	r6
    4916:	5f 90       	pop	r5
    4918:	4f 90       	pop	r4
    491a:	3f 90       	pop	r3
    491c:	2f 90       	pop	r2
    491e:	08 95       	ret

00004920 <display_draw_four_letter_word>:
    4920:	0f 93       	push	r16
    4922:	cf 93       	push	r28
    4924:	df 93       	push	r29
    4926:	ec 01       	movw	r28, r24
    4928:	01 e0       	ldi	r16, 0x01	; 1
    492a:	21 e0       	ldi	r18, 0x01	; 1
    492c:	30 e0       	ldi	r19, 0x00	; 0
    492e:	48 81       	ld	r20, Y
    4930:	67 e0       	ldi	r22, 0x07	; 7
    4932:	70 e0       	ldi	r23, 0x00	; 0
    4934:	81 e0       	ldi	r24, 0x01	; 1
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	71 df       	rcall	.-286    	; 0x481c <display_draw_small_char>
    493a:	21 e0       	ldi	r18, 0x01	; 1
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	49 81       	ldd	r20, Y+1	; 0x01
    4940:	67 e0       	ldi	r22, 0x07	; 7
    4942:	70 e0       	ldi	r23, 0x00	; 0
    4944:	85 e0       	ldi	r24, 0x05	; 5
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	69 df       	rcall	.-302    	; 0x481c <display_draw_small_char>
    494a:	21 e0       	ldi	r18, 0x01	; 1
    494c:	30 e0       	ldi	r19, 0x00	; 0
    494e:	4a 81       	ldd	r20, Y+2	; 0x02
    4950:	67 e0       	ldi	r22, 0x07	; 7
    4952:	70 e0       	ldi	r23, 0x00	; 0
    4954:	89 e0       	ldi	r24, 0x09	; 9
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	61 df       	rcall	.-318    	; 0x481c <display_draw_small_char>
    495a:	21 e0       	ldi	r18, 0x01	; 1
    495c:	30 e0       	ldi	r19, 0x00	; 0
    495e:	4b 81       	ldd	r20, Y+3	; 0x03
    4960:	67 e0       	ldi	r22, 0x07	; 7
    4962:	70 e0       	ldi	r23, 0x00	; 0
    4964:	8d e0       	ldi	r24, 0x0D	; 13
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	59 df       	rcall	.-334    	; 0x481c <display_draw_small_char>
    496a:	df 91       	pop	r29
    496c:	cf 91       	pop	r28
    496e:	0f 91       	pop	r16
    4970:	08 95       	ret

00004972 <display_draw_three_letter_word>:
    4972:	0f 93       	push	r16
    4974:	cf 93       	push	r28
    4976:	df 93       	push	r29
    4978:	ec 01       	movw	r28, r24
    497a:	01 e0       	ldi	r16, 0x01	; 1
    497c:	21 e0       	ldi	r18, 0x01	; 1
    497e:	30 e0       	ldi	r19, 0x00	; 0
    4980:	48 81       	ld	r20, Y
    4982:	67 e0       	ldi	r22, 0x07	; 7
    4984:	70 e0       	ldi	r23, 0x00	; 0
    4986:	83 e0       	ldi	r24, 0x03	; 3
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	48 df       	rcall	.-368    	; 0x481c <display_draw_small_char>
    498c:	21 e0       	ldi	r18, 0x01	; 1
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	49 81       	ldd	r20, Y+1	; 0x01
    4992:	67 e0       	ldi	r22, 0x07	; 7
    4994:	70 e0       	ldi	r23, 0x00	; 0
    4996:	87 e0       	ldi	r24, 0x07	; 7
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	40 df       	rcall	.-384    	; 0x481c <display_draw_small_char>
    499c:	21 e0       	ldi	r18, 0x01	; 1
    499e:	30 e0       	ldi	r19, 0x00	; 0
    49a0:	4a 81       	ldd	r20, Y+2	; 0x02
    49a2:	67 e0       	ldi	r22, 0x07	; 7
    49a4:	70 e0       	ldi	r23, 0x00	; 0
    49a6:	8b e0       	ldi	r24, 0x0B	; 11
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	38 df       	rcall	.-400    	; 0x481c <display_draw_small_char>
    49ac:	df 91       	pop	r29
    49ae:	cf 91       	pop	r28
    49b0:	0f 91       	pop	r16
    49b2:	08 95       	ret

000049b4 <display_slide_in_from_left>:

/*------------------------------SLIDE FUNCTIONS------------------------------*/

void display_slide_in_from_left(void) 
{
	ht1632c_slide_in_from_left();
    49b4:	0c 94 6c 0f 	jmp	0x1ed8	; 0x1ed8 <ht1632c_slide_in_from_left>
    49b8:	08 95       	ret

000049ba <display_slide_in_from_right>:
}

void display_slide_in_from_right(void) 
{	
	ht1632c_slide_in_from_right();
    49ba:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <ht1632c_slide_in_from_right>
    49be:	08 95       	ret

000049c0 <display_slide_in_from_bottom>:
}

void display_slide_in_from_bottom(void) 
{
	ht1632c_slide_in_from_bottom();
    49c0:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <ht1632c_slide_in_from_bottom>
    49c4:	08 95       	ret

000049c6 <display_slide_in_from_top>:
}

void display_slide_in_from_top(void) 
{
	ht1632c_slide_in_from_top();
    49c6:	0c 94 1c 11 	jmp	0x2238	; 0x2238 <ht1632c_slide_in_from_top>
    49ca:	08 95       	ret

000049cc <display_slide_out_to_right>:
}

void display_slide_out_to_right(void) 
{
    49cc:	cf 93       	push	r28
    49ce:	cf e1       	ldi	r28, 0x1F	; 31
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
		ht1632c_shift_right();
    49d0:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <ht1632c_shift_right>
    49d4:	c1 50       	subi	r28, 0x01	; 1

void display_slide_out_to_right(void) 
{
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
    49d6:	e1 f7       	brne	.-8      	; 0x49d0 <display_slide_out_to_right+0x4>
		ht1632c_shift_right();
	}
}
    49d8:	cf 91       	pop	r28
    49da:	08 95       	ret

000049dc <display_slide_out_to_left>:

void display_slide_out_to_left(void) 
{
    49dc:	cf 93       	push	r28
    49de:	cf e1       	ldi	r28, 0x1F	; 31
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
		ht1632c_shift_left();
    49e0:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <ht1632c_shift_left>
    49e4:	c1 50       	subi	r28, 0x01	; 1

void display_slide_out_to_left(void) 
{
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
    49e6:	e1 f7       	brne	.-8      	; 0x49e0 <display_slide_out_to_left+0x4>
		ht1632c_shift_left();
	}
}
    49e8:	cf 91       	pop	r28
    49ea:	08 95       	ret

000049ec <display_slide_out_to_top>:

void display_slide_out_to_top(void) 
{
    49ec:	cf 93       	push	r28
    49ee:	cf e1       	ldi	r28, 0x1F	; 31
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
		ht1632c_shift_up();
    49f0:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <ht1632c_shift_up>
    49f4:	c1 50       	subi	r28, 0x01	; 1

void display_slide_out_to_top(void) 
{
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
    49f6:	e1 f7       	brne	.-8      	; 0x49f0 <display_slide_out_to_top+0x4>
		ht1632c_shift_up();
	}
}
    49f8:	cf 91       	pop	r28
    49fa:	08 95       	ret

000049fc <display_off>:
	display_slide_in_from_top();
}

void display_off(void) 
{
	display_slide_out_to_top();
    49fc:	f7 df       	rcall	.-18     	; 0x49ec <display_slide_out_to_top>
	ht1632c_write_command(HT1632_LED_OFF);
    49fe:	82 e0       	ldi	r24, 0x02	; 2
    4a00:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <ht1632c_write_command>
    4a04:	08 95       	ret

00004a06 <display_slide_out_to_bottom>:
		ht1632c_shift_up();
	}
}

void display_slide_out_to_bottom(void) 
{
    4a06:	cf 93       	push	r28
    4a08:	cf e1       	ldi	r28, 0x1F	; 31
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
		ht1632c_shift_down();
    4a0a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <ht1632c_shift_down>
    4a0e:	c1 50       	subi	r28, 0x01	; 1

void display_slide_out_to_bottom(void) 
{
	uint8_t i;
	
	for (i = 0; i < 31; i++) {
    4a10:	e1 f7       	brne	.-8      	; 0x4a0a <display_slide_out_to_bottom+0x4>
		ht1632c_shift_down();
	}
}
    4a12:	cf 91       	pop	r28
    4a14:	08 95       	ret

00004a16 <display_alarm_increment_minute>:

/*------------------------------TIME FUNCTIONS------------------------------*/

void display_alarm_increment_minute(void) 
{
	if (env_var.alarm.minutes < 59) {
    4a16:	60 91 09 2b 	lds	r22, 0x2B09
    4a1a:	6b 33       	cpi	r22, 0x3B	; 59
    4a1c:	38 f4       	brcc	.+14     	; 0x4a2c <display_alarm_increment_minute+0x16>
		rtc_update_display(5,++env_var.alarm.minutes);
    4a1e:	6f 5f       	subi	r22, 0xFF	; 255
    4a20:	60 93 09 2b 	sts	0x2B09, r22
    4a24:	85 e0       	ldi	r24, 0x05	; 5
    4a26:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
    4a2a:	07 c0       	rjmp	.+14     	; 0x4a3a <display_alarm_increment_minute+0x24>
	} else {
		env_var.alarm.minutes = 0;
		rtc_update_display(5,++env_var.alarm.minutes);
    4a2c:	81 e0       	ldi	r24, 0x01	; 1
    4a2e:	80 93 09 2b 	sts	0x2B09, r24
    4a32:	61 e0       	ldi	r22, 0x01	; 1
    4a34:	85 e0       	ldi	r24, 0x05	; 5
    4a36:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4a3a:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    4a3e:	08 95       	ret

00004a40 <display_alarm_decrement_minute>:
	display_refresh_screen();
}

void display_alarm_decrement_minute(void) 
{
	if (env_var.alarm.minutes > 0) {
    4a40:	60 91 09 2b 	lds	r22, 0x2B09
    4a44:	66 23       	and	r22, r22
    4a46:	39 f0       	breq	.+14     	; 0x4a56 <display_alarm_decrement_minute+0x16>
		rtc_update_display(5,--env_var.alarm.minutes);
    4a48:	61 50       	subi	r22, 0x01	; 1
    4a4a:	60 93 09 2b 	sts	0x2B09, r22
    4a4e:	85 e0       	ldi	r24, 0x05	; 5
    4a50:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
    4a54:	07 c0       	rjmp	.+14     	; 0x4a64 <display_alarm_decrement_minute+0x24>
	} else {
		env_var.alarm.minutes = 59;
		rtc_update_display(5,--env_var.alarm.minutes);
    4a56:	8a e3       	ldi	r24, 0x3A	; 58
    4a58:	80 93 09 2b 	sts	0x2B09, r24
    4a5c:	6a e3       	ldi	r22, 0x3A	; 58
    4a5e:	85 e0       	ldi	r24, 0x05	; 5
    4a60:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4a64:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    4a68:	08 95       	ret

00004a6a <display_alarm_increment_hour>:
	display_refresh_screen();
}

void display_alarm_increment_hour(void) 
{
	if (env_var.alarm.hours < 23) {
    4a6a:	60 91 0a 2b 	lds	r22, 0x2B0A
    4a6e:	67 31       	cpi	r22, 0x17	; 23
    4a70:	38 f4       	brcc	.+14     	; 0x4a80 <display_alarm_increment_hour+0x16>
		rtc_update_display(5,++env_var.alarm.hours);
    4a72:	6f 5f       	subi	r22, 0xFF	; 255
    4a74:	60 93 0a 2b 	sts	0x2B0A, r22
    4a78:	85 e0       	ldi	r24, 0x05	; 5
    4a7a:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
    4a7e:	07 c0       	rjmp	.+14     	; 0x4a8e <display_alarm_increment_hour+0x24>
	} else {
		env_var.alarm.hours = 0;
		rtc_update_display(5,++env_var.alarm.hours);
    4a80:	81 e0       	ldi	r24, 0x01	; 1
    4a82:	80 93 0a 2b 	sts	0x2B0A, r24
    4a86:	61 e0       	ldi	r22, 0x01	; 1
    4a88:	85 e0       	ldi	r24, 0x05	; 5
    4a8a:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4a8e:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    4a92:	08 95       	ret

00004a94 <display_alarm_decrement_hour>:
	display_refresh_screen();
}

void display_alarm_decrement_hour(void) 
{
	if (env_var.alarm.hours > 0) {
    4a94:	60 91 0a 2b 	lds	r22, 0x2B0A
    4a98:	66 23       	and	r22, r22
    4a9a:	39 f0       	breq	.+14     	; 0x4aaa <display_alarm_decrement_hour+0x16>
		rtc_update_display(5,--env_var.alarm.hours);
    4a9c:	61 50       	subi	r22, 0x01	; 1
    4a9e:	60 93 0a 2b 	sts	0x2B0A, r22
    4aa2:	85 e0       	ldi	r24, 0x05	; 5
    4aa4:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
    4aa8:	07 c0       	rjmp	.+14     	; 0x4ab8 <display_alarm_decrement_hour+0x24>
	} else {
		env_var.alarm.hours = 23;
		rtc_update_display(5,--env_var.alarm.hours);
    4aaa:	86 e1       	ldi	r24, 0x16	; 22
    4aac:	80 93 0a 2b 	sts	0x2B0A, r24
    4ab0:	66 e1       	ldi	r22, 0x16	; 22
    4ab2:	85 e0       	ldi	r24, 0x05	; 5
    4ab4:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4ab8:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    4abc:	08 95       	ret

00004abe <display_draw_and_increment_hour>:
	display_refresh_screen();
}

void display_draw_and_increment_hour(void) 
{
	if (env_var.time.hours < 23) {
    4abe:	60 91 86 2a 	lds	r22, 0x2A86
    4ac2:	67 31       	cpi	r22, 0x17	; 23
    4ac4:	38 f4       	brcc	.+14     	; 0x4ad4 <display_draw_and_increment_hour+0x16>
		rtc_update_display(5,++env_var.time.hours);
    4ac6:	6f 5f       	subi	r22, 0xFF	; 255
    4ac8:	60 93 86 2a 	sts	0x2A86, r22
    4acc:	85 e0       	ldi	r24, 0x05	; 5
    4ace:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
    4ad2:	06 c0       	rjmp	.+12     	; 0x4ae0 <display_draw_and_increment_hour+0x22>
	} else {
		env_var.time.hours = 0;
    4ad4:	10 92 86 2a 	sts	0x2A86, r1
		rtc_update_display(5,env_var.time.hours);
    4ad8:	60 e0       	ldi	r22, 0x00	; 0
    4ada:	85 e0       	ldi	r24, 0x05	; 5
    4adc:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4ae0:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    4ae4:	08 95       	ret

00004ae6 <display_draw_and_decrement_hour>:
	display_refresh_screen();
}

void display_draw_and_decrement_hour(void) 
{
	if (env_var.time.hours > 0) {
    4ae6:	60 91 86 2a 	lds	r22, 0x2A86
    4aea:	66 23       	and	r22, r22
    4aec:	39 f0       	breq	.+14     	; 0x4afc <display_draw_and_decrement_hour+0x16>
		rtc_update_display(5,--env_var.time.hours);
    4aee:	61 50       	subi	r22, 0x01	; 1
    4af0:	60 93 86 2a 	sts	0x2A86, r22
    4af4:	85 e0       	ldi	r24, 0x05	; 5
    4af6:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
    4afa:	07 c0       	rjmp	.+14     	; 0x4b0a <display_draw_and_decrement_hour+0x24>
	} else {
		env_var.time.hours = 23;
    4afc:	87 e1       	ldi	r24, 0x17	; 23
    4afe:	80 93 86 2a 	sts	0x2A86, r24
		rtc_update_display(5,env_var.time.hours);
    4b02:	67 e1       	ldi	r22, 0x17	; 23
    4b04:	85 e0       	ldi	r24, 0x05	; 5
    4b06:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4b0a:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    4b0e:	08 95       	ret

00004b10 <display_draw_and_increment_minute>:
	display_refresh_screen();
}

void display_draw_and_increment_minute(void) 
{
	if (env_var.time.minutes < 59) {
    4b10:	60 91 85 2a 	lds	r22, 0x2A85
    4b14:	6b 33       	cpi	r22, 0x3B	; 59
    4b16:	38 f4       	brcc	.+14     	; 0x4b26 <display_draw_and_increment_minute+0x16>
		rtc_update_display(5,++env_var.time.minutes);
    4b18:	6f 5f       	subi	r22, 0xFF	; 255
    4b1a:	60 93 85 2a 	sts	0x2A85, r22
    4b1e:	85 e0       	ldi	r24, 0x05	; 5
    4b20:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
    4b24:	06 c0       	rjmp	.+12     	; 0x4b32 <display_draw_and_increment_minute+0x22>
	} else {
		env_var.time.minutes = 0;
    4b26:	10 92 85 2a 	sts	0x2A85, r1
		rtc_update_display(5,env_var.time.minutes);
    4b2a:	60 e0       	ldi	r22, 0x00	; 0
    4b2c:	85 e0       	ldi	r24, 0x05	; 5
    4b2e:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4b32:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    4b36:	08 95       	ret

00004b38 <display_draw_and_decrement_minute>:
	display_refresh_screen();
}

void display_draw_and_decrement_minute(void) 
{
	if (env_var.time.minutes > 0) {
    4b38:	60 91 85 2a 	lds	r22, 0x2A85
    4b3c:	66 23       	and	r22, r22
    4b3e:	39 f0       	breq	.+14     	; 0x4b4e <display_draw_and_decrement_minute+0x16>
		rtc_update_display(5,--env_var.time.minutes);
    4b40:	61 50       	subi	r22, 0x01	; 1
    4b42:	60 93 85 2a 	sts	0x2A85, r22
    4b46:	85 e0       	ldi	r24, 0x05	; 5
    4b48:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
    4b4c:	07 c0       	rjmp	.+14     	; 0x4b5c <display_draw_and_decrement_minute+0x24>
	} else {
		env_var.time.minutes = 59;
    4b4e:	8b e3       	ldi	r24, 0x3B	; 59
    4b50:	80 93 85 2a 	sts	0x2A85, r24
		rtc_update_display(5,env_var.time.minutes);
    4b54:	6b e3       	ldi	r22, 0x3B	; 59
    4b56:	85 e0       	ldi	r24, 0x05	; 5
    4b58:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4b5c:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    4b60:	08 95       	ret

00004b62 <display_draw_and_increment_second>:
	display_refresh_screen();
}

void display_draw_and_increment_second(void) 
{
	if (env_var.time.seconds < 59) {
    4b62:	60 91 84 2a 	lds	r22, 0x2A84
    4b66:	6b 33       	cpi	r22, 0x3B	; 59
    4b68:	38 f4       	brcc	.+14     	; 0x4b78 <display_draw_and_increment_second+0x16>
		rtc_update_display(5,++env_var.time.seconds);
    4b6a:	6f 5f       	subi	r22, 0xFF	; 255
    4b6c:	60 93 84 2a 	sts	0x2A84, r22
    4b70:	85 e0       	ldi	r24, 0x05	; 5
    4b72:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
    4b76:	06 c0       	rjmp	.+12     	; 0x4b84 <display_draw_and_increment_second+0x22>
	} else {
		env_var.time.seconds = 0;
    4b78:	10 92 84 2a 	sts	0x2A84, r1
		rtc_update_display(5,env_var.time.seconds);
    4b7c:	60 e0       	ldi	r22, 0x00	; 0
    4b7e:	85 e0       	ldi	r24, 0x05	; 5
    4b80:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4b84:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    4b88:	08 95       	ret

00004b8a <display_draw_and_decrement_second>:
	display_refresh_screen();
}

void display_draw_and_decrement_second(void) 
{
	if (env_var.time.seconds > 0) {
    4b8a:	60 91 84 2a 	lds	r22, 0x2A84
    4b8e:	66 23       	and	r22, r22
    4b90:	39 f0       	breq	.+14     	; 0x4ba0 <display_draw_and_decrement_second+0x16>
		rtc_update_display(5,--env_var.time.seconds);
    4b92:	61 50       	subi	r22, 0x01	; 1
    4b94:	60 93 84 2a 	sts	0x2A84, r22
    4b98:	85 e0       	ldi	r24, 0x05	; 5
    4b9a:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
    4b9e:	07 c0       	rjmp	.+14     	; 0x4bae <display_draw_and_decrement_second+0x24>
	} else {
		env_var.time.seconds = 59;
    4ba0:	8b e3       	ldi	r24, 0x3B	; 59
    4ba2:	80 93 84 2a 	sts	0x2A84, r24
		rtc_update_display(5,env_var.time.seconds);
    4ba6:	6b e3       	ldi	r22, 0x3B	; 59
    4ba8:	85 e0       	ldi	r24, 0x05	; 5
    4baa:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4bae:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    4bb2:	08 95       	ret

00004bb4 <display_draw_and_increment_day>:
	display_refresh_screen();
}

void display_draw_and_increment_day(void) 
{
	if (env_var.time.weekday <= Sunday) {
    4bb4:	80 91 88 2a 	lds	r24, 0x2A88
    4bb8:	88 30       	cpi	r24, 0x08	; 8
    4bba:	40 f4       	brcc	.+16     	; 0x4bcc <display_draw_and_increment_day+0x18>
		display_draw_three_letter_word(time_get_day_name(env_var.time.weekday++));
    4bbc:	91 e0       	ldi	r25, 0x01	; 1
    4bbe:	98 0f       	add	r25, r24
    4bc0:	90 93 88 2a 	sts	0x2A88, r25
    4bc4:	0e 94 24 53 	call	0xa648	; 0xa648 <time_get_day_name>
    4bc8:	d4 de       	rcall	.-600    	; 0x4972 <display_draw_three_letter_word>
    4bca:	06 c0       	rjmp	.+12     	; 0x4bd8 <display_draw_and_increment_day+0x24>
	} else {
		env_var.time.weekday = Monday;
    4bcc:	81 e0       	ldi	r24, 0x01	; 1
    4bce:	80 93 88 2a 	sts	0x2A88, r24
		display_draw_three_letter_word(time_get_day_name(Monday));
    4bd2:	0e 94 24 53 	call	0xa648	; 0xa648 <time_get_day_name>
    4bd6:	cd de       	rcall	.-614    	; 0x4972 <display_draw_three_letter_word>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4bd8:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    4bdc:	08 95       	ret

00004bde <display_draw_and_decrement_day>:
	display_refresh_screen();
}

void display_draw_and_decrement_day(void) 
{
	if (env_var.time.weekday > Monday) {
    4bde:	80 91 88 2a 	lds	r24, 0x2A88
    4be2:	82 30       	cpi	r24, 0x02	; 2
    4be4:	40 f0       	brcs	.+16     	; 0x4bf6 <display_draw_and_decrement_day+0x18>
		display_draw_three_letter_word(time_get_day_name(env_var.time.weekday--));
    4be6:	9f ef       	ldi	r25, 0xFF	; 255
    4be8:	98 0f       	add	r25, r24
    4bea:	90 93 88 2a 	sts	0x2A88, r25
    4bee:	0e 94 24 53 	call	0xa648	; 0xa648 <time_get_day_name>
    4bf2:	bf de       	rcall	.-642    	; 0x4972 <display_draw_three_letter_word>
    4bf4:	06 c0       	rjmp	.+12     	; 0x4c02 <display_draw_and_decrement_day+0x24>
	} else {
		env_var.time.weekday = Sunday;
    4bf6:	87 e0       	ldi	r24, 0x07	; 7
    4bf8:	80 93 88 2a 	sts	0x2A88, r24
		display_draw_three_letter_word(time_get_day_name(Sunday));
    4bfc:	0e 94 24 53 	call	0xa648	; 0xa648 <time_get_day_name>
    4c00:	b8 de       	rcall	.-656    	; 0x4972 <display_draw_three_letter_word>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4c02:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    4c06:	08 95       	ret

00004c08 <display_draw_and_increment_month>:
	display_refresh_screen();
}

void display_draw_and_increment_month(void) 
{
	if (env_var.time.month <= December) {
    4c08:	80 91 8a 2a 	lds	r24, 0x2A8A
    4c0c:	8d 30       	cpi	r24, 0x0D	; 13
    4c0e:	40 f4       	brcc	.+16     	; 0x4c20 <display_draw_and_increment_month+0x18>
		display_draw_three_letter_word(time_get_month_name(env_var.time.month++));
    4c10:	91 e0       	ldi	r25, 0x01	; 1
    4c12:	98 0f       	add	r25, r24
    4c14:	90 93 8a 2a 	sts	0x2A8A, r25
    4c18:	0e 94 48 53 	call	0xa690	; 0xa690 <time_get_month_name>
    4c1c:	aa de       	rcall	.-684    	; 0x4972 <display_draw_three_letter_word>
    4c1e:	06 c0       	rjmp	.+12     	; 0x4c2c <display_draw_and_increment_month+0x24>
	} else {
		env_var.time.month = January;
    4c20:	81 e0       	ldi	r24, 0x01	; 1
    4c22:	80 93 8a 2a 	sts	0x2A8A, r24
		display_draw_three_letter_word(time_get_month_name(January));
    4c26:	0e 94 48 53 	call	0xa690	; 0xa690 <time_get_month_name>
    4c2a:	a3 de       	rcall	.-698    	; 0x4972 <display_draw_three_letter_word>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4c2c:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    4c30:	08 95       	ret

00004c32 <display_draw_and_decrement_month>:
	display_refresh_screen();
}

void display_draw_and_decrement_month(void) 
{
	if (env_var.time.month > January) {
    4c32:	80 91 8a 2a 	lds	r24, 0x2A8A
    4c36:	82 30       	cpi	r24, 0x02	; 2
    4c38:	40 f0       	brcs	.+16     	; 0x4c4a <display_draw_and_decrement_month+0x18>
		display_draw_three_letter_word(time_get_month_name(env_var.time.month--));
    4c3a:	9f ef       	ldi	r25, 0xFF	; 255
    4c3c:	98 0f       	add	r25, r24
    4c3e:	90 93 8a 2a 	sts	0x2A8A, r25
    4c42:	0e 94 48 53 	call	0xa690	; 0xa690 <time_get_month_name>
    4c46:	95 de       	rcall	.-726    	; 0x4972 <display_draw_three_letter_word>
    4c48:	06 c0       	rjmp	.+12     	; 0x4c56 <display_draw_and_decrement_month+0x24>
	} else {
		env_var.time.month = December;
    4c4a:	8c e0       	ldi	r24, 0x0C	; 12
    4c4c:	80 93 8a 2a 	sts	0x2A8A, r24
		display_draw_three_letter_word(time_get_month_name(December));
    4c50:	0e 94 48 53 	call	0xa690	; 0xa690 <time_get_month_name>
    4c54:	8e de       	rcall	.-740    	; 0x4972 <display_draw_three_letter_word>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4c56:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
    4c5a:	08 95       	ret

00004c5c <display_draw_and_increment_year>:
	}
	display_refresh_screen();
}

void display_draw_and_increment_year(void) 
{
    4c5c:	8f 92       	push	r8
    4c5e:	9f 92       	push	r9
    4c60:	af 92       	push	r10
    4c62:	bf 92       	push	r11
    4c64:	ef 92       	push	r14
    4c66:	ff 92       	push	r15
    4c68:	0f 93       	push	r16
    4c6a:	1f 93       	push	r17
    4c6c:	cf 93       	push	r28
    4c6e:	df 93       	push	r29
	char *year = NULL;
	itoa_simple(year,env_var.time.year++);
    4c70:	eb e8       	ldi	r30, 0x8B	; 139
    4c72:	fa e2       	ldi	r31, 0x2A	; 42
    4c74:	60 81       	ld	r22, Z
    4c76:	71 81       	ldd	r23, Z+1	; 0x01
    4c78:	cb 01       	movw	r24, r22
    4c7a:	01 96       	adiw	r24, 0x01	; 1
    4c7c:	80 83       	st	Z, r24
    4c7e:	91 83       	std	Z+1, r25	; 0x01
}

static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    4c80:	80 e0       	ldi	r24, 0x00	; 0
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	c0 e0       	ldi	r28, 0x00	; 0
    4c86:	d0 e0       	ldi	r29, 0x00	; 0
		*s++ = '-';
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    4c88:	0f 2e       	mov	r0, r31
    4c8a:	fa e0       	ldi	r31, 0x0A	; 10
    4c8c:	8f 2e       	mov	r8, r31
    4c8e:	91 2c       	mov	r9, r1
    4c90:	a1 2c       	mov	r10, r1
    4c92:	b1 2c       	mov	r11, r1
    4c94:	f0 2d       	mov	r31, r0
    4c96:	8e 01       	movw	r16, r28
    4c98:	0f 5f       	subi	r16, 0xFF	; 255
    4c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c9c:	a5 01       	movw	r20, r10
    4c9e:	94 01       	movw	r18, r8
    4ca0:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>
    4ca4:	60 5d       	subi	r22, 0xD0	; 208
    4ca6:	68 83       	st	Y, r22
	} while ((n /= 10) > 0);     /* delete it */
    4ca8:	62 2f       	mov	r22, r18
    4caa:	73 2f       	mov	r23, r19
    4cac:	84 2f       	mov	r24, r20
    4cae:	95 2f       	mov	r25, r21
    4cb0:	61 15       	cp	r22, r1
    4cb2:	71 05       	cpc	r23, r1
    4cb4:	81 05       	cpc	r24, r1
    4cb6:	91 05       	cpc	r25, r1
    4cb8:	11 f0       	breq	.+4      	; 0x4cbe <display_draw_and_increment_year+0x62>
    4cba:	e8 01       	movw	r28, r16
    4cbc:	ec cf       	rjmp	.-40     	; 0x4c96 <display_draw_and_increment_year+0x3a>
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    4cbe:	f8 01       	movw	r30, r16
    4cc0:	31 97       	sbiw	r30, 0x01	; 1
    4cc2:	1e 16       	cp	r1, r30
    4cc4:	1f 06       	cpc	r1, r31
    4cc6:	54 f4       	brge	.+20     	; 0x4cdc <display_draw_and_increment_year+0x80>
    4cc8:	a0 e0       	ldi	r26, 0x00	; 0
    4cca:	b0 e0       	ldi	r27, 0x00	; 0
		c = s[i];
    4ccc:	8c 91       	ld	r24, X
		s[i] = s[j];
    4cce:	90 81       	ld	r25, Z
    4cd0:	9d 93       	st	X+, r25
		s[j] = c;
    4cd2:	80 83       	st	Z, r24
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    4cd4:	31 97       	sbiw	r30, 0x01	; 1
    4cd6:	ae 17       	cp	r26, r30
    4cd8:	bf 07       	cpc	r27, r31
    4cda:	c4 f3       	brlt	.-16     	; 0x4ccc <display_draw_and_increment_year+0x70>
	display_draw_four_letter_word(year);
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	1f de       	rcall	.-962    	; 0x4920 <display_draw_four_letter_word>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4ce2:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
{
	char *year = NULL;
	itoa_simple(year,env_var.time.year++);
	display_draw_four_letter_word(year);
	display_refresh_screen();
}
    4ce6:	df 91       	pop	r29
    4ce8:	cf 91       	pop	r28
    4cea:	1f 91       	pop	r17
    4cec:	0f 91       	pop	r16
    4cee:	ff 90       	pop	r15
    4cf0:	ef 90       	pop	r14
    4cf2:	bf 90       	pop	r11
    4cf4:	af 90       	pop	r10
    4cf6:	9f 90       	pop	r9
    4cf8:	8f 90       	pop	r8
    4cfa:	08 95       	ret

00004cfc <display_draw_and_decrement_year>:

void display_draw_and_decrement_year(void) 
{
    4cfc:	8f 92       	push	r8
    4cfe:	9f 92       	push	r9
    4d00:	af 92       	push	r10
    4d02:	bf 92       	push	r11
    4d04:	ef 92       	push	r14
    4d06:	ff 92       	push	r15
    4d08:	0f 93       	push	r16
    4d0a:	1f 93       	push	r17
    4d0c:	cf 93       	push	r28
    4d0e:	df 93       	push	r29
	char *year = NULL;
	itoa_simple(year,env_var.time.year--);
    4d10:	eb e8       	ldi	r30, 0x8B	; 139
    4d12:	fa e2       	ldi	r31, 0x2A	; 42
    4d14:	60 81       	ld	r22, Z
    4d16:	71 81       	ldd	r23, Z+1	; 0x01
    4d18:	cb 01       	movw	r24, r22
    4d1a:	01 97       	sbiw	r24, 0x01	; 1
    4d1c:	80 83       	st	Z, r24
    4d1e:	91 83       	std	Z+1, r25	; 0x01
}

static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    4d20:	80 e0       	ldi	r24, 0x00	; 0
    4d22:	90 e0       	ldi	r25, 0x00	; 0
    4d24:	c0 e0       	ldi	r28, 0x00	; 0
    4d26:	d0 e0       	ldi	r29, 0x00	; 0
		*s++ = '-';
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    4d28:	0f 2e       	mov	r0, r31
    4d2a:	fa e0       	ldi	r31, 0x0A	; 10
    4d2c:	8f 2e       	mov	r8, r31
    4d2e:	91 2c       	mov	r9, r1
    4d30:	a1 2c       	mov	r10, r1
    4d32:	b1 2c       	mov	r11, r1
    4d34:	f0 2d       	mov	r31, r0
    4d36:	8e 01       	movw	r16, r28
    4d38:	0f 5f       	subi	r16, 0xFF	; 255
    4d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d3c:	a5 01       	movw	r20, r10
    4d3e:	94 01       	movw	r18, r8
    4d40:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>
    4d44:	60 5d       	subi	r22, 0xD0	; 208
    4d46:	68 83       	st	Y, r22
	} while ((n /= 10) > 0);     /* delete it */
    4d48:	62 2f       	mov	r22, r18
    4d4a:	73 2f       	mov	r23, r19
    4d4c:	84 2f       	mov	r24, r20
    4d4e:	95 2f       	mov	r25, r21
    4d50:	61 15       	cp	r22, r1
    4d52:	71 05       	cpc	r23, r1
    4d54:	81 05       	cpc	r24, r1
    4d56:	91 05       	cpc	r25, r1
    4d58:	11 f0       	breq	.+4      	; 0x4d5e <display_draw_and_decrement_year+0x62>
    4d5a:	e8 01       	movw	r28, r16
    4d5c:	ec cf       	rjmp	.-40     	; 0x4d36 <display_draw_and_decrement_year+0x3a>
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    4d5e:	f8 01       	movw	r30, r16
    4d60:	31 97       	sbiw	r30, 0x01	; 1
    4d62:	1e 16       	cp	r1, r30
    4d64:	1f 06       	cpc	r1, r31
    4d66:	54 f4       	brge	.+20     	; 0x4d7c <display_draw_and_decrement_year+0x80>
    4d68:	a0 e0       	ldi	r26, 0x00	; 0
    4d6a:	b0 e0       	ldi	r27, 0x00	; 0
		c = s[i];
    4d6c:	8c 91       	ld	r24, X
		s[i] = s[j];
    4d6e:	90 81       	ld	r25, Z
    4d70:	9d 93       	st	X+, r25
		s[j] = c;
    4d72:	80 83       	st	Z, r24
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    4d74:	31 97       	sbiw	r30, 0x01	; 1
    4d76:	ae 17       	cp	r26, r30
    4d78:	bf 07       	cpc	r27, r31
    4d7a:	c4 f3       	brlt	.-16     	; 0x4d6c <display_draw_and_decrement_year+0x70>
	display_draw_four_letter_word(year);
    4d7c:	80 e0       	ldi	r24, 0x00	; 0
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	cf dd       	rcall	.-1122   	; 0x4920 <display_draw_four_letter_word>
	ht1632c_clear_screen();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4d82:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <ht1632c_refresh_screen>
{
	char *year = NULL;
	itoa_simple(year,env_var.time.year--);
	display_draw_four_letter_word(year);
	display_refresh_screen();
}
    4d86:	df 91       	pop	r29
    4d88:	cf 91       	pop	r28
    4d8a:	1f 91       	pop	r17
    4d8c:	0f 91       	pop	r16
    4d8e:	ff 90       	pop	r15
    4d90:	ef 90       	pop	r14
    4d92:	bf 90       	pop	r11
    4d94:	af 90       	pop	r10
    4d96:	9f 90       	pop	r9
    4d98:	8f 90       	pop	r8
    4d9a:	08 95       	ret

00004d9c <mem_cpy>:
		*tp = 0;
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    4d9c:	0f 93       	push	r16
    4d9e:	1f 93       	push	r17
    4da0:	cf 93       	push	r28
    4da2:	df 93       	push	r29
    4da4:	42 30       	cpi	r20, 0x02	; 2
    4da6:	51 05       	cpc	r21, r1
    4da8:	c0 f0       	brcs	.+48     	; 0x4dda <mem_cpy+0x3e>
    4daa:	eb 01       	movw	r28, r22
    4dac:	fc 01       	movw	r30, r24
    4dae:	9a 01       	movw	r18, r20
    4db0:	09 91       	ld	r16, Y+
    4db2:	19 91       	ld	r17, Y+
    4db4:	01 93       	st	Z+, r16
    4db6:	11 93       	st	Z+, r17
    4db8:	22 50       	subi	r18, 0x02	; 2
    4dba:	31 09       	sbc	r19, r1
    4dbc:	22 30       	cpi	r18, 0x02	; 2
    4dbe:	31 05       	cpc	r19, r1
    4dc0:	b8 f7       	brcc	.-18     	; 0x4db0 <mem_cpy+0x14>
    4dc2:	9a 01       	movw	r18, r20
    4dc4:	22 50       	subi	r18, 0x02	; 2
    4dc6:	31 09       	sbc	r19, r1
    4dc8:	2e 7f       	andi	r18, 0xFE	; 254
    4dca:	2e 5f       	subi	r18, 0xFE	; 254
    4dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    4dce:	82 0f       	add	r24, r18
    4dd0:	93 1f       	adc	r25, r19
    4dd2:	62 0f       	add	r22, r18
    4dd4:	73 1f       	adc	r23, r19
    4dd6:	41 70       	andi	r20, 0x01	; 1
    4dd8:	55 27       	eor	r21, r21
    4dda:	41 15       	cp	r20, r1
    4ddc:	51 05       	cpc	r21, r1
    4dde:	49 f0       	breq	.+18     	; 0x4df2 <mem_cpy+0x56>
    4de0:	db 01       	movw	r26, r22
    4de2:	fc 01       	movw	r30, r24
    4de4:	84 0f       	add	r24, r20
    4de6:	95 1f       	adc	r25, r21
    4de8:	2d 91       	ld	r18, X+
    4dea:	21 93       	st	Z+, r18
    4dec:	e8 17       	cp	r30, r24
    4dee:	f9 07       	cpc	r31, r25
    4df0:	d9 f7       	brne	.-10     	; 0x4de8 <mem_cpy+0x4c>
    4df2:	df 91       	pop	r29
    4df4:	cf 91       	pop	r28
    4df6:	1f 91       	pop	r17
    4df8:	0f 91       	pop	r16
    4dfa:	08 95       	ret

00004dfc <mem_set>:
    4dfc:	41 15       	cp	r20, r1
    4dfe:	51 05       	cpc	r21, r1
    4e00:	39 f0       	breq	.+14     	; 0x4e10 <mem_set+0x14>
    4e02:	fc 01       	movw	r30, r24
    4e04:	84 0f       	add	r24, r20
    4e06:	95 1f       	adc	r25, r21
    4e08:	61 93       	st	Z+, r22
    4e0a:	e8 17       	cp	r30, r24
    4e0c:	f9 07       	cpc	r31, r25
    4e0e:	e1 f7       	brne	.-8      	; 0x4e08 <mem_set+0xc>
    4e10:	08 95       	ret

00004e12 <ld_clust>:
    4e12:	0f 93       	push	r16
    4e14:	1f 93       	push	r17
    4e16:	dc 01       	movw	r26, r24
    4e18:	fb 01       	movw	r30, r22
    4e1a:	62 8d       	ldd	r22, Z+26	; 0x1a
    4e1c:	73 8d       	ldd	r23, Z+27	; 0x1b
    4e1e:	80 e0       	ldi	r24, 0x00	; 0
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	2c 91       	ld	r18, X
    4e24:	23 30       	cpi	r18, 0x03	; 3
    4e26:	59 f4       	brne	.+22     	; 0x4e3e <ld_clust+0x2c>
    4e28:	04 89       	ldd	r16, Z+20	; 0x14
    4e2a:	15 89       	ldd	r17, Z+21	; 0x15
    4e2c:	20 e0       	ldi	r18, 0x00	; 0
    4e2e:	30 e0       	ldi	r19, 0x00	; 0
    4e30:	98 01       	movw	r18, r16
    4e32:	11 27       	eor	r17, r17
    4e34:	00 27       	eor	r16, r16
    4e36:	60 2b       	or	r22, r16
    4e38:	71 2b       	or	r23, r17
    4e3a:	82 2b       	or	r24, r18
    4e3c:	93 2b       	or	r25, r19
    4e3e:	1f 91       	pop	r17
    4e40:	0f 91       	pop	r16
    4e42:	08 95       	ret

00004e44 <get_ldnumber>:
    4e44:	cf 93       	push	r28
    4e46:	df 93       	push	r29
    4e48:	ec 01       	movw	r28, r24
    4e4a:	a8 81       	ld	r26, Y
    4e4c:	b9 81       	ldd	r27, Y+1	; 0x01
    4e4e:	10 97       	sbiw	r26, 0x00	; 0
    4e50:	29 f1       	breq	.+74     	; 0x4e9c <get_ldnumber+0x58>
    4e52:	4c 91       	ld	r20, X
    4e54:	41 32       	cpi	r20, 0x21	; 33
    4e56:	58 f0       	brcs	.+22     	; 0x4e6e <get_ldnumber+0x2a>
    4e58:	4a 33       	cpi	r20, 0x3A	; 58
    4e5a:	49 f1       	breq	.+82     	; 0x4eae <get_ldnumber+0x6a>
    4e5c:	fd 01       	movw	r30, r26
    4e5e:	31 96       	adiw	r30, 0x01	; 1
    4e60:	9f 01       	movw	r18, r30
    4e62:	91 91       	ld	r25, Z+
    4e64:	91 32       	cpi	r25, 0x21	; 33
    4e66:	28 f0       	brcs	.+10     	; 0x4e72 <get_ldnumber+0x2e>
    4e68:	9a 33       	cpi	r25, 0x3A	; 58
    4e6a:	d1 f7       	brne	.-12     	; 0x4e60 <get_ldnumber+0x1c>
    4e6c:	04 c0       	rjmp	.+8      	; 0x4e76 <get_ldnumber+0x32>
    4e6e:	94 2f       	mov	r25, r20
    4e70:	9d 01       	movw	r18, r26
    4e72:	9a 33       	cpi	r25, 0x3A	; 58
    4e74:	79 f4       	brne	.+30     	; 0x4e94 <get_ldnumber+0x50>
    4e76:	cd 01       	movw	r24, r26
    4e78:	01 96       	adiw	r24, 0x01	; 1
    4e7a:	28 17       	cp	r18, r24
    4e7c:	39 07       	cpc	r19, r25
    4e7e:	89 f4       	brne	.+34     	; 0x4ea2 <get_ldnumber+0x5e>
    4e80:	84 2f       	mov	r24, r20
    4e82:	90 e0       	ldi	r25, 0x00	; 0
    4e84:	c0 97       	sbiw	r24, 0x30	; 48
    4e86:	82 30       	cpi	r24, 0x02	; 2
    4e88:	91 05       	cpc	r25, r1
    4e8a:	70 f4       	brcc	.+28     	; 0x4ea8 <get_ldnumber+0x64>
    4e8c:	12 96       	adiw	r26, 0x02	; 2
    4e8e:	a8 83       	st	Y, r26
    4e90:	b9 83       	std	Y+1, r27	; 0x01
    4e92:	0f c0       	rjmp	.+30     	; 0x4eb2 <get_ldnumber+0x6e>
    4e94:	80 91 59 2a 	lds	r24, 0x2A59
    4e98:	90 e0       	ldi	r25, 0x00	; 0
    4e9a:	0b c0       	rjmp	.+22     	; 0x4eb2 <get_ldnumber+0x6e>
    4e9c:	8f ef       	ldi	r24, 0xFF	; 255
    4e9e:	9f ef       	ldi	r25, 0xFF	; 255
    4ea0:	08 c0       	rjmp	.+16     	; 0x4eb2 <get_ldnumber+0x6e>
    4ea2:	8f ef       	ldi	r24, 0xFF	; 255
    4ea4:	9f ef       	ldi	r25, 0xFF	; 255
    4ea6:	05 c0       	rjmp	.+10     	; 0x4eb2 <get_ldnumber+0x6e>
    4ea8:	8f ef       	ldi	r24, 0xFF	; 255
    4eaa:	9f ef       	ldi	r25, 0xFF	; 255
    4eac:	02 c0       	rjmp	.+4      	; 0x4eb2 <get_ldnumber+0x6e>
    4eae:	9d 01       	movw	r18, r26
    4eb0:	e2 cf       	rjmp	.-60     	; 0x4e76 <get_ldnumber+0x32>
    4eb2:	df 91       	pop	r29
    4eb4:	cf 91       	pop	r28
    4eb6:	08 95       	ret

00004eb8 <sync_window>:
    4eb8:	8f 92       	push	r8
    4eba:	9f 92       	push	r9
    4ebc:	af 92       	push	r10
    4ebe:	bf 92       	push	r11
    4ec0:	cf 92       	push	r12
    4ec2:	df 92       	push	r13
    4ec4:	ef 92       	push	r14
    4ec6:	ff 92       	push	r15
    4ec8:	0f 93       	push	r16
    4eca:	1f 93       	push	r17
    4ecc:	cf 93       	push	r28
    4ece:	df 93       	push	r29
    4ed0:	ec 01       	movw	r28, r24
    4ed2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ed4:	88 23       	and	r24, r24
    4ed6:	09 f4       	brne	.+2      	; 0x4eda <sync_window+0x22>
    4ed8:	44 c0       	rjmp	.+136    	; 0x4f62 <sync_window+0xaa>
    4eda:	ce a4       	ldd	r12, Y+46	; 0x2e
    4edc:	df a4       	ldd	r13, Y+47	; 0x2f
    4ede:	e8 a8       	ldd	r14, Y+48	; 0x30
    4ee0:	f9 a8       	ldd	r15, Y+49	; 0x31
    4ee2:	5e 01       	movw	r10, r28
    4ee4:	82 e3       	ldi	r24, 0x32	; 50
    4ee6:	a8 0e       	add	r10, r24
    4ee8:	b1 1c       	adc	r11, r1
    4eea:	01 e0       	ldi	r16, 0x01	; 1
    4eec:	10 e0       	ldi	r17, 0x00	; 0
    4eee:	a7 01       	movw	r20, r14
    4ef0:	96 01       	movw	r18, r12
    4ef2:	b5 01       	movw	r22, r10
    4ef4:	89 81       	ldd	r24, Y+1	; 0x01
    4ef6:	0e 94 75 3b 	call	0x76ea	; 0x76ea <disk_write>
    4efa:	81 11       	cpse	r24, r1
    4efc:	34 c0       	rjmp	.+104    	; 0x4f66 <sync_window+0xae>
    4efe:	1c 82       	std	Y+4, r1	; 0x04
    4f00:	8a a1       	ldd	r24, Y+34	; 0x22
    4f02:	9b a1       	ldd	r25, Y+35	; 0x23
    4f04:	ac a1       	ldd	r26, Y+36	; 0x24
    4f06:	bd a1       	ldd	r27, Y+37	; 0x25
    4f08:	b7 01       	movw	r22, r14
    4f0a:	a6 01       	movw	r20, r12
    4f0c:	48 1b       	sub	r20, r24
    4f0e:	59 0b       	sbc	r21, r25
    4f10:	6a 0b       	sbc	r22, r26
    4f12:	7b 0b       	sbc	r23, r27
    4f14:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4f16:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4f18:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4f1a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4f1c:	48 17       	cp	r20, r24
    4f1e:	59 07       	cpc	r21, r25
    4f20:	6a 07       	cpc	r22, r26
    4f22:	7b 07       	cpc	r23, r27
    4f24:	10 f5       	brcc	.+68     	; 0x4f6a <sync_window+0xb2>
    4f26:	8b 80       	ldd	r8, Y+3	; 0x03
    4f28:	91 2c       	mov	r9, r1
    4f2a:	82 e0       	ldi	r24, 0x02	; 2
    4f2c:	88 16       	cp	r8, r24
    4f2e:	91 04       	cpc	r9, r1
    4f30:	f0 f0       	brcs	.+60     	; 0x4f6e <sync_window+0xb6>
    4f32:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4f34:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4f36:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4f38:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4f3a:	c8 0e       	add	r12, r24
    4f3c:	d9 1e       	adc	r13, r25
    4f3e:	ea 1e       	adc	r14, r26
    4f40:	fb 1e       	adc	r15, r27
    4f42:	01 e0       	ldi	r16, 0x01	; 1
    4f44:	10 e0       	ldi	r17, 0x00	; 0
    4f46:	a7 01       	movw	r20, r14
    4f48:	96 01       	movw	r18, r12
    4f4a:	b5 01       	movw	r22, r10
    4f4c:	89 81       	ldd	r24, Y+1	; 0x01
    4f4e:	0e 94 75 3b 	call	0x76ea	; 0x76ea <disk_write>
    4f52:	81 e0       	ldi	r24, 0x01	; 1
    4f54:	88 1a       	sub	r8, r24
    4f56:	91 08       	sbc	r9, r1
    4f58:	81 e0       	ldi	r24, 0x01	; 1
    4f5a:	88 16       	cp	r8, r24
    4f5c:	91 04       	cpc	r9, r1
    4f5e:	49 f7       	brne	.-46     	; 0x4f32 <sync_window+0x7a>
    4f60:	08 c0       	rjmp	.+16     	; 0x4f72 <sync_window+0xba>
    4f62:	80 e0       	ldi	r24, 0x00	; 0
    4f64:	07 c0       	rjmp	.+14     	; 0x4f74 <sync_window+0xbc>
    4f66:	81 e0       	ldi	r24, 0x01	; 1
    4f68:	05 c0       	rjmp	.+10     	; 0x4f74 <sync_window+0xbc>
    4f6a:	80 e0       	ldi	r24, 0x00	; 0
    4f6c:	03 c0       	rjmp	.+6      	; 0x4f74 <sync_window+0xbc>
    4f6e:	80 e0       	ldi	r24, 0x00	; 0
    4f70:	01 c0       	rjmp	.+2      	; 0x4f74 <sync_window+0xbc>
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	df 91       	pop	r29
    4f76:	cf 91       	pop	r28
    4f78:	1f 91       	pop	r17
    4f7a:	0f 91       	pop	r16
    4f7c:	ff 90       	pop	r15
    4f7e:	ef 90       	pop	r14
    4f80:	df 90       	pop	r13
    4f82:	cf 90       	pop	r12
    4f84:	bf 90       	pop	r11
    4f86:	af 90       	pop	r10
    4f88:	9f 90       	pop	r9
    4f8a:	8f 90       	pop	r8
    4f8c:	08 95       	ret

00004f8e <move_window>:
    4f8e:	bf 92       	push	r11
    4f90:	cf 92       	push	r12
    4f92:	df 92       	push	r13
    4f94:	ef 92       	push	r14
    4f96:	ff 92       	push	r15
    4f98:	0f 93       	push	r16
    4f9a:	1f 93       	push	r17
    4f9c:	cf 93       	push	r28
    4f9e:	df 93       	push	r29
    4fa0:	ec 01       	movw	r28, r24
    4fa2:	6a 01       	movw	r12, r20
    4fa4:	7b 01       	movw	r14, r22
    4fa6:	8e a5       	ldd	r24, Y+46	; 0x2e
    4fa8:	9f a5       	ldd	r25, Y+47	; 0x2f
    4faa:	a8 a9       	ldd	r26, Y+48	; 0x30
    4fac:	b9 a9       	ldd	r27, Y+49	; 0x31
    4fae:	84 17       	cp	r24, r20
    4fb0:	95 07       	cpc	r25, r21
    4fb2:	a6 07       	cpc	r26, r22
    4fb4:	b7 07       	cpc	r27, r23
    4fb6:	e1 f0       	breq	.+56     	; 0x4ff0 <move_window+0x62>
    4fb8:	ce 01       	movw	r24, r28
    4fba:	7e df       	rcall	.-260    	; 0x4eb8 <sync_window>
    4fbc:	b8 2e       	mov	r11, r24
    4fbe:	81 11       	cpse	r24, r1
    4fc0:	18 c0       	rjmp	.+48     	; 0x4ff2 <move_window+0x64>
    4fc2:	01 e0       	ldi	r16, 0x01	; 1
    4fc4:	10 e0       	ldi	r17, 0x00	; 0
    4fc6:	a7 01       	movw	r20, r14
    4fc8:	96 01       	movw	r18, r12
    4fca:	be 01       	movw	r22, r28
    4fcc:	6e 5c       	subi	r22, 0xCE	; 206
    4fce:	7f 4f       	sbci	r23, 0xFF	; 255
    4fd0:	89 81       	ldd	r24, Y+1	; 0x01
    4fd2:	0e 94 21 3b 	call	0x7642	; 0x7642 <disk_read>
    4fd6:	88 23       	and	r24, r24
    4fd8:	31 f0       	breq	.+12     	; 0x4fe6 <move_window+0x58>
    4fda:	bb 24       	eor	r11, r11
    4fdc:	b3 94       	inc	r11
    4fde:	cc 24       	eor	r12, r12
    4fe0:	ca 94       	dec	r12
    4fe2:	dc 2c       	mov	r13, r12
    4fe4:	76 01       	movw	r14, r12
    4fe6:	ce a6       	std	Y+46, r12	; 0x2e
    4fe8:	df a6       	std	Y+47, r13	; 0x2f
    4fea:	e8 aa       	std	Y+48, r14	; 0x30
    4fec:	f9 aa       	std	Y+49, r15	; 0x31
    4fee:	01 c0       	rjmp	.+2      	; 0x4ff2 <move_window+0x64>
    4ff0:	b1 2c       	mov	r11, r1
    4ff2:	8b 2d       	mov	r24, r11
    4ff4:	df 91       	pop	r29
    4ff6:	cf 91       	pop	r28
    4ff8:	1f 91       	pop	r17
    4ffa:	0f 91       	pop	r16
    4ffc:	ff 90       	pop	r15
    4ffe:	ef 90       	pop	r14
    5000:	df 90       	pop	r13
    5002:	cf 90       	pop	r12
    5004:	bf 90       	pop	r11
    5006:	08 95       	ret

00005008 <check_fs>:
    5008:	0f 93       	push	r16
    500a:	1f 93       	push	r17
    500c:	cf 93       	push	r28
    500e:	df 93       	push	r29
    5010:	ec 01       	movw	r28, r24
    5012:	1c 82       	std	Y+4, r1	; 0x04
    5014:	0f ef       	ldi	r16, 0xFF	; 255
    5016:	1f ef       	ldi	r17, 0xFF	; 255
    5018:	98 01       	movw	r18, r16
    501a:	0e a7       	std	Y+46, r16	; 0x2e
    501c:	1f a7       	std	Y+47, r17	; 0x2f
    501e:	28 ab       	std	Y+48, r18	; 0x30
    5020:	39 ab       	std	Y+49, r19	; 0x31
    5022:	b5 df       	rcall	.-150    	; 0x4f8e <move_window>
    5024:	81 11       	cpse	r24, r1
    5026:	23 c0       	rjmp	.+70     	; 0x506e <check_fs+0x66>
    5028:	fe 01       	movw	r30, r28
    502a:	e0 5d       	subi	r30, 0xD0	; 208
    502c:	fd 4f       	sbci	r31, 0xFD	; 253
    502e:	80 81       	ld	r24, Z
    5030:	91 81       	ldd	r25, Z+1	; 0x01
    5032:	85 35       	cpi	r24, 0x55	; 85
    5034:	9a 4a       	sbci	r25, 0xAA	; 170
    5036:	e9 f4       	brne	.+58     	; 0x5072 <check_fs+0x6a>
    5038:	e8 5c       	subi	r30, 0xC8	; 200
    503a:	f1 40       	sbci	r31, 0x01	; 1
    503c:	40 81       	ld	r20, Z
    503e:	51 81       	ldd	r21, Z+1	; 0x01
    5040:	62 81       	ldd	r22, Z+2	; 0x02
    5042:	73 81       	ldd	r23, Z+3	; 0x03
    5044:	77 27       	eor	r23, r23
    5046:	46 34       	cpi	r20, 0x46	; 70
    5048:	51 44       	sbci	r21, 0x41	; 65
    504a:	64 45       	sbci	r22, 0x54	; 84
    504c:	71 05       	cpc	r23, r1
    504e:	99 f0       	breq	.+38     	; 0x5076 <check_fs+0x6e>
    5050:	cc 57       	subi	r28, 0x7C	; 124
    5052:	df 4f       	sbci	r29, 0xFF	; 255
    5054:	48 81       	ld	r20, Y
    5056:	59 81       	ldd	r21, Y+1	; 0x01
    5058:	6a 81       	ldd	r22, Y+2	; 0x02
    505a:	7b 81       	ldd	r23, Y+3	; 0x03
    505c:	77 27       	eor	r23, r23
    505e:	81 e0       	ldi	r24, 0x01	; 1
    5060:	46 34       	cpi	r20, 0x46	; 70
    5062:	51 44       	sbci	r21, 0x41	; 65
    5064:	64 45       	sbci	r22, 0x54	; 84
    5066:	71 05       	cpc	r23, r1
    5068:	39 f4       	brne	.+14     	; 0x5078 <check_fs+0x70>
    506a:	80 e0       	ldi	r24, 0x00	; 0
    506c:	05 c0       	rjmp	.+10     	; 0x5078 <check_fs+0x70>
    506e:	83 e0       	ldi	r24, 0x03	; 3
    5070:	03 c0       	rjmp	.+6      	; 0x5078 <check_fs+0x70>
    5072:	82 e0       	ldi	r24, 0x02	; 2
    5074:	01 c0       	rjmp	.+2      	; 0x5078 <check_fs+0x70>
    5076:	80 e0       	ldi	r24, 0x00	; 0
    5078:	df 91       	pop	r29
    507a:	cf 91       	pop	r28
    507c:	1f 91       	pop	r17
    507e:	0f 91       	pop	r16
    5080:	08 95       	ret

00005082 <validate>:
    5082:	00 97       	sbiw	r24, 0x00	; 0
    5084:	c9 f0       	breq	.+50     	; 0x50b8 <validate+0x36>
    5086:	dc 01       	movw	r26, r24
    5088:	ed 91       	ld	r30, X+
    508a:	fc 91       	ld	r31, X
    508c:	11 97       	sbiw	r26, 0x01	; 1
    508e:	30 97       	sbiw	r30, 0x00	; 0
    5090:	a9 f0       	breq	.+42     	; 0x50bc <validate+0x3a>
    5092:	20 81       	ld	r18, Z
    5094:	22 23       	and	r18, r18
    5096:	a1 f0       	breq	.+40     	; 0x50c0 <validate+0x3e>
    5098:	26 81       	ldd	r18, Z+6	; 0x06
    509a:	37 81       	ldd	r19, Z+7	; 0x07
    509c:	12 96       	adiw	r26, 0x02	; 2
    509e:	8d 91       	ld	r24, X+
    50a0:	9c 91       	ld	r25, X
    50a2:	13 97       	sbiw	r26, 0x03	; 3
    50a4:	28 17       	cp	r18, r24
    50a6:	39 07       	cpc	r19, r25
    50a8:	69 f4       	brne	.+26     	; 0x50c4 <validate+0x42>
    50aa:	81 81       	ldd	r24, Z+1	; 0x01
    50ac:	0e 94 1a 3b 	call	0x7634	; 0x7634 <disk_status>
    50b0:	80 fd       	sbrc	r24, 0
    50b2:	0a c0       	rjmp	.+20     	; 0x50c8 <validate+0x46>
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	08 95       	ret
    50b8:	89 e0       	ldi	r24, 0x09	; 9
    50ba:	08 95       	ret
    50bc:	89 e0       	ldi	r24, 0x09	; 9
    50be:	08 95       	ret
    50c0:	89 e0       	ldi	r24, 0x09	; 9
    50c2:	08 95       	ret
    50c4:	89 e0       	ldi	r24, 0x09	; 9
    50c6:	08 95       	ret
    50c8:	89 e0       	ldi	r24, 0x09	; 9
    50ca:	08 95       	ret

000050cc <find_volume>:
    50cc:	2f 92       	push	r2
    50ce:	3f 92       	push	r3
    50d0:	4f 92       	push	r4
    50d2:	5f 92       	push	r5
    50d4:	6f 92       	push	r6
    50d6:	7f 92       	push	r7
    50d8:	8f 92       	push	r8
    50da:	9f 92       	push	r9
    50dc:	af 92       	push	r10
    50de:	bf 92       	push	r11
    50e0:	cf 92       	push	r12
    50e2:	df 92       	push	r13
    50e4:	ef 92       	push	r14
    50e6:	ff 92       	push	r15
    50e8:	0f 93       	push	r16
    50ea:	1f 93       	push	r17
    50ec:	cf 93       	push	r28
    50ee:	df 93       	push	r29
    50f0:	cd b7       	in	r28, 0x3d	; 61
    50f2:	de b7       	in	r29, 0x3e	; 62
    50f4:	6d 97       	sbiw	r28, 0x1d	; 29
    50f6:	cd bf       	out	0x3d, r28	; 61
    50f8:	de bf       	out	0x3e, r29	; 62
    50fa:	6c 01       	movw	r12, r24
    50fc:	cb 01       	movw	r24, r22
    50fe:	b4 2e       	mov	r11, r20
    5100:	d6 01       	movw	r26, r12
    5102:	1d 92       	st	X+, r1
    5104:	1c 92       	st	X, r1
    5106:	9e de       	rcall	.-708    	; 0x4e44 <get_ldnumber>
    5108:	7c 01       	movw	r14, r24
    510a:	99 23       	and	r25, r25
    510c:	0c f4       	brge	.+2      	; 0x5110 <find_volume+0x44>
    510e:	2b c2       	rjmp	.+1110   	; 0x5566 <find_volume+0x49a>
    5110:	fc 01       	movw	r30, r24
    5112:	ee 0f       	add	r30, r30
    5114:	ff 1f       	adc	r31, r31
    5116:	e4 5a       	subi	r30, 0xA4	; 164
    5118:	f5 4d       	sbci	r31, 0xD5	; 213
    511a:	00 81       	ld	r16, Z
    511c:	11 81       	ldd	r17, Z+1	; 0x01
    511e:	01 15       	cp	r16, r1
    5120:	11 05       	cpc	r17, r1
    5122:	09 f4       	brne	.+2      	; 0x5126 <find_volume+0x5a>
    5124:	22 c2       	rjmp	.+1092   	; 0x556a <find_volume+0x49e>
    5126:	f6 01       	movw	r30, r12
    5128:	00 83       	st	Z, r16
    512a:	11 83       	std	Z+1, r17	; 0x01
    512c:	d8 01       	movw	r26, r16
    512e:	8c 91       	ld	r24, X
    5130:	88 23       	and	r24, r24
    5132:	69 f0       	breq	.+26     	; 0x514e <find_volume+0x82>
    5134:	11 96       	adiw	r26, 0x01	; 1
    5136:	8c 91       	ld	r24, X
    5138:	0e 94 1a 3b 	call	0x7634	; 0x7634 <disk_status>
    513c:	80 fd       	sbrc	r24, 0
    513e:	07 c0       	rjmp	.+14     	; 0x514e <find_volume+0x82>
    5140:	bb 20       	and	r11, r11
    5142:	09 f4       	brne	.+2      	; 0x5146 <find_volume+0x7a>
    5144:	14 c2       	rjmp	.+1064   	; 0x556e <find_volume+0x4a2>
    5146:	82 fd       	sbrc	r24, 2
    5148:	14 c2       	rjmp	.+1064   	; 0x5572 <find_volume+0x4a6>
    514a:	80 e0       	ldi	r24, 0x00	; 0
    514c:	5d c2       	rjmp	.+1210   	; 0x5608 <find_volume+0x53c>
    514e:	f8 01       	movw	r30, r16
    5150:	10 82       	st	Z, r1
    5152:	e1 82       	std	Z+1, r14	; 0x01
    5154:	8e 2d       	mov	r24, r14
    5156:	0e 94 3e 3a 	call	0x747c	; 0x747c <disk_initialize>
    515a:	80 fd       	sbrc	r24, 0
    515c:	0c c2       	rjmp	.+1048   	; 0x5576 <find_volume+0x4aa>
    515e:	bb 20       	and	r11, r11
    5160:	11 f0       	breq	.+4      	; 0x5166 <find_volume+0x9a>
    5162:	82 fd       	sbrc	r24, 2
    5164:	0a c2       	rjmp	.+1044   	; 0x557a <find_volume+0x4ae>
    5166:	40 e0       	ldi	r20, 0x00	; 0
    5168:	50 e0       	ldi	r21, 0x00	; 0
    516a:	ba 01       	movw	r22, r20
    516c:	c8 01       	movw	r24, r16
    516e:	4c df       	rcall	.-360    	; 0x5008 <check_fs>
    5170:	81 30       	cpi	r24, 0x01	; 1
    5172:	09 f0       	breq	.+2      	; 0x5176 <find_volume+0xaa>
    5174:	3f c0       	rjmp	.+126    	; 0x51f4 <find_volume+0x128>
    5176:	f8 01       	movw	r30, r16
    5178:	ec 50       	subi	r30, 0x0C	; 12
    517a:	fe 4f       	sbci	r31, 0xFE	; 254
    517c:	7e 01       	movw	r14, r28
    517e:	21 e1       	ldi	r18, 0x11	; 17
    5180:	e2 0e       	add	r14, r18
    5182:	f1 1c       	adc	r15, r1
    5184:	9e 01       	movw	r18, r28
    5186:	2f 5f       	subi	r18, 0xFF	; 255
    5188:	3f 4f       	sbci	r19, 0xFF	; 255
    518a:	af 01       	movw	r20, r30
    518c:	da 01       	movw	r26, r20
    518e:	8c 91       	ld	r24, X
    5190:	88 23       	and	r24, r24
    5192:	39 f0       	breq	.+14     	; 0x51a2 <find_volume+0xd6>
    5194:	14 96       	adiw	r26, 0x04	; 4
    5196:	8d 91       	ld	r24, X+
    5198:	9d 91       	ld	r25, X+
    519a:	0d 90       	ld	r0, X+
    519c:	bc 91       	ld	r27, X
    519e:	a0 2d       	mov	r26, r0
    51a0:	03 c0       	rjmp	.+6      	; 0x51a8 <find_volume+0xdc>
    51a2:	80 e0       	ldi	r24, 0x00	; 0
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	dc 01       	movw	r26, r24
    51a8:	f9 01       	movw	r30, r18
    51aa:	81 93       	st	Z+, r24
    51ac:	91 93       	st	Z+, r25
    51ae:	a1 93       	st	Z+, r26
    51b0:	b1 93       	st	Z+, r27
    51b2:	9f 01       	movw	r18, r30
    51b4:	40 5f       	subi	r20, 0xF0	; 240
    51b6:	5f 4f       	sbci	r21, 0xFF	; 255
    51b8:	ee 15       	cp	r30, r14
    51ba:	ff 05       	cpc	r31, r15
    51bc:	39 f7       	brne	.-50     	; 0x518c <find_volume+0xc0>
    51be:	9e 01       	movw	r18, r28
    51c0:	2f 5f       	subi	r18, 0xFF	; 255
    51c2:	3f 4f       	sbci	r19, 0xFF	; 255
    51c4:	69 01       	movw	r12, r18
    51c6:	d6 01       	movw	r26, r12
    51c8:	4d 90       	ld	r4, X+
    51ca:	5d 90       	ld	r5, X+
    51cc:	6d 90       	ld	r6, X+
    51ce:	7d 90       	ld	r7, X+
    51d0:	6d 01       	movw	r12, r26
    51d2:	41 14       	cp	r4, r1
    51d4:	51 04       	cpc	r5, r1
    51d6:	61 04       	cpc	r6, r1
    51d8:	71 04       	cpc	r7, r1
    51da:	39 f0       	breq	.+14     	; 0x51ea <find_volume+0x11e>
    51dc:	b3 01       	movw	r22, r6
    51de:	a2 01       	movw	r20, r4
    51e0:	c8 01       	movw	r24, r16
    51e2:	12 df       	rcall	.-476    	; 0x5008 <check_fs>
    51e4:	81 11       	cpse	r24, r1
    51e6:	02 c0       	rjmp	.+4      	; 0x51ec <find_volume+0x120>
    51e8:	0d c0       	rjmp	.+26     	; 0x5204 <find_volume+0x138>
    51ea:	82 e0       	ldi	r24, 0x02	; 2
    51ec:	ce 14       	cp	r12, r14
    51ee:	df 04       	cpc	r13, r15
    51f0:	51 f7       	brne	.-44     	; 0x51c6 <find_volume+0xfa>
    51f2:	03 c0       	rjmp	.+6      	; 0x51fa <find_volume+0x12e>
    51f4:	41 2c       	mov	r4, r1
    51f6:	51 2c       	mov	r5, r1
    51f8:	32 01       	movw	r6, r4
    51fa:	83 30       	cpi	r24, 0x03	; 3
    51fc:	09 f4       	brne	.+2      	; 0x5200 <find_volume+0x134>
    51fe:	bf c1       	rjmp	.+894    	; 0x557e <find_volume+0x4b2>
    5200:	81 11       	cpse	r24, r1
    5202:	bf c1       	rjmp	.+894    	; 0x5582 <find_volume+0x4b6>
    5204:	f8 01       	movw	r30, r16
    5206:	85 ad       	ldd	r24, Z+61	; 0x3d
    5208:	96 ad       	ldd	r25, Z+62	; 0x3e
    520a:	81 15       	cp	r24, r1
    520c:	92 40       	sbci	r25, 0x02	; 2
    520e:	09 f0       	breq	.+2      	; 0x5212 <find_volume+0x146>
    5210:	ba c1       	rjmp	.+884    	; 0x5586 <find_volume+0x4ba>
    5212:	f8 01       	movw	r30, r16
    5214:	e8 5b       	subi	r30, 0xB8	; 184
    5216:	ff 4f       	sbci	r31, 0xFF	; 255
    5218:	c0 80       	ld	r12, Z
    521a:	d1 80       	ldd	r13, Z+1	; 0x01
    521c:	e1 2c       	mov	r14, r1
    521e:	f1 2c       	mov	r15, r1
    5220:	c1 14       	cp	r12, r1
    5222:	d1 04       	cpc	r13, r1
    5224:	e1 04       	cpc	r14, r1
    5226:	f1 04       	cpc	r15, r1
    5228:	29 f4       	brne	.+10     	; 0x5234 <find_volume+0x168>
    522a:	3e 96       	adiw	r30, 0x0e	; 14
    522c:	c0 80       	ld	r12, Z
    522e:	d1 80       	ldd	r13, Z+1	; 0x01
    5230:	e2 80       	ldd	r14, Z+2	; 0x02
    5232:	f3 80       	ldd	r15, Z+3	; 0x03
    5234:	d8 01       	movw	r26, r16
    5236:	5a 96       	adiw	r26, 0x1a	; 26
    5238:	cd 92       	st	X+, r12
    523a:	dd 92       	st	X+, r13
    523c:	ed 92       	st	X+, r14
    523e:	fc 92       	st	X, r15
    5240:	5d 97       	sbiw	r26, 0x1d	; 29
    5242:	f8 01       	movw	r30, r16
    5244:	ee 5b       	subi	r30, 0xBE	; 190
    5246:	ff 4f       	sbci	r31, 0xFF	; 255
    5248:	a0 81       	ld	r26, Z
    524a:	f8 01       	movw	r30, r16
    524c:	a3 83       	std	Z+3, r26	; 0x03
    524e:	8f ef       	ldi	r24, 0xFF	; 255
    5250:	8a 0f       	add	r24, r26
    5252:	82 30       	cpi	r24, 0x02	; 2
    5254:	08 f0       	brcs	.+2      	; 0x5258 <find_volume+0x18c>
    5256:	99 c1       	rjmp	.+818    	; 0x558a <find_volume+0x4be>
    5258:	f7 ad       	ldd	r31, Z+63	; 0x3f
    525a:	f9 8b       	std	Y+17, r31	; 0x11
    525c:	2f 2f       	mov	r18, r31
    525e:	f8 01       	movw	r30, r16
    5260:	22 83       	std	Z+2, r18	; 0x02
    5262:	22 23       	and	r18, r18
    5264:	09 f4       	brne	.+2      	; 0x5268 <find_volume+0x19c>
    5266:	93 c1       	rjmp	.+806    	; 0x558e <find_volume+0x4c2>
    5268:	82 2f       	mov	r24, r18
    526a:	90 e0       	ldi	r25, 0x00	; 0
    526c:	9c 01       	movw	r18, r24
    526e:	21 50       	subi	r18, 0x01	; 1
    5270:	31 09       	sbc	r19, r1
    5272:	82 23       	and	r24, r18
    5274:	93 23       	and	r25, r19
    5276:	89 2b       	or	r24, r25
    5278:	09 f0       	breq	.+2      	; 0x527c <find_volume+0x1b0>
    527a:	8b c1       	rjmp	.+790    	; 0x5592 <find_volume+0x4c6>
    527c:	ed 5b       	subi	r30, 0xBD	; 189
    527e:	ff 4f       	sbci	r31, 0xFF	; 255
    5280:	20 80       	ld	r2, Z
    5282:	31 80       	ldd	r3, Z+1	; 0x01
    5284:	f8 01       	movw	r30, r16
    5286:	20 86       	std	Z+8, r2	; 0x08
    5288:	31 86       	std	Z+9, r3	; 0x09
    528a:	c1 01       	movw	r24, r2
    528c:	8f 70       	andi	r24, 0x0F	; 15
    528e:	99 27       	eor	r25, r25
    5290:	89 2b       	or	r24, r25
    5292:	09 f0       	breq	.+2      	; 0x5296 <find_volume+0x1ca>
    5294:	80 c1       	rjmp	.+768    	; 0x5596 <find_volume+0x4ca>
    5296:	eb 5b       	subi	r30, 0xBB	; 187
    5298:	ff 4f       	sbci	r31, 0xFF	; 255
    529a:	80 80       	ld	r8, Z
    529c:	91 80       	ldd	r9, Z+1	; 0x01
    529e:	a1 2c       	mov	r10, r1
    52a0:	b1 2c       	mov	r11, r1
    52a2:	81 14       	cp	r8, r1
    52a4:	91 04       	cpc	r9, r1
    52a6:	a1 04       	cpc	r10, r1
    52a8:	b1 04       	cpc	r11, r1
    52aa:	29 f4       	brne	.+10     	; 0x52b6 <find_volume+0x1ea>
    52ac:	3d 96       	adiw	r30, 0x0d	; 13
    52ae:	80 80       	ld	r8, Z
    52b0:	91 80       	ldd	r9, Z+1	; 0x01
    52b2:	a2 80       	ldd	r10, Z+2	; 0x02
    52b4:	b3 80       	ldd	r11, Z+3	; 0x03
    52b6:	f8 01       	movw	r30, r16
    52b8:	e0 5c       	subi	r30, 0xC0	; 192
    52ba:	ff 4f       	sbci	r31, 0xFF	; 255
    52bc:	01 90       	ld	r0, Z+
    52be:	f0 81       	ld	r31, Z
    52c0:	e0 2d       	mov	r30, r0
    52c2:	30 97       	sbiw	r30, 0x00	; 0
    52c4:	09 f4       	brne	.+2      	; 0x52c8 <find_volume+0x1fc>
    52c6:	69 c1       	rjmp	.+722    	; 0x559a <find_volume+0x4ce>
    52c8:	b0 e0       	ldi	r27, 0x00	; 0
    52ca:	a7 01       	movw	r20, r14
    52cc:	96 01       	movw	r18, r12
    52ce:	0e 94 56 56 	call	0xacac	; 0xacac <__muluhisi3>
    52d2:	6a 8f       	std	Y+26, r22	; 0x1a
    52d4:	7b 8f       	std	Y+27, r23	; 0x1b
    52d6:	8c 8f       	std	Y+28, r24	; 0x1c
    52d8:	9d 8f       	std	Y+29, r25	; 0x1d
    52da:	9f 01       	movw	r18, r30
    52dc:	40 e0       	ldi	r20, 0x00	; 0
    52de:	50 e0       	ldi	r21, 0x00	; 0
    52e0:	2e 8b       	std	Y+22, r18	; 0x16
    52e2:	3f 8b       	std	Y+23, r19	; 0x17
    52e4:	48 8f       	std	Y+24, r20	; 0x18
    52e6:	59 8f       	std	Y+25, r21	; 0x19
    52e8:	c1 01       	movw	r24, r2
    52ea:	92 95       	swap	r25
    52ec:	82 95       	swap	r24
    52ee:	8f 70       	andi	r24, 0x0F	; 15
    52f0:	89 27       	eor	r24, r25
    52f2:	9f 70       	andi	r25, 0x0F	; 15
    52f4:	89 27       	eor	r24, r25
    52f6:	28 0f       	add	r18, r24
    52f8:	39 1f       	adc	r19, r25
    52fa:	41 1d       	adc	r20, r1
    52fc:	51 1d       	adc	r21, r1
    52fe:	da 01       	movw	r26, r20
    5300:	c9 01       	movw	r24, r18
    5302:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5304:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5306:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5308:	5d 8d       	ldd	r21, Y+29	; 0x1d
    530a:	28 0f       	add	r18, r24
    530c:	39 1f       	adc	r19, r25
    530e:	4a 1f       	adc	r20, r26
    5310:	5b 1f       	adc	r21, r27
    5312:	2a 8b       	std	Y+18, r18	; 0x12
    5314:	3b 8b       	std	Y+19, r19	; 0x13
    5316:	4c 8b       	std	Y+20, r20	; 0x14
    5318:	5d 8b       	std	Y+21, r21	; 0x15
    531a:	82 16       	cp	r8, r18
    531c:	93 06       	cpc	r9, r19
    531e:	a4 06       	cpc	r10, r20
    5320:	b5 06       	cpc	r11, r21
    5322:	08 f4       	brcc	.+2      	; 0x5326 <find_volume+0x25a>
    5324:	3c c1       	rjmp	.+632    	; 0x559e <find_volume+0x4d2>
    5326:	c5 01       	movw	r24, r10
    5328:	b4 01       	movw	r22, r8
    532a:	62 1b       	sub	r22, r18
    532c:	73 0b       	sbc	r23, r19
    532e:	84 0b       	sbc	r24, r20
    5330:	95 0b       	sbc	r25, r21
    5332:	e9 89       	ldd	r30, Y+17	; 0x11
    5334:	2e 2f       	mov	r18, r30
    5336:	30 e0       	ldi	r19, 0x00	; 0
    5338:	40 e0       	ldi	r20, 0x00	; 0
    533a:	50 e0       	ldi	r21, 0x00	; 0
    533c:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>
    5340:	da 01       	movw	r26, r20
    5342:	c9 01       	movw	r24, r18
    5344:	21 15       	cp	r18, r1
    5346:	31 05       	cpc	r19, r1
    5348:	41 05       	cpc	r20, r1
    534a:	51 05       	cpc	r21, r1
    534c:	09 f4       	brne	.+2      	; 0x5350 <find_volume+0x284>
    534e:	29 c1       	rjmp	.+594    	; 0x55a2 <find_volume+0x4d6>
    5350:	26 3f       	cpi	r18, 0xF6	; 246
    5352:	ff e0       	ldi	r31, 0x0F	; 15
    5354:	3f 07       	cpc	r19, r31
    5356:	41 05       	cpc	r20, r1
    5358:	51 05       	cpc	r21, r1
    535a:	18 f4       	brcc	.+6      	; 0x5362 <find_volume+0x296>
    535c:	61 e0       	ldi	r22, 0x01	; 1
    535e:	69 8b       	std	Y+17, r22	; 0x11
    5360:	02 c0       	rjmp	.+4      	; 0x5366 <find_volume+0x29a>
    5362:	e2 e0       	ldi	r30, 0x02	; 2
    5364:	e9 8b       	std	Y+17, r30	; 0x11
    5366:	86 3f       	cpi	r24, 0xF6	; 246
    5368:	9f 4f       	sbci	r25, 0xFF	; 255
    536a:	a1 05       	cpc	r26, r1
    536c:	b1 05       	cpc	r27, r1
    536e:	08 f0       	brcs	.+2      	; 0x5372 <find_volume+0x2a6>
    5370:	20 c1       	rjmp	.+576    	; 0x55b2 <find_volume+0x4e6>
    5372:	49 01       	movw	r8, r18
    5374:	5a 01       	movw	r10, r20
    5376:	62 e0       	ldi	r22, 0x02	; 2
    5378:	86 0e       	add	r8, r22
    537a:	91 1c       	adc	r9, r1
    537c:	a1 1c       	adc	r10, r1
    537e:	b1 1c       	adc	r11, r1
    5380:	d8 01       	movw	r26, r16
    5382:	56 96       	adiw	r26, 0x16	; 22
    5384:	8d 92       	st	X+, r8
    5386:	9d 92       	st	X+, r9
    5388:	ad 92       	st	X+, r10
    538a:	bc 92       	st	X, r11
    538c:	59 97       	sbiw	r26, 0x19	; 25
    538e:	f8 01       	movw	r30, r16
    5390:	46 8e       	std	Z+30, r4	; 0x1e
    5392:	57 8e       	std	Z+31, r5	; 0x1f
    5394:	60 a2       	std	Z+32, r6	; 0x20
    5396:	71 a2       	std	Z+33, r7	; 0x21
    5398:	8e 89       	ldd	r24, Y+22	; 0x16
    539a:	9f 89       	ldd	r25, Y+23	; 0x17
    539c:	a8 8d       	ldd	r26, Y+24	; 0x18
    539e:	b9 8d       	ldd	r27, Y+25	; 0x19
    53a0:	84 0d       	add	r24, r4
    53a2:	95 1d       	adc	r25, r5
    53a4:	a6 1d       	adc	r26, r6
    53a6:	b7 1d       	adc	r27, r7
    53a8:	82 a3       	std	Z+34, r24	; 0x22
    53aa:	93 a3       	std	Z+35, r25	; 0x23
    53ac:	a4 a3       	std	Z+36, r26	; 0x24
    53ae:	b5 a3       	std	Z+37, r27	; 0x25
    53b0:	4a 89       	ldd	r20, Y+18	; 0x12
    53b2:	5b 89       	ldd	r21, Y+19	; 0x13
    53b4:	6c 89       	ldd	r22, Y+20	; 0x14
    53b6:	7d 89       	ldd	r23, Y+21	; 0x15
    53b8:	44 0d       	add	r20, r4
    53ba:	55 1d       	adc	r21, r5
    53bc:	66 1d       	adc	r22, r6
    53be:	77 1d       	adc	r23, r7
    53c0:	42 a7       	std	Z+42, r20	; 0x2a
    53c2:	53 a7       	std	Z+43, r21	; 0x2b
    53c4:	64 a7       	std	Z+44, r22	; 0x2c
    53c6:	75 a7       	std	Z+45, r23	; 0x2d
    53c8:	f9 89       	ldd	r31, Y+17	; 0x11
    53ca:	f3 30       	cpi	r31, 0x03	; 3
    53cc:	c1 f4       	brne	.+48     	; 0x53fe <find_volume+0x332>
    53ce:	23 28       	or	r2, r3
    53d0:	09 f0       	breq	.+2      	; 0x53d4 <find_volume+0x308>
    53d2:	e9 c0       	rjmp	.+466    	; 0x55a6 <find_volume+0x4da>
    53d4:	f8 01       	movw	r30, r16
    53d6:	e2 5a       	subi	r30, 0xA2	; 162
    53d8:	ff 4f       	sbci	r31, 0xFF	; 255
    53da:	80 81       	ld	r24, Z
    53dc:	91 81       	ldd	r25, Z+1	; 0x01
    53de:	a2 81       	ldd	r26, Z+2	; 0x02
    53e0:	b3 81       	ldd	r27, Z+3	; 0x03
    53e2:	f8 01       	movw	r30, r16
    53e4:	86 a3       	std	Z+38, r24	; 0x26
    53e6:	97 a3       	std	Z+39, r25	; 0x27
    53e8:	a0 a7       	std	Z+40, r26	; 0x28
    53ea:	b1 a7       	std	Z+41, r27	; 0x29
    53ec:	88 0c       	add	r8, r8
    53ee:	99 1c       	adc	r9, r9
    53f0:	aa 1c       	adc	r10, r10
    53f2:	bb 1c       	adc	r11, r11
    53f4:	88 0c       	add	r8, r8
    53f6:	99 1c       	adc	r9, r9
    53f8:	aa 1c       	adc	r10, r10
    53fa:	bb 1c       	adc	r11, r11
    53fc:	2d c0       	rjmp	.+90     	; 0x5458 <find_volume+0x38c>
    53fe:	23 28       	or	r2, r3
    5400:	09 f4       	brne	.+2      	; 0x5404 <find_volume+0x338>
    5402:	d3 c0       	rjmp	.+422    	; 0x55aa <find_volume+0x4de>
    5404:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5406:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5408:	4c 8d       	ldd	r20, Y+28	; 0x1c
    540a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    540c:	82 0f       	add	r24, r18
    540e:	93 1f       	adc	r25, r19
    5410:	a4 1f       	adc	r26, r20
    5412:	b5 1f       	adc	r27, r21
    5414:	f8 01       	movw	r30, r16
    5416:	86 a3       	std	Z+38, r24	; 0x26
    5418:	97 a3       	std	Z+39, r25	; 0x27
    541a:	a0 a7       	std	Z+40, r26	; 0x28
    541c:	b1 a7       	std	Z+41, r27	; 0x29
    541e:	f9 89       	ldd	r31, Y+17	; 0x11
    5420:	f2 30       	cpi	r31, 0x02	; 2
    5422:	29 f4       	brne	.+10     	; 0x542e <find_volume+0x362>
    5424:	88 0c       	add	r8, r8
    5426:	99 1c       	adc	r9, r9
    5428:	aa 1c       	adc	r10, r10
    542a:	bb 1c       	adc	r11, r11
    542c:	15 c0       	rjmp	.+42     	; 0x5458 <find_volume+0x38c>
    542e:	a3 e0       	ldi	r26, 0x03	; 3
    5430:	b0 e0       	ldi	r27, 0x00	; 0
    5432:	a5 01       	movw	r20, r10
    5434:	94 01       	movw	r18, r8
    5436:	0e 94 56 56 	call	0xacac	; 0xacac <__muluhisi3>
    543a:	dc 01       	movw	r26, r24
    543c:	cb 01       	movw	r24, r22
    543e:	b6 95       	lsr	r27
    5440:	a7 95       	ror	r26
    5442:	97 95       	ror	r25
    5444:	87 95       	ror	r24
    5446:	21 e0       	ldi	r18, 0x01	; 1
    5448:	82 22       	and	r8, r18
    544a:	99 24       	eor	r9, r9
    544c:	aa 24       	eor	r10, r10
    544e:	bb 24       	eor	r11, r11
    5450:	88 0e       	add	r8, r24
    5452:	99 1e       	adc	r9, r25
    5454:	aa 1e       	adc	r10, r26
    5456:	bb 1e       	adc	r11, r27
    5458:	3f ef       	ldi	r19, 0xFF	; 255
    545a:	83 0e       	add	r8, r19
    545c:	31 e0       	ldi	r19, 0x01	; 1
    545e:	93 1e       	adc	r9, r19
    5460:	a1 1c       	adc	r10, r1
    5462:	b1 1c       	adc	r11, r1
    5464:	07 2e       	mov	r0, r23
    5466:	79 e0       	ldi	r23, 0x09	; 9
    5468:	b6 94       	lsr	r11
    546a:	a7 94       	ror	r10
    546c:	97 94       	ror	r9
    546e:	87 94       	ror	r8
    5470:	7a 95       	dec	r23
    5472:	d1 f7       	brne	.-12     	; 0x5468 <find_volume+0x39c>
    5474:	70 2d       	mov	r23, r0
    5476:	c8 14       	cp	r12, r8
    5478:	d9 04       	cpc	r13, r9
    547a:	ea 04       	cpc	r14, r10
    547c:	fb 04       	cpc	r15, r11
    547e:	08 f4       	brcc	.+2      	; 0x5482 <find_volume+0x3b6>
    5480:	96 c0       	rjmp	.+300    	; 0x55ae <find_volume+0x4e2>
    5482:	8f ef       	ldi	r24, 0xFF	; 255
    5484:	9f ef       	ldi	r25, 0xFF	; 255
    5486:	dc 01       	movw	r26, r24
    5488:	f8 01       	movw	r30, r16
    548a:	86 87       	std	Z+14, r24	; 0x0e
    548c:	97 87       	std	Z+15, r25	; 0x0f
    548e:	a0 8b       	std	Z+16, r26	; 0x10
    5490:	b1 8b       	std	Z+17, r27	; 0x11
    5492:	82 87       	std	Z+10, r24	; 0x0a
    5494:	93 87       	std	Z+11, r25	; 0x0b
    5496:	a4 87       	std	Z+12, r26	; 0x0c
    5498:	b5 87       	std	Z+13, r27	; 0x0d
    549a:	80 e8       	ldi	r24, 0x80	; 128
    549c:	85 83       	std	Z+5, r24	; 0x05
    549e:	f9 89       	ldd	r31, Y+17	; 0x11
    54a0:	f3 30       	cpi	r31, 0x03	; 3
    54a2:	09 f0       	breq	.+2      	; 0x54a6 <find_volume+0x3da>
    54a4:	48 c0       	rjmp	.+144    	; 0x5536 <find_volume+0x46a>
    54a6:	f8 01       	movw	r30, r16
    54a8:	ee 59       	subi	r30, 0x9E	; 158
    54aa:	ff 4f       	sbci	r31, 0xFF	; 255
    54ac:	80 81       	ld	r24, Z
    54ae:	91 81       	ldd	r25, Z+1	; 0x01
    54b0:	01 97       	sbiw	r24, 0x01	; 1
    54b2:	09 f0       	breq	.+2      	; 0x54b6 <find_volume+0x3ea>
    54b4:	40 c0       	rjmp	.+128    	; 0x5536 <find_volume+0x46a>
    54b6:	b3 01       	movw	r22, r6
    54b8:	a2 01       	movw	r20, r4
    54ba:	4f 5f       	subi	r20, 0xFF	; 255
    54bc:	5f 4f       	sbci	r21, 0xFF	; 255
    54be:	6f 4f       	sbci	r22, 0xFF	; 255
    54c0:	7f 4f       	sbci	r23, 0xFF	; 255
    54c2:	c8 01       	movw	r24, r16
    54c4:	64 dd       	rcall	.-1336   	; 0x4f8e <move_window>
    54c6:	81 11       	cpse	r24, r1
    54c8:	36 c0       	rjmp	.+108    	; 0x5536 <find_volume+0x46a>
    54ca:	d8 01       	movw	r26, r16
    54cc:	15 96       	adiw	r26, 0x05	; 5
    54ce:	1c 92       	st	X, r1
    54d0:	f8 01       	movw	r30, r16
    54d2:	e0 5d       	subi	r30, 0xD0	; 208
    54d4:	fd 4f       	sbci	r31, 0xFD	; 253
    54d6:	80 81       	ld	r24, Z
    54d8:	91 81       	ldd	r25, Z+1	; 0x01
    54da:	85 35       	cpi	r24, 0x55	; 85
    54dc:	9a 4a       	sbci	r25, 0xAA	; 170
    54de:	59 f5       	brne	.+86     	; 0x5536 <find_volume+0x46a>
    54e0:	f8 01       	movw	r30, r16
    54e2:	82 a9       	ldd	r24, Z+50	; 0x32
    54e4:	93 a9       	ldd	r25, Z+51	; 0x33
    54e6:	a4 a9       	ldd	r26, Z+52	; 0x34
    54e8:	b5 a9       	ldd	r27, Z+53	; 0x35
    54ea:	82 35       	cpi	r24, 0x52	; 82
    54ec:	92 45       	sbci	r25, 0x52	; 82
    54ee:	a1 46       	sbci	r26, 0x61	; 97
    54f0:	b1 44       	sbci	r27, 0x41	; 65
    54f2:	09 f5       	brne	.+66     	; 0x5536 <find_volume+0x46a>
    54f4:	f8 01       	movw	r30, r16
    54f6:	ea 5e       	subi	r30, 0xEA	; 234
    54f8:	fd 4f       	sbci	r31, 0xFD	; 253
    54fa:	80 81       	ld	r24, Z
    54fc:	91 81       	ldd	r25, Z+1	; 0x01
    54fe:	a2 81       	ldd	r26, Z+2	; 0x02
    5500:	b3 81       	ldd	r27, Z+3	; 0x03
    5502:	82 37       	cpi	r24, 0x72	; 114
    5504:	92 47       	sbci	r25, 0x72	; 114
    5506:	a1 44       	sbci	r26, 0x41	; 65
    5508:	b1 46       	sbci	r27, 0x61	; 97
    550a:	a9 f4       	brne	.+42     	; 0x5536 <find_volume+0x46a>
    550c:	34 96       	adiw	r30, 0x04	; 4
    550e:	80 81       	ld	r24, Z
    5510:	91 81       	ldd	r25, Z+1	; 0x01
    5512:	a2 81       	ldd	r26, Z+2	; 0x02
    5514:	b3 81       	ldd	r27, Z+3	; 0x03
    5516:	f8 01       	movw	r30, r16
    5518:	86 87       	std	Z+14, r24	; 0x0e
    551a:	97 87       	std	Z+15, r25	; 0x0f
    551c:	a0 8b       	std	Z+16, r26	; 0x10
    551e:	b1 8b       	std	Z+17, r27	; 0x11
    5520:	e2 5e       	subi	r30, 0xE2	; 226
    5522:	fd 4f       	sbci	r31, 0xFD	; 253
    5524:	80 81       	ld	r24, Z
    5526:	91 81       	ldd	r25, Z+1	; 0x01
    5528:	a2 81       	ldd	r26, Z+2	; 0x02
    552a:	b3 81       	ldd	r27, Z+3	; 0x03
    552c:	f8 01       	movw	r30, r16
    552e:	82 87       	std	Z+10, r24	; 0x0a
    5530:	93 87       	std	Z+11, r25	; 0x0b
    5532:	a4 87       	std	Z+12, r26	; 0x0c
    5534:	b5 87       	std	Z+13, r27	; 0x0d
    5536:	e9 89       	ldd	r30, Y+17	; 0x11
    5538:	d8 01       	movw	r26, r16
    553a:	ec 93       	st	X, r30
    553c:	80 91 5a 2a 	lds	r24, 0x2A5A
    5540:	90 91 5b 2a 	lds	r25, 0x2A5B
    5544:	01 96       	adiw	r24, 0x01	; 1
    5546:	80 93 5a 2a 	sts	0x2A5A, r24
    554a:	90 93 5b 2a 	sts	0x2A5B, r25
    554e:	16 96       	adiw	r26, 0x06	; 6
    5550:	8d 93       	st	X+, r24
    5552:	9c 93       	st	X, r25
    5554:	17 97       	sbiw	r26, 0x07	; 7
    5556:	52 96       	adiw	r26, 0x12	; 18
    5558:	1d 92       	st	X+, r1
    555a:	1d 92       	st	X+, r1
    555c:	1d 92       	st	X+, r1
    555e:	1c 92       	st	X, r1
    5560:	55 97       	sbiw	r26, 0x15	; 21
    5562:	80 e0       	ldi	r24, 0x00	; 0
    5564:	51 c0       	rjmp	.+162    	; 0x5608 <find_volume+0x53c>
    5566:	8b e0       	ldi	r24, 0x0B	; 11
    5568:	4f c0       	rjmp	.+158    	; 0x5608 <find_volume+0x53c>
    556a:	8c e0       	ldi	r24, 0x0C	; 12
    556c:	4d c0       	rjmp	.+154    	; 0x5608 <find_volume+0x53c>
    556e:	80 e0       	ldi	r24, 0x00	; 0
    5570:	4b c0       	rjmp	.+150    	; 0x5608 <find_volume+0x53c>
    5572:	8a e0       	ldi	r24, 0x0A	; 10
    5574:	49 c0       	rjmp	.+146    	; 0x5608 <find_volume+0x53c>
    5576:	83 e0       	ldi	r24, 0x03	; 3
    5578:	47 c0       	rjmp	.+142    	; 0x5608 <find_volume+0x53c>
    557a:	8a e0       	ldi	r24, 0x0A	; 10
    557c:	45 c0       	rjmp	.+138    	; 0x5608 <find_volume+0x53c>
    557e:	81 e0       	ldi	r24, 0x01	; 1
    5580:	43 c0       	rjmp	.+134    	; 0x5608 <find_volume+0x53c>
    5582:	8d e0       	ldi	r24, 0x0D	; 13
    5584:	41 c0       	rjmp	.+130    	; 0x5608 <find_volume+0x53c>
    5586:	8d e0       	ldi	r24, 0x0D	; 13
    5588:	3f c0       	rjmp	.+126    	; 0x5608 <find_volume+0x53c>
    558a:	8d e0       	ldi	r24, 0x0D	; 13
    558c:	3d c0       	rjmp	.+122    	; 0x5608 <find_volume+0x53c>
    558e:	8d e0       	ldi	r24, 0x0D	; 13
    5590:	3b c0       	rjmp	.+118    	; 0x5608 <find_volume+0x53c>
    5592:	8d e0       	ldi	r24, 0x0D	; 13
    5594:	39 c0       	rjmp	.+114    	; 0x5608 <find_volume+0x53c>
    5596:	8d e0       	ldi	r24, 0x0D	; 13
    5598:	37 c0       	rjmp	.+110    	; 0x5608 <find_volume+0x53c>
    559a:	8d e0       	ldi	r24, 0x0D	; 13
    559c:	35 c0       	rjmp	.+106    	; 0x5608 <find_volume+0x53c>
    559e:	8d e0       	ldi	r24, 0x0D	; 13
    55a0:	33 c0       	rjmp	.+102    	; 0x5608 <find_volume+0x53c>
    55a2:	8d e0       	ldi	r24, 0x0D	; 13
    55a4:	31 c0       	rjmp	.+98     	; 0x5608 <find_volume+0x53c>
    55a6:	8d e0       	ldi	r24, 0x0D	; 13
    55a8:	2f c0       	rjmp	.+94     	; 0x5608 <find_volume+0x53c>
    55aa:	8d e0       	ldi	r24, 0x0D	; 13
    55ac:	2d c0       	rjmp	.+90     	; 0x5608 <find_volume+0x53c>
    55ae:	8d e0       	ldi	r24, 0x0D	; 13
    55b0:	2b c0       	rjmp	.+86     	; 0x5608 <find_volume+0x53c>
    55b2:	49 01       	movw	r8, r18
    55b4:	5a 01       	movw	r10, r20
    55b6:	b2 e0       	ldi	r27, 0x02	; 2
    55b8:	8b 0e       	add	r8, r27
    55ba:	91 1c       	adc	r9, r1
    55bc:	a1 1c       	adc	r10, r1
    55be:	b1 1c       	adc	r11, r1
    55c0:	f8 01       	movw	r30, r16
    55c2:	86 8a       	std	Z+22, r8	; 0x16
    55c4:	97 8a       	std	Z+23, r9	; 0x17
    55c6:	a0 8e       	std	Z+24, r10	; 0x18
    55c8:	b1 8e       	std	Z+25, r11	; 0x19
    55ca:	46 8e       	std	Z+30, r4	; 0x1e
    55cc:	57 8e       	std	Z+31, r5	; 0x1f
    55ce:	60 a2       	std	Z+32, r6	; 0x20
    55d0:	71 a2       	std	Z+33, r7	; 0x21
    55d2:	8e 89       	ldd	r24, Y+22	; 0x16
    55d4:	9f 89       	ldd	r25, Y+23	; 0x17
    55d6:	a8 8d       	ldd	r26, Y+24	; 0x18
    55d8:	b9 8d       	ldd	r27, Y+25	; 0x19
    55da:	84 0d       	add	r24, r4
    55dc:	95 1d       	adc	r25, r5
    55de:	a6 1d       	adc	r26, r6
    55e0:	b7 1d       	adc	r27, r7
    55e2:	82 a3       	std	Z+34, r24	; 0x22
    55e4:	93 a3       	std	Z+35, r25	; 0x23
    55e6:	a4 a3       	std	Z+36, r26	; 0x24
    55e8:	b5 a3       	std	Z+37, r27	; 0x25
    55ea:	8a 89       	ldd	r24, Y+18	; 0x12
    55ec:	9b 89       	ldd	r25, Y+19	; 0x13
    55ee:	ac 89       	ldd	r26, Y+20	; 0x14
    55f0:	bd 89       	ldd	r27, Y+21	; 0x15
    55f2:	84 0d       	add	r24, r4
    55f4:	95 1d       	adc	r25, r5
    55f6:	a6 1d       	adc	r26, r6
    55f8:	b7 1d       	adc	r27, r7
    55fa:	82 a7       	std	Z+42, r24	; 0x2a
    55fc:	93 a7       	std	Z+43, r25	; 0x2b
    55fe:	a4 a7       	std	Z+44, r26	; 0x2c
    5600:	b5 a7       	std	Z+45, r27	; 0x2d
    5602:	f3 e0       	ldi	r31, 0x03	; 3
    5604:	f9 8b       	std	Y+17, r31	; 0x11
    5606:	e3 ce       	rjmp	.-570    	; 0x53ce <find_volume+0x302>
    5608:	6d 96       	adiw	r28, 0x1d	; 29
    560a:	cd bf       	out	0x3d, r28	; 61
    560c:	de bf       	out	0x3e, r29	; 62
    560e:	df 91       	pop	r29
    5610:	cf 91       	pop	r28
    5612:	1f 91       	pop	r17
    5614:	0f 91       	pop	r16
    5616:	ff 90       	pop	r15
    5618:	ef 90       	pop	r14
    561a:	df 90       	pop	r13
    561c:	cf 90       	pop	r12
    561e:	bf 90       	pop	r11
    5620:	af 90       	pop	r10
    5622:	9f 90       	pop	r9
    5624:	8f 90       	pop	r8
    5626:	7f 90       	pop	r7
    5628:	6f 90       	pop	r6
    562a:	5f 90       	pop	r5
    562c:	4f 90       	pop	r4
    562e:	3f 90       	pop	r3
    5630:	2f 90       	pop	r2
    5632:	08 95       	ret

00005634 <sync_fs>:
    5634:	ef 92       	push	r14
    5636:	ff 92       	push	r15
    5638:	0f 93       	push	r16
    563a:	1f 93       	push	r17
    563c:	cf 93       	push	r28
    563e:	df 93       	push	r29
    5640:	ec 01       	movw	r28, r24
    5642:	3a dc       	rcall	.-1932   	; 0x4eb8 <sync_window>
    5644:	98 2f       	mov	r25, r24
    5646:	81 11       	cpse	r24, r1
    5648:	5b c0       	rjmp	.+182    	; 0x5700 <sync_fs+0xcc>
    564a:	88 81       	ld	r24, Y
    564c:	83 30       	cpi	r24, 0x03	; 3
    564e:	09 f0       	breq	.+2      	; 0x5652 <sync_fs+0x1e>
    5650:	4d c0       	rjmp	.+154    	; 0x56ec <sync_fs+0xb8>
    5652:	8d 81       	ldd	r24, Y+5	; 0x05
    5654:	81 30       	cpi	r24, 0x01	; 1
    5656:	09 f0       	breq	.+2      	; 0x565a <sync_fs+0x26>
    5658:	49 c0       	rjmp	.+146    	; 0x56ec <sync_fs+0xb8>
    565a:	40 e0       	ldi	r20, 0x00	; 0
    565c:	52 e0       	ldi	r21, 0x02	; 2
    565e:	60 e0       	ldi	r22, 0x00	; 0
    5660:	70 e0       	ldi	r23, 0x00	; 0
    5662:	7e 01       	movw	r14, r28
    5664:	82 e3       	ldi	r24, 0x32	; 50
    5666:	e8 0e       	add	r14, r24
    5668:	f1 1c       	adc	r15, r1
    566a:	c7 01       	movw	r24, r14
    566c:	c7 db       	rcall	.-2162   	; 0x4dfc <mem_set>
    566e:	85 e5       	ldi	r24, 0x55	; 85
    5670:	9a ea       	ldi	r25, 0xAA	; 170
    5672:	fe 01       	movw	r30, r28
    5674:	e0 5d       	subi	r30, 0xD0	; 208
    5676:	fd 4f       	sbci	r31, 0xFD	; 253
    5678:	80 83       	st	Z, r24
    567a:	91 83       	std	Z+1, r25	; 0x01
    567c:	82 e5       	ldi	r24, 0x52	; 82
    567e:	92 e5       	ldi	r25, 0x52	; 82
    5680:	a1 e6       	ldi	r26, 0x61	; 97
    5682:	b1 e4       	ldi	r27, 0x41	; 65
    5684:	8a ab       	std	Y+50, r24	; 0x32
    5686:	9b ab       	std	Y+51, r25	; 0x33
    5688:	ac ab       	std	Y+52, r26	; 0x34
    568a:	bd ab       	std	Y+53, r27	; 0x35
    568c:	82 e7       	ldi	r24, 0x72	; 114
    568e:	92 e7       	ldi	r25, 0x72	; 114
    5690:	a1 e4       	ldi	r26, 0x41	; 65
    5692:	b1 e6       	ldi	r27, 0x61	; 97
    5694:	7a 97       	sbiw	r30, 0x1a	; 26
    5696:	80 83       	st	Z, r24
    5698:	91 83       	std	Z+1, r25	; 0x01
    569a:	a2 83       	std	Z+2, r26	; 0x02
    569c:	b3 83       	std	Z+3, r27	; 0x03
    569e:	8e 85       	ldd	r24, Y+14	; 0x0e
    56a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    56a2:	a8 89       	ldd	r26, Y+16	; 0x10
    56a4:	b9 89       	ldd	r27, Y+17	; 0x11
    56a6:	34 96       	adiw	r30, 0x04	; 4
    56a8:	80 83       	st	Z, r24
    56aa:	91 83       	std	Z+1, r25	; 0x01
    56ac:	a2 83       	std	Z+2, r26	; 0x02
    56ae:	b3 83       	std	Z+3, r27	; 0x03
    56b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    56b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    56b4:	ac 85       	ldd	r26, Y+12	; 0x0c
    56b6:	bd 85       	ldd	r27, Y+13	; 0x0d
    56b8:	34 96       	adiw	r30, 0x04	; 4
    56ba:	80 83       	st	Z, r24
    56bc:	91 83       	std	Z+1, r25	; 0x01
    56be:	a2 83       	std	Z+2, r26	; 0x02
    56c0:	b3 83       	std	Z+3, r27	; 0x03
    56c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    56c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    56c6:	a8 a1       	ldd	r26, Y+32	; 0x20
    56c8:	b9 a1       	ldd	r27, Y+33	; 0x21
    56ca:	9c 01       	movw	r18, r24
    56cc:	ad 01       	movw	r20, r26
    56ce:	2f 5f       	subi	r18, 0xFF	; 255
    56d0:	3f 4f       	sbci	r19, 0xFF	; 255
    56d2:	4f 4f       	sbci	r20, 0xFF	; 255
    56d4:	5f 4f       	sbci	r21, 0xFF	; 255
    56d6:	2e a7       	std	Y+46, r18	; 0x2e
    56d8:	3f a7       	std	Y+47, r19	; 0x2f
    56da:	48 ab       	std	Y+48, r20	; 0x30
    56dc:	59 ab       	std	Y+49, r21	; 0x31
    56de:	01 e0       	ldi	r16, 0x01	; 1
    56e0:	10 e0       	ldi	r17, 0x00	; 0
    56e2:	b7 01       	movw	r22, r14
    56e4:	89 81       	ldd	r24, Y+1	; 0x01
    56e6:	0e 94 75 3b 	call	0x76ea	; 0x76ea <disk_write>
    56ea:	1d 82       	std	Y+5, r1	; 0x05
    56ec:	40 e0       	ldi	r20, 0x00	; 0
    56ee:	50 e0       	ldi	r21, 0x00	; 0
    56f0:	60 e0       	ldi	r22, 0x00	; 0
    56f2:	89 81       	ldd	r24, Y+1	; 0x01
    56f4:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <disk_ioctl>
    56f8:	91 e0       	ldi	r25, 0x01	; 1
    56fa:	81 11       	cpse	r24, r1
    56fc:	01 c0       	rjmp	.+2      	; 0x5700 <sync_fs+0xcc>
    56fe:	90 e0       	ldi	r25, 0x00	; 0
    5700:	89 2f       	mov	r24, r25
    5702:	df 91       	pop	r29
    5704:	cf 91       	pop	r28
    5706:	1f 91       	pop	r17
    5708:	0f 91       	pop	r16
    570a:	ff 90       	pop	r15
    570c:	ef 90       	pop	r14
    570e:	08 95       	ret

00005710 <clust2sect>:
    5710:	cf 92       	push	r12
    5712:	df 92       	push	r13
    5714:	ef 92       	push	r14
    5716:	ff 92       	push	r15
    5718:	fc 01       	movw	r30, r24
    571a:	9a 01       	movw	r18, r20
    571c:	ab 01       	movw	r20, r22
    571e:	22 50       	subi	r18, 0x02	; 2
    5720:	31 09       	sbc	r19, r1
    5722:	41 09       	sbc	r20, r1
    5724:	51 09       	sbc	r21, r1
    5726:	c6 88       	ldd	r12, Z+22	; 0x16
    5728:	d7 88       	ldd	r13, Z+23	; 0x17
    572a:	e0 8c       	ldd	r14, Z+24	; 0x18
    572c:	f1 8c       	ldd	r15, Z+25	; 0x19
    572e:	82 e0       	ldi	r24, 0x02	; 2
    5730:	c8 1a       	sub	r12, r24
    5732:	d1 08       	sbc	r13, r1
    5734:	e1 08       	sbc	r14, r1
    5736:	f1 08       	sbc	r15, r1
    5738:	2c 15       	cp	r18, r12
    573a:	3d 05       	cpc	r19, r13
    573c:	4e 05       	cpc	r20, r14
    573e:	5f 05       	cpc	r21, r15
    5740:	68 f4       	brcc	.+26     	; 0x575c <clust2sect+0x4c>
    5742:	a2 81       	ldd	r26, Z+2	; 0x02
    5744:	b0 e0       	ldi	r27, 0x00	; 0
    5746:	0e 94 56 56 	call	0xacac	; 0xacac <__muluhisi3>
    574a:	c2 a4       	ldd	r12, Z+42	; 0x2a
    574c:	d3 a4       	ldd	r13, Z+43	; 0x2b
    574e:	e4 a4       	ldd	r14, Z+44	; 0x2c
    5750:	f5 a4       	ldd	r15, Z+45	; 0x2d
    5752:	6c 0d       	add	r22, r12
    5754:	7d 1d       	adc	r23, r13
    5756:	8e 1d       	adc	r24, r14
    5758:	9f 1d       	adc	r25, r15
    575a:	03 c0       	rjmp	.+6      	; 0x5762 <clust2sect+0x52>
    575c:	60 e0       	ldi	r22, 0x00	; 0
    575e:	70 e0       	ldi	r23, 0x00	; 0
    5760:	cb 01       	movw	r24, r22
    5762:	ff 90       	pop	r15
    5764:	ef 90       	pop	r14
    5766:	df 90       	pop	r13
    5768:	cf 90       	pop	r12
    576a:	08 95       	ret

0000576c <get_fat>:
    576c:	af 92       	push	r10
    576e:	bf 92       	push	r11
    5770:	cf 92       	push	r12
    5772:	df 92       	push	r13
    5774:	ef 92       	push	r14
    5776:	ff 92       	push	r15
    5778:	0f 93       	push	r16
    577a:	1f 93       	push	r17
    577c:	cf 93       	push	r28
    577e:	df 93       	push	r29
    5780:	ec 01       	movw	r28, r24
    5782:	6a 01       	movw	r12, r20
    5784:	7b 01       	movw	r14, r22
    5786:	42 30       	cpi	r20, 0x02	; 2
    5788:	51 05       	cpc	r21, r1
    578a:	61 05       	cpc	r22, r1
    578c:	71 05       	cpc	r23, r1
    578e:	08 f4       	brcc	.+2      	; 0x5792 <get_fat+0x26>
    5790:	aa c0       	rjmp	.+340    	; 0x58e6 <get_fat+0x17a>
    5792:	4e 89       	ldd	r20, Y+22	; 0x16
    5794:	5f 89       	ldd	r21, Y+23	; 0x17
    5796:	68 8d       	ldd	r22, Y+24	; 0x18
    5798:	79 8d       	ldd	r23, Y+25	; 0x19
    579a:	c4 16       	cp	r12, r20
    579c:	d5 06       	cpc	r13, r21
    579e:	e6 06       	cpc	r14, r22
    57a0:	f7 06       	cpc	r15, r23
    57a2:	08 f0       	brcs	.+2      	; 0x57a6 <get_fat+0x3a>
    57a4:	a5 c0       	rjmp	.+330    	; 0x58f0 <get_fat+0x184>
    57a6:	88 81       	ld	r24, Y
    57a8:	82 30       	cpi	r24, 0x02	; 2
    57aa:	09 f4       	brne	.+2      	; 0x57ae <get_fat+0x42>
    57ac:	4b c0       	rjmp	.+150    	; 0x5844 <get_fat+0xd8>
    57ae:	83 30       	cpi	r24, 0x03	; 3
    57b0:	09 f4       	brne	.+2      	; 0x57b4 <get_fat+0x48>
    57b2:	6a c0       	rjmp	.+212    	; 0x5888 <get_fat+0x11c>
    57b4:	81 30       	cpi	r24, 0x01	; 1
    57b6:	09 f0       	breq	.+2      	; 0x57ba <get_fat+0x4e>
    57b8:	a0 c0       	rjmp	.+320    	; 0x58fa <get_fat+0x18e>
    57ba:	86 01       	movw	r16, r12
    57bc:	16 95       	lsr	r17
    57be:	07 95       	ror	r16
    57c0:	0c 0d       	add	r16, r12
    57c2:	1d 1d       	adc	r17, r13
    57c4:	c8 01       	movw	r24, r16
    57c6:	89 2f       	mov	r24, r25
    57c8:	99 27       	eor	r25, r25
    57ca:	86 95       	lsr	r24
    57cc:	4a a1       	ldd	r20, Y+34	; 0x22
    57ce:	5b a1       	ldd	r21, Y+35	; 0x23
    57d0:	6c a1       	ldd	r22, Y+36	; 0x24
    57d2:	7d a1       	ldd	r23, Y+37	; 0x25
    57d4:	48 0f       	add	r20, r24
    57d6:	59 1f       	adc	r21, r25
    57d8:	61 1d       	adc	r22, r1
    57da:	71 1d       	adc	r23, r1
    57dc:	ce 01       	movw	r24, r28
    57de:	d7 db       	rcall	.-2130   	; 0x4f8e <move_window>
    57e0:	81 11       	cpse	r24, r1
    57e2:	90 c0       	rjmp	.+288    	; 0x5904 <get_fat+0x198>
    57e4:	58 01       	movw	r10, r16
    57e6:	8f ef       	ldi	r24, 0xFF	; 255
    57e8:	a8 1a       	sub	r10, r24
    57ea:	b8 0a       	sbc	r11, r24
    57ec:	11 70       	andi	r17, 0x01	; 1
    57ee:	fe 01       	movw	r30, r28
    57f0:	e0 0f       	add	r30, r16
    57f2:	f1 1f       	adc	r31, r17
    57f4:	12 a9       	ldd	r17, Z+50	; 0x32
    57f6:	c5 01       	movw	r24, r10
    57f8:	89 2f       	mov	r24, r25
    57fa:	99 27       	eor	r25, r25
    57fc:	86 95       	lsr	r24
    57fe:	4a a1       	ldd	r20, Y+34	; 0x22
    5800:	5b a1       	ldd	r21, Y+35	; 0x23
    5802:	6c a1       	ldd	r22, Y+36	; 0x24
    5804:	7d a1       	ldd	r23, Y+37	; 0x25
    5806:	48 0f       	add	r20, r24
    5808:	59 1f       	adc	r21, r25
    580a:	61 1d       	adc	r22, r1
    580c:	71 1d       	adc	r23, r1
    580e:	ce 01       	movw	r24, r28
    5810:	be db       	rcall	.-2180   	; 0x4f8e <move_window>
    5812:	81 11       	cpse	r24, r1
    5814:	7b c0       	rjmp	.+246    	; 0x590c <get_fat+0x1a0>
    5816:	81 e0       	ldi	r24, 0x01	; 1
    5818:	b8 22       	and	r11, r24
    581a:	ca 0d       	add	r28, r10
    581c:	db 1d       	adc	r29, r11
    581e:	8a a9       	ldd	r24, Y+50	; 0x32
    5820:	61 2f       	mov	r22, r17
    5822:	70 e0       	ldi	r23, 0x00	; 0
    5824:	78 2b       	or	r23, r24
    5826:	c0 fe       	sbrs	r12, 0
    5828:	09 c0       	rjmp	.+18     	; 0x583c <get_fat+0xd0>
    582a:	72 95       	swap	r23
    582c:	62 95       	swap	r22
    582e:	6f 70       	andi	r22, 0x0F	; 15
    5830:	67 27       	eor	r22, r23
    5832:	7f 70       	andi	r23, 0x0F	; 15
    5834:	67 27       	eor	r22, r23
    5836:	80 e0       	ldi	r24, 0x00	; 0
    5838:	90 e0       	ldi	r25, 0x00	; 0
    583a:	73 c0       	rjmp	.+230    	; 0x5922 <get_fat+0x1b6>
    583c:	7f 70       	andi	r23, 0x0F	; 15
    583e:	80 e0       	ldi	r24, 0x00	; 0
    5840:	90 e0       	ldi	r25, 0x00	; 0
    5842:	6f c0       	rjmp	.+222    	; 0x5922 <get_fat+0x1b6>
    5844:	77 27       	eor	r23, r23
    5846:	6f 2d       	mov	r22, r15
    5848:	5e 2d       	mov	r21, r14
    584a:	4d 2d       	mov	r20, r13
    584c:	0a a1       	ldd	r16, Y+34	; 0x22
    584e:	1b a1       	ldd	r17, Y+35	; 0x23
    5850:	2c a1       	ldd	r18, Y+36	; 0x24
    5852:	3d a1       	ldd	r19, Y+37	; 0x25
    5854:	40 0f       	add	r20, r16
    5856:	51 1f       	adc	r21, r17
    5858:	62 1f       	adc	r22, r18
    585a:	73 1f       	adc	r23, r19
    585c:	ce 01       	movw	r24, r28
    585e:	97 db       	rcall	.-2258   	; 0x4f8e <move_window>
    5860:	81 11       	cpse	r24, r1
    5862:	58 c0       	rjmp	.+176    	; 0x5914 <get_fat+0x1a8>
    5864:	cc 0c       	add	r12, r12
    5866:	dd 1c       	adc	r13, r13
    5868:	ee 1c       	adc	r14, r14
    586a:	ff 1c       	adc	r15, r15
    586c:	e8 94       	clt
    586e:	c0 f8       	bld	r12, 0
    5870:	81 e0       	ldi	r24, 0x01	; 1
    5872:	d8 22       	and	r13, r24
    5874:	ee 24       	eor	r14, r14
    5876:	ff 24       	eor	r15, r15
    5878:	fe 01       	movw	r30, r28
    587a:	ec 0d       	add	r30, r12
    587c:	fd 1d       	adc	r31, r13
    587e:	62 a9       	ldd	r22, Z+50	; 0x32
    5880:	73 a9       	ldd	r23, Z+51	; 0x33
    5882:	80 e0       	ldi	r24, 0x00	; 0
    5884:	90 e0       	ldi	r25, 0x00	; 0
    5886:	4d c0       	rjmp	.+154    	; 0x5922 <get_fat+0x1b6>
    5888:	4a a1       	ldd	r20, Y+34	; 0x22
    588a:	5b a1       	ldd	r21, Y+35	; 0x23
    588c:	6c a1       	ldd	r22, Y+36	; 0x24
    588e:	7d a1       	ldd	r23, Y+37	; 0x25
    5890:	97 01       	movw	r18, r14
    5892:	86 01       	movw	r16, r12
    5894:	68 94       	set
    5896:	16 f8       	bld	r1, 6
    5898:	36 95       	lsr	r19
    589a:	27 95       	ror	r18
    589c:	17 95       	ror	r17
    589e:	07 95       	ror	r16
    58a0:	16 94       	lsr	r1
    58a2:	d1 f7       	brne	.-12     	; 0x5898 <get_fat+0x12c>
    58a4:	40 0f       	add	r20, r16
    58a6:	51 1f       	adc	r21, r17
    58a8:	62 1f       	adc	r22, r18
    58aa:	73 1f       	adc	r23, r19
    58ac:	ce 01       	movw	r24, r28
    58ae:	6f db       	rcall	.-2338   	; 0x4f8e <move_window>
    58b0:	81 11       	cpse	r24, r1
    58b2:	34 c0       	rjmp	.+104    	; 0x591c <get_fat+0x1b0>
    58b4:	cc 0c       	add	r12, r12
    58b6:	dd 1c       	adc	r13, r13
    58b8:	ee 1c       	adc	r14, r14
    58ba:	ff 1c       	adc	r15, r15
    58bc:	cc 0c       	add	r12, r12
    58be:	dd 1c       	adc	r13, r13
    58c0:	ee 1c       	adc	r14, r14
    58c2:	ff 1c       	adc	r15, r15
    58c4:	8c ef       	ldi	r24, 0xFC	; 252
    58c6:	c8 22       	and	r12, r24
    58c8:	81 e0       	ldi	r24, 0x01	; 1
    58ca:	d8 22       	and	r13, r24
    58cc:	ee 24       	eor	r14, r14
    58ce:	ff 24       	eor	r15, r15
    58d0:	fe 01       	movw	r30, r28
    58d2:	ec 0d       	add	r30, r12
    58d4:	fd 1d       	adc	r31, r13
    58d6:	82 a9       	ldd	r24, Z+50	; 0x32
    58d8:	93 a9       	ldd	r25, Z+51	; 0x33
    58da:	a4 a9       	ldd	r26, Z+52	; 0x34
    58dc:	b5 a9       	ldd	r27, Z+53	; 0x35
    58de:	bc 01       	movw	r22, r24
    58e0:	cd 01       	movw	r24, r26
    58e2:	9f 70       	andi	r25, 0x0F	; 15
    58e4:	1e c0       	rjmp	.+60     	; 0x5922 <get_fat+0x1b6>
    58e6:	61 e0       	ldi	r22, 0x01	; 1
    58e8:	70 e0       	ldi	r23, 0x00	; 0
    58ea:	80 e0       	ldi	r24, 0x00	; 0
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	19 c0       	rjmp	.+50     	; 0x5922 <get_fat+0x1b6>
    58f0:	61 e0       	ldi	r22, 0x01	; 1
    58f2:	70 e0       	ldi	r23, 0x00	; 0
    58f4:	80 e0       	ldi	r24, 0x00	; 0
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	14 c0       	rjmp	.+40     	; 0x5922 <get_fat+0x1b6>
    58fa:	61 e0       	ldi	r22, 0x01	; 1
    58fc:	70 e0       	ldi	r23, 0x00	; 0
    58fe:	80 e0       	ldi	r24, 0x00	; 0
    5900:	90 e0       	ldi	r25, 0x00	; 0
    5902:	0f c0       	rjmp	.+30     	; 0x5922 <get_fat+0x1b6>
    5904:	6f ef       	ldi	r22, 0xFF	; 255
    5906:	7f ef       	ldi	r23, 0xFF	; 255
    5908:	cb 01       	movw	r24, r22
    590a:	0b c0       	rjmp	.+22     	; 0x5922 <get_fat+0x1b6>
    590c:	6f ef       	ldi	r22, 0xFF	; 255
    590e:	7f ef       	ldi	r23, 0xFF	; 255
    5910:	cb 01       	movw	r24, r22
    5912:	07 c0       	rjmp	.+14     	; 0x5922 <get_fat+0x1b6>
    5914:	6f ef       	ldi	r22, 0xFF	; 255
    5916:	7f ef       	ldi	r23, 0xFF	; 255
    5918:	cb 01       	movw	r24, r22
    591a:	03 c0       	rjmp	.+6      	; 0x5922 <get_fat+0x1b6>
    591c:	6f ef       	ldi	r22, 0xFF	; 255
    591e:	7f ef       	ldi	r23, 0xFF	; 255
    5920:	cb 01       	movw	r24, r22
    5922:	df 91       	pop	r29
    5924:	cf 91       	pop	r28
    5926:	1f 91       	pop	r17
    5928:	0f 91       	pop	r16
    592a:	ff 90       	pop	r15
    592c:	ef 90       	pop	r14
    592e:	df 90       	pop	r13
    5930:	cf 90       	pop	r12
    5932:	bf 90       	pop	r11
    5934:	af 90       	pop	r10
    5936:	08 95       	ret

00005938 <dir_sdi>:
    5938:	af 92       	push	r10
    593a:	bf 92       	push	r11
    593c:	cf 92       	push	r12
    593e:	df 92       	push	r13
    5940:	ef 92       	push	r14
    5942:	ff 92       	push	r15
    5944:	0f 93       	push	r16
    5946:	1f 93       	push	r17
    5948:	cf 93       	push	r28
    594a:	df 93       	push	r29
    594c:	ec 01       	movw	r28, r24
    594e:	8b 01       	movw	r16, r22
    5950:	6c 83       	std	Y+4, r22	; 0x04
    5952:	7d 83       	std	Y+5, r23	; 0x05
    5954:	ce 80       	ldd	r12, Y+6	; 0x06
    5956:	df 80       	ldd	r13, Y+7	; 0x07
    5958:	e8 84       	ldd	r14, Y+8	; 0x08
    595a:	f9 84       	ldd	r15, Y+9	; 0x09
    595c:	81 e0       	ldi	r24, 0x01	; 1
    595e:	c8 16       	cp	r12, r24
    5960:	d1 04       	cpc	r13, r1
    5962:	e1 04       	cpc	r14, r1
    5964:	f1 04       	cpc	r15, r1
    5966:	09 f4       	brne	.+2      	; 0x596a <dir_sdi+0x32>
    5968:	8a c0       	rjmp	.+276    	; 0x5a7e <dir_sdi+0x146>
    596a:	e8 81       	ld	r30, Y
    596c:	f9 81       	ldd	r31, Y+1	; 0x01
    596e:	86 89       	ldd	r24, Z+22	; 0x16
    5970:	97 89       	ldd	r25, Z+23	; 0x17
    5972:	a0 8d       	ldd	r26, Z+24	; 0x18
    5974:	b1 8d       	ldd	r27, Z+25	; 0x19
    5976:	c8 16       	cp	r12, r24
    5978:	d9 06       	cpc	r13, r25
    597a:	ea 06       	cpc	r14, r26
    597c:	fb 06       	cpc	r15, r27
    597e:	08 f0       	brcs	.+2      	; 0x5982 <dir_sdi+0x4a>
    5980:	80 c0       	rjmp	.+256    	; 0x5a82 <dir_sdi+0x14a>
    5982:	c1 14       	cp	r12, r1
    5984:	d1 04       	cpc	r13, r1
    5986:	e1 04       	cpc	r14, r1
    5988:	f1 04       	cpc	r15, r1
    598a:	c1 f4       	brne	.+48     	; 0x59bc <dir_sdi+0x84>
    598c:	80 81       	ld	r24, Z
    598e:	83 30       	cpi	r24, 0x03	; 3
    5990:	41 f4       	brne	.+16     	; 0x59a2 <dir_sdi+0x6a>
    5992:	86 a1       	ldd	r24, Z+38	; 0x26
    5994:	97 a1       	ldd	r25, Z+39	; 0x27
    5996:	a0 a5       	ldd	r26, Z+40	; 0x28
    5998:	b1 a5       	ldd	r27, Z+41	; 0x29
    599a:	00 97       	sbiw	r24, 0x00	; 0
    599c:	a1 05       	cpc	r26, r1
    599e:	b1 05       	cpc	r27, r1
    59a0:	59 f4       	brne	.+22     	; 0x59b8 <dir_sdi+0x80>
    59a2:	80 85       	ldd	r24, Z+8	; 0x08
    59a4:	91 85       	ldd	r25, Z+9	; 0x09
    59a6:	08 17       	cp	r16, r24
    59a8:	19 07       	cpc	r17, r25
    59aa:	08 f0       	brcs	.+2      	; 0x59ae <dir_sdi+0x76>
    59ac:	6c c0       	rjmp	.+216    	; 0x5a86 <dir_sdi+0x14e>
    59ae:	66 a1       	ldd	r22, Z+38	; 0x26
    59b0:	77 a1       	ldd	r23, Z+39	; 0x27
    59b2:	80 a5       	ldd	r24, Z+40	; 0x28
    59b4:	91 a5       	ldd	r25, Z+41	; 0x29
    59b6:	35 c0       	rjmp	.+106    	; 0x5a22 <dir_sdi+0xea>
    59b8:	6c 01       	movw	r12, r24
    59ba:	7d 01       	movw	r14, r26
    59bc:	a2 80       	ldd	r10, Z+2	; 0x02
    59be:	80 e1       	ldi	r24, 0x10	; 16
    59c0:	a8 9e       	mul	r10, r24
    59c2:	50 01       	movw	r10, r0
    59c4:	11 24       	eor	r1, r1
    59c6:	0a 15       	cp	r16, r10
    59c8:	1b 05       	cpc	r17, r11
    59ca:	30 f1       	brcs	.+76     	; 0x5a18 <dir_sdi+0xe0>
    59cc:	b7 01       	movw	r22, r14
    59ce:	a6 01       	movw	r20, r12
    59d0:	88 81       	ld	r24, Y
    59d2:	99 81       	ldd	r25, Y+1	; 0x01
    59d4:	cb de       	rcall	.-618    	; 0x576c <get_fat>
    59d6:	6b 01       	movw	r12, r22
    59d8:	7c 01       	movw	r14, r24
    59da:	8f ef       	ldi	r24, 0xFF	; 255
    59dc:	c8 16       	cp	r12, r24
    59de:	d8 06       	cpc	r13, r24
    59e0:	e8 06       	cpc	r14, r24
    59e2:	f8 06       	cpc	r15, r24
    59e4:	09 f4       	brne	.+2      	; 0x59e8 <dir_sdi+0xb0>
    59e6:	51 c0       	rjmp	.+162    	; 0x5a8a <dir_sdi+0x152>
    59e8:	82 e0       	ldi	r24, 0x02	; 2
    59ea:	c8 16       	cp	r12, r24
    59ec:	d1 04       	cpc	r13, r1
    59ee:	e1 04       	cpc	r14, r1
    59f0:	f1 04       	cpc	r15, r1
    59f2:	08 f4       	brcc	.+2      	; 0x59f6 <dir_sdi+0xbe>
    59f4:	4c c0       	rjmp	.+152    	; 0x5a8e <dir_sdi+0x156>
    59f6:	e8 81       	ld	r30, Y
    59f8:	f9 81       	ldd	r31, Y+1	; 0x01
    59fa:	86 89       	ldd	r24, Z+22	; 0x16
    59fc:	97 89       	ldd	r25, Z+23	; 0x17
    59fe:	a0 8d       	ldd	r26, Z+24	; 0x18
    5a00:	b1 8d       	ldd	r27, Z+25	; 0x19
    5a02:	c8 16       	cp	r12, r24
    5a04:	d9 06       	cpc	r13, r25
    5a06:	ea 06       	cpc	r14, r26
    5a08:	fb 06       	cpc	r15, r27
    5a0a:	08 f0       	brcs	.+2      	; 0x5a0e <dir_sdi+0xd6>
    5a0c:	42 c0       	rjmp	.+132    	; 0x5a92 <dir_sdi+0x15a>
    5a0e:	0a 19       	sub	r16, r10
    5a10:	1b 09       	sbc	r17, r11
    5a12:	0a 15       	cp	r16, r10
    5a14:	1b 05       	cpc	r17, r11
    5a16:	d0 f6       	brcc	.-76     	; 0x59cc <dir_sdi+0x94>
    5a18:	b7 01       	movw	r22, r14
    5a1a:	a6 01       	movw	r20, r12
    5a1c:	88 81       	ld	r24, Y
    5a1e:	99 81       	ldd	r25, Y+1	; 0x01
    5a20:	77 de       	rcall	.-786    	; 0x5710 <clust2sect>
    5a22:	ca 86       	std	Y+10, r12	; 0x0a
    5a24:	db 86       	std	Y+11, r13	; 0x0b
    5a26:	ec 86       	std	Y+12, r14	; 0x0c
    5a28:	fd 86       	std	Y+13, r15	; 0x0d
    5a2a:	61 15       	cp	r22, r1
    5a2c:	71 05       	cpc	r23, r1
    5a2e:	81 05       	cpc	r24, r1
    5a30:	91 05       	cpc	r25, r1
    5a32:	89 f1       	breq	.+98     	; 0x5a96 <dir_sdi+0x15e>
    5a34:	98 01       	movw	r18, r16
    5a36:	32 95       	swap	r19
    5a38:	22 95       	swap	r18
    5a3a:	2f 70       	andi	r18, 0x0F	; 15
    5a3c:	23 27       	eor	r18, r19
    5a3e:	3f 70       	andi	r19, 0x0F	; 15
    5a40:	23 27       	eor	r18, r19
    5a42:	dc 01       	movw	r26, r24
    5a44:	cb 01       	movw	r24, r22
    5a46:	82 0f       	add	r24, r18
    5a48:	93 1f       	adc	r25, r19
    5a4a:	a1 1d       	adc	r26, r1
    5a4c:	b1 1d       	adc	r27, r1
    5a4e:	8e 87       	std	Y+14, r24	; 0x0e
    5a50:	9f 87       	std	Y+15, r25	; 0x0f
    5a52:	a8 8b       	std	Y+16, r26	; 0x10
    5a54:	b9 8b       	std	Y+17, r27	; 0x11
    5a56:	0f 70       	andi	r16, 0x0F	; 15
    5a58:	11 27       	eor	r17, r17
    5a5a:	c8 01       	movw	r24, r16
    5a5c:	88 0f       	add	r24, r24
    5a5e:	99 1f       	adc	r25, r25
    5a60:	82 95       	swap	r24
    5a62:	92 95       	swap	r25
    5a64:	90 7f       	andi	r25, 0xF0	; 240
    5a66:	98 27       	eor	r25, r24
    5a68:	80 7f       	andi	r24, 0xF0	; 240
    5a6a:	98 27       	eor	r25, r24
    5a6c:	c2 96       	adiw	r24, 0x32	; 50
    5a6e:	28 81       	ld	r18, Y
    5a70:	39 81       	ldd	r19, Y+1	; 0x01
    5a72:	82 0f       	add	r24, r18
    5a74:	93 1f       	adc	r25, r19
    5a76:	8a 8b       	std	Y+18, r24	; 0x12
    5a78:	9b 8b       	std	Y+19, r25	; 0x13
    5a7a:	80 e0       	ldi	r24, 0x00	; 0
    5a7c:	0d c0       	rjmp	.+26     	; 0x5a98 <dir_sdi+0x160>
    5a7e:	82 e0       	ldi	r24, 0x02	; 2
    5a80:	0b c0       	rjmp	.+22     	; 0x5a98 <dir_sdi+0x160>
    5a82:	82 e0       	ldi	r24, 0x02	; 2
    5a84:	09 c0       	rjmp	.+18     	; 0x5a98 <dir_sdi+0x160>
    5a86:	82 e0       	ldi	r24, 0x02	; 2
    5a88:	07 c0       	rjmp	.+14     	; 0x5a98 <dir_sdi+0x160>
    5a8a:	81 e0       	ldi	r24, 0x01	; 1
    5a8c:	05 c0       	rjmp	.+10     	; 0x5a98 <dir_sdi+0x160>
    5a8e:	82 e0       	ldi	r24, 0x02	; 2
    5a90:	03 c0       	rjmp	.+6      	; 0x5a98 <dir_sdi+0x160>
    5a92:	82 e0       	ldi	r24, 0x02	; 2
    5a94:	01 c0       	rjmp	.+2      	; 0x5a98 <dir_sdi+0x160>
    5a96:	82 e0       	ldi	r24, 0x02	; 2
    5a98:	df 91       	pop	r29
    5a9a:	cf 91       	pop	r28
    5a9c:	1f 91       	pop	r17
    5a9e:	0f 91       	pop	r16
    5aa0:	ff 90       	pop	r15
    5aa2:	ef 90       	pop	r14
    5aa4:	df 90       	pop	r13
    5aa6:	cf 90       	pop	r12
    5aa8:	bf 90       	pop	r11
    5aaa:	af 90       	pop	r10
    5aac:	08 95       	ret

00005aae <put_fat>:
    5aae:	4f 92       	push	r4
    5ab0:	5f 92       	push	r5
    5ab2:	6f 92       	push	r6
    5ab4:	7f 92       	push	r7
    5ab6:	8f 92       	push	r8
    5ab8:	9f 92       	push	r9
    5aba:	af 92       	push	r10
    5abc:	bf 92       	push	r11
    5abe:	cf 92       	push	r12
    5ac0:	df 92       	push	r13
    5ac2:	ef 92       	push	r14
    5ac4:	ff 92       	push	r15
    5ac6:	0f 93       	push	r16
    5ac8:	1f 93       	push	r17
    5aca:	cf 93       	push	r28
    5acc:	df 93       	push	r29
    5ace:	ec 01       	movw	r28, r24
    5ad0:	6a 01       	movw	r12, r20
    5ad2:	7b 01       	movw	r14, r22
    5ad4:	28 01       	movw	r4, r16
    5ad6:	39 01       	movw	r6, r18
    5ad8:	42 30       	cpi	r20, 0x02	; 2
    5ada:	51 05       	cpc	r21, r1
    5adc:	61 05       	cpc	r22, r1
    5ade:	71 05       	cpc	r23, r1
    5ae0:	08 f4       	brcc	.+2      	; 0x5ae4 <put_fat+0x36>
    5ae2:	d7 c0       	rjmp	.+430    	; 0x5c92 <put_fat+0x1e4>
    5ae4:	8e 89       	ldd	r24, Y+22	; 0x16
    5ae6:	9f 89       	ldd	r25, Y+23	; 0x17
    5ae8:	a8 8d       	ldd	r26, Y+24	; 0x18
    5aea:	b9 8d       	ldd	r27, Y+25	; 0x19
    5aec:	48 17       	cp	r20, r24
    5aee:	59 07       	cpc	r21, r25
    5af0:	6a 07       	cpc	r22, r26
    5af2:	7b 07       	cpc	r23, r27
    5af4:	08 f0       	brcs	.+2      	; 0x5af8 <put_fat+0x4a>
    5af6:	cf c0       	rjmp	.+414    	; 0x5c96 <put_fat+0x1e8>
    5af8:	88 81       	ld	r24, Y
    5afa:	82 30       	cpi	r24, 0x02	; 2
    5afc:	09 f4       	brne	.+2      	; 0x5b00 <put_fat+0x52>
    5afe:	69 c0       	rjmp	.+210    	; 0x5bd2 <put_fat+0x124>
    5b00:	83 30       	cpi	r24, 0x03	; 3
    5b02:	09 f4       	brne	.+2      	; 0x5b06 <put_fat+0x58>
    5b04:	8b c0       	rjmp	.+278    	; 0x5c1c <put_fat+0x16e>
    5b06:	81 30       	cpi	r24, 0x01	; 1
    5b08:	09 f0       	breq	.+2      	; 0x5b0c <put_fat+0x5e>
    5b0a:	c7 c0       	rjmp	.+398    	; 0x5c9a <put_fat+0x1ec>
    5b0c:	5a 01       	movw	r10, r20
    5b0e:	b6 94       	lsr	r11
    5b10:	a7 94       	ror	r10
    5b12:	a4 0e       	add	r10, r20
    5b14:	b5 1e       	adc	r11, r21
    5b16:	c5 01       	movw	r24, r10
    5b18:	89 2f       	mov	r24, r25
    5b1a:	99 27       	eor	r25, r25
    5b1c:	86 95       	lsr	r24
    5b1e:	4a a1       	ldd	r20, Y+34	; 0x22
    5b20:	5b a1       	ldd	r21, Y+35	; 0x23
    5b22:	6c a1       	ldd	r22, Y+36	; 0x24
    5b24:	7d a1       	ldd	r23, Y+37	; 0x25
    5b26:	48 0f       	add	r20, r24
    5b28:	59 1f       	adc	r21, r25
    5b2a:	61 1d       	adc	r22, r1
    5b2c:	71 1d       	adc	r23, r1
    5b2e:	ce 01       	movw	r24, r28
    5b30:	2e da       	rcall	.-2980   	; 0x4f8e <move_window>
    5b32:	81 11       	cpse	r24, r1
    5b34:	b3 c0       	rjmp	.+358    	; 0x5c9c <put_fat+0x1ee>
    5b36:	85 01       	movw	r16, r10
    5b38:	0f 5f       	subi	r16, 0xFF	; 255
    5b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    5b3c:	c5 01       	movw	r24, r10
    5b3e:	91 70       	andi	r25, 0x01	; 1
    5b40:	46 01       	movw	r8, r12
    5b42:	57 01       	movw	r10, r14
    5b44:	51 e0       	ldi	r21, 0x01	; 1
    5b46:	85 22       	and	r8, r21
    5b48:	99 24       	eor	r9, r9
    5b4a:	aa 24       	eor	r10, r10
    5b4c:	bb 24       	eor	r11, r11
    5b4e:	c0 fe       	sbrs	r12, 0
    5b50:	0b c0       	rjmp	.+22     	; 0x5b68 <put_fat+0xba>
    5b52:	fe 01       	movw	r30, r28
    5b54:	e8 0f       	add	r30, r24
    5b56:	f9 1f       	adc	r31, r25
    5b58:	42 a9       	ldd	r20, Z+50	; 0x32
    5b5a:	4f 70       	andi	r20, 0x0F	; 15
    5b5c:	50 e1       	ldi	r21, 0x10	; 16
    5b5e:	45 9e       	mul	r4, r21
    5b60:	90 01       	movw	r18, r0
    5b62:	11 24       	eor	r1, r1
    5b64:	24 2b       	or	r18, r20
    5b66:	01 c0       	rjmp	.+2      	; 0x5b6a <put_fat+0xbc>
    5b68:	24 2d       	mov	r18, r4
    5b6a:	fe 01       	movw	r30, r28
    5b6c:	e8 0f       	add	r30, r24
    5b6e:	f9 1f       	adc	r31, r25
    5b70:	22 ab       	std	Z+50, r18	; 0x32
    5b72:	81 e0       	ldi	r24, 0x01	; 1
    5b74:	8c 83       	std	Y+4, r24	; 0x04
    5b76:	4a a1       	ldd	r20, Y+34	; 0x22
    5b78:	5b a1       	ldd	r21, Y+35	; 0x23
    5b7a:	6c a1       	ldd	r22, Y+36	; 0x24
    5b7c:	7d a1       	ldd	r23, Y+37	; 0x25
    5b7e:	c8 01       	movw	r24, r16
    5b80:	89 2f       	mov	r24, r25
    5b82:	99 27       	eor	r25, r25
    5b84:	86 95       	lsr	r24
    5b86:	48 0f       	add	r20, r24
    5b88:	59 1f       	adc	r21, r25
    5b8a:	61 1d       	adc	r22, r1
    5b8c:	71 1d       	adc	r23, r1
    5b8e:	ce 01       	movw	r24, r28
    5b90:	fe d9       	rcall	.-3076   	; 0x4f8e <move_window>
    5b92:	81 11       	cpse	r24, r1
    5b94:	83 c0       	rjmp	.+262    	; 0x5c9c <put_fat+0x1ee>
    5b96:	11 70       	andi	r17, 0x01	; 1
    5b98:	89 28       	or	r8, r9
    5b9a:	8a 28       	or	r8, r10
    5b9c:	8b 28       	or	r8, r11
    5b9e:	49 f0       	breq	.+18     	; 0x5bb2 <put_fat+0x104>
    5ba0:	68 94       	set
    5ba2:	13 f8       	bld	r1, 3
    5ba4:	76 94       	lsr	r7
    5ba6:	67 94       	ror	r6
    5ba8:	57 94       	ror	r5
    5baa:	47 94       	ror	r4
    5bac:	16 94       	lsr	r1
    5bae:	d1 f7       	brne	.-12     	; 0x5ba4 <put_fat+0xf6>
    5bb0:	09 c0       	rjmp	.+18     	; 0x5bc4 <put_fat+0x116>
    5bb2:	fe 01       	movw	r30, r28
    5bb4:	e0 0f       	add	r30, r16
    5bb6:	f1 1f       	adc	r31, r17
    5bb8:	22 a9       	ldd	r18, Z+50	; 0x32
    5bba:	20 7f       	andi	r18, 0xF0	; 240
    5bbc:	95 2d       	mov	r25, r5
    5bbe:	9f 70       	andi	r25, 0x0F	; 15
    5bc0:	42 2e       	mov	r4, r18
    5bc2:	49 2a       	or	r4, r25
    5bc4:	fe 01       	movw	r30, r28
    5bc6:	e0 0f       	add	r30, r16
    5bc8:	f1 1f       	adc	r31, r17
    5bca:	42 aa       	std	Z+50, r4	; 0x32
    5bcc:	91 e0       	ldi	r25, 0x01	; 1
    5bce:	9c 83       	std	Y+4, r25	; 0x04
    5bd0:	65 c0       	rjmp	.+202    	; 0x5c9c <put_fat+0x1ee>
    5bd2:	45 2f       	mov	r20, r21
    5bd4:	56 2f       	mov	r21, r22
    5bd6:	67 2f       	mov	r22, r23
    5bd8:	77 27       	eor	r23, r23
    5bda:	8a a1       	ldd	r24, Y+34	; 0x22
    5bdc:	9b a1       	ldd	r25, Y+35	; 0x23
    5bde:	ac a1       	ldd	r26, Y+36	; 0x24
    5be0:	bd a1       	ldd	r27, Y+37	; 0x25
    5be2:	48 0f       	add	r20, r24
    5be4:	59 1f       	adc	r21, r25
    5be6:	6a 1f       	adc	r22, r26
    5be8:	7b 1f       	adc	r23, r27
    5bea:	ce 01       	movw	r24, r28
    5bec:	d0 d9       	rcall	.-3168   	; 0x4f8e <move_window>
    5bee:	81 11       	cpse	r24, r1
    5bf0:	55 c0       	rjmp	.+170    	; 0x5c9c <put_fat+0x1ee>
    5bf2:	cc 0c       	add	r12, r12
    5bf4:	dd 1c       	adc	r13, r13
    5bf6:	ee 1c       	adc	r14, r14
    5bf8:	ff 1c       	adc	r15, r15
    5bfa:	e8 94       	clt
    5bfc:	c0 f8       	bld	r12, 0
    5bfe:	91 e0       	ldi	r25, 0x01	; 1
    5c00:	d9 22       	and	r13, r25
    5c02:	ee 24       	eor	r14, r14
    5c04:	ff 24       	eor	r15, r15
    5c06:	22 e3       	ldi	r18, 0x32	; 50
    5c08:	c2 0e       	add	r12, r18
    5c0a:	d1 1c       	adc	r13, r1
    5c0c:	fe 01       	movw	r30, r28
    5c0e:	ec 0d       	add	r30, r12
    5c10:	fd 1d       	adc	r31, r13
    5c12:	40 82       	st	Z, r4
    5c14:	51 82       	std	Z+1, r5	; 0x01
    5c16:	91 e0       	ldi	r25, 0x01	; 1
    5c18:	9c 83       	std	Y+4, r25	; 0x04
    5c1a:	40 c0       	rjmp	.+128    	; 0x5c9c <put_fat+0x1ee>
    5c1c:	8a a1       	ldd	r24, Y+34	; 0x22
    5c1e:	9b a1       	ldd	r25, Y+35	; 0x23
    5c20:	ac a1       	ldd	r26, Y+36	; 0x24
    5c22:	bd a1       	ldd	r27, Y+37	; 0x25
    5c24:	68 94       	set
    5c26:	16 f8       	bld	r1, 6
    5c28:	76 95       	lsr	r23
    5c2a:	67 95       	ror	r22
    5c2c:	57 95       	ror	r21
    5c2e:	47 95       	ror	r20
    5c30:	16 94       	lsr	r1
    5c32:	d1 f7       	brne	.-12     	; 0x5c28 <put_fat+0x17a>
    5c34:	48 0f       	add	r20, r24
    5c36:	59 1f       	adc	r21, r25
    5c38:	6a 1f       	adc	r22, r26
    5c3a:	7b 1f       	adc	r23, r27
    5c3c:	ce 01       	movw	r24, r28
    5c3e:	a7 d9       	rcall	.-3250   	; 0x4f8e <move_window>
    5c40:	81 11       	cpse	r24, r1
    5c42:	2c c0       	rjmp	.+88     	; 0x5c9c <put_fat+0x1ee>
    5c44:	cc 0c       	add	r12, r12
    5c46:	dd 1c       	adc	r13, r13
    5c48:	ee 1c       	adc	r14, r14
    5c4a:	ff 1c       	adc	r15, r15
    5c4c:	cc 0c       	add	r12, r12
    5c4e:	dd 1c       	adc	r13, r13
    5c50:	ee 1c       	adc	r14, r14
    5c52:	ff 1c       	adc	r15, r15
    5c54:	5c ef       	ldi	r21, 0xFC	; 252
    5c56:	c5 22       	and	r12, r21
    5c58:	51 e0       	ldi	r21, 0x01	; 1
    5c5a:	d5 22       	and	r13, r21
    5c5c:	ee 24       	eor	r14, r14
    5c5e:	ff 24       	eor	r15, r15
    5c60:	92 e3       	ldi	r25, 0x32	; 50
    5c62:	c9 0e       	add	r12, r25
    5c64:	d1 1c       	adc	r13, r1
    5c66:	fe 01       	movw	r30, r28
    5c68:	ec 0d       	add	r30, r12
    5c6a:	fd 1d       	adc	r31, r13
    5c6c:	40 81       	ld	r20, Z
    5c6e:	51 81       	ldd	r21, Z+1	; 0x01
    5c70:	62 81       	ldd	r22, Z+2	; 0x02
    5c72:	73 81       	ldd	r23, Z+3	; 0x03
    5c74:	44 27       	eor	r20, r20
    5c76:	55 27       	eor	r21, r21
    5c78:	66 27       	eor	r22, r22
    5c7a:	70 7f       	andi	r23, 0xF0	; 240
    5c7c:	44 2a       	or	r4, r20
    5c7e:	55 2a       	or	r5, r21
    5c80:	66 2a       	or	r6, r22
    5c82:	77 2a       	or	r7, r23
    5c84:	40 82       	st	Z, r4
    5c86:	51 82       	std	Z+1, r5	; 0x01
    5c88:	62 82       	std	Z+2, r6	; 0x02
    5c8a:	73 82       	std	Z+3, r7	; 0x03
    5c8c:	91 e0       	ldi	r25, 0x01	; 1
    5c8e:	9c 83       	std	Y+4, r25	; 0x04
    5c90:	05 c0       	rjmp	.+10     	; 0x5c9c <put_fat+0x1ee>
    5c92:	82 e0       	ldi	r24, 0x02	; 2
    5c94:	03 c0       	rjmp	.+6      	; 0x5c9c <put_fat+0x1ee>
    5c96:	82 e0       	ldi	r24, 0x02	; 2
    5c98:	01 c0       	rjmp	.+2      	; 0x5c9c <put_fat+0x1ee>
    5c9a:	82 e0       	ldi	r24, 0x02	; 2
    5c9c:	df 91       	pop	r29
    5c9e:	cf 91       	pop	r28
    5ca0:	1f 91       	pop	r17
    5ca2:	0f 91       	pop	r16
    5ca4:	ff 90       	pop	r15
    5ca6:	ef 90       	pop	r14
    5ca8:	df 90       	pop	r13
    5caa:	cf 90       	pop	r12
    5cac:	bf 90       	pop	r11
    5cae:	af 90       	pop	r10
    5cb0:	9f 90       	pop	r9
    5cb2:	8f 90       	pop	r8
    5cb4:	7f 90       	pop	r7
    5cb6:	6f 90       	pop	r6
    5cb8:	5f 90       	pop	r5
    5cba:	4f 90       	pop	r4
    5cbc:	08 95       	ret

00005cbe <create_chain>:
    5cbe:	4f 92       	push	r4
    5cc0:	5f 92       	push	r5
    5cc2:	6f 92       	push	r6
    5cc4:	7f 92       	push	r7
    5cc6:	8f 92       	push	r8
    5cc8:	9f 92       	push	r9
    5cca:	af 92       	push	r10
    5ccc:	bf 92       	push	r11
    5cce:	cf 92       	push	r12
    5cd0:	df 92       	push	r13
    5cd2:	ef 92       	push	r14
    5cd4:	ff 92       	push	r15
    5cd6:	0f 93       	push	r16
    5cd8:	1f 93       	push	r17
    5cda:	cf 93       	push	r28
    5cdc:	df 93       	push	r29
    5cde:	ec 01       	movw	r28, r24
    5ce0:	2a 01       	movw	r4, r20
    5ce2:	3b 01       	movw	r6, r22
    5ce4:	41 15       	cp	r20, r1
    5ce6:	51 05       	cpc	r21, r1
    5ce8:	61 05       	cpc	r22, r1
    5cea:	71 05       	cpc	r23, r1
    5cec:	99 f4       	brne	.+38     	; 0x5d14 <create_chain+0x56>
    5cee:	8a 84       	ldd	r8, Y+10	; 0x0a
    5cf0:	9b 84       	ldd	r9, Y+11	; 0x0b
    5cf2:	ac 84       	ldd	r10, Y+12	; 0x0c
    5cf4:	bd 84       	ldd	r11, Y+13	; 0x0d
    5cf6:	81 14       	cp	r8, r1
    5cf8:	91 04       	cpc	r9, r1
    5cfa:	a1 04       	cpc	r10, r1
    5cfc:	b1 04       	cpc	r11, r1
    5cfe:	29 f1       	breq	.+74     	; 0x5d4a <create_chain+0x8c>
    5d00:	8e 89       	ldd	r24, Y+22	; 0x16
    5d02:	9f 89       	ldd	r25, Y+23	; 0x17
    5d04:	a8 8d       	ldd	r26, Y+24	; 0x18
    5d06:	b9 8d       	ldd	r27, Y+25	; 0x19
    5d08:	88 16       	cp	r8, r24
    5d0a:	99 06       	cpc	r9, r25
    5d0c:	aa 06       	cpc	r10, r26
    5d0e:	bb 06       	cpc	r11, r27
    5d10:	08 f5       	brcc	.+66     	; 0x5d54 <create_chain+0x96>
    5d12:	24 c0       	rjmp	.+72     	; 0x5d5c <create_chain+0x9e>
    5d14:	2b dd       	rcall	.-1450   	; 0x576c <get_fat>
    5d16:	62 30       	cpi	r22, 0x02	; 2
    5d18:	71 05       	cpc	r23, r1
    5d1a:	81 05       	cpc	r24, r1
    5d1c:	91 05       	cpc	r25, r1
    5d1e:	08 f4       	brcc	.+2      	; 0x5d22 <create_chain+0x64>
    5d20:	96 c0       	rjmp	.+300    	; 0x5e4e <create_chain+0x190>
    5d22:	6f 3f       	cpi	r22, 0xFF	; 255
    5d24:	2f ef       	ldi	r18, 0xFF	; 255
    5d26:	72 07       	cpc	r23, r18
    5d28:	82 07       	cpc	r24, r18
    5d2a:	92 07       	cpc	r25, r18
    5d2c:	09 f4       	brne	.+2      	; 0x5d30 <create_chain+0x72>
    5d2e:	94 c0       	rjmp	.+296    	; 0x5e58 <create_chain+0x19a>
    5d30:	ce 88       	ldd	r12, Y+22	; 0x16
    5d32:	df 88       	ldd	r13, Y+23	; 0x17
    5d34:	e8 8c       	ldd	r14, Y+24	; 0x18
    5d36:	f9 8c       	ldd	r15, Y+25	; 0x19
    5d38:	6c 15       	cp	r22, r12
    5d3a:	7d 05       	cpc	r23, r13
    5d3c:	8e 05       	cpc	r24, r14
    5d3e:	9f 05       	cpc	r25, r15
    5d40:	08 f4       	brcc	.+2      	; 0x5d44 <create_chain+0x86>
    5d42:	8e c0       	rjmp	.+284    	; 0x5e60 <create_chain+0x1a2>
    5d44:	53 01       	movw	r10, r6
    5d46:	42 01       	movw	r8, r4
    5d48:	09 c0       	rjmp	.+18     	; 0x5d5c <create_chain+0x9e>
    5d4a:	81 2c       	mov	r8, r1
    5d4c:	91 2c       	mov	r9, r1
    5d4e:	54 01       	movw	r10, r8
    5d50:	83 94       	inc	r8
    5d52:	04 c0       	rjmp	.+8      	; 0x5d5c <create_chain+0x9e>
    5d54:	81 2c       	mov	r8, r1
    5d56:	91 2c       	mov	r9, r1
    5d58:	54 01       	movw	r10, r8
    5d5a:	83 94       	inc	r8
    5d5c:	75 01       	movw	r14, r10
    5d5e:	64 01       	movw	r12, r8
    5d60:	8f ef       	ldi	r24, 0xFF	; 255
    5d62:	c8 1a       	sub	r12, r24
    5d64:	d8 0a       	sbc	r13, r24
    5d66:	e8 0a       	sbc	r14, r24
    5d68:	f8 0a       	sbc	r15, r24
    5d6a:	8e 89       	ldd	r24, Y+22	; 0x16
    5d6c:	9f 89       	ldd	r25, Y+23	; 0x17
    5d6e:	a8 8d       	ldd	r26, Y+24	; 0x18
    5d70:	b9 8d       	ldd	r27, Y+25	; 0x19
    5d72:	c8 16       	cp	r12, r24
    5d74:	d9 06       	cpc	r13, r25
    5d76:	ea 06       	cpc	r14, r26
    5d78:	fb 06       	cpc	r15, r27
    5d7a:	60 f0       	brcs	.+24     	; 0x5d94 <create_chain+0xd6>
    5d7c:	22 e0       	ldi	r18, 0x02	; 2
    5d7e:	82 16       	cp	r8, r18
    5d80:	91 04       	cpc	r9, r1
    5d82:	a1 04       	cpc	r10, r1
    5d84:	b1 04       	cpc	r11, r1
    5d86:	08 f4       	brcc	.+2      	; 0x5d8a <create_chain+0xcc>
    5d88:	6f c0       	rjmp	.+222    	; 0x5e68 <create_chain+0x1aa>
    5d8a:	c1 2c       	mov	r12, r1
    5d8c:	d1 2c       	mov	r13, r1
    5d8e:	76 01       	movw	r14, r12
    5d90:	68 94       	set
    5d92:	c1 f8       	bld	r12, 1
    5d94:	b7 01       	movw	r22, r14
    5d96:	a6 01       	movw	r20, r12
    5d98:	ce 01       	movw	r24, r28
    5d9a:	e8 dc       	rcall	.-1584   	; 0x576c <get_fat>
    5d9c:	61 15       	cp	r22, r1
    5d9e:	71 05       	cpc	r23, r1
    5da0:	81 05       	cpc	r24, r1
    5da2:	91 05       	cpc	r25, r1
    5da4:	99 f0       	breq	.+38     	; 0x5dcc <create_chain+0x10e>
    5da6:	6f 3f       	cpi	r22, 0xFF	; 255
    5da8:	2f ef       	ldi	r18, 0xFF	; 255
    5daa:	72 07       	cpc	r23, r18
    5dac:	82 07       	cpc	r24, r18
    5dae:	92 07       	cpc	r25, r18
    5db0:	09 f4       	brne	.+2      	; 0x5db4 <create_chain+0xf6>
    5db2:	5f c0       	rjmp	.+190    	; 0x5e72 <create_chain+0x1b4>
    5db4:	61 30       	cpi	r22, 0x01	; 1
    5db6:	71 05       	cpc	r23, r1
    5db8:	81 05       	cpc	r24, r1
    5dba:	91 05       	cpc	r25, r1
    5dbc:	09 f4       	brne	.+2      	; 0x5dc0 <create_chain+0x102>
    5dbe:	5d c0       	rjmp	.+186    	; 0x5e7a <create_chain+0x1bc>
    5dc0:	c8 14       	cp	r12, r8
    5dc2:	d9 04       	cpc	r13, r9
    5dc4:	ea 04       	cpc	r14, r10
    5dc6:	fb 04       	cpc	r15, r11
    5dc8:	59 f6       	brne	.-106    	; 0x5d60 <create_chain+0xa2>
    5dca:	5b c0       	rjmp	.+182    	; 0x5e82 <create_chain+0x1c4>
    5dcc:	8c 2c       	mov	r8, r12
    5dce:	9d 2c       	mov	r9, r13
    5dd0:	ae 2c       	mov	r10, r14
    5dd2:	bf 2c       	mov	r11, r15
    5dd4:	0f ef       	ldi	r16, 0xFF	; 255
    5dd6:	1f ef       	ldi	r17, 0xFF	; 255
    5dd8:	2f ef       	ldi	r18, 0xFF	; 255
    5dda:	3f e0       	ldi	r19, 0x0F	; 15
    5ddc:	b7 01       	movw	r22, r14
    5dde:	a6 01       	movw	r20, r12
    5de0:	ce 01       	movw	r24, r28
    5de2:	65 de       	rcall	.-822    	; 0x5aae <put_fat>
    5de4:	81 11       	cpse	r24, r1
    5de6:	2c c0       	rjmp	.+88     	; 0x5e40 <create_chain+0x182>
    5de8:	41 14       	cp	r4, r1
    5dea:	51 04       	cpc	r5, r1
    5dec:	61 04       	cpc	r6, r1
    5dee:	71 04       	cpc	r7, r1
    5df0:	51 f0       	breq	.+20     	; 0x5e06 <create_chain+0x148>
    5df2:	0c 2d       	mov	r16, r12
    5df4:	1d 2d       	mov	r17, r13
    5df6:	2e 2d       	mov	r18, r14
    5df8:	3f 2d       	mov	r19, r15
    5dfa:	b3 01       	movw	r22, r6
    5dfc:	a2 01       	movw	r20, r4
    5dfe:	ce 01       	movw	r24, r28
    5e00:	56 de       	rcall	.-852    	; 0x5aae <put_fat>
    5e02:	81 11       	cpse	r24, r1
    5e04:	1d c0       	rjmp	.+58     	; 0x5e40 <create_chain+0x182>
    5e06:	8a 86       	std	Y+10, r8	; 0x0a
    5e08:	9b 86       	std	Y+11, r9	; 0x0b
    5e0a:	ac 86       	std	Y+12, r10	; 0x0c
    5e0c:	bd 86       	std	Y+13, r11	; 0x0d
    5e0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    5e10:	9f 85       	ldd	r25, Y+15	; 0x0f
    5e12:	a8 89       	ldd	r26, Y+16	; 0x10
    5e14:	b9 89       	ldd	r27, Y+17	; 0x11
    5e16:	8f 3f       	cpi	r24, 0xFF	; 255
    5e18:	2f ef       	ldi	r18, 0xFF	; 255
    5e1a:	92 07       	cpc	r25, r18
    5e1c:	a2 07       	cpc	r26, r18
    5e1e:	b2 07       	cpc	r27, r18
    5e20:	a9 f1       	breq	.+106    	; 0x5e8c <create_chain+0x1ce>
    5e22:	01 97       	sbiw	r24, 0x01	; 1
    5e24:	a1 09       	sbc	r26, r1
    5e26:	b1 09       	sbc	r27, r1
    5e28:	8e 87       	std	Y+14, r24	; 0x0e
    5e2a:	9f 87       	std	Y+15, r25	; 0x0f
    5e2c:	a8 8b       	std	Y+16, r26	; 0x10
    5e2e:	b9 8b       	std	Y+17, r27	; 0x11
    5e30:	8d 81       	ldd	r24, Y+5	; 0x05
    5e32:	81 60       	ori	r24, 0x01	; 1
    5e34:	8d 83       	std	Y+5, r24	; 0x05
    5e36:	4c 2d       	mov	r20, r12
    5e38:	3d 2d       	mov	r19, r13
    5e3a:	2e 2d       	mov	r18, r14
    5e3c:	9f 2d       	mov	r25, r15
    5e3e:	2f c0       	rjmp	.+94     	; 0x5e9e <create_chain+0x1e0>
    5e40:	81 30       	cpi	r24, 0x01	; 1
    5e42:	49 f5       	brne	.+82     	; 0x5e96 <create_chain+0x1d8>
    5e44:	4f ef       	ldi	r20, 0xFF	; 255
    5e46:	3f ef       	ldi	r19, 0xFF	; 255
    5e48:	2f ef       	ldi	r18, 0xFF	; 255
    5e4a:	9f ef       	ldi	r25, 0xFF	; 255
    5e4c:	28 c0       	rjmp	.+80     	; 0x5e9e <create_chain+0x1e0>
    5e4e:	41 e0       	ldi	r20, 0x01	; 1
    5e50:	30 e0       	ldi	r19, 0x00	; 0
    5e52:	20 e0       	ldi	r18, 0x00	; 0
    5e54:	90 e0       	ldi	r25, 0x00	; 0
    5e56:	23 c0       	rjmp	.+70     	; 0x5e9e <create_chain+0x1e0>
    5e58:	46 2f       	mov	r20, r22
    5e5a:	37 2f       	mov	r19, r23
    5e5c:	28 2f       	mov	r18, r24
    5e5e:	1f c0       	rjmp	.+62     	; 0x5e9e <create_chain+0x1e0>
    5e60:	46 2f       	mov	r20, r22
    5e62:	37 2f       	mov	r19, r23
    5e64:	28 2f       	mov	r18, r24
    5e66:	1b c0       	rjmp	.+54     	; 0x5e9e <create_chain+0x1e0>
    5e68:	40 e0       	ldi	r20, 0x00	; 0
    5e6a:	30 e0       	ldi	r19, 0x00	; 0
    5e6c:	20 e0       	ldi	r18, 0x00	; 0
    5e6e:	90 e0       	ldi	r25, 0x00	; 0
    5e70:	16 c0       	rjmp	.+44     	; 0x5e9e <create_chain+0x1e0>
    5e72:	46 2f       	mov	r20, r22
    5e74:	37 2f       	mov	r19, r23
    5e76:	28 2f       	mov	r18, r24
    5e78:	12 c0       	rjmp	.+36     	; 0x5e9e <create_chain+0x1e0>
    5e7a:	46 2f       	mov	r20, r22
    5e7c:	37 2f       	mov	r19, r23
    5e7e:	28 2f       	mov	r18, r24
    5e80:	0e c0       	rjmp	.+28     	; 0x5e9e <create_chain+0x1e0>
    5e82:	40 e0       	ldi	r20, 0x00	; 0
    5e84:	30 e0       	ldi	r19, 0x00	; 0
    5e86:	20 e0       	ldi	r18, 0x00	; 0
    5e88:	90 e0       	ldi	r25, 0x00	; 0
    5e8a:	09 c0       	rjmp	.+18     	; 0x5e9e <create_chain+0x1e0>
    5e8c:	4c 2d       	mov	r20, r12
    5e8e:	3d 2d       	mov	r19, r13
    5e90:	2e 2d       	mov	r18, r14
    5e92:	9f 2d       	mov	r25, r15
    5e94:	04 c0       	rjmp	.+8      	; 0x5e9e <create_chain+0x1e0>
    5e96:	41 e0       	ldi	r20, 0x01	; 1
    5e98:	30 e0       	ldi	r19, 0x00	; 0
    5e9a:	20 e0       	ldi	r18, 0x00	; 0
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    5e9e:	64 2f       	mov	r22, r20
    5ea0:	73 2f       	mov	r23, r19
    5ea2:	82 2f       	mov	r24, r18
    5ea4:	df 91       	pop	r29
    5ea6:	cf 91       	pop	r28
    5ea8:	1f 91       	pop	r17
    5eaa:	0f 91       	pop	r16
    5eac:	ff 90       	pop	r15
    5eae:	ef 90       	pop	r14
    5eb0:	df 90       	pop	r13
    5eb2:	cf 90       	pop	r12
    5eb4:	bf 90       	pop	r11
    5eb6:	af 90       	pop	r10
    5eb8:	9f 90       	pop	r9
    5eba:	8f 90       	pop	r8
    5ebc:	7f 90       	pop	r7
    5ebe:	6f 90       	pop	r6
    5ec0:	5f 90       	pop	r5
    5ec2:	4f 90       	pop	r4
    5ec4:	08 95       	ret

00005ec6 <dir_next>:
    5ec6:	7f 92       	push	r7
    5ec8:	8f 92       	push	r8
    5eca:	9f 92       	push	r9
    5ecc:	af 92       	push	r10
    5ece:	bf 92       	push	r11
    5ed0:	cf 92       	push	r12
    5ed2:	df 92       	push	r13
    5ed4:	ef 92       	push	r14
    5ed6:	ff 92       	push	r15
    5ed8:	0f 93       	push	r16
    5eda:	1f 93       	push	r17
    5edc:	cf 93       	push	r28
    5ede:	df 93       	push	r29
    5ee0:	ec 01       	movw	r28, r24
    5ee2:	7b 01       	movw	r14, r22
    5ee4:	0c 81       	ldd	r16, Y+4	; 0x04
    5ee6:	1d 81       	ldd	r17, Y+5	; 0x05
    5ee8:	0f 5f       	subi	r16, 0xFF	; 255
    5eea:	1f 4f       	sbci	r17, 0xFF	; 255
    5eec:	01 15       	cp	r16, r1
    5eee:	11 05       	cpc	r17, r1
    5ef0:	09 f4       	brne	.+2      	; 0x5ef4 <dir_next+0x2e>
    5ef2:	e4 c0       	rjmp	.+456    	; 0x60bc <dir_next+0x1f6>
    5ef4:	8e 85       	ldd	r24, Y+14	; 0x0e
    5ef6:	9f 85       	ldd	r25, Y+15	; 0x0f
    5ef8:	a8 89       	ldd	r26, Y+16	; 0x10
    5efa:	b9 89       	ldd	r27, Y+17	; 0x11
    5efc:	00 97       	sbiw	r24, 0x00	; 0
    5efe:	a1 05       	cpc	r26, r1
    5f00:	b1 05       	cpc	r27, r1
    5f02:	09 f4       	brne	.+2      	; 0x5f06 <dir_next+0x40>
    5f04:	dd c0       	rjmp	.+442    	; 0x60c0 <dir_next+0x1fa>
    5f06:	68 01       	movw	r12, r16
    5f08:	2f e0       	ldi	r18, 0x0F	; 15
    5f0a:	c2 22       	and	r12, r18
    5f0c:	dd 24       	eor	r13, r13
    5f0e:	c1 14       	cp	r12, r1
    5f10:	d1 04       	cpc	r13, r1
    5f12:	09 f0       	breq	.+2      	; 0x5f16 <dir_next+0x50>
    5f14:	bc c0       	rjmp	.+376    	; 0x608e <dir_next+0x1c8>
    5f16:	01 96       	adiw	r24, 0x01	; 1
    5f18:	a1 1d       	adc	r26, r1
    5f1a:	b1 1d       	adc	r27, r1
    5f1c:	8e 87       	std	Y+14, r24	; 0x0e
    5f1e:	9f 87       	std	Y+15, r25	; 0x0f
    5f20:	a8 8b       	std	Y+16, r26	; 0x10
    5f22:	b9 8b       	std	Y+17, r27	; 0x11
    5f24:	4a 85       	ldd	r20, Y+10	; 0x0a
    5f26:	5b 85       	ldd	r21, Y+11	; 0x0b
    5f28:	6c 85       	ldd	r22, Y+12	; 0x0c
    5f2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    5f2c:	41 15       	cp	r20, r1
    5f2e:	51 05       	cpc	r21, r1
    5f30:	61 05       	cpc	r22, r1
    5f32:	71 05       	cpc	r23, r1
    5f34:	49 f4       	brne	.+18     	; 0x5f48 <dir_next+0x82>
    5f36:	e8 81       	ld	r30, Y
    5f38:	f9 81       	ldd	r31, Y+1	; 0x01
    5f3a:	80 85       	ldd	r24, Z+8	; 0x08
    5f3c:	91 85       	ldd	r25, Z+9	; 0x09
    5f3e:	08 17       	cp	r16, r24
    5f40:	19 07       	cpc	r17, r25
    5f42:	08 f0       	brcs	.+2      	; 0x5f46 <dir_next+0x80>
    5f44:	bf c0       	rjmp	.+382    	; 0x60c4 <dir_next+0x1fe>
    5f46:	a3 c0       	rjmp	.+326    	; 0x608e <dir_next+0x1c8>
    5f48:	e8 81       	ld	r30, Y
    5f4a:	f9 81       	ldd	r31, Y+1	; 0x01
    5f4c:	82 81       	ldd	r24, Z+2	; 0x02
    5f4e:	90 e0       	ldi	r25, 0x00	; 0
    5f50:	01 97       	sbiw	r24, 0x01	; 1
    5f52:	98 01       	movw	r18, r16
    5f54:	32 95       	swap	r19
    5f56:	22 95       	swap	r18
    5f58:	2f 70       	andi	r18, 0x0F	; 15
    5f5a:	23 27       	eor	r18, r19
    5f5c:	3f 70       	andi	r19, 0x0F	; 15
    5f5e:	23 27       	eor	r18, r19
    5f60:	82 23       	and	r24, r18
    5f62:	93 23       	and	r25, r19
    5f64:	89 2b       	or	r24, r25
    5f66:	09 f0       	breq	.+2      	; 0x5f6a <dir_next+0xa4>
    5f68:	92 c0       	rjmp	.+292    	; 0x608e <dir_next+0x1c8>
    5f6a:	cf 01       	movw	r24, r30
    5f6c:	ff db       	rcall	.-2050   	; 0x576c <get_fat>
    5f6e:	4b 01       	movw	r8, r22
    5f70:	5c 01       	movw	r10, r24
    5f72:	82 e0       	ldi	r24, 0x02	; 2
    5f74:	88 16       	cp	r8, r24
    5f76:	91 04       	cpc	r9, r1
    5f78:	a1 04       	cpc	r10, r1
    5f7a:	b1 04       	cpc	r11, r1
    5f7c:	08 f4       	brcc	.+2      	; 0x5f80 <dir_next+0xba>
    5f7e:	a4 c0       	rjmp	.+328    	; 0x60c8 <dir_next+0x202>
    5f80:	ef ef       	ldi	r30, 0xFF	; 255
    5f82:	8e 16       	cp	r8, r30
    5f84:	9e 06       	cpc	r9, r30
    5f86:	ae 06       	cpc	r10, r30
    5f88:	be 06       	cpc	r11, r30
    5f8a:	09 f4       	brne	.+2      	; 0x5f8e <dir_next+0xc8>
    5f8c:	9f c0       	rjmp	.+318    	; 0x60cc <dir_next+0x206>
    5f8e:	e8 81       	ld	r30, Y
    5f90:	f9 81       	ldd	r31, Y+1	; 0x01
    5f92:	86 89       	ldd	r24, Z+22	; 0x16
    5f94:	97 89       	ldd	r25, Z+23	; 0x17
    5f96:	a0 8d       	ldd	r26, Z+24	; 0x18
    5f98:	b1 8d       	ldd	r27, Z+25	; 0x19
    5f9a:	88 16       	cp	r8, r24
    5f9c:	99 06       	cpc	r9, r25
    5f9e:	aa 06       	cpc	r10, r26
    5fa0:	bb 06       	cpc	r11, r27
    5fa2:	08 f4       	brcc	.+2      	; 0x5fa6 <dir_next+0xe0>
    5fa4:	67 c0       	rjmp	.+206    	; 0x6074 <dir_next+0x1ae>
    5fa6:	ef 28       	or	r14, r15
    5fa8:	09 f4       	brne	.+2      	; 0x5fac <dir_next+0xe6>
    5faa:	92 c0       	rjmp	.+292    	; 0x60d0 <dir_next+0x20a>
    5fac:	4a 85       	ldd	r20, Y+10	; 0x0a
    5fae:	5b 85       	ldd	r21, Y+11	; 0x0b
    5fb0:	6c 85       	ldd	r22, Y+12	; 0x0c
    5fb2:	7d 85       	ldd	r23, Y+13	; 0x0d
    5fb4:	cf 01       	movw	r24, r30
    5fb6:	83 de       	rcall	.-762    	; 0x5cbe <create_chain>
    5fb8:	4b 01       	movw	r8, r22
    5fba:	5c 01       	movw	r10, r24
    5fbc:	61 15       	cp	r22, r1
    5fbe:	71 05       	cpc	r23, r1
    5fc0:	81 05       	cpc	r24, r1
    5fc2:	91 05       	cpc	r25, r1
    5fc4:	09 f4       	brne	.+2      	; 0x5fc8 <dir_next+0x102>
    5fc6:	86 c0       	rjmp	.+268    	; 0x60d4 <dir_next+0x20e>
    5fc8:	61 30       	cpi	r22, 0x01	; 1
    5fca:	71 05       	cpc	r23, r1
    5fcc:	81 05       	cpc	r24, r1
    5fce:	91 05       	cpc	r25, r1
    5fd0:	09 f4       	brne	.+2      	; 0x5fd4 <dir_next+0x10e>
    5fd2:	82 c0       	rjmp	.+260    	; 0x60d8 <dir_next+0x212>
    5fd4:	6f 3f       	cpi	r22, 0xFF	; 255
    5fd6:	2f ef       	ldi	r18, 0xFF	; 255
    5fd8:	72 07       	cpc	r23, r18
    5fda:	82 07       	cpc	r24, r18
    5fdc:	92 07       	cpc	r25, r18
    5fde:	09 f4       	brne	.+2      	; 0x5fe2 <dir_next+0x11c>
    5fe0:	7d c0       	rjmp	.+250    	; 0x60dc <dir_next+0x216>
    5fe2:	88 81       	ld	r24, Y
    5fe4:	99 81       	ldd	r25, Y+1	; 0x01
    5fe6:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <sync_window>
    5fea:	81 11       	cpse	r24, r1
    5fec:	79 c0       	rjmp	.+242    	; 0x60e0 <dir_next+0x21a>
    5fee:	88 81       	ld	r24, Y
    5ff0:	99 81       	ldd	r25, Y+1	; 0x01
    5ff2:	40 e0       	ldi	r20, 0x00	; 0
    5ff4:	52 e0       	ldi	r21, 0x02	; 2
    5ff6:	60 e0       	ldi	r22, 0x00	; 0
    5ff8:	70 e0       	ldi	r23, 0x00	; 0
    5ffa:	c2 96       	adiw	r24, 0x32	; 50
    5ffc:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <mem_set>
    6000:	e8 80       	ld	r14, Y
    6002:	f9 80       	ldd	r15, Y+1	; 0x01
    6004:	b5 01       	movw	r22, r10
    6006:	a4 01       	movw	r20, r8
    6008:	c7 01       	movw	r24, r14
    600a:	82 db       	rcall	.-2300   	; 0x5710 <clust2sect>
    600c:	f7 01       	movw	r30, r14
    600e:	66 a7       	std	Z+46, r22	; 0x2e
    6010:	77 a7       	std	Z+47, r23	; 0x2f
    6012:	80 ab       	std	Z+48, r24	; 0x30
    6014:	91 ab       	std	Z+49, r25	; 0x31
    6016:	e1 2c       	mov	r14, r1
    6018:	f1 2c       	mov	r15, r1
    601a:	77 24       	eor	r7, r7
    601c:	73 94       	inc	r7
    601e:	17 c0       	rjmp	.+46     	; 0x604e <dir_next+0x188>
    6020:	74 82       	std	Z+4, r7	; 0x04
    6022:	88 81       	ld	r24, Y
    6024:	99 81       	ldd	r25, Y+1	; 0x01
    6026:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <sync_window>
    602a:	81 11       	cpse	r24, r1
    602c:	5b c0       	rjmp	.+182    	; 0x60e4 <dir_next+0x21e>
    602e:	e8 81       	ld	r30, Y
    6030:	f9 81       	ldd	r31, Y+1	; 0x01
    6032:	86 a5       	ldd	r24, Z+46	; 0x2e
    6034:	97 a5       	ldd	r25, Z+47	; 0x2f
    6036:	a0 a9       	ldd	r26, Z+48	; 0x30
    6038:	b1 a9       	ldd	r27, Z+49	; 0x31
    603a:	01 96       	adiw	r24, 0x01	; 1
    603c:	a1 1d       	adc	r26, r1
    603e:	b1 1d       	adc	r27, r1
    6040:	86 a7       	std	Z+46, r24	; 0x2e
    6042:	97 a7       	std	Z+47, r25	; 0x2f
    6044:	a0 ab       	std	Z+48, r26	; 0x30
    6046:	b1 ab       	std	Z+49, r27	; 0x31
    6048:	ff ef       	ldi	r31, 0xFF	; 255
    604a:	ef 1a       	sub	r14, r31
    604c:	ff 0a       	sbc	r15, r31
    604e:	e8 81       	ld	r30, Y
    6050:	f9 81       	ldd	r31, Y+1	; 0x01
    6052:	82 81       	ldd	r24, Z+2	; 0x02
    6054:	90 e0       	ldi	r25, 0x00	; 0
    6056:	e8 16       	cp	r14, r24
    6058:	f9 06       	cpc	r15, r25
    605a:	10 f3       	brcs	.-60     	; 0x6020 <dir_next+0x15a>
    605c:	86 a5       	ldd	r24, Z+46	; 0x2e
    605e:	97 a5       	ldd	r25, Z+47	; 0x2f
    6060:	a0 a9       	ldd	r26, Z+48	; 0x30
    6062:	b1 a9       	ldd	r27, Z+49	; 0x31
    6064:	8e 19       	sub	r24, r14
    6066:	9f 09       	sbc	r25, r15
    6068:	a1 09       	sbc	r26, r1
    606a:	b1 09       	sbc	r27, r1
    606c:	86 a7       	std	Z+46, r24	; 0x2e
    606e:	97 a7       	std	Z+47, r25	; 0x2f
    6070:	a0 ab       	std	Z+48, r26	; 0x30
    6072:	b1 ab       	std	Z+49, r27	; 0x31
    6074:	8a 86       	std	Y+10, r8	; 0x0a
    6076:	9b 86       	std	Y+11, r9	; 0x0b
    6078:	ac 86       	std	Y+12, r10	; 0x0c
    607a:	bd 86       	std	Y+13, r11	; 0x0d
    607c:	b5 01       	movw	r22, r10
    607e:	a4 01       	movw	r20, r8
    6080:	88 81       	ld	r24, Y
    6082:	99 81       	ldd	r25, Y+1	; 0x01
    6084:	45 db       	rcall	.-2422   	; 0x5710 <clust2sect>
    6086:	6e 87       	std	Y+14, r22	; 0x0e
    6088:	7f 87       	std	Y+15, r23	; 0x0f
    608a:	88 8b       	std	Y+16, r24	; 0x10
    608c:	99 8b       	std	Y+17, r25	; 0x11
    608e:	0c 83       	std	Y+4, r16	; 0x04
    6090:	1d 83       	std	Y+5, r17	; 0x05
    6092:	cc 0c       	add	r12, r12
    6094:	dd 1c       	adc	r13, r13
    6096:	cc 0c       	add	r12, r12
    6098:	dd 1c       	adc	r13, r13
    609a:	cc 0c       	add	r12, r12
    609c:	dd 1c       	adc	r13, r13
    609e:	cc 0c       	add	r12, r12
    60a0:	dd 1c       	adc	r13, r13
    60a2:	cc 0c       	add	r12, r12
    60a4:	dd 1c       	adc	r13, r13
    60a6:	22 e3       	ldi	r18, 0x32	; 50
    60a8:	c2 0e       	add	r12, r18
    60aa:	d1 1c       	adc	r13, r1
    60ac:	88 81       	ld	r24, Y
    60ae:	99 81       	ldd	r25, Y+1	; 0x01
    60b0:	c8 0e       	add	r12, r24
    60b2:	d9 1e       	adc	r13, r25
    60b4:	ca 8a       	std	Y+18, r12	; 0x12
    60b6:	db 8a       	std	Y+19, r13	; 0x13
    60b8:	80 e0       	ldi	r24, 0x00	; 0
    60ba:	15 c0       	rjmp	.+42     	; 0x60e6 <dir_next+0x220>
    60bc:	84 e0       	ldi	r24, 0x04	; 4
    60be:	13 c0       	rjmp	.+38     	; 0x60e6 <dir_next+0x220>
    60c0:	84 e0       	ldi	r24, 0x04	; 4
    60c2:	11 c0       	rjmp	.+34     	; 0x60e6 <dir_next+0x220>
    60c4:	84 e0       	ldi	r24, 0x04	; 4
    60c6:	0f c0       	rjmp	.+30     	; 0x60e6 <dir_next+0x220>
    60c8:	82 e0       	ldi	r24, 0x02	; 2
    60ca:	0d c0       	rjmp	.+26     	; 0x60e6 <dir_next+0x220>
    60cc:	81 e0       	ldi	r24, 0x01	; 1
    60ce:	0b c0       	rjmp	.+22     	; 0x60e6 <dir_next+0x220>
    60d0:	84 e0       	ldi	r24, 0x04	; 4
    60d2:	09 c0       	rjmp	.+18     	; 0x60e6 <dir_next+0x220>
    60d4:	87 e0       	ldi	r24, 0x07	; 7
    60d6:	07 c0       	rjmp	.+14     	; 0x60e6 <dir_next+0x220>
    60d8:	82 e0       	ldi	r24, 0x02	; 2
    60da:	05 c0       	rjmp	.+10     	; 0x60e6 <dir_next+0x220>
    60dc:	81 e0       	ldi	r24, 0x01	; 1
    60de:	03 c0       	rjmp	.+6      	; 0x60e6 <dir_next+0x220>
    60e0:	81 e0       	ldi	r24, 0x01	; 1
    60e2:	01 c0       	rjmp	.+2      	; 0x60e6 <dir_next+0x220>
    60e4:	81 e0       	ldi	r24, 0x01	; 1
    60e6:	df 91       	pop	r29
    60e8:	cf 91       	pop	r28
    60ea:	1f 91       	pop	r17
    60ec:	0f 91       	pop	r16
    60ee:	ff 90       	pop	r15
    60f0:	ef 90       	pop	r14
    60f2:	df 90       	pop	r13
    60f4:	cf 90       	pop	r12
    60f6:	bf 90       	pop	r11
    60f8:	af 90       	pop	r10
    60fa:	9f 90       	pop	r9
    60fc:	8f 90       	pop	r8
    60fe:	7f 90       	pop	r7
    6100:	08 95       	ret

00006102 <follow_path>:
    6102:	6f 92       	push	r6
    6104:	7f 92       	push	r7
    6106:	8f 92       	push	r8
    6108:	af 92       	push	r10
    610a:	bf 92       	push	r11
    610c:	cf 92       	push	r12
    610e:	df 92       	push	r13
    6110:	ef 92       	push	r14
    6112:	ff 92       	push	r15
    6114:	0f 93       	push	r16
    6116:	1f 93       	push	r17
    6118:	cf 93       	push	r28
    611a:	df 93       	push	r29
    611c:	ec 01       	movw	r28, r24
    611e:	8b 01       	movw	r16, r22
    6120:	fb 01       	movw	r30, r22
    6122:	80 81       	ld	r24, Z
    6124:	8f 32       	cpi	r24, 0x2F	; 47
    6126:	11 f0       	breq	.+4      	; 0x612c <follow_path+0x2a>
    6128:	8c 35       	cpi	r24, 0x5C	; 92
    612a:	39 f4       	brne	.+14     	; 0x613a <follow_path+0x38>
    612c:	0f 5f       	subi	r16, 0xFF	; 255
    612e:	1f 4f       	sbci	r17, 0xFF	; 255
    6130:	1e 82       	std	Y+6, r1	; 0x06
    6132:	1f 82       	std	Y+7, r1	; 0x07
    6134:	18 86       	std	Y+8, r1	; 0x08
    6136:	19 86       	std	Y+9, r1	; 0x09
    6138:	0a c0       	rjmp	.+20     	; 0x614e <follow_path+0x4c>
    613a:	e8 81       	ld	r30, Y
    613c:	f9 81       	ldd	r31, Y+1	; 0x01
    613e:	82 89       	ldd	r24, Z+18	; 0x12
    6140:	93 89       	ldd	r25, Z+19	; 0x13
    6142:	a4 89       	ldd	r26, Z+20	; 0x14
    6144:	b5 89       	ldd	r27, Z+21	; 0x15
    6146:	8e 83       	std	Y+6, r24	; 0x06
    6148:	9f 83       	std	Y+7, r25	; 0x07
    614a:	a8 87       	std	Y+8, r26	; 0x08
    614c:	b9 87       	std	Y+9, r27	; 0x09
    614e:	f8 01       	movw	r30, r16
    6150:	80 81       	ld	r24, Z
    6152:	80 32       	cpi	r24, 0x20	; 32
    6154:	78 f0       	brcs	.+30     	; 0x6174 <follow_path+0x72>
    6156:	0f 2e       	mov	r0, r31
    6158:	fe e2       	ldi	r31, 0x2E	; 46
    615a:	df 2e       	mov	r13, r31
    615c:	f0 2d       	mov	r31, r0
    615e:	0f 2e       	mov	r0, r31
    6160:	f5 e0       	ldi	r31, 0x05	; 5
    6162:	8f 2e       	mov	r8, r31
    6164:	f0 2d       	mov	r31, r0
    6166:	0f 2e       	mov	r0, r31
    6168:	f9 ef       	ldi	r31, 0xF9	; 249
    616a:	af 2e       	mov	r10, r31
    616c:	f5 e2       	ldi	r31, 0x25	; 37
    616e:	bf 2e       	mov	r11, r31
    6170:	f0 2d       	mov	r31, r0
    6172:	07 c0       	rjmp	.+14     	; 0x6182 <follow_path+0x80>
    6174:	60 e0       	ldi	r22, 0x00	; 0
    6176:	70 e0       	ldi	r23, 0x00	; 0
    6178:	ce 01       	movw	r24, r28
    617a:	de db       	rcall	.-2116   	; 0x5938 <dir_sdi>
    617c:	1a 8a       	std	Y+18, r1	; 0x12
    617e:	1b 8a       	std	Y+19, r1	; 0x13
    6180:	4c c1       	rjmp	.+664    	; 0x641a <follow_path+0x318>
    6182:	f8 01       	movw	r30, r16
    6184:	8f 01       	movw	r16, r30
    6186:	81 91       	ld	r24, Z+
    6188:	8f 32       	cpi	r24, 0x2F	; 47
    618a:	e1 f3       	breq	.-8      	; 0x6184 <follow_path+0x82>
    618c:	8c 35       	cpi	r24, 0x5C	; 92
    618e:	d1 f3       	breq	.-12     	; 0x6184 <follow_path+0x82>
    6190:	ec 88       	ldd	r14, Y+20	; 0x14
    6192:	fd 88       	ldd	r15, Y+21	; 0x15
    6194:	4b e0       	ldi	r20, 0x0B	; 11
    6196:	50 e0       	ldi	r21, 0x00	; 0
    6198:	60 e2       	ldi	r22, 0x20	; 32
    619a:	70 e0       	ldi	r23, 0x00	; 0
    619c:	c7 01       	movw	r24, r14
    619e:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <mem_set>
    61a2:	f8 01       	movw	r30, r16
    61a4:	80 81       	ld	r24, Z
    61a6:	8e 32       	cpi	r24, 0x2E	; 46
    61a8:	41 f0       	breq	.+16     	; 0x61ba <follow_path+0xb8>
    61aa:	20 e0       	ldi	r18, 0x00	; 0
    61ac:	30 e0       	ldi	r19, 0x00	; 0
    61ae:	60 e0       	ldi	r22, 0x00	; 0
    61b0:	70 e0       	ldi	r23, 0x00	; 0
    61b2:	88 e0       	ldi	r24, 0x08	; 8
    61b4:	90 e0       	ldi	r25, 0x00	; 0
    61b6:	c1 2c       	mov	r12, r1
    61b8:	1f c0       	rjmp	.+62     	; 0x61f8 <follow_path+0xf6>
    61ba:	f7 01       	movw	r30, r14
    61bc:	d0 82       	st	Z, r13
    61be:	f8 01       	movw	r30, r16
    61c0:	21 81       	ldd	r18, Z+1	; 0x01
    61c2:	2e 32       	cpi	r18, 0x2E	; 46
    61c4:	51 f4       	brne	.+20     	; 0x61da <follow_path+0xd8>
    61c6:	f7 01       	movw	r30, r14
    61c8:	d1 82       	std	Z+1, r13	; 0x01
    61ca:	f8 01       	movw	r30, r16
    61cc:	22 81       	ldd	r18, Z+2	; 0x02
    61ce:	2e 32       	cpi	r18, 0x2E	; 46
    61d0:	09 f4       	brne	.+2      	; 0x61d4 <follow_path+0xd2>
    61d2:	0b c1       	rjmp	.+534    	; 0x63ea <follow_path+0x2e8>
    61d4:	83 e0       	ldi	r24, 0x03	; 3
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	02 c0       	rjmp	.+4      	; 0x61de <follow_path+0xdc>
    61da:	82 e0       	ldi	r24, 0x02	; 2
    61dc:	90 e0       	ldi	r25, 0x00	; 0
    61de:	2f 32       	cpi	r18, 0x2F	; 47
    61e0:	09 f4       	brne	.+2      	; 0x61e4 <follow_path+0xe2>
    61e2:	e7 c0       	rjmp	.+462    	; 0x63b2 <follow_path+0x2b0>
    61e4:	2c 35       	cpi	r18, 0x5C	; 92
    61e6:	09 f4       	brne	.+2      	; 0x61ea <follow_path+0xe8>
    61e8:	e4 c0       	rjmp	.+456    	; 0x63b2 <follow_path+0x2b0>
    61ea:	21 32       	cpi	r18, 0x21	; 33
    61ec:	08 f0       	brcs	.+2      	; 0x61f0 <follow_path+0xee>
    61ee:	fd c0       	rjmp	.+506    	; 0x63ea <follow_path+0x2e8>
    61f0:	e4 c0       	rjmp	.+456    	; 0x63ba <follow_path+0x2b8>
    61f2:	f7 01       	movw	r30, r14
    61f4:	83 87       	std	Z+11, r24	; 0x0b
    61f6:	fb c0       	rjmp	.+502    	; 0x63ee <follow_path+0x2ec>
    61f8:	ab 01       	movw	r20, r22
    61fa:	4f 5f       	subi	r20, 0xFF	; 255
    61fc:	5f 4f       	sbci	r21, 0xFF	; 255
    61fe:	f8 01       	movw	r30, r16
    6200:	e6 0f       	add	r30, r22
    6202:	f7 1f       	adc	r31, r23
    6204:	b0 81       	ld	r27, Z
    6206:	b1 32       	cpi	r27, 0x21	; 33
    6208:	08 f4       	brcc	.+2      	; 0x620c <follow_path+0x10a>
    620a:	ea c0       	rjmp	.+468    	; 0x63e0 <follow_path+0x2de>
    620c:	bf 32       	cpi	r27, 0x2F	; 47
    620e:	09 f4       	brne	.+2      	; 0x6212 <follow_path+0x110>
    6210:	e2 c0       	rjmp	.+452    	; 0x63d6 <follow_path+0x2d4>
    6212:	bc 35       	cpi	r27, 0x5C	; 92
    6214:	09 f4       	brne	.+2      	; 0x6218 <follow_path+0x116>
    6216:	df c0       	rjmp	.+446    	; 0x63d6 <follow_path+0x2d4>
    6218:	be 32       	cpi	r27, 0x2E	; 46
    621a:	09 f4       	brne	.+2      	; 0x621e <follow_path+0x11c>
    621c:	d2 c0       	rjmp	.+420    	; 0x63c2 <follow_path+0x2c0>
    621e:	28 17       	cp	r18, r24
    6220:	39 07       	cpc	r19, r25
    6222:	08 f0       	brcs	.+2      	; 0x6226 <follow_path+0x124>
    6224:	be c0       	rjmp	.+380    	; 0x63a2 <follow_path+0x2a0>
    6226:	08 c0       	rjmp	.+16     	; 0x6238 <follow_path+0x136>
    6228:	cc 0c       	add	r12, r12
    622a:	cc 0c       	add	r12, r12
    622c:	ba 01       	movw	r22, r20
    622e:	28 e0       	ldi	r18, 0x08	; 8
    6230:	30 e0       	ldi	r19, 0x00	; 0
    6232:	8b e0       	ldi	r24, 0x0B	; 11
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	e0 cf       	rjmp	.-64     	; 0x61f8 <follow_path+0xf6>
    6238:	bb 23       	and	r27, r27
    623a:	1c f4       	brge	.+6      	; 0x6242 <follow_path+0x140>
    623c:	fc 2d       	mov	r31, r12
    623e:	f3 60       	ori	r31, 0x03	; 3
    6240:	cf 2e       	mov	r12, r31
    6242:	ef e7       	ldi	r30, 0x7F	; 127
    6244:	eb 0f       	add	r30, r27
    6246:	ef 31       	cpi	r30, 0x1F	; 31
    6248:	20 f0       	brcs	.+8      	; 0x6252 <follow_path+0x150>
    624a:	e0 e2       	ldi	r30, 0x20	; 32
    624c:	eb 0f       	add	r30, r27
    624e:	ed 31       	cpi	r30, 0x1D	; 29
    6250:	10 f5       	brcc	.+68     	; 0x6296 <follow_path+0x194>
    6252:	6e 5f       	subi	r22, 0xFE	; 254
    6254:	7f 4f       	sbci	r23, 0xFF	; 255
    6256:	f8 01       	movw	r30, r16
    6258:	e4 0f       	add	r30, r20
    625a:	f5 1f       	adc	r31, r21
    625c:	a0 81       	ld	r26, Z
    625e:	40 ec       	ldi	r20, 0xC0	; 192
    6260:	4a 0f       	add	r20, r26
    6262:	4f 33       	cpi	r20, 0x3F	; 63
    6264:	28 f0       	brcs	.+10     	; 0x6270 <follow_path+0x16e>
    6266:	40 e8       	ldi	r20, 0x80	; 128
    6268:	4a 0f       	add	r20, r26
    626a:	4d 37       	cpi	r20, 0x7D	; 125
    626c:	08 f0       	brcs	.+2      	; 0x6270 <follow_path+0x16e>
    626e:	bd c0       	rjmp	.+378    	; 0x63ea <follow_path+0x2e8>
    6270:	ac 01       	movw	r20, r24
    6272:	41 50       	subi	r20, 0x01	; 1
    6274:	51 09       	sbc	r21, r1
    6276:	24 17       	cp	r18, r20
    6278:	35 07       	cpc	r19, r21
    627a:	08 f0       	brcs	.+2      	; 0x627e <follow_path+0x17c>
    627c:	b6 c0       	rjmp	.+364    	; 0x63ea <follow_path+0x2e8>
    627e:	f7 01       	movw	r30, r14
    6280:	e2 0f       	add	r30, r18
    6282:	f3 1f       	adc	r31, r19
    6284:	b0 83       	st	Z, r27
    6286:	f9 01       	movw	r30, r18
    6288:	31 96       	adiw	r30, 0x01	; 1
    628a:	ee 0d       	add	r30, r14
    628c:	ff 1d       	adc	r31, r15
    628e:	2e 5f       	subi	r18, 0xFE	; 254
    6290:	3f 4f       	sbci	r19, 0xFF	; 255
    6292:	a0 83       	st	Z, r26
    6294:	b1 cf       	rjmp	.-158    	; 0x61f8 <follow_path+0xf6>
    6296:	6b 2e       	mov	r6, r27
    6298:	71 2c       	mov	r7, r1
    629a:	62 e2       	ldi	r22, 0x22	; 34
    629c:	66 16       	cp	r6, r22
    629e:	71 04       	cpc	r7, r1
    62a0:	09 f4       	brne	.+2      	; 0x62a4 <follow_path+0x1a2>
    62a2:	a3 c0       	rjmp	.+326    	; 0x63ea <follow_path+0x2e8>
    62a4:	f5 01       	movw	r30, r10
    62a6:	61 91       	ld	r22, Z+
    62a8:	66 23       	and	r22, r22
    62aa:	09 f4       	brne	.+2      	; 0x62ae <follow_path+0x1ac>
    62ac:	8e c0       	rjmp	.+284    	; 0x63ca <follow_path+0x2c8>
    62ae:	70 e0       	ldi	r23, 0x00	; 0
    62b0:	66 16       	cp	r6, r22
    62b2:	77 06       	cpc	r7, r23
    62b4:	c1 f7       	brne	.-16     	; 0x62a6 <follow_path+0x1a4>
    62b6:	99 c0       	rjmp	.+306    	; 0x63ea <follow_path+0x2e8>
    62b8:	ec 2d       	mov	r30, r12
    62ba:	e2 60       	ori	r30, 0x02	; 2
    62bc:	ce 2e       	mov	r12, r30
    62be:	08 c0       	rjmp	.+16     	; 0x62d0 <follow_path+0x1ce>
    62c0:	6f e9       	ldi	r22, 0x9F	; 159
    62c2:	6b 0f       	add	r22, r27
    62c4:	6a 31       	cpi	r22, 0x1A	; 26
    62c6:	20 f4       	brcc	.+8      	; 0x62d0 <follow_path+0x1ce>
    62c8:	fc 2d       	mov	r31, r12
    62ca:	f1 60       	ori	r31, 0x01	; 1
    62cc:	cf 2e       	mov	r12, r31
    62ce:	b0 52       	subi	r27, 0x20	; 32
    62d0:	f7 01       	movw	r30, r14
    62d2:	e2 0f       	add	r30, r18
    62d4:	f3 1f       	adc	r31, r19
    62d6:	b0 83       	st	Z, r27
    62d8:	2f 5f       	subi	r18, 0xFF	; 255
    62da:	3f 4f       	sbci	r19, 0xFF	; 255
    62dc:	ba 01       	movw	r22, r20
    62de:	8c cf       	rjmp	.-232    	; 0x61f8 <follow_path+0xf6>
    62e0:	23 2b       	or	r18, r19
    62e2:	09 f4       	brne	.+2      	; 0x62e6 <follow_path+0x1e4>
    62e4:	82 c0       	rjmp	.+260    	; 0x63ea <follow_path+0x2e8>
    62e6:	f7 01       	movw	r30, r14
    62e8:	20 81       	ld	r18, Z
    62ea:	25 3e       	cpi	r18, 0xE5	; 229
    62ec:	09 f4       	brne	.+2      	; 0x62f0 <follow_path+0x1ee>
    62ee:	80 82       	st	Z, r8
    62f0:	08 97       	sbiw	r24, 0x08	; 8
    62f2:	19 f4       	brne	.+6      	; 0x62fa <follow_path+0x1f8>
    62f4:	c5 2e       	mov	r12, r21
    62f6:	cc 0c       	add	r12, r12
    62f8:	cc 0c       	add	r12, r12
    62fa:	8c 2d       	mov	r24, r12
    62fc:	83 70       	andi	r24, 0x03	; 3
    62fe:	81 30       	cpi	r24, 0x01	; 1
    6300:	09 f4       	brne	.+2      	; 0x6304 <follow_path+0x202>
    6302:	40 61       	ori	r20, 0x10	; 16
    6304:	8c 2d       	mov	r24, r12
    6306:	8c 70       	andi	r24, 0x0C	; 12
    6308:	84 30       	cpi	r24, 0x04	; 4
    630a:	09 f4       	brne	.+2      	; 0x630e <follow_path+0x20c>
    630c:	48 60       	ori	r20, 0x08	; 8
    630e:	f7 01       	movw	r30, r14
    6310:	43 87       	std	Z+11, r20	; 0x0b
    6312:	6d c0       	rjmp	.+218    	; 0x63ee <follow_path+0x2ec>
    6314:	4e 85       	ldd	r20, Y+14	; 0x0e
    6316:	5f 85       	ldd	r21, Y+15	; 0x0f
    6318:	68 89       	ldd	r22, Y+16	; 0x10
    631a:	79 89       	ldd	r23, Y+17	; 0x11
    631c:	88 81       	ld	r24, Y
    631e:	99 81       	ldd	r25, Y+1	; 0x01
    6320:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <move_window>
    6324:	81 11       	cpse	r24, r1
    6326:	6a c0       	rjmp	.+212    	; 0x63fc <follow_path+0x2fa>
    6328:	6a 89       	ldd	r22, Y+18	; 0x12
    632a:	7b 89       	ldd	r23, Y+19	; 0x13
    632c:	fb 01       	movw	r30, r22
    632e:	90 81       	ld	r25, Z
    6330:	99 23       	and	r25, r25
    6332:	09 f4       	brne	.+2      	; 0x6336 <follow_path+0x234>
    6334:	6a c0       	rjmp	.+212    	; 0x640a <follow_path+0x308>
    6336:	93 85       	ldd	r25, Z+11	; 0x0b
    6338:	93 fd       	sbrc	r25, 3
    633a:	0f c0       	rjmp	.+30     	; 0x635a <follow_path+0x258>
    633c:	4c 89       	ldd	r20, Y+20	; 0x14
    633e:	5d 89       	ldd	r21, Y+21	; 0x15
    6340:	da 01       	movw	r26, r20
    6342:	9b 01       	movw	r18, r22
    6344:	25 5f       	subi	r18, 0xF5	; 245
    6346:	3f 4f       	sbci	r19, 0xFF	; 255
    6348:	04 c0       	rjmp	.+8      	; 0x6352 <follow_path+0x250>
    634a:	e2 17       	cp	r30, r18
    634c:	f3 07       	cpc	r31, r19
    634e:	09 f4       	brne	.+2      	; 0x6352 <follow_path+0x250>
    6350:	60 c0       	rjmp	.+192    	; 0x6412 <follow_path+0x310>
    6352:	f1 90       	ld	r15, Z+
    6354:	9d 91       	ld	r25, X+
    6356:	f9 16       	cp	r15, r25
    6358:	c1 f3       	breq	.-16     	; 0x634a <follow_path+0x248>
    635a:	60 e0       	ldi	r22, 0x00	; 0
    635c:	70 e0       	ldi	r23, 0x00	; 0
    635e:	ce 01       	movw	r24, r28
    6360:	b2 dd       	rcall	.-1180   	; 0x5ec6 <dir_next>
    6362:	88 23       	and	r24, r24
    6364:	b9 f2       	breq	.-82     	; 0x6314 <follow_path+0x212>
    6366:	4a c0       	rjmp	.+148    	; 0x63fc <follow_path+0x2fa>
    6368:	95 ff       	sbrs	r25, 5
    636a:	0a c0       	rjmp	.+20     	; 0x6380 <follow_path+0x27e>
    636c:	1e 82       	std	Y+6, r1	; 0x06
    636e:	1f 82       	std	Y+7, r1	; 0x07
    6370:	18 86       	std	Y+8, r1	; 0x08
    6372:	19 86       	std	Y+9, r1	; 0x09
    6374:	1a 8a       	std	Y+18, r1	; 0x12
    6376:	1b 8a       	std	Y+19, r1	; 0x13
    6378:	92 ff       	sbrs	r25, 2
    637a:	03 cf       	rjmp	.-506    	; 0x6182 <follow_path+0x80>
    637c:	80 e0       	ldi	r24, 0x00	; 0
    637e:	4d c0       	rjmp	.+154    	; 0x641a <follow_path+0x318>
    6380:	92 ff       	sbrs	r25, 2
    6382:	11 c0       	rjmp	.+34     	; 0x63a6 <follow_path+0x2a4>
    6384:	84 e0       	ldi	r24, 0x04	; 4
    6386:	49 c0       	rjmp	.+146    	; 0x641a <follow_path+0x318>
    6388:	fb 01       	movw	r30, r22
    638a:	83 85       	ldd	r24, Z+11	; 0x0b
    638c:	84 ff       	sbrs	r24, 4
    638e:	0d c0       	rjmp	.+26     	; 0x63aa <follow_path+0x2a8>
    6390:	88 81       	ld	r24, Y
    6392:	99 81       	ldd	r25, Y+1	; 0x01
    6394:	0e 94 09 27 	call	0x4e12	; 0x4e12 <ld_clust>
    6398:	6e 83       	std	Y+6, r22	; 0x06
    639a:	7f 83       	std	Y+7, r23	; 0x07
    639c:	88 87       	std	Y+8, r24	; 0x08
    639e:	99 87       	std	Y+9, r25	; 0x09
    63a0:	f0 ce       	rjmp	.-544    	; 0x6182 <follow_path+0x80>
    63a2:	86 e0       	ldi	r24, 0x06	; 6
    63a4:	3a c0       	rjmp	.+116    	; 0x641a <follow_path+0x318>
    63a6:	85 e0       	ldi	r24, 0x05	; 5
    63a8:	38 c0       	rjmp	.+112    	; 0x641a <follow_path+0x318>
    63aa:	85 e0       	ldi	r24, 0x05	; 5
    63ac:	36 c0       	rjmp	.+108    	; 0x641a <follow_path+0x318>
    63ae:	86 e0       	ldi	r24, 0x06	; 6
    63b0:	34 c0       	rjmp	.+104    	; 0x641a <follow_path+0x318>
    63b2:	08 0f       	add	r16, r24
    63b4:	19 1f       	adc	r17, r25
    63b6:	80 e2       	ldi	r24, 0x20	; 32
    63b8:	1c cf       	rjmp	.-456    	; 0x61f2 <follow_path+0xf0>
    63ba:	08 0f       	add	r16, r24
    63bc:	19 1f       	adc	r17, r25
    63be:	84 e2       	ldi	r24, 0x24	; 36
    63c0:	18 cf       	rjmp	.-464    	; 0x61f2 <follow_path+0xf0>
    63c2:	08 97       	sbiw	r24, 0x08	; 8
    63c4:	09 f4       	brne	.+2      	; 0x63c8 <follow_path+0x2c6>
    63c6:	30 cf       	rjmp	.-416    	; 0x6228 <follow_path+0x126>
    63c8:	f2 cf       	rjmp	.-28     	; 0x63ae <follow_path+0x2ac>
    63ca:	6f eb       	ldi	r22, 0xBF	; 191
    63cc:	6b 0f       	add	r22, r27
    63ce:	6a 31       	cpi	r22, 0x1A	; 26
    63d0:	08 f4       	brcc	.+2      	; 0x63d4 <follow_path+0x2d2>
    63d2:	72 cf       	rjmp	.-284    	; 0x62b8 <follow_path+0x1b6>
    63d4:	75 cf       	rjmp	.-278    	; 0x62c0 <follow_path+0x1be>
    63d6:	04 0f       	add	r16, r20
    63d8:	15 1f       	adc	r17, r21
    63da:	5c 2d       	mov	r21, r12
    63dc:	40 e0       	ldi	r20, 0x00	; 0
    63de:	80 cf       	rjmp	.-256    	; 0x62e0 <follow_path+0x1de>
    63e0:	04 0f       	add	r16, r20
    63e2:	15 1f       	adc	r17, r21
    63e4:	5c 2d       	mov	r21, r12
    63e6:	44 e0       	ldi	r20, 0x04	; 4
    63e8:	7b cf       	rjmp	.-266    	; 0x62e0 <follow_path+0x1de>
    63ea:	86 e0       	ldi	r24, 0x06	; 6
    63ec:	16 c0       	rjmp	.+44     	; 0x641a <follow_path+0x318>
    63ee:	60 e0       	ldi	r22, 0x00	; 0
    63f0:	70 e0       	ldi	r23, 0x00	; 0
    63f2:	ce 01       	movw	r24, r28
    63f4:	a1 da       	rcall	.-2750   	; 0x5938 <dir_sdi>
    63f6:	88 23       	and	r24, r24
    63f8:	09 f4       	brne	.+2      	; 0x63fc <follow_path+0x2fa>
    63fa:	8c cf       	rjmp	.-232    	; 0x6314 <follow_path+0x212>
    63fc:	ec 89       	ldd	r30, Y+20	; 0x14
    63fe:	fd 89       	ldd	r31, Y+21	; 0x15
    6400:	93 85       	ldd	r25, Z+11	; 0x0b
    6402:	84 30       	cpi	r24, 0x04	; 4
    6404:	09 f4       	brne	.+2      	; 0x6408 <follow_path+0x306>
    6406:	b0 cf       	rjmp	.-160    	; 0x6368 <follow_path+0x266>
    6408:	08 c0       	rjmp	.+16     	; 0x641a <follow_path+0x318>
    640a:	ec 89       	ldd	r30, Y+20	; 0x14
    640c:	fd 89       	ldd	r31, Y+21	; 0x15
    640e:	93 85       	ldd	r25, Z+11	; 0x0b
    6410:	ab cf       	rjmp	.-170    	; 0x6368 <follow_path+0x266>
    6412:	fa 01       	movw	r30, r20
    6414:	93 85       	ldd	r25, Z+11	; 0x0b
    6416:	92 ff       	sbrs	r25, 2
    6418:	b7 cf       	rjmp	.-146    	; 0x6388 <follow_path+0x286>
    641a:	df 91       	pop	r29
    641c:	cf 91       	pop	r28
    641e:	1f 91       	pop	r17
    6420:	0f 91       	pop	r16
    6422:	ff 90       	pop	r15
    6424:	ef 90       	pop	r14
    6426:	df 90       	pop	r13
    6428:	cf 90       	pop	r12
    642a:	bf 90       	pop	r11
    642c:	af 90       	pop	r10
    642e:	8f 90       	pop	r8
    6430:	7f 90       	pop	r7
    6432:	6f 90       	pop	r6
    6434:	08 95       	ret

00006436 <dir_alloc>:
    6436:	ef 92       	push	r14
    6438:	ff 92       	push	r15
    643a:	0f 93       	push	r16
    643c:	1f 93       	push	r17
    643e:	cf 93       	push	r28
    6440:	df 93       	push	r29
    6442:	ec 01       	movw	r28, r24
    6444:	7b 01       	movw	r14, r22
    6446:	60 e0       	ldi	r22, 0x00	; 0
    6448:	70 e0       	ldi	r23, 0x00	; 0
    644a:	76 da       	rcall	.-2836   	; 0x5938 <dir_sdi>
    644c:	81 11       	cpse	r24, r1
    644e:	21 c0       	rjmp	.+66     	; 0x6492 <dir_alloc+0x5c>
    6450:	00 e0       	ldi	r16, 0x00	; 0
    6452:	10 e0       	ldi	r17, 0x00	; 0
    6454:	4e 85       	ldd	r20, Y+14	; 0x0e
    6456:	5f 85       	ldd	r21, Y+15	; 0x0f
    6458:	68 89       	ldd	r22, Y+16	; 0x10
    645a:	79 89       	ldd	r23, Y+17	; 0x11
    645c:	88 81       	ld	r24, Y
    645e:	99 81       	ldd	r25, Y+1	; 0x01
    6460:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <move_window>
    6464:	81 11       	cpse	r24, r1
    6466:	15 c0       	rjmp	.+42     	; 0x6492 <dir_alloc+0x5c>
    6468:	ea 89       	ldd	r30, Y+18	; 0x12
    646a:	fb 89       	ldd	r31, Y+19	; 0x13
    646c:	90 81       	ld	r25, Z
    646e:	95 3e       	cpi	r25, 0xE5	; 229
    6470:	11 f0       	breq	.+4      	; 0x6476 <dir_alloc+0x40>
    6472:	91 11       	cpse	r25, r1
    6474:	06 c0       	rjmp	.+12     	; 0x6482 <dir_alloc+0x4c>
    6476:	0f 5f       	subi	r16, 0xFF	; 255
    6478:	1f 4f       	sbci	r17, 0xFF	; 255
    647a:	0e 15       	cp	r16, r14
    647c:	1f 05       	cpc	r17, r15
    647e:	19 f4       	brne	.+6      	; 0x6486 <dir_alloc+0x50>
    6480:	0b c0       	rjmp	.+22     	; 0x6498 <dir_alloc+0x62>
    6482:	00 e0       	ldi	r16, 0x00	; 0
    6484:	10 e0       	ldi	r17, 0x00	; 0
    6486:	61 e0       	ldi	r22, 0x01	; 1
    6488:	70 e0       	ldi	r23, 0x00	; 0
    648a:	ce 01       	movw	r24, r28
    648c:	1c dd       	rcall	.-1480   	; 0x5ec6 <dir_next>
    648e:	88 23       	and	r24, r24
    6490:	09 f3       	breq	.-62     	; 0x6454 <dir_alloc+0x1e>
    6492:	84 30       	cpi	r24, 0x04	; 4
    6494:	09 f4       	brne	.+2      	; 0x6498 <dir_alloc+0x62>
    6496:	87 e0       	ldi	r24, 0x07	; 7
    6498:	df 91       	pop	r29
    649a:	cf 91       	pop	r28
    649c:	1f 91       	pop	r17
    649e:	0f 91       	pop	r16
    64a0:	ff 90       	pop	r15
    64a2:	ef 90       	pop	r14
    64a4:	08 95       	ret

000064a6 <dir_register>:
    64a6:	1f 93       	push	r17
    64a8:	cf 93       	push	r28
    64aa:	df 93       	push	r29
    64ac:	ec 01       	movw	r28, r24
    64ae:	61 e0       	ldi	r22, 0x01	; 1
    64b0:	70 e0       	ldi	r23, 0x00	; 0
    64b2:	c1 df       	rcall	.-126    	; 0x6436 <dir_alloc>
    64b4:	18 2f       	mov	r17, r24
    64b6:	81 11       	cpse	r24, r1
    64b8:	1f c0       	rjmp	.+62     	; 0x64f8 <dir_register+0x52>
    64ba:	4e 85       	ldd	r20, Y+14	; 0x0e
    64bc:	5f 85       	ldd	r21, Y+15	; 0x0f
    64be:	68 89       	ldd	r22, Y+16	; 0x10
    64c0:	79 89       	ldd	r23, Y+17	; 0x11
    64c2:	88 81       	ld	r24, Y
    64c4:	99 81       	ldd	r25, Y+1	; 0x01
    64c6:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <move_window>
    64ca:	18 2f       	mov	r17, r24
    64cc:	81 11       	cpse	r24, r1
    64ce:	14 c0       	rjmp	.+40     	; 0x64f8 <dir_register+0x52>
    64d0:	40 e2       	ldi	r20, 0x20	; 32
    64d2:	50 e0       	ldi	r21, 0x00	; 0
    64d4:	60 e0       	ldi	r22, 0x00	; 0
    64d6:	70 e0       	ldi	r23, 0x00	; 0
    64d8:	8a 89       	ldd	r24, Y+18	; 0x12
    64da:	9b 89       	ldd	r25, Y+19	; 0x13
    64dc:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <mem_set>
    64e0:	6c 89       	ldd	r22, Y+20	; 0x14
    64e2:	7d 89       	ldd	r23, Y+21	; 0x15
    64e4:	4b e0       	ldi	r20, 0x0B	; 11
    64e6:	50 e0       	ldi	r21, 0x00	; 0
    64e8:	8a 89       	ldd	r24, Y+18	; 0x12
    64ea:	9b 89       	ldd	r25, Y+19	; 0x13
    64ec:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <mem_cpy>
    64f0:	e8 81       	ld	r30, Y
    64f2:	f9 81       	ldd	r31, Y+1	; 0x01
    64f4:	81 e0       	ldi	r24, 0x01	; 1
    64f6:	84 83       	std	Z+4, r24	; 0x04
    64f8:	81 2f       	mov	r24, r17
    64fa:	df 91       	pop	r29
    64fc:	cf 91       	pop	r28
    64fe:	1f 91       	pop	r17
    6500:	08 95       	ret

00006502 <remove_chain>:
    6502:	8f 92       	push	r8
    6504:	9f 92       	push	r9
    6506:	af 92       	push	r10
    6508:	bf 92       	push	r11
    650a:	cf 92       	push	r12
    650c:	df 92       	push	r13
    650e:	ef 92       	push	r14
    6510:	ff 92       	push	r15
    6512:	0f 93       	push	r16
    6514:	1f 93       	push	r17
    6516:	cf 93       	push	r28
    6518:	df 93       	push	r29
    651a:	ec 01       	movw	r28, r24
    651c:	4a 01       	movw	r8, r20
    651e:	5b 01       	movw	r10, r22
    6520:	42 30       	cpi	r20, 0x02	; 2
    6522:	51 05       	cpc	r21, r1
    6524:	61 05       	cpc	r22, r1
    6526:	71 05       	cpc	r23, r1
    6528:	08 f4       	brcc	.+2      	; 0x652c <remove_chain+0x2a>
    652a:	4b c0       	rjmp	.+150    	; 0x65c2 <remove_chain+0xc0>
    652c:	4e 89       	ldd	r20, Y+22	; 0x16
    652e:	5f 89       	ldd	r21, Y+23	; 0x17
    6530:	68 8d       	ldd	r22, Y+24	; 0x18
    6532:	79 8d       	ldd	r23, Y+25	; 0x19
    6534:	84 16       	cp	r8, r20
    6536:	95 06       	cpc	r9, r21
    6538:	a6 06       	cpc	r10, r22
    653a:	b7 06       	cpc	r11, r23
    653c:	08 f0       	brcs	.+2      	; 0x6540 <remove_chain+0x3e>
    653e:	43 c0       	rjmp	.+134    	; 0x65c6 <remove_chain+0xc4>
    6540:	b5 01       	movw	r22, r10
    6542:	a4 01       	movw	r20, r8
    6544:	ce 01       	movw	r24, r28
    6546:	12 d9       	rcall	.-3548   	; 0x576c <get_fat>
    6548:	6b 01       	movw	r12, r22
    654a:	7c 01       	movw	r14, r24
    654c:	61 15       	cp	r22, r1
    654e:	71 05       	cpc	r23, r1
    6550:	81 05       	cpc	r24, r1
    6552:	91 05       	cpc	r25, r1
    6554:	d1 f1       	breq	.+116    	; 0x65ca <remove_chain+0xc8>
    6556:	91 e0       	ldi	r25, 0x01	; 1
    6558:	c9 16       	cp	r12, r25
    655a:	d1 04       	cpc	r13, r1
    655c:	e1 04       	cpc	r14, r1
    655e:	f1 04       	cpc	r15, r1
    6560:	b1 f1       	breq	.+108    	; 0x65ce <remove_chain+0xcc>
    6562:	8f ef       	ldi	r24, 0xFF	; 255
    6564:	c8 16       	cp	r12, r24
    6566:	d8 06       	cpc	r13, r24
    6568:	e8 06       	cpc	r14, r24
    656a:	f8 06       	cpc	r15, r24
    656c:	91 f1       	breq	.+100    	; 0x65d2 <remove_chain+0xd0>
    656e:	00 e0       	ldi	r16, 0x00	; 0
    6570:	10 e0       	ldi	r17, 0x00	; 0
    6572:	98 01       	movw	r18, r16
    6574:	b5 01       	movw	r22, r10
    6576:	a4 01       	movw	r20, r8
    6578:	ce 01       	movw	r24, r28
    657a:	99 da       	rcall	.-2766   	; 0x5aae <put_fat>
    657c:	81 11       	cpse	r24, r1
    657e:	2a c0       	rjmp	.+84     	; 0x65d4 <remove_chain+0xd2>
    6580:	4e 85       	ldd	r20, Y+14	; 0x0e
    6582:	5f 85       	ldd	r21, Y+15	; 0x0f
    6584:	68 89       	ldd	r22, Y+16	; 0x10
    6586:	79 89       	ldd	r23, Y+17	; 0x11
    6588:	4f 3f       	cpi	r20, 0xFF	; 255
    658a:	9f ef       	ldi	r25, 0xFF	; 255
    658c:	59 07       	cpc	r21, r25
    658e:	69 07       	cpc	r22, r25
    6590:	79 07       	cpc	r23, r25
    6592:	59 f0       	breq	.+22     	; 0x65aa <remove_chain+0xa8>
    6594:	4f 5f       	subi	r20, 0xFF	; 255
    6596:	5f 4f       	sbci	r21, 0xFF	; 255
    6598:	6f 4f       	sbci	r22, 0xFF	; 255
    659a:	7f 4f       	sbci	r23, 0xFF	; 255
    659c:	4e 87       	std	Y+14, r20	; 0x0e
    659e:	5f 87       	std	Y+15, r21	; 0x0f
    65a0:	68 8b       	std	Y+16, r22	; 0x10
    65a2:	79 8b       	std	Y+17, r23	; 0x11
    65a4:	9d 81       	ldd	r25, Y+5	; 0x05
    65a6:	91 60       	ori	r25, 0x01	; 1
    65a8:	9d 83       	std	Y+5, r25	; 0x05
    65aa:	4e 89       	ldd	r20, Y+22	; 0x16
    65ac:	5f 89       	ldd	r21, Y+23	; 0x17
    65ae:	68 8d       	ldd	r22, Y+24	; 0x18
    65b0:	79 8d       	ldd	r23, Y+25	; 0x19
    65b2:	c4 16       	cp	r12, r20
    65b4:	d5 06       	cpc	r13, r21
    65b6:	e6 06       	cpc	r14, r22
    65b8:	f7 06       	cpc	r15, r23
    65ba:	60 f4       	brcc	.+24     	; 0x65d4 <remove_chain+0xd2>
    65bc:	46 01       	movw	r8, r12
    65be:	57 01       	movw	r10, r14
    65c0:	bf cf       	rjmp	.-130    	; 0x6540 <remove_chain+0x3e>
    65c2:	82 e0       	ldi	r24, 0x02	; 2
    65c4:	07 c0       	rjmp	.+14     	; 0x65d4 <remove_chain+0xd2>
    65c6:	82 e0       	ldi	r24, 0x02	; 2
    65c8:	05 c0       	rjmp	.+10     	; 0x65d4 <remove_chain+0xd2>
    65ca:	80 e0       	ldi	r24, 0x00	; 0
    65cc:	03 c0       	rjmp	.+6      	; 0x65d4 <remove_chain+0xd2>
    65ce:	82 e0       	ldi	r24, 0x02	; 2
    65d0:	01 c0       	rjmp	.+2      	; 0x65d4 <remove_chain+0xd2>
    65d2:	81 e0       	ldi	r24, 0x01	; 1
    65d4:	df 91       	pop	r29
    65d6:	cf 91       	pop	r28
    65d8:	1f 91       	pop	r17
    65da:	0f 91       	pop	r16
    65dc:	ff 90       	pop	r15
    65de:	ef 90       	pop	r14
    65e0:	df 90       	pop	r13
    65e2:	cf 90       	pop	r12
    65e4:	bf 90       	pop	r11
    65e6:	af 90       	pop	r10
    65e8:	9f 90       	pop	r9
    65ea:	8f 90       	pop	r8
    65ec:	08 95       	ret

000065ee <f_mount>:
    65ee:	1f 93       	push	r17
    65f0:	cf 93       	push	r28
    65f2:	df 93       	push	r29
    65f4:	cd b7       	in	r28, 0x3d	; 61
    65f6:	de b7       	in	r29, 0x3e	; 62
    65f8:	26 97       	sbiw	r28, 0x06	; 6
    65fa:	cd bf       	out	0x3d, r28	; 61
    65fc:	de bf       	out	0x3e, r29	; 62
    65fe:	8b 83       	std	Y+3, r24	; 0x03
    6600:	9c 83       	std	Y+4, r25	; 0x04
    6602:	6d 83       	std	Y+5, r22	; 0x05
    6604:	7e 83       	std	Y+6, r23	; 0x06
    6606:	14 2f       	mov	r17, r20
    6608:	69 83       	std	Y+1, r22	; 0x01
    660a:	7a 83       	std	Y+2, r23	; 0x02
    660c:	ce 01       	movw	r24, r28
    660e:	01 96       	adiw	r24, 0x01	; 1
    6610:	0e 94 22 27 	call	0x4e44	; 0x4e44 <get_ldnumber>
    6614:	99 23       	and	r25, r25
    6616:	34 f1       	brlt	.+76     	; 0x6664 <f_mount+0x76>
    6618:	fc 01       	movw	r30, r24
    661a:	ee 0f       	add	r30, r30
    661c:	ff 1f       	adc	r31, r31
    661e:	e4 5a       	subi	r30, 0xA4	; 164
    6620:	f5 4d       	sbci	r31, 0xD5	; 213
    6622:	01 90       	ld	r0, Z+
    6624:	f0 81       	ld	r31, Z
    6626:	e0 2d       	mov	r30, r0
    6628:	30 97       	sbiw	r30, 0x00	; 0
    662a:	09 f0       	breq	.+2      	; 0x662e <f_mount+0x40>
    662c:	10 82       	st	Z, r1
    662e:	eb 81       	ldd	r30, Y+3	; 0x03
    6630:	fc 81       	ldd	r31, Y+4	; 0x04
    6632:	30 97       	sbiw	r30, 0x00	; 0
    6634:	e9 f0       	breq	.+58     	; 0x6670 <f_mount+0x82>
    6636:	10 82       	st	Z, r1
    6638:	2b 81       	ldd	r18, Y+3	; 0x03
    663a:	3c 81       	ldd	r19, Y+4	; 0x04
    663c:	fc 01       	movw	r30, r24
    663e:	ee 0f       	add	r30, r30
    6640:	ff 1f       	adc	r31, r31
    6642:	e4 5a       	subi	r30, 0xA4	; 164
    6644:	f5 4d       	sbci	r31, 0xD5	; 213
    6646:	20 83       	st	Z, r18
    6648:	31 83       	std	Z+1, r19	; 0x01
    664a:	23 2b       	or	r18, r19
    664c:	69 f0       	breq	.+26     	; 0x6668 <f_mount+0x7a>
    664e:	11 30       	cpi	r17, 0x01	; 1
    6650:	69 f4       	brne	.+26     	; 0x666c <f_mount+0x7e>
    6652:	40 e0       	ldi	r20, 0x00	; 0
    6654:	be 01       	movw	r22, r28
    6656:	6b 5f       	subi	r22, 0xFB	; 251
    6658:	7f 4f       	sbci	r23, 0xFF	; 255
    665a:	ce 01       	movw	r24, r28
    665c:	03 96       	adiw	r24, 0x03	; 3
    665e:	0e 94 66 28 	call	0x50cc	; 0x50cc <find_volume>
    6662:	0e c0       	rjmp	.+28     	; 0x6680 <f_mount+0x92>
    6664:	8b e0       	ldi	r24, 0x0B	; 11
    6666:	0c c0       	rjmp	.+24     	; 0x6680 <f_mount+0x92>
    6668:	80 e0       	ldi	r24, 0x00	; 0
    666a:	0a c0       	rjmp	.+20     	; 0x6680 <f_mount+0x92>
    666c:	80 e0       	ldi	r24, 0x00	; 0
    666e:	08 c0       	rjmp	.+16     	; 0x6680 <f_mount+0x92>
    6670:	fc 01       	movw	r30, r24
    6672:	ee 0f       	add	r30, r30
    6674:	ff 1f       	adc	r31, r31
    6676:	e4 5a       	subi	r30, 0xA4	; 164
    6678:	f5 4d       	sbci	r31, 0xD5	; 213
    667a:	10 82       	st	Z, r1
    667c:	11 82       	std	Z+1, r1	; 0x01
    667e:	80 e0       	ldi	r24, 0x00	; 0
    6680:	26 96       	adiw	r28, 0x06	; 6
    6682:	cd bf       	out	0x3d, r28	; 61
    6684:	de bf       	out	0x3e, r29	; 62
    6686:	df 91       	pop	r29
    6688:	cf 91       	pop	r28
    668a:	1f 91       	pop	r17
    668c:	08 95       	ret

0000668e <f_open>:
    668e:	4f 92       	push	r4
    6690:	5f 92       	push	r5
    6692:	6f 92       	push	r6
    6694:	7f 92       	push	r7
    6696:	bf 92       	push	r11
    6698:	cf 92       	push	r12
    669a:	df 92       	push	r13
    669c:	ef 92       	push	r14
    669e:	ff 92       	push	r15
    66a0:	0f 93       	push	r16
    66a2:	1f 93       	push	r17
    66a4:	cf 93       	push	r28
    66a6:	df 93       	push	r29
    66a8:	cd b7       	in	r28, 0x3d	; 61
    66aa:	de b7       	in	r29, 0x3e	; 62
    66ac:	a8 97       	sbiw	r28, 0x28	; 40
    66ae:	cd bf       	out	0x3d, r28	; 61
    66b0:	de bf       	out	0x3e, r29	; 62
    66b2:	8c 01       	movw	r16, r24
    66b4:	6b a3       	std	Y+35, r22	; 0x23
    66b6:	7c a3       	std	Y+36, r23	; 0x24
    66b8:	f4 2e       	mov	r15, r20
    66ba:	00 97       	sbiw	r24, 0x00	; 0
    66bc:	09 f4       	brne	.+2      	; 0x66c0 <f_open+0x32>
    66be:	d6 c0       	rjmp	.+428    	; 0x686c <f_open+0x1de>
    66c0:	dc 01       	movw	r26, r24
    66c2:	1d 92       	st	X+, r1
    66c4:	1c 92       	st	X, r1
    66c6:	4e 71       	andi	r20, 0x1E	; 30
    66c8:	be 01       	movw	r22, r28
    66ca:	6d 5d       	subi	r22, 0xDD	; 221
    66cc:	7f 4f       	sbci	r23, 0xFF	; 255
    66ce:	ce 01       	movw	r24, r28
    66d0:	01 96       	adiw	r24, 0x01	; 1
    66d2:	0e 94 66 28 	call	0x50cc	; 0x50cc <find_volume>
    66d6:	81 11       	cpse	r24, r1
    66d8:	dd c0       	rjmp	.+442    	; 0x6894 <f_open+0x206>
    66da:	bf 2d       	mov	r27, r15
    66dc:	bf 71       	andi	r27, 0x1F	; 31
    66de:	bb 2e       	mov	r11, r27
    66e0:	ce 01       	movw	r24, r28
    66e2:	47 96       	adiw	r24, 0x17	; 23
    66e4:	8d 8b       	std	Y+21, r24	; 0x15
    66e6:	9e 8b       	std	Y+22, r25	; 0x16
    66e8:	6b a1       	ldd	r22, Y+35	; 0x23
    66ea:	7c a1       	ldd	r23, Y+36	; 0x24
    66ec:	46 97       	sbiw	r24, 0x16	; 22
    66ee:	09 dd       	rcall	.-1518   	; 0x6102 <follow_path>
    66f0:	cb 88       	ldd	r12, Y+19	; 0x13
    66f2:	dc 88       	ldd	r13, Y+20	; 0x14
    66f4:	81 11       	cpse	r24, r1
    66f6:	c2 c0       	rjmp	.+388    	; 0x687c <f_open+0x1ee>
    66f8:	c1 14       	cp	r12, r1
    66fa:	d1 04       	cpc	r13, r1
    66fc:	09 f0       	breq	.+2      	; 0x6700 <f_open+0x72>
    66fe:	b8 c0       	rjmp	.+368    	; 0x6870 <f_open+0x1e2>
    6700:	bc c0       	rjmp	.+376    	; 0x687a <f_open+0x1ec>
    6702:	88 23       	and	r24, r24
    6704:	71 f0       	breq	.+28     	; 0x6722 <f_open+0x94>
    6706:	84 30       	cpi	r24, 0x04	; 4
    6708:	09 f0       	breq	.+2      	; 0x670c <f_open+0x7e>
    670a:	c4 c0       	rjmp	.+392    	; 0x6894 <f_open+0x206>
    670c:	ce 01       	movw	r24, r28
    670e:	01 96       	adiw	r24, 0x01	; 1
    6710:	ca de       	rcall	.-620    	; 0x64a6 <dir_register>
    6712:	eb 2d       	mov	r30, r11
    6714:	e8 60       	ori	r30, 0x08	; 8
    6716:	be 2e       	mov	r11, r30
    6718:	cb 88       	ldd	r12, Y+19	; 0x13
    671a:	dc 88       	ldd	r13, Y+20	; 0x14
    671c:	88 23       	and	r24, r24
    671e:	49 f0       	breq	.+18     	; 0x6732 <f_open+0xa4>
    6720:	b9 c0       	rjmp	.+370    	; 0x6894 <f_open+0x206>
    6722:	d6 01       	movw	r26, r12
    6724:	1b 96       	adiw	r26, 0x0b	; 11
    6726:	8c 91       	ld	r24, X
    6728:	81 71       	andi	r24, 0x11	; 17
    672a:	09 f0       	breq	.+2      	; 0x672e <f_open+0xa0>
    672c:	ac c0       	rjmp	.+344    	; 0x6886 <f_open+0x1f8>
    672e:	f2 fc       	sbrc	r15, 2
    6730:	ac c0       	rjmp	.+344    	; 0x688a <f_open+0x1fc>
    6732:	b3 fe       	sbrs	r11, 3
    6734:	59 c0       	rjmp	.+178    	; 0x67e8 <f_open+0x15a>
    6736:	80 e0       	ldi	r24, 0x00	; 0
    6738:	90 e0       	ldi	r25, 0x00	; 0
    673a:	a1 e2       	ldi	r26, 0x21	; 33
    673c:	b6 e4       	ldi	r27, 0x46	; 70
    673e:	f6 01       	movw	r30, r12
    6740:	86 87       	std	Z+14, r24	; 0x0e
    6742:	97 87       	std	Z+15, r25	; 0x0f
    6744:	a0 8b       	std	Z+16, r26	; 0x10
    6746:	b1 8b       	std	Z+17, r27	; 0x11
    6748:	86 8b       	std	Z+22, r24	; 0x16
    674a:	97 8b       	std	Z+23, r25	; 0x17
    674c:	a0 8f       	std	Z+24, r26	; 0x18
    674e:	b1 8f       	std	Z+25, r27	; 0x19
    6750:	13 86       	std	Z+11, r1	; 0x0b
    6752:	14 8e       	std	Z+28, r1	; 0x1c
    6754:	15 8e       	std	Z+29, r1	; 0x1d
    6756:	16 8e       	std	Z+30, r1	; 0x1e
    6758:	17 8e       	std	Z+31, r1	; 0x1f
    675a:	e9 80       	ldd	r14, Y+1	; 0x01
    675c:	fa 80       	ldd	r15, Y+2	; 0x02
    675e:	b6 01       	movw	r22, r12
    6760:	c7 01       	movw	r24, r14
    6762:	0e 94 09 27 	call	0x4e12	; 0x4e12 <ld_clust>
    6766:	2b 01       	movw	r4, r22
    6768:	3c 01       	movw	r6, r24
    676a:	f6 01       	movw	r30, r12
    676c:	12 8e       	std	Z+26, r1	; 0x1a
    676e:	13 8e       	std	Z+27, r1	; 0x1b
    6770:	14 8a       	std	Z+20, r1	; 0x14
    6772:	15 8a       	std	Z+21, r1	; 0x15
    6774:	81 e0       	ldi	r24, 0x01	; 1
    6776:	d7 01       	movw	r26, r14
    6778:	14 96       	adiw	r26, 0x04	; 4
    677a:	8c 93       	st	X, r24
    677c:	14 97       	sbiw	r26, 0x04	; 4
    677e:	41 14       	cp	r4, r1
    6780:	51 04       	cpc	r5, r1
    6782:	61 04       	cpc	r6, r1
    6784:	71 04       	cpc	r7, r1
    6786:	81 f1       	breq	.+96     	; 0x67e8 <f_open+0x15a>
    6788:	9e 96       	adiw	r26, 0x2e	; 46
    678a:	8d 91       	ld	r24, X+
    678c:	9d 91       	ld	r25, X+
    678e:	0d 90       	ld	r0, X+
    6790:	bc 91       	ld	r27, X
    6792:	a0 2d       	mov	r26, r0
    6794:	8d a3       	std	Y+37, r24	; 0x25
    6796:	9e a3       	std	Y+38, r25	; 0x26
    6798:	af a3       	std	Y+39, r26	; 0x27
    679a:	b8 a7       	std	Y+40, r27	; 0x28
    679c:	b3 01       	movw	r22, r6
    679e:	a2 01       	movw	r20, r4
    67a0:	c7 01       	movw	r24, r14
    67a2:	af de       	rcall	.-674    	; 0x6502 <remove_chain>
    67a4:	81 11       	cpse	r24, r1
    67a6:	76 c0       	rjmp	.+236    	; 0x6894 <f_open+0x206>
    67a8:	89 81       	ldd	r24, Y+1	; 0x01
    67aa:	9a 81       	ldd	r25, Y+2	; 0x02
    67ac:	b3 01       	movw	r22, r6
    67ae:	a2 01       	movw	r20, r4
    67b0:	41 50       	subi	r20, 0x01	; 1
    67b2:	51 09       	sbc	r21, r1
    67b4:	61 09       	sbc	r22, r1
    67b6:	71 09       	sbc	r23, r1
    67b8:	fc 01       	movw	r30, r24
    67ba:	42 87       	std	Z+10, r20	; 0x0a
    67bc:	53 87       	std	Z+11, r21	; 0x0b
    67be:	64 87       	std	Z+12, r22	; 0x0c
    67c0:	75 87       	std	Z+13, r23	; 0x0d
    67c2:	4d a1       	ldd	r20, Y+37	; 0x25
    67c4:	5e a1       	ldd	r21, Y+38	; 0x26
    67c6:	6f a1       	ldd	r22, Y+39	; 0x27
    67c8:	78 a5       	ldd	r23, Y+40	; 0x28
    67ca:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <move_window>
    67ce:	0a c0       	rjmp	.+20     	; 0x67e4 <f_open+0x156>
    67d0:	d6 01       	movw	r26, r12
    67d2:	1b 96       	adiw	r26, 0x0b	; 11
    67d4:	8c 91       	ld	r24, X
    67d6:	84 fd       	sbrc	r24, 4
    67d8:	5a c0       	rjmp	.+180    	; 0x688e <f_open+0x200>
    67da:	f1 fe       	sbrs	r15, 1
    67dc:	05 c0       	rjmp	.+10     	; 0x67e8 <f_open+0x15a>
    67de:	80 fd       	sbrc	r24, 0
    67e0:	58 c0       	rjmp	.+176    	; 0x6892 <f_open+0x204>
    67e2:	02 c0       	rjmp	.+4      	; 0x67e8 <f_open+0x15a>
    67e4:	81 11       	cpse	r24, r1
    67e6:	56 c0       	rjmp	.+172    	; 0x6894 <f_open+0x206>
    67e8:	b3 fe       	sbrs	r11, 3
    67ea:	03 c0       	rjmp	.+6      	; 0x67f2 <f_open+0x164>
    67ec:	bb 2d       	mov	r27, r11
    67ee:	b0 62       	ori	r27, 0x20	; 32
    67f0:	bb 2e       	mov	r11, r27
    67f2:	e9 80       	ldd	r14, Y+1	; 0x01
    67f4:	fa 80       	ldd	r15, Y+2	; 0x02
    67f6:	f7 01       	movw	r30, r14
    67f8:	86 a5       	ldd	r24, Z+46	; 0x2e
    67fa:	97 a5       	ldd	r25, Z+47	; 0x2f
    67fc:	a0 a9       	ldd	r26, Z+48	; 0x30
    67fe:	b1 a9       	ldd	r27, Z+49	; 0x31
    6800:	f8 01       	movw	r30, r16
    6802:	82 8f       	std	Z+26, r24	; 0x1a
    6804:	93 8f       	std	Z+27, r25	; 0x1b
    6806:	a4 8f       	std	Z+28, r26	; 0x1c
    6808:	b5 8f       	std	Z+29, r27	; 0x1d
    680a:	c6 8e       	std	Z+30, r12	; 0x1e
    680c:	d7 8e       	std	Z+31, r13	; 0x1f
    680e:	b4 82       	std	Z+4, r11	; 0x04
    6810:	15 82       	std	Z+5, r1	; 0x05
    6812:	b6 01       	movw	r22, r12
    6814:	c7 01       	movw	r24, r14
    6816:	0e 94 09 27 	call	0x4e12	; 0x4e12 <ld_clust>
    681a:	d8 01       	movw	r26, r16
    681c:	1e 96       	adiw	r26, 0x0e	; 14
    681e:	6d 93       	st	X+, r22
    6820:	7d 93       	st	X+, r23
    6822:	8d 93       	st	X+, r24
    6824:	9c 93       	st	X, r25
    6826:	51 97       	sbiw	r26, 0x11	; 17
    6828:	f6 01       	movw	r30, r12
    682a:	44 8d       	ldd	r20, Z+28	; 0x1c
    682c:	55 8d       	ldd	r21, Z+29	; 0x1d
    682e:	66 8d       	ldd	r22, Z+30	; 0x1e
    6830:	77 8d       	ldd	r23, Z+31	; 0x1f
    6832:	1a 96       	adiw	r26, 0x0a	; 10
    6834:	4d 93       	st	X+, r20
    6836:	5d 93       	st	X+, r21
    6838:	6d 93       	st	X+, r22
    683a:	7c 93       	st	X, r23
    683c:	1d 97       	sbiw	r26, 0x0d	; 13
    683e:	f8 01       	movw	r30, r16
    6840:	16 82       	std	Z+6, r1	; 0x06
    6842:	17 82       	std	Z+7, r1	; 0x07
    6844:	10 86       	std	Z+8, r1	; 0x08
    6846:	11 86       	std	Z+9, r1	; 0x09
    6848:	56 96       	adiw	r26, 0x16	; 22
    684a:	1d 92       	st	X+, r1
    684c:	1d 92       	st	X+, r1
    684e:	1d 92       	st	X+, r1
    6850:	1c 92       	st	X, r1
    6852:	59 97       	sbiw	r26, 0x19	; 25
    6854:	ed 92       	st	X+, r14
    6856:	fc 92       	st	X, r15
    6858:	11 97       	sbiw	r26, 0x01	; 1
    685a:	f7 01       	movw	r30, r14
    685c:	86 81       	ldd	r24, Z+6	; 0x06
    685e:	97 81       	ldd	r25, Z+7	; 0x07
    6860:	12 96       	adiw	r26, 0x02	; 2
    6862:	8d 93       	st	X+, r24
    6864:	9c 93       	st	X, r25
    6866:	13 97       	sbiw	r26, 0x03	; 3
    6868:	80 e0       	ldi	r24, 0x00	; 0
    686a:	14 c0       	rjmp	.+40     	; 0x6894 <f_open+0x206>
    686c:	89 e0       	ldi	r24, 0x09	; 9
    686e:	12 c0       	rjmp	.+36     	; 0x6894 <f_open+0x206>
    6870:	8f 2d       	mov	r24, r15
    6872:	8c 71       	andi	r24, 0x1C	; 28
    6874:	09 f0       	breq	.+2      	; 0x6878 <f_open+0x1ea>
    6876:	55 cf       	rjmp	.-342    	; 0x6722 <f_open+0x94>
    6878:	ab cf       	rjmp	.-170    	; 0x67d0 <f_open+0x142>
    687a:	86 e0       	ldi	r24, 0x06	; 6
    687c:	9f 2d       	mov	r25, r15
    687e:	9c 71       	andi	r25, 0x1C	; 28
    6880:	09 f0       	breq	.+2      	; 0x6884 <f_open+0x1f6>
    6882:	3f cf       	rjmp	.-386    	; 0x6702 <f_open+0x74>
    6884:	af cf       	rjmp	.-162    	; 0x67e4 <f_open+0x156>
    6886:	87 e0       	ldi	r24, 0x07	; 7
    6888:	05 c0       	rjmp	.+10     	; 0x6894 <f_open+0x206>
    688a:	88 e0       	ldi	r24, 0x08	; 8
    688c:	03 c0       	rjmp	.+6      	; 0x6894 <f_open+0x206>
    688e:	84 e0       	ldi	r24, 0x04	; 4
    6890:	01 c0       	rjmp	.+2      	; 0x6894 <f_open+0x206>
    6892:	87 e0       	ldi	r24, 0x07	; 7
    6894:	a8 96       	adiw	r28, 0x28	; 40
    6896:	cd bf       	out	0x3d, r28	; 61
    6898:	de bf       	out	0x3e, r29	; 62
    689a:	df 91       	pop	r29
    689c:	cf 91       	pop	r28
    689e:	1f 91       	pop	r17
    68a0:	0f 91       	pop	r16
    68a2:	ff 90       	pop	r15
    68a4:	ef 90       	pop	r14
    68a6:	df 90       	pop	r13
    68a8:	cf 90       	pop	r12
    68aa:	bf 90       	pop	r11
    68ac:	7f 90       	pop	r7
    68ae:	6f 90       	pop	r6
    68b0:	5f 90       	pop	r5
    68b2:	4f 90       	pop	r4
    68b4:	08 95       	ret

000068b6 <f_read>:
    68b6:	2f 92       	push	r2
    68b8:	3f 92       	push	r3
    68ba:	4f 92       	push	r4
    68bc:	5f 92       	push	r5
    68be:	6f 92       	push	r6
    68c0:	7f 92       	push	r7
    68c2:	8f 92       	push	r8
    68c4:	9f 92       	push	r9
    68c6:	af 92       	push	r10
    68c8:	bf 92       	push	r11
    68ca:	cf 92       	push	r12
    68cc:	df 92       	push	r13
    68ce:	ef 92       	push	r14
    68d0:	ff 92       	push	r15
    68d2:	0f 93       	push	r16
    68d4:	1f 93       	push	r17
    68d6:	cf 93       	push	r28
    68d8:	df 93       	push	r29
    68da:	ec 01       	movw	r28, r24
    68dc:	5b 01       	movw	r10, r22
    68de:	7a 01       	movw	r14, r20
    68e0:	69 01       	movw	r12, r18
    68e2:	f9 01       	movw	r30, r18
    68e4:	10 82       	st	Z, r1
    68e6:	11 82       	std	Z+1, r1	; 0x01
    68e8:	0e 94 41 28 	call	0x5082	; 0x5082 <validate>
    68ec:	81 11       	cpse	r24, r1
    68ee:	0d c1       	rjmp	.+538    	; 0x6b0a <f_read+0x254>
    68f0:	8d 81       	ldd	r24, Y+5	; 0x05
    68f2:	81 11       	cpse	r24, r1
    68f4:	0a c1       	rjmp	.+532    	; 0x6b0a <f_read+0x254>
    68f6:	8c 81       	ldd	r24, Y+4	; 0x04
    68f8:	80 ff       	sbrs	r24, 0
    68fa:	02 c1       	rjmp	.+516    	; 0x6b00 <f_read+0x24a>
    68fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    68fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    6900:	ac 85       	ldd	r26, Y+12	; 0x0c
    6902:	bd 85       	ldd	r27, Y+13	; 0x0d
    6904:	4e 81       	ldd	r20, Y+6	; 0x06
    6906:	5f 81       	ldd	r21, Y+7	; 0x07
    6908:	68 85       	ldd	r22, Y+8	; 0x08
    690a:	79 85       	ldd	r23, Y+9	; 0x09
    690c:	84 1b       	sub	r24, r20
    690e:	95 0b       	sbc	r25, r21
    6910:	a6 0b       	sbc	r26, r22
    6912:	b7 0b       	sbc	r27, r23
    6914:	a7 01       	movw	r20, r14
    6916:	60 e0       	ldi	r22, 0x00	; 0
    6918:	70 e0       	ldi	r23, 0x00	; 0
    691a:	84 17       	cp	r24, r20
    691c:	95 07       	cpc	r25, r21
    691e:	a6 07       	cpc	r26, r22
    6920:	b7 07       	cpc	r27, r23
    6922:	08 f4       	brcc	.+2      	; 0x6926 <f_read+0x70>
    6924:	7c 01       	movw	r14, r24
    6926:	e1 14       	cp	r14, r1
    6928:	f1 04       	cpc	r15, r1
    692a:	09 f4       	brne	.+2      	; 0x692e <f_read+0x78>
    692c:	eb c0       	rjmp	.+470    	; 0x6b04 <f_read+0x24e>
    692e:	8e 81       	ldd	r24, Y+6	; 0x06
    6930:	9f 81       	ldd	r25, Y+7	; 0x07
    6932:	a8 85       	ldd	r26, Y+8	; 0x08
    6934:	b9 85       	ldd	r27, Y+9	; 0x09
    6936:	ac 01       	movw	r20, r24
    6938:	bd 01       	movw	r22, r26
    693a:	51 70       	andi	r21, 0x01	; 1
    693c:	66 27       	eor	r22, r22
    693e:	77 27       	eor	r23, r23
    6940:	45 2b       	or	r20, r21
    6942:	46 2b       	or	r20, r22
    6944:	47 2b       	or	r20, r23
    6946:	09 f0       	breq	.+2      	; 0x694a <f_read+0x94>
    6948:	97 c0       	rjmp	.+302    	; 0x6a78 <f_read+0x1c2>
    694a:	e8 81       	ld	r30, Y
    694c:	f9 81       	ldd	r31, Y+1	; 0x01
    694e:	12 81       	ldd	r17, Z+2	; 0x02
    6950:	11 50       	subi	r17, 0x01	; 1
    6952:	ac 01       	movw	r20, r24
    6954:	bd 01       	movw	r22, r26
    6956:	03 2e       	mov	r0, r19
    6958:	39 e0       	ldi	r19, 0x09	; 9
    695a:	76 95       	lsr	r23
    695c:	67 95       	ror	r22
    695e:	57 95       	ror	r21
    6960:	47 95       	ror	r20
    6962:	3a 95       	dec	r19
    6964:	d1 f7       	brne	.-12     	; 0x695a <f_read+0xa4>
    6966:	30 2d       	mov	r19, r0
    6968:	14 23       	and	r17, r20
    696a:	29 f5       	brne	.+74     	; 0x69b6 <f_read+0x100>
    696c:	89 2b       	or	r24, r25
    696e:	8a 2b       	or	r24, r26
    6970:	8b 2b       	or	r24, r27
    6972:	29 f4       	brne	.+10     	; 0x697e <f_read+0xc8>
    6974:	6e 85       	ldd	r22, Y+14	; 0x0e
    6976:	7f 85       	ldd	r23, Y+15	; 0x0f
    6978:	88 89       	ldd	r24, Y+16	; 0x10
    697a:	99 89       	ldd	r25, Y+17	; 0x11
    697c:	07 c0       	rjmp	.+14     	; 0x698c <f_read+0xd6>
    697e:	4a 89       	ldd	r20, Y+18	; 0x12
    6980:	5b 89       	ldd	r21, Y+19	; 0x13
    6982:	6c 89       	ldd	r22, Y+20	; 0x14
    6984:	7d 89       	ldd	r23, Y+21	; 0x15
    6986:	cf 01       	movw	r24, r30
    6988:	0e 94 b6 2b 	call	0x576c	; 0x576c <get_fat>
    698c:	62 30       	cpi	r22, 0x02	; 2
    698e:	71 05       	cpc	r23, r1
    6990:	81 05       	cpc	r24, r1
    6992:	91 05       	cpc	r25, r1
    6994:	18 f4       	brcc	.+6      	; 0x699c <f_read+0xe6>
    6996:	82 e0       	ldi	r24, 0x02	; 2
    6998:	8d 83       	std	Y+5, r24	; 0x05
    699a:	b7 c0       	rjmp	.+366    	; 0x6b0a <f_read+0x254>
    699c:	6f 3f       	cpi	r22, 0xFF	; 255
    699e:	ff ef       	ldi	r31, 0xFF	; 255
    69a0:	7f 07       	cpc	r23, r31
    69a2:	8f 07       	cpc	r24, r31
    69a4:	9f 07       	cpc	r25, r31
    69a6:	19 f4       	brne	.+6      	; 0x69ae <f_read+0xf8>
    69a8:	81 e0       	ldi	r24, 0x01	; 1
    69aa:	8d 83       	std	Y+5, r24	; 0x05
    69ac:	ae c0       	rjmp	.+348    	; 0x6b0a <f_read+0x254>
    69ae:	6a 8b       	std	Y+18, r22	; 0x12
    69b0:	7b 8b       	std	Y+19, r23	; 0x13
    69b2:	8c 8b       	std	Y+20, r24	; 0x14
    69b4:	9d 8b       	std	Y+21, r25	; 0x15
    69b6:	28 80       	ld	r2, Y
    69b8:	39 80       	ldd	r3, Y+1	; 0x01
    69ba:	4a 89       	ldd	r20, Y+18	; 0x12
    69bc:	5b 89       	ldd	r21, Y+19	; 0x13
    69be:	6c 89       	ldd	r22, Y+20	; 0x14
    69c0:	7d 89       	ldd	r23, Y+21	; 0x15
    69c2:	c1 01       	movw	r24, r2
    69c4:	0e 94 88 2b 	call	0x5710	; 0x5710 <clust2sect>
    69c8:	61 15       	cp	r22, r1
    69ca:	71 05       	cpc	r23, r1
    69cc:	81 05       	cpc	r24, r1
    69ce:	91 05       	cpc	r25, r1
    69d0:	19 f4       	brne	.+6      	; 0x69d8 <f_read+0x122>
    69d2:	82 e0       	ldi	r24, 0x02	; 2
    69d4:	8d 83       	std	Y+5, r24	; 0x05
    69d6:	99 c0       	rjmp	.+306    	; 0x6b0a <f_read+0x254>
    69d8:	2b 01       	movw	r4, r22
    69da:	3c 01       	movw	r6, r24
    69dc:	41 0e       	add	r4, r17
    69de:	51 1c       	adc	r5, r1
    69e0:	61 1c       	adc	r6, r1
    69e2:	71 1c       	adc	r7, r1
    69e4:	47 01       	movw	r8, r14
    69e6:	89 2c       	mov	r8, r9
    69e8:	99 24       	eor	r9, r9
    69ea:	86 94       	lsr	r8
    69ec:	81 14       	cp	r8, r1
    69ee:	91 04       	cpc	r9, r1
    69f0:	09 f4       	brne	.+2      	; 0x69f4 <f_read+0x13e>
    69f2:	3e c0       	rjmp	.+124    	; 0x6a70 <f_read+0x1ba>
    69f4:	f1 01       	movw	r30, r2
    69f6:	42 81       	ldd	r20, Z+2	; 0x02
    69f8:	24 2f       	mov	r18, r20
    69fa:	30 e0       	ldi	r19, 0x00	; 0
    69fc:	c4 01       	movw	r24, r8
    69fe:	81 0f       	add	r24, r17
    6a00:	91 1d       	adc	r25, r1
    6a02:	28 17       	cp	r18, r24
    6a04:	39 07       	cpc	r19, r25
    6a06:	18 f4       	brcc	.+6      	; 0x6a0e <f_read+0x158>
    6a08:	49 01       	movw	r8, r18
    6a0a:	81 1a       	sub	r8, r17
    6a0c:	91 08       	sbc	r9, r1
    6a0e:	84 01       	movw	r16, r8
    6a10:	a3 01       	movw	r20, r6
    6a12:	92 01       	movw	r18, r4
    6a14:	b5 01       	movw	r22, r10
    6a16:	f1 01       	movw	r30, r2
    6a18:	81 81       	ldd	r24, Z+1	; 0x01
    6a1a:	13 d6       	rcall	.+3110   	; 0x7642 <disk_read>
    6a1c:	88 23       	and	r24, r24
    6a1e:	19 f0       	breq	.+6      	; 0x6a26 <f_read+0x170>
    6a20:	81 e0       	ldi	r24, 0x01	; 1
    6a22:	8d 83       	std	Y+5, r24	; 0x05
    6a24:	72 c0       	rjmp	.+228    	; 0x6b0a <f_read+0x254>
    6a26:	e8 81       	ld	r30, Y
    6a28:	f9 81       	ldd	r31, Y+1	; 0x01
    6a2a:	84 81       	ldd	r24, Z+4	; 0x04
    6a2c:	88 23       	and	r24, r24
    6a2e:	e1 f0       	breq	.+56     	; 0x6a68 <f_read+0x1b2>
    6a30:	86 a5       	ldd	r24, Z+46	; 0x2e
    6a32:	97 a5       	ldd	r25, Z+47	; 0x2f
    6a34:	a0 a9       	ldd	r26, Z+48	; 0x30
    6a36:	b1 a9       	ldd	r27, Z+49	; 0x31
    6a38:	84 19       	sub	r24, r4
    6a3a:	95 09       	sbc	r25, r5
    6a3c:	a6 09       	sbc	r26, r6
    6a3e:	b7 09       	sbc	r27, r7
    6a40:	a4 01       	movw	r20, r8
    6a42:	60 e0       	ldi	r22, 0x00	; 0
    6a44:	70 e0       	ldi	r23, 0x00	; 0
    6a46:	84 17       	cp	r24, r20
    6a48:	95 07       	cpc	r25, r21
    6a4a:	a6 07       	cpc	r26, r22
    6a4c:	b7 07       	cpc	r27, r23
    6a4e:	60 f4       	brcc	.+24     	; 0x6a68 <f_read+0x1b2>
    6a50:	bf 01       	movw	r22, r30
    6a52:	6e 5c       	subi	r22, 0xCE	; 206
    6a54:	7f 4f       	sbci	r23, 0xFF	; 255
    6a56:	98 2f       	mov	r25, r24
    6a58:	88 27       	eor	r24, r24
    6a5a:	99 0f       	add	r25, r25
    6a5c:	40 e0       	ldi	r20, 0x00	; 0
    6a5e:	52 e0       	ldi	r21, 0x02	; 2
    6a60:	8a 0d       	add	r24, r10
    6a62:	9b 1d       	adc	r25, r11
    6a64:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <mem_cpy>
    6a68:	98 2c       	mov	r9, r8
    6a6a:	88 24       	eor	r8, r8
    6a6c:	99 0c       	add	r9, r9
    6a6e:	2e c0       	rjmp	.+92     	; 0x6acc <f_read+0x216>
    6a70:	4e 8a       	std	Y+22, r4	; 0x16
    6a72:	5f 8a       	std	Y+23, r5	; 0x17
    6a74:	68 8e       	std	Y+24, r6	; 0x18
    6a76:	79 8e       	std	Y+25, r7	; 0x19
    6a78:	8e 81       	ldd	r24, Y+6	; 0x06
    6a7a:	9f 81       	ldd	r25, Y+7	; 0x07
    6a7c:	91 70       	andi	r25, 0x01	; 1
    6a7e:	20 e0       	ldi	r18, 0x00	; 0
    6a80:	32 e0       	ldi	r19, 0x02	; 2
    6a82:	28 1b       	sub	r18, r24
    6a84:	39 0b       	sbc	r19, r25
    6a86:	47 01       	movw	r8, r14
    6a88:	2e 15       	cp	r18, r14
    6a8a:	3f 05       	cpc	r19, r15
    6a8c:	08 f4       	brcc	.+2      	; 0x6a90 <f_read+0x1da>
    6a8e:	49 01       	movw	r8, r18
    6a90:	4e 89       	ldd	r20, Y+22	; 0x16
    6a92:	5f 89       	ldd	r21, Y+23	; 0x17
    6a94:	68 8d       	ldd	r22, Y+24	; 0x18
    6a96:	79 8d       	ldd	r23, Y+25	; 0x19
    6a98:	88 81       	ld	r24, Y
    6a9a:	99 81       	ldd	r25, Y+1	; 0x01
    6a9c:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <move_window>
    6aa0:	88 23       	and	r24, r24
    6aa2:	19 f0       	breq	.+6      	; 0x6aaa <f_read+0x1f4>
    6aa4:	81 e0       	ldi	r24, 0x01	; 1
    6aa6:	8d 83       	std	Y+5, r24	; 0x05
    6aa8:	30 c0       	rjmp	.+96     	; 0x6b0a <f_read+0x254>
    6aaa:	8e 81       	ldd	r24, Y+6	; 0x06
    6aac:	9f 81       	ldd	r25, Y+7	; 0x07
    6aae:	a8 85       	ldd	r26, Y+8	; 0x08
    6ab0:	b9 85       	ldd	r27, Y+9	; 0x09
    6ab2:	91 70       	andi	r25, 0x01	; 1
    6ab4:	aa 27       	eor	r26, r26
    6ab6:	bb 27       	eor	r27, r27
    6ab8:	c2 96       	adiw	r24, 0x32	; 50
    6aba:	28 81       	ld	r18, Y
    6abc:	39 81       	ldd	r19, Y+1	; 0x01
    6abe:	b9 01       	movw	r22, r18
    6ac0:	68 0f       	add	r22, r24
    6ac2:	79 1f       	adc	r23, r25
    6ac4:	a4 01       	movw	r20, r8
    6ac6:	c5 01       	movw	r24, r10
    6ac8:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <mem_cpy>
    6acc:	a8 0c       	add	r10, r8
    6ace:	b9 1c       	adc	r11, r9
    6ad0:	8e 81       	ldd	r24, Y+6	; 0x06
    6ad2:	9f 81       	ldd	r25, Y+7	; 0x07
    6ad4:	a8 85       	ldd	r26, Y+8	; 0x08
    6ad6:	b9 85       	ldd	r27, Y+9	; 0x09
    6ad8:	88 0d       	add	r24, r8
    6ada:	99 1d       	adc	r25, r9
    6adc:	a1 1d       	adc	r26, r1
    6ade:	b1 1d       	adc	r27, r1
    6ae0:	8e 83       	std	Y+6, r24	; 0x06
    6ae2:	9f 83       	std	Y+7, r25	; 0x07
    6ae4:	a8 87       	std	Y+8, r26	; 0x08
    6ae6:	b9 87       	std	Y+9, r27	; 0x09
    6ae8:	f6 01       	movw	r30, r12
    6aea:	80 81       	ld	r24, Z
    6aec:	91 81       	ldd	r25, Z+1	; 0x01
    6aee:	88 0d       	add	r24, r8
    6af0:	99 1d       	adc	r25, r9
    6af2:	80 83       	st	Z, r24
    6af4:	91 83       	std	Z+1, r25	; 0x01
    6af6:	e8 18       	sub	r14, r8
    6af8:	f9 08       	sbc	r15, r9
    6afa:	09 f0       	breq	.+2      	; 0x6afe <f_read+0x248>
    6afc:	18 cf       	rjmp	.-464    	; 0x692e <f_read+0x78>
    6afe:	04 c0       	rjmp	.+8      	; 0x6b08 <f_read+0x252>
    6b00:	87 e0       	ldi	r24, 0x07	; 7
    6b02:	03 c0       	rjmp	.+6      	; 0x6b0a <f_read+0x254>
    6b04:	80 e0       	ldi	r24, 0x00	; 0
    6b06:	01 c0       	rjmp	.+2      	; 0x6b0a <f_read+0x254>
    6b08:	80 e0       	ldi	r24, 0x00	; 0
    6b0a:	df 91       	pop	r29
    6b0c:	cf 91       	pop	r28
    6b0e:	1f 91       	pop	r17
    6b10:	0f 91       	pop	r16
    6b12:	ff 90       	pop	r15
    6b14:	ef 90       	pop	r14
    6b16:	df 90       	pop	r13
    6b18:	cf 90       	pop	r12
    6b1a:	bf 90       	pop	r11
    6b1c:	af 90       	pop	r10
    6b1e:	9f 90       	pop	r9
    6b20:	8f 90       	pop	r8
    6b22:	7f 90       	pop	r7
    6b24:	6f 90       	pop	r6
    6b26:	5f 90       	pop	r5
    6b28:	4f 90       	pop	r4
    6b2a:	3f 90       	pop	r3
    6b2c:	2f 90       	pop	r2
    6b2e:	08 95       	ret

00006b30 <f_write>:
    6b30:	2f 92       	push	r2
    6b32:	3f 92       	push	r3
    6b34:	4f 92       	push	r4
    6b36:	5f 92       	push	r5
    6b38:	6f 92       	push	r6
    6b3a:	7f 92       	push	r7
    6b3c:	8f 92       	push	r8
    6b3e:	9f 92       	push	r9
    6b40:	af 92       	push	r10
    6b42:	bf 92       	push	r11
    6b44:	cf 92       	push	r12
    6b46:	df 92       	push	r13
    6b48:	ef 92       	push	r14
    6b4a:	ff 92       	push	r15
    6b4c:	0f 93       	push	r16
    6b4e:	1f 93       	push	r17
    6b50:	cf 93       	push	r28
    6b52:	df 93       	push	r29
    6b54:	ec 01       	movw	r28, r24
    6b56:	5b 01       	movw	r10, r22
    6b58:	7a 01       	movw	r14, r20
    6b5a:	69 01       	movw	r12, r18
    6b5c:	f9 01       	movw	r30, r18
    6b5e:	10 82       	st	Z, r1
    6b60:	11 82       	std	Z+1, r1	; 0x01
    6b62:	0e 94 41 28 	call	0x5082	; 0x5082 <validate>
    6b66:	81 11       	cpse	r24, r1
    6b68:	6a c1       	rjmp	.+724    	; 0x6e3e <f_write+0x30e>
    6b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    6b6c:	81 11       	cpse	r24, r1
    6b6e:	67 c1       	rjmp	.+718    	; 0x6e3e <f_write+0x30e>
    6b70:	8c 81       	ldd	r24, Y+4	; 0x04
    6b72:	81 ff       	sbrs	r24, 1
    6b74:	63 c1       	rjmp	.+710    	; 0x6e3c <f_write+0x30c>
    6b76:	8e 81       	ldd	r24, Y+6	; 0x06
    6b78:	9f 81       	ldd	r25, Y+7	; 0x07
    6b7a:	a8 85       	ldd	r26, Y+8	; 0x08
    6b7c:	b9 85       	ldd	r27, Y+9	; 0x09
    6b7e:	ac 01       	movw	r20, r24
    6b80:	bd 01       	movw	r22, r26
    6b82:	4e 0d       	add	r20, r14
    6b84:	5f 1d       	adc	r21, r15
    6b86:	61 1d       	adc	r22, r1
    6b88:	71 1d       	adc	r23, r1
    6b8a:	48 17       	cp	r20, r24
    6b8c:	59 07       	cpc	r21, r25
    6b8e:	6a 07       	cpc	r22, r26
    6b90:	7b 07       	cpc	r23, r27
    6b92:	08 f4       	brcc	.+2      	; 0x6b96 <f_write+0x66>
    6b94:	3d c1       	rjmp	.+634    	; 0x6e10 <f_write+0x2e0>
    6b96:	e1 14       	cp	r14, r1
    6b98:	f1 04       	cpc	r15, r1
    6b9a:	09 f4       	brne	.+2      	; 0x6b9e <f_write+0x6e>
    6b9c:	39 c1       	rjmp	.+626    	; 0x6e10 <f_write+0x2e0>
    6b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    6ba0:	9f 81       	ldd	r25, Y+7	; 0x07
    6ba2:	a8 85       	ldd	r26, Y+8	; 0x08
    6ba4:	b9 85       	ldd	r27, Y+9	; 0x09
    6ba6:	ac 01       	movw	r20, r24
    6ba8:	bd 01       	movw	r22, r26
    6baa:	51 70       	andi	r21, 0x01	; 1
    6bac:	66 27       	eor	r22, r22
    6bae:	77 27       	eor	r23, r23
    6bb0:	45 2b       	or	r20, r21
    6bb2:	46 2b       	or	r20, r22
    6bb4:	47 2b       	or	r20, r23
    6bb6:	09 f0       	breq	.+2      	; 0x6bba <f_write+0x8a>
    6bb8:	e5 c0       	rjmp	.+458    	; 0x6d84 <f_write+0x254>
    6bba:	e8 81       	ld	r30, Y
    6bbc:	f9 81       	ldd	r31, Y+1	; 0x01
    6bbe:	12 81       	ldd	r17, Z+2	; 0x02
    6bc0:	11 50       	subi	r17, 0x01	; 1
    6bc2:	ac 01       	movw	r20, r24
    6bc4:	bd 01       	movw	r22, r26
    6bc6:	03 2e       	mov	r0, r19
    6bc8:	39 e0       	ldi	r19, 0x09	; 9
    6bca:	76 95       	lsr	r23
    6bcc:	67 95       	ror	r22
    6bce:	57 95       	ror	r21
    6bd0:	47 95       	ror	r20
    6bd2:	3a 95       	dec	r19
    6bd4:	d1 f7       	brne	.-12     	; 0x6bca <f_write+0x9a>
    6bd6:	30 2d       	mov	r19, r0
    6bd8:	14 23       	and	r17, r20
    6bda:	09 f0       	breq	.+2      	; 0x6bde <f_write+0xae>
    6bdc:	40 c0       	rjmp	.+128    	; 0x6c5e <f_write+0x12e>
    6bde:	89 2b       	or	r24, r25
    6be0:	8a 2b       	or	r24, r26
    6be2:	8b 2b       	or	r24, r27
    6be4:	79 f4       	brne	.+30     	; 0x6c04 <f_write+0xd4>
    6be6:	6e 85       	ldd	r22, Y+14	; 0x0e
    6be8:	7f 85       	ldd	r23, Y+15	; 0x0f
    6bea:	88 89       	ldd	r24, Y+16	; 0x10
    6bec:	99 89       	ldd	r25, Y+17	; 0x11
    6bee:	61 15       	cp	r22, r1
    6bf0:	71 05       	cpc	r23, r1
    6bf2:	81 05       	cpc	r24, r1
    6bf4:	91 05       	cpc	r25, r1
    6bf6:	91 f4       	brne	.+36     	; 0x6c1c <f_write+0xec>
    6bf8:	40 e0       	ldi	r20, 0x00	; 0
    6bfa:	50 e0       	ldi	r21, 0x00	; 0
    6bfc:	ba 01       	movw	r22, r20
    6bfe:	cf 01       	movw	r24, r30
    6c00:	5e d8       	rcall	.-3908   	; 0x5cbe <create_chain>
    6c02:	06 c0       	rjmp	.+12     	; 0x6c10 <f_write+0xe0>
    6c04:	4a 89       	ldd	r20, Y+18	; 0x12
    6c06:	5b 89       	ldd	r21, Y+19	; 0x13
    6c08:	6c 89       	ldd	r22, Y+20	; 0x14
    6c0a:	7d 89       	ldd	r23, Y+21	; 0x15
    6c0c:	cf 01       	movw	r24, r30
    6c0e:	57 d8       	rcall	.-3922   	; 0x5cbe <create_chain>
    6c10:	61 15       	cp	r22, r1
    6c12:	71 05       	cpc	r23, r1
    6c14:	81 05       	cpc	r24, r1
    6c16:	91 05       	cpc	r25, r1
    6c18:	09 f4       	brne	.+2      	; 0x6c1c <f_write+0xec>
    6c1a:	fa c0       	rjmp	.+500    	; 0x6e10 <f_write+0x2e0>
    6c1c:	61 30       	cpi	r22, 0x01	; 1
    6c1e:	71 05       	cpc	r23, r1
    6c20:	81 05       	cpc	r24, r1
    6c22:	91 05       	cpc	r25, r1
    6c24:	19 f4       	brne	.+6      	; 0x6c2c <f_write+0xfc>
    6c26:	82 e0       	ldi	r24, 0x02	; 2
    6c28:	8d 83       	std	Y+5, r24	; 0x05
    6c2a:	09 c1       	rjmp	.+530    	; 0x6e3e <f_write+0x30e>
    6c2c:	6f 3f       	cpi	r22, 0xFF	; 255
    6c2e:	ff ef       	ldi	r31, 0xFF	; 255
    6c30:	7f 07       	cpc	r23, r31
    6c32:	8f 07       	cpc	r24, r31
    6c34:	9f 07       	cpc	r25, r31
    6c36:	19 f4       	brne	.+6      	; 0x6c3e <f_write+0x10e>
    6c38:	81 e0       	ldi	r24, 0x01	; 1
    6c3a:	8d 83       	std	Y+5, r24	; 0x05
    6c3c:	00 c1       	rjmp	.+512    	; 0x6e3e <f_write+0x30e>
    6c3e:	6a 8b       	std	Y+18, r22	; 0x12
    6c40:	7b 8b       	std	Y+19, r23	; 0x13
    6c42:	8c 8b       	std	Y+20, r24	; 0x14
    6c44:	9d 8b       	std	Y+21, r25	; 0x15
    6c46:	4e 84       	ldd	r4, Y+14	; 0x0e
    6c48:	5f 84       	ldd	r5, Y+15	; 0x0f
    6c4a:	68 88       	ldd	r6, Y+16	; 0x10
    6c4c:	79 88       	ldd	r7, Y+17	; 0x11
    6c4e:	45 28       	or	r4, r5
    6c50:	46 28       	or	r4, r6
    6c52:	47 28       	or	r4, r7
    6c54:	21 f4       	brne	.+8      	; 0x6c5e <f_write+0x12e>
    6c56:	6e 87       	std	Y+14, r22	; 0x0e
    6c58:	7f 87       	std	Y+15, r23	; 0x0f
    6c5a:	88 8b       	std	Y+16, r24	; 0x10
    6c5c:	99 8b       	std	Y+17, r25	; 0x11
    6c5e:	e8 81       	ld	r30, Y
    6c60:	f9 81       	ldd	r31, Y+1	; 0x01
    6c62:	86 a5       	ldd	r24, Z+46	; 0x2e
    6c64:	97 a5       	ldd	r25, Z+47	; 0x2f
    6c66:	a0 a9       	ldd	r26, Z+48	; 0x30
    6c68:	b1 a9       	ldd	r27, Z+49	; 0x31
    6c6a:	4e 89       	ldd	r20, Y+22	; 0x16
    6c6c:	5f 89       	ldd	r21, Y+23	; 0x17
    6c6e:	68 8d       	ldd	r22, Y+24	; 0x18
    6c70:	79 8d       	ldd	r23, Y+25	; 0x19
    6c72:	84 17       	cp	r24, r20
    6c74:	95 07       	cpc	r25, r21
    6c76:	a6 07       	cpc	r26, r22
    6c78:	b7 07       	cpc	r27, r23
    6c7a:	41 f4       	brne	.+16     	; 0x6c8c <f_write+0x15c>
    6c7c:	cf 01       	movw	r24, r30
    6c7e:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <sync_window>
    6c82:	88 23       	and	r24, r24
    6c84:	19 f0       	breq	.+6      	; 0x6c8c <f_write+0x15c>
    6c86:	81 e0       	ldi	r24, 0x01	; 1
    6c88:	8d 83       	std	Y+5, r24	; 0x05
    6c8a:	d9 c0       	rjmp	.+434    	; 0x6e3e <f_write+0x30e>
    6c8c:	28 80       	ld	r2, Y
    6c8e:	39 80       	ldd	r3, Y+1	; 0x01
    6c90:	4a 89       	ldd	r20, Y+18	; 0x12
    6c92:	5b 89       	ldd	r21, Y+19	; 0x13
    6c94:	6c 89       	ldd	r22, Y+20	; 0x14
    6c96:	7d 89       	ldd	r23, Y+21	; 0x15
    6c98:	c1 01       	movw	r24, r2
    6c9a:	0e 94 88 2b 	call	0x5710	; 0x5710 <clust2sect>
    6c9e:	61 15       	cp	r22, r1
    6ca0:	71 05       	cpc	r23, r1
    6ca2:	81 05       	cpc	r24, r1
    6ca4:	91 05       	cpc	r25, r1
    6ca6:	19 f4       	brne	.+6      	; 0x6cae <f_write+0x17e>
    6ca8:	82 e0       	ldi	r24, 0x02	; 2
    6caa:	8d 83       	std	Y+5, r24	; 0x05
    6cac:	c8 c0       	rjmp	.+400    	; 0x6e3e <f_write+0x30e>
    6cae:	2b 01       	movw	r4, r22
    6cb0:	3c 01       	movw	r6, r24
    6cb2:	41 0e       	add	r4, r17
    6cb4:	51 1c       	adc	r5, r1
    6cb6:	61 1c       	adc	r6, r1
    6cb8:	71 1c       	adc	r7, r1
    6cba:	47 01       	movw	r8, r14
    6cbc:	89 2c       	mov	r8, r9
    6cbe:	99 24       	eor	r9, r9
    6cc0:	86 94       	lsr	r8
    6cc2:	81 14       	cp	r8, r1
    6cc4:	91 04       	cpc	r9, r1
    6cc6:	09 f4       	brne	.+2      	; 0x6cca <f_write+0x19a>
    6cc8:	3e c0       	rjmp	.+124    	; 0x6d46 <f_write+0x216>
    6cca:	f1 01       	movw	r30, r2
    6ccc:	42 81       	ldd	r20, Z+2	; 0x02
    6cce:	24 2f       	mov	r18, r20
    6cd0:	30 e0       	ldi	r19, 0x00	; 0
    6cd2:	c4 01       	movw	r24, r8
    6cd4:	81 0f       	add	r24, r17
    6cd6:	91 1d       	adc	r25, r1
    6cd8:	28 17       	cp	r18, r24
    6cda:	39 07       	cpc	r19, r25
    6cdc:	18 f4       	brcc	.+6      	; 0x6ce4 <f_write+0x1b4>
    6cde:	49 01       	movw	r8, r18
    6ce0:	81 1a       	sub	r8, r17
    6ce2:	91 08       	sbc	r9, r1
    6ce4:	84 01       	movw	r16, r8
    6ce6:	a3 01       	movw	r20, r6
    6ce8:	92 01       	movw	r18, r4
    6cea:	b5 01       	movw	r22, r10
    6cec:	f1 01       	movw	r30, r2
    6cee:	81 81       	ldd	r24, Z+1	; 0x01
    6cf0:	fc d4       	rcall	.+2552   	; 0x76ea <disk_write>
    6cf2:	88 23       	and	r24, r24
    6cf4:	19 f0       	breq	.+6      	; 0x6cfc <f_write+0x1cc>
    6cf6:	81 e0       	ldi	r24, 0x01	; 1
    6cf8:	8d 83       	std	Y+5, r24	; 0x05
    6cfa:	a1 c0       	rjmp	.+322    	; 0x6e3e <f_write+0x30e>
    6cfc:	e8 81       	ld	r30, Y
    6cfe:	f9 81       	ldd	r31, Y+1	; 0x01
    6d00:	86 a5       	ldd	r24, Z+46	; 0x2e
    6d02:	97 a5       	ldd	r25, Z+47	; 0x2f
    6d04:	a0 a9       	ldd	r26, Z+48	; 0x30
    6d06:	b1 a9       	ldd	r27, Z+49	; 0x31
    6d08:	84 19       	sub	r24, r4
    6d0a:	95 09       	sbc	r25, r5
    6d0c:	a6 09       	sbc	r26, r6
    6d0e:	b7 09       	sbc	r27, r7
    6d10:	a4 01       	movw	r20, r8
    6d12:	60 e0       	ldi	r22, 0x00	; 0
    6d14:	70 e0       	ldi	r23, 0x00	; 0
    6d16:	84 17       	cp	r24, r20
    6d18:	95 07       	cpc	r25, r21
    6d1a:	a6 07       	cpc	r26, r22
    6d1c:	b7 07       	cpc	r27, r23
    6d1e:	78 f4       	brcc	.+30     	; 0x6d3e <f_write+0x20e>
    6d20:	98 2f       	mov	r25, r24
    6d22:	88 27       	eor	r24, r24
    6d24:	99 0f       	add	r25, r25
    6d26:	b5 01       	movw	r22, r10
    6d28:	68 0f       	add	r22, r24
    6d2a:	79 1f       	adc	r23, r25
    6d2c:	40 e0       	ldi	r20, 0x00	; 0
    6d2e:	52 e0       	ldi	r21, 0x02	; 2
    6d30:	cf 01       	movw	r24, r30
    6d32:	c2 96       	adiw	r24, 0x32	; 50
    6d34:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <mem_cpy>
    6d38:	e8 81       	ld	r30, Y
    6d3a:	f9 81       	ldd	r31, Y+1	; 0x01
    6d3c:	14 82       	std	Z+4, r1	; 0x04
    6d3e:	98 2c       	mov	r9, r8
    6d40:	88 24       	eor	r8, r8
    6d42:	99 0c       	add	r9, r9
    6d44:	4c c0       	rjmp	.+152    	; 0x6dde <f_write+0x2ae>
    6d46:	4e 81       	ldd	r20, Y+6	; 0x06
    6d48:	5f 81       	ldd	r21, Y+7	; 0x07
    6d4a:	68 85       	ldd	r22, Y+8	; 0x08
    6d4c:	79 85       	ldd	r23, Y+9	; 0x09
    6d4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6d50:	9b 85       	ldd	r25, Y+11	; 0x0b
    6d52:	ac 85       	ldd	r26, Y+12	; 0x0c
    6d54:	bd 85       	ldd	r27, Y+13	; 0x0d
    6d56:	48 17       	cp	r20, r24
    6d58:	59 07       	cpc	r21, r25
    6d5a:	6a 07       	cpc	r22, r26
    6d5c:	7b 07       	cpc	r23, r27
    6d5e:	70 f0       	brcs	.+28     	; 0x6d7c <f_write+0x24c>
    6d60:	c1 01       	movw	r24, r2
    6d62:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <sync_window>
    6d66:	88 23       	and	r24, r24
    6d68:	19 f0       	breq	.+6      	; 0x6d70 <f_write+0x240>
    6d6a:	81 e0       	ldi	r24, 0x01	; 1
    6d6c:	8d 83       	std	Y+5, r24	; 0x05
    6d6e:	67 c0       	rjmp	.+206    	; 0x6e3e <f_write+0x30e>
    6d70:	e8 81       	ld	r30, Y
    6d72:	f9 81       	ldd	r31, Y+1	; 0x01
    6d74:	46 a6       	std	Z+46, r4	; 0x2e
    6d76:	57 a6       	std	Z+47, r5	; 0x2f
    6d78:	60 aa       	std	Z+48, r6	; 0x30
    6d7a:	71 aa       	std	Z+49, r7	; 0x31
    6d7c:	4e 8a       	std	Y+22, r4	; 0x16
    6d7e:	5f 8a       	std	Y+23, r5	; 0x17
    6d80:	68 8e       	std	Y+24, r6	; 0x18
    6d82:	79 8e       	std	Y+25, r7	; 0x19
    6d84:	8e 81       	ldd	r24, Y+6	; 0x06
    6d86:	9f 81       	ldd	r25, Y+7	; 0x07
    6d88:	91 70       	andi	r25, 0x01	; 1
    6d8a:	20 e0       	ldi	r18, 0x00	; 0
    6d8c:	32 e0       	ldi	r19, 0x02	; 2
    6d8e:	28 1b       	sub	r18, r24
    6d90:	39 0b       	sbc	r19, r25
    6d92:	47 01       	movw	r8, r14
    6d94:	2e 15       	cp	r18, r14
    6d96:	3f 05       	cpc	r19, r15
    6d98:	08 f4       	brcc	.+2      	; 0x6d9c <f_write+0x26c>
    6d9a:	49 01       	movw	r8, r18
    6d9c:	4e 89       	ldd	r20, Y+22	; 0x16
    6d9e:	5f 89       	ldd	r21, Y+23	; 0x17
    6da0:	68 8d       	ldd	r22, Y+24	; 0x18
    6da2:	79 8d       	ldd	r23, Y+25	; 0x19
    6da4:	88 81       	ld	r24, Y
    6da6:	99 81       	ldd	r25, Y+1	; 0x01
    6da8:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <move_window>
    6dac:	88 23       	and	r24, r24
    6dae:	19 f0       	breq	.+6      	; 0x6db6 <f_write+0x286>
    6db0:	81 e0       	ldi	r24, 0x01	; 1
    6db2:	8d 83       	std	Y+5, r24	; 0x05
    6db4:	44 c0       	rjmp	.+136    	; 0x6e3e <f_write+0x30e>
    6db6:	8e 81       	ldd	r24, Y+6	; 0x06
    6db8:	9f 81       	ldd	r25, Y+7	; 0x07
    6dba:	a8 85       	ldd	r26, Y+8	; 0x08
    6dbc:	b9 85       	ldd	r27, Y+9	; 0x09
    6dbe:	91 70       	andi	r25, 0x01	; 1
    6dc0:	aa 27       	eor	r26, r26
    6dc2:	bb 27       	eor	r27, r27
    6dc4:	c2 96       	adiw	r24, 0x32	; 50
    6dc6:	28 81       	ld	r18, Y
    6dc8:	39 81       	ldd	r19, Y+1	; 0x01
    6dca:	a4 01       	movw	r20, r8
    6dcc:	b5 01       	movw	r22, r10
    6dce:	82 0f       	add	r24, r18
    6dd0:	93 1f       	adc	r25, r19
    6dd2:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <mem_cpy>
    6dd6:	e8 81       	ld	r30, Y
    6dd8:	f9 81       	ldd	r31, Y+1	; 0x01
    6dda:	31 e0       	ldi	r19, 0x01	; 1
    6ddc:	34 83       	std	Z+4, r19	; 0x04
    6dde:	a8 0c       	add	r10, r8
    6de0:	b9 1c       	adc	r11, r9
    6de2:	8e 81       	ldd	r24, Y+6	; 0x06
    6de4:	9f 81       	ldd	r25, Y+7	; 0x07
    6de6:	a8 85       	ldd	r26, Y+8	; 0x08
    6de8:	b9 85       	ldd	r27, Y+9	; 0x09
    6dea:	88 0d       	add	r24, r8
    6dec:	99 1d       	adc	r25, r9
    6dee:	a1 1d       	adc	r26, r1
    6df0:	b1 1d       	adc	r27, r1
    6df2:	8e 83       	std	Y+6, r24	; 0x06
    6df4:	9f 83       	std	Y+7, r25	; 0x07
    6df6:	a8 87       	std	Y+8, r26	; 0x08
    6df8:	b9 87       	std	Y+9, r27	; 0x09
    6dfa:	f6 01       	movw	r30, r12
    6dfc:	80 81       	ld	r24, Z
    6dfe:	91 81       	ldd	r25, Z+1	; 0x01
    6e00:	88 0d       	add	r24, r8
    6e02:	99 1d       	adc	r25, r9
    6e04:	80 83       	st	Z, r24
    6e06:	91 83       	std	Z+1, r25	; 0x01
    6e08:	e8 18       	sub	r14, r8
    6e0a:	f9 08       	sbc	r15, r9
    6e0c:	09 f0       	breq	.+2      	; 0x6e10 <f_write+0x2e0>
    6e0e:	c7 ce       	rjmp	.-626    	; 0x6b9e <f_write+0x6e>
    6e10:	8e 81       	ldd	r24, Y+6	; 0x06
    6e12:	9f 81       	ldd	r25, Y+7	; 0x07
    6e14:	a8 85       	ldd	r26, Y+8	; 0x08
    6e16:	b9 85       	ldd	r27, Y+9	; 0x09
    6e18:	4a 85       	ldd	r20, Y+10	; 0x0a
    6e1a:	5b 85       	ldd	r21, Y+11	; 0x0b
    6e1c:	6c 85       	ldd	r22, Y+12	; 0x0c
    6e1e:	7d 85       	ldd	r23, Y+13	; 0x0d
    6e20:	48 17       	cp	r20, r24
    6e22:	59 07       	cpc	r21, r25
    6e24:	6a 07       	cpc	r22, r26
    6e26:	7b 07       	cpc	r23, r27
    6e28:	20 f4       	brcc	.+8      	; 0x6e32 <f_write+0x302>
    6e2a:	8a 87       	std	Y+10, r24	; 0x0a
    6e2c:	9b 87       	std	Y+11, r25	; 0x0b
    6e2e:	ac 87       	std	Y+12, r26	; 0x0c
    6e30:	bd 87       	std	Y+13, r27	; 0x0d
    6e32:	8c 81       	ldd	r24, Y+4	; 0x04
    6e34:	80 62       	ori	r24, 0x20	; 32
    6e36:	8c 83       	std	Y+4, r24	; 0x04
    6e38:	80 e0       	ldi	r24, 0x00	; 0
    6e3a:	01 c0       	rjmp	.+2      	; 0x6e3e <f_write+0x30e>
    6e3c:	87 e0       	ldi	r24, 0x07	; 7
    6e3e:	df 91       	pop	r29
    6e40:	cf 91       	pop	r28
    6e42:	1f 91       	pop	r17
    6e44:	0f 91       	pop	r16
    6e46:	ff 90       	pop	r15
    6e48:	ef 90       	pop	r14
    6e4a:	df 90       	pop	r13
    6e4c:	cf 90       	pop	r12
    6e4e:	bf 90       	pop	r11
    6e50:	af 90       	pop	r10
    6e52:	9f 90       	pop	r9
    6e54:	8f 90       	pop	r8
    6e56:	7f 90       	pop	r7
    6e58:	6f 90       	pop	r6
    6e5a:	5f 90       	pop	r5
    6e5c:	4f 90       	pop	r4
    6e5e:	3f 90       	pop	r3
    6e60:	2f 90       	pop	r2
    6e62:	08 95       	ret

00006e64 <f_sync>:
    6e64:	cf 93       	push	r28
    6e66:	df 93       	push	r29
    6e68:	ec 01       	movw	r28, r24
    6e6a:	0e 94 41 28 	call	0x5082	; 0x5082 <validate>
    6e6e:	81 11       	cpse	r24, r1
    6e70:	37 c0       	rjmp	.+110    	; 0x6ee0 <f_sync+0x7c>
    6e72:	9c 81       	ldd	r25, Y+4	; 0x04
    6e74:	95 ff       	sbrs	r25, 5
    6e76:	34 c0       	rjmp	.+104    	; 0x6ee0 <f_sync+0x7c>
    6e78:	4a 8d       	ldd	r20, Y+26	; 0x1a
    6e7a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    6e7c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    6e7e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    6e80:	88 81       	ld	r24, Y
    6e82:	99 81       	ldd	r25, Y+1	; 0x01
    6e84:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <move_window>
    6e88:	81 11       	cpse	r24, r1
    6e8a:	2a c0       	rjmp	.+84     	; 0x6ee0 <f_sync+0x7c>
    6e8c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    6e8e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    6e90:	83 85       	ldd	r24, Z+11	; 0x0b
    6e92:	80 62       	ori	r24, 0x20	; 32
    6e94:	83 87       	std	Z+11, r24	; 0x0b
    6e96:	4a 85       	ldd	r20, Y+10	; 0x0a
    6e98:	5b 85       	ldd	r21, Y+11	; 0x0b
    6e9a:	6c 85       	ldd	r22, Y+12	; 0x0c
    6e9c:	7d 85       	ldd	r23, Y+13	; 0x0d
    6e9e:	44 8f       	std	Z+28, r20	; 0x1c
    6ea0:	55 8f       	std	Z+29, r21	; 0x1d
    6ea2:	66 8f       	std	Z+30, r22	; 0x1e
    6ea4:	77 8f       	std	Z+31, r23	; 0x1f
    6ea6:	4e 85       	ldd	r20, Y+14	; 0x0e
    6ea8:	5f 85       	ldd	r21, Y+15	; 0x0f
    6eaa:	68 89       	ldd	r22, Y+16	; 0x10
    6eac:	79 89       	ldd	r23, Y+17	; 0x11
    6eae:	42 8f       	std	Z+26, r20	; 0x1a
    6eb0:	53 8f       	std	Z+27, r21	; 0x1b
    6eb2:	64 8b       	std	Z+20, r22	; 0x14
    6eb4:	75 8b       	std	Z+21, r23	; 0x15
    6eb6:	40 e0       	ldi	r20, 0x00	; 0
    6eb8:	50 e0       	ldi	r21, 0x00	; 0
    6eba:	61 e2       	ldi	r22, 0x21	; 33
    6ebc:	76 e4       	ldi	r23, 0x46	; 70
    6ebe:	46 8b       	std	Z+22, r20	; 0x16
    6ec0:	57 8b       	std	Z+23, r21	; 0x17
    6ec2:	60 8f       	std	Z+24, r22	; 0x18
    6ec4:	71 8f       	std	Z+25, r23	; 0x19
    6ec6:	12 8a       	std	Z+18, r1	; 0x12
    6ec8:	13 8a       	std	Z+19, r1	; 0x13
    6eca:	8c 81       	ldd	r24, Y+4	; 0x04
    6ecc:	8f 7d       	andi	r24, 0xDF	; 223
    6ece:	8c 83       	std	Y+4, r24	; 0x04
    6ed0:	e8 81       	ld	r30, Y
    6ed2:	f9 81       	ldd	r31, Y+1	; 0x01
    6ed4:	81 e0       	ldi	r24, 0x01	; 1
    6ed6:	84 83       	std	Z+4, r24	; 0x04
    6ed8:	88 81       	ld	r24, Y
    6eda:	99 81       	ldd	r25, Y+1	; 0x01
    6edc:	0e 94 1a 2b 	call	0x5634	; 0x5634 <sync_fs>
    6ee0:	df 91       	pop	r29
    6ee2:	cf 91       	pop	r28
    6ee4:	08 95       	ret

00006ee6 <f_close>:
    6ee6:	cf 93       	push	r28
    6ee8:	df 93       	push	r29
    6eea:	ec 01       	movw	r28, r24
    6eec:	bb df       	rcall	.-138    	; 0x6e64 <f_sync>
    6eee:	81 11       	cpse	r24, r1
    6ef0:	07 c0       	rjmp	.+14     	; 0x6f00 <f_close+0x1a>
    6ef2:	ce 01       	movw	r24, r28
    6ef4:	0e 94 41 28 	call	0x5082	; 0x5082 <validate>
    6ef8:	81 11       	cpse	r24, r1
    6efa:	02 c0       	rjmp	.+4      	; 0x6f00 <f_close+0x1a>
    6efc:	18 82       	st	Y, r1
    6efe:	19 82       	std	Y+1, r1	; 0x01
    6f00:	df 91       	pop	r29
    6f02:	cf 91       	pop	r28
    6f04:	08 95       	ret

00006f06 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    6f06:	2f 92       	push	r2
    6f08:	3f 92       	push	r3
    6f0a:	4f 92       	push	r4
    6f0c:	5f 92       	push	r5
    6f0e:	6f 92       	push	r6
    6f10:	7f 92       	push	r7
    6f12:	8f 92       	push	r8
    6f14:	9f 92       	push	r9
    6f16:	af 92       	push	r10
    6f18:	bf 92       	push	r11
    6f1a:	cf 92       	push	r12
    6f1c:	df 92       	push	r13
    6f1e:	ef 92       	push	r14
    6f20:	ff 92       	push	r15
    6f22:	0f 93       	push	r16
    6f24:	1f 93       	push	r17
    6f26:	cf 93       	push	r28
    6f28:	df 93       	push	r29
    6f2a:	00 d0       	rcall	.+0      	; 0x6f2c <f_lseek+0x26>
    6f2c:	00 d0       	rcall	.+0      	; 0x6f2e <f_lseek+0x28>
    6f2e:	cd b7       	in	r28, 0x3d	; 61
    6f30:	de b7       	in	r29, 0x3e	; 62
    6f32:	1c 01       	movw	r2, r24
    6f34:	6a 01       	movw	r12, r20
    6f36:	7b 01       	movw	r14, r22
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
    6f38:	0e 94 41 28 	call	0x5082	; 0x5082 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    6f3c:	81 11       	cpse	r24, r1
    6f3e:	8c c1       	rjmp	.+792    	; 0x7258 <f_lseek+0x352>
	if (fp->err)						/* Check error */
    6f40:	d1 01       	movw	r26, r2
    6f42:	15 96       	adiw	r26, 0x05	; 5
    6f44:	8c 91       	ld	r24, X
    6f46:	15 97       	sbiw	r26, 0x05	; 5
    6f48:	81 11       	cpse	r24, r1
    6f4a:	86 c1       	rjmp	.+780    	; 0x7258 <f_lseek+0x352>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    6f4c:	1a 96       	adiw	r26, 0x0a	; 10
    6f4e:	8d 91       	ld	r24, X+
    6f50:	9d 91       	ld	r25, X+
    6f52:	0d 90       	ld	r0, X+
    6f54:	bc 91       	ld	r27, X
    6f56:	a0 2d       	mov	r26, r0
    6f58:	8c 15       	cp	r24, r12
    6f5a:	9d 05       	cpc	r25, r13
    6f5c:	ae 05       	cpc	r26, r14
    6f5e:	bf 05       	cpc	r27, r15
    6f60:	30 f4       	brcc	.+12     	; 0x6f6e <f_lseek+0x68>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    6f62:	f1 01       	movw	r30, r2
    6f64:	24 81       	ldd	r18, Z+4	; 0x04
    6f66:	21 fd       	sbrc	r18, 1
    6f68:	02 c0       	rjmp	.+4      	; 0x6f6e <f_lseek+0x68>
#endif
			) ofs = fp->fsize;
    6f6a:	6c 01       	movw	r12, r24
    6f6c:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    6f6e:	d1 01       	movw	r26, r2
    6f70:	16 96       	adiw	r26, 0x06	; 6
    6f72:	4d 90       	ld	r4, X+
    6f74:	5d 90       	ld	r5, X+
    6f76:	6d 90       	ld	r6, X+
    6f78:	7c 90       	ld	r7, X
    6f7a:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    6f7c:	f1 01       	movw	r30, r2
    6f7e:	16 82       	std	Z+6, r1	; 0x06
    6f80:	17 82       	std	Z+7, r1	; 0x07
    6f82:	10 86       	std	Z+8, r1	; 0x08
    6f84:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    6f86:	c1 14       	cp	r12, r1
    6f88:	d1 04       	cpc	r13, r1
    6f8a:	e1 04       	cpc	r14, r1
    6f8c:	f1 04       	cpc	r15, r1
    6f8e:	09 f4       	brne	.+2      	; 0x6f92 <f_lseek+0x8c>
    6f90:	60 c1       	rjmp	.+704    	; 0x7252 <f_lseek+0x34c>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    6f92:	00 81       	ld	r16, Z
    6f94:	11 81       	ldd	r17, Z+1	; 0x01
    6f96:	d8 01       	movw	r26, r16
    6f98:	12 96       	adiw	r26, 0x02	; 2
    6f9a:	8c 90       	ld	r8, X
    6f9c:	91 2c       	mov	r9, r1
    6f9e:	a1 2c       	mov	r10, r1
    6fa0:	b1 2c       	mov	r11, r1
    6fa2:	07 2e       	mov	r0, r23
    6fa4:	79 e0       	ldi	r23, 0x09	; 9
    6fa6:	88 0c       	add	r8, r8
    6fa8:	99 1c       	adc	r9, r9
    6faa:	aa 1c       	adc	r10, r10
    6fac:	bb 1c       	adc	r11, r11
    6fae:	7a 95       	dec	r23
    6fb0:	d1 f7       	brne	.-12     	; 0x6fa6 <f_lseek+0xa0>
    6fb2:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    6fb4:	41 14       	cp	r4, r1
    6fb6:	51 04       	cpc	r5, r1
    6fb8:	61 04       	cpc	r6, r1
    6fba:	71 04       	cpc	r7, r1
    6fbc:	09 f4       	brne	.+2      	; 0x6fc0 <f_lseek+0xba>
    6fbe:	3f c0       	rjmp	.+126    	; 0x703e <f_lseek+0x138>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    6fc0:	b1 e0       	ldi	r27, 0x01	; 1
    6fc2:	4b 1a       	sub	r4, r27
    6fc4:	51 08       	sbc	r5, r1
    6fc6:	61 08       	sbc	r6, r1
    6fc8:	71 08       	sbc	r7, r1
    6fca:	c7 01       	movw	r24, r14
    6fcc:	b6 01       	movw	r22, r12
    6fce:	61 50       	subi	r22, 0x01	; 1
    6fd0:	71 09       	sbc	r23, r1
    6fd2:	81 09       	sbc	r24, r1
    6fd4:	91 09       	sbc	r25, r1
    6fd6:	a5 01       	movw	r20, r10
    6fd8:	94 01       	movw	r18, r8
    6fda:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>
    6fde:	29 83       	std	Y+1, r18	; 0x01
    6fe0:	3a 83       	std	Y+2, r19	; 0x02
    6fe2:	4b 83       	std	Y+3, r20	; 0x03
    6fe4:	5c 83       	std	Y+4, r21	; 0x04
    6fe6:	c3 01       	movw	r24, r6
    6fe8:	b2 01       	movw	r22, r4
    6fea:	a5 01       	movw	r20, r10
    6fec:	94 01       	movw	r18, r8
    6fee:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    6ff2:	89 81       	ldd	r24, Y+1	; 0x01
    6ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    6ff6:	ab 81       	ldd	r26, Y+3	; 0x03
    6ff8:	bc 81       	ldd	r27, Y+4	; 0x04
    6ffa:	82 17       	cp	r24, r18
    6ffc:	93 07       	cpc	r25, r19
    6ffe:	a4 07       	cpc	r26, r20
    7000:	b5 07       	cpc	r27, r21
    7002:	e8 f0       	brcs	.+58     	; 0x703e <f_lseek+0x138>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    7004:	88 27       	eor	r24, r24
    7006:	99 27       	eor	r25, r25
    7008:	dc 01       	movw	r26, r24
    700a:	88 19       	sub	r24, r8
    700c:	99 09       	sbc	r25, r9
    700e:	aa 09       	sbc	r26, r10
    7010:	bb 09       	sbc	r27, r11
    7012:	48 22       	and	r4, r24
    7014:	59 22       	and	r5, r25
    7016:	6a 22       	and	r6, r26
    7018:	7b 22       	and	r7, r27
    701a:	d1 01       	movw	r26, r2
    701c:	16 96       	adiw	r26, 0x06	; 6
    701e:	4d 92       	st	X+, r4
    7020:	5d 92       	st	X+, r5
    7022:	6d 92       	st	X+, r6
    7024:	7c 92       	st	X, r7
    7026:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    7028:	c4 18       	sub	r12, r4
    702a:	d5 08       	sbc	r13, r5
    702c:	e6 08       	sbc	r14, r6
    702e:	f7 08       	sbc	r15, r7
				clst = fp->clust;
    7030:	52 96       	adiw	r26, 0x12	; 18
    7032:	6d 91       	ld	r22, X+
    7034:	7d 91       	ld	r23, X+
    7036:	8d 91       	ld	r24, X+
    7038:	9c 91       	ld	r25, X
    703a:	55 97       	sbiw	r26, 0x15	; 21
    703c:	30 c0       	rjmp	.+96     	; 0x709e <f_lseek+0x198>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    703e:	f1 01       	movw	r30, r2
    7040:	66 85       	ldd	r22, Z+14	; 0x0e
    7042:	77 85       	ldd	r23, Z+15	; 0x0f
    7044:	80 89       	ldd	r24, Z+16	; 0x10
    7046:	91 89       	ldd	r25, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    7048:	61 15       	cp	r22, r1
    704a:	71 05       	cpc	r23, r1
    704c:	81 05       	cpc	r24, r1
    704e:	91 05       	cpc	r25, r1
    7050:	09 f5       	brne	.+66     	; 0x7094 <f_lseek+0x18e>
					clst = create_chain(fp->fs, 0);
    7052:	40 e0       	ldi	r20, 0x00	; 0
    7054:	50 e0       	ldi	r21, 0x00	; 0
    7056:	ba 01       	movw	r22, r20
    7058:	c8 01       	movw	r24, r16
    705a:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    705e:	61 30       	cpi	r22, 0x01	; 1
    7060:	71 05       	cpc	r23, r1
    7062:	81 05       	cpc	r24, r1
    7064:	91 05       	cpc	r25, r1
    7066:	29 f4       	brne	.+10     	; 0x7072 <f_lseek+0x16c>
    7068:	82 e0       	ldi	r24, 0x02	; 2
    706a:	d1 01       	movw	r26, r2
    706c:	15 96       	adiw	r26, 0x05	; 5
    706e:	8c 93       	st	X, r24
    7070:	f3 c0       	rjmp	.+486    	; 0x7258 <f_lseek+0x352>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    7072:	6f 3f       	cpi	r22, 0xFF	; 255
    7074:	bf ef       	ldi	r27, 0xFF	; 255
    7076:	7b 07       	cpc	r23, r27
    7078:	8b 07       	cpc	r24, r27
    707a:	9b 07       	cpc	r25, r27
    707c:	21 f4       	brne	.+8      	; 0x7086 <f_lseek+0x180>
    707e:	81 e0       	ldi	r24, 0x01	; 1
    7080:	f1 01       	movw	r30, r2
    7082:	85 83       	std	Z+5, r24	; 0x05
    7084:	e9 c0       	rjmp	.+466    	; 0x7258 <f_lseek+0x352>
					fp->sclust = clst;
    7086:	d1 01       	movw	r26, r2
    7088:	1e 96       	adiw	r26, 0x0e	; 14
    708a:	6d 93       	st	X+, r22
    708c:	7d 93       	st	X+, r23
    708e:	8d 93       	st	X+, r24
    7090:	9c 93       	st	X, r25
    7092:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->clust = clst;
    7094:	f1 01       	movw	r30, r2
    7096:	62 8b       	std	Z+18, r22	; 0x12
    7098:	73 8b       	std	Z+19, r23	; 0x13
    709a:	84 8b       	std	Z+20, r24	; 0x14
    709c:	95 8b       	std	Z+21, r25	; 0x15
			}
			if (clst != 0) {
    709e:	61 15       	cp	r22, r1
    70a0:	71 05       	cpc	r23, r1
    70a2:	81 05       	cpc	r24, r1
    70a4:	91 05       	cpc	r25, r1
    70a6:	09 f4       	brne	.+2      	; 0x70aa <f_lseek+0x1a4>
    70a8:	9f c0       	rjmp	.+318    	; 0x71e8 <f_lseek+0x2e2>
				while (ofs > bcs) {						/* Cluster following loop */
    70aa:	8c 14       	cp	r8, r12
    70ac:	9d 04       	cpc	r9, r13
    70ae:	ae 04       	cpc	r10, r14
    70b0:	bf 04       	cpc	r11, r15
    70b2:	08 f0       	brcs	.+2      	; 0x70b6 <f_lseek+0x1b0>
    70b4:	62 c0       	rjmp	.+196    	; 0x717a <f_lseek+0x274>
    70b6:	ab 01       	movw	r20, r22
    70b8:	bc 01       	movw	r22, r24
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    70ba:	d1 01       	movw	r26, r2
    70bc:	14 96       	adiw	r26, 0x04	; 4
    70be:	2c 91       	ld	r18, X
    70c0:	14 97       	sbiw	r26, 0x04	; 4
    70c2:	21 ff       	sbrs	r18, 1
    70c4:	0c c0       	rjmp	.+24     	; 0x70de <f_lseek+0x1d8>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    70c6:	8d 91       	ld	r24, X+
    70c8:	9c 91       	ld	r25, X
    70ca:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <create_chain>
    70ce:	ab 01       	movw	r20, r22
    70d0:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    70d2:	41 15       	cp	r20, r1
    70d4:	51 05       	cpc	r21, r1
    70d6:	61 05       	cpc	r22, r1
    70d8:	71 05       	cpc	r23, r1
    70da:	41 f4       	brne	.+16     	; 0x70ec <f_lseek+0x1e6>
    70dc:	4a c0       	rjmp	.+148    	; 0x7172 <f_lseek+0x26c>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    70de:	f1 01       	movw	r30, r2
    70e0:	80 81       	ld	r24, Z
    70e2:	91 81       	ldd	r25, Z+1	; 0x01
    70e4:	0e 94 b6 2b 	call	0x576c	; 0x576c <get_fat>
    70e8:	ab 01       	movw	r20, r22
    70ea:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    70ec:	4f 3f       	cpi	r20, 0xFF	; 255
    70ee:	ff ef       	ldi	r31, 0xFF	; 255
    70f0:	5f 07       	cpc	r21, r31
    70f2:	6f 07       	cpc	r22, r31
    70f4:	7f 07       	cpc	r23, r31
    70f6:	29 f4       	brne	.+10     	; 0x7102 <f_lseek+0x1fc>
    70f8:	81 e0       	ldi	r24, 0x01	; 1
    70fa:	d1 01       	movw	r26, r2
    70fc:	15 96       	adiw	r26, 0x05	; 5
    70fe:	8c 93       	st	X, r24
    7100:	ab c0       	rjmp	.+342    	; 0x7258 <f_lseek+0x352>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    7102:	42 30       	cpi	r20, 0x02	; 2
    7104:	51 05       	cpc	r21, r1
    7106:	61 05       	cpc	r22, r1
    7108:	71 05       	cpc	r23, r1
    710a:	60 f0       	brcs	.+24     	; 0x7124 <f_lseek+0x21e>
    710c:	d1 01       	movw	r26, r2
    710e:	ed 91       	ld	r30, X+
    7110:	fc 91       	ld	r31, X
    7112:	06 89       	ldd	r16, Z+22	; 0x16
    7114:	17 89       	ldd	r17, Z+23	; 0x17
    7116:	20 8d       	ldd	r18, Z+24	; 0x18
    7118:	31 8d       	ldd	r19, Z+25	; 0x19
    711a:	40 17       	cp	r20, r16
    711c:	51 07       	cpc	r21, r17
    711e:	62 07       	cpc	r22, r18
    7120:	73 07       	cpc	r23, r19
    7122:	20 f0       	brcs	.+8      	; 0x712c <f_lseek+0x226>
    7124:	82 e0       	ldi	r24, 0x02	; 2
    7126:	f1 01       	movw	r30, r2
    7128:	85 83       	std	Z+5, r24	; 0x05
    712a:	96 c0       	rjmp	.+300    	; 0x7258 <f_lseek+0x352>
					fp->clust = clst;
    712c:	d1 01       	movw	r26, r2
    712e:	52 96       	adiw	r26, 0x12	; 18
    7130:	4d 93       	st	X+, r20
    7132:	5d 93       	st	X+, r21
    7134:	6d 93       	st	X+, r22
    7136:	7c 93       	st	X, r23
    7138:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    713a:	16 96       	adiw	r26, 0x06	; 6
    713c:	0d 91       	ld	r16, X+
    713e:	1d 91       	ld	r17, X+
    7140:	2d 91       	ld	r18, X+
    7142:	3c 91       	ld	r19, X
    7144:	19 97       	sbiw	r26, 0x09	; 9
    7146:	08 0d       	add	r16, r8
    7148:	19 1d       	adc	r17, r9
    714a:	2a 1d       	adc	r18, r10
    714c:	3b 1d       	adc	r19, r11
    714e:	f1 01       	movw	r30, r2
    7150:	06 83       	std	Z+6, r16	; 0x06
    7152:	17 83       	std	Z+7, r17	; 0x07
    7154:	20 87       	std	Z+8, r18	; 0x08
    7156:	31 87       	std	Z+9, r19	; 0x09
					ofs -= bcs;
    7158:	c8 18       	sub	r12, r8
    715a:	d9 08       	sbc	r13, r9
    715c:	ea 08       	sbc	r14, r10
    715e:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    7160:	8c 14       	cp	r8, r12
    7162:	9d 04       	cpc	r9, r13
    7164:	ae 04       	cpc	r10, r14
    7166:	bf 04       	cpc	r11, r15
    7168:	08 f4       	brcc	.+2      	; 0x716c <f_lseek+0x266>
    716a:	a7 cf       	rjmp	.-178    	; 0x70ba <f_lseek+0x1b4>
    716c:	cb 01       	movw	r24, r22
    716e:	ba 01       	movw	r22, r20
    7170:	04 c0       	rjmp	.+8      	; 0x717a <f_lseek+0x274>
    7172:	cb 01       	movw	r24, r22
    7174:	ba 01       	movw	r22, r20
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    7176:	75 01       	movw	r14, r10
    7178:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    717a:	d1 01       	movw	r26, r2
    717c:	16 96       	adiw	r26, 0x06	; 6
    717e:	0d 91       	ld	r16, X+
    7180:	1d 91       	ld	r17, X+
    7182:	2d 91       	ld	r18, X+
    7184:	3c 91       	ld	r19, X
    7186:	19 97       	sbiw	r26, 0x09	; 9
    7188:	0c 0d       	add	r16, r12
    718a:	1d 1d       	adc	r17, r13
    718c:	2e 1d       	adc	r18, r14
    718e:	3f 1d       	adc	r19, r15
    7190:	f1 01       	movw	r30, r2
    7192:	06 83       	std	Z+6, r16	; 0x06
    7194:	17 83       	std	Z+7, r17	; 0x07
    7196:	20 87       	std	Z+8, r18	; 0x08
    7198:	31 87       	std	Z+9, r19	; 0x09
				if (ofs % SS(fp->fs)) {
    719a:	97 01       	movw	r18, r14
    719c:	86 01       	movw	r16, r12
    719e:	11 70       	andi	r17, 0x01	; 1
    71a0:	22 27       	eor	r18, r18
    71a2:	33 27       	eor	r19, r19
    71a4:	01 2b       	or	r16, r17
    71a6:	02 2b       	or	r16, r18
    71a8:	03 2b       	or	r16, r19
    71aa:	11 f1       	breq	.+68     	; 0x71f0 <f_lseek+0x2ea>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    71ac:	ab 01       	movw	r20, r22
    71ae:	bc 01       	movw	r22, r24
    71b0:	80 81       	ld	r24, Z
    71b2:	91 81       	ldd	r25, Z+1	; 0x01
    71b4:	0e 94 88 2b 	call	0x5710	; 0x5710 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    71b8:	61 15       	cp	r22, r1
    71ba:	71 05       	cpc	r23, r1
    71bc:	81 05       	cpc	r24, r1
    71be:	91 05       	cpc	r25, r1
    71c0:	29 f4       	brne	.+10     	; 0x71cc <f_lseek+0x2c6>
    71c2:	82 e0       	ldi	r24, 0x02	; 2
    71c4:	d1 01       	movw	r26, r2
    71c6:	15 96       	adiw	r26, 0x05	; 5
    71c8:	8c 93       	st	X, r24
    71ca:	46 c0       	rjmp	.+140    	; 0x7258 <f_lseek+0x352>
					nsect += ofs / SS(fp->fs);
    71cc:	0b 2e       	mov	r0, r27
    71ce:	b9 e0       	ldi	r27, 0x09	; 9
    71d0:	f6 94       	lsr	r15
    71d2:	e7 94       	ror	r14
    71d4:	d7 94       	ror	r13
    71d6:	c7 94       	ror	r12
    71d8:	ba 95       	dec	r27
    71da:	d1 f7       	brne	.-12     	; 0x71d0 <f_lseek+0x2ca>
    71dc:	b0 2d       	mov	r27, r0
    71de:	c6 0e       	add	r12, r22
    71e0:	d7 1e       	adc	r13, r23
    71e2:	e8 1e       	adc	r14, r24
    71e4:	f9 1e       	adc	r15, r25
    71e6:	07 c0       	rjmp	.+14     	; 0x71f6 <f_lseek+0x2f0>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    71e8:	c1 2c       	mov	r12, r1
    71ea:	d1 2c       	mov	r13, r1
    71ec:	76 01       	movw	r14, r12
    71ee:	03 c0       	rjmp	.+6      	; 0x71f6 <f_lseek+0x2f0>
    71f0:	c1 2c       	mov	r12, r1
    71f2:	d1 2c       	mov	r13, r1
    71f4:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    71f6:	f1 01       	movw	r30, r2
    71f8:	86 81       	ldd	r24, Z+6	; 0x06
    71fa:	97 81       	ldd	r25, Z+7	; 0x07
    71fc:	a0 85       	ldd	r26, Z+8	; 0x08
    71fe:	b1 85       	ldd	r27, Z+9	; 0x09
    7200:	ac 01       	movw	r20, r24
    7202:	bd 01       	movw	r22, r26
    7204:	51 70       	andi	r21, 0x01	; 1
    7206:	66 27       	eor	r22, r22
    7208:	77 27       	eor	r23, r23
    720a:	45 2b       	or	r20, r21
    720c:	46 2b       	or	r20, r22
    720e:	47 2b       	or	r20, r23
    7210:	69 f0       	breq	.+26     	; 0x722c <f_lseek+0x326>
    7212:	46 89       	ldd	r20, Z+22	; 0x16
    7214:	57 89       	ldd	r21, Z+23	; 0x17
    7216:	60 8d       	ldd	r22, Z+24	; 0x18
    7218:	71 8d       	ldd	r23, Z+25	; 0x19
    721a:	4c 15       	cp	r20, r12
    721c:	5d 05       	cpc	r21, r13
    721e:	6e 05       	cpc	r22, r14
    7220:	7f 05       	cpc	r23, r15
    7222:	21 f0       	breq	.+8      	; 0x722c <f_lseek+0x326>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    7224:	c6 8a       	std	Z+22, r12	; 0x16
    7226:	d7 8a       	std	Z+23, r13	; 0x17
    7228:	e0 8e       	std	Z+24, r14	; 0x18
    722a:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    722c:	f1 01       	movw	r30, r2
    722e:	42 85       	ldd	r20, Z+10	; 0x0a
    7230:	53 85       	ldd	r21, Z+11	; 0x0b
    7232:	64 85       	ldd	r22, Z+12	; 0x0c
    7234:	75 85       	ldd	r23, Z+13	; 0x0d
    7236:	48 17       	cp	r20, r24
    7238:	59 07       	cpc	r21, r25
    723a:	6a 07       	cpc	r22, r26
    723c:	7b 07       	cpc	r23, r27
    723e:	58 f4       	brcc	.+22     	; 0x7256 <f_lseek+0x350>
			fp->fsize = fp->fptr;
    7240:	82 87       	std	Z+10, r24	; 0x0a
    7242:	93 87       	std	Z+11, r25	; 0x0b
    7244:	a4 87       	std	Z+12, r26	; 0x0c
    7246:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    7248:	84 81       	ldd	r24, Z+4	; 0x04
    724a:	80 62       	ori	r24, 0x20	; 32
    724c:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    724e:	80 e0       	ldi	r24, 0x00	; 0
    7250:	03 c0       	rjmp	.+6      	; 0x7258 <f_lseek+0x352>
    7252:	80 e0       	ldi	r24, 0x00	; 0
    7254:	01 c0       	rjmp	.+2      	; 0x7258 <f_lseek+0x352>
    7256:	80 e0       	ldi	r24, 0x00	; 0
}
    7258:	24 96       	adiw	r28, 0x04	; 4
    725a:	cd bf       	out	0x3d, r28	; 61
    725c:	de bf       	out	0x3e, r29	; 62
    725e:	df 91       	pop	r29
    7260:	cf 91       	pop	r28
    7262:	1f 91       	pop	r17
    7264:	0f 91       	pop	r16
    7266:	ff 90       	pop	r15
    7268:	ef 90       	pop	r14
    726a:	df 90       	pop	r13
    726c:	cf 90       	pop	r12
    726e:	bf 90       	pop	r11
    7270:	af 90       	pop	r10
    7272:	9f 90       	pop	r9
    7274:	8f 90       	pop	r8
    7276:	7f 90       	pop	r7
    7278:	6f 90       	pop	r6
    727a:	5f 90       	pop	r5
    727c:	4f 90       	pop	r4
    727e:	3f 90       	pop	r3
    7280:	2f 90       	pop	r2
    7282:	08 95       	ret

00007284 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    7284:	0c 94 b9 1e 	jmp	0x3d72	; 0x3d72 <spi_wr_rd>
}
    7288:	08 95       	ret

0000728a <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    728a:	e0 e4       	ldi	r30, 0x40	; 64
    728c:	f6 e0       	ldi	r31, 0x06	; 6
    728e:	85 81       	ldd	r24, Z+5	; 0x05
    7290:	80 61       	ori	r24, 0x10	; 16
    7292:	85 83       	std	Z+5, r24	; 0x05
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    7294:	8f ef       	ldi	r24, 0xFF	; 255
    7296:	f6 cf       	rjmp	.-20     	; 0x7284 <xchg_spi>
    7298:	08 95       	ret

0000729a <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
    729a:	e0 e4       	ldi	r30, 0x40	; 64
    729c:	f6 e0       	ldi	r31, 0x06	; 6
    729e:	86 81       	ldd	r24, Z+6	; 0x06
    72a0:	80 61       	ori	r24, 0x10	; 16
    72a2:	86 83       	std	Z+6, r24	; 0x06
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    72a4:	8f ef       	ldi	r24, 0xFF	; 255
    72a6:	ee df       	rcall	.-36     	; 0x7284 <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt / 10;
    72a8:	82 e3       	ldi	r24, 0x32	; 50
    72aa:	80 93 61 2a 	sts	0x2A61, r24
	do
		d = xchg_spi(0xFF);
    72ae:	8f ef       	ldi	r24, 0xFF	; 255
    72b0:	e9 df       	rcall	.-46     	; 0x7284 <xchg_spi>
	while (d != 0xFF && Timer2);
    72b2:	8f 3f       	cpi	r24, 0xFF	; 255
    72b4:	41 f0       	breq	.+16     	; 0x72c6 <select+0x2c>
    72b6:	80 91 61 2a 	lds	r24, 0x2A61
    72ba:	81 11       	cpse	r24, r1
    72bc:	f8 cf       	rjmp	.-16     	; 0x72ae <select+0x14>
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
    72be:	e5 df       	rcall	.-54     	; 0x728a <deselect>
	return 0;	/* Timeout */
    72c0:	80 e0       	ldi	r24, 0x00	; 0
    72c2:	90 e0       	ldi	r25, 0x00	; 0
    72c4:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    72c6:	81 e0       	ldi	r24, 0x01	; 1
    72c8:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    72ca:	08 95       	ret

000072cc <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    72cc:	ff 92       	push	r15
    72ce:	0f 93       	push	r16
    72d0:	1f 93       	push	r17
    72d2:	cf 93       	push	r28
    72d4:	df 93       	push	r29
    72d6:	c8 2f       	mov	r28, r24
    72d8:	d4 2f       	mov	r29, r20
    72da:	15 2f       	mov	r17, r21
    72dc:	06 2f       	mov	r16, r22
    72de:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    72e0:	88 23       	and	r24, r24
    72e2:	4c f4       	brge	.+18     	; 0x72f6 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    72e4:	40 e0       	ldi	r20, 0x00	; 0
    72e6:	50 e0       	ldi	r21, 0x00	; 0
    72e8:	ba 01       	movw	r22, r20
    72ea:	87 e3       	ldi	r24, 0x37	; 55
    72ec:	ef df       	rcall	.-34     	; 0x72cc <send_cmd>
		if (res > 1) return res;
    72ee:	82 30       	cpi	r24, 0x02	; 2
    72f0:	08 f0       	brcs	.+2      	; 0x72f4 <send_cmd+0x28>
    72f2:	37 c0       	rjmp	.+110    	; 0x7362 <send_cmd+0x96>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    72f4:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    72f6:	cc 30       	cpi	r28, 0x0C	; 12
    72f8:	19 f1       	breq	.+70     	; 0x7340 <send_cmd+0x74>
		deselect();
    72fa:	c7 df       	rcall	.-114    	; 0x728a <deselect>
		if (!select()) return 0xFF;
    72fc:	ce df       	rcall	.-100    	; 0x729a <select>
    72fe:	89 2b       	or	r24, r25
    7300:	e9 f0       	breq	.+58     	; 0x733c <send_cmd+0x70>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    7302:	8c 2f       	mov	r24, r28
    7304:	80 64       	ori	r24, 0x40	; 64
    7306:	be df       	rcall	.-132    	; 0x7284 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    7308:	8f 2d       	mov	r24, r15
    730a:	bc df       	rcall	.-136    	; 0x7284 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    730c:	80 2f       	mov	r24, r16
    730e:	ba df       	rcall	.-140    	; 0x7284 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    7310:	81 2f       	mov	r24, r17
    7312:	b8 df       	rcall	.-144    	; 0x7284 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    7314:	8d 2f       	mov	r24, r29
    7316:	b6 df       	rcall	.-148    	; 0x7284 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    7318:	cc 23       	and	r28, r28
    731a:	01 f1       	breq	.+64     	; 0x735c <send_cmd+0x90>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    731c:	c8 30       	cpi	r28, 0x08	; 8
    731e:	d9 f0       	breq	.+54     	; 0x7356 <send_cmd+0x8a>
	xchg_spi(n);
    7320:	81 e0       	ldi	r24, 0x01	; 1
    7322:	b0 df       	rcall	.-160    	; 0x7284 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    7324:	cc 30       	cpi	r28, 0x0C	; 12
    7326:	11 f4       	brne	.+4      	; 0x732c <send_cmd+0x60>
    7328:	8f ef       	ldi	r24, 0xFF	; 255
    732a:	ac df       	rcall	.-168    	; 0x7284 <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    732c:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    732e:	8f ef       	ldi	r24, 0xFF	; 255
    7330:	a9 df       	rcall	.-174    	; 0x7284 <xchg_spi>
	while ((res & 0x80) && --n);
    7332:	88 23       	and	r24, r24
    7334:	b4 f4       	brge	.+44     	; 0x7362 <send_cmd+0x96>
    7336:	c1 50       	subi	r28, 0x01	; 1
    7338:	d1 f7       	brne	.-12     	; 0x732e <send_cmd+0x62>
    733a:	13 c0       	rjmp	.+38     	; 0x7362 <send_cmd+0x96>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    733c:	8f ef       	ldi	r24, 0xFF	; 255
    733e:	11 c0       	rjmp	.+34     	; 0x7362 <send_cmd+0x96>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    7340:	8c e4       	ldi	r24, 0x4C	; 76
    7342:	a0 df       	rcall	.-192    	; 0x7284 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    7344:	8f 2d       	mov	r24, r15
    7346:	9e df       	rcall	.-196    	; 0x7284 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    7348:	80 2f       	mov	r24, r16
    734a:	9c df       	rcall	.-200    	; 0x7284 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    734c:	81 2f       	mov	r24, r17
    734e:	9a df       	rcall	.-204    	; 0x7284 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    7350:	8d 2f       	mov	r24, r29
    7352:	98 df       	rcall	.-208    	; 0x7284 <xchg_spi>
    7354:	e5 cf       	rjmp	.-54     	; 0x7320 <send_cmd+0x54>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    7356:	87 e8       	ldi	r24, 0x87	; 135
    7358:	95 df       	rcall	.-214    	; 0x7284 <xchg_spi>
    735a:	e8 cf       	rjmp	.-48     	; 0x732c <send_cmd+0x60>
    735c:	85 e9       	ldi	r24, 0x95	; 149
    735e:	92 df       	rcall	.-220    	; 0x7284 <xchg_spi>
    7360:	e5 cf       	rjmp	.-54     	; 0x732c <send_cmd+0x60>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    7362:	df 91       	pop	r29
    7364:	cf 91       	pop	r28
    7366:	1f 91       	pop	r17
    7368:	0f 91       	pop	r16
    736a:	ff 90       	pop	r15
    736c:	08 95       	ret

0000736e <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    736e:	ef 92       	push	r14
    7370:	ff 92       	push	r15
    7372:	0f 93       	push	r16
    7374:	1f 93       	push	r17
    7376:	cf 93       	push	r28
    7378:	df 93       	push	r29
    737a:	e8 2e       	mov	r14, r24
    737c:	f9 2e       	mov	r15, r25
    737e:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    7380:	24 e1       	ldi	r18, 0x14	; 20
    7382:	20 93 62 2a 	sts	0x2A62, r18
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    7386:	8f ef       	ldi	r24, 0xFF	; 255
    7388:	7d df       	rcall	.-262    	; 0x7284 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    738a:	8f 3f       	cpi	r24, 0xFF	; 255
    738c:	29 f4       	brne	.+10     	; 0x7398 <rcvr_datablock+0x2a>
    738e:	20 91 62 2a 	lds	r18, 0x2A62
    7392:	21 11       	cpse	r18, r1
    7394:	f8 cf       	rjmp	.-16     	; 0x7386 <rcvr_datablock+0x18>
    7396:	19 c0       	rjmp	.+50     	; 0x73ca <rcvr_datablock+0x5c>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    7398:	8e 3f       	cpi	r24, 0xFE	; 254
    739a:	d1 f4       	brne	.+52     	; 0x73d0 <rcvr_datablock+0x62>
    739c:	ce 2d       	mov	r28, r14
    739e:	df 2d       	mov	r29, r15
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    73a0:	8f ef       	ldi	r24, 0xFF	; 255
    73a2:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <spi_wr_rd>
    73a6:	88 83       	st	Y, r24
		*p++ = spi_wr_rd(0xff);
    73a8:	8f ef       	ldi	r24, 0xFF	; 255
    73aa:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <spi_wr_rd>
    73ae:	89 83       	std	Y+1, r24	; 0x01
		
	} while (cnt -= 2);
    73b0:	02 50       	subi	r16, 0x02	; 2
    73b2:	11 09       	sbc	r17, r1
    73b4:	22 96       	adiw	r28, 0x02	; 2
    73b6:	01 15       	cp	r16, r1
    73b8:	11 05       	cpc	r17, r1
    73ba:	91 f7       	brne	.-28     	; 0x73a0 <rcvr_datablock+0x32>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    73bc:	8f ef       	ldi	r24, 0xFF	; 255
    73be:	62 df       	rcall	.-316    	; 0x7284 <xchg_spi>
	xchg_spi(0xFF);
    73c0:	8f ef       	ldi	r24, 0xFF	; 255
    73c2:	60 df       	rcall	.-320    	; 0x7284 <xchg_spi>

	return 1;						/* Return with success */
    73c4:	81 e0       	ldi	r24, 0x01	; 1
    73c6:	90 e0       	ldi	r25, 0x00	; 0
    73c8:	05 c0       	rjmp	.+10     	; 0x73d4 <rcvr_datablock+0x66>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    73ca:	80 e0       	ldi	r24, 0x00	; 0
    73cc:	90 e0       	ldi	r25, 0x00	; 0
    73ce:	02 c0       	rjmp	.+4      	; 0x73d4 <rcvr_datablock+0x66>
    73d0:	80 e0       	ldi	r24, 0x00	; 0
    73d2:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    73d4:	df 91       	pop	r29
    73d6:	cf 91       	pop	r28
    73d8:	1f 91       	pop	r17
    73da:	0f 91       	pop	r16
    73dc:	ff 90       	pop	r15
    73de:	ef 90       	pop	r14
    73e0:	08 95       	ret

000073e2 <power_off>:
}

static
void power_off (void)
{
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
    73e2:	10 92 00 08 	sts	0x0800, r1
	spi_off();
    73e6:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <spi_off>
	PORTB.OUTSET |= PIN1_bm;
    73ea:	e0 e2       	ldi	r30, 0x20	; 32
    73ec:	f6 e0       	ldi	r31, 0x06	; 6
    73ee:	85 81       	ldd	r24, Z+5	; 0x05
    73f0:	82 60       	ori	r24, 0x02	; 2
    73f2:	85 83       	std	Z+5, r24	; 0x05
    73f4:	2f ef       	ldi	r18, 0xFF	; 255
    73f6:	83 ef       	ldi	r24, 0xF3	; 243
    73f8:	91 e0       	ldi	r25, 0x01	; 1
    73fa:	21 50       	subi	r18, 0x01	; 1
    73fc:	80 40       	sbci	r24, 0x00	; 0
    73fe:	90 40       	sbci	r25, 0x00	; 0
    7400:	e1 f7       	brne	.-8      	; 0x73fa <power_off+0x18>
    7402:	00 c0       	rjmp	.+0      	; 0x7404 <power_off+0x22>
    7404:	00 00       	nop
    7406:	08 95       	ret

00007408 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    7408:	0f 93       	push	r16
    740a:	1f 93       	push	r17
    740c:	cf 93       	push	r28
    740e:	df 93       	push	r29
    7410:	8c 01       	movw	r16, r24
    7412:	c6 2f       	mov	r28, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
    7414:	92 e3       	ldi	r25, 0x32	; 50
    7416:	90 93 61 2a 	sts	0x2A61, r25
	do
		d = xchg_spi(0xFF);
    741a:	8f ef       	ldi	r24, 0xFF	; 255
    741c:	33 df       	rcall	.-410    	; 0x7284 <xchg_spi>
	while (d != 0xFF && Timer2);
    741e:	8f 3f       	cpi	r24, 0xFF	; 255
    7420:	29 f0       	breq	.+10     	; 0x742c <xmit_datablock+0x24>
    7422:	90 91 61 2a 	lds	r25, 0x2A61
    7426:	91 11       	cpse	r25, r1
    7428:	f8 cf       	rjmp	.-16     	; 0x741a <xmit_datablock+0x12>
    742a:	1e c0       	rjmp	.+60     	; 0x7468 <xmit_datablock+0x60>
	BYTE resp;


	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
    742c:	8c 2f       	mov	r24, r28
    742e:	2a df       	rcall	.-428    	; 0x7284 <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
    7430:	cd 3f       	cpi	r28, 0xFD	; 253
    7432:	e9 f0       	breq	.+58     	; 0x746e <xmit_datablock+0x66>
    7434:	e8 01       	movw	r28, r16
    7436:	1e 5f       	subi	r17, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		spi_wr_rd(*p++);
    7438:	88 81       	ld	r24, Y
    743a:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <spi_wr_rd>
		spi_wr_rd(*p++);
    743e:	89 81       	ldd	r24, Y+1	; 0x01
    7440:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <spi_wr_rd>
    7444:	22 96       	adiw	r28, 0x02	; 2
		
	} while (cnt -= 2);
    7446:	c0 17       	cp	r28, r16
    7448:	d1 07       	cpc	r29, r17
    744a:	b1 f7       	brne	.-20     	; 0x7438 <xmit_datablock+0x30>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    744c:	8f ef       	ldi	r24, 0xFF	; 255
    744e:	1a df       	rcall	.-460    	; 0x7284 <xchg_spi>
		xchg_spi(0xFF);
    7450:	8f ef       	ldi	r24, 0xFF	; 255
    7452:	18 df       	rcall	.-464    	; 0x7284 <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    7454:	8f ef       	ldi	r24, 0xFF	; 255
    7456:	16 df       	rcall	.-468    	; 0x7284 <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    7458:	28 2f       	mov	r18, r24
    745a:	2f 71       	andi	r18, 0x1F	; 31
    745c:	81 e0       	ldi	r24, 0x01	; 1
    745e:	90 e0       	ldi	r25, 0x00	; 0
    7460:	25 30       	cpi	r18, 0x05	; 5
    7462:	39 f0       	breq	.+14     	; 0x7472 <xmit_datablock+0x6a>
    7464:	80 e0       	ldi	r24, 0x00	; 0
    7466:	05 c0       	rjmp	.+10     	; 0x7472 <xmit_datablock+0x6a>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    7468:	80 e0       	ldi	r24, 0x00	; 0
    746a:	90 e0       	ldi	r25, 0x00	; 0
    746c:	02 c0       	rjmp	.+4      	; 0x7472 <xmit_datablock+0x6a>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    746e:	81 e0       	ldi	r24, 0x01	; 1
    7470:	90 e0       	ldi	r25, 0x00	; 0
}
    7472:	df 91       	pop	r29
    7474:	cf 91       	pop	r28
    7476:	1f 91       	pop	r17
    7478:	0f 91       	pop	r16
    747a:	08 95       	ret

0000747c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    747c:	ef 92       	push	r14
    747e:	ff 92       	push	r15
    7480:	0f 93       	push	r16
    7482:	1f 93       	push	r17
    7484:	cf 93       	push	r28
    7486:	df 93       	push	r29
    7488:	00 d0       	rcall	.+0      	; 0x748a <disk_initialize+0xe>
    748a:	00 d0       	rcall	.+0      	; 0x748c <disk_initialize+0x10>
    748c:	cd b7       	in	r28, 0x3d	; 61
    748e:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    7490:	81 11       	cpse	r24, r1
    7492:	bb c0       	rjmp	.+374    	; 0x760a <disk_initialize+0x18e>
	power_off();						/* Turn off the socket power to reset the card */
    7494:	a6 df       	rcall	.-180    	; 0x73e2 <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    7496:	80 91 23 20 	lds	r24, 0x2023
    749a:	81 ff       	sbrs	r24, 1
    749c:	03 c0       	rjmp	.+6      	; 0x74a4 <disk_initialize+0x28>
    749e:	80 91 23 20 	lds	r24, 0x2023
    74a2:	be c0       	rjmp	.+380    	; 0x7620 <disk_initialize+0x1a4>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
	TCC0.CNT = 0;
    74a4:	e0 e0       	ldi	r30, 0x00	; 0
    74a6:	f8 e0       	ldi	r31, 0x08	; 8
    74a8:	10 a2       	std	Z+32, r1	; 0x20
    74aa:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 1250;
    74ac:	82 ee       	ldi	r24, 0xE2	; 226
    74ae:	94 e0       	ldi	r25, 0x04	; 4
    74b0:	86 a3       	std	Z+38, r24	; 0x26
    74b2:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV256_gc;
    74b4:	26 e0       	ldi	r18, 0x06	; 6
    74b6:	20 83       	st	Z, r18
	
	TCC0.CCB = 1250;
    74b8:	82 a7       	std	Z+42, r24	; 0x2a
    74ba:	93 a7       	std	Z+43, r25	; 0x2b
	TCC0.INTCTRLB |= TC_CCBINTLVL_LO_gc;
    74bc:	87 81       	ldd	r24, Z+7	; 0x07
    74be:	84 60       	ori	r24, 0x04	; 4
    74c0:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLB |= TC0_CCBEN_bm;
    74c2:	81 81       	ldd	r24, Z+1	; 0x01
    74c4:	80 62       	ori	r24, 0x20	; 32
    74c6:	81 83       	std	Z+1, r24	; 0x01
	
	{	/* Remove this block if no socket power control */
		PORTB.DIRSET |= PIN1_bm;
    74c8:	e0 e2       	ldi	r30, 0x20	; 32
    74ca:	f6 e0       	ldi	r31, 0x06	; 6
    74cc:	81 81       	ldd	r24, Z+1	; 0x01
    74ce:	82 60       	ori	r24, 0x02	; 2
    74d0:	81 83       	std	Z+1, r24	; 0x01
		PORTB.OUTCLR |= PIN1_bm;
    74d2:	86 81       	ldd	r24, Z+6	; 0x06
    74d4:	82 60       	ori	r24, 0x02	; 2
    74d6:	86 83       	std	Z+6, r24	; 0x06
		for (Timer1 = 2; Timer1; );	/* Wait for 20ms */
    74d8:	82 e0       	ldi	r24, 0x02	; 2
    74da:	80 93 62 2a 	sts	0x2A62, r24
    74de:	80 91 62 2a 	lds	r24, 0x2A62
    74e2:	81 11       	cpse	r24, r1
    74e4:	fc cf       	rjmp	.-8      	; 0x74de <disk_initialize+0x62>
	}	
	
	spi_setup();
    74e6:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <spi_setup>

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    74ea:	82 ed       	ldi	r24, 0xD2	; 210
    74ec:	80 93 c0 08 	sts	0x08C0, r24
    74f0:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    74f2:	8f ef       	ldi	r24, 0xFF	; 255
    74f4:	c7 de       	rcall	.-626    	; 0x7284 <xchg_spi>
    74f6:	11 50       	subi	r17, 0x01	; 1
    74f8:	e1 f7       	brne	.-8      	; 0x74f2 <disk_initialize+0x76>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    74fa:	40 e0       	ldi	r20, 0x00	; 0
    74fc:	50 e0       	ldi	r21, 0x00	; 0
    74fe:	ba 01       	movw	r22, r20
    7500:	80 e0       	ldi	r24, 0x00	; 0
    7502:	e4 de       	rcall	.-568    	; 0x72cc <send_cmd>
    7504:	81 30       	cpi	r24, 0x01	; 1
    7506:	09 f0       	breq	.+2      	; 0x750a <disk_initialize+0x8e>
    7508:	82 c0       	rjmp	.+260    	; 0x760e <disk_initialize+0x192>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    750a:	84 e6       	ldi	r24, 0x64	; 100
    750c:	80 93 62 2a 	sts	0x2A62, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    7510:	4a ea       	ldi	r20, 0xAA	; 170
    7512:	51 e0       	ldi	r21, 0x01	; 1
    7514:	60 e0       	ldi	r22, 0x00	; 0
    7516:	70 e0       	ldi	r23, 0x00	; 0
    7518:	88 e0       	ldi	r24, 0x08	; 8
    751a:	d8 de       	rcall	.-592    	; 0x72cc <send_cmd>
    751c:	81 30       	cpi	r24, 0x01	; 1
    751e:	09 f0       	breq	.+2      	; 0x7522 <disk_initialize+0xa6>
    7520:	3f c0       	rjmp	.+126    	; 0x75a0 <disk_initialize+0x124>
    7522:	7e 01       	movw	r14, r28
    7524:	85 e0       	ldi	r24, 0x05	; 5
    7526:	e8 0e       	add	r14, r24
    7528:	f1 1c       	adc	r15, r1
    752a:	8e 01       	movw	r16, r28
    752c:	0f 5f       	subi	r16, 0xFF	; 255
    752e:	1f 4f       	sbci	r17, 0xFF	; 255
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    7530:	8f ef       	ldi	r24, 0xFF	; 255
    7532:	a8 de       	rcall	.-688    	; 0x7284 <xchg_spi>
    7534:	f8 01       	movw	r30, r16
    7536:	81 93       	st	Z+, r24
    7538:	8f 01       	movw	r16, r30
    753a:	ee 15       	cp	r30, r14
    753c:	ff 05       	cpc	r31, r15
    753e:	c1 f7       	brne	.-16     	; 0x7530 <disk_initialize+0xb4>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    7540:	8b 81       	ldd	r24, Y+3	; 0x03
    7542:	81 30       	cpi	r24, 0x01	; 1
    7544:	09 f0       	breq	.+2      	; 0x7548 <disk_initialize+0xcc>
    7546:	63 c0       	rjmp	.+198    	; 0x760e <disk_initialize+0x192>
    7548:	8c 81       	ldd	r24, Y+4	; 0x04
    754a:	8a 3a       	cpi	r24, 0xAA	; 170
    754c:	09 f0       	breq	.+2      	; 0x7550 <disk_initialize+0xd4>
    754e:	5f c0       	rjmp	.+190    	; 0x760e <disk_initialize+0x192>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    7550:	80 91 62 2a 	lds	r24, 0x2A62
    7554:	88 23       	and	r24, r24
    7556:	41 f0       	breq	.+16     	; 0x7568 <disk_initialize+0xec>
    7558:	40 e0       	ldi	r20, 0x00	; 0
    755a:	50 e0       	ldi	r21, 0x00	; 0
    755c:	60 e0       	ldi	r22, 0x00	; 0
    755e:	70 e4       	ldi	r23, 0x40	; 64
    7560:	89 ea       	ldi	r24, 0xA9	; 169
    7562:	b4 de       	rcall	.-664    	; 0x72cc <send_cmd>
    7564:	81 11       	cpse	r24, r1
    7566:	f4 cf       	rjmp	.-24     	; 0x7550 <disk_initialize+0xd4>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    7568:	80 91 62 2a 	lds	r24, 0x2A62
    756c:	88 23       	and	r24, r24
    756e:	09 f4       	brne	.+2      	; 0x7572 <disk_initialize+0xf6>
    7570:	4e c0       	rjmp	.+156    	; 0x760e <disk_initialize+0x192>
    7572:	40 e0       	ldi	r20, 0x00	; 0
    7574:	50 e0       	ldi	r21, 0x00	; 0
    7576:	ba 01       	movw	r22, r20
    7578:	8a e3       	ldi	r24, 0x3A	; 58
    757a:	a8 de       	rcall	.-688    	; 0x72cc <send_cmd>
    757c:	81 11       	cpse	r24, r1
    757e:	47 c0       	rjmp	.+142    	; 0x760e <disk_initialize+0x192>
    7580:	8e 01       	movw	r16, r28
    7582:	0f 5f       	subi	r16, 0xFF	; 255
    7584:	1f 4f       	sbci	r17, 0xFF	; 255
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    7586:	8f ef       	ldi	r24, 0xFF	; 255
    7588:	7d de       	rcall	.-774    	; 0x7284 <xchg_spi>
    758a:	f8 01       	movw	r30, r16
    758c:	81 93       	st	Z+, r24
    758e:	8f 01       	movw	r16, r30
    7590:	ee 16       	cp	r14, r30
    7592:	ff 06       	cpc	r15, r31
    7594:	c1 f7       	brne	.-16     	; 0x7586 <disk_initialize+0x10a>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    7596:	89 81       	ldd	r24, Y+1	; 0x01
    7598:	86 fd       	sbrc	r24, 6
    759a:	3d c0       	rjmp	.+122    	; 0x7616 <disk_initialize+0x19a>
    759c:	84 e0       	ldi	r24, 0x04	; 4
    759e:	3c c0       	rjmp	.+120    	; 0x7618 <disk_initialize+0x19c>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    75a0:	40 e0       	ldi	r20, 0x00	; 0
    75a2:	50 e0       	ldi	r21, 0x00	; 0
    75a4:	ba 01       	movw	r22, r20
    75a6:	89 ea       	ldi	r24, 0xA9	; 169
    75a8:	91 de       	rcall	.-734    	; 0x72cc <send_cmd>
    75aa:	82 30       	cpi	r24, 0x02	; 2
    75ac:	18 f4       	brcc	.+6      	; 0x75b4 <disk_initialize+0x138>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    75ae:	02 e0       	ldi	r16, 0x02	; 2
    75b0:	19 ea       	ldi	r17, 0xA9	; 169
    75b2:	02 c0       	rjmp	.+4      	; 0x75b8 <disk_initialize+0x13c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    75b4:	01 e0       	ldi	r16, 0x01	; 1
    75b6:	11 e0       	ldi	r17, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    75b8:	90 91 62 2a 	lds	r25, 0x2A62
    75bc:	99 23       	and	r25, r25
    75be:	39 f0       	breq	.+14     	; 0x75ce <disk_initialize+0x152>
    75c0:	40 e0       	ldi	r20, 0x00	; 0
    75c2:	50 e0       	ldi	r21, 0x00	; 0
    75c4:	ba 01       	movw	r22, r20
    75c6:	81 2f       	mov	r24, r17
    75c8:	81 de       	rcall	.-766    	; 0x72cc <send_cmd>
    75ca:	81 11       	cpse	r24, r1
    75cc:	f5 cf       	rjmp	.-22     	; 0x75b8 <disk_initialize+0x13c>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    75ce:	80 91 62 2a 	lds	r24, 0x2A62
    75d2:	88 23       	and	r24, r24
    75d4:	e1 f0       	breq	.+56     	; 0x760e <disk_initialize+0x192>
    75d6:	40 e0       	ldi	r20, 0x00	; 0
    75d8:	52 e0       	ldi	r21, 0x02	; 2
    75da:	60 e0       	ldi	r22, 0x00	; 0
    75dc:	70 e0       	ldi	r23, 0x00	; 0
    75de:	80 e1       	ldi	r24, 0x10	; 16
    75e0:	75 de       	rcall	.-790    	; 0x72cc <send_cmd>
    75e2:	81 11       	cpse	r24, r1
    75e4:	14 c0       	rjmp	.+40     	; 0x760e <disk_initialize+0x192>
				ty = 0;
		}
	}
	CardType = ty;
    75e6:	00 93 60 2a 	sts	0x2A60, r16
	deselect();
    75ea:	4f de       	rcall	.-866    	; 0x728a <deselect>

	if (ty) {			/* Initialization succeded */
    75ec:	00 23       	and	r16, r16
    75ee:	49 f0       	breq	.+18     	; 0x7602 <disk_initialize+0x186>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    75f0:	80 91 23 20 	lds	r24, 0x2023
    75f4:	8e 7f       	andi	r24, 0xFE	; 254
    75f6:	80 93 23 20 	sts	0x2023, r24
		FCLK_FAST();
    75fa:	80 ed       	ldi	r24, 0xD0	; 208
    75fc:	80 93 c0 08 	sts	0x08C0, r24
    7600:	01 c0       	rjmp	.+2      	; 0x7604 <disk_initialize+0x188>
	} else {			/* Initialization failed */
		power_off();
    7602:	ef de       	rcall	.-546    	; 0x73e2 <power_off>
	}

	return Stat;
    7604:	80 91 23 20 	lds	r24, 0x2023
    7608:	0b c0       	rjmp	.+22     	; 0x7620 <disk_initialize+0x1a4>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    760a:	81 e0       	ldi	r24, 0x01	; 1
    760c:	09 c0       	rjmp	.+18     	; 0x7620 <disk_initialize+0x1a4>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    760e:	10 92 60 2a 	sts	0x2A60, r1
	deselect();
    7612:	3b de       	rcall	.-906    	; 0x728a <deselect>
    7614:	f6 cf       	rjmp	.-20     	; 0x7602 <disk_initialize+0x186>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    7616:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    7618:	80 93 60 2a 	sts	0x2A60, r24
	deselect();
    761c:	36 de       	rcall	.-916    	; 0x728a <deselect>
    761e:	e8 cf       	rjmp	.-48     	; 0x75f0 <disk_initialize+0x174>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    7620:	24 96       	adiw	r28, 0x04	; 4
    7622:	cd bf       	out	0x3d, r28	; 61
    7624:	de bf       	out	0x3e, r29	; 62
    7626:	df 91       	pop	r29
    7628:	cf 91       	pop	r28
    762a:	1f 91       	pop	r17
    762c:	0f 91       	pop	r16
    762e:	ff 90       	pop	r15
    7630:	ef 90       	pop	r14
    7632:	08 95       	ret

00007634 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    7634:	81 11       	cpse	r24, r1
    7636:	03 c0       	rjmp	.+6      	; 0x763e <disk_status+0xa>
	return Stat;
    7638:	80 91 23 20 	lds	r24, 0x2023
    763c:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    763e:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    7640:	08 95       	ret

00007642 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    7642:	ff 92       	push	r15
    7644:	0f 93       	push	r16
    7646:	1f 93       	push	r17
    7648:	cf 93       	push	r28
    764a:	df 93       	push	r29
    764c:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    764e:	81 11       	cpse	r24, r1
    7650:	41 c0       	rjmp	.+130    	; 0x76d4 <disk_read+0x92>
    7652:	01 15       	cp	r16, r1
    7654:	11 05       	cpc	r17, r1
    7656:	09 f4       	brne	.+2      	; 0x765a <disk_read+0x18>
    7658:	3f c0       	rjmp	.+126    	; 0x76d8 <disk_read+0x96>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    765a:	80 91 23 20 	lds	r24, 0x2023
    765e:	80 fd       	sbrc	r24, 0
    7660:	3d c0       	rjmp	.+122    	; 0x76dc <disk_read+0x9a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    7662:	80 91 60 2a 	lds	r24, 0x2A60
    7666:	83 fd       	sbrc	r24, 3
    7668:	09 c0       	rjmp	.+18     	; 0x767c <disk_read+0x3a>
    766a:	01 2e       	mov	r0, r17
    766c:	19 e0       	ldi	r17, 0x09	; 9
    766e:	22 0f       	add	r18, r18
    7670:	33 1f       	adc	r19, r19
    7672:	44 1f       	adc	r20, r20
    7674:	55 1f       	adc	r21, r21
    7676:	1a 95       	dec	r17
    7678:	d1 f7       	brne	.-12     	; 0x766e <disk_read+0x2c>
    767a:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    767c:	02 30       	cpi	r16, 0x02	; 2
    767e:	11 05       	cpc	r17, r1
    7680:	28 f0       	brcs	.+10     	; 0x768c <disk_read+0x4a>
    7682:	0f 2e       	mov	r0, r31
    7684:	f2 e1       	ldi	r31, 0x12	; 18
    7686:	ff 2e       	mov	r15, r31
    7688:	f0 2d       	mov	r31, r0
    768a:	04 c0       	rjmp	.+8      	; 0x7694 <disk_read+0x52>
    768c:	0f 2e       	mov	r0, r31
    768e:	f1 e1       	ldi	r31, 0x11	; 17
    7690:	ff 2e       	mov	r15, r31
    7692:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    7694:	ba 01       	movw	r22, r20
    7696:	a9 01       	movw	r20, r18
    7698:	8f 2d       	mov	r24, r15
    769a:	18 de       	rcall	.-976    	; 0x72cc <send_cmd>
    769c:	81 11       	cpse	r24, r1
    769e:	14 c0       	rjmp	.+40     	; 0x76c8 <disk_read+0x86>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    76a0:	60 e0       	ldi	r22, 0x00	; 0
    76a2:	72 e0       	ldi	r23, 0x02	; 2
    76a4:	ce 01       	movw	r24, r28
    76a6:	63 de       	rcall	.-826    	; 0x736e <rcvr_datablock>
    76a8:	89 2b       	or	r24, r25
    76aa:	31 f0       	breq	.+12     	; 0x76b8 <disk_read+0x76>
			buff += 512;
    76ac:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    76ae:	01 50       	subi	r16, 0x01	; 1
    76b0:	11 09       	sbc	r17, r1
    76b2:	01 15       	cp	r16, r1
    76b4:	11 05       	cpc	r17, r1
    76b6:	a1 f7       	brne	.-24     	; 0x76a0 <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    76b8:	82 e1       	ldi	r24, 0x12	; 18
    76ba:	f8 12       	cpse	r15, r24
    76bc:	05 c0       	rjmp	.+10     	; 0x76c8 <disk_read+0x86>
    76be:	40 e0       	ldi	r20, 0x00	; 0
    76c0:	50 e0       	ldi	r21, 0x00	; 0
    76c2:	ba 01       	movw	r22, r20
    76c4:	8c e0       	ldi	r24, 0x0C	; 12
    76c6:	02 de       	rcall	.-1020   	; 0x72cc <send_cmd>
	}
	deselect();
    76c8:	e0 dd       	rcall	.-1088   	; 0x728a <deselect>

	return count ? RES_ERROR : RES_OK;
    76ca:	81 e0       	ldi	r24, 0x01	; 1
    76cc:	01 2b       	or	r16, r17
    76ce:	39 f4       	brne	.+14     	; 0x76de <disk_read+0x9c>
    76d0:	80 e0       	ldi	r24, 0x00	; 0
    76d2:	05 c0       	rjmp	.+10     	; 0x76de <disk_read+0x9c>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    76d4:	84 e0       	ldi	r24, 0x04	; 4
    76d6:	03 c0       	rjmp	.+6      	; 0x76de <disk_read+0x9c>
    76d8:	84 e0       	ldi	r24, 0x04	; 4
    76da:	01 c0       	rjmp	.+2      	; 0x76de <disk_read+0x9c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    76dc:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    76de:	df 91       	pop	r29
    76e0:	cf 91       	pop	r28
    76e2:	1f 91       	pop	r17
    76e4:	0f 91       	pop	r16
    76e6:	ff 90       	pop	r15
    76e8:	08 95       	ret

000076ea <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    76ea:	cf 92       	push	r12
    76ec:	df 92       	push	r13
    76ee:	ef 92       	push	r14
    76f0:	ff 92       	push	r15
    76f2:	0f 93       	push	r16
    76f4:	1f 93       	push	r17
    76f6:	cf 93       	push	r28
    76f8:	df 93       	push	r29
    76fa:	eb 01       	movw	r28, r22
    76fc:	69 01       	movw	r12, r18
    76fe:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    7700:	81 11       	cpse	r24, r1
    7702:	53 c0       	rjmp	.+166    	; 0x77aa <disk_write+0xc0>
    7704:	01 15       	cp	r16, r1
    7706:	11 05       	cpc	r17, r1
    7708:	09 f4       	brne	.+2      	; 0x770c <disk_write+0x22>
    770a:	51 c0       	rjmp	.+162    	; 0x77ae <disk_write+0xc4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    770c:	80 91 23 20 	lds	r24, 0x2023
    7710:	80 fd       	sbrc	r24, 0
    7712:	4f c0       	rjmp	.+158    	; 0x77b2 <disk_write+0xc8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    7714:	80 91 23 20 	lds	r24, 0x2023
    7718:	82 fd       	sbrc	r24, 2
    771a:	4d c0       	rjmp	.+154    	; 0x77b6 <disk_write+0xcc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    771c:	80 91 60 2a 	lds	r24, 0x2A60
    7720:	83 fd       	sbrc	r24, 3
    7722:	09 c0       	rjmp	.+18     	; 0x7736 <disk_write+0x4c>
    7724:	0b 2e       	mov	r0, r27
    7726:	b9 e0       	ldi	r27, 0x09	; 9
    7728:	cc 0c       	add	r12, r12
    772a:	dd 1c       	adc	r13, r13
    772c:	ee 1c       	adc	r14, r14
    772e:	ff 1c       	adc	r15, r15
    7730:	ba 95       	dec	r27
    7732:	d1 f7       	brne	.-12     	; 0x7728 <disk_write+0x3e>
    7734:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    7736:	01 30       	cpi	r16, 0x01	; 1
    7738:	11 05       	cpc	r17, r1
    773a:	89 f4       	brne	.+34     	; 0x775e <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    773c:	b7 01       	movw	r22, r14
    773e:	a6 01       	movw	r20, r12
    7740:	88 e1       	ldi	r24, 0x18	; 24
    7742:	c4 dd       	rcall	.-1144   	; 0x72cc <send_cmd>
    7744:	81 11       	cpse	r24, r1
    7746:	2b c0       	rjmp	.+86     	; 0x779e <disk_write+0xb4>
			&& xmit_datablock(buff, 0xFE))
    7748:	6e ef       	ldi	r22, 0xFE	; 254
    774a:	ce 01       	movw	r24, r28
    774c:	5d de       	rcall	.-838    	; 0x7408 <xmit_datablock>
    774e:	31 e0       	ldi	r19, 0x01	; 1
    7750:	20 e0       	ldi	r18, 0x00	; 0
    7752:	89 2b       	or	r24, r25
    7754:	09 f0       	breq	.+2      	; 0x7758 <disk_write+0x6e>
    7756:	30 e0       	ldi	r19, 0x00	; 0
    7758:	03 2f       	mov	r16, r19
    775a:	12 2f       	mov	r17, r18
    775c:	20 c0       	rjmp	.+64     	; 0x779e <disk_write+0xb4>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    775e:	86 70       	andi	r24, 0x06	; 6
    7760:	29 f0       	breq	.+10     	; 0x776c <disk_write+0x82>
    7762:	a8 01       	movw	r20, r16
    7764:	60 e0       	ldi	r22, 0x00	; 0
    7766:	70 e0       	ldi	r23, 0x00	; 0
    7768:	87 e9       	ldi	r24, 0x97	; 151
    776a:	b0 dd       	rcall	.-1184   	; 0x72cc <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    776c:	b7 01       	movw	r22, r14
    776e:	a6 01       	movw	r20, r12
    7770:	89 e1       	ldi	r24, 0x19	; 25
    7772:	ac dd       	rcall	.-1192   	; 0x72cc <send_cmd>
    7774:	81 11       	cpse	r24, r1
    7776:	13 c0       	rjmp	.+38     	; 0x779e <disk_write+0xb4>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    7778:	6c ef       	ldi	r22, 0xFC	; 252
    777a:	ce 01       	movw	r24, r28
    777c:	45 de       	rcall	.-886    	; 0x7408 <xmit_datablock>
    777e:	89 2b       	or	r24, r25
    7780:	31 f0       	breq	.+12     	; 0x778e <disk_write+0xa4>
				buff += 512;
    7782:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    7784:	01 50       	subi	r16, 0x01	; 1
    7786:	11 09       	sbc	r17, r1
    7788:	01 15       	cp	r16, r1
    778a:	11 05       	cpc	r17, r1
    778c:	a9 f7       	brne	.-22     	; 0x7778 <disk_write+0x8e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    778e:	6d ef       	ldi	r22, 0xFD	; 253
    7790:	80 e0       	ldi	r24, 0x00	; 0
    7792:	90 e0       	ldi	r25, 0x00	; 0
    7794:	39 de       	rcall	.-910    	; 0x7408 <xmit_datablock>
    7796:	89 2b       	or	r24, r25
    7798:	11 f4       	brne	.+4      	; 0x779e <disk_write+0xb4>
				count = 1;
    779a:	01 e0       	ldi	r16, 0x01	; 1
    779c:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    779e:	75 dd       	rcall	.-1302   	; 0x728a <deselect>

	return count ? RES_ERROR : RES_OK;
    77a0:	81 e0       	ldi	r24, 0x01	; 1
    77a2:	01 2b       	or	r16, r17
    77a4:	49 f4       	brne	.+18     	; 0x77b8 <disk_write+0xce>
    77a6:	80 e0       	ldi	r24, 0x00	; 0
    77a8:	07 c0       	rjmp	.+14     	; 0x77b8 <disk_write+0xce>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    77aa:	84 e0       	ldi	r24, 0x04	; 4
    77ac:	05 c0       	rjmp	.+10     	; 0x77b8 <disk_write+0xce>
    77ae:	84 e0       	ldi	r24, 0x04	; 4
    77b0:	03 c0       	rjmp	.+6      	; 0x77b8 <disk_write+0xce>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    77b2:	83 e0       	ldi	r24, 0x03	; 3
    77b4:	01 c0       	rjmp	.+2      	; 0x77b8 <disk_write+0xce>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    77b6:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    77b8:	df 91       	pop	r29
    77ba:	cf 91       	pop	r28
    77bc:	1f 91       	pop	r17
    77be:	0f 91       	pop	r16
    77c0:	ff 90       	pop	r15
    77c2:	ef 90       	pop	r14
    77c4:	df 90       	pop	r13
    77c6:	cf 90       	pop	r12
    77c8:	08 95       	ret

000077ca <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    77ca:	ef 92       	push	r14
    77cc:	ff 92       	push	r15
    77ce:	0f 93       	push	r16
    77d0:	1f 93       	push	r17
    77d2:	cf 93       	push	r28
    77d4:	df 93       	push	r29
    77d6:	cd b7       	in	r28, 0x3d	; 61
    77d8:	de b7       	in	r29, 0x3e	; 62
    77da:	60 97       	sbiw	r28, 0x10	; 16
    77dc:	cd bf       	out	0x3d, r28	; 61
    77de:	de bf       	out	0x3e, r29	; 62
    77e0:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    77e2:	81 11       	cpse	r24, r1
    77e4:	83 c1       	rjmp	.+774    	; 0x7aec <disk_ioctl+0x322>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    77e6:	80 91 23 20 	lds	r24, 0x2023
    77ea:	80 fd       	sbrc	r24, 0
    77ec:	81 c1       	rjmp	.+770    	; 0x7af0 <disk_ioctl+0x326>

	switch (cmd) {
    77ee:	06 2f       	mov	r16, r22
    77f0:	10 e0       	ldi	r17, 0x00	; 0
    77f2:	07 33       	cpi	r16, 0x37	; 55
    77f4:	11 05       	cpc	r17, r1
    77f6:	08 f0       	brcs	.+2      	; 0x77fa <disk_ioctl+0x30>
    77f8:	5f c1       	rjmp	.+702    	; 0x7ab8 <disk_ioctl+0x2ee>
    77fa:	f8 01       	movw	r30, r16
    77fc:	e2 50       	subi	r30, 0x02	; 2
    77fe:	ff 4f       	sbci	r31, 0xFF	; 255
    7800:	0c 94 41 56 	jmp	0xac82	; 0xac82 <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    7804:	4a dd       	rcall	.-1388   	; 0x729a <select>
    7806:	11 e0       	ldi	r17, 0x01	; 1
    7808:	89 2b       	or	r24, r25
    780a:	09 f4       	brne	.+2      	; 0x780e <disk_ioctl+0x44>
    780c:	6c c1       	rjmp	.+728    	; 0x7ae6 <disk_ioctl+0x31c>
    780e:	10 e0       	ldi	r17, 0x00	; 0
    7810:	6a c1       	rjmp	.+724    	; 0x7ae6 <disk_ioctl+0x31c>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    7812:	40 e0       	ldi	r20, 0x00	; 0
    7814:	50 e0       	ldi	r21, 0x00	; 0
    7816:	ba 01       	movw	r22, r20
    7818:	89 e0       	ldi	r24, 0x09	; 9
    781a:	58 dd       	rcall	.-1360   	; 0x72cc <send_cmd>
    781c:	81 11       	cpse	r24, r1
    781e:	4e c1       	rjmp	.+668    	; 0x7abc <disk_ioctl+0x2f2>
    7820:	60 e1       	ldi	r22, 0x10	; 16
    7822:	70 e0       	ldi	r23, 0x00	; 0
    7824:	ce 01       	movw	r24, r28
    7826:	01 96       	adiw	r24, 0x01	; 1
    7828:	a2 dd       	rcall	.-1212   	; 0x736e <rcvr_datablock>
    782a:	89 2b       	or	r24, r25
    782c:	09 f4       	brne	.+2      	; 0x7830 <disk_ioctl+0x66>
    782e:	48 c1       	rjmp	.+656    	; 0x7ac0 <disk_ioctl+0x2f6>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    7830:	89 81       	ldd	r24, Y+1	; 0x01
    7832:	82 95       	swap	r24
    7834:	86 95       	lsr	r24
    7836:	86 95       	lsr	r24
    7838:	83 70       	andi	r24, 0x03	; 3
    783a:	81 30       	cpi	r24, 0x01	; 1
    783c:	31 f5       	brne	.+76     	; 0x788a <disk_ioctl+0xc0>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    783e:	88 85       	ldd	r24, Y+8	; 0x08
    7840:	8f 73       	andi	r24, 0x3F	; 63
    7842:	90 e0       	ldi	r25, 0x00	; 0
    7844:	a0 e0       	ldi	r26, 0x00	; 0
    7846:	b0 e0       	ldi	r27, 0x00	; 0
    7848:	dc 01       	movw	r26, r24
    784a:	99 27       	eor	r25, r25
    784c:	88 27       	eor	r24, r24
    784e:	01 96       	adiw	r24, 0x01	; 1
    7850:	a1 1d       	adc	r26, r1
    7852:	b1 1d       	adc	r27, r1
    7854:	29 85       	ldd	r18, Y+9	; 0x09
    7856:	30 e0       	ldi	r19, 0x00	; 0
    7858:	32 2f       	mov	r19, r18
    785a:	22 27       	eor	r18, r18
    785c:	4a 85       	ldd	r20, Y+10	; 0x0a
    785e:	24 0f       	add	r18, r20
    7860:	31 1d       	adc	r19, r1
    7862:	82 0f       	add	r24, r18
    7864:	93 1f       	adc	r25, r19
    7866:	a1 1d       	adc	r26, r1
    7868:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = csize << 10;
    786a:	07 2e       	mov	r0, r23
    786c:	7a e0       	ldi	r23, 0x0A	; 10
    786e:	88 0f       	add	r24, r24
    7870:	99 1f       	adc	r25, r25
    7872:	aa 1f       	adc	r26, r26
    7874:	bb 1f       	adc	r27, r27
    7876:	7a 95       	dec	r23
    7878:	d1 f7       	brne	.-12     	; 0x786e <disk_ioctl+0xa4>
    787a:	70 2d       	mov	r23, r0
    787c:	f7 01       	movw	r30, r14
    787e:	80 83       	st	Z, r24
    7880:	91 83       	std	Z+1, r25	; 0x01
    7882:	a2 83       	std	Z+2, r26	; 0x02
    7884:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    7886:	10 e0       	ldi	r17, 0x00	; 0
    7888:	2e c1       	rjmp	.+604    	; 0x7ae6 <disk_ioctl+0x31c>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    788a:	49 85       	ldd	r20, Y+9	; 0x09
    788c:	42 95       	swap	r20
    788e:	46 95       	lsr	r20
    7890:	46 95       	lsr	r20
    7892:	43 70       	andi	r20, 0x03	; 3
    7894:	88 85       	ldd	r24, Y+8	; 0x08
    7896:	50 e0       	ldi	r21, 0x00	; 0
    7898:	f4 e0       	ldi	r31, 0x04	; 4
    789a:	8f 9f       	mul	r24, r31
    789c:	40 0d       	add	r20, r0
    789e:	51 1d       	adc	r21, r1
    78a0:	11 24       	eor	r1, r1
    78a2:	4f 5f       	subi	r20, 0xFF	; 255
    78a4:	5f 4f       	sbci	r21, 0xFF	; 255
    78a6:	8f 81       	ldd	r24, Y+7	; 0x07
    78a8:	83 70       	andi	r24, 0x03	; 3
    78aa:	90 e0       	ldi	r25, 0x00	; 0
    78ac:	98 2f       	mov	r25, r24
    78ae:	88 27       	eor	r24, r24
    78b0:	99 0f       	add	r25, r25
    78b2:	99 0f       	add	r25, r25
    78b4:	48 0f       	add	r20, r24
    78b6:	59 1f       	adc	r21, r25
    78b8:	60 e0       	ldi	r22, 0x00	; 0
    78ba:	70 e0       	ldi	r23, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    78bc:	9e 81       	ldd	r25, Y+6	; 0x06
    78be:	9f 70       	andi	r25, 0x0F	; 15
    78c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    78c2:	88 1f       	adc	r24, r24
    78c4:	88 27       	eor	r24, r24
    78c6:	88 1f       	adc	r24, r24
    78c8:	98 0f       	add	r25, r24
    78ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    78cc:	83 70       	andi	r24, 0x03	; 3
    78ce:	88 0f       	add	r24, r24
    78d0:	89 0f       	add	r24, r25
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    78d2:	87 50       	subi	r24, 0x07	; 7
    78d4:	8a 01       	movw	r16, r20
    78d6:	9b 01       	movw	r18, r22
    78d8:	04 c0       	rjmp	.+8      	; 0x78e2 <disk_ioctl+0x118>
    78da:	00 0f       	add	r16, r16
    78dc:	11 1f       	adc	r17, r17
    78de:	22 1f       	adc	r18, r18
    78e0:	33 1f       	adc	r19, r19
    78e2:	8a 95       	dec	r24
    78e4:	d2 f7       	brpl	.-12     	; 0x78da <disk_ioctl+0x110>
    78e6:	f7 01       	movw	r30, r14
    78e8:	00 83       	st	Z, r16
    78ea:	11 83       	std	Z+1, r17	; 0x01
    78ec:	22 83       	std	Z+2, r18	; 0x02
    78ee:	33 83       	std	Z+3, r19	; 0x03
			}
			res = RES_OK;
    78f0:	10 e0       	ldi	r17, 0x00	; 0
    78f2:	f9 c0       	rjmp	.+498    	; 0x7ae6 <disk_ioctl+0x31c>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    78f4:	80 91 60 2a 	lds	r24, 0x2A60
    78f8:	82 ff       	sbrs	r24, 2
    78fa:	2d c0       	rjmp	.+90     	; 0x7956 <disk_ioctl+0x18c>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    78fc:	40 e0       	ldi	r20, 0x00	; 0
    78fe:	50 e0       	ldi	r21, 0x00	; 0
    7900:	ba 01       	movw	r22, r20
    7902:	8d e8       	ldi	r24, 0x8D	; 141
    7904:	e3 dc       	rcall	.-1594   	; 0x72cc <send_cmd>
    7906:	81 11       	cpse	r24, r1
    7908:	dd c0       	rjmp	.+442    	; 0x7ac4 <disk_ioctl+0x2fa>
				xchg_spi(0xFF);
    790a:	8f ef       	ldi	r24, 0xFF	; 255
    790c:	bb dc       	rcall	.-1674   	; 0x7284 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    790e:	60 e1       	ldi	r22, 0x10	; 16
    7910:	70 e0       	ldi	r23, 0x00	; 0
    7912:	ce 01       	movw	r24, r28
    7914:	01 96       	adiw	r24, 0x01	; 1
    7916:	2b dd       	rcall	.-1450   	; 0x736e <rcvr_datablock>
    7918:	89 2b       	or	r24, r25
    791a:	09 f4       	brne	.+2      	; 0x791e <disk_ioctl+0x154>
    791c:	d5 c0       	rjmp	.+426    	; 0x7ac8 <disk_ioctl+0x2fe>
    791e:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    7920:	8f ef       	ldi	r24, 0xFF	; 255
    7922:	b0 dc       	rcall	.-1696   	; 0x7284 <xchg_spi>
    7924:	11 50       	subi	r17, 0x01	; 1
    7926:	e1 f7       	brne	.-8      	; 0x7920 <disk_ioctl+0x156>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    7928:	8b 85       	ldd	r24, Y+11	; 0x0b
    792a:	82 95       	swap	r24
    792c:	8f 70       	andi	r24, 0x0F	; 15
    792e:	40 e1       	ldi	r20, 0x10	; 16
    7930:	50 e0       	ldi	r21, 0x00	; 0
    7932:	60 e0       	ldi	r22, 0x00	; 0
    7934:	70 e0       	ldi	r23, 0x00	; 0
    7936:	8a 01       	movw	r16, r20
    7938:	9b 01       	movw	r18, r22
    793a:	04 c0       	rjmp	.+8      	; 0x7944 <disk_ioctl+0x17a>
    793c:	00 0f       	add	r16, r16
    793e:	11 1f       	adc	r17, r17
    7940:	22 1f       	adc	r18, r18
    7942:	33 1f       	adc	r19, r19
    7944:	8a 95       	dec	r24
    7946:	d2 f7       	brpl	.-12     	; 0x793c <disk_ioctl+0x172>
    7948:	f7 01       	movw	r30, r14
    794a:	00 83       	st	Z, r16
    794c:	11 83       	std	Z+1, r17	; 0x01
    794e:	22 83       	std	Z+2, r18	; 0x02
    7950:	33 83       	std	Z+3, r19	; 0x03
					res = RES_OK;
    7952:	10 e0       	ldi	r17, 0x00	; 0
    7954:	c8 c0       	rjmp	.+400    	; 0x7ae6 <disk_ioctl+0x31c>
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    7956:	40 e0       	ldi	r20, 0x00	; 0
    7958:	50 e0       	ldi	r21, 0x00	; 0
    795a:	ba 01       	movw	r22, r20
    795c:	89 e0       	ldi	r24, 0x09	; 9
    795e:	b6 dc       	rcall	.-1684   	; 0x72cc <send_cmd>
    7960:	81 11       	cpse	r24, r1
    7962:	b4 c0       	rjmp	.+360    	; 0x7acc <disk_ioctl+0x302>
    7964:	60 e1       	ldi	r22, 0x10	; 16
    7966:	70 e0       	ldi	r23, 0x00	; 0
    7968:	ce 01       	movw	r24, r28
    796a:	01 96       	adiw	r24, 0x01	; 1
    796c:	00 dd       	rcall	.-1536   	; 0x736e <rcvr_datablock>
    796e:	89 2b       	or	r24, r25
    7970:	09 f4       	brne	.+2      	; 0x7974 <disk_ioctl+0x1aa>
    7972:	ae c0       	rjmp	.+348    	; 0x7ad0 <disk_ioctl+0x306>
				if (CardType & CT_SD1) {	/* SDv1 */
    7974:	80 91 60 2a 	lds	r24, 0x2A60
    7978:	81 ff       	sbrs	r24, 1
    797a:	20 c0       	rjmp	.+64     	; 0x79bc <disk_ioctl+0x1f2>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    797c:	8c 85       	ldd	r24, Y+12	; 0x0c
    797e:	88 1f       	adc	r24, r24
    7980:	88 27       	eor	r24, r24
    7982:	88 1f       	adc	r24, r24
    7984:	90 e0       	ldi	r25, 0x00	; 0
    7986:	01 96       	adiw	r24, 0x01	; 1
    7988:	2b 85       	ldd	r18, Y+11	; 0x0b
    798a:	2f 73       	andi	r18, 0x3F	; 63
    798c:	82 0f       	add	r24, r18
    798e:	91 1d       	adc	r25, r1
    7990:	82 0f       	add	r24, r18
    7992:	91 1d       	adc	r25, r1
    7994:	2e 85       	ldd	r18, Y+14	; 0x0e
    7996:	22 95       	swap	r18
    7998:	26 95       	lsr	r18
    799a:	26 95       	lsr	r18
    799c:	23 70       	andi	r18, 0x03	; 3
    799e:	21 50       	subi	r18, 0x01	; 1
    79a0:	02 c0       	rjmp	.+4      	; 0x79a6 <disk_ioctl+0x1dc>
    79a2:	88 0f       	add	r24, r24
    79a4:	99 1f       	adc	r25, r25
    79a6:	2a 95       	dec	r18
    79a8:	e2 f7       	brpl	.-8      	; 0x79a2 <disk_ioctl+0x1d8>
    79aa:	a0 e0       	ldi	r26, 0x00	; 0
    79ac:	b0 e0       	ldi	r27, 0x00	; 0
    79ae:	f7 01       	movw	r30, r14
    79b0:	80 83       	st	Z, r24
    79b2:	91 83       	std	Z+1, r25	; 0x01
    79b4:	a2 83       	std	Z+2, r26	; 0x02
    79b6:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    79b8:	10 e0       	ldi	r17, 0x00	; 0
    79ba:	95 c0       	rjmp	.+298    	; 0x7ae6 <disk_ioctl+0x31c>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    79bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    79be:	98 2f       	mov	r25, r24
    79c0:	93 70       	andi	r25, 0x03	; 3
    79c2:	82 95       	swap	r24
    79c4:	86 95       	lsr	r24
    79c6:	87 70       	andi	r24, 0x07	; 7
    79c8:	48 2f       	mov	r20, r24
    79ca:	50 e0       	ldi	r21, 0x00	; 0
    79cc:	f8 e0       	ldi	r31, 0x08	; 8
    79ce:	9f 9f       	mul	r25, r31
    79d0:	40 0d       	add	r20, r0
    79d2:	51 1d       	adc	r21, r1
    79d4:	11 24       	eor	r1, r1
    79d6:	4f 5f       	subi	r20, 0xFF	; 255
    79d8:	5f 4f       	sbci	r21, 0xFF	; 255
    79da:	2b 85       	ldd	r18, Y+11	; 0x0b
    79dc:	2c 77       	andi	r18, 0x7C	; 124
    79de:	30 e0       	ldi	r19, 0x00	; 0
    79e0:	35 95       	asr	r19
    79e2:	27 95       	ror	r18
    79e4:	35 95       	asr	r19
    79e6:	27 95       	ror	r18
    79e8:	2f 5f       	subi	r18, 0xFF	; 255
    79ea:	3f 4f       	sbci	r19, 0xFF	; 255
    79ec:	42 9f       	mul	r20, r18
    79ee:	c0 01       	movw	r24, r0
    79f0:	43 9f       	mul	r20, r19
    79f2:	90 0d       	add	r25, r0
    79f4:	52 9f       	mul	r21, r18
    79f6:	90 0d       	add	r25, r0
    79f8:	11 24       	eor	r1, r1
    79fa:	a0 e0       	ldi	r26, 0x00	; 0
    79fc:	b0 e0       	ldi	r27, 0x00	; 0
    79fe:	f7 01       	movw	r30, r14
    7a00:	80 83       	st	Z, r24
    7a02:	91 83       	std	Z+1, r25	; 0x01
    7a04:	a2 83       	std	Z+2, r26	; 0x02
    7a06:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    7a08:	10 e0       	ldi	r17, 0x00	; 0
    7a0a:	6d c0       	rjmp	.+218    	; 0x7ae6 <disk_ioctl+0x31c>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    7a0c:	80 91 60 2a 	lds	r24, 0x2A60
    7a10:	fa 01       	movw	r30, r20
    7a12:	80 83       	st	Z, r24
		res = RES_OK;
    7a14:	10 e0       	ldi	r17, 0x00	; 0
		break;
    7a16:	67 c0       	rjmp	.+206    	; 0x7ae6 <disk_ioctl+0x31c>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    7a18:	40 e0       	ldi	r20, 0x00	; 0
    7a1a:	50 e0       	ldi	r21, 0x00	; 0
    7a1c:	ba 01       	movw	r22, r20
    7a1e:	89 e0       	ldi	r24, 0x09	; 9
    7a20:	55 dc       	rcall	.-1878   	; 0x72cc <send_cmd>
    7a22:	81 11       	cpse	r24, r1
    7a24:	57 c0       	rjmp	.+174    	; 0x7ad4 <disk_ioctl+0x30a>
			&& rcvr_datablock(ptr, 16))
    7a26:	60 e1       	ldi	r22, 0x10	; 16
    7a28:	70 e0       	ldi	r23, 0x00	; 0
    7a2a:	c7 01       	movw	r24, r14
    7a2c:	a0 dc       	rcall	.-1728   	; 0x736e <rcvr_datablock>
    7a2e:	11 e0       	ldi	r17, 0x01	; 1
    7a30:	89 2b       	or	r24, r25
    7a32:	09 f4       	brne	.+2      	; 0x7a36 <disk_ioctl+0x26c>
    7a34:	58 c0       	rjmp	.+176    	; 0x7ae6 <disk_ioctl+0x31c>
    7a36:	10 e0       	ldi	r17, 0x00	; 0
    7a38:	56 c0       	rjmp	.+172    	; 0x7ae6 <disk_ioctl+0x31c>
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    7a3a:	40 e0       	ldi	r20, 0x00	; 0
    7a3c:	50 e0       	ldi	r21, 0x00	; 0
    7a3e:	ba 01       	movw	r22, r20
    7a40:	8a e0       	ldi	r24, 0x0A	; 10
    7a42:	44 dc       	rcall	.-1912   	; 0x72cc <send_cmd>
    7a44:	81 11       	cpse	r24, r1
    7a46:	48 c0       	rjmp	.+144    	; 0x7ad8 <disk_ioctl+0x30e>
			&& rcvr_datablock(ptr, 16))
    7a48:	60 e1       	ldi	r22, 0x10	; 16
    7a4a:	70 e0       	ldi	r23, 0x00	; 0
    7a4c:	c7 01       	movw	r24, r14
    7a4e:	8f dc       	rcall	.-1762   	; 0x736e <rcvr_datablock>
    7a50:	11 e0       	ldi	r17, 0x01	; 1
    7a52:	89 2b       	or	r24, r25
    7a54:	09 f4       	brne	.+2      	; 0x7a58 <disk_ioctl+0x28e>
    7a56:	47 c0       	rjmp	.+142    	; 0x7ae6 <disk_ioctl+0x31c>
    7a58:	10 e0       	ldi	r17, 0x00	; 0
    7a5a:	45 c0       	rjmp	.+138    	; 0x7ae6 <disk_ioctl+0x31c>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    7a5c:	40 e0       	ldi	r20, 0x00	; 0
    7a5e:	50 e0       	ldi	r21, 0x00	; 0
    7a60:	ba 01       	movw	r22, r20
    7a62:	8a e3       	ldi	r24, 0x3A	; 58
    7a64:	33 dc       	rcall	.-1946   	; 0x72cc <send_cmd>
    7a66:	81 11       	cpse	r24, r1
    7a68:	39 c0       	rjmp	.+114    	; 0x7adc <disk_ioctl+0x312>
    7a6a:	87 01       	movw	r16, r14
    7a6c:	f4 e0       	ldi	r31, 0x04	; 4
    7a6e:	ef 0e       	add	r14, r31
    7a70:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    7a72:	8f ef       	ldi	r24, 0xFF	; 255
    7a74:	07 dc       	rcall	.-2034   	; 0x7284 <xchg_spi>
    7a76:	f8 01       	movw	r30, r16
    7a78:	81 93       	st	Z+, r24
    7a7a:	8f 01       	movw	r16, r30
    7a7c:	ee 15       	cp	r30, r14
    7a7e:	ff 05       	cpc	r31, r15
    7a80:	c1 f7       	brne	.-16     	; 0x7a72 <disk_ioctl+0x2a8>
    7a82:	2e c0       	rjmp	.+92     	; 0x7ae0 <disk_ioctl+0x316>
			res = RES_OK;
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    7a84:	40 e0       	ldi	r20, 0x00	; 0
    7a86:	50 e0       	ldi	r21, 0x00	; 0
    7a88:	ba 01       	movw	r22, r20
    7a8a:	8d e8       	ldi	r24, 0x8D	; 141
    7a8c:	1f dc       	rcall	.-1986   	; 0x72cc <send_cmd>
    7a8e:	81 11       	cpse	r24, r1
    7a90:	29 c0       	rjmp	.+82     	; 0x7ae4 <disk_ioctl+0x31a>
			xchg_spi(0xFF);
    7a92:	8f ef       	ldi	r24, 0xFF	; 255
    7a94:	f7 db       	rcall	.-2066   	; 0x7284 <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    7a96:	60 e4       	ldi	r22, 0x40	; 64
    7a98:	70 e0       	ldi	r23, 0x00	; 0
    7a9a:	c7 01       	movw	r24, r14
    7a9c:	68 dc       	rcall	.-1840   	; 0x736e <rcvr_datablock>
    7a9e:	11 e0       	ldi	r17, 0x01	; 1
    7aa0:	89 2b       	or	r24, r25
    7aa2:	09 f1       	breq	.+66     	; 0x7ae6 <disk_ioctl+0x31c>
    7aa4:	10 e0       	ldi	r17, 0x00	; 0
    7aa6:	1f c0       	rjmp	.+62     	; 0x7ae6 <disk_ioctl+0x31c>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    7aa8:	9c dc       	rcall	.-1736   	; 0x73e2 <power_off>
		Stat |= STA_NOINIT;
    7aaa:	80 91 23 20 	lds	r24, 0x2023
    7aae:	81 60       	ori	r24, 0x01	; 1
    7ab0:	80 93 23 20 	sts	0x2023, r24
		res = RES_OK;
    7ab4:	10 e0       	ldi	r17, 0x00	; 0
		break;
    7ab6:	17 c0       	rjmp	.+46     	; 0x7ae6 <disk_ioctl+0x31c>

	default:
		res = RES_PARERR;
    7ab8:	14 e0       	ldi	r17, 0x04	; 4
    7aba:	15 c0       	rjmp	.+42     	; 0x7ae6 <disk_ioctl+0x31c>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    7abc:	11 e0       	ldi	r17, 0x01	; 1
    7abe:	13 c0       	rjmp	.+38     	; 0x7ae6 <disk_ioctl+0x31c>
    7ac0:	11 e0       	ldi	r17, 0x01	; 1
    7ac2:	11 c0       	rjmp	.+34     	; 0x7ae6 <disk_ioctl+0x31c>
    7ac4:	11 e0       	ldi	r17, 0x01	; 1
    7ac6:	0f c0       	rjmp	.+30     	; 0x7ae6 <disk_ioctl+0x31c>
    7ac8:	11 e0       	ldi	r17, 0x01	; 1
    7aca:	0d c0       	rjmp	.+26     	; 0x7ae6 <disk_ioctl+0x31c>
    7acc:	11 e0       	ldi	r17, 0x01	; 1
    7ace:	0b c0       	rjmp	.+22     	; 0x7ae6 <disk_ioctl+0x31c>
    7ad0:	11 e0       	ldi	r17, 0x01	; 1
    7ad2:	09 c0       	rjmp	.+18     	; 0x7ae6 <disk_ioctl+0x31c>
    7ad4:	11 e0       	ldi	r17, 0x01	; 1
    7ad6:	07 c0       	rjmp	.+14     	; 0x7ae6 <disk_ioctl+0x31c>
    7ad8:	11 e0       	ldi	r17, 0x01	; 1
    7ada:	05 c0       	rjmp	.+10     	; 0x7ae6 <disk_ioctl+0x31c>
    7adc:	11 e0       	ldi	r17, 0x01	; 1
    7ade:	03 c0       	rjmp	.+6      	; 0x7ae6 <disk_ioctl+0x31c>
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
			res = RES_OK;
    7ae0:	10 e0       	ldi	r17, 0x00	; 0
    7ae2:	01 c0       	rjmp	.+2      	; 0x7ae6 <disk_ioctl+0x31c>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    7ae4:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    7ae6:	d1 db       	rcall	.-2142   	; 0x728a <deselect>

	return res;
    7ae8:	81 2f       	mov	r24, r17
    7aea:	03 c0       	rjmp	.+6      	; 0x7af2 <disk_ioctl+0x328>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    7aec:	84 e0       	ldi	r24, 0x04	; 4
    7aee:	01 c0       	rjmp	.+2      	; 0x7af2 <disk_ioctl+0x328>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    7af0:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    7af2:	60 96       	adiw	r28, 0x10	; 16
    7af4:	cd bf       	out	0x3d, r28	; 61
    7af6:	de bf       	out	0x3e, r29	; 62
    7af8:	df 91       	pop	r29
    7afa:	cf 91       	pop	r28
    7afc:	1f 91       	pop	r17
    7afe:	0f 91       	pop	r16
    7b00:	ff 90       	pop	r15
    7b02:	ef 90       	pop	r14
    7b04:	08 95       	ret

00007b06 <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    7b06:	80 91 62 2a 	lds	r24, 0x2A62
	if (n) Timer1 = --n;
    7b0a:	88 23       	and	r24, r24
    7b0c:	19 f0       	breq	.+6      	; 0x7b14 <disk_timerproc+0xe>
    7b0e:	81 50       	subi	r24, 0x01	; 1
    7b10:	80 93 62 2a 	sts	0x2A62, r24
	n = Timer2;
    7b14:	80 91 61 2a 	lds	r24, 0x2A61
	if (n) Timer2 = --n;
    7b18:	88 23       	and	r24, r24
    7b1a:	19 f0       	breq	.+6      	; 0x7b22 <disk_timerproc+0x1c>
    7b1c:	81 50       	subi	r24, 0x01	; 1
    7b1e:	80 93 61 2a 	sts	0x2A61, r24

	s = Stat;
    7b22:	80 91 23 20 	lds	r24, 0x2023
	if (MMC_WP)				/* Write protected */
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;

	if (MMC_CD)				/* Card inserted */
    7b26:	e0 e4       	ldi	r30, 0x40	; 64
    7b28:	f6 e0       	ldi	r31, 0x06	; 6
    7b2a:	90 85       	ldd	r25, Z+8	; 0x08
    7b2c:	93 fd       	sbrc	r25, 3
    7b2e:	02 c0       	rjmp	.+4      	; 0x7b34 <disk_timerproc+0x2e>
		s &= ~STA_NODISK;
    7b30:	89 7f       	andi	r24, 0xF9	; 249
    7b32:	02 c0       	rjmp	.+4      	; 0x7b38 <disk_timerproc+0x32>
	s = Stat;

	if (MMC_WP)				/* Write protected */
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;
    7b34:	8b 7f       	andi	r24, 0xFB	; 251

	if (MMC_CD)				/* Card inserted */
		s &= ~STA_NODISK;
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
    7b36:	83 60       	ori	r24, 0x03	; 3

	Stat = s;				/* Update MMC status */
    7b38:	80 93 23 20 	sts	0x2023, r24
    7b3c:	08 95       	ret

00007b3e <__vector_17>:
}

ISR(TCC0_CCB_vect) {
    7b3e:	1f 92       	push	r1
    7b40:	0f 92       	push	r0
    7b42:	0f b6       	in	r0, 0x3f	; 63
    7b44:	0f 92       	push	r0
    7b46:	11 24       	eor	r1, r1
    7b48:	0b b6       	in	r0, 0x3b	; 59
    7b4a:	0f 92       	push	r0
    7b4c:	2f 93       	push	r18
    7b4e:	3f 93       	push	r19
    7b50:	4f 93       	push	r20
    7b52:	5f 93       	push	r21
    7b54:	6f 93       	push	r22
    7b56:	7f 93       	push	r23
    7b58:	8f 93       	push	r24
    7b5a:	9f 93       	push	r25
    7b5c:	af 93       	push	r26
    7b5e:	bf 93       	push	r27
    7b60:	ef 93       	push	r30
    7b62:	ff 93       	push	r31
	disk_timerproc();
    7b64:	d0 df       	rcall	.-96     	; 0x7b06 <disk_timerproc>
}
    7b66:	ff 91       	pop	r31
    7b68:	ef 91       	pop	r30
    7b6a:	bf 91       	pop	r27
    7b6c:	af 91       	pop	r26
    7b6e:	9f 91       	pop	r25
    7b70:	8f 91       	pop	r24
    7b72:	7f 91       	pop	r23
    7b74:	6f 91       	pop	r22
    7b76:	5f 91       	pop	r21
    7b78:	4f 91       	pop	r20
    7b7a:	3f 91       	pop	r19
    7b7c:	2f 91       	pop	r18
    7b7e:	0f 90       	pop	r0
    7b80:	0b be       	out	0x3b, r0	; 59
    7b82:	0f 90       	pop	r0
    7b84:	0f be       	out	0x3f, r0	; 63
    7b86:	0f 90       	pop	r0
    7b88:	1f 90       	pop	r1
    7b8a:	18 95       	reti

00007b8c <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
    7b8c:	1f 92       	push	r1
    7b8e:	0f 92       	push	r0
    7b90:	0f b6       	in	r0, 0x3f	; 63
    7b92:	0f 92       	push	r0
    7b94:	11 24       	eor	r1, r1
    7b96:	0b b6       	in	r0, 0x3b	; 59
    7b98:	0f 92       	push	r0
    7b9a:	2f 93       	push	r18
    7b9c:	3f 93       	push	r19
    7b9e:	4f 93       	push	r20
    7ba0:	5f 93       	push	r21
    7ba2:	8f 93       	push	r24
    7ba4:	9f 93       	push	r25
    7ba6:	af 93       	push	r26
    7ba8:	bf 93       	push	r27
    7baa:	ef 93       	push	r30
    7bac:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    7bae:	e0 91 63 2a 	lds	r30, 0x2A63
    7bb2:	f0 91 64 2a 	lds	r31, 0x2A64
	UINT ri, ct;
	BYTE *buff, l, r;

	if (!fcb) return;
    7bb6:	30 97       	sbiw	r30, 0x00	; 0
    7bb8:	09 f4       	brne	.+2      	; 0x7bbc <__vector_14+0x30>
    7bba:	58 c0       	rjmp	.+176    	; 0x7c6c <__vector_14+0xe0>
	ct = fcb->ct; ri = fcb->ri;
    7bbc:	46 81       	ldd	r20, Z+6	; 0x06
    7bbe:	57 81       	ldd	r21, Z+7	; 0x07
    7bc0:	22 81       	ldd	r18, Z+2	; 0x02
    7bc2:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    7bc4:	80 85       	ldd	r24, Z+8	; 0x08
    7bc6:	91 85       	ldd	r25, Z+9	; 0x09
    7bc8:	dc 01       	movw	r26, r24
    7bca:	a2 0f       	add	r26, r18
    7bcc:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    7bce:	80 81       	ld	r24, Z
    7bd0:	91 81       	ldd	r25, Z+1	; 0x01
    7bd2:	81 30       	cpi	r24, 0x01	; 1
    7bd4:	91 05       	cpc	r25, r1
    7bd6:	71 f0       	breq	.+28     	; 0x7bf4 <__vector_14+0x68>
    7bd8:	18 f0       	brcs	.+6      	; 0x7be0 <__vector_14+0x54>
    7bda:	02 97       	sbiw	r24, 0x02	; 2
    7bdc:	a1 f0       	breq	.+40     	; 0x7c06 <__vector_14+0x7a>
    7bde:	1e c0       	rjmp	.+60     	; 0x7c1c <__vector_14+0x90>
		case 0:		/* Mono, 8bit */
			if (ct < 1) return;
    7be0:	41 15       	cp	r20, r1
    7be2:	51 05       	cpc	r21, r1
    7be4:	09 f4       	brne	.+2      	; 0x7be8 <__vector_14+0x5c>
    7be6:	42 c0       	rjmp	.+132    	; 0x7c6c <__vector_14+0xe0>
			l = r = buff[0];
    7be8:	8c 91       	ld	r24, X
			ct -= 1; ri += 1;
    7bea:	41 50       	subi	r20, 0x01	; 1
    7bec:	51 09       	sbc	r21, r1
    7bee:	2f 5f       	subi	r18, 0xFF	; 255
    7bf0:	3f 4f       	sbci	r19, 0xFF	; 255
			break;
    7bf2:	1d c0       	rjmp	.+58     	; 0x7c2e <__vector_14+0xa2>
		case 1:		/* Stereo, 8bit */
			if (ct < 2) return;
    7bf4:	42 30       	cpi	r20, 0x02	; 2
    7bf6:	51 05       	cpc	r21, r1
    7bf8:	c8 f1       	brcs	.+114    	; 0x7c6c <__vector_14+0xe0>
			l = buff[0]; r = buff[1];
    7bfa:	8c 91       	ld	r24, X
			ct -= 2; ri += 2;
    7bfc:	42 50       	subi	r20, 0x02	; 2
    7bfe:	51 09       	sbc	r21, r1
    7c00:	2e 5f       	subi	r18, 0xFE	; 254
    7c02:	3f 4f       	sbci	r19, 0xFF	; 255
			break;
    7c04:	14 c0       	rjmp	.+40     	; 0x7c2e <__vector_14+0xa2>
		case 2:		/* Mono, 16bit */
			if (ct < 2) return;
    7c06:	42 30       	cpi	r20, 0x02	; 2
    7c08:	51 05       	cpc	r21, r1
    7c0a:	80 f1       	brcs	.+96     	; 0x7c6c <__vector_14+0xe0>
			l = r = buff[1] + 128;
    7c0c:	11 96       	adiw	r26, 0x01	; 1
    7c0e:	8c 91       	ld	r24, X
    7c10:	80 58       	subi	r24, 0x80	; 128
			ct -= 2; ri += 2;
    7c12:	42 50       	subi	r20, 0x02	; 2
    7c14:	51 09       	sbc	r21, r1
    7c16:	2e 5f       	subi	r18, 0xFE	; 254
    7c18:	3f 4f       	sbci	r19, 0xFF	; 255
			break;
    7c1a:	09 c0       	rjmp	.+18     	; 0x7c2e <__vector_14+0xa2>
		default:	/* Stereo, 16bit */
			if (ct < 4) return;
    7c1c:	44 30       	cpi	r20, 0x04	; 4
    7c1e:	51 05       	cpc	r21, r1
    7c20:	28 f1       	brcs	.+74     	; 0x7c6c <__vector_14+0xe0>
			l = buff[1]; r = buff[3];
    7c22:	11 96       	adiw	r26, 0x01	; 1
    7c24:	8c 91       	ld	r24, X
			ct -= 4; ri += 4;
    7c26:	44 50       	subi	r20, 0x04	; 4
    7c28:	51 09       	sbc	r21, r1
    7c2a:	2c 5f       	subi	r18, 0xFC	; 252
    7c2c:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fcb->ct = ct;
    7c2e:	46 83       	std	Z+6, r20	; 0x06
    7c30:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    7c32:	42 85       	ldd	r20, Z+10	; 0x0a
    7c34:	53 85       	ldd	r21, Z+11	; 0x0b
    7c36:	41 50       	subi	r20, 0x01	; 1
    7c38:	51 09       	sbc	r21, r1
    7c3a:	24 23       	and	r18, r20
    7c3c:	35 23       	and	r19, r21
    7c3e:	22 83       	std	Z+2, r18	; 0x02
    7c40:	33 83       	std	Z+3, r19	; 0x03
	
	dac_ch0_write((1<<1)+(l<<3));
    7c42:	90 e0       	ldi	r25, 0x00	; 0
    7c44:	88 0f       	add	r24, r24
    7c46:	99 1f       	adc	r25, r25
    7c48:	88 0f       	add	r24, r24
    7c4a:	99 1f       	adc	r25, r25
    7c4c:	88 0f       	add	r24, r24
    7c4e:	99 1f       	adc	r25, r25
    7c50:	9c 01       	movw	r18, r24
    7c52:	2e 5f       	subi	r18, 0xFE	; 254
    7c54:	3f 4f       	sbci	r19, 0xFF	; 255
void dac_speaker_off(void);
void dac_setup(bool dual_channel);
void dac_off(void);

static inline void dac_ch0_write(uint16_t data) {
	DACB.CH0DATA = data;
    7c56:	e0 e2       	ldi	r30, 0x20	; 32
    7c58:	f3 e0       	ldi	r31, 0x03	; 3
    7c5a:	20 8f       	std	Z+24, r18	; 0x18
    7c5c:	31 8f       	std	Z+25, r19	; 0x19
	dac_ch1_write((1<<1)-(l<<3));
    7c5e:	22 e0       	ldi	r18, 0x02	; 2
    7c60:	30 e0       	ldi	r19, 0x00	; 0
    7c62:	a9 01       	movw	r20, r18
    7c64:	48 1b       	sub	r20, r24
    7c66:	59 0b       	sbc	r21, r25
}

static inline void dac_ch1_write(uint16_t data) {
	DACB.CH1DATA = data;
    7c68:	42 8f       	std	Z+26, r20	; 0x1a
    7c6a:	53 8f       	std	Z+27, r21	; 0x1b
}
    7c6c:	ff 91       	pop	r31
    7c6e:	ef 91       	pop	r30
    7c70:	bf 91       	pop	r27
    7c72:	af 91       	pop	r26
    7c74:	9f 91       	pop	r25
    7c76:	8f 91       	pop	r24
    7c78:	5f 91       	pop	r21
    7c7a:	4f 91       	pop	r20
    7c7c:	3f 91       	pop	r19
    7c7e:	2f 91       	pop	r18
    7c80:	0f 90       	pop	r0
    7c82:	0b be       	out	0x3b, r0	; 59
    7c84:	0f 90       	pop	r0
    7c86:	0f be       	out	0x3f, r0	; 63
    7c88:	0f 90       	pop	r0
    7c8a:	1f 90       	pop	r1
    7c8c:	18 95       	reti

00007c8e <sound_start>:

int sound_start (
	WAVFIFO* fcb,	/* Pointer to the sound FIFO control structure */
	DWORD fs		/* Sampling frequency [Hz] */
)
{
    7c8e:	0f 93       	push	r16
    7c90:	1f 93       	push	r17
	if (fs < 8000 || fs > 44100) return 0;	/* Check fs range */
    7c92:	8a 01       	movw	r16, r20
    7c94:	9b 01       	movw	r18, r22
    7c96:	00 54       	subi	r16, 0x40	; 64
    7c98:	1f 41       	sbci	r17, 0x1F	; 31
    7c9a:	21 09       	sbc	r18, r1
    7c9c:	31 09       	sbc	r19, r1
    7c9e:	05 30       	cpi	r16, 0x05	; 5
    7ca0:	1d 48       	sbci	r17, 0x8D	; 141
    7ca2:	21 05       	cpc	r18, r1
    7ca4:	31 05       	cpc	r19, r1
    7ca6:	e8 f4       	brcc	.+58     	; 0x7ce2 <sound_start+0x54>

	fcb->ri = 0; fcb->wi = 0; fcb->ct = 0;	/* Flush FIFO */
    7ca8:	fc 01       	movw	r30, r24
    7caa:	12 82       	std	Z+2, r1	; 0x02
    7cac:	13 82       	std	Z+3, r1	; 0x03
    7cae:	14 82       	std	Z+4, r1	; 0x04
    7cb0:	15 82       	std	Z+5, r1	; 0x05
    7cb2:	16 82       	std	Z+6, r1	; 0x06
    7cb4:	17 82       	std	Z+7, r1	; 0x07
	WavFifo = fcb;			/* Register FIFO control structure */
    7cb6:	80 93 63 2a 	sts	0x2A63, r24
    7cba:	90 93 64 2a 	sts	0x2A64, r25
	
	dac_setup(true);
    7cbe:	81 e0       	ldi	r24, 0x01	; 1
    7cc0:	0e 94 8c 08 	call	0x1118	; 0x1118 <dac_setup>
	
	TCC0.CNT = 0;
    7cc4:	e0 e0       	ldi	r30, 0x00	; 0
    7cc6:	f8 e0       	ldi	r31, 0x08	; 8
    7cc8:	10 a2       	std	Z+32, r1	; 0x20
    7cca:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = (F_CPU / 44100 - 1);
    7ccc:	84 ed       	ldi	r24, 0xD4	; 212
    7cce:	92 e0       	ldi	r25, 0x02	; 2
    7cd0:	86 a3       	std	Z+38, r24	; 0x26
    7cd2:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    7cd4:	81 e0       	ldi	r24, 0x01	; 1
    7cd6:	80 83       	st	Z, r24
	TCC0.INTCTRLA = TC_OVFINTLVL_HI_gc;
    7cd8:	83 e0       	ldi	r24, 0x03	; 3
    7cda:	86 83       	std	Z+6, r24	; 0x06
	
	return 1;
    7cdc:	81 e0       	ldi	r24, 0x01	; 1
    7cde:	90 e0       	ldi	r25, 0x00	; 0
    7ce0:	02 c0       	rjmp	.+4      	; 0x7ce6 <sound_start+0x58>
int sound_start (
	WAVFIFO* fcb,	/* Pointer to the sound FIFO control structure */
	DWORD fs		/* Sampling frequency [Hz] */
)
{
	if (fs < 8000 || fs > 44100) return 0;	/* Check fs range */
    7ce2:	80 e0       	ldi	r24, 0x00	; 0
    7ce4:	90 e0       	ldi	r25, 0x00	; 0
	TCC0.PER = (F_CPU / 44100 - 1);
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
	TCC0.INTCTRLA = TC_OVFINTLVL_HI_gc;
	
	return 1;
}
    7ce6:	1f 91       	pop	r17
    7ce8:	0f 91       	pop	r16
    7cea:	08 95       	ret

00007cec <sound_stop>:
/*-----------------------------------------------------*/
/* Disable sound output                                */

void sound_stop (void)
{
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    7cec:	e0 e0       	ldi	r30, 0x00	; 0
    7cee:	f8 e0       	ldi	r31, 0x08	; 8
    7cf0:	16 82       	std	Z+6, r1	; 0x06
	dac_off();
    7cf2:	0e 94 bd 08 	call	0x117a	; 0x117a <dac_off>

	WavFifo = 0;		/* Unregister FIFO control structure */
    7cf6:	10 92 63 2a 	sts	0x2A63, r1
    7cfa:	10 92 64 2a 	sts	0x2A64, r1
    7cfe:	08 95       	ret

00007d00 <load_wav>:
FIL *fp,			/* Pointer to the open file object to play */
const char *title,	/* Title (file name, etc...) */
void *work,			/* Pointer to working buffer (must be-4 byte aligned) */
UINT sz_work		/* Size of working buffer (must be power of 2) */
)
{
    7d00:	2f 92       	push	r2
    7d02:	3f 92       	push	r3
    7d04:	4f 92       	push	r4
    7d06:	5f 92       	push	r5
    7d08:	6f 92       	push	r6
    7d0a:	7f 92       	push	r7
    7d0c:	8f 92       	push	r8
    7d0e:	9f 92       	push	r9
    7d10:	af 92       	push	r10
    7d12:	bf 92       	push	r11
    7d14:	cf 92       	push	r12
    7d16:	df 92       	push	r13
    7d18:	ef 92       	push	r14
    7d1a:	ff 92       	push	r15
    7d1c:	0f 93       	push	r16
    7d1e:	1f 93       	push	r17
    7d20:	cf 93       	push	r28
    7d22:	df 93       	push	r29
    7d24:	cd b7       	in	r28, 0x3d	; 61
    7d26:	de b7       	in	r29, 0x3e	; 62
    7d28:	c4 56       	subi	r28, 0x64	; 100
    7d2a:	d1 09       	sbc	r29, r1
    7d2c:	cd bf       	out	0x3d, r28	; 61
    7d2e:	de bf       	out	0x3e, r29	; 62
    7d30:	8c 01       	movw	r16, r24
    7d32:	1a 01       	movw	r2, r20
    7d34:	a1 96       	adiw	r28, 0x21	; 33
    7d36:	2e af       	std	Y+62, r18	; 0x3e
    7d38:	3f af       	std	Y+63, r19	; 0x3f
    7d3a:	a1 97       	sbiw	r28, 0x21	; 33


	//xprintf(PSTR("%s\n"), title);	/* Put title */

	/* Is it a WAV file? */
	if (f_read(fp, buff, 12, &br) || br != 12) return -1;
    7d3c:	9e 01       	movw	r18, r28
    7d3e:	2f 5f       	subi	r18, 0xFF	; 255
    7d40:	3f 4f       	sbci	r19, 0xFF	; 255
    7d42:	4c e0       	ldi	r20, 0x0C	; 12
    7d44:	50 e0       	ldi	r21, 0x00	; 0
    7d46:	b1 01       	movw	r22, r2
    7d48:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <f_read>
    7d4c:	81 11       	cpse	r24, r1
    7d4e:	59 c2       	rjmp	.+1202   	; 0x8202 <load_wav+0x502>
    7d50:	89 81       	ldd	r24, Y+1	; 0x01
    7d52:	9a 81       	ldd	r25, Y+2	; 0x02
    7d54:	0c 97       	sbiw	r24, 0x0c	; 12
    7d56:	09 f0       	breq	.+2      	; 0x7d5a <load_wav+0x5a>
    7d58:	57 c2       	rjmp	.+1198   	; 0x8208 <load_wav+0x508>
	if (LD_DWORD(&buff[0]) != FCC('R','I','F','F')) return -1;
    7d5a:	f1 01       	movw	r30, r2
    7d5c:	80 81       	ld	r24, Z
    7d5e:	91 81       	ldd	r25, Z+1	; 0x01
    7d60:	a2 81       	ldd	r26, Z+2	; 0x02
    7d62:	b3 81       	ldd	r27, Z+3	; 0x03
    7d64:	82 35       	cpi	r24, 0x52	; 82
    7d66:	99 44       	sbci	r25, 0x49	; 73
    7d68:	a6 44       	sbci	r26, 0x46	; 70
    7d6a:	b6 44       	sbci	r27, 0x46	; 70
    7d6c:	09 f0       	breq	.+2      	; 0x7d70 <load_wav+0x70>
    7d6e:	4f c2       	rjmp	.+1182   	; 0x820e <load_wav+0x50e>
	if (LD_DWORD(&buff[8]) != FCC('W','A','V','E')) return -1;
    7d70:	f1 01       	movw	r30, r2
    7d72:	80 85       	ldd	r24, Z+8	; 0x08
    7d74:	91 85       	ldd	r25, Z+9	; 0x09
    7d76:	a2 85       	ldd	r26, Z+10	; 0x0a
    7d78:	b3 85       	ldd	r27, Z+11	; 0x0b
    7d7a:	87 35       	cpi	r24, 0x57	; 87
    7d7c:	91 44       	sbci	r25, 0x41	; 65
    7d7e:	a6 45       	sbci	r26, 0x56	; 86
    7d80:	b5 44       	sbci	r27, 0x45	; 69
    7d82:	09 f0       	breq	.+2      	; 0x7d86 <load_wav+0x86>
    7d84:	47 c2       	rjmp	.+1166   	; 0x8214 <load_wav+0x514>
	eof = LD_DWORD(&buff[4]) + 8;
    7d86:	f1 01       	movw	r30, r2
    7d88:	84 81       	ldd	r24, Z+4	; 0x04
    7d8a:	95 81       	ldd	r25, Z+5	; 0x05
    7d8c:	a6 81       	ldd	r26, Z+6	; 0x06
    7d8e:	b7 81       	ldd	r27, Z+7	; 0x07
    7d90:	2c 01       	movw	r4, r24
    7d92:	3d 01       	movw	r6, r26
    7d94:	f8 e0       	ldi	r31, 0x08	; 8
    7d96:	4f 0e       	add	r4, r31
    7d98:	51 1c       	adc	r5, r1
    7d9a:	61 1c       	adc	r6, r1
    7d9c:	71 1c       	adc	r7, r1

	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
    7d9e:	1f a6       	std	Y+47, r1	; 0x2f
    7da0:	1f 86       	std	Y+15, r1	; 0x0f
	md = fsmp = wsmp = offw = szwav = 0;
    7da2:	6f 96       	adiw	r28, 0x1f	; 31
    7da4:	1c ae       	std	Y+60, r1	; 0x3c
    7da6:	1d ae       	std	Y+61, r1	; 0x3d
    7da8:	1e ae       	std	Y+62, r1	; 0x3e
    7daa:	1f ae       	std	Y+63, r1	; 0x3f
    7dac:	6f 97       	sbiw	r28, 0x1f	; 31
    7dae:	a5 96       	adiw	r28, 0x25	; 37
    7db0:	1c ae       	std	Y+60, r1	; 0x3c
    7db2:	1d ae       	std	Y+61, r1	; 0x3d
    7db4:	1e ae       	std	Y+62, r1	; 0x3e
    7db6:	1f ae       	std	Y+63, r1	; 0x3f
    7db8:	a5 97       	sbiw	r28, 0x25	; 37
    7dba:	67 96       	adiw	r28, 0x17	; 23
    7dbc:	1c ae       	std	Y+60, r1	; 0x3c
    7dbe:	1d ae       	std	Y+61, r1	; 0x3d
    7dc0:	1e ae       	std	Y+62, r1	; 0x3e
    7dc2:	1f ae       	std	Y+63, r1	; 0x3f
    7dc4:	67 97       	sbiw	r28, 0x17	; 23
    7dc6:	69 96       	adiw	r28, 0x19	; 25
    7dc8:	1e ae       	std	Y+62, r1	; 0x3e
    7dca:	1f ae       	std	Y+63, r1	; 0x3f
    7dcc:	69 97       	sbiw	r28, 0x19	; 25
					if (f_read(fp, buff, 8, &br) || br != 8) return -1;
					ssz = (LD_DWORD(&buff[4]) + 1) & ~1;
					p = 0;
					switch (LD_DWORD(buff)) {
						case FCC('I','N','A','M'):		/* INAM sub-chunk */
						p = nam; break;
    7dce:	9e 01       	movw	r18, r28
    7dd0:	21 5f       	subi	r18, 0xF1	; 241
    7dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    7dd4:	61 96       	adiw	r28, 0x11	; 17
    7dd6:	2e af       	std	Y+62, r18	; 0x3e
    7dd8:	3f af       	std	Y+63, r19	; 0x3f
    7dda:	61 97       	sbiw	r28, 0x11	; 17
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
    7ddc:	ae 01       	movw	r20, r28
    7dde:	41 5d       	subi	r20, 0xD1	; 209
    7de0:	5f 4f       	sbci	r21, 0xFF	; 255
    7de2:	63 96       	adiw	r28, 0x13	; 19
    7de4:	4e af       	std	Y+62, r20	; 0x3e
    7de6:	5f af       	std	Y+63, r21	; 0x3f
    7de8:	63 97       	sbiw	r28, 0x13	; 19
	eof = LD_DWORD(&buff[4]) + 8;

	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
	md = fsmp = wsmp = offw = szwav = 0;
	while (f_tell(fp) < eof) {
    7dea:	4a c1       	rjmp	.+660    	; 0x8080 <load_wav+0x380>
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
    7dec:	9e 01       	movw	r18, r28
    7dee:	2f 5f       	subi	r18, 0xFF	; 255
    7df0:	3f 4f       	sbci	r19, 0xFF	; 255
    7df2:	48 e0       	ldi	r20, 0x08	; 8
    7df4:	50 e0       	ldi	r21, 0x00	; 0
    7df6:	b1 01       	movw	r22, r2
    7df8:	c8 01       	movw	r24, r16
    7dfa:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <f_read>
    7dfe:	81 11       	cpse	r24, r1
    7e00:	0c c2       	rjmp	.+1048   	; 0x821a <load_wav+0x51a>
    7e02:	89 81       	ldd	r24, Y+1	; 0x01
    7e04:	9a 81       	ldd	r25, Y+2	; 0x02
    7e06:	08 97       	sbiw	r24, 0x08	; 8
    7e08:	09 f0       	breq	.+2      	; 0x7e0c <load_wav+0x10c>
    7e0a:	0a c2       	rjmp	.+1044   	; 0x8220 <load_wav+0x520>
		sz = (LD_DWORD(&buff[4]) + 1) & ~1;
    7e0c:	d1 01       	movw	r26, r2
    7e0e:	14 96       	adiw	r26, 0x04	; 4
    7e10:	8d 90       	ld	r8, X+
    7e12:	9d 90       	ld	r9, X+
    7e14:	ad 90       	ld	r10, X+
    7e16:	bc 90       	ld	r11, X
    7e18:	17 97       	sbiw	r26, 0x07	; 7
    7e1a:	bf ef       	ldi	r27, 0xFF	; 255
    7e1c:	8b 1a       	sub	r8, r27
    7e1e:	9b 0a       	sbc	r9, r27
    7e20:	ab 0a       	sbc	r10, r27
    7e22:	bb 0a       	sbc	r11, r27
    7e24:	e8 94       	clt
    7e26:	80 f8       	bld	r8, 0
		switch (LD_DWORD(&buff[0])) {
    7e28:	f1 01       	movw	r30, r2
    7e2a:	80 81       	ld	r24, Z
    7e2c:	91 81       	ldd	r25, Z+1	; 0x01
    7e2e:	a2 81       	ldd	r26, Z+2	; 0x02
    7e30:	b3 81       	ldd	r27, Z+3	; 0x03
    7e32:	8c 34       	cpi	r24, 0x4C	; 76
    7e34:	f9 e4       	ldi	r31, 0x49	; 73
    7e36:	9f 07       	cpc	r25, r31
    7e38:	f3 e5       	ldi	r31, 0x53	; 83
    7e3a:	af 07       	cpc	r26, r31
    7e3c:	f4 e5       	ldi	r31, 0x54	; 84
    7e3e:	bf 07       	cpc	r27, r31
    7e40:	09 f4       	brne	.+2      	; 0x7e44 <load_wav+0x144>
    7e42:	90 c0       	rjmp	.+288    	; 0x7f64 <load_wav+0x264>
    7e44:	30 f4       	brcc	.+12     	; 0x7e52 <load_wav+0x152>
    7e46:	86 36       	cpi	r24, 0x66	; 102
    7e48:	9d 46       	sbci	r25, 0x6D	; 109
    7e4a:	a4 47       	sbci	r26, 0x74	; 116
    7e4c:	b0 42       	sbci	r27, 0x20	; 32
    7e4e:	89 f0       	breq	.+34     	; 0x7e72 <load_wav+0x172>
    7e50:	ea c1       	rjmp	.+980    	; 0x8226 <load_wav+0x526>
    7e52:	84 36       	cpi	r24, 0x64	; 100
    7e54:	41 e6       	ldi	r20, 0x61	; 97
    7e56:	94 07       	cpc	r25, r20
    7e58:	44 e7       	ldi	r20, 0x74	; 116
    7e5a:	a4 07       	cpc	r26, r20
    7e5c:	41 e6       	ldi	r20, 0x61	; 97
    7e5e:	b4 07       	cpc	r27, r20
    7e60:	09 f4       	brne	.+2      	; 0x7e64 <load_wav+0x164>
    7e62:	63 c0       	rjmp	.+198    	; 0x7f2a <load_wav+0x22a>
    7e64:	86 36       	cpi	r24, 0x66	; 102
    7e66:	91 46       	sbci	r25, 0x61	; 97
    7e68:	a3 46       	sbci	r26, 0x63	; 99
    7e6a:	b4 47       	sbci	r27, 0x74	; 116
    7e6c:	09 f4       	brne	.+2      	; 0x7e70 <load_wav+0x170>
    7e6e:	50 c0       	rjmp	.+160    	; 0x7f10 <load_wav+0x210>
    7e70:	da c1       	rjmp	.+948    	; 0x8226 <load_wav+0x526>
			case FCC('f','m','t',' ') :
			if (sz > 1000 || sz < 16 || f_read(fp, buff, sz, &br) || sz != br) return -1;
    7e72:	d5 01       	movw	r26, r10
    7e74:	c4 01       	movw	r24, r8
    7e76:	40 97       	sbiw	r24, 0x10	; 16
    7e78:	a1 09       	sbc	r26, r1
    7e7a:	b1 09       	sbc	r27, r1
    7e7c:	89 3d       	cpi	r24, 0xD9	; 217
    7e7e:	93 40       	sbci	r25, 0x03	; 3
    7e80:	a1 05       	cpc	r26, r1
    7e82:	b1 05       	cpc	r27, r1
    7e84:	08 f0       	brcs	.+2      	; 0x7e88 <load_wav+0x188>
    7e86:	d2 c1       	rjmp	.+932    	; 0x822c <load_wav+0x52c>
    7e88:	9e 01       	movw	r18, r28
    7e8a:	2f 5f       	subi	r18, 0xFF	; 255
    7e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    7e8e:	a4 01       	movw	r20, r8
    7e90:	b1 01       	movw	r22, r2
    7e92:	c8 01       	movw	r24, r16
    7e94:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <f_read>
    7e98:	81 11       	cpse	r24, r1
    7e9a:	cb c1       	rjmp	.+918    	; 0x8232 <load_wav+0x532>
    7e9c:	89 81       	ldd	r24, Y+1	; 0x01
    7e9e:	9a 81       	ldd	r25, Y+2	; 0x02
    7ea0:	a0 e0       	ldi	r26, 0x00	; 0
    7ea2:	b0 e0       	ldi	r27, 0x00	; 0
    7ea4:	88 15       	cp	r24, r8
    7ea6:	99 05       	cpc	r25, r9
    7ea8:	aa 05       	cpc	r26, r10
    7eaa:	bb 05       	cpc	r27, r11
    7eac:	09 f0       	breq	.+2      	; 0x7eb0 <load_wav+0x1b0>
    7eae:	c4 c1       	rjmp	.+904    	; 0x8238 <load_wav+0x538>
			if (LD_WORD(&buff[0]) != 0x1) return -1;	/* Check if LPCM */
    7eb0:	d1 01       	movw	r26, r2
    7eb2:	8d 91       	ld	r24, X+
    7eb4:	9c 91       	ld	r25, X
    7eb6:	11 97       	sbiw	r26, 0x01	; 1
    7eb8:	01 97       	sbiw	r24, 0x01	; 1
    7eba:	09 f0       	breq	.+2      	; 0x7ebe <load_wav+0x1be>
    7ebc:	c0 c1       	rjmp	.+896    	; 0x823e <load_wav+0x53e>
			if (LD_WORD(&buff[2]) == 2) {	/* Channels (1 or 2) */
    7ebe:	81 e0       	ldi	r24, 0x01	; 1
    7ec0:	90 e0       	ldi	r25, 0x00	; 0
    7ec2:	12 96       	adiw	r26, 0x02	; 2
    7ec4:	2d 91       	ld	r18, X+
    7ec6:	3c 91       	ld	r19, X
    7ec8:	13 97       	sbiw	r26, 0x03	; 3
    7eca:	22 30       	cpi	r18, 0x02	; 2
    7ecc:	31 05       	cpc	r19, r1
    7ece:	11 f0       	breq	.+4      	; 0x7ed4 <load_wav+0x1d4>
    7ed0:	80 e0       	ldi	r24, 0x00	; 0
    7ed2:	90 e0       	ldi	r25, 0x00	; 0
				md = 1; wsmp = 2;
    7ed4:	69 96       	adiw	r28, 0x19	; 25
    7ed6:	8e af       	std	Y+62, r24	; 0x3e
    7ed8:	9f af       	std	Y+63, r25	; 0x3f
    7eda:	69 97       	sbiw	r28, 0x19	; 25
				} else {
				md = 0; wsmp = 1;
			}
			if (LD_WORD(&buff[14]) == 16) {	/* Resolution (8 or 16) */
    7edc:	f1 01       	movw	r30, r2
    7ede:	26 85       	ldd	r18, Z+14	; 0x0e
    7ee0:	37 85       	ldd	r19, Z+15	; 0x0f
    7ee2:	20 31       	cpi	r18, 0x10	; 16
    7ee4:	31 05       	cpc	r19, r1
    7ee6:	31 f4       	brne	.+12     	; 0x7ef4 <load_wav+0x1f4>
				md |= 2; wsmp *= 2;
    7ee8:	9c 01       	movw	r18, r24
    7eea:	22 60       	ori	r18, 0x02	; 2
    7eec:	69 96       	adiw	r28, 0x19	; 25
    7eee:	2e af       	std	Y+62, r18	; 0x3e
    7ef0:	3f af       	std	Y+63, r19	; 0x3f
    7ef2:	69 97       	sbiw	r28, 0x19	; 25
			}
			fsmp = LD_DWORD(&buff[4]);		/* Sampling rate */
    7ef4:	d1 01       	movw	r26, r2
    7ef6:	14 96       	adiw	r26, 0x04	; 4
    7ef8:	8d 91       	ld	r24, X+
    7efa:	9d 91       	ld	r25, X+
    7efc:	0d 90       	ld	r0, X+
    7efe:	bc 91       	ld	r27, X
    7f00:	a0 2d       	mov	r26, r0
    7f02:	6f 96       	adiw	r28, 0x1f	; 31
    7f04:	8c af       	std	Y+60, r24	; 0x3c
    7f06:	9d af       	std	Y+61, r25	; 0x3d
    7f08:	ae af       	std	Y+62, r26	; 0x3e
    7f0a:	bf af       	std	Y+63, r27	; 0x3f
    7f0c:	6f 97       	sbiw	r28, 0x1f	; 31
			break;
    7f0e:	b8 c0       	rjmp	.+368    	; 0x8080 <load_wav+0x380>

			case FCC('f','a','c','t') :
			f_lseek(fp, f_tell(fp) + sz);
    7f10:	f8 01       	movw	r30, r16
    7f12:	46 81       	ldd	r20, Z+6	; 0x06
    7f14:	57 81       	ldd	r21, Z+7	; 0x07
    7f16:	60 85       	ldd	r22, Z+8	; 0x08
    7f18:	71 85       	ldd	r23, Z+9	; 0x09
    7f1a:	48 0d       	add	r20, r8
    7f1c:	59 1d       	adc	r21, r9
    7f1e:	6a 1d       	adc	r22, r10
    7f20:	7b 1d       	adc	r23, r11
    7f22:	c8 01       	movw	r24, r16
    7f24:	0e 94 83 37 	call	0x6f06	; 0x6f06 <f_lseek>
			break;
    7f28:	ab c0       	rjmp	.+342    	; 0x8080 <load_wav+0x380>

			case FCC('d','a','t','a') :
			offw = f_tell(fp);	/* Wave data start offset */
    7f2a:	d8 01       	movw	r26, r16
    7f2c:	16 96       	adiw	r26, 0x06	; 6
    7f2e:	2d 91       	ld	r18, X+
    7f30:	3d 91       	ld	r19, X+
    7f32:	4d 91       	ld	r20, X+
    7f34:	5c 91       	ld	r21, X
    7f36:	19 97       	sbiw	r26, 0x09	; 9
    7f38:	67 96       	adiw	r28, 0x17	; 23
    7f3a:	2c af       	std	Y+60, r18	; 0x3c
    7f3c:	3d af       	std	Y+61, r19	; 0x3d
    7f3e:	4e af       	std	Y+62, r20	; 0x3e
    7f40:	5f af       	std	Y+63, r21	; 0x3f
    7f42:	67 97       	sbiw	r28, 0x17	; 23
			szwav = sz;			/* Wave data length [byte] */
			f_lseek(fp, f_tell(fp) + sz);
    7f44:	ba 01       	movw	r22, r20
    7f46:	a9 01       	movw	r20, r18
    7f48:	48 0d       	add	r20, r8
    7f4a:	59 1d       	adc	r21, r9
    7f4c:	6a 1d       	adc	r22, r10
    7f4e:	7b 1d       	adc	r23, r11
    7f50:	c8 01       	movw	r24, r16
    7f52:	0e 94 83 37 	call	0x6f06	; 0x6f06 <f_lseek>
			f_lseek(fp, f_tell(fp) + sz);
			break;

			case FCC('d','a','t','a') :
			offw = f_tell(fp);	/* Wave data start offset */
			szwav = sz;			/* Wave data length [byte] */
    7f56:	a5 96       	adiw	r28, 0x25	; 37
    7f58:	8c ae       	std	Y+60, r8	; 0x3c
    7f5a:	9d ae       	std	Y+61, r9	; 0x3d
    7f5c:	ae ae       	std	Y+62, r10	; 0x3e
    7f5e:	bf ae       	std	Y+63, r11	; 0x3f
    7f60:	a5 97       	sbiw	r28, 0x25	; 37
			f_lseek(fp, f_tell(fp) + sz);
			break;
    7f62:	8e c0       	rjmp	.+284    	; 0x8080 <load_wav+0x380>

			case FCC('L','I','S','T'):
			sz += f_tell(fp);
    7f64:	f8 01       	movw	r30, r16
    7f66:	86 81       	ldd	r24, Z+6	; 0x06
    7f68:	97 81       	ldd	r25, Z+7	; 0x07
    7f6a:	a0 85       	ldd	r26, Z+8	; 0x08
    7f6c:	b1 85       	ldd	r27, Z+9	; 0x09
    7f6e:	88 0e       	add	r8, r24
    7f70:	99 1e       	adc	r9, r25
    7f72:	aa 1e       	adc	r10, r26
    7f74:	bb 1e       	adc	r11, r27
			if (f_read(fp, buff, 4, &br) || br != 4) return -1;
    7f76:	9e 01       	movw	r18, r28
    7f78:	2f 5f       	subi	r18, 0xFF	; 255
    7f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    7f7c:	44 e0       	ldi	r20, 0x04	; 4
    7f7e:	50 e0       	ldi	r21, 0x00	; 0
    7f80:	b1 01       	movw	r22, r2
    7f82:	c8 01       	movw	r24, r16
    7f84:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <f_read>
    7f88:	81 11       	cpse	r24, r1
    7f8a:	5c c1       	rjmp	.+696    	; 0x8244 <load_wav+0x544>
    7f8c:	89 81       	ldd	r24, Y+1	; 0x01
    7f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    7f90:	04 97       	sbiw	r24, 0x04	; 4
    7f92:	09 f0       	breq	.+2      	; 0x7f96 <load_wav+0x296>
    7f94:	5a c1       	rjmp	.+692    	; 0x824a <load_wav+0x54a>
			if (LD_DWORD(buff) == FCC('I','N','F','O')) {	/* LIST/INFO chunk */
    7f96:	f1 01       	movw	r30, r2
    7f98:	80 81       	ld	r24, Z
    7f9a:	91 81       	ldd	r25, Z+1	; 0x01
    7f9c:	a2 81       	ldd	r26, Z+2	; 0x02
    7f9e:	b3 81       	ldd	r27, Z+3	; 0x03
    7fa0:	89 34       	cpi	r24, 0x49	; 73
    7fa2:	9e 44       	sbci	r25, 0x4E	; 78
    7fa4:	a6 44       	sbci	r26, 0x46	; 70
    7fa6:	bf 44       	sbci	r27, 0x4F	; 79
    7fa8:	09 f0       	breq	.+2      	; 0x7fac <load_wav+0x2ac>
    7faa:	63 c0       	rjmp	.+198    	; 0x8072 <load_wav+0x372>
    7fac:	56 c0       	rjmp	.+172    	; 0x805a <load_wav+0x35a>
				while (f_tell(fp) < sz) {
					if (f_read(fp, buff, 8, &br) || br != 8) return -1;
    7fae:	9e 01       	movw	r18, r28
    7fb0:	2f 5f       	subi	r18, 0xFF	; 255
    7fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    7fb4:	48 e0       	ldi	r20, 0x08	; 8
    7fb6:	50 e0       	ldi	r21, 0x00	; 0
    7fb8:	b1 01       	movw	r22, r2
    7fba:	c8 01       	movw	r24, r16
    7fbc:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <f_read>
    7fc0:	81 11       	cpse	r24, r1
    7fc2:	46 c1       	rjmp	.+652    	; 0x8250 <load_wav+0x550>
    7fc4:	89 81       	ldd	r24, Y+1	; 0x01
    7fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    7fc8:	08 97       	sbiw	r24, 0x08	; 8
    7fca:	09 f0       	breq	.+2      	; 0x7fce <load_wav+0x2ce>
    7fcc:	44 c1       	rjmp	.+648    	; 0x8256 <load_wav+0x556>
					ssz = (LD_DWORD(&buff[4]) + 1) & ~1;
    7fce:	d1 01       	movw	r26, r2
    7fd0:	14 96       	adiw	r26, 0x04	; 4
    7fd2:	cd 90       	ld	r12, X+
    7fd4:	dd 90       	ld	r13, X+
    7fd6:	ed 90       	ld	r14, X+
    7fd8:	fc 90       	ld	r15, X
    7fda:	17 97       	sbiw	r26, 0x07	; 7
    7fdc:	bf ef       	ldi	r27, 0xFF	; 255
    7fde:	cb 1a       	sub	r12, r27
    7fe0:	db 0a       	sbc	r13, r27
    7fe2:	eb 0a       	sbc	r14, r27
    7fe4:	fb 0a       	sbc	r15, r27
    7fe6:	e8 94       	clt
    7fe8:	c0 f8       	bld	r12, 0
					p = 0;
					switch (LD_DWORD(buff)) {
    7fea:	f1 01       	movw	r30, r2
    7fec:	80 81       	ld	r24, Z
    7fee:	91 81       	ldd	r25, Z+1	; 0x01
    7ff0:	a2 81       	ldd	r26, Z+2	; 0x02
    7ff2:	b3 81       	ldd	r27, Z+3	; 0x03
    7ff4:	89 34       	cpi	r24, 0x49	; 73
    7ff6:	fe e4       	ldi	r31, 0x4E	; 78
    7ff8:	9f 07       	cpc	r25, r31
    7ffa:	f1 e4       	ldi	r31, 0x41	; 65
    7ffc:	af 07       	cpc	r26, r31
    7ffe:	fd e4       	ldi	r31, 0x4D	; 77
    8000:	bf 07       	cpc	r27, r31
    8002:	09 f4       	brne	.+2      	; 0x8006 <load_wav+0x306>
    8004:	43 c1       	rjmp	.+646    	; 0x828c <load_wav+0x58c>
    8006:	89 34       	cpi	r24, 0x49	; 73
    8008:	91 44       	sbci	r25, 0x41	; 65
    800a:	a2 45       	sbci	r26, 0x52	; 82
    800c:	b4 45       	sbci	r27, 0x54	; 84
    800e:	09 f4       	brne	.+2      	; 0x8012 <load_wav+0x312>
    8010:	44 c1       	rjmp	.+648    	; 0x829a <load_wav+0x59a>
    8012:	13 c0       	rjmp	.+38     	; 0x803a <load_wav+0x33a>
						p = nam; break;
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
					}
					if (p && ssz <= NBSIZE) {
						if (f_read(fp, p, ssz, &br) || br != ssz) return -1;
    8014:	9e 01       	movw	r18, r28
    8016:	2f 5f       	subi	r18, 0xFF	; 255
    8018:	3f 4f       	sbci	r19, 0xFF	; 255
    801a:	a6 01       	movw	r20, r12
    801c:	c8 01       	movw	r24, r16
    801e:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <f_read>
    8022:	81 11       	cpse	r24, r1
    8024:	1b c1       	rjmp	.+566    	; 0x825c <load_wav+0x55c>
    8026:	89 81       	ldd	r24, Y+1	; 0x01
    8028:	9a 81       	ldd	r25, Y+2	; 0x02
    802a:	a0 e0       	ldi	r26, 0x00	; 0
    802c:	b0 e0       	ldi	r27, 0x00	; 0
    802e:	8c 15       	cp	r24, r12
    8030:	9d 05       	cpc	r25, r13
    8032:	ae 05       	cpc	r26, r14
    8034:	bf 05       	cpc	r27, r15
    8036:	89 f0       	breq	.+34     	; 0x805a <load_wav+0x35a>
    8038:	14 c1       	rjmp	.+552    	; 0x8262 <load_wav+0x562>
						} else {
						if (f_lseek(fp, f_tell(fp) + ssz)) return -1;
    803a:	d8 01       	movw	r26, r16
    803c:	16 96       	adiw	r26, 0x06	; 6
    803e:	4d 91       	ld	r20, X+
    8040:	5d 91       	ld	r21, X+
    8042:	6d 91       	ld	r22, X+
    8044:	7c 91       	ld	r23, X
    8046:	19 97       	sbiw	r26, 0x09	; 9
    8048:	4c 0d       	add	r20, r12
    804a:	5d 1d       	adc	r21, r13
    804c:	6e 1d       	adc	r22, r14
    804e:	7f 1d       	adc	r23, r15
    8050:	c8 01       	movw	r24, r16
    8052:	0e 94 83 37 	call	0x6f06	; 0x6f06 <f_lseek>
    8056:	81 11       	cpse	r24, r1
    8058:	07 c1       	rjmp	.+526    	; 0x8268 <load_wav+0x568>

			case FCC('L','I','S','T'):
			sz += f_tell(fp);
			if (f_read(fp, buff, 4, &br) || br != 4) return -1;
			if (LD_DWORD(buff) == FCC('I','N','F','O')) {	/* LIST/INFO chunk */
				while (f_tell(fp) < sz) {
    805a:	f8 01       	movw	r30, r16
    805c:	86 81       	ldd	r24, Z+6	; 0x06
    805e:	97 81       	ldd	r25, Z+7	; 0x07
    8060:	a0 85       	ldd	r26, Z+8	; 0x08
    8062:	b1 85       	ldd	r27, Z+9	; 0x09
    8064:	88 15       	cp	r24, r8
    8066:	99 05       	cpc	r25, r9
    8068:	aa 05       	cpc	r26, r10
    806a:	bb 05       	cpc	r27, r11
    806c:	08 f4       	brcc	.+2      	; 0x8070 <load_wav+0x370>
    806e:	9f cf       	rjmp	.-194    	; 0x7fae <load_wav+0x2ae>
    8070:	07 c0       	rjmp	.+14     	; 0x8080 <load_wav+0x380>
						} else {
						if (f_lseek(fp, f_tell(fp) + ssz)) return -1;
					}
				}
				} else {
				if (f_lseek(fp, sz)) return -1;	/* Skip unknown sub-chunk type */
    8072:	b5 01       	movw	r22, r10
    8074:	a4 01       	movw	r20, r8
    8076:	c8 01       	movw	r24, r16
    8078:	0e 94 83 37 	call	0x6f06	; 0x6f06 <f_lseek>
    807c:	81 11       	cpse	r24, r1
    807e:	f7 c0       	rjmp	.+494    	; 0x826e <load_wav+0x56e>
	eof = LD_DWORD(&buff[4]) + 8;

	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
	md = fsmp = wsmp = offw = szwav = 0;
	while (f_tell(fp) < eof) {
    8080:	f8 01       	movw	r30, r16
    8082:	86 81       	ldd	r24, Z+6	; 0x06
    8084:	97 81       	ldd	r25, Z+7	; 0x07
    8086:	a0 85       	ldd	r26, Z+8	; 0x08
    8088:	b1 85       	ldd	r27, Z+9	; 0x09
    808a:	84 15       	cp	r24, r4
    808c:	95 05       	cpc	r25, r5
    808e:	a6 05       	cpc	r26, r6
    8090:	b7 05       	cpc	r27, r7
    8092:	08 f4       	brcc	.+2      	; 0x8096 <load_wav+0x396>
    8094:	ab ce       	rjmp	.-682    	; 0x7dec <load_wav+0xec>

			default :	/* Unknown chunk */
			return -1;
		}
	}
	if (!szwav || !fsmp) return -1;		/* Check if valid WAV file */
    8096:	a5 96       	adiw	r28, 0x25	; 37
    8098:	2c ad       	ldd	r18, Y+60	; 0x3c
    809a:	3d ad       	ldd	r19, Y+61	; 0x3d
    809c:	4e ad       	ldd	r20, Y+62	; 0x3e
    809e:	5f ad       	ldd	r21, Y+63	; 0x3f
    80a0:	a5 97       	sbiw	r28, 0x25	; 37
    80a2:	23 2b       	or	r18, r19
    80a4:	24 2b       	or	r18, r20
    80a6:	25 2b       	or	r18, r21
    80a8:	09 f4       	brne	.+2      	; 0x80ac <load_wav+0x3ac>
    80aa:	e4 c0       	rjmp	.+456    	; 0x8274 <load_wav+0x574>
    80ac:	6f 96       	adiw	r28, 0x1f	; 31
    80ae:	8c ad       	ldd	r24, Y+60	; 0x3c
    80b0:	9d ad       	ldd	r25, Y+61	; 0x3d
    80b2:	ae ad       	ldd	r26, Y+62	; 0x3e
    80b4:	bf ad       	ldd	r27, Y+63	; 0x3f
    80b6:	6f 97       	sbiw	r28, 0x1f	; 31
    80b8:	89 2b       	or	r24, r25
    80ba:	8a 2b       	or	r24, r26
    80bc:	8b 2b       	or	r24, r27
    80be:	09 f4       	brne	.+2      	; 0x80c2 <load_wav+0x3c2>
    80c0:	dc c0       	rjmp	.+440    	; 0x827a <load_wav+0x57a>
	if (f_lseek(fp, offw)) return -1;	/* Seek to top of wav data */
    80c2:	67 96       	adiw	r28, 0x17	; 23
    80c4:	4c ad       	ldd	r20, Y+60	; 0x3c
    80c6:	5d ad       	ldd	r21, Y+61	; 0x3d
    80c8:	6e ad       	ldd	r22, Y+62	; 0x3e
    80ca:	7f ad       	ldd	r23, Y+63	; 0x3f
    80cc:	67 97       	sbiw	r28, 0x17	; 23
    80ce:	c8 01       	movw	r24, r16
    80d0:	0e 94 83 37 	call	0x6f06	; 0x6f06 <f_lseek>
    80d4:	81 11       	cpse	r24, r1
    80d6:	d4 c0       	rjmp	.+424    	; 0x8280 <load_wav+0x580>

	//xprintf(PSTR("IART=%s\nINAM=%s\n"), art, nam);
	//xprintf(PSTR("Sample=%u.%ukHz/%ubit/%S\nLength=%u:%02u\n"), (UINT)(fsmp / 1000), (UINT)(fsmp / 100) % 10, (md & 2) ? 16 : 8, (md & 1) ? PSTR("st") : PSTR("mo"), tc / 60, tc % 60);

	/* Initialize stream parameters and start sound streming */
	fcb.mode = md;
    80d8:	69 96       	adiw	r28, 0x19	; 25
    80da:	ae ad       	ldd	r26, Y+62	; 0x3e
    80dc:	bf ad       	ldd	r27, Y+63	; 0x3f
    80de:	69 97       	sbiw	r28, 0x19	; 25
    80e0:	ab 83       	std	Y+3, r26	; 0x03
    80e2:	bc 83       	std	Y+4, r27	; 0x04
	fcb.buff = buff;
    80e4:	2b 86       	std	Y+11, r2	; 0x0b
    80e6:	3c 86       	std	Y+12, r3	; 0x0c
	fcb.sz_buff = sz_work;
    80e8:	a1 96       	adiw	r28, 0x21	; 33
    80ea:	ee ad       	ldd	r30, Y+62	; 0x3e
    80ec:	ff ad       	ldd	r31, Y+63	; 0x3f
    80ee:	a1 97       	sbiw	r28, 0x21	; 33
    80f0:	ed 87       	std	Y+13, r30	; 0x0d
    80f2:	fe 87       	std	Y+14, r31	; 0x0e
	if (!sound_start(&fcb, fsmp)) return -1;
    80f4:	6f 96       	adiw	r28, 0x1f	; 31
    80f6:	4c ad       	ldd	r20, Y+60	; 0x3c
    80f8:	5d ad       	ldd	r21, Y+61	; 0x3d
    80fa:	6e ad       	ldd	r22, Y+62	; 0x3e
    80fc:	7f ad       	ldd	r23, Y+63	; 0x3f
    80fe:	6f 97       	sbiw	r28, 0x1f	; 31
    8100:	ce 01       	movw	r24, r28
    8102:	03 96       	adiw	r24, 0x03	; 3
    8104:	c4 dd       	rcall	.-1144   	; 0x7c8e <sound_start>
    8106:	89 2b       	or	r24, r25
    8108:	09 f4       	brne	.+2      	; 0x810c <load_wav+0x40c>
    810a:	bd c0       	rjmp	.+378    	; 0x8286 <load_wav+0x586>

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
    810c:	a1 96       	adiw	r28, 0x21	; 33
    810e:	ee ac       	ldd	r14, Y+62	; 0x3e
    8110:	ff ac       	ldd	r15, Y+63	; 0x3f
    8112:	a1 97       	sbiw	r28, 0x21	; 33
    8114:	f6 94       	lsr	r15
    8116:	e7 94       	ror	r14
			btr = (szwav >= sz_work / 2) ? sz_work / 2 : szwav;
    8118:	97 01       	movw	r18, r14
    811a:	40 e0       	ldi	r20, 0x00	; 0
    811c:	50 e0       	ldi	r21, 0x00	; 0
    811e:	6b 96       	adiw	r28, 0x1b	; 27
    8120:	2c af       	std	Y+60, r18	; 0x3c
    8122:	3d af       	std	Y+61, r19	; 0x3d
    8124:	4e af       	std	Y+62, r20	; 0x3e
    8126:	5f af       	std	Y+63, r21	; 0x3f
    8128:	6b 97       	sbiw	r28, 0x1b	; 27
    812a:	c1 2c       	mov	r12, r1
    812c:	d1 2c       	mov	r13, r1
			f_read(fp, &buff[wi], btr, &br);
			if (br != btr) break;
			szwav -= br;
			wi = (wi + br) & (sz_work - 1);
    812e:	a1 96       	adiw	r28, 0x21	; 33
    8130:	8e ac       	ldd	r8, Y+62	; 0x3e
    8132:	9f ac       	ldd	r9, Y+63	; 0x3f
    8134:	a1 97       	sbiw	r28, 0x21	; 33
    8136:	31 e0       	ldi	r19, 0x01	; 1
    8138:	83 1a       	sub	r8, r19
    813a:	91 08       	sbc	r9, r1
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
			btr = (szwav >= sz_work / 2) ? sz_work / 2 : szwav;
    813c:	68 96       	adiw	r28, 0x18	; 24
    813e:	6f ac       	ldd	r6, Y+63	; 0x3f
    8140:	68 97       	sbiw	r28, 0x18	; 24
    8142:	69 96       	adiw	r28, 0x19	; 25
    8144:	7f ac       	ldd	r7, Y+63	; 0x3f
    8146:	69 97       	sbiw	r28, 0x19	; 25
    8148:	6c 96       	adiw	r28, 0x1c	; 28
    814a:	6f ae       	std	Y+63, r6	; 0x3f
    814c:	6c 97       	sbiw	r28, 0x1c	; 28
    814e:	a0 96       	adiw	r28, 0x20	; 32
    8150:	7f ae       	std	Y+63, r7	; 0x3f
    8152:	a0 97       	sbiw	r28, 0x20	; 32
    8154:	a5 96       	adiw	r28, 0x25	; 37
    8156:	4c ac       	ldd	r4, Y+60	; 0x3c
    8158:	5d ac       	ldd	r5, Y+61	; 0x3d
    815a:	6e ac       	ldd	r6, Y+62	; 0x3e
    815c:	7f ac       	ldd	r7, Y+63	; 0x3f
    815e:	a5 97       	sbiw	r28, 0x25	; 37
    8160:	42 c0       	rjmp	.+132    	; 0x81e6 <load_wav+0x4e6>
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
    8162:	89 85       	ldd	r24, Y+9	; 0x09
    8164:	9a 85       	ldd	r25, Y+10	; 0x0a
    8166:	e8 16       	cp	r14, r24
    8168:	f9 06       	cpc	r15, r25
    816a:	b8 f1       	brcs	.+110    	; 0x81da <load_wav+0x4da>
			btr = (szwav >= sz_work / 2) ? sz_work / 2 : szwav;
    816c:	94 2d       	mov	r25, r4
    816e:	85 2d       	mov	r24, r5
    8170:	6b 96       	adiw	r28, 0x1b	; 27
    8172:	2c ad       	ldd	r18, Y+60	; 0x3c
    8174:	3d ad       	ldd	r19, Y+61	; 0x3d
    8176:	4e ad       	ldd	r20, Y+62	; 0x3e
    8178:	5f ad       	ldd	r21, Y+63	; 0x3f
    817a:	6b 97       	sbiw	r28, 0x1b	; 27
    817c:	24 15       	cp	r18, r4
    817e:	35 05       	cpc	r19, r5
    8180:	46 05       	cpc	r20, r6
    8182:	57 05       	cpc	r21, r7
    8184:	30 f4       	brcc	.+12     	; 0x8192 <load_wav+0x492>
    8186:	6c 96       	adiw	r28, 0x1c	; 28
    8188:	9f ad       	ldd	r25, Y+63	; 0x3f
    818a:	6c 97       	sbiw	r28, 0x1c	; 28
    818c:	a0 96       	adiw	r28, 0x20	; 32
    818e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8190:	a0 97       	sbiw	r28, 0x20	; 32
    8192:	a9 2e       	mov	r10, r25
    8194:	b8 2e       	mov	r11, r24
			f_read(fp, &buff[wi], btr, &br);
    8196:	9e 01       	movw	r18, r28
    8198:	2f 5f       	subi	r18, 0xFF	; 255
    819a:	3f 4f       	sbci	r19, 0xFF	; 255
    819c:	49 2f       	mov	r20, r25
    819e:	58 2f       	mov	r21, r24
    81a0:	b1 01       	movw	r22, r2
    81a2:	6c 0d       	add	r22, r12
    81a4:	7d 1d       	adc	r23, r13
    81a6:	c8 01       	movw	r24, r16
    81a8:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <f_read>
			if (br != btr) break;
    81ac:	89 81       	ldd	r24, Y+1	; 0x01
    81ae:	9a 81       	ldd	r25, Y+2	; 0x02
    81b0:	8a 15       	cp	r24, r10
    81b2:	9b 05       	cpc	r25, r11
    81b4:	11 f5       	brne	.+68     	; 0x81fa <load_wav+0x4fa>
			szwav -= br;
    81b6:	48 1a       	sub	r4, r24
    81b8:	59 0a       	sbc	r5, r25
    81ba:	61 08       	sbc	r6, r1
    81bc:	71 08       	sbc	r7, r1
			wi = (wi + br) & (sz_work - 1);
    81be:	c8 0e       	add	r12, r24
    81c0:	d9 1e       	adc	r13, r25
    81c2:	c8 20       	and	r12, r8
    81c4:	d9 20       	and	r13, r9
			cli();
    81c6:	f8 94       	cli
			fcb.ct += br;
    81c8:	29 85       	ldd	r18, Y+9	; 0x09
    81ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    81cc:	89 81       	ldd	r24, Y+1	; 0x01
    81ce:	9a 81       	ldd	r25, Y+2	; 0x02
    81d0:	82 0f       	add	r24, r18
    81d2:	93 1f       	adc	r25, r19
    81d4:	89 87       	std	Y+9, r24	; 0x09
    81d6:	9a 87       	std	Y+10, r25	; 0x0a
			sei();
    81d8:	78 94       	sei
		//if (uart_test()) {		/* Exit if a command arrived */
		//	k = uart_getc();
		//	break;
		//}
		
		if (btn_check_press() == BTN2)
    81da:	0e 94 ac 12 	call	0x2558	; 0x2558 <btn_check_press>
    81de:	82 30       	cpi	r24, 0x02	; 2
    81e0:	61 f0       	breq	.+24     	; 0x81fa <load_wav+0x4fa>
		{
			break;
		}
		
		t = (f_tell(fp) - offw - fcb.ct) / fsmp / wsmp;	/* Refresh time display every 1 sec */
    81e2:	89 85       	ldd	r24, Y+9	; 0x09
    81e4:	9a 85       	ldd	r25, Y+10	; 0x0a
	fcb.buff = buff;
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
    81e6:	41 14       	cp	r4, r1
    81e8:	51 04       	cpc	r5, r1
    81ea:	61 04       	cpc	r6, r1
    81ec:	71 04       	cpc	r7, r1
    81ee:	09 f0       	breq	.+2      	; 0x81f2 <load_wav+0x4f2>
    81f0:	b8 cf       	rjmp	.-144    	; 0x8162 <load_wav+0x462>
    81f2:	89 85       	ldd	r24, Y+9	; 0x09
    81f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    81f6:	04 97       	sbiw	r24, 0x04	; 4
    81f8:	80 f7       	brcc	.-32     	; 0x81da <load_wav+0x4da>
			tc = t;
			//xprintf(PSTR("\rTime=%u:%02u"), tc / 60, tc % 60);
		}
	}

	sound_stop();	/* Stop sound output */
    81fa:	78 dd       	rcall	.-1296   	; 0x7cec <sound_stop>

	//xputc('\n');
	return k;	/* Terminated due to -1:error, 0:eot, >0:key code */
    81fc:	80 e0       	ldi	r24, 0x00	; 0
    81fe:	90 e0       	ldi	r25, 0x00	; 0
    8200:	5a c0       	rjmp	.+180    	; 0x82b6 <load_wav+0x5b6>


	//xprintf(PSTR("%s\n"), title);	/* Put title */

	/* Is it a WAV file? */
	if (f_read(fp, buff, 12, &br) || br != 12) return -1;
    8202:	8f ef       	ldi	r24, 0xFF	; 255
    8204:	9f ef       	ldi	r25, 0xFF	; 255
    8206:	57 c0       	rjmp	.+174    	; 0x82b6 <load_wav+0x5b6>
    8208:	8f ef       	ldi	r24, 0xFF	; 255
    820a:	9f ef       	ldi	r25, 0xFF	; 255
    820c:	54 c0       	rjmp	.+168    	; 0x82b6 <load_wav+0x5b6>
	if (LD_DWORD(&buff[0]) != FCC('R','I','F','F')) return -1;
    820e:	8f ef       	ldi	r24, 0xFF	; 255
    8210:	9f ef       	ldi	r25, 0xFF	; 255
    8212:	51 c0       	rjmp	.+162    	; 0x82b6 <load_wav+0x5b6>
	if (LD_DWORD(&buff[8]) != FCC('W','A','V','E')) return -1;
    8214:	8f ef       	ldi	r24, 0xFF	; 255
    8216:	9f ef       	ldi	r25, 0xFF	; 255
    8218:	4e c0       	rjmp	.+156    	; 0x82b6 <load_wav+0x5b6>

	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
	md = fsmp = wsmp = offw = szwav = 0;
	while (f_tell(fp) < eof) {
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
    821a:	8f ef       	ldi	r24, 0xFF	; 255
    821c:	9f ef       	ldi	r25, 0xFF	; 255
    821e:	4b c0       	rjmp	.+150    	; 0x82b6 <load_wav+0x5b6>
    8220:	8f ef       	ldi	r24, 0xFF	; 255
    8222:	9f ef       	ldi	r25, 0xFF	; 255
    8224:	48 c0       	rjmp	.+144    	; 0x82b6 <load_wav+0x5b6>
				if (f_lseek(fp, sz)) return -1;	/* Skip unknown sub-chunk type */
			}
			break;

			default :	/* Unknown chunk */
			return -1;
    8226:	8f ef       	ldi	r24, 0xFF	; 255
    8228:	9f ef       	ldi	r25, 0xFF	; 255
    822a:	45 c0       	rjmp	.+138    	; 0x82b6 <load_wav+0x5b6>
	while (f_tell(fp) < eof) {
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
		sz = (LD_DWORD(&buff[4]) + 1) & ~1;
		switch (LD_DWORD(&buff[0])) {
			case FCC('f','m','t',' ') :
			if (sz > 1000 || sz < 16 || f_read(fp, buff, sz, &br) || sz != br) return -1;
    822c:	8f ef       	ldi	r24, 0xFF	; 255
    822e:	9f ef       	ldi	r25, 0xFF	; 255
    8230:	42 c0       	rjmp	.+132    	; 0x82b6 <load_wav+0x5b6>
    8232:	8f ef       	ldi	r24, 0xFF	; 255
    8234:	9f ef       	ldi	r25, 0xFF	; 255
    8236:	3f c0       	rjmp	.+126    	; 0x82b6 <load_wav+0x5b6>
    8238:	8f ef       	ldi	r24, 0xFF	; 255
    823a:	9f ef       	ldi	r25, 0xFF	; 255
    823c:	3c c0       	rjmp	.+120    	; 0x82b6 <load_wav+0x5b6>
			if (LD_WORD(&buff[0]) != 0x1) return -1;	/* Check if LPCM */
    823e:	8f ef       	ldi	r24, 0xFF	; 255
    8240:	9f ef       	ldi	r25, 0xFF	; 255
    8242:	39 c0       	rjmp	.+114    	; 0x82b6 <load_wav+0x5b6>
			f_lseek(fp, f_tell(fp) + sz);
			break;

			case FCC('L','I','S','T'):
			sz += f_tell(fp);
			if (f_read(fp, buff, 4, &br) || br != 4) return -1;
    8244:	8f ef       	ldi	r24, 0xFF	; 255
    8246:	9f ef       	ldi	r25, 0xFF	; 255
    8248:	36 c0       	rjmp	.+108    	; 0x82b6 <load_wav+0x5b6>
    824a:	8f ef       	ldi	r24, 0xFF	; 255
    824c:	9f ef       	ldi	r25, 0xFF	; 255
    824e:	33 c0       	rjmp	.+102    	; 0x82b6 <load_wav+0x5b6>
			if (LD_DWORD(buff) == FCC('I','N','F','O')) {	/* LIST/INFO chunk */
				while (f_tell(fp) < sz) {
					if (f_read(fp, buff, 8, &br) || br != 8) return -1;
    8250:	8f ef       	ldi	r24, 0xFF	; 255
    8252:	9f ef       	ldi	r25, 0xFF	; 255
    8254:	30 c0       	rjmp	.+96     	; 0x82b6 <load_wav+0x5b6>
    8256:	8f ef       	ldi	r24, 0xFF	; 255
    8258:	9f ef       	ldi	r25, 0xFF	; 255
    825a:	2d c0       	rjmp	.+90     	; 0x82b6 <load_wav+0x5b6>
						p = nam; break;
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
					}
					if (p && ssz <= NBSIZE) {
						if (f_read(fp, p, ssz, &br) || br != ssz) return -1;
    825c:	8f ef       	ldi	r24, 0xFF	; 255
    825e:	9f ef       	ldi	r25, 0xFF	; 255
    8260:	2a c0       	rjmp	.+84     	; 0x82b6 <load_wav+0x5b6>
    8262:	8f ef       	ldi	r24, 0xFF	; 255
    8264:	9f ef       	ldi	r25, 0xFF	; 255
    8266:	27 c0       	rjmp	.+78     	; 0x82b6 <load_wav+0x5b6>
						} else {
						if (f_lseek(fp, f_tell(fp) + ssz)) return -1;
    8268:	8f ef       	ldi	r24, 0xFF	; 255
    826a:	9f ef       	ldi	r25, 0xFF	; 255
    826c:	24 c0       	rjmp	.+72     	; 0x82b6 <load_wav+0x5b6>
					}
				}
				} else {
				if (f_lseek(fp, sz)) return -1;	/* Skip unknown sub-chunk type */
    826e:	8f ef       	ldi	r24, 0xFF	; 255
    8270:	9f ef       	ldi	r25, 0xFF	; 255
    8272:	21 c0       	rjmp	.+66     	; 0x82b6 <load_wav+0x5b6>

			default :	/* Unknown chunk */
			return -1;
		}
	}
	if (!szwav || !fsmp) return -1;		/* Check if valid WAV file */
    8274:	8f ef       	ldi	r24, 0xFF	; 255
    8276:	9f ef       	ldi	r25, 0xFF	; 255
    8278:	1e c0       	rjmp	.+60     	; 0x82b6 <load_wav+0x5b6>
    827a:	8f ef       	ldi	r24, 0xFF	; 255
    827c:	9f ef       	ldi	r25, 0xFF	; 255
    827e:	1b c0       	rjmp	.+54     	; 0x82b6 <load_wav+0x5b6>
	if (f_lseek(fp, offw)) return -1;	/* Seek to top of wav data */
    8280:	8f ef       	ldi	r24, 0xFF	; 255
    8282:	9f ef       	ldi	r25, 0xFF	; 255
    8284:	18 c0       	rjmp	.+48     	; 0x82b6 <load_wav+0x5b6>

	/* Initialize stream parameters and start sound streming */
	fcb.mode = md;
	fcb.buff = buff;
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;
    8286:	8f ef       	ldi	r24, 0xFF	; 255
    8288:	9f ef       	ldi	r25, 0xFF	; 255
    828a:	15 c0       	rjmp	.+42     	; 0x82b6 <load_wav+0x5b6>
					if (f_read(fp, buff, 8, &br) || br != 8) return -1;
					ssz = (LD_DWORD(&buff[4]) + 1) & ~1;
					p = 0;
					switch (LD_DWORD(buff)) {
						case FCC('I','N','A','M'):		/* INAM sub-chunk */
						p = nam; break;
    828c:	60 96       	adiw	r28, 0x10	; 16
    828e:	6f ad       	ldd	r22, Y+63	; 0x3f
    8290:	60 97       	sbiw	r28, 0x10	; 16
    8292:	61 96       	adiw	r28, 0x11	; 17
    8294:	7f ad       	ldd	r23, Y+63	; 0x3f
    8296:	61 97       	sbiw	r28, 0x11	; 17
    8298:	06 c0       	rjmp	.+12     	; 0x82a6 <load_wav+0x5a6>
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
    829a:	62 96       	adiw	r28, 0x12	; 18
    829c:	6f ad       	ldd	r22, Y+63	; 0x3f
    829e:	62 97       	sbiw	r28, 0x12	; 18
    82a0:	63 96       	adiw	r28, 0x13	; 19
    82a2:	7f ad       	ldd	r23, Y+63	; 0x3f
    82a4:	63 97       	sbiw	r28, 0x13	; 19
					}
					if (p && ssz <= NBSIZE) {
    82a6:	31 e2       	ldi	r19, 0x21	; 33
    82a8:	c3 16       	cp	r12, r19
    82aa:	d1 04       	cpc	r13, r1
    82ac:	e1 04       	cpc	r14, r1
    82ae:	f1 04       	cpc	r15, r1
    82b0:	08 f0       	brcs	.+2      	; 0x82b4 <load_wav+0x5b4>
    82b2:	c3 ce       	rjmp	.-634    	; 0x803a <load_wav+0x33a>
    82b4:	af ce       	rjmp	.-674    	; 0x8014 <load_wav+0x314>

	sound_stop();	/* Stop sound output */

	//xputc('\n');
	return k;	/* Terminated due to -1:error, 0:eot, >0:key code */
}
    82b6:	cc 59       	subi	r28, 0x9C	; 156
    82b8:	df 4f       	sbci	r29, 0xFF	; 255
    82ba:	cd bf       	out	0x3d, r28	; 61
    82bc:	de bf       	out	0x3e, r29	; 62
    82be:	df 91       	pop	r29
    82c0:	cf 91       	pop	r28
    82c2:	1f 91       	pop	r17
    82c4:	0f 91       	pop	r16
    82c6:	ff 90       	pop	r15
    82c8:	ef 90       	pop	r14
    82ca:	df 90       	pop	r13
    82cc:	cf 90       	pop	r12
    82ce:	bf 90       	pop	r11
    82d0:	af 90       	pop	r10
    82d2:	9f 90       	pop	r9
    82d4:	8f 90       	pop	r8
    82d6:	7f 90       	pop	r7
    82d8:	6f 90       	pop	r6
    82da:	5f 90       	pop	r5
    82dc:	4f 90       	pop	r4
    82de:	3f 90       	pop	r3
    82e0:	2f 90       	pop	r2
    82e2:	08 95       	ret

000082e4 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
    82e4:	3f 92       	push	r3
    82e6:	4f 92       	push	r4
    82e8:	5f 92       	push	r5
    82ea:	6f 92       	push	r6
    82ec:	7f 92       	push	r7
    82ee:	8f 92       	push	r8
    82f0:	9f 92       	push	r9
    82f2:	af 92       	push	r10
    82f4:	bf 92       	push	r11
    82f6:	cf 92       	push	r12
    82f8:	df 92       	push	r13
    82fa:	ef 92       	push	r14
    82fc:	ff 92       	push	r15
    82fe:	0f 93       	push	r16
    8300:	1f 93       	push	r17
    8302:	cf 93       	push	r28
    8304:	df 93       	push	r29
    8306:	00 d0       	rcall	.+0      	; 0x8308 <jsmn_parse+0x24>
    8308:	00 d0       	rcall	.+0      	; 0x830a <jsmn_parse+0x26>
    830a:	cd b7       	in	r28, 0x3d	; 61
    830c:	de b7       	in	r29, 0x3e	; 62
    830e:	8b 83       	std	Y+3, r24	; 0x03
    8310:	9c 83       	std	Y+4, r25	; 0x04
    8312:	29 83       	std	Y+1, r18	; 0x01
    8314:	3a 83       	std	Y+2, r19	; 0x02
    8316:	48 01       	movw	r8, r16
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    8318:	dc 01       	movw	r26, r24
    831a:	8d 91       	ld	r24, X+
    831c:	9c 91       	ld	r25, X
    831e:	84 17       	cp	r24, r20
    8320:	95 07       	cpc	r25, r21
    8322:	08 f0       	brcs	.+2      	; 0x8326 <jsmn_parse+0x42>
    8324:	1e c3       	rjmp	.+1596   	; 0x8962 <jsmn_parse+0x67e>
    8326:	fb 01       	movw	r30, r22
    8328:	e8 0f       	add	r30, r24
    832a:	f9 1f       	adc	r31, r25
    832c:	10 81       	ld	r17, Z
    832e:	11 23       	and	r17, r17
    8330:	09 f4       	brne	.+2      	; 0x8334 <jsmn_parse+0x50>
    8332:	1a c3       	rjmp	.+1588   	; 0x8968 <jsmn_parse+0x684>
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;
    8334:	c1 2c       	mov	r12, r1
    8336:	d1 2c       	mov	r13, r1
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
    8338:	aa 24       	eor	r10, r10
    833a:	aa 94       	dec	r10
    833c:	ba 2c       	mov	r11, r10
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    833e:	0f 2e       	mov	r0, r31
    8340:	f3 e0       	ldi	r31, 0x03	; 3
    8342:	3f 2e       	mov	r3, r31
    8344:	f0 2d       	mov	r31, r0
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    8346:	1c 32       	cpi	r17, 0x2C	; 44
    8348:	09 f4       	brne	.+2      	; 0x834c <jsmn_parse+0x68>
    834a:	0a c2       	rjmp	.+1044   	; 0x8760 <jsmn_parse+0x47c>
    834c:	80 f4       	brcc	.+32     	; 0x836e <jsmn_parse+0x8a>
    834e:	1d 30       	cpi	r17, 0x0D	; 13
    8350:	09 f4       	brne	.+2      	; 0x8354 <jsmn_parse+0x70>
    8352:	f5 c2       	rjmp	.+1514   	; 0x893e <jsmn_parse+0x65a>
    8354:	28 f4       	brcc	.+10     	; 0x8360 <jsmn_parse+0x7c>
    8356:	19 50       	subi	r17, 0x09	; 9
    8358:	12 30       	cpi	r17, 0x02	; 2
    835a:	08 f4       	brcc	.+2      	; 0x835e <jsmn_parse+0x7a>
    835c:	f0 c2       	rjmp	.+1504   	; 0x893e <jsmn_parse+0x65a>
    835e:	4d c2       	rjmp	.+1178   	; 0x87fa <jsmn_parse+0x516>
    8360:	10 32       	cpi	r17, 0x20	; 32
    8362:	09 f4       	brne	.+2      	; 0x8366 <jsmn_parse+0x82>
    8364:	ec c2       	rjmp	.+1496   	; 0x893e <jsmn_parse+0x65a>
    8366:	12 32       	cpi	r17, 0x22	; 34
    8368:	09 f4       	brne	.+2      	; 0x836c <jsmn_parse+0x88>
    836a:	f8 c0       	rjmp	.+496    	; 0x855c <jsmn_parse+0x278>
    836c:	46 c2       	rjmp	.+1164   	; 0x87fa <jsmn_parse+0x516>
    836e:	1d 35       	cpi	r17, 0x5D	; 93
    8370:	09 f4       	brne	.+2      	; 0x8374 <jsmn_parse+0x90>
    8372:	71 c0       	rjmp	.+226    	; 0x8456 <jsmn_parse+0x172>
    8374:	30 f4       	brcc	.+12     	; 0x8382 <jsmn_parse+0x9e>
    8376:	1a 33       	cpi	r17, 0x3A	; 58
    8378:	09 f4       	brne	.+2      	; 0x837c <jsmn_parse+0x98>
    837a:	e6 c1       	rjmp	.+972    	; 0x8748 <jsmn_parse+0x464>
    837c:	1b 35       	cpi	r17, 0x5B	; 91
    837e:	39 f0       	breq	.+14     	; 0x838e <jsmn_parse+0xaa>
    8380:	3c c2       	rjmp	.+1144   	; 0x87fa <jsmn_parse+0x516>
    8382:	1b 37       	cpi	r17, 0x7B	; 123
    8384:	21 f0       	breq	.+8      	; 0x838e <jsmn_parse+0xaa>
    8386:	1d 37       	cpi	r17, 0x7D	; 125
    8388:	09 f4       	brne	.+2      	; 0x838c <jsmn_parse+0xa8>
    838a:	65 c0       	rjmp	.+202    	; 0x8456 <jsmn_parse+0x172>
    838c:	36 c2       	rjmp	.+1132   	; 0x87fa <jsmn_parse+0x516>
			case '{': case '[':
				count++;
    838e:	bf ef       	ldi	r27, 0xFF	; 255
    8390:	cb 1a       	sub	r12, r27
    8392:	db 0a       	sbc	r13, r27
				if (tokens == NULL) {
    8394:	e9 81       	ldd	r30, Y+1	; 0x01
    8396:	fa 81       	ldd	r31, Y+2	; 0x02
    8398:	ef 2b       	or	r30, r31
    839a:	09 f4       	brne	.+2      	; 0x839e <jsmn_parse+0xba>
    839c:	d0 c2       	rjmp	.+1440   	; 0x893e <jsmn_parse+0x65a>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    839e:	ab 81       	ldd	r26, Y+3	; 0x03
    83a0:	bc 81       	ldd	r27, Y+4	; 0x04
    83a2:	12 96       	adiw	r26, 0x02	; 2
    83a4:	8d 91       	ld	r24, X+
    83a6:	9c 91       	ld	r25, X
    83a8:	13 97       	sbiw	r26, 0x03	; 3
    83aa:	88 15       	cp	r24, r8
    83ac:	99 05       	cpc	r25, r9
    83ae:	08 f0       	brcs	.+2      	; 0x83b2 <jsmn_parse+0xce>
    83b0:	04 c3       	rjmp	.+1544   	; 0x89ba <jsmn_parse+0x6d6>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    83b2:	fc 01       	movw	r30, r24
    83b4:	31 96       	adiw	r30, 0x01	; 1
    83b6:	12 96       	adiw	r26, 0x02	; 2
    83b8:	ed 93       	st	X+, r30
    83ba:	fc 93       	st	X, r31
    83bc:	13 97       	sbiw	r26, 0x03	; 3
    83be:	fc 01       	movw	r30, r24
    83c0:	ee 0f       	add	r30, r30
    83c2:	ff 1f       	adc	r31, r31
    83c4:	ee 0f       	add	r30, r30
    83c6:	ff 1f       	adc	r31, r31
    83c8:	ee 0f       	add	r30, r30
    83ca:	ff 1f       	adc	r31, r31
    83cc:	df 01       	movw	r26, r30
    83ce:	a8 1b       	sub	r26, r24
    83d0:	b9 0b       	sbc	r27, r25
    83d2:	e9 81       	ldd	r30, Y+1	; 0x01
    83d4:	fa 81       	ldd	r31, Y+2	; 0x02
    83d6:	ae 0f       	add	r26, r30
    83d8:	bf 1f       	adc	r27, r31
	tok->start = tok->end = -1;
    83da:	13 96       	adiw	r26, 0x03	; 3
    83dc:	ad 92       	st	X+, r10
    83de:	bc 92       	st	X, r11
    83e0:	14 97       	sbiw	r26, 0x04	; 4
    83e2:	11 96       	adiw	r26, 0x01	; 1
    83e4:	ad 92       	st	X+, r10
    83e6:	bc 92       	st	X, r11
    83e8:	12 97       	sbiw	r26, 0x02	; 2
	tok->size = 0;
    83ea:	15 96       	adiw	r26, 0x05	; 5
    83ec:	1d 92       	st	X+, r1
    83ee:	1c 92       	st	X, r1
    83f0:	16 97       	sbiw	r26, 0x06	; 6
				count++;
				if (tokens == NULL) {
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
    83f2:	10 97       	sbiw	r26, 0x00	; 0
    83f4:	09 f4       	brne	.+2      	; 0x83f8 <jsmn_parse+0x114>
    83f6:	e3 c2       	rjmp	.+1478   	; 0x89be <jsmn_parse+0x6da>
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
    83f8:	eb 81       	ldd	r30, Y+3	; 0x03
    83fa:	fc 81       	ldd	r31, Y+4	; 0x04
    83fc:	84 81       	ldd	r24, Z+4	; 0x04
    83fe:	95 81       	ldd	r25, Z+5	; 0x05
    8400:	8f 3f       	cpi	r24, 0xFF	; 255
    8402:	ff ef       	ldi	r31, 0xFF	; 255
    8404:	9f 07       	cpc	r25, r31
    8406:	99 f0       	breq	.+38     	; 0x842e <jsmn_parse+0x14a>
					tokens[parser->toksuper].size++;
    8408:	9c 01       	movw	r18, r24
    840a:	22 0f       	add	r18, r18
    840c:	33 1f       	adc	r19, r19
    840e:	22 0f       	add	r18, r18
    8410:	33 1f       	adc	r19, r19
    8412:	22 0f       	add	r18, r18
    8414:	33 1f       	adc	r19, r19
    8416:	28 1b       	sub	r18, r24
    8418:	39 0b       	sbc	r19, r25
    841a:	89 81       	ldd	r24, Y+1	; 0x01
    841c:	9a 81       	ldd	r25, Y+2	; 0x02
    841e:	28 0f       	add	r18, r24
    8420:	39 1f       	adc	r19, r25
    8422:	f9 01       	movw	r30, r18
    8424:	85 81       	ldd	r24, Z+5	; 0x05
    8426:	96 81       	ldd	r25, Z+6	; 0x06
    8428:	01 96       	adiw	r24, 0x01	; 1
    842a:	85 83       	std	Z+5, r24	; 0x05
    842c:	96 83       	std	Z+6, r25	; 0x06
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
    842e:	1b 37       	cpi	r17, 0x7B	; 123
    8430:	11 f4       	brne	.+4      	; 0x8436 <jsmn_parse+0x152>
    8432:	81 e0       	ldi	r24, 0x01	; 1
    8434:	01 c0       	rjmp	.+2      	; 0x8438 <jsmn_parse+0x154>
    8436:	82 e0       	ldi	r24, 0x02	; 2
    8438:	8c 93       	st	X, r24
				token->start = parser->pos;
    843a:	eb 81       	ldd	r30, Y+3	; 0x03
    843c:	fc 81       	ldd	r31, Y+4	; 0x04
    843e:	80 81       	ld	r24, Z
    8440:	91 81       	ldd	r25, Z+1	; 0x01
    8442:	11 96       	adiw	r26, 0x01	; 1
    8444:	8d 93       	st	X+, r24
    8446:	9c 93       	st	X, r25
    8448:	12 97       	sbiw	r26, 0x02	; 2
				parser->toksuper = parser->toknext - 1;
    844a:	82 81       	ldd	r24, Z+2	; 0x02
    844c:	93 81       	ldd	r25, Z+3	; 0x03
    844e:	01 97       	sbiw	r24, 0x01	; 1
    8450:	84 83       	std	Z+4, r24	; 0x04
    8452:	95 83       	std	Z+5, r25	; 0x05
				break;
    8454:	74 c2       	rjmp	.+1256   	; 0x893e <jsmn_parse+0x65a>
			case '}': case ']':
				if (tokens == NULL)
    8456:	29 81       	ldd	r18, Y+1	; 0x01
    8458:	3a 81       	ldd	r19, Y+2	; 0x02
    845a:	23 2b       	or	r18, r19
    845c:	09 f4       	brne	.+2      	; 0x8460 <jsmn_parse+0x17c>
    845e:	6f c2       	rjmp	.+1246   	; 0x893e <jsmn_parse+0x65a>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
    8460:	1d 37       	cpi	r17, 0x7D	; 125
    8462:	19 f4       	brne	.+6      	; 0x846a <jsmn_parse+0x186>
    8464:	77 24       	eor	r7, r7
    8466:	73 94       	inc	r7
    8468:	03 c0       	rjmp	.+6      	; 0x8470 <jsmn_parse+0x18c>
    846a:	68 94       	set
    846c:	77 24       	eor	r7, r7
    846e:	71 f8       	bld	r7, 1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    8470:	ab 81       	ldd	r26, Y+3	; 0x03
    8472:	bc 81       	ldd	r27, Y+4	; 0x04
    8474:	12 96       	adiw	r26, 0x02	; 2
    8476:	0d 91       	ld	r16, X+
    8478:	1c 91       	ld	r17, X
    847a:	13 97       	sbiw	r26, 0x03	; 3
    847c:	f8 01       	movw	r30, r16
    847e:	31 97       	sbiw	r30, 0x01	; 1
    8480:	ff 23       	and	r31, r31
    8482:	0c f4       	brge	.+2      	; 0x8486 <jsmn_parse+0x1a2>
    8484:	a6 c2       	rjmp	.+1356   	; 0x89d2 <jsmn_parse+0x6ee>
    8486:	98 01       	movw	r18, r16
    8488:	22 0f       	add	r18, r18
    848a:	33 1f       	adc	r19, r19
    848c:	22 0f       	add	r18, r18
    848e:	33 1f       	adc	r19, r19
    8490:	22 0f       	add	r18, r18
    8492:	33 1f       	adc	r19, r19
    8494:	20 1b       	sub	r18, r16
    8496:	31 0b       	sbc	r19, r17
    8498:	29 01       	movw	r4, r18
    849a:	b7 e0       	ldi	r27, 0x07	; 7
    849c:	4b 1a       	sub	r4, r27
    849e:	51 08       	sbc	r5, r1
    84a0:	29 81       	ldd	r18, Y+1	; 0x01
    84a2:	3a 81       	ldd	r19, Y+2	; 0x02
    84a4:	42 0e       	add	r4, r18
    84a6:	53 1e       	adc	r5, r19
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    84a8:	d2 01       	movw	r26, r4
    84aa:	11 96       	adiw	r26, 0x01	; 1
    84ac:	0d 91       	ld	r16, X+
    84ae:	1c 91       	ld	r17, X
    84b0:	12 97       	sbiw	r26, 0x02	; 2
    84b2:	0f 3f       	cpi	r16, 0xFF	; 255
    84b4:	1f 4f       	sbci	r17, 0xFF	; 255
    84b6:	e9 f0       	breq	.+58     	; 0x84f2 <jsmn_parse+0x20e>
    84b8:	d2 01       	movw	r26, r4
    84ba:	13 96       	adiw	r26, 0x03	; 3
    84bc:	0d 91       	ld	r16, X+
    84be:	1c 91       	ld	r17, X
    84c0:	14 97       	sbiw	r26, 0x04	; 4
    84c2:	0f 3f       	cpi	r16, 0xFF	; 255
    84c4:	1f 4f       	sbci	r17, 0xFF	; 255
    84c6:	a9 f4       	brne	.+42     	; 0x84f2 <jsmn_parse+0x20e>
						if (token->type != type) {
    84c8:	d2 01       	movw	r26, r4
    84ca:	2c 91       	ld	r18, X
    84cc:	72 12       	cpse	r7, r18
    84ce:	79 c2       	rjmp	.+1266   	; 0x89c2 <jsmn_parse+0x6de>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
    84d0:	ab 81       	ldd	r26, Y+3	; 0x03
    84d2:	bc 81       	ldd	r27, Y+4	; 0x04
    84d4:	14 96       	adiw	r26, 0x04	; 4
    84d6:	ad 92       	st	X+, r10
    84d8:	bc 92       	st	X, r11
    84da:	15 97       	sbiw	r26, 0x05	; 5
						token->end = parser->pos + 1;
    84dc:	01 96       	adiw	r24, 0x01	; 1
    84de:	d2 01       	movw	r26, r4
    84e0:	13 96       	adiw	r26, 0x03	; 3
    84e2:	8d 93       	st	X+, r24
    84e4:	9c 93       	st	X, r25
    84e6:	14 97       	sbiw	r26, 0x04	; 4
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
    84e8:	ef 3f       	cpi	r30, 0xFF	; 255
    84ea:	bf ef       	ldi	r27, 0xFF	; 255
    84ec:	fb 07       	cpc	r31, r27
    84ee:	41 f4       	brne	.+16     	; 0x8500 <jsmn_parse+0x21c>
    84f0:	6a c2       	rjmp	.+1236   	; 0x89c6 <jsmn_parse+0x6e2>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    84f2:	31 97       	sbiw	r30, 0x01	; 1
    84f4:	27 e0       	ldi	r18, 0x07	; 7
    84f6:	42 1a       	sub	r4, r18
    84f8:	51 08       	sbc	r5, r1
    84fa:	ff 23       	and	r31, r31
    84fc:	ac f6       	brge	.-86     	; 0x84a8 <jsmn_parse+0x1c4>
    84fe:	69 c2       	rjmp	.+1234   	; 0x89d2 <jsmn_parse+0x6ee>
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
				for (; i >= 0; i--) {
    8500:	ff 23       	and	r31, r31
    8502:	0c f4       	brge	.+2      	; 0x8506 <jsmn_parse+0x222>
    8504:	1c c2       	rjmp	.+1080   	; 0x893e <jsmn_parse+0x65a>
    8506:	cf 01       	movw	r24, r30
    8508:	88 0f       	add	r24, r24
    850a:	99 1f       	adc	r25, r25
    850c:	88 0f       	add	r24, r24
    850e:	99 1f       	adc	r25, r25
    8510:	88 0f       	add	r24, r24
    8512:	99 1f       	adc	r25, r25
    8514:	8c 01       	movw	r16, r24
    8516:	0e 1b       	sub	r16, r30
    8518:	1f 0b       	sbc	r17, r31
    851a:	89 81       	ldd	r24, Y+1	; 0x01
    851c:	9a 81       	ldd	r25, Y+2	; 0x02
    851e:	08 0f       	add	r16, r24
    8520:	19 1f       	adc	r17, r25
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    8522:	d8 01       	movw	r26, r16
    8524:	11 96       	adiw	r26, 0x01	; 1
    8526:	8d 91       	ld	r24, X+
    8528:	9c 91       	ld	r25, X
    852a:	12 97       	sbiw	r26, 0x02	; 2
    852c:	01 96       	adiw	r24, 0x01	; 1
    852e:	71 f0       	breq	.+28     	; 0x854c <jsmn_parse+0x268>
    8530:	d8 01       	movw	r26, r16
    8532:	13 96       	adiw	r26, 0x03	; 3
    8534:	8d 91       	ld	r24, X+
    8536:	9c 91       	ld	r25, X
    8538:	14 97       	sbiw	r26, 0x04	; 4
    853a:	01 96       	adiw	r24, 0x01	; 1
    853c:	39 f4       	brne	.+14     	; 0x854c <jsmn_parse+0x268>
						parser->toksuper = i;
    853e:	ab 81       	ldd	r26, Y+3	; 0x03
    8540:	bc 81       	ldd	r27, Y+4	; 0x04
    8542:	14 96       	adiw	r26, 0x04	; 4
    8544:	ed 93       	st	X+, r30
    8546:	fc 93       	st	X, r31
    8548:	15 97       	sbiw	r26, 0x05	; 5
						break;
    854a:	f9 c1       	rjmp	.+1010   	; 0x893e <jsmn_parse+0x65a>
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
				for (; i >= 0; i--) {
    854c:	31 97       	sbiw	r30, 0x01	; 1
    854e:	07 50       	subi	r16, 0x07	; 7
    8550:	11 09       	sbc	r17, r1
    8552:	ef 3f       	cpi	r30, 0xFF	; 255
    8554:	bf ef       	ldi	r27, 0xFF	; 255
    8556:	fb 07       	cpc	r31, r27
    8558:	21 f7       	brne	.-56     	; 0x8522 <jsmn_parse+0x23e>
    855a:	f1 c1       	rjmp	.+994    	; 0x893e <jsmn_parse+0x65a>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
    855c:	9c 01       	movw	r18, r24
    855e:	2f 5f       	subi	r18, 0xFF	; 255
    8560:	3f 4f       	sbci	r19, 0xFF	; 255
    8562:	eb 81       	ldd	r30, Y+3	; 0x03
    8564:	fc 81       	ldd	r31, Y+4	; 0x04
    8566:	20 83       	st	Z, r18
    8568:	31 83       	std	Z+1, r19	; 0x01

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    856a:	24 17       	cp	r18, r20
    856c:	35 07       	cpc	r19, r21
    856e:	08 f0       	brcs	.+2      	; 0x8572 <jsmn_parse+0x28e>
    8570:	d2 c0       	rjmp	.+420    	; 0x8716 <jsmn_parse+0x432>
    8572:	fb 01       	movw	r30, r22
    8574:	e2 0f       	add	r30, r18
    8576:	f3 1f       	adc	r31, r19
    8578:	e0 81       	ld	r30, Z
    857a:	ee 23       	and	r30, r30
    857c:	09 f4       	brne	.+2      	; 0x8580 <jsmn_parse+0x29c>
    857e:	cb c0       	rjmp	.+406    	; 0x8716 <jsmn_parse+0x432>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
    8580:	e2 32       	cpi	r30, 0x22	; 34
    8582:	09 f0       	breq	.+2      	; 0x8586 <jsmn_parse+0x2a2>
    8584:	4c c0       	rjmp	.+152    	; 0x861e <jsmn_parse+0x33a>
    8586:	03 c0       	rjmp	.+6      	; 0x858e <jsmn_parse+0x2aa>
    8588:	e2 32       	cpi	r30, 0x22	; 34
    858a:	09 f0       	breq	.+2      	; 0x858e <jsmn_parse+0x2aa>
    858c:	48 c0       	rjmp	.+144    	; 0x861e <jsmn_parse+0x33a>
			if (tokens == NULL) {
    858e:	29 81       	ldd	r18, Y+1	; 0x01
    8590:	3a 81       	ldd	r19, Y+2	; 0x02
    8592:	23 2b       	or	r18, r19
    8594:	09 f4       	brne	.+2      	; 0x8598 <jsmn_parse+0x2b4>
    8596:	21 c2       	rjmp	.+1090   	; 0x89da <jsmn_parse+0x6f6>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    8598:	ab 81       	ldd	r26, Y+3	; 0x03
    859a:	bc 81       	ldd	r27, Y+4	; 0x04
    859c:	12 96       	adiw	r26, 0x02	; 2
    859e:	2d 91       	ld	r18, X+
    85a0:	3c 91       	ld	r19, X
    85a2:	13 97       	sbiw	r26, 0x03	; 3
    85a4:	28 15       	cp	r18, r8
    85a6:	39 05       	cpc	r19, r9
    85a8:	d8 f4       	brcc	.+54     	; 0x85e0 <jsmn_parse+0x2fc>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    85aa:	f9 01       	movw	r30, r18
    85ac:	31 96       	adiw	r30, 0x01	; 1
    85ae:	12 96       	adiw	r26, 0x02	; 2
    85b0:	ed 93       	st	X+, r30
    85b2:	fc 93       	st	X, r31
    85b4:	13 97       	sbiw	r26, 0x03	; 3
    85b6:	f9 01       	movw	r30, r18
    85b8:	ee 0f       	add	r30, r30
    85ba:	ff 1f       	adc	r31, r31
    85bc:	ee 0f       	add	r30, r30
    85be:	ff 1f       	adc	r31, r31
    85c0:	ee 0f       	add	r30, r30
    85c2:	ff 1f       	adc	r31, r31
    85c4:	e2 1b       	sub	r30, r18
    85c6:	f3 0b       	sbc	r31, r19
    85c8:	29 81       	ldd	r18, Y+1	; 0x01
    85ca:	3a 81       	ldd	r19, Y+2	; 0x02
    85cc:	e2 0f       	add	r30, r18
    85ce:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    85d0:	a3 82       	std	Z+3, r10	; 0x03
    85d2:	b4 82       	std	Z+4, r11	; 0x04
    85d4:	a1 82       	std	Z+1, r10	; 0x01
    85d6:	b2 82       	std	Z+2, r11	; 0x02
	tok->size = 0;
    85d8:	15 82       	std	Z+5, r1	; 0x05
    85da:	16 82       	std	Z+6, r1	; 0x06
		if (c == '\"') {
			if (tokens == NULL) {
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
    85dc:	30 97       	sbiw	r30, 0x00	; 0
    85de:	31 f4       	brne	.+12     	; 0x85ec <jsmn_parse+0x308>
				parser->pos = start;
    85e0:	ab 81       	ldd	r26, Y+3	; 0x03
    85e2:	bc 81       	ldd	r27, Y+4	; 0x04
    85e4:	8d 93       	st	X+, r24
    85e6:	9c 93       	st	X, r25
				return JSMN_ERROR_NOMEM;
    85e8:	8f ef       	ldi	r24, 0xFF	; 255
    85ea:	fb c1       	rjmp	.+1014   	; 0x89e2 <jsmn_parse+0x6fe>
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
    85ec:	ab 81       	ldd	r26, Y+3	; 0x03
    85ee:	bc 81       	ldd	r27, Y+4	; 0x04
    85f0:	2d 91       	ld	r18, X+
    85f2:	3c 91       	ld	r19, X
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    85f4:	30 82       	st	Z, r3
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
				return JSMN_ERROR_NOMEM;
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
    85f6:	01 96       	adiw	r24, 0x01	; 1
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
	token->start = start;
    85f8:	81 83       	std	Z+1, r24	; 0x01
    85fa:	92 83       	std	Z+2, r25	; 0x02
	token->end = end;
    85fc:	23 83       	std	Z+3, r18	; 0x03
    85fe:	34 83       	std	Z+4, r19	; 0x04
	token->size = 0;
    8600:	15 82       	std	Z+5, r1	; 0x05
    8602:	16 82       	std	Z+6, r1	; 0x06
#endif
				break;
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    8604:	bf ef       	ldi	r27, 0xFF	; 255
    8606:	cb 1a       	sub	r12, r27
    8608:	db 0a       	sbc	r13, r27
				if (parser->toksuper != -1 && tokens != NULL)
    860a:	eb 81       	ldd	r30, Y+3	; 0x03
    860c:	fc 81       	ldd	r31, Y+4	; 0x04
    860e:	84 81       	ldd	r24, Z+4	; 0x04
    8610:	95 81       	ldd	r25, Z+5	; 0x05
    8612:	8f 3f       	cpi	r24, 0xFF	; 255
    8614:	ff ef       	ldi	r31, 0xFF	; 255
    8616:	9f 07       	cpc	r25, r31
    8618:	09 f0       	breq	.+2      	; 0x861c <jsmn_parse+0x338>
    861a:	83 c0       	rjmp	.+262    	; 0x8722 <jsmn_parse+0x43e>
    861c:	90 c1       	rjmp	.+800    	; 0x893e <jsmn_parse+0x65a>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
    861e:	ec 35       	cpi	r30, 0x5C	; 92
    8620:	09 f0       	breq	.+2      	; 0x8624 <jsmn_parse+0x340>
    8622:	66 c0       	rjmp	.+204    	; 0x86f0 <jsmn_parse+0x40c>
    8624:	f9 01       	movw	r30, r18
    8626:	31 96       	adiw	r30, 0x01	; 1
    8628:	e4 17       	cp	r30, r20
    862a:	f5 07       	cpc	r31, r21
    862c:	08 f0       	brcs	.+2      	; 0x8630 <jsmn_parse+0x34c>
    862e:	60 c0       	rjmp	.+192    	; 0x86f0 <jsmn_parse+0x40c>
			int i;
			parser->pos++;
    8630:	ab 81       	ldd	r26, Y+3	; 0x03
    8632:	bc 81       	ldd	r27, Y+4	; 0x04
    8634:	ed 93       	st	X+, r30
    8636:	fc 93       	st	X, r31
			switch (js[parser->pos]) {
    8638:	e6 0f       	add	r30, r22
    863a:	f7 1f       	adc	r31, r23
    863c:	e0 80       	ld	r14, Z
    863e:	4e 2c       	mov	r4, r14
    8640:	51 2c       	mov	r5, r1
    8642:	d2 01       	movw	r26, r4
    8644:	92 97       	sbiw	r26, 0x22	; 34
    8646:	a4 35       	cpi	r26, 0x54	; 84
    8648:	b1 05       	cpc	r27, r1
    864a:	08 f0       	brcs	.+2      	; 0x864e <jsmn_parse+0x36a>
    864c:	4b c0       	rjmp	.+150    	; 0x86e4 <jsmn_parse+0x400>
    864e:	ab 5c       	subi	r26, 0xCB	; 203
    8650:	be 4f       	sbci	r27, 0xFE	; 254
    8652:	fd 01       	movw	r30, r26
    8654:	0c 94 41 56 	jmp	0xac82	; 0xac82 <__tablejump2__>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
    8658:	f9 01       	movw	r30, r18
    865a:	32 96       	adiw	r30, 0x02	; 2
    865c:	ab 81       	ldd	r26, Y+3	; 0x03
    865e:	bc 81       	ldd	r27, Y+4	; 0x04
    8660:	ed 93       	st	X+, r30
    8662:	fc 93       	st	X, r31
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    8664:	e4 17       	cp	r30, r20
    8666:	f5 07       	cpc	r31, r21
    8668:	a0 f5       	brcc	.+104    	; 0x86d2 <jsmn_parse+0x3ee>
    866a:	e6 0f       	add	r30, r22
    866c:	f7 1f       	adc	r31, r23
    866e:	f0 80       	ld	r15, Z
    8670:	ff 20       	and	r15, r15
    8672:	79 f1       	breq	.+94     	; 0x86d2 <jsmn_parse+0x3ee>
    8674:	d9 01       	movw	r26, r18
    8676:	13 96       	adiw	r26, 0x03	; 3
    8678:	8b 01       	movw	r16, r22
    867a:	0a 0f       	add	r16, r26
    867c:	1b 1f       	adc	r17, r27
    867e:	39 01       	movw	r6, r18
    8680:	e6 e0       	ldi	r30, 0x06	; 6
    8682:	6e 0e       	add	r6, r30
    8684:	71 1c       	adc	r7, r1
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
    8686:	0f 2e       	mov	r0, r31
    8688:	f0 ed       	ldi	r31, 0xD0	; 208
    868a:	ef 2e       	mov	r14, r31
    868c:	f0 2d       	mov	r31, r0
    868e:	ef 0c       	add	r14, r15
    8690:	f9 e0       	ldi	r31, 0x09	; 9
    8692:	fe 15       	cp	r31, r14
    8694:	70 f4       	brcc	.+28     	; 0x86b2 <jsmn_parse+0x3ce>
    8696:	2f 2d       	mov	r18, r15
    8698:	2f 7d       	andi	r18, 0xDF	; 223
    869a:	f2 2e       	mov	r15, r18
    869c:	3f eb       	ldi	r19, 0xBF	; 191
    869e:	f3 0e       	add	r15, r19
    86a0:	e5 e0       	ldi	r30, 0x05	; 5
    86a2:	ef 15       	cp	r30, r15
    86a4:	30 f4       	brcc	.+12     	; 0x86b2 <jsmn_parse+0x3ce>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
    86a6:	ab 81       	ldd	r26, Y+3	; 0x03
    86a8:	bc 81       	ldd	r27, Y+4	; 0x04
    86aa:	8d 93       	st	X+, r24
    86ac:	9c 93       	st	X, r25
							return JSMN_ERROR_INVAL;
    86ae:	8e ef       	ldi	r24, 0xFE	; 254
    86b0:	98 c1       	rjmp	.+816    	; 0x89e2 <jsmn_parse+0x6fe>
						}
						parser->pos++;
    86b2:	eb 81       	ldd	r30, Y+3	; 0x03
    86b4:	fc 81       	ldd	r31, Y+4	; 0x04
    86b6:	a0 83       	st	Z, r26
    86b8:	b1 83       	std	Z+1, r27	; 0x01
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    86ba:	a6 15       	cp	r26, r6
    86bc:	b7 05       	cpc	r27, r7
    86be:	49 f0       	breq	.+18     	; 0x86d2 <jsmn_parse+0x3ee>
    86c0:	a4 17       	cp	r26, r20
    86c2:	b5 07       	cpc	r27, r21
    86c4:	31 f0       	breq	.+12     	; 0x86d2 <jsmn_parse+0x3ee>
    86c6:	f8 01       	movw	r30, r16
    86c8:	f1 90       	ld	r15, Z+
    86ca:	8f 01       	movw	r16, r30
    86cc:	11 96       	adiw	r26, 0x01	; 1
    86ce:	f1 10       	cpse	r15, r1
    86d0:	da cf       	rjmp	.-76     	; 0x8686 <jsmn_parse+0x3a2>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
    86d2:	ab 81       	ldd	r26, Y+3	; 0x03
    86d4:	bc 81       	ldd	r27, Y+4	; 0x04
    86d6:	ed 91       	ld	r30, X+
    86d8:	fc 91       	ld	r31, X
    86da:	11 97       	sbiw	r26, 0x01	; 1
    86dc:	31 97       	sbiw	r30, 0x01	; 1
    86de:	ed 93       	st	X+, r30
    86e0:	fc 93       	st	X, r31
    86e2:	06 c0       	rjmp	.+12     	; 0x86f0 <jsmn_parse+0x40c>
					break;
				/* Unexpected symbol */
				default:
					parser->pos = start;
    86e4:	eb 81       	ldd	r30, Y+3	; 0x03
    86e6:	fc 81       	ldd	r31, Y+4	; 0x04
    86e8:	80 83       	st	Z, r24
    86ea:	91 83       	std	Z+1, r25	; 0x01
					return JSMN_ERROR_INVAL;
    86ec:	8e ef       	ldi	r24, 0xFE	; 254
    86ee:	79 c1       	rjmp	.+754    	; 0x89e2 <jsmn_parse+0x6fe>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    86f0:	ab 81       	ldd	r26, Y+3	; 0x03
    86f2:	bc 81       	ldd	r27, Y+4	; 0x04
    86f4:	ed 91       	ld	r30, X+
    86f6:	fc 91       	ld	r31, X
    86f8:	11 97       	sbiw	r26, 0x01	; 1
    86fa:	9f 01       	movw	r18, r30
    86fc:	2f 5f       	subi	r18, 0xFF	; 255
    86fe:	3f 4f       	sbci	r19, 0xFF	; 255
    8700:	2d 93       	st	X+, r18
    8702:	3c 93       	st	X, r19
    8704:	24 17       	cp	r18, r20
    8706:	35 07       	cpc	r19, r21
    8708:	30 f4       	brcc	.+12     	; 0x8716 <jsmn_parse+0x432>
    870a:	fb 01       	movw	r30, r22
    870c:	e2 0f       	add	r30, r18
    870e:	f3 1f       	adc	r31, r19
    8710:	e0 81       	ld	r30, Z
    8712:	e1 11       	cpse	r30, r1
    8714:	39 cf       	rjmp	.-398    	; 0x8588 <jsmn_parse+0x2a4>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
    8716:	eb 81       	ldd	r30, Y+3	; 0x03
    8718:	fc 81       	ldd	r31, Y+4	; 0x04
    871a:	80 83       	st	Z, r24
    871c:	91 83       	std	Z+1, r25	; 0x01
	return JSMN_ERROR_PART;
    871e:	8d ef       	ldi	r24, 0xFD	; 253
    8720:	60 c1       	rjmp	.+704    	; 0x89e2 <jsmn_parse+0x6fe>
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
					tokens[parser->toksuper].size++;
    8722:	fc 01       	movw	r30, r24
    8724:	ee 0f       	add	r30, r30
    8726:	ff 1f       	adc	r31, r31
    8728:	ee 0f       	add	r30, r30
    872a:	ff 1f       	adc	r31, r31
    872c:	ee 0f       	add	r30, r30
    872e:	ff 1f       	adc	r31, r31
    8730:	e8 1b       	sub	r30, r24
    8732:	f9 0b       	sbc	r31, r25
    8734:	29 81       	ldd	r18, Y+1	; 0x01
    8736:	3a 81       	ldd	r19, Y+2	; 0x02
    8738:	e2 0f       	add	r30, r18
    873a:	f3 1f       	adc	r31, r19
    873c:	85 81       	ldd	r24, Z+5	; 0x05
    873e:	96 81       	ldd	r25, Z+6	; 0x06
    8740:	01 96       	adiw	r24, 0x01	; 1
    8742:	85 83       	std	Z+5, r24	; 0x05
    8744:	96 83       	std	Z+6, r25	; 0x06
    8746:	fb c0       	rjmp	.+502    	; 0x893e <jsmn_parse+0x65a>
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
    8748:	ab 81       	ldd	r26, Y+3	; 0x03
    874a:	bc 81       	ldd	r27, Y+4	; 0x04
    874c:	12 96       	adiw	r26, 0x02	; 2
    874e:	8d 91       	ld	r24, X+
    8750:	9c 91       	ld	r25, X
    8752:	13 97       	sbiw	r26, 0x03	; 3
    8754:	01 97       	sbiw	r24, 0x01	; 1
    8756:	14 96       	adiw	r26, 0x04	; 4
    8758:	8d 93       	st	X+, r24
    875a:	9c 93       	st	X, r25
    875c:	15 97       	sbiw	r26, 0x05	; 5
				break;
    875e:	ef c0       	rjmp	.+478    	; 0x893e <jsmn_parse+0x65a>
			case ',':
				if (tokens != NULL &&
    8760:	e9 81       	ldd	r30, Y+1	; 0x01
    8762:	fa 81       	ldd	r31, Y+2	; 0x02
    8764:	ef 2b       	or	r30, r31
    8766:	09 f4       	brne	.+2      	; 0x876a <jsmn_parse+0x486>
    8768:	ea c0       	rjmp	.+468    	; 0x893e <jsmn_parse+0x65a>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
    876a:	ab 81       	ldd	r26, Y+3	; 0x03
    876c:	bc 81       	ldd	r27, Y+4	; 0x04
    876e:	14 96       	adiw	r26, 0x04	; 4
    8770:	8d 91       	ld	r24, X+
    8772:	9c 91       	ld	r25, X
    8774:	15 97       	sbiw	r26, 0x05	; 5
    8776:	fc 01       	movw	r30, r24
    8778:	ee 0f       	add	r30, r30
    877a:	ff 1f       	adc	r31, r31
    877c:	ee 0f       	add	r30, r30
    877e:	ff 1f       	adc	r31, r31
    8780:	ee 0f       	add	r30, r30
    8782:	ff 1f       	adc	r31, r31
    8784:	e8 1b       	sub	r30, r24
    8786:	f9 0b       	sbc	r31, r25
    8788:	29 81       	ldd	r18, Y+1	; 0x01
    878a:	3a 81       	ldd	r19, Y+2	; 0x02
    878c:	e2 0f       	add	r30, r18
    878e:	f3 1f       	adc	r31, r19
    8790:	80 81       	ld	r24, Z
    8792:	81 50       	subi	r24, 0x01	; 1
    8794:	82 30       	cpi	r24, 0x02	; 2
    8796:	08 f4       	brcc	.+2      	; 0x879a <jsmn_parse+0x4b6>
    8798:	d2 c0       	rjmp	.+420    	; 0x893e <jsmn_parse+0x65a>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
    879a:	12 96       	adiw	r26, 0x02	; 2
    879c:	2d 91       	ld	r18, X+
    879e:	3c 91       	ld	r19, X
    87a0:	13 97       	sbiw	r26, 0x03	; 3
    87a2:	c9 01       	movw	r24, r18
    87a4:	01 97       	sbiw	r24, 0x01	; 1
    87a6:	99 23       	and	r25, r25
    87a8:	0c f4       	brge	.+2      	; 0x87ac <jsmn_parse+0x4c8>
    87aa:	c9 c0       	rjmp	.+402    	; 0x893e <jsmn_parse+0x65a>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
    87ac:	f9 01       	movw	r30, r18
    87ae:	ee 0f       	add	r30, r30
    87b0:	ff 1f       	adc	r31, r31
    87b2:	ee 0f       	add	r30, r30
    87b4:	ff 1f       	adc	r31, r31
    87b6:	ee 0f       	add	r30, r30
    87b8:	ff 1f       	adc	r31, r31
    87ba:	e2 1b       	sub	r30, r18
    87bc:	f3 0b       	sbc	r31, r19
    87be:	37 97       	sbiw	r30, 0x07	; 7
    87c0:	a9 81       	ldd	r26, Y+1	; 0x01
    87c2:	ba 81       	ldd	r27, Y+2	; 0x02
    87c4:	ea 0f       	add	r30, r26
    87c6:	fb 1f       	adc	r31, r27
    87c8:	10 81       	ld	r17, Z
    87ca:	11 50       	subi	r17, 0x01	; 1
    87cc:	12 30       	cpi	r17, 0x02	; 2
    87ce:	80 f4       	brcc	.+32     	; 0x87f0 <jsmn_parse+0x50c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
    87d0:	01 81       	ldd	r16, Z+1	; 0x01
    87d2:	12 81       	ldd	r17, Z+2	; 0x02
    87d4:	0f 3f       	cpi	r16, 0xFF	; 255
    87d6:	1f 4f       	sbci	r17, 0xFF	; 255
    87d8:	59 f0       	breq	.+22     	; 0x87f0 <jsmn_parse+0x50c>
    87da:	a3 81       	ldd	r26, Z+3	; 0x03
    87dc:	b4 81       	ldd	r27, Z+4	; 0x04
    87de:	11 96       	adiw	r26, 0x01	; 1
    87e0:	39 f4       	brne	.+14     	; 0x87f0 <jsmn_parse+0x50c>
								parser->toksuper = i;
    87e2:	ab 81       	ldd	r26, Y+3	; 0x03
    87e4:	bc 81       	ldd	r27, Y+4	; 0x04
    87e6:	14 96       	adiw	r26, 0x04	; 4
    87e8:	8d 93       	st	X+, r24
    87ea:	9c 93       	st	X, r25
    87ec:	15 97       	sbiw	r26, 0x05	; 5
								break;
    87ee:	a7 c0       	rjmp	.+334    	; 0x893e <jsmn_parse+0x65a>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
    87f0:	01 97       	sbiw	r24, 0x01	; 1
    87f2:	37 97       	sbiw	r30, 0x07	; 7
    87f4:	99 23       	and	r25, r25
    87f6:	44 f7       	brge	.-48     	; 0x87c8 <jsmn_parse+0x4e4>
    87f8:	a2 c0       	rjmp	.+324    	; 0x893e <jsmn_parse+0x65a>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    87fa:	ab 81       	ldd	r26, Y+3	; 0x03
    87fc:	bc 81       	ldd	r27, Y+4	; 0x04
    87fe:	ed 91       	ld	r30, X+
    8800:	fc 91       	ld	r31, X
    8802:	e4 17       	cp	r30, r20
    8804:	f5 07       	cpc	r31, r21
    8806:	a8 f5       	brcc	.+106    	; 0x8872 <jsmn_parse+0x58e>
    8808:	db 01       	movw	r26, r22
    880a:	ae 0f       	add	r26, r30
    880c:	bf 1f       	adc	r27, r31
    880e:	1c 91       	ld	r17, X
    8810:	11 23       	and	r17, r17
    8812:	79 f1       	breq	.+94     	; 0x8872 <jsmn_parse+0x58e>
    8814:	df 01       	movw	r26, r30
    8816:	11 96       	adiw	r26, 0x01	; 1
    8818:	9d 01       	movw	r18, r26
    881a:	26 0f       	add	r18, r22
    881c:	37 1f       	adc	r19, r23
		switch (js[parser->pos]) {
    881e:	10 32       	cpi	r17, 0x20	; 32
    8820:	41 f1       	breq	.+80     	; 0x8872 <jsmn_parse+0x58e>
    8822:	38 f4       	brcc	.+14     	; 0x8832 <jsmn_parse+0x54e>
    8824:	19 30       	cpi	r17, 0x09	; 9
    8826:	78 f0       	brcs	.+30     	; 0x8846 <jsmn_parse+0x562>
    8828:	1b 30       	cpi	r17, 0x0B	; 11
    882a:	18 f1       	brcs	.+70     	; 0x8872 <jsmn_parse+0x58e>
    882c:	1d 30       	cpi	r17, 0x0D	; 13
    882e:	59 f4       	brne	.+22     	; 0x8846 <jsmn_parse+0x562>
    8830:	20 c0       	rjmp	.+64     	; 0x8872 <jsmn_parse+0x58e>
    8832:	1a 33       	cpi	r17, 0x3A	; 58
    8834:	f1 f0       	breq	.+60     	; 0x8872 <jsmn_parse+0x58e>
    8836:	18 f4       	brcc	.+6      	; 0x883e <jsmn_parse+0x55a>
    8838:	1c 32       	cpi	r17, 0x2C	; 44
    883a:	29 f4       	brne	.+10     	; 0x8846 <jsmn_parse+0x562>
    883c:	1a c0       	rjmp	.+52     	; 0x8872 <jsmn_parse+0x58e>
    883e:	1d 35       	cpi	r17, 0x5D	; 93
    8840:	c1 f0       	breq	.+48     	; 0x8872 <jsmn_parse+0x58e>
    8842:	1d 37       	cpi	r17, 0x7D	; 125
    8844:	b1 f0       	breq	.+44     	; 0x8872 <jsmn_parse+0x58e>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
    8846:	10 52       	subi	r17, 0x20	; 32
    8848:	1f 35       	cpi	r17, 0x5F	; 95
    884a:	30 f0       	brcs	.+12     	; 0x8858 <jsmn_parse+0x574>
			parser->pos = start;
    884c:	eb 81       	ldd	r30, Y+3	; 0x03
    884e:	fc 81       	ldd	r31, Y+4	; 0x04
    8850:	80 83       	st	Z, r24
    8852:	91 83       	std	Z+1, r25	; 0x01
			return JSMN_ERROR_INVAL;
    8854:	8e ef       	ldi	r24, 0xFE	; 254
    8856:	c5 c0       	rjmp	.+394    	; 0x89e2 <jsmn_parse+0x6fe>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    8858:	31 96       	adiw	r30, 0x01	; 1
    885a:	ab 81       	ldd	r26, Y+3	; 0x03
    885c:	bc 81       	ldd	r27, Y+4	; 0x04
    885e:	ed 93       	st	X+, r30
    8860:	fc 93       	st	X, r31
    8862:	e4 17       	cp	r30, r20
    8864:	f5 07       	cpc	r31, r21
    8866:	28 f4       	brcc	.+10     	; 0x8872 <jsmn_parse+0x58e>
    8868:	d9 01       	movw	r26, r18
    886a:	1d 91       	ld	r17, X+
    886c:	9d 01       	movw	r18, r26
    886e:	11 11       	cpse	r17, r1
    8870:	d6 cf       	rjmp	.-84     	; 0x881e <jsmn_parse+0x53a>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
    8872:	29 81       	ldd	r18, Y+1	; 0x01
    8874:	3a 81       	ldd	r19, Y+2	; 0x02
    8876:	23 2b       	or	r18, r19
    8878:	49 f4       	brne	.+18     	; 0x888c <jsmn_parse+0x5a8>
		parser->pos--;
    887a:	31 97       	sbiw	r30, 0x01	; 1
    887c:	ab 81       	ldd	r26, Y+3	; 0x03
    887e:	bc 81       	ldd	r27, Y+4	; 0x04
    8880:	ed 93       	st	X+, r30
    8882:	fc 93       	st	X, r31
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    8884:	bf ef       	ldi	r27, 0xFF	; 255
    8886:	cb 1a       	sub	r12, r27
    8888:	db 0a       	sbc	r13, r27
    888a:	59 c0       	rjmp	.+178    	; 0x893e <jsmn_parse+0x65a>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    888c:	eb 81       	ldd	r30, Y+3	; 0x03
    888e:	fc 81       	ldd	r31, Y+4	; 0x04
    8890:	22 81       	ldd	r18, Z+2	; 0x02
    8892:	33 81       	ldd	r19, Z+3	; 0x03
    8894:	28 15       	cp	r18, r8
    8896:	39 05       	cpc	r19, r9
    8898:	e8 f4       	brcc	.+58     	; 0x88d4 <jsmn_parse+0x5f0>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    889a:	f9 01       	movw	r30, r18
    889c:	31 96       	adiw	r30, 0x01	; 1
    889e:	ab 81       	ldd	r26, Y+3	; 0x03
    88a0:	bc 81       	ldd	r27, Y+4	; 0x04
    88a2:	12 96       	adiw	r26, 0x02	; 2
    88a4:	ed 93       	st	X+, r30
    88a6:	fc 93       	st	X, r31
    88a8:	13 97       	sbiw	r26, 0x03	; 3
    88aa:	f9 01       	movw	r30, r18
    88ac:	ee 0f       	add	r30, r30
    88ae:	ff 1f       	adc	r31, r31
    88b0:	ee 0f       	add	r30, r30
    88b2:	ff 1f       	adc	r31, r31
    88b4:	ee 0f       	add	r30, r30
    88b6:	ff 1f       	adc	r31, r31
    88b8:	e2 1b       	sub	r30, r18
    88ba:	f3 0b       	sbc	r31, r19
    88bc:	29 81       	ldd	r18, Y+1	; 0x01
    88be:	3a 81       	ldd	r19, Y+2	; 0x02
    88c0:	e2 0f       	add	r30, r18
    88c2:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    88c4:	a3 82       	std	Z+3, r10	; 0x03
    88c6:	b4 82       	std	Z+4, r11	; 0x04
    88c8:	a1 82       	std	Z+1, r10	; 0x01
    88ca:	b2 82       	std	Z+2, r11	; 0x02
	tok->size = 0;
    88cc:	15 82       	std	Z+5, r1	; 0x05
    88ce:	16 82       	std	Z+6, r1	; 0x06
	if (tokens == NULL) {
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
    88d0:	30 97       	sbiw	r30, 0x00	; 0
    88d2:	31 f4       	brne	.+12     	; 0x88e0 <jsmn_parse+0x5fc>
		parser->pos = start;
    88d4:	ab 81       	ldd	r26, Y+3	; 0x03
    88d6:	bc 81       	ldd	r27, Y+4	; 0x04
    88d8:	8d 93       	st	X+, r24
    88da:	9c 93       	st	X, r25
		return JSMN_ERROR_NOMEM;
    88dc:	8f ef       	ldi	r24, 0xFF	; 255
    88de:	81 c0       	rjmp	.+258    	; 0x89e2 <jsmn_parse+0x6fe>
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
    88e0:	ab 81       	ldd	r26, Y+3	; 0x03
    88e2:	bc 81       	ldd	r27, Y+4	; 0x04
    88e4:	2d 91       	ld	r18, X+
    88e6:	3c 91       	ld	r19, X
    88e8:	11 97       	sbiw	r26, 0x01	; 1
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    88ea:	10 82       	st	Z, r1
	token->start = start;
    88ec:	81 83       	std	Z+1, r24	; 0x01
    88ee:	92 83       	std	Z+2, r25	; 0x02
	token->end = end;
    88f0:	23 83       	std	Z+3, r18	; 0x03
    88f2:	34 83       	std	Z+4, r19	; 0x04
	token->size = 0;
    88f4:	15 82       	std	Z+5, r1	; 0x05
    88f6:	16 82       	std	Z+6, r1	; 0x06
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
    88f8:	8d 91       	ld	r24, X+
    88fa:	9c 91       	ld	r25, X
    88fc:	11 97       	sbiw	r26, 0x01	; 1
    88fe:	01 97       	sbiw	r24, 0x01	; 1
    8900:	8d 93       	st	X+, r24
    8902:	9c 93       	st	X, r25
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    8904:	bf ef       	ldi	r27, 0xFF	; 255
    8906:	cb 1a       	sub	r12, r27
    8908:	db 0a       	sbc	r13, r27
				if (parser->toksuper != -1 && tokens != NULL)
    890a:	eb 81       	ldd	r30, Y+3	; 0x03
    890c:	fc 81       	ldd	r31, Y+4	; 0x04
    890e:	84 81       	ldd	r24, Z+4	; 0x04
    8910:	95 81       	ldd	r25, Z+5	; 0x05
    8912:	8f 3f       	cpi	r24, 0xFF	; 255
    8914:	ff ef       	ldi	r31, 0xFF	; 255
    8916:	9f 07       	cpc	r25, r31
    8918:	91 f0       	breq	.+36     	; 0x893e <jsmn_parse+0x65a>
					tokens[parser->toksuper].size++;
    891a:	fc 01       	movw	r30, r24
    891c:	ee 0f       	add	r30, r30
    891e:	ff 1f       	adc	r31, r31
    8920:	ee 0f       	add	r30, r30
    8922:	ff 1f       	adc	r31, r31
    8924:	ee 0f       	add	r30, r30
    8926:	ff 1f       	adc	r31, r31
    8928:	e8 1b       	sub	r30, r24
    892a:	f9 0b       	sbc	r31, r25
    892c:	29 81       	ldd	r18, Y+1	; 0x01
    892e:	3a 81       	ldd	r19, Y+2	; 0x02
    8930:	e2 0f       	add	r30, r18
    8932:	f3 1f       	adc	r31, r19
    8934:	85 81       	ldd	r24, Z+5	; 0x05
    8936:	96 81       	ldd	r25, Z+6	; 0x06
    8938:	01 96       	adiw	r24, 0x01	; 1
    893a:	85 83       	std	Z+5, r24	; 0x05
    893c:	96 83       	std	Z+6, r25	; 0x06
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    893e:	ab 81       	ldd	r26, Y+3	; 0x03
    8940:	bc 81       	ldd	r27, Y+4	; 0x04
    8942:	8d 91       	ld	r24, X+
    8944:	9c 91       	ld	r25, X
    8946:	11 97       	sbiw	r26, 0x01	; 1
    8948:	01 96       	adiw	r24, 0x01	; 1
    894a:	8d 93       	st	X+, r24
    894c:	9c 93       	st	X, r25
    894e:	84 17       	cp	r24, r20
    8950:	95 07       	cpc	r25, r21
    8952:	60 f4       	brcc	.+24     	; 0x896c <jsmn_parse+0x688>
    8954:	fb 01       	movw	r30, r22
    8956:	e8 0f       	add	r30, r24
    8958:	f9 1f       	adc	r31, r25
    895a:	10 81       	ld	r17, Z
    895c:	11 11       	cpse	r17, r1
    895e:	f3 cc       	rjmp	.-1562   	; 0x8346 <jsmn_parse+0x62>
    8960:	05 c0       	rjmp	.+10     	; 0x896c <jsmn_parse+0x688>
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;
    8962:	c1 2c       	mov	r12, r1
    8964:	d1 2c       	mov	r13, r1
    8966:	02 c0       	rjmp	.+4      	; 0x896c <jsmn_parse+0x688>
    8968:	c1 2c       	mov	r12, r1
    896a:	d1 2c       	mov	r13, r1
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    896c:	eb 81       	ldd	r30, Y+3	; 0x03
    896e:	fc 81       	ldd	r31, Y+4	; 0x04
    8970:	42 81       	ldd	r20, Z+2	; 0x02
    8972:	53 81       	ldd	r21, Z+3	; 0x03
    8974:	ca 01       	movw	r24, r20
    8976:	01 97       	sbiw	r24, 0x01	; 1
    8978:	99 23       	and	r25, r25
    897a:	ec f0       	brlt	.+58     	; 0x89b6 <jsmn_parse+0x6d2>
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
    897c:	fa 01       	movw	r30, r20
    897e:	ee 0f       	add	r30, r30
    8980:	ff 1f       	adc	r31, r31
    8982:	ee 0f       	add	r30, r30
    8984:	ff 1f       	adc	r31, r31
    8986:	ee 0f       	add	r30, r30
    8988:	ff 1f       	adc	r31, r31
    898a:	e4 1b       	sub	r30, r20
    898c:	f5 0b       	sbc	r31, r21
    898e:	29 81       	ldd	r18, Y+1	; 0x01
    8990:	3a 81       	ldd	r19, Y+2	; 0x02
    8992:	2e 0f       	add	r18, r30
    8994:	3f 1f       	adc	r19, r31
    8996:	f9 01       	movw	r30, r18
    8998:	36 97       	sbiw	r30, 0x06	; 6
    899a:	20 81       	ld	r18, Z
    899c:	31 81       	ldd	r19, Z+1	; 0x01
    899e:	2f 3f       	cpi	r18, 0xFF	; 255
    89a0:	3f 4f       	sbci	r19, 0xFF	; 255
    89a2:	29 f0       	breq	.+10     	; 0x89ae <jsmn_parse+0x6ca>
    89a4:	22 81       	ldd	r18, Z+2	; 0x02
    89a6:	33 81       	ldd	r19, Z+3	; 0x03
    89a8:	2f 3f       	cpi	r18, 0xFF	; 255
    89aa:	3f 4f       	sbci	r19, 0xFF	; 255
    89ac:	71 f0       	breq	.+28     	; 0x89ca <jsmn_parse+0x6e6>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    89ae:	01 97       	sbiw	r24, 0x01	; 1
    89b0:	37 97       	sbiw	r30, 0x07	; 7
    89b2:	99 23       	and	r25, r25
    89b4:	94 f7       	brge	.-28     	; 0x899a <jsmn_parse+0x6b6>
		if (tokens[i].start != -1 && tokens[i].end == -1) {
			return JSMN_ERROR_PART;
		}
	}

	return count;
    89b6:	8c 2d       	mov	r24, r12
    89b8:	14 c0       	rjmp	.+40     	; 0x89e2 <jsmn_parse+0x6fe>
				if (tokens == NULL) {
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
					return JSMN_ERROR_NOMEM;
    89ba:	8f ef       	ldi	r24, 0xFF	; 255
    89bc:	12 c0       	rjmp	.+36     	; 0x89e2 <jsmn_parse+0x6fe>
    89be:	8f ef       	ldi	r24, 0xFF	; 255
    89c0:	10 c0       	rjmp	.+32     	; 0x89e2 <jsmn_parse+0x6fe>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
    89c2:	8e ef       	ldi	r24, 0xFE	; 254
    89c4:	0e c0       	rjmp	.+28     	; 0x89e2 <jsmn_parse+0x6fe>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
    89c6:	8e ef       	ldi	r24, 0xFE	; 254
    89c8:	0c c0       	rjmp	.+24     	; 0x89e2 <jsmn_parse+0x6fe>
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
			return JSMN_ERROR_PART;
    89ca:	8d ef       	ldi	r24, 0xFD	; 253
    89cc:	0a c0       	rjmp	.+20     	; 0x89e2 <jsmn_parse+0x6fe>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
    89ce:	8e ef       	ldi	r24, 0xFE	; 254
    89d0:	08 c0       	rjmp	.+16     	; 0x89e2 <jsmn_parse+0x6fe>
    89d2:	31 96       	adiw	r30, 0x01	; 1
    89d4:	09 f0       	breq	.+2      	; 0x89d8 <jsmn_parse+0x6f4>
    89d6:	b3 cf       	rjmp	.-154    	; 0x893e <jsmn_parse+0x65a>
    89d8:	fa cf       	rjmp	.-12     	; 0x89ce <jsmn_parse+0x6ea>
#endif
				break;
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    89da:	ef ef       	ldi	r30, 0xFF	; 255
    89dc:	ce 1a       	sub	r12, r30
    89de:	de 0a       	sbc	r13, r30
    89e0:	ae cf       	rjmp	.-164    	; 0x893e <jsmn_parse+0x65a>
			return JSMN_ERROR_PART;
		}
	}

	return count;
}
    89e2:	24 96       	adiw	r28, 0x04	; 4
    89e4:	cd bf       	out	0x3d, r28	; 61
    89e6:	de bf       	out	0x3e, r29	; 62
    89e8:	df 91       	pop	r29
    89ea:	cf 91       	pop	r28
    89ec:	1f 91       	pop	r17
    89ee:	0f 91       	pop	r16
    89f0:	ff 90       	pop	r15
    89f2:	ef 90       	pop	r14
    89f4:	df 90       	pop	r13
    89f6:	cf 90       	pop	r12
    89f8:	bf 90       	pop	r11
    89fa:	af 90       	pop	r10
    89fc:	9f 90       	pop	r9
    89fe:	8f 90       	pop	r8
    8a00:	7f 90       	pop	r7
    8a02:	6f 90       	pop	r6
    8a04:	5f 90       	pop	r5
    8a06:	4f 90       	pop	r4
    8a08:	3f 90       	pop	r3
    8a0a:	08 95       	ret

00008a0c <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
    8a0c:	fc 01       	movw	r30, r24
	parser->pos = 0;
    8a0e:	10 82       	st	Z, r1
    8a10:	11 82       	std	Z+1, r1	; 0x01
	parser->toknext = 0;
    8a12:	12 82       	std	Z+2, r1	; 0x02
    8a14:	13 82       	std	Z+3, r1	; 0x03
	parser->toksuper = -1;
    8a16:	8f ef       	ldi	r24, 0xFF	; 255
    8a18:	9f ef       	ldi	r25, 0xFF	; 255
    8a1a:	84 83       	std	Z+4, r24	; 0x04
    8a1c:	95 83       	std	Z+5, r25	; 0x05
    8a1e:	08 95       	ret

00008a20 <json_get_token>:
 *  Author: Administrator
 */ 

#include "json_functions.h"

void json_get_token(jsmntok_t *tokens, char *js, char *buffer, uint8_t buffer_size, uint8_t i) {
    8a20:	af 92       	push	r10
    8a22:	bf 92       	push	r11
    8a24:	cf 92       	push	r12
    8a26:	df 92       	push	r13
    8a28:	ef 92       	push	r14
    8a2a:	ff 92       	push	r15
    8a2c:	0f 93       	push	r16
    8a2e:	1f 93       	push	r17
    8a30:	cf 93       	push	r28
    8a32:	df 93       	push	r29
    8a34:	cd b7       	in	r28, 0x3d	; 61
    8a36:	de b7       	in	r29, 0x3e	; 62
    8a38:	6a 01       	movw	r12, r20
		memcpy( keyString, &js[ key.start ], len );
		keyString[ len ] = '\0';
		
		strcpy(buffer,keyString);
	}
}
    8a3a:	ed b6       	in	r14, 0x3d	; 61
    8a3c:	fe b6       	in	r15, 0x3e	; 62

void json_get_token(jsmntok_t *tokens, char *js, char *buffer, uint8_t buffer_size, uint8_t i) {
	int len;
	jsmntok_t key;

	key = tokens[i];
    8a3e:	fc 01       	movw	r30, r24
    8a40:	37 e0       	ldi	r19, 0x07	; 7
    8a42:	03 9f       	mul	r16, r19
    8a44:	e0 0d       	add	r30, r0
    8a46:	f1 1d       	adc	r31, r1
    8a48:	11 24       	eor	r1, r1
    8a4a:	a1 81       	ldd	r26, Z+1	; 0x01
    8a4c:	b2 81       	ldd	r27, Z+2	; 0x02
	len = key.end - key.start;
    8a4e:	03 81       	ldd	r16, Z+3	; 0x03
    8a50:	14 81       	ldd	r17, Z+4	; 0x04
    8a52:	0a 1b       	sub	r16, r26
    8a54:	1b 0b       	sbc	r17, r27
	char keyString[ len+1 ];
    8a56:	c8 01       	movw	r24, r16
    8a58:	01 96       	adiw	r24, 0x01	; 1
    8a5a:	4d b7       	in	r20, 0x3d	; 61
    8a5c:	5e b7       	in	r21, 0x3e	; 62
    8a5e:	48 1b       	sub	r20, r24
    8a60:	59 0b       	sbc	r21, r25
    8a62:	4d bf       	out	0x3d, r20	; 61
    8a64:	5e bf       	out	0x3e, r21	; 62
    8a66:	8d b7       	in	r24, 0x3d	; 61
    8a68:	9e b7       	in	r25, 0x3e	; 62
    8a6a:	01 96       	adiw	r24, 0x01	; 1
    8a6c:	5c 01       	movw	r10, r24
	if (len < buffer_size) {
    8a6e:	30 e0       	ldi	r19, 0x00	; 0
    8a70:	02 17       	cp	r16, r18
    8a72:	13 07       	cpc	r17, r19
    8a74:	6c f4       	brge	.+26     	; 0x8a90 <json_get_token+0x70>
		memcpy( keyString, &js[ key.start ], len );
    8a76:	6a 0f       	add	r22, r26
    8a78:	7b 1f       	adc	r23, r27
    8a7a:	a8 01       	movw	r20, r16
    8a7c:	0e 94 bd 57 	call	0xaf7a	; 0xaf7a <memcpy>
		keyString[ len ] = '\0';
    8a80:	f5 01       	movw	r30, r10
    8a82:	e0 0f       	add	r30, r16
    8a84:	f1 1f       	adc	r31, r17
    8a86:	10 82       	st	Z, r1
		
		strcpy(buffer,keyString);
    8a88:	b5 01       	movw	r22, r10
    8a8a:	c6 01       	movw	r24, r12
    8a8c:	0e 94 e3 57 	call	0xafc6	; 0xafc6 <strcpy>
	}
}
    8a90:	ed be       	out	0x3d, r14	; 61
    8a92:	fe be       	out	0x3e, r15	; 62
    8a94:	df 91       	pop	r29
    8a96:	cf 91       	pop	r28
    8a98:	1f 91       	pop	r17
    8a9a:	0f 91       	pop	r16
    8a9c:	ff 90       	pop	r15
    8a9e:	ef 90       	pop	r14
    8aa0:	df 90       	pop	r13
    8aa2:	cf 90       	pop	r12
    8aa4:	bf 90       	pop	r11
    8aa6:	af 90       	pop	r10
    8aa8:	08 95       	ret

00008aaa <play_sound>:
static volatile bool GET_request = false;

#define TOKEN_BUFFER_SIZE 30

void play_sound(void)
{
    8aaa:	cf 93       	push	r28
    8aac:	df 93       	push	r29
    8aae:	cd b7       	in	r28, 0x3d	; 61
    8ab0:	de b7       	in	r29, 0x3e	; 62
    8ab2:	c4 55       	subi	r28, 0x54	; 84
    8ab4:	d4 40       	sbci	r29, 0x04	; 4
    8ab6:	cd bf       	out	0x3d, r28	; 61
    8ab8:	de bf       	out	0x3e, r29	; 62
	FATFS FatFs;		// FatFs work area needed for each volume
	FIL Fil;			// File object needed for each open file
	BYTE Buff[512];		// Working buffer 1024
	UINT bw;
	
	if (f_open(&Fil, "newfilea2.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {	// Create a file
    8aba:	4a e0       	ldi	r20, 0x0A	; 10
    8abc:	6b e4       	ldi	r22, 0x4B	; 75
    8abe:	76 e2       	ldi	r23, 0x26	; 38
    8ac0:	ce 01       	movw	r24, r28
    8ac2:	8d 5c       	subi	r24, 0xCD	; 205
    8ac4:	9d 4f       	sbci	r25, 0xFD	; 253
    8ac6:	0e 94 47 33 	call	0x668e	; 0x668e <f_open>
    8aca:	81 11       	cpse	r24, r1
    8acc:	11 c0       	rjmp	.+34     	; 0x8af0 <play_sound+0x46>
		
		f_write(&Fil, "It works!\r\n", 11, &bw);	// Write data to the file
    8ace:	9e 01       	movw	r18, r28
    8ad0:	2d 5a       	subi	r18, 0xAD	; 173
    8ad2:	3b 4f       	sbci	r19, 0xFB	; 251
    8ad4:	4b e0       	ldi	r20, 0x0B	; 11
    8ad6:	50 e0       	ldi	r21, 0x00	; 0
    8ad8:	69 e5       	ldi	r22, 0x59	; 89
    8ada:	76 e2       	ldi	r23, 0x26	; 38
    8adc:	ce 01       	movw	r24, r28
    8ade:	8d 5c       	subi	r24, 0xCD	; 205
    8ae0:	9d 4f       	sbci	r25, 0xFD	; 253
    8ae2:	0e 94 98 35 	call	0x6b30	; 0x6b30 <f_write>
		
		f_close(&Fil);								// Close the file
    8ae6:	ce 01       	movw	r24, r28
    8ae8:	8d 5c       	subi	r24, 0xCD	; 205
    8aea:	9d 4f       	sbci	r25, 0xFD	; 253
    8aec:	0e 94 73 37 	call	0x6ee6	; 0x6ee6 <f_close>
	}
	
	
	f_mount(&FatFs, "", 0);
    8af0:	40 e0       	ldi	r20, 0x00	; 0
    8af2:	68 e8       	ldi	r22, 0x88	; 136
    8af4:	73 e2       	ldi	r23, 0x23	; 35
    8af6:	ce 01       	movw	r24, r28
    8af8:	01 96       	adiw	r24, 0x01	; 1
    8afa:	0e 94 f7 32 	call	0x65ee	; 0x65ee <f_mount>
	
	BYTE res;
	res = f_open(&Fil, "rath3.wav", FA_READ);
    8afe:	41 e0       	ldi	r20, 0x01	; 1
    8b00:	65 e6       	ldi	r22, 0x65	; 101
    8b02:	76 e2       	ldi	r23, 0x26	; 38
    8b04:	ce 01       	movw	r24, r28
    8b06:	8d 5c       	subi	r24, 0xCD	; 205
    8b08:	9d 4f       	sbci	r25, 0xFD	; 253
    8b0a:	0e 94 47 33 	call	0x668e	; 0x668e <f_open>
	if (!res) {
    8b0e:	81 11       	cpse	r24, r1
    8b10:	10 c0       	rjmp	.+32     	; 0x8b32 <play_sound+0x88>
		load_wav(&Fil, "**** WAV PLAYER ****", Buff, sizeof Buff);
    8b12:	20 e0       	ldi	r18, 0x00	; 0
    8b14:	32 e0       	ldi	r19, 0x02	; 2
    8b16:	ae 01       	movw	r20, r28
    8b18:	4d 5a       	subi	r20, 0xAD	; 173
    8b1a:	5d 4f       	sbci	r21, 0xFD	; 253
    8b1c:	6f e6       	ldi	r22, 0x6F	; 111
    8b1e:	76 e2       	ldi	r23, 0x26	; 38
    8b20:	ce 01       	movw	r24, r28
    8b22:	8d 5c       	subi	r24, 0xCD	; 205
    8b24:	9d 4f       	sbci	r25, 0xFD	; 253
    8b26:	ec d8       	rcall	.-3624   	; 0x7d00 <load_wav>
		f_close(&Fil);
    8b28:	ce 01       	movw	r24, r28
    8b2a:	8d 5c       	subi	r24, 0xCD	; 205
    8b2c:	9d 4f       	sbci	r25, 0xFD	; 253
    8b2e:	0e 94 73 37 	call	0x6ee6	; 0x6ee6 <f_close>
	}
}
    8b32:	cc 5a       	subi	r28, 0xAC	; 172
    8b34:	db 4f       	sbci	r29, 0xFB	; 251
    8b36:	cd bf       	out	0x3d, r28	; 61
    8b38:	de bf       	out	0x3e, r29	; 62
    8b3a:	df 91       	pop	r29
    8b3c:	cf 91       	pop	r28
    8b3e:	08 95       	ret

00008b40 <start_loading>:

void start_loading(void) 
{
	display_clear_screen();
    8b40:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
	
	TCC0.CNT = 0;
    8b44:	e0 e0       	ldi	r30, 0x00	; 0
    8b46:	f8 e0       	ldi	r31, 0x08	; 8
    8b48:	10 a2       	std	Z+32, r1	; 0x20
    8b4a:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 3125;
    8b4c:	85 e3       	ldi	r24, 0x35	; 53
    8b4e:	9c e0       	ldi	r25, 0x0C	; 12
    8b50:	86 a3       	std	Z+38, r24	; 0x26
    8b52:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;
    8b54:	27 e0       	ldi	r18, 0x07	; 7
    8b56:	20 83       	st	Z, r18
	
	TCC0.CCA = 3125;
    8b58:	80 a7       	std	Z+40, r24	; 0x28
    8b5a:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.INTCTRLB |= TC_CCAINTLVL_LO_gc;
    8b5c:	87 81       	ldd	r24, Z+7	; 0x07
    8b5e:	81 60       	ori	r24, 0x01	; 1
    8b60:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLB |= TC0_CCAEN_bm;
    8b62:	81 81       	ldd	r24, Z+1	; 0x01
    8b64:	80 61       	ori	r24, 0x10	; 16
    8b66:	81 83       	std	Z+1, r24	; 0x01
    8b68:	08 95       	ret

00008b6a <stop_loading>:
}

void stop_loading(void) 
{
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
    8b6a:	10 92 00 08 	sts	0x0800, r1
	display_clear_screen();
    8b6e:	0c 94 20 21 	jmp	0x4240	; 0x4240 <display_clear_screen>
    8b72:	08 95       	ret

00008b74 <get_internet_variables>:
}

esp8266_status_t get_internet_variables(bool get_time, bool get_temperature) 
{	
    8b74:	cf 92       	push	r12
    8b76:	df 92       	push	r13
    8b78:	ef 92       	push	r14
    8b7a:	ff 92       	push	r15
    8b7c:	0f 93       	push	r16
    8b7e:	1f 93       	push	r17
    8b80:	cf 93       	push	r28
    8b82:	df 93       	push	r29
    8b84:	cd b7       	in	r28, 0x3d	; 61
    8b86:	de b7       	in	r29, 0x3e	; 62
    8b88:	c9 5d       	subi	r28, 0xD9	; 217
    8b8a:	d1 40       	sbci	r29, 0x01	; 1
    8b8c:	cd bf       	out	0x3d, r28	; 61
    8b8e:	de bf       	out	0x3e, r29	; 62
    8b90:	c8 2e       	mov	r12, r24
    8b92:	d6 2e       	mov	r13, r22
	jsmnerr_t r;
	jsmntok_t tokens[25];
	
	esp8266_status_t status;
	
	esp8266_on();
    8b94:	0e 94 a0 09 	call	0x1340	; 0x1340 <esp8266_on>
	
	status = esp8266_setup();
    8b98:	0e 94 cd 09 	call	0x139a	; 0x139a <esp8266_setup>
    8b9c:	18 2f       	mov	r17, r24
	if (status != ESP8266_SUCCESS) {
    8b9e:	81 30       	cpi	r24, 0x01	; 1
    8ba0:	41 f0       	breq	.+16     	; 0x8bb2 <get_internet_variables+0x3e>
		stop_loading();
    8ba2:	e3 df       	rcall	.-58     	; 0x8b6a <stop_loading>
#ifdef SHOW_MANUAL
		display_print_scrolling_text("SETUP ERROR",false);
    8ba4:	60 e0       	ldi	r22, 0x00	; 0
    8ba6:	84 e8       	ldi	r24, 0x84	; 132
    8ba8:	96 e2       	ldi	r25, 0x26	; 38
    8baa:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
		return status;
    8bae:	81 2f       	mov	r24, r17
    8bb0:	4a c1       	rjmp	.+660    	; 0x8e46 <get_internet_variables+0x2d2>
	}
	
	status = esp8266_join_ap(env_var.wifi_ssid,env_var.wifi_pswd);
    8bb2:	66 ed       	ldi	r22, 0xD6	; 214
    8bb4:	7a e2       	ldi	r23, 0x2A	; 42
    8bb6:	8f ee       	ldi	r24, 0xEF	; 239
    8bb8:	9a e2       	ldi	r25, 0x2A	; 42
    8bba:	0e 94 1d 0a 	call	0x143a	; 0x143a <esp8266_join_ap>
    8bbe:	18 2f       	mov	r17, r24
	if (status != ESP8266_SUCCESS) {
    8bc0:	81 30       	cpi	r24, 0x01	; 1
    8bc2:	41 f0       	breq	.+16     	; 0x8bd4 <get_internet_variables+0x60>
		stop_loading();
    8bc4:	d2 df       	rcall	.-92     	; 0x8b6a <stop_loading>
#ifdef SHOW_MANUAL
		display_print_scrolling_text("COULD NOT JOIN AP",false);
    8bc6:	60 e0       	ldi	r22, 0x00	; 0
    8bc8:	83 eb       	ldi	r24, 0xB3	; 179
    8bca:	93 e2       	ldi	r25, 0x23	; 35
    8bcc:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
		return status;
    8bd0:	81 2f       	mov	r24, r17
    8bd2:	39 c1       	rjmp	.+626    	; 0x8e46 <get_internet_variables+0x2d2>
	}
	status = esp8266_get_json(WEATHER_IP,WEATHER_ADDR,json, sizeof(json));
    8bd4:	2a ef       	ldi	r18, 0xFA	; 250
    8bd6:	ae 01       	movw	r20, r28
    8bd8:	4f 5f       	subi	r20, 0xFF	; 255
    8bda:	5f 4f       	sbci	r21, 0xFF	; 255
    8bdc:	60 e9       	ldi	r22, 0x90	; 144
    8bde:	76 e2       	ldi	r23, 0x26	; 38
    8be0:	80 ee       	ldi	r24, 0xE0	; 224
    8be2:	96 e2       	ldi	r25, 0x26	; 38
    8be4:	0e 94 88 0a 	call	0x1510	; 0x1510 <esp8266_get_json>
    8be8:	18 2f       	mov	r17, r24
	if (status != ESP8266_SUCCESS) {
    8bea:	81 30       	cpi	r24, 0x01	; 1
    8bec:	41 f0       	breq	.+16     	; 0x8bfe <get_internet_variables+0x8a>
		stop_loading();
    8bee:	bd df       	rcall	.-134    	; 0x8b6a <stop_loading>
#ifdef SHOW_MANUAL
		display_print_scrolling_text("COULD NOT CONTACT SERVER",false);
    8bf0:	60 e0       	ldi	r22, 0x00	; 0
    8bf2:	83 ef       	ldi	r24, 0xF3	; 243
    8bf4:	96 e2       	ldi	r25, 0x26	; 38
    8bf6:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
		return status;
    8bfa:	81 2f       	mov	r24, r17
    8bfc:	24 c1       	rjmp	.+584    	; 0x8e46 <get_internet_variables+0x2d2>
	}
	
	esp8266_off();
    8bfe:	0e 94 af 09 	call	0x135e	; 0x135e <esp8266_off>
#ifdef DEBUG_ON
	puts(json);
    8c02:	9e 01       	movw	r18, r28
    8c04:	2f 5f       	subi	r18, 0xFF	; 255
    8c06:	3f 4f       	sbci	r19, 0xFF	; 255
    8c08:	79 01       	movw	r14, r18
    8c0a:	c9 01       	movw	r24, r18
    8c0c:	0e 94 47 58 	call	0xb08e	; 0xb08e <puts>
#endif

	//Parse JSON
	jsmn_init(&p);
    8c10:	ce 01       	movw	r24, r28
    8c12:	85 50       	subi	r24, 0x05	; 5
    8c14:	9f 4f       	sbci	r25, 0xFF	; 255
    8c16:	fa de       	rcall	.-524    	; 0x8a0c <jsmn_init>
	r = jsmn_parse(&p,json,strlen(json),tokens,sizeof(tokens));
    8c18:	f7 01       	movw	r30, r14
    8c1a:	01 90       	ld	r0, Z+
    8c1c:	00 20       	and	r0, r0
    8c1e:	e9 f7       	brne	.-6      	; 0x8c1a <get_internet_variables+0xa6>
    8c20:	31 97       	sbiw	r30, 0x01	; 1
    8c22:	af 01       	movw	r20, r30
    8c24:	4e 19       	sub	r20, r14
    8c26:	5f 09       	sbc	r21, r15
    8c28:	0f ea       	ldi	r16, 0xAF	; 175
    8c2a:	10 e0       	ldi	r17, 0x00	; 0
    8c2c:	9e 01       	movw	r18, r28
    8c2e:	2f 5f       	subi	r18, 0xFF	; 255
    8c30:	3e 4f       	sbci	r19, 0xFE	; 254
    8c32:	b7 01       	movw	r22, r14
    8c34:	ce 01       	movw	r24, r28
    8c36:	85 50       	subi	r24, 0x05	; 5
    8c38:	9f 4f       	sbci	r25, 0xFF	; 255
    8c3a:	54 db       	rcall	.-2392   	; 0x82e4 <jsmn_parse>
	if (r < 0) {
    8c3c:	88 23       	and	r24, r24
    8c3e:	44 f4       	brge	.+16     	; 0x8c50 <get_internet_variables+0xdc>
		stop_loading();
    8c40:	94 df       	rcall	.-216    	; 0x8b6a <stop_loading>
#ifdef SHOW_MANUAL
		display_print_scrolling_text("ERROR IN PARSING JSON",false);
    8c42:	60 e0       	ldi	r22, 0x00	; 0
    8c44:	8c e0       	ldi	r24, 0x0C	; 12
    8c46:	97 e2       	ldi	r25, 0x27	; 39
    8c48:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
		return ESP8266_ERROR;
    8c4c:	80 e0       	ldi	r24, 0x00	; 0
    8c4e:	fb c0       	rjmp	.+502    	; 0x8e46 <get_internet_variables+0x2d2>
#endif
	}

	char token_buffer[TOKEN_BUFFER_SIZE];
	if (get_time)
    8c50:	cc 20       	and	r12, r12
    8c52:	09 f4       	brne	.+2      	; 0x8c56 <get_internet_variables+0xe2>
    8c54:	b1 c0       	rjmp	.+354    	; 0x8db8 <get_internet_variables+0x244>
	{
		int year, month, day, hour, minute, second;
	
		json_get_token(tokens,json,token_buffer,TOKEN_BUFFER_SIZE,6);
    8c56:	7e 01       	movw	r14, r28
    8c58:	30 e5       	ldi	r19, 0x50	; 80
    8c5a:	e3 1a       	sub	r14, r19
    8c5c:	3e ef       	ldi	r19, 0xFE	; 254
    8c5e:	f3 0a       	sbc	r15, r19
    8c60:	06 e0       	ldi	r16, 0x06	; 6
    8c62:	2e e1       	ldi	r18, 0x1E	; 30
    8c64:	a7 01       	movw	r20, r14
    8c66:	be 01       	movw	r22, r28
    8c68:	6f 5f       	subi	r22, 0xFF	; 255
    8c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    8c6c:	ce 01       	movw	r24, r28
    8c6e:	8f 5f       	subi	r24, 0xFF	; 255
    8c70:	9e 4f       	sbci	r25, 0xFE	; 254
    8c72:	d6 de       	rcall	.-596    	; 0x8a20 <json_get_token>
		if (sscanf(token_buffer,"%d-%d-%dT%d:%d:%dZ",&year, &month, &day, &hour, &minute, &second) != 6) {
    8c74:	ce 01       	movw	r24, r28
    8c76:	82 53       	subi	r24, 0x32	; 50
    8c78:	9e 4f       	sbci	r25, 0xFE	; 254
    8c7a:	9f 93       	push	r25
    8c7c:	8f 93       	push	r24
    8c7e:	02 96       	adiw	r24, 0x02	; 2
    8c80:	9f 93       	push	r25
    8c82:	8f 93       	push	r24
    8c84:	02 96       	adiw	r24, 0x02	; 2
    8c86:	9f 93       	push	r25
    8c88:	8f 93       	push	r24
    8c8a:	02 96       	adiw	r24, 0x02	; 2
    8c8c:	9f 93       	push	r25
    8c8e:	8f 93       	push	r24
    8c90:	02 96       	adiw	r24, 0x02	; 2
    8c92:	9f 93       	push	r25
    8c94:	8f 93       	push	r24
    8c96:	02 96       	adiw	r24, 0x02	; 2
    8c98:	9f 93       	push	r25
    8c9a:	8f 93       	push	r24
    8c9c:	82 e2       	ldi	r24, 0x22	; 34
    8c9e:	97 e2       	ldi	r25, 0x27	; 39
    8ca0:	9f 93       	push	r25
    8ca2:	8f 93       	push	r24
    8ca4:	ff 92       	push	r15
    8ca6:	ef 92       	push	r14
    8ca8:	0e 94 74 58 	call	0xb0e8	; 0xb0e8 <sscanf>
    8cac:	cd bf       	out	0x3d, r28	; 61
    8cae:	de bf       	out	0x3e, r29	; 62
    8cb0:	06 97       	sbiw	r24, 0x06	; 6
    8cb2:	41 f0       	breq	.+16     	; 0x8cc4 <get_internet_variables+0x150>
			stop_loading();
    8cb4:	5a df       	rcall	.-332    	; 0x8b6a <stop_loading>
#ifdef SHOW_MANUAL
			display_print_scrolling_text("COULD NOT GET TIME",false);
    8cb6:	60 e0       	ldi	r22, 0x00	; 0
    8cb8:	85 e3       	ldi	r24, 0x35	; 53
    8cba:	97 e2       	ldi	r25, 0x27	; 39
    8cbc:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
			return ESP8266_ERROR;
    8cc0:	80 e0       	ldi	r24, 0x00	; 0
    8cc2:	c1 c0       	rjmp	.+386    	; 0x8e46 <get_internet_variables+0x2d2>
		} else {
			env_var.time.year = year;
    8cc4:	c8 52       	subi	r28, 0x28	; 40
    8cc6:	de 4f       	sbci	r29, 0xFE	; 254
    8cc8:	48 81       	ld	r20, Y
    8cca:	59 81       	ldd	r21, Y+1	; 0x01
    8ccc:	c8 5d       	subi	r28, 0xD8	; 216
    8cce:	d1 40       	sbci	r29, 0x01	; 1
    8cd0:	40 93 8b 2a 	sts	0x2A8B, r20
    8cd4:	50 93 8c 2a 	sts	0x2A8C, r21
			env_var.time.month = month;
    8cd8:	ca 52       	subi	r28, 0x2A	; 42
    8cda:	de 4f       	sbci	r29, 0xFE	; 254
    8cdc:	68 81       	ld	r22, Y
    8cde:	c6 5d       	subi	r28, 0xD6	; 214
    8ce0:	d1 40       	sbci	r29, 0x01	; 1
    8ce2:	60 93 8a 2a 	sts	0x2A8A, r22
			env_var.time.day = day;
    8ce6:	cc 52       	subi	r28, 0x2C	; 44
    8ce8:	de 4f       	sbci	r29, 0xFE	; 254
    8cea:	88 81       	ld	r24, Y
    8cec:	c4 5d       	subi	r28, 0xD4	; 212
    8cee:	d1 40       	sbci	r29, 0x01	; 1
    8cf0:	80 93 87 2a 	sts	0x2A87, r24
			env_var.time.hours = hour + env_var.time.timezone + env_var.time.DST;
    8cf4:	06 e8       	ldi	r16, 0x86	; 134
    8cf6:	1a e2       	ldi	r17, 0x2A	; 42
    8cf8:	20 91 8d 2a 	lds	r18, 0x2A8D
    8cfc:	ce 52       	subi	r28, 0x2E	; 46
    8cfe:	de 4f       	sbci	r29, 0xFE	; 254
    8d00:	98 81       	ld	r25, Y
    8d02:	c2 5d       	subi	r28, 0xD2	; 210
    8d04:	d1 40       	sbci	r29, 0x01	; 1
    8d06:	29 0f       	add	r18, r25
    8d08:	90 91 8e 2a 	lds	r25, 0x2A8E
    8d0c:	92 0f       	add	r25, r18
    8d0e:	f8 01       	movw	r30, r16
    8d10:	90 83       	st	Z, r25
			env_var.time.minutes = minute;
    8d12:	c0 53       	subi	r28, 0x30	; 48
    8d14:	de 4f       	sbci	r29, 0xFE	; 254
    8d16:	98 81       	ld	r25, Y
    8d18:	c0 5d       	subi	r28, 0xD0	; 208
    8d1a:	d1 40       	sbci	r29, 0x01	; 1
    8d1c:	90 93 85 2a 	sts	0x2A85, r25
			env_var.time.seconds = second;
    8d20:	c2 53       	subi	r28, 0x32	; 50
    8d22:	de 4f       	sbci	r29, 0xFE	; 254
    8d24:	98 81       	ld	r25, Y
    8d26:	ce 5c       	subi	r28, 0xCE	; 206
    8d28:	d1 40       	sbci	r29, 0x01	; 1
    8d2a:	90 93 84 2a 	sts	0x2A84, r25
			env_var.time.weekday = time_get_weekday(day,month,year);
    8d2e:	0e 94 c3 53 	call	0xa786	; 0xa786 <time_get_weekday>
    8d32:	80 93 88 2a 	sts	0x2A88, r24
			
			if (env_var.time.hours >= 24) {
    8d36:	f8 01       	movw	r30, r16
    8d38:	90 81       	ld	r25, Z
    8d3a:	98 31       	cpi	r25, 0x18	; 24
    8d3c:	88 f1       	brcs	.+98     	; 0x8da0 <get_internet_variables+0x22c>
				env_var.time.hours -= 24;
    8d3e:	98 51       	subi	r25, 0x18	; 24
    8d40:	90 93 86 2a 	sts	0x2A86, r25
				if (env_var.time.weekday++ >= Sunday) {
    8d44:	87 30       	cpi	r24, 0x07	; 7
    8d46:	20 f4       	brcc	.+8      	; 0x8d50 <get_internet_variables+0x1dc>
    8d48:	8f 5f       	subi	r24, 0xFF	; 255
    8d4a:	80 93 88 2a 	sts	0x2A88, r24
    8d4e:	03 c0       	rjmp	.+6      	; 0x8d56 <get_internet_variables+0x1e2>
					env_var.time.weekday = Monday;
    8d50:	81 e0       	ldi	r24, 0x01	; 1
    8d52:	80 93 88 2a 	sts	0x2A88, r24
				}
				if (env_var.time.day++ >= time_get_days_in_month(env_var.time.month,env_var.time.year)) {
    8d56:	e7 e8       	ldi	r30, 0x87	; 135
    8d58:	fa e2       	ldi	r31, 0x2A	; 42
    8d5a:	10 81       	ld	r17, Z
    8d5c:	81 e0       	ldi	r24, 0x01	; 1
    8d5e:	81 0f       	add	r24, r17
    8d60:	80 83       	st	Z, r24
    8d62:	60 91 8b 2a 	lds	r22, 0x2A8B
    8d66:	70 91 8c 2a 	lds	r23, 0x2A8C
    8d6a:	80 91 8a 2a 	lds	r24, 0x2A8A
    8d6e:	0e 94 ab 53 	call	0xa756	; 0xa756 <time_get_days_in_month>
    8d72:	18 17       	cp	r17, r24
    8d74:	a8 f0       	brcs	.+42     	; 0x8da0 <get_internet_variables+0x22c>
					env_var.time.day = 1;
    8d76:	81 e0       	ldi	r24, 0x01	; 1
    8d78:	80 93 87 2a 	sts	0x2A87, r24
					if (env_var.time.month++ >= December) {
    8d7c:	80 91 8a 2a 	lds	r24, 0x2A8A
    8d80:	8c 30       	cpi	r24, 0x0C	; 12
    8d82:	20 f4       	brcc	.+8      	; 0x8d8c <get_internet_variables+0x218>
    8d84:	8f 5f       	subi	r24, 0xFF	; 255
    8d86:	80 93 8a 2a 	sts	0x2A8A, r24
    8d8a:	0a c0       	rjmp	.+20     	; 0x8da0 <get_internet_variables+0x22c>
						env_var.time.month = January;
    8d8c:	81 e0       	ldi	r24, 0x01	; 1
    8d8e:	80 93 8a 2a 	sts	0x2A8A, r24
						env_var.time.year++;
    8d92:	eb e8       	ldi	r30, 0x8B	; 139
    8d94:	fa e2       	ldi	r31, 0x2A	; 42
    8d96:	80 81       	ld	r24, Z
    8d98:	91 81       	ldd	r25, Z+1	; 0x01
    8d9a:	01 96       	adiw	r24, 0x01	; 1
    8d9c:	80 83       	st	Z, r24
    8d9e:	91 83       	std	Z+1, r25	; 0x01
					}
				}
			}
			env_var.time.week = time_get_weeknumber(env_var.time.day,env_var.time.month,env_var.time.year);
    8da0:	40 91 8b 2a 	lds	r20, 0x2A8B
    8da4:	50 91 8c 2a 	lds	r21, 0x2A8C
    8da8:	60 91 8a 2a 	lds	r22, 0x2A8A
    8dac:	80 91 87 2a 	lds	r24, 0x2A87
    8db0:	0e 94 39 54 	call	0xa872	; 0xa872 <time_get_weeknumber>
    8db4:	80 93 89 2a 	sts	0x2A89, r24
		}
	}
	if (get_temperature)
    8db8:	dd 20       	and	r13, r13
    8dba:	09 f4       	brne	.+2      	; 0x8dbe <get_internet_variables+0x24a>
    8dbc:	43 c0       	rjmp	.+134    	; 0x8e44 <get_internet_variables+0x2d0>
	{
		json_get_token(tokens,json,token_buffer,TOKEN_BUFFER_SIZE,22);
    8dbe:	7e 01       	movw	r14, r28
    8dc0:	f0 e5       	ldi	r31, 0x50	; 80
    8dc2:	ef 1a       	sub	r14, r31
    8dc4:	fe ef       	ldi	r31, 0xFE	; 254
    8dc6:	ff 0a       	sbc	r15, r31
    8dc8:	06 e1       	ldi	r16, 0x16	; 22
    8dca:	2e e1       	ldi	r18, 0x1E	; 30
    8dcc:	a7 01       	movw	r20, r14
    8dce:	be 01       	movw	r22, r28
    8dd0:	6f 5f       	subi	r22, 0xFF	; 255
    8dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    8dd4:	ce 01       	movw	r24, r28
    8dd6:	8f 5f       	subi	r24, 0xFF	; 255
    8dd8:	9e 4f       	sbci	r25, 0xFE	; 254
    8dda:	22 de       	rcall	.-956    	; 0x8a20 <json_get_token>
#ifdef DEBUG_ON
		puts(token_buffer);
    8ddc:	c7 01       	movw	r24, r14
    8dde:	0e 94 47 58 	call	0xb08e	; 0xb08e <puts>
#endif
		if (strlen(token_buffer) <= 3) {
    8de2:	f7 01       	movw	r30, r14
    8de4:	01 90       	ld	r0, Z+
    8de6:	00 20       	and	r0, r0
    8de8:	e9 f7       	brne	.-6      	; 0x8de4 <get_internet_variables+0x270>
    8dea:	31 97       	sbiw	r30, 0x01	; 1
    8dec:	af 01       	movw	r20, r30
    8dee:	4e 19       	sub	r20, r14
    8df0:	5f 09       	sbc	r21, r15
    8df2:	44 30       	cpi	r20, 0x04	; 4
    8df4:	51 05       	cpc	r21, r1
    8df6:	08 f5       	brcc	.+66     	; 0x8e3a <get_internet_variables+0x2c6>
			strncpy(env_var.temperature,token_buffer,strlen(token_buffer));	
    8df8:	b7 01       	movw	r22, r14
    8dfa:	8f e8       	ldi	r24, 0x8F	; 143
    8dfc:	9a e2       	ldi	r25, 0x2A	; 42
    8dfe:	0e 94 ea 57 	call	0xafd4	; 0xafd4 <strncpy>
			json_get_token(tokens,json,token_buffer,TOKEN_BUFFER_SIZE,24);
    8e02:	08 e1       	ldi	r16, 0x18	; 24
    8e04:	2e e1       	ldi	r18, 0x1E	; 30
    8e06:	a7 01       	movw	r20, r14
    8e08:	be 01       	movw	r22, r28
    8e0a:	6f 5f       	subi	r22, 0xFF	; 255
    8e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    8e0e:	ce 01       	movw	r24, r28
    8e10:	8f 5f       	subi	r24, 0xFF	; 255
    8e12:	9e 4f       	sbci	r25, 0xFE	; 254
    8e14:	05 de       	rcall	.-1014   	; 0x8a20 <json_get_token>
#ifdef DEBUG_ON
			puts(token_buffer);
    8e16:	c7 01       	movw	r24, r14
    8e18:	0e 94 47 58 	call	0xb08e	; 0xb08e <puts>
#endif
			strncpy(env_var.weather_info,token_buffer,strlen(token_buffer));
    8e1c:	f7 01       	movw	r30, r14
    8e1e:	01 90       	ld	r0, Z+
    8e20:	00 20       	and	r0, r0
    8e22:	e9 f7       	brne	.-6      	; 0x8e1e <get_internet_variables+0x2aa>
    8e24:	31 97       	sbiw	r30, 0x01	; 1
    8e26:	af 01       	movw	r20, r30
    8e28:	4e 19       	sub	r20, r14
    8e2a:	5f 09       	sbc	r21, r15
    8e2c:	b7 01       	movw	r22, r14
    8e2e:	82 e9       	ldi	r24, 0x92	; 146
    8e30:	9a e2       	ldi	r25, 0x2A	; 42
    8e32:	0e 94 ea 57 	call	0xafd4	; 0xafd4 <strncpy>
			env_var.temperature[0] = '-';
			return ESP8266_ERROR;
		}
	}

	return ESP8266_SUCCESS;
    8e36:	81 e0       	ldi	r24, 0x01	; 1
    8e38:	06 c0       	rjmp	.+12     	; 0x8e46 <get_internet_variables+0x2d2>
#ifdef DEBUG_ON
			puts(token_buffer);
#endif
			strncpy(env_var.weather_info,token_buffer,strlen(token_buffer));
		} else {
			env_var.temperature[0] = '-';
    8e3a:	8d e2       	ldi	r24, 0x2D	; 45
    8e3c:	80 93 8f 2a 	sts	0x2A8F, r24
			return ESP8266_ERROR;
    8e40:	80 e0       	ldi	r24, 0x00	; 0
    8e42:	01 c0       	rjmp	.+2      	; 0x8e46 <get_internet_variables+0x2d2>
		}
	}

	return ESP8266_SUCCESS;
    8e44:	81 e0       	ldi	r24, 0x01	; 1
}
    8e46:	c7 52       	subi	r28, 0x27	; 39
    8e48:	de 4f       	sbci	r29, 0xFE	; 254
    8e4a:	cd bf       	out	0x3d, r28	; 61
    8e4c:	de bf       	out	0x3e, r29	; 62
    8e4e:	df 91       	pop	r29
    8e50:	cf 91       	pop	r28
    8e52:	1f 91       	pop	r17
    8e54:	0f 91       	pop	r16
    8e56:	ff 90       	pop	r15
    8e58:	ef 90       	pop	r14
    8e5a:	df 90       	pop	r13
    8e5c:	cf 90       	pop	r12
    8e5e:	08 95       	ret

00008e60 <menu_draw_temperature_frame>:

void menu_draw_temperature_frame(void) 
{
    8e60:	0f 93       	push	r16
	display_draw_small_char(1,10,'T',1,1);
    8e62:	01 e0       	ldi	r16, 0x01	; 1
    8e64:	21 e0       	ldi	r18, 0x01	; 1
    8e66:	30 e0       	ldi	r19, 0x00	; 0
    8e68:	44 e5       	ldi	r20, 0x54	; 84
    8e6a:	6a e0       	ldi	r22, 0x0A	; 10
    8e6c:	70 e0       	ldi	r23, 0x00	; 0
    8e6e:	81 e0       	ldi	r24, 0x01	; 1
    8e70:	90 e0       	ldi	r25, 0x00	; 0
    8e72:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(5,10,'E',1,1);
    8e76:	21 e0       	ldi	r18, 0x01	; 1
    8e78:	30 e0       	ldi	r19, 0x00	; 0
    8e7a:	45 e4       	ldi	r20, 0x45	; 69
    8e7c:	6a e0       	ldi	r22, 0x0A	; 10
    8e7e:	70 e0       	ldi	r23, 0x00	; 0
    8e80:	85 e0       	ldi	r24, 0x05	; 5
    8e82:	90 e0       	ldi	r25, 0x00	; 0
    8e84:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(9,10,'M',1,1);
    8e88:	21 e0       	ldi	r18, 0x01	; 1
    8e8a:	30 e0       	ldi	r19, 0x00	; 0
    8e8c:	4d e4       	ldi	r20, 0x4D	; 77
    8e8e:	6a e0       	ldi	r22, 0x0A	; 10
    8e90:	70 e0       	ldi	r23, 0x00	; 0
    8e92:	89 e0       	ldi	r24, 0x09	; 9
    8e94:	90 e0       	ldi	r25, 0x00	; 0
    8e96:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(13,10,'P',1,1);
    8e9a:	21 e0       	ldi	r18, 0x01	; 1
    8e9c:	30 e0       	ldi	r19, 0x00	; 0
    8e9e:	40 e5       	ldi	r20, 0x50	; 80
    8ea0:	6a e0       	ldi	r22, 0x0A	; 10
    8ea2:	70 e0       	ldi	r23, 0x00	; 0
    8ea4:	8d e0       	ldi	r24, 0x0D	; 13
    8ea6:	90 e0       	ldi	r25, 0x00	; 0
    8ea8:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	
	if (strlen(env_var.temperature) < 2) {
    8eac:	ef e8       	ldi	r30, 0x8F	; 143
    8eae:	fa e2       	ldi	r31, 0x2A	; 42
    8eb0:	01 90       	ld	r0, Z+
    8eb2:	00 20       	and	r0, r0
    8eb4:	e9 f7       	brne	.-6      	; 0x8eb0 <menu_draw_temperature_frame+0x50>
    8eb6:	cf 01       	movw	r24, r30
    8eb8:	80 59       	subi	r24, 0x90	; 144
    8eba:	9a 42       	sbci	r25, 0x2A	; 42
    8ebc:	02 97       	sbiw	r24, 0x02	; 2
    8ebe:	a0 f4       	brcc	.+40     	; 0x8ee8 <menu_draw_temperature_frame+0x88>
		display_draw_small_char(5,3,env_var.temperature[0],1,1);
    8ec0:	21 e0       	ldi	r18, 0x01	; 1
    8ec2:	30 e0       	ldi	r19, 0x00	; 0
    8ec4:	40 91 8f 2a 	lds	r20, 0x2A8F
    8ec8:	63 e0       	ldi	r22, 0x03	; 3
    8eca:	70 e0       	ldi	r23, 0x00	; 0
    8ecc:	85 e0       	ldi	r24, 0x05	; 5
    8ece:	90 e0       	ldi	r25, 0x00	; 0
    8ed0:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
		display_draw_small_char(9,3,'C',1,1);	
    8ed4:	21 e0       	ldi	r18, 0x01	; 1
    8ed6:	30 e0       	ldi	r19, 0x00	; 0
    8ed8:	43 e4       	ldi	r20, 0x43	; 67
    8eda:	63 e0       	ldi	r22, 0x03	; 3
    8edc:	70 e0       	ldi	r23, 0x00	; 0
    8ede:	89 e0       	ldi	r24, 0x09	; 9
    8ee0:	90 e0       	ldi	r25, 0x00	; 0
    8ee2:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
    8ee6:	1e c0       	rjmp	.+60     	; 0x8f24 <menu_draw_temperature_frame+0xc4>
	} else {
		display_draw_small_char(3,3,env_var.temperature[0],1,1);
    8ee8:	01 e0       	ldi	r16, 0x01	; 1
    8eea:	21 e0       	ldi	r18, 0x01	; 1
    8eec:	30 e0       	ldi	r19, 0x00	; 0
    8eee:	40 91 8f 2a 	lds	r20, 0x2A8F
    8ef2:	63 e0       	ldi	r22, 0x03	; 3
    8ef4:	70 e0       	ldi	r23, 0x00	; 0
    8ef6:	83 e0       	ldi	r24, 0x03	; 3
    8ef8:	90 e0       	ldi	r25, 0x00	; 0
    8efa:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
		display_draw_small_char(7,3,env_var.temperature[1],1,1);
    8efe:	21 e0       	ldi	r18, 0x01	; 1
    8f00:	30 e0       	ldi	r19, 0x00	; 0
    8f02:	40 91 90 2a 	lds	r20, 0x2A90
    8f06:	63 e0       	ldi	r22, 0x03	; 3
    8f08:	70 e0       	ldi	r23, 0x00	; 0
    8f0a:	87 e0       	ldi	r24, 0x07	; 7
    8f0c:	90 e0       	ldi	r25, 0x00	; 0
    8f0e:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
		display_draw_small_char(11,3,'C',1,1);	
    8f12:	21 e0       	ldi	r18, 0x01	; 1
    8f14:	30 e0       	ldi	r19, 0x00	; 0
    8f16:	43 e4       	ldi	r20, 0x43	; 67
    8f18:	63 e0       	ldi	r22, 0x03	; 3
    8f1a:	70 e0       	ldi	r23, 0x00	; 0
    8f1c:	8b e0       	ldi	r24, 0x0B	; 11
    8f1e:	90 e0       	ldi	r25, 0x00	; 0
    8f20:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	}
}
    8f24:	0f 91       	pop	r16
    8f26:	08 95       	ret

00008f28 <menu_draw_date_frame>:

void menu_draw_date_frame(void) 
{
    8f28:	4f 92       	push	r4
    8f2a:	5f 92       	push	r5
    8f2c:	6f 92       	push	r6
    8f2e:	7f 92       	push	r7
    8f30:	9f 92       	push	r9
    8f32:	af 92       	push	r10
    8f34:	bf 92       	push	r11
    8f36:	cf 92       	push	r12
    8f38:	df 92       	push	r13
    8f3a:	ef 92       	push	r14
    8f3c:	ff 92       	push	r15
    8f3e:	0f 93       	push	r16
    8f40:	1f 93       	push	r17
    8f42:	cf 93       	push	r28
    8f44:	df 93       	push	r29
    8f46:	00 d0       	rcall	.+0      	; 0x8f48 <menu_draw_date_frame+0x20>
    8f48:	cd b7       	in	r28, 0x3d	; 61
    8f4a:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'D',1,1);
    8f4c:	01 e0       	ldi	r16, 0x01	; 1
    8f4e:	21 e0       	ldi	r18, 0x01	; 1
    8f50:	30 e0       	ldi	r19, 0x00	; 0
    8f52:	44 e4       	ldi	r20, 0x44	; 68
    8f54:	6a e0       	ldi	r22, 0x0A	; 10
    8f56:	70 e0       	ldi	r23, 0x00	; 0
    8f58:	81 e0       	ldi	r24, 0x01	; 1
    8f5a:	90 e0       	ldi	r25, 0x00	; 0
    8f5c:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(5,10,'A',1,1);
    8f60:	21 e0       	ldi	r18, 0x01	; 1
    8f62:	30 e0       	ldi	r19, 0x00	; 0
    8f64:	41 e4       	ldi	r20, 0x41	; 65
    8f66:	6a e0       	ldi	r22, 0x0A	; 10
    8f68:	70 e0       	ldi	r23, 0x00	; 0
    8f6a:	85 e0       	ldi	r24, 0x05	; 5
    8f6c:	90 e0       	ldi	r25, 0x00	; 0
    8f6e:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(9,10,'T',1,1);
    8f72:	21 e0       	ldi	r18, 0x01	; 1
    8f74:	30 e0       	ldi	r19, 0x00	; 0
    8f76:	44 e5       	ldi	r20, 0x54	; 84
    8f78:	6a e0       	ldi	r22, 0x0A	; 10
    8f7a:	70 e0       	ldi	r23, 0x00	; 0
    8f7c:	89 e0       	ldi	r24, 0x09	; 9
    8f7e:	90 e0       	ldi	r25, 0x00	; 0
    8f80:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(13,10,'E',1,1);
    8f84:	21 e0       	ldi	r18, 0x01	; 1
    8f86:	30 e0       	ldi	r19, 0x00	; 0
    8f88:	45 e4       	ldi	r20, 0x45	; 69
    8f8a:	6a e0       	ldi	r22, 0x0A	; 10
    8f8c:	70 e0       	ldi	r23, 0x00	; 0
    8f8e:	8d e0       	ldi	r24, 0x0D	; 13
    8f90:	90 e0       	ldi	r25, 0x00	; 0
    8f92:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	
	char buffer[2];
	char temp;
	
	itoa_simple(buffer,env_var.time.day);
    8f96:	b0 90 87 2a 	lds	r11, 0x2A87
}

static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    8f9a:	6b 2d       	mov	r22, r11
    8f9c:	70 e0       	ldi	r23, 0x00	; 0
    8f9e:	80 e0       	ldi	r24, 0x00	; 0
    8fa0:	90 e0       	ldi	r25, 0x00	; 0
    8fa2:	8e 01       	movw	r16, r28
    8fa4:	0f 5f       	subi	r16, 0xFF	; 255
    8fa6:	1f 4f       	sbci	r17, 0xFF	; 255
		*s++ = '-';
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    8fa8:	0f 2e       	mov	r0, r31
    8faa:	fa e0       	ldi	r31, 0x0A	; 10
    8fac:	4f 2e       	mov	r4, r31
    8fae:	51 2c       	mov	r5, r1
    8fb0:	61 2c       	mov	r6, r1
    8fb2:	71 2c       	mov	r7, r1
    8fb4:	f0 2d       	mov	r31, r0
    8fb6:	78 01       	movw	r14, r16
    8fb8:	2f ef       	ldi	r18, 0xFF	; 255
    8fba:	e2 1a       	sub	r14, r18
    8fbc:	f2 0a       	sbc	r15, r18
    8fbe:	67 01       	movw	r12, r14
    8fc0:	a3 01       	movw	r20, r6
    8fc2:	92 01       	movw	r18, r4
    8fc4:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>
    8fc8:	60 5d       	subi	r22, 0xD0	; 208
    8fca:	f8 01       	movw	r30, r16
    8fcc:	60 83       	st	Z, r22
	} while ((n /= 10) > 0);     /* delete it */
    8fce:	62 2f       	mov	r22, r18
    8fd0:	73 2f       	mov	r23, r19
    8fd2:	84 2f       	mov	r24, r20
    8fd4:	95 2f       	mov	r25, r21
    8fd6:	61 15       	cp	r22, r1
    8fd8:	71 05       	cpc	r23, r1
    8fda:	81 05       	cpc	r24, r1
    8fdc:	91 05       	cpc	r25, r1
    8fde:	11 f0       	breq	.+4      	; 0x8fe4 <menu_draw_date_frame+0xbc>
    8fe0:	87 01       	movw	r16, r14
    8fe2:	e9 cf       	rjmp	.-46     	; 0x8fb6 <menu_draw_date_frame+0x8e>

	reverse_string( rev, s - rev);
    8fe4:	ce 01       	movw	r24, r28
    8fe6:	01 96       	adiw	r24, 0x01	; 1
    8fe8:	c8 1a       	sub	r12, r24
    8fea:	d9 0a       	sbc	r13, r25
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    8fec:	c6 01       	movw	r24, r12
    8fee:	01 97       	sbiw	r24, 0x01	; 1
    8ff0:	18 16       	cp	r1, r24
    8ff2:	19 06       	cpc	r1, r25
    8ff4:	a4 f4       	brge	.+40     	; 0x901e <menu_draw_date_frame+0xf6>
    8ff6:	a1 e0       	ldi	r26, 0x01	; 1
    8ff8:	b0 e0       	ldi	r27, 0x00	; 0
    8ffa:	ac 0f       	add	r26, r28
    8ffc:	bd 1f       	adc	r27, r29
    8ffe:	ac 0d       	add	r26, r12
    9000:	bd 1d       	adc	r27, r13
    9002:	fe 01       	movw	r30, r28
    9004:	31 96       	adiw	r30, 0x01	; 1
    9006:	20 e0       	ldi	r18, 0x00	; 0
    9008:	30 e0       	ldi	r19, 0x00	; 0
		c = s[i];
    900a:	40 81       	ld	r20, Z
		s[i] = s[j];
    900c:	5e 91       	ld	r21, -X
    900e:	51 93       	st	Z+, r21
		s[j] = c;
    9010:	4c 93       	st	X, r20
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    9012:	2f 5f       	subi	r18, 0xFF	; 255
    9014:	3f 4f       	sbci	r19, 0xFF	; 255
    9016:	01 97       	sbiw	r24, 0x01	; 1
    9018:	28 17       	cp	r18, r24
    901a:	39 07       	cpc	r19, r25
    901c:	b4 f3       	brlt	.-20     	; 0x900a <menu_draw_date_frame+0xe2>
	
	//append zero
	if (env_var.time.day < 10) {
    901e:	f9 e0       	ldi	r31, 0x09	; 9
    9020:	fb 15       	cp	r31, r11
    9022:	20 f0       	brcs	.+8      	; 0x902c <menu_draw_date_frame+0x104>
		temp = buffer[0];
    9024:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    9026:	90 e3       	ldi	r25, 0x30	; 48
    9028:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    902a:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(1,3,buffer[0],1,1);
    902c:	01 e0       	ldi	r16, 0x01	; 1
    902e:	21 e0       	ldi	r18, 0x01	; 1
    9030:	30 e0       	ldi	r19, 0x00	; 0
    9032:	49 81       	ldd	r20, Y+1	; 0x01
    9034:	63 e0       	ldi	r22, 0x03	; 3
    9036:	70 e0       	ldi	r23, 0x00	; 0
    9038:	81 e0       	ldi	r24, 0x01	; 1
    903a:	90 e0       	ldi	r25, 0x00	; 0
    903c:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(4,3,buffer[1],1,1);
    9040:	21 e0       	ldi	r18, 0x01	; 1
    9042:	30 e0       	ldi	r19, 0x00	; 0
    9044:	4a 81       	ldd	r20, Y+2	; 0x02
    9046:	63 e0       	ldi	r22, 0x03	; 3
    9048:	70 e0       	ldi	r23, 0x00	; 0
    904a:	84 e0       	ldi	r24, 0x04	; 4
    904c:	90 e0       	ldi	r25, 0x00	; 0
    904e:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(7,3,'.',1,1);
    9052:	21 e0       	ldi	r18, 0x01	; 1
    9054:	30 e0       	ldi	r19, 0x00	; 0
    9056:	4e e2       	ldi	r20, 0x2E	; 46
    9058:	63 e0       	ldi	r22, 0x03	; 3
    905a:	70 e0       	ldi	r23, 0x00	; 0
    905c:	87 e0       	ldi	r24, 0x07	; 7
    905e:	90 e0       	ldi	r25, 0x00	; 0
    9060:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	
	itoa_simple(buffer,env_var.time.month);
    9064:	90 90 8a 2a 	lds	r9, 0x2A8A
}

static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    9068:	69 2d       	mov	r22, r9
    906a:	70 e0       	ldi	r23, 0x00	; 0
    906c:	80 e0       	ldi	r24, 0x00	; 0
    906e:	90 e0       	ldi	r25, 0x00	; 0
    9070:	9e 01       	movw	r18, r28
    9072:	2f 5f       	subi	r18, 0xFF	; 255
    9074:	3f 4f       	sbci	r19, 0xFF	; 255
    9076:	59 01       	movw	r10, r18

	if( num < 0 ) {
		 // forget about the sign, don't reverse it later
		n = -num;
		*s++ = '-';
    9078:	89 01       	movw	r16, r18
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    907a:	0f 2e       	mov	r0, r31
    907c:	fa e0       	ldi	r31, 0x0A	; 10
    907e:	4f 2e       	mov	r4, r31
    9080:	51 2c       	mov	r5, r1
    9082:	61 2c       	mov	r6, r1
    9084:	71 2c       	mov	r7, r1
    9086:	f0 2d       	mov	r31, r0
    9088:	78 01       	movw	r14, r16
    908a:	3f ef       	ldi	r19, 0xFF	; 255
    908c:	e3 1a       	sub	r14, r19
    908e:	f3 0a       	sbc	r15, r19
    9090:	67 01       	movw	r12, r14
    9092:	a3 01       	movw	r20, r6
    9094:	92 01       	movw	r18, r4
    9096:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>
    909a:	60 5d       	subi	r22, 0xD0	; 208
    909c:	f8 01       	movw	r30, r16
    909e:	60 83       	st	Z, r22
	} while ((n /= 10) > 0);     /* delete it */
    90a0:	62 2f       	mov	r22, r18
    90a2:	73 2f       	mov	r23, r19
    90a4:	84 2f       	mov	r24, r20
    90a6:	95 2f       	mov	r25, r21
    90a8:	61 15       	cp	r22, r1
    90aa:	71 05       	cpc	r23, r1
    90ac:	81 05       	cpc	r24, r1
    90ae:	91 05       	cpc	r25, r1
    90b0:	11 f0       	breq	.+4      	; 0x90b6 <menu_draw_date_frame+0x18e>
    90b2:	87 01       	movw	r16, r14
    90b4:	e9 cf       	rjmp	.-46     	; 0x9088 <menu_draw_date_frame+0x160>

	reverse_string( rev, s - rev);
    90b6:	ca 18       	sub	r12, r10
    90b8:	db 08       	sbc	r13, r11
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    90ba:	c6 01       	movw	r24, r12
    90bc:	01 97       	sbiw	r24, 0x01	; 1
    90be:	18 16       	cp	r1, r24
    90c0:	19 06       	cpc	r1, r25
    90c2:	84 f4       	brge	.+32     	; 0x90e4 <menu_draw_date_frame+0x1bc>
    90c4:	d5 01       	movw	r26, r10
    90c6:	ac 0d       	add	r26, r12
    90c8:	bd 1d       	adc	r27, r13
    90ca:	f5 01       	movw	r30, r10
    90cc:	20 e0       	ldi	r18, 0x00	; 0
    90ce:	30 e0       	ldi	r19, 0x00	; 0
		c = s[i];
    90d0:	40 81       	ld	r20, Z
		s[i] = s[j];
    90d2:	5e 91       	ld	r21, -X
    90d4:	51 93       	st	Z+, r21
		s[j] = c;
    90d6:	4c 93       	st	X, r20
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    90d8:	2f 5f       	subi	r18, 0xFF	; 255
    90da:	3f 4f       	sbci	r19, 0xFF	; 255
    90dc:	01 97       	sbiw	r24, 0x01	; 1
    90de:	28 17       	cp	r18, r24
    90e0:	39 07       	cpc	r19, r25
    90e2:	b4 f3       	brlt	.-20     	; 0x90d0 <menu_draw_date_frame+0x1a8>
	
	//append zero
	if (env_var.time.month < 10) {
    90e4:	f9 e0       	ldi	r31, 0x09	; 9
    90e6:	f9 15       	cp	r31, r9
    90e8:	20 f0       	brcs	.+8      	; 0x90f2 <menu_draw_date_frame+0x1ca>
		temp = buffer[0];
    90ea:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    90ec:	90 e3       	ldi	r25, 0x30	; 48
    90ee:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    90f0:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(10,3,buffer[0],1,1);
    90f2:	01 e0       	ldi	r16, 0x01	; 1
    90f4:	21 e0       	ldi	r18, 0x01	; 1
    90f6:	30 e0       	ldi	r19, 0x00	; 0
    90f8:	49 81       	ldd	r20, Y+1	; 0x01
    90fa:	63 e0       	ldi	r22, 0x03	; 3
    90fc:	70 e0       	ldi	r23, 0x00	; 0
    90fe:	8a e0       	ldi	r24, 0x0A	; 10
    9100:	90 e0       	ldi	r25, 0x00	; 0
    9102:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(13,3,buffer[1],1,1);
    9106:	21 e0       	ldi	r18, 0x01	; 1
    9108:	30 e0       	ldi	r19, 0x00	; 0
    910a:	4a 81       	ldd	r20, Y+2	; 0x02
    910c:	63 e0       	ldi	r22, 0x03	; 3
    910e:	70 e0       	ldi	r23, 0x00	; 0
    9110:	8d e0       	ldi	r24, 0x0D	; 13
    9112:	90 e0       	ldi	r25, 0x00	; 0
    9114:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
}
    9118:	0f 90       	pop	r0
    911a:	0f 90       	pop	r0
    911c:	df 91       	pop	r29
    911e:	cf 91       	pop	r28
    9120:	1f 91       	pop	r17
    9122:	0f 91       	pop	r16
    9124:	ff 90       	pop	r15
    9126:	ef 90       	pop	r14
    9128:	df 90       	pop	r13
    912a:	cf 90       	pop	r12
    912c:	bf 90       	pop	r11
    912e:	af 90       	pop	r10
    9130:	9f 90       	pop	r9
    9132:	7f 90       	pop	r7
    9134:	6f 90       	pop	r6
    9136:	5f 90       	pop	r5
    9138:	4f 90       	pop	r4
    913a:	08 95       	ret

0000913c <menu_draw_week_frame>:

void menu_draw_week_frame(void) 
{
    913c:	7f 92       	push	r7
    913e:	8f 92       	push	r8
    9140:	9f 92       	push	r9
    9142:	af 92       	push	r10
    9144:	bf 92       	push	r11
    9146:	cf 92       	push	r12
    9148:	df 92       	push	r13
    914a:	ef 92       	push	r14
    914c:	ff 92       	push	r15
    914e:	0f 93       	push	r16
    9150:	1f 93       	push	r17
    9152:	cf 93       	push	r28
    9154:	df 93       	push	r29
    9156:	00 d0       	rcall	.+0      	; 0x9158 <menu_draw_week_frame+0x1c>
    9158:	cd b7       	in	r28, 0x3d	; 61
    915a:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'W',1,1);
    915c:	01 e0       	ldi	r16, 0x01	; 1
    915e:	21 e0       	ldi	r18, 0x01	; 1
    9160:	30 e0       	ldi	r19, 0x00	; 0
    9162:	47 e5       	ldi	r20, 0x57	; 87
    9164:	6a e0       	ldi	r22, 0x0A	; 10
    9166:	70 e0       	ldi	r23, 0x00	; 0
    9168:	81 e0       	ldi	r24, 0x01	; 1
    916a:	90 e0       	ldi	r25, 0x00	; 0
    916c:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(5,10,'E',1,1);
    9170:	21 e0       	ldi	r18, 0x01	; 1
    9172:	30 e0       	ldi	r19, 0x00	; 0
    9174:	45 e4       	ldi	r20, 0x45	; 69
    9176:	6a e0       	ldi	r22, 0x0A	; 10
    9178:	70 e0       	ldi	r23, 0x00	; 0
    917a:	85 e0       	ldi	r24, 0x05	; 5
    917c:	90 e0       	ldi	r25, 0x00	; 0
    917e:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(9,10,'E',1,1);
    9182:	21 e0       	ldi	r18, 0x01	; 1
    9184:	30 e0       	ldi	r19, 0x00	; 0
    9186:	45 e4       	ldi	r20, 0x45	; 69
    9188:	6a e0       	ldi	r22, 0x0A	; 10
    918a:	70 e0       	ldi	r23, 0x00	; 0
    918c:	89 e0       	ldi	r24, 0x09	; 9
    918e:	90 e0       	ldi	r25, 0x00	; 0
    9190:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(13,10,'K',1,1);
    9194:	21 e0       	ldi	r18, 0x01	; 1
    9196:	30 e0       	ldi	r19, 0x00	; 0
    9198:	4b e4       	ldi	r20, 0x4B	; 75
    919a:	6a e0       	ldi	r22, 0x0A	; 10
    919c:	70 e0       	ldi	r23, 0x00	; 0
    919e:	8d e0       	ldi	r24, 0x0D	; 13
    91a0:	90 e0       	ldi	r25, 0x00	; 0
    91a2:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	
	char buffer[2];
	char temp;
	
	itoa_simple(buffer,env_var.time.week);
    91a6:	70 90 89 2a 	lds	r7, 0x2A89
}

static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    91aa:	67 2d       	mov	r22, r7
    91ac:	70 e0       	ldi	r23, 0x00	; 0
    91ae:	80 e0       	ldi	r24, 0x00	; 0
    91b0:	90 e0       	ldi	r25, 0x00	; 0
    91b2:	8e 01       	movw	r16, r28
    91b4:	0f 5f       	subi	r16, 0xFF	; 255
    91b6:	1f 4f       	sbci	r17, 0xFF	; 255
		*s++ = '-';
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    91b8:	0f 2e       	mov	r0, r31
    91ba:	fa e0       	ldi	r31, 0x0A	; 10
    91bc:	8f 2e       	mov	r8, r31
    91be:	91 2c       	mov	r9, r1
    91c0:	a1 2c       	mov	r10, r1
    91c2:	b1 2c       	mov	r11, r1
    91c4:	f0 2d       	mov	r31, r0
    91c6:	78 01       	movw	r14, r16
    91c8:	2f ef       	ldi	r18, 0xFF	; 255
    91ca:	e2 1a       	sub	r14, r18
    91cc:	f2 0a       	sbc	r15, r18
    91ce:	67 01       	movw	r12, r14
    91d0:	a5 01       	movw	r20, r10
    91d2:	94 01       	movw	r18, r8
    91d4:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>
    91d8:	60 5d       	subi	r22, 0xD0	; 208
    91da:	f8 01       	movw	r30, r16
    91dc:	60 83       	st	Z, r22
	} while ((n /= 10) > 0);     /* delete it */
    91de:	62 2f       	mov	r22, r18
    91e0:	73 2f       	mov	r23, r19
    91e2:	84 2f       	mov	r24, r20
    91e4:	95 2f       	mov	r25, r21
    91e6:	61 15       	cp	r22, r1
    91e8:	71 05       	cpc	r23, r1
    91ea:	81 05       	cpc	r24, r1
    91ec:	91 05       	cpc	r25, r1
    91ee:	11 f0       	breq	.+4      	; 0x91f4 <menu_draw_week_frame+0xb8>
    91f0:	87 01       	movw	r16, r14
    91f2:	e9 cf       	rjmp	.-46     	; 0x91c6 <menu_draw_week_frame+0x8a>

	reverse_string( rev, s - rev);
    91f4:	ce 01       	movw	r24, r28
    91f6:	01 96       	adiw	r24, 0x01	; 1
    91f8:	c8 1a       	sub	r12, r24
    91fa:	d9 0a       	sbc	r13, r25
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    91fc:	c6 01       	movw	r24, r12
    91fe:	01 97       	sbiw	r24, 0x01	; 1
    9200:	18 16       	cp	r1, r24
    9202:	19 06       	cpc	r1, r25
    9204:	a4 f4       	brge	.+40     	; 0x922e <menu_draw_week_frame+0xf2>
    9206:	a1 e0       	ldi	r26, 0x01	; 1
    9208:	b0 e0       	ldi	r27, 0x00	; 0
    920a:	ac 0f       	add	r26, r28
    920c:	bd 1f       	adc	r27, r29
    920e:	ac 0d       	add	r26, r12
    9210:	bd 1d       	adc	r27, r13
    9212:	fe 01       	movw	r30, r28
    9214:	31 96       	adiw	r30, 0x01	; 1
    9216:	20 e0       	ldi	r18, 0x00	; 0
    9218:	30 e0       	ldi	r19, 0x00	; 0
		c = s[i];
    921a:	40 81       	ld	r20, Z
		s[i] = s[j];
    921c:	5e 91       	ld	r21, -X
    921e:	51 93       	st	Z+, r21
		s[j] = c;
    9220:	4c 93       	st	X, r20
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    9222:	2f 5f       	subi	r18, 0xFF	; 255
    9224:	3f 4f       	sbci	r19, 0xFF	; 255
    9226:	01 97       	sbiw	r24, 0x01	; 1
    9228:	28 17       	cp	r18, r24
    922a:	39 07       	cpc	r19, r25
    922c:	b4 f3       	brlt	.-20     	; 0x921a <menu_draw_week_frame+0xde>
	
	//append zero
	if (env_var.time.week < 10) {
    922e:	f9 e0       	ldi	r31, 0x09	; 9
    9230:	f7 15       	cp	r31, r7
    9232:	20 f0       	brcs	.+8      	; 0x923c <menu_draw_week_frame+0x100>
		temp = buffer[0];
    9234:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    9236:	90 e3       	ldi	r25, 0x30	; 48
    9238:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    923a:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(5,3,buffer[0],1,1);
    923c:	01 e0       	ldi	r16, 0x01	; 1
    923e:	21 e0       	ldi	r18, 0x01	; 1
    9240:	30 e0       	ldi	r19, 0x00	; 0
    9242:	49 81       	ldd	r20, Y+1	; 0x01
    9244:	63 e0       	ldi	r22, 0x03	; 3
    9246:	70 e0       	ldi	r23, 0x00	; 0
    9248:	85 e0       	ldi	r24, 0x05	; 5
    924a:	90 e0       	ldi	r25, 0x00	; 0
    924c:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(9,3,buffer[1],1,1);
    9250:	21 e0       	ldi	r18, 0x01	; 1
    9252:	30 e0       	ldi	r19, 0x00	; 0
    9254:	4a 81       	ldd	r20, Y+2	; 0x02
    9256:	63 e0       	ldi	r22, 0x03	; 3
    9258:	70 e0       	ldi	r23, 0x00	; 0
    925a:	89 e0       	ldi	r24, 0x09	; 9
    925c:	90 e0       	ldi	r25, 0x00	; 0
    925e:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
}
    9262:	0f 90       	pop	r0
    9264:	0f 90       	pop	r0
    9266:	df 91       	pop	r29
    9268:	cf 91       	pop	r28
    926a:	1f 91       	pop	r17
    926c:	0f 91       	pop	r16
    926e:	ff 90       	pop	r15
    9270:	ef 90       	pop	r14
    9272:	df 90       	pop	r13
    9274:	cf 90       	pop	r12
    9276:	bf 90       	pop	r11
    9278:	af 90       	pop	r10
    927a:	9f 90       	pop	r9
    927c:	8f 90       	pop	r8
    927e:	7f 90       	pop	r7
    9280:	08 95       	ret

00009282 <menu_draw_weekday_frame>:

void menu_draw_weekday_frame(void) 
{
    9282:	0f 93       	push	r16
    9284:	cf 93       	push	r28
    9286:	df 93       	push	r29
    9288:	00 d0       	rcall	.+0      	; 0x928a <menu_draw_weekday_frame+0x8>
    928a:	1f 92       	push	r1
    928c:	cd b7       	in	r28, 0x3d	; 61
    928e:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'W',1,1);
    9290:	01 e0       	ldi	r16, 0x01	; 1
    9292:	21 e0       	ldi	r18, 0x01	; 1
    9294:	30 e0       	ldi	r19, 0x00	; 0
    9296:	47 e5       	ldi	r20, 0x57	; 87
    9298:	6a e0       	ldi	r22, 0x0A	; 10
    929a:	70 e0       	ldi	r23, 0x00	; 0
    929c:	81 e0       	ldi	r24, 0x01	; 1
    929e:	90 e0       	ldi	r25, 0x00	; 0
    92a0:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(5,10,'D',1,1);
    92a4:	21 e0       	ldi	r18, 0x01	; 1
    92a6:	30 e0       	ldi	r19, 0x00	; 0
    92a8:	44 e4       	ldi	r20, 0x44	; 68
    92aa:	6a e0       	ldi	r22, 0x0A	; 10
    92ac:	70 e0       	ldi	r23, 0x00	; 0
    92ae:	85 e0       	ldi	r24, 0x05	; 5
    92b0:	90 e0       	ldi	r25, 0x00	; 0
    92b2:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(9,10,'A',1,1);
    92b6:	21 e0       	ldi	r18, 0x01	; 1
    92b8:	30 e0       	ldi	r19, 0x00	; 0
    92ba:	41 e4       	ldi	r20, 0x41	; 65
    92bc:	6a e0       	ldi	r22, 0x0A	; 10
    92be:	70 e0       	ldi	r23, 0x00	; 0
    92c0:	89 e0       	ldi	r24, 0x09	; 9
    92c2:	90 e0       	ldi	r25, 0x00	; 0
    92c4:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(13,10,'Y',1,1);
    92c8:	21 e0       	ldi	r18, 0x01	; 1
    92ca:	30 e0       	ldi	r19, 0x00	; 0
    92cc:	49 e5       	ldi	r20, 0x59	; 89
    92ce:	6a e0       	ldi	r22, 0x0A	; 10
    92d0:	70 e0       	ldi	r23, 0x00	; 0
    92d2:	8d e0       	ldi	r24, 0x0D	; 13
    92d4:	90 e0       	ldi	r25, 0x00	; 0
    92d6:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	
	char buffer[3];
	strncpy(buffer,time_get_day_name(env_var.time.weekday),3);
    92da:	80 91 88 2a 	lds	r24, 0x2A88
    92de:	0e 94 24 53 	call	0xa648	; 0xa648 <time_get_day_name>
    92e2:	43 e0       	ldi	r20, 0x03	; 3
    92e4:	50 e0       	ldi	r21, 0x00	; 0
    92e6:	bc 01       	movw	r22, r24
    92e8:	ce 01       	movw	r24, r28
    92ea:	01 96       	adiw	r24, 0x01	; 1
    92ec:	0e 94 ea 57 	call	0xafd4	; 0xafd4 <strncpy>
	
	display_draw_small_char(3,3,buffer[0],1,1);
    92f0:	21 e0       	ldi	r18, 0x01	; 1
    92f2:	30 e0       	ldi	r19, 0x00	; 0
    92f4:	49 81       	ldd	r20, Y+1	; 0x01
    92f6:	63 e0       	ldi	r22, 0x03	; 3
    92f8:	70 e0       	ldi	r23, 0x00	; 0
    92fa:	83 e0       	ldi	r24, 0x03	; 3
    92fc:	90 e0       	ldi	r25, 0x00	; 0
    92fe:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(7,3,buffer[1],1,1);
    9302:	21 e0       	ldi	r18, 0x01	; 1
    9304:	30 e0       	ldi	r19, 0x00	; 0
    9306:	4a 81       	ldd	r20, Y+2	; 0x02
    9308:	63 e0       	ldi	r22, 0x03	; 3
    930a:	70 e0       	ldi	r23, 0x00	; 0
    930c:	87 e0       	ldi	r24, 0x07	; 7
    930e:	90 e0       	ldi	r25, 0x00	; 0
    9310:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(11,3,buffer[2],1,1);
    9314:	21 e0       	ldi	r18, 0x01	; 1
    9316:	30 e0       	ldi	r19, 0x00	; 0
    9318:	4b 81       	ldd	r20, Y+3	; 0x03
    931a:	63 e0       	ldi	r22, 0x03	; 3
    931c:	70 e0       	ldi	r23, 0x00	; 0
    931e:	8b e0       	ldi	r24, 0x0B	; 11
    9320:	90 e0       	ldi	r25, 0x00	; 0
    9322:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
}
    9326:	23 96       	adiw	r28, 0x03	; 3
    9328:	cd bf       	out	0x3d, r28	; 61
    932a:	de bf       	out	0x3e, r29	; 62
    932c:	df 91       	pop	r29
    932e:	cf 91       	pop	r28
    9330:	0f 91       	pop	r16
    9332:	08 95       	ret

00009334 <menu_draw_battery_frame>:

void menu_draw_battery_frame(void) 
{	
    9334:	0f 93       	push	r16
    9336:	cf 93       	push	r28
    9338:	df 93       	push	r29
    933a:	cd b7       	in	r28, 0x3d	; 61
    933c:	de b7       	in	r29, 0x3e	; 62
    933e:	25 97       	sbiw	r28, 0x05	; 5
    9340:	cd bf       	out	0x3d, r28	; 61
    9342:	de bf       	out	0x3e, r29	; 62
	display_draw_small_char(1,10,'B',1,1);
    9344:	01 e0       	ldi	r16, 0x01	; 1
    9346:	21 e0       	ldi	r18, 0x01	; 1
    9348:	30 e0       	ldi	r19, 0x00	; 0
    934a:	42 e4       	ldi	r20, 0x42	; 66
    934c:	6a e0       	ldi	r22, 0x0A	; 10
    934e:	70 e0       	ldi	r23, 0x00	; 0
    9350:	81 e0       	ldi	r24, 0x01	; 1
    9352:	90 e0       	ldi	r25, 0x00	; 0
    9354:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(5,10,'A',1,1);
    9358:	21 e0       	ldi	r18, 0x01	; 1
    935a:	30 e0       	ldi	r19, 0x00	; 0
    935c:	41 e4       	ldi	r20, 0x41	; 65
    935e:	6a e0       	ldi	r22, 0x0A	; 10
    9360:	70 e0       	ldi	r23, 0x00	; 0
    9362:	85 e0       	ldi	r24, 0x05	; 5
    9364:	90 e0       	ldi	r25, 0x00	; 0
    9366:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(9,10,'T',1,1);
    936a:	21 e0       	ldi	r18, 0x01	; 1
    936c:	30 e0       	ldi	r19, 0x00	; 0
    936e:	44 e5       	ldi	r20, 0x54	; 84
    9370:	6a e0       	ldi	r22, 0x0A	; 10
    9372:	70 e0       	ldi	r23, 0x00	; 0
    9374:	89 e0       	ldi	r24, 0x09	; 9
    9376:	90 e0       	ldi	r25, 0x00	; 0
    9378:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(13,10,'T',1,1);
    937c:	21 e0       	ldi	r18, 0x01	; 1
    937e:	30 e0       	ldi	r19, 0x00	; 0
    9380:	44 e5       	ldi	r20, 0x54	; 84
    9382:	6a e0       	ldi	r22, 0x0A	; 10
    9384:	70 e0       	ldi	r23, 0x00	; 0
    9386:	8d e0       	ldi	r24, 0x0D	; 13
    9388:	90 e0       	ldi	r25, 0x00	; 0
    938a:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	
	uint8_t battery = adc_get_battery_percentage();
    938e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <adc_get_battery_percentage>
    9392:	4a e0       	ldi	r20, 0x0A	; 10
    9394:	be 01       	movw	r22, r28
    9396:	6f 5f       	subi	r22, 0xFF	; 255
    9398:	7f 4f       	sbci	r23, 0xFF	; 255
    939a:	90 e0       	ldi	r25, 0x00	; 0
    939c:	0e 94 13 58 	call	0xb026	; 0xb026 <__itoa_ncheck>
	
	char buffer[5];
	itoa(battery,buffer,10);
	
	display_draw_small_char(3,3,buffer[0],1,1);
    93a0:	21 e0       	ldi	r18, 0x01	; 1
    93a2:	30 e0       	ldi	r19, 0x00	; 0
    93a4:	49 81       	ldd	r20, Y+1	; 0x01
    93a6:	63 e0       	ldi	r22, 0x03	; 3
    93a8:	70 e0       	ldi	r23, 0x00	; 0
    93aa:	83 e0       	ldi	r24, 0x03	; 3
    93ac:	90 e0       	ldi	r25, 0x00	; 0
    93ae:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(7,3,buffer[1],1,1);
    93b2:	21 e0       	ldi	r18, 0x01	; 1
    93b4:	30 e0       	ldi	r19, 0x00	; 0
    93b6:	4a 81       	ldd	r20, Y+2	; 0x02
    93b8:	63 e0       	ldi	r22, 0x03	; 3
    93ba:	70 e0       	ldi	r23, 0x00	; 0
    93bc:	87 e0       	ldi	r24, 0x07	; 7
    93be:	90 e0       	ldi	r25, 0x00	; 0
    93c0:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(11,3,'%',1,1);
    93c4:	21 e0       	ldi	r18, 0x01	; 1
    93c6:	30 e0       	ldi	r19, 0x00	; 0
    93c8:	45 e2       	ldi	r20, 0x25	; 37
    93ca:	63 e0       	ldi	r22, 0x03	; 3
    93cc:	70 e0       	ldi	r23, 0x00	; 0
    93ce:	8b e0       	ldi	r24, 0x0B	; 11
    93d0:	90 e0       	ldi	r25, 0x00	; 0
    93d2:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	
}
    93d6:	25 96       	adiw	r28, 0x05	; 5
    93d8:	cd bf       	out	0x3d, r28	; 61
    93da:	de bf       	out	0x3e, r29	; 62
    93dc:	df 91       	pop	r29
    93de:	cf 91       	pop	r28
    93e0:	0f 91       	pop	r16
    93e2:	08 95       	ret

000093e4 <menu_draw_config_frame>:

void menu_draw_config_frame(void) 
{
	display_draw_four_letter_word("CONF");
    93e4:	88 e4       	ldi	r24, 0x48	; 72
    93e6:	97 e2       	ldi	r25, 0x27	; 39
    93e8:	0c 94 90 24 	jmp	0x4920	; 0x4920 <display_draw_four_letter_word>
    93ec:	08 95       	ret

000093ee <menu_set_env_variables>:
}

void menu_set_env_variables(void) 
{
    93ee:	ef 92       	push	r14
    93f0:	ff 92       	push	r15
    93f2:	0f 93       	push	r16
    93f4:	1f 93       	push	r17
    93f6:	cf 93       	push	r28
    93f8:	df 93       	push	r29
	EEPROM_EraseAll();
    93fa:	0e 94 3b 09 	call	0x1276	; 0x1276 <EEPROM_EraseAll>
	
	strncpy(env_var.name,CLOCK_NAME,sizeof(env_var.name));
    93fe:	49 e1       	ldi	r20, 0x19	; 25
    9400:	50 e0       	ldi	r21, 0x00	; 0
    9402:	6d e4       	ldi	r22, 0x4D	; 77
    9404:	77 e2       	ldi	r23, 0x27	; 39
    9406:	8b e6       	ldi	r24, 0x6B	; 107
    9408:	9a e2       	ldi	r25, 0x2A	; 42
    940a:	0e 94 ea 57 	call	0xafd4	; 0xafd4 <strncpy>
	env_var.id = CLOCK_ID;
    940e:	81 e0       	ldi	r24, 0x01	; 1
    9410:	90 e0       	ldi	r25, 0x00	; 0
    9412:	80 93 65 2a 	sts	0x2A65, r24
    9416:	90 93 66 2a 	sts	0x2A66, r25
	env_var.temperature[0] = '0';
    941a:	80 e3       	ldi	r24, 0x30	; 48
    941c:	80 93 8f 2a 	sts	0x2A8F, r24
	env_var.brightness = 0;
    9420:	10 92 d3 2a 	sts	0x2AD3, r1
	env_var.menu_id = 0;
    9424:	10 92 08 2b 	sts	0x2B08, r1
	strncpy(env_var.wifi_pswd,PASS, strlen(PASS));
    9428:	8a e0       	ldi	r24, 0x0A	; 10
    942a:	e2 e5       	ldi	r30, 0x52	; 82
    942c:	f7 e2       	ldi	r31, 0x27	; 39
    942e:	a6 ed       	ldi	r26, 0xD6	; 214
    9430:	ba e2       	ldi	r27, 0x2A	; 42
    9432:	01 90       	ld	r0, Z+
    9434:	0d 92       	st	X+, r0
    9436:	8a 95       	dec	r24
    9438:	e1 f7       	brne	.-8      	; 0x9432 <menu_set_env_variables+0x44>
	strncpy(env_var.wifi_ssid,SSID, strlen(SSID));
    943a:	89 e0       	ldi	r24, 0x09	; 9
    943c:	ed e5       	ldi	r30, 0x5D	; 93
    943e:	f7 e2       	ldi	r31, 0x27	; 39
    9440:	af ee       	ldi	r26, 0xEF	; 239
    9442:	ba e2       	ldi	r27, 0x2A	; 42
    9444:	01 90       	ld	r0, Z+
    9446:	0d 92       	st	X+, r0
    9448:	8a 95       	dec	r24
    944a:	e1 f7       	brne	.-8      	; 0x9444 <menu_set_env_variables+0x56>
	
	env_var.time.timezone = 1;
    944c:	81 e0       	ldi	r24, 0x01	; 1
    944e:	80 93 8d 2a 	sts	0x2A8D, r24
	env_var.time.DST = 0;
    9452:	10 92 8e 2a 	sts	0x2A8E, r1
	env_var.time.seconds = 0;
    9456:	10 92 84 2a 	sts	0x2A84, r1
	env_var.time.minutes = 0;
    945a:	10 92 85 2a 	sts	0x2A85, r1
	env_var.time.hours = 0;
    945e:	10 92 86 2a 	sts	0x2A86, r1
	env_var.time.day = 0;
    9462:	c7 e8       	ldi	r28, 0x87	; 135
    9464:	da e2       	ldi	r29, 0x2A	; 42
    9466:	18 82       	st	Y, r1
	env_var.time.month = January;
    9468:	0a e8       	ldi	r16, 0x8A	; 138
    946a:	1a e2       	ldi	r17, 0x2A	; 42
    946c:	f8 01       	movw	r30, r16
    946e:	80 83       	st	Z, r24
	env_var.time.year = 2016;
    9470:	0f 2e       	mov	r0, r31
    9472:	fb e8       	ldi	r31, 0x8B	; 139
    9474:	ef 2e       	mov	r14, r31
    9476:	fa e2       	ldi	r31, 0x2A	; 42
    9478:	ff 2e       	mov	r15, r31
    947a:	f0 2d       	mov	r31, r0
    947c:	80 ee       	ldi	r24, 0xE0	; 224
    947e:	97 e0       	ldi	r25, 0x07	; 7
    9480:	f7 01       	movw	r30, r14
    9482:	80 83       	st	Z, r24
    9484:	91 83       	std	Z+1, r25	; 0x01
	env_var.time.weekday = time_get_weekday(env_var.time.day, env_var.time.month, env_var.time.year);
    9486:	40 ee       	ldi	r20, 0xE0	; 224
    9488:	57 e0       	ldi	r21, 0x07	; 7
    948a:	61 e0       	ldi	r22, 0x01	; 1
    948c:	80 e0       	ldi	r24, 0x00	; 0
    948e:	0e 94 c3 53 	call	0xa786	; 0xa786 <time_get_weekday>
    9492:	80 93 88 2a 	sts	0x2A88, r24
	env_var.time.week = time_get_weeknumber(env_var.time.day, env_var.time.month, env_var.time.year);;
    9496:	f7 01       	movw	r30, r14
    9498:	40 81       	ld	r20, Z
    949a:	51 81       	ldd	r21, Z+1	; 0x01
    949c:	f8 01       	movw	r30, r16
    949e:	60 81       	ld	r22, Z
    94a0:	88 81       	ld	r24, Y
    94a2:	0e 94 39 54 	call	0xa872	; 0xa872 <time_get_weeknumber>
    94a6:	80 93 89 2a 	sts	0x2A89, r24
	
	env_var.alarm.hours = 0;
    94aa:	10 92 0a 2b 	sts	0x2B0A, r1
	env_var.alarm.minutes = 0;
    94ae:	10 92 09 2b 	sts	0x2B09, r1
	
	env_var.runtime = 0;
    94b2:	10 92 67 2a 	sts	0x2A67, r1
    94b6:	10 92 68 2a 	sts	0x2A68, r1
    94ba:	10 92 69 2a 	sts	0x2A69, r1
    94be:	10 92 6a 2a 	sts	0x2A6A, r1
}
    94c2:	df 91       	pop	r29
    94c4:	cf 91       	pop	r28
    94c6:	1f 91       	pop	r17
    94c8:	0f 91       	pop	r16
    94ca:	ff 90       	pop	r15
    94cc:	ef 90       	pop	r14
    94ce:	08 95       	ret

000094d0 <menu_configure_brightnesss>:
	}	
	return MENU_SUCCESS;
}

void menu_configure_brightnesss(void) 
{	
    94d0:	0f 93       	push	r16
    94d2:	cf 93       	push	r28
    94d4:	df 93       	push	r29
	bool quit = false;
	
	ht1632c_set_brightness(env_var.brightness);
    94d6:	c3 ed       	ldi	r28, 0xD3	; 211
    94d8:	da e2       	ldi	r29, 0x2A	; 42
    94da:	88 81       	ld	r24, Y
    94dc:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <ht1632c_set_brightness>
	display_draw_filled_rect(0,7,env_var.brightness+1,2,1);
    94e0:	48 81       	ld	r20, Y
    94e2:	4f 5f       	subi	r20, 0xFF	; 255
    94e4:	01 e0       	ldi	r16, 0x01	; 1
    94e6:	22 e0       	ldi	r18, 0x02	; 2
    94e8:	67 e0       	ldi	r22, 0x07	; 7
    94ea:	80 e0       	ldi	r24, 0x00	; 0
    94ec:	0e 94 3b 22 	call	0x4476	; 0x4476 <display_draw_filled_rect>
	display_refresh_screen();
    94f0:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
	
	while(!quit) {
		btn_status = btn_check_press();
    94f4:	0e 94 ac 12 	call	0x2558	; 0x2558 <btn_check_press>
    94f8:	80 93 ef 2b 	sts	0x2BEF, r24

		switch(btn_status) {
    94fc:	80 91 ef 2b 	lds	r24, 0x2BEF
    9500:	82 30       	cpi	r24, 0x02	; 2
    9502:	09 f4       	brne	.+2      	; 0x9506 <menu_configure_brightnesss+0x36>
    9504:	5a c0       	rjmp	.+180    	; 0x95ba <menu_configure_brightnesss+0xea>
    9506:	18 f4       	brcc	.+6      	; 0x950e <menu_configure_brightnesss+0x3e>
    9508:	81 30       	cpi	r24, 0x01	; 1
    950a:	51 f1       	breq	.+84     	; 0x9560 <menu_configure_brightnesss+0x90>
    950c:	5c c0       	rjmp	.+184    	; 0x95c6 <menu_configure_brightnesss+0xf6>
    950e:	83 30       	cpi	r24, 0x03	; 3
    9510:	09 f4       	brne	.+2      	; 0x9514 <menu_configure_brightnesss+0x44>
    9512:	49 c0       	rjmp	.+146    	; 0x95a6 <menu_configure_brightnesss+0xd6>
    9514:	84 30       	cpi	r24, 0x04	; 4
    9516:	09 f0       	breq	.+2      	; 0x951a <menu_configure_brightnesss+0x4a>
    9518:	56 c0       	rjmp	.+172    	; 0x95c6 <menu_configure_brightnesss+0xf6>
			case BTN4:
				if (env_var.brightness < 15) {
    951a:	48 81       	ld	r20, Y
    951c:	4f 30       	cpi	r20, 0x0F	; 15
    951e:	b4 f4       	brge	.+44     	; 0x954c <menu_configure_brightnesss+0x7c>
					display_draw_filled_rect(0,7,env_var.brightness+1,2,0);
    9520:	4f 5f       	subi	r20, 0xFF	; 255
    9522:	00 e0       	ldi	r16, 0x00	; 0
    9524:	22 e0       	ldi	r18, 0x02	; 2
    9526:	67 e0       	ldi	r22, 0x07	; 7
    9528:	80 e0       	ldi	r24, 0x00	; 0
    952a:	0e 94 3b 22 	call	0x4476	; 0x4476 <display_draw_filled_rect>
					ht1632c_set_brightness(++env_var.brightness);
    952e:	88 81       	ld	r24, Y
    9530:	8f 5f       	subi	r24, 0xFF	; 255
    9532:	88 83       	st	Y, r24
    9534:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <ht1632c_set_brightness>
					display_draw_filled_rect(0,7,env_var.brightness+1,2,1);
    9538:	48 81       	ld	r20, Y
    953a:	4f 5f       	subi	r20, 0xFF	; 255
    953c:	01 e0       	ldi	r16, 0x01	; 1
    953e:	22 e0       	ldi	r18, 0x02	; 2
    9540:	67 e0       	ldi	r22, 0x07	; 7
    9542:	80 e0       	ldi	r24, 0x00	; 0
    9544:	0e 94 3b 22 	call	0x4476	; 0x4476 <display_draw_filled_rect>
					display_refresh_screen();
    9548:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    954c:	2f ef       	ldi	r18, 0xFF	; 255
    954e:	83 ec       	ldi	r24, 0xC3	; 195
    9550:	99 e0       	ldi	r25, 0x09	; 9
    9552:	21 50       	subi	r18, 0x01	; 1
    9554:	80 40       	sbci	r24, 0x00	; 0
    9556:	90 40       	sbci	r25, 0x00	; 0
    9558:	e1 f7       	brne	.-8      	; 0x9552 <menu_configure_brightnesss+0x82>
    955a:	00 c0       	rjmp	.+0      	; 0x955c <menu_configure_brightnesss+0x8c>
    955c:	00 00       	nop
    955e:	ca cf       	rjmp	.-108    	; 0x94f4 <menu_configure_brightnesss+0x24>
				}
				_delay_ms(100);
				break;
			case BTN1:
				if (env_var.brightness >= 0) {
    9560:	48 81       	ld	r20, Y
    9562:	44 23       	and	r20, r20
    9564:	b4 f0       	brlt	.+44     	; 0x9592 <menu_configure_brightnesss+0xc2>
					display_draw_filled_rect(0,7,env_var.brightness+1,2,0);
    9566:	4f 5f       	subi	r20, 0xFF	; 255
    9568:	00 e0       	ldi	r16, 0x00	; 0
    956a:	22 e0       	ldi	r18, 0x02	; 2
    956c:	67 e0       	ldi	r22, 0x07	; 7
    956e:	80 e0       	ldi	r24, 0x00	; 0
    9570:	0e 94 3b 22 	call	0x4476	; 0x4476 <display_draw_filled_rect>
					ht1632c_set_brightness(--env_var.brightness);
    9574:	88 81       	ld	r24, Y
    9576:	81 50       	subi	r24, 0x01	; 1
    9578:	88 83       	st	Y, r24
    957a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <ht1632c_set_brightness>
					display_draw_filled_rect(0,7,env_var.brightness+1,2,1);
    957e:	48 81       	ld	r20, Y
    9580:	4f 5f       	subi	r20, 0xFF	; 255
    9582:	01 e0       	ldi	r16, 0x01	; 1
    9584:	22 e0       	ldi	r18, 0x02	; 2
    9586:	67 e0       	ldi	r22, 0x07	; 7
    9588:	80 e0       	ldi	r24, 0x00	; 0
    958a:	0e 94 3b 22 	call	0x4476	; 0x4476 <display_draw_filled_rect>
					display_refresh_screen();
    958e:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    9592:	2f ef       	ldi	r18, 0xFF	; 255
    9594:	83 ec       	ldi	r24, 0xC3	; 195
    9596:	99 e0       	ldi	r25, 0x09	; 9
    9598:	21 50       	subi	r18, 0x01	; 1
    959a:	80 40       	sbci	r24, 0x00	; 0
    959c:	90 40       	sbci	r25, 0x00	; 0
    959e:	e1 f7       	brne	.-8      	; 0x9598 <menu_configure_brightnesss+0xc8>
    95a0:	00 c0       	rjmp	.+0      	; 0x95a2 <menu_configure_brightnesss+0xd2>
    95a2:	00 00       	nop
    95a4:	a7 cf       	rjmp	.-178    	; 0x94f4 <menu_configure_brightnesss+0x24>
				}
				_delay_ms(100);
				break;
			case BTN3:
				display_slide_out_to_bottom();
    95a6:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("BRIGHTNESS IS SET",false);
    95aa:	60 e0       	ldi	r22, 0x00	; 0
    95ac:	87 e6       	ldi	r24, 0x67	; 103
    95ae:	97 e2       	ldi	r25, 0x27	; 39
    95b0:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
				quit = true;
				EEPROM_WriteEnv();
    95b4:	0e 94 4f 09 	call	0x129e	; 0x129e <EEPROM_WriteEnv>
    95b8:	12 c0       	rjmp	.+36     	; 0x95de <menu_configure_brightnesss+0x10e>
				break;
			case BTN2:
#ifdef SHOW_MANUAL
				display_print_scrolling_text("EXIT",false);
    95ba:	60 e0       	ldi	r22, 0x00	; 0
    95bc:	89 e7       	ldi	r24, 0x79	; 121
    95be:	97 e2       	ldi	r25, 0x27	; 39
    95c0:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
				return;
    95c4:	0c c0       	rjmp	.+24     	; 0x95de <menu_configure_brightnesss+0x10e>
    95c6:	2f ef       	ldi	r18, 0xFF	; 255
    95c8:	83 ec       	ldi	r24, 0xC3	; 195
    95ca:	99 e0       	ldi	r25, 0x09	; 9
    95cc:	21 50       	subi	r18, 0x01	; 1
    95ce:	80 40       	sbci	r24, 0x00	; 0
    95d0:	90 40       	sbci	r25, 0x00	; 0
    95d2:	e1 f7       	brne	.-8      	; 0x95cc <menu_configure_brightnesss+0xfc>
    95d4:	00 c0       	rjmp	.+0      	; 0x95d6 <menu_configure_brightnesss+0x106>
    95d6:	00 00       	nop
			default:
				_delay_ms(100);
				btn_status = NO_BTN;
    95d8:	10 92 ef 2b 	sts	0x2BEF, r1
				break;
    95dc:	8b cf       	rjmp	.-234    	; 0x94f4 <menu_configure_brightnesss+0x24>
		}
	}
}
    95de:	df 91       	pop	r29
    95e0:	cf 91       	pop	r28
    95e2:	0f 91       	pop	r16
    95e4:	08 95       	ret

000095e6 <menu_set_time>:

uint8_t menu_set_time(void) 
{	
    95e6:	2f 92       	push	r2
    95e8:	3f 92       	push	r3
    95ea:	4f 92       	push	r4
    95ec:	5f 92       	push	r5
    95ee:	6f 92       	push	r6
    95f0:	7f 92       	push	r7
    95f2:	8f 92       	push	r8
    95f4:	9f 92       	push	r9
    95f6:	af 92       	push	r10
    95f8:	bf 92       	push	r11
    95fa:	cf 92       	push	r12
    95fc:	df 92       	push	r13
    95fe:	ef 92       	push	r14
    9600:	ff 92       	push	r15
    9602:	0f 93       	push	r16
    9604:	1f 93       	push	r17
    9606:	cf 93       	push	r28
    9608:	df 93       	push	r29
    960a:	00 d0       	rcall	.+0      	; 0x960c <menu_set_time+0x26>
    960c:	1f 92       	push	r1
    960e:	cd b7       	in	r28, 0x3d	; 61
    9610:	de b7       	in	r29, 0x3e	; 62
	bool next = false;
	char buffer[3];
	
	display_draw_three_letter_word("GMT");
    9612:	8e e7       	ldi	r24, 0x7E	; 126
    9614:	97 e2       	ldi	r25, 0x27	; 39
    9616:	0e 94 b9 24 	call	0x4972	; 0x4972 <display_draw_three_letter_word>
	display_slide_in_from_right();
    961a:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    961e:	2f ef       	ldi	r18, 0xFF	; 255
    9620:	37 ea       	ldi	r19, 0xA7	; 167
    9622:	41 e6       	ldi	r20, 0x61	; 97
    9624:	21 50       	subi	r18, 0x01	; 1
    9626:	30 40       	sbci	r19, 0x00	; 0
    9628:	40 40       	sbci	r20, 0x00	; 0
    962a:	e1 f7       	brne	.-8      	; 0x9624 <menu_set_time+0x3e>
    962c:	00 c0       	rjmp	.+0      	; 0x962e <menu_set_time+0x48>
    962e:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    9630:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	itoa_simple(buffer,env_var.time.timezone);
    9634:	20 91 8d 2a 	lds	r18, 0x2A8D
    9638:	82 2f       	mov	r24, r18
    963a:	99 27       	eor	r25, r25
    963c:	87 fd       	sbrc	r24, 7
    963e:	90 95       	com	r25
    9640:	a9 2f       	mov	r26, r25
    9642:	b9 2f       	mov	r27, r25
static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;

	if( num < 0 ) {
    9644:	bb 23       	and	r27, r27
    9646:	34 f0       	brlt	.+12     	; 0x9654 <menu_set_time+0x6e>
}

static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    9648:	bc 01       	movw	r22, r24
    964a:	cd 01       	movw	r24, r26
    964c:	fe 01       	movw	r30, r28
    964e:	31 96       	adiw	r30, 0x01	; 1
    9650:	5f 01       	movw	r10, r30
    9652:	0f c0       	rjmp	.+30     	; 0x9672 <menu_set_time+0x8c>

	if( num < 0 ) {
		 // forget about the sign, don't reverse it later
		n = -num;
    9654:	9c 01       	movw	r18, r24
    9656:	ad 01       	movw	r20, r26
    9658:	66 27       	eor	r22, r22
    965a:	77 27       	eor	r23, r23
    965c:	cb 01       	movw	r24, r22
    965e:	62 1b       	sub	r22, r18
    9660:	73 0b       	sbc	r23, r19
    9662:	84 0b       	sbc	r24, r20
    9664:	95 0b       	sbc	r25, r21
		*s++ = '-';
    9666:	2d e2       	ldi	r18, 0x2D	; 45
    9668:	29 83       	std	Y+1, r18	; 0x01
    966a:	5e 01       	movw	r10, r28
    966c:	32 e0       	ldi	r19, 0x02	; 2
    966e:	a3 0e       	add	r10, r19
    9670:	b1 1c       	adc	r11, r1
    9672:	8a 2c       	mov	r8, r10
    9674:	9b 2c       	mov	r9, r11
    9676:	85 01       	movw	r16, r10
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    9678:	0f 2e       	mov	r0, r31
    967a:	fa e0       	ldi	r31, 0x0A	; 10
    967c:	4f 2e       	mov	r4, r31
    967e:	51 2c       	mov	r5, r1
    9680:	61 2c       	mov	r6, r1
    9682:	71 2c       	mov	r7, r1
    9684:	f0 2d       	mov	r31, r0
    9686:	78 01       	movw	r14, r16
    9688:	4f ef       	ldi	r20, 0xFF	; 255
    968a:	e4 1a       	sub	r14, r20
    968c:	f4 0a       	sbc	r15, r20
    968e:	67 01       	movw	r12, r14
    9690:	a3 01       	movw	r20, r6
    9692:	92 01       	movw	r18, r4
    9694:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>
    9698:	60 5d       	subi	r22, 0xD0	; 208
    969a:	f8 01       	movw	r30, r16
    969c:	60 83       	st	Z, r22
	} while ((n /= 10) > 0);     /* delete it */
    969e:	62 2f       	mov	r22, r18
    96a0:	73 2f       	mov	r23, r19
    96a2:	84 2f       	mov	r24, r20
    96a4:	95 2f       	mov	r25, r21
    96a6:	61 15       	cp	r22, r1
    96a8:	71 05       	cpc	r23, r1
    96aa:	81 05       	cpc	r24, r1
    96ac:	91 05       	cpc	r25, r1
    96ae:	11 f0       	breq	.+4      	; 0x96b4 <menu_set_time+0xce>
    96b0:	87 01       	movw	r16, r14
    96b2:	e9 cf       	rjmp	.-46     	; 0x9686 <menu_set_time+0xa0>

	reverse_string( rev, s - rev);
    96b4:	ca 18       	sub	r12, r10
    96b6:	db 08       	sbc	r13, r11
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    96b8:	c6 01       	movw	r24, r12
    96ba:	01 97       	sbiw	r24, 0x01	; 1
    96bc:	18 16       	cp	r1, r24
    96be:	19 06       	cpc	r1, r25
    96c0:	8c f4       	brge	.+34     	; 0x96e4 <menu_set_time+0xfe>
    96c2:	d5 01       	movw	r26, r10
    96c4:	ac 0d       	add	r26, r12
    96c6:	bd 1d       	adc	r27, r13
    96c8:	e8 2d       	mov	r30, r8
    96ca:	f9 2d       	mov	r31, r9
    96cc:	20 e0       	ldi	r18, 0x00	; 0
    96ce:	30 e0       	ldi	r19, 0x00	; 0
		c = s[i];
    96d0:	40 81       	ld	r20, Z
		s[i] = s[j];
    96d2:	5e 91       	ld	r21, -X
    96d4:	51 93       	st	Z+, r21
		s[j] = c;
    96d6:	4c 93       	st	X, r20
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    96d8:	2f 5f       	subi	r18, 0xFF	; 255
    96da:	3f 4f       	sbci	r19, 0xFF	; 255
    96dc:	01 97       	sbiw	r24, 0x01	; 1
    96de:	28 17       	cp	r18, r24
    96e0:	39 07       	cpc	r19, r25
    96e2:	b4 f3       	brlt	.-20     	; 0x96d0 <menu_set_time+0xea>
	display_draw_small_char(3,10,'G',1,1);
    96e4:	01 e0       	ldi	r16, 0x01	; 1
    96e6:	21 e0       	ldi	r18, 0x01	; 1
    96e8:	30 e0       	ldi	r19, 0x00	; 0
    96ea:	47 e4       	ldi	r20, 0x47	; 71
    96ec:	6a e0       	ldi	r22, 0x0A	; 10
    96ee:	70 e0       	ldi	r23, 0x00	; 0
    96f0:	83 e0       	ldi	r24, 0x03	; 3
    96f2:	90 e0       	ldi	r25, 0x00	; 0
    96f4:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(7,10,'M',1,1);
    96f8:	21 e0       	ldi	r18, 0x01	; 1
    96fa:	30 e0       	ldi	r19, 0x00	; 0
    96fc:	4d e4       	ldi	r20, 0x4D	; 77
    96fe:	6a e0       	ldi	r22, 0x0A	; 10
    9700:	70 e0       	ldi	r23, 0x00	; 0
    9702:	87 e0       	ldi	r24, 0x07	; 7
    9704:	90 e0       	ldi	r25, 0x00	; 0
    9706:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_draw_small_char(11,10,'T',1,1);
    970a:	21 e0       	ldi	r18, 0x01	; 1
    970c:	30 e0       	ldi	r19, 0x00	; 0
    970e:	44 e5       	ldi	r20, 0x54	; 84
    9710:	6a e0       	ldi	r22, 0x0A	; 10
    9712:	70 e0       	ldi	r23, 0x00	; 0
    9714:	8b e0       	ldi	r24, 0x0B	; 11
    9716:	90 e0       	ldi	r25, 0x00	; 0
    9718:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	if (env_var.time.timezone > 0) {
    971c:	80 91 8d 2a 	lds	r24, 0x2A8D
    9720:	18 16       	cp	r1, r24
    9722:	54 f4       	brge	.+20     	; 0x9738 <menu_set_time+0x152>
		display_draw_small_char(5,3,'+',1,1);
    9724:	21 e0       	ldi	r18, 0x01	; 1
    9726:	30 e0       	ldi	r19, 0x00	; 0
    9728:	4b e2       	ldi	r20, 0x2B	; 43
    972a:	63 e0       	ldi	r22, 0x03	; 3
    972c:	70 e0       	ldi	r23, 0x00	; 0
    972e:	85 e0       	ldi	r24, 0x05	; 5
    9730:	90 e0       	ldi	r25, 0x00	; 0
    9732:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
    9736:	0c c0       	rjmp	.+24     	; 0x9750 <menu_set_time+0x16a>
		} else if (env_var.time.timezone < 0) {
    9738:	88 23       	and	r24, r24
    973a:	54 f4       	brge	.+20     	; 0x9750 <menu_set_time+0x16a>
		display_draw_small_char(5,3,'-',1,1);
    973c:	01 e0       	ldi	r16, 0x01	; 1
    973e:	21 e0       	ldi	r18, 0x01	; 1
    9740:	30 e0       	ldi	r19, 0x00	; 0
    9742:	4d e2       	ldi	r20, 0x2D	; 45
    9744:	63 e0       	ldi	r22, 0x03	; 3
    9746:	70 e0       	ldi	r23, 0x00	; 0
    9748:	85 e0       	ldi	r24, 0x05	; 5
    974a:	90 e0       	ldi	r25, 0x00	; 0
    974c:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	}
	display_draw_small_char(9,3,buffer[0],1,1);
    9750:	01 e0       	ldi	r16, 0x01	; 1
    9752:	21 e0       	ldi	r18, 0x01	; 1
    9754:	30 e0       	ldi	r19, 0x00	; 0
    9756:	49 81       	ldd	r20, Y+1	; 0x01
    9758:	63 e0       	ldi	r22, 0x03	; 3
    975a:	70 e0       	ldi	r23, 0x00	; 0
    975c:	89 e0       	ldi	r24, 0x09	; 9
    975e:	90 e0       	ldi	r25, 0x00	; 0
    9760:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
	display_slide_in_from_right();
    9764:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
	
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
			case BTN4:
				if (env_var.time.timezone < 9) {
    9768:	0f 2e       	mov	r0, r31
    976a:	fd e8       	ldi	r31, 0x8D	; 141
    976c:	6f 2e       	mov	r6, r31
    976e:	fa e2       	ldi	r31, 0x2A	; 42
    9770:	7f 2e       	mov	r7, r31
    9772:	f0 2d       	mov	r31, r0
		*s++ = '-';
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    9774:	0f 2e       	mov	r0, r31
    9776:	fa e0       	ldi	r31, 0x0A	; 10
    9778:	cf 2e       	mov	r12, r31
    977a:	d1 2c       	mov	r13, r1
    977c:	e1 2c       	mov	r14, r1
    977e:	f1 2c       	mov	r15, r1
    9780:	f0 2d       	mov	r31, r0
	display_draw_small_char(9,3,buffer[0],1,1);
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	while(!next) {
		btn_status = btn_check_press();
    9782:	0e 94 ac 12 	call	0x2558	; 0x2558 <btn_check_press>
    9786:	80 93 ef 2b 	sts	0x2BEF, r24
		switch(btn_status) {
    978a:	80 91 ef 2b 	lds	r24, 0x2BEF
    978e:	82 30       	cpi	r24, 0x02	; 2
    9790:	09 f4       	brne	.+2      	; 0x9794 <menu_set_time+0x1ae>
    9792:	a0 c1       	rjmp	.+832    	; 0x9ad4 <menu_set_time+0x4ee>
    9794:	20 f4       	brcc	.+8      	; 0x979e <menu_set_time+0x1b8>
    9796:	81 30       	cpi	r24, 0x01	; 1
    9798:	09 f4       	brne	.+2      	; 0x979c <menu_set_time+0x1b6>
    979a:	c1 c0       	rjmp	.+386    	; 0x991e <menu_set_time+0x338>
    979c:	a4 c1       	rjmp	.+840    	; 0x9ae6 <menu_set_time+0x500>
    979e:	83 30       	cpi	r24, 0x03	; 3
    97a0:	09 f4       	brne	.+2      	; 0x97a4 <menu_set_time+0x1be>
    97a2:	77 c1       	rjmp	.+750    	; 0x9a92 <menu_set_time+0x4ac>
    97a4:	84 30       	cpi	r24, 0x04	; 4
    97a6:	09 f0       	breq	.+2      	; 0x97aa <menu_set_time+0x1c4>
    97a8:	9e c1       	rjmp	.+828    	; 0x9ae6 <menu_set_time+0x500>
			case BTN4:
				if (env_var.time.timezone < 9) {
    97aa:	f3 01       	movw	r30, r6
    97ac:	80 81       	ld	r24, Z
    97ae:	89 30       	cpi	r24, 0x09	; 9
    97b0:	0c f0       	brlt	.+2      	; 0x97b4 <menu_set_time+0x1ce>
    97b2:	ab c0       	rjmp	.+342    	; 0x990a <menu_set_time+0x324>
					display_clear_screen();
    97b4:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
					env_var.time.timezone++;
    97b8:	f3 01       	movw	r30, r6
    97ba:	20 81       	ld	r18, Z
    97bc:	2f 5f       	subi	r18, 0xFF	; 255
    97be:	20 83       	st	Z, r18
					itoa_simple(buffer,env_var.time.timezone);
    97c0:	82 2f       	mov	r24, r18
    97c2:	99 27       	eor	r25, r25
    97c4:	87 fd       	sbrc	r24, 7
    97c6:	90 95       	com	r25
    97c8:	a9 2f       	mov	r26, r25
    97ca:	b9 2f       	mov	r27, r25
static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;

	if( num < 0 ) {
    97cc:	bb 23       	and	r27, r27
    97ce:	3c f0       	brlt	.+14     	; 0x97de <menu_set_time+0x1f8>
}

static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    97d0:	bc 01       	movw	r22, r24
    97d2:	cd 01       	movw	r24, r26
    97d4:	9e 01       	movw	r18, r28
    97d6:	2f 5f       	subi	r18, 0xFF	; 255
    97d8:	3f 4f       	sbci	r19, 0xFF	; 255
    97da:	29 01       	movw	r4, r18
    97dc:	0f c0       	rjmp	.+30     	; 0x97fc <menu_set_time+0x216>

	if( num < 0 ) {
		 // forget about the sign, don't reverse it later
		n = -num;
    97de:	9c 01       	movw	r18, r24
    97e0:	ad 01       	movw	r20, r26
    97e2:	66 27       	eor	r22, r22
    97e4:	77 27       	eor	r23, r23
    97e6:	cb 01       	movw	r24, r22
    97e8:	62 1b       	sub	r22, r18
    97ea:	73 0b       	sbc	r23, r19
    97ec:	84 0b       	sbc	r24, r20
    97ee:	95 0b       	sbc	r25, r21
		*s++ = '-';
    97f0:	2d e2       	ldi	r18, 0x2D	; 45
    97f2:	29 83       	std	Y+1, r18	; 0x01
    97f4:	ae 01       	movw	r20, r28
    97f6:	4e 5f       	subi	r20, 0xFE	; 254
    97f8:	5f 4f       	sbci	r21, 0xFF	; 255
    97fa:	2a 01       	movw	r4, r20
    97fc:	24 2c       	mov	r2, r4
    97fe:	35 2c       	mov	r3, r5
    9800:	82 01       	movw	r16, r4
    9802:	58 01       	movw	r10, r16
    9804:	5f ef       	ldi	r21, 0xFF	; 255
    9806:	a5 1a       	sub	r10, r21
    9808:	b5 0a       	sbc	r11, r21
    980a:	45 01       	movw	r8, r10
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    980c:	a7 01       	movw	r20, r14
    980e:	96 01       	movw	r18, r12
    9810:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>
    9814:	60 5d       	subi	r22, 0xD0	; 208
    9816:	f8 01       	movw	r30, r16
    9818:	60 83       	st	Z, r22
	} while ((n /= 10) > 0);     /* delete it */
    981a:	62 2f       	mov	r22, r18
    981c:	73 2f       	mov	r23, r19
    981e:	84 2f       	mov	r24, r20
    9820:	95 2f       	mov	r25, r21
    9822:	61 15       	cp	r22, r1
    9824:	71 05       	cpc	r23, r1
    9826:	81 05       	cpc	r24, r1
    9828:	91 05       	cpc	r25, r1
    982a:	11 f0       	breq	.+4      	; 0x9830 <menu_set_time+0x24a>
    982c:	85 01       	movw	r16, r10
    982e:	e9 cf       	rjmp	.-46     	; 0x9802 <menu_set_time+0x21c>

	reverse_string( rev, s - rev);
    9830:	84 18       	sub	r8, r4
    9832:	95 08       	sbc	r9, r5
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    9834:	c4 01       	movw	r24, r8
    9836:	01 97       	sbiw	r24, 0x01	; 1
    9838:	18 16       	cp	r1, r24
    983a:	19 06       	cpc	r1, r25
    983c:	8c f4       	brge	.+34     	; 0x9860 <menu_set_time+0x27a>
    983e:	d2 01       	movw	r26, r4
    9840:	a8 0d       	add	r26, r8
    9842:	b9 1d       	adc	r27, r9
    9844:	e2 2d       	mov	r30, r2
    9846:	f3 2d       	mov	r31, r3
    9848:	20 e0       	ldi	r18, 0x00	; 0
    984a:	30 e0       	ldi	r19, 0x00	; 0
		c = s[i];
    984c:	40 81       	ld	r20, Z
		s[i] = s[j];
    984e:	5e 91       	ld	r21, -X
    9850:	51 93       	st	Z+, r21
		s[j] = c;
    9852:	4c 93       	st	X, r20
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    9854:	2f 5f       	subi	r18, 0xFF	; 255
    9856:	3f 4f       	sbci	r19, 0xFF	; 255
    9858:	01 97       	sbiw	r24, 0x01	; 1
    985a:	28 17       	cp	r18, r24
    985c:	39 07       	cpc	r19, r25
    985e:	b4 f3       	brlt	.-20     	; 0x984c <menu_set_time+0x266>
					display_draw_small_char(3,10,'G',1,1);
    9860:	01 e0       	ldi	r16, 0x01	; 1
    9862:	21 e0       	ldi	r18, 0x01	; 1
    9864:	30 e0       	ldi	r19, 0x00	; 0
    9866:	47 e4       	ldi	r20, 0x47	; 71
    9868:	6a e0       	ldi	r22, 0x0A	; 10
    986a:	70 e0       	ldi	r23, 0x00	; 0
    986c:	83 e0       	ldi	r24, 0x03	; 3
    986e:	90 e0       	ldi	r25, 0x00	; 0
    9870:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
					display_draw_small_char(7,10,'M',1,1);
    9874:	21 e0       	ldi	r18, 0x01	; 1
    9876:	30 e0       	ldi	r19, 0x00	; 0
    9878:	4d e4       	ldi	r20, 0x4D	; 77
    987a:	6a e0       	ldi	r22, 0x0A	; 10
    987c:	70 e0       	ldi	r23, 0x00	; 0
    987e:	87 e0       	ldi	r24, 0x07	; 7
    9880:	90 e0       	ldi	r25, 0x00	; 0
    9882:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
					display_draw_small_char(11,10,'T',1,1);
    9886:	21 e0       	ldi	r18, 0x01	; 1
    9888:	30 e0       	ldi	r19, 0x00	; 0
    988a:	44 e5       	ldi	r20, 0x54	; 84
    988c:	6a e0       	ldi	r22, 0x0A	; 10
    988e:	70 e0       	ldi	r23, 0x00	; 0
    9890:	8b e0       	ldi	r24, 0x0B	; 11
    9892:	90 e0       	ldi	r25, 0x00	; 0
    9894:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
					if (env_var.time.timezone > 0) {
    9898:	f3 01       	movw	r30, r6
    989a:	80 81       	ld	r24, Z
    989c:	18 16       	cp	r1, r24
    989e:	9c f4       	brge	.+38     	; 0x98c6 <menu_set_time+0x2e0>
						display_draw_small_char(5,3,'+',1,1);
    98a0:	21 e0       	ldi	r18, 0x01	; 1
    98a2:	30 e0       	ldi	r19, 0x00	; 0
    98a4:	4b e2       	ldi	r20, 0x2B	; 43
    98a6:	63 e0       	ldi	r22, 0x03	; 3
    98a8:	70 e0       	ldi	r23, 0x00	; 0
    98aa:	85 e0       	ldi	r24, 0x05	; 5
    98ac:	90 e0       	ldi	r25, 0x00	; 0
    98ae:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
						display_draw_small_char(9,3,buffer[0],1,1);
    98b2:	21 e0       	ldi	r18, 0x01	; 1
    98b4:	30 e0       	ldi	r19, 0x00	; 0
    98b6:	49 81       	ldd	r20, Y+1	; 0x01
    98b8:	63 e0       	ldi	r22, 0x03	; 3
    98ba:	70 e0       	ldi	r23, 0x00	; 0
    98bc:	89 e0       	ldi	r24, 0x09	; 9
    98be:	90 e0       	ldi	r25, 0x00	; 0
    98c0:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
    98c4:	20 c0       	rjmp	.+64     	; 0x9906 <menu_set_time+0x320>
					} else if (env_var.time.timezone < 0) {
    98c6:	88 23       	and	r24, r24
    98c8:	a4 f4       	brge	.+40     	; 0x98f2 <menu_set_time+0x30c>
						display_draw_small_char(5,3,'-',1,1);
    98ca:	01 e0       	ldi	r16, 0x01	; 1
    98cc:	21 e0       	ldi	r18, 0x01	; 1
    98ce:	30 e0       	ldi	r19, 0x00	; 0
    98d0:	4d e2       	ldi	r20, 0x2D	; 45
    98d2:	63 e0       	ldi	r22, 0x03	; 3
    98d4:	70 e0       	ldi	r23, 0x00	; 0
    98d6:	85 e0       	ldi	r24, 0x05	; 5
    98d8:	90 e0       	ldi	r25, 0x00	; 0
    98da:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
						display_draw_small_char(9,3,buffer[1],1,1);
    98de:	21 e0       	ldi	r18, 0x01	; 1
    98e0:	30 e0       	ldi	r19, 0x00	; 0
    98e2:	4a 81       	ldd	r20, Y+2	; 0x02
    98e4:	63 e0       	ldi	r22, 0x03	; 3
    98e6:	70 e0       	ldi	r23, 0x00	; 0
    98e8:	89 e0       	ldi	r24, 0x09	; 9
    98ea:	90 e0       	ldi	r25, 0x00	; 0
    98ec:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
    98f0:	0a c0       	rjmp	.+20     	; 0x9906 <menu_set_time+0x320>
					} else {
						display_draw_small_char(8,3,'0',1,1);
    98f2:	01 e0       	ldi	r16, 0x01	; 1
    98f4:	21 e0       	ldi	r18, 0x01	; 1
    98f6:	30 e0       	ldi	r19, 0x00	; 0
    98f8:	40 e3       	ldi	r20, 0x30	; 48
    98fa:	63 e0       	ldi	r22, 0x03	; 3
    98fc:	70 e0       	ldi	r23, 0x00	; 0
    98fe:	88 e0       	ldi	r24, 0x08	; 8
    9900:	90 e0       	ldi	r25, 0x00	; 0
    9902:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
					}
					display_refresh_screen();
    9906:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    990a:	ff ef       	ldi	r31, 0xFF	; 255
    990c:	29 e6       	ldi	r18, 0x69	; 105
    990e:	38 e1       	ldi	r19, 0x18	; 24
    9910:	f1 50       	subi	r31, 0x01	; 1
    9912:	20 40       	sbci	r18, 0x00	; 0
    9914:	30 40       	sbci	r19, 0x00	; 0
    9916:	e1 f7       	brne	.-8      	; 0x9910 <menu_set_time+0x32a>
    9918:	00 c0       	rjmp	.+0      	; 0x991a <menu_set_time+0x334>
    991a:	00 00       	nop
    991c:	32 cf       	rjmp	.-412    	; 0x9782 <menu_set_time+0x19c>
				}
				_delay_ms(250);
				break;
			case BTN1:
				if (env_var.time.timezone > -9) {
    991e:	f3 01       	movw	r30, r6
    9920:	80 81       	ld	r24, Z
    9922:	88 3f       	cpi	r24, 0xF8	; 248
    9924:	0c f4       	brge	.+2      	; 0x9928 <menu_set_time+0x342>
    9926:	ab c0       	rjmp	.+342    	; 0x9a7e <menu_set_time+0x498>
					display_clear_screen();
    9928:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
					env_var.time.timezone--;
    992c:	f3 01       	movw	r30, r6
    992e:	20 81       	ld	r18, Z
    9930:	21 50       	subi	r18, 0x01	; 1
    9932:	20 83       	st	Z, r18
					itoa_simple(buffer,env_var.time.timezone);
    9934:	82 2f       	mov	r24, r18
    9936:	99 27       	eor	r25, r25
    9938:	87 fd       	sbrc	r24, 7
    993a:	90 95       	com	r25
    993c:	a9 2f       	mov	r26, r25
    993e:	b9 2f       	mov	r27, r25
static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;

	if( num < 0 ) {
    9940:	bb 23       	and	r27, r27
    9942:	3c f0       	brlt	.+14     	; 0x9952 <menu_set_time+0x36c>
}

static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    9944:	bc 01       	movw	r22, r24
    9946:	cd 01       	movw	r24, r26
    9948:	9e 01       	movw	r18, r28
    994a:	2f 5f       	subi	r18, 0xFF	; 255
    994c:	3f 4f       	sbci	r19, 0xFF	; 255
    994e:	29 01       	movw	r4, r18
    9950:	0f c0       	rjmp	.+30     	; 0x9970 <menu_set_time+0x38a>

	if( num < 0 ) {
		 // forget about the sign, don't reverse it later
		n = -num;
    9952:	9c 01       	movw	r18, r24
    9954:	ad 01       	movw	r20, r26
    9956:	66 27       	eor	r22, r22
    9958:	77 27       	eor	r23, r23
    995a:	cb 01       	movw	r24, r22
    995c:	62 1b       	sub	r22, r18
    995e:	73 0b       	sbc	r23, r19
    9960:	84 0b       	sbc	r24, r20
    9962:	95 0b       	sbc	r25, r21
		*s++ = '-';
    9964:	2d e2       	ldi	r18, 0x2D	; 45
    9966:	29 83       	std	Y+1, r18	; 0x01
    9968:	ae 01       	movw	r20, r28
    996a:	4e 5f       	subi	r20, 0xFE	; 254
    996c:	5f 4f       	sbci	r21, 0xFF	; 255
    996e:	2a 01       	movw	r4, r20
    9970:	24 2c       	mov	r2, r4
    9972:	35 2c       	mov	r3, r5
    9974:	82 01       	movw	r16, r4
    9976:	58 01       	movw	r10, r16
    9978:	5f ef       	ldi	r21, 0xFF	; 255
    997a:	a5 1a       	sub	r10, r21
    997c:	b5 0a       	sbc	r11, r21
    997e:	45 01       	movw	r8, r10
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    9980:	a7 01       	movw	r20, r14
    9982:	96 01       	movw	r18, r12
    9984:	0e 94 1f 56 	call	0xac3e	; 0xac3e <__udivmodsi4>
    9988:	60 5d       	subi	r22, 0xD0	; 208
    998a:	f8 01       	movw	r30, r16
    998c:	60 83       	st	Z, r22
	} while ((n /= 10) > 0);     /* delete it */
    998e:	62 2f       	mov	r22, r18
    9990:	73 2f       	mov	r23, r19
    9992:	84 2f       	mov	r24, r20
    9994:	95 2f       	mov	r25, r21
    9996:	61 15       	cp	r22, r1
    9998:	71 05       	cpc	r23, r1
    999a:	81 05       	cpc	r24, r1
    999c:	91 05       	cpc	r25, r1
    999e:	11 f0       	breq	.+4      	; 0x99a4 <menu_set_time+0x3be>
    99a0:	85 01       	movw	r16, r10
    99a2:	e9 cf       	rjmp	.-46     	; 0x9976 <menu_set_time+0x390>

	reverse_string( rev, s - rev);
    99a4:	84 18       	sub	r8, r4
    99a6:	95 08       	sbc	r9, r5
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    99a8:	c4 01       	movw	r24, r8
    99aa:	01 97       	sbiw	r24, 0x01	; 1
    99ac:	18 16       	cp	r1, r24
    99ae:	19 06       	cpc	r1, r25
    99b0:	8c f4       	brge	.+34     	; 0x99d4 <menu_set_time+0x3ee>
    99b2:	d2 01       	movw	r26, r4
    99b4:	a8 0d       	add	r26, r8
    99b6:	b9 1d       	adc	r27, r9
    99b8:	e2 2d       	mov	r30, r2
    99ba:	f3 2d       	mov	r31, r3
    99bc:	20 e0       	ldi	r18, 0x00	; 0
    99be:	30 e0       	ldi	r19, 0x00	; 0
		c = s[i];
    99c0:	40 81       	ld	r20, Z
		s[i] = s[j];
    99c2:	5e 91       	ld	r21, -X
    99c4:	51 93       	st	Z+, r21
		s[j] = c;
    99c6:	4c 93       	st	X, r20
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    99c8:	2f 5f       	subi	r18, 0xFF	; 255
    99ca:	3f 4f       	sbci	r19, 0xFF	; 255
    99cc:	01 97       	sbiw	r24, 0x01	; 1
    99ce:	28 17       	cp	r18, r24
    99d0:	39 07       	cpc	r19, r25
    99d2:	b4 f3       	brlt	.-20     	; 0x99c0 <menu_set_time+0x3da>
					display_draw_small_char(3,10,'G',1,1);
    99d4:	01 e0       	ldi	r16, 0x01	; 1
    99d6:	21 e0       	ldi	r18, 0x01	; 1
    99d8:	30 e0       	ldi	r19, 0x00	; 0
    99da:	47 e4       	ldi	r20, 0x47	; 71
    99dc:	6a e0       	ldi	r22, 0x0A	; 10
    99de:	70 e0       	ldi	r23, 0x00	; 0
    99e0:	83 e0       	ldi	r24, 0x03	; 3
    99e2:	90 e0       	ldi	r25, 0x00	; 0
    99e4:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
					display_draw_small_char(7,10,'M',1,1);
    99e8:	21 e0       	ldi	r18, 0x01	; 1
    99ea:	30 e0       	ldi	r19, 0x00	; 0
    99ec:	4d e4       	ldi	r20, 0x4D	; 77
    99ee:	6a e0       	ldi	r22, 0x0A	; 10
    99f0:	70 e0       	ldi	r23, 0x00	; 0
    99f2:	87 e0       	ldi	r24, 0x07	; 7
    99f4:	90 e0       	ldi	r25, 0x00	; 0
    99f6:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
					display_draw_small_char(11,10,'T',1,1);
    99fa:	21 e0       	ldi	r18, 0x01	; 1
    99fc:	30 e0       	ldi	r19, 0x00	; 0
    99fe:	44 e5       	ldi	r20, 0x54	; 84
    9a00:	6a e0       	ldi	r22, 0x0A	; 10
    9a02:	70 e0       	ldi	r23, 0x00	; 0
    9a04:	8b e0       	ldi	r24, 0x0B	; 11
    9a06:	90 e0       	ldi	r25, 0x00	; 0
    9a08:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
					if (env_var.time.timezone > 0) {
    9a0c:	f3 01       	movw	r30, r6
    9a0e:	80 81       	ld	r24, Z
    9a10:	18 16       	cp	r1, r24
    9a12:	9c f4       	brge	.+38     	; 0x9a3a <menu_set_time+0x454>
						display_draw_small_char(5,3,'+',1,1);
    9a14:	21 e0       	ldi	r18, 0x01	; 1
    9a16:	30 e0       	ldi	r19, 0x00	; 0
    9a18:	4b e2       	ldi	r20, 0x2B	; 43
    9a1a:	63 e0       	ldi	r22, 0x03	; 3
    9a1c:	70 e0       	ldi	r23, 0x00	; 0
    9a1e:	85 e0       	ldi	r24, 0x05	; 5
    9a20:	90 e0       	ldi	r25, 0x00	; 0
    9a22:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
						display_draw_small_char(9,3,buffer[0],1,1);
    9a26:	21 e0       	ldi	r18, 0x01	; 1
    9a28:	30 e0       	ldi	r19, 0x00	; 0
    9a2a:	49 81       	ldd	r20, Y+1	; 0x01
    9a2c:	63 e0       	ldi	r22, 0x03	; 3
    9a2e:	70 e0       	ldi	r23, 0x00	; 0
    9a30:	89 e0       	ldi	r24, 0x09	; 9
    9a32:	90 e0       	ldi	r25, 0x00	; 0
    9a34:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
    9a38:	20 c0       	rjmp	.+64     	; 0x9a7a <menu_set_time+0x494>
					} else if (env_var.time.timezone < 0) {
    9a3a:	88 23       	and	r24, r24
    9a3c:	a4 f4       	brge	.+40     	; 0x9a66 <menu_set_time+0x480>
						display_draw_small_char(5,3,'-',1,1);
    9a3e:	01 e0       	ldi	r16, 0x01	; 1
    9a40:	21 e0       	ldi	r18, 0x01	; 1
    9a42:	30 e0       	ldi	r19, 0x00	; 0
    9a44:	4d e2       	ldi	r20, 0x2D	; 45
    9a46:	63 e0       	ldi	r22, 0x03	; 3
    9a48:	70 e0       	ldi	r23, 0x00	; 0
    9a4a:	85 e0       	ldi	r24, 0x05	; 5
    9a4c:	90 e0       	ldi	r25, 0x00	; 0
    9a4e:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
						display_draw_small_char(9,3,buffer[1],1,1);
    9a52:	21 e0       	ldi	r18, 0x01	; 1
    9a54:	30 e0       	ldi	r19, 0x00	; 0
    9a56:	4a 81       	ldd	r20, Y+2	; 0x02
    9a58:	63 e0       	ldi	r22, 0x03	; 3
    9a5a:	70 e0       	ldi	r23, 0x00	; 0
    9a5c:	89 e0       	ldi	r24, 0x09	; 9
    9a5e:	90 e0       	ldi	r25, 0x00	; 0
    9a60:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
    9a64:	0a c0       	rjmp	.+20     	; 0x9a7a <menu_set_time+0x494>
					} else {
						display_draw_small_char(8,3,'0',1,1);
    9a66:	01 e0       	ldi	r16, 0x01	; 1
    9a68:	21 e0       	ldi	r18, 0x01	; 1
    9a6a:	30 e0       	ldi	r19, 0x00	; 0
    9a6c:	40 e3       	ldi	r20, 0x30	; 48
    9a6e:	63 e0       	ldi	r22, 0x03	; 3
    9a70:	70 e0       	ldi	r23, 0x00	; 0
    9a72:	88 e0       	ldi	r24, 0x08	; 8
    9a74:	90 e0       	ldi	r25, 0x00	; 0
    9a76:	0e 94 0e 24 	call	0x481c	; 0x481c <display_draw_small_char>
					}
					display_refresh_screen();
    9a7a:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    9a7e:	ff ef       	ldi	r31, 0xFF	; 255
    9a80:	29 e6       	ldi	r18, 0x69	; 105
    9a82:	38 e1       	ldi	r19, 0x18	; 24
    9a84:	f1 50       	subi	r31, 0x01	; 1
    9a86:	20 40       	sbci	r18, 0x00	; 0
    9a88:	30 40       	sbci	r19, 0x00	; 0
    9a8a:	e1 f7       	brne	.-8      	; 0x9a84 <menu_set_time+0x49e>
    9a8c:	00 c0       	rjmp	.+0      	; 0x9a8e <menu_set_time+0x4a8>
    9a8e:	00 00       	nop
    9a90:	78 ce       	rjmp	.-784    	; 0x9782 <menu_set_time+0x19c>
    9a92:	4f ef       	ldi	r20, 0xFF	; 255
    9a94:	59 e6       	ldi	r21, 0x69	; 105
    9a96:	88 e1       	ldi	r24, 0x18	; 24
    9a98:	41 50       	subi	r20, 0x01	; 1
    9a9a:	50 40       	sbci	r21, 0x00	; 0
    9a9c:	80 40       	sbci	r24, 0x00	; 0
    9a9e:	e1 f7       	brne	.-8      	; 0x9a98 <menu_set_time+0x4b2>
    9aa0:	00 c0       	rjmp	.+0      	; 0x9aa2 <menu_set_time+0x4bc>
    9aa2:	00 00       	nop
				btn_status = NO_BTN;
				break;
		}
	}
	next = false;
	display_slide_out_to_left();
    9aa4:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	display_draw_three_letter_word("DST");
    9aa8:	82 e8       	ldi	r24, 0x82	; 130
    9aaa:	97 e2       	ldi	r25, 0x27	; 39
    9aac:	0e 94 b9 24 	call	0x4972	; 0x4972 <display_draw_three_letter_word>
	display_slide_in_from_right();
    9ab0:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    9ab4:	9f ef       	ldi	r25, 0xFF	; 255
    9ab6:	e7 ea       	ldi	r30, 0xA7	; 167
    9ab8:	f1 e6       	ldi	r31, 0x61	; 97
    9aba:	91 50       	subi	r25, 0x01	; 1
    9abc:	e0 40       	sbci	r30, 0x00	; 0
    9abe:	f0 40       	sbci	r31, 0x00	; 0
    9ac0:	e1 f7       	brne	.-8      	; 0x9aba <menu_set_time+0x4d4>
    9ac2:	00 c0       	rjmp	.+0      	; 0x9ac4 <menu_set_time+0x4de>
    9ac4:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    9ac6:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	if (env_var.time.DST) {
    9aca:	80 91 8e 2a 	lds	r24, 0x2A8E
    9ace:	81 11       	cpse	r24, r1
    9ad0:	0d c0       	rjmp	.+26     	; 0x9aec <menu_set_time+0x506>
    9ad2:	11 c0       	rjmp	.+34     	; 0x9af6 <menu_set_time+0x510>
				//ht1632c_blink(false);
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    9ad4:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    9ad8:	60 e0       	ldi	r22, 0x00	; 0
    9ada:	86 e8       	ldi	r24, 0x86	; 134
    9adc:	97 e2       	ldi	r25, 0x27	; 39
    9ade:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
				return 0;
    9ae2:	80 e0       	ldi	r24, 0x00	; 0
    9ae4:	ce c2       	rjmp	.+1436   	; 0xa082 <menu_set_time+0xa9c>
			default:
				btn_status = NO_BTN;
    9ae6:	10 92 ef 2b 	sts	0x2BEF, r1
				break;
    9aea:	4b ce       	rjmp	.-874    	; 0x9782 <menu_set_time+0x19c>
	display_draw_three_letter_word("DST");
	display_slide_in_from_right();
	_delay_ms(1000);
	display_slide_out_to_left();
	if (env_var.time.DST) {
		display_draw_four_letter_word(" ON ");
    9aec:	80 e9       	ldi	r24, 0x90	; 144
    9aee:	97 e2       	ldi	r25, 0x27	; 39
    9af0:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
    9af4:	04 c0       	rjmp	.+8      	; 0x9afe <menu_set_time+0x518>
	} else {
		display_draw_three_letter_word("OFF");
    9af6:	85 e9       	ldi	r24, 0x95	; 149
    9af8:	97 e2       	ldi	r25, 0x27	; 39
    9afa:	0e 94 b9 24 	call	0x4972	; 0x4972 <display_draw_three_letter_word>
	}
	display_slide_in_from_right();
    9afe:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
			case BTN4:
				display_clear_screen();
				env_var.time.DST = 1;
    9b02:	0e e8       	ldi	r16, 0x8E	; 142
    9b04:	1a e2       	ldi	r17, 0x2A	; 42
    9b06:	ff 24       	eor	r15, r15
    9b08:	f3 94       	inc	r15
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
    9b0a:	0e 94 ac 12 	call	0x2558	; 0x2558 <btn_check_press>
    9b0e:	80 93 ef 2b 	sts	0x2BEF, r24
		switch(btn_status) {
    9b12:	80 91 ef 2b 	lds	r24, 0x2BEF
    9b16:	82 30       	cpi	r24, 0x02	; 2
    9b18:	09 f4       	brne	.+2      	; 0x9b1c <menu_set_time+0x536>
    9b1a:	55 c0       	rjmp	.+170    	; 0x9bc6 <menu_set_time+0x5e0>
    9b1c:	18 f4       	brcc	.+6      	; 0x9b24 <menu_set_time+0x53e>
    9b1e:	81 30       	cpi	r24, 0x01	; 1
    9b20:	d1 f0       	breq	.+52     	; 0x9b56 <menu_set_time+0x570>
    9b22:	5a c0       	rjmp	.+180    	; 0x9bd8 <menu_set_time+0x5f2>
    9b24:	83 30       	cpi	r24, 0x03	; 3
    9b26:	59 f1       	breq	.+86     	; 0x9b7e <menu_set_time+0x598>
    9b28:	84 30       	cpi	r24, 0x04	; 4
    9b2a:	09 f0       	breq	.+2      	; 0x9b2e <menu_set_time+0x548>
    9b2c:	55 c0       	rjmp	.+170    	; 0x9bd8 <menu_set_time+0x5f2>
			case BTN4:
				display_clear_screen();
    9b2e:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				env_var.time.DST = 1;
    9b32:	f8 01       	movw	r30, r16
    9b34:	f0 82       	st	Z, r15
				display_draw_four_letter_word(" ON ");
    9b36:	80 e9       	ldi	r24, 0x90	; 144
    9b38:	97 e2       	ldi	r25, 0x27	; 39
    9b3a:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
				display_refresh_screen();
    9b3e:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    9b42:	ff ef       	ldi	r31, 0xFF	; 255
    9b44:	29 e6       	ldi	r18, 0x69	; 105
    9b46:	38 e1       	ldi	r19, 0x18	; 24
    9b48:	f1 50       	subi	r31, 0x01	; 1
    9b4a:	20 40       	sbci	r18, 0x00	; 0
    9b4c:	30 40       	sbci	r19, 0x00	; 0
    9b4e:	e1 f7       	brne	.-8      	; 0x9b48 <menu_set_time+0x562>
    9b50:	00 c0       	rjmp	.+0      	; 0x9b52 <menu_set_time+0x56c>
    9b52:	00 00       	nop
    9b54:	da cf       	rjmp	.-76     	; 0x9b0a <menu_set_time+0x524>
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_screen();
    9b56:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				env_var.time.DST = 0;
    9b5a:	f8 01       	movw	r30, r16
    9b5c:	10 82       	st	Z, r1
				display_draw_three_letter_word("OFF");
    9b5e:	85 e9       	ldi	r24, 0x95	; 149
    9b60:	97 e2       	ldi	r25, 0x27	; 39
    9b62:	0e 94 b9 24 	call	0x4972	; 0x4972 <display_draw_three_letter_word>
				display_refresh_screen();
    9b66:	0e 94 23 21 	call	0x4246	; 0x4246 <display_refresh_screen>
    9b6a:	ff ef       	ldi	r31, 0xFF	; 255
    9b6c:	29 e6       	ldi	r18, 0x69	; 105
    9b6e:	38 e1       	ldi	r19, 0x18	; 24
    9b70:	f1 50       	subi	r31, 0x01	; 1
    9b72:	20 40       	sbci	r18, 0x00	; 0
    9b74:	30 40       	sbci	r19, 0x00	; 0
    9b76:	e1 f7       	brne	.-8      	; 0x9b70 <menu_set_time+0x58a>
    9b78:	00 c0       	rjmp	.+0      	; 0x9b7a <menu_set_time+0x594>
    9b7a:	00 00       	nop
    9b7c:	c6 cf       	rjmp	.-116    	; 0x9b0a <menu_set_time+0x524>
    9b7e:	4f ef       	ldi	r20, 0xFF	; 255
    9b80:	59 e6       	ldi	r21, 0x69	; 105
    9b82:	88 e1       	ldi	r24, 0x18	; 24
    9b84:	41 50       	subi	r20, 0x01	; 1
    9b86:	50 40       	sbci	r21, 0x00	; 0
    9b88:	80 40       	sbci	r24, 0x00	; 0
    9b8a:	e1 f7       	brne	.-8      	; 0x9b84 <menu_set_time+0x59e>
    9b8c:	00 c0       	rjmp	.+0      	; 0x9b8e <menu_set_time+0x5a8>
    9b8e:	00 00       	nop
				btn_status = NO_BTN;
				break;
		}
	}
	next = false;
	display_slide_out_to_left();
    9b90:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	display_draw_three_letter_word("HRS");
    9b94:	89 e9       	ldi	r24, 0x99	; 153
    9b96:	97 e2       	ldi	r25, 0x27	; 39
    9b98:	0e 94 b9 24 	call	0x4972	; 0x4972 <display_draw_three_letter_word>
	display_slide_in_from_right();
    9b9c:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    9ba0:	9f ef       	ldi	r25, 0xFF	; 255
    9ba2:	e7 ea       	ldi	r30, 0xA7	; 167
    9ba4:	f1 e6       	ldi	r31, 0x61	; 97
    9ba6:	91 50       	subi	r25, 0x01	; 1
    9ba8:	e0 40       	sbci	r30, 0x00	; 0
    9baa:	f0 40       	sbci	r31, 0x00	; 0
    9bac:	e1 f7       	brne	.-8      	; 0x9ba6 <menu_set_time+0x5c0>
    9bae:	00 c0       	rjmp	.+0      	; 0x9bb0 <menu_set_time+0x5ca>
    9bb0:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    9bb2:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	rtc_update_display(5,env_var.time.hours);
    9bb6:	60 91 86 2a 	lds	r22, 0x2A86
    9bba:	85 e0       	ldi	r24, 0x05	; 5
    9bbc:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	display_slide_in_from_right();
    9bc0:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    9bc4:	0c c0       	rjmp	.+24     	; 0x9bde <menu_set_time+0x5f8>
				//ht1632c_blink(false);
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    9bc6:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    9bca:	60 e0       	ldi	r22, 0x00	; 0
    9bcc:	86 e8       	ldi	r24, 0x86	; 134
    9bce:	97 e2       	ldi	r25, 0x27	; 39
    9bd0:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
				return 0;
    9bd4:	80 e0       	ldi	r24, 0x00	; 0
    9bd6:	55 c2       	rjmp	.+1194   	; 0xa082 <menu_set_time+0xa9c>
			default:
				btn_status = NO_BTN;
    9bd8:	10 92 ef 2b 	sts	0x2BEF, r1
				break;
    9bdc:	96 cf       	rjmp	.-212    	; 0x9b0a <menu_set_time+0x524>
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
    9bde:	0e 94 ac 12 	call	0x2558	; 0x2558 <btn_check_press>
    9be2:	80 93 ef 2b 	sts	0x2BEF, r24
		switch(btn_status) {
    9be6:	80 91 ef 2b 	lds	r24, 0x2BEF
    9bea:	82 30       	cpi	r24, 0x02	; 2
    9bec:	09 f4       	brne	.+2      	; 0x9bf0 <menu_set_time+0x60a>
    9bee:	49 c0       	rjmp	.+146    	; 0x9c82 <menu_set_time+0x69c>
    9bf0:	18 f4       	brcc	.+6      	; 0x9bf8 <menu_set_time+0x612>
    9bf2:	81 30       	cpi	r24, 0x01	; 1
    9bf4:	a1 f0       	breq	.+40     	; 0x9c1e <menu_set_time+0x638>
    9bf6:	4e c0       	rjmp	.+156    	; 0x9c94 <menu_set_time+0x6ae>
    9bf8:	83 30       	cpi	r24, 0x03	; 3
    9bfa:	f9 f0       	breq	.+62     	; 0x9c3a <menu_set_time+0x654>
    9bfc:	84 30       	cpi	r24, 0x04	; 4
    9bfe:	09 f0       	breq	.+2      	; 0x9c02 <menu_set_time+0x61c>
    9c00:	49 c0       	rjmp	.+146    	; 0x9c94 <menu_set_time+0x6ae>
			case BTN4:
				display_clear_screen();
    9c02:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_draw_and_increment_hour();
    9c06:	0e 94 5f 25 	call	0x4abe	; 0x4abe <display_draw_and_increment_hour>
    9c0a:	2f ef       	ldi	r18, 0xFF	; 255
    9c0c:	39 e6       	ldi	r19, 0x69	; 105
    9c0e:	48 e1       	ldi	r20, 0x18	; 24
    9c10:	21 50       	subi	r18, 0x01	; 1
    9c12:	30 40       	sbci	r19, 0x00	; 0
    9c14:	40 40       	sbci	r20, 0x00	; 0
    9c16:	e1 f7       	brne	.-8      	; 0x9c10 <menu_set_time+0x62a>
    9c18:	00 c0       	rjmp	.+0      	; 0x9c1a <menu_set_time+0x634>
    9c1a:	00 00       	nop
    9c1c:	e0 cf       	rjmp	.-64     	; 0x9bde <menu_set_time+0x5f8>
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_screen();
    9c1e:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_draw_and_decrement_hour();
    9c22:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <display_draw_and_decrement_hour>
    9c26:	5f ef       	ldi	r21, 0xFF	; 255
    9c28:	89 e6       	ldi	r24, 0x69	; 105
    9c2a:	98 e1       	ldi	r25, 0x18	; 24
    9c2c:	51 50       	subi	r21, 0x01	; 1
    9c2e:	80 40       	sbci	r24, 0x00	; 0
    9c30:	90 40       	sbci	r25, 0x00	; 0
    9c32:	e1 f7       	brne	.-8      	; 0x9c2c <menu_set_time+0x646>
    9c34:	00 c0       	rjmp	.+0      	; 0x9c36 <menu_set_time+0x650>
    9c36:	00 00       	nop
    9c38:	d2 cf       	rjmp	.-92     	; 0x9bde <menu_set_time+0x5f8>
    9c3a:	ef ef       	ldi	r30, 0xFF	; 255
    9c3c:	f9 e6       	ldi	r31, 0x69	; 105
    9c3e:	28 e1       	ldi	r18, 0x18	; 24
    9c40:	e1 50       	subi	r30, 0x01	; 1
    9c42:	f0 40       	sbci	r31, 0x00	; 0
    9c44:	20 40       	sbci	r18, 0x00	; 0
    9c46:	e1 f7       	brne	.-8      	; 0x9c40 <menu_set_time+0x65a>
    9c48:	00 c0       	rjmp	.+0      	; 0x9c4a <menu_set_time+0x664>
    9c4a:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    9c4c:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	display_draw_three_letter_word("MIN");
    9c50:	8d e9       	ldi	r24, 0x9D	; 157
    9c52:	97 e2       	ldi	r25, 0x27	; 39
    9c54:	0e 94 b9 24 	call	0x4972	; 0x4972 <display_draw_three_letter_word>
	display_slide_in_from_right();
    9c58:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    9c5c:	3f ef       	ldi	r19, 0xFF	; 255
    9c5e:	47 ea       	ldi	r20, 0xA7	; 167
    9c60:	51 e6       	ldi	r21, 0x61	; 97
    9c62:	31 50       	subi	r19, 0x01	; 1
    9c64:	40 40       	sbci	r20, 0x00	; 0
    9c66:	50 40       	sbci	r21, 0x00	; 0
    9c68:	e1 f7       	brne	.-8      	; 0x9c62 <menu_set_time+0x67c>
    9c6a:	00 c0       	rjmp	.+0      	; 0x9c6c <menu_set_time+0x686>
    9c6c:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    9c6e:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	rtc_update_display(5,env_var.time.minutes);
    9c72:	60 91 85 2a 	lds	r22, 0x2A85
    9c76:	85 e0       	ldi	r24, 0x05	; 5
    9c78:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	display_slide_in_from_right();
    9c7c:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    9c80:	0c c0       	rjmp	.+24     	; 0x9c9a <menu_set_time+0x6b4>
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    9c82:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    9c86:	60 e0       	ldi	r22, 0x00	; 0
    9c88:	86 e8       	ldi	r24, 0x86	; 134
    9c8a:	97 e2       	ldi	r25, 0x27	; 39
    9c8c:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
				return 0;
    9c90:	80 e0       	ldi	r24, 0x00	; 0
    9c92:	f7 c1       	rjmp	.+1006   	; 0xa082 <menu_set_time+0xa9c>
			default:
				btn_status = NO_BTN;
    9c94:	10 92 ef 2b 	sts	0x2BEF, r1
				break;
    9c98:	a2 cf       	rjmp	.-188    	; 0x9bde <menu_set_time+0x5f8>
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
    9c9a:	0e 94 ac 12 	call	0x2558	; 0x2558 <btn_check_press>
    9c9e:	80 93 ef 2b 	sts	0x2BEF, r24
		switch(btn_status) {
    9ca2:	80 91 ef 2b 	lds	r24, 0x2BEF
    9ca6:	82 30       	cpi	r24, 0x02	; 2
    9ca8:	09 f4       	brne	.+2      	; 0x9cac <menu_set_time+0x6c6>
    9caa:	49 c0       	rjmp	.+146    	; 0x9d3e <menu_set_time+0x758>
    9cac:	18 f4       	brcc	.+6      	; 0x9cb4 <menu_set_time+0x6ce>
    9cae:	81 30       	cpi	r24, 0x01	; 1
    9cb0:	a1 f0       	breq	.+40     	; 0x9cda <menu_set_time+0x6f4>
    9cb2:	4e c0       	rjmp	.+156    	; 0x9d50 <menu_set_time+0x76a>
    9cb4:	83 30       	cpi	r24, 0x03	; 3
    9cb6:	f9 f0       	breq	.+62     	; 0x9cf6 <menu_set_time+0x710>
    9cb8:	84 30       	cpi	r24, 0x04	; 4
    9cba:	09 f0       	breq	.+2      	; 0x9cbe <menu_set_time+0x6d8>
    9cbc:	49 c0       	rjmp	.+146    	; 0x9d50 <menu_set_time+0x76a>
			case BTN4:
				display_clear_screen();
    9cbe:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_draw_and_increment_minute();
    9cc2:	0e 94 88 25 	call	0x4b10	; 0x4b10 <display_draw_and_increment_minute>
    9cc6:	8f ef       	ldi	r24, 0xFF	; 255
    9cc8:	99 e6       	ldi	r25, 0x69	; 105
    9cca:	e8 e1       	ldi	r30, 0x18	; 24
    9ccc:	81 50       	subi	r24, 0x01	; 1
    9cce:	90 40       	sbci	r25, 0x00	; 0
    9cd0:	e0 40       	sbci	r30, 0x00	; 0
    9cd2:	e1 f7       	brne	.-8      	; 0x9ccc <menu_set_time+0x6e6>
    9cd4:	00 c0       	rjmp	.+0      	; 0x9cd6 <menu_set_time+0x6f0>
    9cd6:	00 00       	nop
    9cd8:	e0 cf       	rjmp	.-64     	; 0x9c9a <menu_set_time+0x6b4>
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_screen();
    9cda:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_draw_and_decrement_minute();
    9cde:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <display_draw_and_decrement_minute>
    9ce2:	ff ef       	ldi	r31, 0xFF	; 255
    9ce4:	29 e6       	ldi	r18, 0x69	; 105
    9ce6:	38 e1       	ldi	r19, 0x18	; 24
    9ce8:	f1 50       	subi	r31, 0x01	; 1
    9cea:	20 40       	sbci	r18, 0x00	; 0
    9cec:	30 40       	sbci	r19, 0x00	; 0
    9cee:	e1 f7       	brne	.-8      	; 0x9ce8 <menu_set_time+0x702>
    9cf0:	00 c0       	rjmp	.+0      	; 0x9cf2 <menu_set_time+0x70c>
    9cf2:	00 00       	nop
    9cf4:	d2 cf       	rjmp	.-92     	; 0x9c9a <menu_set_time+0x6b4>
    9cf6:	4f ef       	ldi	r20, 0xFF	; 255
    9cf8:	59 e6       	ldi	r21, 0x69	; 105
    9cfa:	88 e1       	ldi	r24, 0x18	; 24
    9cfc:	41 50       	subi	r20, 0x01	; 1
    9cfe:	50 40       	sbci	r21, 0x00	; 0
    9d00:	80 40       	sbci	r24, 0x00	; 0
    9d02:	e1 f7       	brne	.-8      	; 0x9cfc <menu_set_time+0x716>
    9d04:	00 c0       	rjmp	.+0      	; 0x9d06 <menu_set_time+0x720>
    9d06:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    9d08:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	display_draw_three_letter_word("SEC");
    9d0c:	81 ea       	ldi	r24, 0xA1	; 161
    9d0e:	97 e2       	ldi	r25, 0x27	; 39
    9d10:	0e 94 b9 24 	call	0x4972	; 0x4972 <display_draw_three_letter_word>
	display_slide_in_from_right();
    9d14:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    9d18:	9f ef       	ldi	r25, 0xFF	; 255
    9d1a:	e7 ea       	ldi	r30, 0xA7	; 167
    9d1c:	f1 e6       	ldi	r31, 0x61	; 97
    9d1e:	91 50       	subi	r25, 0x01	; 1
    9d20:	e0 40       	sbci	r30, 0x00	; 0
    9d22:	f0 40       	sbci	r31, 0x00	; 0
    9d24:	e1 f7       	brne	.-8      	; 0x9d1e <menu_set_time+0x738>
    9d26:	00 c0       	rjmp	.+0      	; 0x9d28 <menu_set_time+0x742>
    9d28:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    9d2a:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	rtc_update_display(5,env_var.time.seconds);
    9d2e:	60 91 84 2a 	lds	r22, 0x2A84
    9d32:	85 e0       	ldi	r24, 0x05	; 5
    9d34:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	display_slide_in_from_right();
    9d38:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    9d3c:	0c c0       	rjmp	.+24     	; 0x9d56 <menu_set_time+0x770>
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    9d3e:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    9d42:	60 e0       	ldi	r22, 0x00	; 0
    9d44:	86 e8       	ldi	r24, 0x86	; 134
    9d46:	97 e2       	ldi	r25, 0x27	; 39
    9d48:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
				return 0;
    9d4c:	80 e0       	ldi	r24, 0x00	; 0
    9d4e:	99 c1       	rjmp	.+818    	; 0xa082 <menu_set_time+0xa9c>
			default:
				btn_status = NO_BTN;
    9d50:	10 92 ef 2b 	sts	0x2BEF, r1
				break;
    9d54:	a2 cf       	rjmp	.-188    	; 0x9c9a <menu_set_time+0x6b4>
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set seconds
	while(!next) {
		btn_status = btn_check_press();
    9d56:	0e 94 ac 12 	call	0x2558	; 0x2558 <btn_check_press>
    9d5a:	80 93 ef 2b 	sts	0x2BEF, r24
		switch(btn_status) {
    9d5e:	80 91 ef 2b 	lds	r24, 0x2BEF
    9d62:	82 30       	cpi	r24, 0x02	; 2
    9d64:	09 f4       	brne	.+2      	; 0x9d68 <menu_set_time+0x782>
    9d66:	49 c0       	rjmp	.+146    	; 0x9dfa <menu_set_time+0x814>
    9d68:	18 f4       	brcc	.+6      	; 0x9d70 <menu_set_time+0x78a>
    9d6a:	81 30       	cpi	r24, 0x01	; 1
    9d6c:	a1 f0       	breq	.+40     	; 0x9d96 <menu_set_time+0x7b0>
    9d6e:	4e c0       	rjmp	.+156    	; 0x9e0c <menu_set_time+0x826>
    9d70:	83 30       	cpi	r24, 0x03	; 3
    9d72:	f9 f0       	breq	.+62     	; 0x9db2 <menu_set_time+0x7cc>
    9d74:	84 30       	cpi	r24, 0x04	; 4
    9d76:	09 f0       	breq	.+2      	; 0x9d7a <menu_set_time+0x794>
    9d78:	49 c0       	rjmp	.+146    	; 0x9e0c <menu_set_time+0x826>
			case BTN4:
				display_clear_screen();
    9d7a:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_draw_and_increment_second();
    9d7e:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <display_draw_and_increment_second>
    9d82:	2f ef       	ldi	r18, 0xFF	; 255
    9d84:	39 e6       	ldi	r19, 0x69	; 105
    9d86:	48 e1       	ldi	r20, 0x18	; 24
    9d88:	21 50       	subi	r18, 0x01	; 1
    9d8a:	30 40       	sbci	r19, 0x00	; 0
    9d8c:	40 40       	sbci	r20, 0x00	; 0
    9d8e:	e1 f7       	brne	.-8      	; 0x9d88 <menu_set_time+0x7a2>
    9d90:	00 c0       	rjmp	.+0      	; 0x9d92 <menu_set_time+0x7ac>
    9d92:	00 00       	nop
    9d94:	e0 cf       	rjmp	.-64     	; 0x9d56 <menu_set_time+0x770>
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_screen();
    9d96:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_draw_and_decrement_second();
    9d9a:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <display_draw_and_decrement_second>
    9d9e:	5f ef       	ldi	r21, 0xFF	; 255
    9da0:	89 e6       	ldi	r24, 0x69	; 105
    9da2:	98 e1       	ldi	r25, 0x18	; 24
    9da4:	51 50       	subi	r21, 0x01	; 1
    9da6:	80 40       	sbci	r24, 0x00	; 0
    9da8:	90 40       	sbci	r25, 0x00	; 0
    9daa:	e1 f7       	brne	.-8      	; 0x9da4 <menu_set_time+0x7be>
    9dac:	00 c0       	rjmp	.+0      	; 0x9dae <menu_set_time+0x7c8>
    9dae:	00 00       	nop
    9db0:	d2 cf       	rjmp	.-92     	; 0x9d56 <menu_set_time+0x770>
    9db2:	ef ef       	ldi	r30, 0xFF	; 255
    9db4:	f9 e6       	ldi	r31, 0x69	; 105
    9db6:	28 e1       	ldi	r18, 0x18	; 24
    9db8:	e1 50       	subi	r30, 0x01	; 1
    9dba:	f0 40       	sbci	r31, 0x00	; 0
    9dbc:	20 40       	sbci	r18, 0x00	; 0
    9dbe:	e1 f7       	brne	.-8      	; 0x9db8 <menu_set_time+0x7d2>
    9dc0:	00 c0       	rjmp	.+0      	; 0x9dc2 <menu_set_time+0x7dc>
    9dc2:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    9dc4:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	display_draw_four_letter_word("WDAY");
    9dc8:	85 ea       	ldi	r24, 0xA5	; 165
    9dca:	97 e2       	ldi	r25, 0x27	; 39
    9dcc:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
	display_slide_in_from_right();
    9dd0:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    9dd4:	3f ef       	ldi	r19, 0xFF	; 255
    9dd6:	47 ea       	ldi	r20, 0xA7	; 167
    9dd8:	51 e6       	ldi	r21, 0x61	; 97
    9dda:	31 50       	subi	r19, 0x01	; 1
    9ddc:	40 40       	sbci	r20, 0x00	; 0
    9dde:	50 40       	sbci	r21, 0x00	; 0
    9de0:	e1 f7       	brne	.-8      	; 0x9dda <menu_set_time+0x7f4>
    9de2:	00 c0       	rjmp	.+0      	; 0x9de4 <menu_set_time+0x7fe>
    9de4:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    9de6:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	display_draw_three_letter_word(time_get_day_name(env_var.time.weekday));
    9dea:	80 91 88 2a 	lds	r24, 0x2A88
    9dee:	2c d4       	rcall	.+2136   	; 0xa648 <time_get_day_name>
    9df0:	0e 94 b9 24 	call	0x4972	; 0x4972 <display_draw_three_letter_word>
	display_slide_in_from_right();
    9df4:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    9df8:	0c c0       	rjmp	.+24     	; 0x9e12 <menu_set_time+0x82c>
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    9dfa:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    9dfe:	60 e0       	ldi	r22, 0x00	; 0
    9e00:	86 e8       	ldi	r24, 0x86	; 134
    9e02:	97 e2       	ldi	r25, 0x27	; 39
    9e04:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
				return 0;
    9e08:	80 e0       	ldi	r24, 0x00	; 0
    9e0a:	3b c1       	rjmp	.+630    	; 0xa082 <menu_set_time+0xa9c>
			default:
				btn_status = NO_BTN;
    9e0c:	10 92 ef 2b 	sts	0x2BEF, r1
				break;
    9e10:	a2 cf       	rjmp	.-188    	; 0x9d56 <menu_set_time+0x770>
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set day
	while(!next) {
		btn_status = btn_check_press();
    9e12:	0e 94 ac 12 	call	0x2558	; 0x2558 <btn_check_press>
    9e16:	80 93 ef 2b 	sts	0x2BEF, r24
		switch(btn_status) {
    9e1a:	80 91 ef 2b 	lds	r24, 0x2BEF
    9e1e:	82 30       	cpi	r24, 0x02	; 2
    9e20:	09 f4       	brne	.+2      	; 0x9e24 <menu_set_time+0x83e>
    9e22:	49 c0       	rjmp	.+146    	; 0x9eb6 <menu_set_time+0x8d0>
    9e24:	18 f4       	brcc	.+6      	; 0x9e2c <menu_set_time+0x846>
    9e26:	81 30       	cpi	r24, 0x01	; 1
    9e28:	a1 f0       	breq	.+40     	; 0x9e52 <menu_set_time+0x86c>
    9e2a:	4e c0       	rjmp	.+156    	; 0x9ec8 <menu_set_time+0x8e2>
    9e2c:	83 30       	cpi	r24, 0x03	; 3
    9e2e:	f9 f0       	breq	.+62     	; 0x9e6e <menu_set_time+0x888>
    9e30:	84 30       	cpi	r24, 0x04	; 4
    9e32:	09 f0       	breq	.+2      	; 0x9e36 <menu_set_time+0x850>
    9e34:	49 c0       	rjmp	.+146    	; 0x9ec8 <menu_set_time+0x8e2>
			case BTN4:
				display_clear_screen();
    9e36:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_draw_and_increment_day();
    9e3a:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <display_draw_and_increment_day>
    9e3e:	8f ef       	ldi	r24, 0xFF	; 255
    9e40:	99 e6       	ldi	r25, 0x69	; 105
    9e42:	e8 e1       	ldi	r30, 0x18	; 24
    9e44:	81 50       	subi	r24, 0x01	; 1
    9e46:	90 40       	sbci	r25, 0x00	; 0
    9e48:	e0 40       	sbci	r30, 0x00	; 0
    9e4a:	e1 f7       	brne	.-8      	; 0x9e44 <menu_set_time+0x85e>
    9e4c:	00 c0       	rjmp	.+0      	; 0x9e4e <menu_set_time+0x868>
    9e4e:	00 00       	nop
    9e50:	e0 cf       	rjmp	.-64     	; 0x9e12 <menu_set_time+0x82c>
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_screen();
    9e52:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_draw_and_decrement_day();
    9e56:	0e 94 ef 25 	call	0x4bde	; 0x4bde <display_draw_and_decrement_day>
    9e5a:	ff ef       	ldi	r31, 0xFF	; 255
    9e5c:	29 e6       	ldi	r18, 0x69	; 105
    9e5e:	38 e1       	ldi	r19, 0x18	; 24
    9e60:	f1 50       	subi	r31, 0x01	; 1
    9e62:	20 40       	sbci	r18, 0x00	; 0
    9e64:	30 40       	sbci	r19, 0x00	; 0
    9e66:	e1 f7       	brne	.-8      	; 0x9e60 <menu_set_time+0x87a>
    9e68:	00 c0       	rjmp	.+0      	; 0x9e6a <menu_set_time+0x884>
    9e6a:	00 00       	nop
    9e6c:	d2 cf       	rjmp	.-92     	; 0x9e12 <menu_set_time+0x82c>
    9e6e:	4f ef       	ldi	r20, 0xFF	; 255
    9e70:	59 e6       	ldi	r21, 0x69	; 105
    9e72:	88 e1       	ldi	r24, 0x18	; 24
    9e74:	41 50       	subi	r20, 0x01	; 1
    9e76:	50 40       	sbci	r21, 0x00	; 0
    9e78:	80 40       	sbci	r24, 0x00	; 0
    9e7a:	e1 f7       	brne	.-8      	; 0x9e74 <menu_set_time+0x88e>
    9e7c:	00 c0       	rjmp	.+0      	; 0x9e7e <menu_set_time+0x898>
    9e7e:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    9e80:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	display_draw_four_letter_word("MNTH");
    9e84:	8a ea       	ldi	r24, 0xAA	; 170
    9e86:	97 e2       	ldi	r25, 0x27	; 39
    9e88:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
	display_slide_in_from_right();
    9e8c:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    9e90:	9f ef       	ldi	r25, 0xFF	; 255
    9e92:	e7 ea       	ldi	r30, 0xA7	; 167
    9e94:	f1 e6       	ldi	r31, 0x61	; 97
    9e96:	91 50       	subi	r25, 0x01	; 1
    9e98:	e0 40       	sbci	r30, 0x00	; 0
    9e9a:	f0 40       	sbci	r31, 0x00	; 0
    9e9c:	e1 f7       	brne	.-8      	; 0x9e96 <menu_set_time+0x8b0>
    9e9e:	00 c0       	rjmp	.+0      	; 0x9ea0 <menu_set_time+0x8ba>
    9ea0:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    9ea2:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	display_draw_three_letter_word(time_get_month_name(env_var.time.month));
    9ea6:	80 91 8a 2a 	lds	r24, 0x2A8A
    9eaa:	f2 d3       	rcall	.+2020   	; 0xa690 <time_get_month_name>
    9eac:	0e 94 b9 24 	call	0x4972	; 0x4972 <display_draw_three_letter_word>
	display_slide_in_from_right();
    9eb0:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    9eb4:	0c c0       	rjmp	.+24     	; 0x9ece <menu_set_time+0x8e8>
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    9eb6:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    9eba:	60 e0       	ldi	r22, 0x00	; 0
    9ebc:	86 e8       	ldi	r24, 0x86	; 134
    9ebe:	97 e2       	ldi	r25, 0x27	; 39
    9ec0:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
				return 0;
    9ec4:	80 e0       	ldi	r24, 0x00	; 0
    9ec6:	dd c0       	rjmp	.+442    	; 0xa082 <menu_set_time+0xa9c>
			default:
				btn_status = NO_BTN;
    9ec8:	10 92 ef 2b 	sts	0x2BEF, r1
				break;
    9ecc:	a2 cf       	rjmp	.-188    	; 0x9e12 <menu_set_time+0x82c>
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set month
	while(!next) {
		btn_status = btn_check_press();
    9ece:	0e 94 ac 12 	call	0x2558	; 0x2558 <btn_check_press>
    9ed2:	80 93 ef 2b 	sts	0x2BEF, r24
		switch(btn_status) {
    9ed6:	80 91 ef 2b 	lds	r24, 0x2BEF
    9eda:	82 30       	cpi	r24, 0x02	; 2
    9edc:	09 f4       	brne	.+2      	; 0x9ee0 <menu_set_time+0x8fa>
    9ede:	51 c0       	rjmp	.+162    	; 0x9f82 <menu_set_time+0x99c>
    9ee0:	18 f4       	brcc	.+6      	; 0x9ee8 <menu_set_time+0x902>
    9ee2:	81 30       	cpi	r24, 0x01	; 1
    9ee4:	a1 f0       	breq	.+40     	; 0x9f0e <menu_set_time+0x928>
    9ee6:	56 c0       	rjmp	.+172    	; 0x9f94 <menu_set_time+0x9ae>
    9ee8:	83 30       	cpi	r24, 0x03	; 3
    9eea:	f9 f0       	breq	.+62     	; 0x9f2a <menu_set_time+0x944>
    9eec:	84 30       	cpi	r24, 0x04	; 4
    9eee:	09 f0       	breq	.+2      	; 0x9ef2 <menu_set_time+0x90c>
    9ef0:	51 c0       	rjmp	.+162    	; 0x9f94 <menu_set_time+0x9ae>
			case BTN4:
				display_clear_screen();
    9ef2:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_draw_and_increment_month();
    9ef6:	0e 94 04 26 	call	0x4c08	; 0x4c08 <display_draw_and_increment_month>
    9efa:	2f ef       	ldi	r18, 0xFF	; 255
    9efc:	39 e6       	ldi	r19, 0x69	; 105
    9efe:	48 e1       	ldi	r20, 0x18	; 24
    9f00:	21 50       	subi	r18, 0x01	; 1
    9f02:	30 40       	sbci	r19, 0x00	; 0
    9f04:	40 40       	sbci	r20, 0x00	; 0
    9f06:	e1 f7       	brne	.-8      	; 0x9f00 <menu_set_time+0x91a>
    9f08:	00 c0       	rjmp	.+0      	; 0x9f0a <menu_set_time+0x924>
    9f0a:	00 00       	nop
    9f0c:	e0 cf       	rjmp	.-64     	; 0x9ece <menu_set_time+0x8e8>
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_screen();
    9f0e:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_draw_and_decrement_month();
    9f12:	0e 94 19 26 	call	0x4c32	; 0x4c32 <display_draw_and_decrement_month>
    9f16:	5f ef       	ldi	r21, 0xFF	; 255
    9f18:	89 e6       	ldi	r24, 0x69	; 105
    9f1a:	98 e1       	ldi	r25, 0x18	; 24
    9f1c:	51 50       	subi	r21, 0x01	; 1
    9f1e:	80 40       	sbci	r24, 0x00	; 0
    9f20:	90 40       	sbci	r25, 0x00	; 0
    9f22:	e1 f7       	brne	.-8      	; 0x9f1c <menu_set_time+0x936>
    9f24:	00 c0       	rjmp	.+0      	; 0x9f26 <menu_set_time+0x940>
    9f26:	00 00       	nop
    9f28:	d2 cf       	rjmp	.-92     	; 0x9ece <menu_set_time+0x8e8>
    9f2a:	ef ef       	ldi	r30, 0xFF	; 255
    9f2c:	f9 e6       	ldi	r31, 0x69	; 105
    9f2e:	28 e1       	ldi	r18, 0x18	; 24
    9f30:	e1 50       	subi	r30, 0x01	; 1
    9f32:	f0 40       	sbci	r31, 0x00	; 0
    9f34:	20 40       	sbci	r18, 0x00	; 0
    9f36:	e1 f7       	brne	.-8      	; 0x9f30 <menu_set_time+0x94a>
    9f38:	00 c0       	rjmp	.+0      	; 0x9f3a <menu_set_time+0x954>
    9f3a:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    9f3c:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	display_draw_four_letter_word("YEAR");
    9f40:	8f ea       	ldi	r24, 0xAF	; 175
    9f42:	97 e2       	ldi	r25, 0x27	; 39
    9f44:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
	display_slide_in_from_right();
    9f48:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    9f4c:	3f ef       	ldi	r19, 0xFF	; 255
    9f4e:	47 ea       	ldi	r20, 0xA7	; 167
    9f50:	51 e6       	ldi	r21, 0x61	; 97
    9f52:	31 50       	subi	r19, 0x01	; 1
    9f54:	40 40       	sbci	r20, 0x00	; 0
    9f56:	50 40       	sbci	r21, 0x00	; 0
    9f58:	e1 f7       	brne	.-8      	; 0x9f52 <menu_set_time+0x96c>
    9f5a:	00 c0       	rjmp	.+0      	; 0x9f5c <menu_set_time+0x976>
    9f5c:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    9f5e:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
}

static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    9f62:	60 91 8b 2a 	lds	r22, 0x2A8B
    9f66:	70 91 8c 2a 	lds	r23, 0x2A8C
    9f6a:	80 e0       	ldi	r24, 0x00	; 0
    9f6c:	90 e0       	ldi	r25, 0x00	; 0
    9f6e:	00 e0       	ldi	r16, 0x00	; 0
    9f70:	10 e0       	ldi	r17, 0x00	; 0
		*s++ = '-';
		rev++;
	}

	do {       /* generate digits in reverse order */
		*s++ = (n % 10) + '0';   /* get next digit */
    9f72:	0f 2e       	mov	r0, r31
    9f74:	fa e0       	ldi	r31, 0x0A	; 10
    9f76:	8f 2e       	mov	r8, r31
    9f78:	91 2c       	mov	r9, r1
    9f7a:	a1 2c       	mov	r10, r1
    9f7c:	b1 2c       	mov	r11, r1
    9f7e:	f0 2d       	mov	r31, r0
    9f80:	0d c0       	rjmp	.+26     	; 0x9f9c <menu_set_time+0x9b6>
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    9f82:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    9f86:	60 e0       	ldi	r22, 0x00	; 0
    9f88:	86 e8       	ldi	r24, 0x86	; 134
    9f8a:	97 e2       	ldi	r25, 0x27	; 39
    9f8c:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
				return 0;
    9f90:	80 e0       	ldi	r24, 0x00	; 0
    9f92:	77 c0       	rjmp	.+238    	; 0xa082 <menu_set_time+0xa9c>
			default:
				btn_status = NO_BTN;
    9f94:	10 92 ef 2b 	sts	0x2BEF, r1
				break;
    9f98:	9a cf       	rjmp	.-204    	; 0x9ece <menu_set_time+0x8e8>
    9f9a:	87 01       	movw	r16, r14
    9f9c:	78 01       	movw	r14, r16
    9f9e:	ef ef       	ldi	r30, 0xFF	; 255
    9fa0:	ee 1a       	sub	r14, r30
    9fa2:	fe 0a       	sbc	r15, r30
    9fa4:	a5 01       	movw	r20, r10
    9fa6:	94 01       	movw	r18, r8
    9fa8:	4a d6       	rcall	.+3220   	; 0xac3e <__udivmodsi4>
    9faa:	80 e3       	ldi	r24, 0x30	; 48
    9fac:	86 0f       	add	r24, r22
    9fae:	f8 01       	movw	r30, r16
    9fb0:	80 83       	st	Z, r24
	} while ((n /= 10) > 0);     /* delete it */
    9fb2:	62 2f       	mov	r22, r18
    9fb4:	73 2f       	mov	r23, r19
    9fb6:	84 2f       	mov	r24, r20
    9fb8:	95 2f       	mov	r25, r21
    9fba:	61 15       	cp	r22, r1
    9fbc:	71 05       	cpc	r23, r1
    9fbe:	81 05       	cpc	r24, r1
    9fc0:	91 05       	cpc	r25, r1
    9fc2:	59 f7       	brne	.-42     	; 0x9f9a <menu_set_time+0x9b4>
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    9fc4:	1e 16       	cp	r1, r30
    9fc6:	1f 06       	cpc	r1, r31
    9fc8:	54 f4       	brge	.+20     	; 0x9fde <menu_set_time+0x9f8>
    9fca:	a0 e0       	ldi	r26, 0x00	; 0
    9fcc:	b0 e0       	ldi	r27, 0x00	; 0
		c = s[i];
    9fce:	8c 91       	ld	r24, X
		s[i] = s[j];
    9fd0:	90 81       	ld	r25, Z
    9fd2:	9d 93       	st	X+, r25
		s[j] = c;
    9fd4:	80 83       	st	Z, r24
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    9fd6:	31 97       	sbiw	r30, 0x01	; 1
    9fd8:	ae 17       	cp	r26, r30
    9fda:	bf 07       	cpc	r27, r31
    9fdc:	c4 f3       	brlt	.-16     	; 0x9fce <menu_set_time+0x9e8>
	display_slide_in_from_right();
	_delay_ms(1000);
	display_slide_out_to_left();
	char *year = NULL;
	itoa_simple(year,env_var.time.year);
	display_draw_four_letter_word(year);
    9fde:	80 e0       	ldi	r24, 0x00	; 0
    9fe0:	90 e0       	ldi	r25, 0x00	; 0
    9fe2:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
	display_slide_in_from_right();
    9fe6:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
	//ht1632c_blink(true);
	
	//Set year
	while(!next) {
		btn_status = btn_check_press();
    9fea:	0e 94 ac 12 	call	0x2558	; 0x2558 <btn_check_press>
    9fee:	80 93 ef 2b 	sts	0x2BEF, r24
		switch(btn_status) {
    9ff2:	80 91 ef 2b 	lds	r24, 0x2BEF
    9ff6:	82 30       	cpi	r24, 0x02	; 2
    9ff8:	c1 f1       	breq	.+112    	; 0xa06a <menu_set_time+0xa84>
    9ffa:	18 f4       	brcc	.+6      	; 0xa002 <menu_set_time+0xa1c>
    9ffc:	81 30       	cpi	r24, 0x01	; 1
    9ffe:	99 f0       	breq	.+38     	; 0xa026 <menu_set_time+0xa40>
    a000:	3d c0       	rjmp	.+122    	; 0xa07c <menu_set_time+0xa96>
    a002:	83 30       	cpi	r24, 0x03	; 3
    a004:	f1 f0       	breq	.+60     	; 0xa042 <menu_set_time+0xa5c>
    a006:	84 30       	cpi	r24, 0x04	; 4
    a008:	c9 f5       	brne	.+114    	; 0xa07c <menu_set_time+0xa96>
			case BTN4:
				display_clear_screen();
    a00a:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_draw_and_increment_year();
    a00e:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <display_draw_and_increment_year>
    a012:	ff ef       	ldi	r31, 0xFF	; 255
    a014:	29 e6       	ldi	r18, 0x69	; 105
    a016:	38 e1       	ldi	r19, 0x18	; 24
    a018:	f1 50       	subi	r31, 0x01	; 1
    a01a:	20 40       	sbci	r18, 0x00	; 0
    a01c:	30 40       	sbci	r19, 0x00	; 0
    a01e:	e1 f7       	brne	.-8      	; 0xa018 <menu_set_time+0xa32>
    a020:	00 c0       	rjmp	.+0      	; 0xa022 <menu_set_time+0xa3c>
    a022:	00 00       	nop
    a024:	e2 cf       	rjmp	.-60     	; 0x9fea <menu_set_time+0xa04>
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_screen();
    a026:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_draw_and_decrement_year();
    a02a:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <display_draw_and_decrement_year>
    a02e:	4f ef       	ldi	r20, 0xFF	; 255
    a030:	59 e6       	ldi	r21, 0x69	; 105
    a032:	88 e1       	ldi	r24, 0x18	; 24
    a034:	41 50       	subi	r20, 0x01	; 1
    a036:	50 40       	sbci	r21, 0x00	; 0
    a038:	80 40       	sbci	r24, 0x00	; 0
    a03a:	e1 f7       	brne	.-8      	; 0xa034 <menu_set_time+0xa4e>
    a03c:	00 c0       	rjmp	.+0      	; 0xa03e <menu_set_time+0xa58>
    a03e:	00 00       	nop
    a040:	d4 cf       	rjmp	.-88     	; 0x9fea <menu_set_time+0xa04>
    a042:	9f ef       	ldi	r25, 0xFF	; 255
    a044:	e9 e6       	ldi	r30, 0x69	; 105
    a046:	f8 e1       	ldi	r31, 0x18	; 24
    a048:	91 50       	subi	r25, 0x01	; 1
    a04a:	e0 40       	sbci	r30, 0x00	; 0
    a04c:	f0 40       	sbci	r31, 0x00	; 0
    a04e:	e1 f7       	brne	.-8      	; 0xa048 <menu_set_time+0xa62>
    a050:	00 c0       	rjmp	.+0      	; 0xa052 <menu_set_time+0xa6c>
    a052:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	EEPROM_WriteEnv();
    a054:	0e 94 4f 09 	call	0x129e	; 0x129e <EEPROM_WriteEnv>
	display_slide_out_to_bottom();
    a058:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
	
#ifdef SHOW_MANUAL
	display_print_scrolling_text("TIME AND DATE IS SET",false);
    a05c:	60 e0       	ldi	r22, 0x00	; 0
    a05e:	84 eb       	ldi	r24, 0xB4	; 180
    a060:	97 e2       	ldi	r25, 0x27	; 39
    a062:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
	
	return 1;
    a066:	81 e0       	ldi	r24, 0x01	; 1
    a068:	0c c0       	rjmp	.+24     	; 0xa082 <menu_set_time+0xa9c>
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    a06a:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    a06e:	60 e0       	ldi	r22, 0x00	; 0
    a070:	86 e8       	ldi	r24, 0x86	; 134
    a072:	97 e2       	ldi	r25, 0x27	; 39
    a074:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
				return 0;
    a078:	80 e0       	ldi	r24, 0x00	; 0
    a07a:	03 c0       	rjmp	.+6      	; 0xa082 <menu_set_time+0xa9c>
			default:
				btn_status = NO_BTN;
    a07c:	10 92 ef 2b 	sts	0x2BEF, r1
				break;
    a080:	b4 cf       	rjmp	.-152    	; 0x9fea <menu_set_time+0xa04>
#ifdef SHOW_MANUAL
	display_print_scrolling_text("TIME AND DATE IS SET",false);
#endif
	
	return 1;
}
    a082:	23 96       	adiw	r28, 0x03	; 3
    a084:	cd bf       	out	0x3d, r28	; 61
    a086:	de bf       	out	0x3e, r29	; 62
    a088:	df 91       	pop	r29
    a08a:	cf 91       	pop	r28
    a08c:	1f 91       	pop	r17
    a08e:	0f 91       	pop	r16
    a090:	ff 90       	pop	r15
    a092:	ef 90       	pop	r14
    a094:	df 90       	pop	r13
    a096:	cf 90       	pop	r12
    a098:	bf 90       	pop	r11
    a09a:	af 90       	pop	r10
    a09c:	9f 90       	pop	r9
    a09e:	8f 90       	pop	r8
    a0a0:	7f 90       	pop	r7
    a0a2:	6f 90       	pop	r6
    a0a4:	5f 90       	pop	r5
    a0a6:	4f 90       	pop	r4
    a0a8:	3f 90       	pop	r3
    a0aa:	2f 90       	pop	r2
    a0ac:	08 95       	ret

0000a0ae <menu_set_alarm>:

uint8_t menu_set_alarm(void) 
{
	bool next = false;
	
	display_draw_three_letter_word("HRS");
    a0ae:	89 e9       	ldi	r24, 0x99	; 153
    a0b0:	97 e2       	ldi	r25, 0x27	; 39
    a0b2:	0e 94 b9 24 	call	0x4972	; 0x4972 <display_draw_three_letter_word>
	display_slide_in_from_right();
    a0b6:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    a0ba:	2f ef       	ldi	r18, 0xFF	; 255
    a0bc:	87 ea       	ldi	r24, 0xA7	; 167
    a0be:	91 e6       	ldi	r25, 0x61	; 97
    a0c0:	21 50       	subi	r18, 0x01	; 1
    a0c2:	80 40       	sbci	r24, 0x00	; 0
    a0c4:	90 40       	sbci	r25, 0x00	; 0
    a0c6:	e1 f7       	brne	.-8      	; 0xa0c0 <menu_set_alarm+0x12>
    a0c8:	00 c0       	rjmp	.+0      	; 0xa0ca <menu_set_alarm+0x1c>
    a0ca:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    a0cc:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	rtc_update_display(5,env_var.alarm.hours);
    a0d0:	60 91 0a 2b 	lds	r22, 0x2B0A
    a0d4:	85 e0       	ldi	r24, 0x05	; 5
    a0d6:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	display_slide_in_from_right();
    a0da:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
    a0de:	0e 94 ac 12 	call	0x2558	; 0x2558 <btn_check_press>
    a0e2:	80 93 ef 2b 	sts	0x2BEF, r24
		switch(btn_status) {
    a0e6:	80 91 ef 2b 	lds	r24, 0x2BEF
    a0ea:	82 30       	cpi	r24, 0x02	; 2
    a0ec:	09 f4       	brne	.+2      	; 0xa0f0 <menu_set_alarm+0x42>
    a0ee:	49 c0       	rjmp	.+146    	; 0xa182 <menu_set_alarm+0xd4>
    a0f0:	18 f4       	brcc	.+6      	; 0xa0f8 <menu_set_alarm+0x4a>
    a0f2:	81 30       	cpi	r24, 0x01	; 1
    a0f4:	a1 f0       	breq	.+40     	; 0xa11e <menu_set_alarm+0x70>
    a0f6:	4e c0       	rjmp	.+156    	; 0xa194 <menu_set_alarm+0xe6>
    a0f8:	83 30       	cpi	r24, 0x03	; 3
    a0fa:	f9 f0       	breq	.+62     	; 0xa13a <menu_set_alarm+0x8c>
    a0fc:	84 30       	cpi	r24, 0x04	; 4
    a0fe:	09 f0       	breq	.+2      	; 0xa102 <menu_set_alarm+0x54>
    a100:	49 c0       	rjmp	.+146    	; 0xa194 <menu_set_alarm+0xe6>
			case BTN4:
				display_clear_screen();
    a102:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_alarm_increment_hour();
    a106:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <display_alarm_increment_hour>
    a10a:	2f ef       	ldi	r18, 0xFF	; 255
    a10c:	85 ea       	ldi	r24, 0xA5	; 165
    a10e:	9e e0       	ldi	r25, 0x0E	; 14
    a110:	21 50       	subi	r18, 0x01	; 1
    a112:	80 40       	sbci	r24, 0x00	; 0
    a114:	90 40       	sbci	r25, 0x00	; 0
    a116:	e1 f7       	brne	.-8      	; 0xa110 <menu_set_alarm+0x62>
    a118:	00 c0       	rjmp	.+0      	; 0xa11a <menu_set_alarm+0x6c>
    a11a:	00 00       	nop
    a11c:	e0 cf       	rjmp	.-64     	; 0xa0de <menu_set_alarm+0x30>
				_delay_ms(150);
				break;
			case BTN1:
				display_clear_screen();
    a11e:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_alarm_decrement_hour();
    a122:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <display_alarm_decrement_hour>
    a126:	2f ef       	ldi	r18, 0xFF	; 255
    a128:	85 ea       	ldi	r24, 0xA5	; 165
    a12a:	9e e0       	ldi	r25, 0x0E	; 14
    a12c:	21 50       	subi	r18, 0x01	; 1
    a12e:	80 40       	sbci	r24, 0x00	; 0
    a130:	90 40       	sbci	r25, 0x00	; 0
    a132:	e1 f7       	brne	.-8      	; 0xa12c <menu_set_alarm+0x7e>
    a134:	00 c0       	rjmp	.+0      	; 0xa136 <menu_set_alarm+0x88>
    a136:	00 00       	nop
    a138:	d2 cf       	rjmp	.-92     	; 0xa0de <menu_set_alarm+0x30>
    a13a:	2f ef       	ldi	r18, 0xFF	; 255
    a13c:	89 e6       	ldi	r24, 0x69	; 105
    a13e:	98 e1       	ldi	r25, 0x18	; 24
    a140:	21 50       	subi	r18, 0x01	; 1
    a142:	80 40       	sbci	r24, 0x00	; 0
    a144:	90 40       	sbci	r25, 0x00	; 0
    a146:	e1 f7       	brne	.-8      	; 0xa140 <menu_set_alarm+0x92>
    a148:	00 c0       	rjmp	.+0      	; 0xa14a <menu_set_alarm+0x9c>
    a14a:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    a14c:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	display_draw_three_letter_word("MIN");
    a150:	8d e9       	ldi	r24, 0x9D	; 157
    a152:	97 e2       	ldi	r25, 0x27	; 39
    a154:	0e 94 b9 24 	call	0x4972	; 0x4972 <display_draw_three_letter_word>
	display_slide_in_from_right();
    a158:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    a15c:	2f ef       	ldi	r18, 0xFF	; 255
    a15e:	87 ea       	ldi	r24, 0xA7	; 167
    a160:	91 e6       	ldi	r25, 0x61	; 97
    a162:	21 50       	subi	r18, 0x01	; 1
    a164:	80 40       	sbci	r24, 0x00	; 0
    a166:	90 40       	sbci	r25, 0x00	; 0
    a168:	e1 f7       	brne	.-8      	; 0xa162 <menu_set_alarm+0xb4>
    a16a:	00 c0       	rjmp	.+0      	; 0xa16c <menu_set_alarm+0xbe>
    a16c:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    a16e:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	rtc_update_display(5,env_var.alarm.minutes);
    a172:	60 91 09 2b 	lds	r22, 0x2B09
    a176:	85 e0       	ldi	r24, 0x05	; 5
    a178:	0e 94 9c 13 	call	0x2738	; 0x2738 <rtc_update_display>
	display_slide_in_from_right();
    a17c:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
    a180:	0c c0       	rjmp	.+24     	; 0xa19a <menu_set_alarm+0xec>
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    a182:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    a186:	60 e0       	ldi	r22, 0x00	; 0
    a188:	86 e8       	ldi	r24, 0x86	; 134
    a18a:	97 e2       	ldi	r25, 0x27	; 39
    a18c:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
				return 0;
    a190:	80 e0       	ldi	r24, 0x00	; 0
    a192:	08 95       	ret
			default:
				btn_status = NO_BTN;
    a194:	10 92 ef 2b 	sts	0x2BEF, r1
				break;
    a198:	a2 cf       	rjmp	.-188    	; 0xa0de <menu_set_alarm+0x30>
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
    a19a:	0e 94 ac 12 	call	0x2558	; 0x2558 <btn_check_press>
    a19e:	80 93 ef 2b 	sts	0x2BEF, r24
		switch(btn_status) {
    a1a2:	80 91 ef 2b 	lds	r24, 0x2BEF
    a1a6:	82 30       	cpi	r24, 0x02	; 2
    a1a8:	c1 f1       	breq	.+112    	; 0xa21a <menu_set_alarm+0x16c>
    a1aa:	18 f4       	brcc	.+6      	; 0xa1b2 <menu_set_alarm+0x104>
    a1ac:	81 30       	cpi	r24, 0x01	; 1
    a1ae:	99 f0       	breq	.+38     	; 0xa1d6 <menu_set_alarm+0x128>
    a1b0:	3d c0       	rjmp	.+122    	; 0xa22c <menu_set_alarm+0x17e>
    a1b2:	83 30       	cpi	r24, 0x03	; 3
    a1b4:	f1 f0       	breq	.+60     	; 0xa1f2 <menu_set_alarm+0x144>
    a1b6:	84 30       	cpi	r24, 0x04	; 4
    a1b8:	c9 f5       	brne	.+114    	; 0xa22c <menu_set_alarm+0x17e>
			case BTN4:
				display_clear_screen();
    a1ba:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_alarm_increment_minute();
    a1be:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <display_alarm_increment_minute>
    a1c2:	2f ef       	ldi	r18, 0xFF	; 255
    a1c4:	85 ea       	ldi	r24, 0xA5	; 165
    a1c6:	9e e0       	ldi	r25, 0x0E	; 14
    a1c8:	21 50       	subi	r18, 0x01	; 1
    a1ca:	80 40       	sbci	r24, 0x00	; 0
    a1cc:	90 40       	sbci	r25, 0x00	; 0
    a1ce:	e1 f7       	brne	.-8      	; 0xa1c8 <menu_set_alarm+0x11a>
    a1d0:	00 c0       	rjmp	.+0      	; 0xa1d2 <menu_set_alarm+0x124>
    a1d2:	00 00       	nop
    a1d4:	e2 cf       	rjmp	.-60     	; 0xa19a <menu_set_alarm+0xec>
				_delay_ms(150);
				break;
			case BTN1:
				display_clear_screen();
    a1d6:	0e 94 20 21 	call	0x4240	; 0x4240 <display_clear_screen>
				display_alarm_decrement_minute();
    a1da:	0e 94 20 25 	call	0x4a40	; 0x4a40 <display_alarm_decrement_minute>
    a1de:	2f ef       	ldi	r18, 0xFF	; 255
    a1e0:	85 ea       	ldi	r24, 0xA5	; 165
    a1e2:	9e e0       	ldi	r25, 0x0E	; 14
    a1e4:	21 50       	subi	r18, 0x01	; 1
    a1e6:	80 40       	sbci	r24, 0x00	; 0
    a1e8:	90 40       	sbci	r25, 0x00	; 0
    a1ea:	e1 f7       	brne	.-8      	; 0xa1e4 <menu_set_alarm+0x136>
    a1ec:	00 c0       	rjmp	.+0      	; 0xa1ee <menu_set_alarm+0x140>
    a1ee:	00 00       	nop
    a1f0:	d4 cf       	rjmp	.-88     	; 0xa19a <menu_set_alarm+0xec>
    a1f2:	2f ef       	ldi	r18, 0xFF	; 255
    a1f4:	89 e6       	ldi	r24, 0x69	; 105
    a1f6:	98 e1       	ldi	r25, 0x18	; 24
    a1f8:	21 50       	subi	r18, 0x01	; 1
    a1fa:	80 40       	sbci	r24, 0x00	; 0
    a1fc:	90 40       	sbci	r25, 0x00	; 0
    a1fe:	e1 f7       	brne	.-8      	; 0xa1f8 <menu_set_alarm+0x14a>
    a200:	00 c0       	rjmp	.+0      	; 0xa202 <menu_set_alarm+0x154>
    a202:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	EEPROM_WriteEnv();
    a204:	0e 94 4f 09 	call	0x129e	; 0x129e <EEPROM_WriteEnv>
	display_slide_out_to_bottom();
    a208:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
	
#ifdef SHOW_MANUAL
	display_print_scrolling_text("ALARM IS SET",false);
    a20c:	60 e0       	ldi	r22, 0x00	; 0
    a20e:	89 ec       	ldi	r24, 0xC9	; 201
    a210:	97 e2       	ldi	r25, 0x27	; 39
    a212:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif

	return 1;
    a216:	81 e0       	ldi	r24, 0x01	; 1
    a218:	08 95       	ret
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    a21a:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    a21e:	60 e0       	ldi	r22, 0x00	; 0
    a220:	86 e8       	ldi	r24, 0x86	; 134
    a222:	97 e2       	ldi	r25, 0x27	; 39
    a224:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
				return 0;
    a228:	80 e0       	ldi	r24, 0x00	; 0
    a22a:	08 95       	ret
			default:
				btn_status = NO_BTN;
    a22c:	10 92 ef 2b 	sts	0x2BEF, r1
				break;
    a230:	b4 cf       	rjmp	.-152    	; 0xa19a <menu_set_alarm+0xec>

0000a232 <menu_configuration>:
	}
	return ESP8266_SUCCESS;
}

menu_status_t menu_configuration(SI114X_IRQ_SAMPLE *samples) 
{	
    a232:	cf 93       	push	r28
    a234:	df 93       	push	r29
    a236:	ec 01       	movw	r28, r24
	btn_status = btn_check_press();
    a238:	0e 94 ac 12 	call	0x2558	; 0x2558 <btn_check_press>
    a23c:	80 93 ef 2b 	sts	0x2BEF, r24
	
	//Menu ID select
	if (btn_status != NO_BTN) {
    a240:	80 91 ef 2b 	lds	r24, 0x2BEF
    a244:	88 23       	and	r24, r24
    a246:	f1 f0       	breq	.+60     	; 0xa284 <menu_configuration+0x52>
		if (btn_status == BTN1) {
    a248:	80 91 ef 2b 	lds	r24, 0x2BEF
    a24c:	81 30       	cpi	r24, 0x01	; 1
    a24e:	59 f4       	brne	.+22     	; 0xa266 <menu_configuration+0x34>
			if (env_var.menu_id != NUMBER_OF_CONFIG_MENUS) {
    a250:	80 91 08 2b 	lds	r24, 0x2B08
    a254:	87 30       	cpi	r24, 0x07	; 7
    a256:	21 f0       	breq	.+8      	; 0xa260 <menu_configuration+0x2e>
				env_var.menu_id++;
    a258:	8f 5f       	subi	r24, 0xFF	; 255
    a25a:	80 93 08 2b 	sts	0x2B08, r24
    a25e:	12 c0       	rjmp	.+36     	; 0xa284 <menu_configuration+0x52>
			} else {
				env_var.menu_id = 0;
    a260:	10 92 08 2b 	sts	0x2B08, r1
    a264:	0f c0       	rjmp	.+30     	; 0xa284 <menu_configuration+0x52>
			}
		} else if (btn_status == BTN4) {
    a266:	80 91 ef 2b 	lds	r24, 0x2BEF
    a26a:	84 30       	cpi	r24, 0x04	; 4
    a26c:	59 f4       	brne	.+22     	; 0xa284 <menu_configuration+0x52>
			if (env_var.menu_id != 0) {
    a26e:	80 91 08 2b 	lds	r24, 0x2B08
    a272:	88 23       	and	r24, r24
    a274:	21 f0       	breq	.+8      	; 0xa27e <menu_configuration+0x4c>
				env_var.menu_id--;
    a276:	81 50       	subi	r24, 0x01	; 1
    a278:	80 93 08 2b 	sts	0x2B08, r24
    a27c:	03 c0       	rjmp	.+6      	; 0xa284 <menu_configuration+0x52>
			} else {
				env_var.menu_id = NUMBER_OF_CONFIG_MENUS;
    a27e:	87 e0       	ldi	r24, 0x07	; 7
    a280:	80 93 08 2b 	sts	0x2B08, r24
			}
		}
	}
	
	if (btn_status == BTN1) {
    a284:	80 91 ef 2b 	lds	r24, 0x2BEF
    a288:	81 30       	cpi	r24, 0x01	; 1
    a28a:	29 f4       	brne	.+10     	; 0xa296 <menu_configuration+0x64>
		rtc_disable_time_render();
    a28c:	0e 94 99 13 	call	0x2732	; 0x2732 <rtc_disable_time_render>
		display_slide_out_to_right();
    a290:	0e 94 e6 24 	call	0x49cc	; 0x49cc <display_slide_out_to_right>
    a294:	0f c0       	rjmp	.+30     	; 0xa2b4 <menu_configuration+0x82>
	} else if (btn_status == BTN4) {
    a296:	80 91 ef 2b 	lds	r24, 0x2BEF
    a29a:	84 30       	cpi	r24, 0x04	; 4
    a29c:	29 f4       	brne	.+10     	; 0xa2a8 <menu_configuration+0x76>
		rtc_disable_time_render();
    a29e:	0e 94 99 13 	call	0x2732	; 0x2732 <rtc_disable_time_render>
		display_slide_out_to_left();
    a2a2:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
    a2a6:	06 c0       	rjmp	.+12     	; 0xa2b4 <menu_configuration+0x82>
	} else if (btn_status == BTN3) {
    a2a8:	80 91 ef 2b 	lds	r24, 0x2BEF
    a2ac:	83 30       	cpi	r24, 0x03	; 3
    a2ae:	11 f4       	brne	.+4      	; 0xa2b4 <menu_configuration+0x82>
		display_fade_blink();
    a2b0:	0e 94 53 21 	call	0x42a6	; 0x42a6 <display_fade_blink>
	}
	
	//Switch between menus
	if (btn_status != NO_BTN) {
    a2b4:	80 91 ef 2b 	lds	r24, 0x2BEF
    a2b8:	88 23       	and	r24, r24
    a2ba:	89 f1       	breq	.+98     	; 0xa31e <menu_configuration+0xec>
		switch(env_var.menu_id) {
    a2bc:	40 91 08 2b 	lds	r20, 0x2B08
    a2c0:	50 e0       	ldi	r21, 0x00	; 0
    a2c2:	48 30       	cpi	r20, 0x08	; 8
    a2c4:	51 05       	cpc	r21, r1
    a2c6:	58 f5       	brcc	.+86     	; 0xa31e <menu_configuration+0xec>
    a2c8:	fa 01       	movw	r30, r20
    a2ca:	e7 57       	subi	r30, 0x77	; 119
    a2cc:	fe 4f       	sbci	r31, 0xFE	; 254
    a2ce:	d9 c4       	rjmp	.+2482   	; 0xac82 <__tablejump2__>
			case CONFIG_BRIGHTNESS:
				display_draw_four_letter_word("LGHT");
    a2d0:	86 ed       	ldi	r24, 0xD6	; 214
    a2d2:	97 e2       	ldi	r25, 0x27	; 39
    a2d4:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
				break;
    a2d8:	22 c0       	rjmp	.+68     	; 0xa31e <menu_configuration+0xec>
			case CONFIG_TIME:
				display_draw_four_letter_word("TIME");
    a2da:	83 e4       	ldi	r24, 0x43	; 67
    a2dc:	97 e2       	ldi	r25, 0x27	; 39
    a2de:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
				break;
    a2e2:	1d c0       	rjmp	.+58     	; 0xa31e <menu_configuration+0xec>
			case CONFIG_WIFI:
				display_draw_four_letter_word("WIFI");
    a2e4:	8b ed       	ldi	r24, 0xDB	; 219
    a2e6:	97 e2       	ldi	r25, 0x27	; 39
    a2e8:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
				break;
    a2ec:	18 c0       	rjmp	.+48     	; 0xa31e <menu_configuration+0xec>
			case CONFIG_ALARM:
				display_draw_four_letter_word("ALRM");
    a2ee:	80 ee       	ldi	r24, 0xE0	; 224
    a2f0:	97 e2       	ldi	r25, 0x27	; 39
    a2f2:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
				break;
    a2f6:	13 c0       	rjmp	.+38     	; 0xa31e <menu_configuration+0xec>
			case CONFIG_CALIBRATE:
				display_draw_four_letter_word("CALI");
    a2f8:	85 ee       	ldi	r24, 0xE5	; 229
    a2fa:	97 e2       	ldi	r25, 0x27	; 39
    a2fc:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
				break;
    a300:	0e c0       	rjmp	.+28     	; 0xa31e <menu_configuration+0xec>
			case CONFIG_INFO:
				display_draw_four_letter_word("INFO");
    a302:	8a ee       	ldi	r24, 0xEA	; 234
    a304:	97 e2       	ldi	r25, 0x27	; 39
    a306:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
				break;
    a30a:	09 c0       	rjmp	.+18     	; 0xa31e <menu_configuration+0xec>
			case CONFIG_MUSIC:
				display_draw_four_letter_word("DEMO");
    a30c:	8f ee       	ldi	r24, 0xEF	; 239
    a30e:	97 e2       	ldi	r25, 0x27	; 39
    a310:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
				break;
    a314:	04 c0       	rjmp	.+8      	; 0xa31e <menu_configuration+0xec>
			case CONFIG_EXIT:
				display_draw_four_letter_word("EXIT");
    a316:	89 e7       	ldi	r24, 0x79	; 121
    a318:	97 e2       	ldi	r25, 0x27	; 39
    a31a:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
			default:
				break;
		}	
	}
	
	if (btn_status == BTN1) {
    a31e:	80 91 ef 2b 	lds	r24, 0x2BEF
    a322:	81 30       	cpi	r24, 0x01	; 1
    a324:	19 f4       	brne	.+6      	; 0xa32c <menu_configuration+0xfa>
		display_slide_in_from_left();
    a326:	0e 94 da 24 	call	0x49b4	; 0x49b4 <display_slide_in_from_left>
    a32a:	06 c0       	rjmp	.+12     	; 0xa338 <menu_configuration+0x106>
	} else if (btn_status == BTN4) {
    a32c:	80 91 ef 2b 	lds	r24, 0x2BEF
    a330:	84 30       	cpi	r24, 0x04	; 4
    a332:	11 f4       	brne	.+4      	; 0xa338 <menu_configuration+0x106>
		display_slide_in_from_right();
    a334:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
	}
	
	//Menu actions
	if (btn_status == BTN3) {
    a338:	80 91 ef 2b 	lds	r24, 0x2BEF
    a33c:	83 30       	cpi	r24, 0x03	; 3
    a33e:	09 f0       	breq	.+2      	; 0xa342 <menu_configuration+0x110>
    a340:	60 c0       	rjmp	.+192    	; 0xa402 <menu_configuration+0x1d0>
		switch(env_var.menu_id) {
    a342:	80 91 08 2b 	lds	r24, 0x2B08
    a346:	90 e0       	ldi	r25, 0x00	; 0
    a348:	88 30       	cpi	r24, 0x08	; 8
    a34a:	91 05       	cpc	r25, r1
    a34c:	08 f0       	brcs	.+2      	; 0xa350 <menu_configuration+0x11e>
    a34e:	4d c0       	rjmp	.+154    	; 0xa3ea <menu_configuration+0x1b8>
    a350:	fc 01       	movw	r30, r24
    a352:	ef 56       	subi	r30, 0x6F	; 111
    a354:	fe 4f       	sbci	r31, 0xFE	; 254
    a356:	95 c4       	rjmp	.+2346   	; 0xac82 <__tablejump2__>
			case CONFIG_BRIGHTNESS:
				display_slide_out_to_top();
    a358:	0e 94 f6 24 	call	0x49ec	; 0x49ec <display_slide_out_to_top>
				menu_configure_brightnesss();
    a35c:	b9 d8       	rcall	.-3726   	; 0x94d0 <menu_configure_brightnesss>
				ht1632c_set_brightness(MAX_BRIGHTNESS);
    a35e:	8f e0       	ldi	r24, 0x0F	; 15
    a360:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <ht1632c_set_brightness>
				break;
    a364:	42 c0       	rjmp	.+132    	; 0xa3ea <menu_configuration+0x1b8>
			case CONFIG_TIME:
				display_slide_out_to_top();
    a366:	0e 94 f6 24 	call	0x49ec	; 0x49ec <display_slide_out_to_top>
				menu_set_time();
    a36a:	3d d9       	rcall	.-3462   	; 0x95e6 <menu_set_time>
				break;
    a36c:	3e c0       	rjmp	.+124    	; 0xa3ea <menu_configuration+0x1b8>
			case CONFIG_WIFI:
				display_slide_out_to_top();
    a36e:	0e 94 f6 24 	call	0x49ec	; 0x49ec <display_slide_out_to_top>
				display_print_scrolling_text("CONNECT TO AP AND ENTER THE UPCOMMING IP ADDRESS",false);
    a372:	60 e0       	ldi	r22, 0x00	; 0
    a374:	84 ef       	ldi	r24, 0xF4	; 244
    a376:	97 e2       	ldi	r25, 0x27	; 39
    a378:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
				//Feature: Should draw wifi lines on display here.
				esp8266_on();
    a37c:	0e 94 a0 09 	call	0x1340	; 0x1340 <esp8266_on>
				if (esp8266_setup_webserver(false,true) == ESP8266_SUCCESS) {
    a380:	61 e0       	ldi	r22, 0x01	; 1
    a382:	80 e0       	ldi	r24, 0x00	; 0
    a384:	0e 94 c7 0a 	call	0x158e	; 0x158e <esp8266_setup_webserver>
    a388:	81 30       	cpi	r24, 0x01	; 1
    a38a:	71 f4       	brne	.+28     	; 0xa3a8 <menu_configuration+0x176>
    a38c:	08 c0       	rjmp	.+16     	; 0xa39e <menu_configuration+0x16c>
					while(esp8266_configure_ssid_and_password() != ESP8266_TIMEOUT) {
						btn_status = btn_check_press();
    a38e:	0e 94 ac 12 	call	0x2558	; 0x2558 <btn_check_press>
    a392:	80 93 ef 2b 	sts	0x2BEF, r24
						if (btn_status == BTN4)
    a396:	80 91 ef 2b 	lds	r24, 0x2BEF
    a39a:	84 30       	cpi	r24, 0x04	; 4
    a39c:	51 f0       	breq	.+20     	; 0xa3b2 <menu_configuration+0x180>
				display_slide_out_to_top();
				display_print_scrolling_text("CONNECT TO AP AND ENTER THE UPCOMMING IP ADDRESS",false);
				//Feature: Should draw wifi lines on display here.
				esp8266_on();
				if (esp8266_setup_webserver(false,true) == ESP8266_SUCCESS) {
					while(esp8266_configure_ssid_and_password() != ESP8266_TIMEOUT) {
    a39e:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <esp8266_configure_ssid_and_password>
    a3a2:	83 30       	cpi	r24, 0x03	; 3
    a3a4:	a1 f7       	brne	.-24     	; 0xa38e <menu_configuration+0x15c>
    a3a6:	05 c0       	rjmp	.+10     	; 0xa3b2 <menu_configuration+0x180>
							break;
						}
					}
				} else {
#ifdef SHOW_MANUAL
					display_print_scrolling_text("SOMETHING WENT WRONG",false);
    a3a8:	60 e0       	ldi	r22, 0x00	; 0
    a3aa:	85 e2       	ldi	r24, 0x25	; 37
    a3ac:	98 e2       	ldi	r25, 0x28	; 40
    a3ae:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif					
				}
				esp8266_off();
    a3b2:	0e 94 af 09 	call	0x135e	; 0x135e <esp8266_off>
				break;
    a3b6:	19 c0       	rjmp	.+50     	; 0xa3ea <menu_configuration+0x1b8>
			case CONFIG_ALARM:
				display_slide_out_to_top();
    a3b8:	0e 94 f6 24 	call	0x49ec	; 0x49ec <display_slide_out_to_top>
				menu_set_alarm();
    a3bc:	78 de       	rcall	.-784    	; 0xa0ae <menu_set_alarm>
				break;
    a3be:	15 c0       	rjmp	.+42     	; 0xa3ea <menu_configuration+0x1b8>
			case CONFIG_CALIBRATE:
				display_slide_out_to_top();
    a3c0:	0e 94 f6 24 	call	0x49ec	; 0x49ec <display_slide_out_to_top>
				si114x_baseline_calibration(samples);
    a3c4:	ce 01       	movw	r24, r28
    a3c6:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <si114x_baseline_calibration>
				break;
    a3ca:	0f c0       	rjmp	.+30     	; 0xa3ea <menu_configuration+0x1b8>
			case CONFIG_INFO:
				display_slide_out_to_top();
    a3cc:	0e 94 f6 24 	call	0x49ec	; 0x49ec <display_slide_out_to_top>
				display_print_scrolling_text("MADE BY: ERLEND HESTNES",false);
    a3d0:	60 e0       	ldi	r22, 0x00	; 0
    a3d2:	8a e3       	ldi	r24, 0x3A	; 58
    a3d4:	98 e2       	ldi	r25, 0x28	; 40
    a3d6:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
				break;
    a3da:	07 c0       	rjmp	.+14     	; 0xa3ea <menu_configuration+0x1b8>
			case CONFIG_MUSIC:
				play_sound();
    a3dc:	0e 94 55 45 	call	0x8aaa	; 0x8aaa <play_sound>
				break;
    a3e0:	04 c0       	rjmp	.+8      	; 0xa3ea <menu_configuration+0x1b8>
			case CONFIG_EXIT:
				display_slide_out_to_bottom();
    a3e2:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
				return MENU_CLOSE;
    a3e6:	82 e0       	ldi	r24, 0x02	; 2
    a3e8:	0d c0       	rjmp	.+26     	; 0xa404 <menu_configuration+0x1d2>
			default:
				break;
		}
		env_var.menu_id = 0;
    a3ea:	10 92 08 2b 	sts	0x2B08, r1
		display_slide_out_to_bottom();
    a3ee:	0e 94 03 25 	call	0x4a06	; 0x4a06 <display_slide_out_to_bottom>
		display_draw_four_letter_word("<  >");
    a3f2:	82 e5       	ldi	r24, 0x52	; 82
    a3f4:	98 e2       	ldi	r25, 0x28	; 40
    a3f6:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
		display_slide_in_from_top();
    a3fa:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <display_slide_in_from_top>
	}	
	return MENU_SUCCESS;
    a3fe:	81 e0       	ldi	r24, 0x01	; 1
    a400:	01 c0       	rjmp	.+2      	; 0xa404 <menu_configuration+0x1d2>
    a402:	81 e0       	ldi	r24, 0x01	; 1
}
    a404:	df 91       	pop	r29
    a406:	cf 91       	pop	r28
    a408:	08 95       	ret

0000a40a <menu_state_machine>:
	
	env_var.runtime = 0;
}

menu_status_t menu_state_machine(SI114X_IRQ_SAMPLE *samples) 
{	
    a40a:	ff 92       	push	r15
    a40c:	0f 93       	push	r16
    a40e:	1f 93       	push	r17
    a410:	cf 93       	push	r28
    a412:	df 93       	push	r29
    a414:	cd b7       	in	r28, 0x3d	; 61
    a416:	de b7       	in	r29, 0x3e	; 62
    a418:	e2 97       	sbiw	r28, 0x32	; 50
    a41a:	cd bf       	out	0x3d, r28	; 61
    a41c:	de bf       	out	0x3e, r29	; 62
    a41e:	8c 01       	movw	r16, r24
	//Menu ID select
	if (samples->gesture != NO_GESTURE) {
    a420:	fc 01       	movw	r30, r24
    a422:	82 89       	ldd	r24, Z+18	; 0x12
    a424:	88 23       	and	r24, r24
    a426:	09 f4       	brne	.+2      	; 0xa42a <menu_state_machine+0x20>
    a428:	dd c0       	rjmp	.+442    	; 0xa5e4 <menu_state_machine+0x1da>
		if (samples->gesture == LEFT_SWIPE) {
    a42a:	82 30       	cpi	r24, 0x02	; 2
    a42c:	59 f4       	brne	.+22     	; 0xa444 <menu_state_machine+0x3a>
			if (env_var.menu_id != NUMBER_OF_MENUS) {
    a42e:	80 91 08 2b 	lds	r24, 0x2B08
    a432:	86 30       	cpi	r24, 0x06	; 6
    a434:	21 f0       	breq	.+8      	; 0xa43e <menu_state_machine+0x34>
				env_var.menu_id++;
    a436:	8f 5f       	subi	r24, 0xFF	; 255
    a438:	80 93 08 2b 	sts	0x2B08, r24
    a43c:	10 c0       	rjmp	.+32     	; 0xa45e <menu_state_machine+0x54>
			} else {
				env_var.menu_id = 0;
    a43e:	10 92 08 2b 	sts	0x2B08, r1
    a442:	0d c0       	rjmp	.+26     	; 0xa45e <menu_state_machine+0x54>
			}
		} else if (samples->gesture == RIGHT_SWIPE) {
    a444:	81 30       	cpi	r24, 0x01	; 1
    a446:	f9 f4       	brne	.+62     	; 0xa486 <menu_state_machine+0x7c>
			if (env_var.menu_id != 0) {
    a448:	80 91 08 2b 	lds	r24, 0x2B08
    a44c:	88 23       	and	r24, r24
    a44e:	21 f0       	breq	.+8      	; 0xa458 <menu_state_machine+0x4e>
				env_var.menu_id--;
    a450:	81 50       	subi	r24, 0x01	; 1
    a452:	80 93 08 2b 	sts	0x2B08, r24
    a456:	03 c0       	rjmp	.+6      	; 0xa45e <menu_state_machine+0x54>
			} else {
				env_var.menu_id = NUMBER_OF_MENUS;
    a458:	86 e0       	ldi	r24, 0x06	; 6
    a45a:	80 93 08 2b 	sts	0x2B08, r24
			}
		}
	}
	
	if (samples->gesture == LEFT_SWIPE) {
    a45e:	f8 01       	movw	r30, r16
    a460:	82 89       	ldd	r24, Z+18	; 0x12
    a462:	82 30       	cpi	r24, 0x02	; 2
    a464:	29 f4       	brne	.+10     	; 0xa470 <menu_state_machine+0x66>
		rtc_disable_time_render();
    a466:	0e 94 99 13 	call	0x2732	; 0x2732 <rtc_disable_time_render>
		display_slide_out_to_right();
    a46a:	0e 94 e6 24 	call	0x49cc	; 0x49cc <display_slide_out_to_right>
    a46e:	06 c0       	rjmp	.+12     	; 0xa47c <menu_state_machine+0x72>
	} else if (samples->gesture == RIGHT_SWIPE) {
    a470:	81 30       	cpi	r24, 0x01	; 1
    a472:	21 f4       	brne	.+8      	; 0xa47c <menu_state_machine+0x72>
		rtc_disable_time_render();
    a474:	0e 94 99 13 	call	0x2732	; 0x2732 <rtc_disable_time_render>
		display_slide_out_to_left();
    a478:	0e 94 ee 24 	call	0x49dc	; 0x49dc <display_slide_out_to_left>
	}
	
	//Switch between menus
	if (samples->gesture != NO_GESTURE) {
    a47c:	f8 01       	movw	r30, r16
    a47e:	82 89       	ldd	r24, Z+18	; 0x12
    a480:	88 23       	and	r24, r24
    a482:	09 f4       	brne	.+2      	; 0xa486 <menu_state_machine+0x7c>
    a484:	af c0       	rjmp	.+350    	; 0xa5e4 <menu_state_machine+0x1da>
		switch(env_var.menu_id) {
    a486:	40 91 08 2b 	lds	r20, 0x2B08
    a48a:	50 e0       	ldi	r21, 0x00	; 0
    a48c:	47 30       	cpi	r20, 0x07	; 7
    a48e:	51 05       	cpc	r21, r1
    a490:	c0 f4       	brcc	.+48     	; 0xa4c2 <menu_state_machine+0xb8>
    a492:	fa 01       	movw	r30, r20
    a494:	e7 56       	subi	r30, 0x67	; 103
    a496:	fe 4f       	sbci	r31, 0xFE	; 254
    a498:	f4 c3       	rjmp	.+2024   	; 0xac82 <__tablejump2__>
			case MENU_TIME:
				rtc_enable_time_render();
    a49a:	0e 94 2c 14 	call	0x2858	; 0x2858 <rtc_enable_time_render>
				break;
    a49e:	11 c0       	rjmp	.+34     	; 0xa4c2 <menu_state_machine+0xb8>
			case MENU_DATE:
				menu_draw_date_frame();
    a4a0:	0e 94 94 47 	call	0x8f28	; 0x8f28 <menu_draw_date_frame>
				break;
    a4a4:	0e c0       	rjmp	.+28     	; 0xa4c2 <menu_state_machine+0xb8>
			case MENU_WEEKDAY:
				menu_draw_weekday_frame();
    a4a6:	0e 94 41 49 	call	0x9282	; 0x9282 <menu_draw_weekday_frame>
				break;
    a4aa:	0b c0       	rjmp	.+22     	; 0xa4c2 <menu_state_machine+0xb8>
			case MENU_WEEK:
				menu_draw_week_frame();
    a4ac:	0e 94 9e 48 	call	0x913c	; 0x913c <menu_draw_week_frame>
				break;
    a4b0:	08 c0       	rjmp	.+16     	; 0xa4c2 <menu_state_machine+0xb8>
			case MENU_TEMP:
				menu_draw_temperature_frame();
    a4b2:	0e 94 30 47 	call	0x8e60	; 0x8e60 <menu_draw_temperature_frame>
				break;
    a4b6:	05 c0       	rjmp	.+10     	; 0xa4c2 <menu_state_machine+0xb8>
			case MENU_BATTERY:
				menu_draw_battery_frame();
    a4b8:	0e 94 9a 49 	call	0x9334	; 0x9334 <menu_draw_battery_frame>
				break;
    a4bc:	02 c0       	rjmp	.+4      	; 0xa4c2 <menu_state_machine+0xb8>
			case MENU_CONFIG:
				menu_draw_config_frame();
    a4be:	0e 94 f2 49 	call	0x93e4	; 0x93e4 <menu_draw_config_frame>
			default:
				break;
		}	
	}
	
	if (samples->gesture == LEFT_SWIPE) {
    a4c2:	f8 01       	movw	r30, r16
    a4c4:	82 89       	ldd	r24, Z+18	; 0x12
    a4c6:	82 30       	cpi	r24, 0x02	; 2
    a4c8:	19 f4       	brne	.+6      	; 0xa4d0 <menu_state_machine+0xc6>
		display_slide_in_from_left();
    a4ca:	0e 94 da 24 	call	0x49b4	; 0x49b4 <display_slide_in_from_left>
    a4ce:	04 c0       	rjmp	.+8      	; 0xa4d8 <menu_state_machine+0xce>
	} else if (samples->gesture == RIGHT_SWIPE) {
    a4d0:	81 30       	cpi	r24, 0x01	; 1
    a4d2:	11 f4       	brne	.+4      	; 0xa4d8 <menu_state_machine+0xce>
		display_slide_in_from_right();
    a4d4:	0e 94 dd 24 	call	0x49ba	; 0x49ba <display_slide_in_from_right>
	}

	if (samples->gesture == PAUSE) {
    a4d8:	f8 01       	movw	r30, r16
    a4da:	82 89       	ldd	r24, Z+18	; 0x12
    a4dc:	83 30       	cpi	r24, 0x03	; 3
    a4de:	09 f0       	breq	.+2      	; 0xa4e2 <menu_state_machine+0xd8>
    a4e0:	81 c0       	rjmp	.+258    	; 0xa5e4 <menu_state_machine+0x1da>
		if (env_var.menu_id == MENU_CONFIG) {
    a4e2:	80 91 08 2b 	lds	r24, 0x2B08
    a4e6:	81 30       	cpi	r24, 0x01	; 1
    a4e8:	29 f5       	brne	.+74     	; 0xa534 <menu_state_machine+0x12a>
			display_fade_blink();
    a4ea:	0e 94 53 21 	call	0x42a6	; 0x42a6 <display_fade_blink>
			display_slide_out_to_top();
    a4ee:	0e 94 f6 24 	call	0x49ec	; 0x49ec <display_slide_out_to_top>
#ifdef SHOW_MANUAL
			display_print_scrolling_text("CONFIG MENU. USE BUTTONS",false);
    a4f2:	60 e0       	ldi	r22, 0x00	; 0
    a4f4:	87 e5       	ldi	r24, 0x57	; 87
    a4f6:	98 e2       	ldi	r25, 0x28	; 40
    a4f8:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
			display_draw_four_letter_word("<  >");
    a4fc:	82 e5       	ldi	r24, 0x52	; 82
    a4fe:	98 e2       	ldi	r25, 0x28	; 40
    a500:	0e 94 90 24 	call	0x4920	; 0x4920 <display_draw_four_letter_word>
			display_slide_in_from_bottom();
    a504:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <display_slide_in_from_bottom>
			env_var.menu_id = 0;
    a508:	10 92 08 2b 	sts	0x2B08, r1
			while(menu_configuration(samples) == MENU_SUCCESS);
    a50c:	c8 01       	movw	r24, r16
    a50e:	91 de       	rcall	.-734    	; 0xa232 <menu_configuration>
    a510:	81 30       	cpi	r24, 0x01	; 1
    a512:	e1 f3       	breq	.-8      	; 0xa50c <menu_state_machine+0x102>
			env_var.menu_id = 0;
    a514:	10 92 08 2b 	sts	0x2B08, r1
			rtc_enable_time_render();
    a518:	0e 94 2c 14 	call	0x2858	; 0x2858 <rtc_enable_time_render>
			display_slide_in_from_top();
    a51c:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <display_slide_in_from_top>
    a520:	ff ef       	ldi	r31, 0xFF	; 255
    a522:	27 ea       	ldi	r18, 0xA7	; 167
    a524:	81 e6       	ldi	r24, 0x61	; 97
    a526:	f1 50       	subi	r31, 0x01	; 1
    a528:	20 40       	sbci	r18, 0x00	; 0
    a52a:	80 40       	sbci	r24, 0x00	; 0
    a52c:	e1 f7       	brne	.-8      	; 0xa526 <menu_state_machine+0x11c>
    a52e:	00 c0       	rjmp	.+0      	; 0xa530 <menu_state_machine+0x126>
    a530:	00 00       	nop
    a532:	58 c0       	rjmp	.+176    	; 0xa5e4 <menu_state_machine+0x1da>
			_delay_ms(1000);
		} else if (env_var.menu_id == MENU_TEMP) {
    a534:	83 30       	cpi	r24, 0x03	; 3
    a536:	09 f0       	breq	.+2      	; 0xa53a <menu_state_machine+0x130>
    a538:	55 c0       	rjmp	.+170    	; 0xa5e4 <menu_state_machine+0x1da>
			display_fade_blink();			
    a53a:	0e 94 53 21 	call	0x42a6	; 0x42a6 <display_fade_blink>
			display_slide_out_to_top();
    a53e:	0e 94 f6 24 	call	0x49ec	; 0x49ec <display_slide_out_to_top>
			esp8266_status_t status;
			start_loading();
    a542:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <start_loading>
			status = get_internet_variables(true,true);
    a546:	61 e0       	ldi	r22, 0x01	; 1
    a548:	81 e0       	ldi	r24, 0x01	; 1
    a54a:	0e 94 ba 45 	call	0x8b74	; 0x8b74 <get_internet_variables>
    a54e:	18 2f       	mov	r17, r24
			esp8266_off(); //guard
    a550:	0e 94 af 09 	call	0x135e	; 0x135e <esp8266_off>
			stop_loading();
    a554:	0e 94 b5 45 	call	0x8b6a	; 0x8b6a <stop_loading>
			
			if (status == ESP8266_SUCCESS) {
    a558:	11 30       	cpi	r17, 0x01	; 1
    a55a:	d9 f5       	brne	.+118    	; 0xa5d2 <menu_state_machine+0x1c8>
				char weather_info[50];
				strcpy(weather_info, "WEATHER FOR TRONDHEIM NORWAY: ");
    a55c:	8f e1       	ldi	r24, 0x1F	; 31
    a55e:	e0 e7       	ldi	r30, 0x70	; 112
    a560:	f8 e2       	ldi	r31, 0x28	; 40
    a562:	8e 01       	movw	r16, r28
    a564:	0f 5f       	subi	r16, 0xFF	; 255
    a566:	1f 4f       	sbci	r17, 0xFF	; 255
    a568:	d8 01       	movw	r26, r16
    a56a:	01 90       	ld	r0, Z+
    a56c:	0d 92       	st	X+, r0
    a56e:	8a 95       	dec	r24
    a570:	e1 f7       	brne	.-8      	; 0xa56a <menu_state_machine+0x160>
				strcat(weather_info,env_var.temperature);
    a572:	6f e8       	ldi	r22, 0x8F	; 143
    a574:	7a e2       	ldi	r23, 0x2A	; 42
    a576:	c8 01       	movw	r24, r16
    a578:	10 d5       	rcall	.+2592   	; 0xaf9a <strcat>
				strcat(weather_info,"C ");
    a57a:	f8 01       	movw	r30, r16
    a57c:	01 90       	ld	r0, Z+
    a57e:	00 20       	and	r0, r0
    a580:	e9 f7       	brne	.-6      	; 0xa57c <menu_state_machine+0x172>
    a582:	31 97       	sbiw	r30, 0x01	; 1
    a584:	83 e4       	ldi	r24, 0x43	; 67
    a586:	90 e2       	ldi	r25, 0x20	; 32
    a588:	a0 e0       	ldi	r26, 0x00	; 0
    a58a:	80 83       	st	Z, r24
    a58c:	91 83       	std	Z+1, r25	; 0x01
    a58e:	a2 83       	std	Z+2, r26	; 0x02
				uint8_t i = 0;
				while(env_var.weather_info[i]) {
    a590:	80 91 92 2a 	lds	r24, 0x2A92
    a594:	88 23       	and	r24, r24
    a596:	91 f0       	breq	.+36     	; 0xa5bc <menu_state_machine+0x1b2>
    a598:	00 e0       	ldi	r16, 0x00	; 0
    a59a:	10 e0       	ldi	r17, 0x00	; 0
			if (status == ESP8266_SUCCESS) {
				char weather_info[50];
				strcpy(weather_info, "WEATHER FOR TRONDHEIM NORWAY: ");
				strcat(weather_info,env_var.temperature);
				strcat(weather_info,"C ");
				uint8_t i = 0;
    a59c:	f1 2c       	mov	r15, r1
				while(env_var.weather_info[i]) {
					env_var.weather_info[i] = toupper(env_var.weather_info[i]);
    a59e:	90 e0       	ldi	r25, 0x00	; 0
    a5a0:	e4 d4       	rcall	.+2504   	; 0xaf6a <toupper>
    a5a2:	f8 01       	movw	r30, r16
    a5a4:	eb 59       	subi	r30, 0x9B	; 155
    a5a6:	f5 4d       	sbci	r31, 0xD5	; 213
    a5a8:	85 a7       	std	Z+45, r24	; 0x2d
					i++;
    a5aa:	f3 94       	inc	r15
				char weather_info[50];
				strcpy(weather_info, "WEATHER FOR TRONDHEIM NORWAY: ");
				strcat(weather_info,env_var.temperature);
				strcat(weather_info,"C ");
				uint8_t i = 0;
				while(env_var.weather_info[i]) {
    a5ac:	0f 2d       	mov	r16, r15
    a5ae:	10 e0       	ldi	r17, 0x00	; 0
    a5b0:	f8 01       	movw	r30, r16
    a5b2:	eb 59       	subi	r30, 0x9B	; 155
    a5b4:	f5 4d       	sbci	r31, 0xD5	; 213
    a5b6:	85 a5       	ldd	r24, Z+45	; 0x2d
    a5b8:	81 11       	cpse	r24, r1
    a5ba:	f1 cf       	rjmp	.-30     	; 0xa59e <menu_state_machine+0x194>
					env_var.weather_info[i] = toupper(env_var.weather_info[i]);
					i++;
				}
				strcat(weather_info,env_var.weather_info);
    a5bc:	62 e9       	ldi	r22, 0x92	; 146
    a5be:	7a e2       	ldi	r23, 0x2A	; 42
    a5c0:	ce 01       	movw	r24, r28
    a5c2:	01 96       	adiw	r24, 0x01	; 1
    a5c4:	ea d4       	rcall	.+2516   	; 0xaf9a <strcat>
#ifdef SHOW_MANUAL
				display_print_scrolling_text(weather_info, false);
    a5c6:	60 e0       	ldi	r22, 0x00	; 0
    a5c8:	ce 01       	movw	r24, r28
    a5ca:	01 96       	adiw	r24, 0x01	; 1
    a5cc:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
    a5d0:	05 c0       	rjmp	.+10     	; 0xa5dc <menu_state_machine+0x1d2>
#endif
			} else {
#ifdef SHOW_MANUAL
				display_print_scrolling_text("COULD NOT GET TEMPERATURE.", false);
    a5d2:	60 e0       	ldi	r22, 0x00	; 0
    a5d4:	8f e8       	ldi	r24, 0x8F	; 143
    a5d6:	98 e2       	ldi	r25, 0x28	; 40
    a5d8:	0e 94 b3 23 	call	0x4766	; 0x4766 <display_print_scrolling_text>
#endif
			}
			menu_draw_temperature_frame();
    a5dc:	0e 94 30 47 	call	0x8e60	; 0x8e60 <menu_draw_temperature_frame>
			display_slide_in_from_top();
    a5e0:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <display_slide_in_from_top>
		} 
	}
	return ESP8266_SUCCESS;
}
    a5e4:	81 e0       	ldi	r24, 0x01	; 1
    a5e6:	e2 96       	adiw	r28, 0x32	; 50
    a5e8:	cd bf       	out	0x3d, r28	; 61
    a5ea:	de bf       	out	0x3e, r29	; 62
    a5ec:	df 91       	pop	r29
    a5ee:	cf 91       	pop	r28
    a5f0:	1f 91       	pop	r17
    a5f2:	0f 91       	pop	r16
    a5f4:	ff 90       	pop	r15
    a5f6:	08 95       	ret

0000a5f8 <__vector_16>:

	return 1;
}

ISR(TCC0_CCA_vect) 
{
    a5f8:	1f 92       	push	r1
    a5fa:	0f 92       	push	r0
    a5fc:	0f b6       	in	r0, 0x3f	; 63
    a5fe:	0f 92       	push	r0
    a600:	11 24       	eor	r1, r1
    a602:	0b b6       	in	r0, 0x3b	; 59
    a604:	0f 92       	push	r0
    a606:	2f 93       	push	r18
    a608:	3f 93       	push	r19
    a60a:	4f 93       	push	r20
    a60c:	5f 93       	push	r21
    a60e:	6f 93       	push	r22
    a610:	7f 93       	push	r23
    a612:	8f 93       	push	r24
    a614:	9f 93       	push	r25
    a616:	af 93       	push	r26
    a618:	bf 93       	push	r27
    a61a:	ef 93       	push	r30
    a61c:	ff 93       	push	r31
	display_show_loading_square();
    a61e:	0e 94 79 22 	call	0x44f2	; 0x44f2 <display_show_loading_square>
    a622:	ff 91       	pop	r31
    a624:	ef 91       	pop	r30
    a626:	bf 91       	pop	r27
    a628:	af 91       	pop	r26
    a62a:	9f 91       	pop	r25
    a62c:	8f 91       	pop	r24
    a62e:	7f 91       	pop	r23
    a630:	6f 91       	pop	r22
    a632:	5f 91       	pop	r21
    a634:	4f 91       	pop	r20
    a636:	3f 91       	pop	r19
    a638:	2f 91       	pop	r18
    a63a:	0f 90       	pop	r0
    a63c:	0b be       	out	0x3b, r0	; 59
    a63e:	0f 90       	pop	r0
    a640:	0f be       	out	0x3f, r0	; 63
    a642:	0f 90       	pop	r0
    a644:	1f 90       	pop	r1
    a646:	18 95       	reti

0000a648 <time_get_day_name>:
		days_count += time_get_days_in_month(i,year);
	}
	days_count += day;
	
	return days_count;
}
    a648:	90 e0       	ldi	r25, 0x00	; 0
    a64a:	fc 01       	movw	r30, r24
    a64c:	31 97       	sbiw	r30, 0x01	; 1
    a64e:	e8 30       	cpi	r30, 0x08	; 8
    a650:	f1 05       	cpc	r31, r1
    a652:	c0 f4       	brcc	.+48     	; 0xa684 <time_get_day_name+0x3c>
    a654:	e0 56       	subi	r30, 0x60	; 96
    a656:	fe 4f       	sbci	r31, 0xFE	; 254
    a658:	14 c3       	rjmp	.+1576   	; 0xac82 <__tablejump2__>
    a65a:	8a ea       	ldi	r24, 0xAA	; 170
    a65c:	98 e2       	ldi	r25, 0x28	; 40
    a65e:	08 95       	ret
    a660:	82 eb       	ldi	r24, 0xB2	; 178
    a662:	98 e2       	ldi	r25, 0x28	; 40
    a664:	08 95       	ret
    a666:	86 eb       	ldi	r24, 0xB6	; 182
    a668:	98 e2       	ldi	r25, 0x28	; 40
    a66a:	08 95       	ret
    a66c:	8a eb       	ldi	r24, 0xBA	; 186
    a66e:	98 e2       	ldi	r25, 0x28	; 40
    a670:	08 95       	ret
    a672:	8e eb       	ldi	r24, 0xBE	; 190
    a674:	98 e2       	ldi	r25, 0x28	; 40
    a676:	08 95       	ret
    a678:	82 ec       	ldi	r24, 0xC2	; 194
    a67a:	98 e2       	ldi	r25, 0x28	; 40
    a67c:	08 95       	ret
    a67e:	86 ec       	ldi	r24, 0xC6	; 198
    a680:	98 e2       	ldi	r25, 0x28	; 40
    a682:	08 95       	ret
    a684:	86 ec       	ldi	r24, 0xC6	; 198
    a686:	98 e2       	ldi	r25, 0x28	; 40
    a688:	08 95       	ret
    a68a:	8e ea       	ldi	r24, 0xAE	; 174
    a68c:	98 e2       	ldi	r25, 0x28	; 40
    a68e:	08 95       	ret

0000a690 <time_get_month_name>:
    a690:	90 e0       	ldi	r25, 0x00	; 0
    a692:	fc 01       	movw	r30, r24
    a694:	31 97       	sbiw	r30, 0x01	; 1
    a696:	ec 30       	cpi	r30, 0x0C	; 12
    a698:	f1 05       	cpc	r31, r1
    a69a:	20 f5       	brcc	.+72     	; 0xa6e4 <time_get_month_name+0x54>
    a69c:	e8 55       	subi	r30, 0x58	; 88
    a69e:	fe 4f       	sbci	r31, 0xFE	; 254
    a6a0:	f0 c2       	rjmp	.+1504   	; 0xac82 <__tablejump2__>
    a6a2:	88 ec       	ldi	r24, 0xC8	; 200
    a6a4:	98 e2       	ldi	r25, 0x28	; 40
    a6a6:	08 95       	ret
    a6a8:	80 ed       	ldi	r24, 0xD0	; 208
    a6aa:	98 e2       	ldi	r25, 0x28	; 40
    a6ac:	08 95       	ret
    a6ae:	84 ed       	ldi	r24, 0xD4	; 212
    a6b0:	98 e2       	ldi	r25, 0x28	; 40
    a6b2:	08 95       	ret
    a6b4:	88 ed       	ldi	r24, 0xD8	; 216
    a6b6:	98 e2       	ldi	r25, 0x28	; 40
    a6b8:	08 95       	ret
    a6ba:	8c ed       	ldi	r24, 0xDC	; 220
    a6bc:	98 e2       	ldi	r25, 0x28	; 40
    a6be:	08 95       	ret
    a6c0:	80 ee       	ldi	r24, 0xE0	; 224
    a6c2:	98 e2       	ldi	r25, 0x28	; 40
    a6c4:	08 95       	ret
    a6c6:	84 ee       	ldi	r24, 0xE4	; 228
    a6c8:	98 e2       	ldi	r25, 0x28	; 40
    a6ca:	08 95       	ret
    a6cc:	88 ee       	ldi	r24, 0xE8	; 232
    a6ce:	98 e2       	ldi	r25, 0x28	; 40
    a6d0:	08 95       	ret
    a6d2:	8c ee       	ldi	r24, 0xEC	; 236
    a6d4:	98 e2       	ldi	r25, 0x28	; 40
    a6d6:	08 95       	ret
    a6d8:	80 ef       	ldi	r24, 0xF0	; 240
    a6da:	98 e2       	ldi	r25, 0x28	; 40
    a6dc:	08 95       	ret
    a6de:	84 ef       	ldi	r24, 0xF4	; 244
    a6e0:	98 e2       	ldi	r25, 0x28	; 40
    a6e2:	08 95       	ret
    a6e4:	86 ec       	ldi	r24, 0xC6	; 198
    a6e6:	98 e2       	ldi	r25, 0x28	; 40
    a6e8:	08 95       	ret
    a6ea:	8c ec       	ldi	r24, 0xCC	; 204
    a6ec:	98 e2       	ldi	r25, 0x28	; 40
    a6ee:	08 95       	ret

0000a6f0 <time_is_leap_year>:
    a6f0:	ac 01       	movw	r20, r24
    a6f2:	83 70       	andi	r24, 0x03	; 3
    a6f4:	99 27       	eor	r25, r25
    a6f6:	89 2b       	or	r24, r25
    a6f8:	99 f4       	brne	.+38     	; 0xa720 <time_is_leap_year+0x30>
    a6fa:	9a 01       	movw	r18, r20
    a6fc:	36 95       	lsr	r19
    a6fe:	27 95       	ror	r18
    a700:	36 95       	lsr	r19
    a702:	27 95       	ror	r18
    a704:	ab e7       	ldi	r26, 0x7B	; 123
    a706:	b4 e1       	ldi	r27, 0x14	; 20
    a708:	c2 d2       	rcall	.+1412   	; 0xac8e <__umulhisi3>
    a70a:	96 95       	lsr	r25
    a70c:	87 95       	ror	r24
    a70e:	64 e6       	ldi	r22, 0x64	; 100
    a710:	68 9f       	mul	r22, r24
    a712:	90 01       	movw	r18, r0
    a714:	69 9f       	mul	r22, r25
    a716:	30 0d       	add	r19, r0
    a718:	11 24       	eor	r1, r1
    a71a:	42 17       	cp	r20, r18
    a71c:	53 07       	cpc	r21, r19
    a71e:	c9 f4       	brne	.+50     	; 0xa752 <time_is_leap_year+0x62>
    a720:	9a 01       	movw	r18, r20
    a722:	32 95       	swap	r19
    a724:	22 95       	swap	r18
    a726:	2f 70       	andi	r18, 0x0F	; 15
    a728:	23 27       	eor	r18, r19
    a72a:	3f 70       	andi	r19, 0x0F	; 15
    a72c:	23 27       	eor	r18, r19
    a72e:	ae e3       	ldi	r26, 0x3E	; 62
    a730:	ba e0       	ldi	r27, 0x0A	; 10
    a732:	ad d2       	rcall	.+1370   	; 0xac8e <__umulhisi3>
    a734:	20 e9       	ldi	r18, 0x90	; 144
    a736:	31 e0       	ldi	r19, 0x01	; 1
    a738:	82 9f       	mul	r24, r18
    a73a:	b0 01       	movw	r22, r0
    a73c:	83 9f       	mul	r24, r19
    a73e:	70 0d       	add	r23, r0
    a740:	92 9f       	mul	r25, r18
    a742:	70 0d       	add	r23, r0
    a744:	11 24       	eor	r1, r1
    a746:	81 e0       	ldi	r24, 0x01	; 1
    a748:	46 17       	cp	r20, r22
    a74a:	57 07       	cpc	r21, r23
    a74c:	19 f0       	breq	.+6      	; 0xa754 <time_is_leap_year+0x64>
    a74e:	80 e0       	ldi	r24, 0x00	; 0
    a750:	08 95       	ret
    a752:	81 e0       	ldi	r24, 0x01	; 1
    a754:	08 95       	ret

0000a756 <time_get_days_in_month>:
    a756:	48 2f       	mov	r20, r24
    a758:	cb 01       	movw	r24, r22
    a75a:	50 e0       	ldi	r21, 0x00	; 0
    a75c:	fa 01       	movw	r30, r20
    a75e:	31 97       	sbiw	r30, 0x01	; 1
    a760:	ec 30       	cpi	r30, 0x0C	; 12
    a762:	f1 05       	cpc	r31, r1
    a764:	50 f4       	brcc	.+20     	; 0xa77a <time_get_days_in_month+0x24>
    a766:	ec 54       	subi	r30, 0x4C	; 76
    a768:	fe 4f       	sbci	r31, 0xFE	; 254
    a76a:	8b c2       	rjmp	.+1302   	; 0xac82 <__tablejump2__>
    a76c:	8f e1       	ldi	r24, 0x1F	; 31
    a76e:	08 95       	ret
    a770:	bf df       	rcall	.-130    	; 0xa6f0 <time_is_leap_year>
    a772:	88 23       	and	r24, r24
    a774:	31 f0       	breq	.+12     	; 0xa782 <time_get_days_in_month+0x2c>
    a776:	8d e1       	ldi	r24, 0x1D	; 29
    a778:	08 95       	ret
    a77a:	80 e0       	ldi	r24, 0x00	; 0
    a77c:	08 95       	ret
    a77e:	8e e1       	ldi	r24, 0x1E	; 30
    a780:	08 95       	ret
    a782:	8c e1       	ldi	r24, 0x1C	; 28
    a784:	08 95       	ret

0000a786 <time_get_weekday>:
	}
	return 0;
}

uint8_t time_get_weekday(uint8_t day, uint8_t month, uint16_t year)
{
    a786:	cf 92       	push	r12
    a788:	df 92       	push	r13
    a78a:	ef 92       	push	r14
    a78c:	ff 92       	push	r15
    a78e:	0f 93       	push	r16
    a790:	1f 93       	push	r17
    a792:	cf 93       	push	r28
    a794:	df 93       	push	r29
    a796:	cd b7       	in	r28, 0x3d	; 61
    a798:	de b7       	in	r29, 0x3e	; 62
    a79a:	68 97       	sbiw	r28, 0x18	; 24
    a79c:	cd bf       	out	0x3d, r28	; 61
    a79e:	de bf       	out	0x3e, r29	; 62
    a7a0:	8a 01       	movw	r16, r20
	int16_t yyyy = year;
	int16_t mm = month;
    a7a2:	c6 2e       	mov	r12, r22
    a7a4:	d1 2c       	mov	r13, r1
	int16_t day_of_year_number;
	int16_t jan_1_weekday;
	int16_t weekday;

	int16_t i,j,k,l;
	int16_t mnth[12] = {0,31,59,90,120,151,181,212,243,273,304,334};
    a7a6:	98 e1       	ldi	r25, 0x18	; 24
    a7a8:	ee eb       	ldi	r30, 0xBE	; 190
    a7aa:	f0 e2       	ldi	r31, 0x20	; 32
    a7ac:	de 01       	movw	r26, r28
    a7ae:	11 96       	adiw	r26, 0x01	; 1
    a7b0:	01 90       	ld	r0, Z+
    a7b2:	0d 92       	st	X+, r0
    a7b4:	9a 95       	dec	r25
    a7b6:	e1 f7       	brne	.-8      	; 0xa7b0 <time_get_weekday+0x2a>

	// Set DayofYear Number for yyyy mm dd
	day_of_year_number = dd + mnth[mm-1];
    a7b8:	f6 01       	movw	r30, r12
    a7ba:	31 97       	sbiw	r30, 0x01	; 1
    a7bc:	ee 0f       	add	r30, r30
    a7be:	ff 1f       	adc	r31, r31
    a7c0:	21 e0       	ldi	r18, 0x01	; 1
    a7c2:	30 e0       	ldi	r19, 0x00	; 0
    a7c4:	2c 0f       	add	r18, r28
    a7c6:	3d 1f       	adc	r19, r29
    a7c8:	e2 0f       	add	r30, r18
    a7ca:	f3 1f       	adc	r31, r19
    a7cc:	e0 80       	ld	r14, Z
    a7ce:	f1 80       	ldd	r15, Z+1	; 0x01
    a7d0:	e8 0e       	add	r14, r24
    a7d2:	f1 1c       	adc	r15, r1

	// Increase of Dayof Year Number by 1, if year is leapyear and month is february
	if ((time_is_leap_year(yyyy) == true) && (mm == 2))
    a7d4:	ca 01       	movw	r24, r20
    a7d6:	8c df       	rcall	.-232    	; 0xa6f0 <time_is_leap_year>
    a7d8:	88 23       	and	r24, r24
    a7da:	39 f0       	breq	.+14     	; 0xa7ea <time_get_weekday+0x64>
    a7dc:	32 e0       	ldi	r19, 0x02	; 2
    a7de:	c3 16       	cp	r12, r19
    a7e0:	d1 04       	cpc	r13, r1
    a7e2:	19 f4       	brne	.+6      	; 0xa7ea <time_get_weekday+0x64>
	day_of_year_number += 1;
    a7e4:	8f ef       	ldi	r24, 0xFF	; 255
    a7e6:	e8 1a       	sub	r14, r24
    a7e8:	f8 0a       	sbc	r15, r24

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
    a7ea:	01 50       	subi	r16, 0x01	; 1
    a7ec:	11 09       	sbc	r17, r1
    a7ee:	e4 e6       	ldi	r30, 0x64	; 100
    a7f0:	f0 e0       	ldi	r31, 0x00	; 0
    a7f2:	c8 01       	movw	r24, r16
    a7f4:	bf 01       	movw	r22, r30
    a7f6:	10 d2       	rcall	.+1056   	; 0xac18 <__divmodhi4>
    a7f8:	9c 01       	movw	r18, r24
    a7fa:	6c 01       	movw	r12, r24
	j = (yyyy - 1) - i;
    a7fc:	c8 01       	movw	r24, r16
    a7fe:	82 1b       	sub	r24, r18
    a800:	93 0b       	sbc	r25, r19
	k = i + i/4;
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    a802:	bf 01       	movw	r22, r30
    a804:	09 d2       	rcall	.+1042   	; 0xac18 <__divmodhi4>
    a806:	63 70       	andi	r22, 0x03	; 3
    a808:	70 78       	andi	r23, 0x80	; 128
    a80a:	77 23       	and	r23, r23
    a80c:	34 f4       	brge	.+12     	; 0xa81a <time_get_weekday+0x94>
    a80e:	61 50       	subi	r22, 0x01	; 1
    a810:	71 09       	sbc	r23, r1
    a812:	6c 6f       	ori	r22, 0xFC	; 252
    a814:	7f 6f       	ori	r23, 0xFF	; 255
    a816:	6f 5f       	subi	r22, 0xFF	; 255
    a818:	7f 4f       	sbci	r23, 0xFF	; 255
    a81a:	cb 01       	movw	r24, r22
    a81c:	88 0f       	add	r24, r24
    a81e:	99 1f       	adc	r25, r25
    a820:	88 0f       	add	r24, r24
    a822:	99 1f       	adc	r25, r25
    a824:	68 0f       	add	r22, r24
    a826:	79 1f       	adc	r23, r25
	day_of_year_number += 1;

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
	j = (yyyy - 1) - i;
	k = i + i/4;
    a828:	a9 01       	movw	r20, r18
    a82a:	dd 20       	and	r13, r13
    a82c:	14 f4       	brge	.+4      	; 0xa832 <time_get_weekday+0xac>
    a82e:	4d 5f       	subi	r20, 0xFD	; 253
    a830:	5f 4f       	sbci	r21, 0xFF	; 255
    a832:	ca 01       	movw	r24, r20
    a834:	95 95       	asr	r25
    a836:	87 95       	ror	r24
    a838:	95 95       	asr	r25
    a83a:	87 95       	ror	r24
    a83c:	28 0f       	add	r18, r24
    a83e:	39 1f       	adc	r19, r25
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    a840:	cb 01       	movw	r24, r22
    a842:	82 0f       	add	r24, r18
    a844:	93 1f       	adc	r25, r19
    a846:	e7 e0       	ldi	r30, 0x07	; 7
    a848:	f0 e0       	ldi	r31, 0x00	; 0
    a84a:	bf 01       	movw	r22, r30
    a84c:	e5 d1       	rcall	.+970    	; 0xac18 <__divmodhi4>

	// Calcuate the WeekDay for the given date
	l= day_of_year_number + (jan_1_weekday - 1);
    a84e:	8e 0d       	add	r24, r14
    a850:	9f 1d       	adc	r25, r15
	weekday = 1 + ((l - 1) % 7);
    a852:	01 97       	sbiw	r24, 0x01	; 1
    a854:	bf 01       	movw	r22, r30
    a856:	e0 d1       	rcall	.+960    	; 0xac18 <__divmodhi4>

	return weekday;
}
    a858:	8f 5f       	subi	r24, 0xFF	; 255
    a85a:	68 96       	adiw	r28, 0x18	; 24
    a85c:	cd bf       	out	0x3d, r28	; 61
    a85e:	de bf       	out	0x3e, r29	; 62
    a860:	df 91       	pop	r29
    a862:	cf 91       	pop	r28
    a864:	1f 91       	pop	r17
    a866:	0f 91       	pop	r16
    a868:	ff 90       	pop	r15
    a86a:	ef 90       	pop	r14
    a86c:	df 90       	pop	r13
    a86e:	cf 90       	pop	r12
    a870:	08 95       	ret

0000a872 <time_get_weeknumber>:
		return false;
}

// Static Method to return ISO WeekNumber (1-53) for a given year
int16_t time_get_weeknumber(uint8_t day, uint8_t month, uint16_t year) 
{	    
    a872:	cf 92       	push	r12
    a874:	df 92       	push	r13
    a876:	ef 92       	push	r14
    a878:	ff 92       	push	r15
    a87a:	0f 93       	push	r16
    a87c:	1f 93       	push	r17
    a87e:	cf 93       	push	r28
    a880:	df 93       	push	r29
    a882:	cd b7       	in	r28, 0x3d	; 61
    a884:	de b7       	in	r29, 0x3e	; 62
    a886:	68 97       	sbiw	r28, 0x18	; 24
    a888:	cd bf       	out	0x3d, r28	; 61
    a88a:	de bf       	out	0x3e, r29	; 62
    a88c:	7a 01       	movw	r14, r20
	int16_t yyyy = year;
	int16_t mm= month;
    a88e:	c6 2e       	mov	r12, r22
    a890:	d1 2c       	mov	r13, r1
	int16_t day_of_year_number;
	int16_t jan_1_weekday;
	int16_t week_number = 0, weekday;
	    
	int16_t i,j,k,l,m,n;
	int16_t mnth[12] = {0,31,59,90,120,151,181,212,243,273,304,334};
    a892:	98 e1       	ldi	r25, 0x18	; 24
    a894:	ee eb       	ldi	r30, 0xBE	; 190
    a896:	f0 e2       	ldi	r31, 0x20	; 32
    a898:	de 01       	movw	r26, r28
    a89a:	11 96       	adiw	r26, 0x01	; 1
    a89c:	01 90       	ld	r0, Z+
    a89e:	0d 92       	st	X+, r0
    a8a0:	9a 95       	dec	r25
    a8a2:	e1 f7       	brne	.-8      	; 0xa89c <time_get_weeknumber+0x2a>

	int16_t year_number;
	    
	// Set DayofYear Number for yyyy mm dd
	day_of_year_number = dd + mnth[mm-1];
    a8a4:	f6 01       	movw	r30, r12
    a8a6:	31 97       	sbiw	r30, 0x01	; 1
    a8a8:	ee 0f       	add	r30, r30
    a8aa:	ff 1f       	adc	r31, r31
    a8ac:	21 e0       	ldi	r18, 0x01	; 1
    a8ae:	30 e0       	ldi	r19, 0x00	; 0
    a8b0:	2c 0f       	add	r18, r28
    a8b2:	3d 1f       	adc	r19, r29
    a8b4:	e2 0f       	add	r30, r18
    a8b6:	f3 1f       	adc	r31, r19
    a8b8:	00 81       	ld	r16, Z
    a8ba:	11 81       	ldd	r17, Z+1	; 0x01
    a8bc:	08 0f       	add	r16, r24
    a8be:	11 1d       	adc	r17, r1

	// Increase of Dayof Year Number by 1, if year is leapyear and month is february
	if ((time_is_leap_year(yyyy) == true) && (mm == 2))
    a8c0:	ca 01       	movw	r24, r20
    a8c2:	16 df       	rcall	.-468    	; 0xa6f0 <time_is_leap_year>
    a8c4:	48 2f       	mov	r20, r24
    a8c6:	88 23       	and	r24, r24
    a8c8:	31 f0       	breq	.+12     	; 0xa8d6 <time_get_weeknumber+0x64>
    a8ca:	32 e0       	ldi	r19, 0x02	; 2
    a8cc:	c3 16       	cp	r12, r19
    a8ce:	d1 04       	cpc	r13, r1
    a8d0:	11 f4       	brne	.+4      	; 0xa8d6 <time_get_weeknumber+0x64>
	day_of_year_number += 1;
    a8d2:	0f 5f       	subi	r16, 0xFF	; 255
    a8d4:	1f 4f       	sbci	r17, 0xFF	; 255

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
    a8d6:	51 e0       	ldi	r21, 0x01	; 1
    a8d8:	e5 1a       	sub	r14, r21
    a8da:	f1 08       	sbc	r15, r1
    a8dc:	e4 e6       	ldi	r30, 0x64	; 100
    a8de:	f0 e0       	ldi	r31, 0x00	; 0
    a8e0:	c7 01       	movw	r24, r14
    a8e2:	bf 01       	movw	r22, r30
    a8e4:	99 d1       	rcall	.+818    	; 0xac18 <__divmodhi4>
    a8e6:	9c 01       	movw	r18, r24
    a8e8:	6c 01       	movw	r12, r24
	j = (yyyy - 1) - i;
    a8ea:	c7 01       	movw	r24, r14
    a8ec:	82 1b       	sub	r24, r18
    a8ee:	93 0b       	sbc	r25, r19
	k = i + i/4;
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    a8f0:	bf 01       	movw	r22, r30
    a8f2:	92 d1       	rcall	.+804    	; 0xac18 <__divmodhi4>
    a8f4:	63 70       	andi	r22, 0x03	; 3
    a8f6:	70 78       	andi	r23, 0x80	; 128
    a8f8:	77 23       	and	r23, r23
    a8fa:	34 f4       	brge	.+12     	; 0xa908 <time_get_weeknumber+0x96>
    a8fc:	61 50       	subi	r22, 0x01	; 1
    a8fe:	71 09       	sbc	r23, r1
    a900:	6c 6f       	ori	r22, 0xFC	; 252
    a902:	7f 6f       	ori	r23, 0xFF	; 255
    a904:	6f 5f       	subi	r22, 0xFF	; 255
    a906:	7f 4f       	sbci	r23, 0xFF	; 255
    a908:	cb 01       	movw	r24, r22
    a90a:	88 0f       	add	r24, r24
    a90c:	99 1f       	adc	r25, r25
    a90e:	88 0f       	add	r24, r24
    a910:	99 1f       	adc	r25, r25
    a912:	68 0f       	add	r22, r24
    a914:	79 1f       	adc	r23, r25
	day_of_year_number += 1;

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
	j = (yyyy - 1) - i;
	k = i + i/4;
    a916:	f9 01       	movw	r30, r18
    a918:	dd 20       	and	r13, r13
    a91a:	0c f4       	brge	.+2      	; 0xa91e <time_get_weeknumber+0xac>
    a91c:	33 96       	adiw	r30, 0x03	; 3
    a91e:	cf 01       	movw	r24, r30
    a920:	95 95       	asr	r25
    a922:	87 95       	ror	r24
    a924:	95 95       	asr	r25
    a926:	87 95       	ror	r24
    a928:	28 0f       	add	r18, r24
    a92a:	39 1f       	adc	r19, r25
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    a92c:	cb 01       	movw	r24, r22
    a92e:	82 0f       	add	r24, r18
    a930:	93 1f       	adc	r25, r19
    a932:	e7 e0       	ldi	r30, 0x07	; 7
    a934:	f0 e0       	ldi	r31, 0x00	; 0
    a936:	bf 01       	movw	r22, r30
    a938:	6f d1       	rcall	.+734    	; 0xac18 <__divmodhi4>
    a93a:	9c 01       	movw	r18, r24
    a93c:	7c 01       	movw	r14, r24
    a93e:	8f ef       	ldi	r24, 0xFF	; 255
    a940:	e8 1a       	sub	r14, r24
    a942:	f8 0a       	sbc	r15, r24
	// Calcuate the WeekDay for the given date
	l = day_of_year_number + (jan_1_weekday - 1);
	weekday = 1 + ((l - 1) % 7);

	// Find if the date falls in YearNumber set WeekNumber to 52 or 53
	if ((day_of_year_number <= (8 - jan_1_weekday)) && (jan_1_weekday > 4))
    a944:	e2 1b       	sub	r30, r18
    a946:	f3 0b       	sbc	r31, r19
    a948:	e0 17       	cp	r30, r16
    a94a:	f1 07       	cpc	r31, r17
    a94c:	8c f0       	brlt	.+34     	; 0xa970 <time_get_weeknumber+0xfe>
    a94e:	55 e0       	ldi	r21, 0x05	; 5
    a950:	e5 16       	cp	r14, r21
    a952:	f1 04       	cpc	r15, r1
    a954:	6c f0       	brlt	.+26     	; 0xa970 <time_get_weeknumber+0xfe>
	{
		year_number = yyyy - 1;
		if ((jan_1_weekday == 5) || ((jan_1_weekday == 6) && (jan_1_weekday > 4)))
    a956:	85 e0       	ldi	r24, 0x05	; 5
    a958:	e8 1a       	sub	r14, r24
    a95a:	f1 08       	sbc	r15, r1
    a95c:	22 e0       	ldi	r18, 0x02	; 2
    a95e:	e2 16       	cp	r14, r18
    a960:	f1 04       	cpc	r15, r1
    a962:	18 f4       	brcc	.+6      	; 0xa96a <time_get_weeknumber+0xf8>
		week_number = 53;
    a964:	85 e3       	ldi	r24, 0x35	; 53
    a966:	90 e0       	ldi	r25, 0x00	; 0
    a968:	2d c0       	rjmp	.+90     	; 0xa9c4 <time_get_weeknumber+0x152>
		else
		week_number = 52;
    a96a:	84 e3       	ldi	r24, 0x34	; 52
    a96c:	90 e0       	ldi	r25, 0x00	; 0
    a96e:	2a c0       	rjmp	.+84     	; 0xa9c4 <time_get_weeknumber+0x152>
	year_number = yyyy;
	    
	// Set WeekNumber to 1 to 53 if date falls in YearNumber
	if (year_number == yyyy)
	{
		if (time_is_leap_year(yyyy)==true)
    a970:	44 23       	and	r20, r20
    a972:	19 f0       	breq	.+6      	; 0xa97a <time_get_weeknumber+0x108>
		m = 366;
    a974:	ee e6       	ldi	r30, 0x6E	; 110
    a976:	f1 e0       	ldi	r31, 0x01	; 1
    a978:	02 c0       	rjmp	.+4      	; 0xa97e <time_get_weeknumber+0x10c>
		else
		m = 365;
    a97a:	ed e6       	ldi	r30, 0x6D	; 109
    a97c:	f1 e0       	ldi	r31, 0x01	; 1
	j = (yyyy - 1) - i;
	k = i + i/4;
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);

	// Calcuate the WeekDay for the given date
	l = day_of_year_number + (jan_1_weekday - 1);
    a97e:	c8 01       	movw	r24, r16
    a980:	82 0f       	add	r24, r18
    a982:	93 1f       	adc	r25, r19
	weekday = 1 + ((l - 1) % 7);
    a984:	01 97       	sbiw	r24, 0x01	; 1
    a986:	67 e0       	ldi	r22, 0x07	; 7
    a988:	70 e0       	ldi	r23, 0x00	; 0
    a98a:	46 d1       	rcall	.+652    	; 0xac18 <__divmodhi4>
	{
		if (time_is_leap_year(yyyy)==true)
		m = 366;
		else
		m = 365;
		if ((m - day_of_year_number) < (4-weekday))
    a98c:	e0 1b       	sub	r30, r16
    a98e:	f1 0b       	sbc	r31, r17
    a990:	43 e0       	ldi	r20, 0x03	; 3
    a992:	50 e0       	ldi	r21, 0x00	; 0
    a994:	48 1b       	sub	r20, r24
    a996:	59 0b       	sbc	r21, r25
    a998:	e4 17       	cp	r30, r20
    a99a:	f5 07       	cpc	r31, r21
    a99c:	8c f0       	brlt	.+34     	; 0xa9c0 <time_get_weeknumber+0x14e>
			week_number = 1;
		}
	}
	    
	if (year_number==yyyy) {
		n=day_of_year_number + (7 - weekday) + (jan_1_weekday -1);
    a99e:	a8 01       	movw	r20, r16
    a9a0:	48 1b       	sub	r20, r24
    a9a2:	59 0b       	sbc	r21, r25
    a9a4:	ca 01       	movw	r24, r20
    a9a6:	06 96       	adiw	r24, 0x06	; 6
    a9a8:	82 0f       	add	r24, r18
    a9aa:	93 1f       	adc	r25, r19
		week_number = n / 7;
    a9ac:	67 e0       	ldi	r22, 0x07	; 7
    a9ae:	70 e0       	ldi	r23, 0x00	; 0
    a9b0:	33 d1       	rcall	.+614    	; 0xac18 <__divmodhi4>
    a9b2:	cb 01       	movw	r24, r22
		if (jan_1_weekday > 4)
    a9b4:	55 e0       	ldi	r21, 0x05	; 5
    a9b6:	e5 16       	cp	r14, r21
    a9b8:	f1 04       	cpc	r15, r1
    a9ba:	24 f0       	brlt	.+8      	; 0xa9c4 <time_get_weeknumber+0x152>
		week_number -= 1;
    a9bc:	01 97       	sbiw	r24, 0x01	; 1
    a9be:	02 c0       	rjmp	.+4      	; 0xa9c4 <time_get_weeknumber+0x152>
		else
		m = 365;
		if ((m - day_of_year_number) < (4-weekday))
		{
			year_number = yyyy + 1;
			week_number = 1;
    a9c0:	81 e0       	ldi	r24, 0x01	; 1
    a9c2:	90 e0       	ldi	r25, 0x00	; 0
		if (jan_1_weekday > 4)
		week_number -= 1;
	}

	return (week_number);
}
    a9c4:	68 96       	adiw	r28, 0x18	; 24
    a9c6:	cd bf       	out	0x3d, r28	; 61
    a9c8:	de bf       	out	0x3e, r29	; 62
    a9ca:	df 91       	pop	r29
    a9cc:	cf 91       	pop	r28
    a9ce:	1f 91       	pop	r17
    a9d0:	0f 91       	pop	r16
    a9d2:	ff 90       	pop	r15
    a9d4:	ef 90       	pop	r14
    a9d6:	df 90       	pop	r13
    a9d8:	cf 90       	pop	r12
    a9da:	08 95       	ret

0000a9dc <__divsf3>:
    a9dc:	0c d0       	rcall	.+24     	; 0xa9f6 <__divsf3x>
    a9de:	ba c0       	rjmp	.+372    	; 0xab54 <__fp_round>
    a9e0:	b2 d0       	rcall	.+356    	; 0xab46 <__fp_pscB>
    a9e2:	40 f0       	brcs	.+16     	; 0xa9f4 <__divsf3+0x18>
    a9e4:	a9 d0       	rcall	.+338    	; 0xab38 <__fp_pscA>
    a9e6:	30 f0       	brcs	.+12     	; 0xa9f4 <__divsf3+0x18>
    a9e8:	21 f4       	brne	.+8      	; 0xa9f2 <__divsf3+0x16>
    a9ea:	5f 3f       	cpi	r21, 0xFF	; 255
    a9ec:	19 f0       	breq	.+6      	; 0xa9f4 <__divsf3+0x18>
    a9ee:	9b c0       	rjmp	.+310    	; 0xab26 <__fp_inf>
    a9f0:	51 11       	cpse	r21, r1
    a9f2:	e4 c0       	rjmp	.+456    	; 0xabbc <__fp_szero>
    a9f4:	9e c0       	rjmp	.+316    	; 0xab32 <__fp_nan>

0000a9f6 <__divsf3x>:
    a9f6:	bf d0       	rcall	.+382    	; 0xab76 <__fp_split3>
    a9f8:	98 f3       	brcs	.-26     	; 0xa9e0 <__divsf3+0x4>

0000a9fa <__divsf3_pse>:
    a9fa:	99 23       	and	r25, r25
    a9fc:	c9 f3       	breq	.-14     	; 0xa9f0 <__divsf3+0x14>
    a9fe:	55 23       	and	r21, r21
    aa00:	b1 f3       	breq	.-20     	; 0xa9ee <__divsf3+0x12>
    aa02:	95 1b       	sub	r25, r21
    aa04:	55 0b       	sbc	r21, r21
    aa06:	bb 27       	eor	r27, r27
    aa08:	aa 27       	eor	r26, r26
    aa0a:	62 17       	cp	r22, r18
    aa0c:	73 07       	cpc	r23, r19
    aa0e:	84 07       	cpc	r24, r20
    aa10:	38 f0       	brcs	.+14     	; 0xaa20 <__divsf3_pse+0x26>
    aa12:	9f 5f       	subi	r25, 0xFF	; 255
    aa14:	5f 4f       	sbci	r21, 0xFF	; 255
    aa16:	22 0f       	add	r18, r18
    aa18:	33 1f       	adc	r19, r19
    aa1a:	44 1f       	adc	r20, r20
    aa1c:	aa 1f       	adc	r26, r26
    aa1e:	a9 f3       	breq	.-22     	; 0xaa0a <__divsf3_pse+0x10>
    aa20:	33 d0       	rcall	.+102    	; 0xaa88 <__divsf3_pse+0x8e>
    aa22:	0e 2e       	mov	r0, r30
    aa24:	3a f0       	brmi	.+14     	; 0xaa34 <__divsf3_pse+0x3a>
    aa26:	e0 e8       	ldi	r30, 0x80	; 128
    aa28:	30 d0       	rcall	.+96     	; 0xaa8a <__divsf3_pse+0x90>
    aa2a:	91 50       	subi	r25, 0x01	; 1
    aa2c:	50 40       	sbci	r21, 0x00	; 0
    aa2e:	e6 95       	lsr	r30
    aa30:	00 1c       	adc	r0, r0
    aa32:	ca f7       	brpl	.-14     	; 0xaa26 <__divsf3_pse+0x2c>
    aa34:	29 d0       	rcall	.+82     	; 0xaa88 <__divsf3_pse+0x8e>
    aa36:	fe 2f       	mov	r31, r30
    aa38:	27 d0       	rcall	.+78     	; 0xaa88 <__divsf3_pse+0x8e>
    aa3a:	66 0f       	add	r22, r22
    aa3c:	77 1f       	adc	r23, r23
    aa3e:	88 1f       	adc	r24, r24
    aa40:	bb 1f       	adc	r27, r27
    aa42:	26 17       	cp	r18, r22
    aa44:	37 07       	cpc	r19, r23
    aa46:	48 07       	cpc	r20, r24
    aa48:	ab 07       	cpc	r26, r27
    aa4a:	b0 e8       	ldi	r27, 0x80	; 128
    aa4c:	09 f0       	breq	.+2      	; 0xaa50 <__divsf3_pse+0x56>
    aa4e:	bb 0b       	sbc	r27, r27
    aa50:	80 2d       	mov	r24, r0
    aa52:	bf 01       	movw	r22, r30
    aa54:	ff 27       	eor	r31, r31
    aa56:	93 58       	subi	r25, 0x83	; 131
    aa58:	5f 4f       	sbci	r21, 0xFF	; 255
    aa5a:	2a f0       	brmi	.+10     	; 0xaa66 <__divsf3_pse+0x6c>
    aa5c:	9e 3f       	cpi	r25, 0xFE	; 254
    aa5e:	51 05       	cpc	r21, r1
    aa60:	68 f0       	brcs	.+26     	; 0xaa7c <__divsf3_pse+0x82>
    aa62:	61 c0       	rjmp	.+194    	; 0xab26 <__fp_inf>
    aa64:	ab c0       	rjmp	.+342    	; 0xabbc <__fp_szero>
    aa66:	5f 3f       	cpi	r21, 0xFF	; 255
    aa68:	ec f3       	brlt	.-6      	; 0xaa64 <__divsf3_pse+0x6a>
    aa6a:	98 3e       	cpi	r25, 0xE8	; 232
    aa6c:	dc f3       	brlt	.-10     	; 0xaa64 <__divsf3_pse+0x6a>
    aa6e:	86 95       	lsr	r24
    aa70:	77 95       	ror	r23
    aa72:	67 95       	ror	r22
    aa74:	b7 95       	ror	r27
    aa76:	f7 95       	ror	r31
    aa78:	9f 5f       	subi	r25, 0xFF	; 255
    aa7a:	c9 f7       	brne	.-14     	; 0xaa6e <__divsf3_pse+0x74>
    aa7c:	88 0f       	add	r24, r24
    aa7e:	91 1d       	adc	r25, r1
    aa80:	96 95       	lsr	r25
    aa82:	87 95       	ror	r24
    aa84:	97 f9       	bld	r25, 7
    aa86:	08 95       	ret
    aa88:	e1 e0       	ldi	r30, 0x01	; 1
    aa8a:	66 0f       	add	r22, r22
    aa8c:	77 1f       	adc	r23, r23
    aa8e:	88 1f       	adc	r24, r24
    aa90:	bb 1f       	adc	r27, r27
    aa92:	62 17       	cp	r22, r18
    aa94:	73 07       	cpc	r23, r19
    aa96:	84 07       	cpc	r24, r20
    aa98:	ba 07       	cpc	r27, r26
    aa9a:	20 f0       	brcs	.+8      	; 0xaaa4 <__divsf3_pse+0xaa>
    aa9c:	62 1b       	sub	r22, r18
    aa9e:	73 0b       	sbc	r23, r19
    aaa0:	84 0b       	sbc	r24, r20
    aaa2:	ba 0b       	sbc	r27, r26
    aaa4:	ee 1f       	adc	r30, r30
    aaa6:	88 f7       	brcc	.-30     	; 0xaa8a <__divsf3_pse+0x90>
    aaa8:	e0 95       	com	r30
    aaaa:	08 95       	ret

0000aaac <__floatunsisf>:
    aaac:	e8 94       	clt
    aaae:	09 c0       	rjmp	.+18     	; 0xaac2 <__floatsisf+0x12>

0000aab0 <__floatsisf>:
    aab0:	97 fb       	bst	r25, 7
    aab2:	3e f4       	brtc	.+14     	; 0xaac2 <__floatsisf+0x12>
    aab4:	90 95       	com	r25
    aab6:	80 95       	com	r24
    aab8:	70 95       	com	r23
    aaba:	61 95       	neg	r22
    aabc:	7f 4f       	sbci	r23, 0xFF	; 255
    aabe:	8f 4f       	sbci	r24, 0xFF	; 255
    aac0:	9f 4f       	sbci	r25, 0xFF	; 255
    aac2:	99 23       	and	r25, r25
    aac4:	a9 f0       	breq	.+42     	; 0xaaf0 <__floatsisf+0x40>
    aac6:	f9 2f       	mov	r31, r25
    aac8:	96 e9       	ldi	r25, 0x96	; 150
    aaca:	bb 27       	eor	r27, r27
    aacc:	93 95       	inc	r25
    aace:	f6 95       	lsr	r31
    aad0:	87 95       	ror	r24
    aad2:	77 95       	ror	r23
    aad4:	67 95       	ror	r22
    aad6:	b7 95       	ror	r27
    aad8:	f1 11       	cpse	r31, r1
    aada:	f8 cf       	rjmp	.-16     	; 0xaacc <__floatsisf+0x1c>
    aadc:	fa f4       	brpl	.+62     	; 0xab1c <__floatsisf+0x6c>
    aade:	bb 0f       	add	r27, r27
    aae0:	11 f4       	brne	.+4      	; 0xaae6 <__floatsisf+0x36>
    aae2:	60 ff       	sbrs	r22, 0
    aae4:	1b c0       	rjmp	.+54     	; 0xab1c <__floatsisf+0x6c>
    aae6:	6f 5f       	subi	r22, 0xFF	; 255
    aae8:	7f 4f       	sbci	r23, 0xFF	; 255
    aaea:	8f 4f       	sbci	r24, 0xFF	; 255
    aaec:	9f 4f       	sbci	r25, 0xFF	; 255
    aaee:	16 c0       	rjmp	.+44     	; 0xab1c <__floatsisf+0x6c>
    aaf0:	88 23       	and	r24, r24
    aaf2:	11 f0       	breq	.+4      	; 0xaaf8 <__floatsisf+0x48>
    aaf4:	96 e9       	ldi	r25, 0x96	; 150
    aaf6:	11 c0       	rjmp	.+34     	; 0xab1a <__floatsisf+0x6a>
    aaf8:	77 23       	and	r23, r23
    aafa:	21 f0       	breq	.+8      	; 0xab04 <__floatsisf+0x54>
    aafc:	9e e8       	ldi	r25, 0x8E	; 142
    aafe:	87 2f       	mov	r24, r23
    ab00:	76 2f       	mov	r23, r22
    ab02:	05 c0       	rjmp	.+10     	; 0xab0e <__floatsisf+0x5e>
    ab04:	66 23       	and	r22, r22
    ab06:	71 f0       	breq	.+28     	; 0xab24 <__floatsisf+0x74>
    ab08:	96 e8       	ldi	r25, 0x86	; 134
    ab0a:	86 2f       	mov	r24, r22
    ab0c:	70 e0       	ldi	r23, 0x00	; 0
    ab0e:	60 e0       	ldi	r22, 0x00	; 0
    ab10:	2a f0       	brmi	.+10     	; 0xab1c <__floatsisf+0x6c>
    ab12:	9a 95       	dec	r25
    ab14:	66 0f       	add	r22, r22
    ab16:	77 1f       	adc	r23, r23
    ab18:	88 1f       	adc	r24, r24
    ab1a:	da f7       	brpl	.-10     	; 0xab12 <__floatsisf+0x62>
    ab1c:	88 0f       	add	r24, r24
    ab1e:	96 95       	lsr	r25
    ab20:	87 95       	ror	r24
    ab22:	97 f9       	bld	r25, 7
    ab24:	08 95       	ret

0000ab26 <__fp_inf>:
    ab26:	97 f9       	bld	r25, 7
    ab28:	9f 67       	ori	r25, 0x7F	; 127
    ab2a:	80 e8       	ldi	r24, 0x80	; 128
    ab2c:	70 e0       	ldi	r23, 0x00	; 0
    ab2e:	60 e0       	ldi	r22, 0x00	; 0
    ab30:	08 95       	ret

0000ab32 <__fp_nan>:
    ab32:	9f ef       	ldi	r25, 0xFF	; 255
    ab34:	80 ec       	ldi	r24, 0xC0	; 192
    ab36:	08 95       	ret

0000ab38 <__fp_pscA>:
    ab38:	00 24       	eor	r0, r0
    ab3a:	0a 94       	dec	r0
    ab3c:	16 16       	cp	r1, r22
    ab3e:	17 06       	cpc	r1, r23
    ab40:	18 06       	cpc	r1, r24
    ab42:	09 06       	cpc	r0, r25
    ab44:	08 95       	ret

0000ab46 <__fp_pscB>:
    ab46:	00 24       	eor	r0, r0
    ab48:	0a 94       	dec	r0
    ab4a:	12 16       	cp	r1, r18
    ab4c:	13 06       	cpc	r1, r19
    ab4e:	14 06       	cpc	r1, r20
    ab50:	05 06       	cpc	r0, r21
    ab52:	08 95       	ret

0000ab54 <__fp_round>:
    ab54:	09 2e       	mov	r0, r25
    ab56:	03 94       	inc	r0
    ab58:	00 0c       	add	r0, r0
    ab5a:	11 f4       	brne	.+4      	; 0xab60 <__fp_round+0xc>
    ab5c:	88 23       	and	r24, r24
    ab5e:	52 f0       	brmi	.+20     	; 0xab74 <__fp_round+0x20>
    ab60:	bb 0f       	add	r27, r27
    ab62:	40 f4       	brcc	.+16     	; 0xab74 <__fp_round+0x20>
    ab64:	bf 2b       	or	r27, r31
    ab66:	11 f4       	brne	.+4      	; 0xab6c <__fp_round+0x18>
    ab68:	60 ff       	sbrs	r22, 0
    ab6a:	04 c0       	rjmp	.+8      	; 0xab74 <__fp_round+0x20>
    ab6c:	6f 5f       	subi	r22, 0xFF	; 255
    ab6e:	7f 4f       	sbci	r23, 0xFF	; 255
    ab70:	8f 4f       	sbci	r24, 0xFF	; 255
    ab72:	9f 4f       	sbci	r25, 0xFF	; 255
    ab74:	08 95       	ret

0000ab76 <__fp_split3>:
    ab76:	57 fd       	sbrc	r21, 7
    ab78:	90 58       	subi	r25, 0x80	; 128
    ab7a:	44 0f       	add	r20, r20
    ab7c:	55 1f       	adc	r21, r21
    ab7e:	59 f0       	breq	.+22     	; 0xab96 <__fp_splitA+0x10>
    ab80:	5f 3f       	cpi	r21, 0xFF	; 255
    ab82:	71 f0       	breq	.+28     	; 0xaba0 <__fp_splitA+0x1a>
    ab84:	47 95       	ror	r20

0000ab86 <__fp_splitA>:
    ab86:	88 0f       	add	r24, r24
    ab88:	97 fb       	bst	r25, 7
    ab8a:	99 1f       	adc	r25, r25
    ab8c:	61 f0       	breq	.+24     	; 0xaba6 <__fp_splitA+0x20>
    ab8e:	9f 3f       	cpi	r25, 0xFF	; 255
    ab90:	79 f0       	breq	.+30     	; 0xabb0 <__fp_splitA+0x2a>
    ab92:	87 95       	ror	r24
    ab94:	08 95       	ret
    ab96:	12 16       	cp	r1, r18
    ab98:	13 06       	cpc	r1, r19
    ab9a:	14 06       	cpc	r1, r20
    ab9c:	55 1f       	adc	r21, r21
    ab9e:	f2 cf       	rjmp	.-28     	; 0xab84 <__fp_split3+0xe>
    aba0:	46 95       	lsr	r20
    aba2:	f1 df       	rcall	.-30     	; 0xab86 <__fp_splitA>
    aba4:	08 c0       	rjmp	.+16     	; 0xabb6 <__fp_splitA+0x30>
    aba6:	16 16       	cp	r1, r22
    aba8:	17 06       	cpc	r1, r23
    abaa:	18 06       	cpc	r1, r24
    abac:	99 1f       	adc	r25, r25
    abae:	f1 cf       	rjmp	.-30     	; 0xab92 <__fp_splitA+0xc>
    abb0:	86 95       	lsr	r24
    abb2:	71 05       	cpc	r23, r1
    abb4:	61 05       	cpc	r22, r1
    abb6:	08 94       	sec
    abb8:	08 95       	ret

0000abba <__fp_zero>:
    abba:	e8 94       	clt

0000abbc <__fp_szero>:
    abbc:	bb 27       	eor	r27, r27
    abbe:	66 27       	eor	r22, r22
    abc0:	77 27       	eor	r23, r23
    abc2:	cb 01       	movw	r24, r22
    abc4:	97 f9       	bld	r25, 7
    abc6:	08 95       	ret

0000abc8 <__gesf2>:
    abc8:	03 d0       	rcall	.+6      	; 0xabd0 <__fp_cmp>
    abca:	08 f4       	brcc	.+2      	; 0xabce <__gesf2+0x6>
    abcc:	8f ef       	ldi	r24, 0xFF	; 255
    abce:	08 95       	ret

0000abd0 <__fp_cmp>:
    abd0:	99 0f       	add	r25, r25
    abd2:	00 08       	sbc	r0, r0
    abd4:	55 0f       	add	r21, r21
    abd6:	aa 0b       	sbc	r26, r26
    abd8:	e0 e8       	ldi	r30, 0x80	; 128
    abda:	fe ef       	ldi	r31, 0xFE	; 254
    abdc:	16 16       	cp	r1, r22
    abde:	17 06       	cpc	r1, r23
    abe0:	e8 07       	cpc	r30, r24
    abe2:	f9 07       	cpc	r31, r25
    abe4:	c0 f0       	brcs	.+48     	; 0xac16 <__fp_cmp+0x46>
    abe6:	12 16       	cp	r1, r18
    abe8:	13 06       	cpc	r1, r19
    abea:	e4 07       	cpc	r30, r20
    abec:	f5 07       	cpc	r31, r21
    abee:	98 f0       	brcs	.+38     	; 0xac16 <__fp_cmp+0x46>
    abf0:	62 1b       	sub	r22, r18
    abf2:	73 0b       	sbc	r23, r19
    abf4:	84 0b       	sbc	r24, r20
    abf6:	95 0b       	sbc	r25, r21
    abf8:	39 f4       	brne	.+14     	; 0xac08 <__fp_cmp+0x38>
    abfa:	0a 26       	eor	r0, r26
    abfc:	61 f0       	breq	.+24     	; 0xac16 <__fp_cmp+0x46>
    abfe:	23 2b       	or	r18, r19
    ac00:	24 2b       	or	r18, r20
    ac02:	25 2b       	or	r18, r21
    ac04:	21 f4       	brne	.+8      	; 0xac0e <__fp_cmp+0x3e>
    ac06:	08 95       	ret
    ac08:	0a 26       	eor	r0, r26
    ac0a:	09 f4       	brne	.+2      	; 0xac0e <__fp_cmp+0x3e>
    ac0c:	a1 40       	sbci	r26, 0x01	; 1
    ac0e:	a6 95       	lsr	r26
    ac10:	8f ef       	ldi	r24, 0xFF	; 255
    ac12:	81 1d       	adc	r24, r1
    ac14:	81 1d       	adc	r24, r1
    ac16:	08 95       	ret

0000ac18 <__divmodhi4>:
    ac18:	97 fb       	bst	r25, 7
    ac1a:	07 2e       	mov	r0, r23
    ac1c:	16 f4       	brtc	.+4      	; 0xac22 <__divmodhi4+0xa>
    ac1e:	00 94       	com	r0
    ac20:	06 d0       	rcall	.+12     	; 0xac2e <__divmodhi4_neg1>
    ac22:	77 fd       	sbrc	r23, 7
    ac24:	08 d0       	rcall	.+16     	; 0xac36 <__divmodhi4_neg2>
    ac26:	4c d0       	rcall	.+152    	; 0xacc0 <__udivmodhi4>
    ac28:	07 fc       	sbrc	r0, 7
    ac2a:	05 d0       	rcall	.+10     	; 0xac36 <__divmodhi4_neg2>
    ac2c:	3e f4       	brtc	.+14     	; 0xac3c <__divmodhi4_exit>

0000ac2e <__divmodhi4_neg1>:
    ac2e:	90 95       	com	r25
    ac30:	81 95       	neg	r24
    ac32:	9f 4f       	sbci	r25, 0xFF	; 255
    ac34:	08 95       	ret

0000ac36 <__divmodhi4_neg2>:
    ac36:	70 95       	com	r23
    ac38:	61 95       	neg	r22
    ac3a:	7f 4f       	sbci	r23, 0xFF	; 255

0000ac3c <__divmodhi4_exit>:
    ac3c:	08 95       	ret

0000ac3e <__udivmodsi4>:
    ac3e:	a1 e2       	ldi	r26, 0x21	; 33
    ac40:	1a 2e       	mov	r1, r26
    ac42:	aa 1b       	sub	r26, r26
    ac44:	bb 1b       	sub	r27, r27
    ac46:	fd 01       	movw	r30, r26
    ac48:	0d c0       	rjmp	.+26     	; 0xac64 <__udivmodsi4_ep>

0000ac4a <__udivmodsi4_loop>:
    ac4a:	aa 1f       	adc	r26, r26
    ac4c:	bb 1f       	adc	r27, r27
    ac4e:	ee 1f       	adc	r30, r30
    ac50:	ff 1f       	adc	r31, r31
    ac52:	a2 17       	cp	r26, r18
    ac54:	b3 07       	cpc	r27, r19
    ac56:	e4 07       	cpc	r30, r20
    ac58:	f5 07       	cpc	r31, r21
    ac5a:	20 f0       	brcs	.+8      	; 0xac64 <__udivmodsi4_ep>
    ac5c:	a2 1b       	sub	r26, r18
    ac5e:	b3 0b       	sbc	r27, r19
    ac60:	e4 0b       	sbc	r30, r20
    ac62:	f5 0b       	sbc	r31, r21

0000ac64 <__udivmodsi4_ep>:
    ac64:	66 1f       	adc	r22, r22
    ac66:	77 1f       	adc	r23, r23
    ac68:	88 1f       	adc	r24, r24
    ac6a:	99 1f       	adc	r25, r25
    ac6c:	1a 94       	dec	r1
    ac6e:	69 f7       	brne	.-38     	; 0xac4a <__udivmodsi4_loop>
    ac70:	60 95       	com	r22
    ac72:	70 95       	com	r23
    ac74:	80 95       	com	r24
    ac76:	90 95       	com	r25
    ac78:	9b 01       	movw	r18, r22
    ac7a:	ac 01       	movw	r20, r24
    ac7c:	bd 01       	movw	r22, r26
    ac7e:	cf 01       	movw	r24, r30
    ac80:	08 95       	ret

0000ac82 <__tablejump2__>:
    ac82:	ee 0f       	add	r30, r30
    ac84:	ff 1f       	adc	r31, r31

0000ac86 <__tablejump__>:
    ac86:	05 90       	lpm	r0, Z+
    ac88:	f4 91       	lpm	r31, Z
    ac8a:	e0 2d       	mov	r30, r0
    ac8c:	09 94       	ijmp

0000ac8e <__umulhisi3>:
    ac8e:	a2 9f       	mul	r26, r18
    ac90:	b0 01       	movw	r22, r0
    ac92:	b3 9f       	mul	r27, r19
    ac94:	c0 01       	movw	r24, r0
    ac96:	a3 9f       	mul	r26, r19
    ac98:	70 0d       	add	r23, r0
    ac9a:	81 1d       	adc	r24, r1
    ac9c:	11 24       	eor	r1, r1
    ac9e:	91 1d       	adc	r25, r1
    aca0:	b2 9f       	mul	r27, r18
    aca2:	70 0d       	add	r23, r0
    aca4:	81 1d       	adc	r24, r1
    aca6:	11 24       	eor	r1, r1
    aca8:	91 1d       	adc	r25, r1
    acaa:	08 95       	ret

0000acac <__muluhisi3>:
    acac:	f0 df       	rcall	.-32     	; 0xac8e <__umulhisi3>
    acae:	a5 9f       	mul	r26, r21
    acb0:	90 0d       	add	r25, r0
    acb2:	b4 9f       	mul	r27, r20
    acb4:	90 0d       	add	r25, r0
    acb6:	a4 9f       	mul	r26, r20
    acb8:	80 0d       	add	r24, r0
    acba:	91 1d       	adc	r25, r1
    acbc:	11 24       	eor	r1, r1
    acbe:	08 95       	ret

0000acc0 <__udivmodhi4>:
    acc0:	aa 1b       	sub	r26, r26
    acc2:	bb 1b       	sub	r27, r27
    acc4:	51 e1       	ldi	r21, 0x11	; 17
    acc6:	07 c0       	rjmp	.+14     	; 0xacd6 <__udivmodhi4_ep>

0000acc8 <__udivmodhi4_loop>:
    acc8:	aa 1f       	adc	r26, r26
    acca:	bb 1f       	adc	r27, r27
    accc:	a6 17       	cp	r26, r22
    acce:	b7 07       	cpc	r27, r23
    acd0:	10 f0       	brcs	.+4      	; 0xacd6 <__udivmodhi4_ep>
    acd2:	a6 1b       	sub	r26, r22
    acd4:	b7 0b       	sbc	r27, r23

0000acd6 <__udivmodhi4_ep>:
    acd6:	88 1f       	adc	r24, r24
    acd8:	99 1f       	adc	r25, r25
    acda:	5a 95       	dec	r21
    acdc:	a9 f7       	brne	.-22     	; 0xacc8 <__udivmodhi4_loop>
    acde:	80 95       	com	r24
    ace0:	90 95       	com	r25
    ace2:	bc 01       	movw	r22, r24
    ace4:	cd 01       	movw	r24, r26
    ace6:	08 95       	ret

0000ace8 <calloc>:
    ace8:	0f 93       	push	r16
    acea:	1f 93       	push	r17
    acec:	cf 93       	push	r28
    acee:	df 93       	push	r29
    acf0:	86 9f       	mul	r24, r22
    acf2:	80 01       	movw	r16, r0
    acf4:	87 9f       	mul	r24, r23
    acf6:	10 0d       	add	r17, r0
    acf8:	96 9f       	mul	r25, r22
    acfa:	10 0d       	add	r17, r0
    acfc:	11 24       	eor	r1, r1
    acfe:	c8 01       	movw	r24, r16
    ad00:	0d d0       	rcall	.+26     	; 0xad1c <malloc>
    ad02:	ec 01       	movw	r28, r24
    ad04:	00 97       	sbiw	r24, 0x00	; 0
    ad06:	21 f0       	breq	.+8      	; 0xad10 <calloc+0x28>
    ad08:	a8 01       	movw	r20, r16
    ad0a:	60 e0       	ldi	r22, 0x00	; 0
    ad0c:	70 e0       	ldi	r23, 0x00	; 0
    ad0e:	3e d1       	rcall	.+636    	; 0xaf8c <memset>
    ad10:	ce 01       	movw	r24, r28
    ad12:	df 91       	pop	r29
    ad14:	cf 91       	pop	r28
    ad16:	1f 91       	pop	r17
    ad18:	0f 91       	pop	r16
    ad1a:	08 95       	ret

0000ad1c <malloc>:
    ad1c:	cf 93       	push	r28
    ad1e:	df 93       	push	r29
    ad20:	82 30       	cpi	r24, 0x02	; 2
    ad22:	91 05       	cpc	r25, r1
    ad24:	10 f4       	brcc	.+4      	; 0xad2a <malloc+0xe>
    ad26:	82 e0       	ldi	r24, 0x02	; 2
    ad28:	90 e0       	ldi	r25, 0x00	; 0
    ad2a:	e0 91 1a 2c 	lds	r30, 0x2C1A
    ad2e:	f0 91 1b 2c 	lds	r31, 0x2C1B
    ad32:	20 e0       	ldi	r18, 0x00	; 0
    ad34:	30 e0       	ldi	r19, 0x00	; 0
    ad36:	a0 e0       	ldi	r26, 0x00	; 0
    ad38:	b0 e0       	ldi	r27, 0x00	; 0
    ad3a:	30 97       	sbiw	r30, 0x00	; 0
    ad3c:	39 f1       	breq	.+78     	; 0xad8c <malloc+0x70>
    ad3e:	40 81       	ld	r20, Z
    ad40:	51 81       	ldd	r21, Z+1	; 0x01
    ad42:	48 17       	cp	r20, r24
    ad44:	59 07       	cpc	r21, r25
    ad46:	b8 f0       	brcs	.+46     	; 0xad76 <malloc+0x5a>
    ad48:	48 17       	cp	r20, r24
    ad4a:	59 07       	cpc	r21, r25
    ad4c:	71 f4       	brne	.+28     	; 0xad6a <malloc+0x4e>
    ad4e:	82 81       	ldd	r24, Z+2	; 0x02
    ad50:	93 81       	ldd	r25, Z+3	; 0x03
    ad52:	10 97       	sbiw	r26, 0x00	; 0
    ad54:	29 f0       	breq	.+10     	; 0xad60 <malloc+0x44>
    ad56:	12 96       	adiw	r26, 0x02	; 2
    ad58:	8d 93       	st	X+, r24
    ad5a:	9c 93       	st	X, r25
    ad5c:	13 97       	sbiw	r26, 0x03	; 3
    ad5e:	2c c0       	rjmp	.+88     	; 0xadb8 <malloc+0x9c>
    ad60:	80 93 1a 2c 	sts	0x2C1A, r24
    ad64:	90 93 1b 2c 	sts	0x2C1B, r25
    ad68:	27 c0       	rjmp	.+78     	; 0xadb8 <malloc+0x9c>
    ad6a:	21 15       	cp	r18, r1
    ad6c:	31 05       	cpc	r19, r1
    ad6e:	31 f0       	breq	.+12     	; 0xad7c <malloc+0x60>
    ad70:	42 17       	cp	r20, r18
    ad72:	53 07       	cpc	r21, r19
    ad74:	18 f0       	brcs	.+6      	; 0xad7c <malloc+0x60>
    ad76:	a9 01       	movw	r20, r18
    ad78:	db 01       	movw	r26, r22
    ad7a:	01 c0       	rjmp	.+2      	; 0xad7e <malloc+0x62>
    ad7c:	ef 01       	movw	r28, r30
    ad7e:	9a 01       	movw	r18, r20
    ad80:	bd 01       	movw	r22, r26
    ad82:	df 01       	movw	r26, r30
    ad84:	02 80       	ldd	r0, Z+2	; 0x02
    ad86:	f3 81       	ldd	r31, Z+3	; 0x03
    ad88:	e0 2d       	mov	r30, r0
    ad8a:	d7 cf       	rjmp	.-82     	; 0xad3a <malloc+0x1e>
    ad8c:	21 15       	cp	r18, r1
    ad8e:	31 05       	cpc	r19, r1
    ad90:	f9 f0       	breq	.+62     	; 0xadd0 <malloc+0xb4>
    ad92:	28 1b       	sub	r18, r24
    ad94:	39 0b       	sbc	r19, r25
    ad96:	24 30       	cpi	r18, 0x04	; 4
    ad98:	31 05       	cpc	r19, r1
    ad9a:	80 f4       	brcc	.+32     	; 0xadbc <malloc+0xa0>
    ad9c:	8a 81       	ldd	r24, Y+2	; 0x02
    ad9e:	9b 81       	ldd	r25, Y+3	; 0x03
    ada0:	61 15       	cp	r22, r1
    ada2:	71 05       	cpc	r23, r1
    ada4:	21 f0       	breq	.+8      	; 0xadae <malloc+0x92>
    ada6:	fb 01       	movw	r30, r22
    ada8:	82 83       	std	Z+2, r24	; 0x02
    adaa:	93 83       	std	Z+3, r25	; 0x03
    adac:	04 c0       	rjmp	.+8      	; 0xadb6 <malloc+0x9a>
    adae:	80 93 1a 2c 	sts	0x2C1A, r24
    adb2:	90 93 1b 2c 	sts	0x2C1B, r25
    adb6:	fe 01       	movw	r30, r28
    adb8:	32 96       	adiw	r30, 0x02	; 2
    adba:	44 c0       	rjmp	.+136    	; 0xae44 <malloc+0x128>
    adbc:	fe 01       	movw	r30, r28
    adbe:	e2 0f       	add	r30, r18
    adc0:	f3 1f       	adc	r31, r19
    adc2:	81 93       	st	Z+, r24
    adc4:	91 93       	st	Z+, r25
    adc6:	22 50       	subi	r18, 0x02	; 2
    adc8:	31 09       	sbc	r19, r1
    adca:	28 83       	st	Y, r18
    adcc:	39 83       	std	Y+1, r19	; 0x01
    adce:	3a c0       	rjmp	.+116    	; 0xae44 <malloc+0x128>
    add0:	20 91 18 2c 	lds	r18, 0x2C18
    add4:	30 91 19 2c 	lds	r19, 0x2C19
    add8:	23 2b       	or	r18, r19
    adda:	41 f4       	brne	.+16     	; 0xadec <malloc+0xd0>
    addc:	20 91 02 20 	lds	r18, 0x2002
    ade0:	30 91 03 20 	lds	r19, 0x2003
    ade4:	20 93 18 2c 	sts	0x2C18, r18
    ade8:	30 93 19 2c 	sts	0x2C19, r19
    adec:	20 91 00 20 	lds	r18, 0x2000
    adf0:	30 91 01 20 	lds	r19, 0x2001
    adf4:	21 15       	cp	r18, r1
    adf6:	31 05       	cpc	r19, r1
    adf8:	41 f4       	brne	.+16     	; 0xae0a <malloc+0xee>
    adfa:	2d b7       	in	r18, 0x3d	; 61
    adfc:	3e b7       	in	r19, 0x3e	; 62
    adfe:	40 91 04 20 	lds	r20, 0x2004
    ae02:	50 91 05 20 	lds	r21, 0x2005
    ae06:	24 1b       	sub	r18, r20
    ae08:	35 0b       	sbc	r19, r21
    ae0a:	e0 91 18 2c 	lds	r30, 0x2C18
    ae0e:	f0 91 19 2c 	lds	r31, 0x2C19
    ae12:	e2 17       	cp	r30, r18
    ae14:	f3 07       	cpc	r31, r19
    ae16:	a0 f4       	brcc	.+40     	; 0xae40 <malloc+0x124>
    ae18:	2e 1b       	sub	r18, r30
    ae1a:	3f 0b       	sbc	r19, r31
    ae1c:	28 17       	cp	r18, r24
    ae1e:	39 07       	cpc	r19, r25
    ae20:	78 f0       	brcs	.+30     	; 0xae40 <malloc+0x124>
    ae22:	ac 01       	movw	r20, r24
    ae24:	4e 5f       	subi	r20, 0xFE	; 254
    ae26:	5f 4f       	sbci	r21, 0xFF	; 255
    ae28:	24 17       	cp	r18, r20
    ae2a:	35 07       	cpc	r19, r21
    ae2c:	48 f0       	brcs	.+18     	; 0xae40 <malloc+0x124>
    ae2e:	4e 0f       	add	r20, r30
    ae30:	5f 1f       	adc	r21, r31
    ae32:	40 93 18 2c 	sts	0x2C18, r20
    ae36:	50 93 19 2c 	sts	0x2C19, r21
    ae3a:	81 93       	st	Z+, r24
    ae3c:	91 93       	st	Z+, r25
    ae3e:	02 c0       	rjmp	.+4      	; 0xae44 <malloc+0x128>
    ae40:	e0 e0       	ldi	r30, 0x00	; 0
    ae42:	f0 e0       	ldi	r31, 0x00	; 0
    ae44:	cf 01       	movw	r24, r30
    ae46:	df 91       	pop	r29
    ae48:	cf 91       	pop	r28
    ae4a:	08 95       	ret

0000ae4c <free>:
    ae4c:	cf 93       	push	r28
    ae4e:	df 93       	push	r29
    ae50:	00 97       	sbiw	r24, 0x00	; 0
    ae52:	09 f4       	brne	.+2      	; 0xae56 <free+0xa>
    ae54:	87 c0       	rjmp	.+270    	; 0xaf64 <free+0x118>
    ae56:	fc 01       	movw	r30, r24
    ae58:	32 97       	sbiw	r30, 0x02	; 2
    ae5a:	12 82       	std	Z+2, r1	; 0x02
    ae5c:	13 82       	std	Z+3, r1	; 0x03
    ae5e:	c0 91 1a 2c 	lds	r28, 0x2C1A
    ae62:	d0 91 1b 2c 	lds	r29, 0x2C1B
    ae66:	20 97       	sbiw	r28, 0x00	; 0
    ae68:	81 f4       	brne	.+32     	; 0xae8a <free+0x3e>
    ae6a:	20 81       	ld	r18, Z
    ae6c:	31 81       	ldd	r19, Z+1	; 0x01
    ae6e:	28 0f       	add	r18, r24
    ae70:	39 1f       	adc	r19, r25
    ae72:	80 91 18 2c 	lds	r24, 0x2C18
    ae76:	90 91 19 2c 	lds	r25, 0x2C19
    ae7a:	82 17       	cp	r24, r18
    ae7c:	93 07       	cpc	r25, r19
    ae7e:	79 f5       	brne	.+94     	; 0xaede <free+0x92>
    ae80:	e0 93 18 2c 	sts	0x2C18, r30
    ae84:	f0 93 19 2c 	sts	0x2C19, r31
    ae88:	6d c0       	rjmp	.+218    	; 0xaf64 <free+0x118>
    ae8a:	de 01       	movw	r26, r28
    ae8c:	20 e0       	ldi	r18, 0x00	; 0
    ae8e:	30 e0       	ldi	r19, 0x00	; 0
    ae90:	ae 17       	cp	r26, r30
    ae92:	bf 07       	cpc	r27, r31
    ae94:	50 f4       	brcc	.+20     	; 0xaeaa <free+0x5e>
    ae96:	12 96       	adiw	r26, 0x02	; 2
    ae98:	4d 91       	ld	r20, X+
    ae9a:	5c 91       	ld	r21, X
    ae9c:	13 97       	sbiw	r26, 0x03	; 3
    ae9e:	9d 01       	movw	r18, r26
    aea0:	41 15       	cp	r20, r1
    aea2:	51 05       	cpc	r21, r1
    aea4:	09 f1       	breq	.+66     	; 0xaee8 <free+0x9c>
    aea6:	da 01       	movw	r26, r20
    aea8:	f3 cf       	rjmp	.-26     	; 0xae90 <free+0x44>
    aeaa:	a2 83       	std	Z+2, r26	; 0x02
    aeac:	b3 83       	std	Z+3, r27	; 0x03
    aeae:	40 81       	ld	r20, Z
    aeb0:	51 81       	ldd	r21, Z+1	; 0x01
    aeb2:	84 0f       	add	r24, r20
    aeb4:	95 1f       	adc	r25, r21
    aeb6:	8a 17       	cp	r24, r26
    aeb8:	9b 07       	cpc	r25, r27
    aeba:	71 f4       	brne	.+28     	; 0xaed8 <free+0x8c>
    aebc:	8d 91       	ld	r24, X+
    aebe:	9c 91       	ld	r25, X
    aec0:	11 97       	sbiw	r26, 0x01	; 1
    aec2:	84 0f       	add	r24, r20
    aec4:	95 1f       	adc	r25, r21
    aec6:	02 96       	adiw	r24, 0x02	; 2
    aec8:	80 83       	st	Z, r24
    aeca:	91 83       	std	Z+1, r25	; 0x01
    aecc:	12 96       	adiw	r26, 0x02	; 2
    aece:	8d 91       	ld	r24, X+
    aed0:	9c 91       	ld	r25, X
    aed2:	13 97       	sbiw	r26, 0x03	; 3
    aed4:	82 83       	std	Z+2, r24	; 0x02
    aed6:	93 83       	std	Z+3, r25	; 0x03
    aed8:	21 15       	cp	r18, r1
    aeda:	31 05       	cpc	r19, r1
    aedc:	29 f4       	brne	.+10     	; 0xaee8 <free+0x9c>
    aede:	e0 93 1a 2c 	sts	0x2C1A, r30
    aee2:	f0 93 1b 2c 	sts	0x2C1B, r31
    aee6:	3e c0       	rjmp	.+124    	; 0xaf64 <free+0x118>
    aee8:	d9 01       	movw	r26, r18
    aeea:	12 96       	adiw	r26, 0x02	; 2
    aeec:	ed 93       	st	X+, r30
    aeee:	fc 93       	st	X, r31
    aef0:	13 97       	sbiw	r26, 0x03	; 3
    aef2:	4d 91       	ld	r20, X+
    aef4:	5d 91       	ld	r21, X+
    aef6:	a4 0f       	add	r26, r20
    aef8:	b5 1f       	adc	r27, r21
    aefa:	ea 17       	cp	r30, r26
    aefc:	fb 07       	cpc	r31, r27
    aefe:	79 f4       	brne	.+30     	; 0xaf1e <free+0xd2>
    af00:	80 81       	ld	r24, Z
    af02:	91 81       	ldd	r25, Z+1	; 0x01
    af04:	84 0f       	add	r24, r20
    af06:	95 1f       	adc	r25, r21
    af08:	02 96       	adiw	r24, 0x02	; 2
    af0a:	d9 01       	movw	r26, r18
    af0c:	8d 93       	st	X+, r24
    af0e:	9c 93       	st	X, r25
    af10:	11 97       	sbiw	r26, 0x01	; 1
    af12:	82 81       	ldd	r24, Z+2	; 0x02
    af14:	93 81       	ldd	r25, Z+3	; 0x03
    af16:	12 96       	adiw	r26, 0x02	; 2
    af18:	8d 93       	st	X+, r24
    af1a:	9c 93       	st	X, r25
    af1c:	13 97       	sbiw	r26, 0x03	; 3
    af1e:	e0 e0       	ldi	r30, 0x00	; 0
    af20:	f0 e0       	ldi	r31, 0x00	; 0
    af22:	8a 81       	ldd	r24, Y+2	; 0x02
    af24:	9b 81       	ldd	r25, Y+3	; 0x03
    af26:	00 97       	sbiw	r24, 0x00	; 0
    af28:	19 f0       	breq	.+6      	; 0xaf30 <free+0xe4>
    af2a:	fe 01       	movw	r30, r28
    af2c:	ec 01       	movw	r28, r24
    af2e:	f9 cf       	rjmp	.-14     	; 0xaf22 <free+0xd6>
    af30:	ce 01       	movw	r24, r28
    af32:	02 96       	adiw	r24, 0x02	; 2
    af34:	28 81       	ld	r18, Y
    af36:	39 81       	ldd	r19, Y+1	; 0x01
    af38:	82 0f       	add	r24, r18
    af3a:	93 1f       	adc	r25, r19
    af3c:	20 91 18 2c 	lds	r18, 0x2C18
    af40:	30 91 19 2c 	lds	r19, 0x2C19
    af44:	28 17       	cp	r18, r24
    af46:	39 07       	cpc	r19, r25
    af48:	69 f4       	brne	.+26     	; 0xaf64 <free+0x118>
    af4a:	30 97       	sbiw	r30, 0x00	; 0
    af4c:	29 f4       	brne	.+10     	; 0xaf58 <free+0x10c>
    af4e:	10 92 1a 2c 	sts	0x2C1A, r1
    af52:	10 92 1b 2c 	sts	0x2C1B, r1
    af56:	02 c0       	rjmp	.+4      	; 0xaf5c <free+0x110>
    af58:	12 82       	std	Z+2, r1	; 0x02
    af5a:	13 82       	std	Z+3, r1	; 0x03
    af5c:	c0 93 18 2c 	sts	0x2C18, r28
    af60:	d0 93 19 2c 	sts	0x2C19, r29
    af64:	df 91       	pop	r29
    af66:	cf 91       	pop	r28
    af68:	08 95       	ret

0000af6a <toupper>:
    af6a:	91 11       	cpse	r25, r1
    af6c:	08 95       	ret
    af6e:	81 56       	subi	r24, 0x61	; 97
    af70:	8a 51       	subi	r24, 0x1A	; 26
    af72:	08 f4       	brcc	.+2      	; 0xaf76 <toupper+0xc>
    af74:	80 52       	subi	r24, 0x20	; 32
    af76:	85 58       	subi	r24, 0x85	; 133
    af78:	08 95       	ret

0000af7a <memcpy>:
    af7a:	fb 01       	movw	r30, r22
    af7c:	dc 01       	movw	r26, r24
    af7e:	02 c0       	rjmp	.+4      	; 0xaf84 <memcpy+0xa>
    af80:	01 90       	ld	r0, Z+
    af82:	0d 92       	st	X+, r0
    af84:	41 50       	subi	r20, 0x01	; 1
    af86:	50 40       	sbci	r21, 0x00	; 0
    af88:	d8 f7       	brcc	.-10     	; 0xaf80 <memcpy+0x6>
    af8a:	08 95       	ret

0000af8c <memset>:
    af8c:	dc 01       	movw	r26, r24
    af8e:	01 c0       	rjmp	.+2      	; 0xaf92 <memset+0x6>
    af90:	6d 93       	st	X+, r22
    af92:	41 50       	subi	r20, 0x01	; 1
    af94:	50 40       	sbci	r21, 0x00	; 0
    af96:	e0 f7       	brcc	.-8      	; 0xaf90 <memset+0x4>
    af98:	08 95       	ret

0000af9a <strcat>:
    af9a:	fb 01       	movw	r30, r22
    af9c:	dc 01       	movw	r26, r24
    af9e:	0d 90       	ld	r0, X+
    afa0:	00 20       	and	r0, r0
    afa2:	e9 f7       	brne	.-6      	; 0xaf9e <strcat+0x4>
    afa4:	11 97       	sbiw	r26, 0x01	; 1
    afa6:	01 90       	ld	r0, Z+
    afa8:	0d 92       	st	X+, r0
    afaa:	00 20       	and	r0, r0
    afac:	e1 f7       	brne	.-8      	; 0xafa6 <strcat+0xc>
    afae:	08 95       	ret

0000afb0 <strchr>:
    afb0:	fc 01       	movw	r30, r24
    afb2:	81 91       	ld	r24, Z+
    afb4:	86 17       	cp	r24, r22
    afb6:	21 f0       	breq	.+8      	; 0xafc0 <strchr+0x10>
    afb8:	88 23       	and	r24, r24
    afba:	d9 f7       	brne	.-10     	; 0xafb2 <strchr+0x2>
    afbc:	99 27       	eor	r25, r25
    afbe:	08 95       	ret
    afc0:	31 97       	sbiw	r30, 0x01	; 1
    afc2:	cf 01       	movw	r24, r30
    afc4:	08 95       	ret

0000afc6 <strcpy>:
    afc6:	fb 01       	movw	r30, r22
    afc8:	dc 01       	movw	r26, r24
    afca:	01 90       	ld	r0, Z+
    afcc:	0d 92       	st	X+, r0
    afce:	00 20       	and	r0, r0
    afd0:	e1 f7       	brne	.-8      	; 0xafca <strcpy+0x4>
    afd2:	08 95       	ret

0000afd4 <strncpy>:
    afd4:	fb 01       	movw	r30, r22
    afd6:	dc 01       	movw	r26, r24
    afd8:	41 50       	subi	r20, 0x01	; 1
    afda:	50 40       	sbci	r21, 0x00	; 0
    afdc:	48 f0       	brcs	.+18     	; 0xaff0 <strncpy+0x1c>
    afde:	01 90       	ld	r0, Z+
    afe0:	0d 92       	st	X+, r0
    afe2:	00 20       	and	r0, r0
    afe4:	c9 f7       	brne	.-14     	; 0xafd8 <strncpy+0x4>
    afe6:	01 c0       	rjmp	.+2      	; 0xafea <strncpy+0x16>
    afe8:	1d 92       	st	X+, r1
    afea:	41 50       	subi	r20, 0x01	; 1
    afec:	50 40       	sbci	r21, 0x00	; 0
    afee:	e0 f7       	brcc	.-8      	; 0xafe8 <strncpy+0x14>
    aff0:	08 95       	ret

0000aff2 <strstr>:
    aff2:	fb 01       	movw	r30, r22
    aff4:	51 91       	ld	r21, Z+
    aff6:	55 23       	and	r21, r21
    aff8:	a9 f0       	breq	.+42     	; 0xb024 <strstr+0x32>
    affa:	bf 01       	movw	r22, r30
    affc:	dc 01       	movw	r26, r24
    affe:	4d 91       	ld	r20, X+
    b000:	45 17       	cp	r20, r21
    b002:	41 11       	cpse	r20, r1
    b004:	e1 f7       	brne	.-8      	; 0xaffe <strstr+0xc>
    b006:	59 f4       	brne	.+22     	; 0xb01e <strstr+0x2c>
    b008:	cd 01       	movw	r24, r26
    b00a:	01 90       	ld	r0, Z+
    b00c:	00 20       	and	r0, r0
    b00e:	49 f0       	breq	.+18     	; 0xb022 <strstr+0x30>
    b010:	4d 91       	ld	r20, X+
    b012:	40 15       	cp	r20, r0
    b014:	41 11       	cpse	r20, r1
    b016:	c9 f3       	breq	.-14     	; 0xb00a <strstr+0x18>
    b018:	fb 01       	movw	r30, r22
    b01a:	41 11       	cpse	r20, r1
    b01c:	ef cf       	rjmp	.-34     	; 0xaffc <strstr+0xa>
    b01e:	81 e0       	ldi	r24, 0x01	; 1
    b020:	90 e0       	ldi	r25, 0x00	; 0
    b022:	01 97       	sbiw	r24, 0x01	; 1
    b024:	08 95       	ret

0000b026 <__itoa_ncheck>:
    b026:	bb 27       	eor	r27, r27
    b028:	4a 30       	cpi	r20, 0x0A	; 10
    b02a:	31 f4       	brne	.+12     	; 0xb038 <__itoa_ncheck+0x12>
    b02c:	99 23       	and	r25, r25
    b02e:	22 f4       	brpl	.+8      	; 0xb038 <__itoa_ncheck+0x12>
    b030:	bd e2       	ldi	r27, 0x2D	; 45
    b032:	90 95       	com	r25
    b034:	81 95       	neg	r24
    b036:	9f 4f       	sbci	r25, 0xFF	; 255
    b038:	01 c0       	rjmp	.+2      	; 0xb03c <__utoa_common>

0000b03a <__utoa_ncheck>:
    b03a:	bb 27       	eor	r27, r27

0000b03c <__utoa_common>:
    b03c:	fb 01       	movw	r30, r22
    b03e:	55 27       	eor	r21, r21
    b040:	aa 27       	eor	r26, r26
    b042:	88 0f       	add	r24, r24
    b044:	99 1f       	adc	r25, r25
    b046:	aa 1f       	adc	r26, r26
    b048:	a4 17       	cp	r26, r20
    b04a:	10 f0       	brcs	.+4      	; 0xb050 <__utoa_common+0x14>
    b04c:	a4 1b       	sub	r26, r20
    b04e:	83 95       	inc	r24
    b050:	50 51       	subi	r21, 0x10	; 16
    b052:	b9 f7       	brne	.-18     	; 0xb042 <__utoa_common+0x6>
    b054:	a0 5d       	subi	r26, 0xD0	; 208
    b056:	aa 33       	cpi	r26, 0x3A	; 58
    b058:	08 f0       	brcs	.+2      	; 0xb05c <__utoa_common+0x20>
    b05a:	a9 5d       	subi	r26, 0xD9	; 217
    b05c:	a1 93       	st	Z+, r26
    b05e:	00 97       	sbiw	r24, 0x00	; 0
    b060:	79 f7       	brne	.-34     	; 0xb040 <__utoa_common+0x4>
    b062:	b1 11       	cpse	r27, r1
    b064:	b1 93       	st	Z+, r27
    b066:	11 92       	st	Z+, r1
    b068:	cb 01       	movw	r24, r22
    b06a:	1d c5       	rjmp	.+2618   	; 0xbaa6 <strrev>

0000b06c <printf>:
    b06c:	cf 93       	push	r28
    b06e:	df 93       	push	r29
    b070:	cd b7       	in	r28, 0x3d	; 61
    b072:	de b7       	in	r29, 0x3e	; 62
    b074:	fe 01       	movw	r30, r28
    b076:	35 96       	adiw	r30, 0x05	; 5
    b078:	61 91       	ld	r22, Z+
    b07a:	71 91       	ld	r23, Z+
    b07c:	af 01       	movw	r20, r30
    b07e:	80 91 1e 2c 	lds	r24, 0x2C1E
    b082:	90 91 1f 2c 	lds	r25, 0x2C1F
    b086:	4b d0       	rcall	.+150    	; 0xb11e <vfprintf>
    b088:	df 91       	pop	r29
    b08a:	cf 91       	pop	r28
    b08c:	08 95       	ret

0000b08e <puts>:
    b08e:	0f 93       	push	r16
    b090:	1f 93       	push	r17
    b092:	cf 93       	push	r28
    b094:	df 93       	push	r29
    b096:	e0 91 1e 2c 	lds	r30, 0x2C1E
    b09a:	f0 91 1f 2c 	lds	r31, 0x2C1F
    b09e:	23 81       	ldd	r18, Z+3	; 0x03
    b0a0:	21 ff       	sbrs	r18, 1
    b0a2:	1b c0       	rjmp	.+54     	; 0xb0da <puts+0x4c>
    b0a4:	ec 01       	movw	r28, r24
    b0a6:	00 e0       	ldi	r16, 0x00	; 0
    b0a8:	10 e0       	ldi	r17, 0x00	; 0
    b0aa:	89 91       	ld	r24, Y+
    b0ac:	60 91 1e 2c 	lds	r22, 0x2C1E
    b0b0:	70 91 1f 2c 	lds	r23, 0x2C1F
    b0b4:	db 01       	movw	r26, r22
    b0b6:	18 96       	adiw	r26, 0x08	; 8
    b0b8:	ed 91       	ld	r30, X+
    b0ba:	fc 91       	ld	r31, X
    b0bc:	19 97       	sbiw	r26, 0x09	; 9
    b0be:	88 23       	and	r24, r24
    b0c0:	31 f0       	breq	.+12     	; 0xb0ce <puts+0x40>
    b0c2:	09 95       	icall
    b0c4:	89 2b       	or	r24, r25
    b0c6:	89 f3       	breq	.-30     	; 0xb0aa <puts+0x1c>
    b0c8:	0f ef       	ldi	r16, 0xFF	; 255
    b0ca:	1f ef       	ldi	r17, 0xFF	; 255
    b0cc:	ee cf       	rjmp	.-36     	; 0xb0aa <puts+0x1c>
    b0ce:	8a e0       	ldi	r24, 0x0A	; 10
    b0d0:	09 95       	icall
    b0d2:	89 2b       	or	r24, r25
    b0d4:	11 f4       	brne	.+4      	; 0xb0da <puts+0x4c>
    b0d6:	c8 01       	movw	r24, r16
    b0d8:	02 c0       	rjmp	.+4      	; 0xb0de <puts+0x50>
    b0da:	8f ef       	ldi	r24, 0xFF	; 255
    b0dc:	9f ef       	ldi	r25, 0xFF	; 255
    b0de:	df 91       	pop	r29
    b0e0:	cf 91       	pop	r28
    b0e2:	1f 91       	pop	r17
    b0e4:	0f 91       	pop	r16
    b0e6:	08 95       	ret

0000b0e8 <sscanf>:
    b0e8:	cf 93       	push	r28
    b0ea:	df 93       	push	r29
    b0ec:	cd b7       	in	r28, 0x3d	; 61
    b0ee:	de b7       	in	r29, 0x3e	; 62
    b0f0:	2e 97       	sbiw	r28, 0x0e	; 14
    b0f2:	cd bf       	out	0x3d, r28	; 61
    b0f4:	de bf       	out	0x3e, r29	; 62
    b0f6:	85 e0       	ldi	r24, 0x05	; 5
    b0f8:	8c 83       	std	Y+4, r24	; 0x04
    b0fa:	8b 89       	ldd	r24, Y+19	; 0x13
    b0fc:	9c 89       	ldd	r25, Y+20	; 0x14
    b0fe:	89 83       	std	Y+1, r24	; 0x01
    b100:	9a 83       	std	Y+2, r25	; 0x02
    b102:	ae 01       	movw	r20, r28
    b104:	49 5e       	subi	r20, 0xE9	; 233
    b106:	5f 4f       	sbci	r21, 0xFF	; 255
    b108:	6d 89       	ldd	r22, Y+21	; 0x15
    b10a:	7e 89       	ldd	r23, Y+22	; 0x16
    b10c:	ce 01       	movw	r24, r28
    b10e:	01 96       	adiw	r24, 0x01	; 1
    b110:	78 d3       	rcall	.+1776   	; 0xb802 <vfscanf>
    b112:	2e 96       	adiw	r28, 0x0e	; 14
    b114:	cd bf       	out	0x3d, r28	; 61
    b116:	de bf       	out	0x3e, r29	; 62
    b118:	df 91       	pop	r29
    b11a:	cf 91       	pop	r28
    b11c:	08 95       	ret

0000b11e <vfprintf>:
    b11e:	2f 92       	push	r2
    b120:	3f 92       	push	r3
    b122:	4f 92       	push	r4
    b124:	5f 92       	push	r5
    b126:	6f 92       	push	r6
    b128:	7f 92       	push	r7
    b12a:	8f 92       	push	r8
    b12c:	9f 92       	push	r9
    b12e:	af 92       	push	r10
    b130:	bf 92       	push	r11
    b132:	cf 92       	push	r12
    b134:	df 92       	push	r13
    b136:	ef 92       	push	r14
    b138:	ff 92       	push	r15
    b13a:	0f 93       	push	r16
    b13c:	1f 93       	push	r17
    b13e:	cf 93       	push	r28
    b140:	df 93       	push	r29
    b142:	cd b7       	in	r28, 0x3d	; 61
    b144:	de b7       	in	r29, 0x3e	; 62
    b146:	2c 97       	sbiw	r28, 0x0c	; 12
    b148:	cd bf       	out	0x3d, r28	; 61
    b14a:	de bf       	out	0x3e, r29	; 62
    b14c:	7c 01       	movw	r14, r24
    b14e:	6b 01       	movw	r12, r22
    b150:	8a 01       	movw	r16, r20
    b152:	fc 01       	movw	r30, r24
    b154:	16 82       	std	Z+6, r1	; 0x06
    b156:	17 82       	std	Z+7, r1	; 0x07
    b158:	83 81       	ldd	r24, Z+3	; 0x03
    b15a:	81 ff       	sbrs	r24, 1
    b15c:	b0 c1       	rjmp	.+864    	; 0xb4be <vfprintf+0x3a0>
    b15e:	ce 01       	movw	r24, r28
    b160:	01 96       	adiw	r24, 0x01	; 1
    b162:	4c 01       	movw	r8, r24
    b164:	f7 01       	movw	r30, r14
    b166:	93 81       	ldd	r25, Z+3	; 0x03
    b168:	f6 01       	movw	r30, r12
    b16a:	93 fd       	sbrc	r25, 3
    b16c:	85 91       	lpm	r24, Z+
    b16e:	93 ff       	sbrs	r25, 3
    b170:	81 91       	ld	r24, Z+
    b172:	6f 01       	movw	r12, r30
    b174:	88 23       	and	r24, r24
    b176:	09 f4       	brne	.+2      	; 0xb17a <vfprintf+0x5c>
    b178:	9e c1       	rjmp	.+828    	; 0xb4b6 <vfprintf+0x398>
    b17a:	85 32       	cpi	r24, 0x25	; 37
    b17c:	39 f4       	brne	.+14     	; 0xb18c <vfprintf+0x6e>
    b17e:	93 fd       	sbrc	r25, 3
    b180:	85 91       	lpm	r24, Z+
    b182:	93 ff       	sbrs	r25, 3
    b184:	81 91       	ld	r24, Z+
    b186:	6f 01       	movw	r12, r30
    b188:	85 32       	cpi	r24, 0x25	; 37
    b18a:	21 f4       	brne	.+8      	; 0xb194 <vfprintf+0x76>
    b18c:	b7 01       	movw	r22, r14
    b18e:	90 e0       	ldi	r25, 0x00	; 0
    b190:	d8 d4       	rcall	.+2480   	; 0xbb42 <fputc>
    b192:	e8 cf       	rjmp	.-48     	; 0xb164 <vfprintf+0x46>
    b194:	51 2c       	mov	r5, r1
    b196:	31 2c       	mov	r3, r1
    b198:	20 e0       	ldi	r18, 0x00	; 0
    b19a:	20 32       	cpi	r18, 0x20	; 32
    b19c:	a0 f4       	brcc	.+40     	; 0xb1c6 <vfprintf+0xa8>
    b19e:	8b 32       	cpi	r24, 0x2B	; 43
    b1a0:	69 f0       	breq	.+26     	; 0xb1bc <vfprintf+0x9e>
    b1a2:	30 f4       	brcc	.+12     	; 0xb1b0 <vfprintf+0x92>
    b1a4:	80 32       	cpi	r24, 0x20	; 32
    b1a6:	59 f0       	breq	.+22     	; 0xb1be <vfprintf+0xa0>
    b1a8:	83 32       	cpi	r24, 0x23	; 35
    b1aa:	69 f4       	brne	.+26     	; 0xb1c6 <vfprintf+0xa8>
    b1ac:	20 61       	ori	r18, 0x10	; 16
    b1ae:	2c c0       	rjmp	.+88     	; 0xb208 <vfprintf+0xea>
    b1b0:	8d 32       	cpi	r24, 0x2D	; 45
    b1b2:	39 f0       	breq	.+14     	; 0xb1c2 <vfprintf+0xa4>
    b1b4:	80 33       	cpi	r24, 0x30	; 48
    b1b6:	39 f4       	brne	.+14     	; 0xb1c6 <vfprintf+0xa8>
    b1b8:	21 60       	ori	r18, 0x01	; 1
    b1ba:	26 c0       	rjmp	.+76     	; 0xb208 <vfprintf+0xea>
    b1bc:	22 60       	ori	r18, 0x02	; 2
    b1be:	24 60       	ori	r18, 0x04	; 4
    b1c0:	23 c0       	rjmp	.+70     	; 0xb208 <vfprintf+0xea>
    b1c2:	28 60       	ori	r18, 0x08	; 8
    b1c4:	21 c0       	rjmp	.+66     	; 0xb208 <vfprintf+0xea>
    b1c6:	27 fd       	sbrc	r18, 7
    b1c8:	27 c0       	rjmp	.+78     	; 0xb218 <vfprintf+0xfa>
    b1ca:	30 ed       	ldi	r19, 0xD0	; 208
    b1cc:	38 0f       	add	r19, r24
    b1ce:	3a 30       	cpi	r19, 0x0A	; 10
    b1d0:	78 f4       	brcc	.+30     	; 0xb1f0 <vfprintf+0xd2>
    b1d2:	26 ff       	sbrs	r18, 6
    b1d4:	06 c0       	rjmp	.+12     	; 0xb1e2 <vfprintf+0xc4>
    b1d6:	fa e0       	ldi	r31, 0x0A	; 10
    b1d8:	5f 9e       	mul	r5, r31
    b1da:	30 0d       	add	r19, r0
    b1dc:	11 24       	eor	r1, r1
    b1de:	53 2e       	mov	r5, r19
    b1e0:	13 c0       	rjmp	.+38     	; 0xb208 <vfprintf+0xea>
    b1e2:	8a e0       	ldi	r24, 0x0A	; 10
    b1e4:	38 9e       	mul	r3, r24
    b1e6:	30 0d       	add	r19, r0
    b1e8:	11 24       	eor	r1, r1
    b1ea:	33 2e       	mov	r3, r19
    b1ec:	20 62       	ori	r18, 0x20	; 32
    b1ee:	0c c0       	rjmp	.+24     	; 0xb208 <vfprintf+0xea>
    b1f0:	8e 32       	cpi	r24, 0x2E	; 46
    b1f2:	21 f4       	brne	.+8      	; 0xb1fc <vfprintf+0xde>
    b1f4:	26 fd       	sbrc	r18, 6
    b1f6:	5f c1       	rjmp	.+702    	; 0xb4b6 <vfprintf+0x398>
    b1f8:	20 64       	ori	r18, 0x40	; 64
    b1fa:	06 c0       	rjmp	.+12     	; 0xb208 <vfprintf+0xea>
    b1fc:	8c 36       	cpi	r24, 0x6C	; 108
    b1fe:	11 f4       	brne	.+4      	; 0xb204 <vfprintf+0xe6>
    b200:	20 68       	ori	r18, 0x80	; 128
    b202:	02 c0       	rjmp	.+4      	; 0xb208 <vfprintf+0xea>
    b204:	88 36       	cpi	r24, 0x68	; 104
    b206:	41 f4       	brne	.+16     	; 0xb218 <vfprintf+0xfa>
    b208:	f6 01       	movw	r30, r12
    b20a:	93 fd       	sbrc	r25, 3
    b20c:	85 91       	lpm	r24, Z+
    b20e:	93 ff       	sbrs	r25, 3
    b210:	81 91       	ld	r24, Z+
    b212:	6f 01       	movw	r12, r30
    b214:	81 11       	cpse	r24, r1
    b216:	c1 cf       	rjmp	.-126    	; 0xb19a <vfprintf+0x7c>
    b218:	98 2f       	mov	r25, r24
    b21a:	9f 7d       	andi	r25, 0xDF	; 223
    b21c:	95 54       	subi	r25, 0x45	; 69
    b21e:	93 30       	cpi	r25, 0x03	; 3
    b220:	28 f4       	brcc	.+10     	; 0xb22c <vfprintf+0x10e>
    b222:	0c 5f       	subi	r16, 0xFC	; 252
    b224:	1f 4f       	sbci	r17, 0xFF	; 255
    b226:	ff e3       	ldi	r31, 0x3F	; 63
    b228:	f9 83       	std	Y+1, r31	; 0x01
    b22a:	0d c0       	rjmp	.+26     	; 0xb246 <vfprintf+0x128>
    b22c:	83 36       	cpi	r24, 0x63	; 99
    b22e:	31 f0       	breq	.+12     	; 0xb23c <vfprintf+0x11e>
    b230:	83 37       	cpi	r24, 0x73	; 115
    b232:	71 f0       	breq	.+28     	; 0xb250 <vfprintf+0x132>
    b234:	83 35       	cpi	r24, 0x53	; 83
    b236:	09 f0       	breq	.+2      	; 0xb23a <vfprintf+0x11c>
    b238:	57 c0       	rjmp	.+174    	; 0xb2e8 <vfprintf+0x1ca>
    b23a:	21 c0       	rjmp	.+66     	; 0xb27e <vfprintf+0x160>
    b23c:	f8 01       	movw	r30, r16
    b23e:	80 81       	ld	r24, Z
    b240:	89 83       	std	Y+1, r24	; 0x01
    b242:	0e 5f       	subi	r16, 0xFE	; 254
    b244:	1f 4f       	sbci	r17, 0xFF	; 255
    b246:	44 24       	eor	r4, r4
    b248:	43 94       	inc	r4
    b24a:	51 2c       	mov	r5, r1
    b24c:	54 01       	movw	r10, r8
    b24e:	14 c0       	rjmp	.+40     	; 0xb278 <vfprintf+0x15a>
    b250:	38 01       	movw	r6, r16
    b252:	f2 e0       	ldi	r31, 0x02	; 2
    b254:	6f 0e       	add	r6, r31
    b256:	71 1c       	adc	r7, r1
    b258:	f8 01       	movw	r30, r16
    b25a:	a0 80       	ld	r10, Z
    b25c:	b1 80       	ldd	r11, Z+1	; 0x01
    b25e:	26 ff       	sbrs	r18, 6
    b260:	03 c0       	rjmp	.+6      	; 0xb268 <vfprintf+0x14a>
    b262:	65 2d       	mov	r22, r5
    b264:	70 e0       	ldi	r23, 0x00	; 0
    b266:	02 c0       	rjmp	.+4      	; 0xb26c <vfprintf+0x14e>
    b268:	6f ef       	ldi	r22, 0xFF	; 255
    b26a:	7f ef       	ldi	r23, 0xFF	; 255
    b26c:	c5 01       	movw	r24, r10
    b26e:	2c 87       	std	Y+12, r18	; 0x0c
    b270:	0f d4       	rcall	.+2078   	; 0xba90 <strnlen>
    b272:	2c 01       	movw	r4, r24
    b274:	83 01       	movw	r16, r6
    b276:	2c 85       	ldd	r18, Y+12	; 0x0c
    b278:	2f 77       	andi	r18, 0x7F	; 127
    b27a:	22 2e       	mov	r2, r18
    b27c:	16 c0       	rjmp	.+44     	; 0xb2aa <vfprintf+0x18c>
    b27e:	38 01       	movw	r6, r16
    b280:	f2 e0       	ldi	r31, 0x02	; 2
    b282:	6f 0e       	add	r6, r31
    b284:	71 1c       	adc	r7, r1
    b286:	f8 01       	movw	r30, r16
    b288:	a0 80       	ld	r10, Z
    b28a:	b1 80       	ldd	r11, Z+1	; 0x01
    b28c:	26 ff       	sbrs	r18, 6
    b28e:	03 c0       	rjmp	.+6      	; 0xb296 <vfprintf+0x178>
    b290:	65 2d       	mov	r22, r5
    b292:	70 e0       	ldi	r23, 0x00	; 0
    b294:	02 c0       	rjmp	.+4      	; 0xb29a <vfprintf+0x17c>
    b296:	6f ef       	ldi	r22, 0xFF	; 255
    b298:	7f ef       	ldi	r23, 0xFF	; 255
    b29a:	c5 01       	movw	r24, r10
    b29c:	2c 87       	std	Y+12, r18	; 0x0c
    b29e:	ed d3       	rcall	.+2010   	; 0xba7a <strnlen_P>
    b2a0:	2c 01       	movw	r4, r24
    b2a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    b2a4:	20 68       	ori	r18, 0x80	; 128
    b2a6:	22 2e       	mov	r2, r18
    b2a8:	83 01       	movw	r16, r6
    b2aa:	23 fc       	sbrc	r2, 3
    b2ac:	19 c0       	rjmp	.+50     	; 0xb2e0 <vfprintf+0x1c2>
    b2ae:	83 2d       	mov	r24, r3
    b2b0:	90 e0       	ldi	r25, 0x00	; 0
    b2b2:	48 16       	cp	r4, r24
    b2b4:	59 06       	cpc	r5, r25
    b2b6:	a0 f4       	brcc	.+40     	; 0xb2e0 <vfprintf+0x1c2>
    b2b8:	b7 01       	movw	r22, r14
    b2ba:	80 e2       	ldi	r24, 0x20	; 32
    b2bc:	90 e0       	ldi	r25, 0x00	; 0
    b2be:	41 d4       	rcall	.+2178   	; 0xbb42 <fputc>
    b2c0:	3a 94       	dec	r3
    b2c2:	f5 cf       	rjmp	.-22     	; 0xb2ae <vfprintf+0x190>
    b2c4:	f5 01       	movw	r30, r10
    b2c6:	27 fc       	sbrc	r2, 7
    b2c8:	85 91       	lpm	r24, Z+
    b2ca:	27 fe       	sbrs	r2, 7
    b2cc:	81 91       	ld	r24, Z+
    b2ce:	5f 01       	movw	r10, r30
    b2d0:	b7 01       	movw	r22, r14
    b2d2:	90 e0       	ldi	r25, 0x00	; 0
    b2d4:	36 d4       	rcall	.+2156   	; 0xbb42 <fputc>
    b2d6:	31 10       	cpse	r3, r1
    b2d8:	3a 94       	dec	r3
    b2da:	f1 e0       	ldi	r31, 0x01	; 1
    b2dc:	4f 1a       	sub	r4, r31
    b2de:	51 08       	sbc	r5, r1
    b2e0:	41 14       	cp	r4, r1
    b2e2:	51 04       	cpc	r5, r1
    b2e4:	79 f7       	brne	.-34     	; 0xb2c4 <vfprintf+0x1a6>
    b2e6:	de c0       	rjmp	.+444    	; 0xb4a4 <vfprintf+0x386>
    b2e8:	84 36       	cpi	r24, 0x64	; 100
    b2ea:	11 f0       	breq	.+4      	; 0xb2f0 <vfprintf+0x1d2>
    b2ec:	89 36       	cpi	r24, 0x69	; 105
    b2ee:	31 f5       	brne	.+76     	; 0xb33c <vfprintf+0x21e>
    b2f0:	f8 01       	movw	r30, r16
    b2f2:	27 ff       	sbrs	r18, 7
    b2f4:	07 c0       	rjmp	.+14     	; 0xb304 <vfprintf+0x1e6>
    b2f6:	60 81       	ld	r22, Z
    b2f8:	71 81       	ldd	r23, Z+1	; 0x01
    b2fa:	82 81       	ldd	r24, Z+2	; 0x02
    b2fc:	93 81       	ldd	r25, Z+3	; 0x03
    b2fe:	0c 5f       	subi	r16, 0xFC	; 252
    b300:	1f 4f       	sbci	r17, 0xFF	; 255
    b302:	08 c0       	rjmp	.+16     	; 0xb314 <vfprintf+0x1f6>
    b304:	60 81       	ld	r22, Z
    b306:	71 81       	ldd	r23, Z+1	; 0x01
    b308:	88 27       	eor	r24, r24
    b30a:	77 fd       	sbrc	r23, 7
    b30c:	80 95       	com	r24
    b30e:	98 2f       	mov	r25, r24
    b310:	0e 5f       	subi	r16, 0xFE	; 254
    b312:	1f 4f       	sbci	r17, 0xFF	; 255
    b314:	2f 76       	andi	r18, 0x6F	; 111
    b316:	b2 2e       	mov	r11, r18
    b318:	97 ff       	sbrs	r25, 7
    b31a:	09 c0       	rjmp	.+18     	; 0xb32e <vfprintf+0x210>
    b31c:	90 95       	com	r25
    b31e:	80 95       	com	r24
    b320:	70 95       	com	r23
    b322:	61 95       	neg	r22
    b324:	7f 4f       	sbci	r23, 0xFF	; 255
    b326:	8f 4f       	sbci	r24, 0xFF	; 255
    b328:	9f 4f       	sbci	r25, 0xFF	; 255
    b32a:	20 68       	ori	r18, 0x80	; 128
    b32c:	b2 2e       	mov	r11, r18
    b32e:	2a e0       	ldi	r18, 0x0A	; 10
    b330:	30 e0       	ldi	r19, 0x00	; 0
    b332:	a4 01       	movw	r20, r8
    b334:	51 d4       	rcall	.+2210   	; 0xbbd8 <__ultoa_invert>
    b336:	a8 2e       	mov	r10, r24
    b338:	a8 18       	sub	r10, r8
    b33a:	43 c0       	rjmp	.+134    	; 0xb3c2 <vfprintf+0x2a4>
    b33c:	85 37       	cpi	r24, 0x75	; 117
    b33e:	29 f4       	brne	.+10     	; 0xb34a <vfprintf+0x22c>
    b340:	2f 7e       	andi	r18, 0xEF	; 239
    b342:	b2 2e       	mov	r11, r18
    b344:	2a e0       	ldi	r18, 0x0A	; 10
    b346:	30 e0       	ldi	r19, 0x00	; 0
    b348:	25 c0       	rjmp	.+74     	; 0xb394 <vfprintf+0x276>
    b34a:	f2 2f       	mov	r31, r18
    b34c:	f9 7f       	andi	r31, 0xF9	; 249
    b34e:	bf 2e       	mov	r11, r31
    b350:	8f 36       	cpi	r24, 0x6F	; 111
    b352:	c1 f0       	breq	.+48     	; 0xb384 <vfprintf+0x266>
    b354:	18 f4       	brcc	.+6      	; 0xb35c <vfprintf+0x23e>
    b356:	88 35       	cpi	r24, 0x58	; 88
    b358:	79 f0       	breq	.+30     	; 0xb378 <vfprintf+0x25a>
    b35a:	ad c0       	rjmp	.+346    	; 0xb4b6 <vfprintf+0x398>
    b35c:	80 37       	cpi	r24, 0x70	; 112
    b35e:	19 f0       	breq	.+6      	; 0xb366 <vfprintf+0x248>
    b360:	88 37       	cpi	r24, 0x78	; 120
    b362:	21 f0       	breq	.+8      	; 0xb36c <vfprintf+0x24e>
    b364:	a8 c0       	rjmp	.+336    	; 0xb4b6 <vfprintf+0x398>
    b366:	2f 2f       	mov	r18, r31
    b368:	20 61       	ori	r18, 0x10	; 16
    b36a:	b2 2e       	mov	r11, r18
    b36c:	b4 fe       	sbrs	r11, 4
    b36e:	0d c0       	rjmp	.+26     	; 0xb38a <vfprintf+0x26c>
    b370:	8b 2d       	mov	r24, r11
    b372:	84 60       	ori	r24, 0x04	; 4
    b374:	b8 2e       	mov	r11, r24
    b376:	09 c0       	rjmp	.+18     	; 0xb38a <vfprintf+0x26c>
    b378:	24 ff       	sbrs	r18, 4
    b37a:	0a c0       	rjmp	.+20     	; 0xb390 <vfprintf+0x272>
    b37c:	9f 2f       	mov	r25, r31
    b37e:	96 60       	ori	r25, 0x06	; 6
    b380:	b9 2e       	mov	r11, r25
    b382:	06 c0       	rjmp	.+12     	; 0xb390 <vfprintf+0x272>
    b384:	28 e0       	ldi	r18, 0x08	; 8
    b386:	30 e0       	ldi	r19, 0x00	; 0
    b388:	05 c0       	rjmp	.+10     	; 0xb394 <vfprintf+0x276>
    b38a:	20 e1       	ldi	r18, 0x10	; 16
    b38c:	30 e0       	ldi	r19, 0x00	; 0
    b38e:	02 c0       	rjmp	.+4      	; 0xb394 <vfprintf+0x276>
    b390:	20 e1       	ldi	r18, 0x10	; 16
    b392:	32 e0       	ldi	r19, 0x02	; 2
    b394:	f8 01       	movw	r30, r16
    b396:	b7 fe       	sbrs	r11, 7
    b398:	07 c0       	rjmp	.+14     	; 0xb3a8 <vfprintf+0x28a>
    b39a:	60 81       	ld	r22, Z
    b39c:	71 81       	ldd	r23, Z+1	; 0x01
    b39e:	82 81       	ldd	r24, Z+2	; 0x02
    b3a0:	93 81       	ldd	r25, Z+3	; 0x03
    b3a2:	0c 5f       	subi	r16, 0xFC	; 252
    b3a4:	1f 4f       	sbci	r17, 0xFF	; 255
    b3a6:	06 c0       	rjmp	.+12     	; 0xb3b4 <vfprintf+0x296>
    b3a8:	60 81       	ld	r22, Z
    b3aa:	71 81       	ldd	r23, Z+1	; 0x01
    b3ac:	80 e0       	ldi	r24, 0x00	; 0
    b3ae:	90 e0       	ldi	r25, 0x00	; 0
    b3b0:	0e 5f       	subi	r16, 0xFE	; 254
    b3b2:	1f 4f       	sbci	r17, 0xFF	; 255
    b3b4:	a4 01       	movw	r20, r8
    b3b6:	10 d4       	rcall	.+2080   	; 0xbbd8 <__ultoa_invert>
    b3b8:	a8 2e       	mov	r10, r24
    b3ba:	a8 18       	sub	r10, r8
    b3bc:	fb 2d       	mov	r31, r11
    b3be:	ff 77       	andi	r31, 0x7F	; 127
    b3c0:	bf 2e       	mov	r11, r31
    b3c2:	b6 fe       	sbrs	r11, 6
    b3c4:	0b c0       	rjmp	.+22     	; 0xb3dc <vfprintf+0x2be>
    b3c6:	2b 2d       	mov	r18, r11
    b3c8:	2e 7f       	andi	r18, 0xFE	; 254
    b3ca:	a5 14       	cp	r10, r5
    b3cc:	50 f4       	brcc	.+20     	; 0xb3e2 <vfprintf+0x2c4>
    b3ce:	b4 fe       	sbrs	r11, 4
    b3d0:	0a c0       	rjmp	.+20     	; 0xb3e6 <vfprintf+0x2c8>
    b3d2:	b2 fc       	sbrc	r11, 2
    b3d4:	08 c0       	rjmp	.+16     	; 0xb3e6 <vfprintf+0x2c8>
    b3d6:	2b 2d       	mov	r18, r11
    b3d8:	2e 7e       	andi	r18, 0xEE	; 238
    b3da:	05 c0       	rjmp	.+10     	; 0xb3e6 <vfprintf+0x2c8>
    b3dc:	7a 2c       	mov	r7, r10
    b3de:	2b 2d       	mov	r18, r11
    b3e0:	03 c0       	rjmp	.+6      	; 0xb3e8 <vfprintf+0x2ca>
    b3e2:	7a 2c       	mov	r7, r10
    b3e4:	01 c0       	rjmp	.+2      	; 0xb3e8 <vfprintf+0x2ca>
    b3e6:	75 2c       	mov	r7, r5
    b3e8:	24 ff       	sbrs	r18, 4
    b3ea:	0d c0       	rjmp	.+26     	; 0xb406 <vfprintf+0x2e8>
    b3ec:	fe 01       	movw	r30, r28
    b3ee:	ea 0d       	add	r30, r10
    b3f0:	f1 1d       	adc	r31, r1
    b3f2:	80 81       	ld	r24, Z
    b3f4:	80 33       	cpi	r24, 0x30	; 48
    b3f6:	11 f4       	brne	.+4      	; 0xb3fc <vfprintf+0x2de>
    b3f8:	29 7e       	andi	r18, 0xE9	; 233
    b3fa:	09 c0       	rjmp	.+18     	; 0xb40e <vfprintf+0x2f0>
    b3fc:	22 ff       	sbrs	r18, 2
    b3fe:	06 c0       	rjmp	.+12     	; 0xb40c <vfprintf+0x2ee>
    b400:	73 94       	inc	r7
    b402:	73 94       	inc	r7
    b404:	04 c0       	rjmp	.+8      	; 0xb40e <vfprintf+0x2f0>
    b406:	82 2f       	mov	r24, r18
    b408:	86 78       	andi	r24, 0x86	; 134
    b40a:	09 f0       	breq	.+2      	; 0xb40e <vfprintf+0x2f0>
    b40c:	73 94       	inc	r7
    b40e:	23 fd       	sbrc	r18, 3
    b410:	12 c0       	rjmp	.+36     	; 0xb436 <vfprintf+0x318>
    b412:	20 ff       	sbrs	r18, 0
    b414:	06 c0       	rjmp	.+12     	; 0xb422 <vfprintf+0x304>
    b416:	5a 2c       	mov	r5, r10
    b418:	73 14       	cp	r7, r3
    b41a:	18 f4       	brcc	.+6      	; 0xb422 <vfprintf+0x304>
    b41c:	53 0c       	add	r5, r3
    b41e:	57 18       	sub	r5, r7
    b420:	73 2c       	mov	r7, r3
    b422:	73 14       	cp	r7, r3
    b424:	60 f4       	brcc	.+24     	; 0xb43e <vfprintf+0x320>
    b426:	b7 01       	movw	r22, r14
    b428:	80 e2       	ldi	r24, 0x20	; 32
    b42a:	90 e0       	ldi	r25, 0x00	; 0
    b42c:	2c 87       	std	Y+12, r18	; 0x0c
    b42e:	89 d3       	rcall	.+1810   	; 0xbb42 <fputc>
    b430:	73 94       	inc	r7
    b432:	2c 85       	ldd	r18, Y+12	; 0x0c
    b434:	f6 cf       	rjmp	.-20     	; 0xb422 <vfprintf+0x304>
    b436:	73 14       	cp	r7, r3
    b438:	10 f4       	brcc	.+4      	; 0xb43e <vfprintf+0x320>
    b43a:	37 18       	sub	r3, r7
    b43c:	01 c0       	rjmp	.+2      	; 0xb440 <vfprintf+0x322>
    b43e:	31 2c       	mov	r3, r1
    b440:	24 ff       	sbrs	r18, 4
    b442:	11 c0       	rjmp	.+34     	; 0xb466 <vfprintf+0x348>
    b444:	b7 01       	movw	r22, r14
    b446:	80 e3       	ldi	r24, 0x30	; 48
    b448:	90 e0       	ldi	r25, 0x00	; 0
    b44a:	2c 87       	std	Y+12, r18	; 0x0c
    b44c:	7a d3       	rcall	.+1780   	; 0xbb42 <fputc>
    b44e:	2c 85       	ldd	r18, Y+12	; 0x0c
    b450:	22 ff       	sbrs	r18, 2
    b452:	16 c0       	rjmp	.+44     	; 0xb480 <vfprintf+0x362>
    b454:	21 ff       	sbrs	r18, 1
    b456:	03 c0       	rjmp	.+6      	; 0xb45e <vfprintf+0x340>
    b458:	88 e5       	ldi	r24, 0x58	; 88
    b45a:	90 e0       	ldi	r25, 0x00	; 0
    b45c:	02 c0       	rjmp	.+4      	; 0xb462 <vfprintf+0x344>
    b45e:	88 e7       	ldi	r24, 0x78	; 120
    b460:	90 e0       	ldi	r25, 0x00	; 0
    b462:	b7 01       	movw	r22, r14
    b464:	0c c0       	rjmp	.+24     	; 0xb47e <vfprintf+0x360>
    b466:	82 2f       	mov	r24, r18
    b468:	86 78       	andi	r24, 0x86	; 134
    b46a:	51 f0       	breq	.+20     	; 0xb480 <vfprintf+0x362>
    b46c:	21 fd       	sbrc	r18, 1
    b46e:	02 c0       	rjmp	.+4      	; 0xb474 <vfprintf+0x356>
    b470:	80 e2       	ldi	r24, 0x20	; 32
    b472:	01 c0       	rjmp	.+2      	; 0xb476 <vfprintf+0x358>
    b474:	8b e2       	ldi	r24, 0x2B	; 43
    b476:	27 fd       	sbrc	r18, 7
    b478:	8d e2       	ldi	r24, 0x2D	; 45
    b47a:	b7 01       	movw	r22, r14
    b47c:	90 e0       	ldi	r25, 0x00	; 0
    b47e:	61 d3       	rcall	.+1730   	; 0xbb42 <fputc>
    b480:	a5 14       	cp	r10, r5
    b482:	30 f4       	brcc	.+12     	; 0xb490 <vfprintf+0x372>
    b484:	b7 01       	movw	r22, r14
    b486:	80 e3       	ldi	r24, 0x30	; 48
    b488:	90 e0       	ldi	r25, 0x00	; 0
    b48a:	5b d3       	rcall	.+1718   	; 0xbb42 <fputc>
    b48c:	5a 94       	dec	r5
    b48e:	f8 cf       	rjmp	.-16     	; 0xb480 <vfprintf+0x362>
    b490:	aa 94       	dec	r10
    b492:	f4 01       	movw	r30, r8
    b494:	ea 0d       	add	r30, r10
    b496:	f1 1d       	adc	r31, r1
    b498:	80 81       	ld	r24, Z
    b49a:	b7 01       	movw	r22, r14
    b49c:	90 e0       	ldi	r25, 0x00	; 0
    b49e:	51 d3       	rcall	.+1698   	; 0xbb42 <fputc>
    b4a0:	a1 10       	cpse	r10, r1
    b4a2:	f6 cf       	rjmp	.-20     	; 0xb490 <vfprintf+0x372>
    b4a4:	33 20       	and	r3, r3
    b4a6:	09 f4       	brne	.+2      	; 0xb4aa <vfprintf+0x38c>
    b4a8:	5d ce       	rjmp	.-838    	; 0xb164 <vfprintf+0x46>
    b4aa:	b7 01       	movw	r22, r14
    b4ac:	80 e2       	ldi	r24, 0x20	; 32
    b4ae:	90 e0       	ldi	r25, 0x00	; 0
    b4b0:	48 d3       	rcall	.+1680   	; 0xbb42 <fputc>
    b4b2:	3a 94       	dec	r3
    b4b4:	f7 cf       	rjmp	.-18     	; 0xb4a4 <vfprintf+0x386>
    b4b6:	f7 01       	movw	r30, r14
    b4b8:	86 81       	ldd	r24, Z+6	; 0x06
    b4ba:	97 81       	ldd	r25, Z+7	; 0x07
    b4bc:	02 c0       	rjmp	.+4      	; 0xb4c2 <vfprintf+0x3a4>
    b4be:	8f ef       	ldi	r24, 0xFF	; 255
    b4c0:	9f ef       	ldi	r25, 0xFF	; 255
    b4c2:	2c 96       	adiw	r28, 0x0c	; 12
    b4c4:	cd bf       	out	0x3d, r28	; 61
    b4c6:	de bf       	out	0x3e, r29	; 62
    b4c8:	df 91       	pop	r29
    b4ca:	cf 91       	pop	r28
    b4cc:	1f 91       	pop	r17
    b4ce:	0f 91       	pop	r16
    b4d0:	ff 90       	pop	r15
    b4d2:	ef 90       	pop	r14
    b4d4:	df 90       	pop	r13
    b4d6:	cf 90       	pop	r12
    b4d8:	bf 90       	pop	r11
    b4da:	af 90       	pop	r10
    b4dc:	9f 90       	pop	r9
    b4de:	8f 90       	pop	r8
    b4e0:	7f 90       	pop	r7
    b4e2:	6f 90       	pop	r6
    b4e4:	5f 90       	pop	r5
    b4e6:	4f 90       	pop	r4
    b4e8:	3f 90       	pop	r3
    b4ea:	2f 90       	pop	r2
    b4ec:	08 95       	ret

0000b4ee <putval>:
    b4ee:	20 fd       	sbrc	r18, 0
    b4f0:	09 c0       	rjmp	.+18     	; 0xb504 <putval+0x16>
    b4f2:	fc 01       	movw	r30, r24
    b4f4:	23 fd       	sbrc	r18, 3
    b4f6:	05 c0       	rjmp	.+10     	; 0xb502 <putval+0x14>
    b4f8:	22 ff       	sbrs	r18, 2
    b4fa:	02 c0       	rjmp	.+4      	; 0xb500 <putval+0x12>
    b4fc:	73 83       	std	Z+3, r23	; 0x03
    b4fe:	62 83       	std	Z+2, r22	; 0x02
    b500:	51 83       	std	Z+1, r21	; 0x01
    b502:	40 83       	st	Z, r20
    b504:	08 95       	ret

0000b506 <mulacc>:
    b506:	44 fd       	sbrc	r20, 4
    b508:	10 c0       	rjmp	.+32     	; 0xb52a <mulacc+0x24>
    b50a:	46 fd       	sbrc	r20, 6
    b50c:	10 c0       	rjmp	.+32     	; 0xb52e <mulacc+0x28>
    b50e:	db 01       	movw	r26, r22
    b510:	fc 01       	movw	r30, r24
    b512:	aa 0f       	add	r26, r26
    b514:	bb 1f       	adc	r27, r27
    b516:	ee 1f       	adc	r30, r30
    b518:	ff 1f       	adc	r31, r31
    b51a:	10 94       	com	r1
    b51c:	d1 f7       	brne	.-12     	; 0xb512 <mulacc+0xc>
    b51e:	6a 0f       	add	r22, r26
    b520:	7b 1f       	adc	r23, r27
    b522:	8e 1f       	adc	r24, r30
    b524:	9f 1f       	adc	r25, r31
    b526:	31 e0       	ldi	r19, 0x01	; 1
    b528:	03 c0       	rjmp	.+6      	; 0xb530 <mulacc+0x2a>
    b52a:	33 e0       	ldi	r19, 0x03	; 3
    b52c:	01 c0       	rjmp	.+2      	; 0xb530 <mulacc+0x2a>
    b52e:	34 e0       	ldi	r19, 0x04	; 4
    b530:	66 0f       	add	r22, r22
    b532:	77 1f       	adc	r23, r23
    b534:	88 1f       	adc	r24, r24
    b536:	99 1f       	adc	r25, r25
    b538:	31 50       	subi	r19, 0x01	; 1
    b53a:	d1 f7       	brne	.-12     	; 0xb530 <mulacc+0x2a>
    b53c:	62 0f       	add	r22, r18
    b53e:	71 1d       	adc	r23, r1
    b540:	81 1d       	adc	r24, r1
    b542:	91 1d       	adc	r25, r1
    b544:	08 95       	ret

0000b546 <skip_spaces>:
    b546:	0f 93       	push	r16
    b548:	1f 93       	push	r17
    b54a:	cf 93       	push	r28
    b54c:	df 93       	push	r29
    b54e:	8c 01       	movw	r16, r24
    b550:	c8 01       	movw	r24, r16
    b552:	b9 d2       	rcall	.+1394   	; 0xbac6 <fgetc>
    b554:	ec 01       	movw	r28, r24
    b556:	97 fd       	sbrc	r25, 7
    b558:	06 c0       	rjmp	.+12     	; 0xb566 <skip_spaces+0x20>
    b55a:	7c d2       	rcall	.+1272   	; 0xba54 <isspace>
    b55c:	89 2b       	or	r24, r25
    b55e:	c1 f7       	brne	.-16     	; 0xb550 <skip_spaces+0xa>
    b560:	b8 01       	movw	r22, r16
    b562:	ce 01       	movw	r24, r28
    b564:	20 d3       	rcall	.+1600   	; 0xbba6 <ungetc>
    b566:	ce 01       	movw	r24, r28
    b568:	df 91       	pop	r29
    b56a:	cf 91       	pop	r28
    b56c:	1f 91       	pop	r17
    b56e:	0f 91       	pop	r16
    b570:	08 95       	ret

0000b572 <conv_int>:
    b572:	8f 92       	push	r8
    b574:	9f 92       	push	r9
    b576:	af 92       	push	r10
    b578:	cf 92       	push	r12
    b57a:	df 92       	push	r13
    b57c:	ef 92       	push	r14
    b57e:	ff 92       	push	r15
    b580:	0f 93       	push	r16
    b582:	1f 93       	push	r17
    b584:	cf 93       	push	r28
    b586:	df 93       	push	r29
    b588:	ec 01       	movw	r28, r24
    b58a:	a6 2e       	mov	r10, r22
    b58c:	4a 01       	movw	r8, r20
    b58e:	02 2f       	mov	r16, r18
    b590:	9a d2       	rcall	.+1332   	; 0xbac6 <fgetc>
    b592:	ac 01       	movw	r20, r24
    b594:	55 27       	eor	r21, r21
    b596:	4b 32       	cpi	r20, 0x2B	; 43
    b598:	51 05       	cpc	r21, r1
    b59a:	21 f0       	breq	.+8      	; 0xb5a4 <conv_int+0x32>
    b59c:	4d 32       	cpi	r20, 0x2D	; 45
    b59e:	51 05       	cpc	r21, r1
    b5a0:	49 f4       	brne	.+18     	; 0xb5b4 <conv_int+0x42>
    b5a2:	00 68       	ori	r16, 0x80	; 128
    b5a4:	aa 94       	dec	r10
    b5a6:	11 f4       	brne	.+4      	; 0xb5ac <conv_int+0x3a>
    b5a8:	80 e0       	ldi	r24, 0x00	; 0
    b5aa:	60 c0       	rjmp	.+192    	; 0xb66c <conv_int+0xfa>
    b5ac:	ce 01       	movw	r24, r28
    b5ae:	8b d2       	rcall	.+1302   	; 0xbac6 <fgetc>
    b5b0:	97 fd       	sbrc	r25, 7
    b5b2:	fa cf       	rjmp	.-12     	; 0xb5a8 <conv_int+0x36>
    b5b4:	10 2f       	mov	r17, r16
    b5b6:	1d 7f       	andi	r17, 0xFD	; 253
    b5b8:	30 2f       	mov	r19, r16
    b5ba:	30 73       	andi	r19, 0x30	; 48
    b5bc:	f1 f4       	brne	.+60     	; 0xb5fa <conv_int+0x88>
    b5be:	80 33       	cpi	r24, 0x30	; 48
    b5c0:	e1 f4       	brne	.+56     	; 0xb5fa <conv_int+0x88>
    b5c2:	ff 24       	eor	r15, r15
    b5c4:	fa 94       	dec	r15
    b5c6:	fa 0c       	add	r15, r10
    b5c8:	09 f4       	brne	.+2      	; 0xb5cc <conv_int+0x5a>
    b5ca:	3d c0       	rjmp	.+122    	; 0xb646 <conv_int+0xd4>
    b5cc:	ce 01       	movw	r24, r28
    b5ce:	7b d2       	rcall	.+1270   	; 0xbac6 <fgetc>
    b5d0:	97 fd       	sbrc	r25, 7
    b5d2:	39 c0       	rjmp	.+114    	; 0xb646 <conv_int+0xd4>
    b5d4:	38 2f       	mov	r19, r24
    b5d6:	3f 7d       	andi	r19, 0xDF	; 223
    b5d8:	38 35       	cpi	r19, 0x58	; 88
    b5da:	49 f4       	brne	.+18     	; 0xb5ee <conv_int+0x7c>
    b5dc:	12 64       	ori	r17, 0x42	; 66
    b5de:	aa 94       	dec	r10
    b5e0:	aa 94       	dec	r10
    b5e2:	89 f1       	breq	.+98     	; 0xb646 <conv_int+0xd4>
    b5e4:	ce 01       	movw	r24, r28
    b5e6:	6f d2       	rcall	.+1246   	; 0xbac6 <fgetc>
    b5e8:	97 ff       	sbrs	r25, 7
    b5ea:	07 c0       	rjmp	.+14     	; 0xb5fa <conv_int+0x88>
    b5ec:	2c c0       	rjmp	.+88     	; 0xb646 <conv_int+0xd4>
    b5ee:	06 ff       	sbrs	r16, 6
    b5f0:	02 c0       	rjmp	.+4      	; 0xb5f6 <conv_int+0x84>
    b5f2:	12 60       	ori	r17, 0x02	; 2
    b5f4:	01 c0       	rjmp	.+2      	; 0xb5f8 <conv_int+0x86>
    b5f6:	12 61       	ori	r17, 0x12	; 18
    b5f8:	af 2c       	mov	r10, r15
    b5fa:	c1 2c       	mov	r12, r1
    b5fc:	d1 2c       	mov	r13, r1
    b5fe:	76 01       	movw	r14, r12
    b600:	20 ed       	ldi	r18, 0xD0	; 208
    b602:	28 0f       	add	r18, r24
    b604:	28 30       	cpi	r18, 0x08	; 8
    b606:	78 f0       	brcs	.+30     	; 0xb626 <conv_int+0xb4>
    b608:	14 ff       	sbrs	r17, 4
    b60a:	03 c0       	rjmp	.+6      	; 0xb612 <conv_int+0xa0>
    b60c:	be 01       	movw	r22, r28
    b60e:	cb d2       	rcall	.+1430   	; 0xbba6 <ungetc>
    b610:	17 c0       	rjmp	.+46     	; 0xb640 <conv_int+0xce>
    b612:	2a 30       	cpi	r18, 0x0A	; 10
    b614:	40 f0       	brcs	.+16     	; 0xb626 <conv_int+0xb4>
    b616:	16 ff       	sbrs	r17, 6
    b618:	f9 cf       	rjmp	.-14     	; 0xb60c <conv_int+0x9a>
    b61a:	2f 7d       	andi	r18, 0xDF	; 223
    b61c:	3f ee       	ldi	r19, 0xEF	; 239
    b61e:	32 0f       	add	r19, r18
    b620:	36 30       	cpi	r19, 0x06	; 6
    b622:	a0 f7       	brcc	.-24     	; 0xb60c <conv_int+0x9a>
    b624:	27 50       	subi	r18, 0x07	; 7
    b626:	41 2f       	mov	r20, r17
    b628:	c7 01       	movw	r24, r14
    b62a:	b6 01       	movw	r22, r12
    b62c:	6c df       	rcall	.-296    	; 0xb506 <mulacc>
    b62e:	6b 01       	movw	r12, r22
    b630:	7c 01       	movw	r14, r24
    b632:	12 60       	ori	r17, 0x02	; 2
    b634:	aa 94       	dec	r10
    b636:	51 f0       	breq	.+20     	; 0xb64c <conv_int+0xda>
    b638:	ce 01       	movw	r24, r28
    b63a:	45 d2       	rcall	.+1162   	; 0xbac6 <fgetc>
    b63c:	97 ff       	sbrs	r25, 7
    b63e:	e0 cf       	rjmp	.-64     	; 0xb600 <conv_int+0x8e>
    b640:	11 fd       	sbrc	r17, 1
    b642:	04 c0       	rjmp	.+8      	; 0xb64c <conv_int+0xda>
    b644:	b1 cf       	rjmp	.-158    	; 0xb5a8 <conv_int+0x36>
    b646:	c1 2c       	mov	r12, r1
    b648:	d1 2c       	mov	r13, r1
    b64a:	76 01       	movw	r14, r12
    b64c:	17 ff       	sbrs	r17, 7
    b64e:	08 c0       	rjmp	.+16     	; 0xb660 <conv_int+0xee>
    b650:	f0 94       	com	r15
    b652:	e0 94       	com	r14
    b654:	d0 94       	com	r13
    b656:	c0 94       	com	r12
    b658:	c1 1c       	adc	r12, r1
    b65a:	d1 1c       	adc	r13, r1
    b65c:	e1 1c       	adc	r14, r1
    b65e:	f1 1c       	adc	r15, r1
    b660:	21 2f       	mov	r18, r17
    b662:	b7 01       	movw	r22, r14
    b664:	a6 01       	movw	r20, r12
    b666:	c4 01       	movw	r24, r8
    b668:	42 df       	rcall	.-380    	; 0xb4ee <putval>
    b66a:	81 e0       	ldi	r24, 0x01	; 1
    b66c:	df 91       	pop	r29
    b66e:	cf 91       	pop	r28
    b670:	1f 91       	pop	r17
    b672:	0f 91       	pop	r16
    b674:	ff 90       	pop	r15
    b676:	ef 90       	pop	r14
    b678:	df 90       	pop	r13
    b67a:	cf 90       	pop	r12
    b67c:	af 90       	pop	r10
    b67e:	9f 90       	pop	r9
    b680:	8f 90       	pop	r8
    b682:	08 95       	ret

0000b684 <conv_brk>:
    b684:	7f 92       	push	r7
    b686:	8f 92       	push	r8
    b688:	9f 92       	push	r9
    b68a:	af 92       	push	r10
    b68c:	bf 92       	push	r11
    b68e:	cf 92       	push	r12
    b690:	df 92       	push	r13
    b692:	ef 92       	push	r14
    b694:	ff 92       	push	r15
    b696:	0f 93       	push	r16
    b698:	1f 93       	push	r17
    b69a:	cf 93       	push	r28
    b69c:	df 93       	push	r29
    b69e:	cd b7       	in	r28, 0x3d	; 61
    b6a0:	de b7       	in	r29, 0x3e	; 62
    b6a2:	a1 97       	sbiw	r28, 0x21	; 33
    b6a4:	cd bf       	out	0x3d, r28	; 61
    b6a6:	de bf       	out	0x3e, r29	; 62
    b6a8:	5c 01       	movw	r10, r24
    b6aa:	7a 01       	movw	r14, r20
    b6ac:	8e 01       	movw	r16, r28
    b6ae:	0f 5f       	subi	r16, 0xFF	; 255
    b6b0:	1f 4f       	sbci	r17, 0xFF	; 255
    b6b2:	68 01       	movw	r12, r16
    b6b4:	80 e2       	ldi	r24, 0x20	; 32
    b6b6:	d8 01       	movw	r26, r16
    b6b8:	1d 92       	st	X+, r1
    b6ba:	8a 95       	dec	r24
    b6bc:	e9 f7       	brne	.-6      	; 0xb6b8 <conv_brk+0x34>
    b6be:	f5 01       	movw	r30, r10
    b6c0:	73 80       	ldd	r7, Z+3	; 0x03
    b6c2:	40 e0       	ldi	r20, 0x00	; 0
    b6c4:	50 e0       	ldi	r21, 0x00	; 0
    b6c6:	81 2c       	mov	r8, r1
    b6c8:	b0 e0       	ldi	r27, 0x00	; 0
    b6ca:	91 2c       	mov	r9, r1
    b6cc:	81 e0       	ldi	r24, 0x01	; 1
    b6ce:	90 e0       	ldi	r25, 0x00	; 0
    b6d0:	f9 01       	movw	r30, r18
    b6d2:	73 fc       	sbrc	r7, 3
    b6d4:	a5 91       	lpm	r26, Z+
    b6d6:	73 fe       	sbrs	r7, 3
    b6d8:	a1 91       	ld	r26, Z+
    b6da:	8f 01       	movw	r16, r30
    b6dc:	7a 2f       	mov	r23, r26
    b6de:	9f 01       	movw	r18, r30
    b6e0:	a1 11       	cpse	r26, r1
    b6e2:	03 c0       	rjmp	.+6      	; 0xb6ea <conv_brk+0x66>
    b6e4:	80 e0       	ldi	r24, 0x00	; 0
    b6e6:	90 e0       	ldi	r25, 0x00	; 0
    b6e8:	7b c0       	rjmp	.+246    	; 0xb7e0 <conv_brk+0x15c>
    b6ea:	ae 35       	cpi	r26, 0x5E	; 94
    b6ec:	19 f4       	brne	.+6      	; 0xb6f4 <conv_brk+0x70>
    b6ee:	41 15       	cp	r20, r1
    b6f0:	51 05       	cpc	r21, r1
    b6f2:	59 f1       	breq	.+86     	; 0xb74a <conv_brk+0xc6>
    b6f4:	e9 2d       	mov	r30, r9
    b6f6:	f0 e0       	ldi	r31, 0x00	; 0
    b6f8:	e4 17       	cp	r30, r20
    b6fa:	f5 07       	cpc	r31, r21
    b6fc:	3c f4       	brge	.+14     	; 0xb70c <conv_brk+0x88>
    b6fe:	ad 35       	cpi	r26, 0x5D	; 93
    b700:	69 f1       	breq	.+90     	; 0xb75c <conv_brk+0xd8>
    b702:	ad 32       	cpi	r26, 0x2D	; 45
    b704:	19 f4       	brne	.+6      	; 0xb70c <conv_brk+0x88>
    b706:	bb 23       	and	r27, r27
    b708:	19 f1       	breq	.+70     	; 0xb750 <conv_brk+0xcc>
    b70a:	03 c0       	rjmp	.+6      	; 0xb712 <conv_brk+0x8e>
    b70c:	b1 11       	cpse	r27, r1
    b70e:	01 c0       	rjmp	.+2      	; 0xb712 <conv_brk+0x8e>
    b710:	8a 2e       	mov	r8, r26
    b712:	e7 2f       	mov	r30, r23
    b714:	e6 95       	lsr	r30
    b716:	e6 95       	lsr	r30
    b718:	e6 95       	lsr	r30
    b71a:	86 01       	movw	r16, r12
    b71c:	0e 0f       	add	r16, r30
    b71e:	11 1d       	adc	r17, r1
    b720:	f8 01       	movw	r30, r16
    b722:	a7 2f       	mov	r26, r23
    b724:	a7 70       	andi	r26, 0x07	; 7
    b726:	8c 01       	movw	r16, r24
    b728:	02 c0       	rjmp	.+4      	; 0xb72e <conv_brk+0xaa>
    b72a:	00 0f       	add	r16, r16
    b72c:	11 1f       	adc	r17, r17
    b72e:	aa 95       	dec	r26
    b730:	e2 f7       	brpl	.-8      	; 0xb72a <conv_brk+0xa6>
    b732:	d8 01       	movw	r26, r16
    b734:	b0 81       	ld	r27, Z
    b736:	ba 2b       	or	r27, r26
    b738:	b0 83       	st	Z, r27
    b73a:	78 15       	cp	r23, r8
    b73c:	59 f0       	breq	.+22     	; 0xb754 <conv_brk+0xd0>
    b73e:	78 15       	cp	r23, r8
    b740:	10 f4       	brcc	.+4      	; 0xb746 <conv_brk+0xc2>
    b742:	7f 5f       	subi	r23, 0xFF	; 255
    b744:	e6 cf       	rjmp	.-52     	; 0xb712 <conv_brk+0x8e>
    b746:	71 50       	subi	r23, 0x01	; 1
    b748:	e4 cf       	rjmp	.-56     	; 0xb712 <conv_brk+0x8e>
    b74a:	99 24       	eor	r9, r9
    b74c:	93 94       	inc	r9
    b74e:	03 c0       	rjmp	.+6      	; 0xb756 <conv_brk+0xd2>
    b750:	b1 e0       	ldi	r27, 0x01	; 1
    b752:	01 c0       	rjmp	.+2      	; 0xb756 <conv_brk+0xd2>
    b754:	b0 e0       	ldi	r27, 0x00	; 0
    b756:	4f 5f       	subi	r20, 0xFF	; 255
    b758:	5f 4f       	sbci	r21, 0xFF	; 255
    b75a:	ba cf       	rjmp	.-140    	; 0xb6d0 <conv_brk+0x4c>
    b75c:	bb 23       	and	r27, r27
    b75e:	19 f0       	breq	.+6      	; 0xb766 <conv_brk+0xe2>
    b760:	8e 81       	ldd	r24, Y+6	; 0x06
    b762:	80 62       	ori	r24, 0x20	; 32
    b764:	8e 83       	std	Y+6, r24	; 0x06
    b766:	91 10       	cpse	r9, r1
    b768:	03 c0       	rjmp	.+6      	; 0xb770 <conv_brk+0xec>
    b76a:	99 24       	eor	r9, r9
    b76c:	93 94       	inc	r9
    b76e:	15 c0       	rjmp	.+42     	; 0xb79a <conv_brk+0x116>
    b770:	f6 01       	movw	r30, r12
    b772:	ce 01       	movw	r24, r28
    b774:	81 96       	adiw	r24, 0x21	; 33
    b776:	20 81       	ld	r18, Z
    b778:	20 95       	com	r18
    b77a:	21 93       	st	Z+, r18
    b77c:	e8 17       	cp	r30, r24
    b77e:	f9 07       	cpc	r31, r25
    b780:	d1 f7       	brne	.-12     	; 0xb776 <conv_brk+0xf2>
    b782:	f3 cf       	rjmp	.-26     	; 0xb76a <conv_brk+0xe6>
    b784:	e1 14       	cp	r14, r1
    b786:	f1 04       	cpc	r15, r1
    b788:	29 f0       	breq	.+10     	; 0xb794 <conv_brk+0x110>
    b78a:	d7 01       	movw	r26, r14
    b78c:	8c 93       	st	X, r24
    b78e:	f7 01       	movw	r30, r14
    b790:	31 96       	adiw	r30, 0x01	; 1
    b792:	7f 01       	movw	r14, r30
    b794:	61 50       	subi	r22, 0x01	; 1
    b796:	f1 f0       	breq	.+60     	; 0xb7d4 <conv_brk+0x150>
    b798:	91 2c       	mov	r9, r1
    b79a:	c5 01       	movw	r24, r10
    b79c:	69 a3       	std	Y+33, r22	; 0x21
    b79e:	93 d1       	rcall	.+806    	; 0xbac6 <fgetc>
    b7a0:	69 a1       	ldd	r22, Y+33	; 0x21
    b7a2:	97 fd       	sbrc	r25, 7
    b7a4:	15 c0       	rjmp	.+42     	; 0xb7d0 <conv_brk+0x14c>
    b7a6:	28 2f       	mov	r18, r24
    b7a8:	26 95       	lsr	r18
    b7aa:	26 95       	lsr	r18
    b7ac:	26 95       	lsr	r18
    b7ae:	f6 01       	movw	r30, r12
    b7b0:	e2 0f       	add	r30, r18
    b7b2:	f1 1d       	adc	r31, r1
    b7b4:	20 81       	ld	r18, Z
    b7b6:	30 e0       	ldi	r19, 0x00	; 0
    b7b8:	ac 01       	movw	r20, r24
    b7ba:	47 70       	andi	r20, 0x07	; 7
    b7bc:	55 27       	eor	r21, r21
    b7be:	02 c0       	rjmp	.+4      	; 0xb7c4 <conv_brk+0x140>
    b7c0:	35 95       	asr	r19
    b7c2:	27 95       	ror	r18
    b7c4:	4a 95       	dec	r20
    b7c6:	e2 f7       	brpl	.-8      	; 0xb7c0 <conv_brk+0x13c>
    b7c8:	20 fd       	sbrc	r18, 0
    b7ca:	dc cf       	rjmp	.-72     	; 0xb784 <conv_brk+0x100>
    b7cc:	b5 01       	movw	r22, r10
    b7ce:	eb d1       	rcall	.+982    	; 0xbba6 <ungetc>
    b7d0:	91 10       	cpse	r9, r1
    b7d2:	88 cf       	rjmp	.-240    	; 0xb6e4 <conv_brk+0x60>
    b7d4:	e1 14       	cp	r14, r1
    b7d6:	f1 04       	cpc	r15, r1
    b7d8:	11 f0       	breq	.+4      	; 0xb7de <conv_brk+0x15a>
    b7da:	d7 01       	movw	r26, r14
    b7dc:	1c 92       	st	X, r1
    b7de:	c8 01       	movw	r24, r16
    b7e0:	a1 96       	adiw	r28, 0x21	; 33
    b7e2:	cd bf       	out	0x3d, r28	; 61
    b7e4:	de bf       	out	0x3e, r29	; 62
    b7e6:	df 91       	pop	r29
    b7e8:	cf 91       	pop	r28
    b7ea:	1f 91       	pop	r17
    b7ec:	0f 91       	pop	r16
    b7ee:	ff 90       	pop	r15
    b7f0:	ef 90       	pop	r14
    b7f2:	df 90       	pop	r13
    b7f4:	cf 90       	pop	r12
    b7f6:	bf 90       	pop	r11
    b7f8:	af 90       	pop	r10
    b7fa:	9f 90       	pop	r9
    b7fc:	8f 90       	pop	r8
    b7fe:	7f 90       	pop	r7
    b800:	08 95       	ret

0000b802 <vfscanf>:
    b802:	4f 92       	push	r4
    b804:	5f 92       	push	r5
    b806:	7f 92       	push	r7
    b808:	8f 92       	push	r8
    b80a:	9f 92       	push	r9
    b80c:	af 92       	push	r10
    b80e:	bf 92       	push	r11
    b810:	cf 92       	push	r12
    b812:	df 92       	push	r13
    b814:	ef 92       	push	r14
    b816:	ff 92       	push	r15
    b818:	0f 93       	push	r16
    b81a:	1f 93       	push	r17
    b81c:	cf 93       	push	r28
    b81e:	df 93       	push	r29
    b820:	1f 92       	push	r1
    b822:	cd b7       	in	r28, 0x3d	; 61
    b824:	de b7       	in	r29, 0x3e	; 62
    b826:	8c 01       	movw	r16, r24
    b828:	2b 01       	movw	r4, r22
    b82a:	7a 01       	movw	r14, r20
    b82c:	fc 01       	movw	r30, r24
    b82e:	16 82       	std	Z+6, r1	; 0x06
    b830:	17 82       	std	Z+7, r1	; 0x07
    b832:	a1 2c       	mov	r10, r1
    b834:	f8 01       	movw	r30, r16
    b836:	d3 80       	ldd	r13, Z+3	; 0x03
    b838:	f2 01       	movw	r30, r4
    b83a:	d3 fc       	sbrc	r13, 3
    b83c:	85 91       	lpm	r24, Z+
    b83e:	d3 fe       	sbrs	r13, 3
    b840:	81 91       	ld	r24, Z+
    b842:	38 2f       	mov	r19, r24
    b844:	2f 01       	movw	r4, r30
    b846:	88 23       	and	r24, r24
    b848:	09 f4       	brne	.+2      	; 0xb84c <vfscanf+0x4a>
    b84a:	ee c0       	rjmp	.+476    	; 0xba28 <vfscanf+0x226>
    b84c:	90 e0       	ldi	r25, 0x00	; 0
    b84e:	39 83       	std	Y+1, r19	; 0x01
    b850:	01 d1       	rcall	.+514    	; 0xba54 <isspace>
    b852:	39 81       	ldd	r19, Y+1	; 0x01
    b854:	89 2b       	or	r24, r25
    b856:	19 f0       	breq	.+6      	; 0xb85e <vfscanf+0x5c>
    b858:	c8 01       	movw	r24, r16
    b85a:	75 de       	rcall	.-790    	; 0xb546 <skip_spaces>
    b85c:	eb cf       	rjmp	.-42     	; 0xb834 <vfscanf+0x32>
    b85e:	35 32       	cpi	r19, 0x25	; 37
    b860:	41 f4       	brne	.+16     	; 0xb872 <vfscanf+0x70>
    b862:	f2 01       	movw	r30, r4
    b864:	d3 fc       	sbrc	r13, 3
    b866:	35 91       	lpm	r19, Z+
    b868:	d3 fe       	sbrs	r13, 3
    b86a:	31 91       	ld	r19, Z+
    b86c:	2f 01       	movw	r4, r30
    b86e:	35 32       	cpi	r19, 0x25	; 37
    b870:	59 f4       	brne	.+22     	; 0xb888 <vfscanf+0x86>
    b872:	c8 01       	movw	r24, r16
    b874:	39 83       	std	Y+1, r19	; 0x01
    b876:	27 d1       	rcall	.+590    	; 0xbac6 <fgetc>
    b878:	39 81       	ldd	r19, Y+1	; 0x01
    b87a:	97 fd       	sbrc	r25, 7
    b87c:	d3 c0       	rjmp	.+422    	; 0xba24 <vfscanf+0x222>
    b87e:	38 17       	cp	r19, r24
    b880:	c9 f2       	breq	.-78     	; 0xb834 <vfscanf+0x32>
    b882:	b8 01       	movw	r22, r16
    b884:	90 d1       	rcall	.+800    	; 0xbba6 <ungetc>
    b886:	d0 c0       	rjmp	.+416    	; 0xba28 <vfscanf+0x226>
    b888:	3a 32       	cpi	r19, 0x2A	; 42
    b88a:	41 f4       	brne	.+16     	; 0xb89c <vfscanf+0x9a>
    b88c:	d3 fc       	sbrc	r13, 3
    b88e:	35 91       	lpm	r19, Z+
    b890:	d3 fe       	sbrs	r13, 3
    b892:	31 91       	ld	r19, Z+
    b894:	2f 01       	movw	r4, r30
    b896:	bb 24       	eor	r11, r11
    b898:	b3 94       	inc	r11
    b89a:	01 c0       	rjmp	.+2      	; 0xb89e <vfscanf+0x9c>
    b89c:	b1 2c       	mov	r11, r1
    b89e:	71 2c       	mov	r7, r1
    b8a0:	20 ed       	ldi	r18, 0xD0	; 208
    b8a2:	23 0f       	add	r18, r19
    b8a4:	2a 30       	cpi	r18, 0x0A	; 10
    b8a6:	88 f4       	brcc	.+34     	; 0xb8ca <vfscanf+0xc8>
    b8a8:	fb 2d       	mov	r31, r11
    b8aa:	f2 60       	ori	r31, 0x02	; 2
    b8ac:	bf 2e       	mov	r11, r31
    b8ae:	67 2d       	mov	r22, r7
    b8b0:	70 e0       	ldi	r23, 0x00	; 0
    b8b2:	80 e0       	ldi	r24, 0x00	; 0
    b8b4:	90 e0       	ldi	r25, 0x00	; 0
    b8b6:	40 e2       	ldi	r20, 0x20	; 32
    b8b8:	26 de       	rcall	.-948    	; 0xb506 <mulacc>
    b8ba:	76 2e       	mov	r7, r22
    b8bc:	f2 01       	movw	r30, r4
    b8be:	d3 fc       	sbrc	r13, 3
    b8c0:	35 91       	lpm	r19, Z+
    b8c2:	d3 fe       	sbrs	r13, 3
    b8c4:	31 91       	ld	r19, Z+
    b8c6:	2f 01       	movw	r4, r30
    b8c8:	eb cf       	rjmp	.-42     	; 0xb8a0 <vfscanf+0x9e>
    b8ca:	b1 fe       	sbrs	r11, 1
    b8cc:	03 c0       	rjmp	.+6      	; 0xb8d4 <vfscanf+0xd2>
    b8ce:	71 10       	cpse	r7, r1
    b8d0:	03 c0       	rjmp	.+6      	; 0xb8d8 <vfscanf+0xd6>
    b8d2:	aa c0       	rjmp	.+340    	; 0xba28 <vfscanf+0x226>
    b8d4:	77 24       	eor	r7, r7
    b8d6:	7a 94       	dec	r7
    b8d8:	38 36       	cpi	r19, 0x68	; 104
    b8da:	19 f0       	breq	.+6      	; 0xb8e2 <vfscanf+0xe0>
    b8dc:	3c 36       	cpi	r19, 0x6C	; 108
    b8de:	61 f0       	breq	.+24     	; 0xb8f8 <vfscanf+0xf6>
    b8e0:	14 c0       	rjmp	.+40     	; 0xb90a <vfscanf+0x108>
    b8e2:	f2 01       	movw	r30, r4
    b8e4:	d3 fc       	sbrc	r13, 3
    b8e6:	35 91       	lpm	r19, Z+
    b8e8:	d3 fe       	sbrs	r13, 3
    b8ea:	31 91       	ld	r19, Z+
    b8ec:	2f 01       	movw	r4, r30
    b8ee:	38 36       	cpi	r19, 0x68	; 104
    b8f0:	61 f4       	brne	.+24     	; 0xb90a <vfscanf+0x108>
    b8f2:	fb 2d       	mov	r31, r11
    b8f4:	f8 60       	ori	r31, 0x08	; 8
    b8f6:	bf 2e       	mov	r11, r31
    b8f8:	8b 2d       	mov	r24, r11
    b8fa:	84 60       	ori	r24, 0x04	; 4
    b8fc:	b8 2e       	mov	r11, r24
    b8fe:	f2 01       	movw	r30, r4
    b900:	d3 fc       	sbrc	r13, 3
    b902:	35 91       	lpm	r19, Z+
    b904:	d3 fe       	sbrs	r13, 3
    b906:	31 91       	ld	r19, Z+
    b908:	2f 01       	movw	r4, r30
    b90a:	33 23       	and	r19, r19
    b90c:	09 f4       	brne	.+2      	; 0xb910 <vfscanf+0x10e>
    b90e:	8c c0       	rjmp	.+280    	; 0xba28 <vfscanf+0x226>
    b910:	63 2f       	mov	r22, r19
    b912:	70 e0       	ldi	r23, 0x00	; 0
    b914:	8b e7       	ldi	r24, 0x7B	; 123
    b916:	9e e0       	ldi	r25, 0x0E	; 14
    b918:	39 83       	std	Y+1, r19	; 0x01
    b91a:	a4 d0       	rcall	.+328    	; 0xba64 <strchr_P>
    b91c:	39 81       	ldd	r19, Y+1	; 0x01
    b91e:	89 2b       	or	r24, r25
    b920:	09 f4       	brne	.+2      	; 0xb924 <vfscanf+0x122>
    b922:	82 c0       	rjmp	.+260    	; 0xba28 <vfscanf+0x226>
    b924:	b0 fc       	sbrc	r11, 0
    b926:	07 c0       	rjmp	.+14     	; 0xb936 <vfscanf+0x134>
    b928:	f7 01       	movw	r30, r14
    b92a:	c0 80       	ld	r12, Z
    b92c:	d1 80       	ldd	r13, Z+1	; 0x01
    b92e:	c7 01       	movw	r24, r14
    b930:	02 96       	adiw	r24, 0x02	; 2
    b932:	7c 01       	movw	r14, r24
    b934:	02 c0       	rjmp	.+4      	; 0xb93a <vfscanf+0x138>
    b936:	c1 2c       	mov	r12, r1
    b938:	d1 2c       	mov	r13, r1
    b93a:	3e 36       	cpi	r19, 0x6E	; 110
    b93c:	49 f4       	brne	.+18     	; 0xb950 <vfscanf+0x14e>
    b93e:	f8 01       	movw	r30, r16
    b940:	46 81       	ldd	r20, Z+6	; 0x06
    b942:	57 81       	ldd	r21, Z+7	; 0x07
    b944:	60 e0       	ldi	r22, 0x00	; 0
    b946:	70 e0       	ldi	r23, 0x00	; 0
    b948:	2b 2d       	mov	r18, r11
    b94a:	c6 01       	movw	r24, r12
    b94c:	d0 dd       	rcall	.-1120   	; 0xb4ee <putval>
    b94e:	72 cf       	rjmp	.-284    	; 0xb834 <vfscanf+0x32>
    b950:	33 36       	cpi	r19, 0x63	; 99
    b952:	99 f4       	brne	.+38     	; 0xb97a <vfscanf+0x178>
    b954:	b1 fc       	sbrc	r11, 1
    b956:	02 c0       	rjmp	.+4      	; 0xb95c <vfscanf+0x15a>
    b958:	77 24       	eor	r7, r7
    b95a:	73 94       	inc	r7
    b95c:	c8 01       	movw	r24, r16
    b95e:	b3 d0       	rcall	.+358    	; 0xbac6 <fgetc>
    b960:	97 fd       	sbrc	r25, 7
    b962:	60 c0       	rjmp	.+192    	; 0xba24 <vfscanf+0x222>
    b964:	c1 14       	cp	r12, r1
    b966:	d1 04       	cpc	r13, r1
    b968:	29 f0       	breq	.+10     	; 0xb974 <vfscanf+0x172>
    b96a:	f6 01       	movw	r30, r12
    b96c:	80 83       	st	Z, r24
    b96e:	c6 01       	movw	r24, r12
    b970:	01 96       	adiw	r24, 0x01	; 1
    b972:	6c 01       	movw	r12, r24
    b974:	7a 94       	dec	r7
    b976:	91 f7       	brne	.-28     	; 0xb95c <vfscanf+0x15a>
    b978:	51 c0       	rjmp	.+162    	; 0xba1c <vfscanf+0x21a>
    b97a:	3b 35       	cpi	r19, 0x5B	; 91
    b97c:	51 f4       	brne	.+20     	; 0xb992 <vfscanf+0x190>
    b97e:	92 01       	movw	r18, r4
    b980:	a6 01       	movw	r20, r12
    b982:	67 2d       	mov	r22, r7
    b984:	c8 01       	movw	r24, r16
    b986:	7e de       	rcall	.-772    	; 0xb684 <conv_brk>
    b988:	2c 01       	movw	r4, r24
    b98a:	00 97       	sbiw	r24, 0x00	; 0
    b98c:	09 f0       	breq	.+2      	; 0xb990 <vfscanf+0x18e>
    b98e:	46 c0       	rjmp	.+140    	; 0xba1c <vfscanf+0x21a>
    b990:	40 c0       	rjmp	.+128    	; 0xba12 <vfscanf+0x210>
    b992:	c8 01       	movw	r24, r16
    b994:	39 83       	std	Y+1, r19	; 0x01
    b996:	d7 dd       	rcall	.-1106   	; 0xb546 <skip_spaces>
    b998:	39 81       	ldd	r19, Y+1	; 0x01
    b99a:	97 fd       	sbrc	r25, 7
    b99c:	43 c0       	rjmp	.+134    	; 0xba24 <vfscanf+0x222>
    b99e:	3f 36       	cpi	r19, 0x6F	; 111
    b9a0:	51 f1       	breq	.+84     	; 0xb9f6 <vfscanf+0x1f4>
    b9a2:	28 f4       	brcc	.+10     	; 0xb9ae <vfscanf+0x1ac>
    b9a4:	34 36       	cpi	r19, 0x64	; 100
    b9a6:	19 f1       	breq	.+70     	; 0xb9ee <vfscanf+0x1ec>
    b9a8:	39 36       	cpi	r19, 0x69	; 105
    b9aa:	61 f1       	breq	.+88     	; 0xba04 <vfscanf+0x202>
    b9ac:	28 c0       	rjmp	.+80     	; 0xb9fe <vfscanf+0x1fc>
    b9ae:	33 37       	cpi	r19, 0x73	; 115
    b9b0:	69 f0       	breq	.+26     	; 0xb9cc <vfscanf+0x1ca>
    b9b2:	35 37       	cpi	r19, 0x75	; 117
    b9b4:	e1 f0       	breq	.+56     	; 0xb9ee <vfscanf+0x1ec>
    b9b6:	23 c0       	rjmp	.+70     	; 0xb9fe <vfscanf+0x1fc>
    b9b8:	c1 14       	cp	r12, r1
    b9ba:	d1 04       	cpc	r13, r1
    b9bc:	29 f0       	breq	.+10     	; 0xb9c8 <vfscanf+0x1c6>
    b9be:	f6 01       	movw	r30, r12
    b9c0:	80 82       	st	Z, r8
    b9c2:	c6 01       	movw	r24, r12
    b9c4:	01 96       	adiw	r24, 0x01	; 1
    b9c6:	6c 01       	movw	r12, r24
    b9c8:	7a 94       	dec	r7
    b9ca:	59 f0       	breq	.+22     	; 0xb9e2 <vfscanf+0x1e0>
    b9cc:	c8 01       	movw	r24, r16
    b9ce:	7b d0       	rcall	.+246    	; 0xbac6 <fgetc>
    b9d0:	4c 01       	movw	r8, r24
    b9d2:	97 fd       	sbrc	r25, 7
    b9d4:	06 c0       	rjmp	.+12     	; 0xb9e2 <vfscanf+0x1e0>
    b9d6:	3e d0       	rcall	.+124    	; 0xba54 <isspace>
    b9d8:	89 2b       	or	r24, r25
    b9da:	71 f3       	breq	.-36     	; 0xb9b8 <vfscanf+0x1b6>
    b9dc:	b8 01       	movw	r22, r16
    b9de:	c4 01       	movw	r24, r8
    b9e0:	e2 d0       	rcall	.+452    	; 0xbba6 <ungetc>
    b9e2:	c1 14       	cp	r12, r1
    b9e4:	d1 04       	cpc	r13, r1
    b9e6:	d1 f0       	breq	.+52     	; 0xba1c <vfscanf+0x21a>
    b9e8:	f6 01       	movw	r30, r12
    b9ea:	10 82       	st	Z, r1
    b9ec:	17 c0       	rjmp	.+46     	; 0xba1c <vfscanf+0x21a>
    b9ee:	fb 2d       	mov	r31, r11
    b9f0:	f0 62       	ori	r31, 0x20	; 32
    b9f2:	bf 2e       	mov	r11, r31
    b9f4:	07 c0       	rjmp	.+14     	; 0xba04 <vfscanf+0x202>
    b9f6:	8b 2d       	mov	r24, r11
    b9f8:	80 61       	ori	r24, 0x10	; 16
    b9fa:	b8 2e       	mov	r11, r24
    b9fc:	03 c0       	rjmp	.+6      	; 0xba04 <vfscanf+0x202>
    b9fe:	9b 2d       	mov	r25, r11
    ba00:	90 64       	ori	r25, 0x40	; 64
    ba02:	b9 2e       	mov	r11, r25
    ba04:	2b 2d       	mov	r18, r11
    ba06:	a6 01       	movw	r20, r12
    ba08:	67 2d       	mov	r22, r7
    ba0a:	c8 01       	movw	r24, r16
    ba0c:	b2 dd       	rcall	.-1180   	; 0xb572 <conv_int>
    ba0e:	81 11       	cpse	r24, r1
    ba10:	05 c0       	rjmp	.+10     	; 0xba1c <vfscanf+0x21a>
    ba12:	f8 01       	movw	r30, r16
    ba14:	83 81       	ldd	r24, Z+3	; 0x03
    ba16:	80 73       	andi	r24, 0x30	; 48
    ba18:	29 f4       	brne	.+10     	; 0xba24 <vfscanf+0x222>
    ba1a:	06 c0       	rjmp	.+12     	; 0xba28 <vfscanf+0x226>
    ba1c:	b0 fc       	sbrc	r11, 0
    ba1e:	0a cf       	rjmp	.-492    	; 0xb834 <vfscanf+0x32>
    ba20:	a3 94       	inc	r10
    ba22:	08 cf       	rjmp	.-496    	; 0xb834 <vfscanf+0x32>
    ba24:	aa 20       	and	r10, r10
    ba26:	19 f0       	breq	.+6      	; 0xba2e <vfscanf+0x22c>
    ba28:	8a 2d       	mov	r24, r10
    ba2a:	90 e0       	ldi	r25, 0x00	; 0
    ba2c:	02 c0       	rjmp	.+4      	; 0xba32 <vfscanf+0x230>
    ba2e:	8f ef       	ldi	r24, 0xFF	; 255
    ba30:	9f ef       	ldi	r25, 0xFF	; 255
    ba32:	0f 90       	pop	r0
    ba34:	df 91       	pop	r29
    ba36:	cf 91       	pop	r28
    ba38:	1f 91       	pop	r17
    ba3a:	0f 91       	pop	r16
    ba3c:	ff 90       	pop	r15
    ba3e:	ef 90       	pop	r14
    ba40:	df 90       	pop	r13
    ba42:	cf 90       	pop	r12
    ba44:	bf 90       	pop	r11
    ba46:	af 90       	pop	r10
    ba48:	9f 90       	pop	r9
    ba4a:	8f 90       	pop	r8
    ba4c:	7f 90       	pop	r7
    ba4e:	5f 90       	pop	r5
    ba50:	4f 90       	pop	r4
    ba52:	08 95       	ret

0000ba54 <isspace>:
    ba54:	91 11       	cpse	r25, r1
    ba56:	1e c1       	rjmp	.+572    	; 0xbc94 <__ctype_isfalse>
    ba58:	80 32       	cpi	r24, 0x20	; 32
    ba5a:	19 f0       	breq	.+6      	; 0xba62 <isspace+0xe>
    ba5c:	89 50       	subi	r24, 0x09	; 9
    ba5e:	85 50       	subi	r24, 0x05	; 5
    ba60:	d0 f7       	brcc	.-12     	; 0xba56 <isspace+0x2>
    ba62:	08 95       	ret

0000ba64 <strchr_P>:
    ba64:	fc 01       	movw	r30, r24
    ba66:	05 90       	lpm	r0, Z+
    ba68:	06 16       	cp	r0, r22
    ba6a:	21 f0       	breq	.+8      	; 0xba74 <strchr_P+0x10>
    ba6c:	00 20       	and	r0, r0
    ba6e:	d9 f7       	brne	.-10     	; 0xba66 <strchr_P+0x2>
    ba70:	c0 01       	movw	r24, r0
    ba72:	08 95       	ret
    ba74:	31 97       	sbiw	r30, 0x01	; 1
    ba76:	cf 01       	movw	r24, r30
    ba78:	08 95       	ret

0000ba7a <strnlen_P>:
    ba7a:	fc 01       	movw	r30, r24
    ba7c:	05 90       	lpm	r0, Z+
    ba7e:	61 50       	subi	r22, 0x01	; 1
    ba80:	70 40       	sbci	r23, 0x00	; 0
    ba82:	01 10       	cpse	r0, r1
    ba84:	d8 f7       	brcc	.-10     	; 0xba7c <strnlen_P+0x2>
    ba86:	80 95       	com	r24
    ba88:	90 95       	com	r25
    ba8a:	8e 0f       	add	r24, r30
    ba8c:	9f 1f       	adc	r25, r31
    ba8e:	08 95       	ret

0000ba90 <strnlen>:
    ba90:	fc 01       	movw	r30, r24
    ba92:	61 50       	subi	r22, 0x01	; 1
    ba94:	70 40       	sbci	r23, 0x00	; 0
    ba96:	01 90       	ld	r0, Z+
    ba98:	01 10       	cpse	r0, r1
    ba9a:	d8 f7       	brcc	.-10     	; 0xba92 <strnlen+0x2>
    ba9c:	80 95       	com	r24
    ba9e:	90 95       	com	r25
    baa0:	8e 0f       	add	r24, r30
    baa2:	9f 1f       	adc	r25, r31
    baa4:	08 95       	ret

0000baa6 <strrev>:
    baa6:	dc 01       	movw	r26, r24
    baa8:	fc 01       	movw	r30, r24
    baaa:	67 2f       	mov	r22, r23
    baac:	71 91       	ld	r23, Z+
    baae:	77 23       	and	r23, r23
    bab0:	e1 f7       	brne	.-8      	; 0xbaaa <strrev+0x4>
    bab2:	32 97       	sbiw	r30, 0x02	; 2
    bab4:	04 c0       	rjmp	.+8      	; 0xbabe <strrev+0x18>
    bab6:	7c 91       	ld	r23, X
    bab8:	6d 93       	st	X+, r22
    baba:	70 83       	st	Z, r23
    babc:	62 91       	ld	r22, -Z
    babe:	ae 17       	cp	r26, r30
    bac0:	bf 07       	cpc	r27, r31
    bac2:	c8 f3       	brcs	.-14     	; 0xbab6 <strrev+0x10>
    bac4:	08 95       	ret

0000bac6 <fgetc>:
    bac6:	cf 93       	push	r28
    bac8:	df 93       	push	r29
    baca:	ec 01       	movw	r28, r24
    bacc:	2b 81       	ldd	r18, Y+3	; 0x03
    bace:	20 ff       	sbrs	r18, 0
    bad0:	33 c0       	rjmp	.+102    	; 0xbb38 <fgetc+0x72>
    bad2:	26 ff       	sbrs	r18, 6
    bad4:	0a c0       	rjmp	.+20     	; 0xbaea <fgetc+0x24>
    bad6:	2f 7b       	andi	r18, 0xBF	; 191
    bad8:	2b 83       	std	Y+3, r18	; 0x03
    bada:	8e 81       	ldd	r24, Y+6	; 0x06
    badc:	9f 81       	ldd	r25, Y+7	; 0x07
    bade:	01 96       	adiw	r24, 0x01	; 1
    bae0:	8e 83       	std	Y+6, r24	; 0x06
    bae2:	9f 83       	std	Y+7, r25	; 0x07
    bae4:	8a 81       	ldd	r24, Y+2	; 0x02
    bae6:	90 e0       	ldi	r25, 0x00	; 0
    bae8:	29 c0       	rjmp	.+82     	; 0xbb3c <fgetc+0x76>
    baea:	22 ff       	sbrs	r18, 2
    baec:	0f c0       	rjmp	.+30     	; 0xbb0c <fgetc+0x46>
    baee:	e8 81       	ld	r30, Y
    baf0:	f9 81       	ldd	r31, Y+1	; 0x01
    baf2:	80 81       	ld	r24, Z
    baf4:	99 27       	eor	r25, r25
    baf6:	87 fd       	sbrc	r24, 7
    baf8:	90 95       	com	r25
    bafa:	00 97       	sbiw	r24, 0x00	; 0
    bafc:	19 f4       	brne	.+6      	; 0xbb04 <fgetc+0x3e>
    bafe:	20 62       	ori	r18, 0x20	; 32
    bb00:	2b 83       	std	Y+3, r18	; 0x03
    bb02:	1a c0       	rjmp	.+52     	; 0xbb38 <fgetc+0x72>
    bb04:	31 96       	adiw	r30, 0x01	; 1
    bb06:	e8 83       	st	Y, r30
    bb08:	f9 83       	std	Y+1, r31	; 0x01
    bb0a:	0e c0       	rjmp	.+28     	; 0xbb28 <fgetc+0x62>
    bb0c:	ea 85       	ldd	r30, Y+10	; 0x0a
    bb0e:	fb 85       	ldd	r31, Y+11	; 0x0b
    bb10:	09 95       	icall
    bb12:	97 ff       	sbrs	r25, 7
    bb14:	09 c0       	rjmp	.+18     	; 0xbb28 <fgetc+0x62>
    bb16:	2b 81       	ldd	r18, Y+3	; 0x03
    bb18:	01 96       	adiw	r24, 0x01	; 1
    bb1a:	11 f4       	brne	.+4      	; 0xbb20 <fgetc+0x5a>
    bb1c:	80 e1       	ldi	r24, 0x10	; 16
    bb1e:	01 c0       	rjmp	.+2      	; 0xbb22 <fgetc+0x5c>
    bb20:	80 e2       	ldi	r24, 0x20	; 32
    bb22:	82 2b       	or	r24, r18
    bb24:	8b 83       	std	Y+3, r24	; 0x03
    bb26:	08 c0       	rjmp	.+16     	; 0xbb38 <fgetc+0x72>
    bb28:	2e 81       	ldd	r18, Y+6	; 0x06
    bb2a:	3f 81       	ldd	r19, Y+7	; 0x07
    bb2c:	2f 5f       	subi	r18, 0xFF	; 255
    bb2e:	3f 4f       	sbci	r19, 0xFF	; 255
    bb30:	2e 83       	std	Y+6, r18	; 0x06
    bb32:	3f 83       	std	Y+7, r19	; 0x07
    bb34:	99 27       	eor	r25, r25
    bb36:	02 c0       	rjmp	.+4      	; 0xbb3c <fgetc+0x76>
    bb38:	8f ef       	ldi	r24, 0xFF	; 255
    bb3a:	9f ef       	ldi	r25, 0xFF	; 255
    bb3c:	df 91       	pop	r29
    bb3e:	cf 91       	pop	r28
    bb40:	08 95       	ret

0000bb42 <fputc>:
    bb42:	0f 93       	push	r16
    bb44:	1f 93       	push	r17
    bb46:	cf 93       	push	r28
    bb48:	df 93       	push	r29
    bb4a:	18 2f       	mov	r17, r24
    bb4c:	09 2f       	mov	r16, r25
    bb4e:	eb 01       	movw	r28, r22
    bb50:	8b 81       	ldd	r24, Y+3	; 0x03
    bb52:	81 fd       	sbrc	r24, 1
    bb54:	03 c0       	rjmp	.+6      	; 0xbb5c <fputc+0x1a>
    bb56:	8f ef       	ldi	r24, 0xFF	; 255
    bb58:	9f ef       	ldi	r25, 0xFF	; 255
    bb5a:	20 c0       	rjmp	.+64     	; 0xbb9c <fputc+0x5a>
    bb5c:	82 ff       	sbrs	r24, 2
    bb5e:	10 c0       	rjmp	.+32     	; 0xbb80 <fputc+0x3e>
    bb60:	4e 81       	ldd	r20, Y+6	; 0x06
    bb62:	5f 81       	ldd	r21, Y+7	; 0x07
    bb64:	2c 81       	ldd	r18, Y+4	; 0x04
    bb66:	3d 81       	ldd	r19, Y+5	; 0x05
    bb68:	42 17       	cp	r20, r18
    bb6a:	53 07       	cpc	r21, r19
    bb6c:	7c f4       	brge	.+30     	; 0xbb8c <fputc+0x4a>
    bb6e:	e8 81       	ld	r30, Y
    bb70:	f9 81       	ldd	r31, Y+1	; 0x01
    bb72:	9f 01       	movw	r18, r30
    bb74:	2f 5f       	subi	r18, 0xFF	; 255
    bb76:	3f 4f       	sbci	r19, 0xFF	; 255
    bb78:	28 83       	st	Y, r18
    bb7a:	39 83       	std	Y+1, r19	; 0x01
    bb7c:	10 83       	st	Z, r17
    bb7e:	06 c0       	rjmp	.+12     	; 0xbb8c <fputc+0x4a>
    bb80:	e8 85       	ldd	r30, Y+8	; 0x08
    bb82:	f9 85       	ldd	r31, Y+9	; 0x09
    bb84:	81 2f       	mov	r24, r17
    bb86:	09 95       	icall
    bb88:	89 2b       	or	r24, r25
    bb8a:	29 f7       	brne	.-54     	; 0xbb56 <fputc+0x14>
    bb8c:	2e 81       	ldd	r18, Y+6	; 0x06
    bb8e:	3f 81       	ldd	r19, Y+7	; 0x07
    bb90:	2f 5f       	subi	r18, 0xFF	; 255
    bb92:	3f 4f       	sbci	r19, 0xFF	; 255
    bb94:	2e 83       	std	Y+6, r18	; 0x06
    bb96:	3f 83       	std	Y+7, r19	; 0x07
    bb98:	81 2f       	mov	r24, r17
    bb9a:	90 2f       	mov	r25, r16
    bb9c:	df 91       	pop	r29
    bb9e:	cf 91       	pop	r28
    bba0:	1f 91       	pop	r17
    bba2:	0f 91       	pop	r16
    bba4:	08 95       	ret

0000bba6 <ungetc>:
    bba6:	fb 01       	movw	r30, r22
    bba8:	23 81       	ldd	r18, Z+3	; 0x03
    bbaa:	20 ff       	sbrs	r18, 0
    bbac:	12 c0       	rjmp	.+36     	; 0xbbd2 <ungetc+0x2c>
    bbae:	26 fd       	sbrc	r18, 6
    bbb0:	10 c0       	rjmp	.+32     	; 0xbbd2 <ungetc+0x2c>
    bbb2:	8f 3f       	cpi	r24, 0xFF	; 255
    bbb4:	3f ef       	ldi	r19, 0xFF	; 255
    bbb6:	93 07       	cpc	r25, r19
    bbb8:	61 f0       	breq	.+24     	; 0xbbd2 <ungetc+0x2c>
    bbba:	82 83       	std	Z+2, r24	; 0x02
    bbbc:	2f 7d       	andi	r18, 0xDF	; 223
    bbbe:	20 64       	ori	r18, 0x40	; 64
    bbc0:	23 83       	std	Z+3, r18	; 0x03
    bbc2:	26 81       	ldd	r18, Z+6	; 0x06
    bbc4:	37 81       	ldd	r19, Z+7	; 0x07
    bbc6:	21 50       	subi	r18, 0x01	; 1
    bbc8:	31 09       	sbc	r19, r1
    bbca:	26 83       	std	Z+6, r18	; 0x06
    bbcc:	37 83       	std	Z+7, r19	; 0x07
    bbce:	99 27       	eor	r25, r25
    bbd0:	08 95       	ret
    bbd2:	8f ef       	ldi	r24, 0xFF	; 255
    bbd4:	9f ef       	ldi	r25, 0xFF	; 255
    bbd6:	08 95       	ret

0000bbd8 <__ultoa_invert>:
    bbd8:	fa 01       	movw	r30, r20
    bbda:	aa 27       	eor	r26, r26
    bbdc:	28 30       	cpi	r18, 0x08	; 8
    bbde:	51 f1       	breq	.+84     	; 0xbc34 <__ultoa_invert+0x5c>
    bbe0:	20 31       	cpi	r18, 0x10	; 16
    bbe2:	81 f1       	breq	.+96     	; 0xbc44 <__ultoa_invert+0x6c>
    bbe4:	e8 94       	clt
    bbe6:	6f 93       	push	r22
    bbe8:	6e 7f       	andi	r22, 0xFE	; 254
    bbea:	6e 5f       	subi	r22, 0xFE	; 254
    bbec:	7f 4f       	sbci	r23, 0xFF	; 255
    bbee:	8f 4f       	sbci	r24, 0xFF	; 255
    bbf0:	9f 4f       	sbci	r25, 0xFF	; 255
    bbf2:	af 4f       	sbci	r26, 0xFF	; 255
    bbf4:	b1 e0       	ldi	r27, 0x01	; 1
    bbf6:	3e d0       	rcall	.+124    	; 0xbc74 <__ultoa_invert+0x9c>
    bbf8:	b4 e0       	ldi	r27, 0x04	; 4
    bbfa:	3c d0       	rcall	.+120    	; 0xbc74 <__ultoa_invert+0x9c>
    bbfc:	67 0f       	add	r22, r23
    bbfe:	78 1f       	adc	r23, r24
    bc00:	89 1f       	adc	r24, r25
    bc02:	9a 1f       	adc	r25, r26
    bc04:	a1 1d       	adc	r26, r1
    bc06:	68 0f       	add	r22, r24
    bc08:	79 1f       	adc	r23, r25
    bc0a:	8a 1f       	adc	r24, r26
    bc0c:	91 1d       	adc	r25, r1
    bc0e:	a1 1d       	adc	r26, r1
    bc10:	6a 0f       	add	r22, r26
    bc12:	71 1d       	adc	r23, r1
    bc14:	81 1d       	adc	r24, r1
    bc16:	91 1d       	adc	r25, r1
    bc18:	a1 1d       	adc	r26, r1
    bc1a:	20 d0       	rcall	.+64     	; 0xbc5c <__ultoa_invert+0x84>
    bc1c:	09 f4       	brne	.+2      	; 0xbc20 <__ultoa_invert+0x48>
    bc1e:	68 94       	set
    bc20:	3f 91       	pop	r19
    bc22:	2a e0       	ldi	r18, 0x0A	; 10
    bc24:	26 9f       	mul	r18, r22
    bc26:	11 24       	eor	r1, r1
    bc28:	30 19       	sub	r19, r0
    bc2a:	30 5d       	subi	r19, 0xD0	; 208
    bc2c:	31 93       	st	Z+, r19
    bc2e:	de f6       	brtc	.-74     	; 0xbbe6 <__ultoa_invert+0xe>
    bc30:	cf 01       	movw	r24, r30
    bc32:	08 95       	ret
    bc34:	46 2f       	mov	r20, r22
    bc36:	47 70       	andi	r20, 0x07	; 7
    bc38:	40 5d       	subi	r20, 0xD0	; 208
    bc3a:	41 93       	st	Z+, r20
    bc3c:	b3 e0       	ldi	r27, 0x03	; 3
    bc3e:	0f d0       	rcall	.+30     	; 0xbc5e <__ultoa_invert+0x86>
    bc40:	c9 f7       	brne	.-14     	; 0xbc34 <__ultoa_invert+0x5c>
    bc42:	f6 cf       	rjmp	.-20     	; 0xbc30 <__ultoa_invert+0x58>
    bc44:	46 2f       	mov	r20, r22
    bc46:	4f 70       	andi	r20, 0x0F	; 15
    bc48:	40 5d       	subi	r20, 0xD0	; 208
    bc4a:	4a 33       	cpi	r20, 0x3A	; 58
    bc4c:	18 f0       	brcs	.+6      	; 0xbc54 <__ultoa_invert+0x7c>
    bc4e:	49 5d       	subi	r20, 0xD9	; 217
    bc50:	31 fd       	sbrc	r19, 1
    bc52:	40 52       	subi	r20, 0x20	; 32
    bc54:	41 93       	st	Z+, r20
    bc56:	02 d0       	rcall	.+4      	; 0xbc5c <__ultoa_invert+0x84>
    bc58:	a9 f7       	brne	.-22     	; 0xbc44 <__ultoa_invert+0x6c>
    bc5a:	ea cf       	rjmp	.-44     	; 0xbc30 <__ultoa_invert+0x58>
    bc5c:	b4 e0       	ldi	r27, 0x04	; 4
    bc5e:	a6 95       	lsr	r26
    bc60:	97 95       	ror	r25
    bc62:	87 95       	ror	r24
    bc64:	77 95       	ror	r23
    bc66:	67 95       	ror	r22
    bc68:	ba 95       	dec	r27
    bc6a:	c9 f7       	brne	.-14     	; 0xbc5e <__ultoa_invert+0x86>
    bc6c:	00 97       	sbiw	r24, 0x00	; 0
    bc6e:	61 05       	cpc	r22, r1
    bc70:	71 05       	cpc	r23, r1
    bc72:	08 95       	ret
    bc74:	9b 01       	movw	r18, r22
    bc76:	ac 01       	movw	r20, r24
    bc78:	0a 2e       	mov	r0, r26
    bc7a:	06 94       	lsr	r0
    bc7c:	57 95       	ror	r21
    bc7e:	47 95       	ror	r20
    bc80:	37 95       	ror	r19
    bc82:	27 95       	ror	r18
    bc84:	ba 95       	dec	r27
    bc86:	c9 f7       	brne	.-14     	; 0xbc7a <__ultoa_invert+0xa2>
    bc88:	62 0f       	add	r22, r18
    bc8a:	73 1f       	adc	r23, r19
    bc8c:	84 1f       	adc	r24, r20
    bc8e:	95 1f       	adc	r25, r21
    bc90:	a0 1d       	adc	r26, r0
    bc92:	08 95       	ret

0000bc94 <__ctype_isfalse>:
    bc94:	99 27       	eor	r25, r25
    bc96:	88 27       	eor	r24, r24

0000bc98 <__ctype_istrue>:
    bc98:	08 95       	ret

0000bc9a <_exit>:
    bc9a:	f8 94       	cli

0000bc9c <__stop_program>:
    bc9c:	ff cf       	rjmp	.-2      	; 0xbc9c <__stop_program>
