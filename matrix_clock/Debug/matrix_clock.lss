
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ad64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000982  00802000  0000ad64  0000adf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002fc  00802982  00802982  0000b77a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000b77a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000cd0  00000000  00000000  0000b7d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001ec5e  00000000  00000000  0000c4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000047a3  00000000  00000000  0002b104  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000b00d  00000000  00000000  0002f8a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00003028  00000000  00000000  0003a8b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004aec  00000000  00000000  0003d8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00012455  00000000  00000000  000423c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cd8  00000000  00000000  0005481d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a7 c6       	rjmp	.+3406   	; 0xd50 <_StackPaint>
       2:	00 00       	nop
       4:	db c6       	rjmp	.+3510   	; 0xdbc <__bad_interrupt>
       6:	00 00       	nop
       8:	d9 c6       	rjmp	.+3506   	; 0xdbc <__bad_interrupt>
       a:	00 00       	nop
       c:	d7 c6       	rjmp	.+3502   	; 0xdbc <__bad_interrupt>
       e:	00 00       	nop
      10:	d5 c6       	rjmp	.+3498   	; 0xdbc <__bad_interrupt>
      12:	00 00       	nop
      14:	d3 c6       	rjmp	.+3494   	; 0xdbc <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_6>
      1c:	cf c6       	rjmp	.+3486   	; 0xdbc <__bad_interrupt>
      1e:	00 00       	nop
      20:	cd c6       	rjmp	.+3482   	; 0xdbc <__bad_interrupt>
      22:	00 00       	nop
      24:	cb c6       	rjmp	.+3478   	; 0xdbc <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 fd 12 	jmp	0x25fa	; 0x25fa <__vector_10>
      2c:	c7 c6       	rjmp	.+3470   	; 0xdbc <__bad_interrupt>
      2e:	00 00       	nop
      30:	c5 c6       	rjmp	.+3466   	; 0xdbc <__bad_interrupt>
      32:	00 00       	nop
      34:	c3 c6       	rjmp	.+3462   	; 0xdbc <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 82 3a 	jmp	0x7504	; 0x7504 <__vector_14>
      3c:	bf c6       	rjmp	.+3454   	; 0xdbc <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 00 4c 	jmp	0x9800	; 0x9800 <__vector_16>
      44:	0c 94 5b 3a 	jmp	0x74b6	; 0x74b6 <__vector_17>
      48:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__vector_18>
      4c:	0c 94 28 4c 	jmp	0x9850	; 0x9850 <__vector_19>
      50:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__vector_20>
      54:	b3 c6       	rjmp	.+3430   	; 0xdbc <__bad_interrupt>
      56:	00 00       	nop
      58:	b1 c6       	rjmp	.+3426   	; 0xdbc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	af c6       	rjmp	.+3422   	; 0xdbc <__bad_interrupt>
      5e:	00 00       	nop
      60:	ad c6       	rjmp	.+3418   	; 0xdbc <__bad_interrupt>
      62:	00 00       	nop
      64:	ab c6       	rjmp	.+3414   	; 0xdbc <__bad_interrupt>
      66:	00 00       	nop
      68:	a9 c6       	rjmp	.+3410   	; 0xdbc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a7 c6       	rjmp	.+3406   	; 0xdbc <__bad_interrupt>
      6e:	00 00       	nop
      70:	a5 c6       	rjmp	.+3402   	; 0xdbc <__bad_interrupt>
      72:	00 00       	nop
      74:	a3 c6       	rjmp	.+3398   	; 0xdbc <__bad_interrupt>
      76:	00 00       	nop
      78:	a1 c6       	rjmp	.+3394   	; 0xdbc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	9f c6       	rjmp	.+3390   	; 0xdbc <__bad_interrupt>
      7e:	00 00       	nop
      80:	9d c6       	rjmp	.+3386   	; 0xdbc <__bad_interrupt>
      82:	00 00       	nop
      84:	9b c6       	rjmp	.+3382   	; 0xdbc <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__vector_34>
      8c:	97 c6       	rjmp	.+3374   	; 0xdbc <__bad_interrupt>
      8e:	00 00       	nop
      90:	95 c6       	rjmp	.+3370   	; 0xdbc <__bad_interrupt>
      92:	00 00       	nop
      94:	93 c6       	rjmp	.+3366   	; 0xdbc <__bad_interrupt>
      96:	00 00       	nop
      98:	91 c6       	rjmp	.+3362   	; 0xdbc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8f c6       	rjmp	.+3358   	; 0xdbc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	8d c6       	rjmp	.+3354   	; 0xdbc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	8b c6       	rjmp	.+3350   	; 0xdbc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	89 c6       	rjmp	.+3346   	; 0xdbc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	87 c6       	rjmp	.+3342   	; 0xdbc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	85 c6       	rjmp	.+3338   	; 0xdbc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	83 c6       	rjmp	.+3334   	; 0xdbc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	81 c6       	rjmp	.+3330   	; 0xdbc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	7f c6       	rjmp	.+3326   	; 0xdbc <__bad_interrupt>
      be:	00 00       	nop
      c0:	7d c6       	rjmp	.+3322   	; 0xdbc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	7b c6       	rjmp	.+3318   	; 0xdbc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	79 c6       	rjmp	.+3314   	; 0xdbc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	77 c6       	rjmp	.+3310   	; 0xdbc <__bad_interrupt>
      ce:	00 00       	nop
      d0:	75 c6       	rjmp	.+3306   	; 0xdbc <__bad_interrupt>
      d2:	00 00       	nop
      d4:	73 c6       	rjmp	.+3302   	; 0xdbc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	71 c6       	rjmp	.+3298   	; 0xdbc <__bad_interrupt>
      da:	00 00       	nop
      dc:	6f c6       	rjmp	.+3294   	; 0xdbc <__bad_interrupt>
      de:	00 00       	nop
      e0:	6d c6       	rjmp	.+3290   	; 0xdbc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6b c6       	rjmp	.+3286   	; 0xdbc <__bad_interrupt>
      e6:	00 00       	nop
      e8:	69 c6       	rjmp	.+3282   	; 0xdbc <__bad_interrupt>
      ea:	00 00       	nop
      ec:	67 c6       	rjmp	.+3278   	; 0xdbc <__bad_interrupt>
      ee:	00 00       	nop
      f0:	65 c6       	rjmp	.+3274   	; 0xdbc <__bad_interrupt>
      f2:	00 00       	nop
      f4:	63 c6       	rjmp	.+3270   	; 0xdbc <__bad_interrupt>
      f6:	00 00       	nop
      f8:	61 c6       	rjmp	.+3266   	; 0xdbc <__bad_interrupt>
      fa:	00 00       	nop
      fc:	5f c6       	rjmp	.+3262   	; 0xdbc <__bad_interrupt>
      fe:	00 00       	nop
     100:	5d c6       	rjmp	.+3258   	; 0xdbc <__bad_interrupt>
     102:	00 00       	nop
     104:	5b c6       	rjmp	.+3254   	; 0xdbc <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__vector_66>
     10c:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__vector_67>
     110:	55 c6       	rjmp	.+3242   	; 0xdbc <__bad_interrupt>
     112:	00 00       	nop
     114:	53 c6       	rjmp	.+3238   	; 0xdbc <__bad_interrupt>
     116:	00 00       	nop
     118:	51 c6       	rjmp	.+3234   	; 0xdbc <__bad_interrupt>
     11a:	00 00       	nop
     11c:	4f c6       	rjmp	.+3230   	; 0xdbc <__bad_interrupt>
     11e:	00 00       	nop
     120:	4d c6       	rjmp	.+3226   	; 0xdbc <__bad_interrupt>
     122:	00 00       	nop
     124:	4b c6       	rjmp	.+3222   	; 0xdbc <__bad_interrupt>
     126:	00 00       	nop
     128:	49 c6       	rjmp	.+3218   	; 0xdbc <__bad_interrupt>
     12a:	00 00       	nop
     12c:	47 c6       	rjmp	.+3214   	; 0xdbc <__bad_interrupt>
     12e:	00 00       	nop
     130:	45 c6       	rjmp	.+3210   	; 0xdbc <__bad_interrupt>
     132:	00 00       	nop
     134:	43 c6       	rjmp	.+3206   	; 0xdbc <__bad_interrupt>
     136:	00 00       	nop
     138:	41 c6       	rjmp	.+3202   	; 0xdbc <__bad_interrupt>
     13a:	00 00       	nop
     13c:	3f c6       	rjmp	.+3198   	; 0xdbc <__bad_interrupt>
     13e:	00 00       	nop
     140:	3d c6       	rjmp	.+3194   	; 0xdbc <__bad_interrupt>
     142:	00 00       	nop
     144:	3b c6       	rjmp	.+3190   	; 0xdbc <__bad_interrupt>
     146:	00 00       	nop
     148:	39 c6       	rjmp	.+3186   	; 0xdbc <__bad_interrupt>
     14a:	00 00       	nop
     14c:	37 c6       	rjmp	.+3182   	; 0xdbc <__bad_interrupt>
     14e:	00 00       	nop
     150:	35 c6       	rjmp	.+3178   	; 0xdbc <__bad_interrupt>
     152:	00 00       	nop
     154:	33 c6       	rjmp	.+3174   	; 0xdbc <__bad_interrupt>
     156:	00 00       	nop
     158:	31 c6       	rjmp	.+3170   	; 0xdbc <__bad_interrupt>
     15a:	00 00       	nop
     15c:	2f c6       	rjmp	.+3166   	; 0xdbc <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__vector_88>
     164:	2b c6       	rjmp	.+3158   	; 0xdbc <__bad_interrupt>
     166:	00 00       	nop
     168:	29 c6       	rjmp	.+3154   	; 0xdbc <__bad_interrupt>
     16a:	00 00       	nop
     16c:	27 c6       	rjmp	.+3150   	; 0xdbc <__bad_interrupt>
     16e:	00 00       	nop
     170:	25 c6       	rjmp	.+3146   	; 0xdbc <__bad_interrupt>
     172:	00 00       	nop
     174:	23 c6       	rjmp	.+3142   	; 0xdbc <__bad_interrupt>
     176:	00 00       	nop
     178:	21 c6       	rjmp	.+3138   	; 0xdbc <__bad_interrupt>
     17a:	00 00       	nop
     17c:	1f c6       	rjmp	.+3134   	; 0xdbc <__bad_interrupt>
     17e:	00 00       	nop
     180:	1d c6       	rjmp	.+3130   	; 0xdbc <__bad_interrupt>
     182:	00 00       	nop
     184:	1b c6       	rjmp	.+3126   	; 0xdbc <__bad_interrupt>
     186:	00 00       	nop
     188:	19 c6       	rjmp	.+3122   	; 0xdbc <__bad_interrupt>
     18a:	00 00       	nop
     18c:	17 c6       	rjmp	.+3118   	; 0xdbc <__bad_interrupt>
     18e:	00 00       	nop
     190:	15 c6       	rjmp	.+3114   	; 0xdbc <__bad_interrupt>
     192:	00 00       	nop
     194:	13 c6       	rjmp	.+3110   	; 0xdbc <__bad_interrupt>
     196:	00 00       	nop
     198:	11 c6       	rjmp	.+3106   	; 0xdbc <__bad_interrupt>
     19a:	00 00       	nop
     19c:	0f c6       	rjmp	.+3102   	; 0xdbc <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	0d c6       	rjmp	.+3098   	; 0xdbc <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	0b c6       	rjmp	.+3094   	; 0xdbc <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	09 c6       	rjmp	.+3090   	; 0xdbc <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	07 c6       	rjmp	.+3086   	; 0xdbc <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	05 c6       	rjmp	.+3082   	; 0xdbc <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	03 c6       	rjmp	.+3078   	; 0xdbc <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	01 c6       	rjmp	.+3074   	; 0xdbc <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	ff c5       	rjmp	.+3070   	; 0xdbc <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	fd c5       	rjmp	.+3066   	; 0xdbc <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	fb c5       	rjmp	.+3062   	; 0xdbc <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	f9 c5       	rjmp	.+3058   	; 0xdbc <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	f7 c5       	rjmp	.+3054   	; 0xdbc <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	f5 c5       	rjmp	.+3050   	; 0xdbc <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	f3 c5       	rjmp	.+3046   	; 0xdbc <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	f1 c5       	rjmp	.+3042   	; 0xdbc <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	ef c5       	rjmp	.+3038   	; 0xdbc <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	ed c5       	rjmp	.+3034   	; 0xdbc <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	eb c5       	rjmp	.+3030   	; 0xdbc <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	e9 c5       	rjmp	.+3026   	; 0xdbc <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	e7 c5       	rjmp	.+3022   	; 0xdbc <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	e5 c5       	rjmp	.+3018   	; 0xdbc <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	e3 c5       	rjmp	.+3014   	; 0xdbc <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	e1 c5       	rjmp	.+3010   	; 0xdbc <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	6c 4a       	sbci	r22, 0xAC	; 172
     1fe:	66 4a       	sbci	r22, 0xA6	; 166
     200:	69 4a       	sbci	r22, 0xA9	; 169
     202:	5d 4a       	sbci	r21, 0xAD	; 173
     204:	63 4a       	sbci	r22, 0xA3	; 163
     206:	57 4a       	sbci	r21, 0xA7	; 167
     208:	60 4a       	sbci	r22, 0xA0	; 160
     20a:	5a 4a       	sbci	r21, 0xAA	; 170
     20c:	e8 4a       	sbci	r30, 0xA8	; 168
     20e:	cf 4a       	sbci	r28, 0xAF	; 175
     210:	d7 4a       	sbci	r29, 0xA7	; 167
     212:	98 4a       	sbci	r25, 0xA8	; 168
     214:	c9 4a       	sbci	r28, 0xA9	; 169
     216:	8d 4a       	sbci	r24, 0xAD	; 173
     218:	c5 4a       	sbci	r28, 0xA5	; 165
     21a:	94 4a       	sbci	r25, 0xA4	; 164
     21c:	3e 4b       	sbci	r19, 0xBE	; 190
     21e:	4b 4b       	sbci	r20, 0xBB	; 187
     220:	49 4b       	sbci	r20, 0xB9	; 185
     222:	47 4b       	sbci	r20, 0xB7	; 183
     224:	45 4b       	sbci	r20, 0xB5	; 181
     226:	41 4b       	sbci	r20, 0xB1	; 177
     228:	43 4b       	sbci	r20, 0xB3	; 179
     22a:	c6 4c       	sbci	r28, 0xC6	; 198
     22c:	c8 4c       	sbci	r28, 0xC8	; 200
     22e:	c6 4c       	sbci	r28, 0xC6	; 198
     230:	cf 4c       	sbci	r28, 0xCF	; 207
     232:	c6 4c       	sbci	r28, 0xC6	; 198
     234:	cf 4c       	sbci	r28, 0xCF	; 207
     236:	c6 4c       	sbci	r28, 0xC6	; 198
     238:	c6 4c       	sbci	r28, 0xC6	; 198
     23a:	cf 4c       	sbci	r28, 0xCF	; 207
     23c:	c6 4c       	sbci	r28, 0xC6	; 198
     23e:	cf 4c       	sbci	r28, 0xCF	; 207
     240:	c6 4c       	sbci	r28, 0xC6	; 198

00000242 <__trampolines_end>:
     242:	00 00       	nop
     244:	00 00       	nop
     246:	00 00       	nop
     248:	20 50       	subi	r18, 0x00	; 0
     24a:	70 50       	subi	r23, 0x00	; 0
     24c:	20 00       	.word	0x0020	; ????
     24e:	20 70       	andi	r18, 0x00	; 0
     250:	50 70       	andi	r21, 0x00	; 0
     252:	20 00       	.word	0x0020	; ????
     254:	00 50       	subi	r16, 0x00	; 0
     256:	70 70       	andi	r23, 0x00	; 0
     258:	20 00       	.word	0x0020	; ????
     25a:	00 20       	and	r0, r0
     25c:	70 70       	andi	r23, 0x00	; 0
     25e:	20 00       	.word	0x0020	; ????
     260:	20 70       	andi	r18, 0x00	; 0
     262:	70 20       	and	r7, r0
     264:	70 00       	.word	0x0070	; ????
     266:	20 20       	and	r2, r0
     268:	70 20       	and	r7, r0
     26a:	70 00       	.word	0x0070	; ????
     26c:	00 00       	nop
     26e:	20 00       	.word	0x0020	; ????
     270:	00 00       	nop
     272:	f0 f0       	brcs	.+60     	; 0x2b0 <__trampolines_end+0x6e>
     274:	d0 f0       	brcs	.+52     	; 0x2aa <__trampolines_end+0x68>
     276:	f0 f0       	brcs	.+60     	; 0x2b4 <__trampolines_end+0x72>
     278:	00 70       	andi	r16, 0x00	; 0
     27a:	50 70       	andi	r21, 0x00	; 0
     27c:	00 00       	nop
     27e:	f0 80       	ld	r15, Z
     280:	a0 80       	ld	r10, Z
     282:	f0 f0       	brcs	.+60     	; 0x2c0 <__trampolines_end+0x7e>
     284:	00 30       	cpi	r16, 0x00	; 0
     286:	10 60       	ori	r17, 0x00	; 0
     288:	60 00       	.word	0x0060	; ????
     28a:	20 50       	subi	r18, 0x00	; 0
     28c:	20 70       	andi	r18, 0x00	; 0
     28e:	20 00       	.word	0x0020	; ????
     290:	20 30       	cpi	r18, 0x00	; 0
     292:	20 20       	and	r2, r0
     294:	60 00       	.word	0x0060	; ????
     296:	20 30       	cpi	r18, 0x00	; 0
     298:	50 10       	cpse	r5, r0
     29a:	20 00       	.word	0x0020	; ????
     29c:	20 70       	andi	r18, 0x00	; 0
     29e:	50 70       	andi	r21, 0x00	; 0
     2a0:	20 00       	.word	0x0020	; ????
     2a2:	40 60       	ori	r20, 0x00	; 0
     2a4:	70 60       	ori	r23, 0x00	; 0
     2a6:	40 00       	.word	0x0040	; ????
     2a8:	10 30       	cpi	r17, 0x00	; 0
     2aa:	70 30       	cpi	r23, 0x00	; 0
     2ac:	10 00       	.word	0x0010	; ????
     2ae:	20 70       	andi	r18, 0x00	; 0
     2b0:	20 70       	andi	r18, 0x00	; 0
     2b2:	20 00       	.word	0x0020	; ????
     2b4:	50 50       	subi	r21, 0x00	; 0
     2b6:	50 00       	.word	0x0050	; ????
     2b8:	50 00       	.word	0x0050	; ????
     2ba:	70 d0       	rcall	.+224    	; 0x39c <__trampolines_end+0x15a>
     2bc:	d0 50       	subi	r29, 0x00	; 0
     2be:	50 00       	.word	0x0050	; ????
     2c0:	30 60       	ori	r19, 0x00	; 0
     2c2:	50 30       	cpi	r21, 0x00	; 0
     2c4:	60 00       	.word	0x0060	; ????
     2c6:	00 00       	nop
     2c8:	00 00       	nop
     2ca:	70 00       	.word	0x0070	; ????
     2cc:	20 70       	andi	r18, 0x00	; 0
     2ce:	20 70       	andi	r18, 0x00	; 0
     2d0:	20 70       	andi	r18, 0x00	; 0
     2d2:	20 70       	andi	r18, 0x00	; 0
     2d4:	20 20       	and	r2, r0
     2d6:	20 00       	.word	0x0020	; ????
     2d8:	20 20       	and	r2, r0
     2da:	20 70       	andi	r18, 0x00	; 0
     2dc:	20 00       	.word	0x0020	; ????
     2de:	00 20       	and	r0, r0
     2e0:	f0 20       	and	r15, r0
     2e2:	00 00       	nop
     2e4:	00 40       	sbci	r16, 0x00	; 0
     2e6:	f0 40       	sbci	r31, 0x00	; 0
     2e8:	00 00       	nop
     2ea:	00 00       	nop
     2ec:	40 70       	andi	r20, 0x00	; 0
     2ee:	00 00       	nop
     2f0:	00 50       	subi	r16, 0x00	; 0
     2f2:	70 50       	subi	r23, 0x00	; 0
     2f4:	00 00       	nop
     2f6:	00 20       	and	r0, r0
     2f8:	70 70       	andi	r23, 0x00	; 0
     2fa:	00 00       	nop
     2fc:	00 70       	andi	r16, 0x00	; 0
     2fe:	70 20       	and	r7, r0
	...
     308:	20 20       	and	r2, r0
     30a:	20 00       	.word	0x0020	; ????
     30c:	20 00       	.word	0x0020	; ????
     30e:	50 50       	subi	r21, 0x00	; 0
     310:	00 00       	nop
     312:	00 00       	nop
     314:	50 70       	andi	r21, 0x00	; 0
     316:	50 70       	andi	r21, 0x00	; 0
     318:	50 00       	.word	0x0050	; ????
     31a:	20 30       	cpi	r18, 0x00	; 0
     31c:	60 30       	cpi	r22, 0x00	; 0
     31e:	60 20       	and	r6, r0
     320:	40 10       	cpse	r4, r0
     322:	20 40       	sbci	r18, 0x00	; 0
     324:	10 00       	.word	0x0010	; ????
     326:	20 50       	subi	r18, 0x00	; 0
     328:	30 50       	subi	r19, 0x00	; 0
     32a:	70 00       	.word	0x0070	; ????
     32c:	60 40       	sbci	r22, 0x00	; 0
     32e:	00 00       	nop
     330:	00 00       	nop
     332:	20 40       	sbci	r18, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	20 00       	.word	0x0020	; ????
     338:	40 20       	and	r4, r0
     33a:	20 20       	and	r2, r0
     33c:	40 00       	.word	0x0040	; ????
     33e:	50 20       	and	r5, r0
     340:	70 20       	and	r7, r0
     342:	50 00       	.word	0x0050	; ????
     344:	00 20       	and	r0, r0
     346:	70 20       	and	r7, r0
     348:	00 00       	nop
     34a:	00 00       	nop
     34c:	00 00       	nop
     34e:	60 40       	sbci	r22, 0x00	; 0
     350:	00 00       	nop
     352:	70 00       	.word	0x0070	; ????
     354:	00 00       	nop
     356:	00 00       	nop
     358:	00 00       	nop
     35a:	20 00       	.word	0x0020	; ????
     35c:	10 10       	cpse	r1, r0
     35e:	20 40       	sbci	r18, 0x00	; 0
     360:	40 00       	.word	0x0040	; ????
     362:	20 50       	subi	r18, 0x00	; 0
     364:	50 50       	subi	r21, 0x00	; 0
     366:	20 00       	.word	0x0020	; ????
     368:	20 60       	ori	r18, 0x00	; 0
     36a:	20 20       	and	r2, r0
     36c:	70 00       	.word	0x0070	; ????
     36e:	60 10       	cpse	r6, r0
     370:	20 40       	sbci	r18, 0x00	; 0
     372:	70 00       	.word	0x0070	; ????
     374:	60 10       	cpse	r6, r0
     376:	20 10       	cpse	r2, r0
     378:	60 00       	.word	0x0060	; ????
     37a:	10 50       	subi	r17, 0x00	; 0
     37c:	70 10       	cpse	r7, r0
     37e:	10 00       	.word	0x0010	; ????
     380:	70 40       	sbci	r23, 0x00	; 0
     382:	60 10       	cpse	r6, r0
     384:	60 00       	.word	0x0060	; ????
     386:	20 40       	sbci	r18, 0x00	; 0
     388:	60 50       	subi	r22, 0x00	; 0
     38a:	20 00       	.word	0x0020	; ????
     38c:	70 10       	cpse	r7, r0
     38e:	30 20       	and	r3, r0
     390:	20 00       	.word	0x0020	; ????
     392:	20 50       	subi	r18, 0x00	; 0
     394:	20 50       	subi	r18, 0x00	; 0
     396:	20 00       	.word	0x0020	; ????
     398:	20 50       	subi	r18, 0x00	; 0
     39a:	30 10       	cpse	r3, r0
     39c:	20 00       	.word	0x0020	; ????
     39e:	00 00       	nop
     3a0:	20 00       	.word	0x0020	; ????
     3a2:	20 00       	.word	0x0020	; ????
     3a4:	00 00       	nop
     3a6:	20 00       	.word	0x0020	; ????
     3a8:	60 40       	sbci	r22, 0x00	; 0
     3aa:	10 20       	and	r1, r0
     3ac:	40 20       	and	r4, r0
     3ae:	10 00       	.word	0x0010	; ????
     3b0:	00 00       	nop
     3b2:	70 00       	.word	0x0070	; ????
     3b4:	70 00       	.word	0x0070	; ????
     3b6:	40 20       	and	r4, r0
     3b8:	10 20       	and	r1, r0
     3ba:	40 00       	.word	0x0040	; ????
     3bc:	60 10       	cpse	r6, r0
     3be:	20 00       	.word	0x0020	; ????
     3c0:	20 00       	.word	0x0020	; ????
     3c2:	70 50       	subi	r23, 0x00	; 0
     3c4:	50 40       	sbci	r21, 0x00	; 0
     3c6:	70 00       	.word	0x0070	; ????
     3c8:	20 50       	subi	r18, 0x00	; 0
     3ca:	70 50       	subi	r23, 0x00	; 0
     3cc:	50 00       	.word	0x0050	; ????
     3ce:	60 50       	subi	r22, 0x00	; 0
     3d0:	60 50       	subi	r22, 0x00	; 0
     3d2:	60 00       	.word	0x0060	; ????
     3d4:	30 40       	sbci	r19, 0x00	; 0
     3d6:	40 40       	sbci	r20, 0x00	; 0
     3d8:	30 00       	.word	0x0030	; ????
     3da:	60 50       	subi	r22, 0x00	; 0
     3dc:	50 50       	subi	r21, 0x00	; 0
     3de:	60 00       	.word	0x0060	; ????
     3e0:	70 40       	sbci	r23, 0x00	; 0
     3e2:	60 40       	sbci	r22, 0x00	; 0
     3e4:	70 00       	.word	0x0070	; ????
     3e6:	70 40       	sbci	r23, 0x00	; 0
     3e8:	60 40       	sbci	r22, 0x00	; 0
     3ea:	40 00       	.word	0x0040	; ????
     3ec:	30 40       	sbci	r19, 0x00	; 0
     3ee:	50 50       	subi	r21, 0x00	; 0
     3f0:	30 00       	.word	0x0030	; ????
     3f2:	50 50       	subi	r21, 0x00	; 0
     3f4:	70 50       	subi	r23, 0x00	; 0
     3f6:	50 00       	.word	0x0050	; ????
     3f8:	70 20       	and	r7, r0
     3fa:	20 20       	and	r2, r0
     3fc:	70 00       	.word	0x0070	; ????
     3fe:	10 10       	cpse	r1, r0
     400:	10 50       	subi	r17, 0x00	; 0
     402:	20 00       	.word	0x0020	; ????
     404:	50 50       	subi	r21, 0x00	; 0
     406:	60 50       	subi	r22, 0x00	; 0
     408:	50 00       	.word	0x0050	; ????
     40a:	40 40       	sbci	r20, 0x00	; 0
     40c:	40 40       	sbci	r20, 0x00	; 0
     40e:	70 00       	.word	0x0070	; ????
     410:	50 70       	andi	r21, 0x00	; 0
     412:	70 50       	subi	r23, 0x00	; 0
     414:	50 00       	.word	0x0050	; ????
     416:	60 50       	subi	r22, 0x00	; 0
     418:	50 50       	subi	r21, 0x00	; 0
     41a:	50 00       	.word	0x0050	; ????
     41c:	70 50       	subi	r23, 0x00	; 0
     41e:	50 50       	subi	r21, 0x00	; 0
     420:	70 00       	.word	0x0070	; ????
     422:	60 50       	subi	r22, 0x00	; 0
     424:	60 40       	sbci	r22, 0x00	; 0
     426:	40 00       	.word	0x0040	; ????
     428:	20 50       	subi	r18, 0x00	; 0
     42a:	50 70       	andi	r21, 0x00	; 0
     42c:	30 00       	.word	0x0030	; ????
     42e:	60 50       	subi	r22, 0x00	; 0
     430:	60 50       	subi	r22, 0x00	; 0
     432:	50 00       	.word	0x0050	; ????
     434:	30 40       	sbci	r19, 0x00	; 0
     436:	70 10       	cpse	r7, r0
     438:	60 00       	.word	0x0060	; ????
     43a:	70 20       	and	r7, r0
     43c:	20 20       	and	r2, r0
     43e:	20 00       	.word	0x0020	; ????
     440:	50 50       	subi	r21, 0x00	; 0
     442:	50 50       	subi	r21, 0x00	; 0
     444:	70 00       	.word	0x0070	; ????
     446:	50 50       	subi	r21, 0x00	; 0
     448:	50 50       	subi	r21, 0x00	; 0
     44a:	20 00       	.word	0x0020	; ????
     44c:	50 50       	subi	r21, 0x00	; 0
     44e:	70 70       	andi	r23, 0x00	; 0
     450:	50 00       	.word	0x0050	; ????
     452:	50 50       	subi	r21, 0x00	; 0
     454:	20 50       	subi	r18, 0x00	; 0
     456:	50 00       	.word	0x0050	; ????
     458:	50 50       	subi	r21, 0x00	; 0
     45a:	20 20       	and	r2, r0
     45c:	20 00       	.word	0x0020	; ????
     45e:	70 10       	cpse	r7, r0
     460:	20 40       	sbci	r18, 0x00	; 0
     462:	70 00       	.word	0x0070	; ????
     464:	60 40       	sbci	r22, 0x00	; 0
     466:	40 40       	sbci	r20, 0x00	; 0
     468:	60 00       	.word	0x0060	; ????
     46a:	40 40       	sbci	r20, 0x00	; 0
     46c:	20 10       	cpse	r2, r0
     46e:	10 00       	.word	0x0010	; ????
     470:	60 20       	and	r6, r0
     472:	20 20       	and	r2, r0
     474:	60 00       	.word	0x0060	; ????
     476:	20 50       	subi	r18, 0x00	; 0
	...
     480:	00 f0       	brcs	.+0      	; 0x482 <__trampolines_end+0x240>
     482:	60 20       	and	r6, r0
     484:	00 00       	nop
     486:	00 00       	nop
     488:	00 00       	nop
     48a:	30 50       	subi	r19, 0x00	; 0
     48c:	70 00       	.word	0x0070	; ????
     48e:	40 40       	sbci	r20, 0x00	; 0
     490:	60 50       	subi	r22, 0x00	; 0
     492:	60 00       	.word	0x0060	; ????
     494:	00 00       	nop
     496:	30 40       	sbci	r19, 0x00	; 0
     498:	30 00       	.word	0x0030	; ????
     49a:	10 10       	cpse	r1, r0
     49c:	30 50       	subi	r19, 0x00	; 0
     49e:	30 00       	.word	0x0030	; ????
     4a0:	00 00       	nop
     4a2:	70 60       	ori	r23, 0x00	; 0
     4a4:	30 00       	.word	0x0030	; ????
     4a6:	10 20       	and	r1, r0
     4a8:	70 20       	and	r7, r0
     4aa:	20 00       	.word	0x0020	; ????
     4ac:	00 00       	nop
     4ae:	70 50       	subi	r23, 0x00	; 0
     4b0:	10 70       	andi	r17, 0x00	; 0
     4b2:	40 40       	sbci	r20, 0x00	; 0
     4b4:	60 50       	subi	r22, 0x00	; 0
     4b6:	50 00       	.word	0x0050	; ????
     4b8:	20 00       	.word	0x0020	; ????
     4ba:	20 20       	and	r2, r0
     4bc:	20 00       	.word	0x0020	; ????
     4be:	20 00       	.word	0x0020	; ????
     4c0:	20 20       	and	r2, r0
     4c2:	20 60       	ori	r18, 0x00	; 0
     4c4:	40 40       	sbci	r20, 0x00	; 0
     4c6:	50 60       	ori	r21, 0x00	; 0
     4c8:	50 00       	.word	0x0050	; ????
     4ca:	20 20       	and	r2, r0
     4cc:	20 20       	and	r2, r0
     4ce:	20 00       	.word	0x0020	; ????
     4d0:	00 00       	nop
     4d2:	70 70       	andi	r23, 0x00	; 0
     4d4:	50 00       	.word	0x0050	; ????
     4d6:	00 00       	nop
     4d8:	60 50       	subi	r22, 0x00	; 0
     4da:	50 00       	.word	0x0050	; ????
     4dc:	00 00       	nop
     4de:	20 50       	subi	r18, 0x00	; 0
     4e0:	20 00       	.word	0x0020	; ????
     4e2:	00 00       	nop
     4e4:	60 50       	subi	r22, 0x00	; 0
     4e6:	60 40       	sbci	r22, 0x00	; 0
     4e8:	00 00       	nop
     4ea:	30 50       	subi	r19, 0x00	; 0
     4ec:	30 10       	cpse	r3, r0
     4ee:	00 00       	nop
     4f0:	60 40       	sbci	r22, 0x00	; 0
     4f2:	40 00       	.word	0x0040	; ????
     4f4:	00 00       	nop
     4f6:	30 20       	and	r3, r0
     4f8:	60 00       	.word	0x0060	; ????
     4fa:	00 20       	and	r0, r0
     4fc:	70 20       	and	r7, r0
     4fe:	30 00       	.word	0x0030	; ????
     500:	00 00       	nop
     502:	50 50       	subi	r21, 0x00	; 0
     504:	70 00       	.word	0x0070	; ????
     506:	00 00       	nop
     508:	50 50       	subi	r21, 0x00	; 0
     50a:	20 00       	.word	0x0020	; ????
     50c:	00 00       	nop
     50e:	50 70       	andi	r21, 0x00	; 0
     510:	70 00       	.word	0x0070	; ????
     512:	00 00       	nop
     514:	50 20       	and	r5, r0
     516:	50 00       	.word	0x0050	; ????
     518:	00 00       	nop
     51a:	50 50       	subi	r21, 0x00	; 0
     51c:	20 40       	sbci	r18, 0x00	; 0
     51e:	00 00       	nop
     520:	60 20       	and	r6, r0
     522:	30 00       	.word	0x0030	; ????
     524:	30 20       	and	r3, r0
     526:	60 20       	and	r6, r0
     528:	30 00       	.word	0x0030	; ????
     52a:	20 20       	and	r2, r0
     52c:	20 20       	and	r2, r0
     52e:	20 00       	.word	0x0020	; ????
     530:	60 20       	and	r6, r0
     532:	30 20       	and	r3, r0
     534:	60 00       	.word	0x0060	; ????
     536:	50 a0       	ldd	r5, Z+32	; 0x20
     538:	00 00       	nop
     53a:	00 00       	nop
     53c:	00 20       	and	r0, r0
     53e:	50 70       	andi	r21, 0x00	; 0
     540:	00 00       	nop
     542:	30 40       	sbci	r19, 0x00	; 0
     544:	40 70       	andi	r20, 0x00	; 0
     546:	20 40       	sbci	r18, 0x00	; 0
     548:	50 00       	.word	0x0050	; ????
     54a:	50 50       	subi	r21, 0x00	; 0
     54c:	30 00       	.word	0x0030	; ????
     54e:	10 20       	and	r1, r0
     550:	70 60       	ori	r23, 0x00	; 0
     552:	30 00       	.word	0x0030	; ????
     554:	20 50       	subi	r18, 0x00	; 0
     556:	30 50       	subi	r19, 0x00	; 0
     558:	70 00       	.word	0x0070	; ????
     55a:	50 00       	.word	0x0050	; ????
     55c:	30 50       	subi	r19, 0x00	; 0
     55e:	70 00       	.word	0x0070	; ????
     560:	40 20       	and	r4, r0
     562:	30 50       	subi	r19, 0x00	; 0
     564:	70 00       	.word	0x0070	; ????
     566:	20 00       	.word	0x0020	; ????
     568:	30 50       	subi	r19, 0x00	; 0
     56a:	70 00       	.word	0x0070	; ????
     56c:	00 70       	andi	r16, 0x00	; 0
     56e:	40 70       	andi	r20, 0x00	; 0
     570:	20 60       	ori	r18, 0x00	; 0
     572:	20 50       	subi	r18, 0x00	; 0
     574:	70 60       	ori	r23, 0x00	; 0
     576:	30 00       	.word	0x0030	; ????
     578:	50 00       	.word	0x0050	; ????
     57a:	70 60       	ori	r23, 0x00	; 0
     57c:	30 00       	.word	0x0030	; ????
     57e:	40 20       	and	r4, r0
     580:	70 60       	ori	r23, 0x00	; 0
     582:	30 00       	.word	0x0030	; ????
     584:	50 00       	.word	0x0050	; ????
     586:	20 20       	and	r2, r0
     588:	20 00       	.word	0x0020	; ????
     58a:	20 50       	subi	r18, 0x00	; 0
     58c:	00 20       	and	r0, r0
     58e:	20 00       	.word	0x0020	; ????
     590:	40 20       	and	r4, r0
     592:	00 20       	and	r0, r0
     594:	20 00       	.word	0x0020	; ????
     596:	50 20       	and	r5, r0
     598:	50 70       	andi	r21, 0x00	; 0
     59a:	50 00       	.word	0x0050	; ????
     59c:	20 20       	and	r2, r0
     59e:	50 70       	andi	r21, 0x00	; 0
     5a0:	50 00       	.word	0x0050	; ????
     5a2:	10 20       	and	r1, r0
     5a4:	70 60       	ori	r23, 0x00	; 0
     5a6:	70 00       	.word	0x0070	; ????
     5a8:	00 00       	nop
     5aa:	30 70       	andi	r19, 0x00	; 0
     5ac:	60 00       	.word	0x0060	; ????
     5ae:	30 60       	ori	r19, 0x00	; 0
     5b0:	70 60       	ori	r23, 0x00	; 0
     5b2:	70 00       	.word	0x0070	; ????
     5b4:	20 50       	subi	r18, 0x00	; 0
     5b6:	20 50       	subi	r18, 0x00	; 0
     5b8:	20 00       	.word	0x0020	; ????
     5ba:	50 00       	.word	0x0050	; ????
     5bc:	20 50       	subi	r18, 0x00	; 0
     5be:	20 00       	.word	0x0020	; ????
     5c0:	40 20       	and	r4, r0
     5c2:	20 50       	subi	r18, 0x00	; 0
     5c4:	20 00       	.word	0x0020	; ????
     5c6:	20 50       	subi	r18, 0x00	; 0
     5c8:	00 50       	subi	r16, 0x00	; 0
     5ca:	70 00       	.word	0x0070	; ????
     5cc:	40 20       	and	r4, r0
     5ce:	50 50       	subi	r21, 0x00	; 0
     5d0:	70 00       	.word	0x0070	; ????
     5d2:	50 00       	.word	0x0050	; ????
     5d4:	50 50       	subi	r21, 0x00	; 0
     5d6:	20 40       	sbci	r18, 0x00	; 0
     5d8:	50 20       	and	r5, r0
     5da:	50 50       	subi	r21, 0x00	; 0
     5dc:	20 00       	.word	0x0020	; ????
     5de:	50 00       	.word	0x0050	; ????
     5e0:	50 50       	subi	r21, 0x00	; 0
     5e2:	70 00       	.word	0x0070	; ????
     5e4:	20 70       	andi	r18, 0x00	; 0
     5e6:	40 70       	andi	r20, 0x00	; 0
     5e8:	20 00       	.word	0x0020	; ????
     5ea:	10 20       	and	r1, r0
     5ec:	70 20       	and	r7, r0
     5ee:	70 00       	.word	0x0070	; ????
     5f0:	50 70       	andi	r21, 0x00	; 0
     5f2:	20 70       	andi	r18, 0x00	; 0
     5f4:	20 00       	.word	0x0020	; ????
     5f6:	00 60       	ori	r16, 0x00	; 0
     5f8:	60 50       	subi	r22, 0x00	; 0
     5fa:	50 00       	.word	0x0050	; ????
     5fc:	30 20       	and	r3, r0
     5fe:	30 20       	and	r3, r0
     600:	60 00       	.word	0x0060	; ????
     602:	10 20       	and	r1, r0
     604:	30 50       	subi	r19, 0x00	; 0
     606:	70 00       	.word	0x0070	; ????
     608:	10 20       	and	r1, r0
     60a:	00 20       	and	r0, r0
     60c:	20 00       	.word	0x0020	; ????
     60e:	10 20       	and	r1, r0
     610:	70 50       	subi	r23, 0x00	; 0
     612:	70 00       	.word	0x0070	; ????
     614:	10 20       	and	r1, r0
     616:	00 50       	subi	r16, 0x00	; 0
     618:	70 00       	.word	0x0070	; ????
     61a:	70 00       	.word	0x0070	; ????
     61c:	70 50       	subi	r23, 0x00	; 0
     61e:	50 00       	.word	0x0050	; ????
     620:	70 00       	.word	0x0070	; ????
     622:	50 70       	andi	r21, 0x00	; 0
     624:	50 00       	.word	0x0050	; ????
     626:	30 50       	subi	r19, 0x00	; 0
     628:	70 00       	.word	0x0070	; ????
     62a:	70 00       	.word	0x0070	; ????
     62c:	20 50       	subi	r18, 0x00	; 0
     62e:	20 00       	.word	0x0020	; ????
     630:	70 00       	.word	0x0070	; ????
     632:	20 00       	.word	0x0020	; ????
     634:	20 40       	sbci	r18, 0x00	; 0
     636:	30 00       	.word	0x0030	; ????
     638:	00 70       	andi	r16, 0x00	; 0
     63a:	40 40       	sbci	r20, 0x00	; 0
     63c:	00 00       	nop
     63e:	00 e0       	ldi	r16, 0x00	; 0
     640:	20 20       	and	r2, r0
     642:	00 00       	nop
     644:	40 50       	subi	r20, 0x00	; 0
     646:	20 50       	subi	r18, 0x00	; 0
     648:	30 00       	.word	0x0030	; ????
     64a:	40 50       	subi	r20, 0x00	; 0
     64c:	20 70       	andi	r18, 0x00	; 0
     64e:	10 00       	.word	0x0010	; ????
     650:	20 00       	.word	0x0020	; ????
     652:	20 20       	and	r2, r0
     654:	20 00       	.word	0x0020	; ????
     656:	00 50       	subi	r16, 0x00	; 0
     658:	a0 50       	subi	r26, 0x00	; 0
     65a:	00 00       	nop
     65c:	00 a0       	ldd	r0, Z+32	; 0x20
     65e:	50 a0       	ldd	r5, Z+32	; 0x20
     660:	00 00       	nop
     662:	40 10       	cpse	r4, r0
     664:	40 10       	cpse	r4, r0
     666:	40 10       	cpse	r4, r0
     668:	50 a0       	ldd	r5, Z+32	; 0x20
     66a:	50 a0       	ldd	r5, Z+32	; 0x20
     66c:	50 a0       	ldd	r5, Z+32	; 0x20
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	20 20       	and	r2, r0
     676:	20 20       	and	r2, r0
     678:	20 20       	and	r2, r0
     67a:	20 20       	and	r2, r0
     67c:	e0 20       	and	r14, r0
     67e:	20 20       	and	r2, r0
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	20 20       	and	r2, r0
     686:	50 50       	subi	r21, 0x00	; 0
     688:	d0 50       	subi	r29, 0x00	; 0
     68a:	50 50       	subi	r21, 0x00	; 0
     68c:	00 00       	nop
     68e:	f0 50       	subi	r31, 0x00	; 0
     690:	50 50       	subi	r21, 0x00	; 0
     692:	00 e0       	ldi	r16, 0x00	; 0
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	20 20       	and	r2, r0
     698:	50 d0       	rcall	.+160    	; 0x73a <__trampolines_end+0x4f8>
     69a:	10 d0       	rcall	.+32     	; 0x6bc <__trampolines_end+0x47a>
     69c:	50 50       	subi	r21, 0x00	; 0
     69e:	50 50       	subi	r21, 0x00	; 0
     6a0:	50 50       	subi	r21, 0x00	; 0
     6a2:	50 50       	subi	r21, 0x00	; 0
     6a4:	00 f0       	brcs	.+0      	; 0x6a6 <__trampolines_end+0x464>
     6a6:	10 d0       	rcall	.+32     	; 0x6c8 <__trampolines_end+0x486>
     6a8:	50 50       	subi	r21, 0x00	; 0
     6aa:	50 d0       	rcall	.+160    	; 0x74c <__trampolines_end+0x50a>
     6ac:	10 f0       	brcs	.+4      	; 0x6b2 <__trampolines_end+0x470>
     6ae:	00 00       	nop
     6b0:	50 50       	subi	r21, 0x00	; 0
     6b2:	f0 00       	.word	0x00f0	; ????
     6b4:	00 00       	nop
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	00 00       	nop
     6bc:	00 00       	nop
     6be:	e0 20       	and	r14, r0
     6c0:	20 20       	and	r2, r0
     6c2:	20 20       	and	r2, r0
     6c4:	30 00       	.word	0x0030	; ????
     6c6:	00 00       	nop
     6c8:	20 20       	and	r2, r0
     6ca:	f0 00       	.word	0x00f0	; ????
     6cc:	00 00       	nop
     6ce:	00 00       	nop
     6d0:	f0 20       	and	r15, r0
     6d2:	20 20       	and	r2, r0
     6d4:	20 20       	and	r2, r0
     6d6:	30 20       	and	r3, r0
     6d8:	20 20       	and	r2, r0
     6da:	00 00       	nop
     6dc:	f0 00       	.word	0x00f0	; ????
     6de:	00 00       	nop
     6e0:	20 20       	and	r2, r0
     6e2:	f0 20       	and	r15, r0
     6e4:	20 20       	and	r2, r0
     6e6:	20 30       	cpi	r18, 0x00	; 0
     6e8:	20 30       	cpi	r18, 0x00	; 0
     6ea:	20 20       	and	r2, r0
     6ec:	50 50       	subi	r21, 0x00	; 0
     6ee:	50 50       	subi	r21, 0x00	; 0
     6f0:	50 50       	subi	r21, 0x00	; 0
     6f2:	50 50       	subi	r21, 0x00	; 0
     6f4:	40 70       	andi	r20, 0x00	; 0
     6f6:	00 00       	nop
     6f8:	00 70       	andi	r16, 0x00	; 0
     6fa:	40 50       	subi	r20, 0x00	; 0
     6fc:	50 50       	subi	r21, 0x00	; 0
     6fe:	50 d0       	rcall	.+160    	; 0x7a0 <__trampolines_end+0x55e>
     700:	00 f0       	brcs	.+0      	; 0x702 <__trampolines_end+0x4c0>
     702:	00 00       	nop
     704:	00 f0       	brcs	.+0      	; 0x706 <__trampolines_end+0x4c4>
     706:	00 d0       	rcall	.+0      	; 0x708 <__trampolines_end+0x4c6>
     708:	50 50       	subi	r21, 0x00	; 0
     70a:	50 50       	subi	r21, 0x00	; 0
     70c:	40 50       	subi	r20, 0x00	; 0
     70e:	50 50       	subi	r21, 0x00	; 0
     710:	00 f0       	brcs	.+0      	; 0x712 <__trampolines_end+0x4d0>
     712:	00 f0       	brcs	.+0      	; 0x714 <__trampolines_end+0x4d2>
     714:	00 00       	nop
     716:	50 d0       	rcall	.+160    	; 0x7b8 <__trampolines_end+0x576>
     718:	00 d0       	rcall	.+0      	; 0x71a <__trampolines_end+0x4d8>
     71a:	50 50       	subi	r21, 0x00	; 0
     71c:	20 f0       	brcs	.+8      	; 0x726 <__trampolines_end+0x4e4>
     71e:	00 f0       	brcs	.+0      	; 0x720 <__trampolines_end+0x4de>
     720:	00 00       	nop
     722:	50 50       	subi	r21, 0x00	; 0
     724:	f0 00       	.word	0x00f0	; ????
     726:	00 00       	nop
     728:	00 f0       	brcs	.+0      	; 0x72a <__trampolines_end+0x4e8>
     72a:	00 f0       	brcs	.+0      	; 0x72c <__trampolines_end+0x4ea>
     72c:	20 20       	and	r2, r0
     72e:	00 00       	nop
     730:	f0 50       	subi	r31, 0x00	; 0
     732:	50 50       	subi	r21, 0x00	; 0
     734:	50 50       	subi	r21, 0x00	; 0
     736:	70 00       	.word	0x0070	; ????
     738:	00 00       	nop
     73a:	20 30       	cpi	r18, 0x00	; 0
     73c:	20 30       	cpi	r18, 0x00	; 0
     73e:	00 00       	nop
     740:	00 30       	cpi	r16, 0x00	; 0
     742:	20 30       	cpi	r18, 0x00	; 0
     744:	20 20       	and	r2, r0
     746:	00 00       	nop
     748:	70 50       	subi	r23, 0x00	; 0
     74a:	50 50       	subi	r21, 0x00	; 0
     74c:	50 50       	subi	r21, 0x00	; 0
     74e:	d0 50       	subi	r29, 0x00	; 0
     750:	50 50       	subi	r21, 0x00	; 0
     752:	20 f0       	brcs	.+8      	; 0x75c <__trampolines_end+0x51a>
     754:	00 f0       	brcs	.+0      	; 0x756 <__trampolines_end+0x514>
     756:	20 20       	and	r2, r0
     758:	20 20       	and	r2, r0
     75a:	e0 00       	.word	0x00e0	; ????
     75c:	00 00       	nop
     75e:	00 00       	nop
     760:	30 20       	and	r3, r0
     762:	20 20       	and	r2, r0
     764:	f0 f0       	brcs	.+60     	; 0x7a2 <__trampolines_end+0x560>
     766:	f0 f0       	brcs	.+60     	; 0x7a4 <__trampolines_end+0x562>
     768:	f0 f0       	brcs	.+60     	; 0x7a6 <__trampolines_end+0x564>
     76a:	00 00       	nop
     76c:	00 f0       	brcs	.+0      	; 0x76e <__trampolines_end+0x52c>
     76e:	f0 f0       	brcs	.+60     	; 0x7ac <__trampolines_end+0x56a>
     770:	c0 c0       	rjmp	.+384    	; 0x8f2 <font_5x7+0xb0>
     772:	c0 c0       	rjmp	.+384    	; 0x8f4 <font_5x7+0xb2>
     774:	c0 c0       	rjmp	.+384    	; 0x8f6 <font_5x7+0xb4>
     776:	30 30       	cpi	r19, 0x00	; 0
     778:	30 30       	cpi	r19, 0x00	; 0
     77a:	30 30       	cpi	r19, 0x00	; 0
     77c:	f0 f0       	brcs	.+60     	; 0x7ba <__trampolines_end+0x578>
     77e:	f0 00       	.word	0x00f0	; ????
     780:	00 00       	nop
     782:	00 00       	nop
     784:	70 60       	ori	r23, 0x00	; 0
     786:	70 00       	.word	0x0070	; ????
     788:	20 50       	subi	r18, 0x00	; 0
     78a:	60 50       	subi	r22, 0x00	; 0
     78c:	60 40       	sbci	r22, 0x00	; 0
     78e:	70 50       	subi	r23, 0x00	; 0
     790:	40 40       	sbci	r20, 0x00	; 0
     792:	40 00       	.word	0x0040	; ????
     794:	70 50       	subi	r23, 0x00	; 0
     796:	50 50       	subi	r21, 0x00	; 0
     798:	50 00       	.word	0x0050	; ????
     79a:	70 40       	sbci	r23, 0x00	; 0
     79c:	20 40       	sbci	r18, 0x00	; 0
     79e:	70 00       	.word	0x0070	; ????
     7a0:	00 00       	nop
     7a2:	30 50       	subi	r19, 0x00	; 0
     7a4:	20 00       	.word	0x0020	; ????
     7a6:	00 00       	nop
     7a8:	50 50       	subi	r21, 0x00	; 0
     7aa:	70 40       	sbci	r23, 0x00	; 0
     7ac:	00 10       	cpse	r0, r0
     7ae:	60 20       	and	r6, r0
     7b0:	20 00       	.word	0x0020	; ????
     7b2:	70 20       	and	r7, r0
     7b4:	50 20       	and	r5, r0
     7b6:	70 00       	.word	0x0070	; ????
     7b8:	20 50       	subi	r18, 0x00	; 0
     7ba:	70 50       	subi	r23, 0x00	; 0
     7bc:	20 00       	.word	0x0020	; ????
     7be:	00 20       	and	r0, r0
     7c0:	50 50       	subi	r21, 0x00	; 0
     7c2:	50 00       	.word	0x0050	; ????
     7c4:	30 40       	sbci	r19, 0x00	; 0
     7c6:	20 50       	subi	r18, 0x00	; 0
     7c8:	20 00       	.word	0x0020	; ????
     7ca:	00 00       	nop
     7cc:	70 50       	subi	r23, 0x00	; 0
     7ce:	70 00       	.word	0x0070	; ????
     7d0:	20 70       	andi	r18, 0x00	; 0
     7d2:	50 70       	andi	r21, 0x00	; 0
     7d4:	20 00       	.word	0x0020	; ????
     7d6:	30 40       	sbci	r19, 0x00	; 0
     7d8:	70 40       	sbci	r23, 0x00	; 0
     7da:	30 00       	.word	0x0030	; ????
     7dc:	20 50       	subi	r18, 0x00	; 0
     7de:	50 50       	subi	r21, 0x00	; 0
     7e0:	50 00       	.word	0x0050	; ????
     7e2:	70 00       	.word	0x0070	; ????
     7e4:	70 00       	.word	0x0070	; ????
     7e6:	70 00       	.word	0x0070	; ????
     7e8:	20 70       	andi	r18, 0x00	; 0
     7ea:	20 00       	.word	0x0020	; ????
     7ec:	70 00       	.word	0x0070	; ????
     7ee:	60 10       	cpse	r6, r0
     7f0:	60 00       	.word	0x0060	; ????
     7f2:	70 00       	.word	0x0070	; ????
     7f4:	30 40       	sbci	r19, 0x00	; 0
     7f6:	30 00       	.word	0x0030	; ????
     7f8:	70 00       	.word	0x0070	; ????
     7fa:	00 10       	cpse	r0, r0
     7fc:	20 20       	and	r2, r0
     7fe:	20 20       	and	r2, r0
     800:	20 20       	and	r2, r0
     802:	20 20       	and	r2, r0
     804:	40 00       	.word	0x0040	; ????
     806:	20 00       	.word	0x0020	; ????
     808:	70 00       	.word	0x0070	; ????
     80a:	20 00       	.word	0x0020	; ????
     80c:	00 50       	subi	r16, 0x00	; 0
     80e:	a0 50       	subi	r26, 0x00	; 0
     810:	a0 00       	.word	0x00a0	; ????
     812:	20 50       	subi	r18, 0x00	; 0
     814:	20 00       	.word	0x0020	; ????
     816:	00 00       	nop
     818:	00 20       	and	r0, r0
     81a:	70 20       	and	r7, r0
     81c:	00 00       	nop
     81e:	00 00       	nop
     820:	20 00       	.word	0x0020	; ????
     822:	00 00       	nop
     824:	30 20       	and	r3, r0
     826:	20 60       	ori	r18, 0x00	; 0
     828:	20 00       	.word	0x0020	; ????
     82a:	70 50       	subi	r23, 0x00	; 0
     82c:	50 00       	.word	0x0050	; ????
     82e:	00 00       	nop
     830:	60 20       	and	r6, r0
     832:	40 60       	ori	r20, 0x00	; 0
     834:	00 00       	nop
     836:	00 00       	nop
     838:	60 60       	ori	r22, 0x00	; 0
	...

00000842 <font_5x7>:
     842:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     852:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     862:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     872:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     882:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     892:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     8a2:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     8b2:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     8c2:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     8d2:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     8e2:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     8f2:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     902:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     912:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     922:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     932:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     942:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     952:	49 49 31 01 01 71 09 07 36 49 49 49 36 46 49 49     II1..q..6III6FII
     962:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     972:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     982:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     992:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     9a2:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     9b2:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     9c2:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     9d2:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     9e2:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     9f2:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     a02:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     a12:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     a22:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     a32:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     a42:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     a52:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     a62:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     a72:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     a82:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     a92:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     aa2:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     ab2:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     ac2:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     ad2:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
     ae2:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     af2:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     b02:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
     b12:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     b22:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
     b32:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
     b42:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
     b52:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     b62:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     b72:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     b82:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     b92:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     ba2:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     bb2:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     bc2:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     bd2:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     be2:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     bf2:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     c02:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     c12:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     c22:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     c32:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     c42:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     c52:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     c62:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     c72:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     c82:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     c92:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     ca2:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
     cb2:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     cc2:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     cd2:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     ce2:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     cf2:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     d02:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     d12:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     d22:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     d32:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00000d3d <IMG_SPEAKER_A>:
     d3d:	18 18 3c 42 a5 18                                   ..<B..

00000d43 <__c.2299>:
     d43:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

00000d50 <_StackPaint>:
 *  the maximum stack usage of the running application.
 */
void _StackPaint(void) __attribute__((naked)) __attribute__((optimize("O3"))) __attribute__((section (".init1")));
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
     d50:	ee e7       	ldi	r30, 0x7E	; 126
     d52:	fc e2       	ldi	r31, 0x2C	; 44
     d54:	e3 70       	andi	r30, 0x03	; 3
     d56:	ff 27       	eor	r31, r31
     d58:	e2 58       	subi	r30, 0x82	; 130
     d5a:	f3 4d       	sbci	r31, 0xD3	; 211
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
     d5c:	2f ef       	ldi	r18, 0xFF	; 255
     d5e:	3f e2       	ldi	r19, 0x2F	; 47
     d60:	2c 7f       	andi	r18, 0xFC	; 252
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     d62:	e2 17       	cp	r30, r18
     d64:	f3 07       	cpc	r31, r19
     d66:	58 f4       	brcc	.+22     	; 0xd7e <_StackPaint+0x2e>
		*fill_pos = __SWAP_ENDIAN32(0xDEADBEEF);
     d68:	8e ed       	ldi	r24, 0xDE	; 222
     d6a:	9d ea       	ldi	r25, 0xAD	; 173
     d6c:	ae eb       	ldi	r26, 0xBE	; 190
     d6e:	bf ee       	ldi	r27, 0xEF	; 239
     d70:	81 93       	st	Z+, r24
     d72:	91 93       	st	Z+, r25
     d74:	a1 93       	st	Z+, r26
     d76:	b1 93       	st	Z+, r27
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     d78:	e2 17       	cp	r30, r18
     d7a:	f3 07       	cpc	r31, r19
     d7c:	c8 f3       	brcs	.-14     	; 0xd70 <_StackPaint+0x20>
     d7e:	11 24       	eor	r1, r1
     d80:	1f be       	out	0x3f, r1	; 63
     d82:	cf ef       	ldi	r28, 0xFF	; 255
     d84:	cd bf       	out	0x3d, r28	; 61
     d86:	df e2       	ldi	r29, 0x2F	; 47
     d88:	de bf       	out	0x3e, r29	; 62

00000d8a <__do_copy_data>:
     d8a:	19 e2       	ldi	r17, 0x29	; 41
     d8c:	a0 e0       	ldi	r26, 0x00	; 0
     d8e:	b0 e2       	ldi	r27, 0x20	; 32
     d90:	e4 e6       	ldi	r30, 0x64	; 100
     d92:	fd ea       	ldi	r31, 0xAD	; 173
     d94:	00 e0       	ldi	r16, 0x00	; 0
     d96:	0b bf       	out	0x3b, r16	; 59
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <__do_copy_data+0x14>
     d9a:	07 90       	elpm	r0, Z+
     d9c:	0d 92       	st	X+, r0
     d9e:	a2 38       	cpi	r26, 0x82	; 130
     da0:	b1 07       	cpc	r27, r17
     da2:	d9 f7       	brne	.-10     	; 0xd9a <__do_copy_data+0x10>

00000da4 <__do_clear_bss>:
     da4:	2c e2       	ldi	r18, 0x2C	; 44
     da6:	a2 e8       	ldi	r26, 0x82	; 130
     da8:	b9 e2       	ldi	r27, 0x29	; 41
     daa:	01 c0       	rjmp	.+2      	; 0xdae <.do_clear_bss_start>

00000dac <.do_clear_bss_loop>:
     dac:	1d 92       	st	X+, r1

00000dae <.do_clear_bss_start>:
     dae:	ae 37       	cpi	r26, 0x7E	; 126
     db0:	b2 07       	cpc	r27, r18
     db2:	e1 f7       	brne	.-8      	; 0xdac <.do_clear_bss_loop>
     db4:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <main>
     db8:	0c 94 b0 56 	jmp	0xad60	; 0xad60 <_exit>

00000dbc <__bad_interrupt>:
     dbc:	21 c9       	rjmp	.-3518   	; 0x0 <__vectors>

00000dbe <adc_setup>:
#include "adc.h"

void adc_setup(void) 
{	
	//Disable power reduction for ADCA 
	PR.PRPA &= ~0x02;
     dbe:	e0 e7       	ldi	r30, 0x70	; 112
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	81 81       	ldd	r24, Z+1	; 0x01
     dc4:	8d 7f       	andi	r24, 0xFD	; 253
     dc6:	81 83       	std	Z+1, r24	; 0x01
	
	ADCA.CALL = 0x36;
     dc8:	e0 e0       	ldi	r30, 0x00	; 0
     dca:	f2 e0       	ldi	r31, 0x02	; 2
     dcc:	86 e3       	ldi	r24, 0x36	; 54
     dce:	84 87       	std	Z+12, r24	; 0x0c
	ADCA.CALH = 0x03;
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	85 87       	std	Z+13, r24	; 0x0d
	//ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
	//ADCA.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
	//ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
	//ADCA.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );	

	ADCA.CH0.CTRL	 = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
     dd8:	11 a2       	std	Z+33, r1	; 0x21
	ADCA.CTRLB		 = ADC_RESOLUTION_12BIT_gc;
     dda:	11 82       	std	Z+1, r1	; 0x01
	ADCA.PRESCALER	 = ADC_PRESCALER_DIV256_gc;
     ddc:	96 e0       	ldi	r25, 0x06	; 6
     dde:	94 83       	std	Z+4, r25	; 0x04
	ADCA.REFCTRL	 = ADC_REFSEL_INTVCC_gc;
     de0:	90 e1       	ldi	r25, 0x10	; 16
     de2:	92 83       	std	Z+2, r25	; 0x02
	ADCA.EVCTRL		 = ADC_EVACT_NONE_gc;
     de4:	13 82       	std	Z+3, r1	; 0x03
	ADCA.INTFLAGS	 = ADC_CH0IF_bm;
     de6:	86 83       	std	Z+6, r24	; 0x06
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     de8:	12 a2       	std	Z+34, r1	; 0x22
	ADCA.CTRLA		 = ADC_ENABLE_bm;
     dea:	80 83       	st	Z, r24
     dec:	08 95       	ret

00000dee <adc_disable>:
}

void adc_disable(void) 
{	
	ADCA.CTRLA &= ~(ADC_ENABLE_bm);
     dee:	e0 e0       	ldi	r30, 0x00	; 0
     df0:	f2 e0       	ldi	r31, 0x02	; 2
     df2:	80 81       	ld	r24, Z
     df4:	8e 7f       	andi	r24, 0xFE	; 254
     df6:	80 83       	st	Z, r24
	
	//Enable power reduction for ADCA
	PR.PRPA |= 0x02;
     df8:	e0 e7       	ldi	r30, 0x70	; 112
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	81 81       	ldd	r24, Z+1	; 0x01
     dfe:	82 60       	ori	r24, 0x02	; 2
     e00:	81 83       	std	Z+1, r24	; 0x01
     e02:	08 95       	ret

00000e04 <adc_enable_current_measurement>:
	return 0;
}

void adc_enable_current_measurement(void) 
{	
	PORTA.DIRSET = CURRENT_MEASUREMENT_ENABLE;
     e04:	e0 e0       	ldi	r30, 0x00	; 0
     e06:	f6 e0       	ldi	r31, 0x06	; 6
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR = CURRENT_MEASUREMENT_ENABLE;
     e0c:	86 83       	std	Z+6, r24	; 0x06
     e0e:	08 95       	ret

00000e10 <adc_disable_current_measurement>:
	//PORTA.PIN1CTRL = PORT_OPC_PULLUP_gc
}

void adc_disable_current_measurement(void) 
{	
	PORTA.DIRSET = CURRENT_MEASUREMENT_ENABLE;
     e10:	e0 e0       	ldi	r30, 0x00	; 0
     e12:	f6 e0       	ldi	r31, 0x06	; 6
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = CURRENT_MEASUREMENT_ENABLE;
     e18:	85 83       	std	Z+5, r24	; 0x05
     e1a:	08 95       	ret

00000e1c <adc_read_voltage>:
	//Enable power reduction for ADCA
	PR.PRPA |= 0x02;
}

uint16_t adc_read_voltage(void) 
{	
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
	adc_enable_current_measurement();
     e20:	f1 df       	rcall	.-30     	; 0xe04 <adc_enable_current_measurement>
     e22:	2a e0       	ldi	r18, 0x0A	; 10
	uint16_t val = 0;
     e24:	c0 e0       	ldi	r28, 0x00	; 0
     e26:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < 10; i++) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
     e28:	31 e0       	ldi	r19, 0x01	; 1
uint16_t adc_read_voltage(void) 
{	
	adc_enable_current_measurement();
	uint16_t val = 0;
	for (uint8_t i = 0; i < 10; i++) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
     e2a:	80 91 20 02 	lds	r24, 0x0220
     e2e:	80 68       	ori	r24, 0x80	; 128
     e30:	80 93 20 02 	sts	0x0220, r24
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
     e34:	80 91 23 02 	lds	r24, 0x0223
     e38:	80 ff       	sbrs	r24, 0
     e3a:	fc cf       	rjmp	.-8      	; 0xe34 <adc_read_voltage+0x18>
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
     e3c:	30 93 23 02 	sts	0x0223, r19
		val += ADCA.CH0.RES;
     e40:	80 91 24 02 	lds	r24, 0x0224
     e44:	90 91 25 02 	lds	r25, 0x0225
     e48:	c8 0f       	add	r28, r24
     e4a:	d9 1f       	adc	r29, r25
     e4c:	21 50       	subi	r18, 0x01	; 1

uint16_t adc_read_voltage(void) 
{	
	adc_enable_current_measurement();
	uint16_t val = 0;
	for (uint8_t i = 0; i < 10; i++) {
     e4e:	69 f7       	brne	.-38     	; 0xe2a <adc_read_voltage+0xe>
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
		val += ADCA.CH0.RES;
	}
	adc_disable_current_measurement();
     e50:	df df       	rcall	.-66     	; 0xe10 <adc_disable_current_measurement>

	return val/10;
     e52:	ce 01       	movw	r24, r28
     e54:	6a e0       	ldi	r22, 0x0A	; 10
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	0e 94 97 4e 	call	0x9d2e	; 0x9d2e <__udivmodhi4>
     e5c:	cb 01       	movw	r24, r22
}
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <adc_get_battery_percentage>:

uint8_t adc_get_battery_percentage(void) 
{	
     e64:	cf 92       	push	r12
     e66:	df 92       	push	r13
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
	adc_setup();
     e6c:	a8 df       	rcall	.-176    	; 0xdbe <adc_setup>

	float voltage;
	voltage = (float)adc_read_voltage();
     e6e:	d6 df       	rcall	.-84     	; 0xe1c <adc_read_voltage>
     e70:	bc 01       	movw	r22, r24
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 e1 4d 	call	0x9bc2	; 0x9bc2 <__floatunsisf>
	voltage /= 6.6f;
     e7a:	23 e3       	ldi	r18, 0x33	; 51
     e7c:	33 e3       	ldi	r19, 0x33	; 51
     e7e:	43 ed       	ldi	r20, 0xD3	; 211
     e80:	50 e4       	ldi	r21, 0x40	; 64
     e82:	0e 94 79 4d 	call	0x9af2	; 0x9af2 <__divsf3>
     e86:	6b 01       	movw	r12, r22
     e88:	7c 01       	movw	r14, r24
	
	adc_disable();
     e8a:	b1 df       	rcall	.-158    	; 0xdee <adc_disable>
	
	if (voltage > 600) {
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	46 e1       	ldi	r20, 0x16	; 22
     e92:	54 e4       	ldi	r21, 0x44	; 68
     e94:	c7 01       	movw	r24, r14
     e96:	b6 01       	movw	r22, r12
     e98:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__gesf2>
     e9c:	18 16       	cp	r1, r24
     e9e:	0c f4       	brge	.+2      	; 0xea2 <adc_get_battery_percentage+0x3e>
     ea0:	78 c0       	rjmp	.+240    	; 0xf92 <adc_get_battery_percentage+0x12e>
		return 99;
	} else if (voltage > 575) {
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 ec       	ldi	r19, 0xC0	; 192
     ea6:	4f e0       	ldi	r20, 0x0F	; 15
     ea8:	54 e4       	ldi	r21, 0x44	; 68
     eaa:	c7 01       	movw	r24, r14
     eac:	b6 01       	movw	r22, r12
     eae:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__gesf2>
     eb2:	18 16       	cp	r1, r24
     eb4:	0c f4       	brge	.+2      	; 0xeb8 <adc_get_battery_percentage+0x54>
     eb6:	6f c0       	rjmp	.+222    	; 0xf96 <adc_get_battery_percentage+0x132>
		return 95;
	} else if (voltage > 550) {
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e8       	ldi	r19, 0x80	; 128
     ebc:	49 e0       	ldi	r20, 0x09	; 9
     ebe:	54 e4       	ldi	r21, 0x44	; 68
     ec0:	c7 01       	movw	r24, r14
     ec2:	b6 01       	movw	r22, r12
     ec4:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__gesf2>
     ec8:	18 16       	cp	r1, r24
     eca:	0c f4       	brge	.+2      	; 0xece <adc_get_battery_percentage+0x6a>
     ecc:	66 c0       	rjmp	.+204    	; 0xf9a <adc_get_battery_percentage+0x136>
		return 90;
	} else if (voltage > 525) {
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e4       	ldi	r19, 0x40	; 64
     ed2:	43 e0       	ldi	r20, 0x03	; 3
     ed4:	54 e4       	ldi	r21, 0x44	; 68
     ed6:	c7 01       	movw	r24, r14
     ed8:	b6 01       	movw	r22, r12
     eda:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__gesf2>
     ede:	18 16       	cp	r1, r24
     ee0:	0c f4       	brge	.+2      	; 0xee4 <adc_get_battery_percentage+0x80>
     ee2:	5d c0       	rjmp	.+186    	; 0xf9e <adc_get_battery_percentage+0x13a>
		return 80;
	} else if (voltage > 500) {
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	4a ef       	ldi	r20, 0xFA	; 250
     eea:	53 e4       	ldi	r21, 0x43	; 67
     eec:	c7 01       	movw	r24, r14
     eee:	b6 01       	movw	r22, r12
     ef0:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__gesf2>
     ef4:	18 16       	cp	r1, r24
     ef6:	0c f4       	brge	.+2      	; 0xefa <adc_get_battery_percentage+0x96>
     ef8:	54 c0       	rjmp	.+168    	; 0xfa2 <adc_get_battery_percentage+0x13e>
		return 70;
	} else if (voltage > 475) {
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e8       	ldi	r19, 0x80	; 128
     efe:	4d ee       	ldi	r20, 0xED	; 237
     f00:	53 e4       	ldi	r21, 0x43	; 67
     f02:	c7 01       	movw	r24, r14
     f04:	b6 01       	movw	r22, r12
     f06:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__gesf2>
     f0a:	18 16       	cp	r1, r24
     f0c:	0c f4       	brge	.+2      	; 0xf10 <adc_get_battery_percentage+0xac>
     f0e:	4b c0       	rjmp	.+150    	; 0xfa6 <adc_get_battery_percentage+0x142>
		return 60;
	} else if (voltage > 450) {
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	41 ee       	ldi	r20, 0xE1	; 225
     f16:	53 e4       	ldi	r21, 0x43	; 67
     f18:	c7 01       	movw	r24, r14
     f1a:	b6 01       	movw	r22, r12
     f1c:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__gesf2>
     f20:	18 16       	cp	r1, r24
     f22:	0c f4       	brge	.+2      	; 0xf26 <adc_get_battery_percentage+0xc2>
     f24:	42 c0       	rjmp	.+132    	; 0xfaa <adc_get_battery_percentage+0x146>
		return 50;
	} else if (voltage > 425) {
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e8       	ldi	r19, 0x80	; 128
     f2a:	44 ed       	ldi	r20, 0xD4	; 212
     f2c:	53 e4       	ldi	r21, 0x43	; 67
     f2e:	c7 01       	movw	r24, r14
     f30:	b6 01       	movw	r22, r12
     f32:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__gesf2>
     f36:	18 16       	cp	r1, r24
     f38:	d4 f1       	brlt	.+116    	; 0xfae <adc_get_battery_percentage+0x14a>
		return 40;
	} else if (voltage > 415) {
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e8       	ldi	r19, 0x80	; 128
     f3e:	4f ec       	ldi	r20, 0xCF	; 207
     f40:	53 e4       	ldi	r21, 0x43	; 67
     f42:	c7 01       	movw	r24, r14
     f44:	b6 01       	movw	r22, r12
     f46:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__gesf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	94 f1       	brlt	.+100    	; 0xfb2 <adc_get_battery_percentage+0x14e>
		return 30;
	} else if (voltage > 400) {
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	48 ec       	ldi	r20, 0xC8	; 200
     f54:	53 e4       	ldi	r21, 0x43	; 67
     f56:	c7 01       	movw	r24, r14
     f58:	b6 01       	movw	r22, r12
     f5a:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__gesf2>
     f5e:	18 16       	cp	r1, r24
     f60:	54 f1       	brlt	.+84     	; 0xfb6 <adc_get_battery_percentage+0x152>
		return 20;
	} else if (voltage > 375) {
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e8       	ldi	r19, 0x80	; 128
     f66:	4b eb       	ldi	r20, 0xBB	; 187
     f68:	53 e4       	ldi	r21, 0x43	; 67
     f6a:	c7 01       	movw	r24, r14
     f6c:	b6 01       	movw	r22, r12
     f6e:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__gesf2>
     f72:	18 16       	cp	r1, r24
     f74:	14 f4       	brge	.+4      	; 0xf7a <adc_get_battery_percentage+0x116>
		return 10;
     f76:	8a e0       	ldi	r24, 0x0A	; 10
     f78:	1f c0       	rjmp	.+62     	; 0xfb8 <adc_get_battery_percentage+0x154>
	//This is critical level, should display somekind of warning
	} else if (voltage > 350) {
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	4f ea       	ldi	r20, 0xAF	; 175
     f80:	53 e4       	ldi	r21, 0x43	; 67
     f82:	c7 01       	movw	r24, r14
     f84:	b6 01       	movw	r22, r12
     f86:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__gesf2>
     f8a:	18 16       	cp	r1, r24
     f8c:	a4 f3       	brlt	.-24     	; 0xf76 <adc_get_battery_percentage+0x112>
		return 10;
	}
	
	return 0;
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	13 c0       	rjmp	.+38     	; 0xfb8 <adc_get_battery_percentage+0x154>
	voltage /= 6.6f;
	
	adc_disable();
	
	if (voltage > 600) {
		return 99;
     f92:	83 e6       	ldi	r24, 0x63	; 99
     f94:	11 c0       	rjmp	.+34     	; 0xfb8 <adc_get_battery_percentage+0x154>
	} else if (voltage > 575) {
		return 95;
     f96:	8f e5       	ldi	r24, 0x5F	; 95
     f98:	0f c0       	rjmp	.+30     	; 0xfb8 <adc_get_battery_percentage+0x154>
	} else if (voltage > 550) {
		return 90;
     f9a:	8a e5       	ldi	r24, 0x5A	; 90
     f9c:	0d c0       	rjmp	.+26     	; 0xfb8 <adc_get_battery_percentage+0x154>
	} else if (voltage > 525) {
		return 80;
     f9e:	80 e5       	ldi	r24, 0x50	; 80
     fa0:	0b c0       	rjmp	.+22     	; 0xfb8 <adc_get_battery_percentage+0x154>
	} else if (voltage > 500) {
		return 70;
     fa2:	86 e4       	ldi	r24, 0x46	; 70
     fa4:	09 c0       	rjmp	.+18     	; 0xfb8 <adc_get_battery_percentage+0x154>
	} else if (voltage > 475) {
		return 60;
     fa6:	8c e3       	ldi	r24, 0x3C	; 60
     fa8:	07 c0       	rjmp	.+14     	; 0xfb8 <adc_get_battery_percentage+0x154>
	} else if (voltage > 450) {
		return 50;
     faa:	82 e3       	ldi	r24, 0x32	; 50
     fac:	05 c0       	rjmp	.+10     	; 0xfb8 <adc_get_battery_percentage+0x154>
	} else if (voltage > 425) {
		return 40;
     fae:	88 e2       	ldi	r24, 0x28	; 40
     fb0:	03 c0       	rjmp	.+6      	; 0xfb8 <adc_get_battery_percentage+0x154>
	} else if (voltage > 415) {
		return 30;
     fb2:	8e e1       	ldi	r24, 0x1E	; 30
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <adc_get_battery_percentage+0x154>
	} else if (voltage > 400) {
		return 20;
     fb6:	84 e1       	ldi	r24, 0x14	; 20
	} else if (voltage > 350) {
		return 10;
	}
	
	return 0;
}
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	df 90       	pop	r13
     fbe:	cf 90       	pop	r12
     fc0:	08 95       	ret

00000fc2 <clock_setup_32_mhz_pll>:
	CLK.CTRL	= CLK_SCLKSEL_RC32M_gc;
}

void clock_setup_32_mhz_pll(void) 
{	
	OSC.PLLCTRL	= 0 | OSC_PLLFAC4_bm;
     fc2:	80 e1       	ldi	r24, 0x10	; 16
     fc4:	80 93 55 00 	sts	0x0055, r24
	OSC.CTRL	|= OSC_PLLEN_bm;
     fc8:	80 91 50 00 	lds	r24, 0x0050
     fcc:	80 61       	ori	r24, 0x10	; 16
     fce:	80 93 50 00 	sts	0x0050, r24
	while ( !(OSC.STATUS & OSC_PLLEN_bm) ) ;
     fd2:	80 91 51 00 	lds	r24, 0x0051
     fd6:	84 ff       	sbrs	r24, 4
     fd8:	fc cf       	rjmp	.-8      	; 0xfd2 <clock_setup_32_mhz_pll+0x10>
	CCP			= CCP_IOREG_gc;
     fda:	88 ed       	ldi	r24, 0xD8	; 216
     fdc:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL	= (CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_PLL_gc;
     fde:	80 91 40 00 	lds	r24, 0x0040
     fe2:	88 7f       	andi	r24, 0xF8	; 248
     fe4:	84 60       	ori	r24, 0x04	; 4
     fe6:	80 93 40 00 	sts	0x0040, r24
     fea:	08 95       	ret

00000fec <dac_speaker_on>:

#include "dac.h"

void dac_speaker_on(void) 
{
	PORTD.DIRSET = SPEAKER_EN;
     fec:	e0 e6       	ldi	r30, 0x60	; 96
     fee:	f6 e0       	ldi	r31, 0x06	; 6
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = SPEAKER_EN;
     ff4:	85 83       	std	Z+5, r24	; 0x05
     ff6:	08 95       	ret

00000ff8 <dac_speaker_off>:
}

void dac_speaker_off(void) 
{
	PORTD.DIRSET = SPEAKER_EN;
     ff8:	e0 e6       	ldi	r30, 0x60	; 96
     ffa:	f6 e0       	ldi	r31, 0x06	; 6
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTCLR = SPEAKER_EN;
    1000:	86 83       	std	Z+6, r24	; 0x06
    1002:	08 95       	ret

00001004 <dac_setup>:
}

void dac_setup(bool dual_channel) 
{
	//Disable power reduction for DACB
	PR.PRPB &= ~0x04;
    1004:	90 91 72 00 	lds	r25, 0x0072
    1008:	9b 7f       	andi	r25, 0xFB	; 251
    100a:	90 93 72 00 	sts	0x0072, r25
			
	if (dual_channel)
    100e:	88 23       	and	r24, r24
    1010:	89 f0       	breq	.+34     	; 0x1034 <dac_setup+0x30>
	{
		PORTB.DIRSET = DAC0 | DAC1;
    1012:	8c e0       	ldi	r24, 0x0C	; 12
    1014:	80 93 21 06 	sts	0x0621, r24
		
		DACB.CTRLA |= DAC_CH0EN_bm | DAC_CH1EN_bm;
    1018:	80 91 20 03 	lds	r24, 0x0320
    101c:	8c 60       	ori	r24, 0x0C	; 12
    101e:	80 93 20 03 	sts	0x0320, r24
		DACB.CTRLC |= DAC_REFSEL_AVCC_gc;
    1022:	80 91 22 03 	lds	r24, 0x0322
    1026:	88 60       	ori	r24, 0x08	; 8
    1028:	80 93 22 03 	sts	0x0322, r24
		DACB.CTRLB |= DAC_CHSEL_DUAL_gc;
    102c:	80 91 21 03 	lds	r24, 0x0321
    1030:	80 64       	ori	r24, 0x40	; 64
    1032:	0f c0       	rjmp	.+30     	; 0x1052 <dac_setup+0x4e>
	} else {
		PORTB.DIRSET = DAC0;
    1034:	84 e0       	ldi	r24, 0x04	; 4
    1036:	80 93 21 06 	sts	0x0621, r24
		
		DACB.CTRLA |= DAC_CH0EN_bm;
    103a:	80 91 20 03 	lds	r24, 0x0320
    103e:	84 60       	ori	r24, 0x04	; 4
    1040:	80 93 20 03 	sts	0x0320, r24
		DACB.CTRLC |= DAC_REFSEL_AVCC_gc;
    1044:	80 91 22 03 	lds	r24, 0x0322
    1048:	88 60       	ori	r24, 0x08	; 8
    104a:	80 93 22 03 	sts	0x0322, r24
		DACB.CTRLB |= DAC_CHSEL_SINGLE_gc;
    104e:	80 91 21 03 	lds	r24, 0x0321
    1052:	80 93 21 03 	sts	0x0321, r24
	}
	
	//From calibration rows
	DACB.CH0OFFSETCAL = 0x07;
    1056:	87 e0       	ldi	r24, 0x07	; 7
    1058:	80 93 29 03 	sts	0x0329, r24
	DACB.CH0GAINCAL   = 0x1B;
    105c:	8b e1       	ldi	r24, 0x1B	; 27
    105e:	80 93 28 03 	sts	0x0328, r24
	DACB.CH1GAINCAL   = 0x0C;
    1062:	8c e0       	ldi	r24, 0x0C	; 12
    1064:	80 93 2a 03 	sts	0x032A, r24
	DACB.CH1OFFSETCAL = 0x13;
    1068:	83 e1       	ldi	r24, 0x13	; 19
    106a:	80 93 2b 03 	sts	0x032B, r24
	DACB.CH0GAINCAL = 0xB6;
	DACB.CH1GAINCAL = 0x0C;
	DACB.CH1OFFSETCAL = 0x13;
	*/
	
	DACB.CTRLA |= DAC_ENABLE_bm;
    106e:	80 91 20 03 	lds	r24, 0x0320
    1072:	81 60       	ori	r24, 0x01	; 1
    1074:	80 93 20 03 	sts	0x0320, r24
	
	dac_speaker_on();
    1078:	b9 cf       	rjmp	.-142    	; 0xfec <dac_speaker_on>

0000107a <dac_disable>:
}

void dac_disable(void) 
{
	PORTB.DIRCLR = DAC0 | DAC1;
    107a:	8c e0       	ldi	r24, 0x0C	; 12
    107c:	e0 e2       	ldi	r30, 0x20	; 32
    107e:	f6 e0       	ldi	r31, 0x06	; 6
    1080:	82 83       	std	Z+2, r24	; 0x02
	
	DACB.CTRLA &= ~(DAC_ENABLE_bm);
    1082:	e0 e2       	ldi	r30, 0x20	; 32
    1084:	f3 e0       	ldi	r31, 0x03	; 3
    1086:	80 81       	ld	r24, Z
    1088:	8e 7f       	andi	r24, 0xFE	; 254
    108a:	80 83       	st	Z, r24
	dac_speaker_off();
    108c:	b5 df       	rcall	.-150    	; 0xff8 <dac_speaker_off>
	
	//Enable power reduction for DACB
	PR.PRPB |= 0x04;
    108e:	e0 e7       	ldi	r30, 0x70	; 112
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	82 81       	ldd	r24, Z+2	; 0x02
    1094:	84 60       	ori	r24, 0x04	; 4
    1096:	82 83       	std	Z+2, r24	; 0x02
    1098:	08 95       	ret

0000109a <__vector_6>:
}
*/

//! DMA CH0 Interrupt service routine. Clear interrupt flags after check. 
ISR(DMA_CH0_vect)
{
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	0f 92       	push	r0
    10a2:	11 24       	eor	r1, r1
    10a4:	8f 93       	push	r24
	if (DMA.CH0.CTRLB & DMA_CH_ERRIF_bm) {
    10a6:	80 91 11 01 	lds	r24, 0x0111
    10aa:	85 ff       	sbrs	r24, 5
    10ac:	08 c0       	rjmp	.+16     	; 0x10be <__vector_6+0x24>
		DMA.CH0.CTRLB |= DMA_CH_ERRIF_bm;
    10ae:	80 91 11 01 	lds	r24, 0x0111
    10b2:	80 62       	ori	r24, 0x20	; 32
    10b4:	80 93 11 01 	sts	0x0111, r24
		gStatus = false;
    10b8:	10 92 d2 2b 	sts	0x2BD2, r1
    10bc:	08 c0       	rjmp	.+16     	; 0x10ce <__vector_6+0x34>
	} else {
		DMA.CH0.CTRLB |= DMA_CH_TRNIF_bm;
    10be:	80 91 11 01 	lds	r24, 0x0111
    10c2:	80 61       	ori	r24, 0x10	; 16
    10c4:	80 93 11 01 	sts	0x0111, r24
		gStatus = true;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	80 93 d2 2b 	sts	0x2BD2, r24
	}
	gInterruptDone = true;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	80 93 d3 2b 	sts	0x2BD3, r24
}
    10d4:	8f 91       	pop	r24
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	0f 90       	pop	r0
    10dc:	1f 90       	pop	r1
    10de:	18 95       	reti

000010e0 <EEPROM_WaitForNVM>:
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
	NVM_EXEC();
    10e0:	80 91 cf 01 	lds	r24, 0x01CF
    10e4:	87 fd       	sbrc	r24, 7
    10e6:	fc cf       	rjmp	.-8      	; 0x10e0 <EEPROM_WaitForNVM>
    10e8:	08 95       	ret

000010ea <EEPROM_FlushBuffer>:
    10ea:	fa df       	rcall	.-12     	; 0x10e0 <EEPROM_WaitForNVM>
    10ec:	80 91 cf 01 	lds	r24, 0x01CF
    10f0:	81 ff       	sbrs	r24, 1
    10f2:	11 c0       	rjmp	.+34     	; 0x1116 <EEPROM_FlushBuffer+0x2c>
    10f4:	86 e3       	ldi	r24, 0x36	; 54
    10f6:	80 93 ca 01 	sts	0x01CA, r24
    10fa:	ef 93       	push	r30
    10fc:	ff 93       	push	r31
    10fe:	0f 93       	push	r16
    1100:	2f 93       	push	r18
    1102:	eb ec       	ldi	r30, 0xCB	; 203
    1104:	f1 e0       	ldi	r31, 0x01	; 1
    1106:	08 ed       	ldi	r16, 0xD8	; 216
    1108:	21 e0       	ldi	r18, 0x01	; 1
    110a:	04 bf       	out	0x34, r16	; 52
    110c:	20 83       	st	Z, r18
    110e:	2f 91       	pop	r18
    1110:	0f 91       	pop	r16
    1112:	ff 91       	pop	r31
    1114:	ef 91       	pop	r30
    1116:	08 95       	ret

00001118 <EEPROM_WriteByte>:
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	00 d0       	rcall	.+0      	; 0x111e <EEPROM_WriteByte+0x6>
    111e:	1f 92       	push	r1
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	4b 83       	std	Y+3, r20	; 0x03
    1126:	6a 83       	std	Y+2, r22	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	df df       	rcall	.-66     	; 0x10ea <EEPROM_FlushBuffer>
    112c:	e0 ec       	ldi	r30, 0xC0	; 192
    112e:	f1 e0       	ldi	r31, 0x01	; 1
    1130:	93 e3       	ldi	r25, 0x33	; 51
    1132:	92 87       	std	Z+10, r25	; 0x0a
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	20 e2       	ldi	r18, 0x20	; 32
    1138:	82 9f       	mul	r24, r18
    113a:	c0 01       	movw	r24, r0
    113c:	11 24       	eor	r1, r1
    113e:	6a 81       	ldd	r22, Y+2	; 0x02
    1140:	6f 71       	andi	r22, 0x1F	; 31
    1142:	86 2b       	or	r24, r22
    1144:	80 83       	st	Z, r24
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	12 82       	std	Z+2, r1	; 0x02
    114a:	4b 81       	ldd	r20, Y+3	; 0x03
    114c:	44 83       	std	Z+4, r20	; 0x04
    114e:	85 e3       	ldi	r24, 0x35	; 53
    1150:	82 87       	std	Z+10, r24	; 0x0a
    1152:	ef 93       	push	r30
    1154:	ff 93       	push	r31
    1156:	0f 93       	push	r16
    1158:	2f 93       	push	r18
    115a:	eb ec       	ldi	r30, 0xCB	; 203
    115c:	f1 e0       	ldi	r31, 0x01	; 1
    115e:	08 ed       	ldi	r16, 0xD8	; 216
    1160:	21 e0       	ldi	r18, 0x01	; 1
    1162:	04 bf       	out	0x34, r16	; 52
    1164:	20 83       	st	Z, r18
    1166:	2f 91       	pop	r18
    1168:	0f 91       	pop	r16
    116a:	ff 91       	pop	r31
    116c:	ef 91       	pop	r30
    116e:	23 96       	adiw	r28, 0x03	; 3
    1170:	cd bf       	out	0x3d, r28	; 61
    1172:	de bf       	out	0x3e, r29	; 62
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <EEPROM_WriteEnv>:
}

uint8_t EEPROM_WriteEnv(void) 
{	
    117a:	9f 92       	push	r9
    117c:	af 92       	push	r10
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	cd 5a       	subi	r28, 0xAD	; 173
    1196:	d1 09       	sbc	r29, r1
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[sizeof(env)];
	uint16_t page_addr;
	uint8_t byte_addr;
	
	EEPROM_FlushBuffer();
    119c:	a6 df       	rcall	.-180    	; 0x10ea <EEPROM_FlushBuffer>
	EEPROM_DisableMapping();
    119e:	80 91 cc 01 	lds	r24, 0x01CC
    11a2:	87 7f       	andi	r24, 0xF7	; 247
    11a4:	80 93 cc 01 	sts	0x01CC, r24
	memcpy(temp, &env, sizeof(env));
    11a8:	8d ea       	ldi	r24, 0xAD	; 173
    11aa:	e1 ec       	ldi	r30, 0xC1	; 193
    11ac:	fa e2       	ldi	r31, 0x2A	; 42
    11ae:	9e 01       	movw	r18, r28
    11b0:	2f 5f       	subi	r18, 0xFF	; 255
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    11b4:	69 01       	movw	r12, r18
    11b6:	d9 01       	movw	r26, r18
    11b8:	01 90       	ld	r0, Z+
    11ba:	0d 92       	st	X+, r0
    11bc:	8a 95       	dec	r24
    11be:	e1 f7       	brne	.-8      	; 0x11b8 <EEPROM_WriteEnv+0x3e>
    11c0:	79 01       	movw	r14, r18
    11c2:	91 2c       	mov	r9, r1
    11c4:	57 01       	movw	r10, r14
    11c6:	ac 18       	sub	r10, r12
    11c8:	bd 08       	sbc	r11, r13
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
	NVM_EXEC();
}

uint8_t EEPROM_WriteEnv(void) 
{	
    11ca:	00 e0       	ldi	r16, 0x00	; 0
    11cc:	10 e0       	ldi	r17, 0x00	; 0
    11ce:	f7 01       	movw	r30, r14
    11d0:	e0 0f       	add	r30, r16
    11d2:	f1 1f       	adc	r31, r17
	EEPROM_DisableMapping();
	memcpy(temp, &env, sizeof(env));
	
	for(page_addr = 0; page_addr < (sizeof(env)/EEPROM_PAGE_SIZE) + 1; page_addr++) {
		for(byte_addr = 0; byte_addr < EEPROM_PAGE_SIZE; byte_addr++) {
			EEPROM_WriteByte(page_addr,byte_addr,temp[byte_addr+(page_addr*EEPROM_PAGE_SIZE)]);
    11d4:	40 81       	ld	r20, Z
    11d6:	60 2f       	mov	r22, r16
    11d8:	89 2d       	mov	r24, r9
    11da:	9e df       	rcall	.-196    	; 0x1118 <EEPROM_WriteByte>
    11dc:	98 01       	movw	r18, r16
    11de:	2a 0d       	add	r18, r10
    11e0:	3b 1d       	adc	r19, r11
			if (byte_addr+(page_addr*EEPROM_PAGE_SIZE) >= sizeof(env)) {
    11e2:	2d 3a       	cpi	r18, 0xAD	; 173
    11e4:	31 05       	cpc	r19, r1
    11e6:	28 f4       	brcc	.+10     	; 0x11f2 <EEPROM_WriteEnv+0x78>
    11e8:	0f 5f       	subi	r16, 0xFF	; 255
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
	EEPROM_FlushBuffer();
	EEPROM_DisableMapping();
	memcpy(temp, &env, sizeof(env));
	
	for(page_addr = 0; page_addr < (sizeof(env)/EEPROM_PAGE_SIZE) + 1; page_addr++) {
		for(byte_addr = 0; byte_addr < EEPROM_PAGE_SIZE; byte_addr++) {
    11ec:	00 32       	cpi	r16, 0x20	; 32
    11ee:	11 05       	cpc	r17, r1
    11f0:	71 f7       	brne	.-36     	; 0x11ce <EEPROM_WriteEnv+0x54>
    11f2:	30 e2       	ldi	r19, 0x20	; 32
    11f4:	e3 0e       	add	r14, r19
    11f6:	f1 1c       	adc	r15, r1
    11f8:	93 94       	inc	r9
	
	EEPROM_FlushBuffer();
	EEPROM_DisableMapping();
	memcpy(temp, &env, sizeof(env));
	
	for(page_addr = 0; page_addr < (sizeof(env)/EEPROM_PAGE_SIZE) + 1; page_addr++) {
    11fa:	86 e0       	ldi	r24, 0x06	; 6
    11fc:	98 12       	cpse	r9, r24
    11fe:	e2 cf       	rjmp	.-60     	; 0x11c4 <EEPROM_WriteEnv+0x4a>
	}
	
	//eeprom_update_block(&env_var,MAPPED_EEPROM_START,sizeof(env_var));
	
	return 1;
}
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	c3 55       	subi	r28, 0x53	; 83
    1204:	df 4f       	sbci	r29, 0xFF	; 255
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	df 90       	pop	r13
    1218:	cf 90       	pop	r12
    121a:	bf 90       	pop	r11
    121c:	af 90       	pop	r10
    121e:	9f 90       	pop	r9
    1220:	08 95       	ret

00001222 <itoa_simple>:
	esp8266_send_cmd("AT+CWLAP",4000);
}

void esp8266_update(void) 
{
	esp8266_send_cmd("AT+CIPUPDATE",10000);
    1222:	8f 92       	push	r8
    1224:	9f 92       	push	r9
    1226:	af 92       	push	r10
    1228:	bf 92       	push	r11
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	8c 01       	movw	r16, r24
    123c:	77 fd       	sbrc	r23, 7
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <itoa_simple+0x26>
    1240:	cb 01       	movw	r24, r22
    1242:	ba 01       	movw	r22, r20
    1244:	e8 01       	movw	r28, r16
    1246:	0e c0       	rjmp	.+28     	; 0x1264 <itoa_simple+0x42>
    1248:	6a 01       	movw	r12, r20
    124a:	7b 01       	movw	r14, r22
    124c:	66 27       	eor	r22, r22
    124e:	77 27       	eor	r23, r23
    1250:	cb 01       	movw	r24, r22
    1252:	6c 19       	sub	r22, r12
    1254:	7d 09       	sbc	r23, r13
    1256:	8e 09       	sbc	r24, r14
    1258:	9f 09       	sbc	r25, r15
    125a:	e8 01       	movw	r28, r16
    125c:	21 96       	adiw	r28, 0x01	; 1
    125e:	2d e2       	ldi	r18, 0x2D	; 45
    1260:	f8 01       	movw	r30, r16
    1262:	20 83       	st	Z, r18
    1264:	6e 01       	movw	r12, r28
    1266:	2a e0       	ldi	r18, 0x0A	; 10
    1268:	82 2e       	mov	r8, r18
    126a:	91 2c       	mov	r9, r1
    126c:	a1 2c       	mov	r10, r1
    126e:	b1 2c       	mov	r11, r1
    1270:	76 01       	movw	r14, r12
    1272:	ff ef       	ldi	r31, 0xFF	; 255
    1274:	ef 1a       	sub	r14, r31
    1276:	ff 0a       	sbc	r15, r31
    1278:	a5 01       	movw	r20, r10
    127a:	94 01       	movw	r18, r8
    127c:	0e 94 be 4e 	call	0x9d7c	; 0x9d7c <__udivmodsi4>
    1280:	60 5d       	subi	r22, 0xD0	; 208
    1282:	f6 01       	movw	r30, r12
    1284:	60 83       	st	Z, r22
    1286:	b9 01       	movw	r22, r18
    1288:	ca 01       	movw	r24, r20
    128a:	61 15       	cp	r22, r1
    128c:	71 05       	cpc	r23, r1
    128e:	81 05       	cpc	r24, r1
    1290:	91 05       	cpc	r25, r1
    1292:	11 f0       	breq	.+4      	; 0x1298 <itoa_simple+0x76>
    1294:	67 01       	movw	r12, r14
    1296:	ec cf       	rjmp	.-40     	; 0x1270 <itoa_simple+0x4e>
    1298:	d7 01       	movw	r26, r14
    129a:	ac 1b       	sub	r26, r28
    129c:	bd 0b       	sbc	r27, r29
    129e:	cd 01       	movw	r24, r26
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	ac 0f       	add	r26, r28
    12a4:	bd 1f       	adc	r27, r29
    12a6:	fe 01       	movw	r30, r28
    12a8:	9f 01       	movw	r18, r30
    12aa:	2c 1b       	sub	r18, r28
    12ac:	3d 0b       	sbc	r19, r29
    12ae:	28 17       	cp	r18, r24
    12b0:	39 07       	cpc	r19, r25
    12b2:	34 f4       	brge	.+12     	; 0x12c0 <itoa_simple+0x9e>
    12b4:	20 81       	ld	r18, Z
    12b6:	3e 91       	ld	r19, -X
    12b8:	31 93       	st	Z+, r19
    12ba:	2c 93       	st	X, r18
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f4 cf       	rjmp	.-24     	; 0x12a8 <itoa_simple+0x86>
    12c0:	c7 01       	movw	r24, r14
    12c2:	80 1b       	sub	r24, r16
    12c4:	91 0b       	sbc	r25, r17
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	cf 90       	pop	r12
    12d6:	bf 90       	pop	r11
    12d8:	af 90       	pop	r10
    12da:	9f 90       	pop	r9
    12dc:	8f 90       	pop	r8
    12de:	08 95       	ret

000012e0 <esp8266_send_cmd>:
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	eb 01       	movw	r28, r22
    12e6:	29 e0       	ldi	r18, 0x09	; 9
    12e8:	20 93 6d 2c 	sts	0x2C6D, r18
    12ec:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <uart_write_str>
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	8c 17       	cp	r24, r28
    12f6:	9d 07       	cpc	r25, r29
    12f8:	44 f4       	brge	.+16     	; 0x130a <esp8266_send_cmd+0x2a>
    12fa:	ef e3       	ldi	r30, 0x3F	; 63
    12fc:	ff e1       	ldi	r31, 0x1F	; 31
    12fe:	31 97       	sbiw	r30, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <esp8266_send_cmd+0x1e>
    1302:	00 c0       	rjmp	.+0      	; 0x1304 <esp8266_send_cmd+0x24>
    1304:	00 00       	nop
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	f5 cf       	rjmp	.-22     	; 0x12f4 <esp8266_send_cmd+0x14>
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

00001310 <esp8266_on>:
    1310:	e0 e6       	ldi	r30, 0x60	; 96
    1312:	f6 e0       	ldi	r31, 0x06	; 6
    1314:	80 e3       	ldi	r24, 0x30	; 48
    1316:	81 83       	std	Z+1, r24	; 0x01
    1318:	85 83       	std	Z+5, r24	; 0x05
    131a:	2f ef       	ldi	r18, 0xFF	; 255
    131c:	83 ec       	ldi	r24, 0xC3	; 195
    131e:	99 e0       	ldi	r25, 0x09	; 9
    1320:	21 50       	subi	r18, 0x01	; 1
    1322:	80 40       	sbci	r24, 0x00	; 0
    1324:	90 40       	sbci	r25, 0x00	; 0
    1326:	e1 f7       	brne	.-8      	; 0x1320 <esp8266_on+0x10>
    1328:	00 c0       	rjmp	.+0      	; 0x132a <esp8266_on+0x1a>
    132a:	00 00       	nop
    132c:	08 95       	ret

0000132e <esp8266_off>:
    132e:	e0 e6       	ldi	r30, 0x60	; 96
    1330:	f6 e0       	ldi	r31, 0x06	; 6
    1332:	80 e2       	ldi	r24, 0x20	; 32
    1334:	81 83       	std	Z+1, r24	; 0x01
    1336:	86 83       	std	Z+6, r24	; 0x06
    1338:	08 95       	ret

0000133a <esp8266_setup>:
    133a:	60 ed       	ldi	r22, 0xD0	; 208
    133c:	77 e0       	ldi	r23, 0x07	; 7
    133e:	82 ee       	ldi	r24, 0xE2	; 226
    1340:	90 e2       	ldi	r25, 0x20	; 32
    1342:	ce df       	rcall	.-100    	; 0x12e0 <esp8266_send_cmd>
    1344:	80 91 6d 2c 	lds	r24, 0x2C6D
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	d9 f4       	brne	.+54     	; 0x1382 <esp8266_setup+0x48>
    134c:	10 92 7f 2a 	sts	0x2A7F, r1
    1350:	64 e6       	ldi	r22, 0x64	; 100
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	89 ee       	ldi	r24, 0xE9	; 233
    1356:	90 e2       	ldi	r25, 0x20	; 32
    1358:	c3 df       	rcall	.-122    	; 0x12e0 <esp8266_send_cmd>
    135a:	80 91 6d 2c 	lds	r24, 0x2C6D
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	81 f4       	brne	.+32     	; 0x1382 <esp8266_setup+0x48>
    1362:	64 e6       	ldi	r22, 0x64	; 100
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	86 ef       	ldi	r24, 0xF6	; 246
    1368:	90 e2       	ldi	r25, 0x20	; 32
    136a:	ba df       	rcall	.-140    	; 0x12e0 <esp8266_send_cmd>
    136c:	80 91 6d 2c 	lds	r24, 0x2C6D
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	39 f4       	brne	.+14     	; 0x1382 <esp8266_setup+0x48>
    1374:	64 e6       	ldi	r22, 0x64	; 100
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	91 e2       	ldi	r25, 0x21	; 33
    137c:	b1 df       	rcall	.-158    	; 0x12e0 <esp8266_send_cmd>
    137e:	80 91 6d 2c 	lds	r24, 0x2C6D
    1382:	08 95       	ret

00001384 <esp8266_join_ap>:
}

esp8266_status_t esp8266_join_ap(char *ssid, char *pass) 
{	
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	c4 56       	subi	r28, 0x64	; 100
    1396:	d1 09       	sbc	r29, r1
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	7c 01       	movw	r14, r24
    139e:	8b 01       	movw	r16, r22
	uint16_t timeout = 300;
	uint16_t cnt = 0;
	char cmd[100];
	
	strcpy(cmd,"AT+CWJAP=\"");
    13a0:	64 e2       	ldi	r22, 0x24	; 36
    13a2:	71 e2       	ldi	r23, 0x21	; 33
    13a4:	ce 01       	movw	r24, r28
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <strcpy>
	strcat(cmd,ssid);
    13ac:	b7 01       	movw	r22, r14
    13ae:	ce 01       	movw	r24, r28
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <strcat>
	strcat(cmd,"\",\"");
    13b6:	6f e3       	ldi	r22, 0x3F	; 63
    13b8:	71 e2       	ldi	r23, 0x21	; 33
    13ba:	ce 01       	movw	r24, r28
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <strcat>
	strcat(cmd,pass);
    13c2:	b8 01       	movw	r22, r16
    13c4:	ce 01       	movw	r24, r28
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <strcat>
	strcat(cmd,"\"");
    13cc:	61 e4       	ldi	r22, 0x41	; 65
    13ce:	71 e2       	ldi	r23, 0x21	; 33
    13d0:	ce 01       	movw	r24, r28
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <strcat>
	esp8266_send_cmd(cmd,100);
    13d8:	64 e6       	ldi	r22, 0x64	; 100
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	ce 01       	movw	r24, r28
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	7f df       	rcall	.-258    	; 0x12e0 <esp8266_send_cmd>
	
	while (status != ESP8266_SUCCESS) {
    13e2:	8e e2       	ldi	r24, 0x2E	; 46
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	20 91 6d 2c 	lds	r18, 0x2C6D
    13ea:	21 30       	cpi	r18, 0x01	; 1
    13ec:	91 f0       	breq	.+36     	; 0x1412 <esp8266_join_ap+0x8e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13ee:	2f ef       	ldi	r18, 0xFF	; 255
    13f0:	33 ec       	ldi	r19, 0xC3	; 195
    13f2:	49 e0       	ldi	r20, 0x09	; 9
    13f4:	21 50       	subi	r18, 0x01	; 1
    13f6:	30 40       	sbci	r19, 0x00	; 0
    13f8:	40 40       	sbci	r20, 0x00	; 0
    13fa:	e1 f7       	brne	.-8      	; 0x13f4 <esp8266_join_ap+0x70>
    13fc:	00 c0       	rjmp	.+0      	; 0x13fe <esp8266_join_ap+0x7a>
    13fe:	00 00       	nop
    1400:	01 97       	sbiw	r24, 0x01	; 1
		_delay_ms(100);
		
		if (cnt++ > timeout) {
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	41 f0       	breq	.+16     	; 0x1416 <esp8266_join_ap+0x92>
			return ESP8266_TIMEOUT;
		} else if (status == ESP8266_ERROR) {
    1406:	20 91 6d 2c 	lds	r18, 0x2C6D
    140a:	21 11       	cpse	r18, r1
    140c:	ec cf       	rjmp	.-40     	; 0x13e6 <esp8266_join_ap+0x62>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	03 c0       	rjmp	.+6      	; 0x1418 <esp8266_join_ap+0x94>
			return status;
		}
	}

	return ESP8266_SUCCESS;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	01 c0       	rjmp	.+2      	; 0x1418 <esp8266_join_ap+0x94>
	
	while (status != ESP8266_SUCCESS) {
		_delay_ms(100);
		
		if (cnt++ > timeout) {
			return ESP8266_TIMEOUT;
    1416:	83 e0       	ldi	r24, 0x03	; 3
			return status;
		}
	}

	return ESP8266_SUCCESS;
}
    1418:	cc 59       	subi	r28, 0x9C	; 156
    141a:	df 4f       	sbci	r29, 0xFF	; 255
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	08 95       	ret

0000142e <esp8266_get_json>:

esp8266_status_t esp8266_get_json(char *host, char *addr, char *json, uint8_t json_length) 
{	
    142e:	8f 92       	push	r8
    1430:	9f 92       	push	r9
    1432:	bf 92       	push	r11
    1434:	cf 92       	push	r12
    1436:	df 92       	push	r13
    1438:	ef 92       	push	r14
    143a:	ff 92       	push	r15
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	c4 56       	subi	r28, 0x64	; 100
    144a:	d1 09       	sbc	r29, r1
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	4c 01       	movw	r8, r24
    1452:	7b 01       	movw	r14, r22
    1454:	6a 01       	movw	r12, r20
    1456:	b2 2e       	mov	r11, r18
	uint16_t timeout = 300;
	uint16_t cnt = 0;
	char cmd[100];
	
	//Set up TCP connection to host
	strcpy(cmd,"AT+CIPSTART=\"TCP\",\"");
    1458:	6f e2       	ldi	r22, 0x2F	; 47
    145a:	71 e2       	ldi	r23, 0x21	; 33
    145c:	8e 01       	movw	r16, r28
    145e:	0f 5f       	subi	r16, 0xFF	; 255
    1460:	1f 4f       	sbci	r17, 0xFF	; 255
    1462:	c8 01       	movw	r24, r16
    1464:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <strcpy>
	strcat(cmd,host);
    1468:	b4 01       	movw	r22, r8
    146a:	c8 01       	movw	r24, r16
    146c:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <strcat>
	strcat(cmd,"\",80");
    1470:	63 e4       	ldi	r22, 0x43	; 67
    1472:	71 e2       	ldi	r23, 0x21	; 33
    1474:	c8 01       	movw	r24, r16
    1476:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <strcat>
	esp8266_send_cmd(cmd,100);
    147a:	64 e6       	ldi	r22, 0x64	; 100
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	c8 01       	movw	r24, r16
    1480:	2f df       	rcall	.-418    	; 0x12e0 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    1482:	80 91 6d 2c 	lds	r24, 0x2C6D
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	09 f0       	breq	.+2      	; 0x148c <esp8266_get_json+0x5e>
    148a:	9f c0       	rjmp	.+318    	; 0x15ca <esp8266_get_json+0x19c>
		return status;
	}
	
	//Count number of bytes to send
	char *number_of_bytes;
	itoa_simple(number_of_bytes,strlen(addr) + 25);
    148c:	f7 01       	movw	r30, r14
    148e:	01 90       	ld	r0, Z+
    1490:	00 20       	and	r0, r0
    1492:	e9 f7       	brne	.-6      	; 0x148e <esp8266_get_json+0x60>
    1494:	ee 19       	sub	r30, r14
    1496:	ff 09       	sbc	r31, r15
    1498:	78 96       	adiw	r30, 0x18	; 24
    149a:	af 01       	movw	r20, r30
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	81 2c       	mov	r8, r1
    14a2:	91 2c       	mov	r9, r1
    14a4:	c4 01       	movw	r24, r8
    14a6:	bd de       	rcall	.-646    	; 0x1222 <itoa_simple>
	//itoa(strlen(addr) + 25, number_of_bytes, 10);
	strcpy(cmd, "AT+CIPSEND=");
    14a8:	68 e4       	ldi	r22, 0x48	; 72
    14aa:	71 e2       	ldi	r23, 0x21	; 33
    14ac:	c8 01       	movw	r24, r16
    14ae:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <strcpy>
	strcat(cmd,number_of_bytes);
    14b2:	b4 01       	movw	r22, r8
    14b4:	c8 01       	movw	r24, r16
    14b6:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <strcat>
	strcat(cmd,"\r"); //needs to be here...
    14ba:	64 e5       	ldi	r22, 0x54	; 84
    14bc:	71 e2       	ldi	r23, 0x21	; 33
    14be:	c8 01       	movw	r24, r16
    14c0:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <strcat>
	esp8266_send_cmd(cmd,100);
    14c4:	64 e6       	ldi	r22, 0x64	; 100
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	c8 01       	movw	r24, r16
    14ca:	0a df       	rcall	.-492    	; 0x12e0 <esp8266_send_cmd>
	
	//Request data by sending a GET
	strcpy(cmd,"GET ");
    14cc:	66 e5       	ldi	r22, 0x56	; 86
    14ce:	71 e2       	ldi	r23, 0x21	; 33
    14d0:	c8 01       	movw	r24, r16
    14d2:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <strcpy>
	if (strlen(cmd) < sizeof(cmd)) {
    14d6:	f8 01       	movw	r30, r16
    14d8:	01 90       	ld	r0, Z+
    14da:	00 20       	and	r0, r0
    14dc:	e9 f7       	brne	.-6      	; 0x14d8 <esp8266_get_json+0xaa>
    14de:	31 97       	sbiw	r30, 0x01	; 1
    14e0:	e0 1b       	sub	r30, r16
    14e2:	f1 0b       	sbc	r31, r17
    14e4:	e4 36       	cpi	r30, 0x64	; 100
    14e6:	f1 05       	cpc	r31, r1
    14e8:	10 f0       	brcs	.+4      	; 0x14ee <esp8266_get_json+0xc0>
		strcat(cmd,addr);
	} else {
		return ESP8266_ERROR;
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	6e c0       	rjmp	.+220    	; 0x15ca <esp8266_get_json+0x19c>
	esp8266_send_cmd(cmd,100);
	
	//Request data by sending a GET
	strcpy(cmd,"GET ");
	if (strlen(cmd) < sizeof(cmd)) {
		strcat(cmd,addr);
    14ee:	b7 01       	movw	r22, r14
    14f0:	c8 01       	movw	r24, r16
    14f2:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <strcat>
	} else {
		return ESP8266_ERROR;
	}
	strcat(cmd," HTTP/1.0\r\n");
    14f6:	6b e5       	ldi	r22, 0x5B	; 91
    14f8:	71 e2       	ldi	r23, 0x21	; 33
    14fa:	c8 01       	movw	r24, r16
    14fc:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <strcat>
	esp8266_send_cmd(cmd,100);
    1500:	64 e6       	ldi	r22, 0x64	; 100
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	c8 01       	movw	r24, r16
    1506:	ec de       	rcall	.-552    	; 0x12e0 <esp8266_send_cmd>
}

esp8266_status_t esp8266_get_json(char *host, char *addr, char *json, uint8_t json_length) 
{	
	uint16_t timeout = 300;
	uint16_t cnt = 0;
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	10 e0       	ldi	r17, 0x00	; 0
		return ESP8266_ERROR;
	}
	strcat(cmd," HTTP/1.0\r\n");
	esp8266_send_cmd(cmd,100);
	
	while (status != ESP8266_SUCCESS)
    150c:	80 91 6d 2c 	lds	r24, 0x2C6D
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	29 f1       	breq	.+74     	; 0x155e <esp8266_get_json+0x130>
	{
		esp8266_send_cmd("",100);
    1514:	64 e6       	ldi	r22, 0x64	; 100
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	82 ef       	ldi	r24, 0xF2	; 242
    151a:	93 e2       	ldi	r25, 0x23	; 35
    151c:	e1 de       	rcall	.-574    	; 0x12e0 <esp8266_send_cmd>
		
		if (cnt++ > timeout) {
    151e:	0f 5f       	subi	r16, 0xFF	; 255
    1520:	1f 4f       	sbci	r17, 0xFF	; 255
    1522:	0e 32       	cpi	r16, 0x2E	; 46
    1524:	21 e0       	ldi	r18, 0x01	; 1
    1526:	12 07       	cpc	r17, r18
    1528:	11 f4       	brne	.+4      	; 0x152e <esp8266_get_json+0x100>
			return ESP8266_TIMEOUT;
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	4e c0       	rjmp	.+156    	; 0x15ca <esp8266_get_json+0x19c>
		} else if (status == ESP8266_ERROR) {
    152e:	80 91 6d 2c 	lds	r24, 0x2C6D
    1532:	81 11       	cpse	r24, r1
    1534:	eb cf       	rjmp	.-42     	; 0x150c <esp8266_get_json+0xde>
    1536:	13 c0       	rjmp	.+38     	; 0x155e <esp8266_get_json+0x130>
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	93 ec       	ldi	r25, 0xC3	; 195
    153c:	a9 e0       	ldi	r26, 0x09	; 9
    153e:	81 50       	subi	r24, 0x01	; 1
    1540:	90 40       	sbci	r25, 0x00	; 0
    1542:	a0 40       	sbci	r26, 0x00	; 0
    1544:	e1 f7       	brne	.-8      	; 0x153e <esp8266_get_json+0x110>
    1546:	00 c0       	rjmp	.+0      	; 0x1548 <esp8266_get_json+0x11a>
    1548:	00 00       	nop
	//Waiting for all the data
	while (status != ESP8266_CLOSED)
	{
		_delay_ms(100);
		
		if (cnt++ > timeout) {
    154a:	0d 32       	cpi	r16, 0x2D	; 45
    154c:	b1 e0       	ldi	r27, 0x01	; 1
    154e:	1b 07       	cpc	r17, r27
    1550:	60 f7       	brcc	.-40     	; 0x152a <esp8266_get_json+0xfc>
    1552:	0f 5f       	subi	r16, 0xFF	; 255
    1554:	1f 4f       	sbci	r17, 0xFF	; 255
			return ESP8266_TIMEOUT;
		} else if (status == ESP8266_ERROR) {
    1556:	80 91 6d 2c 	lds	r24, 0x2C6D
    155a:	88 23       	and	r24, r24
    155c:	21 f0       	breq	.+8      	; 0x1566 <esp8266_get_json+0x138>
			break;
		}
	}
	
	//Waiting for all the data
	while (status != ESP8266_CLOSED)
    155e:	80 91 6d 2c 	lds	r24, 0x2C6D
    1562:	86 30       	cpi	r24, 0x06	; 6
    1564:	49 f7       	brne	.-46     	; 0x1538 <esp8266_get_json+0x10a>
		} else if (status == ESP8266_ERROR) {
			break;
		}
	}
	
	if (json_found) {
    1566:	80 91 7e 2a 	lds	r24, 0x2A7E
    156a:	88 23       	and	r24, r24
    156c:	09 f4       	brne	.+2      	; 0x1570 <esp8266_get_json+0x142>
    156e:	bd cf       	rjmp	.-134    	; 0x14ea <esp8266_get_json+0xbc>
		uint16_t start_addr = (uint16_t)rx_buffer;
		uint16_t end_addr = (uint16_t)strrchr(rx_buffer,'}');
    1570:	6d e7       	ldi	r22, 0x7D	; 125
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	82 e8       	ldi	r24, 0x82	; 130
    1576:	99 e2       	ldi	r25, 0x29	; 41
    1578:	0e 94 84 50 	call	0xa108	; 0xa108 <strrchr>
		uint16_t len = (end_addr-start_addr)+1;
    157c:	8c 01       	movw	r16, r24
    157e:	01 58       	subi	r16, 0x81	; 129
    1580:	19 42       	sbci	r17, 0x29	; 41
		if (len > json_length) {
    1582:	4b 2d       	mov	r20, r11
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	40 17       	cp	r20, r16
    1588:	51 07       	cpc	r21, r17
    158a:	08 f4       	brcc	.+2      	; 0x158e <esp8266_get_json+0x160>
    158c:	ae cf       	rjmp	.-164    	; 0x14ea <esp8266_get_json+0xbc>
			return ESP8266_ERROR;
		}
		memset(json,0,json_length);
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	c6 01       	movw	r24, r12
    1594:	0e 94 51 50 	call	0xa0a2	; 0xa0a2 <memset>
		strncpy(json,rx_buffer,len);
    1598:	a8 01       	movw	r20, r16
    159a:	62 e8       	ldi	r22, 0x82	; 130
    159c:	79 e2       	ldi	r23, 0x29	; 41
    159e:	c6 01       	movw	r24, r12
    15a0:	0e 94 75 50 	call	0xa0ea	; 0xa0ea <strncpy>
		memset(rx_buffer,0,RX_BUFFER);
    15a4:	8a ef       	ldi	r24, 0xFA	; 250
    15a6:	e2 e8       	ldi	r30, 0x82	; 130
    15a8:	f9 e2       	ldi	r31, 0x29	; 41
    15aa:	df 01       	movw	r26, r30
    15ac:	1d 92       	st	X+, r1
    15ae:	8a 95       	dec	r24
    15b0:	e9 f7       	brne	.-6      	; 0x15ac <esp8266_get_json+0x17e>
		json_found = false;
    15b2:	10 92 7e 2a 	sts	0x2A7E, r1
		rx_ptr = 0;	
    15b6:	10 92 7c 2a 	sts	0x2A7C, r1
    15ba:	10 92 7d 2a 	sts	0x2A7D, r1
	} else {
		return ESP8266_ERROR;
	}
	
	esp8266_send_cmd("AT+CIPCLOSE",50);
    15be:	62 e3       	ldi	r22, 0x32	; 50
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	87 e6       	ldi	r24, 0x67	; 103
    15c4:	91 e2       	ldi	r25, 0x21	; 33
    15c6:	8c de       	rcall	.-744    	; 0x12e0 <esp8266_send_cmd>
	
	return ESP8266_SUCCESS;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
}
    15ca:	cc 59       	subi	r28, 0x9C	; 156
    15cc:	df 4f       	sbci	r29, 0xFF	; 255
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	ff 90       	pop	r15
    15dc:	ef 90       	pop	r14
    15de:	df 90       	pop	r13
    15e0:	cf 90       	pop	r12
    15e2:	bf 90       	pop	r11
    15e4:	9f 90       	pop	r9
    15e6:	8f 90       	pop	r8
    15e8:	08 95       	ret

000015ea <esp8266_setup_webserver>:

esp8266_status_t esp8266_setup_webserver(bool sta, bool ap) 
{	
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	c8 2f       	mov	r28, r24
    15f0:	d6 2f       	mov	r29, r22
	//Reset module
	esp8266_send_cmd("AT+RST",2000);
    15f2:	60 ed       	ldi	r22, 0xD0	; 208
    15f4:	77 e0       	ldi	r23, 0x07	; 7
    15f6:	82 ee       	ldi	r24, 0xE2	; 226
    15f8:	90 e2       	ldi	r25, 0x20	; 32
    15fa:	72 de       	rcall	.-796    	; 0x12e0 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    15fc:	80 91 6d 2c 	lds	r24, 0x2C6D
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	09 f0       	breq	.+2      	; 0x1606 <esp8266_setup_webserver+0x1c>
    1604:	5e c0       	rjmp	.+188    	; 0x16c2 <esp8266_setup_webserver+0xd8>
		return status;
	}
	
	wdt_triggered = false;
    1606:	10 92 7f 2a 	sts	0x2A7F, r1
	
	//Set Data Mode
	esp8266_send_cmd("AT+CIPMODE=0",100);
    160a:	64 e6       	ldi	r22, 0x64	; 100
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	89 ee       	ldi	r24, 0xE9	; 233
    1610:	90 e2       	ldi	r25, 0x20	; 32
    1612:	66 de       	rcall	.-820    	; 0x12e0 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    1614:	80 91 6d 2c 	lds	r24, 0x2C6D
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	09 f0       	breq	.+2      	; 0x161e <esp8266_setup_webserver+0x34>
    161c:	52 c0       	rjmp	.+164    	; 0x16c2 <esp8266_setup_webserver+0xd8>
		return status;
	}
	
	//Select mode (this can be more streamlined)
	if (sta && !ap) {
    161e:	cc 23       	and	r28, r28
    1620:	41 f0       	breq	.+16     	; 0x1632 <esp8266_setup_webserver+0x48>
		esp8266_send_cmd("AT+CWMODE=1",100);
    1622:	64 e6       	ldi	r22, 0x64	; 100
    1624:	70 e0       	ldi	r23, 0x00	; 0
	if (status != ESP8266_SUCCESS) {
		return status;
	}
	
	//Select mode (this can be more streamlined)
	if (sta && !ap) {
    1626:	d1 11       	cpse	r29, r1
    1628:	0c c0       	rjmp	.+24     	; 0x1642 <esp8266_setup_webserver+0x58>
		esp8266_send_cmd("AT+CWMODE=1",100);
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	91 e2       	ldi	r25, 0x21	; 33
    162e:	58 de       	rcall	.-848    	; 0x12e0 <esp8266_send_cmd>
    1630:	1d c0       	rjmp	.+58     	; 0x166c <esp8266_setup_webserver+0x82>
	} else if (ap && !sta) {
    1632:	dd 23       	and	r29, r29
    1634:	09 f4       	brne	.+2      	; 0x1638 <esp8266_setup_webserver+0x4e>
    1636:	44 c0       	rjmp	.+136    	; 0x16c0 <esp8266_setup_webserver+0xd6>
		esp8266_send_cmd("AT+CWMODE=2",100);
    1638:	64 e6       	ldi	r22, 0x64	; 100
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	83 e7       	ldi	r24, 0x73	; 115
    163e:	91 e2       	ldi	r25, 0x21	; 33
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <esp8266_setup_webserver+0x5c>
	} else if (ap && sta) {
		esp8266_send_cmd("AT+CWMODE=3",100);
    1642:	8f e7       	ldi	r24, 0x7F	; 127
    1644:	91 e2       	ldi	r25, 0x21	; 33
    1646:	4c de       	rcall	.-872    	; 0x12e0 <esp8266_send_cmd>
		return ESP8266_ERROR;
	}
	
	//Set Data Mode
	if (ap) {
		esp8266_send_cmd("AT+CWSAP=\"SMART_CLOCK\",\"123\",5,0",100);
    1648:	64 e6       	ldi	r22, 0x64	; 100
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	89 ec       	ldi	r24, 0xC9	; 201
    164e:	91 e2       	ldi	r25, 0x21	; 33
    1650:	47 de       	rcall	.-882    	; 0x12e0 <esp8266_send_cmd>
		if (status != ESP8266_SUCCESS) {
    1652:	80 91 6d 2c 	lds	r24, 0x2C6D
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	a1 f5       	brne	.+104    	; 0x16c2 <esp8266_setup_webserver+0xd8>
			return status;
		}
			
		esp8266_send_cmd("AT+CIPAP=\"192.168.0.1\"",100);
    165a:	64 e6       	ldi	r22, 0x64	; 100
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	8b e8       	ldi	r24, 0x8B	; 139
    1660:	91 e2       	ldi	r25, 0x21	; 33
    1662:	3e de       	rcall	.-900    	; 0x12e0 <esp8266_send_cmd>
		if (status != ESP8266_SUCCESS) {
    1664:	80 91 6d 2c 	lds	r24, 0x2C6D
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	59 f5       	brne	.+86     	; 0x16c2 <esp8266_setup_webserver+0xd8>
			return status;
		}
	}
	
	if (status != ESP8266_SUCCESS) {
    166c:	80 91 6d 2c 	lds	r24, 0x2C6D
    1670:	81 30       	cpi	r24, 0x01	; 1
    1672:	39 f5       	brne	.+78     	; 0x16c2 <esp8266_setup_webserver+0xd8>
		return status;
	}
	
	if (sta || (sta && ap)) {
    1674:	cc 23       	and	r28, r28
    1676:	29 f0       	breq	.+10     	; 0x1682 <esp8266_setup_webserver+0x98>
		esp8266_join_ap(env.wifi_ssid,env.wifi_pswd);
    1678:	62 e3       	ldi	r22, 0x32	; 50
    167a:	7b e2       	ldi	r23, 0x2B	; 43
    167c:	8b e4       	ldi	r24, 0x4B	; 75
    167e:	9b e2       	ldi	r25, 0x2B	; 43
    1680:	81 de       	rcall	.-766    	; 0x1384 <esp8266_join_ap>
	}
	
	//List ip addresses
	esp8266_send_cmd("AT+CIFSR", 100);
    1682:	64 e6       	ldi	r22, 0x64	; 100
    1684:	70 e0       	ldi	r23, 0x00	; 0
    1686:	82 ea       	ldi	r24, 0xA2	; 162
    1688:	91 e2       	ldi	r25, 0x21	; 33
    168a:	2a de       	rcall	.-940    	; 0x12e0 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    168c:	80 91 6d 2c 	lds	r24, 0x2C6D
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	b9 f4       	brne	.+46     	; 0x16c2 <esp8266_setup_webserver+0xd8>
		return status;
	}
	
	//Show IP address to user
#ifdef SHOW_MANUAL
	display_print_scrolling_text(ip_address,false);
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	88 e3       	ldi	r24, 0x38	; 56
    1698:	9c e2       	ldi	r25, 0x2C	; 44
    169a:	0e 94 a3 22 	call	0x4546	; 0x4546 <display_print_scrolling_text>
#endif

	//Configure multiple connections
	esp8266_send_cmd("AT+CIPMUX=1",100);
    169e:	64 e6       	ldi	r22, 0x64	; 100
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	8b ea       	ldi	r24, 0xAB	; 171
    16a4:	91 e2       	ldi	r25, 0x21	; 33
    16a6:	1c de       	rcall	.-968    	; 0x12e0 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    16a8:	80 91 6d 2c 	lds	r24, 0x2C6D
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	49 f4       	brne	.+18     	; 0x16c2 <esp8266_setup_webserver+0xd8>
		return status;
	}
	
	//Start server
	esp8266_send_cmd("AT+CIPSERVER=1,80",100);	
    16b0:	64 e6       	ldi	r22, 0x64	; 100
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	87 eb       	ldi	r24, 0xB7	; 183
    16b6:	91 e2       	ldi	r25, 0x21	; 33
    16b8:	13 de       	rcall	.-986    	; 0x12e0 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    16ba:	80 91 6d 2c 	lds	r24, 0x2C6D
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <esp8266_setup_webserver+0xd8>
	} else if (ap && !sta) {
		esp8266_send_cmd("AT+CWMODE=2",100);
	} else if (ap && sta) {
		esp8266_send_cmd("AT+CWMODE=3",100);
	} else {
		return ESP8266_ERROR;
    16c0:	80 e0       	ldi	r24, 0x00	; 0
	if (status != ESP8266_SUCCESS) {
		return status;
	}
	
	return ESP8266_SUCCESS;
}
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	08 95       	ret

000016c8 <esp8266_configure_ssid_and_password>:
		uart_write_str("Could not access sd card...");
	}
}

esp8266_status_t esp8266_configure_ssid_and_password(void) 
{
    16c8:	af 92       	push	r10
    16ca:	bf 92       	push	r11
    16cc:	cf 92       	push	r12
    16ce:	df 92       	push	r13
    16d0:	ef 92       	push	r14
    16d2:	ff 92       	push	r15
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	cd b7       	in	r28, 0x3d	; 61
    16de:	de b7       	in	r29, 0x3e	; 62
    16e0:	6e 97       	sbiw	r28, 0x1e	; 30
    16e2:	cd bf       	out	0x3d, r28	; 61
    16e4:	de bf       	out	0x3e, r29	; 62
	if (status == ESP8266_GET_REQ) {
    16e6:	80 91 6d 2c 	lds	r24, 0x2C6D
    16ea:	87 30       	cpi	r24, 0x07	; 7
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <esp8266_configure_ssid_and_password+0x28>
    16ee:	5a c0       	rjmp	.+180    	; 0x17a4 <esp8266_configure_ssid_and_password+0xdc>
		
		at_cipsend(link_channel,"<!DOCTYPE html>\
    16f0:	10 91 06 20 	lds	r17, 0x2006
{
	uint16_t timeout = 0;
	char number_of_bytes[5];
	char cmd[25];
	
	itoa_simple(number_of_bytes,strlen(str));
    16f4:	4a e8       	ldi	r20, 0x8A	; 138
    16f6:	51 e0       	ldi	r21, 0x01	; 1
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	ce 01       	movw	r24, r28
    16fe:	4a 96       	adiw	r24, 0x1a	; 26
    1700:	90 dd       	rcall	.-1248   	; 0x1222 <itoa_simple>
	//itoa(strlen(str),number_of_bytes,10);
	if (channel == '1') {
    1702:	11 33       	cpi	r17, 0x31	; 49
    1704:	19 f4       	brne	.+6      	; 0x170c <esp8266_configure_ssid_and_password+0x44>
		strcpy(cmd, "AT+CIPSEND=1,");
    1706:	6a ee       	ldi	r22, 0xEA	; 234
    1708:	71 e2       	ldi	r23, 0x21	; 33
    170a:	0c c0       	rjmp	.+24     	; 0x1724 <esp8266_configure_ssid_and_password+0x5c>
	} else if (channel == '2') {
    170c:	12 33       	cpi	r17, 0x32	; 50
    170e:	19 f4       	brne	.+6      	; 0x1716 <esp8266_configure_ssid_and_password+0x4e>
		strcpy(cmd, "AT+CIPSEND=2,");
    1710:	68 ef       	ldi	r22, 0xF8	; 248
    1712:	71 e2       	ldi	r23, 0x21	; 33
    1714:	07 c0       	rjmp	.+14     	; 0x1724 <esp8266_configure_ssid_and_password+0x5c>
	} else if (channel == '3') {
    1716:	13 33       	cpi	r17, 0x33	; 51
    1718:	19 f4       	brne	.+6      	; 0x1720 <esp8266_configure_ssid_and_password+0x58>
		strcpy(cmd, "AT+CIPSEND=3,");
    171a:	66 e0       	ldi	r22, 0x06	; 6
    171c:	72 e2       	ldi	r23, 0x22	; 34
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <esp8266_configure_ssid_and_password+0x5c>
	} else {
		strcpy(cmd, "AT+CIPSEND=0,");
    1720:	64 e1       	ldi	r22, 0x14	; 20
    1722:	72 e2       	ldi	r23, 0x22	; 34
    1724:	ce 01       	movw	r24, r28
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <strcpy>
	}
	strcat(cmd,number_of_bytes);
    172c:	be 01       	movw	r22, r28
    172e:	66 5e       	subi	r22, 0xE6	; 230
    1730:	7f 4f       	sbci	r23, 0xFF	; 255
    1732:	ce 01       	movw	r24, r28
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	0e 94 58 50 	call	0xa0b0	; 0xa0b0 <strcat>

	esp8266_send_cmd(cmd,100);
    173a:	64 e6       	ldi	r22, 0x64	; 100
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	ce 01       	movw	r24, r28
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	ce dd       	rcall	.-1124   	; 0x12e0 <esp8266_send_cmd>
    1744:	83 e3       	ldi	r24, 0x33	; 51
    1746:	90 e0       	ldi	r25, 0x00	; 0
	while((rx_buffer[0] != '>') && (timeout++ < 50)) {
    1748:	20 91 82 29 	lds	r18, 0x2982
    174c:	2e 33       	cpi	r18, 0x3E	; 62
    174e:	69 f0       	breq	.+26     	; 0x176a <esp8266_configure_ssid_and_password+0xa2>
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	51 f0       	breq	.+20     	; 0x176a <esp8266_configure_ssid_and_password+0xa2>
    1756:	2f ef       	ldi	r18, 0xFF	; 255
    1758:	33 ec       	ldi	r19, 0xC3	; 195
    175a:	49 e0       	ldi	r20, 0x09	; 9
    175c:	21 50       	subi	r18, 0x01	; 1
    175e:	30 40       	sbci	r19, 0x00	; 0
    1760:	40 40       	sbci	r20, 0x00	; 0
    1762:	e1 f7       	brne	.-8      	; 0x175c <esp8266_configure_ssid_and_password+0x94>
    1764:	00 c0       	rjmp	.+0      	; 0x1766 <esp8266_configure_ssid_and_password+0x9e>
    1766:	00 00       	nop
    1768:	ef cf       	rjmp	.-34     	; 0x1748 <esp8266_configure_ssid_and_password+0x80>
		_delay_ms(100);
	}
	
	printf("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nConnection: close\r\n\r\n%s\r\n\r\n",str);
    176a:	82 e2       	ldi	r24, 0x22	; 34
    176c:	92 e2       	ldi	r25, 0x22	; 34
    176e:	9f 93       	push	r25
    1770:	8f 93       	push	r24
    1772:	8d ea       	ldi	r24, 0xAD	; 173
    1774:	93 e2       	ldi	r25, 0x23	; 35
    1776:	9f 93       	push	r25
    1778:	8f 93       	push	r24
    177a:	0e 94 a9 50 	call	0xa152	; 0xa152 <printf>
    177e:	8f ef       	ldi	r24, 0xFF	; 255
    1780:	93 ec       	ldi	r25, 0xC3	; 195
    1782:	a9 e0       	ldi	r26, 0x09	; 9
    1784:	81 50       	subi	r24, 0x01	; 1
    1786:	90 40       	sbci	r25, 0x00	; 0
    1788:	a0 40       	sbci	r26, 0x00	; 0
    178a:	e1 f7       	brne	.-8      	; 0x1784 <esp8266_configure_ssid_and_password+0xbc>
    178c:	00 c0       	rjmp	.+0      	; 0x178e <esp8266_configure_ssid_and_password+0xc6>
    178e:	00 00       	nop
	esp8266_send_cmd("Connection: close",0);
	esp8266_send_cmd(str,0);
	*/
	_delay_ms(100);
	
	esp8266_send_cmd("AT+CIPSTO=5",100);
    1790:	64 e6       	ldi	r22, 0x64	; 100
    1792:	70 e0       	ldi	r23, 0x00	; 0
    1794:	83 ef       	ldi	r24, 0xF3	; 243
    1796:	93 e2       	ldi	r25, 0x23	; 35
    1798:	a3 dd       	rcall	.-1210   	; 0x12e0 <esp8266_send_cmd>
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <esp8266_configure_ssid_and_password+0xe0>
		</form>\
		<p>Input network name (SSID) and password for your router. Then click submit.</p>\
		</body>\
		</html>");
		
	} else if(status == ESP8266_POST_REQ) {
    17a4:	88 30       	cpi	r24, 0x08	; 8
    17a6:	11 f0       	breq	.+4      	; 0x17ac <esp8266_configure_ssid_and_password+0xe4>
#endif
				return ESP8266_TIMEOUT;
			}	
		}
	}
	return ESP8266_SUCCESS;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	a0 c0       	rjmp	.+320    	; 0x18ec <esp8266_configure_ssid_and_password+0x224>
		</form>\
		<p>Input network name (SSID) and password for your router. Then click submit.</p>\
		</body>\
		</html>");
		
	} else if(status == ESP8266_POST_REQ) {
    17ac:	0f e1       	ldi	r16, 0x1F	; 31
    17ae:	10 e0       	ldi	r17, 0x00	; 0
    17b0:	01 50       	subi	r16, 0x01	; 1
    17b2:	11 09       	sbc	r17, r1
		uint16_t timeout = 0;	
		while(timeout++ < 30) {
    17b4:	01 15       	cp	r16, r1
    17b6:	11 05       	cpc	r17, r1
    17b8:	b9 f3       	breq	.-18     	; 0x17a8 <esp8266_configure_ssid_and_password+0xe0>
    17ba:	bf ef       	ldi	r27, 0xFF	; 255
    17bc:	e3 ec       	ldi	r30, 0xC3	; 195
    17be:	f9 e0       	ldi	r31, 0x09	; 9
    17c0:	b1 50       	subi	r27, 0x01	; 1
    17c2:	e0 40       	sbci	r30, 0x00	; 0
    17c4:	f0 40       	sbci	r31, 0x00	; 0
    17c6:	e1 f7       	brne	.-8      	; 0x17c0 <esp8266_configure_ssid_and_password+0xf8>
    17c8:	00 c0       	rjmp	.+0      	; 0x17ca <esp8266_configure_ssid_and_password+0x102>
    17ca:	00 00       	nop
			_delay_ms(100);
			if (strstr(rx_buffer,"my_password") != NULL) {
    17cc:	6f ef       	ldi	r22, 0xFF	; 255
    17ce:	73 e2       	ldi	r23, 0x23	; 35
    17d0:	82 e8       	ldi	r24, 0x82	; 130
    17d2:	99 e2       	ldi	r25, 0x29	; 41
    17d4:	0e 94 8f 50 	call	0xa11e	; 0xa11e <strstr>
    17d8:	89 2b       	or	r24, r25
    17da:	51 f3       	breq	.-44     	; 0x17b0 <esp8266_configure_ssid_and_password+0xe8>
				
				uint8_t ssid_len = sizeof(env.wifi_ssid);
				uint8_t pass_len = sizeof(env.wifi_pswd);
				
				memset(env.wifi_ssid,0,ssid_len);
    17dc:	89 e1       	ldi	r24, 0x19	; 25
    17de:	eb e4       	ldi	r30, 0x4B	; 75
    17e0:	fb e2       	ldi	r31, 0x2B	; 43
    17e2:	df 01       	movw	r26, r30
    17e4:	28 2f       	mov	r18, r24
    17e6:	1d 92       	st	X+, r1
    17e8:	2a 95       	dec	r18
    17ea:	e9 f7       	brne	.-6      	; 0x17e6 <esp8266_configure_ssid_and_password+0x11e>
				memset(env.wifi_pswd,0,pass_len);
    17ec:	e2 e3       	ldi	r30, 0x32	; 50
    17ee:	fb e2       	ldi	r31, 0x2B	; 43
    17f0:	df 01       	movw	r26, r30
    17f2:	1d 92       	st	X+, r1
    17f4:	8a 95       	dec	r24
    17f6:	e9 f7       	brne	.-6      	; 0x17f2 <esp8266_configure_ssid_and_password+0x12a>
				
				uint16_t len = strlen(rx_buffer);
    17f8:	e2 e8       	ldi	r30, 0x82	; 130
    17fa:	f9 e2       	ldi	r31, 0x29	; 41
    17fc:	df 01       	movw	r26, r30
    17fe:	0d 90       	ld	r0, X+
    1800:	00 20       	and	r0, r0
    1802:	e9 f7       	brne	.-6      	; 0x17fe <esp8266_configure_ssid_and_password+0x136>
    1804:	fd 01       	movw	r30, r26
    1806:	31 97       	sbiw	r30, 0x01	; 1
    1808:	9f 01       	movw	r18, r30
    180a:	22 58       	subi	r18, 0x82	; 130
    180c:	39 42       	sbci	r19, 0x29	; 41
    180e:	69 01       	movw	r12, r18
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
    1810:	00 e0       	ldi	r16, 0x00	; 0
    1812:	10 e0       	ldi	r17, 0x00	; 0
				
				memset(env.wifi_ssid,0,ssid_len);
				memset(env.wifi_pswd,0,pass_len);
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
    1814:	a1 2c       	mov	r10, r1
				for (uint16_t i = 0; i < len; i++) {
					if(rx_buffer[i] == '=') {
						n++;
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
    1816:	34 e1       	ldi	r19, 0x14	; 20
    1818:	b3 2e       	mov	r11, r19
    181a:	ce 01       	movw	r24, r28
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	7c 01       	movw	r14, r24
				memset(env.wifi_pswd,0,pass_len);
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
    1820:	0c 15       	cp	r16, r12
    1822:	1d 05       	cpc	r17, r13
    1824:	08 f0       	brcs	.+2      	; 0x1828 <esp8266_configure_ssid_and_password+0x160>
    1826:	3f c0       	rjmp	.+126    	; 0x18a6 <esp8266_configure_ssid_and_password+0x1de>
					if(rx_buffer[i] == '=') {
    1828:	f8 01       	movw	r30, r16
    182a:	ee 57       	subi	r30, 0x7E	; 126
    182c:	f6 4d       	sbci	r31, 0xD6	; 214
    182e:	80 81       	ld	r24, Z
    1830:	8d 33       	cpi	r24, 0x3D	; 61
    1832:	b1 f5       	brne	.+108    	; 0x18a0 <esp8266_configure_ssid_and_password+0x1d8>
						n++;
    1834:	a3 94       	inc	r10
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
    1836:	d7 01       	movw	r26, r14
    1838:	eb 2d       	mov	r30, r11
    183a:	1d 92       	st	X+, r1
    183c:	ea 95       	dec	r30
    183e:	e9 f7       	brne	.-6      	; 0x183a <esp8266_configure_ssid_and_password+0x172>
    1840:	f7 01       	movw	r30, r14
						while ((rx_buffer[++i] != '&') && (i != len)) {
    1842:	0f 5f       	subi	r16, 0xFF	; 255
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	d8 01       	movw	r26, r16
    1848:	ae 57       	subi	r26, 0x7E	; 126
    184a:	b6 4d       	sbci	r27, 0xD6	; 214
    184c:	8c 91       	ld	r24, X
    184e:	86 32       	cpi	r24, 0x26	; 38
    1850:	21 f4       	brne	.+8      	; 0x185a <esp8266_configure_ssid_and_password+0x192>
							temp[j++] = rx_buffer[i];
						}
						if (n == 1) {
    1852:	f1 e0       	ldi	r31, 0x01	; 1
    1854:	af 12       	cpse	r10, r31
    1856:	13 c0       	rjmp	.+38     	; 0x187e <esp8266_configure_ssid_and_password+0x1b6>
    1858:	05 c0       	rjmp	.+10     	; 0x1864 <esp8266_configure_ssid_and_password+0x19c>
					if(rx_buffer[i] == '=') {
						n++;
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
						while ((rx_buffer[++i] != '&') && (i != len)) {
    185a:	0c 15       	cp	r16, r12
    185c:	1d 05       	cpc	r17, r13
    185e:	c9 f3       	breq	.-14     	; 0x1852 <esp8266_configure_ssid_and_password+0x18a>
							temp[j++] = rx_buffer[i];
    1860:	81 93       	st	Z+, r24
    1862:	ef cf       	rjmp	.-34     	; 0x1842 <esp8266_configure_ssid_and_password+0x17a>
						}
						if (n == 1) {
							if (strlen(temp) < ssid_len)
    1864:	f7 01       	movw	r30, r14
    1866:	01 90       	ld	r0, Z+
    1868:	00 20       	and	r0, r0
    186a:	e9 f7       	brne	.-6      	; 0x1866 <esp8266_configure_ssid_and_password+0x19e>
    186c:	31 97       	sbiw	r30, 0x01	; 1
    186e:	ee 19       	sub	r30, r14
    1870:	ff 09       	sbc	r31, r15
    1872:	79 97       	sbiw	r30, 0x19	; 25
    1874:	a8 f4       	brcc	.+42     	; 0x18a0 <esp8266_configure_ssid_and_password+0x1d8>
								strcpy(env.wifi_ssid,temp);
    1876:	b7 01       	movw	r22, r14
    1878:	8b e4       	ldi	r24, 0x4B	; 75
    187a:	9b e2       	ldi	r25, 0x2B	; 43
    187c:	0f c0       	rjmp	.+30     	; 0x189c <esp8266_configure_ssid_and_password+0x1d4>
						} else if (n == 2) {
    187e:	22 e0       	ldi	r18, 0x02	; 2
    1880:	a2 12       	cpse	r10, r18
    1882:	0e c0       	rjmp	.+28     	; 0x18a0 <esp8266_configure_ssid_and_password+0x1d8>
							if (strlen(temp) < pass_len)
    1884:	f7 01       	movw	r30, r14
    1886:	01 90       	ld	r0, Z+
    1888:	00 20       	and	r0, r0
    188a:	e9 f7       	brne	.-6      	; 0x1886 <esp8266_configure_ssid_and_password+0x1be>
    188c:	31 97       	sbiw	r30, 0x01	; 1
    188e:	ee 19       	sub	r30, r14
    1890:	ff 09       	sbc	r31, r15
    1892:	79 97       	sbiw	r30, 0x19	; 25
    1894:	28 f4       	brcc	.+10     	; 0x18a0 <esp8266_configure_ssid_and_password+0x1d8>
								strcpy(env.wifi_pswd,temp);
    1896:	b7 01       	movw	r22, r14
    1898:	82 e3       	ldi	r24, 0x32	; 50
    189a:	9b e2       	ldi	r25, 0x2B	; 43
    189c:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <strcpy>
				memset(env.wifi_pswd,0,pass_len);
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
    18a0:	0f 5f       	subi	r16, 0xFF	; 255
    18a2:	1f 4f       	sbci	r17, 0xFF	; 255
    18a4:	bd cf       	rjmp	.-134    	; 0x1820 <esp8266_configure_ssid_and_password+0x158>
								strcpy(env.wifi_pswd,temp);
						} 
					}
				}

				esp8266_off();
    18a6:	43 dd       	rcall	.-1402   	; 0x132e <esp8266_off>
    18a8:	3f ef       	ldi	r19, 0xFF	; 255
    18aa:	47 ea       	ldi	r20, 0xA7	; 167
    18ac:	81 e6       	ldi	r24, 0x61	; 97
    18ae:	31 50       	subi	r19, 0x01	; 1
    18b0:	40 40       	sbci	r20, 0x00	; 0
    18b2:	80 40       	sbci	r24, 0x00	; 0
    18b4:	e1 f7       	brne	.-8      	; 0x18ae <esp8266_configure_ssid_and_password+0x1e6>
    18b6:	00 c0       	rjmp	.+0      	; 0x18b8 <esp8266_configure_ssid_and_password+0x1f0>
    18b8:	00 00       	nop
				_delay_ms(1000);
				esp8266_on();
    18ba:	2a dd       	rcall	.-1452   	; 0x1310 <esp8266_on>

				status = esp8266_setup();
    18bc:	3e dd       	rcall	.-1412   	; 0x133a <esp8266_setup>
    18be:	80 93 6d 2c 	sts	0x2C6D, r24
				if (status != ESP8266_SUCCESS) {
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	21 f0       	breq	.+8      	; 0x18ce <esp8266_configure_ssid_and_password+0x206>
#ifdef SHOW_MANUAL
					display_print_scrolling_text("COULD NOT JOIN AP",false);
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	8b e0       	ldi	r24, 0x0B	; 11
    18ca:	94 e2       	ldi	r25, 0x24	; 36
    18cc:	0c c0       	rjmp	.+24     	; 0x18e6 <esp8266_configure_ssid_and_password+0x21e>
#endif
					return ESP8266_TIMEOUT;
				}
				
				status = esp8266_join_ap(env.wifi_ssid,env.wifi_pswd);
    18ce:	62 e3       	ldi	r22, 0x32	; 50
    18d0:	7b e2       	ldi	r23, 0x2B	; 43
    18d2:	8b e4       	ldi	r24, 0x4B	; 75
    18d4:	9b e2       	ldi	r25, 0x2B	; 43
    18d6:	56 dd       	rcall	.-1364   	; 0x1384 <esp8266_join_ap>
    18d8:	80 93 6d 2c 	sts	0x2C6D, r24
				if (status != ESP8266_SUCCESS) {
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	99 f7       	brne	.-26     	; 0x18c6 <esp8266_configure_ssid_and_password+0x1fe>
					display_print_scrolling_text("COULD NOT JOIN AP",false);
#endif
					return ESP8266_TIMEOUT;
				}
#ifdef SHOW_MANUAL
				display_print_scrolling_text("WIFI CONFIGURED",false);
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	8d e1       	ldi	r24, 0x1D	; 29
    18e4:	94 e2       	ldi	r25, 0x24	; 36
    18e6:	0e 94 a3 22 	call	0x4546	; 0x4546 <display_print_scrolling_text>
#endif
				return ESP8266_TIMEOUT;
    18ea:	83 e0       	ldi	r24, 0x03	; 3
			}	
		}
	}
	return ESP8266_SUCCESS;
}
    18ec:	6e 96       	adiw	r28, 0x1e	; 30
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	ff 90       	pop	r15
    18fc:	ef 90       	pop	r14
    18fe:	df 90       	pop	r13
    1900:	cf 90       	pop	r12
    1902:	bf 90       	pop	r11
    1904:	af 90       	pop	r10
    1906:	08 95       	ret

00001908 <__vector_88>:

ISR(USARTD0_RXC_vect) 
{
    1908:	1f 92       	push	r1
    190a:	0f 92       	push	r0
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	0f 92       	push	r0
    1910:	11 24       	eor	r1, r1
    1912:	0b b6       	in	r0, 0x3b	; 59
    1914:	0f 92       	push	r0
    1916:	2f 93       	push	r18
    1918:	3f 93       	push	r19
    191a:	4f 93       	push	r20
    191c:	5f 93       	push	r21
    191e:	6f 93       	push	r22
    1920:	7f 93       	push	r23
    1922:	8f 93       	push	r24
    1924:	9f 93       	push	r25
    1926:	af 93       	push	r26
    1928:	bf 93       	push	r27
    192a:	ef 93       	push	r30
    192c:	ff 93       	push	r31
	char rx_temp = USARTD0.DATA;
    192e:	40 91 a0 09 	lds	r20, 0x09A0
	
	if (rx_temp == '\n') {
    1932:	4a 30       	cpi	r20, 0x0A	; 10
    1934:	09 f0       	breq	.+2      	; 0x1938 <__vector_88+0x30>
    1936:	84 c0       	rjmp	.+264    	; 0x1a40 <__vector_88+0x138>
		if (strstr(rx_buffer,"OK") || strstr(rx_buffer,"ready")) {
    1938:	6d e2       	ldi	r22, 0x2D	; 45
    193a:	74 e2       	ldi	r23, 0x24	; 36
    193c:	82 e8       	ldi	r24, 0x82	; 130
    193e:	99 e2       	ldi	r25, 0x29	; 41
    1940:	0e 94 8f 50 	call	0xa11e	; 0xa11e <strstr>
    1944:	89 2b       	or	r24, r25
    1946:	41 f4       	brne	.+16     	; 0x1958 <__vector_88+0x50>
    1948:	60 e3       	ldi	r22, 0x30	; 48
    194a:	74 e2       	ldi	r23, 0x24	; 36
    194c:	82 e8       	ldi	r24, 0x82	; 130
    194e:	99 e2       	ldi	r25, 0x29	; 41
    1950:	0e 94 8f 50 	call	0xa11e	; 0xa11e <strstr>
    1954:	89 2b       	or	r24, r25
    1956:	11 f0       	breq	.+4      	; 0x195c <__vector_88+0x54>
			status = ESP8266_SUCCESS;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	14 c0       	rjmp	.+40     	; 0x1984 <__vector_88+0x7c>
		} else if (strstr(rx_buffer,"ERROR")) {
    195c:	66 e3       	ldi	r22, 0x36	; 54
    195e:	74 e2       	ldi	r23, 0x24	; 36
    1960:	82 e8       	ldi	r24, 0x82	; 130
    1962:	99 e2       	ldi	r25, 0x29	; 41
    1964:	0e 94 8f 50 	call	0xa11e	; 0xa11e <strstr>
    1968:	89 2b       	or	r24, r25
    196a:	19 f0       	breq	.+6      	; 0x1972 <__vector_88+0x6a>
			status = ESP8266_ERROR;
    196c:	10 92 6d 2c 	sts	0x2C6D, r1
    1970:	4f c0       	rjmp	.+158    	; 0x1a10 <__vector_88+0x108>
		} else if (strstr(rx_buffer,"CONNECT")) {
    1972:	6c e3       	ldi	r22, 0x3C	; 60
    1974:	74 e2       	ldi	r23, 0x24	; 36
    1976:	82 e8       	ldi	r24, 0x82	; 130
    1978:	99 e2       	ldi	r25, 0x29	; 41
    197a:	0e 94 8f 50 	call	0xa11e	; 0xa11e <strstr>
    197e:	89 2b       	or	r24, r25
    1980:	21 f0       	breq	.+8      	; 0x198a <__vector_88+0x82>
			status = ESP8266_CONNECT;
    1982:	84 e0       	ldi	r24, 0x04	; 4
    1984:	80 93 6d 2c 	sts	0x2C6D, r24
    1988:	43 c0       	rjmp	.+134    	; 0x1a10 <__vector_88+0x108>
		} else if (strstr(rx_buffer,"CLOSED")) {
    198a:	64 e4       	ldi	r22, 0x44	; 68
    198c:	74 e2       	ldi	r23, 0x24	; 36
    198e:	82 e8       	ldi	r24, 0x82	; 130
    1990:	99 e2       	ldi	r25, 0x29	; 41
    1992:	0e 94 8f 50 	call	0xa11e	; 0xa11e <strstr>
    1996:	89 2b       	or	r24, r25
    1998:	11 f0       	breq	.+4      	; 0x199e <__vector_88+0x96>
			status = ESP8266_CLOSED;
    199a:	86 e0       	ldi	r24, 0x06	; 6
    199c:	f3 cf       	rjmp	.-26     	; 0x1984 <__vector_88+0x7c>
		} else if (strstr(rx_buffer,"GET")) {
    199e:	6b e4       	ldi	r22, 0x4B	; 75
    19a0:	74 e2       	ldi	r23, 0x24	; 36
    19a2:	82 e8       	ldi	r24, 0x82	; 130
    19a4:	99 e2       	ldi	r25, 0x29	; 41
    19a6:	0e 94 8f 50 	call	0xa11e	; 0xa11e <strstr>
    19aa:	89 2b       	or	r24, r25
    19ac:	31 f0       	breq	.+12     	; 0x19ba <__vector_88+0xb2>
			link_channel = rx_buffer[5];
    19ae:	80 91 87 29 	lds	r24, 0x2987
    19b2:	80 93 06 20 	sts	0x2006, r24
			status = ESP8266_GET_REQ;
    19b6:	87 e0       	ldi	r24, 0x07	; 7
    19b8:	e5 cf       	rjmp	.-54     	; 0x1984 <__vector_88+0x7c>
		} else if (strstr(rx_buffer,"POST")) {
    19ba:	6f e4       	ldi	r22, 0x4F	; 79
    19bc:	74 e2       	ldi	r23, 0x24	; 36
    19be:	82 e8       	ldi	r24, 0x82	; 130
    19c0:	99 e2       	ldi	r25, 0x29	; 41
    19c2:	0e 94 8f 50 	call	0xa11e	; 0xa11e <strstr>
    19c6:	89 2b       	or	r24, r25
    19c8:	11 f0       	breq	.+4      	; 0x19ce <__vector_88+0xc6>
			status = ESP8266_POST_REQ;
    19ca:	88 e0       	ldi	r24, 0x08	; 8
    19cc:	db cf       	rjmp	.-74     	; 0x1984 <__vector_88+0x7c>
		} else if (strstr(rx_buffer,"192")) {
    19ce:	64 e5       	ldi	r22, 0x54	; 84
    19d0:	74 e2       	ldi	r23, 0x24	; 36
    19d2:	82 e8       	ldi	r24, 0x82	; 130
    19d4:	99 e2       	ldi	r25, 0x29	; 41
    19d6:	0e 94 8f 50 	call	0xa11e	; 0xa11e <strstr>
    19da:	89 2b       	or	r24, r25
    19dc:	71 f0       	breq	.+28     	; 0x19fa <__vector_88+0xf2>
			strncpy(ip_address,strchr(rx_buffer,'\"'),19);
    19de:	62 e2       	ldi	r22, 0x22	; 34
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	82 e8       	ldi	r24, 0x82	; 130
    19e4:	99 e2       	ldi	r25, 0x29	; 41
    19e6:	0e 94 63 50 	call	0xa0c6	; 0xa0c6 <strchr>
    19ea:	43 e1       	ldi	r20, 0x13	; 19
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	bc 01       	movw	r22, r24
    19f0:	88 e3       	ldi	r24, 0x38	; 56
    19f2:	9c e2       	ldi	r25, 0x2C	; 44
    19f4:	0e 94 75 50 	call	0xa0ea	; 0xa0ea <strncpy>
    19f8:	0b c0       	rjmp	.+22     	; 0x1a10 <__vector_88+0x108>
		} else if (strstr(rx_buffer,"wdt")) {
    19fa:	68 e5       	ldi	r22, 0x58	; 88
    19fc:	74 e2       	ldi	r23, 0x24	; 36
    19fe:	82 e8       	ldi	r24, 0x82	; 130
    1a00:	99 e2       	ldi	r25, 0x29	; 41
    1a02:	0e 94 8f 50 	call	0xa11e	; 0xa11e <strstr>
    1a06:	89 2b       	or	r24, r25
    1a08:	19 f0       	breq	.+6      	; 0x1a10 <__vector_88+0x108>
			wdt_triggered = true;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	80 93 7f 2a 	sts	0x2A7F, r24
		}
		 
		if (strstr(rx_buffer,"{")) {
    1a10:	6b e7       	ldi	r22, 0x7B	; 123
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	82 e8       	ldi	r24, 0x82	; 130
    1a16:	99 e2       	ldi	r25, 0x29	; 41
    1a18:	0e 94 63 50 	call	0xa0c6	; 0xa0c6 <strchr>
    1a1c:	89 2b       	or	r24, r25
    1a1e:	21 f0       	breq	.+8      	; 0x1a28 <__vector_88+0x120>
			json_found = true;	
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	80 93 7e 2a 	sts	0x2A7E, r24
    1a26:	26 c0       	rjmp	.+76     	; 0x1a74 <__vector_88+0x16c>
		} else {
			//Flush buffer
			rx_ptr = 0;
    1a28:	10 92 7c 2a 	sts	0x2A7C, r1
    1a2c:	10 92 7d 2a 	sts	0x2A7D, r1
			memset(rx_buffer, 0, RX_BUFFER);	
    1a30:	8a ef       	ldi	r24, 0xFA	; 250
    1a32:	e2 e8       	ldi	r30, 0x82	; 130
    1a34:	f9 e2       	ldi	r31, 0x29	; 41
    1a36:	df 01       	movw	r26, r30
    1a38:	1d 92       	st	X+, r1
    1a3a:	8a 95       	dec	r24
    1a3c:	e9 f7       	brne	.-6      	; 0x1a38 <__vector_88+0x130>
    1a3e:	1a c0       	rjmp	.+52     	; 0x1a74 <__vector_88+0x16c>
		}
	} else {
		rx_buffer[rx_ptr++] = rx_temp;
    1a40:	80 91 7c 2a 	lds	r24, 0x2A7C
    1a44:	90 91 7d 2a 	lds	r25, 0x2A7D
    1a48:	9c 01       	movw	r18, r24
    1a4a:	2f 5f       	subi	r18, 0xFF	; 255
    1a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4e:	20 93 7c 2a 	sts	0x2A7C, r18
    1a52:	30 93 7d 2a 	sts	0x2A7D, r19
    1a56:	fc 01       	movw	r30, r24
    1a58:	ee 57       	subi	r30, 0x7E	; 126
    1a5a:	f6 4d       	sbci	r31, 0xD6	; 214
    1a5c:	40 83       	st	Z, r20
		
		//Buffer overflow guard
		if (rx_ptr == RX_BUFFER) {
    1a5e:	80 91 7c 2a 	lds	r24, 0x2A7C
    1a62:	90 91 7d 2a 	lds	r25, 0x2A7D
    1a66:	8a 3f       	cpi	r24, 0xFA	; 250
    1a68:	91 05       	cpc	r25, r1
    1a6a:	21 f4       	brne	.+8      	; 0x1a74 <__vector_88+0x16c>
			rx_ptr = 0;
    1a6c:	10 92 7c 2a 	sts	0x2A7C, r1
    1a70:	10 92 7d 2a 	sts	0x2A7D, r1
		}
	}
    1a74:	ff 91       	pop	r31
    1a76:	ef 91       	pop	r30
    1a78:	bf 91       	pop	r27
    1a7a:	af 91       	pop	r26
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0b be       	out	0x3b, r0	; 59
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	0f 90       	pop	r0
    1a96:	1f 90       	pop	r1
    1a98:	18 95       	reti

00001a9a <ht1632c_set_pixel>:
void ht1632c_blink(bool blink_on) 
{	
	if (blink_on) {
		ht1632c_write_command(HT1632_BLINK_ON);	
	} else {
		ht1632c_write_command(HT1632_BLINK_OFF);	
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	23 e0       	ldi	r18, 0x03	; 3
    1a9e:	f6 95       	lsr	r31
    1aa0:	e7 95       	ror	r30
    1aa2:	2a 95       	dec	r18
    1aa4:	e1 f7       	brne	.-8      	; 0x1a9e <ht1632c_set_pixel+0x4>
    1aa6:	e3 5b       	subi	r30, 0xB3	; 179
    1aa8:	f3 4d       	sbci	r31, 0xD3	; 211
    1aaa:	87 70       	andi	r24, 0x07	; 7
    1aac:	99 27       	eor	r25, r25
    1aae:	21 e0       	ldi	r18, 0x01	; 1
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <ht1632c_set_pixel+0x1c>
    1ab4:	22 0f       	add	r18, r18
    1ab6:	8a 95       	dec	r24
    1ab8:	ea f7       	brpl	.-6      	; 0x1ab4 <ht1632c_set_pixel+0x1a>
    1aba:	80 81       	ld	r24, Z
    1abc:	82 2b       	or	r24, r18
    1abe:	80 83       	st	Z, r24
    1ac0:	08 95       	ret

00001ac2 <ht1632c_clr_pixel>:
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	33 e0       	ldi	r19, 0x03	; 3
    1ac6:	f6 95       	lsr	r31
    1ac8:	e7 95       	ror	r30
    1aca:	3a 95       	dec	r19
    1acc:	e1 f7       	brne	.-8      	; 0x1ac6 <ht1632c_clr_pixel+0x4>
    1ace:	e3 5b       	subi	r30, 0xB3	; 179
    1ad0:	f3 4d       	sbci	r31, 0xD3	; 211
    1ad2:	87 70       	andi	r24, 0x07	; 7
    1ad4:	99 27       	eor	r25, r25
    1ad6:	21 e0       	ldi	r18, 0x01	; 1
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <ht1632c_clr_pixel+0x1c>
    1adc:	22 0f       	add	r18, r18
    1ade:	8a 95       	dec	r24
    1ae0:	ea f7       	brpl	.-6      	; 0x1adc <ht1632c_clr_pixel+0x1a>
    1ae2:	20 95       	com	r18
    1ae4:	80 81       	ld	r24, Z
    1ae6:	28 23       	and	r18, r24
    1ae8:	20 83       	st	Z, r18
    1aea:	08 95       	ret

00001aec <ht1632c_clear_screen>:
    1aec:	ed e4       	ldi	r30, 0x4D	; 77
    1aee:	fc e2       	ldi	r31, 0x2C	; 44
    1af0:	11 92       	st	Z+, r1
    1af2:	8c e2       	ldi	r24, 0x2C	; 44
    1af4:	ed 36       	cpi	r30, 0x6D	; 109
    1af6:	f8 07       	cpc	r31, r24
    1af8:	d9 f7       	brne	.-10     	; 0x1af0 <ht1632c_clear_screen+0x4>
    1afa:	0c 94 d2 1f 	jmp	0x3fa4	; 0x3fa4 <display_refresh_screen>

00001afe <ht1632c_clear_buffer>:
    1afe:	ed e4       	ldi	r30, 0x4D	; 77
    1b00:	fc e2       	ldi	r31, 0x2C	; 44
    1b02:	11 92       	st	Z+, r1
    1b04:	8c e2       	ldi	r24, 0x2C	; 44
    1b06:	ed 36       	cpi	r30, 0x6D	; 109
    1b08:	f8 07       	cpc	r31, r24
    1b0a:	d9 f7       	brne	.-10     	; 0x1b02 <ht1632c_clear_buffer+0x4>
    1b0c:	08 95       	ret

00001b0e <ht1632c_write_data>:
    1b0e:	28 e0       	ldi	r18, 0x08	; 8
    1b10:	20 93 81 06 	sts	0x0681, r18
    1b14:	74 e0       	ldi	r23, 0x04	; 4
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	e8 e0       	ldi	r30, 0x08	; 8
    1b1c:	66 23       	and	r22, r22
    1b1e:	c1 f0       	breq	.+48     	; 0x1b50 <ht1632c_write_data+0x42>
    1b20:	70 93 86 06 	sts	0x0686, r23
    1b24:	2f ef       	ldi	r18, 0xFF	; 255
    1b26:	26 0f       	add	r18, r22
    1b28:	da 01       	movw	r26, r20
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <ht1632c_write_data+0x22>
    1b2c:	aa 0f       	add	r26, r26
    1b2e:	bb 1f       	adc	r27, r27
    1b30:	2a 95       	dec	r18
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <ht1632c_write_data+0x1e>
    1b34:	9d 01       	movw	r18, r26
    1b36:	28 23       	and	r18, r24
    1b38:	39 23       	and	r19, r25
    1b3a:	23 2b       	or	r18, r19
    1b3c:	19 f0       	breq	.+6      	; 0x1b44 <ht1632c_write_data+0x36>
    1b3e:	e0 93 85 06 	sts	0x0685, r30
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <ht1632c_write_data+0x3a>
    1b44:	e0 93 86 06 	sts	0x0686, r30
    1b48:	70 93 85 06 	sts	0x0685, r23
    1b4c:	61 50       	subi	r22, 0x01	; 1
    1b4e:	e6 cf       	rjmp	.-52     	; 0x1b1c <ht1632c_write_data+0xe>
    1b50:	88 e0       	ldi	r24, 0x08	; 8
    1b52:	80 93 86 06 	sts	0x0686, r24
    1b56:	08 95       	ret

00001b58 <ht1632c_refresh_screen>:
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	80 93 86 06 	sts	0x0686, r24
    1b62:	63 e0       	ldi	r22, 0x03	; 3
    1b64:	85 e0       	ldi	r24, 0x05	; 5
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	d2 df       	rcall	.-92     	; 0x1b0e <ht1632c_write_data>
    1b6a:	67 e0       	ldi	r22, 0x07	; 7
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	ce df       	rcall	.-100    	; 0x1b0e <ht1632c_write_data>
    1b72:	ce e4       	ldi	r28, 0x4E	; 78
    1b74:	dc e2       	ldi	r29, 0x2C	; 44
    1b76:	fe 01       	movw	r30, r28
    1b78:	31 97       	sbiw	r30, 0x01	; 1
    1b7a:	80 81       	ld	r24, Z
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	98 2f       	mov	r25, r24
    1b80:	88 27       	eor	r24, r24
    1b82:	28 81       	ld	r18, Y
    1b84:	60 e1       	ldi	r22, 0x10	; 16
    1b86:	82 2b       	or	r24, r18
    1b88:	c2 df       	rcall	.-124    	; 0x1b0e <ht1632c_write_data>
    1b8a:	22 96       	adiw	r28, 0x02	; 2
    1b8c:	8c e2       	ldi	r24, 0x2C	; 44
    1b8e:	ce 36       	cpi	r28, 0x6E	; 110
    1b90:	d8 07       	cpc	r29, r24
    1b92:	89 f7       	brne	.-30     	; 0x1b76 <ht1632c_refresh_screen+0x1e>
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	80 93 85 06 	sts	0x0685, r24
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	08 95       	ret

00001ba0 <ht1632c_write_command>:
    1ba0:	1f 93       	push	r17
    1ba2:	cf 93       	push	r28
    1ba4:	df 93       	push	r29
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	94 60       	ori	r25, 0x04	; 4
    1baa:	c0 e8       	ldi	r28, 0x80	; 128
    1bac:	d6 e0       	ldi	r29, 0x06	; 6
    1bae:	11 e0       	ldi	r17, 0x01	; 1
    1bb0:	1e 83       	std	Y+6, r17	; 0x06
    1bb2:	6c e0       	ldi	r22, 0x0C	; 12
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	aa df       	rcall	.-172    	; 0x1b0e <ht1632c_write_data>
    1bba:	1d 83       	std	Y+5, r17	; 0x05
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	1f 91       	pop	r17
    1bc2:	08 95       	ret

00001bc4 <ht1632c_setup>:
    1bc4:	cf 93       	push	r28
    1bc6:	c8 2f       	mov	r28, r24
    1bc8:	e0 e8       	ldi	r30, 0x80	; 128
    1bca:	f6 e0       	ldi	r31, 0x06	; 6
    1bcc:	8d e0       	ldi	r24, 0x0D	; 13
    1bce:	81 83       	std	Z+1, r24	; 0x01
    1bd0:	85 e0       	ldi	r24, 0x05	; 5
    1bd2:	85 83       	std	Z+5, r24	; 0x05
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	e4 df       	rcall	.-56     	; 0x1ba0 <ht1632c_write_command>
    1bd8:	83 e0       	ldi	r24, 0x03	; 3
    1bda:	e2 df       	rcall	.-60     	; 0x1ba0 <ht1632c_write_command>
    1bdc:	88 e0       	ldi	r24, 0x08	; 8
    1bde:	e0 df       	rcall	.-64     	; 0x1ba0 <ht1632c_write_command>
    1be0:	84 e1       	ldi	r24, 0x14	; 20
    1be2:	de df       	rcall	.-68     	; 0x1ba0 <ht1632c_write_command>
    1be4:	88 e1       	ldi	r24, 0x18	; 24
    1be6:	dc df       	rcall	.-72     	; 0x1ba0 <ht1632c_write_command>
    1be8:	8c 2f       	mov	r24, r28
    1bea:	da df       	rcall	.-76     	; 0x1ba0 <ht1632c_write_command>
    1bec:	81 ea       	ldi	r24, 0xA1	; 161
    1bee:	cf 91       	pop	r28
    1bf0:	d7 cf       	rjmp	.-82     	; 0x1ba0 <ht1632c_write_command>

00001bf2 <ht1632c_set_brightness>:
    1bf2:	87 fd       	sbrc	r24, 7
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	80 31       	cpi	r24, 0x10	; 16
    1bf8:	0c f0       	brlt	.+2      	; 0x1bfc <ht1632c_set_brightness+0xa>
    1bfa:	8f e0       	ldi	r24, 0x0F	; 15
    1bfc:	80 6a       	ori	r24, 0xA0	; 160
    1bfe:	d0 cf       	rjmp	.-96     	; 0x1ba0 <ht1632c_write_command>

00001c00 <ht1632c_shift_left>:

void ht1632c_shift_left(void) 
{
	int8_t i;
	
	display_refresh_screen();
    1c00:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
    1c04:	2f ef       	ldi	r18, 0xFF	; 255
    1c06:	89 ef       	ldi	r24, 0xF9	; 249
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	21 50       	subi	r18, 0x01	; 1
    1c0c:	80 40       	sbci	r24, 0x00	; 0
    1c0e:	90 40       	sbci	r25, 0x00	; 0
    1c10:	e1 f7       	brne	.-8      	; 0x1c0a <ht1632c_shift_left+0xa>
    1c12:	00 c0       	rjmp	.+0      	; 0x1c14 <ht1632c_shift_left+0x14>
    1c14:	00 00       	nop
    1c16:	ef e4       	ldi	r30, 0x4F	; 79
    1c18:	fc e2       	ldi	r31, 0x2C	; 44
	_delay_ms(10);
	
	for (i = 0; i <= 30; i += 2) {
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
		if (i == 14) {
    1c1c:	8e 30       	cpi	r24, 0x0E	; 14
    1c1e:	29 f4       	brne	.+10     	; 0x1c2a <ht1632c_shift_left+0x2a>
			ledmatrix[14] = ledmatrix[1];
    1c20:	90 91 4e 2c 	lds	r25, 0x2C4E
    1c24:	90 93 5b 2c 	sts	0x2C5B, r25
    1c28:	0b c0       	rjmp	.+22     	; 0x1c40 <ht1632c_shift_left+0x40>
		} else if(i == 30) {
    1c2a:	8e 31       	cpi	r24, 0x1E	; 30
    1c2c:	29 f4       	brne	.+10     	; 0x1c38 <ht1632c_shift_left+0x38>
			ledmatrix[30] = ledmatrix[17];
    1c2e:	90 91 5e 2c 	lds	r25, 0x2C5E
    1c32:	90 93 6b 2c 	sts	0x2C6B, r25
    1c36:	04 c0       	rjmp	.+8      	; 0x1c40 <ht1632c_shift_left+0x40>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    1c38:	90 81       	ld	r25, Z
    1c3a:	df 01       	movw	r26, r30
    1c3c:	12 97       	sbiw	r26, 0x02	; 2
    1c3e:	9c 93       	st	X, r25
    1c40:	8e 5f       	subi	r24, 0xFE	; 254
    1c42:	32 96       	adiw	r30, 0x02	; 2
	int8_t i;
	
	display_refresh_screen();
	_delay_ms(10);
	
	for (i = 0; i <= 30; i += 2) {
    1c44:	80 32       	cpi	r24, 0x20	; 32
    1c46:	51 f7       	brne	.-44     	; 0x1c1c <ht1632c_shift_left+0x1c>
    1c48:	e0 e5       	ldi	r30, 0x50	; 80
    1c4a:	fc e2       	ldi	r31, 0x2C	; 44
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
		if (i == 15) {
    1c4e:	8f 30       	cpi	r24, 0x0F	; 15
    1c50:	19 f4       	brne	.+6      	; 0x1c58 <ht1632c_shift_left+0x58>
			ledmatrix[15] = 0;
    1c52:	10 92 5c 2c 	sts	0x2C5C, r1
    1c56:	09 c0       	rjmp	.+18     	; 0x1c6a <ht1632c_shift_left+0x6a>
		} else if (i == 31) {
    1c58:	8f 31       	cpi	r24, 0x1F	; 31
    1c5a:	19 f4       	brne	.+6      	; 0x1c62 <ht1632c_shift_left+0x62>
			ledmatrix[31] = 0;
    1c5c:	10 92 6c 2c 	sts	0x2C6C, r1
    1c60:	04 c0       	rjmp	.+8      	; 0x1c6a <ht1632c_shift_left+0x6a>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    1c62:	90 81       	ld	r25, Z
    1c64:	df 01       	movw	r26, r30
    1c66:	12 97       	sbiw	r26, 0x02	; 2
    1c68:	9c 93       	st	X, r25
    1c6a:	8e 5f       	subi	r24, 0xFE	; 254
    1c6c:	32 96       	adiw	r30, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
    1c6e:	81 32       	cpi	r24, 0x21	; 33
    1c70:	71 f7       	brne	.-36     	; 0x1c4e <ht1632c_shift_left+0x4e>
			ledmatrix[31] = 0;
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
}
    1c72:	08 95       	ret

00001c74 <ht1632c_shift_right>:

void ht1632c_shift_right(void) 
{	
	int8_t i;
	
	display_refresh_screen();
    1c74:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
    1c78:	2f ef       	ldi	r18, 0xFF	; 255
    1c7a:	89 ef       	ldi	r24, 0xF9	; 249
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	21 50       	subi	r18, 0x01	; 1
    1c80:	80 40       	sbci	r24, 0x00	; 0
    1c82:	90 40       	sbci	r25, 0x00	; 0
    1c84:	e1 f7       	brne	.-8      	; 0x1c7e <ht1632c_shift_right+0xa>
    1c86:	00 c0       	rjmp	.+0      	; 0x1c88 <ht1632c_shift_right+0x14>
    1c88:	00 00       	nop
    1c8a:	ec e6       	ldi	r30, 0x6C	; 108
    1c8c:	fc e2       	ldi	r31, 0x2C	; 44
	_delay_ms(10);
	
	for (i = 31; i > 0; i -= 2) {
    1c8e:	8f e1       	ldi	r24, 0x1F	; 31
    1c90:	df 01       	movw	r26, r30
    1c92:	12 97       	sbiw	r26, 0x02	; 2
		if (i == 1) {
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	29 f4       	brne	.+10     	; 0x1ca2 <ht1632c_shift_right+0x2e>
			ledmatrix[1] = ledmatrix[14];
    1c98:	90 91 5b 2c 	lds	r25, 0x2C5B
    1c9c:	90 93 4e 2c 	sts	0x2C4E, r25
    1ca0:	09 c0       	rjmp	.+18     	; 0x1cb4 <ht1632c_shift_right+0x40>
		} else if(i == 17) {
    1ca2:	81 31       	cpi	r24, 0x11	; 17
    1ca4:	29 f4       	brne	.+10     	; 0x1cb0 <ht1632c_shift_right+0x3c>
			ledmatrix[17] = ledmatrix[30];
    1ca6:	90 91 6b 2c 	lds	r25, 0x2C6B
    1caa:	90 93 5e 2c 	sts	0x2C5E, r25
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <ht1632c_shift_right+0x40>
		} else {
			ledmatrix[i] = ledmatrix[i-2];
    1cb0:	9c 91       	ld	r25, X
    1cb2:	90 83       	st	Z, r25
    1cb4:	82 50       	subi	r24, 0x02	; 2
    1cb6:	fd 01       	movw	r30, r26
	int8_t i;
	
	display_refresh_screen();
	_delay_ms(10);
	
	for (i = 31; i > 0; i -= 2) {
    1cb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1cba:	51 f7       	brne	.-44     	; 0x1c90 <ht1632c_shift_right+0x1c>
    1cbc:	eb e6       	ldi	r30, 0x6B	; 107
    1cbe:	fc e2       	ldi	r31, 0x2C	; 44
    1cc0:	8e e1       	ldi	r24, 0x1E	; 30
    1cc2:	df 01       	movw	r26, r30
    1cc4:	12 97       	sbiw	r26, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	for (i = 30; i >= 0; i -= 2) {
		if (i == 0) {
    1cc6:	81 11       	cpse	r24, r1
    1cc8:	03 c0       	rjmp	.+6      	; 0x1cd0 <ht1632c_shift_right+0x5c>
			ledmatrix[0] = 0;
    1cca:	10 92 4d 2c 	sts	0x2C4D, r1
    1cce:	07 c0       	rjmp	.+14     	; 0x1cde <ht1632c_shift_right+0x6a>
		} else if(i == 16) {
    1cd0:	80 31       	cpi	r24, 0x10	; 16
    1cd2:	19 f4       	brne	.+6      	; 0x1cda <ht1632c_shift_right+0x66>
			ledmatrix[16] = 0;
    1cd4:	10 92 5d 2c 	sts	0x2C5D, r1
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <ht1632c_shift_right+0x6a>
		} else {
			ledmatrix[i] = ledmatrix[i-2];
    1cda:	9c 91       	ld	r25, X
    1cdc:	90 83       	st	Z, r25
    1cde:	82 50       	subi	r24, 0x02	; 2
    1ce0:	fd 01       	movw	r30, r26
			ledmatrix[17] = ledmatrix[30];
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	for (i = 30; i >= 0; i -= 2) {
    1ce2:	8e 3f       	cpi	r24, 0xFE	; 254
    1ce4:	71 f7       	brne	.-36     	; 0x1cc2 <ht1632c_shift_right+0x4e>
			ledmatrix[16] = 0;
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
}
    1ce6:	08 95       	ret

00001ce8 <ht1632c_shift_up>:

void ht1632c_shift_up(void) 
{
    1ce8:	ad e4       	ldi	r26, 0x4D	; 77
    1cea:	bc e2       	ldi	r27, 0x2C	; 44
    1cec:	ed e5       	ldi	r30, 0x5D	; 93
    1cee:	fc e2       	ldi	r31, 0x2C	; 44
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
		temp_top = ledmatrix[i];
		temp_bottom = ledmatrix[i+16];
		temp = (temp_top << 8) | (temp_bottom);
    1cf0:	8c 91       	ld	r24, X
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	98 2f       	mov	r25, r24
    1cf6:	88 27       	eor	r24, r24
    1cf8:	20 81       	ld	r18, Z
    1cfa:	82 2b       	or	r24, r18
		temp <<= 1;
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
		ledmatrix[i] = (temp >> 8);
    1d00:	9d 93       	st	X+, r25
		ledmatrix[i+16] = temp;
    1d02:	81 93       	st	Z+, r24
	uint8_t temp_bottom;
	uint16_t temp;
	
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
    1d04:	2c e2       	ldi	r18, 0x2C	; 44
    1d06:	ec 36       	cpi	r30, 0x6C	; 108
    1d08:	f2 07       	cpc	r31, r18
    1d0a:	91 f7       	brne	.-28     	; 0x1cf0 <ht1632c_shift_up+0x8>
		temp <<= 1;
		ledmatrix[i] = (temp >> 8);
		ledmatrix[i+16] = temp;
	}
	
	display_refresh_screen();
    1d0c:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
    1d10:	8f ef       	ldi	r24, 0xFF	; 255
    1d12:	99 ef       	ldi	r25, 0xF9	; 249
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	81 50       	subi	r24, 0x01	; 1
    1d18:	90 40       	sbci	r25, 0x00	; 0
    1d1a:	20 40       	sbci	r18, 0x00	; 0
    1d1c:	e1 f7       	brne	.-8      	; 0x1d16 <ht1632c_shift_up+0x2e>
    1d1e:	00 c0       	rjmp	.+0      	; 0x1d20 <ht1632c_shift_up+0x38>
    1d20:	00 00       	nop
    1d22:	08 95       	ret

00001d24 <ht1632c_shift_down>:
	_delay_ms(10);
}

void ht1632c_shift_down(void) 
{
    1d24:	ad e4       	ldi	r26, 0x4D	; 77
    1d26:	bc e2       	ldi	r27, 0x2C	; 44
    1d28:	ed e5       	ldi	r30, 0x5D	; 93
    1d2a:	fc e2       	ldi	r31, 0x2C	; 44
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
		temp_top = ledmatrix[i];
		temp_bottom = ledmatrix[i+16];
		temp = (temp_top << 8) | (temp_bottom);
    1d2c:	8c 91       	ld	r24, X
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	98 2f       	mov	r25, r24
    1d32:	88 27       	eor	r24, r24
    1d34:	20 81       	ld	r18, Z
    1d36:	82 2b       	or	r24, r18
		temp >>= 1;
    1d38:	96 95       	lsr	r25
    1d3a:	87 95       	ror	r24
		ledmatrix[i] = (temp >> 8);
    1d3c:	9d 93       	st	X+, r25
		ledmatrix[i+16] = temp;
    1d3e:	81 93       	st	Z+, r24
	uint8_t temp_bottom;
	uint16_t temp;
	
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
    1d40:	2c e2       	ldi	r18, 0x2C	; 44
    1d42:	ec 36       	cpi	r30, 0x6C	; 108
    1d44:	f2 07       	cpc	r31, r18
    1d46:	91 f7       	brne	.-28     	; 0x1d2c <ht1632c_shift_down+0x8>
		temp >>= 1;
		ledmatrix[i] = (temp >> 8);
		ledmatrix[i+16] = temp;
	}
	
	display_refresh_screen();
    1d48:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	99 ef       	ldi	r25, 0xF9	; 249
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	81 50       	subi	r24, 0x01	; 1
    1d54:	90 40       	sbci	r25, 0x00	; 0
    1d56:	20 40       	sbci	r18, 0x00	; 0
    1d58:	e1 f7       	brne	.-8      	; 0x1d52 <ht1632c_shift_down+0x2e>
    1d5a:	00 c0       	rjmp	.+0      	; 0x1d5c <ht1632c_shift_down+0x38>
    1d5c:	00 00       	nop
    1d5e:	08 95       	ret

00001d60 <ht1632c_slide_in_from_left>:
}

/*------------------------------SLIDE FUNCTIONS------------------------------*/

void ht1632c_slide_in_from_left(void) 
{
    1d60:	ef 92       	push	r14
    1d62:	ff 92       	push	r15
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	a0 97       	sbiw	r28, 0x20	; 32
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    1d76:	80 e2       	ldi	r24, 0x20	; 32
    1d78:	de 01       	movw	r26, r28
    1d7a:	11 96       	adiw	r26, 0x01	; 1
    1d7c:	fd 01       	movw	r30, r26
    1d7e:	98 2f       	mov	r25, r24
    1d80:	11 92       	st	Z+, r1
    1d82:	9a 95       	dec	r25
    1d84:	e9 f7       	brne	.-6      	; 0x1d80 <ht1632c_slide_in_from_left+0x20>
	memcpy(temp,ledmatrix,32);
    1d86:	ed e4       	ldi	r30, 0x4D	; 77
    1d88:	fc e2       	ldi	r31, 0x2C	; 44
    1d8a:	98 2f       	mov	r25, r24
    1d8c:	01 90       	ld	r0, Z+
    1d8e:	0d 92       	st	X+, r0
    1d90:	9a 95       	dec	r25
    1d92:	e1 f7       	brne	.-8      	; 0x1d8c <ht1632c_slide_in_from_left+0x2c>
	memset(ledmatrix,0,32);
    1d94:	ed e4       	ldi	r30, 0x4D	; 77
    1d96:	fc e2       	ldi	r31, 0x2C	; 44
    1d98:	df 01       	movw	r26, r30
    1d9a:	1d 92       	st	X+, r1
    1d9c:	8a 95       	dec	r24
    1d9e:	e9 f7       	brne	.-6      	; 0x1d9a <ht1632c_slide_in_from_left+0x3a>
    1da0:	8e 01       	movw	r16, r28
    1da2:	00 5e       	subi	r16, 0xE0	; 224
    1da4:	1f 4f       	sbci	r17, 0xFF	; 255
    1da6:	7e 01       	movw	r14, r28
    1da8:	b0 e1       	ldi	r27, 0x10	; 16
    1daa:	eb 0e       	add	r14, r27
    1dac:	f1 1c       	adc	r15, r1
    1dae:	f8 01       	movw	r30, r16
    1db0:	70 97       	sbiw	r30, 0x10	; 16
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2) {
		ledmatrix[0] = temp[i-16];
    1db2:	80 81       	ld	r24, Z
    1db4:	80 93 4d 2c 	sts	0x2C4D, r24
		ledmatrix[16] = temp[i];
    1db8:	f8 01       	movw	r30, r16
    1dba:	80 81       	ld	r24, Z
    1dbc:	80 93 5d 2c 	sts	0x2C5D, r24
		ht1632c_shift_right();
    1dc0:	59 df       	rcall	.-334    	; 0x1c74 <ht1632c_shift_right>
    1dc2:	02 50       	subi	r16, 0x02	; 2
    1dc4:	11 09       	sbc	r17, r1
	memcpy(temp,ledmatrix,32);
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2) {
    1dc6:	0e 15       	cp	r16, r14
    1dc8:	1f 05       	cpc	r17, r15
    1dca:	89 f7       	brne	.-30     	; 0x1dae <ht1632c_slide_in_from_left+0x4e>
    1dcc:	8e 01       	movw	r16, r28
    1dce:	01 5e       	subi	r16, 0xE1	; 225
    1dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd2:	6e e1       	ldi	r22, 0x1E	; 30
    1dd4:	f6 2e       	mov	r15, r22
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	70 97       	sbiw	r30, 0x10	; 16
		ledmatrix[16] = temp[i];
		ht1632c_shift_right();
	}
	
	for (i = 30; i >= 16; i -= 2) {
		ledmatrix[0] = temp[i-16];
    1dda:	80 81       	ld	r24, Z
    1ddc:	80 93 4d 2c 	sts	0x2C4D, r24
		ledmatrix[16] = temp[i];
    1de0:	d8 01       	movw	r26, r16
    1de2:	8c 91       	ld	r24, X
    1de4:	80 93 5d 2c 	sts	0x2C5D, r24
		if (i == 16) {
    1de8:	b0 e1       	ldi	r27, 0x10	; 16
    1dea:	fb 12       	cpse	r15, r27
    1dec:	03 c0       	rjmp	.+6      	; 0x1df4 <ht1632c_slide_in_from_left+0x94>
			display_refresh_screen();
    1dee:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <ht1632c_slide_in_from_left+0x96>
		} else {
			ht1632c_shift_right();
    1df4:	3f df       	rcall	.-386    	; 0x1c74 <ht1632c_shift_right>
    1df6:	fa 94       	dec	r15
    1df8:	fa 94       	dec	r15
    1dfa:	02 50       	subi	r16, 0x02	; 2
    1dfc:	11 09       	sbc	r17, r1
		ledmatrix[0] = temp[i-16];
		ledmatrix[16] = temp[i];
		ht1632c_shift_right();
	}
	
	for (i = 30; i >= 16; i -= 2) {
    1dfe:	ee e0       	ldi	r30, 0x0E	; 14
    1e00:	fe 12       	cpse	r15, r30
    1e02:	e9 cf       	rjmp	.-46     	; 0x1dd6 <ht1632c_slide_in_from_left+0x76>
			display_refresh_screen();
		} else {
			ht1632c_shift_right();
		}
	}
}
    1e04:	a0 96       	adiw	r28, 0x20	; 32
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	1f 91       	pop	r17
    1e10:	0f 91       	pop	r16
    1e12:	ff 90       	pop	r15
    1e14:	ef 90       	pop	r14
    1e16:	08 95       	ret

00001e18 <ht1632c_slide_in_from_right>:

void ht1632c_slide_in_from_right(void) 
{
    1e18:	ef 92       	push	r14
    1e1a:	ff 92       	push	r15
    1e1c:	0f 93       	push	r16
    1e1e:	1f 93       	push	r17
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	a0 97       	sbiw	r28, 0x20	; 32
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    1e2e:	80 e2       	ldi	r24, 0x20	; 32
    1e30:	de 01       	movw	r26, r28
    1e32:	11 96       	adiw	r26, 0x01	; 1
    1e34:	fd 01       	movw	r30, r26
    1e36:	98 2f       	mov	r25, r24
    1e38:	11 92       	st	Z+, r1
    1e3a:	9a 95       	dec	r25
    1e3c:	e9 f7       	brne	.-6      	; 0x1e38 <ht1632c_slide_in_from_right+0x20>
	memcpy(temp,ledmatrix,32);
    1e3e:	ed e4       	ldi	r30, 0x4D	; 77
    1e40:	fc e2       	ldi	r31, 0x2C	; 44
    1e42:	98 2f       	mov	r25, r24
    1e44:	01 90       	ld	r0, Z+
    1e46:	0d 92       	st	X+, r0
    1e48:	9a 95       	dec	r25
    1e4a:	e1 f7       	brne	.-8      	; 0x1e44 <ht1632c_slide_in_from_right+0x2c>
	memset(ledmatrix,0,32);
    1e4c:	ed e4       	ldi	r30, 0x4D	; 77
    1e4e:	fc e2       	ldi	r31, 0x2C	; 44
    1e50:	df 01       	movw	r26, r30
    1e52:	1d 92       	st	X+, r1
    1e54:	8a 95       	dec	r24
    1e56:	e9 f7       	brne	.-6      	; 0x1e52 <ht1632c_slide_in_from_right+0x3a>
    1e58:	8e 01       	movw	r16, r28
    1e5a:	0f 5e       	subi	r16, 0xEF	; 239
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	7e 01       	movw	r14, r28
    1e60:	b1 e2       	ldi	r27, 0x21	; 33
    1e62:	eb 0e       	add	r14, r27
    1e64:	f1 1c       	adc	r15, r1
    1e66:	f8 01       	movw	r30, r16
    1e68:	70 97       	sbiw	r30, 0x10	; 16
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
	{
		ledmatrix[15] = temp[i];
    1e6a:	80 81       	ld	r24, Z
    1e6c:	80 93 5c 2c 	sts	0x2C5C, r24
		ledmatrix[31] = temp[i+16];
    1e70:	f8 01       	movw	r30, r16
    1e72:	80 81       	ld	r24, Z
    1e74:	80 93 6c 2c 	sts	0x2C6C, r24
		ht1632c_shift_left();
    1e78:	c3 de       	rcall	.-634    	; 0x1c00 <ht1632c_shift_left>
    1e7a:	0e 5f       	subi	r16, 0xFE	; 254
    1e7c:	1f 4f       	sbci	r17, 0xFF	; 255
	memcpy(temp,ledmatrix,32);
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
    1e7e:	0e 15       	cp	r16, r14
    1e80:	1f 05       	cpc	r17, r15
    1e82:	89 f7       	brne	.-30     	; 0x1e66 <ht1632c_slide_in_from_right+0x4e>
    1e84:	8e 01       	movw	r16, r28
    1e86:	0e 5e       	subi	r16, 0xEE	; 238
    1e88:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8a:	ff 24       	eor	r15, r15
    1e8c:	f3 94       	inc	r15
    1e8e:	f8 01       	movw	r30, r16
    1e90:	70 97       	sbiw	r30, 0x10	; 16
		ht1632c_shift_left();
	}
	
	for (i = 1; i <= 15; i += 2)
	{
		ledmatrix[15] = temp[i];
    1e92:	80 81       	ld	r24, Z
    1e94:	80 93 5c 2c 	sts	0x2C5C, r24
		ledmatrix[31] = temp[i+16];
    1e98:	d8 01       	movw	r26, r16
    1e9a:	8c 91       	ld	r24, X
    1e9c:	80 93 6c 2c 	sts	0x2C6C, r24
	
		if (i == 15) {
    1ea0:	bf e0       	ldi	r27, 0x0F	; 15
    1ea2:	fb 12       	cpse	r15, r27
    1ea4:	03 c0       	rjmp	.+6      	; 0x1eac <ht1632c_slide_in_from_right+0x94>
			display_refresh_screen();
    1ea6:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
    1eaa:	01 c0       	rjmp	.+2      	; 0x1eae <ht1632c_slide_in_from_right+0x96>
		} else {
			ht1632c_shift_left();
    1eac:	a9 de       	rcall	.-686    	; 0x1c00 <ht1632c_shift_left>
    1eae:	f3 94       	inc	r15
    1eb0:	f3 94       	inc	r15
    1eb2:	0e 5f       	subi	r16, 0xFE	; 254
    1eb4:	1f 4f       	sbci	r17, 0xFF	; 255
		ledmatrix[15] = temp[i];
		ledmatrix[31] = temp[i+16];
		ht1632c_shift_left();
	}
	
	for (i = 1; i <= 15; i += 2)
    1eb6:	e1 e1       	ldi	r30, 0x11	; 17
    1eb8:	fe 12       	cpse	r15, r30
    1eba:	e9 cf       	rjmp	.-46     	; 0x1e8e <ht1632c_slide_in_from_right+0x76>
			display_refresh_screen();
		} else {
			ht1632c_shift_left();
		}
	}
}
    1ebc:	a0 96       	adiw	r28, 0x20	; 32
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	08 95       	ret

00001ed0 <ht1632c_slide_in_from_bottom>:

void ht1632c_slide_in_from_bottom(void) 
{
    1ed0:	4f 92       	push	r4
    1ed2:	5f 92       	push	r5
    1ed4:	7f 92       	push	r7
    1ed6:	8f 92       	push	r8
    1ed8:	9f 92       	push	r9
    1eda:	af 92       	push	r10
    1edc:	bf 92       	push	r11
    1ede:	cf 92       	push	r12
    1ee0:	df 92       	push	r13
    1ee2:	ef 92       	push	r14
    1ee4:	ff 92       	push	r15
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	cd b7       	in	r28, 0x3d	; 61
    1ef0:	de b7       	in	r29, 0x3e	; 62
    1ef2:	a0 97       	sbiw	r28, 0x20	; 32
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    1ef8:	80 e2       	ldi	r24, 0x20	; 32
    1efa:	de 01       	movw	r26, r28
    1efc:	11 96       	adiw	r26, 0x01	; 1
    1efe:	fd 01       	movw	r30, r26
    1f00:	98 2f       	mov	r25, r24
    1f02:	11 92       	st	Z+, r1
    1f04:	9a 95       	dec	r25
    1f06:	e9 f7       	brne	.-6      	; 0x1f02 <ht1632c_slide_in_from_bottom+0x32>
	memcpy(temp,ledmatrix,32);
    1f08:	ed e4       	ldi	r30, 0x4D	; 77
    1f0a:	fc e2       	ldi	r31, 0x2C	; 44
    1f0c:	98 2f       	mov	r25, r24
    1f0e:	01 90       	ld	r0, Z+
    1f10:	0d 92       	st	X+, r0
    1f12:	9a 95       	dec	r25
    1f14:	e1 f7       	brne	.-8      	; 0x1f0e <ht1632c_slide_in_from_bottom+0x3e>
	memset(ledmatrix,0,32);
    1f16:	ed e4       	ldi	r30, 0x4D	; 77
    1f18:	fc e2       	ldi	r31, 0x2C	; 44
    1f1a:	df 01       	movw	r26, r30
    1f1c:	1d 92       	st	X+, r1
    1f1e:	8a 95       	dec	r24
    1f20:	e9 f7       	brne	.-6      	; 0x1f1c <ht1632c_slide_in_from_bottom+0x4c>
    1f22:	00 e0       	ldi	r16, 0x00	; 0
    1f24:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
			if (row < 8) {
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
    1f26:	70 e8       	ldi	r23, 0x80	; 128
    1f28:	e7 2e       	mov	r14, r23
    1f2a:	f1 2c       	mov	r15, r1
    1f2c:	ef e0       	ldi	r30, 0x0F	; 15
    1f2e:	ae 2e       	mov	r10, r30
    1f30:	b1 2c       	mov	r11, r1
    1f32:	f7 e0       	ldi	r31, 0x07	; 7
    1f34:	cf 2e       	mov	r12, r31
    1f36:	d1 2c       	mov	r13, r1
    1f38:	a7 01       	movw	r20, r14
    1f3a:	00 2e       	mov	r0, r16
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <ht1632c_slide_in_from_bottom+0x72>
    1f3e:	55 95       	asr	r21
    1f40:	47 95       	ror	r20
    1f42:	0a 94       	dec	r0
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <ht1632c_slide_in_from_bottom+0x6e>
    1f46:	98 01       	movw	r18, r16
    1f48:	28 50       	subi	r18, 0x08	; 8
    1f4a:	31 09       	sbc	r19, r1
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
    1f4c:	d7 01       	movw	r26, r14
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <ht1632c_slide_in_from_bottom+0x84>
    1f50:	b5 95       	asr	r27
    1f52:	a7 95       	ror	r26
    1f54:	2a 95       	dec	r18
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <ht1632c_slide_in_from_bottom+0x80>
    1f58:	9d 01       	movw	r18, r26
    1f5a:	ed e5       	ldi	r30, 0x5D	; 93
    1f5c:	fc e2       	ldi	r31, 0x2C	; 44
    1f5e:	ce 01       	movw	r24, r28
    1f60:	41 96       	adiw	r24, 0x11	; 17
    1f62:	2c 01       	movw	r4, r24
    1f64:	70 2e       	mov	r7, r16
    1f66:	b5 01       	movw	r22, r10
    1f68:	60 1b       	sub	r22, r16
    1f6a:	71 0b       	sbc	r23, r17
    1f6c:	46 01       	movw	r8, r12
    1f6e:	80 1a       	sub	r8, r16
    1f70:	91 0a       	sbc	r9, r17
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
			if (row < 8) {
    1f72:	b7 e0       	ldi	r27, 0x07	; 7
    1f74:	b7 15       	cp	r27, r7
    1f76:	70 f0       	brcs	.+28     	; 0x1f94 <ht1632c_slide_in_from_bottom+0xc4>
    1f78:	c2 01       	movw	r24, r4
    1f7a:	40 97       	sbiw	r24, 0x10	; 16
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	8c 91       	ld	r24, X
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	84 23       	and	r24, r20
    1f84:	95 23       	and	r25, r21
    1f86:	08 2c       	mov	r0, r8
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <ht1632c_slide_in_from_bottom+0xbe>
    1f8a:	95 95       	asr	r25
    1f8c:	87 95       	ror	r24
    1f8e:	0a 94       	dec	r0
    1f90:	e2 f7       	brpl	.-8      	; 0x1f8a <ht1632c_slide_in_from_bottom+0xba>
    1f92:	0b c0       	rjmp	.+22     	; 0x1faa <ht1632c_slide_in_from_bottom+0xda>
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
    1f94:	d2 01       	movw	r26, r4
    1f96:	8c 91       	ld	r24, X
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	82 23       	and	r24, r18
    1f9c:	93 23       	and	r25, r19
    1f9e:	06 2e       	mov	r0, r22
    1fa0:	02 c0       	rjmp	.+4      	; 0x1fa6 <ht1632c_slide_in_from_bottom+0xd6>
    1fa2:	95 95       	asr	r25
    1fa4:	87 95       	ror	r24
    1fa6:	0a 94       	dec	r0
    1fa8:	e2 f7       	brpl	.-8      	; 0x1fa2 <ht1632c_slide_in_from_bottom+0xd2>
    1faa:	90 81       	ld	r25, Z
    1fac:	98 2b       	or	r25, r24
    1fae:	90 83       	st	Z, r25
    1fb0:	31 96       	adiw	r30, 0x01	; 1
    1fb2:	bf ef       	ldi	r27, 0xFF	; 255
    1fb4:	4b 1a       	sub	r4, r27
    1fb6:	5b 0a       	sbc	r5, r27
	
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
    1fb8:	8c e2       	ldi	r24, 0x2C	; 44
    1fba:	ec 36       	cpi	r30, 0x6C	; 108
    1fbc:	f8 07       	cpc	r31, r24
    1fbe:	c9 f6       	brne	.-78     	; 0x1f72 <ht1632c_slide_in_from_bottom+0xa2>
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
			}
		}
		if (row < 15) {
    1fc0:	9f e0       	ldi	r25, 0x0F	; 15
    1fc2:	79 16       	cp	r7, r25
    1fc4:	11 f0       	breq	.+4      	; 0x1fca <ht1632c_slide_in_from_bottom+0xfa>
			ht1632c_shift_up();
    1fc6:	90 de       	rcall	.-736    	; 0x1ce8 <ht1632c_shift_up>
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <ht1632c_slide_in_from_bottom+0xfe>
			} else {
			display_refresh_screen();
    1fca:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
    1fce:	0f 5f       	subi	r16, 0xFF	; 255
    1fd0:	1f 4f       	sbci	r17, 0xFF	; 255
	memset(ledmatrix,0,32);
	
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
    1fd2:	00 31       	cpi	r16, 0x10	; 16
    1fd4:	11 05       	cpc	r17, r1
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <ht1632c_slide_in_from_bottom+0x10a>
    1fd8:	af cf       	rjmp	.-162    	; 0x1f38 <ht1632c_slide_in_from_bottom+0x68>
			ht1632c_shift_up();
			} else {
			display_refresh_screen();
		}
	}
}
    1fda:	a0 96       	adiw	r28, 0x20	; 32
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	ff 90       	pop	r15
    1fea:	ef 90       	pop	r14
    1fec:	df 90       	pop	r13
    1fee:	cf 90       	pop	r12
    1ff0:	bf 90       	pop	r11
    1ff2:	af 90       	pop	r10
    1ff4:	9f 90       	pop	r9
    1ff6:	8f 90       	pop	r8
    1ff8:	7f 90       	pop	r7
    1ffa:	5f 90       	pop	r5
    1ffc:	4f 90       	pop	r4
    1ffe:	08 95       	ret

00002000 <ht1632c_slide_in_from_top>:

void ht1632c_slide_in_from_top(void) 
{
    2000:	6f 92       	push	r6
    2002:	7f 92       	push	r7
    2004:	8f 92       	push	r8
    2006:	9f 92       	push	r9
    2008:	af 92       	push	r10
    200a:	bf 92       	push	r11
    200c:	cf 92       	push	r12
    200e:	df 92       	push	r13
    2010:	ef 92       	push	r14
    2012:	ff 92       	push	r15
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	a0 97       	sbiw	r28, 0x20	; 32
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    2026:	80 e2       	ldi	r24, 0x20	; 32
    2028:	de 01       	movw	r26, r28
    202a:	11 96       	adiw	r26, 0x01	; 1
    202c:	fd 01       	movw	r30, r26
    202e:	98 2f       	mov	r25, r24
    2030:	11 92       	st	Z+, r1
    2032:	9a 95       	dec	r25
    2034:	e9 f7       	brne	.-6      	; 0x2030 <ht1632c_slide_in_from_top+0x30>
	memcpy(temp,ledmatrix,32);
    2036:	ed e4       	ldi	r30, 0x4D	; 77
    2038:	fc e2       	ldi	r31, 0x2C	; 44
    203a:	98 2f       	mov	r25, r24
    203c:	01 90       	ld	r0, Z+
    203e:	0d 92       	st	X+, r0
    2040:	9a 95       	dec	r25
    2042:	e1 f7       	brne	.-8      	; 0x203c <ht1632c_slide_in_from_top+0x3c>
	memset(ledmatrix,0,32);
    2044:	ed e4       	ldi	r30, 0x4D	; 77
    2046:	fc e2       	ldi	r31, 0x2C	; 44
    2048:	df 01       	movw	r26, r30
    204a:	1d 92       	st	X+, r1
    204c:	8a 95       	dec	r24
    204e:	e9 f7       	brne	.-6      	; 0x204a <ht1632c_slide_in_from_top+0x4a>
    2050:	0f e0       	ldi	r16, 0x0F	; 15
    2052:	10 e0       	ldi	r17, 0x00	; 0
    2054:	af e0       	ldi	r26, 0x0F	; 15
    2056:	aa 2e       	mov	r10, r26
    2058:	b1 2c       	mov	r11, r1
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
			if (row > 7) {
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
    205a:	ee 24       	eor	r14, r14
    205c:	e3 94       	inc	r14
    205e:	f1 2c       	mov	r15, r1
    2060:	87 e0       	ldi	r24, 0x07	; 7
    2062:	c8 2e       	mov	r12, r24
    2064:	d1 2c       	mov	r13, r1
    2066:	a5 01       	movw	r20, r10
    2068:	40 1b       	sub	r20, r16
    206a:	51 0b       	sbc	r21, r17
    206c:	d7 01       	movw	r26, r14
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <ht1632c_slide_in_from_top+0x74>
    2070:	aa 0f       	add	r26, r26
    2072:	bb 1f       	adc	r27, r27
    2074:	4a 95       	dec	r20
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <ht1632c_slide_in_from_top+0x70>
    2078:	ad 01       	movw	r20, r26
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
    207a:	90 2e       	mov	r9, r16
    207c:	96 01       	movw	r18, r12
    207e:	20 1b       	sub	r18, r16
    2080:	31 0b       	sbc	r19, r17
    2082:	f7 01       	movw	r30, r14
    2084:	02 c0       	rjmp	.+4      	; 0x208a <ht1632c_slide_in_from_top+0x8a>
    2086:	ee 0f       	add	r30, r30
    2088:	ff 1f       	adc	r31, r31
    208a:	2a 95       	dec	r18
    208c:	e2 f7       	brpl	.-8      	; 0x2086 <ht1632c_slide_in_from_top+0x86>
    208e:	9f 01       	movw	r18, r30
    2090:	ed e4       	ldi	r30, 0x4D	; 77
    2092:	fc e2       	ldi	r31, 0x2C	; 44
    2094:	ce 01       	movw	r24, r28
    2096:	41 96       	adiw	r24, 0x11	; 17
    2098:	3c 01       	movw	r6, r24
    209a:	80 2e       	mov	r8, r16
    209c:	b8 01       	movw	r22, r16
    209e:	68 50       	subi	r22, 0x08	; 8
    20a0:	71 09       	sbc	r23, r1
	int8_t col;
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
			if (row > 7) {
    20a2:	b7 e0       	ldi	r27, 0x07	; 7
    20a4:	b8 15       	cp	r27, r8
    20a6:	5c f4       	brge	.+22     	; 0x20be <ht1632c_slide_in_from_top+0xbe>
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
    20a8:	d3 01       	movw	r26, r6
    20aa:	8c 91       	ld	r24, X
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	84 23       	and	r24, r20
    20b0:	95 23       	and	r25, r21
    20b2:	06 2e       	mov	r0, r22
    20b4:	01 c0       	rjmp	.+2      	; 0x20b8 <ht1632c_slide_in_from_top+0xb8>
    20b6:	88 0f       	add	r24, r24
    20b8:	0a 94       	dec	r0
    20ba:	ea f7       	brpl	.-6      	; 0x20b6 <ht1632c_slide_in_from_top+0xb6>
    20bc:	0c c0       	rjmp	.+24     	; 0x20d6 <ht1632c_slide_in_from_top+0xd6>
    20be:	c3 01       	movw	r24, r6
    20c0:	40 97       	sbiw	r24, 0x10	; 16
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
    20c2:	dc 01       	movw	r26, r24
    20c4:	8c 91       	ld	r24, X
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	82 23       	and	r24, r18
    20ca:	93 23       	and	r25, r19
    20cc:	09 2c       	mov	r0, r9
    20ce:	01 c0       	rjmp	.+2      	; 0x20d2 <ht1632c_slide_in_from_top+0xd2>
    20d0:	88 0f       	add	r24, r24
    20d2:	0a 94       	dec	r0
    20d4:	ea f7       	brpl	.-6      	; 0x20d0 <ht1632c_slide_in_from_top+0xd0>
    20d6:	90 81       	ld	r25, Z
    20d8:	98 2b       	or	r25, r24
    20da:	90 83       	st	Z, r25
    20dc:	31 96       	adiw	r30, 0x01	; 1
    20de:	bf ef       	ldi	r27, 0xFF	; 255
    20e0:	6b 1a       	sub	r6, r27
    20e2:	7b 0a       	sbc	r7, r27
	
	int8_t col;
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
    20e4:	8c e2       	ldi	r24, 0x2C	; 44
    20e6:	ec 35       	cpi	r30, 0x5C	; 92
    20e8:	f8 07       	cpc	r31, r24
    20ea:	d9 f6       	brne	.-74     	; 0x20a2 <ht1632c_slide_in_from_top+0xa2>
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
			}
		}
		if (row > 0) {
    20ec:	88 20       	and	r8, r8
    20ee:	11 f0       	breq	.+4      	; 0x20f4 <ht1632c_slide_in_from_top+0xf4>
			ht1632c_shift_down();
    20f0:	19 de       	rcall	.-974    	; 0x1d24 <ht1632c_shift_down>
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <ht1632c_slide_in_from_top+0xf8>
		} else {
			display_refresh_screen();
    20f4:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
    20f8:	01 50       	subi	r16, 0x01	; 1
    20fa:	11 09       	sbc	r17, r1
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <ht1632c_slide_in_from_top+0x100>
    20fe:	b3 cf       	rjmp	.-154    	; 0x2066 <ht1632c_slide_in_from_top+0x66>
		}
	}
}
    2100:	a0 96       	adiw	r28, 0x20	; 32
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	ff 90       	pop	r15
    2110:	ef 90       	pop	r14
    2112:	df 90       	pop	r13
    2114:	cf 90       	pop	r12
    2116:	bf 90       	pop	r11
    2118:	af 90       	pop	r10
    211a:	9f 90       	pop	r9
    211c:	8f 90       	pop	r8
    211e:	7f 90       	pop	r7
    2120:	6f 90       	pop	r6
    2122:	08 95       	ret

00002124 <ht1632c_print_buffer>:

/*------------------------------PRINT FUNCTIONS------------------------------*/

void ht1632c_print_buffer(char *buffer, uint16_t length) 
{
    2124:	ef 92       	push	r14
    2126:	ff 92       	push	r15
    2128:	0f 93       	push	r16
    212a:	1f 93       	push	r17
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
    2130:	8b 01       	movw	r16, r22
    2132:	ec 01       	movw	r28, r24
    2134:	7c 01       	movw	r14, r24
    2136:	e6 0e       	add	r14, r22
    2138:	f7 1e       	adc	r15, r23
	uint16_t i;
	
	//Shift buffer into visible area
	for (i = 0; i < (length); i++) {
    213a:	ce 15       	cp	r28, r14
    213c:	df 05       	cpc	r29, r15
    213e:	c1 f0       	breq	.+48     	; 0x2170 <ht1632c_print_buffer+0x4c>
		ht1632c_shift_left();
    2140:	5f dd       	rcall	.-1346   	; 0x1c00 <ht1632c_shift_left>
    2142:	fe 01       	movw	r30, r28
		ledmatrix[15] = buffer[i] >> 3;
    2144:	89 91       	ld	r24, Y+
    2146:	86 95       	lsr	r24
    2148:	86 95       	lsr	r24
    214a:	86 95       	lsr	r24
    214c:	80 93 5c 2c 	sts	0x2C5C, r24
		ledmatrix[31] = buffer[i] << 5;
    2150:	80 81       	ld	r24, Z
    2152:	82 95       	swap	r24
    2154:	88 0f       	add	r24, r24
    2156:	80 7e       	andi	r24, 0xE0	; 224
    2158:	80 93 6c 2c 	sts	0x2C6C, r24
    215c:	2f ef       	ldi	r18, 0xFF	; 255
    215e:	80 e7       	ldi	r24, 0x70	; 112
    2160:	92 e0       	ldi	r25, 0x02	; 2
    2162:	21 50       	subi	r18, 0x01	; 1
    2164:	80 40       	sbci	r24, 0x00	; 0
    2166:	90 40       	sbci	r25, 0x00	; 0
    2168:	e1 f7       	brne	.-8      	; 0x2162 <ht1632c_print_buffer+0x3e>
    216a:	00 c0       	rjmp	.+0      	; 0x216c <ht1632c_print_buffer+0x48>
    216c:	00 00       	nop
    216e:	e5 cf       	rjmp	.-54     	; 0x213a <ht1632c_print_buffer+0x16>
		_delay_ms(25);
	}
	
	//Shift buffer out of visible area
	
	if ((length/4) < 15) {
    2170:	0c 33       	cpi	r16, 0x3C	; 60
    2172:	11 05       	cpc	r17, r1
    2174:	38 f0       	brcs	.+14     	; 0x2184 <ht1632c_print_buffer+0x60>
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
			_delay_ms(25);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
    2176:	16 95       	lsr	r17
    2178:	07 95       	ror	r16
    217a:	16 95       	lsr	r17
    217c:	07 95       	ror	r16
    217e:	c0 e0       	ldi	r28, 0x00	; 0
    2180:	d0 e0       	ldi	r29, 0x00	; 0
    2182:	10 c0       	rjmp	.+32     	; 0x21a4 <ht1632c_print_buffer+0x80>
		_delay_ms(25);
	}
	
	//Shift buffer out of visible area
	
	if ((length/4) < 15) {
    2184:	ce e1       	ldi	r28, 0x1E	; 30
    2186:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
    2188:	3b dd       	rcall	.-1418   	; 0x1c00 <ht1632c_shift_left>
    218a:	2f ef       	ldi	r18, 0xFF	; 255
    218c:	80 e7       	ldi	r24, 0x70	; 112
    218e:	92 e0       	ldi	r25, 0x02	; 2
    2190:	21 50       	subi	r18, 0x01	; 1
    2192:	80 40       	sbci	r24, 0x00	; 0
    2194:	90 40       	sbci	r25, 0x00	; 0
    2196:	e1 f7       	brne	.-8      	; 0x2190 <ht1632c_print_buffer+0x6c>
    2198:	00 c0       	rjmp	.+0      	; 0x219a <ht1632c_print_buffer+0x76>
    219a:	00 00       	nop
    219c:	21 97       	sbiw	r28, 0x01	; 1
	}
	
	//Shift buffer out of visible area
	
	if ((length/4) < 15) {
		for (i = 0; i < 30; i++) {
    219e:	20 97       	sbiw	r28, 0x00	; 0
    21a0:	99 f7       	brne	.-26     	; 0x2188 <ht1632c_print_buffer+0x64>
    21a2:	0e c0       	rjmp	.+28     	; 0x21c0 <ht1632c_print_buffer+0x9c>
			ht1632c_shift_left();
			_delay_ms(25);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
			ht1632c_shift_left();
    21a4:	2d dd       	rcall	.-1446   	; 0x1c00 <ht1632c_shift_left>
    21a6:	2f ef       	ldi	r18, 0xFF	; 255
    21a8:	80 e7       	ldi	r24, 0x70	; 112
    21aa:	92 e0       	ldi	r25, 0x02	; 2
    21ac:	21 50       	subi	r18, 0x01	; 1
    21ae:	80 40       	sbci	r24, 0x00	; 0
    21b0:	90 40       	sbci	r25, 0x00	; 0
    21b2:	e1 f7       	brne	.-8      	; 0x21ac <ht1632c_print_buffer+0x88>
    21b4:	00 c0       	rjmp	.+0      	; 0x21b6 <ht1632c_print_buffer+0x92>
    21b6:	00 00       	nop
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
			_delay_ms(25);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
    21b8:	21 96       	adiw	r28, 0x01	; 1
    21ba:	c0 17       	cp	r28, r16
    21bc:	d1 07       	cpc	r29, r17
    21be:	91 f7       	brne	.-28     	; 0x21a4 <ht1632c_print_buffer+0x80>
			ht1632c_shift_left();
			_delay_ms(25);
		}
	}
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	1f 91       	pop	r17
    21c6:	0f 91       	pop	r16
    21c8:	ff 90       	pop	r15
    21ca:	ef 90       	pop	r14
    21cc:	08 95       	ret

000021ce <btn_setup>:
void btn_top_setup(void) 
{	
	PORTC.DIRCLR   |= TOP_BUTTON;
	PORTC.PIN2CTRL |= PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
	PORTC.INT0MASK |= TOP_BUTTON;
	PORTC.INTCTRL  |= PORT_INT0LVL_HI_gc;
    21ce:	90 91 02 06 	lds	r25, 0x0602
    21d2:	90 6e       	ori	r25, 0xE0	; 224
    21d4:	90 93 02 06 	sts	0x0602, r25
    21d8:	90 91 22 06 	lds	r25, 0x0622
    21dc:	91 60       	ori	r25, 0x01	; 1
    21de:	90 93 22 06 	sts	0x0622, r25
    21e2:	88 23       	and	r24, r24
    21e4:	39 f1       	breq	.+78     	; 0x2234 <btn_setup+0x66>
    21e6:	80 91 15 06 	lds	r24, 0x0615
    21ea:	8a 61       	ori	r24, 0x1A	; 26
    21ec:	80 93 15 06 	sts	0x0615, r24
    21f0:	80 91 16 06 	lds	r24, 0x0616
    21f4:	8a 61       	ori	r24, 0x1A	; 26
    21f6:	80 93 16 06 	sts	0x0616, r24
    21fa:	80 91 17 06 	lds	r24, 0x0617
    21fe:	8a 61       	ori	r24, 0x1A	; 26
    2200:	80 93 17 06 	sts	0x0617, r24
    2204:	80 91 30 06 	lds	r24, 0x0630
    2208:	8a 61       	ori	r24, 0x1A	; 26
    220a:	80 93 30 06 	sts	0x0630, r24
    220e:	80 91 0a 06 	lds	r24, 0x060A
    2212:	80 6e       	ori	r24, 0xE0	; 224
    2214:	80 93 0a 06 	sts	0x060A, r24
    2218:	80 91 2a 06 	lds	r24, 0x062A
    221c:	81 60       	ori	r24, 0x01	; 1
    221e:	80 93 2a 06 	sts	0x062A, r24
    2222:	80 91 09 06 	lds	r24, 0x0609
    2226:	83 60       	ori	r24, 0x03	; 3
    2228:	80 93 09 06 	sts	0x0609, r24
    222c:	80 91 29 06 	lds	r24, 0x0629
    2230:	83 60       	ori	r24, 0x03	; 3
    2232:	26 c0       	rjmp	.+76     	; 0x2280 <btn_setup+0xb2>
    2234:	80 91 15 06 	lds	r24, 0x0615
    2238:	8d 7f       	andi	r24, 0xFD	; 253
    223a:	80 93 15 06 	sts	0x0615, r24
    223e:	80 91 16 06 	lds	r24, 0x0616
    2242:	8d 7f       	andi	r24, 0xFD	; 253
    2244:	80 93 16 06 	sts	0x0616, r24
    2248:	80 91 17 06 	lds	r24, 0x0617
    224c:	8d 7f       	andi	r24, 0xFD	; 253
    224e:	80 93 17 06 	sts	0x0617, r24
    2252:	80 91 30 06 	lds	r24, 0x0630
    2256:	8d 7f       	andi	r24, 0xFD	; 253
    2258:	80 93 30 06 	sts	0x0630, r24
    225c:	80 91 0a 06 	lds	r24, 0x060A
    2260:	8f 71       	andi	r24, 0x1F	; 31
    2262:	80 93 0a 06 	sts	0x060A, r24
    2266:	80 91 2a 06 	lds	r24, 0x062A
    226a:	8e 7f       	andi	r24, 0xFE	; 254
    226c:	80 93 2a 06 	sts	0x062A, r24
    2270:	80 91 09 06 	lds	r24, 0x0609
    2274:	8c 7f       	andi	r24, 0xFC	; 252
    2276:	80 93 09 06 	sts	0x0609, r24
    227a:	80 91 29 06 	lds	r24, 0x0629
    227e:	8c 7f       	andi	r24, 0xFC	; 252
    2280:	80 93 29 06 	sts	0x0629, r24
    2284:	08 95       	ret

00002286 <btn_si114x_enable_interrupt>:
    2286:	e0 e0       	ldi	r30, 0x00	; 0
    2288:	f6 e0       	ldi	r31, 0x06	; 6
    228a:	82 81       	ldd	r24, Z+2	; 0x02
    228c:	84 60       	ori	r24, 0x04	; 4
    228e:	82 83       	std	Z+2, r24	; 0x02
    2290:	82 89       	ldd	r24, Z+18	; 0x12
    2292:	82 60       	ori	r24, 0x02	; 2
    2294:	82 8b       	std	Z+18, r24	; 0x12
    2296:	83 85       	ldd	r24, Z+11	; 0x0b
    2298:	84 60       	ori	r24, 0x04	; 4
    229a:	83 87       	std	Z+11, r24	; 0x0b
    229c:	81 85       	ldd	r24, Z+9	; 0x09
    229e:	8c 60       	ori	r24, 0x0C	; 12
    22a0:	81 87       	std	Z+9, r24	; 0x09
    22a2:	08 95       	ret

000022a4 <btn_disable_si114x_interrupt>:
    22a4:	e0 e0       	ldi	r30, 0x00	; 0
    22a6:	f6 e0       	ldi	r31, 0x06	; 6
    22a8:	82 81       	ldd	r24, Z+2	; 0x02
    22aa:	8b 7f       	andi	r24, 0xFB	; 251
    22ac:	82 83       	std	Z+2, r24	; 0x02
    22ae:	82 89       	ldd	r24, Z+18	; 0x12
    22b0:	8d 7f       	andi	r24, 0xFD	; 253
    22b2:	82 8b       	std	Z+18, r24	; 0x12
    22b4:	83 85       	ldd	r24, Z+11	; 0x0b
    22b6:	8b 7f       	andi	r24, 0xFB	; 251
    22b8:	83 87       	std	Z+11, r24	; 0x0b
    22ba:	81 85       	ldd	r24, Z+9	; 0x09
    22bc:	83 7f       	andi	r24, 0xF3	; 243
    22be:	81 87       	std	Z+9, r24	; 0x09
    22c0:	08 95       	ret

000022c2 <btn_check_press>:

button_t btn_check_press(void) 
{	
	button_t btn_mask = NO_BTN;
	
	if (!(PORTA.IN & BUTTON1)) {
    22c2:	80 91 08 06 	lds	r24, 0x0608
    22c6:	85 fb       	bst	r24, 5
    22c8:	88 27       	eor	r24, r24
    22ca:	80 f9       	bld	r24, 0
    22cc:	91 e0       	ldi	r25, 0x01	; 1
    22ce:	89 27       	eor	r24, r25
		btn_mask |= BTN1;
	}
	if (!(PORTA.IN & BUTTON2)) {
    22d0:	90 91 08 06 	lds	r25, 0x0608
    22d4:	96 ff       	sbrs	r25, 6
		btn_mask |= BTN2;
    22d6:	82 60       	ori	r24, 0x02	; 2
	}
	if (!(PORTA.IN & BUTTON3)) {
    22d8:	90 91 08 06 	lds	r25, 0x0608
    22dc:	97 ff       	sbrs	r25, 7
		btn_mask |= BTN3;
    22de:	83 e0       	ldi	r24, 0x03	; 3
	} 
	if (!(PORTB.IN & BUTTON4)) {
    22e0:	90 91 28 06 	lds	r25, 0x0628
    22e4:	90 ff       	sbrs	r25, 0
		btn_mask |= BTN4;
    22e6:	84 60       	ori	r24, 0x04	; 4
	}
	return btn_mask;
}
    22e8:	08 95       	ret

000022ea <__vector_66>:

ISR(PORTA_INT0_vect) 
{
    22ea:	1f 92       	push	r1
    22ec:	0f 92       	push	r0
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	0f 92       	push	r0
    22f2:	11 24       	eor	r1, r1
    22f4:	0b b6       	in	r0, 0x3b	; 59
    22f6:	0f 92       	push	r0
    22f8:	2f 93       	push	r18
    22fa:	3f 93       	push	r19
    22fc:	4f 93       	push	r20
    22fe:	5f 93       	push	r21
    2300:	6f 93       	push	r22
    2302:	7f 93       	push	r23
    2304:	8f 93       	push	r24
    2306:	9f 93       	push	r25
    2308:	af 93       	push	r26
    230a:	bf 93       	push	r27
    230c:	ef 93       	push	r30
    230e:	ff 93       	push	r31
	btn_status = btn_check_press();
    2310:	d8 df       	rcall	.-80     	; 0x22c2 <btn_check_press>
    2312:	80 93 4b 2c 	sts	0x2C4B, r24
#ifdef DEBUG_ON
	printf("DEBUG: BTN: %d \r\n",btn_status);
    2316:	80 91 4b 2c 	lds	r24, 0x2C4B
    231a:	1f 92       	push	r1
    231c:	8f 93       	push	r24
    231e:	8c e5       	ldi	r24, 0x5C	; 92
    2320:	94 e2       	ldi	r25, 0x24	; 36
    2322:	9f 93       	push	r25
    2324:	8f 93       	push	r24
    2326:	0e 94 a9 50 	call	0xa152	; 0xa152 <printf>
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
#endif
}
    2332:	ff 91       	pop	r31
    2334:	ef 91       	pop	r30
    2336:	bf 91       	pop	r27
    2338:	af 91       	pop	r26
    233a:	9f 91       	pop	r25
    233c:	8f 91       	pop	r24
    233e:	7f 91       	pop	r23
    2340:	6f 91       	pop	r22
    2342:	5f 91       	pop	r21
    2344:	4f 91       	pop	r20
    2346:	3f 91       	pop	r19
    2348:	2f 91       	pop	r18
    234a:	0f 90       	pop	r0
    234c:	0b be       	out	0x3b, r0	; 59
    234e:	0f 90       	pop	r0
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	0f 90       	pop	r0
    2354:	1f 90       	pop	r1
    2356:	18 95       	reti

00002358 <__vector_34>:

ISR(PORTB_INT0_vect) 
{
    2358:	1f 92       	push	r1
    235a:	0f 92       	push	r0
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	0f 92       	push	r0
    2360:	11 24       	eor	r1, r1
    2362:	0b b6       	in	r0, 0x3b	; 59
    2364:	0f 92       	push	r0
    2366:	2f 93       	push	r18
    2368:	3f 93       	push	r19
    236a:	4f 93       	push	r20
    236c:	5f 93       	push	r21
    236e:	6f 93       	push	r22
    2370:	7f 93       	push	r23
    2372:	8f 93       	push	r24
    2374:	9f 93       	push	r25
    2376:	af 93       	push	r26
    2378:	bf 93       	push	r27
    237a:	ef 93       	push	r30
    237c:	ff 93       	push	r31
	btn_status = btn_check_press();
    237e:	a1 df       	rcall	.-190    	; 0x22c2 <btn_check_press>
    2380:	80 93 4b 2c 	sts	0x2C4B, r24
#ifdef DEBUG_ON
	printf("DEBUG: BTN: %d \r\n",btn_status);
    2384:	80 91 4b 2c 	lds	r24, 0x2C4B
    2388:	1f 92       	push	r1
    238a:	8f 93       	push	r24
    238c:	8c e5       	ldi	r24, 0x5C	; 92
    238e:	94 e2       	ldi	r25, 0x24	; 36
    2390:	9f 93       	push	r25
    2392:	8f 93       	push	r24
    2394:	0e 94 a9 50 	call	0xa152	; 0xa152 <printf>
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
#endif
}
    23a0:	ff 91       	pop	r31
    23a2:	ef 91       	pop	r30
    23a4:	bf 91       	pop	r27
    23a6:	af 91       	pop	r26
    23a8:	9f 91       	pop	r25
    23aa:	8f 91       	pop	r24
    23ac:	7f 91       	pop	r23
    23ae:	6f 91       	pop	r22
    23b0:	5f 91       	pop	r21
    23b2:	4f 91       	pop	r20
    23b4:	3f 91       	pop	r19
    23b6:	2f 91       	pop	r18
    23b8:	0f 90       	pop	r0
    23ba:	0b be       	out	0x3b, r0	; 59
    23bc:	0f 90       	pop	r0
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	0f 90       	pop	r0
    23c2:	1f 90       	pop	r1
    23c4:	18 95       	reti

000023c6 <__vector_67>:

ISR(PORTA_INT1_vect) 
{	
    23c6:	1f 92       	push	r1
    23c8:	0f 92       	push	r0
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	0f 92       	push	r0
    23ce:	11 24       	eor	r1, r1
    23d0:	0b b6       	in	r0, 0x3b	; 59
    23d2:	0f 92       	push	r0
    23d4:	ef 92       	push	r14
    23d6:	0f 93       	push	r16
    23d8:	1f 93       	push	r17
    23da:	2f 93       	push	r18
    23dc:	3f 93       	push	r19
    23de:	4f 93       	push	r20
    23e0:	5f 93       	push	r21
    23e2:	6f 93       	push	r22
    23e4:	7f 93       	push	r23
    23e6:	8f 93       	push	r24
    23e8:	9f 93       	push	r25
    23ea:	af 93       	push	r26
    23ec:	bf 93       	push	r27
    23ee:	ef 93       	push	r30
    23f0:	ff 93       	push	r31
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <__vector_67+0x32>
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
	//twi_on();
	uint8_t data[2];
	twi_read_packet(&TWIC,SI114X_ADDR,50,REG_IRQ_STATUS,data,1);
    23fc:	ee 24       	eor	r14, r14
    23fe:	e3 94       	inc	r14
    2400:	8e 01       	movw	r16, r28
    2402:	0f 5f       	subi	r16, 0xFF	; 255
    2404:	1f 4f       	sbci	r17, 0xFF	; 255
    2406:	21 e2       	ldi	r18, 0x21	; 33
    2408:	42 e3       	ldi	r20, 0x32	; 50
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	6a e5       	ldi	r22, 0x5A	; 90
    240e:	80 e8       	ldi	r24, 0x80	; 128
    2410:	94 e0       	ldi	r25, 0x04	; 4
    2412:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <twi_read_packet>
	si114x_status = data[0];
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	80 93 4c 2c 	sts	0x2C4C, r24
#ifdef DEBUG_ON
	puts("DEBUG: Interrupt from Si114x! \n");
    241c:	8e e6       	ldi	r24, 0x6E	; 110
    241e:	94 e2       	ldi	r25, 0x24	; 36
    2420:	0e 94 ba 50 	call	0xa174	; 0xa174 <puts>
#endif
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	ff 91       	pop	r31
    242e:	ef 91       	pop	r30
    2430:	bf 91       	pop	r27
    2432:	af 91       	pop	r26
    2434:	9f 91       	pop	r25
    2436:	8f 91       	pop	r24
    2438:	7f 91       	pop	r23
    243a:	6f 91       	pop	r22
    243c:	5f 91       	pop	r21
    243e:	4f 91       	pop	r20
    2440:	3f 91       	pop	r19
    2442:	2f 91       	pop	r18
    2444:	1f 91       	pop	r17
    2446:	0f 91       	pop	r16
    2448:	ef 90       	pop	r14
    244a:	0f 90       	pop	r0
    244c:	0b be       	out	0x3b, r0	; 59
    244e:	0f 90       	pop	r0
    2450:	0f be       	out	0x3f, r0	; 63
    2452:	0f 90       	pop	r0
    2454:	1f 90       	pop	r1
    2456:	18 95       	reti

00002458 <lowpower_init>:

#include "power.h"

void lowpower_init(void) 
{
	DISABLE_GEN();
    2458:	e0 e7       	ldi	r30, 0x70	; 112
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	8b 61       	ori	r24, 0x1B	; 27
    2460:	80 83       	st	Z, r24
	DISABLE_TC();
    2462:	83 81       	ldd	r24, Z+3	; 0x03
    2464:	87 60       	ori	r24, 0x07	; 7
    2466:	83 83       	std	Z+3, r24	; 0x03
    2468:	84 81       	ldd	r24, Z+4	; 0x04
    246a:	87 60       	ori	r24, 0x07	; 7
    246c:	84 83       	std	Z+4, r24	; 0x04
    246e:	85 81       	ldd	r24, Z+5	; 0x05
    2470:	85 60       	ori	r24, 0x05	; 5
    2472:	85 83       	std	Z+5, r24	; 0x05
	DISABLE_COM();
    2474:	83 81       	ldd	r24, Z+3	; 0x03
    2476:	88 67       	ori	r24, 0x78	; 120
    2478:	83 83       	std	Z+3, r24	; 0x03
    247a:	84 81       	ldd	r24, Z+4	; 0x04
    247c:	88 63       	ori	r24, 0x38	; 56
    247e:	84 83       	std	Z+4, r24	; 0x04
    2480:	85 81       	ldd	r24, Z+5	; 0x05
    2482:	80 65       	ori	r24, 0x50	; 80
    2484:	85 83       	std	Z+5, r24	; 0x05
	DISABLE_ANLG();
    2486:	81 81       	ldd	r24, Z+1	; 0x01
    2488:	83 60       	ori	r24, 0x03	; 3
    248a:	81 83       	std	Z+1, r24	; 0x01
    248c:	82 81       	ldd	r24, Z+2	; 0x02
    248e:	84 60       	ori	r24, 0x04	; 4
    2490:	82 83       	std	Z+2, r24	; 0x02
    2492:	08 95       	ret

00002494 <rtc_setup>:
}

void rtc_show_minutes(void) 
{
	rtc_update_display(BOTTOM_HALF,env.time.minutes);
	disp_time = false;
    2494:	80 91 70 00 	lds	r24, 0x0070
    2498:	8f 7b       	andi	r24, 0xBF	; 191
    249a:	80 93 70 00 	sts	0x0070, r24
    249e:	88 ed       	ldi	r24, 0xD8	; 216
    24a0:	84 bf       	out	0x34, r24	; 52
    24a2:	8b e0       	ldi	r24, 0x0B	; 11
    24a4:	80 93 43 00 	sts	0x0043, r24
    24a8:	80 91 01 04 	lds	r24, 0x0401
    24ac:	80 fd       	sbrc	r24, 0
    24ae:	fc cf       	rjmp	.-8      	; 0x24a8 <rtc_setup+0x14>
    24b0:	80 e8       	ldi	r24, 0x80	; 128
    24b2:	97 e0       	ldi	r25, 0x07	; 7
    24b4:	80 93 0a 04 	sts	0x040A, r24
    24b8:	90 93 0b 04 	sts	0x040B, r25
    24bc:	82 e0       	ldi	r24, 0x02	; 2
    24be:	80 93 02 04 	sts	0x0402, r24
    24c2:	10 92 08 04 	sts	0x0408, r1
    24c6:	10 92 09 04 	sts	0x0409, r1
    24ca:	10 92 0c 04 	sts	0x040C, r1
    24ce:	10 92 0d 04 	sts	0x040D, r1
    24d2:	87 e0       	ldi	r24, 0x07	; 7
    24d4:	80 93 00 04 	sts	0x0400, r24
    24d8:	08 95       	ret

000024da <rtc_disable_time_render>:
    24da:	10 92 07 20 	sts	0x2007, r1
    24de:	08 95       	ret

000024e0 <rtc_update_display>:
    24e0:	6f 92       	push	r6
    24e2:	7f 92       	push	r7
    24e4:	8f 92       	push	r8
    24e6:	9f 92       	push	r9
    24e8:	af 92       	push	r10
    24ea:	bf 92       	push	r11
    24ec:	cf 92       	push	r12
    24ee:	df 92       	push	r13
    24f0:	ef 92       	push	r14
    24f2:	ff 92       	push	r15
    24f4:	0f 93       	push	r16
    24f6:	1f 93       	push	r17
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <rtc_update_display+0x1e>
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	78 2e       	mov	r7, r24
    2504:	66 2e       	mov	r6, r22
    2506:	70 e0       	ldi	r23, 0x00	; 0
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	8e 01       	movw	r16, r28
    250e:	0f 5f       	subi	r16, 0xFF	; 255
    2510:	1f 4f       	sbci	r17, 0xFF	; 255
    2512:	78 01       	movw	r14, r16
    2514:	2a e0       	ldi	r18, 0x0A	; 10
    2516:	82 2e       	mov	r8, r18
    2518:	91 2c       	mov	r9, r1
    251a:	a1 2c       	mov	r10, r1
    251c:	b1 2c       	mov	r11, r1
    251e:	67 01       	movw	r12, r14
    2520:	2f ef       	ldi	r18, 0xFF	; 255
    2522:	c2 1a       	sub	r12, r18
    2524:	d2 0a       	sbc	r13, r18
    2526:	a5 01       	movw	r20, r10
    2528:	94 01       	movw	r18, r8
    252a:	0e 94 be 4e 	call	0x9d7c	; 0x9d7c <__udivmodsi4>
    252e:	60 5d       	subi	r22, 0xD0	; 208
    2530:	f7 01       	movw	r30, r14
    2532:	60 83       	st	Z, r22
    2534:	b9 01       	movw	r22, r18
    2536:	ca 01       	movw	r24, r20
    2538:	61 15       	cp	r22, r1
    253a:	71 05       	cpc	r23, r1
    253c:	81 05       	cpc	r24, r1
    253e:	91 05       	cpc	r25, r1
    2540:	11 f0       	breq	.+4      	; 0x2546 <rtc_update_display+0x66>
    2542:	76 01       	movw	r14, r12
    2544:	ec cf       	rjmp	.-40     	; 0x251e <rtc_update_display+0x3e>
    2546:	c0 1a       	sub	r12, r16
    2548:	d1 0a       	sbc	r13, r17
    254a:	c6 01       	movw	r24, r12
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	d8 01       	movw	r26, r16
    2550:	ac 0d       	add	r26, r12
    2552:	bd 1d       	adc	r27, r13
    2554:	f8 01       	movw	r30, r16
    2556:	9f 01       	movw	r18, r30
    2558:	20 1b       	sub	r18, r16
    255a:	31 0b       	sbc	r19, r17
    255c:	28 17       	cp	r18, r24
    255e:	39 07       	cpc	r19, r25
    2560:	34 f4       	brge	.+12     	; 0x256e <rtc_update_display+0x8e>
    2562:	20 81       	ld	r18, Z
    2564:	3e 91       	ld	r19, -X
    2566:	31 93       	st	Z+, r19
    2568:	2c 93       	st	X, r18
    256a:	01 97       	sbiw	r24, 0x01	; 1
    256c:	f4 cf       	rjmp	.-24     	; 0x2556 <rtc_update_display+0x76>
    256e:	f9 e0       	ldi	r31, 0x09	; 9
    2570:	f6 15       	cp	r31, r6
    2572:	20 f0       	brcs	.+8      	; 0x257c <rtc_update_display+0x9c>
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	90 e3       	ldi	r25, 0x30	; 48
    2578:	99 83       	std	Y+1, r25	; 0x01
    257a:	8a 83       	std	Y+2, r24	; 0x02
    257c:	00 e0       	ldi	r16, 0x00	; 0
    257e:	71 10       	cpse	r7, r1
    2580:	04 c0       	rjmp	.+8      	; 0x258a <rtc_update_display+0xaa>
    2582:	28 e0       	ldi	r18, 0x08	; 8
    2584:	40 e1       	ldi	r20, 0x10	; 16
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	03 c0       	rjmp	.+6      	; 0x2590 <rtc_update_display+0xb0>
    258a:	29 e0       	ldi	r18, 0x09	; 9
    258c:	40 e1       	ldi	r20, 0x10	; 16
    258e:	67 e0       	ldi	r22, 0x07	; 7
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	0e 94 cf 20 	call	0x419e	; 0x419e <display_draw_filled_rect>
    2596:	e7 2c       	mov	r14, r7
    2598:	f1 2c       	mov	r15, r1
    259a:	01 e0       	ldi	r16, 0x01	; 1
    259c:	21 e0       	ldi	r18, 0x01	; 1
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	49 81       	ldd	r20, Y+1	; 0x01
    25a2:	b7 01       	movw	r22, r14
    25a4:	82 e0       	ldi	r24, 0x02	; 2
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <display_draw_char>
    25ac:	21 e0       	ldi	r18, 0x01	; 1
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	4a 81       	ldd	r20, Y+2	; 0x02
    25b2:	b7 01       	movw	r22, r14
    25b4:	89 e0       	ldi	r24, 0x09	; 9
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <display_draw_char>
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	1f 91       	pop	r17
    25c6:	0f 91       	pop	r16
    25c8:	ff 90       	pop	r15
    25ca:	ef 90       	pop	r14
    25cc:	df 90       	pop	r13
    25ce:	cf 90       	pop	r12
    25d0:	bf 90       	pop	r11
    25d2:	af 90       	pop	r10
    25d4:	9f 90       	pop	r9
    25d6:	8f 90       	pop	r8
    25d8:	7f 90       	pop	r7
    25da:	6f 90       	pop	r6
    25dc:	08 95       	ret

000025de <rtc_enable_time_render>:
}

void rtc_enable_time_render(void) 
{
	env.menu_id = 0;
    25de:	10 92 64 2b 	sts	0x2B64, r1
	rtc_update_display(BOTTOM_HALF,env.time.minutes);
    25e2:	60 91 e1 2a 	lds	r22, 0x2AE1
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	7b df       	rcall	.-266    	; 0x24e0 <rtc_update_display>
	rtc_update_display(TOP_HALF,env.time.hours);
    25ea:	60 91 e2 2a 	lds	r22, 0x2AE2
    25ee:	89 e0       	ldi	r24, 0x09	; 9
    25f0:	77 df       	rcall	.-274    	; 0x24e0 <rtc_update_display>
	disp_time = true;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	80 93 07 20 	sts	0x2007, r24
    25f8:	08 95       	ret

000025fa <__vector_10>:
	display_draw_char(2,pos,buffer[0],1,1);
	display_draw_char(9,pos,buffer[1],1,1);
}

ISR(RTC_OVF_vect) 
{
    25fa:	1f 92       	push	r1
    25fc:	0f 92       	push	r0
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	0f 92       	push	r0
    2602:	11 24       	eor	r1, r1
    2604:	0b b6       	in	r0, 0x3b	; 59
    2606:	0f 92       	push	r0
    2608:	2f 93       	push	r18
    260a:	3f 93       	push	r19
    260c:	4f 93       	push	r20
    260e:	5f 93       	push	r21
    2610:	6f 93       	push	r22
    2612:	7f 93       	push	r23
    2614:	8f 93       	push	r24
    2616:	9f 93       	push	r25
    2618:	af 93       	push	r26
    261a:	bf 93       	push	r27
    261c:	cf 93       	push	r28
    261e:	ef 93       	push	r30
    2620:	ff 93       	push	r31
	//Variable to check system-runtime
	env.runtime++;
    2622:	80 91 c3 2a 	lds	r24, 0x2AC3
    2626:	90 91 c4 2a 	lds	r25, 0x2AC4
    262a:	a0 91 c5 2a 	lds	r26, 0x2AC5
    262e:	b0 91 c6 2a 	lds	r27, 0x2AC6
    2632:	01 96       	adiw	r24, 0x01	; 1
    2634:	a1 1d       	adc	r26, r1
    2636:	b1 1d       	adc	r27, r1
    2638:	80 93 c3 2a 	sts	0x2AC3, r24
    263c:	90 93 c4 2a 	sts	0x2AC4, r25
    2640:	a0 93 c5 2a 	sts	0x2AC5, r26
    2644:	b0 93 c6 2a 	sts	0x2AC6, r27
	
	if (++env.time.minutes >= 60) {
    2648:	60 91 e1 2a 	lds	r22, 0x2AE1
    264c:	6f 5f       	subi	r22, 0xFF	; 255
    264e:	60 93 e1 2a 	sts	0x2AE1, r22
    2652:	6c 33       	cpi	r22, 0x3C	; 60
    2654:	08 f4       	brcc	.+2      	; 0x2658 <__vector_10+0x5e>
    2656:	67 c0       	rjmp	.+206    	; 0x2726 <__vector_10+0x12c>
		
		env.time.minutes = 0;
    2658:	10 92 e1 2a 	sts	0x2AE1, r1
		if (disp_time) {
    265c:	80 91 07 20 	lds	r24, 0x2007
    2660:	88 23       	and	r24, r24
    2662:	29 f0       	breq	.+10     	; 0x266e <__vector_10+0x74>
			rtc_update_display(BOTTOM_HALF,env.time.minutes);
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	3b df       	rcall	.-394    	; 0x24e0 <rtc_update_display>
			display_refresh_screen();
    266a:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
		}
		if (++env.time.hours >= 24) {
    266e:	60 91 e2 2a 	lds	r22, 0x2AE2
    2672:	6f 5f       	subi	r22, 0xFF	; 255
    2674:	60 93 e2 2a 	sts	0x2AE2, r22
    2678:	68 31       	cpi	r22, 0x18	; 24
    267a:	08 f4       	brcc	.+2      	; 0x267e <__vector_10+0x84>
    267c:	49 c0       	rjmp	.+146    	; 0x2710 <__vector_10+0x116>
			if (env.time.weekday++ >= Sunday) {
    267e:	80 91 e4 2a 	lds	r24, 0x2AE4
    2682:	91 e0       	ldi	r25, 0x01	; 1
    2684:	98 0f       	add	r25, r24
    2686:	90 93 e4 2a 	sts	0x2AE4, r25
    268a:	87 30       	cpi	r24, 0x07	; 7
    268c:	68 f0       	brcs	.+26     	; 0x26a8 <__vector_10+0xae>
				env.time.weekday = Monday;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	80 93 e4 2a 	sts	0x2AE4, r24
				if (env.time.week++ >= 53) {
    2694:	90 91 e5 2a 	lds	r25, 0x2AE5
    2698:	21 e0       	ldi	r18, 0x01	; 1
    269a:	29 0f       	add	r18, r25
    269c:	20 93 e5 2a 	sts	0x2AE5, r18
    26a0:	95 33       	cpi	r25, 0x35	; 53
    26a2:	10 f0       	brcs	.+4      	; 0x26a8 <__vector_10+0xae>
					env.time.week = 1;
    26a4:	80 93 e5 2a 	sts	0x2AE5, r24
				}
			}
			if (env.time.day++ >= time_get_days_in_month(env.time.month,env.time.year)) {
    26a8:	c0 91 e3 2a 	lds	r28, 0x2AE3
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	8c 0f       	add	r24, r28
    26b0:	80 93 e3 2a 	sts	0x2AE3, r24
    26b4:	60 91 e7 2a 	lds	r22, 0x2AE7
    26b8:	70 91 e8 2a 	lds	r23, 0x2AE8
    26bc:	80 91 e6 2a 	lds	r24, 0x2AE6
    26c0:	0e 94 bb 4c 	call	0x9976	; 0x9976 <time_get_days_in_month>
    26c4:	c8 17       	cp	r28, r24
    26c6:	e0 f0       	brcs	.+56     	; 0x2700 <__vector_10+0x106>
				env.time.day = 1;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	80 93 e3 2a 	sts	0x2AE3, r24
				if (env.time.month++ >= December) {
    26ce:	90 91 e6 2a 	lds	r25, 0x2AE6
    26d2:	21 e0       	ldi	r18, 0x01	; 1
    26d4:	29 0f       	add	r18, r25
    26d6:	20 93 e6 2a 	sts	0x2AE6, r18
    26da:	9c 30       	cpi	r25, 0x0C	; 12
    26dc:	88 f0       	brcs	.+34     	; 0x2700 <__vector_10+0x106>
					env.time.month = January;
    26de:	80 93 e6 2a 	sts	0x2AE6, r24
					env.time.year++;
    26e2:	40 91 e7 2a 	lds	r20, 0x2AE7
    26e6:	50 91 e8 2a 	lds	r21, 0x2AE8
    26ea:	4f 5f       	subi	r20, 0xFF	; 255
    26ec:	5f 4f       	sbci	r21, 0xFF	; 255
    26ee:	40 93 e7 2a 	sts	0x2AE7, r20
    26f2:	50 93 e8 2a 	sts	0x2AE8, r21
					env.time.week = time_get_weeknumber(env.time.day,env.time.month,env.time.year);
    26f6:	61 e0       	ldi	r22, 0x01	; 1
    26f8:	0e 94 d3 4c 	call	0x99a6	; 0x99a6 <time_get_weeknumber>
    26fc:	80 93 e5 2a 	sts	0x2AE5, r24
				}
			}
			env.time.hours = 0;
    2700:	10 92 e2 2a 	sts	0x2AE2, r1
			if (disp_time) {
    2704:	80 91 07 20 	lds	r24, 0x2007
    2708:	88 23       	and	r24, r24
    270a:	51 f0       	breq	.+20     	; 0x2720 <__vector_10+0x126>
				rtc_update_display(TOP_HALF,env.time.hours);
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	04 c0       	rjmp	.+8      	; 0x2718 <__vector_10+0x11e>
				display_refresh_screen();
			}
		} else {
			if (disp_time) {
    2710:	80 91 07 20 	lds	r24, 0x2007
    2714:	88 23       	and	r24, r24
    2716:	21 f0       	breq	.+8      	; 0x2720 <__vector_10+0x126>
				rtc_update_display(TOP_HALF,env.time.hours);
    2718:	89 e0       	ldi	r24, 0x09	; 9
    271a:	e2 de       	rcall	.-572    	; 0x24e0 <rtc_update_display>
				display_refresh_screen();
    271c:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
			}
		}
		env.time.minutes = 0;
    2720:	10 92 e1 2a 	sts	0x2AE1, r1
    2724:	08 c0       	rjmp	.+16     	; 0x2736 <__vector_10+0x13c>
	} else {
		if (disp_time) {
    2726:	80 91 07 20 	lds	r24, 0x2007
    272a:	88 23       	and	r24, r24
    272c:	21 f0       	breq	.+8      	; 0x2736 <__vector_10+0x13c>
			rtc_update_display(BOTTOM_HALF,env.time.minutes);
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	d7 de       	rcall	.-594    	; 0x24e0 <rtc_update_display>
			display_refresh_screen();
    2732:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
		if (env.time.minutes == env.alarm.minutes)
		{
			//Alarm code goes here
		}	
	}
    2736:	ff 91       	pop	r31
    2738:	ef 91       	pop	r30
    273a:	cf 91       	pop	r28
    273c:	bf 91       	pop	r27
    273e:	af 91       	pop	r26
    2740:	9f 91       	pop	r25
    2742:	8f 91       	pop	r24
    2744:	7f 91       	pop	r23
    2746:	6f 91       	pop	r22
    2748:	5f 91       	pop	r21
    274a:	4f 91       	pop	r20
    274c:	3f 91       	pop	r19
    274e:	2f 91       	pop	r18
    2750:	0f 90       	pop	r0
    2752:	0b be       	out	0x3b, r0	; 59
    2754:	0f 90       	pop	r0
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	0f 90       	pop	r0
    275a:	1f 90       	pop	r1
    275c:	18 95       	reti

0000275e <_sendCmd>:
	u8 code ucoef[4] = { 0x7B, 0x6B, 0x01, 0x00 } ;
	
	// This will write 4 bytes starting with I2C address 0x13
	response = Si114xBlockWrite( si114x_handle, REG_UCOEF0, 4, &ucoef[0] );
	return response;
}
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	8c 01       	movw	r16, r24
    276a:	f6 2e       	mov	r15, r22
    276c:	60 e2       	ldi	r22, 0x20	; 32
    276e:	18 d6       	rcall	.+3120   	; 0x33a0 <Si114xReadFromRegister>
    2770:	ec 01       	movw	r28, r24
    2772:	97 fd       	sbrc	r25, 7
    2774:	21 c0       	rjmp	.+66     	; 0x27b8 <_sendCmd+0x5a>
    2776:	60 e3       	ldi	r22, 0x30	; 48
    2778:	c8 01       	movw	r24, r16
    277a:	12 d6       	rcall	.+3108   	; 0x33a0 <Si114xReadFromRegister>
    277c:	81 30       	cpi	r24, 0x01	; 1
    277e:	91 05       	cpc	r25, r1
    2780:	19 f0       	breq	.+6      	; 0x2788 <_sendCmd+0x2a>
    2782:	97 ff       	sbrs	r25, 7
    2784:	f8 cf       	rjmp	.-16     	; 0x2776 <_sendCmd+0x18>
    2786:	20 c0       	rjmp	.+64     	; 0x27c8 <_sendCmd+0x6a>
    2788:	ff 20       	and	r15, r15
    278a:	31 f0       	breq	.+12     	; 0x2798 <_sendCmd+0x3a>
    278c:	60 e2       	ldi	r22, 0x20	; 32
    278e:	c8 01       	movw	r24, r16
    2790:	07 d6       	rcall	.+3086   	; 0x33a0 <Si114xReadFromRegister>
    2792:	8c 17       	cp	r24, r28
    2794:	9d 07       	cpc	r25, r29
    2796:	91 f4       	brne	.+36     	; 0x27bc <_sendCmd+0x5e>
    2798:	4f 2d       	mov	r20, r15
    279a:	68 e1       	ldi	r22, 0x18	; 24
    279c:	c8 01       	movw	r24, r16
    279e:	e2 d5       	rcall	.+3012   	; 0x3364 <Si114xWriteToRegister>
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	91 f4       	brne	.+36     	; 0x27c8 <_sendCmd+0x6a>
    27a4:	ff 20       	and	r15, r15
    27a6:	71 f0       	breq	.+28     	; 0x27c4 <_sendCmd+0x66>
    27a8:	60 e2       	ldi	r22, 0x20	; 32
    27aa:	c8 01       	movw	r24, r16
    27ac:	f9 d5       	rcall	.+3058   	; 0x33a0 <Si114xReadFromRegister>
    27ae:	8c 17       	cp	r24, r28
    27b0:	9d 07       	cpc	r25, r29
    27b2:	41 f4       	brne	.+16     	; 0x27c4 <_sendCmd+0x66>
    27b4:	d7 ff       	sbrs	r29, 7
    27b6:	f8 cf       	rjmp	.-16     	; 0x27a8 <_sendCmd+0x4a>
    27b8:	ce 01       	movw	r24, r28
    27ba:	06 c0       	rjmp	.+12     	; 0x27c8 <_sendCmd+0x6a>
    27bc:	97 fd       	sbrc	r25, 7
    27be:	04 c0       	rjmp	.+8      	; 0x27c8 <_sendCmd+0x6a>
    27c0:	ec 01       	movw	r28, r24
    27c2:	d9 cf       	rjmp	.-78     	; 0x2776 <_sendCmd+0x18>
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	1f 91       	pop	r17
    27ce:	0f 91       	pop	r16
    27d0:	ff 90       	pop	r15
    27d2:	08 95       	ret

000027d4 <si114x_get_data>:
    27d4:	cf 92       	push	r12
    27d6:	df 92       	push	r13
    27d8:	ef 92       	push	r14
    27da:	0f 93       	push	r16
    27dc:	1f 93       	push	r17
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <si114x_get_data+0x10>
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	6c 01       	movw	r12, r24
    27ea:	80 91 80 2a 	lds	r24, 0x2A80
    27ee:	90 91 81 2a 	lds	r25, 0x2A81
    27f2:	f6 01       	movw	r30, r12
    27f4:	82 83       	std	Z+2, r24	; 0x02
    27f6:	93 83       	std	Z+3, r25	; 0x03
    27f8:	82 e0       	ldi	r24, 0x02	; 2
    27fa:	e8 2e       	mov	r14, r24
    27fc:	8e 01       	movw	r16, r28
    27fe:	0f 5f       	subi	r16, 0xFF	; 255
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	26 e2       	ldi	r18, 0x26	; 38
    2804:	42 e3       	ldi	r20, 0x32	; 50
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	6a e5       	ldi	r22, 0x5A	; 90
    280a:	80 e8       	ldi	r24, 0x80	; 128
    280c:	94 e0       	ldi	r25, 0x04	; 4
    280e:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <twi_read_packet>
    2812:	8a 81       	ldd	r24, Y+2	; 0x02
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	98 2f       	mov	r25, r24
    2818:	88 27       	eor	r24, r24
    281a:	29 81       	ldd	r18, Y+1	; 0x01
    281c:	82 2b       	or	r24, r18
    281e:	f6 01       	movw	r30, r12
    2820:	82 87       	std	Z+10, r24	; 0x0a
    2822:	93 87       	std	Z+11, r25	; 0x0b
    2824:	28 e2       	ldi	r18, 0x28	; 40
    2826:	42 e3       	ldi	r20, 0x32	; 50
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	6a e5       	ldi	r22, 0x5A	; 90
    282c:	80 e8       	ldi	r24, 0x80	; 128
    282e:	94 e0       	ldi	r25, 0x04	; 4
    2830:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <twi_read_packet>
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	98 2f       	mov	r25, r24
    283a:	88 27       	eor	r24, r24
    283c:	29 81       	ldd	r18, Y+1	; 0x01
    283e:	82 2b       	or	r24, r18
    2840:	f6 01       	movw	r30, r12
    2842:	84 87       	std	Z+12, r24	; 0x0c
    2844:	95 87       	std	Z+13, r25	; 0x0d
    2846:	2a e2       	ldi	r18, 0x2A	; 42
    2848:	42 e3       	ldi	r20, 0x32	; 50
    284a:	50 e0       	ldi	r21, 0x00	; 0
    284c:	6a e5       	ldi	r22, 0x5A	; 90
    284e:	80 e8       	ldi	r24, 0x80	; 128
    2850:	94 e0       	ldi	r25, 0x04	; 4
    2852:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <twi_read_packet>
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	98 2f       	mov	r25, r24
    285c:	88 27       	eor	r24, r24
    285e:	29 81       	ldd	r18, Y+1	; 0x01
    2860:	82 2b       	or	r24, r18
    2862:	f6 01       	movw	r30, r12
    2864:	86 87       	std	Z+14, r24	; 0x0e
    2866:	97 87       	std	Z+15, r25	; 0x0f
    2868:	24 e2       	ldi	r18, 0x24	; 36
    286a:	42 e3       	ldi	r20, 0x32	; 50
    286c:	50 e0       	ldi	r21, 0x00	; 0
    286e:	6a e5       	ldi	r22, 0x5A	; 90
    2870:	80 e8       	ldi	r24, 0x80	; 128
    2872:	94 e0       	ldi	r25, 0x04	; 4
    2874:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <twi_read_packet>
    2878:	8a 81       	ldd	r24, Y+2	; 0x02
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	98 2f       	mov	r25, r24
    287e:	88 27       	eor	r24, r24
    2880:	29 81       	ldd	r18, Y+1	; 0x01
    2882:	82 2b       	or	r24, r18
    2884:	f6 01       	movw	r30, r12
    2886:	80 87       	std	Z+8, r24	; 0x08
    2888:	91 87       	std	Z+9, r25	; 0x09
    288a:	22 e2       	ldi	r18, 0x22	; 34
    288c:	42 e3       	ldi	r20, 0x32	; 50
    288e:	50 e0       	ldi	r21, 0x00	; 0
    2890:	6a e5       	ldi	r22, 0x5A	; 90
    2892:	80 e8       	ldi	r24, 0x80	; 128
    2894:	94 e0       	ldi	r25, 0x04	; 4
    2896:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <twi_read_packet>
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	98 2f       	mov	r25, r24
    28a0:	88 27       	eor	r24, r24
    28a2:	29 81       	ldd	r18, Y+1	; 0x01
    28a4:	82 2b       	or	r24, r18
    28a6:	f6 01       	movw	r30, r12
    28a8:	86 83       	std	Z+6, r24	; 0x06
    28aa:	97 83       	std	Z+7, r25	; 0x07
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	df 91       	pop	r29
    28b4:	cf 91       	pop	r28
    28b6:	1f 91       	pop	r17
    28b8:	0f 91       	pop	r16
    28ba:	ef 90       	pop	r14
    28bc:	df 90       	pop	r13
    28be:	cf 90       	pop	r12
    28c0:	08 95       	ret

000028c2 <Si114xNop>:
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	4c cf       	rjmp	.-360    	; 0x275e <_sendCmd>

000028c6 <Si114xPsAuto>:
    28c6:	6d e0       	ldi	r22, 0x0D	; 13
    28c8:	4a cf       	rjmp	.-364    	; 0x275e <_sendCmd>

000028ca <Si114xPsAlsAuto>:
    28ca:	6f e0       	ldi	r22, 0x0F	; 15
    28cc:	48 cf       	rjmp	.-368    	; 0x275e <_sendCmd>

000028ce <Si114xParamSet>:
    28ce:	cf 92       	push	r12
    28d0:	df 92       	push	r13
    28d2:	ef 92       	push	r14
    28d4:	ff 92       	push	r15
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <Si114xParamSet+0x12>
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	8c 01       	movw	r16, r24
    28e6:	d6 2e       	mov	r13, r22
    28e8:	c4 2e       	mov	r12, r20
    28ea:	60 e3       	ldi	r22, 0x30	; 48
    28ec:	c8 01       	movw	r24, r16
    28ee:	58 d5       	rcall	.+2736   	; 0x33a0 <Si114xReadFromRegister>
    28f0:	81 30       	cpi	r24, 0x01	; 1
    28f2:	91 05       	cpc	r25, r1
    28f4:	19 f0       	breq	.+6      	; 0x28fc <Si114xParamSet+0x2e>
    28f6:	97 ff       	sbrs	r25, 7
    28f8:	f8 cf       	rjmp	.-16     	; 0x28ea <Si114xParamSet+0x1c>
    28fa:	1d c0       	rjmp	.+58     	; 0x2936 <Si114xParamSet+0x68>
    28fc:	60 e2       	ldi	r22, 0x20	; 32
    28fe:	c8 01       	movw	r24, r16
    2900:	4f d5       	rcall	.+2718   	; 0x33a0 <Si114xReadFromRegister>
    2902:	7c 01       	movw	r14, r24
    2904:	c9 82       	std	Y+1, r12	; 0x01
    2906:	6d 2d       	mov	r22, r13
    2908:	6f 71       	andi	r22, 0x1F	; 31
    290a:	60 56       	subi	r22, 0x60	; 96
    290c:	6a 83       	std	Y+2, r22	; 0x02
    290e:	9e 01       	movw	r18, r28
    2910:	2f 5f       	subi	r18, 0xFF	; 255
    2912:	3f 4f       	sbci	r19, 0xFF	; 255
    2914:	42 e0       	ldi	r20, 0x02	; 2
    2916:	67 e1       	ldi	r22, 0x17	; 23
    2918:	c8 01       	movw	r24, r16
    291a:	5f d5       	rcall	.+2750   	; 0x33da <Si114xBlockWrite>
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	59 f4       	brne	.+22     	; 0x2936 <Si114xParamSet+0x68>
    2920:	60 e2       	ldi	r22, 0x20	; 32
    2922:	c8 01       	movw	r24, r16
    2924:	3d d5       	rcall	.+2682   	; 0x33a0 <Si114xReadFromRegister>
    2926:	8e 15       	cp	r24, r14
    2928:	9f 05       	cpc	r25, r15
    292a:	d1 f3       	breq	.-12     	; 0x2920 <Si114xParamSet+0x52>
    292c:	18 16       	cp	r1, r24
    292e:	19 06       	cpc	r1, r25
    2930:	14 f4       	brge	.+4      	; 0x2936 <Si114xParamSet+0x68>
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	1f 91       	pop	r17
    2940:	0f 91       	pop	r16
    2942:	ff 90       	pop	r15
    2944:	ef 90       	pop	r14
    2946:	df 90       	pop	r13
    2948:	cf 90       	pop	r12
    294a:	08 95       	ret

0000294c <Si114xPauseAll>:
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	ec 01       	movw	r28, r24
    2952:	60 e2       	ldi	r22, 0x20	; 32
    2954:	ce 01       	movw	r24, r28
    2956:	24 d5       	rcall	.+2632   	; 0x33a0 <Si114xReadFromRegister>
    2958:	89 2b       	or	r24, r25
    295a:	19 f0       	breq	.+6      	; 0x2962 <Si114xPauseAll+0x16>
    295c:	ce 01       	movw	r24, r28
    295e:	b1 df       	rcall	.-158    	; 0x28c2 <Si114xNop>
    2960:	f8 cf       	rjmp	.-16     	; 0x2952 <Si114xPauseAll+0x6>
    2962:	6b e0       	ldi	r22, 0x0B	; 11
    2964:	ce 01       	movw	r24, r28
    2966:	fb de       	rcall	.-522    	; 0x275e <_sendCmd>
    2968:	60 e2       	ldi	r22, 0x20	; 32
    296a:	ce 01       	movw	r24, r28
    296c:	19 d5       	rcall	.+2610   	; 0x33a0 <Si114xReadFromRegister>
    296e:	89 2b       	or	r24, r25
    2970:	d9 f3       	breq	.-10     	; 0x2968 <Si114xPauseAll+0x1c>
    2972:	60 e2       	ldi	r22, 0x20	; 32
    2974:	ce 01       	movw	r24, r28
    2976:	14 d5       	rcall	.+2600   	; 0x33a0 <Si114xReadFromRegister>
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	59 f7       	brne	.-42     	; 0x2952 <Si114xPauseAll+0x6>
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	08 95       	ret

00002986 <si114x_reset>:
    2986:	0f 93       	push	r16
    2988:	1f 93       	push	r17
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	8c 01       	movw	r16, r24
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	68 e0       	ldi	r22, 0x08	; 8
    2994:	e7 d4       	rcall	.+2510   	; 0x3364 <Si114xWriteToRegister>
    2996:	ec 01       	movw	r28, r24
    2998:	c8 01       	movw	r24, r16
    299a:	d8 df       	rcall	.-80     	; 0x294c <Si114xPauseAll>
    299c:	c8 0f       	add	r28, r24
    299e:	d9 1f       	adc	r29, r25
    29a0:	40 e0       	ldi	r20, 0x00	; 0
    29a2:	68 e0       	ldi	r22, 0x08	; 8
    29a4:	c8 01       	movw	r24, r16
    29a6:	de d4       	rcall	.+2492   	; 0x3364 <Si114xWriteToRegister>
    29a8:	c8 0f       	add	r28, r24
    29aa:	d9 1f       	adc	r29, r25
    29ac:	40 e0       	ldi	r20, 0x00	; 0
    29ae:	64 e0       	ldi	r22, 0x04	; 4
    29b0:	c8 01       	movw	r24, r16
    29b2:	d8 d4       	rcall	.+2480   	; 0x3364 <Si114xWriteToRegister>
    29b4:	c8 0f       	add	r28, r24
    29b6:	d9 1f       	adc	r29, r25
    29b8:	40 e0       	ldi	r20, 0x00	; 0
    29ba:	65 e0       	ldi	r22, 0x05	; 5
    29bc:	c8 01       	movw	r24, r16
    29be:	d2 d4       	rcall	.+2468   	; 0x3364 <Si114xWriteToRegister>
    29c0:	c8 0f       	add	r28, r24
    29c2:	d9 1f       	adc	r29, r25
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	66 e0       	ldi	r22, 0x06	; 6
    29c8:	c8 01       	movw	r24, r16
    29ca:	cc d4       	rcall	.+2456   	; 0x3364 <Si114xWriteToRegister>
    29cc:	c8 0f       	add	r28, r24
    29ce:	d9 1f       	adc	r29, r25
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	63 e0       	ldi	r22, 0x03	; 3
    29d4:	c8 01       	movw	r24, r16
    29d6:	c6 d4       	rcall	.+2444   	; 0x3364 <Si114xWriteToRegister>
    29d8:	c8 0f       	add	r28, r24
    29da:	d9 1f       	adc	r29, r25
    29dc:	4f ef       	ldi	r20, 0xFF	; 255
    29de:	61 e2       	ldi	r22, 0x21	; 33
    29e0:	c8 01       	movw	r24, r16
    29e2:	c0 d4       	rcall	.+2432   	; 0x3364 <Si114xWriteToRegister>
    29e4:	c8 0f       	add	r28, r24
    29e6:	d9 1f       	adc	r29, r25
    29e8:	41 e0       	ldi	r20, 0x01	; 1
    29ea:	68 e1       	ldi	r22, 0x18	; 24
    29ec:	c8 01       	movw	r24, r16
    29ee:	ba d4       	rcall	.+2420   	; 0x3364 <Si114xWriteToRegister>
    29f0:	c8 0f       	add	r28, r24
    29f2:	d9 1f       	adc	r29, r25
    29f4:	03 d5       	rcall	.+2566   	; 0x33fc <delay_10ms>
    29f6:	47 e1       	ldi	r20, 0x17	; 23
    29f8:	67 e0       	ldi	r22, 0x07	; 7
    29fa:	c8 01       	movw	r24, r16
    29fc:	b3 d4       	rcall	.+2406   	; 0x3364 <Si114xWriteToRegister>
    29fe:	8c 0f       	add	r24, r28
    2a00:	9d 1f       	adc	r25, r29
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
    2a06:	1f 91       	pop	r17
    2a08:	0f 91       	pop	r16
    2a0a:	08 95       	ret

00002a0c <si114x_init_ps1>:
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	8c 01       	movw	r16, r24
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	68 e0       	ldi	r22, 0x08	; 8
    2a1a:	a4 d4       	rcall	.+2376   	; 0x3364 <Si114xWriteToRegister>
    2a1c:	ec 01       	movw	r28, r24
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	6a e0       	ldi	r22, 0x0A	; 10
    2a22:	c8 01       	movw	r24, r16
    2a24:	9f d4       	rcall	.+2366   	; 0x3364 <Si114xWriteToRegister>
    2a26:	c8 0f       	add	r28, r24
    2a28:	d9 1f       	adc	r29, r25
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	69 e0       	ldi	r22, 0x09	; 9
    2a2e:	c8 01       	movw	r24, r16
    2a30:	99 d4       	rcall	.+2354   	; 0x3364 <Si114xWriteToRegister>
    2a32:	c8 0f       	add	r28, r24
    2a34:	d9 1f       	adc	r29, r25
    2a36:	c8 01       	movw	r24, r16
    2a38:	a6 df       	rcall	.-180    	; 0x2986 <si114x_reset>
    2a3a:	c8 0f       	add	r28, r24
    2a3c:	d9 1f       	adc	r29, r25
    2a3e:	42 e0       	ldi	r20, 0x02	; 2
    2a40:	6f e0       	ldi	r22, 0x0F	; 15
    2a42:	c8 01       	movw	r24, r16
    2a44:	8f d4       	rcall	.+2334   	; 0x3364 <Si114xWriteToRegister>
    2a46:	c8 0f       	add	r28, r24
    2a48:	d9 1f       	adc	r29, r25
    2a4a:	41 e0       	ldi	r20, 0x01	; 1
    2a4c:	61 e0       	ldi	r22, 0x01	; 1
    2a4e:	c8 01       	movw	r24, r16
    2a50:	3e df       	rcall	.-388    	; 0x28ce <Si114xParamSet>
    2a52:	c8 0f       	add	r28, r24
    2a54:	d9 1f       	adc	r29, r25
    2a56:	43 e0       	ldi	r20, 0x03	; 3
    2a58:	63 e0       	ldi	r22, 0x03	; 3
    2a5a:	c8 01       	movw	r24, r16
    2a5c:	83 d4       	rcall	.+2310   	; 0x3364 <Si114xWriteToRegister>
    2a5e:	c8 0f       	add	r28, r24
    2a60:	d9 1f       	adc	r29, r25
    2a62:	44 e0       	ldi	r20, 0x04	; 4
    2a64:	64 e0       	ldi	r22, 0x04	; 4
    2a66:	c8 01       	movw	r24, r16
    2a68:	7d d4       	rcall	.+2298   	; 0x3364 <Si114xWriteToRegister>
    2a6a:	c8 0f       	add	r28, r24
    2a6c:	d9 1f       	adc	r29, r25
    2a6e:	40 e3       	ldi	r20, 0x30	; 48
    2a70:	65 e0       	ldi	r22, 0x05	; 5
    2a72:	c8 01       	movw	r24, r16
    2a74:	77 d4       	rcall	.+2286   	; 0x3364 <Si114xWriteToRegister>
    2a76:	c8 0f       	add	r28, r24
    2a78:	d9 1f       	adc	r29, r25
    2a7a:	43 e0       	ldi	r20, 0x03	; 3
    2a7c:	67 e0       	ldi	r22, 0x07	; 7
    2a7e:	c8 01       	movw	r24, r16
    2a80:	26 df       	rcall	.-436    	; 0x28ce <Si114xParamSet>
    2a82:	c8 0f       	add	r28, r24
    2a84:	d9 1f       	adc	r29, r25
    2a86:	43 e0       	ldi	r20, 0x03	; 3
    2a88:	6e e0       	ldi	r22, 0x0E	; 14
    2a8a:	c8 01       	movw	r24, r16
    2a8c:	20 df       	rcall	.-448    	; 0x28ce <Si114xParamSet>
    2a8e:	c8 0f       	add	r28, r24
    2a90:	d9 1f       	adc	r29, r25
    2a92:	40 e0       	ldi	r20, 0x00	; 0
    2a94:	6b e0       	ldi	r22, 0x0B	; 11
    2a96:	c8 01       	movw	r24, r16
    2a98:	1a df       	rcall	.-460    	; 0x28ce <Si114xParamSet>
    2a9a:	c8 0f       	add	r28, r24
    2a9c:	d9 1f       	adc	r29, r25
    2a9e:	41 e0       	ldi	r20, 0x01	; 1
    2aa0:	62 e0       	ldi	r22, 0x02	; 2
    2aa2:	c8 01       	movw	r24, r16
    2aa4:	14 df       	rcall	.-472    	; 0x28ce <Si114xParamSet>
    2aa6:	c8 0f       	add	r28, r24
    2aa8:	d9 1f       	adc	r29, r25
    2aaa:	40 e7       	ldi	r20, 0x70	; 112
    2aac:	6a e0       	ldi	r22, 0x0A	; 10
    2aae:	c8 01       	movw	r24, r16
    2ab0:	0e df       	rcall	.-484    	; 0x28ce <Si114xParamSet>
    2ab2:	c8 0f       	add	r28, r24
    2ab4:	d9 1f       	adc	r29, r25
    2ab6:	44 e0       	ldi	r20, 0x04	; 4
    2ab8:	6c e0       	ldi	r22, 0x0C	; 12
    2aba:	c8 01       	movw	r24, r16
    2abc:	08 df       	rcall	.-496    	; 0x28ce <Si114xParamSet>
    2abe:	c8 0f       	add	r28, r24
    2ac0:	d9 1f       	adc	r29, r25
    2ac2:	48 e1       	ldi	r20, 0x18	; 24
    2ac4:	61 e1       	ldi	r22, 0x11	; 17
    2ac6:	c8 01       	movw	r24, r16
    2ac8:	4d d4       	rcall	.+2202   	; 0x3364 <Si114xWriteToRegister>
    2aca:	c8 0f       	add	r28, r24
    2acc:	d9 1f       	adc	r29, r25
    2ace:	41 e0       	ldi	r20, 0x01	; 1
    2ad0:	62 e1       	ldi	r22, 0x12	; 18
    2ad2:	c8 01       	movw	r24, r16
    2ad4:	47 d4       	rcall	.+2190   	; 0x3364 <Si114xWriteToRegister>
    2ad6:	c8 0f       	add	r28, r24
    2ad8:	d9 1f       	adc	r29, r25
    2ada:	4f ed       	ldi	r20, 0xDF	; 223
    2adc:	68 e0       	ldi	r22, 0x08	; 8
    2ade:	c8 01       	movw	r24, r16
    2ae0:	41 d4       	rcall	.+2178   	; 0x3364 <Si114xWriteToRegister>
    2ae2:	c8 0f       	add	r28, r24
    2ae4:	d9 1f       	adc	r29, r25
    2ae6:	48 e0       	ldi	r20, 0x08	; 8
    2ae8:	6a e0       	ldi	r22, 0x0A	; 10
    2aea:	c8 01       	movw	r24, r16
    2aec:	3b d4       	rcall	.+2166   	; 0x3364 <Si114xWriteToRegister>
    2aee:	c8 0f       	add	r28, r24
    2af0:	d9 1f       	adc	r29, r25
    2af2:	c8 01       	movw	r24, r16
    2af4:	e8 de       	rcall	.-560    	; 0x28c6 <Si114xPsAuto>
    2af6:	8c 0f       	add	r24, r28
    2af8:	9d 1f       	adc	r25, r29
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	1f 91       	pop	r17
    2b00:	0f 91       	pop	r16
    2b02:	08 95       	ret

00002b04 <si114x_setup_ps1>:
    2b04:	8a e5       	ldi	r24, 0x5A	; 90
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	3e df       	rcall	.-388    	; 0x2986 <si114x_reset>
    2b0a:	2f ef       	ldi	r18, 0xFF	; 255
    2b0c:	81 ee       	ldi	r24, 0xE1	; 225
    2b0e:	94 e0       	ldi	r25, 0x04	; 4
    2b10:	21 50       	subi	r18, 0x01	; 1
    2b12:	80 40       	sbci	r24, 0x00	; 0
    2b14:	90 40       	sbci	r25, 0x00	; 0
    2b16:	e1 f7       	brne	.-8      	; 0x2b10 <si114x_setup_ps1+0xc>
    2b18:	00 c0       	rjmp	.+0      	; 0x2b1a <si114x_setup_ps1+0x16>
    2b1a:	00 00       	nop
    2b1c:	8a e5       	ldi	r24, 0x5A	; 90
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	75 df       	rcall	.-278    	; 0x2a0c <si114x_init_ps1>
    2b22:	b1 cb       	rjmp	.-2206   	; 0x2286 <btn_si114x_enable_interrupt>

00002b24 <si114x_init>:
    2b24:	0f 93       	push	r16
    2b26:	1f 93       	push	r17
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	8c 01       	movw	r16, r24
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	68 e0       	ldi	r22, 0x08	; 8
    2b32:	18 d4       	rcall	.+2096   	; 0x3364 <Si114xWriteToRegister>
    2b34:	ec 01       	movw	r28, r24
    2b36:	40 e0       	ldi	r20, 0x00	; 0
    2b38:	6a e0       	ldi	r22, 0x0A	; 10
    2b3a:	c8 01       	movw	r24, r16
    2b3c:	13 d4       	rcall	.+2086   	; 0x3364 <Si114xWriteToRegister>
    2b3e:	c8 0f       	add	r28, r24
    2b40:	d9 1f       	adc	r29, r25
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	69 e0       	ldi	r22, 0x09	; 9
    2b46:	c8 01       	movw	r24, r16
    2b48:	0d d4       	rcall	.+2074   	; 0x3364 <Si114xWriteToRegister>
    2b4a:	c8 0f       	add	r28, r24
    2b4c:	d9 1f       	adc	r29, r25
    2b4e:	c8 01       	movw	r24, r16
    2b50:	1a df       	rcall	.-460    	; 0x2986 <si114x_reset>
    2b52:	c8 0f       	add	r28, r24
    2b54:	d9 1f       	adc	r29, r25
    2b56:	4f ef       	ldi	r20, 0xFF	; 255
    2b58:	6f e0       	ldi	r22, 0x0F	; 15
    2b5a:	c8 01       	movw	r24, r16
    2b5c:	03 d4       	rcall	.+2054   	; 0x3364 <Si114xWriteToRegister>
    2b5e:	c8 0f       	add	r28, r24
    2b60:	d9 1f       	adc	r29, r25
    2b62:	40 e0       	ldi	r20, 0x00	; 0
    2b64:	60 e1       	ldi	r22, 0x10	; 16
    2b66:	c8 01       	movw	r24, r16
    2b68:	fd d3       	rcall	.+2042   	; 0x3364 <Si114xWriteToRegister>
    2b6a:	c8 0f       	add	r28, r24
    2b6c:	d9 1f       	adc	r29, r25
    2b6e:	47 e7       	ldi	r20, 0x77	; 119
    2b70:	61 e0       	ldi	r22, 0x01	; 1
    2b72:	c8 01       	movw	r24, r16
    2b74:	ac de       	rcall	.-680    	; 0x28ce <Si114xParamSet>
    2b76:	c8 0f       	add	r28, r24
    2b78:	d9 1f       	adc	r29, r25
    2b7a:	41 e0       	ldi	r20, 0x01	; 1
    2b7c:	63 e0       	ldi	r22, 0x03	; 3
    2b7e:	c8 01       	movw	r24, r16
    2b80:	f1 d3       	rcall	.+2018   	; 0x3364 <Si114xWriteToRegister>
    2b82:	c8 0f       	add	r28, r24
    2b84:	d9 1f       	adc	r29, r25
    2b86:	4d e1       	ldi	r20, 0x1D	; 29
    2b88:	64 e0       	ldi	r22, 0x04	; 4
    2b8a:	c8 01       	movw	r24, r16
    2b8c:	eb d3       	rcall	.+2006   	; 0x3364 <Si114xWriteToRegister>
    2b8e:	c8 0f       	add	r28, r24
    2b90:	d9 1f       	adc	r29, r25
    2b92:	40 e0       	ldi	r20, 0x00	; 0
    2b94:	65 e0       	ldi	r22, 0x05	; 5
    2b96:	c8 01       	movw	r24, r16
    2b98:	e5 d3       	rcall	.+1994   	; 0x3364 <Si114xWriteToRegister>
    2b9a:	c8 0f       	add	r28, r24
    2b9c:	d9 1f       	adc	r29, r25
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	66 e0       	ldi	r22, 0x06	; 6
    2ba2:	c8 01       	movw	r24, r16
    2ba4:	df d3       	rcall	.+1982   	; 0x3364 <Si114xWriteToRegister>
    2ba6:	c8 0f       	add	r28, r24
    2ba8:	d9 1f       	adc	r29, r25
    2baa:	43 e0       	ldi	r20, 0x03	; 3
    2bac:	67 e0       	ldi	r22, 0x07	; 7
    2bae:	c8 01       	movw	r24, r16
    2bb0:	8e de       	rcall	.-740    	; 0x28ce <Si114xParamSet>
    2bb2:	c8 0f       	add	r28, r24
    2bb4:	d9 1f       	adc	r29, r25
    2bb6:	43 e0       	ldi	r20, 0x03	; 3
    2bb8:	68 e0       	ldi	r22, 0x08	; 8
    2bba:	c8 01       	movw	r24, r16
    2bbc:	88 de       	rcall	.-752    	; 0x28ce <Si114xParamSet>
    2bbe:	c8 0f       	add	r28, r24
    2bc0:	d9 1f       	adc	r29, r25
    2bc2:	43 e0       	ldi	r20, 0x03	; 3
    2bc4:	69 e0       	ldi	r22, 0x09	; 9
    2bc6:	c8 01       	movw	r24, r16
    2bc8:	82 de       	rcall	.-764    	; 0x28ce <Si114xParamSet>
    2bca:	c8 0f       	add	r28, r24
    2bcc:	d9 1f       	adc	r29, r25
    2bce:	43 e0       	ldi	r20, 0x03	; 3
    2bd0:	6e e0       	ldi	r22, 0x0E	; 14
    2bd2:	c8 01       	movw	r24, r16
    2bd4:	7c de       	rcall	.-776    	; 0x28ce <Si114xParamSet>
    2bd6:	c8 0f       	add	r28, r24
    2bd8:	d9 1f       	adc	r29, r25
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	6b e0       	ldi	r22, 0x0B	; 11
    2bde:	c8 01       	movw	r24, r16
    2be0:	76 de       	rcall	.-788    	; 0x28ce <Si114xParamSet>
    2be2:	c8 0f       	add	r28, r24
    2be4:	d9 1f       	adc	r29, r25
    2be6:	40 e0       	ldi	r20, 0x00	; 0
    2be8:	6e e1       	ldi	r22, 0x1E	; 30
    2bea:	c8 01       	movw	r24, r16
    2bec:	70 de       	rcall	.-800    	; 0x28ce <Si114xParamSet>
    2bee:	c8 0f       	add	r28, r24
    2bf0:	d9 1f       	adc	r29, r25
    2bf2:	40 e0       	ldi	r20, 0x00	; 0
    2bf4:	61 e1       	ldi	r22, 0x11	; 17
    2bf6:	c8 01       	movw	r24, r16
    2bf8:	6a de       	rcall	.-812    	; 0x28ce <Si114xParamSet>
    2bfa:	c8 0f       	add	r28, r24
    2bfc:	d9 1f       	adc	r29, r25
    2bfe:	41 e2       	ldi	r20, 0x21	; 33
    2c00:	62 e0       	ldi	r22, 0x02	; 2
    2c02:	c8 01       	movw	r24, r16
    2c04:	64 de       	rcall	.-824    	; 0x28ce <Si114xParamSet>
    2c06:	c8 0f       	add	r28, r24
    2c08:	d9 1f       	adc	r29, r25
    2c0a:	44 e0       	ldi	r20, 0x04	; 4
    2c0c:	63 e0       	ldi	r22, 0x03	; 3
    2c0e:	c8 01       	movw	r24, r16
    2c10:	5e de       	rcall	.-836    	; 0x28ce <Si114xParamSet>
    2c12:	c8 0f       	add	r28, r24
    2c14:	d9 1f       	adc	r29, r25
    2c16:	40 e7       	ldi	r20, 0x70	; 112
    2c18:	6a e0       	ldi	r22, 0x0A	; 10
    2c1a:	c8 01       	movw	r24, r16
    2c1c:	58 de       	rcall	.-848    	; 0x28ce <Si114xParamSet>
    2c1e:	c8 0f       	add	r28, r24
    2c20:	d9 1f       	adc	r29, r25
    2c22:	40 e7       	ldi	r20, 0x70	; 112
    2c24:	6d e1       	ldi	r22, 0x1D	; 29
    2c26:	c8 01       	movw	r24, r16
    2c28:	52 de       	rcall	.-860    	; 0x28ce <Si114xParamSet>
    2c2a:	c8 0f       	add	r28, r24
    2c2c:	d9 1f       	adc	r29, r25
    2c2e:	40 e7       	ldi	r20, 0x70	; 112
    2c30:	60 e1       	ldi	r22, 0x10	; 16
    2c32:	c8 01       	movw	r24, r16
    2c34:	4c de       	rcall	.-872    	; 0x28ce <Si114xParamSet>
    2c36:	c8 0f       	add	r28, r24
    2c38:	d9 1f       	adc	r29, r25
    2c3a:	44 e0       	ldi	r20, 0x04	; 4
    2c3c:	6c e0       	ldi	r22, 0x0C	; 12
    2c3e:	c8 01       	movw	r24, r16
    2c40:	46 de       	rcall	.-884    	; 0x28ce <Si114xParamSet>
    2c42:	c8 0f       	add	r28, r24
    2c44:	d9 1f       	adc	r29, r25
    2c46:	40 e2       	ldi	r20, 0x20	; 32
    2c48:	6f e1       	ldi	r22, 0x1F	; 31
    2c4a:	c8 01       	movw	r24, r16
    2c4c:	40 de       	rcall	.-896    	; 0x28ce <Si114xParamSet>
    2c4e:	c8 0f       	add	r28, r24
    2c50:	d9 1f       	adc	r29, r25
    2c52:	40 e2       	ldi	r20, 0x20	; 32
    2c54:	62 e1       	ldi	r22, 0x12	; 18
    2c56:	c8 01       	movw	r24, r16
    2c58:	3a de       	rcall	.-908    	; 0x28ce <Si114xParamSet>
    2c5a:	c8 0f       	add	r28, r24
    2c5c:	d9 1f       	adc	r29, r25
    2c5e:	44 e9       	ldi	r20, 0x94	; 148
    2c60:	68 e0       	ldi	r22, 0x08	; 8
    2c62:	c8 01       	movw	r24, r16
    2c64:	7f d3       	rcall	.+1790   	; 0x3364 <Si114xWriteToRegister>
    2c66:	c8 0f       	add	r28, r24
    2c68:	d9 1f       	adc	r29, r25
    2c6a:	48 e0       	ldi	r20, 0x08	; 8
    2c6c:	6a e0       	ldi	r22, 0x0A	; 10
    2c6e:	c8 01       	movw	r24, r16
    2c70:	79 d3       	rcall	.+1778   	; 0x3364 <Si114xWriteToRegister>
    2c72:	c8 0f       	add	r28, r24
    2c74:	d9 1f       	adc	r29, r25
    2c76:	48 e0       	ldi	r20, 0x08	; 8
    2c78:	69 e0       	ldi	r22, 0x09	; 9
    2c7a:	c8 01       	movw	r24, r16
    2c7c:	73 d3       	rcall	.+1766   	; 0x3364 <Si114xWriteToRegister>
    2c7e:	c8 0f       	add	r28, r24
    2c80:	d9 1f       	adc	r29, r25
    2c82:	c8 01       	movw	r24, r16
    2c84:	22 de       	rcall	.-956    	; 0x28ca <Si114xPsAlsAuto>
    2c86:	8c 0f       	add	r24, r28
    2c88:	9d 1f       	adc	r25, r29
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	1f 91       	pop	r17
    2c90:	0f 91       	pop	r16
    2c92:	08 95       	ret

00002c94 <si114x_setup>:
    2c94:	e0 e7       	ldi	r30, 0x70	; 112
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	83 81       	ldd	r24, Z+3	; 0x03
    2c9a:	8d 7f       	andi	r24, 0xFD	; 253
    2c9c:	83 83       	std	Z+3, r24	; 0x03
    2c9e:	e0 e4       	ldi	r30, 0x40	; 64
    2ca0:	f8 e0       	ldi	r31, 0x08	; 8
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	80 83       	st	Z, r24
    2ca6:	90 e8       	ldi	r25, 0x80	; 128
    2ca8:	96 a3       	std	Z+38, r25	; 0x26
    2caa:	9c e0       	ldi	r25, 0x0C	; 12
    2cac:	97 a3       	std	Z+39, r25	; 0x27
    2cae:	86 83       	std	Z+6, r24	; 0x06
    2cb0:	8a e5       	ldi	r24, 0x5A	; 90
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	68 de       	rcall	.-816    	; 0x2986 <si114x_reset>
    2cb6:	2f ef       	ldi	r18, 0xFF	; 255
    2cb8:	81 ee       	ldi	r24, 0xE1	; 225
    2cba:	94 e0       	ldi	r25, 0x04	; 4
    2cbc:	21 50       	subi	r18, 0x01	; 1
    2cbe:	80 40       	sbci	r24, 0x00	; 0
    2cc0:	90 40       	sbci	r25, 0x00	; 0
    2cc2:	e1 f7       	brne	.-8      	; 0x2cbc <si114x_setup+0x28>
    2cc4:	00 c0       	rjmp	.+0      	; 0x2cc6 <si114x_setup+0x32>
    2cc6:	00 00       	nop
    2cc8:	8a e5       	ldi	r24, 0x5A	; 90
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	2b cf       	rjmp	.-426    	; 0x2b24 <si114x_init>

00002cce <si114x_baseline_calibration>:
    2cce:	ef 92       	push	r14
    2cd0:	ff 92       	push	r15
    2cd2:	0f 93       	push	r16
    2cd4:	1f 93       	push	r17
    2cd6:	cf 93       	push	r28
    2cd8:	df 93       	push	r29
    2cda:	ec 01       	movw	r28, r24
    2cdc:	db df       	rcall	.-74     	; 0x2c94 <si114x_setup>
    2cde:	80 e8       	ldi	r24, 0x80	; 128
    2ce0:	80 93 08 20 	sts	0x2008, r24
    2ce4:	60 e0       	ldi	r22, 0x00	; 0
    2ce6:	81 ea       	ldi	r24, 0xA1	; 161
    2ce8:	94 e2       	ldi	r25, 0x24	; 36
    2cea:	0e 94 a3 22 	call	0x4546	; 0x4546 <display_print_scrolling_text>
    2cee:	76 ec       	ldi	r23, 0xC6	; 198
    2cf0:	e7 2e       	mov	r14, r23
    2cf2:	74 e2       	ldi	r23, 0x24	; 36
    2cf4:	f7 2e       	mov	r15, r23
    2cf6:	01 e0       	ldi	r16, 0x01	; 1
    2cf8:	25 e0       	ldi	r18, 0x05	; 5
    2cfa:	4a e0       	ldi	r20, 0x0A	; 10
    2cfc:	6a e0       	ldi	r22, 0x0A	; 10
    2cfe:	8a e0       	ldi	r24, 0x0A	; 10
    2d00:	0e 94 42 20 	call	0x4084	; 0x4084 <display_draw_line>
    2d04:	2a e0       	ldi	r18, 0x0A	; 10
    2d06:	4a e0       	ldi	r20, 0x0A	; 10
    2d08:	6a e0       	ldi	r22, 0x0A	; 10
    2d0a:	85 e0       	ldi	r24, 0x05	; 5
    2d0c:	0e 94 42 20 	call	0x4084	; 0x4084 <display_draw_line>
    2d10:	2a e0       	ldi	r18, 0x0A	; 10
    2d12:	45 e0       	ldi	r20, 0x05	; 5
    2d14:	65 e0       	ldi	r22, 0x05	; 5
    2d16:	85 e0       	ldi	r24, 0x05	; 5
    2d18:	0e 94 42 20 	call	0x4084	; 0x4084 <display_draw_line>
    2d1c:	25 e0       	ldi	r18, 0x05	; 5
    2d1e:	4a e0       	ldi	r20, 0x0A	; 10
    2d20:	65 e0       	ldi	r22, 0x05	; 5
    2d22:	85 e0       	ldi	r24, 0x05	; 5
    2d24:	0e 94 42 20 	call	0x4084	; 0x4084 <display_draw_line>
    2d28:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
    2d2c:	ce 01       	movw	r24, r28
    2d2e:	52 dd       	rcall	.-1372   	; 0x27d4 <si114x_get_data>
    2d30:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d32:	8f 93       	push	r24
    2d34:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d36:	8f 93       	push	r24
    2d38:	ff 92       	push	r15
    2d3a:	ef 92       	push	r14
    2d3c:	0e 94 a9 50 	call	0xa152	; 0xa152 <printf>
    2d40:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d42:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	81 34       	cpi	r24, 0x41	; 65
    2d4e:	26 e0       	ldi	r18, 0x06	; 6
    2d50:	92 07       	cpc	r25, r18
    2d52:	88 f6       	brcc	.-94     	; 0x2cf6 <si114x_baseline_calibration+0x28>
    2d54:	80 93 30 2b 	sts	0x2B30, r24
    2d58:	90 93 31 2b 	sts	0x2B31, r25
    2d5c:	8f ef       	ldi	r24, 0xFF	; 255
    2d5e:	97 ea       	ldi	r25, 0xA7	; 167
    2d60:	21 e6       	ldi	r18, 0x61	; 97
    2d62:	81 50       	subi	r24, 0x01	; 1
    2d64:	90 40       	sbci	r25, 0x00	; 0
    2d66:	20 40       	sbci	r18, 0x00	; 0
    2d68:	e1 f7       	brne	.-8      	; 0x2d62 <si114x_baseline_calibration+0x94>
    2d6a:	00 c0       	rjmp	.+0      	; 0x2d6c <si114x_baseline_calibration+0x9e>
    2d6c:	00 00       	nop
    2d6e:	01 e8       	ldi	r16, 0x81	; 129
    2d70:	10 e0       	ldi	r17, 0x00	; 0
    2d72:	01 50       	subi	r16, 0x01	; 1
    2d74:	11 09       	sbc	r17, r1
    2d76:	01 15       	cp	r16, r1
    2d78:	11 05       	cpc	r17, r1
    2d7a:	69 f0       	breq	.+26     	; 0x2d96 <si114x_baseline_calibration+0xc8>
    2d7c:	80 91 80 2a 	lds	r24, 0x2A80
    2d80:	90 91 81 2a 	lds	r25, 0x2A81
    2d84:	8a 83       	std	Y+2, r24	; 0x02
    2d86:	9b 83       	std	Y+3, r25	; 0x03
    2d88:	ce 01       	movw	r24, r28
    2d8a:	24 dd       	rcall	.-1464   	; 0x27d4 <si114x_get_data>
    2d8c:	be 01       	movw	r22, r28
    2d8e:	8a e5       	ldi	r24, 0x5A	; 90
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	c8 d1       	rcall	.+912    	; 0x3124 <si114x_process_samples>
    2d94:	ee cf       	rjmp	.-36     	; 0x2d72 <si114x_baseline_calibration+0xa4>
    2d96:	df 91       	pop	r29
    2d98:	cf 91       	pop	r28
    2d9a:	1f 91       	pop	r17
    2d9c:	0f 91       	pop	r16
    2d9e:	ff 90       	pop	r15
    2da0:	ef 90       	pop	r14
    2da2:	08 95       	ret

00002da4 <__vector_20>:

ISR(TCC1_OVF_vect) {
    2da4:	1f 92       	push	r1
    2da6:	0f 92       	push	r0
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	0f 92       	push	r0
    2dac:	11 24       	eor	r1, r1
    2dae:	8f 93       	push	r24
    2db0:	9f 93       	push	r25
	counter++;
    2db2:	80 91 80 2a 	lds	r24, 0x2A80
    2db6:	90 91 81 2a 	lds	r25, 0x2A81
    2dba:	01 96       	adiw	r24, 0x01	; 1
    2dbc:	80 93 80 2a 	sts	0x2A80, r24
    2dc0:	90 93 81 2a 	sts	0x2A81, r25
}
    2dc4:	9f 91       	pop	r25
    2dc6:	8f 91       	pop	r24
    2dc8:	0f 90       	pop	r0
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	0f 90       	pop	r0
    2dce:	1f 90       	pop	r1
    2dd0:	18 95       	reti

00002dd2 <isIRStable>:
        }
    }
}

char isIRStable( SI114X_IRQ_SAMPLE *samples)
{
    2dd2:	8f 92       	push	r8
    2dd4:	9f 92       	push	r9
    2dd6:	af 92       	push	r10
    2dd8:	bf 92       	push	r11
    2dda:	cf 92       	push	r12
    2ddc:	df 92       	push	r13
    2dde:	ef 92       	push	r14
    2de0:	ff 92       	push	r15
                                        //
    u32 xdata IR = (u32) samples->ir; // Make a copy of ALS IR Reading
    
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 
    2de2:	40 91 91 2a 	lds	r20, 0x2A91
    2de6:	50 91 92 2a 	lds	r21, 0x2A92
    2dea:	60 91 93 2a 	lds	r22, 0x2A93
    2dee:	70 91 94 2a 	lds	r23, 0x2A94
    2df2:	fc 01       	movw	r30, r24
    2df4:	c0 84       	ldd	r12, Z+8	; 0x08
    2df6:	d1 84       	ldd	r13, Z+9	; 0x09
    2df8:	45 2b       	or	r20, r21
    2dfa:	46 2b       	or	r20, r22
    2dfc:	47 2b       	or	r20, r23
    2dfe:	61 f4       	brne	.+24     	; 0x2e18 <isIRStable+0x46>
    2e00:	c6 01       	movw	r24, r12
    2e02:	a0 e0       	ldi	r26, 0x00	; 0
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	80 93 91 2a 	sts	0x2A91, r24
    2e0a:	90 93 92 2a 	sts	0x2A92, r25
    2e0e:	a0 93 93 2a 	sts	0x2A93, r26
    2e12:	b0 93 94 2a 	sts	0x2A94, r27
    2e16:	06 c0       	rjmp	.+12     	; 0x2e24 <isIRStable+0x52>

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    2e18:	f1 e8       	ldi	r31, 0x81	; 129
    2e1a:	cf 16       	cp	r12, r31
    2e1c:	fb eb       	ldi	r31, 0xBB	; 187
    2e1e:	df 06       	cpc	r13, r31
    2e20:	08 f0       	brcs	.+2      	; 0x2e24 <isIRStable+0x52>
    2e22:	47 c0       	rjmp	.+142    	; 0x2eb2 <isIRStable+0xe0>

    if( samples->ir < (IRlast + IRlast/2) && samples->ir > (IRlast - IRlast/2))
    2e24:	e1 2c       	mov	r14, r1
    2e26:	f1 2c       	mov	r15, r1
    2e28:	20 91 91 2a 	lds	r18, 0x2A91
    2e2c:	30 91 92 2a 	lds	r19, 0x2A92
    2e30:	40 91 93 2a 	lds	r20, 0x2A93
    2e34:	50 91 94 2a 	lds	r21, 0x2A94
    2e38:	da 01       	movw	r26, r20
    2e3a:	c9 01       	movw	r24, r18
    2e3c:	b6 95       	lsr	r27
    2e3e:	a7 95       	ror	r26
    2e40:	97 95       	ror	r25
    2e42:	87 95       	ror	r24
    2e44:	4c 01       	movw	r8, r24
    2e46:	5d 01       	movw	r10, r26
    2e48:	82 0e       	add	r8, r18
    2e4a:	93 1e       	adc	r9, r19
    2e4c:	a4 1e       	adc	r10, r20
    2e4e:	b5 1e       	adc	r11, r21
    2e50:	c8 14       	cp	r12, r8
    2e52:	d9 04       	cpc	r13, r9
    2e54:	ea 04       	cpc	r14, r10
    2e56:	fb 04       	cpc	r15, r11
    2e58:	20 f5       	brcc	.+72     	; 0x2ea2 <isIRStable+0xd0>
    2e5a:	49 01       	movw	r8, r18
    2e5c:	5a 01       	movw	r10, r20
    2e5e:	88 1a       	sub	r8, r24
    2e60:	99 0a       	sbc	r9, r25
    2e62:	aa 0a       	sbc	r10, r26
    2e64:	bb 0a       	sbc	r11, r27
    2e66:	8c 14       	cp	r8, r12
    2e68:	9d 04       	cpc	r9, r13
    2e6a:	ae 04       	cpc	r10, r14
    2e6c:	bf 04       	cpc	r11, r15
    2e6e:	c8 f4       	brcc	.+50     	; 0x2ea2 <isIRStable+0xd0>
    {
        // If IR is within 3 dB, declare it stable
        // and perform some averaging
        IRlast = (samples->ir + (IRlast*3)) / 4;
    2e70:	a3 e0       	ldi	r26, 0x03	; 3
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <__muluhisi3>
    2e78:	6c 0d       	add	r22, r12
    2e7a:	7d 1d       	adc	r23, r13
    2e7c:	8e 1d       	adc	r24, r14
    2e7e:	9f 1d       	adc	r25, r15
    2e80:	22 e0       	ldi	r18, 0x02	; 2
    2e82:	96 95       	lsr	r25
    2e84:	87 95       	ror	r24
    2e86:	77 95       	ror	r23
    2e88:	67 95       	ror	r22
    2e8a:	2a 95       	dec	r18
    2e8c:	d1 f7       	brne	.-12     	; 0x2e82 <isIRStable+0xb0>
    2e8e:	60 93 91 2a 	sts	0x2A91, r22
    2e92:	70 93 92 2a 	sts	0x2A92, r23
    2e96:	80 93 93 2a 	sts	0x2A93, r24
    2e9a:	90 93 94 2a 	sts	0x2A94, r25
        return 1;
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	09 c0       	rjmp	.+18     	; 0x2eb4 <isIRStable+0xe2>
    }
    else
    {
        // Otherwise, return false and update
        // new IRlast value for next time
        IRlast = samples->ir;
    2ea2:	c0 92 91 2a 	sts	0x2A91, r12
    2ea6:	d0 92 92 2a 	sts	0x2A92, r13
    2eaa:	e0 92 93 2a 	sts	0x2A93, r14
    2eae:	f0 92 94 2a 	sts	0x2A94, r15
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
        // new IRlast value for next time
        IRlast = samples->ir;
        return 0;
    }
    return 0;
}
    2eb4:	ff 90       	pop	r15
    2eb6:	ef 90       	pop	r14
    2eb8:	df 90       	pop	r13
    2eba:	cf 90       	pop	r12
    2ebc:	bf 90       	pop	r11
    2ebe:	af 90       	pop	r10
    2ec0:	9f 90       	pop	r9
    2ec2:	8f 90       	pop	r8
    2ec4:	08 95       	ret

00002ec6 <IRCompensation>:
//             use { 11, 33, 33 }
//          Sm PD, PSRANGE = 1 
//             use { 23, 64, 56 }
////////////////////////////////////////////////////////////////////////////////
void IRCompensation(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u8 ircorrection[])
{
    2ec6:	0f 93       	push	r16
    2ec8:	1f 93       	push	r17
    2eca:	cf 93       	push	r28
    2ecc:	df 93       	push	r29
    2ece:	eb 01       	movw	r28, r22
    2ed0:	fa 01       	movw	r30, r20
    // Calculate correction factor based on the ALS IR + PS reading 
    // subtracting out the 256 count offset contained in both measurements
    // Full equation comes out to:
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    2ed2:	81 30       	cpi	r24, 0x01	; 1
    2ed4:	f1 f1       	breq	.+124    	; 0x2f52 <IRCompensation+0x8c>
    2ed6:	00 f1       	brcs	.+64     	; 0x2f18 <IRCompensation+0x52>
    2ed8:	82 30       	cpi	r24, 0x02	; 2
    2eda:	09 f0       	breq	.+2      	; 0x2ede <IRCompensation+0x18>
    2edc:	56 c0       	rjmp	.+172    	; 0x2f8a <IRCompensation+0xc4>
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
            Correction = Correction/10000;
            samples->ps2 = samples->ps2 + Correction;            
            break;
		case 2:
			Correction = ((u32)samples->ir + (u32)(samples->ps3) - 512) * (u32) ircorrection[proxChannel];
    2ede:	0e 85       	ldd	r16, Y+14	; 0x0e
    2ee0:	1f 85       	ldd	r17, Y+15	; 0x0f
    2ee2:	a2 81       	ldd	r26, Z+2	; 0x02
    2ee4:	88 85       	ldd	r24, Y+8	; 0x08
    2ee6:	99 85       	ldd	r25, Y+9	; 0x09
    2ee8:	98 01       	movw	r18, r16
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	50 e0       	ldi	r21, 0x00	; 0
    2eee:	28 0f       	add	r18, r24
    2ef0:	39 1f       	adc	r19, r25
    2ef2:	41 1d       	adc	r20, r1
    2ef4:	51 1d       	adc	r21, r1
    2ef6:	32 50       	subi	r19, 0x02	; 2
    2ef8:	41 09       	sbc	r20, r1
    2efa:	51 09       	sbc	r21, r1
    2efc:	b0 e0       	ldi	r27, 0x00	; 0
    2efe:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <__muluhisi3>
			Correction = Correction/10000;
    2f02:	20 e1       	ldi	r18, 0x10	; 16
    2f04:	37 e2       	ldi	r19, 0x27	; 39
    2f06:	40 e0       	ldi	r20, 0x00	; 0
    2f08:	50 e0       	ldi	r21, 0x00	; 0
    2f0a:	0e 94 be 4e 	call	0x9d7c	; 0x9d7c <__udivmodsi4>
			samples->ps3 = samples->ps3 + Correction;
    2f0e:	20 0f       	add	r18, r16
    2f10:	31 1f       	adc	r19, r17
    2f12:	2e 87       	std	Y+14, r18	; 0x0e
    2f14:	3f 87       	std	Y+15, r19	; 0x0f
			break;
    2f16:	39 c0       	rjmp	.+114    	; 0x2f8a <IRCompensation+0xc4>
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    2f18:	0a 85       	ldd	r16, Y+10	; 0x0a
    2f1a:	1b 85       	ldd	r17, Y+11	; 0x0b
    2f1c:	a0 81       	ld	r26, Z
    2f1e:	88 85       	ldd	r24, Y+8	; 0x08
    2f20:	99 85       	ldd	r25, Y+9	; 0x09
    2f22:	98 01       	movw	r18, r16
    2f24:	40 e0       	ldi	r20, 0x00	; 0
    2f26:	50 e0       	ldi	r21, 0x00	; 0
    2f28:	28 0f       	add	r18, r24
    2f2a:	39 1f       	adc	r19, r25
    2f2c:	41 1d       	adc	r20, r1
    2f2e:	51 1d       	adc	r21, r1
    2f30:	32 50       	subi	r19, 0x02	; 2
    2f32:	41 09       	sbc	r20, r1
    2f34:	51 09       	sbc	r21, r1
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <__muluhisi3>
            Correction = Correction/10000;
    2f3c:	20 e1       	ldi	r18, 0x10	; 16
    2f3e:	37 e2       	ldi	r19, 0x27	; 39
    2f40:	40 e0       	ldi	r20, 0x00	; 0
    2f42:	50 e0       	ldi	r21, 0x00	; 0
    2f44:	0e 94 be 4e 	call	0x9d7c	; 0x9d7c <__udivmodsi4>
            samples->ps1 = samples->ps1 + Correction;    
    2f48:	20 0f       	add	r18, r16
    2f4a:	31 1f       	adc	r19, r17
    2f4c:	2a 87       	std	Y+10, r18	; 0x0a
    2f4e:	3b 87       	std	Y+11, r19	; 0x0b
    2f50:	1c c0       	rjmp	.+56     	; 0x2f8a <IRCompensation+0xc4>
            break;
        case 1:
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
    2f52:	0c 85       	ldd	r16, Y+12	; 0x0c
    2f54:	1d 85       	ldd	r17, Y+13	; 0x0d
    2f56:	a1 81       	ldd	r26, Z+1	; 0x01
    2f58:	88 85       	ldd	r24, Y+8	; 0x08
    2f5a:	99 85       	ldd	r25, Y+9	; 0x09
    2f5c:	98 01       	movw	r18, r16
    2f5e:	40 e0       	ldi	r20, 0x00	; 0
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	28 0f       	add	r18, r24
    2f64:	39 1f       	adc	r19, r25
    2f66:	41 1d       	adc	r20, r1
    2f68:	51 1d       	adc	r21, r1
    2f6a:	32 50       	subi	r19, 0x02	; 2
    2f6c:	41 09       	sbc	r20, r1
    2f6e:	51 09       	sbc	r21, r1
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <__muluhisi3>
            Correction = Correction/10000;
    2f76:	20 e1       	ldi	r18, 0x10	; 16
    2f78:	37 e2       	ldi	r19, 0x27	; 39
    2f7a:	40 e0       	ldi	r20, 0x00	; 0
    2f7c:	50 e0       	ldi	r21, 0x00	; 0
    2f7e:	0e 94 be 4e 	call	0x9d7c	; 0x9d7c <__udivmodsi4>
            samples->ps2 = samples->ps2 + Correction;            
    2f82:	20 0f       	add	r18, r16
    2f84:	31 1f       	adc	r19, r17
    2f86:	2c 87       	std	Y+12, r18	; 0x0c
    2f88:	3d 87       	std	Y+13, r19	; 0x0d
			samples->ps3 = samples->ps3 + Correction;
			break;
        default:
            break;
    }
}
    2f8a:	df 91       	pop	r29
    2f8c:	cf 91       	pop	r28
    2f8e:	1f 91       	pop	r17
    2f90:	0f 91       	pop	r16
    2f92:	08 95       	ret

00002f94 <calcBaseline>:
//          50  = Lg PD, PSRANGE=0, 180 mA 
//          10  = Lg PD, PSRANGE=1, 360 mA 
//          4  = Sm PD, PSRANGE=1, 360 mA 
////////////////////////////////////////////////////////////////////////////////
void calcBaseline(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u16 noise_margin)
{
    2f94:	cf 92       	push	r12
    2f96:	df 92       	push	r13
    2f98:	ef 92       	push	r14
    2f9a:	ff 92       	push	r15
    2f9c:	0f 93       	push	r16
    2f9e:	1f 93       	push	r17
    2fa0:	cf 93       	push	r28
    2fa2:	df 93       	push	r29

    static u16 xdata dynamic_baseline[3] = {0,0,0};

    u16 xdata *pPS;

    switch(proxChannel)
    2fa4:	81 30       	cpi	r24, 0x01	; 1
    2fa6:	49 f0       	breq	.+18     	; 0x2fba <calcBaseline+0x26>
    2fa8:	28 f0       	brcs	.+10     	; 0x2fb4 <calcBaseline+0x20>
    2faa:	82 30       	cpi	r24, 0x02	; 2
    2fac:	49 f4       	brne	.+18     	; 0x2fc0 <calcBaseline+0x2c>
            break;
        case 1:
            pPS = &samples->ps2;
            break;
        case 2:
            pPS = &samples->ps3;
    2fae:	62 5f       	subi	r22, 0xF2	; 242
    2fb0:	7f 4f       	sbci	r23, 0xFF	; 255
            break;
    2fb2:	25 c0       	rjmp	.+74     	; 0x2ffe <calcBaseline+0x6a>
    u16 xdata *pPS;

    switch(proxChannel)
    {
        case 0:
            pPS = &samples->ps1;
    2fb4:	66 5f       	subi	r22, 0xF6	; 246
    2fb6:	7f 4f       	sbci	r23, 0xFF	; 255
            break;
    2fb8:	22 c0       	rjmp	.+68     	; 0x2ffe <calcBaseline+0x6a>
        case 1:
            pPS = &samples->ps2;
    2fba:	64 5f       	subi	r22, 0xF4	; 244
    2fbc:	7f 4f       	sbci	r23, 0xFF	; 255
            break;
    2fbe:	1f c0       	rjmp	.+62     	; 0x2ffe <calcBaseline+0x6a>
            break;
        default:
            // Invalid Prox Channel. Reset all static variables 
            // to initial values
            average    = 0;
            dynamic_baseline[0] = 0;
    2fc0:	10 92 8b 2a 	sts	0x2A8B, r1
    2fc4:	10 92 8c 2a 	sts	0x2A8C, r1
            dynamic_baseline[1] = 0;
    2fc8:	10 92 8d 2a 	sts	0x2A8D, r1
    2fcc:	10 92 8e 2a 	sts	0x2A8E, r1
			dynamic_baseline[2] = 0;
    2fd0:	10 92 8f 2a 	sts	0x2A8F, r1
    2fd4:	10 92 90 2a 	sts	0x2A90, r1
            rollingMax[0] = 0;
    2fd8:	10 92 85 2a 	sts	0x2A85, r1
    2fdc:	10 92 86 2a 	sts	0x2A86, r1
            rollingMax[1] = 0;
    2fe0:	10 92 87 2a 	sts	0x2A87, r1
    2fe4:	10 92 88 2a 	sts	0x2A88, r1
			rollingMax[2] = 0;
    2fe8:	10 92 89 2a 	sts	0x2A89, r1
    2fec:	10 92 8a 2a 	sts	0x2A8A, r1
            Maxcount[0]   = 0;
    2ff0:	10 92 82 2a 	sts	0x2A82, r1
            Maxcount[1]   = 0;
    2ff4:	10 92 83 2a 	sts	0x2A83, r1
			Maxcount[2]   = 0;
    2ff8:	10 92 84 2a 	sts	0x2A84, r1
            return;
    2ffc:	8a c0       	rjmp	.+276    	; 0x3112 <__stack+0x113>
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    2ffe:	c8 2e       	mov	r12, r24
    3000:	d1 2c       	mov	r13, r1
    3002:	f6 01       	movw	r30, r12
    3004:	ee 0f       	add	r30, r30
    3006:	ff 1f       	adc	r31, r31
    3008:	ef 01       	movw	r28, r30
    300a:	c5 57       	subi	r28, 0x75	; 117
    300c:	d5 4d       	sbci	r29, 0xD5	; 213
    300e:	88 81       	ld	r24, Y
    3010:	99 81       	ldd	r25, Y+1	; 0x01
    3012:	db 01       	movw	r26, r22
    3014:	6d 91       	ld	r22, X+
    3016:	7c 91       	ld	r23, X
    3018:	89 2b       	or	r24, r25
    301a:	71 f4       	brne	.+28     	; 0x3038 <__stack+0x39>
    301c:	cf 01       	movw	r24, r30
    301e:	8b 56       	subi	r24, 0x6B	; 107
    3020:	95 4d       	sbci	r25, 0xD5	; 213
    3022:	dc 01       	movw	r26, r24
    3024:	8d 91       	ld	r24, X+
    3026:	9c 91       	ld	r25, X
    3028:	68 17       	cp	r22, r24
    302a:	79 07       	cpc	r23, r25
    302c:	18 f4       	brcc	.+6      	; 0x3034 <__stack+0x35>
    {
       dynamic_baseline[proxChannel] = *pPS;
    302e:	68 83       	st	Y, r22
    3030:	79 83       	std	Y+1, r23	; 0x01
    3032:	02 c0       	rjmp	.+4      	; 0x3038 <__stack+0x39>
    } else if ( dynamic_baseline[proxChannel] == 0)
    {
       dynamic_baseline[proxChannel] = maxLeakage[proxChannel];
    3034:	88 83       	st	Y, r24
    3036:	99 83       	std	Y+1, r25	; 0x01
    } 

    // Only process samples which are below the maxLeakage values, anything 
    // higher is a signal created by an object in front of the system which 
    // should not be baselined
    if ( *pPS < maxLeakage[proxChannel] )
    3038:	ef 01       	movw	r28, r30
    303a:	cb 56       	subi	r28, 0x6B	; 107
    303c:	d5 4d       	sbci	r29, 0xD5	; 213
    303e:	88 81       	ld	r24, Y
    3040:	99 81       	ldd	r25, Y+1	; 0x01
    3042:	68 17       	cp	r22, r24
    3044:	79 07       	cpc	r23, r25
    3046:	08 f0       	brcs	.+2      	; 0x304a <__stack+0x4b>
    3048:	4d c0       	rjmp	.+154    	; 0x30e4 <__stack+0xe5>
    {
        average = dynamic_baseline[proxChannel]*7;
    304a:	ef 01       	movw	r28, r30
    304c:	c5 57       	subi	r28, 0x75	; 117
    304e:	d5 4d       	sbci	r29, 0xD5	; 213
    3050:	09 90       	ld	r0, Y+
    3052:	d8 81       	ld	r29, Y
    3054:	c0 2d       	mov	r28, r0
    3056:	27 e0       	ldi	r18, 0x07	; 7
    3058:	2c 9f       	mul	r18, r28
    305a:	c0 01       	movw	r24, r0
    305c:	2d 9f       	mul	r18, r29
    305e:	90 0d       	add	r25, r0
    3060:	11 24       	eor	r1, r1
        average = average + (u32)(*pPS);
    3062:	8b 01       	movw	r16, r22
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	08 0f       	add	r16, r24
    306a:	19 1f       	adc	r17, r25
    306c:	21 1d       	adc	r18, r1
    306e:	31 1d       	adc	r19, r1
        average = average/8;
    3070:	a3 e0       	ldi	r26, 0x03	; 3
    3072:	36 95       	lsr	r19
    3074:	27 95       	ror	r18
    3076:	17 95       	ror	r17
    3078:	07 95       	ror	r16
    307a:	aa 95       	dec	r26
    307c:	d1 f7       	brne	.-12     	; 0x3072 <__stack+0x73>
        // If the new sample has not changed the baseline average by a large 
        // amount, then allow the rollingMax variable to update. If the new 
        // sample did move the baseline average by a lot, then it's possible 
        // it was created by a proximity event. So, do not consider this part 
        // of the rollingMax
        if ( dynamic_baseline[proxChannel] <= (u16)average + (u16)average/64
    307e:	c8 01       	movw	r24, r16
    3080:	b6 e0       	ldi	r27, 0x06	; 6
    3082:	96 95       	lsr	r25
    3084:	87 95       	ror	r24
    3086:	ba 95       	dec	r27
    3088:	e1 f7       	brne	.-8      	; 0x3082 <__stack+0x83>
    308a:	7c 01       	movw	r14, r24
    308c:	e0 0e       	add	r14, r16
    308e:	f1 1e       	adc	r15, r17
    3090:	ec 16       	cp	r14, r28
    3092:	fd 06       	cpc	r15, r29
    3094:	10 f1       	brcs	.+68     	; 0x30da <__stack+0xdb>
            && dynamic_baseline[proxChannel] >= (u16)average - (u16)average/64)
    3096:	d8 01       	movw	r26, r16
    3098:	a8 1b       	sub	r26, r24
    309a:	b9 0b       	sbc	r27, r25
    309c:	ca 17       	cp	r28, r26
    309e:	db 07       	cpc	r29, r27
    30a0:	e0 f0       	brcs	.+56     	; 0x30da <__stack+0xdb>
        {
            if ( rollingMax[proxChannel] == 0 )
    30a2:	ef 01       	movw	r28, r30
    30a4:	cb 57       	subi	r28, 0x7B	; 123
    30a6:	d5 4d       	sbci	r29, 0xD5	; 213
    30a8:	e8 80       	ld	r14, Y
    30aa:	f9 80       	ldd	r15, Y+1	; 0x01
    30ac:	d6 01       	movw	r26, r12
    30ae:	ae 57       	subi	r26, 0x7E	; 126
    30b0:	b5 4d       	sbci	r27, 0xD5	; 213
    30b2:	e1 14       	cp	r14, r1
    30b4:	f1 04       	cpc	r15, r1
    30b6:	71 f0       	breq	.+28     	; 0x30d4 <__stack+0xd5>
            {
                rollingMax[proxChannel] = *pPS;
                Maxcount[proxChannel] = 0;
            } 
            else if ( rollingMax[proxChannel] >= *pPS )
    30b8:	e6 16       	cp	r14, r22
    30ba:	f7 06       	cpc	r15, r23
    30bc:	58 f0       	brcs	.+22     	; 0x30d4 <__stack+0xd5>
            {
                (Maxcount[proxChannel]) += 1;
    30be:	8c 91       	ld	r24, X
    30c0:	8f 5f       	subi	r24, 0xFF	; 255
    30c2:	8c 93       	st	X, r24
                if ( Maxcount[proxChannel] > 64 )
    30c4:	81 34       	cpi	r24, 0x41	; 65
    30c6:	48 f0       	brcs	.+18     	; 0x30da <__stack+0xdb>
                {
                    (rollingMax[proxChannel]) -= 1;
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	e8 1a       	sub	r14, r24
    30cc:	f1 08       	sbc	r15, r1
    30ce:	e8 82       	st	Y, r14
    30d0:	f9 82       	std	Y+1, r15	; 0x01
    30d2:	02 c0       	rjmp	.+4      	; 0x30d8 <__stack+0xd9>
                    Maxcount[proxChannel] = 0;
                }
            } 
            else
            {
                rollingMax[proxChannel] = *pPS;
    30d4:	68 83       	st	Y, r22
    30d6:	79 83       	std	Y+1, r23	; 0x01
                Maxcount[proxChannel] = 0;
    30d8:	1c 92       	st	X, r1
            }
        }

        // Update the stored baseline average with the new value
        dynamic_baseline[proxChannel] = (u16)average;
    30da:	df 01       	movw	r26, r30
    30dc:	a5 57       	subi	r26, 0x75	; 117
    30de:	b5 4d       	sbci	r27, 0xD5	; 213
    30e0:	0d 93       	st	X+, r16
    30e2:	1c 93       	st	X, r17
    }

    // Use the rollingMax value to determine the baseline level
    if ( rollingMax[proxChannel] != 0 )
    30e4:	df 01       	movw	r26, r30
    30e6:	ab 57       	subi	r26, 0x7B	; 123
    30e8:	b5 4d       	sbci	r27, 0xD5	; 213
    30ea:	8d 91       	ld	r24, X+
    30ec:	9c 91       	ld	r25, X
    30ee:	df 01       	movw	r26, r30
    30f0:	a2 59       	subi	r26, 0x92	; 146
    30f2:	b3 4d       	sbci	r27, 0xD3	; 211
    30f4:	00 97       	sbiw	r24, 0x00	; 0
    30f6:	29 f0       	breq	.+10     	; 0x3102 <__stack+0x103>
    {
        baseline[proxChannel] = rollingMax[proxChannel] + noise_margin;
    30f8:	48 0f       	add	r20, r24
    30fa:	59 1f       	adc	r21, r25
    30fc:	4d 93       	st	X+, r20
    30fe:	5c 93       	st	X, r21
    3100:	08 c0       	rjmp	.+16     	; 0x3112 <__stack+0x113>
    } 
    else
    {  // If the rollingMax has not been determined yet, use the average
        baseline[proxChannel] = (u16) dynamic_baseline[proxChannel] + noise_margin;
    3102:	e5 57       	subi	r30, 0x75	; 117
    3104:	f5 4d       	sbci	r31, 0xD5	; 213
    3106:	80 81       	ld	r24, Z
    3108:	91 81       	ldd	r25, Z+1	; 0x01
    310a:	84 0f       	add	r24, r20
    310c:	95 1f       	adc	r25, r21
    310e:	8d 93       	st	X+, r24
    3110:	9c 93       	st	X, r25
    }
}
    3112:	df 91       	pop	r29
    3114:	cf 91       	pop	r28
    3116:	1f 91       	pop	r17
    3118:	0f 91       	pop	r16
    311a:	ff 90       	pop	r15
    311c:	ef 90       	pop	r14
    311e:	df 90       	pop	r13
    3120:	cf 90       	pop	r12
    3122:	08 95       	ret

00003124 <si114x_process_samples>:
u16 code scale           =  3;
u8  code ircorrection[3] =  { 17, 35, 29 };
#endif

void si114x_process_samples(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples)
{
    3124:	ef 92       	push	r14
    3126:	ff 92       	push	r15
    3128:	0f 93       	push	r16
    312a:	1f 93       	push	r17
    312c:	cf 93       	push	r28
    312e:	df 93       	push	r29
    3130:	7c 01       	movw	r14, r24
    3132:	eb 01       	movw	r28, r22
    if ((maxLeakage[0]==0)&&(maxLeakage[1]==0)&&(maxLeakage[2]==0)&&(initial_baseline_counter==128))
    3134:	80 91 95 2a 	lds	r24, 0x2A95
    3138:	90 91 96 2a 	lds	r25, 0x2A96
    313c:	89 2b       	or	r24, r25
    313e:	a1 f4       	brne	.+40     	; 0x3168 <si114x_process_samples+0x44>
    3140:	80 91 97 2a 	lds	r24, 0x2A97
    3144:	90 91 98 2a 	lds	r25, 0x2A98
    3148:	89 2b       	or	r24, r25
    314a:	71 f4       	brne	.+28     	; 0x3168 <si114x_process_samples+0x44>
    314c:	80 91 99 2a 	lds	r24, 0x2A99
    3150:	90 91 9a 2a 	lds	r25, 0x2A9A
    3154:	89 2b       	or	r24, r25
    3156:	41 f4       	brne	.+16     	; 0x3168 <si114x_process_samples+0x44>
    3158:	80 91 10 20 	lds	r24, 0x2010
    315c:	80 38       	cpi	r24, 0x80	; 128
    315e:	21 f4       	brne	.+8      	; 0x3168 <si114x_process_samples+0x44>
    {
#ifdef DEBUG_ON
        puts("DEBUG: Computing Baseline. Make sure nothing is in the vicinity of the EVB");
    3160:	8d ed       	ldi	r24, 0xDD	; 221
    3162:	94 e2       	ldi	r25, 0x24	; 36
    3164:	0e 94 ba 50 	call	0xa174	; 0xa174 <puts>
#endif
    }

    if (initial_baseline_counter != 0)
    3168:	80 91 10 20 	lds	r24, 0x2010
    316c:	88 23       	and	r24, r24
    316e:	09 f4       	brne	.+2      	; 0x3172 <si114x_process_samples+0x4e>
    3170:	8a c0       	rjmp	.+276    	; 0x3286 <si114x_process_samples+0x162>
    {
        // The first 128 samples are used to establish the initial 
        // baseline
        if ( initial_baseline_counter > 1 )
    3172:	82 30       	cpi	r24, 0x02	; 2
    3174:	48 f1       	brcs	.+82     	; 0x31c8 <si114x_process_samples+0xa4>
        {
            // Look for maximum
            if( maxLeakage[0] < samples->ps1) maxLeakage[0] = samples->ps1;
    3176:	8a 85       	ldd	r24, Y+10	; 0x0a
    3178:	9b 85       	ldd	r25, Y+11	; 0x0b
    317a:	20 91 95 2a 	lds	r18, 0x2A95
    317e:	30 91 96 2a 	lds	r19, 0x2A96
    3182:	28 17       	cp	r18, r24
    3184:	39 07       	cpc	r19, r25
    3186:	20 f4       	brcc	.+8      	; 0x3190 <si114x_process_samples+0x6c>
    3188:	80 93 95 2a 	sts	0x2A95, r24
    318c:	90 93 96 2a 	sts	0x2A96, r25
            if( maxLeakage[1] < samples->ps2) maxLeakage[1] = samples->ps2;
    3190:	8c 85       	ldd	r24, Y+12	; 0x0c
    3192:	9d 85       	ldd	r25, Y+13	; 0x0d
    3194:	20 91 97 2a 	lds	r18, 0x2A97
    3198:	30 91 98 2a 	lds	r19, 0x2A98
    319c:	28 17       	cp	r18, r24
    319e:	39 07       	cpc	r19, r25
    31a0:	20 f4       	brcc	.+8      	; 0x31aa <si114x_process_samples+0x86>
    31a2:	80 93 97 2a 	sts	0x2A97, r24
    31a6:	90 93 98 2a 	sts	0x2A98, r25
			if( maxLeakage[2] < samples->ps3) maxLeakage[2] = samples->ps3;
    31aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    31ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    31ae:	20 91 99 2a 	lds	r18, 0x2A99
    31b2:	30 91 9a 2a 	lds	r19, 0x2A9A
    31b6:	28 17       	cp	r18, r24
    31b8:	39 07       	cpc	r19, r25
    31ba:	08 f0       	brcs	.+2      	; 0x31be <si114x_process_samples+0x9a>
    31bc:	5e c0       	rjmp	.+188    	; 0x327a <si114x_process_samples+0x156>
    31be:	80 93 99 2a 	sts	0x2A99, r24
    31c2:	90 93 9a 2a 	sts	0x2A9A, r25
    31c6:	59 c0       	rjmp	.+178    	; 0x327a <si114x_process_samples+0x156>
        }
        else
        {
#ifdef DEBUG_ON
            printf("DEBUG: Initial Baseline Calculated, PS1 = %d, PS2 = %d, PS3 = %d \n", maxLeakage[0], maxLeakage[1],maxLeakage[2]);
    31c8:	80 91 9a 2a 	lds	r24, 0x2A9A
    31cc:	8f 93       	push	r24
    31ce:	80 91 99 2a 	lds	r24, 0x2A99
    31d2:	8f 93       	push	r24
    31d4:	80 91 98 2a 	lds	r24, 0x2A98
    31d8:	8f 93       	push	r24
    31da:	80 91 97 2a 	lds	r24, 0x2A97
    31de:	8f 93       	push	r24
    31e0:	80 91 96 2a 	lds	r24, 0x2A96
    31e4:	8f 93       	push	r24
    31e6:	80 91 95 2a 	lds	r24, 0x2A95
    31ea:	8f 93       	push	r24
    31ec:	88 e2       	ldi	r24, 0x28	; 40
    31ee:	95 e2       	ldi	r25, 0x25	; 37
    31f0:	9f 93       	push	r25
    31f2:	8f 93       	push	r24
    31f4:	0e 94 a9 50 	call	0xa152	; 0xa152 <printf>
#endif
			
            // Set Max Leakage 
            maxLeakage[0] = maxLeakage[0] + noise_margin*2;
    31f8:	60 91 0e 20 	lds	r22, 0x200E
    31fc:	70 91 0f 20 	lds	r23, 0x200F
    3200:	66 0f       	add	r22, r22
    3202:	77 1f       	adc	r23, r23
    3204:	40 91 95 2a 	lds	r20, 0x2A95
    3208:	50 91 96 2a 	lds	r21, 0x2A96
    320c:	46 0f       	add	r20, r22
    320e:	57 1f       	adc	r21, r23
    3210:	40 93 95 2a 	sts	0x2A95, r20
    3214:	50 93 96 2a 	sts	0x2A96, r21
            maxLeakage[1] = maxLeakage[1] + noise_margin*2;
    3218:	20 91 97 2a 	lds	r18, 0x2A97
    321c:	30 91 98 2a 	lds	r19, 0x2A98
    3220:	26 0f       	add	r18, r22
    3222:	37 1f       	adc	r19, r23
    3224:	20 93 97 2a 	sts	0x2A97, r18
    3228:	30 93 98 2a 	sts	0x2A98, r19
			maxLeakage[2] = maxLeakage[2] + noise_margin*2;
    322c:	80 91 99 2a 	lds	r24, 0x2A99
    3230:	90 91 9a 2a 	lds	r25, 0x2A9A
    3234:	86 0f       	add	r24, r22
    3236:	97 1f       	adc	r25, r23
    3238:	80 93 99 2a 	sts	0x2A99, r24
    323c:	90 93 9a 2a 	sts	0x2A9A, r25

            baseline[0] = maxLeakage[0];
    3240:	40 93 6e 2c 	sts	0x2C6E, r20
    3244:	50 93 6f 2c 	sts	0x2C6F, r21
            baseline[1] = maxLeakage[1];
    3248:	20 93 70 2c 	sts	0x2C70, r18
    324c:	30 93 71 2c 	sts	0x2C71, r19
			baseline[2] = maxLeakage[2];
    3250:	80 93 72 2c 	sts	0x2C72, r24
    3254:	90 93 73 2c 	sts	0x2C73, r25
			
			env.baseline[0] = baseline[0];
    3258:	40 93 68 2b 	sts	0x2B68, r20
    325c:	50 93 69 2b 	sts	0x2B69, r21
			env.baseline[1] = baseline[1];
    3260:	20 93 6a 2b 	sts	0x2B6A, r18
    3264:	30 93 6b 2b 	sts	0x2B6B, r19
			env.baseline[2] = baseline[2];
    3268:	80 93 6c 2b 	sts	0x2B6C, r24
    326c:	90 93 6d 2b 	sts	0x2B6D, r25
    3270:	8d b7       	in	r24, 0x3d	; 61
    3272:	9e b7       	in	r25, 0x3e	; 62
    3274:	08 96       	adiw	r24, 0x08	; 8
    3276:	8d bf       	out	0x3d, r24	; 61
    3278:	9e bf       	out	0x3e, r25	; 62
        }
        
        // Decrement counter
        initial_baseline_counter--;
    327a:	80 91 10 20 	lds	r24, 0x2010
    327e:	81 50       	subi	r24, 0x01	; 1
    3280:	80 93 10 20 	sts	0x2010, r24
    3284:	67 c0       	rjmp	.+206    	; 0x3354 <si114x_process_samples+0x230>
    else
    {
        //
        // Once the baseline has been set, do the actual loop
        // The first thing that happens is to check for saturation events
        if(samples->ps1 > 48000 || samples->ps2 > 48000 || samples->ps3 > 48000)
    3286:	8a 85       	ldd	r24, Y+10	; 0x0a
    3288:	9b 85       	ldd	r25, Y+11	; 0x0b
    328a:	81 38       	cpi	r24, 0x81	; 129
    328c:	9b 4b       	sbci	r25, 0xBB	; 187
    328e:	50 f4       	brcc	.+20     	; 0x32a4 <si114x_process_samples+0x180>
    3290:	8c 85       	ldd	r24, Y+12	; 0x0c
    3292:	9d 85       	ldd	r25, Y+13	; 0x0d
    3294:	81 38       	cpi	r24, 0x81	; 129
    3296:	9b 4b       	sbci	r25, 0xBB	; 187
    3298:	28 f4       	brcc	.+10     	; 0x32a4 <si114x_process_samples+0x180>
    329a:	8e 85       	ldd	r24, Y+14	; 0x0e
    329c:	9f 85       	ldd	r25, Y+15	; 0x0f
    329e:	81 38       	cpi	r24, 0x81	; 129
    32a0:	9b 4b       	sbci	r25, 0xBB	; 187
    32a2:	50 f0       	brcs	.+20     	; 0x32b8 <si114x_process_samples+0x194>
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
#ifdef DEBUG_ON
            puts("DEBUG: Samples are Saturated");
    32a4:	8b e6       	ldi	r24, 0x6B	; 107
    32a6:	95 e2       	ldi	r25, 0x25	; 37

                SliderAlgorithm(si114x_handle, samples, scale);
            }
        }
    }
}
    32a8:	df 91       	pop	r29
    32aa:	cf 91       	pop	r28
    32ac:	1f 91       	pop	r17
    32ae:	0f 91       	pop	r16
    32b0:	ff 90       	pop	r15
    32b2:	ef 90       	pop	r14
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
#ifdef DEBUG_ON
            puts("DEBUG: Samples are Saturated");
    32b4:	0c 94 ba 50 	jmp	0xa174	; 0xa174 <puts>
#endif
		}
        else
        { 
            if( isIRStable( samples ) )
    32b8:	ce 01       	movw	r24, r28
    32ba:	8b dd       	rcall	.-1258   	; 0x2dd2 <isIRStable>
    32bc:	88 23       	and	r24, r24
    32be:	09 f4       	brne	.+2      	; 0x32c2 <si114x_process_samples+0x19e>
    32c0:	49 c0       	rjmp	.+146    	; 0x3354 <si114x_process_samples+0x230>
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    32c2:	0a 85       	ldd	r16, Y+10	; 0x0a
    32c4:	1b 85       	ldd	r17, Y+11	; 0x0b
    32c6:	88 85       	ldd	r24, Y+8	; 0x08
    32c8:	99 85       	ldd	r25, Y+9	; 0x09
    32ca:	98 01       	movw	r18, r16
    32cc:	40 e0       	ldi	r20, 0x00	; 0
    32ce:	50 e0       	ldi	r21, 0x00	; 0
    32d0:	28 0f       	add	r18, r24
    32d2:	39 1f       	adc	r19, r25
    32d4:	41 1d       	adc	r20, r1
    32d6:	51 1d       	adc	r21, r1
    32d8:	32 50       	subi	r19, 0x02	; 2
    32da:	41 09       	sbc	r20, r1
    32dc:	51 09       	sbc	r21, r1
    32de:	a0 91 09 20 	lds	r26, 0x2009
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <__muluhisi3>
            Correction = Correction/10000;
    32e8:	20 e1       	ldi	r18, 0x10	; 16
    32ea:	37 e2       	ldi	r19, 0x27	; 39
    32ec:	40 e0       	ldi	r20, 0x00	; 0
    32ee:	50 e0       	ldi	r21, 0x00	; 0
    32f0:	0e 94 be 4e 	call	0x9d7c	; 0x9d7c <__udivmodsi4>
            samples->ps1 = samples->ps1 + Correction;    
    32f4:	20 0f       	add	r18, r16
    32f6:	31 1f       	adc	r19, r17
    32f8:	2a 87       	std	Y+10, r18	; 0x0a
    32fa:	3b 87       	std	Y+11, r19	; 0x0b
        else
        { 
            if( isIRStable( samples ) )
            {
                IRCompensation( 0, samples, ircorrection );  // IR Ambient Compensation for PS1 Channel
                IRCompensation( 1, samples, ircorrection );  // IR Ambient Compensation for PS2 Channel
    32fc:	49 e0       	ldi	r20, 0x09	; 9
    32fe:	50 e2       	ldi	r21, 0x20	; 32
    3300:	be 01       	movw	r22, r28
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	e0 dd       	rcall	.-1088   	; 0x2ec6 <IRCompensation>
				IRCompensation( 2, samples, ircorrection );  // IR Ambient Compensation for PS3 Channel
    3306:	49 e0       	ldi	r20, 0x09	; 9
    3308:	50 e2       	ldi	r21, 0x20	; 32
    330a:	be 01       	movw	r22, r28
    330c:	82 e0       	ldi	r24, 0x02	; 2
    330e:	db dd       	rcall	.-1098   	; 0x2ec6 <IRCompensation>

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
    3310:	40 91 0e 20 	lds	r20, 0x200E
    3314:	50 91 0f 20 	lds	r21, 0x200F
    3318:	be 01       	movw	r22, r28
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	3b de       	rcall	.-906    	; 0x2f94 <calcBaseline>
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
    331e:	40 91 0e 20 	lds	r20, 0x200E
    3322:	50 91 0f 20 	lds	r21, 0x200F
    3326:	be 01       	movw	r22, r28
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	34 de       	rcall	.-920    	; 0x2f94 <calcBaseline>
				calcBaseline( 2 , samples, noise_margin); // Calculate PS3 Baseline
    332c:	40 91 0e 20 	lds	r20, 0x200E
    3330:	50 91 0f 20 	lds	r21, 0x200F
    3334:	be 01       	movw	r22, r28
    3336:	82 e0       	ldi	r24, 0x02	; 2
    3338:	2d de       	rcall	.-934    	; 0x2f94 <calcBaseline>

                SliderAlgorithm(si114x_handle, samples, scale);
    333a:	40 91 0c 20 	lds	r20, 0x200C
    333e:	50 91 0d 20 	lds	r21, 0x200D
    3342:	be 01       	movw	r22, r28
    3344:	c7 01       	movw	r24, r14
            }
        }
    }
}
    3346:	df 91       	pop	r29
    3348:	cf 91       	pop	r28
    334a:	1f 91       	pop	r17
    334c:	0f 91       	pop	r16
    334e:	ff 90       	pop	r15
    3350:	ef 90       	pop	r14

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
				calcBaseline( 2 , samples, noise_margin); // Calculate PS3 Baseline

                SliderAlgorithm(si114x_handle, samples, scale);
    3352:	4d c1       	rjmp	.+666    	; 0x35ee <SliderAlgorithm>
            }
        }
    }
}
    3354:	df 91       	pop	r29
    3356:	cf 91       	pop	r28
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	ff 90       	pop	r15
    335e:	ef 90       	pop	r14
    3360:	08 95       	ret

00003362 <PortSet>:

s16 Si114xBlockRead(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
}
    3362:	08 95       	ret

00003364 <Si114xWriteToRegister>:
    3364:	ef 92       	push	r14
    3366:	0f 93       	push	r16
    3368:	1f 93       	push	r17
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	1f 92       	push	r1
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	26 2f       	mov	r18, r22
    3376:	49 83       	std	Y+1, r20	; 0x01
    3378:	ee 24       	eor	r14, r14
    337a:	e3 94       	inc	r14
    337c:	8e 01       	movw	r16, r28
    337e:	0f 5f       	subi	r16, 0xFF	; 255
    3380:	1f 4f       	sbci	r17, 0xFF	; 255
    3382:	48 ee       	ldi	r20, 0xE8	; 232
    3384:	53 e0       	ldi	r21, 0x03	; 3
    3386:	6a e5       	ldi	r22, 0x5A	; 90
    3388:	80 e8       	ldi	r24, 0x80	; 128
    338a:	94 e0       	ldi	r25, 0x04	; 4
    338c:	39 d4       	rcall	.+2162   	; 0x3c00 <twi_write_packet>
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	0f 90       	pop	r0
    3394:	df 91       	pop	r29
    3396:	cf 91       	pop	r28
    3398:	1f 91       	pop	r17
    339a:	0f 91       	pop	r16
    339c:	ef 90       	pop	r14
    339e:	08 95       	ret

000033a0 <Si114xReadFromRegister>:
    33a0:	ef 92       	push	r14
    33a2:	0f 93       	push	r16
    33a4:	1f 93       	push	r17
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	1f 92       	push	r1
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    33b0:	26 2f       	mov	r18, r22
    33b2:	ee 24       	eor	r14, r14
    33b4:	e3 94       	inc	r14
    33b6:	8e 01       	movw	r16, r28
    33b8:	0f 5f       	subi	r16, 0xFF	; 255
    33ba:	1f 4f       	sbci	r17, 0xFF	; 255
    33bc:	48 ee       	ldi	r20, 0xE8	; 232
    33be:	53 e0       	ldi	r21, 0x03	; 3
    33c0:	6a e5       	ldi	r22, 0x5A	; 90
    33c2:	80 e8       	ldi	r24, 0x80	; 128
    33c4:	94 e0       	ldi	r25, 0x04	; 4
    33c6:	cb d3       	rcall	.+1942   	; 0x3b5e <twi_read_packet>
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	0f 90       	pop	r0
    33ce:	df 91       	pop	r29
    33d0:	cf 91       	pop	r28
    33d2:	1f 91       	pop	r17
    33d4:	0f 91       	pop	r16
    33d6:	ef 90       	pop	r14
    33d8:	08 95       	ret

000033da <Si114xBlockWrite>:
    33da:	ef 92       	push	r14
    33dc:	0f 93       	push	r16
    33de:	1f 93       	push	r17
    33e0:	89 01       	movw	r16, r18
    33e2:	e4 2e       	mov	r14, r20
    33e4:	26 2f       	mov	r18, r22
    33e6:	48 ee       	ldi	r20, 0xE8	; 232
    33e8:	53 e0       	ldi	r21, 0x03	; 3
    33ea:	6a e5       	ldi	r22, 0x5A	; 90
    33ec:	80 e8       	ldi	r24, 0x80	; 128
    33ee:	94 e0       	ldi	r25, 0x04	; 4
    33f0:	07 d4       	rcall	.+2062   	; 0x3c00 <twi_write_packet>
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	1f 91       	pop	r17
    33f6:	0f 91       	pop	r16
    33f8:	ef 90       	pop	r14
    33fa:	08 95       	ret

000033fc <delay_10ms>:
    33fc:	2f ef       	ldi	r18, 0xFF	; 255
    33fe:	89 ef       	ldi	r24, 0xF9	; 249
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	21 50       	subi	r18, 0x01	; 1
    3404:	80 40       	sbci	r24, 0x00	; 0
    3406:	90 40       	sbci	r25, 0x00	; 0
    3408:	e1 f7       	brne	.-8      	; 0x3402 <delay_10ms+0x6>
    340a:	00 c0       	rjmp	.+0      	; 0x340c <delay_10ms+0x10>
    340c:	00 00       	nop
    340e:	08 95       	ret

00003410 <QS_Counts_to_Distance>:
		distance = 139739*pow(counts,-0.88);
	} else if (led == 2) {
		distance = 155790*pow(counts,-0.91);
	}
	return (s16)distance;
}
    3410:	ff 92       	push	r15
    3412:	0f 93       	push	r16
    3414:	1f 93       	push	r17
    3416:	cf 93       	push	r28
    3418:	df 93       	push	r29
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	c2 5a       	subi	r28, 0xA2	; 162
    3420:	d1 09       	sbc	r29, r1
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	42 e1       	ldi	r20, 0x12	; 18
    3428:	e5 e2       	ldi	r30, 0x25	; 37
    342a:	f0 e2       	ldi	r31, 0x20	; 32
    342c:	de 01       	movw	r26, r28
    342e:	af 56       	subi	r26, 0x6F	; 111
    3430:	bf 4f       	sbci	r27, 0xFF	; 255
    3432:	01 90       	ld	r0, Z+
    3434:	0d 92       	st	X+, r0
    3436:	4a 95       	dec	r20
    3438:	e1 f7       	brne	.-8      	; 0x3432 <QS_Counts_to_Distance+0x22>
    343a:	42 e1       	ldi	r20, 0x12	; 18
    343c:	e7 e3       	ldi	r30, 0x37	; 55
    343e:	f0 e2       	ldi	r31, 0x20	; 32
    3440:	de 01       	movw	r26, r28
    3442:	a1 58       	subi	r26, 0x81	; 129
    3444:	bf 4f       	sbci	r27, 0xFF	; 255
    3446:	01 90       	ld	r0, Z+
    3448:	0d 92       	st	X+, r0
    344a:	4a 95       	dec	r20
    344c:	e1 f7       	brne	.-8      	; 0x3446 <QS_Counts_to_Distance+0x36>
    344e:	42 e1       	ldi	r20, 0x12	; 18
    3450:	e9 e4       	ldi	r30, 0x49	; 73
    3452:	f0 e2       	ldi	r31, 0x20	; 32
    3454:	de 01       	movw	r26, r28
    3456:	a3 59       	subi	r26, 0x93	; 147
    3458:	bf 4f       	sbci	r27, 0xFF	; 255
    345a:	01 90       	ld	r0, Z+
    345c:	0d 92       	st	X+, r0
    345e:	4a 95       	dec	r20
    3460:	e1 f7       	brne	.-8      	; 0x345a <QS_Counts_to_Distance+0x4a>
    3462:	42 e1       	ldi	r20, 0x12	; 18
    3464:	eb e5       	ldi	r30, 0x5B	; 91
    3466:	f0 e2       	ldi	r31, 0x20	; 32
    3468:	de 01       	movw	r26, r28
    346a:	a5 5a       	subi	r26, 0xA5	; 165
    346c:	bf 4f       	sbci	r27, 0xFF	; 255
    346e:	01 90       	ld	r0, Z+
    3470:	0d 92       	st	X+, r0
    3472:	4a 95       	dec	r20
    3474:	e1 f7       	brne	.-8      	; 0x346e <QS_Counts_to_Distance+0x5e>
    3476:	42 e1       	ldi	r20, 0x12	; 18
    3478:	ed e6       	ldi	r30, 0x6D	; 109
    347a:	f0 e2       	ldi	r31, 0x20	; 32
    347c:	de 01       	movw	r26, r28
    347e:	a7 5b       	subi	r26, 0xB7	; 183
    3480:	bf 4f       	sbci	r27, 0xFF	; 255
    3482:	01 90       	ld	r0, Z+
    3484:	0d 92       	st	X+, r0
    3486:	4a 95       	dec	r20
    3488:	e1 f7       	brne	.-8      	; 0x3482 <QS_Counts_to_Distance+0x72>
    348a:	42 e1       	ldi	r20, 0x12	; 18
    348c:	ef e7       	ldi	r30, 0x7F	; 127
    348e:	f0 e2       	ldi	r31, 0x20	; 32
    3490:	de 01       	movw	r26, r28
    3492:	d7 96       	adiw	r26, 0x37	; 55
    3494:	01 90       	ld	r0, Z+
    3496:	0d 92       	st	X+, r0
    3498:	4a 95       	dec	r20
    349a:	e1 f7       	brne	.-8      	; 0x3494 <QS_Counts_to_Distance+0x84>
    349c:	42 e1       	ldi	r20, 0x12	; 18
    349e:	eb e5       	ldi	r30, 0x5B	; 91
    34a0:	f0 e2       	ldi	r31, 0x20	; 32
    34a2:	de 01       	movw	r26, r28
    34a4:	95 96       	adiw	r26, 0x25	; 37
    34a6:	01 90       	ld	r0, Z+
    34a8:	0d 92       	st	X+, r0
    34aa:	4a 95       	dec	r20
    34ac:	e1 f7       	brne	.-8      	; 0x34a6 <QS_Counts_to_Distance+0x96>
    34ae:	42 e1       	ldi	r20, 0x12	; 18
    34b0:	ed e6       	ldi	r30, 0x6D	; 109
    34b2:	f0 e2       	ldi	r31, 0x20	; 32
    34b4:	de 01       	movw	r26, r28
    34b6:	53 96       	adiw	r26, 0x13	; 19
    34b8:	01 90       	ld	r0, Z+
    34ba:	0d 92       	st	X+, r0
    34bc:	4a 95       	dec	r20
    34be:	e1 f7       	brne	.-8      	; 0x34b8 <QS_Counts_to_Distance+0xa8>
    34c0:	42 e1       	ldi	r20, 0x12	; 18
    34c2:	ef e7       	ldi	r30, 0x7F	; 127
    34c4:	f0 e2       	ldi	r31, 0x20	; 32
    34c6:	de 01       	movw	r26, r28
    34c8:	11 96       	adiw	r26, 0x01	; 1
    34ca:	01 90       	ld	r0, Z+
    34cc:	0d 92       	st	X+, r0
    34ce:	4a 95       	dec	r20
    34d0:	e1 f7       	brne	.-8      	; 0x34ca <QS_Counts_to_Distance+0xba>
    34d2:	61 30       	cpi	r22, 0x01	; 1
    34d4:	19 f5       	brne	.+70     	; 0x351c <QS_Counts_to_Distance+0x10c>
    34d6:	fe 01       	movw	r30, r28
    34d8:	e3 59       	subi	r30, 0x93	; 147
    34da:	ff 4f       	sbci	r31, 0xFF	; 255
    34dc:	40 e0       	ldi	r20, 0x00	; 0
    34de:	50 e0       	ldi	r21, 0x00	; 0
    34e0:	f4 2e       	mov	r15, r20
    34e2:	61 91       	ld	r22, Z+
    34e4:	71 91       	ld	r23, Z+
    34e6:	68 17       	cp	r22, r24
    34e8:	79 07       	cpc	r23, r25
    34ea:	90 f4       	brcc	.+36     	; 0x3510 <QS_Counts_to_Distance+0x100>
    34ec:	44 0f       	add	r20, r20
    34ee:	55 1f       	adc	r21, r21
    34f0:	ef e7       	ldi	r30, 0x7F	; 127
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	ec 0f       	add	r30, r28
    34f6:	fd 1f       	adc	r31, r29
    34f8:	e4 0f       	add	r30, r20
    34fa:	f5 1f       	adc	r31, r21
    34fc:	20 81       	ld	r18, Z
    34fe:	31 81       	ldd	r19, Z+1	; 0x01
    3500:	dc 01       	movw	r26, r24
    3502:	0e 94 e6 4e 	call	0x9dcc	; 0x9dcc <__umulhisi3>
    3506:	8b 01       	movw	r16, r22
    3508:	9c 01       	movw	r18, r24
    350a:	e1 e9       	ldi	r30, 0x91	; 145
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	23 c0       	rjmp	.+70     	; 0x3556 <QS_Counts_to_Distance+0x146>
    3510:	4f 5f       	subi	r20, 0xFF	; 255
    3512:	5f 4f       	sbci	r21, 0xFF	; 255
    3514:	49 30       	cpi	r20, 0x09	; 9
    3516:	51 05       	cpc	r21, r1
    3518:	19 f7       	brne	.-58     	; 0x34e0 <QS_Counts_to_Distance+0xd0>
    351a:	51 c0       	rjmp	.+162    	; 0x35be <QS_Counts_to_Distance+0x1ae>
    351c:	62 30       	cpi	r22, 0x02	; 2
    351e:	41 f5       	brne	.+80     	; 0x3570 <QS_Counts_to_Distance+0x160>
    3520:	fe 01       	movw	r30, r28
    3522:	f7 96       	adiw	r30, 0x37	; 55
    3524:	40 e0       	ldi	r20, 0x00	; 0
    3526:	50 e0       	ldi	r21, 0x00	; 0
    3528:	f4 2e       	mov	r15, r20
    352a:	61 91       	ld	r22, Z+
    352c:	71 91       	ld	r23, Z+
    352e:	68 17       	cp	r22, r24
    3530:	79 07       	cpc	r23, r25
    3532:	c0 f4       	brcc	.+48     	; 0x3564 <QS_Counts_to_Distance+0x154>
    3534:	44 0f       	add	r20, r20
    3536:	55 1f       	adc	r21, r21
    3538:	e9 e4       	ldi	r30, 0x49	; 73
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	ec 0f       	add	r30, r28
    353e:	fd 1f       	adc	r31, r29
    3540:	e4 0f       	add	r30, r20
    3542:	f5 1f       	adc	r31, r21
    3544:	20 81       	ld	r18, Z
    3546:	31 81       	ldd	r19, Z+1	; 0x01
    3548:	dc 01       	movw	r26, r24
    354a:	0e 94 e6 4e 	call	0x9dcc	; 0x9dcc <__umulhisi3>
    354e:	8b 01       	movw	r16, r22
    3550:	9c 01       	movw	r18, r24
    3552:	eb e5       	ldi	r30, 0x5B	; 91
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	ec 0f       	add	r30, r28
    3558:	fd 1f       	adc	r31, r29
    355a:	e4 0f       	add	r30, r20
    355c:	f5 1f       	adc	r31, r21
    355e:	80 81       	ld	r24, Z
    3560:	91 81       	ldd	r25, Z+1	; 0x01
    3562:	24 c0       	rjmp	.+72     	; 0x35ac <QS_Counts_to_Distance+0x19c>
    3564:	4f 5f       	subi	r20, 0xFF	; 255
    3566:	5f 4f       	sbci	r21, 0xFF	; 255
    3568:	49 30       	cpi	r20, 0x09	; 9
    356a:	51 05       	cpc	r21, r1
    356c:	e9 f6       	brne	.-70     	; 0x3528 <QS_Counts_to_Distance+0x118>
    356e:	27 c0       	rjmp	.+78     	; 0x35be <QS_Counts_to_Distance+0x1ae>
    3570:	63 30       	cpi	r22, 0x03	; 3
    3572:	89 f5       	brne	.+98     	; 0x35d6 <QS_Counts_to_Distance+0x1c6>
    3574:	fe 01       	movw	r30, r28
    3576:	31 96       	adiw	r30, 0x01	; 1
    3578:	40 e0       	ldi	r20, 0x00	; 0
    357a:	50 e0       	ldi	r21, 0x00	; 0
    357c:	f4 2e       	mov	r15, r20
    357e:	61 91       	ld	r22, Z+
    3580:	71 91       	ld	r23, Z+
    3582:	68 17       	cp	r22, r24
    3584:	79 07       	cpc	r23, r25
    3586:	b0 f4       	brcc	.+44     	; 0x35b4 <QS_Counts_to_Distance+0x1a4>
    3588:	fa 01       	movw	r30, r20
    358a:	ee 0f       	add	r30, r30
    358c:	ff 1f       	adc	r31, r31
    358e:	21 e0       	ldi	r18, 0x01	; 1
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	2c 0f       	add	r18, r28
    3594:	3d 1f       	adc	r19, r29
    3596:	e2 0f       	add	r30, r18
    3598:	f3 1f       	adc	r31, r19
    359a:	22 89       	ldd	r18, Z+18	; 0x12
    359c:	33 89       	ldd	r19, Z+19	; 0x13
    359e:	dc 01       	movw	r26, r24
    35a0:	0e 94 e6 4e 	call	0x9dcc	; 0x9dcc <__umulhisi3>
    35a4:	8b 01       	movw	r16, r22
    35a6:	9c 01       	movw	r18, r24
    35a8:	84 a1       	ldd	r24, Z+36	; 0x24
    35aa:	95 a1       	ldd	r25, Z+37	; 0x25
    35ac:	8c 01       	movw	r16, r24
    35ae:	02 1b       	sub	r16, r18
    35b0:	13 0b       	sbc	r17, r19
    35b2:	07 c0       	rjmp	.+14     	; 0x35c2 <QS_Counts_to_Distance+0x1b2>
    35b4:	4f 5f       	subi	r20, 0xFF	; 255
    35b6:	5f 4f       	sbci	r21, 0xFF	; 255
    35b8:	49 30       	cpi	r20, 0x09	; 9
    35ba:	51 05       	cpc	r21, r1
    35bc:	f9 f6       	brne	.-66     	; 0x357c <QS_Counts_to_Distance+0x16c>
    35be:	89 e0       	ldi	r24, 0x09	; 9
    35c0:	f8 2e       	mov	r15, r24
    35c2:	0b 3f       	cpi	r16, 0xFB	; 251
    35c4:	11 05       	cpc	r17, r1
    35c6:	18 f4       	brcc	.+6      	; 0x35ce <QS_Counts_to_Distance+0x1be>
    35c8:	89 e0       	ldi	r24, 0x09	; 9
    35ca:	f8 12       	cpse	r15, r24
    35cc:	02 c0       	rjmp	.+4      	; 0x35d2 <QS_Counts_to_Distance+0x1c2>
    35ce:	0a ef       	ldi	r16, 0xFA	; 250
    35d0:	10 e0       	ldi	r17, 0x00	; 0
    35d2:	c8 01       	movw	r24, r16
    35d4:	02 c0       	rjmp	.+4      	; 0x35da <QS_Counts_to_Distance+0x1ca>
    35d6:	8f ef       	ldi	r24, 0xFF	; 255
    35d8:	9f ef       	ldi	r25, 0xFF	; 255
    35da:	ce 55       	subi	r28, 0x5E	; 94
    35dc:	df 4f       	sbci	r29, 0xFF	; 255
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	de bf       	out	0x3e, r29	; 62
    35e2:	df 91       	pop	r29
    35e4:	cf 91       	pop	r28
    35e6:	1f 91       	pop	r17
    35e8:	0f 91       	pop	r16
    35ea:	ff 90       	pop	r15
    35ec:	08 95       	ret

000035ee <SliderAlgorithm>:

void SliderAlgorithm(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples, u16 scale)
{
    35ee:	2f 92       	push	r2
    35f0:	3f 92       	push	r3
    35f2:	4f 92       	push	r4
    35f4:	5f 92       	push	r5
    35f6:	7f 92       	push	r7
    35f8:	8f 92       	push	r8
    35fa:	9f 92       	push	r9
    35fc:	af 92       	push	r10
    35fe:	bf 92       	push	r11
    3600:	cf 92       	push	r12
    3602:	df 92       	push	r13
    3604:	ef 92       	push	r14
    3606:	ff 92       	push	r15
    3608:	0f 93       	push	r16
    360a:	1f 93       	push	r17
    360c:	cf 93       	push	r28
    360e:	df 93       	push	r29
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
    3614:	ae 97       	sbiw	r28, 0x2e	; 46
    3616:	cd bf       	out	0x3d, r28	; 61
    3618:	de bf       	out	0x3e, r29	; 62
    361a:	7b 01       	movw	r14, r22
    361c:	5a 01       	movw	r10, r20
	//My implementation
	static u16 previous_led_x = 0;
	static u16 previous_led_y = 0;

    // QS_GlobalCounterOverflow assumes milliseconds. Samples->timestamp is in 100 us.
    u16 xdata QS_GlobalCounterOverflow = samples->timestamp / 10;
    361e:	db 01       	movw	r26, r22
    3620:	12 96       	adiw	r26, 0x02	; 2
    3622:	8d 91       	ld	r24, X+
    3624:	9c 91       	ld	r25, X
    3626:	13 97       	sbiw	r26, 0x03	; 3
    3628:	6a e0       	ldi	r22, 0x0A	; 10
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	0e 94 97 4e 	call	0x9d2e	; 0x9d2e <__udivmodhi4>
    3630:	8b 01       	movw	r16, r22

    // x position "bucket" endpoints to determine LED states and recognize Pause gesture.
    u16 code xbucket_Array[10] = {1, 159, 272, 385, 498, 611, 724, 837, 1100, 1102};
    3632:	84 e1       	ldi	r24, 0x14	; 20
    3634:	e1 e9       	ldi	r30, 0x91	; 145
    3636:	f0 e2       	ldi	r31, 0x20	; 32
    3638:	de 01       	movw	r26, r28
    363a:	11 96       	adiw	r26, 0x01	; 1
    363c:	01 90       	ld	r0, Z+
    363e:	0d 92       	st	X+, r0
    3640:	8a 95       	dec	r24
    3642:	e1 f7       	brne	.-8      	; 0x363c <SliderAlgorithm+0x4e>

    // P1 LED values corresponding to the position buckets
    u8 code LED_P1_Vals[10] = {0xFF, 0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F, 0xFF};   
    3644:	8a e0       	ldi	r24, 0x0A	; 10
    3646:	e5 ea       	ldi	r30, 0xA5	; 165
    3648:	f0 e2       	ldi	r31, 0x20	; 32
    364a:	de 01       	movw	r26, r28
    364c:	55 96       	adiw	r26, 0x15	; 21
    364e:	01 90       	ld	r0, Z+
    3650:	0d 92       	st	X+, r0
    3652:	8a 95       	dec	r24
    3654:	e1 f7       	brne	.-8      	; 0x364e <SliderAlgorithm+0x60>

    // P1 patterns for LED state machine.  Sent in reverse order, '0' bits are ON
    u8 code LED_swipe_left_pattern[8]  = 
    3656:	88 e0       	ldi	r24, 0x08	; 8
    3658:	ef ea       	ldi	r30, 0xAF	; 175
    365a:	f0 e2       	ldi	r31, 0x20	; 32
    365c:	de 01       	movw	r26, r28
    365e:	97 96       	adiw	r26, 0x27	; 39
    3660:	01 90       	ld	r0, Z+
    3662:	0d 92       	st	X+, r0
    3664:	8a 95       	dec	r24
    3666:	e1 f7       	brne	.-8      	; 0x3660 <SliderAlgorithm+0x72>
      {0xFF, 0xFE, 0xF8, 0xE1, 0x87, 0x1F, 0x7F, 0xFF};

    u8 code LED_swipe_right_pattern[8] = 
    3668:	88 e0       	ldi	r24, 0x08	; 8
    366a:	e7 eb       	ldi	r30, 0xB7	; 183
    366c:	f0 e2       	ldi	r31, 0x20	; 32
    366e:	de 01       	movw	r26, r28
    3670:	5f 96       	adiw	r26, 0x1f	; 31
    3672:	01 90       	ld	r0, Z+
    3674:	0d 92       	st	X+, r0
    3676:	8a 95       	dec	r24
    3678:	e1 f7       	brne	.-8      	; 0x3672 <SliderAlgorithm+0x84>
    s16 xdata xdiff;
    u8 xdata swipe_speed;

    int xdata ps;

    ps = (u32) samples->ps1 - (u32)baseline[0];
    367a:	f7 01       	movw	r30, r14
    367c:	82 85       	ldd	r24, Z+10	; 0x0a
    367e:	93 85       	ldd	r25, Z+11	; 0x0b
    3680:	20 91 6e 2c 	lds	r18, 0x2C6E
    3684:	30 91 6f 2c 	lds	r19, 0x2C6F
    3688:	82 1b       	sub	r24, r18
    368a:	93 0b       	sbc	r25, r19
    368c:	97 ff       	sbrs	r25, 7
    368e:	02 c0       	rjmp	.+4      	; 0x3694 <SliderAlgorithm+0xa6>
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	90 e0       	ldi	r25, 0x00	; 0
    ps *= scale;

    // Raw IR sensor 0 and 1 are stored in channels 4 and 5
    // ALS is stored in channel 6
    // Calculate r1 and r2 distances; store in channels 0 and 1
    r1 = QS_Counts_to_Distance ((u16)ps, 1);
    3694:	61 e0       	ldi	r22, 0x01	; 1
    3696:	9c 01       	movw	r18, r24
    3698:	a2 9e       	mul	r10, r18
    369a:	c0 01       	movw	r24, r0
    369c:	a3 9e       	mul	r10, r19
    369e:	90 0d       	add	r25, r0
    36a0:	b2 9e       	mul	r11, r18
    36a2:	90 0d       	add	r25, r0
    36a4:	11 24       	eor	r1, r1
    36a6:	b4 de       	rcall	.-664    	; 0x3410 <QS_Counts_to_Distance>
    36a8:	4c 01       	movw	r8, r24
	
	//printf("r1 = %d , counts = %d \r\n",r1,(u16)ps);

    ps = (u32) samples->ps2 - (u32)baseline[1];
    36aa:	d7 01       	movw	r26, r14
    36ac:	1c 96       	adiw	r26, 0x0c	; 12
    36ae:	8d 91       	ld	r24, X+
    36b0:	9c 91       	ld	r25, X
    36b2:	1d 97       	sbiw	r26, 0x0d	; 13
    36b4:	20 91 70 2c 	lds	r18, 0x2C70
    36b8:	30 91 71 2c 	lds	r19, 0x2C71
    36bc:	82 1b       	sub	r24, r18
    36be:	93 0b       	sbc	r25, r19
    36c0:	97 ff       	sbrs	r25, 7
    36c2:	02 c0       	rjmp	.+4      	; 0x36c8 <SliderAlgorithm+0xda>
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    if (ps < 0) ps = 0;

    // Scale it
    ps *= (u32)scale;

    r2 = QS_Counts_to_Distance ((u16)ps, 1);
    36c8:	61 e0       	ldi	r22, 0x01	; 1
    36ca:	fc 01       	movw	r30, r24
    36cc:	ea 9d       	mul	r30, r10
    36ce:	c0 01       	movw	r24, r0
    36d0:	eb 9d       	mul	r30, r11
    36d2:	90 0d       	add	r25, r0
    36d4:	fa 9d       	mul	r31, r10
    36d6:	90 0d       	add	r25, r0
    36d8:	11 24       	eor	r1, r1
    36da:	9a de       	rcall	.-716    	; 0x3410 <QS_Counts_to_Distance>
    36dc:	5c 01       	movw	r10, r24
   ////////////////////////////////////////////////////////////////////////////
   // Position calculation and swipe gesture detection

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
    36de:	94 01       	movw	r18, r8
    36e0:	d4 01       	movw	r26, r8
    36e2:	0e 94 e6 4e 	call	0x9dcc	; 0x9dcc <__umulhisi3>
    36e6:	1b 01       	movw	r2, r22
    36e8:	2c 01       	movw	r4, r24
   x.u32 = x.u32 + 33000;
    36ea:	f8 ee       	ldi	r31, 0xE8	; 232
    36ec:	2f 0e       	add	r2, r31
    36ee:	f0 e8       	ldi	r31, 0x80	; 128
    36f0:	3f 1e       	adc	r3, r31
    36f2:	41 1c       	adc	r4, r1
    36f4:	51 1c       	adc	r5, r1
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    36f6:	95 01       	movw	r18, r10
    36f8:	d5 01       	movw	r26, r10
    36fa:	0e 94 e6 4e 	call	0x9dcc	; 0x9dcc <__umulhisi3>
    36fe:	26 1a       	sub	r2, r22
    3700:	37 0a       	sbc	r3, r23
    3702:	48 0a       	sbc	r4, r24
    3704:	59 0a       	sbc	r5, r25
   if (x.s32 < 0)
    3706:	57 fc       	sbrc	r5, 7
    3708:	03 c0       	rjmp	.+6      	; 0x3710 <SliderAlgorithm+0x122>

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
   x.u32 = x.u32 + 33000;
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    370a:	a2 01       	movw	r20, r4
    370c:	91 01       	movw	r18, r2
    370e:	03 c0       	rjmp	.+6      	; 0x3716 <SliderAlgorithm+0x128>
   if (x.s32 < 0)
   {
     x.s32 = 0;
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	a9 01       	movw	r20, r18
   }
   x.u32 = x.u32 / 60;
    3716:	ca 01       	movw	r24, r20
    3718:	b9 01       	movw	r22, r18
    371a:	2c e3       	ldi	r18, 0x3C	; 60
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	40 e0       	ldi	r20, 0x00	; 0
    3720:	50 e0       	ldi	r21, 0x00	; 0
    3722:	0e 94 be 4e 	call	0x9d7c	; 0x9d7c <__udivmodsi4>

   // limit x to maximum for pad
   if (x.u16[LSB] > 1101)
    3726:	2e 34       	cpi	r18, 0x4E	; 78
    3728:	64 e0       	ldi	r22, 0x04	; 4
    372a:	36 07       	cpc	r19, r22
    372c:	10 f0       	brcs	.+4      	; 0x3732 <SliderAlgorithm+0x144>
   {
     x.u16[LSB] = 1101;
    372e:	2d e4       	ldi	r18, 0x4D	; 77
    3730:	34 e0       	ldi	r19, 0x04	; 4
    3732:	80 91 11 20 	lds	r24, 0x2011
	   y.u16[LSB] = 1101;
   }

   
   // Determine "z" and recognize whether "swipe" type gesture has occured
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
    3736:	91 ef       	ldi	r25, 0xF1	; 241
    3738:	89 16       	cp	r8, r25
    373a:	91 04       	cpc	r9, r1
    373c:	20 f4       	brcc	.+8      	; 0x3746 <SliderAlgorithm+0x158>
    373e:	a1 ef       	ldi	r26, 0xF1	; 241
    3740:	aa 16       	cp	r10, r26
    3742:	b1 04       	cpc	r11, r1
    3744:	b0 f1       	brcs	.+108    	; 0x37b2 <SliderAlgorithm+0x1c4>
   {
      // check for end of swipe
      if (out_of_range == 0)
    3746:	88 23       	and	r24, r24
    3748:	11 f0       	breq	.+4      	; 0x374e <SliderAlgorithm+0x160>
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    374a:	e0 e0       	ldi	r30, 0x00	; 0
    374c:	1e c0       	rjmp	.+60     	; 0x378a <SliderAlgorithm+0x19c>
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
   {
      // check for end of swipe
      if (out_of_range == 0)
      {
        xexit = xlast;
    374e:	60 91 af 2a 	lds	r22, 0x2AAF
    3752:	70 91 b0 2a 	lds	r23, 0x2AB0
    3756:	60 93 ad 2a 	sts	0x2AAD, r22
    375a:	70 93 ae 2a 	sts	0x2AAE, r23

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
    375e:	e0 91 ab 2a 	lds	r30, 0x2AAB
    3762:	f0 91 ac 2a 	lds	r31, 0x2AAC
    3766:	c8 01       	movw	r24, r16
    3768:	8e 1b       	sub	r24, r30
    376a:	9f 0b       	sbc	r25, r31
    376c:	c3 97       	sbiw	r24, 0x33	; 51
    376e:	82 31       	cpi	r24, 0x12	; 18
    3770:	91 40       	sbci	r25, 0x01	; 1
    3772:	58 f7       	brcc	.-42     	; 0x374a <SliderAlgorithm+0x15c>
        {
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
    3774:	f5 e4       	ldi	r31, 0x45	; 69
    3776:	7f 2e       	mov	r7, r31
    3778:	7e 0e       	add	r7, r30
    377a:	70 1a       	sub	r7, r16
            xdiff = (s16)xenter-(s16)xexit;
    377c:	c0 90 a9 2a 	lds	r12, 0x2AA9
    3780:	d0 90 aa 2a 	lds	r13, 0x2AAA
    3784:	c6 1a       	sub	r12, r22
    3786:	d7 0a       	sbc	r13, r23
        xexit = xlast;

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
        {
            swipe_detect = 1;   // indicate that a swipe was detected
    3788:	e1 e0       	ldi	r30, 0x01	; 1
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
            xdiff = (s16)xenter-(s16)xexit;
        }
      }
      out_of_range = 1;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	80 93 11 20 	sts	0x2011, r24
      if (xexit > 550)
    3790:	80 91 ad 2a 	lds	r24, 0x2AAD
    3794:	90 91 ae 2a 	lds	r25, 0x2AAE
    3798:	87 32       	cpi	r24, 0x27	; 39
    379a:	92 40       	sbci	r25, 0x02	; 2
    379c:	18 f0       	brcs	.+6      	; 0x37a4 <SliderAlgorithm+0x1b6>
      {
        x.u16[LSB] = 1101;
    379e:	2d e4       	ldi	r18, 0x4D	; 77
    37a0:	34 e0       	ldi	r19, 0x04	; 4
    37a2:	02 c0       	rjmp	.+4      	; 0x37a8 <SliderAlgorithm+0x1ba>
      }
      else
      {
        x.u16[LSB] = 0;
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
      }
      z = MAX_RADIUS;
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    37a8:	00 93 a7 2a 	sts	0x2AA7, r16
    37ac:	10 93 a8 2a 	sts	0x2AA8, r17
    37b0:	11 c0       	rjmp	.+34     	; 0x37d4 <SliderAlgorithm+0x1e6>
   }
   else
   {
      // check for start of swipe
      if (out_of_range == 1)
    37b2:	81 30       	cpi	r24, 0x01	; 1
    37b4:	41 f4       	brne	.+16     	; 0x37c6 <SliderAlgorithm+0x1d8>
      {
        xenter = x.u16[LSB];
    37b6:	20 93 a9 2a 	sts	0x2AA9, r18
    37ba:	30 93 aa 2a 	sts	0x2AAA, r19
        SwipeStartTime = QS_GlobalCounterOverflow;
    37be:	00 93 ab 2a 	sts	0x2AAB, r16
    37c2:	10 93 ac 2a 	sts	0x2AAC, r17
      }
      out_of_range = 0;
    37c6:	10 92 11 20 	sts	0x2011, r1

      xlast = x.u16[LSB];
    37ca:	20 93 af 2a 	sts	0x2AAF, r18
    37ce:	30 93 b0 2a 	sts	0x2AB0, r19
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    37d2:	e0 e0       	ldi	r30, 0x00	; 0
      {
         z = r1;
      }
   }
   
   int16_t tmp_x = 15-((x.u16[LSB])/73);
    37d4:	59 01       	movw	r10, r18
    37d6:	c9 01       	movw	r24, r18
    37d8:	69 e4       	ldi	r22, 0x49	; 73
    37da:	70 e0       	ldi	r23, 0x00	; 0
    37dc:	0e 94 97 4e 	call	0x9d2e	; 0x9d2e <__udivmodhi4>
    37e0:	4f e0       	ldi	r20, 0x0F	; 15
    37e2:	50 e0       	ldi	r21, 0x00	; 0
    37e4:	46 1b       	sub	r20, r22
    37e6:	57 0b       	sbc	r21, r23
   
   if (tmp_x < 0) {
	   samples->x_axis = 0;
    37e8:	d7 01       	movw	r26, r14
      }
   }
   
   int16_t tmp_x = 15-((x.u16[LSB])/73);
   
   if (tmp_x < 0) {
    37ea:	57 ff       	sbrs	r21, 7
    37ec:	03 c0       	rjmp	.+6      	; 0x37f4 <SliderAlgorithm+0x206>
	   samples->x_axis = 0;
    37ee:	53 96       	adiw	r26, 0x13	; 19
    37f0:	1c 92       	st	X, r1
    37f2:	02 c0       	rjmp	.+4      	; 0x37f8 <SliderAlgorithm+0x20a>
   } else if (tmp_x > 15) {
	   samples->x_axis = 15;
   } else {
	   samples->x_axis = tmp_x;   
    37f4:	53 96       	adiw	r26, 0x13	; 19
    37f6:	4c 93       	st	X, r20
   // REPLACE_0_PS3( x.u16[LSB] );
   // REPLACE_0_AUX( z );

   // If a swipe was detected, determine the direction (L/R), set up LED state machine
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
    37f8:	e1 30       	cpi	r30, 0x01	; 1
    37fa:	09 f0       	breq	.+2      	; 0x37fe <SliderAlgorithm+0x210>
    37fc:	63 c0       	rjmp	.+198    	; 0x38c4 <SliderAlgorithm+0x2d6>
   {
       if (xdiff > 150)             // Left Swipe
    37fe:	b7 e9       	ldi	r27, 0x97	; 151
    3800:	cb 16       	cp	r12, r27
    3802:	d1 04       	cpc	r13, r1
    3804:	54 f1       	brlt	.+84     	; 0x385a <SliderAlgorithm+0x26c>
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    3806:	10 92 a6 2a 	sts	0x2AA6, r1
    380a:	20 e0       	ldi	r18, 0x00	; 0
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
    380c:	82 2f       	mov	r24, r18
    380e:	90 e0       	ldi	r25, 0x00	; 0
    3810:	fc 01       	movw	r30, r24
    3812:	e2 56       	subi	r30, 0x62	; 98
    3814:	f5 4d       	sbci	r31, 0xD5	; 213
    3816:	a7 e2       	ldi	r26, 0x27	; 39
    3818:	b0 e0       	ldi	r27, 0x00	; 0
    381a:	ac 0f       	add	r26, r28
    381c:	bd 1f       	adc	r27, r29
    381e:	a8 0f       	add	r26, r24
    3820:	b9 1f       	adc	r27, r25
    3822:	8c 91       	ld	r24, X
    3824:	80 83       	st	Z, r24
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
   {
       if (xdiff > 150)             // Left Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    3826:	81 e0       	ldi	r24, 0x01	; 1
    3828:	82 0f       	add	r24, r18
    382a:	88 30       	cpi	r24, 0x08	; 8
    382c:	10 f4       	brcc	.+4      	; 0x3832 <SliderAlgorithm+0x244>
    382e:	28 2f       	mov	r18, r24
    3830:	ed cf       	rjmp	.-38     	; 0x380c <SliderAlgorithm+0x21e>
    3832:	80 93 a6 2a 	sts	0x2AA6, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send LEFT_SWIPE gesture
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
    3836:	df 92       	push	r13
    3838:	cf 92       	push	r12
    383a:	1f 92       	push	r1
    383c:	7f 92       	push	r7
    383e:	88 e8       	ldi	r24, 0x88	; 136
    3840:	95 e2       	ldi	r25, 0x25	; 37
    3842:	9f 93       	push	r25
    3844:	8f 93       	push	r24
    3846:	83 e9       	ldi	r24, 0x93	; 147
    3848:	95 e2       	ldi	r25, 0x25	; 37
    384a:	9f 93       	push	r25
    384c:	8f 93       	push	r24
    384e:	0e 94 a9 50 	call	0xa152	; 0xa152 <printf>
			samples->gesture = LEFT_SWIPE;
    3852:	82 e0       	ldi	r24, 0x02	; 2
    3854:	f7 01       	movw	r30, r14
    3856:	82 8b       	std	Z+18, r24	; 0x12
    3858:	32 c0       	rjmp	.+100    	; 0x38be <SliderAlgorithm+0x2d0>
       }
       else if (xdiff < -150)       // Right Swipe
    385a:	3a e6       	ldi	r19, 0x6A	; 106
    385c:	c3 16       	cp	r12, r19
    385e:	3f ef       	ldi	r19, 0xFF	; 255
    3860:	d3 06       	cpc	r13, r19
    3862:	9c f5       	brge	.+102    	; 0x38ca <SliderAlgorithm+0x2dc>
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    3864:	10 92 a6 2a 	sts	0x2AA6, r1
    3868:	20 e0       	ldi	r18, 0x00	; 0
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
    386a:	82 2f       	mov	r24, r18
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	fc 01       	movw	r30, r24
    3870:	e2 56       	subi	r30, 0x62	; 98
    3872:	f5 4d       	sbci	r31, 0xD5	; 213
    3874:	af e1       	ldi	r26, 0x1F	; 31
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	ac 0f       	add	r26, r28
    387a:	bd 1f       	adc	r27, r29
    387c:	a8 0f       	add	r26, r24
    387e:	b9 1f       	adc	r27, r25
    3880:	8c 91       	ld	r24, X
    3882:	80 83       	st	Z, r24
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
			samples->gesture = LEFT_SWIPE;
       }
       else if (xdiff < -150)       // Right Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    3884:	81 e0       	ldi	r24, 0x01	; 1
    3886:	82 0f       	add	r24, r18
    3888:	88 30       	cpi	r24, 0x08	; 8
    388a:	10 f4       	brcc	.+4      	; 0x3890 <SliderAlgorithm+0x2a2>
    388c:	28 2f       	mov	r18, r24
    388e:	ed cf       	rjmp	.-38     	; 0x386a <SliderAlgorithm+0x27c>
    3890:	80 93 a6 2a 	sts	0x2AA6, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send RIGHT_SWIPE gesture
            printf("                            %s: %d, %d\n", "RIGHT_SWIPE", swipe_speed, -xdiff) ;     
    3894:	d1 94       	neg	r13
    3896:	c1 94       	neg	r12
    3898:	d1 08       	sbc	r13, r1
    389a:	df 92       	push	r13
    389c:	cf 92       	push	r12
    389e:	1f 92       	push	r1
    38a0:	7f 92       	push	r7
    38a2:	8b eb       	ldi	r24, 0xBB	; 187
    38a4:	95 e2       	ldi	r25, 0x25	; 37
    38a6:	9f 93       	push	r25
    38a8:	8f 93       	push	r24
    38aa:	83 e9       	ldi	r24, 0x93	; 147
    38ac:	95 e2       	ldi	r25, 0x25	; 37
    38ae:	9f 93       	push	r25
    38b0:	8f 93       	push	r24
    38b2:	0e 94 a9 50 	call	0xa152	; 0xa152 <printf>
			samples->gesture = RIGHT_SWIPE;       
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	d7 01       	movw	r26, r14
    38ba:	52 96       	adiw	r26, 0x12	; 18
    38bc:	8c 93       	st	X, r24
    38be:	cd bf       	out	0x3d, r28	; 61
    38c0:	de bf       	out	0x3e, r29	; 62
    38c2:	03 c0       	rjmp	.+6      	; 0x38ca <SliderAlgorithm+0x2dc>
       }
   } else {
	   samples->gesture = 0;
    38c4:	d7 01       	movw	r26, r14
    38c6:	52 96       	adiw	r26, 0x12	; 18
    38c8:	1c 92       	st	X, r1
    38ca:	fe 01       	movw	r30, r28
    38cc:	31 96       	adiw	r30, 0x01	; 1

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    38ce:	20 e0       	ldi	r18, 0x00	; 0
   {
        if (x.u16[LSB] < xbucket_Array[xbucket])
    38d0:	81 91       	ld	r24, Z+
    38d2:	91 91       	ld	r25, Z+
    38d4:	a8 16       	cp	r10, r24
    38d6:	b9 06       	cpc	r11, r25
    38d8:	18 f0       	brcs	.+6      	; 0x38e0 <SliderAlgorithm+0x2f2>

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    38da:	2f 5f       	subi	r18, 0xFF	; 255
    38dc:	2a 30       	cpi	r18, 0x0A	; 10
    38de:	c1 f7       	brne	.-16     	; 0x38d0 <SliderAlgorithm+0x2e2>
            break;
        }
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
    38e0:	80 91 9d 2a 	lds	r24, 0x2A9D
    38e4:	28 13       	cpse	r18, r24
    38e6:	04 c0       	rjmp	.+8      	; 0x38f0 <SliderAlgorithm+0x302>
    38e8:	29 30       	cpi	r18, 0x09	; 9
    38ea:	11 f0       	breq	.+4      	; 0x38f0 <SliderAlgorithm+0x302>
    38ec:	21 11       	cpse	r18, r1
    38ee:	04 c0       	rjmp	.+8      	; 0x38f8 <SliderAlgorithm+0x30a>
   {
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    38f0:	00 93 a7 2a 	sts	0x2AA7, r16
    38f4:	10 93 a8 2a 	sts	0x2AA8, r17
   }
   last_xbucket = xbucket;  // store latest information for next comparison
    38f8:	20 93 9d 2a 	sts	0x2A9D, r18

   // LED State machine - Pause gesture recognition is also integrated here 
   if (LED_State != 0)  // indicate gesture pattern
    38fc:	e0 91 a6 2a 	lds	r30, 0x2AA6
    3900:	ee 23       	and	r30, r30
    3902:	e1 f0       	breq	.+56     	; 0x393c <SliderAlgorithm+0x34e>
   {
      if ((u8)(QS_GlobalCounterOverflow - LED_flash_timeout) >= LED_STATE_TIME)
    3904:	80 91 9b 2a 	lds	r24, 0x2A9B
    3908:	b0 2f       	mov	r27, r16
    390a:	b8 1b       	sub	r27, r24
    390c:	b7 32       	cpi	r27, 0x27	; 39
    390e:	08 f4       	brcc	.+2      	; 0x3912 <SliderAlgorithm+0x324>
    3910:	64 c0       	rjmp	.+200    	; 0x39da <SliderAlgorithm+0x3ec>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    3912:	00 93 9b 2a 	sts	0x2A9B, r16
    3916:	10 93 9c 2a 	sts	0x2A9C, r17

         // Write to Port 1 of the MCU
         PortSet( 1, LED_flash_pattern[(--LED_State)%8]); 
    391a:	e1 50       	subi	r30, 0x01	; 1
    391c:	e0 93 a6 2a 	sts	0x2AA6, r30
    3920:	e7 70       	andi	r30, 0x07	; 7
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	e2 56       	subi	r30, 0x62	; 98
    3926:	f5 4d       	sbci	r31, 0xD5	; 213
    3928:	60 81       	ld	r22, Z
    392a:	70 e0       	ldi	r23, 0x00	; 0
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	18 dd       	rcall	.-1488   	; 0x3362 <PortSet>

         Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3932:	00 93 a7 2a 	sts	0x2AA7, r16
    3936:	10 93 a8 2a 	sts	0x2AA8, r17
    393a:	4f c0       	rjmp	.+158    	; 0x39da <SliderAlgorithm+0x3ec>
      //PortSet( 1, LED_P1_Vals[xbucket]);
	  //printf("x: %d \r\n",x.u16[LSB]);


      // check time stamp for pause
      if ((QS_GlobalCounterOverflow - Pause_gesture_timeout) >= PAUSE_TIMEOUT) 
    393c:	80 91 a7 2a 	lds	r24, 0x2AA7
    3940:	90 91 a8 2a 	lds	r25, 0x2AA8
    3944:	f8 01       	movw	r30, r16
    3946:	e8 1b       	sub	r30, r24
    3948:	f9 0b       	sbc	r31, r25
    394a:	cf 01       	movw	r24, r30
    394c:	8a 38       	cpi	r24, 0x8A	; 138
    394e:	92 40       	sbci	r25, 0x02	; 2
    3950:	08 f4       	brcc	.+2      	; 0x3954 <SliderAlgorithm+0x366>
    3952:	43 c0       	rjmp	.+134    	; 0x39da <SliderAlgorithm+0x3ec>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    3954:	00 93 9b 2a 	sts	0x2A9B, r16
    3958:	10 93 9c 2a 	sts	0x2A9C, r17
         
         for (LED_State = 0; LED_State < 8; )
    395c:	10 92 a6 2a 	sts	0x2AA6, r1
    3960:	e0 e0       	ldi	r30, 0x00	; 0
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    3962:	6f ef       	ldi	r22, 0xFF	; 255
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	ce 01       	movw	r24, r28
    3968:	45 96       	adiw	r24, 0x15	; 21
    396a:	82 0f       	add	r24, r18
    396c:	93 1f       	adc	r25, r19
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    396e:	ae 2f       	mov	r26, r30
    3970:	b0 e0       	ldi	r27, 0x00	; 0
    3972:	a2 56       	subi	r26, 0x62	; 98
    3974:	b5 4d       	sbci	r27, 0xD5	; 213
    3976:	6c 93       	st	X, r22
    3978:	a1 e0       	ldi	r26, 0x01	; 1
    397a:	ae 0f       	add	r26, r30
            LED_flash_pattern[LED_State++] = 0xFF;
    397c:	b0 e0       	ldi	r27, 0x00	; 0
    397e:	a2 56       	subi	r26, 0x62	; 98
    3980:	b5 4d       	sbci	r27, 0xD5	; 213
    3982:	6c 93       	st	X, r22
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3984:	dc 01       	movw	r26, r24
    3986:	5c 91       	ld	r21, X
    3988:	a2 e0       	ldi	r26, 0x02	; 2
    398a:	ae 0f       	add	r26, r30
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	a2 56       	subi	r26, 0x62	; 98
    3990:	b5 4d       	sbci	r27, 0xD5	; 213
    3992:	5c 93       	st	X, r21
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3994:	44 e0       	ldi	r20, 0x04	; 4
    3996:	4e 0f       	add	r20, r30
    3998:	ed 5f       	subi	r30, 0xFD	; 253
    399a:	f0 e0       	ldi	r31, 0x00	; 0
    399c:	e2 56       	subi	r30, 0x62	; 98
    399e:	f5 4d       	sbci	r31, 0xD5	; 213
    39a0:	50 83       	st	Z, r21
      // check time stamp for pause
      if ((QS_GlobalCounterOverflow - Pause_gesture_timeout) >= PAUSE_TIMEOUT) 
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
    39a2:	48 30       	cpi	r20, 0x08	; 8
    39a4:	10 f4       	brcc	.+4      	; 0x39aa <SliderAlgorithm+0x3bc>
         {
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    39a6:	e4 2f       	mov	r30, r20
    39a8:	e2 cf       	rjmp	.-60     	; 0x396e <SliderAlgorithm+0x380>
         } // LED_State should be 8 when this loop is finished.

         LED_State = 16; // Set LED_State to 16 to repeat the pattern twice
    39aa:	80 e1       	ldi	r24, 0x10	; 16
    39ac:	80 93 a6 2a 	sts	0x2AA6, r24

         // Send off a PAUSE gesture to host.
         printf("                            %s: %d\n", "PAUSE", xbucket<<8) ;   
    39b0:	2f 93       	push	r18
    39b2:	1f 92       	push	r1
    39b4:	87 ec       	ldi	r24, 0xC7	; 199
    39b6:	95 e2       	ldi	r25, 0x25	; 37
    39b8:	9f 93       	push	r25
    39ba:	8f 93       	push	r24
    39bc:	8d ec       	ldi	r24, 0xCD	; 205
    39be:	95 e2       	ldi	r25, 0x25	; 37
    39c0:	9f 93       	push	r25
    39c2:	8f 93       	push	r24
    39c4:	0e 94 a9 50 	call	0xa152	; 0xa152 <printf>
		 samples->gesture = PAUSE;         
    39c8:	83 e0       	ldi	r24, 0x03	; 3
    39ca:	f7 01       	movw	r30, r14
    39cc:	82 8b       	std	Z+18, r24	; 0x12
    39ce:	0f 90       	pop	r0
    39d0:	0f 90       	pop	r0
    39d2:	0f 90       	pop	r0
    39d4:	0f 90       	pop	r0
    39d6:	0f 90       	pop	r0
    39d8:	0f 90       	pop	r0
       // It is best to display this than printf. Use AUX and PS3 channels
       //REPLACE_0_PS3( 0 );
       //REPLACE_0_AUX( 0 ); 
	    //printf("no touch \r\n");
   }
}
    39da:	ae 96       	adiw	r28, 0x2e	; 46
    39dc:	cd bf       	out	0x3d, r28	; 61
    39de:	de bf       	out	0x3e, r29	; 62
    39e0:	df 91       	pop	r29
    39e2:	cf 91       	pop	r28
    39e4:	1f 91       	pop	r17
    39e6:	0f 91       	pop	r16
    39e8:	ff 90       	pop	r15
    39ea:	ef 90       	pop	r14
    39ec:	df 90       	pop	r13
    39ee:	cf 90       	pop	r12
    39f0:	bf 90       	pop	r11
    39f2:	af 90       	pop	r10
    39f4:	9f 90       	pop	r9
    39f6:	8f 90       	pop	r8
    39f8:	7f 90       	pop	r7
    39fa:	5f 90       	pop	r5
    39fc:	4f 90       	pop	r4
    39fe:	3f 90       	pop	r3
    3a00:	2f 90       	pop	r2
    3a02:	08 95       	ret

00003a04 <spi_setup>:
#include "spi.h"

void spi_setup(void) 
{
	//Disable power reduction for SPIC 
	PR.PRPC &= ~0x08;	
    3a04:	e0 e7       	ldi	r30, 0x70	; 112
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	83 81       	ldd	r24, Z+3	; 0x03
    3a0a:	87 7f       	andi	r24, 0xF7	; 247
    3a0c:	83 83       	std	Z+3, r24	; 0x03
	
	PORTC.DIRSET = SD_CS | SD_MOSI | SD_SCK;
    3a0e:	e0 e4       	ldi	r30, 0x40	; 64
    3a10:	f6 e0       	ldi	r31, 0x06	; 6
    3a12:	80 eb       	ldi	r24, 0xB0	; 176
    3a14:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = SD_MISO;
    3a16:	80 e4       	ldi	r24, 0x40	; 64
    3a18:	82 83       	std	Z+2, r24	; 0x02
	PORTC.OUTSET = SD_CS;
    3a1a:	80 e1       	ldi	r24, 0x10	; 16
    3a1c:	85 83       	std	Z+5, r24	; 0x05
	
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    3a1e:	80 ed       	ldi	r24, 0xD0	; 208
    3a20:	80 93 c0 08 	sts	0x08C0, r24
    3a24:	08 95       	ret

00003a26 <spi_disable>:
}

void spi_disable(void) 
{	
	SPIC.CTRL = 0;
    3a26:	10 92 c0 08 	sts	0x08C0, r1
	
	PORTC.DIRCLR   = SD_CS | SD_MOSI | SD_SCK;
    3a2a:	e0 e4       	ldi	r30, 0x40	; 64
    3a2c:	f6 e0       	ldi	r31, 0x06	; 6
    3a2e:	80 eb       	ldi	r24, 0xB0	; 176
    3a30:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;
    3a32:	88 e1       	ldi	r24, 0x18	; 24
    3a34:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;
    3a36:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;
    3a38:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;
    3a3a:	87 8b       	std	Z+23, r24	; 0x17
	
	//Enable power reduction for SPIC 
	PR.PRPC |= 0x08;
    3a3c:	e0 e7       	ldi	r30, 0x70	; 112
    3a3e:	f0 e0       	ldi	r31, 0x00	; 0
    3a40:	83 81       	ldd	r24, Z+3	; 0x03
    3a42:	88 60       	ori	r24, 0x08	; 8
    3a44:	83 83       	std	Z+3, r24	; 0x03
    3a46:	08 95       	ret

00003a48 <spi_wr_rd>:

uint8_t spi_wr_rd(uint8_t data) 
{	
	uint16_t timeout = 0;
	
	SPIC.DATA = data;
    3a48:	80 93 c3 08 	sts	0x08C3, r24
	while(!(SPIC.STATUS & SPI_IF_bm)) {
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	20 91 c2 08 	lds	r18, 0x08C2
    3a54:	27 fd       	sbrc	r18, 7
    3a56:	05 c0       	rjmp	.+10     	; 0x3a62 <spi_wr_rd+0x1a>
    3a58:	01 97       	sbiw	r24, 0x01	; 1
		if (timeout++ == 0xffff) {
    3a5a:	00 97       	sbiw	r24, 0x00	; 0
    3a5c:	c9 f7       	brne	.-14     	; 0x3a50 <spi_wr_rd+0x8>
			return 0;
    3a5e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return SPIC.DATA;
}
    3a60:	08 95       	ret
	while(!(SPIC.STATUS & SPI_IF_bm)) {
		if (timeout++ == 0xffff) {
			return 0;
		}
	}
	return SPIC.DATA;
    3a62:	80 91 c3 08 	lds	r24, 0x08C3
    3a66:	08 95       	ret

00003a68 <twi_setup>:
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3a68:	e0 e7       	ldi	r30, 0x70	; 112
    3a6a:	f0 e0       	ldi	r31, 0x00	; 0
    3a6c:	83 81       	ldd	r24, Z+3	; 0x03
    3a6e:	8f 7b       	andi	r24, 0xBF	; 191
    3a70:	83 83       	std	Z+3, r24	; 0x03
    3a72:	e0 e8       	ldi	r30, 0x80	; 128
    3a74:	f4 e0       	ldi	r31, 0x04	; 4
    3a76:	12 82       	std	Z+2, r1	; 0x02
    3a78:	89 e0       	ldi	r24, 0x09	; 9
    3a7a:	85 83       	std	Z+5, r24	; 0x05
    3a7c:	88 e0       	ldi	r24, 0x08	; 8
    3a7e:	81 83       	std	Z+1, r24	; 0x01
    3a80:	81 e0       	ldi	r24, 0x01	; 1
    3a82:	84 83       	std	Z+4, r24	; 0x04
    3a84:	08 95       	ret

00003a86 <twi_start_transmission>:
}

uint8_t twi_start_transmission(TWI_t* const TWI,
const uint8_t slave_address,
const uint16_t timeout_ms)
{
    3a86:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    3a88:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    3a8a:	24 e6       	ldi	r18, 0x64	; 100
    3a8c:	24 9f       	mul	r18, r20
    3a8e:	c0 01       	movw	r24, r0
    3a90:	25 9f       	mul	r18, r21
    3a92:	90 0d       	add	r25, r0
    3a94:	11 24       	eor	r1, r1
	while (timeout_remaining)
    3a96:	00 97       	sbiw	r24, 0x00	; 0
    3a98:	b9 f0       	breq	.+46     	; 0x3ac8 <twi_start_transmission+0x42>
	{
		uint8_t status = TWI->MASTER.STATUS;
    3a9a:	24 81       	ldd	r18, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    3a9c:	32 2f       	mov	r19, r18
    3a9e:	38 74       	andi	r19, 0x48	; 72
    3aa0:	38 34       	cpi	r19, 0x48	; 72
    3aa2:	11 f4       	brne	.+4      	; 0x3aa8 <twi_start_transmission+0x22>
		{
			TWI->MASTER.ADDR = slave_address;
    3aa4:	66 83       	std	Z+6, r22	; 0x06
    3aa6:	0a c0       	rjmp	.+20     	; 0x3abc <twi_start_transmission+0x36>
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    3aa8:	32 2f       	mov	r19, r18
    3aaa:	30 75       	andi	r19, 0x50	; 80
    3aac:	30 35       	cpi	r19, 0x50	; 80
    3aae:	21 f4       	brne	.+8      	; 0x3ab8 <twi_start_transmission+0x32>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3ab0:	87 e0       	ldi	r24, 0x07	; 7
    3ab2:	83 83       	std	Z+3, r24	; 0x03
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
    3ab4:	84 e0       	ldi	r24, 0x04	; 4
    3ab6:	08 95       	ret
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    3ab8:	20 7c       	andi	r18, 0xC0	; 192
    3aba:	61 f4       	brne	.+24     	; 0x3ad4 <twi_start_transmission+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3abc:	2a e6       	ldi	r18, 0x6A	; 106
    3abe:	2a 95       	dec	r18
    3ac0:	f1 f7       	brne	.-4      	; 0x3abe <twi_start_transmission+0x38>
    3ac2:	00 c0       	rjmp	.+0      	; 0x3ac4 <twi_start_transmission+0x3e>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    3ac4:	01 97       	sbiw	r24, 0x01	; 1
    3ac6:	e7 cf       	rjmp	.-50     	; 0x3a96 <twi_start_transmission+0x10>
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    3ac8:	84 81       	ldd	r24, Z+4	; 0x04
    3aca:	85 ff       	sbrs	r24, 5
    3acc:	05 c0       	rjmp	.+10     	; 0x3ad8 <twi_start_transmission+0x52>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3ace:	87 e0       	ldi	r24, 0x07	; 7
    3ad0:	83 83       	std	Z+3, r24	; 0x03
    3ad2:	02 c0       	rjmp	.+4      	; 0x3ad8 <twi_start_transmission+0x52>
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
		{
			return TWI_ERROR_NO_ERROR;
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	08 95       	ret
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    3ad8:	83 e0       	ldi	r24, 0x03	; 3
			twi_stop_transmission(TWI);
		}
	}

	return TWI_ERROR_BUS_CAP_TIMEOUT;
}
    3ada:	08 95       	ret

00003adc <twi_send_byte>:

uint8_t twi_send_byte(TWI_t* const TWI,
const uint16_t timeout_ms,
const uint8_t data)
{
    3adc:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
    3ade:	47 83       	std	Z+7, r20	; 0x07
	
	timeout_remaining = (timeout_ms * 100);
    3ae0:	24 e6       	ldi	r18, 0x64	; 100
    3ae2:	26 9f       	mul	r18, r22
    3ae4:	c0 01       	movw	r24, r0
    3ae6:	27 9f       	mul	r18, r23
    3ae8:	90 0d       	add	r25, r0
    3aea:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    3aec:	24 81       	ldd	r18, Z+4	; 0x04
    3aee:	26 fd       	sbrc	r18, 6
    3af0:	08 c0       	rjmp	.+16     	; 0x3b02 <twi_send_byte+0x26>
    3af2:	00 97       	sbiw	r24, 0x00	; 0
    3af4:	31 f0       	breq	.+12     	; 0x3b02 <twi_send_byte+0x26>
    3af6:	2a e6       	ldi	r18, 0x6A	; 106
    3af8:	2a 95       	dec	r18
    3afa:	f1 f7       	brne	.-4      	; 0x3af8 <twi_send_byte+0x1c>
    3afc:	00 c0       	rjmp	.+0      	; 0x3afe <twi_send_byte+0x22>
		_delay_us(10);
		timeout_remaining--;
    3afe:	01 97       	sbiw	r24, 0x01	; 1
    3b00:	f5 cf       	rjmp	.-22     	; 0x3aec <twi_send_byte+0x10>
	}

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    3b02:	84 81       	ldd	r24, Z+4	; 0x04
    3b04:	86 ff       	sbrs	r24, 6
    3b06:	06 c0       	rjmp	.+12     	; 0x3b14 <twi_send_byte+0x38>
    3b08:	84 81       	ldd	r24, Z+4	; 0x04
    3b0a:	82 95       	swap	r24
    3b0c:	81 70       	andi	r24, 0x01	; 1
    3b0e:	91 e0       	ldi	r25, 0x01	; 1
    3b10:	89 27       	eor	r24, r25
    3b12:	08 95       	ret
    3b14:	80 e0       	ldi	r24, 0x00	; 0
}
    3b16:	08 95       	ret

00003b18 <twi_receive_byte>:

uint8_t twi_receive_byte(TWI_t* const TWI,
const uint16_t timeout_ms,
uint8_t* const data,
const uint8_t end_of_data)
{
    3b18:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
    3b1a:	84 81       	ldd	r24, Z+4	; 0x04
    3b1c:	8c 70       	andi	r24, 0x0C	; 12
    3b1e:	8c 30       	cpi	r24, 0x0C	; 12
    3b20:	e1 f0       	breq	.+56     	; 0x3b5a <twi_receive_byte+0x42>
		return false;
	}
	timeout_remaining = (timeout_ms * 100);
    3b22:	34 e6       	ldi	r19, 0x64	; 100
    3b24:	36 9f       	mul	r19, r22
    3b26:	c0 01       	movw	r24, r0
    3b28:	37 9f       	mul	r19, r23
    3b2a:	90 0d       	add	r25, r0
    3b2c:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm) && timeout_remaining) {
    3b2e:	34 81       	ldd	r19, Z+4	; 0x04
    3b30:	37 fd       	sbrc	r19, 7
    3b32:	08 c0       	rjmp	.+16     	; 0x3b44 <twi_receive_byte+0x2c>
    3b34:	00 97       	sbiw	r24, 0x00	; 0
    3b36:	31 f0       	breq	.+12     	; 0x3b44 <twi_receive_byte+0x2c>
    3b38:	3a e6       	ldi	r19, 0x6A	; 106
    3b3a:	3a 95       	dec	r19
    3b3c:	f1 f7       	brne	.-4      	; 0x3b3a <twi_receive_byte+0x22>
    3b3e:	00 c0       	rjmp	.+0      	; 0x3b40 <twi_receive_byte+0x28>
		_delay_us(10);
		timeout_remaining--;
    3b40:	01 97       	sbiw	r24, 0x01	; 1
    3b42:	f5 cf       	rjmp	.-22     	; 0x3b2e <twi_receive_byte+0x16>
	}

	*data = TWI->MASTER.DATA;
    3b44:	87 81       	ldd	r24, Z+7	; 0x07
    3b46:	da 01       	movw	r26, r20
    3b48:	8c 93       	st	X, r24

	if (end_of_data)
    3b4a:	22 23       	and	r18, r18
    3b4c:	11 f0       	breq	.+4      	; 0x3b52 <twi_receive_byte+0x3a>
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3b4e:	87 e0       	ldi	r24, 0x07	; 7
    3b50:	01 c0       	rjmp	.+2      	; 0x3b54 <twi_receive_byte+0x3c>
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    3b52:	82 e0       	ldi	r24, 0x02	; 2
    3b54:	83 83       	std	Z+3, r24	; 0x03

	return true;
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	08 95       	ret
const uint8_t end_of_data)
{
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
		return false;
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
}
    3b5c:	08 95       	ret

00003b5e <twi_read_packet>:
const uint8_t slave_address,
const uint16_t timeout_ms,
const uint8_t reg,
uint8_t* data,
uint8_t length)
{
    3b5e:	8f 92       	push	r8
    3b60:	9f 92       	push	r9
    3b62:	af 92       	push	r10
    3b64:	bf 92       	push	r11
    3b66:	cf 92       	push	r12
    3b68:	df 92       	push	r13
    3b6a:	ef 92       	push	r14
    3b6c:	ff 92       	push	r15
    3b6e:	0f 93       	push	r16
    3b70:	1f 93       	push	r17
    3b72:	cf 93       	push	r28
    3b74:	df 93       	push	r29
    3b76:	1f 92       	push	r1
    3b78:	cd b7       	in	r28, 0x3d	; 61
    3b7a:	de b7       	in	r29, 0x3e	; 62
    3b7c:	4c 01       	movw	r8, r24
    3b7e:	f6 2e       	mov	r15, r22
    3b80:	6a 01       	movw	r12, r20
	uint8_t error_code;
	uint8_t len = length;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    3b82:	66 0f       	add	r22, r22
    3b84:	29 83       	std	Y+1, r18	; 0x01
    3b86:	7f df       	rcall	.-258    	; 0x3a86 <twi_start_transmission>
    3b88:	29 81       	ldd	r18, Y+1	; 0x01
    3b8a:	81 30       	cpi	r24, 0x01	; 1
    3b8c:	41 f5       	brne	.+80     	; 0x3bde <twi_read_packet+0x80>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
    3b8e:	42 2f       	mov	r20, r18
    3b90:	b6 01       	movw	r22, r12
    3b92:	c4 01       	movw	r24, r8
    3b94:	a3 df       	rcall	.-186    	; 0x3adc <twi_send_byte>
    3b96:	88 23       	and	r24, r24
    3b98:	21 f1       	breq	.+72     	; 0x3be2 <twi_read_packet+0x84>
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
    3b9a:	6f 2d       	mov	r22, r15
    3b9c:	66 0f       	add	r22, r22
    3b9e:	61 60       	ori	r22, 0x01	; 1
    3ba0:	a6 01       	movw	r20, r12
    3ba2:	c4 01       	movw	r24, r8
    3ba4:	70 df       	rcall	.-288    	; 0x3a86 <twi_start_transmission>
    3ba6:	81 30       	cpi	r24, 0x01	; 1
    3ba8:	21 f0       	breq	.+8      	; 0x3bb2 <twi_read_packet+0x54>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3baa:	87 e0       	ldi	r24, 0x07	; 7
    3bac:	f4 01       	movw	r30, r8
    3bae:	83 83       	std	Z+3, r24	; 0x03
    3bb0:	16 c0       	rjmp	.+44     	; 0x3bde <twi_read_packet+0x80>
    3bb2:	ff 24       	eor	r15, r15
    3bb4:	fa 94       	dec	r15
    3bb6:	fe 0c       	add	r15, r14
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
    3bb8:	8f ef       	ldi	r24, 0xFF	; 255
    3bba:	f8 16       	cp	r15, r24
    3bbc:	b1 f3       	breq	.-20     	; 0x3baa <twi_read_packet+0x4c>
			{
				if (!(twi_receive_byte(TWI, timeout_ms, data++, (length == 0))))
    3bbe:	58 01       	movw	r10, r16
    3bc0:	ff ef       	ldi	r31, 0xFF	; 255
    3bc2:	af 1a       	sub	r10, r31
    3bc4:	bf 0a       	sbc	r11, r31
    3bc6:	21 e0       	ldi	r18, 0x01	; 1
    3bc8:	f1 10       	cpse	r15, r1
    3bca:	20 e0       	ldi	r18, 0x00	; 0
    3bcc:	a8 01       	movw	r20, r16
    3bce:	b6 01       	movw	r22, r12
    3bd0:	c4 01       	movw	r24, r8
    3bd2:	a2 df       	rcall	.-188    	; 0x3b18 <twi_receive_byte>
    3bd4:	fa 94       	dec	r15
    3bd6:	88 23       	and	r24, r24
    3bd8:	41 f3       	breq	.-48     	; 0x3baa <twi_read_packet+0x4c>
    3bda:	85 01       	movw	r16, r10
    3bdc:	ed cf       	rjmp	.-38     	; 0x3bb8 <twi_read_packet+0x5a>
		}

		twi_stop_transmission(TWI);
	}

	return len;
    3bde:	8e 2d       	mov	r24, r14
    3be0:	01 c0       	rjmp	.+2      	; 0x3be4 <twi_read_packet+0x86>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    3be2:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return len;
}
    3be4:	0f 90       	pop	r0
    3be6:	df 91       	pop	r29
    3be8:	cf 91       	pop	r28
    3bea:	1f 91       	pop	r17
    3bec:	0f 91       	pop	r16
    3bee:	ff 90       	pop	r15
    3bf0:	ef 90       	pop	r14
    3bf2:	df 90       	pop	r13
    3bf4:	cf 90       	pop	r12
    3bf6:	bf 90       	pop	r11
    3bf8:	af 90       	pop	r10
    3bfa:	9f 90       	pop	r9
    3bfc:	8f 90       	pop	r8
    3bfe:	08 95       	ret

00003c00 <twi_write_packet>:
const uint8_t slave_address,
const uint16_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    3c00:	8f 92       	push	r8
    3c02:	9f 92       	push	r9
    3c04:	af 92       	push	r10
    3c06:	bf 92       	push	r11
    3c08:	cf 92       	push	r12
    3c0a:	df 92       	push	r13
    3c0c:	ef 92       	push	r14
    3c0e:	0f 93       	push	r16
    3c10:	1f 93       	push	r17
    3c12:	cf 93       	push	r28
    3c14:	df 93       	push	r29
    3c16:	1f 92       	push	r1
    3c18:	cd b7       	in	r28, 0x3d	; 61
    3c1a:	de b7       	in	r29, 0x3e	; 62
    3c1c:	4c 01       	movw	r8, r24
    3c1e:	5a 01       	movw	r10, r20
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    3c20:	66 0f       	add	r22, r22
    3c22:	29 83       	std	Y+1, r18	; 0x01
    3c24:	30 df       	rcall	.-416    	; 0x3a86 <twi_start_transmission>
    3c26:	29 81       	ldd	r18, Y+1	; 0x01
    3c28:	81 30       	cpi	r24, 0x01	; 1
    3c2a:	e1 f4       	brne	.+56     	; 0x3c64 <twi_write_packet+0x64>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
    3c2c:	42 2f       	mov	r20, r18
    3c2e:	b5 01       	movw	r22, r10
    3c30:	c4 01       	movw	r24, r8
    3c32:	54 df       	rcall	.-344    	; 0x3adc <twi_send_byte>
    3c34:	88 23       	and	r24, r24
    3c36:	c1 f0       	breq	.+48     	; 0x3c68 <twi_write_packet+0x68>
    3c38:	68 01       	movw	r12, r16
    3c3a:	1f ef       	ldi	r17, 0xFF	; 255
    3c3c:	1e 0d       	add	r17, r14
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    3c3e:	1f 3f       	cpi	r17, 0xFF	; 255
    3c40:	61 f0       	breq	.+24     	; 0x3c5a <twi_write_packet+0x5a>
		{
			if (!(twi_send_byte(TWI, timeout_ms, *(data++))))
    3c42:	f6 01       	movw	r30, r12
    3c44:	41 91       	ld	r20, Z+
    3c46:	6f 01       	movw	r12, r30
    3c48:	b5 01       	movw	r22, r10
    3c4a:	c4 01       	movw	r24, r8
    3c4c:	47 df       	rcall	.-370    	; 0x3adc <twi_send_byte>
    3c4e:	9f ef       	ldi	r25, 0xFF	; 255
    3c50:	91 0f       	add	r25, r17
    3c52:	88 23       	and	r24, r24
    3c54:	11 f0       	breq	.+4      	; 0x3c5a <twi_write_packet+0x5a>
    3c56:	19 2f       	mov	r17, r25
    3c58:	f2 cf       	rjmp	.-28     	; 0x3c3e <twi_write_packet+0x3e>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3c5a:	87 e0       	ldi	r24, 0x07	; 7
    3c5c:	f4 01       	movw	r30, r8
    3c5e:	83 83       	std	Z+3, r24	; 0x03
    3c60:	81 2f       	mov	r24, r17
    3c62:	03 c0       	rjmp	.+6      	; 0x3c6a <twi_write_packet+0x6a>
    3c64:	8e 2d       	mov	r24, r14
    3c66:	01 c0       	rjmp	.+2      	; 0x3c6a <twi_write_packet+0x6a>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    3c68:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return length;
    3c6a:	0f 90       	pop	r0
    3c6c:	df 91       	pop	r29
    3c6e:	cf 91       	pop	r28
    3c70:	1f 91       	pop	r17
    3c72:	0f 91       	pop	r16
    3c74:	ef 90       	pop	r14
    3c76:	df 90       	pop	r13
    3c78:	cf 90       	pop	r12
    3c7a:	bf 90       	pop	r11
    3c7c:	af 90       	pop	r10
    3c7e:	9f 90       	pop	r9
    3c80:	8f 90       	pop	r8
    3c82:	08 95       	ret

00003c84 <uart_setup>:
	PORTD.DIRCLR   = UART_TX | UART_RX;
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;
	PORTD.PIN3CTRL = PORT_OPC_PULLUP_gc;
	
	//Enable power reduction for USARTD0 
	PR.PRPD |= 0x10;
    3c84:	e0 e7       	ldi	r30, 0x70	; 112
    3c86:	f0 e0       	ldi	r31, 0x00	; 0
    3c88:	84 81       	ldd	r24, Z+4	; 0x04
    3c8a:	8f 7e       	andi	r24, 0xEF	; 239
    3c8c:	84 83       	std	Z+4, r24	; 0x04
    3c8e:	e0 e6       	ldi	r30, 0x60	; 96
    3c90:	f6 e0       	ldi	r31, 0x06	; 6
    3c92:	88 e0       	ldi	r24, 0x08	; 8
    3c94:	81 83       	std	Z+1, r24	; 0x01
    3c96:	84 e0       	ldi	r24, 0x04	; 4
    3c98:	82 83       	std	Z+2, r24	; 0x02
    3c9a:	e0 ea       	ldi	r30, 0xA0	; 160
    3c9c:	f9 e0       	ldi	r31, 0x09	; 9
    3c9e:	80 e2       	ldi	r24, 0x20	; 32
    3ca0:	83 83       	std	Z+3, r24	; 0x03
    3ca2:	8e e2       	ldi	r24, 0x2E	; 46
    3ca4:	86 83       	std	Z+6, r24	; 0x06
    3ca6:	88 e9       	ldi	r24, 0x98	; 152
    3ca8:	87 83       	std	Z+7, r24	; 0x07
    3caa:	83 e0       	ldi	r24, 0x03	; 3
    3cac:	85 83       	std	Z+5, r24	; 0x05
    3cae:	88 e1       	ldi	r24, 0x18	; 24
    3cb0:	84 83       	std	Z+4, r24	; 0x04
    3cb2:	08 95       	ret

00003cb4 <uart_put_char>:
}

void uart_put_char(char c) 
{
	while (!(USARTD0.STATUS & USART_DREIF_bm));
    3cb4:	90 91 a1 09 	lds	r25, 0x09A1
    3cb8:	95 ff       	sbrs	r25, 5
    3cba:	fc cf       	rjmp	.-8      	; 0x3cb4 <uart_put_char>
	USARTD0.DATA = c;
    3cbc:	80 93 a0 09 	sts	0x09A0, r24
    3cc0:	08 95       	ret

00003cc2 <uart_get_char>:
}

char uart_get_char(void) 
{
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
    3cc2:	80 91 a1 09 	lds	r24, 0x09A1
    3cc6:	87 ff       	sbrs	r24, 7
    3cc8:	fc cf       	rjmp	.-8      	; 0x3cc2 <uart_get_char>
	return USARTD0.DATA;
    3cca:	80 91 a0 09 	lds	r24, 0x09A0
}
    3cce:	08 95       	ret

00003cd0 <uart_write_str>:

void uart_write_str(char *str) 
{
    3cd0:	cf 93       	push	r28
    3cd2:	df 93       	push	r29
    3cd4:	ec 01       	movw	r28, r24
	while (*str) {
    3cd6:	89 91       	ld	r24, Y+
    3cd8:	88 23       	and	r24, r24
    3cda:	11 f0       	breq	.+4      	; 0x3ce0 <uart_write_str+0x10>
		uart_put_char(*str++);
    3cdc:	eb df       	rcall	.-42     	; 0x3cb4 <uart_put_char>
    3cde:	fb cf       	rjmp	.-10     	; 0x3cd6 <uart_write_str+0x6>
	}
	uart_put_char('\r');
    3ce0:	8d e0       	ldi	r24, 0x0D	; 13
    3ce2:	e8 df       	rcall	.-48     	; 0x3cb4 <uart_put_char>
	uart_put_char('\n');
    3ce4:	8a e0       	ldi	r24, 0x0A	; 10
}
    3ce6:	df 91       	pop	r29
    3ce8:	cf 91       	pop	r28
{
	while (*str) {
		uart_put_char(*str++);
	}
	uart_put_char('\r');
	uart_put_char('\n');
    3cea:	e4 cf       	rjmp	.-56     	; 0x3cb4 <uart_put_char>

00003cec <__vector_18>:
	dac_setup(false);
	timer_setup();
}

ISR(TCC0_CCC_vect) 
{
    3cec:	1f 92       	push	r1
    3cee:	0f 92       	push	r0
    3cf0:	0f b6       	in	r0, 0x3f	; 63
    3cf2:	0f 92       	push	r0
    3cf4:	11 24       	eor	r1, r1
    3cf6:	8f 93       	push	r24
    3cf8:	9f 93       	push	r25
	if (test_val == 1)
    3cfa:	80 91 b1 2a 	lds	r24, 0x2AB1
    3cfe:	90 91 b2 2a 	lds	r25, 0x2AB2
    3d02:	01 97       	sbiw	r24, 0x01	; 1
    3d04:	59 f4       	brne	.+22     	; 0x3d1c <__vector_18+0x30>
	{
		DACB.CH0DATA = 0xfff;
    3d06:	8f ef       	ldi	r24, 0xFF	; 255
    3d08:	9f e0       	ldi	r25, 0x0F	; 15
    3d0a:	80 93 38 03 	sts	0x0338, r24
    3d0e:	90 93 39 03 	sts	0x0339, r25
		test_val = 0;
    3d12:	10 92 b1 2a 	sts	0x2AB1, r1
    3d16:	10 92 b2 2a 	sts	0x2AB2, r1
    3d1a:	0a c0       	rjmp	.+20     	; 0x3d30 <__vector_18+0x44>
	} else {
		DACB.CH0DATA = 0x000;
    3d1c:	10 92 38 03 	sts	0x0338, r1
    3d20:	10 92 39 03 	sts	0x0339, r1
		test_val = 1;
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	80 93 b1 2a 	sts	0x2AB1, r24
    3d2c:	90 93 b2 2a 	sts	0x2AB2, r25
	}
	
}
    3d30:	9f 91       	pop	r25
    3d32:	8f 91       	pop	r24
    3d34:	0f 90       	pop	r0
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	0f 90       	pop	r0
    3d3a:	1f 90       	pop	r1
    3d3c:	18 95       	reti

00003d3e <main>:
	asm("sleep");
	while(1);
}

int main(void) 
{	
    3d3e:	cf 93       	push	r28
    3d40:	df 93       	push	r29
    3d42:	cd b7       	in	r28, 0x3d	; 61
    3d44:	de b7       	in	r29, 0x3e	; 62
    3d46:	64 97       	sbiw	r28, 0x14	; 20
    3d48:	cd bf       	out	0x3d, r28	; 61
    3d4a:	de bf       	out	0x3e, r29	; 62
	lowpower_init();
    3d4c:	0e 94 2c 12 	call	0x2458	; 0x2458 <lowpower_init>
	
	//Structures
	SI114X_IRQ_SAMPLE sensor_data;
	
	//System
	clock_setup_32_mhz_pll();
    3d50:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <clock_setup_32_mhz_pll>
	display_setup();
    3d54:	11 d1       	rcall	.+546    	; 0x3f78 <display_setup>
	esp8266_off();
    3d56:	0e 94 97 09 	call	0x132e	; 0x132e <esp8266_off>
	spi_disable();
    3d5a:	65 de       	rcall	.-822    	; 0x3a26 <spi_disable>
	
	//Init env variables
	if(1)
	//if (!EEPROM_ReadEnv())
	{
		menu_set_env_variables();
    3d5c:	0e 94 86 45 	call	0x8b0c	; 0x8b0c <menu_set_env_variables>
	} 
	
	//Debug interface
	uart_setup();
    3d60:	91 df       	rcall	.-222    	; 0x3c84 <uart_setup>
	stdout = stdin = &mystdout;
    3d62:	82 e1       	ldi	r24, 0x12	; 18
    3d64:	90 e2       	ldi	r25, 0x20	; 32
    3d66:	80 93 78 2c 	sts	0x2C78, r24
    3d6a:	90 93 79 2c 	sts	0x2C79, r25
    3d6e:	80 93 7a 2c 	sts	0x2C7A, r24
    3d72:	90 93 7b 2c 	sts	0x2C7B, r25

#ifdef DEBUG_ON
	puts("SMART Clock - By: Erlend Hestnes\r\n");
    3d76:	81 ef       	ldi	r24, 0xF1	; 241
    3d78:	95 e2       	ldi	r25, 0x25	; 37
    3d7a:	0e 94 ba 50 	call	0xa174	; 0xa174 <puts>

static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) 
{
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    3d7e:	87 e0       	ldi	r24, 0x07	; 7
    3d80:	80 93 a2 00 	sts	0x00A2, r24
	puts("SMART Clock - By: Erlend Hestnes\r\n");
#endif

	//Enable interrupts
	pmic_setup();
	btn_setup(true);
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	0e 94 e7 10 	call	0x21ce	; 0x21ce <btn_setup>
	
	twi_setup(&TWIC);
    3d8a:	80 e8       	ldi	r24, 0x80	; 128
    3d8c:	94 e0       	ldi	r25, 0x04	; 4
    3d8e:	6c de       	rcall	.-808    	; 0x3a68 <twi_setup>

	SLEEP.CTRL |= SLEEP_MODE_PWR_SAVE;
    3d90:	80 91 48 00 	lds	r24, 0x0048
    3d94:	86 60       	ori	r24, 0x06	; 6
    3d96:	80 93 48 00 	sts	0x0048, r24
	
	sei();
    3d9a:	78 94       	sei
	//Ultra low power test
	ultra_power_saving_mode_test();
	while(1);
	*/
	
	si114x_baseline_calibration(&sensor_data);
    3d9c:	ce 01       	movw	r24, r28
    3d9e:	01 96       	adiw	r24, 0x01	; 1
    3da0:	0e 94 67 16 	call	0x2cce	; 0x2cce <si114x_baseline_calibration>
	
	//Turn on proximity channel 1 with ISR and threshold
	si114x_setup_ps1();
    3da4:	0e 94 82 15 	call	0x2b04	; 0x2b04 <si114x_setup_ps1>
		//_delay_ms(500);
	}
	*/
	
	//Turn on RTC
	display_fade(0);
    3da8:	80 e0       	ldi	r24, 0x00	; 0
    3daa:	fe d0       	rcall	.+508    	; 0x3fa8 <display_fade>
	rtc_enable_time_render();
    3dac:	0e 94 ef 12 	call	0x25de	; 0x25de <rtc_enable_time_render>
	display_refresh_screen();
    3db0:	f9 d0       	rcall	.+498    	; 0x3fa4 <display_refresh_screen>
	rtc_setup();
    3db2:	0e 94 4a 12 	call	0x2494	; 0x2494 <rtc_setup>
	
	EEPROM_WriteEnv();
    3db6:	0e 94 bd 08 	call	0x117a	; 0x117a <EEPROM_WriteEnv>
	
	//This should flip MOSI and SCK, if DMA should be used at some point...
	//PORTC.REMAP |= PORT_SPI_bm;
	
	bool display = true;
    3dba:	ff 24       	eor	r15, r15
    3dbc:	f3 94       	inc	r15
			} else {
				display_on();
				_delay_ms(1000);
			}
			btn_status = NO_BTN;
			display ^= true;
    3dbe:	ee 24       	eor	r14, r14
    3dc0:	e3 94       	inc	r14
	//PORTC.REMAP |= PORT_SPI_bm;
	
	bool display = true;
	
	while (1) { 	
		if (si114x_status == PS1_INT) {
    3dc2:	80 91 4c 2c 	lds	r24, 0x2C4C
    3dc6:	84 30       	cpi	r24, 0x04	; 4
    3dc8:	09 f0       	breq	.+2      	; 0x3dcc <main+0x8e>
    3dca:	4f c0       	rjmp	.+158    	; 0x3e6a <main+0x12c>
			uint16_t timeout_ms = 0;
			bool timeout = false;
			env.menu_id = 0;
    3dcc:	10 92 64 2b 	sts	0x2B64, r1
			
			btn_setup(false);
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	0e 94 e7 10 	call	0x21ce	; 0x21ce <btn_setup>
			btn_disable_si114x_interrupt();
    3dd6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <btn_disable_si114x_interrupt>
			
			display_fade(MAX_BRIGHTNESS);
    3dda:	8f e0       	ldi	r24, 0x0F	; 15
    3ddc:	e5 d0       	rcall	.+458    	; 0x3fa8 <display_fade>
#ifdef DEBUG_ON
			puts("DEBUG: Entered gesture mode.");
    3dde:	84 e1       	ldi	r24, 0x14	; 20
    3de0:	96 e2       	ldi	r25, 0x26	; 38
    3de2:	0e 94 ba 50 	call	0xa174	; 0xa174 <puts>
#endif
			si114x_setup();
    3de6:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <si114x_setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3dea:	2f ef       	ldi	r18, 0xFF	; 255
    3dec:	83 ed       	ldi	r24, 0xD3	; 211
    3dee:	90 e3       	ldi	r25, 0x30	; 48
    3df0:	21 50       	subi	r18, 0x01	; 1
    3df2:	80 40       	sbci	r24, 0x00	; 0
    3df4:	90 40       	sbci	r25, 0x00	; 0
    3df6:	e1 f7       	brne	.-8      	; 0x3df0 <main+0xb2>
    3df8:	00 c0       	rjmp	.+0      	; 0x3dfa <main+0xbc>
    3dfa:	00 00       	nop
	
	bool display = true;
	
	while (1) { 	
		if (si114x_status == PS1_INT) {
			uint16_t timeout_ms = 0;
    3dfc:	00 e0       	ldi	r16, 0x00	; 0
    3dfe:	10 e0       	ldi	r17, 0x00	; 0
#endif
			si114x_setup();
			_delay_ms(500);
			
			while(!timeout) {
				si114x_get_data(&sensor_data);
    3e00:	ce 01       	movw	r24, r28
    3e02:	01 96       	adiw	r24, 0x01	; 1
    3e04:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <si114x_get_data>
				si114x_process_samples((HANDLE)SI114X_ADDR,&sensor_data);
    3e08:	be 01       	movw	r22, r28
    3e0a:	6f 5f       	subi	r22, 0xFF	; 255
    3e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e0e:	8a e5       	ldi	r24, 0x5A	; 90
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	88 d9       	rcall	.-3312   	; 0x3124 <si114x_process_samples>
				
				menu_state_machine(&sensor_data);
    3e14:	ce 01       	movw	r24, r28
    3e16:	01 96       	adiw	r24, 0x01	; 1
    3e18:	0e 94 fc 4a 	call	0x95f8	; 0x95f8 <menu_state_machine>
				
				if (sensor_data.ps1 < PROXIMITY_THRESHOLD2) {
    3e1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e20:	80 34       	cpi	r24, 0x40	; 64
    3e22:	96 40       	sbci	r25, 0x06	; 6
    3e24:	20 f0       	brcs	.+8      	; 0x3e2e <main+0xf0>
					if (timeout_ms++ > MENU_TIMEOUT) {
						timeout = true;
					}
				} else {
					timeout_ms = 0;
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	8c 01       	movw	r16, r24
    3e2c:	e9 cf       	rjmp	.-46     	; 0x3e00 <main+0xc2>
				si114x_process_samples((HANDLE)SI114X_ADDR,&sensor_data);
				
				menu_state_machine(&sensor_data);
				
				if (sensor_data.ps1 < PROXIMITY_THRESHOLD2) {
					if (timeout_ms++ > MENU_TIMEOUT) {
    3e2e:	c8 01       	movw	r24, r16
    3e30:	01 96       	adiw	r24, 0x01	; 1
			puts("DEBUG: Entered gesture mode.");
#endif
			si114x_setup();
			_delay_ms(500);
			
			while(!timeout) {
    3e32:	09 35       	cpi	r16, 0x59	; 89
    3e34:	1b 41       	sbci	r17, 0x1B	; 27
    3e36:	c8 f3       	brcs	.-14     	; 0x3e2a <main+0xec>
				} else {
					timeout_ms = 0;
				}
			}
			//Should not write too often to EEPROM
		    EEPROM_WriteEnv();
    3e38:	0e 94 bd 08 	call	0x117a	; 0x117a <EEPROM_WriteEnv>
			timeout_ms = 0;
#ifdef DEBUG_ON
			puts("DEBUG: Timeout! Leaving gesture mode.");
    3e3c:	81 e3       	ldi	r24, 0x31	; 49
    3e3e:	96 e2       	ldi	r25, 0x26	; 38
    3e40:	0e 94 ba 50 	call	0xa174	; 0xa174 <puts>
#endif
			if (env.menu_id != 0) {
    3e44:	80 91 64 2b 	lds	r24, 0x2B64
    3e48:	88 23       	and	r24, r24
    3e4a:	21 f0       	breq	.+8      	; 0x3e54 <main+0x116>
				display_slide_out_to_bottom();
    3e4c:	48 d5       	rcall	.+2704   	; 0x48de <display_slide_out_to_bottom>
				rtc_enable_time_render();
    3e4e:	0e 94 ef 12 	call	0x25de	; 0x25de <rtc_enable_time_render>
				display_slide_in_from_top();
    3e52:	27 d5       	rcall	.+2638   	; 0x48a2 <display_slide_in_from_top>
			}
			display_fade(env.brightness);
    3e54:	80 91 2f 2b 	lds	r24, 0x2B2F
    3e58:	a7 d0       	rcall	.+334    	; 0x3fa8 <display_fade>
			btn_setup(true);
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <btn_setup>
			btn_si114x_enable_interrupt();
    3e60:	0e 94 43 11 	call	0x2286	; 0x2286 <btn_si114x_enable_interrupt>
			si114x_setup_ps1();
    3e64:	0e 94 82 15 	call	0x2b04	; 0x2b04 <si114x_setup_ps1>
    3e68:	2b c0       	rjmp	.+86     	; 0x3ec0 <main+0x182>
		} else if (si114x_status == ALS_INT_2) {
    3e6a:	80 91 4c 2c 	lds	r24, 0x2C4C
    3e6e:	82 30       	cpi	r24, 0x02	; 2
    3e70:	29 f4       	brne	.+10     	; 0x3e7c <main+0x13e>
			//Dim light by using the light sensor
#ifdef DEBUG_ON
			puts("DEBUG: Somebody turned off the lights!");
    3e72:	87 e5       	ldi	r24, 0x57	; 87
    3e74:	96 e2       	ldi	r25, 0x26	; 38
    3e76:	0e 94 ba 50 	call	0xa174	; 0xa174 <puts>
    3e7a:	22 c0       	rjmp	.+68     	; 0x3ec0 <main+0x182>
#endif
		} else if (btn_status == (BTN1 | BTN4)) {
    3e7c:	80 91 4b 2c 	lds	r24, 0x2C4B
    3e80:	85 30       	cpi	r24, 0x05	; 5
    3e82:	49 f4       	brne	.+18     	; 0x3e96 <main+0x158>
			//Calculate baseline for Si114x
			display_slide_out_to_bottom();
    3e84:	2c d5       	rcall	.+2648   	; 0x48de <display_slide_out_to_bottom>
			si114x_baseline_calibration(&sensor_data);
    3e86:	ce 01       	movw	r24, r28
    3e88:	01 96       	adiw	r24, 0x01	; 1
    3e8a:	0e 94 67 16 	call	0x2cce	; 0x2cce <si114x_baseline_calibration>
			rtc_enable_time_render();
    3e8e:	0e 94 ef 12 	call	0x25de	; 0x25de <rtc_enable_time_render>
			display_slide_in_from_top();
    3e92:	07 d5       	rcall	.+2574   	; 0x48a2 <display_slide_in_from_top>
    3e94:	15 c0       	rjmp	.+42     	; 0x3ec0 <main+0x182>
		} else if (btn_status == BTN4) {
    3e96:	80 91 4b 2c 	lds	r24, 0x2C4B
    3e9a:	84 30       	cpi	r24, 0x04	; 4
    3e9c:	89 f4       	brne	.+34     	; 0x3ec0 <main+0x182>
			if (display) {
    3e9e:	ff 20       	and	r15, r15
    3ea0:	11 f0       	breq	.+4      	; 0x3ea6 <main+0x168>
				display_off();
    3ea2:	19 d5       	rcall	.+2610   	; 0x48d6 <display_off>
    3ea4:	01 c0       	rjmp	.+2      	; 0x3ea8 <main+0x16a>
				_delay_ms(1000);
			} else {
				display_on();
    3ea6:	73 d0       	rcall	.+230    	; 0x3f8e <display_on>
    3ea8:	8f ef       	ldi	r24, 0xFF	; 255
    3eaa:	97 ea       	ldi	r25, 0xA7	; 167
    3eac:	21 e6       	ldi	r18, 0x61	; 97
    3eae:	81 50       	subi	r24, 0x01	; 1
    3eb0:	90 40       	sbci	r25, 0x00	; 0
    3eb2:	20 40       	sbci	r18, 0x00	; 0
    3eb4:	e1 f7       	brne	.-8      	; 0x3eae <main+0x170>
    3eb6:	00 c0       	rjmp	.+0      	; 0x3eb8 <main+0x17a>
    3eb8:	00 00       	nop
				_delay_ms(1000);
			}
			btn_status = NO_BTN;
    3eba:	10 92 4b 2c 	sts	0x2C4B, r1
			display ^= true;
    3ebe:	fe 24       	eor	r15, r14
		}
		si114x_status = 0;
    3ec0:	10 92 4c 2c 	sts	0x2C4C, r1
		
		SLEEP.CTRL |= SLEEP_SEN_bm;
    3ec4:	80 91 48 00 	lds	r24, 0x0048
    3ec8:	81 60       	ori	r24, 0x01	; 1
    3eca:	80 93 48 00 	sts	0x0048, r24
		asm("sleep");
    3ece:	88 95       	sleep
	}
    3ed0:	78 cf       	rjmp	.-272    	; 0x3dc2 <main+0x84>

00003ed2 <itoa_simple.constprop.1>:
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    3ed2:	8f 92       	push	r8
    3ed4:	9f 92       	push	r9
    3ed6:	af 92       	push	r10
    3ed8:	bf 92       	push	r11
    3eda:	ef 92       	push	r14
    3edc:	ff 92       	push	r15
    3ede:	0f 93       	push	r16
    3ee0:	1f 93       	push	r17
    3ee2:	cf 93       	push	r28
    3ee4:	df 93       	push	r29
    3ee6:	97 fd       	sbrc	r25, 7
    3ee8:	03 c0       	rjmp	.+6      	; 0x3ef0 <itoa_simple.constprop.1+0x1e>
    3eea:	c0 e0       	ldi	r28, 0x00	; 0
    3eec:	d0 e0       	ldi	r29, 0x00	; 0
    3eee:	0b c0       	rjmp	.+22     	; 0x3f06 <itoa_simple.constprop.1+0x34>
    3ef0:	90 95       	com	r25
    3ef2:	80 95       	com	r24
    3ef4:	70 95       	com	r23
    3ef6:	61 95       	neg	r22
    3ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    3efa:	8f 4f       	sbci	r24, 0xFF	; 255
    3efc:	9f 4f       	sbci	r25, 0xFF	; 255
    3efe:	2d e2       	ldi	r18, 0x2D	; 45
    3f00:	20 b9       	out	0x00, r18	; 0
    3f02:	c1 e0       	ldi	r28, 0x01	; 1
    3f04:	d0 e0       	ldi	r29, 0x00	; 0
    3f06:	7e 01       	movw	r14, r28
    3f08:	2a e0       	ldi	r18, 0x0A	; 10
    3f0a:	82 2e       	mov	r8, r18
    3f0c:	91 2c       	mov	r9, r1
    3f0e:	a1 2c       	mov	r10, r1
    3f10:	b1 2c       	mov	r11, r1
    3f12:	87 01       	movw	r16, r14
    3f14:	0f 5f       	subi	r16, 0xFF	; 255
    3f16:	1f 4f       	sbci	r17, 0xFF	; 255
    3f18:	a5 01       	movw	r20, r10
    3f1a:	94 01       	movw	r18, r8
    3f1c:	0e 94 be 4e 	call	0x9d7c	; 0x9d7c <__udivmodsi4>
    3f20:	60 5d       	subi	r22, 0xD0	; 208
    3f22:	f7 01       	movw	r30, r14
    3f24:	60 83       	st	Z, r22
    3f26:	b9 01       	movw	r22, r18
    3f28:	ca 01       	movw	r24, r20
    3f2a:	61 15       	cp	r22, r1
    3f2c:	71 05       	cpc	r23, r1
    3f2e:	81 05       	cpc	r24, r1
    3f30:	91 05       	cpc	r25, r1
    3f32:	11 f0       	breq	.+4      	; 0x3f38 <itoa_simple.constprop.1+0x66>
    3f34:	78 01       	movw	r14, r16
    3f36:	ed cf       	rjmp	.-38     	; 0x3f12 <itoa_simple.constprop.1+0x40>
    3f38:	d8 01       	movw	r26, r16
    3f3a:	ac 1b       	sub	r26, r28
    3f3c:	bd 0b       	sbc	r27, r29
    3f3e:	cd 01       	movw	r24, r26
    3f40:	01 97       	sbiw	r24, 0x01	; 1
    3f42:	ac 0f       	add	r26, r28
    3f44:	bd 1f       	adc	r27, r29
    3f46:	fe 01       	movw	r30, r28
    3f48:	9f 01       	movw	r18, r30
    3f4a:	2c 1b       	sub	r18, r28
    3f4c:	3d 0b       	sbc	r19, r29
    3f4e:	28 17       	cp	r18, r24
    3f50:	39 07       	cpc	r19, r25
    3f52:	34 f4       	brge	.+12     	; 0x3f60 <itoa_simple.constprop.1+0x8e>
    3f54:	20 81       	ld	r18, Z
    3f56:	3e 91       	ld	r19, -X
    3f58:	31 93       	st	Z+, r19
    3f5a:	2c 93       	st	X, r18
    3f5c:	01 97       	sbiw	r24, 0x01	; 1
    3f5e:	f4 cf       	rjmp	.-24     	; 0x3f48 <itoa_simple.constprop.1+0x76>
    3f60:	c8 01       	movw	r24, r16
    3f62:	df 91       	pop	r29
    3f64:	cf 91       	pop	r28
    3f66:	1f 91       	pop	r17
    3f68:	0f 91       	pop	r16
    3f6a:	ff 90       	pop	r15
    3f6c:	ef 90       	pop	r14
    3f6e:	bf 90       	pop	r11
    3f70:	af 90       	pop	r10
    3f72:	9f 90       	pop	r9
    3f74:	8f 90       	pop	r8
    3f76:	08 95       	ret

00003f78 <display_setup>:
    3f78:	84 e2       	ldi	r24, 0x24	; 36
    3f7a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <ht1632c_setup>
    3f7e:	8f e0       	ldi	r24, 0x0F	; 15
    3f80:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <ht1632c_set_brightness>
    3f84:	0e 94 76 0d 	call	0x1aec	; 0x1aec <ht1632c_clear_screen>
    3f88:	83 e0       	ldi	r24, 0x03	; 3
    3f8a:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <ht1632c_write_command>

00003f8e <display_on>:
    3f8e:	83 e0       	ldi	r24, 0x03	; 3
    3f90:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <ht1632c_write_command>
    3f94:	0e 94 ef 12 	call	0x25de	; 0x25de <rtc_enable_time_render>
    3f98:	0c 94 00 10 	jmp	0x2000	; 0x2000 <ht1632c_slide_in_from_top>

00003f9c <display_clear_screen>:
    3f9c:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <ht1632c_clear_screen>

00003fa0 <display_clear_buffer>:
    3fa0:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <ht1632c_clear_buffer>

00003fa4 <display_refresh_screen>:
    3fa4:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

00003fa8 <display_fade>:
    3fa8:	cf 93       	push	r28
    3faa:	df 93       	push	r29
    3fac:	d8 2f       	mov	r29, r24
    3fae:	c0 91 23 20 	lds	r28, 0x2023
    3fb2:	c8 17       	cp	r28, r24
    3fb4:	a0 f4       	brcc	.+40     	; 0x3fde <display_fade+0x36>
    3fb6:	8c 2f       	mov	r24, r28
    3fb8:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <ht1632c_set_brightness>
    3fbc:	2f ef       	ldi	r18, 0xFF	; 255
    3fbe:	86 e7       	ldi	r24, 0x76	; 118
    3fc0:	91 e0       	ldi	r25, 0x01	; 1
    3fc2:	21 50       	subi	r18, 0x01	; 1
    3fc4:	80 40       	sbci	r24, 0x00	; 0
    3fc6:	90 40       	sbci	r25, 0x00	; 0
    3fc8:	e1 f7       	brne	.-8      	; 0x3fc2 <display_fade+0x1a>
    3fca:	00 c0       	rjmp	.+0      	; 0x3fcc <display_fade+0x24>
    3fcc:	00 00       	nop
    3fce:	cf 5f       	subi	r28, 0xFF	; 255
    3fd0:	cd 13       	cpse	r28, r29
    3fd2:	f1 cf       	rjmp	.-30     	; 0x3fb6 <display_fade+0xe>
    3fd4:	d0 93 23 20 	sts	0x2023, r29
    3fd8:	df 91       	pop	r29
    3fda:	cf 91       	pop	r28
    3fdc:	08 95       	ret
    3fde:	8c 17       	cp	r24, r28
    3fe0:	c8 f7       	brcc	.-14     	; 0x3fd4 <display_fade+0x2c>
    3fe2:	8c 2f       	mov	r24, r28
    3fe4:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <ht1632c_set_brightness>
    3fe8:	2f ef       	ldi	r18, 0xFF	; 255
    3fea:	86 e7       	ldi	r24, 0x76	; 118
    3fec:	91 e0       	ldi	r25, 0x01	; 1
    3fee:	21 50       	subi	r18, 0x01	; 1
    3ff0:	80 40       	sbci	r24, 0x00	; 0
    3ff2:	90 40       	sbci	r25, 0x00	; 0
    3ff4:	e1 f7       	brne	.-8      	; 0x3fee <display_fade+0x46>
    3ff6:	00 c0       	rjmp	.+0      	; 0x3ff8 <display_fade+0x50>
    3ff8:	00 00       	nop
    3ffa:	c1 50       	subi	r28, 0x01	; 1
    3ffc:	cd 13       	cpse	r28, r29
    3ffe:	f1 cf       	rjmp	.-30     	; 0x3fe2 <display_fade+0x3a>
    4000:	e9 cf       	rjmp	.-46     	; 0x3fd4 <display_fade+0x2c>

00004002 <display_fade_blink>:
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	d1 df       	rcall	.-94     	; 0x3fa8 <display_fade>
    4006:	8f e0       	ldi	r24, 0x0F	; 15
    4008:	cf df       	rcall	.-98     	; 0x3fa8 <display_fade>
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	cd df       	rcall	.-102    	; 0x3fa8 <display_fade>
    400e:	8f e0       	ldi	r24, 0x0F	; 15
    4010:	cb cf       	rjmp	.-106    	; 0x3fa8 <display_fade>

00004012 <display_draw_pixel>:
    4012:	9c 01       	movw	r18, r24
    4014:	80 31       	cpi	r24, 0x10	; 16
    4016:	91 05       	cpc	r25, r1
    4018:	a4 f5       	brge	.+104    	; 0x4082 <display_draw_pixel+0x70>
    401a:	60 31       	cpi	r22, 0x10	; 16
    401c:	71 05       	cpc	r23, r1
    401e:	8c f5       	brge	.+98     	; 0x4082 <display_draw_pixel+0x70>
    4020:	8f e0       	ldi	r24, 0x0F	; 15
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	86 1b       	sub	r24, r22
    4026:	97 0b       	sbc	r25, r23
    4028:	68 e1       	ldi	r22, 0x18	; 24
    402a:	70 e0       	ldi	r23, 0x00	; 0
    402c:	0e 94 ab 4e 	call	0x9d56	; 0x9d56 <__divmodhi4>
    4030:	88 30       	cpi	r24, 0x08	; 8
    4032:	91 05       	cpc	r25, r1
    4034:	34 f0       	brlt	.+12     	; 0x4042 <display_draw_pixel+0x30>
    4036:	80 31       	cpi	r24, 0x10	; 16
    4038:	91 05       	cpc	r25, r1
    403a:	34 f4       	brge	.+12     	; 0x4048 <display_draw_pixel+0x36>
    403c:	67 e8       	ldi	r22, 0x87	; 135
    403e:	70 e0       	ldi	r23, 0x00	; 0
    4040:	05 c0       	rjmp	.+10     	; 0x404c <display_draw_pixel+0x3a>
    4042:	67 e0       	ldi	r22, 0x07	; 7
    4044:	70 e0       	ldi	r23, 0x00	; 0
    4046:	02 c0       	rjmp	.+4      	; 0x404c <display_draw_pixel+0x3a>
    4048:	67 e0       	ldi	r22, 0x07	; 7
    404a:	71 e0       	ldi	r23, 0x01	; 1
    404c:	87 70       	andi	r24, 0x07	; 7
    404e:	99 27       	eor	r25, r25
    4050:	68 1b       	sub	r22, r24
    4052:	79 0b       	sbc	r23, r25
    4054:	28 30       	cpi	r18, 0x08	; 8
    4056:	31 05       	cpc	r19, r1
    4058:	1c f4       	brge	.+6      	; 0x4060 <display_draw_pixel+0x4e>
    405a:	22 0f       	add	r18, r18
    405c:	33 1f       	adc	r19, r19
    405e:	04 c0       	rjmp	.+8      	; 0x4068 <display_draw_pixel+0x56>
    4060:	22 0f       	add	r18, r18
    4062:	33 1f       	adc	r19, r19
    4064:	2f 50       	subi	r18, 0x0F	; 15
    4066:	31 09       	sbc	r19, r1
    4068:	c9 01       	movw	r24, r18
    406a:	33 e0       	ldi	r19, 0x03	; 3
    406c:	88 0f       	add	r24, r24
    406e:	99 1f       	adc	r25, r25
    4070:	3a 95       	dec	r19
    4072:	e1 f7       	brne	.-8      	; 0x406c <display_draw_pixel+0x5a>
    4074:	86 0f       	add	r24, r22
    4076:	97 1f       	adc	r25, r23
    4078:	41 11       	cpse	r20, r1
    407a:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    407e:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <ht1632c_clr_pixel>
    4082:	08 95       	ret

00004084 <display_draw_line>:
    4084:	7f 92       	push	r7
    4086:	8f 92       	push	r8
    4088:	9f 92       	push	r9
    408a:	af 92       	push	r10
    408c:	bf 92       	push	r11
    408e:	cf 92       	push	r12
    4090:	df 92       	push	r13
    4092:	ef 92       	push	r14
    4094:	ff 92       	push	r15
    4096:	0f 93       	push	r16
    4098:	1f 93       	push	r17
    409a:	cf 93       	push	r28
    409c:	df 93       	push	r29
    409e:	18 2f       	mov	r17, r24
    40a0:	96 2e       	mov	r9, r22
    40a2:	84 2e       	mov	r8, r20
    40a4:	a2 2f       	mov	r26, r18
    40a6:	bb 27       	eor	r27, r27
    40a8:	a7 fd       	sbrc	r26, 7
    40aa:	b0 95       	com	r27
    40ac:	a6 1b       	sub	r26, r22
    40ae:	b1 09       	sbc	r27, r1
    40b0:	67 fd       	sbrc	r22, 7
    40b2:	b3 95       	inc	r27
    40b4:	b7 ff       	sbrs	r27, 7
    40b6:	03 c0       	rjmp	.+6      	; 0x40be <display_draw_line+0x3a>
    40b8:	b1 95       	neg	r27
    40ba:	a1 95       	neg	r26
    40bc:	b1 09       	sbc	r27, r1
    40be:	e8 2d       	mov	r30, r8
    40c0:	ff 27       	eor	r31, r31
    40c2:	e7 fd       	sbrc	r30, 7
    40c4:	f0 95       	com	r31
    40c6:	e1 1b       	sub	r30, r17
    40c8:	f1 09       	sbc	r31, r1
    40ca:	17 fd       	sbrc	r17, 7
    40cc:	f3 95       	inc	r31
    40ce:	f7 ff       	sbrs	r31, 7
    40d0:	03 c0       	rjmp	.+6      	; 0x40d8 <display_draw_line+0x54>
    40d2:	f1 95       	neg	r31
    40d4:	e1 95       	neg	r30
    40d6:	f1 09       	sbc	r31, r1
    40d8:	aa 24       	eor	r10, r10
    40da:	a3 94       	inc	r10
    40dc:	b1 2c       	mov	r11, r1
    40de:	ea 17       	cp	r30, r26
    40e0:	fb 07       	cpc	r31, r27
    40e2:	14 f0       	brlt	.+4      	; 0x40e8 <display_draw_line+0x64>
    40e4:	a1 2c       	mov	r10, r1
    40e6:	b1 2c       	mov	r11, r1
    40e8:	a1 14       	cp	r10, r1
    40ea:	b1 04       	cpc	r11, r1
    40ec:	31 f0       	breq	.+12     	; 0x40fa <display_draw_line+0x76>
    40ee:	88 2d       	mov	r24, r8
    40f0:	82 2e       	mov	r8, r18
    40f2:	28 2f       	mov	r18, r24
    40f4:	81 2f       	mov	r24, r17
    40f6:	19 2d       	mov	r17, r9
    40f8:	98 2e       	mov	r9, r24
    40fa:	81 16       	cp	r8, r17
    40fc:	34 f4       	brge	.+12     	; 0x410a <display_draw_line+0x86>
    40fe:	89 2d       	mov	r24, r9
    4100:	92 2e       	mov	r9, r18
    4102:	28 2f       	mov	r18, r24
    4104:	81 2f       	mov	r24, r17
    4106:	18 2d       	mov	r17, r8
    4108:	88 2e       	mov	r8, r24
    410a:	c8 2c       	mov	r12, r8
    410c:	dd 24       	eor	r13, r13
    410e:	c7 fc       	sbrc	r12, 7
    4110:	d0 94       	com	r13
    4112:	c1 1a       	sub	r12, r17
    4114:	d1 08       	sbc	r13, r1
    4116:	17 fd       	sbrc	r17, 7
    4118:	d3 94       	inc	r13
    411a:	c2 2f       	mov	r28, r18
    411c:	dd 27       	eor	r29, r29
    411e:	c7 fd       	sbrc	r28, 7
    4120:	d0 95       	com	r29
    4122:	c9 19       	sub	r28, r9
    4124:	d1 09       	sbc	r29, r1
    4126:	97 fc       	sbrc	r9, 7
    4128:	d3 95       	inc	r29
    412a:	d7 ff       	sbrs	r29, 7
    412c:	03 c0       	rjmp	.+6      	; 0x4134 <display_draw_line+0xb0>
    412e:	d1 95       	neg	r29
    4130:	c1 95       	neg	r28
    4132:	d1 09       	sbc	r29, r1
    4134:	76 01       	movw	r14, r12
    4136:	f6 94       	lsr	r15
    4138:	e7 94       	ror	r14
    413a:	92 16       	cp	r9, r18
    413c:	1c f4       	brge	.+6      	; 0x4144 <display_draw_line+0xc0>
    413e:	77 24       	eor	r7, r7
    4140:	73 94       	inc	r7
    4142:	19 c0       	rjmp	.+50     	; 0x4176 <display_draw_line+0xf2>
    4144:	77 24       	eor	r7, r7
    4146:	7a 94       	dec	r7
    4148:	16 c0       	rjmp	.+44     	; 0x4176 <display_draw_line+0xf2>
    414a:	89 2d       	mov	r24, r9
    414c:	99 27       	eor	r25, r25
    414e:	87 fd       	sbrc	r24, 7
    4150:	90 95       	com	r25
    4152:	21 2f       	mov	r18, r17
    4154:	33 27       	eor	r19, r19
    4156:	27 fd       	sbrc	r18, 7
    4158:	30 95       	com	r19
    415a:	40 2f       	mov	r20, r16
    415c:	a1 14       	cp	r10, r1
    415e:	b1 04       	cpc	r11, r1
    4160:	69 f0       	breq	.+26     	; 0x417c <display_draw_line+0xf8>
    4162:	b9 01       	movw	r22, r18
    4164:	56 df       	rcall	.-340    	; 0x4012 <display_draw_pixel>
    4166:	ec 1a       	sub	r14, r28
    4168:	fd 0a       	sbc	r15, r29
    416a:	f7 fe       	sbrs	r15, 7
    416c:	03 c0       	rjmp	.+6      	; 0x4174 <display_draw_line+0xf0>
    416e:	97 0c       	add	r9, r7
    4170:	ec 0c       	add	r14, r12
    4172:	fd 1c       	adc	r15, r13
    4174:	1f 5f       	subi	r17, 0xFF	; 255
    4176:	81 16       	cp	r8, r17
    4178:	44 f7       	brge	.-48     	; 0x414a <display_draw_line+0xc6>
    417a:	03 c0       	rjmp	.+6      	; 0x4182 <display_draw_line+0xfe>
    417c:	bc 01       	movw	r22, r24
    417e:	c9 01       	movw	r24, r18
    4180:	f1 cf       	rjmp	.-30     	; 0x4164 <display_draw_line+0xe0>
    4182:	df 91       	pop	r29
    4184:	cf 91       	pop	r28
    4186:	1f 91       	pop	r17
    4188:	0f 91       	pop	r16
    418a:	ff 90       	pop	r15
    418c:	ef 90       	pop	r14
    418e:	df 90       	pop	r13
    4190:	cf 90       	pop	r12
    4192:	bf 90       	pop	r11
    4194:	af 90       	pop	r10
    4196:	9f 90       	pop	r9
    4198:	8f 90       	pop	r8
    419a:	7f 90       	pop	r7
    419c:	08 95       	ret

0000419e <display_draw_filled_rect>:
    419e:	af 92       	push	r10
    41a0:	bf 92       	push	r11
    41a2:	cf 92       	push	r12
    41a4:	df 92       	push	r13
    41a6:	ef 92       	push	r14
    41a8:	ff 92       	push	r15
    41aa:	0f 93       	push	r16
    41ac:	1f 93       	push	r17
    41ae:	cf 93       	push	r28
    41b0:	df 93       	push	r29
    41b2:	a6 2e       	mov	r10, r22
    41b4:	18 2f       	mov	r17, r24
    41b6:	c4 2f       	mov	r28, r20
    41b8:	d0 e0       	ldi	r29, 0x00	; 0
    41ba:	c8 0f       	add	r28, r24
    41bc:	d1 1d       	adc	r29, r1
    41be:	e2 2e       	mov	r14, r18
    41c0:	f1 2c       	mov	r15, r1
    41c2:	e6 0e       	add	r14, r22
    41c4:	f1 1c       	adc	r15, r1
    41c6:	c1 2e       	mov	r12, r17
    41c8:	d1 2c       	mov	r13, r1
    41ca:	cc 16       	cp	r12, r28
    41cc:	dd 06       	cpc	r13, r29
    41ce:	6c f4       	brge	.+26     	; 0x41ea <display_draw_filled_rect+0x4c>
    41d0:	ba 2c       	mov	r11, r10
    41d2:	6b 2d       	mov	r22, r11
    41d4:	70 e0       	ldi	r23, 0x00	; 0
    41d6:	6e 15       	cp	r22, r14
    41d8:	7f 05       	cpc	r23, r15
    41da:	2c f4       	brge	.+10     	; 0x41e6 <display_draw_filled_rect+0x48>
    41dc:	40 2f       	mov	r20, r16
    41de:	c6 01       	movw	r24, r12
    41e0:	18 df       	rcall	.-464    	; 0x4012 <display_draw_pixel>
    41e2:	b3 94       	inc	r11
    41e4:	f6 cf       	rjmp	.-20     	; 0x41d2 <display_draw_filled_rect+0x34>
    41e6:	1f 5f       	subi	r17, 0xFF	; 255
    41e8:	ee cf       	rjmp	.-36     	; 0x41c6 <display_draw_filled_rect+0x28>
    41ea:	df 91       	pop	r29
    41ec:	cf 91       	pop	r28
    41ee:	1f 91       	pop	r17
    41f0:	0f 91       	pop	r16
    41f2:	ff 90       	pop	r15
    41f4:	ef 90       	pop	r14
    41f6:	df 90       	pop	r13
    41f8:	cf 90       	pop	r12
    41fa:	bf 90       	pop	r11
    41fc:	af 90       	pop	r10
    41fe:	08 95       	ret

00004200 <display_show_loading_square>:
    4200:	0f 93       	push	r16
    4202:	01 e0       	ldi	r16, 0x01	; 1
    4204:	21 e0       	ldi	r18, 0x01	; 1
    4206:	41 e0       	ldi	r20, 0x01	; 1
    4208:	60 91 22 20 	lds	r22, 0x2022
    420c:	80 91 21 20 	lds	r24, 0x2021
    4210:	c6 df       	rcall	.-116    	; 0x419e <display_draw_filled_rect>
    4212:	90 91 22 20 	lds	r25, 0x2022
    4216:	80 91 21 20 	lds	r24, 0x2021
    421a:	97 30       	cpi	r25, 0x07	; 7
    421c:	20 f0       	brcs	.+8      	; 0x4226 <display_show_loading_square+0x26>
    421e:	89 30       	cpi	r24, 0x09	; 9
    4220:	51 f4       	brne	.+20     	; 0x4236 <display_show_loading_square+0x36>
    4222:	91 50       	subi	r25, 0x01	; 1
    4224:	0d c0       	rjmp	.+26     	; 0x4240 <display_show_loading_square+0x40>
    4226:	96 30       	cpi	r25, 0x06	; 6
    4228:	41 f4       	brne	.+16     	; 0x423a <display_show_loading_square+0x3a>
    422a:	87 30       	cpi	r24, 0x07	; 7
    422c:	30 f0       	brcs	.+12     	; 0x423a <display_show_loading_square+0x3a>
    422e:	81 50       	subi	r24, 0x01	; 1
    4230:	80 93 21 20 	sts	0x2021, r24
    4234:	17 c0       	rjmp	.+46     	; 0x4264 <display_show_loading_square+0x64>
    4236:	99 30       	cpi	r25, 0x09	; 9
    4238:	30 f4       	brcc	.+12     	; 0x4246 <display_show_loading_square+0x46>
    423a:	86 30       	cpi	r24, 0x06	; 6
    423c:	99 f4       	brne	.+38     	; 0x4264 <display_show_loading_square+0x64>
    423e:	9f 5f       	subi	r25, 0xFF	; 255
    4240:	90 93 22 20 	sts	0x2022, r25
    4244:	0f c0       	rjmp	.+30     	; 0x4264 <display_show_loading_square+0x64>
    4246:	99 30       	cpi	r25, 0x09	; 9
    4248:	69 f4       	brne	.+26     	; 0x4264 <display_show_loading_square+0x64>
    424a:	89 30       	cpi	r24, 0x09	; 9
    424c:	58 f4       	brcc	.+22     	; 0x4264 <display_show_loading_square+0x64>
    424e:	8f 5f       	subi	r24, 0xFF	; 255
    4250:	80 93 21 20 	sts	0x2021, r24
    4254:	89 30       	cpi	r24, 0x09	; 9
    4256:	31 f4       	brne	.+12     	; 0x4264 <display_show_loading_square+0x64>
    4258:	80 91 20 20 	lds	r24, 0x2020
    425c:	91 e0       	ldi	r25, 0x01	; 1
    425e:	89 27       	eor	r24, r25
    4260:	80 93 20 20 	sts	0x2020, r24
    4264:	00 e0       	ldi	r16, 0x00	; 0
    4266:	21 e0       	ldi	r18, 0x01	; 1
    4268:	41 e0       	ldi	r20, 0x01	; 1
    426a:	60 91 22 20 	lds	r22, 0x2022
    426e:	80 91 21 20 	lds	r24, 0x2021
    4272:	95 df       	rcall	.-214    	; 0x419e <display_draw_filled_rect>
    4274:	0f 91       	pop	r16
    4276:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

0000427a <display_draw_bitmap>:
    427a:	2f 92       	push	r2
    427c:	3f 92       	push	r3
    427e:	4f 92       	push	r4
    4280:	5f 92       	push	r5
    4282:	6f 92       	push	r6
    4284:	7f 92       	push	r7
    4286:	8f 92       	push	r8
    4288:	9f 92       	push	r9
    428a:	af 92       	push	r10
    428c:	bf 92       	push	r11
    428e:	cf 92       	push	r12
    4290:	df 92       	push	r13
    4292:	ef 92       	push	r14
    4294:	ff 92       	push	r15
    4296:	0f 93       	push	r16
    4298:	1f 93       	push	r17
    429a:	cf 93       	push	r28
    429c:	df 93       	push	r29
    429e:	00 d0       	rcall	.+0      	; 0x42a0 <display_draw_bitmap+0x26>
    42a0:	00 d0       	rcall	.+0      	; 0x42a2 <display_draw_bitmap+0x28>
    42a2:	cd b7       	in	r28, 0x3d	; 61
    42a4:	de b7       	in	r29, 0x3e	; 62
    42a6:	6a 01       	movw	r12, r20
    42a8:	30 2f       	mov	r19, r16
    42aa:	f1 2c       	mov	r15, r1
    42ac:	44 24       	eor	r4, r4
    42ae:	43 94       	inc	r4
    42b0:	51 2c       	mov	r5, r1
    42b2:	a6 2e       	mov	r10, r22
    42b4:	b1 2c       	mov	r11, r1
    42b6:	28 2e       	mov	r2, r24
    42b8:	31 2c       	mov	r3, r1
    42ba:	f3 16       	cp	r15, r19
    42bc:	b1 f1       	breq	.+108    	; 0x432a <display_draw_bitmap+0xb0>
    42be:	8f 2d       	mov	r24, r15
    42c0:	87 70       	andi	r24, 0x07	; 7
    42c2:	32 01       	movw	r6, r4
    42c4:	02 c0       	rjmp	.+4      	; 0x42ca <display_draw_bitmap+0x50>
    42c6:	66 0c       	add	r6, r6
    42c8:	77 1c       	adc	r7, r7
    42ca:	8a 95       	dec	r24
    42cc:	e2 f7       	brpl	.-8      	; 0x42c6 <display_draw_bitmap+0x4c>
    42ce:	1b 82       	std	Y+3, r1	; 0x03
    42d0:	1c 82       	std	Y+4, r1	; 0x04
    42d2:	8f 2d       	mov	r24, r15
    42d4:	86 95       	lsr	r24
    42d6:	86 95       	lsr	r24
    42d8:	86 95       	lsr	r24
    42da:	46 01       	movw	r8, r12
    42dc:	82 9f       	mul	r24, r18
    42de:	80 0c       	add	r8, r0
    42e0:	91 1c       	adc	r9, r1
    42e2:	11 24       	eor	r1, r1
    42e4:	85 01       	movw	r16, r10
    42e6:	0f 0d       	add	r16, r15
    42e8:	11 1d       	adc	r17, r1
    42ea:	9b 81       	ldd	r25, Y+3	; 0x03
    42ec:	92 17       	cp	r25, r18
    42ee:	d8 f4       	brcc	.+54     	; 0x4326 <display_draw_bitmap+0xac>
    42f0:	eb 81       	ldd	r30, Y+3	; 0x03
    42f2:	fc 81       	ldd	r31, Y+4	; 0x04
    42f4:	e8 0d       	add	r30, r8
    42f6:	f9 1d       	adc	r31, r9
    42f8:	e4 91       	lpm	r30, Z
    42fa:	f0 e0       	ldi	r31, 0x00	; 0
    42fc:	e6 21       	and	r30, r6
    42fe:	f7 21       	and	r31, r7
    4300:	ef 2b       	or	r30, r31
    4302:	59 f0       	breq	.+22     	; 0x431a <display_draw_bitmap+0xa0>
    4304:	4e 2d       	mov	r20, r14
    4306:	b8 01       	movw	r22, r16
    4308:	8b 81       	ldd	r24, Y+3	; 0x03
    430a:	9c 81       	ldd	r25, Y+4	; 0x04
    430c:	82 0d       	add	r24, r2
    430e:	93 1d       	adc	r25, r3
    4310:	29 83       	std	Y+1, r18	; 0x01
    4312:	3a 83       	std	Y+2, r19	; 0x02
    4314:	7e de       	rcall	.-772    	; 0x4012 <display_draw_pixel>
    4316:	3a 81       	ldd	r19, Y+2	; 0x02
    4318:	29 81       	ldd	r18, Y+1	; 0x01
    431a:	8b 81       	ldd	r24, Y+3	; 0x03
    431c:	9c 81       	ldd	r25, Y+4	; 0x04
    431e:	01 96       	adiw	r24, 0x01	; 1
    4320:	8b 83       	std	Y+3, r24	; 0x03
    4322:	9c 83       	std	Y+4, r25	; 0x04
    4324:	e2 cf       	rjmp	.-60     	; 0x42ea <display_draw_bitmap+0x70>
    4326:	f3 94       	inc	r15
    4328:	c8 cf       	rjmp	.-112    	; 0x42ba <display_draw_bitmap+0x40>
    432a:	24 96       	adiw	r28, 0x04	; 4
    432c:	cd bf       	out	0x3d, r28	; 61
    432e:	de bf       	out	0x3e, r29	; 62
    4330:	df 91       	pop	r29
    4332:	cf 91       	pop	r28
    4334:	1f 91       	pop	r17
    4336:	0f 91       	pop	r16
    4338:	ff 90       	pop	r15
    433a:	ef 90       	pop	r14
    433c:	df 90       	pop	r13
    433e:	cf 90       	pop	r12
    4340:	bf 90       	pop	r11
    4342:	af 90       	pop	r10
    4344:	9f 90       	pop	r9
    4346:	8f 90       	pop	r8
    4348:	7f 90       	pop	r7
    434a:	6f 90       	pop	r6
    434c:	5f 90       	pop	r5
    434e:	4f 90       	pop	r4
    4350:	3f 90       	pop	r3
    4352:	2f 90       	pop	r2
    4354:	08 95       	ret

00004356 <display_draw_char_to_buffer>:
    4356:	25 e0       	ldi	r18, 0x05	; 5
    4358:	62 9f       	mul	r22, r18
    435a:	b0 01       	movw	r22, r0
    435c:	11 24       	eor	r1, r1
    435e:	48 0f       	add	r20, r24
    4360:	59 1f       	adc	r21, r25
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	6e 5b       	subi	r22, 0xBE	; 190
    4368:	77 4f       	sbci	r23, 0xF7	; 247
    436a:	fb 01       	movw	r30, r22
    436c:	e8 0f       	add	r30, r24
    436e:	f9 1f       	adc	r31, r25
    4370:	e4 91       	lpm	r30, Z
    4372:	e2 95       	swap	r30
    4374:	2e 2f       	mov	r18, r30
    4376:	23 73       	andi	r18, 0x33	; 51
    4378:	a4 e0       	ldi	r26, 0x04	; 4
    437a:	2a 9f       	mul	r18, r26
    437c:	90 01       	movw	r18, r0
    437e:	11 24       	eor	r1, r1
    4380:	ec 7c       	andi	r30, 0xCC	; 204
    4382:	e6 95       	lsr	r30
    4384:	e6 95       	lsr	r30
    4386:	e2 2b       	or	r30, r18
    4388:	2e 2f       	mov	r18, r30
    438a:	25 75       	andi	r18, 0x55	; 85
    438c:	22 0f       	add	r18, r18
    438e:	ea 7a       	andi	r30, 0xAA	; 170
    4390:	e6 95       	lsr	r30
    4392:	e2 2b       	or	r30, r18
    4394:	da 01       	movw	r26, r20
    4396:	ed 93       	st	X+, r30
    4398:	ad 01       	movw	r20, r26
    439a:	01 96       	adiw	r24, 0x01	; 1
    439c:	85 30       	cpi	r24, 0x05	; 5
    439e:	91 05       	cpc	r25, r1
    43a0:	21 f7       	brne	.-56     	; 0x436a <display_draw_char_to_buffer+0x14>
    43a2:	08 95       	ret

000043a4 <display_draw_char>:
    43a4:	2f 92       	push	r2
    43a6:	3f 92       	push	r3
    43a8:	4f 92       	push	r4
    43aa:	5f 92       	push	r5
    43ac:	6f 92       	push	r6
    43ae:	7f 92       	push	r7
    43b0:	8f 92       	push	r8
    43b2:	9f 92       	push	r9
    43b4:	af 92       	push	r10
    43b6:	bf 92       	push	r11
    43b8:	cf 92       	push	r12
    43ba:	df 92       	push	r13
    43bc:	ef 92       	push	r14
    43be:	ff 92       	push	r15
    43c0:	0f 93       	push	r16
    43c2:	1f 93       	push	r17
    43c4:	cf 93       	push	r28
    43c6:	df 93       	push	r29
    43c8:	cd b7       	in	r28, 0x3d	; 61
    43ca:	de b7       	in	r29, 0x3e	; 62
    43cc:	25 97       	sbiw	r28, 0x05	; 5
    43ce:	cd bf       	out	0x3d, r28	; 61
    43d0:	de bf       	out	0x3e, r29	; 62
    43d2:	89 83       	std	Y+1, r24	; 0x01
    43d4:	32 2e       	mov	r3, r18
    43d6:	10 2f       	mov	r17, r16
    43d8:	9c 01       	movw	r18, r24
    43da:	5c 01       	movw	r10, r24
    43dc:	85 e0       	ldi	r24, 0x05	; 5
    43de:	a8 0e       	add	r10, r24
    43e0:	b1 1c       	adc	r11, r1
    43e2:	e6 2f       	mov	r30, r22
    43e4:	97 e0       	ldi	r25, 0x07	; 7
    43e6:	09 9f       	mul	r16, r25
    43e8:	e0 0d       	add	r30, r0
    43ea:	11 24       	eor	r1, r1
    43ec:	ea 83       	std	Y+2, r30	; 0x02
    43ee:	2c 83       	std	Y+4, r18	; 0x04
    43f0:	3d 83       	std	Y+5, r19	; 0x05
    43f2:	51 2c       	mov	r5, r1
    43f4:	52 e4       	ldi	r21, 0x42	; 66
    43f6:	e5 2e       	mov	r14, r21
    43f8:	58 e0       	ldi	r21, 0x08	; 8
    43fa:	f5 2e       	mov	r15, r21
    43fc:	e2 1a       	sub	r14, r18
    43fe:	f3 0a       	sbc	r15, r19
    4400:	f5 e0       	ldi	r31, 0x05	; 5
    4402:	4f 9f       	mul	r20, r31
    4404:	e0 0c       	add	r14, r0
    4406:	f1 1c       	adc	r15, r1
    4408:	11 24       	eor	r1, r1
    440a:	4b 01       	movw	r8, r22
    440c:	86 e0       	ldi	r24, 0x06	; 6
    440e:	88 0e       	add	r8, r24
    4410:	91 1c       	adc	r9, r1
    4412:	3b 01       	movw	r6, r22
    4414:	91 e0       	ldi	r25, 0x01	; 1
    4416:	69 1a       	sub	r6, r25
    4418:	71 08       	sbc	r7, r1
    441a:	ec 81       	ldd	r30, Y+4	; 0x04
    441c:	fd 81       	ldd	r31, Y+5	; 0x05
    441e:	ee 0d       	add	r30, r14
    4420:	ff 1d       	adc	r31, r15
    4422:	44 90       	lpm	r4, Z
    4424:	e9 81       	ldd	r30, Y+1	; 0x01
    4426:	e5 0d       	add	r30, r5
    4428:	eb 83       	std	Y+3, r30	; 0x03
    442a:	64 01       	movw	r12, r8
    442c:	21 2c       	mov	r2, r1
    442e:	40 fe       	sbrs	r4, 0
    4430:	11 c0       	rjmp	.+34     	; 0x4454 <display_draw_char+0xb0>
    4432:	11 30       	cpi	r17, 0x01	; 1
    4434:	41 f4       	brne	.+16     	; 0x4446 <display_draw_char+0xa2>
    4436:	8c 81       	ldd	r24, Y+4	; 0x04
    4438:	9d 81       	ldd	r25, Y+5	; 0x05
    443a:	97 fd       	sbrc	r25, 7
    443c:	0b c0       	rjmp	.+22     	; 0x4454 <display_draw_char+0xb0>
    443e:	43 2d       	mov	r20, r3
    4440:	b6 01       	movw	r22, r12
    4442:	e7 dd       	rcall	.-1074   	; 0x4012 <display_draw_pixel>
    4444:	07 c0       	rjmp	.+14     	; 0x4454 <display_draw_char+0xb0>
    4446:	03 2d       	mov	r16, r3
    4448:	21 2f       	mov	r18, r17
    444a:	41 2f       	mov	r20, r17
    444c:	6a 81       	ldd	r22, Y+2	; 0x02
    444e:	62 0d       	add	r22, r2
    4450:	8b 81       	ldd	r24, Y+3	; 0x03
    4452:	a5 de       	rcall	.-694    	; 0x419e <display_draw_filled_rect>
    4454:	46 94       	lsr	r4
    4456:	91 e0       	ldi	r25, 0x01	; 1
    4458:	c9 1a       	sub	r12, r25
    445a:	d1 08       	sbc	r13, r1
    445c:	21 1a       	sub	r2, r17
    445e:	c6 14       	cp	r12, r6
    4460:	d7 04       	cpc	r13, r7
    4462:	29 f7       	brne	.-54     	; 0x442e <display_draw_char+0x8a>
    4464:	ec 81       	ldd	r30, Y+4	; 0x04
    4466:	fd 81       	ldd	r31, Y+5	; 0x05
    4468:	31 96       	adiw	r30, 0x01	; 1
    446a:	ec 83       	std	Y+4, r30	; 0x04
    446c:	fd 83       	std	Y+5, r31	; 0x05
    446e:	51 0e       	add	r5, r17
    4470:	ea 15       	cp	r30, r10
    4472:	fb 05       	cpc	r31, r11
    4474:	91 f6       	brne	.-92     	; 0x441a <display_draw_char+0x76>
    4476:	25 96       	adiw	r28, 0x05	; 5
    4478:	cd bf       	out	0x3d, r28	; 61
    447a:	de bf       	out	0x3e, r29	; 62
    447c:	df 91       	pop	r29
    447e:	cf 91       	pop	r28
    4480:	1f 91       	pop	r17
    4482:	0f 91       	pop	r16
    4484:	ff 90       	pop	r15
    4486:	ef 90       	pop	r14
    4488:	df 90       	pop	r13
    448a:	cf 90       	pop	r12
    448c:	bf 90       	pop	r11
    448e:	af 90       	pop	r10
    4490:	9f 90       	pop	r9
    4492:	8f 90       	pop	r8
    4494:	7f 90       	pop	r7
    4496:	6f 90       	pop	r6
    4498:	5f 90       	pop	r5
    449a:	4f 90       	pop	r4
    449c:	3f 90       	pop	r3
    449e:	2f 90       	pop	r2
    44a0:	08 95       	ret

000044a2 <display_draw_small_char_to_buffer>:
    44a2:	af 92       	push	r10
    44a4:	bf 92       	push	r11
    44a6:	cf 92       	push	r12
    44a8:	df 92       	push	r13
    44aa:	ef 92       	push	r14
    44ac:	ff 92       	push	r15
    44ae:	0f 93       	push	r16
    44b0:	1f 93       	push	r17
    44b2:	cf 93       	push	r28
    44b4:	df 93       	push	r29
    44b6:	cd b7       	in	r28, 0x3d	; 61
    44b8:	de b7       	in	r29, 0x3e	; 62
    44ba:	25 97       	sbiw	r28, 0x05	; 5
    44bc:	cd bf       	out	0x3d, r28	; 61
    44be:	de bf       	out	0x3e, r29	; 62
    44c0:	26 e0       	ldi	r18, 0x06	; 6
    44c2:	62 9f       	mul	r22, r18
    44c4:	b0 01       	movw	r22, r0
    44c6:	11 24       	eor	r1, r1
    44c8:	8e 01       	movw	r16, r28
    44ca:	0f 5f       	subi	r16, 0xFF	; 255
    44cc:	1f 4f       	sbci	r17, 0xFF	; 255
    44ce:	20 e0       	ldi	r18, 0x00	; 0
    44d0:	30 e0       	ldi	r19, 0x00	; 0
    44d2:	6e 5b       	subi	r22, 0xBE	; 190
    44d4:	7d 4f       	sbci	r23, 0xFD	; 253
    44d6:	03 96       	adiw	r24, 0x03	; 3
    44d8:	48 0f       	add	r20, r24
    44da:	59 1f       	adc	r21, r25
    44dc:	e5 e0       	ldi	r30, 0x05	; 5
    44de:	ee 2e       	mov	r14, r30
    44e0:	f1 2c       	mov	r15, r1
    44e2:	fb 01       	movw	r30, r22
    44e4:	e2 0f       	add	r30, r18
    44e6:	f3 1f       	adc	r31, r19
    44e8:	84 91       	lpm	r24, Z
    44ea:	82 95       	swap	r24
    44ec:	8f 70       	andi	r24, 0x0F	; 15
    44ee:	f8 01       	movw	r30, r16
    44f0:	81 93       	st	Z+, r24
    44f2:	8f 01       	movw	r16, r30
    44f4:	fa 01       	movw	r30, r20
    44f6:	b8 2e       	mov	r11, r24
    44f8:	80 e0       	ldi	r24, 0x00	; 0
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	67 01       	movw	r12, r14
    44fe:	c2 1a       	sub	r12, r18
    4500:	d3 0a       	sbc	r13, r19
    4502:	ab 2d       	mov	r26, r11
    4504:	a1 70       	andi	r26, 0x01	; 1
    4506:	0c 2c       	mov	r0, r12
    4508:	01 c0       	rjmp	.+2      	; 0x450c <display_draw_small_char_to_buffer+0x6a>
    450a:	aa 0f       	add	r26, r26
    450c:	0a 94       	dec	r0
    450e:	ea f7       	brpl	.-6      	; 0x450a <display_draw_small_char_to_buffer+0x68>
    4510:	a2 90       	ld	r10, -Z
    4512:	aa 2a       	or	r10, r26
    4514:	a0 82       	st	Z, r10
    4516:	b6 94       	lsr	r11
    4518:	01 96       	adiw	r24, 0x01	; 1
    451a:	83 30       	cpi	r24, 0x03	; 3
    451c:	91 05       	cpc	r25, r1
    451e:	89 f7       	brne	.-30     	; 0x4502 <display_draw_small_char_to_buffer+0x60>
    4520:	2f 5f       	subi	r18, 0xFF	; 255
    4522:	3f 4f       	sbci	r19, 0xFF	; 255
    4524:	25 30       	cpi	r18, 0x05	; 5
    4526:	31 05       	cpc	r19, r1
    4528:	e1 f6       	brne	.-72     	; 0x44e2 <display_draw_small_char_to_buffer+0x40>
    452a:	25 96       	adiw	r28, 0x05	; 5
    452c:	cd bf       	out	0x3d, r28	; 61
    452e:	de bf       	out	0x3e, r29	; 62
    4530:	df 91       	pop	r29
    4532:	cf 91       	pop	r28
    4534:	1f 91       	pop	r17
    4536:	0f 91       	pop	r16
    4538:	ff 90       	pop	r15
    453a:	ef 90       	pop	r14
    453c:	df 90       	pop	r13
    453e:	cf 90       	pop	r12
    4540:	bf 90       	pop	r11
    4542:	af 90       	pop	r10
    4544:	08 95       	ret

00004546 <display_print_scrolling_text>:
    4546:	9f 92       	push	r9
    4548:	af 92       	push	r10
    454a:	bf 92       	push	r11
    454c:	cf 92       	push	r12
    454e:	df 92       	push	r13
    4550:	ef 92       	push	r14
    4552:	ff 92       	push	r15
    4554:	0f 93       	push	r16
    4556:	1f 93       	push	r17
    4558:	cf 93       	push	r28
    455a:	df 93       	push	r29
    455c:	8c 01       	movw	r16, r24
    455e:	96 2e       	mov	r9, r22
    4560:	66 23       	and	r22, r22
    4562:	71 f0       	breq	.+28     	; 0x4580 <display_print_scrolling_text+0x3a>
    4564:	fc 01       	movw	r30, r24
    4566:	01 90       	ld	r0, Z+
    4568:	00 20       	and	r0, r0
    456a:	e9 f7       	brne	.-6      	; 0x4566 <display_print_scrolling_text+0x20>
    456c:	31 97       	sbiw	r30, 0x01	; 1
    456e:	e8 1b       	sub	r30, r24
    4570:	f9 0b       	sbc	r31, r25
    4572:	86 e0       	ldi	r24, 0x06	; 6
    4574:	8e 9f       	mul	r24, r30
    4576:	e0 01       	movw	r28, r0
    4578:	8f 9f       	mul	r24, r31
    457a:	d0 0d       	add	r29, r0
    457c:	11 24       	eor	r1, r1
    457e:	0b c0       	rjmp	.+22     	; 0x4596 <display_print_scrolling_text+0x50>
    4580:	ec 01       	movw	r28, r24
    4582:	09 90       	ld	r0, Y+
    4584:	00 20       	and	r0, r0
    4586:	e9 f7       	brne	.-6      	; 0x4582 <display_print_scrolling_text+0x3c>
    4588:	21 97       	sbiw	r28, 0x01	; 1
    458a:	c8 1b       	sub	r28, r24
    458c:	d9 0b       	sbc	r29, r25
    458e:	cc 0f       	add	r28, r28
    4590:	dd 1f       	adc	r29, r29
    4592:	cc 0f       	add	r28, r28
    4594:	dd 1f       	adc	r29, r29
    4596:	61 e0       	ldi	r22, 0x01	; 1
    4598:	70 e0       	ldi	r23, 0x00	; 0
    459a:	ce 01       	movw	r24, r28
    459c:	0e 94 ff 4e 	call	0x9dfe	; 0x9dfe <calloc>
    45a0:	7c 01       	movw	r14, r24
    45a2:	a1 2c       	mov	r10, r1
    45a4:	b1 2c       	mov	r11, r1
    45a6:	c1 2c       	mov	r12, r1
    45a8:	d1 2c       	mov	r13, r1
    45aa:	f8 01       	movw	r30, r16
    45ac:	61 91       	ld	r22, Z+
    45ae:	8f 01       	movw	r16, r30
    45b0:	66 23       	and	r22, r22
    45b2:	79 f0       	breq	.+30     	; 0x45d2 <display_print_scrolling_text+0x8c>
    45b4:	a7 01       	movw	r20, r14
    45b6:	99 20       	and	r9, r9
    45b8:	19 f0       	breq	.+6      	; 0x45c0 <display_print_scrolling_text+0x7a>
    45ba:	c6 01       	movw	r24, r12
    45bc:	cc de       	rcall	.-616    	; 0x4356 <display_draw_char_to_buffer>
    45be:	02 c0       	rjmp	.+4      	; 0x45c4 <display_print_scrolling_text+0x7e>
    45c0:	c5 01       	movw	r24, r10
    45c2:	6f df       	rcall	.-290    	; 0x44a2 <display_draw_small_char_to_buffer>
    45c4:	86 e0       	ldi	r24, 0x06	; 6
    45c6:	c8 0e       	add	r12, r24
    45c8:	d1 1c       	adc	r13, r1
    45ca:	e4 e0       	ldi	r30, 0x04	; 4
    45cc:	ae 0e       	add	r10, r30
    45ce:	b1 1c       	adc	r11, r1
    45d0:	ec cf       	rjmp	.-40     	; 0x45aa <display_print_scrolling_text+0x64>
    45d2:	be 01       	movw	r22, r28
    45d4:	c7 01       	movw	r24, r14
    45d6:	0e 94 92 10 	call	0x2124	; 0x2124 <ht1632c_print_buffer>
    45da:	c7 01       	movw	r24, r14
    45dc:	df 91       	pop	r29
    45de:	cf 91       	pop	r28
    45e0:	1f 91       	pop	r17
    45e2:	0f 91       	pop	r16
    45e4:	ff 90       	pop	r15
    45e6:	ef 90       	pop	r14
    45e8:	df 90       	pop	r13
    45ea:	cf 90       	pop	r12
    45ec:	bf 90       	pop	r11
    45ee:	af 90       	pop	r10
    45f0:	9f 90       	pop	r9
    45f2:	0c 94 b1 4f 	jmp	0x9f62	; 0x9f62 <free>

000045f6 <display_draw_small_char>:
    45f6:	2f 92       	push	r2
    45f8:	3f 92       	push	r3
    45fa:	4f 92       	push	r4
    45fc:	5f 92       	push	r5
    45fe:	6f 92       	push	r6
    4600:	7f 92       	push	r7
    4602:	8f 92       	push	r8
    4604:	9f 92       	push	r9
    4606:	af 92       	push	r10
    4608:	bf 92       	push	r11
    460a:	cf 92       	push	r12
    460c:	df 92       	push	r13
    460e:	ef 92       	push	r14
    4610:	ff 92       	push	r15
    4612:	0f 93       	push	r16
    4614:	1f 93       	push	r17
    4616:	cf 93       	push	r28
    4618:	df 93       	push	r29
    461a:	cd b7       	in	r28, 0x3d	; 61
    461c:	de b7       	in	r29, 0x3e	; 62
    461e:	28 97       	sbiw	r28, 0x08	; 8
    4620:	cd bf       	out	0x3d, r28	; 61
    4622:	de bf       	out	0x3e, r29	; 62
    4624:	5b 01       	movw	r10, r22
    4626:	29 83       	std	Y+1, r18	; 0x01
    4628:	10 2f       	mov	r17, r16
    462a:	26 e0       	ldi	r18, 0x06	; 6
    462c:	42 9f       	mul	r20, r18
    462e:	60 01       	movw	r12, r0
    4630:	11 24       	eor	r1, r1
    4632:	e8 2f       	mov	r30, r24
    4634:	37 e0       	ldi	r19, 0x07	; 7
    4636:	03 9f       	mul	r16, r19
    4638:	e0 0d       	add	r30, r0
    463a:	11 24       	eor	r1, r1
    463c:	ea 83       	std	Y+2, r30	; 0x02
    463e:	21 2c       	mov	r2, r1
    4640:	1f 82       	std	Y+7, r1	; 0x07
    4642:	18 86       	std	Y+8, r1	; 0x08
    4644:	96 01       	movw	r18, r12
    4646:	2e 5b       	subi	r18, 0xBE	; 190
    4648:	3d 4f       	sbci	r19, 0xFD	; 253
    464a:	69 01       	movw	r12, r18
    464c:	fc 01       	movw	r30, r24
    464e:	37 96       	adiw	r30, 0x07	; 7
    4650:	ec 83       	std	Y+4, r30	; 0x04
    4652:	fd 83       	std	Y+5, r31	; 0x05
    4654:	2c 01       	movw	r4, r24
    4656:	f1 e0       	ldi	r31, 0x01	; 1
    4658:	4f 1a       	sub	r4, r31
    465a:	51 08       	sbc	r5, r1
    465c:	3b 01       	movw	r6, r22
    465e:	23 e0       	ldi	r18, 0x03	; 3
    4660:	62 0e       	add	r6, r18
    4662:	71 1c       	adc	r7, r1
    4664:	ef 81       	ldd	r30, Y+7	; 0x07
    4666:	f8 85       	ldd	r31, Y+8	; 0x08
    4668:	ec 0d       	add	r30, r12
    466a:	fd 1d       	adc	r31, r13
    466c:	54 91       	lpm	r21, Z
    466e:	32 2d       	mov	r19, r2
    4670:	3a 0d       	add	r19, r10
    4672:	3b 83       	std	Y+3, r19	; 0x03
    4674:	ec 80       	ldd	r14, Y+4	; 0x04
    4676:	fd 80       	ldd	r15, Y+5	; 0x05
    4678:	31 2c       	mov	r3, r1
    467a:	43 01       	movw	r8, r6
    467c:	8f 81       	ldd	r24, Y+7	; 0x07
    467e:	98 85       	ldd	r25, Y+8	; 0x08
    4680:	88 1a       	sub	r8, r24
    4682:	99 0a       	sbc	r9, r25
    4684:	50 ff       	sbrs	r21, 0
    4686:	16 c0       	rjmp	.+44     	; 0x46b4 <display_draw_small_char+0xbe>
    4688:	11 30       	cpi	r17, 0x01	; 1
    468a:	59 f4       	brne	.+22     	; 0x46a2 <display_draw_small_char+0xac>
    468c:	92 e0       	ldi	r25, 0x02	; 2
    468e:	e9 16       	cp	r14, r25
    4690:	f1 04       	cpc	r15, r1
    4692:	84 f0       	brlt	.+32     	; 0x46b4 <display_draw_small_char+0xbe>
    4694:	49 81       	ldd	r20, Y+1	; 0x01
    4696:	b4 01       	movw	r22, r8
    4698:	c7 01       	movw	r24, r14
    469a:	02 97       	sbiw	r24, 0x02	; 2
    469c:	5e 83       	std	Y+6, r21	; 0x06
    469e:	b9 dc       	rcall	.-1678   	; 0x4012 <display_draw_pixel>
    46a0:	08 c0       	rjmp	.+16     	; 0x46b2 <display_draw_small_char+0xbc>
    46a2:	09 81       	ldd	r16, Y+1	; 0x01
    46a4:	21 2f       	mov	r18, r17
    46a6:	41 2f       	mov	r20, r17
    46a8:	6b 81       	ldd	r22, Y+3	; 0x03
    46aa:	8a 81       	ldd	r24, Y+2	; 0x02
    46ac:	83 0d       	add	r24, r3
    46ae:	5e 83       	std	Y+6, r21	; 0x06
    46b0:	76 dd       	rcall	.-1300   	; 0x419e <display_draw_filled_rect>
    46b2:	5e 81       	ldd	r21, Y+6	; 0x06
    46b4:	56 95       	lsr	r21
    46b6:	e1 e0       	ldi	r30, 0x01	; 1
    46b8:	ee 1a       	sub	r14, r30
    46ba:	f1 08       	sbc	r15, r1
    46bc:	31 1a       	sub	r3, r17
    46be:	e4 14       	cp	r14, r4
    46c0:	f5 04       	cpc	r15, r5
    46c2:	01 f7       	brne	.-64     	; 0x4684 <display_draw_small_char+0x8e>
    46c4:	2f 81       	ldd	r18, Y+7	; 0x07
    46c6:	38 85       	ldd	r19, Y+8	; 0x08
    46c8:	2f 5f       	subi	r18, 0xFF	; 255
    46ca:	3f 4f       	sbci	r19, 0xFF	; 255
    46cc:	2f 83       	std	Y+7, r18	; 0x07
    46ce:	38 87       	std	Y+8, r19	; 0x08
    46d0:	21 1a       	sub	r2, r17
    46d2:	26 30       	cpi	r18, 0x06	; 6
    46d4:	31 05       	cpc	r19, r1
    46d6:	31 f6       	brne	.-116    	; 0x4664 <display_draw_small_char+0x6e>
    46d8:	28 96       	adiw	r28, 0x08	; 8
    46da:	cd bf       	out	0x3d, r28	; 61
    46dc:	de bf       	out	0x3e, r29	; 62
    46de:	df 91       	pop	r29
    46e0:	cf 91       	pop	r28
    46e2:	1f 91       	pop	r17
    46e4:	0f 91       	pop	r16
    46e6:	ff 90       	pop	r15
    46e8:	ef 90       	pop	r14
    46ea:	df 90       	pop	r13
    46ec:	cf 90       	pop	r12
    46ee:	bf 90       	pop	r11
    46f0:	af 90       	pop	r10
    46f2:	9f 90       	pop	r9
    46f4:	8f 90       	pop	r8
    46f6:	7f 90       	pop	r7
    46f8:	6f 90       	pop	r6
    46fa:	5f 90       	pop	r5
    46fc:	4f 90       	pop	r4
    46fe:	3f 90       	pop	r3
    4700:	2f 90       	pop	r2
    4702:	08 95       	ret

00004704 <display_draw_four_letter_word>:
    4704:	0f 93       	push	r16
    4706:	cf 93       	push	r28
    4708:	df 93       	push	r29
    470a:	ec 01       	movw	r28, r24
    470c:	01 e0       	ldi	r16, 0x01	; 1
    470e:	21 e0       	ldi	r18, 0x01	; 1
    4710:	30 e0       	ldi	r19, 0x00	; 0
    4712:	48 81       	ld	r20, Y
    4714:	67 e0       	ldi	r22, 0x07	; 7
    4716:	70 e0       	ldi	r23, 0x00	; 0
    4718:	81 e0       	ldi	r24, 0x01	; 1
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	6c df       	rcall	.-296    	; 0x45f6 <display_draw_small_char>
    471e:	21 e0       	ldi	r18, 0x01	; 1
    4720:	30 e0       	ldi	r19, 0x00	; 0
    4722:	49 81       	ldd	r20, Y+1	; 0x01
    4724:	67 e0       	ldi	r22, 0x07	; 7
    4726:	70 e0       	ldi	r23, 0x00	; 0
    4728:	85 e0       	ldi	r24, 0x05	; 5
    472a:	90 e0       	ldi	r25, 0x00	; 0
    472c:	64 df       	rcall	.-312    	; 0x45f6 <display_draw_small_char>
    472e:	21 e0       	ldi	r18, 0x01	; 1
    4730:	30 e0       	ldi	r19, 0x00	; 0
    4732:	4a 81       	ldd	r20, Y+2	; 0x02
    4734:	67 e0       	ldi	r22, 0x07	; 7
    4736:	70 e0       	ldi	r23, 0x00	; 0
    4738:	89 e0       	ldi	r24, 0x09	; 9
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	5c df       	rcall	.-328    	; 0x45f6 <display_draw_small_char>
    473e:	21 e0       	ldi	r18, 0x01	; 1
    4740:	30 e0       	ldi	r19, 0x00	; 0
    4742:	4b 81       	ldd	r20, Y+3	; 0x03
    4744:	67 e0       	ldi	r22, 0x07	; 7
    4746:	70 e0       	ldi	r23, 0x00	; 0
    4748:	8d e0       	ldi	r24, 0x0D	; 13
    474a:	90 e0       	ldi	r25, 0x00	; 0
    474c:	54 df       	rcall	.-344    	; 0x45f6 <display_draw_small_char>
    474e:	df 91       	pop	r29
    4750:	cf 91       	pop	r28
    4752:	0f 91       	pop	r16
    4754:	08 95       	ret

00004756 <display_draw_three_letter_word>:
    4756:	0f 93       	push	r16
    4758:	cf 93       	push	r28
    475a:	df 93       	push	r29
    475c:	ec 01       	movw	r28, r24
    475e:	01 e0       	ldi	r16, 0x01	; 1
    4760:	21 e0       	ldi	r18, 0x01	; 1
    4762:	30 e0       	ldi	r19, 0x00	; 0
    4764:	48 81       	ld	r20, Y
    4766:	67 e0       	ldi	r22, 0x07	; 7
    4768:	70 e0       	ldi	r23, 0x00	; 0
    476a:	83 e0       	ldi	r24, 0x03	; 3
    476c:	90 e0       	ldi	r25, 0x00	; 0
    476e:	43 df       	rcall	.-378    	; 0x45f6 <display_draw_small_char>
    4770:	21 e0       	ldi	r18, 0x01	; 1
    4772:	30 e0       	ldi	r19, 0x00	; 0
    4774:	49 81       	ldd	r20, Y+1	; 0x01
    4776:	67 e0       	ldi	r22, 0x07	; 7
    4778:	70 e0       	ldi	r23, 0x00	; 0
    477a:	87 e0       	ldi	r24, 0x07	; 7
    477c:	90 e0       	ldi	r25, 0x00	; 0
    477e:	3b df       	rcall	.-394    	; 0x45f6 <display_draw_small_char>
    4780:	21 e0       	ldi	r18, 0x01	; 1
    4782:	30 e0       	ldi	r19, 0x00	; 0
    4784:	4a 81       	ldd	r20, Y+2	; 0x02
    4786:	67 e0       	ldi	r22, 0x07	; 7
    4788:	70 e0       	ldi	r23, 0x00	; 0
    478a:	8b e0       	ldi	r24, 0x0B	; 11
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	33 df       	rcall	.-410    	; 0x45f6 <display_draw_small_char>
    4790:	df 91       	pop	r29
    4792:	cf 91       	pop	r28
    4794:	0f 91       	pop	r16
    4796:	08 95       	ret

00004798 <display_draw_wifi_icon>:
    4798:	80 91 b3 2a 	lds	r24, 0x2AB3
    479c:	81 30       	cpi	r24, 0x01	; 1
    479e:	e9 f1       	breq	.+122    	; 0x481a <display_draw_wifi_icon+0x82>
    47a0:	a8 f1       	brcs	.+106    	; 0x480c <display_draw_wifi_icon+0x74>
    47a2:	82 30       	cpi	r24, 0x02	; 2
    47a4:	09 f4       	brne	.+2      	; 0x47a8 <display_draw_wifi_icon+0x10>
    47a6:	48 c0       	rjmp	.+144    	; 0x4838 <display_draw_wifi_icon+0xa0>
    47a8:	83 30       	cpi	r24, 0x03	; 3
    47aa:	09 f0       	breq	.+2      	; 0x47ae <display_draw_wifi_icon+0x16>
    47ac:	65 c0       	rjmp	.+202    	; 0x4878 <display_draw_wifi_icon+0xe0>
    47ae:	80 e2       	ldi	r24, 0x20	; 32
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    47b6:	81 e3       	ldi	r24, 0x31	; 49
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    47be:	82 e4       	ldi	r24, 0x42	; 66
    47c0:	90 e0       	ldi	r25, 0x00	; 0
    47c2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    47c6:	82 e5       	ldi	r24, 0x52	; 82
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    47ce:	83 e6       	ldi	r24, 0x63	; 99
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    47d6:	83 e7       	ldi	r24, 0x73	; 115
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    47de:	8b e0       	ldi	r24, 0x0B	; 11
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    47e6:	8b e1       	ldi	r24, 0x1B	; 27
    47e8:	90 e0       	ldi	r25, 0x00	; 0
    47ea:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    47ee:	8a e2       	ldi	r24, 0x2A	; 42
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    47f6:	8a e3       	ldi	r24, 0x3A	; 58
    47f8:	90 e0       	ldi	r25, 0x00	; 0
    47fa:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    47fe:	89 e4       	ldi	r24, 0x49	; 73
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    4806:	88 e5       	ldi	r24, 0x58	; 88
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	34 c0       	rjmp	.+104    	; 0x4874 <display_draw_wifi_icon+0xdc>
    480c:	81 ef       	ldi	r24, 0xF1	; 241
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    4814:	89 e8       	ldi	r24, 0x89	; 137
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	2d c0       	rjmp	.+90     	; 0x4874 <display_draw_wifi_icon+0xdc>
    481a:	83 ee       	ldi	r24, 0xE3	; 227
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    4822:	84 ef       	ldi	r24, 0xF4	; 244
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    482a:	8c e8       	ldi	r24, 0x8C	; 140
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    4832:	8b e9       	ldi	r24, 0x9B	; 155
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	1e c0       	rjmp	.+60     	; 0x4874 <display_draw_wifi_icon+0xdc>
    4838:	85 ec       	ldi	r24, 0xC5	; 197
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    4840:	86 ed       	ldi	r24, 0xD6	; 214
    4842:	90 e0       	ldi	r25, 0x00	; 0
    4844:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    4848:	87 ee       	ldi	r24, 0xE7	; 231
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    4850:	87 ef       	ldi	r24, 0xF7	; 247
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    4858:	8f e8       	ldi	r24, 0x8F	; 143
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    4860:	8f e9       	ldi	r24, 0x9F	; 159
    4862:	90 e0       	ldi	r25, 0x00	; 0
    4864:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    4868:	8e ea       	ldi	r24, 0xAE	; 174
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    4870:	8d eb       	ldi	r24, 0xBD	; 189
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <ht1632c_set_pixel>
    4878:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <ht1632c_refresh_screen>
    487c:	80 91 b3 2a 	lds	r24, 0x2AB3
    4880:	8f 5f       	subi	r24, 0xFF	; 255
    4882:	80 93 b3 2a 	sts	0x2AB3, r24
    4886:	84 30       	cpi	r24, 0x04	; 4
    4888:	09 f0       	breq	.+2      	; 0x488c <display_draw_wifi_icon+0xf4>
    488a:	86 cf       	rjmp	.-244    	; 0x4798 <display_draw_wifi_icon>
    488c:	10 92 b3 2a 	sts	0x2AB3, r1
    4890:	0e 94 76 0d 	call	0x1aec	; 0x1aec <ht1632c_clear_screen>
    4894:	81 cf       	rjmp	.-254    	; 0x4798 <display_draw_wifi_icon>

00004896 <display_slide_in_from_left>:
    4896:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <ht1632c_slide_in_from_left>

0000489a <display_slide_in_from_right>:
    489a:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <ht1632c_slide_in_from_right>

0000489e <display_slide_in_from_bottom>:
    489e:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <ht1632c_slide_in_from_bottom>

000048a2 <display_slide_in_from_top>:
    48a2:	0c 94 00 10 	jmp	0x2000	; 0x2000 <ht1632c_slide_in_from_top>

000048a6 <display_slide_out_to_right>:
    48a6:	cf 93       	push	r28
    48a8:	cf e1       	ldi	r28, 0x1F	; 31
    48aa:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <ht1632c_shift_right>
    48ae:	c1 50       	subi	r28, 0x01	; 1
    48b0:	e1 f7       	brne	.-8      	; 0x48aa <display_slide_out_to_right+0x4>
    48b2:	cf 91       	pop	r28
    48b4:	08 95       	ret

000048b6 <display_slide_out_to_left>:
    48b6:	cf 93       	push	r28
    48b8:	cf e1       	ldi	r28, 0x1F	; 31
    48ba:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <ht1632c_shift_left>
    48be:	c1 50       	subi	r28, 0x01	; 1
    48c0:	e1 f7       	brne	.-8      	; 0x48ba <display_slide_out_to_left+0x4>
    48c2:	cf 91       	pop	r28
    48c4:	08 95       	ret

000048c6 <display_slide_out_to_top>:
    48c6:	cf 93       	push	r28
    48c8:	cf e1       	ldi	r28, 0x1F	; 31
    48ca:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <ht1632c_shift_up>
    48ce:	c1 50       	subi	r28, 0x01	; 1
    48d0:	e1 f7       	brne	.-8      	; 0x48ca <display_slide_out_to_top+0x4>
    48d2:	cf 91       	pop	r28
    48d4:	08 95       	ret

000048d6 <display_off>:
    48d6:	f7 df       	rcall	.-18     	; 0x48c6 <display_slide_out_to_top>
    48d8:	82 e0       	ldi	r24, 0x02	; 2
    48da:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <ht1632c_write_command>

000048de <display_slide_out_to_bottom>:
    48de:	cf 93       	push	r28
    48e0:	cf e1       	ldi	r28, 0x1F	; 31
    48e2:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <ht1632c_shift_down>
    48e6:	c1 50       	subi	r28, 0x01	; 1
    48e8:	e1 f7       	brne	.-8      	; 0x48e2 <display_slide_out_to_bottom+0x4>
    48ea:	cf 91       	pop	r28
    48ec:	08 95       	ret

000048ee <display_alarm_increment_minute>:
    48ee:	60 91 65 2b 	lds	r22, 0x2B65
    48f2:	6b 33       	cpi	r22, 0x3B	; 59
    48f4:	20 f4       	brcc	.+8      	; 0x48fe <display_alarm_increment_minute+0x10>
    48f6:	6f 5f       	subi	r22, 0xFF	; 255
    48f8:	60 93 65 2b 	sts	0x2B65, r22
    48fc:	04 c0       	rjmp	.+8      	; 0x4906 <display_alarm_increment_minute+0x18>
    48fe:	81 e0       	ldi	r24, 0x01	; 1
    4900:	80 93 65 2b 	sts	0x2B65, r24
    4904:	61 e0       	ldi	r22, 0x01	; 1
    4906:	85 e0       	ldi	r24, 0x05	; 5
    4908:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
    490c:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

00004910 <display_alarm_decrement_minute>:
    4910:	60 91 65 2b 	lds	r22, 0x2B65
    4914:	66 23       	and	r22, r22
    4916:	21 f0       	breq	.+8      	; 0x4920 <display_alarm_decrement_minute+0x10>
    4918:	61 50       	subi	r22, 0x01	; 1
    491a:	60 93 65 2b 	sts	0x2B65, r22
    491e:	04 c0       	rjmp	.+8      	; 0x4928 <display_alarm_decrement_minute+0x18>
    4920:	8a e3       	ldi	r24, 0x3A	; 58
    4922:	80 93 65 2b 	sts	0x2B65, r24
    4926:	6a e3       	ldi	r22, 0x3A	; 58
    4928:	85 e0       	ldi	r24, 0x05	; 5
    492a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
    492e:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

00004932 <display_alarm_increment_hour>:
    4932:	60 91 66 2b 	lds	r22, 0x2B66
    4936:	67 31       	cpi	r22, 0x17	; 23
    4938:	20 f4       	brcc	.+8      	; 0x4942 <display_alarm_increment_hour+0x10>
    493a:	6f 5f       	subi	r22, 0xFF	; 255
    493c:	60 93 66 2b 	sts	0x2B66, r22
    4940:	04 c0       	rjmp	.+8      	; 0x494a <display_alarm_increment_hour+0x18>
    4942:	81 e0       	ldi	r24, 0x01	; 1
    4944:	80 93 66 2b 	sts	0x2B66, r24
    4948:	61 e0       	ldi	r22, 0x01	; 1
    494a:	85 e0       	ldi	r24, 0x05	; 5
    494c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
    4950:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

00004954 <display_alarm_decrement_hour>:
    4954:	60 91 66 2b 	lds	r22, 0x2B66
    4958:	66 23       	and	r22, r22
    495a:	21 f0       	breq	.+8      	; 0x4964 <display_alarm_decrement_hour+0x10>
    495c:	61 50       	subi	r22, 0x01	; 1
    495e:	60 93 66 2b 	sts	0x2B66, r22
    4962:	04 c0       	rjmp	.+8      	; 0x496c <display_alarm_decrement_hour+0x18>
    4964:	86 e1       	ldi	r24, 0x16	; 22
    4966:	80 93 66 2b 	sts	0x2B66, r24
    496a:	66 e1       	ldi	r22, 0x16	; 22
    496c:	85 e0       	ldi	r24, 0x05	; 5
    496e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
    4972:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

00004976 <display_draw_and_increment_hour>:
    4976:	60 91 e2 2a 	lds	r22, 0x2AE2
    497a:	67 31       	cpi	r22, 0x17	; 23
    497c:	20 f4       	brcc	.+8      	; 0x4986 <display_draw_and_increment_hour+0x10>
    497e:	6f 5f       	subi	r22, 0xFF	; 255
    4980:	60 93 e2 2a 	sts	0x2AE2, r22
    4984:	03 c0       	rjmp	.+6      	; 0x498c <display_draw_and_increment_hour+0x16>
    4986:	10 92 e2 2a 	sts	0x2AE2, r1
    498a:	60 e0       	ldi	r22, 0x00	; 0
    498c:	85 e0       	ldi	r24, 0x05	; 5
    498e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
    4992:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

00004996 <display_draw_and_decrement_hour>:
    4996:	60 91 e2 2a 	lds	r22, 0x2AE2
    499a:	66 23       	and	r22, r22
    499c:	21 f0       	breq	.+8      	; 0x49a6 <display_draw_and_decrement_hour+0x10>
    499e:	61 50       	subi	r22, 0x01	; 1
    49a0:	60 93 e2 2a 	sts	0x2AE2, r22
    49a4:	04 c0       	rjmp	.+8      	; 0x49ae <display_draw_and_decrement_hour+0x18>
    49a6:	87 e1       	ldi	r24, 0x17	; 23
    49a8:	80 93 e2 2a 	sts	0x2AE2, r24
    49ac:	67 e1       	ldi	r22, 0x17	; 23
    49ae:	85 e0       	ldi	r24, 0x05	; 5
    49b0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
    49b4:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

000049b8 <display_draw_and_increment_minute>:
    49b8:	60 91 e1 2a 	lds	r22, 0x2AE1
    49bc:	6b 33       	cpi	r22, 0x3B	; 59
    49be:	20 f4       	brcc	.+8      	; 0x49c8 <display_draw_and_increment_minute+0x10>
    49c0:	6f 5f       	subi	r22, 0xFF	; 255
    49c2:	60 93 e1 2a 	sts	0x2AE1, r22
    49c6:	03 c0       	rjmp	.+6      	; 0x49ce <display_draw_and_increment_minute+0x16>
    49c8:	10 92 e1 2a 	sts	0x2AE1, r1
    49cc:	60 e0       	ldi	r22, 0x00	; 0
    49ce:	85 e0       	ldi	r24, 0x05	; 5
    49d0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
    49d4:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

000049d8 <display_draw_and_decrement_minute>:
    49d8:	60 91 e1 2a 	lds	r22, 0x2AE1
    49dc:	66 23       	and	r22, r22
    49de:	21 f0       	breq	.+8      	; 0x49e8 <display_draw_and_decrement_minute+0x10>
    49e0:	61 50       	subi	r22, 0x01	; 1
    49e2:	60 93 e1 2a 	sts	0x2AE1, r22
    49e6:	04 c0       	rjmp	.+8      	; 0x49f0 <display_draw_and_decrement_minute+0x18>
    49e8:	8b e3       	ldi	r24, 0x3B	; 59
    49ea:	80 93 e1 2a 	sts	0x2AE1, r24
    49ee:	6b e3       	ldi	r22, 0x3B	; 59
    49f0:	85 e0       	ldi	r24, 0x05	; 5
    49f2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
    49f6:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

000049fa <display_draw_and_increment_day>:
	}
	display_refresh_screen();
}

void display_draw_and_increment_day(void)
{
    49fa:	cf 93       	push	r28
	if (env.time.day < time_get_days_in_month(env.time.month,env.time.year)) {
    49fc:	c0 91 e3 2a 	lds	r28, 0x2AE3
    4a00:	60 91 e7 2a 	lds	r22, 0x2AE7
    4a04:	70 91 e8 2a 	lds	r23, 0x2AE8
    4a08:	80 91 e6 2a 	lds	r24, 0x2AE6
    4a0c:	0e 94 bb 4c 	call	0x9976	; 0x9976 <time_get_days_in_month>
    4a10:	c8 17       	cp	r28, r24
    4a12:	30 f4       	brcc	.+12     	; 0x4a20 <display_draw_and_increment_day+0x26>
		rtc_update_display(5,++env.time.day);
    4a14:	60 91 e3 2a 	lds	r22, 0x2AE3
    4a18:	6f 5f       	subi	r22, 0xFF	; 255
    4a1a:	60 93 e3 2a 	sts	0x2AE3, r22
    4a1e:	04 c0       	rjmp	.+8      	; 0x4a28 <display_draw_and_increment_day+0x2e>
	} else {
		env.time.day = 1;
    4a20:	81 e0       	ldi	r24, 0x01	; 1
    4a22:	80 93 e3 2a 	sts	0x2AE3, r24
		rtc_update_display(5,env.time.day);
    4a26:	61 e0       	ldi	r22, 0x01	; 1
    4a28:	85 e0       	ldi	r24, 0x05	; 5
    4a2a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
	}
	display_refresh_screen();
}
    4a2e:	cf 91       	pop	r28
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4a30:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

00004a34 <display_draw_and_decrement_day>:
	display_refresh_screen();
}

void display_draw_and_decrement_day(void)
{
	if (env.time.day > 1) {
    4a34:	60 91 e3 2a 	lds	r22, 0x2AE3
    4a38:	62 30       	cpi	r22, 0x02	; 2
    4a3a:	20 f0       	brcs	.+8      	; 0x4a44 <display_draw_and_decrement_day+0x10>
		rtc_update_display(5,--env.time.day);
    4a3c:	61 50       	subi	r22, 0x01	; 1
    4a3e:	60 93 e3 2a 	sts	0x2AE3, r22
    4a42:	0b c0       	rjmp	.+22     	; 0x4a5a <display_draw_and_decrement_day+0x26>
	} else {
		env.time.day = time_get_days_in_month(env.time.month,env.time.year);
    4a44:	60 91 e7 2a 	lds	r22, 0x2AE7
    4a48:	70 91 e8 2a 	lds	r23, 0x2AE8
    4a4c:	80 91 e6 2a 	lds	r24, 0x2AE6
    4a50:	0e 94 bb 4c 	call	0x9976	; 0x9976 <time_get_days_in_month>
    4a54:	80 93 e3 2a 	sts	0x2AE3, r24
		rtc_update_display(5,env.time.day);
    4a58:	68 2f       	mov	r22, r24
    4a5a:	85 e0       	ldi	r24, 0x05	; 5
    4a5c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4a60:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

00004a64 <display_draw_and_increment_month>:
	display_refresh_screen();
}

void display_draw_and_increment_month(void) 
{
	if (env.time.month < December) {
    4a64:	80 91 e6 2a 	lds	r24, 0x2AE6
    4a68:	8c 30       	cpi	r24, 0x0C	; 12
    4a6a:	10 f4       	brcc	.+4      	; 0x4a70 <display_draw_and_increment_month+0xc>
		display_draw_three_letter_word(time_get_month_name(++env.time.month));
    4a6c:	8f 5f       	subi	r24, 0xFF	; 255
    4a6e:	01 c0       	rjmp	.+2      	; 0x4a72 <display_draw_and_increment_month+0xe>
	} else {
		env.time.month = January;
    4a70:	81 e0       	ldi	r24, 0x01	; 1
    4a72:	80 93 e6 2a 	sts	0x2AE6, r24
		display_draw_three_letter_word(time_get_month_name(January));
    4a76:	0e 94 5f 4c 	call	0x98be	; 0x98be <time_get_month_name>
    4a7a:	6d de       	rcall	.-806    	; 0x4756 <display_draw_three_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4a7c:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

00004a80 <display_draw_and_decrement_month>:
	display_refresh_screen();
}

void display_draw_and_decrement_month(void) 
{
	if (env.time.month > January) {
    4a80:	80 91 e6 2a 	lds	r24, 0x2AE6
    4a84:	82 30       	cpi	r24, 0x02	; 2
    4a86:	10 f0       	brcs	.+4      	; 0x4a8c <display_draw_and_decrement_month+0xc>
		display_draw_three_letter_word(time_get_month_name(--env.time.month));
    4a88:	81 50       	subi	r24, 0x01	; 1
    4a8a:	01 c0       	rjmp	.+2      	; 0x4a8e <display_draw_and_decrement_month+0xe>
	} else {
		env.time.month = December;
    4a8c:	8c e0       	ldi	r24, 0x0C	; 12
    4a8e:	80 93 e6 2a 	sts	0x2AE6, r24
		display_draw_three_letter_word(time_get_month_name(December));
    4a92:	0e 94 5f 4c 	call	0x98be	; 0x98be <time_get_month_name>
    4a96:	5f de       	rcall	.-834    	; 0x4756 <display_draw_three_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4a98:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

00004a9c <display_draw_and_increment_year>:
}

void display_draw_and_increment_year(void) 
{
	char *year = NULL;
	itoa_simple(year,++env.time.year);
    4a9c:	e7 ee       	ldi	r30, 0xE7	; 231
    4a9e:	fa e2       	ldi	r31, 0x2A	; 42
    4aa0:	60 81       	ld	r22, Z
    4aa2:	71 81       	ldd	r23, Z+1	; 0x01
    4aa4:	6f 5f       	subi	r22, 0xFF	; 255
    4aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    4aa8:	60 83       	st	Z, r22
    4aaa:	71 83       	std	Z+1, r23	; 0x01
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	10 da       	rcall	.-3040   	; 0x3ed2 <itoa_simple.constprop.1>
	display_draw_four_letter_word(year);
    4ab2:	80 e0       	ldi	r24, 0x00	; 0
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	26 de       	rcall	.-948    	; 0x4704 <display_draw_four_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4ab8:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

00004abc <display_draw_and_decrement_year>:
}

void display_draw_and_decrement_year(void) 
{
	char *year = NULL;
	itoa_simple(year,--env.time.year);
    4abc:	e7 ee       	ldi	r30, 0xE7	; 231
    4abe:	fa e2       	ldi	r31, 0x2A	; 42
    4ac0:	60 81       	ld	r22, Z
    4ac2:	71 81       	ldd	r23, Z+1	; 0x01
    4ac4:	61 50       	subi	r22, 0x01	; 1
    4ac6:	71 09       	sbc	r23, r1
    4ac8:	60 83       	st	Z, r22
    4aca:	71 83       	std	Z+1, r23	; 0x01
    4acc:	80 e0       	ldi	r24, 0x00	; 0
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	00 da       	rcall	.-3072   	; 0x3ed2 <itoa_simple.constprop.1>
	display_draw_four_letter_word(year);
    4ad2:	80 e0       	ldi	r24, 0x00	; 0
    4ad4:	90 e0       	ldi	r25, 0x00	; 0
    4ad6:	16 de       	rcall	.-980    	; 0x4704 <display_draw_four_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4ad8:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <ht1632c_refresh_screen>

00004adc <mem_cpy>:
		*tp = 0;
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    4adc:	cf 93       	push	r28
    4ade:	df 93       	push	r29
    4ae0:	db 01       	movw	r26, r22
    4ae2:	fc 01       	movw	r30, r24
    4ae4:	9a 01       	movw	r18, r20
    4ae6:	22 30       	cpi	r18, 0x02	; 2
    4ae8:	31 05       	cpc	r19, r1
    4aea:	38 f0       	brcs	.+14     	; 0x4afa <mem_cpy+0x1e>
    4aec:	cd 91       	ld	r28, X+
    4aee:	dd 91       	ld	r29, X+
    4af0:	c1 93       	st	Z+, r28
    4af2:	d1 93       	st	Z+, r29
    4af4:	22 50       	subi	r18, 0x02	; 2
    4af6:	31 09       	sbc	r19, r1
    4af8:	f6 cf       	rjmp	.-20     	; 0x4ae6 <mem_cpy+0xa>
    4afa:	da 01       	movw	r26, r20
    4afc:	ae 7f       	andi	r26, 0xFE	; 254
    4afe:	fb 01       	movw	r30, r22
    4b00:	ea 0f       	add	r30, r26
    4b02:	fb 1f       	adc	r31, r27
    4b04:	a8 0f       	add	r26, r24
    4b06:	b9 1f       	adc	r27, r25
    4b08:	41 70       	andi	r20, 0x01	; 1
    4b0a:	55 27       	eor	r21, r21
    4b0c:	4e 0f       	add	r20, r30
    4b0e:	5f 1f       	adc	r21, r31
    4b10:	e4 17       	cp	r30, r20
    4b12:	f5 07       	cpc	r31, r21
    4b14:	19 f0       	breq	.+6      	; 0x4b1c <mem_cpy+0x40>
    4b16:	81 91       	ld	r24, Z+
    4b18:	8d 93       	st	X+, r24
    4b1a:	fa cf       	rjmp	.-12     	; 0x4b10 <mem_cpy+0x34>
    4b1c:	df 91       	pop	r29
    4b1e:	cf 91       	pop	r28
    4b20:	08 95       	ret

00004b22 <mem_set>:
    4b22:	48 0f       	add	r20, r24
    4b24:	59 1f       	adc	r21, r25
    4b26:	84 17       	cp	r24, r20
    4b28:	95 07       	cpc	r25, r21
    4b2a:	21 f0       	breq	.+8      	; 0x4b34 <mem_set+0x12>
    4b2c:	fc 01       	movw	r30, r24
    4b2e:	61 93       	st	Z+, r22
    4b30:	cf 01       	movw	r24, r30
    4b32:	f9 cf       	rjmp	.-14     	; 0x4b26 <mem_set+0x4>
    4b34:	08 95       	ret

00004b36 <get_ldnumber>:
    4b36:	dc 01       	movw	r26, r24
    4b38:	2d 91       	ld	r18, X+
    4b3a:	3c 91       	ld	r19, X
    4b3c:	11 97       	sbiw	r26, 0x01	; 1
    4b3e:	21 15       	cp	r18, r1
    4b40:	31 05       	cpc	r19, r1
    4b42:	b9 f0       	breq	.+46     	; 0x4b72 <get_ldnumber+0x3c>
    4b44:	f9 01       	movw	r30, r18
    4b46:	af 01       	movw	r20, r30
    4b48:	81 91       	ld	r24, Z+
    4b4a:	81 32       	cpi	r24, 0x21	; 33
    4b4c:	a8 f0       	brcs	.+42     	; 0x4b78 <get_ldnumber+0x42>
    4b4e:	8a 33       	cpi	r24, 0x3A	; 58
    4b50:	d1 f7       	brne	.-12     	; 0x4b46 <get_ldnumber+0x10>
    4b52:	f9 01       	movw	r30, r18
    4b54:	81 91       	ld	r24, Z+
    4b56:	4e 17       	cp	r20, r30
    4b58:	5f 07       	cpc	r21, r31
    4b5a:	59 f4       	brne	.+22     	; 0x4b72 <get_ldnumber+0x3c>
    4b5c:	90 ed       	ldi	r25, 0xD0	; 208
    4b5e:	98 0f       	add	r25, r24
    4b60:	92 30       	cpi	r25, 0x02	; 2
    4b62:	38 f4       	brcc	.+14     	; 0x4b72 <get_ldnumber+0x3c>
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	c0 97       	sbiw	r24, 0x30	; 48
    4b68:	2e 5f       	subi	r18, 0xFE	; 254
    4b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b6c:	2d 93       	st	X+, r18
    4b6e:	3c 93       	st	X, r19
    4b70:	08 95       	ret
    4b72:	8f ef       	ldi	r24, 0xFF	; 255
    4b74:	9f ef       	ldi	r25, 0xFF	; 255
    4b76:	08 95       	ret
    4b78:	80 91 b4 2a 	lds	r24, 0x2AB4
    4b7c:	90 e0       	ldi	r25, 0x00	; 0
    4b7e:	08 95       	ret

00004b80 <validate>:
    4b80:	00 97       	sbiw	r24, 0x00	; 0
    4b82:	c9 f0       	breq	.+50     	; 0x4bb6 <validate+0x36>
    4b84:	dc 01       	movw	r26, r24
    4b86:	ed 91       	ld	r30, X+
    4b88:	fc 91       	ld	r31, X
    4b8a:	11 97       	sbiw	r26, 0x01	; 1
    4b8c:	30 97       	sbiw	r30, 0x00	; 0
    4b8e:	99 f0       	breq	.+38     	; 0x4bb6 <validate+0x36>
    4b90:	20 81       	ld	r18, Z
    4b92:	22 23       	and	r18, r18
    4b94:	81 f0       	breq	.+32     	; 0x4bb6 <validate+0x36>
    4b96:	26 81       	ldd	r18, Z+6	; 0x06
    4b98:	37 81       	ldd	r19, Z+7	; 0x07
    4b9a:	12 96       	adiw	r26, 0x02	; 2
    4b9c:	8d 91       	ld	r24, X+
    4b9e:	9c 91       	ld	r25, X
    4ba0:	13 97       	sbiw	r26, 0x03	; 3
    4ba2:	28 17       	cp	r18, r24
    4ba4:	39 07       	cpc	r19, r25
    4ba6:	39 f4       	brne	.+14     	; 0x4bb6 <validate+0x36>
    4ba8:	81 81       	ldd	r24, Z+1	; 0x01
    4baa:	0e 94 19 38 	call	0x7032	; 0x7032 <disk_status>
    4bae:	80 fd       	sbrc	r24, 0
    4bb0:	02 c0       	rjmp	.+4      	; 0x4bb6 <validate+0x36>
    4bb2:	80 e0       	ldi	r24, 0x00	; 0
    4bb4:	08 95       	ret
    4bb6:	89 e0       	ldi	r24, 0x09	; 9
    4bb8:	08 95       	ret

00004bba <sync_window>:
    4bba:	4f 92       	push	r4
    4bbc:	5f 92       	push	r5
    4bbe:	6f 92       	push	r6
    4bc0:	7f 92       	push	r7
    4bc2:	af 92       	push	r10
    4bc4:	bf 92       	push	r11
    4bc6:	cf 92       	push	r12
    4bc8:	df 92       	push	r13
    4bca:	ef 92       	push	r14
    4bcc:	ff 92       	push	r15
    4bce:	0f 93       	push	r16
    4bd0:	1f 93       	push	r17
    4bd2:	cf 93       	push	r28
    4bd4:	df 93       	push	r29
    4bd6:	ec 01       	movw	r28, r24
    4bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    4bda:	88 23       	and	r24, r24
    4bdc:	09 f4       	brne	.+2      	; 0x4be0 <sync_window+0x26>
    4bde:	45 c0       	rjmp	.+138    	; 0x4c6a <sync_window+0xb0>
    4be0:	4e a4       	ldd	r4, Y+46	; 0x2e
    4be2:	5f a4       	ldd	r5, Y+47	; 0x2f
    4be4:	68 a8       	ldd	r6, Y+48	; 0x30
    4be6:	79 a8       	ldd	r7, Y+49	; 0x31
    4be8:	6e 01       	movw	r12, r28
    4bea:	82 e3       	ldi	r24, 0x32	; 50
    4bec:	c8 0e       	add	r12, r24
    4bee:	d1 1c       	adc	r13, r1
    4bf0:	01 e0       	ldi	r16, 0x01	; 1
    4bf2:	10 e0       	ldi	r17, 0x00	; 0
    4bf4:	a3 01       	movw	r20, r6
    4bf6:	92 01       	movw	r18, r4
    4bf8:	b6 01       	movw	r22, r12
    4bfa:	89 81       	ldd	r24, Y+1	; 0x01
    4bfc:	0e 94 6b 38 	call	0x70d6	; 0x70d6 <disk_write>
    4c00:	81 11       	cpse	r24, r1
    4c02:	31 c0       	rjmp	.+98     	; 0x4c66 <sync_window+0xac>
    4c04:	1c 82       	std	Y+4, r1	; 0x04
    4c06:	8a a1       	ldd	r24, Y+34	; 0x22
    4c08:	9b a1       	ldd	r25, Y+35	; 0x23
    4c0a:	ac a1       	ldd	r26, Y+36	; 0x24
    4c0c:	bd a1       	ldd	r27, Y+37	; 0x25
    4c0e:	b3 01       	movw	r22, r6
    4c10:	a2 01       	movw	r20, r4
    4c12:	48 1b       	sub	r20, r24
    4c14:	59 0b       	sbc	r21, r25
    4c16:	6a 0b       	sbc	r22, r26
    4c18:	7b 0b       	sbc	r23, r27
    4c1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4c1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4c1e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4c20:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4c22:	48 17       	cp	r20, r24
    4c24:	59 07       	cpc	r21, r25
    4c26:	6a 07       	cpc	r22, r26
    4c28:	7b 07       	cpc	r23, r27
    4c2a:	f8 f4       	brcc	.+62     	; 0x4c6a <sync_window+0xb0>
    4c2c:	ab 80       	ldd	r10, Y+3	; 0x03
    4c2e:	b1 2c       	mov	r11, r1
    4c30:	e1 2c       	mov	r14, r1
    4c32:	f1 2c       	mov	r15, r1
    4c34:	c5 01       	movw	r24, r10
    4c36:	8e 19       	sub	r24, r14
    4c38:	9f 09       	sbc	r25, r15
    4c3a:	02 97       	sbiw	r24, 0x02	; 2
    4c3c:	b0 f0       	brcs	.+44     	; 0x4c6a <sync_window+0xb0>
    4c3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4c40:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4c42:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4c44:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4c46:	48 0e       	add	r4, r24
    4c48:	59 1e       	adc	r5, r25
    4c4a:	6a 1e       	adc	r6, r26
    4c4c:	7b 1e       	adc	r7, r27
    4c4e:	01 e0       	ldi	r16, 0x01	; 1
    4c50:	10 e0       	ldi	r17, 0x00	; 0
    4c52:	a3 01       	movw	r20, r6
    4c54:	92 01       	movw	r18, r4
    4c56:	b6 01       	movw	r22, r12
    4c58:	89 81       	ldd	r24, Y+1	; 0x01
    4c5a:	0e 94 6b 38 	call	0x70d6	; 0x70d6 <disk_write>
    4c5e:	8f ef       	ldi	r24, 0xFF	; 255
    4c60:	e8 1a       	sub	r14, r24
    4c62:	f8 0a       	sbc	r15, r24
    4c64:	e7 cf       	rjmp	.-50     	; 0x4c34 <sync_window+0x7a>
    4c66:	81 e0       	ldi	r24, 0x01	; 1
    4c68:	01 c0       	rjmp	.+2      	; 0x4c6c <sync_window+0xb2>
    4c6a:	80 e0       	ldi	r24, 0x00	; 0
    4c6c:	df 91       	pop	r29
    4c6e:	cf 91       	pop	r28
    4c70:	1f 91       	pop	r17
    4c72:	0f 91       	pop	r16
    4c74:	ff 90       	pop	r15
    4c76:	ef 90       	pop	r14
    4c78:	df 90       	pop	r13
    4c7a:	cf 90       	pop	r12
    4c7c:	bf 90       	pop	r11
    4c7e:	af 90       	pop	r10
    4c80:	7f 90       	pop	r7
    4c82:	6f 90       	pop	r6
    4c84:	5f 90       	pop	r5
    4c86:	4f 90       	pop	r4
    4c88:	08 95       	ret

00004c8a <sync_fs>:
    4c8a:	ef 92       	push	r14
    4c8c:	ff 92       	push	r15
    4c8e:	0f 93       	push	r16
    4c90:	1f 93       	push	r17
    4c92:	cf 93       	push	r28
    4c94:	df 93       	push	r29
    4c96:	ec 01       	movw	r28, r24
    4c98:	90 df       	rcall	.-224    	; 0x4bba <sync_window>
    4c9a:	98 2f       	mov	r25, r24
    4c9c:	81 11       	cpse	r24, r1
    4c9e:	59 c0       	rjmp	.+178    	; 0x4d52 <sync_fs+0xc8>
    4ca0:	88 81       	ld	r24, Y
    4ca2:	83 30       	cpi	r24, 0x03	; 3
    4ca4:	09 f0       	breq	.+2      	; 0x4ca8 <sync_fs+0x1e>
    4ca6:	4b c0       	rjmp	.+150    	; 0x4d3e <sync_fs+0xb4>
    4ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    4caa:	81 30       	cpi	r24, 0x01	; 1
    4cac:	09 f0       	breq	.+2      	; 0x4cb0 <sync_fs+0x26>
    4cae:	47 c0       	rjmp	.+142    	; 0x4d3e <sync_fs+0xb4>
    4cb0:	40 e0       	ldi	r20, 0x00	; 0
    4cb2:	52 e0       	ldi	r21, 0x02	; 2
    4cb4:	60 e0       	ldi	r22, 0x00	; 0
    4cb6:	70 e0       	ldi	r23, 0x00	; 0
    4cb8:	7e 01       	movw	r14, r28
    4cba:	82 e3       	ldi	r24, 0x32	; 50
    4cbc:	e8 0e       	add	r14, r24
    4cbe:	f1 1c       	adc	r15, r1
    4cc0:	c7 01       	movw	r24, r14
    4cc2:	2f df       	rcall	.-418    	; 0x4b22 <mem_set>
    4cc4:	85 e5       	ldi	r24, 0x55	; 85
    4cc6:	9a ea       	ldi	r25, 0xAA	; 170
    4cc8:	fe 01       	movw	r30, r28
    4cca:	e0 5d       	subi	r30, 0xD0	; 208
    4ccc:	fd 4f       	sbci	r31, 0xFD	; 253
    4cce:	80 83       	st	Z, r24
    4cd0:	91 83       	std	Z+1, r25	; 0x01
    4cd2:	82 e5       	ldi	r24, 0x52	; 82
    4cd4:	92 e5       	ldi	r25, 0x52	; 82
    4cd6:	a1 e6       	ldi	r26, 0x61	; 97
    4cd8:	b1 e4       	ldi	r27, 0x41	; 65
    4cda:	8a ab       	std	Y+50, r24	; 0x32
    4cdc:	9b ab       	std	Y+51, r25	; 0x33
    4cde:	ac ab       	std	Y+52, r26	; 0x34
    4ce0:	bd ab       	std	Y+53, r27	; 0x35
    4ce2:	82 e7       	ldi	r24, 0x72	; 114
    4ce4:	92 e7       	ldi	r25, 0x72	; 114
    4ce6:	a1 e4       	ldi	r26, 0x41	; 65
    4ce8:	b1 e6       	ldi	r27, 0x61	; 97
    4cea:	7a 97       	sbiw	r30, 0x1a	; 26
    4cec:	80 83       	st	Z, r24
    4cee:	91 83       	std	Z+1, r25	; 0x01
    4cf0:	a2 83       	std	Z+2, r26	; 0x02
    4cf2:	b3 83       	std	Z+3, r27	; 0x03
    4cf4:	8e 85       	ldd	r24, Y+14	; 0x0e
    4cf6:	9f 85       	ldd	r25, Y+15	; 0x0f
    4cf8:	a8 89       	ldd	r26, Y+16	; 0x10
    4cfa:	b9 89       	ldd	r27, Y+17	; 0x11
    4cfc:	34 96       	adiw	r30, 0x04	; 4
    4cfe:	80 83       	st	Z, r24
    4d00:	91 83       	std	Z+1, r25	; 0x01
    4d02:	a2 83       	std	Z+2, r26	; 0x02
    4d04:	b3 83       	std	Z+3, r27	; 0x03
    4d06:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d08:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d0a:	ac 85       	ldd	r26, Y+12	; 0x0c
    4d0c:	bd 85       	ldd	r27, Y+13	; 0x0d
    4d0e:	34 96       	adiw	r30, 0x04	; 4
    4d10:	80 83       	st	Z, r24
    4d12:	91 83       	std	Z+1, r25	; 0x01
    4d14:	a2 83       	std	Z+2, r26	; 0x02
    4d16:	b3 83       	std	Z+3, r27	; 0x03
    4d18:	2e 8d       	ldd	r18, Y+30	; 0x1e
    4d1a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4d1c:	48 a1       	ldd	r20, Y+32	; 0x20
    4d1e:	59 a1       	ldd	r21, Y+33	; 0x21
    4d20:	2f 5f       	subi	r18, 0xFF	; 255
    4d22:	3f 4f       	sbci	r19, 0xFF	; 255
    4d24:	4f 4f       	sbci	r20, 0xFF	; 255
    4d26:	5f 4f       	sbci	r21, 0xFF	; 255
    4d28:	2e a7       	std	Y+46, r18	; 0x2e
    4d2a:	3f a7       	std	Y+47, r19	; 0x2f
    4d2c:	48 ab       	std	Y+48, r20	; 0x30
    4d2e:	59 ab       	std	Y+49, r21	; 0x31
    4d30:	01 e0       	ldi	r16, 0x01	; 1
    4d32:	10 e0       	ldi	r17, 0x00	; 0
    4d34:	b7 01       	movw	r22, r14
    4d36:	89 81       	ldd	r24, Y+1	; 0x01
    4d38:	0e 94 6b 38 	call	0x70d6	; 0x70d6 <disk_write>
    4d3c:	1d 82       	std	Y+5, r1	; 0x05
    4d3e:	40 e0       	ldi	r20, 0x00	; 0
    4d40:	50 e0       	ldi	r21, 0x00	; 0
    4d42:	60 e0       	ldi	r22, 0x00	; 0
    4d44:	89 81       	ldd	r24, Y+1	; 0x01
    4d46:	0e 94 df 38 	call	0x71be	; 0x71be <disk_ioctl>
    4d4a:	91 e0       	ldi	r25, 0x01	; 1
    4d4c:	81 11       	cpse	r24, r1
    4d4e:	01 c0       	rjmp	.+2      	; 0x4d52 <sync_fs+0xc8>
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	89 2f       	mov	r24, r25
    4d54:	df 91       	pop	r29
    4d56:	cf 91       	pop	r28
    4d58:	1f 91       	pop	r17
    4d5a:	0f 91       	pop	r16
    4d5c:	ff 90       	pop	r15
    4d5e:	ef 90       	pop	r14
    4d60:	08 95       	ret

00004d62 <move_window>:
    4d62:	bf 92       	push	r11
    4d64:	cf 92       	push	r12
    4d66:	df 92       	push	r13
    4d68:	ef 92       	push	r14
    4d6a:	ff 92       	push	r15
    4d6c:	0f 93       	push	r16
    4d6e:	1f 93       	push	r17
    4d70:	cf 93       	push	r28
    4d72:	df 93       	push	r29
    4d74:	ec 01       	movw	r28, r24
    4d76:	6a 01       	movw	r12, r20
    4d78:	7b 01       	movw	r14, r22
    4d7a:	8e a5       	ldd	r24, Y+46	; 0x2e
    4d7c:	9f a5       	ldd	r25, Y+47	; 0x2f
    4d7e:	a8 a9       	ldd	r26, Y+48	; 0x30
    4d80:	b9 a9       	ldd	r27, Y+49	; 0x31
    4d82:	48 17       	cp	r20, r24
    4d84:	59 07       	cpc	r21, r25
    4d86:	6a 07       	cpc	r22, r26
    4d88:	7b 07       	cpc	r23, r27
    4d8a:	e1 f0       	breq	.+56     	; 0x4dc4 <move_window+0x62>
    4d8c:	ce 01       	movw	r24, r28
    4d8e:	15 df       	rcall	.-470    	; 0x4bba <sync_window>
    4d90:	b8 2e       	mov	r11, r24
    4d92:	81 11       	cpse	r24, r1
    4d94:	18 c0       	rjmp	.+48     	; 0x4dc6 <move_window+0x64>
    4d96:	01 e0       	ldi	r16, 0x01	; 1
    4d98:	10 e0       	ldi	r17, 0x00	; 0
    4d9a:	a7 01       	movw	r20, r14
    4d9c:	96 01       	movw	r18, r12
    4d9e:	be 01       	movw	r22, r28
    4da0:	6e 5c       	subi	r22, 0xCE	; 206
    4da2:	7f 4f       	sbci	r23, 0xFF	; 255
    4da4:	89 81       	ldd	r24, Y+1	; 0x01
    4da6:	0e 94 20 38 	call	0x7040	; 0x7040 <disk_read>
    4daa:	88 23       	and	r24, r24
    4dac:	31 f0       	breq	.+12     	; 0x4dba <move_window+0x58>
    4dae:	bb 24       	eor	r11, r11
    4db0:	b3 94       	inc	r11
    4db2:	cc 24       	eor	r12, r12
    4db4:	ca 94       	dec	r12
    4db6:	dc 2c       	mov	r13, r12
    4db8:	76 01       	movw	r14, r12
    4dba:	ce a6       	std	Y+46, r12	; 0x2e
    4dbc:	df a6       	std	Y+47, r13	; 0x2f
    4dbe:	e8 aa       	std	Y+48, r14	; 0x30
    4dc0:	f9 aa       	std	Y+49, r15	; 0x31
    4dc2:	01 c0       	rjmp	.+2      	; 0x4dc6 <move_window+0x64>
    4dc4:	b1 2c       	mov	r11, r1
    4dc6:	8b 2d       	mov	r24, r11
    4dc8:	df 91       	pop	r29
    4dca:	cf 91       	pop	r28
    4dcc:	1f 91       	pop	r17
    4dce:	0f 91       	pop	r16
    4dd0:	ff 90       	pop	r15
    4dd2:	ef 90       	pop	r14
    4dd4:	df 90       	pop	r13
    4dd6:	cf 90       	pop	r12
    4dd8:	bf 90       	pop	r11
    4dda:	08 95       	ret

00004ddc <check_fs>:
    4ddc:	0f 93       	push	r16
    4dde:	1f 93       	push	r17
    4de0:	cf 93       	push	r28
    4de2:	df 93       	push	r29
    4de4:	ec 01       	movw	r28, r24
    4de6:	1c 82       	std	Y+4, r1	; 0x04
    4de8:	0f ef       	ldi	r16, 0xFF	; 255
    4dea:	1f ef       	ldi	r17, 0xFF	; 255
    4dec:	98 01       	movw	r18, r16
    4dee:	0e a7       	std	Y+46, r16	; 0x2e
    4df0:	1f a7       	std	Y+47, r17	; 0x2f
    4df2:	28 ab       	std	Y+48, r18	; 0x30
    4df4:	39 ab       	std	Y+49, r19	; 0x31
    4df6:	b5 df       	rcall	.-150    	; 0x4d62 <move_window>
    4df8:	81 11       	cpse	r24, r1
    4dfa:	22 c0       	rjmp	.+68     	; 0x4e40 <check_fs+0x64>
    4dfc:	fe 01       	movw	r30, r28
    4dfe:	e0 5d       	subi	r30, 0xD0	; 208
    4e00:	fd 4f       	sbci	r31, 0xFD	; 253
    4e02:	80 81       	ld	r24, Z
    4e04:	91 81       	ldd	r25, Z+1	; 0x01
    4e06:	85 35       	cpi	r24, 0x55	; 85
    4e08:	9a 4a       	sbci	r25, 0xAA	; 170
    4e0a:	e1 f4       	brne	.+56     	; 0x4e44 <check_fs+0x68>
    4e0c:	e8 5c       	subi	r30, 0xC8	; 200
    4e0e:	f1 40       	sbci	r31, 0x01	; 1
    4e10:	40 81       	ld	r20, Z
    4e12:	51 81       	ldd	r21, Z+1	; 0x01
    4e14:	62 81       	ldd	r22, Z+2	; 0x02
    4e16:	73 81       	ldd	r23, Z+3	; 0x03
    4e18:	77 27       	eor	r23, r23
    4e1a:	46 34       	cpi	r20, 0x46	; 70
    4e1c:	51 44       	sbci	r21, 0x41	; 65
    4e1e:	64 45       	sbci	r22, 0x54	; 84
    4e20:	71 05       	cpc	r23, r1
    4e22:	91 f0       	breq	.+36     	; 0x4e48 <check_fs+0x6c>
    4e24:	cc 57       	subi	r28, 0x7C	; 124
    4e26:	df 4f       	sbci	r29, 0xFF	; 255
    4e28:	48 81       	ld	r20, Y
    4e2a:	59 81       	ldd	r21, Y+1	; 0x01
    4e2c:	6a 81       	ldd	r22, Y+2	; 0x02
    4e2e:	7b 81       	ldd	r23, Y+3	; 0x03
    4e30:	77 27       	eor	r23, r23
    4e32:	81 e0       	ldi	r24, 0x01	; 1
    4e34:	46 34       	cpi	r20, 0x46	; 70
    4e36:	51 44       	sbci	r21, 0x41	; 65
    4e38:	64 45       	sbci	r22, 0x54	; 84
    4e3a:	71 05       	cpc	r23, r1
    4e3c:	31 f4       	brne	.+12     	; 0x4e4a <check_fs+0x6e>
    4e3e:	04 c0       	rjmp	.+8      	; 0x4e48 <check_fs+0x6c>
    4e40:	83 e0       	ldi	r24, 0x03	; 3
    4e42:	03 c0       	rjmp	.+6      	; 0x4e4a <check_fs+0x6e>
    4e44:	82 e0       	ldi	r24, 0x02	; 2
    4e46:	01 c0       	rjmp	.+2      	; 0x4e4a <check_fs+0x6e>
    4e48:	80 e0       	ldi	r24, 0x00	; 0
    4e4a:	df 91       	pop	r29
    4e4c:	cf 91       	pop	r28
    4e4e:	1f 91       	pop	r17
    4e50:	0f 91       	pop	r16
    4e52:	08 95       	ret

00004e54 <find_volume>:
    4e54:	2f 92       	push	r2
    4e56:	3f 92       	push	r3
    4e58:	4f 92       	push	r4
    4e5a:	5f 92       	push	r5
    4e5c:	6f 92       	push	r6
    4e5e:	7f 92       	push	r7
    4e60:	8f 92       	push	r8
    4e62:	9f 92       	push	r9
    4e64:	af 92       	push	r10
    4e66:	bf 92       	push	r11
    4e68:	cf 92       	push	r12
    4e6a:	df 92       	push	r13
    4e6c:	ef 92       	push	r14
    4e6e:	ff 92       	push	r15
    4e70:	0f 93       	push	r16
    4e72:	1f 93       	push	r17
    4e74:	cf 93       	push	r28
    4e76:	df 93       	push	r29
    4e78:	cd b7       	in	r28, 0x3d	; 61
    4e7a:	de b7       	in	r29, 0x3e	; 62
    4e7c:	6d 97       	sbiw	r28, 0x1d	; 29
    4e7e:	cd bf       	out	0x3d, r28	; 61
    4e80:	de bf       	out	0x3e, r29	; 62
    4e82:	6c 01       	movw	r12, r24
    4e84:	cb 01       	movw	r24, r22
    4e86:	b4 2e       	mov	r11, r20
    4e88:	d6 01       	movw	r26, r12
    4e8a:	1d 92       	st	X+, r1
    4e8c:	1c 92       	st	X, r1
    4e8e:	53 de       	rcall	.-858    	; 0x4b36 <get_ldnumber>
    4e90:	7c 01       	movw	r14, r24
    4e92:	97 fd       	sbrc	r25, 7
    4e94:	23 c2       	rjmp	.+1094   	; 0x52dc <find_volume+0x488>
    4e96:	fc 01       	movw	r30, r24
    4e98:	ee 0f       	add	r30, r30
    4e9a:	ff 1f       	adc	r31, r31
    4e9c:	e9 54       	subi	r30, 0x49	; 73
    4e9e:	f5 4d       	sbci	r31, 0xD5	; 213
    4ea0:	00 81       	ld	r16, Z
    4ea2:	11 81       	ldd	r17, Z+1	; 0x01
    4ea4:	01 15       	cp	r16, r1
    4ea6:	11 05       	cpc	r17, r1
    4ea8:	09 f4       	brne	.+2      	; 0x4eac <find_volume+0x58>
    4eaa:	1a c2       	rjmp	.+1076   	; 0x52e0 <find_volume+0x48c>
    4eac:	f6 01       	movw	r30, r12
    4eae:	00 83       	st	Z, r16
    4eb0:	11 83       	std	Z+1, r17	; 0x01
    4eb2:	d8 01       	movw	r26, r16
    4eb4:	8c 91       	ld	r24, X
    4eb6:	88 23       	and	r24, r24
    4eb8:	61 f0       	breq	.+24     	; 0x4ed2 <find_volume+0x7e>
    4eba:	11 96       	adiw	r26, 0x01	; 1
    4ebc:	8c 91       	ld	r24, X
    4ebe:	0e 94 19 38 	call	0x7032	; 0x7032 <disk_status>
    4ec2:	80 fd       	sbrc	r24, 0
    4ec4:	06 c0       	rjmp	.+12     	; 0x4ed2 <find_volume+0x7e>
    4ec6:	bb 20       	and	r11, r11
    4ec8:	09 f4       	brne	.+2      	; 0x4ecc <find_volume+0x78>
    4eca:	0c c2       	rjmp	.+1048   	; 0x52e4 <find_volume+0x490>
    4ecc:	82 fd       	sbrc	r24, 2
    4ece:	0e c2       	rjmp	.+1052   	; 0x52ec <find_volume+0x498>
    4ed0:	09 c2       	rjmp	.+1042   	; 0x52e4 <find_volume+0x490>
    4ed2:	f8 01       	movw	r30, r16
    4ed4:	10 82       	st	Z, r1
    4ed6:	e1 82       	std	Z+1, r14	; 0x01
    4ed8:	8e 2d       	mov	r24, r14
    4eda:	0e 94 33 37 	call	0x6e66	; 0x6e66 <disk_initialize>
    4ede:	80 fd       	sbrc	r24, 0
    4ee0:	03 c2       	rjmp	.+1030   	; 0x52e8 <find_volume+0x494>
    4ee2:	bb 20       	and	r11, r11
    4ee4:	11 f0       	breq	.+4      	; 0x4eea <find_volume+0x96>
    4ee6:	82 fd       	sbrc	r24, 2
    4ee8:	01 c2       	rjmp	.+1026   	; 0x52ec <find_volume+0x498>
    4eea:	40 e0       	ldi	r20, 0x00	; 0
    4eec:	50 e0       	ldi	r21, 0x00	; 0
    4eee:	ba 01       	movw	r22, r20
    4ef0:	c8 01       	movw	r24, r16
    4ef2:	74 df       	rcall	.-280    	; 0x4ddc <check_fs>
    4ef4:	81 30       	cpi	r24, 0x01	; 1
    4ef6:	09 f0       	breq	.+2      	; 0x4efa <find_volume+0xa6>
    4ef8:	3f c0       	rjmp	.+126    	; 0x4f78 <find_volume+0x124>
    4efa:	fe 01       	movw	r30, r28
    4efc:	31 96       	adiw	r30, 0x01	; 1
    4efe:	20 e0       	ldi	r18, 0x00	; 0
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	c8 01       	movw	r24, r16
    4f04:	82 0f       	add	r24, r18
    4f06:	93 1f       	adc	r25, r19
    4f08:	dc 01       	movw	r26, r24
    4f0a:	ac 50       	subi	r26, 0x0C	; 12
    4f0c:	be 4f       	sbci	r27, 0xFE	; 254
    4f0e:	4c 91       	ld	r20, X
    4f10:	44 23       	and	r20, r20
    4f12:	39 f0       	breq	.+14     	; 0x4f22 <find_volume+0xce>
    4f14:	14 96       	adiw	r26, 0x04	; 4
    4f16:	8d 91       	ld	r24, X+
    4f18:	9d 91       	ld	r25, X+
    4f1a:	0d 90       	ld	r0, X+
    4f1c:	bc 91       	ld	r27, X
    4f1e:	a0 2d       	mov	r26, r0
    4f20:	03 c0       	rjmp	.+6      	; 0x4f28 <find_volume+0xd4>
    4f22:	80 e0       	ldi	r24, 0x00	; 0
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	dc 01       	movw	r26, r24
    4f28:	81 93       	st	Z+, r24
    4f2a:	91 93       	st	Z+, r25
    4f2c:	a1 93       	st	Z+, r26
    4f2e:	b1 93       	st	Z+, r27
    4f30:	20 5f       	subi	r18, 0xF0	; 240
    4f32:	3f 4f       	sbci	r19, 0xFF	; 255
    4f34:	20 34       	cpi	r18, 0x40	; 64
    4f36:	31 05       	cpc	r19, r1
    4f38:	21 f7       	brne	.-56     	; 0x4f02 <find_volume+0xae>
    4f3a:	6e 01       	movw	r12, r28
    4f3c:	f1 e1       	ldi	r31, 0x11	; 17
    4f3e:	cf 0e       	add	r12, r31
    4f40:	d1 1c       	adc	r13, r1
    4f42:	9e 01       	movw	r18, r28
    4f44:	2f 5f       	subi	r18, 0xFF	; 255
    4f46:	3f 4f       	sbci	r19, 0xFF	; 255
    4f48:	79 01       	movw	r14, r18
    4f4a:	d7 01       	movw	r26, r14
    4f4c:	4d 90       	ld	r4, X+
    4f4e:	5d 90       	ld	r5, X+
    4f50:	6d 90       	ld	r6, X+
    4f52:	7d 90       	ld	r7, X+
    4f54:	7d 01       	movw	r14, r26
    4f56:	41 14       	cp	r4, r1
    4f58:	51 04       	cpc	r5, r1
    4f5a:	61 04       	cpc	r6, r1
    4f5c:	71 04       	cpc	r7, r1
    4f5e:	39 f0       	breq	.+14     	; 0x4f6e <find_volume+0x11a>
    4f60:	b3 01       	movw	r22, r6
    4f62:	a2 01       	movw	r20, r4
    4f64:	c8 01       	movw	r24, r16
    4f66:	3a df       	rcall	.-396    	; 0x4ddc <check_fs>
    4f68:	81 11       	cpse	r24, r1
    4f6a:	02 c0       	rjmp	.+4      	; 0x4f70 <find_volume+0x11c>
    4f6c:	0f c0       	rjmp	.+30     	; 0x4f8c <find_volume+0x138>
    4f6e:	82 e0       	ldi	r24, 0x02	; 2
    4f70:	ec 14       	cp	r14, r12
    4f72:	fd 04       	cpc	r15, r13
    4f74:	51 f7       	brne	.-44     	; 0x4f4a <find_volume+0xf6>
    4f76:	03 c0       	rjmp	.+6      	; 0x4f7e <find_volume+0x12a>
    4f78:	41 2c       	mov	r4, r1
    4f7a:	51 2c       	mov	r5, r1
    4f7c:	32 01       	movw	r6, r4
    4f7e:	83 30       	cpi	r24, 0x03	; 3
    4f80:	09 f4       	brne	.+2      	; 0x4f84 <find_volume+0x130>
    4f82:	b6 c1       	rjmp	.+876    	; 0x52f0 <find_volume+0x49c>
    4f84:	88 23       	and	r24, r24
    4f86:	11 f0       	breq	.+4      	; 0x4f8c <find_volume+0x138>
    4f88:	8d e0       	ldi	r24, 0x0D	; 13
    4f8a:	b3 c1       	rjmp	.+870    	; 0x52f2 <find_volume+0x49e>
    4f8c:	f8 01       	movw	r30, r16
    4f8e:	85 ad       	ldd	r24, Z+61	; 0x3d
    4f90:	96 ad       	ldd	r25, Z+62	; 0x3e
    4f92:	81 15       	cp	r24, r1
    4f94:	92 40       	sbci	r25, 0x02	; 2
    4f96:	c1 f7       	brne	.-16     	; 0x4f88 <find_volume+0x134>
    4f98:	f8 01       	movw	r30, r16
    4f9a:	e8 5b       	subi	r30, 0xB8	; 184
    4f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9e:	c0 80       	ld	r12, Z
    4fa0:	d1 80       	ldd	r13, Z+1	; 0x01
    4fa2:	e1 2c       	mov	r14, r1
    4fa4:	f1 2c       	mov	r15, r1
    4fa6:	c1 14       	cp	r12, r1
    4fa8:	d1 04       	cpc	r13, r1
    4faa:	e1 04       	cpc	r14, r1
    4fac:	f1 04       	cpc	r15, r1
    4fae:	29 f4       	brne	.+10     	; 0x4fba <find_volume+0x166>
    4fb0:	3e 96       	adiw	r30, 0x0e	; 14
    4fb2:	c0 80       	ld	r12, Z
    4fb4:	d1 80       	ldd	r13, Z+1	; 0x01
    4fb6:	e2 80       	ldd	r14, Z+2	; 0x02
    4fb8:	f3 80       	ldd	r15, Z+3	; 0x03
    4fba:	d8 01       	movw	r26, r16
    4fbc:	5a 96       	adiw	r26, 0x1a	; 26
    4fbe:	cd 92       	st	X+, r12
    4fc0:	dd 92       	st	X+, r13
    4fc2:	ed 92       	st	X+, r14
    4fc4:	fc 92       	st	X, r15
    4fc6:	5d 97       	sbiw	r26, 0x1d	; 29
    4fc8:	f8 01       	movw	r30, r16
    4fca:	ee 5b       	subi	r30, 0xBE	; 190
    4fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    4fce:	a0 81       	ld	r26, Z
    4fd0:	f8 01       	movw	r30, r16
    4fd2:	a3 83       	std	Z+3, r26	; 0x03
    4fd4:	8f ef       	ldi	r24, 0xFF	; 255
    4fd6:	8a 0f       	add	r24, r26
    4fd8:	82 30       	cpi	r24, 0x02	; 2
    4fda:	b0 f6       	brcc	.-84     	; 0x4f88 <find_volume+0x134>
    4fdc:	f7 ad       	ldd	r31, Z+63	; 0x3f
    4fde:	f9 8b       	std	Y+17, r31	; 0x11
    4fe0:	2f 2f       	mov	r18, r31
    4fe2:	f8 01       	movw	r30, r16
    4fe4:	22 83       	std	Z+2, r18	; 0x02
    4fe6:	22 23       	and	r18, r18
    4fe8:	79 f2       	breq	.-98     	; 0x4f88 <find_volume+0x134>
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	c9 01       	movw	r24, r18
    4fee:	01 97       	sbiw	r24, 0x01	; 1
    4ff0:	82 23       	and	r24, r18
    4ff2:	93 23       	and	r25, r19
    4ff4:	89 2b       	or	r24, r25
    4ff6:	41 f6       	brne	.-112    	; 0x4f88 <find_volume+0x134>
    4ff8:	f8 01       	movw	r30, r16
    4ffa:	ed 5b       	subi	r30, 0xBD	; 189
    4ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffe:	20 80       	ld	r2, Z
    5000:	31 80       	ldd	r3, Z+1	; 0x01
    5002:	f8 01       	movw	r30, r16
    5004:	20 86       	std	Z+8, r2	; 0x08
    5006:	31 86       	std	Z+9, r3	; 0x09
    5008:	c1 01       	movw	r24, r2
    500a:	8f 70       	andi	r24, 0x0F	; 15
    500c:	99 27       	eor	r25, r25
    500e:	89 2b       	or	r24, r25
    5010:	09 f0       	breq	.+2      	; 0x5014 <find_volume+0x1c0>
    5012:	ba cf       	rjmp	.-140    	; 0x4f88 <find_volume+0x134>
    5014:	eb 5b       	subi	r30, 0xBB	; 187
    5016:	ff 4f       	sbci	r31, 0xFF	; 255
    5018:	80 80       	ld	r8, Z
    501a:	91 80       	ldd	r9, Z+1	; 0x01
    501c:	a1 2c       	mov	r10, r1
    501e:	b1 2c       	mov	r11, r1
    5020:	81 14       	cp	r8, r1
    5022:	91 04       	cpc	r9, r1
    5024:	a1 04       	cpc	r10, r1
    5026:	b1 04       	cpc	r11, r1
    5028:	29 f4       	brne	.+10     	; 0x5034 <find_volume+0x1e0>
    502a:	3d 96       	adiw	r30, 0x0d	; 13
    502c:	80 80       	ld	r8, Z
    502e:	91 80       	ldd	r9, Z+1	; 0x01
    5030:	a2 80       	ldd	r10, Z+2	; 0x02
    5032:	b3 80       	ldd	r11, Z+3	; 0x03
    5034:	f8 01       	movw	r30, r16
    5036:	e0 5c       	subi	r30, 0xC0	; 192
    5038:	ff 4f       	sbci	r31, 0xFF	; 255
    503a:	01 90       	ld	r0, Z+
    503c:	f0 81       	ld	r31, Z
    503e:	e0 2d       	mov	r30, r0
    5040:	30 97       	sbiw	r30, 0x00	; 0
    5042:	09 f4       	brne	.+2      	; 0x5046 <find_volume+0x1f2>
    5044:	a1 cf       	rjmp	.-190    	; 0x4f88 <find_volume+0x134>
    5046:	b0 e0       	ldi	r27, 0x00	; 0
    5048:	a7 01       	movw	r20, r14
    504a:	96 01       	movw	r18, r12
    504c:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <__muluhisi3>
    5050:	6e 8b       	std	Y+22, r22	; 0x16
    5052:	7f 8b       	std	Y+23, r23	; 0x17
    5054:	88 8f       	std	Y+24, r24	; 0x18
    5056:	99 8f       	std	Y+25, r25	; 0x19
    5058:	9f 01       	movw	r18, r30
    505a:	40 e0       	ldi	r20, 0x00	; 0
    505c:	50 e0       	ldi	r21, 0x00	; 0
    505e:	2a 8f       	std	Y+26, r18	; 0x1a
    5060:	3b 8f       	std	Y+27, r19	; 0x1b
    5062:	4c 8f       	std	Y+28, r20	; 0x1c
    5064:	5d 8f       	std	Y+29, r21	; 0x1d
    5066:	c1 01       	movw	r24, r2
    5068:	64 e0       	ldi	r22, 0x04	; 4
    506a:	96 95       	lsr	r25
    506c:	87 95       	ror	r24
    506e:	6a 95       	dec	r22
    5070:	e1 f7       	brne	.-8      	; 0x506a <find_volume+0x216>
    5072:	28 0f       	add	r18, r24
    5074:	39 1f       	adc	r19, r25
    5076:	41 1d       	adc	r20, r1
    5078:	51 1d       	adc	r21, r1
    507a:	8e 89       	ldd	r24, Y+22	; 0x16
    507c:	9f 89       	ldd	r25, Y+23	; 0x17
    507e:	a8 8d       	ldd	r26, Y+24	; 0x18
    5080:	b9 8d       	ldd	r27, Y+25	; 0x19
    5082:	28 0f       	add	r18, r24
    5084:	39 1f       	adc	r19, r25
    5086:	4a 1f       	adc	r20, r26
    5088:	5b 1f       	adc	r21, r27
    508a:	2a 8b       	std	Y+18, r18	; 0x12
    508c:	3b 8b       	std	Y+19, r19	; 0x13
    508e:	4c 8b       	std	Y+20, r20	; 0x14
    5090:	5d 8b       	std	Y+21, r21	; 0x15
    5092:	82 16       	cp	r8, r18
    5094:	93 06       	cpc	r9, r19
    5096:	a4 06       	cpc	r10, r20
    5098:	b5 06       	cpc	r11, r21
    509a:	08 f4       	brcc	.+2      	; 0x509e <find_volume+0x24a>
    509c:	75 cf       	rjmp	.-278    	; 0x4f88 <find_volume+0x134>
    509e:	c5 01       	movw	r24, r10
    50a0:	b4 01       	movw	r22, r8
    50a2:	62 1b       	sub	r22, r18
    50a4:	73 0b       	sbc	r23, r19
    50a6:	84 0b       	sbc	r24, r20
    50a8:	95 0b       	sbc	r25, r21
    50aa:	e9 89       	ldd	r30, Y+17	; 0x11
    50ac:	2e 2f       	mov	r18, r30
    50ae:	30 e0       	ldi	r19, 0x00	; 0
    50b0:	40 e0       	ldi	r20, 0x00	; 0
    50b2:	50 e0       	ldi	r21, 0x00	; 0
    50b4:	0e 94 be 4e 	call	0x9d7c	; 0x9d7c <__udivmodsi4>
    50b8:	21 15       	cp	r18, r1
    50ba:	31 05       	cpc	r19, r1
    50bc:	41 05       	cpc	r20, r1
    50be:	51 05       	cpc	r21, r1
    50c0:	09 f4       	brne	.+2      	; 0x50c4 <find_volume+0x270>
    50c2:	62 cf       	rjmp	.-316    	; 0x4f88 <find_volume+0x134>
    50c4:	26 3f       	cpi	r18, 0xF6	; 246
    50c6:	ff e0       	ldi	r31, 0x0F	; 15
    50c8:	3f 07       	cpc	r19, r31
    50ca:	41 05       	cpc	r20, r1
    50cc:	51 05       	cpc	r21, r1
    50ce:	48 f0       	brcs	.+18     	; 0x50e2 <find_volume+0x28e>
    50d0:	26 3f       	cpi	r18, 0xF6	; 246
    50d2:	8f ef       	ldi	r24, 0xFF	; 255
    50d4:	38 07       	cpc	r19, r24
    50d6:	41 05       	cpc	r20, r1
    50d8:	51 05       	cpc	r21, r1
    50da:	30 f4       	brcc	.+12     	; 0x50e8 <find_volume+0x294>
    50dc:	92 e0       	ldi	r25, 0x02	; 2
    50de:	99 8b       	std	Y+17, r25	; 0x11
    50e0:	05 c0       	rjmp	.+10     	; 0x50ec <find_volume+0x298>
    50e2:	a1 e0       	ldi	r26, 0x01	; 1
    50e4:	a9 8b       	std	Y+17, r26	; 0x11
    50e6:	02 c0       	rjmp	.+4      	; 0x50ec <find_volume+0x298>
    50e8:	b3 e0       	ldi	r27, 0x03	; 3
    50ea:	b9 8b       	std	Y+17, r27	; 0x11
    50ec:	49 01       	movw	r8, r18
    50ee:	5a 01       	movw	r10, r20
    50f0:	e2 e0       	ldi	r30, 0x02	; 2
    50f2:	8e 0e       	add	r8, r30
    50f4:	91 1c       	adc	r9, r1
    50f6:	a1 1c       	adc	r10, r1
    50f8:	b1 1c       	adc	r11, r1
    50fa:	d8 01       	movw	r26, r16
    50fc:	56 96       	adiw	r26, 0x16	; 22
    50fe:	8d 92       	st	X+, r8
    5100:	9d 92       	st	X+, r9
    5102:	ad 92       	st	X+, r10
    5104:	bc 92       	st	X, r11
    5106:	59 97       	sbiw	r26, 0x19	; 25
    5108:	f8 01       	movw	r30, r16
    510a:	46 8e       	std	Z+30, r4	; 0x1e
    510c:	57 8e       	std	Z+31, r5	; 0x1f
    510e:	60 a2       	std	Z+32, r6	; 0x20
    5110:	71 a2       	std	Z+33, r7	; 0x21
    5112:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5114:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5116:	ac 8d       	ldd	r26, Y+28	; 0x1c
    5118:	bd 8d       	ldd	r27, Y+29	; 0x1d
    511a:	84 0d       	add	r24, r4
    511c:	95 1d       	adc	r25, r5
    511e:	a6 1d       	adc	r26, r6
    5120:	b7 1d       	adc	r27, r7
    5122:	82 a3       	std	Z+34, r24	; 0x22
    5124:	93 a3       	std	Z+35, r25	; 0x23
    5126:	a4 a3       	std	Z+36, r26	; 0x24
    5128:	b5 a3       	std	Z+37, r27	; 0x25
    512a:	4a 89       	ldd	r20, Y+18	; 0x12
    512c:	5b 89       	ldd	r21, Y+19	; 0x13
    512e:	6c 89       	ldd	r22, Y+20	; 0x14
    5130:	7d 89       	ldd	r23, Y+21	; 0x15
    5132:	44 0d       	add	r20, r4
    5134:	55 1d       	adc	r21, r5
    5136:	66 1d       	adc	r22, r6
    5138:	77 1d       	adc	r23, r7
    513a:	42 a7       	std	Z+42, r20	; 0x2a
    513c:	53 a7       	std	Z+43, r21	; 0x2b
    513e:	64 a7       	std	Z+44, r22	; 0x2c
    5140:	75 a7       	std	Z+45, r23	; 0x2d
    5142:	f9 89       	ldd	r31, Y+17	; 0x11
    5144:	f3 30       	cpi	r31, 0x03	; 3
    5146:	c9 f4       	brne	.+50     	; 0x517a <find_volume+0x326>
    5148:	23 28       	or	r2, r3
    514a:	09 f0       	breq	.+2      	; 0x514e <find_volume+0x2fa>
    514c:	1d cf       	rjmp	.-454    	; 0x4f88 <find_volume+0x134>
    514e:	f8 01       	movw	r30, r16
    5150:	e2 5a       	subi	r30, 0xA2	; 162
    5152:	ff 4f       	sbci	r31, 0xFF	; 255
    5154:	80 81       	ld	r24, Z
    5156:	91 81       	ldd	r25, Z+1	; 0x01
    5158:	a2 81       	ldd	r26, Z+2	; 0x02
    515a:	b3 81       	ldd	r27, Z+3	; 0x03
    515c:	f8 01       	movw	r30, r16
    515e:	86 a3       	std	Z+38, r24	; 0x26
    5160:	97 a3       	std	Z+39, r25	; 0x27
    5162:	a0 a7       	std	Z+40, r26	; 0x28
    5164:	b1 a7       	std	Z+41, r27	; 0x29
    5166:	c5 01       	movw	r24, r10
    5168:	b4 01       	movw	r22, r8
    516a:	52 e0       	ldi	r21, 0x02	; 2
    516c:	66 0f       	add	r22, r22
    516e:	77 1f       	adc	r23, r23
    5170:	88 1f       	adc	r24, r24
    5172:	99 1f       	adc	r25, r25
    5174:	5a 95       	dec	r21
    5176:	d1 f7       	brne	.-12     	; 0x516c <find_volume+0x318>
    5178:	2d c0       	rjmp	.+90     	; 0x51d4 <find_volume+0x380>
    517a:	23 28       	or	r2, r3
    517c:	09 f4       	brne	.+2      	; 0x5180 <find_volume+0x32c>
    517e:	04 cf       	rjmp	.-504    	; 0x4f88 <find_volume+0x134>
    5180:	2e 89       	ldd	r18, Y+22	; 0x16
    5182:	3f 89       	ldd	r19, Y+23	; 0x17
    5184:	48 8d       	ldd	r20, Y+24	; 0x18
    5186:	59 8d       	ldd	r21, Y+25	; 0x19
    5188:	82 0f       	add	r24, r18
    518a:	93 1f       	adc	r25, r19
    518c:	a4 1f       	adc	r26, r20
    518e:	b5 1f       	adc	r27, r21
    5190:	f8 01       	movw	r30, r16
    5192:	86 a3       	std	Z+38, r24	; 0x26
    5194:	97 a3       	std	Z+39, r25	; 0x27
    5196:	a0 a7       	std	Z+40, r26	; 0x28
    5198:	b1 a7       	std	Z+41, r27	; 0x29
    519a:	f9 89       	ldd	r31, Y+17	; 0x11
    519c:	f2 30       	cpi	r31, 0x02	; 2
    519e:	39 f4       	brne	.+14     	; 0x51ae <find_volume+0x35a>
    51a0:	c5 01       	movw	r24, r10
    51a2:	b4 01       	movw	r22, r8
    51a4:	66 0f       	add	r22, r22
    51a6:	77 1f       	adc	r23, r23
    51a8:	88 1f       	adc	r24, r24
    51aa:	99 1f       	adc	r25, r25
    51ac:	13 c0       	rjmp	.+38     	; 0x51d4 <find_volume+0x380>
    51ae:	a3 e0       	ldi	r26, 0x03	; 3
    51b0:	b0 e0       	ldi	r27, 0x00	; 0
    51b2:	a5 01       	movw	r20, r10
    51b4:	94 01       	movw	r18, r8
    51b6:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <__muluhisi3>
    51ba:	96 95       	lsr	r25
    51bc:	87 95       	ror	r24
    51be:	77 95       	ror	r23
    51c0:	67 95       	ror	r22
    51c2:	21 e0       	ldi	r18, 0x01	; 1
    51c4:	82 22       	and	r8, r18
    51c6:	99 24       	eor	r9, r9
    51c8:	aa 24       	eor	r10, r10
    51ca:	bb 24       	eor	r11, r11
    51cc:	68 0d       	add	r22, r8
    51ce:	79 1d       	adc	r23, r9
    51d0:	8a 1d       	adc	r24, r10
    51d2:	9b 1d       	adc	r25, r11
    51d4:	dc 01       	movw	r26, r24
    51d6:	cb 01       	movw	r24, r22
    51d8:	81 50       	subi	r24, 0x01	; 1
    51da:	9e 4f       	sbci	r25, 0xFE	; 254
    51dc:	af 4f       	sbci	r26, 0xFF	; 255
    51de:	bf 4f       	sbci	r27, 0xFF	; 255
    51e0:	29 e0       	ldi	r18, 0x09	; 9
    51e2:	b6 95       	lsr	r27
    51e4:	a7 95       	ror	r26
    51e6:	97 95       	ror	r25
    51e8:	87 95       	ror	r24
    51ea:	2a 95       	dec	r18
    51ec:	d1 f7       	brne	.-12     	; 0x51e2 <find_volume+0x38e>
    51ee:	c8 16       	cp	r12, r24
    51f0:	d9 06       	cpc	r13, r25
    51f2:	ea 06       	cpc	r14, r26
    51f4:	fb 06       	cpc	r15, r27
    51f6:	08 f4       	brcc	.+2      	; 0x51fa <find_volume+0x3a6>
    51f8:	c7 ce       	rjmp	.-626    	; 0x4f88 <find_volume+0x134>
    51fa:	8f ef       	ldi	r24, 0xFF	; 255
    51fc:	9f ef       	ldi	r25, 0xFF	; 255
    51fe:	dc 01       	movw	r26, r24
    5200:	f8 01       	movw	r30, r16
    5202:	86 87       	std	Z+14, r24	; 0x0e
    5204:	97 87       	std	Z+15, r25	; 0x0f
    5206:	a0 8b       	std	Z+16, r26	; 0x10
    5208:	b1 8b       	std	Z+17, r27	; 0x11
    520a:	82 87       	std	Z+10, r24	; 0x0a
    520c:	93 87       	std	Z+11, r25	; 0x0b
    520e:	a4 87       	std	Z+12, r26	; 0x0c
    5210:	b5 87       	std	Z+13, r27	; 0x0d
    5212:	80 e8       	ldi	r24, 0x80	; 128
    5214:	85 83       	std	Z+5, r24	; 0x05
    5216:	f9 89       	ldd	r31, Y+17	; 0x11
    5218:	f3 30       	cpi	r31, 0x03	; 3
    521a:	09 f0       	breq	.+2      	; 0x521e <find_volume+0x3ca>
    521c:	48 c0       	rjmp	.+144    	; 0x52ae <find_volume+0x45a>
    521e:	f8 01       	movw	r30, r16
    5220:	ee 59       	subi	r30, 0x9E	; 158
    5222:	ff 4f       	sbci	r31, 0xFF	; 255
    5224:	80 81       	ld	r24, Z
    5226:	91 81       	ldd	r25, Z+1	; 0x01
    5228:	01 97       	sbiw	r24, 0x01	; 1
    522a:	09 f0       	breq	.+2      	; 0x522e <find_volume+0x3da>
    522c:	40 c0       	rjmp	.+128    	; 0x52ae <find_volume+0x45a>
    522e:	b3 01       	movw	r22, r6
    5230:	a2 01       	movw	r20, r4
    5232:	4f 5f       	subi	r20, 0xFF	; 255
    5234:	5f 4f       	sbci	r21, 0xFF	; 255
    5236:	6f 4f       	sbci	r22, 0xFF	; 255
    5238:	7f 4f       	sbci	r23, 0xFF	; 255
    523a:	c8 01       	movw	r24, r16
    523c:	92 dd       	rcall	.-1244   	; 0x4d62 <move_window>
    523e:	81 11       	cpse	r24, r1
    5240:	36 c0       	rjmp	.+108    	; 0x52ae <find_volume+0x45a>
    5242:	d8 01       	movw	r26, r16
    5244:	15 96       	adiw	r26, 0x05	; 5
    5246:	1c 92       	st	X, r1
    5248:	f8 01       	movw	r30, r16
    524a:	e0 5d       	subi	r30, 0xD0	; 208
    524c:	fd 4f       	sbci	r31, 0xFD	; 253
    524e:	80 81       	ld	r24, Z
    5250:	91 81       	ldd	r25, Z+1	; 0x01
    5252:	85 35       	cpi	r24, 0x55	; 85
    5254:	9a 4a       	sbci	r25, 0xAA	; 170
    5256:	59 f5       	brne	.+86     	; 0x52ae <find_volume+0x45a>
    5258:	f8 01       	movw	r30, r16
    525a:	82 a9       	ldd	r24, Z+50	; 0x32
    525c:	93 a9       	ldd	r25, Z+51	; 0x33
    525e:	a4 a9       	ldd	r26, Z+52	; 0x34
    5260:	b5 a9       	ldd	r27, Z+53	; 0x35
    5262:	82 35       	cpi	r24, 0x52	; 82
    5264:	92 45       	sbci	r25, 0x52	; 82
    5266:	a1 46       	sbci	r26, 0x61	; 97
    5268:	b1 44       	sbci	r27, 0x41	; 65
    526a:	09 f5       	brne	.+66     	; 0x52ae <find_volume+0x45a>
    526c:	f8 01       	movw	r30, r16
    526e:	ea 5e       	subi	r30, 0xEA	; 234
    5270:	fd 4f       	sbci	r31, 0xFD	; 253
    5272:	80 81       	ld	r24, Z
    5274:	91 81       	ldd	r25, Z+1	; 0x01
    5276:	a2 81       	ldd	r26, Z+2	; 0x02
    5278:	b3 81       	ldd	r27, Z+3	; 0x03
    527a:	82 37       	cpi	r24, 0x72	; 114
    527c:	92 47       	sbci	r25, 0x72	; 114
    527e:	a1 44       	sbci	r26, 0x41	; 65
    5280:	b1 46       	sbci	r27, 0x61	; 97
    5282:	a9 f4       	brne	.+42     	; 0x52ae <find_volume+0x45a>
    5284:	34 96       	adiw	r30, 0x04	; 4
    5286:	80 81       	ld	r24, Z
    5288:	91 81       	ldd	r25, Z+1	; 0x01
    528a:	a2 81       	ldd	r26, Z+2	; 0x02
    528c:	b3 81       	ldd	r27, Z+3	; 0x03
    528e:	f8 01       	movw	r30, r16
    5290:	86 87       	std	Z+14, r24	; 0x0e
    5292:	97 87       	std	Z+15, r25	; 0x0f
    5294:	a0 8b       	std	Z+16, r26	; 0x10
    5296:	b1 8b       	std	Z+17, r27	; 0x11
    5298:	e2 5e       	subi	r30, 0xE2	; 226
    529a:	fd 4f       	sbci	r31, 0xFD	; 253
    529c:	80 81       	ld	r24, Z
    529e:	91 81       	ldd	r25, Z+1	; 0x01
    52a0:	a2 81       	ldd	r26, Z+2	; 0x02
    52a2:	b3 81       	ldd	r27, Z+3	; 0x03
    52a4:	f8 01       	movw	r30, r16
    52a6:	82 87       	std	Z+10, r24	; 0x0a
    52a8:	93 87       	std	Z+11, r25	; 0x0b
    52aa:	a4 87       	std	Z+12, r26	; 0x0c
    52ac:	b5 87       	std	Z+13, r27	; 0x0d
    52ae:	e9 89       	ldd	r30, Y+17	; 0x11
    52b0:	d8 01       	movw	r26, r16
    52b2:	ec 93       	st	X, r30
    52b4:	80 91 b5 2a 	lds	r24, 0x2AB5
    52b8:	90 91 b6 2a 	lds	r25, 0x2AB6
    52bc:	01 96       	adiw	r24, 0x01	; 1
    52be:	80 93 b5 2a 	sts	0x2AB5, r24
    52c2:	90 93 b6 2a 	sts	0x2AB6, r25
    52c6:	16 96       	adiw	r26, 0x06	; 6
    52c8:	8d 93       	st	X+, r24
    52ca:	9c 93       	st	X, r25
    52cc:	17 97       	sbiw	r26, 0x07	; 7
    52ce:	52 96       	adiw	r26, 0x12	; 18
    52d0:	1d 92       	st	X+, r1
    52d2:	1d 92       	st	X+, r1
    52d4:	1d 92       	st	X+, r1
    52d6:	1c 92       	st	X, r1
    52d8:	55 97       	sbiw	r26, 0x15	; 21
    52da:	04 c0       	rjmp	.+8      	; 0x52e4 <find_volume+0x490>
    52dc:	8b e0       	ldi	r24, 0x0B	; 11
    52de:	09 c0       	rjmp	.+18     	; 0x52f2 <find_volume+0x49e>
    52e0:	8c e0       	ldi	r24, 0x0C	; 12
    52e2:	07 c0       	rjmp	.+14     	; 0x52f2 <find_volume+0x49e>
    52e4:	80 e0       	ldi	r24, 0x00	; 0
    52e6:	05 c0       	rjmp	.+10     	; 0x52f2 <find_volume+0x49e>
    52e8:	83 e0       	ldi	r24, 0x03	; 3
    52ea:	03 c0       	rjmp	.+6      	; 0x52f2 <find_volume+0x49e>
    52ec:	8a e0       	ldi	r24, 0x0A	; 10
    52ee:	01 c0       	rjmp	.+2      	; 0x52f2 <find_volume+0x49e>
    52f0:	81 e0       	ldi	r24, 0x01	; 1
    52f2:	6d 96       	adiw	r28, 0x1d	; 29
    52f4:	cd bf       	out	0x3d, r28	; 61
    52f6:	de bf       	out	0x3e, r29	; 62
    52f8:	df 91       	pop	r29
    52fa:	cf 91       	pop	r28
    52fc:	1f 91       	pop	r17
    52fe:	0f 91       	pop	r16
    5300:	ff 90       	pop	r15
    5302:	ef 90       	pop	r14
    5304:	df 90       	pop	r13
    5306:	cf 90       	pop	r12
    5308:	bf 90       	pop	r11
    530a:	af 90       	pop	r10
    530c:	9f 90       	pop	r9
    530e:	8f 90       	pop	r8
    5310:	7f 90       	pop	r7
    5312:	6f 90       	pop	r6
    5314:	5f 90       	pop	r5
    5316:	4f 90       	pop	r4
    5318:	3f 90       	pop	r3
    531a:	2f 90       	pop	r2
    531c:	08 95       	ret

0000531e <clust2sect>:
    531e:	0f 93       	push	r16
    5320:	1f 93       	push	r17
    5322:	fc 01       	movw	r30, r24
    5324:	42 50       	subi	r20, 0x02	; 2
    5326:	51 09       	sbc	r21, r1
    5328:	61 09       	sbc	r22, r1
    532a:	71 09       	sbc	r23, r1
    532c:	06 89       	ldd	r16, Z+22	; 0x16
    532e:	17 89       	ldd	r17, Z+23	; 0x17
    5330:	20 8d       	ldd	r18, Z+24	; 0x18
    5332:	31 8d       	ldd	r19, Z+25	; 0x19
    5334:	02 50       	subi	r16, 0x02	; 2
    5336:	11 09       	sbc	r17, r1
    5338:	21 09       	sbc	r18, r1
    533a:	31 09       	sbc	r19, r1
    533c:	40 17       	cp	r20, r16
    533e:	51 07       	cpc	r21, r17
    5340:	62 07       	cpc	r22, r18
    5342:	73 07       	cpc	r23, r19
    5344:	78 f4       	brcc	.+30     	; 0x5364 <clust2sect+0x46>
    5346:	a2 81       	ldd	r26, Z+2	; 0x02
    5348:	b0 e0       	ldi	r27, 0x00	; 0
    534a:	9a 01       	movw	r18, r20
    534c:	ab 01       	movw	r20, r22
    534e:	0e 94 f5 4e 	call	0x9dea	; 0x9dea <__muluhisi3>
    5352:	02 a5       	ldd	r16, Z+42	; 0x2a
    5354:	13 a5       	ldd	r17, Z+43	; 0x2b
    5356:	24 a5       	ldd	r18, Z+44	; 0x2c
    5358:	35 a5       	ldd	r19, Z+45	; 0x2d
    535a:	60 0f       	add	r22, r16
    535c:	71 1f       	adc	r23, r17
    535e:	82 1f       	adc	r24, r18
    5360:	93 1f       	adc	r25, r19
    5362:	03 c0       	rjmp	.+6      	; 0x536a <clust2sect+0x4c>
    5364:	60 e0       	ldi	r22, 0x00	; 0
    5366:	70 e0       	ldi	r23, 0x00	; 0
    5368:	cb 01       	movw	r24, r22
    536a:	1f 91       	pop	r17
    536c:	0f 91       	pop	r16
    536e:	08 95       	ret

00005370 <get_fat>:
    5370:	af 92       	push	r10
    5372:	bf 92       	push	r11
    5374:	cf 92       	push	r12
    5376:	df 92       	push	r13
    5378:	ef 92       	push	r14
    537a:	ff 92       	push	r15
    537c:	0f 93       	push	r16
    537e:	1f 93       	push	r17
    5380:	cf 93       	push	r28
    5382:	df 93       	push	r29
    5384:	ec 01       	movw	r28, r24
    5386:	6a 01       	movw	r12, r20
    5388:	7b 01       	movw	r14, r22
    538a:	42 30       	cpi	r20, 0x02	; 2
    538c:	51 05       	cpc	r21, r1
    538e:	61 05       	cpc	r22, r1
    5390:	71 05       	cpc	r23, r1
    5392:	08 f4       	brcc	.+2      	; 0x5396 <get_fat+0x26>
    5394:	a2 c0       	rjmp	.+324    	; 0x54da <get_fat+0x16a>
    5396:	8e 89       	ldd	r24, Y+22	; 0x16
    5398:	9f 89       	ldd	r25, Y+23	; 0x17
    539a:	a8 8d       	ldd	r26, Y+24	; 0x18
    539c:	b9 8d       	ldd	r27, Y+25	; 0x19
    539e:	48 17       	cp	r20, r24
    53a0:	59 07       	cpc	r21, r25
    53a2:	6a 07       	cpc	r22, r26
    53a4:	7b 07       	cpc	r23, r27
    53a6:	08 f0       	brcs	.+2      	; 0x53aa <get_fat+0x3a>
    53a8:	98 c0       	rjmp	.+304    	; 0x54da <get_fat+0x16a>
    53aa:	88 81       	ld	r24, Y
    53ac:	82 30       	cpi	r24, 0x02	; 2
    53ae:	09 f4       	brne	.+2      	; 0x53b2 <get_fat+0x42>
    53b0:	49 c0       	rjmp	.+146    	; 0x5444 <get_fat+0xd4>
    53b2:	83 30       	cpi	r24, 0x03	; 3
    53b4:	09 f4       	brne	.+2      	; 0x53b8 <get_fat+0x48>
    53b6:	68 c0       	rjmp	.+208    	; 0x5488 <get_fat+0x118>
    53b8:	81 30       	cpi	r24, 0x01	; 1
    53ba:	09 f0       	breq	.+2      	; 0x53be <get_fat+0x4e>
    53bc:	8e c0       	rjmp	.+284    	; 0x54da <get_fat+0x16a>
    53be:	5a 01       	movw	r10, r20
    53c0:	b6 94       	lsr	r11
    53c2:	a7 94       	ror	r10
    53c4:	a4 0e       	add	r10, r20
    53c6:	b5 1e       	adc	r11, r21
    53c8:	c5 01       	movw	r24, r10
    53ca:	89 2f       	mov	r24, r25
    53cc:	99 27       	eor	r25, r25
    53ce:	86 95       	lsr	r24
    53d0:	4a a1       	ldd	r20, Y+34	; 0x22
    53d2:	5b a1       	ldd	r21, Y+35	; 0x23
    53d4:	6c a1       	ldd	r22, Y+36	; 0x24
    53d6:	7d a1       	ldd	r23, Y+37	; 0x25
    53d8:	48 0f       	add	r20, r24
    53da:	59 1f       	adc	r21, r25
    53dc:	61 1d       	adc	r22, r1
    53de:	71 1d       	adc	r23, r1
    53e0:	ce 01       	movw	r24, r28
    53e2:	bf dc       	rcall	.-1666   	; 0x4d62 <move_window>
    53e4:	88 23       	and	r24, r24
    53e6:	21 f0       	breq	.+8      	; 0x53f0 <get_fat+0x80>
    53e8:	6f ef       	ldi	r22, 0xFF	; 255
    53ea:	7f ef       	ldi	r23, 0xFF	; 255
    53ec:	cb 01       	movw	r24, r22
    53ee:	79 c0       	rjmp	.+242    	; 0x54e2 <get_fat+0x172>
    53f0:	85 01       	movw	r16, r10
    53f2:	0f 5f       	subi	r16, 0xFF	; 255
    53f4:	1f 4f       	sbci	r17, 0xFF	; 255
    53f6:	f5 01       	movw	r30, r10
    53f8:	f1 70       	andi	r31, 0x01	; 1
    53fa:	ec 0f       	add	r30, r28
    53fc:	fd 1f       	adc	r31, r29
    53fe:	b2 a8       	ldd	r11, Z+50	; 0x32
    5400:	c8 01       	movw	r24, r16
    5402:	89 2f       	mov	r24, r25
    5404:	99 27       	eor	r25, r25
    5406:	86 95       	lsr	r24
    5408:	4a a1       	ldd	r20, Y+34	; 0x22
    540a:	5b a1       	ldd	r21, Y+35	; 0x23
    540c:	6c a1       	ldd	r22, Y+36	; 0x24
    540e:	7d a1       	ldd	r23, Y+37	; 0x25
    5410:	48 0f       	add	r20, r24
    5412:	59 1f       	adc	r21, r25
    5414:	61 1d       	adc	r22, r1
    5416:	71 1d       	adc	r23, r1
    5418:	ce 01       	movw	r24, r28
    541a:	a3 dc       	rcall	.-1722   	; 0x4d62 <move_window>
    541c:	81 11       	cpse	r24, r1
    541e:	e4 cf       	rjmp	.-56     	; 0x53e8 <get_fat+0x78>
    5420:	f8 01       	movw	r30, r16
    5422:	f1 70       	andi	r31, 0x01	; 1
    5424:	ec 0f       	add	r30, r28
    5426:	fd 1f       	adc	r31, r29
    5428:	82 a9       	ldd	r24, Z+50	; 0x32
    542a:	6b 2d       	mov	r22, r11
    542c:	70 e0       	ldi	r23, 0x00	; 0
    542e:	78 2b       	or	r23, r24
    5430:	c0 fe       	sbrs	r12, 0
    5432:	06 c0       	rjmp	.+12     	; 0x5440 <get_fat+0xd0>
    5434:	c4 e0       	ldi	r28, 0x04	; 4
    5436:	76 95       	lsr	r23
    5438:	67 95       	ror	r22
    543a:	ca 95       	dec	r28
    543c:	e1 f7       	brne	.-8      	; 0x5436 <get_fat+0xc6>
    543e:	21 c0       	rjmp	.+66     	; 0x5482 <get_fat+0x112>
    5440:	7f 70       	andi	r23, 0x0F	; 15
    5442:	1f c0       	rjmp	.+62     	; 0x5482 <get_fat+0x112>
    5444:	45 2f       	mov	r20, r21
    5446:	56 2f       	mov	r21, r22
    5448:	67 2f       	mov	r22, r23
    544a:	77 27       	eor	r23, r23
    544c:	8a a1       	ldd	r24, Y+34	; 0x22
    544e:	9b a1       	ldd	r25, Y+35	; 0x23
    5450:	ac a1       	ldd	r26, Y+36	; 0x24
    5452:	bd a1       	ldd	r27, Y+37	; 0x25
    5454:	48 0f       	add	r20, r24
    5456:	59 1f       	adc	r21, r25
    5458:	6a 1f       	adc	r22, r26
    545a:	7b 1f       	adc	r23, r27
    545c:	ce 01       	movw	r24, r28
    545e:	81 dc       	rcall	.-1790   	; 0x4d62 <move_window>
    5460:	81 11       	cpse	r24, r1
    5462:	c2 cf       	rjmp	.-124    	; 0x53e8 <get_fat+0x78>
    5464:	cc 0c       	add	r12, r12
    5466:	dd 1c       	adc	r13, r13
    5468:	ee 1c       	adc	r14, r14
    546a:	ff 1c       	adc	r15, r15
    546c:	e8 94       	clt
    546e:	c0 f8       	bld	r12, 0
    5470:	81 e0       	ldi	r24, 0x01	; 1
    5472:	d8 22       	and	r13, r24
    5474:	ee 24       	eor	r14, r14
    5476:	ff 24       	eor	r15, r15
    5478:	fe 01       	movw	r30, r28
    547a:	ec 0d       	add	r30, r12
    547c:	fd 1d       	adc	r31, r13
    547e:	62 a9       	ldd	r22, Z+50	; 0x32
    5480:	73 a9       	ldd	r23, Z+51	; 0x33
    5482:	80 e0       	ldi	r24, 0x00	; 0
    5484:	90 e0       	ldi	r25, 0x00	; 0
    5486:	2d c0       	rjmp	.+90     	; 0x54e2 <get_fat+0x172>
    5488:	f7 e0       	ldi	r31, 0x07	; 7
    548a:	76 95       	lsr	r23
    548c:	67 95       	ror	r22
    548e:	57 95       	ror	r21
    5490:	47 95       	ror	r20
    5492:	fa 95       	dec	r31
    5494:	d1 f7       	brne	.-12     	; 0x548a <get_fat+0x11a>
    5496:	8a a1       	ldd	r24, Y+34	; 0x22
    5498:	9b a1       	ldd	r25, Y+35	; 0x23
    549a:	ac a1       	ldd	r26, Y+36	; 0x24
    549c:	bd a1       	ldd	r27, Y+37	; 0x25
    549e:	48 0f       	add	r20, r24
    54a0:	59 1f       	adc	r21, r25
    54a2:	6a 1f       	adc	r22, r26
    54a4:	7b 1f       	adc	r23, r27
    54a6:	ce 01       	movw	r24, r28
    54a8:	5c dc       	rcall	.-1864   	; 0x4d62 <move_window>
    54aa:	81 11       	cpse	r24, r1
    54ac:	9d cf       	rjmp	.-198    	; 0x53e8 <get_fat+0x78>
    54ae:	e2 e0       	ldi	r30, 0x02	; 2
    54b0:	cc 0c       	add	r12, r12
    54b2:	dd 1c       	adc	r13, r13
    54b4:	ee 1c       	adc	r14, r14
    54b6:	ff 1c       	adc	r15, r15
    54b8:	ea 95       	dec	r30
    54ba:	d1 f7       	brne	.-12     	; 0x54b0 <get_fat+0x140>
    54bc:	8c ef       	ldi	r24, 0xFC	; 252
    54be:	c8 22       	and	r12, r24
    54c0:	81 e0       	ldi	r24, 0x01	; 1
    54c2:	d8 22       	and	r13, r24
    54c4:	ee 24       	eor	r14, r14
    54c6:	ff 24       	eor	r15, r15
    54c8:	fe 01       	movw	r30, r28
    54ca:	ec 0d       	add	r30, r12
    54cc:	fd 1d       	adc	r31, r13
    54ce:	62 a9       	ldd	r22, Z+50	; 0x32
    54d0:	73 a9       	ldd	r23, Z+51	; 0x33
    54d2:	84 a9       	ldd	r24, Z+52	; 0x34
    54d4:	95 a9       	ldd	r25, Z+53	; 0x35
    54d6:	9f 70       	andi	r25, 0x0F	; 15
    54d8:	04 c0       	rjmp	.+8      	; 0x54e2 <get_fat+0x172>
    54da:	61 e0       	ldi	r22, 0x01	; 1
    54dc:	70 e0       	ldi	r23, 0x00	; 0
    54de:	80 e0       	ldi	r24, 0x00	; 0
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	df 91       	pop	r29
    54e4:	cf 91       	pop	r28
    54e6:	1f 91       	pop	r17
    54e8:	0f 91       	pop	r16
    54ea:	ff 90       	pop	r15
    54ec:	ef 90       	pop	r14
    54ee:	df 90       	pop	r13
    54f0:	cf 90       	pop	r12
    54f2:	bf 90       	pop	r11
    54f4:	af 90       	pop	r10
    54f6:	08 95       	ret

000054f8 <dir_sdi>:
    54f8:	af 92       	push	r10
    54fa:	bf 92       	push	r11
    54fc:	cf 92       	push	r12
    54fe:	df 92       	push	r13
    5500:	ef 92       	push	r14
    5502:	ff 92       	push	r15
    5504:	0f 93       	push	r16
    5506:	1f 93       	push	r17
    5508:	cf 93       	push	r28
    550a:	df 93       	push	r29
    550c:	ec 01       	movw	r28, r24
    550e:	8b 01       	movw	r16, r22
    5510:	6c 83       	std	Y+4, r22	; 0x04
    5512:	7d 83       	std	Y+5, r23	; 0x05
    5514:	ce 80       	ldd	r12, Y+6	; 0x06
    5516:	df 80       	ldd	r13, Y+7	; 0x07
    5518:	e8 84       	ldd	r14, Y+8	; 0x08
    551a:	f9 84       	ldd	r15, Y+9	; 0x09
    551c:	81 e0       	ldi	r24, 0x01	; 1
    551e:	c8 16       	cp	r12, r24
    5520:	d1 04       	cpc	r13, r1
    5522:	e1 04       	cpc	r14, r1
    5524:	f1 04       	cpc	r15, r1
    5526:	11 f4       	brne	.+4      	; 0x552c <dir_sdi+0x34>
    5528:	82 e0       	ldi	r24, 0x02	; 2
    552a:	80 c0       	rjmp	.+256    	; 0x562c <dir_sdi+0x134>
    552c:	e8 81       	ld	r30, Y
    552e:	f9 81       	ldd	r31, Y+1	; 0x01
    5530:	86 89       	ldd	r24, Z+22	; 0x16
    5532:	97 89       	ldd	r25, Z+23	; 0x17
    5534:	a0 8d       	ldd	r26, Z+24	; 0x18
    5536:	b1 8d       	ldd	r27, Z+25	; 0x19
    5538:	c8 16       	cp	r12, r24
    553a:	d9 06       	cpc	r13, r25
    553c:	ea 06       	cpc	r14, r26
    553e:	fb 06       	cpc	r15, r27
    5540:	98 f7       	brcc	.-26     	; 0x5528 <dir_sdi+0x30>
    5542:	c1 14       	cp	r12, r1
    5544:	d1 04       	cpc	r13, r1
    5546:	e1 04       	cpc	r14, r1
    5548:	f1 04       	cpc	r15, r1
    554a:	b9 f4       	brne	.+46     	; 0x557a <dir_sdi+0x82>
    554c:	80 81       	ld	r24, Z
    554e:	83 30       	cpi	r24, 0x03	; 3
    5550:	41 f4       	brne	.+16     	; 0x5562 <dir_sdi+0x6a>
    5552:	86 a1       	ldd	r24, Z+38	; 0x26
    5554:	97 a1       	ldd	r25, Z+39	; 0x27
    5556:	a0 a5       	ldd	r26, Z+40	; 0x28
    5558:	b1 a5       	ldd	r27, Z+41	; 0x29
    555a:	00 97       	sbiw	r24, 0x00	; 0
    555c:	a1 05       	cpc	r26, r1
    555e:	b1 05       	cpc	r27, r1
    5560:	51 f4       	brne	.+20     	; 0x5576 <dir_sdi+0x7e>
    5562:	80 85       	ldd	r24, Z+8	; 0x08
    5564:	91 85       	ldd	r25, Z+9	; 0x09
    5566:	08 17       	cp	r16, r24
    5568:	19 07       	cpc	r17, r25
    556a:	f0 f6       	brcc	.-68     	; 0x5528 <dir_sdi+0x30>
    556c:	66 a1       	ldd	r22, Z+38	; 0x26
    556e:	77 a1       	ldd	r23, Z+39	; 0x27
    5570:	80 a5       	ldd	r24, Z+40	; 0x28
    5572:	91 a5       	ldd	r25, Z+41	; 0x29
    5574:	2f c0       	rjmp	.+94     	; 0x55d4 <dir_sdi+0xdc>
    5576:	6c 01       	movw	r12, r24
    5578:	7d 01       	movw	r14, r26
    557a:	a2 80       	ldd	r10, Z+2	; 0x02
    557c:	80 e1       	ldi	r24, 0x10	; 16
    557e:	a8 9e       	mul	r10, r24
    5580:	50 01       	movw	r10, r0
    5582:	11 24       	eor	r1, r1
    5584:	88 81       	ld	r24, Y
    5586:	99 81       	ldd	r25, Y+1	; 0x01
    5588:	b7 01       	movw	r22, r14
    558a:	a6 01       	movw	r20, r12
    558c:	0a 15       	cp	r16, r10
    558e:	1b 05       	cpc	r17, r11
    5590:	00 f1       	brcs	.+64     	; 0x55d2 <dir_sdi+0xda>
    5592:	ee de       	rcall	.-548    	; 0x5370 <get_fat>
    5594:	6b 01       	movw	r12, r22
    5596:	7c 01       	movw	r14, r24
    5598:	8f ef       	ldi	r24, 0xFF	; 255
    559a:	c8 16       	cp	r12, r24
    559c:	d8 06       	cpc	r13, r24
    559e:	e8 06       	cpc	r14, r24
    55a0:	f8 06       	cpc	r15, r24
    55a2:	09 f4       	brne	.+2      	; 0x55a6 <dir_sdi+0xae>
    55a4:	42 c0       	rjmp	.+132    	; 0x562a <dir_sdi+0x132>
    55a6:	82 e0       	ldi	r24, 0x02	; 2
    55a8:	c8 16       	cp	r12, r24
    55aa:	d1 04       	cpc	r13, r1
    55ac:	e1 04       	cpc	r14, r1
    55ae:	f1 04       	cpc	r15, r1
    55b0:	08 f4       	brcc	.+2      	; 0x55b4 <dir_sdi+0xbc>
    55b2:	ba cf       	rjmp	.-140    	; 0x5528 <dir_sdi+0x30>
    55b4:	e8 81       	ld	r30, Y
    55b6:	f9 81       	ldd	r31, Y+1	; 0x01
    55b8:	86 89       	ldd	r24, Z+22	; 0x16
    55ba:	97 89       	ldd	r25, Z+23	; 0x17
    55bc:	a0 8d       	ldd	r26, Z+24	; 0x18
    55be:	b1 8d       	ldd	r27, Z+25	; 0x19
    55c0:	c8 16       	cp	r12, r24
    55c2:	d9 06       	cpc	r13, r25
    55c4:	ea 06       	cpc	r14, r26
    55c6:	fb 06       	cpc	r15, r27
    55c8:	08 f0       	brcs	.+2      	; 0x55cc <dir_sdi+0xd4>
    55ca:	ae cf       	rjmp	.-164    	; 0x5528 <dir_sdi+0x30>
    55cc:	0a 19       	sub	r16, r10
    55ce:	1b 09       	sbc	r17, r11
    55d0:	d9 cf       	rjmp	.-78     	; 0x5584 <dir_sdi+0x8c>
    55d2:	a5 de       	rcall	.-694    	; 0x531e <clust2sect>
    55d4:	ca 86       	std	Y+10, r12	; 0x0a
    55d6:	db 86       	std	Y+11, r13	; 0x0b
    55d8:	ec 86       	std	Y+12, r14	; 0x0c
    55da:	fd 86       	std	Y+13, r15	; 0x0d
    55dc:	61 15       	cp	r22, r1
    55de:	71 05       	cpc	r23, r1
    55e0:	81 05       	cpc	r24, r1
    55e2:	91 05       	cpc	r25, r1
    55e4:	09 f4       	brne	.+2      	; 0x55e8 <dir_sdi+0xf0>
    55e6:	a0 cf       	rjmp	.-192    	; 0x5528 <dir_sdi+0x30>
    55e8:	98 01       	movw	r18, r16
    55ea:	54 e0       	ldi	r21, 0x04	; 4
    55ec:	36 95       	lsr	r19
    55ee:	27 95       	ror	r18
    55f0:	5a 95       	dec	r21
    55f2:	e1 f7       	brne	.-8      	; 0x55ec <dir_sdi+0xf4>
    55f4:	dc 01       	movw	r26, r24
    55f6:	cb 01       	movw	r24, r22
    55f8:	82 0f       	add	r24, r18
    55fa:	93 1f       	adc	r25, r19
    55fc:	a1 1d       	adc	r26, r1
    55fe:	b1 1d       	adc	r27, r1
    5600:	8e 87       	std	Y+14, r24	; 0x0e
    5602:	9f 87       	std	Y+15, r25	; 0x0f
    5604:	a8 8b       	std	Y+16, r26	; 0x10
    5606:	b9 8b       	std	Y+17, r27	; 0x11
    5608:	0f 70       	andi	r16, 0x0F	; 15
    560a:	11 27       	eor	r17, r17
    560c:	65 e0       	ldi	r22, 0x05	; 5
    560e:	00 0f       	add	r16, r16
    5610:	11 1f       	adc	r17, r17
    5612:	6a 95       	dec	r22
    5614:	e1 f7       	brne	.-8      	; 0x560e <dir_sdi+0x116>
    5616:	0e 5c       	subi	r16, 0xCE	; 206
    5618:	1f 4f       	sbci	r17, 0xFF	; 255
    561a:	88 81       	ld	r24, Y
    561c:	99 81       	ldd	r25, Y+1	; 0x01
    561e:	80 0f       	add	r24, r16
    5620:	91 1f       	adc	r25, r17
    5622:	8a 8b       	std	Y+18, r24	; 0x12
    5624:	9b 8b       	std	Y+19, r25	; 0x13
    5626:	80 e0       	ldi	r24, 0x00	; 0
    5628:	01 c0       	rjmp	.+2      	; 0x562c <dir_sdi+0x134>
    562a:	81 e0       	ldi	r24, 0x01	; 1
    562c:	df 91       	pop	r29
    562e:	cf 91       	pop	r28
    5630:	1f 91       	pop	r17
    5632:	0f 91       	pop	r16
    5634:	ff 90       	pop	r15
    5636:	ef 90       	pop	r14
    5638:	df 90       	pop	r13
    563a:	cf 90       	pop	r12
    563c:	bf 90       	pop	r11
    563e:	af 90       	pop	r10
    5640:	08 95       	ret

00005642 <put_fat>:
    5642:	4f 92       	push	r4
    5644:	5f 92       	push	r5
    5646:	6f 92       	push	r6
    5648:	7f 92       	push	r7
    564a:	8f 92       	push	r8
    564c:	9f 92       	push	r9
    564e:	af 92       	push	r10
    5650:	bf 92       	push	r11
    5652:	cf 92       	push	r12
    5654:	df 92       	push	r13
    5656:	ef 92       	push	r14
    5658:	ff 92       	push	r15
    565a:	0f 93       	push	r16
    565c:	1f 93       	push	r17
    565e:	cf 93       	push	r28
    5660:	df 93       	push	r29
    5662:	ec 01       	movw	r28, r24
    5664:	6a 01       	movw	r12, r20
    5666:	7b 01       	movw	r14, r22
    5668:	28 01       	movw	r4, r16
    566a:	39 01       	movw	r6, r18
    566c:	42 30       	cpi	r20, 0x02	; 2
    566e:	51 05       	cpc	r21, r1
    5670:	61 05       	cpc	r22, r1
    5672:	71 05       	cpc	r23, r1
    5674:	08 f4       	brcc	.+2      	; 0x5678 <put_fat+0x36>
    5676:	c5 c0       	rjmp	.+394    	; 0x5802 <put_fat+0x1c0>
    5678:	8e 89       	ldd	r24, Y+22	; 0x16
    567a:	9f 89       	ldd	r25, Y+23	; 0x17
    567c:	a8 8d       	ldd	r26, Y+24	; 0x18
    567e:	b9 8d       	ldd	r27, Y+25	; 0x19
    5680:	48 17       	cp	r20, r24
    5682:	59 07       	cpc	r21, r25
    5684:	6a 07       	cpc	r22, r26
    5686:	7b 07       	cpc	r23, r27
    5688:	08 f0       	brcs	.+2      	; 0x568c <put_fat+0x4a>
    568a:	bb c0       	rjmp	.+374    	; 0x5802 <put_fat+0x1c0>
    568c:	88 81       	ld	r24, Y
    568e:	82 30       	cpi	r24, 0x02	; 2
    5690:	09 f4       	brne	.+2      	; 0x5694 <put_fat+0x52>
    5692:	5f c0       	rjmp	.+190    	; 0x5752 <put_fat+0x110>
    5694:	83 30       	cpi	r24, 0x03	; 3
    5696:	09 f4       	brne	.+2      	; 0x569a <put_fat+0x58>
    5698:	7d c0       	rjmp	.+250    	; 0x5794 <put_fat+0x152>
    569a:	81 30       	cpi	r24, 0x01	; 1
    569c:	09 f0       	breq	.+2      	; 0x56a0 <put_fat+0x5e>
    569e:	b1 c0       	rjmp	.+354    	; 0x5802 <put_fat+0x1c0>
    56a0:	5a 01       	movw	r10, r20
    56a2:	b6 94       	lsr	r11
    56a4:	a7 94       	ror	r10
    56a6:	a4 0e       	add	r10, r20
    56a8:	b5 1e       	adc	r11, r21
    56aa:	c5 01       	movw	r24, r10
    56ac:	89 2f       	mov	r24, r25
    56ae:	99 27       	eor	r25, r25
    56b0:	86 95       	lsr	r24
    56b2:	4a a1       	ldd	r20, Y+34	; 0x22
    56b4:	5b a1       	ldd	r21, Y+35	; 0x23
    56b6:	6c a1       	ldd	r22, Y+36	; 0x24
    56b8:	7d a1       	ldd	r23, Y+37	; 0x25
    56ba:	48 0f       	add	r20, r24
    56bc:	59 1f       	adc	r21, r25
    56be:	61 1d       	adc	r22, r1
    56c0:	71 1d       	adc	r23, r1
    56c2:	ce 01       	movw	r24, r28
    56c4:	4e db       	rcall	.-2404   	; 0x4d62 <move_window>
    56c6:	81 11       	cpse	r24, r1
    56c8:	9d c0       	rjmp	.+314    	; 0x5804 <put_fat+0x1c2>
    56ca:	85 01       	movw	r16, r10
    56cc:	0f 5f       	subi	r16, 0xFF	; 255
    56ce:	1f 4f       	sbci	r17, 0xFF	; 255
    56d0:	f5 01       	movw	r30, r10
    56d2:	f1 70       	andi	r31, 0x01	; 1
    56d4:	ec 0f       	add	r30, r28
    56d6:	fd 1f       	adc	r31, r29
    56d8:	46 01       	movw	r8, r12
    56da:	57 01       	movw	r10, r14
    56dc:	81 e0       	ldi	r24, 0x01	; 1
    56de:	88 22       	and	r8, r24
    56e0:	99 24       	eor	r9, r9
    56e2:	aa 24       	eor	r10, r10
    56e4:	bb 24       	eor	r11, r11
    56e6:	c0 fe       	sbrs	r12, 0
    56e8:	08 c0       	rjmp	.+16     	; 0x56fa <put_fat+0xb8>
    56ea:	22 a9       	ldd	r18, Z+50	; 0x32
    56ec:	2f 70       	andi	r18, 0x0F	; 15
    56ee:	30 e1       	ldi	r19, 0x10	; 16
    56f0:	43 9e       	mul	r4, r19
    56f2:	c0 01       	movw	r24, r0
    56f4:	11 24       	eor	r1, r1
    56f6:	28 2b       	or	r18, r24
    56f8:	01 c0       	rjmp	.+2      	; 0x56fc <put_fat+0xba>
    56fa:	24 2d       	mov	r18, r4
    56fc:	22 ab       	std	Z+50, r18	; 0x32
    56fe:	81 e0       	ldi	r24, 0x01	; 1
    5700:	8c 83       	std	Y+4, r24	; 0x04
    5702:	4a a1       	ldd	r20, Y+34	; 0x22
    5704:	5b a1       	ldd	r21, Y+35	; 0x23
    5706:	6c a1       	ldd	r22, Y+36	; 0x24
    5708:	7d a1       	ldd	r23, Y+37	; 0x25
    570a:	c8 01       	movw	r24, r16
    570c:	89 2f       	mov	r24, r25
    570e:	99 27       	eor	r25, r25
    5710:	86 95       	lsr	r24
    5712:	48 0f       	add	r20, r24
    5714:	59 1f       	adc	r21, r25
    5716:	61 1d       	adc	r22, r1
    5718:	71 1d       	adc	r23, r1
    571a:	ce 01       	movw	r24, r28
    571c:	22 db       	rcall	.-2492   	; 0x4d62 <move_window>
    571e:	81 11       	cpse	r24, r1
    5720:	71 c0       	rjmp	.+226    	; 0x5804 <put_fat+0x1c2>
    5722:	f8 01       	movw	r30, r16
    5724:	f1 70       	andi	r31, 0x01	; 1
    5726:	ec 0f       	add	r30, r28
    5728:	fd 1f       	adc	r31, r29
    572a:	89 28       	or	r8, r9
    572c:	8a 28       	or	r8, r10
    572e:	8b 28       	or	r8, r11
    5730:	49 f0       	breq	.+18     	; 0x5744 <put_fat+0x102>
    5732:	b4 e0       	ldi	r27, 0x04	; 4
    5734:	76 94       	lsr	r7
    5736:	67 94       	ror	r6
    5738:	57 94       	ror	r5
    573a:	47 94       	ror	r4
    573c:	ba 95       	dec	r27
    573e:	d1 f7       	brne	.-12     	; 0x5734 <put_fat+0xf2>
    5740:	94 2d       	mov	r25, r4
    5742:	05 c0       	rjmp	.+10     	; 0x574e <put_fat+0x10c>
    5744:	92 a9       	ldd	r25, Z+50	; 0x32
    5746:	90 7f       	andi	r25, 0xF0	; 240
    5748:	25 2d       	mov	r18, r5
    574a:	2f 70       	andi	r18, 0x0F	; 15
    574c:	92 2b       	or	r25, r18
    574e:	92 ab       	std	Z+50, r25	; 0x32
    5750:	55 c0       	rjmp	.+170    	; 0x57fc <put_fat+0x1ba>
    5752:	45 2f       	mov	r20, r21
    5754:	56 2f       	mov	r21, r22
    5756:	67 2f       	mov	r22, r23
    5758:	77 27       	eor	r23, r23
    575a:	8a a1       	ldd	r24, Y+34	; 0x22
    575c:	9b a1       	ldd	r25, Y+35	; 0x23
    575e:	ac a1       	ldd	r26, Y+36	; 0x24
    5760:	bd a1       	ldd	r27, Y+37	; 0x25
    5762:	48 0f       	add	r20, r24
    5764:	59 1f       	adc	r21, r25
    5766:	6a 1f       	adc	r22, r26
    5768:	7b 1f       	adc	r23, r27
    576a:	ce 01       	movw	r24, r28
    576c:	fa da       	rcall	.-2572   	; 0x4d62 <move_window>
    576e:	81 11       	cpse	r24, r1
    5770:	49 c0       	rjmp	.+146    	; 0x5804 <put_fat+0x1c2>
    5772:	cc 0c       	add	r12, r12
    5774:	dd 1c       	adc	r13, r13
    5776:	ee 1c       	adc	r14, r14
    5778:	ff 1c       	adc	r15, r15
    577a:	e8 94       	clt
    577c:	c0 f8       	bld	r12, 0
    577e:	91 e0       	ldi	r25, 0x01	; 1
    5780:	d9 22       	and	r13, r25
    5782:	ee 24       	eor	r14, r14
    5784:	ff 24       	eor	r15, r15
    5786:	f6 01       	movw	r30, r12
    5788:	f2 96       	adiw	r30, 0x32	; 50
    578a:	ec 0f       	add	r30, r28
    578c:	fd 1f       	adc	r31, r29
    578e:	40 82       	st	Z, r4
    5790:	51 82       	std	Z+1, r5	; 0x01
    5792:	34 c0       	rjmp	.+104    	; 0x57fc <put_fat+0x1ba>
    5794:	e7 e0       	ldi	r30, 0x07	; 7
    5796:	76 95       	lsr	r23
    5798:	67 95       	ror	r22
    579a:	57 95       	ror	r21
    579c:	47 95       	ror	r20
    579e:	ea 95       	dec	r30
    57a0:	d1 f7       	brne	.-12     	; 0x5796 <put_fat+0x154>
    57a2:	8a a1       	ldd	r24, Y+34	; 0x22
    57a4:	9b a1       	ldd	r25, Y+35	; 0x23
    57a6:	ac a1       	ldd	r26, Y+36	; 0x24
    57a8:	bd a1       	ldd	r27, Y+37	; 0x25
    57aa:	48 0f       	add	r20, r24
    57ac:	59 1f       	adc	r21, r25
    57ae:	6a 1f       	adc	r22, r26
    57b0:	7b 1f       	adc	r23, r27
    57b2:	ce 01       	movw	r24, r28
    57b4:	d6 da       	rcall	.-2644   	; 0x4d62 <move_window>
    57b6:	81 11       	cpse	r24, r1
    57b8:	25 c0       	rjmp	.+74     	; 0x5804 <put_fat+0x1c2>
    57ba:	72 e0       	ldi	r23, 0x02	; 2
    57bc:	cc 0c       	add	r12, r12
    57be:	dd 1c       	adc	r13, r13
    57c0:	ee 1c       	adc	r14, r14
    57c2:	ff 1c       	adc	r15, r15
    57c4:	7a 95       	dec	r23
    57c6:	d1 f7       	brne	.-12     	; 0x57bc <put_fat+0x17a>
    57c8:	3c ef       	ldi	r19, 0xFC	; 252
    57ca:	c3 22       	and	r12, r19
    57cc:	31 e0       	ldi	r19, 0x01	; 1
    57ce:	d3 22       	and	r13, r19
    57d0:	ee 24       	eor	r14, r14
    57d2:	ff 24       	eor	r15, r15
    57d4:	f6 01       	movw	r30, r12
    57d6:	f2 96       	adiw	r30, 0x32	; 50
    57d8:	ec 0f       	add	r30, r28
    57da:	fd 1f       	adc	r31, r29
    57dc:	40 81       	ld	r20, Z
    57de:	51 81       	ldd	r21, Z+1	; 0x01
    57e0:	62 81       	ldd	r22, Z+2	; 0x02
    57e2:	73 81       	ldd	r23, Z+3	; 0x03
    57e4:	44 27       	eor	r20, r20
    57e6:	55 27       	eor	r21, r21
    57e8:	66 27       	eor	r22, r22
    57ea:	70 7f       	andi	r23, 0xF0	; 240
    57ec:	44 29       	or	r20, r4
    57ee:	55 29       	or	r21, r5
    57f0:	66 29       	or	r22, r6
    57f2:	77 29       	or	r23, r7
    57f4:	40 83       	st	Z, r20
    57f6:	51 83       	std	Z+1, r21	; 0x01
    57f8:	62 83       	std	Z+2, r22	; 0x02
    57fa:	73 83       	std	Z+3, r23	; 0x03
    57fc:	91 e0       	ldi	r25, 0x01	; 1
    57fe:	9c 83       	std	Y+4, r25	; 0x04
    5800:	01 c0       	rjmp	.+2      	; 0x5804 <put_fat+0x1c2>
    5802:	82 e0       	ldi	r24, 0x02	; 2
    5804:	df 91       	pop	r29
    5806:	cf 91       	pop	r28
    5808:	1f 91       	pop	r17
    580a:	0f 91       	pop	r16
    580c:	ff 90       	pop	r15
    580e:	ef 90       	pop	r14
    5810:	df 90       	pop	r13
    5812:	cf 90       	pop	r12
    5814:	bf 90       	pop	r11
    5816:	af 90       	pop	r10
    5818:	9f 90       	pop	r9
    581a:	8f 90       	pop	r8
    581c:	7f 90       	pop	r7
    581e:	6f 90       	pop	r6
    5820:	5f 90       	pop	r5
    5822:	4f 90       	pop	r4
    5824:	08 95       	ret

00005826 <create_chain>:
    5826:	4f 92       	push	r4
    5828:	5f 92       	push	r5
    582a:	6f 92       	push	r6
    582c:	7f 92       	push	r7
    582e:	8f 92       	push	r8
    5830:	9f 92       	push	r9
    5832:	af 92       	push	r10
    5834:	bf 92       	push	r11
    5836:	cf 92       	push	r12
    5838:	df 92       	push	r13
    583a:	ef 92       	push	r14
    583c:	ff 92       	push	r15
    583e:	0f 93       	push	r16
    5840:	1f 93       	push	r17
    5842:	cf 93       	push	r28
    5844:	df 93       	push	r29
    5846:	ec 01       	movw	r28, r24
    5848:	2a 01       	movw	r4, r20
    584a:	3b 01       	movw	r6, r22
    584c:	41 15       	cp	r20, r1
    584e:	51 05       	cpc	r21, r1
    5850:	61 05       	cpc	r22, r1
    5852:	71 05       	cpc	r23, r1
    5854:	99 f4       	brne	.+38     	; 0x587c <create_chain+0x56>
    5856:	8a 84       	ldd	r8, Y+10	; 0x0a
    5858:	9b 84       	ldd	r9, Y+11	; 0x0b
    585a:	ac 84       	ldd	r10, Y+12	; 0x0c
    585c:	bd 84       	ldd	r11, Y+13	; 0x0d
    585e:	81 14       	cp	r8, r1
    5860:	91 04       	cpc	r9, r1
    5862:	a1 04       	cpc	r10, r1
    5864:	b1 04       	cpc	r11, r1
    5866:	49 f1       	breq	.+82     	; 0x58ba <create_chain+0x94>
    5868:	4e 89       	ldd	r20, Y+22	; 0x16
    586a:	5f 89       	ldd	r21, Y+23	; 0x17
    586c:	68 8d       	ldd	r22, Y+24	; 0x18
    586e:	79 8d       	ldd	r23, Y+25	; 0x19
    5870:	84 16       	cp	r8, r20
    5872:	95 06       	cpc	r9, r21
    5874:	a6 06       	cpc	r10, r22
    5876:	b7 06       	cpc	r11, r23
    5878:	00 f5       	brcc	.+64     	; 0x58ba <create_chain+0x94>
    587a:	23 c0       	rjmp	.+70     	; 0x58c2 <create_chain+0x9c>
    587c:	79 dd       	rcall	.-1294   	; 0x5370 <get_fat>
    587e:	62 30       	cpi	r22, 0x02	; 2
    5880:	71 05       	cpc	r23, r1
    5882:	81 05       	cpc	r24, r1
    5884:	91 05       	cpc	r25, r1
    5886:	08 f4       	brcc	.+2      	; 0x588a <create_chain+0x64>
    5888:	92 c0       	rjmp	.+292    	; 0x59ae <create_chain+0x188>
    588a:	6f 3f       	cpi	r22, 0xFF	; 255
    588c:	2f ef       	ldi	r18, 0xFF	; 255
    588e:	72 07       	cpc	r23, r18
    5890:	82 07       	cpc	r24, r18
    5892:	92 07       	cpc	r25, r18
    5894:	29 f4       	brne	.+10     	; 0x58a0 <create_chain+0x7a>
    5896:	4f ef       	ldi	r20, 0xFF	; 255
    5898:	3f ef       	ldi	r19, 0xFF	; 255
    589a:	2f ef       	ldi	r18, 0xFF	; 255
    589c:	9f ef       	ldi	r25, 0xFF	; 255
    589e:	8c c0       	rjmp	.+280    	; 0x59b8 <create_chain+0x192>
    58a0:	ce 88       	ldd	r12, Y+22	; 0x16
    58a2:	df 88       	ldd	r13, Y+23	; 0x17
    58a4:	e8 8c       	ldd	r14, Y+24	; 0x18
    58a6:	f9 8c       	ldd	r15, Y+25	; 0x19
    58a8:	6c 15       	cp	r22, r12
    58aa:	7d 05       	cpc	r23, r13
    58ac:	8e 05       	cpc	r24, r14
    58ae:	9f 05       	cpc	r25, r15
    58b0:	08 f4       	brcc	.+2      	; 0x58b4 <create_chain+0x8e>
    58b2:	7f c0       	rjmp	.+254    	; 0x59b2 <create_chain+0x18c>
    58b4:	53 01       	movw	r10, r6
    58b6:	42 01       	movw	r8, r4
    58b8:	04 c0       	rjmp	.+8      	; 0x58c2 <create_chain+0x9c>
    58ba:	81 2c       	mov	r8, r1
    58bc:	91 2c       	mov	r9, r1
    58be:	54 01       	movw	r10, r8
    58c0:	83 94       	inc	r8
    58c2:	75 01       	movw	r14, r10
    58c4:	64 01       	movw	r12, r8
    58c6:	8f ef       	ldi	r24, 0xFF	; 255
    58c8:	c8 1a       	sub	r12, r24
    58ca:	d8 0a       	sbc	r13, r24
    58cc:	e8 0a       	sbc	r14, r24
    58ce:	f8 0a       	sbc	r15, r24
    58d0:	4e 89       	ldd	r20, Y+22	; 0x16
    58d2:	5f 89       	ldd	r21, Y+23	; 0x17
    58d4:	68 8d       	ldd	r22, Y+24	; 0x18
    58d6:	79 8d       	ldd	r23, Y+25	; 0x19
    58d8:	c4 16       	cp	r12, r20
    58da:	d5 06       	cpc	r13, r21
    58dc:	e6 06       	cpc	r14, r22
    58de:	f7 06       	cpc	r15, r23
    58e0:	80 f0       	brcs	.+32     	; 0x5902 <create_chain+0xdc>
    58e2:	22 e0       	ldi	r18, 0x02	; 2
    58e4:	82 16       	cp	r8, r18
    58e6:	91 04       	cpc	r9, r1
    58e8:	a1 04       	cpc	r10, r1
    58ea:	b1 04       	cpc	r11, r1
    58ec:	28 f4       	brcc	.+10     	; 0x58f8 <create_chain+0xd2>
    58ee:	40 e0       	ldi	r20, 0x00	; 0
    58f0:	30 e0       	ldi	r19, 0x00	; 0
    58f2:	20 e0       	ldi	r18, 0x00	; 0
    58f4:	90 e0       	ldi	r25, 0x00	; 0
    58f6:	60 c0       	rjmp	.+192    	; 0x59b8 <create_chain+0x192>
    58f8:	52 e0       	ldi	r21, 0x02	; 2
    58fa:	c5 2e       	mov	r12, r21
    58fc:	d1 2c       	mov	r13, r1
    58fe:	e1 2c       	mov	r14, r1
    5900:	f1 2c       	mov	r15, r1
    5902:	b7 01       	movw	r22, r14
    5904:	a6 01       	movw	r20, r12
    5906:	ce 01       	movw	r24, r28
    5908:	33 dd       	rcall	.-1434   	; 0x5370 <get_fat>
    590a:	61 15       	cp	r22, r1
    590c:	71 05       	cpc	r23, r1
    590e:	81 05       	cpc	r24, r1
    5910:	91 05       	cpc	r25, r1
    5912:	99 f0       	breq	.+38     	; 0x593a <create_chain+0x114>
    5914:	6f 3f       	cpi	r22, 0xFF	; 255
    5916:	2f ef       	ldi	r18, 0xFF	; 255
    5918:	72 07       	cpc	r23, r18
    591a:	82 07       	cpc	r24, r18
    591c:	92 07       	cpc	r25, r18
    591e:	09 f4       	brne	.+2      	; 0x5922 <create_chain+0xfc>
    5920:	ba cf       	rjmp	.-140    	; 0x5896 <create_chain+0x70>
    5922:	61 30       	cpi	r22, 0x01	; 1
    5924:	71 05       	cpc	r23, r1
    5926:	81 05       	cpc	r24, r1
    5928:	91 05       	cpc	r25, r1
    592a:	09 f4       	brne	.+2      	; 0x592e <create_chain+0x108>
    592c:	40 c0       	rjmp	.+128    	; 0x59ae <create_chain+0x188>
    592e:	c8 14       	cp	r12, r8
    5930:	d9 04       	cpc	r13, r9
    5932:	ea 04       	cpc	r14, r10
    5934:	fb 04       	cpc	r15, r11
    5936:	39 f6       	brne	.-114    	; 0x58c6 <create_chain+0xa0>
    5938:	da cf       	rjmp	.-76     	; 0x58ee <create_chain+0xc8>
    593a:	0f ef       	ldi	r16, 0xFF	; 255
    593c:	1f ef       	ldi	r17, 0xFF	; 255
    593e:	2f ef       	ldi	r18, 0xFF	; 255
    5940:	3f e0       	ldi	r19, 0x0F	; 15
    5942:	b7 01       	movw	r22, r14
    5944:	a6 01       	movw	r20, r12
    5946:	ce 01       	movw	r24, r28
    5948:	7c de       	rcall	.-776    	; 0x5642 <put_fat>
    594a:	81 11       	cpse	r24, r1
    594c:	2d c0       	rjmp	.+90     	; 0x59a8 <create_chain+0x182>
    594e:	41 14       	cp	r4, r1
    5950:	51 04       	cpc	r5, r1
    5952:	61 04       	cpc	r6, r1
    5954:	71 04       	cpc	r7, r1
    5956:	d1 f4       	brne	.+52     	; 0x598c <create_chain+0x166>
    5958:	ca 86       	std	Y+10, r12	; 0x0a
    595a:	db 86       	std	Y+11, r13	; 0x0b
    595c:	ec 86       	std	Y+12, r14	; 0x0c
    595e:	fd 86       	std	Y+13, r15	; 0x0d
    5960:	4e 85       	ldd	r20, Y+14	; 0x0e
    5962:	5f 85       	ldd	r21, Y+15	; 0x0f
    5964:	68 89       	ldd	r22, Y+16	; 0x10
    5966:	79 89       	ldd	r23, Y+17	; 0x11
    5968:	4f 3f       	cpi	r20, 0xFF	; 255
    596a:	8f ef       	ldi	r24, 0xFF	; 255
    596c:	58 07       	cpc	r21, r24
    596e:	68 07       	cpc	r22, r24
    5970:	78 07       	cpc	r23, r24
    5972:	a9 f0       	breq	.+42     	; 0x599e <create_chain+0x178>
    5974:	41 50       	subi	r20, 0x01	; 1
    5976:	51 09       	sbc	r21, r1
    5978:	61 09       	sbc	r22, r1
    597a:	71 09       	sbc	r23, r1
    597c:	4e 87       	std	Y+14, r20	; 0x0e
    597e:	5f 87       	std	Y+15, r21	; 0x0f
    5980:	68 8b       	std	Y+16, r22	; 0x10
    5982:	79 8b       	std	Y+17, r23	; 0x11
    5984:	8d 81       	ldd	r24, Y+5	; 0x05
    5986:	81 60       	ori	r24, 0x01	; 1
    5988:	8d 83       	std	Y+5, r24	; 0x05
    598a:	09 c0       	rjmp	.+18     	; 0x599e <create_chain+0x178>
    598c:	97 01       	movw	r18, r14
    598e:	86 01       	movw	r16, r12
    5990:	b3 01       	movw	r22, r6
    5992:	a2 01       	movw	r20, r4
    5994:	ce 01       	movw	r24, r28
    5996:	55 de       	rcall	.-854    	; 0x5642 <put_fat>
    5998:	88 23       	and	r24, r24
    599a:	f1 f2       	breq	.-68     	; 0x5958 <create_chain+0x132>
    599c:	05 c0       	rjmp	.+10     	; 0x59a8 <create_chain+0x182>
    599e:	4c 2d       	mov	r20, r12
    59a0:	3d 2d       	mov	r19, r13
    59a2:	2e 2d       	mov	r18, r14
    59a4:	9f 2d       	mov	r25, r15
    59a6:	08 c0       	rjmp	.+16     	; 0x59b8 <create_chain+0x192>
    59a8:	81 30       	cpi	r24, 0x01	; 1
    59aa:	09 f4       	brne	.+2      	; 0x59ae <create_chain+0x188>
    59ac:	74 cf       	rjmp	.-280    	; 0x5896 <create_chain+0x70>
    59ae:	41 e0       	ldi	r20, 0x01	; 1
    59b0:	9f cf       	rjmp	.-194    	; 0x58f0 <create_chain+0xca>
    59b2:	46 2f       	mov	r20, r22
    59b4:	37 2f       	mov	r19, r23
    59b6:	28 2f       	mov	r18, r24
    59b8:	64 2f       	mov	r22, r20
    59ba:	73 2f       	mov	r23, r19
    59bc:	82 2f       	mov	r24, r18
    59be:	df 91       	pop	r29
    59c0:	cf 91       	pop	r28
    59c2:	1f 91       	pop	r17
    59c4:	0f 91       	pop	r16
    59c6:	ff 90       	pop	r15
    59c8:	ef 90       	pop	r14
    59ca:	df 90       	pop	r13
    59cc:	cf 90       	pop	r12
    59ce:	bf 90       	pop	r11
    59d0:	af 90       	pop	r10
    59d2:	9f 90       	pop	r9
    59d4:	8f 90       	pop	r8
    59d6:	7f 90       	pop	r7
    59d8:	6f 90       	pop	r6
    59da:	5f 90       	pop	r5
    59dc:	4f 90       	pop	r4
    59de:	08 95       	ret

000059e0 <dir_next>:
    59e0:	7f 92       	push	r7
    59e2:	8f 92       	push	r8
    59e4:	9f 92       	push	r9
    59e6:	af 92       	push	r10
    59e8:	bf 92       	push	r11
    59ea:	cf 92       	push	r12
    59ec:	df 92       	push	r13
    59ee:	ef 92       	push	r14
    59f0:	ff 92       	push	r15
    59f2:	0f 93       	push	r16
    59f4:	1f 93       	push	r17
    59f6:	cf 93       	push	r28
    59f8:	df 93       	push	r29
    59fa:	ec 01       	movw	r28, r24
    59fc:	6b 01       	movw	r12, r22
    59fe:	0c 81       	ldd	r16, Y+4	; 0x04
    5a00:	1d 81       	ldd	r17, Y+5	; 0x05
    5a02:	0f 5f       	subi	r16, 0xFF	; 255
    5a04:	1f 4f       	sbci	r17, 0xFF	; 255
    5a06:	01 15       	cp	r16, r1
    5a08:	11 05       	cpc	r17, r1
    5a0a:	11 f4       	brne	.+4      	; 0x5a10 <dir_next+0x30>
    5a0c:	84 e0       	ldi	r24, 0x04	; 4
    5a0e:	d8 c0       	rjmp	.+432    	; 0x5bc0 <dir_next+0x1e0>
    5a10:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a12:	9f 85       	ldd	r25, Y+15	; 0x0f
    5a14:	a8 89       	ldd	r26, Y+16	; 0x10
    5a16:	b9 89       	ldd	r27, Y+17	; 0x11
    5a18:	00 97       	sbiw	r24, 0x00	; 0
    5a1a:	a1 05       	cpc	r26, r1
    5a1c:	b1 05       	cpc	r27, r1
    5a1e:	b1 f3       	breq	.-20     	; 0x5a0c <dir_next+0x2c>
    5a20:	78 01       	movw	r14, r16
    5a22:	2f e0       	ldi	r18, 0x0F	; 15
    5a24:	e2 22       	and	r14, r18
    5a26:	ff 24       	eor	r15, r15
    5a28:	e1 14       	cp	r14, r1
    5a2a:	f1 04       	cpc	r15, r1
    5a2c:	09 f0       	breq	.+2      	; 0x5a30 <dir_next+0x50>
    5a2e:	b5 c0       	rjmp	.+362    	; 0x5b9a <dir_next+0x1ba>
    5a30:	01 96       	adiw	r24, 0x01	; 1
    5a32:	a1 1d       	adc	r26, r1
    5a34:	b1 1d       	adc	r27, r1
    5a36:	8e 87       	std	Y+14, r24	; 0x0e
    5a38:	9f 87       	std	Y+15, r25	; 0x0f
    5a3a:	a8 8b       	std	Y+16, r26	; 0x10
    5a3c:	b9 8b       	std	Y+17, r27	; 0x11
    5a3e:	4a 85       	ldd	r20, Y+10	; 0x0a
    5a40:	5b 85       	ldd	r21, Y+11	; 0x0b
    5a42:	6c 85       	ldd	r22, Y+12	; 0x0c
    5a44:	7d 85       	ldd	r23, Y+13	; 0x0d
    5a46:	88 81       	ld	r24, Y
    5a48:	99 81       	ldd	r25, Y+1	; 0x01
    5a4a:	fc 01       	movw	r30, r24
    5a4c:	41 15       	cp	r20, r1
    5a4e:	51 05       	cpc	r21, r1
    5a50:	61 05       	cpc	r22, r1
    5a52:	71 05       	cpc	r23, r1
    5a54:	31 f4       	brne	.+12     	; 0x5a62 <dir_next+0x82>
    5a56:	80 85       	ldd	r24, Z+8	; 0x08
    5a58:	91 85       	ldd	r25, Z+9	; 0x09
    5a5a:	08 17       	cp	r16, r24
    5a5c:	19 07       	cpc	r17, r25
    5a5e:	b0 f6       	brcc	.-84     	; 0x5a0c <dir_next+0x2c>
    5a60:	9c c0       	rjmp	.+312    	; 0x5b9a <dir_next+0x1ba>
    5a62:	22 81       	ldd	r18, Z+2	; 0x02
    5a64:	30 e0       	ldi	r19, 0x00	; 0
    5a66:	21 50       	subi	r18, 0x01	; 1
    5a68:	31 09       	sbc	r19, r1
    5a6a:	f8 01       	movw	r30, r16
    5a6c:	a4 e0       	ldi	r26, 0x04	; 4
    5a6e:	f6 95       	lsr	r31
    5a70:	e7 95       	ror	r30
    5a72:	aa 95       	dec	r26
    5a74:	e1 f7       	brne	.-8      	; 0x5a6e <dir_next+0x8e>
    5a76:	2e 23       	and	r18, r30
    5a78:	3f 23       	and	r19, r31
    5a7a:	23 2b       	or	r18, r19
    5a7c:	09 f0       	breq	.+2      	; 0x5a80 <dir_next+0xa0>
    5a7e:	8d c0       	rjmp	.+282    	; 0x5b9a <dir_next+0x1ba>
    5a80:	77 dc       	rcall	.-1810   	; 0x5370 <get_fat>
    5a82:	4b 01       	movw	r8, r22
    5a84:	5c 01       	movw	r10, r24
    5a86:	62 30       	cpi	r22, 0x02	; 2
    5a88:	71 05       	cpc	r23, r1
    5a8a:	81 05       	cpc	r24, r1
    5a8c:	91 05       	cpc	r25, r1
    5a8e:	10 f4       	brcc	.+4      	; 0x5a94 <dir_next+0xb4>
    5a90:	82 e0       	ldi	r24, 0x02	; 2
    5a92:	96 c0       	rjmp	.+300    	; 0x5bc0 <dir_next+0x1e0>
    5a94:	6f 3f       	cpi	r22, 0xFF	; 255
    5a96:	2f ef       	ldi	r18, 0xFF	; 255
    5a98:	72 07       	cpc	r23, r18
    5a9a:	82 07       	cpc	r24, r18
    5a9c:	92 07       	cpc	r25, r18
    5a9e:	11 f4       	brne	.+4      	; 0x5aa4 <dir_next+0xc4>
    5aa0:	81 e0       	ldi	r24, 0x01	; 1
    5aa2:	8e c0       	rjmp	.+284    	; 0x5bc0 <dir_next+0x1e0>
    5aa4:	88 81       	ld	r24, Y
    5aa6:	99 81       	ldd	r25, Y+1	; 0x01
    5aa8:	fc 01       	movw	r30, r24
    5aaa:	46 89       	ldd	r20, Z+22	; 0x16
    5aac:	57 89       	ldd	r21, Z+23	; 0x17
    5aae:	60 8d       	ldd	r22, Z+24	; 0x18
    5ab0:	71 8d       	ldd	r23, Z+25	; 0x19
    5ab2:	84 16       	cp	r8, r20
    5ab4:	95 06       	cpc	r9, r21
    5ab6:	a6 06       	cpc	r10, r22
    5ab8:	b7 06       	cpc	r11, r23
    5aba:	08 f4       	brcc	.+2      	; 0x5abe <dir_next+0xde>
    5abc:	61 c0       	rjmp	.+194    	; 0x5b80 <dir_next+0x1a0>
    5abe:	cd 28       	or	r12, r13
    5ac0:	09 f4       	brne	.+2      	; 0x5ac4 <dir_next+0xe4>
    5ac2:	a4 cf       	rjmp	.-184    	; 0x5a0c <dir_next+0x2c>
    5ac4:	4a 85       	ldd	r20, Y+10	; 0x0a
    5ac6:	5b 85       	ldd	r21, Y+11	; 0x0b
    5ac8:	6c 85       	ldd	r22, Y+12	; 0x0c
    5aca:	7d 85       	ldd	r23, Y+13	; 0x0d
    5acc:	ac de       	rcall	.-680    	; 0x5826 <create_chain>
    5ace:	4b 01       	movw	r8, r22
    5ad0:	5c 01       	movw	r10, r24
    5ad2:	61 15       	cp	r22, r1
    5ad4:	71 05       	cpc	r23, r1
    5ad6:	81 05       	cpc	r24, r1
    5ad8:	91 05       	cpc	r25, r1
    5ada:	09 f4       	brne	.+2      	; 0x5ade <dir_next+0xfe>
    5adc:	70 c0       	rjmp	.+224    	; 0x5bbe <dir_next+0x1de>
    5ade:	61 30       	cpi	r22, 0x01	; 1
    5ae0:	71 05       	cpc	r23, r1
    5ae2:	81 05       	cpc	r24, r1
    5ae4:	91 05       	cpc	r25, r1
    5ae6:	a1 f2       	breq	.-88     	; 0x5a90 <dir_next+0xb0>
    5ae8:	6f 3f       	cpi	r22, 0xFF	; 255
    5aea:	2f ef       	ldi	r18, 0xFF	; 255
    5aec:	72 07       	cpc	r23, r18
    5aee:	82 07       	cpc	r24, r18
    5af0:	92 07       	cpc	r25, r18
    5af2:	b1 f2       	breq	.-84     	; 0x5aa0 <dir_next+0xc0>
    5af4:	88 81       	ld	r24, Y
    5af6:	99 81       	ldd	r25, Y+1	; 0x01
    5af8:	60 d8       	rcall	.-3904   	; 0x4bba <sync_window>
    5afa:	81 11       	cpse	r24, r1
    5afc:	d1 cf       	rjmp	.-94     	; 0x5aa0 <dir_next+0xc0>
    5afe:	88 81       	ld	r24, Y
    5b00:	99 81       	ldd	r25, Y+1	; 0x01
    5b02:	40 e0       	ldi	r20, 0x00	; 0
    5b04:	52 e0       	ldi	r21, 0x02	; 2
    5b06:	60 e0       	ldi	r22, 0x00	; 0
    5b08:	70 e0       	ldi	r23, 0x00	; 0
    5b0a:	c2 96       	adiw	r24, 0x32	; 50
    5b0c:	0a d8       	rcall	.-4076   	; 0x4b22 <mem_set>
    5b0e:	c8 80       	ld	r12, Y
    5b10:	d9 80       	ldd	r13, Y+1	; 0x01
    5b12:	b5 01       	movw	r22, r10
    5b14:	a4 01       	movw	r20, r8
    5b16:	c6 01       	movw	r24, r12
    5b18:	02 dc       	rcall	.-2044   	; 0x531e <clust2sect>
    5b1a:	f6 01       	movw	r30, r12
    5b1c:	66 a7       	std	Z+46, r22	; 0x2e
    5b1e:	77 a7       	std	Z+47, r23	; 0x2f
    5b20:	80 ab       	std	Z+48, r24	; 0x30
    5b22:	91 ab       	std	Z+49, r25	; 0x31
    5b24:	c1 2c       	mov	r12, r1
    5b26:	d1 2c       	mov	r13, r1
    5b28:	77 24       	eor	r7, r7
    5b2a:	73 94       	inc	r7
    5b2c:	e8 81       	ld	r30, Y
    5b2e:	f9 81       	ldd	r31, Y+1	; 0x01
    5b30:	82 81       	ldd	r24, Z+2	; 0x02
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	c8 16       	cp	r12, r24
    5b36:	d9 06       	cpc	r13, r25
    5b38:	b8 f4       	brcc	.+46     	; 0x5b68 <dir_next+0x188>
    5b3a:	74 82       	std	Z+4, r7	; 0x04
    5b3c:	88 81       	ld	r24, Y
    5b3e:	99 81       	ldd	r25, Y+1	; 0x01
    5b40:	3c d8       	rcall	.-3976   	; 0x4bba <sync_window>
    5b42:	81 11       	cpse	r24, r1
    5b44:	ad cf       	rjmp	.-166    	; 0x5aa0 <dir_next+0xc0>
    5b46:	e8 81       	ld	r30, Y
    5b48:	f9 81       	ldd	r31, Y+1	; 0x01
    5b4a:	86 a5       	ldd	r24, Z+46	; 0x2e
    5b4c:	97 a5       	ldd	r25, Z+47	; 0x2f
    5b4e:	a0 a9       	ldd	r26, Z+48	; 0x30
    5b50:	b1 a9       	ldd	r27, Z+49	; 0x31
    5b52:	01 96       	adiw	r24, 0x01	; 1
    5b54:	a1 1d       	adc	r26, r1
    5b56:	b1 1d       	adc	r27, r1
    5b58:	86 a7       	std	Z+46, r24	; 0x2e
    5b5a:	97 a7       	std	Z+47, r25	; 0x2f
    5b5c:	a0 ab       	std	Z+48, r26	; 0x30
    5b5e:	b1 ab       	std	Z+49, r27	; 0x31
    5b60:	ff ef       	ldi	r31, 0xFF	; 255
    5b62:	cf 1a       	sub	r12, r31
    5b64:	df 0a       	sbc	r13, r31
    5b66:	e2 cf       	rjmp	.-60     	; 0x5b2c <dir_next+0x14c>
    5b68:	86 a5       	ldd	r24, Z+46	; 0x2e
    5b6a:	97 a5       	ldd	r25, Z+47	; 0x2f
    5b6c:	a0 a9       	ldd	r26, Z+48	; 0x30
    5b6e:	b1 a9       	ldd	r27, Z+49	; 0x31
    5b70:	8c 19       	sub	r24, r12
    5b72:	9d 09       	sbc	r25, r13
    5b74:	a1 09       	sbc	r26, r1
    5b76:	b1 09       	sbc	r27, r1
    5b78:	86 a7       	std	Z+46, r24	; 0x2e
    5b7a:	97 a7       	std	Z+47, r25	; 0x2f
    5b7c:	a0 ab       	std	Z+48, r26	; 0x30
    5b7e:	b1 ab       	std	Z+49, r27	; 0x31
    5b80:	8a 86       	std	Y+10, r8	; 0x0a
    5b82:	9b 86       	std	Y+11, r9	; 0x0b
    5b84:	ac 86       	std	Y+12, r10	; 0x0c
    5b86:	bd 86       	std	Y+13, r11	; 0x0d
    5b88:	b5 01       	movw	r22, r10
    5b8a:	a4 01       	movw	r20, r8
    5b8c:	88 81       	ld	r24, Y
    5b8e:	99 81       	ldd	r25, Y+1	; 0x01
    5b90:	c6 db       	rcall	.-2164   	; 0x531e <clust2sect>
    5b92:	6e 87       	std	Y+14, r22	; 0x0e
    5b94:	7f 87       	std	Y+15, r23	; 0x0f
    5b96:	88 8b       	std	Y+16, r24	; 0x10
    5b98:	99 8b       	std	Y+17, r25	; 0x11
    5b9a:	0c 83       	std	Y+4, r16	; 0x04
    5b9c:	1d 83       	std	Y+5, r17	; 0x05
    5b9e:	75 e0       	ldi	r23, 0x05	; 5
    5ba0:	ee 0c       	add	r14, r14
    5ba2:	ff 1c       	adc	r15, r15
    5ba4:	7a 95       	dec	r23
    5ba6:	e1 f7       	brne	.-8      	; 0x5ba0 <dir_next+0x1c0>
    5ba8:	22 e3       	ldi	r18, 0x32	; 50
    5baa:	e2 0e       	add	r14, r18
    5bac:	f1 1c       	adc	r15, r1
    5bae:	88 81       	ld	r24, Y
    5bb0:	99 81       	ldd	r25, Y+1	; 0x01
    5bb2:	8e 0d       	add	r24, r14
    5bb4:	9f 1d       	adc	r25, r15
    5bb6:	8a 8b       	std	Y+18, r24	; 0x12
    5bb8:	9b 8b       	std	Y+19, r25	; 0x13
    5bba:	80 e0       	ldi	r24, 0x00	; 0
    5bbc:	01 c0       	rjmp	.+2      	; 0x5bc0 <dir_next+0x1e0>
    5bbe:	87 e0       	ldi	r24, 0x07	; 7
    5bc0:	df 91       	pop	r29
    5bc2:	cf 91       	pop	r28
    5bc4:	1f 91       	pop	r17
    5bc6:	0f 91       	pop	r16
    5bc8:	ff 90       	pop	r15
    5bca:	ef 90       	pop	r14
    5bcc:	df 90       	pop	r13
    5bce:	cf 90       	pop	r12
    5bd0:	bf 90       	pop	r11
    5bd2:	af 90       	pop	r10
    5bd4:	9f 90       	pop	r9
    5bd6:	8f 90       	pop	r8
    5bd8:	7f 90       	pop	r7
    5bda:	08 95       	ret

00005bdc <follow_path>:
    5bdc:	8f 92       	push	r8
    5bde:	9f 92       	push	r9
    5be0:	af 92       	push	r10
    5be2:	bf 92       	push	r11
    5be4:	cf 92       	push	r12
    5be6:	df 92       	push	r13
    5be8:	ff 92       	push	r15
    5bea:	0f 93       	push	r16
    5bec:	1f 93       	push	r17
    5bee:	cf 93       	push	r28
    5bf0:	df 93       	push	r29
    5bf2:	ec 01       	movw	r28, r24
    5bf4:	8b 01       	movw	r16, r22
    5bf6:	fb 01       	movw	r30, r22
    5bf8:	80 81       	ld	r24, Z
    5bfa:	8f 32       	cpi	r24, 0x2F	; 47
    5bfc:	11 f0       	breq	.+4      	; 0x5c02 <follow_path+0x26>
    5bfe:	8c 35       	cpi	r24, 0x5C	; 92
    5c00:	39 f4       	brne	.+14     	; 0x5c10 <follow_path+0x34>
    5c02:	0f 5f       	subi	r16, 0xFF	; 255
    5c04:	1f 4f       	sbci	r17, 0xFF	; 255
    5c06:	1e 82       	std	Y+6, r1	; 0x06
    5c08:	1f 82       	std	Y+7, r1	; 0x07
    5c0a:	18 86       	std	Y+8, r1	; 0x08
    5c0c:	19 86       	std	Y+9, r1	; 0x09
    5c0e:	0a c0       	rjmp	.+20     	; 0x5c24 <follow_path+0x48>
    5c10:	e8 81       	ld	r30, Y
    5c12:	f9 81       	ldd	r31, Y+1	; 0x01
    5c14:	82 89       	ldd	r24, Z+18	; 0x12
    5c16:	93 89       	ldd	r25, Z+19	; 0x13
    5c18:	a4 89       	ldd	r26, Z+20	; 0x14
    5c1a:	b5 89       	ldd	r27, Z+21	; 0x15
    5c1c:	8e 83       	std	Y+6, r24	; 0x06
    5c1e:	9f 83       	std	Y+7, r25	; 0x07
    5c20:	a8 87       	std	Y+8, r26	; 0x08
    5c22:	b9 87       	std	Y+9, r27	; 0x09
    5c24:	f8 01       	movw	r30, r16
    5c26:	80 81       	ld	r24, Z
    5c28:	80 32       	cpi	r24, 0x20	; 32
    5c2a:	18 f0       	brcs	.+6      	; 0x5c32 <follow_path+0x56>
    5c2c:	35 e0       	ldi	r19, 0x05	; 5
    5c2e:	f3 2e       	mov	r15, r19
    5c30:	09 c0       	rjmp	.+18     	; 0x5c44 <follow_path+0x68>
    5c32:	60 e0       	ldi	r22, 0x00	; 0
    5c34:	70 e0       	ldi	r23, 0x00	; 0
    5c36:	ce 01       	movw	r24, r28
    5c38:	5f dc       	rcall	.-1858   	; 0x54f8 <dir_sdi>
    5c3a:	1a 8a       	std	Y+18, r1	; 0x12
    5c3c:	1b 8a       	std	Y+19, r1	; 0x13
    5c3e:	31 c1       	rjmp	.+610    	; 0x5ea2 <follow_path+0x2c6>
    5c40:	8c 35       	cpi	r24, 0x5C	; 92
    5c42:	41 f4       	brne	.+16     	; 0x5c54 <follow_path+0x78>
    5c44:	58 01       	movw	r10, r16
    5c46:	f8 01       	movw	r30, r16
    5c48:	80 81       	ld	r24, Z
    5c4a:	0f 5f       	subi	r16, 0xFF	; 255
    5c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    5c4e:	8f 32       	cpi	r24, 0x2F	; 47
    5c50:	b9 f7       	brne	.-18     	; 0x5c40 <follow_path+0x64>
    5c52:	f8 cf       	rjmp	.-16     	; 0x5c44 <follow_path+0x68>
    5c54:	cc 88       	ldd	r12, Y+20	; 0x14
    5c56:	dd 88       	ldd	r13, Y+21	; 0x15
    5c58:	4b e0       	ldi	r20, 0x0B	; 11
    5c5a:	50 e0       	ldi	r21, 0x00	; 0
    5c5c:	60 e2       	ldi	r22, 0x20	; 32
    5c5e:	70 e0       	ldi	r23, 0x00	; 0
    5c60:	c6 01       	movw	r24, r12
    5c62:	0e 94 91 25 	call	0x4b22	; 0x4b22 <mem_set>
    5c66:	f5 01       	movw	r30, r10
    5c68:	80 81       	ld	r24, Z
    5c6a:	8e 32       	cpi	r24, 0x2E	; 46
    5c6c:	41 f0       	breq	.+16     	; 0x5c7e <follow_path+0xa2>
    5c6e:	20 e0       	ldi	r18, 0x00	; 0
    5c70:	30 e0       	ldi	r19, 0x00	; 0
    5c72:	40 e0       	ldi	r20, 0x00	; 0
    5c74:	50 e0       	ldi	r21, 0x00	; 0
    5c76:	88 e0       	ldi	r24, 0x08	; 8
    5c78:	90 e0       	ldi	r25, 0x00	; 0
    5c7a:	b0 e0       	ldi	r27, 0x00	; 0
    5c7c:	32 c0       	rjmp	.+100    	; 0x5ce2 <follow_path+0x106>
    5c7e:	d5 01       	movw	r26, r10
    5c80:	f6 01       	movw	r30, r12
    5c82:	00 e0       	ldi	r16, 0x00	; 0
    5c84:	10 e0       	ldi	r17, 0x00	; 0
    5c86:	0f 5f       	subi	r16, 0xFF	; 255
    5c88:	1f 4f       	sbci	r17, 0xFF	; 255
    5c8a:	8d 91       	ld	r24, X+
    5c8c:	8e 32       	cpi	r24, 0x2E	; 46
    5c8e:	31 f4       	brne	.+12     	; 0x5c9c <follow_path+0xc0>
    5c90:	03 30       	cpi	r16, 0x03	; 3
    5c92:	11 05       	cpc	r17, r1
    5c94:	09 f4       	brne	.+2      	; 0x5c98 <follow_path+0xbc>
    5c96:	9f c0       	rjmp	.+318    	; 0x5dd6 <follow_path+0x1fa>
    5c98:	81 93       	st	Z+, r24
    5c9a:	f5 cf       	rjmp	.-22     	; 0x5c86 <follow_path+0xaa>
    5c9c:	8f 32       	cpi	r24, 0x2F	; 47
    5c9e:	29 f0       	breq	.+10     	; 0x5caa <follow_path+0xce>
    5ca0:	8c 35       	cpi	r24, 0x5C	; 92
    5ca2:	19 f0       	breq	.+6      	; 0x5caa <follow_path+0xce>
    5ca4:	81 32       	cpi	r24, 0x21	; 33
    5ca6:	08 f0       	brcs	.+2      	; 0x5caa <follow_path+0xce>
    5ca8:	96 c0       	rjmp	.+300    	; 0x5dd6 <follow_path+0x1fa>
    5caa:	0a 0d       	add	r16, r10
    5cac:	1b 1d       	adc	r17, r11
    5cae:	81 32       	cpi	r24, 0x21	; 33
    5cb0:	10 f4       	brcc	.+4      	; 0x5cb6 <follow_path+0xda>
    5cb2:	84 e2       	ldi	r24, 0x24	; 36
    5cb4:	01 c0       	rjmp	.+2      	; 0x5cb8 <follow_path+0xdc>
    5cb6:	80 e2       	ldi	r24, 0x20	; 32
    5cb8:	f6 01       	movw	r30, r12
    5cba:	83 87       	std	Z+11, r24	; 0x0b
    5cbc:	8e c0       	rjmp	.+284    	; 0x5dda <follow_path+0x1fe>
    5cbe:	af 32       	cpi	r26, 0x2F	; 47
    5cc0:	09 f4       	brne	.+2      	; 0x5cc4 <follow_path+0xe8>
    5cc2:	5c c0       	rjmp	.+184    	; 0x5d7c <follow_path+0x1a0>
    5cc4:	ac 35       	cpi	r26, 0x5C	; 92
    5cc6:	09 f4       	brne	.+2      	; 0x5cca <follow_path+0xee>
    5cc8:	59 c0       	rjmp	.+178    	; 0x5d7c <follow_path+0x1a0>
    5cca:	ae 32       	cpi	r26, 0x2E	; 46
    5ccc:	a1 f4       	brne	.+40     	; 0x5cf6 <follow_path+0x11a>
    5cce:	08 97       	sbiw	r24, 0x08	; 8
    5cd0:	09 f0       	breq	.+2      	; 0x5cd4 <follow_path+0xf8>
    5cd2:	81 c0       	rjmp	.+258    	; 0x5dd6 <follow_path+0x1fa>
    5cd4:	bb 0f       	add	r27, r27
    5cd6:	bb 0f       	add	r27, r27
    5cd8:	28 e0       	ldi	r18, 0x08	; 8
    5cda:	30 e0       	ldi	r19, 0x00	; 0
    5cdc:	8b e0       	ldi	r24, 0x0B	; 11
    5cde:	90 e0       	ldi	r25, 0x00	; 0
    5ce0:	a8 01       	movw	r20, r16
    5ce2:	8a 01       	movw	r16, r20
    5ce4:	0f 5f       	subi	r16, 0xFF	; 255
    5ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ce8:	f5 01       	movw	r30, r10
    5cea:	e4 0f       	add	r30, r20
    5cec:	f5 1f       	adc	r31, r21
    5cee:	a0 81       	ld	r26, Z
    5cf0:	a1 32       	cpi	r26, 0x21	; 33
    5cf2:	28 f7       	brcc	.-54     	; 0x5cbe <follow_path+0xe2>
    5cf4:	41 c0       	rjmp	.+130    	; 0x5d78 <follow_path+0x19c>
    5cf6:	28 17       	cp	r18, r24
    5cf8:	39 07       	cpc	r19, r25
    5cfa:	08 f0       	brcs	.+2      	; 0x5cfe <follow_path+0x122>
    5cfc:	6c c0       	rjmp	.+216    	; 0x5dd6 <follow_path+0x1fa>
    5cfe:	a7 fd       	sbrc	r26, 7
    5d00:	b3 60       	ori	r27, 0x03	; 3
    5d02:	6f e7       	ldi	r22, 0x7F	; 127
    5d04:	6a 0f       	add	r22, r26
    5d06:	6f 31       	cpi	r22, 0x1F	; 31
    5d08:	20 f0       	brcs	.+8      	; 0x5d12 <follow_path+0x136>
    5d0a:	60 e2       	ldi	r22, 0x20	; 32
    5d0c:	6a 0f       	add	r22, r26
    5d0e:	6d 31       	cpi	r22, 0x1D	; 29
    5d10:	38 f5       	brcc	.+78     	; 0x5d60 <follow_path+0x184>
    5d12:	4e 5f       	subi	r20, 0xFE	; 254
    5d14:	5f 4f       	sbci	r21, 0xFF	; 255
    5d16:	f5 01       	movw	r30, r10
    5d18:	e0 0f       	add	r30, r16
    5d1a:	f1 1f       	adc	r31, r17
    5d1c:	10 81       	ld	r17, Z
    5d1e:	60 ec       	ldi	r22, 0xC0	; 192
    5d20:	61 0f       	add	r22, r17
    5d22:	6f 33       	cpi	r22, 0x3F	; 63
    5d24:	28 f0       	brcs	.+10     	; 0x5d30 <follow_path+0x154>
    5d26:	60 e8       	ldi	r22, 0x80	; 128
    5d28:	61 0f       	add	r22, r17
    5d2a:	6d 37       	cpi	r22, 0x7D	; 125
    5d2c:	08 f0       	brcs	.+2      	; 0x5d30 <follow_path+0x154>
    5d2e:	53 c0       	rjmp	.+166    	; 0x5dd6 <follow_path+0x1fa>
    5d30:	bc 01       	movw	r22, r24
    5d32:	61 50       	subi	r22, 0x01	; 1
    5d34:	71 09       	sbc	r23, r1
    5d36:	26 17       	cp	r18, r22
    5d38:	37 07       	cpc	r19, r23
    5d3a:	08 f0       	brcs	.+2      	; 0x5d3e <follow_path+0x162>
    5d3c:	4c c0       	rjmp	.+152    	; 0x5dd6 <follow_path+0x1fa>
    5d3e:	49 01       	movw	r8, r18
    5d40:	ff ef       	ldi	r31, 0xFF	; 255
    5d42:	8f 1a       	sub	r8, r31
    5d44:	9f 0a       	sbc	r9, r31
    5d46:	b6 01       	movw	r22, r12
    5d48:	62 0f       	add	r22, r18
    5d4a:	73 1f       	adc	r23, r19
    5d4c:	fb 01       	movw	r30, r22
    5d4e:	a0 83       	st	Z, r26
    5d50:	2e 5f       	subi	r18, 0xFE	; 254
    5d52:	3f 4f       	sbci	r19, 0xFF	; 255
    5d54:	8c 0c       	add	r8, r12
    5d56:	9d 1c       	adc	r9, r13
    5d58:	f4 01       	movw	r30, r8
    5d5a:	10 83       	st	Z, r17
    5d5c:	8a 01       	movw	r16, r20
    5d5e:	c0 cf       	rjmp	.-128    	; 0x5ce0 <follow_path+0x104>
    5d60:	4a 2f       	mov	r20, r26
    5d62:	50 e0       	ldi	r21, 0x00	; 0
    5d64:	ee e7       	ldi	r30, 0x7E	; 126
    5d66:	f6 e2       	ldi	r31, 0x26	; 38
    5d68:	61 91       	ld	r22, Z+
    5d6a:	66 23       	and	r22, r22
    5d6c:	09 f1       	breq	.+66     	; 0x5db0 <follow_path+0x1d4>
    5d6e:	70 e0       	ldi	r23, 0x00	; 0
    5d70:	64 17       	cp	r22, r20
    5d72:	75 07       	cpc	r23, r21
    5d74:	c9 f7       	brne	.-14     	; 0x5d68 <follow_path+0x18c>
    5d76:	2f c0       	rjmp	.+94     	; 0x5dd6 <follow_path+0x1fa>
    5d78:	44 e0       	ldi	r20, 0x04	; 4
    5d7a:	01 c0       	rjmp	.+2      	; 0x5d7e <follow_path+0x1a2>
    5d7c:	40 e0       	ldi	r20, 0x00	; 0
    5d7e:	23 2b       	or	r18, r19
    5d80:	51 f1       	breq	.+84     	; 0x5dd6 <follow_path+0x1fa>
    5d82:	f6 01       	movw	r30, r12
    5d84:	20 81       	ld	r18, Z
    5d86:	25 3e       	cpi	r18, 0xE5	; 229
    5d88:	09 f4       	brne	.+2      	; 0x5d8c <follow_path+0x1b0>
    5d8a:	f0 82       	st	Z, r15
    5d8c:	08 97       	sbiw	r24, 0x08	; 8
    5d8e:	11 f4       	brne	.+4      	; 0x5d94 <follow_path+0x1b8>
    5d90:	bb 0f       	add	r27, r27
    5d92:	bb 0f       	add	r27, r27
    5d94:	8b 2f       	mov	r24, r27
    5d96:	83 70       	andi	r24, 0x03	; 3
    5d98:	81 30       	cpi	r24, 0x01	; 1
    5d9a:	09 f4       	brne	.+2      	; 0x5d9e <follow_path+0x1c2>
    5d9c:	40 61       	ori	r20, 0x10	; 16
    5d9e:	bc 70       	andi	r27, 0x0C	; 12
    5da0:	b4 30       	cpi	r27, 0x04	; 4
    5da2:	09 f4       	brne	.+2      	; 0x5da6 <follow_path+0x1ca>
    5da4:	48 60       	ori	r20, 0x08	; 8
    5da6:	0a 0d       	add	r16, r10
    5da8:	1b 1d       	adc	r17, r11
    5daa:	f6 01       	movw	r30, r12
    5dac:	43 87       	std	Z+11, r20	; 0x0b
    5dae:	15 c0       	rjmp	.+42     	; 0x5dda <follow_path+0x1fe>
    5db0:	4f eb       	ldi	r20, 0xBF	; 191
    5db2:	4a 0f       	add	r20, r26
    5db4:	4a 31       	cpi	r20, 0x1A	; 26
    5db6:	10 f4       	brcc	.+4      	; 0x5dbc <follow_path+0x1e0>
    5db8:	b2 60       	ori	r27, 0x02	; 2
    5dba:	06 c0       	rjmp	.+12     	; 0x5dc8 <follow_path+0x1ec>
    5dbc:	4f e9       	ldi	r20, 0x9F	; 159
    5dbe:	4a 0f       	add	r20, r26
    5dc0:	4a 31       	cpi	r20, 0x1A	; 26
    5dc2:	10 f4       	brcc	.+4      	; 0x5dc8 <follow_path+0x1ec>
    5dc4:	b1 60       	ori	r27, 0x01	; 1
    5dc6:	a0 52       	subi	r26, 0x20	; 32
    5dc8:	f6 01       	movw	r30, r12
    5dca:	e2 0f       	add	r30, r18
    5dcc:	f3 1f       	adc	r31, r19
    5dce:	a0 83       	st	Z, r26
    5dd0:	2f 5f       	subi	r18, 0xFF	; 255
    5dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    5dd4:	85 cf       	rjmp	.-246    	; 0x5ce0 <follow_path+0x104>
    5dd6:	86 e0       	ldi	r24, 0x06	; 6
    5dd8:	64 c0       	rjmp	.+200    	; 0x5ea2 <follow_path+0x2c6>
    5dda:	60 e0       	ldi	r22, 0x00	; 0
    5ddc:	70 e0       	ldi	r23, 0x00	; 0
    5dde:	ce 01       	movw	r24, r28
    5de0:	8b db       	rcall	.-2282   	; 0x54f8 <dir_sdi>
    5de2:	81 11       	cpse	r24, r1
    5de4:	24 c0       	rjmp	.+72     	; 0x5e2e <follow_path+0x252>
    5de6:	4e 85       	ldd	r20, Y+14	; 0x0e
    5de8:	5f 85       	ldd	r21, Y+15	; 0x0f
    5dea:	68 89       	ldd	r22, Y+16	; 0x10
    5dec:	79 89       	ldd	r23, Y+17	; 0x11
    5dee:	88 81       	ld	r24, Y
    5df0:	99 81       	ldd	r25, Y+1	; 0x01
    5df2:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <move_window>
    5df6:	81 11       	cpse	r24, r1
    5df8:	1a c0       	rjmp	.+52     	; 0x5e2e <follow_path+0x252>
    5dfa:	ea 89       	ldd	r30, Y+18	; 0x12
    5dfc:	fb 89       	ldd	r31, Y+19	; 0x13
    5dfe:	90 81       	ld	r25, Z
    5e00:	99 23       	and	r25, r25
    5e02:	a1 f0       	breq	.+40     	; 0x5e2c <follow_path+0x250>
    5e04:	93 85       	ldd	r25, Z+11	; 0x0b
    5e06:	93 fd       	sbrc	r25, 3
    5e08:	0c c0       	rjmp	.+24     	; 0x5e22 <follow_path+0x246>
    5e0a:	ac 89       	ldd	r26, Y+20	; 0x14
    5e0c:	bd 89       	ldd	r27, Y+21	; 0x15
    5e0e:	9f 01       	movw	r18, r30
    5e10:	25 5f       	subi	r18, 0xF5	; 245
    5e12:	3f 4f       	sbci	r19, 0xFF	; 255
    5e14:	e2 17       	cp	r30, r18
    5e16:	f3 07       	cpc	r31, r19
    5e18:	51 f0       	breq	.+20     	; 0x5e2e <follow_path+0x252>
    5e1a:	41 91       	ld	r20, Z+
    5e1c:	9d 91       	ld	r25, X+
    5e1e:	49 17       	cp	r20, r25
    5e20:	c9 f3       	breq	.-14     	; 0x5e14 <follow_path+0x238>
    5e22:	60 e0       	ldi	r22, 0x00	; 0
    5e24:	70 e0       	ldi	r23, 0x00	; 0
    5e26:	ce 01       	movw	r24, r28
    5e28:	db dd       	rcall	.-1098   	; 0x59e0 <dir_next>
    5e2a:	db cf       	rjmp	.-74     	; 0x5de2 <follow_path+0x206>
    5e2c:	84 e0       	ldi	r24, 0x04	; 4
    5e2e:	ec 89       	ldd	r30, Y+20	; 0x14
    5e30:	fd 89       	ldd	r31, Y+21	; 0x15
    5e32:	93 85       	ldd	r25, Z+11	; 0x0b
    5e34:	88 23       	and	r24, r24
    5e36:	a1 f0       	breq	.+40     	; 0x5e60 <follow_path+0x284>
    5e38:	84 30       	cpi	r24, 0x04	; 4
    5e3a:	99 f5       	brne	.+102    	; 0x5ea2 <follow_path+0x2c6>
    5e3c:	29 2f       	mov	r18, r25
    5e3e:	24 70       	andi	r18, 0x04	; 4
    5e40:	95 ff       	sbrs	r25, 5
    5e42:	0b c0       	rjmp	.+22     	; 0x5e5a <follow_path+0x27e>
    5e44:	1e 82       	std	Y+6, r1	; 0x06
    5e46:	1f 82       	std	Y+7, r1	; 0x07
    5e48:	18 86       	std	Y+8, r1	; 0x08
    5e4a:	19 86       	std	Y+9, r1	; 0x09
    5e4c:	1a 8a       	std	Y+18, r1	; 0x12
    5e4e:	1b 8a       	std	Y+19, r1	; 0x13
    5e50:	22 23       	and	r18, r18
    5e52:	09 f4       	brne	.+2      	; 0x5e56 <follow_path+0x27a>
    5e54:	f7 ce       	rjmp	.-530    	; 0x5c44 <follow_path+0x68>
    5e56:	80 e0       	ldi	r24, 0x00	; 0
    5e58:	24 c0       	rjmp	.+72     	; 0x5ea2 <follow_path+0x2c6>
    5e5a:	22 23       	and	r18, r18
    5e5c:	09 f1       	breq	.+66     	; 0x5ea0 <follow_path+0x2c4>
    5e5e:	21 c0       	rjmp	.+66     	; 0x5ea2 <follow_path+0x2c6>
    5e60:	92 fd       	sbrc	r25, 2
    5e62:	f9 cf       	rjmp	.-14     	; 0x5e56 <follow_path+0x27a>
    5e64:	ea 89       	ldd	r30, Y+18	; 0x12
    5e66:	fb 89       	ldd	r31, Y+19	; 0x13
    5e68:	83 85       	ldd	r24, Z+11	; 0x0b
    5e6a:	84 ff       	sbrs	r24, 4
    5e6c:	19 c0       	rjmp	.+50     	; 0x5ea0 <follow_path+0x2c4>
    5e6e:	42 8d       	ldd	r20, Z+26	; 0x1a
    5e70:	53 8d       	ldd	r21, Z+27	; 0x1b
    5e72:	60 e0       	ldi	r22, 0x00	; 0
    5e74:	70 e0       	ldi	r23, 0x00	; 0
    5e76:	a8 81       	ld	r26, Y
    5e78:	b9 81       	ldd	r27, Y+1	; 0x01
    5e7a:	8c 91       	ld	r24, X
    5e7c:	83 30       	cpi	r24, 0x03	; 3
    5e7e:	59 f4       	brne	.+22     	; 0x5e96 <follow_path+0x2ba>
    5e80:	84 89       	ldd	r24, Z+20	; 0x14
    5e82:	95 89       	ldd	r25, Z+21	; 0x15
    5e84:	a0 e0       	ldi	r26, 0x00	; 0
    5e86:	b0 e0       	ldi	r27, 0x00	; 0
    5e88:	dc 01       	movw	r26, r24
    5e8a:	99 27       	eor	r25, r25
    5e8c:	88 27       	eor	r24, r24
    5e8e:	48 2b       	or	r20, r24
    5e90:	59 2b       	or	r21, r25
    5e92:	6a 2b       	or	r22, r26
    5e94:	7b 2b       	or	r23, r27
    5e96:	4e 83       	std	Y+6, r20	; 0x06
    5e98:	5f 83       	std	Y+7, r21	; 0x07
    5e9a:	68 87       	std	Y+8, r22	; 0x08
    5e9c:	79 87       	std	Y+9, r23	; 0x09
    5e9e:	d2 ce       	rjmp	.-604    	; 0x5c44 <follow_path+0x68>
    5ea0:	85 e0       	ldi	r24, 0x05	; 5
    5ea2:	df 91       	pop	r29
    5ea4:	cf 91       	pop	r28
    5ea6:	1f 91       	pop	r17
    5ea8:	0f 91       	pop	r16
    5eaa:	ff 90       	pop	r15
    5eac:	df 90       	pop	r13
    5eae:	cf 90       	pop	r12
    5eb0:	bf 90       	pop	r11
    5eb2:	af 90       	pop	r10
    5eb4:	9f 90       	pop	r9
    5eb6:	8f 90       	pop	r8
    5eb8:	08 95       	ret

00005eba <dir_alloc.constprop.10>:
    5eba:	cf 93       	push	r28
    5ebc:	df 93       	push	r29
    5ebe:	ec 01       	movw	r28, r24
    5ec0:	60 e0       	ldi	r22, 0x00	; 0
    5ec2:	70 e0       	ldi	r23, 0x00	; 0
    5ec4:	19 db       	rcall	.-2510   	; 0x54f8 <dir_sdi>
    5ec6:	81 11       	cpse	r24, r1
    5ec8:	16 c0       	rjmp	.+44     	; 0x5ef6 <dir_alloc.constprop.10+0x3c>
    5eca:	4e 85       	ldd	r20, Y+14	; 0x0e
    5ecc:	5f 85       	ldd	r21, Y+15	; 0x0f
    5ece:	68 89       	ldd	r22, Y+16	; 0x10
    5ed0:	79 89       	ldd	r23, Y+17	; 0x11
    5ed2:	88 81       	ld	r24, Y
    5ed4:	99 81       	ldd	r25, Y+1	; 0x01
    5ed6:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <move_window>
    5eda:	81 11       	cpse	r24, r1
    5edc:	0c c0       	rjmp	.+24     	; 0x5ef6 <dir_alloc.constprop.10+0x3c>
    5ede:	ea 89       	ldd	r30, Y+18	; 0x12
    5ee0:	fb 89       	ldd	r31, Y+19	; 0x13
    5ee2:	90 81       	ld	r25, Z
    5ee4:	95 3e       	cpi	r25, 0xE5	; 229
    5ee6:	51 f0       	breq	.+20     	; 0x5efc <dir_alloc.constprop.10+0x42>
    5ee8:	99 23       	and	r25, r25
    5eea:	41 f0       	breq	.+16     	; 0x5efc <dir_alloc.constprop.10+0x42>
    5eec:	61 e0       	ldi	r22, 0x01	; 1
    5eee:	70 e0       	ldi	r23, 0x00	; 0
    5ef0:	ce 01       	movw	r24, r28
    5ef2:	76 dd       	rcall	.-1300   	; 0x59e0 <dir_next>
    5ef4:	e8 cf       	rjmp	.-48     	; 0x5ec6 <dir_alloc.constprop.10+0xc>
    5ef6:	84 30       	cpi	r24, 0x04	; 4
    5ef8:	09 f4       	brne	.+2      	; 0x5efc <dir_alloc.constprop.10+0x42>
    5efa:	87 e0       	ldi	r24, 0x07	; 7
    5efc:	df 91       	pop	r29
    5efe:	cf 91       	pop	r28
    5f00:	08 95       	ret

00005f02 <dir_register>:
    5f02:	1f 93       	push	r17
    5f04:	cf 93       	push	r28
    5f06:	df 93       	push	r29
    5f08:	ec 01       	movw	r28, r24
    5f0a:	d7 df       	rcall	.-82     	; 0x5eba <dir_alloc.constprop.10>
    5f0c:	18 2f       	mov	r17, r24
    5f0e:	81 11       	cpse	r24, r1
    5f10:	1f c0       	rjmp	.+62     	; 0x5f50 <dir_register+0x4e>
    5f12:	4e 85       	ldd	r20, Y+14	; 0x0e
    5f14:	5f 85       	ldd	r21, Y+15	; 0x0f
    5f16:	68 89       	ldd	r22, Y+16	; 0x10
    5f18:	79 89       	ldd	r23, Y+17	; 0x11
    5f1a:	88 81       	ld	r24, Y
    5f1c:	99 81       	ldd	r25, Y+1	; 0x01
    5f1e:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <move_window>
    5f22:	18 2f       	mov	r17, r24
    5f24:	81 11       	cpse	r24, r1
    5f26:	14 c0       	rjmp	.+40     	; 0x5f50 <dir_register+0x4e>
    5f28:	40 e2       	ldi	r20, 0x20	; 32
    5f2a:	50 e0       	ldi	r21, 0x00	; 0
    5f2c:	60 e0       	ldi	r22, 0x00	; 0
    5f2e:	70 e0       	ldi	r23, 0x00	; 0
    5f30:	8a 89       	ldd	r24, Y+18	; 0x12
    5f32:	9b 89       	ldd	r25, Y+19	; 0x13
    5f34:	0e 94 91 25 	call	0x4b22	; 0x4b22 <mem_set>
    5f38:	6c 89       	ldd	r22, Y+20	; 0x14
    5f3a:	7d 89       	ldd	r23, Y+21	; 0x15
    5f3c:	4b e0       	ldi	r20, 0x0B	; 11
    5f3e:	50 e0       	ldi	r21, 0x00	; 0
    5f40:	8a 89       	ldd	r24, Y+18	; 0x12
    5f42:	9b 89       	ldd	r25, Y+19	; 0x13
    5f44:	0e 94 6e 25 	call	0x4adc	; 0x4adc <mem_cpy>
    5f48:	e8 81       	ld	r30, Y
    5f4a:	f9 81       	ldd	r31, Y+1	; 0x01
    5f4c:	81 e0       	ldi	r24, 0x01	; 1
    5f4e:	84 83       	std	Z+4, r24	; 0x04
    5f50:	81 2f       	mov	r24, r17
    5f52:	df 91       	pop	r29
    5f54:	cf 91       	pop	r28
    5f56:	1f 91       	pop	r17
    5f58:	08 95       	ret

00005f5a <remove_chain>:
    5f5a:	8f 92       	push	r8
    5f5c:	9f 92       	push	r9
    5f5e:	af 92       	push	r10
    5f60:	bf 92       	push	r11
    5f62:	cf 92       	push	r12
    5f64:	df 92       	push	r13
    5f66:	ef 92       	push	r14
    5f68:	ff 92       	push	r15
    5f6a:	0f 93       	push	r16
    5f6c:	1f 93       	push	r17
    5f6e:	cf 93       	push	r28
    5f70:	df 93       	push	r29
    5f72:	ec 01       	movw	r28, r24
    5f74:	6a 01       	movw	r12, r20
    5f76:	7b 01       	movw	r14, r22
    5f78:	42 30       	cpi	r20, 0x02	; 2
    5f7a:	51 05       	cpc	r21, r1
    5f7c:	61 05       	cpc	r22, r1
    5f7e:	71 05       	cpc	r23, r1
    5f80:	08 f4       	brcc	.+2      	; 0x5f84 <remove_chain+0x2a>
    5f82:	4f c0       	rjmp	.+158    	; 0x6022 <remove_chain+0xc8>
    5f84:	4e 89       	ldd	r20, Y+22	; 0x16
    5f86:	5f 89       	ldd	r21, Y+23	; 0x17
    5f88:	68 8d       	ldd	r22, Y+24	; 0x18
    5f8a:	79 8d       	ldd	r23, Y+25	; 0x19
    5f8c:	c4 16       	cp	r12, r20
    5f8e:	d5 06       	cpc	r13, r21
    5f90:	e6 06       	cpc	r14, r22
    5f92:	f7 06       	cpc	r15, r23
    5f94:	08 f0       	brcs	.+2      	; 0x5f98 <remove_chain+0x3e>
    5f96:	45 c0       	rjmp	.+138    	; 0x6022 <remove_chain+0xc8>
    5f98:	4e 89       	ldd	r20, Y+22	; 0x16
    5f9a:	5f 89       	ldd	r21, Y+23	; 0x17
    5f9c:	68 8d       	ldd	r22, Y+24	; 0x18
    5f9e:	79 8d       	ldd	r23, Y+25	; 0x19
    5fa0:	c4 16       	cp	r12, r20
    5fa2:	d5 06       	cpc	r13, r21
    5fa4:	e6 06       	cpc	r14, r22
    5fa6:	f7 06       	cpc	r15, r23
    5fa8:	58 f4       	brcc	.+22     	; 0x5fc0 <remove_chain+0x66>
    5faa:	b7 01       	movw	r22, r14
    5fac:	a6 01       	movw	r20, r12
    5fae:	ce 01       	movw	r24, r28
    5fb0:	df d9       	rcall	.-3138   	; 0x5370 <get_fat>
    5fb2:	4b 01       	movw	r8, r22
    5fb4:	5c 01       	movw	r10, r24
    5fb6:	61 15       	cp	r22, r1
    5fb8:	71 05       	cpc	r23, r1
    5fba:	81 05       	cpc	r24, r1
    5fbc:	91 05       	cpc	r25, r1
    5fbe:	11 f4       	brne	.+4      	; 0x5fc4 <remove_chain+0x6a>
    5fc0:	80 e0       	ldi	r24, 0x00	; 0
    5fc2:	30 c0       	rjmp	.+96     	; 0x6024 <remove_chain+0xca>
    5fc4:	81 e0       	ldi	r24, 0x01	; 1
    5fc6:	88 16       	cp	r8, r24
    5fc8:	91 04       	cpc	r9, r1
    5fca:	a1 04       	cpc	r10, r1
    5fcc:	b1 04       	cpc	r11, r1
    5fce:	49 f1       	breq	.+82     	; 0x6022 <remove_chain+0xc8>
    5fd0:	8f ef       	ldi	r24, 0xFF	; 255
    5fd2:	88 16       	cp	r8, r24
    5fd4:	98 06       	cpc	r9, r24
    5fd6:	a8 06       	cpc	r10, r24
    5fd8:	b8 06       	cpc	r11, r24
    5fda:	09 f1       	breq	.+66     	; 0x601e <remove_chain+0xc4>
    5fdc:	00 e0       	ldi	r16, 0x00	; 0
    5fde:	10 e0       	ldi	r17, 0x00	; 0
    5fe0:	98 01       	movw	r18, r16
    5fe2:	b7 01       	movw	r22, r14
    5fe4:	a6 01       	movw	r20, r12
    5fe6:	ce 01       	movw	r24, r28
    5fe8:	2c db       	rcall	.-2472   	; 0x5642 <put_fat>
    5fea:	81 11       	cpse	r24, r1
    5fec:	1b c0       	rjmp	.+54     	; 0x6024 <remove_chain+0xca>
    5fee:	4e 85       	ldd	r20, Y+14	; 0x0e
    5ff0:	5f 85       	ldd	r21, Y+15	; 0x0f
    5ff2:	68 89       	ldd	r22, Y+16	; 0x10
    5ff4:	79 89       	ldd	r23, Y+17	; 0x11
    5ff6:	4f 3f       	cpi	r20, 0xFF	; 255
    5ff8:	8f ef       	ldi	r24, 0xFF	; 255
    5ffa:	58 07       	cpc	r21, r24
    5ffc:	68 07       	cpc	r22, r24
    5ffe:	78 07       	cpc	r23, r24
    6000:	59 f0       	breq	.+22     	; 0x6018 <remove_chain+0xbe>
    6002:	4f 5f       	subi	r20, 0xFF	; 255
    6004:	5f 4f       	sbci	r21, 0xFF	; 255
    6006:	6f 4f       	sbci	r22, 0xFF	; 255
    6008:	7f 4f       	sbci	r23, 0xFF	; 255
    600a:	4e 87       	std	Y+14, r20	; 0x0e
    600c:	5f 87       	std	Y+15, r21	; 0x0f
    600e:	68 8b       	std	Y+16, r22	; 0x10
    6010:	79 8b       	std	Y+17, r23	; 0x11
    6012:	8d 81       	ldd	r24, Y+5	; 0x05
    6014:	81 60       	ori	r24, 0x01	; 1
    6016:	8d 83       	std	Y+5, r24	; 0x05
    6018:	75 01       	movw	r14, r10
    601a:	64 01       	movw	r12, r8
    601c:	bd cf       	rjmp	.-134    	; 0x5f98 <remove_chain+0x3e>
    601e:	81 e0       	ldi	r24, 0x01	; 1
    6020:	01 c0       	rjmp	.+2      	; 0x6024 <remove_chain+0xca>
    6022:	82 e0       	ldi	r24, 0x02	; 2
    6024:	df 91       	pop	r29
    6026:	cf 91       	pop	r28
    6028:	1f 91       	pop	r17
    602a:	0f 91       	pop	r16
    602c:	ff 90       	pop	r15
    602e:	ef 90       	pop	r14
    6030:	df 90       	pop	r13
    6032:	cf 90       	pop	r12
    6034:	bf 90       	pop	r11
    6036:	af 90       	pop	r10
    6038:	9f 90       	pop	r9
    603a:	8f 90       	pop	r8
    603c:	08 95       	ret

0000603e <f_mount>:
    603e:	cf 93       	push	r28
    6040:	df 93       	push	r29
    6042:	cd b7       	in	r28, 0x3d	; 61
    6044:	de b7       	in	r29, 0x3e	; 62
    6046:	27 97       	sbiw	r28, 0x07	; 7
    6048:	cd bf       	out	0x3d, r28	; 61
    604a:	de bf       	out	0x3e, r29	; 62
    604c:	8b 83       	std	Y+3, r24	; 0x03
    604e:	9c 83       	std	Y+4, r25	; 0x04
    6050:	6d 83       	std	Y+5, r22	; 0x05
    6052:	7e 83       	std	Y+6, r23	; 0x06
    6054:	69 83       	std	Y+1, r22	; 0x01
    6056:	7a 83       	std	Y+2, r23	; 0x02
    6058:	ce 01       	movw	r24, r28
    605a:	01 96       	adiw	r24, 0x01	; 1
    605c:	4f 83       	std	Y+7, r20	; 0x07
    605e:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <get_ldnumber>
    6062:	4f 81       	ldd	r20, Y+7	; 0x07
    6064:	97 fd       	sbrc	r25, 7
    6066:	22 c0       	rjmp	.+68     	; 0x60ac <f_mount+0x6e>
    6068:	88 0f       	add	r24, r24
    606a:	99 1f       	adc	r25, r25
    606c:	fc 01       	movw	r30, r24
    606e:	e9 54       	subi	r30, 0x49	; 73
    6070:	f5 4d       	sbci	r31, 0xD5	; 213
    6072:	01 90       	ld	r0, Z+
    6074:	f0 81       	ld	r31, Z
    6076:	e0 2d       	mov	r30, r0
    6078:	30 97       	sbiw	r30, 0x00	; 0
    607a:	09 f0       	breq	.+2      	; 0x607e <f_mount+0x40>
    607c:	10 82       	st	Z, r1
    607e:	eb 81       	ldd	r30, Y+3	; 0x03
    6080:	fc 81       	ldd	r31, Y+4	; 0x04
    6082:	30 97       	sbiw	r30, 0x00	; 0
    6084:	09 f0       	breq	.+2      	; 0x6088 <f_mount+0x4a>
    6086:	10 82       	st	Z, r1
    6088:	dc 01       	movw	r26, r24
    608a:	a9 54       	subi	r26, 0x49	; 73
    608c:	b5 4d       	sbci	r27, 0xD5	; 213
    608e:	ed 93       	st	X+, r30
    6090:	fc 93       	st	X, r31
    6092:	ef 2b       	or	r30, r31
    6094:	69 f0       	breq	.+26     	; 0x60b0 <f_mount+0x72>
    6096:	41 30       	cpi	r20, 0x01	; 1
    6098:	59 f4       	brne	.+22     	; 0x60b0 <f_mount+0x72>
    609a:	40 e0       	ldi	r20, 0x00	; 0
    609c:	be 01       	movw	r22, r28
    609e:	6b 5f       	subi	r22, 0xFB	; 251
    60a0:	7f 4f       	sbci	r23, 0xFF	; 255
    60a2:	ce 01       	movw	r24, r28
    60a4:	03 96       	adiw	r24, 0x03	; 3
    60a6:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <find_volume>
    60aa:	03 c0       	rjmp	.+6      	; 0x60b2 <f_mount+0x74>
    60ac:	8b e0       	ldi	r24, 0x0B	; 11
    60ae:	01 c0       	rjmp	.+2      	; 0x60b2 <f_mount+0x74>
    60b0:	80 e0       	ldi	r24, 0x00	; 0
    60b2:	27 96       	adiw	r28, 0x07	; 7
    60b4:	cd bf       	out	0x3d, r28	; 61
    60b6:	de bf       	out	0x3e, r29	; 62
    60b8:	df 91       	pop	r29
    60ba:	cf 91       	pop	r28
    60bc:	08 95       	ret

000060be <f_open>:
    60be:	4f 92       	push	r4
    60c0:	5f 92       	push	r5
    60c2:	6f 92       	push	r6
    60c4:	7f 92       	push	r7
    60c6:	9f 92       	push	r9
    60c8:	af 92       	push	r10
    60ca:	bf 92       	push	r11
    60cc:	cf 92       	push	r12
    60ce:	df 92       	push	r13
    60d0:	ef 92       	push	r14
    60d2:	ff 92       	push	r15
    60d4:	0f 93       	push	r16
    60d6:	1f 93       	push	r17
    60d8:	cf 93       	push	r28
    60da:	df 93       	push	r29
    60dc:	cd b7       	in	r28, 0x3d	; 61
    60de:	de b7       	in	r29, 0x3e	; 62
    60e0:	a4 97       	sbiw	r28, 0x24	; 36
    60e2:	cd bf       	out	0x3d, r28	; 61
    60e4:	de bf       	out	0x3e, r29	; 62
    60e6:	5c 01       	movw	r10, r24
    60e8:	6b a3       	std	Y+35, r22	; 0x23
    60ea:	7c a3       	std	Y+36, r23	; 0x24
    60ec:	f4 2e       	mov	r15, r20
    60ee:	00 97       	sbiw	r24, 0x00	; 0
    60f0:	09 f4       	brne	.+2      	; 0x60f4 <f_open+0x36>
    60f2:	f3 c0       	rjmp	.+486    	; 0x62da <f_open+0x21c>
    60f4:	dc 01       	movw	r26, r24
    60f6:	1d 92       	st	X+, r1
    60f8:	1c 92       	st	X, r1
    60fa:	4e 71       	andi	r20, 0x1E	; 30
    60fc:	be 01       	movw	r22, r28
    60fe:	6d 5d       	subi	r22, 0xDD	; 221
    6100:	7f 4f       	sbci	r23, 0xFF	; 255
    6102:	ce 01       	movw	r24, r28
    6104:	01 96       	adiw	r24, 0x01	; 1
    6106:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <find_volume>
    610a:	81 11       	cpse	r24, r1
    610c:	ed c0       	rjmp	.+474    	; 0x62e8 <f_open+0x22a>
    610e:	ce 01       	movw	r24, r28
    6110:	47 96       	adiw	r24, 0x17	; 23
    6112:	8d 8b       	std	Y+21, r24	; 0x15
    6114:	9e 8b       	std	Y+22, r25	; 0x16
    6116:	6b a1       	ldd	r22, Y+35	; 0x23
    6118:	7c a1       	ldd	r23, Y+36	; 0x24
    611a:	46 97       	sbiw	r24, 0x16	; 22
    611c:	5f dd       	rcall	.-1346   	; 0x5bdc <follow_path>
    611e:	0b 89       	ldd	r16, Y+19	; 0x13
    6120:	1c 89       	ldd	r17, Y+20	; 0x14
    6122:	81 11       	cpse	r24, r1
    6124:	04 c0       	rjmp	.+8      	; 0x612e <f_open+0x70>
    6126:	01 15       	cp	r16, r1
    6128:	11 05       	cpc	r17, r1
    612a:	09 f4       	brne	.+2      	; 0x612e <f_open+0x70>
    612c:	86 e0       	ldi	r24, 0x06	; 6
    612e:	bf 2d       	mov	r27, r15
    6130:	bf 71       	andi	r27, 0x1F	; 31
    6132:	9b 2e       	mov	r9, r27
    6134:	9f 2d       	mov	r25, r15
    6136:	9c 71       	andi	r25, 0x1C	; 28
    6138:	09 f4       	brne	.+2      	; 0x613c <f_open+0x7e>
    613a:	71 c0       	rjmp	.+226    	; 0x621e <f_open+0x160>
    613c:	88 23       	and	r24, r24
    613e:	69 f0       	breq	.+26     	; 0x615a <f_open+0x9c>
    6140:	84 30       	cpi	r24, 0x04	; 4
    6142:	19 f4       	brne	.+6      	; 0x614a <f_open+0x8c>
    6144:	ce 01       	movw	r24, r28
    6146:	01 96       	adiw	r24, 0x01	; 1
    6148:	dc de       	rcall	.-584    	; 0x5f02 <dir_register>
    614a:	e9 2d       	mov	r30, r9
    614c:	e8 60       	ori	r30, 0x08	; 8
    614e:	9e 2e       	mov	r9, r30
    6150:	0b 89       	ldd	r16, Y+19	; 0x13
    6152:	1c 89       	ldd	r17, Y+20	; 0x14
    6154:	88 23       	and	r24, r24
    6156:	49 f0       	breq	.+18     	; 0x616a <f_open+0xac>
    6158:	c7 c0       	rjmp	.+398    	; 0x62e8 <f_open+0x22a>
    615a:	d8 01       	movw	r26, r16
    615c:	1b 96       	adiw	r26, 0x0b	; 11
    615e:	8c 91       	ld	r24, X
    6160:	81 71       	andi	r24, 0x11	; 17
    6162:	09 f0       	breq	.+2      	; 0x6166 <f_open+0xa8>
    6164:	c0 c0       	rjmp	.+384    	; 0x62e6 <f_open+0x228>
    6166:	f2 fc       	sbrc	r15, 2
    6168:	ba c0       	rjmp	.+372    	; 0x62de <f_open+0x220>
    616a:	93 fe       	sbrs	r9, 3
    616c:	63 c0       	rjmp	.+198    	; 0x6234 <f_open+0x176>
    616e:	80 e0       	ldi	r24, 0x00	; 0
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	a1 e2       	ldi	r26, 0x21	; 33
    6174:	b6 e4       	ldi	r27, 0x46	; 70
    6176:	f8 01       	movw	r30, r16
    6178:	86 87       	std	Z+14, r24	; 0x0e
    617a:	97 87       	std	Z+15, r25	; 0x0f
    617c:	a0 8b       	std	Z+16, r26	; 0x10
    617e:	b1 8b       	std	Z+17, r27	; 0x11
    6180:	86 8b       	std	Z+22, r24	; 0x16
    6182:	97 8b       	std	Z+23, r25	; 0x17
    6184:	a0 8f       	std	Z+24, r26	; 0x18
    6186:	b1 8f       	std	Z+25, r27	; 0x19
    6188:	13 86       	std	Z+11, r1	; 0x0b
    618a:	d8 01       	movw	r26, r16
    618c:	14 8e       	std	Z+28, r1	; 0x1c
    618e:	15 8e       	std	Z+29, r1	; 0x1d
    6190:	16 8e       	std	Z+30, r1	; 0x1e
    6192:	17 8e       	std	Z+31, r1	; 0x1f
    6194:	e9 81       	ldd	r30, Y+1	; 0x01
    6196:	fa 81       	ldd	r31, Y+2	; 0x02
    6198:	5a 96       	adiw	r26, 0x1a	; 26
    619a:	cd 90       	ld	r12, X+
    619c:	dc 90       	ld	r13, X
    619e:	5b 97       	sbiw	r26, 0x1b	; 27
    61a0:	e1 2c       	mov	r14, r1
    61a2:	f1 2c       	mov	r15, r1
    61a4:	80 81       	ld	r24, Z
    61a6:	83 30       	cpi	r24, 0x03	; 3
    61a8:	69 f4       	brne	.+26     	; 0x61c4 <f_open+0x106>
    61aa:	54 96       	adiw	r26, 0x14	; 20
    61ac:	4d 91       	ld	r20, X+
    61ae:	5c 91       	ld	r21, X
    61b0:	55 97       	sbiw	r26, 0x15	; 21
    61b2:	60 e0       	ldi	r22, 0x00	; 0
    61b4:	70 e0       	ldi	r23, 0x00	; 0
    61b6:	ba 01       	movw	r22, r20
    61b8:	55 27       	eor	r21, r21
    61ba:	44 27       	eor	r20, r20
    61bc:	c4 2a       	or	r12, r20
    61be:	d5 2a       	or	r13, r21
    61c0:	e6 2a       	or	r14, r22
    61c2:	f7 2a       	or	r15, r23
    61c4:	d8 01       	movw	r26, r16
    61c6:	5a 96       	adiw	r26, 0x1a	; 26
    61c8:	1d 92       	st	X+, r1
    61ca:	1c 92       	st	X, r1
    61cc:	5b 97       	sbiw	r26, 0x1b	; 27
    61ce:	54 96       	adiw	r26, 0x14	; 20
    61d0:	1d 92       	st	X+, r1
    61d2:	1c 92       	st	X, r1
    61d4:	55 97       	sbiw	r26, 0x15	; 21
    61d6:	81 e0       	ldi	r24, 0x01	; 1
    61d8:	84 83       	std	Z+4, r24	; 0x04
    61da:	c1 14       	cp	r12, r1
    61dc:	d1 04       	cpc	r13, r1
    61de:	e1 04       	cpc	r14, r1
    61e0:	f1 04       	cpc	r15, r1
    61e2:	41 f1       	breq	.+80     	; 0x6234 <f_open+0x176>
    61e4:	46 a4       	ldd	r4, Z+46	; 0x2e
    61e6:	57 a4       	ldd	r5, Z+47	; 0x2f
    61e8:	60 a8       	ldd	r6, Z+48	; 0x30
    61ea:	71 a8       	ldd	r7, Z+49	; 0x31
    61ec:	b7 01       	movw	r22, r14
    61ee:	a6 01       	movw	r20, r12
    61f0:	cf 01       	movw	r24, r30
    61f2:	b3 de       	rcall	.-666    	; 0x5f5a <remove_chain>
    61f4:	81 11       	cpse	r24, r1
    61f6:	78 c0       	rjmp	.+240    	; 0x62e8 <f_open+0x22a>
    61f8:	89 81       	ldd	r24, Y+1	; 0x01
    61fa:	9a 81       	ldd	r25, Y+2	; 0x02
    61fc:	b1 e0       	ldi	r27, 0x01	; 1
    61fe:	cb 1a       	sub	r12, r27
    6200:	d1 08       	sbc	r13, r1
    6202:	e1 08       	sbc	r14, r1
    6204:	f1 08       	sbc	r15, r1
    6206:	fc 01       	movw	r30, r24
    6208:	c2 86       	std	Z+10, r12	; 0x0a
    620a:	d3 86       	std	Z+11, r13	; 0x0b
    620c:	e4 86       	std	Z+12, r14	; 0x0c
    620e:	f5 86       	std	Z+13, r15	; 0x0d
    6210:	b3 01       	movw	r22, r6
    6212:	a2 01       	movw	r20, r4
    6214:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <move_window>
    6218:	88 23       	and	r24, r24
    621a:	61 f0       	breq	.+24     	; 0x6234 <f_open+0x176>
    621c:	65 c0       	rjmp	.+202    	; 0x62e8 <f_open+0x22a>
    621e:	81 11       	cpse	r24, r1
    6220:	63 c0       	rjmp	.+198    	; 0x62e8 <f_open+0x22a>
    6222:	d8 01       	movw	r26, r16
    6224:	1b 96       	adiw	r26, 0x0b	; 11
    6226:	8c 91       	ld	r24, X
    6228:	84 fd       	sbrc	r24, 4
    622a:	5b c0       	rjmp	.+182    	; 0x62e2 <f_open+0x224>
    622c:	f1 fe       	sbrs	r15, 1
    622e:	02 c0       	rjmp	.+4      	; 0x6234 <f_open+0x176>
    6230:	80 fd       	sbrc	r24, 0
    6232:	59 c0       	rjmp	.+178    	; 0x62e6 <f_open+0x228>
    6234:	93 fe       	sbrs	r9, 3
    6236:	03 c0       	rjmp	.+6      	; 0x623e <f_open+0x180>
    6238:	b9 2d       	mov	r27, r9
    623a:	b0 62       	ori	r27, 0x20	; 32
    623c:	9b 2e       	mov	r9, r27
    623e:	e9 80       	ldd	r14, Y+1	; 0x01
    6240:	fa 80       	ldd	r15, Y+2	; 0x02
    6242:	f7 01       	movw	r30, r14
    6244:	46 a5       	ldd	r20, Z+46	; 0x2e
    6246:	57 a5       	ldd	r21, Z+47	; 0x2f
    6248:	60 a9       	ldd	r22, Z+48	; 0x30
    624a:	71 a9       	ldd	r23, Z+49	; 0x31
    624c:	d5 01       	movw	r26, r10
    624e:	5a 96       	adiw	r26, 0x1a	; 26
    6250:	4d 93       	st	X+, r20
    6252:	5d 93       	st	X+, r21
    6254:	6d 93       	st	X+, r22
    6256:	7c 93       	st	X, r23
    6258:	5d 97       	sbiw	r26, 0x1d	; 29
    625a:	5e 96       	adiw	r26, 0x1e	; 30
    625c:	0d 93       	st	X+, r16
    625e:	1c 93       	st	X, r17
    6260:	5f 97       	sbiw	r26, 0x1f	; 31
    6262:	14 96       	adiw	r26, 0x04	; 4
    6264:	9c 92       	st	X, r9
    6266:	14 97       	sbiw	r26, 0x04	; 4
    6268:	15 96       	adiw	r26, 0x05	; 5
    626a:	1c 92       	st	X, r1
    626c:	f8 01       	movw	r30, r16
    626e:	82 8d       	ldd	r24, Z+26	; 0x1a
    6270:	93 8d       	ldd	r25, Z+27	; 0x1b
    6272:	a0 e0       	ldi	r26, 0x00	; 0
    6274:	b0 e0       	ldi	r27, 0x00	; 0
    6276:	f7 01       	movw	r30, r14
    6278:	20 81       	ld	r18, Z
    627a:	23 30       	cpi	r18, 0x03	; 3
    627c:	61 f4       	brne	.+24     	; 0x6296 <f_open+0x1d8>
    627e:	f8 01       	movw	r30, r16
    6280:	44 89       	ldd	r20, Z+20	; 0x14
    6282:	55 89       	ldd	r21, Z+21	; 0x15
    6284:	60 e0       	ldi	r22, 0x00	; 0
    6286:	70 e0       	ldi	r23, 0x00	; 0
    6288:	ba 01       	movw	r22, r20
    628a:	55 27       	eor	r21, r21
    628c:	44 27       	eor	r20, r20
    628e:	84 2b       	or	r24, r20
    6290:	95 2b       	or	r25, r21
    6292:	a6 2b       	or	r26, r22
    6294:	b7 2b       	or	r27, r23
    6296:	f5 01       	movw	r30, r10
    6298:	86 87       	std	Z+14, r24	; 0x0e
    629a:	97 87       	std	Z+15, r25	; 0x0f
    629c:	a0 8b       	std	Z+16, r26	; 0x10
    629e:	b1 8b       	std	Z+17, r27	; 0x11
    62a0:	f8 01       	movw	r30, r16
    62a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    62a4:	95 8d       	ldd	r25, Z+29	; 0x1d
    62a6:	a6 8d       	ldd	r26, Z+30	; 0x1e
    62a8:	b7 8d       	ldd	r27, Z+31	; 0x1f
    62aa:	f5 01       	movw	r30, r10
    62ac:	82 87       	std	Z+10, r24	; 0x0a
    62ae:	93 87       	std	Z+11, r25	; 0x0b
    62b0:	a4 87       	std	Z+12, r26	; 0x0c
    62b2:	b5 87       	std	Z+13, r27	; 0x0d
    62b4:	16 82       	std	Z+6, r1	; 0x06
    62b6:	17 82       	std	Z+7, r1	; 0x07
    62b8:	10 86       	std	Z+8, r1	; 0x08
    62ba:	11 86       	std	Z+9, r1	; 0x09
    62bc:	16 8a       	std	Z+22, r1	; 0x16
    62be:	17 8a       	std	Z+23, r1	; 0x17
    62c0:	10 8e       	std	Z+24, r1	; 0x18
    62c2:	11 8e       	std	Z+25, r1	; 0x19
    62c4:	e0 82       	st	Z, r14
    62c6:	f1 82       	std	Z+1, r15	; 0x01
    62c8:	d7 01       	movw	r26, r14
    62ca:	16 96       	adiw	r26, 0x06	; 6
    62cc:	8d 91       	ld	r24, X+
    62ce:	9c 91       	ld	r25, X
    62d0:	17 97       	sbiw	r26, 0x07	; 7
    62d2:	82 83       	std	Z+2, r24	; 0x02
    62d4:	93 83       	std	Z+3, r25	; 0x03
    62d6:	80 e0       	ldi	r24, 0x00	; 0
    62d8:	07 c0       	rjmp	.+14     	; 0x62e8 <f_open+0x22a>
    62da:	89 e0       	ldi	r24, 0x09	; 9
    62dc:	05 c0       	rjmp	.+10     	; 0x62e8 <f_open+0x22a>
    62de:	88 e0       	ldi	r24, 0x08	; 8
    62e0:	03 c0       	rjmp	.+6      	; 0x62e8 <f_open+0x22a>
    62e2:	84 e0       	ldi	r24, 0x04	; 4
    62e4:	01 c0       	rjmp	.+2      	; 0x62e8 <f_open+0x22a>
    62e6:	87 e0       	ldi	r24, 0x07	; 7
    62e8:	a4 96       	adiw	r28, 0x24	; 36
    62ea:	cd bf       	out	0x3d, r28	; 61
    62ec:	de bf       	out	0x3e, r29	; 62
    62ee:	df 91       	pop	r29
    62f0:	cf 91       	pop	r28
    62f2:	1f 91       	pop	r17
    62f4:	0f 91       	pop	r16
    62f6:	ff 90       	pop	r15
    62f8:	ef 90       	pop	r14
    62fa:	df 90       	pop	r13
    62fc:	cf 90       	pop	r12
    62fe:	bf 90       	pop	r11
    6300:	af 90       	pop	r10
    6302:	9f 90       	pop	r9
    6304:	7f 90       	pop	r7
    6306:	6f 90       	pop	r6
    6308:	5f 90       	pop	r5
    630a:	4f 90       	pop	r4
    630c:	08 95       	ret

0000630e <f_read>:
    630e:	2f 92       	push	r2
    6310:	3f 92       	push	r3
    6312:	4f 92       	push	r4
    6314:	5f 92       	push	r5
    6316:	6f 92       	push	r6
    6318:	7f 92       	push	r7
    631a:	8f 92       	push	r8
    631c:	9f 92       	push	r9
    631e:	af 92       	push	r10
    6320:	bf 92       	push	r11
    6322:	cf 92       	push	r12
    6324:	df 92       	push	r13
    6326:	ef 92       	push	r14
    6328:	ff 92       	push	r15
    632a:	0f 93       	push	r16
    632c:	1f 93       	push	r17
    632e:	cf 93       	push	r28
    6330:	df 93       	push	r29
    6332:	ec 01       	movw	r28, r24
    6334:	5b 01       	movw	r10, r22
    6336:	7a 01       	movw	r14, r20
    6338:	19 01       	movw	r2, r18
    633a:	f9 01       	movw	r30, r18
    633c:	10 82       	st	Z, r1
    633e:	11 82       	std	Z+1, r1	; 0x01
    6340:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <validate>
    6344:	81 11       	cpse	r24, r1
    6346:	05 c1       	rjmp	.+522    	; 0x6552 <f_read+0x244>
    6348:	8d 81       	ldd	r24, Y+5	; 0x05
    634a:	81 11       	cpse	r24, r1
    634c:	02 c1       	rjmp	.+516    	; 0x6552 <f_read+0x244>
    634e:	8c 81       	ldd	r24, Y+4	; 0x04
    6350:	80 ff       	sbrs	r24, 0
    6352:	fe c0       	rjmp	.+508    	; 0x6550 <f_read+0x242>
    6354:	8a 85       	ldd	r24, Y+10	; 0x0a
    6356:	9b 85       	ldd	r25, Y+11	; 0x0b
    6358:	ac 85       	ldd	r26, Y+12	; 0x0c
    635a:	bd 85       	ldd	r27, Y+13	; 0x0d
    635c:	4e 81       	ldd	r20, Y+6	; 0x06
    635e:	5f 81       	ldd	r21, Y+7	; 0x07
    6360:	68 85       	ldd	r22, Y+8	; 0x08
    6362:	79 85       	ldd	r23, Y+9	; 0x09
    6364:	84 1b       	sub	r24, r20
    6366:	95 0b       	sbc	r25, r21
    6368:	a6 0b       	sbc	r26, r22
    636a:	b7 0b       	sbc	r27, r23
    636c:	a7 01       	movw	r20, r14
    636e:	60 e0       	ldi	r22, 0x00	; 0
    6370:	70 e0       	ldi	r23, 0x00	; 0
    6372:	84 17       	cp	r24, r20
    6374:	95 07       	cpc	r25, r21
    6376:	a6 07       	cpc	r26, r22
    6378:	b7 07       	cpc	r27, r23
    637a:	08 f0       	brcs	.+2      	; 0x637e <f_read+0x70>
    637c:	74 c0       	rjmp	.+232    	; 0x6466 <f_read+0x158>
    637e:	7c 01       	movw	r14, r24
    6380:	72 c0       	rjmp	.+228    	; 0x6466 <f_read+0x158>
    6382:	4e 81       	ldd	r20, Y+6	; 0x06
    6384:	5f 81       	ldd	r21, Y+7	; 0x07
    6386:	68 85       	ldd	r22, Y+8	; 0x08
    6388:	79 85       	ldd	r23, Y+9	; 0x09
    638a:	db 01       	movw	r26, r22
    638c:	ca 01       	movw	r24, r20
    638e:	91 70       	andi	r25, 0x01	; 1
    6390:	aa 27       	eor	r26, r26
    6392:	bb 27       	eor	r27, r27
    6394:	89 2b       	or	r24, r25
    6396:	8a 2b       	or	r24, r26
    6398:	8b 2b       	or	r24, r27
    639a:	09 f0       	breq	.+2      	; 0x639e <f_read+0x90>
    639c:	ad c0       	rjmp	.+346    	; 0x64f8 <f_read+0x1ea>
    639e:	88 81       	ld	r24, Y
    63a0:	99 81       	ldd	r25, Y+1	; 0x01
    63a2:	fc 01       	movw	r30, r24
    63a4:	12 81       	ldd	r17, Z+2	; 0x02
    63a6:	11 50       	subi	r17, 0x01	; 1
    63a8:	2a 01       	movw	r4, r20
    63aa:	3b 01       	movw	r6, r22
    63ac:	29 e0       	ldi	r18, 0x09	; 9
    63ae:	76 94       	lsr	r7
    63b0:	67 94       	ror	r6
    63b2:	57 94       	ror	r5
    63b4:	47 94       	ror	r4
    63b6:	2a 95       	dec	r18
    63b8:	d1 f7       	brne	.-12     	; 0x63ae <f_read+0xa0>
    63ba:	14 21       	and	r17, r4
    63bc:	09 f4       	brne	.+2      	; 0x63c0 <f_read+0xb2>
    63be:	58 c0       	rjmp	.+176    	; 0x6470 <f_read+0x162>
    63c0:	88 80       	ld	r8, Y
    63c2:	99 80       	ldd	r9, Y+1	; 0x01
    63c4:	4a 89       	ldd	r20, Y+18	; 0x12
    63c6:	5b 89       	ldd	r21, Y+19	; 0x13
    63c8:	6c 89       	ldd	r22, Y+20	; 0x14
    63ca:	7d 89       	ldd	r23, Y+21	; 0x15
    63cc:	c4 01       	movw	r24, r8
    63ce:	0e 94 8f 29 	call	0x531e	; 0x531e <clust2sect>
    63d2:	61 15       	cp	r22, r1
    63d4:	71 05       	cpc	r23, r1
    63d6:	81 05       	cpc	r24, r1
    63d8:	91 05       	cpc	r25, r1
    63da:	09 f4       	brne	.+2      	; 0x63de <f_read+0xd0>
    63dc:	69 c0       	rjmp	.+210    	; 0x64b0 <f_read+0x1a2>
    63de:	2b 01       	movw	r4, r22
    63e0:	3c 01       	movw	r6, r24
    63e2:	41 0e       	add	r4, r17
    63e4:	51 1c       	adc	r5, r1
    63e6:	61 1c       	adc	r6, r1
    63e8:	71 1c       	adc	r7, r1
    63ea:	67 01       	movw	r12, r14
    63ec:	cd 2c       	mov	r12, r13
    63ee:	dd 24       	eor	r13, r13
    63f0:	c6 94       	lsr	r12
    63f2:	c1 14       	cp	r12, r1
    63f4:	d1 04       	cpc	r13, r1
    63f6:	09 f4       	brne	.+2      	; 0x63fa <f_read+0xec>
    63f8:	7b c0       	rjmp	.+246    	; 0x64f0 <f_read+0x1e2>
    63fa:	f4 01       	movw	r30, r8
    63fc:	82 81       	ldd	r24, Z+2	; 0x02
    63fe:	21 2f       	mov	r18, r17
    6400:	30 e0       	ldi	r19, 0x00	; 0
    6402:	a6 01       	movw	r20, r12
    6404:	42 0f       	add	r20, r18
    6406:	53 1f       	adc	r21, r19
    6408:	90 e0       	ldi	r25, 0x00	; 0
    640a:	84 17       	cp	r24, r20
    640c:	95 07       	cpc	r25, r21
    640e:	18 f4       	brcc	.+6      	; 0x6416 <f_read+0x108>
    6410:	6c 01       	movw	r12, r24
    6412:	c2 1a       	sub	r12, r18
    6414:	d3 0a       	sbc	r13, r19
    6416:	86 01       	movw	r16, r12
    6418:	a3 01       	movw	r20, r6
    641a:	92 01       	movw	r18, r4
    641c:	b5 01       	movw	r22, r10
    641e:	f4 01       	movw	r30, r8
    6420:	81 81       	ldd	r24, Z+1	; 0x01
    6422:	0e d6       	rcall	.+3100   	; 0x7040 <disk_read>
    6424:	81 11       	cpse	r24, r1
    6426:	7e c0       	rjmp	.+252    	; 0x6524 <f_read+0x216>
    6428:	e8 81       	ld	r30, Y
    642a:	f9 81       	ldd	r31, Y+1	; 0x01
    642c:	84 81       	ldd	r24, Z+4	; 0x04
    642e:	81 11       	cpse	r24, r1
    6430:	41 c0       	rjmp	.+130    	; 0x64b4 <f_read+0x1a6>
    6432:	dc 2c       	mov	r13, r12
    6434:	cc 24       	eor	r12, r12
    6436:	dd 0c       	add	r13, r13
    6438:	ac 0c       	add	r10, r12
    643a:	bd 1c       	adc	r11, r13
    643c:	8e 81       	ldd	r24, Y+6	; 0x06
    643e:	9f 81       	ldd	r25, Y+7	; 0x07
    6440:	a8 85       	ldd	r26, Y+8	; 0x08
    6442:	b9 85       	ldd	r27, Y+9	; 0x09
    6444:	8c 0d       	add	r24, r12
    6446:	9d 1d       	adc	r25, r13
    6448:	a1 1d       	adc	r26, r1
    644a:	b1 1d       	adc	r27, r1
    644c:	8e 83       	std	Y+6, r24	; 0x06
    644e:	9f 83       	std	Y+7, r25	; 0x07
    6450:	a8 87       	std	Y+8, r26	; 0x08
    6452:	b9 87       	std	Y+9, r27	; 0x09
    6454:	f1 01       	movw	r30, r2
    6456:	80 81       	ld	r24, Z
    6458:	91 81       	ldd	r25, Z+1	; 0x01
    645a:	8c 0d       	add	r24, r12
    645c:	9d 1d       	adc	r25, r13
    645e:	80 83       	st	Z, r24
    6460:	91 83       	std	Z+1, r25	; 0x01
    6462:	ec 18       	sub	r14, r12
    6464:	fd 08       	sbc	r15, r13
    6466:	e1 14       	cp	r14, r1
    6468:	f1 04       	cpc	r15, r1
    646a:	09 f0       	breq	.+2      	; 0x646e <f_read+0x160>
    646c:	8a cf       	rjmp	.-236    	; 0x6382 <f_read+0x74>
    646e:	6e c0       	rjmp	.+220    	; 0x654c <f_read+0x23e>
    6470:	45 2b       	or	r20, r21
    6472:	46 2b       	or	r20, r22
    6474:	47 2b       	or	r20, r23
    6476:	29 f4       	brne	.+10     	; 0x6482 <f_read+0x174>
    6478:	6e 85       	ldd	r22, Y+14	; 0x0e
    647a:	7f 85       	ldd	r23, Y+15	; 0x0f
    647c:	88 89       	ldd	r24, Y+16	; 0x10
    647e:	99 89       	ldd	r25, Y+17	; 0x11
    6480:	06 c0       	rjmp	.+12     	; 0x648e <f_read+0x180>
    6482:	4a 89       	ldd	r20, Y+18	; 0x12
    6484:	5b 89       	ldd	r21, Y+19	; 0x13
    6486:	6c 89       	ldd	r22, Y+20	; 0x14
    6488:	7d 89       	ldd	r23, Y+21	; 0x15
    648a:	0e 94 b8 29 	call	0x5370	; 0x5370 <get_fat>
    648e:	62 30       	cpi	r22, 0x02	; 2
    6490:	71 05       	cpc	r23, r1
    6492:	81 05       	cpc	r24, r1
    6494:	91 05       	cpc	r25, r1
    6496:	60 f0       	brcs	.+24     	; 0x64b0 <f_read+0x1a2>
    6498:	6f 3f       	cpi	r22, 0xFF	; 255
    649a:	ff ef       	ldi	r31, 0xFF	; 255
    649c:	7f 07       	cpc	r23, r31
    649e:	8f 07       	cpc	r24, r31
    64a0:	9f 07       	cpc	r25, r31
    64a2:	09 f4       	brne	.+2      	; 0x64a6 <f_read+0x198>
    64a4:	3f c0       	rjmp	.+126    	; 0x6524 <f_read+0x216>
    64a6:	6a 8b       	std	Y+18, r22	; 0x12
    64a8:	7b 8b       	std	Y+19, r23	; 0x13
    64aa:	8c 8b       	std	Y+20, r24	; 0x14
    64ac:	9d 8b       	std	Y+21, r25	; 0x15
    64ae:	88 cf       	rjmp	.-240    	; 0x63c0 <f_read+0xb2>
    64b0:	82 e0       	ldi	r24, 0x02	; 2
    64b2:	39 c0       	rjmp	.+114    	; 0x6526 <f_read+0x218>
    64b4:	86 a5       	ldd	r24, Z+46	; 0x2e
    64b6:	97 a5       	ldd	r25, Z+47	; 0x2f
    64b8:	a0 a9       	ldd	r26, Z+48	; 0x30
    64ba:	b1 a9       	ldd	r27, Z+49	; 0x31
    64bc:	84 19       	sub	r24, r4
    64be:	95 09       	sbc	r25, r5
    64c0:	a6 09       	sbc	r26, r6
    64c2:	b7 09       	sbc	r27, r7
    64c4:	a6 01       	movw	r20, r12
    64c6:	60 e0       	ldi	r22, 0x00	; 0
    64c8:	70 e0       	ldi	r23, 0x00	; 0
    64ca:	84 17       	cp	r24, r20
    64cc:	95 07       	cpc	r25, r21
    64ce:	a6 07       	cpc	r26, r22
    64d0:	b7 07       	cpc	r27, r23
    64d2:	08 f0       	brcs	.+2      	; 0x64d6 <f_read+0x1c8>
    64d4:	ae cf       	rjmp	.-164    	; 0x6432 <f_read+0x124>
    64d6:	bf 01       	movw	r22, r30
    64d8:	6e 5c       	subi	r22, 0xCE	; 206
    64da:	7f 4f       	sbci	r23, 0xFF	; 255
    64dc:	98 2f       	mov	r25, r24
    64de:	88 27       	eor	r24, r24
    64e0:	99 0f       	add	r25, r25
    64e2:	40 e0       	ldi	r20, 0x00	; 0
    64e4:	52 e0       	ldi	r21, 0x02	; 2
    64e6:	8a 0d       	add	r24, r10
    64e8:	9b 1d       	adc	r25, r11
    64ea:	0e 94 6e 25 	call	0x4adc	; 0x4adc <mem_cpy>
    64ee:	a1 cf       	rjmp	.-190    	; 0x6432 <f_read+0x124>
    64f0:	4e 8a       	std	Y+22, r4	; 0x16
    64f2:	5f 8a       	std	Y+23, r5	; 0x17
    64f4:	68 8e       	std	Y+24, r6	; 0x18
    64f6:	79 8e       	std	Y+25, r7	; 0x19
    64f8:	8e 81       	ldd	r24, Y+6	; 0x06
    64fa:	9f 81       	ldd	r25, Y+7	; 0x07
    64fc:	91 70       	andi	r25, 0x01	; 1
    64fe:	20 e0       	ldi	r18, 0x00	; 0
    6500:	32 e0       	ldi	r19, 0x02	; 2
    6502:	28 1b       	sub	r18, r24
    6504:	39 0b       	sbc	r19, r25
    6506:	67 01       	movw	r12, r14
    6508:	2e 15       	cp	r18, r14
    650a:	3f 05       	cpc	r19, r15
    650c:	08 f4       	brcc	.+2      	; 0x6510 <f_read+0x202>
    650e:	69 01       	movw	r12, r18
    6510:	4e 89       	ldd	r20, Y+22	; 0x16
    6512:	5f 89       	ldd	r21, Y+23	; 0x17
    6514:	68 8d       	ldd	r22, Y+24	; 0x18
    6516:	79 8d       	ldd	r23, Y+25	; 0x19
    6518:	88 81       	ld	r24, Y
    651a:	99 81       	ldd	r25, Y+1	; 0x01
    651c:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <move_window>
    6520:	88 23       	and	r24, r24
    6522:	19 f0       	breq	.+6      	; 0x652a <f_read+0x21c>
    6524:	81 e0       	ldi	r24, 0x01	; 1
    6526:	8d 83       	std	Y+5, r24	; 0x05
    6528:	14 c0       	rjmp	.+40     	; 0x6552 <f_read+0x244>
    652a:	8e 81       	ldd	r24, Y+6	; 0x06
    652c:	9f 81       	ldd	r25, Y+7	; 0x07
    652e:	a8 85       	ldd	r26, Y+8	; 0x08
    6530:	b9 85       	ldd	r27, Y+9	; 0x09
    6532:	91 70       	andi	r25, 0x01	; 1
    6534:	aa 27       	eor	r26, r26
    6536:	bb 27       	eor	r27, r27
    6538:	c2 96       	adiw	r24, 0x32	; 50
    653a:	68 81       	ld	r22, Y
    653c:	79 81       	ldd	r23, Y+1	; 0x01
    653e:	68 0f       	add	r22, r24
    6540:	79 1f       	adc	r23, r25
    6542:	a6 01       	movw	r20, r12
    6544:	c5 01       	movw	r24, r10
    6546:	0e 94 6e 25 	call	0x4adc	; 0x4adc <mem_cpy>
    654a:	76 cf       	rjmp	.-276    	; 0x6438 <f_read+0x12a>
    654c:	80 e0       	ldi	r24, 0x00	; 0
    654e:	01 c0       	rjmp	.+2      	; 0x6552 <f_read+0x244>
    6550:	87 e0       	ldi	r24, 0x07	; 7
    6552:	df 91       	pop	r29
    6554:	cf 91       	pop	r28
    6556:	1f 91       	pop	r17
    6558:	0f 91       	pop	r16
    655a:	ff 90       	pop	r15
    655c:	ef 90       	pop	r14
    655e:	df 90       	pop	r13
    6560:	cf 90       	pop	r12
    6562:	bf 90       	pop	r11
    6564:	af 90       	pop	r10
    6566:	9f 90       	pop	r9
    6568:	8f 90       	pop	r8
    656a:	7f 90       	pop	r7
    656c:	6f 90       	pop	r6
    656e:	5f 90       	pop	r5
    6570:	4f 90       	pop	r4
    6572:	3f 90       	pop	r3
    6574:	2f 90       	pop	r2
    6576:	08 95       	ret

00006578 <f_write>:
    6578:	2f 92       	push	r2
    657a:	3f 92       	push	r3
    657c:	4f 92       	push	r4
    657e:	5f 92       	push	r5
    6580:	6f 92       	push	r6
    6582:	7f 92       	push	r7
    6584:	8f 92       	push	r8
    6586:	9f 92       	push	r9
    6588:	af 92       	push	r10
    658a:	bf 92       	push	r11
    658c:	cf 92       	push	r12
    658e:	df 92       	push	r13
    6590:	ef 92       	push	r14
    6592:	ff 92       	push	r15
    6594:	0f 93       	push	r16
    6596:	1f 93       	push	r17
    6598:	cf 93       	push	r28
    659a:	df 93       	push	r29
    659c:	ec 01       	movw	r28, r24
    659e:	5b 01       	movw	r10, r22
    65a0:	7a 01       	movw	r14, r20
    65a2:	19 01       	movw	r2, r18
    65a4:	f9 01       	movw	r30, r18
    65a6:	10 82       	st	Z, r1
    65a8:	11 82       	std	Z+1, r1	; 0x01
    65aa:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <validate>
    65ae:	81 11       	cpse	r24, r1
    65b0:	61 c1       	rjmp	.+706    	; 0x6874 <f_write+0x2fc>
    65b2:	8d 81       	ldd	r24, Y+5	; 0x05
    65b4:	81 11       	cpse	r24, r1
    65b6:	5e c1       	rjmp	.+700    	; 0x6874 <f_write+0x2fc>
    65b8:	8c 81       	ldd	r24, Y+4	; 0x04
    65ba:	81 ff       	sbrs	r24, 1
    65bc:	5a c1       	rjmp	.+692    	; 0x6872 <f_write+0x2fa>
    65be:	8e 81       	ldd	r24, Y+6	; 0x06
    65c0:	9f 81       	ldd	r25, Y+7	; 0x07
    65c2:	a8 85       	ldd	r26, Y+8	; 0x08
    65c4:	b9 85       	ldd	r27, Y+9	; 0x09
    65c6:	ac 01       	movw	r20, r24
    65c8:	bd 01       	movw	r22, r26
    65ca:	4e 0d       	add	r20, r14
    65cc:	5f 1d       	adc	r21, r15
    65ce:	61 1d       	adc	r22, r1
    65d0:	71 1d       	adc	r23, r1
    65d2:	48 17       	cp	r20, r24
    65d4:	59 07       	cpc	r21, r25
    65d6:	6a 07       	cpc	r22, r26
    65d8:	7b 07       	cpc	r23, r27
    65da:	08 f0       	brcs	.+2      	; 0x65de <f_write+0x66>
    65dc:	a1 c0       	rjmp	.+322    	; 0x6720 <f_write+0x1a8>
    65de:	e1 2c       	mov	r14, r1
    65e0:	f1 2c       	mov	r15, r1
    65e2:	9e c0       	rjmp	.+316    	; 0x6720 <f_write+0x1a8>
    65e4:	4e 81       	ldd	r20, Y+6	; 0x06
    65e6:	5f 81       	ldd	r21, Y+7	; 0x07
    65e8:	68 85       	ldd	r22, Y+8	; 0x08
    65ea:	79 85       	ldd	r23, Y+9	; 0x09
    65ec:	db 01       	movw	r26, r22
    65ee:	ca 01       	movw	r24, r20
    65f0:	91 70       	andi	r25, 0x01	; 1
    65f2:	aa 27       	eor	r26, r26
    65f4:	bb 27       	eor	r27, r27
    65f6:	89 2b       	or	r24, r25
    65f8:	8a 2b       	or	r24, r26
    65fa:	8b 2b       	or	r24, r27
    65fc:	09 f0       	breq	.+2      	; 0x6600 <f_write+0x88>
    65fe:	06 c1       	rjmp	.+524    	; 0x680c <f_write+0x294>
    6600:	e8 81       	ld	r30, Y
    6602:	f9 81       	ldd	r31, Y+1	; 0x01
    6604:	12 81       	ldd	r17, Z+2	; 0x02
    6606:	11 50       	subi	r17, 0x01	; 1
    6608:	2a 01       	movw	r4, r20
    660a:	3b 01       	movw	r6, r22
    660c:	a9 e0       	ldi	r26, 0x09	; 9
    660e:	76 94       	lsr	r7
    6610:	67 94       	ror	r6
    6612:	57 94       	ror	r5
    6614:	47 94       	ror	r4
    6616:	aa 95       	dec	r26
    6618:	d1 f7       	brne	.-12     	; 0x660e <f_write+0x96>
    661a:	14 21       	and	r17, r4
    661c:	09 f4       	brne	.+2      	; 0x6620 <f_write+0xa8>
    661e:	85 c0       	rjmp	.+266    	; 0x672a <f_write+0x1b2>
    6620:	88 81       	ld	r24, Y
    6622:	99 81       	ldd	r25, Y+1	; 0x01
    6624:	fc 01       	movw	r30, r24
    6626:	46 a4       	ldd	r4, Z+46	; 0x2e
    6628:	57 a4       	ldd	r5, Z+47	; 0x2f
    662a:	60 a8       	ldd	r6, Z+48	; 0x30
    662c:	71 a8       	ldd	r7, Z+49	; 0x31
    662e:	4e 89       	ldd	r20, Y+22	; 0x16
    6630:	5f 89       	ldd	r21, Y+23	; 0x17
    6632:	68 8d       	ldd	r22, Y+24	; 0x18
    6634:	79 8d       	ldd	r23, Y+25	; 0x19
    6636:	44 16       	cp	r4, r20
    6638:	55 06       	cpc	r5, r21
    663a:	66 06       	cpc	r6, r22
    663c:	77 06       	cpc	r7, r23
    663e:	09 f4       	brne	.+2      	; 0x6642 <f_write+0xca>
    6640:	c1 c0       	rjmp	.+386    	; 0x67c4 <f_write+0x24c>
    6642:	88 80       	ld	r8, Y
    6644:	99 80       	ldd	r9, Y+1	; 0x01
    6646:	4a 89       	ldd	r20, Y+18	; 0x12
    6648:	5b 89       	ldd	r21, Y+19	; 0x13
    664a:	6c 89       	ldd	r22, Y+20	; 0x14
    664c:	7d 89       	ldd	r23, Y+21	; 0x15
    664e:	c4 01       	movw	r24, r8
    6650:	0e 94 8f 29 	call	0x531e	; 0x531e <clust2sect>
    6654:	61 15       	cp	r22, r1
    6656:	71 05       	cpc	r23, r1
    6658:	81 05       	cpc	r24, r1
    665a:	91 05       	cpc	r25, r1
    665c:	09 f4       	brne	.+2      	; 0x6660 <f_write+0xe8>
    665e:	b8 c0       	rjmp	.+368    	; 0x67d0 <f_write+0x258>
    6660:	2b 01       	movw	r4, r22
    6662:	3c 01       	movw	r6, r24
    6664:	41 0e       	add	r4, r17
    6666:	51 1c       	adc	r5, r1
    6668:	61 1c       	adc	r6, r1
    666a:	71 1c       	adc	r7, r1
    666c:	67 01       	movw	r12, r14
    666e:	cd 2c       	mov	r12, r13
    6670:	dd 24       	eor	r13, r13
    6672:	c6 94       	lsr	r12
    6674:	c1 14       	cp	r12, r1
    6676:	d1 04       	cpc	r13, r1
    6678:	09 f4       	brne	.+2      	; 0x667c <f_write+0x104>
    667a:	ac c0       	rjmp	.+344    	; 0x67d4 <f_write+0x25c>
    667c:	f4 01       	movw	r30, r8
    667e:	82 81       	ldd	r24, Z+2	; 0x02
    6680:	21 2f       	mov	r18, r17
    6682:	30 e0       	ldi	r19, 0x00	; 0
    6684:	a6 01       	movw	r20, r12
    6686:	42 0f       	add	r20, r18
    6688:	53 1f       	adc	r21, r19
    668a:	90 e0       	ldi	r25, 0x00	; 0
    668c:	84 17       	cp	r24, r20
    668e:	95 07       	cpc	r25, r21
    6690:	18 f4       	brcc	.+6      	; 0x6698 <f_write+0x120>
    6692:	6c 01       	movw	r12, r24
    6694:	c2 1a       	sub	r12, r18
    6696:	d3 0a       	sbc	r13, r19
    6698:	86 01       	movw	r16, r12
    669a:	a3 01       	movw	r20, r6
    669c:	92 01       	movw	r18, r4
    669e:	b5 01       	movw	r22, r10
    66a0:	f4 01       	movw	r30, r8
    66a2:	81 81       	ldd	r24, Z+1	; 0x01
    66a4:	18 d5       	rcall	.+2608   	; 0x70d6 <disk_write>
    66a6:	81 11       	cpse	r24, r1
    66a8:	c7 c0       	rjmp	.+398    	; 0x6838 <f_write+0x2c0>
    66aa:	88 81       	ld	r24, Y
    66ac:	99 81       	ldd	r25, Y+1	; 0x01
    66ae:	fc 01       	movw	r30, r24
    66b0:	46 a5       	ldd	r20, Z+46	; 0x2e
    66b2:	57 a5       	ldd	r21, Z+47	; 0x2f
    66b4:	60 a9       	ldd	r22, Z+48	; 0x30
    66b6:	71 a9       	ldd	r23, Z+49	; 0x31
    66b8:	44 19       	sub	r20, r4
    66ba:	55 09       	sbc	r21, r5
    66bc:	66 09       	sbc	r22, r6
    66be:	77 09       	sbc	r23, r7
    66c0:	26 01       	movw	r4, r12
    66c2:	61 2c       	mov	r6, r1
    66c4:	71 2c       	mov	r7, r1
    66c6:	44 15       	cp	r20, r4
    66c8:	55 05       	cpc	r21, r5
    66ca:	66 05       	cpc	r22, r6
    66cc:	77 05       	cpc	r23, r7
    66ce:	70 f4       	brcc	.+28     	; 0x66ec <f_write+0x174>
    66d0:	ba 01       	movw	r22, r20
    66d2:	76 2f       	mov	r23, r22
    66d4:	66 27       	eor	r22, r22
    66d6:	77 0f       	add	r23, r23
    66d8:	6a 0d       	add	r22, r10
    66da:	7b 1d       	adc	r23, r11
    66dc:	40 e0       	ldi	r20, 0x00	; 0
    66de:	52 e0       	ldi	r21, 0x02	; 2
    66e0:	c2 96       	adiw	r24, 0x32	; 50
    66e2:	0e 94 6e 25 	call	0x4adc	; 0x4adc <mem_cpy>
    66e6:	e8 81       	ld	r30, Y
    66e8:	f9 81       	ldd	r31, Y+1	; 0x01
    66ea:	14 82       	std	Z+4, r1	; 0x04
    66ec:	dc 2c       	mov	r13, r12
    66ee:	cc 24       	eor	r12, r12
    66f0:	dd 0c       	add	r13, r13
    66f2:	ac 0c       	add	r10, r12
    66f4:	bd 1c       	adc	r11, r13
    66f6:	8e 81       	ldd	r24, Y+6	; 0x06
    66f8:	9f 81       	ldd	r25, Y+7	; 0x07
    66fa:	a8 85       	ldd	r26, Y+8	; 0x08
    66fc:	b9 85       	ldd	r27, Y+9	; 0x09
    66fe:	8c 0d       	add	r24, r12
    6700:	9d 1d       	adc	r25, r13
    6702:	a1 1d       	adc	r26, r1
    6704:	b1 1d       	adc	r27, r1
    6706:	8e 83       	std	Y+6, r24	; 0x06
    6708:	9f 83       	std	Y+7, r25	; 0x07
    670a:	a8 87       	std	Y+8, r26	; 0x08
    670c:	b9 87       	std	Y+9, r27	; 0x09
    670e:	f1 01       	movw	r30, r2
    6710:	80 81       	ld	r24, Z
    6712:	91 81       	ldd	r25, Z+1	; 0x01
    6714:	8c 0d       	add	r24, r12
    6716:	9d 1d       	adc	r25, r13
    6718:	80 83       	st	Z, r24
    671a:	91 83       	std	Z+1, r25	; 0x01
    671c:	ec 18       	sub	r14, r12
    671e:	fd 08       	sbc	r15, r13
    6720:	e1 14       	cp	r14, r1
    6722:	f1 04       	cpc	r15, r1
    6724:	09 f0       	breq	.+2      	; 0x6728 <f_write+0x1b0>
    6726:	5e cf       	rjmp	.-324    	; 0x65e4 <f_write+0x6c>
    6728:	1c c0       	rjmp	.+56     	; 0x6762 <f_write+0x1ea>
    672a:	45 2b       	or	r20, r21
    672c:	46 2b       	or	r20, r22
    672e:	47 2b       	or	r20, r23
    6730:	69 f4       	brne	.+26     	; 0x674c <f_write+0x1d4>
    6732:	6e 85       	ldd	r22, Y+14	; 0x0e
    6734:	7f 85       	ldd	r23, Y+15	; 0x0f
    6736:	88 89       	ldd	r24, Y+16	; 0x10
    6738:	99 89       	ldd	r25, Y+17	; 0x11
    673a:	61 15       	cp	r22, r1
    673c:	71 05       	cpc	r23, r1
    673e:	81 05       	cpc	r24, r1
    6740:	91 05       	cpc	r25, r1
    6742:	11 f5       	brne	.+68     	; 0x6788 <f_write+0x210>
    6744:	40 e0       	ldi	r20, 0x00	; 0
    6746:	50 e0       	ldi	r21, 0x00	; 0
    6748:	ba 01       	movw	r22, r20
    674a:	04 c0       	rjmp	.+8      	; 0x6754 <f_write+0x1dc>
    674c:	4a 89       	ldd	r20, Y+18	; 0x12
    674e:	5b 89       	ldd	r21, Y+19	; 0x13
    6750:	6c 89       	ldd	r22, Y+20	; 0x14
    6752:	7d 89       	ldd	r23, Y+21	; 0x15
    6754:	cf 01       	movw	r24, r30
    6756:	67 d8       	rcall	.-3890   	; 0x5826 <create_chain>
    6758:	61 15       	cp	r22, r1
    675a:	71 05       	cpc	r23, r1
    675c:	81 05       	cpc	r24, r1
    675e:	91 05       	cpc	r25, r1
    6760:	99 f4       	brne	.+38     	; 0x6788 <f_write+0x210>
    6762:	8e 81       	ldd	r24, Y+6	; 0x06
    6764:	9f 81       	ldd	r25, Y+7	; 0x07
    6766:	a8 85       	ldd	r26, Y+8	; 0x08
    6768:	b9 85       	ldd	r27, Y+9	; 0x09
    676a:	4a 85       	ldd	r20, Y+10	; 0x0a
    676c:	5b 85       	ldd	r21, Y+11	; 0x0b
    676e:	6c 85       	ldd	r22, Y+12	; 0x0c
    6770:	7d 85       	ldd	r23, Y+13	; 0x0d
    6772:	48 17       	cp	r20, r24
    6774:	59 07       	cpc	r21, r25
    6776:	6a 07       	cpc	r22, r26
    6778:	7b 07       	cpc	r23, r27
    677a:	08 f0       	brcs	.+2      	; 0x677e <f_write+0x206>
    677c:	75 c0       	rjmp	.+234    	; 0x6868 <f_write+0x2f0>
    677e:	8a 87       	std	Y+10, r24	; 0x0a
    6780:	9b 87       	std	Y+11, r25	; 0x0b
    6782:	ac 87       	std	Y+12, r26	; 0x0c
    6784:	bd 87       	std	Y+13, r27	; 0x0d
    6786:	70 c0       	rjmp	.+224    	; 0x6868 <f_write+0x2f0>
    6788:	61 30       	cpi	r22, 0x01	; 1
    678a:	71 05       	cpc	r23, r1
    678c:	81 05       	cpc	r24, r1
    678e:	91 05       	cpc	r25, r1
    6790:	f9 f0       	breq	.+62     	; 0x67d0 <f_write+0x258>
    6792:	6f 3f       	cpi	r22, 0xFF	; 255
    6794:	ff ef       	ldi	r31, 0xFF	; 255
    6796:	7f 07       	cpc	r23, r31
    6798:	8f 07       	cpc	r24, r31
    679a:	9f 07       	cpc	r25, r31
    679c:	09 f4       	brne	.+2      	; 0x67a0 <f_write+0x228>
    679e:	4c c0       	rjmp	.+152    	; 0x6838 <f_write+0x2c0>
    67a0:	6a 8b       	std	Y+18, r22	; 0x12
    67a2:	7b 8b       	std	Y+19, r23	; 0x13
    67a4:	8c 8b       	std	Y+20, r24	; 0x14
    67a6:	9d 8b       	std	Y+21, r25	; 0x15
    67a8:	4e 84       	ldd	r4, Y+14	; 0x0e
    67aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    67ac:	68 88       	ldd	r6, Y+16	; 0x10
    67ae:	79 88       	ldd	r7, Y+17	; 0x11
    67b0:	45 28       	or	r4, r5
    67b2:	46 28       	or	r4, r6
    67b4:	47 28       	or	r4, r7
    67b6:	09 f0       	breq	.+2      	; 0x67ba <f_write+0x242>
    67b8:	33 cf       	rjmp	.-410    	; 0x6620 <f_write+0xa8>
    67ba:	6e 87       	std	Y+14, r22	; 0x0e
    67bc:	7f 87       	std	Y+15, r23	; 0x0f
    67be:	88 8b       	std	Y+16, r24	; 0x10
    67c0:	99 8b       	std	Y+17, r25	; 0x11
    67c2:	2e cf       	rjmp	.-420    	; 0x6620 <f_write+0xa8>
    67c4:	0e 94 dd 25 	call	0x4bba	; 0x4bba <sync_window>
    67c8:	88 23       	and	r24, r24
    67ca:	09 f4       	brne	.+2      	; 0x67ce <f_write+0x256>
    67cc:	3a cf       	rjmp	.-396    	; 0x6642 <f_write+0xca>
    67ce:	34 c0       	rjmp	.+104    	; 0x6838 <f_write+0x2c0>
    67d0:	82 e0       	ldi	r24, 0x02	; 2
    67d2:	33 c0       	rjmp	.+102    	; 0x683a <f_write+0x2c2>
    67d4:	4e 81       	ldd	r20, Y+6	; 0x06
    67d6:	5f 81       	ldd	r21, Y+7	; 0x07
    67d8:	68 85       	ldd	r22, Y+8	; 0x08
    67da:	79 85       	ldd	r23, Y+9	; 0x09
    67dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    67de:	9b 85       	ldd	r25, Y+11	; 0x0b
    67e0:	ac 85       	ldd	r26, Y+12	; 0x0c
    67e2:	bd 85       	ldd	r27, Y+13	; 0x0d
    67e4:	48 17       	cp	r20, r24
    67e6:	59 07       	cpc	r21, r25
    67e8:	6a 07       	cpc	r22, r26
    67ea:	7b 07       	cpc	r23, r27
    67ec:	58 f0       	brcs	.+22     	; 0x6804 <f_write+0x28c>
    67ee:	c4 01       	movw	r24, r8
    67f0:	0e 94 dd 25 	call	0x4bba	; 0x4bba <sync_window>
    67f4:	81 11       	cpse	r24, r1
    67f6:	20 c0       	rjmp	.+64     	; 0x6838 <f_write+0x2c0>
    67f8:	e8 81       	ld	r30, Y
    67fa:	f9 81       	ldd	r31, Y+1	; 0x01
    67fc:	46 a6       	std	Z+46, r4	; 0x2e
    67fe:	57 a6       	std	Z+47, r5	; 0x2f
    6800:	60 aa       	std	Z+48, r6	; 0x30
    6802:	71 aa       	std	Z+49, r7	; 0x31
    6804:	4e 8a       	std	Y+22, r4	; 0x16
    6806:	5f 8a       	std	Y+23, r5	; 0x17
    6808:	68 8e       	std	Y+24, r6	; 0x18
    680a:	79 8e       	std	Y+25, r7	; 0x19
    680c:	8e 81       	ldd	r24, Y+6	; 0x06
    680e:	9f 81       	ldd	r25, Y+7	; 0x07
    6810:	91 70       	andi	r25, 0x01	; 1
    6812:	20 e0       	ldi	r18, 0x00	; 0
    6814:	32 e0       	ldi	r19, 0x02	; 2
    6816:	28 1b       	sub	r18, r24
    6818:	39 0b       	sbc	r19, r25
    681a:	67 01       	movw	r12, r14
    681c:	2e 15       	cp	r18, r14
    681e:	3f 05       	cpc	r19, r15
    6820:	08 f4       	brcc	.+2      	; 0x6824 <f_write+0x2ac>
    6822:	69 01       	movw	r12, r18
    6824:	4e 89       	ldd	r20, Y+22	; 0x16
    6826:	5f 89       	ldd	r21, Y+23	; 0x17
    6828:	68 8d       	ldd	r22, Y+24	; 0x18
    682a:	79 8d       	ldd	r23, Y+25	; 0x19
    682c:	88 81       	ld	r24, Y
    682e:	99 81       	ldd	r25, Y+1	; 0x01
    6830:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <move_window>
    6834:	88 23       	and	r24, r24
    6836:	19 f0       	breq	.+6      	; 0x683e <f_write+0x2c6>
    6838:	81 e0       	ldi	r24, 0x01	; 1
    683a:	8d 83       	std	Y+5, r24	; 0x05
    683c:	1b c0       	rjmp	.+54     	; 0x6874 <f_write+0x2fc>
    683e:	8e 81       	ldd	r24, Y+6	; 0x06
    6840:	9f 81       	ldd	r25, Y+7	; 0x07
    6842:	a8 85       	ldd	r26, Y+8	; 0x08
    6844:	b9 85       	ldd	r27, Y+9	; 0x09
    6846:	91 70       	andi	r25, 0x01	; 1
    6848:	aa 27       	eor	r26, r26
    684a:	bb 27       	eor	r27, r27
    684c:	c2 96       	adiw	r24, 0x32	; 50
    684e:	28 81       	ld	r18, Y
    6850:	39 81       	ldd	r19, Y+1	; 0x01
    6852:	a6 01       	movw	r20, r12
    6854:	b5 01       	movw	r22, r10
    6856:	82 0f       	add	r24, r18
    6858:	93 1f       	adc	r25, r19
    685a:	0e 94 6e 25 	call	0x4adc	; 0x4adc <mem_cpy>
    685e:	e8 81       	ld	r30, Y
    6860:	f9 81       	ldd	r31, Y+1	; 0x01
    6862:	31 e0       	ldi	r19, 0x01	; 1
    6864:	34 83       	std	Z+4, r19	; 0x04
    6866:	45 cf       	rjmp	.-374    	; 0x66f2 <f_write+0x17a>
    6868:	8c 81       	ldd	r24, Y+4	; 0x04
    686a:	80 62       	ori	r24, 0x20	; 32
    686c:	8c 83       	std	Y+4, r24	; 0x04
    686e:	80 e0       	ldi	r24, 0x00	; 0
    6870:	01 c0       	rjmp	.+2      	; 0x6874 <f_write+0x2fc>
    6872:	87 e0       	ldi	r24, 0x07	; 7
    6874:	df 91       	pop	r29
    6876:	cf 91       	pop	r28
    6878:	1f 91       	pop	r17
    687a:	0f 91       	pop	r16
    687c:	ff 90       	pop	r15
    687e:	ef 90       	pop	r14
    6880:	df 90       	pop	r13
    6882:	cf 90       	pop	r12
    6884:	bf 90       	pop	r11
    6886:	af 90       	pop	r10
    6888:	9f 90       	pop	r9
    688a:	8f 90       	pop	r8
    688c:	7f 90       	pop	r7
    688e:	6f 90       	pop	r6
    6890:	5f 90       	pop	r5
    6892:	4f 90       	pop	r4
    6894:	3f 90       	pop	r3
    6896:	2f 90       	pop	r2
    6898:	08 95       	ret

0000689a <f_sync>:
    689a:	cf 93       	push	r28
    689c:	df 93       	push	r29
    689e:	ec 01       	movw	r28, r24
    68a0:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <validate>
    68a4:	81 11       	cpse	r24, r1
    68a6:	39 c0       	rjmp	.+114    	; 0x691a <f_sync+0x80>
    68a8:	9c 81       	ldd	r25, Y+4	; 0x04
    68aa:	95 ff       	sbrs	r25, 5
    68ac:	36 c0       	rjmp	.+108    	; 0x691a <f_sync+0x80>
    68ae:	4a 8d       	ldd	r20, Y+26	; 0x1a
    68b0:	5b 8d       	ldd	r21, Y+27	; 0x1b
    68b2:	6c 8d       	ldd	r22, Y+28	; 0x1c
    68b4:	7d 8d       	ldd	r23, Y+29	; 0x1d
    68b6:	88 81       	ld	r24, Y
    68b8:	99 81       	ldd	r25, Y+1	; 0x01
    68ba:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <move_window>
    68be:	81 11       	cpse	r24, r1
    68c0:	2c c0       	rjmp	.+88     	; 0x691a <f_sync+0x80>
    68c2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    68c4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    68c6:	83 85       	ldd	r24, Z+11	; 0x0b
    68c8:	80 62       	ori	r24, 0x20	; 32
    68ca:	83 87       	std	Z+11, r24	; 0x0b
    68cc:	4a 85       	ldd	r20, Y+10	; 0x0a
    68ce:	5b 85       	ldd	r21, Y+11	; 0x0b
    68d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    68d2:	7d 85       	ldd	r23, Y+13	; 0x0d
    68d4:	44 8f       	std	Z+28, r20	; 0x1c
    68d6:	55 8f       	std	Z+29, r21	; 0x1d
    68d8:	66 8f       	std	Z+30, r22	; 0x1e
    68da:	77 8f       	std	Z+31, r23	; 0x1f
    68dc:	4e 85       	ldd	r20, Y+14	; 0x0e
    68de:	5f 85       	ldd	r21, Y+15	; 0x0f
    68e0:	68 89       	ldd	r22, Y+16	; 0x10
    68e2:	79 89       	ldd	r23, Y+17	; 0x11
    68e4:	42 8f       	std	Z+26, r20	; 0x1a
    68e6:	53 8f       	std	Z+27, r21	; 0x1b
    68e8:	64 8b       	std	Z+20, r22	; 0x14
    68ea:	75 8b       	std	Z+21, r23	; 0x15
    68ec:	40 e0       	ldi	r20, 0x00	; 0
    68ee:	50 e0       	ldi	r21, 0x00	; 0
    68f0:	61 e2       	ldi	r22, 0x21	; 33
    68f2:	76 e4       	ldi	r23, 0x46	; 70
    68f4:	46 8b       	std	Z+22, r20	; 0x16
    68f6:	57 8b       	std	Z+23, r21	; 0x17
    68f8:	60 8f       	std	Z+24, r22	; 0x18
    68fa:	71 8f       	std	Z+25, r23	; 0x19
    68fc:	12 8a       	std	Z+18, r1	; 0x12
    68fe:	13 8a       	std	Z+19, r1	; 0x13
    6900:	8c 81       	ldd	r24, Y+4	; 0x04
    6902:	8f 7d       	andi	r24, 0xDF	; 223
    6904:	8c 83       	std	Y+4, r24	; 0x04
    6906:	e8 81       	ld	r30, Y
    6908:	f9 81       	ldd	r31, Y+1	; 0x01
    690a:	81 e0       	ldi	r24, 0x01	; 1
    690c:	84 83       	std	Z+4, r24	; 0x04
    690e:	88 81       	ld	r24, Y
    6910:	99 81       	ldd	r25, Y+1	; 0x01
    6912:	df 91       	pop	r29
    6914:	cf 91       	pop	r28
    6916:	0c 94 45 26 	jmp	0x4c8a	; 0x4c8a <sync_fs>
    691a:	df 91       	pop	r29
    691c:	cf 91       	pop	r28
    691e:	08 95       	ret

00006920 <f_close>:
    6920:	cf 93       	push	r28
    6922:	df 93       	push	r29
    6924:	ec 01       	movw	r28, r24
    6926:	b9 df       	rcall	.-142    	; 0x689a <f_sync>
    6928:	81 11       	cpse	r24, r1
    692a:	07 c0       	rjmp	.+14     	; 0x693a <f_close+0x1a>
    692c:	ce 01       	movw	r24, r28
    692e:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <validate>
    6932:	81 11       	cpse	r24, r1
    6934:	02 c0       	rjmp	.+4      	; 0x693a <f_close+0x1a>
    6936:	18 82       	st	Y, r1
    6938:	19 82       	std	Y+1, r1	; 0x01
    693a:	df 91       	pop	r29
    693c:	cf 91       	pop	r28
    693e:	08 95       	ret

00006940 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    6940:	2f 92       	push	r2
    6942:	3f 92       	push	r3
    6944:	4f 92       	push	r4
    6946:	5f 92       	push	r5
    6948:	6f 92       	push	r6
    694a:	7f 92       	push	r7
    694c:	8f 92       	push	r8
    694e:	9f 92       	push	r9
    6950:	af 92       	push	r10
    6952:	bf 92       	push	r11
    6954:	cf 92       	push	r12
    6956:	df 92       	push	r13
    6958:	ef 92       	push	r14
    695a:	ff 92       	push	r15
    695c:	0f 93       	push	r16
    695e:	1f 93       	push	r17
    6960:	cf 93       	push	r28
    6962:	df 93       	push	r29
    6964:	cd b7       	in	r28, 0x3d	; 61
    6966:	de b7       	in	r29, 0x3e	; 62
    6968:	28 97       	sbiw	r28, 0x08	; 8
    696a:	cd bf       	out	0x3d, r28	; 61
    696c:	de bf       	out	0x3e, r29	; 62
    696e:	1c 01       	movw	r2, r24
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
    6970:	4d 83       	std	Y+5, r20	; 0x05
    6972:	5e 83       	std	Y+6, r21	; 0x06
    6974:	6f 83       	std	Y+7, r22	; 0x07
    6976:	78 87       	std	Y+8, r23	; 0x08
    6978:	0e 94 c0 25 	call	0x4b80	; 0x4b80 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    697c:	4d 81       	ldd	r20, Y+5	; 0x05
    697e:	5e 81       	ldd	r21, Y+6	; 0x06
    6980:	6f 81       	ldd	r22, Y+7	; 0x07
    6982:	78 85       	ldd	r23, Y+8	; 0x08
    6984:	81 11       	cpse	r24, r1
    6986:	60 c1       	rjmp	.+704    	; 0x6c48 <f_lseek+0x308>
	if (fp->err)						/* Check error */
    6988:	d1 01       	movw	r26, r2
    698a:	15 96       	adiw	r26, 0x05	; 5
    698c:	8c 91       	ld	r24, X
    698e:	15 97       	sbiw	r26, 0x05	; 5
    6990:	81 11       	cpse	r24, r1
    6992:	5a c1       	rjmp	.+692    	; 0x6c48 <f_lseek+0x308>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    6994:	1a 96       	adiw	r26, 0x0a	; 10
    6996:	cd 90       	ld	r12, X+
    6998:	dd 90       	ld	r13, X+
    699a:	ed 90       	ld	r14, X+
    699c:	fc 90       	ld	r15, X
    699e:	1d 97       	sbiw	r26, 0x0d	; 13
    69a0:	c4 16       	cp	r12, r20
    69a2:	d5 06       	cpc	r13, r21
    69a4:	e6 06       	cpc	r14, r22
    69a6:	f7 06       	cpc	r15, r23
    69a8:	18 f0       	brcs	.+6      	; 0x69b0 <f_lseek+0x70>

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    69aa:	6a 01       	movw	r12, r20
    69ac:	7b 01       	movw	r14, r22
    69ae:	04 c0       	rjmp	.+8      	; 0x69b8 <f_lseek+0x78>

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    69b0:	f1 01       	movw	r30, r2
    69b2:	84 81       	ldd	r24, Z+4	; 0x04
    69b4:	81 fd       	sbrc	r24, 1
    69b6:	f9 cf       	rjmp	.-14     	; 0x69aa <f_lseek+0x6a>
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    69b8:	d1 01       	movw	r26, r2
    69ba:	16 96       	adiw	r26, 0x06	; 6
    69bc:	4d 90       	ld	r4, X+
    69be:	5d 90       	ld	r5, X+
    69c0:	6d 90       	ld	r6, X+
    69c2:	7c 90       	ld	r7, X
    69c4:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    69c6:	f1 01       	movw	r30, r2
    69c8:	16 82       	std	Z+6, r1	; 0x06
    69ca:	17 82       	std	Z+7, r1	; 0x07
    69cc:	10 86       	std	Z+8, r1	; 0x08
    69ce:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    69d0:	c1 14       	cp	r12, r1
    69d2:	d1 04       	cpc	r13, r1
    69d4:	e1 04       	cpc	r14, r1
    69d6:	f1 04       	cpc	r15, r1
    69d8:	21 f4       	brne	.+8      	; 0x69e2 <f_lseek+0xa2>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    69da:	c1 2c       	mov	r12, r1
    69dc:	d1 2c       	mov	r13, r1
    69de:	76 01       	movw	r14, r12
    69e0:	06 c1       	rjmp	.+524    	; 0x6bee <f_lseek+0x2ae>
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    69e2:	00 81       	ld	r16, Z
    69e4:	11 81       	ldd	r17, Z+1	; 0x01
    69e6:	f8 01       	movw	r30, r16
    69e8:	82 80       	ldd	r8, Z+2	; 0x02
    69ea:	91 2c       	mov	r9, r1
    69ec:	a1 2c       	mov	r10, r1
    69ee:	b1 2c       	mov	r11, r1
    69f0:	69 e0       	ldi	r22, 0x09	; 9
    69f2:	88 0c       	add	r8, r8
    69f4:	99 1c       	adc	r9, r9
    69f6:	aa 1c       	adc	r10, r10
    69f8:	bb 1c       	adc	r11, r11
    69fa:	6a 95       	dec	r22
    69fc:	d1 f7       	brne	.-12     	; 0x69f2 <f_lseek+0xb2>
			if (ifptr > 0 &&
    69fe:	41 14       	cp	r4, r1
    6a00:	51 04       	cpc	r5, r1
    6a02:	61 04       	cpc	r6, r1
    6a04:	71 04       	cpc	r7, r1
    6a06:	d9 f1       	breq	.+118    	; 0x6a7e <f_lseek+0x13e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    6a08:	f1 e0       	ldi	r31, 0x01	; 1
    6a0a:	4f 1a       	sub	r4, r31
    6a0c:	51 08       	sbc	r5, r1
    6a0e:	61 08       	sbc	r6, r1
    6a10:	71 08       	sbc	r7, r1
    6a12:	c7 01       	movw	r24, r14
    6a14:	b6 01       	movw	r22, r12
    6a16:	61 50       	subi	r22, 0x01	; 1
    6a18:	71 09       	sbc	r23, r1
    6a1a:	81 09       	sbc	r24, r1
    6a1c:	91 09       	sbc	r25, r1
    6a1e:	a5 01       	movw	r20, r10
    6a20:	94 01       	movw	r18, r8
    6a22:	0e 94 be 4e 	call	0x9d7c	; 0x9d7c <__udivmodsi4>
    6a26:	29 83       	std	Y+1, r18	; 0x01
    6a28:	3a 83       	std	Y+2, r19	; 0x02
    6a2a:	4b 83       	std	Y+3, r20	; 0x03
    6a2c:	5c 83       	std	Y+4, r21	; 0x04
    6a2e:	c3 01       	movw	r24, r6
    6a30:	b2 01       	movw	r22, r4
    6a32:	a5 01       	movw	r20, r10
    6a34:	94 01       	movw	r18, r8
    6a36:	0e 94 be 4e 	call	0x9d7c	; 0x9d7c <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    6a3a:	89 81       	ldd	r24, Y+1	; 0x01
    6a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    6a3e:	ab 81       	ldd	r26, Y+3	; 0x03
    6a40:	bc 81       	ldd	r27, Y+4	; 0x04
    6a42:	82 17       	cp	r24, r18
    6a44:	93 07       	cpc	r25, r19
    6a46:	a4 07       	cpc	r26, r20
    6a48:	b5 07       	cpc	r27, r21
    6a4a:	c8 f0       	brcs	.+50     	; 0x6a7e <f_lseek+0x13e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    6a4c:	88 27       	eor	r24, r24
    6a4e:	99 27       	eor	r25, r25
    6a50:	dc 01       	movw	r26, r24
    6a52:	88 19       	sub	r24, r8
    6a54:	99 09       	sbc	r25, r9
    6a56:	aa 09       	sbc	r26, r10
    6a58:	bb 09       	sbc	r27, r11
    6a5a:	84 21       	and	r24, r4
    6a5c:	95 21       	and	r25, r5
    6a5e:	a6 21       	and	r26, r6
    6a60:	b7 21       	and	r27, r7
    6a62:	f1 01       	movw	r30, r2
    6a64:	86 83       	std	Z+6, r24	; 0x06
    6a66:	97 83       	std	Z+7, r25	; 0x07
    6a68:	a0 87       	std	Z+8, r26	; 0x08
    6a6a:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    6a6c:	c8 1a       	sub	r12, r24
    6a6e:	d9 0a       	sbc	r13, r25
    6a70:	ea 0a       	sbc	r14, r26
    6a72:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    6a74:	42 89       	ldd	r20, Z+18	; 0x12
    6a76:	53 89       	ldd	r21, Z+19	; 0x13
    6a78:	64 89       	ldd	r22, Z+20	; 0x14
    6a7a:	75 89       	ldd	r23, Z+21	; 0x15
    6a7c:	2d c0       	rjmp	.+90     	; 0x6ad8 <f_lseek+0x198>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    6a7e:	d1 01       	movw	r26, r2
    6a80:	1e 96       	adiw	r26, 0x0e	; 14
    6a82:	4d 91       	ld	r20, X+
    6a84:	5d 91       	ld	r21, X+
    6a86:	6d 91       	ld	r22, X+
    6a88:	7c 91       	ld	r23, X
    6a8a:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    6a8c:	41 15       	cp	r20, r1
    6a8e:	51 05       	cpc	r21, r1
    6a90:	61 05       	cpc	r22, r1
    6a92:	71 05       	cpc	r23, r1
    6a94:	d1 f4       	brne	.+52     	; 0x6aca <f_lseek+0x18a>
					clst = create_chain(fp->fs, 0);
    6a96:	40 e0       	ldi	r20, 0x00	; 0
    6a98:	50 e0       	ldi	r21, 0x00	; 0
    6a9a:	ba 01       	movw	r22, r20
    6a9c:	c8 01       	movw	r24, r16
    6a9e:	0e 94 13 2c 	call	0x5826	; 0x5826 <create_chain>
    6aa2:	ab 01       	movw	r20, r22
    6aa4:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    6aa6:	41 30       	cpi	r20, 0x01	; 1
    6aa8:	51 05       	cpc	r21, r1
    6aaa:	61 05       	cpc	r22, r1
    6aac:	71 05       	cpc	r23, r1
    6aae:	09 f4       	brne	.+2      	; 0x6ab2 <f_lseek+0x172>
    6ab0:	63 c0       	rjmp	.+198    	; 0x6b78 <f_lseek+0x238>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    6ab2:	4f 3f       	cpi	r20, 0xFF	; 255
    6ab4:	ff ef       	ldi	r31, 0xFF	; 255
    6ab6:	5f 07       	cpc	r21, r31
    6ab8:	6f 07       	cpc	r22, r31
    6aba:	7f 07       	cpc	r23, r31
    6abc:	09 f4       	brne	.+2      	; 0x6ac0 <f_lseek+0x180>
    6abe:	5a c0       	rjmp	.+180    	; 0x6b74 <f_lseek+0x234>
					fp->sclust = clst;
    6ac0:	f1 01       	movw	r30, r2
    6ac2:	46 87       	std	Z+14, r20	; 0x0e
    6ac4:	57 87       	std	Z+15, r21	; 0x0f
    6ac6:	60 8b       	std	Z+16, r22	; 0x10
    6ac8:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    6aca:	d1 01       	movw	r26, r2
    6acc:	52 96       	adiw	r26, 0x12	; 18
    6ace:	4d 93       	st	X+, r20
    6ad0:	5d 93       	st	X+, r21
    6ad2:	6d 93       	st	X+, r22
    6ad4:	7c 93       	st	X, r23
    6ad6:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    6ad8:	41 15       	cp	r20, r1
    6ada:	51 05       	cpc	r21, r1
    6adc:	61 05       	cpc	r22, r1
    6ade:	71 05       	cpc	r23, r1
    6ae0:	09 f4       	brne	.+2      	; 0x6ae4 <f_lseek+0x1a4>
    6ae2:	7b cf       	rjmp	.-266    	; 0x69da <f_lseek+0x9a>
    6ae4:	2c c0       	rjmp	.+88     	; 0x6b3e <f_lseek+0x1fe>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    6ae6:	42 30       	cpi	r20, 0x02	; 2
    6ae8:	51 05       	cpc	r21, r1
    6aea:	61 05       	cpc	r22, r1
    6aec:	71 05       	cpc	r23, r1
    6aee:	08 f4       	brcc	.+2      	; 0x6af2 <f_lseek+0x1b2>
    6af0:	43 c0       	rjmp	.+134    	; 0x6b78 <f_lseek+0x238>
    6af2:	d1 01       	movw	r26, r2
    6af4:	ed 91       	ld	r30, X+
    6af6:	fc 91       	ld	r31, X
    6af8:	86 89       	ldd	r24, Z+22	; 0x16
    6afa:	97 89       	ldd	r25, Z+23	; 0x17
    6afc:	a0 8d       	ldd	r26, Z+24	; 0x18
    6afe:	b1 8d       	ldd	r27, Z+25	; 0x19
    6b00:	48 17       	cp	r20, r24
    6b02:	59 07       	cpc	r21, r25
    6b04:	6a 07       	cpc	r22, r26
    6b06:	7b 07       	cpc	r23, r27
    6b08:	b8 f5       	brcc	.+110    	; 0x6b78 <f_lseek+0x238>
					fp->clust = clst;
    6b0a:	d1 01       	movw	r26, r2
    6b0c:	52 96       	adiw	r26, 0x12	; 18
    6b0e:	4d 93       	st	X+, r20
    6b10:	5d 93       	st	X+, r21
    6b12:	6d 93       	st	X+, r22
    6b14:	7c 93       	st	X, r23
    6b16:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    6b18:	16 96       	adiw	r26, 0x06	; 6
    6b1a:	8d 91       	ld	r24, X+
    6b1c:	9d 91       	ld	r25, X+
    6b1e:	0d 90       	ld	r0, X+
    6b20:	bc 91       	ld	r27, X
    6b22:	a0 2d       	mov	r26, r0
    6b24:	88 0d       	add	r24, r8
    6b26:	99 1d       	adc	r25, r9
    6b28:	aa 1d       	adc	r26, r10
    6b2a:	bb 1d       	adc	r27, r11
    6b2c:	f1 01       	movw	r30, r2
    6b2e:	86 83       	std	Z+6, r24	; 0x06
    6b30:	97 83       	std	Z+7, r25	; 0x07
    6b32:	a0 87       	std	Z+8, r26	; 0x08
    6b34:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    6b36:	c8 18       	sub	r12, r8
    6b38:	d9 08       	sbc	r13, r9
    6b3a:	ea 08       	sbc	r14, r10
    6b3c:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    6b3e:	8c 14       	cp	r8, r12
    6b40:	9d 04       	cpc	r9, r13
    6b42:	ae 04       	cpc	r10, r14
    6b44:	bf 04       	cpc	r11, r15
    6b46:	18 f5       	brcc	.+70     	; 0x6b8e <f_lseek+0x24e>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    6b48:	f1 01       	movw	r30, r2
    6b4a:	24 81       	ldd	r18, Z+4	; 0x04
    6b4c:	80 81       	ld	r24, Z
    6b4e:	91 81       	ldd	r25, Z+1	; 0x01
    6b50:	21 ff       	sbrs	r18, 1
    6b52:	16 c0       	rjmp	.+44     	; 0x6b80 <f_lseek+0x240>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    6b54:	0e 94 13 2c 	call	0x5826	; 0x5826 <create_chain>
    6b58:	ab 01       	movw	r20, r22
    6b5a:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    6b5c:	41 15       	cp	r20, r1
    6b5e:	51 05       	cpc	r21, r1
    6b60:	61 05       	cpc	r22, r1
    6b62:	71 05       	cpc	r23, r1
    6b64:	91 f0       	breq	.+36     	; 0x6b8a <f_lseek+0x24a>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    6b66:	4f 3f       	cpi	r20, 0xFF	; 255
    6b68:	ff ef       	ldi	r31, 0xFF	; 255
    6b6a:	5f 07       	cpc	r21, r31
    6b6c:	6f 07       	cpc	r22, r31
    6b6e:	7f 07       	cpc	r23, r31
    6b70:	09 f0       	breq	.+2      	; 0x6b74 <f_lseek+0x234>
    6b72:	b9 cf       	rjmp	.-142    	; 0x6ae6 <f_lseek+0x1a6>
    6b74:	81 e0       	ldi	r24, 0x01	; 1
    6b76:	2c c0       	rjmp	.+88     	; 0x6bd0 <f_lseek+0x290>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    6b78:	82 e0       	ldi	r24, 0x02	; 2
    6b7a:	f1 01       	movw	r30, r2
    6b7c:	85 83       	std	Z+5, r24	; 0x05
    6b7e:	64 c0       	rjmp	.+200    	; 0x6c48 <f_lseek+0x308>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    6b80:	0e 94 b8 29 	call	0x5370	; 0x5370 <get_fat>
    6b84:	ab 01       	movw	r20, r22
    6b86:	bc 01       	movw	r22, r24
    6b88:	ee cf       	rjmp	.-36     	; 0x6b66 <f_lseek+0x226>
    6b8a:	75 01       	movw	r14, r10
    6b8c:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    6b8e:	f1 01       	movw	r30, r2
    6b90:	86 81       	ldd	r24, Z+6	; 0x06
    6b92:	97 81       	ldd	r25, Z+7	; 0x07
    6b94:	a0 85       	ldd	r26, Z+8	; 0x08
    6b96:	b1 85       	ldd	r27, Z+9	; 0x09
    6b98:	8c 0d       	add	r24, r12
    6b9a:	9d 1d       	adc	r25, r13
    6b9c:	ae 1d       	adc	r26, r14
    6b9e:	bf 1d       	adc	r27, r15
    6ba0:	86 83       	std	Z+6, r24	; 0x06
    6ba2:	97 83       	std	Z+7, r25	; 0x07
    6ba4:	a0 87       	std	Z+8, r26	; 0x08
    6ba6:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    6ba8:	d7 01       	movw	r26, r14
    6baa:	c6 01       	movw	r24, r12
    6bac:	91 70       	andi	r25, 0x01	; 1
    6bae:	aa 27       	eor	r26, r26
    6bb0:	bb 27       	eor	r27, r27
    6bb2:	89 2b       	or	r24, r25
    6bb4:	8a 2b       	or	r24, r26
    6bb6:	8b 2b       	or	r24, r27
    6bb8:	09 f4       	brne	.+2      	; 0x6bbc <f_lseek+0x27c>
    6bba:	0f cf       	rjmp	.-482    	; 0x69da <f_lseek+0x9a>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    6bbc:	80 81       	ld	r24, Z
    6bbe:	91 81       	ldd	r25, Z+1	; 0x01
    6bc0:	0e 94 8f 29 	call	0x531e	; 0x531e <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    6bc4:	61 15       	cp	r22, r1
    6bc6:	71 05       	cpc	r23, r1
    6bc8:	81 05       	cpc	r24, r1
    6bca:	91 05       	cpc	r25, r1
    6bcc:	29 f4       	brne	.+10     	; 0x6bd8 <f_lseek+0x298>
    6bce:	82 e0       	ldi	r24, 0x02	; 2
    6bd0:	d1 01       	movw	r26, r2
    6bd2:	15 96       	adiw	r26, 0x05	; 5
    6bd4:	8c 93       	st	X, r24
    6bd6:	38 c0       	rjmp	.+112    	; 0x6c48 <f_lseek+0x308>
					nsect += ofs / SS(fp->fs);
    6bd8:	59 e0       	ldi	r21, 0x09	; 9
    6bda:	f6 94       	lsr	r15
    6bdc:	e7 94       	ror	r14
    6bde:	d7 94       	ror	r13
    6be0:	c7 94       	ror	r12
    6be2:	5a 95       	dec	r21
    6be4:	d1 f7       	brne	.-12     	; 0x6bda <f_lseek+0x29a>
    6be6:	c6 0e       	add	r12, r22
    6be8:	d7 1e       	adc	r13, r23
    6bea:	e8 1e       	adc	r14, r24
    6bec:	f9 1e       	adc	r15, r25
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    6bee:	f1 01       	movw	r30, r2
    6bf0:	86 81       	ldd	r24, Z+6	; 0x06
    6bf2:	97 81       	ldd	r25, Z+7	; 0x07
    6bf4:	a0 85       	ldd	r26, Z+8	; 0x08
    6bf6:	b1 85       	ldd	r27, Z+9	; 0x09
    6bf8:	ac 01       	movw	r20, r24
    6bfa:	bd 01       	movw	r22, r26
    6bfc:	51 70       	andi	r21, 0x01	; 1
    6bfe:	66 27       	eor	r22, r22
    6c00:	77 27       	eor	r23, r23
    6c02:	45 2b       	or	r20, r21
    6c04:	46 2b       	or	r20, r22
    6c06:	47 2b       	or	r20, r23
    6c08:	69 f0       	breq	.+26     	; 0x6c24 <f_lseek+0x2e4>
    6c0a:	46 89       	ldd	r20, Z+22	; 0x16
    6c0c:	57 89       	ldd	r21, Z+23	; 0x17
    6c0e:	60 8d       	ldd	r22, Z+24	; 0x18
    6c10:	71 8d       	ldd	r23, Z+25	; 0x19
    6c12:	c4 16       	cp	r12, r20
    6c14:	d5 06       	cpc	r13, r21
    6c16:	e6 06       	cpc	r14, r22
    6c18:	f7 06       	cpc	r15, r23
    6c1a:	21 f0       	breq	.+8      	; 0x6c24 <f_lseek+0x2e4>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    6c1c:	c6 8a       	std	Z+22, r12	; 0x16
    6c1e:	d7 8a       	std	Z+23, r13	; 0x17
    6c20:	e0 8e       	std	Z+24, r14	; 0x18
    6c22:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    6c24:	f1 01       	movw	r30, r2
    6c26:	42 85       	ldd	r20, Z+10	; 0x0a
    6c28:	53 85       	ldd	r21, Z+11	; 0x0b
    6c2a:	64 85       	ldd	r22, Z+12	; 0x0c
    6c2c:	75 85       	ldd	r23, Z+13	; 0x0d
    6c2e:	48 17       	cp	r20, r24
    6c30:	59 07       	cpc	r21, r25
    6c32:	6a 07       	cpc	r22, r26
    6c34:	7b 07       	cpc	r23, r27
    6c36:	38 f4       	brcc	.+14     	; 0x6c46 <f_lseek+0x306>
			fp->fsize = fp->fptr;
    6c38:	82 87       	std	Z+10, r24	; 0x0a
    6c3a:	93 87       	std	Z+11, r25	; 0x0b
    6c3c:	a4 87       	std	Z+12, r26	; 0x0c
    6c3e:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    6c40:	84 81       	ldd	r24, Z+4	; 0x04
    6c42:	80 62       	ori	r24, 0x20	; 32
    6c44:	84 83       	std	Z+4, r24	; 0x04
    6c46:	80 e0       	ldi	r24, 0x00	; 0
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    6c48:	28 96       	adiw	r28, 0x08	; 8
    6c4a:	cd bf       	out	0x3d, r28	; 61
    6c4c:	de bf       	out	0x3e, r29	; 62
    6c4e:	df 91       	pop	r29
    6c50:	cf 91       	pop	r28
    6c52:	1f 91       	pop	r17
    6c54:	0f 91       	pop	r16
    6c56:	ff 90       	pop	r15
    6c58:	ef 90       	pop	r14
    6c5a:	df 90       	pop	r13
    6c5c:	cf 90       	pop	r12
    6c5e:	bf 90       	pop	r11
    6c60:	af 90       	pop	r10
    6c62:	9f 90       	pop	r9
    6c64:	8f 90       	pop	r8
    6c66:	7f 90       	pop	r7
    6c68:	6f 90       	pop	r6
    6c6a:	5f 90       	pop	r5
    6c6c:	4f 90       	pop	r4
    6c6e:	3f 90       	pop	r3
    6c70:	2f 90       	pop	r2
    6c72:	08 95       	ret

00006c74 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6c74:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <spi_wr_rd>

00006c78 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    6c78:	80 e1       	ldi	r24, 0x10	; 16
    6c7a:	e0 e4       	ldi	r30, 0x40	; 64
    6c7c:	f6 e0       	ldi	r31, 0x06	; 6
    6c7e:	85 83       	std	Z+5, r24	; 0x05
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    6c80:	8f ef       	ldi	r24, 0xFF	; 255
    6c82:	f8 cf       	rjmp	.-16     	; 0x6c74 <xchg_spi>

00006c84 <power_off>:
}

static
void power_off (void)
{
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
    6c84:	10 92 00 08 	sts	0x0800, r1
	spi_disable();
    6c88:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <spi_disable>
	PORTB.OUTSET = PIN1_bm;
    6c8c:	82 e0       	ldi	r24, 0x02	; 2
    6c8e:	e0 e2       	ldi	r30, 0x20	; 32
    6c90:	f6 e0       	ldi	r31, 0x06	; 6
    6c92:	85 83       	std	Z+5, r24	; 0x05
	PR.PRPC |= 0x01;
    6c94:	e0 e7       	ldi	r30, 0x70	; 112
    6c96:	f0 e0       	ldi	r31, 0x00	; 0
    6c98:	83 81       	ldd	r24, Z+3	; 0x03
    6c9a:	81 60       	ori	r24, 0x01	; 1
    6c9c:	83 83       	std	Z+3, r24	; 0x03
    6c9e:	2f ef       	ldi	r18, 0xFF	; 255
    6ca0:	83 ef       	ldi	r24, 0xF3	; 243
    6ca2:	91 e0       	ldi	r25, 0x01	; 1
    6ca4:	21 50       	subi	r18, 0x01	; 1
    6ca6:	80 40       	sbci	r24, 0x00	; 0
    6ca8:	90 40       	sbci	r25, 0x00	; 0
    6caa:	e1 f7       	brne	.-8      	; 0x6ca4 <power_off+0x20>
    6cac:	00 c0       	rjmp	.+0      	; 0x6cae <power_off+0x2a>
    6cae:	00 00       	nop
    6cb0:	08 95       	ret

00006cb2 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    6cb2:	cf 92       	push	r12
    6cb4:	df 92       	push	r13
    6cb6:	ff 92       	push	r15
    6cb8:	0f 93       	push	r16
    6cba:	1f 93       	push	r17
    6cbc:	cf 93       	push	r28
    6cbe:	df 93       	push	r29
    6cc0:	1f 92       	push	r1
    6cc2:	cd b7       	in	r28, 0x3d	; 61
    6cc4:	de b7       	in	r29, 0x3e	; 62
    6cc6:	f8 2e       	mov	r15, r24
    6cc8:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    6cca:	84 e1       	ldi	r24, 0x14	; 20
    6ccc:	80 93 bd 2a 	sts	0x2ABD, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6cd0:	8f ef       	ldi	r24, 0xFF	; 255
    6cd2:	99 83       	std	Y+1, r25	; 0x01
    6cd4:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <spi_wr_rd>


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    6cd8:	99 81       	ldd	r25, Y+1	; 0x01
    6cda:	8f 3f       	cpi	r24, 0xFF	; 255
    6cdc:	29 f4       	brne	.+10     	; 0x6ce8 <rcvr_datablock+0x36>
    6cde:	80 91 bd 2a 	lds	r24, 0x2ABD
    6ce2:	81 11       	cpse	r24, r1
    6ce4:	f5 cf       	rjmp	.-22     	; 0x6cd0 <rcvr_datablock+0x1e>
    6ce6:	1d c0       	rjmp	.+58     	; 0x6d22 <rcvr_datablock+0x70>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    6ce8:	8e 3f       	cpi	r24, 0xFE	; 254
    6cea:	d9 f4       	brne	.+54     	; 0x6d22 <rcvr_datablock+0x70>
    6cec:	cf 2c       	mov	r12, r15
    6cee:	d9 2e       	mov	r13, r25
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    6cf0:	8f ef       	ldi	r24, 0xFF	; 255
    6cf2:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <spi_wr_rd>
    6cf6:	f6 01       	movw	r30, r12
    6cf8:	80 83       	st	Z, r24
		*p++ = spi_wr_rd(0xff);
    6cfa:	8f ef       	ldi	r24, 0xFF	; 255
    6cfc:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <spi_wr_rd>
    6d00:	f6 01       	movw	r30, r12
    6d02:	81 83       	std	Z+1, r24	; 0x01
		
	} while (cnt -= 2);
    6d04:	02 50       	subi	r16, 0x02	; 2
    6d06:	11 09       	sbc	r17, r1
    6d08:	f2 e0       	ldi	r31, 0x02	; 2
    6d0a:	cf 0e       	add	r12, r31
    6d0c:	d1 1c       	adc	r13, r1
    6d0e:	01 15       	cp	r16, r1
    6d10:	11 05       	cpc	r17, r1
    6d12:	71 f7       	brne	.-36     	; 0x6cf0 <rcvr_datablock+0x3e>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    6d14:	8f ef       	ldi	r24, 0xFF	; 255
    6d16:	ae df       	rcall	.-164    	; 0x6c74 <xchg_spi>
	xchg_spi(0xFF);
    6d18:	8f ef       	ldi	r24, 0xFF	; 255
    6d1a:	ac df       	rcall	.-168    	; 0x6c74 <xchg_spi>
    6d1c:	81 e0       	ldi	r24, 0x01	; 1
    6d1e:	90 e0       	ldi	r25, 0x00	; 0
    6d20:	02 c0       	rjmp	.+4      	; 0x6d26 <rcvr_datablock+0x74>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    6d22:	80 e0       	ldi	r24, 0x00	; 0
    6d24:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    6d26:	0f 90       	pop	r0
    6d28:	df 91       	pop	r29
    6d2a:	cf 91       	pop	r28
    6d2c:	1f 91       	pop	r17
    6d2e:	0f 91       	pop	r16
    6d30:	ff 90       	pop	r15
    6d32:	df 90       	pop	r13
    6d34:	cf 90       	pop	r12
    6d36:	08 95       	ret

00006d38 <wait_ready.constprop.2>:
)
{
	BYTE d;


	Timer2 = wt / 10;
    6d38:	82 e3       	ldi	r24, 0x32	; 50
    6d3a:	80 93 bc 2a 	sts	0x2ABC, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6d3e:	8f ef       	ldi	r24, 0xFF	; 255
    6d40:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <spi_wr_rd>
    6d44:	28 2f       	mov	r18, r24


	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    6d46:	8f 3f       	cpi	r24, 0xFF	; 255
    6d48:	21 f0       	breq	.+8      	; 0x6d52 <wait_ready.constprop.2+0x1a>
    6d4a:	80 91 bc 2a 	lds	r24, 0x2ABC
    6d4e:	81 11       	cpse	r24, r1
    6d50:	f6 cf       	rjmp	.-20     	; 0x6d3e <wait_ready.constprop.2+0x6>

	return (d == 0xFF) ? 1 : 0;
    6d52:	81 e0       	ldi	r24, 0x01	; 1
    6d54:	90 e0       	ldi	r25, 0x00	; 0
    6d56:	2f 3f       	cpi	r18, 0xFF	; 255
    6d58:	11 f0       	breq	.+4      	; 0x6d5e <wait_ready.constprop.2+0x26>
    6d5a:	80 e0       	ldi	r24, 0x00	; 0
    6d5c:	90 e0       	ldi	r25, 0x00	; 0
}
    6d5e:	08 95       	ret

00006d60 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    6d60:	cf 93       	push	r28
    6d62:	df 93       	push	r29
    6d64:	00 d0       	rcall	.+0      	; 0x6d66 <select+0x6>
    6d66:	cd b7       	in	r28, 0x3d	; 61
    6d68:	de b7       	in	r29, 0x3e	; 62
	CS_LOW();		/* Set CS# low */
    6d6a:	80 e1       	ldi	r24, 0x10	; 16
    6d6c:	80 93 46 06 	sts	0x0646, r24
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    6d70:	8f ef       	ldi	r24, 0xFF	; 255
    6d72:	80 df       	rcall	.-256    	; 0x6c74 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    6d74:	e1 df       	rcall	.-62     	; 0x6d38 <wait_ready.constprop.2>
    6d76:	00 97       	sbiw	r24, 0x00	; 0
    6d78:	31 f4       	brne	.+12     	; 0x6d86 <select+0x26>

	deselect();
    6d7a:	89 83       	std	Y+1, r24	; 0x01
    6d7c:	9a 83       	std	Y+2, r25	; 0x02
    6d7e:	7c df       	rcall	.-264    	; 0x6c78 <deselect>
	return 0;	/* Timeout */
    6d80:	89 81       	ldd	r24, Y+1	; 0x01
    6d82:	9a 81       	ldd	r25, Y+2	; 0x02
    6d84:	02 c0       	rjmp	.+4      	; 0x6d8a <select+0x2a>
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    6d86:	81 e0       	ldi	r24, 0x01	; 1
    6d88:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    6d8a:	0f 90       	pop	r0
    6d8c:	0f 90       	pop	r0
    6d8e:	df 91       	pop	r29
    6d90:	cf 91       	pop	r28
    6d92:	08 95       	ret

00006d94 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    6d94:	ff 92       	push	r15
    6d96:	0f 93       	push	r16
    6d98:	1f 93       	push	r17
    6d9a:	cf 93       	push	r28
    6d9c:	df 93       	push	r29
    6d9e:	c8 2f       	mov	r28, r24
    6da0:	d4 2f       	mov	r29, r20
    6da2:	15 2f       	mov	r17, r21
    6da4:	06 2f       	mov	r16, r22
    6da6:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    6da8:	87 ff       	sbrs	r24, 7
    6daa:	08 c0       	rjmp	.+16     	; 0x6dbc <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    6dac:	40 e0       	ldi	r20, 0x00	; 0
    6dae:	50 e0       	ldi	r21, 0x00	; 0
    6db0:	ba 01       	movw	r22, r20
    6db2:	87 e3       	ldi	r24, 0x37	; 55
    6db4:	ef df       	rcall	.-34     	; 0x6d94 <send_cmd>
		if (res > 1) return res;
    6db6:	82 30       	cpi	r24, 0x02	; 2
    6db8:	58 f5       	brcc	.+86     	; 0x6e10 <send_cmd+0x7c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    6dba:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    6dbc:	cc 30       	cpi	r28, 0x0C	; 12
    6dbe:	71 f4       	brne	.+28     	; 0x6ddc <send_cmd+0x48>
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    6dc0:	8c 2f       	mov	r24, r28
    6dc2:	80 64       	ori	r24, 0x40	; 64
    6dc4:	57 df       	rcall	.-338    	; 0x6c74 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    6dc6:	8f 2d       	mov	r24, r15
    6dc8:	55 df       	rcall	.-342    	; 0x6c74 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    6dca:	80 2f       	mov	r24, r16
    6dcc:	53 df       	rcall	.-346    	; 0x6c74 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    6dce:	81 2f       	mov	r24, r17
    6dd0:	51 df       	rcall	.-350    	; 0x6c74 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    6dd2:	8d 2f       	mov	r24, r29
    6dd4:	4f df       	rcall	.-354    	; 0x6c74 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    6dd6:	cc 23       	and	r28, r28
    6dd8:	59 f0       	breq	.+22     	; 0x6df0 <send_cmd+0x5c>
    6dda:	06 c0       	rjmp	.+12     	; 0x6de8 <send_cmd+0x54>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
    6ddc:	4d df       	rcall	.-358    	; 0x6c78 <deselect>
		if (!select()) return 0xFF;
    6dde:	c0 df       	rcall	.-128    	; 0x6d60 <select>
    6de0:	89 2b       	or	r24, r25
    6de2:	71 f7       	brne	.-36     	; 0x6dc0 <send_cmd+0x2c>
    6de4:	8f ef       	ldi	r24, 0xFF	; 255
    6de6:	14 c0       	rjmp	.+40     	; 0x6e10 <send_cmd+0x7c>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    6de8:	c8 30       	cpi	r28, 0x08	; 8
    6dea:	21 f0       	breq	.+8      	; 0x6df4 <send_cmd+0x60>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    6dec:	81 e0       	ldi	r24, 0x01	; 1
    6dee:	03 c0       	rjmp	.+6      	; 0x6df6 <send_cmd+0x62>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    6df0:	85 e9       	ldi	r24, 0x95	; 149
    6df2:	01 c0       	rjmp	.+2      	; 0x6df6 <send_cmd+0x62>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    6df4:	87 e8       	ldi	r24, 0x87	; 135
	xchg_spi(n);
    6df6:	3e df       	rcall	.-388    	; 0x6c74 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    6df8:	cc 30       	cpi	r28, 0x0C	; 12
    6dfa:	11 f4       	brne	.+4      	; 0x6e00 <send_cmd+0x6c>
    6dfc:	8f ef       	ldi	r24, 0xFF	; 255
    6dfe:	3a df       	rcall	.-396    	; 0x6c74 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    6e00:	ca e0       	ldi	r28, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6e02:	8f ef       	ldi	r24, 0xFF	; 255
    6e04:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <spi_wr_rd>
	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);
    6e08:	87 ff       	sbrs	r24, 7
    6e0a:	02 c0       	rjmp	.+4      	; 0x6e10 <send_cmd+0x7c>
    6e0c:	c1 50       	subi	r28, 0x01	; 1
    6e0e:	c9 f7       	brne	.-14     	; 0x6e02 <send_cmd+0x6e>

	return res;			/* Return with the response value */
}
    6e10:	df 91       	pop	r29
    6e12:	cf 91       	pop	r28
    6e14:	1f 91       	pop	r17
    6e16:	0f 91       	pop	r16
    6e18:	ff 90       	pop	r15
    6e1a:	08 95       	ret

00006e1c <xmit_datablock.part.1>:
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
    6e1c:	0f 93       	push	r16
    6e1e:	1f 93       	push	r17
    6e20:	cf 93       	push	r28
    6e22:	df 93       	push	r29
    6e24:	ec 01       	movw	r28, r24
    6e26:	8c 01       	movw	r16, r24
    6e28:	1e 5f       	subi	r17, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		spi_wr_rd(*p++);
    6e2a:	88 81       	ld	r24, Y
    6e2c:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <spi_wr_rd>
		spi_wr_rd(*p++);
    6e30:	89 81       	ldd	r24, Y+1	; 0x01
    6e32:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <spi_wr_rd>
    6e36:	22 96       	adiw	r28, 0x02	; 2
		
	} while (cnt -= 2);
    6e38:	c0 17       	cp	r28, r16
    6e3a:	d1 07       	cpc	r29, r17
    6e3c:	b1 f7       	brne	.-20     	; 0x6e2a <xmit_datablock.part.1+0xe>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    6e3e:	8f ef       	ldi	r24, 0xFF	; 255
    6e40:	19 df       	rcall	.-462    	; 0x6c74 <xchg_spi>
		xchg_spi(0xFF);
    6e42:	8f ef       	ldi	r24, 0xFF	; 255
    6e44:	17 df       	rcall	.-466    	; 0x6c74 <xchg_spi>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6e46:	8f ef       	ldi	r24, 0xFF	; 255
    6e48:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <spi_wr_rd>
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
		xchg_spi(0xFF);
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    6e4c:	28 2f       	mov	r18, r24
    6e4e:	2f 71       	andi	r18, 0x1F	; 31
    6e50:	81 e0       	ldi	r24, 0x01	; 1
    6e52:	90 e0       	ldi	r25, 0x00	; 0
    6e54:	25 30       	cpi	r18, 0x05	; 5
    6e56:	11 f0       	breq	.+4      	; 0x6e5c <xmit_datablock.part.1+0x40>
    6e58:	80 e0       	ldi	r24, 0x00	; 0
    6e5a:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}

	return 1;
}
    6e5c:	df 91       	pop	r29
    6e5e:	cf 91       	pop	r28
    6e60:	1f 91       	pop	r17
    6e62:	0f 91       	pop	r16
    6e64:	08 95       	ret

00006e66 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    6e66:	ef 92       	push	r14
    6e68:	ff 92       	push	r15
    6e6a:	0f 93       	push	r16
    6e6c:	1f 93       	push	r17
    6e6e:	cf 93       	push	r28
    6e70:	df 93       	push	r29
    6e72:	00 d0       	rcall	.+0      	; 0x6e74 <disk_initialize+0xe>
    6e74:	00 d0       	rcall	.+0      	; 0x6e76 <disk_initialize+0x10>
    6e76:	cd b7       	in	r28, 0x3d	; 61
    6e78:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    6e7a:	81 11       	cpse	r24, r1
    6e7c:	cf c0       	rjmp	.+414    	; 0x701c <disk_initialize+0x1b6>
	power_off();						/* Turn off the socket power to reset the card */
    6e7e:	02 df       	rcall	.-508    	; 0x6c84 <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    6e80:	80 91 24 20 	lds	r24, 0x2024
    6e84:	81 fd       	sbrc	r24, 1
    6e86:	c7 c0       	rjmp	.+398    	; 0x7016 <disk_initialize+0x1b0>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
	PR.PRPC &= ~0x01;
    6e88:	80 91 73 00 	lds	r24, 0x0073
    6e8c:	8e 7f       	andi	r24, 0xFE	; 254
    6e8e:	80 93 73 00 	sts	0x0073, r24
	
	TCC0.CNT = 0;
    6e92:	10 92 20 08 	sts	0x0820, r1
    6e96:	10 92 21 08 	sts	0x0821, r1
	TCC0.PER = 1250;
    6e9a:	82 ee       	ldi	r24, 0xE2	; 226
    6e9c:	94 e0       	ldi	r25, 0x04	; 4
    6e9e:	80 93 26 08 	sts	0x0826, r24
    6ea2:	90 93 27 08 	sts	0x0827, r25
	TCC0.CTRLA = TC_CLKSEL_DIV256_gc;
    6ea6:	26 e0       	ldi	r18, 0x06	; 6
    6ea8:	20 93 00 08 	sts	0x0800, r18
	
	TCC0.CCB = 1250;
    6eac:	80 93 2a 08 	sts	0x082A, r24
    6eb0:	90 93 2b 08 	sts	0x082B, r25
	TCC0.INTCTRLB |= TC_CCBINTLVL_LO_gc;
    6eb4:	80 91 07 08 	lds	r24, 0x0807
    6eb8:	84 60       	ori	r24, 0x04	; 4
    6eba:	80 93 07 08 	sts	0x0807, r24
	TCC0.CTRLB |= TC0_CCBEN_bm;
    6ebe:	80 91 01 08 	lds	r24, 0x0801
    6ec2:	80 62       	ori	r24, 0x20	; 32
    6ec4:	80 93 01 08 	sts	0x0801, r24
	
	PORTB.DIRSET = PIN1_bm;
    6ec8:	82 e0       	ldi	r24, 0x02	; 2
    6eca:	80 93 21 06 	sts	0x0621, r24
	PORTB.OUTCLR = PIN1_bm;
    6ece:	80 93 26 06 	sts	0x0626, r24
    6ed2:	2f ef       	ldi	r18, 0xFF	; 255
    6ed4:	83 ef       	ldi	r24, 0xF3	; 243
    6ed6:	91 e0       	ldi	r25, 0x01	; 1
    6ed8:	21 50       	subi	r18, 0x01	; 1
    6eda:	80 40       	sbci	r24, 0x00	; 0
    6edc:	90 40       	sbci	r25, 0x00	; 0
    6ede:	e1 f7       	brne	.-8      	; 0x6ed8 <disk_initialize+0x72>
    6ee0:	00 c0       	rjmp	.+0      	; 0x6ee2 <disk_initialize+0x7c>
    6ee2:	00 00       	nop
	_delay_ms(20);
	
	spi_setup();
    6ee4:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <spi_setup>

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    6ee8:	82 ed       	ldi	r24, 0xD2	; 210
    6eea:	80 93 c0 08 	sts	0x08C0, r24
    6eee:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    6ef0:	8f ef       	ldi	r24, 0xFF	; 255
    6ef2:	c0 de       	rcall	.-640    	; 0x6c74 <xchg_spi>
    6ef4:	11 50       	subi	r17, 0x01	; 1
    6ef6:	e1 f7       	brne	.-8      	; 0x6ef0 <disk_initialize+0x8a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    6ef8:	40 e0       	ldi	r20, 0x00	; 0
    6efa:	50 e0       	ldi	r21, 0x00	; 0
    6efc:	ba 01       	movw	r22, r20
    6efe:	80 e0       	ldi	r24, 0x00	; 0
    6f00:	49 df       	rcall	.-366    	; 0x6d94 <send_cmd>
    6f02:	81 30       	cpi	r24, 0x01	; 1
    6f04:	09 f0       	breq	.+2      	; 0x6f08 <disk_initialize+0xa2>
    6f06:	77 c0       	rjmp	.+238    	; 0x6ff6 <disk_initialize+0x190>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    6f08:	84 e6       	ldi	r24, 0x64	; 100
    6f0a:	80 93 bd 2a 	sts	0x2ABD, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    6f0e:	4a ea       	ldi	r20, 0xAA	; 170
    6f10:	51 e0       	ldi	r21, 0x01	; 1
    6f12:	60 e0       	ldi	r22, 0x00	; 0
    6f14:	70 e0       	ldi	r23, 0x00	; 0
    6f16:	88 e0       	ldi	r24, 0x08	; 8
    6f18:	3d df       	rcall	.-390    	; 0x6d94 <send_cmd>
    6f1a:	81 30       	cpi	r24, 0x01	; 1
    6f1c:	09 f0       	breq	.+2      	; 0x6f20 <disk_initialize+0xba>
    6f1e:	43 c0       	rjmp	.+134    	; 0x6fa6 <disk_initialize+0x140>
    6f20:	7e 01       	movw	r14, r28
    6f22:	e5 e0       	ldi	r30, 0x05	; 5
    6f24:	ee 0e       	add	r14, r30
    6f26:	f1 1c       	adc	r15, r1
    6f28:	8e 01       	movw	r16, r28
    6f2a:	0f 5f       	subi	r16, 0xFF	; 255
    6f2c:	1f 4f       	sbci	r17, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6f2e:	8f ef       	ldi	r24, 0xFF	; 255
    6f30:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <spi_wr_rd>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    6f34:	f8 01       	movw	r30, r16
    6f36:	81 93       	st	Z+, r24
    6f38:	8f 01       	movw	r16, r30
    6f3a:	ee 15       	cp	r30, r14
    6f3c:	ff 05       	cpc	r31, r15
    6f3e:	b9 f7       	brne	.-18     	; 0x6f2e <disk_initialize+0xc8>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    6f40:	8b 81       	ldd	r24, Y+3	; 0x03
    6f42:	81 30       	cpi	r24, 0x01	; 1
    6f44:	09 f0       	breq	.+2      	; 0x6f48 <disk_initialize+0xe2>
    6f46:	57 c0       	rjmp	.+174    	; 0x6ff6 <disk_initialize+0x190>
    6f48:	8c 81       	ldd	r24, Y+4	; 0x04
    6f4a:	8a 3a       	cpi	r24, 0xAA	; 170
    6f4c:	09 f0       	breq	.+2      	; 0x6f50 <disk_initialize+0xea>
    6f4e:	53 c0       	rjmp	.+166    	; 0x6ff6 <disk_initialize+0x190>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    6f50:	80 91 bd 2a 	lds	r24, 0x2ABD
    6f54:	81 11       	cpse	r24, r1
    6f56:	06 c0       	rjmp	.+12     	; 0x6f64 <disk_initialize+0xfe>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    6f58:	80 91 bd 2a 	lds	r24, 0x2ABD
    6f5c:	88 23       	and	r24, r24
    6f5e:	09 f4       	brne	.+2      	; 0x6f62 <disk_initialize+0xfc>
    6f60:	4a c0       	rjmp	.+148    	; 0x6ff6 <disk_initialize+0x190>
    6f62:	09 c0       	rjmp	.+18     	; 0x6f76 <disk_initialize+0x110>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    6f64:	40 e0       	ldi	r20, 0x00	; 0
    6f66:	50 e0       	ldi	r21, 0x00	; 0
    6f68:	60 e0       	ldi	r22, 0x00	; 0
    6f6a:	70 e4       	ldi	r23, 0x40	; 64
    6f6c:	89 ea       	ldi	r24, 0xA9	; 169
    6f6e:	12 df       	rcall	.-476    	; 0x6d94 <send_cmd>
    6f70:	81 11       	cpse	r24, r1
    6f72:	ee cf       	rjmp	.-36     	; 0x6f50 <disk_initialize+0xea>
    6f74:	f1 cf       	rjmp	.-30     	; 0x6f58 <disk_initialize+0xf2>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    6f76:	40 e0       	ldi	r20, 0x00	; 0
    6f78:	50 e0       	ldi	r21, 0x00	; 0
    6f7a:	ba 01       	movw	r22, r20
    6f7c:	8a e3       	ldi	r24, 0x3A	; 58
    6f7e:	0a df       	rcall	.-492    	; 0x6d94 <send_cmd>
    6f80:	81 11       	cpse	r24, r1
    6f82:	39 c0       	rjmp	.+114    	; 0x6ff6 <disk_initialize+0x190>
    6f84:	8e 01       	movw	r16, r28
    6f86:	0f 5f       	subi	r16, 0xFF	; 255
    6f88:	1f 4f       	sbci	r17, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6f8a:	8f ef       	ldi	r24, 0xFF	; 255
    6f8c:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <spi_wr_rd>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    6f90:	f8 01       	movw	r30, r16
    6f92:	81 93       	st	Z+, r24
    6f94:	8f 01       	movw	r16, r30
    6f96:	ee 15       	cp	r30, r14
    6f98:	ff 05       	cpc	r31, r15
    6f9a:	b9 f7       	brne	.-18     	; 0x6f8a <disk_initialize+0x124>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    6f9c:	89 81       	ldd	r24, Y+1	; 0x01
    6f9e:	86 ff       	sbrs	r24, 6
    6fa0:	28 c0       	rjmp	.+80     	; 0x6ff2 <disk_initialize+0x18c>
    6fa2:	1c e0       	ldi	r17, 0x0C	; 12
    6fa4:	29 c0       	rjmp	.+82     	; 0x6ff8 <disk_initialize+0x192>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    6fa6:	40 e0       	ldi	r20, 0x00	; 0
    6fa8:	50 e0       	ldi	r21, 0x00	; 0
    6faa:	ba 01       	movw	r22, r20
    6fac:	89 ea       	ldi	r24, 0xA9	; 169
    6fae:	f2 de       	rcall	.-540    	; 0x6d94 <send_cmd>
    6fb0:	82 30       	cpi	r24, 0x02	; 2
    6fb2:	18 f4       	brcc	.+6      	; 0x6fba <disk_initialize+0x154>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    6fb4:	12 e0       	ldi	r17, 0x02	; 2
    6fb6:	09 ea       	ldi	r16, 0xA9	; 169
    6fb8:	02 c0       	rjmp	.+4      	; 0x6fbe <disk_initialize+0x158>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    6fba:	11 e0       	ldi	r17, 0x01	; 1
    6fbc:	01 e0       	ldi	r16, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    6fbe:	80 91 bd 2a 	lds	r24, 0x2ABD
    6fc2:	81 11       	cpse	r24, r1
    6fc4:	05 c0       	rjmp	.+10     	; 0x6fd0 <disk_initialize+0x16a>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    6fc6:	80 91 bd 2a 	lds	r24, 0x2ABD
    6fca:	88 23       	and	r24, r24
    6fcc:	a1 f0       	breq	.+40     	; 0x6ff6 <disk_initialize+0x190>
    6fce:	08 c0       	rjmp	.+16     	; 0x6fe0 <disk_initialize+0x17a>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    6fd0:	40 e0       	ldi	r20, 0x00	; 0
    6fd2:	50 e0       	ldi	r21, 0x00	; 0
    6fd4:	ba 01       	movw	r22, r20
    6fd6:	80 2f       	mov	r24, r16
    6fd8:	dd de       	rcall	.-582    	; 0x6d94 <send_cmd>
    6fda:	81 11       	cpse	r24, r1
    6fdc:	f0 cf       	rjmp	.-32     	; 0x6fbe <disk_initialize+0x158>
    6fde:	f3 cf       	rjmp	.-26     	; 0x6fc6 <disk_initialize+0x160>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    6fe0:	40 e0       	ldi	r20, 0x00	; 0
    6fe2:	52 e0       	ldi	r21, 0x02	; 2
    6fe4:	60 e0       	ldi	r22, 0x00	; 0
    6fe6:	70 e0       	ldi	r23, 0x00	; 0
    6fe8:	80 e1       	ldi	r24, 0x10	; 16
    6fea:	d4 de       	rcall	.-600    	; 0x6d94 <send_cmd>
    6fec:	81 11       	cpse	r24, r1
    6fee:	03 c0       	rjmp	.+6      	; 0x6ff6 <disk_initialize+0x190>
    6ff0:	03 c0       	rjmp	.+6      	; 0x6ff8 <disk_initialize+0x192>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    6ff2:	14 e0       	ldi	r17, 0x04	; 4
    6ff4:	01 c0       	rjmp	.+2      	; 0x6ff8 <disk_initialize+0x192>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    6ff6:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	CardType = ty;
    6ff8:	10 93 bb 2a 	sts	0x2ABB, r17
	deselect();
    6ffc:	3d de       	rcall	.-902    	; 0x6c78 <deselect>

	if (ty) {			/* Initialization succeded */
    6ffe:	11 23       	and	r17, r17
    7000:	49 f0       	breq	.+18     	; 0x7014 <disk_initialize+0x1ae>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    7002:	80 91 24 20 	lds	r24, 0x2024
    7006:	8e 7f       	andi	r24, 0xFE	; 254
    7008:	80 93 24 20 	sts	0x2024, r24
		FCLK_FAST();
    700c:	80 ed       	ldi	r24, 0xD0	; 208
    700e:	80 93 c0 08 	sts	0x08C0, r24
    7012:	01 c0       	rjmp	.+2      	; 0x7016 <disk_initialize+0x1b0>
	} else {			/* Initialization failed */
		power_off();
    7014:	37 de       	rcall	.-914    	; 0x6c84 <power_off>
	}

	return Stat;
    7016:	80 91 24 20 	lds	r24, 0x2024
    701a:	01 c0       	rjmp	.+2      	; 0x701e <disk_initialize+0x1b8>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    701c:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    701e:	24 96       	adiw	r28, 0x04	; 4
    7020:	cd bf       	out	0x3d, r28	; 61
    7022:	de bf       	out	0x3e, r29	; 62
    7024:	df 91       	pop	r29
    7026:	cf 91       	pop	r28
    7028:	1f 91       	pop	r17
    702a:	0f 91       	pop	r16
    702c:	ff 90       	pop	r15
    702e:	ef 90       	pop	r14
    7030:	08 95       	ret

00007032 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    7032:	81 11       	cpse	r24, r1
    7034:	03 c0       	rjmp	.+6      	; 0x703c <disk_status+0xa>
	return Stat;
    7036:	80 91 24 20 	lds	r24, 0x2024
    703a:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    703c:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    703e:	08 95       	ret

00007040 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    7040:	ff 92       	push	r15
    7042:	0f 93       	push	r16
    7044:	1f 93       	push	r17
    7046:	cf 93       	push	r28
    7048:	df 93       	push	r29
    704a:	eb 01       	movw	r28, r22
    704c:	ba 01       	movw	r22, r20
    704e:	a9 01       	movw	r20, r18
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    7050:	81 11       	cpse	r24, r1
    7052:	38 c0       	rjmp	.+112    	; 0x70c4 <disk_read+0x84>
    7054:	01 15       	cp	r16, r1
    7056:	11 05       	cpc	r17, r1
    7058:	a9 f1       	breq	.+106    	; 0x70c4 <disk_read+0x84>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    705a:	80 91 24 20 	lds	r24, 0x2024
    705e:	80 fd       	sbrc	r24, 0
    7060:	33 c0       	rjmp	.+102    	; 0x70c8 <disk_read+0x88>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    7062:	80 91 bb 2a 	lds	r24, 0x2ABB
    7066:	83 fd       	sbrc	r24, 3
    7068:	07 c0       	rjmp	.+14     	; 0x7078 <disk_read+0x38>
    706a:	29 e0       	ldi	r18, 0x09	; 9
    706c:	44 0f       	add	r20, r20
    706e:	55 1f       	adc	r21, r21
    7070:	66 1f       	adc	r22, r22
    7072:	77 1f       	adc	r23, r23
    7074:	2a 95       	dec	r18
    7076:	d1 f7       	brne	.-12     	; 0x706c <disk_read+0x2c>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    7078:	02 30       	cpi	r16, 0x02	; 2
    707a:	11 05       	cpc	r17, r1
    707c:	18 f0       	brcs	.+6      	; 0x7084 <disk_read+0x44>
    707e:	92 e1       	ldi	r25, 0x12	; 18
    7080:	f9 2e       	mov	r15, r25
    7082:	02 c0       	rjmp	.+4      	; 0x7088 <disk_read+0x48>
    7084:	81 e1       	ldi	r24, 0x11	; 17
    7086:	f8 2e       	mov	r15, r24
	if (send_cmd(cmd, sector) == 0) {
    7088:	8f 2d       	mov	r24, r15
    708a:	84 de       	rcall	.-760    	; 0x6d94 <send_cmd>
    708c:	81 11       	cpse	r24, r1
    708e:	14 c0       	rjmp	.+40     	; 0x70b8 <disk_read+0x78>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    7090:	60 e0       	ldi	r22, 0x00	; 0
    7092:	72 e0       	ldi	r23, 0x02	; 2
    7094:	ce 01       	movw	r24, r28
    7096:	0d de       	rcall	.-998    	; 0x6cb2 <rcvr_datablock>
    7098:	89 2b       	or	r24, r25
    709a:	31 f0       	breq	.+12     	; 0x70a8 <disk_read+0x68>
			buff += 512;
    709c:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    709e:	01 50       	subi	r16, 0x01	; 1
    70a0:	11 09       	sbc	r17, r1
    70a2:	01 15       	cp	r16, r1
    70a4:	11 05       	cpc	r17, r1
    70a6:	a1 f7       	brne	.-24     	; 0x7090 <disk_read+0x50>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    70a8:	82 e1       	ldi	r24, 0x12	; 18
    70aa:	f8 12       	cpse	r15, r24
    70ac:	05 c0       	rjmp	.+10     	; 0x70b8 <disk_read+0x78>
    70ae:	40 e0       	ldi	r20, 0x00	; 0
    70b0:	50 e0       	ldi	r21, 0x00	; 0
    70b2:	ba 01       	movw	r22, r20
    70b4:	8c e0       	ldi	r24, 0x0C	; 12
    70b6:	6e de       	rcall	.-804    	; 0x6d94 <send_cmd>
	}
	deselect();
    70b8:	df dd       	rcall	.-1090   	; 0x6c78 <deselect>

	return count ? RES_ERROR : RES_OK;
    70ba:	81 e0       	ldi	r24, 0x01	; 1
    70bc:	01 2b       	or	r16, r17
    70be:	29 f4       	brne	.+10     	; 0x70ca <disk_read+0x8a>
    70c0:	80 e0       	ldi	r24, 0x00	; 0
    70c2:	03 c0       	rjmp	.+6      	; 0x70ca <disk_read+0x8a>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    70c4:	84 e0       	ldi	r24, 0x04	; 4
    70c6:	01 c0       	rjmp	.+2      	; 0x70ca <disk_read+0x8a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    70c8:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    70ca:	df 91       	pop	r29
    70cc:	cf 91       	pop	r28
    70ce:	1f 91       	pop	r17
    70d0:	0f 91       	pop	r16
    70d2:	ff 90       	pop	r15
    70d4:	08 95       	ret

000070d6 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    70d6:	cf 92       	push	r12
    70d8:	df 92       	push	r13
    70da:	ef 92       	push	r14
    70dc:	ff 92       	push	r15
    70de:	0f 93       	push	r16
    70e0:	1f 93       	push	r17
    70e2:	cf 93       	push	r28
    70e4:	df 93       	push	r29
    70e6:	eb 01       	movw	r28, r22
    70e8:	69 01       	movw	r12, r18
    70ea:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    70ec:	81 11       	cpse	r24, r1
    70ee:	59 c0       	rjmp	.+178    	; 0x71a2 <disk_write+0xcc>
    70f0:	01 15       	cp	r16, r1
    70f2:	11 05       	cpc	r17, r1
    70f4:	09 f4       	brne	.+2      	; 0x70f8 <disk_write+0x22>
    70f6:	55 c0       	rjmp	.+170    	; 0x71a2 <disk_write+0xcc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    70f8:	80 91 24 20 	lds	r24, 0x2024
    70fc:	80 fd       	sbrc	r24, 0
    70fe:	53 c0       	rjmp	.+166    	; 0x71a6 <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    7100:	80 91 24 20 	lds	r24, 0x2024
    7104:	82 fd       	sbrc	r24, 2
    7106:	51 c0       	rjmp	.+162    	; 0x71aa <disk_write+0xd4>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    7108:	80 91 bb 2a 	lds	r24, 0x2ABB
    710c:	83 fd       	sbrc	r24, 3
    710e:	07 c0       	rjmp	.+14     	; 0x711e <disk_write+0x48>
    7110:	39 e0       	ldi	r19, 0x09	; 9
    7112:	cc 0c       	add	r12, r12
    7114:	dd 1c       	adc	r13, r13
    7116:	ee 1c       	adc	r14, r14
    7118:	ff 1c       	adc	r15, r15
    711a:	3a 95       	dec	r19
    711c:	d1 f7       	brne	.-12     	; 0x7112 <disk_write+0x3c>

	if (count == 1) {	/* Single block write */
    711e:	01 30       	cpi	r16, 0x01	; 1
    7120:	11 05       	cpc	r17, r1
    7122:	c1 f4       	brne	.+48     	; 0x7154 <disk_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    7124:	b7 01       	movw	r22, r14
    7126:	a6 01       	movw	r20, r12
    7128:	88 e1       	ldi	r24, 0x18	; 24
    712a:	34 de       	rcall	.-920    	; 0x6d94 <send_cmd>
    712c:	88 23       	and	r24, r24
    712e:	19 f0       	breq	.+6      	; 0x7136 <disk_write+0x60>
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    7130:	01 e0       	ldi	r16, 0x01	; 1
    7132:	10 e0       	ldi	r17, 0x00	; 0
    7134:	30 c0       	rjmp	.+96     	; 0x7196 <disk_write+0xc0>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    7136:	00 de       	rcall	.-1024   	; 0x6d38 <wait_ready.constprop.2>
    7138:	89 2b       	or	r24, r25
    713a:	d1 f3       	breq	.-12     	; 0x7130 <disk_write+0x5a>

	xchg_spi(token);					/* Xmit data token */
    713c:	8e ef       	ldi	r24, 0xFE	; 254
    713e:	9a dd       	rcall	.-1228   	; 0x6c74 <xchg_spi>
    7140:	ce 01       	movw	r24, r28
    7142:	6c de       	rcall	.-808    	; 0x6e1c <xmit_datablock.part.1>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
    7144:	31 e0       	ldi	r19, 0x01	; 1
    7146:	20 e0       	ldi	r18, 0x00	; 0
    7148:	89 2b       	or	r24, r25
    714a:	09 f0       	breq	.+2      	; 0x714e <disk_write+0x78>
    714c:	30 e0       	ldi	r19, 0x00	; 0
    714e:	03 2f       	mov	r16, r19
    7150:	12 2f       	mov	r17, r18
    7152:	21 c0       	rjmp	.+66     	; 0x7196 <disk_write+0xc0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    7154:	86 70       	andi	r24, 0x06	; 6
    7156:	29 f0       	breq	.+10     	; 0x7162 <disk_write+0x8c>
    7158:	a8 01       	movw	r20, r16
    715a:	60 e0       	ldi	r22, 0x00	; 0
    715c:	70 e0       	ldi	r23, 0x00	; 0
    715e:	87 e9       	ldi	r24, 0x97	; 151
    7160:	19 de       	rcall	.-974    	; 0x6d94 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    7162:	b7 01       	movw	r22, r14
    7164:	a6 01       	movw	r20, r12
    7166:	89 e1       	ldi	r24, 0x19	; 25
    7168:	15 de       	rcall	.-982    	; 0x6d94 <send_cmd>
    716a:	81 11       	cpse	r24, r1
    716c:	14 c0       	rjmp	.+40     	; 0x7196 <disk_write+0xc0>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    716e:	e4 dd       	rcall	.-1080   	; 0x6d38 <wait_ready.constprop.2>
    7170:	89 2b       	or	r24, r25
    7172:	61 f0       	breq	.+24     	; 0x718c <disk_write+0xb6>

	xchg_spi(token);					/* Xmit data token */
    7174:	8c ef       	ldi	r24, 0xFC	; 252
    7176:	7e dd       	rcall	.-1284   	; 0x6c74 <xchg_spi>
    7178:	ce 01       	movw	r24, r28
    717a:	50 de       	rcall	.-864    	; 0x6e1c <xmit_datablock.part.1>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    717c:	89 2b       	or	r24, r25
    717e:	31 f0       	breq	.+12     	; 0x718c <disk_write+0xb6>
				buff += 512;
    7180:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    7182:	01 50       	subi	r16, 0x01	; 1
    7184:	11 09       	sbc	r17, r1
    7186:	01 15       	cp	r16, r1
    7188:	11 05       	cpc	r17, r1
    718a:	89 f7       	brne	.-30     	; 0x716e <disk_write+0x98>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    718c:	d5 dd       	rcall	.-1110   	; 0x6d38 <wait_ready.constprop.2>
    718e:	89 2b       	or	r24, r25
    7190:	79 f2       	breq	.-98     	; 0x7130 <disk_write+0x5a>

	xchg_spi(token);					/* Xmit data token */
    7192:	8d ef       	ldi	r24, 0xFD	; 253
    7194:	6f dd       	rcall	.-1314   	; 0x6c74 <xchg_spi>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
		}
	}
	deselect();
    7196:	70 dd       	rcall	.-1312   	; 0x6c78 <deselect>

	return count ? RES_ERROR : RES_OK;
    7198:	81 e0       	ldi	r24, 0x01	; 1
    719a:	01 2b       	or	r16, r17
    719c:	39 f4       	brne	.+14     	; 0x71ac <disk_write+0xd6>
    719e:	80 e0       	ldi	r24, 0x00	; 0
    71a0:	05 c0       	rjmp	.+10     	; 0x71ac <disk_write+0xd6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    71a2:	84 e0       	ldi	r24, 0x04	; 4
    71a4:	03 c0       	rjmp	.+6      	; 0x71ac <disk_write+0xd6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    71a6:	83 e0       	ldi	r24, 0x03	; 3
    71a8:	01 c0       	rjmp	.+2      	; 0x71ac <disk_write+0xd6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    71aa:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    71ac:	df 91       	pop	r29
    71ae:	cf 91       	pop	r28
    71b0:	1f 91       	pop	r17
    71b2:	0f 91       	pop	r16
    71b4:	ff 90       	pop	r15
    71b6:	ef 90       	pop	r14
    71b8:	df 90       	pop	r13
    71ba:	cf 90       	pop	r12
    71bc:	08 95       	ret

000071be <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    71be:	ef 92       	push	r14
    71c0:	ff 92       	push	r15
    71c2:	0f 93       	push	r16
    71c4:	1f 93       	push	r17
    71c6:	cf 93       	push	r28
    71c8:	df 93       	push	r29
    71ca:	cd b7       	in	r28, 0x3d	; 61
    71cc:	de b7       	in	r29, 0x3e	; 62
    71ce:	60 97       	sbiw	r28, 0x10	; 16
    71d0:	cd bf       	out	0x3d, r28	; 61
    71d2:	de bf       	out	0x3e, r29	; 62
    71d4:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    71d6:	81 11       	cpse	r24, r1
    71d8:	46 c1       	rjmp	.+652    	; 0x7466 <disk_ioctl+0x2a8>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    71da:	80 91 24 20 	lds	r24, 0x2024
    71de:	80 fd       	sbrc	r24, 0
    71e0:	44 c1       	rjmp	.+648    	; 0x746a <disk_ioctl+0x2ac>

	switch (cmd) {
    71e2:	62 33       	cpi	r22, 0x32	; 50
    71e4:	09 f4       	brne	.+2      	; 0x71e8 <disk_ioctl+0x2a>
    71e6:	00 c1       	rjmp	.+512    	; 0x73e8 <disk_ioctl+0x22a>
    71e8:	80 f4       	brcc	.+32     	; 0x720a <disk_ioctl+0x4c>
    71ea:	61 30       	cpi	r22, 0x01	; 1
    71ec:	e1 f0       	breq	.+56     	; 0x7226 <disk_ioctl+0x68>
    71ee:	c8 f0       	brcs	.+50     	; 0x7222 <disk_ioctl+0x64>
    71f0:	63 30       	cpi	r22, 0x03	; 3
    71f2:	09 f4       	brne	.+2      	; 0x71f6 <disk_ioctl+0x38>
    71f4:	7e c0       	rjmp	.+252    	; 0x72f2 <disk_ioctl+0x134>
    71f6:	67 30       	cpi	r22, 0x07	; 7
    71f8:	09 f0       	breq	.+2      	; 0x71fc <disk_ioctl+0x3e>
    71fa:	2f c1       	rjmp	.+606    	; 0x745a <disk_ioctl+0x29c>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    71fc:	43 dd       	rcall	.-1402   	; 0x6c84 <power_off>
		Stat |= STA_NOINIT;
    71fe:	80 91 24 20 	lds	r24, 0x2024
    7202:	81 60       	ori	r24, 0x01	; 1
    7204:	80 93 24 20 	sts	0x2024, r24
    7208:	2a c1       	rjmp	.+596    	; 0x745e <disk_ioctl+0x2a0>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
    720a:	64 33       	cpi	r22, 0x34	; 52
    720c:	09 f4       	brne	.+2      	; 0x7210 <disk_ioctl+0x52>
    720e:	f6 c0       	rjmp	.+492    	; 0x73fc <disk_ioctl+0x23e>
    7210:	08 f4       	brcc	.+2      	; 0x7214 <disk_ioctl+0x56>
    7212:	ef c0       	rjmp	.+478    	; 0x73f2 <disk_ioctl+0x234>
    7214:	65 33       	cpi	r22, 0x35	; 53
    7216:	09 f4       	brne	.+2      	; 0x721a <disk_ioctl+0x5c>
    7218:	00 c1       	rjmp	.+512    	; 0x741a <disk_ioctl+0x25c>
    721a:	66 33       	cpi	r22, 0x36	; 54
    721c:	09 f4       	brne	.+2      	; 0x7220 <disk_ioctl+0x62>
    721e:	11 c1       	rjmp	.+546    	; 0x7442 <disk_ioctl+0x284>
    7220:	1c c1       	rjmp	.+568    	; 0x745a <disk_ioctl+0x29c>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    7222:	9e dd       	rcall	.-1220   	; 0x6d60 <select>
    7224:	f6 c0       	rjmp	.+492    	; 0x7412 <disk_ioctl+0x254>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    7226:	40 e0       	ldi	r20, 0x00	; 0
    7228:	50 e0       	ldi	r21, 0x00	; 0
    722a:	ba 01       	movw	r22, r20
    722c:	89 e0       	ldi	r24, 0x09	; 9
    722e:	b2 dd       	rcall	.-1180   	; 0x6d94 <send_cmd>
    7230:	88 23       	and	r24, r24
    7232:	11 f0       	breq	.+4      	; 0x7238 <disk_ioctl+0x7a>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    7234:	11 e0       	ldi	r17, 0x01	; 1
    7236:	14 c1       	rjmp	.+552    	; 0x7460 <disk_ioctl+0x2a2>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    7238:	60 e1       	ldi	r22, 0x10	; 16
    723a:	70 e0       	ldi	r23, 0x00	; 0
    723c:	ce 01       	movw	r24, r28
    723e:	01 96       	adiw	r24, 0x01	; 1
    7240:	38 dd       	rcall	.-1424   	; 0x6cb2 <rcvr_datablock>
    7242:	89 2b       	or	r24, r25
    7244:	b9 f3       	breq	.-18     	; 0x7234 <disk_ioctl+0x76>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    7246:	99 81       	ldd	r25, Y+1	; 0x01
    7248:	92 95       	swap	r25
    724a:	96 95       	lsr	r25
    724c:	96 95       	lsr	r25
    724e:	93 70       	andi	r25, 0x03	; 3
    7250:	08 85       	ldd	r16, Y+8	; 0x08
    7252:	49 85       	ldd	r20, Y+9	; 0x09
    7254:	5a 85       	ldd	r21, Y+10	; 0x0a
    7256:	91 30       	cpi	r25, 0x01	; 1
    7258:	11 f5       	brne	.+68     	; 0x729e <disk_ioctl+0xe0>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    725a:	0f 73       	andi	r16, 0x3F	; 63
    725c:	10 e0       	ldi	r17, 0x00	; 0
    725e:	20 e0       	ldi	r18, 0x00	; 0
    7260:	30 e0       	ldi	r19, 0x00	; 0
    7262:	98 01       	movw	r18, r16
    7264:	11 27       	eor	r17, r17
    7266:	00 27       	eor	r16, r16
    7268:	0f 5f       	subi	r16, 0xFF	; 255
    726a:	1f 4f       	sbci	r17, 0xFF	; 255
    726c:	2f 4f       	sbci	r18, 0xFF	; 255
    726e:	3f 4f       	sbci	r19, 0xFF	; 255
    7270:	84 2f       	mov	r24, r20
    7272:	90 e0       	ldi	r25, 0x00	; 0
    7274:	98 2f       	mov	r25, r24
    7276:	88 27       	eor	r24, r24
    7278:	85 0f       	add	r24, r21
    727a:	91 1d       	adc	r25, r1
    727c:	08 0f       	add	r16, r24
    727e:	19 1f       	adc	r17, r25
    7280:	21 1d       	adc	r18, r1
    7282:	31 1d       	adc	r19, r1
				*(DWORD*)buff = csize << 10;
    7284:	aa e0       	ldi	r26, 0x0A	; 10
    7286:	00 0f       	add	r16, r16
    7288:	11 1f       	adc	r17, r17
    728a:	22 1f       	adc	r18, r18
    728c:	33 1f       	adc	r19, r19
    728e:	aa 95       	dec	r26
    7290:	d1 f7       	brne	.-12     	; 0x7286 <disk_ioctl+0xc8>
    7292:	f7 01       	movw	r30, r14
    7294:	00 83       	st	Z, r16
    7296:	11 83       	std	Z+1, r17	; 0x01
    7298:	22 83       	std	Z+2, r18	; 0x02
    729a:	33 83       	std	Z+3, r19	; 0x03
    729c:	e0 c0       	rjmp	.+448    	; 0x745e <disk_ioctl+0x2a0>
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    729e:	42 95       	swap	r20
    72a0:	46 95       	lsr	r20
    72a2:	46 95       	lsr	r20
    72a4:	43 70       	andi	r20, 0x03	; 3
    72a6:	f4 e0       	ldi	r31, 0x04	; 4
    72a8:	0f 9f       	mul	r16, r31
    72aa:	c0 01       	movw	r24, r0
    72ac:	11 24       	eor	r1, r1
    72ae:	84 0f       	add	r24, r20
    72b0:	91 1d       	adc	r25, r1
    72b2:	01 96       	adiw	r24, 0x01	; 1
    72b4:	2f 81       	ldd	r18, Y+7	; 0x07
    72b6:	23 70       	andi	r18, 0x03	; 3
    72b8:	30 e0       	ldi	r19, 0x00	; 0
    72ba:	32 2f       	mov	r19, r18
    72bc:	22 27       	eor	r18, r18
    72be:	33 0f       	add	r19, r19
    72c0:	33 0f       	add	r19, r19
    72c2:	82 0f       	add	r24, r18
    72c4:	93 1f       	adc	r25, r19
    72c6:	a0 e0       	ldi	r26, 0x00	; 0
    72c8:	b0 e0       	ldi	r27, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    72ca:	2e 81       	ldd	r18, Y+6	; 0x06
    72cc:	2f 70       	andi	r18, 0x0F	; 15
    72ce:	4b 85       	ldd	r20, Y+11	; 0x0b
    72d0:	44 1f       	adc	r20, r20
    72d2:	44 27       	eor	r20, r20
    72d4:	44 1f       	adc	r20, r20
    72d6:	24 0f       	add	r18, r20
    72d8:	35 2f       	mov	r19, r21
    72da:	33 70       	andi	r19, 0x03	; 3
    72dc:	33 0f       	add	r19, r19
    72de:	23 0f       	add	r18, r19
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    72e0:	27 50       	subi	r18, 0x07	; 7
    72e2:	04 c0       	rjmp	.+8      	; 0x72ec <disk_ioctl+0x12e>
    72e4:	88 0f       	add	r24, r24
    72e6:	99 1f       	adc	r25, r25
    72e8:	aa 1f       	adc	r26, r26
    72ea:	bb 1f       	adc	r27, r27
    72ec:	2a 95       	dec	r18
    72ee:	d2 f7       	brpl	.-12     	; 0x72e4 <disk_ioctl+0x126>
    72f0:	75 c0       	rjmp	.+234    	; 0x73dc <disk_ioctl+0x21e>
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    72f2:	80 91 bb 2a 	lds	r24, 0x2ABB
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    72f6:	40 e0       	ldi	r20, 0x00	; 0
    72f8:	50 e0       	ldi	r21, 0x00	; 0
    72fa:	ba 01       	movw	r22, r20
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    72fc:	82 ff       	sbrs	r24, 2
    72fe:	27 c0       	rjmp	.+78     	; 0x734e <disk_ioctl+0x190>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    7300:	8d e8       	ldi	r24, 0x8D	; 141
    7302:	48 dd       	rcall	.-1392   	; 0x6d94 <send_cmd>
    7304:	81 11       	cpse	r24, r1
    7306:	96 cf       	rjmp	.-212    	; 0x7234 <disk_ioctl+0x76>
				xchg_spi(0xFF);
    7308:	8f ef       	ldi	r24, 0xFF	; 255
    730a:	b4 dc       	rcall	.-1688   	; 0x6c74 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    730c:	60 e1       	ldi	r22, 0x10	; 16
    730e:	70 e0       	ldi	r23, 0x00	; 0
    7310:	ce 01       	movw	r24, r28
    7312:	01 96       	adiw	r24, 0x01	; 1
    7314:	ce dc       	rcall	.-1636   	; 0x6cb2 <rcvr_datablock>
    7316:	89 2b       	or	r24, r25
    7318:	09 f4       	brne	.+2      	; 0x731c <disk_ioctl+0x15e>
    731a:	8c cf       	rjmp	.-232    	; 0x7234 <disk_ioctl+0x76>
    731c:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    731e:	8f ef       	ldi	r24, 0xFF	; 255
    7320:	a9 dc       	rcall	.-1710   	; 0x6c74 <xchg_spi>
    7322:	11 50       	subi	r17, 0x01	; 1
    7324:	e1 f7       	brne	.-8      	; 0x731e <disk_ioctl+0x160>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    7326:	2b 85       	ldd	r18, Y+11	; 0x0b
    7328:	22 95       	swap	r18
    732a:	2f 70       	andi	r18, 0x0F	; 15
    732c:	80 e1       	ldi	r24, 0x10	; 16
    732e:	90 e0       	ldi	r25, 0x00	; 0
    7330:	a0 e0       	ldi	r26, 0x00	; 0
    7332:	b0 e0       	ldi	r27, 0x00	; 0
    7334:	04 c0       	rjmp	.+8      	; 0x733e <disk_ioctl+0x180>
    7336:	88 0f       	add	r24, r24
    7338:	99 1f       	adc	r25, r25
    733a:	aa 1f       	adc	r26, r26
    733c:	bb 1f       	adc	r27, r27
    733e:	2a 95       	dec	r18
    7340:	d2 f7       	brpl	.-12     	; 0x7336 <disk_ioctl+0x178>
    7342:	f7 01       	movw	r30, r14
    7344:	80 83       	st	Z, r24
    7346:	91 83       	std	Z+1, r25	; 0x01
    7348:	a2 83       	std	Z+2, r26	; 0x02
    734a:	b3 83       	std	Z+3, r27	; 0x03
    734c:	89 c0       	rjmp	.+274    	; 0x7460 <disk_ioctl+0x2a2>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    734e:	89 e0       	ldi	r24, 0x09	; 9
    7350:	21 dd       	rcall	.-1470   	; 0x6d94 <send_cmd>
    7352:	81 11       	cpse	r24, r1
    7354:	6f cf       	rjmp	.-290    	; 0x7234 <disk_ioctl+0x76>
    7356:	60 e1       	ldi	r22, 0x10	; 16
    7358:	70 e0       	ldi	r23, 0x00	; 0
    735a:	ce 01       	movw	r24, r28
    735c:	01 96       	adiw	r24, 0x01	; 1
    735e:	a9 dc       	rcall	.-1710   	; 0x6cb2 <rcvr_datablock>
    7360:	89 2b       	or	r24, r25
    7362:	09 f4       	brne	.+2      	; 0x7366 <disk_ioctl+0x1a8>
    7364:	67 cf       	rjmp	.-306    	; 0x7234 <disk_ioctl+0x76>
				if (CardType & CT_SD1) {	/* SDv1 */
    7366:	90 91 bb 2a 	lds	r25, 0x2ABB
    736a:	2b 85       	ldd	r18, Y+11	; 0x0b
    736c:	8c 85       	ldd	r24, Y+12	; 0x0c
    736e:	91 ff       	sbrs	r25, 1
    7370:	16 c0       	rjmp	.+44     	; 0x739e <disk_ioctl+0x1e0>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    7372:	88 1f       	adc	r24, r24
    7374:	88 27       	eor	r24, r24
    7376:	88 1f       	adc	r24, r24
    7378:	90 e0       	ldi	r25, 0x00	; 0
    737a:	01 96       	adiw	r24, 0x01	; 1
    737c:	2f 73       	andi	r18, 0x3F	; 63
    737e:	82 0f       	add	r24, r18
    7380:	91 1d       	adc	r25, r1
    7382:	82 0f       	add	r24, r18
    7384:	91 1d       	adc	r25, r1
    7386:	2e 85       	ldd	r18, Y+14	; 0x0e
    7388:	22 95       	swap	r18
    738a:	26 95       	lsr	r18
    738c:	26 95       	lsr	r18
    738e:	23 70       	andi	r18, 0x03	; 3
    7390:	21 50       	subi	r18, 0x01	; 1
    7392:	02 c0       	rjmp	.+4      	; 0x7398 <disk_ioctl+0x1da>
    7394:	88 0f       	add	r24, r24
    7396:	99 1f       	adc	r25, r25
    7398:	2a 95       	dec	r18
    739a:	e2 f7       	brpl	.-8      	; 0x7394 <disk_ioctl+0x1d6>
    739c:	1d c0       	rjmp	.+58     	; 0x73d8 <disk_ioctl+0x21a>
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    739e:	98 2f       	mov	r25, r24
    73a0:	93 70       	andi	r25, 0x03	; 3
    73a2:	82 95       	swap	r24
    73a4:	86 95       	lsr	r24
    73a6:	87 70       	andi	r24, 0x07	; 7
    73a8:	48 2f       	mov	r20, r24
    73aa:	50 e0       	ldi	r21, 0x00	; 0
    73ac:	f8 e0       	ldi	r31, 0x08	; 8
    73ae:	9f 9f       	mul	r25, r31
    73b0:	40 0d       	add	r20, r0
    73b2:	51 1d       	adc	r21, r1
    73b4:	11 24       	eor	r1, r1
    73b6:	4f 5f       	subi	r20, 0xFF	; 255
    73b8:	5f 4f       	sbci	r21, 0xFF	; 255
    73ba:	2c 77       	andi	r18, 0x7C	; 124
    73bc:	30 e0       	ldi	r19, 0x00	; 0
    73be:	35 95       	asr	r19
    73c0:	27 95       	ror	r18
    73c2:	35 95       	asr	r19
    73c4:	27 95       	ror	r18
    73c6:	2f 5f       	subi	r18, 0xFF	; 255
    73c8:	3f 4f       	sbci	r19, 0xFF	; 255
    73ca:	42 9f       	mul	r20, r18
    73cc:	c0 01       	movw	r24, r0
    73ce:	43 9f       	mul	r20, r19
    73d0:	90 0d       	add	r25, r0
    73d2:	52 9f       	mul	r21, r18
    73d4:	90 0d       	add	r25, r0
    73d6:	11 24       	eor	r1, r1
    73d8:	a0 e0       	ldi	r26, 0x00	; 0
    73da:	b0 e0       	ldi	r27, 0x00	; 0
    73dc:	f7 01       	movw	r30, r14
    73de:	80 83       	st	Z, r24
    73e0:	91 83       	std	Z+1, r25	; 0x01
    73e2:	a2 83       	std	Z+2, r26	; 0x02
    73e4:	b3 83       	std	Z+3, r27	; 0x03
    73e6:	3b c0       	rjmp	.+118    	; 0x745e <disk_ioctl+0x2a0>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    73e8:	80 91 bb 2a 	lds	r24, 0x2ABB
    73ec:	fa 01       	movw	r30, r20
    73ee:	80 83       	st	Z, r24
    73f0:	36 c0       	rjmp	.+108    	; 0x745e <disk_ioctl+0x2a0>
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    73f2:	40 e0       	ldi	r20, 0x00	; 0
    73f4:	50 e0       	ldi	r21, 0x00	; 0
    73f6:	ba 01       	movw	r22, r20
    73f8:	89 e0       	ldi	r24, 0x09	; 9
    73fa:	04 c0       	rjmp	.+8      	; 0x7404 <disk_ioctl+0x246>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    73fc:	40 e0       	ldi	r20, 0x00	; 0
    73fe:	50 e0       	ldi	r21, 0x00	; 0
    7400:	ba 01       	movw	r22, r20
    7402:	8a e0       	ldi	r24, 0x0A	; 10
    7404:	c7 dc       	rcall	.-1650   	; 0x6d94 <send_cmd>
    7406:	81 11       	cpse	r24, r1
    7408:	15 cf       	rjmp	.-470    	; 0x7234 <disk_ioctl+0x76>
			&& rcvr_datablock(ptr, 16))
    740a:	60 e1       	ldi	r22, 0x10	; 16
    740c:	70 e0       	ldi	r23, 0x00	; 0
    740e:	c7 01       	movw	r24, r14
    7410:	50 dc       	rcall	.-1888   	; 0x6cb2 <rcvr_datablock>
    7412:	11 e0       	ldi	r17, 0x01	; 1
    7414:	89 2b       	or	r24, r25
    7416:	21 f1       	breq	.+72     	; 0x7460 <disk_ioctl+0x2a2>
    7418:	22 c0       	rjmp	.+68     	; 0x745e <disk_ioctl+0x2a0>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    741a:	40 e0       	ldi	r20, 0x00	; 0
    741c:	50 e0       	ldi	r21, 0x00	; 0
    741e:	ba 01       	movw	r22, r20
    7420:	8a e3       	ldi	r24, 0x3A	; 58
    7422:	b8 dc       	rcall	.-1680   	; 0x6d94 <send_cmd>
    7424:	81 11       	cpse	r24, r1
    7426:	06 cf       	rjmp	.-500    	; 0x7234 <disk_ioctl+0x76>
    7428:	87 01       	movw	r16, r14
    742a:	0c 5f       	subi	r16, 0xFC	; 252
    742c:	1f 4f       	sbci	r17, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    742e:	8f ef       	ldi	r24, 0xFF	; 255
    7430:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <spi_wr_rd>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    7434:	f7 01       	movw	r30, r14
    7436:	81 93       	st	Z+, r24
    7438:	7f 01       	movw	r14, r30
    743a:	e0 17       	cp	r30, r16
    743c:	f1 07       	cpc	r31, r17
    743e:	b9 f7       	brne	.-18     	; 0x742e <disk_ioctl+0x270>
    7440:	0e c0       	rjmp	.+28     	; 0x745e <disk_ioctl+0x2a0>
			res = RES_OK;
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    7442:	40 e0       	ldi	r20, 0x00	; 0
    7444:	50 e0       	ldi	r21, 0x00	; 0
    7446:	ba 01       	movw	r22, r20
    7448:	8d e8       	ldi	r24, 0x8D	; 141
    744a:	a4 dc       	rcall	.-1720   	; 0x6d94 <send_cmd>
    744c:	81 11       	cpse	r24, r1
    744e:	f2 ce       	rjmp	.-540    	; 0x7234 <disk_ioctl+0x76>
			xchg_spi(0xFF);
    7450:	8f ef       	ldi	r24, 0xFF	; 255
    7452:	10 dc       	rcall	.-2016   	; 0x6c74 <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    7454:	60 e4       	ldi	r22, 0x40	; 64
    7456:	70 e0       	ldi	r23, 0x00	; 0
    7458:	da cf       	rjmp	.-76     	; 0x740e <disk_ioctl+0x250>
		Stat |= STA_NOINIT;
		res = RES_OK;
		break;

	default:
		res = RES_PARERR;
    745a:	14 e0       	ldi	r17, 0x04	; 4
    745c:	01 c0       	rjmp	.+2      	; 0x7460 <disk_ioctl+0x2a2>
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
			res = RES_OK;
    745e:	10 e0       	ldi	r17, 0x00	; 0

	default:
		res = RES_PARERR;
	}

	deselect();
    7460:	0b dc       	rcall	.-2026   	; 0x6c78 <deselect>

	return res;
    7462:	81 2f       	mov	r24, r17
    7464:	03 c0       	rjmp	.+6      	; 0x746c <disk_ioctl+0x2ae>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    7466:	84 e0       	ldi	r24, 0x04	; 4
    7468:	01 c0       	rjmp	.+2      	; 0x746c <disk_ioctl+0x2ae>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    746a:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    746c:	60 96       	adiw	r28, 0x10	; 16
    746e:	cd bf       	out	0x3d, r28	; 61
    7470:	de bf       	out	0x3e, r29	; 62
    7472:	df 91       	pop	r29
    7474:	cf 91       	pop	r28
    7476:	1f 91       	pop	r17
    7478:	0f 91       	pop	r16
    747a:	ff 90       	pop	r15
    747c:	ef 90       	pop	r14
    747e:	08 95       	ret

00007480 <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    7480:	80 91 bd 2a 	lds	r24, 0x2ABD
	if (n) Timer1 = --n;
    7484:	88 23       	and	r24, r24
    7486:	19 f0       	breq	.+6      	; 0x748e <disk_timerproc+0xe>
    7488:	81 50       	subi	r24, 0x01	; 1
    748a:	80 93 bd 2a 	sts	0x2ABD, r24
	n = Timer2;
    748e:	80 91 bc 2a 	lds	r24, 0x2ABC
	if (n) Timer2 = --n;
    7492:	88 23       	and	r24, r24
    7494:	19 f0       	breq	.+6      	; 0x749c <disk_timerproc+0x1c>
    7496:	81 50       	subi	r24, 0x01	; 1
    7498:	80 93 bc 2a 	sts	0x2ABC, r24

	s = Stat;
    749c:	80 91 24 20 	lds	r24, 0x2024
	if (MMC_WP)				/* Write protected */
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;

	if (MMC_CD)				/* Card inserted */
    74a0:	90 91 48 06 	lds	r25, 0x0648
    74a4:	93 fd       	sbrc	r25, 3
    74a6:	02 c0       	rjmp	.+4      	; 0x74ac <disk_timerproc+0x2c>
		s &= ~STA_NODISK;
    74a8:	89 7f       	andi	r24, 0xF9	; 249
    74aa:	02 c0       	rjmp	.+4      	; 0x74b0 <disk_timerproc+0x30>
	s = Stat;

	if (MMC_WP)				/* Write protected */
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;
    74ac:	8b 7f       	andi	r24, 0xFB	; 251

	if (MMC_CD)				/* Card inserted */
		s &= ~STA_NODISK;
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
    74ae:	83 60       	ori	r24, 0x03	; 3

	Stat = s;				/* Update MMC status */
    74b0:	80 93 24 20 	sts	0x2024, r24
    74b4:	08 95       	ret

000074b6 <__vector_17>:
}

ISR(TCC0_CCB_vect) {
    74b6:	1f 92       	push	r1
    74b8:	0f 92       	push	r0
    74ba:	0f b6       	in	r0, 0x3f	; 63
    74bc:	0f 92       	push	r0
    74be:	11 24       	eor	r1, r1
    74c0:	0b b6       	in	r0, 0x3b	; 59
    74c2:	0f 92       	push	r0
    74c4:	2f 93       	push	r18
    74c6:	3f 93       	push	r19
    74c8:	4f 93       	push	r20
    74ca:	5f 93       	push	r21
    74cc:	6f 93       	push	r22
    74ce:	7f 93       	push	r23
    74d0:	8f 93       	push	r24
    74d2:	9f 93       	push	r25
    74d4:	af 93       	push	r26
    74d6:	bf 93       	push	r27
    74d8:	ef 93       	push	r30
    74da:	ff 93       	push	r31
	disk_timerproc();
    74dc:	d1 df       	rcall	.-94     	; 0x7480 <disk_timerproc>
}
    74de:	ff 91       	pop	r31
    74e0:	ef 91       	pop	r30
    74e2:	bf 91       	pop	r27
    74e4:	af 91       	pop	r26
    74e6:	9f 91       	pop	r25
    74e8:	8f 91       	pop	r24
    74ea:	7f 91       	pop	r23
    74ec:	6f 91       	pop	r22
    74ee:	5f 91       	pop	r21
    74f0:	4f 91       	pop	r20
    74f2:	3f 91       	pop	r19
    74f4:	2f 91       	pop	r18
    74f6:	0f 90       	pop	r0
    74f8:	0b be       	out	0x3b, r0	; 59
    74fa:	0f 90       	pop	r0
    74fc:	0f be       	out	0x3f, r0	; 63
    74fe:	0f 90       	pop	r0
    7500:	1f 90       	pop	r1
    7502:	18 95       	reti

00007504 <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
    7504:	1f 92       	push	r1
    7506:	0f 92       	push	r0
    7508:	0f b6       	in	r0, 0x3f	; 63
    750a:	0f 92       	push	r0
    750c:	11 24       	eor	r1, r1
    750e:	0b b6       	in	r0, 0x3b	; 59
    7510:	0f 92       	push	r0
    7512:	2f 93       	push	r18
    7514:	3f 93       	push	r19
    7516:	4f 93       	push	r20
    7518:	5f 93       	push	r21
    751a:	8f 93       	push	r24
    751c:	9f 93       	push	r25
    751e:	af 93       	push	r26
    7520:	bf 93       	push	r27
    7522:	ef 93       	push	r30
    7524:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    7526:	e0 91 be 2a 	lds	r30, 0x2ABE
    752a:	f0 91 bf 2a 	lds	r31, 0x2ABF
	UINT ri, ct;
	BYTE *buff, l, r;

	if (!fcb) return;
    752e:	30 97       	sbiw	r30, 0x00	; 0
    7530:	09 f4       	brne	.+2      	; 0x7534 <__vector_14+0x30>
    7532:	4b c0       	rjmp	.+150    	; 0x75ca <__vector_14+0xc6>
	ct = fcb->ct; ri = fcb->ri;
    7534:	86 81       	ldd	r24, Z+6	; 0x06
    7536:	97 81       	ldd	r25, Z+7	; 0x07
    7538:	22 81       	ldd	r18, Z+2	; 0x02
    753a:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    753c:	a0 85       	ldd	r26, Z+8	; 0x08
    753e:	b1 85       	ldd	r27, Z+9	; 0x09
    7540:	a2 0f       	add	r26, r18
    7542:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    7544:	40 81       	ld	r20, Z
    7546:	51 81       	ldd	r21, Z+1	; 0x01
    7548:	41 30       	cpi	r20, 0x01	; 1
    754a:	51 05       	cpc	r21, r1
    754c:	61 f0       	breq	.+24     	; 0x7566 <__vector_14+0x62>
    754e:	20 f0       	brcs	.+8      	; 0x7558 <__vector_14+0x54>
    7550:	42 30       	cpi	r20, 0x02	; 2
    7552:	51 05       	cpc	r21, r1
    7554:	69 f0       	breq	.+26     	; 0x7570 <__vector_14+0x6c>
    7556:	16 c0       	rjmp	.+44     	; 0x7584 <__vector_14+0x80>
		case 0:		/* Mono, 8bit */
			if (ct < 1) return;
    7558:	00 97       	sbiw	r24, 0x00	; 0
    755a:	b9 f1       	breq	.+110    	; 0x75ca <__vector_14+0xc6>
			l = r = buff[0];
    755c:	4c 91       	ld	r20, X
			ct -= 1; ri += 1;
    755e:	01 97       	sbiw	r24, 0x01	; 1
    7560:	2f 5f       	subi	r18, 0xFF	; 255
    7562:	3f 4f       	sbci	r19, 0xFF	; 255
			break;
    7564:	17 c0       	rjmp	.+46     	; 0x7594 <__vector_14+0x90>
		case 1:		/* Stereo, 8bit */
			if (ct < 2) return;
    7566:	82 30       	cpi	r24, 0x02	; 2
    7568:	91 05       	cpc	r25, r1
    756a:	78 f1       	brcs	.+94     	; 0x75ca <__vector_14+0xc6>
			l = buff[0]; r = buff[1];
    756c:	4c 91       	ld	r20, X
    756e:	06 c0       	rjmp	.+12     	; 0x757c <__vector_14+0x78>
			ct -= 2; ri += 2;
			break;
		case 2:		/* Mono, 16bit */
			if (ct < 2) return;
    7570:	82 30       	cpi	r24, 0x02	; 2
    7572:	91 05       	cpc	r25, r1
    7574:	50 f1       	brcs	.+84     	; 0x75ca <__vector_14+0xc6>
			l = r = buff[1] + 128;
    7576:	11 96       	adiw	r26, 0x01	; 1
    7578:	4c 91       	ld	r20, X
    757a:	40 58       	subi	r20, 0x80	; 128
			ct -= 2; ri += 2;
    757c:	02 97       	sbiw	r24, 0x02	; 2
    757e:	2e 5f       	subi	r18, 0xFE	; 254
    7580:	3f 4f       	sbci	r19, 0xFF	; 255
			break;
    7582:	08 c0       	rjmp	.+16     	; 0x7594 <__vector_14+0x90>
		default:	/* Stereo, 16bit */
			if (ct < 4) return;
    7584:	84 30       	cpi	r24, 0x04	; 4
    7586:	91 05       	cpc	r25, r1
    7588:	00 f1       	brcs	.+64     	; 0x75ca <__vector_14+0xc6>
			l = buff[1]; r = buff[3];
    758a:	11 96       	adiw	r26, 0x01	; 1
    758c:	4c 91       	ld	r20, X
			ct -= 4; ri += 4;
    758e:	04 97       	sbiw	r24, 0x04	; 4
    7590:	2c 5f       	subi	r18, 0xFC	; 252
    7592:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fcb->ct = ct;
    7594:	86 83       	std	Z+6, r24	; 0x06
    7596:	97 83       	std	Z+7, r25	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    7598:	82 85       	ldd	r24, Z+10	; 0x0a
    759a:	93 85       	ldd	r25, Z+11	; 0x0b
    759c:	01 97       	sbiw	r24, 0x01	; 1
    759e:	82 23       	and	r24, r18
    75a0:	93 23       	and	r25, r19
    75a2:	82 83       	std	Z+2, r24	; 0x02
    75a4:	93 83       	std	Z+3, r25	; 0x03
	
	dac_ch0_write((1<<1)+(l<<3));
    75a6:	88 e0       	ldi	r24, 0x08	; 8
    75a8:	48 9f       	mul	r20, r24
    75aa:	90 01       	movw	r18, r0
    75ac:	11 24       	eor	r1, r1
    75ae:	c9 01       	movw	r24, r18
    75b0:	02 96       	adiw	r24, 0x02	; 2
void dac_speaker_off(void);
void dac_setup(bool dual_channel);
void dac_disable(void);

static inline void dac_ch0_write(uint16_t data) {
	DACB.CH0DATA = data;
    75b2:	80 93 38 03 	sts	0x0338, r24
    75b6:	90 93 39 03 	sts	0x0339, r25
	dac_ch1_write((1<<1)-(l<<3));
    75ba:	82 e0       	ldi	r24, 0x02	; 2
    75bc:	90 e0       	ldi	r25, 0x00	; 0
    75be:	82 1b       	sub	r24, r18
    75c0:	93 0b       	sbc	r25, r19
}

static inline void dac_ch1_write(uint16_t data) {
	DACB.CH1DATA = data;
    75c2:	80 93 3a 03 	sts	0x033A, r24
    75c6:	90 93 3b 03 	sts	0x033B, r25
}
    75ca:	ff 91       	pop	r31
    75cc:	ef 91       	pop	r30
    75ce:	bf 91       	pop	r27
    75d0:	af 91       	pop	r26
    75d2:	9f 91       	pop	r25
    75d4:	8f 91       	pop	r24
    75d6:	5f 91       	pop	r21
    75d8:	4f 91       	pop	r20
    75da:	3f 91       	pop	r19
    75dc:	2f 91       	pop	r18
    75de:	0f 90       	pop	r0
    75e0:	0b be       	out	0x3b, r0	; 59
    75e2:	0f 90       	pop	r0
    75e4:	0f be       	out	0x3f, r0	; 63
    75e6:	0f 90       	pop	r0
    75e8:	1f 90       	pop	r1
    75ea:	18 95       	reti

000075ec <sound_start>:

int sound_start (
	WAVFIFO* fcb,	/* Pointer to the sound FIFO control structure */
	DWORD fs		/* Sampling frequency [Hz] */
)
{
    75ec:	fc 01       	movw	r30, r24
	if (fs < 8000 || fs > 44100) return 0;	/* Check fs range */
    75ee:	40 54       	subi	r20, 0x40	; 64
    75f0:	5f 41       	sbci	r21, 0x1F	; 31
    75f2:	61 09       	sbc	r22, r1
    75f4:	71 09       	sbc	r23, r1
    75f6:	45 30       	cpi	r20, 0x05	; 5
    75f8:	5d 48       	sbci	r21, 0x8D	; 141
    75fa:	61 05       	cpc	r22, r1
    75fc:	71 05       	cpc	r23, r1
    75fe:	28 f5       	brcc	.+74     	; 0x764a <sound_start+0x5e>

	fcb->ri = 0; fcb->wi = 0; fcb->ct = 0;	/* Flush FIFO */
    7600:	12 82       	std	Z+2, r1	; 0x02
    7602:	13 82       	std	Z+3, r1	; 0x03
    7604:	14 82       	std	Z+4, r1	; 0x04
    7606:	15 82       	std	Z+5, r1	; 0x05
    7608:	16 82       	std	Z+6, r1	; 0x06
    760a:	17 82       	std	Z+7, r1	; 0x07
	WavFifo = fcb;			/* Register FIFO control structure */
    760c:	e0 93 be 2a 	sts	0x2ABE, r30
    7610:	f0 93 bf 2a 	sts	0x2ABF, r31
	
	dac_setup(true);
    7614:	81 e0       	ldi	r24, 0x01	; 1
    7616:	0e 94 02 08 	call	0x1004	; 0x1004 <dac_setup>
	
	//Disable power reduction for TCC0 
	PR.PRPC &= ~0x01;
    761a:	80 91 73 00 	lds	r24, 0x0073
    761e:	8e 7f       	andi	r24, 0xFE	; 254
    7620:	80 93 73 00 	sts	0x0073, r24
	
	TCC0.CNT = 0;
    7624:	10 92 20 08 	sts	0x0820, r1
    7628:	10 92 21 08 	sts	0x0821, r1
	TCC0.PER = (F_CPU / 44100 - 1);
    762c:	84 ed       	ldi	r24, 0xD4	; 212
    762e:	92 e0       	ldi	r25, 0x02	; 2
    7630:	80 93 26 08 	sts	0x0826, r24
    7634:	90 93 27 08 	sts	0x0827, r25
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    7638:	81 e0       	ldi	r24, 0x01	; 1
    763a:	80 93 00 08 	sts	0x0800, r24
	TCC0.INTCTRLA = TC_OVFINTLVL_HI_gc;
    763e:	83 e0       	ldi	r24, 0x03	; 3
    7640:	80 93 06 08 	sts	0x0806, r24
	
	return 1;
    7644:	81 e0       	ldi	r24, 0x01	; 1
    7646:	90 e0       	ldi	r25, 0x00	; 0
    7648:	08 95       	ret
int sound_start (
	WAVFIFO* fcb,	/* Pointer to the sound FIFO control structure */
	DWORD fs		/* Sampling frequency [Hz] */
)
{
	if (fs < 8000 || fs > 44100) return 0;	/* Check fs range */
    764a:	80 e0       	ldi	r24, 0x00	; 0
    764c:	90 e0       	ldi	r25, 0x00	; 0
	TCC0.PER = (F_CPU / 44100 - 1);
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
	TCC0.INTCTRLA = TC_OVFINTLVL_HI_gc;
	
	return 1;
}
    764e:	08 95       	ret

00007650 <sound_stop>:
/*-----------------------------------------------------*/
/* Disable sound output                                */

void sound_stop (void)
{
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    7650:	e0 e0       	ldi	r30, 0x00	; 0
    7652:	f8 e0       	ldi	r31, 0x08	; 8
    7654:	16 82       	std	Z+6, r1	; 0x06
	dac_disable();
    7656:	0e 94 3d 08 	call	0x107a	; 0x107a <dac_disable>
	
	//Enable power reduction for TCC0 
	PR.PRPC |= 0x01;
    765a:	e0 e7       	ldi	r30, 0x70	; 112
    765c:	f0 e0       	ldi	r31, 0x00	; 0
    765e:	83 81       	ldd	r24, Z+3	; 0x03
    7660:	81 60       	ori	r24, 0x01	; 1
    7662:	83 83       	std	Z+3, r24	; 0x03

	WavFifo = 0;		/* Unregister FIFO control structure */
    7664:	10 92 be 2a 	sts	0x2ABE, r1
    7668:	10 92 bf 2a 	sts	0x2ABF, r1
    766c:	08 95       	ret

0000766e <load_wav>:
FIL *fp,			/* Pointer to the open file object to play */
const char *title,	/* Title (file name, etc...) */
void *work,			/* Pointer to working buffer (must be-4 byte aligned) */
UINT sz_work		/* Size of working buffer (must be power of 2) */
)
{
    766e:	2f 92       	push	r2
    7670:	3f 92       	push	r3
    7672:	4f 92       	push	r4
    7674:	5f 92       	push	r5
    7676:	6f 92       	push	r6
    7678:	7f 92       	push	r7
    767a:	8f 92       	push	r8
    767c:	9f 92       	push	r9
    767e:	af 92       	push	r10
    7680:	bf 92       	push	r11
    7682:	cf 92       	push	r12
    7684:	df 92       	push	r13
    7686:	ef 92       	push	r14
    7688:	ff 92       	push	r15
    768a:	0f 93       	push	r16
    768c:	1f 93       	push	r17
    768e:	cf 93       	push	r28
    7690:	df 93       	push	r29
    7692:	cd b7       	in	r28, 0x3d	; 61
    7694:	de b7       	in	r29, 0x3e	; 62
    7696:	c4 56       	subi	r28, 0x64	; 100
    7698:	d1 09       	sbc	r29, r1
    769a:	cd bf       	out	0x3d, r28	; 61
    769c:	de bf       	out	0x3e, r29	; 62
    769e:	8c 01       	movw	r16, r24
    76a0:	1a 01       	movw	r2, r20
    76a2:	a5 96       	adiw	r28, 0x25	; 37
    76a4:	2e af       	std	Y+62, r18	; 0x3e
    76a6:	3f af       	std	Y+63, r19	; 0x3f
    76a8:	a5 97       	sbiw	r28, 0x25	; 37


	//xprintf(PSTR("%s\n"), title);	/* Put title */

	/* Is it a WAV file? */
	if (f_read(fp, buff, 12, &br) || br != 12) return -1;
    76aa:	7e 01       	movw	r14, r28
    76ac:	2d e4       	ldi	r18, 0x4D	; 77
    76ae:	e2 0e       	add	r14, r18
    76b0:	f1 1c       	adc	r15, r1
    76b2:	97 01       	movw	r18, r14
    76b4:	4c e0       	ldi	r20, 0x0C	; 12
    76b6:	50 e0       	ldi	r21, 0x00	; 0
    76b8:	b1 01       	movw	r22, r2
    76ba:	0e 94 87 31 	call	0x630e	; 0x630e <f_read>
    76be:	81 11       	cpse	r24, r1
    76c0:	63 c2       	rjmp	.+1222   	; 0x7b88 <load_wav+0x51a>
    76c2:	d7 01       	movw	r26, r14
    76c4:	8d 91       	ld	r24, X+
    76c6:	9c 91       	ld	r25, X
    76c8:	0c 97       	sbiw	r24, 0x0c	; 12
    76ca:	09 f0       	breq	.+2      	; 0x76ce <load_wav+0x60>
    76cc:	5d c2       	rjmp	.+1210   	; 0x7b88 <load_wav+0x51a>
	if (LD_DWORD(&buff[0]) != FCC('R','I','F','F')) return -1;
    76ce:	f1 01       	movw	r30, r2
    76d0:	80 81       	ld	r24, Z
    76d2:	91 81       	ldd	r25, Z+1	; 0x01
    76d4:	a2 81       	ldd	r26, Z+2	; 0x02
    76d6:	b3 81       	ldd	r27, Z+3	; 0x03
    76d8:	82 35       	cpi	r24, 0x52	; 82
    76da:	99 44       	sbci	r25, 0x49	; 73
    76dc:	a6 44       	sbci	r26, 0x46	; 70
    76de:	b6 44       	sbci	r27, 0x46	; 70
    76e0:	09 f0       	breq	.+2      	; 0x76e4 <load_wav+0x76>
    76e2:	52 c2       	rjmp	.+1188   	; 0x7b88 <load_wav+0x51a>
	if (LD_DWORD(&buff[8]) != FCC('W','A','V','E')) return -1;
    76e4:	f1 01       	movw	r30, r2
    76e6:	80 85       	ldd	r24, Z+8	; 0x08
    76e8:	91 85       	ldd	r25, Z+9	; 0x09
    76ea:	a2 85       	ldd	r26, Z+10	; 0x0a
    76ec:	b3 85       	ldd	r27, Z+11	; 0x0b
    76ee:	87 35       	cpi	r24, 0x57	; 87
    76f0:	91 44       	sbci	r25, 0x41	; 65
    76f2:	a6 45       	sbci	r26, 0x56	; 86
    76f4:	b5 44       	sbci	r27, 0x45	; 69
    76f6:	09 f0       	breq	.+2      	; 0x76fa <load_wav+0x8c>
    76f8:	47 c2       	rjmp	.+1166   	; 0x7b88 <load_wav+0x51a>
	eof = LD_DWORD(&buff[4]) + 8;
    76fa:	d1 01       	movw	r26, r2
    76fc:	14 96       	adiw	r26, 0x04	; 4
    76fe:	2d 91       	ld	r18, X+
    7700:	3d 91       	ld	r19, X+
    7702:	4d 91       	ld	r20, X+
    7704:	5c 91       	ld	r21, X
    7706:	17 97       	sbiw	r26, 0x07	; 7
    7708:	28 5f       	subi	r18, 0xF8	; 248
    770a:	3f 4f       	sbci	r19, 0xFF	; 255
    770c:	4f 4f       	sbci	r20, 0xFF	; 255
    770e:	5f 4f       	sbci	r21, 0xFF	; 255
    7710:	a3 96       	adiw	r28, 0x23	; 35
    7712:	2c af       	std	Y+60, r18	; 0x3c
    7714:	3d af       	std	Y+61, r19	; 0x3d
    7716:	4e af       	std	Y+62, r20	; 0x3e
    7718:	5f af       	std	Y+63, r21	; 0x3f
    771a:	a3 97       	sbiw	r28, 0x23	; 35

	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
    771c:	19 82       	std	Y+1, r1	; 0x01
    771e:	19 a2       	std	Y+33, r1	; 0x21
	md = fsmp = wsmp = offw = szwav = 0;
    7720:	6f 96       	adiw	r28, 0x1f	; 31
    7722:	1c ae       	std	Y+60, r1	; 0x3c
    7724:	1d ae       	std	Y+61, r1	; 0x3d
    7726:	1e ae       	std	Y+62, r1	; 0x3e
    7728:	1f ae       	std	Y+63, r1	; 0x3f
    772a:	6f 97       	sbiw	r28, 0x1f	; 31
    772c:	41 2c       	mov	r4, r1
    772e:	51 2c       	mov	r5, r1
    7730:	32 01       	movw	r6, r4
    7732:	6b 96       	adiw	r28, 0x1b	; 27
    7734:	1c ae       	std	Y+60, r1	; 0x3c
    7736:	1d ae       	std	Y+61, r1	; 0x3d
    7738:	1e ae       	std	Y+62, r1	; 0x3e
    773a:	1f ae       	std	Y+63, r1	; 0x3f
    773c:	6b 97       	sbiw	r28, 0x1b	; 27
    773e:	65 96       	adiw	r28, 0x15	; 21
    7740:	1e ae       	std	Y+62, r1	; 0x3e
    7742:	1f ae       	std	Y+63, r1	; 0x3f
    7744:	65 97       	sbiw	r28, 0x15	; 21
					if (f_read(fp, buff, 8, &br) || br != 8) return -1;
					ssz = (LD_DWORD(&buff[4]) + 1) & ~1;
					p = 0;
					switch (LD_DWORD(buff)) {
						case FCC('I','N','A','M'):		/* INAM sub-chunk */
						p = nam; break;
    7746:	fe 01       	movw	r30, r28
    7748:	b1 96       	adiw	r30, 0x21	; 33
    774a:	61 96       	adiw	r28, 0x11	; 17
    774c:	ee af       	std	Y+62, r30	; 0x3e
    774e:	ff af       	std	Y+63, r31	; 0x3f
    7750:	61 97       	sbiw	r28, 0x11	; 17
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
    7752:	9e 01       	movw	r18, r28
    7754:	2f 5f       	subi	r18, 0xFF	; 255
    7756:	3f 4f       	sbci	r19, 0xFF	; 255
    7758:	63 96       	adiw	r28, 0x13	; 19
    775a:	2e af       	std	Y+62, r18	; 0x3e
    775c:	3f af       	std	Y+63, r19	; 0x3f
    775e:	63 97       	sbiw	r28, 0x13	; 19
	eof = LD_DWORD(&buff[4]) + 8;

	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
	md = fsmp = wsmp = offw = szwav = 0;
	while (f_tell(fp) < eof) {
    7760:	f8 01       	movw	r30, r16
    7762:	86 81       	ldd	r24, Z+6	; 0x06
    7764:	97 81       	ldd	r25, Z+7	; 0x07
    7766:	a0 85       	ldd	r26, Z+8	; 0x08
    7768:	b1 85       	ldd	r27, Z+9	; 0x09
    776a:	a3 96       	adiw	r28, 0x23	; 35
    776c:	2c ad       	ldd	r18, Y+60	; 0x3c
    776e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7770:	4e ad       	ldd	r20, Y+62	; 0x3e
    7772:	5f ad       	ldd	r21, Y+63	; 0x3f
    7774:	a3 97       	sbiw	r28, 0x23	; 35
    7776:	82 17       	cp	r24, r18
    7778:	93 07       	cpc	r25, r19
    777a:	a4 07       	cpc	r26, r20
    777c:	b5 07       	cpc	r27, r21
    777e:	08 f0       	brcs	.+2      	; 0x7782 <load_wav+0x114>
    7780:	48 c1       	rjmp	.+656    	; 0x7a12 <load_wav+0x3a4>
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
    7782:	9e 01       	movw	r18, r28
    7784:	23 5b       	subi	r18, 0xB3	; 179
    7786:	3f 4f       	sbci	r19, 0xFF	; 255
    7788:	48 e0       	ldi	r20, 0x08	; 8
    778a:	50 e0       	ldi	r21, 0x00	; 0
    778c:	b1 01       	movw	r22, r2
    778e:	c8 01       	movw	r24, r16
    7790:	0e 94 87 31 	call	0x630e	; 0x630e <f_read>
    7794:	81 11       	cpse	r24, r1
    7796:	f8 c1       	rjmp	.+1008   	; 0x7b88 <load_wav+0x51a>
    7798:	2f 96       	adiw	r28, 0x0f	; 15
    779a:	8e ad       	ldd	r24, Y+62	; 0x3e
    779c:	9f ad       	ldd	r25, Y+63	; 0x3f
    779e:	2f 97       	sbiw	r28, 0x0f	; 15
    77a0:	08 97       	sbiw	r24, 0x08	; 8
    77a2:	09 f0       	breq	.+2      	; 0x77a6 <load_wav+0x138>
    77a4:	f1 c1       	rjmp	.+994    	; 0x7b88 <load_wav+0x51a>
		sz = (LD_DWORD(&buff[4]) + 1) & ~1;
    77a6:	d1 01       	movw	r26, r2
    77a8:	14 96       	adiw	r26, 0x04	; 4
    77aa:	8d 90       	ld	r8, X+
    77ac:	9d 90       	ld	r9, X+
    77ae:	ad 90       	ld	r10, X+
    77b0:	bc 90       	ld	r11, X
    77b2:	17 97       	sbiw	r26, 0x07	; 7
    77b4:	bf ef       	ldi	r27, 0xFF	; 255
    77b6:	8b 1a       	sub	r8, r27
    77b8:	9b 0a       	sbc	r9, r27
    77ba:	ab 0a       	sbc	r10, r27
    77bc:	bb 0a       	sbc	r11, r27
    77be:	e8 94       	clt
    77c0:	80 f8       	bld	r8, 0
		switch (LD_DWORD(&buff[0])) {
    77c2:	f1 01       	movw	r30, r2
    77c4:	80 81       	ld	r24, Z
    77c6:	91 81       	ldd	r25, Z+1	; 0x01
    77c8:	a2 81       	ldd	r26, Z+2	; 0x02
    77ca:	b3 81       	ldd	r27, Z+3	; 0x03
    77cc:	8c 34       	cpi	r24, 0x4C	; 76
    77ce:	f9 e4       	ldi	r31, 0x49	; 73
    77d0:	9f 07       	cpc	r25, r31
    77d2:	f3 e5       	ldi	r31, 0x53	; 83
    77d4:	af 07       	cpc	r26, r31
    77d6:	f4 e5       	ldi	r31, 0x54	; 84
    77d8:	bf 07       	cpc	r27, r31
    77da:	09 f4       	brne	.+2      	; 0x77de <load_wav+0x170>
    77dc:	8d c0       	rjmp	.+282    	; 0x78f8 <load_wav+0x28a>
    77de:	30 f4       	brcc	.+12     	; 0x77ec <load_wav+0x17e>
    77e0:	86 36       	cpi	r24, 0x66	; 102
    77e2:	9d 46       	sbci	r25, 0x6D	; 109
    77e4:	a4 47       	sbci	r26, 0x74	; 116
    77e6:	b0 42       	sbci	r27, 0x20	; 32
    77e8:	e1 f0       	breq	.+56     	; 0x7822 <load_wav+0x1b4>
    77ea:	ce c1       	rjmp	.+924    	; 0x7b88 <load_wav+0x51a>
    77ec:	84 36       	cpi	r24, 0x64	; 100
    77ee:	41 e6       	ldi	r20, 0x61	; 97
    77f0:	94 07       	cpc	r25, r20
    77f2:	44 e7       	ldi	r20, 0x74	; 116
    77f4:	a4 07       	cpc	r26, r20
    77f6:	41 e6       	ldi	r20, 0x61	; 97
    77f8:	b4 07       	cpc	r27, r20
    77fa:	09 f4       	brne	.+2      	; 0x77fe <load_wav+0x190>
    77fc:	65 c0       	rjmp	.+202    	; 0x78c8 <load_wav+0x25a>
    77fe:	86 36       	cpi	r24, 0x66	; 102
    7800:	91 46       	sbci	r25, 0x61	; 97
    7802:	a3 46       	sbci	r26, 0x63	; 99
    7804:	b4 47       	sbci	r27, 0x74	; 116
    7806:	09 f0       	breq	.+2      	; 0x780a <load_wav+0x19c>
    7808:	bf c1       	rjmp	.+894    	; 0x7b88 <load_wav+0x51a>
			}
			fsmp = LD_DWORD(&buff[4]);		/* Sampling rate */
			break;

			case FCC('f','a','c','t') :
			f_lseek(fp, f_tell(fp) + sz);
    780a:	f8 01       	movw	r30, r16
    780c:	46 81       	ldd	r20, Z+6	; 0x06
    780e:	57 81       	ldd	r21, Z+7	; 0x07
    7810:	60 85       	ldd	r22, Z+8	; 0x08
    7812:	71 85       	ldd	r23, Z+9	; 0x09
    7814:	48 0d       	add	r20, r8
    7816:	59 1d       	adc	r21, r9
    7818:	6a 1d       	adc	r22, r10
    781a:	7b 1d       	adc	r23, r11
    781c:	c8 01       	movw	r24, r16
    781e:	90 d8       	rcall	.-3808   	; 0x6940 <f_lseek>
			break;
    7820:	9f cf       	rjmp	.-194    	; 0x7760 <load_wav+0xf2>
	while (f_tell(fp) < eof) {
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
		sz = (LD_DWORD(&buff[4]) + 1) & ~1;
		switch (LD_DWORD(&buff[0])) {
			case FCC('f','m','t',' ') :
			if (sz > 1000 || sz < 16 || f_read(fp, buff, sz, &br) || sz != br) return -1;
    7822:	d5 01       	movw	r26, r10
    7824:	c4 01       	movw	r24, r8
    7826:	40 97       	sbiw	r24, 0x10	; 16
    7828:	a1 09       	sbc	r26, r1
    782a:	b1 09       	sbc	r27, r1
    782c:	89 3d       	cpi	r24, 0xD9	; 217
    782e:	93 40       	sbci	r25, 0x03	; 3
    7830:	a1 05       	cpc	r26, r1
    7832:	b1 05       	cpc	r27, r1
    7834:	08 f0       	brcs	.+2      	; 0x7838 <load_wav+0x1ca>
    7836:	a8 c1       	rjmp	.+848    	; 0x7b88 <load_wav+0x51a>
    7838:	9e 01       	movw	r18, r28
    783a:	23 5b       	subi	r18, 0xB3	; 179
    783c:	3f 4f       	sbci	r19, 0xFF	; 255
    783e:	a4 01       	movw	r20, r8
    7840:	b1 01       	movw	r22, r2
    7842:	c8 01       	movw	r24, r16
    7844:	0e 94 87 31 	call	0x630e	; 0x630e <f_read>
    7848:	81 11       	cpse	r24, r1
    784a:	9e c1       	rjmp	.+828    	; 0x7b88 <load_wav+0x51a>
    784c:	2f 96       	adiw	r28, 0x0f	; 15
    784e:	8e ad       	ldd	r24, Y+62	; 0x3e
    7850:	9f ad       	ldd	r25, Y+63	; 0x3f
    7852:	2f 97       	sbiw	r28, 0x0f	; 15
    7854:	a0 e0       	ldi	r26, 0x00	; 0
    7856:	b0 e0       	ldi	r27, 0x00	; 0
    7858:	88 16       	cp	r8, r24
    785a:	99 06       	cpc	r9, r25
    785c:	aa 06       	cpc	r10, r26
    785e:	bb 06       	cpc	r11, r27
    7860:	09 f0       	breq	.+2      	; 0x7864 <load_wav+0x1f6>
    7862:	92 c1       	rjmp	.+804    	; 0x7b88 <load_wav+0x51a>
			if (LD_WORD(&buff[0]) != 0x1) return -1;	/* Check if LPCM */
    7864:	d1 01       	movw	r26, r2
    7866:	8d 91       	ld	r24, X+
    7868:	9c 91       	ld	r25, X
    786a:	11 97       	sbiw	r26, 0x01	; 1
    786c:	01 97       	sbiw	r24, 0x01	; 1
    786e:	09 f0       	breq	.+2      	; 0x7872 <load_wav+0x204>
    7870:	8b c1       	rjmp	.+790    	; 0x7b88 <load_wav+0x51a>
			if (LD_WORD(&buff[2]) == 2) {	/* Channels (1 or 2) */
    7872:	31 e0       	ldi	r19, 0x01	; 1
    7874:	20 e0       	ldi	r18, 0x00	; 0
    7876:	12 96       	adiw	r26, 0x02	; 2
    7878:	8d 91       	ld	r24, X+
    787a:	9c 91       	ld	r25, X
    787c:	13 97       	sbiw	r26, 0x03	; 3
    787e:	02 97       	sbiw	r24, 0x02	; 2
    7880:	09 f0       	breq	.+2      	; 0x7884 <load_wav+0x216>
    7882:	30 e0       	ldi	r19, 0x00	; 0
				md = 1; wsmp = 2;
    7884:	64 96       	adiw	r28, 0x14	; 20
    7886:	3f af       	std	Y+63, r19	; 0x3f
    7888:	64 97       	sbiw	r28, 0x14	; 20
    788a:	65 96       	adiw	r28, 0x15	; 21
    788c:	2f af       	std	Y+63, r18	; 0x3f
    788e:	65 97       	sbiw	r28, 0x15	; 21
				} else {
				md = 0; wsmp = 1;
			}
			if (LD_WORD(&buff[14]) == 16) {	/* Resolution (8 or 16) */
    7890:	f1 01       	movw	r30, r2
    7892:	86 85       	ldd	r24, Z+14	; 0x0e
    7894:	97 85       	ldd	r25, Z+15	; 0x0f
    7896:	40 97       	sbiw	r24, 0x10	; 16
    7898:	49 f4       	brne	.+18     	; 0x78ac <load_wav+0x23e>
				md |= 2; wsmp *= 2;
    789a:	65 96       	adiw	r28, 0x15	; 21
    789c:	2e ad       	ldd	r18, Y+62	; 0x3e
    789e:	3f ad       	ldd	r19, Y+63	; 0x3f
    78a0:	65 97       	sbiw	r28, 0x15	; 21
    78a2:	22 60       	ori	r18, 0x02	; 2
    78a4:	65 96       	adiw	r28, 0x15	; 21
    78a6:	2e af       	std	Y+62, r18	; 0x3e
    78a8:	3f af       	std	Y+63, r19	; 0x3f
    78aa:	65 97       	sbiw	r28, 0x15	; 21
			}
			fsmp = LD_DWORD(&buff[4]);		/* Sampling rate */
    78ac:	d1 01       	movw	r26, r2
    78ae:	14 96       	adiw	r26, 0x04	; 4
    78b0:	8d 91       	ld	r24, X+
    78b2:	9d 91       	ld	r25, X+
    78b4:	0d 90       	ld	r0, X+
    78b6:	bc 91       	ld	r27, X
    78b8:	a0 2d       	mov	r26, r0
    78ba:	6f 96       	adiw	r28, 0x1f	; 31
    78bc:	8c af       	std	Y+60, r24	; 0x3c
    78be:	9d af       	std	Y+61, r25	; 0x3d
    78c0:	ae af       	std	Y+62, r26	; 0x3e
    78c2:	bf af       	std	Y+63, r27	; 0x3f
    78c4:	6f 97       	sbiw	r28, 0x1f	; 31
			break;
    78c6:	4c cf       	rjmp	.-360    	; 0x7760 <load_wav+0xf2>
			case FCC('f','a','c','t') :
			f_lseek(fp, f_tell(fp) + sz);
			break;

			case FCC('d','a','t','a') :
			offw = f_tell(fp);	/* Wave data start offset */
    78c8:	d8 01       	movw	r26, r16
    78ca:	16 96       	adiw	r26, 0x06	; 6
    78cc:	2d 91       	ld	r18, X+
    78ce:	3d 91       	ld	r19, X+
    78d0:	4d 91       	ld	r20, X+
    78d2:	5c 91       	ld	r21, X
    78d4:	19 97       	sbiw	r26, 0x09	; 9
    78d6:	6b 96       	adiw	r28, 0x1b	; 27
    78d8:	2c af       	std	Y+60, r18	; 0x3c
    78da:	3d af       	std	Y+61, r19	; 0x3d
    78dc:	4e af       	std	Y+62, r20	; 0x3e
    78de:	5f af       	std	Y+63, r21	; 0x3f
    78e0:	6b 97       	sbiw	r28, 0x1b	; 27
			szwav = sz;			/* Wave data length [byte] */
			f_lseek(fp, f_tell(fp) + sz);
    78e2:	ba 01       	movw	r22, r20
    78e4:	a9 01       	movw	r20, r18
    78e6:	48 0d       	add	r20, r8
    78e8:	59 1d       	adc	r21, r9
    78ea:	6a 1d       	adc	r22, r10
    78ec:	7b 1d       	adc	r23, r11
    78ee:	c8 01       	movw	r24, r16
    78f0:	27 d8       	rcall	.-4018   	; 0x6940 <f_lseek>
	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
	md = fsmp = wsmp = offw = szwav = 0;
	while (f_tell(fp) < eof) {
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
		sz = (LD_DWORD(&buff[4]) + 1) & ~1;
    78f2:	24 01       	movw	r4, r8
    78f4:	35 01       	movw	r6, r10

			case FCC('d','a','t','a') :
			offw = f_tell(fp);	/* Wave data start offset */
			szwav = sz;			/* Wave data length [byte] */
			f_lseek(fp, f_tell(fp) + sz);
			break;
    78f6:	34 cf       	rjmp	.-408    	; 0x7760 <load_wav+0xf2>

			case FCC('L','I','S','T'):
			sz += f_tell(fp);
    78f8:	f8 01       	movw	r30, r16
    78fa:	c6 80       	ldd	r12, Z+6	; 0x06
    78fc:	d7 80       	ldd	r13, Z+7	; 0x07
    78fe:	e0 84       	ldd	r14, Z+8	; 0x08
    7900:	f1 84       	ldd	r15, Z+9	; 0x09
    7902:	c8 0c       	add	r12, r8
    7904:	d9 1c       	adc	r13, r9
    7906:	ea 1c       	adc	r14, r10
    7908:	fb 1c       	adc	r15, r11
			if (f_read(fp, buff, 4, &br) || br != 4) return -1;
    790a:	9e 01       	movw	r18, r28
    790c:	23 5b       	subi	r18, 0xB3	; 179
    790e:	3f 4f       	sbci	r19, 0xFF	; 255
    7910:	44 e0       	ldi	r20, 0x04	; 4
    7912:	50 e0       	ldi	r21, 0x00	; 0
    7914:	b1 01       	movw	r22, r2
    7916:	c8 01       	movw	r24, r16
    7918:	0e 94 87 31 	call	0x630e	; 0x630e <f_read>
    791c:	81 11       	cpse	r24, r1
    791e:	34 c1       	rjmp	.+616    	; 0x7b88 <load_wav+0x51a>
    7920:	2f 96       	adiw	r28, 0x0f	; 15
    7922:	8e ad       	ldd	r24, Y+62	; 0x3e
    7924:	9f ad       	ldd	r25, Y+63	; 0x3f
    7926:	2f 97       	sbiw	r28, 0x0f	; 15
    7928:	04 97       	sbiw	r24, 0x04	; 4
    792a:	09 f0       	breq	.+2      	; 0x792e <load_wav+0x2c0>
    792c:	2d c1       	rjmp	.+602    	; 0x7b88 <load_wav+0x51a>
			if (LD_DWORD(buff) == FCC('I','N','F','O')) {	/* LIST/INFO chunk */
    792e:	f1 01       	movw	r30, r2
    7930:	80 81       	ld	r24, Z
    7932:	91 81       	ldd	r25, Z+1	; 0x01
    7934:	a2 81       	ldd	r26, Z+2	; 0x02
    7936:	b3 81       	ldd	r27, Z+3	; 0x03
    7938:	89 34       	cpi	r24, 0x49	; 73
    793a:	9e 44       	sbci	r25, 0x4E	; 78
    793c:	a6 44       	sbci	r26, 0x46	; 70
    793e:	bf 44       	sbci	r27, 0x4F	; 79
    7940:	09 f0       	breq	.+2      	; 0x7944 <load_wav+0x2d6>
    7942:	5e c0       	rjmp	.+188    	; 0x7a00 <load_wav+0x392>
				while (f_tell(fp) < sz) {
    7944:	f8 01       	movw	r30, r16
    7946:	86 81       	ldd	r24, Z+6	; 0x06
    7948:	97 81       	ldd	r25, Z+7	; 0x07
    794a:	a0 85       	ldd	r26, Z+8	; 0x08
    794c:	b1 85       	ldd	r27, Z+9	; 0x09
    794e:	8c 15       	cp	r24, r12
    7950:	9d 05       	cpc	r25, r13
    7952:	ae 05       	cpc	r26, r14
    7954:	bf 05       	cpc	r27, r15
    7956:	08 f0       	brcs	.+2      	; 0x795a <load_wav+0x2ec>
    7958:	03 cf       	rjmp	.-506    	; 0x7760 <load_wav+0xf2>
					if (f_read(fp, buff, 8, &br) || br != 8) return -1;
    795a:	9e 01       	movw	r18, r28
    795c:	23 5b       	subi	r18, 0xB3	; 179
    795e:	3f 4f       	sbci	r19, 0xFF	; 255
    7960:	48 e0       	ldi	r20, 0x08	; 8
    7962:	50 e0       	ldi	r21, 0x00	; 0
    7964:	b1 01       	movw	r22, r2
    7966:	c8 01       	movw	r24, r16
    7968:	0e 94 87 31 	call	0x630e	; 0x630e <f_read>
    796c:	81 11       	cpse	r24, r1
    796e:	0c c1       	rjmp	.+536    	; 0x7b88 <load_wav+0x51a>
    7970:	2f 96       	adiw	r28, 0x0f	; 15
    7972:	8e ad       	ldd	r24, Y+62	; 0x3e
    7974:	9f ad       	ldd	r25, Y+63	; 0x3f
    7976:	2f 97       	sbiw	r28, 0x0f	; 15
    7978:	08 97       	sbiw	r24, 0x08	; 8
    797a:	09 f0       	breq	.+2      	; 0x797e <load_wav+0x310>
    797c:	05 c1       	rjmp	.+522    	; 0x7b88 <load_wav+0x51a>
					ssz = (LD_DWORD(&buff[4]) + 1) & ~1;
    797e:	d1 01       	movw	r26, r2
    7980:	14 96       	adiw	r26, 0x04	; 4
    7982:	8d 90       	ld	r8, X+
    7984:	9d 90       	ld	r9, X+
    7986:	ad 90       	ld	r10, X+
    7988:	bc 90       	ld	r11, X
    798a:	17 97       	sbiw	r26, 0x07	; 7
    798c:	bf ef       	ldi	r27, 0xFF	; 255
    798e:	8b 1a       	sub	r8, r27
    7990:	9b 0a       	sbc	r9, r27
    7992:	ab 0a       	sbc	r10, r27
    7994:	bb 0a       	sbc	r11, r27
    7996:	e8 94       	clt
    7998:	80 f8       	bld	r8, 0
					p = 0;
					switch (LD_DWORD(buff)) {
    799a:	f1 01       	movw	r30, r2
    799c:	80 81       	ld	r24, Z
    799e:	91 81       	ldd	r25, Z+1	; 0x01
    79a0:	a2 81       	ldd	r26, Z+2	; 0x02
    79a2:	b3 81       	ldd	r27, Z+3	; 0x03
    79a4:	89 34       	cpi	r24, 0x49	; 73
    79a6:	fe e4       	ldi	r31, 0x4E	; 78
    79a8:	9f 07       	cpc	r25, r31
    79aa:	f1 e4       	ldi	r31, 0x41	; 65
    79ac:	af 07       	cpc	r26, r31
    79ae:	fd e4       	ldi	r31, 0x4D	; 77
    79b0:	bf 07       	cpc	r27, r31
    79b2:	39 f0       	breq	.+14     	; 0x79c2 <load_wav+0x354>
    79b4:	89 34       	cpi	r24, 0x49	; 73
    79b6:	91 44       	sbci	r25, 0x41	; 65
    79b8:	a2 45       	sbci	r26, 0x52	; 82
    79ba:	b4 45       	sbci	r27, 0x54	; 84
    79bc:	09 f4       	brne	.+2      	; 0x79c0 <load_wav+0x352>
    79be:	e7 c0       	rjmp	.+462    	; 0x7b8e <load_wav+0x520>
    79c0:	0d c0       	rjmp	.+26     	; 0x79dc <load_wav+0x36e>
						case FCC('I','N','A','M'):		/* INAM sub-chunk */
						p = nam; break;
    79c2:	60 96       	adiw	r28, 0x10	; 16
    79c4:	6f ad       	ldd	r22, Y+63	; 0x3f
    79c6:	60 97       	sbiw	r28, 0x10	; 16
    79c8:	61 96       	adiw	r28, 0x11	; 17
    79ca:	7f ad       	ldd	r23, Y+63	; 0x3f
    79cc:	61 97       	sbiw	r28, 0x11	; 17
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
					}
					if (p && ssz <= NBSIZE) {
    79ce:	31 e2       	ldi	r19, 0x21	; 33
    79d0:	83 16       	cp	r8, r19
    79d2:	91 04       	cpc	r9, r1
    79d4:	a1 04       	cpc	r10, r1
    79d6:	b1 04       	cpc	r11, r1
    79d8:	08 f4       	brcc	.+2      	; 0x79dc <load_wav+0x36e>
    79da:	cd c0       	rjmp	.+410    	; 0x7b76 <load_wav+0x508>
						if (f_read(fp, p, ssz, &br) || br != ssz) return -1;
						} else {
						if (f_lseek(fp, f_tell(fp) + ssz)) return -1;
    79dc:	d8 01       	movw	r26, r16
    79de:	16 96       	adiw	r26, 0x06	; 6
    79e0:	4d 91       	ld	r20, X+
    79e2:	5d 91       	ld	r21, X+
    79e4:	6d 91       	ld	r22, X+
    79e6:	7c 91       	ld	r23, X
    79e8:	19 97       	sbiw	r26, 0x09	; 9
    79ea:	48 0d       	add	r20, r8
    79ec:	59 1d       	adc	r21, r9
    79ee:	6a 1d       	adc	r22, r10
    79f0:	7b 1d       	adc	r23, r11
    79f2:	c8 01       	movw	r24, r16
    79f4:	0e 94 a0 34 	call	0x6940	; 0x6940 <f_lseek>
    79f8:	88 23       	and	r24, r24
    79fa:	09 f4       	brne	.+2      	; 0x79fe <load_wav+0x390>
    79fc:	a3 cf       	rjmp	.-186    	; 0x7944 <load_wav+0x2d6>
    79fe:	c4 c0       	rjmp	.+392    	; 0x7b88 <load_wav+0x51a>
					}
				}
				} else {
				if (f_lseek(fp, sz)) return -1;	/* Skip unknown sub-chunk type */
    7a00:	b7 01       	movw	r22, r14
    7a02:	a6 01       	movw	r20, r12
    7a04:	c8 01       	movw	r24, r16
    7a06:	0e 94 a0 34 	call	0x6940	; 0x6940 <f_lseek>
    7a0a:	88 23       	and	r24, r24
    7a0c:	09 f4       	brne	.+2      	; 0x7a10 <load_wav+0x3a2>
    7a0e:	a8 ce       	rjmp	.-688    	; 0x7760 <load_wav+0xf2>
    7a10:	bb c0       	rjmp	.+374    	; 0x7b88 <load_wav+0x51a>

			default :	/* Unknown chunk */
			return -1;
		}
	}
	if (!szwav || !fsmp) return -1;		/* Check if valid WAV file */
    7a12:	41 14       	cp	r4, r1
    7a14:	51 04       	cpc	r5, r1
    7a16:	61 04       	cpc	r6, r1
    7a18:	71 04       	cpc	r7, r1
    7a1a:	09 f4       	brne	.+2      	; 0x7a1e <load_wav+0x3b0>
    7a1c:	b5 c0       	rjmp	.+362    	; 0x7b88 <load_wav+0x51a>
    7a1e:	6f 96       	adiw	r28, 0x1f	; 31
    7a20:	8c ad       	ldd	r24, Y+60	; 0x3c
    7a22:	9d ad       	ldd	r25, Y+61	; 0x3d
    7a24:	ae ad       	ldd	r26, Y+62	; 0x3e
    7a26:	bf ad       	ldd	r27, Y+63	; 0x3f
    7a28:	6f 97       	sbiw	r28, 0x1f	; 31
    7a2a:	89 2b       	or	r24, r25
    7a2c:	8a 2b       	or	r24, r26
    7a2e:	8b 2b       	or	r24, r27
    7a30:	09 f4       	brne	.+2      	; 0x7a34 <load_wav+0x3c6>
    7a32:	aa c0       	rjmp	.+340    	; 0x7b88 <load_wav+0x51a>
	if (f_lseek(fp, offw)) return -1;	/* Seek to top of wav data */
    7a34:	6b 96       	adiw	r28, 0x1b	; 27
    7a36:	4c ad       	ldd	r20, Y+60	; 0x3c
    7a38:	5d ad       	ldd	r21, Y+61	; 0x3d
    7a3a:	6e ad       	ldd	r22, Y+62	; 0x3e
    7a3c:	7f ad       	ldd	r23, Y+63	; 0x3f
    7a3e:	6b 97       	sbiw	r28, 0x1b	; 27
    7a40:	c8 01       	movw	r24, r16
    7a42:	0e 94 a0 34 	call	0x6940	; 0x6940 <f_lseek>
    7a46:	81 11       	cpse	r24, r1
    7a48:	9f c0       	rjmp	.+318    	; 0x7b88 <load_wav+0x51a>

	//xprintf(PSTR("IART=%s\nINAM=%s\n"), art, nam);
	//xprintf(PSTR("Sample=%u.%ukHz/%ubit/%S\nLength=%u:%02u\n"), (UINT)(fsmp / 1000), (UINT)(fsmp / 100) % 10, (md & 2) ? 16 : 8, (md & 1) ? PSTR("st") : PSTR("mo"), tc / 60, tc % 60);

	/* Initialize stream parameters and start sound streming */
	fcb.mode = md;
    7a4a:	65 96       	adiw	r28, 0x15	; 21
    7a4c:	ae ad       	ldd	r26, Y+62	; 0x3e
    7a4e:	bf ad       	ldd	r27, Y+63	; 0x3f
    7a50:	65 97       	sbiw	r28, 0x15	; 21
    7a52:	23 96       	adiw	r28, 0x03	; 3
    7a54:	ae af       	std	Y+62, r26	; 0x3e
    7a56:	bf af       	std	Y+63, r27	; 0x3f
    7a58:	23 97       	sbiw	r28, 0x03	; 3
	fcb.buff = buff;
    7a5a:	2b 96       	adiw	r28, 0x0b	; 11
    7a5c:	2e ae       	std	Y+62, r2	; 0x3e
    7a5e:	3f ae       	std	Y+63, r3	; 0x3f
    7a60:	2b 97       	sbiw	r28, 0x0b	; 11
	fcb.sz_buff = sz_work;
    7a62:	a5 96       	adiw	r28, 0x25	; 37
    7a64:	ee ad       	ldd	r30, Y+62	; 0x3e
    7a66:	ff ad       	ldd	r31, Y+63	; 0x3f
    7a68:	a5 97       	sbiw	r28, 0x25	; 37
    7a6a:	2d 96       	adiw	r28, 0x0d	; 13
    7a6c:	ee af       	std	Y+62, r30	; 0x3e
    7a6e:	ff af       	std	Y+63, r31	; 0x3f
    7a70:	2d 97       	sbiw	r28, 0x0d	; 13
	if (!sound_start(&fcb, fsmp)) return -1;
    7a72:	6f 96       	adiw	r28, 0x1f	; 31
    7a74:	4c ad       	ldd	r20, Y+60	; 0x3c
    7a76:	5d ad       	ldd	r21, Y+61	; 0x3d
    7a78:	6e ad       	ldd	r22, Y+62	; 0x3e
    7a7a:	7f ad       	ldd	r23, Y+63	; 0x3f
    7a7c:	6f 97       	sbiw	r28, 0x1f	; 31
    7a7e:	ce 01       	movw	r24, r28
    7a80:	8f 5b       	subi	r24, 0xBF	; 191
    7a82:	9f 4f       	sbci	r25, 0xFF	; 255
    7a84:	b3 dd       	rcall	.-1178   	; 0x75ec <sound_start>
    7a86:	89 2b       	or	r24, r25
    7a88:	09 f4       	brne	.+2      	; 0x7a8c <load_wav+0x41e>
    7a8a:	7e c0       	rjmp	.+252    	; 0x7b88 <load_wav+0x51a>

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
    7a8c:	a5 96       	adiw	r28, 0x25	; 37
    7a8e:	ce ac       	ldd	r12, Y+62	; 0x3e
    7a90:	df ac       	ldd	r13, Y+63	; 0x3f
    7a92:	a5 97       	sbiw	r28, 0x25	; 37
    7a94:	d6 94       	lsr	r13
    7a96:	c7 94       	ror	r12
			btr = (szwav >= sz_work / 2) ? sz_work / 2 : szwav;
    7a98:	96 01       	movw	r18, r12
    7a9a:	40 e0       	ldi	r20, 0x00	; 0
    7a9c:	50 e0       	ldi	r21, 0x00	; 0
    7a9e:	67 96       	adiw	r28, 0x17	; 23
    7aa0:	2c af       	std	Y+60, r18	; 0x3c
    7aa2:	3d af       	std	Y+61, r19	; 0x3d
    7aa4:	4e af       	std	Y+62, r20	; 0x3e
    7aa6:	5f af       	std	Y+63, r21	; 0x3f
    7aa8:	67 97       	sbiw	r28, 0x17	; 23
    7aaa:	e1 2c       	mov	r14, r1
    7aac:	f1 2c       	mov	r15, r1
			f_read(fp, &buff[wi], btr, &br);
			if (br != btr) break;
			szwav -= br;
			wi = (wi + br) & (sz_work - 1);
    7aae:	a5 96       	adiw	r28, 0x25	; 37
    7ab0:	ae ac       	ldd	r10, Y+62	; 0x3e
    7ab2:	bf ac       	ldd	r11, Y+63	; 0x3f
    7ab4:	a5 97       	sbiw	r28, 0x25	; 37
    7ab6:	31 e0       	ldi	r19, 0x01	; 1
    7ab8:	a3 1a       	sub	r10, r19
    7aba:	b1 08       	sbc	r11, r1
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
    7abc:	29 96       	adiw	r28, 0x09	; 9
    7abe:	8e ad       	ldd	r24, Y+62	; 0x3e
    7ac0:	9f ad       	ldd	r25, Y+63	; 0x3f
    7ac2:	29 97       	sbiw	r28, 0x09	; 9
	fcb.buff = buff;
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
    7ac4:	41 14       	cp	r4, r1
    7ac6:	51 04       	cpc	r5, r1
    7ac8:	61 04       	cpc	r6, r1
    7aca:	71 04       	cpc	r7, r1
    7acc:	09 f4       	brne	.+2      	; 0x7ad0 <load_wav+0x462>
    7ace:	50 c0       	rjmp	.+160    	; 0x7b70 <load_wav+0x502>
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
    7ad0:	c8 16       	cp	r12, r24
    7ad2:	d9 06       	cpc	r13, r25
    7ad4:	08 f4       	brcc	.+2      	; 0x7ad8 <load_wav+0x46a>
    7ad6:	43 c0       	rjmp	.+134    	; 0x7b5e <load_wav+0x4f0>
			btr = (szwav >= sz_work / 2) ? sz_work / 2 : szwav;
    7ad8:	94 2d       	mov	r25, r4
    7ada:	85 2d       	mov	r24, r5
    7adc:	67 96       	adiw	r28, 0x17	; 23
    7ade:	2c ad       	ldd	r18, Y+60	; 0x3c
    7ae0:	3d ad       	ldd	r19, Y+61	; 0x3d
    7ae2:	4e ad       	ldd	r20, Y+62	; 0x3e
    7ae4:	5f ad       	ldd	r21, Y+63	; 0x3f
    7ae6:	67 97       	sbiw	r28, 0x17	; 23
    7ae8:	24 15       	cp	r18, r4
    7aea:	35 05       	cpc	r19, r5
    7aec:	46 05       	cpc	r20, r6
    7aee:	57 05       	cpc	r21, r7
    7af0:	30 f4       	brcc	.+12     	; 0x7afe <load_wav+0x490>
    7af2:	64 96       	adiw	r28, 0x14	; 20
    7af4:	9f ad       	ldd	r25, Y+63	; 0x3f
    7af6:	64 97       	sbiw	r28, 0x14	; 20
    7af8:	65 96       	adiw	r28, 0x15	; 21
    7afa:	8f ad       	ldd	r24, Y+63	; 0x3f
    7afc:	65 97       	sbiw	r28, 0x15	; 21
    7afe:	89 2e       	mov	r8, r25
    7b00:	98 2e       	mov	r9, r24
			f_read(fp, &buff[wi], btr, &br);
    7b02:	9e 01       	movw	r18, r28
    7b04:	23 5b       	subi	r18, 0xB3	; 179
    7b06:	3f 4f       	sbci	r19, 0xFF	; 255
    7b08:	49 2f       	mov	r20, r25
    7b0a:	58 2f       	mov	r21, r24
    7b0c:	b1 01       	movw	r22, r2
    7b0e:	6e 0d       	add	r22, r14
    7b10:	7f 1d       	adc	r23, r15
    7b12:	c8 01       	movw	r24, r16
    7b14:	0e 94 87 31 	call	0x630e	; 0x630e <f_read>
			if (br != btr) break;
    7b18:	2f 96       	adiw	r28, 0x0f	; 15
    7b1a:	8e ad       	ldd	r24, Y+62	; 0x3e
    7b1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    7b1e:	2f 97       	sbiw	r28, 0x0f	; 15
    7b20:	88 15       	cp	r24, r8
    7b22:	99 05       	cpc	r25, r9
    7b24:	21 f0       	breq	.+8      	; 0x7b2e <load_wav+0x4c0>
			tc = t;
			//xprintf(PSTR("\rTime=%u:%02u"), tc / 60, tc % 60);
		}
	}

	sound_stop();	/* Stop sound output */
    7b26:	94 dd       	rcall	.-1240   	; 0x7650 <sound_stop>

	//xputc('\n');
	return k;	/* Terminated due to -1:error, 0:eot, >0:key code */
    7b28:	80 e0       	ldi	r24, 0x00	; 0
    7b2a:	90 e0       	ldi	r25, 0x00	; 0
    7b2c:	44 c0       	rjmp	.+136    	; 0x7bb6 <load_wav+0x548>
	while (szwav || fcb.ct >= 4) {
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
			btr = (szwav >= sz_work / 2) ? sz_work / 2 : szwav;
			f_read(fp, &buff[wi], btr, &br);
			if (br != btr) break;
			szwav -= br;
    7b2e:	48 1a       	sub	r4, r24
    7b30:	59 0a       	sbc	r5, r25
    7b32:	61 08       	sbc	r6, r1
    7b34:	71 08       	sbc	r7, r1
			wi = (wi + br) & (sz_work - 1);
    7b36:	e8 0e       	add	r14, r24
    7b38:	f9 1e       	adc	r15, r25
    7b3a:	ea 20       	and	r14, r10
    7b3c:	fb 20       	and	r15, r11
			cli();
    7b3e:	f8 94       	cli
			fcb.ct += br;
    7b40:	29 96       	adiw	r28, 0x09	; 9
    7b42:	8e ad       	ldd	r24, Y+62	; 0x3e
    7b44:	9f ad       	ldd	r25, Y+63	; 0x3f
    7b46:	29 97       	sbiw	r28, 0x09	; 9
    7b48:	2f 96       	adiw	r28, 0x0f	; 15
    7b4a:	2e ad       	ldd	r18, Y+62	; 0x3e
    7b4c:	3f ad       	ldd	r19, Y+63	; 0x3f
    7b4e:	2f 97       	sbiw	r28, 0x0f	; 15
    7b50:	82 0f       	add	r24, r18
    7b52:	93 1f       	adc	r25, r19
    7b54:	29 96       	adiw	r28, 0x09	; 9
    7b56:	8e af       	std	Y+62, r24	; 0x3e
    7b58:	9f af       	std	Y+63, r25	; 0x3f
    7b5a:	29 97       	sbiw	r28, 0x09	; 9
			sei();
    7b5c:	78 94       	sei
		//if (uart_test()) {		/* Exit if a command arrived */
		//	k = uart_getc();
		//	break;
		//}
		
		if (btn_check_press() == BTN2)
    7b5e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <btn_check_press>
    7b62:	82 30       	cpi	r24, 0x02	; 2
    7b64:	01 f3       	breq	.-64     	; 0x7b26 <load_wav+0x4b8>
		{
			break;
		}
		
		t = (f_tell(fp) - offw - fcb.ct) / fsmp / wsmp;	/* Refresh time display every 1 sec */
    7b66:	29 96       	adiw	r28, 0x09	; 9
    7b68:	8e ad       	ldd	r24, Y+62	; 0x3e
    7b6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    7b6c:	29 97       	sbiw	r28, 0x09	; 9
    7b6e:	a6 cf       	rjmp	.-180    	; 0x7abc <load_wav+0x44e>
	fcb.buff = buff;
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
    7b70:	04 97       	sbiw	r24, 0x04	; 4
    7b72:	a8 f7       	brcc	.-22     	; 0x7b5e <load_wav+0x4f0>
    7b74:	d8 cf       	rjmp	.-80     	; 0x7b26 <load_wav+0x4b8>
						p = nam; break;
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
					}
					if (p && ssz <= NBSIZE) {
						if (f_read(fp, p, ssz, &br) || br != ssz) return -1;
    7b76:	9e 01       	movw	r18, r28
    7b78:	23 5b       	subi	r18, 0xB3	; 179
    7b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    7b7c:	a4 01       	movw	r20, r8
    7b7e:	c8 01       	movw	r24, r16
    7b80:	0e 94 87 31 	call	0x630e	; 0x630e <f_read>
    7b84:	88 23       	and	r24, r24
    7b86:	51 f0       	breq	.+20     	; 0x7b9c <load_wav+0x52e>
				if (f_lseek(fp, sz)) return -1;	/* Skip unknown sub-chunk type */
			}
			break;

			default :	/* Unknown chunk */
			return -1;
    7b88:	8f ef       	ldi	r24, 0xFF	; 255
    7b8a:	9f ef       	ldi	r25, 0xFF	; 255
    7b8c:	14 c0       	rjmp	.+40     	; 0x7bb6 <load_wav+0x548>
					p = 0;
					switch (LD_DWORD(buff)) {
						case FCC('I','N','A','M'):		/* INAM sub-chunk */
						p = nam; break;
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
    7b8e:	62 96       	adiw	r28, 0x12	; 18
    7b90:	6f ad       	ldd	r22, Y+63	; 0x3f
    7b92:	62 97       	sbiw	r28, 0x12	; 18
    7b94:	63 96       	adiw	r28, 0x13	; 19
    7b96:	7f ad       	ldd	r23, Y+63	; 0x3f
    7b98:	63 97       	sbiw	r28, 0x13	; 19
    7b9a:	19 cf       	rjmp	.-462    	; 0x79ce <load_wav+0x360>
					}
					if (p && ssz <= NBSIZE) {
						if (f_read(fp, p, ssz, &br) || br != ssz) return -1;
    7b9c:	2f 96       	adiw	r28, 0x0f	; 15
    7b9e:	8e ad       	ldd	r24, Y+62	; 0x3e
    7ba0:	9f ad       	ldd	r25, Y+63	; 0x3f
    7ba2:	2f 97       	sbiw	r28, 0x0f	; 15
    7ba4:	a0 e0       	ldi	r26, 0x00	; 0
    7ba6:	b0 e0       	ldi	r27, 0x00	; 0
    7ba8:	88 15       	cp	r24, r8
    7baa:	99 05       	cpc	r25, r9
    7bac:	aa 05       	cpc	r26, r10
    7bae:	bb 05       	cpc	r27, r11
    7bb0:	09 f4       	brne	.+2      	; 0x7bb4 <load_wav+0x546>
    7bb2:	c8 ce       	rjmp	.-624    	; 0x7944 <load_wav+0x2d6>
    7bb4:	e9 cf       	rjmp	.-46     	; 0x7b88 <load_wav+0x51a>

	sound_stop();	/* Stop sound output */

	//xputc('\n');
	return k;	/* Terminated due to -1:error, 0:eot, >0:key code */
}
    7bb6:	cc 59       	subi	r28, 0x9C	; 156
    7bb8:	df 4f       	sbci	r29, 0xFF	; 255
    7bba:	cd bf       	out	0x3d, r28	; 61
    7bbc:	de bf       	out	0x3e, r29	; 62
    7bbe:	df 91       	pop	r29
    7bc0:	cf 91       	pop	r28
    7bc2:	1f 91       	pop	r17
    7bc4:	0f 91       	pop	r16
    7bc6:	ff 90       	pop	r15
    7bc8:	ef 90       	pop	r14
    7bca:	df 90       	pop	r13
    7bcc:	cf 90       	pop	r12
    7bce:	bf 90       	pop	r11
    7bd0:	af 90       	pop	r10
    7bd2:	9f 90       	pop	r9
    7bd4:	8f 90       	pop	r8
    7bd6:	7f 90       	pop	r7
    7bd8:	6f 90       	pop	r6
    7bda:	5f 90       	pop	r5
    7bdc:	4f 90       	pop	r4
    7bde:	3f 90       	pop	r3
    7be0:	2f 90       	pop	r2
    7be2:	08 95       	ret

00007be4 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
    7be4:	2f 92       	push	r2
    7be6:	3f 92       	push	r3
    7be8:	5f 92       	push	r5
    7bea:	6f 92       	push	r6
    7bec:	7f 92       	push	r7
    7bee:	8f 92       	push	r8
    7bf0:	9f 92       	push	r9
    7bf2:	bf 92       	push	r11
    7bf4:	cf 92       	push	r12
    7bf6:	df 92       	push	r13
    7bf8:	ef 92       	push	r14
    7bfa:	ff 92       	push	r15
    7bfc:	0f 93       	push	r16
    7bfe:	1f 93       	push	r17
    7c00:	cf 93       	push	r28
    7c02:	df 93       	push	r29
    7c04:	cd b7       	in	r28, 0x3d	; 61
    7c06:	de b7       	in	r29, 0x3e	; 62
    7c08:	26 97       	sbiw	r28, 0x06	; 6
    7c0a:	cd bf       	out	0x3d, r28	; 61
    7c0c:	de bf       	out	0x3e, r29	; 62
    7c0e:	8d 83       	std	Y+5, r24	; 0x05
    7c10:	9e 83       	std	Y+6, r25	; 0x06
    7c12:	1a 01       	movw	r2, r20
    7c14:	38 01       	movw	r6, r16
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;
    7c16:	80 e0       	ldi	r24, 0x00	; 0
    7c18:	90 e0       	ldi	r25, 0x00	; 0
			case ':':
				parser->toksuper = parser->toknext - 1;
				break;
			case ',':
				if (tokens != NULL &&
						tokens[parser->toksuper].type != JSMN_ARRAY &&
    7c1a:	47 e0       	ldi	r20, 0x07	; 7
    7c1c:	b4 2e       	mov	r11, r20
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
    7c1e:	0f ef       	ldi	r16, 0xFF	; 255
    7c20:	1f ef       	ldi	r17, 0xFF	; 255
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    7c22:	53 e0       	ldi	r21, 0x03	; 3
    7c24:	55 2e       	mov	r5, r21
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    7c26:	ad 81       	ldd	r26, Y+5	; 0x05
    7c28:	be 81       	ldd	r27, Y+6	; 0x06
    7c2a:	0d 90       	ld	r0, X+
    7c2c:	bc 91       	ld	r27, X
    7c2e:	a0 2d       	mov	r26, r0
    7c30:	ab 83       	std	Y+3, r26	; 0x03
    7c32:	bc 83       	std	Y+4, r27	; 0x04
    7c34:	a2 15       	cp	r26, r2
    7c36:	b3 05       	cpc	r27, r3
    7c38:	90 f0       	brcs	.+36     	; 0x7c5e <jsmn_parse+0x7a>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    7c3a:	ad 81       	ldd	r26, Y+5	; 0x05
    7c3c:	be 81       	ldd	r27, Y+6	; 0x06
    7c3e:	12 96       	adiw	r26, 0x02	; 2
    7c40:	ed 91       	ld	r30, X+
    7c42:	fc 91       	ld	r31, X
    7c44:	13 97       	sbiw	r26, 0x03	; 3
    7c46:	bf 01       	movw	r22, r30
    7c48:	61 50       	subi	r22, 0x01	; 1
    7c4a:	71 09       	sbc	r23, r1
    7c4c:	a7 e0       	ldi	r26, 0x07	; 7
    7c4e:	ae 9f       	mul	r26, r30
    7c50:	a0 01       	movw	r20, r0
    7c52:	af 9f       	mul	r26, r31
    7c54:	50 0d       	add	r21, r0
    7c56:	11 24       	eor	r1, r1
    7c58:	42 0f       	add	r20, r18
    7c5a:	53 1f       	adc	r21, r19
    7c5c:	93 c2       	rjmp	.+1318   	; 0x8184 <jsmn_parse+0x5a0>
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    7c5e:	eb 81       	ldd	r30, Y+3	; 0x03
    7c60:	fc 81       	ldd	r31, Y+4	; 0x04
    7c62:	e6 0f       	add	r30, r22
    7c64:	f7 1f       	adc	r31, r23
    7c66:	40 81       	ld	r20, Z
    7c68:	44 23       	and	r20, r20
    7c6a:	39 f3       	breq	.-50     	; 0x7c3a <jsmn_parse+0x56>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    7c6c:	4c 32       	cpi	r20, 0x2C	; 44
    7c6e:	09 f4       	brne	.+2      	; 0x7c72 <jsmn_parse+0x8e>
    7c70:	a2 c1       	rjmp	.+836    	; 0x7fb6 <jsmn_parse+0x3d2>
    7c72:	c8 f4       	brcc	.+50     	; 0x7ca6 <jsmn_parse+0xc2>
    7c74:	4d 30       	cpi	r20, 0x0D	; 13
    7c76:	09 f4       	brne	.+2      	; 0x7c7a <jsmn_parse+0x96>
    7c78:	72 c2       	rjmp	.+1252   	; 0x815e <jsmn_parse+0x57a>
    7c7a:	28 f4       	brcc	.+10     	; 0x7c86 <jsmn_parse+0xa2>
    7c7c:	49 50       	subi	r20, 0x09	; 9
    7c7e:	42 30       	cpi	r20, 0x02	; 2
    7c80:	08 f4       	brcc	.+2      	; 0x7c84 <jsmn_parse+0xa0>
    7c82:	6d c2       	rjmp	.+1242   	; 0x815e <jsmn_parse+0x57a>
    7c84:	00 c2       	rjmp	.+1024   	; 0x8086 <jsmn_parse+0x4a2>
    7c86:	40 32       	cpi	r20, 0x20	; 32
    7c88:	09 f4       	brne	.+2      	; 0x7c8c <jsmn_parse+0xa8>
    7c8a:	69 c2       	rjmp	.+1234   	; 0x815e <jsmn_parse+0x57a>
    7c8c:	42 32       	cpi	r20, 0x22	; 34
    7c8e:	09 f0       	breq	.+2      	; 0x7c92 <jsmn_parse+0xae>
    7c90:	fa c1       	rjmp	.+1012   	; 0x8086 <jsmn_parse+0x4a2>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
    7c92:	8b 80       	ldd	r8, Y+3	; 0x03
    7c94:	9c 80       	ldd	r9, Y+4	; 0x04
    7c96:	ff ef       	ldi	r31, 0xFF	; 255
    7c98:	8f 1a       	sub	r8, r31
    7c9a:	9f 0a       	sbc	r9, r31
    7c9c:	ad 81       	ldd	r26, Y+5	; 0x05
    7c9e:	be 81       	ldd	r27, Y+6	; 0x06
    7ca0:	8d 92       	st	X+, r8
    7ca2:	9c 92       	st	X, r9
    7ca4:	ce c0       	rjmp	.+412    	; 0x7e42 <jsmn_parse+0x25e>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    7ca6:	4d 35       	cpi	r20, 0x5D	; 93
    7ca8:	09 f4       	brne	.+2      	; 0x7cac <jsmn_parse+0xc8>
    7caa:	5f c0       	rjmp	.+190    	; 0x7d6a <jsmn_parse+0x186>
    7cac:	30 f4       	brcc	.+12     	; 0x7cba <jsmn_parse+0xd6>
    7cae:	4a 33       	cpi	r20, 0x3A	; 58
    7cb0:	09 f4       	brne	.+2      	; 0x7cb4 <jsmn_parse+0xd0>
    7cb2:	79 c1       	rjmp	.+754    	; 0x7fa6 <jsmn_parse+0x3c2>
    7cb4:	4b 35       	cpi	r20, 0x5B	; 91
    7cb6:	39 f0       	breq	.+14     	; 0x7cc6 <jsmn_parse+0xe2>
    7cb8:	e6 c1       	rjmp	.+972    	; 0x8086 <jsmn_parse+0x4a2>
    7cba:	4b 37       	cpi	r20, 0x7B	; 123
    7cbc:	21 f0       	breq	.+8      	; 0x7cc6 <jsmn_parse+0xe2>
    7cbe:	4d 37       	cpi	r20, 0x7D	; 125
    7cc0:	09 f4       	brne	.+2      	; 0x7cc4 <jsmn_parse+0xe0>
    7cc2:	53 c0       	rjmp	.+166    	; 0x7d6a <jsmn_parse+0x186>
    7cc4:	e0 c1       	rjmp	.+960    	; 0x8086 <jsmn_parse+0x4a2>
			case '{': case '[':
				count++;
    7cc6:	01 96       	adiw	r24, 0x01	; 1
				if (tokens == NULL) {
    7cc8:	21 15       	cp	r18, r1
    7cca:	31 05       	cpc	r19, r1
    7ccc:	09 f4       	brne	.+2      	; 0x7cd0 <jsmn_parse+0xec>
    7cce:	47 c2       	rjmp	.+1166   	; 0x815e <jsmn_parse+0x57a>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    7cd0:	ad 81       	ldd	r26, Y+5	; 0x05
    7cd2:	be 81       	ldd	r27, Y+6	; 0x06
    7cd4:	12 96       	adiw	r26, 0x02	; 2
    7cd6:	8d 90       	ld	r8, X+
    7cd8:	9c 90       	ld	r9, X
    7cda:	13 97       	sbiw	r26, 0x03	; 3
    7cdc:	86 14       	cp	r8, r6
    7cde:	97 04       	cpc	r9, r7
    7ce0:	08 f0       	brcs	.+2      	; 0x7ce4 <jsmn_parse+0x100>
    7ce2:	cf c0       	rjmp	.+414    	; 0x7e82 <jsmn_parse+0x29e>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    7ce4:	f4 01       	movw	r30, r8
    7ce6:	31 96       	adiw	r30, 0x01	; 1
    7ce8:	ad 81       	ldd	r26, Y+5	; 0x05
    7cea:	be 81       	ldd	r27, Y+6	; 0x06
    7cec:	12 96       	adiw	r26, 0x02	; 2
    7cee:	ed 93       	st	X+, r30
    7cf0:	fc 93       	st	X, r31
    7cf2:	13 97       	sbiw	r26, 0x03	; 3
    7cf4:	b8 9c       	mul	r11, r8
    7cf6:	f0 01       	movw	r30, r0
    7cf8:	b9 9c       	mul	r11, r9
    7cfa:	f0 0d       	add	r31, r0
    7cfc:	11 24       	eor	r1, r1
    7cfe:	e2 0f       	add	r30, r18
    7d00:	f3 1f       	adc	r31, r19
    7d02:	e9 83       	std	Y+1, r30	; 0x01
    7d04:	fa 83       	std	Y+2, r31	; 0x02
	tok->start = tok->end = -1;
    7d06:	03 83       	std	Z+3, r16	; 0x03
    7d08:	14 83       	std	Z+4, r17	; 0x04
    7d0a:	01 83       	std	Z+1, r16	; 0x01
    7d0c:	12 83       	std	Z+2, r17	; 0x02
	tok->size = 0;
    7d0e:	15 82       	std	Z+5, r1	; 0x05
    7d10:	16 82       	std	Z+6, r1	; 0x06
				count++;
				if (tokens == NULL) {
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
    7d12:	ef 2b       	or	r30, r31
    7d14:	09 f4       	brne	.+2      	; 0x7d18 <jsmn_parse+0x134>
    7d16:	b5 c0       	rjmp	.+362    	; 0x7e82 <jsmn_parse+0x29e>
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
    7d18:	14 96       	adiw	r26, 0x04	; 4
    7d1a:	ed 90       	ld	r14, X+
    7d1c:	fc 90       	ld	r15, X
    7d1e:	15 97       	sbiw	r26, 0x05	; 5
    7d20:	ff ef       	ldi	r31, 0xFF	; 255
    7d22:	ef 16       	cp	r14, r31
    7d24:	ff 06       	cpc	r15, r31
    7d26:	91 f0       	breq	.+36     	; 0x7d4c <jsmn_parse+0x168>
					tokens[parser->toksuper].size++;
    7d28:	be 9c       	mul	r11, r14
    7d2a:	60 01       	movw	r12, r0
    7d2c:	bf 9c       	mul	r11, r15
    7d2e:	d0 0c       	add	r13, r0
    7d30:	11 24       	eor	r1, r1
    7d32:	c2 0e       	add	r12, r18
    7d34:	d3 1e       	adc	r13, r19
    7d36:	d6 01       	movw	r26, r12
    7d38:	15 96       	adiw	r26, 0x05	; 5
    7d3a:	ed 90       	ld	r14, X+
    7d3c:	fc 90       	ld	r15, X
    7d3e:	16 97       	sbiw	r26, 0x06	; 6
    7d40:	bf ef       	ldi	r27, 0xFF	; 255
    7d42:	eb 1a       	sub	r14, r27
    7d44:	fb 0a       	sbc	r15, r27
    7d46:	f6 01       	movw	r30, r12
    7d48:	e5 82       	std	Z+5, r14	; 0x05
    7d4a:	f6 82       	std	Z+6, r15	; 0x06
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
    7d4c:	4b 37       	cpi	r20, 0x7B	; 123
    7d4e:	11 f4       	brne	.+4      	; 0x7d54 <jsmn_parse+0x170>
    7d50:	41 e0       	ldi	r20, 0x01	; 1
    7d52:	01 c0       	rjmp	.+2      	; 0x7d56 <jsmn_parse+0x172>
    7d54:	42 e0       	ldi	r20, 0x02	; 2
    7d56:	a9 81       	ldd	r26, Y+1	; 0x01
    7d58:	ba 81       	ldd	r27, Y+2	; 0x02
    7d5a:	4c 93       	st	X, r20
				token->start = parser->pos;
    7d5c:	eb 81       	ldd	r30, Y+3	; 0x03
    7d5e:	fc 81       	ldd	r31, Y+4	; 0x04
    7d60:	11 96       	adiw	r26, 0x01	; 1
    7d62:	ed 93       	st	X+, r30
    7d64:	fc 93       	st	X, r31
    7d66:	12 97       	sbiw	r26, 0x02	; 2
    7d68:	6b c1       	rjmp	.+726    	; 0x8040 <jsmn_parse+0x45c>
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
    7d6a:	21 15       	cp	r18, r1
    7d6c:	31 05       	cpc	r19, r1
    7d6e:	09 f4       	brne	.+2      	; 0x7d72 <jsmn_parse+0x18e>
    7d70:	f6 c1       	rjmp	.+1004   	; 0x815e <jsmn_parse+0x57a>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
    7d72:	4d 37       	cpi	r20, 0x7D	; 125
    7d74:	11 f4       	brne	.+4      	; 0x7d7a <jsmn_parse+0x196>
    7d76:	41 e0       	ldi	r20, 0x01	; 1
    7d78:	01 c0       	rjmp	.+2      	; 0x7d7c <jsmn_parse+0x198>
    7d7a:	42 e0       	ldi	r20, 0x02	; 2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    7d7c:	ed 81       	ldd	r30, Y+5	; 0x05
    7d7e:	fe 81       	ldd	r31, Y+6	; 0x06
    7d80:	c2 80       	ldd	r12, Z+2	; 0x02
    7d82:	d3 80       	ldd	r13, Z+3	; 0x03
    7d84:	76 01       	movw	r14, r12
    7d86:	f1 e0       	ldi	r31, 0x01	; 1
    7d88:	ef 1a       	sub	r14, r31
    7d8a:	f1 08       	sbc	r15, r1
    7d8c:	bc 9c       	mul	r11, r12
    7d8e:	f0 01       	movw	r30, r0
    7d90:	bd 9c       	mul	r11, r13
    7d92:	f0 0d       	add	r31, r0
    7d94:	11 24       	eor	r1, r1
    7d96:	37 97       	sbiw	r30, 0x07	; 7
    7d98:	e2 0f       	add	r30, r18
    7d9a:	f3 1f       	adc	r31, r19
    7d9c:	f7 fc       	sbrc	r15, 7
    7d9e:	1f c0       	rjmp	.+62     	; 0x7dde <jsmn_parse+0x1fa>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    7da0:	c1 80       	ldd	r12, Z+1	; 0x01
    7da2:	d2 80       	ldd	r13, Z+2	; 0x02
    7da4:	cd 20       	and	r12, r13
    7da6:	c0 94       	com	r12
    7da8:	a9 f0       	breq	.+42     	; 0x7dd4 <jsmn_parse+0x1f0>
    7daa:	c3 80       	ldd	r12, Z+3	; 0x03
    7dac:	d4 80       	ldd	r13, Z+4	; 0x04
    7dae:	af ef       	ldi	r26, 0xFF	; 255
    7db0:	ca 16       	cp	r12, r26
    7db2:	da 06       	cpc	r13, r26
    7db4:	79 f4       	brne	.+30     	; 0x7dd4 <jsmn_parse+0x1f0>
						if (token->type != type) {
    7db6:	90 80       	ld	r9, Z
    7db8:	94 12       	cpse	r9, r20
    7dba:	ee c1       	rjmp	.+988    	; 0x8198 <jsmn_parse+0x5b4>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
    7dbc:	ad 81       	ldd	r26, Y+5	; 0x05
    7dbe:	be 81       	ldd	r27, Y+6	; 0x06
    7dc0:	14 96       	adiw	r26, 0x04	; 4
    7dc2:	cd 92       	st	X+, r12
    7dc4:	dc 92       	st	X, r13
    7dc6:	15 97       	sbiw	r26, 0x05	; 5
						token->end = parser->pos + 1;
    7dc8:	ab 81       	ldd	r26, Y+3	; 0x03
    7dca:	bc 81       	ldd	r27, Y+4	; 0x04
    7dcc:	11 96       	adiw	r26, 0x01	; 1
    7dce:	a3 83       	std	Z+3, r26	; 0x03
    7dd0:	b4 83       	std	Z+4, r27	; 0x04
    7dd2:	0a c0       	rjmp	.+20     	; 0x7de8 <jsmn_parse+0x204>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    7dd4:	b1 e0       	ldi	r27, 0x01	; 1
    7dd6:	eb 1a       	sub	r14, r27
    7dd8:	f1 08       	sbc	r15, r1
    7dda:	37 97       	sbiw	r30, 0x07	; 7
    7ddc:	df cf       	rjmp	.-66     	; 0x7d9c <jsmn_parse+0x1b8>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
    7dde:	ef ef       	ldi	r30, 0xFF	; 255
    7de0:	ee 16       	cp	r14, r30
    7de2:	fe 06       	cpc	r15, r30
    7de4:	09 f4       	brne	.+2      	; 0x7de8 <jsmn_parse+0x204>
    7de6:	d8 c1       	rjmp	.+944    	; 0x8198 <jsmn_parse+0x5b4>
    7de8:	be 9c       	mul	r11, r14
    7dea:	d0 01       	movw	r26, r0
    7dec:	bf 9c       	mul	r11, r15
    7dee:	b0 0d       	add	r27, r0
    7df0:	11 24       	eor	r1, r1
    7df2:	a2 0f       	add	r26, r18
    7df4:	b3 1f       	adc	r27, r19
				for (; i >= 0; i--) {
    7df6:	f7 fc       	sbrc	r15, 7
    7df8:	b2 c1       	rjmp	.+868    	; 0x815e <jsmn_parse+0x57a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    7dfa:	11 96       	adiw	r26, 0x01	; 1
    7dfc:	ed 91       	ld	r30, X+
    7dfe:	fc 91       	ld	r31, X
    7e00:	12 97       	sbiw	r26, 0x02	; 2
    7e02:	31 96       	adiw	r30, 0x01	; 1
    7e04:	69 f0       	breq	.+26     	; 0x7e20 <jsmn_parse+0x23c>
    7e06:	13 96       	adiw	r26, 0x03	; 3
    7e08:	ed 91       	ld	r30, X+
    7e0a:	fc 91       	ld	r31, X
    7e0c:	14 97       	sbiw	r26, 0x04	; 4
    7e0e:	31 96       	adiw	r30, 0x01	; 1
    7e10:	39 f4       	brne	.+14     	; 0x7e20 <jsmn_parse+0x23c>
						parser->toksuper = i;
    7e12:	ad 81       	ldd	r26, Y+5	; 0x05
    7e14:	be 81       	ldd	r27, Y+6	; 0x06
    7e16:	14 96       	adiw	r26, 0x04	; 4
    7e18:	ed 92       	st	X+, r14
    7e1a:	fc 92       	st	X, r15
    7e1c:	15 97       	sbiw	r26, 0x05	; 5
						break;
    7e1e:	9f c1       	rjmp	.+830    	; 0x815e <jsmn_parse+0x57a>
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
				for (; i >= 0; i--) {
    7e20:	e1 e0       	ldi	r30, 0x01	; 1
    7e22:	ee 1a       	sub	r14, r30
    7e24:	f1 08       	sbc	r15, r1
    7e26:	17 97       	sbiw	r26, 0x07	; 7
    7e28:	e6 cf       	rjmp	.-52     	; 0x7df6 <jsmn_parse+0x212>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
    7e2a:	4c 35       	cpi	r20, 0x5C	; 92
    7e2c:	09 f4       	brne	.+2      	; 0x7e30 <jsmn_parse+0x24c>
    7e2e:	50 c0       	rjmp	.+160    	; 0x7ed0 <jsmn_parse+0x2ec>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    7e30:	ad 81       	ldd	r26, Y+5	; 0x05
    7e32:	be 81       	ldd	r27, Y+6	; 0x06
    7e34:	4d 91       	ld	r20, X+
    7e36:	5c 91       	ld	r21, X
    7e38:	11 97       	sbiw	r26, 0x01	; 1
    7e3a:	4f 5f       	subi	r20, 0xFF	; 255
    7e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    7e3e:	4d 93       	st	X+, r20
    7e40:	5c 93       	st	X, r21
    7e42:	ed 81       	ldd	r30, Y+5	; 0x05
    7e44:	fe 81       	ldd	r31, Y+6	; 0x06
    7e46:	e0 80       	ld	r14, Z
    7e48:	f1 80       	ldd	r15, Z+1	; 0x01
    7e4a:	e2 14       	cp	r14, r2
    7e4c:	f3 04       	cpc	r15, r3
    7e4e:	d8 f4       	brcc	.+54     	; 0x7e86 <jsmn_parse+0x2a2>
    7e50:	fb 01       	movw	r30, r22
    7e52:	ee 0d       	add	r30, r14
    7e54:	ff 1d       	adc	r31, r15
    7e56:	40 81       	ld	r20, Z
    7e58:	44 23       	and	r20, r20
    7e5a:	a9 f0       	breq	.+42     	; 0x7e86 <jsmn_parse+0x2a2>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
    7e5c:	42 32       	cpi	r20, 0x22	; 34
    7e5e:	29 f7       	brne	.-54     	; 0x7e2a <jsmn_parse+0x246>
			if (tokens == NULL) {
    7e60:	21 15       	cp	r18, r1
    7e62:	31 05       	cpc	r19, r1
    7e64:	09 f4       	brne	.+2      	; 0x7e68 <jsmn_parse+0x284>
    7e66:	5c c1       	rjmp	.+696    	; 0x8120 <jsmn_parse+0x53c>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    7e68:	ed 81       	ldd	r30, Y+5	; 0x05
    7e6a:	fe 81       	ldd	r31, Y+6	; 0x06
    7e6c:	c2 80       	ldd	r12, Z+2	; 0x02
    7e6e:	d3 80       	ldd	r13, Z+3	; 0x03
    7e70:	c6 14       	cp	r12, r6
    7e72:	d7 04       	cpc	r13, r7
    7e74:	78 f0       	brcs	.+30     	; 0x7e94 <jsmn_parse+0x2b0>
			if (tokens == NULL) {
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
    7e76:	eb 81       	ldd	r30, Y+3	; 0x03
    7e78:	fc 81       	ldd	r31, Y+4	; 0x04
    7e7a:	ad 81       	ldd	r26, Y+5	; 0x05
    7e7c:	be 81       	ldd	r27, Y+6	; 0x06
    7e7e:	ed 93       	st	X+, r30
    7e80:	fc 93       	st	X, r31
				return JSMN_ERROR_NOMEM;
    7e82:	8f ef       	ldi	r24, 0xFF	; 255
    7e84:	8c c1       	rjmp	.+792    	; 0x819e <jsmn_parse+0x5ba>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
    7e86:	eb 81       	ldd	r30, Y+3	; 0x03
    7e88:	fc 81       	ldd	r31, Y+4	; 0x04
    7e8a:	ad 81       	ldd	r26, Y+5	; 0x05
    7e8c:	be 81       	ldd	r27, Y+6	; 0x06
    7e8e:	ed 93       	st	X+, r30
    7e90:	fc 93       	st	X, r31
    7e92:	84 c1       	rjmp	.+776    	; 0x819c <jsmn_parse+0x5b8>
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    7e94:	a6 01       	movw	r20, r12
    7e96:	4f 5f       	subi	r20, 0xFF	; 255
    7e98:	5f 4f       	sbci	r21, 0xFF	; 255
    7e9a:	ad 81       	ldd	r26, Y+5	; 0x05
    7e9c:	be 81       	ldd	r27, Y+6	; 0x06
    7e9e:	12 96       	adiw	r26, 0x02	; 2
    7ea0:	4d 93       	st	X+, r20
    7ea2:	5c 93       	st	X, r21
    7ea4:	13 97       	sbiw	r26, 0x03	; 3
    7ea6:	bc 9c       	mul	r11, r12
    7ea8:	f0 01       	movw	r30, r0
    7eaa:	bd 9c       	mul	r11, r13
    7eac:	f0 0d       	add	r31, r0
    7eae:	11 24       	eor	r1, r1
    7eb0:	e2 0f       	add	r30, r18
    7eb2:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    7eb4:	03 83       	std	Z+3, r16	; 0x03
    7eb6:	14 83       	std	Z+4, r17	; 0x04
    7eb8:	01 83       	std	Z+1, r16	; 0x01
    7eba:	12 83       	std	Z+2, r17	; 0x02
	tok->size = 0;
    7ebc:	15 82       	std	Z+5, r1	; 0x05
    7ebe:	16 82       	std	Z+6, r1	; 0x06
		if (c == '\"') {
			if (tokens == NULL) {
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
    7ec0:	30 97       	sbiw	r30, 0x00	; 0
    7ec2:	c9 f2       	breq	.-78     	; 0x7e76 <jsmn_parse+0x292>
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    7ec4:	50 82       	st	Z, r5
	token->start = start;
    7ec6:	81 82       	std	Z+1, r8	; 0x01
    7ec8:	92 82       	std	Z+2, r9	; 0x02
	token->end = end;
    7eca:	e3 82       	std	Z+3, r14	; 0x03
    7ecc:	f4 82       	std	Z+4, r15	; 0x04
    7ece:	28 c1       	rjmp	.+592    	; 0x8120 <jsmn_parse+0x53c>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
    7ed0:	a7 01       	movw	r20, r14
    7ed2:	4f 5f       	subi	r20, 0xFF	; 255
    7ed4:	5f 4f       	sbci	r21, 0xFF	; 255
    7ed6:	42 15       	cp	r20, r2
    7ed8:	53 05       	cpc	r21, r3
    7eda:	08 f0       	brcs	.+2      	; 0x7ede <jsmn_parse+0x2fa>
    7edc:	a9 cf       	rjmp	.-174    	; 0x7e30 <jsmn_parse+0x24c>
			int i;
			parser->pos++;
    7ede:	ed 81       	ldd	r30, Y+5	; 0x05
    7ee0:	fe 81       	ldd	r31, Y+6	; 0x06
    7ee2:	40 83       	st	Z, r20
    7ee4:	51 83       	std	Z+1, r21	; 0x01
			switch (js[parser->pos]) {
    7ee6:	46 0f       	add	r20, r22
    7ee8:	57 1f       	adc	r21, r23
    7eea:	da 01       	movw	r26, r20
    7eec:	4c 91       	ld	r20, X
    7eee:	46 36       	cpi	r20, 0x66	; 102
    7ef0:	09 f4       	brne	.+2      	; 0x7ef4 <jsmn_parse+0x310>
    7ef2:	9e cf       	rjmp	.-196    	; 0x7e30 <jsmn_parse+0x24c>
    7ef4:	78 f4       	brcc	.+30     	; 0x7f14 <jsmn_parse+0x330>
    7ef6:	4f 32       	cpi	r20, 0x2F	; 47
    7ef8:	09 f4       	brne	.+2      	; 0x7efc <jsmn_parse+0x318>
    7efa:	9a cf       	rjmp	.-204    	; 0x7e30 <jsmn_parse+0x24c>
    7efc:	20 f4       	brcc	.+8      	; 0x7f06 <jsmn_parse+0x322>
    7efe:	42 32       	cpi	r20, 0x22	; 34
    7f00:	09 f0       	breq	.+2      	; 0x7f04 <jsmn_parse+0x320>
    7f02:	a5 c0       	rjmp	.+330    	; 0x804e <jsmn_parse+0x46a>
    7f04:	95 cf       	rjmp	.-214    	; 0x7e30 <jsmn_parse+0x24c>
    7f06:	4c 35       	cpi	r20, 0x5C	; 92
    7f08:	09 f4       	brne	.+2      	; 0x7f0c <jsmn_parse+0x328>
    7f0a:	92 cf       	rjmp	.-220    	; 0x7e30 <jsmn_parse+0x24c>
    7f0c:	42 36       	cpi	r20, 0x62	; 98
    7f0e:	09 f0       	breq	.+2      	; 0x7f12 <jsmn_parse+0x32e>
    7f10:	9e c0       	rjmp	.+316    	; 0x804e <jsmn_parse+0x46a>
    7f12:	8e cf       	rjmp	.-228    	; 0x7e30 <jsmn_parse+0x24c>
    7f14:	42 37       	cpi	r20, 0x72	; 114
    7f16:	09 f4       	brne	.+2      	; 0x7f1a <jsmn_parse+0x336>
    7f18:	8b cf       	rjmp	.-234    	; 0x7e30 <jsmn_parse+0x24c>
    7f1a:	20 f4       	brcc	.+8      	; 0x7f24 <jsmn_parse+0x340>
    7f1c:	4e 36       	cpi	r20, 0x6E	; 110
    7f1e:	09 f0       	breq	.+2      	; 0x7f22 <jsmn_parse+0x33e>
    7f20:	96 c0       	rjmp	.+300    	; 0x804e <jsmn_parse+0x46a>
    7f22:	86 cf       	rjmp	.-244    	; 0x7e30 <jsmn_parse+0x24c>
    7f24:	44 37       	cpi	r20, 0x74	; 116
    7f26:	09 f4       	brne	.+2      	; 0x7f2a <jsmn_parse+0x346>
    7f28:	83 cf       	rjmp	.-250    	; 0x7e30 <jsmn_parse+0x24c>
    7f2a:	45 37       	cpi	r20, 0x75	; 117
    7f2c:	09 f0       	breq	.+2      	; 0x7f30 <jsmn_parse+0x34c>
    7f2e:	8f c0       	rjmp	.+286    	; 0x804e <jsmn_parse+0x46a>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
    7f30:	b2 e0       	ldi	r27, 0x02	; 2
    7f32:	eb 0e       	add	r14, r27
    7f34:	f1 1c       	adc	r15, r1
    7f36:	ed 81       	ldd	r30, Y+5	; 0x05
    7f38:	fe 81       	ldd	r31, Y+6	; 0x06
    7f3a:	e0 82       	st	Z, r14
    7f3c:	f1 82       	std	Z+1, r15	; 0x01
    7f3e:	44 e0       	ldi	r20, 0x04	; 4
    7f40:	50 e0       	ldi	r21, 0x00	; 0
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    7f42:	ad 81       	ldd	r26, Y+5	; 0x05
    7f44:	be 81       	ldd	r27, Y+6	; 0x06
    7f46:	cd 90       	ld	r12, X+
    7f48:	dc 90       	ld	r13, X
    7f4a:	c2 14       	cp	r12, r2
    7f4c:	d3 04       	cpc	r13, r3
    7f4e:	48 f0       	brcs	.+18     	; 0x7f62 <jsmn_parse+0x37e>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
    7f50:	ed 81       	ldd	r30, Y+5	; 0x05
    7f52:	fe 81       	ldd	r31, Y+6	; 0x06
    7f54:	40 81       	ld	r20, Z
    7f56:	51 81       	ldd	r21, Z+1	; 0x01
    7f58:	41 50       	subi	r20, 0x01	; 1
    7f5a:	51 09       	sbc	r21, r1
    7f5c:	40 83       	st	Z, r20
    7f5e:	51 83       	std	Z+1, r21	; 0x01
    7f60:	67 cf       	rjmp	.-306    	; 0x7e30 <jsmn_parse+0x24c>
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    7f62:	fb 01       	movw	r30, r22
    7f64:	ec 0d       	add	r30, r12
    7f66:	fd 1d       	adc	r31, r13
    7f68:	e0 81       	ld	r30, Z
    7f6a:	ee 23       	and	r30, r30
    7f6c:	89 f3       	breq	.-30     	; 0x7f50 <jsmn_parse+0x36c>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
    7f6e:	f0 ed       	ldi	r31, 0xD0	; 208
    7f70:	fe 0f       	add	r31, r30
    7f72:	fa 30       	cpi	r31, 0x0A	; 10
    7f74:	58 f0       	brcs	.+22     	; 0x7f8c <jsmn_parse+0x3a8>
    7f76:	ef 7d       	andi	r30, 0xDF	; 223
    7f78:	e1 54       	subi	r30, 0x41	; 65
    7f7a:	e6 30       	cpi	r30, 0x06	; 6
    7f7c:	38 f0       	brcs	.+14     	; 0x7f8c <jsmn_parse+0x3a8>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
    7f7e:	eb 81       	ldd	r30, Y+3	; 0x03
    7f80:	fc 81       	ldd	r31, Y+4	; 0x04
    7f82:	ad 81       	ldd	r26, Y+5	; 0x05
    7f84:	be 81       	ldd	r27, Y+6	; 0x06
    7f86:	ed 93       	st	X+, r30
    7f88:	fc 93       	st	X, r31
    7f8a:	06 c1       	rjmp	.+524    	; 0x8198 <jsmn_parse+0x5b4>
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
    7f8c:	ff ef       	ldi	r31, 0xFF	; 255
    7f8e:	cf 1a       	sub	r12, r31
    7f90:	df 0a       	sbc	r13, r31
    7f92:	ad 81       	ldd	r26, Y+5	; 0x05
    7f94:	be 81       	ldd	r27, Y+6	; 0x06
    7f96:	cd 92       	st	X+, r12
    7f98:	dc 92       	st	X, r13
    7f9a:	41 50       	subi	r20, 0x01	; 1
    7f9c:	51 09       	sbc	r21, r1
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    7f9e:	41 15       	cp	r20, r1
    7fa0:	51 05       	cpc	r21, r1
    7fa2:	79 f6       	brne	.-98     	; 0x7f42 <jsmn_parse+0x35e>
    7fa4:	d5 cf       	rjmp	.-86     	; 0x7f50 <jsmn_parse+0x36c>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
    7fa6:	ed 81       	ldd	r30, Y+5	; 0x05
    7fa8:	fe 81       	ldd	r31, Y+6	; 0x06
    7faa:	a2 81       	ldd	r26, Z+2	; 0x02
    7fac:	b3 81       	ldd	r27, Z+3	; 0x03
    7fae:	11 97       	sbiw	r26, 0x01	; 1
    7fb0:	a4 83       	std	Z+4, r26	; 0x04
    7fb2:	b5 83       	std	Z+5, r27	; 0x05
				break;
    7fb4:	d4 c0       	rjmp	.+424    	; 0x815e <jsmn_parse+0x57a>
			case ',':
				if (tokens != NULL &&
    7fb6:	21 15       	cp	r18, r1
    7fb8:	31 05       	cpc	r19, r1
    7fba:	09 f4       	brne	.+2      	; 0x7fbe <jsmn_parse+0x3da>
    7fbc:	d0 c0       	rjmp	.+416    	; 0x815e <jsmn_parse+0x57a>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
    7fbe:	ad 81       	ldd	r26, Y+5	; 0x05
    7fc0:	be 81       	ldd	r27, Y+6	; 0x06
    7fc2:	14 96       	adiw	r26, 0x04	; 4
    7fc4:	4d 91       	ld	r20, X+
    7fc6:	5c 91       	ld	r21, X
    7fc8:	15 97       	sbiw	r26, 0x05	; 5
    7fca:	b4 9e       	mul	r11, r20
    7fcc:	d0 01       	movw	r26, r0
    7fce:	b5 9e       	mul	r11, r21
    7fd0:	b0 0d       	add	r27, r0
    7fd2:	11 24       	eor	r1, r1
    7fd4:	a2 0f       	add	r26, r18
    7fd6:	b3 1f       	adc	r27, r19
    7fd8:	ac 91       	ld	r26, X
    7fda:	a1 50       	subi	r26, 0x01	; 1
    7fdc:	a2 30       	cpi	r26, 0x02	; 2
    7fde:	08 f4       	brcc	.+2      	; 0x7fe2 <jsmn_parse+0x3fe>
    7fe0:	be c0       	rjmp	.+380    	; 0x815e <jsmn_parse+0x57a>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
    7fe2:	ed 81       	ldd	r30, Y+5	; 0x05
    7fe4:	fe 81       	ldd	r31, Y+6	; 0x06
    7fe6:	e2 80       	ldd	r14, Z+2	; 0x02
    7fe8:	f3 80       	ldd	r15, Z+3	; 0x03
    7fea:	47 01       	movw	r8, r14
    7fec:	f1 e0       	ldi	r31, 0x01	; 1
    7fee:	8f 1a       	sub	r8, r31
    7ff0:	91 08       	sbc	r9, r1
    7ff2:	be 9c       	mul	r11, r14
    7ff4:	d0 01       	movw	r26, r0
    7ff6:	bf 9c       	mul	r11, r15
    7ff8:	b0 0d       	add	r27, r0
    7ffa:	11 24       	eor	r1, r1
    7ffc:	a2 0f       	add	r26, r18
    7ffe:	b3 1f       	adc	r27, r19
    8000:	04 c0       	rjmp	.+8      	; 0x800a <jsmn_parse+0x426>
    8002:	b1 e0       	ldi	r27, 0x01	; 1
    8004:	8b 1a       	sub	r8, r27
    8006:	91 08       	sbc	r9, r1
    8008:	d6 01       	movw	r26, r12
    800a:	97 fc       	sbrc	r9, 7
    800c:	a8 c0       	rjmp	.+336    	; 0x815e <jsmn_parse+0x57a>
    800e:	6d 01       	movw	r12, r26
    8010:	47 e0       	ldi	r20, 0x07	; 7
    8012:	c4 1a       	sub	r12, r20
    8014:	d1 08       	sbc	r13, r1
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
    8016:	f6 01       	movw	r30, r12
    8018:	40 81       	ld	r20, Z
    801a:	41 50       	subi	r20, 0x01	; 1
    801c:	42 30       	cpi	r20, 0x02	; 2
    801e:	88 f7       	brcc	.-30     	; 0x8002 <jsmn_parse+0x41e>
    8020:	7d 01       	movw	r14, r26
    8022:	f6 e0       	ldi	r31, 0x06	; 6
    8024:	ef 1a       	sub	r14, r31
    8026:	f1 08       	sbc	r15, r1
							if (tokens[i].start != -1 && tokens[i].end == -1) {
    8028:	f7 01       	movw	r30, r14
    802a:	e0 80       	ld	r14, Z
    802c:	f1 80       	ldd	r15, Z+1	; 0x01
    802e:	ef 20       	and	r14, r15
    8030:	e0 94       	com	r14
    8032:	39 f3       	breq	.-50     	; 0x8002 <jsmn_parse+0x41e>
    8034:	14 97       	sbiw	r26, 0x04	; 4
    8036:	0d 90       	ld	r0, X+
    8038:	bc 91       	ld	r27, X
    803a:	a0 2d       	mov	r26, r0
    803c:	11 96       	adiw	r26, 0x01	; 1
    803e:	09 f7       	brne	.-62     	; 0x8002 <jsmn_parse+0x41e>
								parser->toksuper = i;
    8040:	ad 81       	ldd	r26, Y+5	; 0x05
    8042:	be 81       	ldd	r27, Y+6	; 0x06
    8044:	14 96       	adiw	r26, 0x04	; 4
    8046:	8d 92       	st	X+, r8
    8048:	9c 92       	st	X, r9
    804a:	15 97       	sbiw	r26, 0x05	; 5
								break;
    804c:	88 c0       	rjmp	.+272    	; 0x815e <jsmn_parse+0x57a>
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
			parser->pos = start;
    804e:	eb 80       	ldd	r14, Y+3	; 0x03
    8050:	fc 80       	ldd	r15, Y+4	; 0x04
    8052:	ed 81       	ldd	r30, Y+5	; 0x05
    8054:	fe 81       	ldd	r31, Y+6	; 0x06
    8056:	e0 82       	st	Z, r14
    8058:	f1 82       	std	Z+1, r15	; 0x01
    805a:	9e c0       	rjmp	.+316    	; 0x8198 <jsmn_parse+0x5b4>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    805c:	fb 01       	movw	r30, r22
    805e:	ee 0d       	add	r30, r14
    8060:	ff 1d       	adc	r31, r15
    8062:	40 81       	ld	r20, Z
    8064:	44 23       	and	r20, r20
    8066:	31 f1       	breq	.+76     	; 0x80b4 <jsmn_parse+0x4d0>
		switch (js[parser->pos]) {
    8068:	40 32       	cpi	r20, 0x20	; 32
    806a:	21 f1       	breq	.+72     	; 0x80b4 <jsmn_parse+0x4d0>
    806c:	c8 f4       	brcc	.+50     	; 0x80a0 <jsmn_parse+0x4bc>
    806e:	49 30       	cpi	r20, 0x09	; 9
    8070:	90 f4       	brcc	.+36     	; 0x8096 <jsmn_parse+0x4b2>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
    8072:	40 52       	subi	r20, 0x20	; 32
    8074:	4f 35       	cpi	r20, 0x5F	; 95
    8076:	58 f7       	brcc	.-42     	; 0x804e <jsmn_parse+0x46a>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    8078:	4f ef       	ldi	r20, 0xFF	; 255
    807a:	e4 1a       	sub	r14, r20
    807c:	f4 0a       	sbc	r15, r20
    807e:	ad 81       	ldd	r26, Y+5	; 0x05
    8080:	be 81       	ldd	r27, Y+6	; 0x06
    8082:	ed 92       	st	X+, r14
    8084:	fc 92       	st	X, r15
    8086:	ed 81       	ldd	r30, Y+5	; 0x05
    8088:	fe 81       	ldd	r31, Y+6	; 0x06
    808a:	e0 80       	ld	r14, Z
    808c:	f1 80       	ldd	r15, Z+1	; 0x01
    808e:	e2 14       	cp	r14, r2
    8090:	f3 04       	cpc	r15, r3
    8092:	20 f3       	brcs	.-56     	; 0x805c <jsmn_parse+0x478>
    8094:	0f c0       	rjmp	.+30     	; 0x80b4 <jsmn_parse+0x4d0>
		switch (js[parser->pos]) {
    8096:	4b 30       	cpi	r20, 0x0B	; 11
    8098:	68 f0       	brcs	.+26     	; 0x80b4 <jsmn_parse+0x4d0>
    809a:	4d 30       	cpi	r20, 0x0D	; 13
    809c:	51 f7       	brne	.-44     	; 0x8072 <jsmn_parse+0x48e>
    809e:	0a c0       	rjmp	.+20     	; 0x80b4 <jsmn_parse+0x4d0>
    80a0:	4a 33       	cpi	r20, 0x3A	; 58
    80a2:	41 f0       	breq	.+16     	; 0x80b4 <jsmn_parse+0x4d0>
    80a4:	18 f4       	brcc	.+6      	; 0x80ac <jsmn_parse+0x4c8>
    80a6:	4c 32       	cpi	r20, 0x2C	; 44
    80a8:	21 f7       	brne	.-56     	; 0x8072 <jsmn_parse+0x48e>
    80aa:	04 c0       	rjmp	.+8      	; 0x80b4 <jsmn_parse+0x4d0>
    80ac:	4d 35       	cpi	r20, 0x5D	; 93
    80ae:	11 f0       	breq	.+4      	; 0x80b4 <jsmn_parse+0x4d0>
    80b0:	4d 37       	cpi	r20, 0x7D	; 125
    80b2:	f9 f6       	brne	.-66     	; 0x8072 <jsmn_parse+0x48e>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
    80b4:	21 15       	cp	r18, r1
    80b6:	31 05       	cpc	r19, r1
    80b8:	31 f4       	brne	.+12     	; 0x80c6 <jsmn_parse+0x4e2>
		parser->pos--;
    80ba:	f1 e0       	ldi	r31, 0x01	; 1
    80bc:	ef 1a       	sub	r14, r31
    80be:	f1 08       	sbc	r15, r1
    80c0:	ad 81       	ldd	r26, Y+5	; 0x05
    80c2:	be 81       	ldd	r27, Y+6	; 0x06
    80c4:	2b c0       	rjmp	.+86     	; 0x811c <jsmn_parse+0x538>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    80c6:	ed 81       	ldd	r30, Y+5	; 0x05
    80c8:	fe 81       	ldd	r31, Y+6	; 0x06
    80ca:	c2 80       	ldd	r12, Z+2	; 0x02
    80cc:	d3 80       	ldd	r13, Z+3	; 0x03
    80ce:	c6 14       	cp	r12, r6
    80d0:	d7 04       	cpc	r13, r7
    80d2:	08 f0       	brcs	.+2      	; 0x80d6 <jsmn_parse+0x4f2>
    80d4:	d0 ce       	rjmp	.-608    	; 0x7e76 <jsmn_parse+0x292>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    80d6:	a6 01       	movw	r20, r12
    80d8:	4f 5f       	subi	r20, 0xFF	; 255
    80da:	5f 4f       	sbci	r21, 0xFF	; 255
    80dc:	ad 81       	ldd	r26, Y+5	; 0x05
    80de:	be 81       	ldd	r27, Y+6	; 0x06
    80e0:	12 96       	adiw	r26, 0x02	; 2
    80e2:	4d 93       	st	X+, r20
    80e4:	5c 93       	st	X, r21
    80e6:	13 97       	sbiw	r26, 0x03	; 3
    80e8:	bc 9c       	mul	r11, r12
    80ea:	f0 01       	movw	r30, r0
    80ec:	bd 9c       	mul	r11, r13
    80ee:	f0 0d       	add	r31, r0
    80f0:	11 24       	eor	r1, r1
    80f2:	e2 0f       	add	r30, r18
    80f4:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    80f6:	03 83       	std	Z+3, r16	; 0x03
    80f8:	14 83       	std	Z+4, r17	; 0x04
    80fa:	01 83       	std	Z+1, r16	; 0x01
    80fc:	12 83       	std	Z+2, r17	; 0x02
	tok->size = 0;
    80fe:	15 82       	std	Z+5, r1	; 0x05
    8100:	16 82       	std	Z+6, r1	; 0x06
	if (tokens == NULL) {
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
    8102:	30 97       	sbiw	r30, 0x00	; 0
    8104:	09 f4       	brne	.+2      	; 0x8108 <jsmn_parse+0x524>
    8106:	b7 ce       	rjmp	.-658    	; 0x7e76 <jsmn_parse+0x292>
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    8108:	10 82       	st	Z, r1
	token->start = start;
    810a:	4b 81       	ldd	r20, Y+3	; 0x03
    810c:	5c 81       	ldd	r21, Y+4	; 0x04
    810e:	41 83       	std	Z+1, r20	; 0x01
    8110:	52 83       	std	Z+2, r21	; 0x02
	token->end = end;
    8112:	e3 82       	std	Z+3, r14	; 0x03
    8114:	f4 82       	std	Z+4, r15	; 0x04
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
    8116:	51 e0       	ldi	r21, 0x01	; 1
    8118:	e5 1a       	sub	r14, r21
    811a:	f1 08       	sbc	r15, r1
    811c:	ed 92       	st	X+, r14
    811e:	fc 92       	st	X, r15
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    8120:	01 96       	adiw	r24, 0x01	; 1
				if (parser->toksuper != -1 && tokens != NULL)
    8122:	ad 81       	ldd	r26, Y+5	; 0x05
    8124:	be 81       	ldd	r27, Y+6	; 0x06
    8126:	14 96       	adiw	r26, 0x04	; 4
    8128:	ed 91       	ld	r30, X+
    812a:	fc 91       	ld	r31, X
    812c:	15 97       	sbiw	r26, 0x05	; 5
    812e:	ef 3f       	cpi	r30, 0xFF	; 255
    8130:	bf ef       	ldi	r27, 0xFF	; 255
    8132:	fb 07       	cpc	r31, r27
    8134:	a1 f0       	breq	.+40     	; 0x815e <jsmn_parse+0x57a>
    8136:	21 15       	cp	r18, r1
    8138:	31 05       	cpc	r19, r1
    813a:	89 f0       	breq	.+34     	; 0x815e <jsmn_parse+0x57a>
					tokens[parser->toksuper].size++;
    813c:	be 9e       	mul	r11, r30
    813e:	d0 01       	movw	r26, r0
    8140:	bf 9e       	mul	r11, r31
    8142:	b0 0d       	add	r27, r0
    8144:	11 24       	eor	r1, r1
    8146:	a2 0f       	add	r26, r18
    8148:	b3 1f       	adc	r27, r19
    814a:	15 96       	adiw	r26, 0x05	; 5
    814c:	4d 91       	ld	r20, X+
    814e:	5c 91       	ld	r21, X
    8150:	16 97       	sbiw	r26, 0x06	; 6
    8152:	4f 5f       	subi	r20, 0xFF	; 255
    8154:	5f 4f       	sbci	r21, 0xFF	; 255
    8156:	15 96       	adiw	r26, 0x05	; 5
    8158:	4d 93       	st	X+, r20
    815a:	5c 93       	st	X, r21
    815c:	16 97       	sbiw	r26, 0x06	; 6
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    815e:	ed 81       	ldd	r30, Y+5	; 0x05
    8160:	fe 81       	ldd	r31, Y+6	; 0x06
    8162:	a0 81       	ld	r26, Z
    8164:	b1 81       	ldd	r27, Z+1	; 0x01
    8166:	11 96       	adiw	r26, 0x01	; 1
    8168:	a0 83       	st	Z, r26
    816a:	b1 83       	std	Z+1, r27	; 0x01
    816c:	5c cd       	rjmp	.-1352   	; 0x7c26 <jsmn_parse+0x42>
    816e:	fa 01       	movw	r30, r20
    8170:	36 97       	sbiw	r30, 0x06	; 6
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
    8172:	20 81       	ld	r18, Z
    8174:	31 81       	ldd	r19, Z+1	; 0x01
    8176:	2f 3f       	cpi	r18, 0xFF	; 255
    8178:	3f 4f       	sbci	r19, 0xFF	; 255
    817a:	39 f4       	brne	.+14     	; 0x818a <jsmn_parse+0x5a6>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    817c:	61 50       	subi	r22, 0x01	; 1
    817e:	71 09       	sbc	r23, r1
    8180:	47 50       	subi	r20, 0x07	; 7
    8182:	51 09       	sbc	r21, r1
    8184:	77 ff       	sbrs	r23, 7
    8186:	f3 cf       	rjmp	.-26     	; 0x816e <jsmn_parse+0x58a>
    8188:	0a c0       	rjmp	.+20     	; 0x819e <jsmn_parse+0x5ba>
    818a:	32 96       	adiw	r30, 0x02	; 2
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
    818c:	20 81       	ld	r18, Z
    818e:	31 81       	ldd	r19, Z+1	; 0x01
    8190:	2f 3f       	cpi	r18, 0xFF	; 255
    8192:	3f 4f       	sbci	r19, 0xFF	; 255
    8194:	99 f7       	brne	.-26     	; 0x817c <jsmn_parse+0x598>
    8196:	02 c0       	rjmp	.+4      	; 0x819c <jsmn_parse+0x5b8>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
    8198:	8e ef       	ldi	r24, 0xFE	; 254
    819a:	01 c0       	rjmp	.+2      	; 0x819e <jsmn_parse+0x5ba>
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
			return JSMN_ERROR_PART;
    819c:	8d ef       	ldi	r24, 0xFD	; 253
		}
	}

	return count;
}
    819e:	26 96       	adiw	r28, 0x06	; 6
    81a0:	cd bf       	out	0x3d, r28	; 61
    81a2:	de bf       	out	0x3e, r29	; 62
    81a4:	df 91       	pop	r29
    81a6:	cf 91       	pop	r28
    81a8:	1f 91       	pop	r17
    81aa:	0f 91       	pop	r16
    81ac:	ff 90       	pop	r15
    81ae:	ef 90       	pop	r14
    81b0:	df 90       	pop	r13
    81b2:	cf 90       	pop	r12
    81b4:	bf 90       	pop	r11
    81b6:	9f 90       	pop	r9
    81b8:	8f 90       	pop	r8
    81ba:	7f 90       	pop	r7
    81bc:	6f 90       	pop	r6
    81be:	5f 90       	pop	r5
    81c0:	3f 90       	pop	r3
    81c2:	2f 90       	pop	r2
    81c4:	08 95       	ret

000081c6 <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
    81c6:	fc 01       	movw	r30, r24
	parser->pos = 0;
    81c8:	10 82       	st	Z, r1
    81ca:	11 82       	std	Z+1, r1	; 0x01
	parser->toknext = 0;
    81cc:	12 82       	std	Z+2, r1	; 0x02
    81ce:	13 82       	std	Z+3, r1	; 0x03
	parser->toksuper = -1;
    81d0:	8f ef       	ldi	r24, 0xFF	; 255
    81d2:	9f ef       	ldi	r25, 0xFF	; 255
    81d4:	84 83       	std	Z+4, r24	; 0x04
    81d6:	95 83       	std	Z+5, r25	; 0x05
    81d8:	08 95       	ret

000081da <json_get_token>:
 *  Author: Administrator
 */ 

#include "json_functions.h"

void json_get_token(jsmntok_t *tokens, char *js, char *buffer, uint8_t buffer_size, uint8_t i) {
    81da:	af 92       	push	r10
    81dc:	bf 92       	push	r11
    81de:	cf 92       	push	r12
    81e0:	df 92       	push	r13
    81e2:	ef 92       	push	r14
    81e4:	ff 92       	push	r15
    81e6:	0f 93       	push	r16
    81e8:	1f 93       	push	r17
    81ea:	cf 93       	push	r28
    81ec:	df 93       	push	r29
    81ee:	cd b7       	in	r28, 0x3d	; 61
    81f0:	de b7       	in	r29, 0x3e	; 62
    81f2:	6a 01       	movw	r12, r20
		memcpy( keyString, &js[ key.start ], len );
		keyString[ len ] = '\0';
		
		strcpy(buffer,keyString);
	}
}
    81f4:	ad b6       	in	r10, 0x3d	; 61
    81f6:	be b6       	in	r11, 0x3e	; 62

void json_get_token(jsmntok_t *tokens, char *js, char *buffer, uint8_t buffer_size, uint8_t i) {
	int len;
	jsmntok_t key;

	key = tokens[i];
    81f8:	dc 01       	movw	r26, r24
    81fa:	37 e0       	ldi	r19, 0x07	; 7
    81fc:	03 9f       	mul	r16, r19
    81fe:	a0 0d       	add	r26, r0
    8200:	b1 1d       	adc	r27, r1
    8202:	11 24       	eor	r1, r1
    8204:	11 96       	adiw	r26, 0x01	; 1
    8206:	ed 91       	ld	r30, X+
    8208:	fc 91       	ld	r31, X
    820a:	12 97       	sbiw	r26, 0x02	; 2
	len = key.end - key.start;
    820c:	13 96       	adiw	r26, 0x03	; 3
    820e:	0d 91       	ld	r16, X+
    8210:	1c 91       	ld	r17, X
    8212:	14 97       	sbiw	r26, 0x04	; 4
    8214:	0e 1b       	sub	r16, r30
    8216:	1f 0b       	sbc	r17, r31
	char keyString[ len+1 ];
    8218:	c8 01       	movw	r24, r16
    821a:	01 96       	adiw	r24, 0x01	; 1
    821c:	4d b7       	in	r20, 0x3d	; 61
    821e:	5e b7       	in	r21, 0x3e	; 62
    8220:	48 1b       	sub	r20, r24
    8222:	59 0b       	sbc	r21, r25
    8224:	4d bf       	out	0x3d, r20	; 61
    8226:	5e bf       	out	0x3e, r21	; 62
    8228:	8d b7       	in	r24, 0x3d	; 61
    822a:	9e b7       	in	r25, 0x3e	; 62
    822c:	01 96       	adiw	r24, 0x01	; 1
    822e:	7c 01       	movw	r14, r24
	if (len < buffer_size) {
    8230:	30 e0       	ldi	r19, 0x00	; 0
    8232:	02 17       	cp	r16, r18
    8234:	13 07       	cpc	r17, r19
    8236:	6c f4       	brge	.+26     	; 0x8252 <json_get_token+0x78>
		memcpy( keyString, &js[ key.start ], len );
    8238:	6e 0f       	add	r22, r30
    823a:	7f 1f       	adc	r23, r31
    823c:	a8 01       	movw	r20, r16
    823e:	0e 94 48 50 	call	0xa090	; 0xa090 <memcpy>
		keyString[ len ] = '\0';
    8242:	f7 01       	movw	r30, r14
    8244:	e0 0f       	add	r30, r16
    8246:	f1 1f       	adc	r31, r17
    8248:	10 82       	st	Z, r1
		
		strcpy(buffer,keyString);
    824a:	b7 01       	movw	r22, r14
    824c:	c6 01       	movw	r24, r12
    824e:	0e 94 6e 50 	call	0xa0dc	; 0xa0dc <strcpy>
	}
}
    8252:	ad be       	out	0x3d, r10	; 61
    8254:	be be       	out	0x3e, r11	; 62
    8256:	df 91       	pop	r29
    8258:	cf 91       	pop	r28
    825a:	1f 91       	pop	r17
    825c:	0f 91       	pop	r16
    825e:	ff 90       	pop	r15
    8260:	ef 90       	pop	r14
    8262:	df 90       	pop	r13
    8264:	cf 90       	pop	r12
    8266:	bf 90       	pop	r11
    8268:	af 90       	pop	r10
    826a:	08 95       	ret

0000826c <itoa_simple>:

void stop_wifi_indication(void)
{
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
	display_clear_screen();
	PR.PRPC |= 0x01;
    826c:	8f 92       	push	r8
    826e:	9f 92       	push	r9
    8270:	af 92       	push	r10
    8272:	bf 92       	push	r11
    8274:	cf 92       	push	r12
    8276:	df 92       	push	r13
    8278:	ef 92       	push	r14
    827a:	ff 92       	push	r15
    827c:	0f 93       	push	r16
    827e:	1f 93       	push	r17
    8280:	cf 93       	push	r28
    8282:	df 93       	push	r29
    8284:	8c 01       	movw	r16, r24
    8286:	77 fd       	sbrc	r23, 7
    8288:	04 c0       	rjmp	.+8      	; 0x8292 <itoa_simple+0x26>
    828a:	cb 01       	movw	r24, r22
    828c:	ba 01       	movw	r22, r20
    828e:	e8 01       	movw	r28, r16
    8290:	0e c0       	rjmp	.+28     	; 0x82ae <itoa_simple+0x42>
    8292:	6a 01       	movw	r12, r20
    8294:	7b 01       	movw	r14, r22
    8296:	66 27       	eor	r22, r22
    8298:	77 27       	eor	r23, r23
    829a:	cb 01       	movw	r24, r22
    829c:	6c 19       	sub	r22, r12
    829e:	7d 09       	sbc	r23, r13
    82a0:	8e 09       	sbc	r24, r14
    82a2:	9f 09       	sbc	r25, r15
    82a4:	e8 01       	movw	r28, r16
    82a6:	21 96       	adiw	r28, 0x01	; 1
    82a8:	2d e2       	ldi	r18, 0x2D	; 45
    82aa:	f8 01       	movw	r30, r16
    82ac:	20 83       	st	Z, r18
    82ae:	6e 01       	movw	r12, r28
    82b0:	2a e0       	ldi	r18, 0x0A	; 10
    82b2:	82 2e       	mov	r8, r18
    82b4:	91 2c       	mov	r9, r1
    82b6:	a1 2c       	mov	r10, r1
    82b8:	b1 2c       	mov	r11, r1
    82ba:	76 01       	movw	r14, r12
    82bc:	ff ef       	ldi	r31, 0xFF	; 255
    82be:	ef 1a       	sub	r14, r31
    82c0:	ff 0a       	sbc	r15, r31
    82c2:	a5 01       	movw	r20, r10
    82c4:	94 01       	movw	r18, r8
    82c6:	0e 94 be 4e 	call	0x9d7c	; 0x9d7c <__udivmodsi4>
    82ca:	60 5d       	subi	r22, 0xD0	; 208
    82cc:	f6 01       	movw	r30, r12
    82ce:	60 83       	st	Z, r22
    82d0:	b9 01       	movw	r22, r18
    82d2:	ca 01       	movw	r24, r20
    82d4:	61 15       	cp	r22, r1
    82d6:	71 05       	cpc	r23, r1
    82d8:	81 05       	cpc	r24, r1
    82da:	91 05       	cpc	r25, r1
    82dc:	11 f0       	breq	.+4      	; 0x82e2 <itoa_simple+0x76>
    82de:	67 01       	movw	r12, r14
    82e0:	ec cf       	rjmp	.-40     	; 0x82ba <itoa_simple+0x4e>
    82e2:	d7 01       	movw	r26, r14
    82e4:	ac 1b       	sub	r26, r28
    82e6:	bd 0b       	sbc	r27, r29
    82e8:	cd 01       	movw	r24, r26
    82ea:	01 97       	sbiw	r24, 0x01	; 1
    82ec:	ac 0f       	add	r26, r28
    82ee:	bd 1f       	adc	r27, r29
    82f0:	fe 01       	movw	r30, r28
    82f2:	9f 01       	movw	r18, r30
    82f4:	2c 1b       	sub	r18, r28
    82f6:	3d 0b       	sbc	r19, r29
    82f8:	28 17       	cp	r18, r24
    82fa:	39 07       	cpc	r19, r25
    82fc:	34 f4       	brge	.+12     	; 0x830a <itoa_simple+0x9e>
    82fe:	20 81       	ld	r18, Z
    8300:	3e 91       	ld	r19, -X
    8302:	31 93       	st	Z+, r19
    8304:	2c 93       	st	X, r18
    8306:	01 97       	sbiw	r24, 0x01	; 1
    8308:	f4 cf       	rjmp	.-24     	; 0x82f2 <itoa_simple+0x86>
    830a:	c7 01       	movw	r24, r14
    830c:	80 1b       	sub	r24, r16
    830e:	91 0b       	sbc	r25, r17
    8310:	df 91       	pop	r29
    8312:	cf 91       	pop	r28
    8314:	1f 91       	pop	r17
    8316:	0f 91       	pop	r16
    8318:	ff 90       	pop	r15
    831a:	ef 90       	pop	r14
    831c:	df 90       	pop	r13
    831e:	cf 90       	pop	r12
    8320:	bf 90       	pop	r11
    8322:	af 90       	pop	r10
    8324:	9f 90       	pop	r9
    8326:	8f 90       	pop	r8
    8328:	08 95       	ret

0000832a <play_sound>:
    832a:	cf 93       	push	r28
    832c:	df 93       	push	r29
    832e:	cd b7       	in	r28, 0x3d	; 61
    8330:	de b7       	in	r29, 0x3e	; 62
    8332:	c4 55       	subi	r28, 0x54	; 84
    8334:	d4 40       	sbci	r29, 0x04	; 4
    8336:	cd bf       	out	0x3d, r28	; 61
    8338:	de bf       	out	0x3e, r29	; 62
    833a:	4a e0       	ldi	r20, 0x0A	; 10
    833c:	61 ed       	ldi	r22, 0xD1	; 209
    833e:	76 e2       	ldi	r23, 0x26	; 38
    8340:	ce 01       	movw	r24, r28
    8342:	8d 5c       	subi	r24, 0xCD	; 205
    8344:	9b 4f       	sbci	r25, 0xFB	; 251
    8346:	0e 94 5f 30 	call	0x60be	; 0x60be <f_open>
    834a:	81 11       	cpse	r24, r1
    834c:	11 c0       	rjmp	.+34     	; 0x8370 <play_sound+0x46>
    834e:	9e 01       	movw	r18, r28
    8350:	2d 5a       	subi	r18, 0xAD	; 173
    8352:	3b 4f       	sbci	r19, 0xFB	; 251
    8354:	4b e0       	ldi	r20, 0x0B	; 11
    8356:	50 e0       	ldi	r21, 0x00	; 0
    8358:	6f ed       	ldi	r22, 0xDF	; 223
    835a:	76 e2       	ldi	r23, 0x26	; 38
    835c:	ce 01       	movw	r24, r28
    835e:	8d 5c       	subi	r24, 0xCD	; 205
    8360:	9b 4f       	sbci	r25, 0xFB	; 251
    8362:	0e 94 bc 32 	call	0x6578	; 0x6578 <f_write>
    8366:	ce 01       	movw	r24, r28
    8368:	8d 5c       	subi	r24, 0xCD	; 205
    836a:	9b 4f       	sbci	r25, 0xFB	; 251
    836c:	0e 94 90 34 	call	0x6920	; 0x6920 <f_close>
    8370:	40 e0       	ldi	r20, 0x00	; 0
    8372:	62 ef       	ldi	r22, 0xF2	; 242
    8374:	73 e2       	ldi	r23, 0x23	; 35
    8376:	ce 01       	movw	r24, r28
    8378:	01 96       	adiw	r24, 0x01	; 1
    837a:	0e 94 1f 30 	call	0x603e	; 0x603e <f_mount>
    837e:	41 e0       	ldi	r20, 0x01	; 1
    8380:	6b ee       	ldi	r22, 0xEB	; 235
    8382:	76 e2       	ldi	r23, 0x26	; 38
    8384:	ce 01       	movw	r24, r28
    8386:	8d 5c       	subi	r24, 0xCD	; 205
    8388:	9b 4f       	sbci	r25, 0xFB	; 251
    838a:	0e 94 5f 30 	call	0x60be	; 0x60be <f_open>
    838e:	81 11       	cpse	r24, r1
    8390:	10 c0       	rjmp	.+32     	; 0x83b2 <play_sound+0x88>
    8392:	20 e0       	ldi	r18, 0x00	; 0
    8394:	32 e0       	ldi	r19, 0x02	; 2
    8396:	ae 01       	movw	r20, r28
    8398:	4d 5c       	subi	r20, 0xCD	; 205
    839a:	5d 4f       	sbci	r21, 0xFD	; 253
    839c:	65 ef       	ldi	r22, 0xF5	; 245
    839e:	76 e2       	ldi	r23, 0x26	; 38
    83a0:	ce 01       	movw	r24, r28
    83a2:	8d 5c       	subi	r24, 0xCD	; 205
    83a4:	9b 4f       	sbci	r25, 0xFB	; 251
    83a6:	63 d9       	rcall	.-3386   	; 0x766e <load_wav>
    83a8:	ce 01       	movw	r24, r28
    83aa:	8d 5c       	subi	r24, 0xCD	; 205
    83ac:	9b 4f       	sbci	r25, 0xFB	; 251
    83ae:	0e 94 90 34 	call	0x6920	; 0x6920 <f_close>
    83b2:	cc 5a       	subi	r28, 0xAC	; 172
    83b4:	db 4f       	sbci	r29, 0xFB	; 251
    83b6:	cd bf       	out	0x3d, r28	; 61
    83b8:	de bf       	out	0x3e, r29	; 62
    83ba:	df 91       	pop	r29
    83bc:	cf 91       	pop	r28
    83be:	08 95       	ret

000083c0 <start_loading>:
}

void start_loading(void) 
{
	display_clear_screen();
    83c0:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <display_clear_screen>
	
	PR.PRPC &= ~0x01;
    83c4:	e0 e7       	ldi	r30, 0x70	; 112
    83c6:	f0 e0       	ldi	r31, 0x00	; 0
    83c8:	83 81       	ldd	r24, Z+3	; 0x03
    83ca:	8e 7f       	andi	r24, 0xFE	; 254
    83cc:	83 83       	std	Z+3, r24	; 0x03
	
	TCC0.CNT = 0;
    83ce:	e0 e0       	ldi	r30, 0x00	; 0
    83d0:	f8 e0       	ldi	r31, 0x08	; 8
    83d2:	10 a2       	std	Z+32, r1	; 0x20
    83d4:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 3125;
    83d6:	85 e3       	ldi	r24, 0x35	; 53
    83d8:	9c e0       	ldi	r25, 0x0C	; 12
    83da:	86 a3       	std	Z+38, r24	; 0x26
    83dc:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;
    83de:	27 e0       	ldi	r18, 0x07	; 7
    83e0:	20 83       	st	Z, r18
	
	TCC0.CCA = 3125;
    83e2:	80 a7       	std	Z+40, r24	; 0x28
    83e4:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.INTCTRLB |= TC_CCAINTLVL_LO_gc;
    83e6:	87 81       	ldd	r24, Z+7	; 0x07
    83e8:	81 60       	ori	r24, 0x01	; 1
    83ea:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLB |= TC0_CCAEN_bm;
    83ec:	81 81       	ldd	r24, Z+1	; 0x01
    83ee:	80 61       	ori	r24, 0x10	; 16
    83f0:	81 83       	std	Z+1, r24	; 0x01
    83f2:	08 95       	ret

000083f4 <stop_loading>:
}

void stop_loading(void) 
{
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
    83f4:	10 92 00 08 	sts	0x0800, r1
	display_clear_screen();
    83f8:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <display_clear_screen>
	PR.PRPC |= 0x01;
    83fc:	e0 e7       	ldi	r30, 0x70	; 112
    83fe:	f0 e0       	ldi	r31, 0x00	; 0
    8400:	83 81       	ldd	r24, Z+3	; 0x03
    8402:	81 60       	ori	r24, 0x01	; 1
    8404:	83 83       	std	Z+3, r24	; 0x03
    8406:	08 95       	ret

00008408 <get_internet_variables>:
}

esp8266_status_t get_internet_variables(bool get_time, bool get_temperature) 
{	
    8408:	2f 92       	push	r2
    840a:	3f 92       	push	r3
    840c:	4f 92       	push	r4
    840e:	5f 92       	push	r5
    8410:	6f 92       	push	r6
    8412:	7f 92       	push	r7
    8414:	8f 92       	push	r8
    8416:	9f 92       	push	r9
    8418:	af 92       	push	r10
    841a:	bf 92       	push	r11
    841c:	cf 92       	push	r12
    841e:	df 92       	push	r13
    8420:	ef 92       	push	r14
    8422:	ff 92       	push	r15
    8424:	0f 93       	push	r16
    8426:	1f 93       	push	r17
    8428:	cf 93       	push	r28
    842a:	df 93       	push	r29
    842c:	cd b7       	in	r28, 0x3d	; 61
    842e:	de b7       	in	r29, 0x3e	; 62
    8430:	c6 5e       	subi	r28, 0xE6	; 230
    8432:	d1 09       	sbc	r29, r1
    8434:	cd bf       	out	0x3d, r28	; 61
    8436:	de bf       	out	0x3e, r29	; 62
    8438:	d8 2e       	mov	r13, r24
    843a:	46 2e       	mov	r4, r22
	jsmn_parser p;
	jsmnerr_t r;
	
	esp8266_status_t status;
	
	status = esp8266_setup();
    843c:	0e 94 9d 09 	call	0x133a	; 0x133a <esp8266_setup>
	if (status != ESP8266_SUCCESS) {
    8440:	81 30       	cpi	r24, 0x01	; 1
    8442:	09 f0       	breq	.+2      	; 0x8446 <get_internet_variables+0x3e>
    8444:	63 c1       	rjmp	.+710    	; 0x870c <get_internet_variables+0x304>
		return status;
	}
	status = esp8266_join_ap(env.wifi_ssid,env.wifi_pswd);
    8446:	62 e3       	ldi	r22, 0x32	; 50
    8448:	7b e2       	ldi	r23, 0x2B	; 43
    844a:	8b e4       	ldi	r24, 0x4B	; 75
    844c:	9b e2       	ldi	r25, 0x2B	; 43
    844e:	0e 94 c2 09 	call	0x1384	; 0x1384 <esp8266_join_ap>
	if (status != ESP8266_SUCCESS) {
    8452:	81 30       	cpi	r24, 0x01	; 1
    8454:	09 f0       	breq	.+2      	; 0x8458 <get_internet_variables+0x50>
    8456:	5a c1       	rjmp	.+692    	; 0x870c <get_internet_variables+0x304>
		return status;
	}
	if (get_time) {
    8458:	dd 20       	and	r13, r13
    845a:	39 f0       	breq	.+14     	; 0x846a <get_internet_variables+0x62>
		status = esp8266_get_json(TIME_IP,TIME_ADDR,json_string, sizeof(json_string));
    845c:	24 e6       	ldi	r18, 0x64	; 100
    845e:	ae 01       	movw	r20, r28
    8460:	4f 5f       	subi	r20, 0xFF	; 255
    8462:	5f 4f       	sbci	r21, 0xFF	; 255
    8464:	6a e0       	ldi	r22, 0x0A	; 10
    8466:	77 e2       	ldi	r23, 0x27	; 39
    8468:	09 c0       	rjmp	.+18     	; 0x847c <get_internet_variables+0x74>
	} else if (get_temperature) {
    846a:	44 20       	and	r4, r4
    846c:	09 f4       	brne	.+2      	; 0x8470 <get_internet_variables+0x68>
    846e:	87 c0       	rjmp	.+270    	; 0x857e <get_internet_variables+0x176>
		status = esp8266_get_json(WEATHER_IP,WEATHER_ADDR,json_string, sizeof(json_string));
    8470:	24 e6       	ldi	r18, 0x64	; 100
    8472:	ae 01       	movw	r20, r28
    8474:	4f 5f       	subi	r20, 0xFF	; 255
    8476:	5f 4f       	sbci	r21, 0xFF	; 255
    8478:	6e e3       	ldi	r22, 0x3E	; 62
    847a:	77 e2       	ldi	r23, 0x27	; 39
    847c:	8c e2       	ldi	r24, 0x2C	; 44
    847e:	97 e2       	ldi	r25, 0x27	; 39
    8480:	0e 94 17 0a 	call	0x142e	; 0x142e <esp8266_get_json>
    8484:	58 2e       	mov	r5, r24
	} else {
		return ESP8266_ERROR;
	}
	if (status != ESP8266_SUCCESS) {
    8486:	41 e0       	ldi	r20, 0x01	; 1
    8488:	84 13       	cpse	r24, r20
    848a:	40 c1       	rjmp	.+640    	; 0x870c <get_internet_variables+0x304>
		return status;
	}
	
	esp8266_off();
    848c:	0e 94 97 09 	call	0x132e	; 0x132e <esp8266_off>
	
#ifdef DEBUG_ON
	puts(json_string);
    8490:	ce 01       	movw	r24, r28
    8492:	01 96       	adiw	r24, 0x01	; 1
    8494:	7c 01       	movw	r14, r24
    8496:	0e 94 ba 50 	call	0xa174	; 0xa174 <puts>
#endif

	//Parse JSON
	jsmn_init(&p);
    849a:	ce 01       	movw	r24, r28
    849c:	8d 52       	subi	r24, 0x2D	; 45
    849e:	9f 4f       	sbci	r25, 0xFF	; 255
    84a0:	92 de       	rcall	.-732    	; 0x81c6 <jsmn_init>
	r = jsmn_parse(&p,json_string,strlen(json_string),tokens,sizeof(tokens));
    84a2:	f7 01       	movw	r30, r14
    84a4:	01 90       	ld	r0, Z+
    84a6:	00 20       	and	r0, r0
    84a8:	e9 f7       	brne	.-6      	; 0x84a4 <get_internet_variables+0x9c>
    84aa:	af 01       	movw	r20, r30
    84ac:	41 50       	subi	r20, 0x01	; 1
    84ae:	51 09       	sbc	r21, r1
    84b0:	4e 19       	sub	r20, r14
    84b2:	5f 09       	sbc	r21, r15
    84b4:	06 e4       	ldi	r16, 0x46	; 70
    84b6:	10 e0       	ldi	r17, 0x00	; 0
    84b8:	9e 01       	movw	r18, r28
    84ba:	2b 59       	subi	r18, 0x9B	; 155
    84bc:	3f 4f       	sbci	r19, 0xFF	; 255
    84be:	b7 01       	movw	r22, r14
    84c0:	ce 01       	movw	r24, r28
    84c2:	8d 52       	subi	r24, 0x2D	; 45
    84c4:	9f 4f       	sbci	r25, 0xFF	; 255
    84c6:	8e db       	rcall	.-2276   	; 0x7be4 <jsmn_parse>
	if (r < 0) {
    84c8:	87 fd       	sbrc	r24, 7
    84ca:	59 c0       	rjmp	.+178    	; 0x857e <get_internet_variables+0x176>
		return ESP8266_ERROR;
	}
	
	if (get_time) {
    84cc:	dd 20       	and	r13, r13
    84ce:	09 f4       	brne	.+2      	; 0x84d2 <get_internet_variables+0xca>
    84d0:	be c0       	rjmp	.+380    	; 0x864e <get_internet_variables+0x246>
		int year, month, day, hour, minute, second;
		char weekday[10];
		json_get_token(tokens,json_string,token_buffer,sizeof(token_buffer),2);
    84d2:	6e 01       	movw	r12, r28
    84d4:	fb ea       	ldi	r31, 0xAB	; 171
    84d6:	cf 0e       	add	r12, r31
    84d8:	d1 1c       	adc	r13, r1
    84da:	02 e0       	ldi	r16, 0x02	; 2
    84dc:	2e e1       	ldi	r18, 0x1E	; 30
    84de:	a6 01       	movw	r20, r12
    84e0:	b7 01       	movw	r22, r14
    84e2:	ce 01       	movw	r24, r28
    84e4:	8b 59       	subi	r24, 0x9B	; 155
    84e6:	9f 4f       	sbci	r25, 0xFF	; 255
    84e8:	78 de       	rcall	.-784    	; 0x81da <json_get_token>
#ifdef DEBUG_ON
		puts(token_buffer);
    84ea:	c6 01       	movw	r24, r12
    84ec:	0e 94 ba 50 	call	0xa174	; 0xa174 <puts>
#endif
		if (sscanf(token_buffer,"%d-%d-%d %s %d:%d:%d",&year, &month, &day, weekday, &hour, &minute, &second) != 7) {
    84f0:	9e 01       	movw	r18, r28
    84f2:	27 52       	subi	r18, 0x27	; 39
    84f4:	3f 4f       	sbci	r19, 0xFF	; 255
    84f6:	3f 93       	push	r19
    84f8:	2f 93       	push	r18
    84fa:	1e 01       	movw	r2, r28
    84fc:	4b ed       	ldi	r20, 0xDB	; 219
    84fe:	24 0e       	add	r2, r20
    8500:	31 1c       	adc	r3, r1
    8502:	3f 92       	push	r3
    8504:	2f 92       	push	r2
    8506:	8e 01       	movw	r16, r28
    8508:	03 52       	subi	r16, 0x23	; 35
    850a:	1f 4f       	sbci	r17, 0xFF	; 255
    850c:	1f 93       	push	r17
    850e:	0f 93       	push	r16
    8510:	ce 01       	movw	r24, r28
    8512:	87 53       	subi	r24, 0x37	; 55
    8514:	9f 4f       	sbci	r25, 0xFF	; 255
    8516:	9f 93       	push	r25
    8518:	8f 93       	push	r24
    851a:	5e 01       	movw	r10, r28
    851c:	5f ed       	ldi	r21, 0xDF	; 223
    851e:	a5 0e       	add	r10, r21
    8520:	b1 1c       	adc	r11, r1
    8522:	bf 92       	push	r11
    8524:	af 92       	push	r10
    8526:	4e 01       	movw	r8, r28
    8528:	81 ee       	ldi	r24, 0xE1	; 225
    852a:	88 0e       	add	r8, r24
    852c:	91 1c       	adc	r9, r1
    852e:	9f 92       	push	r9
    8530:	8f 92       	push	r8
    8532:	3e 01       	movw	r6, r28
    8534:	93 ee       	ldi	r25, 0xE3	; 227
    8536:	69 0e       	add	r6, r25
    8538:	71 1c       	adc	r7, r1
    853a:	7f 92       	push	r7
    853c:	6f 92       	push	r6
    853e:	84 e6       	ldi	r24, 0x64	; 100
    8540:	97 e2       	ldi	r25, 0x27	; 39
    8542:	9f 93       	push	r25
    8544:	8f 93       	push	r24
    8546:	df 92       	push	r13
    8548:	cf 92       	push	r12
    854a:	cb 51       	subi	r28, 0x1B	; 27
    854c:	df 4f       	sbci	r29, 0xFF	; 255
    854e:	28 83       	st	Y, r18
    8550:	c5 5e       	subi	r28, 0xE5	; 229
    8552:	d0 40       	sbci	r29, 0x00	; 0
    8554:	ca 51       	subi	r28, 0x1A	; 26
    8556:	df 4f       	sbci	r29, 0xFF	; 255
    8558:	38 83       	st	Y, r19
    855a:	c6 5e       	subi	r28, 0xE6	; 230
    855c:	d0 40       	sbci	r29, 0x00	; 0
    855e:	0e 94 e7 50 	call	0xa1ce	; 0xa1ce <sscanf>
    8562:	cd bf       	out	0x3d, r28	; 61
    8564:	de bf       	out	0x3e, r29	; 62
    8566:	cb 51       	subi	r28, 0x1B	; 27
    8568:	df 4f       	sbci	r29, 0xFF	; 255
    856a:	28 81       	ld	r18, Y
    856c:	c5 5e       	subi	r28, 0xE5	; 229
    856e:	d0 40       	sbci	r29, 0x00	; 0
    8570:	ca 51       	subi	r28, 0x1A	; 26
    8572:	df 4f       	sbci	r29, 0xFF	; 255
    8574:	38 81       	ld	r19, Y
    8576:	c6 5e       	subi	r28, 0xE6	; 230
    8578:	d0 40       	sbci	r29, 0x00	; 0
    857a:	07 97       	sbiw	r24, 0x07	; 7
    857c:	11 f0       	breq	.+4      	; 0x8582 <get_internet_variables+0x17a>
			return ESP8266_ERROR;
    857e:	80 e0       	ldi	r24, 0x00	; 0
    8580:	c5 c0       	rjmp	.+394    	; 0x870c <get_internet_variables+0x304>
		} else {
			env.time.year = year;
    8582:	f3 01       	movw	r30, r6
    8584:	40 81       	ld	r20, Z
    8586:	51 81       	ldd	r21, Z+1	; 0x01
    8588:	40 93 e7 2a 	sts	0x2AE7, r20
    858c:	50 93 e8 2a 	sts	0x2AE8, r21
			env.time.month = month;
    8590:	f4 01       	movw	r30, r8
    8592:	60 81       	ld	r22, Z
    8594:	60 93 e6 2a 	sts	0x2AE6, r22
			env.time.day = day;
    8598:	f5 01       	movw	r30, r10
    859a:	80 81       	ld	r24, Z
    859c:	80 93 e3 2a 	sts	0x2AE3, r24
			env.time.hours = hour + env.time.timezone + env.time.DST;
    85a0:	f8 01       	movw	r30, r16
    85a2:	90 81       	ld	r25, Z
    85a4:	70 91 e9 2a 	lds	r23, 0x2AE9
    85a8:	97 0f       	add	r25, r23
    85aa:	70 91 ea 2a 	lds	r23, 0x2AEA
    85ae:	97 0f       	add	r25, r23
    85b0:	90 93 e2 2a 	sts	0x2AE2, r25
			env.time.minutes = minute;
    85b4:	f1 01       	movw	r30, r2
    85b6:	90 81       	ld	r25, Z
    85b8:	90 93 e1 2a 	sts	0x2AE1, r25
			env.time.seconds = second;
    85bc:	f9 01       	movw	r30, r18
    85be:	90 81       	ld	r25, Z
    85c0:	90 93 e0 2a 	sts	0x2AE0, r25
			env.time.weekday = time_get_weekday(day,month,year);
    85c4:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <time_get_weekday>
    85c8:	80 93 e4 2a 	sts	0x2AE4, r24
			
			if (env.time.hours >= 24) {
    85cc:	90 91 e2 2a 	lds	r25, 0x2AE2
    85d0:	98 31       	cpi	r25, 0x18	; 24
    85d2:	88 f1       	brcs	.+98     	; 0x8636 <get_internet_variables+0x22e>
				env.time.hours -= 24;
    85d4:	98 51       	subi	r25, 0x18	; 24
    85d6:	90 93 e2 2a 	sts	0x2AE2, r25
				if (env.time.weekday++ >= Sunday) {
    85da:	87 30       	cpi	r24, 0x07	; 7
    85dc:	20 f4       	brcc	.+8      	; 0x85e6 <get_internet_variables+0x1de>
    85de:	8f 5f       	subi	r24, 0xFF	; 255
    85e0:	80 93 e4 2a 	sts	0x2AE4, r24
    85e4:	02 c0       	rjmp	.+4      	; 0x85ea <get_internet_variables+0x1e2>
					env.time.weekday = Monday;
    85e6:	50 92 e4 2a 	sts	0x2AE4, r5
				}
				if (env.time.day++ >= time_get_days_in_month(env.time.month,env.time.year)) {
    85ea:	10 91 e3 2a 	lds	r17, 0x2AE3
    85ee:	81 e0       	ldi	r24, 0x01	; 1
    85f0:	81 0f       	add	r24, r17
    85f2:	80 93 e3 2a 	sts	0x2AE3, r24
    85f6:	60 91 e7 2a 	lds	r22, 0x2AE7
    85fa:	70 91 e8 2a 	lds	r23, 0x2AE8
    85fe:	80 91 e6 2a 	lds	r24, 0x2AE6
    8602:	0e 94 bb 4c 	call	0x9976	; 0x9976 <time_get_days_in_month>
    8606:	18 17       	cp	r17, r24
    8608:	b0 f0       	brcs	.+44     	; 0x8636 <get_internet_variables+0x22e>
					env.time.day = 1;
    860a:	81 e0       	ldi	r24, 0x01	; 1
    860c:	80 93 e3 2a 	sts	0x2AE3, r24
					if (env.time.month++ >= December) {
    8610:	90 91 e6 2a 	lds	r25, 0x2AE6
    8614:	21 e0       	ldi	r18, 0x01	; 1
    8616:	29 0f       	add	r18, r25
    8618:	20 93 e6 2a 	sts	0x2AE6, r18
    861c:	9c 30       	cpi	r25, 0x0C	; 12
    861e:	58 f0       	brcs	.+22     	; 0x8636 <get_internet_variables+0x22e>
						env.time.month = January;
    8620:	80 93 e6 2a 	sts	0x2AE6, r24
						env.time.year++;
    8624:	80 91 e7 2a 	lds	r24, 0x2AE7
    8628:	90 91 e8 2a 	lds	r25, 0x2AE8
    862c:	01 96       	adiw	r24, 0x01	; 1
    862e:	80 93 e7 2a 	sts	0x2AE7, r24
    8632:	90 93 e8 2a 	sts	0x2AE8, r25
					}
				}
			}
			env.time.week = time_get_weeknumber(env.time.day,env.time.month,env.time.year);
    8636:	40 91 e7 2a 	lds	r20, 0x2AE7
    863a:	50 91 e8 2a 	lds	r21, 0x2AE8
    863e:	60 91 e6 2a 	lds	r22, 0x2AE6
    8642:	80 91 e3 2a 	lds	r24, 0x2AE3
    8646:	0e 94 d3 4c 	call	0x99a6	; 0x99a6 <time_get_weeknumber>
    864a:	80 93 e5 2a 	sts	0x2AE5, r24
		}
	}
	if (get_temperature) {
    864e:	44 20       	and	r4, r4
    8650:	09 f4       	brne	.+2      	; 0x8654 <get_internet_variables+0x24c>
    8652:	5b c0       	rjmp	.+182    	; 0x870a <get_internet_variables+0x302>
		json_get_token(tokens,json_string,token_buffer,sizeof(token_buffer),6);
    8654:	6e 01       	movw	r12, r28
    8656:	fb ea       	ldi	r31, 0xAB	; 171
    8658:	cf 0e       	add	r12, r31
    865a:	d1 1c       	adc	r13, r1
    865c:	06 e0       	ldi	r16, 0x06	; 6
    865e:	2e e1       	ldi	r18, 0x1E	; 30
    8660:	a6 01       	movw	r20, r12
    8662:	b7 01       	movw	r22, r14
    8664:	ce 01       	movw	r24, r28
    8666:	8b 59       	subi	r24, 0x9B	; 155
    8668:	9f 4f       	sbci	r25, 0xFF	; 255
    866a:	b7 dd       	rcall	.-1170   	; 0x81da <json_get_token>
#ifdef DEBUG_ON
		puts(token_buffer);
    866c:	c6 01       	movw	r24, r12
    866e:	0e 94 ba 50 	call	0xa174	; 0xa174 <puts>
#endif
		if (strlen(token_buffer) <= sizeof(env.temperature)) {
    8672:	f6 01       	movw	r30, r12
    8674:	01 90       	ld	r0, Z+
    8676:	00 20       	and	r0, r0
    8678:	e9 f7       	brne	.-6      	; 0x8674 <get_internet_variables+0x26c>
    867a:	af 01       	movw	r20, r30
    867c:	41 50       	subi	r20, 0x01	; 1
    867e:	51 09       	sbc	r21, r1
    8680:	4c 19       	sub	r20, r12
    8682:	5d 09       	sbc	r21, r13
    8684:	44 30       	cpi	r20, 0x04	; 4
    8686:	51 05       	cpc	r21, r1
    8688:	08 f0       	brcs	.+2      	; 0x868c <get_internet_variables+0x284>
    868a:	79 cf       	rjmp	.-270    	; 0x857e <get_internet_variables+0x176>
			strncpy(env.temperature,token_buffer,strlen(token_buffer));
    868c:	b6 01       	movw	r22, r12
    868e:	8b ee       	ldi	r24, 0xEB	; 235
    8690:	9a e2       	ldi	r25, 0x2A	; 42
    8692:	0e 94 75 50 	call	0xa0ea	; 0xa0ea <strncpy>
		} else {
			return ESP8266_ERROR;
		}
		json_get_token(tokens,json_string,token_buffer,sizeof(token_buffer),8);
    8696:	08 e0       	ldi	r16, 0x08	; 8
    8698:	2e e1       	ldi	r18, 0x1E	; 30
    869a:	a6 01       	movw	r20, r12
    869c:	b7 01       	movw	r22, r14
    869e:	ce 01       	movw	r24, r28
    86a0:	8b 59       	subi	r24, 0x9B	; 155
    86a2:	9f 4f       	sbci	r25, 0xFF	; 255
    86a4:	9a dd       	rcall	.-1228   	; 0x81da <json_get_token>
#ifdef DEBUG_ON
		puts(token_buffer);
    86a6:	c6 01       	movw	r24, r12
    86a8:	0e 94 ba 50 	call	0xa174	; 0xa174 <puts>
#endif
		if (strlen(token_buffer) < sizeof(env.weather_info)) {
    86ac:	f6 01       	movw	r30, r12
    86ae:	01 90       	ld	r0, Z+
    86b0:	00 20       	and	r0, r0
    86b2:	e9 f7       	brne	.-6      	; 0x86ae <get_internet_variables+0x2a6>
    86b4:	af 01       	movw	r20, r30
    86b6:	41 50       	subi	r20, 0x01	; 1
    86b8:	51 09       	sbc	r21, r1
    86ba:	4c 19       	sub	r20, r12
    86bc:	5d 09       	sbc	r21, r13
    86be:	48 32       	cpi	r20, 0x28	; 40
    86c0:	51 05       	cpc	r21, r1
    86c2:	08 f0       	brcs	.+2      	; 0x86c6 <get_internet_variables+0x2be>
    86c4:	5c cf       	rjmp	.-328    	; 0x857e <get_internet_variables+0x176>
			strncpy(env.weather_info,token_buffer,strlen(token_buffer));
    86c6:	b6 01       	movw	r22, r12
    86c8:	8e ee       	ldi	r24, 0xEE	; 238
    86ca:	9a e2       	ldi	r25, 0x2A	; 42
    86cc:	0e 94 75 50 	call	0xa0ea	; 0xa0ea <strncpy>
		} else {
			return ESP8266_ERROR;
		}
		json_get_token(tokens,json_string,token_buffer,sizeof(token_buffer),2);
    86d0:	02 e0       	ldi	r16, 0x02	; 2
    86d2:	2e e1       	ldi	r18, 0x1E	; 30
    86d4:	a6 01       	movw	r20, r12
    86d6:	b7 01       	movw	r22, r14
    86d8:	ce 01       	movw	r24, r28
    86da:	8b 59       	subi	r24, 0x9B	; 155
    86dc:	9f 4f       	sbci	r25, 0xFF	; 255
    86de:	7d dd       	rcall	.-1286   	; 0x81da <json_get_token>
#ifdef DEBUG_ON
		puts(token_buffer);
    86e0:	c6 01       	movw	r24, r12
    86e2:	0e 94 ba 50 	call	0xa174	; 0xa174 <puts>
#endif
		if (strlen(token_buffer) < sizeof(env.city)) {
    86e6:	f6 01       	movw	r30, r12
    86e8:	01 90       	ld	r0, Z+
    86ea:	00 20       	and	r0, r0
    86ec:	e9 f7       	brne	.-6      	; 0x86e8 <get_internet_variables+0x2e0>
    86ee:	af 01       	movw	r20, r30
    86f0:	41 50       	subi	r20, 0x01	; 1
    86f2:	51 09       	sbc	r21, r1
    86f4:	4c 19       	sub	r20, r12
    86f6:	5d 09       	sbc	r21, r13
    86f8:	49 31       	cpi	r20, 0x19	; 25
    86fa:	51 05       	cpc	r21, r1
    86fc:	08 f0       	brcs	.+2      	; 0x8700 <get_internet_variables+0x2f8>
    86fe:	3f cf       	rjmp	.-386    	; 0x857e <get_internet_variables+0x176>
			strncpy(env.city,token_buffer,strlen(token_buffer));
    8700:	b6 01       	movw	r22, r12
    8702:	86 e1       	ldi	r24, 0x16	; 22
    8704:	9b e2       	ldi	r25, 0x2B	; 43
    8706:	0e 94 75 50 	call	0xa0ea	; 0xa0ea <strncpy>
		} else {
			return ESP8266_ERROR;
		}

	}
	return ESP8266_SUCCESS;
    870a:	81 e0       	ldi	r24, 0x01	; 1
}
    870c:	ca 51       	subi	r28, 0x1A	; 26
    870e:	df 4f       	sbci	r29, 0xFF	; 255
    8710:	cd bf       	out	0x3d, r28	; 61
    8712:	de bf       	out	0x3e, r29	; 62
    8714:	df 91       	pop	r29
    8716:	cf 91       	pop	r28
    8718:	1f 91       	pop	r17
    871a:	0f 91       	pop	r16
    871c:	ff 90       	pop	r15
    871e:	ef 90       	pop	r14
    8720:	df 90       	pop	r13
    8722:	cf 90       	pop	r12
    8724:	bf 90       	pop	r11
    8726:	af 90       	pop	r10
    8728:	9f 90       	pop	r9
    872a:	8f 90       	pop	r8
    872c:	7f 90       	pop	r7
    872e:	6f 90       	pop	r6
    8730:	5f 90       	pop	r5
    8732:	4f 90       	pop	r4
    8734:	3f 90       	pop	r3
    8736:	2f 90       	pop	r2
    8738:	08 95       	ret

0000873a <menu_draw_temperature_frame>:

void menu_draw_temperature_frame(void) 
{
    873a:	0f 93       	push	r16
	display_draw_small_char(1,10,'T',1,1);
    873c:	01 e0       	ldi	r16, 0x01	; 1
    873e:	21 e0       	ldi	r18, 0x01	; 1
    8740:	30 e0       	ldi	r19, 0x00	; 0
    8742:	44 e5       	ldi	r20, 0x54	; 84
    8744:	6a e0       	ldi	r22, 0x0A	; 10
    8746:	70 e0       	ldi	r23, 0x00	; 0
    8748:	81 e0       	ldi	r24, 0x01	; 1
    874a:	90 e0       	ldi	r25, 0x00	; 0
    874c:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(5,10,'E',1,1);
    8750:	21 e0       	ldi	r18, 0x01	; 1
    8752:	30 e0       	ldi	r19, 0x00	; 0
    8754:	45 e4       	ldi	r20, 0x45	; 69
    8756:	6a e0       	ldi	r22, 0x0A	; 10
    8758:	70 e0       	ldi	r23, 0x00	; 0
    875a:	85 e0       	ldi	r24, 0x05	; 5
    875c:	90 e0       	ldi	r25, 0x00	; 0
    875e:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(9,10,'M',1,1);
    8762:	21 e0       	ldi	r18, 0x01	; 1
    8764:	30 e0       	ldi	r19, 0x00	; 0
    8766:	4d e4       	ldi	r20, 0x4D	; 77
    8768:	6a e0       	ldi	r22, 0x0A	; 10
    876a:	70 e0       	ldi	r23, 0x00	; 0
    876c:	89 e0       	ldi	r24, 0x09	; 9
    876e:	90 e0       	ldi	r25, 0x00	; 0
    8770:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(13,10,'P',1,1);
    8774:	21 e0       	ldi	r18, 0x01	; 1
    8776:	30 e0       	ldi	r19, 0x00	; 0
    8778:	40 e5       	ldi	r20, 0x50	; 80
    877a:	6a e0       	ldi	r22, 0x0A	; 10
    877c:	70 e0       	ldi	r23, 0x00	; 0
    877e:	8d e0       	ldi	r24, 0x0D	; 13
    8780:	90 e0       	ldi	r25, 0x00	; 0
    8782:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	
	if (strlen(env.temperature) < 2) {
    8786:	eb ee       	ldi	r30, 0xEB	; 235
    8788:	fa e2       	ldi	r31, 0x2A	; 42
    878a:	01 90       	ld	r0, Z+
    878c:	00 20       	and	r0, r0
    878e:	e9 f7       	brne	.-6      	; 0x878a <menu_draw_temperature_frame+0x50>
    8790:	ec 5e       	subi	r30, 0xEC	; 236
    8792:	fa 42       	sbci	r31, 0x2A	; 42
    8794:	32 97       	sbiw	r30, 0x02	; 2
    8796:	90 f4       	brcc	.+36     	; 0x87bc <menu_draw_temperature_frame+0x82>
		display_draw_small_char(5,3,env.temperature[0],1,1);
    8798:	21 e0       	ldi	r18, 0x01	; 1
    879a:	30 e0       	ldi	r19, 0x00	; 0
    879c:	40 91 eb 2a 	lds	r20, 0x2AEB
    87a0:	63 e0       	ldi	r22, 0x03	; 3
    87a2:	70 e0       	ldi	r23, 0x00	; 0
    87a4:	85 e0       	ldi	r24, 0x05	; 5
    87a6:	90 e0       	ldi	r25, 0x00	; 0
    87a8:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
		display_draw_small_char(9,3,'C',1,1);	
    87ac:	21 e0       	ldi	r18, 0x01	; 1
    87ae:	30 e0       	ldi	r19, 0x00	; 0
    87b0:	43 e4       	ldi	r20, 0x43	; 67
    87b2:	63 e0       	ldi	r22, 0x03	; 3
    87b4:	70 e0       	ldi	r23, 0x00	; 0
    87b6:	89 e0       	ldi	r24, 0x09	; 9
    87b8:	90 e0       	ldi	r25, 0x00	; 0
    87ba:	1c c0       	rjmp	.+56     	; 0x87f4 <menu_draw_temperature_frame+0xba>
	} else {
		display_draw_small_char(3,3,env.temperature[0],1,1);
    87bc:	01 e0       	ldi	r16, 0x01	; 1
    87be:	21 e0       	ldi	r18, 0x01	; 1
    87c0:	30 e0       	ldi	r19, 0x00	; 0
    87c2:	40 91 eb 2a 	lds	r20, 0x2AEB
    87c6:	63 e0       	ldi	r22, 0x03	; 3
    87c8:	70 e0       	ldi	r23, 0x00	; 0
    87ca:	83 e0       	ldi	r24, 0x03	; 3
    87cc:	90 e0       	ldi	r25, 0x00	; 0
    87ce:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
		display_draw_small_char(7,3,env.temperature[1],1,1);
    87d2:	21 e0       	ldi	r18, 0x01	; 1
    87d4:	30 e0       	ldi	r19, 0x00	; 0
    87d6:	40 91 ec 2a 	lds	r20, 0x2AEC
    87da:	63 e0       	ldi	r22, 0x03	; 3
    87dc:	70 e0       	ldi	r23, 0x00	; 0
    87de:	87 e0       	ldi	r24, 0x07	; 7
    87e0:	90 e0       	ldi	r25, 0x00	; 0
    87e2:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
		display_draw_small_char(11,3,'C',1,1);	
    87e6:	21 e0       	ldi	r18, 0x01	; 1
    87e8:	30 e0       	ldi	r19, 0x00	; 0
    87ea:	43 e4       	ldi	r20, 0x43	; 67
    87ec:	63 e0       	ldi	r22, 0x03	; 3
    87ee:	70 e0       	ldi	r23, 0x00	; 0
    87f0:	8b e0       	ldi	r24, 0x0B	; 11
    87f2:	90 e0       	ldi	r25, 0x00	; 0
    87f4:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	}
}
    87f8:	0f 91       	pop	r16
    87fa:	08 95       	ret

000087fc <menu_draw_date_frame>:

void menu_draw_date_frame(void) 
{
    87fc:	0f 93       	push	r16
    87fe:	cf 93       	push	r28
    8800:	df 93       	push	r29
    8802:	00 d0       	rcall	.+0      	; 0x8804 <menu_draw_date_frame+0x8>
    8804:	cd b7       	in	r28, 0x3d	; 61
    8806:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'D',1,1);
    8808:	01 e0       	ldi	r16, 0x01	; 1
    880a:	21 e0       	ldi	r18, 0x01	; 1
    880c:	30 e0       	ldi	r19, 0x00	; 0
    880e:	44 e4       	ldi	r20, 0x44	; 68
    8810:	6a e0       	ldi	r22, 0x0A	; 10
    8812:	70 e0       	ldi	r23, 0x00	; 0
    8814:	81 e0       	ldi	r24, 0x01	; 1
    8816:	90 e0       	ldi	r25, 0x00	; 0
    8818:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(5,10,'A',1,1);
    881c:	21 e0       	ldi	r18, 0x01	; 1
    881e:	30 e0       	ldi	r19, 0x00	; 0
    8820:	41 e4       	ldi	r20, 0x41	; 65
    8822:	6a e0       	ldi	r22, 0x0A	; 10
    8824:	70 e0       	ldi	r23, 0x00	; 0
    8826:	85 e0       	ldi	r24, 0x05	; 5
    8828:	90 e0       	ldi	r25, 0x00	; 0
    882a:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(9,10,'T',1,1);
    882e:	21 e0       	ldi	r18, 0x01	; 1
    8830:	30 e0       	ldi	r19, 0x00	; 0
    8832:	44 e5       	ldi	r20, 0x54	; 84
    8834:	6a e0       	ldi	r22, 0x0A	; 10
    8836:	70 e0       	ldi	r23, 0x00	; 0
    8838:	89 e0       	ldi	r24, 0x09	; 9
    883a:	90 e0       	ldi	r25, 0x00	; 0
    883c:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(13,10,'E',1,1);
    8840:	21 e0       	ldi	r18, 0x01	; 1
    8842:	30 e0       	ldi	r19, 0x00	; 0
    8844:	45 e4       	ldi	r20, 0x45	; 69
    8846:	6a e0       	ldi	r22, 0x0A	; 10
    8848:	70 e0       	ldi	r23, 0x00	; 0
    884a:	8d e0       	ldi	r24, 0x0D	; 13
    884c:	90 e0       	ldi	r25, 0x00	; 0
    884e:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	
	char buffer[2];
	char temp;
	
	itoa_simple(buffer,env.time.day);
    8852:	40 91 e3 2a 	lds	r20, 0x2AE3
    8856:	50 e0       	ldi	r21, 0x00	; 0
    8858:	60 e0       	ldi	r22, 0x00	; 0
    885a:	70 e0       	ldi	r23, 0x00	; 0
    885c:	ce 01       	movw	r24, r28
    885e:	01 96       	adiw	r24, 0x01	; 1
    8860:	05 dd       	rcall	.-1526   	; 0x826c <itoa_simple>
	
	//append zero
	if (env.time.day < 10) {
    8862:	80 91 e3 2a 	lds	r24, 0x2AE3
    8866:	8a 30       	cpi	r24, 0x0A	; 10
    8868:	20 f4       	brcc	.+8      	; 0x8872 <menu_draw_date_frame+0x76>
		temp = buffer[0];
    886a:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    886c:	90 e3       	ldi	r25, 0x30	; 48
    886e:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    8870:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(1,3,buffer[0],1,1);
    8872:	01 e0       	ldi	r16, 0x01	; 1
    8874:	21 e0       	ldi	r18, 0x01	; 1
    8876:	30 e0       	ldi	r19, 0x00	; 0
    8878:	49 81       	ldd	r20, Y+1	; 0x01
    887a:	63 e0       	ldi	r22, 0x03	; 3
    887c:	70 e0       	ldi	r23, 0x00	; 0
    887e:	81 e0       	ldi	r24, 0x01	; 1
    8880:	90 e0       	ldi	r25, 0x00	; 0
    8882:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(4,3,buffer[1],1,1);
    8886:	21 e0       	ldi	r18, 0x01	; 1
    8888:	30 e0       	ldi	r19, 0x00	; 0
    888a:	4a 81       	ldd	r20, Y+2	; 0x02
    888c:	63 e0       	ldi	r22, 0x03	; 3
    888e:	70 e0       	ldi	r23, 0x00	; 0
    8890:	84 e0       	ldi	r24, 0x04	; 4
    8892:	90 e0       	ldi	r25, 0x00	; 0
    8894:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(7,3,'.',1,1);
    8898:	21 e0       	ldi	r18, 0x01	; 1
    889a:	30 e0       	ldi	r19, 0x00	; 0
    889c:	4e e2       	ldi	r20, 0x2E	; 46
    889e:	63 e0       	ldi	r22, 0x03	; 3
    88a0:	70 e0       	ldi	r23, 0x00	; 0
    88a2:	87 e0       	ldi	r24, 0x07	; 7
    88a4:	90 e0       	ldi	r25, 0x00	; 0
    88a6:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	
	itoa_simple(buffer,env.time.month);
    88aa:	40 91 e6 2a 	lds	r20, 0x2AE6
    88ae:	50 e0       	ldi	r21, 0x00	; 0
    88b0:	60 e0       	ldi	r22, 0x00	; 0
    88b2:	70 e0       	ldi	r23, 0x00	; 0
    88b4:	ce 01       	movw	r24, r28
    88b6:	01 96       	adiw	r24, 0x01	; 1
    88b8:	d9 dc       	rcall	.-1614   	; 0x826c <itoa_simple>
	
	//append zero
	if (env.time.month < 10) {
    88ba:	80 91 e6 2a 	lds	r24, 0x2AE6
    88be:	8a 30       	cpi	r24, 0x0A	; 10
    88c0:	20 f4       	brcc	.+8      	; 0x88ca <menu_draw_date_frame+0xce>
		temp = buffer[0];
    88c2:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    88c4:	90 e3       	ldi	r25, 0x30	; 48
    88c6:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    88c8:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(10,3,buffer[0],1,1);
    88ca:	01 e0       	ldi	r16, 0x01	; 1
    88cc:	21 e0       	ldi	r18, 0x01	; 1
    88ce:	30 e0       	ldi	r19, 0x00	; 0
    88d0:	49 81       	ldd	r20, Y+1	; 0x01
    88d2:	63 e0       	ldi	r22, 0x03	; 3
    88d4:	70 e0       	ldi	r23, 0x00	; 0
    88d6:	8a e0       	ldi	r24, 0x0A	; 10
    88d8:	90 e0       	ldi	r25, 0x00	; 0
    88da:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(13,3,buffer[1],1,1);
    88de:	21 e0       	ldi	r18, 0x01	; 1
    88e0:	30 e0       	ldi	r19, 0x00	; 0
    88e2:	4a 81       	ldd	r20, Y+2	; 0x02
    88e4:	63 e0       	ldi	r22, 0x03	; 3
    88e6:	70 e0       	ldi	r23, 0x00	; 0
    88e8:	8d e0       	ldi	r24, 0x0D	; 13
    88ea:	90 e0       	ldi	r25, 0x00	; 0
    88ec:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
}
    88f0:	0f 90       	pop	r0
    88f2:	0f 90       	pop	r0
    88f4:	df 91       	pop	r29
    88f6:	cf 91       	pop	r28
    88f8:	0f 91       	pop	r16
    88fa:	08 95       	ret

000088fc <menu_draw_week_frame>:

void menu_draw_week_frame(void) 
{
    88fc:	0f 93       	push	r16
    88fe:	cf 93       	push	r28
    8900:	df 93       	push	r29
    8902:	00 d0       	rcall	.+0      	; 0x8904 <menu_draw_week_frame+0x8>
    8904:	cd b7       	in	r28, 0x3d	; 61
    8906:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'W',1,1);
    8908:	01 e0       	ldi	r16, 0x01	; 1
    890a:	21 e0       	ldi	r18, 0x01	; 1
    890c:	30 e0       	ldi	r19, 0x00	; 0
    890e:	47 e5       	ldi	r20, 0x57	; 87
    8910:	6a e0       	ldi	r22, 0x0A	; 10
    8912:	70 e0       	ldi	r23, 0x00	; 0
    8914:	81 e0       	ldi	r24, 0x01	; 1
    8916:	90 e0       	ldi	r25, 0x00	; 0
    8918:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(5,10,'E',1,1);
    891c:	21 e0       	ldi	r18, 0x01	; 1
    891e:	30 e0       	ldi	r19, 0x00	; 0
    8920:	45 e4       	ldi	r20, 0x45	; 69
    8922:	6a e0       	ldi	r22, 0x0A	; 10
    8924:	70 e0       	ldi	r23, 0x00	; 0
    8926:	85 e0       	ldi	r24, 0x05	; 5
    8928:	90 e0       	ldi	r25, 0x00	; 0
    892a:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(9,10,'E',1,1);
    892e:	21 e0       	ldi	r18, 0x01	; 1
    8930:	30 e0       	ldi	r19, 0x00	; 0
    8932:	45 e4       	ldi	r20, 0x45	; 69
    8934:	6a e0       	ldi	r22, 0x0A	; 10
    8936:	70 e0       	ldi	r23, 0x00	; 0
    8938:	89 e0       	ldi	r24, 0x09	; 9
    893a:	90 e0       	ldi	r25, 0x00	; 0
    893c:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(13,10,'K',1,1);
    8940:	21 e0       	ldi	r18, 0x01	; 1
    8942:	30 e0       	ldi	r19, 0x00	; 0
    8944:	4b e4       	ldi	r20, 0x4B	; 75
    8946:	6a e0       	ldi	r22, 0x0A	; 10
    8948:	70 e0       	ldi	r23, 0x00	; 0
    894a:	8d e0       	ldi	r24, 0x0D	; 13
    894c:	90 e0       	ldi	r25, 0x00	; 0
    894e:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	
	char buffer[2];
	char temp;
	
	itoa_simple(buffer,env.time.week);
    8952:	40 91 e5 2a 	lds	r20, 0x2AE5
    8956:	50 e0       	ldi	r21, 0x00	; 0
    8958:	60 e0       	ldi	r22, 0x00	; 0
    895a:	70 e0       	ldi	r23, 0x00	; 0
    895c:	ce 01       	movw	r24, r28
    895e:	01 96       	adiw	r24, 0x01	; 1
    8960:	85 dc       	rcall	.-1782   	; 0x826c <itoa_simple>
	
	//append zero
	if (env.time.week < 10) {
    8962:	80 91 e5 2a 	lds	r24, 0x2AE5
    8966:	8a 30       	cpi	r24, 0x0A	; 10
    8968:	20 f4       	brcc	.+8      	; 0x8972 <menu_draw_week_frame+0x76>
		temp = buffer[0];
    896a:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    896c:	90 e3       	ldi	r25, 0x30	; 48
    896e:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    8970:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(5,3,buffer[0],1,1);
    8972:	01 e0       	ldi	r16, 0x01	; 1
    8974:	21 e0       	ldi	r18, 0x01	; 1
    8976:	30 e0       	ldi	r19, 0x00	; 0
    8978:	49 81       	ldd	r20, Y+1	; 0x01
    897a:	63 e0       	ldi	r22, 0x03	; 3
    897c:	70 e0       	ldi	r23, 0x00	; 0
    897e:	85 e0       	ldi	r24, 0x05	; 5
    8980:	90 e0       	ldi	r25, 0x00	; 0
    8982:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(9,3,buffer[1],1,1);
    8986:	21 e0       	ldi	r18, 0x01	; 1
    8988:	30 e0       	ldi	r19, 0x00	; 0
    898a:	4a 81       	ldd	r20, Y+2	; 0x02
    898c:	63 e0       	ldi	r22, 0x03	; 3
    898e:	70 e0       	ldi	r23, 0x00	; 0
    8990:	89 e0       	ldi	r24, 0x09	; 9
    8992:	90 e0       	ldi	r25, 0x00	; 0
    8994:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
}
    8998:	0f 90       	pop	r0
    899a:	0f 90       	pop	r0
    899c:	df 91       	pop	r29
    899e:	cf 91       	pop	r28
    89a0:	0f 91       	pop	r16
    89a2:	08 95       	ret

000089a4 <menu_draw_weekday_frame>:

void menu_draw_weekday_frame(void) 
{
    89a4:	0f 93       	push	r16
    89a6:	cf 93       	push	r28
    89a8:	df 93       	push	r29
    89aa:	00 d0       	rcall	.+0      	; 0x89ac <menu_draw_weekday_frame+0x8>
    89ac:	1f 92       	push	r1
    89ae:	cd b7       	in	r28, 0x3d	; 61
    89b0:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'W',1,1);
    89b2:	01 e0       	ldi	r16, 0x01	; 1
    89b4:	21 e0       	ldi	r18, 0x01	; 1
    89b6:	30 e0       	ldi	r19, 0x00	; 0
    89b8:	47 e5       	ldi	r20, 0x57	; 87
    89ba:	6a e0       	ldi	r22, 0x0A	; 10
    89bc:	70 e0       	ldi	r23, 0x00	; 0
    89be:	81 e0       	ldi	r24, 0x01	; 1
    89c0:	90 e0       	ldi	r25, 0x00	; 0
    89c2:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(5,10,'D',1,1);
    89c6:	21 e0       	ldi	r18, 0x01	; 1
    89c8:	30 e0       	ldi	r19, 0x00	; 0
    89ca:	44 e4       	ldi	r20, 0x44	; 68
    89cc:	6a e0       	ldi	r22, 0x0A	; 10
    89ce:	70 e0       	ldi	r23, 0x00	; 0
    89d0:	85 e0       	ldi	r24, 0x05	; 5
    89d2:	90 e0       	ldi	r25, 0x00	; 0
    89d4:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(9,10,'A',1,1);
    89d8:	21 e0       	ldi	r18, 0x01	; 1
    89da:	30 e0       	ldi	r19, 0x00	; 0
    89dc:	41 e4       	ldi	r20, 0x41	; 65
    89de:	6a e0       	ldi	r22, 0x0A	; 10
    89e0:	70 e0       	ldi	r23, 0x00	; 0
    89e2:	89 e0       	ldi	r24, 0x09	; 9
    89e4:	90 e0       	ldi	r25, 0x00	; 0
    89e6:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(13,10,'Y',1,1);
    89ea:	21 e0       	ldi	r18, 0x01	; 1
    89ec:	30 e0       	ldi	r19, 0x00	; 0
    89ee:	49 e5       	ldi	r20, 0x59	; 89
    89f0:	6a e0       	ldi	r22, 0x0A	; 10
    89f2:	70 e0       	ldi	r23, 0x00	; 0
    89f4:	8d e0       	ldi	r24, 0x0D	; 13
    89f6:	90 e0       	ldi	r25, 0x00	; 0
    89f8:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	
	char buffer[3];
	strncpy(buffer,time_get_day_name(env.time.weekday),3);
    89fc:	80 91 e4 2a 	lds	r24, 0x2AE4
    8a00:	4f d7       	rcall	.+3742   	; 0x98a0 <time_get_day_name>
    8a02:	43 e0       	ldi	r20, 0x03	; 3
    8a04:	50 e0       	ldi	r21, 0x00	; 0
    8a06:	bc 01       	movw	r22, r24
    8a08:	ce 01       	movw	r24, r28
    8a0a:	01 96       	adiw	r24, 0x01	; 1
    8a0c:	0e 94 75 50 	call	0xa0ea	; 0xa0ea <strncpy>
	
	display_draw_small_char(3,3,buffer[0],1,1);
    8a10:	21 e0       	ldi	r18, 0x01	; 1
    8a12:	30 e0       	ldi	r19, 0x00	; 0
    8a14:	49 81       	ldd	r20, Y+1	; 0x01
    8a16:	63 e0       	ldi	r22, 0x03	; 3
    8a18:	70 e0       	ldi	r23, 0x00	; 0
    8a1a:	83 e0       	ldi	r24, 0x03	; 3
    8a1c:	90 e0       	ldi	r25, 0x00	; 0
    8a1e:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(7,3,buffer[1],1,1);
    8a22:	21 e0       	ldi	r18, 0x01	; 1
    8a24:	30 e0       	ldi	r19, 0x00	; 0
    8a26:	4a 81       	ldd	r20, Y+2	; 0x02
    8a28:	63 e0       	ldi	r22, 0x03	; 3
    8a2a:	70 e0       	ldi	r23, 0x00	; 0
    8a2c:	87 e0       	ldi	r24, 0x07	; 7
    8a2e:	90 e0       	ldi	r25, 0x00	; 0
    8a30:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(11,3,buffer[2],1,1);
    8a34:	21 e0       	ldi	r18, 0x01	; 1
    8a36:	30 e0       	ldi	r19, 0x00	; 0
    8a38:	4b 81       	ldd	r20, Y+3	; 0x03
    8a3a:	63 e0       	ldi	r22, 0x03	; 3
    8a3c:	70 e0       	ldi	r23, 0x00	; 0
    8a3e:	8b e0       	ldi	r24, 0x0B	; 11
    8a40:	90 e0       	ldi	r25, 0x00	; 0
    8a42:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
}
    8a46:	23 96       	adiw	r28, 0x03	; 3
    8a48:	cd bf       	out	0x3d, r28	; 61
    8a4a:	de bf       	out	0x3e, r29	; 62
    8a4c:	df 91       	pop	r29
    8a4e:	cf 91       	pop	r28
    8a50:	0f 91       	pop	r16
    8a52:	08 95       	ret

00008a54 <menu_draw_battery_frame>:

void menu_draw_battery_frame(void) 
{	
    8a54:	0f 93       	push	r16
    8a56:	cf 93       	push	r28
    8a58:	df 93       	push	r29
    8a5a:	cd b7       	in	r28, 0x3d	; 61
    8a5c:	de b7       	in	r29, 0x3e	; 62
    8a5e:	25 97       	sbiw	r28, 0x05	; 5
    8a60:	cd bf       	out	0x3d, r28	; 61
    8a62:	de bf       	out	0x3e, r29	; 62
	display_draw_small_char(1,10,'B',1,1);
    8a64:	01 e0       	ldi	r16, 0x01	; 1
    8a66:	21 e0       	ldi	r18, 0x01	; 1
    8a68:	30 e0       	ldi	r19, 0x00	; 0
    8a6a:	42 e4       	ldi	r20, 0x42	; 66
    8a6c:	6a e0       	ldi	r22, 0x0A	; 10
    8a6e:	70 e0       	ldi	r23, 0x00	; 0
    8a70:	81 e0       	ldi	r24, 0x01	; 1
    8a72:	90 e0       	ldi	r25, 0x00	; 0
    8a74:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(5,10,'A',1,1);
    8a78:	21 e0       	ldi	r18, 0x01	; 1
    8a7a:	30 e0       	ldi	r19, 0x00	; 0
    8a7c:	41 e4       	ldi	r20, 0x41	; 65
    8a7e:	6a e0       	ldi	r22, 0x0A	; 10
    8a80:	70 e0       	ldi	r23, 0x00	; 0
    8a82:	85 e0       	ldi	r24, 0x05	; 5
    8a84:	90 e0       	ldi	r25, 0x00	; 0
    8a86:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(9,10,'T',1,1);
    8a8a:	21 e0       	ldi	r18, 0x01	; 1
    8a8c:	30 e0       	ldi	r19, 0x00	; 0
    8a8e:	44 e5       	ldi	r20, 0x54	; 84
    8a90:	6a e0       	ldi	r22, 0x0A	; 10
    8a92:	70 e0       	ldi	r23, 0x00	; 0
    8a94:	89 e0       	ldi	r24, 0x09	; 9
    8a96:	90 e0       	ldi	r25, 0x00	; 0
    8a98:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(13,10,'T',1,1);
    8a9c:	21 e0       	ldi	r18, 0x01	; 1
    8a9e:	30 e0       	ldi	r19, 0x00	; 0
    8aa0:	44 e5       	ldi	r20, 0x54	; 84
    8aa2:	6a e0       	ldi	r22, 0x0A	; 10
    8aa4:	70 e0       	ldi	r23, 0x00	; 0
    8aa6:	8d e0       	ldi	r24, 0x0D	; 13
    8aa8:	90 e0       	ldi	r25, 0x00	; 0
    8aaa:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	
	uint8_t battery = adc_get_battery_percentage();
    8aae:	0e 94 32 07 	call	0xe64	; 0xe64 <adc_get_battery_percentage>
	
	char buffer[5];
	itoa_simple(buffer,battery);
    8ab2:	48 2f       	mov	r20, r24
    8ab4:	50 e0       	ldi	r21, 0x00	; 0
    8ab6:	60 e0       	ldi	r22, 0x00	; 0
    8ab8:	70 e0       	ldi	r23, 0x00	; 0
    8aba:	ce 01       	movw	r24, r28
    8abc:	01 96       	adiw	r24, 0x01	; 1
    8abe:	d6 db       	rcall	.-2132   	; 0x826c <itoa_simple>
	//itoa(battery,buffer,10);
	
	display_draw_small_char(3,3,buffer[0],1,1);
    8ac0:	21 e0       	ldi	r18, 0x01	; 1
    8ac2:	30 e0       	ldi	r19, 0x00	; 0
    8ac4:	49 81       	ldd	r20, Y+1	; 0x01
    8ac6:	63 e0       	ldi	r22, 0x03	; 3
    8ac8:	70 e0       	ldi	r23, 0x00	; 0
    8aca:	83 e0       	ldi	r24, 0x03	; 3
    8acc:	90 e0       	ldi	r25, 0x00	; 0
    8ace:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(7,3,buffer[1],1,1);
    8ad2:	21 e0       	ldi	r18, 0x01	; 1
    8ad4:	30 e0       	ldi	r19, 0x00	; 0
    8ad6:	4a 81       	ldd	r20, Y+2	; 0x02
    8ad8:	63 e0       	ldi	r22, 0x03	; 3
    8ada:	70 e0       	ldi	r23, 0x00	; 0
    8adc:	87 e0       	ldi	r24, 0x07	; 7
    8ade:	90 e0       	ldi	r25, 0x00	; 0
    8ae0:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(11,3,'%',1,1);
    8ae4:	21 e0       	ldi	r18, 0x01	; 1
    8ae6:	30 e0       	ldi	r19, 0x00	; 0
    8ae8:	45 e2       	ldi	r20, 0x25	; 37
    8aea:	63 e0       	ldi	r22, 0x03	; 3
    8aec:	70 e0       	ldi	r23, 0x00	; 0
    8aee:	8b e0       	ldi	r24, 0x0B	; 11
    8af0:	90 e0       	ldi	r25, 0x00	; 0
    8af2:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	
}
    8af6:	25 96       	adiw	r28, 0x05	; 5
    8af8:	cd bf       	out	0x3d, r28	; 61
    8afa:	de bf       	out	0x3e, r29	; 62
    8afc:	df 91       	pop	r29
    8afe:	cf 91       	pop	r28
    8b00:	0f 91       	pop	r16
    8b02:	08 95       	ret

00008b04 <menu_draw_config_frame>:

void menu_draw_config_frame(void) 
{
	display_draw_four_letter_word("CONF");
    8b04:	89 e7       	ldi	r24, 0x79	; 121
    8b06:	97 e2       	ldi	r25, 0x27	; 39
    8b08:	0c 94 82 23 	jmp	0x4704	; 0x4704 <display_draw_four_letter_word>

00008b0c <menu_set_env_variables>:
}

void menu_set_env_variables(void) 
{
    8b0c:	ef 92       	push	r14
    8b0e:	ff 92       	push	r15
    8b10:	0f 93       	push	r16
    8b12:	1f 93       	push	r17
    8b14:	cf 93       	push	r28
    8b16:	df 93       	push	r29
	strncpy(env.name,CLOCK_NAME,sizeof(env.name));
    8b18:	49 e1       	ldi	r20, 0x19	; 25
    8b1a:	50 e0       	ldi	r21, 0x00	; 0
    8b1c:	6e e7       	ldi	r22, 0x7E	; 126
    8b1e:	77 e2       	ldi	r23, 0x27	; 39
    8b20:	87 ec       	ldi	r24, 0xC7	; 199
    8b22:	9a e2       	ldi	r25, 0x2A	; 42
    8b24:	0e 94 75 50 	call	0xa0ea	; 0xa0ea <strncpy>
	env.id = CLOCK_ID;
    8b28:	81 e0       	ldi	r24, 0x01	; 1
    8b2a:	90 e0       	ldi	r25, 0x00	; 0
    8b2c:	80 93 c1 2a 	sts	0x2AC1, r24
    8b30:	90 93 c2 2a 	sts	0x2AC2, r25
	env.temperature[0] = '0';
    8b34:	80 e3       	ldi	r24, 0x30	; 48
    8b36:	80 93 eb 2a 	sts	0x2AEB, r24
	env.brightness = 0;
    8b3a:	10 92 2f 2b 	sts	0x2B2F, r1
	env.menu_id = 0;
    8b3e:	10 92 64 2b 	sts	0x2B64, r1
	strncpy(env.wifi_pswd,PASS, strlen(PASS));
    8b42:	8a e0       	ldi	r24, 0x0A	; 10
    8b44:	e3 e8       	ldi	r30, 0x83	; 131
    8b46:	f7 e2       	ldi	r31, 0x27	; 39
    8b48:	a2 e3       	ldi	r26, 0x32	; 50
    8b4a:	bb e2       	ldi	r27, 0x2B	; 43
    8b4c:	01 90       	ld	r0, Z+
    8b4e:	0d 92       	st	X+, r0
    8b50:	8a 95       	dec	r24
    8b52:	e1 f7       	brne	.-8      	; 0x8b4c <menu_set_env_variables+0x40>
	strncpy(env.wifi_ssid,SSID, strlen(SSID));
    8b54:	89 e0       	ldi	r24, 0x09	; 9
    8b56:	ee e8       	ldi	r30, 0x8E	; 142
    8b58:	f7 e2       	ldi	r31, 0x27	; 39
    8b5a:	ab e4       	ldi	r26, 0x4B	; 75
    8b5c:	bb e2       	ldi	r27, 0x2B	; 43
    8b5e:	01 90       	ld	r0, Z+
    8b60:	0d 92       	st	X+, r0
    8b62:	8a 95       	dec	r24
    8b64:	e1 f7       	brne	.-8      	; 0x8b5e <menu_set_env_variables+0x52>
	
	env.time.timezone = 1;
    8b66:	81 e0       	ldi	r24, 0x01	; 1
    8b68:	80 93 e9 2a 	sts	0x2AE9, r24
	env.time.DST = 0;
    8b6c:	10 92 ea 2a 	sts	0x2AEA, r1
	env.time.seconds = 0;
    8b70:	10 92 e0 2a 	sts	0x2AE0, r1
	env.time.minutes = 0;
    8b74:	10 92 e1 2a 	sts	0x2AE1, r1
	env.time.hours = 0;
    8b78:	10 92 e2 2a 	sts	0x2AE2, r1
	env.time.day = 3;
    8b7c:	c3 ee       	ldi	r28, 0xE3	; 227
    8b7e:	da e2       	ldi	r29, 0x2A	; 42
    8b80:	83 e0       	ldi	r24, 0x03	; 3
    8b82:	88 83       	st	Y, r24
	env.time.month = Februrary;
    8b84:	06 ee       	ldi	r16, 0xE6	; 230
    8b86:	1a e2       	ldi	r17, 0x2A	; 42
    8b88:	82 e0       	ldi	r24, 0x02	; 2
    8b8a:	f8 01       	movw	r30, r16
    8b8c:	80 83       	st	Z, r24
	env.time.year = 2016;
    8b8e:	37 ee       	ldi	r19, 0xE7	; 231
    8b90:	e3 2e       	mov	r14, r19
    8b92:	3a e2       	ldi	r19, 0x2A	; 42
    8b94:	f3 2e       	mov	r15, r19
    8b96:	80 ee       	ldi	r24, 0xE0	; 224
    8b98:	97 e0       	ldi	r25, 0x07	; 7
    8b9a:	f7 01       	movw	r30, r14
    8b9c:	80 83       	st	Z, r24
    8b9e:	91 83       	std	Z+1, r25	; 0x01
	env.time.weekday = time_get_weekday(env.time.day, env.time.month, env.time.year);
    8ba0:	40 ee       	ldi	r20, 0xE0	; 224
    8ba2:	57 e0       	ldi	r21, 0x07	; 7
    8ba4:	62 e0       	ldi	r22, 0x02	; 2
    8ba6:	83 e0       	ldi	r24, 0x03	; 3
    8ba8:	99 d6       	rcall	.+3378   	; 0x98dc <time_get_weekday>
    8baa:	80 93 e4 2a 	sts	0x2AE4, r24
	env.time.week = time_get_weeknumber(env.time.day, env.time.month, env.time.year);;
    8bae:	f7 01       	movw	r30, r14
    8bb0:	40 81       	ld	r20, Z
    8bb2:	51 81       	ldd	r21, Z+1	; 0x01
    8bb4:	f8 01       	movw	r30, r16
    8bb6:	60 81       	ld	r22, Z
    8bb8:	88 81       	ld	r24, Y
    8bba:	f5 d6       	rcall	.+3562   	; 0x99a6 <time_get_weeknumber>
    8bbc:	80 93 e5 2a 	sts	0x2AE5, r24
	
	env.alarm.hours = 0;
    8bc0:	10 92 66 2b 	sts	0x2B66, r1
	env.alarm.minutes = 0;
    8bc4:	10 92 65 2b 	sts	0x2B65, r1
	
	env.runtime = 0;
    8bc8:	10 92 c3 2a 	sts	0x2AC3, r1
    8bcc:	10 92 c4 2a 	sts	0x2AC4, r1
    8bd0:	10 92 c5 2a 	sts	0x2AC5, r1
    8bd4:	10 92 c6 2a 	sts	0x2AC6, r1
}
    8bd8:	df 91       	pop	r29
    8bda:	cf 91       	pop	r28
    8bdc:	1f 91       	pop	r17
    8bde:	0f 91       	pop	r16
    8be0:	ff 90       	pop	r15
    8be2:	ef 90       	pop	r14
    8be4:	08 95       	ret

00008be6 <menu_configure_brightnesss>:
	}	
	return MENU_SUCCESS;
}

void menu_configure_brightnesss(void) 
{	
    8be6:	0f 93       	push	r16
	bool quit = false;
	
	ht1632c_set_brightness(env.brightness);
    8be8:	80 91 2f 2b 	lds	r24, 0x2B2F
    8bec:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <ht1632c_set_brightness>
	display_draw_filled_rect(0,7,env.brightness+1,2,1);
    8bf0:	40 91 2f 2b 	lds	r20, 0x2B2F
    8bf4:	4f 5f       	subi	r20, 0xFF	; 255
    8bf6:	01 e0       	ldi	r16, 0x01	; 1
    8bf8:	22 e0       	ldi	r18, 0x02	; 2
    8bfa:	67 e0       	ldi	r22, 0x07	; 7
    8bfc:	80 e0       	ldi	r24, 0x00	; 0
    8bfe:	0e 94 cf 20 	call	0x419e	; 0x419e <display_draw_filled_rect>
	display_refresh_screen();
    8c02:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
	
	while(!quit) {
		btn_status = btn_check_press();
    8c06:	0e 94 61 11 	call	0x22c2	; 0x22c2 <btn_check_press>
    8c0a:	80 93 4b 2c 	sts	0x2C4B, r24

		switch(btn_status) {
    8c0e:	80 91 4b 2c 	lds	r24, 0x2C4B
    8c12:	82 30       	cpi	r24, 0x02	; 2
    8c14:	09 f4       	brne	.+2      	; 0x8c18 <menu_configure_brightnesss+0x32>
    8c16:	49 c0       	rjmp	.+146    	; 0x8caa <menu_configure_brightnesss+0xc4>
    8c18:	18 f4       	brcc	.+6      	; 0x8c20 <menu_configure_brightnesss+0x3a>
    8c1a:	81 30       	cpi	r24, 0x01	; 1
    8c1c:	69 f1       	breq	.+90     	; 0x8c78 <menu_configure_brightnesss+0x92>
    8c1e:	4b c0       	rjmp	.+150    	; 0x8cb6 <menu_configure_brightnesss+0xd0>
    8c20:	83 30       	cpi	r24, 0x03	; 3
    8c22:	c9 f1       	breq	.+114    	; 0x8c96 <menu_configure_brightnesss+0xb0>
    8c24:	84 30       	cpi	r24, 0x04	; 4
    8c26:	09 f0       	breq	.+2      	; 0x8c2a <menu_configure_brightnesss+0x44>
    8c28:	46 c0       	rjmp	.+140    	; 0x8cb6 <menu_configure_brightnesss+0xd0>
			case BTN4:
				if (env.brightness < 15) {
    8c2a:	40 91 2f 2b 	lds	r20, 0x2B2F
    8c2e:	4f 30       	cpi	r20, 0x0F	; 15
    8c30:	cc f4       	brge	.+50     	; 0x8c64 <menu_configure_brightnesss+0x7e>
					display_draw_filled_rect(0,7,env.brightness+1,2,0);
    8c32:	4f 5f       	subi	r20, 0xFF	; 255
    8c34:	00 e0       	ldi	r16, 0x00	; 0
    8c36:	22 e0       	ldi	r18, 0x02	; 2
    8c38:	67 e0       	ldi	r22, 0x07	; 7
    8c3a:	80 e0       	ldi	r24, 0x00	; 0
    8c3c:	0e 94 cf 20 	call	0x419e	; 0x419e <display_draw_filled_rect>
					ht1632c_set_brightness(++env.brightness);
    8c40:	80 91 2f 2b 	lds	r24, 0x2B2F
    8c44:	8f 5f       	subi	r24, 0xFF	; 255
    8c46:	80 93 2f 2b 	sts	0x2B2F, r24
    8c4a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <ht1632c_set_brightness>
					display_draw_filled_rect(0,7,env.brightness+1,2,1);
    8c4e:	40 91 2f 2b 	lds	r20, 0x2B2F
    8c52:	4f 5f       	subi	r20, 0xFF	; 255
    8c54:	01 e0       	ldi	r16, 0x01	; 1
    8c56:	22 e0       	ldi	r18, 0x02	; 2
    8c58:	67 e0       	ldi	r22, 0x07	; 7
    8c5a:	80 e0       	ldi	r24, 0x00	; 0
    8c5c:	0e 94 cf 20 	call	0x419e	; 0x419e <display_draw_filled_rect>
					display_refresh_screen();
    8c60:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
    8c64:	2f ef       	ldi	r18, 0xFF	; 255
    8c66:	83 ec       	ldi	r24, 0xC3	; 195
    8c68:	99 e0       	ldi	r25, 0x09	; 9
    8c6a:	21 50       	subi	r18, 0x01	; 1
    8c6c:	80 40       	sbci	r24, 0x00	; 0
    8c6e:	90 40       	sbci	r25, 0x00	; 0
    8c70:	e1 f7       	brne	.-8      	; 0x8c6a <menu_configure_brightnesss+0x84>
    8c72:	00 c0       	rjmp	.+0      	; 0x8c74 <menu_configure_brightnesss+0x8e>
    8c74:	00 00       	nop
    8c76:	c7 cf       	rjmp	.-114    	; 0x8c06 <menu_configure_brightnesss+0x20>
				}
				_delay_ms(100);
				break;
			case BTN1:
				if (env.brightness > 0) {
    8c78:	40 91 2f 2b 	lds	r20, 0x2B2F
    8c7c:	14 16       	cp	r1, r20
    8c7e:	94 f7       	brge	.-28     	; 0x8c64 <menu_configure_brightnesss+0x7e>
					display_draw_filled_rect(0,7,env.brightness+1,2,0);
    8c80:	4f 5f       	subi	r20, 0xFF	; 255
    8c82:	00 e0       	ldi	r16, 0x00	; 0
    8c84:	22 e0       	ldi	r18, 0x02	; 2
    8c86:	67 e0       	ldi	r22, 0x07	; 7
    8c88:	80 e0       	ldi	r24, 0x00	; 0
    8c8a:	0e 94 cf 20 	call	0x419e	; 0x419e <display_draw_filled_rect>
					ht1632c_set_brightness(--env.brightness);
    8c8e:	80 91 2f 2b 	lds	r24, 0x2B2F
    8c92:	81 50       	subi	r24, 0x01	; 1
    8c94:	d8 cf       	rjmp	.-80     	; 0x8c46 <menu_configure_brightnesss+0x60>
					display_refresh_screen();
				}
				_delay_ms(100);
				break;
			case BTN3:
				display_slide_out_to_bottom();
    8c96:	0e 94 6f 24 	call	0x48de	; 0x48de <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("BRIGHTNESS SET",false);
    8c9a:	60 e0       	ldi	r22, 0x00	; 0
    8c9c:	88 e9       	ldi	r24, 0x98	; 152
    8c9e:	97 e2       	ldi	r25, 0x27	; 39
    8ca0:	0e 94 a3 22 	call	0x4546	; 0x4546 <display_print_scrolling_text>
				_delay_ms(100);
				btn_status = NO_BTN;
				break;
		}
	}
}
    8ca4:	0f 91       	pop	r16
				display_slide_out_to_bottom();
#ifdef SHOW_MANUAL
				display_print_scrolling_text("BRIGHTNESS SET",false);
#endif
				quit = true;
				EEPROM_WriteEnv();
    8ca6:	0c 94 bd 08 	jmp	0x117a	; 0x117a <EEPROM_WriteEnv>
				break;
			case BTN2:
#ifdef SHOW_MANUAL
				display_print_scrolling_text("EXIT",false);
    8caa:	60 e0       	ldi	r22, 0x00	; 0
    8cac:	87 ea       	ldi	r24, 0xA7	; 167
    8cae:	97 e2       	ldi	r25, 0x27	; 39
				_delay_ms(100);
				btn_status = NO_BTN;
				break;
		}
	}
}
    8cb0:	0f 91       	pop	r16
				quit = true;
				EEPROM_WriteEnv();
				break;
			case BTN2:
#ifdef SHOW_MANUAL
				display_print_scrolling_text("EXIT",false);
    8cb2:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <display_print_scrolling_text>
    8cb6:	2f ef       	ldi	r18, 0xFF	; 255
    8cb8:	83 ec       	ldi	r24, 0xC3	; 195
    8cba:	99 e0       	ldi	r25, 0x09	; 9
    8cbc:	21 50       	subi	r18, 0x01	; 1
    8cbe:	80 40       	sbci	r24, 0x00	; 0
    8cc0:	90 40       	sbci	r25, 0x00	; 0
    8cc2:	e1 f7       	brne	.-8      	; 0x8cbc <menu_configure_brightnesss+0xd6>
    8cc4:	00 c0       	rjmp	.+0      	; 0x8cc6 <menu_configure_brightnesss+0xe0>
    8cc6:	00 00       	nop
#endif
				return;
			default:
				_delay_ms(100);
				btn_status = NO_BTN;
    8cc8:	10 92 4b 2c 	sts	0x2C4B, r1
				break;
    8ccc:	9c cf       	rjmp	.-200    	; 0x8c06 <menu_configure_brightnesss+0x20>

00008cce <menu_set_time>:
		}
	}
}

uint8_t menu_set_time(void) 
{	
    8cce:	0f 93       	push	r16
    8cd0:	1f 93       	push	r17
    8cd2:	cf 93       	push	r28
    8cd4:	df 93       	push	r29
    8cd6:	00 d0       	rcall	.+0      	; 0x8cd8 <menu_set_time+0xa>
    8cd8:	1f 92       	push	r1
    8cda:	cd b7       	in	r28, 0x3d	; 61
    8cdc:	de b7       	in	r29, 0x3e	; 62
	bool next = false;
	char buffer[3];
	
	display_draw_three_letter_word("GMT");
    8cde:	8c ea       	ldi	r24, 0xAC	; 172
    8ce0:	97 e2       	ldi	r25, 0x27	; 39
    8ce2:	0e 94 ab 23 	call	0x4756	; 0x4756 <display_draw_three_letter_word>
	display_slide_in_from_right();
    8ce6:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    8cea:	2f ef       	ldi	r18, 0xFF	; 255
    8cec:	87 ea       	ldi	r24, 0xA7	; 167
    8cee:	91 e6       	ldi	r25, 0x61	; 97
    8cf0:	21 50       	subi	r18, 0x01	; 1
    8cf2:	80 40       	sbci	r24, 0x00	; 0
    8cf4:	90 40       	sbci	r25, 0x00	; 0
    8cf6:	e1 f7       	brne	.-8      	; 0x8cf0 <menu_set_time+0x22>
    8cf8:	00 c0       	rjmp	.+0      	; 0x8cfa <menu_set_time+0x2c>
    8cfa:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8cfc:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	itoa_simple(buffer,env.time.timezone);
    8d00:	40 91 e9 2a 	lds	r20, 0x2AE9
    8d04:	55 27       	eor	r21, r21
    8d06:	47 fd       	sbrc	r20, 7
    8d08:	50 95       	com	r21
    8d0a:	65 2f       	mov	r22, r21
    8d0c:	75 2f       	mov	r23, r21
    8d0e:	ce 01       	movw	r24, r28
    8d10:	01 96       	adiw	r24, 0x01	; 1
    8d12:	ac da       	rcall	.-2728   	; 0x826c <itoa_simple>
	display_draw_small_char(3,10,'G',1,1);
    8d14:	01 e0       	ldi	r16, 0x01	; 1
    8d16:	21 e0       	ldi	r18, 0x01	; 1
    8d18:	30 e0       	ldi	r19, 0x00	; 0
    8d1a:	47 e4       	ldi	r20, 0x47	; 71
    8d1c:	6a e0       	ldi	r22, 0x0A	; 10
    8d1e:	70 e0       	ldi	r23, 0x00	; 0
    8d20:	83 e0       	ldi	r24, 0x03	; 3
    8d22:	90 e0       	ldi	r25, 0x00	; 0
    8d24:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(7,10,'M',1,1);
    8d28:	21 e0       	ldi	r18, 0x01	; 1
    8d2a:	30 e0       	ldi	r19, 0x00	; 0
    8d2c:	4d e4       	ldi	r20, 0x4D	; 77
    8d2e:	6a e0       	ldi	r22, 0x0A	; 10
    8d30:	70 e0       	ldi	r23, 0x00	; 0
    8d32:	87 e0       	ldi	r24, 0x07	; 7
    8d34:	90 e0       	ldi	r25, 0x00	; 0
    8d36:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_draw_small_char(11,10,'T',1,1);
    8d3a:	21 e0       	ldi	r18, 0x01	; 1
    8d3c:	30 e0       	ldi	r19, 0x00	; 0
    8d3e:	44 e5       	ldi	r20, 0x54	; 84
    8d40:	6a e0       	ldi	r22, 0x0A	; 10
    8d42:	70 e0       	ldi	r23, 0x00	; 0
    8d44:	8b e0       	ldi	r24, 0x0B	; 11
    8d46:	90 e0       	ldi	r25, 0x00	; 0
    8d48:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	if (env.time.timezone > 0) {
    8d4c:	80 91 e9 2a 	lds	r24, 0x2AE9
    8d50:	18 16       	cp	r1, r24
    8d52:	24 f4       	brge	.+8      	; 0x8d5c <menu_set_time+0x8e>
		display_draw_small_char(5,3,'+',1,1);
    8d54:	21 e0       	ldi	r18, 0x01	; 1
    8d56:	30 e0       	ldi	r19, 0x00	; 0
    8d58:	4b e2       	ldi	r20, 0x2B	; 43
    8d5a:	06 c0       	rjmp	.+12     	; 0x8d68 <menu_set_time+0x9a>
		} else if (env.time.timezone < 0) {
    8d5c:	88 23       	and	r24, r24
    8d5e:	51 f0       	breq	.+20     	; 0x8d74 <menu_set_time+0xa6>
		display_draw_small_char(5,3,'-',1,1);
    8d60:	01 e0       	ldi	r16, 0x01	; 1
    8d62:	21 e0       	ldi	r18, 0x01	; 1
    8d64:	30 e0       	ldi	r19, 0x00	; 0
    8d66:	4d e2       	ldi	r20, 0x2D	; 45
    8d68:	63 e0       	ldi	r22, 0x03	; 3
    8d6a:	70 e0       	ldi	r23, 0x00	; 0
    8d6c:	85 e0       	ldi	r24, 0x05	; 5
    8d6e:	90 e0       	ldi	r25, 0x00	; 0
    8d70:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	}
	display_draw_small_char(9,3,buffer[0],1,1);
    8d74:	01 e0       	ldi	r16, 0x01	; 1
    8d76:	21 e0       	ldi	r18, 0x01	; 1
    8d78:	30 e0       	ldi	r19, 0x00	; 0
    8d7a:	49 81       	ldd	r20, Y+1	; 0x01
    8d7c:	63 e0       	ldi	r22, 0x03	; 3
    8d7e:	70 e0       	ldi	r23, 0x00	; 0
    8d80:	89 e0       	ldi	r24, 0x09	; 9
    8d82:	90 e0       	ldi	r25, 0x00	; 0
    8d84:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
	display_slide_in_from_right();
    8d88:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
	//ht1632c_blink(true);
	
	while(!next) {
		btn_status = btn_check_press();
    8d8c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <btn_check_press>
    8d90:	80 93 4b 2c 	sts	0x2C4B, r24
		switch(btn_status) {
    8d94:	80 91 4b 2c 	lds	r24, 0x2C4B
    8d98:	82 30       	cpi	r24, 0x02	; 2
    8d9a:	09 f4       	brne	.+2      	; 0x8d9e <menu_set_time+0xd0>
    8d9c:	82 c2       	rjmp	.+1284   	; 0x92a2 <menu_set_time+0x5d4>
    8d9e:	18 f4       	brcc	.+6      	; 0x8da6 <menu_set_time+0xd8>
    8da0:	81 30       	cpi	r24, 0x01	; 1
    8da2:	49 f1       	breq	.+82     	; 0x8df6 <menu_set_time+0x128>
    8da4:	9d c0       	rjmp	.+314    	; 0x8ee0 <menu_set_time+0x212>
    8da6:	83 30       	cpi	r24, 0x03	; 3
    8da8:	09 f4       	brne	.+2      	; 0x8dac <menu_set_time+0xde>
    8daa:	75 c0       	rjmp	.+234    	; 0x8e96 <menu_set_time+0x1c8>
    8dac:	84 30       	cpi	r24, 0x04	; 4
    8dae:	09 f0       	breq	.+2      	; 0x8db2 <menu_set_time+0xe4>
    8db0:	97 c0       	rjmp	.+302    	; 0x8ee0 <menu_set_time+0x212>
			case BTN4:
				if (env.time.timezone < 9) {
    8db2:	80 91 e9 2a 	lds	r24, 0x2AE9
    8db6:	89 30       	cpi	r24, 0x09	; 9
    8db8:	a4 f4       	brge	.+40     	; 0x8de2 <menu_set_time+0x114>
					display_clear_buffer();
    8dba:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
					env.time.timezone++;
    8dbe:	40 91 e9 2a 	lds	r20, 0x2AE9
    8dc2:	4f 5f       	subi	r20, 0xFF	; 255
    8dc4:	21 c0       	rjmp	.+66     	; 0x8e08 <menu_set_time+0x13a>
					display_draw_small_char(11,10,'T',1,1);
					if (env.time.timezone > 0) {
						display_draw_small_char(5,3,'+',1,1);
						display_draw_small_char(9,3,buffer[0],1,1);
					} else if (env.time.timezone < 0) {
						display_draw_small_char(5,3,'-',1,1);
    8dc6:	01 e0       	ldi	r16, 0x01	; 1
    8dc8:	21 e0       	ldi	r18, 0x01	; 1
    8dca:	30 e0       	ldi	r19, 0x00	; 0
					display_draw_small_char(7,10,'M',1,1);
					display_draw_small_char(11,10,'T',1,1);
					if (env.time.timezone > 0) {
						display_draw_small_char(5,3,'+',1,1);
						display_draw_small_char(9,3,buffer[0],1,1);
					} else if (env.time.timezone < 0) {
    8dcc:	81 11       	cpse	r24, r1
    8dce:	58 c0       	rjmp	.+176    	; 0x8e80 <menu_set_time+0x1b2>
						display_draw_small_char(9,3,buffer[0],1,1);
					} else if (env.time.timezone < 0) {
						display_draw_small_char(5,3,'-',1,1);
						display_draw_small_char(9,3,buffer[1],1,1);
					} else {
						display_draw_small_char(8,3,'0',1,1);
    8dd0:	40 e3       	ldi	r20, 0x30	; 48
    8dd2:	63 e0       	ldi	r22, 0x03	; 3
    8dd4:	70 e0       	ldi	r23, 0x00	; 0
    8dd6:	88 e0       	ldi	r24, 0x08	; 8
    8dd8:	90 e0       	ldi	r25, 0x00	; 0
    8dda:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
					}
					display_refresh_screen();
    8dde:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
    8de2:	2f ef       	ldi	r18, 0xFF	; 255
    8de4:	89 e6       	ldi	r24, 0x69	; 105
    8de6:	98 e1       	ldi	r25, 0x18	; 24
    8de8:	21 50       	subi	r18, 0x01	; 1
    8dea:	80 40       	sbci	r24, 0x00	; 0
    8dec:	90 40       	sbci	r25, 0x00	; 0
    8dee:	e1 f7       	brne	.-8      	; 0x8de8 <menu_set_time+0x11a>
    8df0:	00 c0       	rjmp	.+0      	; 0x8df2 <menu_set_time+0x124>
    8df2:	00 00       	nop
    8df4:	cb cf       	rjmp	.-106    	; 0x8d8c <menu_set_time+0xbe>
				}
				_delay_ms(250);
				break;
			case BTN1:
				if (env.time.timezone > -9) {
    8df6:	80 91 e9 2a 	lds	r24, 0x2AE9
    8dfa:	88 3f       	cpi	r24, 0xF8	; 248
    8dfc:	94 f3       	brlt	.-28     	; 0x8de2 <menu_set_time+0x114>
					display_clear_buffer();
    8dfe:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
					env.time.timezone--;
    8e02:	40 91 e9 2a 	lds	r20, 0x2AE9
    8e06:	41 50       	subi	r20, 0x01	; 1
    8e08:	40 93 e9 2a 	sts	0x2AE9, r20
					itoa_simple(buffer,env.time.timezone);
    8e0c:	55 27       	eor	r21, r21
    8e0e:	47 fd       	sbrc	r20, 7
    8e10:	50 95       	com	r21
    8e12:	65 2f       	mov	r22, r21
    8e14:	75 2f       	mov	r23, r21
    8e16:	ce 01       	movw	r24, r28
    8e18:	01 96       	adiw	r24, 0x01	; 1
    8e1a:	28 da       	rcall	.-2992   	; 0x826c <itoa_simple>
					display_draw_small_char(3,10,'G',1,1);
    8e1c:	01 e0       	ldi	r16, 0x01	; 1
    8e1e:	21 e0       	ldi	r18, 0x01	; 1
    8e20:	30 e0       	ldi	r19, 0x00	; 0
    8e22:	47 e4       	ldi	r20, 0x47	; 71
    8e24:	6a e0       	ldi	r22, 0x0A	; 10
    8e26:	70 e0       	ldi	r23, 0x00	; 0
    8e28:	83 e0       	ldi	r24, 0x03	; 3
    8e2a:	90 e0       	ldi	r25, 0x00	; 0
    8e2c:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
					display_draw_small_char(7,10,'M',1,1);
    8e30:	21 e0       	ldi	r18, 0x01	; 1
    8e32:	30 e0       	ldi	r19, 0x00	; 0
    8e34:	4d e4       	ldi	r20, 0x4D	; 77
    8e36:	6a e0       	ldi	r22, 0x0A	; 10
    8e38:	70 e0       	ldi	r23, 0x00	; 0
    8e3a:	87 e0       	ldi	r24, 0x07	; 7
    8e3c:	90 e0       	ldi	r25, 0x00	; 0
    8e3e:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
					display_draw_small_char(11,10,'T',1,1);
    8e42:	21 e0       	ldi	r18, 0x01	; 1
    8e44:	30 e0       	ldi	r19, 0x00	; 0
    8e46:	44 e5       	ldi	r20, 0x54	; 84
    8e48:	6a e0       	ldi	r22, 0x0A	; 10
    8e4a:	70 e0       	ldi	r23, 0x00	; 0
    8e4c:	8b e0       	ldi	r24, 0x0B	; 11
    8e4e:	90 e0       	ldi	r25, 0x00	; 0
    8e50:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
					if (env.time.timezone > 0) {
    8e54:	80 91 e9 2a 	lds	r24, 0x2AE9
    8e58:	18 16       	cp	r1, r24
    8e5a:	0c f0       	brlt	.+2      	; 0x8e5e <menu_set_time+0x190>
    8e5c:	b4 cf       	rjmp	.-152    	; 0x8dc6 <menu_set_time+0xf8>
						display_draw_small_char(5,3,'+',1,1);
    8e5e:	21 e0       	ldi	r18, 0x01	; 1
    8e60:	30 e0       	ldi	r19, 0x00	; 0
    8e62:	4b e2       	ldi	r20, 0x2B	; 43
    8e64:	63 e0       	ldi	r22, 0x03	; 3
    8e66:	70 e0       	ldi	r23, 0x00	; 0
    8e68:	85 e0       	ldi	r24, 0x05	; 5
    8e6a:	90 e0       	ldi	r25, 0x00	; 0
    8e6c:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
						display_draw_small_char(9,3,buffer[0],1,1);
    8e70:	21 e0       	ldi	r18, 0x01	; 1
    8e72:	30 e0       	ldi	r19, 0x00	; 0
    8e74:	49 81       	ldd	r20, Y+1	; 0x01
    8e76:	63 e0       	ldi	r22, 0x03	; 3
    8e78:	70 e0       	ldi	r23, 0x00	; 0
    8e7a:	89 e0       	ldi	r24, 0x09	; 9
    8e7c:	90 e0       	ldi	r25, 0x00	; 0
    8e7e:	ad cf       	rjmp	.-166    	; 0x8dda <menu_set_time+0x10c>
					} else if (env.time.timezone < 0) {
						display_draw_small_char(5,3,'-',1,1);
    8e80:	4d e2       	ldi	r20, 0x2D	; 45
    8e82:	63 e0       	ldi	r22, 0x03	; 3
    8e84:	70 e0       	ldi	r23, 0x00	; 0
    8e86:	85 e0       	ldi	r24, 0x05	; 5
    8e88:	90 e0       	ldi	r25, 0x00	; 0
    8e8a:	0e 94 fb 22 	call	0x45f6	; 0x45f6 <display_draw_small_char>
						display_draw_small_char(9,3,buffer[1],1,1);
    8e8e:	21 e0       	ldi	r18, 0x01	; 1
    8e90:	30 e0       	ldi	r19, 0x00	; 0
    8e92:	4a 81       	ldd	r20, Y+2	; 0x02
    8e94:	f0 cf       	rjmp	.-32     	; 0x8e76 <menu_set_time+0x1a8>
    8e96:	2f ef       	ldi	r18, 0xFF	; 255
    8e98:	89 e6       	ldi	r24, 0x69	; 105
    8e9a:	98 e1       	ldi	r25, 0x18	; 24
    8e9c:	21 50       	subi	r18, 0x01	; 1
    8e9e:	80 40       	sbci	r24, 0x00	; 0
    8ea0:	90 40       	sbci	r25, 0x00	; 0
    8ea2:	e1 f7       	brne	.-8      	; 0x8e9c <menu_set_time+0x1ce>
    8ea4:	00 c0       	rjmp	.+0      	; 0x8ea6 <menu_set_time+0x1d8>
    8ea6:	00 00       	nop
				btn_status = NO_BTN;
				break;
		}
	}
	next = false;
	display_slide_out_to_left();
    8ea8:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	display_draw_three_letter_word("DST");
    8eac:	80 eb       	ldi	r24, 0xB0	; 176
    8eae:	97 e2       	ldi	r25, 0x27	; 39
    8eb0:	0e 94 ab 23 	call	0x4756	; 0x4756 <display_draw_three_letter_word>
	display_slide_in_from_right();
    8eb4:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    8eb8:	2f ef       	ldi	r18, 0xFF	; 255
    8eba:	87 ea       	ldi	r24, 0xA7	; 167
    8ebc:	91 e6       	ldi	r25, 0x61	; 97
    8ebe:	21 50       	subi	r18, 0x01	; 1
    8ec0:	80 40       	sbci	r24, 0x00	; 0
    8ec2:	90 40       	sbci	r25, 0x00	; 0
    8ec4:	e1 f7       	brne	.-8      	; 0x8ebe <menu_set_time+0x1f0>
    8ec6:	00 c0       	rjmp	.+0      	; 0x8ec8 <menu_set_time+0x1fa>
    8ec8:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8eca:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	if (env.time.DST) {
    8ece:	80 91 ea 2a 	lds	r24, 0x2AEA
    8ed2:	88 23       	and	r24, r24
    8ed4:	41 f0       	breq	.+16     	; 0x8ee6 <menu_set_time+0x218>
		display_draw_four_letter_word(" ON ");
    8ed6:	8e eb       	ldi	r24, 0xBE	; 190
    8ed8:	97 e2       	ldi	r25, 0x27	; 39
    8eda:	0e 94 82 23 	call	0x4704	; 0x4704 <display_draw_four_letter_word>
    8ede:	07 c0       	rjmp	.+14     	; 0x8eee <menu_set_time+0x220>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    8ee0:	10 92 4b 2c 	sts	0x2C4B, r1
				break;
    8ee4:	53 cf       	rjmp	.-346    	; 0x8d8c <menu_set_time+0xbe>
	_delay_ms(1000);
	display_slide_out_to_left();
	if (env.time.DST) {
		display_draw_four_letter_word(" ON ");
	} else {
		display_draw_three_letter_word("OFF");
    8ee6:	83 ec       	ldi	r24, 0xC3	; 195
    8ee8:	97 e2       	ldi	r25, 0x27	; 39
    8eea:	0e 94 ab 23 	call	0x4756	; 0x4756 <display_draw_three_letter_word>
	}
	display_slide_in_from_right();
    8eee:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
			case BTN4:
				display_clear_buffer();
				env.time.DST = 1;
    8ef2:	11 e0       	ldi	r17, 0x01	; 1
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
    8ef4:	0e 94 61 11 	call	0x22c2	; 0x22c2 <btn_check_press>
    8ef8:	80 93 4b 2c 	sts	0x2C4B, r24
		switch(btn_status) {
    8efc:	80 91 4b 2c 	lds	r24, 0x2C4B
    8f00:	82 30       	cpi	r24, 0x02	; 2
    8f02:	09 f4       	brne	.+2      	; 0x8f06 <menu_set_time+0x238>
    8f04:	ce c1       	rjmp	.+924    	; 0x92a2 <menu_set_time+0x5d4>
    8f06:	60 f4       	brcc	.+24     	; 0x8f20 <menu_set_time+0x252>
    8f08:	81 30       	cpi	r24, 0x01	; 1
    8f0a:	09 f0       	breq	.+2      	; 0x8f0e <menu_set_time+0x240>
    8f0c:	45 c0       	rjmp	.+138    	; 0x8f98 <menu_set_time+0x2ca>
				display_draw_four_letter_word(" ON ");
				display_refresh_screen();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    8f0e:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				env.time.DST = 0;
    8f12:	10 92 ea 2a 	sts	0x2AEA, r1
				display_draw_three_letter_word("OFF");
    8f16:	83 ec       	ldi	r24, 0xC3	; 195
    8f18:	97 e2       	ldi	r25, 0x27	; 39
    8f1a:	0e 94 ab 23 	call	0x4756	; 0x4756 <display_draw_three_letter_word>
    8f1e:	0c c0       	rjmp	.+24     	; 0x8f38 <menu_set_time+0x26a>
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8f20:	83 30       	cpi	r24, 0x03	; 3
    8f22:	b1 f0       	breq	.+44     	; 0x8f50 <menu_set_time+0x282>
    8f24:	84 30       	cpi	r24, 0x04	; 4
    8f26:	c1 f5       	brne	.+112    	; 0x8f98 <menu_set_time+0x2ca>
			case BTN4:
				display_clear_buffer();
    8f28:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				env.time.DST = 1;
    8f2c:	10 93 ea 2a 	sts	0x2AEA, r17
				display_draw_four_letter_word(" ON ");
    8f30:	8e eb       	ldi	r24, 0xBE	; 190
    8f32:	97 e2       	ldi	r25, 0x27	; 39
    8f34:	0e 94 82 23 	call	0x4704	; 0x4704 <display_draw_four_letter_word>
				break;
			case BTN1:
				display_clear_buffer();
				env.time.DST = 0;
				display_draw_three_letter_word("OFF");
				display_refresh_screen();
    8f38:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <display_refresh_screen>
    8f3c:	2f ef       	ldi	r18, 0xFF	; 255
    8f3e:	89 e6       	ldi	r24, 0x69	; 105
    8f40:	98 e1       	ldi	r25, 0x18	; 24
    8f42:	21 50       	subi	r18, 0x01	; 1
    8f44:	80 40       	sbci	r24, 0x00	; 0
    8f46:	90 40       	sbci	r25, 0x00	; 0
    8f48:	e1 f7       	brne	.-8      	; 0x8f42 <menu_set_time+0x274>
    8f4a:	00 c0       	rjmp	.+0      	; 0x8f4c <menu_set_time+0x27e>
    8f4c:	00 00       	nop
    8f4e:	d2 cf       	rjmp	.-92     	; 0x8ef4 <menu_set_time+0x226>
    8f50:	2f ef       	ldi	r18, 0xFF	; 255
    8f52:	89 e6       	ldi	r24, 0x69	; 105
    8f54:	98 e1       	ldi	r25, 0x18	; 24
    8f56:	21 50       	subi	r18, 0x01	; 1
    8f58:	80 40       	sbci	r24, 0x00	; 0
    8f5a:	90 40       	sbci	r25, 0x00	; 0
    8f5c:	e1 f7       	brne	.-8      	; 0x8f56 <menu_set_time+0x288>
    8f5e:	00 c0       	rjmp	.+0      	; 0x8f60 <menu_set_time+0x292>
    8f60:	00 00       	nop
				btn_status = NO_BTN;
				break;
		}
	}
	next = false;
	display_slide_out_to_left();
    8f62:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	display_draw_three_letter_word("HRS");
    8f66:	87 ec       	ldi	r24, 0xC7	; 199
    8f68:	97 e2       	ldi	r25, 0x27	; 39
    8f6a:	0e 94 ab 23 	call	0x4756	; 0x4756 <display_draw_three_letter_word>
	display_slide_in_from_right();
    8f6e:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    8f72:	2f ef       	ldi	r18, 0xFF	; 255
    8f74:	87 ea       	ldi	r24, 0xA7	; 167
    8f76:	91 e6       	ldi	r25, 0x61	; 97
    8f78:	21 50       	subi	r18, 0x01	; 1
    8f7a:	80 40       	sbci	r24, 0x00	; 0
    8f7c:	90 40       	sbci	r25, 0x00	; 0
    8f7e:	e1 f7       	brne	.-8      	; 0x8f78 <menu_set_time+0x2aa>
    8f80:	00 c0       	rjmp	.+0      	; 0x8f82 <menu_set_time+0x2b4>
    8f82:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8f84:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	rtc_update_display(5,env.time.hours);
    8f88:	60 91 e2 2a 	lds	r22, 0x2AE2
    8f8c:	85 e0       	ldi	r24, 0x05	; 5
    8f8e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
	display_slide_in_from_right();
    8f92:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    8f96:	17 c0       	rjmp	.+46     	; 0x8fc6 <menu_set_time+0x2f8>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    8f98:	10 92 4b 2c 	sts	0x2C4B, r1
				break;
    8f9c:	ab cf       	rjmp	.-170    	; 0x8ef4 <menu_set_time+0x226>
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8f9e:	83 30       	cpi	r24, 0x03	; 3
    8fa0:	d8 f0       	brcs	.+54     	; 0x8fd8 <menu_set_time+0x30a>
    8fa2:	83 30       	cpi	r24, 0x03	; 3
    8fa4:	01 f1       	breq	.+64     	; 0x8fe6 <menu_set_time+0x318>
    8fa6:	84 30       	cpi	r24, 0x04	; 4
    8fa8:	09 f0       	breq	.+2      	; 0x8fac <menu_set_time+0x2de>
    8faa:	41 c0       	rjmp	.+130    	; 0x902e <menu_set_time+0x360>
			case BTN4:
				display_clear_buffer();
    8fac:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				display_draw_and_increment_hour();
    8fb0:	0e 94 bb 24 	call	0x4976	; 0x4976 <display_draw_and_increment_hour>
    8fb4:	2f ef       	ldi	r18, 0xFF	; 255
    8fb6:	89 e6       	ldi	r24, 0x69	; 105
    8fb8:	98 e1       	ldi	r25, 0x18	; 24
    8fba:	21 50       	subi	r18, 0x01	; 1
    8fbc:	80 40       	sbci	r24, 0x00	; 0
    8fbe:	90 40       	sbci	r25, 0x00	; 0
    8fc0:	e1 f7       	brne	.-8      	; 0x8fba <menu_set_time+0x2ec>
    8fc2:	00 c0       	rjmp	.+0      	; 0x8fc4 <menu_set_time+0x2f6>
    8fc4:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
    8fc6:	0e 94 61 11 	call	0x22c2	; 0x22c2 <btn_check_press>
    8fca:	80 93 4b 2c 	sts	0x2C4B, r24
		switch(btn_status) {
    8fce:	80 91 4b 2c 	lds	r24, 0x2C4B
    8fd2:	82 30       	cpi	r24, 0x02	; 2
    8fd4:	21 f7       	brne	.-56     	; 0x8f9e <menu_set_time+0x2d0>
    8fd6:	65 c1       	rjmp	.+714    	; 0x92a2 <menu_set_time+0x5d4>
    8fd8:	81 30       	cpi	r24, 0x01	; 1
    8fda:	49 f5       	brne	.+82     	; 0x902e <menu_set_time+0x360>
				display_clear_buffer();
				display_draw_and_increment_hour();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    8fdc:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				display_draw_and_decrement_hour();
    8fe0:	0e 94 cb 24 	call	0x4996	; 0x4996 <display_draw_and_decrement_hour>
    8fe4:	e7 cf       	rjmp	.-50     	; 0x8fb4 <menu_set_time+0x2e6>
    8fe6:	2f ef       	ldi	r18, 0xFF	; 255
    8fe8:	89 e6       	ldi	r24, 0x69	; 105
    8fea:	98 e1       	ldi	r25, 0x18	; 24
    8fec:	21 50       	subi	r18, 0x01	; 1
    8fee:	80 40       	sbci	r24, 0x00	; 0
    8ff0:	90 40       	sbci	r25, 0x00	; 0
    8ff2:	e1 f7       	brne	.-8      	; 0x8fec <menu_set_time+0x31e>
    8ff4:	00 c0       	rjmp	.+0      	; 0x8ff6 <menu_set_time+0x328>
    8ff6:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    8ff8:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	display_draw_three_letter_word("MIN");
    8ffc:	8b ec       	ldi	r24, 0xCB	; 203
    8ffe:	97 e2       	ldi	r25, 0x27	; 39
    9000:	0e 94 ab 23 	call	0x4756	; 0x4756 <display_draw_three_letter_word>
	display_slide_in_from_right();
    9004:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    9008:	2f ef       	ldi	r18, 0xFF	; 255
    900a:	87 ea       	ldi	r24, 0xA7	; 167
    900c:	91 e6       	ldi	r25, 0x61	; 97
    900e:	21 50       	subi	r18, 0x01	; 1
    9010:	80 40       	sbci	r24, 0x00	; 0
    9012:	90 40       	sbci	r25, 0x00	; 0
    9014:	e1 f7       	brne	.-8      	; 0x900e <menu_set_time+0x340>
    9016:	00 c0       	rjmp	.+0      	; 0x9018 <menu_set_time+0x34a>
    9018:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    901a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	rtc_update_display(5,env.time.minutes);
    901e:	60 91 e1 2a 	lds	r22, 0x2AE1
    9022:	85 e0       	ldi	r24, 0x05	; 5
    9024:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
	display_slide_in_from_right();
    9028:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    902c:	17 c0       	rjmp	.+46     	; 0x905c <menu_set_time+0x38e>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    902e:	10 92 4b 2c 	sts	0x2C4B, r1
				break;
    9032:	c9 cf       	rjmp	.-110    	; 0x8fc6 <menu_set_time+0x2f8>
	//ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    9034:	83 30       	cpi	r24, 0x03	; 3
    9036:	d8 f0       	brcs	.+54     	; 0x906e <menu_set_time+0x3a0>
    9038:	83 30       	cpi	r24, 0x03	; 3
    903a:	01 f1       	breq	.+64     	; 0x907c <menu_set_time+0x3ae>
    903c:	84 30       	cpi	r24, 0x04	; 4
    903e:	09 f0       	breq	.+2      	; 0x9042 <menu_set_time+0x374>
    9040:	49 c0       	rjmp	.+146    	; 0x90d4 <menu_set_time+0x406>
			case BTN4:
				display_clear_buffer();
    9042:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				display_draw_and_increment_minute();
    9046:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <display_draw_and_increment_minute>
    904a:	2f ef       	ldi	r18, 0xFF	; 255
    904c:	89 e6       	ldi	r24, 0x69	; 105
    904e:	98 e1       	ldi	r25, 0x18	; 24
    9050:	21 50       	subi	r18, 0x01	; 1
    9052:	80 40       	sbci	r24, 0x00	; 0
    9054:	90 40       	sbci	r25, 0x00	; 0
    9056:	e1 f7       	brne	.-8      	; 0x9050 <menu_set_time+0x382>
    9058:	00 c0       	rjmp	.+0      	; 0x905a <menu_set_time+0x38c>
    905a:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
    905c:	0e 94 61 11 	call	0x22c2	; 0x22c2 <btn_check_press>
    9060:	80 93 4b 2c 	sts	0x2C4B, r24
		switch(btn_status) {
    9064:	80 91 4b 2c 	lds	r24, 0x2C4B
    9068:	82 30       	cpi	r24, 0x02	; 2
    906a:	21 f7       	brne	.-56     	; 0x9034 <menu_set_time+0x366>
    906c:	1a c1       	rjmp	.+564    	; 0x92a2 <menu_set_time+0x5d4>
    906e:	81 30       	cpi	r24, 0x01	; 1
    9070:	89 f5       	brne	.+98     	; 0x90d4 <menu_set_time+0x406>
				display_clear_buffer();
				display_draw_and_increment_minute();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    9072:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				display_draw_and_decrement_minute();
    9076:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <display_draw_and_decrement_minute>
    907a:	e7 cf       	rjmp	.-50     	; 0x904a <menu_set_time+0x37c>
    907c:	2f ef       	ldi	r18, 0xFF	; 255
    907e:	89 e6       	ldi	r24, 0x69	; 105
    9080:	98 e1       	ldi	r25, 0x18	; 24
    9082:	21 50       	subi	r18, 0x01	; 1
    9084:	80 40       	sbci	r24, 0x00	; 0
    9086:	90 40       	sbci	r25, 0x00	; 0
    9088:	e1 f7       	brne	.-8      	; 0x9082 <menu_set_time+0x3b4>
    908a:	00 c0       	rjmp	.+0      	; 0x908c <menu_set_time+0x3be>
    908c:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    908e:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	display_draw_four_letter_word("YEAR");
    9092:	8f ec       	ldi	r24, 0xCF	; 207
    9094:	97 e2       	ldi	r25, 0x27	; 39
    9096:	0e 94 82 23 	call	0x4704	; 0x4704 <display_draw_four_letter_word>
	display_slide_in_from_right();
    909a:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    909e:	2f ef       	ldi	r18, 0xFF	; 255
    90a0:	87 ea       	ldi	r24, 0xA7	; 167
    90a2:	91 e6       	ldi	r25, 0x61	; 97
    90a4:	21 50       	subi	r18, 0x01	; 1
    90a6:	80 40       	sbci	r24, 0x00	; 0
    90a8:	90 40       	sbci	r25, 0x00	; 0
    90aa:	e1 f7       	brne	.-8      	; 0x90a4 <menu_set_time+0x3d6>
    90ac:	00 c0       	rjmp	.+0      	; 0x90ae <menu_set_time+0x3e0>
    90ae:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    90b0:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	char *year = NULL;
	itoa_simple(year,env.time.year);
    90b4:	40 91 e7 2a 	lds	r20, 0x2AE7
    90b8:	50 91 e8 2a 	lds	r21, 0x2AE8
    90bc:	60 e0       	ldi	r22, 0x00	; 0
    90be:	70 e0       	ldi	r23, 0x00	; 0
    90c0:	80 e0       	ldi	r24, 0x00	; 0
    90c2:	90 e0       	ldi	r25, 0x00	; 0
    90c4:	d3 d8       	rcall	.-3674   	; 0x826c <itoa_simple>
	display_draw_four_letter_word(year);
    90c6:	80 e0       	ldi	r24, 0x00	; 0
    90c8:	90 e0       	ldi	r25, 0x00	; 0
    90ca:	0e 94 82 23 	call	0x4704	; 0x4704 <display_draw_four_letter_word>
	display_slide_in_from_right();
    90ce:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    90d2:	17 c0       	rjmp	.+46     	; 0x9102 <menu_set_time+0x434>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    90d4:	10 92 4b 2c 	sts	0x2C4B, r1
				break;
    90d8:	c1 cf       	rjmp	.-126    	; 0x905c <menu_set_time+0x38e>
	//ht1632c_blink(true);
		
	//Set year
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    90da:	83 30       	cpi	r24, 0x03	; 3
    90dc:	d8 f0       	brcs	.+54     	; 0x9114 <menu_set_time+0x446>
    90de:	83 30       	cpi	r24, 0x03	; 3
    90e0:	01 f1       	breq	.+64     	; 0x9122 <menu_set_time+0x454>
    90e2:	84 30       	cpi	r24, 0x04	; 4
    90e4:	09 f0       	breq	.+2      	; 0x90e8 <menu_set_time+0x41a>
    90e6:	41 c0       	rjmp	.+130    	; 0x916a <menu_set_time+0x49c>
			case BTN4:
				display_clear_buffer();
    90e8:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				display_draw_and_increment_year();
    90ec:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <display_draw_and_increment_year>
    90f0:	2f ef       	ldi	r18, 0xFF	; 255
    90f2:	89 e6       	ldi	r24, 0x69	; 105
    90f4:	98 e1       	ldi	r25, 0x18	; 24
    90f6:	21 50       	subi	r18, 0x01	; 1
    90f8:	80 40       	sbci	r24, 0x00	; 0
    90fa:	90 40       	sbci	r25, 0x00	; 0
    90fc:	e1 f7       	brne	.-8      	; 0x90f6 <menu_set_time+0x428>
    90fe:	00 c0       	rjmp	.+0      	; 0x9100 <menu_set_time+0x432>
    9100:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
		
	//Set year
	while(!next) {
		btn_status = btn_check_press();
    9102:	0e 94 61 11 	call	0x22c2	; 0x22c2 <btn_check_press>
    9106:	80 93 4b 2c 	sts	0x2C4B, r24
		switch(btn_status) {
    910a:	80 91 4b 2c 	lds	r24, 0x2C4B
    910e:	82 30       	cpi	r24, 0x02	; 2
    9110:	21 f7       	brne	.-56     	; 0x90da <menu_set_time+0x40c>
    9112:	c7 c0       	rjmp	.+398    	; 0x92a2 <menu_set_time+0x5d4>
    9114:	81 30       	cpi	r24, 0x01	; 1
    9116:	49 f5       	brne	.+82     	; 0x916a <menu_set_time+0x49c>
				display_clear_buffer();
				display_draw_and_increment_year();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    9118:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				display_draw_and_decrement_year();
    911c:	0e 94 5e 25 	call	0x4abc	; 0x4abc <display_draw_and_decrement_year>
    9120:	e7 cf       	rjmp	.-50     	; 0x90f0 <menu_set_time+0x422>
    9122:	2f ef       	ldi	r18, 0xFF	; 255
    9124:	89 e6       	ldi	r24, 0x69	; 105
    9126:	98 e1       	ldi	r25, 0x18	; 24
    9128:	21 50       	subi	r18, 0x01	; 1
    912a:	80 40       	sbci	r24, 0x00	; 0
    912c:	90 40       	sbci	r25, 0x00	; 0
    912e:	e1 f7       	brne	.-8      	; 0x9128 <menu_set_time+0x45a>
    9130:	00 c0       	rjmp	.+0      	; 0x9132 <menu_set_time+0x464>
    9132:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    9134:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	display_draw_four_letter_word("MNTH");
    9138:	84 ed       	ldi	r24, 0xD4	; 212
    913a:	97 e2       	ldi	r25, 0x27	; 39
    913c:	0e 94 82 23 	call	0x4704	; 0x4704 <display_draw_four_letter_word>
	display_slide_in_from_right();
    9140:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    9144:	2f ef       	ldi	r18, 0xFF	; 255
    9146:	87 ea       	ldi	r24, 0xA7	; 167
    9148:	91 e6       	ldi	r25, 0x61	; 97
    914a:	21 50       	subi	r18, 0x01	; 1
    914c:	80 40       	sbci	r24, 0x00	; 0
    914e:	90 40       	sbci	r25, 0x00	; 0
    9150:	e1 f7       	brne	.-8      	; 0x914a <menu_set_time+0x47c>
    9152:	00 c0       	rjmp	.+0      	; 0x9154 <menu_set_time+0x486>
    9154:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    9156:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	display_draw_three_letter_word(time_get_month_name(env.time.month));
    915a:	80 91 e6 2a 	lds	r24, 0x2AE6
    915e:	af d3       	rcall	.+1886   	; 0x98be <time_get_month_name>
    9160:	0e 94 ab 23 	call	0x4756	; 0x4756 <display_draw_three_letter_word>
	display_slide_in_from_right();
    9164:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    9168:	17 c0       	rjmp	.+46     	; 0x9198 <menu_set_time+0x4ca>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    916a:	10 92 4b 2c 	sts	0x2C4B, r1
				break;
    916e:	c9 cf       	rjmp	.-110    	; 0x9102 <menu_set_time+0x434>
	//ht1632c_blink(true);
	
	//Set month
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    9170:	83 30       	cpi	r24, 0x03	; 3
    9172:	d8 f0       	brcs	.+54     	; 0x91aa <menu_set_time+0x4dc>
    9174:	83 30       	cpi	r24, 0x03	; 3
    9176:	01 f1       	breq	.+64     	; 0x91b8 <menu_set_time+0x4ea>
    9178:	84 30       	cpi	r24, 0x04	; 4
    917a:	09 f0       	breq	.+2      	; 0x917e <menu_set_time+0x4b0>
    917c:	41 c0       	rjmp	.+130    	; 0x9200 <menu_set_time+0x532>
			case BTN4:
				display_clear_buffer();
    917e:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				display_draw_and_increment_month();
    9182:	0e 94 32 25 	call	0x4a64	; 0x4a64 <display_draw_and_increment_month>
    9186:	2f ef       	ldi	r18, 0xFF	; 255
    9188:	89 e6       	ldi	r24, 0x69	; 105
    918a:	98 e1       	ldi	r25, 0x18	; 24
    918c:	21 50       	subi	r18, 0x01	; 1
    918e:	80 40       	sbci	r24, 0x00	; 0
    9190:	90 40       	sbci	r25, 0x00	; 0
    9192:	e1 f7       	brne	.-8      	; 0x918c <menu_set_time+0x4be>
    9194:	00 c0       	rjmp	.+0      	; 0x9196 <menu_set_time+0x4c8>
    9196:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set month
	while(!next) {
		btn_status = btn_check_press();
    9198:	0e 94 61 11 	call	0x22c2	; 0x22c2 <btn_check_press>
    919c:	80 93 4b 2c 	sts	0x2C4B, r24
		switch(btn_status) {
    91a0:	80 91 4b 2c 	lds	r24, 0x2C4B
    91a4:	82 30       	cpi	r24, 0x02	; 2
    91a6:	21 f7       	brne	.-56     	; 0x9170 <menu_set_time+0x4a2>
    91a8:	7c c0       	rjmp	.+248    	; 0x92a2 <menu_set_time+0x5d4>
    91aa:	81 30       	cpi	r24, 0x01	; 1
    91ac:	49 f5       	brne	.+82     	; 0x9200 <menu_set_time+0x532>
				display_clear_buffer();
				display_draw_and_increment_month();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    91ae:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				display_draw_and_decrement_month();
    91b2:	0e 94 40 25 	call	0x4a80	; 0x4a80 <display_draw_and_decrement_month>
    91b6:	e7 cf       	rjmp	.-50     	; 0x9186 <menu_set_time+0x4b8>
    91b8:	2f ef       	ldi	r18, 0xFF	; 255
    91ba:	89 e6       	ldi	r24, 0x69	; 105
    91bc:	98 e1       	ldi	r25, 0x18	; 24
    91be:	21 50       	subi	r18, 0x01	; 1
    91c0:	80 40       	sbci	r24, 0x00	; 0
    91c2:	90 40       	sbci	r25, 0x00	; 0
    91c4:	e1 f7       	brne	.-8      	; 0x91be <menu_set_time+0x4f0>
    91c6:	00 c0       	rjmp	.+0      	; 0x91c8 <menu_set_time+0x4fa>
    91c8:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    91ca:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	display_draw_three_letter_word("DAY");
    91ce:	89 ed       	ldi	r24, 0xD9	; 217
    91d0:	97 e2       	ldi	r25, 0x27	; 39
    91d2:	0e 94 ab 23 	call	0x4756	; 0x4756 <display_draw_three_letter_word>
	display_slide_in_from_right();
    91d6:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    91da:	2f ef       	ldi	r18, 0xFF	; 255
    91dc:	87 ea       	ldi	r24, 0xA7	; 167
    91de:	91 e6       	ldi	r25, 0x61	; 97
    91e0:	21 50       	subi	r18, 0x01	; 1
    91e2:	80 40       	sbci	r24, 0x00	; 0
    91e4:	90 40       	sbci	r25, 0x00	; 0
    91e6:	e1 f7       	brne	.-8      	; 0x91e0 <menu_set_time+0x512>
    91e8:	00 c0       	rjmp	.+0      	; 0x91ea <menu_set_time+0x51c>
    91ea:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    91ec:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	rtc_update_display(5,env.time.day);
    91f0:	60 91 e3 2a 	lds	r22, 0x2AE3
    91f4:	85 e0       	ldi	r24, 0x05	; 5
    91f6:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
	display_slide_in_from_right();
    91fa:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    91fe:	17 c0       	rjmp	.+46     	; 0x922e <menu_set_time+0x560>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    9200:	10 92 4b 2c 	sts	0x2C4B, r1
				break;
    9204:	c9 cf       	rjmp	.-110    	; 0x9198 <menu_set_time+0x4ca>
	//ht1632c_blink(true);
	
	//Set days
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    9206:	83 30       	cpi	r24, 0x03	; 3
    9208:	d8 f0       	brcs	.+54     	; 0x9240 <menu_set_time+0x572>
    920a:	83 30       	cpi	r24, 0x03	; 3
    920c:	01 f1       	breq	.+64     	; 0x924e <menu_set_time+0x580>
    920e:	84 30       	cpi	r24, 0x04	; 4
    9210:	09 f0       	breq	.+2      	; 0x9214 <menu_set_time+0x546>
    9212:	50 c0       	rjmp	.+160    	; 0x92b4 <menu_set_time+0x5e6>
			case BTN4:
				display_clear_buffer();
    9214:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				display_draw_and_increment_day();
    9218:	0e 94 fd 24 	call	0x49fa	; 0x49fa <display_draw_and_increment_day>
    921c:	2f ef       	ldi	r18, 0xFF	; 255
    921e:	89 e6       	ldi	r24, 0x69	; 105
    9220:	98 e1       	ldi	r25, 0x18	; 24
    9222:	21 50       	subi	r18, 0x01	; 1
    9224:	80 40       	sbci	r24, 0x00	; 0
    9226:	90 40       	sbci	r25, 0x00	; 0
    9228:	e1 f7       	brne	.-8      	; 0x9222 <menu_set_time+0x554>
    922a:	00 c0       	rjmp	.+0      	; 0x922c <menu_set_time+0x55e>
    922c:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set days
	while(!next) {
		btn_status = btn_check_press();
    922e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <btn_check_press>
    9232:	80 93 4b 2c 	sts	0x2C4B, r24
		switch(btn_status) {
    9236:	80 91 4b 2c 	lds	r24, 0x2C4B
    923a:	82 30       	cpi	r24, 0x02	; 2
    923c:	21 f7       	brne	.-56     	; 0x9206 <menu_set_time+0x538>
    923e:	31 c0       	rjmp	.+98     	; 0x92a2 <menu_set_time+0x5d4>
    9240:	81 30       	cpi	r24, 0x01	; 1
    9242:	c1 f5       	brne	.+112    	; 0x92b4 <menu_set_time+0x5e6>
				display_clear_buffer();
				display_draw_and_increment_day();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    9244:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				display_draw_and_decrement_day();
    9248:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <display_draw_and_decrement_day>
    924c:	e7 cf       	rjmp	.-50     	; 0x921c <menu_set_time+0x54e>
    924e:	2f ef       	ldi	r18, 0xFF	; 255
    9250:	89 e6       	ldi	r24, 0x69	; 105
    9252:	98 e1       	ldi	r25, 0x18	; 24
    9254:	21 50       	subi	r18, 0x01	; 1
    9256:	80 40       	sbci	r24, 0x00	; 0
    9258:	90 40       	sbci	r25, 0x00	; 0
    925a:	e1 f7       	brne	.-8      	; 0x9254 <menu_set_time+0x586>
    925c:	00 c0       	rjmp	.+0      	; 0x925e <menu_set_time+0x590>
    925e:	00 00       	nop
		}
	}
	next = false;
	
	//Calculate the rest
	env.time.weekday = time_get_weekday(env.time.day,env.time.month,env.time.year);
    9260:	40 91 e7 2a 	lds	r20, 0x2AE7
    9264:	50 91 e8 2a 	lds	r21, 0x2AE8
    9268:	60 91 e6 2a 	lds	r22, 0x2AE6
    926c:	80 91 e3 2a 	lds	r24, 0x2AE3
    9270:	35 d3       	rcall	.+1642   	; 0x98dc <time_get_weekday>
    9272:	80 93 e4 2a 	sts	0x2AE4, r24
	env.time.week = time_get_weeknumber(env.time.day,env.time.month,env.time.year);
    9276:	40 91 e7 2a 	lds	r20, 0x2AE7
    927a:	50 91 e8 2a 	lds	r21, 0x2AE8
    927e:	60 91 e6 2a 	lds	r22, 0x2AE6
    9282:	80 91 e3 2a 	lds	r24, 0x2AE3
    9286:	8f d3       	rcall	.+1822   	; 0x99a6 <time_get_weeknumber>
    9288:	80 93 e5 2a 	sts	0x2AE5, r24
	
	//ht1632c_blink(false);
	EEPROM_WriteEnv();
    928c:	0e 94 bd 08 	call	0x117a	; 0x117a <EEPROM_WriteEnv>
	display_slide_out_to_bottom();
    9290:	0e 94 6f 24 	call	0x48de	; 0x48de <display_slide_out_to_bottom>
	
#ifdef SHOW_MANUAL
	display_print_scrolling_text("TIME AND DATE SET",false);
    9294:	60 e0       	ldi	r22, 0x00	; 0
    9296:	8d ed       	ldi	r24, 0xDD	; 221
    9298:	97 e2       	ldi	r25, 0x27	; 39
    929a:	0e 94 a3 22 	call	0x4546	; 0x4546 <display_print_scrolling_text>
#endif
	
	return 1;
    929e:	81 e0       	ldi	r24, 0x01	; 1
    92a0:	0c c0       	rjmp	.+24     	; 0x92ba <menu_set_time+0x5ec>
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    92a2:	0e 94 6f 24 	call	0x48de	; 0x48de <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    92a6:	60 e0       	ldi	r22, 0x00	; 0
    92a8:	84 eb       	ldi	r24, 0xB4	; 180
    92aa:	97 e2       	ldi	r25, 0x27	; 39
    92ac:	0e 94 a3 22 	call	0x4546	; 0x4546 <display_print_scrolling_text>
#endif
				return 0;
    92b0:	80 e0       	ldi	r24, 0x00	; 0
    92b2:	03 c0       	rjmp	.+6      	; 0x92ba <menu_set_time+0x5ec>
			default:
				btn_status = NO_BTN;
    92b4:	10 92 4b 2c 	sts	0x2C4B, r1
				break;
    92b8:	ba cf       	rjmp	.-140    	; 0x922e <menu_set_time+0x560>
#ifdef SHOW_MANUAL
	display_print_scrolling_text("TIME AND DATE SET",false);
#endif
	
	return 1;
}
    92ba:	23 96       	adiw	r28, 0x03	; 3
    92bc:	cd bf       	out	0x3d, r28	; 61
    92be:	de bf       	out	0x3e, r29	; 62
    92c0:	df 91       	pop	r29
    92c2:	cf 91       	pop	r28
    92c4:	1f 91       	pop	r17
    92c6:	0f 91       	pop	r16
    92c8:	08 95       	ret

000092ca <menu_set_alarm>:

uint8_t menu_set_alarm(void) 
{
	bool next = false;
	
	display_draw_three_letter_word("HRS");
    92ca:	87 ec       	ldi	r24, 0xC7	; 199
    92cc:	97 e2       	ldi	r25, 0x27	; 39
    92ce:	0e 94 ab 23 	call	0x4756	; 0x4756 <display_draw_three_letter_word>
	display_slide_in_from_right();
    92d2:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    92d6:	2f ef       	ldi	r18, 0xFF	; 255
    92d8:	87 ea       	ldi	r24, 0xA7	; 167
    92da:	91 e6       	ldi	r25, 0x61	; 97
    92dc:	21 50       	subi	r18, 0x01	; 1
    92de:	80 40       	sbci	r24, 0x00	; 0
    92e0:	90 40       	sbci	r25, 0x00	; 0
    92e2:	e1 f7       	brne	.-8      	; 0x92dc <menu_set_alarm+0x12>
    92e4:	00 c0       	rjmp	.+0      	; 0x92e6 <menu_set_alarm+0x1c>
    92e6:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    92e8:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	rtc_update_display(5,env.alarm.hours);
    92ec:	60 91 66 2b 	lds	r22, 0x2B66
    92f0:	85 e0       	ldi	r24, 0x05	; 5
    92f2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
	display_slide_in_from_right();
    92f6:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
    92fa:	0e 94 61 11 	call	0x22c2	; 0x22c2 <btn_check_press>
    92fe:	80 93 4b 2c 	sts	0x2C4B, r24
		switch(btn_status) {
    9302:	80 91 4b 2c 	lds	r24, 0x2C4B
    9306:	82 30       	cpi	r24, 0x02	; 2
    9308:	09 f4       	brne	.+2      	; 0x930c <menu_set_alarm+0x42>
    930a:	78 c0       	rjmp	.+240    	; 0x93fc <menu_set_alarm+0x132>
    930c:	38 f4       	brcc	.+14     	; 0x931c <menu_set_alarm+0x52>
    930e:	81 30       	cpi	r24, 0x01	; 1
    9310:	d9 f5       	brne	.+118    	; 0x9388 <menu_set_alarm+0xbe>
				display_clear_buffer();
				display_alarm_increment_hour();
				_delay_ms(150);
				break;
			case BTN1:
				display_clear_buffer();
    9312:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				display_alarm_decrement_hour();
    9316:	0e 94 aa 24 	call	0x4954	; 0x4954 <display_alarm_decrement_hour>
    931a:	08 c0       	rjmp	.+16     	; 0x932c <menu_set_alarm+0x62>
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    931c:	83 30       	cpi	r24, 0x03	; 3
    931e:	81 f0       	breq	.+32     	; 0x9340 <menu_set_alarm+0x76>
    9320:	84 30       	cpi	r24, 0x04	; 4
    9322:	91 f5       	brne	.+100    	; 0x9388 <menu_set_alarm+0xbe>
			case BTN4:
				display_clear_buffer();
    9324:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				display_alarm_increment_hour();
    9328:	0e 94 99 24 	call	0x4932	; 0x4932 <display_alarm_increment_hour>
    932c:	2f ef       	ldi	r18, 0xFF	; 255
    932e:	85 ea       	ldi	r24, 0xA5	; 165
    9330:	9e e0       	ldi	r25, 0x0E	; 14
    9332:	21 50       	subi	r18, 0x01	; 1
    9334:	80 40       	sbci	r24, 0x00	; 0
    9336:	90 40       	sbci	r25, 0x00	; 0
    9338:	e1 f7       	brne	.-8      	; 0x9332 <menu_set_alarm+0x68>
    933a:	00 c0       	rjmp	.+0      	; 0x933c <menu_set_alarm+0x72>
    933c:	00 00       	nop
    933e:	dd cf       	rjmp	.-70     	; 0x92fa <menu_set_alarm+0x30>
    9340:	2f ef       	ldi	r18, 0xFF	; 255
    9342:	89 e6       	ldi	r24, 0x69	; 105
    9344:	98 e1       	ldi	r25, 0x18	; 24
    9346:	21 50       	subi	r18, 0x01	; 1
    9348:	80 40       	sbci	r24, 0x00	; 0
    934a:	90 40       	sbci	r25, 0x00	; 0
    934c:	e1 f7       	brne	.-8      	; 0x9346 <menu_set_alarm+0x7c>
    934e:	00 c0       	rjmp	.+0      	; 0x9350 <menu_set_alarm+0x86>
    9350:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    9352:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	display_draw_three_letter_word("MIN");
    9356:	8b ec       	ldi	r24, 0xCB	; 203
    9358:	97 e2       	ldi	r25, 0x27	; 39
    935a:	0e 94 ab 23 	call	0x4756	; 0x4756 <display_draw_three_letter_word>
	display_slide_in_from_right();
    935e:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    9362:	2f ef       	ldi	r18, 0xFF	; 255
    9364:	87 ea       	ldi	r24, 0xA7	; 167
    9366:	91 e6       	ldi	r25, 0x61	; 97
    9368:	21 50       	subi	r18, 0x01	; 1
    936a:	80 40       	sbci	r24, 0x00	; 0
    936c:	90 40       	sbci	r25, 0x00	; 0
    936e:	e1 f7       	brne	.-8      	; 0x9368 <menu_set_alarm+0x9e>
    9370:	00 c0       	rjmp	.+0      	; 0x9372 <menu_set_alarm+0xa8>
    9372:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    9374:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	rtc_update_display(5,env.alarm.minutes);
    9378:	60 91 65 2b 	lds	r22, 0x2B65
    937c:	85 e0       	ldi	r24, 0x05	; 5
    937e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <rtc_update_display>
	display_slide_in_from_right();
    9382:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
    9386:	16 c0       	rjmp	.+44     	; 0x93b4 <menu_set_alarm+0xea>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    9388:	10 92 4b 2c 	sts	0x2C4B, r1
				break;
    938c:	b6 cf       	rjmp	.-148    	; 0x92fa <menu_set_alarm+0x30>
	//ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    938e:	83 30       	cpi	r24, 0x03	; 3
    9390:	d0 f0       	brcs	.+52     	; 0x93c6 <menu_set_alarm+0xfc>
    9392:	83 30       	cpi	r24, 0x03	; 3
    9394:	f9 f0       	breq	.+62     	; 0x93d4 <menu_set_alarm+0x10a>
    9396:	84 30       	cpi	r24, 0x04	; 4
    9398:	d1 f5       	brne	.+116    	; 0x940e <menu_set_alarm+0x144>
			case BTN4:
				display_clear_buffer();
    939a:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				display_alarm_increment_minute();
    939e:	0e 94 77 24 	call	0x48ee	; 0x48ee <display_alarm_increment_minute>
    93a2:	2f ef       	ldi	r18, 0xFF	; 255
    93a4:	85 ea       	ldi	r24, 0xA5	; 165
    93a6:	9e e0       	ldi	r25, 0x0E	; 14
    93a8:	21 50       	subi	r18, 0x01	; 1
    93aa:	80 40       	sbci	r24, 0x00	; 0
    93ac:	90 40       	sbci	r25, 0x00	; 0
    93ae:	e1 f7       	brne	.-8      	; 0x93a8 <menu_set_alarm+0xde>
    93b0:	00 c0       	rjmp	.+0      	; 0x93b2 <menu_set_alarm+0xe8>
    93b2:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
    93b4:	0e 94 61 11 	call	0x22c2	; 0x22c2 <btn_check_press>
    93b8:	80 93 4b 2c 	sts	0x2C4B, r24
		switch(btn_status) {
    93bc:	80 91 4b 2c 	lds	r24, 0x2C4B
    93c0:	82 30       	cpi	r24, 0x02	; 2
    93c2:	29 f7       	brne	.-54     	; 0x938e <menu_set_alarm+0xc4>
    93c4:	1b c0       	rjmp	.+54     	; 0x93fc <menu_set_alarm+0x132>
    93c6:	81 30       	cpi	r24, 0x01	; 1
    93c8:	11 f5       	brne	.+68     	; 0x940e <menu_set_alarm+0x144>
				display_clear_buffer();
				display_alarm_increment_minute();
				_delay_ms(150);
				break;
			case BTN1:
				display_clear_buffer();
    93ca:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <display_clear_buffer>
				display_alarm_decrement_minute();
    93ce:	0e 94 88 24 	call	0x4910	; 0x4910 <display_alarm_decrement_minute>
    93d2:	e7 cf       	rjmp	.-50     	; 0x93a2 <menu_set_alarm+0xd8>
    93d4:	2f ef       	ldi	r18, 0xFF	; 255
    93d6:	89 e6       	ldi	r24, 0x69	; 105
    93d8:	98 e1       	ldi	r25, 0x18	; 24
    93da:	21 50       	subi	r18, 0x01	; 1
    93dc:	80 40       	sbci	r24, 0x00	; 0
    93de:	90 40       	sbci	r25, 0x00	; 0
    93e0:	e1 f7       	brne	.-8      	; 0x93da <menu_set_alarm+0x110>
    93e2:	00 c0       	rjmp	.+0      	; 0x93e4 <menu_set_alarm+0x11a>
    93e4:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	EEPROM_WriteEnv();
    93e6:	0e 94 bd 08 	call	0x117a	; 0x117a <EEPROM_WriteEnv>
	display_slide_out_to_bottom();
    93ea:	0e 94 6f 24 	call	0x48de	; 0x48de <display_slide_out_to_bottom>
	
#ifdef SHOW_MANUAL
	display_print_scrolling_text("ALARM SET",false);
    93ee:	60 e0       	ldi	r22, 0x00	; 0
    93f0:	8f ee       	ldi	r24, 0xEF	; 239
    93f2:	97 e2       	ldi	r25, 0x27	; 39
    93f4:	0e 94 a3 22 	call	0x4546	; 0x4546 <display_print_scrolling_text>
#endif

	return 1;
    93f8:	81 e0       	ldi	r24, 0x01	; 1
    93fa:	08 95       	ret
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    93fc:	0e 94 6f 24 	call	0x48de	; 0x48de <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    9400:	60 e0       	ldi	r22, 0x00	; 0
    9402:	84 eb       	ldi	r24, 0xB4	; 180
    9404:	97 e2       	ldi	r25, 0x27	; 39
    9406:	0e 94 a3 22 	call	0x4546	; 0x4546 <display_print_scrolling_text>
#endif
				return 0;
    940a:	80 e0       	ldi	r24, 0x00	; 0
    940c:	08 95       	ret
			default:
				btn_status = NO_BTN;
    940e:	10 92 4b 2c 	sts	0x2C4B, r1
				break;
    9412:	d0 cf       	rjmp	.-96     	; 0x93b4 <menu_set_alarm+0xea>

00009414 <menu_configuration>:
	}
	return MENU_SUCCESS;
}

menu_status_t menu_configuration(SI114X_IRQ_SAMPLE *samples) 
{	
    9414:	ef 92       	push	r14
    9416:	0f 93       	push	r16
    9418:	cf 93       	push	r28
    941a:	df 93       	push	r29
    941c:	ec 01       	movw	r28, r24
	btn_status = btn_check_press();
    941e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <btn_check_press>
    9422:	80 93 4b 2c 	sts	0x2C4B, r24
	
	//Menu ID select
	if (btn_status != NO_BTN) {
    9426:	80 91 4b 2c 	lds	r24, 0x2C4B
    942a:	88 23       	and	r24, r24
    942c:	d1 f0       	breq	.+52     	; 0x9462 <menu_configuration+0x4e>
		if (btn_status == BTN1) {
    942e:	80 91 4b 2c 	lds	r24, 0x2C4B
    9432:	81 30       	cpi	r24, 0x01	; 1
    9434:	49 f4       	brne	.+18     	; 0x9448 <menu_configuration+0x34>
			if (env.menu_id != NUMBER_OF_CONFIG_MENUS) {
    9436:	80 91 64 2b 	lds	r24, 0x2B64
    943a:	87 30       	cpi	r24, 0x07	; 7
    943c:	11 f0       	breq	.+4      	; 0x9442 <menu_configuration+0x2e>
				env.menu_id++;
    943e:	8f 5f       	subi	r24, 0xFF	; 255
    9440:	0e c0       	rjmp	.+28     	; 0x945e <menu_configuration+0x4a>
			} else {
				env.menu_id = 0;
    9442:	10 92 64 2b 	sts	0x2B64, r1
    9446:	0d c0       	rjmp	.+26     	; 0x9462 <menu_configuration+0x4e>
			}
		} else if (btn_status == BTN4) {
    9448:	80 91 4b 2c 	lds	r24, 0x2C4B
    944c:	84 30       	cpi	r24, 0x04	; 4
    944e:	49 f4       	brne	.+18     	; 0x9462 <menu_configuration+0x4e>
			if (env.menu_id != 0) {
    9450:	80 91 64 2b 	lds	r24, 0x2B64
    9454:	88 23       	and	r24, r24
    9456:	11 f0       	breq	.+4      	; 0x945c <menu_configuration+0x48>
				env.menu_id--;
    9458:	81 50       	subi	r24, 0x01	; 1
    945a:	01 c0       	rjmp	.+2      	; 0x945e <menu_configuration+0x4a>
			} else {
				env.menu_id = NUMBER_OF_CONFIG_MENUS;
    945c:	87 e0       	ldi	r24, 0x07	; 7
    945e:	80 93 64 2b 	sts	0x2B64, r24
			}
		}
	}
	
	if (btn_status == BTN1) {
    9462:	80 91 4b 2c 	lds	r24, 0x2C4B
    9466:	81 30       	cpi	r24, 0x01	; 1
    9468:	29 f4       	brne	.+10     	; 0x9474 <menu_configuration+0x60>
		rtc_disable_time_render();
    946a:	0e 94 6d 12 	call	0x24da	; 0x24da <rtc_disable_time_render>
		display_slide_out_to_right();
    946e:	0e 94 53 24 	call	0x48a6	; 0x48a6 <display_slide_out_to_right>
    9472:	0f c0       	rjmp	.+30     	; 0x9492 <menu_configuration+0x7e>
	} else if (btn_status == BTN4) {
    9474:	80 91 4b 2c 	lds	r24, 0x2C4B
    9478:	84 30       	cpi	r24, 0x04	; 4
    947a:	29 f4       	brne	.+10     	; 0x9486 <menu_configuration+0x72>
		rtc_disable_time_render();
    947c:	0e 94 6d 12 	call	0x24da	; 0x24da <rtc_disable_time_render>
		display_slide_out_to_left();
    9480:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
    9484:	06 c0       	rjmp	.+12     	; 0x9492 <menu_configuration+0x7e>
	} else if (btn_status == BTN3) {
    9486:	80 91 4b 2c 	lds	r24, 0x2C4B
    948a:	83 30       	cpi	r24, 0x03	; 3
    948c:	11 f4       	brne	.+4      	; 0x9492 <menu_configuration+0x7e>
		display_fade_blink();
    948e:	0e 94 01 20 	call	0x4002	; 0x4002 <display_fade_blink>
	}
	
	//Switch between menus
	if (btn_status != NO_BTN) {
    9492:	80 91 4b 2c 	lds	r24, 0x2C4B
    9496:	88 23       	and	r24, r24
    9498:	19 f1       	breq	.+70     	; 0x94e0 <menu_configuration+0xcc>
		switch(env.menu_id) {
    949a:	80 91 64 2b 	lds	r24, 0x2B64
    949e:	90 e0       	ldi	r25, 0x00	; 0
    94a0:	88 30       	cpi	r24, 0x08	; 8
    94a2:	91 05       	cpc	r25, r1
    94a4:	e8 f4       	brcc	.+58     	; 0x94e0 <menu_configuration+0xcc>
    94a6:	fc 01       	movw	r30, r24
    94a8:	e2 50       	subi	r30, 0x02	; 2
    94aa:	ff 4f       	sbci	r31, 0xFF	; 255
    94ac:	89 c4       	rjmp	.+2322   	; 0x9dc0 <__tablejump2__>
			case CONFIG_BRIGHTNESS:
				display_draw_four_letter_word("LGHT");
    94ae:	89 ef       	ldi	r24, 0xF9	; 249
    94b0:	97 e2       	ldi	r25, 0x27	; 39
    94b2:	14 c0       	rjmp	.+40     	; 0x94dc <menu_configuration+0xc8>
				break;
			case CONFIG_TIME:
				display_draw_four_letter_word("TIME");
    94b4:	8e ef       	ldi	r24, 0xFE	; 254
    94b6:	97 e2       	ldi	r25, 0x27	; 39
    94b8:	11 c0       	rjmp	.+34     	; 0x94dc <menu_configuration+0xc8>
				break;
			case CONFIG_WIFI:
				display_draw_four_letter_word("WIFI");
    94ba:	83 e0       	ldi	r24, 0x03	; 3
    94bc:	98 e2       	ldi	r25, 0x28	; 40
    94be:	0e c0       	rjmp	.+28     	; 0x94dc <menu_configuration+0xc8>
				break;
			case CONFIG_ALARM:
				display_draw_four_letter_word("ALRM");
    94c0:	88 e0       	ldi	r24, 0x08	; 8
    94c2:	98 e2       	ldi	r25, 0x28	; 40
    94c4:	0b c0       	rjmp	.+22     	; 0x94dc <menu_configuration+0xc8>
				break;
			case CONFIG_CALIBRATE:
				display_draw_four_letter_word("CALI");
    94c6:	8d e0       	ldi	r24, 0x0D	; 13
    94c8:	98 e2       	ldi	r25, 0x28	; 40
    94ca:	08 c0       	rjmp	.+16     	; 0x94dc <menu_configuration+0xc8>
				break;
			case CONFIG_INFO:
				display_draw_four_letter_word("INFO");
    94cc:	82 e1       	ldi	r24, 0x12	; 18
    94ce:	98 e2       	ldi	r25, 0x28	; 40
    94d0:	05 c0       	rjmp	.+10     	; 0x94dc <menu_configuration+0xc8>
				break;
			case CONFIG_MUSIC:
				display_draw_four_letter_word("DEMO");
    94d2:	87 e1       	ldi	r24, 0x17	; 23
    94d4:	98 e2       	ldi	r25, 0x28	; 40
    94d6:	02 c0       	rjmp	.+4      	; 0x94dc <menu_configuration+0xc8>
				break;
			case CONFIG_EXIT:
				display_draw_four_letter_word("EXIT");
    94d8:	87 ea       	ldi	r24, 0xA7	; 167
    94da:	97 e2       	ldi	r25, 0x27	; 39
    94dc:	0e 94 82 23 	call	0x4704	; 0x4704 <display_draw_four_letter_word>
			default:
				break;
		}	
	}
	
	if (btn_status == BTN1) {
    94e0:	80 91 4b 2c 	lds	r24, 0x2C4B
    94e4:	81 30       	cpi	r24, 0x01	; 1
    94e6:	19 f4       	brne	.+6      	; 0x94ee <menu_configuration+0xda>
		display_slide_in_from_left();
    94e8:	0e 94 4b 24 	call	0x4896	; 0x4896 <display_slide_in_from_left>
    94ec:	06 c0       	rjmp	.+12     	; 0x94fa <menu_configuration+0xe6>
	} else if (btn_status == BTN4) {
    94ee:	80 91 4b 2c 	lds	r24, 0x2C4B
    94f2:	84 30       	cpi	r24, 0x04	; 4
    94f4:	11 f4       	brne	.+4      	; 0x94fa <menu_configuration+0xe6>
		display_slide_in_from_right();
    94f6:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
	}
	
	//Menu actions
	if (btn_status == BTN3) {
    94fa:	80 91 4b 2c 	lds	r24, 0x2C4B
    94fe:	83 30       	cpi	r24, 0x03	; 3
    9500:	09 f0       	breq	.+2      	; 0x9504 <menu_configuration+0xf0>
    9502:	74 c0       	rjmp	.+232    	; 0x95ec <menu_configuration+0x1d8>
		switch(env.menu_id) {
    9504:	40 91 64 2b 	lds	r20, 0x2B64
    9508:	50 e0       	ldi	r21, 0x00	; 0
    950a:	48 30       	cpi	r20, 0x08	; 8
    950c:	51 05       	cpc	r21, r1
    950e:	08 f0       	brcs	.+2      	; 0x9512 <menu_configuration+0xfe>
    9510:	63 c0       	rjmp	.+198    	; 0x95d8 <menu_configuration+0x1c4>
    9512:	fa 01       	movw	r30, r20
    9514:	ea 5f       	subi	r30, 0xFA	; 250
    9516:	fe 4f       	sbci	r31, 0xFE	; 254
    9518:	53 c4       	rjmp	.+2214   	; 0x9dc0 <__tablejump2__>
			case CONFIG_BRIGHTNESS:
				display_slide_out_to_top();
    951a:	0e 94 63 24 	call	0x48c6	; 0x48c6 <display_slide_out_to_top>
				menu_configure_brightnesss();
    951e:	63 db       	rcall	.-2362   	; 0x8be6 <menu_configure_brightnesss>
				ht1632c_set_brightness(MAX_BRIGHTNESS);
    9520:	8f e0       	ldi	r24, 0x0F	; 15
    9522:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <ht1632c_set_brightness>
				break;
    9526:	58 c0       	rjmp	.+176    	; 0x95d8 <menu_configuration+0x1c4>
			case CONFIG_TIME:
				display_slide_out_to_top();
    9528:	0e 94 63 24 	call	0x48c6	; 0x48c6 <display_slide_out_to_top>
				menu_set_time();
    952c:	d0 db       	rcall	.-2144   	; 0x8cce <menu_set_time>
				break;
    952e:	54 c0       	rjmp	.+168    	; 0x95d8 <menu_configuration+0x1c4>
			case CONFIG_WIFI:
				display_slide_out_to_top();
    9530:	0e 94 63 24 	call	0x48c6	; 0x48c6 <display_slide_out_to_top>
				display_print_scrolling_text("CONNECT TO AP AND ENTER THE UPCOMMING IP ADDRESS",false);
    9534:	60 e0       	ldi	r22, 0x00	; 0
    9536:	8c e1       	ldi	r24, 0x1C	; 28
    9538:	98 e2       	ldi	r25, 0x28	; 40
    953a:	0e 94 a3 22 	call	0x4546	; 0x4546 <display_print_scrolling_text>
				//Feature: Should draw wifi lines on display here.
				esp8266_on();
    953e:	0e 94 88 09 	call	0x1310	; 0x1310 <esp8266_on>
				if (esp8266_setup_webserver(false,true) == ESP8266_SUCCESS) {
    9542:	61 e0       	ldi	r22, 0x01	; 1
    9544:	80 e0       	ldi	r24, 0x00	; 0
    9546:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <esp8266_setup_webserver>
    954a:	81 30       	cpi	r24, 0x01	; 1
    954c:	b1 f4       	brne	.+44     	; 0x957a <menu_configuration+0x166>
					//start_wifi_indication();
					while(esp8266_configure_ssid_and_password() != ESP8266_TIMEOUT) {
    954e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <esp8266_configure_ssid_and_password>
    9552:	83 30       	cpi	r24, 0x03	; 3
    9554:	b9 f0       	breq	.+46     	; 0x9584 <menu_configuration+0x170>
						btn_status = btn_check_press();
    9556:	0e 94 61 11 	call	0x22c2	; 0x22c2 <btn_check_press>
    955a:	80 93 4b 2c 	sts	0x2C4B, r24
						if (btn_status == BTN4) {
    955e:	80 91 4b 2c 	lds	r24, 0x2C4B
    9562:	84 30       	cpi	r24, 0x04	; 4
    9564:	79 f0       	breq	.+30     	; 0x9584 <menu_configuration+0x170>
							break;
						}
						if (wdt_triggered) {
    9566:	80 91 c0 2a 	lds	r24, 0x2AC0
    956a:	88 23       	and	r24, r24
    956c:	81 f3       	breq	.-32     	; 0x954e <menu_configuration+0x13a>
							//stop_wifi_indication();
#ifdef SHOW_MANUAL
							display_print_scrolling_text("SOMETHING WENT WRONG",false);
    956e:	60 e0       	ldi	r22, 0x00	; 0
    9570:	8d e4       	ldi	r24, 0x4D	; 77
    9572:	98 e2       	ldi	r25, 0x28	; 40
    9574:	0e 94 a3 22 	call	0x4546	; 0x4546 <display_print_scrolling_text>
    9578:	ea cf       	rjmp	.-44     	; 0x954e <menu_configuration+0x13a>
						}
					}
					//stop_wifi_indication();
				} else {
#ifdef SHOW_MANUAL
					display_print_scrolling_text("SOMETHING WENT WRONG",false);
    957a:	60 e0       	ldi	r22, 0x00	; 0
    957c:	8d e4       	ldi	r24, 0x4D	; 77
    957e:	98 e2       	ldi	r25, 0x28	; 40
    9580:	0e 94 a3 22 	call	0x4546	; 0x4546 <display_print_scrolling_text>
#endif					
				}
				esp8266_off();
    9584:	0e 94 97 09 	call	0x132e	; 0x132e <esp8266_off>
				break;
    9588:	27 c0       	rjmp	.+78     	; 0x95d8 <menu_configuration+0x1c4>
			case CONFIG_ALARM:
				display_slide_out_to_top();
    958a:	0e 94 63 24 	call	0x48c6	; 0x48c6 <display_slide_out_to_top>
				menu_set_alarm();
    958e:	9d de       	rcall	.-710    	; 0x92ca <menu_set_alarm>
				break;
    9590:	23 c0       	rjmp	.+70     	; 0x95d8 <menu_configuration+0x1c4>
			case CONFIG_CALIBRATE:
				display_slide_out_to_top();
    9592:	0e 94 63 24 	call	0x48c6	; 0x48c6 <display_slide_out_to_top>
				si114x_baseline_calibration(samples);
    9596:	ce 01       	movw	r24, r28
    9598:	0e 94 67 16 	call	0x2cce	; 0x2cce <si114x_baseline_calibration>
				break;
    959c:	1d c0       	rjmp	.+58     	; 0x95d8 <menu_configuration+0x1c4>
			case CONFIG_INFO:
				display_slide_out_to_top();
    959e:	0e 94 63 24 	call	0x48c6	; 0x48c6 <display_slide_out_to_top>
				display_print_scrolling_text("MADE BY: ERLEND HESTNES",false);
    95a2:	60 e0       	ldi	r22, 0x00	; 0
    95a4:	82 e6       	ldi	r24, 0x62	; 98
    95a6:	98 e2       	ldi	r25, 0x28	; 40
    95a8:	0e 94 a3 22 	call	0x4546	; 0x4546 <display_print_scrolling_text>
				break;
    95ac:	15 c0       	rjmp	.+42     	; 0x95d8 <menu_configuration+0x1c4>
			case CONFIG_MUSIC:
				display_slide_out_to_bottom();
    95ae:	0e 94 6f 24 	call	0x48de	; 0x48de <display_slide_out_to_bottom>
				display_draw_bitmap(5,4,IMG_SPEAKER_A,IMG_SPEAKER_WIDTH,IMG_SPEAKER_HEIGHT,1);
    95b2:	ee 24       	eor	r14, r14
    95b4:	e3 94       	inc	r14
    95b6:	08 e0       	ldi	r16, 0x08	; 8
    95b8:	26 e0       	ldi	r18, 0x06	; 6
    95ba:	4d e3       	ldi	r20, 0x3D	; 61
    95bc:	5d e0       	ldi	r21, 0x0D	; 13
    95be:	64 e0       	ldi	r22, 0x04	; 4
    95c0:	85 e0       	ldi	r24, 0x05	; 5
    95c2:	0e 94 3d 21 	call	0x427a	; 0x427a <display_draw_bitmap>
				display_slide_in_from_bottom();
    95c6:	0e 94 4f 24 	call	0x489e	; 0x489e <display_slide_in_from_bottom>
				play_sound();
    95ca:	0e 94 95 41 	call	0x832a	; 0x832a <play_sound>
				break;
    95ce:	04 c0       	rjmp	.+8      	; 0x95d8 <menu_configuration+0x1c4>
			case CONFIG_EXIT:
				display_slide_out_to_bottom();
    95d0:	0e 94 6f 24 	call	0x48de	; 0x48de <display_slide_out_to_bottom>
				return MENU_CLOSE;
    95d4:	82 e0       	ldi	r24, 0x02	; 2
    95d6:	0b c0       	rjmp	.+22     	; 0x95ee <menu_configuration+0x1da>
			default:
				break;
		}
		env.menu_id = 0;
    95d8:	10 92 64 2b 	sts	0x2B64, r1
		display_slide_out_to_bottom();
    95dc:	0e 94 6f 24 	call	0x48de	; 0x48de <display_slide_out_to_bottom>
		display_draw_four_letter_word("<  >");
    95e0:	8a e7       	ldi	r24, 0x7A	; 122
    95e2:	98 e2       	ldi	r25, 0x28	; 40
    95e4:	0e 94 82 23 	call	0x4704	; 0x4704 <display_draw_four_letter_word>
		display_slide_in_from_top();
    95e8:	0e 94 51 24 	call	0x48a2	; 0x48a2 <display_slide_in_from_top>
	}	
	return MENU_SUCCESS;
    95ec:	81 e0       	ldi	r24, 0x01	; 1
}
    95ee:	df 91       	pop	r29
    95f0:	cf 91       	pop	r28
    95f2:	0f 91       	pop	r16
    95f4:	ef 90       	pop	r14
    95f6:	08 95       	ret

000095f8 <menu_state_machine>:
	
	env.runtime = 0;
}

menu_status_t menu_state_machine(SI114X_IRQ_SAMPLE *samples) 
{	
    95f8:	ff 92       	push	r15
    95fa:	0f 93       	push	r16
    95fc:	1f 93       	push	r17
    95fe:	cf 93       	push	r28
    9600:	df 93       	push	r29
    9602:	cd b7       	in	r28, 0x3d	; 61
    9604:	de b7       	in	r29, 0x3e	; 62
    9606:	ed 97       	sbiw	r28, 0x3d	; 61
    9608:	cd bf       	out	0x3d, r28	; 61
    960a:	de bf       	out	0x3e, r29	; 62
    960c:	8c 01       	movw	r16, r24
	//Menu ID select
	if (samples->gesture != NO_GESTURE) {
    960e:	fc 01       	movw	r30, r24
    9610:	82 89       	ldd	r24, Z+18	; 0x12
    9612:	88 23       	and	r24, r24
    9614:	b1 f0       	breq	.+44     	; 0x9642 <menu_state_machine+0x4a>
		if (samples->gesture == LEFT_SWIPE) {
    9616:	82 30       	cpi	r24, 0x02	; 2
    9618:	49 f4       	brne	.+18     	; 0x962c <menu_state_machine+0x34>
			if (env.menu_id != NUMBER_OF_MENUS) {
    961a:	80 91 64 2b 	lds	r24, 0x2B64
    961e:	86 30       	cpi	r24, 0x06	; 6
    9620:	11 f0       	breq	.+4      	; 0x9626 <menu_state_machine+0x2e>
				env.menu_id++;
    9622:	8f 5f       	subi	r24, 0xFF	; 255
    9624:	0c c0       	rjmp	.+24     	; 0x963e <menu_state_machine+0x46>
			} else {
				env.menu_id = 0;
    9626:	10 92 64 2b 	sts	0x2B64, r1
    962a:	0b c0       	rjmp	.+22     	; 0x9642 <menu_state_machine+0x4a>
			}
		} else if (samples->gesture == RIGHT_SWIPE) {
    962c:	81 30       	cpi	r24, 0x01	; 1
    962e:	49 f4       	brne	.+18     	; 0x9642 <menu_state_machine+0x4a>
			if (env.menu_id != 0) {
    9630:	80 91 64 2b 	lds	r24, 0x2B64
    9634:	88 23       	and	r24, r24
    9636:	11 f0       	breq	.+4      	; 0x963c <menu_state_machine+0x44>
				env.menu_id--;
    9638:	81 50       	subi	r24, 0x01	; 1
    963a:	01 c0       	rjmp	.+2      	; 0x963e <menu_state_machine+0x46>
			} else {
				env.menu_id = NUMBER_OF_MENUS;
    963c:	86 e0       	ldi	r24, 0x06	; 6
    963e:	80 93 64 2b 	sts	0x2B64, r24
			}
		}
	}
	
	if (samples->gesture == LEFT_SWIPE) {
    9642:	f8 01       	movw	r30, r16
    9644:	82 89       	ldd	r24, Z+18	; 0x12
    9646:	82 30       	cpi	r24, 0x02	; 2
    9648:	29 f4       	brne	.+10     	; 0x9654 <menu_state_machine+0x5c>
		rtc_disable_time_render();
    964a:	0e 94 6d 12 	call	0x24da	; 0x24da <rtc_disable_time_render>
		display_slide_out_to_right();
    964e:	0e 94 53 24 	call	0x48a6	; 0x48a6 <display_slide_out_to_right>
    9652:	06 c0       	rjmp	.+12     	; 0x9660 <menu_state_machine+0x68>
	} else if (samples->gesture == RIGHT_SWIPE) {
    9654:	81 30       	cpi	r24, 0x01	; 1
    9656:	21 f4       	brne	.+8      	; 0x9660 <menu_state_machine+0x68>
		rtc_disable_time_render();
    9658:	0e 94 6d 12 	call	0x24da	; 0x24da <rtc_disable_time_render>
		display_slide_out_to_left();
    965c:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <display_slide_out_to_left>
	}
	
	//Switch between menus
	if (samples->gesture != NO_GESTURE) {
    9660:	f8 01       	movw	r30, r16
    9662:	82 89       	ldd	r24, Z+18	; 0x12
    9664:	88 23       	and	r24, r24
    9666:	c1 f0       	breq	.+48     	; 0x9698 <menu_state_machine+0xa0>
		switch(env.menu_id) {
    9668:	40 91 64 2b 	lds	r20, 0x2B64
    966c:	50 e0       	ldi	r21, 0x00	; 0
    966e:	47 30       	cpi	r20, 0x07	; 7
    9670:	51 05       	cpc	r21, r1
    9672:	90 f4       	brcc	.+36     	; 0x9698 <menu_state_machine+0xa0>
    9674:	fa 01       	movw	r30, r20
    9676:	e2 5f       	subi	r30, 0xF2	; 242
    9678:	fe 4f       	sbci	r31, 0xFE	; 254
    967a:	a2 c3       	rjmp	.+1860   	; 0x9dc0 <__tablejump2__>
			case MENU_TIME:
				rtc_enable_time_render();
    967c:	0e 94 ef 12 	call	0x25de	; 0x25de <rtc_enable_time_render>
				break;
    9680:	0b c0       	rjmp	.+22     	; 0x9698 <menu_state_machine+0xa0>
			case MENU_DATE:
				menu_draw_date_frame();
    9682:	bc d8       	rcall	.-3720   	; 0x87fc <menu_draw_date_frame>
				break;
    9684:	09 c0       	rjmp	.+18     	; 0x9698 <menu_state_machine+0xa0>
			case MENU_WEEKDAY:
				menu_draw_weekday_frame();
    9686:	8e d9       	rcall	.-3300   	; 0x89a4 <menu_draw_weekday_frame>
				break;
    9688:	07 c0       	rjmp	.+14     	; 0x9698 <menu_state_machine+0xa0>
			case MENU_WEEK:
				menu_draw_week_frame();
    968a:	38 d9       	rcall	.-3472   	; 0x88fc <menu_draw_week_frame>
				break;
    968c:	05 c0       	rjmp	.+10     	; 0x9698 <menu_state_machine+0xa0>
			case MENU_TEMP:
				menu_draw_temperature_frame();
    968e:	55 d8       	rcall	.-3926   	; 0x873a <menu_draw_temperature_frame>
				break;
    9690:	03 c0       	rjmp	.+6      	; 0x9698 <menu_state_machine+0xa0>
			case MENU_BATTERY:
				menu_draw_battery_frame();
    9692:	e0 d9       	rcall	.-3136   	; 0x8a54 <menu_draw_battery_frame>
				break;
    9694:	01 c0       	rjmp	.+2      	; 0x9698 <menu_state_machine+0xa0>
			case MENU_CONFIG:
				menu_draw_config_frame();
    9696:	36 da       	rcall	.-2964   	; 0x8b04 <menu_draw_config_frame>
			default:
				break;
		}	
	}
	
	if (samples->gesture == LEFT_SWIPE) {
    9698:	f8 01       	movw	r30, r16
    969a:	82 89       	ldd	r24, Z+18	; 0x12
    969c:	82 30       	cpi	r24, 0x02	; 2
    969e:	19 f4       	brne	.+6      	; 0x96a6 <menu_state_machine+0xae>
		display_slide_in_from_left();
    96a0:	0e 94 4b 24 	call	0x4896	; 0x4896 <display_slide_in_from_left>
    96a4:	04 c0       	rjmp	.+8      	; 0x96ae <menu_state_machine+0xb6>
	} else if (samples->gesture == RIGHT_SWIPE) {
    96a6:	81 30       	cpi	r24, 0x01	; 1
    96a8:	11 f4       	brne	.+4      	; 0x96ae <menu_state_machine+0xb6>
		display_slide_in_from_right();
    96aa:	0e 94 4d 24 	call	0x489a	; 0x489a <display_slide_in_from_right>
	}

	if (samples->gesture == PAUSE) {
    96ae:	f8 01       	movw	r30, r16
    96b0:	82 89       	ldd	r24, Z+18	; 0x12
    96b2:	83 30       	cpi	r24, 0x03	; 3
    96b4:	09 f0       	breq	.+2      	; 0x96b8 <menu_state_machine+0xc0>
    96b6:	9a c0       	rjmp	.+308    	; 0x97ec <menu_state_machine+0x1f4>
		if (env.menu_id == MENU_CONFIG) {
    96b8:	80 91 64 2b 	lds	r24, 0x2B64
    96bc:	81 30       	cpi	r24, 0x01	; 1
    96be:	69 f5       	brne	.+90     	; 0x971a <menu_state_machine+0x122>
			Si114xPauseAll((HANDLE)SI114X_ADDR);
    96c0:	8a e5       	ldi	r24, 0x5A	; 90
    96c2:	90 e0       	ldi	r25, 0x00	; 0
    96c4:	0e 94 a6 14 	call	0x294c	; 0x294c <Si114xPauseAll>
			display_fade_blink();
    96c8:	0e 94 01 20 	call	0x4002	; 0x4002 <display_fade_blink>
			display_slide_out_to_top();
    96cc:	0e 94 63 24 	call	0x48c6	; 0x48c6 <display_slide_out_to_top>
#ifdef SHOW_MANUAL
			display_print_scrolling_text("USE BACK BUTTONS",false);
    96d0:	60 e0       	ldi	r22, 0x00	; 0
    96d2:	8f e7       	ldi	r24, 0x7F	; 127
    96d4:	98 e2       	ldi	r25, 0x28	; 40
    96d6:	0e 94 a3 22 	call	0x4546	; 0x4546 <display_print_scrolling_text>
#endif
			display_draw_four_letter_word("<  >");
    96da:	8a e7       	ldi	r24, 0x7A	; 122
    96dc:	98 e2       	ldi	r25, 0x28	; 40
    96de:	0e 94 82 23 	call	0x4704	; 0x4704 <display_draw_four_letter_word>
			display_slide_in_from_bottom();
    96e2:	0e 94 4f 24 	call	0x489e	; 0x489e <display_slide_in_from_bottom>
			env.menu_id = 0;
    96e6:	10 92 64 2b 	sts	0x2B64, r1
			while(menu_configuration(samples) == MENU_SUCCESS);
    96ea:	c8 01       	movw	r24, r16
    96ec:	93 de       	rcall	.-730    	; 0x9414 <menu_configuration>
    96ee:	81 30       	cpi	r24, 0x01	; 1
    96f0:	e1 f3       	breq	.-8      	; 0x96ea <menu_state_machine+0xf2>
			Si114xPsAlsAuto((HANDLE)SI114X_ADDR);
    96f2:	8a e5       	ldi	r24, 0x5A	; 90
    96f4:	90 e0       	ldi	r25, 0x00	; 0
    96f6:	0e 94 65 14 	call	0x28ca	; 0x28ca <Si114xPsAlsAuto>
			env.menu_id = 0;
    96fa:	10 92 64 2b 	sts	0x2B64, r1
			rtc_enable_time_render();
    96fe:	0e 94 ef 12 	call	0x25de	; 0x25de <rtc_enable_time_render>
			display_slide_in_from_top();
    9702:	0e 94 51 24 	call	0x48a2	; 0x48a2 <display_slide_in_from_top>
    9706:	ff ef       	ldi	r31, 0xFF	; 255
    9708:	27 ea       	ldi	r18, 0xA7	; 167
    970a:	81 e6       	ldi	r24, 0x61	; 97
    970c:	f1 50       	subi	r31, 0x01	; 1
    970e:	20 40       	sbci	r18, 0x00	; 0
    9710:	80 40       	sbci	r24, 0x00	; 0
    9712:	e1 f7       	brne	.-8      	; 0x970c <menu_state_machine+0x114>
    9714:	00 c0       	rjmp	.+0      	; 0x9716 <menu_state_machine+0x11e>
    9716:	00 00       	nop
    9718:	69 c0       	rjmp	.+210    	; 0x97ec <menu_state_machine+0x1f4>
			//A little time to remove fingers from back buttons
			_delay_ms(1000);
		} else if (env.menu_id == MENU_TEMP) {
    971a:	83 30       	cpi	r24, 0x03	; 3
    971c:	09 f0       	breq	.+2      	; 0x9720 <menu_state_machine+0x128>
    971e:	66 c0       	rjmp	.+204    	; 0x97ec <menu_state_machine+0x1f4>
			esp8266_status_t status;
			Si114xPauseAll((HANDLE)SI114X_ADDR);
    9720:	8a e5       	ldi	r24, 0x5A	; 90
    9722:	90 e0       	ldi	r25, 0x00	; 0
    9724:	0e 94 a6 14 	call	0x294c	; 0x294c <Si114xPauseAll>
			display_fade_blink();			
    9728:	0e 94 01 20 	call	0x4002	; 0x4002 <display_fade_blink>
			display_slide_out_to_top();
    972c:	0e 94 63 24 	call	0x48c6	; 0x48c6 <display_slide_out_to_top>
			start_loading();
    9730:	0e 94 e0 41 	call	0x83c0	; 0x83c0 <start_loading>
			esp8266_on();
    9734:	0e 94 88 09 	call	0x1310	; 0x1310 <esp8266_on>
			status = get_internet_variables(false,true);
    9738:	61 e0       	ldi	r22, 0x01	; 1
    973a:	80 e0       	ldi	r24, 0x00	; 0
    973c:	0e 94 04 42 	call	0x8408	; 0x8408 <get_internet_variables>
			esp8266_off();
    9740:	8d af       	std	Y+61, r24	; 0x3d
    9742:	0e 94 97 09 	call	0x132e	; 0x132e <esp8266_off>
			stop_loading();
    9746:	0e 94 fa 41 	call	0x83f4	; 0x83f4 <stop_loading>
			
			if (status == ESP8266_SUCCESS) {
    974a:	8d ad       	ldd	r24, Y+61	; 0x3d
    974c:	81 30       	cpi	r24, 0x01	; 1
    974e:	09 f0       	breq	.+2      	; 0x9752 <menu_state_machine+0x15a>
    9750:	40 c0       	rjmp	.+128    	; 0x97d2 <menu_state_machine+0x1da>
				uint8_t i = 0;
				char weather_info[60];
				strcpy(weather_info, "WEATHER FOR ");
    9752:	60 e9       	ldi	r22, 0x90	; 144
    9754:	78 e2       	ldi	r23, 0x28	; 40
    9756:	ce 01       	movw	r24, r28
    9758:	01 96       	adiw	r24, 0x01	; 1
    975a:	c0 d4       	rcall	.+2432   	; 0xa0dc <strcpy>
			status = get_internet_variables(false,true);
			esp8266_off();
			stop_loading();
			
			if (status == ESP8266_SUCCESS) {
				uint8_t i = 0;
    975c:	f1 2c       	mov	r15, r1
				char weather_info[60];
				strcpy(weather_info, "WEATHER FOR ");
				while(env.city[i]) {
    975e:	0f 2d       	mov	r16, r15
    9760:	10 e0       	ldi	r17, 0x00	; 0
    9762:	0a 5e       	subi	r16, 0xEA	; 234
    9764:	14 4d       	sbci	r17, 0xD4	; 212
    9766:	f8 01       	movw	r30, r16
    9768:	80 81       	ld	r24, Z
    976a:	88 23       	and	r24, r24
    976c:	31 f0       	breq	.+12     	; 0x977a <menu_state_machine+0x182>
					env.city[i] = toupper(env.city[i]);
    976e:	90 e0       	ldi	r25, 0x00	; 0
    9770:	87 d4       	rcall	.+2318   	; 0xa080 <toupper>
    9772:	f8 01       	movw	r30, r16
    9774:	80 83       	st	Z, r24
					i++;
    9776:	f3 94       	inc	r15
    9778:	f2 cf       	rjmp	.-28     	; 0x975e <menu_state_machine+0x166>
				}
				strcat(weather_info,env.city);
    977a:	66 e1       	ldi	r22, 0x16	; 22
    977c:	7b e2       	ldi	r23, 0x2B	; 43
    977e:	ce 01       	movw	r24, r28
    9780:	01 96       	adiw	r24, 0x01	; 1
    9782:	96 d4       	rcall	.+2348   	; 0xa0b0 <strcat>
				strcat(weather_info,": ");
    9784:	6d e9       	ldi	r22, 0x9D	; 157
    9786:	78 e2       	ldi	r23, 0x28	; 40
    9788:	ce 01       	movw	r24, r28
    978a:	01 96       	adiw	r24, 0x01	; 1
    978c:	91 d4       	rcall	.+2338   	; 0xa0b0 <strcat>
				strcat(weather_info,env.temperature);
    978e:	6b ee       	ldi	r22, 0xEB	; 235
    9790:	7a e2       	ldi	r23, 0x2A	; 42
    9792:	ce 01       	movw	r24, r28
    9794:	01 96       	adiw	r24, 0x01	; 1
    9796:	8c d4       	rcall	.+2328   	; 0xa0b0 <strcat>
				strcat(weather_info,"C ");
    9798:	60 ea       	ldi	r22, 0xA0	; 160
    979a:	78 e2       	ldi	r23, 0x28	; 40
    979c:	ce 01       	movw	r24, r28
    979e:	01 96       	adiw	r24, 0x01	; 1
    97a0:	87 d4       	rcall	.+2318   	; 0xa0b0 <strcat>
				i = 0;
    97a2:	f1 2c       	mov	r15, r1
				while(env.weather_info[i]) {
    97a4:	0f 2d       	mov	r16, r15
    97a6:	10 e0       	ldi	r17, 0x00	; 0
    97a8:	0f 53       	subi	r16, 0x3F	; 63
    97aa:	15 4d       	sbci	r17, 0xD5	; 213
    97ac:	f8 01       	movw	r30, r16
    97ae:	85 a5       	ldd	r24, Z+45	; 0x2d
    97b0:	88 23       	and	r24, r24
    97b2:	31 f0       	breq	.+12     	; 0x97c0 <menu_state_machine+0x1c8>
					env.weather_info[i] = toupper(env.weather_info[i]);
    97b4:	90 e0       	ldi	r25, 0x00	; 0
    97b6:	64 d4       	rcall	.+2248   	; 0xa080 <toupper>
    97b8:	f8 01       	movw	r30, r16
    97ba:	85 a7       	std	Z+45, r24	; 0x2d
					i++;
    97bc:	f3 94       	inc	r15
    97be:	f2 cf       	rjmp	.-28     	; 0x97a4 <menu_state_machine+0x1ac>
				}
				strcat(weather_info,env.weather_info);
    97c0:	6e ee       	ldi	r22, 0xEE	; 238
    97c2:	7a e2       	ldi	r23, 0x2A	; 42
    97c4:	ce 01       	movw	r24, r28
    97c6:	01 96       	adiw	r24, 0x01	; 1
    97c8:	73 d4       	rcall	.+2278   	; 0xa0b0 <strcat>
#ifdef SHOW_MANUAL
				display_print_scrolling_text(weather_info, false);
    97ca:	60 e0       	ldi	r22, 0x00	; 0
    97cc:	ce 01       	movw	r24, r28
    97ce:	01 96       	adiw	r24, 0x01	; 1
    97d0:	03 c0       	rjmp	.+6      	; 0x97d8 <menu_state_machine+0x1e0>
#endif
			} else {
#ifdef SHOW_MANUAL
				display_print_scrolling_text("COULD NOT GET TEMPERATURE", false);
    97d2:	60 e0       	ldi	r22, 0x00	; 0
    97d4:	83 ea       	ldi	r24, 0xA3	; 163
    97d6:	98 e2       	ldi	r25, 0x28	; 40
    97d8:	0e 94 a3 22 	call	0x4546	; 0x4546 <display_print_scrolling_text>
#endif
			}
			menu_draw_temperature_frame();
    97dc:	0e 94 9d 43 	call	0x873a	; 0x873a <menu_draw_temperature_frame>
			display_slide_in_from_top();
    97e0:	0e 94 51 24 	call	0x48a2	; 0x48a2 <display_slide_in_from_top>
			Si114xPsAlsAuto((HANDLE)SI114X_ADDR);
    97e4:	8a e5       	ldi	r24, 0x5A	; 90
    97e6:	90 e0       	ldi	r25, 0x00	; 0
    97e8:	0e 94 65 14 	call	0x28ca	; 0x28ca <Si114xPsAlsAuto>
		} 
	}
	return MENU_SUCCESS;
}
    97ec:	81 e0       	ldi	r24, 0x01	; 1
    97ee:	ed 96       	adiw	r28, 0x3d	; 61
    97f0:	cd bf       	out	0x3d, r28	; 61
    97f2:	de bf       	out	0x3e, r29	; 62
    97f4:	df 91       	pop	r29
    97f6:	cf 91       	pop	r28
    97f8:	1f 91       	pop	r17
    97fa:	0f 91       	pop	r16
    97fc:	ff 90       	pop	r15
    97fe:	08 95       	ret

00009800 <__vector_16>:

	return 1;
}

ISR(TCC0_CCA_vect) 
{
    9800:	1f 92       	push	r1
    9802:	0f 92       	push	r0
    9804:	0f b6       	in	r0, 0x3f	; 63
    9806:	0f 92       	push	r0
    9808:	11 24       	eor	r1, r1
    980a:	0b b6       	in	r0, 0x3b	; 59
    980c:	0f 92       	push	r0
    980e:	2f 93       	push	r18
    9810:	3f 93       	push	r19
    9812:	4f 93       	push	r20
    9814:	5f 93       	push	r21
    9816:	6f 93       	push	r22
    9818:	7f 93       	push	r23
    981a:	8f 93       	push	r24
    981c:	9f 93       	push	r25
    981e:	af 93       	push	r26
    9820:	bf 93       	push	r27
    9822:	ef 93       	push	r30
    9824:	ff 93       	push	r31
	display_show_loading_square();
    9826:	0e 94 00 21 	call	0x4200	; 0x4200 <display_show_loading_square>
}
    982a:	ff 91       	pop	r31
    982c:	ef 91       	pop	r30
    982e:	bf 91       	pop	r27
    9830:	af 91       	pop	r26
    9832:	9f 91       	pop	r25
    9834:	8f 91       	pop	r24
    9836:	7f 91       	pop	r23
    9838:	6f 91       	pop	r22
    983a:	5f 91       	pop	r21
    983c:	4f 91       	pop	r20
    983e:	3f 91       	pop	r19
    9840:	2f 91       	pop	r18
    9842:	0f 90       	pop	r0
    9844:	0b be       	out	0x3b, r0	; 59
    9846:	0f 90       	pop	r0
    9848:	0f be       	out	0x3f, r0	; 63
    984a:	0f 90       	pop	r0
    984c:	1f 90       	pop	r1
    984e:	18 95       	reti

00009850 <__vector_19>:

ISR(TCC0_CCD_vect)
{
    9850:	1f 92       	push	r1
    9852:	0f 92       	push	r0
    9854:	0f b6       	in	r0, 0x3f	; 63
    9856:	0f 92       	push	r0
    9858:	11 24       	eor	r1, r1
    985a:	0b b6       	in	r0, 0x3b	; 59
    985c:	0f 92       	push	r0
    985e:	2f 93       	push	r18
    9860:	3f 93       	push	r19
    9862:	4f 93       	push	r20
    9864:	5f 93       	push	r21
    9866:	6f 93       	push	r22
    9868:	7f 93       	push	r23
    986a:	8f 93       	push	r24
    986c:	9f 93       	push	r25
    986e:	af 93       	push	r26
    9870:	bf 93       	push	r27
    9872:	ef 93       	push	r30
    9874:	ff 93       	push	r31
	display_draw_wifi_icon();
    9876:	0e 94 cc 23 	call	0x4798	; 0x4798 <display_draw_wifi_icon>
    987a:	ff 91       	pop	r31
    987c:	ef 91       	pop	r30
    987e:	bf 91       	pop	r27
    9880:	af 91       	pop	r26
    9882:	9f 91       	pop	r25
    9884:	8f 91       	pop	r24
    9886:	7f 91       	pop	r23
    9888:	6f 91       	pop	r22
    988a:	5f 91       	pop	r21
    988c:	4f 91       	pop	r20
    988e:	3f 91       	pop	r19
    9890:	2f 91       	pop	r18
    9892:	0f 90       	pop	r0
    9894:	0b be       	out	0x3b, r0	; 59
    9896:	0f 90       	pop	r0
    9898:	0f be       	out	0x3f, r0	; 63
    989a:	0f 90       	pop	r0
    989c:	1f 90       	pop	r1
    989e:	18 95       	reti

000098a0 <time_get_day_name>:
		days_count += time_get_days_in_month(i,year);
	}
	days_count += day;
	
	return days_count;
}
    98a0:	81 50       	subi	r24, 0x01	; 1
    98a2:	88 30       	cpi	r24, 0x08	; 8
    98a4:	48 f4       	brcc	.+18     	; 0x98b8 <time_get_day_name+0x18>
    98a6:	e8 2f       	mov	r30, r24
    98a8:	f0 e0       	ldi	r31, 0x00	; 0
    98aa:	ee 0f       	add	r30, r30
    98ac:	ff 1f       	adc	r31, r31
    98ae:	e6 5a       	subi	r30, 0xA6	; 166
    98b0:	f6 4d       	sbci	r31, 0xD6	; 214
    98b2:	80 81       	ld	r24, Z
    98b4:	91 81       	ldd	r25, Z+1	; 0x01
    98b6:	08 95       	ret
    98b8:	8d eb       	ldi	r24, 0xBD	; 189
    98ba:	98 e2       	ldi	r25, 0x28	; 40
    98bc:	08 95       	ret

000098be <time_get_month_name>:
    98be:	81 50       	subi	r24, 0x01	; 1
    98c0:	8c 30       	cpi	r24, 0x0C	; 12
    98c2:	48 f4       	brcc	.+18     	; 0x98d6 <time_get_month_name+0x18>
    98c4:	e8 2f       	mov	r30, r24
    98c6:	f0 e0       	ldi	r31, 0x00	; 0
    98c8:	ee 0f       	add	r30, r30
    98ca:	ff 1f       	adc	r31, r31
    98cc:	ee 5b       	subi	r30, 0xBE	; 190
    98ce:	f6 4d       	sbci	r31, 0xD6	; 214
    98d0:	80 81       	ld	r24, Z
    98d2:	91 81       	ldd	r25, Z+1	; 0x01
    98d4:	08 95       	ret
    98d6:	8d eb       	ldi	r24, 0xBD	; 189
    98d8:	98 e2       	ldi	r25, 0x28	; 40
    98da:	08 95       	ret

000098dc <time_get_weekday>:
    98dc:	cf 93       	push	r28
    98de:	df 93       	push	r29
    98e0:	e6 2f       	mov	r30, r22
    98e2:	21 e0       	ldi	r18, 0x01	; 1
    98e4:	30 e0       	ldi	r19, 0x00	; 0
    98e6:	63 30       	cpi	r22, 0x03	; 3
    98e8:	10 f0       	brcs	.+4      	; 0x98ee <time_get_weekday+0x12>
    98ea:	20 e0       	ldi	r18, 0x00	; 0
    98ec:	30 e0       	ldi	r19, 0x00	; 0
    98ee:	ea 01       	movw	r28, r20
    98f0:	c2 1b       	sub	r28, r18
    98f2:	d3 0b       	sbc	r29, r19
    98f4:	9e 01       	movw	r18, r28
    98f6:	28 0f       	add	r18, r24
    98f8:	31 1d       	adc	r19, r1
    98fa:	ce 01       	movw	r24, r28
    98fc:	96 95       	lsr	r25
    98fe:	87 95       	ror	r24
    9900:	96 95       	lsr	r25
    9902:	87 95       	ror	r24
    9904:	28 0f       	add	r18, r24
    9906:	39 1f       	adc	r19, r25
    9908:	ce 01       	movw	r24, r28
    990a:	60 e9       	ldi	r22, 0x90	; 144
    990c:	71 e0       	ldi	r23, 0x01	; 1
    990e:	0f d2       	rcall	.+1054   	; 0x9d2e <__udivmodhi4>
    9910:	26 0f       	add	r18, r22
    9912:	37 1f       	adc	r19, r23
    9914:	f0 e0       	ldi	r31, 0x00	; 0
    9916:	ee 0f       	add	r30, r30
    9918:	ff 1f       	adc	r31, r31
    991a:	e8 59       	subi	r30, 0x98	; 152
    991c:	f6 4d       	sbci	r31, 0xD6	; 214
    991e:	80 81       	ld	r24, Z
    9920:	91 81       	ldd	r25, Z+1	; 0x01
    9922:	28 0f       	add	r18, r24
    9924:	39 1f       	adc	r19, r25
    9926:	ce 01       	movw	r24, r28
    9928:	64 e6       	ldi	r22, 0x64	; 100
    992a:	70 e0       	ldi	r23, 0x00	; 0
    992c:	00 d2       	rcall	.+1024   	; 0x9d2e <__udivmodhi4>
    992e:	26 1b       	sub	r18, r22
    9930:	37 0b       	sbc	r19, r23
    9932:	c9 01       	movw	r24, r18
    9934:	67 e0       	ldi	r22, 0x07	; 7
    9936:	70 e0       	ldi	r23, 0x00	; 0
    9938:	fa d1       	rcall	.+1012   	; 0x9d2e <__udivmodhi4>
    993a:	85 5c       	subi	r24, 0xC5	; 197
    993c:	96 4d       	sbci	r25, 0xD6	; 214
    993e:	fc 01       	movw	r30, r24
    9940:	80 81       	ld	r24, Z
    9942:	df 91       	pop	r29
    9944:	cf 91       	pop	r28
    9946:	08 95       	ret

00009948 <time_is_leap_year>:
    9948:	9c 01       	movw	r18, r24
    994a:	83 70       	andi	r24, 0x03	; 3
    994c:	99 27       	eor	r25, r25
    994e:	89 2b       	or	r24, r25
    9950:	31 f4       	brne	.+12     	; 0x995e <time_is_leap_year+0x16>
    9952:	c9 01       	movw	r24, r18
    9954:	64 e6       	ldi	r22, 0x64	; 100
    9956:	70 e0       	ldi	r23, 0x00	; 0
    9958:	ea d1       	rcall	.+980    	; 0x9d2e <__udivmodhi4>
    995a:	89 2b       	or	r24, r25
    995c:	49 f4       	brne	.+18     	; 0x9970 <time_is_leap_year+0x28>
    995e:	c9 01       	movw	r24, r18
    9960:	60 e9       	ldi	r22, 0x90	; 144
    9962:	71 e0       	ldi	r23, 0x01	; 1
    9964:	e4 d1       	rcall	.+968    	; 0x9d2e <__udivmodhi4>
    9966:	21 e0       	ldi	r18, 0x01	; 1
    9968:	89 2b       	or	r24, r25
    996a:	19 f0       	breq	.+6      	; 0x9972 <time_is_leap_year+0x2a>
    996c:	20 e0       	ldi	r18, 0x00	; 0
    996e:	01 c0       	rjmp	.+2      	; 0x9972 <time_is_leap_year+0x2a>
    9970:	21 e0       	ldi	r18, 0x01	; 1
    9972:	82 2f       	mov	r24, r18
    9974:	08 95       	ret

00009976 <time_get_days_in_month>:
    9976:	48 2f       	mov	r20, r24
    9978:	cb 01       	movw	r24, r22
    997a:	50 e0       	ldi	r21, 0x00	; 0
    997c:	fa 01       	movw	r30, r20
    997e:	31 97       	sbiw	r30, 0x01	; 1
    9980:	ec 30       	cpi	r30, 0x0C	; 12
    9982:	f1 05       	cpc	r31, r1
    9984:	50 f4       	brcc	.+20     	; 0x999a <time_get_days_in_month+0x24>
    9986:	eb 5e       	subi	r30, 0xEB	; 235
    9988:	fe 4f       	sbci	r31, 0xFE	; 254
    998a:	1a c2       	rjmp	.+1076   	; 0x9dc0 <__tablejump2__>
    998c:	8f e1       	ldi	r24, 0x1F	; 31
    998e:	08 95       	ret
    9990:	db df       	rcall	.-74     	; 0x9948 <time_is_leap_year>
    9992:	88 23       	and	r24, r24
    9994:	31 f0       	breq	.+12     	; 0x99a2 <time_get_days_in_month+0x2c>
    9996:	8d e1       	ldi	r24, 0x1D	; 29
    9998:	08 95       	ret
    999a:	80 e0       	ldi	r24, 0x00	; 0
    999c:	08 95       	ret
    999e:	8e e1       	ldi	r24, 0x1E	; 30
    99a0:	08 95       	ret
    99a2:	8c e1       	ldi	r24, 0x1C	; 28
    99a4:	08 95       	ret

000099a6 <time_get_weeknumber>:
		return false;
}

// Static Method to return ISO WeekNumber (1-53) for a given year
int16_t time_get_weeknumber(uint8_t day, uint8_t month, uint16_t year) 
{	    
    99a6:	cf 92       	push	r12
    99a8:	df 92       	push	r13
    99aa:	ef 92       	push	r14
    99ac:	ff 92       	push	r15
    99ae:	0f 93       	push	r16
    99b0:	1f 93       	push	r17
    99b2:	cf 93       	push	r28
    99b4:	df 93       	push	r29
    99b6:	cd b7       	in	r28, 0x3d	; 61
    99b8:	de b7       	in	r29, 0x3e	; 62
    99ba:	68 97       	sbiw	r28, 0x18	; 24
    99bc:	cd bf       	out	0x3d, r28	; 61
    99be:	de bf       	out	0x3e, r29	; 62
    99c0:	7a 01       	movw	r14, r20
	int16_t yyyy = year;
	int16_t mm= month;
    99c2:	c6 2e       	mov	r12, r22
    99c4:	d1 2c       	mov	r13, r1
	int16_t day_of_year_number;
	int16_t jan_1_weekday;
	int16_t week_number = 0, weekday;
	    
	int16_t i,j,k,l,m,n;
	int16_t mnth[12] = {0,31,59,90,120,151,181,212,243,273,304,334};
    99c6:	98 e1       	ldi	r25, 0x18	; 24
    99c8:	ef eb       	ldi	r30, 0xBF	; 191
    99ca:	f0 e2       	ldi	r31, 0x20	; 32
    99cc:	de 01       	movw	r26, r28
    99ce:	11 96       	adiw	r26, 0x01	; 1
    99d0:	01 90       	ld	r0, Z+
    99d2:	0d 92       	st	X+, r0
    99d4:	9a 95       	dec	r25
    99d6:	e1 f7       	brne	.-8      	; 0x99d0 <time_get_weeknumber+0x2a>

	int16_t year_number;
	    
	// Set DayofYear Number for yyyy mm dd
	day_of_year_number = dd + mnth[mm-1];
    99d8:	f6 01       	movw	r30, r12
    99da:	31 97       	sbiw	r30, 0x01	; 1
    99dc:	ee 0f       	add	r30, r30
    99de:	ff 1f       	adc	r31, r31
    99e0:	21 e0       	ldi	r18, 0x01	; 1
    99e2:	30 e0       	ldi	r19, 0x00	; 0
    99e4:	2c 0f       	add	r18, r28
    99e6:	3d 1f       	adc	r19, r29
    99e8:	e2 0f       	add	r30, r18
    99ea:	f3 1f       	adc	r31, r19
    99ec:	00 81       	ld	r16, Z
    99ee:	11 81       	ldd	r17, Z+1	; 0x01
    99f0:	08 0f       	add	r16, r24
    99f2:	11 1d       	adc	r17, r1

	// Increase of Dayof Year Number by 1, if year is leapyear and month is february
	if ((time_is_leap_year(yyyy) == true) && (mm == 2))
    99f4:	ca 01       	movw	r24, r20
    99f6:	a8 df       	rcall	.-176    	; 0x9948 <time_is_leap_year>
    99f8:	48 2f       	mov	r20, r24
    99fa:	88 23       	and	r24, r24
    99fc:	31 f0       	breq	.+12     	; 0x9a0a <time_get_weeknumber+0x64>
    99fe:	32 e0       	ldi	r19, 0x02	; 2
    9a00:	c3 16       	cp	r12, r19
    9a02:	d1 04       	cpc	r13, r1
    9a04:	11 f4       	brne	.+4      	; 0x9a0a <time_get_weeknumber+0x64>
	day_of_year_number += 1;
    9a06:	0f 5f       	subi	r16, 0xFF	; 255
    9a08:	1f 4f       	sbci	r17, 0xFF	; 255

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
    9a0a:	51 e0       	ldi	r21, 0x01	; 1
    9a0c:	e5 1a       	sub	r14, r21
    9a0e:	f1 08       	sbc	r15, r1
    9a10:	e4 e6       	ldi	r30, 0x64	; 100
    9a12:	f0 e0       	ldi	r31, 0x00	; 0
    9a14:	c7 01       	movw	r24, r14
    9a16:	bf 01       	movw	r22, r30
    9a18:	9e d1       	rcall	.+828    	; 0x9d56 <__divmodhi4>
    9a1a:	9c 01       	movw	r18, r24
	j = (yyyy - 1) - i;
    9a1c:	c7 01       	movw	r24, r14
    9a1e:	82 1b       	sub	r24, r18
    9a20:	93 0b       	sbc	r25, r19
	k = i + i/4;
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    9a22:	bf 01       	movw	r22, r30
    9a24:	98 d1       	rcall	.+816    	; 0x9d56 <__divmodhi4>
    9a26:	cb 01       	movw	r24, r22
    9a28:	64 e0       	ldi	r22, 0x04	; 4
    9a2a:	70 e0       	ldi	r23, 0x00	; 0
    9a2c:	94 d1       	rcall	.+808    	; 0x9d56 <__divmodhi4>
    9a2e:	55 e0       	ldi	r21, 0x05	; 5
    9a30:	58 9f       	mul	r21, r24
    9a32:	b0 01       	movw	r22, r0
    9a34:	59 9f       	mul	r21, r25
    9a36:	70 0d       	add	r23, r0
    9a38:	11 24       	eor	r1, r1
	day_of_year_number += 1;

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
	j = (yyyy - 1) - i;
	k = i + i/4;
    9a3a:	c9 01       	movw	r24, r18
    9a3c:	37 fd       	sbrc	r19, 7
    9a3e:	03 96       	adiw	r24, 0x03	; 3
    9a40:	95 95       	asr	r25
    9a42:	87 95       	ror	r24
    9a44:	95 95       	asr	r25
    9a46:	87 95       	ror	r24
    9a48:	82 0f       	add	r24, r18
    9a4a:	93 1f       	adc	r25, r19
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    9a4c:	86 0f       	add	r24, r22
    9a4e:	97 1f       	adc	r25, r23
    9a50:	27 e0       	ldi	r18, 0x07	; 7
    9a52:	e2 2e       	mov	r14, r18
    9a54:	f1 2c       	mov	r15, r1
    9a56:	b7 01       	movw	r22, r14
    9a58:	7e d1       	rcall	.+764    	; 0x9d56 <__divmodhi4>
    9a5a:	9c 01       	movw	r18, r24
    9a5c:	fc 01       	movw	r30, r24
    9a5e:	31 96       	adiw	r30, 0x01	; 1
	// Calcuate the WeekDay for the given date
	l = day_of_year_number + (jan_1_weekday - 1);
	weekday = 1 + ((l - 1) % 7);

	// Find if the date falls in YearNumber set WeekNumber to 52 or 53
	if ((day_of_year_number <= (8 - jan_1_weekday)) && (jan_1_weekday > 4))
    9a60:	e8 1a       	sub	r14, r24
    9a62:	f9 0a       	sbc	r15, r25
    9a64:	e0 16       	cp	r14, r16
    9a66:	f1 06       	cpc	r15, r17
    9a68:	5c f0       	brlt	.+22     	; 0x9a80 <time_get_weeknumber+0xda>
    9a6a:	e5 30       	cpi	r30, 0x05	; 5
    9a6c:	f1 05       	cpc	r31, r1
    9a6e:	44 f0       	brlt	.+16     	; 0x9a80 <time_get_weeknumber+0xda>
	{
		year_number = yyyy - 1;
		if ((jan_1_weekday == 5) || ((jan_1_weekday == 6) && (jan_1_weekday > 4)))
    9a70:	37 97       	sbiw	r30, 0x07	; 7
    9a72:	19 f4       	brne	.+6      	; 0x9a7a <time_get_weeknumber+0xd4>
		week_number = 53;
		else
		week_number = 52;
    9a74:	84 e3       	ldi	r24, 0x34	; 52
    9a76:	90 e0       	ldi	r25, 0x00	; 0
    9a78:	30 c0       	rjmp	.+96     	; 0x9ada <time_get_weeknumber+0x134>
	// Find if the date falls in YearNumber set WeekNumber to 52 or 53
	if ((day_of_year_number <= (8 - jan_1_weekday)) && (jan_1_weekday > 4))
	{
		year_number = yyyy - 1;
		if ((jan_1_weekday == 5) || ((jan_1_weekday == 6) && (jan_1_weekday > 4)))
		week_number = 53;
    9a7a:	85 e3       	ldi	r24, 0x35	; 53
    9a7c:	90 e0       	ldi	r25, 0x00	; 0
    9a7e:	2d c0       	rjmp	.+90     	; 0x9ada <time_get_weeknumber+0x134>
	year_number = yyyy;
	    
	// Set WeekNumber to 1 to 53 if date falls in YearNumber
	if (year_number == yyyy)
	{
		if (time_is_leap_year(yyyy)==true)
    9a80:	44 23       	and	r20, r20
    9a82:	29 f0       	breq	.+10     	; 0x9a8e <time_get_weeknumber+0xe8>
		m = 366;
    9a84:	ae e6       	ldi	r26, 0x6E	; 110
    9a86:	ca 2e       	mov	r12, r26
    9a88:	dd 24       	eor	r13, r13
    9a8a:	d3 94       	inc	r13
    9a8c:	04 c0       	rjmp	.+8      	; 0x9a96 <time_get_weeknumber+0xf0>
		else
		m = 365;
    9a8e:	7d e6       	ldi	r23, 0x6D	; 109
    9a90:	c7 2e       	mov	r12, r23
    9a92:	dd 24       	eor	r13, r13
    9a94:	d3 94       	inc	r13
	j = (yyyy - 1) - i;
	k = i + i/4;
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);

	// Calcuate the WeekDay for the given date
	l = day_of_year_number + (jan_1_weekday - 1);
    9a96:	c8 01       	movw	r24, r16
    9a98:	82 0f       	add	r24, r18
    9a9a:	93 1f       	adc	r25, r19
	weekday = 1 + ((l - 1) % 7);
    9a9c:	01 97       	sbiw	r24, 0x01	; 1
    9a9e:	67 e0       	ldi	r22, 0x07	; 7
    9aa0:	e6 2e       	mov	r14, r22
    9aa2:	f1 2c       	mov	r15, r1
    9aa4:	b7 01       	movw	r22, r14
    9aa6:	57 d1       	rcall	.+686    	; 0x9d56 <__divmodhi4>
	{
		if (time_is_leap_year(yyyy)==true)
		m = 366;
		else
		m = 365;
		if ((m - day_of_year_number) < (4-weekday))
    9aa8:	c0 1a       	sub	r12, r16
    9aaa:	d1 0a       	sbc	r13, r17
    9aac:	43 e0       	ldi	r20, 0x03	; 3
    9aae:	50 e0       	ldi	r21, 0x00	; 0
    9ab0:	48 1b       	sub	r20, r24
    9ab2:	59 0b       	sbc	r21, r25
    9ab4:	c4 16       	cp	r12, r20
    9ab6:	d5 06       	cpc	r13, r21
    9ab8:	74 f0       	brlt	.+28     	; 0x9ad6 <time_get_weeknumber+0x130>
			week_number = 1;
		}
	}
	    
	if (year_number==yyyy) {
		n = day_of_year_number + (7 - weekday) + (jan_1_weekday -1);
    9aba:	a8 01       	movw	r20, r16
    9abc:	48 1b       	sub	r20, r24
    9abe:	59 0b       	sbc	r21, r25
    9ac0:	ca 01       	movw	r24, r20
    9ac2:	06 96       	adiw	r24, 0x06	; 6
    9ac4:	82 0f       	add	r24, r18
    9ac6:	93 1f       	adc	r25, r19
		week_number = n / 7;
    9ac8:	b7 01       	movw	r22, r14
    9aca:	45 d1       	rcall	.+650    	; 0x9d56 <__divmodhi4>
    9acc:	cb 01       	movw	r24, r22
		if (jan_1_weekday > 4)
    9ace:	35 97       	sbiw	r30, 0x05	; 5
    9ad0:	24 f0       	brlt	.+8      	; 0x9ada <time_get_weeknumber+0x134>
		week_number -= 1;
    9ad2:	01 97       	sbiw	r24, 0x01	; 1
    9ad4:	02 c0       	rjmp	.+4      	; 0x9ada <time_get_weeknumber+0x134>
		else
		m = 365;
		if ((m - day_of_year_number) < (4-weekday))
		{
			year_number = yyyy + 1;
			week_number = 1;
    9ad6:	81 e0       	ldi	r24, 0x01	; 1
    9ad8:	90 e0       	ldi	r25, 0x00	; 0
		if (jan_1_weekday > 4)
		week_number -= 1;
	}

	return (week_number);
}
    9ada:	68 96       	adiw	r28, 0x18	; 24
    9adc:	cd bf       	out	0x3d, r28	; 61
    9ade:	de bf       	out	0x3e, r29	; 62
    9ae0:	df 91       	pop	r29
    9ae2:	cf 91       	pop	r28
    9ae4:	1f 91       	pop	r17
    9ae6:	0f 91       	pop	r16
    9ae8:	ff 90       	pop	r15
    9aea:	ef 90       	pop	r14
    9aec:	df 90       	pop	r13
    9aee:	cf 90       	pop	r12
    9af0:	08 95       	ret

00009af2 <__divsf3>:
    9af2:	0c d0       	rcall	.+24     	; 0x9b0c <__divsf3x>
    9af4:	ba c0       	rjmp	.+372    	; 0x9c6a <__fp_round>
    9af6:	b2 d0       	rcall	.+356    	; 0x9c5c <__fp_pscB>
    9af8:	40 f0       	brcs	.+16     	; 0x9b0a <__divsf3+0x18>
    9afa:	a9 d0       	rcall	.+338    	; 0x9c4e <__fp_pscA>
    9afc:	30 f0       	brcs	.+12     	; 0x9b0a <__divsf3+0x18>
    9afe:	21 f4       	brne	.+8      	; 0x9b08 <__divsf3+0x16>
    9b00:	5f 3f       	cpi	r21, 0xFF	; 255
    9b02:	19 f0       	breq	.+6      	; 0x9b0a <__divsf3+0x18>
    9b04:	9b c0       	rjmp	.+310    	; 0x9c3c <__fp_inf>
    9b06:	51 11       	cpse	r21, r1
    9b08:	e4 c0       	rjmp	.+456    	; 0x9cd2 <__fp_szero>
    9b0a:	9e c0       	rjmp	.+316    	; 0x9c48 <__fp_nan>

00009b0c <__divsf3x>:
    9b0c:	bf d0       	rcall	.+382    	; 0x9c8c <__fp_split3>
    9b0e:	98 f3       	brcs	.-26     	; 0x9af6 <__divsf3+0x4>

00009b10 <__divsf3_pse>:
    9b10:	99 23       	and	r25, r25
    9b12:	c9 f3       	breq	.-14     	; 0x9b06 <__divsf3+0x14>
    9b14:	55 23       	and	r21, r21
    9b16:	b1 f3       	breq	.-20     	; 0x9b04 <__divsf3+0x12>
    9b18:	95 1b       	sub	r25, r21
    9b1a:	55 0b       	sbc	r21, r21
    9b1c:	bb 27       	eor	r27, r27
    9b1e:	aa 27       	eor	r26, r26
    9b20:	62 17       	cp	r22, r18
    9b22:	73 07       	cpc	r23, r19
    9b24:	84 07       	cpc	r24, r20
    9b26:	38 f0       	brcs	.+14     	; 0x9b36 <__divsf3_pse+0x26>
    9b28:	9f 5f       	subi	r25, 0xFF	; 255
    9b2a:	5f 4f       	sbci	r21, 0xFF	; 255
    9b2c:	22 0f       	add	r18, r18
    9b2e:	33 1f       	adc	r19, r19
    9b30:	44 1f       	adc	r20, r20
    9b32:	aa 1f       	adc	r26, r26
    9b34:	a9 f3       	breq	.-22     	; 0x9b20 <__divsf3_pse+0x10>
    9b36:	33 d0       	rcall	.+102    	; 0x9b9e <__divsf3_pse+0x8e>
    9b38:	0e 2e       	mov	r0, r30
    9b3a:	3a f0       	brmi	.+14     	; 0x9b4a <__divsf3_pse+0x3a>
    9b3c:	e0 e8       	ldi	r30, 0x80	; 128
    9b3e:	30 d0       	rcall	.+96     	; 0x9ba0 <__divsf3_pse+0x90>
    9b40:	91 50       	subi	r25, 0x01	; 1
    9b42:	50 40       	sbci	r21, 0x00	; 0
    9b44:	e6 95       	lsr	r30
    9b46:	00 1c       	adc	r0, r0
    9b48:	ca f7       	brpl	.-14     	; 0x9b3c <__divsf3_pse+0x2c>
    9b4a:	29 d0       	rcall	.+82     	; 0x9b9e <__divsf3_pse+0x8e>
    9b4c:	fe 2f       	mov	r31, r30
    9b4e:	27 d0       	rcall	.+78     	; 0x9b9e <__divsf3_pse+0x8e>
    9b50:	66 0f       	add	r22, r22
    9b52:	77 1f       	adc	r23, r23
    9b54:	88 1f       	adc	r24, r24
    9b56:	bb 1f       	adc	r27, r27
    9b58:	26 17       	cp	r18, r22
    9b5a:	37 07       	cpc	r19, r23
    9b5c:	48 07       	cpc	r20, r24
    9b5e:	ab 07       	cpc	r26, r27
    9b60:	b0 e8       	ldi	r27, 0x80	; 128
    9b62:	09 f0       	breq	.+2      	; 0x9b66 <__divsf3_pse+0x56>
    9b64:	bb 0b       	sbc	r27, r27
    9b66:	80 2d       	mov	r24, r0
    9b68:	bf 01       	movw	r22, r30
    9b6a:	ff 27       	eor	r31, r31
    9b6c:	93 58       	subi	r25, 0x83	; 131
    9b6e:	5f 4f       	sbci	r21, 0xFF	; 255
    9b70:	2a f0       	brmi	.+10     	; 0x9b7c <__divsf3_pse+0x6c>
    9b72:	9e 3f       	cpi	r25, 0xFE	; 254
    9b74:	51 05       	cpc	r21, r1
    9b76:	68 f0       	brcs	.+26     	; 0x9b92 <__divsf3_pse+0x82>
    9b78:	61 c0       	rjmp	.+194    	; 0x9c3c <__fp_inf>
    9b7a:	ab c0       	rjmp	.+342    	; 0x9cd2 <__fp_szero>
    9b7c:	5f 3f       	cpi	r21, 0xFF	; 255
    9b7e:	ec f3       	brlt	.-6      	; 0x9b7a <__divsf3_pse+0x6a>
    9b80:	98 3e       	cpi	r25, 0xE8	; 232
    9b82:	dc f3       	brlt	.-10     	; 0x9b7a <__divsf3_pse+0x6a>
    9b84:	86 95       	lsr	r24
    9b86:	77 95       	ror	r23
    9b88:	67 95       	ror	r22
    9b8a:	b7 95       	ror	r27
    9b8c:	f7 95       	ror	r31
    9b8e:	9f 5f       	subi	r25, 0xFF	; 255
    9b90:	c9 f7       	brne	.-14     	; 0x9b84 <__divsf3_pse+0x74>
    9b92:	88 0f       	add	r24, r24
    9b94:	91 1d       	adc	r25, r1
    9b96:	96 95       	lsr	r25
    9b98:	87 95       	ror	r24
    9b9a:	97 f9       	bld	r25, 7
    9b9c:	08 95       	ret
    9b9e:	e1 e0       	ldi	r30, 0x01	; 1
    9ba0:	66 0f       	add	r22, r22
    9ba2:	77 1f       	adc	r23, r23
    9ba4:	88 1f       	adc	r24, r24
    9ba6:	bb 1f       	adc	r27, r27
    9ba8:	62 17       	cp	r22, r18
    9baa:	73 07       	cpc	r23, r19
    9bac:	84 07       	cpc	r24, r20
    9bae:	ba 07       	cpc	r27, r26
    9bb0:	20 f0       	brcs	.+8      	; 0x9bba <__divsf3_pse+0xaa>
    9bb2:	62 1b       	sub	r22, r18
    9bb4:	73 0b       	sbc	r23, r19
    9bb6:	84 0b       	sbc	r24, r20
    9bb8:	ba 0b       	sbc	r27, r26
    9bba:	ee 1f       	adc	r30, r30
    9bbc:	88 f7       	brcc	.-30     	; 0x9ba0 <__divsf3_pse+0x90>
    9bbe:	e0 95       	com	r30
    9bc0:	08 95       	ret

00009bc2 <__floatunsisf>:
    9bc2:	e8 94       	clt
    9bc4:	09 c0       	rjmp	.+18     	; 0x9bd8 <__floatsisf+0x12>

00009bc6 <__floatsisf>:
    9bc6:	97 fb       	bst	r25, 7
    9bc8:	3e f4       	brtc	.+14     	; 0x9bd8 <__floatsisf+0x12>
    9bca:	90 95       	com	r25
    9bcc:	80 95       	com	r24
    9bce:	70 95       	com	r23
    9bd0:	61 95       	neg	r22
    9bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    9bd4:	8f 4f       	sbci	r24, 0xFF	; 255
    9bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    9bd8:	99 23       	and	r25, r25
    9bda:	a9 f0       	breq	.+42     	; 0x9c06 <__floatsisf+0x40>
    9bdc:	f9 2f       	mov	r31, r25
    9bde:	96 e9       	ldi	r25, 0x96	; 150
    9be0:	bb 27       	eor	r27, r27
    9be2:	93 95       	inc	r25
    9be4:	f6 95       	lsr	r31
    9be6:	87 95       	ror	r24
    9be8:	77 95       	ror	r23
    9bea:	67 95       	ror	r22
    9bec:	b7 95       	ror	r27
    9bee:	f1 11       	cpse	r31, r1
    9bf0:	f8 cf       	rjmp	.-16     	; 0x9be2 <__floatsisf+0x1c>
    9bf2:	fa f4       	brpl	.+62     	; 0x9c32 <__floatsisf+0x6c>
    9bf4:	bb 0f       	add	r27, r27
    9bf6:	11 f4       	brne	.+4      	; 0x9bfc <__floatsisf+0x36>
    9bf8:	60 ff       	sbrs	r22, 0
    9bfa:	1b c0       	rjmp	.+54     	; 0x9c32 <__floatsisf+0x6c>
    9bfc:	6f 5f       	subi	r22, 0xFF	; 255
    9bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    9c00:	8f 4f       	sbci	r24, 0xFF	; 255
    9c02:	9f 4f       	sbci	r25, 0xFF	; 255
    9c04:	16 c0       	rjmp	.+44     	; 0x9c32 <__floatsisf+0x6c>
    9c06:	88 23       	and	r24, r24
    9c08:	11 f0       	breq	.+4      	; 0x9c0e <__floatsisf+0x48>
    9c0a:	96 e9       	ldi	r25, 0x96	; 150
    9c0c:	11 c0       	rjmp	.+34     	; 0x9c30 <__floatsisf+0x6a>
    9c0e:	77 23       	and	r23, r23
    9c10:	21 f0       	breq	.+8      	; 0x9c1a <__floatsisf+0x54>
    9c12:	9e e8       	ldi	r25, 0x8E	; 142
    9c14:	87 2f       	mov	r24, r23
    9c16:	76 2f       	mov	r23, r22
    9c18:	05 c0       	rjmp	.+10     	; 0x9c24 <__floatsisf+0x5e>
    9c1a:	66 23       	and	r22, r22
    9c1c:	71 f0       	breq	.+28     	; 0x9c3a <__floatsisf+0x74>
    9c1e:	96 e8       	ldi	r25, 0x86	; 134
    9c20:	86 2f       	mov	r24, r22
    9c22:	70 e0       	ldi	r23, 0x00	; 0
    9c24:	60 e0       	ldi	r22, 0x00	; 0
    9c26:	2a f0       	brmi	.+10     	; 0x9c32 <__floatsisf+0x6c>
    9c28:	9a 95       	dec	r25
    9c2a:	66 0f       	add	r22, r22
    9c2c:	77 1f       	adc	r23, r23
    9c2e:	88 1f       	adc	r24, r24
    9c30:	da f7       	brpl	.-10     	; 0x9c28 <__floatsisf+0x62>
    9c32:	88 0f       	add	r24, r24
    9c34:	96 95       	lsr	r25
    9c36:	87 95       	ror	r24
    9c38:	97 f9       	bld	r25, 7
    9c3a:	08 95       	ret

00009c3c <__fp_inf>:
    9c3c:	97 f9       	bld	r25, 7
    9c3e:	9f 67       	ori	r25, 0x7F	; 127
    9c40:	80 e8       	ldi	r24, 0x80	; 128
    9c42:	70 e0       	ldi	r23, 0x00	; 0
    9c44:	60 e0       	ldi	r22, 0x00	; 0
    9c46:	08 95       	ret

00009c48 <__fp_nan>:
    9c48:	9f ef       	ldi	r25, 0xFF	; 255
    9c4a:	80 ec       	ldi	r24, 0xC0	; 192
    9c4c:	08 95       	ret

00009c4e <__fp_pscA>:
    9c4e:	00 24       	eor	r0, r0
    9c50:	0a 94       	dec	r0
    9c52:	16 16       	cp	r1, r22
    9c54:	17 06       	cpc	r1, r23
    9c56:	18 06       	cpc	r1, r24
    9c58:	09 06       	cpc	r0, r25
    9c5a:	08 95       	ret

00009c5c <__fp_pscB>:
    9c5c:	00 24       	eor	r0, r0
    9c5e:	0a 94       	dec	r0
    9c60:	12 16       	cp	r1, r18
    9c62:	13 06       	cpc	r1, r19
    9c64:	14 06       	cpc	r1, r20
    9c66:	05 06       	cpc	r0, r21
    9c68:	08 95       	ret

00009c6a <__fp_round>:
    9c6a:	09 2e       	mov	r0, r25
    9c6c:	03 94       	inc	r0
    9c6e:	00 0c       	add	r0, r0
    9c70:	11 f4       	brne	.+4      	; 0x9c76 <__fp_round+0xc>
    9c72:	88 23       	and	r24, r24
    9c74:	52 f0       	brmi	.+20     	; 0x9c8a <__fp_round+0x20>
    9c76:	bb 0f       	add	r27, r27
    9c78:	40 f4       	brcc	.+16     	; 0x9c8a <__fp_round+0x20>
    9c7a:	bf 2b       	or	r27, r31
    9c7c:	11 f4       	brne	.+4      	; 0x9c82 <__fp_round+0x18>
    9c7e:	60 ff       	sbrs	r22, 0
    9c80:	04 c0       	rjmp	.+8      	; 0x9c8a <__fp_round+0x20>
    9c82:	6f 5f       	subi	r22, 0xFF	; 255
    9c84:	7f 4f       	sbci	r23, 0xFF	; 255
    9c86:	8f 4f       	sbci	r24, 0xFF	; 255
    9c88:	9f 4f       	sbci	r25, 0xFF	; 255
    9c8a:	08 95       	ret

00009c8c <__fp_split3>:
    9c8c:	57 fd       	sbrc	r21, 7
    9c8e:	90 58       	subi	r25, 0x80	; 128
    9c90:	44 0f       	add	r20, r20
    9c92:	55 1f       	adc	r21, r21
    9c94:	59 f0       	breq	.+22     	; 0x9cac <__fp_splitA+0x10>
    9c96:	5f 3f       	cpi	r21, 0xFF	; 255
    9c98:	71 f0       	breq	.+28     	; 0x9cb6 <__fp_splitA+0x1a>
    9c9a:	47 95       	ror	r20

00009c9c <__fp_splitA>:
    9c9c:	88 0f       	add	r24, r24
    9c9e:	97 fb       	bst	r25, 7
    9ca0:	99 1f       	adc	r25, r25
    9ca2:	61 f0       	breq	.+24     	; 0x9cbc <__fp_splitA+0x20>
    9ca4:	9f 3f       	cpi	r25, 0xFF	; 255
    9ca6:	79 f0       	breq	.+30     	; 0x9cc6 <__fp_splitA+0x2a>
    9ca8:	87 95       	ror	r24
    9caa:	08 95       	ret
    9cac:	12 16       	cp	r1, r18
    9cae:	13 06       	cpc	r1, r19
    9cb0:	14 06       	cpc	r1, r20
    9cb2:	55 1f       	adc	r21, r21
    9cb4:	f2 cf       	rjmp	.-28     	; 0x9c9a <__fp_split3+0xe>
    9cb6:	46 95       	lsr	r20
    9cb8:	f1 df       	rcall	.-30     	; 0x9c9c <__fp_splitA>
    9cba:	08 c0       	rjmp	.+16     	; 0x9ccc <__fp_splitA+0x30>
    9cbc:	16 16       	cp	r1, r22
    9cbe:	17 06       	cpc	r1, r23
    9cc0:	18 06       	cpc	r1, r24
    9cc2:	99 1f       	adc	r25, r25
    9cc4:	f1 cf       	rjmp	.-30     	; 0x9ca8 <__fp_splitA+0xc>
    9cc6:	86 95       	lsr	r24
    9cc8:	71 05       	cpc	r23, r1
    9cca:	61 05       	cpc	r22, r1
    9ccc:	08 94       	sec
    9cce:	08 95       	ret

00009cd0 <__fp_zero>:
    9cd0:	e8 94       	clt

00009cd2 <__fp_szero>:
    9cd2:	bb 27       	eor	r27, r27
    9cd4:	66 27       	eor	r22, r22
    9cd6:	77 27       	eor	r23, r23
    9cd8:	cb 01       	movw	r24, r22
    9cda:	97 f9       	bld	r25, 7
    9cdc:	08 95       	ret

00009cde <__gesf2>:
    9cde:	03 d0       	rcall	.+6      	; 0x9ce6 <__fp_cmp>
    9ce0:	08 f4       	brcc	.+2      	; 0x9ce4 <__gesf2+0x6>
    9ce2:	8f ef       	ldi	r24, 0xFF	; 255
    9ce4:	08 95       	ret

00009ce6 <__fp_cmp>:
    9ce6:	99 0f       	add	r25, r25
    9ce8:	00 08       	sbc	r0, r0
    9cea:	55 0f       	add	r21, r21
    9cec:	aa 0b       	sbc	r26, r26
    9cee:	e0 e8       	ldi	r30, 0x80	; 128
    9cf0:	fe ef       	ldi	r31, 0xFE	; 254
    9cf2:	16 16       	cp	r1, r22
    9cf4:	17 06       	cpc	r1, r23
    9cf6:	e8 07       	cpc	r30, r24
    9cf8:	f9 07       	cpc	r31, r25
    9cfa:	c0 f0       	brcs	.+48     	; 0x9d2c <__fp_cmp+0x46>
    9cfc:	12 16       	cp	r1, r18
    9cfe:	13 06       	cpc	r1, r19
    9d00:	e4 07       	cpc	r30, r20
    9d02:	f5 07       	cpc	r31, r21
    9d04:	98 f0       	brcs	.+38     	; 0x9d2c <__fp_cmp+0x46>
    9d06:	62 1b       	sub	r22, r18
    9d08:	73 0b       	sbc	r23, r19
    9d0a:	84 0b       	sbc	r24, r20
    9d0c:	95 0b       	sbc	r25, r21
    9d0e:	39 f4       	brne	.+14     	; 0x9d1e <__fp_cmp+0x38>
    9d10:	0a 26       	eor	r0, r26
    9d12:	61 f0       	breq	.+24     	; 0x9d2c <__fp_cmp+0x46>
    9d14:	23 2b       	or	r18, r19
    9d16:	24 2b       	or	r18, r20
    9d18:	25 2b       	or	r18, r21
    9d1a:	21 f4       	brne	.+8      	; 0x9d24 <__fp_cmp+0x3e>
    9d1c:	08 95       	ret
    9d1e:	0a 26       	eor	r0, r26
    9d20:	09 f4       	brne	.+2      	; 0x9d24 <__fp_cmp+0x3e>
    9d22:	a1 40       	sbci	r26, 0x01	; 1
    9d24:	a6 95       	lsr	r26
    9d26:	8f ef       	ldi	r24, 0xFF	; 255
    9d28:	81 1d       	adc	r24, r1
    9d2a:	81 1d       	adc	r24, r1
    9d2c:	08 95       	ret

00009d2e <__udivmodhi4>:
    9d2e:	aa 1b       	sub	r26, r26
    9d30:	bb 1b       	sub	r27, r27
    9d32:	51 e1       	ldi	r21, 0x11	; 17
    9d34:	07 c0       	rjmp	.+14     	; 0x9d44 <__udivmodhi4_ep>

00009d36 <__udivmodhi4_loop>:
    9d36:	aa 1f       	adc	r26, r26
    9d38:	bb 1f       	adc	r27, r27
    9d3a:	a6 17       	cp	r26, r22
    9d3c:	b7 07       	cpc	r27, r23
    9d3e:	10 f0       	brcs	.+4      	; 0x9d44 <__udivmodhi4_ep>
    9d40:	a6 1b       	sub	r26, r22
    9d42:	b7 0b       	sbc	r27, r23

00009d44 <__udivmodhi4_ep>:
    9d44:	88 1f       	adc	r24, r24
    9d46:	99 1f       	adc	r25, r25
    9d48:	5a 95       	dec	r21
    9d4a:	a9 f7       	brne	.-22     	; 0x9d36 <__udivmodhi4_loop>
    9d4c:	80 95       	com	r24
    9d4e:	90 95       	com	r25
    9d50:	bc 01       	movw	r22, r24
    9d52:	cd 01       	movw	r24, r26
    9d54:	08 95       	ret

00009d56 <__divmodhi4>:
    9d56:	97 fb       	bst	r25, 7
    9d58:	07 2e       	mov	r0, r23
    9d5a:	16 f4       	brtc	.+4      	; 0x9d60 <__divmodhi4+0xa>
    9d5c:	00 94       	com	r0
    9d5e:	06 d0       	rcall	.+12     	; 0x9d6c <__divmodhi4_neg1>
    9d60:	77 fd       	sbrc	r23, 7
    9d62:	08 d0       	rcall	.+16     	; 0x9d74 <__divmodhi4_neg2>
    9d64:	e4 df       	rcall	.-56     	; 0x9d2e <__udivmodhi4>
    9d66:	07 fc       	sbrc	r0, 7
    9d68:	05 d0       	rcall	.+10     	; 0x9d74 <__divmodhi4_neg2>
    9d6a:	3e f4       	brtc	.+14     	; 0x9d7a <__divmodhi4_exit>

00009d6c <__divmodhi4_neg1>:
    9d6c:	90 95       	com	r25
    9d6e:	81 95       	neg	r24
    9d70:	9f 4f       	sbci	r25, 0xFF	; 255
    9d72:	08 95       	ret

00009d74 <__divmodhi4_neg2>:
    9d74:	70 95       	com	r23
    9d76:	61 95       	neg	r22
    9d78:	7f 4f       	sbci	r23, 0xFF	; 255

00009d7a <__divmodhi4_exit>:
    9d7a:	08 95       	ret

00009d7c <__udivmodsi4>:
    9d7c:	a1 e2       	ldi	r26, 0x21	; 33
    9d7e:	1a 2e       	mov	r1, r26
    9d80:	aa 1b       	sub	r26, r26
    9d82:	bb 1b       	sub	r27, r27
    9d84:	fd 01       	movw	r30, r26
    9d86:	0d c0       	rjmp	.+26     	; 0x9da2 <__udivmodsi4_ep>

00009d88 <__udivmodsi4_loop>:
    9d88:	aa 1f       	adc	r26, r26
    9d8a:	bb 1f       	adc	r27, r27
    9d8c:	ee 1f       	adc	r30, r30
    9d8e:	ff 1f       	adc	r31, r31
    9d90:	a2 17       	cp	r26, r18
    9d92:	b3 07       	cpc	r27, r19
    9d94:	e4 07       	cpc	r30, r20
    9d96:	f5 07       	cpc	r31, r21
    9d98:	20 f0       	brcs	.+8      	; 0x9da2 <__udivmodsi4_ep>
    9d9a:	a2 1b       	sub	r26, r18
    9d9c:	b3 0b       	sbc	r27, r19
    9d9e:	e4 0b       	sbc	r30, r20
    9da0:	f5 0b       	sbc	r31, r21

00009da2 <__udivmodsi4_ep>:
    9da2:	66 1f       	adc	r22, r22
    9da4:	77 1f       	adc	r23, r23
    9da6:	88 1f       	adc	r24, r24
    9da8:	99 1f       	adc	r25, r25
    9daa:	1a 94       	dec	r1
    9dac:	69 f7       	brne	.-38     	; 0x9d88 <__udivmodsi4_loop>
    9dae:	60 95       	com	r22
    9db0:	70 95       	com	r23
    9db2:	80 95       	com	r24
    9db4:	90 95       	com	r25
    9db6:	9b 01       	movw	r18, r22
    9db8:	ac 01       	movw	r20, r24
    9dba:	bd 01       	movw	r22, r26
    9dbc:	cf 01       	movw	r24, r30
    9dbe:	08 95       	ret

00009dc0 <__tablejump2__>:
    9dc0:	ee 0f       	add	r30, r30
    9dc2:	ff 1f       	adc	r31, r31

00009dc4 <__tablejump__>:
    9dc4:	05 90       	lpm	r0, Z+
    9dc6:	f4 91       	lpm	r31, Z
    9dc8:	e0 2d       	mov	r30, r0
    9dca:	09 94       	ijmp

00009dcc <__umulhisi3>:
    9dcc:	a2 9f       	mul	r26, r18
    9dce:	b0 01       	movw	r22, r0
    9dd0:	b3 9f       	mul	r27, r19
    9dd2:	c0 01       	movw	r24, r0
    9dd4:	a3 9f       	mul	r26, r19
    9dd6:	70 0d       	add	r23, r0
    9dd8:	81 1d       	adc	r24, r1
    9dda:	11 24       	eor	r1, r1
    9ddc:	91 1d       	adc	r25, r1
    9dde:	b2 9f       	mul	r27, r18
    9de0:	70 0d       	add	r23, r0
    9de2:	81 1d       	adc	r24, r1
    9de4:	11 24       	eor	r1, r1
    9de6:	91 1d       	adc	r25, r1
    9de8:	08 95       	ret

00009dea <__muluhisi3>:
    9dea:	f0 df       	rcall	.-32     	; 0x9dcc <__umulhisi3>
    9dec:	a5 9f       	mul	r26, r21
    9dee:	90 0d       	add	r25, r0
    9df0:	b4 9f       	mul	r27, r20
    9df2:	90 0d       	add	r25, r0
    9df4:	a4 9f       	mul	r26, r20
    9df6:	80 0d       	add	r24, r0
    9df8:	91 1d       	adc	r25, r1
    9dfa:	11 24       	eor	r1, r1
    9dfc:	08 95       	ret

00009dfe <calloc>:
    9dfe:	0f 93       	push	r16
    9e00:	1f 93       	push	r17
    9e02:	cf 93       	push	r28
    9e04:	df 93       	push	r29
    9e06:	86 9f       	mul	r24, r22
    9e08:	80 01       	movw	r16, r0
    9e0a:	87 9f       	mul	r24, r23
    9e0c:	10 0d       	add	r17, r0
    9e0e:	96 9f       	mul	r25, r22
    9e10:	10 0d       	add	r17, r0
    9e12:	11 24       	eor	r1, r1
    9e14:	c8 01       	movw	r24, r16
    9e16:	0d d0       	rcall	.+26     	; 0x9e32 <malloc>
    9e18:	ec 01       	movw	r28, r24
    9e1a:	00 97       	sbiw	r24, 0x00	; 0
    9e1c:	21 f0       	breq	.+8      	; 0x9e26 <calloc+0x28>
    9e1e:	a8 01       	movw	r20, r16
    9e20:	60 e0       	ldi	r22, 0x00	; 0
    9e22:	70 e0       	ldi	r23, 0x00	; 0
    9e24:	3e d1       	rcall	.+636    	; 0xa0a2 <memset>
    9e26:	ce 01       	movw	r24, r28
    9e28:	df 91       	pop	r29
    9e2a:	cf 91       	pop	r28
    9e2c:	1f 91       	pop	r17
    9e2e:	0f 91       	pop	r16
    9e30:	08 95       	ret

00009e32 <malloc>:
    9e32:	cf 93       	push	r28
    9e34:	df 93       	push	r29
    9e36:	82 30       	cpi	r24, 0x02	; 2
    9e38:	91 05       	cpc	r25, r1
    9e3a:	10 f4       	brcc	.+4      	; 0x9e40 <malloc+0xe>
    9e3c:	82 e0       	ldi	r24, 0x02	; 2
    9e3e:	90 e0       	ldi	r25, 0x00	; 0
    9e40:	e0 91 76 2c 	lds	r30, 0x2C76
    9e44:	f0 91 77 2c 	lds	r31, 0x2C77
    9e48:	20 e0       	ldi	r18, 0x00	; 0
    9e4a:	30 e0       	ldi	r19, 0x00	; 0
    9e4c:	a0 e0       	ldi	r26, 0x00	; 0
    9e4e:	b0 e0       	ldi	r27, 0x00	; 0
    9e50:	30 97       	sbiw	r30, 0x00	; 0
    9e52:	39 f1       	breq	.+78     	; 0x9ea2 <malloc+0x70>
    9e54:	40 81       	ld	r20, Z
    9e56:	51 81       	ldd	r21, Z+1	; 0x01
    9e58:	48 17       	cp	r20, r24
    9e5a:	59 07       	cpc	r21, r25
    9e5c:	b8 f0       	brcs	.+46     	; 0x9e8c <malloc+0x5a>
    9e5e:	48 17       	cp	r20, r24
    9e60:	59 07       	cpc	r21, r25
    9e62:	71 f4       	brne	.+28     	; 0x9e80 <malloc+0x4e>
    9e64:	82 81       	ldd	r24, Z+2	; 0x02
    9e66:	93 81       	ldd	r25, Z+3	; 0x03
    9e68:	10 97       	sbiw	r26, 0x00	; 0
    9e6a:	29 f0       	breq	.+10     	; 0x9e76 <malloc+0x44>
    9e6c:	12 96       	adiw	r26, 0x02	; 2
    9e6e:	8d 93       	st	X+, r24
    9e70:	9c 93       	st	X, r25
    9e72:	13 97       	sbiw	r26, 0x03	; 3
    9e74:	2c c0       	rjmp	.+88     	; 0x9ece <malloc+0x9c>
    9e76:	80 93 76 2c 	sts	0x2C76, r24
    9e7a:	90 93 77 2c 	sts	0x2C77, r25
    9e7e:	27 c0       	rjmp	.+78     	; 0x9ece <malloc+0x9c>
    9e80:	21 15       	cp	r18, r1
    9e82:	31 05       	cpc	r19, r1
    9e84:	31 f0       	breq	.+12     	; 0x9e92 <malloc+0x60>
    9e86:	42 17       	cp	r20, r18
    9e88:	53 07       	cpc	r21, r19
    9e8a:	18 f0       	brcs	.+6      	; 0x9e92 <malloc+0x60>
    9e8c:	a9 01       	movw	r20, r18
    9e8e:	db 01       	movw	r26, r22
    9e90:	01 c0       	rjmp	.+2      	; 0x9e94 <malloc+0x62>
    9e92:	ef 01       	movw	r28, r30
    9e94:	9a 01       	movw	r18, r20
    9e96:	bd 01       	movw	r22, r26
    9e98:	df 01       	movw	r26, r30
    9e9a:	02 80       	ldd	r0, Z+2	; 0x02
    9e9c:	f3 81       	ldd	r31, Z+3	; 0x03
    9e9e:	e0 2d       	mov	r30, r0
    9ea0:	d7 cf       	rjmp	.-82     	; 0x9e50 <malloc+0x1e>
    9ea2:	21 15       	cp	r18, r1
    9ea4:	31 05       	cpc	r19, r1
    9ea6:	f9 f0       	breq	.+62     	; 0x9ee6 <malloc+0xb4>
    9ea8:	28 1b       	sub	r18, r24
    9eaa:	39 0b       	sbc	r19, r25
    9eac:	24 30       	cpi	r18, 0x04	; 4
    9eae:	31 05       	cpc	r19, r1
    9eb0:	80 f4       	brcc	.+32     	; 0x9ed2 <malloc+0xa0>
    9eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    9eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    9eb6:	61 15       	cp	r22, r1
    9eb8:	71 05       	cpc	r23, r1
    9eba:	21 f0       	breq	.+8      	; 0x9ec4 <malloc+0x92>
    9ebc:	fb 01       	movw	r30, r22
    9ebe:	82 83       	std	Z+2, r24	; 0x02
    9ec0:	93 83       	std	Z+3, r25	; 0x03
    9ec2:	04 c0       	rjmp	.+8      	; 0x9ecc <malloc+0x9a>
    9ec4:	80 93 76 2c 	sts	0x2C76, r24
    9ec8:	90 93 77 2c 	sts	0x2C77, r25
    9ecc:	fe 01       	movw	r30, r28
    9ece:	32 96       	adiw	r30, 0x02	; 2
    9ed0:	44 c0       	rjmp	.+136    	; 0x9f5a <malloc+0x128>
    9ed2:	fe 01       	movw	r30, r28
    9ed4:	e2 0f       	add	r30, r18
    9ed6:	f3 1f       	adc	r31, r19
    9ed8:	81 93       	st	Z+, r24
    9eda:	91 93       	st	Z+, r25
    9edc:	22 50       	subi	r18, 0x02	; 2
    9ede:	31 09       	sbc	r19, r1
    9ee0:	28 83       	st	Y, r18
    9ee2:	39 83       	std	Y+1, r19	; 0x01
    9ee4:	3a c0       	rjmp	.+116    	; 0x9f5a <malloc+0x128>
    9ee6:	20 91 74 2c 	lds	r18, 0x2C74
    9eea:	30 91 75 2c 	lds	r19, 0x2C75
    9eee:	23 2b       	or	r18, r19
    9ef0:	41 f4       	brne	.+16     	; 0x9f02 <malloc+0xd0>
    9ef2:	20 91 02 20 	lds	r18, 0x2002
    9ef6:	30 91 03 20 	lds	r19, 0x2003
    9efa:	20 93 74 2c 	sts	0x2C74, r18
    9efe:	30 93 75 2c 	sts	0x2C75, r19
    9f02:	20 91 00 20 	lds	r18, 0x2000
    9f06:	30 91 01 20 	lds	r19, 0x2001
    9f0a:	21 15       	cp	r18, r1
    9f0c:	31 05       	cpc	r19, r1
    9f0e:	41 f4       	brne	.+16     	; 0x9f20 <malloc+0xee>
    9f10:	2d b7       	in	r18, 0x3d	; 61
    9f12:	3e b7       	in	r19, 0x3e	; 62
    9f14:	40 91 04 20 	lds	r20, 0x2004
    9f18:	50 91 05 20 	lds	r21, 0x2005
    9f1c:	24 1b       	sub	r18, r20
    9f1e:	35 0b       	sbc	r19, r21
    9f20:	e0 91 74 2c 	lds	r30, 0x2C74
    9f24:	f0 91 75 2c 	lds	r31, 0x2C75
    9f28:	e2 17       	cp	r30, r18
    9f2a:	f3 07       	cpc	r31, r19
    9f2c:	a0 f4       	brcc	.+40     	; 0x9f56 <malloc+0x124>
    9f2e:	2e 1b       	sub	r18, r30
    9f30:	3f 0b       	sbc	r19, r31
    9f32:	28 17       	cp	r18, r24
    9f34:	39 07       	cpc	r19, r25
    9f36:	78 f0       	brcs	.+30     	; 0x9f56 <malloc+0x124>
    9f38:	ac 01       	movw	r20, r24
    9f3a:	4e 5f       	subi	r20, 0xFE	; 254
    9f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    9f3e:	24 17       	cp	r18, r20
    9f40:	35 07       	cpc	r19, r21
    9f42:	48 f0       	brcs	.+18     	; 0x9f56 <malloc+0x124>
    9f44:	4e 0f       	add	r20, r30
    9f46:	5f 1f       	adc	r21, r31
    9f48:	40 93 74 2c 	sts	0x2C74, r20
    9f4c:	50 93 75 2c 	sts	0x2C75, r21
    9f50:	81 93       	st	Z+, r24
    9f52:	91 93       	st	Z+, r25
    9f54:	02 c0       	rjmp	.+4      	; 0x9f5a <malloc+0x128>
    9f56:	e0 e0       	ldi	r30, 0x00	; 0
    9f58:	f0 e0       	ldi	r31, 0x00	; 0
    9f5a:	cf 01       	movw	r24, r30
    9f5c:	df 91       	pop	r29
    9f5e:	cf 91       	pop	r28
    9f60:	08 95       	ret

00009f62 <free>:
    9f62:	cf 93       	push	r28
    9f64:	df 93       	push	r29
    9f66:	00 97       	sbiw	r24, 0x00	; 0
    9f68:	09 f4       	brne	.+2      	; 0x9f6c <free+0xa>
    9f6a:	87 c0       	rjmp	.+270    	; 0xa07a <free+0x118>
    9f6c:	fc 01       	movw	r30, r24
    9f6e:	32 97       	sbiw	r30, 0x02	; 2
    9f70:	12 82       	std	Z+2, r1	; 0x02
    9f72:	13 82       	std	Z+3, r1	; 0x03
    9f74:	c0 91 76 2c 	lds	r28, 0x2C76
    9f78:	d0 91 77 2c 	lds	r29, 0x2C77
    9f7c:	20 97       	sbiw	r28, 0x00	; 0
    9f7e:	81 f4       	brne	.+32     	; 0x9fa0 <free+0x3e>
    9f80:	20 81       	ld	r18, Z
    9f82:	31 81       	ldd	r19, Z+1	; 0x01
    9f84:	28 0f       	add	r18, r24
    9f86:	39 1f       	adc	r19, r25
    9f88:	80 91 74 2c 	lds	r24, 0x2C74
    9f8c:	90 91 75 2c 	lds	r25, 0x2C75
    9f90:	82 17       	cp	r24, r18
    9f92:	93 07       	cpc	r25, r19
    9f94:	79 f5       	brne	.+94     	; 0x9ff4 <free+0x92>
    9f96:	e0 93 74 2c 	sts	0x2C74, r30
    9f9a:	f0 93 75 2c 	sts	0x2C75, r31
    9f9e:	6d c0       	rjmp	.+218    	; 0xa07a <free+0x118>
    9fa0:	de 01       	movw	r26, r28
    9fa2:	20 e0       	ldi	r18, 0x00	; 0
    9fa4:	30 e0       	ldi	r19, 0x00	; 0
    9fa6:	ae 17       	cp	r26, r30
    9fa8:	bf 07       	cpc	r27, r31
    9faa:	50 f4       	brcc	.+20     	; 0x9fc0 <free+0x5e>
    9fac:	12 96       	adiw	r26, 0x02	; 2
    9fae:	4d 91       	ld	r20, X+
    9fb0:	5c 91       	ld	r21, X
    9fb2:	13 97       	sbiw	r26, 0x03	; 3
    9fb4:	9d 01       	movw	r18, r26
    9fb6:	41 15       	cp	r20, r1
    9fb8:	51 05       	cpc	r21, r1
    9fba:	09 f1       	breq	.+66     	; 0x9ffe <free+0x9c>
    9fbc:	da 01       	movw	r26, r20
    9fbe:	f3 cf       	rjmp	.-26     	; 0x9fa6 <free+0x44>
    9fc0:	a2 83       	std	Z+2, r26	; 0x02
    9fc2:	b3 83       	std	Z+3, r27	; 0x03
    9fc4:	40 81       	ld	r20, Z
    9fc6:	51 81       	ldd	r21, Z+1	; 0x01
    9fc8:	84 0f       	add	r24, r20
    9fca:	95 1f       	adc	r25, r21
    9fcc:	8a 17       	cp	r24, r26
    9fce:	9b 07       	cpc	r25, r27
    9fd0:	71 f4       	brne	.+28     	; 0x9fee <free+0x8c>
    9fd2:	8d 91       	ld	r24, X+
    9fd4:	9c 91       	ld	r25, X
    9fd6:	11 97       	sbiw	r26, 0x01	; 1
    9fd8:	84 0f       	add	r24, r20
    9fda:	95 1f       	adc	r25, r21
    9fdc:	02 96       	adiw	r24, 0x02	; 2
    9fde:	80 83       	st	Z, r24
    9fe0:	91 83       	std	Z+1, r25	; 0x01
    9fe2:	12 96       	adiw	r26, 0x02	; 2
    9fe4:	8d 91       	ld	r24, X+
    9fe6:	9c 91       	ld	r25, X
    9fe8:	13 97       	sbiw	r26, 0x03	; 3
    9fea:	82 83       	std	Z+2, r24	; 0x02
    9fec:	93 83       	std	Z+3, r25	; 0x03
    9fee:	21 15       	cp	r18, r1
    9ff0:	31 05       	cpc	r19, r1
    9ff2:	29 f4       	brne	.+10     	; 0x9ffe <free+0x9c>
    9ff4:	e0 93 76 2c 	sts	0x2C76, r30
    9ff8:	f0 93 77 2c 	sts	0x2C77, r31
    9ffc:	3e c0       	rjmp	.+124    	; 0xa07a <free+0x118>
    9ffe:	d9 01       	movw	r26, r18
    a000:	12 96       	adiw	r26, 0x02	; 2
    a002:	ed 93       	st	X+, r30
    a004:	fc 93       	st	X, r31
    a006:	13 97       	sbiw	r26, 0x03	; 3
    a008:	4d 91       	ld	r20, X+
    a00a:	5d 91       	ld	r21, X+
    a00c:	a4 0f       	add	r26, r20
    a00e:	b5 1f       	adc	r27, r21
    a010:	ea 17       	cp	r30, r26
    a012:	fb 07       	cpc	r31, r27
    a014:	79 f4       	brne	.+30     	; 0xa034 <free+0xd2>
    a016:	80 81       	ld	r24, Z
    a018:	91 81       	ldd	r25, Z+1	; 0x01
    a01a:	84 0f       	add	r24, r20
    a01c:	95 1f       	adc	r25, r21
    a01e:	02 96       	adiw	r24, 0x02	; 2
    a020:	d9 01       	movw	r26, r18
    a022:	8d 93       	st	X+, r24
    a024:	9c 93       	st	X, r25
    a026:	11 97       	sbiw	r26, 0x01	; 1
    a028:	82 81       	ldd	r24, Z+2	; 0x02
    a02a:	93 81       	ldd	r25, Z+3	; 0x03
    a02c:	12 96       	adiw	r26, 0x02	; 2
    a02e:	8d 93       	st	X+, r24
    a030:	9c 93       	st	X, r25
    a032:	13 97       	sbiw	r26, 0x03	; 3
    a034:	e0 e0       	ldi	r30, 0x00	; 0
    a036:	f0 e0       	ldi	r31, 0x00	; 0
    a038:	8a 81       	ldd	r24, Y+2	; 0x02
    a03a:	9b 81       	ldd	r25, Y+3	; 0x03
    a03c:	00 97       	sbiw	r24, 0x00	; 0
    a03e:	19 f0       	breq	.+6      	; 0xa046 <free+0xe4>
    a040:	fe 01       	movw	r30, r28
    a042:	ec 01       	movw	r28, r24
    a044:	f9 cf       	rjmp	.-14     	; 0xa038 <free+0xd6>
    a046:	ce 01       	movw	r24, r28
    a048:	02 96       	adiw	r24, 0x02	; 2
    a04a:	28 81       	ld	r18, Y
    a04c:	39 81       	ldd	r19, Y+1	; 0x01
    a04e:	82 0f       	add	r24, r18
    a050:	93 1f       	adc	r25, r19
    a052:	20 91 74 2c 	lds	r18, 0x2C74
    a056:	30 91 75 2c 	lds	r19, 0x2C75
    a05a:	28 17       	cp	r18, r24
    a05c:	39 07       	cpc	r19, r25
    a05e:	69 f4       	brne	.+26     	; 0xa07a <free+0x118>
    a060:	30 97       	sbiw	r30, 0x00	; 0
    a062:	29 f4       	brne	.+10     	; 0xa06e <free+0x10c>
    a064:	10 92 76 2c 	sts	0x2C76, r1
    a068:	10 92 77 2c 	sts	0x2C77, r1
    a06c:	02 c0       	rjmp	.+4      	; 0xa072 <free+0x110>
    a06e:	12 82       	std	Z+2, r1	; 0x02
    a070:	13 82       	std	Z+3, r1	; 0x03
    a072:	c0 93 74 2c 	sts	0x2C74, r28
    a076:	d0 93 75 2c 	sts	0x2C75, r29
    a07a:	df 91       	pop	r29
    a07c:	cf 91       	pop	r28
    a07e:	08 95       	ret

0000a080 <toupper>:
    a080:	91 11       	cpse	r25, r1
    a082:	08 95       	ret
    a084:	81 56       	subi	r24, 0x61	; 97
    a086:	8a 51       	subi	r24, 0x1A	; 26
    a088:	08 f4       	brcc	.+2      	; 0xa08c <toupper+0xc>
    a08a:	80 52       	subi	r24, 0x20	; 32
    a08c:	85 58       	subi	r24, 0x85	; 133
    a08e:	08 95       	ret

0000a090 <memcpy>:
    a090:	fb 01       	movw	r30, r22
    a092:	dc 01       	movw	r26, r24
    a094:	02 c0       	rjmp	.+4      	; 0xa09a <memcpy+0xa>
    a096:	01 90       	ld	r0, Z+
    a098:	0d 92       	st	X+, r0
    a09a:	41 50       	subi	r20, 0x01	; 1
    a09c:	50 40       	sbci	r21, 0x00	; 0
    a09e:	d8 f7       	brcc	.-10     	; 0xa096 <memcpy+0x6>
    a0a0:	08 95       	ret

0000a0a2 <memset>:
    a0a2:	dc 01       	movw	r26, r24
    a0a4:	01 c0       	rjmp	.+2      	; 0xa0a8 <memset+0x6>
    a0a6:	6d 93       	st	X+, r22
    a0a8:	41 50       	subi	r20, 0x01	; 1
    a0aa:	50 40       	sbci	r21, 0x00	; 0
    a0ac:	e0 f7       	brcc	.-8      	; 0xa0a6 <memset+0x4>
    a0ae:	08 95       	ret

0000a0b0 <strcat>:
    a0b0:	fb 01       	movw	r30, r22
    a0b2:	dc 01       	movw	r26, r24
    a0b4:	0d 90       	ld	r0, X+
    a0b6:	00 20       	and	r0, r0
    a0b8:	e9 f7       	brne	.-6      	; 0xa0b4 <strcat+0x4>
    a0ba:	11 97       	sbiw	r26, 0x01	; 1
    a0bc:	01 90       	ld	r0, Z+
    a0be:	0d 92       	st	X+, r0
    a0c0:	00 20       	and	r0, r0
    a0c2:	e1 f7       	brne	.-8      	; 0xa0bc <strcat+0xc>
    a0c4:	08 95       	ret

0000a0c6 <strchr>:
    a0c6:	fc 01       	movw	r30, r24
    a0c8:	81 91       	ld	r24, Z+
    a0ca:	86 17       	cp	r24, r22
    a0cc:	21 f0       	breq	.+8      	; 0xa0d6 <strchr+0x10>
    a0ce:	88 23       	and	r24, r24
    a0d0:	d9 f7       	brne	.-10     	; 0xa0c8 <strchr+0x2>
    a0d2:	99 27       	eor	r25, r25
    a0d4:	08 95       	ret
    a0d6:	31 97       	sbiw	r30, 0x01	; 1
    a0d8:	cf 01       	movw	r24, r30
    a0da:	08 95       	ret

0000a0dc <strcpy>:
    a0dc:	fb 01       	movw	r30, r22
    a0de:	dc 01       	movw	r26, r24
    a0e0:	01 90       	ld	r0, Z+
    a0e2:	0d 92       	st	X+, r0
    a0e4:	00 20       	and	r0, r0
    a0e6:	e1 f7       	brne	.-8      	; 0xa0e0 <strcpy+0x4>
    a0e8:	08 95       	ret

0000a0ea <strncpy>:
    a0ea:	fb 01       	movw	r30, r22
    a0ec:	dc 01       	movw	r26, r24
    a0ee:	41 50       	subi	r20, 0x01	; 1
    a0f0:	50 40       	sbci	r21, 0x00	; 0
    a0f2:	48 f0       	brcs	.+18     	; 0xa106 <strncpy+0x1c>
    a0f4:	01 90       	ld	r0, Z+
    a0f6:	0d 92       	st	X+, r0
    a0f8:	00 20       	and	r0, r0
    a0fa:	c9 f7       	brne	.-14     	; 0xa0ee <strncpy+0x4>
    a0fc:	01 c0       	rjmp	.+2      	; 0xa100 <strncpy+0x16>
    a0fe:	1d 92       	st	X+, r1
    a100:	41 50       	subi	r20, 0x01	; 1
    a102:	50 40       	sbci	r21, 0x00	; 0
    a104:	e0 f7       	brcc	.-8      	; 0xa0fe <strncpy+0x14>
    a106:	08 95       	ret

0000a108 <strrchr>:
    a108:	fc 01       	movw	r30, r24
    a10a:	81 e0       	ldi	r24, 0x01	; 1
    a10c:	90 e0       	ldi	r25, 0x00	; 0
    a10e:	01 90       	ld	r0, Z+
    a110:	06 16       	cp	r0, r22
    a112:	09 f4       	brne	.+2      	; 0xa116 <strrchr+0xe>
    a114:	cf 01       	movw	r24, r30
    a116:	00 20       	and	r0, r0
    a118:	d1 f7       	brne	.-12     	; 0xa10e <strrchr+0x6>
    a11a:	01 97       	sbiw	r24, 0x01	; 1
    a11c:	08 95       	ret

0000a11e <strstr>:
    a11e:	fb 01       	movw	r30, r22
    a120:	51 91       	ld	r21, Z+
    a122:	55 23       	and	r21, r21
    a124:	a9 f0       	breq	.+42     	; 0xa150 <strstr+0x32>
    a126:	bf 01       	movw	r22, r30
    a128:	dc 01       	movw	r26, r24
    a12a:	4d 91       	ld	r20, X+
    a12c:	45 17       	cp	r20, r21
    a12e:	41 11       	cpse	r20, r1
    a130:	e1 f7       	brne	.-8      	; 0xa12a <strstr+0xc>
    a132:	59 f4       	brne	.+22     	; 0xa14a <strstr+0x2c>
    a134:	cd 01       	movw	r24, r26
    a136:	01 90       	ld	r0, Z+
    a138:	00 20       	and	r0, r0
    a13a:	49 f0       	breq	.+18     	; 0xa14e <strstr+0x30>
    a13c:	4d 91       	ld	r20, X+
    a13e:	40 15       	cp	r20, r0
    a140:	41 11       	cpse	r20, r1
    a142:	c9 f3       	breq	.-14     	; 0xa136 <strstr+0x18>
    a144:	fb 01       	movw	r30, r22
    a146:	41 11       	cpse	r20, r1
    a148:	ef cf       	rjmp	.-34     	; 0xa128 <strstr+0xa>
    a14a:	81 e0       	ldi	r24, 0x01	; 1
    a14c:	90 e0       	ldi	r25, 0x00	; 0
    a14e:	01 97       	sbiw	r24, 0x01	; 1
    a150:	08 95       	ret

0000a152 <printf>:
    a152:	cf 93       	push	r28
    a154:	df 93       	push	r29
    a156:	cd b7       	in	r28, 0x3d	; 61
    a158:	de b7       	in	r29, 0x3e	; 62
    a15a:	fe 01       	movw	r30, r28
    a15c:	35 96       	adiw	r30, 0x05	; 5
    a15e:	61 91       	ld	r22, Z+
    a160:	71 91       	ld	r23, Z+
    a162:	af 01       	movw	r20, r30
    a164:	80 91 7a 2c 	lds	r24, 0x2C7A
    a168:	90 91 7b 2c 	lds	r25, 0x2C7B
    a16c:	4b d0       	rcall	.+150    	; 0xa204 <vfprintf>
    a16e:	df 91       	pop	r29
    a170:	cf 91       	pop	r28
    a172:	08 95       	ret

0000a174 <puts>:
    a174:	0f 93       	push	r16
    a176:	1f 93       	push	r17
    a178:	cf 93       	push	r28
    a17a:	df 93       	push	r29
    a17c:	e0 91 7a 2c 	lds	r30, 0x2C7A
    a180:	f0 91 7b 2c 	lds	r31, 0x2C7B
    a184:	23 81       	ldd	r18, Z+3	; 0x03
    a186:	21 ff       	sbrs	r18, 1
    a188:	1b c0       	rjmp	.+54     	; 0xa1c0 <puts+0x4c>
    a18a:	ec 01       	movw	r28, r24
    a18c:	00 e0       	ldi	r16, 0x00	; 0
    a18e:	10 e0       	ldi	r17, 0x00	; 0
    a190:	89 91       	ld	r24, Y+
    a192:	60 91 7a 2c 	lds	r22, 0x2C7A
    a196:	70 91 7b 2c 	lds	r23, 0x2C7B
    a19a:	db 01       	movw	r26, r22
    a19c:	18 96       	adiw	r26, 0x08	; 8
    a19e:	ed 91       	ld	r30, X+
    a1a0:	fc 91       	ld	r31, X
    a1a2:	19 97       	sbiw	r26, 0x09	; 9
    a1a4:	88 23       	and	r24, r24
    a1a6:	31 f0       	breq	.+12     	; 0xa1b4 <puts+0x40>
    a1a8:	09 95       	icall
    a1aa:	89 2b       	or	r24, r25
    a1ac:	89 f3       	breq	.-30     	; 0xa190 <puts+0x1c>
    a1ae:	0f ef       	ldi	r16, 0xFF	; 255
    a1b0:	1f ef       	ldi	r17, 0xFF	; 255
    a1b2:	ee cf       	rjmp	.-36     	; 0xa190 <puts+0x1c>
    a1b4:	8a e0       	ldi	r24, 0x0A	; 10
    a1b6:	09 95       	icall
    a1b8:	89 2b       	or	r24, r25
    a1ba:	11 f4       	brne	.+4      	; 0xa1c0 <puts+0x4c>
    a1bc:	c8 01       	movw	r24, r16
    a1be:	02 c0       	rjmp	.+4      	; 0xa1c4 <puts+0x50>
    a1c0:	8f ef       	ldi	r24, 0xFF	; 255
    a1c2:	9f ef       	ldi	r25, 0xFF	; 255
    a1c4:	df 91       	pop	r29
    a1c6:	cf 91       	pop	r28
    a1c8:	1f 91       	pop	r17
    a1ca:	0f 91       	pop	r16
    a1cc:	08 95       	ret

0000a1ce <sscanf>:
    a1ce:	cf 93       	push	r28
    a1d0:	df 93       	push	r29
    a1d2:	cd b7       	in	r28, 0x3d	; 61
    a1d4:	de b7       	in	r29, 0x3e	; 62
    a1d6:	2e 97       	sbiw	r28, 0x0e	; 14
    a1d8:	cd bf       	out	0x3d, r28	; 61
    a1da:	de bf       	out	0x3e, r29	; 62
    a1dc:	85 e0       	ldi	r24, 0x05	; 5
    a1de:	8c 83       	std	Y+4, r24	; 0x04
    a1e0:	8b 89       	ldd	r24, Y+19	; 0x13
    a1e2:	9c 89       	ldd	r25, Y+20	; 0x14
    a1e4:	89 83       	std	Y+1, r24	; 0x01
    a1e6:	9a 83       	std	Y+2, r25	; 0x02
    a1e8:	ae 01       	movw	r20, r28
    a1ea:	49 5e       	subi	r20, 0xE9	; 233
    a1ec:	5f 4f       	sbci	r21, 0xFF	; 255
    a1ee:	6d 89       	ldd	r22, Y+21	; 0x15
    a1f0:	7e 89       	ldd	r23, Y+22	; 0x16
    a1f2:	ce 01       	movw	r24, r28
    a1f4:	01 96       	adiw	r24, 0x01	; 1
    a1f6:	78 d3       	rcall	.+1776   	; 0xa8e8 <vfscanf>
    a1f8:	2e 96       	adiw	r28, 0x0e	; 14
    a1fa:	cd bf       	out	0x3d, r28	; 61
    a1fc:	de bf       	out	0x3e, r29	; 62
    a1fe:	df 91       	pop	r29
    a200:	cf 91       	pop	r28
    a202:	08 95       	ret

0000a204 <vfprintf>:
    a204:	2f 92       	push	r2
    a206:	3f 92       	push	r3
    a208:	4f 92       	push	r4
    a20a:	5f 92       	push	r5
    a20c:	6f 92       	push	r6
    a20e:	7f 92       	push	r7
    a210:	8f 92       	push	r8
    a212:	9f 92       	push	r9
    a214:	af 92       	push	r10
    a216:	bf 92       	push	r11
    a218:	cf 92       	push	r12
    a21a:	df 92       	push	r13
    a21c:	ef 92       	push	r14
    a21e:	ff 92       	push	r15
    a220:	0f 93       	push	r16
    a222:	1f 93       	push	r17
    a224:	cf 93       	push	r28
    a226:	df 93       	push	r29
    a228:	cd b7       	in	r28, 0x3d	; 61
    a22a:	de b7       	in	r29, 0x3e	; 62
    a22c:	2c 97       	sbiw	r28, 0x0c	; 12
    a22e:	cd bf       	out	0x3d, r28	; 61
    a230:	de bf       	out	0x3e, r29	; 62
    a232:	7c 01       	movw	r14, r24
    a234:	6b 01       	movw	r12, r22
    a236:	8a 01       	movw	r16, r20
    a238:	fc 01       	movw	r30, r24
    a23a:	16 82       	std	Z+6, r1	; 0x06
    a23c:	17 82       	std	Z+7, r1	; 0x07
    a23e:	83 81       	ldd	r24, Z+3	; 0x03
    a240:	81 ff       	sbrs	r24, 1
    a242:	b0 c1       	rjmp	.+864    	; 0xa5a4 <vfprintf+0x3a0>
    a244:	ce 01       	movw	r24, r28
    a246:	01 96       	adiw	r24, 0x01	; 1
    a248:	4c 01       	movw	r8, r24
    a24a:	f7 01       	movw	r30, r14
    a24c:	93 81       	ldd	r25, Z+3	; 0x03
    a24e:	f6 01       	movw	r30, r12
    a250:	93 fd       	sbrc	r25, 3
    a252:	85 91       	lpm	r24, Z+
    a254:	93 ff       	sbrs	r25, 3
    a256:	81 91       	ld	r24, Z+
    a258:	6f 01       	movw	r12, r30
    a25a:	88 23       	and	r24, r24
    a25c:	09 f4       	brne	.+2      	; 0xa260 <vfprintf+0x5c>
    a25e:	9e c1       	rjmp	.+828    	; 0xa59c <vfprintf+0x398>
    a260:	85 32       	cpi	r24, 0x25	; 37
    a262:	39 f4       	brne	.+14     	; 0xa272 <vfprintf+0x6e>
    a264:	93 fd       	sbrc	r25, 3
    a266:	85 91       	lpm	r24, Z+
    a268:	93 ff       	sbrs	r25, 3
    a26a:	81 91       	ld	r24, Z+
    a26c:	6f 01       	movw	r12, r30
    a26e:	85 32       	cpi	r24, 0x25	; 37
    a270:	21 f4       	brne	.+8      	; 0xa27a <vfprintf+0x76>
    a272:	b7 01       	movw	r22, r14
    a274:	90 e0       	ldi	r25, 0x00	; 0
    a276:	c8 d4       	rcall	.+2448   	; 0xac08 <fputc>
    a278:	e8 cf       	rjmp	.-48     	; 0xa24a <vfprintf+0x46>
    a27a:	51 2c       	mov	r5, r1
    a27c:	31 2c       	mov	r3, r1
    a27e:	20 e0       	ldi	r18, 0x00	; 0
    a280:	20 32       	cpi	r18, 0x20	; 32
    a282:	a0 f4       	brcc	.+40     	; 0xa2ac <vfprintf+0xa8>
    a284:	8b 32       	cpi	r24, 0x2B	; 43
    a286:	69 f0       	breq	.+26     	; 0xa2a2 <vfprintf+0x9e>
    a288:	30 f4       	brcc	.+12     	; 0xa296 <vfprintf+0x92>
    a28a:	80 32       	cpi	r24, 0x20	; 32
    a28c:	59 f0       	breq	.+22     	; 0xa2a4 <vfprintf+0xa0>
    a28e:	83 32       	cpi	r24, 0x23	; 35
    a290:	69 f4       	brne	.+26     	; 0xa2ac <vfprintf+0xa8>
    a292:	20 61       	ori	r18, 0x10	; 16
    a294:	2c c0       	rjmp	.+88     	; 0xa2ee <vfprintf+0xea>
    a296:	8d 32       	cpi	r24, 0x2D	; 45
    a298:	39 f0       	breq	.+14     	; 0xa2a8 <vfprintf+0xa4>
    a29a:	80 33       	cpi	r24, 0x30	; 48
    a29c:	39 f4       	brne	.+14     	; 0xa2ac <vfprintf+0xa8>
    a29e:	21 60       	ori	r18, 0x01	; 1
    a2a0:	26 c0       	rjmp	.+76     	; 0xa2ee <vfprintf+0xea>
    a2a2:	22 60       	ori	r18, 0x02	; 2
    a2a4:	24 60       	ori	r18, 0x04	; 4
    a2a6:	23 c0       	rjmp	.+70     	; 0xa2ee <vfprintf+0xea>
    a2a8:	28 60       	ori	r18, 0x08	; 8
    a2aa:	21 c0       	rjmp	.+66     	; 0xa2ee <vfprintf+0xea>
    a2ac:	27 fd       	sbrc	r18, 7
    a2ae:	27 c0       	rjmp	.+78     	; 0xa2fe <vfprintf+0xfa>
    a2b0:	30 ed       	ldi	r19, 0xD0	; 208
    a2b2:	38 0f       	add	r19, r24
    a2b4:	3a 30       	cpi	r19, 0x0A	; 10
    a2b6:	78 f4       	brcc	.+30     	; 0xa2d6 <vfprintf+0xd2>
    a2b8:	26 ff       	sbrs	r18, 6
    a2ba:	06 c0       	rjmp	.+12     	; 0xa2c8 <vfprintf+0xc4>
    a2bc:	fa e0       	ldi	r31, 0x0A	; 10
    a2be:	5f 9e       	mul	r5, r31
    a2c0:	30 0d       	add	r19, r0
    a2c2:	11 24       	eor	r1, r1
    a2c4:	53 2e       	mov	r5, r19
    a2c6:	13 c0       	rjmp	.+38     	; 0xa2ee <vfprintf+0xea>
    a2c8:	8a e0       	ldi	r24, 0x0A	; 10
    a2ca:	38 9e       	mul	r3, r24
    a2cc:	30 0d       	add	r19, r0
    a2ce:	11 24       	eor	r1, r1
    a2d0:	33 2e       	mov	r3, r19
    a2d2:	20 62       	ori	r18, 0x20	; 32
    a2d4:	0c c0       	rjmp	.+24     	; 0xa2ee <vfprintf+0xea>
    a2d6:	8e 32       	cpi	r24, 0x2E	; 46
    a2d8:	21 f4       	brne	.+8      	; 0xa2e2 <vfprintf+0xde>
    a2da:	26 fd       	sbrc	r18, 6
    a2dc:	5f c1       	rjmp	.+702    	; 0xa59c <vfprintf+0x398>
    a2de:	20 64       	ori	r18, 0x40	; 64
    a2e0:	06 c0       	rjmp	.+12     	; 0xa2ee <vfprintf+0xea>
    a2e2:	8c 36       	cpi	r24, 0x6C	; 108
    a2e4:	11 f4       	brne	.+4      	; 0xa2ea <vfprintf+0xe6>
    a2e6:	20 68       	ori	r18, 0x80	; 128
    a2e8:	02 c0       	rjmp	.+4      	; 0xa2ee <vfprintf+0xea>
    a2ea:	88 36       	cpi	r24, 0x68	; 104
    a2ec:	41 f4       	brne	.+16     	; 0xa2fe <vfprintf+0xfa>
    a2ee:	f6 01       	movw	r30, r12
    a2f0:	93 fd       	sbrc	r25, 3
    a2f2:	85 91       	lpm	r24, Z+
    a2f4:	93 ff       	sbrs	r25, 3
    a2f6:	81 91       	ld	r24, Z+
    a2f8:	6f 01       	movw	r12, r30
    a2fa:	81 11       	cpse	r24, r1
    a2fc:	c1 cf       	rjmp	.-126    	; 0xa280 <vfprintf+0x7c>
    a2fe:	98 2f       	mov	r25, r24
    a300:	9f 7d       	andi	r25, 0xDF	; 223
    a302:	95 54       	subi	r25, 0x45	; 69
    a304:	93 30       	cpi	r25, 0x03	; 3
    a306:	28 f4       	brcc	.+10     	; 0xa312 <vfprintf+0x10e>
    a308:	0c 5f       	subi	r16, 0xFC	; 252
    a30a:	1f 4f       	sbci	r17, 0xFF	; 255
    a30c:	ff e3       	ldi	r31, 0x3F	; 63
    a30e:	f9 83       	std	Y+1, r31	; 0x01
    a310:	0d c0       	rjmp	.+26     	; 0xa32c <vfprintf+0x128>
    a312:	83 36       	cpi	r24, 0x63	; 99
    a314:	31 f0       	breq	.+12     	; 0xa322 <vfprintf+0x11e>
    a316:	83 37       	cpi	r24, 0x73	; 115
    a318:	71 f0       	breq	.+28     	; 0xa336 <vfprintf+0x132>
    a31a:	83 35       	cpi	r24, 0x53	; 83
    a31c:	09 f0       	breq	.+2      	; 0xa320 <vfprintf+0x11c>
    a31e:	57 c0       	rjmp	.+174    	; 0xa3ce <vfprintf+0x1ca>
    a320:	21 c0       	rjmp	.+66     	; 0xa364 <vfprintf+0x160>
    a322:	f8 01       	movw	r30, r16
    a324:	80 81       	ld	r24, Z
    a326:	89 83       	std	Y+1, r24	; 0x01
    a328:	0e 5f       	subi	r16, 0xFE	; 254
    a32a:	1f 4f       	sbci	r17, 0xFF	; 255
    a32c:	44 24       	eor	r4, r4
    a32e:	43 94       	inc	r4
    a330:	51 2c       	mov	r5, r1
    a332:	54 01       	movw	r10, r8
    a334:	14 c0       	rjmp	.+40     	; 0xa35e <vfprintf+0x15a>
    a336:	38 01       	movw	r6, r16
    a338:	f2 e0       	ldi	r31, 0x02	; 2
    a33a:	6f 0e       	add	r6, r31
    a33c:	71 1c       	adc	r7, r1
    a33e:	f8 01       	movw	r30, r16
    a340:	a0 80       	ld	r10, Z
    a342:	b1 80       	ldd	r11, Z+1	; 0x01
    a344:	26 ff       	sbrs	r18, 6
    a346:	03 c0       	rjmp	.+6      	; 0xa34e <vfprintf+0x14a>
    a348:	65 2d       	mov	r22, r5
    a34a:	70 e0       	ldi	r23, 0x00	; 0
    a34c:	02 c0       	rjmp	.+4      	; 0xa352 <vfprintf+0x14e>
    a34e:	6f ef       	ldi	r22, 0xFF	; 255
    a350:	7f ef       	ldi	r23, 0xFF	; 255
    a352:	c5 01       	movw	r24, r10
    a354:	2c 87       	std	Y+12, r18	; 0x0c
    a356:	0f d4       	rcall	.+2078   	; 0xab76 <strnlen>
    a358:	2c 01       	movw	r4, r24
    a35a:	83 01       	movw	r16, r6
    a35c:	2c 85       	ldd	r18, Y+12	; 0x0c
    a35e:	2f 77       	andi	r18, 0x7F	; 127
    a360:	22 2e       	mov	r2, r18
    a362:	16 c0       	rjmp	.+44     	; 0xa390 <vfprintf+0x18c>
    a364:	38 01       	movw	r6, r16
    a366:	f2 e0       	ldi	r31, 0x02	; 2
    a368:	6f 0e       	add	r6, r31
    a36a:	71 1c       	adc	r7, r1
    a36c:	f8 01       	movw	r30, r16
    a36e:	a0 80       	ld	r10, Z
    a370:	b1 80       	ldd	r11, Z+1	; 0x01
    a372:	26 ff       	sbrs	r18, 6
    a374:	03 c0       	rjmp	.+6      	; 0xa37c <vfprintf+0x178>
    a376:	65 2d       	mov	r22, r5
    a378:	70 e0       	ldi	r23, 0x00	; 0
    a37a:	02 c0       	rjmp	.+4      	; 0xa380 <vfprintf+0x17c>
    a37c:	6f ef       	ldi	r22, 0xFF	; 255
    a37e:	7f ef       	ldi	r23, 0xFF	; 255
    a380:	c5 01       	movw	r24, r10
    a382:	2c 87       	std	Y+12, r18	; 0x0c
    a384:	ed d3       	rcall	.+2010   	; 0xab60 <strnlen_P>
    a386:	2c 01       	movw	r4, r24
    a388:	2c 85       	ldd	r18, Y+12	; 0x0c
    a38a:	20 68       	ori	r18, 0x80	; 128
    a38c:	22 2e       	mov	r2, r18
    a38e:	83 01       	movw	r16, r6
    a390:	23 fc       	sbrc	r2, 3
    a392:	19 c0       	rjmp	.+50     	; 0xa3c6 <vfprintf+0x1c2>
    a394:	83 2d       	mov	r24, r3
    a396:	90 e0       	ldi	r25, 0x00	; 0
    a398:	48 16       	cp	r4, r24
    a39a:	59 06       	cpc	r5, r25
    a39c:	a0 f4       	brcc	.+40     	; 0xa3c6 <vfprintf+0x1c2>
    a39e:	b7 01       	movw	r22, r14
    a3a0:	80 e2       	ldi	r24, 0x20	; 32
    a3a2:	90 e0       	ldi	r25, 0x00	; 0
    a3a4:	31 d4       	rcall	.+2146   	; 0xac08 <fputc>
    a3a6:	3a 94       	dec	r3
    a3a8:	f5 cf       	rjmp	.-22     	; 0xa394 <vfprintf+0x190>
    a3aa:	f5 01       	movw	r30, r10
    a3ac:	27 fc       	sbrc	r2, 7
    a3ae:	85 91       	lpm	r24, Z+
    a3b0:	27 fe       	sbrs	r2, 7
    a3b2:	81 91       	ld	r24, Z+
    a3b4:	5f 01       	movw	r10, r30
    a3b6:	b7 01       	movw	r22, r14
    a3b8:	90 e0       	ldi	r25, 0x00	; 0
    a3ba:	26 d4       	rcall	.+2124   	; 0xac08 <fputc>
    a3bc:	31 10       	cpse	r3, r1
    a3be:	3a 94       	dec	r3
    a3c0:	f1 e0       	ldi	r31, 0x01	; 1
    a3c2:	4f 1a       	sub	r4, r31
    a3c4:	51 08       	sbc	r5, r1
    a3c6:	41 14       	cp	r4, r1
    a3c8:	51 04       	cpc	r5, r1
    a3ca:	79 f7       	brne	.-34     	; 0xa3aa <vfprintf+0x1a6>
    a3cc:	de c0       	rjmp	.+444    	; 0xa58a <vfprintf+0x386>
    a3ce:	84 36       	cpi	r24, 0x64	; 100
    a3d0:	11 f0       	breq	.+4      	; 0xa3d6 <vfprintf+0x1d2>
    a3d2:	89 36       	cpi	r24, 0x69	; 105
    a3d4:	31 f5       	brne	.+76     	; 0xa422 <vfprintf+0x21e>
    a3d6:	f8 01       	movw	r30, r16
    a3d8:	27 ff       	sbrs	r18, 7
    a3da:	07 c0       	rjmp	.+14     	; 0xa3ea <vfprintf+0x1e6>
    a3dc:	60 81       	ld	r22, Z
    a3de:	71 81       	ldd	r23, Z+1	; 0x01
    a3e0:	82 81       	ldd	r24, Z+2	; 0x02
    a3e2:	93 81       	ldd	r25, Z+3	; 0x03
    a3e4:	0c 5f       	subi	r16, 0xFC	; 252
    a3e6:	1f 4f       	sbci	r17, 0xFF	; 255
    a3e8:	08 c0       	rjmp	.+16     	; 0xa3fa <vfprintf+0x1f6>
    a3ea:	60 81       	ld	r22, Z
    a3ec:	71 81       	ldd	r23, Z+1	; 0x01
    a3ee:	88 27       	eor	r24, r24
    a3f0:	77 fd       	sbrc	r23, 7
    a3f2:	80 95       	com	r24
    a3f4:	98 2f       	mov	r25, r24
    a3f6:	0e 5f       	subi	r16, 0xFE	; 254
    a3f8:	1f 4f       	sbci	r17, 0xFF	; 255
    a3fa:	2f 76       	andi	r18, 0x6F	; 111
    a3fc:	b2 2e       	mov	r11, r18
    a3fe:	97 ff       	sbrs	r25, 7
    a400:	09 c0       	rjmp	.+18     	; 0xa414 <vfprintf+0x210>
    a402:	90 95       	com	r25
    a404:	80 95       	com	r24
    a406:	70 95       	com	r23
    a408:	61 95       	neg	r22
    a40a:	7f 4f       	sbci	r23, 0xFF	; 255
    a40c:	8f 4f       	sbci	r24, 0xFF	; 255
    a40e:	9f 4f       	sbci	r25, 0xFF	; 255
    a410:	20 68       	ori	r18, 0x80	; 128
    a412:	b2 2e       	mov	r11, r18
    a414:	2a e0       	ldi	r18, 0x0A	; 10
    a416:	30 e0       	ldi	r19, 0x00	; 0
    a418:	a4 01       	movw	r20, r8
    a41a:	41 d4       	rcall	.+2178   	; 0xac9e <__ultoa_invert>
    a41c:	a8 2e       	mov	r10, r24
    a41e:	a8 18       	sub	r10, r8
    a420:	43 c0       	rjmp	.+134    	; 0xa4a8 <vfprintf+0x2a4>
    a422:	85 37       	cpi	r24, 0x75	; 117
    a424:	29 f4       	brne	.+10     	; 0xa430 <vfprintf+0x22c>
    a426:	2f 7e       	andi	r18, 0xEF	; 239
    a428:	b2 2e       	mov	r11, r18
    a42a:	2a e0       	ldi	r18, 0x0A	; 10
    a42c:	30 e0       	ldi	r19, 0x00	; 0
    a42e:	25 c0       	rjmp	.+74     	; 0xa47a <vfprintf+0x276>
    a430:	f2 2f       	mov	r31, r18
    a432:	f9 7f       	andi	r31, 0xF9	; 249
    a434:	bf 2e       	mov	r11, r31
    a436:	8f 36       	cpi	r24, 0x6F	; 111
    a438:	c1 f0       	breq	.+48     	; 0xa46a <vfprintf+0x266>
    a43a:	18 f4       	brcc	.+6      	; 0xa442 <vfprintf+0x23e>
    a43c:	88 35       	cpi	r24, 0x58	; 88
    a43e:	79 f0       	breq	.+30     	; 0xa45e <vfprintf+0x25a>
    a440:	ad c0       	rjmp	.+346    	; 0xa59c <vfprintf+0x398>
    a442:	80 37       	cpi	r24, 0x70	; 112
    a444:	19 f0       	breq	.+6      	; 0xa44c <vfprintf+0x248>
    a446:	88 37       	cpi	r24, 0x78	; 120
    a448:	21 f0       	breq	.+8      	; 0xa452 <vfprintf+0x24e>
    a44a:	a8 c0       	rjmp	.+336    	; 0xa59c <vfprintf+0x398>
    a44c:	2f 2f       	mov	r18, r31
    a44e:	20 61       	ori	r18, 0x10	; 16
    a450:	b2 2e       	mov	r11, r18
    a452:	b4 fe       	sbrs	r11, 4
    a454:	0d c0       	rjmp	.+26     	; 0xa470 <vfprintf+0x26c>
    a456:	8b 2d       	mov	r24, r11
    a458:	84 60       	ori	r24, 0x04	; 4
    a45a:	b8 2e       	mov	r11, r24
    a45c:	09 c0       	rjmp	.+18     	; 0xa470 <vfprintf+0x26c>
    a45e:	24 ff       	sbrs	r18, 4
    a460:	0a c0       	rjmp	.+20     	; 0xa476 <vfprintf+0x272>
    a462:	9f 2f       	mov	r25, r31
    a464:	96 60       	ori	r25, 0x06	; 6
    a466:	b9 2e       	mov	r11, r25
    a468:	06 c0       	rjmp	.+12     	; 0xa476 <vfprintf+0x272>
    a46a:	28 e0       	ldi	r18, 0x08	; 8
    a46c:	30 e0       	ldi	r19, 0x00	; 0
    a46e:	05 c0       	rjmp	.+10     	; 0xa47a <vfprintf+0x276>
    a470:	20 e1       	ldi	r18, 0x10	; 16
    a472:	30 e0       	ldi	r19, 0x00	; 0
    a474:	02 c0       	rjmp	.+4      	; 0xa47a <vfprintf+0x276>
    a476:	20 e1       	ldi	r18, 0x10	; 16
    a478:	32 e0       	ldi	r19, 0x02	; 2
    a47a:	f8 01       	movw	r30, r16
    a47c:	b7 fe       	sbrs	r11, 7
    a47e:	07 c0       	rjmp	.+14     	; 0xa48e <vfprintf+0x28a>
    a480:	60 81       	ld	r22, Z
    a482:	71 81       	ldd	r23, Z+1	; 0x01
    a484:	82 81       	ldd	r24, Z+2	; 0x02
    a486:	93 81       	ldd	r25, Z+3	; 0x03
    a488:	0c 5f       	subi	r16, 0xFC	; 252
    a48a:	1f 4f       	sbci	r17, 0xFF	; 255
    a48c:	06 c0       	rjmp	.+12     	; 0xa49a <vfprintf+0x296>
    a48e:	60 81       	ld	r22, Z
    a490:	71 81       	ldd	r23, Z+1	; 0x01
    a492:	80 e0       	ldi	r24, 0x00	; 0
    a494:	90 e0       	ldi	r25, 0x00	; 0
    a496:	0e 5f       	subi	r16, 0xFE	; 254
    a498:	1f 4f       	sbci	r17, 0xFF	; 255
    a49a:	a4 01       	movw	r20, r8
    a49c:	00 d4       	rcall	.+2048   	; 0xac9e <__ultoa_invert>
    a49e:	a8 2e       	mov	r10, r24
    a4a0:	a8 18       	sub	r10, r8
    a4a2:	fb 2d       	mov	r31, r11
    a4a4:	ff 77       	andi	r31, 0x7F	; 127
    a4a6:	bf 2e       	mov	r11, r31
    a4a8:	b6 fe       	sbrs	r11, 6
    a4aa:	0b c0       	rjmp	.+22     	; 0xa4c2 <vfprintf+0x2be>
    a4ac:	2b 2d       	mov	r18, r11
    a4ae:	2e 7f       	andi	r18, 0xFE	; 254
    a4b0:	a5 14       	cp	r10, r5
    a4b2:	50 f4       	brcc	.+20     	; 0xa4c8 <vfprintf+0x2c4>
    a4b4:	b4 fe       	sbrs	r11, 4
    a4b6:	0a c0       	rjmp	.+20     	; 0xa4cc <vfprintf+0x2c8>
    a4b8:	b2 fc       	sbrc	r11, 2
    a4ba:	08 c0       	rjmp	.+16     	; 0xa4cc <vfprintf+0x2c8>
    a4bc:	2b 2d       	mov	r18, r11
    a4be:	2e 7e       	andi	r18, 0xEE	; 238
    a4c0:	05 c0       	rjmp	.+10     	; 0xa4cc <vfprintf+0x2c8>
    a4c2:	7a 2c       	mov	r7, r10
    a4c4:	2b 2d       	mov	r18, r11
    a4c6:	03 c0       	rjmp	.+6      	; 0xa4ce <vfprintf+0x2ca>
    a4c8:	7a 2c       	mov	r7, r10
    a4ca:	01 c0       	rjmp	.+2      	; 0xa4ce <vfprintf+0x2ca>
    a4cc:	75 2c       	mov	r7, r5
    a4ce:	24 ff       	sbrs	r18, 4
    a4d0:	0d c0       	rjmp	.+26     	; 0xa4ec <vfprintf+0x2e8>
    a4d2:	fe 01       	movw	r30, r28
    a4d4:	ea 0d       	add	r30, r10
    a4d6:	f1 1d       	adc	r31, r1
    a4d8:	80 81       	ld	r24, Z
    a4da:	80 33       	cpi	r24, 0x30	; 48
    a4dc:	11 f4       	brne	.+4      	; 0xa4e2 <vfprintf+0x2de>
    a4de:	29 7e       	andi	r18, 0xE9	; 233
    a4e0:	09 c0       	rjmp	.+18     	; 0xa4f4 <vfprintf+0x2f0>
    a4e2:	22 ff       	sbrs	r18, 2
    a4e4:	06 c0       	rjmp	.+12     	; 0xa4f2 <vfprintf+0x2ee>
    a4e6:	73 94       	inc	r7
    a4e8:	73 94       	inc	r7
    a4ea:	04 c0       	rjmp	.+8      	; 0xa4f4 <vfprintf+0x2f0>
    a4ec:	82 2f       	mov	r24, r18
    a4ee:	86 78       	andi	r24, 0x86	; 134
    a4f0:	09 f0       	breq	.+2      	; 0xa4f4 <vfprintf+0x2f0>
    a4f2:	73 94       	inc	r7
    a4f4:	23 fd       	sbrc	r18, 3
    a4f6:	12 c0       	rjmp	.+36     	; 0xa51c <vfprintf+0x318>
    a4f8:	20 ff       	sbrs	r18, 0
    a4fa:	06 c0       	rjmp	.+12     	; 0xa508 <vfprintf+0x304>
    a4fc:	5a 2c       	mov	r5, r10
    a4fe:	73 14       	cp	r7, r3
    a500:	18 f4       	brcc	.+6      	; 0xa508 <vfprintf+0x304>
    a502:	53 0c       	add	r5, r3
    a504:	57 18       	sub	r5, r7
    a506:	73 2c       	mov	r7, r3
    a508:	73 14       	cp	r7, r3
    a50a:	60 f4       	brcc	.+24     	; 0xa524 <vfprintf+0x320>
    a50c:	b7 01       	movw	r22, r14
    a50e:	80 e2       	ldi	r24, 0x20	; 32
    a510:	90 e0       	ldi	r25, 0x00	; 0
    a512:	2c 87       	std	Y+12, r18	; 0x0c
    a514:	79 d3       	rcall	.+1778   	; 0xac08 <fputc>
    a516:	73 94       	inc	r7
    a518:	2c 85       	ldd	r18, Y+12	; 0x0c
    a51a:	f6 cf       	rjmp	.-20     	; 0xa508 <vfprintf+0x304>
    a51c:	73 14       	cp	r7, r3
    a51e:	10 f4       	brcc	.+4      	; 0xa524 <vfprintf+0x320>
    a520:	37 18       	sub	r3, r7
    a522:	01 c0       	rjmp	.+2      	; 0xa526 <vfprintf+0x322>
    a524:	31 2c       	mov	r3, r1
    a526:	24 ff       	sbrs	r18, 4
    a528:	11 c0       	rjmp	.+34     	; 0xa54c <vfprintf+0x348>
    a52a:	b7 01       	movw	r22, r14
    a52c:	80 e3       	ldi	r24, 0x30	; 48
    a52e:	90 e0       	ldi	r25, 0x00	; 0
    a530:	2c 87       	std	Y+12, r18	; 0x0c
    a532:	6a d3       	rcall	.+1748   	; 0xac08 <fputc>
    a534:	2c 85       	ldd	r18, Y+12	; 0x0c
    a536:	22 ff       	sbrs	r18, 2
    a538:	16 c0       	rjmp	.+44     	; 0xa566 <vfprintf+0x362>
    a53a:	21 ff       	sbrs	r18, 1
    a53c:	03 c0       	rjmp	.+6      	; 0xa544 <vfprintf+0x340>
    a53e:	88 e5       	ldi	r24, 0x58	; 88
    a540:	90 e0       	ldi	r25, 0x00	; 0
    a542:	02 c0       	rjmp	.+4      	; 0xa548 <vfprintf+0x344>
    a544:	88 e7       	ldi	r24, 0x78	; 120
    a546:	90 e0       	ldi	r25, 0x00	; 0
    a548:	b7 01       	movw	r22, r14
    a54a:	0c c0       	rjmp	.+24     	; 0xa564 <vfprintf+0x360>
    a54c:	82 2f       	mov	r24, r18
    a54e:	86 78       	andi	r24, 0x86	; 134
    a550:	51 f0       	breq	.+20     	; 0xa566 <vfprintf+0x362>
    a552:	21 fd       	sbrc	r18, 1
    a554:	02 c0       	rjmp	.+4      	; 0xa55a <vfprintf+0x356>
    a556:	80 e2       	ldi	r24, 0x20	; 32
    a558:	01 c0       	rjmp	.+2      	; 0xa55c <vfprintf+0x358>
    a55a:	8b e2       	ldi	r24, 0x2B	; 43
    a55c:	27 fd       	sbrc	r18, 7
    a55e:	8d e2       	ldi	r24, 0x2D	; 45
    a560:	b7 01       	movw	r22, r14
    a562:	90 e0       	ldi	r25, 0x00	; 0
    a564:	51 d3       	rcall	.+1698   	; 0xac08 <fputc>
    a566:	a5 14       	cp	r10, r5
    a568:	30 f4       	brcc	.+12     	; 0xa576 <vfprintf+0x372>
    a56a:	b7 01       	movw	r22, r14
    a56c:	80 e3       	ldi	r24, 0x30	; 48
    a56e:	90 e0       	ldi	r25, 0x00	; 0
    a570:	4b d3       	rcall	.+1686   	; 0xac08 <fputc>
    a572:	5a 94       	dec	r5
    a574:	f8 cf       	rjmp	.-16     	; 0xa566 <vfprintf+0x362>
    a576:	aa 94       	dec	r10
    a578:	f4 01       	movw	r30, r8
    a57a:	ea 0d       	add	r30, r10
    a57c:	f1 1d       	adc	r31, r1
    a57e:	80 81       	ld	r24, Z
    a580:	b7 01       	movw	r22, r14
    a582:	90 e0       	ldi	r25, 0x00	; 0
    a584:	41 d3       	rcall	.+1666   	; 0xac08 <fputc>
    a586:	a1 10       	cpse	r10, r1
    a588:	f6 cf       	rjmp	.-20     	; 0xa576 <vfprintf+0x372>
    a58a:	33 20       	and	r3, r3
    a58c:	09 f4       	brne	.+2      	; 0xa590 <vfprintf+0x38c>
    a58e:	5d ce       	rjmp	.-838    	; 0xa24a <vfprintf+0x46>
    a590:	b7 01       	movw	r22, r14
    a592:	80 e2       	ldi	r24, 0x20	; 32
    a594:	90 e0       	ldi	r25, 0x00	; 0
    a596:	38 d3       	rcall	.+1648   	; 0xac08 <fputc>
    a598:	3a 94       	dec	r3
    a59a:	f7 cf       	rjmp	.-18     	; 0xa58a <vfprintf+0x386>
    a59c:	f7 01       	movw	r30, r14
    a59e:	86 81       	ldd	r24, Z+6	; 0x06
    a5a0:	97 81       	ldd	r25, Z+7	; 0x07
    a5a2:	02 c0       	rjmp	.+4      	; 0xa5a8 <vfprintf+0x3a4>
    a5a4:	8f ef       	ldi	r24, 0xFF	; 255
    a5a6:	9f ef       	ldi	r25, 0xFF	; 255
    a5a8:	2c 96       	adiw	r28, 0x0c	; 12
    a5aa:	cd bf       	out	0x3d, r28	; 61
    a5ac:	de bf       	out	0x3e, r29	; 62
    a5ae:	df 91       	pop	r29
    a5b0:	cf 91       	pop	r28
    a5b2:	1f 91       	pop	r17
    a5b4:	0f 91       	pop	r16
    a5b6:	ff 90       	pop	r15
    a5b8:	ef 90       	pop	r14
    a5ba:	df 90       	pop	r13
    a5bc:	cf 90       	pop	r12
    a5be:	bf 90       	pop	r11
    a5c0:	af 90       	pop	r10
    a5c2:	9f 90       	pop	r9
    a5c4:	8f 90       	pop	r8
    a5c6:	7f 90       	pop	r7
    a5c8:	6f 90       	pop	r6
    a5ca:	5f 90       	pop	r5
    a5cc:	4f 90       	pop	r4
    a5ce:	3f 90       	pop	r3
    a5d0:	2f 90       	pop	r2
    a5d2:	08 95       	ret

0000a5d4 <putval>:
    a5d4:	20 fd       	sbrc	r18, 0
    a5d6:	09 c0       	rjmp	.+18     	; 0xa5ea <putval+0x16>
    a5d8:	fc 01       	movw	r30, r24
    a5da:	23 fd       	sbrc	r18, 3
    a5dc:	05 c0       	rjmp	.+10     	; 0xa5e8 <putval+0x14>
    a5de:	22 ff       	sbrs	r18, 2
    a5e0:	02 c0       	rjmp	.+4      	; 0xa5e6 <putval+0x12>
    a5e2:	73 83       	std	Z+3, r23	; 0x03
    a5e4:	62 83       	std	Z+2, r22	; 0x02
    a5e6:	51 83       	std	Z+1, r21	; 0x01
    a5e8:	40 83       	st	Z, r20
    a5ea:	08 95       	ret

0000a5ec <mulacc>:
    a5ec:	44 fd       	sbrc	r20, 4
    a5ee:	10 c0       	rjmp	.+32     	; 0xa610 <mulacc+0x24>
    a5f0:	46 fd       	sbrc	r20, 6
    a5f2:	10 c0       	rjmp	.+32     	; 0xa614 <mulacc+0x28>
    a5f4:	db 01       	movw	r26, r22
    a5f6:	fc 01       	movw	r30, r24
    a5f8:	aa 0f       	add	r26, r26
    a5fa:	bb 1f       	adc	r27, r27
    a5fc:	ee 1f       	adc	r30, r30
    a5fe:	ff 1f       	adc	r31, r31
    a600:	10 94       	com	r1
    a602:	d1 f7       	brne	.-12     	; 0xa5f8 <mulacc+0xc>
    a604:	6a 0f       	add	r22, r26
    a606:	7b 1f       	adc	r23, r27
    a608:	8e 1f       	adc	r24, r30
    a60a:	9f 1f       	adc	r25, r31
    a60c:	31 e0       	ldi	r19, 0x01	; 1
    a60e:	03 c0       	rjmp	.+6      	; 0xa616 <mulacc+0x2a>
    a610:	33 e0       	ldi	r19, 0x03	; 3
    a612:	01 c0       	rjmp	.+2      	; 0xa616 <mulacc+0x2a>
    a614:	34 e0       	ldi	r19, 0x04	; 4
    a616:	66 0f       	add	r22, r22
    a618:	77 1f       	adc	r23, r23
    a61a:	88 1f       	adc	r24, r24
    a61c:	99 1f       	adc	r25, r25
    a61e:	31 50       	subi	r19, 0x01	; 1
    a620:	d1 f7       	brne	.-12     	; 0xa616 <mulacc+0x2a>
    a622:	62 0f       	add	r22, r18
    a624:	71 1d       	adc	r23, r1
    a626:	81 1d       	adc	r24, r1
    a628:	91 1d       	adc	r25, r1
    a62a:	08 95       	ret

0000a62c <skip_spaces>:
    a62c:	0f 93       	push	r16
    a62e:	1f 93       	push	r17
    a630:	cf 93       	push	r28
    a632:	df 93       	push	r29
    a634:	8c 01       	movw	r16, r24
    a636:	c8 01       	movw	r24, r16
    a638:	a9 d2       	rcall	.+1362   	; 0xab8c <fgetc>
    a63a:	ec 01       	movw	r28, r24
    a63c:	97 fd       	sbrc	r25, 7
    a63e:	06 c0       	rjmp	.+12     	; 0xa64c <skip_spaces+0x20>
    a640:	7c d2       	rcall	.+1272   	; 0xab3a <isspace>
    a642:	89 2b       	or	r24, r25
    a644:	c1 f7       	brne	.-16     	; 0xa636 <skip_spaces+0xa>
    a646:	b8 01       	movw	r22, r16
    a648:	ce 01       	movw	r24, r28
    a64a:	10 d3       	rcall	.+1568   	; 0xac6c <ungetc>
    a64c:	ce 01       	movw	r24, r28
    a64e:	df 91       	pop	r29
    a650:	cf 91       	pop	r28
    a652:	1f 91       	pop	r17
    a654:	0f 91       	pop	r16
    a656:	08 95       	ret

0000a658 <conv_int>:
    a658:	8f 92       	push	r8
    a65a:	9f 92       	push	r9
    a65c:	af 92       	push	r10
    a65e:	cf 92       	push	r12
    a660:	df 92       	push	r13
    a662:	ef 92       	push	r14
    a664:	ff 92       	push	r15
    a666:	0f 93       	push	r16
    a668:	1f 93       	push	r17
    a66a:	cf 93       	push	r28
    a66c:	df 93       	push	r29
    a66e:	ec 01       	movw	r28, r24
    a670:	a6 2e       	mov	r10, r22
    a672:	4a 01       	movw	r8, r20
    a674:	02 2f       	mov	r16, r18
    a676:	8a d2       	rcall	.+1300   	; 0xab8c <fgetc>
    a678:	ac 01       	movw	r20, r24
    a67a:	55 27       	eor	r21, r21
    a67c:	4b 32       	cpi	r20, 0x2B	; 43
    a67e:	51 05       	cpc	r21, r1
    a680:	21 f0       	breq	.+8      	; 0xa68a <conv_int+0x32>
    a682:	4d 32       	cpi	r20, 0x2D	; 45
    a684:	51 05       	cpc	r21, r1
    a686:	49 f4       	brne	.+18     	; 0xa69a <conv_int+0x42>
    a688:	00 68       	ori	r16, 0x80	; 128
    a68a:	aa 94       	dec	r10
    a68c:	11 f4       	brne	.+4      	; 0xa692 <conv_int+0x3a>
    a68e:	80 e0       	ldi	r24, 0x00	; 0
    a690:	60 c0       	rjmp	.+192    	; 0xa752 <conv_int+0xfa>
    a692:	ce 01       	movw	r24, r28
    a694:	7b d2       	rcall	.+1270   	; 0xab8c <fgetc>
    a696:	97 fd       	sbrc	r25, 7
    a698:	fa cf       	rjmp	.-12     	; 0xa68e <conv_int+0x36>
    a69a:	10 2f       	mov	r17, r16
    a69c:	1d 7f       	andi	r17, 0xFD	; 253
    a69e:	30 2f       	mov	r19, r16
    a6a0:	30 73       	andi	r19, 0x30	; 48
    a6a2:	f1 f4       	brne	.+60     	; 0xa6e0 <conv_int+0x88>
    a6a4:	80 33       	cpi	r24, 0x30	; 48
    a6a6:	e1 f4       	brne	.+56     	; 0xa6e0 <conv_int+0x88>
    a6a8:	ff 24       	eor	r15, r15
    a6aa:	fa 94       	dec	r15
    a6ac:	fa 0c       	add	r15, r10
    a6ae:	09 f4       	brne	.+2      	; 0xa6b2 <conv_int+0x5a>
    a6b0:	3d c0       	rjmp	.+122    	; 0xa72c <conv_int+0xd4>
    a6b2:	ce 01       	movw	r24, r28
    a6b4:	6b d2       	rcall	.+1238   	; 0xab8c <fgetc>
    a6b6:	97 fd       	sbrc	r25, 7
    a6b8:	39 c0       	rjmp	.+114    	; 0xa72c <conv_int+0xd4>
    a6ba:	38 2f       	mov	r19, r24
    a6bc:	3f 7d       	andi	r19, 0xDF	; 223
    a6be:	38 35       	cpi	r19, 0x58	; 88
    a6c0:	49 f4       	brne	.+18     	; 0xa6d4 <conv_int+0x7c>
    a6c2:	12 64       	ori	r17, 0x42	; 66
    a6c4:	aa 94       	dec	r10
    a6c6:	aa 94       	dec	r10
    a6c8:	89 f1       	breq	.+98     	; 0xa72c <conv_int+0xd4>
    a6ca:	ce 01       	movw	r24, r28
    a6cc:	5f d2       	rcall	.+1214   	; 0xab8c <fgetc>
    a6ce:	97 ff       	sbrs	r25, 7
    a6d0:	07 c0       	rjmp	.+14     	; 0xa6e0 <conv_int+0x88>
    a6d2:	2c c0       	rjmp	.+88     	; 0xa72c <conv_int+0xd4>
    a6d4:	06 ff       	sbrs	r16, 6
    a6d6:	02 c0       	rjmp	.+4      	; 0xa6dc <conv_int+0x84>
    a6d8:	12 60       	ori	r17, 0x02	; 2
    a6da:	01 c0       	rjmp	.+2      	; 0xa6de <conv_int+0x86>
    a6dc:	12 61       	ori	r17, 0x12	; 18
    a6de:	af 2c       	mov	r10, r15
    a6e0:	c1 2c       	mov	r12, r1
    a6e2:	d1 2c       	mov	r13, r1
    a6e4:	76 01       	movw	r14, r12
    a6e6:	20 ed       	ldi	r18, 0xD0	; 208
    a6e8:	28 0f       	add	r18, r24
    a6ea:	28 30       	cpi	r18, 0x08	; 8
    a6ec:	78 f0       	brcs	.+30     	; 0xa70c <conv_int+0xb4>
    a6ee:	14 ff       	sbrs	r17, 4
    a6f0:	03 c0       	rjmp	.+6      	; 0xa6f8 <conv_int+0xa0>
    a6f2:	be 01       	movw	r22, r28
    a6f4:	bb d2       	rcall	.+1398   	; 0xac6c <ungetc>
    a6f6:	17 c0       	rjmp	.+46     	; 0xa726 <conv_int+0xce>
    a6f8:	2a 30       	cpi	r18, 0x0A	; 10
    a6fa:	40 f0       	brcs	.+16     	; 0xa70c <conv_int+0xb4>
    a6fc:	16 ff       	sbrs	r17, 6
    a6fe:	f9 cf       	rjmp	.-14     	; 0xa6f2 <conv_int+0x9a>
    a700:	2f 7d       	andi	r18, 0xDF	; 223
    a702:	3f ee       	ldi	r19, 0xEF	; 239
    a704:	32 0f       	add	r19, r18
    a706:	36 30       	cpi	r19, 0x06	; 6
    a708:	a0 f7       	brcc	.-24     	; 0xa6f2 <conv_int+0x9a>
    a70a:	27 50       	subi	r18, 0x07	; 7
    a70c:	41 2f       	mov	r20, r17
    a70e:	c7 01       	movw	r24, r14
    a710:	b6 01       	movw	r22, r12
    a712:	6c df       	rcall	.-296    	; 0xa5ec <mulacc>
    a714:	6b 01       	movw	r12, r22
    a716:	7c 01       	movw	r14, r24
    a718:	12 60       	ori	r17, 0x02	; 2
    a71a:	aa 94       	dec	r10
    a71c:	51 f0       	breq	.+20     	; 0xa732 <conv_int+0xda>
    a71e:	ce 01       	movw	r24, r28
    a720:	35 d2       	rcall	.+1130   	; 0xab8c <fgetc>
    a722:	97 ff       	sbrs	r25, 7
    a724:	e0 cf       	rjmp	.-64     	; 0xa6e6 <conv_int+0x8e>
    a726:	11 fd       	sbrc	r17, 1
    a728:	04 c0       	rjmp	.+8      	; 0xa732 <conv_int+0xda>
    a72a:	b1 cf       	rjmp	.-158    	; 0xa68e <conv_int+0x36>
    a72c:	c1 2c       	mov	r12, r1
    a72e:	d1 2c       	mov	r13, r1
    a730:	76 01       	movw	r14, r12
    a732:	17 ff       	sbrs	r17, 7
    a734:	08 c0       	rjmp	.+16     	; 0xa746 <conv_int+0xee>
    a736:	f0 94       	com	r15
    a738:	e0 94       	com	r14
    a73a:	d0 94       	com	r13
    a73c:	c0 94       	com	r12
    a73e:	c1 1c       	adc	r12, r1
    a740:	d1 1c       	adc	r13, r1
    a742:	e1 1c       	adc	r14, r1
    a744:	f1 1c       	adc	r15, r1
    a746:	21 2f       	mov	r18, r17
    a748:	b7 01       	movw	r22, r14
    a74a:	a6 01       	movw	r20, r12
    a74c:	c4 01       	movw	r24, r8
    a74e:	42 df       	rcall	.-380    	; 0xa5d4 <putval>
    a750:	81 e0       	ldi	r24, 0x01	; 1
    a752:	df 91       	pop	r29
    a754:	cf 91       	pop	r28
    a756:	1f 91       	pop	r17
    a758:	0f 91       	pop	r16
    a75a:	ff 90       	pop	r15
    a75c:	ef 90       	pop	r14
    a75e:	df 90       	pop	r13
    a760:	cf 90       	pop	r12
    a762:	af 90       	pop	r10
    a764:	9f 90       	pop	r9
    a766:	8f 90       	pop	r8
    a768:	08 95       	ret

0000a76a <conv_brk>:
    a76a:	7f 92       	push	r7
    a76c:	8f 92       	push	r8
    a76e:	9f 92       	push	r9
    a770:	af 92       	push	r10
    a772:	bf 92       	push	r11
    a774:	cf 92       	push	r12
    a776:	df 92       	push	r13
    a778:	ef 92       	push	r14
    a77a:	ff 92       	push	r15
    a77c:	0f 93       	push	r16
    a77e:	1f 93       	push	r17
    a780:	cf 93       	push	r28
    a782:	df 93       	push	r29
    a784:	cd b7       	in	r28, 0x3d	; 61
    a786:	de b7       	in	r29, 0x3e	; 62
    a788:	a1 97       	sbiw	r28, 0x21	; 33
    a78a:	cd bf       	out	0x3d, r28	; 61
    a78c:	de bf       	out	0x3e, r29	; 62
    a78e:	5c 01       	movw	r10, r24
    a790:	7a 01       	movw	r14, r20
    a792:	8e 01       	movw	r16, r28
    a794:	0f 5f       	subi	r16, 0xFF	; 255
    a796:	1f 4f       	sbci	r17, 0xFF	; 255
    a798:	68 01       	movw	r12, r16
    a79a:	80 e2       	ldi	r24, 0x20	; 32
    a79c:	d8 01       	movw	r26, r16
    a79e:	1d 92       	st	X+, r1
    a7a0:	8a 95       	dec	r24
    a7a2:	e9 f7       	brne	.-6      	; 0xa79e <conv_brk+0x34>
    a7a4:	f5 01       	movw	r30, r10
    a7a6:	73 80       	ldd	r7, Z+3	; 0x03
    a7a8:	40 e0       	ldi	r20, 0x00	; 0
    a7aa:	50 e0       	ldi	r21, 0x00	; 0
    a7ac:	81 2c       	mov	r8, r1
    a7ae:	b0 e0       	ldi	r27, 0x00	; 0
    a7b0:	91 2c       	mov	r9, r1
    a7b2:	81 e0       	ldi	r24, 0x01	; 1
    a7b4:	90 e0       	ldi	r25, 0x00	; 0
    a7b6:	f9 01       	movw	r30, r18
    a7b8:	73 fc       	sbrc	r7, 3
    a7ba:	a5 91       	lpm	r26, Z+
    a7bc:	73 fe       	sbrs	r7, 3
    a7be:	a1 91       	ld	r26, Z+
    a7c0:	8f 01       	movw	r16, r30
    a7c2:	7a 2f       	mov	r23, r26
    a7c4:	9f 01       	movw	r18, r30
    a7c6:	a1 11       	cpse	r26, r1
    a7c8:	03 c0       	rjmp	.+6      	; 0xa7d0 <conv_brk+0x66>
    a7ca:	80 e0       	ldi	r24, 0x00	; 0
    a7cc:	90 e0       	ldi	r25, 0x00	; 0
    a7ce:	7b c0       	rjmp	.+246    	; 0xa8c6 <conv_brk+0x15c>
    a7d0:	ae 35       	cpi	r26, 0x5E	; 94
    a7d2:	19 f4       	brne	.+6      	; 0xa7da <conv_brk+0x70>
    a7d4:	41 15       	cp	r20, r1
    a7d6:	51 05       	cpc	r21, r1
    a7d8:	59 f1       	breq	.+86     	; 0xa830 <conv_brk+0xc6>
    a7da:	e9 2d       	mov	r30, r9
    a7dc:	f0 e0       	ldi	r31, 0x00	; 0
    a7de:	e4 17       	cp	r30, r20
    a7e0:	f5 07       	cpc	r31, r21
    a7e2:	3c f4       	brge	.+14     	; 0xa7f2 <conv_brk+0x88>
    a7e4:	ad 35       	cpi	r26, 0x5D	; 93
    a7e6:	69 f1       	breq	.+90     	; 0xa842 <conv_brk+0xd8>
    a7e8:	ad 32       	cpi	r26, 0x2D	; 45
    a7ea:	19 f4       	brne	.+6      	; 0xa7f2 <conv_brk+0x88>
    a7ec:	bb 23       	and	r27, r27
    a7ee:	19 f1       	breq	.+70     	; 0xa836 <conv_brk+0xcc>
    a7f0:	03 c0       	rjmp	.+6      	; 0xa7f8 <conv_brk+0x8e>
    a7f2:	b1 11       	cpse	r27, r1
    a7f4:	01 c0       	rjmp	.+2      	; 0xa7f8 <conv_brk+0x8e>
    a7f6:	8a 2e       	mov	r8, r26
    a7f8:	e7 2f       	mov	r30, r23
    a7fa:	e6 95       	lsr	r30
    a7fc:	e6 95       	lsr	r30
    a7fe:	e6 95       	lsr	r30
    a800:	86 01       	movw	r16, r12
    a802:	0e 0f       	add	r16, r30
    a804:	11 1d       	adc	r17, r1
    a806:	f8 01       	movw	r30, r16
    a808:	a7 2f       	mov	r26, r23
    a80a:	a7 70       	andi	r26, 0x07	; 7
    a80c:	8c 01       	movw	r16, r24
    a80e:	02 c0       	rjmp	.+4      	; 0xa814 <conv_brk+0xaa>
    a810:	00 0f       	add	r16, r16
    a812:	11 1f       	adc	r17, r17
    a814:	aa 95       	dec	r26
    a816:	e2 f7       	brpl	.-8      	; 0xa810 <conv_brk+0xa6>
    a818:	d8 01       	movw	r26, r16
    a81a:	b0 81       	ld	r27, Z
    a81c:	ba 2b       	or	r27, r26
    a81e:	b0 83       	st	Z, r27
    a820:	78 15       	cp	r23, r8
    a822:	59 f0       	breq	.+22     	; 0xa83a <conv_brk+0xd0>
    a824:	78 15       	cp	r23, r8
    a826:	10 f4       	brcc	.+4      	; 0xa82c <conv_brk+0xc2>
    a828:	7f 5f       	subi	r23, 0xFF	; 255
    a82a:	e6 cf       	rjmp	.-52     	; 0xa7f8 <conv_brk+0x8e>
    a82c:	71 50       	subi	r23, 0x01	; 1
    a82e:	e4 cf       	rjmp	.-56     	; 0xa7f8 <conv_brk+0x8e>
    a830:	99 24       	eor	r9, r9
    a832:	93 94       	inc	r9
    a834:	03 c0       	rjmp	.+6      	; 0xa83c <conv_brk+0xd2>
    a836:	b1 e0       	ldi	r27, 0x01	; 1
    a838:	01 c0       	rjmp	.+2      	; 0xa83c <conv_brk+0xd2>
    a83a:	b0 e0       	ldi	r27, 0x00	; 0
    a83c:	4f 5f       	subi	r20, 0xFF	; 255
    a83e:	5f 4f       	sbci	r21, 0xFF	; 255
    a840:	ba cf       	rjmp	.-140    	; 0xa7b6 <conv_brk+0x4c>
    a842:	bb 23       	and	r27, r27
    a844:	19 f0       	breq	.+6      	; 0xa84c <conv_brk+0xe2>
    a846:	8e 81       	ldd	r24, Y+6	; 0x06
    a848:	80 62       	ori	r24, 0x20	; 32
    a84a:	8e 83       	std	Y+6, r24	; 0x06
    a84c:	91 10       	cpse	r9, r1
    a84e:	03 c0       	rjmp	.+6      	; 0xa856 <conv_brk+0xec>
    a850:	99 24       	eor	r9, r9
    a852:	93 94       	inc	r9
    a854:	15 c0       	rjmp	.+42     	; 0xa880 <conv_brk+0x116>
    a856:	f6 01       	movw	r30, r12
    a858:	ce 01       	movw	r24, r28
    a85a:	81 96       	adiw	r24, 0x21	; 33
    a85c:	20 81       	ld	r18, Z
    a85e:	20 95       	com	r18
    a860:	21 93       	st	Z+, r18
    a862:	e8 17       	cp	r30, r24
    a864:	f9 07       	cpc	r31, r25
    a866:	d1 f7       	brne	.-12     	; 0xa85c <conv_brk+0xf2>
    a868:	f3 cf       	rjmp	.-26     	; 0xa850 <conv_brk+0xe6>
    a86a:	e1 14       	cp	r14, r1
    a86c:	f1 04       	cpc	r15, r1
    a86e:	29 f0       	breq	.+10     	; 0xa87a <conv_brk+0x110>
    a870:	d7 01       	movw	r26, r14
    a872:	8c 93       	st	X, r24
    a874:	f7 01       	movw	r30, r14
    a876:	31 96       	adiw	r30, 0x01	; 1
    a878:	7f 01       	movw	r14, r30
    a87a:	61 50       	subi	r22, 0x01	; 1
    a87c:	f1 f0       	breq	.+60     	; 0xa8ba <conv_brk+0x150>
    a87e:	91 2c       	mov	r9, r1
    a880:	c5 01       	movw	r24, r10
    a882:	69 a3       	std	Y+33, r22	; 0x21
    a884:	83 d1       	rcall	.+774    	; 0xab8c <fgetc>
    a886:	69 a1       	ldd	r22, Y+33	; 0x21
    a888:	97 fd       	sbrc	r25, 7
    a88a:	15 c0       	rjmp	.+42     	; 0xa8b6 <conv_brk+0x14c>
    a88c:	28 2f       	mov	r18, r24
    a88e:	26 95       	lsr	r18
    a890:	26 95       	lsr	r18
    a892:	26 95       	lsr	r18
    a894:	f6 01       	movw	r30, r12
    a896:	e2 0f       	add	r30, r18
    a898:	f1 1d       	adc	r31, r1
    a89a:	20 81       	ld	r18, Z
    a89c:	30 e0       	ldi	r19, 0x00	; 0
    a89e:	ac 01       	movw	r20, r24
    a8a0:	47 70       	andi	r20, 0x07	; 7
    a8a2:	55 27       	eor	r21, r21
    a8a4:	02 c0       	rjmp	.+4      	; 0xa8aa <conv_brk+0x140>
    a8a6:	35 95       	asr	r19
    a8a8:	27 95       	ror	r18
    a8aa:	4a 95       	dec	r20
    a8ac:	e2 f7       	brpl	.-8      	; 0xa8a6 <conv_brk+0x13c>
    a8ae:	20 fd       	sbrc	r18, 0
    a8b0:	dc cf       	rjmp	.-72     	; 0xa86a <conv_brk+0x100>
    a8b2:	b5 01       	movw	r22, r10
    a8b4:	db d1       	rcall	.+950    	; 0xac6c <ungetc>
    a8b6:	91 10       	cpse	r9, r1
    a8b8:	88 cf       	rjmp	.-240    	; 0xa7ca <conv_brk+0x60>
    a8ba:	e1 14       	cp	r14, r1
    a8bc:	f1 04       	cpc	r15, r1
    a8be:	11 f0       	breq	.+4      	; 0xa8c4 <conv_brk+0x15a>
    a8c0:	d7 01       	movw	r26, r14
    a8c2:	1c 92       	st	X, r1
    a8c4:	c8 01       	movw	r24, r16
    a8c6:	a1 96       	adiw	r28, 0x21	; 33
    a8c8:	cd bf       	out	0x3d, r28	; 61
    a8ca:	de bf       	out	0x3e, r29	; 62
    a8cc:	df 91       	pop	r29
    a8ce:	cf 91       	pop	r28
    a8d0:	1f 91       	pop	r17
    a8d2:	0f 91       	pop	r16
    a8d4:	ff 90       	pop	r15
    a8d6:	ef 90       	pop	r14
    a8d8:	df 90       	pop	r13
    a8da:	cf 90       	pop	r12
    a8dc:	bf 90       	pop	r11
    a8de:	af 90       	pop	r10
    a8e0:	9f 90       	pop	r9
    a8e2:	8f 90       	pop	r8
    a8e4:	7f 90       	pop	r7
    a8e6:	08 95       	ret

0000a8e8 <vfscanf>:
    a8e8:	4f 92       	push	r4
    a8ea:	5f 92       	push	r5
    a8ec:	7f 92       	push	r7
    a8ee:	8f 92       	push	r8
    a8f0:	9f 92       	push	r9
    a8f2:	af 92       	push	r10
    a8f4:	bf 92       	push	r11
    a8f6:	cf 92       	push	r12
    a8f8:	df 92       	push	r13
    a8fa:	ef 92       	push	r14
    a8fc:	ff 92       	push	r15
    a8fe:	0f 93       	push	r16
    a900:	1f 93       	push	r17
    a902:	cf 93       	push	r28
    a904:	df 93       	push	r29
    a906:	1f 92       	push	r1
    a908:	cd b7       	in	r28, 0x3d	; 61
    a90a:	de b7       	in	r29, 0x3e	; 62
    a90c:	8c 01       	movw	r16, r24
    a90e:	2b 01       	movw	r4, r22
    a910:	7a 01       	movw	r14, r20
    a912:	fc 01       	movw	r30, r24
    a914:	16 82       	std	Z+6, r1	; 0x06
    a916:	17 82       	std	Z+7, r1	; 0x07
    a918:	a1 2c       	mov	r10, r1
    a91a:	f8 01       	movw	r30, r16
    a91c:	d3 80       	ldd	r13, Z+3	; 0x03
    a91e:	f2 01       	movw	r30, r4
    a920:	d3 fc       	sbrc	r13, 3
    a922:	85 91       	lpm	r24, Z+
    a924:	d3 fe       	sbrs	r13, 3
    a926:	81 91       	ld	r24, Z+
    a928:	38 2f       	mov	r19, r24
    a92a:	2f 01       	movw	r4, r30
    a92c:	88 23       	and	r24, r24
    a92e:	09 f4       	brne	.+2      	; 0xa932 <vfscanf+0x4a>
    a930:	ee c0       	rjmp	.+476    	; 0xab0e <vfscanf+0x226>
    a932:	90 e0       	ldi	r25, 0x00	; 0
    a934:	39 83       	std	Y+1, r19	; 0x01
    a936:	01 d1       	rcall	.+514    	; 0xab3a <isspace>
    a938:	39 81       	ldd	r19, Y+1	; 0x01
    a93a:	89 2b       	or	r24, r25
    a93c:	19 f0       	breq	.+6      	; 0xa944 <vfscanf+0x5c>
    a93e:	c8 01       	movw	r24, r16
    a940:	75 de       	rcall	.-790    	; 0xa62c <skip_spaces>
    a942:	eb cf       	rjmp	.-42     	; 0xa91a <vfscanf+0x32>
    a944:	35 32       	cpi	r19, 0x25	; 37
    a946:	41 f4       	brne	.+16     	; 0xa958 <vfscanf+0x70>
    a948:	f2 01       	movw	r30, r4
    a94a:	d3 fc       	sbrc	r13, 3
    a94c:	35 91       	lpm	r19, Z+
    a94e:	d3 fe       	sbrs	r13, 3
    a950:	31 91       	ld	r19, Z+
    a952:	2f 01       	movw	r4, r30
    a954:	35 32       	cpi	r19, 0x25	; 37
    a956:	59 f4       	brne	.+22     	; 0xa96e <vfscanf+0x86>
    a958:	c8 01       	movw	r24, r16
    a95a:	39 83       	std	Y+1, r19	; 0x01
    a95c:	17 d1       	rcall	.+558    	; 0xab8c <fgetc>
    a95e:	39 81       	ldd	r19, Y+1	; 0x01
    a960:	97 fd       	sbrc	r25, 7
    a962:	d3 c0       	rjmp	.+422    	; 0xab0a <vfscanf+0x222>
    a964:	38 17       	cp	r19, r24
    a966:	c9 f2       	breq	.-78     	; 0xa91a <vfscanf+0x32>
    a968:	b8 01       	movw	r22, r16
    a96a:	80 d1       	rcall	.+768    	; 0xac6c <ungetc>
    a96c:	d0 c0       	rjmp	.+416    	; 0xab0e <vfscanf+0x226>
    a96e:	3a 32       	cpi	r19, 0x2A	; 42
    a970:	41 f4       	brne	.+16     	; 0xa982 <vfscanf+0x9a>
    a972:	d3 fc       	sbrc	r13, 3
    a974:	35 91       	lpm	r19, Z+
    a976:	d3 fe       	sbrs	r13, 3
    a978:	31 91       	ld	r19, Z+
    a97a:	2f 01       	movw	r4, r30
    a97c:	bb 24       	eor	r11, r11
    a97e:	b3 94       	inc	r11
    a980:	01 c0       	rjmp	.+2      	; 0xa984 <vfscanf+0x9c>
    a982:	b1 2c       	mov	r11, r1
    a984:	71 2c       	mov	r7, r1
    a986:	20 ed       	ldi	r18, 0xD0	; 208
    a988:	23 0f       	add	r18, r19
    a98a:	2a 30       	cpi	r18, 0x0A	; 10
    a98c:	88 f4       	brcc	.+34     	; 0xa9b0 <vfscanf+0xc8>
    a98e:	fb 2d       	mov	r31, r11
    a990:	f2 60       	ori	r31, 0x02	; 2
    a992:	bf 2e       	mov	r11, r31
    a994:	67 2d       	mov	r22, r7
    a996:	70 e0       	ldi	r23, 0x00	; 0
    a998:	80 e0       	ldi	r24, 0x00	; 0
    a99a:	90 e0       	ldi	r25, 0x00	; 0
    a99c:	40 e2       	ldi	r20, 0x20	; 32
    a99e:	26 de       	rcall	.-948    	; 0xa5ec <mulacc>
    a9a0:	76 2e       	mov	r7, r22
    a9a2:	f2 01       	movw	r30, r4
    a9a4:	d3 fc       	sbrc	r13, 3
    a9a6:	35 91       	lpm	r19, Z+
    a9a8:	d3 fe       	sbrs	r13, 3
    a9aa:	31 91       	ld	r19, Z+
    a9ac:	2f 01       	movw	r4, r30
    a9ae:	eb cf       	rjmp	.-42     	; 0xa986 <vfscanf+0x9e>
    a9b0:	b1 fe       	sbrs	r11, 1
    a9b2:	03 c0       	rjmp	.+6      	; 0xa9ba <vfscanf+0xd2>
    a9b4:	71 10       	cpse	r7, r1
    a9b6:	03 c0       	rjmp	.+6      	; 0xa9be <vfscanf+0xd6>
    a9b8:	aa c0       	rjmp	.+340    	; 0xab0e <vfscanf+0x226>
    a9ba:	77 24       	eor	r7, r7
    a9bc:	7a 94       	dec	r7
    a9be:	38 36       	cpi	r19, 0x68	; 104
    a9c0:	19 f0       	breq	.+6      	; 0xa9c8 <vfscanf+0xe0>
    a9c2:	3c 36       	cpi	r19, 0x6C	; 108
    a9c4:	61 f0       	breq	.+24     	; 0xa9de <vfscanf+0xf6>
    a9c6:	14 c0       	rjmp	.+40     	; 0xa9f0 <vfscanf+0x108>
    a9c8:	f2 01       	movw	r30, r4
    a9ca:	d3 fc       	sbrc	r13, 3
    a9cc:	35 91       	lpm	r19, Z+
    a9ce:	d3 fe       	sbrs	r13, 3
    a9d0:	31 91       	ld	r19, Z+
    a9d2:	2f 01       	movw	r4, r30
    a9d4:	38 36       	cpi	r19, 0x68	; 104
    a9d6:	61 f4       	brne	.+24     	; 0xa9f0 <vfscanf+0x108>
    a9d8:	fb 2d       	mov	r31, r11
    a9da:	f8 60       	ori	r31, 0x08	; 8
    a9dc:	bf 2e       	mov	r11, r31
    a9de:	8b 2d       	mov	r24, r11
    a9e0:	84 60       	ori	r24, 0x04	; 4
    a9e2:	b8 2e       	mov	r11, r24
    a9e4:	f2 01       	movw	r30, r4
    a9e6:	d3 fc       	sbrc	r13, 3
    a9e8:	35 91       	lpm	r19, Z+
    a9ea:	d3 fe       	sbrs	r13, 3
    a9ec:	31 91       	ld	r19, Z+
    a9ee:	2f 01       	movw	r4, r30
    a9f0:	33 23       	and	r19, r19
    a9f2:	09 f4       	brne	.+2      	; 0xa9f6 <vfscanf+0x10e>
    a9f4:	8c c0       	rjmp	.+280    	; 0xab0e <vfscanf+0x226>
    a9f6:	63 2f       	mov	r22, r19
    a9f8:	70 e0       	ldi	r23, 0x00	; 0
    a9fa:	83 e4       	ldi	r24, 0x43	; 67
    a9fc:	9d e0       	ldi	r25, 0x0D	; 13
    a9fe:	39 83       	std	Y+1, r19	; 0x01
    aa00:	a4 d0       	rcall	.+328    	; 0xab4a <strchr_P>
    aa02:	39 81       	ldd	r19, Y+1	; 0x01
    aa04:	89 2b       	or	r24, r25
    aa06:	09 f4       	brne	.+2      	; 0xaa0a <vfscanf+0x122>
    aa08:	82 c0       	rjmp	.+260    	; 0xab0e <vfscanf+0x226>
    aa0a:	b0 fc       	sbrc	r11, 0
    aa0c:	07 c0       	rjmp	.+14     	; 0xaa1c <vfscanf+0x134>
    aa0e:	f7 01       	movw	r30, r14
    aa10:	c0 80       	ld	r12, Z
    aa12:	d1 80       	ldd	r13, Z+1	; 0x01
    aa14:	c7 01       	movw	r24, r14
    aa16:	02 96       	adiw	r24, 0x02	; 2
    aa18:	7c 01       	movw	r14, r24
    aa1a:	02 c0       	rjmp	.+4      	; 0xaa20 <vfscanf+0x138>
    aa1c:	c1 2c       	mov	r12, r1
    aa1e:	d1 2c       	mov	r13, r1
    aa20:	3e 36       	cpi	r19, 0x6E	; 110
    aa22:	49 f4       	brne	.+18     	; 0xaa36 <vfscanf+0x14e>
    aa24:	f8 01       	movw	r30, r16
    aa26:	46 81       	ldd	r20, Z+6	; 0x06
    aa28:	57 81       	ldd	r21, Z+7	; 0x07
    aa2a:	60 e0       	ldi	r22, 0x00	; 0
    aa2c:	70 e0       	ldi	r23, 0x00	; 0
    aa2e:	2b 2d       	mov	r18, r11
    aa30:	c6 01       	movw	r24, r12
    aa32:	d0 dd       	rcall	.-1120   	; 0xa5d4 <putval>
    aa34:	72 cf       	rjmp	.-284    	; 0xa91a <vfscanf+0x32>
    aa36:	33 36       	cpi	r19, 0x63	; 99
    aa38:	99 f4       	brne	.+38     	; 0xaa60 <vfscanf+0x178>
    aa3a:	b1 fc       	sbrc	r11, 1
    aa3c:	02 c0       	rjmp	.+4      	; 0xaa42 <vfscanf+0x15a>
    aa3e:	77 24       	eor	r7, r7
    aa40:	73 94       	inc	r7
    aa42:	c8 01       	movw	r24, r16
    aa44:	a3 d0       	rcall	.+326    	; 0xab8c <fgetc>
    aa46:	97 fd       	sbrc	r25, 7
    aa48:	60 c0       	rjmp	.+192    	; 0xab0a <vfscanf+0x222>
    aa4a:	c1 14       	cp	r12, r1
    aa4c:	d1 04       	cpc	r13, r1
    aa4e:	29 f0       	breq	.+10     	; 0xaa5a <vfscanf+0x172>
    aa50:	f6 01       	movw	r30, r12
    aa52:	80 83       	st	Z, r24
    aa54:	c6 01       	movw	r24, r12
    aa56:	01 96       	adiw	r24, 0x01	; 1
    aa58:	6c 01       	movw	r12, r24
    aa5a:	7a 94       	dec	r7
    aa5c:	91 f7       	brne	.-28     	; 0xaa42 <vfscanf+0x15a>
    aa5e:	51 c0       	rjmp	.+162    	; 0xab02 <vfscanf+0x21a>
    aa60:	3b 35       	cpi	r19, 0x5B	; 91
    aa62:	51 f4       	brne	.+20     	; 0xaa78 <vfscanf+0x190>
    aa64:	92 01       	movw	r18, r4
    aa66:	a6 01       	movw	r20, r12
    aa68:	67 2d       	mov	r22, r7
    aa6a:	c8 01       	movw	r24, r16
    aa6c:	7e de       	rcall	.-772    	; 0xa76a <conv_brk>
    aa6e:	2c 01       	movw	r4, r24
    aa70:	00 97       	sbiw	r24, 0x00	; 0
    aa72:	09 f0       	breq	.+2      	; 0xaa76 <vfscanf+0x18e>
    aa74:	46 c0       	rjmp	.+140    	; 0xab02 <vfscanf+0x21a>
    aa76:	40 c0       	rjmp	.+128    	; 0xaaf8 <vfscanf+0x210>
    aa78:	c8 01       	movw	r24, r16
    aa7a:	39 83       	std	Y+1, r19	; 0x01
    aa7c:	d7 dd       	rcall	.-1106   	; 0xa62c <skip_spaces>
    aa7e:	39 81       	ldd	r19, Y+1	; 0x01
    aa80:	97 fd       	sbrc	r25, 7
    aa82:	43 c0       	rjmp	.+134    	; 0xab0a <vfscanf+0x222>
    aa84:	3f 36       	cpi	r19, 0x6F	; 111
    aa86:	51 f1       	breq	.+84     	; 0xaadc <vfscanf+0x1f4>
    aa88:	28 f4       	brcc	.+10     	; 0xaa94 <vfscanf+0x1ac>
    aa8a:	34 36       	cpi	r19, 0x64	; 100
    aa8c:	19 f1       	breq	.+70     	; 0xaad4 <vfscanf+0x1ec>
    aa8e:	39 36       	cpi	r19, 0x69	; 105
    aa90:	61 f1       	breq	.+88     	; 0xaaea <vfscanf+0x202>
    aa92:	28 c0       	rjmp	.+80     	; 0xaae4 <vfscanf+0x1fc>
    aa94:	33 37       	cpi	r19, 0x73	; 115
    aa96:	69 f0       	breq	.+26     	; 0xaab2 <vfscanf+0x1ca>
    aa98:	35 37       	cpi	r19, 0x75	; 117
    aa9a:	e1 f0       	breq	.+56     	; 0xaad4 <vfscanf+0x1ec>
    aa9c:	23 c0       	rjmp	.+70     	; 0xaae4 <vfscanf+0x1fc>
    aa9e:	c1 14       	cp	r12, r1
    aaa0:	d1 04       	cpc	r13, r1
    aaa2:	29 f0       	breq	.+10     	; 0xaaae <vfscanf+0x1c6>
    aaa4:	f6 01       	movw	r30, r12
    aaa6:	80 82       	st	Z, r8
    aaa8:	c6 01       	movw	r24, r12
    aaaa:	01 96       	adiw	r24, 0x01	; 1
    aaac:	6c 01       	movw	r12, r24
    aaae:	7a 94       	dec	r7
    aab0:	59 f0       	breq	.+22     	; 0xaac8 <vfscanf+0x1e0>
    aab2:	c8 01       	movw	r24, r16
    aab4:	6b d0       	rcall	.+214    	; 0xab8c <fgetc>
    aab6:	4c 01       	movw	r8, r24
    aab8:	97 fd       	sbrc	r25, 7
    aaba:	06 c0       	rjmp	.+12     	; 0xaac8 <vfscanf+0x1e0>
    aabc:	3e d0       	rcall	.+124    	; 0xab3a <isspace>
    aabe:	89 2b       	or	r24, r25
    aac0:	71 f3       	breq	.-36     	; 0xaa9e <vfscanf+0x1b6>
    aac2:	b8 01       	movw	r22, r16
    aac4:	c4 01       	movw	r24, r8
    aac6:	d2 d0       	rcall	.+420    	; 0xac6c <ungetc>
    aac8:	c1 14       	cp	r12, r1
    aaca:	d1 04       	cpc	r13, r1
    aacc:	d1 f0       	breq	.+52     	; 0xab02 <vfscanf+0x21a>
    aace:	f6 01       	movw	r30, r12
    aad0:	10 82       	st	Z, r1
    aad2:	17 c0       	rjmp	.+46     	; 0xab02 <vfscanf+0x21a>
    aad4:	fb 2d       	mov	r31, r11
    aad6:	f0 62       	ori	r31, 0x20	; 32
    aad8:	bf 2e       	mov	r11, r31
    aada:	07 c0       	rjmp	.+14     	; 0xaaea <vfscanf+0x202>
    aadc:	8b 2d       	mov	r24, r11
    aade:	80 61       	ori	r24, 0x10	; 16
    aae0:	b8 2e       	mov	r11, r24
    aae2:	03 c0       	rjmp	.+6      	; 0xaaea <vfscanf+0x202>
    aae4:	9b 2d       	mov	r25, r11
    aae6:	90 64       	ori	r25, 0x40	; 64
    aae8:	b9 2e       	mov	r11, r25
    aaea:	2b 2d       	mov	r18, r11
    aaec:	a6 01       	movw	r20, r12
    aaee:	67 2d       	mov	r22, r7
    aaf0:	c8 01       	movw	r24, r16
    aaf2:	b2 dd       	rcall	.-1180   	; 0xa658 <conv_int>
    aaf4:	81 11       	cpse	r24, r1
    aaf6:	05 c0       	rjmp	.+10     	; 0xab02 <vfscanf+0x21a>
    aaf8:	f8 01       	movw	r30, r16
    aafa:	83 81       	ldd	r24, Z+3	; 0x03
    aafc:	80 73       	andi	r24, 0x30	; 48
    aafe:	29 f4       	brne	.+10     	; 0xab0a <vfscanf+0x222>
    ab00:	06 c0       	rjmp	.+12     	; 0xab0e <vfscanf+0x226>
    ab02:	b0 fc       	sbrc	r11, 0
    ab04:	0a cf       	rjmp	.-492    	; 0xa91a <vfscanf+0x32>
    ab06:	a3 94       	inc	r10
    ab08:	08 cf       	rjmp	.-496    	; 0xa91a <vfscanf+0x32>
    ab0a:	aa 20       	and	r10, r10
    ab0c:	19 f0       	breq	.+6      	; 0xab14 <vfscanf+0x22c>
    ab0e:	8a 2d       	mov	r24, r10
    ab10:	90 e0       	ldi	r25, 0x00	; 0
    ab12:	02 c0       	rjmp	.+4      	; 0xab18 <vfscanf+0x230>
    ab14:	8f ef       	ldi	r24, 0xFF	; 255
    ab16:	9f ef       	ldi	r25, 0xFF	; 255
    ab18:	0f 90       	pop	r0
    ab1a:	df 91       	pop	r29
    ab1c:	cf 91       	pop	r28
    ab1e:	1f 91       	pop	r17
    ab20:	0f 91       	pop	r16
    ab22:	ff 90       	pop	r15
    ab24:	ef 90       	pop	r14
    ab26:	df 90       	pop	r13
    ab28:	cf 90       	pop	r12
    ab2a:	bf 90       	pop	r11
    ab2c:	af 90       	pop	r10
    ab2e:	9f 90       	pop	r9
    ab30:	8f 90       	pop	r8
    ab32:	7f 90       	pop	r7
    ab34:	5f 90       	pop	r5
    ab36:	4f 90       	pop	r4
    ab38:	08 95       	ret

0000ab3a <isspace>:
    ab3a:	91 11       	cpse	r25, r1
    ab3c:	0e c1       	rjmp	.+540    	; 0xad5a <__ctype_isfalse>
    ab3e:	80 32       	cpi	r24, 0x20	; 32
    ab40:	19 f0       	breq	.+6      	; 0xab48 <isspace+0xe>
    ab42:	89 50       	subi	r24, 0x09	; 9
    ab44:	85 50       	subi	r24, 0x05	; 5
    ab46:	d0 f7       	brcc	.-12     	; 0xab3c <isspace+0x2>
    ab48:	08 95       	ret

0000ab4a <strchr_P>:
    ab4a:	fc 01       	movw	r30, r24
    ab4c:	05 90       	lpm	r0, Z+
    ab4e:	06 16       	cp	r0, r22
    ab50:	21 f0       	breq	.+8      	; 0xab5a <strchr_P+0x10>
    ab52:	00 20       	and	r0, r0
    ab54:	d9 f7       	brne	.-10     	; 0xab4c <strchr_P+0x2>
    ab56:	c0 01       	movw	r24, r0
    ab58:	08 95       	ret
    ab5a:	31 97       	sbiw	r30, 0x01	; 1
    ab5c:	cf 01       	movw	r24, r30
    ab5e:	08 95       	ret

0000ab60 <strnlen_P>:
    ab60:	fc 01       	movw	r30, r24
    ab62:	05 90       	lpm	r0, Z+
    ab64:	61 50       	subi	r22, 0x01	; 1
    ab66:	70 40       	sbci	r23, 0x00	; 0
    ab68:	01 10       	cpse	r0, r1
    ab6a:	d8 f7       	brcc	.-10     	; 0xab62 <strnlen_P+0x2>
    ab6c:	80 95       	com	r24
    ab6e:	90 95       	com	r25
    ab70:	8e 0f       	add	r24, r30
    ab72:	9f 1f       	adc	r25, r31
    ab74:	08 95       	ret

0000ab76 <strnlen>:
    ab76:	fc 01       	movw	r30, r24
    ab78:	61 50       	subi	r22, 0x01	; 1
    ab7a:	70 40       	sbci	r23, 0x00	; 0
    ab7c:	01 90       	ld	r0, Z+
    ab7e:	01 10       	cpse	r0, r1
    ab80:	d8 f7       	brcc	.-10     	; 0xab78 <strnlen+0x2>
    ab82:	80 95       	com	r24
    ab84:	90 95       	com	r25
    ab86:	8e 0f       	add	r24, r30
    ab88:	9f 1f       	adc	r25, r31
    ab8a:	08 95       	ret

0000ab8c <fgetc>:
    ab8c:	cf 93       	push	r28
    ab8e:	df 93       	push	r29
    ab90:	ec 01       	movw	r28, r24
    ab92:	2b 81       	ldd	r18, Y+3	; 0x03
    ab94:	20 ff       	sbrs	r18, 0
    ab96:	33 c0       	rjmp	.+102    	; 0xabfe <fgetc+0x72>
    ab98:	26 ff       	sbrs	r18, 6
    ab9a:	0a c0       	rjmp	.+20     	; 0xabb0 <fgetc+0x24>
    ab9c:	2f 7b       	andi	r18, 0xBF	; 191
    ab9e:	2b 83       	std	Y+3, r18	; 0x03
    aba0:	8e 81       	ldd	r24, Y+6	; 0x06
    aba2:	9f 81       	ldd	r25, Y+7	; 0x07
    aba4:	01 96       	adiw	r24, 0x01	; 1
    aba6:	8e 83       	std	Y+6, r24	; 0x06
    aba8:	9f 83       	std	Y+7, r25	; 0x07
    abaa:	8a 81       	ldd	r24, Y+2	; 0x02
    abac:	90 e0       	ldi	r25, 0x00	; 0
    abae:	29 c0       	rjmp	.+82     	; 0xac02 <fgetc+0x76>
    abb0:	22 ff       	sbrs	r18, 2
    abb2:	0f c0       	rjmp	.+30     	; 0xabd2 <fgetc+0x46>
    abb4:	e8 81       	ld	r30, Y
    abb6:	f9 81       	ldd	r31, Y+1	; 0x01
    abb8:	80 81       	ld	r24, Z
    abba:	99 27       	eor	r25, r25
    abbc:	87 fd       	sbrc	r24, 7
    abbe:	90 95       	com	r25
    abc0:	00 97       	sbiw	r24, 0x00	; 0
    abc2:	19 f4       	brne	.+6      	; 0xabca <fgetc+0x3e>
    abc4:	20 62       	ori	r18, 0x20	; 32
    abc6:	2b 83       	std	Y+3, r18	; 0x03
    abc8:	1a c0       	rjmp	.+52     	; 0xabfe <fgetc+0x72>
    abca:	31 96       	adiw	r30, 0x01	; 1
    abcc:	e8 83       	st	Y, r30
    abce:	f9 83       	std	Y+1, r31	; 0x01
    abd0:	0e c0       	rjmp	.+28     	; 0xabee <fgetc+0x62>
    abd2:	ea 85       	ldd	r30, Y+10	; 0x0a
    abd4:	fb 85       	ldd	r31, Y+11	; 0x0b
    abd6:	09 95       	icall
    abd8:	97 ff       	sbrs	r25, 7
    abda:	09 c0       	rjmp	.+18     	; 0xabee <fgetc+0x62>
    abdc:	2b 81       	ldd	r18, Y+3	; 0x03
    abde:	01 96       	adiw	r24, 0x01	; 1
    abe0:	11 f4       	brne	.+4      	; 0xabe6 <fgetc+0x5a>
    abe2:	80 e1       	ldi	r24, 0x10	; 16
    abe4:	01 c0       	rjmp	.+2      	; 0xabe8 <fgetc+0x5c>
    abe6:	80 e2       	ldi	r24, 0x20	; 32
    abe8:	82 2b       	or	r24, r18
    abea:	8b 83       	std	Y+3, r24	; 0x03
    abec:	08 c0       	rjmp	.+16     	; 0xabfe <fgetc+0x72>
    abee:	2e 81       	ldd	r18, Y+6	; 0x06
    abf0:	3f 81       	ldd	r19, Y+7	; 0x07
    abf2:	2f 5f       	subi	r18, 0xFF	; 255
    abf4:	3f 4f       	sbci	r19, 0xFF	; 255
    abf6:	2e 83       	std	Y+6, r18	; 0x06
    abf8:	3f 83       	std	Y+7, r19	; 0x07
    abfa:	99 27       	eor	r25, r25
    abfc:	02 c0       	rjmp	.+4      	; 0xac02 <fgetc+0x76>
    abfe:	8f ef       	ldi	r24, 0xFF	; 255
    ac00:	9f ef       	ldi	r25, 0xFF	; 255
    ac02:	df 91       	pop	r29
    ac04:	cf 91       	pop	r28
    ac06:	08 95       	ret

0000ac08 <fputc>:
    ac08:	0f 93       	push	r16
    ac0a:	1f 93       	push	r17
    ac0c:	cf 93       	push	r28
    ac0e:	df 93       	push	r29
    ac10:	18 2f       	mov	r17, r24
    ac12:	09 2f       	mov	r16, r25
    ac14:	eb 01       	movw	r28, r22
    ac16:	8b 81       	ldd	r24, Y+3	; 0x03
    ac18:	81 fd       	sbrc	r24, 1
    ac1a:	03 c0       	rjmp	.+6      	; 0xac22 <fputc+0x1a>
    ac1c:	8f ef       	ldi	r24, 0xFF	; 255
    ac1e:	9f ef       	ldi	r25, 0xFF	; 255
    ac20:	20 c0       	rjmp	.+64     	; 0xac62 <fputc+0x5a>
    ac22:	82 ff       	sbrs	r24, 2
    ac24:	10 c0       	rjmp	.+32     	; 0xac46 <fputc+0x3e>
    ac26:	4e 81       	ldd	r20, Y+6	; 0x06
    ac28:	5f 81       	ldd	r21, Y+7	; 0x07
    ac2a:	2c 81       	ldd	r18, Y+4	; 0x04
    ac2c:	3d 81       	ldd	r19, Y+5	; 0x05
    ac2e:	42 17       	cp	r20, r18
    ac30:	53 07       	cpc	r21, r19
    ac32:	7c f4       	brge	.+30     	; 0xac52 <fputc+0x4a>
    ac34:	e8 81       	ld	r30, Y
    ac36:	f9 81       	ldd	r31, Y+1	; 0x01
    ac38:	9f 01       	movw	r18, r30
    ac3a:	2f 5f       	subi	r18, 0xFF	; 255
    ac3c:	3f 4f       	sbci	r19, 0xFF	; 255
    ac3e:	28 83       	st	Y, r18
    ac40:	39 83       	std	Y+1, r19	; 0x01
    ac42:	10 83       	st	Z, r17
    ac44:	06 c0       	rjmp	.+12     	; 0xac52 <fputc+0x4a>
    ac46:	e8 85       	ldd	r30, Y+8	; 0x08
    ac48:	f9 85       	ldd	r31, Y+9	; 0x09
    ac4a:	81 2f       	mov	r24, r17
    ac4c:	09 95       	icall
    ac4e:	89 2b       	or	r24, r25
    ac50:	29 f7       	brne	.-54     	; 0xac1c <fputc+0x14>
    ac52:	2e 81       	ldd	r18, Y+6	; 0x06
    ac54:	3f 81       	ldd	r19, Y+7	; 0x07
    ac56:	2f 5f       	subi	r18, 0xFF	; 255
    ac58:	3f 4f       	sbci	r19, 0xFF	; 255
    ac5a:	2e 83       	std	Y+6, r18	; 0x06
    ac5c:	3f 83       	std	Y+7, r19	; 0x07
    ac5e:	81 2f       	mov	r24, r17
    ac60:	90 2f       	mov	r25, r16
    ac62:	df 91       	pop	r29
    ac64:	cf 91       	pop	r28
    ac66:	1f 91       	pop	r17
    ac68:	0f 91       	pop	r16
    ac6a:	08 95       	ret

0000ac6c <ungetc>:
    ac6c:	fb 01       	movw	r30, r22
    ac6e:	23 81       	ldd	r18, Z+3	; 0x03
    ac70:	20 ff       	sbrs	r18, 0
    ac72:	12 c0       	rjmp	.+36     	; 0xac98 <ungetc+0x2c>
    ac74:	26 fd       	sbrc	r18, 6
    ac76:	10 c0       	rjmp	.+32     	; 0xac98 <ungetc+0x2c>
    ac78:	8f 3f       	cpi	r24, 0xFF	; 255
    ac7a:	3f ef       	ldi	r19, 0xFF	; 255
    ac7c:	93 07       	cpc	r25, r19
    ac7e:	61 f0       	breq	.+24     	; 0xac98 <ungetc+0x2c>
    ac80:	82 83       	std	Z+2, r24	; 0x02
    ac82:	2f 7d       	andi	r18, 0xDF	; 223
    ac84:	20 64       	ori	r18, 0x40	; 64
    ac86:	23 83       	std	Z+3, r18	; 0x03
    ac88:	26 81       	ldd	r18, Z+6	; 0x06
    ac8a:	37 81       	ldd	r19, Z+7	; 0x07
    ac8c:	21 50       	subi	r18, 0x01	; 1
    ac8e:	31 09       	sbc	r19, r1
    ac90:	26 83       	std	Z+6, r18	; 0x06
    ac92:	37 83       	std	Z+7, r19	; 0x07
    ac94:	99 27       	eor	r25, r25
    ac96:	08 95       	ret
    ac98:	8f ef       	ldi	r24, 0xFF	; 255
    ac9a:	9f ef       	ldi	r25, 0xFF	; 255
    ac9c:	08 95       	ret

0000ac9e <__ultoa_invert>:
    ac9e:	fa 01       	movw	r30, r20
    aca0:	aa 27       	eor	r26, r26
    aca2:	28 30       	cpi	r18, 0x08	; 8
    aca4:	51 f1       	breq	.+84     	; 0xacfa <__ultoa_invert+0x5c>
    aca6:	20 31       	cpi	r18, 0x10	; 16
    aca8:	81 f1       	breq	.+96     	; 0xad0a <__ultoa_invert+0x6c>
    acaa:	e8 94       	clt
    acac:	6f 93       	push	r22
    acae:	6e 7f       	andi	r22, 0xFE	; 254
    acb0:	6e 5f       	subi	r22, 0xFE	; 254
    acb2:	7f 4f       	sbci	r23, 0xFF	; 255
    acb4:	8f 4f       	sbci	r24, 0xFF	; 255
    acb6:	9f 4f       	sbci	r25, 0xFF	; 255
    acb8:	af 4f       	sbci	r26, 0xFF	; 255
    acba:	b1 e0       	ldi	r27, 0x01	; 1
    acbc:	3e d0       	rcall	.+124    	; 0xad3a <__ultoa_invert+0x9c>
    acbe:	b4 e0       	ldi	r27, 0x04	; 4
    acc0:	3c d0       	rcall	.+120    	; 0xad3a <__ultoa_invert+0x9c>
    acc2:	67 0f       	add	r22, r23
    acc4:	78 1f       	adc	r23, r24
    acc6:	89 1f       	adc	r24, r25
    acc8:	9a 1f       	adc	r25, r26
    acca:	a1 1d       	adc	r26, r1
    accc:	68 0f       	add	r22, r24
    acce:	79 1f       	adc	r23, r25
    acd0:	8a 1f       	adc	r24, r26
    acd2:	91 1d       	adc	r25, r1
    acd4:	a1 1d       	adc	r26, r1
    acd6:	6a 0f       	add	r22, r26
    acd8:	71 1d       	adc	r23, r1
    acda:	81 1d       	adc	r24, r1
    acdc:	91 1d       	adc	r25, r1
    acde:	a1 1d       	adc	r26, r1
    ace0:	20 d0       	rcall	.+64     	; 0xad22 <__ultoa_invert+0x84>
    ace2:	09 f4       	brne	.+2      	; 0xace6 <__ultoa_invert+0x48>
    ace4:	68 94       	set
    ace6:	3f 91       	pop	r19
    ace8:	2a e0       	ldi	r18, 0x0A	; 10
    acea:	26 9f       	mul	r18, r22
    acec:	11 24       	eor	r1, r1
    acee:	30 19       	sub	r19, r0
    acf0:	30 5d       	subi	r19, 0xD0	; 208
    acf2:	31 93       	st	Z+, r19
    acf4:	de f6       	brtc	.-74     	; 0xacac <__ultoa_invert+0xe>
    acf6:	cf 01       	movw	r24, r30
    acf8:	08 95       	ret
    acfa:	46 2f       	mov	r20, r22
    acfc:	47 70       	andi	r20, 0x07	; 7
    acfe:	40 5d       	subi	r20, 0xD0	; 208
    ad00:	41 93       	st	Z+, r20
    ad02:	b3 e0       	ldi	r27, 0x03	; 3
    ad04:	0f d0       	rcall	.+30     	; 0xad24 <__ultoa_invert+0x86>
    ad06:	c9 f7       	brne	.-14     	; 0xacfa <__ultoa_invert+0x5c>
    ad08:	f6 cf       	rjmp	.-20     	; 0xacf6 <__ultoa_invert+0x58>
    ad0a:	46 2f       	mov	r20, r22
    ad0c:	4f 70       	andi	r20, 0x0F	; 15
    ad0e:	40 5d       	subi	r20, 0xD0	; 208
    ad10:	4a 33       	cpi	r20, 0x3A	; 58
    ad12:	18 f0       	brcs	.+6      	; 0xad1a <__ultoa_invert+0x7c>
    ad14:	49 5d       	subi	r20, 0xD9	; 217
    ad16:	31 fd       	sbrc	r19, 1
    ad18:	40 52       	subi	r20, 0x20	; 32
    ad1a:	41 93       	st	Z+, r20
    ad1c:	02 d0       	rcall	.+4      	; 0xad22 <__ultoa_invert+0x84>
    ad1e:	a9 f7       	brne	.-22     	; 0xad0a <__ultoa_invert+0x6c>
    ad20:	ea cf       	rjmp	.-44     	; 0xacf6 <__ultoa_invert+0x58>
    ad22:	b4 e0       	ldi	r27, 0x04	; 4
    ad24:	a6 95       	lsr	r26
    ad26:	97 95       	ror	r25
    ad28:	87 95       	ror	r24
    ad2a:	77 95       	ror	r23
    ad2c:	67 95       	ror	r22
    ad2e:	ba 95       	dec	r27
    ad30:	c9 f7       	brne	.-14     	; 0xad24 <__ultoa_invert+0x86>
    ad32:	00 97       	sbiw	r24, 0x00	; 0
    ad34:	61 05       	cpc	r22, r1
    ad36:	71 05       	cpc	r23, r1
    ad38:	08 95       	ret
    ad3a:	9b 01       	movw	r18, r22
    ad3c:	ac 01       	movw	r20, r24
    ad3e:	0a 2e       	mov	r0, r26
    ad40:	06 94       	lsr	r0
    ad42:	57 95       	ror	r21
    ad44:	47 95       	ror	r20
    ad46:	37 95       	ror	r19
    ad48:	27 95       	ror	r18
    ad4a:	ba 95       	dec	r27
    ad4c:	c9 f7       	brne	.-14     	; 0xad40 <__ultoa_invert+0xa2>
    ad4e:	62 0f       	add	r22, r18
    ad50:	73 1f       	adc	r23, r19
    ad52:	84 1f       	adc	r24, r20
    ad54:	95 1f       	adc	r25, r21
    ad56:	a0 1d       	adc	r26, r0
    ad58:	08 95       	ret

0000ad5a <__ctype_isfalse>:
    ad5a:	99 27       	eor	r25, r25
    ad5c:	88 27       	eor	r24, r24

0000ad5e <__ctype_istrue>:
    ad5e:	08 95       	ret

0000ad60 <_exit>:
    ad60:	f8 94       	cli

0000ad62 <__stop_program>:
    ad62:	ff cf       	rjmp	.-2      	; 0xad62 <__stop_program>
