
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ba  00802000  00002c3a  00002cce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000007ba  008021ba  008021ba  00002e88  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002e88  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000758  00000000  00000000  00002ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001a75e  00000000  00000000  0000363c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002f97  00000000  00000000  0001dd9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000d2fa  00000000  00000000  00020d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000023c8  00000000  00000000  0002e02c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003240  00000000  00000000  000303f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027f87  00000000  00000000  00033634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000039a8  00000000  00000000  0005b5bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c1       	rjmp	.+674    	; 0x2a4 <__ctors_end>
       2:	00 00       	nop
       4:	6e c1       	rjmp	.+732    	; 0x2e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c1       	rjmp	.+728    	; 0x2e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c1       	rjmp	.+724    	; 0x2e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c1       	rjmp	.+720    	; 0x2e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c1       	rjmp	.+716    	; 0x2e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c1       	rjmp	.+712    	; 0x2e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c1       	rjmp	.+708    	; 0x2e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c1       	rjmp	.+704    	; 0x2e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c1       	rjmp	.+700    	; 0x2e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__vector_10>
      2c:	5a c1       	rjmp	.+692    	; 0x2e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	58 c1       	rjmp	.+688    	; 0x2e2 <__bad_interrupt>
      32:	00 00       	nop
      34:	56 c1       	rjmp	.+684    	; 0x2e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	e4 c3       	rjmp	.+1992   	; 0x802 <__vector_14>
      3a:	00 00       	nop
      3c:	52 c1       	rjmp	.+676    	; 0x2e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c1       	rjmp	.+672    	; 0x2e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c1       	rjmp	.+668    	; 0x2e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c1       	rjmp	.+664    	; 0x2e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c1       	rjmp	.+660    	; 0x2e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__vector_20>
      54:	46 c1       	rjmp	.+652    	; 0x2e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c1       	rjmp	.+648    	; 0x2e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c1       	rjmp	.+644    	; 0x2e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c1       	rjmp	.+640    	; 0x2e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	3e c1       	rjmp	.+636    	; 0x2e2 <__bad_interrupt>
      66:	00 00       	nop
      68:	3c c1       	rjmp	.+632    	; 0x2e2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3a c1       	rjmp	.+628    	; 0x2e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c1       	rjmp	.+624    	; 0x2e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c1       	rjmp	.+620    	; 0x2e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c1       	rjmp	.+616    	; 0x2e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c1       	rjmp	.+612    	; 0x2e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c1       	rjmp	.+608    	; 0x2e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c1       	rjmp	.+604    	; 0x2e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__vector_34>
      8c:	2a c1       	rjmp	.+596    	; 0x2e2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	28 c1       	rjmp	.+592    	; 0x2e2 <__bad_interrupt>
      92:	00 00       	nop
      94:	26 c1       	rjmp	.+588    	; 0x2e2 <__bad_interrupt>
      96:	00 00       	nop
      98:	24 c1       	rjmp	.+584    	; 0x2e2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	22 c1       	rjmp	.+580    	; 0x2e2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	20 c1       	rjmp	.+576    	; 0x2e2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1e c1       	rjmp	.+572    	; 0x2e2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1c c1       	rjmp	.+568    	; 0x2e2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	1a c1       	rjmp	.+564    	; 0x2e2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	18 c1       	rjmp	.+560    	; 0x2e2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	16 c1       	rjmp	.+556    	; 0x2e2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	14 c1       	rjmp	.+552    	; 0x2e2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	12 c1       	rjmp	.+548    	; 0x2e2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	10 c1       	rjmp	.+544    	; 0x2e2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	0e c1       	rjmp	.+540    	; 0x2e2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	0c c1       	rjmp	.+536    	; 0x2e2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0a c1       	rjmp	.+532    	; 0x2e2 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	08 c1       	rjmp	.+528    	; 0x2e2 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	06 c1       	rjmp	.+524    	; 0x2e2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	04 c1       	rjmp	.+520    	; 0x2e2 <__bad_interrupt>
      da:	00 00       	nop
      dc:	02 c1       	rjmp	.+516    	; 0x2e2 <__bad_interrupt>
      de:	00 00       	nop
      e0:	00 c1       	rjmp	.+512    	; 0x2e2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fe c0       	rjmp	.+508    	; 0x2e2 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	fc c0       	rjmp	.+504    	; 0x2e2 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	fa c0       	rjmp	.+500    	; 0x2e2 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	f8 c0       	rjmp	.+496    	; 0x2e2 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	f6 c0       	rjmp	.+492    	; 0x2e2 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	f4 c0       	rjmp	.+488    	; 0x2e2 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	f2 c0       	rjmp	.+484    	; 0x2e2 <__bad_interrupt>
      fe:	00 00       	nop
     100:	f0 c0       	rjmp	.+480    	; 0x2e2 <__bad_interrupt>
     102:	00 00       	nop
     104:	ee c0       	rjmp	.+476    	; 0x2e2 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__vector_66>
     10c:	ea c0       	rjmp	.+468    	; 0x2e2 <__bad_interrupt>
     10e:	00 00       	nop
     110:	e8 c0       	rjmp	.+464    	; 0x2e2 <__bad_interrupt>
     112:	00 00       	nop
     114:	e6 c0       	rjmp	.+460    	; 0x2e2 <__bad_interrupt>
     116:	00 00       	nop
     118:	e4 c0       	rjmp	.+456    	; 0x2e2 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	e2 c0       	rjmp	.+452    	; 0x2e2 <__bad_interrupt>
     11e:	00 00       	nop
     120:	e0 c0       	rjmp	.+448    	; 0x2e2 <__bad_interrupt>
     122:	00 00       	nop
     124:	de c0       	rjmp	.+444    	; 0x2e2 <__bad_interrupt>
     126:	00 00       	nop
     128:	dc c0       	rjmp	.+440    	; 0x2e2 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	da c0       	rjmp	.+436    	; 0x2e2 <__bad_interrupt>
     12e:	00 00       	nop
     130:	d8 c0       	rjmp	.+432    	; 0x2e2 <__bad_interrupt>
     132:	00 00       	nop
     134:	d6 c0       	rjmp	.+428    	; 0x2e2 <__bad_interrupt>
     136:	00 00       	nop
     138:	d4 c0       	rjmp	.+424    	; 0x2e2 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	d2 c0       	rjmp	.+420    	; 0x2e2 <__bad_interrupt>
     13e:	00 00       	nop
     140:	d0 c0       	rjmp	.+416    	; 0x2e2 <__bad_interrupt>
     142:	00 00       	nop
     144:	ce c0       	rjmp	.+412    	; 0x2e2 <__bad_interrupt>
     146:	00 00       	nop
     148:	cc c0       	rjmp	.+408    	; 0x2e2 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	ca c0       	rjmp	.+404    	; 0x2e2 <__bad_interrupt>
     14e:	00 00       	nop
     150:	c8 c0       	rjmp	.+400    	; 0x2e2 <__bad_interrupt>
     152:	00 00       	nop
     154:	c6 c0       	rjmp	.+396    	; 0x2e2 <__bad_interrupt>
     156:	00 00       	nop
     158:	c4 c0       	rjmp	.+392    	; 0x2e2 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	c2 c0       	rjmp	.+388    	; 0x2e2 <__bad_interrupt>
     15e:	00 00       	nop
     160:	d1 c2       	rjmp	.+1442   	; 0x704 <__vector_88>
     162:	00 00       	nop
     164:	be c0       	rjmp	.+380    	; 0x2e2 <__bad_interrupt>
     166:	00 00       	nop
     168:	bc c0       	rjmp	.+376    	; 0x2e2 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	ba c0       	rjmp	.+372    	; 0x2e2 <__bad_interrupt>
     16e:	00 00       	nop
     170:	b8 c0       	rjmp	.+368    	; 0x2e2 <__bad_interrupt>
     172:	00 00       	nop
     174:	b6 c0       	rjmp	.+364    	; 0x2e2 <__bad_interrupt>
     176:	00 00       	nop
     178:	b4 c0       	rjmp	.+360    	; 0x2e2 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	b2 c0       	rjmp	.+356    	; 0x2e2 <__bad_interrupt>
     17e:	00 00       	nop
     180:	b0 c0       	rjmp	.+352    	; 0x2e2 <__bad_interrupt>
     182:	00 00       	nop
     184:	ae c0       	rjmp	.+348    	; 0x2e2 <__bad_interrupt>
     186:	00 00       	nop
     188:	ac c0       	rjmp	.+344    	; 0x2e2 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	aa c0       	rjmp	.+340    	; 0x2e2 <__bad_interrupt>
     18e:	00 00       	nop
     190:	a8 c0       	rjmp	.+336    	; 0x2e2 <__bad_interrupt>
     192:	00 00       	nop
     194:	a6 c0       	rjmp	.+332    	; 0x2e2 <__bad_interrupt>
     196:	00 00       	nop
     198:	a4 c0       	rjmp	.+328    	; 0x2e2 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	a2 c0       	rjmp	.+324    	; 0x2e2 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	a0 c0       	rjmp	.+320    	; 0x2e2 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	9e c0       	rjmp	.+316    	; 0x2e2 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	9c c0       	rjmp	.+312    	; 0x2e2 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	9a c0       	rjmp	.+308    	; 0x2e2 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	98 c0       	rjmp	.+304    	; 0x2e2 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	96 c0       	rjmp	.+300    	; 0x2e2 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	94 c0       	rjmp	.+296    	; 0x2e2 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	92 c0       	rjmp	.+292    	; 0x2e2 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	90 c0       	rjmp	.+288    	; 0x2e2 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	8e c0       	rjmp	.+284    	; 0x2e2 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	8c c0       	rjmp	.+280    	; 0x2e2 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	8a c0       	rjmp	.+276    	; 0x2e2 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	88 c0       	rjmp	.+272    	; 0x2e2 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	86 c0       	rjmp	.+268    	; 0x2e2 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	84 c0       	rjmp	.+264    	; 0x2e2 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	82 c0       	rjmp	.+260    	; 0x2e2 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	80 c0       	rjmp	.+256    	; 0x2e2 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	7e c0       	rjmp	.+252    	; 0x2e2 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	7c c0       	rjmp	.+248    	; 0x2e2 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	7a c0       	rjmp	.+244    	; 0x2e2 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	78 c0       	rjmp	.+240    	; 0x2e2 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	76 c0       	rjmp	.+236    	; 0x2e2 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	74 c0       	rjmp	.+232    	; 0x2e2 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	d9 0b       	sbc	r29, r25
     1fe:	03 0a       	sbc	r0, r19
     200:	03 0a       	sbc	r0, r19
     202:	03 0a       	sbc	r0, r19
     204:	03 0a       	sbc	r0, r19
     206:	03 0a       	sbc	r0, r19
     208:	03 0a       	sbc	r0, r19
     20a:	03 0a       	sbc	r0, r19
     20c:	03 0a       	sbc	r0, r19
     20e:	03 0a       	sbc	r0, r19
     210:	03 0a       	sbc	r0, r19
     212:	03 0a       	sbc	r0, r19
     214:	03 0a       	sbc	r0, r19
     216:	d9 0b       	sbc	r29, r25
     218:	03 0a       	sbc	r0, r19
     21a:	03 0a       	sbc	r0, r19
     21c:	03 0a       	sbc	r0, r19
     21e:	03 0a       	sbc	r0, r19
     220:	03 0a       	sbc	r0, r19
     222:	03 0a       	sbc	r0, r19
     224:	03 0a       	sbc	r0, r19
     226:	03 0a       	sbc	r0, r19
     228:	03 0a       	sbc	r0, r19
     22a:	03 0a       	sbc	r0, r19
     22c:	03 0a       	sbc	r0, r19
     22e:	03 0a       	sbc	r0, r19
     230:	03 0a       	sbc	r0, r19
     232:	03 0a       	sbc	r0, r19
     234:	03 0a       	sbc	r0, r19
     236:	03 0a       	sbc	r0, r19
     238:	03 0a       	sbc	r0, r19
     23a:	03 0a       	sbc	r0, r19
     23c:	03 0a       	sbc	r0, r19
     23e:	03 0a       	sbc	r0, r19
     240:	03 0a       	sbc	r0, r19
     242:	03 0a       	sbc	r0, r19
     244:	03 0a       	sbc	r0, r19
     246:	03 0a       	sbc	r0, r19
     248:	03 0a       	sbc	r0, r19
     24a:	03 0a       	sbc	r0, r19
     24c:	03 0a       	sbc	r0, r19
     24e:	03 0a       	sbc	r0, r19
     250:	03 0a       	sbc	r0, r19
     252:	03 0a       	sbc	r0, r19
     254:	03 0a       	sbc	r0, r19
     256:	03 0a       	sbc	r0, r19
     258:	03 0a       	sbc	r0, r19
     25a:	03 0a       	sbc	r0, r19
     25c:	03 0a       	sbc	r0, r19
     25e:	03 0a       	sbc	r0, r19
     260:	03 0a       	sbc	r0, r19
     262:	03 0a       	sbc	r0, r19
     264:	03 0a       	sbc	r0, r19
     266:	03 0a       	sbc	r0, r19
     268:	03 0a       	sbc	r0, r19
     26a:	03 0a       	sbc	r0, r19
     26c:	03 0a       	sbc	r0, r19
     26e:	03 0a       	sbc	r0, r19
     270:	d9 0b       	sbc	r29, r25
     272:	03 0a       	sbc	r0, r19
     274:	03 0a       	sbc	r0, r19
     276:	03 0a       	sbc	r0, r19
     278:	03 0a       	sbc	r0, r19
     27a:	03 0a       	sbc	r0, r19
     27c:	d9 0b       	sbc	r29, r25
     27e:	03 0a       	sbc	r0, r19
     280:	03 0a       	sbc	r0, r19
     282:	03 0a       	sbc	r0, r19
     284:	d9 0b       	sbc	r29, r25
     286:	03 0a       	sbc	r0, r19
     288:	03 0a       	sbc	r0, r19
     28a:	03 0a       	sbc	r0, r19
     28c:	03 0a       	sbc	r0, r19
     28e:	03 0a       	sbc	r0, r19
     290:	03 0a       	sbc	r0, r19
     292:	03 0a       	sbc	r0, r19
     294:	d9 0b       	sbc	r29, r25
     296:	03 0a       	sbc	r0, r19
     298:	03 0a       	sbc	r0, r19
     29a:	03 0a       	sbc	r0, r19
     29c:	d9 0b       	sbc	r29, r25
     29e:	03 0a       	sbc	r0, r19
     2a0:	d9 0b       	sbc	r29, r25
     2a2:	db 0b       	sbc	r29, r27

000002a4 <__ctors_end>:
     2a4:	11 24       	eor	r1, r1
     2a6:	1f be       	out	0x3f, r1	; 63
     2a8:	cf ef       	ldi	r28, 0xFF	; 255
     2aa:	cd bf       	out	0x3d, r28	; 61
     2ac:	df e2       	ldi	r29, 0x2F	; 47
     2ae:	de bf       	out	0x3e, r29	; 62

000002b0 <__do_copy_data>:
     2b0:	11 e2       	ldi	r17, 0x21	; 33
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b0 e2       	ldi	r27, 0x20	; 32
     2b6:	ea e3       	ldi	r30, 0x3A	; 58
     2b8:	fc e2       	ldi	r31, 0x2C	; 44
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	0b bf       	out	0x3b, r16	; 59
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x14>
     2c0:	07 90       	elpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	aa 3b       	cpi	r26, 0xBA	; 186
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0x10>

000002ca <__do_clear_bss>:
     2ca:	29 e2       	ldi	r18, 0x29	; 41
     2cc:	aa eb       	ldi	r26, 0xBA	; 186
     2ce:	b1 e2       	ldi	r27, 0x21	; 33
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	a4 37       	cpi	r26, 0x74	; 116
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <main>
     2de:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <_exit>

000002e2 <__bad_interrupt>:
     2e2:	8e ce       	rjmp	.-740    	; 0x0 <__vectors>

000002e4 <clock_setup_32_mhz_pll>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
}

void clock_setup_32_mhz_pll(void) {
	
	OSC.PLLCTRL = 0 | OSC_PLLFAC4_bm;
     2e4:	80 e1       	ldi	r24, 0x10	; 16
     2e6:	80 93 55 00 	sts	0x0055, r24
	OSC.CTRL |= OSC_PLLEN_bm;
     2ea:	80 91 50 00 	lds	r24, 0x0050
     2ee:	80 61       	ori	r24, 0x10	; 16
     2f0:	80 93 50 00 	sts	0x0050, r24
	while ( !(OSC.STATUS & OSC_PLLEN_bm) ) ;
     2f4:	80 91 51 00 	lds	r24, 0x0051
     2f8:	84 ff       	sbrs	r24, 4
     2fa:	fc cf       	rjmp	.-8      	; 0x2f4 <clock_setup_32_mhz_pll+0x10>
	CCP = CCP_IOREG_gc;
     2fc:	88 ed       	ldi	r24, 0xD8	; 216
     2fe:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = (CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_PLL_gc;
     300:	80 91 40 00 	lds	r24, 0x0040
     304:	88 7f       	andi	r24, 0xF8	; 248
     306:	84 60       	ori	r24, 0x04	; 4
     308:	80 93 40 00 	sts	0x0040, r24
     30c:	08 95       	ret

0000030e <esp8266_on>:
		_delay_ms(1000);
		at_cipsend(str);
		_delay_ms(10000);
		esp8266_send_cmd("AT+CIPCLOSE=0\r", 100);
	}
}
     30e:	e0 e6       	ldi	r30, 0x60	; 96
     310:	f6 e0       	ldi	r31, 0x06	; 6
     312:	80 e2       	ldi	r24, 0x20	; 32
     314:	81 83       	std	Z+1, r24	; 0x01
     316:	85 83       	std	Z+5, r24	; 0x05
     318:	2f ef       	ldi	r18, 0xFF	; 255
     31a:	33 e2       	ldi	r19, 0x23	; 35
     31c:	84 ef       	ldi	r24, 0xF4	; 244
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	21 50       	subi	r18, 0x01	; 1
     322:	30 40       	sbci	r19, 0x00	; 0
     324:	80 40       	sbci	r24, 0x00	; 0
     326:	90 40       	sbci	r25, 0x00	; 0
     328:	d9 f7       	brne	.-10     	; 0x320 <esp8266_on+0x12>
     32a:	00 c0       	rjmp	.+0      	; 0x32c <esp8266_on+0x1e>
     32c:	00 00       	nop
     32e:	08 95       	ret

00000330 <esp8266_off>:
     330:	80 e2       	ldi	r24, 0x20	; 32
     332:	e0 e6       	ldi	r30, 0x60	; 96
     334:	f6 e0       	ldi	r31, 0x06	; 6
     336:	86 83       	std	Z+6, r24	; 0x06
     338:	08 95       	ret

0000033a <esp8266_setup>:
     33a:	86 e0       	ldi	r24, 0x06	; 6
     33c:	80 93 cd 22 	sts	0x22CD, r24
     340:	82 e1       	ldi	r24, 0x12	; 18
     342:	90 e2       	ldi	r25, 0x20	; 32
     344:	0e 94 15 11 	call	0x222a	; 0x222a <uart_write_str>
     348:	24 e5       	ldi	r18, 0x54	; 84
     34a:	35 e8       	ldi	r19, 0x85	; 133
     34c:	85 e4       	ldi	r24, 0x45	; 69
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	21 50       	subi	r18, 0x01	; 1
     352:	30 40       	sbci	r19, 0x00	; 0
     354:	80 40       	sbci	r24, 0x00	; 0
     356:	90 40       	sbci	r25, 0x00	; 0
     358:	d9 f7       	brne	.-10     	; 0x350 <esp8266_setup+0x16>
     35a:	00 c0       	rjmp	.+0      	; 0x35c <esp8266_setup+0x22>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <esp8266_setup+0x24>
     35e:	00 00       	nop
     360:	80 91 cd 22 	lds	r24, 0x22CD
     364:	81 30       	cpi	r24, 0x01	; 1
     366:	09 f0       	breq	.+2      	; 0x36a <esp8266_setup+0x30>
     368:	08 95       	ret
     36a:	86 e0       	ldi	r24, 0x06	; 6
     36c:	80 93 cd 22 	sts	0x22CD, r24
     370:	89 e1       	ldi	r24, 0x19	; 25
     372:	90 e2       	ldi	r25, 0x20	; 32
     374:	0e 94 15 11 	call	0x222a	; 0x222a <uart_write_str>
     378:	2f ef       	ldi	r18, 0xFF	; 255
     37a:	33 ed       	ldi	r19, 0xD3	; 211
     37c:	80 e3       	ldi	r24, 0x30	; 48
     37e:	21 50       	subi	r18, 0x01	; 1
     380:	30 40       	sbci	r19, 0x00	; 0
     382:	80 40       	sbci	r24, 0x00	; 0
     384:	e1 f7       	brne	.-8      	; 0x37e <esp8266_setup+0x44>
     386:	00 c0       	rjmp	.+0      	; 0x388 <esp8266_setup+0x4e>
     388:	00 00       	nop
     38a:	80 91 cd 22 	lds	r24, 0x22CD
     38e:	81 30       	cpi	r24, 0x01	; 1
     390:	59 f7       	brne	.-42     	; 0x368 <esp8266_setup+0x2e>
     392:	86 e0       	ldi	r24, 0x06	; 6
     394:	80 93 cd 22 	sts	0x22CD, r24
     398:	86 e2       	ldi	r24, 0x26	; 38
     39a:	90 e2       	ldi	r25, 0x20	; 32
     39c:	0e 94 15 11 	call	0x222a	; 0x222a <uart_write_str>
     3a0:	9f ef       	ldi	r25, 0xFF	; 255
     3a2:	23 ed       	ldi	r18, 0xD3	; 211
     3a4:	30 e3       	ldi	r19, 0x30	; 48
     3a6:	91 50       	subi	r25, 0x01	; 1
     3a8:	20 40       	sbci	r18, 0x00	; 0
     3aa:	30 40       	sbci	r19, 0x00	; 0
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <esp8266_setup+0x6c>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <esp8266_setup+0x76>
     3b0:	00 00       	nop
     3b2:	80 91 cd 22 	lds	r24, 0x22CD
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	b9 f6       	brne	.-82     	; 0x368 <esp8266_setup+0x2e>
     3ba:	86 e0       	ldi	r24, 0x06	; 6
     3bc:	80 93 cd 22 	sts	0x22CD, r24
     3c0:	82 e3       	ldi	r24, 0x32	; 50
     3c2:	90 e2       	ldi	r25, 0x20	; 32
     3c4:	0e 94 15 11 	call	0x222a	; 0x222a <uart_write_str>
     3c8:	8f ef       	ldi	r24, 0xFF	; 255
     3ca:	93 ed       	ldi	r25, 0xD3	; 211
     3cc:	20 e3       	ldi	r18, 0x30	; 48
     3ce:	81 50       	subi	r24, 0x01	; 1
     3d0:	90 40       	sbci	r25, 0x00	; 0
     3d2:	20 40       	sbci	r18, 0x00	; 0
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <esp8266_setup+0x94>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <esp8266_setup+0x9e>
     3d8:	00 00       	nop
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	08 95       	ret

000003de <esp8266_join_ap>:
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	c4 56       	subi	r28, 0x64	; 100
     3f0:	d1 09       	sbc	r29, r1
     3f2:	cd bf       	out	0x3d, r28	; 61
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	7b 01       	movw	r14, r22
     3f8:	2a e0       	ldi	r18, 0x0A	; 10
     3fa:	ee e3       	ldi	r30, 0x3E	; 62
     3fc:	f0 e2       	ldi	r31, 0x20	; 32
     3fe:	8e 01       	movw	r16, r28
     400:	0f 5f       	subi	r16, 0xFF	; 255
     402:	1f 4f       	sbci	r17, 0xFF	; 255
     404:	d8 01       	movw	r26, r16
     406:	01 90       	ld	r0, Z+
     408:	0d 92       	st	X+, r0
     40a:	2a 95       	dec	r18
     40c:	e1 f7       	brne	.-8      	; 0x406 <esp8266_join_ap+0x28>
     40e:	bc 01       	movw	r22, r24
     410:	ce 01       	movw	r24, r28
     412:	0b 96       	adiw	r24, 0x0b	; 11
     414:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <strcpy>
     418:	f8 01       	movw	r30, r16
     41a:	01 90       	ld	r0, Z+
     41c:	00 20       	and	r0, r0
     41e:	e9 f7       	brne	.-6      	; 0x41a <esp8266_join_ap+0x3c>
     420:	31 97       	sbiw	r30, 0x01	; 1
     422:	42 e2       	ldi	r20, 0x22	; 34
     424:	5c e2       	ldi	r21, 0x2C	; 44
     426:	62 e2       	ldi	r22, 0x22	; 34
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	40 83       	st	Z, r20
     42c:	51 83       	std	Z+1, r21	; 0x01
     42e:	62 83       	std	Z+2, r22	; 0x02
     430:	73 83       	std	Z+3, r23	; 0x03
     432:	b7 01       	movw	r22, r14
     434:	cf 01       	movw	r24, r30
     436:	03 96       	adiw	r24, 0x03	; 3
     438:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <strcpy>
     43c:	f8 01       	movw	r30, r16
     43e:	01 90       	ld	r0, Z+
     440:	00 20       	and	r0, r0
     442:	e9 f7       	brne	.-6      	; 0x43e <esp8266_join_ap+0x60>
     444:	31 97       	sbiw	r30, 0x01	; 1
     446:	82 e2       	ldi	r24, 0x22	; 34
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	80 83       	st	Z, r24
     44c:	91 83       	std	Z+1, r25	; 0x01
     44e:	86 e0       	ldi	r24, 0x06	; 6
     450:	80 93 cd 22 	sts	0x22CD, r24
     454:	c8 01       	movw	r24, r16
     456:	0e 94 15 11 	call	0x222a	; 0x222a <uart_write_str>
     45a:	2f ef       	ldi	r18, 0xFF	; 255
     45c:	33 ed       	ldi	r19, 0xD3	; 211
     45e:	40 e3       	ldi	r20, 0x30	; 48
     460:	21 50       	subi	r18, 0x01	; 1
     462:	30 40       	sbci	r19, 0x00	; 0
     464:	40 40       	sbci	r20, 0x00	; 0
     466:	e1 f7       	brne	.-8      	; 0x460 <esp8266_join_ap+0x82>
     468:	00 c0       	rjmp	.+0      	; 0x46a <esp8266_join_ap+0x8c>
     46a:	00 00       	nop
     46c:	20 91 cd 22 	lds	r18, 0x22CD
     470:	8e e3       	ldi	r24, 0x3E	; 62
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	10 c0       	rjmp	.+32     	; 0x496 <esp8266_join_ap+0xb8>
     476:	2f ef       	ldi	r18, 0xFF	; 255
     478:	37 ea       	ldi	r19, 0xA7	; 167
     47a:	41 e6       	ldi	r20, 0x61	; 97
     47c:	21 50       	subi	r18, 0x01	; 1
     47e:	30 40       	sbci	r19, 0x00	; 0
     480:	40 40       	sbci	r20, 0x00	; 0
     482:	e1 f7       	brne	.-8      	; 0x47c <esp8266_join_ap+0x9e>
     484:	00 c0       	rjmp	.+0      	; 0x486 <esp8266_join_ap+0xa8>
     486:	00 00       	nop
     488:	01 97       	sbiw	r24, 0x01	; 1
     48a:	00 97       	sbiw	r24, 0x00	; 0
     48c:	29 f1       	breq	.+74     	; 0x4d8 <esp8266_join_ap+0xfa>
     48e:	20 91 cd 22 	lds	r18, 0x22CD
     492:	22 23       	and	r18, r18
     494:	f9 f0       	breq	.+62     	; 0x4d4 <esp8266_join_ap+0xf6>
     496:	21 30       	cpi	r18, 0x01	; 1
     498:	71 f7       	brne	.-36     	; 0x476 <esp8266_join_ap+0x98>
     49a:	86 e0       	ldi	r24, 0x06	; 6
     49c:	80 93 cd 22 	sts	0x22CD, r24
     4a0:	89 e4       	ldi	r24, 0x49	; 73
     4a2:	90 e2       	ldi	r25, 0x20	; 32
     4a4:	0e 94 15 11 	call	0x222a	; 0x222a <uart_write_str>
     4a8:	8f ef       	ldi	r24, 0xFF	; 255
     4aa:	93 ed       	ldi	r25, 0xD3	; 211
     4ac:	20 e3       	ldi	r18, 0x30	; 48
     4ae:	81 50       	subi	r24, 0x01	; 1
     4b0:	90 40       	sbci	r25, 0x00	; 0
     4b2:	20 40       	sbci	r18, 0x00	; 0
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <esp8266_join_ap+0xd0>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <esp8266_join_ap+0xda>
     4b8:	00 00       	nop
     4ba:	80 91 cd 22 	lds	r24, 0x22CD
     4be:	cc 59       	subi	r28, 0x9C	; 156
     4c0:	df 4f       	sbci	r29, 0xFF	; 255
     4c2:	cd bf       	out	0x3d, r28	; 61
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	ff 90       	pop	r15
     4d0:	ef 90       	pop	r14
     4d2:	08 95       	ret
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	f3 cf       	rjmp	.-26     	; 0x4be <esp8266_join_ap+0xe0>
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	f1 cf       	rjmp	.-30     	; 0x4be <esp8266_join_ap+0xe0>

000004dc <esp8266_connect>:
     4dc:	af 92       	push	r10
     4de:	bf 92       	push	r11
     4e0:	cf 92       	push	r12
     4e2:	df 92       	push	r13
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	c4 56       	subi	r28, 0x64	; 100
     4f6:	d1 09       	sbc	r29, r1
     4f8:	cd bf       	out	0x3d, r28	; 61
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	6b 01       	movw	r12, r22
     4fe:	7a 01       	movw	r14, r20
     500:	24 e1       	ldi	r18, 0x14	; 20
     502:	e3 e5       	ldi	r30, 0x53	; 83
     504:	f0 e2       	ldi	r31, 0x20	; 32
     506:	8e 01       	movw	r16, r28
     508:	0f 5f       	subi	r16, 0xFF	; 255
     50a:	1f 4f       	sbci	r17, 0xFF	; 255
     50c:	d8 01       	movw	r26, r16
     50e:	01 90       	ld	r0, Z+
     510:	0d 92       	st	X+, r0
     512:	2a 95       	dec	r18
     514:	e1 f7       	brne	.-8      	; 0x50e <esp8266_connect+0x32>
     516:	bc 01       	movw	r22, r24
     518:	ce 01       	movw	r24, r28
     51a:	44 96       	adiw	r24, 0x14	; 20
     51c:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <strcpy>
     520:	d8 01       	movw	r26, r16
     522:	0d 90       	ld	r0, X+
     524:	00 20       	and	r0, r0
     526:	e9 f7       	brne	.-6      	; 0x522 <esp8266_connect+0x46>
     528:	11 97       	sbiw	r26, 0x01	; 1
     52a:	85 e0       	ldi	r24, 0x05	; 5
     52c:	e7 e6       	ldi	r30, 0x67	; 103
     52e:	f0 e2       	ldi	r31, 0x20	; 32
     530:	01 90       	ld	r0, Z+
     532:	0d 92       	st	X+, r0
     534:	8a 95       	dec	r24
     536:	e1 f7       	brne	.-8      	; 0x530 <esp8266_connect+0x54>
     538:	86 e0       	ldi	r24, 0x06	; 6
     53a:	80 93 cd 22 	sts	0x22CD, r24
     53e:	c8 01       	movw	r24, r16
     540:	0e 94 15 11 	call	0x222a	; 0x222a <uart_write_str>
     544:	2f ef       	ldi	r18, 0xFF	; 255
     546:	87 ea       	ldi	r24, 0xA7	; 167
     548:	91 e6       	ldi	r25, 0x61	; 97
     54a:	21 50       	subi	r18, 0x01	; 1
     54c:	80 40       	sbci	r24, 0x00	; 0
     54e:	90 40       	sbci	r25, 0x00	; 0
     550:	e1 f7       	brne	.-8      	; 0x54a <esp8266_connect+0x6e>
     552:	00 c0       	rjmp	.+0      	; 0x554 <esp8266_connect+0x78>
     554:	00 00       	nop
     556:	80 91 cd 22 	lds	r24, 0x22CD
     55a:	81 30       	cpi	r24, 0x01	; 1
     55c:	79 f0       	breq	.+30     	; 0x57c <esp8266_connect+0xa0>
     55e:	cc 59       	subi	r28, 0x9C	; 156
     560:	df 4f       	sbci	r29, 0xFF	; 255
     562:	cd bf       	out	0x3d, r28	; 61
     564:	de bf       	out	0x3e, r29	; 62
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	bf 90       	pop	r11
     578:	af 90       	pop	r10
     57a:	08 95       	ret
     57c:	f6 01       	movw	r30, r12
     57e:	01 90       	ld	r0, Z+
     580:	00 20       	and	r0, r0
     582:	e9 f7       	brne	.-6      	; 0x57e <esp8266_connect+0xa2>
     584:	cf 01       	movw	r24, r30
     586:	8c 19       	sub	r24, r12
     588:	9d 09       	sbc	r25, r13
     58a:	4a e0       	ldi	r20, 0x0A	; 10
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	a1 2c       	mov	r10, r1
     590:	b1 2c       	mov	r11, r1
     592:	b5 01       	movw	r22, r10
     594:	48 96       	adiw	r24, 0x18	; 24
     596:	0e 94 12 13 	call	0x2624	; 0x2624 <itoa>
     59a:	8c e0       	ldi	r24, 0x0C	; 12
     59c:	ec e6       	ldi	r30, 0x6C	; 108
     59e:	f0 e2       	ldi	r31, 0x20	; 32
     5a0:	d8 01       	movw	r26, r16
     5a2:	01 90       	ld	r0, Z+
     5a4:	0d 92       	st	X+, r0
     5a6:	8a 95       	dec	r24
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <esp8266_connect+0xc6>
     5aa:	b5 01       	movw	r22, r10
     5ac:	ce 01       	movw	r24, r28
     5ae:	0c 96       	adiw	r24, 0x0c	; 12
     5b0:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <strcpy>
     5b4:	f8 01       	movw	r30, r16
     5b6:	01 90       	ld	r0, Z+
     5b8:	00 20       	and	r0, r0
     5ba:	e9 f7       	brne	.-6      	; 0x5b6 <esp8266_connect+0xda>
     5bc:	31 97       	sbiw	r30, 0x01	; 1
     5be:	8d e0       	ldi	r24, 0x0D	; 13
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	80 83       	st	Z, r24
     5c4:	91 83       	std	Z+1, r25	; 0x01
     5c6:	86 e0       	ldi	r24, 0x06	; 6
     5c8:	80 93 cd 22 	sts	0x22CD, r24
     5cc:	c8 01       	movw	r24, r16
     5ce:	0e 94 15 11 	call	0x222a	; 0x222a <uart_write_str>
     5d2:	ff ef       	ldi	r31, 0xFF	; 255
     5d4:	23 ed       	ldi	r18, 0xD3	; 211
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	f1 50       	subi	r31, 0x01	; 1
     5da:	20 40       	sbci	r18, 0x00	; 0
     5dc:	80 40       	sbci	r24, 0x00	; 0
     5de:	e1 f7       	brne	.-8      	; 0x5d8 <esp8266_connect+0xfc>
     5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <esp8266_connect+0x106>
     5e2:	00 00       	nop
     5e4:	07 e4       	ldi	r16, 0x47	; 71
     5e6:	15 e4       	ldi	r17, 0x45	; 69
     5e8:	24 e5       	ldi	r18, 0x54	; 84
     5ea:	30 e2       	ldi	r19, 0x20	; 32
     5ec:	09 83       	std	Y+1, r16	; 0x01
     5ee:	1a 83       	std	Y+2, r17	; 0x02
     5f0:	2b 83       	std	Y+3, r18	; 0x03
     5f2:	3c 83       	std	Y+4, r19	; 0x04
     5f4:	b6 01       	movw	r22, r12
     5f6:	ce 01       	movw	r24, r28
     5f8:	05 96       	adiw	r24, 0x05	; 5
     5fa:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <strcpy>
     5fe:	ce 01       	movw	r24, r28
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	dc 01       	movw	r26, r24
     604:	0d 90       	ld	r0, X+
     606:	00 20       	and	r0, r0
     608:	e9 f7       	brne	.-6      	; 0x604 <esp8266_connect+0x128>
     60a:	11 97       	sbiw	r26, 0x01	; 1
     60c:	2c e0       	ldi	r18, 0x0C	; 12
     60e:	e8 e7       	ldi	r30, 0x78	; 120
     610:	f0 e2       	ldi	r31, 0x20	; 32
     612:	01 90       	ld	r0, Z+
     614:	0d 92       	st	X+, r0
     616:	2a 95       	dec	r18
     618:	e1 f7       	brne	.-8      	; 0x612 <esp8266_connect+0x136>
     61a:	26 e0       	ldi	r18, 0x06	; 6
     61c:	20 93 cd 22 	sts	0x22CD, r18
     620:	0e 94 15 11 	call	0x222a	; 0x222a <uart_write_str>
     624:	9f ef       	ldi	r25, 0xFF	; 255
     626:	e3 ed       	ldi	r30, 0xD3	; 211
     628:	f0 e3       	ldi	r31, 0x30	; 48
     62a:	91 50       	subi	r25, 0x01	; 1
     62c:	e0 40       	sbci	r30, 0x00	; 0
     62e:	f0 40       	sbci	r31, 0x00	; 0
     630:	e1 f7       	brne	.-8      	; 0x62a <esp8266_connect+0x14e>
     632:	00 c0       	rjmp	.+0      	; 0x634 <esp8266_connect+0x158>
     634:	00 00       	nop
     636:	80 91 cd 22 	lds	r24, 0x22CD
     63a:	00 e0       	ldi	r16, 0x00	; 0
     63c:	10 e0       	ldi	r17, 0x00	; 0
     63e:	96 e0       	ldi	r25, 0x06	; 6
     640:	d9 2e       	mov	r13, r25
     642:	18 c0       	rjmp	.+48     	; 0x674 <esp8266_connect+0x198>
     644:	d0 92 cd 22 	sts	0x22CD, r13
     648:	83 e8       	ldi	r24, 0x83	; 131
     64a:	90 e2       	ldi	r25, 0x20	; 32
     64c:	0e 94 15 11 	call	0x222a	; 0x222a <uart_write_str>
     650:	2f ef       	ldi	r18, 0xFF	; 255
     652:	87 ea       	ldi	r24, 0xA7	; 167
     654:	91 e6       	ldi	r25, 0x61	; 97
     656:	21 50       	subi	r18, 0x01	; 1
     658:	80 40       	sbci	r24, 0x00	; 0
     65a:	90 40       	sbci	r25, 0x00	; 0
     65c:	e1 f7       	brne	.-8      	; 0x656 <esp8266_connect+0x17a>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <esp8266_connect+0x184>
     660:	00 00       	nop
     662:	0f 5f       	subi	r16, 0xFF	; 255
     664:	1f 4f       	sbci	r17, 0xFF	; 255
     666:	0e 33       	cpi	r16, 0x3E	; 62
     668:	11 05       	cpc	r17, r1
     66a:	89 f1       	breq	.+98     	; 0x6ce <esp8266_connect+0x1f2>
     66c:	80 91 cd 22 	lds	r24, 0x22CD
     670:	88 23       	and	r24, r24
     672:	11 f0       	breq	.+4      	; 0x678 <esp8266_connect+0x19c>
     674:	81 30       	cpi	r24, 0x01	; 1
     676:	31 f7       	brne	.-52     	; 0x644 <esp8266_connect+0x168>
     678:	ef ef       	ldi	r30, 0xFF	; 255
     67a:	f7 ea       	ldi	r31, 0xA7	; 167
     67c:	21 e6       	ldi	r18, 0x61	; 97
     67e:	e1 50       	subi	r30, 0x01	; 1
     680:	f0 40       	sbci	r31, 0x00	; 0
     682:	20 40       	sbci	r18, 0x00	; 0
     684:	e1 f7       	brne	.-8      	; 0x67e <esp8266_connect+0x1a2>
     686:	00 c0       	rjmp	.+0      	; 0x688 <esp8266_connect+0x1ac>
     688:	00 00       	nop
     68a:	0d 33       	cpi	r16, 0x3D	; 61
     68c:	11 05       	cpc	r17, r1
     68e:	f8 f4       	brcc	.+62     	; 0x6ce <esp8266_connect+0x1f2>
     690:	80 91 cd 22 	lds	r24, 0x22CD
     694:	0f 5f       	subi	r16, 0xFF	; 255
     696:	1f 4f       	sbci	r17, 0xFF	; 255
     698:	88 23       	and	r24, r24
     69a:	11 f0       	breq	.+4      	; 0x6a0 <esp8266_connect+0x1c4>
     69c:	85 30       	cpi	r24, 0x05	; 5
     69e:	61 f7       	brne	.-40     	; 0x678 <esp8266_connect+0x19c>
     6a0:	80 91 84 22 	lds	r24, 0x2284
     6a4:	81 11       	cpse	r24, r1
     6a6:	15 c0       	rjmp	.+42     	; 0x6d2 <esp8266_connect+0x1f6>
     6a8:	86 e0       	ldi	r24, 0x06	; 6
     6aa:	80 93 cd 22 	sts	0x22CD, r24
     6ae:	84 e8       	ldi	r24, 0x84	; 132
     6b0:	90 e2       	ldi	r25, 0x20	; 32
     6b2:	0e 94 15 11 	call	0x222a	; 0x222a <uart_write_str>
     6b6:	ff ef       	ldi	r31, 0xFF	; 255
     6b8:	27 ea       	ldi	r18, 0xA7	; 167
     6ba:	81 e6       	ldi	r24, 0x61	; 97
     6bc:	f1 50       	subi	r31, 0x01	; 1
     6be:	20 40       	sbci	r18, 0x00	; 0
     6c0:	80 40       	sbci	r24, 0x00	; 0
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <esp8266_connect+0x1e0>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <esp8266_connect+0x1ea>
     6c6:	00 00       	nop
     6c8:	80 91 cd 22 	lds	r24, 0x22CD
     6cc:	48 cf       	rjmp	.-368    	; 0x55e <esp8266_connect+0x82>
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	46 cf       	rjmp	.-372    	; 0x55e <esp8266_connect+0x82>
     6d2:	0a eb       	ldi	r16, 0xBA	; 186
     6d4:	11 e2       	ldi	r17, 0x21	; 33
     6d6:	f8 01       	movw	r30, r16
     6d8:	01 90       	ld	r0, Z+
     6da:	00 20       	and	r0, r0
     6dc:	e9 f7       	brne	.-6      	; 0x6d8 <esp8266_connect+0x1fc>
     6de:	af 01       	movw	r20, r30
     6e0:	4a 5c       	subi	r20, 0xCA	; 202
     6e2:	51 42       	sbci	r21, 0x21	; 33
     6e4:	b8 01       	movw	r22, r16
     6e6:	c7 01       	movw	r24, r14
     6e8:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <strncpy>
     6ec:	10 92 84 22 	sts	0x2284, r1
     6f0:	10 92 82 22 	sts	0x2282, r1
     6f4:	10 92 83 22 	sts	0x2283, r1
     6f8:	88 ec       	ldi	r24, 0xC8	; 200
     6fa:	f8 01       	movw	r30, r16
     6fc:	11 92       	st	Z+, r1
     6fe:	8a 95       	dec	r24
     700:	e9 f7       	brne	.-6      	; 0x6fc <esp8266_connect+0x220>
     702:	d2 cf       	rjmp	.-92     	; 0x6a8 <esp8266_connect+0x1cc>

00000704 <__vector_88>:
 _delay_ms (100);
 // drop to here and wait for next request.
}
*/

ISR(USARTD0_RXC_vect) {
     704:	1f 92       	push	r1
     706:	0f 92       	push	r0
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	0f 92       	push	r0
     70c:	11 24       	eor	r1, r1
     70e:	0b b6       	in	r0, 0x3b	; 59
     710:	0f 92       	push	r0
     712:	2f 93       	push	r18
     714:	3f 93       	push	r19
     716:	4f 93       	push	r20
     718:	5f 93       	push	r21
     71a:	6f 93       	push	r22
     71c:	7f 93       	push	r23
     71e:	8f 93       	push	r24
     720:	9f 93       	push	r25
     722:	af 93       	push	r26
     724:	bf 93       	push	r27
     726:	ef 93       	push	r30
     728:	ff 93       	push	r31
	
	char rx_temp = USARTD0.DATA;
     72a:	40 91 a0 09 	lds	r20, 0x09A0
	
	if (rx_temp == '\n') {
     72e:	4a 30       	cpi	r20, 0x0A	; 10
     730:	11 f1       	breq	.+68     	; 0x776 <__vector_88+0x72>
			//Flush buffer
			rx_ptr = 0;
			memset(rx_buffer, 0, RX_BUFFER);	
		}
	} else {
		rx_buffer[rx_ptr++] = rx_temp;
     732:	80 91 82 22 	lds	r24, 0x2282
     736:	90 91 83 22 	lds	r25, 0x2283
     73a:	9c 01       	movw	r18, r24
     73c:	2f 5f       	subi	r18, 0xFF	; 255
     73e:	3f 4f       	sbci	r19, 0xFF	; 255
     740:	20 93 82 22 	sts	0x2282, r18
     744:	30 93 83 22 	sts	0x2283, r19
     748:	fc 01       	movw	r30, r24
     74a:	e6 54       	subi	r30, 0x46	; 70
     74c:	fe 4d       	sbci	r31, 0xDE	; 222
     74e:	40 83       	st	Z, r20
	}
     750:	ff 91       	pop	r31
     752:	ef 91       	pop	r30
     754:	bf 91       	pop	r27
     756:	af 91       	pop	r26
     758:	9f 91       	pop	r25
     75a:	8f 91       	pop	r24
     75c:	7f 91       	pop	r23
     75e:	6f 91       	pop	r22
     760:	5f 91       	pop	r21
     762:	4f 91       	pop	r20
     764:	3f 91       	pop	r19
     766:	2f 91       	pop	r18
     768:	0f 90       	pop	r0
     76a:	0b be       	out	0x3b, r0	; 59
     76c:	0f 90       	pop	r0
     76e:	0f be       	out	0x3f, r0	; 63
     770:	0f 90       	pop	r0
     772:	1f 90       	pop	r1
     774:	18 95       	reti
ISR(USARTD0_RXC_vect) {
	
	char rx_temp = USARTD0.DATA;
	
	if (rx_temp == '\n') {
		if (strstr(rx_buffer,"OK")) {
     776:	68 e9       	ldi	r22, 0x98	; 152
     778:	70 e2       	ldi	r23, 0x20	; 32
     77a:	8a eb       	ldi	r24, 0xBA	; 186
     77c:	91 e2       	ldi	r25, 0x21	; 33
     77e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <strstr>
     782:	89 2b       	or	r24, r25
     784:	79 f0       	breq	.+30     	; 0x7a4 <__vector_88+0xa0>
			status = ESP8266_SUCCESS;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	80 93 cd 22 	sts	0x22CD, r24
			status = ESP8266_CONNECT;
		} else if (strstr(rx_buffer,"CLOSED")) {
			status = ESP8266_CLOSED;
		}
		
		if (strstr(rx_buffer,"{")) {
     78c:	6b e7       	ldi	r22, 0x7B	; 123
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	8a eb       	ldi	r24, 0xBA	; 186
     792:	91 e2       	ldi	r25, 0x21	; 33
     794:	0e 94 d7 12 	call	0x25ae	; 0x25ae <strchr>
     798:	89 2b       	or	r24, r25
     79a:	79 f0       	breq	.+30     	; 0x7ba <__vector_88+0xb6>
			json_found = true;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	80 93 84 22 	sts	0x2284, r24
     7a2:	d6 cf       	rjmp	.-84     	; 0x750 <__vector_88+0x4c>
	char rx_temp = USARTD0.DATA;
	
	if (rx_temp == '\n') {
		if (strstr(rx_buffer,"OK")) {
			status = ESP8266_SUCCESS;
		} else if (strstr(rx_buffer,"ERROR")) {
     7a4:	6a eb       	ldi	r22, 0xBA	; 186
     7a6:	70 e2       	ldi	r23, 0x20	; 32
     7a8:	8a eb       	ldi	r24, 0xBA	; 186
     7aa:	91 e2       	ldi	r25, 0x21	; 33
     7ac:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <strstr>
     7b0:	89 2b       	or	r24, r25
     7b2:	79 f0       	breq	.+30     	; 0x7d2 <__vector_88+0xce>
			status = ESP8266_ERROR;
     7b4:	10 92 cd 22 	sts	0x22CD, r1
     7b8:	e9 cf       	rjmp	.-46     	; 0x78c <__vector_88+0x88>
		
		if (strstr(rx_buffer,"{")) {
			json_found = true;
		} else {
			//Flush buffer
			rx_ptr = 0;
     7ba:	10 92 82 22 	sts	0x2282, r1
     7be:	10 92 83 22 	sts	0x2283, r1
			memset(rx_buffer, 0, RX_BUFFER);	
     7c2:	88 ec       	ldi	r24, 0xC8	; 200
     7c4:	ea eb       	ldi	r30, 0xBA	; 186
     7c6:	f1 e2       	ldi	r31, 0x21	; 33
     7c8:	df 01       	movw	r26, r30
     7ca:	1d 92       	st	X+, r1
     7cc:	8a 95       	dec	r24
     7ce:	e9 f7       	brne	.-6      	; 0x7ca <__vector_88+0xc6>
     7d0:	bf cf       	rjmp	.-130    	; 0x750 <__vector_88+0x4c>
	if (rx_temp == '\n') {
		if (strstr(rx_buffer,"OK")) {
			status = ESP8266_SUCCESS;
		} else if (strstr(rx_buffer,"ERROR")) {
			status = ESP8266_ERROR;
		} else if (strstr(rx_buffer,"CONNECT")) {
     7d2:	6e ef       	ldi	r22, 0xFE	; 254
     7d4:	70 e2       	ldi	r23, 0x20	; 32
     7d6:	8a eb       	ldi	r24, 0xBA	; 186
     7d8:	91 e2       	ldi	r25, 0x21	; 33
     7da:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <strstr>
     7de:	89 2b       	or	r24, r25
     7e0:	21 f0       	breq	.+8      	; 0x7ea <__vector_88+0xe6>
			status = ESP8266_CONNECT;
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	80 93 cd 22 	sts	0x22CD, r24
     7e8:	d1 cf       	rjmp	.-94     	; 0x78c <__vector_88+0x88>
		} else if (strstr(rx_buffer,"CLOSED")) {
     7ea:	66 e0       	ldi	r22, 0x06	; 6
     7ec:	71 e2       	ldi	r23, 0x21	; 33
     7ee:	8a eb       	ldi	r24, 0xBA	; 186
     7f0:	91 e2       	ldi	r25, 0x21	; 33
     7f2:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <strstr>
     7f6:	89 2b       	or	r24, r25
     7f8:	49 f2       	breq	.-110    	; 0x78c <__vector_88+0x88>
			status = ESP8266_CLOSED;
     7fa:	85 e0       	ldi	r24, 0x05	; 5
     7fc:	80 93 cd 22 	sts	0x22CD, r24
     800:	c5 cf       	rjmp	.-118    	; 0x78c <__vector_88+0x88>

00000802 <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
     802:	1f 92       	push	r1
     804:	0f 92       	push	r0
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	0f 92       	push	r0
     80a:	11 24       	eor	r1, r1
     80c:	0b b6       	in	r0, 0x3b	; 59
     80e:	0f 92       	push	r0
     810:	cf 92       	push	r12
     812:	df 92       	push	r13
     814:	ef 92       	push	r14
     816:	ff 92       	push	r15
     818:	2f 93       	push	r18
     81a:	3f 93       	push	r19
     81c:	4f 93       	push	r20
     81e:	5f 93       	push	r21
     820:	6f 93       	push	r22
     822:	7f 93       	push	r23
     824:	8f 93       	push	r24
     826:	9f 93       	push	r25
     828:	af 93       	push	r26
     82a:	bf 93       	push	r27
     82c:	ef 93       	push	r30
     82e:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
     830:	e0 91 0f 23 	lds	r30, 0x230F
     834:	f0 91 10 23 	lds	r31, 0x2310
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	static uint16_t prev = 0;
		
	if (!fcb) return;
     838:	30 97       	sbiw	r30, 0x00	; 0
     83a:	09 f4       	brne	.+2      	; 0x83e <__vector_14+0x3c>
     83c:	61 c0       	rjmp	.+194    	; 0x900 <__vector_14+0xfe>
	ct = fcb->ct; ri = fcb->ri;
     83e:	46 81       	ldd	r20, Z+6	; 0x06
     840:	57 81       	ldd	r21, Z+7	; 0x07
     842:	22 81       	ldd	r18, Z+2	; 0x02
     844:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
     846:	a0 85       	ldd	r26, Z+8	; 0x08
     848:	b1 85       	ldd	r27, Z+9	; 0x09
     84a:	a2 0f       	add	r26, r18
     84c:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
     84e:	80 81       	ld	r24, Z
     850:	91 81       	ldd	r25, Z+1	; 0x01
     852:	81 30       	cpi	r24, 0x01	; 1
     854:	91 05       	cpc	r25, r1
     856:	89 f0       	breq	.+34     	; 0x87a <__vector_14+0x78>
     858:	08 f4       	brcc	.+2      	; 0x85c <__vector_14+0x5a>
     85a:	69 c0       	rjmp	.+210    	; 0x92e <__vector_14+0x12c>
     85c:	02 97       	sbiw	r24, 0x02	; 2
     85e:	09 f0       	breq	.+2      	; 0x862 <__vector_14+0x60>
     860:	6f c0       	rjmp	.+222    	; 0x940 <__vector_14+0x13e>
		if (ct < 2) return;
		l1 = buff[0]; r2 = buff[1];
		ct -= 2; ri += 2;
		break;
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
     862:	42 30       	cpi	r20, 0x02	; 2
     864:	51 05       	cpc	r21, r1
     866:	08 f4       	brcc	.+2      	; 0x86a <__vector_14+0x68>
     868:	4b c0       	rjmp	.+150    	; 0x900 <__vector_14+0xfe>
		l1 = r2 = buff[1] + 128;
     86a:	11 96       	adiw	r26, 0x01	; 1
     86c:	6c 91       	ld	r22, X
     86e:	60 58       	subi	r22, 0x80	; 128
		ct -= 2; ri += 2;
     870:	42 50       	subi	r20, 0x02	; 2
     872:	51 09       	sbc	r21, r1
     874:	2e 5f       	subi	r18, 0xFE	; 254
     876:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
     878:	09 c0       	rjmp	.+18     	; 0x88c <__vector_14+0x8a>
		if (ct < 1) return;
		l1 = r2 = buff[0];
		ct -= 1; ri += 1;
		break;
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
     87a:	42 30       	cpi	r20, 0x02	; 2
     87c:	51 05       	cpc	r21, r1
     87e:	08 f4       	brcc	.+2      	; 0x882 <__vector_14+0x80>
     880:	3f c0       	rjmp	.+126    	; 0x900 <__vector_14+0xfe>
		l1 = buff[0]; r2 = buff[1];
     882:	6c 91       	ld	r22, X
		ct -= 2; ri += 2;
     884:	42 50       	subi	r20, 0x02	; 2
     886:	51 09       	sbc	r21, r1
     888:	2e 5f       	subi	r18, 0xFE	; 254
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
		ri += 4;
	}
	fcb->ct = ct;
     88c:	46 83       	std	Z+6, r20	; 0x06
     88e:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
     890:	82 85       	ldd	r24, Z+10	; 0x0a
     892:	93 85       	ldd	r25, Z+11	; 0x0b
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	82 23       	and	r24, r18
     898:	93 23       	and	r25, r19
     89a:	82 83       	std	Z+2, r24	; 0x02
     89c:	93 83       	std	Z+3, r25	; 0x03
	result = integer + 0x7FFF;
	return(result >> 4);
}

static inline uint8_t smooth(uint8_t data, float filterVal, float smoothedVal){
	return (int)(((data * (1 - filterVal)) + (smoothedVal  *  filterVal)));
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 ca 11 	call	0x2394	; 0x2394 <__floatsisf>
     8a8:	2a e9       	ldi	r18, 0x9A	; 154
     8aa:	39 e9       	ldi	r19, 0x99	; 153
     8ac:	49 e1       	ldi	r20, 0x19	; 25
     8ae:	5f e3       	ldi	r21, 0x3F	; 63
     8b0:	0e 94 56 12 	call	0x24ac	; 0x24ac <__mulsf3>
     8b4:	6b 01       	movw	r12, r22
     8b6:	7c 01       	movw	r14, r24
		ri += 4;
	}
	fcb->ct = ct;
	fcb->ri = ri & (fcb->sz_buff - 1);
	
	uint16_t data = smooth(l1,0.4,data);
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	cb 01       	movw	r24, r22
     8be:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatunsisf>
	result = integer + 0x7FFF;
	return(result >> 4);
}

static inline uint8_t smooth(uint8_t data, float filterVal, float smoothedVal){
	return (int)(((data * (1 - filterVal)) + (smoothedVal  *  filterVal)));
     8c2:	2d ec       	ldi	r18, 0xCD	; 205
     8c4:	3c ec       	ldi	r19, 0xCC	; 204
     8c6:	4c ec       	ldi	r20, 0xCC	; 204
     8c8:	5e e3       	ldi	r21, 0x3E	; 62
     8ca:	0e 94 56 12 	call	0x24ac	; 0x24ac <__mulsf3>
     8ce:	9b 01       	movw	r18, r22
     8d0:	ac 01       	movw	r20, r24
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	0e 94 33 11 	call	0x2266	; 0x2266 <__addsf3>
     8da:	0e 94 97 11 	call	0x232e	; 0x232e <__fixsfsi>
     8de:	77 27       	eor	r23, r23
	fcb->ri = ri & (fcb->sz_buff - 1);
	
	uint16_t data = smooth(l1,0.4,data);
	//uint8_t data = l1*0.2;
	
	DACB.CH0DATA = (data + prev)/2;//<< 2;
     8e0:	80 91 85 22 	lds	r24, 0x2285
     8e4:	90 91 86 22 	lds	r25, 0x2286
     8e8:	86 0f       	add	r24, r22
     8ea:	97 1f       	adc	r25, r23
     8ec:	96 95       	lsr	r25
     8ee:	87 95       	ror	r24
     8f0:	80 93 38 03 	sts	0x0338, r24
     8f4:	90 93 39 03 	sts	0x0339, r25
	//DACB.CH1DATA = 255-data;//<< 2;
	
	prev = data;
     8f8:	60 93 85 22 	sts	0x2285, r22
     8fc:	70 93 86 22 	sts	0x2286, r23
}
     900:	ff 91       	pop	r31
     902:	ef 91       	pop	r30
     904:	bf 91       	pop	r27
     906:	af 91       	pop	r26
     908:	9f 91       	pop	r25
     90a:	8f 91       	pop	r24
     90c:	7f 91       	pop	r23
     90e:	6f 91       	pop	r22
     910:	5f 91       	pop	r21
     912:	4f 91       	pop	r20
     914:	3f 91       	pop	r19
     916:	2f 91       	pop	r18
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	0f 90       	pop	r0
     922:	0b be       	out	0x3b, r0	; 59
     924:	0f 90       	pop	r0
     926:	0f be       	out	0x3f, r0	; 63
     928:	0f 90       	pop	r0
     92a:	1f 90       	pop	r1
     92c:	18 95       	reti
	ct = fcb->ct; ri = fcb->ri;
	buff = fcb->buff + ri;

	switch (fcb->mode) {
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
     92e:	41 15       	cp	r20, r1
     930:	51 05       	cpc	r21, r1
     932:	31 f3       	breq	.-52     	; 0x900 <__vector_14+0xfe>
		l1 = r2 = buff[0];
     934:	6c 91       	ld	r22, X
		ct -= 1; ri += 1;
     936:	41 50       	subi	r20, 0x01	; 1
     938:	51 09       	sbc	r21, r1
     93a:	2f 5f       	subi	r18, 0xFF	; 255
     93c:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
     93e:	a6 cf       	rjmp	.-180    	; 0x88c <__vector_14+0x8a>
		if (ct < 2) return;
		l1 = r2 = buff[1] + 128;
		ct -= 2; ri += 2;
		break;
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
     940:	44 30       	cpi	r20, 0x04	; 4
     942:	51 05       	cpc	r21, r1
     944:	e8 f2       	brcs	.-70     	; 0x900 <__vector_14+0xfe>
		l2 = buff[0]; 
		l1 = buff[1];
     946:	11 96       	adiw	r26, 0x01	; 1
     948:	6c 91       	ld	r22, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
     94a:	44 50       	subi	r20, 0x04	; 4
     94c:	51 09       	sbc	r21, r1
		ri += 4;
     94e:	2c 5f       	subi	r18, 0xFC	; 252
     950:	3f 4f       	sbci	r19, 0xFF	; 255
     952:	9c cf       	rjmp	.-200    	; 0x88c <__vector_14+0x8a>

00000954 <ht1632c_setup>:
void ht1632c_fill_screen() {

	for (uint8_t i=0; i<(WIDTH*HEIGHT/8); i++) {
		ledmatrix[i] = 0xFF;
	}
	ht1632c_refresh_screen();
     954:	41 e0       	ldi	r20, 0x01	; 1
     956:	40 93 81 06 	sts	0x0681, r20
     95a:	40 93 85 06 	sts	0x0685, r20
     95e:	24 e0       	ldi	r18, 0x04	; 4
     960:	20 93 81 06 	sts	0x0681, r18
     964:	20 93 85 06 	sts	0x0685, r18
     968:	38 e0       	ldi	r19, 0x08	; 8
     96a:	30 93 81 06 	sts	0x0681, r19
     96e:	40 93 86 06 	sts	0x0686, r20
     972:	30 93 81 06 	sts	0x0681, r19
     976:	20 93 86 06 	sts	0x0686, r18
     97a:	30 93 85 06 	sts	0x0685, r19
     97e:	20 93 85 06 	sts	0x0685, r18
     982:	20 93 86 06 	sts	0x0686, r18
     986:	30 93 86 06 	sts	0x0686, r19
     98a:	20 93 85 06 	sts	0x0685, r18
     98e:	20 93 86 06 	sts	0x0686, r18
     992:	30 93 86 06 	sts	0x0686, r19
     996:	20 93 85 06 	sts	0x0685, r18
     99a:	20 93 86 06 	sts	0x0686, r18
     99e:	30 93 86 06 	sts	0x0686, r19
     9a2:	20 93 85 06 	sts	0x0685, r18
     9a6:	20 93 86 06 	sts	0x0686, r18
     9aa:	30 93 86 06 	sts	0x0686, r19
     9ae:	20 93 85 06 	sts	0x0685, r18
     9b2:	20 93 86 06 	sts	0x0686, r18
     9b6:	30 93 86 06 	sts	0x0686, r19
     9ba:	20 93 85 06 	sts	0x0685, r18
     9be:	20 93 86 06 	sts	0x0686, r18
     9c2:	30 93 86 06 	sts	0x0686, r19
     9c6:	20 93 85 06 	sts	0x0685, r18
     9ca:	20 93 86 06 	sts	0x0686, r18
     9ce:	30 93 86 06 	sts	0x0686, r19
     9d2:	20 93 85 06 	sts	0x0685, r18
     9d6:	20 93 86 06 	sts	0x0686, r18
     9da:	30 93 86 06 	sts	0x0686, r19
     9de:	20 93 85 06 	sts	0x0685, r18
     9e2:	20 93 86 06 	sts	0x0686, r18
     9e6:	30 93 86 06 	sts	0x0686, r19
     9ea:	20 93 85 06 	sts	0x0685, r18
     9ee:	20 93 86 06 	sts	0x0686, r18
     9f2:	30 93 85 06 	sts	0x0685, r19
     9f6:	20 93 85 06 	sts	0x0685, r18
     9fa:	20 93 86 06 	sts	0x0686, r18
     9fe:	30 93 86 06 	sts	0x0686, r19
     a02:	20 93 85 06 	sts	0x0685, r18
     a06:	30 93 86 06 	sts	0x0686, r19
     a0a:	40 93 85 06 	sts	0x0685, r20
     a0e:	40 93 86 06 	sts	0x0686, r20
     a12:	30 93 81 06 	sts	0x0681, r19
     a16:	20 93 86 06 	sts	0x0686, r18
     a1a:	30 93 85 06 	sts	0x0685, r19
     a1e:	20 93 85 06 	sts	0x0685, r18
     a22:	20 93 86 06 	sts	0x0686, r18
     a26:	30 93 86 06 	sts	0x0686, r19
     a2a:	20 93 85 06 	sts	0x0685, r18
     a2e:	20 93 86 06 	sts	0x0686, r18
     a32:	30 93 86 06 	sts	0x0686, r19
     a36:	20 93 85 06 	sts	0x0685, r18
     a3a:	20 93 86 06 	sts	0x0686, r18
     a3e:	30 93 86 06 	sts	0x0686, r19
     a42:	20 93 85 06 	sts	0x0685, r18
     a46:	20 93 86 06 	sts	0x0686, r18
     a4a:	30 93 86 06 	sts	0x0686, r19
     a4e:	20 93 85 06 	sts	0x0685, r18
     a52:	20 93 86 06 	sts	0x0686, r18
     a56:	30 93 86 06 	sts	0x0686, r19
     a5a:	20 93 85 06 	sts	0x0685, r18
     a5e:	20 93 86 06 	sts	0x0686, r18
     a62:	30 93 86 06 	sts	0x0686, r19
     a66:	20 93 85 06 	sts	0x0685, r18
     a6a:	20 93 86 06 	sts	0x0686, r18
     a6e:	30 93 86 06 	sts	0x0686, r19
     a72:	20 93 85 06 	sts	0x0685, r18
     a76:	20 93 86 06 	sts	0x0686, r18
     a7a:	30 93 86 06 	sts	0x0686, r19
     a7e:	20 93 85 06 	sts	0x0685, r18
     a82:	20 93 86 06 	sts	0x0686, r18
     a86:	30 93 85 06 	sts	0x0685, r19
     a8a:	20 93 85 06 	sts	0x0685, r18
     a8e:	20 93 86 06 	sts	0x0686, r18
     a92:	30 93 85 06 	sts	0x0685, r19
     a96:	20 93 85 06 	sts	0x0685, r18
     a9a:	20 93 86 06 	sts	0x0686, r18
     a9e:	30 93 86 06 	sts	0x0686, r19
     aa2:	20 93 85 06 	sts	0x0685, r18
     aa6:	30 93 86 06 	sts	0x0686, r19
     aaa:	40 93 85 06 	sts	0x0685, r20
     aae:	40 93 86 06 	sts	0x0686, r20
     ab2:	30 93 81 06 	sts	0x0681, r19
     ab6:	20 93 86 06 	sts	0x0686, r18
     aba:	30 93 85 06 	sts	0x0685, r19
     abe:	20 93 85 06 	sts	0x0685, r18
     ac2:	20 93 86 06 	sts	0x0686, r18
     ac6:	30 93 86 06 	sts	0x0686, r19
     aca:	20 93 85 06 	sts	0x0685, r18
     ace:	20 93 86 06 	sts	0x0686, r18
     ad2:	30 93 86 06 	sts	0x0686, r19
     ad6:	20 93 85 06 	sts	0x0685, r18
     ada:	20 93 86 06 	sts	0x0686, r18
     ade:	30 93 86 06 	sts	0x0686, r19
     ae2:	20 93 85 06 	sts	0x0685, r18
     ae6:	20 93 86 06 	sts	0x0686, r18
     aea:	30 93 86 06 	sts	0x0686, r19
     aee:	20 93 85 06 	sts	0x0685, r18
     af2:	20 93 86 06 	sts	0x0686, r18
     af6:	30 93 86 06 	sts	0x0686, r19
     afa:	20 93 85 06 	sts	0x0685, r18
     afe:	20 93 86 06 	sts	0x0686, r18
     b02:	30 93 86 06 	sts	0x0686, r19
     b06:	20 93 85 06 	sts	0x0685, r18
     b0a:	20 93 86 06 	sts	0x0686, r18
     b0e:	30 93 85 06 	sts	0x0685, r19
     b12:	20 93 85 06 	sts	0x0685, r18
     b16:	20 93 86 06 	sts	0x0686, r18
     b1a:	30 93 86 06 	sts	0x0686, r19
     b1e:	20 93 85 06 	sts	0x0685, r18
     b22:	20 93 86 06 	sts	0x0686, r18
     b26:	30 93 86 06 	sts	0x0686, r19
     b2a:	20 93 85 06 	sts	0x0685, r18
     b2e:	20 93 86 06 	sts	0x0686, r18
     b32:	30 93 86 06 	sts	0x0686, r19
     b36:	20 93 85 06 	sts	0x0685, r18
     b3a:	20 93 86 06 	sts	0x0686, r18
     b3e:	30 93 86 06 	sts	0x0686, r19
     b42:	20 93 85 06 	sts	0x0685, r18
     b46:	30 93 86 06 	sts	0x0686, r19
     b4a:	40 93 85 06 	sts	0x0685, r20
     b4e:	40 93 86 06 	sts	0x0686, r20
     b52:	30 93 81 06 	sts	0x0681, r19
     b56:	20 93 86 06 	sts	0x0686, r18
     b5a:	30 93 85 06 	sts	0x0685, r19
     b5e:	20 93 85 06 	sts	0x0685, r18
     b62:	20 93 86 06 	sts	0x0686, r18
     b66:	30 93 86 06 	sts	0x0686, r19
     b6a:	20 93 85 06 	sts	0x0685, r18
     b6e:	20 93 86 06 	sts	0x0686, r18
     b72:	30 93 86 06 	sts	0x0686, r19
     b76:	20 93 85 06 	sts	0x0685, r18
     b7a:	20 93 86 06 	sts	0x0686, r18
     b7e:	30 93 86 06 	sts	0x0686, r19
     b82:	20 93 85 06 	sts	0x0685, r18
     b86:	20 93 86 06 	sts	0x0686, r18
     b8a:	30 93 86 06 	sts	0x0686, r19
     b8e:	20 93 85 06 	sts	0x0685, r18
     b92:	20 93 86 06 	sts	0x0686, r18
     b96:	30 93 86 06 	sts	0x0686, r19
     b9a:	20 93 85 06 	sts	0x0685, r18
     b9e:	20 93 86 06 	sts	0x0686, r18
     ba2:	30 93 85 06 	sts	0x0685, r19
     ba6:	20 93 85 06 	sts	0x0685, r18
     baa:	20 93 86 06 	sts	0x0686, r18
     bae:	30 93 86 06 	sts	0x0686, r19
     bb2:	20 93 85 06 	sts	0x0685, r18
     bb6:	20 93 86 06 	sts	0x0686, r18
     bba:	30 93 85 06 	sts	0x0685, r19
     bbe:	20 93 85 06 	sts	0x0685, r18
     bc2:	20 93 86 06 	sts	0x0686, r18
     bc6:	30 93 86 06 	sts	0x0686, r19
     bca:	20 93 85 06 	sts	0x0685, r18
     bce:	20 93 86 06 	sts	0x0686, r18
     bd2:	30 93 86 06 	sts	0x0686, r19
     bd6:	20 93 85 06 	sts	0x0685, r18
     bda:	20 93 86 06 	sts	0x0686, r18
     bde:	30 93 86 06 	sts	0x0686, r19
     be2:	20 93 85 06 	sts	0x0685, r18
     be6:	30 93 86 06 	sts	0x0686, r19
     bea:	40 93 85 06 	sts	0x0685, r20
     bee:	40 93 86 06 	sts	0x0686, r20
     bf2:	30 93 81 06 	sts	0x0681, r19
     bf6:	20 93 86 06 	sts	0x0686, r18
     bfa:	30 93 85 06 	sts	0x0685, r19
     bfe:	20 93 85 06 	sts	0x0685, r18
     c02:	20 93 86 06 	sts	0x0686, r18
     c06:	30 93 86 06 	sts	0x0686, r19
     c0a:	20 93 85 06 	sts	0x0685, r18
     c0e:	20 93 86 06 	sts	0x0686, r18
     c12:	30 93 86 06 	sts	0x0686, r19
     c16:	20 93 85 06 	sts	0x0685, r18
     c1a:	20 93 86 06 	sts	0x0686, r18
     c1e:	30 93 86 06 	sts	0x0686, r19
     c22:	20 93 85 06 	sts	0x0685, r18
     c26:	20 93 86 06 	sts	0x0686, r18
     c2a:	30 93 86 06 	sts	0x0686, r19
     c2e:	20 93 85 06 	sts	0x0685, r18
     c32:	20 93 86 06 	sts	0x0686, r18
     c36:	30 93 86 06 	sts	0x0686, r19
     c3a:	20 93 85 06 	sts	0x0685, r18
     c3e:	20 93 86 06 	sts	0x0686, r18
     c42:	30 93 85 06 	sts	0x0685, r19
     c46:	20 93 85 06 	sts	0x0685, r18
     c4a:	20 93 86 06 	sts	0x0686, r18
     c4e:	30 93 85 06 	sts	0x0685, r19
     c52:	20 93 85 06 	sts	0x0685, r18
     c56:	20 93 86 06 	sts	0x0686, r18
     c5a:	30 93 86 06 	sts	0x0686, r19
     c5e:	20 93 85 06 	sts	0x0685, r18
     c62:	20 93 86 06 	sts	0x0686, r18
     c66:	30 93 86 06 	sts	0x0686, r19
     c6a:	20 93 85 06 	sts	0x0685, r18
     c6e:	20 93 86 06 	sts	0x0686, r18
     c72:	30 93 86 06 	sts	0x0686, r19
     c76:	20 93 85 06 	sts	0x0685, r18
     c7a:	20 93 86 06 	sts	0x0686, r18
     c7e:	30 93 86 06 	sts	0x0686, r19
     c82:	20 93 85 06 	sts	0x0685, r18
     c86:	30 93 86 06 	sts	0x0686, r19
     c8a:	40 93 85 06 	sts	0x0685, r20
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	94 60       	ori	r25, 0x04	; 4
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	40 93 86 06 	sts	0x0686, r20
     c9a:	30 93 81 06 	sts	0x0681, r19
     c9e:	20 93 86 06 	sts	0x0686, r18
     ca2:	30 93 85 06 	sts	0x0685, r19
     ca6:	20 93 85 06 	sts	0x0685, r18
     caa:	20 93 86 06 	sts	0x0686, r18
     cae:	30 93 86 06 	sts	0x0686, r19
     cb2:	20 93 85 06 	sts	0x0685, r18
     cb6:	20 93 86 06 	sts	0x0686, r18
     cba:	30 93 86 06 	sts	0x0686, r19
     cbe:	20 93 85 06 	sts	0x0685, r18
     cc2:	20 93 86 06 	sts	0x0686, r18
     cc6:	90 fd       	sbrc	r25, 0
     cc8:	e7 c0       	rjmp	.+462    	; 0xe98 <ht1632c_setup+0x544>
     cca:	30 93 86 06 	sts	0x0686, r19
     cce:	24 e0       	ldi	r18, 0x04	; 4
     cd0:	20 93 85 06 	sts	0x0685, r18
     cd4:	20 93 86 06 	sts	0x0686, r18
     cd8:	28 e0       	ldi	r18, 0x08	; 8
     cda:	87 fd       	sbrc	r24, 7
     cdc:	9e c0       	rjmp	.+316    	; 0xe1a <ht1632c_setup+0x4c6>
     cde:	20 93 86 06 	sts	0x0686, r18
     ce2:	24 e0       	ldi	r18, 0x04	; 4
     ce4:	20 93 85 06 	sts	0x0685, r18
     ce8:	20 93 86 06 	sts	0x0686, r18
     cec:	28 e0       	ldi	r18, 0x08	; 8
     cee:	86 fd       	sbrc	r24, 6
     cf0:	9e c0       	rjmp	.+316    	; 0xe2e <ht1632c_setup+0x4da>
     cf2:	20 93 86 06 	sts	0x0686, r18
     cf6:	24 e0       	ldi	r18, 0x04	; 4
     cf8:	20 93 85 06 	sts	0x0685, r18
     cfc:	20 93 86 06 	sts	0x0686, r18
     d00:	28 e0       	ldi	r18, 0x08	; 8
     d02:	85 fd       	sbrc	r24, 5
     d04:	9e c0       	rjmp	.+316    	; 0xe42 <ht1632c_setup+0x4ee>
     d06:	20 93 86 06 	sts	0x0686, r18
     d0a:	24 e0       	ldi	r18, 0x04	; 4
     d0c:	20 93 85 06 	sts	0x0685, r18
     d10:	20 93 86 06 	sts	0x0686, r18
     d14:	28 e0       	ldi	r18, 0x08	; 8
     d16:	84 fd       	sbrc	r24, 4
     d18:	9e c0       	rjmp	.+316    	; 0xe56 <ht1632c_setup+0x502>
     d1a:	20 93 86 06 	sts	0x0686, r18
     d1e:	24 e0       	ldi	r18, 0x04	; 4
     d20:	20 93 85 06 	sts	0x0685, r18
     d24:	20 93 86 06 	sts	0x0686, r18
     d28:	28 e0       	ldi	r18, 0x08	; 8
     d2a:	83 fd       	sbrc	r24, 3
     d2c:	9e c0       	rjmp	.+316    	; 0xe6a <ht1632c_setup+0x516>
     d2e:	20 93 86 06 	sts	0x0686, r18
     d32:	24 e0       	ldi	r18, 0x04	; 4
     d34:	20 93 85 06 	sts	0x0685, r18
     d38:	20 93 86 06 	sts	0x0686, r18
     d3c:	28 e0       	ldi	r18, 0x08	; 8
     d3e:	82 fd       	sbrc	r24, 2
     d40:	9e c0       	rjmp	.+316    	; 0xe7e <ht1632c_setup+0x52a>
     d42:	20 93 86 06 	sts	0x0686, r18
     d46:	94 e0       	ldi	r25, 0x04	; 4
     d48:	90 93 85 06 	sts	0x0685, r25
     d4c:	90 93 86 06 	sts	0x0686, r25
     d50:	81 fd       	sbrc	r24, 1
     d52:	9e c0       	rjmp	.+316    	; 0xe90 <ht1632c_setup+0x53c>
     d54:	88 e0       	ldi	r24, 0x08	; 8
     d56:	80 93 86 06 	sts	0x0686, r24
     d5a:	84 e0       	ldi	r24, 0x04	; 4
     d5c:	80 93 85 06 	sts	0x0685, r24
     d60:	80 93 86 06 	sts	0x0686, r24
     d64:	98 e0       	ldi	r25, 0x08	; 8
     d66:	90 93 86 06 	sts	0x0686, r25
     d6a:	80 93 85 06 	sts	0x0685, r24
     d6e:	90 93 86 06 	sts	0x0686, r25
     d72:	21 e0       	ldi	r18, 0x01	; 1
     d74:	20 93 85 06 	sts	0x0685, r18
     d78:	20 93 86 06 	sts	0x0686, r18
     d7c:	90 93 81 06 	sts	0x0681, r25
     d80:	80 93 86 06 	sts	0x0686, r24
     d84:	90 93 85 06 	sts	0x0685, r25
     d88:	80 93 85 06 	sts	0x0685, r24
     d8c:	80 93 86 06 	sts	0x0686, r24
     d90:	90 93 86 06 	sts	0x0686, r25
     d94:	80 93 85 06 	sts	0x0685, r24
     d98:	80 93 86 06 	sts	0x0686, r24
     d9c:	90 93 86 06 	sts	0x0686, r25
     da0:	80 93 85 06 	sts	0x0685, r24
     da4:	80 93 86 06 	sts	0x0686, r24
     da8:	90 93 85 06 	sts	0x0685, r25
     dac:	80 93 85 06 	sts	0x0685, r24
     db0:	80 93 86 06 	sts	0x0686, r24
     db4:	90 93 86 06 	sts	0x0686, r25
     db8:	80 93 85 06 	sts	0x0685, r24
     dbc:	80 93 86 06 	sts	0x0686, r24
     dc0:	90 93 85 06 	sts	0x0685, r25
     dc4:	80 93 85 06 	sts	0x0685, r24
     dc8:	80 93 86 06 	sts	0x0686, r24
     dcc:	90 93 86 06 	sts	0x0686, r25
     dd0:	80 93 85 06 	sts	0x0685, r24
     dd4:	80 93 86 06 	sts	0x0686, r24
     dd8:	90 93 86 06 	sts	0x0686, r25
     ddc:	80 93 85 06 	sts	0x0685, r24
     de0:	80 93 86 06 	sts	0x0686, r24
     de4:	90 93 86 06 	sts	0x0686, r25
     de8:	80 93 85 06 	sts	0x0685, r24
     dec:	80 93 86 06 	sts	0x0686, r24
     df0:	90 93 86 06 	sts	0x0686, r25
     df4:	80 93 85 06 	sts	0x0685, r24
     df8:	80 93 86 06 	sts	0x0686, r24
     dfc:	90 93 85 06 	sts	0x0685, r25
     e00:	80 93 85 06 	sts	0x0685, r24
     e04:	80 93 86 06 	sts	0x0686, r24
     e08:	90 93 86 06 	sts	0x0686, r25
     e0c:	80 93 85 06 	sts	0x0685, r24
     e10:	90 93 86 06 	sts	0x0686, r25
     e14:	20 93 85 06 	sts	0x0685, r18
     e18:	08 95       	ret
     e1a:	20 93 85 06 	sts	0x0685, r18
     e1e:	24 e0       	ldi	r18, 0x04	; 4
     e20:	20 93 85 06 	sts	0x0685, r18
     e24:	20 93 86 06 	sts	0x0686, r18
     e28:	28 e0       	ldi	r18, 0x08	; 8
     e2a:	86 ff       	sbrs	r24, 6
     e2c:	62 cf       	rjmp	.-316    	; 0xcf2 <ht1632c_setup+0x39e>
     e2e:	20 93 85 06 	sts	0x0685, r18
     e32:	24 e0       	ldi	r18, 0x04	; 4
     e34:	20 93 85 06 	sts	0x0685, r18
     e38:	20 93 86 06 	sts	0x0686, r18
     e3c:	28 e0       	ldi	r18, 0x08	; 8
     e3e:	85 ff       	sbrs	r24, 5
     e40:	62 cf       	rjmp	.-316    	; 0xd06 <ht1632c_setup+0x3b2>
     e42:	20 93 85 06 	sts	0x0685, r18
     e46:	24 e0       	ldi	r18, 0x04	; 4
     e48:	20 93 85 06 	sts	0x0685, r18
     e4c:	20 93 86 06 	sts	0x0686, r18
     e50:	28 e0       	ldi	r18, 0x08	; 8
     e52:	84 ff       	sbrs	r24, 4
     e54:	62 cf       	rjmp	.-316    	; 0xd1a <ht1632c_setup+0x3c6>
     e56:	20 93 85 06 	sts	0x0685, r18
     e5a:	24 e0       	ldi	r18, 0x04	; 4
     e5c:	20 93 85 06 	sts	0x0685, r18
     e60:	20 93 86 06 	sts	0x0686, r18
     e64:	28 e0       	ldi	r18, 0x08	; 8
     e66:	83 ff       	sbrs	r24, 3
     e68:	62 cf       	rjmp	.-316    	; 0xd2e <ht1632c_setup+0x3da>
     e6a:	20 93 85 06 	sts	0x0685, r18
     e6e:	24 e0       	ldi	r18, 0x04	; 4
     e70:	20 93 85 06 	sts	0x0685, r18
     e74:	20 93 86 06 	sts	0x0686, r18
     e78:	28 e0       	ldi	r18, 0x08	; 8
     e7a:	82 ff       	sbrs	r24, 2
     e7c:	62 cf       	rjmp	.-316    	; 0xd42 <ht1632c_setup+0x3ee>
     e7e:	20 93 85 06 	sts	0x0685, r18
     e82:	94 e0       	ldi	r25, 0x04	; 4
     e84:	90 93 85 06 	sts	0x0685, r25
     e88:	90 93 86 06 	sts	0x0686, r25
     e8c:	81 ff       	sbrs	r24, 1
     e8e:	62 cf       	rjmp	.-316    	; 0xd54 <ht1632c_setup+0x400>
     e90:	88 e0       	ldi	r24, 0x08	; 8
     e92:	80 93 85 06 	sts	0x0685, r24
     e96:	61 cf       	rjmp	.-318    	; 0xd5a <ht1632c_setup+0x406>
     e98:	30 93 85 06 	sts	0x0685, r19
     e9c:	24 e0       	ldi	r18, 0x04	; 4
     e9e:	20 93 85 06 	sts	0x0685, r18
     ea2:	20 93 86 06 	sts	0x0686, r18
     ea6:	28 e0       	ldi	r18, 0x08	; 8
     ea8:	87 fd       	sbrc	r24, 7
     eaa:	b7 cf       	rjmp	.-146    	; 0xe1a <ht1632c_setup+0x4c6>
     eac:	18 cf       	rjmp	.-464    	; 0xcde <ht1632c_setup+0x38a>

00000eae <ht1632c_set_brightness>:
     eae:	80 31       	cpi	r24, 0x10	; 16
     eb0:	08 f0       	brcs	.+2      	; 0xeb4 <ht1632c_set_brightness+0x6>
     eb2:	8f e0       	ldi	r24, 0x0F	; 15
     eb4:	80 6a       	ori	r24, 0xA0	; 160
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	94 60       	ori	r25, 0x04	; 4
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	21 e0       	ldi	r18, 0x01	; 1
     ec0:	20 93 86 06 	sts	0x0686, r18
     ec4:	38 e0       	ldi	r19, 0x08	; 8
     ec6:	30 93 81 06 	sts	0x0681, r19
     eca:	24 e0       	ldi	r18, 0x04	; 4
     ecc:	20 93 86 06 	sts	0x0686, r18
     ed0:	30 93 85 06 	sts	0x0685, r19
     ed4:	20 93 85 06 	sts	0x0685, r18
     ed8:	20 93 86 06 	sts	0x0686, r18
     edc:	30 93 86 06 	sts	0x0686, r19
     ee0:	20 93 85 06 	sts	0x0685, r18
     ee4:	20 93 86 06 	sts	0x0686, r18
     ee8:	30 93 86 06 	sts	0x0686, r19
     eec:	20 93 85 06 	sts	0x0685, r18
     ef0:	20 93 86 06 	sts	0x0686, r18
     ef4:	30 93 85 06 	sts	0x0685, r19
     ef8:	20 93 85 06 	sts	0x0685, r18
     efc:	20 93 86 06 	sts	0x0686, r18
     f00:	30 93 86 06 	sts	0x0686, r19
     f04:	20 93 85 06 	sts	0x0685, r18
     f08:	20 93 86 06 	sts	0x0686, r18
     f0c:	30 93 85 06 	sts	0x0685, r19
     f10:	20 93 85 06 	sts	0x0685, r18
     f14:	20 93 86 06 	sts	0x0686, r18
     f18:	30 93 86 06 	sts	0x0686, r19
     f1c:	20 93 85 06 	sts	0x0685, r18
     f20:	20 93 86 06 	sts	0x0686, r18
     f24:	84 fd       	sbrc	r24, 4
     f26:	47 c0       	rjmp	.+142    	; 0xfb6 <ht1632c_set_brightness+0x108>
     f28:	30 93 86 06 	sts	0x0686, r19
     f2c:	24 e0       	ldi	r18, 0x04	; 4
     f2e:	20 93 85 06 	sts	0x0685, r18
     f32:	20 93 86 06 	sts	0x0686, r18
     f36:	28 e0       	ldi	r18, 0x08	; 8
     f38:	83 fd       	sbrc	r24, 3
     f3a:	26 c0       	rjmp	.+76     	; 0xf88 <ht1632c_set_brightness+0xda>
     f3c:	20 93 86 06 	sts	0x0686, r18
     f40:	24 e0       	ldi	r18, 0x04	; 4
     f42:	20 93 85 06 	sts	0x0685, r18
     f46:	20 93 86 06 	sts	0x0686, r18
     f4a:	28 e0       	ldi	r18, 0x08	; 8
     f4c:	82 fd       	sbrc	r24, 2
     f4e:	26 c0       	rjmp	.+76     	; 0xf9c <ht1632c_set_brightness+0xee>
     f50:	20 93 86 06 	sts	0x0686, r18
     f54:	94 e0       	ldi	r25, 0x04	; 4
     f56:	90 93 85 06 	sts	0x0685, r25
     f5a:	90 93 86 06 	sts	0x0686, r25
     f5e:	81 fd       	sbrc	r24, 1
     f60:	26 c0       	rjmp	.+76     	; 0xfae <ht1632c_set_brightness+0x100>
     f62:	88 e0       	ldi	r24, 0x08	; 8
     f64:	80 93 86 06 	sts	0x0686, r24
     f68:	84 e0       	ldi	r24, 0x04	; 4
     f6a:	80 93 85 06 	sts	0x0685, r24
     f6e:	80 93 86 06 	sts	0x0686, r24
     f72:	98 e0       	ldi	r25, 0x08	; 8
     f74:	90 93 86 06 	sts	0x0686, r25
     f78:	80 93 85 06 	sts	0x0685, r24
     f7c:	90 93 86 06 	sts	0x0686, r25
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	80 93 85 06 	sts	0x0685, r24
     f86:	08 95       	ret
     f88:	20 93 85 06 	sts	0x0685, r18
     f8c:	24 e0       	ldi	r18, 0x04	; 4
     f8e:	20 93 85 06 	sts	0x0685, r18
     f92:	20 93 86 06 	sts	0x0686, r18
     f96:	28 e0       	ldi	r18, 0x08	; 8
     f98:	82 ff       	sbrs	r24, 2
     f9a:	da cf       	rjmp	.-76     	; 0xf50 <ht1632c_set_brightness+0xa2>
     f9c:	20 93 85 06 	sts	0x0685, r18
     fa0:	94 e0       	ldi	r25, 0x04	; 4
     fa2:	90 93 85 06 	sts	0x0685, r25
     fa6:	90 93 86 06 	sts	0x0686, r25
     faa:	81 ff       	sbrs	r24, 1
     fac:	da cf       	rjmp	.-76     	; 0xf62 <ht1632c_set_brightness+0xb4>
     fae:	88 e0       	ldi	r24, 0x08	; 8
     fb0:	80 93 85 06 	sts	0x0685, r24
     fb4:	d9 cf       	rjmp	.-78     	; 0xf68 <ht1632c_set_brightness+0xba>
     fb6:	30 93 85 06 	sts	0x0685, r19
     fba:	24 e0       	ldi	r18, 0x04	; 4
     fbc:	20 93 85 06 	sts	0x0685, r18
     fc0:	20 93 86 06 	sts	0x0686, r18
     fc4:	28 e0       	ldi	r18, 0x08	; 8
     fc6:	83 fd       	sbrc	r24, 3
     fc8:	df cf       	rjmp	.-66     	; 0xf88 <ht1632c_set_brightness+0xda>
     fca:	b8 cf       	rjmp	.-144    	; 0xf3c <ht1632c_set_brightness+0x8e>

00000fcc <ht1632c_refresh_screen>:
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	80 93 86 06 	sts	0x0686, r24
     fd2:	98 e0       	ldi	r25, 0x08	; 8
     fd4:	90 93 81 06 	sts	0x0681, r25
     fd8:	84 e0       	ldi	r24, 0x04	; 4
     fda:	80 93 86 06 	sts	0x0686, r24
     fde:	90 93 85 06 	sts	0x0685, r25
     fe2:	80 93 85 06 	sts	0x0685, r24
     fe6:	80 93 86 06 	sts	0x0686, r24
     fea:	90 93 86 06 	sts	0x0686, r25
     fee:	80 93 85 06 	sts	0x0685, r24
     ff2:	80 93 86 06 	sts	0x0686, r24
     ff6:	90 93 85 06 	sts	0x0685, r25
     ffa:	80 93 85 06 	sts	0x0685, r24
     ffe:	90 93 86 06 	sts	0x0686, r25
    1002:	90 93 81 06 	sts	0x0681, r25
    1006:	80 93 86 06 	sts	0x0686, r24
    100a:	90 93 86 06 	sts	0x0686, r25
    100e:	80 93 85 06 	sts	0x0685, r24
    1012:	80 93 86 06 	sts	0x0686, r24
    1016:	90 93 86 06 	sts	0x0686, r25
    101a:	80 93 85 06 	sts	0x0685, r24
    101e:	80 93 86 06 	sts	0x0686, r24
    1022:	90 93 86 06 	sts	0x0686, r25
    1026:	80 93 85 06 	sts	0x0685, r24
    102a:	80 93 86 06 	sts	0x0686, r24
    102e:	90 93 86 06 	sts	0x0686, r25
    1032:	80 93 85 06 	sts	0x0685, r24
    1036:	80 93 86 06 	sts	0x0686, r24
    103a:	90 93 86 06 	sts	0x0686, r25
    103e:	80 93 85 06 	sts	0x0685, r24
    1042:	80 93 86 06 	sts	0x0686, r24
    1046:	90 93 86 06 	sts	0x0686, r25
    104a:	80 93 85 06 	sts	0x0685, r24
    104e:	80 93 86 06 	sts	0x0686, r24
    1052:	90 93 86 06 	sts	0x0686, r25
    1056:	80 93 85 06 	sts	0x0685, r24
    105a:	90 93 86 06 	sts	0x0686, r25
    105e:	e8 e8       	ldi	r30, 0x88	; 136
    1060:	f2 e2       	ldi	r31, 0x22	; 34
    1062:	38 e0       	ldi	r19, 0x08	; 8
    1064:	24 e0       	ldi	r18, 0x04	; 4
    1066:	7c c0       	rjmp	.+248    	; 0x1160 <ht1632c_refresh_screen+0x194>
    1068:	30 93 86 06 	sts	0x0686, r19
    106c:	20 93 85 06 	sts	0x0685, r18
    1070:	20 93 86 06 	sts	0x0686, r18
    1074:	95 fd       	sbrc	r25, 5
    1076:	92 c0       	rjmp	.+292    	; 0x119c <ht1632c_refresh_screen+0x1d0>
    1078:	30 93 86 06 	sts	0x0686, r19
    107c:	20 93 85 06 	sts	0x0685, r18
    1080:	20 93 86 06 	sts	0x0686, r18
    1084:	94 fd       	sbrc	r25, 4
    1086:	92 c0       	rjmp	.+292    	; 0x11ac <ht1632c_refresh_screen+0x1e0>
    1088:	30 93 86 06 	sts	0x0686, r19
    108c:	20 93 85 06 	sts	0x0685, r18
    1090:	20 93 86 06 	sts	0x0686, r18
    1094:	93 fd       	sbrc	r25, 3
    1096:	92 c0       	rjmp	.+292    	; 0x11bc <ht1632c_refresh_screen+0x1f0>
    1098:	30 93 86 06 	sts	0x0686, r19
    109c:	20 93 85 06 	sts	0x0685, r18
    10a0:	20 93 86 06 	sts	0x0686, r18
    10a4:	92 fd       	sbrc	r25, 2
    10a6:	92 c0       	rjmp	.+292    	; 0x11cc <ht1632c_refresh_screen+0x200>
    10a8:	30 93 86 06 	sts	0x0686, r19
    10ac:	20 93 85 06 	sts	0x0685, r18
    10b0:	20 93 86 06 	sts	0x0686, r18
    10b4:	91 fd       	sbrc	r25, 1
    10b6:	92 c0       	rjmp	.+292    	; 0x11dc <ht1632c_refresh_screen+0x210>
    10b8:	30 93 86 06 	sts	0x0686, r19
    10bc:	20 93 85 06 	sts	0x0685, r18
    10c0:	20 93 86 06 	sts	0x0686, r18
    10c4:	90 fd       	sbrc	r25, 0
    10c6:	92 c0       	rjmp	.+292    	; 0x11ec <ht1632c_refresh_screen+0x220>
    10c8:	30 93 86 06 	sts	0x0686, r19
    10cc:	20 93 85 06 	sts	0x0685, r18
    10d0:	20 93 86 06 	sts	0x0686, r18
    10d4:	87 fd       	sbrc	r24, 7
    10d6:	92 c0       	rjmp	.+292    	; 0x11fc <ht1632c_refresh_screen+0x230>
    10d8:	30 93 86 06 	sts	0x0686, r19
    10dc:	20 93 85 06 	sts	0x0685, r18
    10e0:	20 93 86 06 	sts	0x0686, r18
    10e4:	86 fd       	sbrc	r24, 6
    10e6:	92 c0       	rjmp	.+292    	; 0x120c <ht1632c_refresh_screen+0x240>
    10e8:	30 93 86 06 	sts	0x0686, r19
    10ec:	20 93 85 06 	sts	0x0685, r18
    10f0:	20 93 86 06 	sts	0x0686, r18
    10f4:	85 fd       	sbrc	r24, 5
    10f6:	92 c0       	rjmp	.+292    	; 0x121c <ht1632c_refresh_screen+0x250>
    10f8:	30 93 86 06 	sts	0x0686, r19
    10fc:	20 93 85 06 	sts	0x0685, r18
    1100:	20 93 86 06 	sts	0x0686, r18
    1104:	84 fd       	sbrc	r24, 4
    1106:	92 c0       	rjmp	.+292    	; 0x122c <ht1632c_refresh_screen+0x260>
    1108:	30 93 86 06 	sts	0x0686, r19
    110c:	20 93 85 06 	sts	0x0685, r18
    1110:	20 93 86 06 	sts	0x0686, r18
    1114:	83 fd       	sbrc	r24, 3
    1116:	92 c0       	rjmp	.+292    	; 0x123c <ht1632c_refresh_screen+0x270>
    1118:	30 93 86 06 	sts	0x0686, r19
    111c:	20 93 85 06 	sts	0x0685, r18
    1120:	20 93 86 06 	sts	0x0686, r18
    1124:	82 fd       	sbrc	r24, 2
    1126:	92 c0       	rjmp	.+292    	; 0x124c <ht1632c_refresh_screen+0x280>
    1128:	30 93 86 06 	sts	0x0686, r19
    112c:	20 93 85 06 	sts	0x0685, r18
    1130:	20 93 86 06 	sts	0x0686, r18
    1134:	81 fd       	sbrc	r24, 1
    1136:	92 c0       	rjmp	.+292    	; 0x125c <ht1632c_refresh_screen+0x290>
    1138:	30 93 86 06 	sts	0x0686, r19
    113c:	20 93 85 06 	sts	0x0685, r18
    1140:	20 93 86 06 	sts	0x0686, r18
    1144:	80 fd       	sbrc	r24, 0
    1146:	92 c0       	rjmp	.+292    	; 0x126c <ht1632c_refresh_screen+0x2a0>
    1148:	30 93 86 06 	sts	0x0686, r19
    114c:	20 93 85 06 	sts	0x0685, r18
    1150:	30 93 86 06 	sts	0x0686, r19
    1154:	32 96       	adiw	r30, 0x02	; 2
    1156:	82 e2       	ldi	r24, 0x22	; 34
    1158:	e8 3a       	cpi	r30, 0xA8	; 168
    115a:	f8 07       	cpc	r31, r24
    115c:	09 f4       	brne	.+2      	; 0x1160 <ht1632c_refresh_screen+0x194>
    115e:	8c c0       	rjmp	.+280    	; 0x1278 <ht1632c_refresh_screen+0x2ac>
    1160:	df 01       	movw	r26, r30
    1162:	11 97       	sbiw	r26, 0x01	; 1
    1164:	8c 91       	ld	r24, X
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	98 2f       	mov	r25, r24
    116a:	88 27       	eor	r24, r24
    116c:	40 81       	ld	r20, Z
    116e:	84 2b       	or	r24, r20
    1170:	30 93 81 06 	sts	0x0681, r19
    1174:	20 93 86 06 	sts	0x0686, r18
    1178:	97 fd       	sbrc	r25, 7
    117a:	7b c0       	rjmp	.+246    	; 0x1272 <ht1632c_refresh_screen+0x2a6>
    117c:	30 93 86 06 	sts	0x0686, r19
    1180:	20 93 85 06 	sts	0x0685, r18
    1184:	20 93 86 06 	sts	0x0686, r18
    1188:	96 ff       	sbrs	r25, 6
    118a:	6e cf       	rjmp	.-292    	; 0x1068 <ht1632c_refresh_screen+0x9c>
    118c:	30 93 85 06 	sts	0x0685, r19
    1190:	20 93 85 06 	sts	0x0685, r18
    1194:	20 93 86 06 	sts	0x0686, r18
    1198:	95 ff       	sbrs	r25, 5
    119a:	6e cf       	rjmp	.-292    	; 0x1078 <ht1632c_refresh_screen+0xac>
    119c:	30 93 85 06 	sts	0x0685, r19
    11a0:	20 93 85 06 	sts	0x0685, r18
    11a4:	20 93 86 06 	sts	0x0686, r18
    11a8:	94 ff       	sbrs	r25, 4
    11aa:	6e cf       	rjmp	.-292    	; 0x1088 <ht1632c_refresh_screen+0xbc>
    11ac:	30 93 85 06 	sts	0x0685, r19
    11b0:	20 93 85 06 	sts	0x0685, r18
    11b4:	20 93 86 06 	sts	0x0686, r18
    11b8:	93 ff       	sbrs	r25, 3
    11ba:	6e cf       	rjmp	.-292    	; 0x1098 <ht1632c_refresh_screen+0xcc>
    11bc:	30 93 85 06 	sts	0x0685, r19
    11c0:	20 93 85 06 	sts	0x0685, r18
    11c4:	20 93 86 06 	sts	0x0686, r18
    11c8:	92 ff       	sbrs	r25, 2
    11ca:	6e cf       	rjmp	.-292    	; 0x10a8 <ht1632c_refresh_screen+0xdc>
    11cc:	30 93 85 06 	sts	0x0685, r19
    11d0:	20 93 85 06 	sts	0x0685, r18
    11d4:	20 93 86 06 	sts	0x0686, r18
    11d8:	91 ff       	sbrs	r25, 1
    11da:	6e cf       	rjmp	.-292    	; 0x10b8 <ht1632c_refresh_screen+0xec>
    11dc:	30 93 85 06 	sts	0x0685, r19
    11e0:	20 93 85 06 	sts	0x0685, r18
    11e4:	20 93 86 06 	sts	0x0686, r18
    11e8:	90 ff       	sbrs	r25, 0
    11ea:	6e cf       	rjmp	.-292    	; 0x10c8 <ht1632c_refresh_screen+0xfc>
    11ec:	30 93 85 06 	sts	0x0685, r19
    11f0:	20 93 85 06 	sts	0x0685, r18
    11f4:	20 93 86 06 	sts	0x0686, r18
    11f8:	87 ff       	sbrs	r24, 7
    11fa:	6e cf       	rjmp	.-292    	; 0x10d8 <ht1632c_refresh_screen+0x10c>
    11fc:	30 93 85 06 	sts	0x0685, r19
    1200:	20 93 85 06 	sts	0x0685, r18
    1204:	20 93 86 06 	sts	0x0686, r18
    1208:	86 ff       	sbrs	r24, 6
    120a:	6e cf       	rjmp	.-292    	; 0x10e8 <ht1632c_refresh_screen+0x11c>
    120c:	30 93 85 06 	sts	0x0685, r19
    1210:	20 93 85 06 	sts	0x0685, r18
    1214:	20 93 86 06 	sts	0x0686, r18
    1218:	85 ff       	sbrs	r24, 5
    121a:	6e cf       	rjmp	.-292    	; 0x10f8 <ht1632c_refresh_screen+0x12c>
    121c:	30 93 85 06 	sts	0x0685, r19
    1220:	20 93 85 06 	sts	0x0685, r18
    1224:	20 93 86 06 	sts	0x0686, r18
    1228:	84 ff       	sbrs	r24, 4
    122a:	6e cf       	rjmp	.-292    	; 0x1108 <ht1632c_refresh_screen+0x13c>
    122c:	30 93 85 06 	sts	0x0685, r19
    1230:	20 93 85 06 	sts	0x0685, r18
    1234:	20 93 86 06 	sts	0x0686, r18
    1238:	83 ff       	sbrs	r24, 3
    123a:	6e cf       	rjmp	.-292    	; 0x1118 <ht1632c_refresh_screen+0x14c>
    123c:	30 93 85 06 	sts	0x0685, r19
    1240:	20 93 85 06 	sts	0x0685, r18
    1244:	20 93 86 06 	sts	0x0686, r18
    1248:	82 ff       	sbrs	r24, 2
    124a:	6e cf       	rjmp	.-292    	; 0x1128 <ht1632c_refresh_screen+0x15c>
    124c:	30 93 85 06 	sts	0x0685, r19
    1250:	20 93 85 06 	sts	0x0685, r18
    1254:	20 93 86 06 	sts	0x0686, r18
    1258:	81 ff       	sbrs	r24, 1
    125a:	6e cf       	rjmp	.-292    	; 0x1138 <ht1632c_refresh_screen+0x16c>
    125c:	30 93 85 06 	sts	0x0685, r19
    1260:	20 93 85 06 	sts	0x0685, r18
    1264:	20 93 86 06 	sts	0x0686, r18
    1268:	80 ff       	sbrs	r24, 0
    126a:	6e cf       	rjmp	.-292    	; 0x1148 <ht1632c_refresh_screen+0x17c>
    126c:	30 93 85 06 	sts	0x0685, r19
    1270:	6d cf       	rjmp	.-294    	; 0x114c <ht1632c_refresh_screen+0x180>
    1272:	30 93 85 06 	sts	0x0685, r19
    1276:	84 cf       	rjmp	.-248    	; 0x1180 <ht1632c_refresh_screen+0x1b4>
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	80 93 85 06 	sts	0x0685, r24
    127e:	08 95       	ret

00001280 <ht1632c_clear_screen>:
}

void ht1632c_clear_screen() {
    1280:	80 e2       	ldi	r24, 0x20	; 32
    1282:	e7 e8       	ldi	r30, 0x87	; 135
    1284:	f2 e2       	ldi	r31, 0x22	; 34
    1286:	df 01       	movw	r26, r30
    1288:	1d 92       	st	X+, r1
    128a:	8a 95       	dec	r24
    128c:	e9 f7       	brne	.-6      	; 0x1288 <ht1632c_clear_screen+0x8>

	for (uint8_t i=0; i<(WIDTH*HEIGHT/8); i++) {
		ledmatrix[i] = 0;
	}
	ht1632c_refresh_screen();
    128e:	9e ce       	rjmp	.-708    	; 0xfcc <ht1632c_refresh_screen>

00001290 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
    1290:	2f 92       	push	r2
    1292:	3f 92       	push	r3
    1294:	4f 92       	push	r4
    1296:	5f 92       	push	r5
    1298:	6f 92       	push	r6
    129a:	7f 92       	push	r7
    129c:	8f 92       	push	r8
    129e:	af 92       	push	r10
    12a0:	bf 92       	push	r11
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	28 97       	sbiw	r28, 0x08	; 8
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	8d 83       	std	Y+5, r24	; 0x05
    12be:	9e 83       	std	Y+6, r25	; 0x06
    12c0:	2f 83       	std	Y+7, r18	; 0x07
    12c2:	38 87       	std	Y+8, r19	; 0x08
    12c4:	38 01       	movw	r6, r16
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    12c6:	dc 01       	movw	r26, r24
    12c8:	8d 91       	ld	r24, X+
    12ca:	9c 91       	ld	r25, X
    12cc:	84 17       	cp	r24, r20
    12ce:	95 07       	cpc	r25, r21
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <jsmn_parse+0x44>
    12d2:	d6 c3       	rjmp	.+1964   	; 0x1a80 <jsmn_parse+0x7f0>
    12d4:	fb 01       	movw	r30, r22
    12d6:	e8 0f       	add	r30, r24
    12d8:	f9 1f       	adc	r31, r25
    12da:	10 81       	ld	r17, Z
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;
    12dc:	e1 2c       	mov	r14, r1
    12de:	f1 2c       	mov	r15, r1

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    12e0:	11 23       	and	r17, r17
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <jsmn_parse+0x56>
    12e4:	e4 c0       	rjmp	.+456    	; 0x14ae <jsmn_parse+0x21e>
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
    12e6:	aa 24       	eor	r10, r10
    12e8:	aa 94       	dec	r10
    12ea:	ba 2c       	mov	r11, r10
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    12ec:	e3 e0       	ldi	r30, 0x03	; 3
    12ee:	8e 2e       	mov	r8, r30
    12f0:	25 c0       	rjmp	.+74     	; 0x133c <jsmn_parse+0xac>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    12f2:	1d 35       	cpi	r17, 0x5D	; 93
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <jsmn_parse+0x68>
    12f6:	93 c0       	rjmp	.+294    	; 0x141e <jsmn_parse+0x18e>
    12f8:	08 f0       	brcs	.+2      	; 0x12fc <jsmn_parse+0x6c>
    12fa:	8b c0       	rjmp	.+278    	; 0x1412 <jsmn_parse+0x182>
    12fc:	1a 33       	cpi	r17, 0x3A	; 58
    12fe:	09 f0       	breq	.+2      	; 0x1302 <jsmn_parse+0x72>
    1300:	4d c1       	rjmp	.+666    	; 0x159c <jsmn_parse+0x30c>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
    1302:	ad 81       	ldd	r26, Y+5	; 0x05
    1304:	be 81       	ldd	r27, Y+6	; 0x06
    1306:	12 96       	adiw	r26, 0x02	; 2
    1308:	ed 91       	ld	r30, X+
    130a:	fc 91       	ld	r31, X
    130c:	13 97       	sbiw	r26, 0x03	; 3
    130e:	31 97       	sbiw	r30, 0x01	; 1
    1310:	14 96       	adiw	r26, 0x04	; 4
    1312:	ed 93       	st	X+, r30
    1314:	fc 93       	st	X, r31
    1316:	15 97       	sbiw	r26, 0x05	; 5
    1318:	fc 01       	movw	r30, r24
    131a:	31 96       	adiw	r30, 0x01	; 1
    131c:	eb 83       	std	Y+3, r30	; 0x03
    131e:	fc 83       	std	Y+4, r31	; 0x04
    1320:	cf 01       	movw	r24, r30
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    1322:	8d 93       	st	X+, r24
    1324:	9c 93       	st	X, r25
    1326:	84 17       	cp	r24, r20
    1328:	95 07       	cpc	r25, r21
    132a:	08 f0       	brcs	.+2      	; 0x132e <jsmn_parse+0x9e>
    132c:	c0 c0       	rjmp	.+384    	; 0x14ae <jsmn_parse+0x21e>
    132e:	fb 01       	movw	r30, r22
    1330:	e8 0f       	add	r30, r24
    1332:	f9 1f       	adc	r31, r25
    1334:	10 81       	ld	r17, Z
    1336:	11 23       	and	r17, r17
    1338:	09 f4       	brne	.+2      	; 0x133c <jsmn_parse+0xac>
    133a:	b9 c0       	rjmp	.+370    	; 0x14ae <jsmn_parse+0x21e>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    133c:	1c 32       	cpi	r17, 0x2C	; 44
    133e:	09 f4       	brne	.+2      	; 0x1342 <jsmn_parse+0xb2>
    1340:	dd c0       	rjmp	.+442    	; 0x14fc <jsmn_parse+0x26c>
    1342:	b8 f6       	brcc	.-82     	; 0x12f2 <jsmn_parse+0x62>
    1344:	1d 30       	cpi	r17, 0x0D	; 13
    1346:	09 f4       	brne	.+2      	; 0x134a <jsmn_parse+0xba>
    1348:	a5 c0       	rjmp	.+330    	; 0x1494 <jsmn_parse+0x204>
    134a:	08 f4       	brcc	.+2      	; 0x134e <jsmn_parse+0xbe>
    134c:	a3 c2       	rjmp	.+1350   	; 0x1894 <jsmn_parse+0x604>
    134e:	10 32       	cpi	r17, 0x20	; 32
    1350:	09 f4       	brne	.+2      	; 0x1354 <jsmn_parse+0xc4>
    1352:	22 c2       	rjmp	.+1092   	; 0x1798 <jsmn_parse+0x508>
    1354:	12 32       	cpi	r17, 0x22	; 34
    1356:	09 f0       	breq	.+2      	; 0x135a <jsmn_parse+0xca>
    1358:	8b c1       	rjmp	.+790    	; 0x1670 <jsmn_parse+0x3e0>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
    135a:	fc 01       	movw	r30, r24
    135c:	31 96       	adiw	r30, 0x01	; 1
    135e:	eb 83       	std	Y+3, r30	; 0x03
    1360:	fc 83       	std	Y+4, r31	; 0x04
    1362:	df 01       	movw	r26, r30
    1364:	ed 81       	ldd	r30, Y+5	; 0x05
    1366:	fe 81       	ldd	r31, Y+6	; 0x06
    1368:	a0 83       	st	Z, r26
    136a:	b1 83       	std	Z+1, r27	; 0x01

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    136c:	a4 17       	cp	r26, r20
    136e:	b5 07       	cpc	r27, r21
    1370:	e8 f4       	brcc	.+58     	; 0x13ac <jsmn_parse+0x11c>
    1372:	0b 81       	ldd	r16, Y+3	; 0x03
    1374:	1c 81       	ldd	r17, Y+4	; 0x04
    1376:	09 c0       	rjmp	.+18     	; 0x138a <jsmn_parse+0xfa>
    1378:	11 96       	adiw	r26, 0x01	; 1
    137a:	ed 81       	ldd	r30, Y+5	; 0x05
    137c:	fe 81       	ldd	r31, Y+6	; 0x06
    137e:	a0 83       	st	Z, r26
    1380:	b1 83       	std	Z+1, r27	; 0x01
    1382:	a4 17       	cp	r26, r20
    1384:	b5 07       	cpc	r27, r21
    1386:	90 f4       	brcc	.+36     	; 0x13ac <jsmn_parse+0x11c>
    1388:	8d 01       	movw	r16, r26
    138a:	06 0f       	add	r16, r22
    138c:	17 1f       	adc	r17, r23
    138e:	f8 01       	movw	r30, r16
    1390:	10 81       	ld	r17, Z
    1392:	11 23       	and	r17, r17
    1394:	59 f0       	breq	.+22     	; 0x13ac <jsmn_parse+0x11c>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
    1396:	12 32       	cpi	r17, 0x22	; 34
    1398:	09 f4       	brne	.+2      	; 0x139c <jsmn_parse+0x10c>
    139a:	e4 c2       	rjmp	.+1480   	; 0x1964 <jsmn_parse+0x6d4>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
    139c:	1c 35       	cpi	r17, 0x5C	; 92
    139e:	61 f7       	brne	.-40     	; 0x1378 <jsmn_parse+0xe8>
    13a0:	8d 01       	movw	r16, r26
    13a2:	0f 5f       	subi	r16, 0xFF	; 255
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	04 17       	cp	r16, r20
    13a8:	15 07       	cpc	r17, r21
    13aa:	d0 f0       	brcs	.+52     	; 0x13e0 <jsmn_parse+0x150>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
    13ac:	ad 81       	ldd	r26, Y+5	; 0x05
    13ae:	be 81       	ldd	r27, Y+6	; 0x06
    13b0:	8d 93       	st	X+, r24
    13b2:	9c 93       	st	X, r25
	return JSMN_ERROR_PART;
    13b4:	8d ef       	ldi	r24, 0xFD	; 253
			return JSMN_ERROR_PART;
		}
	}

	return count;
}
    13b6:	28 96       	adiw	r28, 0x08	; 8
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	df 90       	pop	r13
    13ca:	cf 90       	pop	r12
    13cc:	bf 90       	pop	r11
    13ce:	af 90       	pop	r10
    13d0:	8f 90       	pop	r8
    13d2:	7f 90       	pop	r7
    13d4:	6f 90       	pop	r6
    13d6:	5f 90       	pop	r5
    13d8:	4f 90       	pop	r4
    13da:	3f 90       	pop	r3
    13dc:	2f 90       	pop	r2
    13de:	08 95       	ret
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
			int i;
			parser->pos++;
    13e0:	ed 81       	ldd	r30, Y+5	; 0x05
    13e2:	fe 81       	ldd	r31, Y+6	; 0x06
    13e4:	00 83       	st	Z, r16
    13e6:	11 83       	std	Z+1, r17	; 0x01
			switch (js[parser->pos]) {
    13e8:	6b 01       	movw	r12, r22
    13ea:	c0 0e       	add	r12, r16
    13ec:	d1 1e       	adc	r13, r17
    13ee:	f6 01       	movw	r30, r12
    13f0:	20 80       	ld	r2, Z
    13f2:	31 2c       	mov	r3, r1
    13f4:	61 01       	movw	r12, r2
    13f6:	f2 e2       	ldi	r31, 0x22	; 34
    13f8:	cf 1a       	sub	r12, r31
    13fa:	d1 08       	sbc	r13, r1
    13fc:	24 e5       	ldi	r18, 0x54	; 84
    13fe:	c2 16       	cp	r12, r18
    1400:	d1 04       	cpc	r13, r1
    1402:	08 f4       	brcc	.+2      	; 0x1406 <jsmn_parse+0x176>
    1404:	d2 c1       	rjmp	.+932    	; 0x17aa <jsmn_parse+0x51a>
					}
					parser->pos--;
					break;
				/* Unexpected symbol */
				default:
					parser->pos = start;
    1406:	ed 81       	ldd	r30, Y+5	; 0x05
    1408:	fe 81       	ldd	r31, Y+6	; 0x06
    140a:	80 83       	st	Z, r24
    140c:	91 83       	std	Z+1, r25	; 0x01
					return JSMN_ERROR_INVAL;
    140e:	8e ef       	ldi	r24, 0xFE	; 254
    1410:	d2 cf       	rjmp	.-92     	; 0x13b6 <jsmn_parse+0x126>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    1412:	1b 37       	cpi	r17, 0x7B	; 123
    1414:	09 f4       	brne	.+2      	; 0x1418 <jsmn_parse+0x188>
    1416:	c5 c0       	rjmp	.+394    	; 0x15a2 <jsmn_parse+0x312>
    1418:	1d 37       	cpi	r17, 0x7D	; 125
    141a:	09 f0       	breq	.+2      	; 0x141e <jsmn_parse+0x18e>
    141c:	29 c1       	rjmp	.+594    	; 0x1670 <jsmn_parse+0x3e0>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
    141e:	2f 81       	ldd	r18, Y+7	; 0x07
    1420:	38 85       	ldd	r19, Y+8	; 0x08
    1422:	23 2b       	or	r18, r19
    1424:	09 f4       	brne	.+2      	; 0x1428 <jsmn_parse+0x198>
    1426:	44 c2       	rjmp	.+1160   	; 0x18b0 <jsmn_parse+0x620>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
    1428:	1d 37       	cpi	r17, 0x7D	; 125
    142a:	09 f4       	brne	.+2      	; 0x142e <jsmn_parse+0x19e>
    142c:	96 c2       	rjmp	.+1324   	; 0x195a <jsmn_parse+0x6ca>
    142e:	b2 e0       	ldi	r27, 0x02	; 2
    1430:	db 2e       	mov	r13, r27
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    1432:	ed 81       	ldd	r30, Y+5	; 0x05
    1434:	fe 81       	ldd	r31, Y+6	; 0x06
    1436:	22 81       	ldd	r18, Z+2	; 0x02
    1438:	33 81       	ldd	r19, Z+3	; 0x03
    143a:	f9 01       	movw	r30, r18
    143c:	31 97       	sbiw	r30, 0x01	; 1
    143e:	f7 fd       	sbrc	r31, 7
    1440:	26 c0       	rjmp	.+76     	; 0x148e <jsmn_parse+0x1fe>
    1442:	89 01       	movw	r16, r18
    1444:	00 0f       	add	r16, r16
    1446:	11 1f       	adc	r17, r17
    1448:	00 0f       	add	r16, r16
    144a:	11 1f       	adc	r17, r17
    144c:	00 0f       	add	r16, r16
    144e:	11 1f       	adc	r17, r17
    1450:	02 1b       	sub	r16, r18
    1452:	13 0b       	sbc	r17, r19
    1454:	07 50       	subi	r16, 0x07	; 7
    1456:	11 09       	sbc	r17, r1
    1458:	2f 81       	ldd	r18, Y+7	; 0x07
    145a:	38 85       	ldd	r19, Y+8	; 0x08
    145c:	02 0f       	add	r16, r18
    145e:	13 1f       	adc	r17, r19
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    1460:	d8 01       	movw	r26, r16
    1462:	11 96       	adiw	r26, 0x01	; 1
    1464:	4d 90       	ld	r4, X+
    1466:	5c 90       	ld	r5, X
    1468:	12 97       	sbiw	r26, 0x02	; 2
    146a:	45 20       	and	r4, r5
    146c:	40 94       	com	r4
    146e:	51 f0       	breq	.+20     	; 0x1484 <jsmn_parse+0x1f4>
    1470:	d8 01       	movw	r26, r16
    1472:	13 96       	adiw	r26, 0x03	; 3
    1474:	4d 90       	ld	r4, X+
    1476:	5c 90       	ld	r5, X
    1478:	14 97       	sbiw	r26, 0x04	; 4
    147a:	bf ef       	ldi	r27, 0xFF	; 255
    147c:	4b 16       	cp	r4, r27
    147e:	5b 06       	cpc	r5, r27
    1480:	09 f4       	brne	.+2      	; 0x1484 <jsmn_parse+0x1f4>
    1482:	24 c2       	rjmp	.+1096   	; 0x18cc <jsmn_parse+0x63c>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    1484:	31 97       	sbiw	r30, 0x01	; 1
    1486:	07 50       	subi	r16, 0x07	; 7
    1488:	11 09       	sbc	r17, r1
    148a:	f7 ff       	sbrs	r31, 7
    148c:	e9 cf       	rjmp	.-46     	; 0x1460 <jsmn_parse+0x1d0>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
    148e:	31 96       	adiw	r30, 0x01	; 1
    1490:	09 f4       	brne	.+2      	; 0x1494 <jsmn_parse+0x204>
    1492:	e8 c2       	rjmp	.+1488   	; 0x1a64 <jsmn_parse+0x7d4>
    1494:	fc 01       	movw	r30, r24
    1496:	31 96       	adiw	r30, 0x01	; 1
    1498:	eb 83       	std	Y+3, r30	; 0x03
    149a:	fc 83       	std	Y+4, r31	; 0x04
    149c:	cf 01       	movw	r24, r30
    149e:	ad 81       	ldd	r26, Y+5	; 0x05
    14a0:	be 81       	ldd	r27, Y+6	; 0x06
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    14a2:	8d 93       	st	X+, r24
    14a4:	9c 93       	st	X, r25
    14a6:	84 17       	cp	r24, r20
    14a8:	95 07       	cpc	r25, r21
    14aa:	08 f4       	brcc	.+2      	; 0x14ae <jsmn_parse+0x21e>
    14ac:	40 cf       	rjmp	.-384    	; 0x132e <jsmn_parse+0x9e>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    14ae:	ed 81       	ldd	r30, Y+5	; 0x05
    14b0:	fe 81       	ldd	r31, Y+6	; 0x06
    14b2:	42 81       	ldd	r20, Z+2	; 0x02
    14b4:	53 81       	ldd	r21, Z+3	; 0x03
    14b6:	ca 01       	movw	r24, r20
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	97 fd       	sbrc	r25, 7
    14bc:	1d c0       	rjmp	.+58     	; 0x14f8 <jsmn_parse+0x268>
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
    14be:	fa 01       	movw	r30, r20
    14c0:	ee 0f       	add	r30, r30
    14c2:	ff 1f       	adc	r31, r31
    14c4:	ee 0f       	add	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	ee 0f       	add	r30, r30
    14ca:	ff 1f       	adc	r31, r31
    14cc:	e4 1b       	sub	r30, r20
    14ce:	f5 0b       	sbc	r31, r21
    14d0:	2f 81       	ldd	r18, Y+7	; 0x07
    14d2:	38 85       	ldd	r19, Y+8	; 0x08
    14d4:	e2 0f       	add	r30, r18
    14d6:	f3 1f       	adc	r31, r19
    14d8:	36 97       	sbiw	r30, 0x06	; 6
    14da:	20 81       	ld	r18, Z
    14dc:	31 81       	ldd	r19, Z+1	; 0x01
    14de:	2f 3f       	cpi	r18, 0xFF	; 255
    14e0:	3f 4f       	sbci	r19, 0xFF	; 255
    14e2:	31 f0       	breq	.+12     	; 0x14f0 <jsmn_parse+0x260>
    14e4:	22 81       	ldd	r18, Z+2	; 0x02
    14e6:	33 81       	ldd	r19, Z+3	; 0x03
    14e8:	2f 3f       	cpi	r18, 0xFF	; 255
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <jsmn_parse+0x260>
    14ee:	a1 c2       	rjmp	.+1346   	; 0x1a32 <jsmn_parse+0x7a2>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	37 97       	sbiw	r30, 0x07	; 7
    14f4:	97 ff       	sbrs	r25, 7
    14f6:	f1 cf       	rjmp	.-30     	; 0x14da <jsmn_parse+0x24a>
		if (tokens[i].start != -1 && tokens[i].end == -1) {
			return JSMN_ERROR_PART;
		}
	}

	return count;
    14f8:	8e 2d       	mov	r24, r14
    14fa:	5d cf       	rjmp	.-326    	; 0x13b6 <jsmn_parse+0x126>
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
				break;
			case ',':
				if (tokens != NULL &&
    14fc:	2f 81       	ldd	r18, Y+7	; 0x07
    14fe:	38 85       	ldd	r19, Y+8	; 0x08
    1500:	23 2b       	or	r18, r19
    1502:	09 f4       	brne	.+2      	; 0x1506 <jsmn_parse+0x276>
    1504:	d5 c1       	rjmp	.+938    	; 0x18b0 <jsmn_parse+0x620>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
    1506:	ed 81       	ldd	r30, Y+5	; 0x05
    1508:	fe 81       	ldd	r31, Y+6	; 0x06
    150a:	24 81       	ldd	r18, Z+4	; 0x04
    150c:	35 81       	ldd	r19, Z+5	; 0x05
    150e:	f9 01       	movw	r30, r18
    1510:	ee 0f       	add	r30, r30
    1512:	ff 1f       	adc	r31, r31
    1514:	ee 0f       	add	r30, r30
    1516:	ff 1f       	adc	r31, r31
    1518:	ee 0f       	add	r30, r30
    151a:	ff 1f       	adc	r31, r31
    151c:	e2 1b       	sub	r30, r18
    151e:	f3 0b       	sbc	r31, r19
    1520:	2f 81       	ldd	r18, Y+7	; 0x07
    1522:	38 85       	ldd	r19, Y+8	; 0x08
    1524:	e2 0f       	add	r30, r18
    1526:	f3 1f       	adc	r31, r19
    1528:	e0 81       	ld	r30, Z
    152a:	e1 50       	subi	r30, 0x01	; 1
    152c:	e2 30       	cpi	r30, 0x02	; 2
    152e:	08 f4       	brcc	.+2      	; 0x1532 <jsmn_parse+0x2a2>
    1530:	bf c1       	rjmp	.+894    	; 0x18b0 <jsmn_parse+0x620>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
    1532:	ed 81       	ldd	r30, Y+5	; 0x05
    1534:	fe 81       	ldd	r31, Y+6	; 0x06
    1536:	02 81       	ldd	r16, Z+2	; 0x02
    1538:	13 81       	ldd	r17, Z+3	; 0x03
    153a:	d8 01       	movw	r26, r16
    153c:	11 97       	sbiw	r26, 0x01	; 1
    153e:	b7 fd       	sbrc	r27, 7
    1540:	ae c1       	rjmp	.+860    	; 0x189e <jsmn_parse+0x60e>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
    1542:	f8 01       	movw	r30, r16
    1544:	ee 0f       	add	r30, r30
    1546:	ff 1f       	adc	r31, r31
    1548:	ee 0f       	add	r30, r30
    154a:	ff 1f       	adc	r31, r31
    154c:	ee 0f       	add	r30, r30
    154e:	ff 1f       	adc	r31, r31
    1550:	e0 1b       	sub	r30, r16
    1552:	f1 0b       	sbc	r31, r17
    1554:	37 97       	sbiw	r30, 0x07	; 7
    1556:	2f 81       	ldd	r18, Y+7	; 0x07
    1558:	38 85       	ldd	r19, Y+8	; 0x08
    155a:	e2 0f       	add	r30, r18
    155c:	f3 1f       	adc	r31, r19
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <jsmn_parse+0x2d8>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
    1560:	11 97       	sbiw	r26, 0x01	; 1
    1562:	37 97       	sbiw	r30, 0x07	; 7
    1564:	b7 fd       	sbrc	r27, 7
    1566:	18 c1       	rjmp	.+560    	; 0x1798 <jsmn_parse+0x508>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
    1568:	10 81       	ld	r17, Z
    156a:	11 50       	subi	r17, 0x01	; 1
    156c:	12 30       	cpi	r17, 0x02	; 2
    156e:	c0 f7       	brcc	.-16     	; 0x1560 <jsmn_parse+0x2d0>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
    1570:	c1 80       	ldd	r12, Z+1	; 0x01
    1572:	d2 80       	ldd	r13, Z+2	; 0x02
    1574:	cd 20       	and	r12, r13
    1576:	c0 94       	com	r12
    1578:	99 f3       	breq	.-26     	; 0x1560 <jsmn_parse+0x2d0>
    157a:	c3 80       	ldd	r12, Z+3	; 0x03
    157c:	d4 80       	ldd	r13, Z+4	; 0x04
    157e:	cd 20       	and	r12, r13
    1580:	c0 94       	com	r12
    1582:	71 f7       	brne	.-36     	; 0x1560 <jsmn_parse+0x2d0>
								parser->toksuper = i;
    1584:	ed 81       	ldd	r30, Y+5	; 0x05
    1586:	fe 81       	ldd	r31, Y+6	; 0x06
    1588:	a4 83       	std	Z+4, r26	; 0x04
    158a:	b5 83       	std	Z+5, r27	; 0x05
    158c:	8c 01       	movw	r16, r24
    158e:	0f 5f       	subi	r16, 0xFF	; 255
    1590:	1f 4f       	sbci	r17, 0xFF	; 255
    1592:	0b 83       	std	Y+3, r16	; 0x03
    1594:	1c 83       	std	Y+4, r17	; 0x04
    1596:	c8 01       	movw	r24, r16
    1598:	df 01       	movw	r26, r30
								break;
    159a:	c3 ce       	rjmp	.-634    	; 0x1322 <jsmn_parse+0x92>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    159c:	1b 35       	cpi	r17, 0x5B	; 91
    159e:	09 f0       	breq	.+2      	; 0x15a2 <jsmn_parse+0x312>
    15a0:	67 c0       	rjmp	.+206    	; 0x1670 <jsmn_parse+0x3e0>
			case '{': case '[':
				count++;
    15a2:	3f ef       	ldi	r19, 0xFF	; 255
    15a4:	e3 1a       	sub	r14, r19
    15a6:	f3 0a       	sbc	r15, r19
				if (tokens == NULL) {
    15a8:	af 81       	ldd	r26, Y+7	; 0x07
    15aa:	b8 85       	ldd	r27, Y+8	; 0x08
    15ac:	ab 2b       	or	r26, r27
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <jsmn_parse+0x322>
    15b0:	71 cf       	rjmp	.-286    	; 0x1494 <jsmn_parse+0x204>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    15b2:	ad 81       	ldd	r26, Y+5	; 0x05
    15b4:	be 81       	ldd	r27, Y+6	; 0x06
    15b6:	12 96       	adiw	r26, 0x02	; 2
    15b8:	2d 90       	ld	r2, X+
    15ba:	3c 90       	ld	r3, X
    15bc:	13 97       	sbiw	r26, 0x03	; 3
    15be:	26 14       	cp	r2, r6
    15c0:	37 04       	cpc	r3, r7
    15c2:	08 f0       	brcs	.+2      	; 0x15c6 <jsmn_parse+0x336>
    15c4:	81 c1       	rjmp	.+770    	; 0x18c8 <jsmn_parse+0x638>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    15c6:	f1 01       	movw	r30, r2
    15c8:	31 96       	adiw	r30, 0x01	; 1
    15ca:	12 96       	adiw	r26, 0x02	; 2
    15cc:	ed 93       	st	X+, r30
    15ce:	fc 93       	st	X, r31
    15d0:	13 97       	sbiw	r26, 0x03	; 3
    15d2:	d1 01       	movw	r26, r2
    15d4:	aa 0f       	add	r26, r26
    15d6:	bb 1f       	adc	r27, r27
    15d8:	aa 0f       	add	r26, r26
    15da:	bb 1f       	adc	r27, r27
    15dc:	aa 0f       	add	r26, r26
    15de:	bb 1f       	adc	r27, r27
    15e0:	a2 19       	sub	r26, r2
    15e2:	b3 09       	sbc	r27, r3
    15e4:	ef 81       	ldd	r30, Y+7	; 0x07
    15e6:	f8 85       	ldd	r31, Y+8	; 0x08
    15e8:	ae 0f       	add	r26, r30
    15ea:	bf 1f       	adc	r27, r31
	tok->start = tok->end = -1;
    15ec:	13 96       	adiw	r26, 0x03	; 3
    15ee:	ad 92       	st	X+, r10
    15f0:	bc 92       	st	X, r11
    15f2:	14 97       	sbiw	r26, 0x04	; 4
    15f4:	11 96       	adiw	r26, 0x01	; 1
    15f6:	ad 92       	st	X+, r10
    15f8:	bc 92       	st	X, r11
    15fa:	12 97       	sbiw	r26, 0x02	; 2
	tok->size = 0;
    15fc:	15 96       	adiw	r26, 0x05	; 5
    15fe:	1d 92       	st	X+, r1
    1600:	1c 92       	st	X, r1
    1602:	16 97       	sbiw	r26, 0x06	; 6
				count++;
				if (tokens == NULL) {
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
    1604:	10 97       	sbiw	r26, 0x00	; 0
    1606:	09 f4       	brne	.+2      	; 0x160a <jsmn_parse+0x37a>
    1608:	5f c1       	rjmp	.+702    	; 0x18c8 <jsmn_parse+0x638>
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
    160a:	ed 81       	ldd	r30, Y+5	; 0x05
    160c:	fe 81       	ldd	r31, Y+6	; 0x06
    160e:	c4 80       	ldd	r12, Z+4	; 0x04
    1610:	d5 80       	ldd	r13, Z+5	; 0x05
    1612:	ff ef       	ldi	r31, 0xFF	; 255
    1614:	cf 16       	cp	r12, r31
    1616:	df 06       	cpc	r13, r31
    1618:	b1 f0       	breq	.+44     	; 0x1646 <jsmn_parse+0x3b6>
					tokens[parser->toksuper].size++;
    161a:	26 01       	movw	r4, r12
    161c:	44 0c       	add	r4, r4
    161e:	55 1c       	adc	r5, r5
    1620:	44 0c       	add	r4, r4
    1622:	55 1c       	adc	r5, r5
    1624:	44 0c       	add	r4, r4
    1626:	55 1c       	adc	r5, r5
    1628:	4c 18       	sub	r4, r12
    162a:	5d 08       	sbc	r5, r13
    162c:	2f 81       	ldd	r18, Y+7	; 0x07
    162e:	38 85       	ldd	r19, Y+8	; 0x08
    1630:	42 0e       	add	r4, r18
    1632:	53 1e       	adc	r5, r19
    1634:	f2 01       	movw	r30, r4
    1636:	c5 80       	ldd	r12, Z+5	; 0x05
    1638:	d6 80       	ldd	r13, Z+6	; 0x06
    163a:	ff ef       	ldi	r31, 0xFF	; 255
    163c:	cf 1a       	sub	r12, r31
    163e:	df 0a       	sbc	r13, r31
    1640:	f2 01       	movw	r30, r4
    1642:	c5 82       	std	Z+5, r12	; 0x05
    1644:	d6 82       	std	Z+6, r13	; 0x06
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
    1646:	1b 37       	cpi	r17, 0x7B	; 123
    1648:	09 f4       	brne	.+2      	; 0x164c <jsmn_parse+0x3bc>
    164a:	8a c1       	rjmp	.+788    	; 0x1960 <jsmn_parse+0x6d0>
    164c:	12 e0       	ldi	r17, 0x02	; 2
    164e:	1c 93       	st	X, r17
				token->start = parser->pos;
    1650:	11 96       	adiw	r26, 0x01	; 1
    1652:	8d 93       	st	X+, r24
    1654:	9c 93       	st	X, r25
    1656:	12 97       	sbiw	r26, 0x02	; 2
				parser->toksuper = parser->toknext - 1;
    1658:	ad 81       	ldd	r26, Y+5	; 0x05
    165a:	be 81       	ldd	r27, Y+6	; 0x06
    165c:	14 96       	adiw	r26, 0x04	; 4
    165e:	2d 92       	st	X+, r2
    1660:	3c 92       	st	X, r3
    1662:	15 97       	sbiw	r26, 0x05	; 5
    1664:	fc 01       	movw	r30, r24
    1666:	31 96       	adiw	r30, 0x01	; 1
    1668:	eb 83       	std	Y+3, r30	; 0x03
    166a:	fc 83       	std	Y+4, r31	; 0x04
    166c:	cf 01       	movw	r24, r30
				break;
    166e:	59 ce       	rjmp	.-846    	; 0x1322 <jsmn_parse+0x92>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    1670:	84 17       	cp	r24, r20
    1672:	95 07       	cpc	r25, r21
    1674:	08 f0       	brcs	.+2      	; 0x1678 <jsmn_parse+0x3e8>
    1676:	f4 c1       	rjmp	.+1000   	; 0x1a60 <jsmn_parse+0x7d0>
    1678:	11 23       	and	r17, r17
    167a:	09 f4       	brne	.+2      	; 0x167e <jsmn_parse+0x3ee>
    167c:	f1 c1       	rjmp	.+994    	; 0x1a60 <jsmn_parse+0x7d0>
    167e:	9c 01       	movw	r18, r24
    1680:	2f 5f       	subi	r18, 0xFF	; 255
    1682:	3f 4f       	sbci	r19, 0xFF	; 255
    1684:	26 0f       	add	r18, r22
    1686:	37 1f       	adc	r19, r23
    1688:	dc 01       	movw	r26, r24
    168a:	17 c0       	rjmp	.+46     	; 0x16ba <jsmn_parse+0x42a>
		switch (js[parser->pos]) {
    168c:	19 30       	cpi	r17, 0x09	; 9
    168e:	20 f0       	brcs	.+8      	; 0x1698 <jsmn_parse+0x408>
    1690:	1b 30       	cpi	r17, 0x0B	; 11
    1692:	e0 f0       	brcs	.+56     	; 0x16cc <jsmn_parse+0x43c>
    1694:	1d 30       	cpi	r17, 0x0D	; 13
    1696:	d1 f0       	breq	.+52     	; 0x16cc <jsmn_parse+0x43c>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
    1698:	10 52       	subi	r17, 0x20	; 32
    169a:	1f 35       	cpi	r17, 0x5F	; 95
    169c:	08 f0       	brcs	.+2      	; 0x16a0 <jsmn_parse+0x410>
    169e:	76 c0       	rjmp	.+236    	; 0x178c <jsmn_parse+0x4fc>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    16a0:	11 96       	adiw	r26, 0x01	; 1
    16a2:	ed 81       	ldd	r30, Y+5	; 0x05
    16a4:	fe 81       	ldd	r31, Y+6	; 0x06
    16a6:	a0 83       	st	Z, r26
    16a8:	b1 83       	std	Z+1, r27	; 0x01
    16aa:	a4 17       	cp	r26, r20
    16ac:	b5 07       	cpc	r27, r21
    16ae:	70 f4       	brcc	.+28     	; 0x16cc <jsmn_parse+0x43c>
    16b0:	f9 01       	movw	r30, r18
    16b2:	11 91       	ld	r17, Z+
    16b4:	9f 01       	movw	r18, r30
    16b6:	11 23       	and	r17, r17
    16b8:	49 f0       	breq	.+18     	; 0x16cc <jsmn_parse+0x43c>
		switch (js[parser->pos]) {
    16ba:	10 32       	cpi	r17, 0x20	; 32
    16bc:	39 f0       	breq	.+14     	; 0x16cc <jsmn_parse+0x43c>
    16be:	30 f3       	brcs	.-52     	; 0x168c <jsmn_parse+0x3fc>
    16c0:	1a 33       	cpi	r17, 0x3A	; 58
    16c2:	21 f0       	breq	.+8      	; 0x16cc <jsmn_parse+0x43c>
    16c4:	08 f0       	brcs	.+2      	; 0x16c8 <jsmn_parse+0x438>
    16c6:	58 c0       	rjmp	.+176    	; 0x1778 <jsmn_parse+0x4e8>
    16c8:	1c 32       	cpi	r17, 0x2C	; 44
    16ca:	31 f7       	brne	.-52     	; 0x1698 <jsmn_parse+0x408>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
    16cc:	2f 81       	ldd	r18, Y+7	; 0x07
    16ce:	38 85       	ldd	r19, Y+8	; 0x08
    16d0:	23 2b       	or	r18, r19
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <jsmn_parse+0x446>
    16d4:	b0 c1       	rjmp	.+864    	; 0x1a36 <jsmn_parse+0x7a6>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    16d6:	ed 81       	ldd	r30, Y+5	; 0x05
    16d8:	fe 81       	ldd	r31, Y+6	; 0x06
    16da:	02 81       	ldd	r16, Z+2	; 0x02
    16dc:	13 81       	ldd	r17, Z+3	; 0x03
    16de:	06 15       	cp	r16, r6
    16e0:	17 05       	cpc	r17, r7
    16e2:	08 f0       	brcs	.+2      	; 0x16e6 <jsmn_parse+0x456>
    16e4:	ed c0       	rjmp	.+474    	; 0x18c0 <jsmn_parse+0x630>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    16e6:	98 01       	movw	r18, r16
    16e8:	2f 5f       	subi	r18, 0xFF	; 255
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	22 83       	std	Z+2, r18	; 0x02
    16ee:	33 83       	std	Z+3, r19	; 0x03
    16f0:	f8 01       	movw	r30, r16
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	ee 0f       	add	r30, r30
    16f8:	ff 1f       	adc	r31, r31
    16fa:	ee 0f       	add	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	e0 1b       	sub	r30, r16
    1700:	f1 0b       	sbc	r31, r17
    1702:	2f 81       	ldd	r18, Y+7	; 0x07
    1704:	38 85       	ldd	r19, Y+8	; 0x08
    1706:	e2 0f       	add	r30, r18
    1708:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    170a:	a3 82       	std	Z+3, r10	; 0x03
    170c:	b4 82       	std	Z+4, r11	; 0x04
    170e:	a1 82       	std	Z+1, r10	; 0x01
    1710:	b2 82       	std	Z+2, r11	; 0x02
	tok->size = 0;
    1712:	15 82       	std	Z+5, r1	; 0x05
    1714:	16 82       	std	Z+6, r1	; 0x06
	if (tokens == NULL) {
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
    1716:	30 97       	sbiw	r30, 0x00	; 0
    1718:	09 f4       	brne	.+2      	; 0x171c <jsmn_parse+0x48c>
    171a:	d2 c0       	rjmp	.+420    	; 0x18c0 <jsmn_parse+0x630>
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    171c:	10 82       	st	Z, r1
	token->start = start;
    171e:	81 83       	std	Z+1, r24	; 0x01
    1720:	92 83       	std	Z+2, r25	; 0x02
	token->end = end;
    1722:	a3 83       	std	Z+3, r26	; 0x03
    1724:	b4 83       	std	Z+4, r27	; 0x04
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
    1726:	cd 01       	movw	r24, r26
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	ed 81       	ldd	r30, Y+5	; 0x05
    172c:	fe 81       	ldd	r31, Y+6	; 0x06
    172e:	80 83       	st	Z, r24
    1730:	91 83       	std	Z+1, r25	; 0x01
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    1732:	ff ef       	ldi	r31, 0xFF	; 255
    1734:	ef 1a       	sub	r14, r31
    1736:	ff 0a       	sbc	r15, r31
				if (parser->toksuper != -1 && tokens != NULL)
    1738:	ed 81       	ldd	r30, Y+5	; 0x05
    173a:	fe 81       	ldd	r31, Y+6	; 0x06
    173c:	84 81       	ldd	r24, Z+4	; 0x04
    173e:	95 81       	ldd	r25, Z+5	; 0x05
    1740:	8f 3f       	cpi	r24, 0xFF	; 255
    1742:	ff ef       	ldi	r31, 0xFF	; 255
    1744:	9f 07       	cpc	r25, r31
    1746:	91 f0       	breq	.+36     	; 0x176c <jsmn_parse+0x4dc>
					tokens[parser->toksuper].size++;
    1748:	fc 01       	movw	r30, r24
    174a:	ee 0f       	add	r30, r30
    174c:	ff 1f       	adc	r31, r31
    174e:	ee 0f       	add	r30, r30
    1750:	ff 1f       	adc	r31, r31
    1752:	ee 0f       	add	r30, r30
    1754:	ff 1f       	adc	r31, r31
    1756:	e8 1b       	sub	r30, r24
    1758:	f9 0b       	sbc	r31, r25
    175a:	2f 81       	ldd	r18, Y+7	; 0x07
    175c:	38 85       	ldd	r19, Y+8	; 0x08
    175e:	e2 0f       	add	r30, r18
    1760:	f3 1f       	adc	r31, r19
    1762:	85 81       	ldd	r24, Z+5	; 0x05
    1764:	96 81       	ldd	r25, Z+6	; 0x06
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	85 83       	std	Z+5, r24	; 0x05
    176a:	96 83       	std	Z+6, r25	; 0x06
    176c:	ab 83       	std	Y+3, r26	; 0x03
    176e:	bc 83       	std	Y+4, r27	; 0x04
    1770:	cd 01       	movw	r24, r26
    1772:	ad 81       	ldd	r26, Y+5	; 0x05
    1774:	be 81       	ldd	r27, Y+6	; 0x06
    1776:	d5 cd       	rjmp	.-1110   	; 0x1322 <jsmn_parse+0x92>
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		switch (js[parser->pos]) {
    1778:	1d 35       	cpi	r17, 0x5D	; 93
    177a:	09 f4       	brne	.+2      	; 0x177e <jsmn_parse+0x4ee>
    177c:	a7 cf       	rjmp	.-178    	; 0x16cc <jsmn_parse+0x43c>
    177e:	1d 37       	cpi	r17, 0x7D	; 125
    1780:	09 f4       	brne	.+2      	; 0x1784 <jsmn_parse+0x4f4>
    1782:	a4 cf       	rjmp	.-184    	; 0x16cc <jsmn_parse+0x43c>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
    1784:	10 52       	subi	r17, 0x20	; 32
    1786:	1f 35       	cpi	r17, 0x5F	; 95
    1788:	08 f4       	brcc	.+2      	; 0x178c <jsmn_parse+0x4fc>
    178a:	8a cf       	rjmp	.-236    	; 0x16a0 <jsmn_parse+0x410>
			parser->pos = start;
    178c:	ad 81       	ldd	r26, Y+5	; 0x05
    178e:	be 81       	ldd	r27, Y+6	; 0x06
    1790:	8d 93       	st	X+, r24
    1792:	9c 93       	st	X, r25
			return JSMN_ERROR_INVAL;
    1794:	8e ef       	ldi	r24, 0xFE	; 254
    1796:	0f ce       	rjmp	.-994    	; 0x13b6 <jsmn_parse+0x126>
    1798:	9c 01       	movw	r18, r24
    179a:	2f 5f       	subi	r18, 0xFF	; 255
    179c:	3f 4f       	sbci	r19, 0xFF	; 255
    179e:	2b 83       	std	Y+3, r18	; 0x03
    17a0:	3c 83       	std	Y+4, r19	; 0x04
    17a2:	c9 01       	movw	r24, r18
    17a4:	ad 81       	ldd	r26, Y+5	; 0x05
    17a6:	be 81       	ldd	r27, Y+6	; 0x06
    17a8:	bc cd       	rjmp	.-1160   	; 0x1322 <jsmn_parse+0x92>

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
			int i;
			parser->pos++;
			switch (js[parser->pos]) {
    17aa:	f6 01       	movw	r30, r12
    17ac:	e2 50       	subi	r30, 0x02	; 2
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	e0 c6       	rjmp	.+3520   	; 0x2572 <__tablejump2__>
    17b2:	d8 01       	movw	r26, r16
    17b4:	e1 cd       	rjmp	.-1086   	; 0x1378 <jsmn_parse+0xe8>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
    17b6:	8d 01       	movw	r16, r26
    17b8:	0e 5f       	subi	r16, 0xFE	; 254
    17ba:	1f 4f       	sbci	r17, 0xFF	; 255
    17bc:	ed 81       	ldd	r30, Y+5	; 0x05
    17be:	fe 81       	ldd	r31, Y+6	; 0x06
    17c0:	00 83       	st	Z, r16
    17c2:	11 83       	std	Z+1, r17	; 0x01
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    17c4:	04 17       	cp	r16, r20
    17c6:	15 07       	cpc	r17, r21
    17c8:	08 f0       	brcs	.+2      	; 0x17cc <jsmn_parse+0x53c>
    17ca:	61 c0       	rjmp	.+194    	; 0x188e <jsmn_parse+0x5fe>
    17cc:	6b 01       	movw	r12, r22
    17ce:	c0 0e       	add	r12, r16
    17d0:	d1 1e       	adc	r13, r17
    17d2:	f6 01       	movw	r30, r12
    17d4:	d0 80       	ld	r13, Z
    17d6:	dd 20       	and	r13, r13
    17d8:	09 f4       	brne	.+2      	; 0x17dc <jsmn_parse+0x54c>
    17da:	59 c0       	rjmp	.+178    	; 0x188e <jsmn_parse+0x5fe>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
    17dc:	10 ed       	ldi	r17, 0xD0	; 208
    17de:	1d 0d       	add	r17, r13
    17e0:	1a 30       	cpi	r17, 0x0A	; 10
    17e2:	28 f0       	brcs	.+10     	; 0x17ee <jsmn_parse+0x55e>
    17e4:	1d 2d       	mov	r17, r13
    17e6:	1f 7d       	andi	r17, 0xDF	; 223
    17e8:	11 54       	subi	r17, 0x41	; 65
    17ea:	16 30       	cpi	r17, 0x06	; 6
    17ec:	78 f6       	brcc	.-98     	; 0x178c <jsmn_parse+0x4fc>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
    17ee:	8d 01       	movw	r16, r26
    17f0:	0d 5f       	subi	r16, 0xFD	; 253
    17f2:	1f 4f       	sbci	r17, 0xFF	; 255
    17f4:	ed 81       	ldd	r30, Y+5	; 0x05
    17f6:	fe 81       	ldd	r31, Y+6	; 0x06
    17f8:	00 83       	st	Z, r16
    17fa:	11 83       	std	Z+1, r17	; 0x01
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    17fc:	04 17       	cp	r16, r20
    17fe:	15 07       	cpc	r17, r21
    1800:	08 f0       	brcs	.+2      	; 0x1804 <jsmn_parse+0x574>
    1802:	45 c0       	rjmp	.+138    	; 0x188e <jsmn_parse+0x5fe>
    1804:	6b 01       	movw	r12, r22
    1806:	c0 0e       	add	r12, r16
    1808:	d1 1e       	adc	r13, r17
    180a:	f6 01       	movw	r30, r12
    180c:	d0 80       	ld	r13, Z
    180e:	dd 20       	and	r13, r13
    1810:	f1 f1       	breq	.+124    	; 0x188e <jsmn_parse+0x5fe>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
    1812:	10 ed       	ldi	r17, 0xD0	; 208
    1814:	1d 0d       	add	r17, r13
    1816:	1a 30       	cpi	r17, 0x0A	; 10
    1818:	30 f0       	brcs	.+12     	; 0x1826 <jsmn_parse+0x596>
    181a:	1d 2d       	mov	r17, r13
    181c:	1f 7d       	andi	r17, 0xDF	; 223
    181e:	11 54       	subi	r17, 0x41	; 65
    1820:	16 30       	cpi	r17, 0x06	; 6
    1822:	08 f0       	brcs	.+2      	; 0x1826 <jsmn_parse+0x596>
    1824:	b3 cf       	rjmp	.-154    	; 0x178c <jsmn_parse+0x4fc>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
    1826:	8d 01       	movw	r16, r26
    1828:	0c 5f       	subi	r16, 0xFC	; 252
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
    182c:	ed 81       	ldd	r30, Y+5	; 0x05
    182e:	fe 81       	ldd	r31, Y+6	; 0x06
    1830:	00 83       	st	Z, r16
    1832:	11 83       	std	Z+1, r17	; 0x01
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    1834:	04 17       	cp	r16, r20
    1836:	15 07       	cpc	r17, r21
    1838:	50 f5       	brcc	.+84     	; 0x188e <jsmn_parse+0x5fe>
    183a:	6b 01       	movw	r12, r22
    183c:	c0 0e       	add	r12, r16
    183e:	d1 1e       	adc	r13, r17
    1840:	f6 01       	movw	r30, r12
    1842:	d0 80       	ld	r13, Z
    1844:	dd 20       	and	r13, r13
    1846:	19 f1       	breq	.+70     	; 0x188e <jsmn_parse+0x5fe>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
    1848:	10 ed       	ldi	r17, 0xD0	; 208
    184a:	1d 0d       	add	r17, r13
    184c:	1a 30       	cpi	r17, 0x0A	; 10
    184e:	30 f0       	brcs	.+12     	; 0x185c <jsmn_parse+0x5cc>
    1850:	1d 2d       	mov	r17, r13
    1852:	1f 7d       	andi	r17, 0xDF	; 223
    1854:	11 54       	subi	r17, 0x41	; 65
    1856:	16 30       	cpi	r17, 0x06	; 6
    1858:	08 f0       	brcs	.+2      	; 0x185c <jsmn_parse+0x5cc>
    185a:	98 cf       	rjmp	.-208    	; 0x178c <jsmn_parse+0x4fc>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
    185c:	8d 01       	movw	r16, r26
    185e:	0b 5f       	subi	r16, 0xFB	; 251
    1860:	1f 4f       	sbci	r17, 0xFF	; 255
    1862:	ed 81       	ldd	r30, Y+5	; 0x05
    1864:	fe 81       	ldd	r31, Y+6	; 0x06
    1866:	00 83       	st	Z, r16
    1868:	11 83       	std	Z+1, r17	; 0x01
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    186a:	04 17       	cp	r16, r20
    186c:	15 07       	cpc	r17, r21
    186e:	78 f4       	brcc	.+30     	; 0x188e <jsmn_parse+0x5fe>
    1870:	6b 01       	movw	r12, r22
    1872:	c0 0e       	add	r12, r16
    1874:	d1 1e       	adc	r13, r17
    1876:	f6 01       	movw	r30, r12
    1878:	d0 80       	ld	r13, Z
    187a:	dd 20       	and	r13, r13
    187c:	41 f0       	breq	.+16     	; 0x188e <jsmn_parse+0x5fe>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
    187e:	10 ed       	ldi	r17, 0xD0	; 208
    1880:	1d 0d       	add	r17, r13
    1882:	1a 30       	cpi	r17, 0x0A	; 10
    1884:	08 f0       	brcs	.+2      	; 0x1888 <jsmn_parse+0x5f8>
    1886:	c9 c0       	rjmp	.+402    	; 0x1a1a <jsmn_parse+0x78a>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
    1888:	8d 01       	movw	r16, r26
    188a:	0a 5f       	subi	r16, 0xFA	; 250
    188c:	1f 4f       	sbci	r17, 0xFF	; 255
					}
					parser->pos--;
    188e:	d8 01       	movw	r26, r16
    1890:	11 97       	sbiw	r26, 0x01	; 1
    1892:	72 cd       	rjmp	.-1308   	; 0x1378 <jsmn_parse+0xe8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    1894:	e7 ef       	ldi	r30, 0xF7	; 247
    1896:	e1 0f       	add	r30, r17
    1898:	e2 30       	cpi	r30, 0x02	; 2
    189a:	08 f0       	brcs	.+2      	; 0x189e <jsmn_parse+0x60e>
    189c:	e9 ce       	rjmp	.-558    	; 0x1670 <jsmn_parse+0x3e0>
    189e:	8c 01       	movw	r16, r24
    18a0:	0f 5f       	subi	r16, 0xFF	; 255
    18a2:	1f 4f       	sbci	r17, 0xFF	; 255
    18a4:	0b 83       	std	Y+3, r16	; 0x03
    18a6:	1c 83       	std	Y+4, r17	; 0x04
    18a8:	c8 01       	movw	r24, r16
    18aa:	ad 81       	ldd	r26, Y+5	; 0x05
    18ac:	be 81       	ldd	r27, Y+6	; 0x06
    18ae:	39 cd       	rjmp	.-1422   	; 0x1322 <jsmn_parse+0x92>
    18b0:	dc 01       	movw	r26, r24
    18b2:	11 96       	adiw	r26, 0x01	; 1
    18b4:	ab 83       	std	Y+3, r26	; 0x03
    18b6:	bc 83       	std	Y+4, r27	; 0x04
    18b8:	cd 01       	movw	r24, r26
    18ba:	ad 81       	ldd	r26, Y+5	; 0x05
    18bc:	be 81       	ldd	r27, Y+6	; 0x06
    18be:	31 cd       	rjmp	.-1438   	; 0x1322 <jsmn_parse+0x92>
			if (tokens == NULL) {
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
    18c0:	ad 81       	ldd	r26, Y+5	; 0x05
    18c2:	be 81       	ldd	r27, Y+6	; 0x06
    18c4:	8d 93       	st	X+, r24
    18c6:	9c 93       	st	X, r25
				return JSMN_ERROR_NOMEM;
    18c8:	8f ef       	ldi	r24, 0xFF	; 255
    18ca:	75 cd       	rjmp	.-1302   	; 0x13b6 <jsmn_parse+0x126>
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
    18cc:	d8 01       	movw	r26, r16
    18ce:	cc 90       	ld	r12, X
    18d0:	dc 10       	cpse	r13, r12
    18d2:	c8 c0       	rjmp	.+400    	; 0x1a64 <jsmn_parse+0x7d4>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
    18d4:	ad 81       	ldd	r26, Y+5	; 0x05
    18d6:	be 81       	ldd	r27, Y+6	; 0x06
    18d8:	14 96       	adiw	r26, 0x04	; 4
    18da:	4d 92       	st	X+, r4
    18dc:	5c 92       	st	X, r5
    18de:	15 97       	sbiw	r26, 0x05	; 5
						token->end = parser->pos + 1;
    18e0:	9c 01       	movw	r18, r24
    18e2:	2f 5f       	subi	r18, 0xFF	; 255
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	2b 83       	std	Y+3, r18	; 0x03
    18e8:	3c 83       	std	Y+4, r19	; 0x04
    18ea:	d8 01       	movw	r26, r16
    18ec:	13 96       	adiw	r26, 0x03	; 3
    18ee:	2d 93       	st	X+, r18
    18f0:	3c 93       	st	X, r19
    18f2:	14 97       	sbiw	r26, 0x04	; 4
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
				for (; i >= 0; i--) {
    18f4:	f7 fd       	sbrc	r31, 7
    18f6:	23 c0       	rjmp	.+70     	; 0x193e <jsmn_parse+0x6ae>
    18f8:	cf 01       	movw	r24, r30
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	8e 1b       	sub	r24, r30
    1908:	9f 0b       	sbc	r25, r31
    190a:	2f 81       	ldd	r18, Y+7	; 0x07
    190c:	38 85       	ldd	r19, Y+8	; 0x08
    190e:	82 0f       	add	r24, r18
    1910:	93 1f       	adc	r25, r19
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    1912:	dc 01       	movw	r26, r24
    1914:	11 96       	adiw	r26, 0x01	; 1
    1916:	0d 91       	ld	r16, X+
    1918:	1c 91       	ld	r17, X
    191a:	12 97       	sbiw	r26, 0x02	; 2
    191c:	0f 3f       	cpi	r16, 0xFF	; 255
    191e:	1f 4f       	sbci	r17, 0xFF	; 255
    1920:	41 f0       	breq	.+16     	; 0x1932 <jsmn_parse+0x6a2>
    1922:	dc 01       	movw	r26, r24
    1924:	13 96       	adiw	r26, 0x03	; 3
    1926:	0d 91       	ld	r16, X+
    1928:	1c 91       	ld	r17, X
    192a:	14 97       	sbiw	r26, 0x04	; 4
    192c:	0f 3f       	cpi	r16, 0xFF	; 255
    192e:	1f 4f       	sbci	r17, 0xFF	; 255
    1930:	59 f0       	breq	.+22     	; 0x1948 <jsmn_parse+0x6b8>
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
				for (; i >= 0; i--) {
    1932:	31 97       	sbiw	r30, 0x01	; 1
    1934:	07 97       	sbiw	r24, 0x07	; 7
    1936:	ef 3f       	cpi	r30, 0xFF	; 255
    1938:	bf ef       	ldi	r27, 0xFF	; 255
    193a:	fb 07       	cpc	r31, r27
    193c:	51 f7       	brne	.-44     	; 0x1912 <jsmn_parse+0x682>
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	9c 81       	ldd	r25, Y+4	; 0x04
    1942:	ad 81       	ldd	r26, Y+5	; 0x05
    1944:	be 81       	ldd	r27, Y+6	; 0x06
    1946:	ed cc       	rjmp	.-1574   	; 0x1322 <jsmn_parse+0x92>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						parser->toksuper = i;
    1948:	ad 81       	ldd	r26, Y+5	; 0x05
    194a:	be 81       	ldd	r27, Y+6	; 0x06
    194c:	14 96       	adiw	r26, 0x04	; 4
    194e:	ed 93       	st	X+, r30
    1950:	fc 93       	st	X, r31
    1952:	15 97       	sbiw	r26, 0x05	; 5
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
						break;
    1958:	e4 cc       	rjmp	.-1592   	; 0x1322 <jsmn_parse+0x92>
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
    195a:	dd 24       	eor	r13, r13
    195c:	d3 94       	inc	r13
    195e:	69 cd       	rjmp	.-1326   	; 0x1432 <jsmn_parse+0x1a2>
					tokens[parser->toksuper].size++;
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
    1960:	11 e0       	ldi	r17, 0x01	; 1
    1962:	75 ce       	rjmp	.-790    	; 0x164e <jsmn_parse+0x3be>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
			if (tokens == NULL) {
    1964:	2f 81       	ldd	r18, Y+7	; 0x07
    1966:	38 85       	ldd	r19, Y+8	; 0x08
    1968:	23 2b       	or	r18, r19
    196a:	09 f4       	brne	.+2      	; 0x196e <jsmn_parse+0x6de>
    196c:	7d c0       	rjmp	.+250    	; 0x1a68 <jsmn_parse+0x7d8>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    196e:	ed 81       	ldd	r30, Y+5	; 0x05
    1970:	fe 81       	ldd	r31, Y+6	; 0x06
    1972:	c2 80       	ldd	r12, Z+2	; 0x02
    1974:	d3 80       	ldd	r13, Z+3	; 0x03
    1976:	c6 14       	cp	r12, r6
    1978:	d7 04       	cpc	r13, r7
    197a:	08 f0       	brcs	.+2      	; 0x197e <jsmn_parse+0x6ee>
    197c:	a1 cf       	rjmp	.-190    	; 0x18c0 <jsmn_parse+0x630>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    197e:	86 01       	movw	r16, r12
    1980:	0f 5f       	subi	r16, 0xFF	; 255
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	02 83       	std	Z+2, r16	; 0x02
    1986:	13 83       	std	Z+3, r17	; 0x03
    1988:	86 01       	movw	r16, r12
    198a:	00 0f       	add	r16, r16
    198c:	11 1f       	adc	r17, r17
    198e:	00 0f       	add	r16, r16
    1990:	11 1f       	adc	r17, r17
    1992:	00 0f       	add	r16, r16
    1994:	11 1f       	adc	r17, r17
    1996:	0c 19       	sub	r16, r12
    1998:	1d 09       	sbc	r17, r13
    199a:	2f 81       	ldd	r18, Y+7	; 0x07
    199c:	38 85       	ldd	r19, Y+8	; 0x08
    199e:	02 0f       	add	r16, r18
    19a0:	13 1f       	adc	r17, r19
	tok->start = tok->end = -1;
    19a2:	f8 01       	movw	r30, r16
    19a4:	a3 82       	std	Z+3, r10	; 0x03
    19a6:	b4 82       	std	Z+4, r11	; 0x04
    19a8:	a1 82       	std	Z+1, r10	; 0x01
    19aa:	b2 82       	std	Z+2, r11	; 0x02
	tok->size = 0;
    19ac:	15 82       	std	Z+5, r1	; 0x05
    19ae:	16 82       	std	Z+6, r1	; 0x06
		if (c == '\"') {
			if (tokens == NULL) {
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
    19b0:	01 2b       	or	r16, r17
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <jsmn_parse+0x726>
    19b4:	85 cf       	rjmp	.-246    	; 0x18c0 <jsmn_parse+0x630>
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    19b6:	80 82       	st	Z, r8
	token->start = start;
    19b8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ba:	3c 81       	ldd	r19, Y+4	; 0x04
    19bc:	21 83       	std	Z+1, r18	; 0x01
    19be:	32 83       	std	Z+2, r19	; 0x02
	token->end = end;
    19c0:	a3 83       	std	Z+3, r26	; 0x03
    19c2:	b4 83       	std	Z+4, r27	; 0x04
#endif
				break;
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    19c4:	3f ef       	ldi	r19, 0xFF	; 255
    19c6:	e3 1a       	sub	r14, r19
    19c8:	f3 0a       	sbc	r15, r19
				if (parser->toksuper != -1 && tokens != NULL)
    19ca:	ad 81       	ldd	r26, Y+5	; 0x05
    19cc:	be 81       	ldd	r27, Y+6	; 0x06
    19ce:	14 96       	adiw	r26, 0x04	; 4
    19d0:	8d 91       	ld	r24, X+
    19d2:	9c 91       	ld	r25, X
    19d4:	15 97       	sbiw	r26, 0x05	; 5
    19d6:	8f 3f       	cpi	r24, 0xFF	; 255
    19d8:	bf ef       	ldi	r27, 0xFF	; 255
    19da:	9b 07       	cpc	r25, r27
    19dc:	a9 f1       	breq	.+106    	; 0x1a48 <jsmn_parse+0x7b8>
					tokens[parser->toksuper].size++;
    19de:	fc 01       	movw	r30, r24
    19e0:	ee 0f       	add	r30, r30
    19e2:	ff 1f       	adc	r31, r31
    19e4:	ee 0f       	add	r30, r30
    19e6:	ff 1f       	adc	r31, r31
    19e8:	ee 0f       	add	r30, r30
    19ea:	ff 1f       	adc	r31, r31
    19ec:	e8 1b       	sub	r30, r24
    19ee:	f9 0b       	sbc	r31, r25
    19f0:	2f 81       	ldd	r18, Y+7	; 0x07
    19f2:	38 85       	ldd	r19, Y+8	; 0x08
    19f4:	e2 0f       	add	r30, r18
    19f6:	f3 1f       	adc	r31, r19
    19f8:	85 81       	ldd	r24, Z+5	; 0x05
    19fa:	96 81       	ldd	r25, Z+6	; 0x06
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	85 83       	std	Z+5, r24	; 0x05
    1a00:	96 83       	std	Z+6, r25	; 0x06
    1a02:	ad 81       	ldd	r26, Y+5	; 0x05
    1a04:	be 81       	ldd	r27, Y+6	; 0x06
    1a06:	0d 90       	ld	r0, X+
    1a08:	bc 91       	ld	r27, X
    1a0a:	a0 2d       	mov	r26, r0
    1a0c:	11 96       	adiw	r26, 0x01	; 1
    1a0e:	ab 83       	std	Y+3, r26	; 0x03
    1a10:	bc 83       	std	Y+4, r27	; 0x04
    1a12:	cd 01       	movw	r24, r26
    1a14:	ad 81       	ldd	r26, Y+5	; 0x05
    1a16:	be 81       	ldd	r27, Y+6	; 0x06
    1a18:	84 cc       	rjmp	.-1784   	; 0x1322 <jsmn_parse+0x92>
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
    1a1a:	1d 2d       	mov	r17, r13
    1a1c:	1f 7d       	andi	r17, 0xDF	; 223
    1a1e:	11 54       	subi	r17, 0x41	; 65
    1a20:	16 30       	cpi	r17, 0x06	; 6
    1a22:	08 f4       	brcc	.+2      	; 0x1a26 <jsmn_parse+0x796>
    1a24:	31 cf       	rjmp	.-414    	; 0x1888 <jsmn_parse+0x5f8>
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
			parser->pos = start;
    1a26:	ad 81       	ldd	r26, Y+5	; 0x05
    1a28:	be 81       	ldd	r27, Y+6	; 0x06
    1a2a:	8d 93       	st	X+, r24
    1a2c:	9c 93       	st	X, r25
			return JSMN_ERROR_INVAL;
    1a2e:	8e ef       	ldi	r24, 0xFE	; 254
    1a30:	c2 cc       	rjmp	.-1660   	; 0x13b6 <jsmn_parse+0x126>
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
			return JSMN_ERROR_PART;
    1a32:	8d ef       	ldi	r24, 0xFD	; 253
    1a34:	c0 cc       	rjmp	.-1664   	; 0x13b6 <jsmn_parse+0x126>
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    1a36:	3f ef       	ldi	r19, 0xFF	; 255
    1a38:	e3 1a       	sub	r14, r19
    1a3a:	f3 0a       	sbc	r15, r19
    1a3c:	ab 83       	std	Y+3, r26	; 0x03
    1a3e:	bc 83       	std	Y+4, r27	; 0x04
    1a40:	cd 01       	movw	r24, r26
    1a42:	ad 81       	ldd	r26, Y+5	; 0x05
    1a44:	be 81       	ldd	r27, Y+6	; 0x06
    1a46:	6d cc       	rjmp	.-1830   	; 0x1322 <jsmn_parse+0x92>
    1a48:	ed 81       	ldd	r30, Y+5	; 0x05
    1a4a:	fe 81       	ldd	r31, Y+6	; 0x06
    1a4c:	01 90       	ld	r0, Z+
    1a4e:	f0 81       	ld	r31, Z
    1a50:	e0 2d       	mov	r30, r0
    1a52:	31 96       	adiw	r30, 0x01	; 1
    1a54:	eb 83       	std	Y+3, r30	; 0x03
    1a56:	fc 83       	std	Y+4, r31	; 0x04
    1a58:	cf 01       	movw	r24, r30
    1a5a:	ad 81       	ldd	r26, Y+5	; 0x05
    1a5c:	be 81       	ldd	r27, Y+6	; 0x06
    1a5e:	61 cc       	rjmp	.-1854   	; 0x1322 <jsmn_parse+0x92>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    1a60:	dc 01       	movw	r26, r24
    1a62:	34 ce       	rjmp	.-920    	; 0x16cc <jsmn_parse+0x43c>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
    1a64:	8e ef       	ldi	r24, 0xFE	; 254
    1a66:	a7 cc       	rjmp	.-1714   	; 0x13b6 <jsmn_parse+0x126>
#endif
				break;
			case '\"':
				r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    1a68:	ef ef       	ldi	r30, 0xFF	; 255
    1a6a:	ee 1a       	sub	r14, r30
    1a6c:	fe 0a       	sbc	r15, r30
    1a6e:	8d 01       	movw	r16, r26
    1a70:	0f 5f       	subi	r16, 0xFF	; 255
    1a72:	1f 4f       	sbci	r17, 0xFF	; 255
    1a74:	0b 83       	std	Y+3, r16	; 0x03
    1a76:	1c 83       	std	Y+4, r17	; 0x04
    1a78:	c8 01       	movw	r24, r16
    1a7a:	ad 81       	ldd	r26, Y+5	; 0x05
    1a7c:	be 81       	ldd	r27, Y+6	; 0x06
    1a7e:	51 cc       	rjmp	.-1886   	; 0x1322 <jsmn_parse+0x92>
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;
    1a80:	e1 2c       	mov	r14, r1
    1a82:	f1 2c       	mov	r15, r1
    1a84:	14 cd       	rjmp	.-1496   	; 0x14ae <jsmn_parse+0x21e>

00001a86 <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
    1a86:	fc 01       	movw	r30, r24
	parser->pos = 0;
    1a88:	10 82       	st	Z, r1
    1a8a:	11 82       	std	Z+1, r1	; 0x01
	parser->toknext = 0;
    1a8c:	12 82       	std	Z+2, r1	; 0x02
    1a8e:	13 82       	std	Z+3, r1	; 0x03
	parser->toksuper = -1;
    1a90:	8f ef       	ldi	r24, 0xFF	; 255
    1a92:	9f ef       	ldi	r25, 0xFF	; 255
    1a94:	84 83       	std	Z+4, r24	; 0x04
    1a96:	95 83       	std	Z+5, r25	; 0x05
    1a98:	08 95       	ret

00001a9a <print_token>:
	uint16_t reg01 = ((u16)reg1 << 8) | reg0;
	
	if (reg01 < 2200)
	{
		if (flip) {
			ht1632c_send_command(HT1632_LED_OFF);
    1a9a:	cf 92       	push	r12
    1a9c:	df 92       	push	r13
    1a9e:	ef 92       	push	r14
    1aa0:	ff 92       	push	r15
    1aa2:	0f 93       	push	r16
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	cd b6       	in	r12, 0x3d	; 61
    1ab0:	de b6       	in	r13, 0x3e	; 62
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	27 e0       	ldi	r18, 0x07	; 7
    1ab6:	42 9f       	mul	r20, r18
    1ab8:	e0 0d       	add	r30, r0
    1aba:	f1 1d       	adc	r31, r1
    1abc:	11 24       	eor	r1, r1
    1abe:	21 81       	ldd	r18, Z+1	; 0x01
    1ac0:	32 81       	ldd	r19, Z+2	; 0x02
    1ac2:	03 81       	ldd	r16, Z+3	; 0x03
    1ac4:	14 81       	ldd	r17, Z+4	; 0x04
    1ac6:	02 1b       	sub	r16, r18
    1ac8:	13 0b       	sbc	r17, r19
    1aca:	c8 01       	movw	r24, r16
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	4d b7       	in	r20, 0x3d	; 61
    1ad0:	5e b7       	in	r21, 0x3e	; 62
    1ad2:	48 1b       	sub	r20, r24
    1ad4:	59 0b       	sbc	r21, r25
    1ad6:	4d bf       	out	0x3d, r20	; 61
    1ad8:	5e bf       	out	0x3e, r21	; 62
    1ada:	8d b7       	in	r24, 0x3d	; 61
    1adc:	9e b7       	in	r25, 0x3e	; 62
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	7c 01       	movw	r14, r24
    1ae2:	62 0f       	add	r22, r18
    1ae4:	73 1f       	adc	r23, r19
    1ae6:	a8 01       	movw	r20, r16
    1ae8:	59 d5       	rcall	.+2738   	; 0x259c <memcpy>
    1aea:	f7 01       	movw	r30, r14
    1aec:	e0 0f       	add	r30, r16
    1aee:	f1 1f       	adc	r31, r17
    1af0:	10 82       	st	Z, r1
    1af2:	c7 01       	movw	r24, r14
    1af4:	d5 d5       	rcall	.+2986   	; 0x26a0 <puts>
    1af6:	cd be       	out	0x3d, r12	; 61
    1af8:	de be       	out	0x3e, r13	; 62
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	1f 91       	pop	r17
    1b00:	0f 91       	pop	r16
    1b02:	ff 90       	pop	r15
    1b04:	ef 90       	pop	r14
    1b06:	df 90       	pop	r13
    1b08:	cf 90       	pop	r12
    1b0a:	08 95       	ret

00001b0c <main>:
		}
		ht1632_fade(reg01/400);
	}
}

int main(void) {
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	ca 58       	subi	r28, 0x8A	; 138
    1b16:	d3 40       	sbci	r29, 0x03	; 3
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	de bf       	out	0x3e, r29	; 62
	
	char json_buffer[RX_BUFFER];
	
	esp8266_status_t status;
	
	clock_setup_32_mhz_pll();
    1b1c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <clock_setup_32_mhz_pll>
	ht1632c_setup(HT1632_COMMON_16NMOS);
    1b20:	84 e2       	ldi	r24, 0x24	; 36
    1b22:	0e 94 aa 04 	call	0x954	; 0x954 <ht1632c_setup>
	ht1632c_set_brightness(0);
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	c2 d9       	rcall	.-3196   	; 0xeae <ht1632c_set_brightness>
	ht1632c_clear_screen();
    1b2a:	aa db       	rcall	.-2220   	; 0x1280 <ht1632c_clear_screen>
	
	//adc_setup();
	uart_setup();
    1b2c:	5d d3       	rcall	.+1722   	; 0x21e8 <uart_setup>
void uart_put_char(char c);
static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) {
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    1b2e:	87 e0       	ldi	r24, 0x07	; 7
    1b30:	80 93 a2 00 	sts	0x00A2, r24
	ht1632c_clear_screen();
	
	//adc_setup();
	uart_setup();
	pmic_setup();
	twi_setup(&TWIC);
    1b34:	80 e8       	ldi	r24, 0x80	; 128
    1b36:	94 e0       	ldi	r25, 0x04	; 4
    1b38:	75 d1       	rcall	.+746    	; 0x1e24 <twi_setup>
	si114x_reset(SI114X_ADDR);
    1b3a:	8a e5       	ldi	r24, 0x5A	; 90
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	ce d2       	rcall	.+1436   	; 0x20dc <si114x_reset>
	//si114x_setup();
	//tcc_setup();
	//btn_setup();
	//rtc_setup();
	//rtc_init_time();
	jsmn_init(&p);
    1b40:	ce 01       	movw	r24, r28
    1b42:	8b 57       	subi	r24, 0x7B	; 123
    1b44:	9c 4f       	sbci	r25, 0xFC	; 252
    1b46:	9f df       	rcall	.-194    	; 0x1a86 <jsmn_init>
	
	stdout = stdin = &mystdout;
    1b48:	84 e0       	ldi	r24, 0x04	; 4
    1b4a:	90 e2       	ldi	r25, 0x20	; 32
    1b4c:	80 93 6e 29 	sts	0x296E, r24
    1b50:	90 93 6f 29 	sts	0x296F, r25
    1b54:	80 93 70 29 	sts	0x2970, r24
    1b58:	90 93 71 29 	sts	0x2971, r25
	puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
    1b5c:	8c e2       	ldi	r24, 0x2C	; 44
    1b5e:	91 e2       	ldi	r25, 0x21	; 33
    1b60:	9f d5       	rcall	.+2878   	; 0x26a0 <puts>

	//rtc_set_time(18,50,0);
	
	//sd_card();
	
	sei();
    1b62:	78 94       	sei
	
	//sd_card();
	
	esp8266_on();
    1b64:	0e 94 87 01 	call	0x30e	; 0x30e <esp8266_on>
	//esp8266_setup_webserver();
	
	
	do {status = esp8266_setup(); } while (status != ESP8266_SUCCESS);
    1b68:	0e 94 9d 01 	call	0x33a	; 0x33a <esp8266_setup>
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	e1 f7       	brne	.-8      	; 0x1b68 <main+0x5c>
	do {status = esp8266_join_ap(SSID,PASS); } while (status != ESP8266_SUCCESS);
    1b70:	6b e9       	ldi	r22, 0x9B	; 155
    1b72:	70 e2       	ldi	r23, 0x20	; 32
    1b74:	86 ea       	ldi	r24, 0xA6	; 166
    1b76:	90 e2       	ldi	r25, 0x20	; 32
    1b78:	0e 94 ef 01 	call	0x3de	; 0x3de <esp8266_join_ap>
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	c1 f7       	brne	.-16     	; 0x1b70 <main+0x64>
	status = esp8266_connect(DST_IP,ADDRESS,json_buffer);
    1b80:	7e 01       	movw	r14, r28
    1b82:	83 e4       	ldi	r24, 0x43	; 67
    1b84:	e8 1a       	sub	r14, r24
    1b86:	8d ef       	ldi	r24, 0xFD	; 253
    1b88:	f8 0a       	sbc	r15, r24
    1b8a:	a7 01       	movw	r20, r14
    1b8c:	64 e5       	ldi	r22, 0x54	; 84
    1b8e:	71 e2       	ldi	r23, 0x21	; 33
    1b90:	8c e9       	ldi	r24, 0x9C	; 156
    1b92:	91 e2       	ldi	r25, 0x21	; 33
    1b94:	0e 94 6e 02 	call	0x4dc	; 0x4dc <esp8266_connect>
	esp8266_off();
    1b98:	0e 94 98 01 	call	0x330	; 0x330 <esp8266_off>
	puts("GOT DATA:");
    1b9c:	8f ea       	ldi	r24, 0xAF	; 175
    1b9e:	91 e2       	ldi	r25, 0x21	; 33
    1ba0:	7f d5       	rcall	.+2814   	; 0x26a0 <puts>
	puts(json_buffer);
    1ba2:	c7 01       	movw	r24, r14
    1ba4:	7d d5       	rcall	.+2810   	; 0x26a0 <puts>
	
	r = jsmn_parse(&p,json_buffer,strlen(json_buffer),tokens,100);
    1ba6:	f7 01       	movw	r30, r14
    1ba8:	01 90       	ld	r0, Z+
    1baa:	00 20       	and	r0, r0
    1bac:	e9 f7       	brne	.-6      	; 0x1ba8 <main+0x9c>
    1bae:	af 01       	movw	r20, r30
    1bb0:	41 50       	subi	r20, 0x01	; 1
    1bb2:	51 09       	sbc	r21, r1
    1bb4:	4e 19       	sub	r20, r14
    1bb6:	5f 09       	sbc	r21, r15
    1bb8:	04 e6       	ldi	r16, 0x64	; 100
    1bba:	10 e0       	ldi	r17, 0x00	; 0
    1bbc:	9e 01       	movw	r18, r28
    1bbe:	2f 5f       	subi	r18, 0xFF	; 255
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	b7 01       	movw	r22, r14
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	8b 57       	subi	r24, 0x7B	; 123
    1bc8:	9c 4f       	sbci	r25, 0xFC	; 252
    1bca:	62 db       	rcall	.-2364   	; 0x1290 <jsmn_parse>
	
	print_token(tokens,json_buffer,3);
    1bcc:	43 e0       	ldi	r20, 0x03	; 3
    1bce:	b7 01       	movw	r22, r14
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	62 df       	rcall	.-316    	; 0x1a9a <print_token>
	print_token(tokens,json_buffer,4);
    1bd6:	44 e0       	ldi	r20, 0x04	; 4
    1bd8:	b7 01       	movw	r22, r14
    1bda:	ce 01       	movw	r24, r28
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	5d df       	rcall	.-326    	; 0x1a9a <print_token>
	print_token(tokens,json_buffer,5);
    1be0:	45 e0       	ldi	r20, 0x05	; 5
    1be2:	b7 01       	movw	r22, r14
    1be4:	ce 01       	movw	r24, r28
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	58 df       	rcall	.-336    	; 0x1a9a <print_token>
    1bea:	ff cf       	rjmp	.-2      	; 0x1bea <main+0xde>

00001bec <__vector_20>:
		//rtc_update_display_alt();
	}
}

//Used for SI114x Timestamp
ISR(TCC1_OVF_vect) {
    1bec:	1f 92       	push	r1
    1bee:	0f 92       	push	r0
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	0f 92       	push	r0
    1bf4:	11 24       	eor	r1, r1
    1bf6:	8f 93       	push	r24
    1bf8:	9f 93       	push	r25
	counter++;
    1bfa:	80 91 b7 22 	lds	r24, 0x22B7
    1bfe:	90 91 b8 22 	lds	r25, 0x22B8
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	80 93 b7 22 	sts	0x22B7, r24
    1c08:	90 93 b8 22 	sts	0x22B8, r25
}
    1c0c:	9f 91       	pop	r25
    1c0e:	8f 91       	pop	r24
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	0f 90       	pop	r0
    1c16:	1f 90       	pop	r1
    1c18:	18 95       	reti

00001c1a <__vector_66>:
	} else {
		return NONE;
	}
}

ISR(PORTA_INT0_vect) {
    1c1a:	1f 92       	push	r1
    1c1c:	0f 92       	push	r0
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	0f 92       	push	r0
    1c22:	11 24       	eor	r1, r1
    1c24:	0b b6       	in	r0, 0x3b	; 59
    1c26:	0f 92       	push	r0
    1c28:	2f 93       	push	r18
    1c2a:	3f 93       	push	r19
    1c2c:	4f 93       	push	r20
    1c2e:	5f 93       	push	r21
    1c30:	6f 93       	push	r22
    1c32:	7f 93       	push	r23
    1c34:	8f 93       	push	r24
    1c36:	9f 93       	push	r25
    1c38:	af 93       	push	r26
    1c3a:	bf 93       	push	r27
    1c3c:	ef 93       	push	r30
    1c3e:	ff 93       	push	r31
	PORTC.INTCTRL = PORT_INT0LVL_LO_gc;
}

button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
    1c40:	80 91 08 06 	lds	r24, 0x0608
    1c44:	85 ff       	sbrs	r24, 5
    1c46:	2d c0       	rjmp	.+90     	; 0x1ca2 <__vector_66+0x88>
		return BTN1;
	} else if (!(PORTA.IN & BUTTON1)) {
    1c48:	80 91 08 06 	lds	r24, 0x0608
    1c4c:	86 fd       	sbrc	r24, 6
    1c4e:	23 c0       	rjmp	.+70     	; 0x1c96 <__vector_66+0x7c>
		return BTN2;
    1c50:	82 e0       	ldi	r24, 0x02	; 2
		return NONE;
	}
}

ISR(PORTA_INT0_vect) {
	btn_status = btn_check_press();
    1c52:	80 93 43 29 	sts	0x2943, r24
	printf("%d",btn_status);
    1c56:	80 91 43 29 	lds	r24, 0x2943
    1c5a:	1f 92       	push	r1
    1c5c:	8f 93       	push	r24
    1c5e:	8e ed       	ldi	r24, 0xDE	; 222
    1c60:	90 e2       	ldi	r25, 0x20	; 32
    1c62:	9f 93       	push	r25
    1c64:	8f 93       	push	r24
    1c66:	0b d5       	rcall	.+2582   	; 0x267e <printf>
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
}
    1c70:	ff 91       	pop	r31
    1c72:	ef 91       	pop	r30
    1c74:	bf 91       	pop	r27
    1c76:	af 91       	pop	r26
    1c78:	9f 91       	pop	r25
    1c7a:	8f 91       	pop	r24
    1c7c:	7f 91       	pop	r23
    1c7e:	6f 91       	pop	r22
    1c80:	5f 91       	pop	r21
    1c82:	4f 91       	pop	r20
    1c84:	3f 91       	pop	r19
    1c86:	2f 91       	pop	r18
    1c88:	0f 90       	pop	r0
    1c8a:	0b be       	out	0x3b, r0	; 59
    1c8c:	0f 90       	pop	r0
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	0f 90       	pop	r0
    1c92:	1f 90       	pop	r1
    1c94:	18 95       	reti
	
	if (!(PORTA.IN & BUTTON0)) {
		return BTN1;
	} else if (!(PORTA.IN & BUTTON1)) {
		return BTN2;
	} else if (!(PORTA.IN & BUTTON2)) {
    1c96:	80 91 08 06 	lds	r24, 0x0608
    1c9a:	87 fd       	sbrc	r24, 7
    1c9c:	04 c0       	rjmp	.+8      	; 0x1ca6 <__vector_66+0x8c>
		return BTN3;
    1c9e:	83 e0       	ldi	r24, 0x03	; 3
    1ca0:	d8 cf       	rjmp	.-80     	; 0x1c52 <__vector_66+0x38>
}

button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
		return BTN1;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	d6 cf       	rjmp	.-84     	; 0x1c52 <__vector_66+0x38>
	} else if (!(PORTA.IN & BUTTON1)) {
		return BTN2;
	} else if (!(PORTA.IN & BUTTON2)) {
		return BTN3;
	} else if (!(PORTB.IN & BUTTON3)) {
    1ca6:	80 91 28 06 	lds	r24, 0x0628
    1caa:	80 fd       	sbrc	r24, 0
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <__vector_66+0x98>
		return BTN4;
    1cae:	84 e0       	ldi	r24, 0x04	; 4
    1cb0:	d0 cf       	rjmp	.-96     	; 0x1c52 <__vector_66+0x38>
	} else {
		return NONE;
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	ce cf       	rjmp	.-100    	; 0x1c52 <__vector_66+0x38>

00001cb6 <__vector_34>:
ISR(PORTA_INT0_vect) {
	btn_status = btn_check_press();
	printf("%d",btn_status);
}

ISR(PORTB_INT0_vect) {
    1cb6:	1f 92       	push	r1
    1cb8:	0f 92       	push	r0
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	0f 92       	push	r0
    1cbe:	11 24       	eor	r1, r1
    1cc0:	0b b6       	in	r0, 0x3b	; 59
    1cc2:	0f 92       	push	r0
    1cc4:	2f 93       	push	r18
    1cc6:	3f 93       	push	r19
    1cc8:	4f 93       	push	r20
    1cca:	5f 93       	push	r21
    1ccc:	6f 93       	push	r22
    1cce:	7f 93       	push	r23
    1cd0:	8f 93       	push	r24
    1cd2:	9f 93       	push	r25
    1cd4:	af 93       	push	r26
    1cd6:	bf 93       	push	r27
    1cd8:	ef 93       	push	r30
    1cda:	ff 93       	push	r31
	PORTC.INTCTRL = PORT_INT0LVL_LO_gc;
}

button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
    1cdc:	80 91 08 06 	lds	r24, 0x0608
    1ce0:	85 ff       	sbrs	r24, 5
    1ce2:	2d c0       	rjmp	.+90     	; 0x1d3e <__vector_34+0x88>
		return BTN1;
	} else if (!(PORTA.IN & BUTTON1)) {
    1ce4:	80 91 08 06 	lds	r24, 0x0608
    1ce8:	86 fd       	sbrc	r24, 6
    1cea:	23 c0       	rjmp	.+70     	; 0x1d32 <__vector_34+0x7c>
		return BTN2;
    1cec:	82 e0       	ldi	r24, 0x02	; 2
	btn_status = btn_check_press();
	printf("%d",btn_status);
}

ISR(PORTB_INT0_vect) {
	btn_status = btn_check_press();
    1cee:	80 93 43 29 	sts	0x2943, r24
	printf("%d",btn_status);
    1cf2:	80 91 43 29 	lds	r24, 0x2943
    1cf6:	1f 92       	push	r1
    1cf8:	8f 93       	push	r24
    1cfa:	8e ed       	ldi	r24, 0xDE	; 222
    1cfc:	90 e2       	ldi	r25, 0x20	; 32
    1cfe:	9f 93       	push	r25
    1d00:	8f 93       	push	r24
    1d02:	bd d4       	rcall	.+2426   	; 0x267e <printf>
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	ff 91       	pop	r31
    1d0e:	ef 91       	pop	r30
    1d10:	bf 91       	pop	r27
    1d12:	af 91       	pop	r26
    1d14:	9f 91       	pop	r25
    1d16:	8f 91       	pop	r24
    1d18:	7f 91       	pop	r23
    1d1a:	6f 91       	pop	r22
    1d1c:	5f 91       	pop	r21
    1d1e:	4f 91       	pop	r20
    1d20:	3f 91       	pop	r19
    1d22:	2f 91       	pop	r18
    1d24:	0f 90       	pop	r0
    1d26:	0b be       	out	0x3b, r0	; 59
    1d28:	0f 90       	pop	r0
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	0f 90       	pop	r0
    1d2e:	1f 90       	pop	r1
    1d30:	18 95       	reti
	
	if (!(PORTA.IN & BUTTON0)) {
		return BTN1;
	} else if (!(PORTA.IN & BUTTON1)) {
		return BTN2;
	} else if (!(PORTA.IN & BUTTON2)) {
    1d32:	80 91 08 06 	lds	r24, 0x0608
    1d36:	87 fd       	sbrc	r24, 7
    1d38:	04 c0       	rjmp	.+8      	; 0x1d42 <__vector_34+0x8c>
		return BTN3;
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	d8 cf       	rjmp	.-80     	; 0x1cee <__vector_34+0x38>
}

button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
		return BTN1;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	d6 cf       	rjmp	.-84     	; 0x1cee <__vector_34+0x38>
	} else if (!(PORTA.IN & BUTTON1)) {
		return BTN2;
	} else if (!(PORTA.IN & BUTTON2)) {
		return BTN3;
	} else if (!(PORTB.IN & BUTTON3)) {
    1d42:	80 91 28 06 	lds	r24, 0x0628
    1d46:	80 fd       	sbrc	r24, 0
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <__vector_34+0x98>
		return BTN4;
    1d4a:	84 e0       	ldi	r24, 0x04	; 4
    1d4c:	d0 cf       	rjmp	.-96     	; 0x1cee <__vector_34+0x38>
	} else {
		return NONE;
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	ce cf       	rjmp	.-100    	; 0x1cee <__vector_34+0x38>

00001d52 <__vector_10>:
	strcat(buffer,buffer_minutes);
	
	ht1632c_scroll_print(buffer,2,2);
}

ISR(RTC_OVF_vect) {
    1d52:	1f 92       	push	r1
    1d54:	0f 92       	push	r0
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	0f 92       	push	r0
    1d5a:	11 24       	eor	r1, r1
    1d5c:	2f 93       	push	r18
    1d5e:	3f 93       	push	r19
    1d60:	4f 93       	push	r20
    1d62:	5f 93       	push	r21
    1d64:	6f 93       	push	r22
    1d66:	7f 93       	push	r23
    1d68:	8f 93       	push	r24
    1d6a:	9f 93       	push	r25
    1d6c:	af 93       	push	r26
    1d6e:	bf 93       	push	r27
    1d70:	ef 93       	push	r30
	if (++time.seconds == 60) {
    1d72:	80 91 66 29 	lds	r24, 0x2966
    1d76:	8f 5f       	subi	r24, 0xFF	; 255
    1d78:	80 93 66 29 	sts	0x2966, r24
    1d7c:	8c 33       	cpi	r24, 0x3C	; 60
    1d7e:	81 f0       	breq	.+32     	; 0x1da0 <__vector_10+0x4e>
			time.minutes = 0;
		} else {
			//rtc_update_display(BOTTOM,time.minutes);
		}
	}
}
    1d80:	ef 91       	pop	r30
    1d82:	bf 91       	pop	r27
    1d84:	af 91       	pop	r26
    1d86:	9f 91       	pop	r25
    1d88:	8f 91       	pop	r24
    1d8a:	7f 91       	pop	r23
    1d8c:	6f 91       	pop	r22
    1d8e:	5f 91       	pop	r21
    1d90:	4f 91       	pop	r20
    1d92:	3f 91       	pop	r19
    1d94:	2f 91       	pop	r18
    1d96:	0f 90       	pop	r0
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	0f 90       	pop	r0
    1d9c:	1f 90       	pop	r1
    1d9e:	18 95       	reti
}

ISR(RTC_OVF_vect) {
	if (++time.seconds == 60) {
		
		time.seconds = 0;
    1da0:	10 92 66 29 	sts	0x2966, r1
			
		if (++time.minutes == 60) {
    1da4:	80 91 67 29 	lds	r24, 0x2967
    1da8:	8f 5f       	subi	r24, 0xFF	; 255
    1daa:	80 93 67 29 	sts	0x2967, r24
    1dae:	8c 33       	cpi	r24, 0x3C	; 60
    1db0:	39 f7       	brne	.-50     	; 0x1d80 <__vector_10+0x2e>
			
			time.minutes = 0;
    1db2:	10 92 67 29 	sts	0x2967, r1
			//rtc_update_display(BOTTOM,time.minutes);
			
			if (++time.hours == 24) {
    1db6:	80 91 68 29 	lds	r24, 0x2968
    1dba:	8f 5f       	subi	r24, 0xFF	; 255
    1dbc:	80 93 68 29 	sts	0x2968, r24
    1dc0:	88 31       	cpi	r24, 0x18	; 24
    1dc2:	f1 f6       	brne	.-68     	; 0x1d80 <__vector_10+0x2e>
				time.weeks += (++time.days)/7;
    1dc4:	e0 91 6b 29 	lds	r30, 0x296B
    1dc8:	40 91 69 29 	lds	r20, 0x2969
    1dcc:	50 91 6a 29 	lds	r21, 0x296A
    1dd0:	4f 5f       	subi	r20, 0xFF	; 255
    1dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd4:	40 93 69 29 	sts	0x2969, r20
    1dd8:	50 93 6a 29 	sts	0x296A, r21
    1ddc:	9a 01       	movw	r18, r20
    1dde:	a3 e9       	ldi	r26, 0x93	; 147
    1de0:	b4 e2       	ldi	r27, 0x24	; 36
    1de2:	cd d3       	rcall	.+1946   	; 0x257e <__umulhisi3>
    1de4:	28 1b       	sub	r18, r24
    1de6:	39 0b       	sbc	r19, r25
    1de8:	36 95       	lsr	r19
    1dea:	27 95       	ror	r18
    1dec:	28 0f       	add	r18, r24
    1dee:	39 1f       	adc	r19, r25
    1df0:	36 95       	lsr	r19
    1df2:	27 95       	ror	r18
    1df4:	36 95       	lsr	r19
    1df6:	27 95       	ror	r18
    1df8:	e2 0f       	add	r30, r18
    1dfa:	e0 93 6b 29 	sts	0x296B, r30
				time.years += time.weeks/52;
    1dfe:	8f e4       	ldi	r24, 0x4F	; 79
    1e00:	e8 9f       	mul	r30, r24
    1e02:	e1 2d       	mov	r30, r1
    1e04:	11 24       	eor	r1, r1
    1e06:	e2 95       	swap	r30
    1e08:	ef 70       	andi	r30, 0x0F	; 15
    1e0a:	80 91 6c 29 	lds	r24, 0x296C
    1e0e:	90 91 6d 29 	lds	r25, 0x296D
    1e12:	8e 0f       	add	r24, r30
    1e14:	91 1d       	adc	r25, r1
    1e16:	80 93 6c 29 	sts	0x296C, r24
    1e1a:	90 93 6d 29 	sts	0x296D, r25
				time.hours = 0;
    1e1e:	10 92 68 29 	sts	0x2968, r1
    1e22:	ae cf       	rjmp	.-164    	; 0x1d80 <__vector_10+0x2e>

00001e24 <twi_setup>:
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
}
    1e24:	e0 e8       	ldi	r30, 0x80	; 128
    1e26:	f4 e0       	ldi	r31, 0x04	; 4
    1e28:	12 82       	std	Z+2, r1	; 0x02
    1e2a:	89 e0       	ldi	r24, 0x09	; 9
    1e2c:	85 83       	std	Z+5, r24	; 0x05
    1e2e:	88 e0       	ldi	r24, 0x08	; 8
    1e30:	81 83       	std	Z+1, r24	; 0x01
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	84 83       	std	Z+4, r24	; 0x04
    1e36:	08 95       	ret

00001e38 <twi_read_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
uint8_t* data,
uint8_t length)
{
    1e38:	ef 92       	push	r14
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	dc 01       	movw	r26, r24
	uint8_t error_code;
	uint8_t len = length;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    1e40:	76 2f       	mov	r23, r22
    1e42:	77 0f       	add	r23, r23
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    1e44:	16 96       	adiw	r26, 0x06	; 6
    1e46:	7c 93       	st	X, r23
    1e48:	16 97       	sbiw	r26, 0x06	; 6

	timeout_remaining = (timeout_ms * 100);
    1e4a:	84 e6       	ldi	r24, 0x64	; 100
    1e4c:	48 9f       	mul	r20, r24
    1e4e:	a0 01       	movw	r20, r0
    1e50:	11 24       	eor	r1, r1
	while (timeout_remaining)
    1e52:	41 15       	cp	r20, r1
    1e54:	51 05       	cpc	r21, r1
    1e56:	01 f1       	breq	.+64     	; 0x1e98 <twi_read_packet+0x60>
    1e58:	fa 01       	movw	r30, r20
    1e5a:	0d c0       	rjmp	.+26     	; 0x1e76 <twi_read_packet+0x3e>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    1e5c:	39 2f       	mov	r19, r25
    1e5e:	30 75       	andi	r19, 0x50	; 80
    1e60:	30 35       	cpi	r19, 0x50	; 80
    1e62:	f9 f0       	breq	.+62     	; 0x1ea2 <twi_read_packet+0x6a>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    1e64:	90 7c       	andi	r25, 0xC0	; 192
    1e66:	29 f5       	brne	.+74     	; 0x1eb2 <twi_read_packet+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e68:	8a e6       	ldi	r24, 0x6A	; 106
    1e6a:	8a 95       	dec	r24
    1e6c:	f1 f7       	brne	.-4      	; 0x1e6a <twi_read_packet+0x32>
    1e6e:	00 c0       	rjmp	.+0      	; 0x1e70 <twi_read_packet+0x38>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    1e70:	31 97       	sbiw	r30, 0x01	; 1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    1e72:	30 97       	sbiw	r30, 0x00	; 0
    1e74:	89 f0       	breq	.+34     	; 0x1e98 <twi_read_packet+0x60>
	{
		uint8_t status = TWI->MASTER.STATUS;
    1e76:	14 96       	adiw	r26, 0x04	; 4
    1e78:	9c 91       	ld	r25, X
    1e7a:	14 97       	sbiw	r26, 0x04	; 4

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    1e7c:	39 2f       	mov	r19, r25
    1e7e:	38 74       	andi	r19, 0x48	; 72
    1e80:	38 34       	cpi	r19, 0x48	; 72
    1e82:	61 f7       	brne	.-40     	; 0x1e5c <twi_read_packet+0x24>
		{
			TWI->MASTER.ADDR = slave_address;
    1e84:	16 96       	adiw	r26, 0x06	; 6
    1e86:	7c 93       	st	X, r23
    1e88:	16 97       	sbiw	r26, 0x06	; 6
    1e8a:	8a e6       	ldi	r24, 0x6A	; 106
    1e8c:	8a 95       	dec	r24
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <twi_read_packet+0x54>
    1e90:	00 c0       	rjmp	.+0      	; 0x1e92 <twi_read_packet+0x5a>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    1e92:	31 97       	sbiw	r30, 0x01	; 1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    1e94:	30 97       	sbiw	r30, 0x00	; 0
    1e96:	79 f7       	brne	.-34     	; 0x1e76 <twi_read_packet+0x3e>
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    1e98:	14 96       	adiw	r26, 0x04	; 4
    1e9a:	8c 91       	ld	r24, X
    1e9c:	14 97       	sbiw	r26, 0x04	; 4
    1e9e:	85 ff       	sbrs	r24, 5
    1ea0:	03 c0       	rjmp	.+6      	; 0x1ea8 <twi_read_packet+0x70>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1ea2:	87 e0       	ldi	r24, 0x07	; 7
    1ea4:	13 96       	adiw	r26, 0x03	; 3
    1ea6:	8c 93       	st	X, r24
		}

		twi_stop_transmission(TWI);
	}

	return len;
    1ea8:	8e 2d       	mov	r24, r14
}
    1eaa:	1f 91       	pop	r17
    1eac:	0f 91       	pop	r16
    1eae:	ef 90       	pop	r14
    1eb0:	08 95       	ret
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    1eb2:	17 96       	adiw	r26, 0x07	; 7
    1eb4:	2c 93       	st	X, r18
    1eb6:	17 97       	sbiw	r26, 0x07	; 7

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    1eb8:	14 96       	adiw	r26, 0x04	; 4
    1eba:	9c 91       	ld	r25, X
    1ebc:	14 97       	sbiw	r26, 0x04	; 4
    1ebe:	96 ff       	sbrs	r25, 6
    1ec0:	fb cf       	rjmp	.-10     	; 0x1eb8 <twi_read_packet+0x80>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    1ec2:	14 96       	adiw	r26, 0x04	; 4
    1ec4:	8c 91       	ld	r24, X
    1ec6:	14 97       	sbiw	r26, 0x04	; 4
    1ec8:	86 ff       	sbrs	r24, 6
    1eca:	25 c0       	rjmp	.+74     	; 0x1f16 <twi_read_packet+0xde>
    1ecc:	14 96       	adiw	r26, 0x04	; 4
    1ece:	8c 91       	ld	r24, X
    1ed0:	14 97       	sbiw	r26, 0x04	; 4
    1ed2:	84 fd       	sbrc	r24, 4
    1ed4:	20 c0       	rjmp	.+64     	; 0x1f16 <twi_read_packet+0xde>
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
    1ed6:	66 0f       	add	r22, r22
    1ed8:	61 60       	ori	r22, 0x01	; 1
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    1eda:	16 96       	adiw	r26, 0x06	; 6
    1edc:	6c 93       	st	X, r22
    1ede:	16 97       	sbiw	r26, 0x06	; 6
    1ee0:	0f c0       	rjmp	.+30     	; 0x1f00 <twi_read_packet+0xc8>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    1ee2:	89 2f       	mov	r24, r25
    1ee4:	80 75       	andi	r24, 0x50	; 80
    1ee6:	80 35       	cpi	r24, 0x50	; 80
    1ee8:	01 f1       	breq	.+64     	; 0x1f2a <twi_read_packet+0xf2>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    1eea:	90 7c       	andi	r25, 0xC0	; 192
    1eec:	39 f5       	brne	.+78     	; 0x1f3c <twi_read_packet+0x104>
    1eee:	8a e6       	ldi	r24, 0x6A	; 106
    1ef0:	8a 95       	dec	r24
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <twi_read_packet+0xb8>
    1ef4:	00 c0       	rjmp	.+0      	; 0x1ef6 <twi_read_packet+0xbe>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    1ef6:	41 50       	subi	r20, 0x01	; 1
    1ef8:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    1efa:	41 15       	cp	r20, r1
    1efc:	51 05       	cpc	r21, r1
    1efe:	81 f0       	breq	.+32     	; 0x1f20 <twi_read_packet+0xe8>
	{
		uint8_t status = TWI->MASTER.STATUS;
    1f00:	14 96       	adiw	r26, 0x04	; 4
    1f02:	9c 91       	ld	r25, X
    1f04:	14 97       	sbiw	r26, 0x04	; 4

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    1f06:	89 2f       	mov	r24, r25
    1f08:	88 74       	andi	r24, 0x48	; 72
    1f0a:	88 34       	cpi	r24, 0x48	; 72
    1f0c:	51 f7       	brne	.-44     	; 0x1ee2 <twi_read_packet+0xaa>
		{
			TWI->MASTER.ADDR = slave_address;
    1f0e:	16 96       	adiw	r26, 0x06	; 6
    1f10:	6c 93       	st	X, r22
    1f12:	16 97       	sbiw	r26, 0x06	; 6
    1f14:	ec cf       	rjmp	.-40     	; 0x1eee <twi_read_packet+0xb6>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    1f16:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return len;
}
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	ef 90       	pop	r14
    1f1e:	08 95       	ret
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    1f20:	14 96       	adiw	r26, 0x04	; 4
    1f22:	8c 91       	ld	r24, X
    1f24:	14 97       	sbiw	r26, 0x04	; 4
    1f26:	85 ff       	sbrs	r24, 5
    1f28:	04 c0       	rjmp	.+8      	; 0x1f32 <twi_read_packet+0xfa>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1f2a:	87 e0       	ldi	r24, 0x07	; 7
    1f2c:	13 96       	adiw	r26, 0x03	; 3
    1f2e:	8c 93       	st	X, r24
    1f30:	13 97       	sbiw	r26, 0x03	; 3
    1f32:	87 e0       	ldi	r24, 0x07	; 7
    1f34:	13 96       	adiw	r26, 0x03	; 3
    1f36:	8c 93       	st	X, r24
		}

		twi_stop_transmission(TWI);
	}

	return len;
    1f38:	8e 2d       	mov	r24, r14
    1f3a:	b7 cf       	rjmp	.-146    	; 0x1eaa <twi_read_packet+0x72>
    1f3c:	2f ef       	ldi	r18, 0xFF	; 255
    1f3e:	2e 0d       	add	r18, r14
    1f40:	f8 01       	movw	r30, r16
	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1f42:	42 e0       	ldi	r20, 0x02	; 2
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm));

	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1f44:	37 e0       	ldi	r19, 0x07	; 7
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
    1f46:	2f 3f       	cpi	r18, 0xFF	; 255
    1f48:	a1 f3       	breq	.-24     	; 0x1f32 <twi_read_packet+0xfa>

uint8_t twi_receive_byte(TWI_t* const TWI, 
uint8_t* const data, 
const uint8_t end_of_data)
{
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
    1f4a:	14 96       	adiw	r26, 0x04	; 4
    1f4c:	8c 91       	ld	r24, X
    1f4e:	14 97       	sbiw	r26, 0x04	; 4
    1f50:	8c 70       	andi	r24, 0x0C	; 12
    1f52:	8c 30       	cpi	r24, 0x0C	; 12
    1f54:	71 f3       	breq	.-36     	; 0x1f32 <twi_read_packet+0xfa>
		return false;
	}

	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm));
    1f56:	14 96       	adiw	r26, 0x04	; 4
    1f58:	9c 91       	ld	r25, X
    1f5a:	14 97       	sbiw	r26, 0x04	; 4
    1f5c:	97 ff       	sbrs	r25, 7
    1f5e:	fb cf       	rjmp	.-10     	; 0x1f56 <twi_read_packet+0x11e>

	*data = TWI->MASTER.DATA;
    1f60:	17 96       	adiw	r26, 0x07	; 7
    1f62:	8c 91       	ld	r24, X
    1f64:	17 97       	sbiw	r26, 0x07	; 7
    1f66:	81 93       	st	Z+, r24

	if (end_of_data)
    1f68:	21 11       	cpse	r18, r1
    1f6a:	05 c0       	rjmp	.+10     	; 0x1f76 <twi_read_packet+0x13e>
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1f6c:	13 96       	adiw	r26, 0x03	; 3
    1f6e:	3c 93       	st	X, r19
    1f70:	13 97       	sbiw	r26, 0x03	; 3
    1f72:	21 50       	subi	r18, 0x01	; 1
    1f74:	e8 cf       	rjmp	.-48     	; 0x1f46 <twi_read_packet+0x10e>
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1f76:	13 96       	adiw	r26, 0x03	; 3
    1f78:	4c 93       	st	X, r20
    1f7a:	13 97       	sbiw	r26, 0x03	; 3
    1f7c:	21 50       	subi	r18, 0x01	; 1
    1f7e:	e3 cf       	rjmp	.-58     	; 0x1f46 <twi_read_packet+0x10e>

00001f80 <twi_write_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    1f80:	ef 92       	push	r14
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	fc 01       	movw	r30, r24
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    1f88:	66 0f       	add	r22, r22
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    1f8a:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    1f8c:	84 e6       	ldi	r24, 0x64	; 100
    1f8e:	48 9f       	mul	r20, r24
    1f90:	a0 01       	movw	r20, r0
    1f92:	11 24       	eor	r1, r1
	while (timeout_remaining)
    1f94:	41 15       	cp	r20, r1
    1f96:	51 05       	cpc	r21, r1
    1f98:	81 f4       	brne	.+32     	; 0x1fba <twi_write_packet+0x3a>
    1f9a:	16 c0       	rjmp	.+44     	; 0x1fc8 <twi_write_packet+0x48>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    1f9c:	39 2f       	mov	r19, r25
    1f9e:	30 75       	andi	r19, 0x50	; 80
    1fa0:	30 35       	cpi	r19, 0x50	; 80
    1fa2:	a9 f0       	breq	.+42     	; 0x1fce <twi_write_packet+0x4e>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    1fa4:	90 7c       	andi	r25, 0xC0	; 192
    1fa6:	d1 f4       	brne	.+52     	; 0x1fdc <twi_write_packet+0x5c>
    1fa8:	8a e6       	ldi	r24, 0x6A	; 106
    1faa:	8a 95       	dec	r24
    1fac:	f1 f7       	brne	.-4      	; 0x1faa <twi_write_packet+0x2a>
    1fae:	00 c0       	rjmp	.+0      	; 0x1fb0 <twi_write_packet+0x30>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    1fb0:	41 50       	subi	r20, 0x01	; 1
    1fb2:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    1fb4:	41 15       	cp	r20, r1
    1fb6:	51 05       	cpc	r21, r1
    1fb8:	39 f0       	breq	.+14     	; 0x1fc8 <twi_write_packet+0x48>
	{
		uint8_t status = TWI->MASTER.STATUS;
    1fba:	94 81       	ldd	r25, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    1fbc:	39 2f       	mov	r19, r25
    1fbe:	38 74       	andi	r19, 0x48	; 72
    1fc0:	38 34       	cpi	r19, 0x48	; 72
    1fc2:	61 f7       	brne	.-40     	; 0x1f9c <twi_write_packet+0x1c>
		{
			TWI->MASTER.ADDR = slave_address;
    1fc4:	66 83       	std	Z+6, r22	; 0x06
    1fc6:	f0 cf       	rjmp	.-32     	; 0x1fa8 <twi_write_packet+0x28>
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    1fc8:	84 81       	ldd	r24, Z+4	; 0x04
    1fca:	85 ff       	sbrs	r24, 5
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <twi_write_packet+0x52>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1fce:	87 e0       	ldi	r24, 0x07	; 7
    1fd0:	83 83       	std	Z+3, r24	; 0x03
    1fd2:	8e 2d       	mov	r24, r14

		twi_stop_transmission(TWI);
	}

	return length;
    1fd4:	1f 91       	pop	r17
    1fd6:	0f 91       	pop	r16
    1fd8:	ef 90       	pop	r14
    1fda:	08 95       	ret
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    1fdc:	27 83       	std	Z+7, r18	; 0x07

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    1fde:	94 81       	ldd	r25, Z+4	; 0x04
    1fe0:	96 ff       	sbrs	r25, 6
    1fe2:	fd cf       	rjmp	.-6      	; 0x1fde <twi_write_packet+0x5e>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    1fe4:	84 81       	ldd	r24, Z+4	; 0x04
    1fe6:	86 ff       	sbrs	r24, 6
    1fe8:	13 c0       	rjmp	.+38     	; 0x2010 <twi_write_packet+0x90>
    1fea:	84 81       	ldd	r24, Z+4	; 0x04
    1fec:	84 fd       	sbrc	r24, 4
    1fee:	10 c0       	rjmp	.+32     	; 0x2010 <twi_write_packet+0x90>
    1ff0:	d8 01       	movw	r26, r16
    1ff2:	8f ef       	ldi	r24, 0xFF	; 255
    1ff4:	8e 0d       	add	r24, r14
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    1ff6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ff8:	41 f0       	breq	.+16     	; 0x200a <twi_write_packet+0x8a>
		{
			if (!(twi_send_byte(TWI, *(data++))))
    1ffa:	9d 91       	ld	r25, X+
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    1ffc:	97 83       	std	Z+7, r25	; 0x07

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    1ffe:	94 81       	ldd	r25, Z+4	; 0x04
    2000:	96 ff       	sbrs	r25, 6
    2002:	fd cf       	rjmp	.-6      	; 0x1ffe <twi_write_packet+0x7e>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    2004:	94 81       	ldd	r25, Z+4	; 0x04
    2006:	96 fd       	sbrc	r25, 6
    2008:	08 c0       	rjmp	.+16     	; 0x201a <twi_write_packet+0x9a>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    200a:	97 e0       	ldi	r25, 0x07	; 7
    200c:	93 83       	std	Z+3, r25	; 0x03
    200e:	e2 cf       	rjmp	.-60     	; 0x1fd4 <twi_write_packet+0x54>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    2010:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return length;
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	ef 90       	pop	r14
    2018:	08 95       	ret
{
	TWI->MASTER.DATA = data;

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    201a:	94 81       	ldd	r25, Z+4	; 0x04
    201c:	2f ef       	ldi	r18, 0xFF	; 255
    201e:	28 0f       	add	r18, r24
    2020:	94 fd       	sbrc	r25, 4
    2022:	f3 cf       	rjmp	.-26     	; 0x200a <twi_write_packet+0x8a>
    2024:	82 2f       	mov	r24, r18
    2026:	e7 cf       	rjmp	.-50     	; 0x1ff6 <twi_write_packet+0x76>

00002028 <Si114xPauseAll>:
{
	return _sendCmd(si114x_handle,0x0B);
}

s16 Si114xPauseAll(HANDLE si114x_handle)
{
    2028:	0f 93       	push	r16
    202a:	1f 93       	push	r17
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	ec 01       	movw	r28, r24
	while (1)
	{
		// Keep sending nops until the response is zero
		while (1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    2032:	60 e2       	ldi	r22, 0x20	; 32
    2034:	ce 01       	movw	r24, r28
    2036:	b2 d0       	rcall	.+356    	; 0x219c <Si114xReadFromRegister>

	s16  response;
	s16  retval;

	// Get the response register contents
	if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    2038:	60 e2       	ldi	r22, 0x20	; 32
	while (1)
	{
		// Keep sending nops until the response is zero
		while (1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    203a:	89 2b       	or	r24, r25
    203c:	61 f5       	brne	.+88     	; 0x2096 <Si114xPauseAll+0x6e>

	s16  response;
	s16  retval;

	// Get the response register contents
	if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    203e:	ce 01       	movw	r24, r28
    2040:	ad d0       	rcall	.+346    	; 0x219c <Si114xReadFromRegister>
    2042:	8c 01       	movw	r16, r24
    2044:	97 fd       	sbrc	r25, 7
    2046:	16 c0       	rjmp	.+44     	; 0x2074 <Si114xPauseAll+0x4c>
    2048:	02 c0       	rjmp	.+4      	; 0x204e <Si114xPauseAll+0x26>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    204a:	97 fd       	sbrc	r25, 7
    204c:	13 c0       	rjmp	.+38     	; 0x2074 <Si114xPauseAll+0x4c>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    204e:	60 e3       	ldi	r22, 0x30	; 48
    2050:	ce 01       	movw	r24, r28
    2052:	a4 d0       	rcall	.+328    	; 0x219c <Si114xReadFromRegister>
		if (retval == 1) break;
    2054:	81 30       	cpi	r24, 0x01	; 1
    2056:	91 05       	cpc	r25, r1
    2058:	c1 f7       	brne	.-16     	; 0x204a <Si114xPauseAll+0x22>
	{
		if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

		if(command==0) break; // Skip if the command is NOP

		retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    205a:	60 e2       	ldi	r22, 0x20	; 32
    205c:	ce 01       	movw	r24, r28
    205e:	9e d0       	rcall	.+316    	; 0x219c <Si114xReadFromRegister>
		if(retval==response) break;
    2060:	80 17       	cp	r24, r16
    2062:	91 07       	cpc	r25, r17
    2064:	39 f1       	breq	.+78     	; 0x20b4 <Si114xPauseAll+0x8c>
		else if(retval<0) return retval;
    2066:	97 fd       	sbrc	r25, 7
    2068:	05 c0       	rjmp	.+10     	; 0x2074 <Si114xPauseAll+0x4c>
    206a:	8c 01       	movw	r16, r24
    206c:	f0 cf       	rjmp	.-32     	; 0x204e <Si114xPauseAll+0x26>
	while(1)
	{

		if(command==0) break; // Skip if the command is NOP

		retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    206e:	60 e2       	ldi	r22, 0x20	; 32
    2070:	ce 01       	movw	r24, r28
    2072:	94 d0       	rcall	.+296    	; 0x219c <Si114xReadFromRegister>
		_PsAlsPause(si114x_handle);

		// Wait for response
		while(1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    2074:	60 e2       	ldi	r22, 0x20	; 32
    2076:	ce 01       	movw	r24, r28
    2078:	91 d0       	rcall	.+290    	; 0x219c <Si114xReadFromRegister>
    207a:	89 2b       	or	r24, r25
    207c:	d9 f3       	breq	.-10     	; 0x2074 <Si114xPauseAll+0x4c>
			break;
		}

		// When the PsAlsPause() response is good, we expect it to be a '1'.
		if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
    207e:	60 e2       	ldi	r22, 0x20	; 32
    2080:	ce 01       	movw	r24, r28
    2082:	8c d0       	rcall	.+280    	; 0x219c <Si114xReadFromRegister>
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	a9 f6       	brne	.-86     	; 0x2032 <Si114xPauseAll+0xa>
		break;  // otherwise, start over.
	}
	return 0;
}
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	df 91       	pop	r29
    208e:	cf 91       	pop	r28
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	08 95       	ret

	s16  response;
	s16  retval;

	// Get the response register contents
	if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    2096:	ce 01       	movw	r24, r28
    2098:	81 d0       	rcall	.+258    	; 0x219c <Si114xReadFromRegister>
    209a:	97 fd       	sbrc	r25, 7
    209c:	ca cf       	rjmp	.-108    	; 0x2032 <Si114xPauseAll+0xa>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    209e:	60 e3       	ldi	r22, 0x30	; 48
    20a0:	ce 01       	movw	r24, r28
    20a2:	7c d0       	rcall	.+248    	; 0x219c <Si114xReadFromRegister>
		if (retval == 1) break;
    20a4:	81 30       	cpi	r24, 0x01	; 1
    20a6:	91 05       	cpc	r25, r1
    20a8:	c1 f7       	brne	.-16     	; 0x209a <Si114xPauseAll+0x72>
		else if(retval<0) return retval;
		else response = retval;
	}

	// Send the Command
	if ((retval=Si114xWriteToRegister(si114x_handle, REG_COMMAND, command)) !=0)
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	68 e1       	ldi	r22, 0x18	; 24
    20ae:	ce 01       	movw	r24, r28
    20b0:	58 d0       	rcall	.+176    	; 0x2162 <Si114xWriteToRegister>
    20b2:	bf cf       	rjmp	.-130    	; 0x2032 <Si114xPauseAll+0xa>
    20b4:	4b e0       	ldi	r20, 0x0B	; 11
    20b6:	68 e1       	ldi	r22, 0x18	; 24
    20b8:	ce 01       	movw	r24, r28
    20ba:	53 d0       	rcall	.+166    	; 0x2162 <Si114xWriteToRegister>
    20bc:	89 2b       	or	r24, r25
    20be:	d1 f6       	brne	.-76     	; 0x2074 <Si114xPauseAll+0x4c>
    20c0:	17 fd       	sbrc	r17, 7
    20c2:	d5 cf       	rjmp	.-86     	; 0x206e <Si114xPauseAll+0x46>
	while(1)
	{

		if(command==0) break; // Skip if the command is NOP

		retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    20c4:	60 e2       	ldi	r22, 0x20	; 32
    20c6:	ce 01       	movw	r24, r28
    20c8:	69 d0       	rcall	.+210    	; 0x219c <Si114xReadFromRegister>
		if (retval != response) break;
    20ca:	08 17       	cp	r16, r24
    20cc:	19 07       	cpc	r17, r25
    20ce:	d1 f3       	breq	.-12     	; 0x20c4 <Si114xPauseAll+0x9c>
		_PsAlsPause(si114x_handle);

		// Wait for response
		while(1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    20d0:	60 e2       	ldi	r22, 0x20	; 32
    20d2:	ce 01       	movw	r24, r28
    20d4:	63 d0       	rcall	.+198    	; 0x219c <Si114xReadFromRegister>
    20d6:	89 2b       	or	r24, r25
    20d8:	69 f2       	breq	.-102    	; 0x2074 <Si114xPauseAll+0x4c>
    20da:	d1 cf       	rjmp	.-94     	; 0x207e <Si114xPauseAll+0x56>

000020dc <si114x_reset>:
	return 0;
}


s16 si114x_reset(HANDLE si114x_handle)
{
    20dc:	0f 93       	push	r16
    20de:	1f 93       	push	r17
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	8c 01       	movw	r16, r24
	//
	// delay_10ms();
	// delay_10ms();
	// delay_10ms();

	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    20e6:	40 e0       	ldi	r20, 0x00	; 0
    20e8:	68 e0       	ldi	r22, 0x08	; 8
    20ea:	3b d0       	rcall	.+118    	; 0x2162 <Si114xWriteToRegister>
    20ec:	ec 01       	movw	r28, r24
	retval+=Si114xPauseAll(si114x_handle);
    20ee:	c8 01       	movw	r24, r16
    20f0:	9b df       	rcall	.-202    	; 0x2028 <Si114xPauseAll>
    20f2:	c8 0f       	add	r28, r24
    20f4:	d9 1f       	adc	r29, r25

	// The clearing of the registers could be redundant, but it is okay.
	// This is to make sure that these registers are cleared.
	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	68 e0       	ldi	r22, 0x08	; 8
    20fa:	c8 01       	movw	r24, r16
    20fc:	32 d0       	rcall	.+100    	; 0x2162 <Si114xWriteToRegister>
    20fe:	c8 0f       	add	r28, r24
    2100:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    2102:	40 e0       	ldi	r20, 0x00	; 0
    2104:	64 e0       	ldi	r22, 0x04	; 4
    2106:	c8 01       	movw	r24, r16
    2108:	2c d0       	rcall	.+88     	; 0x2162 <Si114xWriteToRegister>
    210a:	c8 0f       	add	r28, r24
    210c:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	65 e0       	ldi	r22, 0x05	; 5
    2112:	c8 01       	movw	r24, r16
    2114:	26 d0       	rcall	.+76     	; 0x2162 <Si114xWriteToRegister>
    2116:	c8 0f       	add	r28, r24
    2118:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	66 e0       	ldi	r22, 0x06	; 6
    211e:	c8 01       	movw	r24, r16
    2120:	20 d0       	rcall	.+64     	; 0x2162 <Si114xWriteToRegister>
    2122:	c8 0f       	add	r28, r24
    2124:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	63 e0       	ldi	r22, 0x03	; 3
    212a:	c8 01       	movw	r24, r16
    212c:	1a d0       	rcall	.+52     	; 0x2162 <Si114xWriteToRegister>
    212e:	c8 0f       	add	r28, r24
    2130:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
    2132:	4f ef       	ldi	r20, 0xFF	; 255
    2134:	61 e2       	ldi	r22, 0x21	; 33
    2136:	c8 01       	movw	r24, r16
    2138:	14 d0       	rcall	.+40     	; 0x2162 <Si114xWriteToRegister>
    213a:	c8 0f       	add	r28, r24
    213c:	d9 1f       	adc	r29, r25

	// Perform the Reset Command
	retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	68 e1       	ldi	r22, 0x18	; 24
    2142:	c8 01       	movw	r24, r16
    2144:	0e d0       	rcall	.+28     	; 0x2162 <Si114xWriteToRegister>
    2146:	c8 0f       	add	r28, r24
    2148:	d9 1f       	adc	r29, r25

	// Delay for 10 ms. This delay is needed to allow the Si114x
	// to perform internal reset sequence.
	delay_10ms();
    214a:	44 d0       	rcall	.+136    	; 0x21d4 <delay_10ms>

	// Write Hardware Key
	retval+=Si114xWriteToRegister(si114x_handle, REG_HW_KEY, HW_KEY_VAL0);
    214c:	47 e1       	ldi	r20, 0x17	; 23
    214e:	67 e0       	ldi	r22, 0x07	; 7
    2150:	c8 01       	movw	r24, r16
    2152:	07 d0       	rcall	.+14     	; 0x2162 <Si114xWriteToRegister>

	return retval;
}
    2154:	8c 0f       	add	r24, r28
    2156:	9d 1f       	adc	r25, r29
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	08 95       	ret

00002162 <Si114xWriteToRegister>:

s16 Si114xBlockRead(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
}
    2162:	ef 92       	push	r14
    2164:	0f 93       	push	r16
    2166:	1f 93       	push	r17
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	1f 92       	push	r1
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	26 2f       	mov	r18, r22
    2174:	49 83       	std	Y+1, r20	; 0x01
    2176:	ee 24       	eor	r14, r14
    2178:	e3 94       	inc	r14
    217a:	8e 01       	movw	r16, r28
    217c:	0f 5f       	subi	r16, 0xFF	; 255
    217e:	1f 4f       	sbci	r17, 0xFF	; 255
    2180:	48 ee       	ldi	r20, 0xE8	; 232
    2182:	6a e5       	ldi	r22, 0x5A	; 90
    2184:	80 e8       	ldi	r24, 0x80	; 128
    2186:	94 e0       	ldi	r25, 0x04	; 4
    2188:	fb de       	rcall	.-522    	; 0x1f80 <twi_write_packet>
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	0f 90       	pop	r0
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	1f 91       	pop	r17
    2196:	0f 91       	pop	r16
    2198:	ef 90       	pop	r14
    219a:	08 95       	ret

0000219c <Si114xReadFromRegister>:
    219c:	ef 92       	push	r14
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	1f 92       	push	r1
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	26 2f       	mov	r18, r22
    21ae:	ee 24       	eor	r14, r14
    21b0:	e3 94       	inc	r14
    21b2:	8e 01       	movw	r16, r28
    21b4:	0f 5f       	subi	r16, 0xFF	; 255
    21b6:	1f 4f       	sbci	r17, 0xFF	; 255
    21b8:	48 ee       	ldi	r20, 0xE8	; 232
    21ba:	6a e5       	ldi	r22, 0x5A	; 90
    21bc:	80 e8       	ldi	r24, 0x80	; 128
    21be:	94 e0       	ldi	r25, 0x04	; 4
    21c0:	3b de       	rcall	.-906    	; 0x1e38 <twi_read_packet>
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	0f 90       	pop	r0
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	1f 91       	pop	r17
    21ce:	0f 91       	pop	r16
    21d0:	ef 90       	pop	r14
    21d2:	08 95       	ret

000021d4 <delay_10ms>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21d4:	2f ef       	ldi	r18, 0xFF	; 255
    21d6:	89 ef       	ldi	r24, 0xF9	; 249
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	21 50       	subi	r18, 0x01	; 1
    21dc:	80 40       	sbci	r24, 0x00	; 0
    21de:	90 40       	sbci	r25, 0x00	; 0
    21e0:	e1 f7       	brne	.-8      	; 0x21da <delay_10ms+0x6>
    21e2:	00 c0       	rjmp	.+0      	; 0x21e4 <delay_10ms+0x10>
    21e4:	00 00       	nop
    21e6:	08 95       	ret

000021e8 <uart_setup>:

#include "uart.h"

void uart_setup(void) {
	
	PORTD.DIRSET = PIN3_bm; //TX
    21e8:	e0 e6       	ldi	r30, 0x60	; 96
    21ea:	f6 e0       	ldi	r31, 0x06	; 6
    21ec:	88 e0       	ldi	r24, 0x08	; 8
    21ee:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; //RX
    21f0:	84 e0       	ldi	r24, 0x04	; 4
    21f2:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
    21f4:	e0 ea       	ldi	r30, 0xA0	; 160
    21f6:	f9 e0       	ldi	r31, 0x09	; 9
    21f8:	80 e2       	ldi	r24, 0x20	; 32
    21fa:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 2094;//207;//0x1111;
    21fc:	8e e2       	ldi	r24, 0x2E	; 46
    21fe:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (-7 << 4) | (2094 >> 8);
    2200:	88 e9       	ldi	r24, 0x98	; 152
    2202:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
    2204:	83 e0       	ldi	r24, 0x03	; 3
    2206:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    2208:	88 e1       	ldi	r24, 0x18	; 24
    220a:	84 83       	std	Z+4, r24	; 0x04
    220c:	08 95       	ret

0000220e <uart_put_char>:
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    220e:	90 91 a1 09 	lds	r25, 0x09A1
    2212:	95 ff       	sbrs	r25, 5
    2214:	fc cf       	rjmp	.-8      	; 0x220e <uart_put_char>
	USARTD0.DATA = c;
    2216:	80 93 a0 09 	sts	0x09A0, r24
    221a:	08 95       	ret

0000221c <uart_get_char>:
}

char uart_get_char(void) {
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
    221c:	80 91 a1 09 	lds	r24, 0x09A1
    2220:	87 ff       	sbrs	r24, 7
    2222:	fc cf       	rjmp	.-8      	; 0x221c <uart_get_char>
	return USARTD0.DATA;
    2224:	80 91 a0 09 	lds	r24, 0x09A0
}
    2228:	08 95       	ret

0000222a <uart_write_str>:

void uart_write_str(char *str) {
	while (*str) {
    222a:	fc 01       	movw	r30, r24
    222c:	20 81       	ld	r18, Z
    222e:	22 23       	and	r18, r18
    2230:	51 f0       	breq	.+20     	; 0x2246 <uart_write_str+0x1c>
    2232:	31 96       	adiw	r30, 0x01	; 1

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2234:	80 91 a1 09 	lds	r24, 0x09A1
    2238:	85 ff       	sbrs	r24, 5
    223a:	fc cf       	rjmp	.-8      	; 0x2234 <uart_write_str+0xa>
	USARTD0.DATA = c;
    223c:	20 93 a0 09 	sts	0x09A0, r18
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
	return USARTD0.DATA;
}

void uart_write_str(char *str) {
	while (*str) {
    2240:	21 91       	ld	r18, Z+
    2242:	21 11       	cpse	r18, r1
    2244:	f7 cf       	rjmp	.-18     	; 0x2234 <uart_write_str+0xa>

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2246:	80 91 a1 09 	lds	r24, 0x09A1
    224a:	85 ff       	sbrs	r24, 5
    224c:	fc cf       	rjmp	.-8      	; 0x2246 <uart_write_str+0x1c>
	USARTD0.DATA = c;
    224e:	8d e0       	ldi	r24, 0x0D	; 13
    2250:	80 93 a0 09 	sts	0x09A0, r24

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2254:	80 91 a1 09 	lds	r24, 0x09A1
    2258:	85 ff       	sbrs	r24, 5
    225a:	fc cf       	rjmp	.-8      	; 0x2254 <uart_write_str+0x2a>
	USARTD0.DATA = c;
    225c:	8a e0       	ldi	r24, 0x0A	; 10
    225e:	80 93 a0 09 	sts	0x09A0, r24
    2262:	08 95       	ret

00002264 <__subsf3>:
    2264:	50 58       	subi	r21, 0x80	; 128

00002266 <__addsf3>:
    2266:	bb 27       	eor	r27, r27
    2268:	aa 27       	eor	r26, r26
    226a:	0e d0       	rcall	.+28     	; 0x2288 <__addsf3x>
    226c:	e5 c0       	rjmp	.+458    	; 0x2438 <__fp_round>
    226e:	d6 d0       	rcall	.+428    	; 0x241c <__fp_pscA>
    2270:	30 f0       	brcs	.+12     	; 0x227e <__addsf3+0x18>
    2272:	db d0       	rcall	.+438    	; 0x242a <__fp_pscB>
    2274:	20 f0       	brcs	.+8      	; 0x227e <__addsf3+0x18>
    2276:	31 f4       	brne	.+12     	; 0x2284 <__addsf3+0x1e>
    2278:	9f 3f       	cpi	r25, 0xFF	; 255
    227a:	11 f4       	brne	.+4      	; 0x2280 <__addsf3+0x1a>
    227c:	1e f4       	brtc	.+6      	; 0x2284 <__addsf3+0x1e>
    227e:	cb c0       	rjmp	.+406    	; 0x2416 <__fp_nan>
    2280:	0e f4       	brtc	.+2      	; 0x2284 <__addsf3+0x1e>
    2282:	e0 95       	com	r30
    2284:	e7 fb       	bst	r30, 7
    2286:	c1 c0       	rjmp	.+386    	; 0x240a <__fp_inf>

00002288 <__addsf3x>:
    2288:	e9 2f       	mov	r30, r25
    228a:	e7 d0       	rcall	.+462    	; 0x245a <__fp_split3>
    228c:	80 f3       	brcs	.-32     	; 0x226e <__addsf3+0x8>
    228e:	ba 17       	cp	r27, r26
    2290:	62 07       	cpc	r22, r18
    2292:	73 07       	cpc	r23, r19
    2294:	84 07       	cpc	r24, r20
    2296:	95 07       	cpc	r25, r21
    2298:	18 f0       	brcs	.+6      	; 0x22a0 <__addsf3x+0x18>
    229a:	71 f4       	brne	.+28     	; 0x22b8 <__addsf3x+0x30>
    229c:	9e f5       	brtc	.+102    	; 0x2304 <__addsf3x+0x7c>
    229e:	ff c0       	rjmp	.+510    	; 0x249e <__fp_zero>
    22a0:	0e f4       	brtc	.+2      	; 0x22a4 <__addsf3x+0x1c>
    22a2:	e0 95       	com	r30
    22a4:	0b 2e       	mov	r0, r27
    22a6:	ba 2f       	mov	r27, r26
    22a8:	a0 2d       	mov	r26, r0
    22aa:	0b 01       	movw	r0, r22
    22ac:	b9 01       	movw	r22, r18
    22ae:	90 01       	movw	r18, r0
    22b0:	0c 01       	movw	r0, r24
    22b2:	ca 01       	movw	r24, r20
    22b4:	a0 01       	movw	r20, r0
    22b6:	11 24       	eor	r1, r1
    22b8:	ff 27       	eor	r31, r31
    22ba:	59 1b       	sub	r21, r25
    22bc:	99 f0       	breq	.+38     	; 0x22e4 <__addsf3x+0x5c>
    22be:	59 3f       	cpi	r21, 0xF9	; 249
    22c0:	50 f4       	brcc	.+20     	; 0x22d6 <__addsf3x+0x4e>
    22c2:	50 3e       	cpi	r21, 0xE0	; 224
    22c4:	68 f1       	brcs	.+90     	; 0x2320 <__addsf3x+0x98>
    22c6:	1a 16       	cp	r1, r26
    22c8:	f0 40       	sbci	r31, 0x00	; 0
    22ca:	a2 2f       	mov	r26, r18
    22cc:	23 2f       	mov	r18, r19
    22ce:	34 2f       	mov	r19, r20
    22d0:	44 27       	eor	r20, r20
    22d2:	58 5f       	subi	r21, 0xF8	; 248
    22d4:	f3 cf       	rjmp	.-26     	; 0x22bc <__addsf3x+0x34>
    22d6:	46 95       	lsr	r20
    22d8:	37 95       	ror	r19
    22da:	27 95       	ror	r18
    22dc:	a7 95       	ror	r26
    22de:	f0 40       	sbci	r31, 0x00	; 0
    22e0:	53 95       	inc	r21
    22e2:	c9 f7       	brne	.-14     	; 0x22d6 <__addsf3x+0x4e>
    22e4:	7e f4       	brtc	.+30     	; 0x2304 <__addsf3x+0x7c>
    22e6:	1f 16       	cp	r1, r31
    22e8:	ba 0b       	sbc	r27, r26
    22ea:	62 0b       	sbc	r22, r18
    22ec:	73 0b       	sbc	r23, r19
    22ee:	84 0b       	sbc	r24, r20
    22f0:	ba f0       	brmi	.+46     	; 0x2320 <__addsf3x+0x98>
    22f2:	91 50       	subi	r25, 0x01	; 1
    22f4:	a1 f0       	breq	.+40     	; 0x231e <__addsf3x+0x96>
    22f6:	ff 0f       	add	r31, r31
    22f8:	bb 1f       	adc	r27, r27
    22fa:	66 1f       	adc	r22, r22
    22fc:	77 1f       	adc	r23, r23
    22fe:	88 1f       	adc	r24, r24
    2300:	c2 f7       	brpl	.-16     	; 0x22f2 <__addsf3x+0x6a>
    2302:	0e c0       	rjmp	.+28     	; 0x2320 <__addsf3x+0x98>
    2304:	ba 0f       	add	r27, r26
    2306:	62 1f       	adc	r22, r18
    2308:	73 1f       	adc	r23, r19
    230a:	84 1f       	adc	r24, r20
    230c:	48 f4       	brcc	.+18     	; 0x2320 <__addsf3x+0x98>
    230e:	87 95       	ror	r24
    2310:	77 95       	ror	r23
    2312:	67 95       	ror	r22
    2314:	b7 95       	ror	r27
    2316:	f7 95       	ror	r31
    2318:	9e 3f       	cpi	r25, 0xFE	; 254
    231a:	08 f0       	brcs	.+2      	; 0x231e <__addsf3x+0x96>
    231c:	b3 cf       	rjmp	.-154    	; 0x2284 <__addsf3+0x1e>
    231e:	93 95       	inc	r25
    2320:	88 0f       	add	r24, r24
    2322:	08 f0       	brcs	.+2      	; 0x2326 <__addsf3x+0x9e>
    2324:	99 27       	eor	r25, r25
    2326:	ee 0f       	add	r30, r30
    2328:	97 95       	ror	r25
    232a:	87 95       	ror	r24
    232c:	08 95       	ret

0000232e <__fixsfsi>:
    232e:	04 d0       	rcall	.+8      	; 0x2338 <__fixunssfsi>
    2330:	68 94       	set
    2332:	b1 11       	cpse	r27, r1
    2334:	b5 c0       	rjmp	.+362    	; 0x24a0 <__fp_szero>
    2336:	08 95       	ret

00002338 <__fixunssfsi>:
    2338:	98 d0       	rcall	.+304    	; 0x246a <__fp_splitA>
    233a:	88 f0       	brcs	.+34     	; 0x235e <__fixunssfsi+0x26>
    233c:	9f 57       	subi	r25, 0x7F	; 127
    233e:	90 f0       	brcs	.+36     	; 0x2364 <__fixunssfsi+0x2c>
    2340:	b9 2f       	mov	r27, r25
    2342:	99 27       	eor	r25, r25
    2344:	b7 51       	subi	r27, 0x17	; 23
    2346:	a0 f0       	brcs	.+40     	; 0x2370 <__fixunssfsi+0x38>
    2348:	d1 f0       	breq	.+52     	; 0x237e <__fixunssfsi+0x46>
    234a:	66 0f       	add	r22, r22
    234c:	77 1f       	adc	r23, r23
    234e:	88 1f       	adc	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	1a f0       	brmi	.+6      	; 0x235a <__fixunssfsi+0x22>
    2354:	ba 95       	dec	r27
    2356:	c9 f7       	brne	.-14     	; 0x234a <__fixunssfsi+0x12>
    2358:	12 c0       	rjmp	.+36     	; 0x237e <__fixunssfsi+0x46>
    235a:	b1 30       	cpi	r27, 0x01	; 1
    235c:	81 f0       	breq	.+32     	; 0x237e <__fixunssfsi+0x46>
    235e:	9f d0       	rcall	.+318    	; 0x249e <__fp_zero>
    2360:	b1 e0       	ldi	r27, 0x01	; 1
    2362:	08 95       	ret
    2364:	9c c0       	rjmp	.+312    	; 0x249e <__fp_zero>
    2366:	67 2f       	mov	r22, r23
    2368:	78 2f       	mov	r23, r24
    236a:	88 27       	eor	r24, r24
    236c:	b8 5f       	subi	r27, 0xF8	; 248
    236e:	39 f0       	breq	.+14     	; 0x237e <__fixunssfsi+0x46>
    2370:	b9 3f       	cpi	r27, 0xF9	; 249
    2372:	cc f3       	brlt	.-14     	; 0x2366 <__fixunssfsi+0x2e>
    2374:	86 95       	lsr	r24
    2376:	77 95       	ror	r23
    2378:	67 95       	ror	r22
    237a:	b3 95       	inc	r27
    237c:	d9 f7       	brne	.-10     	; 0x2374 <__fixunssfsi+0x3c>
    237e:	3e f4       	brtc	.+14     	; 0x238e <__fixunssfsi+0x56>
    2380:	90 95       	com	r25
    2382:	80 95       	com	r24
    2384:	70 95       	com	r23
    2386:	61 95       	neg	r22
    2388:	7f 4f       	sbci	r23, 0xFF	; 255
    238a:	8f 4f       	sbci	r24, 0xFF	; 255
    238c:	9f 4f       	sbci	r25, 0xFF	; 255
    238e:	08 95       	ret

00002390 <__floatunsisf>:
    2390:	e8 94       	clt
    2392:	09 c0       	rjmp	.+18     	; 0x23a6 <__floatsisf+0x12>

00002394 <__floatsisf>:
    2394:	97 fb       	bst	r25, 7
    2396:	3e f4       	brtc	.+14     	; 0x23a6 <__floatsisf+0x12>
    2398:	90 95       	com	r25
    239a:	80 95       	com	r24
    239c:	70 95       	com	r23
    239e:	61 95       	neg	r22
    23a0:	7f 4f       	sbci	r23, 0xFF	; 255
    23a2:	8f 4f       	sbci	r24, 0xFF	; 255
    23a4:	9f 4f       	sbci	r25, 0xFF	; 255
    23a6:	99 23       	and	r25, r25
    23a8:	a9 f0       	breq	.+42     	; 0x23d4 <__floatsisf+0x40>
    23aa:	f9 2f       	mov	r31, r25
    23ac:	96 e9       	ldi	r25, 0x96	; 150
    23ae:	bb 27       	eor	r27, r27
    23b0:	93 95       	inc	r25
    23b2:	f6 95       	lsr	r31
    23b4:	87 95       	ror	r24
    23b6:	77 95       	ror	r23
    23b8:	67 95       	ror	r22
    23ba:	b7 95       	ror	r27
    23bc:	f1 11       	cpse	r31, r1
    23be:	f8 cf       	rjmp	.-16     	; 0x23b0 <__floatsisf+0x1c>
    23c0:	fa f4       	brpl	.+62     	; 0x2400 <__floatsisf+0x6c>
    23c2:	bb 0f       	add	r27, r27
    23c4:	11 f4       	brne	.+4      	; 0x23ca <__floatsisf+0x36>
    23c6:	60 ff       	sbrs	r22, 0
    23c8:	1b c0       	rjmp	.+54     	; 0x2400 <__floatsisf+0x6c>
    23ca:	6f 5f       	subi	r22, 0xFF	; 255
    23cc:	7f 4f       	sbci	r23, 0xFF	; 255
    23ce:	8f 4f       	sbci	r24, 0xFF	; 255
    23d0:	9f 4f       	sbci	r25, 0xFF	; 255
    23d2:	16 c0       	rjmp	.+44     	; 0x2400 <__floatsisf+0x6c>
    23d4:	88 23       	and	r24, r24
    23d6:	11 f0       	breq	.+4      	; 0x23dc <__floatsisf+0x48>
    23d8:	96 e9       	ldi	r25, 0x96	; 150
    23da:	11 c0       	rjmp	.+34     	; 0x23fe <__floatsisf+0x6a>
    23dc:	77 23       	and	r23, r23
    23de:	21 f0       	breq	.+8      	; 0x23e8 <__floatsisf+0x54>
    23e0:	9e e8       	ldi	r25, 0x8E	; 142
    23e2:	87 2f       	mov	r24, r23
    23e4:	76 2f       	mov	r23, r22
    23e6:	05 c0       	rjmp	.+10     	; 0x23f2 <__floatsisf+0x5e>
    23e8:	66 23       	and	r22, r22
    23ea:	71 f0       	breq	.+28     	; 0x2408 <__floatsisf+0x74>
    23ec:	96 e8       	ldi	r25, 0x86	; 134
    23ee:	86 2f       	mov	r24, r22
    23f0:	70 e0       	ldi	r23, 0x00	; 0
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	2a f0       	brmi	.+10     	; 0x2400 <__floatsisf+0x6c>
    23f6:	9a 95       	dec	r25
    23f8:	66 0f       	add	r22, r22
    23fa:	77 1f       	adc	r23, r23
    23fc:	88 1f       	adc	r24, r24
    23fe:	da f7       	brpl	.-10     	; 0x23f6 <__floatsisf+0x62>
    2400:	88 0f       	add	r24, r24
    2402:	96 95       	lsr	r25
    2404:	87 95       	ror	r24
    2406:	97 f9       	bld	r25, 7
    2408:	08 95       	ret

0000240a <__fp_inf>:
    240a:	97 f9       	bld	r25, 7
    240c:	9f 67       	ori	r25, 0x7F	; 127
    240e:	80 e8       	ldi	r24, 0x80	; 128
    2410:	70 e0       	ldi	r23, 0x00	; 0
    2412:	60 e0       	ldi	r22, 0x00	; 0
    2414:	08 95       	ret

00002416 <__fp_nan>:
    2416:	9f ef       	ldi	r25, 0xFF	; 255
    2418:	80 ec       	ldi	r24, 0xC0	; 192
    241a:	08 95       	ret

0000241c <__fp_pscA>:
    241c:	00 24       	eor	r0, r0
    241e:	0a 94       	dec	r0
    2420:	16 16       	cp	r1, r22
    2422:	17 06       	cpc	r1, r23
    2424:	18 06       	cpc	r1, r24
    2426:	09 06       	cpc	r0, r25
    2428:	08 95       	ret

0000242a <__fp_pscB>:
    242a:	00 24       	eor	r0, r0
    242c:	0a 94       	dec	r0
    242e:	12 16       	cp	r1, r18
    2430:	13 06       	cpc	r1, r19
    2432:	14 06       	cpc	r1, r20
    2434:	05 06       	cpc	r0, r21
    2436:	08 95       	ret

00002438 <__fp_round>:
    2438:	09 2e       	mov	r0, r25
    243a:	03 94       	inc	r0
    243c:	00 0c       	add	r0, r0
    243e:	11 f4       	brne	.+4      	; 0x2444 <__fp_round+0xc>
    2440:	88 23       	and	r24, r24
    2442:	52 f0       	brmi	.+20     	; 0x2458 <__fp_round+0x20>
    2444:	bb 0f       	add	r27, r27
    2446:	40 f4       	brcc	.+16     	; 0x2458 <__fp_round+0x20>
    2448:	bf 2b       	or	r27, r31
    244a:	11 f4       	brne	.+4      	; 0x2450 <__fp_round+0x18>
    244c:	60 ff       	sbrs	r22, 0
    244e:	04 c0       	rjmp	.+8      	; 0x2458 <__fp_round+0x20>
    2450:	6f 5f       	subi	r22, 0xFF	; 255
    2452:	7f 4f       	sbci	r23, 0xFF	; 255
    2454:	8f 4f       	sbci	r24, 0xFF	; 255
    2456:	9f 4f       	sbci	r25, 0xFF	; 255
    2458:	08 95       	ret

0000245a <__fp_split3>:
    245a:	57 fd       	sbrc	r21, 7
    245c:	90 58       	subi	r25, 0x80	; 128
    245e:	44 0f       	add	r20, r20
    2460:	55 1f       	adc	r21, r21
    2462:	59 f0       	breq	.+22     	; 0x247a <__fp_splitA+0x10>
    2464:	5f 3f       	cpi	r21, 0xFF	; 255
    2466:	71 f0       	breq	.+28     	; 0x2484 <__fp_splitA+0x1a>
    2468:	47 95       	ror	r20

0000246a <__fp_splitA>:
    246a:	88 0f       	add	r24, r24
    246c:	97 fb       	bst	r25, 7
    246e:	99 1f       	adc	r25, r25
    2470:	61 f0       	breq	.+24     	; 0x248a <__fp_splitA+0x20>
    2472:	9f 3f       	cpi	r25, 0xFF	; 255
    2474:	79 f0       	breq	.+30     	; 0x2494 <__fp_splitA+0x2a>
    2476:	87 95       	ror	r24
    2478:	08 95       	ret
    247a:	12 16       	cp	r1, r18
    247c:	13 06       	cpc	r1, r19
    247e:	14 06       	cpc	r1, r20
    2480:	55 1f       	adc	r21, r21
    2482:	f2 cf       	rjmp	.-28     	; 0x2468 <__fp_split3+0xe>
    2484:	46 95       	lsr	r20
    2486:	f1 df       	rcall	.-30     	; 0x246a <__fp_splitA>
    2488:	08 c0       	rjmp	.+16     	; 0x249a <__fp_splitA+0x30>
    248a:	16 16       	cp	r1, r22
    248c:	17 06       	cpc	r1, r23
    248e:	18 06       	cpc	r1, r24
    2490:	99 1f       	adc	r25, r25
    2492:	f1 cf       	rjmp	.-30     	; 0x2476 <__fp_splitA+0xc>
    2494:	86 95       	lsr	r24
    2496:	71 05       	cpc	r23, r1
    2498:	61 05       	cpc	r22, r1
    249a:	08 94       	sec
    249c:	08 95       	ret

0000249e <__fp_zero>:
    249e:	e8 94       	clt

000024a0 <__fp_szero>:
    24a0:	bb 27       	eor	r27, r27
    24a2:	66 27       	eor	r22, r22
    24a4:	77 27       	eor	r23, r23
    24a6:	cb 01       	movw	r24, r22
    24a8:	97 f9       	bld	r25, 7
    24aa:	08 95       	ret

000024ac <__mulsf3>:
    24ac:	0b d0       	rcall	.+22     	; 0x24c4 <__mulsf3x>
    24ae:	c4 cf       	rjmp	.-120    	; 0x2438 <__fp_round>
    24b0:	b5 df       	rcall	.-150    	; 0x241c <__fp_pscA>
    24b2:	28 f0       	brcs	.+10     	; 0x24be <__mulsf3+0x12>
    24b4:	ba df       	rcall	.-140    	; 0x242a <__fp_pscB>
    24b6:	18 f0       	brcs	.+6      	; 0x24be <__mulsf3+0x12>
    24b8:	95 23       	and	r25, r21
    24ba:	09 f0       	breq	.+2      	; 0x24be <__mulsf3+0x12>
    24bc:	a6 cf       	rjmp	.-180    	; 0x240a <__fp_inf>
    24be:	ab cf       	rjmp	.-170    	; 0x2416 <__fp_nan>
    24c0:	11 24       	eor	r1, r1
    24c2:	ee cf       	rjmp	.-36     	; 0x24a0 <__fp_szero>

000024c4 <__mulsf3x>:
    24c4:	ca df       	rcall	.-108    	; 0x245a <__fp_split3>
    24c6:	a0 f3       	brcs	.-24     	; 0x24b0 <__mulsf3+0x4>

000024c8 <__mulsf3_pse>:
    24c8:	95 9f       	mul	r25, r21
    24ca:	d1 f3       	breq	.-12     	; 0x24c0 <__mulsf3+0x14>
    24cc:	95 0f       	add	r25, r21
    24ce:	50 e0       	ldi	r21, 0x00	; 0
    24d0:	55 1f       	adc	r21, r21
    24d2:	62 9f       	mul	r22, r18
    24d4:	f0 01       	movw	r30, r0
    24d6:	72 9f       	mul	r23, r18
    24d8:	bb 27       	eor	r27, r27
    24da:	f0 0d       	add	r31, r0
    24dc:	b1 1d       	adc	r27, r1
    24de:	63 9f       	mul	r22, r19
    24e0:	aa 27       	eor	r26, r26
    24e2:	f0 0d       	add	r31, r0
    24e4:	b1 1d       	adc	r27, r1
    24e6:	aa 1f       	adc	r26, r26
    24e8:	64 9f       	mul	r22, r20
    24ea:	66 27       	eor	r22, r22
    24ec:	b0 0d       	add	r27, r0
    24ee:	a1 1d       	adc	r26, r1
    24f0:	66 1f       	adc	r22, r22
    24f2:	82 9f       	mul	r24, r18
    24f4:	22 27       	eor	r18, r18
    24f6:	b0 0d       	add	r27, r0
    24f8:	a1 1d       	adc	r26, r1
    24fa:	62 1f       	adc	r22, r18
    24fc:	73 9f       	mul	r23, r19
    24fe:	b0 0d       	add	r27, r0
    2500:	a1 1d       	adc	r26, r1
    2502:	62 1f       	adc	r22, r18
    2504:	83 9f       	mul	r24, r19
    2506:	a0 0d       	add	r26, r0
    2508:	61 1d       	adc	r22, r1
    250a:	22 1f       	adc	r18, r18
    250c:	74 9f       	mul	r23, r20
    250e:	33 27       	eor	r19, r19
    2510:	a0 0d       	add	r26, r0
    2512:	61 1d       	adc	r22, r1
    2514:	23 1f       	adc	r18, r19
    2516:	84 9f       	mul	r24, r20
    2518:	60 0d       	add	r22, r0
    251a:	21 1d       	adc	r18, r1
    251c:	82 2f       	mov	r24, r18
    251e:	76 2f       	mov	r23, r22
    2520:	6a 2f       	mov	r22, r26
    2522:	11 24       	eor	r1, r1
    2524:	9f 57       	subi	r25, 0x7F	; 127
    2526:	50 40       	sbci	r21, 0x00	; 0
    2528:	8a f0       	brmi	.+34     	; 0x254c <__mulsf3_pse+0x84>
    252a:	e1 f0       	breq	.+56     	; 0x2564 <__mulsf3_pse+0x9c>
    252c:	88 23       	and	r24, r24
    252e:	4a f0       	brmi	.+18     	; 0x2542 <__mulsf3_pse+0x7a>
    2530:	ee 0f       	add	r30, r30
    2532:	ff 1f       	adc	r31, r31
    2534:	bb 1f       	adc	r27, r27
    2536:	66 1f       	adc	r22, r22
    2538:	77 1f       	adc	r23, r23
    253a:	88 1f       	adc	r24, r24
    253c:	91 50       	subi	r25, 0x01	; 1
    253e:	50 40       	sbci	r21, 0x00	; 0
    2540:	a9 f7       	brne	.-22     	; 0x252c <__mulsf3_pse+0x64>
    2542:	9e 3f       	cpi	r25, 0xFE	; 254
    2544:	51 05       	cpc	r21, r1
    2546:	70 f0       	brcs	.+28     	; 0x2564 <__mulsf3_pse+0x9c>
    2548:	60 cf       	rjmp	.-320    	; 0x240a <__fp_inf>
    254a:	aa cf       	rjmp	.-172    	; 0x24a0 <__fp_szero>
    254c:	5f 3f       	cpi	r21, 0xFF	; 255
    254e:	ec f3       	brlt	.-6      	; 0x254a <__mulsf3_pse+0x82>
    2550:	98 3e       	cpi	r25, 0xE8	; 232
    2552:	dc f3       	brlt	.-10     	; 0x254a <__mulsf3_pse+0x82>
    2554:	86 95       	lsr	r24
    2556:	77 95       	ror	r23
    2558:	67 95       	ror	r22
    255a:	b7 95       	ror	r27
    255c:	f7 95       	ror	r31
    255e:	e7 95       	ror	r30
    2560:	9f 5f       	subi	r25, 0xFF	; 255
    2562:	c1 f7       	brne	.-16     	; 0x2554 <__mulsf3_pse+0x8c>
    2564:	fe 2b       	or	r31, r30
    2566:	88 0f       	add	r24, r24
    2568:	91 1d       	adc	r25, r1
    256a:	96 95       	lsr	r25
    256c:	87 95       	ror	r24
    256e:	97 f9       	bld	r25, 7
    2570:	08 95       	ret

00002572 <__tablejump2__>:
    2572:	ee 0f       	add	r30, r30
    2574:	ff 1f       	adc	r31, r31

00002576 <__tablejump__>:
    2576:	05 90       	lpm	r0, Z+
    2578:	f4 91       	lpm	r31, Z
    257a:	e0 2d       	mov	r30, r0
    257c:	09 94       	ijmp

0000257e <__umulhisi3>:
    257e:	a2 9f       	mul	r26, r18
    2580:	b0 01       	movw	r22, r0
    2582:	b3 9f       	mul	r27, r19
    2584:	c0 01       	movw	r24, r0
    2586:	a3 9f       	mul	r26, r19
    2588:	70 0d       	add	r23, r0
    258a:	81 1d       	adc	r24, r1
    258c:	11 24       	eor	r1, r1
    258e:	91 1d       	adc	r25, r1
    2590:	b2 9f       	mul	r27, r18
    2592:	70 0d       	add	r23, r0
    2594:	81 1d       	adc	r24, r1
    2596:	11 24       	eor	r1, r1
    2598:	91 1d       	adc	r25, r1
    259a:	08 95       	ret

0000259c <memcpy>:
    259c:	fb 01       	movw	r30, r22
    259e:	dc 01       	movw	r26, r24
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <memcpy+0xa>
    25a2:	01 90       	ld	r0, Z+
    25a4:	0d 92       	st	X+, r0
    25a6:	41 50       	subi	r20, 0x01	; 1
    25a8:	50 40       	sbci	r21, 0x00	; 0
    25aa:	d8 f7       	brcc	.-10     	; 0x25a2 <memcpy+0x6>
    25ac:	08 95       	ret

000025ae <strchr>:
    25ae:	fc 01       	movw	r30, r24
    25b0:	81 91       	ld	r24, Z+
    25b2:	86 17       	cp	r24, r22
    25b4:	21 f0       	breq	.+8      	; 0x25be <strchr+0x10>
    25b6:	88 23       	and	r24, r24
    25b8:	d9 f7       	brne	.-10     	; 0x25b0 <strchr+0x2>
    25ba:	99 27       	eor	r25, r25
    25bc:	08 95       	ret
    25be:	31 97       	sbiw	r30, 0x01	; 1
    25c0:	cf 01       	movw	r24, r30
    25c2:	08 95       	ret

000025c4 <strcpy>:
    25c4:	fb 01       	movw	r30, r22
    25c6:	dc 01       	movw	r26, r24
    25c8:	01 90       	ld	r0, Z+
    25ca:	0d 92       	st	X+, r0
    25cc:	00 20       	and	r0, r0
    25ce:	e1 f7       	brne	.-8      	; 0x25c8 <strcpy+0x4>
    25d0:	08 95       	ret

000025d2 <strncpy>:
    25d2:	fb 01       	movw	r30, r22
    25d4:	dc 01       	movw	r26, r24
    25d6:	41 50       	subi	r20, 0x01	; 1
    25d8:	50 40       	sbci	r21, 0x00	; 0
    25da:	48 f0       	brcs	.+18     	; 0x25ee <strncpy+0x1c>
    25dc:	01 90       	ld	r0, Z+
    25de:	0d 92       	st	X+, r0
    25e0:	00 20       	and	r0, r0
    25e2:	c9 f7       	brne	.-14     	; 0x25d6 <strncpy+0x4>
    25e4:	01 c0       	rjmp	.+2      	; 0x25e8 <strncpy+0x16>
    25e6:	1d 92       	st	X+, r1
    25e8:	41 50       	subi	r20, 0x01	; 1
    25ea:	50 40       	sbci	r21, 0x00	; 0
    25ec:	e0 f7       	brcc	.-8      	; 0x25e6 <strncpy+0x14>
    25ee:	08 95       	ret

000025f0 <strstr>:
    25f0:	fb 01       	movw	r30, r22
    25f2:	51 91       	ld	r21, Z+
    25f4:	55 23       	and	r21, r21
    25f6:	a9 f0       	breq	.+42     	; 0x2622 <strstr+0x32>
    25f8:	bf 01       	movw	r22, r30
    25fa:	dc 01       	movw	r26, r24
    25fc:	4d 91       	ld	r20, X+
    25fe:	45 17       	cp	r20, r21
    2600:	41 11       	cpse	r20, r1
    2602:	e1 f7       	brne	.-8      	; 0x25fc <strstr+0xc>
    2604:	59 f4       	brne	.+22     	; 0x261c <strstr+0x2c>
    2606:	cd 01       	movw	r24, r26
    2608:	01 90       	ld	r0, Z+
    260a:	00 20       	and	r0, r0
    260c:	49 f0       	breq	.+18     	; 0x2620 <strstr+0x30>
    260e:	4d 91       	ld	r20, X+
    2610:	40 15       	cp	r20, r0
    2612:	41 11       	cpse	r20, r1
    2614:	c9 f3       	breq	.-14     	; 0x2608 <strstr+0x18>
    2616:	fb 01       	movw	r30, r22
    2618:	41 11       	cpse	r20, r1
    261a:	ef cf       	rjmp	.-34     	; 0x25fa <strstr+0xa>
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	08 95       	ret

00002624 <itoa>:
    2624:	45 32       	cpi	r20, 0x25	; 37
    2626:	51 05       	cpc	r21, r1
    2628:	18 f4       	brcc	.+6      	; 0x2630 <itoa+0xc>
    262a:	42 30       	cpi	r20, 0x02	; 2
    262c:	08 f0       	brcs	.+2      	; 0x2630 <itoa+0xc>
    262e:	04 c0       	rjmp	.+8      	; 0x2638 <__itoa_ncheck>
    2630:	fb 01       	movw	r30, r22
    2632:	10 82       	st	Z, r1
    2634:	cb 01       	movw	r24, r22
    2636:	08 95       	ret

00002638 <__itoa_ncheck>:
    2638:	bb 27       	eor	r27, r27
    263a:	4a 30       	cpi	r20, 0x0A	; 10
    263c:	31 f4       	brne	.+12     	; 0x264a <__itoa_ncheck+0x12>
    263e:	99 23       	and	r25, r25
    2640:	22 f4       	brpl	.+8      	; 0x264a <__itoa_ncheck+0x12>
    2642:	bd e2       	ldi	r27, 0x2D	; 45
    2644:	90 95       	com	r25
    2646:	81 95       	neg	r24
    2648:	9f 4f       	sbci	r25, 0xFF	; 255
    264a:	01 c0       	rjmp	.+2      	; 0x264e <__utoa_common>

0000264c <__utoa_ncheck>:
    264c:	bb 27       	eor	r27, r27

0000264e <__utoa_common>:
    264e:	fb 01       	movw	r30, r22
    2650:	55 27       	eor	r21, r21
    2652:	aa 27       	eor	r26, r26
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	aa 1f       	adc	r26, r26
    265a:	a4 17       	cp	r26, r20
    265c:	10 f0       	brcs	.+4      	; 0x2662 <__utoa_common+0x14>
    265e:	a4 1b       	sub	r26, r20
    2660:	83 95       	inc	r24
    2662:	50 51       	subi	r21, 0x10	; 16
    2664:	b9 f7       	brne	.-18     	; 0x2654 <__utoa_common+0x6>
    2666:	a0 5d       	subi	r26, 0xD0	; 208
    2668:	aa 33       	cpi	r26, 0x3A	; 58
    266a:	08 f0       	brcs	.+2      	; 0x266e <__utoa_common+0x20>
    266c:	a9 5d       	subi	r26, 0xD9	; 217
    266e:	a1 93       	st	Z+, r26
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	79 f7       	brne	.-34     	; 0x2652 <__utoa_common+0x4>
    2674:	b1 11       	cpse	r27, r1
    2676:	b1 93       	st	Z+, r27
    2678:	11 92       	st	Z+, r1
    267a:	cb 01       	movw	r24, r22
    267c:	3c c2       	rjmp	.+1144   	; 0x2af6 <strrev>

0000267e <printf>:
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	fe 01       	movw	r30, r28
    2688:	35 96       	adiw	r30, 0x05	; 5
    268a:	61 91       	ld	r22, Z+
    268c:	71 91       	ld	r23, Z+
    268e:	af 01       	movw	r20, r30
    2690:	80 91 70 29 	lds	r24, 0x2970
    2694:	90 91 71 29 	lds	r25, 0x2971
    2698:	30 d0       	rcall	.+96     	; 0x26fa <vfprintf>
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	08 95       	ret

000026a0 <puts>:
    26a0:	0f 93       	push	r16
    26a2:	1f 93       	push	r17
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	e0 91 70 29 	lds	r30, 0x2970
    26ac:	f0 91 71 29 	lds	r31, 0x2971
    26b0:	23 81       	ldd	r18, Z+3	; 0x03
    26b2:	21 ff       	sbrs	r18, 1
    26b4:	1b c0       	rjmp	.+54     	; 0x26ec <puts+0x4c>
    26b6:	ec 01       	movw	r28, r24
    26b8:	00 e0       	ldi	r16, 0x00	; 0
    26ba:	10 e0       	ldi	r17, 0x00	; 0
    26bc:	89 91       	ld	r24, Y+
    26be:	60 91 70 29 	lds	r22, 0x2970
    26c2:	70 91 71 29 	lds	r23, 0x2971
    26c6:	db 01       	movw	r26, r22
    26c8:	18 96       	adiw	r26, 0x08	; 8
    26ca:	ed 91       	ld	r30, X+
    26cc:	fc 91       	ld	r31, X
    26ce:	19 97       	sbiw	r26, 0x09	; 9
    26d0:	88 23       	and	r24, r24
    26d2:	31 f0       	breq	.+12     	; 0x26e0 <puts+0x40>
    26d4:	09 95       	icall
    26d6:	89 2b       	or	r24, r25
    26d8:	89 f3       	breq	.-30     	; 0x26bc <puts+0x1c>
    26da:	0f ef       	ldi	r16, 0xFF	; 255
    26dc:	1f ef       	ldi	r17, 0xFF	; 255
    26de:	ee cf       	rjmp	.-36     	; 0x26bc <puts+0x1c>
    26e0:	8a e0       	ldi	r24, 0x0A	; 10
    26e2:	09 95       	icall
    26e4:	89 2b       	or	r24, r25
    26e6:	11 f4       	brne	.+4      	; 0x26ec <puts+0x4c>
    26e8:	c8 01       	movw	r24, r16
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <puts+0x50>
    26ec:	8f ef       	ldi	r24, 0xFF	; 255
    26ee:	9f ef       	ldi	r25, 0xFF	; 255
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	1f 91       	pop	r17
    26f6:	0f 91       	pop	r16
    26f8:	08 95       	ret

000026fa <vfprintf>:
    26fa:	2f 92       	push	r2
    26fc:	3f 92       	push	r3
    26fe:	4f 92       	push	r4
    2700:	5f 92       	push	r5
    2702:	6f 92       	push	r6
    2704:	7f 92       	push	r7
    2706:	8f 92       	push	r8
    2708:	9f 92       	push	r9
    270a:	af 92       	push	r10
    270c:	bf 92       	push	r11
    270e:	cf 92       	push	r12
    2710:	df 92       	push	r13
    2712:	ef 92       	push	r14
    2714:	ff 92       	push	r15
    2716:	0f 93       	push	r16
    2718:	1f 93       	push	r17
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	2c 97       	sbiw	r28, 0x0c	; 12
    2724:	cd bf       	out	0x3d, r28	; 61
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	7c 01       	movw	r14, r24
    272a:	6b 01       	movw	r12, r22
    272c:	8a 01       	movw	r16, r20
    272e:	fc 01       	movw	r30, r24
    2730:	16 82       	std	Z+6, r1	; 0x06
    2732:	17 82       	std	Z+7, r1	; 0x07
    2734:	83 81       	ldd	r24, Z+3	; 0x03
    2736:	81 ff       	sbrs	r24, 1
    2738:	b0 c1       	rjmp	.+864    	; 0x2a9a <vfprintf+0x3a0>
    273a:	ce 01       	movw	r24, r28
    273c:	01 96       	adiw	r24, 0x01	; 1
    273e:	4c 01       	movw	r8, r24
    2740:	f7 01       	movw	r30, r14
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	f6 01       	movw	r30, r12
    2746:	93 fd       	sbrc	r25, 3
    2748:	85 91       	lpm	r24, Z+
    274a:	93 ff       	sbrs	r25, 3
    274c:	81 91       	ld	r24, Z+
    274e:	6f 01       	movw	r12, r30
    2750:	88 23       	and	r24, r24
    2752:	09 f4       	brne	.+2      	; 0x2756 <vfprintf+0x5c>
    2754:	9e c1       	rjmp	.+828    	; 0x2a92 <vfprintf+0x398>
    2756:	85 32       	cpi	r24, 0x25	; 37
    2758:	39 f4       	brne	.+14     	; 0x2768 <vfprintf+0x6e>
    275a:	93 fd       	sbrc	r25, 3
    275c:	85 91       	lpm	r24, Z+
    275e:	93 ff       	sbrs	r25, 3
    2760:	81 91       	ld	r24, Z+
    2762:	6f 01       	movw	r12, r30
    2764:	85 32       	cpi	r24, 0x25	; 37
    2766:	21 f4       	brne	.+8      	; 0x2770 <vfprintf+0x76>
    2768:	b7 01       	movw	r22, r14
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	d4 d1       	rcall	.+936    	; 0x2b16 <fputc>
    276e:	e8 cf       	rjmp	.-48     	; 0x2740 <vfprintf+0x46>
    2770:	51 2c       	mov	r5, r1
    2772:	31 2c       	mov	r3, r1
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	20 32       	cpi	r18, 0x20	; 32
    2778:	a0 f4       	brcc	.+40     	; 0x27a2 <vfprintf+0xa8>
    277a:	8b 32       	cpi	r24, 0x2B	; 43
    277c:	69 f0       	breq	.+26     	; 0x2798 <vfprintf+0x9e>
    277e:	30 f4       	brcc	.+12     	; 0x278c <vfprintf+0x92>
    2780:	80 32       	cpi	r24, 0x20	; 32
    2782:	59 f0       	breq	.+22     	; 0x279a <vfprintf+0xa0>
    2784:	83 32       	cpi	r24, 0x23	; 35
    2786:	69 f4       	brne	.+26     	; 0x27a2 <vfprintf+0xa8>
    2788:	20 61       	ori	r18, 0x10	; 16
    278a:	2c c0       	rjmp	.+88     	; 0x27e4 <vfprintf+0xea>
    278c:	8d 32       	cpi	r24, 0x2D	; 45
    278e:	39 f0       	breq	.+14     	; 0x279e <vfprintf+0xa4>
    2790:	80 33       	cpi	r24, 0x30	; 48
    2792:	39 f4       	brne	.+14     	; 0x27a2 <vfprintf+0xa8>
    2794:	21 60       	ori	r18, 0x01	; 1
    2796:	26 c0       	rjmp	.+76     	; 0x27e4 <vfprintf+0xea>
    2798:	22 60       	ori	r18, 0x02	; 2
    279a:	24 60       	ori	r18, 0x04	; 4
    279c:	23 c0       	rjmp	.+70     	; 0x27e4 <vfprintf+0xea>
    279e:	28 60       	ori	r18, 0x08	; 8
    27a0:	21 c0       	rjmp	.+66     	; 0x27e4 <vfprintf+0xea>
    27a2:	27 fd       	sbrc	r18, 7
    27a4:	27 c0       	rjmp	.+78     	; 0x27f4 <vfprintf+0xfa>
    27a6:	30 ed       	ldi	r19, 0xD0	; 208
    27a8:	38 0f       	add	r19, r24
    27aa:	3a 30       	cpi	r19, 0x0A	; 10
    27ac:	78 f4       	brcc	.+30     	; 0x27cc <vfprintf+0xd2>
    27ae:	26 ff       	sbrs	r18, 6
    27b0:	06 c0       	rjmp	.+12     	; 0x27be <vfprintf+0xc4>
    27b2:	fa e0       	ldi	r31, 0x0A	; 10
    27b4:	5f 9e       	mul	r5, r31
    27b6:	30 0d       	add	r19, r0
    27b8:	11 24       	eor	r1, r1
    27ba:	53 2e       	mov	r5, r19
    27bc:	13 c0       	rjmp	.+38     	; 0x27e4 <vfprintf+0xea>
    27be:	8a e0       	ldi	r24, 0x0A	; 10
    27c0:	38 9e       	mul	r3, r24
    27c2:	30 0d       	add	r19, r0
    27c4:	11 24       	eor	r1, r1
    27c6:	33 2e       	mov	r3, r19
    27c8:	20 62       	ori	r18, 0x20	; 32
    27ca:	0c c0       	rjmp	.+24     	; 0x27e4 <vfprintf+0xea>
    27cc:	8e 32       	cpi	r24, 0x2E	; 46
    27ce:	21 f4       	brne	.+8      	; 0x27d8 <vfprintf+0xde>
    27d0:	26 fd       	sbrc	r18, 6
    27d2:	5f c1       	rjmp	.+702    	; 0x2a92 <vfprintf+0x398>
    27d4:	20 64       	ori	r18, 0x40	; 64
    27d6:	06 c0       	rjmp	.+12     	; 0x27e4 <vfprintf+0xea>
    27d8:	8c 36       	cpi	r24, 0x6C	; 108
    27da:	11 f4       	brne	.+4      	; 0x27e0 <vfprintf+0xe6>
    27dc:	20 68       	ori	r18, 0x80	; 128
    27de:	02 c0       	rjmp	.+4      	; 0x27e4 <vfprintf+0xea>
    27e0:	88 36       	cpi	r24, 0x68	; 104
    27e2:	41 f4       	brne	.+16     	; 0x27f4 <vfprintf+0xfa>
    27e4:	f6 01       	movw	r30, r12
    27e6:	93 fd       	sbrc	r25, 3
    27e8:	85 91       	lpm	r24, Z+
    27ea:	93 ff       	sbrs	r25, 3
    27ec:	81 91       	ld	r24, Z+
    27ee:	6f 01       	movw	r12, r30
    27f0:	81 11       	cpse	r24, r1
    27f2:	c1 cf       	rjmp	.-126    	; 0x2776 <vfprintf+0x7c>
    27f4:	98 2f       	mov	r25, r24
    27f6:	9f 7d       	andi	r25, 0xDF	; 223
    27f8:	95 54       	subi	r25, 0x45	; 69
    27fa:	93 30       	cpi	r25, 0x03	; 3
    27fc:	28 f4       	brcc	.+10     	; 0x2808 <vfprintf+0x10e>
    27fe:	0c 5f       	subi	r16, 0xFC	; 252
    2800:	1f 4f       	sbci	r17, 0xFF	; 255
    2802:	ff e3       	ldi	r31, 0x3F	; 63
    2804:	f9 83       	std	Y+1, r31	; 0x01
    2806:	0d c0       	rjmp	.+26     	; 0x2822 <vfprintf+0x128>
    2808:	83 36       	cpi	r24, 0x63	; 99
    280a:	31 f0       	breq	.+12     	; 0x2818 <vfprintf+0x11e>
    280c:	83 37       	cpi	r24, 0x73	; 115
    280e:	71 f0       	breq	.+28     	; 0x282c <vfprintf+0x132>
    2810:	83 35       	cpi	r24, 0x53	; 83
    2812:	09 f0       	breq	.+2      	; 0x2816 <vfprintf+0x11c>
    2814:	57 c0       	rjmp	.+174    	; 0x28c4 <vfprintf+0x1ca>
    2816:	21 c0       	rjmp	.+66     	; 0x285a <vfprintf+0x160>
    2818:	f8 01       	movw	r30, r16
    281a:	80 81       	ld	r24, Z
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	0e 5f       	subi	r16, 0xFE	; 254
    2820:	1f 4f       	sbci	r17, 0xFF	; 255
    2822:	44 24       	eor	r4, r4
    2824:	43 94       	inc	r4
    2826:	51 2c       	mov	r5, r1
    2828:	54 01       	movw	r10, r8
    282a:	14 c0       	rjmp	.+40     	; 0x2854 <vfprintf+0x15a>
    282c:	38 01       	movw	r6, r16
    282e:	f2 e0       	ldi	r31, 0x02	; 2
    2830:	6f 0e       	add	r6, r31
    2832:	71 1c       	adc	r7, r1
    2834:	f8 01       	movw	r30, r16
    2836:	a0 80       	ld	r10, Z
    2838:	b1 80       	ldd	r11, Z+1	; 0x01
    283a:	26 ff       	sbrs	r18, 6
    283c:	03 c0       	rjmp	.+6      	; 0x2844 <vfprintf+0x14a>
    283e:	65 2d       	mov	r22, r5
    2840:	70 e0       	ldi	r23, 0x00	; 0
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <vfprintf+0x14e>
    2844:	6f ef       	ldi	r22, 0xFF	; 255
    2846:	7f ef       	ldi	r23, 0xFF	; 255
    2848:	c5 01       	movw	r24, r10
    284a:	2c 87       	std	Y+12, r18	; 0x0c
    284c:	49 d1       	rcall	.+658    	; 0x2ae0 <strnlen>
    284e:	2c 01       	movw	r4, r24
    2850:	83 01       	movw	r16, r6
    2852:	2c 85       	ldd	r18, Y+12	; 0x0c
    2854:	2f 77       	andi	r18, 0x7F	; 127
    2856:	22 2e       	mov	r2, r18
    2858:	16 c0       	rjmp	.+44     	; 0x2886 <vfprintf+0x18c>
    285a:	38 01       	movw	r6, r16
    285c:	f2 e0       	ldi	r31, 0x02	; 2
    285e:	6f 0e       	add	r6, r31
    2860:	71 1c       	adc	r7, r1
    2862:	f8 01       	movw	r30, r16
    2864:	a0 80       	ld	r10, Z
    2866:	b1 80       	ldd	r11, Z+1	; 0x01
    2868:	26 ff       	sbrs	r18, 6
    286a:	03 c0       	rjmp	.+6      	; 0x2872 <vfprintf+0x178>
    286c:	65 2d       	mov	r22, r5
    286e:	70 e0       	ldi	r23, 0x00	; 0
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <vfprintf+0x17c>
    2872:	6f ef       	ldi	r22, 0xFF	; 255
    2874:	7f ef       	ldi	r23, 0xFF	; 255
    2876:	c5 01       	movw	r24, r10
    2878:	2c 87       	std	Y+12, r18	; 0x0c
    287a:	27 d1       	rcall	.+590    	; 0x2aca <strnlen_P>
    287c:	2c 01       	movw	r4, r24
    287e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2880:	20 68       	ori	r18, 0x80	; 128
    2882:	22 2e       	mov	r2, r18
    2884:	83 01       	movw	r16, r6
    2886:	23 fc       	sbrc	r2, 3
    2888:	19 c0       	rjmp	.+50     	; 0x28bc <vfprintf+0x1c2>
    288a:	83 2d       	mov	r24, r3
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	48 16       	cp	r4, r24
    2890:	59 06       	cpc	r5, r25
    2892:	a0 f4       	brcc	.+40     	; 0x28bc <vfprintf+0x1c2>
    2894:	b7 01       	movw	r22, r14
    2896:	80 e2       	ldi	r24, 0x20	; 32
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	3d d1       	rcall	.+634    	; 0x2b16 <fputc>
    289c:	3a 94       	dec	r3
    289e:	f5 cf       	rjmp	.-22     	; 0x288a <vfprintf+0x190>
    28a0:	f5 01       	movw	r30, r10
    28a2:	27 fc       	sbrc	r2, 7
    28a4:	85 91       	lpm	r24, Z+
    28a6:	27 fe       	sbrs	r2, 7
    28a8:	81 91       	ld	r24, Z+
    28aa:	5f 01       	movw	r10, r30
    28ac:	b7 01       	movw	r22, r14
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	32 d1       	rcall	.+612    	; 0x2b16 <fputc>
    28b2:	31 10       	cpse	r3, r1
    28b4:	3a 94       	dec	r3
    28b6:	f1 e0       	ldi	r31, 0x01	; 1
    28b8:	4f 1a       	sub	r4, r31
    28ba:	51 08       	sbc	r5, r1
    28bc:	41 14       	cp	r4, r1
    28be:	51 04       	cpc	r5, r1
    28c0:	79 f7       	brne	.-34     	; 0x28a0 <vfprintf+0x1a6>
    28c2:	de c0       	rjmp	.+444    	; 0x2a80 <vfprintf+0x386>
    28c4:	84 36       	cpi	r24, 0x64	; 100
    28c6:	11 f0       	breq	.+4      	; 0x28cc <vfprintf+0x1d2>
    28c8:	89 36       	cpi	r24, 0x69	; 105
    28ca:	31 f5       	brne	.+76     	; 0x2918 <vfprintf+0x21e>
    28cc:	f8 01       	movw	r30, r16
    28ce:	27 ff       	sbrs	r18, 7
    28d0:	07 c0       	rjmp	.+14     	; 0x28e0 <vfprintf+0x1e6>
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	0c 5f       	subi	r16, 0xFC	; 252
    28dc:	1f 4f       	sbci	r17, 0xFF	; 255
    28de:	08 c0       	rjmp	.+16     	; 0x28f0 <vfprintf+0x1f6>
    28e0:	60 81       	ld	r22, Z
    28e2:	71 81       	ldd	r23, Z+1	; 0x01
    28e4:	88 27       	eor	r24, r24
    28e6:	77 fd       	sbrc	r23, 7
    28e8:	80 95       	com	r24
    28ea:	98 2f       	mov	r25, r24
    28ec:	0e 5f       	subi	r16, 0xFE	; 254
    28ee:	1f 4f       	sbci	r17, 0xFF	; 255
    28f0:	2f 76       	andi	r18, 0x6F	; 111
    28f2:	b2 2e       	mov	r11, r18
    28f4:	97 ff       	sbrs	r25, 7
    28f6:	09 c0       	rjmp	.+18     	; 0x290a <vfprintf+0x210>
    28f8:	90 95       	com	r25
    28fa:	80 95       	com	r24
    28fc:	70 95       	com	r23
    28fe:	61 95       	neg	r22
    2900:	7f 4f       	sbci	r23, 0xFF	; 255
    2902:	8f 4f       	sbci	r24, 0xFF	; 255
    2904:	9f 4f       	sbci	r25, 0xFF	; 255
    2906:	20 68       	ori	r18, 0x80	; 128
    2908:	b2 2e       	mov	r11, r18
    290a:	2a e0       	ldi	r18, 0x0A	; 10
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	a4 01       	movw	r20, r8
    2910:	34 d1       	rcall	.+616    	; 0x2b7a <__ultoa_invert>
    2912:	a8 2e       	mov	r10, r24
    2914:	a8 18       	sub	r10, r8
    2916:	43 c0       	rjmp	.+134    	; 0x299e <vfprintf+0x2a4>
    2918:	85 37       	cpi	r24, 0x75	; 117
    291a:	29 f4       	brne	.+10     	; 0x2926 <vfprintf+0x22c>
    291c:	2f 7e       	andi	r18, 0xEF	; 239
    291e:	b2 2e       	mov	r11, r18
    2920:	2a e0       	ldi	r18, 0x0A	; 10
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	25 c0       	rjmp	.+74     	; 0x2970 <vfprintf+0x276>
    2926:	f2 2f       	mov	r31, r18
    2928:	f9 7f       	andi	r31, 0xF9	; 249
    292a:	bf 2e       	mov	r11, r31
    292c:	8f 36       	cpi	r24, 0x6F	; 111
    292e:	c1 f0       	breq	.+48     	; 0x2960 <vfprintf+0x266>
    2930:	18 f4       	brcc	.+6      	; 0x2938 <vfprintf+0x23e>
    2932:	88 35       	cpi	r24, 0x58	; 88
    2934:	79 f0       	breq	.+30     	; 0x2954 <vfprintf+0x25a>
    2936:	ad c0       	rjmp	.+346    	; 0x2a92 <vfprintf+0x398>
    2938:	80 37       	cpi	r24, 0x70	; 112
    293a:	19 f0       	breq	.+6      	; 0x2942 <vfprintf+0x248>
    293c:	88 37       	cpi	r24, 0x78	; 120
    293e:	21 f0       	breq	.+8      	; 0x2948 <vfprintf+0x24e>
    2940:	a8 c0       	rjmp	.+336    	; 0x2a92 <vfprintf+0x398>
    2942:	2f 2f       	mov	r18, r31
    2944:	20 61       	ori	r18, 0x10	; 16
    2946:	b2 2e       	mov	r11, r18
    2948:	b4 fe       	sbrs	r11, 4
    294a:	0d c0       	rjmp	.+26     	; 0x2966 <vfprintf+0x26c>
    294c:	8b 2d       	mov	r24, r11
    294e:	84 60       	ori	r24, 0x04	; 4
    2950:	b8 2e       	mov	r11, r24
    2952:	09 c0       	rjmp	.+18     	; 0x2966 <vfprintf+0x26c>
    2954:	24 ff       	sbrs	r18, 4
    2956:	0a c0       	rjmp	.+20     	; 0x296c <vfprintf+0x272>
    2958:	9f 2f       	mov	r25, r31
    295a:	96 60       	ori	r25, 0x06	; 6
    295c:	b9 2e       	mov	r11, r25
    295e:	06 c0       	rjmp	.+12     	; 0x296c <vfprintf+0x272>
    2960:	28 e0       	ldi	r18, 0x08	; 8
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	05 c0       	rjmp	.+10     	; 0x2970 <vfprintf+0x276>
    2966:	20 e1       	ldi	r18, 0x10	; 16
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <vfprintf+0x276>
    296c:	20 e1       	ldi	r18, 0x10	; 16
    296e:	32 e0       	ldi	r19, 0x02	; 2
    2970:	f8 01       	movw	r30, r16
    2972:	b7 fe       	sbrs	r11, 7
    2974:	07 c0       	rjmp	.+14     	; 0x2984 <vfprintf+0x28a>
    2976:	60 81       	ld	r22, Z
    2978:	71 81       	ldd	r23, Z+1	; 0x01
    297a:	82 81       	ldd	r24, Z+2	; 0x02
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	0c 5f       	subi	r16, 0xFC	; 252
    2980:	1f 4f       	sbci	r17, 0xFF	; 255
    2982:	06 c0       	rjmp	.+12     	; 0x2990 <vfprintf+0x296>
    2984:	60 81       	ld	r22, Z
    2986:	71 81       	ldd	r23, Z+1	; 0x01
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	0e 5f       	subi	r16, 0xFE	; 254
    298e:	1f 4f       	sbci	r17, 0xFF	; 255
    2990:	a4 01       	movw	r20, r8
    2992:	f3 d0       	rcall	.+486    	; 0x2b7a <__ultoa_invert>
    2994:	a8 2e       	mov	r10, r24
    2996:	a8 18       	sub	r10, r8
    2998:	fb 2d       	mov	r31, r11
    299a:	ff 77       	andi	r31, 0x7F	; 127
    299c:	bf 2e       	mov	r11, r31
    299e:	b6 fe       	sbrs	r11, 6
    29a0:	0b c0       	rjmp	.+22     	; 0x29b8 <vfprintf+0x2be>
    29a2:	2b 2d       	mov	r18, r11
    29a4:	2e 7f       	andi	r18, 0xFE	; 254
    29a6:	a5 14       	cp	r10, r5
    29a8:	50 f4       	brcc	.+20     	; 0x29be <vfprintf+0x2c4>
    29aa:	b4 fe       	sbrs	r11, 4
    29ac:	0a c0       	rjmp	.+20     	; 0x29c2 <vfprintf+0x2c8>
    29ae:	b2 fc       	sbrc	r11, 2
    29b0:	08 c0       	rjmp	.+16     	; 0x29c2 <vfprintf+0x2c8>
    29b2:	2b 2d       	mov	r18, r11
    29b4:	2e 7e       	andi	r18, 0xEE	; 238
    29b6:	05 c0       	rjmp	.+10     	; 0x29c2 <vfprintf+0x2c8>
    29b8:	7a 2c       	mov	r7, r10
    29ba:	2b 2d       	mov	r18, r11
    29bc:	03 c0       	rjmp	.+6      	; 0x29c4 <vfprintf+0x2ca>
    29be:	7a 2c       	mov	r7, r10
    29c0:	01 c0       	rjmp	.+2      	; 0x29c4 <vfprintf+0x2ca>
    29c2:	75 2c       	mov	r7, r5
    29c4:	24 ff       	sbrs	r18, 4
    29c6:	0d c0       	rjmp	.+26     	; 0x29e2 <vfprintf+0x2e8>
    29c8:	fe 01       	movw	r30, r28
    29ca:	ea 0d       	add	r30, r10
    29cc:	f1 1d       	adc	r31, r1
    29ce:	80 81       	ld	r24, Z
    29d0:	80 33       	cpi	r24, 0x30	; 48
    29d2:	11 f4       	brne	.+4      	; 0x29d8 <vfprintf+0x2de>
    29d4:	29 7e       	andi	r18, 0xE9	; 233
    29d6:	09 c0       	rjmp	.+18     	; 0x29ea <vfprintf+0x2f0>
    29d8:	22 ff       	sbrs	r18, 2
    29da:	06 c0       	rjmp	.+12     	; 0x29e8 <vfprintf+0x2ee>
    29dc:	73 94       	inc	r7
    29de:	73 94       	inc	r7
    29e0:	04 c0       	rjmp	.+8      	; 0x29ea <vfprintf+0x2f0>
    29e2:	82 2f       	mov	r24, r18
    29e4:	86 78       	andi	r24, 0x86	; 134
    29e6:	09 f0       	breq	.+2      	; 0x29ea <vfprintf+0x2f0>
    29e8:	73 94       	inc	r7
    29ea:	23 fd       	sbrc	r18, 3
    29ec:	12 c0       	rjmp	.+36     	; 0x2a12 <vfprintf+0x318>
    29ee:	20 ff       	sbrs	r18, 0
    29f0:	06 c0       	rjmp	.+12     	; 0x29fe <vfprintf+0x304>
    29f2:	5a 2c       	mov	r5, r10
    29f4:	73 14       	cp	r7, r3
    29f6:	18 f4       	brcc	.+6      	; 0x29fe <vfprintf+0x304>
    29f8:	53 0c       	add	r5, r3
    29fa:	57 18       	sub	r5, r7
    29fc:	73 2c       	mov	r7, r3
    29fe:	73 14       	cp	r7, r3
    2a00:	60 f4       	brcc	.+24     	; 0x2a1a <vfprintf+0x320>
    2a02:	b7 01       	movw	r22, r14
    2a04:	80 e2       	ldi	r24, 0x20	; 32
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	2c 87       	std	Y+12, r18	; 0x0c
    2a0a:	85 d0       	rcall	.+266    	; 0x2b16 <fputc>
    2a0c:	73 94       	inc	r7
    2a0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a10:	f6 cf       	rjmp	.-20     	; 0x29fe <vfprintf+0x304>
    2a12:	73 14       	cp	r7, r3
    2a14:	10 f4       	brcc	.+4      	; 0x2a1a <vfprintf+0x320>
    2a16:	37 18       	sub	r3, r7
    2a18:	01 c0       	rjmp	.+2      	; 0x2a1c <vfprintf+0x322>
    2a1a:	31 2c       	mov	r3, r1
    2a1c:	24 ff       	sbrs	r18, 4
    2a1e:	11 c0       	rjmp	.+34     	; 0x2a42 <vfprintf+0x348>
    2a20:	b7 01       	movw	r22, r14
    2a22:	80 e3       	ldi	r24, 0x30	; 48
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	2c 87       	std	Y+12, r18	; 0x0c
    2a28:	76 d0       	rcall	.+236    	; 0x2b16 <fputc>
    2a2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a2c:	22 ff       	sbrs	r18, 2
    2a2e:	16 c0       	rjmp	.+44     	; 0x2a5c <vfprintf+0x362>
    2a30:	21 ff       	sbrs	r18, 1
    2a32:	03 c0       	rjmp	.+6      	; 0x2a3a <vfprintf+0x340>
    2a34:	88 e5       	ldi	r24, 0x58	; 88
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	02 c0       	rjmp	.+4      	; 0x2a3e <vfprintf+0x344>
    2a3a:	88 e7       	ldi	r24, 0x78	; 120
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	b7 01       	movw	r22, r14
    2a40:	0c c0       	rjmp	.+24     	; 0x2a5a <vfprintf+0x360>
    2a42:	82 2f       	mov	r24, r18
    2a44:	86 78       	andi	r24, 0x86	; 134
    2a46:	51 f0       	breq	.+20     	; 0x2a5c <vfprintf+0x362>
    2a48:	21 fd       	sbrc	r18, 1
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <vfprintf+0x356>
    2a4c:	80 e2       	ldi	r24, 0x20	; 32
    2a4e:	01 c0       	rjmp	.+2      	; 0x2a52 <vfprintf+0x358>
    2a50:	8b e2       	ldi	r24, 0x2B	; 43
    2a52:	27 fd       	sbrc	r18, 7
    2a54:	8d e2       	ldi	r24, 0x2D	; 45
    2a56:	b7 01       	movw	r22, r14
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	5d d0       	rcall	.+186    	; 0x2b16 <fputc>
    2a5c:	a5 14       	cp	r10, r5
    2a5e:	30 f4       	brcc	.+12     	; 0x2a6c <vfprintf+0x372>
    2a60:	b7 01       	movw	r22, r14
    2a62:	80 e3       	ldi	r24, 0x30	; 48
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	57 d0       	rcall	.+174    	; 0x2b16 <fputc>
    2a68:	5a 94       	dec	r5
    2a6a:	f8 cf       	rjmp	.-16     	; 0x2a5c <vfprintf+0x362>
    2a6c:	aa 94       	dec	r10
    2a6e:	f4 01       	movw	r30, r8
    2a70:	ea 0d       	add	r30, r10
    2a72:	f1 1d       	adc	r31, r1
    2a74:	80 81       	ld	r24, Z
    2a76:	b7 01       	movw	r22, r14
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	4d d0       	rcall	.+154    	; 0x2b16 <fputc>
    2a7c:	a1 10       	cpse	r10, r1
    2a7e:	f6 cf       	rjmp	.-20     	; 0x2a6c <vfprintf+0x372>
    2a80:	33 20       	and	r3, r3
    2a82:	09 f4       	brne	.+2      	; 0x2a86 <vfprintf+0x38c>
    2a84:	5d ce       	rjmp	.-838    	; 0x2740 <vfprintf+0x46>
    2a86:	b7 01       	movw	r22, r14
    2a88:	80 e2       	ldi	r24, 0x20	; 32
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	44 d0       	rcall	.+136    	; 0x2b16 <fputc>
    2a8e:	3a 94       	dec	r3
    2a90:	f7 cf       	rjmp	.-18     	; 0x2a80 <vfprintf+0x386>
    2a92:	f7 01       	movw	r30, r14
    2a94:	86 81       	ldd	r24, Z+6	; 0x06
    2a96:	97 81       	ldd	r25, Z+7	; 0x07
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <vfprintf+0x3a4>
    2a9a:	8f ef       	ldi	r24, 0xFF	; 255
    2a9c:	9f ef       	ldi	r25, 0xFF	; 255
    2a9e:	2c 96       	adiw	r28, 0x0c	; 12
    2aa0:	cd bf       	out	0x3d, r28	; 61
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	1f 91       	pop	r17
    2aaa:	0f 91       	pop	r16
    2aac:	ff 90       	pop	r15
    2aae:	ef 90       	pop	r14
    2ab0:	df 90       	pop	r13
    2ab2:	cf 90       	pop	r12
    2ab4:	bf 90       	pop	r11
    2ab6:	af 90       	pop	r10
    2ab8:	9f 90       	pop	r9
    2aba:	8f 90       	pop	r8
    2abc:	7f 90       	pop	r7
    2abe:	6f 90       	pop	r6
    2ac0:	5f 90       	pop	r5
    2ac2:	4f 90       	pop	r4
    2ac4:	3f 90       	pop	r3
    2ac6:	2f 90       	pop	r2
    2ac8:	08 95       	ret

00002aca <strnlen_P>:
    2aca:	fc 01       	movw	r30, r24
    2acc:	05 90       	lpm	r0, Z+
    2ace:	61 50       	subi	r22, 0x01	; 1
    2ad0:	70 40       	sbci	r23, 0x00	; 0
    2ad2:	01 10       	cpse	r0, r1
    2ad4:	d8 f7       	brcc	.-10     	; 0x2acc <strnlen_P+0x2>
    2ad6:	80 95       	com	r24
    2ad8:	90 95       	com	r25
    2ada:	8e 0f       	add	r24, r30
    2adc:	9f 1f       	adc	r25, r31
    2ade:	08 95       	ret

00002ae0 <strnlen>:
    2ae0:	fc 01       	movw	r30, r24
    2ae2:	61 50       	subi	r22, 0x01	; 1
    2ae4:	70 40       	sbci	r23, 0x00	; 0
    2ae6:	01 90       	ld	r0, Z+
    2ae8:	01 10       	cpse	r0, r1
    2aea:	d8 f7       	brcc	.-10     	; 0x2ae2 <strnlen+0x2>
    2aec:	80 95       	com	r24
    2aee:	90 95       	com	r25
    2af0:	8e 0f       	add	r24, r30
    2af2:	9f 1f       	adc	r25, r31
    2af4:	08 95       	ret

00002af6 <strrev>:
    2af6:	dc 01       	movw	r26, r24
    2af8:	fc 01       	movw	r30, r24
    2afa:	67 2f       	mov	r22, r23
    2afc:	71 91       	ld	r23, Z+
    2afe:	77 23       	and	r23, r23
    2b00:	e1 f7       	brne	.-8      	; 0x2afa <strrev+0x4>
    2b02:	32 97       	sbiw	r30, 0x02	; 2
    2b04:	04 c0       	rjmp	.+8      	; 0x2b0e <strrev+0x18>
    2b06:	7c 91       	ld	r23, X
    2b08:	6d 93       	st	X+, r22
    2b0a:	70 83       	st	Z, r23
    2b0c:	62 91       	ld	r22, -Z
    2b0e:	ae 17       	cp	r26, r30
    2b10:	bf 07       	cpc	r27, r31
    2b12:	c8 f3       	brcs	.-14     	; 0x2b06 <strrev+0x10>
    2b14:	08 95       	ret

00002b16 <fputc>:
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	18 2f       	mov	r17, r24
    2b20:	09 2f       	mov	r16, r25
    2b22:	eb 01       	movw	r28, r22
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	81 fd       	sbrc	r24, 1
    2b28:	03 c0       	rjmp	.+6      	; 0x2b30 <fputc+0x1a>
    2b2a:	8f ef       	ldi	r24, 0xFF	; 255
    2b2c:	9f ef       	ldi	r25, 0xFF	; 255
    2b2e:	20 c0       	rjmp	.+64     	; 0x2b70 <fputc+0x5a>
    2b30:	82 ff       	sbrs	r24, 2
    2b32:	10 c0       	rjmp	.+32     	; 0x2b54 <fputc+0x3e>
    2b34:	4e 81       	ldd	r20, Y+6	; 0x06
    2b36:	5f 81       	ldd	r21, Y+7	; 0x07
    2b38:	2c 81       	ldd	r18, Y+4	; 0x04
    2b3a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b3c:	42 17       	cp	r20, r18
    2b3e:	53 07       	cpc	r21, r19
    2b40:	7c f4       	brge	.+30     	; 0x2b60 <fputc+0x4a>
    2b42:	e8 81       	ld	r30, Y
    2b44:	f9 81       	ldd	r31, Y+1	; 0x01
    2b46:	9f 01       	movw	r18, r30
    2b48:	2f 5f       	subi	r18, 0xFF	; 255
    2b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4c:	28 83       	st	Y, r18
    2b4e:	39 83       	std	Y+1, r19	; 0x01
    2b50:	10 83       	st	Z, r17
    2b52:	06 c0       	rjmp	.+12     	; 0x2b60 <fputc+0x4a>
    2b54:	e8 85       	ldd	r30, Y+8	; 0x08
    2b56:	f9 85       	ldd	r31, Y+9	; 0x09
    2b58:	81 2f       	mov	r24, r17
    2b5a:	09 95       	icall
    2b5c:	89 2b       	or	r24, r25
    2b5e:	29 f7       	brne	.-54     	; 0x2b2a <fputc+0x14>
    2b60:	2e 81       	ldd	r18, Y+6	; 0x06
    2b62:	3f 81       	ldd	r19, Y+7	; 0x07
    2b64:	2f 5f       	subi	r18, 0xFF	; 255
    2b66:	3f 4f       	sbci	r19, 0xFF	; 255
    2b68:	2e 83       	std	Y+6, r18	; 0x06
    2b6a:	3f 83       	std	Y+7, r19	; 0x07
    2b6c:	81 2f       	mov	r24, r17
    2b6e:	90 2f       	mov	r25, r16
    2b70:	df 91       	pop	r29
    2b72:	cf 91       	pop	r28
    2b74:	1f 91       	pop	r17
    2b76:	0f 91       	pop	r16
    2b78:	08 95       	ret

00002b7a <__ultoa_invert>:
    2b7a:	fa 01       	movw	r30, r20
    2b7c:	aa 27       	eor	r26, r26
    2b7e:	28 30       	cpi	r18, 0x08	; 8
    2b80:	51 f1       	breq	.+84     	; 0x2bd6 <__ultoa_invert+0x5c>
    2b82:	20 31       	cpi	r18, 0x10	; 16
    2b84:	81 f1       	breq	.+96     	; 0x2be6 <__ultoa_invert+0x6c>
    2b86:	e8 94       	clt
    2b88:	6f 93       	push	r22
    2b8a:	6e 7f       	andi	r22, 0xFE	; 254
    2b8c:	6e 5f       	subi	r22, 0xFE	; 254
    2b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b90:	8f 4f       	sbci	r24, 0xFF	; 255
    2b92:	9f 4f       	sbci	r25, 0xFF	; 255
    2b94:	af 4f       	sbci	r26, 0xFF	; 255
    2b96:	b1 e0       	ldi	r27, 0x01	; 1
    2b98:	3e d0       	rcall	.+124    	; 0x2c16 <__ultoa_invert+0x9c>
    2b9a:	b4 e0       	ldi	r27, 0x04	; 4
    2b9c:	3c d0       	rcall	.+120    	; 0x2c16 <__ultoa_invert+0x9c>
    2b9e:	67 0f       	add	r22, r23
    2ba0:	78 1f       	adc	r23, r24
    2ba2:	89 1f       	adc	r24, r25
    2ba4:	9a 1f       	adc	r25, r26
    2ba6:	a1 1d       	adc	r26, r1
    2ba8:	68 0f       	add	r22, r24
    2baa:	79 1f       	adc	r23, r25
    2bac:	8a 1f       	adc	r24, r26
    2bae:	91 1d       	adc	r25, r1
    2bb0:	a1 1d       	adc	r26, r1
    2bb2:	6a 0f       	add	r22, r26
    2bb4:	71 1d       	adc	r23, r1
    2bb6:	81 1d       	adc	r24, r1
    2bb8:	91 1d       	adc	r25, r1
    2bba:	a1 1d       	adc	r26, r1
    2bbc:	20 d0       	rcall	.+64     	; 0x2bfe <__ultoa_invert+0x84>
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <__ultoa_invert+0x48>
    2bc0:	68 94       	set
    2bc2:	3f 91       	pop	r19
    2bc4:	2a e0       	ldi	r18, 0x0A	; 10
    2bc6:	26 9f       	mul	r18, r22
    2bc8:	11 24       	eor	r1, r1
    2bca:	30 19       	sub	r19, r0
    2bcc:	30 5d       	subi	r19, 0xD0	; 208
    2bce:	31 93       	st	Z+, r19
    2bd0:	de f6       	brtc	.-74     	; 0x2b88 <__ultoa_invert+0xe>
    2bd2:	cf 01       	movw	r24, r30
    2bd4:	08 95       	ret
    2bd6:	46 2f       	mov	r20, r22
    2bd8:	47 70       	andi	r20, 0x07	; 7
    2bda:	40 5d       	subi	r20, 0xD0	; 208
    2bdc:	41 93       	st	Z+, r20
    2bde:	b3 e0       	ldi	r27, 0x03	; 3
    2be0:	0f d0       	rcall	.+30     	; 0x2c00 <__ultoa_invert+0x86>
    2be2:	c9 f7       	brne	.-14     	; 0x2bd6 <__ultoa_invert+0x5c>
    2be4:	f6 cf       	rjmp	.-20     	; 0x2bd2 <__ultoa_invert+0x58>
    2be6:	46 2f       	mov	r20, r22
    2be8:	4f 70       	andi	r20, 0x0F	; 15
    2bea:	40 5d       	subi	r20, 0xD0	; 208
    2bec:	4a 33       	cpi	r20, 0x3A	; 58
    2bee:	18 f0       	brcs	.+6      	; 0x2bf6 <__ultoa_invert+0x7c>
    2bf0:	49 5d       	subi	r20, 0xD9	; 217
    2bf2:	31 fd       	sbrc	r19, 1
    2bf4:	40 52       	subi	r20, 0x20	; 32
    2bf6:	41 93       	st	Z+, r20
    2bf8:	02 d0       	rcall	.+4      	; 0x2bfe <__ultoa_invert+0x84>
    2bfa:	a9 f7       	brne	.-22     	; 0x2be6 <__ultoa_invert+0x6c>
    2bfc:	ea cf       	rjmp	.-44     	; 0x2bd2 <__ultoa_invert+0x58>
    2bfe:	b4 e0       	ldi	r27, 0x04	; 4
    2c00:	a6 95       	lsr	r26
    2c02:	97 95       	ror	r25
    2c04:	87 95       	ror	r24
    2c06:	77 95       	ror	r23
    2c08:	67 95       	ror	r22
    2c0a:	ba 95       	dec	r27
    2c0c:	c9 f7       	brne	.-14     	; 0x2c00 <__ultoa_invert+0x86>
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	61 05       	cpc	r22, r1
    2c12:	71 05       	cpc	r23, r1
    2c14:	08 95       	ret
    2c16:	9b 01       	movw	r18, r22
    2c18:	ac 01       	movw	r20, r24
    2c1a:	0a 2e       	mov	r0, r26
    2c1c:	06 94       	lsr	r0
    2c1e:	57 95       	ror	r21
    2c20:	47 95       	ror	r20
    2c22:	37 95       	ror	r19
    2c24:	27 95       	ror	r18
    2c26:	ba 95       	dec	r27
    2c28:	c9 f7       	brne	.-14     	; 0x2c1c <__ultoa_invert+0xa2>
    2c2a:	62 0f       	add	r22, r18
    2c2c:	73 1f       	adc	r23, r19
    2c2e:	84 1f       	adc	r24, r20
    2c30:	95 1f       	adc	r25, r21
    2c32:	a0 1d       	adc	r26, r0
    2c34:	08 95       	ret

00002c36 <_exit>:
    2c36:	f8 94       	cli

00002c38 <__stop_program>:
    2c38:	ff cf       	rjmp	.-2      	; 0x2c38 <__stop_program>
