
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b13c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000a1a  00802000  0000b13c  0000b1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002cf  00802a1a  00802a1a  0000bbea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000bbea  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000d08  00000000  00000000  0000bc46  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001f44b  00000000  00000000  0000c94e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00004a38  00000000  00000000  0002bd99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000b42f  00000000  00000000  000307d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00003060  00000000  00000000  0003bc00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004e0b  00000000  00000000  0003ec60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000123ac  00000000  00000000  00043a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d28  00000000  00000000  00055e17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	28 c7       	rjmp	.+3664   	; 0xe52 <_StackPaint>
       2:	00 00       	nop
       4:	63 c7       	rjmp	.+3782   	; 0xecc <__bad_interrupt>
       6:	00 00       	nop
       8:	61 c7       	rjmp	.+3778   	; 0xecc <__bad_interrupt>
       a:	00 00       	nop
       c:	5f c7       	rjmp	.+3774   	; 0xecc <__bad_interrupt>
       e:	00 00       	nop
      10:	5d c7       	rjmp	.+3770   	; 0xecc <__bad_interrupt>
      12:	00 00       	nop
      14:	5b c7       	rjmp	.+3766   	; 0xecc <__bad_interrupt>
      16:	00 00       	nop
      18:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__vector_6>
      1c:	57 c7       	rjmp	.+3758   	; 0xecc <__bad_interrupt>
      1e:	00 00       	nop
      20:	55 c7       	rjmp	.+3754   	; 0xecc <__bad_interrupt>
      22:	00 00       	nop
      24:	53 c7       	rjmp	.+3750   	; 0xecc <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__vector_10>
      2c:	4f c7       	rjmp	.+3742   	; 0xecc <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c7       	rjmp	.+3738   	; 0xecc <__bad_interrupt>
      32:	00 00       	nop
      34:	4b c7       	rjmp	.+3734   	; 0xecc <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 2c 39 	jmp	0x7258	; 0x7258 <__vector_14>
      3c:	47 c7       	rjmp	.+3726   	; 0xecc <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 07 4a 	jmp	0x940e	; 0x940e <__vector_16>
      44:	0c 94 fa 38 	jmp	0x71f4	; 0x71f4 <__vector_17>
      48:	0c 94 26 1f 	jmp	0x3e4c	; 0x3e4c <__vector_18>
      4c:	0c 94 3a 4a 	jmp	0x9474	; 0x9474 <__vector_19>
      50:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__vector_20>
      54:	3b c7       	rjmp	.+3702   	; 0xecc <__bad_interrupt>
      56:	00 00       	nop
      58:	39 c7       	rjmp	.+3698   	; 0xecc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	37 c7       	rjmp	.+3694   	; 0xecc <__bad_interrupt>
      5e:	00 00       	nop
      60:	35 c7       	rjmp	.+3690   	; 0xecc <__bad_interrupt>
      62:	00 00       	nop
      64:	33 c7       	rjmp	.+3686   	; 0xecc <__bad_interrupt>
      66:	00 00       	nop
      68:	31 c7       	rjmp	.+3682   	; 0xecc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2f c7       	rjmp	.+3678   	; 0xecc <__bad_interrupt>
      6e:	00 00       	nop
      70:	2d c7       	rjmp	.+3674   	; 0xecc <__bad_interrupt>
      72:	00 00       	nop
      74:	2b c7       	rjmp	.+3670   	; 0xecc <__bad_interrupt>
      76:	00 00       	nop
      78:	29 c7       	rjmp	.+3666   	; 0xecc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	27 c7       	rjmp	.+3662   	; 0xecc <__bad_interrupt>
      7e:	00 00       	nop
      80:	25 c7       	rjmp	.+3658   	; 0xecc <__bad_interrupt>
      82:	00 00       	nop
      84:	23 c7       	rjmp	.+3654   	; 0xecc <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__vector_34>
      8c:	1f c7       	rjmp	.+3646   	; 0xecc <__bad_interrupt>
      8e:	00 00       	nop
      90:	1d c7       	rjmp	.+3642   	; 0xecc <__bad_interrupt>
      92:	00 00       	nop
      94:	1b c7       	rjmp	.+3638   	; 0xecc <__bad_interrupt>
      96:	00 00       	nop
      98:	19 c7       	rjmp	.+3634   	; 0xecc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	17 c7       	rjmp	.+3630   	; 0xecc <__bad_interrupt>
      9e:	00 00       	nop
      a0:	15 c7       	rjmp	.+3626   	; 0xecc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	13 c7       	rjmp	.+3622   	; 0xecc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	11 c7       	rjmp	.+3618   	; 0xecc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0f c7       	rjmp	.+3614   	; 0xecc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0d c7       	rjmp	.+3610   	; 0xecc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0b c7       	rjmp	.+3606   	; 0xecc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	09 c7       	rjmp	.+3602   	; 0xecc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	07 c7       	rjmp	.+3598   	; 0xecc <__bad_interrupt>
      be:	00 00       	nop
      c0:	05 c7       	rjmp	.+3594   	; 0xecc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	03 c7       	rjmp	.+3590   	; 0xecc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	01 c7       	rjmp	.+3586   	; 0xecc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ff c6       	rjmp	.+3582   	; 0xecc <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fd c6       	rjmp	.+3578   	; 0xecc <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fb c6       	rjmp	.+3574   	; 0xecc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	f9 c6       	rjmp	.+3570   	; 0xecc <__bad_interrupt>
      da:	00 00       	nop
      dc:	f7 c6       	rjmp	.+3566   	; 0xecc <__bad_interrupt>
      de:	00 00       	nop
      e0:	f5 c6       	rjmp	.+3562   	; 0xecc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f3 c6       	rjmp	.+3558   	; 0xecc <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f1 c6       	rjmp	.+3554   	; 0xecc <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ef c6       	rjmp	.+3550   	; 0xecc <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ed c6       	rjmp	.+3546   	; 0xecc <__bad_interrupt>
      f2:	00 00       	nop
      f4:	eb c6       	rjmp	.+3542   	; 0xecc <__bad_interrupt>
      f6:	00 00       	nop
      f8:	e9 c6       	rjmp	.+3538   	; 0xecc <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e7 c6       	rjmp	.+3534   	; 0xecc <__bad_interrupt>
      fe:	00 00       	nop
     100:	e5 c6       	rjmp	.+3530   	; 0xecc <__bad_interrupt>
     102:	00 00       	nop
     104:	e3 c6       	rjmp	.+3526   	; 0xecc <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 b5 11 	jmp	0x236a	; 0x236a <__vector_66>
     10c:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__vector_67>
     110:	dd c6       	rjmp	.+3514   	; 0xecc <__bad_interrupt>
     112:	00 00       	nop
     114:	db c6       	rjmp	.+3510   	; 0xecc <__bad_interrupt>
     116:	00 00       	nop
     118:	d9 c6       	rjmp	.+3506   	; 0xecc <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d7 c6       	rjmp	.+3502   	; 0xecc <__bad_interrupt>
     11e:	00 00       	nop
     120:	d5 c6       	rjmp	.+3498   	; 0xecc <__bad_interrupt>
     122:	00 00       	nop
     124:	d3 c6       	rjmp	.+3494   	; 0xecc <__bad_interrupt>
     126:	00 00       	nop
     128:	d1 c6       	rjmp	.+3490   	; 0xecc <__bad_interrupt>
     12a:	00 00       	nop
     12c:	cf c6       	rjmp	.+3486   	; 0xecc <__bad_interrupt>
     12e:	00 00       	nop
     130:	cd c6       	rjmp	.+3482   	; 0xecc <__bad_interrupt>
     132:	00 00       	nop
     134:	cb c6       	rjmp	.+3478   	; 0xecc <__bad_interrupt>
     136:	00 00       	nop
     138:	c9 c6       	rjmp	.+3474   	; 0xecc <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c7 c6       	rjmp	.+3470   	; 0xecc <__bad_interrupt>
     13e:	00 00       	nop
     140:	c5 c6       	rjmp	.+3466   	; 0xecc <__bad_interrupt>
     142:	00 00       	nop
     144:	c3 c6       	rjmp	.+3462   	; 0xecc <__bad_interrupt>
     146:	00 00       	nop
     148:	c1 c6       	rjmp	.+3458   	; 0xecc <__bad_interrupt>
     14a:	00 00       	nop
     14c:	bf c6       	rjmp	.+3454   	; 0xecc <__bad_interrupt>
     14e:	00 00       	nop
     150:	bd c6       	rjmp	.+3450   	; 0xecc <__bad_interrupt>
     152:	00 00       	nop
     154:	bb c6       	rjmp	.+3446   	; 0xecc <__bad_interrupt>
     156:	00 00       	nop
     158:	b9 c6       	rjmp	.+3442   	; 0xecc <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b7 c6       	rjmp	.+3438   	; 0xecc <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__vector_88>
     164:	b3 c6       	rjmp	.+3430   	; 0xecc <__bad_interrupt>
     166:	00 00       	nop
     168:	b1 c6       	rjmp	.+3426   	; 0xecc <__bad_interrupt>
     16a:	00 00       	nop
     16c:	af c6       	rjmp	.+3422   	; 0xecc <__bad_interrupt>
     16e:	00 00       	nop
     170:	ad c6       	rjmp	.+3418   	; 0xecc <__bad_interrupt>
     172:	00 00       	nop
     174:	ab c6       	rjmp	.+3414   	; 0xecc <__bad_interrupt>
     176:	00 00       	nop
     178:	a9 c6       	rjmp	.+3410   	; 0xecc <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a7 c6       	rjmp	.+3406   	; 0xecc <__bad_interrupt>
     17e:	00 00       	nop
     180:	a5 c6       	rjmp	.+3402   	; 0xecc <__bad_interrupt>
     182:	00 00       	nop
     184:	a3 c6       	rjmp	.+3398   	; 0xecc <__bad_interrupt>
     186:	00 00       	nop
     188:	a1 c6       	rjmp	.+3394   	; 0xecc <__bad_interrupt>
     18a:	00 00       	nop
     18c:	9f c6       	rjmp	.+3390   	; 0xecc <__bad_interrupt>
     18e:	00 00       	nop
     190:	9d c6       	rjmp	.+3386   	; 0xecc <__bad_interrupt>
     192:	00 00       	nop
     194:	9b c6       	rjmp	.+3382   	; 0xecc <__bad_interrupt>
     196:	00 00       	nop
     198:	99 c6       	rjmp	.+3378   	; 0xecc <__bad_interrupt>
     19a:	00 00       	nop
     19c:	97 c6       	rjmp	.+3374   	; 0xecc <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	95 c6       	rjmp	.+3370   	; 0xecc <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	93 c6       	rjmp	.+3366   	; 0xecc <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	91 c6       	rjmp	.+3362   	; 0xecc <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	8f c6       	rjmp	.+3358   	; 0xecc <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8d c6       	rjmp	.+3354   	; 0xecc <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8b c6       	rjmp	.+3350   	; 0xecc <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	89 c6       	rjmp	.+3346   	; 0xecc <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	87 c6       	rjmp	.+3342   	; 0xecc <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	85 c6       	rjmp	.+3338   	; 0xecc <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	83 c6       	rjmp	.+3334   	; 0xecc <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	81 c6       	rjmp	.+3330   	; 0xecc <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	7f c6       	rjmp	.+3326   	; 0xecc <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7d c6       	rjmp	.+3322   	; 0xecc <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7b c6       	rjmp	.+3318   	; 0xecc <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	79 c6       	rjmp	.+3314   	; 0xecc <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	77 c6       	rjmp	.+3310   	; 0xecc <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	75 c6       	rjmp	.+3306   	; 0xecc <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	73 c6       	rjmp	.+3302   	; 0xecc <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	71 c6       	rjmp	.+3298   	; 0xecc <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	6f c6       	rjmp	.+3294   	; 0xecc <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6d c6       	rjmp	.+3290   	; 0xecc <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6b c6       	rjmp	.+3286   	; 0xecc <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	69 c6       	rjmp	.+3282   	; 0xecc <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	fb 47       	sbci	r31, 0x7B	; 123
     1fe:	f5 47       	sbci	r31, 0x75	; 117
     200:	f8 47       	sbci	r31, 0x78	; 120
     202:	ec 47       	sbci	r30, 0x7C	; 124
     204:	f2 47       	sbci	r31, 0x72	; 114
     206:	e6 47       	sbci	r30, 0x76	; 118
     208:	ef 47       	sbci	r30, 0x7F	; 127
     20a:	e9 47       	sbci	r30, 0x79	; 121
     20c:	85 48       	sbci	r24, 0x85	; 133
     20e:	6c 48       	sbci	r22, 0x8C	; 140
     210:	74 48       	sbci	r23, 0x84	; 132
     212:	28 48       	sbci	r18, 0x88	; 136
     214:	66 48       	sbci	r22, 0x86	; 134
     216:	1d 48       	sbci	r17, 0x8D	; 141
     218:	62 48       	sbci	r22, 0x82	; 130
     21a:	24 48       	sbci	r18, 0x84	; 132
     21c:	d3 48       	sbci	r29, 0x83	; 131
     21e:	e0 48       	sbci	r30, 0x80	; 128
     220:	de 48       	sbci	r29, 0x8E	; 142
     222:	dc 48       	sbci	r29, 0x8C	; 140
     224:	da 48       	sbci	r29, 0x8A	; 138
     226:	d6 48       	sbci	r29, 0x86	; 134
     228:	d8 48       	sbci	r29, 0x88	; 136
     22a:	e3 4a       	sbci	r30, 0xA3	; 163
     22c:	e5 4a       	sbci	r30, 0xA5	; 165
     22e:	e3 4a       	sbci	r30, 0xA3	; 163
     230:	ec 4a       	sbci	r30, 0xAC	; 172
     232:	e3 4a       	sbci	r30, 0xA3	; 163
     234:	ec 4a       	sbci	r30, 0xAC	; 172
     236:	e3 4a       	sbci	r30, 0xA3	; 163
     238:	e3 4a       	sbci	r30, 0xA3	; 163
     23a:	ec 4a       	sbci	r30, 0xAC	; 172
     23c:	e3 4a       	sbci	r30, 0xA3	; 163
     23e:	ec 4a       	sbci	r30, 0xAC	; 172
     240:	e3 4a       	sbci	r30, 0xA3	; 163

00000242 <__trampolines_end>:
     242:	00 00       	nop
     244:	00 00       	nop
     246:	00 00       	nop
     248:	20 50       	subi	r18, 0x00	; 0
     24a:	70 50       	subi	r23, 0x00	; 0
     24c:	20 00       	.word	0x0020	; ????
     24e:	20 70       	andi	r18, 0x00	; 0
     250:	50 70       	andi	r21, 0x00	; 0
     252:	20 00       	.word	0x0020	; ????
     254:	00 50       	subi	r16, 0x00	; 0
     256:	70 70       	andi	r23, 0x00	; 0
     258:	20 00       	.word	0x0020	; ????
     25a:	00 20       	and	r0, r0
     25c:	70 70       	andi	r23, 0x00	; 0
     25e:	20 00       	.word	0x0020	; ????
     260:	20 70       	andi	r18, 0x00	; 0
     262:	70 20       	and	r7, r0
     264:	70 00       	.word	0x0070	; ????
     266:	20 20       	and	r2, r0
     268:	70 20       	and	r7, r0
     26a:	70 00       	.word	0x0070	; ????
     26c:	00 00       	nop
     26e:	20 00       	.word	0x0020	; ????
     270:	00 00       	nop
     272:	f0 f0       	brcs	.+60     	; 0x2b0 <__trampolines_end+0x6e>
     274:	d0 f0       	brcs	.+52     	; 0x2aa <__trampolines_end+0x68>
     276:	f0 f0       	brcs	.+60     	; 0x2b4 <__trampolines_end+0x72>
     278:	00 70       	andi	r16, 0x00	; 0
     27a:	50 70       	andi	r21, 0x00	; 0
     27c:	00 00       	nop
     27e:	f0 80       	ld	r15, Z
     280:	a0 80       	ld	r10, Z
     282:	f0 f0       	brcs	.+60     	; 0x2c0 <__trampolines_end+0x7e>
     284:	00 30       	cpi	r16, 0x00	; 0
     286:	10 60       	ori	r17, 0x00	; 0
     288:	60 00       	.word	0x0060	; ????
     28a:	20 50       	subi	r18, 0x00	; 0
     28c:	20 70       	andi	r18, 0x00	; 0
     28e:	20 00       	.word	0x0020	; ????
     290:	20 30       	cpi	r18, 0x00	; 0
     292:	20 20       	and	r2, r0
     294:	60 00       	.word	0x0060	; ????
     296:	20 30       	cpi	r18, 0x00	; 0
     298:	50 10       	cpse	r5, r0
     29a:	20 00       	.word	0x0020	; ????
     29c:	20 70       	andi	r18, 0x00	; 0
     29e:	50 70       	andi	r21, 0x00	; 0
     2a0:	20 00       	.word	0x0020	; ????
     2a2:	40 60       	ori	r20, 0x00	; 0
     2a4:	70 60       	ori	r23, 0x00	; 0
     2a6:	40 00       	.word	0x0040	; ????
     2a8:	10 30       	cpi	r17, 0x00	; 0
     2aa:	70 30       	cpi	r23, 0x00	; 0
     2ac:	10 00       	.word	0x0010	; ????
     2ae:	20 70       	andi	r18, 0x00	; 0
     2b0:	20 70       	andi	r18, 0x00	; 0
     2b2:	20 00       	.word	0x0020	; ????
     2b4:	50 50       	subi	r21, 0x00	; 0
     2b6:	50 00       	.word	0x0050	; ????
     2b8:	50 00       	.word	0x0050	; ????
     2ba:	70 d0       	rcall	.+224    	; 0x39c <__trampolines_end+0x15a>
     2bc:	d0 50       	subi	r29, 0x00	; 0
     2be:	50 00       	.word	0x0050	; ????
     2c0:	30 60       	ori	r19, 0x00	; 0
     2c2:	50 30       	cpi	r21, 0x00	; 0
     2c4:	60 00       	.word	0x0060	; ????
     2c6:	00 00       	nop
     2c8:	00 00       	nop
     2ca:	70 00       	.word	0x0070	; ????
     2cc:	20 70       	andi	r18, 0x00	; 0
     2ce:	20 70       	andi	r18, 0x00	; 0
     2d0:	20 70       	andi	r18, 0x00	; 0
     2d2:	20 70       	andi	r18, 0x00	; 0
     2d4:	20 20       	and	r2, r0
     2d6:	20 00       	.word	0x0020	; ????
     2d8:	20 20       	and	r2, r0
     2da:	20 70       	andi	r18, 0x00	; 0
     2dc:	20 00       	.word	0x0020	; ????
     2de:	00 20       	and	r0, r0
     2e0:	f0 20       	and	r15, r0
     2e2:	00 00       	nop
     2e4:	00 40       	sbci	r16, 0x00	; 0
     2e6:	f0 40       	sbci	r31, 0x00	; 0
     2e8:	00 00       	nop
     2ea:	00 00       	nop
     2ec:	40 70       	andi	r20, 0x00	; 0
     2ee:	00 00       	nop
     2f0:	00 50       	subi	r16, 0x00	; 0
     2f2:	70 50       	subi	r23, 0x00	; 0
     2f4:	00 00       	nop
     2f6:	00 20       	and	r0, r0
     2f8:	70 70       	andi	r23, 0x00	; 0
     2fa:	00 00       	nop
     2fc:	00 70       	andi	r16, 0x00	; 0
     2fe:	70 20       	and	r7, r0
	...
     308:	20 20       	and	r2, r0
     30a:	20 00       	.word	0x0020	; ????
     30c:	20 00       	.word	0x0020	; ????
     30e:	50 50       	subi	r21, 0x00	; 0
     310:	00 00       	nop
     312:	00 00       	nop
     314:	50 70       	andi	r21, 0x00	; 0
     316:	50 70       	andi	r21, 0x00	; 0
     318:	50 00       	.word	0x0050	; ????
     31a:	20 30       	cpi	r18, 0x00	; 0
     31c:	60 30       	cpi	r22, 0x00	; 0
     31e:	60 20       	and	r6, r0
     320:	40 10       	cpse	r4, r0
     322:	20 40       	sbci	r18, 0x00	; 0
     324:	10 00       	.word	0x0010	; ????
     326:	20 50       	subi	r18, 0x00	; 0
     328:	30 50       	subi	r19, 0x00	; 0
     32a:	70 00       	.word	0x0070	; ????
     32c:	60 40       	sbci	r22, 0x00	; 0
     32e:	00 00       	nop
     330:	00 00       	nop
     332:	20 40       	sbci	r18, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	20 00       	.word	0x0020	; ????
     338:	40 20       	and	r4, r0
     33a:	20 20       	and	r2, r0
     33c:	40 00       	.word	0x0040	; ????
     33e:	50 20       	and	r5, r0
     340:	70 20       	and	r7, r0
     342:	50 00       	.word	0x0050	; ????
     344:	00 20       	and	r0, r0
     346:	70 20       	and	r7, r0
     348:	00 00       	nop
     34a:	00 00       	nop
     34c:	00 00       	nop
     34e:	60 40       	sbci	r22, 0x00	; 0
     350:	00 00       	nop
     352:	70 00       	.word	0x0070	; ????
     354:	00 00       	nop
     356:	00 00       	nop
     358:	00 00       	nop
     35a:	20 00       	.word	0x0020	; ????
     35c:	10 10       	cpse	r1, r0
     35e:	20 40       	sbci	r18, 0x00	; 0
     360:	40 00       	.word	0x0040	; ????
     362:	20 50       	subi	r18, 0x00	; 0
     364:	50 50       	subi	r21, 0x00	; 0
     366:	20 00       	.word	0x0020	; ????
     368:	20 60       	ori	r18, 0x00	; 0
     36a:	20 20       	and	r2, r0
     36c:	70 00       	.word	0x0070	; ????
     36e:	60 10       	cpse	r6, r0
     370:	20 40       	sbci	r18, 0x00	; 0
     372:	70 00       	.word	0x0070	; ????
     374:	60 10       	cpse	r6, r0
     376:	20 10       	cpse	r2, r0
     378:	60 00       	.word	0x0060	; ????
     37a:	10 50       	subi	r17, 0x00	; 0
     37c:	70 10       	cpse	r7, r0
     37e:	10 00       	.word	0x0010	; ????
     380:	70 40       	sbci	r23, 0x00	; 0
     382:	60 10       	cpse	r6, r0
     384:	60 00       	.word	0x0060	; ????
     386:	20 40       	sbci	r18, 0x00	; 0
     388:	60 50       	subi	r22, 0x00	; 0
     38a:	20 00       	.word	0x0020	; ????
     38c:	70 10       	cpse	r7, r0
     38e:	30 20       	and	r3, r0
     390:	20 00       	.word	0x0020	; ????
     392:	20 50       	subi	r18, 0x00	; 0
     394:	20 50       	subi	r18, 0x00	; 0
     396:	20 00       	.word	0x0020	; ????
     398:	20 50       	subi	r18, 0x00	; 0
     39a:	30 10       	cpse	r3, r0
     39c:	20 00       	.word	0x0020	; ????
     39e:	00 00       	nop
     3a0:	20 00       	.word	0x0020	; ????
     3a2:	20 00       	.word	0x0020	; ????
     3a4:	00 00       	nop
     3a6:	20 00       	.word	0x0020	; ????
     3a8:	60 40       	sbci	r22, 0x00	; 0
     3aa:	10 20       	and	r1, r0
     3ac:	40 20       	and	r4, r0
     3ae:	10 00       	.word	0x0010	; ????
     3b0:	00 00       	nop
     3b2:	70 00       	.word	0x0070	; ????
     3b4:	70 00       	.word	0x0070	; ????
     3b6:	40 20       	and	r4, r0
     3b8:	10 20       	and	r1, r0
     3ba:	40 00       	.word	0x0040	; ????
     3bc:	60 10       	cpse	r6, r0
     3be:	20 00       	.word	0x0020	; ????
     3c0:	20 00       	.word	0x0020	; ????
     3c2:	70 50       	subi	r23, 0x00	; 0
     3c4:	50 40       	sbci	r21, 0x00	; 0
     3c6:	70 00       	.word	0x0070	; ????
     3c8:	20 50       	subi	r18, 0x00	; 0
     3ca:	70 50       	subi	r23, 0x00	; 0
     3cc:	50 00       	.word	0x0050	; ????
     3ce:	60 50       	subi	r22, 0x00	; 0
     3d0:	60 50       	subi	r22, 0x00	; 0
     3d2:	60 00       	.word	0x0060	; ????
     3d4:	30 40       	sbci	r19, 0x00	; 0
     3d6:	40 40       	sbci	r20, 0x00	; 0
     3d8:	30 00       	.word	0x0030	; ????
     3da:	60 50       	subi	r22, 0x00	; 0
     3dc:	50 50       	subi	r21, 0x00	; 0
     3de:	60 00       	.word	0x0060	; ????
     3e0:	70 40       	sbci	r23, 0x00	; 0
     3e2:	60 40       	sbci	r22, 0x00	; 0
     3e4:	70 00       	.word	0x0070	; ????
     3e6:	70 40       	sbci	r23, 0x00	; 0
     3e8:	60 40       	sbci	r22, 0x00	; 0
     3ea:	40 00       	.word	0x0040	; ????
     3ec:	30 40       	sbci	r19, 0x00	; 0
     3ee:	50 50       	subi	r21, 0x00	; 0
     3f0:	30 00       	.word	0x0030	; ????
     3f2:	50 50       	subi	r21, 0x00	; 0
     3f4:	70 50       	subi	r23, 0x00	; 0
     3f6:	50 00       	.word	0x0050	; ????
     3f8:	70 20       	and	r7, r0
     3fa:	20 20       	and	r2, r0
     3fc:	70 00       	.word	0x0070	; ????
     3fe:	10 10       	cpse	r1, r0
     400:	10 50       	subi	r17, 0x00	; 0
     402:	20 00       	.word	0x0020	; ????
     404:	50 50       	subi	r21, 0x00	; 0
     406:	60 50       	subi	r22, 0x00	; 0
     408:	50 00       	.word	0x0050	; ????
     40a:	40 40       	sbci	r20, 0x00	; 0
     40c:	40 40       	sbci	r20, 0x00	; 0
     40e:	70 00       	.word	0x0070	; ????
     410:	50 70       	andi	r21, 0x00	; 0
     412:	70 50       	subi	r23, 0x00	; 0
     414:	50 00       	.word	0x0050	; ????
     416:	60 50       	subi	r22, 0x00	; 0
     418:	50 50       	subi	r21, 0x00	; 0
     41a:	50 00       	.word	0x0050	; ????
     41c:	70 50       	subi	r23, 0x00	; 0
     41e:	50 50       	subi	r21, 0x00	; 0
     420:	70 00       	.word	0x0070	; ????
     422:	60 50       	subi	r22, 0x00	; 0
     424:	60 40       	sbci	r22, 0x00	; 0
     426:	40 00       	.word	0x0040	; ????
     428:	20 50       	subi	r18, 0x00	; 0
     42a:	50 70       	andi	r21, 0x00	; 0
     42c:	30 00       	.word	0x0030	; ????
     42e:	60 50       	subi	r22, 0x00	; 0
     430:	60 50       	subi	r22, 0x00	; 0
     432:	50 00       	.word	0x0050	; ????
     434:	30 40       	sbci	r19, 0x00	; 0
     436:	70 10       	cpse	r7, r0
     438:	60 00       	.word	0x0060	; ????
     43a:	70 20       	and	r7, r0
     43c:	20 20       	and	r2, r0
     43e:	20 00       	.word	0x0020	; ????
     440:	50 50       	subi	r21, 0x00	; 0
     442:	50 50       	subi	r21, 0x00	; 0
     444:	70 00       	.word	0x0070	; ????
     446:	50 50       	subi	r21, 0x00	; 0
     448:	50 50       	subi	r21, 0x00	; 0
     44a:	20 00       	.word	0x0020	; ????
     44c:	50 50       	subi	r21, 0x00	; 0
     44e:	70 70       	andi	r23, 0x00	; 0
     450:	50 00       	.word	0x0050	; ????
     452:	50 50       	subi	r21, 0x00	; 0
     454:	20 50       	subi	r18, 0x00	; 0
     456:	50 00       	.word	0x0050	; ????
     458:	50 50       	subi	r21, 0x00	; 0
     45a:	20 20       	and	r2, r0
     45c:	20 00       	.word	0x0020	; ????
     45e:	70 10       	cpse	r7, r0
     460:	20 40       	sbci	r18, 0x00	; 0
     462:	70 00       	.word	0x0070	; ????
     464:	60 40       	sbci	r22, 0x00	; 0
     466:	40 40       	sbci	r20, 0x00	; 0
     468:	60 00       	.word	0x0060	; ????
     46a:	40 40       	sbci	r20, 0x00	; 0
     46c:	20 10       	cpse	r2, r0
     46e:	10 00       	.word	0x0010	; ????
     470:	60 20       	and	r6, r0
     472:	20 20       	and	r2, r0
     474:	60 00       	.word	0x0060	; ????
     476:	20 50       	subi	r18, 0x00	; 0
	...
     480:	00 f0       	brcs	.+0      	; 0x482 <__trampolines_end+0x240>
     482:	60 20       	and	r6, r0
     484:	00 00       	nop
     486:	00 00       	nop
     488:	00 00       	nop
     48a:	30 50       	subi	r19, 0x00	; 0
     48c:	70 00       	.word	0x0070	; ????
     48e:	40 40       	sbci	r20, 0x00	; 0
     490:	60 50       	subi	r22, 0x00	; 0
     492:	60 00       	.word	0x0060	; ????
     494:	00 00       	nop
     496:	30 40       	sbci	r19, 0x00	; 0
     498:	30 00       	.word	0x0030	; ????
     49a:	10 10       	cpse	r1, r0
     49c:	30 50       	subi	r19, 0x00	; 0
     49e:	30 00       	.word	0x0030	; ????
     4a0:	00 00       	nop
     4a2:	70 60       	ori	r23, 0x00	; 0
     4a4:	30 00       	.word	0x0030	; ????
     4a6:	10 20       	and	r1, r0
     4a8:	70 20       	and	r7, r0
     4aa:	20 00       	.word	0x0020	; ????
     4ac:	00 00       	nop
     4ae:	70 50       	subi	r23, 0x00	; 0
     4b0:	10 70       	andi	r17, 0x00	; 0
     4b2:	40 40       	sbci	r20, 0x00	; 0
     4b4:	60 50       	subi	r22, 0x00	; 0
     4b6:	50 00       	.word	0x0050	; ????
     4b8:	20 00       	.word	0x0020	; ????
     4ba:	20 20       	and	r2, r0
     4bc:	20 00       	.word	0x0020	; ????
     4be:	20 00       	.word	0x0020	; ????
     4c0:	20 20       	and	r2, r0
     4c2:	20 60       	ori	r18, 0x00	; 0
     4c4:	40 40       	sbci	r20, 0x00	; 0
     4c6:	50 60       	ori	r21, 0x00	; 0
     4c8:	50 00       	.word	0x0050	; ????
     4ca:	20 20       	and	r2, r0
     4cc:	20 20       	and	r2, r0
     4ce:	20 00       	.word	0x0020	; ????
     4d0:	00 00       	nop
     4d2:	70 70       	andi	r23, 0x00	; 0
     4d4:	50 00       	.word	0x0050	; ????
     4d6:	00 00       	nop
     4d8:	60 50       	subi	r22, 0x00	; 0
     4da:	50 00       	.word	0x0050	; ????
     4dc:	00 00       	nop
     4de:	20 50       	subi	r18, 0x00	; 0
     4e0:	20 00       	.word	0x0020	; ????
     4e2:	00 00       	nop
     4e4:	60 50       	subi	r22, 0x00	; 0
     4e6:	60 40       	sbci	r22, 0x00	; 0
     4e8:	00 00       	nop
     4ea:	30 50       	subi	r19, 0x00	; 0
     4ec:	30 10       	cpse	r3, r0
     4ee:	00 00       	nop
     4f0:	60 40       	sbci	r22, 0x00	; 0
     4f2:	40 00       	.word	0x0040	; ????
     4f4:	00 00       	nop
     4f6:	30 20       	and	r3, r0
     4f8:	60 00       	.word	0x0060	; ????
     4fa:	00 20       	and	r0, r0
     4fc:	70 20       	and	r7, r0
     4fe:	30 00       	.word	0x0030	; ????
     500:	00 00       	nop
     502:	50 50       	subi	r21, 0x00	; 0
     504:	70 00       	.word	0x0070	; ????
     506:	00 00       	nop
     508:	50 50       	subi	r21, 0x00	; 0
     50a:	20 00       	.word	0x0020	; ????
     50c:	00 00       	nop
     50e:	50 70       	andi	r21, 0x00	; 0
     510:	70 00       	.word	0x0070	; ????
     512:	00 00       	nop
     514:	50 20       	and	r5, r0
     516:	50 00       	.word	0x0050	; ????
     518:	00 00       	nop
     51a:	50 50       	subi	r21, 0x00	; 0
     51c:	20 40       	sbci	r18, 0x00	; 0
     51e:	00 00       	nop
     520:	60 20       	and	r6, r0
     522:	30 00       	.word	0x0030	; ????
     524:	30 20       	and	r3, r0
     526:	60 20       	and	r6, r0
     528:	30 00       	.word	0x0030	; ????
     52a:	20 20       	and	r2, r0
     52c:	20 20       	and	r2, r0
     52e:	20 00       	.word	0x0020	; ????
     530:	60 20       	and	r6, r0
     532:	30 20       	and	r3, r0
     534:	60 00       	.word	0x0060	; ????
     536:	50 a0       	ldd	r5, Z+32	; 0x20
     538:	00 00       	nop
     53a:	00 00       	nop
     53c:	00 20       	and	r0, r0
     53e:	50 70       	andi	r21, 0x00	; 0
     540:	00 00       	nop
     542:	30 40       	sbci	r19, 0x00	; 0
     544:	40 70       	andi	r20, 0x00	; 0
     546:	20 40       	sbci	r18, 0x00	; 0
     548:	50 00       	.word	0x0050	; ????
     54a:	50 50       	subi	r21, 0x00	; 0
     54c:	30 00       	.word	0x0030	; ????
     54e:	10 20       	and	r1, r0
     550:	70 60       	ori	r23, 0x00	; 0
     552:	30 00       	.word	0x0030	; ????
     554:	20 50       	subi	r18, 0x00	; 0
     556:	30 50       	subi	r19, 0x00	; 0
     558:	70 00       	.word	0x0070	; ????
     55a:	50 00       	.word	0x0050	; ????
     55c:	30 50       	subi	r19, 0x00	; 0
     55e:	70 00       	.word	0x0070	; ????
     560:	40 20       	and	r4, r0
     562:	30 50       	subi	r19, 0x00	; 0
     564:	70 00       	.word	0x0070	; ????
     566:	20 00       	.word	0x0020	; ????
     568:	30 50       	subi	r19, 0x00	; 0
     56a:	70 00       	.word	0x0070	; ????
     56c:	00 70       	andi	r16, 0x00	; 0
     56e:	40 70       	andi	r20, 0x00	; 0
     570:	20 60       	ori	r18, 0x00	; 0
     572:	20 50       	subi	r18, 0x00	; 0
     574:	70 60       	ori	r23, 0x00	; 0
     576:	30 00       	.word	0x0030	; ????
     578:	50 00       	.word	0x0050	; ????
     57a:	70 60       	ori	r23, 0x00	; 0
     57c:	30 00       	.word	0x0030	; ????
     57e:	40 20       	and	r4, r0
     580:	70 60       	ori	r23, 0x00	; 0
     582:	30 00       	.word	0x0030	; ????
     584:	50 00       	.word	0x0050	; ????
     586:	20 20       	and	r2, r0
     588:	20 00       	.word	0x0020	; ????
     58a:	20 50       	subi	r18, 0x00	; 0
     58c:	00 20       	and	r0, r0
     58e:	20 00       	.word	0x0020	; ????
     590:	40 20       	and	r4, r0
     592:	00 20       	and	r0, r0
     594:	20 00       	.word	0x0020	; ????
     596:	50 20       	and	r5, r0
     598:	50 70       	andi	r21, 0x00	; 0
     59a:	50 00       	.word	0x0050	; ????
     59c:	20 20       	and	r2, r0
     59e:	50 70       	andi	r21, 0x00	; 0
     5a0:	50 00       	.word	0x0050	; ????
     5a2:	10 20       	and	r1, r0
     5a4:	70 60       	ori	r23, 0x00	; 0
     5a6:	70 00       	.word	0x0070	; ????
     5a8:	00 00       	nop
     5aa:	30 70       	andi	r19, 0x00	; 0
     5ac:	60 00       	.word	0x0060	; ????
     5ae:	30 60       	ori	r19, 0x00	; 0
     5b0:	70 60       	ori	r23, 0x00	; 0
     5b2:	70 00       	.word	0x0070	; ????
     5b4:	20 50       	subi	r18, 0x00	; 0
     5b6:	20 50       	subi	r18, 0x00	; 0
     5b8:	20 00       	.word	0x0020	; ????
     5ba:	50 00       	.word	0x0050	; ????
     5bc:	20 50       	subi	r18, 0x00	; 0
     5be:	20 00       	.word	0x0020	; ????
     5c0:	40 20       	and	r4, r0
     5c2:	20 50       	subi	r18, 0x00	; 0
     5c4:	20 00       	.word	0x0020	; ????
     5c6:	20 50       	subi	r18, 0x00	; 0
     5c8:	00 50       	subi	r16, 0x00	; 0
     5ca:	70 00       	.word	0x0070	; ????
     5cc:	40 20       	and	r4, r0
     5ce:	50 50       	subi	r21, 0x00	; 0
     5d0:	70 00       	.word	0x0070	; ????
     5d2:	50 00       	.word	0x0050	; ????
     5d4:	50 50       	subi	r21, 0x00	; 0
     5d6:	20 40       	sbci	r18, 0x00	; 0
     5d8:	50 20       	and	r5, r0
     5da:	50 50       	subi	r21, 0x00	; 0
     5dc:	20 00       	.word	0x0020	; ????
     5de:	50 00       	.word	0x0050	; ????
     5e0:	50 50       	subi	r21, 0x00	; 0
     5e2:	70 00       	.word	0x0070	; ????
     5e4:	20 70       	andi	r18, 0x00	; 0
     5e6:	40 70       	andi	r20, 0x00	; 0
     5e8:	20 00       	.word	0x0020	; ????
     5ea:	10 20       	and	r1, r0
     5ec:	70 20       	and	r7, r0
     5ee:	70 00       	.word	0x0070	; ????
     5f0:	50 70       	andi	r21, 0x00	; 0
     5f2:	20 70       	andi	r18, 0x00	; 0
     5f4:	20 00       	.word	0x0020	; ????
     5f6:	00 60       	ori	r16, 0x00	; 0
     5f8:	60 50       	subi	r22, 0x00	; 0
     5fa:	50 00       	.word	0x0050	; ????
     5fc:	30 20       	and	r3, r0
     5fe:	30 20       	and	r3, r0
     600:	60 00       	.word	0x0060	; ????
     602:	10 20       	and	r1, r0
     604:	30 50       	subi	r19, 0x00	; 0
     606:	70 00       	.word	0x0070	; ????
     608:	10 20       	and	r1, r0
     60a:	00 20       	and	r0, r0
     60c:	20 00       	.word	0x0020	; ????
     60e:	10 20       	and	r1, r0
     610:	70 50       	subi	r23, 0x00	; 0
     612:	70 00       	.word	0x0070	; ????
     614:	10 20       	and	r1, r0
     616:	00 50       	subi	r16, 0x00	; 0
     618:	70 00       	.word	0x0070	; ????
     61a:	70 00       	.word	0x0070	; ????
     61c:	70 50       	subi	r23, 0x00	; 0
     61e:	50 00       	.word	0x0050	; ????
     620:	70 00       	.word	0x0070	; ????
     622:	50 70       	andi	r21, 0x00	; 0
     624:	50 00       	.word	0x0050	; ????
     626:	30 50       	subi	r19, 0x00	; 0
     628:	70 00       	.word	0x0070	; ????
     62a:	70 00       	.word	0x0070	; ????
     62c:	20 50       	subi	r18, 0x00	; 0
     62e:	20 00       	.word	0x0020	; ????
     630:	70 00       	.word	0x0070	; ????
     632:	20 00       	.word	0x0020	; ????
     634:	20 40       	sbci	r18, 0x00	; 0
     636:	30 00       	.word	0x0030	; ????
     638:	00 70       	andi	r16, 0x00	; 0
     63a:	40 40       	sbci	r20, 0x00	; 0
     63c:	00 00       	nop
     63e:	00 e0       	ldi	r16, 0x00	; 0
     640:	20 20       	and	r2, r0
     642:	00 00       	nop
     644:	40 50       	subi	r20, 0x00	; 0
     646:	20 50       	subi	r18, 0x00	; 0
     648:	30 00       	.word	0x0030	; ????
     64a:	40 50       	subi	r20, 0x00	; 0
     64c:	20 70       	andi	r18, 0x00	; 0
     64e:	10 00       	.word	0x0010	; ????
     650:	20 00       	.word	0x0020	; ????
     652:	20 20       	and	r2, r0
     654:	20 00       	.word	0x0020	; ????
     656:	00 50       	subi	r16, 0x00	; 0
     658:	a0 50       	subi	r26, 0x00	; 0
     65a:	00 00       	nop
     65c:	00 a0       	ldd	r0, Z+32	; 0x20
     65e:	50 a0       	ldd	r5, Z+32	; 0x20
     660:	00 00       	nop
     662:	40 10       	cpse	r4, r0
     664:	40 10       	cpse	r4, r0
     666:	40 10       	cpse	r4, r0
     668:	50 a0       	ldd	r5, Z+32	; 0x20
     66a:	50 a0       	ldd	r5, Z+32	; 0x20
     66c:	50 a0       	ldd	r5, Z+32	; 0x20
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	20 20       	and	r2, r0
     676:	20 20       	and	r2, r0
     678:	20 20       	and	r2, r0
     67a:	20 20       	and	r2, r0
     67c:	e0 20       	and	r14, r0
     67e:	20 20       	and	r2, r0
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	20 20       	and	r2, r0
     686:	50 50       	subi	r21, 0x00	; 0
     688:	d0 50       	subi	r29, 0x00	; 0
     68a:	50 50       	subi	r21, 0x00	; 0
     68c:	00 00       	nop
     68e:	f0 50       	subi	r31, 0x00	; 0
     690:	50 50       	subi	r21, 0x00	; 0
     692:	00 e0       	ldi	r16, 0x00	; 0
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	20 20       	and	r2, r0
     698:	50 d0       	rcall	.+160    	; 0x73a <__trampolines_end+0x4f8>
     69a:	10 d0       	rcall	.+32     	; 0x6bc <__trampolines_end+0x47a>
     69c:	50 50       	subi	r21, 0x00	; 0
     69e:	50 50       	subi	r21, 0x00	; 0
     6a0:	50 50       	subi	r21, 0x00	; 0
     6a2:	50 50       	subi	r21, 0x00	; 0
     6a4:	00 f0       	brcs	.+0      	; 0x6a6 <__trampolines_end+0x464>
     6a6:	10 d0       	rcall	.+32     	; 0x6c8 <__trampolines_end+0x486>
     6a8:	50 50       	subi	r21, 0x00	; 0
     6aa:	50 d0       	rcall	.+160    	; 0x74c <__trampolines_end+0x50a>
     6ac:	10 f0       	brcs	.+4      	; 0x6b2 <__trampolines_end+0x470>
     6ae:	00 00       	nop
     6b0:	50 50       	subi	r21, 0x00	; 0
     6b2:	f0 00       	.word	0x00f0	; ????
     6b4:	00 00       	nop
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	00 00       	nop
     6bc:	00 00       	nop
     6be:	e0 20       	and	r14, r0
     6c0:	20 20       	and	r2, r0
     6c2:	20 20       	and	r2, r0
     6c4:	30 00       	.word	0x0030	; ????
     6c6:	00 00       	nop
     6c8:	20 20       	and	r2, r0
     6ca:	f0 00       	.word	0x00f0	; ????
     6cc:	00 00       	nop
     6ce:	00 00       	nop
     6d0:	f0 20       	and	r15, r0
     6d2:	20 20       	and	r2, r0
     6d4:	20 20       	and	r2, r0
     6d6:	30 20       	and	r3, r0
     6d8:	20 20       	and	r2, r0
     6da:	00 00       	nop
     6dc:	f0 00       	.word	0x00f0	; ????
     6de:	00 00       	nop
     6e0:	20 20       	and	r2, r0
     6e2:	f0 20       	and	r15, r0
     6e4:	20 20       	and	r2, r0
     6e6:	20 30       	cpi	r18, 0x00	; 0
     6e8:	20 30       	cpi	r18, 0x00	; 0
     6ea:	20 20       	and	r2, r0
     6ec:	50 50       	subi	r21, 0x00	; 0
     6ee:	50 50       	subi	r21, 0x00	; 0
     6f0:	50 50       	subi	r21, 0x00	; 0
     6f2:	50 50       	subi	r21, 0x00	; 0
     6f4:	40 70       	andi	r20, 0x00	; 0
     6f6:	00 00       	nop
     6f8:	00 70       	andi	r16, 0x00	; 0
     6fa:	40 50       	subi	r20, 0x00	; 0
     6fc:	50 50       	subi	r21, 0x00	; 0
     6fe:	50 d0       	rcall	.+160    	; 0x7a0 <__trampolines_end+0x55e>
     700:	00 f0       	brcs	.+0      	; 0x702 <__trampolines_end+0x4c0>
     702:	00 00       	nop
     704:	00 f0       	brcs	.+0      	; 0x706 <__trampolines_end+0x4c4>
     706:	00 d0       	rcall	.+0      	; 0x708 <__trampolines_end+0x4c6>
     708:	50 50       	subi	r21, 0x00	; 0
     70a:	50 50       	subi	r21, 0x00	; 0
     70c:	40 50       	subi	r20, 0x00	; 0
     70e:	50 50       	subi	r21, 0x00	; 0
     710:	00 f0       	brcs	.+0      	; 0x712 <__trampolines_end+0x4d0>
     712:	00 f0       	brcs	.+0      	; 0x714 <__trampolines_end+0x4d2>
     714:	00 00       	nop
     716:	50 d0       	rcall	.+160    	; 0x7b8 <__trampolines_end+0x576>
     718:	00 d0       	rcall	.+0      	; 0x71a <__trampolines_end+0x4d8>
     71a:	50 50       	subi	r21, 0x00	; 0
     71c:	20 f0       	brcs	.+8      	; 0x726 <__trampolines_end+0x4e4>
     71e:	00 f0       	brcs	.+0      	; 0x720 <__trampolines_end+0x4de>
     720:	00 00       	nop
     722:	50 50       	subi	r21, 0x00	; 0
     724:	f0 00       	.word	0x00f0	; ????
     726:	00 00       	nop
     728:	00 f0       	brcs	.+0      	; 0x72a <__trampolines_end+0x4e8>
     72a:	00 f0       	brcs	.+0      	; 0x72c <__trampolines_end+0x4ea>
     72c:	20 20       	and	r2, r0
     72e:	00 00       	nop
     730:	f0 50       	subi	r31, 0x00	; 0
     732:	50 50       	subi	r21, 0x00	; 0
     734:	50 50       	subi	r21, 0x00	; 0
     736:	70 00       	.word	0x0070	; ????
     738:	00 00       	nop
     73a:	20 30       	cpi	r18, 0x00	; 0
     73c:	20 30       	cpi	r18, 0x00	; 0
     73e:	00 00       	nop
     740:	00 30       	cpi	r16, 0x00	; 0
     742:	20 30       	cpi	r18, 0x00	; 0
     744:	20 20       	and	r2, r0
     746:	00 00       	nop
     748:	70 50       	subi	r23, 0x00	; 0
     74a:	50 50       	subi	r21, 0x00	; 0
     74c:	50 50       	subi	r21, 0x00	; 0
     74e:	d0 50       	subi	r29, 0x00	; 0
     750:	50 50       	subi	r21, 0x00	; 0
     752:	20 f0       	brcs	.+8      	; 0x75c <__trampolines_end+0x51a>
     754:	00 f0       	brcs	.+0      	; 0x756 <__trampolines_end+0x514>
     756:	20 20       	and	r2, r0
     758:	20 20       	and	r2, r0
     75a:	e0 00       	.word	0x00e0	; ????
     75c:	00 00       	nop
     75e:	00 00       	nop
     760:	30 20       	and	r3, r0
     762:	20 20       	and	r2, r0
     764:	f0 f0       	brcs	.+60     	; 0x7a2 <__trampolines_end+0x560>
     766:	f0 f0       	brcs	.+60     	; 0x7a4 <__trampolines_end+0x562>
     768:	f0 f0       	brcs	.+60     	; 0x7a6 <__trampolines_end+0x564>
     76a:	00 00       	nop
     76c:	00 f0       	brcs	.+0      	; 0x76e <__trampolines_end+0x52c>
     76e:	f0 f0       	brcs	.+60     	; 0x7ac <__trampolines_end+0x56a>
     770:	c0 c0       	rjmp	.+384    	; 0x8f2 <font_5x7+0xb0>
     772:	c0 c0       	rjmp	.+384    	; 0x8f4 <font_5x7+0xb2>
     774:	c0 c0       	rjmp	.+384    	; 0x8f6 <font_5x7+0xb4>
     776:	30 30       	cpi	r19, 0x00	; 0
     778:	30 30       	cpi	r19, 0x00	; 0
     77a:	30 30       	cpi	r19, 0x00	; 0
     77c:	f0 f0       	brcs	.+60     	; 0x7ba <__trampolines_end+0x578>
     77e:	f0 00       	.word	0x00f0	; ????
     780:	00 00       	nop
     782:	00 00       	nop
     784:	70 60       	ori	r23, 0x00	; 0
     786:	70 00       	.word	0x0070	; ????
     788:	20 50       	subi	r18, 0x00	; 0
     78a:	60 50       	subi	r22, 0x00	; 0
     78c:	60 40       	sbci	r22, 0x00	; 0
     78e:	70 50       	subi	r23, 0x00	; 0
     790:	40 40       	sbci	r20, 0x00	; 0
     792:	40 00       	.word	0x0040	; ????
     794:	70 50       	subi	r23, 0x00	; 0
     796:	50 50       	subi	r21, 0x00	; 0
     798:	50 00       	.word	0x0050	; ????
     79a:	70 40       	sbci	r23, 0x00	; 0
     79c:	20 40       	sbci	r18, 0x00	; 0
     79e:	70 00       	.word	0x0070	; ????
     7a0:	00 00       	nop
     7a2:	30 50       	subi	r19, 0x00	; 0
     7a4:	20 00       	.word	0x0020	; ????
     7a6:	00 00       	nop
     7a8:	50 50       	subi	r21, 0x00	; 0
     7aa:	70 40       	sbci	r23, 0x00	; 0
     7ac:	00 10       	cpse	r0, r0
     7ae:	60 20       	and	r6, r0
     7b0:	20 00       	.word	0x0020	; ????
     7b2:	70 20       	and	r7, r0
     7b4:	50 20       	and	r5, r0
     7b6:	70 00       	.word	0x0070	; ????
     7b8:	20 50       	subi	r18, 0x00	; 0
     7ba:	70 50       	subi	r23, 0x00	; 0
     7bc:	20 00       	.word	0x0020	; ????
     7be:	00 20       	and	r0, r0
     7c0:	50 50       	subi	r21, 0x00	; 0
     7c2:	50 00       	.word	0x0050	; ????
     7c4:	30 40       	sbci	r19, 0x00	; 0
     7c6:	20 50       	subi	r18, 0x00	; 0
     7c8:	20 00       	.word	0x0020	; ????
     7ca:	00 00       	nop
     7cc:	70 50       	subi	r23, 0x00	; 0
     7ce:	70 00       	.word	0x0070	; ????
     7d0:	20 70       	andi	r18, 0x00	; 0
     7d2:	50 70       	andi	r21, 0x00	; 0
     7d4:	20 00       	.word	0x0020	; ????
     7d6:	30 40       	sbci	r19, 0x00	; 0
     7d8:	70 40       	sbci	r23, 0x00	; 0
     7da:	30 00       	.word	0x0030	; ????
     7dc:	20 50       	subi	r18, 0x00	; 0
     7de:	50 50       	subi	r21, 0x00	; 0
     7e0:	50 00       	.word	0x0050	; ????
     7e2:	70 00       	.word	0x0070	; ????
     7e4:	70 00       	.word	0x0070	; ????
     7e6:	70 00       	.word	0x0070	; ????
     7e8:	20 70       	andi	r18, 0x00	; 0
     7ea:	20 00       	.word	0x0020	; ????
     7ec:	70 00       	.word	0x0070	; ????
     7ee:	60 10       	cpse	r6, r0
     7f0:	60 00       	.word	0x0060	; ????
     7f2:	70 00       	.word	0x0070	; ????
     7f4:	30 40       	sbci	r19, 0x00	; 0
     7f6:	30 00       	.word	0x0030	; ????
     7f8:	70 00       	.word	0x0070	; ????
     7fa:	00 10       	cpse	r0, r0
     7fc:	20 20       	and	r2, r0
     7fe:	20 20       	and	r2, r0
     800:	20 20       	and	r2, r0
     802:	20 20       	and	r2, r0
     804:	40 00       	.word	0x0040	; ????
     806:	20 00       	.word	0x0020	; ????
     808:	70 00       	.word	0x0070	; ????
     80a:	20 00       	.word	0x0020	; ????
     80c:	00 50       	subi	r16, 0x00	; 0
     80e:	a0 50       	subi	r26, 0x00	; 0
     810:	a0 00       	.word	0x00a0	; ????
     812:	20 50       	subi	r18, 0x00	; 0
     814:	20 00       	.word	0x0020	; ????
     816:	00 00       	nop
     818:	00 20       	and	r0, r0
     81a:	70 20       	and	r7, r0
     81c:	00 00       	nop
     81e:	00 00       	nop
     820:	20 00       	.word	0x0020	; ????
     822:	00 00       	nop
     824:	30 20       	and	r3, r0
     826:	20 60       	ori	r18, 0x00	; 0
     828:	20 00       	.word	0x0020	; ????
     82a:	70 50       	subi	r23, 0x00	; 0
     82c:	50 00       	.word	0x0050	; ????
     82e:	00 00       	nop
     830:	60 20       	and	r6, r0
     832:	40 60       	ori	r20, 0x00	; 0
     834:	00 00       	nop
     836:	00 00       	nop
     838:	60 60       	ori	r22, 0x00	; 0
	...

00000842 <font_5x7>:
     842:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     852:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     862:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     872:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     882:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     892:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     8a2:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     8b2:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     8c2:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     8d2:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     8e2:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     8f2:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     902:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     912:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     922:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     932:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     942:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     952:	49 49 31 01 01 71 09 07 36 49 49 49 36 46 49 49     II1..q..6III6FII
     962:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     972:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     982:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     992:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     9a2:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     9b2:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     9c2:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     9d2:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     9e2:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     9f2:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     a02:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     a12:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     a22:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     a32:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     a42:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     a52:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     a62:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     a72:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     a82:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     a92:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     aa2:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     ab2:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     ac2:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     ad2:	55 55 79 41 21 54 54 78 41 21 55 54 78 40 20 54     UUyA!TTxA!UTx@ T
     ae2:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     af2:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     b02:	42 00 01 45 7c 40 f0 29 24 29 f0 f0 28 25 28 f0     B..E|@.)$)..(%(.
     b12:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     b22:	49 49 49 32 32 48 48 48 32 32 4a 48 48 30 3a 41     III22HHH22JHH0:A
     b32:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 39 44 44     A!z:B@ x....}9DD
     b42:	44 39 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     D9=@@@=<$.$$H~IC
     b52:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     b62:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     b72:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     b82:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     b92:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     ba2:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     bb2:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     bc2:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     bd2:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     be2:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     bf2:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     c02:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     c12:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     c22:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     c32:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     c42:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     c52:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     c62:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     c72:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     c82:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     c92:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     ca2:	7c 2a 2a 3e 14 7e 02 02 06 06 02 7e 02 7e 02 63     |**>.~.....~.~.c
     cb2:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     cc2:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     cd2:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     ce2:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     cf2:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     d02:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     d12:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     d22:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     d32:	12 00 3c 3c 3c 3c 00 00 00 00 00                    ..<<<<.....

00000d3d <IMG_SPEAKER_A>:
     d3d:	18 18 3c 42 a5 18                                   ..<B..

00000d43 <__c.2161>:
     d43:	6e 61 6e 00                                         nan.

00000d47 <__c.2159>:
     d47:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     d57:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     d67:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     d77:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     d87:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     d97:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     da7:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     db7:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     dc7:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     dd7:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     de7:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     df7:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     e07:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     e17:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     e27:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     e37:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000e45 <__c.2299>:
     e45:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

00000e52 <_StackPaint>:
 *  the maximum stack usage of the running application.
 */
void _StackPaint(void) __attribute__((naked)) __attribute__((optimize("O3"))) __attribute__((section (".init1")));
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
     e52:	e9 ee       	ldi	r30, 0xE9	; 233
     e54:	fc e2       	ldi	r31, 0x2C	; 44
     e56:	e3 70       	andi	r30, 0x03	; 3
     e58:	ff 27       	eor	r31, r31
     e5a:	e7 51       	subi	r30, 0x17	; 23
     e5c:	f3 4d       	sbci	r31, 0xD3	; 211
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
     e5e:	2f ef       	ldi	r18, 0xFF	; 255
     e60:	3f e3       	ldi	r19, 0x3F	; 63
     e62:	2c 7f       	andi	r18, 0xFC	; 252
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     e64:	e2 17       	cp	r30, r18
     e66:	f3 07       	cpc	r31, r19
     e68:	58 f4       	brcc	.+22     	; 0xe80 <_StackPaint+0x2e>
		*fill_pos = __SWAP_ENDIAN32(0xDEADBEEF);
     e6a:	8e ed       	ldi	r24, 0xDE	; 222
     e6c:	9d ea       	ldi	r25, 0xAD	; 173
     e6e:	ae eb       	ldi	r26, 0xBE	; 190
     e70:	bf ee       	ldi	r27, 0xEF	; 239
     e72:	81 93       	st	Z+, r24
     e74:	91 93       	st	Z+, r25
     e76:	a1 93       	st	Z+, r26
     e78:	b1 93       	st	Z+, r27
void _StackPaint(void)
{
	uint32_t* fill_start = (uint32_t*)__ALIGN32_UPWARDS(&_end);
	uint32_t* fill_end   = (uint32_t*)__ALIGN32_DOWNWARDS(&__stack);
	
	for (uint32_t* fill_pos = fill_start; fill_pos < fill_end; fill_pos++)
     e7a:	e2 17       	cp	r30, r18
     e7c:	f3 07       	cpc	r31, r19
     e7e:	c8 f3       	brcs	.-14     	; 0xe72 <_StackPaint+0x20>
     e80:	11 24       	eor	r1, r1
     e82:	1f be       	out	0x3f, r1	; 63
     e84:	cf ef       	ldi	r28, 0xFF	; 255
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	df e3       	ldi	r29, 0x3F	; 63
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	00 e0       	ldi	r16, 0x00	; 0
     e8e:	0c bf       	out	0x3c, r16	; 60
     e90:	18 be       	out	0x38, r1	; 56
     e92:	19 be       	out	0x39, r1	; 57
     e94:	1a be       	out	0x3a, r1	; 58
     e96:	1b be       	out	0x3b, r1	; 59

00000e98 <__do_copy_data>:
     e98:	1a e2       	ldi	r17, 0x2A	; 42
     e9a:	a0 e0       	ldi	r26, 0x00	; 0
     e9c:	b0 e2       	ldi	r27, 0x20	; 32
     e9e:	ec e3       	ldi	r30, 0x3C	; 60
     ea0:	f1 eb       	ldi	r31, 0xB1	; 177
     ea2:	00 e0       	ldi	r16, 0x00	; 0
     ea4:	0b bf       	out	0x3b, r16	; 59
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <__do_copy_data+0x14>
     ea8:	07 90       	elpm	r0, Z+
     eaa:	0d 92       	st	X+, r0
     eac:	aa 31       	cpi	r26, 0x1A	; 26
     eae:	b1 07       	cpc	r27, r17
     eb0:	d9 f7       	brne	.-10     	; 0xea8 <__do_copy_data+0x10>
     eb2:	1b be       	out	0x3b, r1	; 59

00000eb4 <__do_clear_bss>:
     eb4:	2c e2       	ldi	r18, 0x2C	; 44
     eb6:	aa e1       	ldi	r26, 0x1A	; 26
     eb8:	ba e2       	ldi	r27, 0x2A	; 42
     eba:	01 c0       	rjmp	.+2      	; 0xebe <.do_clear_bss_start>

00000ebc <.do_clear_bss_loop>:
     ebc:	1d 92       	st	X+, r1

00000ebe <.do_clear_bss_start>:
     ebe:	a9 3e       	cpi	r26, 0xE9	; 233
     ec0:	b2 07       	cpc	r27, r18
     ec2:	e1 f7       	brne	.-8      	; 0xebc <.do_clear_bss_loop>
     ec4:	0e 94 54 1f 	call	0x3ea8	; 0x3ea8 <main>
     ec8:	0c 94 9c 58 	jmp	0xb138	; 0xb138 <_exit>

00000ecc <__bad_interrupt>:
     ecc:	99 c8       	rjmp	.-3790   	; 0x0 <__vectors>

00000ece <adc_setup>:
void adc_setup(void) 
{	
	unsigned char samples = 16;
	
	//Disable power reduction for ADCA 
	PR.PRPA &= ~0x02;
     ece:	80 91 71 00 	lds	r24, 0x0071
     ed2:	8d 7f       	andi	r24, 0xFD	; 253
     ed4:	80 93 71 00 	sts	0x0071, r24

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     ede:	e0 e2       	ldi	r30, 0x20	; 32
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     ee4:	10 92 ca 01 	sts	0x01CA, r1
	
	ADCA.CALL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     ee8:	e0 93 0c 02 	sts	0x020C, r30

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     eec:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     ef0:	e1 e2       	ldi	r30, 0x21	; 33
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     ef6:	10 92 ca 01 	sts	0x01CA, r1
	ADCA.CALH = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     efa:	e0 93 0d 02 	sts	0x020D, r30

	ADCA.CH0.CTRL	 = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	80 93 20 02 	sts	0x0220, r24
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
     f04:	10 92 21 02 	sts	0x0221, r1
	ADCA.CTRLB		 = ADC_RESOLUTION_12BIT_gc;
     f08:	10 92 01 02 	sts	0x0201, r1
	ADCA.PRESCALER	 = ADC_PRESCALER_DIV256_gc;
     f0c:	96 e0       	ldi	r25, 0x06	; 6
     f0e:	90 93 04 02 	sts	0x0204, r25
	ADCA.REFCTRL	 = ADC_REFSEL_INTVCC_gc;
     f12:	90 e1       	ldi	r25, 0x10	; 16
     f14:	90 93 02 02 	sts	0x0202, r25
	ADCA.EVCTRL		 = ADC_EVACT_NONE_gc;
     f18:	10 92 03 02 	sts	0x0203, r1
	ADCA.INTFLAGS	 = ADC_CH0IF_bm;
     f1c:	80 93 06 02 	sts	0x0206, r24
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     f20:	10 92 22 02 	sts	0x0222, r1
	ADCA.CTRLA		 = ADC_ENABLE_bm;
     f24:	80 93 00 02 	sts	0x0200, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	9c e7       	ldi	r25, 0x7C	; 124
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <adc_setup+0x5e>
     f30:	00 c0       	rjmp	.+0      	; 0xf32 <adc_setup+0x64>
     f32:	00 00       	nop
     f34:	20 91 1a 2a 	lds	r18, 0x2A1A
     f38:	30 91 1b 2a 	lds	r19, 0x2A1B
     f3c:	40 e1       	ldi	r20, 0x10	; 16
	_delay_ms(4);
	
	while (samples > 0) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
     f3e:	51 e0       	ldi	r21, 0x01	; 1
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
	ADCA.CTRLA		 = ADC_ENABLE_bm;
	_delay_ms(4);
	
	while (samples > 0) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
     f40:	80 91 20 02 	lds	r24, 0x0220
     f44:	80 68       	ori	r24, 0x80	; 128
     f46:	80 93 20 02 	sts	0x0220, r24
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
     f4a:	80 91 23 02 	lds	r24, 0x0223
     f4e:	80 ff       	sbrs	r24, 0
     f50:	fc cf       	rjmp	.-8      	; 0xf4a <adc_setup+0x7c>
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
     f52:	50 93 23 02 	sts	0x0223, r21
		offset += ADCA.CH0.RES;
     f56:	80 91 24 02 	lds	r24, 0x0224
     f5a:	90 91 25 02 	lds	r25, 0x0225
     f5e:	82 0f       	add	r24, r18
     f60:	93 1f       	adc	r25, r19
     f62:	41 50       	subi	r20, 0x01	; 1
	ADCA.INTFLAGS	 = ADC_CH0IF_bm;
	ADCA.CH0.INTCTRL = ADC_CH_INTLVL_OFF_gc;
	ADCA.CTRLA		 = ADC_ENABLE_bm;
	_delay_ms(4);
	
	while (samples > 0) {
     f64:	11 f0       	breq	.+4      	; 0xf6a <adc_setup+0x9c>
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
		offset += ADCA.CH0.RES;
     f66:	9c 01       	movw	r18, r24
     f68:	eb cf       	rjmp	.-42     	; 0xf40 <adc_setup+0x72>
		samples--;
	}
	
	ADCA.CTRLA &= ~(ADC_ENABLE_bm);
     f6a:	20 91 00 02 	lds	r18, 0x0200
     f6e:	2e 7f       	andi	r18, 0xFE	; 254
     f70:	20 93 00 02 	sts	0x0200, r18
	offset >>= 4;
     f74:	24 e0       	ldi	r18, 0x04	; 4
     f76:	95 95       	asr	r25
     f78:	87 95       	ror	r24
     f7a:	2a 95       	dec	r18
     f7c:	e1 f7       	brne	.-8      	; 0xf76 <adc_setup+0xa8>
     f7e:	80 93 1a 2a 	sts	0x2A1A, r24
     f82:	90 93 1b 2a 	sts	0x2A1B, r25
	ADCA.CMP = 0x0000;
     f86:	10 92 18 02 	sts	0x0218, r1
     f8a:	10 92 19 02 	sts	0x0219, r1
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 20 02 	sts	0x0220, r24
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc;
     f94:	10 92 21 02 	sts	0x0221, r1
	ADCA.EVCTRL	= ADC_SWEEP_0_gc | ADC_EVACT_NONE_gc;
     f98:	10 92 03 02 	sts	0x0203, r1
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     f9c:	10 92 22 02 	sts	0x0222, r1
	ADCA.CH1.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     fa0:	10 92 2a 02 	sts	0x022A, r1
	ADCA.CH2.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     fa4:	10 92 32 02 	sts	0x0232, r1
	ADCA.CH3.INTCTRL = ADC_CH_INTLVL_OFF_gc;
     fa8:	10 92 3a 02 	sts	0x023A, r1
	
	ADCA.CTRLA |= ADC_ENABLE_bm;
     fac:	80 91 00 02 	lds	r24, 0x0200
     fb0:	81 60       	ori	r24, 0x01	; 1
     fb2:	80 93 00 02 	sts	0x0200, r24
     fb6:	9f ef       	ldi	r25, 0xFF	; 255
     fb8:	29 ef       	ldi	r18, 0xF9	; 249
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	91 50       	subi	r25, 0x01	; 1
     fbe:	20 40       	sbci	r18, 0x00	; 0
     fc0:	80 40       	sbci	r24, 0x00	; 0
     fc2:	e1 f7       	brne	.-8      	; 0xfbc <adc_setup+0xee>
     fc4:	00 c0       	rjmp	.+0      	; 0xfc6 <adc_setup+0xf8>
     fc6:	00 00       	nop
     fc8:	08 95       	ret

00000fca <adc_disable>:
	_delay_ms(10);
}

void adc_disable(void) 
{	
	ADCA.CTRLA &= ~(ADC_ENABLE_bm);
     fca:	e0 e0       	ldi	r30, 0x00	; 0
     fcc:	f2 e0       	ldi	r31, 0x02	; 2
     fce:	80 81       	ld	r24, Z
     fd0:	8e 7f       	andi	r24, 0xFE	; 254
     fd2:	80 83       	st	Z, r24
	
	//Enable power reduction for ADCA
	PR.PRPA |= 0x02;
     fd4:	e0 e7       	ldi	r30, 0x70	; 112
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	81 81       	ldd	r24, Z+1	; 0x01
     fda:	82 60       	ori	r24, 0x02	; 2
     fdc:	81 83       	std	Z+1, r24	; 0x01
     fde:	08 95       	ret

00000fe0 <adc_enable_current_measurement>:
	return 0;
}

void adc_enable_current_measurement(void) 
{	
	PORTA.DIRSET = CURRENT_MEASUREMENT_ENABLE;
     fe0:	e0 e0       	ldi	r30, 0x00	; 0
     fe2:	f6 e0       	ldi	r31, 0x06	; 6
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR = CURRENT_MEASUREMENT_ENABLE;
     fe8:	86 83       	std	Z+6, r24	; 0x06
     fea:	08 95       	ret

00000fec <adc_disable_current_measurement>:
	//PORTA.PIN1CTRL = PORT_OPC_PULLUP_gc
}

void adc_disable_current_measurement(void) 
{	
	PORTA.DIRSET = CURRENT_MEASUREMENT_ENABLE;
     fec:	e0 e0       	ldi	r30, 0x00	; 0
     fee:	f6 e0       	ldi	r31, 0x06	; 6
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = CURRENT_MEASUREMENT_ENABLE;
     ff4:	85 83       	std	Z+5, r24	; 0x05
     ff6:	08 95       	ret

00000ff8 <adc_read_voltage>:
	//Enable power reduction for ADCA
	PR.PRPA |= 0x02;
}

uint16_t adc_read_voltage(void) 
{	
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	00 d0       	rcall	.+0      	; 0xffe <adc_read_voltage+0x6>
     ffe:	1f 92       	push	r1
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
	adc_enable_current_measurement();
    1004:	ed df       	rcall	.-38     	; 0xfe0 <adc_enable_current_measurement>
    1006:	49 e1       	ldi	r20, 0x19	; 25
	uint32_t val = 0;
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	cb 01       	movw	r24, r22
	for (uint8_t i = 0; i < 25; i++) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    100e:	51 e0       	ldi	r21, 0x01	; 1
uint16_t adc_read_voltage(void) 
{	
	adc_enable_current_measurement();
	uint32_t val = 0;
	for (uint8_t i = 0; i < 25; i++) {
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
    1010:	20 91 20 02 	lds	r18, 0x0220
    1014:	20 68       	ori	r18, 0x80	; 128
    1016:	20 93 20 02 	sts	0x0220, r18
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
    101a:	20 91 23 02 	lds	r18, 0x0223
    101e:	20 ff       	sbrs	r18, 0
    1020:	fc cf       	rjmp	.-8      	; 0x101a <adc_read_voltage+0x22>
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    1022:	50 93 23 02 	sts	0x0223, r21
		val += ADCA.CH0.RES;
    1026:	20 91 24 02 	lds	r18, 0x0224
    102a:	30 91 25 02 	lds	r19, 0x0225
    102e:	62 0f       	add	r22, r18
    1030:	73 1f       	adc	r23, r19
    1032:	81 1d       	adc	r24, r1
    1034:	91 1d       	adc	r25, r1
    1036:	41 50       	subi	r20, 0x01	; 1

uint16_t adc_read_voltage(void) 
{	
	adc_enable_current_measurement();
	uint32_t val = 0;
	for (uint8_t i = 0; i < 25; i++) {
    1038:	59 f7       	brne	.-42     	; 0x1010 <adc_read_voltage+0x18>
		ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);
		while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));
		ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
		val += ADCA.CH0.RES;
	}
	adc_disable_current_measurement();
    103a:	69 83       	std	Y+1, r22	; 0x01
    103c:	7a 83       	std	Y+2, r23	; 0x02
    103e:	8b 83       	std	Y+3, r24	; 0x03
    1040:	9c 83       	std	Y+4, r25	; 0x04
    1042:	d4 df       	rcall	.-88     	; 0xfec <adc_disable_current_measurement>

	return val/25;
    1044:	69 81       	ldd	r22, Y+1	; 0x01
    1046:	7a 81       	ldd	r23, Y+2	; 0x02
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	29 e1       	ldi	r18, 0x19	; 25
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	0e 94 28 51 	call	0xa250	; 0xa250 <__udivmodsi4>
}
    1058:	c9 01       	movw	r24, r18
    105a:	24 96       	adiw	r28, 0x04	; 4
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	08 95       	ret

00001066 <adc_get_battery_voltage>:

float adc_get_battery_voltage(void) 
{
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
	adc_setup();
    106a:	31 df       	rcall	.-414    	; 0xece <adc_setup>
	
	float offset_error = 0.33;
	float measured_voltage;
	float battery_voltage;
	
	measured_voltage = (float)adc_read_voltage();
    106c:	c5 df       	rcall	.-118    	; 0xff8 <adc_read_voltage>
    106e:	ec 01       	movw	r28, r24
	battery_voltage = ((measured_voltage * 2.05f)/(4095.0f)) * 32.0f/10.0f;
	
	adc_disable();
    1070:	ac df       	rcall	.-168    	; 0xfca <adc_disable>
	
	float offset_error = 0.33;
	float measured_voltage;
	float battery_voltage;
	
	measured_voltage = (float)adc_read_voltage();
    1072:	be 01       	movw	r22, r28
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 8f 4c 	call	0x991e	; 0x991e <__floatunsisf>
	battery_voltage = ((measured_voltage * 2.05f)/(4095.0f)) * 32.0f/10.0f;
    107c:	23 e3       	ldi	r18, 0x33	; 51
    107e:	33 e3       	ldi	r19, 0x33	; 51
    1080:	43 e0       	ldi	r20, 0x03	; 3
    1082:	50 e4       	ldi	r21, 0x40	; 64
    1084:	0e 94 1d 4d 	call	0x9a3a	; 0x9a3a <__mulsf3>
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 ef       	ldi	r19, 0xF0	; 240
    108c:	4f e7       	ldi	r20, 0x7F	; 127
    108e:	55 e4       	ldi	r21, 0x45	; 69
    1090:	0e 94 fb 4b 	call	0x97f6	; 0x97f6 <__divsf3>
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	52 e4       	ldi	r21, 0x42	; 66
    109c:	0e 94 1d 4d 	call	0x9a3a	; 0x9a3a <__mulsf3>
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e2       	ldi	r20, 0x20	; 32
    10a6:	51 e4       	ldi	r21, 0x41	; 65
    10a8:	0e 94 fb 4b 	call	0x97f6	; 0x97f6 <__divsf3>
	
	adc_disable();
	
	return (battery_voltage - offset_error);
    10ac:	23 ec       	ldi	r18, 0xC3	; 195
    10ae:	35 ef       	ldi	r19, 0xF5	; 245
    10b0:	48 ea       	ldi	r20, 0xA8	; 168
    10b2:	5e e3       	ldi	r21, 0x3E	; 62
    10b4:	0e 94 96 4b 	call	0x972c	; 0x972c <__subsf3>
}
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	08 95       	ret

000010be <adc_get_battery_percentage>:
uint8_t adc_get_battery_percentage(void) 
{	
	uint16_t voltage;
	float battery_voltage;
	
	battery_voltage = (adc_get_battery_voltage() * 100.0f);
    10be:	d3 df       	rcall	.-90     	; 0x1066 <adc_get_battery_voltage>
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	48 ec       	ldi	r20, 0xC8	; 200
    10c6:	52 e4       	ldi	r21, 0x42	; 66
    10c8:	0e 94 1d 4d 	call	0x9a3a	; 0x9a3a <__mulsf3>
	voltage = (uint16_t)battery_voltage;
    10cc:	0e 94 63 4c 	call	0x98c6	; 0x98c6 <__fixunssfsi>
	
	if (voltage > 600) {
    10d0:	69 35       	cpi	r22, 0x59	; 89
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	78 07       	cpc	r23, r24
    10d6:	68 f5       	brcc	.+90     	; 0x1132 <adc_get_battery_percentage+0x74>
		return 99;
	} else if (voltage > 575) {
    10d8:	60 34       	cpi	r22, 0x40	; 64
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	78 07       	cpc	r23, r24
    10de:	58 f5       	brcc	.+86     	; 0x1136 <adc_get_battery_percentage+0x78>
		return 95;
	} else if (voltage > 550) {
    10e0:	67 32       	cpi	r22, 0x27	; 39
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	78 07       	cpc	r23, r24
    10e6:	48 f5       	brcc	.+82     	; 0x113a <adc_get_battery_percentage+0x7c>
		return 90;
	} else if (voltage > 525) {
    10e8:	6e 30       	cpi	r22, 0x0E	; 14
    10ea:	82 e0       	ldi	r24, 0x02	; 2
    10ec:	78 07       	cpc	r23, r24
    10ee:	38 f5       	brcc	.+78     	; 0x113e <adc_get_battery_percentage+0x80>
		return 80;
	} else if (voltage > 500) {
    10f0:	65 3f       	cpi	r22, 0xF5	; 245
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	78 07       	cpc	r23, r24
    10f6:	28 f5       	brcc	.+74     	; 0x1142 <adc_get_battery_percentage+0x84>
		return 70;
	} else if (voltage > 475) {
    10f8:	6c 3d       	cpi	r22, 0xDC	; 220
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	78 07       	cpc	r23, r24
    10fe:	18 f5       	brcc	.+70     	; 0x1146 <adc_get_battery_percentage+0x88>
		return 60;
	} else if (voltage > 450) {
    1100:	63 3c       	cpi	r22, 0xC3	; 195
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	78 07       	cpc	r23, r24
    1106:	08 f5       	brcc	.+66     	; 0x114a <adc_get_battery_percentage+0x8c>
		return 50;
	} else if (voltage > 425) {
    1108:	6a 3a       	cpi	r22, 0xAA	; 170
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	78 07       	cpc	r23, r24
    110e:	f8 f4       	brcc	.+62     	; 0x114e <adc_get_battery_percentage+0x90>
		return 40;
	} else if (voltage > 415) {
    1110:	60 3a       	cpi	r22, 0xA0	; 160
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	78 07       	cpc	r23, r24
    1116:	e8 f4       	brcc	.+58     	; 0x1152 <adc_get_battery_percentage+0x94>
		return 30;
	} else if (voltage > 400) {
    1118:	61 39       	cpi	r22, 0x91	; 145
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	78 07       	cpc	r23, r24
    111e:	d8 f4       	brcc	.+54     	; 0x1156 <adc_get_battery_percentage+0x98>
		return 20;
	} else if (voltage > 375) {
    1120:	68 37       	cpi	r22, 0x78	; 120
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	78 07       	cpc	r23, r24
    1126:	c8 f4       	brcc	.+50     	; 0x115a <adc_get_battery_percentage+0x9c>
		return 10;
	} else if (voltage > 350) {
    1128:	6f 35       	cpi	r22, 0x5F	; 95
    112a:	71 40       	sbci	r23, 0x01	; 1
    112c:	c0 f0       	brcs	.+48     	; 0x115e <adc_get_battery_percentage+0xa0>
		return 5;
    112e:	85 e0       	ldi	r24, 0x05	; 5
    1130:	08 95       	ret
	
	battery_voltage = (adc_get_battery_voltage() * 100.0f);
	voltage = (uint16_t)battery_voltage;
	
	if (voltage > 600) {
		return 99;
    1132:	83 e6       	ldi	r24, 0x63	; 99
    1134:	08 95       	ret
	} else if (voltage > 575) {
		return 95;
    1136:	8f e5       	ldi	r24, 0x5F	; 95
    1138:	08 95       	ret
	} else if (voltage > 550) {
		return 90;
    113a:	8a e5       	ldi	r24, 0x5A	; 90
    113c:	08 95       	ret
	} else if (voltage > 525) {
		return 80;
    113e:	80 e5       	ldi	r24, 0x50	; 80
    1140:	08 95       	ret
	} else if (voltage > 500) {
		return 70;
    1142:	86 e4       	ldi	r24, 0x46	; 70
    1144:	08 95       	ret
	} else if (voltage > 475) {
		return 60;
    1146:	8c e3       	ldi	r24, 0x3C	; 60
    1148:	08 95       	ret
	} else if (voltage > 450) {
		return 50;
    114a:	82 e3       	ldi	r24, 0x32	; 50
    114c:	08 95       	ret
	} else if (voltage > 425) {
		return 40;
    114e:	88 e2       	ldi	r24, 0x28	; 40
    1150:	08 95       	ret
	} else if (voltage > 415) {
		return 30;
    1152:	8e e1       	ldi	r24, 0x1E	; 30
    1154:	08 95       	ret
	} else if (voltage > 400) {
		return 20;
    1156:	84 e1       	ldi	r24, 0x14	; 20
    1158:	08 95       	ret
	} else if (voltage > 375) {
		return 10;
    115a:	8a e0       	ldi	r24, 0x0A	; 10
    115c:	08 95       	ret
	} else if (voltage > 350) {
		return 5;
	}
	
	return 0;
    115e:	80 e0       	ldi	r24, 0x00	; 0
}
    1160:	08 95       	ret

00001162 <clock_setup_32_mhz_pll>:
	CLK.CTRL	= CLK_SCLKSEL_RC32M_gc;
}

void clock_setup_32_mhz_pll(void) 
{	
	OSC.PLLCTRL	= 0 | OSC_PLLFAC4_bm;
    1162:	80 e1       	ldi	r24, 0x10	; 16
    1164:	80 93 55 00 	sts	0x0055, r24
	OSC.CTRL	|= OSC_PLLEN_bm;
    1168:	80 91 50 00 	lds	r24, 0x0050
    116c:	80 61       	ori	r24, 0x10	; 16
    116e:	80 93 50 00 	sts	0x0050, r24
	while ( !(OSC.STATUS & OSC_PLLEN_bm) ) ;
    1172:	80 91 51 00 	lds	r24, 0x0051
    1176:	84 ff       	sbrs	r24, 4
    1178:	fc cf       	rjmp	.-8      	; 0x1172 <clock_setup_32_mhz_pll+0x10>
	CCP			= CCP_IOREG_gc;
    117a:	88 ed       	ldi	r24, 0xD8	; 216
    117c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL	= (CLK.CTRL & ~CLK_SCLKSEL_gm ) | CLK_SCLKSEL_PLL_gc;
    117e:	80 91 40 00 	lds	r24, 0x0040
    1182:	88 7f       	andi	r24, 0xF8	; 248
    1184:	84 60       	ori	r24, 0x04	; 4
    1186:	80 93 40 00 	sts	0x0040, r24
    118a:	08 95       	ret

0000118c <dac_speaker_on>:

#include "dac.h"

void dac_speaker_on(void) 
{
	PORTD.DIRSET = SPEAKER_EN;
    118c:	e0 e6       	ldi	r30, 0x60	; 96
    118e:	f6 e0       	ldi	r31, 0x06	; 6
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = SPEAKER_EN;
    1194:	85 83       	std	Z+5, r24	; 0x05
    1196:	08 95       	ret

00001198 <dac_speaker_off>:
}

void dac_speaker_off(void) 
{
	PORTD.DIRSET = SPEAKER_EN;
    1198:	e0 e6       	ldi	r30, 0x60	; 96
    119a:	f6 e0       	ldi	r31, 0x06	; 6
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTCLR = SPEAKER_EN;
    11a0:	86 83       	std	Z+6, r24	; 0x06
    11a2:	08 95       	ret

000011a4 <dac_setup>:
}

void dac_setup(bool dual_channel) 
{
	//Disable power reduction for DACB
	PR.PRPB &= ~0x04;
    11a4:	90 91 72 00 	lds	r25, 0x0072
    11a8:	9b 7f       	andi	r25, 0xFB	; 251
    11aa:	90 93 72 00 	sts	0x0072, r25
			
	if (dual_channel)
    11ae:	88 23       	and	r24, r24
    11b0:	89 f0       	breq	.+34     	; 0x11d4 <dac_setup+0x30>
	{
		PORTB.DIRSET = DAC0 | DAC1;
    11b2:	8c e0       	ldi	r24, 0x0C	; 12
    11b4:	80 93 21 06 	sts	0x0621, r24
		
		DACB.CTRLA |= DAC_CH0EN_bm | DAC_CH1EN_bm;
    11b8:	80 91 20 03 	lds	r24, 0x0320
    11bc:	8c 60       	ori	r24, 0x0C	; 12
    11be:	80 93 20 03 	sts	0x0320, r24
		DACB.CTRLC |= DAC_REFSEL_AVCC_gc;
    11c2:	80 91 22 03 	lds	r24, 0x0322
    11c6:	88 60       	ori	r24, 0x08	; 8
    11c8:	80 93 22 03 	sts	0x0322, r24
		DACB.CTRLB |= DAC_CHSEL_DUAL_gc;
    11cc:	80 91 21 03 	lds	r24, 0x0321
    11d0:	80 64       	ori	r24, 0x40	; 64
    11d2:	0f c0       	rjmp	.+30     	; 0x11f2 <dac_setup+0x4e>
	} else {
		PORTB.DIRSET = DAC0;
    11d4:	84 e0       	ldi	r24, 0x04	; 4
    11d6:	80 93 21 06 	sts	0x0621, r24
		
		DACB.CTRLA |= DAC_CH0EN_bm;
    11da:	80 91 20 03 	lds	r24, 0x0320
    11de:	84 60       	ori	r24, 0x04	; 4
    11e0:	80 93 20 03 	sts	0x0320, r24
		DACB.CTRLC |= DAC_REFSEL_AVCC_gc;
    11e4:	80 91 22 03 	lds	r24, 0x0322
    11e8:	88 60       	ori	r24, 0x08	; 8
    11ea:	80 93 22 03 	sts	0x0322, r24
		DACB.CTRLB |= DAC_CHSEL_SINGLE_gc;
    11ee:	80 91 21 03 	lds	r24, 0x0321
    11f2:	80 93 21 03 	sts	0x0321, r24

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    11fc:	e2 e3       	ldi	r30, 0x32	; 50
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    1202:	10 92 ca 01 	sts	0x01CA, r1
	}
	
	DACB.CH0OFFSETCAL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, DACB0OFFCAL) );
    1206:	e0 93 29 03 	sts	0x0329, r30

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    120a:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    120e:	e3 e3       	ldi	r30, 0x33	; 51
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    1214:	10 92 ca 01 	sts	0x01CA, r1
	DACB.CH0GAINCAL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, DACB0GAINCAL) );
    1218:	e0 93 28 03 	sts	0x0328, r30

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    121c:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    1220:	e6 e3       	ldi	r30, 0x36	; 54
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    1226:	10 92 ca 01 	sts	0x01CA, r1
	
	DACB.CH1OFFSETCAL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, DACB1OFFCAL) );
    122a:	e0 93 2b 03 	sts	0x032B, r30

	return (char*)(s - begin);
}

static uint8_t read_signature_byte(uint16_t Address) {
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
    122e:	80 93 ca 01 	sts	0x01CA, r24
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
    1232:	e7 e3       	ldi	r30, 0x37	; 55
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	e4 91       	lpm	r30, Z
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
    1238:	10 92 ca 01 	sts	0x01CA, r1
	DACB.CH1GAINCAL = read_signature_byte( offsetof(NVM_PROD_SIGNATURES_t, DACB1GAINCAL) );
    123c:	e0 93 2a 03 	sts	0x032A, r30
	
	DACB.CTRLA |= DAC_ENABLE_bm;
    1240:	80 91 20 03 	lds	r24, 0x0320
    1244:	81 60       	ori	r24, 0x01	; 1
    1246:	80 93 20 03 	sts	0x0320, r24
	
	dac_speaker_on();
    124a:	a0 cf       	rjmp	.-192    	; 0x118c <dac_speaker_on>

0000124c <dac_disable>:
}

void dac_disable(void) 
{
	PORTB.DIRCLR = DAC0 | DAC1;
    124c:	e0 e2       	ldi	r30, 0x20	; 32
    124e:	f6 e0       	ldi	r31, 0x06	; 6
    1250:	8c e0       	ldi	r24, 0x0C	; 12
    1252:	82 83       	std	Z+2, r24	; 0x02
	
	PORTB.PIN2CTRL = PORT_OPC_PULLUP_gc;
    1254:	88 e1       	ldi	r24, 0x18	; 24
    1256:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.PIN3CTRL = PORT_OPC_PULLUP_gc;
    1258:	83 8b       	std	Z+19, r24	; 0x13
	
	DACB.CTRLA &= ~(DAC_ENABLE_bm);
    125a:	e0 e2       	ldi	r30, 0x20	; 32
    125c:	f3 e0       	ldi	r31, 0x03	; 3
    125e:	80 81       	ld	r24, Z
    1260:	8e 7f       	andi	r24, 0xFE	; 254
    1262:	80 83       	st	Z, r24
	dac_speaker_off();
    1264:	99 df       	rcall	.-206    	; 0x1198 <dac_speaker_off>
	
	//Enable power reduction for DACB
	PR.PRPB |= 0x04;
    1266:	e0 e7       	ldi	r30, 0x70	; 112
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	84 60       	ori	r24, 0x04	; 4
    126e:	82 83       	std	Z+2, r24	; 0x02
    1270:	08 95       	ret

00001272 <__vector_6>:
}
*/

//! DMA CH0 Interrupt service routine. Clear interrupt flags after check. 
ISR(DMA_CH0_vect)
{
    1272:	1f 92       	push	r1
    1274:	0f 92       	push	r0
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	0f 92       	push	r0
    127a:	11 24       	eor	r1, r1
    127c:	08 b6       	in	r0, 0x38	; 56
    127e:	0f 92       	push	r0
    1280:	18 be       	out	0x38, r1	; 56
    1282:	8f 93       	push	r24
	if (DMA.CH0.CTRLB & DMA_CH_ERRIF_bm) {
    1284:	80 91 11 01 	lds	r24, 0x0111
    1288:	85 ff       	sbrs	r24, 5
    128a:	08 c0       	rjmp	.+16     	; 0x129c <__vector_6+0x2a>
		DMA.CH0.CTRLB |= DMA_CH_ERRIF_bm;
    128c:	80 91 11 01 	lds	r24, 0x0111
    1290:	80 62       	ori	r24, 0x20	; 32
    1292:	80 93 11 01 	sts	0x0111, r24
		gStatus = false;
    1296:	10 92 3c 2c 	sts	0x2C3C, r1
    129a:	08 c0       	rjmp	.+16     	; 0x12ac <__vector_6+0x3a>
	} else {
		DMA.CH0.CTRLB |= DMA_CH_TRNIF_bm;
    129c:	80 91 11 01 	lds	r24, 0x0111
    12a0:	80 61       	ori	r24, 0x10	; 16
    12a2:	80 93 11 01 	sts	0x0111, r24
		gStatus = true;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	80 93 3c 2c 	sts	0x2C3C, r24
	}
	gInterruptDone = true;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	80 93 3d 2c 	sts	0x2C3D, r24
}
    12b2:	8f 91       	pop	r24
    12b4:	0f 90       	pop	r0
    12b6:	08 be       	out	0x38, r0	; 56
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <EEPROM_WriteEnv>:
			}
		}
	}
	*/
	
	eeprom_update_block(&env,EEPROM_START,sizeof(env));
    12c2:	4b ea       	ldi	r20, 0xAB	; 171
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	70 e0       	ldi	r23, 0x00	; 0
    12ca:	8d e2       	ldi	r24, 0x2D	; 45
    12cc:	9b e2       	ldi	r25, 0x2B	; 43
    12ce:	0e 94 cb 57 	call	0xaf96	; 0xaf96 <__eeupd_block_x128a4u>
	
	return 1;
}
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	08 95       	ret

000012d6 <EEPROM_ReadEnv>:

uint8_t EEPROM_ReadEnv(void) 
{
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	cb 5a       	subi	r28, 0xAB	; 171
    12e4:	d1 09       	sbc	r29, r1
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	de bf       	out	0x3e, r29	; 62
	env_variables_t temp;
	memset(&temp,0,sizeof(temp));
    12ea:	8e 01       	movw	r16, r28
    12ec:	0f 5f       	subi	r16, 0xFF	; 255
    12ee:	1f 4f       	sbci	r17, 0xFF	; 255
    12f0:	8b ea       	ldi	r24, 0xAB	; 171
    12f2:	f8 01       	movw	r30, r16
    12f4:	11 92       	st	Z+, r1
    12f6:	8a 95       	dec	r24
    12f8:	e9 f7       	brne	.-6      	; 0x12f4 <EEPROM_ReadEnv+0x1e>
	eeprom_read_block(&temp,EEPROM_START,sizeof(temp));
    12fa:	4b ea       	ldi	r20, 0xAB	; 171
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	c8 01       	movw	r24, r16
    1304:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <__eerd_block_x128a4u>
	}
	
	memcpy(&env, temp, sizeof(temp));
	*/
	
	if (temp.id != 0 && temp.id != 0xff) {
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	81 50       	subi	r24, 0x01	; 1
    130c:	8e 3f       	cpi	r24, 0xFE	; 254
    130e:	50 f4       	brcc	.+20     	; 0x1324 <EEPROM_ReadEnv+0x4e>
		memcpy(&env,&temp,sizeof(temp));
    1310:	8b ea       	ldi	r24, 0xAB	; 171
    1312:	f8 01       	movw	r30, r16
    1314:	ad e2       	ldi	r26, 0x2D	; 45
    1316:	bb e2       	ldi	r27, 0x2B	; 43
    1318:	01 90       	ld	r0, Z+
    131a:	0d 92       	st	X+, r0
    131c:	8a 95       	dec	r24
    131e:	e1 f7       	brne	.-8      	; 0x1318 <EEPROM_ReadEnv+0x42>
		return 1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <EEPROM_ReadEnv+0x50>
	}
	
	return 0;
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	c5 55       	subi	r28, 0x55	; 85
    1328:	df 4f       	sbci	r29, 0xFF	; 255
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	08 95       	ret

00001338 <esp8266_send_cmd>:
	}
	esp8266_send_cmd("AT+CWMODE=2",100);
	
	esp8266_send_cmd("AT+CWSMARTSTART",100);

}
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	eb 01       	movw	r28, r22
    133e:	29 e0       	ldi	r18, 0x09	; 9
    1340:	20 93 d8 2c 	sts	0x2CD8, r18
    1344:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <uart_write_str>
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	8c 17       	cp	r24, r28
    134e:	9d 07       	cpc	r25, r29
    1350:	44 f4       	brge	.+16     	; 0x1362 <esp8266_send_cmd+0x2a>
    1352:	ef e3       	ldi	r30, 0x3F	; 63
    1354:	ff e1       	ldi	r31, 0x1F	; 31
    1356:	31 97       	sbiw	r30, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <esp8266_send_cmd+0x1e>
    135a:	00 c0       	rjmp	.+0      	; 0x135c <esp8266_send_cmd+0x24>
    135c:	00 00       	nop
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	f5 cf       	rjmp	.-22     	; 0x134c <esp8266_send_cmd+0x14>
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	08 95       	ret

00001368 <esp8266_on>:
    1368:	e0 e6       	ldi	r30, 0x60	; 96
    136a:	f6 e0       	ldi	r31, 0x06	; 6
    136c:	81 e3       	ldi	r24, 0x31	; 49
    136e:	81 83       	std	Z+1, r24	; 0x01
    1370:	80 e3       	ldi	r24, 0x30	; 48
    1372:	85 83       	std	Z+5, r24	; 0x05
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	86 83       	std	Z+6, r24	; 0x06
    1378:	2f ef       	ldi	r18, 0xFF	; 255
    137a:	87 ea       	ldi	r24, 0xA7	; 167
    137c:	91 e6       	ldi	r25, 0x61	; 97
    137e:	21 50       	subi	r18, 0x01	; 1
    1380:	80 40       	sbci	r24, 0x00	; 0
    1382:	90 40       	sbci	r25, 0x00	; 0
    1384:	e1 f7       	brne	.-8      	; 0x137e <esp8266_on+0x16>
    1386:	00 c0       	rjmp	.+0      	; 0x1388 <esp8266_on+0x20>
    1388:	00 00       	nop
    138a:	08 95       	ret

0000138c <esp8266_off>:
    138c:	e0 e6       	ldi	r30, 0x60	; 96
    138e:	f6 e0       	ldi	r31, 0x06	; 6
    1390:	81 e2       	ldi	r24, 0x21	; 33
    1392:	81 83       	std	Z+1, r24	; 0x01
    1394:	80 e2       	ldi	r24, 0x20	; 32
    1396:	86 83       	std	Z+6, r24	; 0x06
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	85 83       	std	Z+5, r24	; 0x05
    139c:	08 95       	ret

0000139e <esp8266_setup>:
    139e:	10 92 e7 2a 	sts	0x2AE7, r1
    13a2:	64 e6       	ldi	r22, 0x64	; 100
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	82 ee       	ldi	r24, 0xE2	; 226
    13a8:	90 e2       	ldi	r25, 0x20	; 32
    13aa:	c6 df       	rcall	.-116    	; 0x1338 <esp8266_send_cmd>
    13ac:	80 91 d8 2c 	lds	r24, 0x2CD8
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	81 f4       	brne	.+32     	; 0x13d4 <esp8266_setup+0x36>
    13b4:	64 e6       	ldi	r22, 0x64	; 100
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	8f ee       	ldi	r24, 0xEF	; 239
    13ba:	90 e2       	ldi	r25, 0x20	; 32
    13bc:	bd df       	rcall	.-134    	; 0x1338 <esp8266_send_cmd>
    13be:	80 91 d8 2c 	lds	r24, 0x2CD8
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	39 f4       	brne	.+14     	; 0x13d4 <esp8266_setup+0x36>
    13c6:	64 e6       	ldi	r22, 0x64	; 100
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	8b ef       	ldi	r24, 0xFB	; 251
    13cc:	90 e2       	ldi	r25, 0x20	; 32
    13ce:	b4 df       	rcall	.-152    	; 0x1338 <esp8266_send_cmd>
    13d0:	80 91 d8 2c 	lds	r24, 0x2CD8
    13d4:	08 95       	ret

000013d6 <esp8266_join_ap>:
    13d6:	cf 92       	push	r12
    13d8:	df 92       	push	r13
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	0f 93       	push	r16
    13e0:	1f 93       	push	r17
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	c4 56       	subi	r28, 0x64	; 100
    13ec:	d1 09       	sbc	r29, r1
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	6c 01       	movw	r12, r24
    13f4:	7b 01       	movw	r14, r22
    13f6:	8e 01       	movw	r16, r28
    13f8:	0f 5f       	subi	r16, 0xFF	; 255
    13fa:	1f 4f       	sbci	r17, 0xFF	; 255
    13fc:	84 e6       	ldi	r24, 0x64	; 100
    13fe:	f8 01       	movw	r30, r16
    1400:	11 92       	st	Z+, r1
    1402:	8a 95       	dec	r24
    1404:	e9 f7       	brne	.-6      	; 0x1400 <esp8266_join_ap+0x2a>
    1406:	6d e1       	ldi	r22, 0x1D	; 29
    1408:	71 e2       	ldi	r23, 0x21	; 33
    140a:	c8 01       	movw	r24, r16
    140c:	0e 94 bb 53 	call	0xa776	; 0xa776 <strcpy>
    1410:	b6 01       	movw	r22, r12
    1412:	c8 01       	movw	r24, r16
    1414:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
    1418:	68 e3       	ldi	r22, 0x38	; 56
    141a:	71 e2       	ldi	r23, 0x21	; 33
    141c:	c8 01       	movw	r24, r16
    141e:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
    1422:	b7 01       	movw	r22, r14
    1424:	c8 01       	movw	r24, r16
    1426:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
    142a:	6a e3       	ldi	r22, 0x3A	; 58
    142c:	71 e2       	ldi	r23, 0x21	; 33
    142e:	c8 01       	movw	r24, r16
    1430:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
    1434:	64 e6       	ldi	r22, 0x64	; 100
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	c8 01       	movw	r24, r16
    143a:	7e df       	rcall	.-260    	; 0x1338 <esp8266_send_cmd>
    143c:	8e e2       	ldi	r24, 0x2E	; 46
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	20 91 d8 2c 	lds	r18, 0x2CD8
    1444:	21 30       	cpi	r18, 0x01	; 1
    1446:	91 f0       	breq	.+36     	; 0x146c <esp8266_join_ap+0x96>
    1448:	ff ef       	ldi	r31, 0xFF	; 255
    144a:	23 ec       	ldi	r18, 0xC3	; 195
    144c:	39 e0       	ldi	r19, 0x09	; 9
    144e:	f1 50       	subi	r31, 0x01	; 1
    1450:	20 40       	sbci	r18, 0x00	; 0
    1452:	30 40       	sbci	r19, 0x00	; 0
    1454:	e1 f7       	brne	.-8      	; 0x144e <esp8266_join_ap+0x78>
    1456:	00 c0       	rjmp	.+0      	; 0x1458 <esp8266_join_ap+0x82>
    1458:	00 00       	nop
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	41 f0       	breq	.+16     	; 0x1470 <esp8266_join_ap+0x9a>
    1460:	20 91 d8 2c 	lds	r18, 0x2CD8
    1464:	21 11       	cpse	r18, r1
    1466:	ec cf       	rjmp	.-40     	; 0x1440 <esp8266_join_ap+0x6a>
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	03 c0       	rjmp	.+6      	; 0x1472 <esp8266_join_ap+0x9c>
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <esp8266_join_ap+0x9c>
    1470:	83 e0       	ldi	r24, 0x03	; 3
    1472:	cc 59       	subi	r28, 0x9C	; 156
    1474:	df 4f       	sbci	r29, 0xFF	; 255
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	ff 90       	pop	r15
    1484:	ef 90       	pop	r14
    1486:	df 90       	pop	r13
    1488:	cf 90       	pop	r12
    148a:	08 95       	ret

0000148c <esp8266_get_json>:
    148c:	8f 92       	push	r8
    148e:	9f 92       	push	r9
    1490:	bf 92       	push	r11
    1492:	cf 92       	push	r12
    1494:	df 92       	push	r13
    1496:	ef 92       	push	r14
    1498:	ff 92       	push	r15
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	c6 59       	subi	r28, 0x96	; 150
    14a8:	d1 09       	sbc	r29, r1
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	4c 01       	movw	r8, r24
    14b0:	7b 01       	movw	r14, r22
    14b2:	6a 01       	movw	r12, r20
    14b4:	b2 2e       	mov	r11, r18
    14b6:	8e 01       	movw	r16, r28
    14b8:	0f 5f       	subi	r16, 0xFF	; 255
    14ba:	1f 4f       	sbci	r17, 0xFF	; 255
    14bc:	86 e9       	ldi	r24, 0x96	; 150
    14be:	d8 01       	movw	r26, r16
    14c0:	1d 92       	st	X+, r1
    14c2:	8a 95       	dec	r24
    14c4:	e9 f7       	brne	.-6      	; 0x14c0 <esp8266_get_json+0x34>
    14c6:	68 e2       	ldi	r22, 0x28	; 40
    14c8:	71 e2       	ldi	r23, 0x21	; 33
    14ca:	c8 01       	movw	r24, r16
    14cc:	0e 94 bb 53 	call	0xa776	; 0xa776 <strcpy>
    14d0:	b4 01       	movw	r22, r8
    14d2:	c8 01       	movw	r24, r16
    14d4:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
    14d8:	6c e3       	ldi	r22, 0x3C	; 60
    14da:	71 e2       	ldi	r23, 0x21	; 33
    14dc:	c8 01       	movw	r24, r16
    14de:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
    14e2:	6a ef       	ldi	r22, 0xFA	; 250
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	c8 01       	movw	r24, r16
    14e8:	27 df       	rcall	.-434    	; 0x1338 <esp8266_send_cmd>
    14ea:	80 91 d8 2c 	lds	r24, 0x2CD8
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <esp8266_get_json+0x68>
    14f2:	9d c0       	rjmp	.+314    	; 0x162e <esp8266_get_json+0x1a2>
    14f4:	f7 01       	movw	r30, r14
    14f6:	01 90       	ld	r0, Z+
    14f8:	00 20       	and	r0, r0
    14fa:	e9 f7       	brne	.-6      	; 0x14f6 <esp8266_get_json+0x6a>
    14fc:	ee 19       	sub	r30, r14
    14fe:	ff 09       	sbc	r31, r15
    1500:	4a e0       	ldi	r20, 0x0A	; 10
    1502:	81 2c       	mov	r8, r1
    1504:	91 2c       	mov	r9, r1
    1506:	b4 01       	movw	r22, r8
    1508:	cf 01       	movw	r24, r30
    150a:	48 96       	adiw	r24, 0x18	; 24
    150c:	0e 94 01 54 	call	0xa802	; 0xa802 <__itoa_ncheck>
    1510:	61 e4       	ldi	r22, 0x41	; 65
    1512:	71 e2       	ldi	r23, 0x21	; 33
    1514:	c8 01       	movw	r24, r16
    1516:	0e 94 bb 53 	call	0xa776	; 0xa776 <strcpy>
    151a:	b4 01       	movw	r22, r8
    151c:	c8 01       	movw	r24, r16
    151e:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
    1522:	66 ee       	ldi	r22, 0xE6	; 230
    1524:	75 e2       	ldi	r23, 0x25	; 37
    1526:	c8 01       	movw	r24, r16
    1528:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
    152c:	64 e6       	ldi	r22, 0x64	; 100
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	c8 01       	movw	r24, r16
    1532:	02 df       	rcall	.-508    	; 0x1338 <esp8266_send_cmd>
    1534:	6d e4       	ldi	r22, 0x4D	; 77
    1536:	71 e2       	ldi	r23, 0x21	; 33
    1538:	c8 01       	movw	r24, r16
    153a:	0e 94 bb 53 	call	0xa776	; 0xa776 <strcpy>
    153e:	f8 01       	movw	r30, r16
    1540:	01 90       	ld	r0, Z+
    1542:	00 20       	and	r0, r0
    1544:	e9 f7       	brne	.-6      	; 0x1540 <esp8266_get_json+0xb4>
    1546:	31 97       	sbiw	r30, 0x01	; 1
    1548:	e0 1b       	sub	r30, r16
    154a:	f1 0b       	sbc	r31, r17
    154c:	e6 39       	cpi	r30, 0x96	; 150
    154e:	f1 05       	cpc	r31, r1
    1550:	10 f0       	brcs	.+4      	; 0x1556 <esp8266_get_json+0xca>
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	6c c0       	rjmp	.+216    	; 0x162e <esp8266_get_json+0x1a2>
    1556:	b7 01       	movw	r22, r14
    1558:	c8 01       	movw	r24, r16
    155a:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
    155e:	62 e5       	ldi	r22, 0x52	; 82
    1560:	71 e2       	ldi	r23, 0x21	; 33
    1562:	c8 01       	movw	r24, r16
    1564:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
    1568:	64 e6       	ldi	r22, 0x64	; 100
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	c8 01       	movw	r24, r16
    156e:	e4 de       	rcall	.-568    	; 0x1338 <esp8266_send_cmd>
    1570:	00 e0       	ldi	r16, 0x00	; 0
    1572:	10 e0       	ldi	r17, 0x00	; 0
    1574:	80 91 d8 2c 	lds	r24, 0x2CD8
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	19 f1       	breq	.+70     	; 0x15c2 <esp8266_get_json+0x136>
    157c:	64 e6       	ldi	r22, 0x64	; 100
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	94 e2       	ldi	r25, 0x24	; 36
    1584:	d9 de       	rcall	.-590    	; 0x1338 <esp8266_send_cmd>
    1586:	0f 5f       	subi	r16, 0xFF	; 255
    1588:	1f 4f       	sbci	r17, 0xFF	; 255
    158a:	00 32       	cpi	r16, 0x20	; 32
    158c:	11 05       	cpc	r17, r1
    158e:	11 f4       	brne	.+4      	; 0x1594 <esp8266_get_json+0x108>
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	4d c0       	rjmp	.+154    	; 0x162e <esp8266_get_json+0x1a2>
    1594:	80 91 d8 2c 	lds	r24, 0x2CD8
    1598:	81 11       	cpse	r24, r1
    159a:	ec cf       	rjmp	.-40     	; 0x1574 <esp8266_get_json+0xe8>
    159c:	12 c0       	rjmp	.+36     	; 0x15c2 <esp8266_get_json+0x136>
    159e:	bf ef       	ldi	r27, 0xFF	; 255
    15a0:	e3 ec       	ldi	r30, 0xC3	; 195
    15a2:	f9 e0       	ldi	r31, 0x09	; 9
    15a4:	b1 50       	subi	r27, 0x01	; 1
    15a6:	e0 40       	sbci	r30, 0x00	; 0
    15a8:	f0 40       	sbci	r31, 0x00	; 0
    15aa:	e1 f7       	brne	.-8      	; 0x15a4 <esp8266_get_json+0x118>
    15ac:	00 c0       	rjmp	.+0      	; 0x15ae <esp8266_get_json+0x122>
    15ae:	00 00       	nop
    15b0:	0f 31       	cpi	r16, 0x1F	; 31
    15b2:	11 05       	cpc	r17, r1
    15b4:	68 f7       	brcc	.-38     	; 0x1590 <esp8266_get_json+0x104>
    15b6:	0f 5f       	subi	r16, 0xFF	; 255
    15b8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ba:	80 91 d8 2c 	lds	r24, 0x2CD8
    15be:	88 23       	and	r24, r24
    15c0:	21 f0       	breq	.+8      	; 0x15ca <esp8266_get_json+0x13e>
    15c2:	80 91 d8 2c 	lds	r24, 0x2CD8
    15c6:	86 30       	cpi	r24, 0x06	; 6
    15c8:	51 f7       	brne	.-44     	; 0x159e <esp8266_get_json+0x112>
    15ca:	80 91 e6 2a 	lds	r24, 0x2AE6
    15ce:	88 23       	and	r24, r24
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <esp8266_get_json+0x148>
    15d2:	bf cf       	rjmp	.-130    	; 0x1552 <esp8266_get_json+0xc6>
    15d4:	6d e7       	ldi	r22, 0x7D	; 125
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	8c e1       	ldi	r24, 0x1C	; 28
    15da:	9a e2       	ldi	r25, 0x2A	; 42
    15dc:	0e 94 dc 53 	call	0xa7b8	; 0xa7b8 <strrchr>
    15e0:	8c 01       	movw	r16, r24
    15e2:	0b 51       	subi	r16, 0x1B	; 27
    15e4:	1a 42       	sbci	r17, 0x2A	; 42
    15e6:	4b 2d       	mov	r20, r11
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	40 17       	cp	r20, r16
    15ec:	51 07       	cpc	r21, r17
    15ee:	08 f4       	brcc	.+2      	; 0x15f2 <esp8266_get_json+0x166>
    15f0:	b0 cf       	rjmp	.-160    	; 0x1552 <esp8266_get_json+0xc6>
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	c6 01       	movw	r24, r12
    15f8:	0e 94 9e 53 	call	0xa73c	; 0xa73c <memset>
    15fc:	a8 01       	movw	r20, r16
    15fe:	6c e1       	ldi	r22, 0x1C	; 28
    1600:	7a e2       	ldi	r23, 0x2A	; 42
    1602:	c6 01       	movw	r24, r12
    1604:	0e 94 c2 53 	call	0xa784	; 0xa784 <strncpy>
    1608:	88 ec       	ldi	r24, 0xC8	; 200
    160a:	ec e1       	ldi	r30, 0x1C	; 28
    160c:	fa e2       	ldi	r31, 0x2A	; 42
    160e:	df 01       	movw	r26, r30
    1610:	1d 92       	st	X+, r1
    1612:	8a 95       	dec	r24
    1614:	e9 f7       	brne	.-6      	; 0x1610 <esp8266_get_json+0x184>
    1616:	10 92 e6 2a 	sts	0x2AE6, r1
    161a:	10 92 e4 2a 	sts	0x2AE4, r1
    161e:	10 92 e5 2a 	sts	0x2AE5, r1
    1622:	62 e3       	ldi	r22, 0x32	; 50
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	8e e5       	ldi	r24, 0x5E	; 94
    1628:	91 e2       	ldi	r25, 0x21	; 33
    162a:	86 de       	rcall	.-756    	; 0x1338 <esp8266_send_cmd>
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	ca 56       	subi	r28, 0x6A	; 106
    1630:	df 4f       	sbci	r29, 0xFF	; 255
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	1f 91       	pop	r17
    163c:	0f 91       	pop	r16
    163e:	ff 90       	pop	r15
    1640:	ef 90       	pop	r14
    1642:	df 90       	pop	r13
    1644:	cf 90       	pop	r12
    1646:	bf 90       	pop	r11
    1648:	9f 90       	pop	r9
    164a:	8f 90       	pop	r8
    164c:	08 95       	ret

0000164e <esp8266_setup_webserver>:

esp8266_status_t esp8266_setup_webserver(bool sta, bool ap) 
{	
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    1652:	c8 2f       	mov	r28, r24
    1654:	d6 2f       	mov	r29, r22
	//Reset module
	esp8266_send_cmd("AT+RST",2000);
    1656:	60 ed       	ldi	r22, 0xD0	; 208
    1658:	77 e0       	ldi	r23, 0x07	; 7
    165a:	86 e8       	ldi	r24, 0x86	; 134
    165c:	91 e2       	ldi	r25, 0x21	; 33
    165e:	6c de       	rcall	.-808    	; 0x1338 <esp8266_send_cmd>
	//if (status != ESP8266_SUCCESS) {
	//	return status;
	//}
	
	wdt_triggered = false;
    1660:	10 92 e7 2a 	sts	0x2AE7, r1
	
	//Set Data Mode
	esp8266_send_cmd("AT+CIPMODE=0",100);
    1664:	64 e6       	ldi	r22, 0x64	; 100
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	82 ee       	ldi	r24, 0xE2	; 226
    166a:	90 e2       	ldi	r25, 0x20	; 32
    166c:	65 de       	rcall	.-822    	; 0x1338 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    166e:	80 91 d8 2c 	lds	r24, 0x2CD8
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	09 f0       	breq	.+2      	; 0x1678 <esp8266_setup_webserver+0x2a>
    1676:	52 c0       	rjmp	.+164    	; 0x171c <esp8266_setup_webserver+0xce>
		return status;
	}
	
	if (sta && !ap) {
    1678:	cc 23       	and	r28, r28
    167a:	41 f0       	breq	.+16     	; 0x168c <esp8266_setup_webserver+0x3e>
		esp8266_send_cmd("AT+CWMODE=1",100);
    167c:	64 e6       	ldi	r22, 0x64	; 100
    167e:	70 e0       	ldi	r23, 0x00	; 0
	esp8266_send_cmd("AT+CIPMODE=0",100);
	if (status != ESP8266_SUCCESS) {
		return status;
	}
	
	if (sta && !ap) {
    1680:	d1 11       	cpse	r29, r1
    1682:	0c c0       	rjmp	.+24     	; 0x169c <esp8266_setup_webserver+0x4e>
		esp8266_send_cmd("AT+CWMODE=1",100);
    1684:	8b ef       	ldi	r24, 0xFB	; 251
    1686:	90 e2       	ldi	r25, 0x20	; 32
    1688:	57 de       	rcall	.-850    	; 0x1338 <esp8266_send_cmd>
    168a:	1d c0       	rjmp	.+58     	; 0x16c6 <esp8266_setup_webserver+0x78>
	} else if (ap && !sta) {
    168c:	dd 23       	and	r29, r29
    168e:	09 f4       	brne	.+2      	; 0x1692 <esp8266_setup_webserver+0x44>
    1690:	44 c0       	rjmp	.+136    	; 0x171a <esp8266_setup_webserver+0xcc>
		esp8266_send_cmd("AT+CWMODE=2",100);
    1692:	64 e6       	ldi	r22, 0x64	; 100
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	8a e6       	ldi	r24, 0x6A	; 106
    1698:	91 e2       	ldi	r25, 0x21	; 33
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <esp8266_setup_webserver+0x52>
	} else if (ap && sta) {
		esp8266_send_cmd("AT+CWMODE=3",100);
    169c:	8d e8       	ldi	r24, 0x8D	; 141
    169e:	91 e2       	ldi	r25, 0x21	; 33
    16a0:	4b de       	rcall	.-874    	; 0x1338 <esp8266_send_cmd>
	} else {
		return ESP8266_ERROR;
	}
	
	if (ap) {
		esp8266_send_cmd("AT+CWSAP=\"SMART_CLOCK\",\"123\",5,0",100);
    16a2:	64 e6       	ldi	r22, 0x64	; 100
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	87 ed       	ldi	r24, 0xD7	; 215
    16a8:	91 e2       	ldi	r25, 0x21	; 33
    16aa:	46 de       	rcall	.-884    	; 0x1338 <esp8266_send_cmd>
		if (status != ESP8266_SUCCESS) {
    16ac:	80 91 d8 2c 	lds	r24, 0x2CD8
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	a1 f5       	brne	.+104    	; 0x171c <esp8266_setup_webserver+0xce>
			return status;
		}
			
		esp8266_send_cmd("AT+CIPAP=\"192.168.0.1\"",100);
    16b4:	64 e6       	ldi	r22, 0x64	; 100
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	89 e9       	ldi	r24, 0x99	; 153
    16ba:	91 e2       	ldi	r25, 0x21	; 33
    16bc:	3d de       	rcall	.-902    	; 0x1338 <esp8266_send_cmd>
		if (status != ESP8266_SUCCESS) {
    16be:	80 91 d8 2c 	lds	r24, 0x2CD8
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	59 f5       	brne	.+86     	; 0x171c <esp8266_setup_webserver+0xce>
			return status;
		}
	}
	
	if (status != ESP8266_SUCCESS) {
    16c6:	80 91 d8 2c 	lds	r24, 0x2CD8
    16ca:	81 30       	cpi	r24, 0x01	; 1
    16cc:	39 f5       	brne	.+78     	; 0x171c <esp8266_setup_webserver+0xce>
		return status;
	}
	
	if (sta || (sta && ap)) {
    16ce:	cc 23       	and	r28, r28
    16d0:	29 f0       	breq	.+10     	; 0x16dc <esp8266_setup_webserver+0x8e>
		esp8266_join_ap(env.wifi_ssid,env.wifi_pswd);
    16d2:	6a e9       	ldi	r22, 0x9A	; 154
    16d4:	7b e2       	ldi	r23, 0x2B	; 43
    16d6:	83 eb       	ldi	r24, 0xB3	; 179
    16d8:	9b e2       	ldi	r25, 0x2B	; 43
    16da:	7d de       	rcall	.-774    	; 0x13d6 <esp8266_join_ap>
	}
	
	//List IP addresses
	esp8266_send_cmd("AT+CIFSR", 100);
    16dc:	64 e6       	ldi	r22, 0x64	; 100
    16de:	70 e0       	ldi	r23, 0x00	; 0
    16e0:	80 eb       	ldi	r24, 0xB0	; 176
    16e2:	91 e2       	ldi	r25, 0x21	; 33
    16e4:	29 de       	rcall	.-942    	; 0x1338 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    16e6:	80 91 d8 2c 	lds	r24, 0x2CD8
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	b9 f4       	brne	.+46     	; 0x171c <esp8266_setup_webserver+0xce>
		return status;
	}
	
	//Show IP address to user
#ifdef SHOW_MANUAL
	display_print_scrolling_text(ip_address,false);
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	82 ea       	ldi	r24, 0xA2	; 162
    16f2:	9c e2       	ldi	r25, 0x2C	; 44
    16f4:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
#endif

	//Configure multiple connections
	esp8266_send_cmd("AT+CIPMUX=1",100);
    16f8:	64 e6       	ldi	r22, 0x64	; 100
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	89 eb       	ldi	r24, 0xB9	; 185
    16fe:	91 e2       	ldi	r25, 0x21	; 33
    1700:	1b de       	rcall	.-970    	; 0x1338 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    1702:	80 91 d8 2c 	lds	r24, 0x2CD8
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	49 f4       	brne	.+18     	; 0x171c <esp8266_setup_webserver+0xce>
		return status;
	}
	
	//Start server
	esp8266_send_cmd("AT+CIPSERVER=1,80",100);	
    170a:	64 e6       	ldi	r22, 0x64	; 100
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	85 ec       	ldi	r24, 0xC5	; 197
    1710:	91 e2       	ldi	r25, 0x21	; 33
    1712:	12 de       	rcall	.-988    	; 0x1338 <esp8266_send_cmd>
	if (status != ESP8266_SUCCESS) {
    1714:	80 91 d8 2c 	lds	r24, 0x2CD8
    1718:	01 c0       	rjmp	.+2      	; 0x171c <esp8266_setup_webserver+0xce>
	} else if (ap && !sta) {
		esp8266_send_cmd("AT+CWMODE=2",100);
	} else if (ap && sta) {
		esp8266_send_cmd("AT+CWMODE=3",100);
	} else {
		return ESP8266_ERROR;
    171a:	80 e0       	ldi	r24, 0x00	; 0
	if (status != ESP8266_SUCCESS) {
		return status;
	}
	
	return ESP8266_SUCCESS;
}
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	08 95       	ret

00001722 <esp8266_configure_ssid_and_password>:
	
	esp8266_send_cmd("AT+CIPSTO=5",100);
}

esp8266_status_t esp8266_configure_ssid_and_password(void) 
{
    1722:	af 92       	push	r10
    1724:	bf 92       	push	r11
    1726:	cf 92       	push	r12
    1728:	df 92       	push	r13
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	6e 97       	sbiw	r28, 0x1e	; 30
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	de bf       	out	0x3e, r29	; 62
	if (status == ESP8266_GET_REQ) {
    1740:	80 91 d8 2c 	lds	r24, 0x2CD8
    1744:	87 30       	cpi	r24, 0x07	; 7
    1746:	09 f0       	breq	.+2      	; 0x174a <esp8266_configure_ssid_and_password+0x28>
    1748:	5b c0       	rjmp	.+182    	; 0x1800 <esp8266_configure_ssid_and_password+0xde>
		at_cipsend(link_channel,"<!DOCTYPE html>\
    174a:	10 91 06 20 	lds	r17, 0x2006
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    174e:	4a e0       	ldi	r20, 0x0A	; 10
    1750:	be 01       	movw	r22, r28
    1752:	66 5e       	subi	r22, 0xE6	; 230
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	8b e8       	ldi	r24, 0x8B	; 139
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	0e 94 01 54 	call	0xa802	; 0xa802 <__itoa_ncheck>
	char number_of_bytes[5];
	char cmd[25];
	
	//itoa_simple(number_of_bytes,strlen(str));
	itoa(strlen(str),number_of_bytes,10);
	if (channel == '1') {
    175e:	11 33       	cpi	r17, 0x31	; 49
    1760:	19 f4       	brne	.+6      	; 0x1768 <esp8266_configure_ssid_and_password+0x46>
		strcpy(cmd, "AT+CIPSEND=1,");
    1762:	68 ef       	ldi	r22, 0xF8	; 248
    1764:	71 e2       	ldi	r23, 0x21	; 33
    1766:	0c c0       	rjmp	.+24     	; 0x1780 <esp8266_configure_ssid_and_password+0x5e>
	} else if (channel == '2') {
    1768:	12 33       	cpi	r17, 0x32	; 50
    176a:	19 f4       	brne	.+6      	; 0x1772 <esp8266_configure_ssid_and_password+0x50>
		strcpy(cmd, "AT+CIPSEND=2,");
    176c:	66 e0       	ldi	r22, 0x06	; 6
    176e:	72 e2       	ldi	r23, 0x22	; 34
    1770:	07 c0       	rjmp	.+14     	; 0x1780 <esp8266_configure_ssid_and_password+0x5e>
	} else if (channel == '3') {
    1772:	13 33       	cpi	r17, 0x33	; 51
    1774:	19 f4       	brne	.+6      	; 0x177c <esp8266_configure_ssid_and_password+0x5a>
		strcpy(cmd, "AT+CIPSEND=3,");
    1776:	64 e1       	ldi	r22, 0x14	; 20
    1778:	72 e2       	ldi	r23, 0x22	; 34
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <esp8266_configure_ssid_and_password+0x5e>
	} else {
		strcpy(cmd, "AT+CIPSEND=0,");
    177c:	62 e2       	ldi	r22, 0x22	; 34
    177e:	72 e2       	ldi	r23, 0x22	; 34
    1780:	ce 01       	movw	r24, r28
    1782:	01 96       	adiw	r24, 0x01	; 1
    1784:	0e 94 bb 53 	call	0xa776	; 0xa776 <strcpy>
	}
	strcat(cmd,number_of_bytes);
    1788:	be 01       	movw	r22, r28
    178a:	66 5e       	subi	r22, 0xE6	; 230
    178c:	7f 4f       	sbci	r23, 0xFF	; 255
    178e:	ce 01       	movw	r24, r28
    1790:	01 96       	adiw	r24, 0x01	; 1
    1792:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>

	esp8266_send_cmd(cmd,100);
    1796:	64 e6       	ldi	r22, 0x64	; 100
    1798:	70 e0       	ldi	r23, 0x00	; 0
    179a:	ce 01       	movw	r24, r28
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	cc dd       	rcall	.-1128   	; 0x1338 <esp8266_send_cmd>
    17a0:	83 e3       	ldi	r24, 0x33	; 51
    17a2:	90 e0       	ldi	r25, 0x00	; 0
	while((rx_buffer[0] != '>') && (cnt++ < 50)) {
    17a4:	20 91 1c 2a 	lds	r18, 0x2A1C
    17a8:	2e 33       	cpi	r18, 0x3E	; 62
    17aa:	69 f0       	breq	.+26     	; 0x17c6 <esp8266_configure_ssid_and_password+0xa4>
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	51 f0       	breq	.+20     	; 0x17c6 <esp8266_configure_ssid_and_password+0xa4>
    17b2:	2f ef       	ldi	r18, 0xFF	; 255
    17b4:	33 ec       	ldi	r19, 0xC3	; 195
    17b6:	49 e0       	ldi	r20, 0x09	; 9
    17b8:	21 50       	subi	r18, 0x01	; 1
    17ba:	30 40       	sbci	r19, 0x00	; 0
    17bc:	40 40       	sbci	r20, 0x00	; 0
    17be:	e1 f7       	brne	.-8      	; 0x17b8 <esp8266_configure_ssid_and_password+0x96>
    17c0:	00 c0       	rjmp	.+0      	; 0x17c2 <esp8266_configure_ssid_and_password+0xa0>
    17c2:	00 00       	nop
    17c4:	ef cf       	rjmp	.-34     	; 0x17a4 <esp8266_configure_ssid_and_password+0x82>
		_delay_ms(100);
	}
	
	printf("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nConnection: close\r\n\r\n%s\r\n\r\n",str);
    17c6:	80 e3       	ldi	r24, 0x30	; 48
    17c8:	92 e2       	ldi	r25, 0x22	; 34
    17ca:	9f 93       	push	r25
    17cc:	8f 93       	push	r24
    17ce:	8c eb       	ldi	r24, 0xBC	; 188
    17d0:	93 e2       	ldi	r25, 0x23	; 35
    17d2:	9f 93       	push	r25
    17d4:	8f 93       	push	r24
    17d6:	0e 94 56 54 	call	0xa8ac	; 0xa8ac <printf>
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	93 ec       	ldi	r25, 0xC3	; 195
    17de:	a9 e0       	ldi	r26, 0x09	; 9
    17e0:	81 50       	subi	r24, 0x01	; 1
    17e2:	90 40       	sbci	r25, 0x00	; 0
    17e4:	a0 40       	sbci	r26, 0x00	; 0
    17e6:	e1 f7       	brne	.-8      	; 0x17e0 <esp8266_configure_ssid_and_password+0xbe>
    17e8:	00 c0       	rjmp	.+0      	; 0x17ea <esp8266_configure_ssid_and_password+0xc8>
    17ea:	00 00       	nop
	esp8266_send_cmd("Connection: close",0);
	esp8266_send_cmd(str,0);
	*/
	_delay_ms(100);
	
	esp8266_send_cmd("AT+CIPSTO=5",100);
    17ec:	64 e6       	ldi	r22, 0x64	; 100
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	82 e0       	ldi	r24, 0x02	; 2
    17f2:	94 e2       	ldi	r25, 0x24	; 36
    17f4:	a1 dd       	rcall	.-1214   	; 0x1338 <esp8266_send_cmd>
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <esp8266_configure_ssid_and_password+0xe2>
		</form>\
		<p>Input network name (SSID) and password</p>\
		<p>for your router. Then click submit.</p>\
		</body>\
		</html>");
	} else if(status == ESP8266_POST_REQ) {
    1800:	88 30       	cpi	r24, 0x08	; 8
    1802:	11 f0       	breq	.+4      	; 0x1808 <esp8266_configure_ssid_and_password+0xe6>
#endif
				return ESP8266_TIMEOUT;
			}	
		}
	}
	return ESP8266_SUCCESS;
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	a4 c0       	rjmp	.+328    	; 0x1950 <esp8266_configure_ssid_and_password+0x22e>
		</form>\
		<p>Input network name (SSID) and password</p>\
		<p>for your router. Then click submit.</p>\
		</body>\
		</html>");
	} else if(status == ESP8266_POST_REQ) {
    1808:	0f e1       	ldi	r16, 0x1F	; 31
    180a:	10 e0       	ldi	r17, 0x00	; 0
    180c:	01 50       	subi	r16, 0x01	; 1
    180e:	11 09       	sbc	r17, r1
		uint16_t cnt = 0;	
		while(cnt++ < 30) {
    1810:	01 15       	cp	r16, r1
    1812:	11 05       	cpc	r17, r1
    1814:	b9 f3       	breq	.-18     	; 0x1804 <esp8266_configure_ssid_and_password+0xe2>
    1816:	bf ef       	ldi	r27, 0xFF	; 255
    1818:	e3 ec       	ldi	r30, 0xC3	; 195
    181a:	f9 e0       	ldi	r31, 0x09	; 9
    181c:	b1 50       	subi	r27, 0x01	; 1
    181e:	e0 40       	sbci	r30, 0x00	; 0
    1820:	f0 40       	sbci	r31, 0x00	; 0
    1822:	e1 f7       	brne	.-8      	; 0x181c <esp8266_configure_ssid_and_password+0xfa>
    1824:	00 c0       	rjmp	.+0      	; 0x1826 <esp8266_configure_ssid_and_password+0x104>
    1826:	00 00       	nop
			_delay_ms(100);
			if (strstr(rx_buffer,"my_password") != NULL) {
    1828:	6e e0       	ldi	r22, 0x0E	; 14
    182a:	74 e2       	ldi	r23, 0x24	; 36
    182c:	8c e1       	ldi	r24, 0x1C	; 28
    182e:	9a e2       	ldi	r25, 0x2A	; 42
    1830:	0e 94 e7 53 	call	0xa7ce	; 0xa7ce <strstr>
    1834:	89 2b       	or	r24, r25
    1836:	51 f3       	breq	.-44     	; 0x180c <esp8266_configure_ssid_and_password+0xea>
				
				uint8_t ssid_len = sizeof(env.wifi_ssid);
				uint8_t pass_len = sizeof(env.wifi_pswd);
				
				memset(env.wifi_ssid,0,ssid_len);
    1838:	89 e1       	ldi	r24, 0x19	; 25
    183a:	e3 eb       	ldi	r30, 0xB3	; 179
    183c:	fb e2       	ldi	r31, 0x2B	; 43
    183e:	df 01       	movw	r26, r30
    1840:	28 2f       	mov	r18, r24
    1842:	1d 92       	st	X+, r1
    1844:	2a 95       	dec	r18
    1846:	e9 f7       	brne	.-6      	; 0x1842 <esp8266_configure_ssid_and_password+0x120>
				memset(env.wifi_pswd,0,pass_len);
    1848:	ea e9       	ldi	r30, 0x9A	; 154
    184a:	fb e2       	ldi	r31, 0x2B	; 43
    184c:	df 01       	movw	r26, r30
    184e:	1d 92       	st	X+, r1
    1850:	8a 95       	dec	r24
    1852:	e9 f7       	brne	.-6      	; 0x184e <esp8266_configure_ssid_and_password+0x12c>
				
				uint16_t len = strlen(rx_buffer);
    1854:	ec e1       	ldi	r30, 0x1C	; 28
    1856:	fa e2       	ldi	r31, 0x2A	; 42
    1858:	df 01       	movw	r26, r30
    185a:	0d 90       	ld	r0, X+
    185c:	00 20       	and	r0, r0
    185e:	e9 f7       	brne	.-6      	; 0x185a <esp8266_configure_ssid_and_password+0x138>
    1860:	fd 01       	movw	r30, r26
    1862:	31 97       	sbiw	r30, 0x01	; 1
    1864:	9f 01       	movw	r18, r30
    1866:	2c 51       	subi	r18, 0x1C	; 28
    1868:	3a 42       	sbci	r19, 0x2A	; 42
    186a:	69 01       	movw	r12, r18
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
    186c:	00 e0       	ldi	r16, 0x00	; 0
    186e:	10 e0       	ldi	r17, 0x00	; 0
				
				memset(env.wifi_ssid,0,ssid_len);
				memset(env.wifi_pswd,0,pass_len);
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
    1870:	a1 2c       	mov	r10, r1
				for (uint16_t i = 0; i < len; i++) {
					if(rx_buffer[i] == '=') {
						n++;
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
    1872:	84 e1       	ldi	r24, 0x14	; 20
    1874:	b8 2e       	mov	r11, r24
    1876:	ce 01       	movw	r24, r28
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	7c 01       	movw	r14, r24
				memset(env.wifi_pswd,0,pass_len);
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
    187c:	0c 15       	cp	r16, r12
    187e:	1d 05       	cpc	r17, r13
    1880:	08 f0       	brcs	.+2      	; 0x1884 <esp8266_configure_ssid_and_password+0x162>
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <esp8266_configure_ssid_and_password+0x1e0>
					if(rx_buffer[i] == '=') {
    1884:	f8 01       	movw	r30, r16
    1886:	e4 5e       	subi	r30, 0xE4	; 228
    1888:	f5 4d       	sbci	r31, 0xD5	; 213
    188a:	80 81       	ld	r24, Z
    188c:	8d 33       	cpi	r24, 0x3D	; 61
    188e:	b1 f5       	brne	.+108    	; 0x18fc <esp8266_configure_ssid_and_password+0x1da>
						n++;
    1890:	a3 94       	inc	r10
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
    1892:	d7 01       	movw	r26, r14
    1894:	eb 2d       	mov	r30, r11
    1896:	1d 92       	st	X+, r1
    1898:	ea 95       	dec	r30
    189a:	e9 f7       	brne	.-6      	; 0x1896 <esp8266_configure_ssid_and_password+0x174>
    189c:	f7 01       	movw	r30, r14
						while ((rx_buffer[++i] != '&') && (i != len)) {
    189e:	0f 5f       	subi	r16, 0xFF	; 255
    18a0:	1f 4f       	sbci	r17, 0xFF	; 255
    18a2:	d8 01       	movw	r26, r16
    18a4:	a4 5e       	subi	r26, 0xE4	; 228
    18a6:	b5 4d       	sbci	r27, 0xD5	; 213
    18a8:	8c 91       	ld	r24, X
    18aa:	86 32       	cpi	r24, 0x26	; 38
    18ac:	21 f4       	brne	.+8      	; 0x18b6 <esp8266_configure_ssid_and_password+0x194>
							temp[j++] = rx_buffer[i];
						}
						if (n == 1) {
    18ae:	f1 e0       	ldi	r31, 0x01	; 1
    18b0:	af 12       	cpse	r10, r31
    18b2:	13 c0       	rjmp	.+38     	; 0x18da <esp8266_configure_ssid_and_password+0x1b8>
    18b4:	05 c0       	rjmp	.+10     	; 0x18c0 <esp8266_configure_ssid_and_password+0x19e>
					if(rx_buffer[i] == '=') {
						n++;
						char temp[20];
						uint8_t j = 0;
						memset(temp,0,20);
						while ((rx_buffer[++i] != '&') && (i != len)) {
    18b6:	0c 15       	cp	r16, r12
    18b8:	1d 05       	cpc	r17, r13
    18ba:	c9 f3       	breq	.-14     	; 0x18ae <esp8266_configure_ssid_and_password+0x18c>
							temp[j++] = rx_buffer[i];
    18bc:	81 93       	st	Z+, r24
    18be:	ef cf       	rjmp	.-34     	; 0x189e <esp8266_configure_ssid_and_password+0x17c>
						}
						if (n == 1) {
							if (strlen(temp) < ssid_len)
    18c0:	f7 01       	movw	r30, r14
    18c2:	01 90       	ld	r0, Z+
    18c4:	00 20       	and	r0, r0
    18c6:	e9 f7       	brne	.-6      	; 0x18c2 <esp8266_configure_ssid_and_password+0x1a0>
    18c8:	31 97       	sbiw	r30, 0x01	; 1
    18ca:	ee 19       	sub	r30, r14
    18cc:	ff 09       	sbc	r31, r15
    18ce:	79 97       	sbiw	r30, 0x19	; 25
    18d0:	a8 f4       	brcc	.+42     	; 0x18fc <esp8266_configure_ssid_and_password+0x1da>
								strcpy(env.wifi_ssid,temp);
    18d2:	b7 01       	movw	r22, r14
    18d4:	83 eb       	ldi	r24, 0xB3	; 179
    18d6:	9b e2       	ldi	r25, 0x2B	; 43
    18d8:	0f c0       	rjmp	.+30     	; 0x18f8 <esp8266_configure_ssid_and_password+0x1d6>
						} else if (n == 2) {
    18da:	22 e0       	ldi	r18, 0x02	; 2
    18dc:	a2 12       	cpse	r10, r18
    18de:	0e c0       	rjmp	.+28     	; 0x18fc <esp8266_configure_ssid_and_password+0x1da>
							if (strlen(temp) < pass_len)
    18e0:	f7 01       	movw	r30, r14
    18e2:	01 90       	ld	r0, Z+
    18e4:	00 20       	and	r0, r0
    18e6:	e9 f7       	brne	.-6      	; 0x18e2 <esp8266_configure_ssid_and_password+0x1c0>
    18e8:	31 97       	sbiw	r30, 0x01	; 1
    18ea:	ee 19       	sub	r30, r14
    18ec:	ff 09       	sbc	r31, r15
    18ee:	79 97       	sbiw	r30, 0x19	; 25
    18f0:	28 f4       	brcc	.+10     	; 0x18fc <esp8266_configure_ssid_and_password+0x1da>
								strcpy(env.wifi_pswd,temp);
    18f2:	b7 01       	movw	r22, r14
    18f4:	8a e9       	ldi	r24, 0x9A	; 154
    18f6:	9b e2       	ldi	r25, 0x2B	; 43
    18f8:	0e 94 bb 53 	call	0xa776	; 0xa776 <strcpy>
				memset(env.wifi_pswd,0,pass_len);
				
				uint16_t len = strlen(rx_buffer);
				uint8_t n = 0;
				
				for (uint16_t i = 0; i < len; i++) {
    18fc:	0f 5f       	subi	r16, 0xFF	; 255
    18fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1900:	bd cf       	rjmp	.-134    	; 0x187c <esp8266_configure_ssid_and_password+0x15a>
								strcpy(env.wifi_pswd,temp);
						} 
					}
				}

				esp8266_off();
    1902:	44 dd       	rcall	.-1400   	; 0x138c <esp8266_off>
    1904:	3f ef       	ldi	r19, 0xFF	; 255
    1906:	47 ea       	ldi	r20, 0xA7	; 167
    1908:	81 e6       	ldi	r24, 0x61	; 97
    190a:	31 50       	subi	r19, 0x01	; 1
    190c:	40 40       	sbci	r20, 0x00	; 0
    190e:	80 40       	sbci	r24, 0x00	; 0
    1910:	e1 f7       	brne	.-8      	; 0x190a <esp8266_configure_ssid_and_password+0x1e8>
    1912:	00 c0       	rjmp	.+0      	; 0x1914 <esp8266_configure_ssid_and_password+0x1f2>
    1914:	00 00       	nop
				_delay_ms(1000);
				esp8266_on();
    1916:	28 dd       	rcall	.-1456   	; 0x1368 <esp8266_on>

				status = esp8266_setup();
    1918:	42 dd       	rcall	.-1404   	; 0x139e <esp8266_setup>
    191a:	80 93 d8 2c 	sts	0x2CD8, r24
				if (status != ESP8266_SUCCESS) {
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	31 f0       	breq	.+12     	; 0x192e <esp8266_configure_ssid_and_password+0x20c>
					stop_wifi_indication();
    1922:	0e 94 96 40 	call	0x812c	; 0x812c <stop_wifi_indication>
#ifdef SHOW_MANUAL
					display_print_scrolling_text("COULD NOT JOIN AP",false);
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	8a e1       	ldi	r24, 0x1A	; 26
    192a:	94 e2       	ldi	r25, 0x24	; 36
    192c:	0e c0       	rjmp	.+28     	; 0x194a <esp8266_configure_ssid_and_password+0x228>
#endif
					return ESP8266_TIMEOUT;
				}
				
				status = esp8266_join_ap(env.wifi_ssid,env.wifi_pswd);
    192e:	6a e9       	ldi	r22, 0x9A	; 154
    1930:	7b e2       	ldi	r23, 0x2B	; 43
    1932:	83 eb       	ldi	r24, 0xB3	; 179
    1934:	9b e2       	ldi	r25, 0x2B	; 43
    1936:	4f dd       	rcall	.-1378   	; 0x13d6 <esp8266_join_ap>
    1938:	80 93 d8 2c 	sts	0x2CD8, r24
				if (status != ESP8266_SUCCESS) {
    193c:	81 30       	cpi	r24, 0x01	; 1
    193e:	89 f7       	brne	.-30     	; 0x1922 <esp8266_configure_ssid_and_password+0x200>
#ifdef SHOW_MANUAL
					display_print_scrolling_text("COULD NOT JOIN AP",false);
#endif
					return ESP8266_TIMEOUT;
				}
				stop_wifi_indication();
    1940:	0e 94 96 40 	call	0x812c	; 0x812c <stop_wifi_indication>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("WIFI CONFIGURED",false);
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	8c e2       	ldi	r24, 0x2C	; 44
    1948:	94 e2       	ldi	r25, 0x24	; 36
    194a:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
#endif
				return ESP8266_TIMEOUT;
    194e:	83 e0       	ldi	r24, 0x03	; 3
			}	
		}
	}
	return ESP8266_SUCCESS;
}
    1950:	6e 96       	adiw	r28, 0x1e	; 30
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	ff 90       	pop	r15
    1960:	ef 90       	pop	r14
    1962:	df 90       	pop	r13
    1964:	cf 90       	pop	r12
    1966:	bf 90       	pop	r11
    1968:	af 90       	pop	r10
    196a:	08 95       	ret

0000196c <__vector_88>:

ISR(USARTD0_RXC_vect) 
{
    196c:	1f 92       	push	r1
    196e:	0f 92       	push	r0
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	0f 92       	push	r0
    1974:	11 24       	eor	r1, r1
    1976:	08 b6       	in	r0, 0x38	; 56
    1978:	0f 92       	push	r0
    197a:	18 be       	out	0x38, r1	; 56
    197c:	09 b6       	in	r0, 0x39	; 57
    197e:	0f 92       	push	r0
    1980:	19 be       	out	0x39, r1	; 57
    1982:	0b b6       	in	r0, 0x3b	; 59
    1984:	0f 92       	push	r0
    1986:	1b be       	out	0x3b, r1	; 59
    1988:	2f 93       	push	r18
    198a:	3f 93       	push	r19
    198c:	4f 93       	push	r20
    198e:	5f 93       	push	r21
    1990:	6f 93       	push	r22
    1992:	7f 93       	push	r23
    1994:	8f 93       	push	r24
    1996:	9f 93       	push	r25
    1998:	af 93       	push	r26
    199a:	bf 93       	push	r27
    199c:	ef 93       	push	r30
    199e:	ff 93       	push	r31
	char rx_temp = USARTD0.DATA;
    19a0:	40 91 a0 09 	lds	r20, 0x09A0
	
	if (rx_temp == '\n') {
    19a4:	4a 30       	cpi	r20, 0x0A	; 10
    19a6:	09 f0       	breq	.+2      	; 0x19aa <__vector_88+0x3e>
    19a8:	84 c0       	rjmp	.+264    	; 0x1ab2 <__vector_88+0x146>
		if (strstr(rx_buffer,"OK") || strstr(rx_buffer,"ready")) {
    19aa:	6c e3       	ldi	r22, 0x3C	; 60
    19ac:	74 e2       	ldi	r23, 0x24	; 36
    19ae:	8c e1       	ldi	r24, 0x1C	; 28
    19b0:	9a e2       	ldi	r25, 0x2A	; 42
    19b2:	0e 94 e7 53 	call	0xa7ce	; 0xa7ce <strstr>
    19b6:	89 2b       	or	r24, r25
    19b8:	41 f4       	brne	.+16     	; 0x19ca <__vector_88+0x5e>
    19ba:	6f e3       	ldi	r22, 0x3F	; 63
    19bc:	74 e2       	ldi	r23, 0x24	; 36
    19be:	8c e1       	ldi	r24, 0x1C	; 28
    19c0:	9a e2       	ldi	r25, 0x2A	; 42
    19c2:	0e 94 e7 53 	call	0xa7ce	; 0xa7ce <strstr>
    19c6:	89 2b       	or	r24, r25
    19c8:	11 f0       	breq	.+4      	; 0x19ce <__vector_88+0x62>
			status = ESP8266_SUCCESS;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	14 c0       	rjmp	.+40     	; 0x19f6 <__vector_88+0x8a>
		} else if (strstr(rx_buffer,"ERROR")) {
    19ce:	65 e4       	ldi	r22, 0x45	; 69
    19d0:	74 e2       	ldi	r23, 0x24	; 36
    19d2:	8c e1       	ldi	r24, 0x1C	; 28
    19d4:	9a e2       	ldi	r25, 0x2A	; 42
    19d6:	0e 94 e7 53 	call	0xa7ce	; 0xa7ce <strstr>
    19da:	89 2b       	or	r24, r25
    19dc:	19 f0       	breq	.+6      	; 0x19e4 <__vector_88+0x78>
			status = ESP8266_ERROR;
    19de:	10 92 d8 2c 	sts	0x2CD8, r1
    19e2:	4f c0       	rjmp	.+158    	; 0x1a82 <__vector_88+0x116>
		} else if (strstr(rx_buffer,"CONNECT")) {
    19e4:	6b e4       	ldi	r22, 0x4B	; 75
    19e6:	74 e2       	ldi	r23, 0x24	; 36
    19e8:	8c e1       	ldi	r24, 0x1C	; 28
    19ea:	9a e2       	ldi	r25, 0x2A	; 42
    19ec:	0e 94 e7 53 	call	0xa7ce	; 0xa7ce <strstr>
    19f0:	89 2b       	or	r24, r25
    19f2:	21 f0       	breq	.+8      	; 0x19fc <__vector_88+0x90>
			status = ESP8266_CONNECT;
    19f4:	84 e0       	ldi	r24, 0x04	; 4
    19f6:	80 93 d8 2c 	sts	0x2CD8, r24
    19fa:	43 c0       	rjmp	.+134    	; 0x1a82 <__vector_88+0x116>
		} else if (strstr(rx_buffer,"CLOSED")) {
    19fc:	63 e5       	ldi	r22, 0x53	; 83
    19fe:	74 e2       	ldi	r23, 0x24	; 36
    1a00:	8c e1       	ldi	r24, 0x1C	; 28
    1a02:	9a e2       	ldi	r25, 0x2A	; 42
    1a04:	0e 94 e7 53 	call	0xa7ce	; 0xa7ce <strstr>
    1a08:	89 2b       	or	r24, r25
    1a0a:	11 f0       	breq	.+4      	; 0x1a10 <__vector_88+0xa4>
			status = ESP8266_CLOSED;
    1a0c:	86 e0       	ldi	r24, 0x06	; 6
    1a0e:	f3 cf       	rjmp	.-26     	; 0x19f6 <__vector_88+0x8a>
		} else if (strstr(rx_buffer,"GET")) {
    1a10:	6a e5       	ldi	r22, 0x5A	; 90
    1a12:	74 e2       	ldi	r23, 0x24	; 36
    1a14:	8c e1       	ldi	r24, 0x1C	; 28
    1a16:	9a e2       	ldi	r25, 0x2A	; 42
    1a18:	0e 94 e7 53 	call	0xa7ce	; 0xa7ce <strstr>
    1a1c:	89 2b       	or	r24, r25
    1a1e:	31 f0       	breq	.+12     	; 0x1a2c <__vector_88+0xc0>
			link_channel = rx_buffer[5];
    1a20:	80 91 21 2a 	lds	r24, 0x2A21
    1a24:	80 93 06 20 	sts	0x2006, r24
			status = ESP8266_GET_REQ;
    1a28:	87 e0       	ldi	r24, 0x07	; 7
    1a2a:	e5 cf       	rjmp	.-54     	; 0x19f6 <__vector_88+0x8a>
		} else if (strstr(rx_buffer,"POST")) {
    1a2c:	6e e5       	ldi	r22, 0x5E	; 94
    1a2e:	74 e2       	ldi	r23, 0x24	; 36
    1a30:	8c e1       	ldi	r24, 0x1C	; 28
    1a32:	9a e2       	ldi	r25, 0x2A	; 42
    1a34:	0e 94 e7 53 	call	0xa7ce	; 0xa7ce <strstr>
    1a38:	89 2b       	or	r24, r25
    1a3a:	11 f0       	breq	.+4      	; 0x1a40 <__vector_88+0xd4>
			status = ESP8266_POST_REQ;
    1a3c:	88 e0       	ldi	r24, 0x08	; 8
    1a3e:	db cf       	rjmp	.-74     	; 0x19f6 <__vector_88+0x8a>
		} else if (strstr(rx_buffer,"192")) {
    1a40:	63 e6       	ldi	r22, 0x63	; 99
    1a42:	74 e2       	ldi	r23, 0x24	; 36
    1a44:	8c e1       	ldi	r24, 0x1C	; 28
    1a46:	9a e2       	ldi	r25, 0x2A	; 42
    1a48:	0e 94 e7 53 	call	0xa7ce	; 0xa7ce <strstr>
    1a4c:	89 2b       	or	r24, r25
    1a4e:	71 f0       	breq	.+28     	; 0x1a6c <__vector_88+0x100>
			strncpy(ip_address,strchr(rx_buffer,'\"'),19);
    1a50:	62 e2       	ldi	r22, 0x22	; 34
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	8c e1       	ldi	r24, 0x1C	; 28
    1a56:	9a e2       	ldi	r25, 0x2A	; 42
    1a58:	0e 94 b0 53 	call	0xa760	; 0xa760 <strchr>
    1a5c:	43 e1       	ldi	r20, 0x13	; 19
    1a5e:	50 e0       	ldi	r21, 0x00	; 0
    1a60:	bc 01       	movw	r22, r24
    1a62:	82 ea       	ldi	r24, 0xA2	; 162
    1a64:	9c e2       	ldi	r25, 0x2C	; 44
    1a66:	0e 94 c2 53 	call	0xa784	; 0xa784 <strncpy>
    1a6a:	0b c0       	rjmp	.+22     	; 0x1a82 <__vector_88+0x116>
		} else if (strstr(rx_buffer,"wdt")) {
    1a6c:	67 e6       	ldi	r22, 0x67	; 103
    1a6e:	74 e2       	ldi	r23, 0x24	; 36
    1a70:	8c e1       	ldi	r24, 0x1C	; 28
    1a72:	9a e2       	ldi	r25, 0x2A	; 42
    1a74:	0e 94 e7 53 	call	0xa7ce	; 0xa7ce <strstr>
    1a78:	89 2b       	or	r24, r25
    1a7a:	19 f0       	breq	.+6      	; 0x1a82 <__vector_88+0x116>
			wdt_triggered = true;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	80 93 e7 2a 	sts	0x2AE7, r24
		}
		 
		if (strstr(rx_buffer,"{")) {
    1a82:	6b e7       	ldi	r22, 0x7B	; 123
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	8c e1       	ldi	r24, 0x1C	; 28
    1a88:	9a e2       	ldi	r25, 0x2A	; 42
    1a8a:	0e 94 b0 53 	call	0xa760	; 0xa760 <strchr>
    1a8e:	89 2b       	or	r24, r25
    1a90:	21 f0       	breq	.+8      	; 0x1a9a <__vector_88+0x12e>
			json_found = true;	
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	80 93 e6 2a 	sts	0x2AE6, r24
    1a98:	26 c0       	rjmp	.+76     	; 0x1ae6 <__vector_88+0x17a>
		} else {
			//Flush buffer
			rx_ptr = 0;
    1a9a:	10 92 e4 2a 	sts	0x2AE4, r1
    1a9e:	10 92 e5 2a 	sts	0x2AE5, r1
			memset(rx_buffer, 0, RX_BUFFER);	
    1aa2:	88 ec       	ldi	r24, 0xC8	; 200
    1aa4:	ec e1       	ldi	r30, 0x1C	; 28
    1aa6:	fa e2       	ldi	r31, 0x2A	; 42
    1aa8:	df 01       	movw	r26, r30
    1aaa:	1d 92       	st	X+, r1
    1aac:	8a 95       	dec	r24
    1aae:	e9 f7       	brne	.-6      	; 0x1aaa <__vector_88+0x13e>
    1ab0:	1a c0       	rjmp	.+52     	; 0x1ae6 <__vector_88+0x17a>
		}
	} else {
		rx_buffer[rx_ptr++] = rx_temp;
    1ab2:	80 91 e4 2a 	lds	r24, 0x2AE4
    1ab6:	90 91 e5 2a 	lds	r25, 0x2AE5
    1aba:	9c 01       	movw	r18, r24
    1abc:	2f 5f       	subi	r18, 0xFF	; 255
    1abe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac0:	20 93 e4 2a 	sts	0x2AE4, r18
    1ac4:	30 93 e5 2a 	sts	0x2AE5, r19
    1ac8:	fc 01       	movw	r30, r24
    1aca:	e4 5e       	subi	r30, 0xE4	; 228
    1acc:	f5 4d       	sbci	r31, 0xD5	; 213
    1ace:	40 83       	st	Z, r20
		
		//Buffer overflow guard
		if (rx_ptr == RX_BUFFER) {
    1ad0:	80 91 e4 2a 	lds	r24, 0x2AE4
    1ad4:	90 91 e5 2a 	lds	r25, 0x2AE5
    1ad8:	88 3c       	cpi	r24, 0xC8	; 200
    1ada:	91 05       	cpc	r25, r1
    1adc:	21 f4       	brne	.+8      	; 0x1ae6 <__vector_88+0x17a>
			rx_ptr = 0;
    1ade:	10 92 e4 2a 	sts	0x2AE4, r1
    1ae2:	10 92 e5 2a 	sts	0x2AE5, r1
		}
	}
    1ae6:	ff 91       	pop	r31
    1ae8:	ef 91       	pop	r30
    1aea:	bf 91       	pop	r27
    1aec:	af 91       	pop	r26
    1aee:	9f 91       	pop	r25
    1af0:	8f 91       	pop	r24
    1af2:	7f 91       	pop	r23
    1af4:	6f 91       	pop	r22
    1af6:	5f 91       	pop	r21
    1af8:	4f 91       	pop	r20
    1afa:	3f 91       	pop	r19
    1afc:	2f 91       	pop	r18
    1afe:	0f 90       	pop	r0
    1b00:	0b be       	out	0x3b, r0	; 59
    1b02:	0f 90       	pop	r0
    1b04:	09 be       	out	0x39, r0	; 57
    1b06:	0f 90       	pop	r0
    1b08:	08 be       	out	0x38, r0	; 56
    1b0a:	0f 90       	pop	r0
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	0f 90       	pop	r0
    1b10:	1f 90       	pop	r1
    1b12:	18 95       	reti

00001b14 <ht1632c_set_pixel>:
void ht1632c_blink(bool blink_on) 
{	
	if (blink_on) {
		ht1632c_write_command(HT1632_BLINK_ON);	
	} else {
		ht1632c_write_command(HT1632_BLINK_OFF);	
    1b14:	fc 01       	movw	r30, r24
    1b16:	23 e0       	ldi	r18, 0x03	; 3
    1b18:	f6 95       	lsr	r31
    1b1a:	e7 95       	ror	r30
    1b1c:	2a 95       	dec	r18
    1b1e:	e1 f7       	brne	.-8      	; 0x1b18 <ht1632c_set_pixel+0x4>
    1b20:	e8 54       	subi	r30, 0x48	; 72
    1b22:	f3 4d       	sbci	r31, 0xD3	; 211
    1b24:	87 70       	andi	r24, 0x07	; 7
    1b26:	99 27       	eor	r25, r25
    1b28:	21 e0       	ldi	r18, 0x01	; 1
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	01 c0       	rjmp	.+2      	; 0x1b30 <ht1632c_set_pixel+0x1c>
    1b2e:	22 0f       	add	r18, r18
    1b30:	8a 95       	dec	r24
    1b32:	ea f7       	brpl	.-6      	; 0x1b2e <ht1632c_set_pixel+0x1a>
    1b34:	80 81       	ld	r24, Z
    1b36:	82 2b       	or	r24, r18
    1b38:	80 83       	st	Z, r24
    1b3a:	08 95       	ret

00001b3c <ht1632c_clr_pixel>:
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	33 e0       	ldi	r19, 0x03	; 3
    1b40:	f6 95       	lsr	r31
    1b42:	e7 95       	ror	r30
    1b44:	3a 95       	dec	r19
    1b46:	e1 f7       	brne	.-8      	; 0x1b40 <ht1632c_clr_pixel+0x4>
    1b48:	e8 54       	subi	r30, 0x48	; 72
    1b4a:	f3 4d       	sbci	r31, 0xD3	; 211
    1b4c:	87 70       	andi	r24, 0x07	; 7
    1b4e:	99 27       	eor	r25, r25
    1b50:	21 e0       	ldi	r18, 0x01	; 1
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	01 c0       	rjmp	.+2      	; 0x1b58 <ht1632c_clr_pixel+0x1c>
    1b56:	22 0f       	add	r18, r18
    1b58:	8a 95       	dec	r24
    1b5a:	ea f7       	brpl	.-6      	; 0x1b56 <ht1632c_clr_pixel+0x1a>
    1b5c:	20 95       	com	r18
    1b5e:	80 81       	ld	r24, Z
    1b60:	28 23       	and	r18, r24
    1b62:	20 83       	st	Z, r18
    1b64:	08 95       	ret

00001b66 <ht1632c_fill_screen>:
    1b66:	e8 eb       	ldi	r30, 0xB8	; 184
    1b68:	fc e2       	ldi	r31, 0x2C	; 44
    1b6a:	8f ef       	ldi	r24, 0xFF	; 255
    1b6c:	81 93       	st	Z+, r24
    1b6e:	9c e2       	ldi	r25, 0x2C	; 44
    1b70:	e8 3d       	cpi	r30, 0xD8	; 216
    1b72:	f9 07       	cpc	r31, r25
    1b74:	d9 f7       	brne	.-10     	; 0x1b6c <ht1632c_fill_screen+0x6>
    1b76:	0c 94 85 20 	jmp	0x410a	; 0x410a <display_refresh_screen>

00001b7a <ht1632c_clear_screen>:
    1b7a:	e8 eb       	ldi	r30, 0xB8	; 184
    1b7c:	fc e2       	ldi	r31, 0x2C	; 44
    1b7e:	11 92       	st	Z+, r1
    1b80:	8c e2       	ldi	r24, 0x2C	; 44
    1b82:	e8 3d       	cpi	r30, 0xD8	; 216
    1b84:	f8 07       	cpc	r31, r24
    1b86:	d9 f7       	brne	.-10     	; 0x1b7e <ht1632c_clear_screen+0x4>
    1b88:	0c 94 85 20 	jmp	0x410a	; 0x410a <display_refresh_screen>

00001b8c <ht1632c_clear_buffer>:
    1b8c:	e8 eb       	ldi	r30, 0xB8	; 184
    1b8e:	fc e2       	ldi	r31, 0x2C	; 44
    1b90:	11 92       	st	Z+, r1
    1b92:	8c e2       	ldi	r24, 0x2C	; 44
    1b94:	e8 3d       	cpi	r30, 0xD8	; 216
    1b96:	f8 07       	cpc	r31, r24
    1b98:	d9 f7       	brne	.-10     	; 0x1b90 <ht1632c_clear_buffer+0x4>
    1b9a:	08 95       	ret

00001b9c <ht1632c_write_data>:
    1b9c:	74 e0       	ldi	r23, 0x04	; 4
    1b9e:	41 e0       	ldi	r20, 0x01	; 1
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	e8 e0       	ldi	r30, 0x08	; 8
    1ba4:	66 23       	and	r22, r22
    1ba6:	c1 f0       	breq	.+48     	; 0x1bd8 <ht1632c_write_data+0x3c>
    1ba8:	70 93 86 06 	sts	0x0686, r23
    1bac:	2f ef       	ldi	r18, 0xFF	; 255
    1bae:	26 0f       	add	r18, r22
    1bb0:	da 01       	movw	r26, r20
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <ht1632c_write_data+0x1c>
    1bb4:	aa 0f       	add	r26, r26
    1bb6:	bb 1f       	adc	r27, r27
    1bb8:	2a 95       	dec	r18
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <ht1632c_write_data+0x18>
    1bbc:	9d 01       	movw	r18, r26
    1bbe:	28 23       	and	r18, r24
    1bc0:	39 23       	and	r19, r25
    1bc2:	23 2b       	or	r18, r19
    1bc4:	19 f0       	breq	.+6      	; 0x1bcc <ht1632c_write_data+0x30>
    1bc6:	e0 93 85 06 	sts	0x0685, r30
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <ht1632c_write_data+0x34>
    1bcc:	e0 93 86 06 	sts	0x0686, r30
    1bd0:	70 93 85 06 	sts	0x0685, r23
    1bd4:	61 50       	subi	r22, 0x01	; 1
    1bd6:	e6 cf       	rjmp	.-52     	; 0x1ba4 <ht1632c_write_data+0x8>
    1bd8:	08 95       	ret

00001bda <ht1632c_refresh_screen>:
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	80 93 86 06 	sts	0x0686, r24
    1be4:	63 e0       	ldi	r22, 0x03	; 3
    1be6:	85 e0       	ldi	r24, 0x05	; 5
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	d8 df       	rcall	.-80     	; 0x1b9c <ht1632c_write_data>
    1bec:	67 e0       	ldi	r22, 0x07	; 7
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	d4 df       	rcall	.-88     	; 0x1b9c <ht1632c_write_data>
    1bf4:	c9 eb       	ldi	r28, 0xB9	; 185
    1bf6:	dc e2       	ldi	r29, 0x2C	; 44
    1bf8:	fe 01       	movw	r30, r28
    1bfa:	31 97       	sbiw	r30, 0x01	; 1
    1bfc:	80 81       	ld	r24, Z
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	98 2f       	mov	r25, r24
    1c02:	88 27       	eor	r24, r24
    1c04:	28 81       	ld	r18, Y
    1c06:	60 e1       	ldi	r22, 0x10	; 16
    1c08:	82 2b       	or	r24, r18
    1c0a:	c8 df       	rcall	.-112    	; 0x1b9c <ht1632c_write_data>
    1c0c:	22 96       	adiw	r28, 0x02	; 2
    1c0e:	8c e2       	ldi	r24, 0x2C	; 44
    1c10:	c9 3d       	cpi	r28, 0xD9	; 217
    1c12:	d8 07       	cpc	r29, r24
    1c14:	89 f7       	brne	.-30     	; 0x1bf8 <ht1632c_refresh_screen+0x1e>
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	80 93 85 06 	sts	0x0685, r24
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	08 95       	ret

00001c22 <ht1632c_write_command>:
    1c22:	1f 93       	push	r17
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	94 60       	ori	r25, 0x04	; 4
    1c2c:	c0 e8       	ldi	r28, 0x80	; 128
    1c2e:	d6 e0       	ldi	r29, 0x06	; 6
    1c30:	11 e0       	ldi	r17, 0x01	; 1
    1c32:	1e 83       	std	Y+6, r17	; 0x06
    1c34:	6c e0       	ldi	r22, 0x0C	; 12
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	b0 df       	rcall	.-160    	; 0x1b9c <ht1632c_write_data>
    1c3c:	1d 83       	std	Y+5, r17	; 0x05
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	08 95       	ret

00001c46 <ht1632c_setup>:
    1c46:	cf 93       	push	r28
    1c48:	c8 2f       	mov	r28, r24
    1c4a:	e0 e8       	ldi	r30, 0x80	; 128
    1c4c:	f6 e0       	ldi	r31, 0x06	; 6
    1c4e:	8d e0       	ldi	r24, 0x0D	; 13
    1c50:	81 83       	std	Z+1, r24	; 0x01
    1c52:	85 e0       	ldi	r24, 0x05	; 5
    1c54:	85 83       	std	Z+5, r24	; 0x05
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	e4 df       	rcall	.-56     	; 0x1c22 <ht1632c_write_command>
    1c5a:	83 e0       	ldi	r24, 0x03	; 3
    1c5c:	e2 df       	rcall	.-60     	; 0x1c22 <ht1632c_write_command>
    1c5e:	88 e0       	ldi	r24, 0x08	; 8
    1c60:	e0 df       	rcall	.-64     	; 0x1c22 <ht1632c_write_command>
    1c62:	84 e1       	ldi	r24, 0x14	; 20
    1c64:	de df       	rcall	.-68     	; 0x1c22 <ht1632c_write_command>
    1c66:	88 e1       	ldi	r24, 0x18	; 24
    1c68:	dc df       	rcall	.-72     	; 0x1c22 <ht1632c_write_command>
    1c6a:	8c 2f       	mov	r24, r28
    1c6c:	da df       	rcall	.-76     	; 0x1c22 <ht1632c_write_command>
    1c6e:	81 ea       	ldi	r24, 0xA1	; 161
    1c70:	cf 91       	pop	r28
    1c72:	d7 cf       	rjmp	.-82     	; 0x1c22 <ht1632c_write_command>

00001c74 <ht1632c_power_down>:
    1c74:	82 e0       	ldi	r24, 0x02	; 2
    1c76:	d5 df       	rcall	.-86     	; 0x1c22 <ht1632c_write_command>
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	d3 df       	rcall	.-90     	; 0x1c22 <ht1632c_write_command>
    1c7c:	e0 e8       	ldi	r30, 0x80	; 128
    1c7e:	f6 e0       	ldi	r31, 0x06	; 6
    1c80:	8f e0       	ldi	r24, 0x0F	; 15
    1c82:	82 83       	std	Z+2, r24	; 0x02
    1c84:	88 e1       	ldi	r24, 0x18	; 24
    1c86:	80 8b       	std	Z+16, r24	; 0x10
    1c88:	81 8b       	std	Z+17, r24	; 0x11
    1c8a:	82 8b       	std	Z+18, r24	; 0x12
    1c8c:	83 8b       	std	Z+19, r24	; 0x13
    1c8e:	08 95       	ret

00001c90 <ht1632c_set_brightness>:
    1c90:	87 fd       	sbrc	r24, 7
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	80 31       	cpi	r24, 0x10	; 16
    1c96:	0c f0       	brlt	.+2      	; 0x1c9a <ht1632c_set_brightness+0xa>
    1c98:	8f e0       	ldi	r24, 0x0F	; 15
    1c9a:	80 6a       	ori	r24, 0xA0	; 160
    1c9c:	c2 cf       	rjmp	.-124    	; 0x1c22 <ht1632c_write_command>

00001c9e <ht1632c_shift_left>:

void ht1632c_shift_left(void) 
{
	int8_t i;
	
	display_refresh_screen();
    1c9e:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
    1ca2:	2f ef       	ldi	r18, 0xFF	; 255
    1ca4:	89 ef       	ldi	r24, 0xF9	; 249
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	21 50       	subi	r18, 0x01	; 1
    1caa:	80 40       	sbci	r24, 0x00	; 0
    1cac:	90 40       	sbci	r25, 0x00	; 0
    1cae:	e1 f7       	brne	.-8      	; 0x1ca8 <ht1632c_shift_left+0xa>
    1cb0:	00 c0       	rjmp	.+0      	; 0x1cb2 <ht1632c_shift_left+0x14>
    1cb2:	00 00       	nop
    1cb4:	ea eb       	ldi	r30, 0xBA	; 186
    1cb6:	fc e2       	ldi	r31, 0x2C	; 44
	_delay_ms(10);
	
	for (i = 0; i <= 30; i += 2) {
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
		if (i == 14) {
    1cba:	8e 30       	cpi	r24, 0x0E	; 14
    1cbc:	29 f4       	brne	.+10     	; 0x1cc8 <ht1632c_shift_left+0x2a>
			ledmatrix[14] = ledmatrix[1];
    1cbe:	90 91 b9 2c 	lds	r25, 0x2CB9
    1cc2:	90 93 c6 2c 	sts	0x2CC6, r25
    1cc6:	0b c0       	rjmp	.+22     	; 0x1cde <ht1632c_shift_left+0x40>
		} else if(i == 30) {
    1cc8:	8e 31       	cpi	r24, 0x1E	; 30
    1cca:	29 f4       	brne	.+10     	; 0x1cd6 <ht1632c_shift_left+0x38>
			ledmatrix[30] = ledmatrix[17];
    1ccc:	90 91 c9 2c 	lds	r25, 0x2CC9
    1cd0:	90 93 d6 2c 	sts	0x2CD6, r25
    1cd4:	04 c0       	rjmp	.+8      	; 0x1cde <ht1632c_shift_left+0x40>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    1cd6:	90 81       	ld	r25, Z
    1cd8:	df 01       	movw	r26, r30
    1cda:	12 97       	sbiw	r26, 0x02	; 2
    1cdc:	9c 93       	st	X, r25
    1cde:	8e 5f       	subi	r24, 0xFE	; 254
    1ce0:	32 96       	adiw	r30, 0x02	; 2
	int8_t i;
	
	display_refresh_screen();
	_delay_ms(10);
	
	for (i = 0; i <= 30; i += 2) {
    1ce2:	80 32       	cpi	r24, 0x20	; 32
    1ce4:	51 f7       	brne	.-44     	; 0x1cba <ht1632c_shift_left+0x1c>
    1ce6:	eb eb       	ldi	r30, 0xBB	; 187
    1ce8:	fc e2       	ldi	r31, 0x2C	; 44
    1cea:	81 e0       	ldi	r24, 0x01	; 1
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
		if (i == 15) {
    1cec:	8f 30       	cpi	r24, 0x0F	; 15
    1cee:	19 f4       	brne	.+6      	; 0x1cf6 <ht1632c_shift_left+0x58>
			ledmatrix[15] = 0;
    1cf0:	10 92 c7 2c 	sts	0x2CC7, r1
    1cf4:	09 c0       	rjmp	.+18     	; 0x1d08 <ht1632c_shift_left+0x6a>
		} else if (i == 31) {
    1cf6:	8f 31       	cpi	r24, 0x1F	; 31
    1cf8:	19 f4       	brne	.+6      	; 0x1d00 <ht1632c_shift_left+0x62>
			ledmatrix[31] = 0;
    1cfa:	10 92 d7 2c 	sts	0x2CD7, r1
    1cfe:	04 c0       	rjmp	.+8      	; 0x1d08 <ht1632c_shift_left+0x6a>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
    1d00:	90 81       	ld	r25, Z
    1d02:	df 01       	movw	r26, r30
    1d04:	12 97       	sbiw	r26, 0x02	; 2
    1d06:	9c 93       	st	X, r25
    1d08:	8e 5f       	subi	r24, 0xFE	; 254
    1d0a:	32 96       	adiw	r30, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	
	for (i = 1; i <= 31; i += 2) {
    1d0c:	81 32       	cpi	r24, 0x21	; 33
    1d0e:	71 f7       	brne	.-36     	; 0x1cec <ht1632c_shift_left+0x4e>
		} else {
			ledmatrix[i] = ledmatrix[i+2];
		}
	}
	*/
}
    1d10:	08 95       	ret

00001d12 <ht1632c_shift_right>:

void ht1632c_shift_right(void) 
{	
	int8_t i;
	
	display_refresh_screen();
    1d12:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
    1d16:	2f ef       	ldi	r18, 0xFF	; 255
    1d18:	89 ef       	ldi	r24, 0xF9	; 249
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	21 50       	subi	r18, 0x01	; 1
    1d1e:	80 40       	sbci	r24, 0x00	; 0
    1d20:	90 40       	sbci	r25, 0x00	; 0
    1d22:	e1 f7       	brne	.-8      	; 0x1d1c <ht1632c_shift_right+0xa>
    1d24:	00 c0       	rjmp	.+0      	; 0x1d26 <ht1632c_shift_right+0x14>
    1d26:	00 00       	nop
    1d28:	e7 ed       	ldi	r30, 0xD7	; 215
    1d2a:	fc e2       	ldi	r31, 0x2C	; 44
	_delay_ms(10);
	
	for (i = 31; i > 0; i -= 2) {
    1d2c:	8f e1       	ldi	r24, 0x1F	; 31
    1d2e:	df 01       	movw	r26, r30
    1d30:	12 97       	sbiw	r26, 0x02	; 2
		if (i == 1) {
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	29 f4       	brne	.+10     	; 0x1d40 <ht1632c_shift_right+0x2e>
			ledmatrix[1] = ledmatrix[14];
    1d36:	90 91 c6 2c 	lds	r25, 0x2CC6
    1d3a:	90 93 b9 2c 	sts	0x2CB9, r25
    1d3e:	09 c0       	rjmp	.+18     	; 0x1d52 <ht1632c_shift_right+0x40>
		} else if(i == 17) {
    1d40:	81 31       	cpi	r24, 0x11	; 17
    1d42:	29 f4       	brne	.+10     	; 0x1d4e <ht1632c_shift_right+0x3c>
			ledmatrix[17] = ledmatrix[30];
    1d44:	90 91 d6 2c 	lds	r25, 0x2CD6
    1d48:	90 93 c9 2c 	sts	0x2CC9, r25
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <ht1632c_shift_right+0x40>
		} else {
			ledmatrix[i] = ledmatrix[i-2];
    1d4e:	9c 91       	ld	r25, X
    1d50:	90 83       	st	Z, r25
    1d52:	82 50       	subi	r24, 0x02	; 2
    1d54:	fd 01       	movw	r30, r26
	int8_t i;
	
	display_refresh_screen();
	_delay_ms(10);
	
	for (i = 31; i > 0; i -= 2) {
    1d56:	8f 3f       	cpi	r24, 0xFF	; 255
    1d58:	51 f7       	brne	.-44     	; 0x1d2e <ht1632c_shift_right+0x1c>
    1d5a:	e6 ed       	ldi	r30, 0xD6	; 214
    1d5c:	fc e2       	ldi	r31, 0x2C	; 44
    1d5e:	8e e1       	ldi	r24, 0x1E	; 30
    1d60:	df 01       	movw	r26, r30
    1d62:	12 97       	sbiw	r26, 0x02	; 2
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	for (i = 30; i >= 0; i -= 2) {
		if (i == 0) {
    1d64:	81 11       	cpse	r24, r1
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <ht1632c_shift_right+0x5c>
			ledmatrix[0] = 0;
    1d68:	10 92 b8 2c 	sts	0x2CB8, r1
    1d6c:	07 c0       	rjmp	.+14     	; 0x1d7c <ht1632c_shift_right+0x6a>
		} else if(i == 16) {
    1d6e:	80 31       	cpi	r24, 0x10	; 16
    1d70:	19 f4       	brne	.+6      	; 0x1d78 <ht1632c_shift_right+0x66>
			ledmatrix[16] = 0;
    1d72:	10 92 c8 2c 	sts	0x2CC8, r1
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <ht1632c_shift_right+0x6a>
		} else {
			ledmatrix[i] = ledmatrix[i-2];
    1d78:	9c 91       	ld	r25, X
    1d7a:	90 83       	st	Z, r25
    1d7c:	82 50       	subi	r24, 0x02	; 2
    1d7e:	fd 01       	movw	r30, r26
			ledmatrix[17] = ledmatrix[30];
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	for (i = 30; i >= 0; i -= 2) {
    1d80:	8e 3f       	cpi	r24, 0xFE	; 254
    1d82:	71 f7       	brne	.-36     	; 0x1d60 <ht1632c_shift_right+0x4e>
		} else {
			ledmatrix[i] = ledmatrix[i-2];
		}
	}
	*/
}
    1d84:	08 95       	ret

00001d86 <ht1632c_shift_up>:

void ht1632c_shift_up(void) 
{
    1d86:	a8 eb       	ldi	r26, 0xB8	; 184
    1d88:	bc e2       	ldi	r27, 0x2C	; 44
    1d8a:	e8 ec       	ldi	r30, 0xC8	; 200
    1d8c:	fc e2       	ldi	r31, 0x2C	; 44
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
		temp_top = ledmatrix[i];
		temp_bottom = ledmatrix[i+16];
		temp = (temp_top << 8) | (temp_bottom);
    1d8e:	8c 91       	ld	r24, X
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	98 2f       	mov	r25, r24
    1d94:	88 27       	eor	r24, r24
    1d96:	20 81       	ld	r18, Z
    1d98:	82 2b       	or	r24, r18
		temp <<= 1;
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
		ledmatrix[i] = (temp >> 8);
    1d9e:	9d 93       	st	X+, r25
		ledmatrix[i+16] = temp;
    1da0:	81 93       	st	Z+, r24
	uint8_t temp_bottom;
	uint16_t temp;
	
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
    1da2:	2c e2       	ldi	r18, 0x2C	; 44
    1da4:	e7 3d       	cpi	r30, 0xD7	; 215
    1da6:	f2 07       	cpc	r31, r18
    1da8:	91 f7       	brne	.-28     	; 0x1d8e <ht1632c_shift_up+0x8>
		temp <<= 1;
		ledmatrix[i] = (temp >> 8);
		ledmatrix[i+16] = temp;
	}
	
	display_refresh_screen();
    1daa:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
    1dae:	8f ef       	ldi	r24, 0xFF	; 255
    1db0:	99 ef       	ldi	r25, 0xF9	; 249
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	81 50       	subi	r24, 0x01	; 1
    1db6:	90 40       	sbci	r25, 0x00	; 0
    1db8:	20 40       	sbci	r18, 0x00	; 0
    1dba:	e1 f7       	brne	.-8      	; 0x1db4 <ht1632c_shift_up+0x2e>
    1dbc:	00 c0       	rjmp	.+0      	; 0x1dbe <ht1632c_shift_up+0x38>
    1dbe:	00 00       	nop
    1dc0:	08 95       	ret

00001dc2 <ht1632c_shift_down>:
	_delay_ms(10);
}

void ht1632c_shift_down(void) 
{
    1dc2:	a8 eb       	ldi	r26, 0xB8	; 184
    1dc4:	bc e2       	ldi	r27, 0x2C	; 44
    1dc6:	e8 ec       	ldi	r30, 0xC8	; 200
    1dc8:	fc e2       	ldi	r31, 0x2C	; 44
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
		temp_top = ledmatrix[i];
		temp_bottom = ledmatrix[i+16];
		temp = (temp_top << 8) | (temp_bottom);
    1dca:	8c 91       	ld	r24, X
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	98 2f       	mov	r25, r24
    1dd0:	88 27       	eor	r24, r24
    1dd2:	20 81       	ld	r18, Z
    1dd4:	82 2b       	or	r24, r18
		temp >>= 1;
    1dd6:	96 95       	lsr	r25
    1dd8:	87 95       	ror	r24
		ledmatrix[i] = (temp >> 8);
    1dda:	9d 93       	st	X+, r25
		ledmatrix[i+16] = temp;
    1ddc:	81 93       	st	Z+, r24
	uint8_t temp_bottom;
	uint16_t temp;
	
	uint8_t i;
	
	for (i = 0; i < 15; i++) {
    1dde:	2c e2       	ldi	r18, 0x2C	; 44
    1de0:	e7 3d       	cpi	r30, 0xD7	; 215
    1de2:	f2 07       	cpc	r31, r18
    1de4:	91 f7       	brne	.-28     	; 0x1dca <ht1632c_shift_down+0x8>
		temp >>= 1;
		ledmatrix[i] = (temp >> 8);
		ledmatrix[i+16] = temp;
	}
	
	display_refresh_screen();
    1de6:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
    1dea:	8f ef       	ldi	r24, 0xFF	; 255
    1dec:	99 ef       	ldi	r25, 0xF9	; 249
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	81 50       	subi	r24, 0x01	; 1
    1df2:	90 40       	sbci	r25, 0x00	; 0
    1df4:	20 40       	sbci	r18, 0x00	; 0
    1df6:	e1 f7       	brne	.-8      	; 0x1df0 <ht1632c_shift_down+0x2e>
    1df8:	00 c0       	rjmp	.+0      	; 0x1dfa <ht1632c_shift_down+0x38>
    1dfa:	00 00       	nop
    1dfc:	08 95       	ret

00001dfe <ht1632c_slide_in_from_left>:
}

/*------------------------------SLIDE FUNCTIONS------------------------------*/

void ht1632c_slide_in_from_left(void) 
{
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	a0 97       	sbiw	r28, 0x20	; 32
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    1e14:	80 e2       	ldi	r24, 0x20	; 32
    1e16:	de 01       	movw	r26, r28
    1e18:	11 96       	adiw	r26, 0x01	; 1
    1e1a:	fd 01       	movw	r30, r26
    1e1c:	98 2f       	mov	r25, r24
    1e1e:	11 92       	st	Z+, r1
    1e20:	9a 95       	dec	r25
    1e22:	e9 f7       	brne	.-6      	; 0x1e1e <ht1632c_slide_in_from_left+0x20>
	memcpy(temp,ledmatrix,32);
    1e24:	e8 eb       	ldi	r30, 0xB8	; 184
    1e26:	fc e2       	ldi	r31, 0x2C	; 44
    1e28:	98 2f       	mov	r25, r24
    1e2a:	01 90       	ld	r0, Z+
    1e2c:	0d 92       	st	X+, r0
    1e2e:	9a 95       	dec	r25
    1e30:	e1 f7       	brne	.-8      	; 0x1e2a <ht1632c_slide_in_from_left+0x2c>
	memset(ledmatrix,0,32);
    1e32:	e8 eb       	ldi	r30, 0xB8	; 184
    1e34:	fc e2       	ldi	r31, 0x2C	; 44
    1e36:	df 01       	movw	r26, r30
    1e38:	1d 92       	st	X+, r1
    1e3a:	8a 95       	dec	r24
    1e3c:	e9 f7       	brne	.-6      	; 0x1e38 <ht1632c_slide_in_from_left+0x3a>
    1e3e:	8e 01       	movw	r16, r28
    1e40:	00 5e       	subi	r16, 0xE0	; 224
    1e42:	1f 4f       	sbci	r17, 0xFF	; 255
    1e44:	7e 01       	movw	r14, r28
    1e46:	b0 e1       	ldi	r27, 0x10	; 16
    1e48:	eb 0e       	add	r14, r27
    1e4a:	f1 1c       	adc	r15, r1
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	70 97       	sbiw	r30, 0x10	; 16
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2) {
		ledmatrix[0] = temp[i-16];
    1e50:	80 81       	ld	r24, Z
    1e52:	80 93 b8 2c 	sts	0x2CB8, r24
		ledmatrix[16] = temp[i];
    1e56:	f8 01       	movw	r30, r16
    1e58:	80 81       	ld	r24, Z
    1e5a:	80 93 c8 2c 	sts	0x2CC8, r24
		ht1632c_shift_right();
    1e5e:	59 df       	rcall	.-334    	; 0x1d12 <ht1632c_shift_right>
    1e60:	02 50       	subi	r16, 0x02	; 2
    1e62:	11 09       	sbc	r17, r1
	memcpy(temp,ledmatrix,32);
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 31; i >= 17; i -= 2) {
    1e64:	0e 15       	cp	r16, r14
    1e66:	1f 05       	cpc	r17, r15
    1e68:	89 f7       	brne	.-30     	; 0x1e4c <ht1632c_slide_in_from_left+0x4e>
    1e6a:	8e 01       	movw	r16, r28
    1e6c:	01 5e       	subi	r16, 0xE1	; 225
    1e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e70:	6e e1       	ldi	r22, 0x1E	; 30
    1e72:	f6 2e       	mov	r15, r22
    1e74:	f8 01       	movw	r30, r16
    1e76:	70 97       	sbiw	r30, 0x10	; 16
		ledmatrix[16] = temp[i];
		ht1632c_shift_right();
	}
	
	for (i = 30; i >= 16; i -= 2) {
		ledmatrix[0] = temp[i-16];
    1e78:	80 81       	ld	r24, Z
    1e7a:	80 93 b8 2c 	sts	0x2CB8, r24
		ledmatrix[16] = temp[i];
    1e7e:	d8 01       	movw	r26, r16
    1e80:	8c 91       	ld	r24, X
    1e82:	80 93 c8 2c 	sts	0x2CC8, r24
		if (i == 16) {
    1e86:	b0 e1       	ldi	r27, 0x10	; 16
    1e88:	fb 12       	cpse	r15, r27
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <ht1632c_slide_in_from_left+0x94>
			display_refresh_screen();
    1e8c:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
    1e90:	01 c0       	rjmp	.+2      	; 0x1e94 <ht1632c_slide_in_from_left+0x96>
		} else {
			ht1632c_shift_right();
    1e92:	3f df       	rcall	.-386    	; 0x1d12 <ht1632c_shift_right>
    1e94:	fa 94       	dec	r15
    1e96:	fa 94       	dec	r15
    1e98:	02 50       	subi	r16, 0x02	; 2
    1e9a:	11 09       	sbc	r17, r1
		ledmatrix[0] = temp[i-16];
		ledmatrix[16] = temp[i];
		ht1632c_shift_right();
	}
	
	for (i = 30; i >= 16; i -= 2) {
    1e9c:	ee e0       	ldi	r30, 0x0E	; 14
    1e9e:	fe 12       	cpse	r15, r30
    1ea0:	e9 cf       	rjmp	.-46     	; 0x1e74 <ht1632c_slide_in_from_left+0x76>
			display_refresh_screen();
		} else {
			ht1632c_shift_right();
		}
	}
}
    1ea2:	a0 96       	adiw	r28, 0x20	; 32
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	df 91       	pop	r29
    1eaa:	cf 91       	pop	r28
    1eac:	1f 91       	pop	r17
    1eae:	0f 91       	pop	r16
    1eb0:	ff 90       	pop	r15
    1eb2:	ef 90       	pop	r14
    1eb4:	08 95       	ret

00001eb6 <ht1632c_slide_in_from_right>:

void ht1632c_slide_in_from_right(void) 
{
    1eb6:	ef 92       	push	r14
    1eb8:	ff 92       	push	r15
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	a0 97       	sbiw	r28, 0x20	; 32
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    1ecc:	80 e2       	ldi	r24, 0x20	; 32
    1ece:	de 01       	movw	r26, r28
    1ed0:	11 96       	adiw	r26, 0x01	; 1
    1ed2:	fd 01       	movw	r30, r26
    1ed4:	98 2f       	mov	r25, r24
    1ed6:	11 92       	st	Z+, r1
    1ed8:	9a 95       	dec	r25
    1eda:	e9 f7       	brne	.-6      	; 0x1ed6 <ht1632c_slide_in_from_right+0x20>
	memcpy(temp,ledmatrix,32);
    1edc:	e8 eb       	ldi	r30, 0xB8	; 184
    1ede:	fc e2       	ldi	r31, 0x2C	; 44
    1ee0:	98 2f       	mov	r25, r24
    1ee2:	01 90       	ld	r0, Z+
    1ee4:	0d 92       	st	X+, r0
    1ee6:	9a 95       	dec	r25
    1ee8:	e1 f7       	brne	.-8      	; 0x1ee2 <ht1632c_slide_in_from_right+0x2c>
	memset(ledmatrix,0,32);
    1eea:	e8 eb       	ldi	r30, 0xB8	; 184
    1eec:	fc e2       	ldi	r31, 0x2C	; 44
    1eee:	df 01       	movw	r26, r30
    1ef0:	1d 92       	st	X+, r1
    1ef2:	8a 95       	dec	r24
    1ef4:	e9 f7       	brne	.-6      	; 0x1ef0 <ht1632c_slide_in_from_right+0x3a>
    1ef6:	8e 01       	movw	r16, r28
    1ef8:	0f 5e       	subi	r16, 0xEF	; 239
    1efa:	1f 4f       	sbci	r17, 0xFF	; 255
    1efc:	7e 01       	movw	r14, r28
    1efe:	b1 e2       	ldi	r27, 0x21	; 33
    1f00:	eb 0e       	add	r14, r27
    1f02:	f1 1c       	adc	r15, r1
    1f04:	f8 01       	movw	r30, r16
    1f06:	70 97       	sbiw	r30, 0x10	; 16
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
	{
		ledmatrix[15] = temp[i];
    1f08:	80 81       	ld	r24, Z
    1f0a:	80 93 c7 2c 	sts	0x2CC7, r24
		ledmatrix[31] = temp[i+16];
    1f0e:	f8 01       	movw	r30, r16
    1f10:	80 81       	ld	r24, Z
    1f12:	80 93 d7 2c 	sts	0x2CD7, r24
		ht1632c_shift_left();
    1f16:	c3 de       	rcall	.-634    	; 0x1c9e <ht1632c_shift_left>
    1f18:	0e 5f       	subi	r16, 0xFE	; 254
    1f1a:	1f 4f       	sbci	r17, 0xFF	; 255
	memcpy(temp,ledmatrix,32);
	memset(ledmatrix,0,32);
	
	int8_t i;
	
	for (i = 0; i <= 14; i += 2)
    1f1c:	0e 15       	cp	r16, r14
    1f1e:	1f 05       	cpc	r17, r15
    1f20:	89 f7       	brne	.-30     	; 0x1f04 <ht1632c_slide_in_from_right+0x4e>
    1f22:	8e 01       	movw	r16, r28
    1f24:	0e 5e       	subi	r16, 0xEE	; 238
    1f26:	1f 4f       	sbci	r17, 0xFF	; 255
    1f28:	ff 24       	eor	r15, r15
    1f2a:	f3 94       	inc	r15
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	70 97       	sbiw	r30, 0x10	; 16
		ht1632c_shift_left();
	}
	
	for (i = 1; i <= 15; i += 2)
	{
		ledmatrix[15] = temp[i];
    1f30:	80 81       	ld	r24, Z
    1f32:	80 93 c7 2c 	sts	0x2CC7, r24
		ledmatrix[31] = temp[i+16];
    1f36:	d8 01       	movw	r26, r16
    1f38:	8c 91       	ld	r24, X
    1f3a:	80 93 d7 2c 	sts	0x2CD7, r24
	
		if (i == 15) {
    1f3e:	bf e0       	ldi	r27, 0x0F	; 15
    1f40:	fb 12       	cpse	r15, r27
    1f42:	03 c0       	rjmp	.+6      	; 0x1f4a <ht1632c_slide_in_from_right+0x94>
			display_refresh_screen();
    1f44:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <ht1632c_slide_in_from_right+0x96>
		} else {
			ht1632c_shift_left();
    1f4a:	a9 de       	rcall	.-686    	; 0x1c9e <ht1632c_shift_left>
    1f4c:	f3 94       	inc	r15
    1f4e:	f3 94       	inc	r15
    1f50:	0e 5f       	subi	r16, 0xFE	; 254
    1f52:	1f 4f       	sbci	r17, 0xFF	; 255
		ledmatrix[15] = temp[i];
		ledmatrix[31] = temp[i+16];
		ht1632c_shift_left();
	}
	
	for (i = 1; i <= 15; i += 2)
    1f54:	e1 e1       	ldi	r30, 0x11	; 17
    1f56:	fe 12       	cpse	r15, r30
    1f58:	e9 cf       	rjmp	.-46     	; 0x1f2c <ht1632c_slide_in_from_right+0x76>
			display_refresh_screen();
		} else {
			ht1632c_shift_left();
		}
	}
}
    1f5a:	a0 96       	adiw	r28, 0x20	; 32
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	ff 90       	pop	r15
    1f6a:	ef 90       	pop	r14
    1f6c:	08 95       	ret

00001f6e <ht1632c_slide_in_from_bottom>:

void ht1632c_slide_in_from_bottom(void) 
{
    1f6e:	4f 92       	push	r4
    1f70:	5f 92       	push	r5
    1f72:	7f 92       	push	r7
    1f74:	8f 92       	push	r8
    1f76:	9f 92       	push	r9
    1f78:	af 92       	push	r10
    1f7a:	bf 92       	push	r11
    1f7c:	cf 92       	push	r12
    1f7e:	df 92       	push	r13
    1f80:	ef 92       	push	r14
    1f82:	ff 92       	push	r15
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	a0 97       	sbiw	r28, 0x20	; 32
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    1f96:	80 e2       	ldi	r24, 0x20	; 32
    1f98:	de 01       	movw	r26, r28
    1f9a:	11 96       	adiw	r26, 0x01	; 1
    1f9c:	fd 01       	movw	r30, r26
    1f9e:	98 2f       	mov	r25, r24
    1fa0:	11 92       	st	Z+, r1
    1fa2:	9a 95       	dec	r25
    1fa4:	e9 f7       	brne	.-6      	; 0x1fa0 <ht1632c_slide_in_from_bottom+0x32>
	memcpy(temp,ledmatrix,32);
    1fa6:	e8 eb       	ldi	r30, 0xB8	; 184
    1fa8:	fc e2       	ldi	r31, 0x2C	; 44
    1faa:	98 2f       	mov	r25, r24
    1fac:	01 90       	ld	r0, Z+
    1fae:	0d 92       	st	X+, r0
    1fb0:	9a 95       	dec	r25
    1fb2:	e1 f7       	brne	.-8      	; 0x1fac <ht1632c_slide_in_from_bottom+0x3e>
	memset(ledmatrix,0,32);
    1fb4:	e8 eb       	ldi	r30, 0xB8	; 184
    1fb6:	fc e2       	ldi	r31, 0x2C	; 44
    1fb8:	df 01       	movw	r26, r30
    1fba:	1d 92       	st	X+, r1
    1fbc:	8a 95       	dec	r24
    1fbe:	e9 f7       	brne	.-6      	; 0x1fba <ht1632c_slide_in_from_bottom+0x4c>
    1fc0:	00 e0       	ldi	r16, 0x00	; 0
    1fc2:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
			if (row < 8) {
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
    1fc4:	70 e8       	ldi	r23, 0x80	; 128
    1fc6:	e7 2e       	mov	r14, r23
    1fc8:	f1 2c       	mov	r15, r1
    1fca:	ef e0       	ldi	r30, 0x0F	; 15
    1fcc:	ae 2e       	mov	r10, r30
    1fce:	b1 2c       	mov	r11, r1
    1fd0:	f7 e0       	ldi	r31, 0x07	; 7
    1fd2:	cf 2e       	mov	r12, r31
    1fd4:	d1 2c       	mov	r13, r1
    1fd6:	a7 01       	movw	r20, r14
    1fd8:	00 2e       	mov	r0, r16
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <ht1632c_slide_in_from_bottom+0x72>
    1fdc:	55 95       	asr	r21
    1fde:	47 95       	ror	r20
    1fe0:	0a 94       	dec	r0
    1fe2:	e2 f7       	brpl	.-8      	; 0x1fdc <ht1632c_slide_in_from_bottom+0x6e>
    1fe4:	98 01       	movw	r18, r16
    1fe6:	28 50       	subi	r18, 0x08	; 8
    1fe8:	31 09       	sbc	r19, r1
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
    1fea:	d7 01       	movw	r26, r14
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <ht1632c_slide_in_from_bottom+0x84>
    1fee:	b5 95       	asr	r27
    1ff0:	a7 95       	ror	r26
    1ff2:	2a 95       	dec	r18
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <ht1632c_slide_in_from_bottom+0x80>
    1ff6:	9d 01       	movw	r18, r26
    1ff8:	e8 ec       	ldi	r30, 0xC8	; 200
    1ffa:	fc e2       	ldi	r31, 0x2C	; 44
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	41 96       	adiw	r24, 0x11	; 17
    2000:	2c 01       	movw	r4, r24
    2002:	70 2e       	mov	r7, r16
    2004:	b5 01       	movw	r22, r10
    2006:	60 1b       	sub	r22, r16
    2008:	71 0b       	sbc	r23, r17
    200a:	46 01       	movw	r8, r12
    200c:	80 1a       	sub	r8, r16
    200e:	91 0a       	sbc	r9, r17
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
			if (row < 8) {
    2010:	b7 e0       	ldi	r27, 0x07	; 7
    2012:	b7 15       	cp	r27, r7
    2014:	70 f0       	brcs	.+28     	; 0x2032 <ht1632c_slide_in_from_bottom+0xc4>
    2016:	c2 01       	movw	r24, r4
    2018:	40 97       	sbiw	r24, 0x10	; 16
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
    201a:	dc 01       	movw	r26, r24
    201c:	8c 91       	ld	r24, X
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	84 23       	and	r24, r20
    2022:	95 23       	and	r25, r21
    2024:	08 2c       	mov	r0, r8
    2026:	02 c0       	rjmp	.+4      	; 0x202c <ht1632c_slide_in_from_bottom+0xbe>
    2028:	95 95       	asr	r25
    202a:	87 95       	ror	r24
    202c:	0a 94       	dec	r0
    202e:	e2 f7       	brpl	.-8      	; 0x2028 <ht1632c_slide_in_from_bottom+0xba>
    2030:	0b c0       	rjmp	.+22     	; 0x2048 <ht1632c_slide_in_from_bottom+0xda>
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
    2032:	d2 01       	movw	r26, r4
    2034:	8c 91       	ld	r24, X
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	82 23       	and	r24, r18
    203a:	93 23       	and	r25, r19
    203c:	06 2e       	mov	r0, r22
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <ht1632c_slide_in_from_bottom+0xd6>
    2040:	95 95       	asr	r25
    2042:	87 95       	ror	r24
    2044:	0a 94       	dec	r0
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <ht1632c_slide_in_from_bottom+0xd2>
    2048:	90 81       	ld	r25, Z
    204a:	98 2b       	or	r25, r24
    204c:	90 83       	st	Z, r25
    204e:	31 96       	adiw	r30, 0x01	; 1
    2050:	bf ef       	ldi	r27, 0xFF	; 255
    2052:	4b 1a       	sub	r4, r27
    2054:	5b 0a       	sbc	r5, r27
	
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
		for (col = 0; col < 15; col++) {
    2056:	8c e2       	ldi	r24, 0x2C	; 44
    2058:	e7 3d       	cpi	r30, 0xD7	; 215
    205a:	f8 07       	cpc	r31, r24
    205c:	c9 f6       	brne	.-78     	; 0x2010 <ht1632c_slide_in_from_bottom+0xa2>
				ledmatrix[col+16] |= (temp[col] & (0x80 >> row)) >> (7-row);
				} else {
				ledmatrix[col+16] |= (temp[col+16] & (0x80 >> (row-8))) >> (15-row);
			}
		}
		if (row < 15) {
    205e:	9f e0       	ldi	r25, 0x0F	; 15
    2060:	79 16       	cp	r7, r25
    2062:	11 f0       	breq	.+4      	; 0x2068 <ht1632c_slide_in_from_bottom+0xfa>
			ht1632c_shift_up();
    2064:	90 de       	rcall	.-736    	; 0x1d86 <ht1632c_shift_up>
    2066:	02 c0       	rjmp	.+4      	; 0x206c <ht1632c_slide_in_from_bottom+0xfe>
			} else {
			display_refresh_screen();
    2068:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
    206c:	0f 5f       	subi	r16, 0xFF	; 255
    206e:	1f 4f       	sbci	r17, 0xFF	; 255
	memset(ledmatrix,0,32);
	
	uint8_t col;
	uint8_t row;
	
	for (row = 0; row < 16; row++) {
    2070:	00 31       	cpi	r16, 0x10	; 16
    2072:	11 05       	cpc	r17, r1
    2074:	09 f0       	breq	.+2      	; 0x2078 <ht1632c_slide_in_from_bottom+0x10a>
    2076:	af cf       	rjmp	.-162    	; 0x1fd6 <ht1632c_slide_in_from_bottom+0x68>
			ht1632c_shift_up();
			} else {
			display_refresh_screen();
		}
	}
}
    2078:	a0 96       	adiw	r28, 0x20	; 32
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	ff 90       	pop	r15
    2088:	ef 90       	pop	r14
    208a:	df 90       	pop	r13
    208c:	cf 90       	pop	r12
    208e:	bf 90       	pop	r11
    2090:	af 90       	pop	r10
    2092:	9f 90       	pop	r9
    2094:	8f 90       	pop	r8
    2096:	7f 90       	pop	r7
    2098:	5f 90       	pop	r5
    209a:	4f 90       	pop	r4
    209c:	08 95       	ret

0000209e <ht1632c_slide_in_from_top>:

void ht1632c_slide_in_from_top(void) 
{
    209e:	6f 92       	push	r6
    20a0:	7f 92       	push	r7
    20a2:	8f 92       	push	r8
    20a4:	9f 92       	push	r9
    20a6:	af 92       	push	r10
    20a8:	bf 92       	push	r11
    20aa:	cf 92       	push	r12
    20ac:	df 92       	push	r13
    20ae:	ef 92       	push	r14
    20b0:	ff 92       	push	r15
    20b2:	0f 93       	push	r16
    20b4:	1f 93       	push	r17
    20b6:	cf 93       	push	r28
    20b8:	df 93       	push	r29
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
    20be:	a0 97       	sbiw	r28, 0x20	; 32
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	de bf       	out	0x3e, r29	; 62
	uint8_t temp[32];
	
	memset(temp,0,32);
    20c4:	80 e2       	ldi	r24, 0x20	; 32
    20c6:	de 01       	movw	r26, r28
    20c8:	11 96       	adiw	r26, 0x01	; 1
    20ca:	fd 01       	movw	r30, r26
    20cc:	98 2f       	mov	r25, r24
    20ce:	11 92       	st	Z+, r1
    20d0:	9a 95       	dec	r25
    20d2:	e9 f7       	brne	.-6      	; 0x20ce <ht1632c_slide_in_from_top+0x30>
	memcpy(temp,ledmatrix,32);
    20d4:	e8 eb       	ldi	r30, 0xB8	; 184
    20d6:	fc e2       	ldi	r31, 0x2C	; 44
    20d8:	98 2f       	mov	r25, r24
    20da:	01 90       	ld	r0, Z+
    20dc:	0d 92       	st	X+, r0
    20de:	9a 95       	dec	r25
    20e0:	e1 f7       	brne	.-8      	; 0x20da <ht1632c_slide_in_from_top+0x3c>
	memset(ledmatrix,0,32);
    20e2:	e8 eb       	ldi	r30, 0xB8	; 184
    20e4:	fc e2       	ldi	r31, 0x2C	; 44
    20e6:	df 01       	movw	r26, r30
    20e8:	1d 92       	st	X+, r1
    20ea:	8a 95       	dec	r24
    20ec:	e9 f7       	brne	.-6      	; 0x20e8 <ht1632c_slide_in_from_top+0x4a>
    20ee:	0f e0       	ldi	r16, 0x0F	; 15
    20f0:	10 e0       	ldi	r17, 0x00	; 0
    20f2:	af e0       	ldi	r26, 0x0F	; 15
    20f4:	aa 2e       	mov	r10, r26
    20f6:	b1 2c       	mov	r11, r1
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
			if (row > 7) {
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
    20f8:	ee 24       	eor	r14, r14
    20fa:	e3 94       	inc	r14
    20fc:	f1 2c       	mov	r15, r1
    20fe:	87 e0       	ldi	r24, 0x07	; 7
    2100:	c8 2e       	mov	r12, r24
    2102:	d1 2c       	mov	r13, r1
    2104:	a5 01       	movw	r20, r10
    2106:	40 1b       	sub	r20, r16
    2108:	51 0b       	sbc	r21, r17
    210a:	d7 01       	movw	r26, r14
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <ht1632c_slide_in_from_top+0x74>
    210e:	aa 0f       	add	r26, r26
    2110:	bb 1f       	adc	r27, r27
    2112:	4a 95       	dec	r20
    2114:	e2 f7       	brpl	.-8      	; 0x210e <ht1632c_slide_in_from_top+0x70>
    2116:	ad 01       	movw	r20, r26
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
    2118:	90 2e       	mov	r9, r16
    211a:	96 01       	movw	r18, r12
    211c:	20 1b       	sub	r18, r16
    211e:	31 0b       	sbc	r19, r17
    2120:	f7 01       	movw	r30, r14
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <ht1632c_slide_in_from_top+0x8a>
    2124:	ee 0f       	add	r30, r30
    2126:	ff 1f       	adc	r31, r31
    2128:	2a 95       	dec	r18
    212a:	e2 f7       	brpl	.-8      	; 0x2124 <ht1632c_slide_in_from_top+0x86>
    212c:	9f 01       	movw	r18, r30
    212e:	e8 eb       	ldi	r30, 0xB8	; 184
    2130:	fc e2       	ldi	r31, 0x2C	; 44
    2132:	ce 01       	movw	r24, r28
    2134:	41 96       	adiw	r24, 0x11	; 17
    2136:	3c 01       	movw	r6, r24
    2138:	80 2e       	mov	r8, r16
    213a:	b8 01       	movw	r22, r16
    213c:	68 50       	subi	r22, 0x08	; 8
    213e:	71 09       	sbc	r23, r1
	int8_t col;
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
			if (row > 7) {
    2140:	b7 e0       	ldi	r27, 0x07	; 7
    2142:	b8 15       	cp	r27, r8
    2144:	5c f4       	brge	.+22     	; 0x215c <ht1632c_slide_in_from_top+0xbe>
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
    2146:	d3 01       	movw	r26, r6
    2148:	8c 91       	ld	r24, X
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	84 23       	and	r24, r20
    214e:	95 23       	and	r25, r21
    2150:	06 2e       	mov	r0, r22
    2152:	01 c0       	rjmp	.+2      	; 0x2156 <ht1632c_slide_in_from_top+0xb8>
    2154:	88 0f       	add	r24, r24
    2156:	0a 94       	dec	r0
    2158:	ea f7       	brpl	.-6      	; 0x2154 <ht1632c_slide_in_from_top+0xb6>
    215a:	0c c0       	rjmp	.+24     	; 0x2174 <ht1632c_slide_in_from_top+0xd6>
    215c:	c3 01       	movw	r24, r6
    215e:	40 97       	sbiw	r24, 0x10	; 16
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
    2160:	dc 01       	movw	r26, r24
    2162:	8c 91       	ld	r24, X
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	82 23       	and	r24, r18
    2168:	93 23       	and	r25, r19
    216a:	09 2c       	mov	r0, r9
    216c:	01 c0       	rjmp	.+2      	; 0x2170 <ht1632c_slide_in_from_top+0xd2>
    216e:	88 0f       	add	r24, r24
    2170:	0a 94       	dec	r0
    2172:	ea f7       	brpl	.-6      	; 0x216e <ht1632c_slide_in_from_top+0xd0>
    2174:	90 81       	ld	r25, Z
    2176:	98 2b       	or	r25, r24
    2178:	90 83       	st	Z, r25
    217a:	31 96       	adiw	r30, 0x01	; 1
    217c:	bf ef       	ldi	r27, 0xFF	; 255
    217e:	6b 1a       	sub	r6, r27
    2180:	7b 0a       	sbc	r7, r27
	
	int8_t col;
	int8_t row;
	
	for (row = 15; row > -1; row--) {
		for (col = 0; col < 15; col++) {
    2182:	8c e2       	ldi	r24, 0x2C	; 44
    2184:	e7 3c       	cpi	r30, 0xC7	; 199
    2186:	f8 07       	cpc	r31, r24
    2188:	d9 f6       	brne	.-74     	; 0x2140 <ht1632c_slide_in_from_top+0xa2>
				ledmatrix[col] |= (temp[col+16] & (0x01 << (15-row))) << (row-8);
			} else {
				ledmatrix[col] |= (temp[col] & (0x01 << (7-row))) << (row);
			}
		}
		if (row > 0) {
    218a:	88 20       	and	r8, r8
    218c:	11 f0       	breq	.+4      	; 0x2192 <ht1632c_slide_in_from_top+0xf4>
			ht1632c_shift_down();
    218e:	19 de       	rcall	.-974    	; 0x1dc2 <ht1632c_shift_down>
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <ht1632c_slide_in_from_top+0xf8>
		} else {
			display_refresh_screen();
    2192:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
    2196:	01 50       	subi	r16, 0x01	; 1
    2198:	11 09       	sbc	r17, r1
    219a:	08 f0       	brcs	.+2      	; 0x219e <ht1632c_slide_in_from_top+0x100>
    219c:	b3 cf       	rjmp	.-154    	; 0x2104 <ht1632c_slide_in_from_top+0x66>
		}
	}
}
    219e:	a0 96       	adiw	r28, 0x20	; 32
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	df 90       	pop	r13
    21b2:	cf 90       	pop	r12
    21b4:	bf 90       	pop	r11
    21b6:	af 90       	pop	r10
    21b8:	9f 90       	pop	r9
    21ba:	8f 90       	pop	r8
    21bc:	7f 90       	pop	r7
    21be:	6f 90       	pop	r6
    21c0:	08 95       	ret

000021c2 <ht1632c_print_buffer>:

/*------------------------------PRINT FUNCTIONS------------------------------*/

void ht1632c_print_buffer(char *buffer, uint16_t length) 
{
    21c2:	ef 92       	push	r14
    21c4:	ff 92       	push	r15
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	8b 01       	movw	r16, r22
    21d0:	ec 01       	movw	r28, r24
    21d2:	7c 01       	movw	r14, r24
    21d4:	e6 0e       	add	r14, r22
    21d6:	f7 1e       	adc	r15, r23
	uint16_t i;
	
	//Shift buffer into visible area
	for (i = 0; i < (length); i++) {
    21d8:	ce 15       	cp	r28, r14
    21da:	df 05       	cpc	r29, r15
    21dc:	c1 f0       	breq	.+48     	; 0x220e <ht1632c_print_buffer+0x4c>
		ht1632c_shift_left();
    21de:	5f dd       	rcall	.-1346   	; 0x1c9e <ht1632c_shift_left>
    21e0:	fe 01       	movw	r30, r28
		ledmatrix[15] = buffer[i] >> 3;
    21e2:	89 91       	ld	r24, Y+
    21e4:	86 95       	lsr	r24
    21e6:	86 95       	lsr	r24
    21e8:	86 95       	lsr	r24
    21ea:	80 93 c7 2c 	sts	0x2CC7, r24
		ledmatrix[31] = buffer[i] << 5;
    21ee:	80 81       	ld	r24, Z
    21f0:	82 95       	swap	r24
    21f2:	88 0f       	add	r24, r24
    21f4:	80 7e       	andi	r24, 0xE0	; 224
    21f6:	80 93 d7 2c 	sts	0x2CD7, r24
    21fa:	2f ef       	ldi	r18, 0xFF	; 255
    21fc:	80 e7       	ldi	r24, 0x70	; 112
    21fe:	92 e0       	ldi	r25, 0x02	; 2
    2200:	21 50       	subi	r18, 0x01	; 1
    2202:	80 40       	sbci	r24, 0x00	; 0
    2204:	90 40       	sbci	r25, 0x00	; 0
    2206:	e1 f7       	brne	.-8      	; 0x2200 <ht1632c_print_buffer+0x3e>
    2208:	00 c0       	rjmp	.+0      	; 0x220a <ht1632c_print_buffer+0x48>
    220a:	00 00       	nop
    220c:	e5 cf       	rjmp	.-54     	; 0x21d8 <ht1632c_print_buffer+0x16>
		_delay_ms(25);
	}
	
	//Shift buffer out of visible area
	if ((length/4) < 15) {
    220e:	0c 33       	cpi	r16, 0x3C	; 60
    2210:	11 05       	cpc	r17, r1
    2212:	38 f0       	brcs	.+14     	; 0x2222 <ht1632c_print_buffer+0x60>
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
			_delay_ms(25);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
    2214:	16 95       	lsr	r17
    2216:	07 95       	ror	r16
    2218:	16 95       	lsr	r17
    221a:	07 95       	ror	r16
    221c:	c0 e0       	ldi	r28, 0x00	; 0
    221e:	d0 e0       	ldi	r29, 0x00	; 0
    2220:	10 c0       	rjmp	.+32     	; 0x2242 <ht1632c_print_buffer+0x80>
		ledmatrix[31] = buffer[i] << 5;
		_delay_ms(25);
	}
	
	//Shift buffer out of visible area
	if ((length/4) < 15) {
    2222:	ce e1       	ldi	r28, 0x1E	; 30
    2224:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
    2226:	3b dd       	rcall	.-1418   	; 0x1c9e <ht1632c_shift_left>
    2228:	2f ef       	ldi	r18, 0xFF	; 255
    222a:	80 e7       	ldi	r24, 0x70	; 112
    222c:	92 e0       	ldi	r25, 0x02	; 2
    222e:	21 50       	subi	r18, 0x01	; 1
    2230:	80 40       	sbci	r24, 0x00	; 0
    2232:	90 40       	sbci	r25, 0x00	; 0
    2234:	e1 f7       	brne	.-8      	; 0x222e <ht1632c_print_buffer+0x6c>
    2236:	00 c0       	rjmp	.+0      	; 0x2238 <ht1632c_print_buffer+0x76>
    2238:	00 00       	nop
    223a:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(25);
	}
	
	//Shift buffer out of visible area
	if ((length/4) < 15) {
		for (i = 0; i < 30; i++) {
    223c:	20 97       	sbiw	r28, 0x00	; 0
    223e:	99 f7       	brne	.-26     	; 0x2226 <ht1632c_print_buffer+0x64>
    2240:	0e c0       	rjmp	.+28     	; 0x225e <ht1632c_print_buffer+0x9c>
			ht1632c_shift_left();
			_delay_ms(25);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
			ht1632c_shift_left();
    2242:	2d dd       	rcall	.-1446   	; 0x1c9e <ht1632c_shift_left>
    2244:	2f ef       	ldi	r18, 0xFF	; 255
    2246:	80 e7       	ldi	r24, 0x70	; 112
    2248:	92 e0       	ldi	r25, 0x02	; 2
    224a:	21 50       	subi	r18, 0x01	; 1
    224c:	80 40       	sbci	r24, 0x00	; 0
    224e:	90 40       	sbci	r25, 0x00	; 0
    2250:	e1 f7       	brne	.-8      	; 0x224a <ht1632c_print_buffer+0x88>
    2252:	00 c0       	rjmp	.+0      	; 0x2254 <ht1632c_print_buffer+0x92>
    2254:	00 00       	nop
		for (i = 0; i < 30; i++) {
			ht1632c_shift_left();
			_delay_ms(25);
		}
	} else {
		for (i = 0; i < (length/4); i++) {
    2256:	21 96       	adiw	r28, 0x01	; 1
    2258:	c0 17       	cp	r28, r16
    225a:	d1 07       	cpc	r29, r17
    225c:	91 f7       	brne	.-28     	; 0x2242 <ht1632c_print_buffer+0x80>
			ht1632c_shift_left();
			_delay_ms(25);
		}
	}
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	1f 91       	pop	r17
    2264:	0f 91       	pop	r16
    2266:	ff 90       	pop	r15
    2268:	ef 90       	pop	r14
    226a:	08 95       	ret

0000226c <btn_setup>:
void btn_top_setup(void) 
{	
	PORTC.DIRCLR   = TOP_BUTTON;
	PORTC.PIN2CTRL |= PORT_OPC_PULLDOWN_gc | PORT_ISC_RISING_gc;
	PORTC.INT0MASK |= TOP_BUTTON;
	PORTC.INTCTRL  |= PORT_INT0LVL_HI_gc;
    226c:	90 ee       	ldi	r25, 0xE0	; 224
    226e:	90 93 02 06 	sts	0x0602, r25
    2272:	91 e0       	ldi	r25, 0x01	; 1
    2274:	90 93 22 06 	sts	0x0622, r25
    2278:	90 91 15 06 	lds	r25, 0x0615
    227c:	9a 61       	ori	r25, 0x1A	; 26
    227e:	90 93 15 06 	sts	0x0615, r25
    2282:	90 91 16 06 	lds	r25, 0x0616
    2286:	9a 61       	ori	r25, 0x1A	; 26
    2288:	90 93 16 06 	sts	0x0616, r25
    228c:	90 91 17 06 	lds	r25, 0x0617
    2290:	9a 61       	ori	r25, 0x1A	; 26
    2292:	90 93 17 06 	sts	0x0617, r25
    2296:	90 91 30 06 	lds	r25, 0x0630
    229a:	9a 61       	ori	r25, 0x1A	; 26
    229c:	90 93 30 06 	sts	0x0630, r25
    22a0:	88 23       	and	r24, r24
    22a2:	99 f0       	breq	.+38     	; 0x22ca <btn_setup+0x5e>
    22a4:	80 91 0a 06 	lds	r24, 0x060A
    22a8:	80 6e       	ori	r24, 0xE0	; 224
    22aa:	80 93 0a 06 	sts	0x060A, r24
    22ae:	80 91 2a 06 	lds	r24, 0x062A
    22b2:	81 60       	ori	r24, 0x01	; 1
    22b4:	80 93 2a 06 	sts	0x062A, r24
    22b8:	80 91 09 06 	lds	r24, 0x0609
    22bc:	83 60       	ori	r24, 0x03	; 3
    22be:	80 93 09 06 	sts	0x0609, r24
    22c2:	80 91 29 06 	lds	r24, 0x0629
    22c6:	83 60       	ori	r24, 0x03	; 3
    22c8:	12 c0       	rjmp	.+36     	; 0x22ee <btn_setup+0x82>
    22ca:	80 91 0a 06 	lds	r24, 0x060A
    22ce:	8f 71       	andi	r24, 0x1F	; 31
    22d0:	80 93 0a 06 	sts	0x060A, r24
    22d4:	80 91 2a 06 	lds	r24, 0x062A
    22d8:	8e 7f       	andi	r24, 0xFE	; 254
    22da:	80 93 2a 06 	sts	0x062A, r24
    22de:	80 91 09 06 	lds	r24, 0x0609
    22e2:	8c 7f       	andi	r24, 0xFC	; 252
    22e4:	80 93 09 06 	sts	0x0609, r24
    22e8:	80 91 29 06 	lds	r24, 0x0629
    22ec:	8c 7f       	andi	r24, 0xFC	; 252
    22ee:	80 93 29 06 	sts	0x0629, r24
    22f2:	08 95       	ret

000022f4 <btn_turn_on_leds>:
    22f4:	90 e1       	ldi	r25, 0x10	; 16
    22f6:	90 93 01 06 	sts	0x0601, r25
    22fa:	88 23       	and	r24, r24
    22fc:	19 f0       	breq	.+6      	; 0x2304 <btn_turn_on_leds+0x10>
    22fe:	90 93 06 06 	sts	0x0606, r25
    2302:	08 95       	ret
    2304:	90 93 05 06 	sts	0x0605, r25
    2308:	08 95       	ret

0000230a <btn_si114x_enable_interrupt>:
    230a:	e0 e0       	ldi	r30, 0x00	; 0
    230c:	f6 e0       	ldi	r31, 0x06	; 6
    230e:	84 e0       	ldi	r24, 0x04	; 4
    2310:	82 83       	std	Z+2, r24	; 0x02
    2312:	82 89       	ldd	r24, Z+18	; 0x12
    2314:	82 60       	ori	r24, 0x02	; 2
    2316:	82 8b       	std	Z+18, r24	; 0x12
    2318:	83 85       	ldd	r24, Z+11	; 0x0b
    231a:	84 60       	ori	r24, 0x04	; 4
    231c:	83 87       	std	Z+11, r24	; 0x0b
    231e:	81 85       	ldd	r24, Z+9	; 0x09
    2320:	8c 60       	ori	r24, 0x0C	; 12
    2322:	81 87       	std	Z+9, r24	; 0x09
    2324:	08 95       	ret

00002326 <btn_disable_si114x_interrupt>:
    2326:	e0 e0       	ldi	r30, 0x00	; 0
    2328:	f6 e0       	ldi	r31, 0x06	; 6
    232a:	84 e0       	ldi	r24, 0x04	; 4
    232c:	82 83       	std	Z+2, r24	; 0x02
    232e:	82 89       	ldd	r24, Z+18	; 0x12
    2330:	8d 7f       	andi	r24, 0xFD	; 253
    2332:	82 8b       	std	Z+18, r24	; 0x12
    2334:	83 85       	ldd	r24, Z+11	; 0x0b
    2336:	8b 7f       	andi	r24, 0xFB	; 251
    2338:	83 87       	std	Z+11, r24	; 0x0b
    233a:	81 85       	ldd	r24, Z+9	; 0x09
    233c:	83 7f       	andi	r24, 0xF3	; 243
    233e:	81 87       	std	Z+9, r24	; 0x09
    2340:	08 95       	ret

00002342 <btn_check_press>:

button_t btn_check_press(void) 
{	
	button_t btn_mask = NO_BTN;
	
	if (!(PORTA.IN & BUTTON1)) {
    2342:	80 91 08 06 	lds	r24, 0x0608
    2346:	85 fb       	bst	r24, 5
    2348:	88 27       	eor	r24, r24
    234a:	80 f9       	bld	r24, 0
    234c:	91 e0       	ldi	r25, 0x01	; 1
    234e:	89 27       	eor	r24, r25
		btn_mask |= BTN1;
	}
	if (!(PORTA.IN & BUTTON2)) {
    2350:	90 91 08 06 	lds	r25, 0x0608
    2354:	96 ff       	sbrs	r25, 6
		btn_mask |= BTN2;
    2356:	82 60       	ori	r24, 0x02	; 2
	}
	if (!(PORTA.IN & BUTTON3)) {
    2358:	90 91 08 06 	lds	r25, 0x0608
    235c:	97 ff       	sbrs	r25, 7
		btn_mask |= BTN3;
    235e:	83 e0       	ldi	r24, 0x03	; 3
	} 
	if (!(PORTB.IN & BUTTON4)) {
    2360:	90 91 28 06 	lds	r25, 0x0628
    2364:	90 ff       	sbrs	r25, 0
		btn_mask |= BTN4;
    2366:	84 60       	ori	r24, 0x04	; 4
	}
	return btn_mask;
}
    2368:	08 95       	ret

0000236a <__vector_66>:

ISR(PORTA_INT0_vect) 
{
    236a:	1f 92       	push	r1
    236c:	0f 92       	push	r0
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	0f 92       	push	r0
    2372:	11 24       	eor	r1, r1
    2374:	08 b6       	in	r0, 0x38	; 56
    2376:	0f 92       	push	r0
    2378:	18 be       	out	0x38, r1	; 56
    237a:	09 b6       	in	r0, 0x39	; 57
    237c:	0f 92       	push	r0
    237e:	19 be       	out	0x39, r1	; 57
    2380:	0b b6       	in	r0, 0x3b	; 59
    2382:	0f 92       	push	r0
    2384:	1b be       	out	0x3b, r1	; 59
    2386:	2f 93       	push	r18
    2388:	3f 93       	push	r19
    238a:	4f 93       	push	r20
    238c:	5f 93       	push	r21
    238e:	6f 93       	push	r22
    2390:	7f 93       	push	r23
    2392:	8f 93       	push	r24
    2394:	9f 93       	push	r25
    2396:	af 93       	push	r26
    2398:	bf 93       	push	r27
    239a:	ef 93       	push	r30
    239c:	ff 93       	push	r31
	btn_status = btn_check_press();
    239e:	d1 df       	rcall	.-94     	; 0x2342 <btn_check_press>
    23a0:	80 93 b5 2c 	sts	0x2CB5, r24
#ifdef DEBUG_ON
	printf("DEBUG: BTN: %d \r\n",btn_status);
    23a4:	80 91 b5 2c 	lds	r24, 0x2CB5
    23a8:	1f 92       	push	r1
    23aa:	8f 93       	push	r24
    23ac:	8b e6       	ldi	r24, 0x6B	; 107
    23ae:	94 e2       	ldi	r25, 0x24	; 36
    23b0:	9f 93       	push	r25
    23b2:	8f 93       	push	r24
    23b4:	0e 94 56 54 	call	0xa8ac	; 0xa8ac <printf>
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
#endif
}
    23c0:	ff 91       	pop	r31
    23c2:	ef 91       	pop	r30
    23c4:	bf 91       	pop	r27
    23c6:	af 91       	pop	r26
    23c8:	9f 91       	pop	r25
    23ca:	8f 91       	pop	r24
    23cc:	7f 91       	pop	r23
    23ce:	6f 91       	pop	r22
    23d0:	5f 91       	pop	r21
    23d2:	4f 91       	pop	r20
    23d4:	3f 91       	pop	r19
    23d6:	2f 91       	pop	r18
    23d8:	0f 90       	pop	r0
    23da:	0b be       	out	0x3b, r0	; 59
    23dc:	0f 90       	pop	r0
    23de:	09 be       	out	0x39, r0	; 57
    23e0:	0f 90       	pop	r0
    23e2:	08 be       	out	0x38, r0	; 56
    23e4:	0f 90       	pop	r0
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	0f 90       	pop	r0
    23ea:	1f 90       	pop	r1
    23ec:	18 95       	reti

000023ee <__vector_34>:

ISR(PORTB_INT0_vect) 
{
    23ee:	1f 92       	push	r1
    23f0:	0f 92       	push	r0
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	0f 92       	push	r0
    23f6:	11 24       	eor	r1, r1
    23f8:	08 b6       	in	r0, 0x38	; 56
    23fa:	0f 92       	push	r0
    23fc:	18 be       	out	0x38, r1	; 56
    23fe:	09 b6       	in	r0, 0x39	; 57
    2400:	0f 92       	push	r0
    2402:	19 be       	out	0x39, r1	; 57
    2404:	0b b6       	in	r0, 0x3b	; 59
    2406:	0f 92       	push	r0
    2408:	1b be       	out	0x3b, r1	; 59
    240a:	2f 93       	push	r18
    240c:	3f 93       	push	r19
    240e:	4f 93       	push	r20
    2410:	5f 93       	push	r21
    2412:	6f 93       	push	r22
    2414:	7f 93       	push	r23
    2416:	8f 93       	push	r24
    2418:	9f 93       	push	r25
    241a:	af 93       	push	r26
    241c:	bf 93       	push	r27
    241e:	ef 93       	push	r30
    2420:	ff 93       	push	r31
	btn_status = btn_check_press();
    2422:	8f df       	rcall	.-226    	; 0x2342 <btn_check_press>
    2424:	80 93 b5 2c 	sts	0x2CB5, r24
#ifdef DEBUG_ON
	printf("DEBUG: BTN: %d \r\n",btn_status);
    2428:	80 91 b5 2c 	lds	r24, 0x2CB5
    242c:	1f 92       	push	r1
    242e:	8f 93       	push	r24
    2430:	8b e6       	ldi	r24, 0x6B	; 107
    2432:	94 e2       	ldi	r25, 0x24	; 36
    2434:	9f 93       	push	r25
    2436:	8f 93       	push	r24
    2438:	0e 94 56 54 	call	0xa8ac	; 0xa8ac <printf>
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
#endif
}
    2444:	ff 91       	pop	r31
    2446:	ef 91       	pop	r30
    2448:	bf 91       	pop	r27
    244a:	af 91       	pop	r26
    244c:	9f 91       	pop	r25
    244e:	8f 91       	pop	r24
    2450:	7f 91       	pop	r23
    2452:	6f 91       	pop	r22
    2454:	5f 91       	pop	r21
    2456:	4f 91       	pop	r20
    2458:	3f 91       	pop	r19
    245a:	2f 91       	pop	r18
    245c:	0f 90       	pop	r0
    245e:	0b be       	out	0x3b, r0	; 59
    2460:	0f 90       	pop	r0
    2462:	09 be       	out	0x39, r0	; 57
    2464:	0f 90       	pop	r0
    2466:	08 be       	out	0x38, r0	; 56
    2468:	0f 90       	pop	r0
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	0f 90       	pop	r0
    246e:	1f 90       	pop	r1
    2470:	18 95       	reti

00002472 <__vector_67>:

ISR(PORTA_INT1_vect) 
{	
    2472:	1f 92       	push	r1
    2474:	0f 92       	push	r0
    2476:	0f b6       	in	r0, 0x3f	; 63
    2478:	0f 92       	push	r0
    247a:	11 24       	eor	r1, r1
    247c:	08 b6       	in	r0, 0x38	; 56
    247e:	0f 92       	push	r0
    2480:	18 be       	out	0x38, r1	; 56
    2482:	09 b6       	in	r0, 0x39	; 57
    2484:	0f 92       	push	r0
    2486:	19 be       	out	0x39, r1	; 57
    2488:	0a b6       	in	r0, 0x3a	; 58
    248a:	0f 92       	push	r0
    248c:	1a be       	out	0x3a, r1	; 58
    248e:	0b b6       	in	r0, 0x3b	; 59
    2490:	0f 92       	push	r0
    2492:	1b be       	out	0x3b, r1	; 59
    2494:	ef 92       	push	r14
    2496:	0f 93       	push	r16
    2498:	1f 93       	push	r17
    249a:	2f 93       	push	r18
    249c:	3f 93       	push	r19
    249e:	4f 93       	push	r20
    24a0:	5f 93       	push	r21
    24a2:	6f 93       	push	r22
    24a4:	7f 93       	push	r23
    24a6:	8f 93       	push	r24
    24a8:	9f 93       	push	r25
    24aa:	af 93       	push	r26
    24ac:	bf 93       	push	r27
    24ae:	ef 93       	push	r30
    24b0:	ff 93       	push	r31
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	1f 92       	push	r1
    24b8:	1f 92       	push	r1
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
	//twi_on();
	uint8_t data[2];
	twi_read_packet(&TWIC,SI114X_ADDR,50,REG_IRQ_STATUS,data,1);
    24be:	ee 24       	eor	r14, r14
    24c0:	e3 94       	inc	r14
    24c2:	8e 01       	movw	r16, r28
    24c4:	0f 5f       	subi	r16, 0xFF	; 255
    24c6:	1f 4f       	sbci	r17, 0xFF	; 255
    24c8:	21 e2       	ldi	r18, 0x21	; 33
    24ca:	42 e3       	ldi	r20, 0x32	; 50
    24cc:	50 e0       	ldi	r21, 0x00	; 0
    24ce:	6a e5       	ldi	r22, 0x5A	; 90
    24d0:	80 e8       	ldi	r24, 0x80	; 128
    24d2:	94 e0       	ldi	r25, 0x04	; 4
    24d4:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <twi_read_packet>
	si114x_status = data[0];
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	80 93 b7 2c 	sts	0x2CB7, r24
#ifdef DEBUG_ON
	puts("DEBUG: Interrupt from Si114x! \n");
    24de:	8d e7       	ldi	r24, 0x7D	; 125
    24e0:	94 e2       	ldi	r25, 0x24	; 36
    24e2:	0e 94 67 54 	call	0xa8ce	; 0xa8ce <puts>
#endif
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	ff 91       	pop	r31
    24f0:	ef 91       	pop	r30
    24f2:	bf 91       	pop	r27
    24f4:	af 91       	pop	r26
    24f6:	9f 91       	pop	r25
    24f8:	8f 91       	pop	r24
    24fa:	7f 91       	pop	r23
    24fc:	6f 91       	pop	r22
    24fe:	5f 91       	pop	r21
    2500:	4f 91       	pop	r20
    2502:	3f 91       	pop	r19
    2504:	2f 91       	pop	r18
    2506:	1f 91       	pop	r17
    2508:	0f 91       	pop	r16
    250a:	ef 90       	pop	r14
    250c:	0f 90       	pop	r0
    250e:	0b be       	out	0x3b, r0	; 59
    2510:	0f 90       	pop	r0
    2512:	0a be       	out	0x3a, r0	; 58
    2514:	0f 90       	pop	r0
    2516:	09 be       	out	0x39, r0	; 57
    2518:	0f 90       	pop	r0
    251a:	08 be       	out	0x38, r0	; 56
    251c:	0f 90       	pop	r0
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	0f 90       	pop	r0
    2522:	1f 90       	pop	r1
    2524:	18 95       	reti

00002526 <lowpower_setup>:

#include "power.h"

void lowpower_setup(void) 
{
	DISABLE_GEN();
    2526:	e0 e7       	ldi	r30, 0x70	; 112
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	8b 61       	ori	r24, 0x1B	; 27
    252e:	80 83       	st	Z, r24
	DISABLE_TC();
    2530:	83 81       	ldd	r24, Z+3	; 0x03
    2532:	87 60       	ori	r24, 0x07	; 7
    2534:	83 83       	std	Z+3, r24	; 0x03
    2536:	84 81       	ldd	r24, Z+4	; 0x04
    2538:	87 60       	ori	r24, 0x07	; 7
    253a:	84 83       	std	Z+4, r24	; 0x04
    253c:	85 81       	ldd	r24, Z+5	; 0x05
    253e:	85 60       	ori	r24, 0x05	; 5
    2540:	85 83       	std	Z+5, r24	; 0x05
	DISABLE_COM();
    2542:	83 81       	ldd	r24, Z+3	; 0x03
    2544:	88 67       	ori	r24, 0x78	; 120
    2546:	83 83       	std	Z+3, r24	; 0x03
    2548:	84 81       	ldd	r24, Z+4	; 0x04
    254a:	88 63       	ori	r24, 0x38	; 56
    254c:	84 83       	std	Z+4, r24	; 0x04
    254e:	85 81       	ldd	r24, Z+5	; 0x05
    2550:	80 65       	ori	r24, 0x50	; 80
    2552:	85 83       	std	Z+5, r24	; 0x05
	DISABLE_ANLG();
    2554:	81 81       	ldd	r24, Z+1	; 0x01
    2556:	83 60       	ori	r24, 0x03	; 3
    2558:	81 83       	std	Z+1, r24	; 0x01
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	84 60       	ori	r24, 0x04	; 4
    255e:	82 83       	std	Z+2, r24	; 0x02
    2560:	08 95       	ret

00002562 <rtc_setup>:
}

void rtc_show_minutes(void) 
{
	rtc_update_display(BOTTOM_HALF,env.time.minutes);
	disp_time = false;
    2562:	80 91 70 00 	lds	r24, 0x0070
    2566:	8f 7b       	andi	r24, 0xBF	; 191
    2568:	80 93 70 00 	sts	0x0070, r24
    256c:	82 e0       	ldi	r24, 0x02	; 2
    256e:	80 93 b6 2c 	sts	0x2CB6, r24
    2572:	88 ed       	ldi	r24, 0xD8	; 216
    2574:	84 bf       	out	0x34, r24	; 52
    2576:	8b e0       	ldi	r24, 0x0B	; 11
    2578:	80 93 43 00 	sts	0x0043, r24
    257c:	80 91 01 04 	lds	r24, 0x0401
    2580:	80 fd       	sbrc	r24, 0
    2582:	fc cf       	rjmp	.-8      	; 0x257c <rtc_setup+0x1a>
    2584:	80 e8       	ldi	r24, 0x80	; 128
    2586:	97 e0       	ldi	r25, 0x07	; 7
    2588:	80 93 0a 04 	sts	0x040A, r24
    258c:	90 93 0b 04 	sts	0x040B, r25
    2590:	82 e0       	ldi	r24, 0x02	; 2
    2592:	80 93 02 04 	sts	0x0402, r24
    2596:	10 92 08 04 	sts	0x0408, r1
    259a:	10 92 09 04 	sts	0x0409, r1
    259e:	10 92 0c 04 	sts	0x040C, r1
    25a2:	10 92 0d 04 	sts	0x040D, r1
    25a6:	87 e0       	ldi	r24, 0x07	; 7
    25a8:	80 93 00 04 	sts	0x0400, r24
    25ac:	08 95       	ret

000025ae <rtc_update_seconds>:
    25ae:	8c 33       	cpi	r24, 0x3C	; 60
    25b0:	91 05       	cpc	r25, r1
    25b2:	30 f4       	brcc	.+12     	; 0x25c0 <rtc_update_seconds+0x12>
    25b4:	25 e0       	ldi	r18, 0x05	; 5
    25b6:	88 0f       	add	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	2a 95       	dec	r18
    25bc:	e1 f7       	brne	.-8      	; 0x25b6 <rtc_update_seconds+0x8>
    25be:	02 c0       	rjmp	.+4      	; 0x25c4 <rtc_update_seconds+0x16>
    25c0:	80 e8       	ldi	r24, 0x80	; 128
    25c2:	97 e0       	ldi	r25, 0x07	; 7
    25c4:	80 93 08 04 	sts	0x0408, r24
    25c8:	90 93 09 04 	sts	0x0409, r25
    25cc:	08 95       	ret

000025ce <rtc_disable_time_render>:
    25ce:	10 92 07 20 	sts	0x2007, r1
    25d2:	08 95       	ret

000025d4 <rtc_update_display>:
    25d4:	6f 92       	push	r6
    25d6:	7f 92       	push	r7
    25d8:	8f 92       	push	r8
    25da:	9f 92       	push	r9
    25dc:	af 92       	push	r10
    25de:	bf 92       	push	r11
    25e0:	cf 92       	push	r12
    25e2:	df 92       	push	r13
    25e4:	ef 92       	push	r14
    25e6:	ff 92       	push	r15
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	1f 92       	push	r1
    25f2:	1f 92       	push	r1
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	78 2e       	mov	r7, r24
    25fa:	66 2e       	mov	r6, r22
    25fc:	70 e0       	ldi	r23, 0x00	; 0
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	8e 01       	movw	r16, r28
    2604:	0f 5f       	subi	r16, 0xFF	; 255
    2606:	1f 4f       	sbci	r17, 0xFF	; 255
    2608:	78 01       	movw	r14, r16
    260a:	3a e0       	ldi	r19, 0x0A	; 10
    260c:	83 2e       	mov	r8, r19
    260e:	91 2c       	mov	r9, r1
    2610:	a1 2c       	mov	r10, r1
    2612:	b1 2c       	mov	r11, r1
    2614:	67 01       	movw	r12, r14
    2616:	2f ef       	ldi	r18, 0xFF	; 255
    2618:	c2 1a       	sub	r12, r18
    261a:	d2 0a       	sbc	r13, r18
    261c:	a5 01       	movw	r20, r10
    261e:	94 01       	movw	r18, r8
    2620:	0e 94 28 51 	call	0xa250	; 0xa250 <__udivmodsi4>
    2624:	60 5d       	subi	r22, 0xD0	; 208
    2626:	f7 01       	movw	r30, r14
    2628:	60 83       	st	Z, r22
    262a:	b9 01       	movw	r22, r18
    262c:	ca 01       	movw	r24, r20
    262e:	61 15       	cp	r22, r1
    2630:	71 05       	cpc	r23, r1
    2632:	81 05       	cpc	r24, r1
    2634:	91 05       	cpc	r25, r1
    2636:	11 f0       	breq	.+4      	; 0x263c <rtc_update_display+0x68>
    2638:	76 01       	movw	r14, r12
    263a:	ec cf       	rjmp	.-40     	; 0x2614 <rtc_update_display+0x40>
    263c:	c0 1a       	sub	r12, r16
    263e:	d1 0a       	sbc	r13, r17
    2640:	c6 01       	movw	r24, r12
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	d8 01       	movw	r26, r16
    2646:	ac 0d       	add	r26, r12
    2648:	bd 1d       	adc	r27, r13
    264a:	f8 01       	movw	r30, r16
    264c:	9f 01       	movw	r18, r30
    264e:	20 1b       	sub	r18, r16
    2650:	31 0b       	sbc	r19, r17
    2652:	28 17       	cp	r18, r24
    2654:	39 07       	cpc	r19, r25
    2656:	34 f4       	brge	.+12     	; 0x2664 <rtc_update_display+0x90>
    2658:	20 81       	ld	r18, Z
    265a:	3e 91       	ld	r19, -X
    265c:	31 93       	st	Z+, r19
    265e:	2c 93       	st	X, r18
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f4 cf       	rjmp	.-24     	; 0x264c <rtc_update_display+0x78>
    2664:	f9 e0       	ldi	r31, 0x09	; 9
    2666:	f6 15       	cp	r31, r6
    2668:	20 f0       	brcs	.+8      	; 0x2672 <rtc_update_display+0x9e>
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	90 e3       	ldi	r25, 0x30	; 48
    266e:	99 83       	std	Y+1, r25	; 0x01
    2670:	8a 83       	std	Y+2, r24	; 0x02
    2672:	00 e0       	ldi	r16, 0x00	; 0
    2674:	71 10       	cpse	r7, r1
    2676:	04 c0       	rjmp	.+8      	; 0x2680 <rtc_update_display+0xac>
    2678:	28 e0       	ldi	r18, 0x08	; 8
    267a:	40 e1       	ldi	r20, 0x10	; 16
    267c:	60 e0       	ldi	r22, 0x00	; 0
    267e:	03 c0       	rjmp	.+6      	; 0x2686 <rtc_update_display+0xb2>
    2680:	29 e0       	ldi	r18, 0x09	; 9
    2682:	40 e1       	ldi	r20, 0x10	; 16
    2684:	67 e0       	ldi	r22, 0x07	; 7
    2686:	80 e0       	ldi	r24, 0x00	; 0
    2688:	0e 94 fe 20 	call	0x41fc	; 0x41fc <display_draw_filled_rect>
    268c:	e7 2c       	mov	r14, r7
    268e:	f1 2c       	mov	r15, r1
    2690:	01 e0       	ldi	r16, 0x01	; 1
    2692:	21 e0       	ldi	r18, 0x01	; 1
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	49 81       	ldd	r20, Y+1	; 0x01
    2698:	b7 01       	movw	r22, r14
    269a:	82 e0       	ldi	r24, 0x02	; 2
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 01 22 	call	0x4402	; 0x4402 <display_draw_char>
    26a2:	21 e0       	ldi	r18, 0x01	; 1
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	4a 81       	ldd	r20, Y+2	; 0x02
    26a8:	b7 01       	movw	r22, r14
    26aa:	89 e0       	ldi	r24, 0x09	; 9
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	0e 94 01 22 	call	0x4402	; 0x4402 <display_draw_char>
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	ff 90       	pop	r15
    26c0:	ef 90       	pop	r14
    26c2:	df 90       	pop	r13
    26c4:	cf 90       	pop	r12
    26c6:	bf 90       	pop	r11
    26c8:	af 90       	pop	r10
    26ca:	9f 90       	pop	r9
    26cc:	8f 90       	pop	r8
    26ce:	7f 90       	pop	r7
    26d0:	6f 90       	pop	r6
    26d2:	08 95       	ret

000026d4 <rtc_enable_time_render>:
}

void rtc_enable_time_render(void) 
{
	env.menu_id = 0;
    26d4:	10 92 2e 2b 	sts	0x2B2E, r1
	rtc_update_display(BOTTOM_HALF,env.time.minutes);
    26d8:	60 91 d0 2b 	lds	r22, 0x2BD0
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	7a df       	rcall	.-268    	; 0x25d4 <rtc_update_display>
	rtc_update_display(TOP_HALF,env.time.hours);
    26e0:	60 91 d1 2b 	lds	r22, 0x2BD1
    26e4:	89 e0       	ldi	r24, 0x09	; 9
    26e6:	76 df       	rcall	.-276    	; 0x25d4 <rtc_update_display>
	disp_time = true;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	80 93 07 20 	sts	0x2007, r24
    26ee:	08 95       	ret

000026f0 <__vector_10>:
	display_draw_char(2,pos,buffer[0],1,1);
	display_draw_char(9,pos,buffer[1],1,1);
}

ISR(RTC_OVF_vect) 
{
    26f0:	1f 92       	push	r1
    26f2:	0f 92       	push	r0
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	0f 92       	push	r0
    26f8:	11 24       	eor	r1, r1
    26fa:	08 b6       	in	r0, 0x38	; 56
    26fc:	0f 92       	push	r0
    26fe:	18 be       	out	0x38, r1	; 56
    2700:	09 b6       	in	r0, 0x39	; 57
    2702:	0f 92       	push	r0
    2704:	19 be       	out	0x39, r1	; 57
    2706:	0b b6       	in	r0, 0x3b	; 59
    2708:	0f 92       	push	r0
    270a:	1b be       	out	0x3b, r1	; 59
    270c:	2f 93       	push	r18
    270e:	3f 93       	push	r19
    2710:	4f 93       	push	r20
    2712:	5f 93       	push	r21
    2714:	6f 93       	push	r22
    2716:	7f 93       	push	r23
    2718:	8f 93       	push	r24
    271a:	9f 93       	push	r25
    271c:	af 93       	push	r26
    271e:	bf 93       	push	r27
    2720:	cf 93       	push	r28
    2722:	ef 93       	push	r30
    2724:	ff 93       	push	r31
	//Variable to check system-runtime
	env.runtime++;
    2726:	80 91 39 2b 	lds	r24, 0x2B39
    272a:	90 91 3a 2b 	lds	r25, 0x2B3A
    272e:	a0 91 3b 2b 	lds	r26, 0x2B3B
    2732:	b0 91 3c 2b 	lds	r27, 0x2B3C
    2736:	01 96       	adiw	r24, 0x01	; 1
    2738:	a1 1d       	adc	r26, r1
    273a:	b1 1d       	adc	r27, r1
    273c:	80 93 39 2b 	sts	0x2B39, r24
    2740:	90 93 3a 2b 	sts	0x2B3A, r25
    2744:	a0 93 3b 2b 	sts	0x2B3B, r26
    2748:	b0 93 3c 2b 	sts	0x2B3C, r27
	
	if (++env.time.minutes >= 60) {
    274c:	60 91 d0 2b 	lds	r22, 0x2BD0
    2750:	6f 5f       	subi	r22, 0xFF	; 255
    2752:	60 93 d0 2b 	sts	0x2BD0, r22
    2756:	6c 33       	cpi	r22, 0x3C	; 60
    2758:	08 f4       	brcc	.+2      	; 0x275c <__vector_10+0x6c>
    275a:	67 c0       	rjmp	.+206    	; 0x282a <__vector_10+0x13a>
		
		env.time.minutes = 0;
    275c:	10 92 d0 2b 	sts	0x2BD0, r1
		if (disp_time) {
    2760:	80 91 07 20 	lds	r24, 0x2007
    2764:	88 23       	and	r24, r24
    2766:	29 f0       	breq	.+10     	; 0x2772 <__vector_10+0x82>
			rtc_update_display(BOTTOM_HALF,env.time.minutes);
    2768:	60 e0       	ldi	r22, 0x00	; 0
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	33 df       	rcall	.-410    	; 0x25d4 <rtc_update_display>
			display_refresh_screen();
    276e:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
		}
		if (++env.time.hours >= 24) {
    2772:	60 91 d1 2b 	lds	r22, 0x2BD1
    2776:	6f 5f       	subi	r22, 0xFF	; 255
    2778:	60 93 d1 2b 	sts	0x2BD1, r22
    277c:	68 31       	cpi	r22, 0x18	; 24
    277e:	08 f4       	brcc	.+2      	; 0x2782 <__vector_10+0x92>
    2780:	49 c0       	rjmp	.+146    	; 0x2814 <__vector_10+0x124>
			if (env.time.weekday++ >= Sunday) {
    2782:	80 91 d3 2b 	lds	r24, 0x2BD3
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	98 0f       	add	r25, r24
    278a:	90 93 d3 2b 	sts	0x2BD3, r25
    278e:	87 30       	cpi	r24, 0x07	; 7
    2790:	68 f0       	brcs	.+26     	; 0x27ac <__vector_10+0xbc>
				env.time.weekday = Monday;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	80 93 d3 2b 	sts	0x2BD3, r24
				if (env.time.week++ >= 53) {
    2798:	90 91 d4 2b 	lds	r25, 0x2BD4
    279c:	21 e0       	ldi	r18, 0x01	; 1
    279e:	29 0f       	add	r18, r25
    27a0:	20 93 d4 2b 	sts	0x2BD4, r18
    27a4:	95 33       	cpi	r25, 0x35	; 53
    27a6:	10 f0       	brcs	.+4      	; 0x27ac <__vector_10+0xbc>
					env.time.week = 1;
    27a8:	80 93 d4 2b 	sts	0x2BD4, r24
				}
			}
			if (env.time.day++ >= time_get_days_in_month(env.time.month,env.time.year)) {
    27ac:	c0 91 d2 2b 	lds	r28, 0x2BD2
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	8c 0f       	add	r24, r28
    27b4:	80 93 d2 2b 	sts	0x2BD2, r24
    27b8:	60 91 d6 2b 	lds	r22, 0x2BD6
    27bc:	70 91 d7 2b 	lds	r23, 0x2BD7
    27c0:	80 91 d5 2b 	lds	r24, 0x2BD5
    27c4:	0e 94 d8 4a 	call	0x95b0	; 0x95b0 <time_get_days_in_month>
    27c8:	c8 17       	cp	r28, r24
    27ca:	e0 f0       	brcs	.+56     	; 0x2804 <__vector_10+0x114>
				env.time.day = 1;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	80 93 d2 2b 	sts	0x2BD2, r24
				if (env.time.month++ >= December) {
    27d2:	90 91 d5 2b 	lds	r25, 0x2BD5
    27d6:	21 e0       	ldi	r18, 0x01	; 1
    27d8:	29 0f       	add	r18, r25
    27da:	20 93 d5 2b 	sts	0x2BD5, r18
    27de:	9c 30       	cpi	r25, 0x0C	; 12
    27e0:	88 f0       	brcs	.+34     	; 0x2804 <__vector_10+0x114>
					env.time.month = January;
    27e2:	80 93 d5 2b 	sts	0x2BD5, r24
					env.time.year++;
    27e6:	40 91 d6 2b 	lds	r20, 0x2BD6
    27ea:	50 91 d7 2b 	lds	r21, 0x2BD7
    27ee:	4f 5f       	subi	r20, 0xFF	; 255
    27f0:	5f 4f       	sbci	r21, 0xFF	; 255
    27f2:	40 93 d6 2b 	sts	0x2BD6, r20
    27f6:	50 93 d7 2b 	sts	0x2BD7, r21
					env.time.week = time_get_weeknumber(env.time.day,env.time.month,env.time.year);
    27fa:	61 e0       	ldi	r22, 0x01	; 1
    27fc:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <time_get_weeknumber>
    2800:	80 93 d4 2b 	sts	0x2BD4, r24
				}
			}
			env.time.hours = 0;
    2804:	10 92 d1 2b 	sts	0x2BD1, r1
			if (disp_time) {
    2808:	80 91 07 20 	lds	r24, 0x2007
    280c:	88 23       	and	r24, r24
    280e:	51 f0       	breq	.+20     	; 0x2824 <__vector_10+0x134>
				rtc_update_display(TOP_HALF,env.time.hours);
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	04 c0       	rjmp	.+8      	; 0x281c <__vector_10+0x12c>
				display_refresh_screen();
			}
		} else {
			if (disp_time) {
    2814:	80 91 07 20 	lds	r24, 0x2007
    2818:	88 23       	and	r24, r24
    281a:	21 f0       	breq	.+8      	; 0x2824 <__vector_10+0x134>
				rtc_update_display(TOP_HALF,env.time.hours);
    281c:	89 e0       	ldi	r24, 0x09	; 9
    281e:	da de       	rcall	.-588    	; 0x25d4 <rtc_update_display>
				display_refresh_screen();
    2820:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
			}
		}
		env.time.minutes = 0;
    2824:	10 92 d0 2b 	sts	0x2BD0, r1
    2828:	08 c0       	rjmp	.+16     	; 0x283a <__vector_10+0x14a>
	} else {
		if (disp_time) {
    282a:	80 91 07 20 	lds	r24, 0x2007
    282e:	88 23       	and	r24, r24
    2830:	21 f0       	breq	.+8      	; 0x283a <__vector_10+0x14a>
			rtc_update_display(BOTTOM_HALF,env.time.minutes);
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	cf de       	rcall	.-610    	; 0x25d4 <rtc_update_display>
			display_refresh_screen();
    2836:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
		}
	}
	if (alarm_status == ALARM_ON) {
    283a:	80 91 b6 2c 	lds	r24, 0x2CB6
    283e:	81 30       	cpi	r24, 0x01	; 1
    2840:	71 f4       	brne	.+28     	; 0x285e <__vector_10+0x16e>
		if (env.time.hours == env.alarm.hours) {
    2842:	90 91 d1 2b 	lds	r25, 0x2BD1
    2846:	80 91 cd 2b 	lds	r24, 0x2BCD
    284a:	98 13       	cpse	r25, r24
    284c:	08 c0       	rjmp	.+16     	; 0x285e <__vector_10+0x16e>
			if (env.time.minutes == env.alarm.minutes)
    284e:	90 91 d0 2b 	lds	r25, 0x2BD0
    2852:	80 91 cc 2b 	lds	r24, 0x2BCC
    2856:	98 13       	cpse	r25, r24
    2858:	02 c0       	rjmp	.+4      	; 0x285e <__vector_10+0x16e>
			{
				alarm_status = ALARM_TRIGGERED;
    285a:	10 92 b6 2c 	sts	0x2CB6, r1
			}
		}
	}
    285e:	ff 91       	pop	r31
    2860:	ef 91       	pop	r30
    2862:	cf 91       	pop	r28
    2864:	bf 91       	pop	r27
    2866:	af 91       	pop	r26
    2868:	9f 91       	pop	r25
    286a:	8f 91       	pop	r24
    286c:	7f 91       	pop	r23
    286e:	6f 91       	pop	r22
    2870:	5f 91       	pop	r21
    2872:	4f 91       	pop	r20
    2874:	3f 91       	pop	r19
    2876:	2f 91       	pop	r18
    2878:	0f 90       	pop	r0
    287a:	0b be       	out	0x3b, r0	; 59
    287c:	0f 90       	pop	r0
    287e:	09 be       	out	0x39, r0	; 57
    2880:	0f 90       	pop	r0
    2882:	08 be       	out	0x38, r0	; 56
    2884:	0f 90       	pop	r0
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	0f 90       	pop	r0
    288a:	1f 90       	pop	r1
    288c:	18 95       	reti

0000288e <_sendCmd>:
	u8 code ucoef[4] = { 0x7B, 0x6B, 0x01, 0x00 } ;
	
	// This will write 4 bytes starting with I2C address 0x13
	response = Si114xBlockWrite( si114x_handle, REG_UCOEF0, 4, &ucoef[0] );
	return response;
}
    288e:	ff 92       	push	r15
    2890:	0f 93       	push	r16
    2892:	1f 93       	push	r17
    2894:	cf 93       	push	r28
    2896:	df 93       	push	r29
    2898:	8c 01       	movw	r16, r24
    289a:	f6 2e       	mov	r15, r22
    289c:	60 e2       	ldi	r22, 0x20	; 32
    289e:	14 d6       	rcall	.+3112   	; 0x34c8 <Si114xReadFromRegister>
    28a0:	ec 01       	movw	r28, r24
    28a2:	97 fd       	sbrc	r25, 7
    28a4:	21 c0       	rjmp	.+66     	; 0x28e8 <_sendCmd+0x5a>
    28a6:	60 e3       	ldi	r22, 0x30	; 48
    28a8:	c8 01       	movw	r24, r16
    28aa:	0e d6       	rcall	.+3100   	; 0x34c8 <Si114xReadFromRegister>
    28ac:	81 30       	cpi	r24, 0x01	; 1
    28ae:	91 05       	cpc	r25, r1
    28b0:	19 f0       	breq	.+6      	; 0x28b8 <_sendCmd+0x2a>
    28b2:	97 ff       	sbrs	r25, 7
    28b4:	f8 cf       	rjmp	.-16     	; 0x28a6 <_sendCmd+0x18>
    28b6:	20 c0       	rjmp	.+64     	; 0x28f8 <_sendCmd+0x6a>
    28b8:	ff 20       	and	r15, r15
    28ba:	31 f0       	breq	.+12     	; 0x28c8 <_sendCmd+0x3a>
    28bc:	60 e2       	ldi	r22, 0x20	; 32
    28be:	c8 01       	movw	r24, r16
    28c0:	03 d6       	rcall	.+3078   	; 0x34c8 <Si114xReadFromRegister>
    28c2:	8c 17       	cp	r24, r28
    28c4:	9d 07       	cpc	r25, r29
    28c6:	91 f4       	brne	.+36     	; 0x28ec <_sendCmd+0x5e>
    28c8:	4f 2d       	mov	r20, r15
    28ca:	68 e1       	ldi	r22, 0x18	; 24
    28cc:	c8 01       	movw	r24, r16
    28ce:	de d5       	rcall	.+3004   	; 0x348c <Si114xWriteToRegister>
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	91 f4       	brne	.+36     	; 0x28f8 <_sendCmd+0x6a>
    28d4:	ff 20       	and	r15, r15
    28d6:	71 f0       	breq	.+28     	; 0x28f4 <_sendCmd+0x66>
    28d8:	60 e2       	ldi	r22, 0x20	; 32
    28da:	c8 01       	movw	r24, r16
    28dc:	f5 d5       	rcall	.+3050   	; 0x34c8 <Si114xReadFromRegister>
    28de:	8c 17       	cp	r24, r28
    28e0:	9d 07       	cpc	r25, r29
    28e2:	41 f4       	brne	.+16     	; 0x28f4 <_sendCmd+0x66>
    28e4:	d7 ff       	sbrs	r29, 7
    28e6:	f8 cf       	rjmp	.-16     	; 0x28d8 <_sendCmd+0x4a>
    28e8:	ce 01       	movw	r24, r28
    28ea:	06 c0       	rjmp	.+12     	; 0x28f8 <_sendCmd+0x6a>
    28ec:	97 fd       	sbrc	r25, 7
    28ee:	04 c0       	rjmp	.+8      	; 0x28f8 <_sendCmd+0x6a>
    28f0:	ec 01       	movw	r28, r24
    28f2:	d9 cf       	rjmp	.-78     	; 0x28a6 <_sendCmd+0x18>
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	df 91       	pop	r29
    28fa:	cf 91       	pop	r28
    28fc:	1f 91       	pop	r17
    28fe:	0f 91       	pop	r16
    2900:	ff 90       	pop	r15
    2902:	08 95       	ret

00002904 <si114x_get_data>:
    2904:	cf 92       	push	r12
    2906:	df 92       	push	r13
    2908:	ef 92       	push	r14
    290a:	0f 93       	push	r16
    290c:	1f 93       	push	r17
    290e:	cf 93       	push	r28
    2910:	df 93       	push	r29
    2912:	1f 92       	push	r1
    2914:	1f 92       	push	r1
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	6c 01       	movw	r12, r24
    291c:	80 91 e8 2a 	lds	r24, 0x2AE8
    2920:	90 91 e9 2a 	lds	r25, 0x2AE9
    2924:	f6 01       	movw	r30, r12
    2926:	82 83       	std	Z+2, r24	; 0x02
    2928:	93 83       	std	Z+3, r25	; 0x03
    292a:	82 e0       	ldi	r24, 0x02	; 2
    292c:	e8 2e       	mov	r14, r24
    292e:	8e 01       	movw	r16, r28
    2930:	0f 5f       	subi	r16, 0xFF	; 255
    2932:	1f 4f       	sbci	r17, 0xFF	; 255
    2934:	26 e2       	ldi	r18, 0x26	; 38
    2936:	42 e3       	ldi	r20, 0x32	; 50
    2938:	50 e0       	ldi	r21, 0x00	; 0
    293a:	6a e5       	ldi	r22, 0x5A	; 90
    293c:	80 e8       	ldi	r24, 0x80	; 128
    293e:	94 e0       	ldi	r25, 0x04	; 4
    2940:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <twi_read_packet>
    2944:	8a 81       	ldd	r24, Y+2	; 0x02
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	98 2f       	mov	r25, r24
    294a:	88 27       	eor	r24, r24
    294c:	29 81       	ldd	r18, Y+1	; 0x01
    294e:	82 2b       	or	r24, r18
    2950:	f6 01       	movw	r30, r12
    2952:	82 87       	std	Z+10, r24	; 0x0a
    2954:	93 87       	std	Z+11, r25	; 0x0b
    2956:	28 e2       	ldi	r18, 0x28	; 40
    2958:	42 e3       	ldi	r20, 0x32	; 50
    295a:	50 e0       	ldi	r21, 0x00	; 0
    295c:	6a e5       	ldi	r22, 0x5A	; 90
    295e:	80 e8       	ldi	r24, 0x80	; 128
    2960:	94 e0       	ldi	r25, 0x04	; 4
    2962:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <twi_read_packet>
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	98 2f       	mov	r25, r24
    296c:	88 27       	eor	r24, r24
    296e:	29 81       	ldd	r18, Y+1	; 0x01
    2970:	82 2b       	or	r24, r18
    2972:	f6 01       	movw	r30, r12
    2974:	84 87       	std	Z+12, r24	; 0x0c
    2976:	95 87       	std	Z+13, r25	; 0x0d
    2978:	2a e2       	ldi	r18, 0x2A	; 42
    297a:	42 e3       	ldi	r20, 0x32	; 50
    297c:	50 e0       	ldi	r21, 0x00	; 0
    297e:	6a e5       	ldi	r22, 0x5A	; 90
    2980:	80 e8       	ldi	r24, 0x80	; 128
    2982:	94 e0       	ldi	r25, 0x04	; 4
    2984:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <twi_read_packet>
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	98 2f       	mov	r25, r24
    298e:	88 27       	eor	r24, r24
    2990:	29 81       	ldd	r18, Y+1	; 0x01
    2992:	82 2b       	or	r24, r18
    2994:	f6 01       	movw	r30, r12
    2996:	86 87       	std	Z+14, r24	; 0x0e
    2998:	97 87       	std	Z+15, r25	; 0x0f
    299a:	24 e2       	ldi	r18, 0x24	; 36
    299c:	42 e3       	ldi	r20, 0x32	; 50
    299e:	50 e0       	ldi	r21, 0x00	; 0
    29a0:	6a e5       	ldi	r22, 0x5A	; 90
    29a2:	80 e8       	ldi	r24, 0x80	; 128
    29a4:	94 e0       	ldi	r25, 0x04	; 4
    29a6:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <twi_read_packet>
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	98 2f       	mov	r25, r24
    29b0:	88 27       	eor	r24, r24
    29b2:	29 81       	ldd	r18, Y+1	; 0x01
    29b4:	82 2b       	or	r24, r18
    29b6:	f6 01       	movw	r30, r12
    29b8:	80 87       	std	Z+8, r24	; 0x08
    29ba:	91 87       	std	Z+9, r25	; 0x09
    29bc:	22 e2       	ldi	r18, 0x22	; 34
    29be:	42 e3       	ldi	r20, 0x32	; 50
    29c0:	50 e0       	ldi	r21, 0x00	; 0
    29c2:	6a e5       	ldi	r22, 0x5A	; 90
    29c4:	80 e8       	ldi	r24, 0x80	; 128
    29c6:	94 e0       	ldi	r25, 0x04	; 4
    29c8:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <twi_read_packet>
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	98 2f       	mov	r25, r24
    29d2:	88 27       	eor	r24, r24
    29d4:	29 81       	ldd	r18, Y+1	; 0x01
    29d6:	82 2b       	or	r24, r18
    29d8:	f6 01       	movw	r30, r12
    29da:	86 83       	std	Z+6, r24	; 0x06
    29dc:	97 83       	std	Z+7, r25	; 0x07
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	0f 91       	pop	r16
    29ec:	ef 90       	pop	r14
    29ee:	df 90       	pop	r13
    29f0:	cf 90       	pop	r12
    29f2:	08 95       	ret

000029f4 <Si114xNop>:
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	4b cf       	rjmp	.-362    	; 0x288e <_sendCmd>

000029f8 <Si114xPsAuto>:
    29f8:	6d e0       	ldi	r22, 0x0D	; 13
    29fa:	49 cf       	rjmp	.-366    	; 0x288e <_sendCmd>

000029fc <Si114xPsAlsAuto>:
    29fc:	6f e0       	ldi	r22, 0x0F	; 15
    29fe:	47 cf       	rjmp	.-370    	; 0x288e <_sendCmd>

00002a00 <Si114xParamSet>:
    2a00:	cf 92       	push	r12
    2a02:	df 92       	push	r13
    2a04:	ef 92       	push	r14
    2a06:	ff 92       	push	r15
    2a08:	0f 93       	push	r16
    2a0a:	1f 93       	push	r17
    2a0c:	cf 93       	push	r28
    2a0e:	df 93       	push	r29
    2a10:	1f 92       	push	r1
    2a12:	1f 92       	push	r1
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	8c 01       	movw	r16, r24
    2a1a:	d6 2e       	mov	r13, r22
    2a1c:	c4 2e       	mov	r12, r20
    2a1e:	60 e3       	ldi	r22, 0x30	; 48
    2a20:	c8 01       	movw	r24, r16
    2a22:	52 d5       	rcall	.+2724   	; 0x34c8 <Si114xReadFromRegister>
    2a24:	81 30       	cpi	r24, 0x01	; 1
    2a26:	91 05       	cpc	r25, r1
    2a28:	19 f0       	breq	.+6      	; 0x2a30 <Si114xParamSet+0x30>
    2a2a:	97 ff       	sbrs	r25, 7
    2a2c:	f8 cf       	rjmp	.-16     	; 0x2a1e <Si114xParamSet+0x1e>
    2a2e:	1d c0       	rjmp	.+58     	; 0x2a6a <Si114xParamSet+0x6a>
    2a30:	60 e2       	ldi	r22, 0x20	; 32
    2a32:	c8 01       	movw	r24, r16
    2a34:	49 d5       	rcall	.+2706   	; 0x34c8 <Si114xReadFromRegister>
    2a36:	7c 01       	movw	r14, r24
    2a38:	c9 82       	std	Y+1, r12	; 0x01
    2a3a:	6d 2d       	mov	r22, r13
    2a3c:	6f 71       	andi	r22, 0x1F	; 31
    2a3e:	60 56       	subi	r22, 0x60	; 96
    2a40:	6a 83       	std	Y+2, r22	; 0x02
    2a42:	9e 01       	movw	r18, r28
    2a44:	2f 5f       	subi	r18, 0xFF	; 255
    2a46:	3f 4f       	sbci	r19, 0xFF	; 255
    2a48:	42 e0       	ldi	r20, 0x02	; 2
    2a4a:	67 e1       	ldi	r22, 0x17	; 23
    2a4c:	c8 01       	movw	r24, r16
    2a4e:	59 d5       	rcall	.+2738   	; 0x3502 <Si114xBlockWrite>
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	59 f4       	brne	.+22     	; 0x2a6a <Si114xParamSet+0x6a>
    2a54:	60 e2       	ldi	r22, 0x20	; 32
    2a56:	c8 01       	movw	r24, r16
    2a58:	37 d5       	rcall	.+2670   	; 0x34c8 <Si114xReadFromRegister>
    2a5a:	8e 15       	cp	r24, r14
    2a5c:	9f 05       	cpc	r25, r15
    2a5e:	d1 f3       	breq	.-12     	; 0x2a54 <Si114xParamSet+0x54>
    2a60:	18 16       	cp	r1, r24
    2a62:	19 06       	cpc	r1, r25
    2a64:	14 f4       	brge	.+4      	; 0x2a6a <Si114xParamSet+0x6a>
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	1f 91       	pop	r17
    2a74:	0f 91       	pop	r16
    2a76:	ff 90       	pop	r15
    2a78:	ef 90       	pop	r14
    2a7a:	df 90       	pop	r13
    2a7c:	cf 90       	pop	r12
    2a7e:	08 95       	ret

00002a80 <Si114xPauseAll>:
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	ec 01       	movw	r28, r24
    2a86:	60 e2       	ldi	r22, 0x20	; 32
    2a88:	ce 01       	movw	r24, r28
    2a8a:	1e d5       	rcall	.+2620   	; 0x34c8 <Si114xReadFromRegister>
    2a8c:	89 2b       	or	r24, r25
    2a8e:	19 f0       	breq	.+6      	; 0x2a96 <Si114xPauseAll+0x16>
    2a90:	ce 01       	movw	r24, r28
    2a92:	b0 df       	rcall	.-160    	; 0x29f4 <Si114xNop>
    2a94:	f8 cf       	rjmp	.-16     	; 0x2a86 <Si114xPauseAll+0x6>
    2a96:	6b e0       	ldi	r22, 0x0B	; 11
    2a98:	ce 01       	movw	r24, r28
    2a9a:	f9 de       	rcall	.-526    	; 0x288e <_sendCmd>
    2a9c:	60 e2       	ldi	r22, 0x20	; 32
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	13 d5       	rcall	.+2598   	; 0x34c8 <Si114xReadFromRegister>
    2aa2:	89 2b       	or	r24, r25
    2aa4:	d9 f3       	breq	.-10     	; 0x2a9c <Si114xPauseAll+0x1c>
    2aa6:	60 e2       	ldi	r22, 0x20	; 32
    2aa8:	ce 01       	movw	r24, r28
    2aaa:	0e d5       	rcall	.+2588   	; 0x34c8 <Si114xReadFromRegister>
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	59 f7       	brne	.-42     	; 0x2a86 <Si114xPauseAll+0x6>
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	df 91       	pop	r29
    2ab6:	cf 91       	pop	r28
    2ab8:	08 95       	ret

00002aba <si114x_reset>:
    2aba:	0f 93       	push	r16
    2abc:	1f 93       	push	r17
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	8c 01       	movw	r16, r24
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	68 e0       	ldi	r22, 0x08	; 8
    2ac8:	e1 d4       	rcall	.+2498   	; 0x348c <Si114xWriteToRegister>
    2aca:	ec 01       	movw	r28, r24
    2acc:	c8 01       	movw	r24, r16
    2ace:	d8 df       	rcall	.-80     	; 0x2a80 <Si114xPauseAll>
    2ad0:	c8 0f       	add	r28, r24
    2ad2:	d9 1f       	adc	r29, r25
    2ad4:	40 e0       	ldi	r20, 0x00	; 0
    2ad6:	68 e0       	ldi	r22, 0x08	; 8
    2ad8:	c8 01       	movw	r24, r16
    2ada:	d8 d4       	rcall	.+2480   	; 0x348c <Si114xWriteToRegister>
    2adc:	c8 0f       	add	r28, r24
    2ade:	d9 1f       	adc	r29, r25
    2ae0:	40 e0       	ldi	r20, 0x00	; 0
    2ae2:	64 e0       	ldi	r22, 0x04	; 4
    2ae4:	c8 01       	movw	r24, r16
    2ae6:	d2 d4       	rcall	.+2468   	; 0x348c <Si114xWriteToRegister>
    2ae8:	c8 0f       	add	r28, r24
    2aea:	d9 1f       	adc	r29, r25
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	65 e0       	ldi	r22, 0x05	; 5
    2af0:	c8 01       	movw	r24, r16
    2af2:	cc d4       	rcall	.+2456   	; 0x348c <Si114xWriteToRegister>
    2af4:	c8 0f       	add	r28, r24
    2af6:	d9 1f       	adc	r29, r25
    2af8:	40 e0       	ldi	r20, 0x00	; 0
    2afa:	66 e0       	ldi	r22, 0x06	; 6
    2afc:	c8 01       	movw	r24, r16
    2afe:	c6 d4       	rcall	.+2444   	; 0x348c <Si114xWriteToRegister>
    2b00:	c8 0f       	add	r28, r24
    2b02:	d9 1f       	adc	r29, r25
    2b04:	40 e0       	ldi	r20, 0x00	; 0
    2b06:	63 e0       	ldi	r22, 0x03	; 3
    2b08:	c8 01       	movw	r24, r16
    2b0a:	c0 d4       	rcall	.+2432   	; 0x348c <Si114xWriteToRegister>
    2b0c:	c8 0f       	add	r28, r24
    2b0e:	d9 1f       	adc	r29, r25
    2b10:	4f ef       	ldi	r20, 0xFF	; 255
    2b12:	61 e2       	ldi	r22, 0x21	; 33
    2b14:	c8 01       	movw	r24, r16
    2b16:	ba d4       	rcall	.+2420   	; 0x348c <Si114xWriteToRegister>
    2b18:	c8 0f       	add	r28, r24
    2b1a:	d9 1f       	adc	r29, r25
    2b1c:	41 e0       	ldi	r20, 0x01	; 1
    2b1e:	68 e1       	ldi	r22, 0x18	; 24
    2b20:	c8 01       	movw	r24, r16
    2b22:	b4 d4       	rcall	.+2408   	; 0x348c <Si114xWriteToRegister>
    2b24:	c8 0f       	add	r28, r24
    2b26:	d9 1f       	adc	r29, r25
    2b28:	fd d4       	rcall	.+2554   	; 0x3524 <delay_10ms>
    2b2a:	47 e1       	ldi	r20, 0x17	; 23
    2b2c:	67 e0       	ldi	r22, 0x07	; 7
    2b2e:	c8 01       	movw	r24, r16
    2b30:	ad d4       	rcall	.+2394   	; 0x348c <Si114xWriteToRegister>
    2b32:	8c 0f       	add	r24, r28
    2b34:	9d 1f       	adc	r25, r29
    2b36:	df 91       	pop	r29
    2b38:	cf 91       	pop	r28
    2b3a:	1f 91       	pop	r17
    2b3c:	0f 91       	pop	r16
    2b3e:	08 95       	ret

00002b40 <si114x_init_ps1>:
    2b40:	0f 93       	push	r16
    2b42:	1f 93       	push	r17
    2b44:	cf 93       	push	r28
    2b46:	df 93       	push	r29
    2b48:	8c 01       	movw	r16, r24
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	68 e0       	ldi	r22, 0x08	; 8
    2b4e:	9e d4       	rcall	.+2364   	; 0x348c <Si114xWriteToRegister>
    2b50:	ec 01       	movw	r28, r24
    2b52:	40 e0       	ldi	r20, 0x00	; 0
    2b54:	6a e0       	ldi	r22, 0x0A	; 10
    2b56:	c8 01       	movw	r24, r16
    2b58:	99 d4       	rcall	.+2354   	; 0x348c <Si114xWriteToRegister>
    2b5a:	c8 0f       	add	r28, r24
    2b5c:	d9 1f       	adc	r29, r25
    2b5e:	40 e0       	ldi	r20, 0x00	; 0
    2b60:	69 e0       	ldi	r22, 0x09	; 9
    2b62:	c8 01       	movw	r24, r16
    2b64:	93 d4       	rcall	.+2342   	; 0x348c <Si114xWriteToRegister>
    2b66:	c8 0f       	add	r28, r24
    2b68:	d9 1f       	adc	r29, r25
    2b6a:	c8 01       	movw	r24, r16
    2b6c:	a6 df       	rcall	.-180    	; 0x2aba <si114x_reset>
    2b6e:	c8 0f       	add	r28, r24
    2b70:	d9 1f       	adc	r29, r25
    2b72:	43 e0       	ldi	r20, 0x03	; 3
    2b74:	6f e0       	ldi	r22, 0x0F	; 15
    2b76:	c8 01       	movw	r24, r16
    2b78:	89 d4       	rcall	.+2322   	; 0x348c <Si114xWriteToRegister>
    2b7a:	c8 0f       	add	r28, r24
    2b7c:	d9 1f       	adc	r29, r25
    2b7e:	41 e0       	ldi	r20, 0x01	; 1
    2b80:	61 e0       	ldi	r22, 0x01	; 1
    2b82:	c8 01       	movw	r24, r16
    2b84:	3d df       	rcall	.-390    	; 0x2a00 <Si114xParamSet>
    2b86:	c8 0f       	add	r28, r24
    2b88:	d9 1f       	adc	r29, r25
    2b8a:	43 e0       	ldi	r20, 0x03	; 3
    2b8c:	63 e0       	ldi	r22, 0x03	; 3
    2b8e:	c8 01       	movw	r24, r16
    2b90:	7d d4       	rcall	.+2298   	; 0x348c <Si114xWriteToRegister>
    2b92:	c8 0f       	add	r28, r24
    2b94:	d9 1f       	adc	r29, r25
    2b96:	44 e0       	ldi	r20, 0x04	; 4
    2b98:	64 e0       	ldi	r22, 0x04	; 4
    2b9a:	c8 01       	movw	r24, r16
    2b9c:	77 d4       	rcall	.+2286   	; 0x348c <Si114xWriteToRegister>
    2b9e:	c8 0f       	add	r28, r24
    2ba0:	d9 1f       	adc	r29, r25
    2ba2:	40 e3       	ldi	r20, 0x30	; 48
    2ba4:	65 e0       	ldi	r22, 0x05	; 5
    2ba6:	c8 01       	movw	r24, r16
    2ba8:	71 d4       	rcall	.+2274   	; 0x348c <Si114xWriteToRegister>
    2baa:	c8 0f       	add	r28, r24
    2bac:	d9 1f       	adc	r29, r25
    2bae:	43 e0       	ldi	r20, 0x03	; 3
    2bb0:	67 e0       	ldi	r22, 0x07	; 7
    2bb2:	c8 01       	movw	r24, r16
    2bb4:	25 df       	rcall	.-438    	; 0x2a00 <Si114xParamSet>
    2bb6:	c8 0f       	add	r28, r24
    2bb8:	d9 1f       	adc	r29, r25
    2bba:	43 e0       	ldi	r20, 0x03	; 3
    2bbc:	6e e0       	ldi	r22, 0x0E	; 14
    2bbe:	c8 01       	movw	r24, r16
    2bc0:	1f df       	rcall	.-450    	; 0x2a00 <Si114xParamSet>
    2bc2:	c8 0f       	add	r28, r24
    2bc4:	d9 1f       	adc	r29, r25
    2bc6:	40 e0       	ldi	r20, 0x00	; 0
    2bc8:	6b e0       	ldi	r22, 0x0B	; 11
    2bca:	c8 01       	movw	r24, r16
    2bcc:	19 df       	rcall	.-462    	; 0x2a00 <Si114xParamSet>
    2bce:	c8 0f       	add	r28, r24
    2bd0:	d9 1f       	adc	r29, r25
    2bd2:	41 e0       	ldi	r20, 0x01	; 1
    2bd4:	62 e0       	ldi	r22, 0x02	; 2
    2bd6:	c8 01       	movw	r24, r16
    2bd8:	13 df       	rcall	.-474    	; 0x2a00 <Si114xParamSet>
    2bda:	c8 0f       	add	r28, r24
    2bdc:	d9 1f       	adc	r29, r25
    2bde:	40 e7       	ldi	r20, 0x70	; 112
    2be0:	6a e0       	ldi	r22, 0x0A	; 10
    2be2:	c8 01       	movw	r24, r16
    2be4:	0d df       	rcall	.-486    	; 0x2a00 <Si114xParamSet>
    2be6:	c8 0f       	add	r28, r24
    2be8:	d9 1f       	adc	r29, r25
    2bea:	44 e0       	ldi	r20, 0x04	; 4
    2bec:	6c e0       	ldi	r22, 0x0C	; 12
    2bee:	c8 01       	movw	r24, r16
    2bf0:	07 df       	rcall	.-498    	; 0x2a00 <Si114xParamSet>
    2bf2:	c8 0f       	add	r28, r24
    2bf4:	d9 1f       	adc	r29, r25
    2bf6:	48 e6       	ldi	r20, 0x68	; 104
    2bf8:	61 e1       	ldi	r22, 0x11	; 17
    2bfa:	c8 01       	movw	r24, r16
    2bfc:	47 d4       	rcall	.+2190   	; 0x348c <Si114xWriteToRegister>
    2bfe:	c8 0f       	add	r28, r24
    2c00:	d9 1f       	adc	r29, r25
    2c02:	41 e0       	ldi	r20, 0x01	; 1
    2c04:	62 e1       	ldi	r22, 0x12	; 18
    2c06:	c8 01       	movw	r24, r16
    2c08:	41 d4       	rcall	.+2178   	; 0x348c <Si114xWriteToRegister>
    2c0a:	c8 0f       	add	r28, r24
    2c0c:	d9 1f       	adc	r29, r25
    2c0e:	40 ea       	ldi	r20, 0xA0	; 160
    2c10:	68 e0       	ldi	r22, 0x08	; 8
    2c12:	c8 01       	movw	r24, r16
    2c14:	3b d4       	rcall	.+2166   	; 0x348c <Si114xWriteToRegister>
    2c16:	c8 0f       	add	r28, r24
    2c18:	d9 1f       	adc	r29, r25
    2c1a:	48 e0       	ldi	r20, 0x08	; 8
    2c1c:	6a e0       	ldi	r22, 0x0A	; 10
    2c1e:	c8 01       	movw	r24, r16
    2c20:	35 d4       	rcall	.+2154   	; 0x348c <Si114xWriteToRegister>
    2c22:	c8 0f       	add	r28, r24
    2c24:	d9 1f       	adc	r29, r25
    2c26:	c8 01       	movw	r24, r16
    2c28:	e7 de       	rcall	.-562    	; 0x29f8 <Si114xPsAuto>
    2c2a:	8c 0f       	add	r24, r28
    2c2c:	9d 1f       	adc	r25, r29
    2c2e:	df 91       	pop	r29
    2c30:	cf 91       	pop	r28
    2c32:	1f 91       	pop	r17
    2c34:	0f 91       	pop	r16
    2c36:	08 95       	ret

00002c38 <si114x_setup_ps1>:
    2c38:	8a e5       	ldi	r24, 0x5A	; 90
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	3e df       	rcall	.-388    	; 0x2aba <si114x_reset>
    2c3e:	2f ef       	ldi	r18, 0xFF	; 255
    2c40:	81 ee       	ldi	r24, 0xE1	; 225
    2c42:	94 e0       	ldi	r25, 0x04	; 4
    2c44:	21 50       	subi	r18, 0x01	; 1
    2c46:	80 40       	sbci	r24, 0x00	; 0
    2c48:	90 40       	sbci	r25, 0x00	; 0
    2c4a:	e1 f7       	brne	.-8      	; 0x2c44 <si114x_setup_ps1+0xc>
    2c4c:	00 c0       	rjmp	.+0      	; 0x2c4e <si114x_setup_ps1+0x16>
    2c4e:	00 00       	nop
    2c50:	8a e5       	ldi	r24, 0x5A	; 90
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	75 df       	rcall	.-278    	; 0x2b40 <si114x_init_ps1>
    2c56:	59 cb       	rjmp	.-2382   	; 0x230a <btn_si114x_enable_interrupt>

00002c58 <si114x_init>:
    2c58:	0f 93       	push	r16
    2c5a:	1f 93       	push	r17
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	8c 01       	movw	r16, r24
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	68 e0       	ldi	r22, 0x08	; 8
    2c66:	12 d4       	rcall	.+2084   	; 0x348c <Si114xWriteToRegister>
    2c68:	ec 01       	movw	r28, r24
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	6a e0       	ldi	r22, 0x0A	; 10
    2c6e:	c8 01       	movw	r24, r16
    2c70:	0d d4       	rcall	.+2074   	; 0x348c <Si114xWriteToRegister>
    2c72:	c8 0f       	add	r28, r24
    2c74:	d9 1f       	adc	r29, r25
    2c76:	40 e0       	ldi	r20, 0x00	; 0
    2c78:	69 e0       	ldi	r22, 0x09	; 9
    2c7a:	c8 01       	movw	r24, r16
    2c7c:	07 d4       	rcall	.+2062   	; 0x348c <Si114xWriteToRegister>
    2c7e:	c8 0f       	add	r28, r24
    2c80:	d9 1f       	adc	r29, r25
    2c82:	c8 01       	movw	r24, r16
    2c84:	1a df       	rcall	.-460    	; 0x2aba <si114x_reset>
    2c86:	c8 0f       	add	r28, r24
    2c88:	d9 1f       	adc	r29, r25
    2c8a:	4f ef       	ldi	r20, 0xFF	; 255
    2c8c:	6f e0       	ldi	r22, 0x0F	; 15
    2c8e:	c8 01       	movw	r24, r16
    2c90:	fd d3       	rcall	.+2042   	; 0x348c <Si114xWriteToRegister>
    2c92:	c8 0f       	add	r28, r24
    2c94:	d9 1f       	adc	r29, r25
    2c96:	40 e0       	ldi	r20, 0x00	; 0
    2c98:	60 e1       	ldi	r22, 0x10	; 16
    2c9a:	c8 01       	movw	r24, r16
    2c9c:	f7 d3       	rcall	.+2030   	; 0x348c <Si114xWriteToRegister>
    2c9e:	c8 0f       	add	r28, r24
    2ca0:	d9 1f       	adc	r29, r25
    2ca2:	47 e7       	ldi	r20, 0x77	; 119
    2ca4:	61 e0       	ldi	r22, 0x01	; 1
    2ca6:	c8 01       	movw	r24, r16
    2ca8:	ab de       	rcall	.-682    	; 0x2a00 <Si114xParamSet>
    2caa:	c8 0f       	add	r28, r24
    2cac:	d9 1f       	adc	r29, r25
    2cae:	41 e0       	ldi	r20, 0x01	; 1
    2cb0:	63 e0       	ldi	r22, 0x03	; 3
    2cb2:	c8 01       	movw	r24, r16
    2cb4:	eb d3       	rcall	.+2006   	; 0x348c <Si114xWriteToRegister>
    2cb6:	c8 0f       	add	r28, r24
    2cb8:	d9 1f       	adc	r29, r25
    2cba:	4d e1       	ldi	r20, 0x1D	; 29
    2cbc:	64 e0       	ldi	r22, 0x04	; 4
    2cbe:	c8 01       	movw	r24, r16
    2cc0:	e5 d3       	rcall	.+1994   	; 0x348c <Si114xWriteToRegister>
    2cc2:	c8 0f       	add	r28, r24
    2cc4:	d9 1f       	adc	r29, r25
    2cc6:	40 e0       	ldi	r20, 0x00	; 0
    2cc8:	65 e0       	ldi	r22, 0x05	; 5
    2cca:	c8 01       	movw	r24, r16
    2ccc:	df d3       	rcall	.+1982   	; 0x348c <Si114xWriteToRegister>
    2cce:	c8 0f       	add	r28, r24
    2cd0:	d9 1f       	adc	r29, r25
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	66 e0       	ldi	r22, 0x06	; 6
    2cd6:	c8 01       	movw	r24, r16
    2cd8:	d9 d3       	rcall	.+1970   	; 0x348c <Si114xWriteToRegister>
    2cda:	c8 0f       	add	r28, r24
    2cdc:	d9 1f       	adc	r29, r25
    2cde:	43 e0       	ldi	r20, 0x03	; 3
    2ce0:	67 e0       	ldi	r22, 0x07	; 7
    2ce2:	c8 01       	movw	r24, r16
    2ce4:	8d de       	rcall	.-742    	; 0x2a00 <Si114xParamSet>
    2ce6:	c8 0f       	add	r28, r24
    2ce8:	d9 1f       	adc	r29, r25
    2cea:	43 e0       	ldi	r20, 0x03	; 3
    2cec:	68 e0       	ldi	r22, 0x08	; 8
    2cee:	c8 01       	movw	r24, r16
    2cf0:	87 de       	rcall	.-754    	; 0x2a00 <Si114xParamSet>
    2cf2:	c8 0f       	add	r28, r24
    2cf4:	d9 1f       	adc	r29, r25
    2cf6:	43 e0       	ldi	r20, 0x03	; 3
    2cf8:	69 e0       	ldi	r22, 0x09	; 9
    2cfa:	c8 01       	movw	r24, r16
    2cfc:	81 de       	rcall	.-766    	; 0x2a00 <Si114xParamSet>
    2cfe:	c8 0f       	add	r28, r24
    2d00:	d9 1f       	adc	r29, r25
    2d02:	43 e0       	ldi	r20, 0x03	; 3
    2d04:	6e e0       	ldi	r22, 0x0E	; 14
    2d06:	c8 01       	movw	r24, r16
    2d08:	7b de       	rcall	.-778    	; 0x2a00 <Si114xParamSet>
    2d0a:	c8 0f       	add	r28, r24
    2d0c:	d9 1f       	adc	r29, r25
    2d0e:	40 e0       	ldi	r20, 0x00	; 0
    2d10:	6b e0       	ldi	r22, 0x0B	; 11
    2d12:	c8 01       	movw	r24, r16
    2d14:	75 de       	rcall	.-790    	; 0x2a00 <Si114xParamSet>
    2d16:	c8 0f       	add	r28, r24
    2d18:	d9 1f       	adc	r29, r25
    2d1a:	40 e0       	ldi	r20, 0x00	; 0
    2d1c:	6e e1       	ldi	r22, 0x1E	; 30
    2d1e:	c8 01       	movw	r24, r16
    2d20:	6f de       	rcall	.-802    	; 0x2a00 <Si114xParamSet>
    2d22:	c8 0f       	add	r28, r24
    2d24:	d9 1f       	adc	r29, r25
    2d26:	40 e0       	ldi	r20, 0x00	; 0
    2d28:	61 e1       	ldi	r22, 0x11	; 17
    2d2a:	c8 01       	movw	r24, r16
    2d2c:	69 de       	rcall	.-814    	; 0x2a00 <Si114xParamSet>
    2d2e:	c8 0f       	add	r28, r24
    2d30:	d9 1f       	adc	r29, r25
    2d32:	41 e2       	ldi	r20, 0x21	; 33
    2d34:	62 e0       	ldi	r22, 0x02	; 2
    2d36:	c8 01       	movw	r24, r16
    2d38:	63 de       	rcall	.-826    	; 0x2a00 <Si114xParamSet>
    2d3a:	c8 0f       	add	r28, r24
    2d3c:	d9 1f       	adc	r29, r25
    2d3e:	44 e0       	ldi	r20, 0x04	; 4
    2d40:	63 e0       	ldi	r22, 0x03	; 3
    2d42:	c8 01       	movw	r24, r16
    2d44:	5d de       	rcall	.-838    	; 0x2a00 <Si114xParamSet>
    2d46:	c8 0f       	add	r28, r24
    2d48:	d9 1f       	adc	r29, r25
    2d4a:	40 e7       	ldi	r20, 0x70	; 112
    2d4c:	6a e0       	ldi	r22, 0x0A	; 10
    2d4e:	c8 01       	movw	r24, r16
    2d50:	57 de       	rcall	.-850    	; 0x2a00 <Si114xParamSet>
    2d52:	c8 0f       	add	r28, r24
    2d54:	d9 1f       	adc	r29, r25
    2d56:	40 e7       	ldi	r20, 0x70	; 112
    2d58:	6d e1       	ldi	r22, 0x1D	; 29
    2d5a:	c8 01       	movw	r24, r16
    2d5c:	51 de       	rcall	.-862    	; 0x2a00 <Si114xParamSet>
    2d5e:	c8 0f       	add	r28, r24
    2d60:	d9 1f       	adc	r29, r25
    2d62:	40 e7       	ldi	r20, 0x70	; 112
    2d64:	60 e1       	ldi	r22, 0x10	; 16
    2d66:	c8 01       	movw	r24, r16
    2d68:	4b de       	rcall	.-874    	; 0x2a00 <Si114xParamSet>
    2d6a:	c8 0f       	add	r28, r24
    2d6c:	d9 1f       	adc	r29, r25
    2d6e:	44 e0       	ldi	r20, 0x04	; 4
    2d70:	6c e0       	ldi	r22, 0x0C	; 12
    2d72:	c8 01       	movw	r24, r16
    2d74:	45 de       	rcall	.-886    	; 0x2a00 <Si114xParamSet>
    2d76:	c8 0f       	add	r28, r24
    2d78:	d9 1f       	adc	r29, r25
    2d7a:	40 e2       	ldi	r20, 0x20	; 32
    2d7c:	6f e1       	ldi	r22, 0x1F	; 31
    2d7e:	c8 01       	movw	r24, r16
    2d80:	3f de       	rcall	.-898    	; 0x2a00 <Si114xParamSet>
    2d82:	c8 0f       	add	r28, r24
    2d84:	d9 1f       	adc	r29, r25
    2d86:	40 e2       	ldi	r20, 0x20	; 32
    2d88:	62 e1       	ldi	r22, 0x12	; 18
    2d8a:	c8 01       	movw	r24, r16
    2d8c:	39 de       	rcall	.-910    	; 0x2a00 <Si114xParamSet>
    2d8e:	c8 0f       	add	r28, r24
    2d90:	d9 1f       	adc	r29, r25
    2d92:	44 e9       	ldi	r20, 0x94	; 148
    2d94:	68 e0       	ldi	r22, 0x08	; 8
    2d96:	c8 01       	movw	r24, r16
    2d98:	79 d3       	rcall	.+1778   	; 0x348c <Si114xWriteToRegister>
    2d9a:	c8 0f       	add	r28, r24
    2d9c:	d9 1f       	adc	r29, r25
    2d9e:	48 e0       	ldi	r20, 0x08	; 8
    2da0:	6a e0       	ldi	r22, 0x0A	; 10
    2da2:	c8 01       	movw	r24, r16
    2da4:	73 d3       	rcall	.+1766   	; 0x348c <Si114xWriteToRegister>
    2da6:	c8 0f       	add	r28, r24
    2da8:	d9 1f       	adc	r29, r25
    2daa:	48 e0       	ldi	r20, 0x08	; 8
    2dac:	69 e0       	ldi	r22, 0x09	; 9
    2dae:	c8 01       	movw	r24, r16
    2db0:	6d d3       	rcall	.+1754   	; 0x348c <Si114xWriteToRegister>
    2db2:	c8 0f       	add	r28, r24
    2db4:	d9 1f       	adc	r29, r25
    2db6:	c8 01       	movw	r24, r16
    2db8:	21 de       	rcall	.-958    	; 0x29fc <Si114xPsAlsAuto>
    2dba:	8c 0f       	add	r24, r28
    2dbc:	9d 1f       	adc	r25, r29
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	1f 91       	pop	r17
    2dc4:	0f 91       	pop	r16
    2dc6:	08 95       	ret

00002dc8 <si114x_setup>:
    2dc8:	e0 e7       	ldi	r30, 0x70	; 112
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	83 81       	ldd	r24, Z+3	; 0x03
    2dce:	8d 7f       	andi	r24, 0xFD	; 253
    2dd0:	83 83       	std	Z+3, r24	; 0x03
    2dd2:	e0 e4       	ldi	r30, 0x40	; 64
    2dd4:	f8 e0       	ldi	r31, 0x08	; 8
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	80 83       	st	Z, r24
    2dda:	90 e8       	ldi	r25, 0x80	; 128
    2ddc:	96 a3       	std	Z+38, r25	; 0x26
    2dde:	9c e0       	ldi	r25, 0x0C	; 12
    2de0:	97 a3       	std	Z+39, r25	; 0x27
    2de2:	86 83       	std	Z+6, r24	; 0x06
    2de4:	8a e5       	ldi	r24, 0x5A	; 90
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	68 de       	rcall	.-816    	; 0x2aba <si114x_reset>
    2dea:	2f ef       	ldi	r18, 0xFF	; 255
    2dec:	81 ee       	ldi	r24, 0xE1	; 225
    2dee:	94 e0       	ldi	r25, 0x04	; 4
    2df0:	21 50       	subi	r18, 0x01	; 1
    2df2:	80 40       	sbci	r24, 0x00	; 0
    2df4:	90 40       	sbci	r25, 0x00	; 0
    2df6:	e1 f7       	brne	.-8      	; 0x2df0 <si114x_setup+0x28>
    2df8:	00 c0       	rjmp	.+0      	; 0x2dfa <si114x_setup+0x32>
    2dfa:	00 00       	nop
    2dfc:	8a e5       	ldi	r24, 0x5A	; 90
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	2b cf       	rjmp	.-426    	; 0x2c58 <si114x_init>

00002e02 <si114x_baseline_calibration>:
    2e02:	ef 92       	push	r14
    2e04:	ff 92       	push	r15
    2e06:	0f 93       	push	r16
    2e08:	1f 93       	push	r17
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	ec 01       	movw	r28, r24
    2e10:	db df       	rcall	.-74     	; 0x2dc8 <si114x_setup>
    2e12:	80 e8       	ldi	r24, 0x80	; 128
    2e14:	80 93 08 20 	sts	0x2008, r24
    2e18:	60 e0       	ldi	r22, 0x00	; 0
    2e1a:	80 eb       	ldi	r24, 0xB0	; 176
    2e1c:	94 e2       	ldi	r25, 0x24	; 36
    2e1e:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
    2e22:	75 ed       	ldi	r23, 0xD5	; 213
    2e24:	e7 2e       	mov	r14, r23
    2e26:	74 e2       	ldi	r23, 0x24	; 36
    2e28:	f7 2e       	mov	r15, r23
    2e2a:	01 e0       	ldi	r16, 0x01	; 1
    2e2c:	24 e0       	ldi	r18, 0x04	; 4
    2e2e:	44 e0       	ldi	r20, 0x04	; 4
    2e30:	66 e0       	ldi	r22, 0x06	; 6
    2e32:	86 e0       	ldi	r24, 0x06	; 6
    2e34:	0e 94 fe 20 	call	0x41fc	; 0x41fc <display_draw_filled_rect>
    2e38:	00 e0       	ldi	r16, 0x00	; 0
    2e3a:	22 e0       	ldi	r18, 0x02	; 2
    2e3c:	42 e0       	ldi	r20, 0x02	; 2
    2e3e:	67 e0       	ldi	r22, 0x07	; 7
    2e40:	87 e0       	ldi	r24, 0x07	; 7
    2e42:	0e 94 fe 20 	call	0x41fc	; 0x41fc <display_draw_filled_rect>
    2e46:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
    2e4a:	ce 01       	movw	r24, r28
    2e4c:	5b dd       	rcall	.-1354   	; 0x2904 <si114x_get_data>
    2e4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e50:	8f 93       	push	r24
    2e52:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e54:	8f 93       	push	r24
    2e56:	ff 92       	push	r15
    2e58:	ef 92       	push	r14
    2e5a:	0e 94 56 54 	call	0xa8ac	; 0xa8ac <printf>
    2e5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e60:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	89 3e       	cpi	r24, 0xE9	; 233
    2e6c:	23 e0       	ldi	r18, 0x03	; 3
    2e6e:	92 07       	cpc	r25, r18
    2e70:	e0 f6       	brcc	.-72     	; 0x2e2a <si114x_baseline_calibration+0x28>
    2e72:	80 93 31 2b 	sts	0x2B31, r24
    2e76:	90 93 32 2b 	sts	0x2B32, r25
    2e7a:	8f ef       	ldi	r24, 0xFF	; 255
    2e7c:	97 ea       	ldi	r25, 0xA7	; 167
    2e7e:	21 e6       	ldi	r18, 0x61	; 97
    2e80:	81 50       	subi	r24, 0x01	; 1
    2e82:	90 40       	sbci	r25, 0x00	; 0
    2e84:	20 40       	sbci	r18, 0x00	; 0
    2e86:	e1 f7       	brne	.-8      	; 0x2e80 <si114x_baseline_calibration+0x7e>
    2e88:	00 c0       	rjmp	.+0      	; 0x2e8a <si114x_baseline_calibration+0x88>
    2e8a:	00 00       	nop
    2e8c:	01 e8       	ldi	r16, 0x81	; 129
    2e8e:	10 e0       	ldi	r17, 0x00	; 0
    2e90:	01 50       	subi	r16, 0x01	; 1
    2e92:	11 09       	sbc	r17, r1
    2e94:	01 15       	cp	r16, r1
    2e96:	11 05       	cpc	r17, r1
    2e98:	69 f0       	breq	.+26     	; 0x2eb4 <si114x_baseline_calibration+0xb2>
    2e9a:	80 91 e8 2a 	lds	r24, 0x2AE8
    2e9e:	90 91 e9 2a 	lds	r25, 0x2AE9
    2ea2:	8a 83       	std	Y+2, r24	; 0x02
    2ea4:	9b 83       	std	Y+3, r25	; 0x03
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	2d dd       	rcall	.-1446   	; 0x2904 <si114x_get_data>
    2eaa:	be 01       	movw	r22, r28
    2eac:	8a e5       	ldi	r24, 0x5A	; 90
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	cd d1       	rcall	.+922    	; 0x324c <si114x_process_samples>
    2eb2:	ee cf       	rjmp	.-36     	; 0x2e90 <si114x_baseline_calibration+0x8e>
    2eb4:	df 91       	pop	r29
    2eb6:	cf 91       	pop	r28
    2eb8:	1f 91       	pop	r17
    2eba:	0f 91       	pop	r16
    2ebc:	ff 90       	pop	r15
    2ebe:	ef 90       	pop	r14
    2ec0:	08 95       	ret

00002ec2 <__vector_20>:

ISR(TCC1_OVF_vect) {
    2ec2:	1f 92       	push	r1
    2ec4:	0f 92       	push	r0
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	0f 92       	push	r0
    2eca:	11 24       	eor	r1, r1
    2ecc:	08 b6       	in	r0, 0x38	; 56
    2ece:	0f 92       	push	r0
    2ed0:	18 be       	out	0x38, r1	; 56
    2ed2:	8f 93       	push	r24
    2ed4:	9f 93       	push	r25
	counter++;
    2ed6:	80 91 e8 2a 	lds	r24, 0x2AE8
    2eda:	90 91 e9 2a 	lds	r25, 0x2AE9
    2ede:	01 96       	adiw	r24, 0x01	; 1
    2ee0:	80 93 e8 2a 	sts	0x2AE8, r24
    2ee4:	90 93 e9 2a 	sts	0x2AE9, r25
}
    2ee8:	9f 91       	pop	r25
    2eea:	8f 91       	pop	r24
    2eec:	0f 90       	pop	r0
    2eee:	08 be       	out	0x38, r0	; 56
    2ef0:	0f 90       	pop	r0
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	0f 90       	pop	r0
    2ef6:	1f 90       	pop	r1
    2ef8:	18 95       	reti

00002efa <isIRStable>:
        }
    }
}

char isIRStable( SI114X_IRQ_SAMPLE *samples)
{
    2efa:	8f 92       	push	r8
    2efc:	9f 92       	push	r9
    2efe:	af 92       	push	r10
    2f00:	bf 92       	push	r11
    2f02:	cf 92       	push	r12
    2f04:	df 92       	push	r13
    2f06:	ef 92       	push	r14
    2f08:	ff 92       	push	r15
                                        //
    u32 xdata IR = (u32) samples->ir; // Make a copy of ALS IR Reading
    
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 
    2f0a:	40 91 f9 2a 	lds	r20, 0x2AF9
    2f0e:	50 91 fa 2a 	lds	r21, 0x2AFA
    2f12:	60 91 fb 2a 	lds	r22, 0x2AFB
    2f16:	70 91 fc 2a 	lds	r23, 0x2AFC
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	c0 84       	ldd	r12, Z+8	; 0x08
    2f1e:	d1 84       	ldd	r13, Z+9	; 0x09
    2f20:	45 2b       	or	r20, r21
    2f22:	46 2b       	or	r20, r22
    2f24:	47 2b       	or	r20, r23
    2f26:	61 f4       	brne	.+24     	; 0x2f40 <isIRStable+0x46>
    2f28:	c6 01       	movw	r24, r12
    2f2a:	a0 e0       	ldi	r26, 0x00	; 0
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	80 93 f9 2a 	sts	0x2AF9, r24
    2f32:	90 93 fa 2a 	sts	0x2AFA, r25
    2f36:	a0 93 fb 2a 	sts	0x2AFB, r26
    2f3a:	b0 93 fc 2a 	sts	0x2AFC, r27
    2f3e:	06 c0       	rjmp	.+12     	; 0x2f4c <isIRStable+0x52>

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    2f40:	f1 e8       	ldi	r31, 0x81	; 129
    2f42:	cf 16       	cp	r12, r31
    2f44:	fb eb       	ldi	r31, 0xBB	; 187
    2f46:	df 06       	cpc	r13, r31
    2f48:	08 f0       	brcs	.+2      	; 0x2f4c <isIRStable+0x52>
    2f4a:	47 c0       	rjmp	.+142    	; 0x2fda <isIRStable+0xe0>

    if( samples->ir < (IRlast + IRlast/2) && samples->ir > (IRlast - IRlast/2))
    2f4c:	e1 2c       	mov	r14, r1
    2f4e:	f1 2c       	mov	r15, r1
    2f50:	20 91 f9 2a 	lds	r18, 0x2AF9
    2f54:	30 91 fa 2a 	lds	r19, 0x2AFA
    2f58:	40 91 fb 2a 	lds	r20, 0x2AFB
    2f5c:	50 91 fc 2a 	lds	r21, 0x2AFC
    2f60:	da 01       	movw	r26, r20
    2f62:	c9 01       	movw	r24, r18
    2f64:	b6 95       	lsr	r27
    2f66:	a7 95       	ror	r26
    2f68:	97 95       	ror	r25
    2f6a:	87 95       	ror	r24
    2f6c:	4c 01       	movw	r8, r24
    2f6e:	5d 01       	movw	r10, r26
    2f70:	82 0e       	add	r8, r18
    2f72:	93 1e       	adc	r9, r19
    2f74:	a4 1e       	adc	r10, r20
    2f76:	b5 1e       	adc	r11, r21
    2f78:	c8 14       	cp	r12, r8
    2f7a:	d9 04       	cpc	r13, r9
    2f7c:	ea 04       	cpc	r14, r10
    2f7e:	fb 04       	cpc	r15, r11
    2f80:	20 f5       	brcc	.+72     	; 0x2fca <isIRStable+0xd0>
    2f82:	49 01       	movw	r8, r18
    2f84:	5a 01       	movw	r10, r20
    2f86:	88 1a       	sub	r8, r24
    2f88:	99 0a       	sbc	r9, r25
    2f8a:	aa 0a       	sbc	r10, r26
    2f8c:	bb 0a       	sbc	r11, r27
    2f8e:	8c 14       	cp	r8, r12
    2f90:	9d 04       	cpc	r9, r13
    2f92:	ae 04       	cpc	r10, r14
    2f94:	bf 04       	cpc	r11, r15
    2f96:	c8 f4       	brcc	.+50     	; 0x2fca <isIRStable+0xd0>
    {
        // If IR is within 3 dB, declare it stable
        // and perform some averaging
        IRlast = (samples->ir + (IRlast*3)) / 4;
    2f98:	a3 e0       	ldi	r26, 0x03	; 3
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	0e 94 5f 51 	call	0xa2be	; 0xa2be <__muluhisi3>
    2fa0:	6c 0d       	add	r22, r12
    2fa2:	7d 1d       	adc	r23, r13
    2fa4:	8e 1d       	adc	r24, r14
    2fa6:	9f 1d       	adc	r25, r15
    2fa8:	22 e0       	ldi	r18, 0x02	; 2
    2faa:	96 95       	lsr	r25
    2fac:	87 95       	ror	r24
    2fae:	77 95       	ror	r23
    2fb0:	67 95       	ror	r22
    2fb2:	2a 95       	dec	r18
    2fb4:	d1 f7       	brne	.-12     	; 0x2faa <isIRStable+0xb0>
    2fb6:	60 93 f9 2a 	sts	0x2AF9, r22
    2fba:	70 93 fa 2a 	sts	0x2AFA, r23
    2fbe:	80 93 fb 2a 	sts	0x2AFB, r24
    2fc2:	90 93 fc 2a 	sts	0x2AFC, r25
        return 1;
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	09 c0       	rjmp	.+18     	; 0x2fdc <isIRStable+0xe2>
    }
    else
    {
        // Otherwise, return false and update
        // new IRlast value for next time
        IRlast = samples->ir;
    2fca:	c0 92 f9 2a 	sts	0x2AF9, r12
    2fce:	d0 92 fa 2a 	sts	0x2AFA, r13
    2fd2:	e0 92 fb 2a 	sts	0x2AFB, r14
    2fd6:	f0 92 fc 2a 	sts	0x2AFC, r15
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    2fda:	80 e0       	ldi	r24, 0x00	; 0
        // new IRlast value for next time
        IRlast = samples->ir;
        return 0;
    }
    return 0;
}
    2fdc:	ff 90       	pop	r15
    2fde:	ef 90       	pop	r14
    2fe0:	df 90       	pop	r13
    2fe2:	cf 90       	pop	r12
    2fe4:	bf 90       	pop	r11
    2fe6:	af 90       	pop	r10
    2fe8:	9f 90       	pop	r9
    2fea:	8f 90       	pop	r8
    2fec:	08 95       	ret

00002fee <IRCompensation>:
//             use { 11, 33, 33 }
//          Sm PD, PSRANGE = 1 
//             use { 23, 64, 56 }
////////////////////////////////////////////////////////////////////////////////
void IRCompensation(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u8 ircorrection[])
{
    2fee:	0f 93       	push	r16
    2ff0:	1f 93       	push	r17
    2ff2:	cf 93       	push	r28
    2ff4:	df 93       	push	r29
    2ff6:	eb 01       	movw	r28, r22
    2ff8:	fa 01       	movw	r30, r20
    // Calculate correction factor based on the ALS IR + PS reading 
    // subtracting out the 256 count offset contained in both measurements
    // Full equation comes out to:
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    2ffa:	81 30       	cpi	r24, 0x01	; 1
    2ffc:	f1 f1       	breq	.+124    	; 0x307a <IRCompensation+0x8c>
    2ffe:	00 f1       	brcs	.+64     	; 0x3040 <IRCompensation+0x52>
    3000:	82 30       	cpi	r24, 0x02	; 2
    3002:	09 f0       	breq	.+2      	; 0x3006 <IRCompensation+0x18>
    3004:	56 c0       	rjmp	.+172    	; 0x30b2 <IRCompensation+0xc4>
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
            Correction = Correction/10000;
            samples->ps2 = samples->ps2 + Correction;            
            break;
		case 2:
			Correction = ((u32)samples->ir + (u32)(samples->ps3) - 512) * (u32) ircorrection[proxChannel];
    3006:	0e 85       	ldd	r16, Y+14	; 0x0e
    3008:	1f 85       	ldd	r17, Y+15	; 0x0f
    300a:	a2 81       	ldd	r26, Z+2	; 0x02
    300c:	88 85       	ldd	r24, Y+8	; 0x08
    300e:	99 85       	ldd	r25, Y+9	; 0x09
    3010:	98 01       	movw	r18, r16
    3012:	40 e0       	ldi	r20, 0x00	; 0
    3014:	50 e0       	ldi	r21, 0x00	; 0
    3016:	28 0f       	add	r18, r24
    3018:	39 1f       	adc	r19, r25
    301a:	41 1d       	adc	r20, r1
    301c:	51 1d       	adc	r21, r1
    301e:	32 50       	subi	r19, 0x02	; 2
    3020:	41 09       	sbc	r20, r1
    3022:	51 09       	sbc	r21, r1
    3024:	b0 e0       	ldi	r27, 0x00	; 0
    3026:	0e 94 5f 51 	call	0xa2be	; 0xa2be <__muluhisi3>
			Correction = Correction/10000;
    302a:	20 e1       	ldi	r18, 0x10	; 16
    302c:	37 e2       	ldi	r19, 0x27	; 39
    302e:	40 e0       	ldi	r20, 0x00	; 0
    3030:	50 e0       	ldi	r21, 0x00	; 0
    3032:	0e 94 28 51 	call	0xa250	; 0xa250 <__udivmodsi4>
			samples->ps3 = samples->ps3 + Correction;
    3036:	20 0f       	add	r18, r16
    3038:	31 1f       	adc	r19, r17
    303a:	2e 87       	std	Y+14, r18	; 0x0e
    303c:	3f 87       	std	Y+15, r19	; 0x0f
			break;
    303e:	39 c0       	rjmp	.+114    	; 0x30b2 <IRCompensation+0xc4>
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    3040:	0a 85       	ldd	r16, Y+10	; 0x0a
    3042:	1b 85       	ldd	r17, Y+11	; 0x0b
    3044:	a0 81       	ld	r26, Z
    3046:	88 85       	ldd	r24, Y+8	; 0x08
    3048:	99 85       	ldd	r25, Y+9	; 0x09
    304a:	98 01       	movw	r18, r16
    304c:	40 e0       	ldi	r20, 0x00	; 0
    304e:	50 e0       	ldi	r21, 0x00	; 0
    3050:	28 0f       	add	r18, r24
    3052:	39 1f       	adc	r19, r25
    3054:	41 1d       	adc	r20, r1
    3056:	51 1d       	adc	r21, r1
    3058:	32 50       	subi	r19, 0x02	; 2
    305a:	41 09       	sbc	r20, r1
    305c:	51 09       	sbc	r21, r1
    305e:	b0 e0       	ldi	r27, 0x00	; 0
    3060:	0e 94 5f 51 	call	0xa2be	; 0xa2be <__muluhisi3>
            Correction = Correction/10000;
    3064:	20 e1       	ldi	r18, 0x10	; 16
    3066:	37 e2       	ldi	r19, 0x27	; 39
    3068:	40 e0       	ldi	r20, 0x00	; 0
    306a:	50 e0       	ldi	r21, 0x00	; 0
    306c:	0e 94 28 51 	call	0xa250	; 0xa250 <__udivmodsi4>
            samples->ps1 = samples->ps1 + Correction;    
    3070:	20 0f       	add	r18, r16
    3072:	31 1f       	adc	r19, r17
    3074:	2a 87       	std	Y+10, r18	; 0x0a
    3076:	3b 87       	std	Y+11, r19	; 0x0b
    3078:	1c c0       	rjmp	.+56     	; 0x30b2 <IRCompensation+0xc4>
            break;
        case 1:
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
    307a:	0c 85       	ldd	r16, Y+12	; 0x0c
    307c:	1d 85       	ldd	r17, Y+13	; 0x0d
    307e:	a1 81       	ldd	r26, Z+1	; 0x01
    3080:	88 85       	ldd	r24, Y+8	; 0x08
    3082:	99 85       	ldd	r25, Y+9	; 0x09
    3084:	98 01       	movw	r18, r16
    3086:	40 e0       	ldi	r20, 0x00	; 0
    3088:	50 e0       	ldi	r21, 0x00	; 0
    308a:	28 0f       	add	r18, r24
    308c:	39 1f       	adc	r19, r25
    308e:	41 1d       	adc	r20, r1
    3090:	51 1d       	adc	r21, r1
    3092:	32 50       	subi	r19, 0x02	; 2
    3094:	41 09       	sbc	r20, r1
    3096:	51 09       	sbc	r21, r1
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	0e 94 5f 51 	call	0xa2be	; 0xa2be <__muluhisi3>
            Correction = Correction/10000;
    309e:	20 e1       	ldi	r18, 0x10	; 16
    30a0:	37 e2       	ldi	r19, 0x27	; 39
    30a2:	40 e0       	ldi	r20, 0x00	; 0
    30a4:	50 e0       	ldi	r21, 0x00	; 0
    30a6:	0e 94 28 51 	call	0xa250	; 0xa250 <__udivmodsi4>
            samples->ps2 = samples->ps2 + Correction;            
    30aa:	20 0f       	add	r18, r16
    30ac:	31 1f       	adc	r19, r17
    30ae:	2c 87       	std	Y+12, r18	; 0x0c
    30b0:	3d 87       	std	Y+13, r19	; 0x0d
			samples->ps3 = samples->ps3 + Correction;
			break;
        default:
            break;
    }
}
    30b2:	df 91       	pop	r29
    30b4:	cf 91       	pop	r28
    30b6:	1f 91       	pop	r17
    30b8:	0f 91       	pop	r16
    30ba:	08 95       	ret

000030bc <calcBaseline>:
//          50  = Lg PD, PSRANGE=0, 180 mA 
//          10  = Lg PD, PSRANGE=1, 360 mA 
//          4  = Sm PD, PSRANGE=1, 360 mA 
////////////////////////////////////////////////////////////////////////////////
void calcBaseline(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u16 noise_margin)
{
    30bc:	cf 92       	push	r12
    30be:	df 92       	push	r13
    30c0:	ef 92       	push	r14
    30c2:	ff 92       	push	r15
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29

    static u16 xdata dynamic_baseline[3] = {0,0,0};

    u16 xdata *pPS;

    switch(proxChannel)
    30cc:	81 30       	cpi	r24, 0x01	; 1
    30ce:	49 f0       	breq	.+18     	; 0x30e2 <calcBaseline+0x26>
    30d0:	28 f0       	brcs	.+10     	; 0x30dc <calcBaseline+0x20>
    30d2:	82 30       	cpi	r24, 0x02	; 2
    30d4:	49 f4       	brne	.+18     	; 0x30e8 <calcBaseline+0x2c>
            break;
        case 1:
            pPS = &samples->ps2;
            break;
        case 2:
            pPS = &samples->ps3;
    30d6:	62 5f       	subi	r22, 0xF2	; 242
    30d8:	7f 4f       	sbci	r23, 0xFF	; 255
            break;
    30da:	25 c0       	rjmp	.+74     	; 0x3126 <calcBaseline+0x6a>
    u16 xdata *pPS;

    switch(proxChannel)
    {
        case 0:
            pPS = &samples->ps1;
    30dc:	66 5f       	subi	r22, 0xF6	; 246
    30de:	7f 4f       	sbci	r23, 0xFF	; 255
            break;
    30e0:	22 c0       	rjmp	.+68     	; 0x3126 <calcBaseline+0x6a>
        case 1:
            pPS = &samples->ps2;
    30e2:	64 5f       	subi	r22, 0xF4	; 244
    30e4:	7f 4f       	sbci	r23, 0xFF	; 255
            break;
    30e6:	1f c0       	rjmp	.+62     	; 0x3126 <calcBaseline+0x6a>
            break;
        default:
            // Invalid Prox Channel. Reset all static variables 
            // to initial values
            average    = 0;
            dynamic_baseline[0] = 0;
    30e8:	10 92 f3 2a 	sts	0x2AF3, r1
    30ec:	10 92 f4 2a 	sts	0x2AF4, r1
            dynamic_baseline[1] = 0;
    30f0:	10 92 f5 2a 	sts	0x2AF5, r1
    30f4:	10 92 f6 2a 	sts	0x2AF6, r1
			dynamic_baseline[2] = 0;
    30f8:	10 92 f7 2a 	sts	0x2AF7, r1
    30fc:	10 92 f8 2a 	sts	0x2AF8, r1
            rollingMax[0] = 0;
    3100:	10 92 ed 2a 	sts	0x2AED, r1
    3104:	10 92 ee 2a 	sts	0x2AEE, r1
            rollingMax[1] = 0;
    3108:	10 92 ef 2a 	sts	0x2AEF, r1
    310c:	10 92 f0 2a 	sts	0x2AF0, r1
			rollingMax[2] = 0;
    3110:	10 92 f1 2a 	sts	0x2AF1, r1
    3114:	10 92 f2 2a 	sts	0x2AF2, r1
            Maxcount[0]   = 0;
    3118:	10 92 ea 2a 	sts	0x2AEA, r1
            Maxcount[1]   = 0;
    311c:	10 92 eb 2a 	sts	0x2AEB, r1
			Maxcount[2]   = 0;
    3120:	10 92 ec 2a 	sts	0x2AEC, r1
            return;
    3124:	8a c0       	rjmp	.+276    	; 0x323a <calcBaseline+0x17e>
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    3126:	c8 2e       	mov	r12, r24
    3128:	d1 2c       	mov	r13, r1
    312a:	f6 01       	movw	r30, r12
    312c:	ee 0f       	add	r30, r30
    312e:	ff 1f       	adc	r31, r31
    3130:	ef 01       	movw	r28, r30
    3132:	cd 50       	subi	r28, 0x0D	; 13
    3134:	d5 4d       	sbci	r29, 0xD5	; 213
    3136:	88 81       	ld	r24, Y
    3138:	99 81       	ldd	r25, Y+1	; 0x01
    313a:	db 01       	movw	r26, r22
    313c:	6d 91       	ld	r22, X+
    313e:	7c 91       	ld	r23, X
    3140:	89 2b       	or	r24, r25
    3142:	71 f4       	brne	.+28     	; 0x3160 <calcBaseline+0xa4>
    3144:	cf 01       	movw	r24, r30
    3146:	83 50       	subi	r24, 0x03	; 3
    3148:	95 4d       	sbci	r25, 0xD5	; 213
    314a:	dc 01       	movw	r26, r24
    314c:	8d 91       	ld	r24, X+
    314e:	9c 91       	ld	r25, X
    3150:	68 17       	cp	r22, r24
    3152:	79 07       	cpc	r23, r25
    3154:	18 f4       	brcc	.+6      	; 0x315c <calcBaseline+0xa0>
    {
       dynamic_baseline[proxChannel] = *pPS;
    3156:	68 83       	st	Y, r22
    3158:	79 83       	std	Y+1, r23	; 0x01
    315a:	02 c0       	rjmp	.+4      	; 0x3160 <calcBaseline+0xa4>
    } else if ( dynamic_baseline[proxChannel] == 0)
    {
       dynamic_baseline[proxChannel] = maxLeakage[proxChannel];
    315c:	88 83       	st	Y, r24
    315e:	99 83       	std	Y+1, r25	; 0x01
    } 

    // Only process samples which are below the maxLeakage values, anything 
    // higher is a signal created by an object in front of the system which 
    // should not be baselined
    if ( *pPS < maxLeakage[proxChannel] )
    3160:	ef 01       	movw	r28, r30
    3162:	c3 50       	subi	r28, 0x03	; 3
    3164:	d5 4d       	sbci	r29, 0xD5	; 213
    3166:	88 81       	ld	r24, Y
    3168:	99 81       	ldd	r25, Y+1	; 0x01
    316a:	68 17       	cp	r22, r24
    316c:	79 07       	cpc	r23, r25
    316e:	08 f0       	brcs	.+2      	; 0x3172 <calcBaseline+0xb6>
    3170:	4d c0       	rjmp	.+154    	; 0x320c <calcBaseline+0x150>
    {
        average = dynamic_baseline[proxChannel]*7;
    3172:	ef 01       	movw	r28, r30
    3174:	cd 50       	subi	r28, 0x0D	; 13
    3176:	d5 4d       	sbci	r29, 0xD5	; 213
    3178:	09 90       	ld	r0, Y+
    317a:	d8 81       	ld	r29, Y
    317c:	c0 2d       	mov	r28, r0
    317e:	27 e0       	ldi	r18, 0x07	; 7
    3180:	2c 9f       	mul	r18, r28
    3182:	c0 01       	movw	r24, r0
    3184:	2d 9f       	mul	r18, r29
    3186:	90 0d       	add	r25, r0
    3188:	11 24       	eor	r1, r1
        average = average + (u32)(*pPS);
    318a:	8b 01       	movw	r16, r22
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	08 0f       	add	r16, r24
    3192:	19 1f       	adc	r17, r25
    3194:	21 1d       	adc	r18, r1
    3196:	31 1d       	adc	r19, r1
        average = average/8;
    3198:	a3 e0       	ldi	r26, 0x03	; 3
    319a:	36 95       	lsr	r19
    319c:	27 95       	ror	r18
    319e:	17 95       	ror	r17
    31a0:	07 95       	ror	r16
    31a2:	aa 95       	dec	r26
    31a4:	d1 f7       	brne	.-12     	; 0x319a <calcBaseline+0xde>
        // If the new sample has not changed the baseline average by a large 
        // amount, then allow the rollingMax variable to update. If the new 
        // sample did move the baseline average by a lot, then it's possible 
        // it was created by a proximity event. So, do not consider this part 
        // of the rollingMax
        if ( dynamic_baseline[proxChannel] <= (u16)average + (u16)average/64
    31a6:	c8 01       	movw	r24, r16
    31a8:	b6 e0       	ldi	r27, 0x06	; 6
    31aa:	96 95       	lsr	r25
    31ac:	87 95       	ror	r24
    31ae:	ba 95       	dec	r27
    31b0:	e1 f7       	brne	.-8      	; 0x31aa <calcBaseline+0xee>
    31b2:	7c 01       	movw	r14, r24
    31b4:	e0 0e       	add	r14, r16
    31b6:	f1 1e       	adc	r15, r17
    31b8:	ec 16       	cp	r14, r28
    31ba:	fd 06       	cpc	r15, r29
    31bc:	10 f1       	brcs	.+68     	; 0x3202 <calcBaseline+0x146>
            && dynamic_baseline[proxChannel] >= (u16)average - (u16)average/64)
    31be:	d8 01       	movw	r26, r16
    31c0:	a8 1b       	sub	r26, r24
    31c2:	b9 0b       	sbc	r27, r25
    31c4:	ca 17       	cp	r28, r26
    31c6:	db 07       	cpc	r29, r27
    31c8:	e0 f0       	brcs	.+56     	; 0x3202 <calcBaseline+0x146>
        {
            if ( rollingMax[proxChannel] == 0 )
    31ca:	ef 01       	movw	r28, r30
    31cc:	c3 51       	subi	r28, 0x13	; 19
    31ce:	d5 4d       	sbci	r29, 0xD5	; 213
    31d0:	e8 80       	ld	r14, Y
    31d2:	f9 80       	ldd	r15, Y+1	; 0x01
    31d4:	d6 01       	movw	r26, r12
    31d6:	a6 51       	subi	r26, 0x16	; 22
    31d8:	b5 4d       	sbci	r27, 0xD5	; 213
    31da:	e1 14       	cp	r14, r1
    31dc:	f1 04       	cpc	r15, r1
    31de:	71 f0       	breq	.+28     	; 0x31fc <calcBaseline+0x140>
            {
                rollingMax[proxChannel] = *pPS;
                Maxcount[proxChannel] = 0;
            } 
            else if ( rollingMax[proxChannel] >= *pPS )
    31e0:	e6 16       	cp	r14, r22
    31e2:	f7 06       	cpc	r15, r23
    31e4:	58 f0       	brcs	.+22     	; 0x31fc <calcBaseline+0x140>
            {
                (Maxcount[proxChannel]) += 1;
    31e6:	8c 91       	ld	r24, X
    31e8:	8f 5f       	subi	r24, 0xFF	; 255
    31ea:	8c 93       	st	X, r24
                if ( Maxcount[proxChannel] > 64 )
    31ec:	81 34       	cpi	r24, 0x41	; 65
    31ee:	48 f0       	brcs	.+18     	; 0x3202 <calcBaseline+0x146>
                {
                    (rollingMax[proxChannel]) -= 1;
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	e8 1a       	sub	r14, r24
    31f4:	f1 08       	sbc	r15, r1
    31f6:	e8 82       	st	Y, r14
    31f8:	f9 82       	std	Y+1, r15	; 0x01
    31fa:	02 c0       	rjmp	.+4      	; 0x3200 <calcBaseline+0x144>
                    Maxcount[proxChannel] = 0;
                }
            } 
            else
            {
                rollingMax[proxChannel] = *pPS;
    31fc:	68 83       	st	Y, r22
    31fe:	79 83       	std	Y+1, r23	; 0x01
                Maxcount[proxChannel] = 0;
    3200:	1c 92       	st	X, r1
            }
        }

        // Update the stored baseline average with the new value
        dynamic_baseline[proxChannel] = (u16)average;
    3202:	df 01       	movw	r26, r30
    3204:	ad 50       	subi	r26, 0x0D	; 13
    3206:	b5 4d       	sbci	r27, 0xD5	; 213
    3208:	0d 93       	st	X+, r16
    320a:	1c 93       	st	X, r17
    }

    // Use the rollingMax value to determine the baseline level
    if ( rollingMax[proxChannel] != 0 )
    320c:	df 01       	movw	r26, r30
    320e:	a3 51       	subi	r26, 0x13	; 19
    3210:	b5 4d       	sbci	r27, 0xD5	; 213
    3212:	8d 91       	ld	r24, X+
    3214:	9c 91       	ld	r25, X
    3216:	df 01       	movw	r26, r30
    3218:	a7 52       	subi	r26, 0x27	; 39
    321a:	b3 4d       	sbci	r27, 0xD3	; 211
    321c:	00 97       	sbiw	r24, 0x00	; 0
    321e:	29 f0       	breq	.+10     	; 0x322a <calcBaseline+0x16e>
    {
        baseline[proxChannel] = rollingMax[proxChannel] + noise_margin;
    3220:	48 0f       	add	r20, r24
    3222:	59 1f       	adc	r21, r25
    3224:	4d 93       	st	X+, r20
    3226:	5c 93       	st	X, r21
    3228:	08 c0       	rjmp	.+16     	; 0x323a <calcBaseline+0x17e>
    } 
    else
    {  // If the rollingMax has not been determined yet, use the average
        baseline[proxChannel] = (u16) dynamic_baseline[proxChannel] + noise_margin;
    322a:	ed 50       	subi	r30, 0x0D	; 13
    322c:	f5 4d       	sbci	r31, 0xD5	; 213
    322e:	80 81       	ld	r24, Z
    3230:	91 81       	ldd	r25, Z+1	; 0x01
    3232:	84 0f       	add	r24, r20
    3234:	95 1f       	adc	r25, r21
    3236:	8d 93       	st	X+, r24
    3238:	9c 93       	st	X, r25
    }
}
    323a:	df 91       	pop	r29
    323c:	cf 91       	pop	r28
    323e:	1f 91       	pop	r17
    3240:	0f 91       	pop	r16
    3242:	ff 90       	pop	r15
    3244:	ef 90       	pop	r14
    3246:	df 90       	pop	r13
    3248:	cf 90       	pop	r12
    324a:	08 95       	ret

0000324c <si114x_process_samples>:
u16 code scale           =  3;
u8  code ircorrection[3] =  { 17, 35, 29 };
#endif

void si114x_process_samples(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples)
{
    324c:	ef 92       	push	r14
    324e:	ff 92       	push	r15
    3250:	0f 93       	push	r16
    3252:	1f 93       	push	r17
    3254:	cf 93       	push	r28
    3256:	df 93       	push	r29
    3258:	7c 01       	movw	r14, r24
    325a:	eb 01       	movw	r28, r22
    if ((maxLeakage[0]==0)&&(maxLeakage[1]==0)&&(maxLeakage[2]==0)&&(initial_baseline_counter==128))
    325c:	80 91 fd 2a 	lds	r24, 0x2AFD
    3260:	90 91 fe 2a 	lds	r25, 0x2AFE
    3264:	89 2b       	or	r24, r25
    3266:	a1 f4       	brne	.+40     	; 0x3290 <si114x_process_samples+0x44>
    3268:	80 91 ff 2a 	lds	r24, 0x2AFF
    326c:	90 91 00 2b 	lds	r25, 0x2B00
    3270:	89 2b       	or	r24, r25
    3272:	71 f4       	brne	.+28     	; 0x3290 <si114x_process_samples+0x44>
    3274:	80 91 01 2b 	lds	r24, 0x2B01
    3278:	90 91 02 2b 	lds	r25, 0x2B02
    327c:	89 2b       	or	r24, r25
    327e:	41 f4       	brne	.+16     	; 0x3290 <si114x_process_samples+0x44>
    3280:	80 91 10 20 	lds	r24, 0x2010
    3284:	80 38       	cpi	r24, 0x80	; 128
    3286:	21 f4       	brne	.+8      	; 0x3290 <si114x_process_samples+0x44>
    {
#ifdef DEBUG_ON
        puts("DEBUG: Computing Baseline. Make sure nothing is in the vicinity of the EVB");
    3288:	8c ee       	ldi	r24, 0xEC	; 236
    328a:	94 e2       	ldi	r25, 0x24	; 36
    328c:	0e 94 67 54 	call	0xa8ce	; 0xa8ce <puts>
#endif
    }

    if (initial_baseline_counter != 0)
    3290:	80 91 10 20 	lds	r24, 0x2010
    3294:	88 23       	and	r24, r24
    3296:	09 f4       	brne	.+2      	; 0x329a <si114x_process_samples+0x4e>
    3298:	8a c0       	rjmp	.+276    	; 0x33ae <si114x_process_samples+0x162>
    {
        // The first 128 samples are used to establish the initial 
        // baseline
        if ( initial_baseline_counter > 1 )
    329a:	82 30       	cpi	r24, 0x02	; 2
    329c:	48 f1       	brcs	.+82     	; 0x32f0 <si114x_process_samples+0xa4>
        {
            // Look for maximum
            if( maxLeakage[0] < samples->ps1) maxLeakage[0] = samples->ps1;
    329e:	8a 85       	ldd	r24, Y+10	; 0x0a
    32a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    32a2:	20 91 fd 2a 	lds	r18, 0x2AFD
    32a6:	30 91 fe 2a 	lds	r19, 0x2AFE
    32aa:	28 17       	cp	r18, r24
    32ac:	39 07       	cpc	r19, r25
    32ae:	20 f4       	brcc	.+8      	; 0x32b8 <si114x_process_samples+0x6c>
    32b0:	80 93 fd 2a 	sts	0x2AFD, r24
    32b4:	90 93 fe 2a 	sts	0x2AFE, r25
            if( maxLeakage[1] < samples->ps2) maxLeakage[1] = samples->ps2;
    32b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    32ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    32bc:	20 91 ff 2a 	lds	r18, 0x2AFF
    32c0:	30 91 00 2b 	lds	r19, 0x2B00
    32c4:	28 17       	cp	r18, r24
    32c6:	39 07       	cpc	r19, r25
    32c8:	20 f4       	brcc	.+8      	; 0x32d2 <si114x_process_samples+0x86>
    32ca:	80 93 ff 2a 	sts	0x2AFF, r24
    32ce:	90 93 00 2b 	sts	0x2B00, r25
			if( maxLeakage[2] < samples->ps3) maxLeakage[2] = samples->ps3;
    32d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    32d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    32d6:	20 91 01 2b 	lds	r18, 0x2B01
    32da:	30 91 02 2b 	lds	r19, 0x2B02
    32de:	28 17       	cp	r18, r24
    32e0:	39 07       	cpc	r19, r25
    32e2:	08 f0       	brcs	.+2      	; 0x32e6 <si114x_process_samples+0x9a>
    32e4:	5e c0       	rjmp	.+188    	; 0x33a2 <si114x_process_samples+0x156>
    32e6:	80 93 01 2b 	sts	0x2B01, r24
    32ea:	90 93 02 2b 	sts	0x2B02, r25
    32ee:	59 c0       	rjmp	.+178    	; 0x33a2 <si114x_process_samples+0x156>
        }
        else
        {
#ifdef DEBUG_ON
            printf("DEBUG: Initial Baseline Calculated, PS1 = %d, PS2 = %d, PS3 = %d \n", maxLeakage[0], maxLeakage[1],maxLeakage[2]);
    32f0:	80 91 02 2b 	lds	r24, 0x2B02
    32f4:	8f 93       	push	r24
    32f6:	80 91 01 2b 	lds	r24, 0x2B01
    32fa:	8f 93       	push	r24
    32fc:	80 91 00 2b 	lds	r24, 0x2B00
    3300:	8f 93       	push	r24
    3302:	80 91 ff 2a 	lds	r24, 0x2AFF
    3306:	8f 93       	push	r24
    3308:	80 91 fe 2a 	lds	r24, 0x2AFE
    330c:	8f 93       	push	r24
    330e:	80 91 fd 2a 	lds	r24, 0x2AFD
    3312:	8f 93       	push	r24
    3314:	87 e3       	ldi	r24, 0x37	; 55
    3316:	95 e2       	ldi	r25, 0x25	; 37
    3318:	9f 93       	push	r25
    331a:	8f 93       	push	r24
    331c:	0e 94 56 54 	call	0xa8ac	; 0xa8ac <printf>
#endif
			
            // Set Max Leakage 
            maxLeakage[0] = maxLeakage[0] + noise_margin*2;
    3320:	60 91 0e 20 	lds	r22, 0x200E
    3324:	70 91 0f 20 	lds	r23, 0x200F
    3328:	66 0f       	add	r22, r22
    332a:	77 1f       	adc	r23, r23
    332c:	40 91 fd 2a 	lds	r20, 0x2AFD
    3330:	50 91 fe 2a 	lds	r21, 0x2AFE
    3334:	46 0f       	add	r20, r22
    3336:	57 1f       	adc	r21, r23
    3338:	40 93 fd 2a 	sts	0x2AFD, r20
    333c:	50 93 fe 2a 	sts	0x2AFE, r21
            maxLeakage[1] = maxLeakage[1] + noise_margin*2;
    3340:	20 91 ff 2a 	lds	r18, 0x2AFF
    3344:	30 91 00 2b 	lds	r19, 0x2B00
    3348:	26 0f       	add	r18, r22
    334a:	37 1f       	adc	r19, r23
    334c:	20 93 ff 2a 	sts	0x2AFF, r18
    3350:	30 93 00 2b 	sts	0x2B00, r19
			maxLeakage[2] = maxLeakage[2] + noise_margin*2;
    3354:	80 91 01 2b 	lds	r24, 0x2B01
    3358:	90 91 02 2b 	lds	r25, 0x2B02
    335c:	86 0f       	add	r24, r22
    335e:	97 1f       	adc	r25, r23
    3360:	80 93 01 2b 	sts	0x2B01, r24
    3364:	90 93 02 2b 	sts	0x2B02, r25

            baseline[0] = maxLeakage[0];
    3368:	40 93 d9 2c 	sts	0x2CD9, r20
    336c:	50 93 da 2c 	sts	0x2CDA, r21
            baseline[1] = maxLeakage[1];
    3370:	20 93 db 2c 	sts	0x2CDB, r18
    3374:	30 93 dc 2c 	sts	0x2CDC, r19
			baseline[2] = maxLeakage[2];
    3378:	80 93 dd 2c 	sts	0x2CDD, r24
    337c:	90 93 de 2c 	sts	0x2CDE, r25
			
			env.baseline[0] = baseline[0];
    3380:	40 93 33 2b 	sts	0x2B33, r20
    3384:	50 93 34 2b 	sts	0x2B34, r21
			env.baseline[1] = baseline[1];
    3388:	20 93 35 2b 	sts	0x2B35, r18
    338c:	30 93 36 2b 	sts	0x2B36, r19
			env.baseline[2] = baseline[2];
    3390:	80 93 37 2b 	sts	0x2B37, r24
    3394:	90 93 38 2b 	sts	0x2B38, r25
    3398:	8d b7       	in	r24, 0x3d	; 61
    339a:	9e b7       	in	r25, 0x3e	; 62
    339c:	08 96       	adiw	r24, 0x08	; 8
    339e:	8d bf       	out	0x3d, r24	; 61
    33a0:	9e bf       	out	0x3e, r25	; 62
        }
        
        // Decrement counter
        initial_baseline_counter--;
    33a2:	80 91 10 20 	lds	r24, 0x2010
    33a6:	81 50       	subi	r24, 0x01	; 1
    33a8:	80 93 10 20 	sts	0x2010, r24
    33ac:	67 c0       	rjmp	.+206    	; 0x347c <si114x_process_samples+0x230>
    else
    {
        //
        // Once the baseline has been set, do the actual loop
        // The first thing that happens is to check for saturation events
        if(samples->ps1 > 48000 || samples->ps2 > 48000 || samples->ps3 > 48000)
    33ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    33b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    33b2:	81 38       	cpi	r24, 0x81	; 129
    33b4:	9b 4b       	sbci	r25, 0xBB	; 187
    33b6:	50 f4       	brcc	.+20     	; 0x33cc <si114x_process_samples+0x180>
    33b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    33ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    33bc:	81 38       	cpi	r24, 0x81	; 129
    33be:	9b 4b       	sbci	r25, 0xBB	; 187
    33c0:	28 f4       	brcc	.+10     	; 0x33cc <si114x_process_samples+0x180>
    33c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    33c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    33c6:	81 38       	cpi	r24, 0x81	; 129
    33c8:	9b 4b       	sbci	r25, 0xBB	; 187
    33ca:	50 f0       	brcs	.+20     	; 0x33e0 <si114x_process_samples+0x194>
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
#ifdef DEBUG_ON
            puts("DEBUG: Samples are Saturated");
    33cc:	8a e7       	ldi	r24, 0x7A	; 122
    33ce:	95 e2       	ldi	r25, 0x25	; 37

                SliderAlgorithm(si114x_handle, samples, scale);
            }
        }
    }
}
    33d0:	df 91       	pop	r29
    33d2:	cf 91       	pop	r28
    33d4:	1f 91       	pop	r17
    33d6:	0f 91       	pop	r16
    33d8:	ff 90       	pop	r15
    33da:	ef 90       	pop	r14
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
#ifdef DEBUG_ON
            puts("DEBUG: Samples are Saturated");
    33dc:	0c 94 67 54 	jmp	0xa8ce	; 0xa8ce <puts>
#endif
		}
        else
        { 
            if( isIRStable( samples ) )
    33e0:	ce 01       	movw	r24, r28
    33e2:	8b dd       	rcall	.-1258   	; 0x2efa <isIRStable>
    33e4:	88 23       	and	r24, r24
    33e6:	09 f4       	brne	.+2      	; 0x33ea <si114x_process_samples+0x19e>
    33e8:	49 c0       	rjmp	.+146    	; 0x347c <si114x_process_samples+0x230>
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    33ea:	0a 85       	ldd	r16, Y+10	; 0x0a
    33ec:	1b 85       	ldd	r17, Y+11	; 0x0b
    33ee:	88 85       	ldd	r24, Y+8	; 0x08
    33f0:	99 85       	ldd	r25, Y+9	; 0x09
    33f2:	98 01       	movw	r18, r16
    33f4:	40 e0       	ldi	r20, 0x00	; 0
    33f6:	50 e0       	ldi	r21, 0x00	; 0
    33f8:	28 0f       	add	r18, r24
    33fa:	39 1f       	adc	r19, r25
    33fc:	41 1d       	adc	r20, r1
    33fe:	51 1d       	adc	r21, r1
    3400:	32 50       	subi	r19, 0x02	; 2
    3402:	41 09       	sbc	r20, r1
    3404:	51 09       	sbc	r21, r1
    3406:	a0 91 09 20 	lds	r26, 0x2009
    340a:	b0 e0       	ldi	r27, 0x00	; 0
    340c:	0e 94 5f 51 	call	0xa2be	; 0xa2be <__muluhisi3>
            Correction = Correction/10000;
    3410:	20 e1       	ldi	r18, 0x10	; 16
    3412:	37 e2       	ldi	r19, 0x27	; 39
    3414:	40 e0       	ldi	r20, 0x00	; 0
    3416:	50 e0       	ldi	r21, 0x00	; 0
    3418:	0e 94 28 51 	call	0xa250	; 0xa250 <__udivmodsi4>
            samples->ps1 = samples->ps1 + Correction;    
    341c:	20 0f       	add	r18, r16
    341e:	31 1f       	adc	r19, r17
    3420:	2a 87       	std	Y+10, r18	; 0x0a
    3422:	3b 87       	std	Y+11, r19	; 0x0b
        else
        { 
            if( isIRStable( samples ) )
            {
                IRCompensation( 0, samples, ircorrection );  // IR Ambient Compensation for PS1 Channel
                IRCompensation( 1, samples, ircorrection );  // IR Ambient Compensation for PS2 Channel
    3424:	49 e0       	ldi	r20, 0x09	; 9
    3426:	50 e2       	ldi	r21, 0x20	; 32
    3428:	be 01       	movw	r22, r28
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	e0 dd       	rcall	.-1088   	; 0x2fee <IRCompensation>
				IRCompensation( 2, samples, ircorrection );  // IR Ambient Compensation for PS3 Channel
    342e:	49 e0       	ldi	r20, 0x09	; 9
    3430:	50 e2       	ldi	r21, 0x20	; 32
    3432:	be 01       	movw	r22, r28
    3434:	82 e0       	ldi	r24, 0x02	; 2
    3436:	db dd       	rcall	.-1098   	; 0x2fee <IRCompensation>

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
    3438:	40 91 0e 20 	lds	r20, 0x200E
    343c:	50 91 0f 20 	lds	r21, 0x200F
    3440:	be 01       	movw	r22, r28
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	3b de       	rcall	.-906    	; 0x30bc <calcBaseline>
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
    3446:	40 91 0e 20 	lds	r20, 0x200E
    344a:	50 91 0f 20 	lds	r21, 0x200F
    344e:	be 01       	movw	r22, r28
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	34 de       	rcall	.-920    	; 0x30bc <calcBaseline>
				calcBaseline( 2 , samples, noise_margin); // Calculate PS3 Baseline
    3454:	40 91 0e 20 	lds	r20, 0x200E
    3458:	50 91 0f 20 	lds	r21, 0x200F
    345c:	be 01       	movw	r22, r28
    345e:	82 e0       	ldi	r24, 0x02	; 2
    3460:	2d de       	rcall	.-934    	; 0x30bc <calcBaseline>

                SliderAlgorithm(si114x_handle, samples, scale);
    3462:	40 91 0c 20 	lds	r20, 0x200C
    3466:	50 91 0d 20 	lds	r21, 0x200D
    346a:	be 01       	movw	r22, r28
    346c:	c7 01       	movw	r24, r14
            }
        }
    }
}
    346e:	df 91       	pop	r29
    3470:	cf 91       	pop	r28
    3472:	1f 91       	pop	r17
    3474:	0f 91       	pop	r16
    3476:	ff 90       	pop	r15
    3478:	ef 90       	pop	r14

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
				calcBaseline( 2 , samples, noise_margin); // Calculate PS3 Baseline

                SliderAlgorithm(si114x_handle, samples, scale);
    347a:	4d c1       	rjmp	.+666    	; 0x3716 <SliderAlgorithm>
            }
        }
    }
}
    347c:	df 91       	pop	r29
    347e:	cf 91       	pop	r28
    3480:	1f 91       	pop	r17
    3482:	0f 91       	pop	r16
    3484:	ff 90       	pop	r15
    3486:	ef 90       	pop	r14
    3488:	08 95       	ret

0000348a <PortSet>:

s16 Si114xBlockRead(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
}
    348a:	08 95       	ret

0000348c <Si114xWriteToRegister>:
    348c:	ef 92       	push	r14
    348e:	0f 93       	push	r16
    3490:	1f 93       	push	r17
    3492:	cf 93       	push	r28
    3494:	df 93       	push	r29
    3496:	1f 92       	push	r1
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
    349c:	26 2f       	mov	r18, r22
    349e:	49 83       	std	Y+1, r20	; 0x01
    34a0:	ee 24       	eor	r14, r14
    34a2:	e3 94       	inc	r14
    34a4:	8e 01       	movw	r16, r28
    34a6:	0f 5f       	subi	r16, 0xFF	; 255
    34a8:	1f 4f       	sbci	r17, 0xFF	; 255
    34aa:	48 ee       	ldi	r20, 0xE8	; 232
    34ac:	53 e0       	ldi	r21, 0x03	; 3
    34ae:	6a e5       	ldi	r22, 0x5A	; 90
    34b0:	80 e8       	ldi	r24, 0x80	; 128
    34b2:	94 e0       	ldi	r25, 0x04	; 4
    34b4:	45 d4       	rcall	.+2186   	; 0x3d40 <twi_write_packet>
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	0f 90       	pop	r0
    34bc:	df 91       	pop	r29
    34be:	cf 91       	pop	r28
    34c0:	1f 91       	pop	r17
    34c2:	0f 91       	pop	r16
    34c4:	ef 90       	pop	r14
    34c6:	08 95       	ret

000034c8 <Si114xReadFromRegister>:
    34c8:	ef 92       	push	r14
    34ca:	0f 93       	push	r16
    34cc:	1f 93       	push	r17
    34ce:	cf 93       	push	r28
    34d0:	df 93       	push	r29
    34d2:	1f 92       	push	r1
    34d4:	cd b7       	in	r28, 0x3d	; 61
    34d6:	de b7       	in	r29, 0x3e	; 62
    34d8:	26 2f       	mov	r18, r22
    34da:	ee 24       	eor	r14, r14
    34dc:	e3 94       	inc	r14
    34de:	8e 01       	movw	r16, r28
    34e0:	0f 5f       	subi	r16, 0xFF	; 255
    34e2:	1f 4f       	sbci	r17, 0xFF	; 255
    34e4:	48 ee       	ldi	r20, 0xE8	; 232
    34e6:	53 e0       	ldi	r21, 0x03	; 3
    34e8:	6a e5       	ldi	r22, 0x5A	; 90
    34ea:	80 e8       	ldi	r24, 0x80	; 128
    34ec:	94 e0       	ldi	r25, 0x04	; 4
    34ee:	d7 d3       	rcall	.+1966   	; 0x3c9e <twi_read_packet>
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	0f 90       	pop	r0
    34f6:	df 91       	pop	r29
    34f8:	cf 91       	pop	r28
    34fa:	1f 91       	pop	r17
    34fc:	0f 91       	pop	r16
    34fe:	ef 90       	pop	r14
    3500:	08 95       	ret

00003502 <Si114xBlockWrite>:
    3502:	ef 92       	push	r14
    3504:	0f 93       	push	r16
    3506:	1f 93       	push	r17
    3508:	89 01       	movw	r16, r18
    350a:	e4 2e       	mov	r14, r20
    350c:	26 2f       	mov	r18, r22
    350e:	48 ee       	ldi	r20, 0xE8	; 232
    3510:	53 e0       	ldi	r21, 0x03	; 3
    3512:	6a e5       	ldi	r22, 0x5A	; 90
    3514:	80 e8       	ldi	r24, 0x80	; 128
    3516:	94 e0       	ldi	r25, 0x04	; 4
    3518:	13 d4       	rcall	.+2086   	; 0x3d40 <twi_write_packet>
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	1f 91       	pop	r17
    351e:	0f 91       	pop	r16
    3520:	ef 90       	pop	r14
    3522:	08 95       	ret

00003524 <delay_10ms>:
    3524:	2f ef       	ldi	r18, 0xFF	; 255
    3526:	89 ef       	ldi	r24, 0xF9	; 249
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	21 50       	subi	r18, 0x01	; 1
    352c:	80 40       	sbci	r24, 0x00	; 0
    352e:	90 40       	sbci	r25, 0x00	; 0
    3530:	e1 f7       	brne	.-8      	; 0x352a <delay_10ms+0x6>
    3532:	00 c0       	rjmp	.+0      	; 0x3534 <delay_10ms+0x10>
    3534:	00 00       	nop
    3536:	08 95       	ret

00003538 <QS_Counts_to_Distance>:
		//Out of range
		left_entry = false;
		right_entry = false;
		center_entry = false;
	}
}
    3538:	ff 92       	push	r15
    353a:	0f 93       	push	r16
    353c:	1f 93       	push	r17
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	cd b7       	in	r28, 0x3d	; 61
    3544:	de b7       	in	r29, 0x3e	; 62
    3546:	c2 5a       	subi	r28, 0xA2	; 162
    3548:	d1 09       	sbc	r29, r1
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	de bf       	out	0x3e, r29	; 62
    354e:	42 e1       	ldi	r20, 0x12	; 18
    3550:	e5 e2       	ldi	r30, 0x25	; 37
    3552:	f0 e2       	ldi	r31, 0x20	; 32
    3554:	de 01       	movw	r26, r28
    3556:	af 56       	subi	r26, 0x6F	; 111
    3558:	bf 4f       	sbci	r27, 0xFF	; 255
    355a:	01 90       	ld	r0, Z+
    355c:	0d 92       	st	X+, r0
    355e:	4a 95       	dec	r20
    3560:	e1 f7       	brne	.-8      	; 0x355a <QS_Counts_to_Distance+0x22>
    3562:	42 e1       	ldi	r20, 0x12	; 18
    3564:	e7 e3       	ldi	r30, 0x37	; 55
    3566:	f0 e2       	ldi	r31, 0x20	; 32
    3568:	de 01       	movw	r26, r28
    356a:	a1 58       	subi	r26, 0x81	; 129
    356c:	bf 4f       	sbci	r27, 0xFF	; 255
    356e:	01 90       	ld	r0, Z+
    3570:	0d 92       	st	X+, r0
    3572:	4a 95       	dec	r20
    3574:	e1 f7       	brne	.-8      	; 0x356e <QS_Counts_to_Distance+0x36>
    3576:	42 e1       	ldi	r20, 0x12	; 18
    3578:	e9 e4       	ldi	r30, 0x49	; 73
    357a:	f0 e2       	ldi	r31, 0x20	; 32
    357c:	de 01       	movw	r26, r28
    357e:	a3 59       	subi	r26, 0x93	; 147
    3580:	bf 4f       	sbci	r27, 0xFF	; 255
    3582:	01 90       	ld	r0, Z+
    3584:	0d 92       	st	X+, r0
    3586:	4a 95       	dec	r20
    3588:	e1 f7       	brne	.-8      	; 0x3582 <QS_Counts_to_Distance+0x4a>
    358a:	42 e1       	ldi	r20, 0x12	; 18
    358c:	eb e5       	ldi	r30, 0x5B	; 91
    358e:	f0 e2       	ldi	r31, 0x20	; 32
    3590:	de 01       	movw	r26, r28
    3592:	a5 5a       	subi	r26, 0xA5	; 165
    3594:	bf 4f       	sbci	r27, 0xFF	; 255
    3596:	01 90       	ld	r0, Z+
    3598:	0d 92       	st	X+, r0
    359a:	4a 95       	dec	r20
    359c:	e1 f7       	brne	.-8      	; 0x3596 <QS_Counts_to_Distance+0x5e>
    359e:	42 e1       	ldi	r20, 0x12	; 18
    35a0:	ed e6       	ldi	r30, 0x6D	; 109
    35a2:	f0 e2       	ldi	r31, 0x20	; 32
    35a4:	de 01       	movw	r26, r28
    35a6:	a7 5b       	subi	r26, 0xB7	; 183
    35a8:	bf 4f       	sbci	r27, 0xFF	; 255
    35aa:	01 90       	ld	r0, Z+
    35ac:	0d 92       	st	X+, r0
    35ae:	4a 95       	dec	r20
    35b0:	e1 f7       	brne	.-8      	; 0x35aa <QS_Counts_to_Distance+0x72>
    35b2:	42 e1       	ldi	r20, 0x12	; 18
    35b4:	ef e7       	ldi	r30, 0x7F	; 127
    35b6:	f0 e2       	ldi	r31, 0x20	; 32
    35b8:	de 01       	movw	r26, r28
    35ba:	d7 96       	adiw	r26, 0x37	; 55
    35bc:	01 90       	ld	r0, Z+
    35be:	0d 92       	st	X+, r0
    35c0:	4a 95       	dec	r20
    35c2:	e1 f7       	brne	.-8      	; 0x35bc <QS_Counts_to_Distance+0x84>
    35c4:	42 e1       	ldi	r20, 0x12	; 18
    35c6:	eb e5       	ldi	r30, 0x5B	; 91
    35c8:	f0 e2       	ldi	r31, 0x20	; 32
    35ca:	de 01       	movw	r26, r28
    35cc:	95 96       	adiw	r26, 0x25	; 37
    35ce:	01 90       	ld	r0, Z+
    35d0:	0d 92       	st	X+, r0
    35d2:	4a 95       	dec	r20
    35d4:	e1 f7       	brne	.-8      	; 0x35ce <QS_Counts_to_Distance+0x96>
    35d6:	42 e1       	ldi	r20, 0x12	; 18
    35d8:	ed e6       	ldi	r30, 0x6D	; 109
    35da:	f0 e2       	ldi	r31, 0x20	; 32
    35dc:	de 01       	movw	r26, r28
    35de:	53 96       	adiw	r26, 0x13	; 19
    35e0:	01 90       	ld	r0, Z+
    35e2:	0d 92       	st	X+, r0
    35e4:	4a 95       	dec	r20
    35e6:	e1 f7       	brne	.-8      	; 0x35e0 <QS_Counts_to_Distance+0xa8>
    35e8:	42 e1       	ldi	r20, 0x12	; 18
    35ea:	ef e7       	ldi	r30, 0x7F	; 127
    35ec:	f0 e2       	ldi	r31, 0x20	; 32
    35ee:	de 01       	movw	r26, r28
    35f0:	11 96       	adiw	r26, 0x01	; 1
    35f2:	01 90       	ld	r0, Z+
    35f4:	0d 92       	st	X+, r0
    35f6:	4a 95       	dec	r20
    35f8:	e1 f7       	brne	.-8      	; 0x35f2 <QS_Counts_to_Distance+0xba>
    35fa:	61 30       	cpi	r22, 0x01	; 1
    35fc:	19 f5       	brne	.+70     	; 0x3644 <QS_Counts_to_Distance+0x10c>
    35fe:	fe 01       	movw	r30, r28
    3600:	e3 59       	subi	r30, 0x93	; 147
    3602:	ff 4f       	sbci	r31, 0xFF	; 255
    3604:	40 e0       	ldi	r20, 0x00	; 0
    3606:	50 e0       	ldi	r21, 0x00	; 0
    3608:	f4 2e       	mov	r15, r20
    360a:	61 91       	ld	r22, Z+
    360c:	71 91       	ld	r23, Z+
    360e:	68 17       	cp	r22, r24
    3610:	79 07       	cpc	r23, r25
    3612:	90 f4       	brcc	.+36     	; 0x3638 <QS_Counts_to_Distance+0x100>
    3614:	44 0f       	add	r20, r20
    3616:	55 1f       	adc	r21, r21
    3618:	ef e7       	ldi	r30, 0x7F	; 127
    361a:	f0 e0       	ldi	r31, 0x00	; 0
    361c:	ec 0f       	add	r30, r28
    361e:	fd 1f       	adc	r31, r29
    3620:	e4 0f       	add	r30, r20
    3622:	f5 1f       	adc	r31, r21
    3624:	20 81       	ld	r18, Z
    3626:	31 81       	ldd	r19, Z+1	; 0x01
    3628:	dc 01       	movw	r26, r24
    362a:	0e 94 50 51 	call	0xa2a0	; 0xa2a0 <__umulhisi3>
    362e:	8b 01       	movw	r16, r22
    3630:	9c 01       	movw	r18, r24
    3632:	e1 e9       	ldi	r30, 0x91	; 145
    3634:	f0 e0       	ldi	r31, 0x00	; 0
    3636:	23 c0       	rjmp	.+70     	; 0x367e <QS_Counts_to_Distance+0x146>
    3638:	4f 5f       	subi	r20, 0xFF	; 255
    363a:	5f 4f       	sbci	r21, 0xFF	; 255
    363c:	49 30       	cpi	r20, 0x09	; 9
    363e:	51 05       	cpc	r21, r1
    3640:	19 f7       	brne	.-58     	; 0x3608 <QS_Counts_to_Distance+0xd0>
    3642:	51 c0       	rjmp	.+162    	; 0x36e6 <QS_Counts_to_Distance+0x1ae>
    3644:	62 30       	cpi	r22, 0x02	; 2
    3646:	41 f5       	brne	.+80     	; 0x3698 <QS_Counts_to_Distance+0x160>
    3648:	fe 01       	movw	r30, r28
    364a:	f7 96       	adiw	r30, 0x37	; 55
    364c:	40 e0       	ldi	r20, 0x00	; 0
    364e:	50 e0       	ldi	r21, 0x00	; 0
    3650:	f4 2e       	mov	r15, r20
    3652:	61 91       	ld	r22, Z+
    3654:	71 91       	ld	r23, Z+
    3656:	68 17       	cp	r22, r24
    3658:	79 07       	cpc	r23, r25
    365a:	c0 f4       	brcc	.+48     	; 0x368c <QS_Counts_to_Distance+0x154>
    365c:	44 0f       	add	r20, r20
    365e:	55 1f       	adc	r21, r21
    3660:	e9 e4       	ldi	r30, 0x49	; 73
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	ec 0f       	add	r30, r28
    3666:	fd 1f       	adc	r31, r29
    3668:	e4 0f       	add	r30, r20
    366a:	f5 1f       	adc	r31, r21
    366c:	20 81       	ld	r18, Z
    366e:	31 81       	ldd	r19, Z+1	; 0x01
    3670:	dc 01       	movw	r26, r24
    3672:	0e 94 50 51 	call	0xa2a0	; 0xa2a0 <__umulhisi3>
    3676:	8b 01       	movw	r16, r22
    3678:	9c 01       	movw	r18, r24
    367a:	eb e5       	ldi	r30, 0x5B	; 91
    367c:	f0 e0       	ldi	r31, 0x00	; 0
    367e:	ec 0f       	add	r30, r28
    3680:	fd 1f       	adc	r31, r29
    3682:	e4 0f       	add	r30, r20
    3684:	f5 1f       	adc	r31, r21
    3686:	80 81       	ld	r24, Z
    3688:	91 81       	ldd	r25, Z+1	; 0x01
    368a:	24 c0       	rjmp	.+72     	; 0x36d4 <QS_Counts_to_Distance+0x19c>
    368c:	4f 5f       	subi	r20, 0xFF	; 255
    368e:	5f 4f       	sbci	r21, 0xFF	; 255
    3690:	49 30       	cpi	r20, 0x09	; 9
    3692:	51 05       	cpc	r21, r1
    3694:	e9 f6       	brne	.-70     	; 0x3650 <QS_Counts_to_Distance+0x118>
    3696:	27 c0       	rjmp	.+78     	; 0x36e6 <QS_Counts_to_Distance+0x1ae>
    3698:	63 30       	cpi	r22, 0x03	; 3
    369a:	89 f5       	brne	.+98     	; 0x36fe <QS_Counts_to_Distance+0x1c6>
    369c:	fe 01       	movw	r30, r28
    369e:	31 96       	adiw	r30, 0x01	; 1
    36a0:	40 e0       	ldi	r20, 0x00	; 0
    36a2:	50 e0       	ldi	r21, 0x00	; 0
    36a4:	f4 2e       	mov	r15, r20
    36a6:	61 91       	ld	r22, Z+
    36a8:	71 91       	ld	r23, Z+
    36aa:	68 17       	cp	r22, r24
    36ac:	79 07       	cpc	r23, r25
    36ae:	b0 f4       	brcc	.+44     	; 0x36dc <QS_Counts_to_Distance+0x1a4>
    36b0:	fa 01       	movw	r30, r20
    36b2:	ee 0f       	add	r30, r30
    36b4:	ff 1f       	adc	r31, r31
    36b6:	21 e0       	ldi	r18, 0x01	; 1
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	2c 0f       	add	r18, r28
    36bc:	3d 1f       	adc	r19, r29
    36be:	e2 0f       	add	r30, r18
    36c0:	f3 1f       	adc	r31, r19
    36c2:	22 89       	ldd	r18, Z+18	; 0x12
    36c4:	33 89       	ldd	r19, Z+19	; 0x13
    36c6:	dc 01       	movw	r26, r24
    36c8:	0e 94 50 51 	call	0xa2a0	; 0xa2a0 <__umulhisi3>
    36cc:	8b 01       	movw	r16, r22
    36ce:	9c 01       	movw	r18, r24
    36d0:	84 a1       	ldd	r24, Z+36	; 0x24
    36d2:	95 a1       	ldd	r25, Z+37	; 0x25
    36d4:	8c 01       	movw	r16, r24
    36d6:	02 1b       	sub	r16, r18
    36d8:	13 0b       	sbc	r17, r19
    36da:	07 c0       	rjmp	.+14     	; 0x36ea <QS_Counts_to_Distance+0x1b2>
    36dc:	4f 5f       	subi	r20, 0xFF	; 255
    36de:	5f 4f       	sbci	r21, 0xFF	; 255
    36e0:	49 30       	cpi	r20, 0x09	; 9
    36e2:	51 05       	cpc	r21, r1
    36e4:	f9 f6       	brne	.-66     	; 0x36a4 <QS_Counts_to_Distance+0x16c>
    36e6:	89 e0       	ldi	r24, 0x09	; 9
    36e8:	f8 2e       	mov	r15, r24
    36ea:	0b 3f       	cpi	r16, 0xFB	; 251
    36ec:	11 05       	cpc	r17, r1
    36ee:	18 f4       	brcc	.+6      	; 0x36f6 <QS_Counts_to_Distance+0x1be>
    36f0:	89 e0       	ldi	r24, 0x09	; 9
    36f2:	f8 12       	cpse	r15, r24
    36f4:	02 c0       	rjmp	.+4      	; 0x36fa <QS_Counts_to_Distance+0x1c2>
    36f6:	0a ef       	ldi	r16, 0xFA	; 250
    36f8:	10 e0       	ldi	r17, 0x00	; 0
    36fa:	c8 01       	movw	r24, r16
    36fc:	02 c0       	rjmp	.+4      	; 0x3702 <QS_Counts_to_Distance+0x1ca>
    36fe:	8f ef       	ldi	r24, 0xFF	; 255
    3700:	9f ef       	ldi	r25, 0xFF	; 255
    3702:	ce 55       	subi	r28, 0x5E	; 94
    3704:	df 4f       	sbci	r29, 0xFF	; 255
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	df 91       	pop	r29
    370c:	cf 91       	pop	r28
    370e:	1f 91       	pop	r17
    3710:	0f 91       	pop	r16
    3712:	ff 90       	pop	r15
    3714:	08 95       	ret

00003716 <SliderAlgorithm>:

void SliderAlgorithm(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples, u16 scale)
{
    3716:	2f 92       	push	r2
    3718:	3f 92       	push	r3
    371a:	4f 92       	push	r4
    371c:	5f 92       	push	r5
    371e:	7f 92       	push	r7
    3720:	8f 92       	push	r8
    3722:	9f 92       	push	r9
    3724:	af 92       	push	r10
    3726:	bf 92       	push	r11
    3728:	cf 92       	push	r12
    372a:	df 92       	push	r13
    372c:	ef 92       	push	r14
    372e:	ff 92       	push	r15
    3730:	0f 93       	push	r16
    3732:	1f 93       	push	r17
    3734:	cf 93       	push	r28
    3736:	df 93       	push	r29
    3738:	cd b7       	in	r28, 0x3d	; 61
    373a:	de b7       	in	r29, 0x3e	; 62
    373c:	ae 97       	sbiw	r28, 0x2e	; 46
    373e:	cd bf       	out	0x3d, r28	; 61
    3740:	de bf       	out	0x3e, r29	; 62
    3742:	7b 01       	movw	r14, r22
    3744:	5a 01       	movw	r10, r20
	//My implementation
	static u16 previous_led_x = 0;
	static u16 previous_led_y = 0;

    // QS_GlobalCounterOverflow assumes milliseconds. Samples->timestamp is in 100 us.
    u16 xdata QS_GlobalCounterOverflow = samples->timestamp / 10;
    3746:	db 01       	movw	r26, r22
    3748:	12 96       	adiw	r26, 0x02	; 2
    374a:	8d 91       	ld	r24, X+
    374c:	9c 91       	ld	r25, X
    374e:	13 97       	sbiw	r26, 0x03	; 3
    3750:	6a e0       	ldi	r22, 0x0A	; 10
    3752:	70 e0       	ldi	r23, 0x00	; 0
    3754:	0e 94 01 51 	call	0xa202	; 0xa202 <__udivmodhi4>
    3758:	8b 01       	movw	r16, r22

    // x position "bucket" endpoints to determine LED states and recognize Pause gesture.
    u16 code xbucket_Array[10] = {1, 159, 272, 385, 498, 611, 724, 837, 1100, 1102};
    375a:	84 e1       	ldi	r24, 0x14	; 20
    375c:	e1 e9       	ldi	r30, 0x91	; 145
    375e:	f0 e2       	ldi	r31, 0x20	; 32
    3760:	de 01       	movw	r26, r28
    3762:	11 96       	adiw	r26, 0x01	; 1
    3764:	01 90       	ld	r0, Z+
    3766:	0d 92       	st	X+, r0
    3768:	8a 95       	dec	r24
    376a:	e1 f7       	brne	.-8      	; 0x3764 <SliderAlgorithm+0x4e>

    // P1 LED values corresponding to the position buckets
    u8 code LED_P1_Vals[10] = {0xFF, 0xFE, 0xFD, 0xFB, 0xF7, 0xEF, 0xDF, 0xBF, 0x7F, 0xFF};   
    376c:	8a e0       	ldi	r24, 0x0A	; 10
    376e:	e5 ea       	ldi	r30, 0xA5	; 165
    3770:	f0 e2       	ldi	r31, 0x20	; 32
    3772:	de 01       	movw	r26, r28
    3774:	55 96       	adiw	r26, 0x15	; 21
    3776:	01 90       	ld	r0, Z+
    3778:	0d 92       	st	X+, r0
    377a:	8a 95       	dec	r24
    377c:	e1 f7       	brne	.-8      	; 0x3776 <SliderAlgorithm+0x60>

    // P1 patterns for LED state machine.  Sent in reverse order, '0' bits are ON
    u8 code LED_swipe_left_pattern[8]  = 
    377e:	88 e0       	ldi	r24, 0x08	; 8
    3780:	ef ea       	ldi	r30, 0xAF	; 175
    3782:	f0 e2       	ldi	r31, 0x20	; 32
    3784:	de 01       	movw	r26, r28
    3786:	97 96       	adiw	r26, 0x27	; 39
    3788:	01 90       	ld	r0, Z+
    378a:	0d 92       	st	X+, r0
    378c:	8a 95       	dec	r24
    378e:	e1 f7       	brne	.-8      	; 0x3788 <SliderAlgorithm+0x72>
      {0xFF, 0xFE, 0xF8, 0xE1, 0x87, 0x1F, 0x7F, 0xFF};

    u8 code LED_swipe_right_pattern[8] = 
    3790:	88 e0       	ldi	r24, 0x08	; 8
    3792:	e7 eb       	ldi	r30, 0xB7	; 183
    3794:	f0 e2       	ldi	r31, 0x20	; 32
    3796:	de 01       	movw	r26, r28
    3798:	5f 96       	adiw	r26, 0x1f	; 31
    379a:	01 90       	ld	r0, Z+
    379c:	0d 92       	st	X+, r0
    379e:	8a 95       	dec	r24
    37a0:	e1 f7       	brne	.-8      	; 0x379a <SliderAlgorithm+0x84>
    s16 xdata xdiff;
    u8 xdata swipe_speed;

    int xdata ps;

    ps = (u32) samples->ps1 - (u32)baseline[0];
    37a2:	f7 01       	movw	r30, r14
    37a4:	82 85       	ldd	r24, Z+10	; 0x0a
    37a6:	93 85       	ldd	r25, Z+11	; 0x0b
    37a8:	20 91 d9 2c 	lds	r18, 0x2CD9
    37ac:	30 91 da 2c 	lds	r19, 0x2CDA
    37b0:	82 1b       	sub	r24, r18
    37b2:	93 0b       	sbc	r25, r19
    37b4:	97 ff       	sbrs	r25, 7
    37b6:	02 c0       	rjmp	.+4      	; 0x37bc <SliderAlgorithm+0xa6>
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    ps *= scale;

    // Raw IR sensor 0 and 1 are stored in channels 4 and 5
    // ALS is stored in channel 6
    // Calculate r1 and r2 distances; store in channels 0 and 1
    r1 = QS_Counts_to_Distance ((u16)ps, 1);
    37bc:	61 e0       	ldi	r22, 0x01	; 1
    37be:	9c 01       	movw	r18, r24
    37c0:	a2 9e       	mul	r10, r18
    37c2:	c0 01       	movw	r24, r0
    37c4:	a3 9e       	mul	r10, r19
    37c6:	90 0d       	add	r25, r0
    37c8:	b2 9e       	mul	r11, r18
    37ca:	90 0d       	add	r25, r0
    37cc:	11 24       	eor	r1, r1
    37ce:	b4 de       	rcall	.-664    	; 0x3538 <QS_Counts_to_Distance>
    37d0:	4c 01       	movw	r8, r24
	
	//printf("r1 = %d , counts = %d \r\n",r1,(u16)ps);

    ps = (u32) samples->ps2 - (u32)baseline[1];
    37d2:	d7 01       	movw	r26, r14
    37d4:	1c 96       	adiw	r26, 0x0c	; 12
    37d6:	8d 91       	ld	r24, X+
    37d8:	9c 91       	ld	r25, X
    37da:	1d 97       	sbiw	r26, 0x0d	; 13
    37dc:	20 91 db 2c 	lds	r18, 0x2CDB
    37e0:	30 91 dc 2c 	lds	r19, 0x2CDC
    37e4:	82 1b       	sub	r24, r18
    37e6:	93 0b       	sbc	r25, r19
    37e8:	97 ff       	sbrs	r25, 7
    37ea:	02 c0       	rjmp	.+4      	; 0x37f0 <SliderAlgorithm+0xda>
    37ec:	80 e0       	ldi	r24, 0x00	; 0
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    if (ps < 0) ps = 0;

    // Scale it
    ps *= (u32)scale;

    r2 = QS_Counts_to_Distance ((u16)ps, 1);
    37f0:	61 e0       	ldi	r22, 0x01	; 1
    37f2:	fc 01       	movw	r30, r24
    37f4:	ea 9d       	mul	r30, r10
    37f6:	c0 01       	movw	r24, r0
    37f8:	eb 9d       	mul	r30, r11
    37fa:	90 0d       	add	r25, r0
    37fc:	fa 9d       	mul	r31, r10
    37fe:	90 0d       	add	r25, r0
    3800:	11 24       	eor	r1, r1
    3802:	9a de       	rcall	.-716    	; 0x3538 <QS_Counts_to_Distance>
    3804:	5c 01       	movw	r10, r24
   ////////////////////////////////////////////////////////////////////////////
   // Position calculation and swipe gesture detection

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
    3806:	94 01       	movw	r18, r8
    3808:	d4 01       	movw	r26, r8
    380a:	0e 94 50 51 	call	0xa2a0	; 0xa2a0 <__umulhisi3>
    380e:	1b 01       	movw	r2, r22
    3810:	2c 01       	movw	r4, r24
   x.u32 = x.u32 + 33000;
    3812:	f8 ee       	ldi	r31, 0xE8	; 232
    3814:	2f 0e       	add	r2, r31
    3816:	f0 e8       	ldi	r31, 0x80	; 128
    3818:	3f 1e       	adc	r3, r31
    381a:	41 1c       	adc	r4, r1
    381c:	51 1c       	adc	r5, r1
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    381e:	95 01       	movw	r18, r10
    3820:	d5 01       	movw	r26, r10
    3822:	0e 94 50 51 	call	0xa2a0	; 0xa2a0 <__umulhisi3>
    3826:	26 1a       	sub	r2, r22
    3828:	37 0a       	sbc	r3, r23
    382a:	48 0a       	sbc	r4, r24
    382c:	59 0a       	sbc	r5, r25
   if (x.s32 < 0)
    382e:	57 fc       	sbrc	r5, 7
    3830:	03 c0       	rjmp	.+6      	; 0x3838 <SliderAlgorithm+0x122>

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
   x.u32 = x.u32 + 33000;
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    3832:	a2 01       	movw	r20, r4
    3834:	91 01       	movw	r18, r2
    3836:	03 c0       	rjmp	.+6      	; 0x383e <SliderAlgorithm+0x128>
   if (x.s32 < 0)
   {
     x.s32 = 0;
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	a9 01       	movw	r20, r18
   }
   x.u32 = x.u32 / 60;
    383e:	ca 01       	movw	r24, r20
    3840:	b9 01       	movw	r22, r18
    3842:	2c e3       	ldi	r18, 0x3C	; 60
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	40 e0       	ldi	r20, 0x00	; 0
    3848:	50 e0       	ldi	r21, 0x00	; 0
    384a:	0e 94 28 51 	call	0xa250	; 0xa250 <__udivmodsi4>

   // limit x to maximum for pad
   if (x.u16[LSB] > 1101)
    384e:	2e 34       	cpi	r18, 0x4E	; 78
    3850:	64 e0       	ldi	r22, 0x04	; 4
    3852:	36 07       	cpc	r19, r22
    3854:	10 f0       	brcs	.+4      	; 0x385a <SliderAlgorithm+0x144>
   {
     x.u16[LSB] = 1101;
    3856:	2d e4       	ldi	r18, 0x4D	; 77
    3858:	34 e0       	ldi	r19, 0x04	; 4
    385a:	80 91 11 20 	lds	r24, 0x2011
	   y.u16[LSB] = 1101;
   }

   
   // Determine "z" and recognize whether "swipe" type gesture has occured
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
    385e:	91 ef       	ldi	r25, 0xF1	; 241
    3860:	89 16       	cp	r8, r25
    3862:	91 04       	cpc	r9, r1
    3864:	20 f4       	brcc	.+8      	; 0x386e <SliderAlgorithm+0x158>
    3866:	a1 ef       	ldi	r26, 0xF1	; 241
    3868:	aa 16       	cp	r10, r26
    386a:	b1 04       	cpc	r11, r1
    386c:	b0 f1       	brcs	.+108    	; 0x38da <SliderAlgorithm+0x1c4>
   {
      // check for end of swipe
      if (out_of_range == 0)
    386e:	88 23       	and	r24, r24
    3870:	11 f0       	breq	.+4      	; 0x3876 <SliderAlgorithm+0x160>
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    3872:	e0 e0       	ldi	r30, 0x00	; 0
    3874:	1e c0       	rjmp	.+60     	; 0x38b2 <SliderAlgorithm+0x19c>
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
   {
      // check for end of swipe
      if (out_of_range == 0)
      {
        xexit = xlast;
    3876:	60 91 17 2b 	lds	r22, 0x2B17
    387a:	70 91 18 2b 	lds	r23, 0x2B18
    387e:	60 93 15 2b 	sts	0x2B15, r22
    3882:	70 93 16 2b 	sts	0x2B16, r23

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
    3886:	e0 91 13 2b 	lds	r30, 0x2B13
    388a:	f0 91 14 2b 	lds	r31, 0x2B14
    388e:	c8 01       	movw	r24, r16
    3890:	8e 1b       	sub	r24, r30
    3892:	9f 0b       	sbc	r25, r31
    3894:	c3 97       	sbiw	r24, 0x33	; 51
    3896:	82 31       	cpi	r24, 0x12	; 18
    3898:	91 40       	sbci	r25, 0x01	; 1
    389a:	58 f7       	brcc	.-42     	; 0x3872 <SliderAlgorithm+0x15c>
        {
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
    389c:	f5 e4       	ldi	r31, 0x45	; 69
    389e:	7f 2e       	mov	r7, r31
    38a0:	7e 0e       	add	r7, r30
    38a2:	70 1a       	sub	r7, r16
            xdiff = (s16)xenter-(s16)xexit;
    38a4:	c0 90 11 2b 	lds	r12, 0x2B11
    38a8:	d0 90 12 2b 	lds	r13, 0x2B12
    38ac:	c6 1a       	sub	r12, r22
    38ae:	d7 0a       	sbc	r13, r23
        xexit = xlast;

        // swipe must be completed in a desginated amount of time
        if (QS_GlobalCounterOverflow-SwipeStartTime < SWIPE_TIMEOUT && QS_GlobalCounterOverflow-SwipeStartTime >50)
        {
            swipe_detect = 1;   // indicate that a swipe was detected
    38b0:	e1 e0       	ldi	r30, 0x01	; 1
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
            xdiff = (s16)xenter-(s16)xexit;
        }
      }
      out_of_range = 1;
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	80 93 11 20 	sts	0x2011, r24
      if (xexit > 550)
    38b8:	80 91 15 2b 	lds	r24, 0x2B15
    38bc:	90 91 16 2b 	lds	r25, 0x2B16
    38c0:	87 32       	cpi	r24, 0x27	; 39
    38c2:	92 40       	sbci	r25, 0x02	; 2
    38c4:	18 f0       	brcs	.+6      	; 0x38cc <SliderAlgorithm+0x1b6>
      {
        x.u16[LSB] = 1101;
    38c6:	2d e4       	ldi	r18, 0x4D	; 77
    38c8:	34 e0       	ldi	r19, 0x04	; 4
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <SliderAlgorithm+0x1ba>
      }
      else
      {
        x.u16[LSB] = 0;
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
      }
      z = MAX_RADIUS;
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    38d0:	00 93 0f 2b 	sts	0x2B0F, r16
    38d4:	10 93 10 2b 	sts	0x2B10, r17
    38d8:	11 c0       	rjmp	.+34     	; 0x38fc <SliderAlgorithm+0x1e6>
   }
   else
   {
      // check for start of swipe
      if (out_of_range == 1)
    38da:	81 30       	cpi	r24, 0x01	; 1
    38dc:	41 f4       	brne	.+16     	; 0x38ee <SliderAlgorithm+0x1d8>
      {
        xenter = x.u16[LSB];
    38de:	20 93 11 2b 	sts	0x2B11, r18
    38e2:	30 93 12 2b 	sts	0x2B12, r19
        SwipeStartTime = QS_GlobalCounterOverflow;
    38e6:	00 93 13 2b 	sts	0x2B13, r16
    38ea:	10 93 14 2b 	sts	0x2B14, r17
      }
      out_of_range = 0;
    38ee:	10 92 11 20 	sts	0x2011, r1

      xlast = x.u16[LSB];
    38f2:	20 93 17 2b 	sts	0x2B17, r18
    38f6:	30 93 18 2b 	sts	0x2B18, r19
    u8 xdata xbucket;
    static u8 xdata last_xbucket;

    // Swipe gesture recognition variables
    static BIT out_of_range = 1;
    BIT swipe_detect = 0;
    38fa:	e0 e0       	ldi	r30, 0x00	; 0
      {
         z = r1;
      }
   }
   
   int16_t tmp_x = 15-((x.u16[LSB])/73);
    38fc:	59 01       	movw	r10, r18
    38fe:	c9 01       	movw	r24, r18
    3900:	69 e4       	ldi	r22, 0x49	; 73
    3902:	70 e0       	ldi	r23, 0x00	; 0
    3904:	0e 94 01 51 	call	0xa202	; 0xa202 <__udivmodhi4>
    3908:	4f e0       	ldi	r20, 0x0F	; 15
    390a:	50 e0       	ldi	r21, 0x00	; 0
    390c:	46 1b       	sub	r20, r22
    390e:	57 0b       	sbc	r21, r23
   
   if (tmp_x < 0) {
	   samples->x_axis = 0;
    3910:	d7 01       	movw	r26, r14
      }
   }
   
   int16_t tmp_x = 15-((x.u16[LSB])/73);
   
   if (tmp_x < 0) {
    3912:	57 ff       	sbrs	r21, 7
    3914:	03 c0       	rjmp	.+6      	; 0x391c <SliderAlgorithm+0x206>
	   samples->x_axis = 0;
    3916:	53 96       	adiw	r26, 0x13	; 19
    3918:	1c 92       	st	X, r1
    391a:	02 c0       	rjmp	.+4      	; 0x3920 <SliderAlgorithm+0x20a>
   } else if (tmp_x > 15) {
	   samples->x_axis = 15;
   } else {
	   samples->x_axis = tmp_x;   
    391c:	53 96       	adiw	r26, 0x13	; 19
    391e:	4c 93       	st	X, r20
   // REPLACE_0_PS3( x.u16[LSB] );
   // REPLACE_0_AUX( z );

   // If a swipe was detected, determine the direction (L/R), set up LED state machine
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
    3920:	e1 30       	cpi	r30, 0x01	; 1
    3922:	09 f0       	breq	.+2      	; 0x3926 <SliderAlgorithm+0x210>
    3924:	63 c0       	rjmp	.+198    	; 0x39ec <SliderAlgorithm+0x2d6>
   {
       if (xdiff > 150)             // Left Swipe
    3926:	b7 e9       	ldi	r27, 0x97	; 151
    3928:	cb 16       	cp	r12, r27
    392a:	d1 04       	cpc	r13, r1
    392c:	54 f1       	brlt	.+84     	; 0x3982 <SliderAlgorithm+0x26c>
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    392e:	10 92 0e 2b 	sts	0x2B0E, r1
    3932:	20 e0       	ldi	r18, 0x00	; 0
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
    3934:	82 2f       	mov	r24, r18
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	fc 01       	movw	r30, r24
    393a:	ea 5f       	subi	r30, 0xFA	; 250
    393c:	f4 4d       	sbci	r31, 0xD4	; 212
    393e:	a7 e2       	ldi	r26, 0x27	; 39
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	ac 0f       	add	r26, r28
    3944:	bd 1f       	adc	r27, r29
    3946:	a8 0f       	add	r26, r24
    3948:	b9 1f       	adc	r27, r25
    394a:	8c 91       	ld	r24, X
    394c:	80 83       	st	Z, r24
   // to indicate swipe gesture, and post the swipe event.
   if (swipe_detect == 1)
   {
       if (xdiff > 150)             // Left Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	82 0f       	add	r24, r18
    3952:	88 30       	cpi	r24, 0x08	; 8
    3954:	10 f4       	brcc	.+4      	; 0x395a <SliderAlgorithm+0x244>
    3956:	28 2f       	mov	r18, r24
    3958:	ed cf       	rjmp	.-38     	; 0x3934 <SliderAlgorithm+0x21e>
    395a:	80 93 0e 2b 	sts	0x2B0E, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_left_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send LEFT_SWIPE gesture
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
    395e:	df 92       	push	r13
    3960:	cf 92       	push	r12
    3962:	1f 92       	push	r1
    3964:	7f 92       	push	r7
    3966:	83 ef       	ldi	r24, 0xF3	; 243
    3968:	95 e2       	ldi	r25, 0x25	; 37
    396a:	9f 93       	push	r25
    396c:	8f 93       	push	r24
    396e:	8e ef       	ldi	r24, 0xFE	; 254
    3970:	95 e2       	ldi	r25, 0x25	; 37
    3972:	9f 93       	push	r25
    3974:	8f 93       	push	r24
    3976:	0e 94 56 54 	call	0xa8ac	; 0xa8ac <printf>
			samples->gesture = LEFT_SWIPE;
    397a:	82 e0       	ldi	r24, 0x02	; 2
    397c:	f7 01       	movw	r30, r14
    397e:	82 8b       	std	Z+18, r24	; 0x12
    3980:	32 c0       	rjmp	.+100    	; 0x39e6 <SliderAlgorithm+0x2d0>
       }
       else if (xdiff < -150)       // Right Swipe
    3982:	3a e6       	ldi	r19, 0x6A	; 106
    3984:	c3 16       	cp	r12, r19
    3986:	3f ef       	ldi	r19, 0xFF	; 255
    3988:	d3 06       	cpc	r13, r19
    398a:	9c f5       	brge	.+102    	; 0x39f2 <SliderAlgorithm+0x2dc>
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    398c:	10 92 0e 2b 	sts	0x2B0E, r1
    3990:	20 e0       	ldi	r18, 0x00	; 0
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
    3992:	82 2f       	mov	r24, r18
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	fc 01       	movw	r30, r24
    3998:	ea 5f       	subi	r30, 0xFA	; 250
    399a:	f4 4d       	sbci	r31, 0xD4	; 212
    399c:	af e1       	ldi	r26, 0x1F	; 31
    399e:	b0 e0       	ldi	r27, 0x00	; 0
    39a0:	ac 0f       	add	r26, r28
    39a2:	bd 1f       	adc	r27, r29
    39a4:	a8 0f       	add	r26, r24
    39a6:	b9 1f       	adc	r27, r25
    39a8:	8c 91       	ld	r24, X
    39aa:	80 83       	st	Z, r24
            printf("                            %s: %d, %d\n", "LEFT_SWIPE", swipe_speed, xdiff) ;
			samples->gesture = LEFT_SWIPE;
       }
       else if (xdiff < -150)       // Right Swipe
       {
            for (LED_State = 0; LED_State < 8; LED_State++)
    39ac:	81 e0       	ldi	r24, 0x01	; 1
    39ae:	82 0f       	add	r24, r18
    39b0:	88 30       	cpi	r24, 0x08	; 8
    39b2:	10 f4       	brcc	.+4      	; 0x39b8 <SliderAlgorithm+0x2a2>
    39b4:	28 2f       	mov	r18, r24
    39b6:	ed cf       	rjmp	.-38     	; 0x3992 <SliderAlgorithm+0x27c>
    39b8:	80 93 0e 2b 	sts	0x2B0E, r24
            {
                LED_flash_pattern[LED_State] = LED_swipe_right_pattern[LED_State];
            } // LED_State should be 8 when this loop is finished

            // send RIGHT_SWIPE gesture
            printf("                            %s: %d, %d\n", "RIGHT_SWIPE", swipe_speed, -xdiff) ;     
    39bc:	d1 94       	neg	r13
    39be:	c1 94       	neg	r12
    39c0:	d1 08       	sbc	r13, r1
    39c2:	df 92       	push	r13
    39c4:	cf 92       	push	r12
    39c6:	1f 92       	push	r1
    39c8:	7f 92       	push	r7
    39ca:	86 e2       	ldi	r24, 0x26	; 38
    39cc:	96 e2       	ldi	r25, 0x26	; 38
    39ce:	9f 93       	push	r25
    39d0:	8f 93       	push	r24
    39d2:	8e ef       	ldi	r24, 0xFE	; 254
    39d4:	95 e2       	ldi	r25, 0x25	; 37
    39d6:	9f 93       	push	r25
    39d8:	8f 93       	push	r24
    39da:	0e 94 56 54 	call	0xa8ac	; 0xa8ac <printf>
			samples->gesture = RIGHT_SWIPE;       
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	d7 01       	movw	r26, r14
    39e2:	52 96       	adiw	r26, 0x12	; 18
    39e4:	8c 93       	st	X, r24
    39e6:	cd bf       	out	0x3d, r28	; 61
    39e8:	de bf       	out	0x3e, r29	; 62
    39ea:	03 c0       	rjmp	.+6      	; 0x39f2 <SliderAlgorithm+0x2dc>
       }
   } else {
	   samples->gesture = 0;
    39ec:	d7 01       	movw	r26, r14
    39ee:	52 96       	adiw	r26, 0x12	; 18
    39f0:	1c 92       	st	X, r1
    39f2:	fe 01       	movw	r30, r28
    39f4:	31 96       	adiw	r30, 0x01	; 1

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    39f6:	20 e0       	ldi	r18, 0x00	; 0
   {
        if (x.u16[LSB] < xbucket_Array[xbucket])
    39f8:	81 91       	ld	r24, Z+
    39fa:	91 91       	ld	r25, Z+
    39fc:	a8 16       	cp	r10, r24
    39fe:	b9 06       	cpc	r11, r25
    3a00:	18 f0       	brcs	.+6      	; 0x3a08 <SliderAlgorithm+0x2f2>

   ////////////////////////////////////////////////////////////////////////////
   // LED Indicator update and PAUSE gesture recognition

   // determine which "bucket" the x position falls into
   for (xbucket = 0; xbucket < 10; xbucket++)
    3a02:	2f 5f       	subi	r18, 0xFF	; 255
    3a04:	2a 30       	cpi	r18, 0x0A	; 10
    3a06:	c1 f7       	brne	.-16     	; 0x39f8 <SliderAlgorithm+0x2e2>
            break;
        }
   }

   // Reset pause gesture timer if movement detected
   if ((xbucket != last_xbucket)||(xbucket == 9)||(xbucket == 0))
    3a08:	80 91 05 2b 	lds	r24, 0x2B05
    3a0c:	28 13       	cpse	r18, r24
    3a0e:	04 c0       	rjmp	.+8      	; 0x3a18 <SliderAlgorithm+0x302>
    3a10:	29 30       	cpi	r18, 0x09	; 9
    3a12:	11 f0       	breq	.+4      	; 0x3a18 <SliderAlgorithm+0x302>
    3a14:	21 11       	cpse	r18, r1
    3a16:	04 c0       	rjmp	.+8      	; 0x3a20 <SliderAlgorithm+0x30a>
   {
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3a18:	00 93 0f 2b 	sts	0x2B0F, r16
    3a1c:	10 93 10 2b 	sts	0x2B10, r17
   }
   last_xbucket = xbucket;  // store latest information for next comparison
    3a20:	20 93 05 2b 	sts	0x2B05, r18

   // LED State machine - Pause gesture recognition is also integrated here 
   if (LED_State != 0)  // indicate gesture pattern
    3a24:	e0 91 0e 2b 	lds	r30, 0x2B0E
    3a28:	ee 23       	and	r30, r30
    3a2a:	e1 f0       	breq	.+56     	; 0x3a64 <SliderAlgorithm+0x34e>
   {
      if ((u8)(QS_GlobalCounterOverflow - LED_flash_timeout) >= LED_STATE_TIME)
    3a2c:	80 91 03 2b 	lds	r24, 0x2B03
    3a30:	b0 2f       	mov	r27, r16
    3a32:	b8 1b       	sub	r27, r24
    3a34:	b7 32       	cpi	r27, 0x27	; 39
    3a36:	08 f4       	brcc	.+2      	; 0x3a3a <SliderAlgorithm+0x324>
    3a38:	64 c0       	rjmp	.+200    	; 0x3b02 <SliderAlgorithm+0x3ec>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    3a3a:	00 93 03 2b 	sts	0x2B03, r16
    3a3e:	10 93 04 2b 	sts	0x2B04, r17

         // Write to Port 1 of the MCU
         PortSet( 1, LED_flash_pattern[(--LED_State)%8]); 
    3a42:	e1 50       	subi	r30, 0x01	; 1
    3a44:	e0 93 0e 2b 	sts	0x2B0E, r30
    3a48:	e7 70       	andi	r30, 0x07	; 7
    3a4a:	f0 e0       	ldi	r31, 0x00	; 0
    3a4c:	ea 5f       	subi	r30, 0xFA	; 250
    3a4e:	f4 4d       	sbci	r31, 0xD4	; 212
    3a50:	60 81       	ld	r22, Z
    3a52:	70 e0       	ldi	r23, 0x00	; 0
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	18 dd       	rcall	.-1488   	; 0x348a <PortSet>

         Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3a5a:	00 93 0f 2b 	sts	0x2B0F, r16
    3a5e:	10 93 10 2b 	sts	0x2B10, r17
    3a62:	4f c0       	rjmp	.+158    	; 0x3b02 <SliderAlgorithm+0x3ec>
      //PortSet( 1, LED_P1_Vals[xbucket]);
	  //printf("x: %d \r\n",x.u16[LSB]);


      // check time stamp for pause
      if ((QS_GlobalCounterOverflow - Pause_gesture_timeout) >= PAUSE_TIMEOUT) 
    3a64:	80 91 0f 2b 	lds	r24, 0x2B0F
    3a68:	90 91 10 2b 	lds	r25, 0x2B10
    3a6c:	f8 01       	movw	r30, r16
    3a6e:	e8 1b       	sub	r30, r24
    3a70:	f9 0b       	sbc	r31, r25
    3a72:	cf 01       	movw	r24, r30
    3a74:	8a 38       	cpi	r24, 0x8A	; 138
    3a76:	92 40       	sbci	r25, 0x02	; 2
    3a78:	08 f4       	brcc	.+2      	; 0x3a7c <SliderAlgorithm+0x366>
    3a7a:	43 c0       	rjmp	.+134    	; 0x3b02 <SliderAlgorithm+0x3ec>
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
    3a7c:	00 93 03 2b 	sts	0x2B03, r16
    3a80:	10 93 04 2b 	sts	0x2B04, r17
         
         for (LED_State = 0; LED_State < 8; )
    3a84:	10 92 0e 2b 	sts	0x2B0E, r1
    3a88:	e0 e0       	ldi	r30, 0x00	; 0
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    3a8a:	6f ef       	ldi	r22, 0xFF	; 255
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3a8c:	30 e0       	ldi	r19, 0x00	; 0
    3a8e:	ce 01       	movw	r24, r28
    3a90:	45 96       	adiw	r24, 0x15	; 21
    3a92:	82 0f       	add	r24, r18
    3a94:	93 1f       	adc	r25, r19
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
         {
            LED_flash_pattern[LED_State++] = 0xFF;
    3a96:	ae 2f       	mov	r26, r30
    3a98:	b0 e0       	ldi	r27, 0x00	; 0
    3a9a:	aa 5f       	subi	r26, 0xFA	; 250
    3a9c:	b4 4d       	sbci	r27, 0xD4	; 212
    3a9e:	6c 93       	st	X, r22
    3aa0:	a1 e0       	ldi	r26, 0x01	; 1
    3aa2:	ae 0f       	add	r26, r30
            LED_flash_pattern[LED_State++] = 0xFF;
    3aa4:	b0 e0       	ldi	r27, 0x00	; 0
    3aa6:	aa 5f       	subi	r26, 0xFA	; 250
    3aa8:	b4 4d       	sbci	r27, 0xD4	; 212
    3aaa:	6c 93       	st	X, r22
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3aac:	dc 01       	movw	r26, r24
    3aae:	5c 91       	ld	r21, X
    3ab0:	a2 e0       	ldi	r26, 0x02	; 2
    3ab2:	ae 0f       	add	r26, r30
    3ab4:	b0 e0       	ldi	r27, 0x00	; 0
    3ab6:	aa 5f       	subi	r26, 0xFA	; 250
    3ab8:	b4 4d       	sbci	r27, 0xD4	; 212
    3aba:	5c 93       	st	X, r21
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3abc:	44 e0       	ldi	r20, 0x04	; 4
    3abe:	4e 0f       	add	r20, r30
    3ac0:	ed 5f       	subi	r30, 0xFD	; 253
    3ac2:	f0 e0       	ldi	r31, 0x00	; 0
    3ac4:	ea 5f       	subi	r30, 0xFA	; 250
    3ac6:	f4 4d       	sbci	r31, 0xD4	; 212
    3ac8:	50 83       	st	Z, r21
      // check time stamp for pause
      if ((QS_GlobalCounterOverflow - Pause_gesture_timeout) >= PAUSE_TIMEOUT) 
      {
         LED_flash_timeout = QS_GlobalCounterOverflow;
         
         for (LED_State = 0; LED_State < 8; )
    3aca:	48 30       	cpi	r20, 0x08	; 8
    3acc:	10 f4       	brcc	.+4      	; 0x3ad2 <SliderAlgorithm+0x3bc>
         {
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = 0xFF;
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
            LED_flash_pattern[LED_State++] = LED_P1_Vals[xbucket];
    3ace:	e4 2f       	mov	r30, r20
    3ad0:	e2 cf       	rjmp	.-60     	; 0x3a96 <SliderAlgorithm+0x380>
         } // LED_State should be 8 when this loop is finished.

         LED_State = 16; // Set LED_State to 16 to repeat the pattern twice
    3ad2:	80 e1       	ldi	r24, 0x10	; 16
    3ad4:	80 93 0e 2b 	sts	0x2B0E, r24

         // Send off a PAUSE gesture to host.
         printf("                            %s: %d\n", "PAUSE", xbucket<<8) ;   
    3ad8:	2f 93       	push	r18
    3ada:	1f 92       	push	r1
    3adc:	82 e3       	ldi	r24, 0x32	; 50
    3ade:	96 e2       	ldi	r25, 0x26	; 38
    3ae0:	9f 93       	push	r25
    3ae2:	8f 93       	push	r24
    3ae4:	88 e3       	ldi	r24, 0x38	; 56
    3ae6:	96 e2       	ldi	r25, 0x26	; 38
    3ae8:	9f 93       	push	r25
    3aea:	8f 93       	push	r24
    3aec:	0e 94 56 54 	call	0xa8ac	; 0xa8ac <printf>
		 samples->gesture = PAUSE;         
    3af0:	83 e0       	ldi	r24, 0x03	; 3
    3af2:	f7 01       	movw	r30, r14
    3af4:	82 8b       	std	Z+18, r24	; 0x12
    3af6:	0f 90       	pop	r0
    3af8:	0f 90       	pop	r0
    3afa:	0f 90       	pop	r0
    3afc:	0f 90       	pop	r0
    3afe:	0f 90       	pop	r0
    3b00:	0f 90       	pop	r0
       // It is best to display this than printf. Use AUX and PS3 channels
       //REPLACE_0_PS3( 0 );
       //REPLACE_0_AUX( 0 ); 
	    //printf("no touch \r\n");
   }
}
    3b02:	ae 96       	adiw	r28, 0x2e	; 46
    3b04:	cd bf       	out	0x3d, r28	; 61
    3b06:	de bf       	out	0x3e, r29	; 62
    3b08:	df 91       	pop	r29
    3b0a:	cf 91       	pop	r28
    3b0c:	1f 91       	pop	r17
    3b0e:	0f 91       	pop	r16
    3b10:	ff 90       	pop	r15
    3b12:	ef 90       	pop	r14
    3b14:	df 90       	pop	r13
    3b16:	cf 90       	pop	r12
    3b18:	bf 90       	pop	r11
    3b1a:	af 90       	pop	r10
    3b1c:	9f 90       	pop	r9
    3b1e:	8f 90       	pop	r8
    3b20:	7f 90       	pop	r7
    3b22:	5f 90       	pop	r5
    3b24:	4f 90       	pop	r4
    3b26:	3f 90       	pop	r3
    3b28:	2f 90       	pop	r2
    3b2a:	08 95       	ret

00003b2c <spi_setup>:
#include "spi.h"

void spi_setup(void) 
{
	//Disable power reduction for SPIC 
	PR.PRPC &= ~0x08;	
    3b2c:	e0 e7       	ldi	r30, 0x70	; 112
    3b2e:	f0 e0       	ldi	r31, 0x00	; 0
    3b30:	83 81       	ldd	r24, Z+3	; 0x03
    3b32:	87 7f       	andi	r24, 0xF7	; 247
    3b34:	83 83       	std	Z+3, r24	; 0x03
	
	PORTC.DIRSET = SD_CS | SD_MOSI | SD_SCK;
    3b36:	e0 e4       	ldi	r30, 0x40	; 64
    3b38:	f6 e0       	ldi	r31, 0x06	; 6
    3b3a:	80 eb       	ldi	r24, 0xB0	; 176
    3b3c:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = SD_MISO;
    3b3e:	80 e4       	ldi	r24, 0x40	; 64
    3b40:	82 83       	std	Z+2, r24	; 0x02
	PORTC.OUTSET = SD_CS;
    3b42:	80 e1       	ldi	r24, 0x10	; 16
    3b44:	85 83       	std	Z+5, r24	; 0x05
	
	PORTC.PIN3CTRL = PORT_OPC_PULLUP_gc;
    3b46:	88 e1       	ldi	r24, 0x18	; 24
    3b48:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLUP_gc;
    3b4a:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLUP_gc;
    3b4c:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;
    3b4e:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLUP_gc;
    3b50:	87 8b       	std	Z+23, r24	; 0x17
	
	SPIC.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
    3b52:	80 ed       	ldi	r24, 0xD0	; 208
    3b54:	80 93 c0 08 	sts	0x08C0, r24
    3b58:	08 95       	ret

00003b5a <spi_disable>:
}

void spi_disable(void) 
{	
	SPIC.CTRL = 0;
    3b5a:	10 92 c0 08 	sts	0x08C0, r1
	
	PORTC.DIRCLR   = SD_CS | SD_MOSI | SD_MISO | SD_SCK | SD_CD;
    3b5e:	e0 e4       	ldi	r30, 0x40	; 64
    3b60:	f6 e0       	ldi	r31, 0x06	; 6
    3b62:	88 ef       	ldi	r24, 0xF8	; 248
    3b64:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN3CTRL = PORT_OPC_PULLDOWN_gc;
    3b66:	80 e1       	ldi	r24, 0x10	; 16
    3b68:	83 8b       	std	Z+19, r24	; 0x13
	PORTC.PIN4CTRL = PORT_OPC_PULLDOWN_gc;
    3b6a:	84 8b       	std	Z+20, r24	; 0x14
	PORTC.PIN5CTRL = PORT_OPC_PULLDOWN_gc;
    3b6c:	85 8b       	std	Z+21, r24	; 0x15
	PORTC.PIN6CTRL = PORT_OPC_PULLDOWN_gc;
    3b6e:	86 8b       	std	Z+22, r24	; 0x16
	PORTC.PIN7CTRL = PORT_OPC_PULLDOWN_gc;
    3b70:	87 8b       	std	Z+23, r24	; 0x17
	
	//Cut power to SD card
	PORTB.DIRSET = PIN1_bm; 
    3b72:	e0 e2       	ldi	r30, 0x20	; 32
    3b74:	f6 e0       	ldi	r31, 0x06	; 6
    3b76:	82 e0       	ldi	r24, 0x02	; 2
    3b78:	81 83       	std	Z+1, r24	; 0x01
	PORTB.OUTSET = PIN1_bm;
    3b7a:	85 83       	std	Z+5, r24	; 0x05
	
	//Enable power reduction for SPIC 
	PR.PRPC |= 0x08;
    3b7c:	e0 e7       	ldi	r30, 0x70	; 112
    3b7e:	f0 e0       	ldi	r31, 0x00	; 0
    3b80:	83 81       	ldd	r24, Z+3	; 0x03
    3b82:	88 60       	ori	r24, 0x08	; 8
    3b84:	83 83       	std	Z+3, r24	; 0x03
    3b86:	08 95       	ret

00003b88 <spi_wr_rd>:

uint8_t spi_wr_rd(uint8_t data) 
{	
	uint16_t timeout = 0;
	
	SPIC.DATA = data;
    3b88:	80 93 c3 08 	sts	0x08C3, r24
	while(!(SPIC.STATUS & SPI_IF_bm)) {
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	20 91 c2 08 	lds	r18, 0x08C2
    3b94:	27 fd       	sbrc	r18, 7
    3b96:	05 c0       	rjmp	.+10     	; 0x3ba2 <spi_wr_rd+0x1a>
    3b98:	01 97       	sbiw	r24, 0x01	; 1
		if (timeout++ == 0xffff) {
    3b9a:	00 97       	sbiw	r24, 0x00	; 0
    3b9c:	c9 f7       	brne	.-14     	; 0x3b90 <spi_wr_rd+0x8>
			return 0;
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return SPIC.DATA;
}
    3ba0:	08 95       	ret
	while(!(SPIC.STATUS & SPI_IF_bm)) {
		if (timeout++ == 0xffff) {
			return 0;
		}
	}
	return SPIC.DATA;
    3ba2:	80 91 c3 08 	lds	r24, 0x08C3
    3ba6:	08 95       	ret

00003ba8 <twi_setup>:
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3ba8:	e0 e7       	ldi	r30, 0x70	; 112
    3baa:	f0 e0       	ldi	r31, 0x00	; 0
    3bac:	83 81       	ldd	r24, Z+3	; 0x03
    3bae:	8f 7b       	andi	r24, 0xBF	; 191
    3bb0:	83 83       	std	Z+3, r24	; 0x03
    3bb2:	e0 e8       	ldi	r30, 0x80	; 128
    3bb4:	f4 e0       	ldi	r31, 0x04	; 4
    3bb6:	12 82       	std	Z+2, r1	; 0x02
    3bb8:	89 e0       	ldi	r24, 0x09	; 9
    3bba:	85 83       	std	Z+5, r24	; 0x05
    3bbc:	88 e0       	ldi	r24, 0x08	; 8
    3bbe:	81 83       	std	Z+1, r24	; 0x01
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	84 83       	std	Z+4, r24	; 0x04
    3bc4:	08 95       	ret

00003bc6 <twi_start_transmission>:
}

uint8_t twi_start_transmission(TWI_t* const TWI,
const uint8_t slave_address,
const uint16_t timeout_ms)
{
    3bc6:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    3bc8:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    3bca:	24 e6       	ldi	r18, 0x64	; 100
    3bcc:	24 9f       	mul	r18, r20
    3bce:	c0 01       	movw	r24, r0
    3bd0:	25 9f       	mul	r18, r21
    3bd2:	90 0d       	add	r25, r0
    3bd4:	11 24       	eor	r1, r1
	while (timeout_remaining)
    3bd6:	00 97       	sbiw	r24, 0x00	; 0
    3bd8:	b9 f0       	breq	.+46     	; 0x3c08 <twi_start_transmission+0x42>
	{
		uint8_t status = TWI->MASTER.STATUS;
    3bda:	24 81       	ldd	r18, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    3bdc:	32 2f       	mov	r19, r18
    3bde:	38 74       	andi	r19, 0x48	; 72
    3be0:	38 34       	cpi	r19, 0x48	; 72
    3be2:	11 f4       	brne	.+4      	; 0x3be8 <twi_start_transmission+0x22>
		{
			TWI->MASTER.ADDR = slave_address;
    3be4:	66 83       	std	Z+6, r22	; 0x06
    3be6:	0a c0       	rjmp	.+20     	; 0x3bfc <twi_start_transmission+0x36>
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    3be8:	32 2f       	mov	r19, r18
    3bea:	30 75       	andi	r19, 0x50	; 80
    3bec:	30 35       	cpi	r19, 0x50	; 80
    3bee:	21 f4       	brne	.+8      	; 0x3bf8 <twi_start_transmission+0x32>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3bf0:	87 e0       	ldi	r24, 0x07	; 7
    3bf2:	83 83       	std	Z+3, r24	; 0x03
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
    3bf4:	84 e0       	ldi	r24, 0x04	; 4
    3bf6:	08 95       	ret
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    3bf8:	20 7c       	andi	r18, 0xC0	; 192
    3bfa:	61 f4       	brne	.+24     	; 0x3c14 <twi_start_transmission+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3bfc:	2a e6       	ldi	r18, 0x6A	; 106
    3bfe:	2a 95       	dec	r18
    3c00:	f1 f7       	brne	.-4      	; 0x3bfe <twi_start_transmission+0x38>
    3c02:	00 c0       	rjmp	.+0      	; 0x3c04 <twi_start_transmission+0x3e>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    3c04:	01 97       	sbiw	r24, 0x01	; 1
    3c06:	e7 cf       	rjmp	.-50     	; 0x3bd6 <twi_start_transmission+0x10>
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    3c08:	84 81       	ldd	r24, Z+4	; 0x04
    3c0a:	85 ff       	sbrs	r24, 5
    3c0c:	05 c0       	rjmp	.+10     	; 0x3c18 <twi_start_transmission+0x52>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3c0e:	87 e0       	ldi	r24, 0x07	; 7
    3c10:	83 83       	std	Z+3, r24	; 0x03
    3c12:	02 c0       	rjmp	.+4      	; 0x3c18 <twi_start_transmission+0x52>
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
		{
			return TWI_ERROR_NO_ERROR;
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	08 95       	ret
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    3c18:	83 e0       	ldi	r24, 0x03	; 3
			twi_stop_transmission(TWI);
		}
	}

	return TWI_ERROR_BUS_CAP_TIMEOUT;
}
    3c1a:	08 95       	ret

00003c1c <twi_send_byte>:

uint8_t twi_send_byte(TWI_t* const TWI,
const uint16_t timeout_ms,
const uint8_t data)
{
    3c1c:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	TWI->MASTER.DATA = data;
    3c1e:	47 83       	std	Z+7, r20	; 0x07
	
	timeout_remaining = (timeout_ms * 100);
    3c20:	24 e6       	ldi	r18, 0x64	; 100
    3c22:	26 9f       	mul	r18, r22
    3c24:	c0 01       	movw	r24, r0
    3c26:	27 9f       	mul	r18, r23
    3c28:	90 0d       	add	r25, r0
    3c2a:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm)&& timeout_remaining) {
    3c2c:	24 81       	ldd	r18, Z+4	; 0x04
    3c2e:	26 fd       	sbrc	r18, 6
    3c30:	08 c0       	rjmp	.+16     	; 0x3c42 <twi_send_byte+0x26>
    3c32:	00 97       	sbiw	r24, 0x00	; 0
    3c34:	31 f0       	breq	.+12     	; 0x3c42 <twi_send_byte+0x26>
    3c36:	2a e6       	ldi	r18, 0x6A	; 106
    3c38:	2a 95       	dec	r18
    3c3a:	f1 f7       	brne	.-4      	; 0x3c38 <twi_send_byte+0x1c>
    3c3c:	00 c0       	rjmp	.+0      	; 0x3c3e <twi_send_byte+0x22>
		_delay_us(10);
		timeout_remaining--;
    3c3e:	01 97       	sbiw	r24, 0x01	; 1
    3c40:	f5 cf       	rjmp	.-22     	; 0x3c2c <twi_send_byte+0x10>
	}

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    3c42:	84 81       	ldd	r24, Z+4	; 0x04
    3c44:	86 ff       	sbrs	r24, 6
    3c46:	06 c0       	rjmp	.+12     	; 0x3c54 <twi_send_byte+0x38>
    3c48:	84 81       	ldd	r24, Z+4	; 0x04
    3c4a:	82 95       	swap	r24
    3c4c:	81 70       	andi	r24, 0x01	; 1
    3c4e:	91 e0       	ldi	r25, 0x01	; 1
    3c50:	89 27       	eor	r24, r25
    3c52:	08 95       	ret
    3c54:	80 e0       	ldi	r24, 0x00	; 0
}
    3c56:	08 95       	ret

00003c58 <twi_receive_byte>:

uint8_t twi_receive_byte(TWI_t* const TWI,
const uint16_t timeout_ms,
uint8_t* const data,
const uint8_t end_of_data)
{
    3c58:	fc 01       	movw	r30, r24
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
    3c5a:	84 81       	ldd	r24, Z+4	; 0x04
    3c5c:	8c 70       	andi	r24, 0x0C	; 12
    3c5e:	8c 30       	cpi	r24, 0x0C	; 12
    3c60:	e1 f0       	breq	.+56     	; 0x3c9a <twi_receive_byte+0x42>
		return false;
	}
	timeout_remaining = (timeout_ms * 100);
    3c62:	34 e6       	ldi	r19, 0x64	; 100
    3c64:	36 9f       	mul	r19, r22
    3c66:	c0 01       	movw	r24, r0
    3c68:	37 9f       	mul	r19, r23
    3c6a:	90 0d       	add	r25, r0
    3c6c:	11 24       	eor	r1, r1
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm) && timeout_remaining) {
    3c6e:	34 81       	ldd	r19, Z+4	; 0x04
    3c70:	37 fd       	sbrc	r19, 7
    3c72:	08 c0       	rjmp	.+16     	; 0x3c84 <twi_receive_byte+0x2c>
    3c74:	00 97       	sbiw	r24, 0x00	; 0
    3c76:	31 f0       	breq	.+12     	; 0x3c84 <twi_receive_byte+0x2c>
    3c78:	3a e6       	ldi	r19, 0x6A	; 106
    3c7a:	3a 95       	dec	r19
    3c7c:	f1 f7       	brne	.-4      	; 0x3c7a <twi_receive_byte+0x22>
    3c7e:	00 c0       	rjmp	.+0      	; 0x3c80 <twi_receive_byte+0x28>
		_delay_us(10);
		timeout_remaining--;
    3c80:	01 97       	sbiw	r24, 0x01	; 1
    3c82:	f5 cf       	rjmp	.-22     	; 0x3c6e <twi_receive_byte+0x16>
	}

	*data = TWI->MASTER.DATA;
    3c84:	87 81       	ldd	r24, Z+7	; 0x07
    3c86:	da 01       	movw	r26, r20
    3c88:	8c 93       	st	X, r24

	if (end_of_data)
    3c8a:	22 23       	and	r18, r18
    3c8c:	11 f0       	breq	.+4      	; 0x3c92 <twi_receive_byte+0x3a>
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3c8e:	87 e0       	ldi	r24, 0x07	; 7
    3c90:	01 c0       	rjmp	.+2      	; 0x3c94 <twi_receive_byte+0x3c>
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    3c92:	82 e0       	ldi	r24, 0x02	; 2
    3c94:	83 83       	std	Z+3, r24	; 0x03

	return true;
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	08 95       	ret
const uint8_t end_of_data)
{
	uint16_t timeout_remaining;
	
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
		return false;
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
}
    3c9c:	08 95       	ret

00003c9e <twi_read_packet>:
const uint8_t slave_address,
const uint16_t timeout_ms,
const uint8_t reg,
uint8_t* data,
uint8_t length)
{
    3c9e:	8f 92       	push	r8
    3ca0:	9f 92       	push	r9
    3ca2:	af 92       	push	r10
    3ca4:	bf 92       	push	r11
    3ca6:	cf 92       	push	r12
    3ca8:	df 92       	push	r13
    3caa:	ef 92       	push	r14
    3cac:	ff 92       	push	r15
    3cae:	0f 93       	push	r16
    3cb0:	1f 93       	push	r17
    3cb2:	cf 93       	push	r28
    3cb4:	df 93       	push	r29
    3cb6:	1f 92       	push	r1
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
    3cbc:	4c 01       	movw	r8, r24
    3cbe:	f6 2e       	mov	r15, r22
    3cc0:	6a 01       	movw	r12, r20
	uint8_t error_code;
	uint8_t len = length;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    3cc2:	66 0f       	add	r22, r22
    3cc4:	29 83       	std	Y+1, r18	; 0x01
    3cc6:	7f df       	rcall	.-258    	; 0x3bc6 <twi_start_transmission>
    3cc8:	29 81       	ldd	r18, Y+1	; 0x01
    3cca:	81 30       	cpi	r24, 0x01	; 1
    3ccc:	41 f5       	brne	.+80     	; 0x3d1e <twi_read_packet+0x80>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
    3cce:	42 2f       	mov	r20, r18
    3cd0:	b6 01       	movw	r22, r12
    3cd2:	c4 01       	movw	r24, r8
    3cd4:	a3 df       	rcall	.-186    	; 0x3c1c <twi_send_byte>
    3cd6:	88 23       	and	r24, r24
    3cd8:	21 f1       	breq	.+72     	; 0x3d22 <twi_read_packet+0x84>
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
    3cda:	6f 2d       	mov	r22, r15
    3cdc:	66 0f       	add	r22, r22
    3cde:	61 60       	ori	r22, 0x01	; 1
    3ce0:	a6 01       	movw	r20, r12
    3ce2:	c4 01       	movw	r24, r8
    3ce4:	70 df       	rcall	.-288    	; 0x3bc6 <twi_start_transmission>
    3ce6:	81 30       	cpi	r24, 0x01	; 1
    3ce8:	21 f0       	breq	.+8      	; 0x3cf2 <twi_read_packet+0x54>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3cea:	87 e0       	ldi	r24, 0x07	; 7
    3cec:	f4 01       	movw	r30, r8
    3cee:	83 83       	std	Z+3, r24	; 0x03
    3cf0:	16 c0       	rjmp	.+44     	; 0x3d1e <twi_read_packet+0x80>
    3cf2:	ff 24       	eor	r15, r15
    3cf4:	fa 94       	dec	r15
    3cf6:	fe 0c       	add	r15, r14
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
    3cf8:	8f ef       	ldi	r24, 0xFF	; 255
    3cfa:	f8 16       	cp	r15, r24
    3cfc:	b1 f3       	breq	.-20     	; 0x3cea <twi_read_packet+0x4c>
			{
				if (!(twi_receive_byte(TWI, timeout_ms, data++, (length == 0))))
    3cfe:	58 01       	movw	r10, r16
    3d00:	ff ef       	ldi	r31, 0xFF	; 255
    3d02:	af 1a       	sub	r10, r31
    3d04:	bf 0a       	sbc	r11, r31
    3d06:	21 e0       	ldi	r18, 0x01	; 1
    3d08:	f1 10       	cpse	r15, r1
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	a8 01       	movw	r20, r16
    3d0e:	b6 01       	movw	r22, r12
    3d10:	c4 01       	movw	r24, r8
    3d12:	a2 df       	rcall	.-188    	; 0x3c58 <twi_receive_byte>
    3d14:	fa 94       	dec	r15
    3d16:	88 23       	and	r24, r24
    3d18:	41 f3       	breq	.-48     	; 0x3cea <twi_read_packet+0x4c>
    3d1a:	85 01       	movw	r16, r10
    3d1c:	ed cf       	rjmp	.-38     	; 0x3cf8 <twi_read_packet+0x5a>
		}

		twi_stop_transmission(TWI);
	}

	return len;
    3d1e:	8e 2d       	mov	r24, r14
    3d20:	01 c0       	rjmp	.+2      	; 0x3d24 <twi_read_packet+0x86>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    3d22:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return len;
}
    3d24:	0f 90       	pop	r0
    3d26:	df 91       	pop	r29
    3d28:	cf 91       	pop	r28
    3d2a:	1f 91       	pop	r17
    3d2c:	0f 91       	pop	r16
    3d2e:	ff 90       	pop	r15
    3d30:	ef 90       	pop	r14
    3d32:	df 90       	pop	r13
    3d34:	cf 90       	pop	r12
    3d36:	bf 90       	pop	r11
    3d38:	af 90       	pop	r10
    3d3a:	9f 90       	pop	r9
    3d3c:	8f 90       	pop	r8
    3d3e:	08 95       	ret

00003d40 <twi_write_packet>:
const uint8_t slave_address,
const uint16_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    3d40:	8f 92       	push	r8
    3d42:	9f 92       	push	r9
    3d44:	af 92       	push	r10
    3d46:	bf 92       	push	r11
    3d48:	cf 92       	push	r12
    3d4a:	df 92       	push	r13
    3d4c:	ef 92       	push	r14
    3d4e:	0f 93       	push	r16
    3d50:	1f 93       	push	r17
    3d52:	cf 93       	push	r28
    3d54:	df 93       	push	r29
    3d56:	1f 92       	push	r1
    3d58:	cd b7       	in	r28, 0x3d	; 61
    3d5a:	de b7       	in	r29, 0x3e	; 62
    3d5c:	4c 01       	movw	r8, r24
    3d5e:	5a 01       	movw	r10, r20
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    3d60:	66 0f       	add	r22, r22
    3d62:	29 83       	std	Y+1, r18	; 0x01
    3d64:	30 df       	rcall	.-416    	; 0x3bc6 <twi_start_transmission>
    3d66:	29 81       	ldd	r18, Y+1	; 0x01
    3d68:	81 30       	cpi	r24, 0x01	; 1
    3d6a:	e1 f4       	brne	.+56     	; 0x3da4 <twi_write_packet+0x64>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
    3d6c:	42 2f       	mov	r20, r18
    3d6e:	b5 01       	movw	r22, r10
    3d70:	c4 01       	movw	r24, r8
    3d72:	54 df       	rcall	.-344    	; 0x3c1c <twi_send_byte>
    3d74:	88 23       	and	r24, r24
    3d76:	c1 f0       	breq	.+48     	; 0x3da8 <twi_write_packet+0x68>
    3d78:	68 01       	movw	r12, r16
    3d7a:	1f ef       	ldi	r17, 0xFF	; 255
    3d7c:	1e 0d       	add	r17, r14
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    3d7e:	1f 3f       	cpi	r17, 0xFF	; 255
    3d80:	61 f0       	breq	.+24     	; 0x3d9a <twi_write_packet+0x5a>
		{
			if (!(twi_send_byte(TWI, timeout_ms, *(data++))))
    3d82:	f6 01       	movw	r30, r12
    3d84:	41 91       	ld	r20, Z+
    3d86:	6f 01       	movw	r12, r30
    3d88:	b5 01       	movw	r22, r10
    3d8a:	c4 01       	movw	r24, r8
    3d8c:	47 df       	rcall	.-370    	; 0x3c1c <twi_send_byte>
    3d8e:	9f ef       	ldi	r25, 0xFF	; 255
    3d90:	91 0f       	add	r25, r17
    3d92:	88 23       	and	r24, r24
    3d94:	11 f0       	breq	.+4      	; 0x3d9a <twi_write_packet+0x5a>
    3d96:	19 2f       	mov	r17, r25
    3d98:	f2 cf       	rjmp	.-28     	; 0x3d7e <twi_write_packet+0x3e>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
}

void twi_stop_transmission(TWI_t* const TWI) 
{
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    3d9a:	87 e0       	ldi	r24, 0x07	; 7
    3d9c:	f4 01       	movw	r30, r8
    3d9e:	83 83       	std	Z+3, r24	; 0x03
    3da0:	81 2f       	mov	r24, r17
    3da2:	03 c0       	rjmp	.+6      	; 0x3daa <twi_write_packet+0x6a>
    3da4:	8e 2d       	mov	r24, r14
    3da6:	01 c0       	rjmp	.+2      	; 0x3daa <twi_write_packet+0x6a>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, timeout_ms, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    3da8:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return length;
    3daa:	0f 90       	pop	r0
    3dac:	df 91       	pop	r29
    3dae:	cf 91       	pop	r28
    3db0:	1f 91       	pop	r17
    3db2:	0f 91       	pop	r16
    3db4:	ef 90       	pop	r14
    3db6:	df 90       	pop	r13
    3db8:	cf 90       	pop	r12
    3dba:	bf 90       	pop	r11
    3dbc:	af 90       	pop	r10
    3dbe:	9f 90       	pop	r9
    3dc0:	8f 90       	pop	r8
    3dc2:	08 95       	ret

00003dc4 <uart_setup>:
#include "uart.h"

void uart_setup(void) 
{
	//Disable power reduction for USARTD0 
	PR.PRPD &= ~0x10;
    3dc4:	e0 e7       	ldi	r30, 0x70	; 112
    3dc6:	f0 e0       	ldi	r31, 0x00	; 0
    3dc8:	84 81       	ldd	r24, Z+4	; 0x04
    3dca:	8f 7e       	andi	r24, 0xEF	; 239
    3dcc:	84 83       	std	Z+4, r24	; 0x04
		
	PORTD.DIRSET = UART_TX;
    3dce:	e0 e6       	ldi	r30, 0x60	; 96
    3dd0:	f6 e0       	ldi	r31, 0x06	; 6
    3dd2:	88 e0       	ldi	r24, 0x08	; 8
    3dd4:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = UART_RX;
    3dd6:	84 e0       	ldi	r24, 0x04	; 4
    3dd8:	82 83       	std	Z+2, r24	; 0x02
	//PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;
	
	USARTD0.CTRLA	  = USART_RXCINTLVL_MED_gc;
    3dda:	e0 ea       	ldi	r30, 0xA0	; 160
    3ddc:	f9 e0       	ldi	r31, 0x09	; 9
    3dde:	80 e2       	ldi	r24, 0x20	; 32
    3de0:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 2094;
    3de2:	8e e2       	ldi	r24, 0x2E	; 46
    3de4:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (-7 << 4) | (2094 >> 8);
    3de6:	88 e9       	ldi	r24, 0x98	; 152
    3de8:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLC	  = USART_CHSIZE_8BIT_gc;
    3dea:	83 e0       	ldi	r24, 0x03	; 3
    3dec:	85 83       	std	Z+5, r24	; 0x05
	USARTD0.CTRLB	  = USART_RXEN_bm | USART_TXEN_bm;
    3dee:	88 e1       	ldi	r24, 0x18	; 24
    3df0:	84 83       	std	Z+4, r24	; 0x04
    3df2:	08 95       	ret

00003df4 <uart_disable>:
}

void uart_disable(void)
{	
	USARTD0.CTRLB = 0;
    3df4:	e0 ea       	ldi	r30, 0xA0	; 160
    3df6:	f9 e0       	ldi	r31, 0x09	; 9
    3df8:	14 82       	std	Z+4, r1	; 0x04
	
	PORTD.DIRCLR   = UART_TX | UART_RX;
    3dfa:	e0 e6       	ldi	r30, 0x60	; 96
    3dfc:	f6 e0       	ldi	r31, 0x06	; 6
    3dfe:	8c e0       	ldi	r24, 0x0C	; 12
    3e00:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN2CTRL = PORT_OPC_PULLDOWN_gc;
    3e02:	80 e1       	ldi	r24, 0x10	; 16
    3e04:	82 8b       	std	Z+18, r24	; 0x12
	PORTD.PIN3CTRL = PORT_OPC_PULLDOWN_gc;
    3e06:	83 8b       	std	Z+19, r24	; 0x13
	
	//Enable power reduction for USARTD0 
	PR.PRPD |= 0x10;
    3e08:	e0 e7       	ldi	r30, 0x70	; 112
    3e0a:	f0 e0       	ldi	r31, 0x00	; 0
    3e0c:	84 81       	ldd	r24, Z+4	; 0x04
    3e0e:	80 61       	ori	r24, 0x10	; 16
    3e10:	84 83       	std	Z+4, r24	; 0x04
    3e12:	08 95       	ret

00003e14 <uart_put_char>:
}

void uart_put_char(char c) 
{
	while (!(USARTD0.STATUS & USART_DREIF_bm));
    3e14:	90 91 a1 09 	lds	r25, 0x09A1
    3e18:	95 ff       	sbrs	r25, 5
    3e1a:	fc cf       	rjmp	.-8      	; 0x3e14 <uart_put_char>
	USARTD0.DATA = c;
    3e1c:	80 93 a0 09 	sts	0x09A0, r24
    3e20:	08 95       	ret

00003e22 <uart_get_char>:
}

char uart_get_char(void) 
{
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
    3e22:	80 91 a1 09 	lds	r24, 0x09A1
    3e26:	87 ff       	sbrs	r24, 7
    3e28:	fc cf       	rjmp	.-8      	; 0x3e22 <uart_get_char>
	return USARTD0.DATA;
    3e2a:	80 91 a0 09 	lds	r24, 0x09A0
}
    3e2e:	08 95       	ret

00003e30 <uart_write_str>:

void uart_write_str(char *str) 
{
    3e30:	cf 93       	push	r28
    3e32:	df 93       	push	r29
    3e34:	ec 01       	movw	r28, r24
	while (*str) {
    3e36:	89 91       	ld	r24, Y+
    3e38:	88 23       	and	r24, r24
    3e3a:	11 f0       	breq	.+4      	; 0x3e40 <uart_write_str+0x10>
		uart_put_char(*str++);
    3e3c:	eb df       	rcall	.-42     	; 0x3e14 <uart_put_char>
    3e3e:	fb cf       	rjmp	.-10     	; 0x3e36 <uart_write_str+0x6>
	}
	uart_put_char('\r');
    3e40:	8d e0       	ldi	r24, 0x0D	; 13
    3e42:	e8 df       	rcall	.-48     	; 0x3e14 <uart_put_char>
	uart_put_char('\n');
    3e44:	8a e0       	ldi	r24, 0x0A	; 10
}
    3e46:	df 91       	pop	r29
    3e48:	cf 91       	pop	r28
{
	while (*str) {
		uart_put_char(*str++);
	}
	uart_put_char('\r');
	uart_put_char('\n');
    3e4a:	e4 cf       	rjmp	.-56     	; 0x3e14 <uart_put_char>

00003e4c <__vector_18>:
	dac_setup(false);
	timer_setup();
}

ISR(TCC0_CCC_vect) 
{
    3e4c:	1f 92       	push	r1
    3e4e:	0f 92       	push	r0
    3e50:	0f b6       	in	r0, 0x3f	; 63
    3e52:	0f 92       	push	r0
    3e54:	11 24       	eor	r1, r1
    3e56:	08 b6       	in	r0, 0x38	; 56
    3e58:	0f 92       	push	r0
    3e5a:	18 be       	out	0x38, r1	; 56
    3e5c:	8f 93       	push	r24
    3e5e:	9f 93       	push	r25
	if (test_val == 1)
    3e60:	80 91 19 2b 	lds	r24, 0x2B19
    3e64:	90 91 1a 2b 	lds	r25, 0x2B1A
    3e68:	01 97       	sbiw	r24, 0x01	; 1
    3e6a:	59 f4       	brne	.+22     	; 0x3e82 <__vector_18+0x36>
	{
		DACB.CH0DATA = 0xfff;
    3e6c:	8f ef       	ldi	r24, 0xFF	; 255
    3e6e:	9f e0       	ldi	r25, 0x0F	; 15
    3e70:	80 93 38 03 	sts	0x0338, r24
    3e74:	90 93 39 03 	sts	0x0339, r25
		test_val = 0;
    3e78:	10 92 19 2b 	sts	0x2B19, r1
    3e7c:	10 92 1a 2b 	sts	0x2B1A, r1
    3e80:	0a c0       	rjmp	.+20     	; 0x3e96 <__vector_18+0x4a>
	} else {
		DACB.CH0DATA = 0x000;
    3e82:	10 92 38 03 	sts	0x0338, r1
    3e86:	10 92 39 03 	sts	0x0339, r1
		test_val = 1;
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	80 93 19 2b 	sts	0x2B19, r24
    3e92:	90 93 1a 2b 	sts	0x2B1A, r25
	}
	
}
    3e96:	9f 91       	pop	r25
    3e98:	8f 91       	pop	r24
    3e9a:	0f 90       	pop	r0
    3e9c:	08 be       	out	0x38, r0	; 56
    3e9e:	0f 90       	pop	r0
    3ea0:	0f be       	out	0x3f, r0	; 63
    3ea2:	0f 90       	pop	r0
    3ea4:	1f 90       	pop	r1
    3ea6:	18 95       	reti

00003ea8 <main>:
	asm("sleep");
	while(1);
}

int main(void) 
{	
    3ea8:	cf 93       	push	r28
    3eaa:	df 93       	push	r29
    3eac:	cd b7       	in	r28, 0x3d	; 61
    3eae:	de b7       	in	r29, 0x3e	; 62
    3eb0:	64 97       	sbiw	r28, 0x14	; 20
    3eb2:	cd bf       	out	0x3d, r28	; 61
    3eb4:	de bf       	out	0x3e, r29	; 62
	//Structures
	SI114X_IRQ_SAMPLE sensor_data;
	
	//System
	clock_setup_32_mhz_pll();
    3eb6:	0e 94 b1 08 	call	0x1162	; 0x1162 <clock_setup_32_mhz_pll>
	
	lowpower_setup();
    3eba:	0e 94 93 12 	call	0x2526	; 0x2526 <lowpower_setup>
	display_setup();	
    3ebe:	0d d1       	rcall	.+538    	; 0x40da <display_setup>
	esp8266_off();
    3ec0:	0e 94 c6 09 	call	0x138c	; 0x138c <esp8266_off>
	spi_disable();
    3ec4:	4a de       	rcall	.-876    	; 0x3b5a <spi_disable>
	uart_disable();
    3ec6:	96 df       	rcall	.-212    	; 0x3df4 <uart_disable>
	btn_setup(POLL_MODE);
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	0e 94 36 11 	call	0x226c	; 0x226c <btn_setup>
	
	SLEEP.CTRL |= SLEEP_MODE_PWR_SAVE;
    3ece:	80 91 48 00 	lds	r24, 0x0048
    3ed2:	86 60       	ori	r24, 0x06	; 6
    3ed4:	80 93 48 00 	sts	0x0048, r24
	
	//Init env variables
	btn_status = btn_check_press();
    3ed8:	0e 94 a1 11 	call	0x2342	; 0x2342 <btn_check_press>
    3edc:	80 93 b5 2c 	sts	0x2CB5, r24
	
	if (!EEPROM_ReadEnv() || (btn_status == BTN1)) {
    3ee0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <EEPROM_ReadEnv>
    3ee4:	88 23       	and	r24, r24
    3ee6:	21 f0       	breq	.+8      	; 0x3ef0 <main+0x48>
    3ee8:	80 91 b5 2c 	lds	r24, 0x2CB5
    3eec:	81 30       	cpi	r24, 0x01	; 1
    3eee:	11 f4       	brne	.+4      	; 0x3ef4 <main+0x4c>
		menu_set_env_variables();
    3ef0:	0e 94 53 44 	call	0x88a6	; 0x88a6 <menu_set_env_variables>
	} 
	
	//Debug interface
#ifdef DEBUG_ON
	uart_setup();
    3ef4:	67 df       	rcall	.-306    	; 0x3dc4 <uart_setup>
	stdout = stdin = &mystdout;
    3ef6:	82 e1       	ldi	r24, 0x12	; 18
    3ef8:	90 e2       	ldi	r25, 0x20	; 32
    3efa:	80 93 e3 2c 	sts	0x2CE3, r24
    3efe:	90 93 e4 2c 	sts	0x2CE4, r25
    3f02:	80 93 e5 2c 	sts	0x2CE5, r24
    3f06:	90 93 e6 2c 	sts	0x2CE6, r25
	puts("SQUARECLOCK - By: Erlend Hestnes (2016)\r\n");
    3f0a:	8c e5       	ldi	r24, 0x5C	; 92
    3f0c:	96 e2       	ldi	r25, 0x26	; 38
    3f0e:	0e 94 67 54 	call	0xa8ce	; 0xa8ce <puts>

static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) 
{
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    3f12:	87 e0       	ldi	r24, 0x07	; 7
    3f14:	80 93 a2 00 	sts	0x00A2, r24
	puts("SQUARECLOCK - By: Erlend Hestnes (2016)\r\n");
#endif

	//Enable interrupts
	pmic_setup();
	sei();
    3f18:	78 94       	sei
	
	//Turn on proximity channel 1 with ISR and threshold
	twi_setup(&TWIC);
    3f1a:	80 e8       	ldi	r24, 0x80	; 128
    3f1c:	94 e0       	ldi	r25, 0x04	; 4
    3f1e:	44 de       	rcall	.-888    	; 0x3ba8 <twi_setup>

#ifdef IR_SLIDER_ALGORITHM
	si114x_baseline_calibration(&sensor_data);
    3f20:	ce 01       	movw	r24, r28
    3f22:	01 96       	adiw	r24, 0x01	; 1
    3f24:	0e 94 01 17 	call	0x2e02	; 0x2e02 <si114x_baseline_calibration>
#endif
	
	si114x_setup_ps1();
    3f28:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <si114x_setup_ps1>
	
	//Turn on RTC
	display_fade(0);
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	ef d0       	rcall	.+478    	; 0x410e <display_fade>
	rtc_enable_time_render();
    3f30:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <rtc_enable_time_render>
	display_refresh_screen();
    3f34:	ea d0       	rcall	.+468    	; 0x410a <display_refresh_screen>
	rtc_setup();
    3f36:	0e 94 b1 12 	call	0x2562	; 0x2562 <rtc_setup>
	
	EEPROM_WriteEnv();
    3f3a:	0e 94 61 09 	call	0x12c2	; 0x12c2 <EEPROM_WriteEnv>
	
	//This should flip MOSI and SCK, if DMA should be used at some point...
	//PORTC.REMAP |= PORT_SPI_bm;
	
	bool led_on = true;
    3f3e:	ff 24       	eor	r15, r15
    3f40:	f3 94       	inc	r15
				_delay_ms(1000);
			}
			btn_status = NO_BTN;
			led_on ^= true;
		} else if (alarm_status == ALARM_TRIGGERED) {
			alarm_status = ALARM_OFF;
    3f42:	82 e0       	ldi	r24, 0x02	; 2
    3f44:	e8 2e       	mov	r14, r24
			} else {
				display_on();
				_delay_ms(1000);
			}
			btn_status = NO_BTN;
			led_on ^= true;
    3f46:	dd 24       	eor	r13, r13
    3f48:	d3 94       	inc	r13
	//PORTC.REMAP |= PORT_SPI_bm;
	
	bool led_on = true;
	
	while (1) { 	
		if (si114x_status == PS1_INT) {
    3f4a:	80 91 b7 2c 	lds	r24, 0x2CB7
    3f4e:	84 30       	cpi	r24, 0x04	; 4
    3f50:	09 f0       	breq	.+2      	; 0x3f54 <main+0xac>
    3f52:	40 c0       	rjmp	.+128    	; 0x3fd4 <main+0x12c>
			uint16_t cnt = 0;
			bool timeout = false;
			env.menu_id = 0;
    3f54:	10 92 2e 2b 	sts	0x2B2E, r1
			
			btn_disable_si114x_interrupt();
    3f58:	0e 94 93 11 	call	0x2326	; 0x2326 <btn_disable_si114x_interrupt>
			
			display_fade(MAX_BRIGHTNESS);
    3f5c:	88 e0       	ldi	r24, 0x08	; 8
    3f5e:	d7 d0       	rcall	.+430    	; 0x410e <display_fade>
#ifdef DEBUG_ON
			puts("DEBUG: Entered gesture mode.");
    3f60:	86 e8       	ldi	r24, 0x86	; 134
    3f62:	96 e2       	ldi	r25, 0x26	; 38
    3f64:	0e 94 67 54 	call	0xa8ce	; 0xa8ce <puts>
#endif
			si114x_setup();
    3f68:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <si114x_setup>
	
	bool led_on = true;
	
	while (1) { 	
		if (si114x_status == PS1_INT) {
			uint16_t cnt = 0;
    3f6c:	00 e0       	ldi	r16, 0x00	; 0
    3f6e:	10 e0       	ldi	r17, 0x00	; 0
#endif
			si114x_setup();
			//_delay_ms(250);
			
			while(!timeout) {
				si114x_get_data(&sensor_data);
    3f70:	ce 01       	movw	r24, r28
    3f72:	01 96       	adiw	r24, 0x01	; 1
    3f74:	0e 94 82 14 	call	0x2904	; 0x2904 <si114x_get_data>
#ifdef IR_SLIDER_ALGORITHM
				si114x_process_samples((HANDLE)SI114X_ADDR,&sensor_data);
    3f78:	be 01       	movw	r22, r28
    3f7a:	6f 5f       	subi	r22, 0xFF	; 255
    3f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3f7e:	8a e5       	ldi	r24, 0x5A	; 90
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	64 d9       	rcall	.-3384   	; 0x324c <si114x_process_samples>
#else
				slider_algorithm_v2((HANDLE)SI114X_ADDR,&sensor_data,1);
#endif
				menu_state_machine(&sensor_data);
    3f84:	ce 01       	movw	r24, r28
    3f86:	01 96       	adiw	r24, 0x01	; 1
    3f88:	0e 94 99 48 	call	0x9132	; 0x9132 <menu_state_machine>
				
				if (sensor_data.ps1 < PROXIMITY_THRESHOLD2) {
    3f8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3f90:	88 3e       	cpi	r24, 0xE8	; 232
    3f92:	93 40       	sbci	r25, 0x03	; 3
    3f94:	20 f0       	brcs	.+8      	; 0x3f9e <main+0xf6>
					if (cnt++ > MENU_TIMEOUT) {
						timeout = true;
					}
				} else {
					cnt = 0;
    3f96:	80 e0       	ldi	r24, 0x00	; 0
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	8c 01       	movw	r16, r24
    3f9c:	e9 cf       	rjmp	.-46     	; 0x3f70 <main+0xc8>
				slider_algorithm_v2((HANDLE)SI114X_ADDR,&sensor_data,1);
#endif
				menu_state_machine(&sensor_data);
				
				if (sensor_data.ps1 < PROXIMITY_THRESHOLD2) {
					if (cnt++ > MENU_TIMEOUT) {
    3f9e:	c8 01       	movw	r24, r16
    3fa0:	01 96       	adiw	r24, 0x01	; 1
			puts("DEBUG: Entered gesture mode.");
#endif
			si114x_setup();
			//_delay_ms(250);
			
			while(!timeout) {
    3fa2:	01 3e       	cpi	r16, 0xE1	; 225
    3fa4:	1e 42       	sbci	r17, 0x2E	; 46
    3fa6:	c8 f3       	brcs	.-14     	; 0x3f9a <main+0xf2>
					cnt = 0;
				}
				
			}
			//WARNING: Should not write too often to EEPROM
		    EEPROM_WriteEnv();
    3fa8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <EEPROM_WriteEnv>
#ifdef DEBUG_ON
			puts("DEBUG: Timeout! Leaving gesture mode.");
    3fac:	83 ea       	ldi	r24, 0xA3	; 163
    3fae:	96 e2       	ldi	r25, 0x26	; 38
    3fb0:	0e 94 67 54 	call	0xa8ce	; 0xa8ce <puts>
#endif
			if (env.menu_id != 0) {
    3fb4:	80 91 2e 2b 	lds	r24, 0x2B2E
    3fb8:	88 23       	and	r24, r24
    3fba:	21 f0       	breq	.+8      	; 0x3fc4 <main+0x11c>
				display_slide_out_to_bottom();
    3fbc:	c0 d4       	rcall	.+2432   	; 0x493e <display_slide_out_to_bottom>
				rtc_enable_time_render();
    3fbe:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <rtc_enable_time_render>
				display_slide_in_from_top();
    3fc2:	9d d4       	rcall	.+2362   	; 0x48fe <display_slide_in_from_top>
			}
			display_fade(env.brightness);
    3fc4:	80 91 30 2b 	lds	r24, 0x2B30
    3fc8:	a2 d0       	rcall	.+324    	; 0x410e <display_fade>
			btn_si114x_enable_interrupt();
    3fca:	0e 94 85 11 	call	0x230a	; 0x230a <btn_si114x_enable_interrupt>
			si114x_setup_ps1();
    3fce:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <si114x_setup_ps1>
    3fd2:	27 c0       	rjmp	.+78     	; 0x4022 <__stack+0x23>
		} else if (si114x_status == ALS_INT_2) {
    3fd4:	80 91 b7 2c 	lds	r24, 0x2CB7
    3fd8:	82 30       	cpi	r24, 0x02	; 2
    3fda:	29 f4       	brne	.+10     	; 0x3fe6 <main+0x13e>
			//Dim light by using the light sensor
#ifdef DEBUG_ON
			puts("DEBUG: Somebody turned off the lights!");
    3fdc:	89 ec       	ldi	r24, 0xC9	; 201
    3fde:	96 e2       	ldi	r25, 0x26	; 38
    3fe0:	0e 94 67 54 	call	0xa8ce	; 0xa8ce <puts>
    3fe4:	1e c0       	rjmp	.+60     	; 0x4022 <__stack+0x23>
#endif
		} else if (btn_status == BTN4) {
    3fe6:	80 91 b5 2c 	lds	r24, 0x2CB5
    3fea:	84 30       	cpi	r24, 0x04	; 4
    3fec:	91 f4       	brne	.+36     	; 0x4012 <__stack+0x13>
			if (led_on) {
    3fee:	ff 20       	and	r15, r15
    3ff0:	11 f0       	breq	.+4      	; 0x3ff6 <main+0x14e>
				display_off();
    3ff2:	9f d4       	rcall	.+2366   	; 0x4932 <display_off>
    3ff4:	01 c0       	rjmp	.+2      	; 0x3ff8 <main+0x150>
				_delay_ms(1000);
			} else {
				display_on();
    3ff6:	7c d0       	rcall	.+248    	; 0x40f0 <display_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3ff8:	8f ef       	ldi	r24, 0xFF	; 255
    3ffa:	97 ea       	ldi	r25, 0xA7	; 167
    3ffc:	21 e6       	ldi	r18, 0x61	; 97
    3ffe:	81 50       	subi	r24, 0x01	; 1
    4000:	90 40       	sbci	r25, 0x00	; 0
    4002:	20 40       	sbci	r18, 0x00	; 0
    4004:	e1 f7       	brne	.-8      	; 0x3ffe <main+0x156>
    4006:	00 c0       	rjmp	.+0      	; 0x4008 <__stack+0x9>
    4008:	00 00       	nop
				_delay_ms(1000);
			}
			btn_status = NO_BTN;
    400a:	10 92 b5 2c 	sts	0x2CB5, r1
			led_on ^= true;
    400e:	fd 24       	eor	r15, r13
    4010:	08 c0       	rjmp	.+16     	; 0x4022 <__stack+0x23>
		} else if (alarm_status == ALARM_TRIGGERED) {
    4012:	80 91 b6 2c 	lds	r24, 0x2CB6
    4016:	81 11       	cpse	r24, r1
    4018:	04 c0       	rjmp	.+8      	; 0x4022 <__stack+0x23>
			alarm_status = ALARM_OFF;
    401a:	e0 92 b6 2c 	sts	0x2CB6, r14
			menu_alarm();
    401e:	0e 94 c1 44 	call	0x8982	; 0x8982 <menu_alarm>
		}
		
		si114x_status = 0;
    4022:	10 92 b7 2c 	sts	0x2CB7, r1
		
		SLEEP.CTRL |= SLEEP_SEN_bm;
    4026:	80 91 48 00 	lds	r24, 0x0048
    402a:	81 60       	ori	r24, 0x01	; 1
    402c:	80 93 48 00 	sts	0x0048, r24
		asm("sleep");
    4030:	88 95       	sleep
	}
    4032:	8b cf       	rjmp	.-234    	; 0x3f4a <main+0xa2>

00004034 <itoa_simple.constprop.1>:
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4034:	8f 92       	push	r8
    4036:	9f 92       	push	r9
    4038:	af 92       	push	r10
    403a:	bf 92       	push	r11
    403c:	ef 92       	push	r14
    403e:	ff 92       	push	r15
    4040:	0f 93       	push	r16
    4042:	1f 93       	push	r17
    4044:	cf 93       	push	r28
    4046:	df 93       	push	r29
    4048:	97 fd       	sbrc	r25, 7
    404a:	03 c0       	rjmp	.+6      	; 0x4052 <itoa_simple.constprop.1+0x1e>
    404c:	c0 e0       	ldi	r28, 0x00	; 0
    404e:	d0 e0       	ldi	r29, 0x00	; 0
    4050:	0b c0       	rjmp	.+22     	; 0x4068 <itoa_simple.constprop.1+0x34>
    4052:	90 95       	com	r25
    4054:	80 95       	com	r24
    4056:	70 95       	com	r23
    4058:	61 95       	neg	r22
    405a:	7f 4f       	sbci	r23, 0xFF	; 255
    405c:	8f 4f       	sbci	r24, 0xFF	; 255
    405e:	9f 4f       	sbci	r25, 0xFF	; 255
    4060:	2d e2       	ldi	r18, 0x2D	; 45
    4062:	20 b9       	out	0x00, r18	; 0
    4064:	c1 e0       	ldi	r28, 0x01	; 1
    4066:	d0 e0       	ldi	r29, 0x00	; 0
    4068:	7e 01       	movw	r14, r28
    406a:	2a e0       	ldi	r18, 0x0A	; 10
    406c:	82 2e       	mov	r8, r18
    406e:	91 2c       	mov	r9, r1
    4070:	a1 2c       	mov	r10, r1
    4072:	b1 2c       	mov	r11, r1
    4074:	87 01       	movw	r16, r14
    4076:	0f 5f       	subi	r16, 0xFF	; 255
    4078:	1f 4f       	sbci	r17, 0xFF	; 255
    407a:	a5 01       	movw	r20, r10
    407c:	94 01       	movw	r18, r8
    407e:	0e 94 28 51 	call	0xa250	; 0xa250 <__udivmodsi4>
    4082:	60 5d       	subi	r22, 0xD0	; 208
    4084:	f7 01       	movw	r30, r14
    4086:	60 83       	st	Z, r22
    4088:	b9 01       	movw	r22, r18
    408a:	ca 01       	movw	r24, r20
    408c:	61 15       	cp	r22, r1
    408e:	71 05       	cpc	r23, r1
    4090:	81 05       	cpc	r24, r1
    4092:	91 05       	cpc	r25, r1
    4094:	11 f0       	breq	.+4      	; 0x409a <itoa_simple.constprop.1+0x66>
    4096:	78 01       	movw	r14, r16
    4098:	ed cf       	rjmp	.-38     	; 0x4074 <itoa_simple.constprop.1+0x40>
    409a:	d8 01       	movw	r26, r16
    409c:	ac 1b       	sub	r26, r28
    409e:	bd 0b       	sbc	r27, r29
    40a0:	cd 01       	movw	r24, r26
    40a2:	01 97       	sbiw	r24, 0x01	; 1
    40a4:	ac 0f       	add	r26, r28
    40a6:	bd 1f       	adc	r27, r29
    40a8:	fe 01       	movw	r30, r28
    40aa:	9f 01       	movw	r18, r30
    40ac:	2c 1b       	sub	r18, r28
    40ae:	3d 0b       	sbc	r19, r29
    40b0:	28 17       	cp	r18, r24
    40b2:	39 07       	cpc	r19, r25
    40b4:	34 f4       	brge	.+12     	; 0x40c2 <itoa_simple.constprop.1+0x8e>
    40b6:	20 81       	ld	r18, Z
    40b8:	3e 91       	ld	r19, -X
    40ba:	31 93       	st	Z+, r19
    40bc:	2c 93       	st	X, r18
    40be:	01 97       	sbiw	r24, 0x01	; 1
    40c0:	f4 cf       	rjmp	.-24     	; 0x40aa <itoa_simple.constprop.1+0x76>
    40c2:	c8 01       	movw	r24, r16
    40c4:	df 91       	pop	r29
    40c6:	cf 91       	pop	r28
    40c8:	1f 91       	pop	r17
    40ca:	0f 91       	pop	r16
    40cc:	ff 90       	pop	r15
    40ce:	ef 90       	pop	r14
    40d0:	bf 90       	pop	r11
    40d2:	af 90       	pop	r10
    40d4:	9f 90       	pop	r9
    40d6:	8f 90       	pop	r8
    40d8:	08 95       	ret

000040da <display_setup>:
    40da:	84 e2       	ldi	r24, 0x24	; 36
    40dc:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <ht1632c_setup>
    40e0:	8f e0       	ldi	r24, 0x0F	; 15
    40e2:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <ht1632c_set_brightness>
    40e6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <ht1632c_clear_screen>
    40ea:	83 e0       	ldi	r24, 0x03	; 3
    40ec:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <ht1632c_write_command>

000040f0 <display_on>:
    40f0:	83 e0       	ldi	r24, 0x03	; 3
    40f2:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <ht1632c_write_command>
    40f6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <rtc_enable_time_render>
    40fa:	0c 94 4f 10 	jmp	0x209e	; 0x209e <ht1632c_slide_in_from_top>

000040fe <display_fill_screen>:
    40fe:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <ht1632c_fill_screen>

00004102 <display_clear_screen>:
    4102:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <ht1632c_clear_screen>

00004106 <display_clear_buffer>:
    4106:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <ht1632c_clear_buffer>

0000410a <display_refresh_screen>:
    410a:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

0000410e <display_fade>:
    410e:	1f 93       	push	r17
    4110:	cf 93       	push	r28
    4112:	df 93       	push	r29
    4114:	c8 2f       	mov	r28, r24
    4116:	d0 91 23 20 	lds	r29, 0x2023
    411a:	d8 17       	cp	r29, r24
    411c:	c8 f4       	brcc	.+50     	; 0x4150 <display_fade+0x42>
    411e:	df 5f       	subi	r29, 0xFF	; 255
    4120:	11 e0       	ldi	r17, 0x01	; 1
    4122:	18 0f       	add	r17, r24
    4124:	d1 17       	cp	r29, r17
    4126:	71 f0       	breq	.+28     	; 0x4144 <display_fade+0x36>
    4128:	8d 2f       	mov	r24, r29
    412a:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <ht1632c_set_brightness>
    412e:	2f ef       	ldi	r18, 0xFF	; 255
    4130:	86 e7       	ldi	r24, 0x76	; 118
    4132:	91 e0       	ldi	r25, 0x01	; 1
    4134:	21 50       	subi	r18, 0x01	; 1
    4136:	80 40       	sbci	r24, 0x00	; 0
    4138:	90 40       	sbci	r25, 0x00	; 0
    413a:	e1 f7       	brne	.-8      	; 0x4134 <display_fade+0x26>
    413c:	00 c0       	rjmp	.+0      	; 0x413e <display_fade+0x30>
    413e:	00 00       	nop
    4140:	df 5f       	subi	r29, 0xFF	; 255
    4142:	f0 cf       	rjmp	.-32     	; 0x4124 <display_fade+0x16>
    4144:	c0 93 23 20 	sts	0x2023, r28
    4148:	df 91       	pop	r29
    414a:	cf 91       	pop	r28
    414c:	1f 91       	pop	r17
    414e:	08 95       	ret
    4150:	8d 17       	cp	r24, r29
    4152:	c0 f7       	brcc	.-16     	; 0x4144 <display_fade+0x36>
    4154:	d1 50       	subi	r29, 0x01	; 1
    4156:	1f ef       	ldi	r17, 0xFF	; 255
    4158:	18 0f       	add	r17, r24
    415a:	d1 17       	cp	r29, r17
    415c:	99 f3       	breq	.-26     	; 0x4144 <display_fade+0x36>
    415e:	8d 2f       	mov	r24, r29
    4160:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <ht1632c_set_brightness>
    4164:	2f ef       	ldi	r18, 0xFF	; 255
    4166:	86 e7       	ldi	r24, 0x76	; 118
    4168:	91 e0       	ldi	r25, 0x01	; 1
    416a:	21 50       	subi	r18, 0x01	; 1
    416c:	80 40       	sbci	r24, 0x00	; 0
    416e:	90 40       	sbci	r25, 0x00	; 0
    4170:	e1 f7       	brne	.-8      	; 0x416a <display_fade+0x5c>
    4172:	00 c0       	rjmp	.+0      	; 0x4174 <display_fade+0x66>
    4174:	00 00       	nop
    4176:	d1 50       	subi	r29, 0x01	; 1
    4178:	f0 cf       	rjmp	.-32     	; 0x415a <display_fade+0x4c>

0000417a <display_fade_blink>:
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	c8 df       	rcall	.-112    	; 0x410e <display_fade>
    417e:	8f e0       	ldi	r24, 0x0F	; 15
    4180:	c6 df       	rcall	.-116    	; 0x410e <display_fade>
    4182:	81 e0       	ldi	r24, 0x01	; 1
    4184:	c4 df       	rcall	.-120    	; 0x410e <display_fade>
    4186:	8f e0       	ldi	r24, 0x0F	; 15
    4188:	c2 cf       	rjmp	.-124    	; 0x410e <display_fade>

0000418a <display_draw_pixel>:
    418a:	9c 01       	movw	r18, r24
    418c:	80 31       	cpi	r24, 0x10	; 16
    418e:	91 05       	cpc	r25, r1
    4190:	a4 f5       	brge	.+104    	; 0x41fa <display_draw_pixel+0x70>
    4192:	60 31       	cpi	r22, 0x10	; 16
    4194:	71 05       	cpc	r23, r1
    4196:	8c f5       	brge	.+98     	; 0x41fa <display_draw_pixel+0x70>
    4198:	8f e0       	ldi	r24, 0x0F	; 15
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	86 1b       	sub	r24, r22
    419e:	97 0b       	sbc	r25, r23
    41a0:	68 e1       	ldi	r22, 0x18	; 24
    41a2:	70 e0       	ldi	r23, 0x00	; 0
    41a4:	0e 94 15 51 	call	0xa22a	; 0xa22a <__divmodhi4>
    41a8:	88 30       	cpi	r24, 0x08	; 8
    41aa:	91 05       	cpc	r25, r1
    41ac:	34 f0       	brlt	.+12     	; 0x41ba <display_draw_pixel+0x30>
    41ae:	80 31       	cpi	r24, 0x10	; 16
    41b0:	91 05       	cpc	r25, r1
    41b2:	34 f4       	brge	.+12     	; 0x41c0 <display_draw_pixel+0x36>
    41b4:	67 e8       	ldi	r22, 0x87	; 135
    41b6:	70 e0       	ldi	r23, 0x00	; 0
    41b8:	05 c0       	rjmp	.+10     	; 0x41c4 <display_draw_pixel+0x3a>
    41ba:	67 e0       	ldi	r22, 0x07	; 7
    41bc:	70 e0       	ldi	r23, 0x00	; 0
    41be:	02 c0       	rjmp	.+4      	; 0x41c4 <display_draw_pixel+0x3a>
    41c0:	67 e0       	ldi	r22, 0x07	; 7
    41c2:	71 e0       	ldi	r23, 0x01	; 1
    41c4:	87 70       	andi	r24, 0x07	; 7
    41c6:	99 27       	eor	r25, r25
    41c8:	68 1b       	sub	r22, r24
    41ca:	79 0b       	sbc	r23, r25
    41cc:	28 30       	cpi	r18, 0x08	; 8
    41ce:	31 05       	cpc	r19, r1
    41d0:	1c f4       	brge	.+6      	; 0x41d8 <display_draw_pixel+0x4e>
    41d2:	22 0f       	add	r18, r18
    41d4:	33 1f       	adc	r19, r19
    41d6:	04 c0       	rjmp	.+8      	; 0x41e0 <display_draw_pixel+0x56>
    41d8:	22 0f       	add	r18, r18
    41da:	33 1f       	adc	r19, r19
    41dc:	2f 50       	subi	r18, 0x0F	; 15
    41de:	31 09       	sbc	r19, r1
    41e0:	c9 01       	movw	r24, r18
    41e2:	33 e0       	ldi	r19, 0x03	; 3
    41e4:	88 0f       	add	r24, r24
    41e6:	99 1f       	adc	r25, r25
    41e8:	3a 95       	dec	r19
    41ea:	e1 f7       	brne	.-8      	; 0x41e4 <display_draw_pixel+0x5a>
    41ec:	86 0f       	add	r24, r22
    41ee:	97 1f       	adc	r25, r23
    41f0:	41 11       	cpse	r20, r1
    41f2:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    41f6:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <ht1632c_clr_pixel>
    41fa:	08 95       	ret

000041fc <display_draw_filled_rect>:
    41fc:	af 92       	push	r10
    41fe:	bf 92       	push	r11
    4200:	cf 92       	push	r12
    4202:	df 92       	push	r13
    4204:	ef 92       	push	r14
    4206:	ff 92       	push	r15
    4208:	0f 93       	push	r16
    420a:	1f 93       	push	r17
    420c:	cf 93       	push	r28
    420e:	df 93       	push	r29
    4210:	a6 2e       	mov	r10, r22
    4212:	18 2f       	mov	r17, r24
    4214:	c4 2f       	mov	r28, r20
    4216:	d0 e0       	ldi	r29, 0x00	; 0
    4218:	c8 0f       	add	r28, r24
    421a:	d1 1d       	adc	r29, r1
    421c:	e2 2e       	mov	r14, r18
    421e:	f1 2c       	mov	r15, r1
    4220:	e6 0e       	add	r14, r22
    4222:	f1 1c       	adc	r15, r1
    4224:	c1 2e       	mov	r12, r17
    4226:	d1 2c       	mov	r13, r1
    4228:	cc 16       	cp	r12, r28
    422a:	dd 06       	cpc	r13, r29
    422c:	6c f4       	brge	.+26     	; 0x4248 <display_draw_filled_rect+0x4c>
    422e:	ba 2c       	mov	r11, r10
    4230:	6b 2d       	mov	r22, r11
    4232:	70 e0       	ldi	r23, 0x00	; 0
    4234:	6e 15       	cp	r22, r14
    4236:	7f 05       	cpc	r23, r15
    4238:	2c f4       	brge	.+10     	; 0x4244 <display_draw_filled_rect+0x48>
    423a:	40 2f       	mov	r20, r16
    423c:	c6 01       	movw	r24, r12
    423e:	a5 df       	rcall	.-182    	; 0x418a <display_draw_pixel>
    4240:	b3 94       	inc	r11
    4242:	f6 cf       	rjmp	.-20     	; 0x4230 <display_draw_filled_rect+0x34>
    4244:	1f 5f       	subi	r17, 0xFF	; 255
    4246:	ee cf       	rjmp	.-36     	; 0x4224 <display_draw_filled_rect+0x28>
    4248:	df 91       	pop	r29
    424a:	cf 91       	pop	r28
    424c:	1f 91       	pop	r17
    424e:	0f 91       	pop	r16
    4250:	ff 90       	pop	r15
    4252:	ef 90       	pop	r14
    4254:	df 90       	pop	r13
    4256:	cf 90       	pop	r12
    4258:	bf 90       	pop	r11
    425a:	af 90       	pop	r10
    425c:	08 95       	ret

0000425e <display_show_loading_square>:
    425e:	0f 93       	push	r16
    4260:	01 e0       	ldi	r16, 0x01	; 1
    4262:	21 e0       	ldi	r18, 0x01	; 1
    4264:	41 e0       	ldi	r20, 0x01	; 1
    4266:	60 91 22 20 	lds	r22, 0x2022
    426a:	80 91 21 20 	lds	r24, 0x2021
    426e:	c6 df       	rcall	.-116    	; 0x41fc <display_draw_filled_rect>
    4270:	90 91 22 20 	lds	r25, 0x2022
    4274:	80 91 21 20 	lds	r24, 0x2021
    4278:	97 30       	cpi	r25, 0x07	; 7
    427a:	20 f0       	brcs	.+8      	; 0x4284 <display_show_loading_square+0x26>
    427c:	89 30       	cpi	r24, 0x09	; 9
    427e:	51 f4       	brne	.+20     	; 0x4294 <display_show_loading_square+0x36>
    4280:	91 50       	subi	r25, 0x01	; 1
    4282:	0d c0       	rjmp	.+26     	; 0x429e <display_show_loading_square+0x40>
    4284:	96 30       	cpi	r25, 0x06	; 6
    4286:	41 f4       	brne	.+16     	; 0x4298 <display_show_loading_square+0x3a>
    4288:	87 30       	cpi	r24, 0x07	; 7
    428a:	30 f0       	brcs	.+12     	; 0x4298 <display_show_loading_square+0x3a>
    428c:	81 50       	subi	r24, 0x01	; 1
    428e:	80 93 21 20 	sts	0x2021, r24
    4292:	17 c0       	rjmp	.+46     	; 0x42c2 <display_show_loading_square+0x64>
    4294:	99 30       	cpi	r25, 0x09	; 9
    4296:	30 f4       	brcc	.+12     	; 0x42a4 <display_show_loading_square+0x46>
    4298:	86 30       	cpi	r24, 0x06	; 6
    429a:	99 f4       	brne	.+38     	; 0x42c2 <display_show_loading_square+0x64>
    429c:	9f 5f       	subi	r25, 0xFF	; 255
    429e:	90 93 22 20 	sts	0x2022, r25
    42a2:	0f c0       	rjmp	.+30     	; 0x42c2 <display_show_loading_square+0x64>
    42a4:	99 30       	cpi	r25, 0x09	; 9
    42a6:	69 f4       	brne	.+26     	; 0x42c2 <display_show_loading_square+0x64>
    42a8:	89 30       	cpi	r24, 0x09	; 9
    42aa:	58 f4       	brcc	.+22     	; 0x42c2 <display_show_loading_square+0x64>
    42ac:	8f 5f       	subi	r24, 0xFF	; 255
    42ae:	80 93 21 20 	sts	0x2021, r24
    42b2:	89 30       	cpi	r24, 0x09	; 9
    42b4:	31 f4       	brne	.+12     	; 0x42c2 <display_show_loading_square+0x64>
    42b6:	80 91 20 20 	lds	r24, 0x2020
    42ba:	91 e0       	ldi	r25, 0x01	; 1
    42bc:	89 27       	eor	r24, r25
    42be:	80 93 20 20 	sts	0x2020, r24
    42c2:	00 e0       	ldi	r16, 0x00	; 0
    42c4:	21 e0       	ldi	r18, 0x01	; 1
    42c6:	41 e0       	ldi	r20, 0x01	; 1
    42c8:	60 91 22 20 	lds	r22, 0x2022
    42cc:	80 91 21 20 	lds	r24, 0x2021
    42d0:	95 df       	rcall	.-214    	; 0x41fc <display_draw_filled_rect>
    42d2:	0f 91       	pop	r16
    42d4:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

000042d8 <display_draw_bitmap>:
    42d8:	2f 92       	push	r2
    42da:	3f 92       	push	r3
    42dc:	4f 92       	push	r4
    42de:	5f 92       	push	r5
    42e0:	6f 92       	push	r6
    42e2:	7f 92       	push	r7
    42e4:	8f 92       	push	r8
    42e6:	9f 92       	push	r9
    42e8:	af 92       	push	r10
    42ea:	bf 92       	push	r11
    42ec:	cf 92       	push	r12
    42ee:	df 92       	push	r13
    42f0:	ef 92       	push	r14
    42f2:	ff 92       	push	r15
    42f4:	0f 93       	push	r16
    42f6:	1f 93       	push	r17
    42f8:	cf 93       	push	r28
    42fa:	df 93       	push	r29
    42fc:	00 d0       	rcall	.+0      	; 0x42fe <display_draw_bitmap+0x26>
    42fe:	1f 92       	push	r1
    4300:	cd b7       	in	r28, 0x3d	; 61
    4302:	de b7       	in	r29, 0x3e	; 62
    4304:	6a 01       	movw	r12, r20
    4306:	30 2f       	mov	r19, r16
    4308:	f1 2c       	mov	r15, r1
    430a:	44 24       	eor	r4, r4
    430c:	43 94       	inc	r4
    430e:	51 2c       	mov	r5, r1
    4310:	a6 2e       	mov	r10, r22
    4312:	b1 2c       	mov	r11, r1
    4314:	28 2e       	mov	r2, r24
    4316:	31 2c       	mov	r3, r1
    4318:	f3 16       	cp	r15, r19
    431a:	b1 f1       	breq	.+108    	; 0x4388 <display_draw_bitmap+0xb0>
    431c:	8f 2d       	mov	r24, r15
    431e:	87 70       	andi	r24, 0x07	; 7
    4320:	32 01       	movw	r6, r4
    4322:	02 c0       	rjmp	.+4      	; 0x4328 <display_draw_bitmap+0x50>
    4324:	66 0c       	add	r6, r6
    4326:	77 1c       	adc	r7, r7
    4328:	8a 95       	dec	r24
    432a:	e2 f7       	brpl	.-8      	; 0x4324 <display_draw_bitmap+0x4c>
    432c:	1b 82       	std	Y+3, r1	; 0x03
    432e:	1c 82       	std	Y+4, r1	; 0x04
    4330:	8f 2d       	mov	r24, r15
    4332:	86 95       	lsr	r24
    4334:	86 95       	lsr	r24
    4336:	86 95       	lsr	r24
    4338:	46 01       	movw	r8, r12
    433a:	82 9f       	mul	r24, r18
    433c:	80 0c       	add	r8, r0
    433e:	91 1c       	adc	r9, r1
    4340:	11 24       	eor	r1, r1
    4342:	85 01       	movw	r16, r10
    4344:	0f 0d       	add	r16, r15
    4346:	11 1d       	adc	r17, r1
    4348:	9b 81       	ldd	r25, Y+3	; 0x03
    434a:	92 17       	cp	r25, r18
    434c:	d8 f4       	brcc	.+54     	; 0x4384 <display_draw_bitmap+0xac>
    434e:	eb 81       	ldd	r30, Y+3	; 0x03
    4350:	fc 81       	ldd	r31, Y+4	; 0x04
    4352:	e8 0d       	add	r30, r8
    4354:	f9 1d       	adc	r31, r9
    4356:	e4 91       	lpm	r30, Z
    4358:	f0 e0       	ldi	r31, 0x00	; 0
    435a:	e6 21       	and	r30, r6
    435c:	f7 21       	and	r31, r7
    435e:	ef 2b       	or	r30, r31
    4360:	59 f0       	breq	.+22     	; 0x4378 <display_draw_bitmap+0xa0>
    4362:	4e 2d       	mov	r20, r14
    4364:	b8 01       	movw	r22, r16
    4366:	8b 81       	ldd	r24, Y+3	; 0x03
    4368:	9c 81       	ldd	r25, Y+4	; 0x04
    436a:	82 0d       	add	r24, r2
    436c:	93 1d       	adc	r25, r3
    436e:	29 83       	std	Y+1, r18	; 0x01
    4370:	3a 83       	std	Y+2, r19	; 0x02
    4372:	0b df       	rcall	.-490    	; 0x418a <display_draw_pixel>
    4374:	3a 81       	ldd	r19, Y+2	; 0x02
    4376:	29 81       	ldd	r18, Y+1	; 0x01
    4378:	8b 81       	ldd	r24, Y+3	; 0x03
    437a:	9c 81       	ldd	r25, Y+4	; 0x04
    437c:	01 96       	adiw	r24, 0x01	; 1
    437e:	8b 83       	std	Y+3, r24	; 0x03
    4380:	9c 83       	std	Y+4, r25	; 0x04
    4382:	e2 cf       	rjmp	.-60     	; 0x4348 <display_draw_bitmap+0x70>
    4384:	f3 94       	inc	r15
    4386:	c8 cf       	rjmp	.-112    	; 0x4318 <display_draw_bitmap+0x40>
    4388:	24 96       	adiw	r28, 0x04	; 4
    438a:	cd bf       	out	0x3d, r28	; 61
    438c:	de bf       	out	0x3e, r29	; 62
    438e:	df 91       	pop	r29
    4390:	cf 91       	pop	r28
    4392:	1f 91       	pop	r17
    4394:	0f 91       	pop	r16
    4396:	ff 90       	pop	r15
    4398:	ef 90       	pop	r14
    439a:	df 90       	pop	r13
    439c:	cf 90       	pop	r12
    439e:	bf 90       	pop	r11
    43a0:	af 90       	pop	r10
    43a2:	9f 90       	pop	r9
    43a4:	8f 90       	pop	r8
    43a6:	7f 90       	pop	r7
    43a8:	6f 90       	pop	r6
    43aa:	5f 90       	pop	r5
    43ac:	4f 90       	pop	r4
    43ae:	3f 90       	pop	r3
    43b0:	2f 90       	pop	r2
    43b2:	08 95       	ret

000043b4 <display_draw_char_to_buffer>:
    43b4:	25 e0       	ldi	r18, 0x05	; 5
    43b6:	62 9f       	mul	r22, r18
    43b8:	b0 01       	movw	r22, r0
    43ba:	11 24       	eor	r1, r1
    43bc:	48 0f       	add	r20, r24
    43be:	59 1f       	adc	r21, r25
    43c0:	80 e0       	ldi	r24, 0x00	; 0
    43c2:	90 e0       	ldi	r25, 0x00	; 0
    43c4:	6e 5b       	subi	r22, 0xBE	; 190
    43c6:	77 4f       	sbci	r23, 0xF7	; 247
    43c8:	fb 01       	movw	r30, r22
    43ca:	e8 0f       	add	r30, r24
    43cc:	f9 1f       	adc	r31, r25
    43ce:	e4 91       	lpm	r30, Z
    43d0:	e2 95       	swap	r30
    43d2:	2e 2f       	mov	r18, r30
    43d4:	23 73       	andi	r18, 0x33	; 51
    43d6:	a4 e0       	ldi	r26, 0x04	; 4
    43d8:	2a 9f       	mul	r18, r26
    43da:	90 01       	movw	r18, r0
    43dc:	11 24       	eor	r1, r1
    43de:	ec 7c       	andi	r30, 0xCC	; 204
    43e0:	e6 95       	lsr	r30
    43e2:	e6 95       	lsr	r30
    43e4:	e2 2b       	or	r30, r18
    43e6:	2e 2f       	mov	r18, r30
    43e8:	25 75       	andi	r18, 0x55	; 85
    43ea:	22 0f       	add	r18, r18
    43ec:	ea 7a       	andi	r30, 0xAA	; 170
    43ee:	e6 95       	lsr	r30
    43f0:	e2 2b       	or	r30, r18
    43f2:	da 01       	movw	r26, r20
    43f4:	ed 93       	st	X+, r30
    43f6:	ad 01       	movw	r20, r26
    43f8:	01 96       	adiw	r24, 0x01	; 1
    43fa:	85 30       	cpi	r24, 0x05	; 5
    43fc:	91 05       	cpc	r25, r1
    43fe:	21 f7       	brne	.-56     	; 0x43c8 <display_draw_char_to_buffer+0x14>
    4400:	08 95       	ret

00004402 <display_draw_char>:
    4402:	2f 92       	push	r2
    4404:	3f 92       	push	r3
    4406:	4f 92       	push	r4
    4408:	5f 92       	push	r5
    440a:	6f 92       	push	r6
    440c:	7f 92       	push	r7
    440e:	8f 92       	push	r8
    4410:	9f 92       	push	r9
    4412:	af 92       	push	r10
    4414:	bf 92       	push	r11
    4416:	cf 92       	push	r12
    4418:	df 92       	push	r13
    441a:	ef 92       	push	r14
    441c:	ff 92       	push	r15
    441e:	0f 93       	push	r16
    4420:	1f 93       	push	r17
    4422:	cf 93       	push	r28
    4424:	df 93       	push	r29
    4426:	cd b7       	in	r28, 0x3d	; 61
    4428:	de b7       	in	r29, 0x3e	; 62
    442a:	25 97       	sbiw	r28, 0x05	; 5
    442c:	cd bf       	out	0x3d, r28	; 61
    442e:	de bf       	out	0x3e, r29	; 62
    4430:	89 83       	std	Y+1, r24	; 0x01
    4432:	32 2e       	mov	r3, r18
    4434:	10 2f       	mov	r17, r16
    4436:	9c 01       	movw	r18, r24
    4438:	5c 01       	movw	r10, r24
    443a:	85 e0       	ldi	r24, 0x05	; 5
    443c:	a8 0e       	add	r10, r24
    443e:	b1 1c       	adc	r11, r1
    4440:	e6 2f       	mov	r30, r22
    4442:	97 e0       	ldi	r25, 0x07	; 7
    4444:	09 9f       	mul	r16, r25
    4446:	e0 0d       	add	r30, r0
    4448:	11 24       	eor	r1, r1
    444a:	ea 83       	std	Y+2, r30	; 0x02
    444c:	2c 83       	std	Y+4, r18	; 0x04
    444e:	3d 83       	std	Y+5, r19	; 0x05
    4450:	51 2c       	mov	r5, r1
    4452:	52 e4       	ldi	r21, 0x42	; 66
    4454:	e5 2e       	mov	r14, r21
    4456:	58 e0       	ldi	r21, 0x08	; 8
    4458:	f5 2e       	mov	r15, r21
    445a:	e2 1a       	sub	r14, r18
    445c:	f3 0a       	sbc	r15, r19
    445e:	f5 e0       	ldi	r31, 0x05	; 5
    4460:	4f 9f       	mul	r20, r31
    4462:	e0 0c       	add	r14, r0
    4464:	f1 1c       	adc	r15, r1
    4466:	11 24       	eor	r1, r1
    4468:	4b 01       	movw	r8, r22
    446a:	86 e0       	ldi	r24, 0x06	; 6
    446c:	88 0e       	add	r8, r24
    446e:	91 1c       	adc	r9, r1
    4470:	3b 01       	movw	r6, r22
    4472:	91 e0       	ldi	r25, 0x01	; 1
    4474:	69 1a       	sub	r6, r25
    4476:	71 08       	sbc	r7, r1
    4478:	ec 81       	ldd	r30, Y+4	; 0x04
    447a:	fd 81       	ldd	r31, Y+5	; 0x05
    447c:	ee 0d       	add	r30, r14
    447e:	ff 1d       	adc	r31, r15
    4480:	44 90       	lpm	r4, Z
    4482:	e9 81       	ldd	r30, Y+1	; 0x01
    4484:	e5 0d       	add	r30, r5
    4486:	eb 83       	std	Y+3, r30	; 0x03
    4488:	64 01       	movw	r12, r8
    448a:	21 2c       	mov	r2, r1
    448c:	40 fe       	sbrs	r4, 0
    448e:	11 c0       	rjmp	.+34     	; 0x44b2 <display_draw_char+0xb0>
    4490:	11 30       	cpi	r17, 0x01	; 1
    4492:	41 f4       	brne	.+16     	; 0x44a4 <display_draw_char+0xa2>
    4494:	8c 81       	ldd	r24, Y+4	; 0x04
    4496:	9d 81       	ldd	r25, Y+5	; 0x05
    4498:	97 fd       	sbrc	r25, 7
    449a:	0b c0       	rjmp	.+22     	; 0x44b2 <display_draw_char+0xb0>
    449c:	43 2d       	mov	r20, r3
    449e:	b6 01       	movw	r22, r12
    44a0:	74 de       	rcall	.-792    	; 0x418a <display_draw_pixel>
    44a2:	07 c0       	rjmp	.+14     	; 0x44b2 <display_draw_char+0xb0>
    44a4:	03 2d       	mov	r16, r3
    44a6:	21 2f       	mov	r18, r17
    44a8:	41 2f       	mov	r20, r17
    44aa:	6a 81       	ldd	r22, Y+2	; 0x02
    44ac:	62 0d       	add	r22, r2
    44ae:	8b 81       	ldd	r24, Y+3	; 0x03
    44b0:	a5 de       	rcall	.-694    	; 0x41fc <display_draw_filled_rect>
    44b2:	46 94       	lsr	r4
    44b4:	91 e0       	ldi	r25, 0x01	; 1
    44b6:	c9 1a       	sub	r12, r25
    44b8:	d1 08       	sbc	r13, r1
    44ba:	21 1a       	sub	r2, r17
    44bc:	c6 14       	cp	r12, r6
    44be:	d7 04       	cpc	r13, r7
    44c0:	29 f7       	brne	.-54     	; 0x448c <display_draw_char+0x8a>
    44c2:	ec 81       	ldd	r30, Y+4	; 0x04
    44c4:	fd 81       	ldd	r31, Y+5	; 0x05
    44c6:	31 96       	adiw	r30, 0x01	; 1
    44c8:	ec 83       	std	Y+4, r30	; 0x04
    44ca:	fd 83       	std	Y+5, r31	; 0x05
    44cc:	51 0e       	add	r5, r17
    44ce:	ea 15       	cp	r30, r10
    44d0:	fb 05       	cpc	r31, r11
    44d2:	91 f6       	brne	.-92     	; 0x4478 <display_draw_char+0x76>
    44d4:	25 96       	adiw	r28, 0x05	; 5
    44d6:	cd bf       	out	0x3d, r28	; 61
    44d8:	de bf       	out	0x3e, r29	; 62
    44da:	df 91       	pop	r29
    44dc:	cf 91       	pop	r28
    44de:	1f 91       	pop	r17
    44e0:	0f 91       	pop	r16
    44e2:	ff 90       	pop	r15
    44e4:	ef 90       	pop	r14
    44e6:	df 90       	pop	r13
    44e8:	cf 90       	pop	r12
    44ea:	bf 90       	pop	r11
    44ec:	af 90       	pop	r10
    44ee:	9f 90       	pop	r9
    44f0:	8f 90       	pop	r8
    44f2:	7f 90       	pop	r7
    44f4:	6f 90       	pop	r6
    44f6:	5f 90       	pop	r5
    44f8:	4f 90       	pop	r4
    44fa:	3f 90       	pop	r3
    44fc:	2f 90       	pop	r2
    44fe:	08 95       	ret

00004500 <display_draw_small_char_to_buffer>:
    4500:	af 92       	push	r10
    4502:	bf 92       	push	r11
    4504:	cf 92       	push	r12
    4506:	df 92       	push	r13
    4508:	ef 92       	push	r14
    450a:	ff 92       	push	r15
    450c:	0f 93       	push	r16
    450e:	1f 93       	push	r17
    4510:	cf 93       	push	r28
    4512:	df 93       	push	r29
    4514:	cd b7       	in	r28, 0x3d	; 61
    4516:	de b7       	in	r29, 0x3e	; 62
    4518:	25 97       	sbiw	r28, 0x05	; 5
    451a:	cd bf       	out	0x3d, r28	; 61
    451c:	de bf       	out	0x3e, r29	; 62
    451e:	26 e0       	ldi	r18, 0x06	; 6
    4520:	62 9f       	mul	r22, r18
    4522:	b0 01       	movw	r22, r0
    4524:	11 24       	eor	r1, r1
    4526:	8e 01       	movw	r16, r28
    4528:	0f 5f       	subi	r16, 0xFF	; 255
    452a:	1f 4f       	sbci	r17, 0xFF	; 255
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	6e 5b       	subi	r22, 0xBE	; 190
    4532:	7d 4f       	sbci	r23, 0xFD	; 253
    4534:	03 96       	adiw	r24, 0x03	; 3
    4536:	48 0f       	add	r20, r24
    4538:	59 1f       	adc	r21, r25
    453a:	e5 e0       	ldi	r30, 0x05	; 5
    453c:	ee 2e       	mov	r14, r30
    453e:	f1 2c       	mov	r15, r1
    4540:	fb 01       	movw	r30, r22
    4542:	e2 0f       	add	r30, r18
    4544:	f3 1f       	adc	r31, r19
    4546:	84 91       	lpm	r24, Z
    4548:	82 95       	swap	r24
    454a:	8f 70       	andi	r24, 0x0F	; 15
    454c:	f8 01       	movw	r30, r16
    454e:	81 93       	st	Z+, r24
    4550:	8f 01       	movw	r16, r30
    4552:	fa 01       	movw	r30, r20
    4554:	b8 2e       	mov	r11, r24
    4556:	80 e0       	ldi	r24, 0x00	; 0
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	67 01       	movw	r12, r14
    455c:	c2 1a       	sub	r12, r18
    455e:	d3 0a       	sbc	r13, r19
    4560:	ab 2d       	mov	r26, r11
    4562:	a1 70       	andi	r26, 0x01	; 1
    4564:	0c 2c       	mov	r0, r12
    4566:	01 c0       	rjmp	.+2      	; 0x456a <display_draw_small_char_to_buffer+0x6a>
    4568:	aa 0f       	add	r26, r26
    456a:	0a 94       	dec	r0
    456c:	ea f7       	brpl	.-6      	; 0x4568 <display_draw_small_char_to_buffer+0x68>
    456e:	a2 90       	ld	r10, -Z
    4570:	aa 2a       	or	r10, r26
    4572:	a0 82       	st	Z, r10
    4574:	b6 94       	lsr	r11
    4576:	01 96       	adiw	r24, 0x01	; 1
    4578:	83 30       	cpi	r24, 0x03	; 3
    457a:	91 05       	cpc	r25, r1
    457c:	89 f7       	brne	.-30     	; 0x4560 <display_draw_small_char_to_buffer+0x60>
    457e:	2f 5f       	subi	r18, 0xFF	; 255
    4580:	3f 4f       	sbci	r19, 0xFF	; 255
    4582:	25 30       	cpi	r18, 0x05	; 5
    4584:	31 05       	cpc	r19, r1
    4586:	e1 f6       	brne	.-72     	; 0x4540 <display_draw_small_char_to_buffer+0x40>
    4588:	25 96       	adiw	r28, 0x05	; 5
    458a:	cd bf       	out	0x3d, r28	; 61
    458c:	de bf       	out	0x3e, r29	; 62
    458e:	df 91       	pop	r29
    4590:	cf 91       	pop	r28
    4592:	1f 91       	pop	r17
    4594:	0f 91       	pop	r16
    4596:	ff 90       	pop	r15
    4598:	ef 90       	pop	r14
    459a:	df 90       	pop	r13
    459c:	cf 90       	pop	r12
    459e:	bf 90       	pop	r11
    45a0:	af 90       	pop	r10
    45a2:	08 95       	ret

000045a4 <display_print_scrolling_text>:
    45a4:	9f 92       	push	r9
    45a6:	af 92       	push	r10
    45a8:	bf 92       	push	r11
    45aa:	cf 92       	push	r12
    45ac:	df 92       	push	r13
    45ae:	ef 92       	push	r14
    45b0:	ff 92       	push	r15
    45b2:	0f 93       	push	r16
    45b4:	1f 93       	push	r17
    45b6:	cf 93       	push	r28
    45b8:	df 93       	push	r29
    45ba:	8c 01       	movw	r16, r24
    45bc:	96 2e       	mov	r9, r22
    45be:	66 23       	and	r22, r22
    45c0:	71 f0       	breq	.+28     	; 0x45de <display_print_scrolling_text+0x3a>
    45c2:	fc 01       	movw	r30, r24
    45c4:	01 90       	ld	r0, Z+
    45c6:	00 20       	and	r0, r0
    45c8:	e9 f7       	brne	.-6      	; 0x45c4 <display_print_scrolling_text+0x20>
    45ca:	31 97       	sbiw	r30, 0x01	; 1
    45cc:	e8 1b       	sub	r30, r24
    45ce:	f9 0b       	sbc	r31, r25
    45d0:	86 e0       	ldi	r24, 0x06	; 6
    45d2:	8e 9f       	mul	r24, r30
    45d4:	e0 01       	movw	r28, r0
    45d6:	8f 9f       	mul	r24, r31
    45d8:	d0 0d       	add	r29, r0
    45da:	11 24       	eor	r1, r1
    45dc:	0b c0       	rjmp	.+22     	; 0x45f4 <display_print_scrolling_text+0x50>
    45de:	ec 01       	movw	r28, r24
    45e0:	09 90       	ld	r0, Y+
    45e2:	00 20       	and	r0, r0
    45e4:	e9 f7       	brne	.-6      	; 0x45e0 <display_print_scrolling_text+0x3c>
    45e6:	21 97       	sbiw	r28, 0x01	; 1
    45e8:	c8 1b       	sub	r28, r24
    45ea:	d9 0b       	sbc	r29, r25
    45ec:	cc 0f       	add	r28, r28
    45ee:	dd 1f       	adc	r29, r29
    45f0:	cc 0f       	add	r28, r28
    45f2:	dd 1f       	adc	r29, r29
    45f4:	61 e0       	ldi	r22, 0x01	; 1
    45f6:	70 e0       	ldi	r23, 0x00	; 0
    45f8:	ce 01       	movw	r24, r28
    45fa:	0e 94 69 51 	call	0xa2d2	; 0xa2d2 <calloc>
    45fe:	7c 01       	movw	r14, r24
    4600:	a1 2c       	mov	r10, r1
    4602:	b1 2c       	mov	r11, r1
    4604:	c1 2c       	mov	r12, r1
    4606:	d1 2c       	mov	r13, r1
    4608:	f8 01       	movw	r30, r16
    460a:	61 91       	ld	r22, Z+
    460c:	8f 01       	movw	r16, r30
    460e:	66 23       	and	r22, r22
    4610:	79 f0       	breq	.+30     	; 0x4630 <display_print_scrolling_text+0x8c>
    4612:	a7 01       	movw	r20, r14
    4614:	99 20       	and	r9, r9
    4616:	19 f0       	breq	.+6      	; 0x461e <display_print_scrolling_text+0x7a>
    4618:	c6 01       	movw	r24, r12
    461a:	cc de       	rcall	.-616    	; 0x43b4 <display_draw_char_to_buffer>
    461c:	02 c0       	rjmp	.+4      	; 0x4622 <display_print_scrolling_text+0x7e>
    461e:	c5 01       	movw	r24, r10
    4620:	6f df       	rcall	.-290    	; 0x4500 <display_draw_small_char_to_buffer>
    4622:	86 e0       	ldi	r24, 0x06	; 6
    4624:	c8 0e       	add	r12, r24
    4626:	d1 1c       	adc	r13, r1
    4628:	e4 e0       	ldi	r30, 0x04	; 4
    462a:	ae 0e       	add	r10, r30
    462c:	b1 1c       	adc	r11, r1
    462e:	ec cf       	rjmp	.-40     	; 0x4608 <display_print_scrolling_text+0x64>
    4630:	be 01       	movw	r22, r28
    4632:	c7 01       	movw	r24, r14
    4634:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <ht1632c_print_buffer>
    4638:	c7 01       	movw	r24, r14
    463a:	df 91       	pop	r29
    463c:	cf 91       	pop	r28
    463e:	1f 91       	pop	r17
    4640:	0f 91       	pop	r16
    4642:	ff 90       	pop	r15
    4644:	ef 90       	pop	r14
    4646:	df 90       	pop	r13
    4648:	cf 90       	pop	r12
    464a:	bf 90       	pop	r11
    464c:	af 90       	pop	r10
    464e:	9f 90       	pop	r9
    4650:	0c 94 1b 52 	jmp	0xa436	; 0xa436 <free>

00004654 <display_draw_small_char>:
    4654:	2f 92       	push	r2
    4656:	3f 92       	push	r3
    4658:	4f 92       	push	r4
    465a:	5f 92       	push	r5
    465c:	6f 92       	push	r6
    465e:	7f 92       	push	r7
    4660:	8f 92       	push	r8
    4662:	9f 92       	push	r9
    4664:	af 92       	push	r10
    4666:	bf 92       	push	r11
    4668:	cf 92       	push	r12
    466a:	df 92       	push	r13
    466c:	ef 92       	push	r14
    466e:	ff 92       	push	r15
    4670:	0f 93       	push	r16
    4672:	1f 93       	push	r17
    4674:	cf 93       	push	r28
    4676:	df 93       	push	r29
    4678:	cd b7       	in	r28, 0x3d	; 61
    467a:	de b7       	in	r29, 0x3e	; 62
    467c:	28 97       	sbiw	r28, 0x08	; 8
    467e:	cd bf       	out	0x3d, r28	; 61
    4680:	de bf       	out	0x3e, r29	; 62
    4682:	5b 01       	movw	r10, r22
    4684:	29 83       	std	Y+1, r18	; 0x01
    4686:	10 2f       	mov	r17, r16
    4688:	26 e0       	ldi	r18, 0x06	; 6
    468a:	42 9f       	mul	r20, r18
    468c:	60 01       	movw	r12, r0
    468e:	11 24       	eor	r1, r1
    4690:	e8 2f       	mov	r30, r24
    4692:	37 e0       	ldi	r19, 0x07	; 7
    4694:	03 9f       	mul	r16, r19
    4696:	e0 0d       	add	r30, r0
    4698:	11 24       	eor	r1, r1
    469a:	ea 83       	std	Y+2, r30	; 0x02
    469c:	21 2c       	mov	r2, r1
    469e:	1f 82       	std	Y+7, r1	; 0x07
    46a0:	18 86       	std	Y+8, r1	; 0x08
    46a2:	96 01       	movw	r18, r12
    46a4:	2e 5b       	subi	r18, 0xBE	; 190
    46a6:	3d 4f       	sbci	r19, 0xFD	; 253
    46a8:	69 01       	movw	r12, r18
    46aa:	fc 01       	movw	r30, r24
    46ac:	37 96       	adiw	r30, 0x07	; 7
    46ae:	ec 83       	std	Y+4, r30	; 0x04
    46b0:	fd 83       	std	Y+5, r31	; 0x05
    46b2:	2c 01       	movw	r4, r24
    46b4:	f1 e0       	ldi	r31, 0x01	; 1
    46b6:	4f 1a       	sub	r4, r31
    46b8:	51 08       	sbc	r5, r1
    46ba:	3b 01       	movw	r6, r22
    46bc:	23 e0       	ldi	r18, 0x03	; 3
    46be:	62 0e       	add	r6, r18
    46c0:	71 1c       	adc	r7, r1
    46c2:	ef 81       	ldd	r30, Y+7	; 0x07
    46c4:	f8 85       	ldd	r31, Y+8	; 0x08
    46c6:	ec 0d       	add	r30, r12
    46c8:	fd 1d       	adc	r31, r13
    46ca:	54 91       	lpm	r21, Z
    46cc:	32 2d       	mov	r19, r2
    46ce:	3a 0d       	add	r19, r10
    46d0:	3b 83       	std	Y+3, r19	; 0x03
    46d2:	ec 80       	ldd	r14, Y+4	; 0x04
    46d4:	fd 80       	ldd	r15, Y+5	; 0x05
    46d6:	31 2c       	mov	r3, r1
    46d8:	43 01       	movw	r8, r6
    46da:	8f 81       	ldd	r24, Y+7	; 0x07
    46dc:	98 85       	ldd	r25, Y+8	; 0x08
    46de:	88 1a       	sub	r8, r24
    46e0:	99 0a       	sbc	r9, r25
    46e2:	50 ff       	sbrs	r21, 0
    46e4:	16 c0       	rjmp	.+44     	; 0x4712 <display_draw_small_char+0xbe>
    46e6:	11 30       	cpi	r17, 0x01	; 1
    46e8:	59 f4       	brne	.+22     	; 0x4700 <display_draw_small_char+0xac>
    46ea:	92 e0       	ldi	r25, 0x02	; 2
    46ec:	e9 16       	cp	r14, r25
    46ee:	f1 04       	cpc	r15, r1
    46f0:	84 f0       	brlt	.+32     	; 0x4712 <display_draw_small_char+0xbe>
    46f2:	49 81       	ldd	r20, Y+1	; 0x01
    46f4:	b4 01       	movw	r22, r8
    46f6:	c7 01       	movw	r24, r14
    46f8:	02 97       	sbiw	r24, 0x02	; 2
    46fa:	5e 83       	std	Y+6, r21	; 0x06
    46fc:	46 dd       	rcall	.-1396   	; 0x418a <display_draw_pixel>
    46fe:	08 c0       	rjmp	.+16     	; 0x4710 <display_draw_small_char+0xbc>
    4700:	09 81       	ldd	r16, Y+1	; 0x01
    4702:	21 2f       	mov	r18, r17
    4704:	41 2f       	mov	r20, r17
    4706:	6b 81       	ldd	r22, Y+3	; 0x03
    4708:	8a 81       	ldd	r24, Y+2	; 0x02
    470a:	83 0d       	add	r24, r3
    470c:	5e 83       	std	Y+6, r21	; 0x06
    470e:	76 dd       	rcall	.-1300   	; 0x41fc <display_draw_filled_rect>
    4710:	5e 81       	ldd	r21, Y+6	; 0x06
    4712:	56 95       	lsr	r21
    4714:	e1 e0       	ldi	r30, 0x01	; 1
    4716:	ee 1a       	sub	r14, r30
    4718:	f1 08       	sbc	r15, r1
    471a:	31 1a       	sub	r3, r17
    471c:	e4 14       	cp	r14, r4
    471e:	f5 04       	cpc	r15, r5
    4720:	01 f7       	brne	.-64     	; 0x46e2 <display_draw_small_char+0x8e>
    4722:	2f 81       	ldd	r18, Y+7	; 0x07
    4724:	38 85       	ldd	r19, Y+8	; 0x08
    4726:	2f 5f       	subi	r18, 0xFF	; 255
    4728:	3f 4f       	sbci	r19, 0xFF	; 255
    472a:	2f 83       	std	Y+7, r18	; 0x07
    472c:	38 87       	std	Y+8, r19	; 0x08
    472e:	21 1a       	sub	r2, r17
    4730:	26 30       	cpi	r18, 0x06	; 6
    4732:	31 05       	cpc	r19, r1
    4734:	31 f6       	brne	.-116    	; 0x46c2 <display_draw_small_char+0x6e>
    4736:	28 96       	adiw	r28, 0x08	; 8
    4738:	cd bf       	out	0x3d, r28	; 61
    473a:	de bf       	out	0x3e, r29	; 62
    473c:	df 91       	pop	r29
    473e:	cf 91       	pop	r28
    4740:	1f 91       	pop	r17
    4742:	0f 91       	pop	r16
    4744:	ff 90       	pop	r15
    4746:	ef 90       	pop	r14
    4748:	df 90       	pop	r13
    474a:	cf 90       	pop	r12
    474c:	bf 90       	pop	r11
    474e:	af 90       	pop	r10
    4750:	9f 90       	pop	r9
    4752:	8f 90       	pop	r8
    4754:	7f 90       	pop	r7
    4756:	6f 90       	pop	r6
    4758:	5f 90       	pop	r5
    475a:	4f 90       	pop	r4
    475c:	3f 90       	pop	r3
    475e:	2f 90       	pop	r2
    4760:	08 95       	ret

00004762 <display_draw_four_letter_word>:
    4762:	0f 93       	push	r16
    4764:	cf 93       	push	r28
    4766:	df 93       	push	r29
    4768:	ec 01       	movw	r28, r24
    476a:	01 e0       	ldi	r16, 0x01	; 1
    476c:	21 e0       	ldi	r18, 0x01	; 1
    476e:	30 e0       	ldi	r19, 0x00	; 0
    4770:	48 81       	ld	r20, Y
    4772:	67 e0       	ldi	r22, 0x07	; 7
    4774:	70 e0       	ldi	r23, 0x00	; 0
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	6c df       	rcall	.-296    	; 0x4654 <display_draw_small_char>
    477c:	21 e0       	ldi	r18, 0x01	; 1
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	49 81       	ldd	r20, Y+1	; 0x01
    4782:	67 e0       	ldi	r22, 0x07	; 7
    4784:	70 e0       	ldi	r23, 0x00	; 0
    4786:	85 e0       	ldi	r24, 0x05	; 5
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	64 df       	rcall	.-312    	; 0x4654 <display_draw_small_char>
    478c:	21 e0       	ldi	r18, 0x01	; 1
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	4a 81       	ldd	r20, Y+2	; 0x02
    4792:	67 e0       	ldi	r22, 0x07	; 7
    4794:	70 e0       	ldi	r23, 0x00	; 0
    4796:	89 e0       	ldi	r24, 0x09	; 9
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	5c df       	rcall	.-328    	; 0x4654 <display_draw_small_char>
    479c:	21 e0       	ldi	r18, 0x01	; 1
    479e:	30 e0       	ldi	r19, 0x00	; 0
    47a0:	4b 81       	ldd	r20, Y+3	; 0x03
    47a2:	67 e0       	ldi	r22, 0x07	; 7
    47a4:	70 e0       	ldi	r23, 0x00	; 0
    47a6:	8d e0       	ldi	r24, 0x0D	; 13
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	54 df       	rcall	.-344    	; 0x4654 <display_draw_small_char>
    47ac:	df 91       	pop	r29
    47ae:	cf 91       	pop	r28
    47b0:	0f 91       	pop	r16
    47b2:	08 95       	ret

000047b4 <display_draw_three_letter_word>:
    47b4:	0f 93       	push	r16
    47b6:	cf 93       	push	r28
    47b8:	df 93       	push	r29
    47ba:	ec 01       	movw	r28, r24
    47bc:	01 e0       	ldi	r16, 0x01	; 1
    47be:	21 e0       	ldi	r18, 0x01	; 1
    47c0:	30 e0       	ldi	r19, 0x00	; 0
    47c2:	48 81       	ld	r20, Y
    47c4:	67 e0       	ldi	r22, 0x07	; 7
    47c6:	70 e0       	ldi	r23, 0x00	; 0
    47c8:	83 e0       	ldi	r24, 0x03	; 3
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	43 df       	rcall	.-378    	; 0x4654 <display_draw_small_char>
    47ce:	21 e0       	ldi	r18, 0x01	; 1
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	49 81       	ldd	r20, Y+1	; 0x01
    47d4:	67 e0       	ldi	r22, 0x07	; 7
    47d6:	70 e0       	ldi	r23, 0x00	; 0
    47d8:	87 e0       	ldi	r24, 0x07	; 7
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	3b df       	rcall	.-394    	; 0x4654 <display_draw_small_char>
    47de:	21 e0       	ldi	r18, 0x01	; 1
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	4a 81       	ldd	r20, Y+2	; 0x02
    47e4:	67 e0       	ldi	r22, 0x07	; 7
    47e6:	70 e0       	ldi	r23, 0x00	; 0
    47e8:	8b e0       	ldi	r24, 0x0B	; 11
    47ea:	90 e0       	ldi	r25, 0x00	; 0
    47ec:	33 df       	rcall	.-410    	; 0x4654 <display_draw_small_char>
    47ee:	df 91       	pop	r29
    47f0:	cf 91       	pop	r28
    47f2:	0f 91       	pop	r16
    47f4:	08 95       	ret

000047f6 <display_draw_wifi_icon>:
    47f6:	80 91 1b 2b 	lds	r24, 0x2B1B
    47fa:	81 30       	cpi	r24, 0x01	; 1
    47fc:	e9 f1       	breq	.+122    	; 0x4878 <display_draw_wifi_icon+0x82>
    47fe:	a8 f1       	brcs	.+106    	; 0x486a <display_draw_wifi_icon+0x74>
    4800:	82 30       	cpi	r24, 0x02	; 2
    4802:	09 f4       	brne	.+2      	; 0x4806 <display_draw_wifi_icon+0x10>
    4804:	48 c0       	rjmp	.+144    	; 0x4896 <display_draw_wifi_icon+0xa0>
    4806:	83 30       	cpi	r24, 0x03	; 3
    4808:	09 f0       	breq	.+2      	; 0x480c <display_draw_wifi_icon+0x16>
    480a:	65 c0       	rjmp	.+202    	; 0x48d6 <display_draw_wifi_icon+0xe0>
    480c:	82 e2       	ldi	r24, 0x22	; 34
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    4814:	83 e3       	ldi	r24, 0x33	; 51
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    481c:	84 e4       	ldi	r24, 0x44	; 68
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    4824:	84 e5       	ldi	r24, 0x54	; 84
    4826:	90 e0       	ldi	r25, 0x00	; 0
    4828:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    482c:	85 e6       	ldi	r24, 0x65	; 101
    482e:	90 e0       	ldi	r25, 0x00	; 0
    4830:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    4834:	85 e7       	ldi	r24, 0x75	; 117
    4836:	90 e0       	ldi	r25, 0x00	; 0
    4838:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    483c:	8d e0       	ldi	r24, 0x0D	; 13
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    4844:	8d e1       	ldi	r24, 0x1D	; 29
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    484c:	8c e2       	ldi	r24, 0x2C	; 44
    484e:	90 e0       	ldi	r25, 0x00	; 0
    4850:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    4854:	8c e3       	ldi	r24, 0x3C	; 60
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    485c:	8b e4       	ldi	r24, 0x4B	; 75
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    4864:	8a e5       	ldi	r24, 0x5A	; 90
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	34 c0       	rjmp	.+104    	; 0x48d2 <display_draw_wifi_icon+0xdc>
    486a:	83 ef       	ldi	r24, 0xF3	; 243
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    4872:	8b e8       	ldi	r24, 0x8B	; 139
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	2d c0       	rjmp	.+90     	; 0x48d2 <display_draw_wifi_icon+0xdc>
    4878:	85 ee       	ldi	r24, 0xE5	; 229
    487a:	90 e0       	ldi	r25, 0x00	; 0
    487c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    4880:	86 ef       	ldi	r24, 0xF6	; 246
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    4888:	8e e8       	ldi	r24, 0x8E	; 142
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    4890:	8d e9       	ldi	r24, 0x9D	; 157
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	1e c0       	rjmp	.+60     	; 0x48d2 <display_draw_wifi_icon+0xdc>
    4896:	87 ec       	ldi	r24, 0xC7	; 199
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    489e:	80 e5       	ldi	r24, 0x50	; 80
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    48a6:	81 e6       	ldi	r24, 0x61	; 97
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    48ae:	81 e7       	ldi	r24, 0x71	; 113
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    48b6:	89 e0       	ldi	r24, 0x09	; 9
    48b8:	90 e0       	ldi	r25, 0x00	; 0
    48ba:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    48be:	89 e1       	ldi	r24, 0x19	; 25
    48c0:	90 e0       	ldi	r25, 0x00	; 0
    48c2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    48c6:	88 e2       	ldi	r24, 0x28	; 40
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    48ce:	8f eb       	ldi	r24, 0xBF	; 191
    48d0:	90 e0       	ldi	r25, 0x00	; 0
    48d2:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <ht1632c_set_pixel>
    48d6:	80 91 1b 2b 	lds	r24, 0x2B1B
    48da:	91 e0       	ldi	r25, 0x01	; 1
    48dc:	98 0f       	add	r25, r24
    48de:	90 93 1b 2b 	sts	0x2B1B, r25
    48e2:	84 30       	cpi	r24, 0x04	; 4
    48e4:	21 f4       	brne	.+8      	; 0x48ee <display_draw_wifi_icon+0xf8>
    48e6:	10 92 1b 2b 	sts	0x2B1B, r1
    48ea:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <ht1632c_clear_screen>
    48ee:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

000048f2 <display_slide_in_from_left>:
    48f2:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <ht1632c_slide_in_from_left>

000048f6 <display_slide_in_from_right>:
    48f6:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <ht1632c_slide_in_from_right>

000048fa <display_slide_in_from_bottom>:
    48fa:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <ht1632c_slide_in_from_bottom>

000048fe <display_slide_in_from_top>:
    48fe:	0c 94 4f 10 	jmp	0x209e	; 0x209e <ht1632c_slide_in_from_top>

00004902 <display_slide_out_to_right>:
    4902:	cf 93       	push	r28
    4904:	cf e1       	ldi	r28, 0x1F	; 31
    4906:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <ht1632c_shift_right>
    490a:	c1 50       	subi	r28, 0x01	; 1
    490c:	e1 f7       	brne	.-8      	; 0x4906 <display_slide_out_to_right+0x4>
    490e:	cf 91       	pop	r28
    4910:	08 95       	ret

00004912 <display_slide_out_to_left>:
    4912:	cf 93       	push	r28
    4914:	cf e1       	ldi	r28, 0x1F	; 31
    4916:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <ht1632c_shift_left>
    491a:	c1 50       	subi	r28, 0x01	; 1
    491c:	e1 f7       	brne	.-8      	; 0x4916 <display_slide_out_to_left+0x4>
    491e:	cf 91       	pop	r28
    4920:	08 95       	ret

00004922 <display_slide_out_to_top>:
    4922:	cf 93       	push	r28
    4924:	cf e1       	ldi	r28, 0x1F	; 31
    4926:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <ht1632c_shift_up>
    492a:	c1 50       	subi	r28, 0x01	; 1
    492c:	e1 f7       	brne	.-8      	; 0x4926 <display_slide_out_to_top+0x4>
    492e:	cf 91       	pop	r28
    4930:	08 95       	ret

00004932 <display_off>:
    4932:	f7 df       	rcall	.-18     	; 0x4922 <display_slide_out_to_top>
    4934:	82 e0       	ldi	r24, 0x02	; 2
    4936:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <ht1632c_write_command>
    493a:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <ht1632c_power_down>

0000493e <display_slide_out_to_bottom>:
    493e:	cf 93       	push	r28
    4940:	cf e1       	ldi	r28, 0x1F	; 31
    4942:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <ht1632c_shift_down>
    4946:	c1 50       	subi	r28, 0x01	; 1
    4948:	e1 f7       	brne	.-8      	; 0x4942 <display_slide_out_to_bottom+0x4>
    494a:	cf 91       	pop	r28
    494c:	08 95       	ret

0000494e <display_alarm_increment_minute>:
    494e:	60 91 cc 2b 	lds	r22, 0x2BCC
    4952:	6b 33       	cpi	r22, 0x3B	; 59
    4954:	20 f4       	brcc	.+8      	; 0x495e <display_alarm_increment_minute+0x10>
    4956:	6f 5f       	subi	r22, 0xFF	; 255
    4958:	60 93 cc 2b 	sts	0x2BCC, r22
    495c:	04 c0       	rjmp	.+8      	; 0x4966 <display_alarm_increment_minute+0x18>
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	80 93 cc 2b 	sts	0x2BCC, r24
    4964:	61 e0       	ldi	r22, 0x01	; 1
    4966:	85 e0       	ldi	r24, 0x05	; 5
    4968:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    496c:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

00004970 <display_alarm_decrement_minute>:
    4970:	60 91 cc 2b 	lds	r22, 0x2BCC
    4974:	66 23       	and	r22, r22
    4976:	21 f0       	breq	.+8      	; 0x4980 <display_alarm_decrement_minute+0x10>
    4978:	61 50       	subi	r22, 0x01	; 1
    497a:	60 93 cc 2b 	sts	0x2BCC, r22
    497e:	04 c0       	rjmp	.+8      	; 0x4988 <display_alarm_decrement_minute+0x18>
    4980:	8a e3       	ldi	r24, 0x3A	; 58
    4982:	80 93 cc 2b 	sts	0x2BCC, r24
    4986:	6a e3       	ldi	r22, 0x3A	; 58
    4988:	85 e0       	ldi	r24, 0x05	; 5
    498a:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    498e:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

00004992 <display_alarm_increment_hour>:
    4992:	60 91 cd 2b 	lds	r22, 0x2BCD
    4996:	67 31       	cpi	r22, 0x17	; 23
    4998:	20 f4       	brcc	.+8      	; 0x49a2 <display_alarm_increment_hour+0x10>
    499a:	6f 5f       	subi	r22, 0xFF	; 255
    499c:	60 93 cd 2b 	sts	0x2BCD, r22
    49a0:	04 c0       	rjmp	.+8      	; 0x49aa <display_alarm_increment_hour+0x18>
    49a2:	81 e0       	ldi	r24, 0x01	; 1
    49a4:	80 93 cd 2b 	sts	0x2BCD, r24
    49a8:	61 e0       	ldi	r22, 0x01	; 1
    49aa:	85 e0       	ldi	r24, 0x05	; 5
    49ac:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    49b0:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

000049b4 <display_alarm_decrement_hour>:
    49b4:	60 91 cd 2b 	lds	r22, 0x2BCD
    49b8:	66 23       	and	r22, r22
    49ba:	21 f0       	breq	.+8      	; 0x49c4 <display_alarm_decrement_hour+0x10>
    49bc:	61 50       	subi	r22, 0x01	; 1
    49be:	60 93 cd 2b 	sts	0x2BCD, r22
    49c2:	04 c0       	rjmp	.+8      	; 0x49cc <display_alarm_decrement_hour+0x18>
    49c4:	86 e1       	ldi	r24, 0x16	; 22
    49c6:	80 93 cd 2b 	sts	0x2BCD, r24
    49ca:	66 e1       	ldi	r22, 0x16	; 22
    49cc:	85 e0       	ldi	r24, 0x05	; 5
    49ce:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    49d2:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

000049d6 <display_draw_and_increment_hour>:
    49d6:	60 91 d1 2b 	lds	r22, 0x2BD1
    49da:	67 31       	cpi	r22, 0x17	; 23
    49dc:	20 f4       	brcc	.+8      	; 0x49e6 <display_draw_and_increment_hour+0x10>
    49de:	6f 5f       	subi	r22, 0xFF	; 255
    49e0:	60 93 d1 2b 	sts	0x2BD1, r22
    49e4:	03 c0       	rjmp	.+6      	; 0x49ec <display_draw_and_increment_hour+0x16>
    49e6:	10 92 d1 2b 	sts	0x2BD1, r1
    49ea:	60 e0       	ldi	r22, 0x00	; 0
    49ec:	85 e0       	ldi	r24, 0x05	; 5
    49ee:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    49f2:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

000049f6 <display_draw_and_decrement_hour>:
    49f6:	60 91 d1 2b 	lds	r22, 0x2BD1
    49fa:	66 23       	and	r22, r22
    49fc:	21 f0       	breq	.+8      	; 0x4a06 <display_draw_and_decrement_hour+0x10>
    49fe:	61 50       	subi	r22, 0x01	; 1
    4a00:	60 93 d1 2b 	sts	0x2BD1, r22
    4a04:	04 c0       	rjmp	.+8      	; 0x4a0e <display_draw_and_decrement_hour+0x18>
    4a06:	87 e1       	ldi	r24, 0x17	; 23
    4a08:	80 93 d1 2b 	sts	0x2BD1, r24
    4a0c:	67 e1       	ldi	r22, 0x17	; 23
    4a0e:	85 e0       	ldi	r24, 0x05	; 5
    4a10:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    4a14:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

00004a18 <display_draw_and_increment_minute>:
    4a18:	60 91 d0 2b 	lds	r22, 0x2BD0
    4a1c:	6b 33       	cpi	r22, 0x3B	; 59
    4a1e:	20 f4       	brcc	.+8      	; 0x4a28 <display_draw_and_increment_minute+0x10>
    4a20:	6f 5f       	subi	r22, 0xFF	; 255
    4a22:	60 93 d0 2b 	sts	0x2BD0, r22
    4a26:	03 c0       	rjmp	.+6      	; 0x4a2e <display_draw_and_increment_minute+0x16>
    4a28:	10 92 d0 2b 	sts	0x2BD0, r1
    4a2c:	60 e0       	ldi	r22, 0x00	; 0
    4a2e:	85 e0       	ldi	r24, 0x05	; 5
    4a30:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    4a34:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

00004a38 <display_draw_and_decrement_minute>:
    4a38:	60 91 d0 2b 	lds	r22, 0x2BD0
    4a3c:	66 23       	and	r22, r22
    4a3e:	21 f0       	breq	.+8      	; 0x4a48 <display_draw_and_decrement_minute+0x10>
    4a40:	61 50       	subi	r22, 0x01	; 1
    4a42:	60 93 d0 2b 	sts	0x2BD0, r22
    4a46:	04 c0       	rjmp	.+8      	; 0x4a50 <display_draw_and_decrement_minute+0x18>
    4a48:	8b e3       	ldi	r24, 0x3B	; 59
    4a4a:	80 93 d0 2b 	sts	0x2BD0, r24
    4a4e:	6b e3       	ldi	r22, 0x3B	; 59
    4a50:	85 e0       	ldi	r24, 0x05	; 5
    4a52:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
    4a56:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

00004a5a <display_draw_and_increment_day>:
	}
	display_refresh_screen();
}

void display_draw_and_increment_day(void)
{
    4a5a:	cf 93       	push	r28
	if (env.time.day < time_get_days_in_month(env.time.month,env.time.year)) {
    4a5c:	c0 91 d2 2b 	lds	r28, 0x2BD2
    4a60:	60 91 d6 2b 	lds	r22, 0x2BD6
    4a64:	70 91 d7 2b 	lds	r23, 0x2BD7
    4a68:	80 91 d5 2b 	lds	r24, 0x2BD5
    4a6c:	0e 94 d8 4a 	call	0x95b0	; 0x95b0 <time_get_days_in_month>
    4a70:	c8 17       	cp	r28, r24
    4a72:	30 f4       	brcc	.+12     	; 0x4a80 <display_draw_and_increment_day+0x26>
		rtc_update_display(5,++env.time.day);
    4a74:	60 91 d2 2b 	lds	r22, 0x2BD2
    4a78:	6f 5f       	subi	r22, 0xFF	; 255
    4a7a:	60 93 d2 2b 	sts	0x2BD2, r22
    4a7e:	04 c0       	rjmp	.+8      	; 0x4a88 <display_draw_and_increment_day+0x2e>
	} else {
		env.time.day = 1;
    4a80:	81 e0       	ldi	r24, 0x01	; 1
    4a82:	80 93 d2 2b 	sts	0x2BD2, r24
		rtc_update_display(5,env.time.day);
    4a86:	61 e0       	ldi	r22, 0x01	; 1
    4a88:	85 e0       	ldi	r24, 0x05	; 5
    4a8a:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
	}
	display_refresh_screen();
}
    4a8e:	cf 91       	pop	r28
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4a90:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

00004a94 <display_draw_and_decrement_day>:
	display_refresh_screen();
}

void display_draw_and_decrement_day(void)
{
	if (env.time.day > 1) {
    4a94:	60 91 d2 2b 	lds	r22, 0x2BD2
    4a98:	62 30       	cpi	r22, 0x02	; 2
    4a9a:	20 f0       	brcs	.+8      	; 0x4aa4 <display_draw_and_decrement_day+0x10>
		rtc_update_display(5,--env.time.day);
    4a9c:	61 50       	subi	r22, 0x01	; 1
    4a9e:	60 93 d2 2b 	sts	0x2BD2, r22
    4aa2:	0b c0       	rjmp	.+22     	; 0x4aba <display_draw_and_decrement_day+0x26>
	} else {
		env.time.day = time_get_days_in_month(env.time.month,env.time.year);
    4aa4:	60 91 d6 2b 	lds	r22, 0x2BD6
    4aa8:	70 91 d7 2b 	lds	r23, 0x2BD7
    4aac:	80 91 d5 2b 	lds	r24, 0x2BD5
    4ab0:	0e 94 d8 4a 	call	0x95b0	; 0x95b0 <time_get_days_in_month>
    4ab4:	80 93 d2 2b 	sts	0x2BD2, r24
		rtc_update_display(5,env.time.day);
    4ab8:	68 2f       	mov	r22, r24
    4aba:	85 e0       	ldi	r24, 0x05	; 5
    4abc:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4ac0:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

00004ac4 <display_draw_and_increment_month>:
	display_refresh_screen();
}

void display_draw_and_increment_month(void) 
{
	if (env.time.month < December) {
    4ac4:	80 91 d5 2b 	lds	r24, 0x2BD5
    4ac8:	8c 30       	cpi	r24, 0x0C	; 12
    4aca:	10 f4       	brcc	.+4      	; 0x4ad0 <display_draw_and_increment_month+0xc>
		display_draw_three_letter_word(time_get_month_name(++env.time.month));
    4acc:	8f 5f       	subi	r24, 0xFF	; 255
    4ace:	01 c0       	rjmp	.+2      	; 0x4ad2 <display_draw_and_increment_month+0xe>
	} else {
		env.time.month = January;
    4ad0:	81 e0       	ldi	r24, 0x01	; 1
    4ad2:	80 93 d5 2b 	sts	0x2BD5, r24
		display_draw_three_letter_word(time_get_month_name(January));
    4ad6:	0e 94 7c 4a 	call	0x94f8	; 0x94f8 <time_get_month_name>
    4ada:	6c de       	rcall	.-808    	; 0x47b4 <display_draw_three_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4adc:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

00004ae0 <display_draw_and_decrement_month>:
	display_refresh_screen();
}

void display_draw_and_decrement_month(void) 
{
	if (env.time.month > January) {
    4ae0:	80 91 d5 2b 	lds	r24, 0x2BD5
    4ae4:	82 30       	cpi	r24, 0x02	; 2
    4ae6:	10 f0       	brcs	.+4      	; 0x4aec <display_draw_and_decrement_month+0xc>
		display_draw_three_letter_word(time_get_month_name(--env.time.month));
    4ae8:	81 50       	subi	r24, 0x01	; 1
    4aea:	01 c0       	rjmp	.+2      	; 0x4aee <display_draw_and_decrement_month+0xe>
	} else {
		env.time.month = December;
    4aec:	8c e0       	ldi	r24, 0x0C	; 12
    4aee:	80 93 d5 2b 	sts	0x2BD5, r24
		display_draw_three_letter_word(time_get_month_name(December));
    4af2:	0e 94 7c 4a 	call	0x94f8	; 0x94f8 <time_get_month_name>
    4af6:	5e de       	rcall	.-836    	; 0x47b4 <display_draw_three_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4af8:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

00004afc <display_draw_and_increment_year>:
}

void display_draw_and_increment_year(void) 
{
	char *year = NULL;
	itoa_simple(year,++env.time.year);
    4afc:	e6 ed       	ldi	r30, 0xD6	; 214
    4afe:	fb e2       	ldi	r31, 0x2B	; 43
    4b00:	60 81       	ld	r22, Z
    4b02:	71 81       	ldd	r23, Z+1	; 0x01
    4b04:	6f 5f       	subi	r22, 0xFF	; 255
    4b06:	7f 4f       	sbci	r23, 0xFF	; 255
    4b08:	60 83       	st	Z, r22
    4b0a:	71 83       	std	Z+1, r23	; 0x01
    4b0c:	80 e0       	ldi	r24, 0x00	; 0
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	91 da       	rcall	.-2782   	; 0x4034 <itoa_simple.constprop.1>
	display_draw_four_letter_word(year);
    4b12:	80 e0       	ldi	r24, 0x00	; 0
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	25 de       	rcall	.-950    	; 0x4762 <display_draw_four_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4b18:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

00004b1c <display_draw_and_decrement_year>:
}

void display_draw_and_decrement_year(void) 
{
	char *year = NULL;
	itoa_simple(year,--env.time.year);
    4b1c:	e6 ed       	ldi	r30, 0xD6	; 214
    4b1e:	fb e2       	ldi	r31, 0x2B	; 43
    4b20:	60 81       	ld	r22, Z
    4b22:	71 81       	ldd	r23, Z+1	; 0x01
    4b24:	61 50       	subi	r22, 0x01	; 1
    4b26:	71 09       	sbc	r23, r1
    4b28:	60 83       	st	Z, r22
    4b2a:	71 83       	std	Z+1, r23	; 0x01
    4b2c:	80 e0       	ldi	r24, 0x00	; 0
    4b2e:	90 e0       	ldi	r25, 0x00	; 0
    4b30:	81 da       	rcall	.-2814   	; 0x4034 <itoa_simple.constprop.1>
	display_draw_four_letter_word(year);
    4b32:	80 e0       	ldi	r24, 0x00	; 0
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	15 de       	rcall	.-982    	; 0x4762 <display_draw_four_letter_word>
	ht1632c_clear_buffer();
}

void display_refresh_screen(void) 
{
	ht1632c_refresh_screen();
    4b38:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <ht1632c_refresh_screen>

00004b3c <mem_cpy>:
		*tp = 0;
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    4b3c:	cf 93       	push	r28
    4b3e:	df 93       	push	r29
    4b40:	db 01       	movw	r26, r22
    4b42:	fc 01       	movw	r30, r24
    4b44:	9a 01       	movw	r18, r20
    4b46:	22 30       	cpi	r18, 0x02	; 2
    4b48:	31 05       	cpc	r19, r1
    4b4a:	38 f0       	brcs	.+14     	; 0x4b5a <mem_cpy+0x1e>
    4b4c:	cd 91       	ld	r28, X+
    4b4e:	dd 91       	ld	r29, X+
    4b50:	c1 93       	st	Z+, r28
    4b52:	d1 93       	st	Z+, r29
    4b54:	22 50       	subi	r18, 0x02	; 2
    4b56:	31 09       	sbc	r19, r1
    4b58:	f6 cf       	rjmp	.-20     	; 0x4b46 <mem_cpy+0xa>
    4b5a:	da 01       	movw	r26, r20
    4b5c:	ae 7f       	andi	r26, 0xFE	; 254
    4b5e:	fb 01       	movw	r30, r22
    4b60:	ea 0f       	add	r30, r26
    4b62:	fb 1f       	adc	r31, r27
    4b64:	a8 0f       	add	r26, r24
    4b66:	b9 1f       	adc	r27, r25
    4b68:	41 70       	andi	r20, 0x01	; 1
    4b6a:	55 27       	eor	r21, r21
    4b6c:	4e 0f       	add	r20, r30
    4b6e:	5f 1f       	adc	r21, r31
    4b70:	e4 17       	cp	r30, r20
    4b72:	f5 07       	cpc	r31, r21
    4b74:	19 f0       	breq	.+6      	; 0x4b7c <mem_cpy+0x40>
    4b76:	81 91       	ld	r24, Z+
    4b78:	8d 93       	st	X+, r24
    4b7a:	fa cf       	rjmp	.-12     	; 0x4b70 <mem_cpy+0x34>
    4b7c:	df 91       	pop	r29
    4b7e:	cf 91       	pop	r28
    4b80:	08 95       	ret

00004b82 <mem_set>:
    4b82:	48 0f       	add	r20, r24
    4b84:	59 1f       	adc	r21, r25
    4b86:	84 17       	cp	r24, r20
    4b88:	95 07       	cpc	r25, r21
    4b8a:	21 f0       	breq	.+8      	; 0x4b94 <mem_set+0x12>
    4b8c:	fc 01       	movw	r30, r24
    4b8e:	61 93       	st	Z+, r22
    4b90:	cf 01       	movw	r24, r30
    4b92:	f9 cf       	rjmp	.-14     	; 0x4b86 <mem_set+0x4>
    4b94:	08 95       	ret

00004b96 <get_ldnumber>:
    4b96:	dc 01       	movw	r26, r24
    4b98:	2d 91       	ld	r18, X+
    4b9a:	3c 91       	ld	r19, X
    4b9c:	11 97       	sbiw	r26, 0x01	; 1
    4b9e:	21 15       	cp	r18, r1
    4ba0:	31 05       	cpc	r19, r1
    4ba2:	b9 f0       	breq	.+46     	; 0x4bd2 <get_ldnumber+0x3c>
    4ba4:	f9 01       	movw	r30, r18
    4ba6:	af 01       	movw	r20, r30
    4ba8:	81 91       	ld	r24, Z+
    4baa:	81 32       	cpi	r24, 0x21	; 33
    4bac:	a8 f0       	brcs	.+42     	; 0x4bd8 <get_ldnumber+0x42>
    4bae:	8a 33       	cpi	r24, 0x3A	; 58
    4bb0:	d1 f7       	brne	.-12     	; 0x4ba6 <get_ldnumber+0x10>
    4bb2:	f9 01       	movw	r30, r18
    4bb4:	81 91       	ld	r24, Z+
    4bb6:	4e 17       	cp	r20, r30
    4bb8:	5f 07       	cpc	r21, r31
    4bba:	59 f4       	brne	.+22     	; 0x4bd2 <get_ldnumber+0x3c>
    4bbc:	90 ed       	ldi	r25, 0xD0	; 208
    4bbe:	98 0f       	add	r25, r24
    4bc0:	92 30       	cpi	r25, 0x02	; 2
    4bc2:	38 f4       	brcc	.+14     	; 0x4bd2 <get_ldnumber+0x3c>
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	c0 97       	sbiw	r24, 0x30	; 48
    4bc8:	2e 5f       	subi	r18, 0xFE	; 254
    4bca:	3f 4f       	sbci	r19, 0xFF	; 255
    4bcc:	2d 93       	st	X+, r18
    4bce:	3c 93       	st	X, r19
    4bd0:	08 95       	ret
    4bd2:	8f ef       	ldi	r24, 0xFF	; 255
    4bd4:	9f ef       	ldi	r25, 0xFF	; 255
    4bd6:	08 95       	ret
    4bd8:	80 91 1c 2b 	lds	r24, 0x2B1C
    4bdc:	90 e0       	ldi	r25, 0x00	; 0
    4bde:	08 95       	ret

00004be0 <validate>:
    4be0:	00 97       	sbiw	r24, 0x00	; 0
    4be2:	c9 f0       	breq	.+50     	; 0x4c16 <validate+0x36>
    4be4:	dc 01       	movw	r26, r24
    4be6:	ed 91       	ld	r30, X+
    4be8:	fc 91       	ld	r31, X
    4bea:	11 97       	sbiw	r26, 0x01	; 1
    4bec:	30 97       	sbiw	r30, 0x00	; 0
    4bee:	99 f0       	breq	.+38     	; 0x4c16 <validate+0x36>
    4bf0:	20 81       	ld	r18, Z
    4bf2:	22 23       	and	r18, r18
    4bf4:	81 f0       	breq	.+32     	; 0x4c16 <validate+0x36>
    4bf6:	26 81       	ldd	r18, Z+6	; 0x06
    4bf8:	37 81       	ldd	r19, Z+7	; 0x07
    4bfa:	12 96       	adiw	r26, 0x02	; 2
    4bfc:	8d 91       	ld	r24, X+
    4bfe:	9c 91       	ld	r25, X
    4c00:	13 97       	sbiw	r26, 0x03	; 3
    4c02:	28 17       	cp	r18, r24
    4c04:	39 07       	cpc	r19, r25
    4c06:	39 f4       	brne	.+14     	; 0x4c16 <validate+0x36>
    4c08:	81 81       	ldd	r24, Z+1	; 0x01
    4c0a:	0e 94 b8 36 	call	0x6d70	; 0x6d70 <disk_status>
    4c0e:	80 fd       	sbrc	r24, 0
    4c10:	02 c0       	rjmp	.+4      	; 0x4c16 <validate+0x36>
    4c12:	80 e0       	ldi	r24, 0x00	; 0
    4c14:	08 95       	ret
    4c16:	89 e0       	ldi	r24, 0x09	; 9
    4c18:	08 95       	ret

00004c1a <sync_window>:
    4c1a:	4f 92       	push	r4
    4c1c:	5f 92       	push	r5
    4c1e:	6f 92       	push	r6
    4c20:	7f 92       	push	r7
    4c22:	af 92       	push	r10
    4c24:	bf 92       	push	r11
    4c26:	cf 92       	push	r12
    4c28:	df 92       	push	r13
    4c2a:	ef 92       	push	r14
    4c2c:	ff 92       	push	r15
    4c2e:	0f 93       	push	r16
    4c30:	1f 93       	push	r17
    4c32:	cf 93       	push	r28
    4c34:	df 93       	push	r29
    4c36:	ec 01       	movw	r28, r24
    4c38:	8c 81       	ldd	r24, Y+4	; 0x04
    4c3a:	88 23       	and	r24, r24
    4c3c:	09 f4       	brne	.+2      	; 0x4c40 <sync_window+0x26>
    4c3e:	45 c0       	rjmp	.+138    	; 0x4cca <sync_window+0xb0>
    4c40:	4e a4       	ldd	r4, Y+46	; 0x2e
    4c42:	5f a4       	ldd	r5, Y+47	; 0x2f
    4c44:	68 a8       	ldd	r6, Y+48	; 0x30
    4c46:	79 a8       	ldd	r7, Y+49	; 0x31
    4c48:	6e 01       	movw	r12, r28
    4c4a:	82 e3       	ldi	r24, 0x32	; 50
    4c4c:	c8 0e       	add	r12, r24
    4c4e:	d1 1c       	adc	r13, r1
    4c50:	01 e0       	ldi	r16, 0x01	; 1
    4c52:	10 e0       	ldi	r17, 0x00	; 0
    4c54:	a3 01       	movw	r20, r6
    4c56:	92 01       	movw	r18, r4
    4c58:	b6 01       	movw	r22, r12
    4c5a:	89 81       	ldd	r24, Y+1	; 0x01
    4c5c:	0e 94 0a 37 	call	0x6e14	; 0x6e14 <disk_write>
    4c60:	81 11       	cpse	r24, r1
    4c62:	31 c0       	rjmp	.+98     	; 0x4cc6 <sync_window+0xac>
    4c64:	1c 82       	std	Y+4, r1	; 0x04
    4c66:	8a a1       	ldd	r24, Y+34	; 0x22
    4c68:	9b a1       	ldd	r25, Y+35	; 0x23
    4c6a:	ac a1       	ldd	r26, Y+36	; 0x24
    4c6c:	bd a1       	ldd	r27, Y+37	; 0x25
    4c6e:	b3 01       	movw	r22, r6
    4c70:	a2 01       	movw	r20, r4
    4c72:	48 1b       	sub	r20, r24
    4c74:	59 0b       	sbc	r21, r25
    4c76:	6a 0b       	sbc	r22, r26
    4c78:	7b 0b       	sbc	r23, r27
    4c7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4c7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4c7e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4c80:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4c82:	48 17       	cp	r20, r24
    4c84:	59 07       	cpc	r21, r25
    4c86:	6a 07       	cpc	r22, r26
    4c88:	7b 07       	cpc	r23, r27
    4c8a:	f8 f4       	brcc	.+62     	; 0x4cca <sync_window+0xb0>
    4c8c:	ab 80       	ldd	r10, Y+3	; 0x03
    4c8e:	b1 2c       	mov	r11, r1
    4c90:	e1 2c       	mov	r14, r1
    4c92:	f1 2c       	mov	r15, r1
    4c94:	c5 01       	movw	r24, r10
    4c96:	8e 19       	sub	r24, r14
    4c98:	9f 09       	sbc	r25, r15
    4c9a:	02 97       	sbiw	r24, 0x02	; 2
    4c9c:	b0 f0       	brcs	.+44     	; 0x4cca <sync_window+0xb0>
    4c9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4ca0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4ca2:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4ca4:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4ca6:	48 0e       	add	r4, r24
    4ca8:	59 1e       	adc	r5, r25
    4caa:	6a 1e       	adc	r6, r26
    4cac:	7b 1e       	adc	r7, r27
    4cae:	01 e0       	ldi	r16, 0x01	; 1
    4cb0:	10 e0       	ldi	r17, 0x00	; 0
    4cb2:	a3 01       	movw	r20, r6
    4cb4:	92 01       	movw	r18, r4
    4cb6:	b6 01       	movw	r22, r12
    4cb8:	89 81       	ldd	r24, Y+1	; 0x01
    4cba:	0e 94 0a 37 	call	0x6e14	; 0x6e14 <disk_write>
    4cbe:	8f ef       	ldi	r24, 0xFF	; 255
    4cc0:	e8 1a       	sub	r14, r24
    4cc2:	f8 0a       	sbc	r15, r24
    4cc4:	e7 cf       	rjmp	.-50     	; 0x4c94 <sync_window+0x7a>
    4cc6:	81 e0       	ldi	r24, 0x01	; 1
    4cc8:	01 c0       	rjmp	.+2      	; 0x4ccc <sync_window+0xb2>
    4cca:	80 e0       	ldi	r24, 0x00	; 0
    4ccc:	df 91       	pop	r29
    4cce:	cf 91       	pop	r28
    4cd0:	1f 91       	pop	r17
    4cd2:	0f 91       	pop	r16
    4cd4:	ff 90       	pop	r15
    4cd6:	ef 90       	pop	r14
    4cd8:	df 90       	pop	r13
    4cda:	cf 90       	pop	r12
    4cdc:	bf 90       	pop	r11
    4cde:	af 90       	pop	r10
    4ce0:	7f 90       	pop	r7
    4ce2:	6f 90       	pop	r6
    4ce4:	5f 90       	pop	r5
    4ce6:	4f 90       	pop	r4
    4ce8:	08 95       	ret

00004cea <sync_fs>:
    4cea:	ef 92       	push	r14
    4cec:	ff 92       	push	r15
    4cee:	0f 93       	push	r16
    4cf0:	1f 93       	push	r17
    4cf2:	cf 93       	push	r28
    4cf4:	df 93       	push	r29
    4cf6:	ec 01       	movw	r28, r24
    4cf8:	90 df       	rcall	.-224    	; 0x4c1a <sync_window>
    4cfa:	98 2f       	mov	r25, r24
    4cfc:	81 11       	cpse	r24, r1
    4cfe:	59 c0       	rjmp	.+178    	; 0x4db2 <sync_fs+0xc8>
    4d00:	88 81       	ld	r24, Y
    4d02:	83 30       	cpi	r24, 0x03	; 3
    4d04:	09 f0       	breq	.+2      	; 0x4d08 <sync_fs+0x1e>
    4d06:	4b c0       	rjmp	.+150    	; 0x4d9e <sync_fs+0xb4>
    4d08:	8d 81       	ldd	r24, Y+5	; 0x05
    4d0a:	81 30       	cpi	r24, 0x01	; 1
    4d0c:	09 f0       	breq	.+2      	; 0x4d10 <sync_fs+0x26>
    4d0e:	47 c0       	rjmp	.+142    	; 0x4d9e <sync_fs+0xb4>
    4d10:	40 e0       	ldi	r20, 0x00	; 0
    4d12:	52 e0       	ldi	r21, 0x02	; 2
    4d14:	60 e0       	ldi	r22, 0x00	; 0
    4d16:	70 e0       	ldi	r23, 0x00	; 0
    4d18:	7e 01       	movw	r14, r28
    4d1a:	82 e3       	ldi	r24, 0x32	; 50
    4d1c:	e8 0e       	add	r14, r24
    4d1e:	f1 1c       	adc	r15, r1
    4d20:	c7 01       	movw	r24, r14
    4d22:	2f df       	rcall	.-418    	; 0x4b82 <mem_set>
    4d24:	85 e5       	ldi	r24, 0x55	; 85
    4d26:	9a ea       	ldi	r25, 0xAA	; 170
    4d28:	fe 01       	movw	r30, r28
    4d2a:	e0 5d       	subi	r30, 0xD0	; 208
    4d2c:	fd 4f       	sbci	r31, 0xFD	; 253
    4d2e:	80 83       	st	Z, r24
    4d30:	91 83       	std	Z+1, r25	; 0x01
    4d32:	82 e5       	ldi	r24, 0x52	; 82
    4d34:	92 e5       	ldi	r25, 0x52	; 82
    4d36:	a1 e6       	ldi	r26, 0x61	; 97
    4d38:	b1 e4       	ldi	r27, 0x41	; 65
    4d3a:	8a ab       	std	Y+50, r24	; 0x32
    4d3c:	9b ab       	std	Y+51, r25	; 0x33
    4d3e:	ac ab       	std	Y+52, r26	; 0x34
    4d40:	bd ab       	std	Y+53, r27	; 0x35
    4d42:	82 e7       	ldi	r24, 0x72	; 114
    4d44:	92 e7       	ldi	r25, 0x72	; 114
    4d46:	a1 e4       	ldi	r26, 0x41	; 65
    4d48:	b1 e6       	ldi	r27, 0x61	; 97
    4d4a:	7a 97       	sbiw	r30, 0x1a	; 26
    4d4c:	80 83       	st	Z, r24
    4d4e:	91 83       	std	Z+1, r25	; 0x01
    4d50:	a2 83       	std	Z+2, r26	; 0x02
    4d52:	b3 83       	std	Z+3, r27	; 0x03
    4d54:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d56:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d58:	a8 89       	ldd	r26, Y+16	; 0x10
    4d5a:	b9 89       	ldd	r27, Y+17	; 0x11
    4d5c:	34 96       	adiw	r30, 0x04	; 4
    4d5e:	80 83       	st	Z, r24
    4d60:	91 83       	std	Z+1, r25	; 0x01
    4d62:	a2 83       	std	Z+2, r26	; 0x02
    4d64:	b3 83       	std	Z+3, r27	; 0x03
    4d66:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d68:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d6a:	ac 85       	ldd	r26, Y+12	; 0x0c
    4d6c:	bd 85       	ldd	r27, Y+13	; 0x0d
    4d6e:	34 96       	adiw	r30, 0x04	; 4
    4d70:	80 83       	st	Z, r24
    4d72:	91 83       	std	Z+1, r25	; 0x01
    4d74:	a2 83       	std	Z+2, r26	; 0x02
    4d76:	b3 83       	std	Z+3, r27	; 0x03
    4d78:	2e 8d       	ldd	r18, Y+30	; 0x1e
    4d7a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    4d7c:	48 a1       	ldd	r20, Y+32	; 0x20
    4d7e:	59 a1       	ldd	r21, Y+33	; 0x21
    4d80:	2f 5f       	subi	r18, 0xFF	; 255
    4d82:	3f 4f       	sbci	r19, 0xFF	; 255
    4d84:	4f 4f       	sbci	r20, 0xFF	; 255
    4d86:	5f 4f       	sbci	r21, 0xFF	; 255
    4d88:	2e a7       	std	Y+46, r18	; 0x2e
    4d8a:	3f a7       	std	Y+47, r19	; 0x2f
    4d8c:	48 ab       	std	Y+48, r20	; 0x30
    4d8e:	59 ab       	std	Y+49, r21	; 0x31
    4d90:	01 e0       	ldi	r16, 0x01	; 1
    4d92:	10 e0       	ldi	r17, 0x00	; 0
    4d94:	b7 01       	movw	r22, r14
    4d96:	89 81       	ldd	r24, Y+1	; 0x01
    4d98:	0e 94 0a 37 	call	0x6e14	; 0x6e14 <disk_write>
    4d9c:	1d 82       	std	Y+5, r1	; 0x05
    4d9e:	40 e0       	ldi	r20, 0x00	; 0
    4da0:	50 e0       	ldi	r21, 0x00	; 0
    4da2:	60 e0       	ldi	r22, 0x00	; 0
    4da4:	89 81       	ldd	r24, Y+1	; 0x01
    4da6:	0e 94 7e 37 	call	0x6efc	; 0x6efc <disk_ioctl>
    4daa:	91 e0       	ldi	r25, 0x01	; 1
    4dac:	81 11       	cpse	r24, r1
    4dae:	01 c0       	rjmp	.+2      	; 0x4db2 <sync_fs+0xc8>
    4db0:	90 e0       	ldi	r25, 0x00	; 0
    4db2:	89 2f       	mov	r24, r25
    4db4:	df 91       	pop	r29
    4db6:	cf 91       	pop	r28
    4db8:	1f 91       	pop	r17
    4dba:	0f 91       	pop	r16
    4dbc:	ff 90       	pop	r15
    4dbe:	ef 90       	pop	r14
    4dc0:	08 95       	ret

00004dc2 <move_window>:
    4dc2:	bf 92       	push	r11
    4dc4:	cf 92       	push	r12
    4dc6:	df 92       	push	r13
    4dc8:	ef 92       	push	r14
    4dca:	ff 92       	push	r15
    4dcc:	0f 93       	push	r16
    4dce:	1f 93       	push	r17
    4dd0:	cf 93       	push	r28
    4dd2:	df 93       	push	r29
    4dd4:	ec 01       	movw	r28, r24
    4dd6:	6a 01       	movw	r12, r20
    4dd8:	7b 01       	movw	r14, r22
    4dda:	8e a5       	ldd	r24, Y+46	; 0x2e
    4ddc:	9f a5       	ldd	r25, Y+47	; 0x2f
    4dde:	a8 a9       	ldd	r26, Y+48	; 0x30
    4de0:	b9 a9       	ldd	r27, Y+49	; 0x31
    4de2:	48 17       	cp	r20, r24
    4de4:	59 07       	cpc	r21, r25
    4de6:	6a 07       	cpc	r22, r26
    4de8:	7b 07       	cpc	r23, r27
    4dea:	e1 f0       	breq	.+56     	; 0x4e24 <move_window+0x62>
    4dec:	ce 01       	movw	r24, r28
    4dee:	15 df       	rcall	.-470    	; 0x4c1a <sync_window>
    4df0:	b8 2e       	mov	r11, r24
    4df2:	81 11       	cpse	r24, r1
    4df4:	18 c0       	rjmp	.+48     	; 0x4e26 <move_window+0x64>
    4df6:	01 e0       	ldi	r16, 0x01	; 1
    4df8:	10 e0       	ldi	r17, 0x00	; 0
    4dfa:	a7 01       	movw	r20, r14
    4dfc:	96 01       	movw	r18, r12
    4dfe:	be 01       	movw	r22, r28
    4e00:	6e 5c       	subi	r22, 0xCE	; 206
    4e02:	7f 4f       	sbci	r23, 0xFF	; 255
    4e04:	89 81       	ldd	r24, Y+1	; 0x01
    4e06:	0e 94 bf 36 	call	0x6d7e	; 0x6d7e <disk_read>
    4e0a:	88 23       	and	r24, r24
    4e0c:	31 f0       	breq	.+12     	; 0x4e1a <move_window+0x58>
    4e0e:	bb 24       	eor	r11, r11
    4e10:	b3 94       	inc	r11
    4e12:	cc 24       	eor	r12, r12
    4e14:	ca 94       	dec	r12
    4e16:	dc 2c       	mov	r13, r12
    4e18:	76 01       	movw	r14, r12
    4e1a:	ce a6       	std	Y+46, r12	; 0x2e
    4e1c:	df a6       	std	Y+47, r13	; 0x2f
    4e1e:	e8 aa       	std	Y+48, r14	; 0x30
    4e20:	f9 aa       	std	Y+49, r15	; 0x31
    4e22:	01 c0       	rjmp	.+2      	; 0x4e26 <move_window+0x64>
    4e24:	b1 2c       	mov	r11, r1
    4e26:	8b 2d       	mov	r24, r11
    4e28:	df 91       	pop	r29
    4e2a:	cf 91       	pop	r28
    4e2c:	1f 91       	pop	r17
    4e2e:	0f 91       	pop	r16
    4e30:	ff 90       	pop	r15
    4e32:	ef 90       	pop	r14
    4e34:	df 90       	pop	r13
    4e36:	cf 90       	pop	r12
    4e38:	bf 90       	pop	r11
    4e3a:	08 95       	ret

00004e3c <check_fs>:
    4e3c:	0f 93       	push	r16
    4e3e:	1f 93       	push	r17
    4e40:	cf 93       	push	r28
    4e42:	df 93       	push	r29
    4e44:	ec 01       	movw	r28, r24
    4e46:	1c 82       	std	Y+4, r1	; 0x04
    4e48:	0f ef       	ldi	r16, 0xFF	; 255
    4e4a:	1f ef       	ldi	r17, 0xFF	; 255
    4e4c:	98 01       	movw	r18, r16
    4e4e:	0e a7       	std	Y+46, r16	; 0x2e
    4e50:	1f a7       	std	Y+47, r17	; 0x2f
    4e52:	28 ab       	std	Y+48, r18	; 0x30
    4e54:	39 ab       	std	Y+49, r19	; 0x31
    4e56:	b5 df       	rcall	.-150    	; 0x4dc2 <move_window>
    4e58:	81 11       	cpse	r24, r1
    4e5a:	22 c0       	rjmp	.+68     	; 0x4ea0 <check_fs+0x64>
    4e5c:	fe 01       	movw	r30, r28
    4e5e:	e0 5d       	subi	r30, 0xD0	; 208
    4e60:	fd 4f       	sbci	r31, 0xFD	; 253
    4e62:	80 81       	ld	r24, Z
    4e64:	91 81       	ldd	r25, Z+1	; 0x01
    4e66:	85 35       	cpi	r24, 0x55	; 85
    4e68:	9a 4a       	sbci	r25, 0xAA	; 170
    4e6a:	e1 f4       	brne	.+56     	; 0x4ea4 <check_fs+0x68>
    4e6c:	e8 5c       	subi	r30, 0xC8	; 200
    4e6e:	f1 40       	sbci	r31, 0x01	; 1
    4e70:	40 81       	ld	r20, Z
    4e72:	51 81       	ldd	r21, Z+1	; 0x01
    4e74:	62 81       	ldd	r22, Z+2	; 0x02
    4e76:	73 81       	ldd	r23, Z+3	; 0x03
    4e78:	77 27       	eor	r23, r23
    4e7a:	46 34       	cpi	r20, 0x46	; 70
    4e7c:	51 44       	sbci	r21, 0x41	; 65
    4e7e:	64 45       	sbci	r22, 0x54	; 84
    4e80:	71 05       	cpc	r23, r1
    4e82:	91 f0       	breq	.+36     	; 0x4ea8 <check_fs+0x6c>
    4e84:	cc 57       	subi	r28, 0x7C	; 124
    4e86:	df 4f       	sbci	r29, 0xFF	; 255
    4e88:	48 81       	ld	r20, Y
    4e8a:	59 81       	ldd	r21, Y+1	; 0x01
    4e8c:	6a 81       	ldd	r22, Y+2	; 0x02
    4e8e:	7b 81       	ldd	r23, Y+3	; 0x03
    4e90:	77 27       	eor	r23, r23
    4e92:	81 e0       	ldi	r24, 0x01	; 1
    4e94:	46 34       	cpi	r20, 0x46	; 70
    4e96:	51 44       	sbci	r21, 0x41	; 65
    4e98:	64 45       	sbci	r22, 0x54	; 84
    4e9a:	71 05       	cpc	r23, r1
    4e9c:	31 f4       	brne	.+12     	; 0x4eaa <check_fs+0x6e>
    4e9e:	04 c0       	rjmp	.+8      	; 0x4ea8 <check_fs+0x6c>
    4ea0:	83 e0       	ldi	r24, 0x03	; 3
    4ea2:	03 c0       	rjmp	.+6      	; 0x4eaa <check_fs+0x6e>
    4ea4:	82 e0       	ldi	r24, 0x02	; 2
    4ea6:	01 c0       	rjmp	.+2      	; 0x4eaa <check_fs+0x6e>
    4ea8:	80 e0       	ldi	r24, 0x00	; 0
    4eaa:	df 91       	pop	r29
    4eac:	cf 91       	pop	r28
    4eae:	1f 91       	pop	r17
    4eb0:	0f 91       	pop	r16
    4eb2:	08 95       	ret

00004eb4 <find_volume>:
    4eb4:	2f 92       	push	r2
    4eb6:	3f 92       	push	r3
    4eb8:	4f 92       	push	r4
    4eba:	5f 92       	push	r5
    4ebc:	6f 92       	push	r6
    4ebe:	7f 92       	push	r7
    4ec0:	8f 92       	push	r8
    4ec2:	9f 92       	push	r9
    4ec4:	af 92       	push	r10
    4ec6:	bf 92       	push	r11
    4ec8:	cf 92       	push	r12
    4eca:	df 92       	push	r13
    4ecc:	ef 92       	push	r14
    4ece:	ff 92       	push	r15
    4ed0:	0f 93       	push	r16
    4ed2:	1f 93       	push	r17
    4ed4:	cf 93       	push	r28
    4ed6:	df 93       	push	r29
    4ed8:	cd b7       	in	r28, 0x3d	; 61
    4eda:	de b7       	in	r29, 0x3e	; 62
    4edc:	6d 97       	sbiw	r28, 0x1d	; 29
    4ede:	cd bf       	out	0x3d, r28	; 61
    4ee0:	de bf       	out	0x3e, r29	; 62
    4ee2:	6c 01       	movw	r12, r24
    4ee4:	cb 01       	movw	r24, r22
    4ee6:	b4 2e       	mov	r11, r20
    4ee8:	d6 01       	movw	r26, r12
    4eea:	1d 92       	st	X+, r1
    4eec:	1c 92       	st	X, r1
    4eee:	53 de       	rcall	.-858    	; 0x4b96 <get_ldnumber>
    4ef0:	7c 01       	movw	r14, r24
    4ef2:	97 fd       	sbrc	r25, 7
    4ef4:	23 c2       	rjmp	.+1094   	; 0x533c <find_volume+0x488>
    4ef6:	fc 01       	movw	r30, r24
    4ef8:	ee 0f       	add	r30, r30
    4efa:	ff 1f       	adc	r31, r31
    4efc:	e1 5e       	subi	r30, 0xE1	; 225
    4efe:	f4 4d       	sbci	r31, 0xD4	; 212
    4f00:	00 81       	ld	r16, Z
    4f02:	11 81       	ldd	r17, Z+1	; 0x01
    4f04:	01 15       	cp	r16, r1
    4f06:	11 05       	cpc	r17, r1
    4f08:	09 f4       	brne	.+2      	; 0x4f0c <find_volume+0x58>
    4f0a:	1a c2       	rjmp	.+1076   	; 0x5340 <find_volume+0x48c>
    4f0c:	f6 01       	movw	r30, r12
    4f0e:	00 83       	st	Z, r16
    4f10:	11 83       	std	Z+1, r17	; 0x01
    4f12:	d8 01       	movw	r26, r16
    4f14:	8c 91       	ld	r24, X
    4f16:	88 23       	and	r24, r24
    4f18:	61 f0       	breq	.+24     	; 0x4f32 <find_volume+0x7e>
    4f1a:	11 96       	adiw	r26, 0x01	; 1
    4f1c:	8c 91       	ld	r24, X
    4f1e:	0e 94 b8 36 	call	0x6d70	; 0x6d70 <disk_status>
    4f22:	80 fd       	sbrc	r24, 0
    4f24:	06 c0       	rjmp	.+12     	; 0x4f32 <find_volume+0x7e>
    4f26:	bb 20       	and	r11, r11
    4f28:	09 f4       	brne	.+2      	; 0x4f2c <find_volume+0x78>
    4f2a:	0c c2       	rjmp	.+1048   	; 0x5344 <find_volume+0x490>
    4f2c:	82 fd       	sbrc	r24, 2
    4f2e:	0e c2       	rjmp	.+1052   	; 0x534c <find_volume+0x498>
    4f30:	09 c2       	rjmp	.+1042   	; 0x5344 <find_volume+0x490>
    4f32:	f8 01       	movw	r30, r16
    4f34:	10 82       	st	Z, r1
    4f36:	e1 82       	std	Z+1, r14	; 0x01
    4f38:	8e 2d       	mov	r24, r14
    4f3a:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <disk_initialize>
    4f3e:	80 fd       	sbrc	r24, 0
    4f40:	03 c2       	rjmp	.+1030   	; 0x5348 <find_volume+0x494>
    4f42:	bb 20       	and	r11, r11
    4f44:	11 f0       	breq	.+4      	; 0x4f4a <find_volume+0x96>
    4f46:	82 fd       	sbrc	r24, 2
    4f48:	01 c2       	rjmp	.+1026   	; 0x534c <find_volume+0x498>
    4f4a:	40 e0       	ldi	r20, 0x00	; 0
    4f4c:	50 e0       	ldi	r21, 0x00	; 0
    4f4e:	ba 01       	movw	r22, r20
    4f50:	c8 01       	movw	r24, r16
    4f52:	74 df       	rcall	.-280    	; 0x4e3c <check_fs>
    4f54:	81 30       	cpi	r24, 0x01	; 1
    4f56:	09 f0       	breq	.+2      	; 0x4f5a <find_volume+0xa6>
    4f58:	3f c0       	rjmp	.+126    	; 0x4fd8 <find_volume+0x124>
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	31 96       	adiw	r30, 0x01	; 1
    4f5e:	20 e0       	ldi	r18, 0x00	; 0
    4f60:	30 e0       	ldi	r19, 0x00	; 0
    4f62:	c8 01       	movw	r24, r16
    4f64:	82 0f       	add	r24, r18
    4f66:	93 1f       	adc	r25, r19
    4f68:	dc 01       	movw	r26, r24
    4f6a:	ac 50       	subi	r26, 0x0C	; 12
    4f6c:	be 4f       	sbci	r27, 0xFE	; 254
    4f6e:	4c 91       	ld	r20, X
    4f70:	44 23       	and	r20, r20
    4f72:	39 f0       	breq	.+14     	; 0x4f82 <find_volume+0xce>
    4f74:	14 96       	adiw	r26, 0x04	; 4
    4f76:	8d 91       	ld	r24, X+
    4f78:	9d 91       	ld	r25, X+
    4f7a:	0d 90       	ld	r0, X+
    4f7c:	bc 91       	ld	r27, X
    4f7e:	a0 2d       	mov	r26, r0
    4f80:	03 c0       	rjmp	.+6      	; 0x4f88 <find_volume+0xd4>
    4f82:	80 e0       	ldi	r24, 0x00	; 0
    4f84:	90 e0       	ldi	r25, 0x00	; 0
    4f86:	dc 01       	movw	r26, r24
    4f88:	81 93       	st	Z+, r24
    4f8a:	91 93       	st	Z+, r25
    4f8c:	a1 93       	st	Z+, r26
    4f8e:	b1 93       	st	Z+, r27
    4f90:	20 5f       	subi	r18, 0xF0	; 240
    4f92:	3f 4f       	sbci	r19, 0xFF	; 255
    4f94:	20 34       	cpi	r18, 0x40	; 64
    4f96:	31 05       	cpc	r19, r1
    4f98:	21 f7       	brne	.-56     	; 0x4f62 <find_volume+0xae>
    4f9a:	6e 01       	movw	r12, r28
    4f9c:	f1 e1       	ldi	r31, 0x11	; 17
    4f9e:	cf 0e       	add	r12, r31
    4fa0:	d1 1c       	adc	r13, r1
    4fa2:	9e 01       	movw	r18, r28
    4fa4:	2f 5f       	subi	r18, 0xFF	; 255
    4fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    4fa8:	79 01       	movw	r14, r18
    4faa:	d7 01       	movw	r26, r14
    4fac:	4d 90       	ld	r4, X+
    4fae:	5d 90       	ld	r5, X+
    4fb0:	6d 90       	ld	r6, X+
    4fb2:	7d 90       	ld	r7, X+
    4fb4:	7d 01       	movw	r14, r26
    4fb6:	41 14       	cp	r4, r1
    4fb8:	51 04       	cpc	r5, r1
    4fba:	61 04       	cpc	r6, r1
    4fbc:	71 04       	cpc	r7, r1
    4fbe:	39 f0       	breq	.+14     	; 0x4fce <find_volume+0x11a>
    4fc0:	b3 01       	movw	r22, r6
    4fc2:	a2 01       	movw	r20, r4
    4fc4:	c8 01       	movw	r24, r16
    4fc6:	3a df       	rcall	.-396    	; 0x4e3c <check_fs>
    4fc8:	81 11       	cpse	r24, r1
    4fca:	02 c0       	rjmp	.+4      	; 0x4fd0 <find_volume+0x11c>
    4fcc:	0f c0       	rjmp	.+30     	; 0x4fec <find_volume+0x138>
    4fce:	82 e0       	ldi	r24, 0x02	; 2
    4fd0:	ec 14       	cp	r14, r12
    4fd2:	fd 04       	cpc	r15, r13
    4fd4:	51 f7       	brne	.-44     	; 0x4faa <find_volume+0xf6>
    4fd6:	03 c0       	rjmp	.+6      	; 0x4fde <find_volume+0x12a>
    4fd8:	41 2c       	mov	r4, r1
    4fda:	51 2c       	mov	r5, r1
    4fdc:	32 01       	movw	r6, r4
    4fde:	83 30       	cpi	r24, 0x03	; 3
    4fe0:	09 f4       	brne	.+2      	; 0x4fe4 <find_volume+0x130>
    4fe2:	b6 c1       	rjmp	.+876    	; 0x5350 <find_volume+0x49c>
    4fe4:	88 23       	and	r24, r24
    4fe6:	11 f0       	breq	.+4      	; 0x4fec <find_volume+0x138>
    4fe8:	8d e0       	ldi	r24, 0x0D	; 13
    4fea:	b3 c1       	rjmp	.+870    	; 0x5352 <find_volume+0x49e>
    4fec:	f8 01       	movw	r30, r16
    4fee:	85 ad       	ldd	r24, Z+61	; 0x3d
    4ff0:	96 ad       	ldd	r25, Z+62	; 0x3e
    4ff2:	81 15       	cp	r24, r1
    4ff4:	92 40       	sbci	r25, 0x02	; 2
    4ff6:	c1 f7       	brne	.-16     	; 0x4fe8 <find_volume+0x134>
    4ff8:	f8 01       	movw	r30, r16
    4ffa:	e8 5b       	subi	r30, 0xB8	; 184
    4ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffe:	c0 80       	ld	r12, Z
    5000:	d1 80       	ldd	r13, Z+1	; 0x01
    5002:	e1 2c       	mov	r14, r1
    5004:	f1 2c       	mov	r15, r1
    5006:	c1 14       	cp	r12, r1
    5008:	d1 04       	cpc	r13, r1
    500a:	e1 04       	cpc	r14, r1
    500c:	f1 04       	cpc	r15, r1
    500e:	29 f4       	brne	.+10     	; 0x501a <find_volume+0x166>
    5010:	3e 96       	adiw	r30, 0x0e	; 14
    5012:	c0 80       	ld	r12, Z
    5014:	d1 80       	ldd	r13, Z+1	; 0x01
    5016:	e2 80       	ldd	r14, Z+2	; 0x02
    5018:	f3 80       	ldd	r15, Z+3	; 0x03
    501a:	d8 01       	movw	r26, r16
    501c:	5a 96       	adiw	r26, 0x1a	; 26
    501e:	cd 92       	st	X+, r12
    5020:	dd 92       	st	X+, r13
    5022:	ed 92       	st	X+, r14
    5024:	fc 92       	st	X, r15
    5026:	5d 97       	sbiw	r26, 0x1d	; 29
    5028:	f8 01       	movw	r30, r16
    502a:	ee 5b       	subi	r30, 0xBE	; 190
    502c:	ff 4f       	sbci	r31, 0xFF	; 255
    502e:	a0 81       	ld	r26, Z
    5030:	f8 01       	movw	r30, r16
    5032:	a3 83       	std	Z+3, r26	; 0x03
    5034:	8f ef       	ldi	r24, 0xFF	; 255
    5036:	8a 0f       	add	r24, r26
    5038:	82 30       	cpi	r24, 0x02	; 2
    503a:	b0 f6       	brcc	.-84     	; 0x4fe8 <find_volume+0x134>
    503c:	f7 ad       	ldd	r31, Z+63	; 0x3f
    503e:	f9 8b       	std	Y+17, r31	; 0x11
    5040:	2f 2f       	mov	r18, r31
    5042:	f8 01       	movw	r30, r16
    5044:	22 83       	std	Z+2, r18	; 0x02
    5046:	22 23       	and	r18, r18
    5048:	79 f2       	breq	.-98     	; 0x4fe8 <find_volume+0x134>
    504a:	30 e0       	ldi	r19, 0x00	; 0
    504c:	c9 01       	movw	r24, r18
    504e:	01 97       	sbiw	r24, 0x01	; 1
    5050:	82 23       	and	r24, r18
    5052:	93 23       	and	r25, r19
    5054:	89 2b       	or	r24, r25
    5056:	41 f6       	brne	.-112    	; 0x4fe8 <find_volume+0x134>
    5058:	f8 01       	movw	r30, r16
    505a:	ed 5b       	subi	r30, 0xBD	; 189
    505c:	ff 4f       	sbci	r31, 0xFF	; 255
    505e:	20 80       	ld	r2, Z
    5060:	31 80       	ldd	r3, Z+1	; 0x01
    5062:	f8 01       	movw	r30, r16
    5064:	20 86       	std	Z+8, r2	; 0x08
    5066:	31 86       	std	Z+9, r3	; 0x09
    5068:	c1 01       	movw	r24, r2
    506a:	8f 70       	andi	r24, 0x0F	; 15
    506c:	99 27       	eor	r25, r25
    506e:	89 2b       	or	r24, r25
    5070:	09 f0       	breq	.+2      	; 0x5074 <find_volume+0x1c0>
    5072:	ba cf       	rjmp	.-140    	; 0x4fe8 <find_volume+0x134>
    5074:	eb 5b       	subi	r30, 0xBB	; 187
    5076:	ff 4f       	sbci	r31, 0xFF	; 255
    5078:	80 80       	ld	r8, Z
    507a:	91 80       	ldd	r9, Z+1	; 0x01
    507c:	a1 2c       	mov	r10, r1
    507e:	b1 2c       	mov	r11, r1
    5080:	81 14       	cp	r8, r1
    5082:	91 04       	cpc	r9, r1
    5084:	a1 04       	cpc	r10, r1
    5086:	b1 04       	cpc	r11, r1
    5088:	29 f4       	brne	.+10     	; 0x5094 <find_volume+0x1e0>
    508a:	3d 96       	adiw	r30, 0x0d	; 13
    508c:	80 80       	ld	r8, Z
    508e:	91 80       	ldd	r9, Z+1	; 0x01
    5090:	a2 80       	ldd	r10, Z+2	; 0x02
    5092:	b3 80       	ldd	r11, Z+3	; 0x03
    5094:	f8 01       	movw	r30, r16
    5096:	e0 5c       	subi	r30, 0xC0	; 192
    5098:	ff 4f       	sbci	r31, 0xFF	; 255
    509a:	01 90       	ld	r0, Z+
    509c:	f0 81       	ld	r31, Z
    509e:	e0 2d       	mov	r30, r0
    50a0:	30 97       	sbiw	r30, 0x00	; 0
    50a2:	09 f4       	brne	.+2      	; 0x50a6 <find_volume+0x1f2>
    50a4:	a1 cf       	rjmp	.-190    	; 0x4fe8 <find_volume+0x134>
    50a6:	b0 e0       	ldi	r27, 0x00	; 0
    50a8:	a7 01       	movw	r20, r14
    50aa:	96 01       	movw	r18, r12
    50ac:	0e 94 5f 51 	call	0xa2be	; 0xa2be <__muluhisi3>
    50b0:	6e 8b       	std	Y+22, r22	; 0x16
    50b2:	7f 8b       	std	Y+23, r23	; 0x17
    50b4:	88 8f       	std	Y+24, r24	; 0x18
    50b6:	99 8f       	std	Y+25, r25	; 0x19
    50b8:	9f 01       	movw	r18, r30
    50ba:	40 e0       	ldi	r20, 0x00	; 0
    50bc:	50 e0       	ldi	r21, 0x00	; 0
    50be:	2a 8f       	std	Y+26, r18	; 0x1a
    50c0:	3b 8f       	std	Y+27, r19	; 0x1b
    50c2:	4c 8f       	std	Y+28, r20	; 0x1c
    50c4:	5d 8f       	std	Y+29, r21	; 0x1d
    50c6:	c1 01       	movw	r24, r2
    50c8:	64 e0       	ldi	r22, 0x04	; 4
    50ca:	96 95       	lsr	r25
    50cc:	87 95       	ror	r24
    50ce:	6a 95       	dec	r22
    50d0:	e1 f7       	brne	.-8      	; 0x50ca <find_volume+0x216>
    50d2:	28 0f       	add	r18, r24
    50d4:	39 1f       	adc	r19, r25
    50d6:	41 1d       	adc	r20, r1
    50d8:	51 1d       	adc	r21, r1
    50da:	8e 89       	ldd	r24, Y+22	; 0x16
    50dc:	9f 89       	ldd	r25, Y+23	; 0x17
    50de:	a8 8d       	ldd	r26, Y+24	; 0x18
    50e0:	b9 8d       	ldd	r27, Y+25	; 0x19
    50e2:	28 0f       	add	r18, r24
    50e4:	39 1f       	adc	r19, r25
    50e6:	4a 1f       	adc	r20, r26
    50e8:	5b 1f       	adc	r21, r27
    50ea:	2a 8b       	std	Y+18, r18	; 0x12
    50ec:	3b 8b       	std	Y+19, r19	; 0x13
    50ee:	4c 8b       	std	Y+20, r20	; 0x14
    50f0:	5d 8b       	std	Y+21, r21	; 0x15
    50f2:	82 16       	cp	r8, r18
    50f4:	93 06       	cpc	r9, r19
    50f6:	a4 06       	cpc	r10, r20
    50f8:	b5 06       	cpc	r11, r21
    50fa:	08 f4       	brcc	.+2      	; 0x50fe <find_volume+0x24a>
    50fc:	75 cf       	rjmp	.-278    	; 0x4fe8 <find_volume+0x134>
    50fe:	c5 01       	movw	r24, r10
    5100:	b4 01       	movw	r22, r8
    5102:	62 1b       	sub	r22, r18
    5104:	73 0b       	sbc	r23, r19
    5106:	84 0b       	sbc	r24, r20
    5108:	95 0b       	sbc	r25, r21
    510a:	e9 89       	ldd	r30, Y+17	; 0x11
    510c:	2e 2f       	mov	r18, r30
    510e:	30 e0       	ldi	r19, 0x00	; 0
    5110:	40 e0       	ldi	r20, 0x00	; 0
    5112:	50 e0       	ldi	r21, 0x00	; 0
    5114:	0e 94 28 51 	call	0xa250	; 0xa250 <__udivmodsi4>
    5118:	21 15       	cp	r18, r1
    511a:	31 05       	cpc	r19, r1
    511c:	41 05       	cpc	r20, r1
    511e:	51 05       	cpc	r21, r1
    5120:	09 f4       	brne	.+2      	; 0x5124 <find_volume+0x270>
    5122:	62 cf       	rjmp	.-316    	; 0x4fe8 <find_volume+0x134>
    5124:	26 3f       	cpi	r18, 0xF6	; 246
    5126:	ff e0       	ldi	r31, 0x0F	; 15
    5128:	3f 07       	cpc	r19, r31
    512a:	41 05       	cpc	r20, r1
    512c:	51 05       	cpc	r21, r1
    512e:	48 f0       	brcs	.+18     	; 0x5142 <find_volume+0x28e>
    5130:	26 3f       	cpi	r18, 0xF6	; 246
    5132:	8f ef       	ldi	r24, 0xFF	; 255
    5134:	38 07       	cpc	r19, r24
    5136:	41 05       	cpc	r20, r1
    5138:	51 05       	cpc	r21, r1
    513a:	30 f4       	brcc	.+12     	; 0x5148 <find_volume+0x294>
    513c:	92 e0       	ldi	r25, 0x02	; 2
    513e:	99 8b       	std	Y+17, r25	; 0x11
    5140:	05 c0       	rjmp	.+10     	; 0x514c <find_volume+0x298>
    5142:	a1 e0       	ldi	r26, 0x01	; 1
    5144:	a9 8b       	std	Y+17, r26	; 0x11
    5146:	02 c0       	rjmp	.+4      	; 0x514c <find_volume+0x298>
    5148:	b3 e0       	ldi	r27, 0x03	; 3
    514a:	b9 8b       	std	Y+17, r27	; 0x11
    514c:	49 01       	movw	r8, r18
    514e:	5a 01       	movw	r10, r20
    5150:	e2 e0       	ldi	r30, 0x02	; 2
    5152:	8e 0e       	add	r8, r30
    5154:	91 1c       	adc	r9, r1
    5156:	a1 1c       	adc	r10, r1
    5158:	b1 1c       	adc	r11, r1
    515a:	d8 01       	movw	r26, r16
    515c:	56 96       	adiw	r26, 0x16	; 22
    515e:	8d 92       	st	X+, r8
    5160:	9d 92       	st	X+, r9
    5162:	ad 92       	st	X+, r10
    5164:	bc 92       	st	X, r11
    5166:	59 97       	sbiw	r26, 0x19	; 25
    5168:	f8 01       	movw	r30, r16
    516a:	46 8e       	std	Z+30, r4	; 0x1e
    516c:	57 8e       	std	Z+31, r5	; 0x1f
    516e:	60 a2       	std	Z+32, r6	; 0x20
    5170:	71 a2       	std	Z+33, r7	; 0x21
    5172:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5174:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5176:	ac 8d       	ldd	r26, Y+28	; 0x1c
    5178:	bd 8d       	ldd	r27, Y+29	; 0x1d
    517a:	84 0d       	add	r24, r4
    517c:	95 1d       	adc	r25, r5
    517e:	a6 1d       	adc	r26, r6
    5180:	b7 1d       	adc	r27, r7
    5182:	82 a3       	std	Z+34, r24	; 0x22
    5184:	93 a3       	std	Z+35, r25	; 0x23
    5186:	a4 a3       	std	Z+36, r26	; 0x24
    5188:	b5 a3       	std	Z+37, r27	; 0x25
    518a:	4a 89       	ldd	r20, Y+18	; 0x12
    518c:	5b 89       	ldd	r21, Y+19	; 0x13
    518e:	6c 89       	ldd	r22, Y+20	; 0x14
    5190:	7d 89       	ldd	r23, Y+21	; 0x15
    5192:	44 0d       	add	r20, r4
    5194:	55 1d       	adc	r21, r5
    5196:	66 1d       	adc	r22, r6
    5198:	77 1d       	adc	r23, r7
    519a:	42 a7       	std	Z+42, r20	; 0x2a
    519c:	53 a7       	std	Z+43, r21	; 0x2b
    519e:	64 a7       	std	Z+44, r22	; 0x2c
    51a0:	75 a7       	std	Z+45, r23	; 0x2d
    51a2:	f9 89       	ldd	r31, Y+17	; 0x11
    51a4:	f3 30       	cpi	r31, 0x03	; 3
    51a6:	c9 f4       	brne	.+50     	; 0x51da <find_volume+0x326>
    51a8:	23 28       	or	r2, r3
    51aa:	09 f0       	breq	.+2      	; 0x51ae <find_volume+0x2fa>
    51ac:	1d cf       	rjmp	.-454    	; 0x4fe8 <find_volume+0x134>
    51ae:	f8 01       	movw	r30, r16
    51b0:	e2 5a       	subi	r30, 0xA2	; 162
    51b2:	ff 4f       	sbci	r31, 0xFF	; 255
    51b4:	80 81       	ld	r24, Z
    51b6:	91 81       	ldd	r25, Z+1	; 0x01
    51b8:	a2 81       	ldd	r26, Z+2	; 0x02
    51ba:	b3 81       	ldd	r27, Z+3	; 0x03
    51bc:	f8 01       	movw	r30, r16
    51be:	86 a3       	std	Z+38, r24	; 0x26
    51c0:	97 a3       	std	Z+39, r25	; 0x27
    51c2:	a0 a7       	std	Z+40, r26	; 0x28
    51c4:	b1 a7       	std	Z+41, r27	; 0x29
    51c6:	c5 01       	movw	r24, r10
    51c8:	b4 01       	movw	r22, r8
    51ca:	52 e0       	ldi	r21, 0x02	; 2
    51cc:	66 0f       	add	r22, r22
    51ce:	77 1f       	adc	r23, r23
    51d0:	88 1f       	adc	r24, r24
    51d2:	99 1f       	adc	r25, r25
    51d4:	5a 95       	dec	r21
    51d6:	d1 f7       	brne	.-12     	; 0x51cc <find_volume+0x318>
    51d8:	2d c0       	rjmp	.+90     	; 0x5234 <find_volume+0x380>
    51da:	23 28       	or	r2, r3
    51dc:	09 f4       	brne	.+2      	; 0x51e0 <find_volume+0x32c>
    51de:	04 cf       	rjmp	.-504    	; 0x4fe8 <find_volume+0x134>
    51e0:	2e 89       	ldd	r18, Y+22	; 0x16
    51e2:	3f 89       	ldd	r19, Y+23	; 0x17
    51e4:	48 8d       	ldd	r20, Y+24	; 0x18
    51e6:	59 8d       	ldd	r21, Y+25	; 0x19
    51e8:	82 0f       	add	r24, r18
    51ea:	93 1f       	adc	r25, r19
    51ec:	a4 1f       	adc	r26, r20
    51ee:	b5 1f       	adc	r27, r21
    51f0:	f8 01       	movw	r30, r16
    51f2:	86 a3       	std	Z+38, r24	; 0x26
    51f4:	97 a3       	std	Z+39, r25	; 0x27
    51f6:	a0 a7       	std	Z+40, r26	; 0x28
    51f8:	b1 a7       	std	Z+41, r27	; 0x29
    51fa:	f9 89       	ldd	r31, Y+17	; 0x11
    51fc:	f2 30       	cpi	r31, 0x02	; 2
    51fe:	39 f4       	brne	.+14     	; 0x520e <find_volume+0x35a>
    5200:	c5 01       	movw	r24, r10
    5202:	b4 01       	movw	r22, r8
    5204:	66 0f       	add	r22, r22
    5206:	77 1f       	adc	r23, r23
    5208:	88 1f       	adc	r24, r24
    520a:	99 1f       	adc	r25, r25
    520c:	13 c0       	rjmp	.+38     	; 0x5234 <find_volume+0x380>
    520e:	a3 e0       	ldi	r26, 0x03	; 3
    5210:	b0 e0       	ldi	r27, 0x00	; 0
    5212:	a5 01       	movw	r20, r10
    5214:	94 01       	movw	r18, r8
    5216:	0e 94 5f 51 	call	0xa2be	; 0xa2be <__muluhisi3>
    521a:	96 95       	lsr	r25
    521c:	87 95       	ror	r24
    521e:	77 95       	ror	r23
    5220:	67 95       	ror	r22
    5222:	21 e0       	ldi	r18, 0x01	; 1
    5224:	82 22       	and	r8, r18
    5226:	99 24       	eor	r9, r9
    5228:	aa 24       	eor	r10, r10
    522a:	bb 24       	eor	r11, r11
    522c:	68 0d       	add	r22, r8
    522e:	79 1d       	adc	r23, r9
    5230:	8a 1d       	adc	r24, r10
    5232:	9b 1d       	adc	r25, r11
    5234:	dc 01       	movw	r26, r24
    5236:	cb 01       	movw	r24, r22
    5238:	81 50       	subi	r24, 0x01	; 1
    523a:	9e 4f       	sbci	r25, 0xFE	; 254
    523c:	af 4f       	sbci	r26, 0xFF	; 255
    523e:	bf 4f       	sbci	r27, 0xFF	; 255
    5240:	29 e0       	ldi	r18, 0x09	; 9
    5242:	b6 95       	lsr	r27
    5244:	a7 95       	ror	r26
    5246:	97 95       	ror	r25
    5248:	87 95       	ror	r24
    524a:	2a 95       	dec	r18
    524c:	d1 f7       	brne	.-12     	; 0x5242 <find_volume+0x38e>
    524e:	c8 16       	cp	r12, r24
    5250:	d9 06       	cpc	r13, r25
    5252:	ea 06       	cpc	r14, r26
    5254:	fb 06       	cpc	r15, r27
    5256:	08 f4       	brcc	.+2      	; 0x525a <find_volume+0x3a6>
    5258:	c7 ce       	rjmp	.-626    	; 0x4fe8 <find_volume+0x134>
    525a:	8f ef       	ldi	r24, 0xFF	; 255
    525c:	9f ef       	ldi	r25, 0xFF	; 255
    525e:	dc 01       	movw	r26, r24
    5260:	f8 01       	movw	r30, r16
    5262:	86 87       	std	Z+14, r24	; 0x0e
    5264:	97 87       	std	Z+15, r25	; 0x0f
    5266:	a0 8b       	std	Z+16, r26	; 0x10
    5268:	b1 8b       	std	Z+17, r27	; 0x11
    526a:	82 87       	std	Z+10, r24	; 0x0a
    526c:	93 87       	std	Z+11, r25	; 0x0b
    526e:	a4 87       	std	Z+12, r26	; 0x0c
    5270:	b5 87       	std	Z+13, r27	; 0x0d
    5272:	80 e8       	ldi	r24, 0x80	; 128
    5274:	85 83       	std	Z+5, r24	; 0x05
    5276:	f9 89       	ldd	r31, Y+17	; 0x11
    5278:	f3 30       	cpi	r31, 0x03	; 3
    527a:	09 f0       	breq	.+2      	; 0x527e <find_volume+0x3ca>
    527c:	48 c0       	rjmp	.+144    	; 0x530e <find_volume+0x45a>
    527e:	f8 01       	movw	r30, r16
    5280:	ee 59       	subi	r30, 0x9E	; 158
    5282:	ff 4f       	sbci	r31, 0xFF	; 255
    5284:	80 81       	ld	r24, Z
    5286:	91 81       	ldd	r25, Z+1	; 0x01
    5288:	01 97       	sbiw	r24, 0x01	; 1
    528a:	09 f0       	breq	.+2      	; 0x528e <find_volume+0x3da>
    528c:	40 c0       	rjmp	.+128    	; 0x530e <find_volume+0x45a>
    528e:	b3 01       	movw	r22, r6
    5290:	a2 01       	movw	r20, r4
    5292:	4f 5f       	subi	r20, 0xFF	; 255
    5294:	5f 4f       	sbci	r21, 0xFF	; 255
    5296:	6f 4f       	sbci	r22, 0xFF	; 255
    5298:	7f 4f       	sbci	r23, 0xFF	; 255
    529a:	c8 01       	movw	r24, r16
    529c:	92 dd       	rcall	.-1244   	; 0x4dc2 <move_window>
    529e:	81 11       	cpse	r24, r1
    52a0:	36 c0       	rjmp	.+108    	; 0x530e <find_volume+0x45a>
    52a2:	d8 01       	movw	r26, r16
    52a4:	15 96       	adiw	r26, 0x05	; 5
    52a6:	1c 92       	st	X, r1
    52a8:	f8 01       	movw	r30, r16
    52aa:	e0 5d       	subi	r30, 0xD0	; 208
    52ac:	fd 4f       	sbci	r31, 0xFD	; 253
    52ae:	80 81       	ld	r24, Z
    52b0:	91 81       	ldd	r25, Z+1	; 0x01
    52b2:	85 35       	cpi	r24, 0x55	; 85
    52b4:	9a 4a       	sbci	r25, 0xAA	; 170
    52b6:	59 f5       	brne	.+86     	; 0x530e <find_volume+0x45a>
    52b8:	f8 01       	movw	r30, r16
    52ba:	82 a9       	ldd	r24, Z+50	; 0x32
    52bc:	93 a9       	ldd	r25, Z+51	; 0x33
    52be:	a4 a9       	ldd	r26, Z+52	; 0x34
    52c0:	b5 a9       	ldd	r27, Z+53	; 0x35
    52c2:	82 35       	cpi	r24, 0x52	; 82
    52c4:	92 45       	sbci	r25, 0x52	; 82
    52c6:	a1 46       	sbci	r26, 0x61	; 97
    52c8:	b1 44       	sbci	r27, 0x41	; 65
    52ca:	09 f5       	brne	.+66     	; 0x530e <find_volume+0x45a>
    52cc:	f8 01       	movw	r30, r16
    52ce:	ea 5e       	subi	r30, 0xEA	; 234
    52d0:	fd 4f       	sbci	r31, 0xFD	; 253
    52d2:	80 81       	ld	r24, Z
    52d4:	91 81       	ldd	r25, Z+1	; 0x01
    52d6:	a2 81       	ldd	r26, Z+2	; 0x02
    52d8:	b3 81       	ldd	r27, Z+3	; 0x03
    52da:	82 37       	cpi	r24, 0x72	; 114
    52dc:	92 47       	sbci	r25, 0x72	; 114
    52de:	a1 44       	sbci	r26, 0x41	; 65
    52e0:	b1 46       	sbci	r27, 0x61	; 97
    52e2:	a9 f4       	brne	.+42     	; 0x530e <find_volume+0x45a>
    52e4:	34 96       	adiw	r30, 0x04	; 4
    52e6:	80 81       	ld	r24, Z
    52e8:	91 81       	ldd	r25, Z+1	; 0x01
    52ea:	a2 81       	ldd	r26, Z+2	; 0x02
    52ec:	b3 81       	ldd	r27, Z+3	; 0x03
    52ee:	f8 01       	movw	r30, r16
    52f0:	86 87       	std	Z+14, r24	; 0x0e
    52f2:	97 87       	std	Z+15, r25	; 0x0f
    52f4:	a0 8b       	std	Z+16, r26	; 0x10
    52f6:	b1 8b       	std	Z+17, r27	; 0x11
    52f8:	e2 5e       	subi	r30, 0xE2	; 226
    52fa:	fd 4f       	sbci	r31, 0xFD	; 253
    52fc:	80 81       	ld	r24, Z
    52fe:	91 81       	ldd	r25, Z+1	; 0x01
    5300:	a2 81       	ldd	r26, Z+2	; 0x02
    5302:	b3 81       	ldd	r27, Z+3	; 0x03
    5304:	f8 01       	movw	r30, r16
    5306:	82 87       	std	Z+10, r24	; 0x0a
    5308:	93 87       	std	Z+11, r25	; 0x0b
    530a:	a4 87       	std	Z+12, r26	; 0x0c
    530c:	b5 87       	std	Z+13, r27	; 0x0d
    530e:	e9 89       	ldd	r30, Y+17	; 0x11
    5310:	d8 01       	movw	r26, r16
    5312:	ec 93       	st	X, r30
    5314:	80 91 1d 2b 	lds	r24, 0x2B1D
    5318:	90 91 1e 2b 	lds	r25, 0x2B1E
    531c:	01 96       	adiw	r24, 0x01	; 1
    531e:	80 93 1d 2b 	sts	0x2B1D, r24
    5322:	90 93 1e 2b 	sts	0x2B1E, r25
    5326:	16 96       	adiw	r26, 0x06	; 6
    5328:	8d 93       	st	X+, r24
    532a:	9c 93       	st	X, r25
    532c:	17 97       	sbiw	r26, 0x07	; 7
    532e:	52 96       	adiw	r26, 0x12	; 18
    5330:	1d 92       	st	X+, r1
    5332:	1d 92       	st	X+, r1
    5334:	1d 92       	st	X+, r1
    5336:	1c 92       	st	X, r1
    5338:	55 97       	sbiw	r26, 0x15	; 21
    533a:	04 c0       	rjmp	.+8      	; 0x5344 <find_volume+0x490>
    533c:	8b e0       	ldi	r24, 0x0B	; 11
    533e:	09 c0       	rjmp	.+18     	; 0x5352 <find_volume+0x49e>
    5340:	8c e0       	ldi	r24, 0x0C	; 12
    5342:	07 c0       	rjmp	.+14     	; 0x5352 <find_volume+0x49e>
    5344:	80 e0       	ldi	r24, 0x00	; 0
    5346:	05 c0       	rjmp	.+10     	; 0x5352 <find_volume+0x49e>
    5348:	83 e0       	ldi	r24, 0x03	; 3
    534a:	03 c0       	rjmp	.+6      	; 0x5352 <find_volume+0x49e>
    534c:	8a e0       	ldi	r24, 0x0A	; 10
    534e:	01 c0       	rjmp	.+2      	; 0x5352 <find_volume+0x49e>
    5350:	81 e0       	ldi	r24, 0x01	; 1
    5352:	6d 96       	adiw	r28, 0x1d	; 29
    5354:	cd bf       	out	0x3d, r28	; 61
    5356:	de bf       	out	0x3e, r29	; 62
    5358:	df 91       	pop	r29
    535a:	cf 91       	pop	r28
    535c:	1f 91       	pop	r17
    535e:	0f 91       	pop	r16
    5360:	ff 90       	pop	r15
    5362:	ef 90       	pop	r14
    5364:	df 90       	pop	r13
    5366:	cf 90       	pop	r12
    5368:	bf 90       	pop	r11
    536a:	af 90       	pop	r10
    536c:	9f 90       	pop	r9
    536e:	8f 90       	pop	r8
    5370:	7f 90       	pop	r7
    5372:	6f 90       	pop	r6
    5374:	5f 90       	pop	r5
    5376:	4f 90       	pop	r4
    5378:	3f 90       	pop	r3
    537a:	2f 90       	pop	r2
    537c:	08 95       	ret

0000537e <clust2sect>:
    537e:	0f 93       	push	r16
    5380:	1f 93       	push	r17
    5382:	fc 01       	movw	r30, r24
    5384:	42 50       	subi	r20, 0x02	; 2
    5386:	51 09       	sbc	r21, r1
    5388:	61 09       	sbc	r22, r1
    538a:	71 09       	sbc	r23, r1
    538c:	06 89       	ldd	r16, Z+22	; 0x16
    538e:	17 89       	ldd	r17, Z+23	; 0x17
    5390:	20 8d       	ldd	r18, Z+24	; 0x18
    5392:	31 8d       	ldd	r19, Z+25	; 0x19
    5394:	02 50       	subi	r16, 0x02	; 2
    5396:	11 09       	sbc	r17, r1
    5398:	21 09       	sbc	r18, r1
    539a:	31 09       	sbc	r19, r1
    539c:	40 17       	cp	r20, r16
    539e:	51 07       	cpc	r21, r17
    53a0:	62 07       	cpc	r22, r18
    53a2:	73 07       	cpc	r23, r19
    53a4:	78 f4       	brcc	.+30     	; 0x53c4 <clust2sect+0x46>
    53a6:	a2 81       	ldd	r26, Z+2	; 0x02
    53a8:	b0 e0       	ldi	r27, 0x00	; 0
    53aa:	9a 01       	movw	r18, r20
    53ac:	ab 01       	movw	r20, r22
    53ae:	0e 94 5f 51 	call	0xa2be	; 0xa2be <__muluhisi3>
    53b2:	02 a5       	ldd	r16, Z+42	; 0x2a
    53b4:	13 a5       	ldd	r17, Z+43	; 0x2b
    53b6:	24 a5       	ldd	r18, Z+44	; 0x2c
    53b8:	35 a5       	ldd	r19, Z+45	; 0x2d
    53ba:	60 0f       	add	r22, r16
    53bc:	71 1f       	adc	r23, r17
    53be:	82 1f       	adc	r24, r18
    53c0:	93 1f       	adc	r25, r19
    53c2:	03 c0       	rjmp	.+6      	; 0x53ca <clust2sect+0x4c>
    53c4:	60 e0       	ldi	r22, 0x00	; 0
    53c6:	70 e0       	ldi	r23, 0x00	; 0
    53c8:	cb 01       	movw	r24, r22
    53ca:	1f 91       	pop	r17
    53cc:	0f 91       	pop	r16
    53ce:	08 95       	ret

000053d0 <get_fat>:
    53d0:	af 92       	push	r10
    53d2:	bf 92       	push	r11
    53d4:	cf 92       	push	r12
    53d6:	df 92       	push	r13
    53d8:	ef 92       	push	r14
    53da:	ff 92       	push	r15
    53dc:	0f 93       	push	r16
    53de:	1f 93       	push	r17
    53e0:	cf 93       	push	r28
    53e2:	df 93       	push	r29
    53e4:	ec 01       	movw	r28, r24
    53e6:	6a 01       	movw	r12, r20
    53e8:	7b 01       	movw	r14, r22
    53ea:	42 30       	cpi	r20, 0x02	; 2
    53ec:	51 05       	cpc	r21, r1
    53ee:	61 05       	cpc	r22, r1
    53f0:	71 05       	cpc	r23, r1
    53f2:	08 f4       	brcc	.+2      	; 0x53f6 <get_fat+0x26>
    53f4:	a2 c0       	rjmp	.+324    	; 0x553a <get_fat+0x16a>
    53f6:	8e 89       	ldd	r24, Y+22	; 0x16
    53f8:	9f 89       	ldd	r25, Y+23	; 0x17
    53fa:	a8 8d       	ldd	r26, Y+24	; 0x18
    53fc:	b9 8d       	ldd	r27, Y+25	; 0x19
    53fe:	48 17       	cp	r20, r24
    5400:	59 07       	cpc	r21, r25
    5402:	6a 07       	cpc	r22, r26
    5404:	7b 07       	cpc	r23, r27
    5406:	08 f0       	brcs	.+2      	; 0x540a <get_fat+0x3a>
    5408:	98 c0       	rjmp	.+304    	; 0x553a <get_fat+0x16a>
    540a:	88 81       	ld	r24, Y
    540c:	82 30       	cpi	r24, 0x02	; 2
    540e:	09 f4       	brne	.+2      	; 0x5412 <get_fat+0x42>
    5410:	49 c0       	rjmp	.+146    	; 0x54a4 <get_fat+0xd4>
    5412:	83 30       	cpi	r24, 0x03	; 3
    5414:	09 f4       	brne	.+2      	; 0x5418 <get_fat+0x48>
    5416:	68 c0       	rjmp	.+208    	; 0x54e8 <get_fat+0x118>
    5418:	81 30       	cpi	r24, 0x01	; 1
    541a:	09 f0       	breq	.+2      	; 0x541e <get_fat+0x4e>
    541c:	8e c0       	rjmp	.+284    	; 0x553a <get_fat+0x16a>
    541e:	5a 01       	movw	r10, r20
    5420:	b6 94       	lsr	r11
    5422:	a7 94       	ror	r10
    5424:	a4 0e       	add	r10, r20
    5426:	b5 1e       	adc	r11, r21
    5428:	c5 01       	movw	r24, r10
    542a:	89 2f       	mov	r24, r25
    542c:	99 27       	eor	r25, r25
    542e:	86 95       	lsr	r24
    5430:	4a a1       	ldd	r20, Y+34	; 0x22
    5432:	5b a1       	ldd	r21, Y+35	; 0x23
    5434:	6c a1       	ldd	r22, Y+36	; 0x24
    5436:	7d a1       	ldd	r23, Y+37	; 0x25
    5438:	48 0f       	add	r20, r24
    543a:	59 1f       	adc	r21, r25
    543c:	61 1d       	adc	r22, r1
    543e:	71 1d       	adc	r23, r1
    5440:	ce 01       	movw	r24, r28
    5442:	bf dc       	rcall	.-1666   	; 0x4dc2 <move_window>
    5444:	88 23       	and	r24, r24
    5446:	21 f0       	breq	.+8      	; 0x5450 <get_fat+0x80>
    5448:	6f ef       	ldi	r22, 0xFF	; 255
    544a:	7f ef       	ldi	r23, 0xFF	; 255
    544c:	cb 01       	movw	r24, r22
    544e:	79 c0       	rjmp	.+242    	; 0x5542 <get_fat+0x172>
    5450:	85 01       	movw	r16, r10
    5452:	0f 5f       	subi	r16, 0xFF	; 255
    5454:	1f 4f       	sbci	r17, 0xFF	; 255
    5456:	f5 01       	movw	r30, r10
    5458:	f1 70       	andi	r31, 0x01	; 1
    545a:	ec 0f       	add	r30, r28
    545c:	fd 1f       	adc	r31, r29
    545e:	b2 a8       	ldd	r11, Z+50	; 0x32
    5460:	c8 01       	movw	r24, r16
    5462:	89 2f       	mov	r24, r25
    5464:	99 27       	eor	r25, r25
    5466:	86 95       	lsr	r24
    5468:	4a a1       	ldd	r20, Y+34	; 0x22
    546a:	5b a1       	ldd	r21, Y+35	; 0x23
    546c:	6c a1       	ldd	r22, Y+36	; 0x24
    546e:	7d a1       	ldd	r23, Y+37	; 0x25
    5470:	48 0f       	add	r20, r24
    5472:	59 1f       	adc	r21, r25
    5474:	61 1d       	adc	r22, r1
    5476:	71 1d       	adc	r23, r1
    5478:	ce 01       	movw	r24, r28
    547a:	a3 dc       	rcall	.-1722   	; 0x4dc2 <move_window>
    547c:	81 11       	cpse	r24, r1
    547e:	e4 cf       	rjmp	.-56     	; 0x5448 <get_fat+0x78>
    5480:	f8 01       	movw	r30, r16
    5482:	f1 70       	andi	r31, 0x01	; 1
    5484:	ec 0f       	add	r30, r28
    5486:	fd 1f       	adc	r31, r29
    5488:	82 a9       	ldd	r24, Z+50	; 0x32
    548a:	6b 2d       	mov	r22, r11
    548c:	70 e0       	ldi	r23, 0x00	; 0
    548e:	78 2b       	or	r23, r24
    5490:	c0 fe       	sbrs	r12, 0
    5492:	06 c0       	rjmp	.+12     	; 0x54a0 <get_fat+0xd0>
    5494:	c4 e0       	ldi	r28, 0x04	; 4
    5496:	76 95       	lsr	r23
    5498:	67 95       	ror	r22
    549a:	ca 95       	dec	r28
    549c:	e1 f7       	brne	.-8      	; 0x5496 <get_fat+0xc6>
    549e:	21 c0       	rjmp	.+66     	; 0x54e2 <get_fat+0x112>
    54a0:	7f 70       	andi	r23, 0x0F	; 15
    54a2:	1f c0       	rjmp	.+62     	; 0x54e2 <get_fat+0x112>
    54a4:	45 2f       	mov	r20, r21
    54a6:	56 2f       	mov	r21, r22
    54a8:	67 2f       	mov	r22, r23
    54aa:	77 27       	eor	r23, r23
    54ac:	8a a1       	ldd	r24, Y+34	; 0x22
    54ae:	9b a1       	ldd	r25, Y+35	; 0x23
    54b0:	ac a1       	ldd	r26, Y+36	; 0x24
    54b2:	bd a1       	ldd	r27, Y+37	; 0x25
    54b4:	48 0f       	add	r20, r24
    54b6:	59 1f       	adc	r21, r25
    54b8:	6a 1f       	adc	r22, r26
    54ba:	7b 1f       	adc	r23, r27
    54bc:	ce 01       	movw	r24, r28
    54be:	81 dc       	rcall	.-1790   	; 0x4dc2 <move_window>
    54c0:	81 11       	cpse	r24, r1
    54c2:	c2 cf       	rjmp	.-124    	; 0x5448 <get_fat+0x78>
    54c4:	cc 0c       	add	r12, r12
    54c6:	dd 1c       	adc	r13, r13
    54c8:	ee 1c       	adc	r14, r14
    54ca:	ff 1c       	adc	r15, r15
    54cc:	e8 94       	clt
    54ce:	c0 f8       	bld	r12, 0
    54d0:	81 e0       	ldi	r24, 0x01	; 1
    54d2:	d8 22       	and	r13, r24
    54d4:	ee 24       	eor	r14, r14
    54d6:	ff 24       	eor	r15, r15
    54d8:	fe 01       	movw	r30, r28
    54da:	ec 0d       	add	r30, r12
    54dc:	fd 1d       	adc	r31, r13
    54de:	62 a9       	ldd	r22, Z+50	; 0x32
    54e0:	73 a9       	ldd	r23, Z+51	; 0x33
    54e2:	80 e0       	ldi	r24, 0x00	; 0
    54e4:	90 e0       	ldi	r25, 0x00	; 0
    54e6:	2d c0       	rjmp	.+90     	; 0x5542 <get_fat+0x172>
    54e8:	f7 e0       	ldi	r31, 0x07	; 7
    54ea:	76 95       	lsr	r23
    54ec:	67 95       	ror	r22
    54ee:	57 95       	ror	r21
    54f0:	47 95       	ror	r20
    54f2:	fa 95       	dec	r31
    54f4:	d1 f7       	brne	.-12     	; 0x54ea <get_fat+0x11a>
    54f6:	8a a1       	ldd	r24, Y+34	; 0x22
    54f8:	9b a1       	ldd	r25, Y+35	; 0x23
    54fa:	ac a1       	ldd	r26, Y+36	; 0x24
    54fc:	bd a1       	ldd	r27, Y+37	; 0x25
    54fe:	48 0f       	add	r20, r24
    5500:	59 1f       	adc	r21, r25
    5502:	6a 1f       	adc	r22, r26
    5504:	7b 1f       	adc	r23, r27
    5506:	ce 01       	movw	r24, r28
    5508:	5c dc       	rcall	.-1864   	; 0x4dc2 <move_window>
    550a:	81 11       	cpse	r24, r1
    550c:	9d cf       	rjmp	.-198    	; 0x5448 <get_fat+0x78>
    550e:	e2 e0       	ldi	r30, 0x02	; 2
    5510:	cc 0c       	add	r12, r12
    5512:	dd 1c       	adc	r13, r13
    5514:	ee 1c       	adc	r14, r14
    5516:	ff 1c       	adc	r15, r15
    5518:	ea 95       	dec	r30
    551a:	d1 f7       	brne	.-12     	; 0x5510 <get_fat+0x140>
    551c:	8c ef       	ldi	r24, 0xFC	; 252
    551e:	c8 22       	and	r12, r24
    5520:	81 e0       	ldi	r24, 0x01	; 1
    5522:	d8 22       	and	r13, r24
    5524:	ee 24       	eor	r14, r14
    5526:	ff 24       	eor	r15, r15
    5528:	fe 01       	movw	r30, r28
    552a:	ec 0d       	add	r30, r12
    552c:	fd 1d       	adc	r31, r13
    552e:	62 a9       	ldd	r22, Z+50	; 0x32
    5530:	73 a9       	ldd	r23, Z+51	; 0x33
    5532:	84 a9       	ldd	r24, Z+52	; 0x34
    5534:	95 a9       	ldd	r25, Z+53	; 0x35
    5536:	9f 70       	andi	r25, 0x0F	; 15
    5538:	04 c0       	rjmp	.+8      	; 0x5542 <get_fat+0x172>
    553a:	61 e0       	ldi	r22, 0x01	; 1
    553c:	70 e0       	ldi	r23, 0x00	; 0
    553e:	80 e0       	ldi	r24, 0x00	; 0
    5540:	90 e0       	ldi	r25, 0x00	; 0
    5542:	df 91       	pop	r29
    5544:	cf 91       	pop	r28
    5546:	1f 91       	pop	r17
    5548:	0f 91       	pop	r16
    554a:	ff 90       	pop	r15
    554c:	ef 90       	pop	r14
    554e:	df 90       	pop	r13
    5550:	cf 90       	pop	r12
    5552:	bf 90       	pop	r11
    5554:	af 90       	pop	r10
    5556:	08 95       	ret

00005558 <dir_sdi>:
    5558:	af 92       	push	r10
    555a:	bf 92       	push	r11
    555c:	cf 92       	push	r12
    555e:	df 92       	push	r13
    5560:	ef 92       	push	r14
    5562:	ff 92       	push	r15
    5564:	0f 93       	push	r16
    5566:	1f 93       	push	r17
    5568:	cf 93       	push	r28
    556a:	df 93       	push	r29
    556c:	ec 01       	movw	r28, r24
    556e:	8b 01       	movw	r16, r22
    5570:	6c 83       	std	Y+4, r22	; 0x04
    5572:	7d 83       	std	Y+5, r23	; 0x05
    5574:	ce 80       	ldd	r12, Y+6	; 0x06
    5576:	df 80       	ldd	r13, Y+7	; 0x07
    5578:	e8 84       	ldd	r14, Y+8	; 0x08
    557a:	f9 84       	ldd	r15, Y+9	; 0x09
    557c:	81 e0       	ldi	r24, 0x01	; 1
    557e:	c8 16       	cp	r12, r24
    5580:	d1 04       	cpc	r13, r1
    5582:	e1 04       	cpc	r14, r1
    5584:	f1 04       	cpc	r15, r1
    5586:	11 f4       	brne	.+4      	; 0x558c <dir_sdi+0x34>
    5588:	82 e0       	ldi	r24, 0x02	; 2
    558a:	80 c0       	rjmp	.+256    	; 0x568c <dir_sdi+0x134>
    558c:	e8 81       	ld	r30, Y
    558e:	f9 81       	ldd	r31, Y+1	; 0x01
    5590:	86 89       	ldd	r24, Z+22	; 0x16
    5592:	97 89       	ldd	r25, Z+23	; 0x17
    5594:	a0 8d       	ldd	r26, Z+24	; 0x18
    5596:	b1 8d       	ldd	r27, Z+25	; 0x19
    5598:	c8 16       	cp	r12, r24
    559a:	d9 06       	cpc	r13, r25
    559c:	ea 06       	cpc	r14, r26
    559e:	fb 06       	cpc	r15, r27
    55a0:	98 f7       	brcc	.-26     	; 0x5588 <dir_sdi+0x30>
    55a2:	c1 14       	cp	r12, r1
    55a4:	d1 04       	cpc	r13, r1
    55a6:	e1 04       	cpc	r14, r1
    55a8:	f1 04       	cpc	r15, r1
    55aa:	b9 f4       	brne	.+46     	; 0x55da <dir_sdi+0x82>
    55ac:	80 81       	ld	r24, Z
    55ae:	83 30       	cpi	r24, 0x03	; 3
    55b0:	41 f4       	brne	.+16     	; 0x55c2 <dir_sdi+0x6a>
    55b2:	86 a1       	ldd	r24, Z+38	; 0x26
    55b4:	97 a1       	ldd	r25, Z+39	; 0x27
    55b6:	a0 a5       	ldd	r26, Z+40	; 0x28
    55b8:	b1 a5       	ldd	r27, Z+41	; 0x29
    55ba:	00 97       	sbiw	r24, 0x00	; 0
    55bc:	a1 05       	cpc	r26, r1
    55be:	b1 05       	cpc	r27, r1
    55c0:	51 f4       	brne	.+20     	; 0x55d6 <dir_sdi+0x7e>
    55c2:	80 85       	ldd	r24, Z+8	; 0x08
    55c4:	91 85       	ldd	r25, Z+9	; 0x09
    55c6:	08 17       	cp	r16, r24
    55c8:	19 07       	cpc	r17, r25
    55ca:	f0 f6       	brcc	.-68     	; 0x5588 <dir_sdi+0x30>
    55cc:	66 a1       	ldd	r22, Z+38	; 0x26
    55ce:	77 a1       	ldd	r23, Z+39	; 0x27
    55d0:	80 a5       	ldd	r24, Z+40	; 0x28
    55d2:	91 a5       	ldd	r25, Z+41	; 0x29
    55d4:	2f c0       	rjmp	.+94     	; 0x5634 <dir_sdi+0xdc>
    55d6:	6c 01       	movw	r12, r24
    55d8:	7d 01       	movw	r14, r26
    55da:	a2 80       	ldd	r10, Z+2	; 0x02
    55dc:	80 e1       	ldi	r24, 0x10	; 16
    55de:	a8 9e       	mul	r10, r24
    55e0:	50 01       	movw	r10, r0
    55e2:	11 24       	eor	r1, r1
    55e4:	88 81       	ld	r24, Y
    55e6:	99 81       	ldd	r25, Y+1	; 0x01
    55e8:	b7 01       	movw	r22, r14
    55ea:	a6 01       	movw	r20, r12
    55ec:	0a 15       	cp	r16, r10
    55ee:	1b 05       	cpc	r17, r11
    55f0:	00 f1       	brcs	.+64     	; 0x5632 <dir_sdi+0xda>
    55f2:	ee de       	rcall	.-548    	; 0x53d0 <get_fat>
    55f4:	6b 01       	movw	r12, r22
    55f6:	7c 01       	movw	r14, r24
    55f8:	8f ef       	ldi	r24, 0xFF	; 255
    55fa:	c8 16       	cp	r12, r24
    55fc:	d8 06       	cpc	r13, r24
    55fe:	e8 06       	cpc	r14, r24
    5600:	f8 06       	cpc	r15, r24
    5602:	09 f4       	brne	.+2      	; 0x5606 <dir_sdi+0xae>
    5604:	42 c0       	rjmp	.+132    	; 0x568a <dir_sdi+0x132>
    5606:	82 e0       	ldi	r24, 0x02	; 2
    5608:	c8 16       	cp	r12, r24
    560a:	d1 04       	cpc	r13, r1
    560c:	e1 04       	cpc	r14, r1
    560e:	f1 04       	cpc	r15, r1
    5610:	08 f4       	brcc	.+2      	; 0x5614 <dir_sdi+0xbc>
    5612:	ba cf       	rjmp	.-140    	; 0x5588 <dir_sdi+0x30>
    5614:	e8 81       	ld	r30, Y
    5616:	f9 81       	ldd	r31, Y+1	; 0x01
    5618:	86 89       	ldd	r24, Z+22	; 0x16
    561a:	97 89       	ldd	r25, Z+23	; 0x17
    561c:	a0 8d       	ldd	r26, Z+24	; 0x18
    561e:	b1 8d       	ldd	r27, Z+25	; 0x19
    5620:	c8 16       	cp	r12, r24
    5622:	d9 06       	cpc	r13, r25
    5624:	ea 06       	cpc	r14, r26
    5626:	fb 06       	cpc	r15, r27
    5628:	08 f0       	brcs	.+2      	; 0x562c <dir_sdi+0xd4>
    562a:	ae cf       	rjmp	.-164    	; 0x5588 <dir_sdi+0x30>
    562c:	0a 19       	sub	r16, r10
    562e:	1b 09       	sbc	r17, r11
    5630:	d9 cf       	rjmp	.-78     	; 0x55e4 <dir_sdi+0x8c>
    5632:	a5 de       	rcall	.-694    	; 0x537e <clust2sect>
    5634:	ca 86       	std	Y+10, r12	; 0x0a
    5636:	db 86       	std	Y+11, r13	; 0x0b
    5638:	ec 86       	std	Y+12, r14	; 0x0c
    563a:	fd 86       	std	Y+13, r15	; 0x0d
    563c:	61 15       	cp	r22, r1
    563e:	71 05       	cpc	r23, r1
    5640:	81 05       	cpc	r24, r1
    5642:	91 05       	cpc	r25, r1
    5644:	09 f4       	brne	.+2      	; 0x5648 <dir_sdi+0xf0>
    5646:	a0 cf       	rjmp	.-192    	; 0x5588 <dir_sdi+0x30>
    5648:	98 01       	movw	r18, r16
    564a:	54 e0       	ldi	r21, 0x04	; 4
    564c:	36 95       	lsr	r19
    564e:	27 95       	ror	r18
    5650:	5a 95       	dec	r21
    5652:	e1 f7       	brne	.-8      	; 0x564c <dir_sdi+0xf4>
    5654:	dc 01       	movw	r26, r24
    5656:	cb 01       	movw	r24, r22
    5658:	82 0f       	add	r24, r18
    565a:	93 1f       	adc	r25, r19
    565c:	a1 1d       	adc	r26, r1
    565e:	b1 1d       	adc	r27, r1
    5660:	8e 87       	std	Y+14, r24	; 0x0e
    5662:	9f 87       	std	Y+15, r25	; 0x0f
    5664:	a8 8b       	std	Y+16, r26	; 0x10
    5666:	b9 8b       	std	Y+17, r27	; 0x11
    5668:	0f 70       	andi	r16, 0x0F	; 15
    566a:	11 27       	eor	r17, r17
    566c:	65 e0       	ldi	r22, 0x05	; 5
    566e:	00 0f       	add	r16, r16
    5670:	11 1f       	adc	r17, r17
    5672:	6a 95       	dec	r22
    5674:	e1 f7       	brne	.-8      	; 0x566e <dir_sdi+0x116>
    5676:	0e 5c       	subi	r16, 0xCE	; 206
    5678:	1f 4f       	sbci	r17, 0xFF	; 255
    567a:	88 81       	ld	r24, Y
    567c:	99 81       	ldd	r25, Y+1	; 0x01
    567e:	80 0f       	add	r24, r16
    5680:	91 1f       	adc	r25, r17
    5682:	8a 8b       	std	Y+18, r24	; 0x12
    5684:	9b 8b       	std	Y+19, r25	; 0x13
    5686:	80 e0       	ldi	r24, 0x00	; 0
    5688:	01 c0       	rjmp	.+2      	; 0x568c <dir_sdi+0x134>
    568a:	81 e0       	ldi	r24, 0x01	; 1
    568c:	df 91       	pop	r29
    568e:	cf 91       	pop	r28
    5690:	1f 91       	pop	r17
    5692:	0f 91       	pop	r16
    5694:	ff 90       	pop	r15
    5696:	ef 90       	pop	r14
    5698:	df 90       	pop	r13
    569a:	cf 90       	pop	r12
    569c:	bf 90       	pop	r11
    569e:	af 90       	pop	r10
    56a0:	08 95       	ret

000056a2 <put_fat>:
    56a2:	4f 92       	push	r4
    56a4:	5f 92       	push	r5
    56a6:	6f 92       	push	r6
    56a8:	7f 92       	push	r7
    56aa:	8f 92       	push	r8
    56ac:	9f 92       	push	r9
    56ae:	af 92       	push	r10
    56b0:	bf 92       	push	r11
    56b2:	cf 92       	push	r12
    56b4:	df 92       	push	r13
    56b6:	ef 92       	push	r14
    56b8:	ff 92       	push	r15
    56ba:	0f 93       	push	r16
    56bc:	1f 93       	push	r17
    56be:	cf 93       	push	r28
    56c0:	df 93       	push	r29
    56c2:	ec 01       	movw	r28, r24
    56c4:	6a 01       	movw	r12, r20
    56c6:	7b 01       	movw	r14, r22
    56c8:	28 01       	movw	r4, r16
    56ca:	39 01       	movw	r6, r18
    56cc:	42 30       	cpi	r20, 0x02	; 2
    56ce:	51 05       	cpc	r21, r1
    56d0:	61 05       	cpc	r22, r1
    56d2:	71 05       	cpc	r23, r1
    56d4:	08 f4       	brcc	.+2      	; 0x56d8 <put_fat+0x36>
    56d6:	c5 c0       	rjmp	.+394    	; 0x5862 <put_fat+0x1c0>
    56d8:	8e 89       	ldd	r24, Y+22	; 0x16
    56da:	9f 89       	ldd	r25, Y+23	; 0x17
    56dc:	a8 8d       	ldd	r26, Y+24	; 0x18
    56de:	b9 8d       	ldd	r27, Y+25	; 0x19
    56e0:	48 17       	cp	r20, r24
    56e2:	59 07       	cpc	r21, r25
    56e4:	6a 07       	cpc	r22, r26
    56e6:	7b 07       	cpc	r23, r27
    56e8:	08 f0       	brcs	.+2      	; 0x56ec <put_fat+0x4a>
    56ea:	bb c0       	rjmp	.+374    	; 0x5862 <put_fat+0x1c0>
    56ec:	88 81       	ld	r24, Y
    56ee:	82 30       	cpi	r24, 0x02	; 2
    56f0:	09 f4       	brne	.+2      	; 0x56f4 <put_fat+0x52>
    56f2:	5f c0       	rjmp	.+190    	; 0x57b2 <put_fat+0x110>
    56f4:	83 30       	cpi	r24, 0x03	; 3
    56f6:	09 f4       	brne	.+2      	; 0x56fa <put_fat+0x58>
    56f8:	7d c0       	rjmp	.+250    	; 0x57f4 <put_fat+0x152>
    56fa:	81 30       	cpi	r24, 0x01	; 1
    56fc:	09 f0       	breq	.+2      	; 0x5700 <put_fat+0x5e>
    56fe:	b1 c0       	rjmp	.+354    	; 0x5862 <put_fat+0x1c0>
    5700:	5a 01       	movw	r10, r20
    5702:	b6 94       	lsr	r11
    5704:	a7 94       	ror	r10
    5706:	a4 0e       	add	r10, r20
    5708:	b5 1e       	adc	r11, r21
    570a:	c5 01       	movw	r24, r10
    570c:	89 2f       	mov	r24, r25
    570e:	99 27       	eor	r25, r25
    5710:	86 95       	lsr	r24
    5712:	4a a1       	ldd	r20, Y+34	; 0x22
    5714:	5b a1       	ldd	r21, Y+35	; 0x23
    5716:	6c a1       	ldd	r22, Y+36	; 0x24
    5718:	7d a1       	ldd	r23, Y+37	; 0x25
    571a:	48 0f       	add	r20, r24
    571c:	59 1f       	adc	r21, r25
    571e:	61 1d       	adc	r22, r1
    5720:	71 1d       	adc	r23, r1
    5722:	ce 01       	movw	r24, r28
    5724:	4e db       	rcall	.-2404   	; 0x4dc2 <move_window>
    5726:	81 11       	cpse	r24, r1
    5728:	9d c0       	rjmp	.+314    	; 0x5864 <put_fat+0x1c2>
    572a:	85 01       	movw	r16, r10
    572c:	0f 5f       	subi	r16, 0xFF	; 255
    572e:	1f 4f       	sbci	r17, 0xFF	; 255
    5730:	f5 01       	movw	r30, r10
    5732:	f1 70       	andi	r31, 0x01	; 1
    5734:	ec 0f       	add	r30, r28
    5736:	fd 1f       	adc	r31, r29
    5738:	46 01       	movw	r8, r12
    573a:	57 01       	movw	r10, r14
    573c:	81 e0       	ldi	r24, 0x01	; 1
    573e:	88 22       	and	r8, r24
    5740:	99 24       	eor	r9, r9
    5742:	aa 24       	eor	r10, r10
    5744:	bb 24       	eor	r11, r11
    5746:	c0 fe       	sbrs	r12, 0
    5748:	08 c0       	rjmp	.+16     	; 0x575a <put_fat+0xb8>
    574a:	22 a9       	ldd	r18, Z+50	; 0x32
    574c:	2f 70       	andi	r18, 0x0F	; 15
    574e:	30 e1       	ldi	r19, 0x10	; 16
    5750:	43 9e       	mul	r4, r19
    5752:	c0 01       	movw	r24, r0
    5754:	11 24       	eor	r1, r1
    5756:	28 2b       	or	r18, r24
    5758:	01 c0       	rjmp	.+2      	; 0x575c <put_fat+0xba>
    575a:	24 2d       	mov	r18, r4
    575c:	22 ab       	std	Z+50, r18	; 0x32
    575e:	81 e0       	ldi	r24, 0x01	; 1
    5760:	8c 83       	std	Y+4, r24	; 0x04
    5762:	4a a1       	ldd	r20, Y+34	; 0x22
    5764:	5b a1       	ldd	r21, Y+35	; 0x23
    5766:	6c a1       	ldd	r22, Y+36	; 0x24
    5768:	7d a1       	ldd	r23, Y+37	; 0x25
    576a:	c8 01       	movw	r24, r16
    576c:	89 2f       	mov	r24, r25
    576e:	99 27       	eor	r25, r25
    5770:	86 95       	lsr	r24
    5772:	48 0f       	add	r20, r24
    5774:	59 1f       	adc	r21, r25
    5776:	61 1d       	adc	r22, r1
    5778:	71 1d       	adc	r23, r1
    577a:	ce 01       	movw	r24, r28
    577c:	22 db       	rcall	.-2492   	; 0x4dc2 <move_window>
    577e:	81 11       	cpse	r24, r1
    5780:	71 c0       	rjmp	.+226    	; 0x5864 <put_fat+0x1c2>
    5782:	f8 01       	movw	r30, r16
    5784:	f1 70       	andi	r31, 0x01	; 1
    5786:	ec 0f       	add	r30, r28
    5788:	fd 1f       	adc	r31, r29
    578a:	89 28       	or	r8, r9
    578c:	8a 28       	or	r8, r10
    578e:	8b 28       	or	r8, r11
    5790:	49 f0       	breq	.+18     	; 0x57a4 <put_fat+0x102>
    5792:	b4 e0       	ldi	r27, 0x04	; 4
    5794:	76 94       	lsr	r7
    5796:	67 94       	ror	r6
    5798:	57 94       	ror	r5
    579a:	47 94       	ror	r4
    579c:	ba 95       	dec	r27
    579e:	d1 f7       	brne	.-12     	; 0x5794 <put_fat+0xf2>
    57a0:	94 2d       	mov	r25, r4
    57a2:	05 c0       	rjmp	.+10     	; 0x57ae <put_fat+0x10c>
    57a4:	92 a9       	ldd	r25, Z+50	; 0x32
    57a6:	90 7f       	andi	r25, 0xF0	; 240
    57a8:	25 2d       	mov	r18, r5
    57aa:	2f 70       	andi	r18, 0x0F	; 15
    57ac:	92 2b       	or	r25, r18
    57ae:	92 ab       	std	Z+50, r25	; 0x32
    57b0:	55 c0       	rjmp	.+170    	; 0x585c <put_fat+0x1ba>
    57b2:	45 2f       	mov	r20, r21
    57b4:	56 2f       	mov	r21, r22
    57b6:	67 2f       	mov	r22, r23
    57b8:	77 27       	eor	r23, r23
    57ba:	8a a1       	ldd	r24, Y+34	; 0x22
    57bc:	9b a1       	ldd	r25, Y+35	; 0x23
    57be:	ac a1       	ldd	r26, Y+36	; 0x24
    57c0:	bd a1       	ldd	r27, Y+37	; 0x25
    57c2:	48 0f       	add	r20, r24
    57c4:	59 1f       	adc	r21, r25
    57c6:	6a 1f       	adc	r22, r26
    57c8:	7b 1f       	adc	r23, r27
    57ca:	ce 01       	movw	r24, r28
    57cc:	fa da       	rcall	.-2572   	; 0x4dc2 <move_window>
    57ce:	81 11       	cpse	r24, r1
    57d0:	49 c0       	rjmp	.+146    	; 0x5864 <put_fat+0x1c2>
    57d2:	cc 0c       	add	r12, r12
    57d4:	dd 1c       	adc	r13, r13
    57d6:	ee 1c       	adc	r14, r14
    57d8:	ff 1c       	adc	r15, r15
    57da:	e8 94       	clt
    57dc:	c0 f8       	bld	r12, 0
    57de:	91 e0       	ldi	r25, 0x01	; 1
    57e0:	d9 22       	and	r13, r25
    57e2:	ee 24       	eor	r14, r14
    57e4:	ff 24       	eor	r15, r15
    57e6:	f6 01       	movw	r30, r12
    57e8:	f2 96       	adiw	r30, 0x32	; 50
    57ea:	ec 0f       	add	r30, r28
    57ec:	fd 1f       	adc	r31, r29
    57ee:	40 82       	st	Z, r4
    57f0:	51 82       	std	Z+1, r5	; 0x01
    57f2:	34 c0       	rjmp	.+104    	; 0x585c <put_fat+0x1ba>
    57f4:	e7 e0       	ldi	r30, 0x07	; 7
    57f6:	76 95       	lsr	r23
    57f8:	67 95       	ror	r22
    57fa:	57 95       	ror	r21
    57fc:	47 95       	ror	r20
    57fe:	ea 95       	dec	r30
    5800:	d1 f7       	brne	.-12     	; 0x57f6 <put_fat+0x154>
    5802:	8a a1       	ldd	r24, Y+34	; 0x22
    5804:	9b a1       	ldd	r25, Y+35	; 0x23
    5806:	ac a1       	ldd	r26, Y+36	; 0x24
    5808:	bd a1       	ldd	r27, Y+37	; 0x25
    580a:	48 0f       	add	r20, r24
    580c:	59 1f       	adc	r21, r25
    580e:	6a 1f       	adc	r22, r26
    5810:	7b 1f       	adc	r23, r27
    5812:	ce 01       	movw	r24, r28
    5814:	d6 da       	rcall	.-2644   	; 0x4dc2 <move_window>
    5816:	81 11       	cpse	r24, r1
    5818:	25 c0       	rjmp	.+74     	; 0x5864 <put_fat+0x1c2>
    581a:	72 e0       	ldi	r23, 0x02	; 2
    581c:	cc 0c       	add	r12, r12
    581e:	dd 1c       	adc	r13, r13
    5820:	ee 1c       	adc	r14, r14
    5822:	ff 1c       	adc	r15, r15
    5824:	7a 95       	dec	r23
    5826:	d1 f7       	brne	.-12     	; 0x581c <put_fat+0x17a>
    5828:	3c ef       	ldi	r19, 0xFC	; 252
    582a:	c3 22       	and	r12, r19
    582c:	31 e0       	ldi	r19, 0x01	; 1
    582e:	d3 22       	and	r13, r19
    5830:	ee 24       	eor	r14, r14
    5832:	ff 24       	eor	r15, r15
    5834:	f6 01       	movw	r30, r12
    5836:	f2 96       	adiw	r30, 0x32	; 50
    5838:	ec 0f       	add	r30, r28
    583a:	fd 1f       	adc	r31, r29
    583c:	40 81       	ld	r20, Z
    583e:	51 81       	ldd	r21, Z+1	; 0x01
    5840:	62 81       	ldd	r22, Z+2	; 0x02
    5842:	73 81       	ldd	r23, Z+3	; 0x03
    5844:	44 27       	eor	r20, r20
    5846:	55 27       	eor	r21, r21
    5848:	66 27       	eor	r22, r22
    584a:	70 7f       	andi	r23, 0xF0	; 240
    584c:	44 29       	or	r20, r4
    584e:	55 29       	or	r21, r5
    5850:	66 29       	or	r22, r6
    5852:	77 29       	or	r23, r7
    5854:	40 83       	st	Z, r20
    5856:	51 83       	std	Z+1, r21	; 0x01
    5858:	62 83       	std	Z+2, r22	; 0x02
    585a:	73 83       	std	Z+3, r23	; 0x03
    585c:	91 e0       	ldi	r25, 0x01	; 1
    585e:	9c 83       	std	Y+4, r25	; 0x04
    5860:	01 c0       	rjmp	.+2      	; 0x5864 <put_fat+0x1c2>
    5862:	82 e0       	ldi	r24, 0x02	; 2
    5864:	df 91       	pop	r29
    5866:	cf 91       	pop	r28
    5868:	1f 91       	pop	r17
    586a:	0f 91       	pop	r16
    586c:	ff 90       	pop	r15
    586e:	ef 90       	pop	r14
    5870:	df 90       	pop	r13
    5872:	cf 90       	pop	r12
    5874:	bf 90       	pop	r11
    5876:	af 90       	pop	r10
    5878:	9f 90       	pop	r9
    587a:	8f 90       	pop	r8
    587c:	7f 90       	pop	r7
    587e:	6f 90       	pop	r6
    5880:	5f 90       	pop	r5
    5882:	4f 90       	pop	r4
    5884:	08 95       	ret

00005886 <create_chain>:
    5886:	4f 92       	push	r4
    5888:	5f 92       	push	r5
    588a:	6f 92       	push	r6
    588c:	7f 92       	push	r7
    588e:	8f 92       	push	r8
    5890:	9f 92       	push	r9
    5892:	af 92       	push	r10
    5894:	bf 92       	push	r11
    5896:	cf 92       	push	r12
    5898:	df 92       	push	r13
    589a:	ef 92       	push	r14
    589c:	ff 92       	push	r15
    589e:	0f 93       	push	r16
    58a0:	1f 93       	push	r17
    58a2:	cf 93       	push	r28
    58a4:	df 93       	push	r29
    58a6:	ec 01       	movw	r28, r24
    58a8:	2a 01       	movw	r4, r20
    58aa:	3b 01       	movw	r6, r22
    58ac:	41 15       	cp	r20, r1
    58ae:	51 05       	cpc	r21, r1
    58b0:	61 05       	cpc	r22, r1
    58b2:	71 05       	cpc	r23, r1
    58b4:	99 f4       	brne	.+38     	; 0x58dc <create_chain+0x56>
    58b6:	8a 84       	ldd	r8, Y+10	; 0x0a
    58b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    58ba:	ac 84       	ldd	r10, Y+12	; 0x0c
    58bc:	bd 84       	ldd	r11, Y+13	; 0x0d
    58be:	81 14       	cp	r8, r1
    58c0:	91 04       	cpc	r9, r1
    58c2:	a1 04       	cpc	r10, r1
    58c4:	b1 04       	cpc	r11, r1
    58c6:	49 f1       	breq	.+82     	; 0x591a <create_chain+0x94>
    58c8:	4e 89       	ldd	r20, Y+22	; 0x16
    58ca:	5f 89       	ldd	r21, Y+23	; 0x17
    58cc:	68 8d       	ldd	r22, Y+24	; 0x18
    58ce:	79 8d       	ldd	r23, Y+25	; 0x19
    58d0:	84 16       	cp	r8, r20
    58d2:	95 06       	cpc	r9, r21
    58d4:	a6 06       	cpc	r10, r22
    58d6:	b7 06       	cpc	r11, r23
    58d8:	00 f5       	brcc	.+64     	; 0x591a <create_chain+0x94>
    58da:	23 c0       	rjmp	.+70     	; 0x5922 <create_chain+0x9c>
    58dc:	79 dd       	rcall	.-1294   	; 0x53d0 <get_fat>
    58de:	62 30       	cpi	r22, 0x02	; 2
    58e0:	71 05       	cpc	r23, r1
    58e2:	81 05       	cpc	r24, r1
    58e4:	91 05       	cpc	r25, r1
    58e6:	08 f4       	brcc	.+2      	; 0x58ea <create_chain+0x64>
    58e8:	92 c0       	rjmp	.+292    	; 0x5a0e <create_chain+0x188>
    58ea:	6f 3f       	cpi	r22, 0xFF	; 255
    58ec:	2f ef       	ldi	r18, 0xFF	; 255
    58ee:	72 07       	cpc	r23, r18
    58f0:	82 07       	cpc	r24, r18
    58f2:	92 07       	cpc	r25, r18
    58f4:	29 f4       	brne	.+10     	; 0x5900 <create_chain+0x7a>
    58f6:	4f ef       	ldi	r20, 0xFF	; 255
    58f8:	3f ef       	ldi	r19, 0xFF	; 255
    58fa:	2f ef       	ldi	r18, 0xFF	; 255
    58fc:	9f ef       	ldi	r25, 0xFF	; 255
    58fe:	8c c0       	rjmp	.+280    	; 0x5a18 <create_chain+0x192>
    5900:	ce 88       	ldd	r12, Y+22	; 0x16
    5902:	df 88       	ldd	r13, Y+23	; 0x17
    5904:	e8 8c       	ldd	r14, Y+24	; 0x18
    5906:	f9 8c       	ldd	r15, Y+25	; 0x19
    5908:	6c 15       	cp	r22, r12
    590a:	7d 05       	cpc	r23, r13
    590c:	8e 05       	cpc	r24, r14
    590e:	9f 05       	cpc	r25, r15
    5910:	08 f4       	brcc	.+2      	; 0x5914 <create_chain+0x8e>
    5912:	7f c0       	rjmp	.+254    	; 0x5a12 <create_chain+0x18c>
    5914:	53 01       	movw	r10, r6
    5916:	42 01       	movw	r8, r4
    5918:	04 c0       	rjmp	.+8      	; 0x5922 <create_chain+0x9c>
    591a:	81 2c       	mov	r8, r1
    591c:	91 2c       	mov	r9, r1
    591e:	54 01       	movw	r10, r8
    5920:	83 94       	inc	r8
    5922:	75 01       	movw	r14, r10
    5924:	64 01       	movw	r12, r8
    5926:	8f ef       	ldi	r24, 0xFF	; 255
    5928:	c8 1a       	sub	r12, r24
    592a:	d8 0a       	sbc	r13, r24
    592c:	e8 0a       	sbc	r14, r24
    592e:	f8 0a       	sbc	r15, r24
    5930:	4e 89       	ldd	r20, Y+22	; 0x16
    5932:	5f 89       	ldd	r21, Y+23	; 0x17
    5934:	68 8d       	ldd	r22, Y+24	; 0x18
    5936:	79 8d       	ldd	r23, Y+25	; 0x19
    5938:	c4 16       	cp	r12, r20
    593a:	d5 06       	cpc	r13, r21
    593c:	e6 06       	cpc	r14, r22
    593e:	f7 06       	cpc	r15, r23
    5940:	80 f0       	brcs	.+32     	; 0x5962 <create_chain+0xdc>
    5942:	22 e0       	ldi	r18, 0x02	; 2
    5944:	82 16       	cp	r8, r18
    5946:	91 04       	cpc	r9, r1
    5948:	a1 04       	cpc	r10, r1
    594a:	b1 04       	cpc	r11, r1
    594c:	28 f4       	brcc	.+10     	; 0x5958 <create_chain+0xd2>
    594e:	40 e0       	ldi	r20, 0x00	; 0
    5950:	30 e0       	ldi	r19, 0x00	; 0
    5952:	20 e0       	ldi	r18, 0x00	; 0
    5954:	90 e0       	ldi	r25, 0x00	; 0
    5956:	60 c0       	rjmp	.+192    	; 0x5a18 <create_chain+0x192>
    5958:	52 e0       	ldi	r21, 0x02	; 2
    595a:	c5 2e       	mov	r12, r21
    595c:	d1 2c       	mov	r13, r1
    595e:	e1 2c       	mov	r14, r1
    5960:	f1 2c       	mov	r15, r1
    5962:	b7 01       	movw	r22, r14
    5964:	a6 01       	movw	r20, r12
    5966:	ce 01       	movw	r24, r28
    5968:	33 dd       	rcall	.-1434   	; 0x53d0 <get_fat>
    596a:	61 15       	cp	r22, r1
    596c:	71 05       	cpc	r23, r1
    596e:	81 05       	cpc	r24, r1
    5970:	91 05       	cpc	r25, r1
    5972:	99 f0       	breq	.+38     	; 0x599a <create_chain+0x114>
    5974:	6f 3f       	cpi	r22, 0xFF	; 255
    5976:	2f ef       	ldi	r18, 0xFF	; 255
    5978:	72 07       	cpc	r23, r18
    597a:	82 07       	cpc	r24, r18
    597c:	92 07       	cpc	r25, r18
    597e:	09 f4       	brne	.+2      	; 0x5982 <create_chain+0xfc>
    5980:	ba cf       	rjmp	.-140    	; 0x58f6 <create_chain+0x70>
    5982:	61 30       	cpi	r22, 0x01	; 1
    5984:	71 05       	cpc	r23, r1
    5986:	81 05       	cpc	r24, r1
    5988:	91 05       	cpc	r25, r1
    598a:	09 f4       	brne	.+2      	; 0x598e <create_chain+0x108>
    598c:	40 c0       	rjmp	.+128    	; 0x5a0e <create_chain+0x188>
    598e:	c8 14       	cp	r12, r8
    5990:	d9 04       	cpc	r13, r9
    5992:	ea 04       	cpc	r14, r10
    5994:	fb 04       	cpc	r15, r11
    5996:	39 f6       	brne	.-114    	; 0x5926 <create_chain+0xa0>
    5998:	da cf       	rjmp	.-76     	; 0x594e <create_chain+0xc8>
    599a:	0f ef       	ldi	r16, 0xFF	; 255
    599c:	1f ef       	ldi	r17, 0xFF	; 255
    599e:	2f ef       	ldi	r18, 0xFF	; 255
    59a0:	3f e0       	ldi	r19, 0x0F	; 15
    59a2:	b7 01       	movw	r22, r14
    59a4:	a6 01       	movw	r20, r12
    59a6:	ce 01       	movw	r24, r28
    59a8:	7c de       	rcall	.-776    	; 0x56a2 <put_fat>
    59aa:	81 11       	cpse	r24, r1
    59ac:	2d c0       	rjmp	.+90     	; 0x5a08 <create_chain+0x182>
    59ae:	41 14       	cp	r4, r1
    59b0:	51 04       	cpc	r5, r1
    59b2:	61 04       	cpc	r6, r1
    59b4:	71 04       	cpc	r7, r1
    59b6:	d1 f4       	brne	.+52     	; 0x59ec <create_chain+0x166>
    59b8:	ca 86       	std	Y+10, r12	; 0x0a
    59ba:	db 86       	std	Y+11, r13	; 0x0b
    59bc:	ec 86       	std	Y+12, r14	; 0x0c
    59be:	fd 86       	std	Y+13, r15	; 0x0d
    59c0:	4e 85       	ldd	r20, Y+14	; 0x0e
    59c2:	5f 85       	ldd	r21, Y+15	; 0x0f
    59c4:	68 89       	ldd	r22, Y+16	; 0x10
    59c6:	79 89       	ldd	r23, Y+17	; 0x11
    59c8:	4f 3f       	cpi	r20, 0xFF	; 255
    59ca:	8f ef       	ldi	r24, 0xFF	; 255
    59cc:	58 07       	cpc	r21, r24
    59ce:	68 07       	cpc	r22, r24
    59d0:	78 07       	cpc	r23, r24
    59d2:	a9 f0       	breq	.+42     	; 0x59fe <create_chain+0x178>
    59d4:	41 50       	subi	r20, 0x01	; 1
    59d6:	51 09       	sbc	r21, r1
    59d8:	61 09       	sbc	r22, r1
    59da:	71 09       	sbc	r23, r1
    59dc:	4e 87       	std	Y+14, r20	; 0x0e
    59de:	5f 87       	std	Y+15, r21	; 0x0f
    59e0:	68 8b       	std	Y+16, r22	; 0x10
    59e2:	79 8b       	std	Y+17, r23	; 0x11
    59e4:	8d 81       	ldd	r24, Y+5	; 0x05
    59e6:	81 60       	ori	r24, 0x01	; 1
    59e8:	8d 83       	std	Y+5, r24	; 0x05
    59ea:	09 c0       	rjmp	.+18     	; 0x59fe <create_chain+0x178>
    59ec:	97 01       	movw	r18, r14
    59ee:	86 01       	movw	r16, r12
    59f0:	b3 01       	movw	r22, r6
    59f2:	a2 01       	movw	r20, r4
    59f4:	ce 01       	movw	r24, r28
    59f6:	55 de       	rcall	.-854    	; 0x56a2 <put_fat>
    59f8:	88 23       	and	r24, r24
    59fa:	f1 f2       	breq	.-68     	; 0x59b8 <create_chain+0x132>
    59fc:	05 c0       	rjmp	.+10     	; 0x5a08 <create_chain+0x182>
    59fe:	4c 2d       	mov	r20, r12
    5a00:	3d 2d       	mov	r19, r13
    5a02:	2e 2d       	mov	r18, r14
    5a04:	9f 2d       	mov	r25, r15
    5a06:	08 c0       	rjmp	.+16     	; 0x5a18 <create_chain+0x192>
    5a08:	81 30       	cpi	r24, 0x01	; 1
    5a0a:	09 f4       	brne	.+2      	; 0x5a0e <create_chain+0x188>
    5a0c:	74 cf       	rjmp	.-280    	; 0x58f6 <create_chain+0x70>
    5a0e:	41 e0       	ldi	r20, 0x01	; 1
    5a10:	9f cf       	rjmp	.-194    	; 0x5950 <create_chain+0xca>
    5a12:	46 2f       	mov	r20, r22
    5a14:	37 2f       	mov	r19, r23
    5a16:	28 2f       	mov	r18, r24
    5a18:	64 2f       	mov	r22, r20
    5a1a:	73 2f       	mov	r23, r19
    5a1c:	82 2f       	mov	r24, r18
    5a1e:	df 91       	pop	r29
    5a20:	cf 91       	pop	r28
    5a22:	1f 91       	pop	r17
    5a24:	0f 91       	pop	r16
    5a26:	ff 90       	pop	r15
    5a28:	ef 90       	pop	r14
    5a2a:	df 90       	pop	r13
    5a2c:	cf 90       	pop	r12
    5a2e:	bf 90       	pop	r11
    5a30:	af 90       	pop	r10
    5a32:	9f 90       	pop	r9
    5a34:	8f 90       	pop	r8
    5a36:	7f 90       	pop	r7
    5a38:	6f 90       	pop	r6
    5a3a:	5f 90       	pop	r5
    5a3c:	4f 90       	pop	r4
    5a3e:	08 95       	ret

00005a40 <dir_next>:
    5a40:	7f 92       	push	r7
    5a42:	8f 92       	push	r8
    5a44:	9f 92       	push	r9
    5a46:	af 92       	push	r10
    5a48:	bf 92       	push	r11
    5a4a:	cf 92       	push	r12
    5a4c:	df 92       	push	r13
    5a4e:	ef 92       	push	r14
    5a50:	ff 92       	push	r15
    5a52:	0f 93       	push	r16
    5a54:	1f 93       	push	r17
    5a56:	cf 93       	push	r28
    5a58:	df 93       	push	r29
    5a5a:	ec 01       	movw	r28, r24
    5a5c:	6b 01       	movw	r12, r22
    5a5e:	0c 81       	ldd	r16, Y+4	; 0x04
    5a60:	1d 81       	ldd	r17, Y+5	; 0x05
    5a62:	0f 5f       	subi	r16, 0xFF	; 255
    5a64:	1f 4f       	sbci	r17, 0xFF	; 255
    5a66:	01 15       	cp	r16, r1
    5a68:	11 05       	cpc	r17, r1
    5a6a:	11 f4       	brne	.+4      	; 0x5a70 <dir_next+0x30>
    5a6c:	84 e0       	ldi	r24, 0x04	; 4
    5a6e:	d8 c0       	rjmp	.+432    	; 0x5c20 <dir_next+0x1e0>
    5a70:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a72:	9f 85       	ldd	r25, Y+15	; 0x0f
    5a74:	a8 89       	ldd	r26, Y+16	; 0x10
    5a76:	b9 89       	ldd	r27, Y+17	; 0x11
    5a78:	00 97       	sbiw	r24, 0x00	; 0
    5a7a:	a1 05       	cpc	r26, r1
    5a7c:	b1 05       	cpc	r27, r1
    5a7e:	b1 f3       	breq	.-20     	; 0x5a6c <dir_next+0x2c>
    5a80:	78 01       	movw	r14, r16
    5a82:	2f e0       	ldi	r18, 0x0F	; 15
    5a84:	e2 22       	and	r14, r18
    5a86:	ff 24       	eor	r15, r15
    5a88:	e1 14       	cp	r14, r1
    5a8a:	f1 04       	cpc	r15, r1
    5a8c:	09 f0       	breq	.+2      	; 0x5a90 <dir_next+0x50>
    5a8e:	b5 c0       	rjmp	.+362    	; 0x5bfa <dir_next+0x1ba>
    5a90:	01 96       	adiw	r24, 0x01	; 1
    5a92:	a1 1d       	adc	r26, r1
    5a94:	b1 1d       	adc	r27, r1
    5a96:	8e 87       	std	Y+14, r24	; 0x0e
    5a98:	9f 87       	std	Y+15, r25	; 0x0f
    5a9a:	a8 8b       	std	Y+16, r26	; 0x10
    5a9c:	b9 8b       	std	Y+17, r27	; 0x11
    5a9e:	4a 85       	ldd	r20, Y+10	; 0x0a
    5aa0:	5b 85       	ldd	r21, Y+11	; 0x0b
    5aa2:	6c 85       	ldd	r22, Y+12	; 0x0c
    5aa4:	7d 85       	ldd	r23, Y+13	; 0x0d
    5aa6:	88 81       	ld	r24, Y
    5aa8:	99 81       	ldd	r25, Y+1	; 0x01
    5aaa:	fc 01       	movw	r30, r24
    5aac:	41 15       	cp	r20, r1
    5aae:	51 05       	cpc	r21, r1
    5ab0:	61 05       	cpc	r22, r1
    5ab2:	71 05       	cpc	r23, r1
    5ab4:	31 f4       	brne	.+12     	; 0x5ac2 <dir_next+0x82>
    5ab6:	80 85       	ldd	r24, Z+8	; 0x08
    5ab8:	91 85       	ldd	r25, Z+9	; 0x09
    5aba:	08 17       	cp	r16, r24
    5abc:	19 07       	cpc	r17, r25
    5abe:	b0 f6       	brcc	.-84     	; 0x5a6c <dir_next+0x2c>
    5ac0:	9c c0       	rjmp	.+312    	; 0x5bfa <dir_next+0x1ba>
    5ac2:	22 81       	ldd	r18, Z+2	; 0x02
    5ac4:	30 e0       	ldi	r19, 0x00	; 0
    5ac6:	21 50       	subi	r18, 0x01	; 1
    5ac8:	31 09       	sbc	r19, r1
    5aca:	f8 01       	movw	r30, r16
    5acc:	a4 e0       	ldi	r26, 0x04	; 4
    5ace:	f6 95       	lsr	r31
    5ad0:	e7 95       	ror	r30
    5ad2:	aa 95       	dec	r26
    5ad4:	e1 f7       	brne	.-8      	; 0x5ace <dir_next+0x8e>
    5ad6:	2e 23       	and	r18, r30
    5ad8:	3f 23       	and	r19, r31
    5ada:	23 2b       	or	r18, r19
    5adc:	09 f0       	breq	.+2      	; 0x5ae0 <dir_next+0xa0>
    5ade:	8d c0       	rjmp	.+282    	; 0x5bfa <dir_next+0x1ba>
    5ae0:	77 dc       	rcall	.-1810   	; 0x53d0 <get_fat>
    5ae2:	4b 01       	movw	r8, r22
    5ae4:	5c 01       	movw	r10, r24
    5ae6:	62 30       	cpi	r22, 0x02	; 2
    5ae8:	71 05       	cpc	r23, r1
    5aea:	81 05       	cpc	r24, r1
    5aec:	91 05       	cpc	r25, r1
    5aee:	10 f4       	brcc	.+4      	; 0x5af4 <dir_next+0xb4>
    5af0:	82 e0       	ldi	r24, 0x02	; 2
    5af2:	96 c0       	rjmp	.+300    	; 0x5c20 <dir_next+0x1e0>
    5af4:	6f 3f       	cpi	r22, 0xFF	; 255
    5af6:	2f ef       	ldi	r18, 0xFF	; 255
    5af8:	72 07       	cpc	r23, r18
    5afa:	82 07       	cpc	r24, r18
    5afc:	92 07       	cpc	r25, r18
    5afe:	11 f4       	brne	.+4      	; 0x5b04 <dir_next+0xc4>
    5b00:	81 e0       	ldi	r24, 0x01	; 1
    5b02:	8e c0       	rjmp	.+284    	; 0x5c20 <dir_next+0x1e0>
    5b04:	88 81       	ld	r24, Y
    5b06:	99 81       	ldd	r25, Y+1	; 0x01
    5b08:	fc 01       	movw	r30, r24
    5b0a:	46 89       	ldd	r20, Z+22	; 0x16
    5b0c:	57 89       	ldd	r21, Z+23	; 0x17
    5b0e:	60 8d       	ldd	r22, Z+24	; 0x18
    5b10:	71 8d       	ldd	r23, Z+25	; 0x19
    5b12:	84 16       	cp	r8, r20
    5b14:	95 06       	cpc	r9, r21
    5b16:	a6 06       	cpc	r10, r22
    5b18:	b7 06       	cpc	r11, r23
    5b1a:	08 f4       	brcc	.+2      	; 0x5b1e <dir_next+0xde>
    5b1c:	61 c0       	rjmp	.+194    	; 0x5be0 <dir_next+0x1a0>
    5b1e:	cd 28       	or	r12, r13
    5b20:	09 f4       	brne	.+2      	; 0x5b24 <dir_next+0xe4>
    5b22:	a4 cf       	rjmp	.-184    	; 0x5a6c <dir_next+0x2c>
    5b24:	4a 85       	ldd	r20, Y+10	; 0x0a
    5b26:	5b 85       	ldd	r21, Y+11	; 0x0b
    5b28:	6c 85       	ldd	r22, Y+12	; 0x0c
    5b2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    5b2c:	ac de       	rcall	.-680    	; 0x5886 <create_chain>
    5b2e:	4b 01       	movw	r8, r22
    5b30:	5c 01       	movw	r10, r24
    5b32:	61 15       	cp	r22, r1
    5b34:	71 05       	cpc	r23, r1
    5b36:	81 05       	cpc	r24, r1
    5b38:	91 05       	cpc	r25, r1
    5b3a:	09 f4       	brne	.+2      	; 0x5b3e <dir_next+0xfe>
    5b3c:	70 c0       	rjmp	.+224    	; 0x5c1e <dir_next+0x1de>
    5b3e:	61 30       	cpi	r22, 0x01	; 1
    5b40:	71 05       	cpc	r23, r1
    5b42:	81 05       	cpc	r24, r1
    5b44:	91 05       	cpc	r25, r1
    5b46:	a1 f2       	breq	.-88     	; 0x5af0 <dir_next+0xb0>
    5b48:	6f 3f       	cpi	r22, 0xFF	; 255
    5b4a:	2f ef       	ldi	r18, 0xFF	; 255
    5b4c:	72 07       	cpc	r23, r18
    5b4e:	82 07       	cpc	r24, r18
    5b50:	92 07       	cpc	r25, r18
    5b52:	b1 f2       	breq	.-84     	; 0x5b00 <dir_next+0xc0>
    5b54:	88 81       	ld	r24, Y
    5b56:	99 81       	ldd	r25, Y+1	; 0x01
    5b58:	60 d8       	rcall	.-3904   	; 0x4c1a <sync_window>
    5b5a:	81 11       	cpse	r24, r1
    5b5c:	d1 cf       	rjmp	.-94     	; 0x5b00 <dir_next+0xc0>
    5b5e:	88 81       	ld	r24, Y
    5b60:	99 81       	ldd	r25, Y+1	; 0x01
    5b62:	40 e0       	ldi	r20, 0x00	; 0
    5b64:	52 e0       	ldi	r21, 0x02	; 2
    5b66:	60 e0       	ldi	r22, 0x00	; 0
    5b68:	70 e0       	ldi	r23, 0x00	; 0
    5b6a:	c2 96       	adiw	r24, 0x32	; 50
    5b6c:	0a d8       	rcall	.-4076   	; 0x4b82 <mem_set>
    5b6e:	c8 80       	ld	r12, Y
    5b70:	d9 80       	ldd	r13, Y+1	; 0x01
    5b72:	b5 01       	movw	r22, r10
    5b74:	a4 01       	movw	r20, r8
    5b76:	c6 01       	movw	r24, r12
    5b78:	02 dc       	rcall	.-2044   	; 0x537e <clust2sect>
    5b7a:	f6 01       	movw	r30, r12
    5b7c:	66 a7       	std	Z+46, r22	; 0x2e
    5b7e:	77 a7       	std	Z+47, r23	; 0x2f
    5b80:	80 ab       	std	Z+48, r24	; 0x30
    5b82:	91 ab       	std	Z+49, r25	; 0x31
    5b84:	c1 2c       	mov	r12, r1
    5b86:	d1 2c       	mov	r13, r1
    5b88:	77 24       	eor	r7, r7
    5b8a:	73 94       	inc	r7
    5b8c:	e8 81       	ld	r30, Y
    5b8e:	f9 81       	ldd	r31, Y+1	; 0x01
    5b90:	82 81       	ldd	r24, Z+2	; 0x02
    5b92:	90 e0       	ldi	r25, 0x00	; 0
    5b94:	c8 16       	cp	r12, r24
    5b96:	d9 06       	cpc	r13, r25
    5b98:	b8 f4       	brcc	.+46     	; 0x5bc8 <dir_next+0x188>
    5b9a:	74 82       	std	Z+4, r7	; 0x04
    5b9c:	88 81       	ld	r24, Y
    5b9e:	99 81       	ldd	r25, Y+1	; 0x01
    5ba0:	3c d8       	rcall	.-3976   	; 0x4c1a <sync_window>
    5ba2:	81 11       	cpse	r24, r1
    5ba4:	ad cf       	rjmp	.-166    	; 0x5b00 <dir_next+0xc0>
    5ba6:	e8 81       	ld	r30, Y
    5ba8:	f9 81       	ldd	r31, Y+1	; 0x01
    5baa:	86 a5       	ldd	r24, Z+46	; 0x2e
    5bac:	97 a5       	ldd	r25, Z+47	; 0x2f
    5bae:	a0 a9       	ldd	r26, Z+48	; 0x30
    5bb0:	b1 a9       	ldd	r27, Z+49	; 0x31
    5bb2:	01 96       	adiw	r24, 0x01	; 1
    5bb4:	a1 1d       	adc	r26, r1
    5bb6:	b1 1d       	adc	r27, r1
    5bb8:	86 a7       	std	Z+46, r24	; 0x2e
    5bba:	97 a7       	std	Z+47, r25	; 0x2f
    5bbc:	a0 ab       	std	Z+48, r26	; 0x30
    5bbe:	b1 ab       	std	Z+49, r27	; 0x31
    5bc0:	ff ef       	ldi	r31, 0xFF	; 255
    5bc2:	cf 1a       	sub	r12, r31
    5bc4:	df 0a       	sbc	r13, r31
    5bc6:	e2 cf       	rjmp	.-60     	; 0x5b8c <dir_next+0x14c>
    5bc8:	86 a5       	ldd	r24, Z+46	; 0x2e
    5bca:	97 a5       	ldd	r25, Z+47	; 0x2f
    5bcc:	a0 a9       	ldd	r26, Z+48	; 0x30
    5bce:	b1 a9       	ldd	r27, Z+49	; 0x31
    5bd0:	8c 19       	sub	r24, r12
    5bd2:	9d 09       	sbc	r25, r13
    5bd4:	a1 09       	sbc	r26, r1
    5bd6:	b1 09       	sbc	r27, r1
    5bd8:	86 a7       	std	Z+46, r24	; 0x2e
    5bda:	97 a7       	std	Z+47, r25	; 0x2f
    5bdc:	a0 ab       	std	Z+48, r26	; 0x30
    5bde:	b1 ab       	std	Z+49, r27	; 0x31
    5be0:	8a 86       	std	Y+10, r8	; 0x0a
    5be2:	9b 86       	std	Y+11, r9	; 0x0b
    5be4:	ac 86       	std	Y+12, r10	; 0x0c
    5be6:	bd 86       	std	Y+13, r11	; 0x0d
    5be8:	b5 01       	movw	r22, r10
    5bea:	a4 01       	movw	r20, r8
    5bec:	88 81       	ld	r24, Y
    5bee:	99 81       	ldd	r25, Y+1	; 0x01
    5bf0:	c6 db       	rcall	.-2164   	; 0x537e <clust2sect>
    5bf2:	6e 87       	std	Y+14, r22	; 0x0e
    5bf4:	7f 87       	std	Y+15, r23	; 0x0f
    5bf6:	88 8b       	std	Y+16, r24	; 0x10
    5bf8:	99 8b       	std	Y+17, r25	; 0x11
    5bfa:	0c 83       	std	Y+4, r16	; 0x04
    5bfc:	1d 83       	std	Y+5, r17	; 0x05
    5bfe:	75 e0       	ldi	r23, 0x05	; 5
    5c00:	ee 0c       	add	r14, r14
    5c02:	ff 1c       	adc	r15, r15
    5c04:	7a 95       	dec	r23
    5c06:	e1 f7       	brne	.-8      	; 0x5c00 <dir_next+0x1c0>
    5c08:	22 e3       	ldi	r18, 0x32	; 50
    5c0a:	e2 0e       	add	r14, r18
    5c0c:	f1 1c       	adc	r15, r1
    5c0e:	88 81       	ld	r24, Y
    5c10:	99 81       	ldd	r25, Y+1	; 0x01
    5c12:	8e 0d       	add	r24, r14
    5c14:	9f 1d       	adc	r25, r15
    5c16:	8a 8b       	std	Y+18, r24	; 0x12
    5c18:	9b 8b       	std	Y+19, r25	; 0x13
    5c1a:	80 e0       	ldi	r24, 0x00	; 0
    5c1c:	01 c0       	rjmp	.+2      	; 0x5c20 <dir_next+0x1e0>
    5c1e:	87 e0       	ldi	r24, 0x07	; 7
    5c20:	df 91       	pop	r29
    5c22:	cf 91       	pop	r28
    5c24:	1f 91       	pop	r17
    5c26:	0f 91       	pop	r16
    5c28:	ff 90       	pop	r15
    5c2a:	ef 90       	pop	r14
    5c2c:	df 90       	pop	r13
    5c2e:	cf 90       	pop	r12
    5c30:	bf 90       	pop	r11
    5c32:	af 90       	pop	r10
    5c34:	9f 90       	pop	r9
    5c36:	8f 90       	pop	r8
    5c38:	7f 90       	pop	r7
    5c3a:	08 95       	ret

00005c3c <follow_path>:
    5c3c:	8f 92       	push	r8
    5c3e:	9f 92       	push	r9
    5c40:	af 92       	push	r10
    5c42:	bf 92       	push	r11
    5c44:	cf 92       	push	r12
    5c46:	df 92       	push	r13
    5c48:	ff 92       	push	r15
    5c4a:	0f 93       	push	r16
    5c4c:	1f 93       	push	r17
    5c4e:	cf 93       	push	r28
    5c50:	df 93       	push	r29
    5c52:	ec 01       	movw	r28, r24
    5c54:	8b 01       	movw	r16, r22
    5c56:	fb 01       	movw	r30, r22
    5c58:	80 81       	ld	r24, Z
    5c5a:	8f 32       	cpi	r24, 0x2F	; 47
    5c5c:	11 f0       	breq	.+4      	; 0x5c62 <follow_path+0x26>
    5c5e:	8c 35       	cpi	r24, 0x5C	; 92
    5c60:	39 f4       	brne	.+14     	; 0x5c70 <follow_path+0x34>
    5c62:	0f 5f       	subi	r16, 0xFF	; 255
    5c64:	1f 4f       	sbci	r17, 0xFF	; 255
    5c66:	1e 82       	std	Y+6, r1	; 0x06
    5c68:	1f 82       	std	Y+7, r1	; 0x07
    5c6a:	18 86       	std	Y+8, r1	; 0x08
    5c6c:	19 86       	std	Y+9, r1	; 0x09
    5c6e:	0a c0       	rjmp	.+20     	; 0x5c84 <follow_path+0x48>
    5c70:	e8 81       	ld	r30, Y
    5c72:	f9 81       	ldd	r31, Y+1	; 0x01
    5c74:	82 89       	ldd	r24, Z+18	; 0x12
    5c76:	93 89       	ldd	r25, Z+19	; 0x13
    5c78:	a4 89       	ldd	r26, Z+20	; 0x14
    5c7a:	b5 89       	ldd	r27, Z+21	; 0x15
    5c7c:	8e 83       	std	Y+6, r24	; 0x06
    5c7e:	9f 83       	std	Y+7, r25	; 0x07
    5c80:	a8 87       	std	Y+8, r26	; 0x08
    5c82:	b9 87       	std	Y+9, r27	; 0x09
    5c84:	f8 01       	movw	r30, r16
    5c86:	80 81       	ld	r24, Z
    5c88:	80 32       	cpi	r24, 0x20	; 32
    5c8a:	18 f0       	brcs	.+6      	; 0x5c92 <follow_path+0x56>
    5c8c:	35 e0       	ldi	r19, 0x05	; 5
    5c8e:	f3 2e       	mov	r15, r19
    5c90:	09 c0       	rjmp	.+18     	; 0x5ca4 <follow_path+0x68>
    5c92:	60 e0       	ldi	r22, 0x00	; 0
    5c94:	70 e0       	ldi	r23, 0x00	; 0
    5c96:	ce 01       	movw	r24, r28
    5c98:	5f dc       	rcall	.-1858   	; 0x5558 <dir_sdi>
    5c9a:	1a 8a       	std	Y+18, r1	; 0x12
    5c9c:	1b 8a       	std	Y+19, r1	; 0x13
    5c9e:	31 c1       	rjmp	.+610    	; 0x5f02 <follow_path+0x2c6>
    5ca0:	8c 35       	cpi	r24, 0x5C	; 92
    5ca2:	41 f4       	brne	.+16     	; 0x5cb4 <follow_path+0x78>
    5ca4:	58 01       	movw	r10, r16
    5ca6:	f8 01       	movw	r30, r16
    5ca8:	80 81       	ld	r24, Z
    5caa:	0f 5f       	subi	r16, 0xFF	; 255
    5cac:	1f 4f       	sbci	r17, 0xFF	; 255
    5cae:	8f 32       	cpi	r24, 0x2F	; 47
    5cb0:	b9 f7       	brne	.-18     	; 0x5ca0 <follow_path+0x64>
    5cb2:	f8 cf       	rjmp	.-16     	; 0x5ca4 <follow_path+0x68>
    5cb4:	cc 88       	ldd	r12, Y+20	; 0x14
    5cb6:	dd 88       	ldd	r13, Y+21	; 0x15
    5cb8:	4b e0       	ldi	r20, 0x0B	; 11
    5cba:	50 e0       	ldi	r21, 0x00	; 0
    5cbc:	60 e2       	ldi	r22, 0x20	; 32
    5cbe:	70 e0       	ldi	r23, 0x00	; 0
    5cc0:	c6 01       	movw	r24, r12
    5cc2:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <mem_set>
    5cc6:	f5 01       	movw	r30, r10
    5cc8:	80 81       	ld	r24, Z
    5cca:	8e 32       	cpi	r24, 0x2E	; 46
    5ccc:	41 f0       	breq	.+16     	; 0x5cde <follow_path+0xa2>
    5cce:	20 e0       	ldi	r18, 0x00	; 0
    5cd0:	30 e0       	ldi	r19, 0x00	; 0
    5cd2:	40 e0       	ldi	r20, 0x00	; 0
    5cd4:	50 e0       	ldi	r21, 0x00	; 0
    5cd6:	88 e0       	ldi	r24, 0x08	; 8
    5cd8:	90 e0       	ldi	r25, 0x00	; 0
    5cda:	b0 e0       	ldi	r27, 0x00	; 0
    5cdc:	32 c0       	rjmp	.+100    	; 0x5d42 <follow_path+0x106>
    5cde:	d5 01       	movw	r26, r10
    5ce0:	f6 01       	movw	r30, r12
    5ce2:	00 e0       	ldi	r16, 0x00	; 0
    5ce4:	10 e0       	ldi	r17, 0x00	; 0
    5ce6:	0f 5f       	subi	r16, 0xFF	; 255
    5ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    5cea:	8d 91       	ld	r24, X+
    5cec:	8e 32       	cpi	r24, 0x2E	; 46
    5cee:	31 f4       	brne	.+12     	; 0x5cfc <follow_path+0xc0>
    5cf0:	03 30       	cpi	r16, 0x03	; 3
    5cf2:	11 05       	cpc	r17, r1
    5cf4:	09 f4       	brne	.+2      	; 0x5cf8 <follow_path+0xbc>
    5cf6:	9f c0       	rjmp	.+318    	; 0x5e36 <follow_path+0x1fa>
    5cf8:	81 93       	st	Z+, r24
    5cfa:	f5 cf       	rjmp	.-22     	; 0x5ce6 <follow_path+0xaa>
    5cfc:	8f 32       	cpi	r24, 0x2F	; 47
    5cfe:	29 f0       	breq	.+10     	; 0x5d0a <follow_path+0xce>
    5d00:	8c 35       	cpi	r24, 0x5C	; 92
    5d02:	19 f0       	breq	.+6      	; 0x5d0a <follow_path+0xce>
    5d04:	81 32       	cpi	r24, 0x21	; 33
    5d06:	08 f0       	brcs	.+2      	; 0x5d0a <follow_path+0xce>
    5d08:	96 c0       	rjmp	.+300    	; 0x5e36 <follow_path+0x1fa>
    5d0a:	0a 0d       	add	r16, r10
    5d0c:	1b 1d       	adc	r17, r11
    5d0e:	81 32       	cpi	r24, 0x21	; 33
    5d10:	10 f4       	brcc	.+4      	; 0x5d16 <follow_path+0xda>
    5d12:	84 e2       	ldi	r24, 0x24	; 36
    5d14:	01 c0       	rjmp	.+2      	; 0x5d18 <follow_path+0xdc>
    5d16:	80 e2       	ldi	r24, 0x20	; 32
    5d18:	f6 01       	movw	r30, r12
    5d1a:	83 87       	std	Z+11, r24	; 0x0b
    5d1c:	8e c0       	rjmp	.+284    	; 0x5e3a <follow_path+0x1fe>
    5d1e:	af 32       	cpi	r26, 0x2F	; 47
    5d20:	09 f4       	brne	.+2      	; 0x5d24 <follow_path+0xe8>
    5d22:	5c c0       	rjmp	.+184    	; 0x5ddc <follow_path+0x1a0>
    5d24:	ac 35       	cpi	r26, 0x5C	; 92
    5d26:	09 f4       	brne	.+2      	; 0x5d2a <follow_path+0xee>
    5d28:	59 c0       	rjmp	.+178    	; 0x5ddc <follow_path+0x1a0>
    5d2a:	ae 32       	cpi	r26, 0x2E	; 46
    5d2c:	a1 f4       	brne	.+40     	; 0x5d56 <follow_path+0x11a>
    5d2e:	08 97       	sbiw	r24, 0x08	; 8
    5d30:	09 f0       	breq	.+2      	; 0x5d34 <follow_path+0xf8>
    5d32:	81 c0       	rjmp	.+258    	; 0x5e36 <follow_path+0x1fa>
    5d34:	bb 0f       	add	r27, r27
    5d36:	bb 0f       	add	r27, r27
    5d38:	28 e0       	ldi	r18, 0x08	; 8
    5d3a:	30 e0       	ldi	r19, 0x00	; 0
    5d3c:	8b e0       	ldi	r24, 0x0B	; 11
    5d3e:	90 e0       	ldi	r25, 0x00	; 0
    5d40:	a8 01       	movw	r20, r16
    5d42:	8a 01       	movw	r16, r20
    5d44:	0f 5f       	subi	r16, 0xFF	; 255
    5d46:	1f 4f       	sbci	r17, 0xFF	; 255
    5d48:	f5 01       	movw	r30, r10
    5d4a:	e4 0f       	add	r30, r20
    5d4c:	f5 1f       	adc	r31, r21
    5d4e:	a0 81       	ld	r26, Z
    5d50:	a1 32       	cpi	r26, 0x21	; 33
    5d52:	28 f7       	brcc	.-54     	; 0x5d1e <follow_path+0xe2>
    5d54:	41 c0       	rjmp	.+130    	; 0x5dd8 <follow_path+0x19c>
    5d56:	28 17       	cp	r18, r24
    5d58:	39 07       	cpc	r19, r25
    5d5a:	08 f0       	brcs	.+2      	; 0x5d5e <follow_path+0x122>
    5d5c:	6c c0       	rjmp	.+216    	; 0x5e36 <follow_path+0x1fa>
    5d5e:	a7 fd       	sbrc	r26, 7
    5d60:	b3 60       	ori	r27, 0x03	; 3
    5d62:	6f e7       	ldi	r22, 0x7F	; 127
    5d64:	6a 0f       	add	r22, r26
    5d66:	6f 31       	cpi	r22, 0x1F	; 31
    5d68:	20 f0       	brcs	.+8      	; 0x5d72 <follow_path+0x136>
    5d6a:	60 e2       	ldi	r22, 0x20	; 32
    5d6c:	6a 0f       	add	r22, r26
    5d6e:	6d 31       	cpi	r22, 0x1D	; 29
    5d70:	38 f5       	brcc	.+78     	; 0x5dc0 <follow_path+0x184>
    5d72:	4e 5f       	subi	r20, 0xFE	; 254
    5d74:	5f 4f       	sbci	r21, 0xFF	; 255
    5d76:	f5 01       	movw	r30, r10
    5d78:	e0 0f       	add	r30, r16
    5d7a:	f1 1f       	adc	r31, r17
    5d7c:	10 81       	ld	r17, Z
    5d7e:	60 ec       	ldi	r22, 0xC0	; 192
    5d80:	61 0f       	add	r22, r17
    5d82:	6f 33       	cpi	r22, 0x3F	; 63
    5d84:	28 f0       	brcs	.+10     	; 0x5d90 <follow_path+0x154>
    5d86:	60 e8       	ldi	r22, 0x80	; 128
    5d88:	61 0f       	add	r22, r17
    5d8a:	6d 37       	cpi	r22, 0x7D	; 125
    5d8c:	08 f0       	brcs	.+2      	; 0x5d90 <follow_path+0x154>
    5d8e:	53 c0       	rjmp	.+166    	; 0x5e36 <follow_path+0x1fa>
    5d90:	bc 01       	movw	r22, r24
    5d92:	61 50       	subi	r22, 0x01	; 1
    5d94:	71 09       	sbc	r23, r1
    5d96:	26 17       	cp	r18, r22
    5d98:	37 07       	cpc	r19, r23
    5d9a:	08 f0       	brcs	.+2      	; 0x5d9e <follow_path+0x162>
    5d9c:	4c c0       	rjmp	.+152    	; 0x5e36 <follow_path+0x1fa>
    5d9e:	49 01       	movw	r8, r18
    5da0:	ff ef       	ldi	r31, 0xFF	; 255
    5da2:	8f 1a       	sub	r8, r31
    5da4:	9f 0a       	sbc	r9, r31
    5da6:	b6 01       	movw	r22, r12
    5da8:	62 0f       	add	r22, r18
    5daa:	73 1f       	adc	r23, r19
    5dac:	fb 01       	movw	r30, r22
    5dae:	a0 83       	st	Z, r26
    5db0:	2e 5f       	subi	r18, 0xFE	; 254
    5db2:	3f 4f       	sbci	r19, 0xFF	; 255
    5db4:	8c 0c       	add	r8, r12
    5db6:	9d 1c       	adc	r9, r13
    5db8:	f4 01       	movw	r30, r8
    5dba:	10 83       	st	Z, r17
    5dbc:	8a 01       	movw	r16, r20
    5dbe:	c0 cf       	rjmp	.-128    	; 0x5d40 <follow_path+0x104>
    5dc0:	4a 2f       	mov	r20, r26
    5dc2:	50 e0       	ldi	r21, 0x00	; 0
    5dc4:	e0 ef       	ldi	r30, 0xF0	; 240
    5dc6:	f6 e2       	ldi	r31, 0x26	; 38
    5dc8:	61 91       	ld	r22, Z+
    5dca:	66 23       	and	r22, r22
    5dcc:	09 f1       	breq	.+66     	; 0x5e10 <follow_path+0x1d4>
    5dce:	70 e0       	ldi	r23, 0x00	; 0
    5dd0:	64 17       	cp	r22, r20
    5dd2:	75 07       	cpc	r23, r21
    5dd4:	c9 f7       	brne	.-14     	; 0x5dc8 <follow_path+0x18c>
    5dd6:	2f c0       	rjmp	.+94     	; 0x5e36 <follow_path+0x1fa>
    5dd8:	44 e0       	ldi	r20, 0x04	; 4
    5dda:	01 c0       	rjmp	.+2      	; 0x5dde <follow_path+0x1a2>
    5ddc:	40 e0       	ldi	r20, 0x00	; 0
    5dde:	23 2b       	or	r18, r19
    5de0:	51 f1       	breq	.+84     	; 0x5e36 <follow_path+0x1fa>
    5de2:	f6 01       	movw	r30, r12
    5de4:	20 81       	ld	r18, Z
    5de6:	25 3e       	cpi	r18, 0xE5	; 229
    5de8:	09 f4       	brne	.+2      	; 0x5dec <follow_path+0x1b0>
    5dea:	f0 82       	st	Z, r15
    5dec:	08 97       	sbiw	r24, 0x08	; 8
    5dee:	11 f4       	brne	.+4      	; 0x5df4 <follow_path+0x1b8>
    5df0:	bb 0f       	add	r27, r27
    5df2:	bb 0f       	add	r27, r27
    5df4:	8b 2f       	mov	r24, r27
    5df6:	83 70       	andi	r24, 0x03	; 3
    5df8:	81 30       	cpi	r24, 0x01	; 1
    5dfa:	09 f4       	brne	.+2      	; 0x5dfe <follow_path+0x1c2>
    5dfc:	40 61       	ori	r20, 0x10	; 16
    5dfe:	bc 70       	andi	r27, 0x0C	; 12
    5e00:	b4 30       	cpi	r27, 0x04	; 4
    5e02:	09 f4       	brne	.+2      	; 0x5e06 <follow_path+0x1ca>
    5e04:	48 60       	ori	r20, 0x08	; 8
    5e06:	0a 0d       	add	r16, r10
    5e08:	1b 1d       	adc	r17, r11
    5e0a:	f6 01       	movw	r30, r12
    5e0c:	43 87       	std	Z+11, r20	; 0x0b
    5e0e:	15 c0       	rjmp	.+42     	; 0x5e3a <follow_path+0x1fe>
    5e10:	4f eb       	ldi	r20, 0xBF	; 191
    5e12:	4a 0f       	add	r20, r26
    5e14:	4a 31       	cpi	r20, 0x1A	; 26
    5e16:	10 f4       	brcc	.+4      	; 0x5e1c <follow_path+0x1e0>
    5e18:	b2 60       	ori	r27, 0x02	; 2
    5e1a:	06 c0       	rjmp	.+12     	; 0x5e28 <follow_path+0x1ec>
    5e1c:	4f e9       	ldi	r20, 0x9F	; 159
    5e1e:	4a 0f       	add	r20, r26
    5e20:	4a 31       	cpi	r20, 0x1A	; 26
    5e22:	10 f4       	brcc	.+4      	; 0x5e28 <follow_path+0x1ec>
    5e24:	b1 60       	ori	r27, 0x01	; 1
    5e26:	a0 52       	subi	r26, 0x20	; 32
    5e28:	f6 01       	movw	r30, r12
    5e2a:	e2 0f       	add	r30, r18
    5e2c:	f3 1f       	adc	r31, r19
    5e2e:	a0 83       	st	Z, r26
    5e30:	2f 5f       	subi	r18, 0xFF	; 255
    5e32:	3f 4f       	sbci	r19, 0xFF	; 255
    5e34:	85 cf       	rjmp	.-246    	; 0x5d40 <follow_path+0x104>
    5e36:	86 e0       	ldi	r24, 0x06	; 6
    5e38:	64 c0       	rjmp	.+200    	; 0x5f02 <follow_path+0x2c6>
    5e3a:	60 e0       	ldi	r22, 0x00	; 0
    5e3c:	70 e0       	ldi	r23, 0x00	; 0
    5e3e:	ce 01       	movw	r24, r28
    5e40:	8b db       	rcall	.-2282   	; 0x5558 <dir_sdi>
    5e42:	81 11       	cpse	r24, r1
    5e44:	24 c0       	rjmp	.+72     	; 0x5e8e <follow_path+0x252>
    5e46:	4e 85       	ldd	r20, Y+14	; 0x0e
    5e48:	5f 85       	ldd	r21, Y+15	; 0x0f
    5e4a:	68 89       	ldd	r22, Y+16	; 0x10
    5e4c:	79 89       	ldd	r23, Y+17	; 0x11
    5e4e:	88 81       	ld	r24, Y
    5e50:	99 81       	ldd	r25, Y+1	; 0x01
    5e52:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <move_window>
    5e56:	81 11       	cpse	r24, r1
    5e58:	1a c0       	rjmp	.+52     	; 0x5e8e <follow_path+0x252>
    5e5a:	ea 89       	ldd	r30, Y+18	; 0x12
    5e5c:	fb 89       	ldd	r31, Y+19	; 0x13
    5e5e:	90 81       	ld	r25, Z
    5e60:	99 23       	and	r25, r25
    5e62:	a1 f0       	breq	.+40     	; 0x5e8c <follow_path+0x250>
    5e64:	93 85       	ldd	r25, Z+11	; 0x0b
    5e66:	93 fd       	sbrc	r25, 3
    5e68:	0c c0       	rjmp	.+24     	; 0x5e82 <follow_path+0x246>
    5e6a:	ac 89       	ldd	r26, Y+20	; 0x14
    5e6c:	bd 89       	ldd	r27, Y+21	; 0x15
    5e6e:	9f 01       	movw	r18, r30
    5e70:	25 5f       	subi	r18, 0xF5	; 245
    5e72:	3f 4f       	sbci	r19, 0xFF	; 255
    5e74:	e2 17       	cp	r30, r18
    5e76:	f3 07       	cpc	r31, r19
    5e78:	51 f0       	breq	.+20     	; 0x5e8e <follow_path+0x252>
    5e7a:	41 91       	ld	r20, Z+
    5e7c:	9d 91       	ld	r25, X+
    5e7e:	49 17       	cp	r20, r25
    5e80:	c9 f3       	breq	.-14     	; 0x5e74 <follow_path+0x238>
    5e82:	60 e0       	ldi	r22, 0x00	; 0
    5e84:	70 e0       	ldi	r23, 0x00	; 0
    5e86:	ce 01       	movw	r24, r28
    5e88:	db dd       	rcall	.-1098   	; 0x5a40 <dir_next>
    5e8a:	db cf       	rjmp	.-74     	; 0x5e42 <follow_path+0x206>
    5e8c:	84 e0       	ldi	r24, 0x04	; 4
    5e8e:	ec 89       	ldd	r30, Y+20	; 0x14
    5e90:	fd 89       	ldd	r31, Y+21	; 0x15
    5e92:	93 85       	ldd	r25, Z+11	; 0x0b
    5e94:	88 23       	and	r24, r24
    5e96:	a1 f0       	breq	.+40     	; 0x5ec0 <follow_path+0x284>
    5e98:	84 30       	cpi	r24, 0x04	; 4
    5e9a:	99 f5       	brne	.+102    	; 0x5f02 <follow_path+0x2c6>
    5e9c:	29 2f       	mov	r18, r25
    5e9e:	24 70       	andi	r18, 0x04	; 4
    5ea0:	95 ff       	sbrs	r25, 5
    5ea2:	0b c0       	rjmp	.+22     	; 0x5eba <follow_path+0x27e>
    5ea4:	1e 82       	std	Y+6, r1	; 0x06
    5ea6:	1f 82       	std	Y+7, r1	; 0x07
    5ea8:	18 86       	std	Y+8, r1	; 0x08
    5eaa:	19 86       	std	Y+9, r1	; 0x09
    5eac:	1a 8a       	std	Y+18, r1	; 0x12
    5eae:	1b 8a       	std	Y+19, r1	; 0x13
    5eb0:	22 23       	and	r18, r18
    5eb2:	09 f4       	brne	.+2      	; 0x5eb6 <follow_path+0x27a>
    5eb4:	f7 ce       	rjmp	.-530    	; 0x5ca4 <follow_path+0x68>
    5eb6:	80 e0       	ldi	r24, 0x00	; 0
    5eb8:	24 c0       	rjmp	.+72     	; 0x5f02 <follow_path+0x2c6>
    5eba:	22 23       	and	r18, r18
    5ebc:	09 f1       	breq	.+66     	; 0x5f00 <follow_path+0x2c4>
    5ebe:	21 c0       	rjmp	.+66     	; 0x5f02 <follow_path+0x2c6>
    5ec0:	92 fd       	sbrc	r25, 2
    5ec2:	f9 cf       	rjmp	.-14     	; 0x5eb6 <follow_path+0x27a>
    5ec4:	ea 89       	ldd	r30, Y+18	; 0x12
    5ec6:	fb 89       	ldd	r31, Y+19	; 0x13
    5ec8:	83 85       	ldd	r24, Z+11	; 0x0b
    5eca:	84 ff       	sbrs	r24, 4
    5ecc:	19 c0       	rjmp	.+50     	; 0x5f00 <follow_path+0x2c4>
    5ece:	42 8d       	ldd	r20, Z+26	; 0x1a
    5ed0:	53 8d       	ldd	r21, Z+27	; 0x1b
    5ed2:	60 e0       	ldi	r22, 0x00	; 0
    5ed4:	70 e0       	ldi	r23, 0x00	; 0
    5ed6:	a8 81       	ld	r26, Y
    5ed8:	b9 81       	ldd	r27, Y+1	; 0x01
    5eda:	8c 91       	ld	r24, X
    5edc:	83 30       	cpi	r24, 0x03	; 3
    5ede:	59 f4       	brne	.+22     	; 0x5ef6 <follow_path+0x2ba>
    5ee0:	84 89       	ldd	r24, Z+20	; 0x14
    5ee2:	95 89       	ldd	r25, Z+21	; 0x15
    5ee4:	a0 e0       	ldi	r26, 0x00	; 0
    5ee6:	b0 e0       	ldi	r27, 0x00	; 0
    5ee8:	dc 01       	movw	r26, r24
    5eea:	99 27       	eor	r25, r25
    5eec:	88 27       	eor	r24, r24
    5eee:	48 2b       	or	r20, r24
    5ef0:	59 2b       	or	r21, r25
    5ef2:	6a 2b       	or	r22, r26
    5ef4:	7b 2b       	or	r23, r27
    5ef6:	4e 83       	std	Y+6, r20	; 0x06
    5ef8:	5f 83       	std	Y+7, r21	; 0x07
    5efa:	68 87       	std	Y+8, r22	; 0x08
    5efc:	79 87       	std	Y+9, r23	; 0x09
    5efe:	d2 ce       	rjmp	.-604    	; 0x5ca4 <follow_path+0x68>
    5f00:	85 e0       	ldi	r24, 0x05	; 5
    5f02:	df 91       	pop	r29
    5f04:	cf 91       	pop	r28
    5f06:	1f 91       	pop	r17
    5f08:	0f 91       	pop	r16
    5f0a:	ff 90       	pop	r15
    5f0c:	df 90       	pop	r13
    5f0e:	cf 90       	pop	r12
    5f10:	bf 90       	pop	r11
    5f12:	af 90       	pop	r10
    5f14:	9f 90       	pop	r9
    5f16:	8f 90       	pop	r8
    5f18:	08 95       	ret

00005f1a <dir_alloc.constprop.10>:
    5f1a:	cf 93       	push	r28
    5f1c:	df 93       	push	r29
    5f1e:	ec 01       	movw	r28, r24
    5f20:	60 e0       	ldi	r22, 0x00	; 0
    5f22:	70 e0       	ldi	r23, 0x00	; 0
    5f24:	19 db       	rcall	.-2510   	; 0x5558 <dir_sdi>
    5f26:	81 11       	cpse	r24, r1
    5f28:	16 c0       	rjmp	.+44     	; 0x5f56 <dir_alloc.constprop.10+0x3c>
    5f2a:	4e 85       	ldd	r20, Y+14	; 0x0e
    5f2c:	5f 85       	ldd	r21, Y+15	; 0x0f
    5f2e:	68 89       	ldd	r22, Y+16	; 0x10
    5f30:	79 89       	ldd	r23, Y+17	; 0x11
    5f32:	88 81       	ld	r24, Y
    5f34:	99 81       	ldd	r25, Y+1	; 0x01
    5f36:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <move_window>
    5f3a:	81 11       	cpse	r24, r1
    5f3c:	0c c0       	rjmp	.+24     	; 0x5f56 <dir_alloc.constprop.10+0x3c>
    5f3e:	ea 89       	ldd	r30, Y+18	; 0x12
    5f40:	fb 89       	ldd	r31, Y+19	; 0x13
    5f42:	90 81       	ld	r25, Z
    5f44:	95 3e       	cpi	r25, 0xE5	; 229
    5f46:	51 f0       	breq	.+20     	; 0x5f5c <dir_alloc.constprop.10+0x42>
    5f48:	99 23       	and	r25, r25
    5f4a:	41 f0       	breq	.+16     	; 0x5f5c <dir_alloc.constprop.10+0x42>
    5f4c:	61 e0       	ldi	r22, 0x01	; 1
    5f4e:	70 e0       	ldi	r23, 0x00	; 0
    5f50:	ce 01       	movw	r24, r28
    5f52:	76 dd       	rcall	.-1300   	; 0x5a40 <dir_next>
    5f54:	e8 cf       	rjmp	.-48     	; 0x5f26 <dir_alloc.constprop.10+0xc>
    5f56:	84 30       	cpi	r24, 0x04	; 4
    5f58:	09 f4       	brne	.+2      	; 0x5f5c <dir_alloc.constprop.10+0x42>
    5f5a:	87 e0       	ldi	r24, 0x07	; 7
    5f5c:	df 91       	pop	r29
    5f5e:	cf 91       	pop	r28
    5f60:	08 95       	ret

00005f62 <dir_register>:
    5f62:	1f 93       	push	r17
    5f64:	cf 93       	push	r28
    5f66:	df 93       	push	r29
    5f68:	ec 01       	movw	r28, r24
    5f6a:	d7 df       	rcall	.-82     	; 0x5f1a <dir_alloc.constprop.10>
    5f6c:	18 2f       	mov	r17, r24
    5f6e:	81 11       	cpse	r24, r1
    5f70:	1f c0       	rjmp	.+62     	; 0x5fb0 <dir_register+0x4e>
    5f72:	4e 85       	ldd	r20, Y+14	; 0x0e
    5f74:	5f 85       	ldd	r21, Y+15	; 0x0f
    5f76:	68 89       	ldd	r22, Y+16	; 0x10
    5f78:	79 89       	ldd	r23, Y+17	; 0x11
    5f7a:	88 81       	ld	r24, Y
    5f7c:	99 81       	ldd	r25, Y+1	; 0x01
    5f7e:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <move_window>
    5f82:	18 2f       	mov	r17, r24
    5f84:	81 11       	cpse	r24, r1
    5f86:	14 c0       	rjmp	.+40     	; 0x5fb0 <dir_register+0x4e>
    5f88:	40 e2       	ldi	r20, 0x20	; 32
    5f8a:	50 e0       	ldi	r21, 0x00	; 0
    5f8c:	60 e0       	ldi	r22, 0x00	; 0
    5f8e:	70 e0       	ldi	r23, 0x00	; 0
    5f90:	8a 89       	ldd	r24, Y+18	; 0x12
    5f92:	9b 89       	ldd	r25, Y+19	; 0x13
    5f94:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <mem_set>
    5f98:	6c 89       	ldd	r22, Y+20	; 0x14
    5f9a:	7d 89       	ldd	r23, Y+21	; 0x15
    5f9c:	4b e0       	ldi	r20, 0x0B	; 11
    5f9e:	50 e0       	ldi	r21, 0x00	; 0
    5fa0:	8a 89       	ldd	r24, Y+18	; 0x12
    5fa2:	9b 89       	ldd	r25, Y+19	; 0x13
    5fa4:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <mem_cpy>
    5fa8:	e8 81       	ld	r30, Y
    5faa:	f9 81       	ldd	r31, Y+1	; 0x01
    5fac:	81 e0       	ldi	r24, 0x01	; 1
    5fae:	84 83       	std	Z+4, r24	; 0x04
    5fb0:	81 2f       	mov	r24, r17
    5fb2:	df 91       	pop	r29
    5fb4:	cf 91       	pop	r28
    5fb6:	1f 91       	pop	r17
    5fb8:	08 95       	ret

00005fba <remove_chain>:
    5fba:	8f 92       	push	r8
    5fbc:	9f 92       	push	r9
    5fbe:	af 92       	push	r10
    5fc0:	bf 92       	push	r11
    5fc2:	cf 92       	push	r12
    5fc4:	df 92       	push	r13
    5fc6:	ef 92       	push	r14
    5fc8:	ff 92       	push	r15
    5fca:	0f 93       	push	r16
    5fcc:	1f 93       	push	r17
    5fce:	cf 93       	push	r28
    5fd0:	df 93       	push	r29
    5fd2:	ec 01       	movw	r28, r24
    5fd4:	6a 01       	movw	r12, r20
    5fd6:	7b 01       	movw	r14, r22
    5fd8:	42 30       	cpi	r20, 0x02	; 2
    5fda:	51 05       	cpc	r21, r1
    5fdc:	61 05       	cpc	r22, r1
    5fde:	71 05       	cpc	r23, r1
    5fe0:	08 f4       	brcc	.+2      	; 0x5fe4 <remove_chain+0x2a>
    5fe2:	4f c0       	rjmp	.+158    	; 0x6082 <remove_chain+0xc8>
    5fe4:	4e 89       	ldd	r20, Y+22	; 0x16
    5fe6:	5f 89       	ldd	r21, Y+23	; 0x17
    5fe8:	68 8d       	ldd	r22, Y+24	; 0x18
    5fea:	79 8d       	ldd	r23, Y+25	; 0x19
    5fec:	c4 16       	cp	r12, r20
    5fee:	d5 06       	cpc	r13, r21
    5ff0:	e6 06       	cpc	r14, r22
    5ff2:	f7 06       	cpc	r15, r23
    5ff4:	08 f0       	brcs	.+2      	; 0x5ff8 <remove_chain+0x3e>
    5ff6:	45 c0       	rjmp	.+138    	; 0x6082 <remove_chain+0xc8>
    5ff8:	4e 89       	ldd	r20, Y+22	; 0x16
    5ffa:	5f 89       	ldd	r21, Y+23	; 0x17
    5ffc:	68 8d       	ldd	r22, Y+24	; 0x18
    5ffe:	79 8d       	ldd	r23, Y+25	; 0x19
    6000:	c4 16       	cp	r12, r20
    6002:	d5 06       	cpc	r13, r21
    6004:	e6 06       	cpc	r14, r22
    6006:	f7 06       	cpc	r15, r23
    6008:	58 f4       	brcc	.+22     	; 0x6020 <remove_chain+0x66>
    600a:	b7 01       	movw	r22, r14
    600c:	a6 01       	movw	r20, r12
    600e:	ce 01       	movw	r24, r28
    6010:	df d9       	rcall	.-3138   	; 0x53d0 <get_fat>
    6012:	4b 01       	movw	r8, r22
    6014:	5c 01       	movw	r10, r24
    6016:	61 15       	cp	r22, r1
    6018:	71 05       	cpc	r23, r1
    601a:	81 05       	cpc	r24, r1
    601c:	91 05       	cpc	r25, r1
    601e:	11 f4       	brne	.+4      	; 0x6024 <remove_chain+0x6a>
    6020:	80 e0       	ldi	r24, 0x00	; 0
    6022:	30 c0       	rjmp	.+96     	; 0x6084 <remove_chain+0xca>
    6024:	81 e0       	ldi	r24, 0x01	; 1
    6026:	88 16       	cp	r8, r24
    6028:	91 04       	cpc	r9, r1
    602a:	a1 04       	cpc	r10, r1
    602c:	b1 04       	cpc	r11, r1
    602e:	49 f1       	breq	.+82     	; 0x6082 <remove_chain+0xc8>
    6030:	8f ef       	ldi	r24, 0xFF	; 255
    6032:	88 16       	cp	r8, r24
    6034:	98 06       	cpc	r9, r24
    6036:	a8 06       	cpc	r10, r24
    6038:	b8 06       	cpc	r11, r24
    603a:	09 f1       	breq	.+66     	; 0x607e <remove_chain+0xc4>
    603c:	00 e0       	ldi	r16, 0x00	; 0
    603e:	10 e0       	ldi	r17, 0x00	; 0
    6040:	98 01       	movw	r18, r16
    6042:	b7 01       	movw	r22, r14
    6044:	a6 01       	movw	r20, r12
    6046:	ce 01       	movw	r24, r28
    6048:	2c db       	rcall	.-2472   	; 0x56a2 <put_fat>
    604a:	81 11       	cpse	r24, r1
    604c:	1b c0       	rjmp	.+54     	; 0x6084 <remove_chain+0xca>
    604e:	4e 85       	ldd	r20, Y+14	; 0x0e
    6050:	5f 85       	ldd	r21, Y+15	; 0x0f
    6052:	68 89       	ldd	r22, Y+16	; 0x10
    6054:	79 89       	ldd	r23, Y+17	; 0x11
    6056:	4f 3f       	cpi	r20, 0xFF	; 255
    6058:	8f ef       	ldi	r24, 0xFF	; 255
    605a:	58 07       	cpc	r21, r24
    605c:	68 07       	cpc	r22, r24
    605e:	78 07       	cpc	r23, r24
    6060:	59 f0       	breq	.+22     	; 0x6078 <remove_chain+0xbe>
    6062:	4f 5f       	subi	r20, 0xFF	; 255
    6064:	5f 4f       	sbci	r21, 0xFF	; 255
    6066:	6f 4f       	sbci	r22, 0xFF	; 255
    6068:	7f 4f       	sbci	r23, 0xFF	; 255
    606a:	4e 87       	std	Y+14, r20	; 0x0e
    606c:	5f 87       	std	Y+15, r21	; 0x0f
    606e:	68 8b       	std	Y+16, r22	; 0x10
    6070:	79 8b       	std	Y+17, r23	; 0x11
    6072:	8d 81       	ldd	r24, Y+5	; 0x05
    6074:	81 60       	ori	r24, 0x01	; 1
    6076:	8d 83       	std	Y+5, r24	; 0x05
    6078:	75 01       	movw	r14, r10
    607a:	64 01       	movw	r12, r8
    607c:	bd cf       	rjmp	.-134    	; 0x5ff8 <remove_chain+0x3e>
    607e:	81 e0       	ldi	r24, 0x01	; 1
    6080:	01 c0       	rjmp	.+2      	; 0x6084 <remove_chain+0xca>
    6082:	82 e0       	ldi	r24, 0x02	; 2
    6084:	df 91       	pop	r29
    6086:	cf 91       	pop	r28
    6088:	1f 91       	pop	r17
    608a:	0f 91       	pop	r16
    608c:	ff 90       	pop	r15
    608e:	ef 90       	pop	r14
    6090:	df 90       	pop	r13
    6092:	cf 90       	pop	r12
    6094:	bf 90       	pop	r11
    6096:	af 90       	pop	r10
    6098:	9f 90       	pop	r9
    609a:	8f 90       	pop	r8
    609c:	08 95       	ret

0000609e <f_mount>:
    609e:	cf 93       	push	r28
    60a0:	df 93       	push	r29
    60a2:	cd b7       	in	r28, 0x3d	; 61
    60a4:	de b7       	in	r29, 0x3e	; 62
    60a6:	27 97       	sbiw	r28, 0x07	; 7
    60a8:	cd bf       	out	0x3d, r28	; 61
    60aa:	de bf       	out	0x3e, r29	; 62
    60ac:	8b 83       	std	Y+3, r24	; 0x03
    60ae:	9c 83       	std	Y+4, r25	; 0x04
    60b0:	6d 83       	std	Y+5, r22	; 0x05
    60b2:	7e 83       	std	Y+6, r23	; 0x06
    60b4:	69 83       	std	Y+1, r22	; 0x01
    60b6:	7a 83       	std	Y+2, r23	; 0x02
    60b8:	ce 01       	movw	r24, r28
    60ba:	01 96       	adiw	r24, 0x01	; 1
    60bc:	4f 83       	std	Y+7, r20	; 0x07
    60be:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <get_ldnumber>
    60c2:	4f 81       	ldd	r20, Y+7	; 0x07
    60c4:	97 fd       	sbrc	r25, 7
    60c6:	22 c0       	rjmp	.+68     	; 0x610c <f_mount+0x6e>
    60c8:	88 0f       	add	r24, r24
    60ca:	99 1f       	adc	r25, r25
    60cc:	fc 01       	movw	r30, r24
    60ce:	e1 5e       	subi	r30, 0xE1	; 225
    60d0:	f4 4d       	sbci	r31, 0xD4	; 212
    60d2:	01 90       	ld	r0, Z+
    60d4:	f0 81       	ld	r31, Z
    60d6:	e0 2d       	mov	r30, r0
    60d8:	30 97       	sbiw	r30, 0x00	; 0
    60da:	09 f0       	breq	.+2      	; 0x60de <f_mount+0x40>
    60dc:	10 82       	st	Z, r1
    60de:	eb 81       	ldd	r30, Y+3	; 0x03
    60e0:	fc 81       	ldd	r31, Y+4	; 0x04
    60e2:	30 97       	sbiw	r30, 0x00	; 0
    60e4:	09 f0       	breq	.+2      	; 0x60e8 <f_mount+0x4a>
    60e6:	10 82       	st	Z, r1
    60e8:	dc 01       	movw	r26, r24
    60ea:	a1 5e       	subi	r26, 0xE1	; 225
    60ec:	b4 4d       	sbci	r27, 0xD4	; 212
    60ee:	ed 93       	st	X+, r30
    60f0:	fc 93       	st	X, r31
    60f2:	ef 2b       	or	r30, r31
    60f4:	69 f0       	breq	.+26     	; 0x6110 <f_mount+0x72>
    60f6:	41 30       	cpi	r20, 0x01	; 1
    60f8:	59 f4       	brne	.+22     	; 0x6110 <f_mount+0x72>
    60fa:	40 e0       	ldi	r20, 0x00	; 0
    60fc:	be 01       	movw	r22, r28
    60fe:	6b 5f       	subi	r22, 0xFB	; 251
    6100:	7f 4f       	sbci	r23, 0xFF	; 255
    6102:	ce 01       	movw	r24, r28
    6104:	03 96       	adiw	r24, 0x03	; 3
    6106:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <find_volume>
    610a:	03 c0       	rjmp	.+6      	; 0x6112 <f_mount+0x74>
    610c:	8b e0       	ldi	r24, 0x0B	; 11
    610e:	01 c0       	rjmp	.+2      	; 0x6112 <f_mount+0x74>
    6110:	80 e0       	ldi	r24, 0x00	; 0
    6112:	27 96       	adiw	r28, 0x07	; 7
    6114:	cd bf       	out	0x3d, r28	; 61
    6116:	de bf       	out	0x3e, r29	; 62
    6118:	df 91       	pop	r29
    611a:	cf 91       	pop	r28
    611c:	08 95       	ret

0000611e <f_open>:
    611e:	4f 92       	push	r4
    6120:	5f 92       	push	r5
    6122:	6f 92       	push	r6
    6124:	7f 92       	push	r7
    6126:	9f 92       	push	r9
    6128:	af 92       	push	r10
    612a:	bf 92       	push	r11
    612c:	cf 92       	push	r12
    612e:	df 92       	push	r13
    6130:	ef 92       	push	r14
    6132:	ff 92       	push	r15
    6134:	0f 93       	push	r16
    6136:	1f 93       	push	r17
    6138:	cf 93       	push	r28
    613a:	df 93       	push	r29
    613c:	cd b7       	in	r28, 0x3d	; 61
    613e:	de b7       	in	r29, 0x3e	; 62
    6140:	a4 97       	sbiw	r28, 0x24	; 36
    6142:	cd bf       	out	0x3d, r28	; 61
    6144:	de bf       	out	0x3e, r29	; 62
    6146:	5c 01       	movw	r10, r24
    6148:	6b a3       	std	Y+35, r22	; 0x23
    614a:	7c a3       	std	Y+36, r23	; 0x24
    614c:	f4 2e       	mov	r15, r20
    614e:	00 97       	sbiw	r24, 0x00	; 0
    6150:	09 f4       	brne	.+2      	; 0x6154 <f_open+0x36>
    6152:	f3 c0       	rjmp	.+486    	; 0x633a <f_open+0x21c>
    6154:	dc 01       	movw	r26, r24
    6156:	1d 92       	st	X+, r1
    6158:	1c 92       	st	X, r1
    615a:	4e 71       	andi	r20, 0x1E	; 30
    615c:	be 01       	movw	r22, r28
    615e:	6d 5d       	subi	r22, 0xDD	; 221
    6160:	7f 4f       	sbci	r23, 0xFF	; 255
    6162:	ce 01       	movw	r24, r28
    6164:	01 96       	adiw	r24, 0x01	; 1
    6166:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <find_volume>
    616a:	81 11       	cpse	r24, r1
    616c:	ed c0       	rjmp	.+474    	; 0x6348 <f_open+0x22a>
    616e:	ce 01       	movw	r24, r28
    6170:	47 96       	adiw	r24, 0x17	; 23
    6172:	8d 8b       	std	Y+21, r24	; 0x15
    6174:	9e 8b       	std	Y+22, r25	; 0x16
    6176:	6b a1       	ldd	r22, Y+35	; 0x23
    6178:	7c a1       	ldd	r23, Y+36	; 0x24
    617a:	46 97       	sbiw	r24, 0x16	; 22
    617c:	5f dd       	rcall	.-1346   	; 0x5c3c <follow_path>
    617e:	0b 89       	ldd	r16, Y+19	; 0x13
    6180:	1c 89       	ldd	r17, Y+20	; 0x14
    6182:	81 11       	cpse	r24, r1
    6184:	04 c0       	rjmp	.+8      	; 0x618e <f_open+0x70>
    6186:	01 15       	cp	r16, r1
    6188:	11 05       	cpc	r17, r1
    618a:	09 f4       	brne	.+2      	; 0x618e <f_open+0x70>
    618c:	86 e0       	ldi	r24, 0x06	; 6
    618e:	bf 2d       	mov	r27, r15
    6190:	bf 71       	andi	r27, 0x1F	; 31
    6192:	9b 2e       	mov	r9, r27
    6194:	9f 2d       	mov	r25, r15
    6196:	9c 71       	andi	r25, 0x1C	; 28
    6198:	09 f4       	brne	.+2      	; 0x619c <f_open+0x7e>
    619a:	71 c0       	rjmp	.+226    	; 0x627e <f_open+0x160>
    619c:	88 23       	and	r24, r24
    619e:	69 f0       	breq	.+26     	; 0x61ba <f_open+0x9c>
    61a0:	84 30       	cpi	r24, 0x04	; 4
    61a2:	19 f4       	brne	.+6      	; 0x61aa <f_open+0x8c>
    61a4:	ce 01       	movw	r24, r28
    61a6:	01 96       	adiw	r24, 0x01	; 1
    61a8:	dc de       	rcall	.-584    	; 0x5f62 <dir_register>
    61aa:	e9 2d       	mov	r30, r9
    61ac:	e8 60       	ori	r30, 0x08	; 8
    61ae:	9e 2e       	mov	r9, r30
    61b0:	0b 89       	ldd	r16, Y+19	; 0x13
    61b2:	1c 89       	ldd	r17, Y+20	; 0x14
    61b4:	88 23       	and	r24, r24
    61b6:	49 f0       	breq	.+18     	; 0x61ca <f_open+0xac>
    61b8:	c7 c0       	rjmp	.+398    	; 0x6348 <f_open+0x22a>
    61ba:	d8 01       	movw	r26, r16
    61bc:	1b 96       	adiw	r26, 0x0b	; 11
    61be:	8c 91       	ld	r24, X
    61c0:	81 71       	andi	r24, 0x11	; 17
    61c2:	09 f0       	breq	.+2      	; 0x61c6 <f_open+0xa8>
    61c4:	c0 c0       	rjmp	.+384    	; 0x6346 <f_open+0x228>
    61c6:	f2 fc       	sbrc	r15, 2
    61c8:	ba c0       	rjmp	.+372    	; 0x633e <f_open+0x220>
    61ca:	93 fe       	sbrs	r9, 3
    61cc:	63 c0       	rjmp	.+198    	; 0x6294 <f_open+0x176>
    61ce:	80 e0       	ldi	r24, 0x00	; 0
    61d0:	90 e0       	ldi	r25, 0x00	; 0
    61d2:	a1 e2       	ldi	r26, 0x21	; 33
    61d4:	b6 e4       	ldi	r27, 0x46	; 70
    61d6:	f8 01       	movw	r30, r16
    61d8:	86 87       	std	Z+14, r24	; 0x0e
    61da:	97 87       	std	Z+15, r25	; 0x0f
    61dc:	a0 8b       	std	Z+16, r26	; 0x10
    61de:	b1 8b       	std	Z+17, r27	; 0x11
    61e0:	86 8b       	std	Z+22, r24	; 0x16
    61e2:	97 8b       	std	Z+23, r25	; 0x17
    61e4:	a0 8f       	std	Z+24, r26	; 0x18
    61e6:	b1 8f       	std	Z+25, r27	; 0x19
    61e8:	13 86       	std	Z+11, r1	; 0x0b
    61ea:	d8 01       	movw	r26, r16
    61ec:	14 8e       	std	Z+28, r1	; 0x1c
    61ee:	15 8e       	std	Z+29, r1	; 0x1d
    61f0:	16 8e       	std	Z+30, r1	; 0x1e
    61f2:	17 8e       	std	Z+31, r1	; 0x1f
    61f4:	e9 81       	ldd	r30, Y+1	; 0x01
    61f6:	fa 81       	ldd	r31, Y+2	; 0x02
    61f8:	5a 96       	adiw	r26, 0x1a	; 26
    61fa:	cd 90       	ld	r12, X+
    61fc:	dc 90       	ld	r13, X
    61fe:	5b 97       	sbiw	r26, 0x1b	; 27
    6200:	e1 2c       	mov	r14, r1
    6202:	f1 2c       	mov	r15, r1
    6204:	80 81       	ld	r24, Z
    6206:	83 30       	cpi	r24, 0x03	; 3
    6208:	69 f4       	brne	.+26     	; 0x6224 <f_open+0x106>
    620a:	54 96       	adiw	r26, 0x14	; 20
    620c:	4d 91       	ld	r20, X+
    620e:	5c 91       	ld	r21, X
    6210:	55 97       	sbiw	r26, 0x15	; 21
    6212:	60 e0       	ldi	r22, 0x00	; 0
    6214:	70 e0       	ldi	r23, 0x00	; 0
    6216:	ba 01       	movw	r22, r20
    6218:	55 27       	eor	r21, r21
    621a:	44 27       	eor	r20, r20
    621c:	c4 2a       	or	r12, r20
    621e:	d5 2a       	or	r13, r21
    6220:	e6 2a       	or	r14, r22
    6222:	f7 2a       	or	r15, r23
    6224:	d8 01       	movw	r26, r16
    6226:	5a 96       	adiw	r26, 0x1a	; 26
    6228:	1d 92       	st	X+, r1
    622a:	1c 92       	st	X, r1
    622c:	5b 97       	sbiw	r26, 0x1b	; 27
    622e:	54 96       	adiw	r26, 0x14	; 20
    6230:	1d 92       	st	X+, r1
    6232:	1c 92       	st	X, r1
    6234:	55 97       	sbiw	r26, 0x15	; 21
    6236:	81 e0       	ldi	r24, 0x01	; 1
    6238:	84 83       	std	Z+4, r24	; 0x04
    623a:	c1 14       	cp	r12, r1
    623c:	d1 04       	cpc	r13, r1
    623e:	e1 04       	cpc	r14, r1
    6240:	f1 04       	cpc	r15, r1
    6242:	41 f1       	breq	.+80     	; 0x6294 <f_open+0x176>
    6244:	46 a4       	ldd	r4, Z+46	; 0x2e
    6246:	57 a4       	ldd	r5, Z+47	; 0x2f
    6248:	60 a8       	ldd	r6, Z+48	; 0x30
    624a:	71 a8       	ldd	r7, Z+49	; 0x31
    624c:	b7 01       	movw	r22, r14
    624e:	a6 01       	movw	r20, r12
    6250:	cf 01       	movw	r24, r30
    6252:	b3 de       	rcall	.-666    	; 0x5fba <remove_chain>
    6254:	81 11       	cpse	r24, r1
    6256:	78 c0       	rjmp	.+240    	; 0x6348 <f_open+0x22a>
    6258:	89 81       	ldd	r24, Y+1	; 0x01
    625a:	9a 81       	ldd	r25, Y+2	; 0x02
    625c:	b1 e0       	ldi	r27, 0x01	; 1
    625e:	cb 1a       	sub	r12, r27
    6260:	d1 08       	sbc	r13, r1
    6262:	e1 08       	sbc	r14, r1
    6264:	f1 08       	sbc	r15, r1
    6266:	fc 01       	movw	r30, r24
    6268:	c2 86       	std	Z+10, r12	; 0x0a
    626a:	d3 86       	std	Z+11, r13	; 0x0b
    626c:	e4 86       	std	Z+12, r14	; 0x0c
    626e:	f5 86       	std	Z+13, r15	; 0x0d
    6270:	b3 01       	movw	r22, r6
    6272:	a2 01       	movw	r20, r4
    6274:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <move_window>
    6278:	88 23       	and	r24, r24
    627a:	61 f0       	breq	.+24     	; 0x6294 <f_open+0x176>
    627c:	65 c0       	rjmp	.+202    	; 0x6348 <f_open+0x22a>
    627e:	81 11       	cpse	r24, r1
    6280:	63 c0       	rjmp	.+198    	; 0x6348 <f_open+0x22a>
    6282:	d8 01       	movw	r26, r16
    6284:	1b 96       	adiw	r26, 0x0b	; 11
    6286:	8c 91       	ld	r24, X
    6288:	84 fd       	sbrc	r24, 4
    628a:	5b c0       	rjmp	.+182    	; 0x6342 <f_open+0x224>
    628c:	f1 fe       	sbrs	r15, 1
    628e:	02 c0       	rjmp	.+4      	; 0x6294 <f_open+0x176>
    6290:	80 fd       	sbrc	r24, 0
    6292:	59 c0       	rjmp	.+178    	; 0x6346 <f_open+0x228>
    6294:	93 fe       	sbrs	r9, 3
    6296:	03 c0       	rjmp	.+6      	; 0x629e <f_open+0x180>
    6298:	b9 2d       	mov	r27, r9
    629a:	b0 62       	ori	r27, 0x20	; 32
    629c:	9b 2e       	mov	r9, r27
    629e:	e9 80       	ldd	r14, Y+1	; 0x01
    62a0:	fa 80       	ldd	r15, Y+2	; 0x02
    62a2:	f7 01       	movw	r30, r14
    62a4:	46 a5       	ldd	r20, Z+46	; 0x2e
    62a6:	57 a5       	ldd	r21, Z+47	; 0x2f
    62a8:	60 a9       	ldd	r22, Z+48	; 0x30
    62aa:	71 a9       	ldd	r23, Z+49	; 0x31
    62ac:	d5 01       	movw	r26, r10
    62ae:	5a 96       	adiw	r26, 0x1a	; 26
    62b0:	4d 93       	st	X+, r20
    62b2:	5d 93       	st	X+, r21
    62b4:	6d 93       	st	X+, r22
    62b6:	7c 93       	st	X, r23
    62b8:	5d 97       	sbiw	r26, 0x1d	; 29
    62ba:	5e 96       	adiw	r26, 0x1e	; 30
    62bc:	0d 93       	st	X+, r16
    62be:	1c 93       	st	X, r17
    62c0:	5f 97       	sbiw	r26, 0x1f	; 31
    62c2:	14 96       	adiw	r26, 0x04	; 4
    62c4:	9c 92       	st	X, r9
    62c6:	14 97       	sbiw	r26, 0x04	; 4
    62c8:	15 96       	adiw	r26, 0x05	; 5
    62ca:	1c 92       	st	X, r1
    62cc:	f8 01       	movw	r30, r16
    62ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    62d0:	93 8d       	ldd	r25, Z+27	; 0x1b
    62d2:	a0 e0       	ldi	r26, 0x00	; 0
    62d4:	b0 e0       	ldi	r27, 0x00	; 0
    62d6:	f7 01       	movw	r30, r14
    62d8:	20 81       	ld	r18, Z
    62da:	23 30       	cpi	r18, 0x03	; 3
    62dc:	61 f4       	brne	.+24     	; 0x62f6 <f_open+0x1d8>
    62de:	f8 01       	movw	r30, r16
    62e0:	44 89       	ldd	r20, Z+20	; 0x14
    62e2:	55 89       	ldd	r21, Z+21	; 0x15
    62e4:	60 e0       	ldi	r22, 0x00	; 0
    62e6:	70 e0       	ldi	r23, 0x00	; 0
    62e8:	ba 01       	movw	r22, r20
    62ea:	55 27       	eor	r21, r21
    62ec:	44 27       	eor	r20, r20
    62ee:	84 2b       	or	r24, r20
    62f0:	95 2b       	or	r25, r21
    62f2:	a6 2b       	or	r26, r22
    62f4:	b7 2b       	or	r27, r23
    62f6:	f5 01       	movw	r30, r10
    62f8:	86 87       	std	Z+14, r24	; 0x0e
    62fa:	97 87       	std	Z+15, r25	; 0x0f
    62fc:	a0 8b       	std	Z+16, r26	; 0x10
    62fe:	b1 8b       	std	Z+17, r27	; 0x11
    6300:	f8 01       	movw	r30, r16
    6302:	84 8d       	ldd	r24, Z+28	; 0x1c
    6304:	95 8d       	ldd	r25, Z+29	; 0x1d
    6306:	a6 8d       	ldd	r26, Z+30	; 0x1e
    6308:	b7 8d       	ldd	r27, Z+31	; 0x1f
    630a:	f5 01       	movw	r30, r10
    630c:	82 87       	std	Z+10, r24	; 0x0a
    630e:	93 87       	std	Z+11, r25	; 0x0b
    6310:	a4 87       	std	Z+12, r26	; 0x0c
    6312:	b5 87       	std	Z+13, r27	; 0x0d
    6314:	16 82       	std	Z+6, r1	; 0x06
    6316:	17 82       	std	Z+7, r1	; 0x07
    6318:	10 86       	std	Z+8, r1	; 0x08
    631a:	11 86       	std	Z+9, r1	; 0x09
    631c:	16 8a       	std	Z+22, r1	; 0x16
    631e:	17 8a       	std	Z+23, r1	; 0x17
    6320:	10 8e       	std	Z+24, r1	; 0x18
    6322:	11 8e       	std	Z+25, r1	; 0x19
    6324:	e0 82       	st	Z, r14
    6326:	f1 82       	std	Z+1, r15	; 0x01
    6328:	d7 01       	movw	r26, r14
    632a:	16 96       	adiw	r26, 0x06	; 6
    632c:	8d 91       	ld	r24, X+
    632e:	9c 91       	ld	r25, X
    6330:	17 97       	sbiw	r26, 0x07	; 7
    6332:	82 83       	std	Z+2, r24	; 0x02
    6334:	93 83       	std	Z+3, r25	; 0x03
    6336:	80 e0       	ldi	r24, 0x00	; 0
    6338:	07 c0       	rjmp	.+14     	; 0x6348 <f_open+0x22a>
    633a:	89 e0       	ldi	r24, 0x09	; 9
    633c:	05 c0       	rjmp	.+10     	; 0x6348 <f_open+0x22a>
    633e:	88 e0       	ldi	r24, 0x08	; 8
    6340:	03 c0       	rjmp	.+6      	; 0x6348 <f_open+0x22a>
    6342:	84 e0       	ldi	r24, 0x04	; 4
    6344:	01 c0       	rjmp	.+2      	; 0x6348 <f_open+0x22a>
    6346:	87 e0       	ldi	r24, 0x07	; 7
    6348:	a4 96       	adiw	r28, 0x24	; 36
    634a:	cd bf       	out	0x3d, r28	; 61
    634c:	de bf       	out	0x3e, r29	; 62
    634e:	df 91       	pop	r29
    6350:	cf 91       	pop	r28
    6352:	1f 91       	pop	r17
    6354:	0f 91       	pop	r16
    6356:	ff 90       	pop	r15
    6358:	ef 90       	pop	r14
    635a:	df 90       	pop	r13
    635c:	cf 90       	pop	r12
    635e:	bf 90       	pop	r11
    6360:	af 90       	pop	r10
    6362:	9f 90       	pop	r9
    6364:	7f 90       	pop	r7
    6366:	6f 90       	pop	r6
    6368:	5f 90       	pop	r5
    636a:	4f 90       	pop	r4
    636c:	08 95       	ret

0000636e <f_read>:
    636e:	2f 92       	push	r2
    6370:	3f 92       	push	r3
    6372:	4f 92       	push	r4
    6374:	5f 92       	push	r5
    6376:	6f 92       	push	r6
    6378:	7f 92       	push	r7
    637a:	8f 92       	push	r8
    637c:	9f 92       	push	r9
    637e:	af 92       	push	r10
    6380:	bf 92       	push	r11
    6382:	cf 92       	push	r12
    6384:	df 92       	push	r13
    6386:	ef 92       	push	r14
    6388:	ff 92       	push	r15
    638a:	0f 93       	push	r16
    638c:	1f 93       	push	r17
    638e:	cf 93       	push	r28
    6390:	df 93       	push	r29
    6392:	ec 01       	movw	r28, r24
    6394:	5b 01       	movw	r10, r22
    6396:	7a 01       	movw	r14, r20
    6398:	19 01       	movw	r2, r18
    639a:	f9 01       	movw	r30, r18
    639c:	10 82       	st	Z, r1
    639e:	11 82       	std	Z+1, r1	; 0x01
    63a0:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <validate>
    63a4:	81 11       	cpse	r24, r1
    63a6:	05 c1       	rjmp	.+522    	; 0x65b2 <f_read+0x244>
    63a8:	8d 81       	ldd	r24, Y+5	; 0x05
    63aa:	81 11       	cpse	r24, r1
    63ac:	02 c1       	rjmp	.+516    	; 0x65b2 <f_read+0x244>
    63ae:	8c 81       	ldd	r24, Y+4	; 0x04
    63b0:	80 ff       	sbrs	r24, 0
    63b2:	fe c0       	rjmp	.+508    	; 0x65b0 <f_read+0x242>
    63b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    63b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    63b8:	ac 85       	ldd	r26, Y+12	; 0x0c
    63ba:	bd 85       	ldd	r27, Y+13	; 0x0d
    63bc:	4e 81       	ldd	r20, Y+6	; 0x06
    63be:	5f 81       	ldd	r21, Y+7	; 0x07
    63c0:	68 85       	ldd	r22, Y+8	; 0x08
    63c2:	79 85       	ldd	r23, Y+9	; 0x09
    63c4:	84 1b       	sub	r24, r20
    63c6:	95 0b       	sbc	r25, r21
    63c8:	a6 0b       	sbc	r26, r22
    63ca:	b7 0b       	sbc	r27, r23
    63cc:	a7 01       	movw	r20, r14
    63ce:	60 e0       	ldi	r22, 0x00	; 0
    63d0:	70 e0       	ldi	r23, 0x00	; 0
    63d2:	84 17       	cp	r24, r20
    63d4:	95 07       	cpc	r25, r21
    63d6:	a6 07       	cpc	r26, r22
    63d8:	b7 07       	cpc	r27, r23
    63da:	08 f0       	brcs	.+2      	; 0x63de <f_read+0x70>
    63dc:	74 c0       	rjmp	.+232    	; 0x64c6 <f_read+0x158>
    63de:	7c 01       	movw	r14, r24
    63e0:	72 c0       	rjmp	.+228    	; 0x64c6 <f_read+0x158>
    63e2:	4e 81       	ldd	r20, Y+6	; 0x06
    63e4:	5f 81       	ldd	r21, Y+7	; 0x07
    63e6:	68 85       	ldd	r22, Y+8	; 0x08
    63e8:	79 85       	ldd	r23, Y+9	; 0x09
    63ea:	db 01       	movw	r26, r22
    63ec:	ca 01       	movw	r24, r20
    63ee:	91 70       	andi	r25, 0x01	; 1
    63f0:	aa 27       	eor	r26, r26
    63f2:	bb 27       	eor	r27, r27
    63f4:	89 2b       	or	r24, r25
    63f6:	8a 2b       	or	r24, r26
    63f8:	8b 2b       	or	r24, r27
    63fa:	09 f0       	breq	.+2      	; 0x63fe <f_read+0x90>
    63fc:	ad c0       	rjmp	.+346    	; 0x6558 <f_read+0x1ea>
    63fe:	88 81       	ld	r24, Y
    6400:	99 81       	ldd	r25, Y+1	; 0x01
    6402:	fc 01       	movw	r30, r24
    6404:	12 81       	ldd	r17, Z+2	; 0x02
    6406:	11 50       	subi	r17, 0x01	; 1
    6408:	2a 01       	movw	r4, r20
    640a:	3b 01       	movw	r6, r22
    640c:	29 e0       	ldi	r18, 0x09	; 9
    640e:	76 94       	lsr	r7
    6410:	67 94       	ror	r6
    6412:	57 94       	ror	r5
    6414:	47 94       	ror	r4
    6416:	2a 95       	dec	r18
    6418:	d1 f7       	brne	.-12     	; 0x640e <f_read+0xa0>
    641a:	14 21       	and	r17, r4
    641c:	09 f4       	brne	.+2      	; 0x6420 <f_read+0xb2>
    641e:	58 c0       	rjmp	.+176    	; 0x64d0 <f_read+0x162>
    6420:	88 80       	ld	r8, Y
    6422:	99 80       	ldd	r9, Y+1	; 0x01
    6424:	4a 89       	ldd	r20, Y+18	; 0x12
    6426:	5b 89       	ldd	r21, Y+19	; 0x13
    6428:	6c 89       	ldd	r22, Y+20	; 0x14
    642a:	7d 89       	ldd	r23, Y+21	; 0x15
    642c:	c4 01       	movw	r24, r8
    642e:	0e 94 bf 29 	call	0x537e	; 0x537e <clust2sect>
    6432:	61 15       	cp	r22, r1
    6434:	71 05       	cpc	r23, r1
    6436:	81 05       	cpc	r24, r1
    6438:	91 05       	cpc	r25, r1
    643a:	09 f4       	brne	.+2      	; 0x643e <f_read+0xd0>
    643c:	69 c0       	rjmp	.+210    	; 0x6510 <f_read+0x1a2>
    643e:	2b 01       	movw	r4, r22
    6440:	3c 01       	movw	r6, r24
    6442:	41 0e       	add	r4, r17
    6444:	51 1c       	adc	r5, r1
    6446:	61 1c       	adc	r6, r1
    6448:	71 1c       	adc	r7, r1
    644a:	67 01       	movw	r12, r14
    644c:	cd 2c       	mov	r12, r13
    644e:	dd 24       	eor	r13, r13
    6450:	c6 94       	lsr	r12
    6452:	c1 14       	cp	r12, r1
    6454:	d1 04       	cpc	r13, r1
    6456:	09 f4       	brne	.+2      	; 0x645a <f_read+0xec>
    6458:	7b c0       	rjmp	.+246    	; 0x6550 <f_read+0x1e2>
    645a:	f4 01       	movw	r30, r8
    645c:	82 81       	ldd	r24, Z+2	; 0x02
    645e:	21 2f       	mov	r18, r17
    6460:	30 e0       	ldi	r19, 0x00	; 0
    6462:	a6 01       	movw	r20, r12
    6464:	42 0f       	add	r20, r18
    6466:	53 1f       	adc	r21, r19
    6468:	90 e0       	ldi	r25, 0x00	; 0
    646a:	84 17       	cp	r24, r20
    646c:	95 07       	cpc	r25, r21
    646e:	18 f4       	brcc	.+6      	; 0x6476 <f_read+0x108>
    6470:	6c 01       	movw	r12, r24
    6472:	c2 1a       	sub	r12, r18
    6474:	d3 0a       	sbc	r13, r19
    6476:	86 01       	movw	r16, r12
    6478:	a3 01       	movw	r20, r6
    647a:	92 01       	movw	r18, r4
    647c:	b5 01       	movw	r22, r10
    647e:	f4 01       	movw	r30, r8
    6480:	81 81       	ldd	r24, Z+1	; 0x01
    6482:	7d d4       	rcall	.+2298   	; 0x6d7e <disk_read>
    6484:	81 11       	cpse	r24, r1
    6486:	7e c0       	rjmp	.+252    	; 0x6584 <f_read+0x216>
    6488:	e8 81       	ld	r30, Y
    648a:	f9 81       	ldd	r31, Y+1	; 0x01
    648c:	84 81       	ldd	r24, Z+4	; 0x04
    648e:	81 11       	cpse	r24, r1
    6490:	41 c0       	rjmp	.+130    	; 0x6514 <f_read+0x1a6>
    6492:	dc 2c       	mov	r13, r12
    6494:	cc 24       	eor	r12, r12
    6496:	dd 0c       	add	r13, r13
    6498:	ac 0c       	add	r10, r12
    649a:	bd 1c       	adc	r11, r13
    649c:	8e 81       	ldd	r24, Y+6	; 0x06
    649e:	9f 81       	ldd	r25, Y+7	; 0x07
    64a0:	a8 85       	ldd	r26, Y+8	; 0x08
    64a2:	b9 85       	ldd	r27, Y+9	; 0x09
    64a4:	8c 0d       	add	r24, r12
    64a6:	9d 1d       	adc	r25, r13
    64a8:	a1 1d       	adc	r26, r1
    64aa:	b1 1d       	adc	r27, r1
    64ac:	8e 83       	std	Y+6, r24	; 0x06
    64ae:	9f 83       	std	Y+7, r25	; 0x07
    64b0:	a8 87       	std	Y+8, r26	; 0x08
    64b2:	b9 87       	std	Y+9, r27	; 0x09
    64b4:	f1 01       	movw	r30, r2
    64b6:	80 81       	ld	r24, Z
    64b8:	91 81       	ldd	r25, Z+1	; 0x01
    64ba:	8c 0d       	add	r24, r12
    64bc:	9d 1d       	adc	r25, r13
    64be:	80 83       	st	Z, r24
    64c0:	91 83       	std	Z+1, r25	; 0x01
    64c2:	ec 18       	sub	r14, r12
    64c4:	fd 08       	sbc	r15, r13
    64c6:	e1 14       	cp	r14, r1
    64c8:	f1 04       	cpc	r15, r1
    64ca:	09 f0       	breq	.+2      	; 0x64ce <f_read+0x160>
    64cc:	8a cf       	rjmp	.-236    	; 0x63e2 <f_read+0x74>
    64ce:	6e c0       	rjmp	.+220    	; 0x65ac <f_read+0x23e>
    64d0:	45 2b       	or	r20, r21
    64d2:	46 2b       	or	r20, r22
    64d4:	47 2b       	or	r20, r23
    64d6:	29 f4       	brne	.+10     	; 0x64e2 <f_read+0x174>
    64d8:	6e 85       	ldd	r22, Y+14	; 0x0e
    64da:	7f 85       	ldd	r23, Y+15	; 0x0f
    64dc:	88 89       	ldd	r24, Y+16	; 0x10
    64de:	99 89       	ldd	r25, Y+17	; 0x11
    64e0:	06 c0       	rjmp	.+12     	; 0x64ee <f_read+0x180>
    64e2:	4a 89       	ldd	r20, Y+18	; 0x12
    64e4:	5b 89       	ldd	r21, Y+19	; 0x13
    64e6:	6c 89       	ldd	r22, Y+20	; 0x14
    64e8:	7d 89       	ldd	r23, Y+21	; 0x15
    64ea:	0e 94 e8 29 	call	0x53d0	; 0x53d0 <get_fat>
    64ee:	62 30       	cpi	r22, 0x02	; 2
    64f0:	71 05       	cpc	r23, r1
    64f2:	81 05       	cpc	r24, r1
    64f4:	91 05       	cpc	r25, r1
    64f6:	60 f0       	brcs	.+24     	; 0x6510 <f_read+0x1a2>
    64f8:	6f 3f       	cpi	r22, 0xFF	; 255
    64fa:	ff ef       	ldi	r31, 0xFF	; 255
    64fc:	7f 07       	cpc	r23, r31
    64fe:	8f 07       	cpc	r24, r31
    6500:	9f 07       	cpc	r25, r31
    6502:	09 f4       	brne	.+2      	; 0x6506 <f_read+0x198>
    6504:	3f c0       	rjmp	.+126    	; 0x6584 <f_read+0x216>
    6506:	6a 8b       	std	Y+18, r22	; 0x12
    6508:	7b 8b       	std	Y+19, r23	; 0x13
    650a:	8c 8b       	std	Y+20, r24	; 0x14
    650c:	9d 8b       	std	Y+21, r25	; 0x15
    650e:	88 cf       	rjmp	.-240    	; 0x6420 <f_read+0xb2>
    6510:	82 e0       	ldi	r24, 0x02	; 2
    6512:	39 c0       	rjmp	.+114    	; 0x6586 <f_read+0x218>
    6514:	86 a5       	ldd	r24, Z+46	; 0x2e
    6516:	97 a5       	ldd	r25, Z+47	; 0x2f
    6518:	a0 a9       	ldd	r26, Z+48	; 0x30
    651a:	b1 a9       	ldd	r27, Z+49	; 0x31
    651c:	84 19       	sub	r24, r4
    651e:	95 09       	sbc	r25, r5
    6520:	a6 09       	sbc	r26, r6
    6522:	b7 09       	sbc	r27, r7
    6524:	a6 01       	movw	r20, r12
    6526:	60 e0       	ldi	r22, 0x00	; 0
    6528:	70 e0       	ldi	r23, 0x00	; 0
    652a:	84 17       	cp	r24, r20
    652c:	95 07       	cpc	r25, r21
    652e:	a6 07       	cpc	r26, r22
    6530:	b7 07       	cpc	r27, r23
    6532:	08 f0       	brcs	.+2      	; 0x6536 <f_read+0x1c8>
    6534:	ae cf       	rjmp	.-164    	; 0x6492 <f_read+0x124>
    6536:	bf 01       	movw	r22, r30
    6538:	6e 5c       	subi	r22, 0xCE	; 206
    653a:	7f 4f       	sbci	r23, 0xFF	; 255
    653c:	98 2f       	mov	r25, r24
    653e:	88 27       	eor	r24, r24
    6540:	99 0f       	add	r25, r25
    6542:	40 e0       	ldi	r20, 0x00	; 0
    6544:	52 e0       	ldi	r21, 0x02	; 2
    6546:	8a 0d       	add	r24, r10
    6548:	9b 1d       	adc	r25, r11
    654a:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <mem_cpy>
    654e:	a1 cf       	rjmp	.-190    	; 0x6492 <f_read+0x124>
    6550:	4e 8a       	std	Y+22, r4	; 0x16
    6552:	5f 8a       	std	Y+23, r5	; 0x17
    6554:	68 8e       	std	Y+24, r6	; 0x18
    6556:	79 8e       	std	Y+25, r7	; 0x19
    6558:	8e 81       	ldd	r24, Y+6	; 0x06
    655a:	9f 81       	ldd	r25, Y+7	; 0x07
    655c:	91 70       	andi	r25, 0x01	; 1
    655e:	20 e0       	ldi	r18, 0x00	; 0
    6560:	32 e0       	ldi	r19, 0x02	; 2
    6562:	28 1b       	sub	r18, r24
    6564:	39 0b       	sbc	r19, r25
    6566:	67 01       	movw	r12, r14
    6568:	2e 15       	cp	r18, r14
    656a:	3f 05       	cpc	r19, r15
    656c:	08 f4       	brcc	.+2      	; 0x6570 <f_read+0x202>
    656e:	69 01       	movw	r12, r18
    6570:	4e 89       	ldd	r20, Y+22	; 0x16
    6572:	5f 89       	ldd	r21, Y+23	; 0x17
    6574:	68 8d       	ldd	r22, Y+24	; 0x18
    6576:	79 8d       	ldd	r23, Y+25	; 0x19
    6578:	88 81       	ld	r24, Y
    657a:	99 81       	ldd	r25, Y+1	; 0x01
    657c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <move_window>
    6580:	88 23       	and	r24, r24
    6582:	19 f0       	breq	.+6      	; 0x658a <f_read+0x21c>
    6584:	81 e0       	ldi	r24, 0x01	; 1
    6586:	8d 83       	std	Y+5, r24	; 0x05
    6588:	14 c0       	rjmp	.+40     	; 0x65b2 <f_read+0x244>
    658a:	8e 81       	ldd	r24, Y+6	; 0x06
    658c:	9f 81       	ldd	r25, Y+7	; 0x07
    658e:	a8 85       	ldd	r26, Y+8	; 0x08
    6590:	b9 85       	ldd	r27, Y+9	; 0x09
    6592:	91 70       	andi	r25, 0x01	; 1
    6594:	aa 27       	eor	r26, r26
    6596:	bb 27       	eor	r27, r27
    6598:	c2 96       	adiw	r24, 0x32	; 50
    659a:	68 81       	ld	r22, Y
    659c:	79 81       	ldd	r23, Y+1	; 0x01
    659e:	68 0f       	add	r22, r24
    65a0:	79 1f       	adc	r23, r25
    65a2:	a6 01       	movw	r20, r12
    65a4:	c5 01       	movw	r24, r10
    65a6:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <mem_cpy>
    65aa:	76 cf       	rjmp	.-276    	; 0x6498 <f_read+0x12a>
    65ac:	80 e0       	ldi	r24, 0x00	; 0
    65ae:	01 c0       	rjmp	.+2      	; 0x65b2 <f_read+0x244>
    65b0:	87 e0       	ldi	r24, 0x07	; 7
    65b2:	df 91       	pop	r29
    65b4:	cf 91       	pop	r28
    65b6:	1f 91       	pop	r17
    65b8:	0f 91       	pop	r16
    65ba:	ff 90       	pop	r15
    65bc:	ef 90       	pop	r14
    65be:	df 90       	pop	r13
    65c0:	cf 90       	pop	r12
    65c2:	bf 90       	pop	r11
    65c4:	af 90       	pop	r10
    65c6:	9f 90       	pop	r9
    65c8:	8f 90       	pop	r8
    65ca:	7f 90       	pop	r7
    65cc:	6f 90       	pop	r6
    65ce:	5f 90       	pop	r5
    65d0:	4f 90       	pop	r4
    65d2:	3f 90       	pop	r3
    65d4:	2f 90       	pop	r2
    65d6:	08 95       	ret

000065d8 <f_sync>:
    65d8:	cf 93       	push	r28
    65da:	df 93       	push	r29
    65dc:	ec 01       	movw	r28, r24
    65de:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <validate>
    65e2:	81 11       	cpse	r24, r1
    65e4:	39 c0       	rjmp	.+114    	; 0x6658 <f_sync+0x80>
    65e6:	9c 81       	ldd	r25, Y+4	; 0x04
    65e8:	95 ff       	sbrs	r25, 5
    65ea:	36 c0       	rjmp	.+108    	; 0x6658 <f_sync+0x80>
    65ec:	4a 8d       	ldd	r20, Y+26	; 0x1a
    65ee:	5b 8d       	ldd	r21, Y+27	; 0x1b
    65f0:	6c 8d       	ldd	r22, Y+28	; 0x1c
    65f2:	7d 8d       	ldd	r23, Y+29	; 0x1d
    65f4:	88 81       	ld	r24, Y
    65f6:	99 81       	ldd	r25, Y+1	; 0x01
    65f8:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <move_window>
    65fc:	81 11       	cpse	r24, r1
    65fe:	2c c0       	rjmp	.+88     	; 0x6658 <f_sync+0x80>
    6600:	ee 8d       	ldd	r30, Y+30	; 0x1e
    6602:	ff 8d       	ldd	r31, Y+31	; 0x1f
    6604:	83 85       	ldd	r24, Z+11	; 0x0b
    6606:	80 62       	ori	r24, 0x20	; 32
    6608:	83 87       	std	Z+11, r24	; 0x0b
    660a:	4a 85       	ldd	r20, Y+10	; 0x0a
    660c:	5b 85       	ldd	r21, Y+11	; 0x0b
    660e:	6c 85       	ldd	r22, Y+12	; 0x0c
    6610:	7d 85       	ldd	r23, Y+13	; 0x0d
    6612:	44 8f       	std	Z+28, r20	; 0x1c
    6614:	55 8f       	std	Z+29, r21	; 0x1d
    6616:	66 8f       	std	Z+30, r22	; 0x1e
    6618:	77 8f       	std	Z+31, r23	; 0x1f
    661a:	4e 85       	ldd	r20, Y+14	; 0x0e
    661c:	5f 85       	ldd	r21, Y+15	; 0x0f
    661e:	68 89       	ldd	r22, Y+16	; 0x10
    6620:	79 89       	ldd	r23, Y+17	; 0x11
    6622:	42 8f       	std	Z+26, r20	; 0x1a
    6624:	53 8f       	std	Z+27, r21	; 0x1b
    6626:	64 8b       	std	Z+20, r22	; 0x14
    6628:	75 8b       	std	Z+21, r23	; 0x15
    662a:	40 e0       	ldi	r20, 0x00	; 0
    662c:	50 e0       	ldi	r21, 0x00	; 0
    662e:	61 e2       	ldi	r22, 0x21	; 33
    6630:	76 e4       	ldi	r23, 0x46	; 70
    6632:	46 8b       	std	Z+22, r20	; 0x16
    6634:	57 8b       	std	Z+23, r21	; 0x17
    6636:	60 8f       	std	Z+24, r22	; 0x18
    6638:	71 8f       	std	Z+25, r23	; 0x19
    663a:	12 8a       	std	Z+18, r1	; 0x12
    663c:	13 8a       	std	Z+19, r1	; 0x13
    663e:	8c 81       	ldd	r24, Y+4	; 0x04
    6640:	8f 7d       	andi	r24, 0xDF	; 223
    6642:	8c 83       	std	Y+4, r24	; 0x04
    6644:	e8 81       	ld	r30, Y
    6646:	f9 81       	ldd	r31, Y+1	; 0x01
    6648:	81 e0       	ldi	r24, 0x01	; 1
    664a:	84 83       	std	Z+4, r24	; 0x04
    664c:	88 81       	ld	r24, Y
    664e:	99 81       	ldd	r25, Y+1	; 0x01
    6650:	df 91       	pop	r29
    6652:	cf 91       	pop	r28
    6654:	0c 94 75 26 	jmp	0x4cea	; 0x4cea <sync_fs>
    6658:	df 91       	pop	r29
    665a:	cf 91       	pop	r28
    665c:	08 95       	ret

0000665e <f_close>:
    665e:	cf 93       	push	r28
    6660:	df 93       	push	r29
    6662:	ec 01       	movw	r28, r24
    6664:	b9 df       	rcall	.-142    	; 0x65d8 <f_sync>
    6666:	81 11       	cpse	r24, r1
    6668:	07 c0       	rjmp	.+14     	; 0x6678 <f_close+0x1a>
    666a:	ce 01       	movw	r24, r28
    666c:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <validate>
    6670:	81 11       	cpse	r24, r1
    6672:	02 c0       	rjmp	.+4      	; 0x6678 <f_close+0x1a>
    6674:	18 82       	st	Y, r1
    6676:	19 82       	std	Y+1, r1	; 0x01
    6678:	df 91       	pop	r29
    667a:	cf 91       	pop	r28
    667c:	08 95       	ret

0000667e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    667e:	2f 92       	push	r2
    6680:	3f 92       	push	r3
    6682:	4f 92       	push	r4
    6684:	5f 92       	push	r5
    6686:	6f 92       	push	r6
    6688:	7f 92       	push	r7
    668a:	8f 92       	push	r8
    668c:	9f 92       	push	r9
    668e:	af 92       	push	r10
    6690:	bf 92       	push	r11
    6692:	cf 92       	push	r12
    6694:	df 92       	push	r13
    6696:	ef 92       	push	r14
    6698:	ff 92       	push	r15
    669a:	0f 93       	push	r16
    669c:	1f 93       	push	r17
    669e:	cf 93       	push	r28
    66a0:	df 93       	push	r29
    66a2:	cd b7       	in	r28, 0x3d	; 61
    66a4:	de b7       	in	r29, 0x3e	; 62
    66a6:	28 97       	sbiw	r28, 0x08	; 8
    66a8:	cd bf       	out	0x3d, r28	; 61
    66aa:	de bf       	out	0x3e, r29	; 62
    66ac:	1c 01       	movw	r2, r24
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
    66ae:	4d 83       	std	Y+5, r20	; 0x05
    66b0:	5e 83       	std	Y+6, r21	; 0x06
    66b2:	6f 83       	std	Y+7, r22	; 0x07
    66b4:	78 87       	std	Y+8, r23	; 0x08
    66b6:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    66ba:	4d 81       	ldd	r20, Y+5	; 0x05
    66bc:	5e 81       	ldd	r21, Y+6	; 0x06
    66be:	6f 81       	ldd	r22, Y+7	; 0x07
    66c0:	78 85       	ldd	r23, Y+8	; 0x08
    66c2:	81 11       	cpse	r24, r1
    66c4:	5f c1       	rjmp	.+702    	; 0x6984 <f_lseek+0x306>
	if (fp->err)						/* Check error */
    66c6:	d1 01       	movw	r26, r2
    66c8:	15 96       	adiw	r26, 0x05	; 5
    66ca:	8c 91       	ld	r24, X
    66cc:	15 97       	sbiw	r26, 0x05	; 5
    66ce:	81 11       	cpse	r24, r1
    66d0:	59 c1       	rjmp	.+690    	; 0x6984 <f_lseek+0x306>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    66d2:	1a 96       	adiw	r26, 0x0a	; 10
    66d4:	cd 90       	ld	r12, X+
    66d6:	dd 90       	ld	r13, X+
    66d8:	ed 90       	ld	r14, X+
    66da:	fc 90       	ld	r15, X
    66dc:	1d 97       	sbiw	r26, 0x0d	; 13
    66de:	c4 16       	cp	r12, r20
    66e0:	d5 06       	cpc	r13, r21
    66e2:	e6 06       	cpc	r14, r22
    66e4:	f7 06       	cpc	r15, r23
    66e6:	18 f0       	brcs	.+6      	; 0x66ee <f_lseek+0x70>

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    66e8:	6a 01       	movw	r12, r20
    66ea:	7b 01       	movw	r14, r22
    66ec:	04 c0       	rjmp	.+8      	; 0x66f6 <f_lseek+0x78>

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    66ee:	f1 01       	movw	r30, r2
    66f0:	84 81       	ldd	r24, Z+4	; 0x04
    66f2:	81 fd       	sbrc	r24, 1
    66f4:	f9 cf       	rjmp	.-14     	; 0x66e8 <f_lseek+0x6a>
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    66f6:	d1 01       	movw	r26, r2
    66f8:	16 96       	adiw	r26, 0x06	; 6
    66fa:	4d 90       	ld	r4, X+
    66fc:	5d 90       	ld	r5, X+
    66fe:	6d 90       	ld	r6, X+
    6700:	7c 90       	ld	r7, X
    6702:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    6704:	f1 01       	movw	r30, r2
    6706:	16 82       	std	Z+6, r1	; 0x06
    6708:	17 82       	std	Z+7, r1	; 0x07
    670a:	10 86       	std	Z+8, r1	; 0x08
    670c:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    670e:	c1 14       	cp	r12, r1
    6710:	d1 04       	cpc	r13, r1
    6712:	e1 04       	cpc	r14, r1
    6714:	f1 04       	cpc	r15, r1
    6716:	21 f4       	brne	.+8      	; 0x6720 <f_lseek+0xa2>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    6718:	c1 2c       	mov	r12, r1
    671a:	d1 2c       	mov	r13, r1
    671c:	76 01       	movw	r14, r12
    671e:	05 c1       	rjmp	.+522    	; 0x692a <f_lseek+0x2ac>
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    6720:	00 81       	ld	r16, Z
    6722:	11 81       	ldd	r17, Z+1	; 0x01
    6724:	f8 01       	movw	r30, r16
    6726:	82 80       	ldd	r8, Z+2	; 0x02
    6728:	91 2c       	mov	r9, r1
    672a:	a1 2c       	mov	r10, r1
    672c:	b1 2c       	mov	r11, r1
    672e:	69 e0       	ldi	r22, 0x09	; 9
    6730:	88 0c       	add	r8, r8
    6732:	99 1c       	adc	r9, r9
    6734:	aa 1c       	adc	r10, r10
    6736:	bb 1c       	adc	r11, r11
    6738:	6a 95       	dec	r22
    673a:	d1 f7       	brne	.-12     	; 0x6730 <f_lseek+0xb2>
			if (ifptr > 0 &&
    673c:	41 14       	cp	r4, r1
    673e:	51 04       	cpc	r5, r1
    6740:	61 04       	cpc	r6, r1
    6742:	71 04       	cpc	r7, r1
    6744:	d9 f1       	breq	.+118    	; 0x67bc <f_lseek+0x13e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    6746:	f1 e0       	ldi	r31, 0x01	; 1
    6748:	4f 1a       	sub	r4, r31
    674a:	51 08       	sbc	r5, r1
    674c:	61 08       	sbc	r6, r1
    674e:	71 08       	sbc	r7, r1
    6750:	c7 01       	movw	r24, r14
    6752:	b6 01       	movw	r22, r12
    6754:	61 50       	subi	r22, 0x01	; 1
    6756:	71 09       	sbc	r23, r1
    6758:	81 09       	sbc	r24, r1
    675a:	91 09       	sbc	r25, r1
    675c:	a5 01       	movw	r20, r10
    675e:	94 01       	movw	r18, r8
    6760:	0e 94 28 51 	call	0xa250	; 0xa250 <__udivmodsi4>
    6764:	29 83       	std	Y+1, r18	; 0x01
    6766:	3a 83       	std	Y+2, r19	; 0x02
    6768:	4b 83       	std	Y+3, r20	; 0x03
    676a:	5c 83       	std	Y+4, r21	; 0x04
    676c:	c3 01       	movw	r24, r6
    676e:	b2 01       	movw	r22, r4
    6770:	a5 01       	movw	r20, r10
    6772:	94 01       	movw	r18, r8
    6774:	0e 94 28 51 	call	0xa250	; 0xa250 <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    6778:	89 81       	ldd	r24, Y+1	; 0x01
    677a:	9a 81       	ldd	r25, Y+2	; 0x02
    677c:	ab 81       	ldd	r26, Y+3	; 0x03
    677e:	bc 81       	ldd	r27, Y+4	; 0x04
    6780:	82 17       	cp	r24, r18
    6782:	93 07       	cpc	r25, r19
    6784:	a4 07       	cpc	r26, r20
    6786:	b5 07       	cpc	r27, r21
    6788:	c8 f0       	brcs	.+50     	; 0x67bc <f_lseek+0x13e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    678a:	88 27       	eor	r24, r24
    678c:	99 27       	eor	r25, r25
    678e:	dc 01       	movw	r26, r24
    6790:	88 19       	sub	r24, r8
    6792:	99 09       	sbc	r25, r9
    6794:	aa 09       	sbc	r26, r10
    6796:	bb 09       	sbc	r27, r11
    6798:	84 21       	and	r24, r4
    679a:	95 21       	and	r25, r5
    679c:	a6 21       	and	r26, r6
    679e:	b7 21       	and	r27, r7
    67a0:	f1 01       	movw	r30, r2
    67a2:	86 83       	std	Z+6, r24	; 0x06
    67a4:	97 83       	std	Z+7, r25	; 0x07
    67a6:	a0 87       	std	Z+8, r26	; 0x08
    67a8:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    67aa:	c8 1a       	sub	r12, r24
    67ac:	d9 0a       	sbc	r13, r25
    67ae:	ea 0a       	sbc	r14, r26
    67b0:	fb 0a       	sbc	r15, r27
				clst = fp->clust;
    67b2:	42 89       	ldd	r20, Z+18	; 0x12
    67b4:	53 89       	ldd	r21, Z+19	; 0x13
    67b6:	64 89       	ldd	r22, Z+20	; 0x14
    67b8:	75 89       	ldd	r23, Z+21	; 0x15
    67ba:	2c c0       	rjmp	.+88     	; 0x6814 <f_lseek+0x196>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    67bc:	d1 01       	movw	r26, r2
    67be:	1e 96       	adiw	r26, 0x0e	; 14
    67c0:	4d 91       	ld	r20, X+
    67c2:	5d 91       	ld	r21, X+
    67c4:	6d 91       	ld	r22, X+
    67c6:	7c 91       	ld	r23, X
    67c8:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    67ca:	41 15       	cp	r20, r1
    67cc:	51 05       	cpc	r21, r1
    67ce:	61 05       	cpc	r22, r1
    67d0:	71 05       	cpc	r23, r1
    67d2:	c9 f4       	brne	.+50     	; 0x6806 <f_lseek+0x188>
					clst = create_chain(fp->fs, 0);
    67d4:	40 e0       	ldi	r20, 0x00	; 0
    67d6:	50 e0       	ldi	r21, 0x00	; 0
    67d8:	ba 01       	movw	r22, r20
    67da:	c8 01       	movw	r24, r16
    67dc:	54 d8       	rcall	.-3928   	; 0x5886 <create_chain>
    67de:	ab 01       	movw	r20, r22
    67e0:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    67e2:	41 30       	cpi	r20, 0x01	; 1
    67e4:	51 05       	cpc	r21, r1
    67e6:	61 05       	cpc	r22, r1
    67e8:	71 05       	cpc	r23, r1
    67ea:	09 f4       	brne	.+2      	; 0x67ee <f_lseek+0x170>
    67ec:	63 c0       	rjmp	.+198    	; 0x68b4 <f_lseek+0x236>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    67ee:	4f 3f       	cpi	r20, 0xFF	; 255
    67f0:	ff ef       	ldi	r31, 0xFF	; 255
    67f2:	5f 07       	cpc	r21, r31
    67f4:	6f 07       	cpc	r22, r31
    67f6:	7f 07       	cpc	r23, r31
    67f8:	09 f4       	brne	.+2      	; 0x67fc <f_lseek+0x17e>
    67fa:	5a c0       	rjmp	.+180    	; 0x68b0 <f_lseek+0x232>
					fp->sclust = clst;
    67fc:	f1 01       	movw	r30, r2
    67fe:	46 87       	std	Z+14, r20	; 0x0e
    6800:	57 87       	std	Z+15, r21	; 0x0f
    6802:	60 8b       	std	Z+16, r22	; 0x10
    6804:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    6806:	d1 01       	movw	r26, r2
    6808:	52 96       	adiw	r26, 0x12	; 18
    680a:	4d 93       	st	X+, r20
    680c:	5d 93       	st	X+, r21
    680e:	6d 93       	st	X+, r22
    6810:	7c 93       	st	X, r23
    6812:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    6814:	41 15       	cp	r20, r1
    6816:	51 05       	cpc	r21, r1
    6818:	61 05       	cpc	r22, r1
    681a:	71 05       	cpc	r23, r1
    681c:	09 f4       	brne	.+2      	; 0x6820 <f_lseek+0x1a2>
    681e:	7c cf       	rjmp	.-264    	; 0x6718 <f_lseek+0x9a>
    6820:	2c c0       	rjmp	.+88     	; 0x687a <f_lseek+0x1fc>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    6822:	42 30       	cpi	r20, 0x02	; 2
    6824:	51 05       	cpc	r21, r1
    6826:	61 05       	cpc	r22, r1
    6828:	71 05       	cpc	r23, r1
    682a:	08 f4       	brcc	.+2      	; 0x682e <f_lseek+0x1b0>
    682c:	43 c0       	rjmp	.+134    	; 0x68b4 <f_lseek+0x236>
    682e:	d1 01       	movw	r26, r2
    6830:	ed 91       	ld	r30, X+
    6832:	fc 91       	ld	r31, X
    6834:	86 89       	ldd	r24, Z+22	; 0x16
    6836:	97 89       	ldd	r25, Z+23	; 0x17
    6838:	a0 8d       	ldd	r26, Z+24	; 0x18
    683a:	b1 8d       	ldd	r27, Z+25	; 0x19
    683c:	48 17       	cp	r20, r24
    683e:	59 07       	cpc	r21, r25
    6840:	6a 07       	cpc	r22, r26
    6842:	7b 07       	cpc	r23, r27
    6844:	b8 f5       	brcc	.+110    	; 0x68b4 <f_lseek+0x236>
					fp->clust = clst;
    6846:	d1 01       	movw	r26, r2
    6848:	52 96       	adiw	r26, 0x12	; 18
    684a:	4d 93       	st	X+, r20
    684c:	5d 93       	st	X+, r21
    684e:	6d 93       	st	X+, r22
    6850:	7c 93       	st	X, r23
    6852:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    6854:	16 96       	adiw	r26, 0x06	; 6
    6856:	8d 91       	ld	r24, X+
    6858:	9d 91       	ld	r25, X+
    685a:	0d 90       	ld	r0, X+
    685c:	bc 91       	ld	r27, X
    685e:	a0 2d       	mov	r26, r0
    6860:	88 0d       	add	r24, r8
    6862:	99 1d       	adc	r25, r9
    6864:	aa 1d       	adc	r26, r10
    6866:	bb 1d       	adc	r27, r11
    6868:	f1 01       	movw	r30, r2
    686a:	86 83       	std	Z+6, r24	; 0x06
    686c:	97 83       	std	Z+7, r25	; 0x07
    686e:	a0 87       	std	Z+8, r26	; 0x08
    6870:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    6872:	c8 18       	sub	r12, r8
    6874:	d9 08       	sbc	r13, r9
    6876:	ea 08       	sbc	r14, r10
    6878:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    687a:	8c 14       	cp	r8, r12
    687c:	9d 04       	cpc	r9, r13
    687e:	ae 04       	cpc	r10, r14
    6880:	bf 04       	cpc	r11, r15
    6882:	18 f5       	brcc	.+70     	; 0x68ca <f_lseek+0x24c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    6884:	f1 01       	movw	r30, r2
    6886:	24 81       	ldd	r18, Z+4	; 0x04
    6888:	80 81       	ld	r24, Z
    688a:	91 81       	ldd	r25, Z+1	; 0x01
    688c:	21 ff       	sbrs	r18, 1
    688e:	16 c0       	rjmp	.+44     	; 0x68bc <f_lseek+0x23e>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    6890:	0e 94 43 2c 	call	0x5886	; 0x5886 <create_chain>
    6894:	ab 01       	movw	r20, r22
    6896:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    6898:	41 15       	cp	r20, r1
    689a:	51 05       	cpc	r21, r1
    689c:	61 05       	cpc	r22, r1
    689e:	71 05       	cpc	r23, r1
    68a0:	91 f0       	breq	.+36     	; 0x68c6 <f_lseek+0x248>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    68a2:	4f 3f       	cpi	r20, 0xFF	; 255
    68a4:	ff ef       	ldi	r31, 0xFF	; 255
    68a6:	5f 07       	cpc	r21, r31
    68a8:	6f 07       	cpc	r22, r31
    68aa:	7f 07       	cpc	r23, r31
    68ac:	09 f0       	breq	.+2      	; 0x68b0 <f_lseek+0x232>
    68ae:	b9 cf       	rjmp	.-142    	; 0x6822 <f_lseek+0x1a4>
    68b0:	81 e0       	ldi	r24, 0x01	; 1
    68b2:	2c c0       	rjmp	.+88     	; 0x690c <f_lseek+0x28e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    68b4:	82 e0       	ldi	r24, 0x02	; 2
    68b6:	f1 01       	movw	r30, r2
    68b8:	85 83       	std	Z+5, r24	; 0x05
    68ba:	64 c0       	rjmp	.+200    	; 0x6984 <f_lseek+0x306>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    68bc:	0e 94 e8 29 	call	0x53d0	; 0x53d0 <get_fat>
    68c0:	ab 01       	movw	r20, r22
    68c2:	bc 01       	movw	r22, r24
    68c4:	ee cf       	rjmp	.-36     	; 0x68a2 <f_lseek+0x224>
    68c6:	75 01       	movw	r14, r10
    68c8:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    68ca:	f1 01       	movw	r30, r2
    68cc:	86 81       	ldd	r24, Z+6	; 0x06
    68ce:	97 81       	ldd	r25, Z+7	; 0x07
    68d0:	a0 85       	ldd	r26, Z+8	; 0x08
    68d2:	b1 85       	ldd	r27, Z+9	; 0x09
    68d4:	8c 0d       	add	r24, r12
    68d6:	9d 1d       	adc	r25, r13
    68d8:	ae 1d       	adc	r26, r14
    68da:	bf 1d       	adc	r27, r15
    68dc:	86 83       	std	Z+6, r24	; 0x06
    68de:	97 83       	std	Z+7, r25	; 0x07
    68e0:	a0 87       	std	Z+8, r26	; 0x08
    68e2:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    68e4:	d7 01       	movw	r26, r14
    68e6:	c6 01       	movw	r24, r12
    68e8:	91 70       	andi	r25, 0x01	; 1
    68ea:	aa 27       	eor	r26, r26
    68ec:	bb 27       	eor	r27, r27
    68ee:	89 2b       	or	r24, r25
    68f0:	8a 2b       	or	r24, r26
    68f2:	8b 2b       	or	r24, r27
    68f4:	09 f4       	brne	.+2      	; 0x68f8 <f_lseek+0x27a>
    68f6:	10 cf       	rjmp	.-480    	; 0x6718 <f_lseek+0x9a>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    68f8:	80 81       	ld	r24, Z
    68fa:	91 81       	ldd	r25, Z+1	; 0x01
    68fc:	0e 94 bf 29 	call	0x537e	; 0x537e <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    6900:	61 15       	cp	r22, r1
    6902:	71 05       	cpc	r23, r1
    6904:	81 05       	cpc	r24, r1
    6906:	91 05       	cpc	r25, r1
    6908:	29 f4       	brne	.+10     	; 0x6914 <f_lseek+0x296>
    690a:	82 e0       	ldi	r24, 0x02	; 2
    690c:	d1 01       	movw	r26, r2
    690e:	15 96       	adiw	r26, 0x05	; 5
    6910:	8c 93       	st	X, r24
    6912:	38 c0       	rjmp	.+112    	; 0x6984 <f_lseek+0x306>
					nsect += ofs / SS(fp->fs);
    6914:	59 e0       	ldi	r21, 0x09	; 9
    6916:	f6 94       	lsr	r15
    6918:	e7 94       	ror	r14
    691a:	d7 94       	ror	r13
    691c:	c7 94       	ror	r12
    691e:	5a 95       	dec	r21
    6920:	d1 f7       	brne	.-12     	; 0x6916 <f_lseek+0x298>
    6922:	c6 0e       	add	r12, r22
    6924:	d7 1e       	adc	r13, r23
    6926:	e8 1e       	adc	r14, r24
    6928:	f9 1e       	adc	r15, r25
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    692a:	f1 01       	movw	r30, r2
    692c:	86 81       	ldd	r24, Z+6	; 0x06
    692e:	97 81       	ldd	r25, Z+7	; 0x07
    6930:	a0 85       	ldd	r26, Z+8	; 0x08
    6932:	b1 85       	ldd	r27, Z+9	; 0x09
    6934:	ac 01       	movw	r20, r24
    6936:	bd 01       	movw	r22, r26
    6938:	51 70       	andi	r21, 0x01	; 1
    693a:	66 27       	eor	r22, r22
    693c:	77 27       	eor	r23, r23
    693e:	45 2b       	or	r20, r21
    6940:	46 2b       	or	r20, r22
    6942:	47 2b       	or	r20, r23
    6944:	69 f0       	breq	.+26     	; 0x6960 <f_lseek+0x2e2>
    6946:	46 89       	ldd	r20, Z+22	; 0x16
    6948:	57 89       	ldd	r21, Z+23	; 0x17
    694a:	60 8d       	ldd	r22, Z+24	; 0x18
    694c:	71 8d       	ldd	r23, Z+25	; 0x19
    694e:	c4 16       	cp	r12, r20
    6950:	d5 06       	cpc	r13, r21
    6952:	e6 06       	cpc	r14, r22
    6954:	f7 06       	cpc	r15, r23
    6956:	21 f0       	breq	.+8      	; 0x6960 <f_lseek+0x2e2>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    6958:	c6 8a       	std	Z+22, r12	; 0x16
    695a:	d7 8a       	std	Z+23, r13	; 0x17
    695c:	e0 8e       	std	Z+24, r14	; 0x18
    695e:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    6960:	f1 01       	movw	r30, r2
    6962:	42 85       	ldd	r20, Z+10	; 0x0a
    6964:	53 85       	ldd	r21, Z+11	; 0x0b
    6966:	64 85       	ldd	r22, Z+12	; 0x0c
    6968:	75 85       	ldd	r23, Z+13	; 0x0d
    696a:	48 17       	cp	r20, r24
    696c:	59 07       	cpc	r21, r25
    696e:	6a 07       	cpc	r22, r26
    6970:	7b 07       	cpc	r23, r27
    6972:	38 f4       	brcc	.+14     	; 0x6982 <f_lseek+0x304>
			fp->fsize = fp->fptr;
    6974:	82 87       	std	Z+10, r24	; 0x0a
    6976:	93 87       	std	Z+11, r25	; 0x0b
    6978:	a4 87       	std	Z+12, r26	; 0x0c
    697a:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    697c:	84 81       	ldd	r24, Z+4	; 0x04
    697e:	80 62       	ori	r24, 0x20	; 32
    6980:	84 83       	std	Z+4, r24	; 0x04
    6982:	80 e0       	ldi	r24, 0x00	; 0
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    6984:	28 96       	adiw	r28, 0x08	; 8
    6986:	cd bf       	out	0x3d, r28	; 61
    6988:	de bf       	out	0x3e, r29	; 62
    698a:	df 91       	pop	r29
    698c:	cf 91       	pop	r28
    698e:	1f 91       	pop	r17
    6990:	0f 91       	pop	r16
    6992:	ff 90       	pop	r15
    6994:	ef 90       	pop	r14
    6996:	df 90       	pop	r13
    6998:	cf 90       	pop	r12
    699a:	bf 90       	pop	r11
    699c:	af 90       	pop	r10
    699e:	9f 90       	pop	r9
    69a0:	8f 90       	pop	r8
    69a2:	7f 90       	pop	r7
    69a4:	6f 90       	pop	r6
    69a6:	5f 90       	pop	r5
    69a8:	4f 90       	pop	r4
    69aa:	3f 90       	pop	r3
    69ac:	2f 90       	pop	r2
    69ae:	08 95       	ret

000069b0 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    69b0:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <spi_wr_rd>

000069b4 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    69b4:	80 e1       	ldi	r24, 0x10	; 16
    69b6:	e0 e4       	ldi	r30, 0x40	; 64
    69b8:	f6 e0       	ldi	r31, 0x06	; 6
    69ba:	85 83       	std	Z+5, r24	; 0x05
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    69bc:	8f ef       	ldi	r24, 0xFF	; 255
    69be:	f8 cf       	rjmp	.-16     	; 0x69b0 <xchg_spi>

000069c0 <power_off>:
}

static
void power_off (void)
{
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
    69c0:	10 92 00 08 	sts	0x0800, r1
	spi_disable();
    69c4:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <spi_disable>
	PORTB.OUTSET = PIN1_bm;
    69c8:	82 e0       	ldi	r24, 0x02	; 2
    69ca:	e0 e2       	ldi	r30, 0x20	; 32
    69cc:	f6 e0       	ldi	r31, 0x06	; 6
    69ce:	85 83       	std	Z+5, r24	; 0x05
	PR.PRPC |= 0x01;
    69d0:	e0 e7       	ldi	r30, 0x70	; 112
    69d2:	f0 e0       	ldi	r31, 0x00	; 0
    69d4:	83 81       	ldd	r24, Z+3	; 0x03
    69d6:	81 60       	ori	r24, 0x01	; 1
    69d8:	83 83       	std	Z+3, r24	; 0x03
    69da:	2f ef       	ldi	r18, 0xFF	; 255
    69dc:	83 ef       	ldi	r24, 0xF3	; 243
    69de:	91 e0       	ldi	r25, 0x01	; 1
    69e0:	21 50       	subi	r18, 0x01	; 1
    69e2:	80 40       	sbci	r24, 0x00	; 0
    69e4:	90 40       	sbci	r25, 0x00	; 0
    69e6:	e1 f7       	brne	.-8      	; 0x69e0 <power_off+0x20>
    69e8:	00 c0       	rjmp	.+0      	; 0x69ea <power_off+0x2a>
    69ea:	00 00       	nop
    69ec:	08 95       	ret

000069ee <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    69ee:	cf 92       	push	r12
    69f0:	df 92       	push	r13
    69f2:	ff 92       	push	r15
    69f4:	0f 93       	push	r16
    69f6:	1f 93       	push	r17
    69f8:	cf 93       	push	r28
    69fa:	df 93       	push	r29
    69fc:	1f 92       	push	r1
    69fe:	cd b7       	in	r28, 0x3d	; 61
    6a00:	de b7       	in	r29, 0x3e	; 62
    6a02:	f8 2e       	mov	r15, r24
    6a04:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    6a06:	84 e1       	ldi	r24, 0x14	; 20
    6a08:	80 93 25 2b 	sts	0x2B25, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6a0c:	8f ef       	ldi	r24, 0xFF	; 255
    6a0e:	99 83       	std	Y+1, r25	; 0x01
    6a10:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <spi_wr_rd>


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    6a14:	99 81       	ldd	r25, Y+1	; 0x01
    6a16:	8f 3f       	cpi	r24, 0xFF	; 255
    6a18:	29 f4       	brne	.+10     	; 0x6a24 <rcvr_datablock+0x36>
    6a1a:	80 91 25 2b 	lds	r24, 0x2B25
    6a1e:	81 11       	cpse	r24, r1
    6a20:	f5 cf       	rjmp	.-22     	; 0x6a0c <rcvr_datablock+0x1e>
    6a22:	1d c0       	rjmp	.+58     	; 0x6a5e <rcvr_datablock+0x70>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    6a24:	8e 3f       	cpi	r24, 0xFE	; 254
    6a26:	d9 f4       	brne	.+54     	; 0x6a5e <rcvr_datablock+0x70>
    6a28:	cf 2c       	mov	r12, r15
    6a2a:	d9 2e       	mov	r13, r25
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    6a2c:	8f ef       	ldi	r24, 0xFF	; 255
    6a2e:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <spi_wr_rd>
    6a32:	f6 01       	movw	r30, r12
    6a34:	80 83       	st	Z, r24
		*p++ = spi_wr_rd(0xff);
    6a36:	8f ef       	ldi	r24, 0xFF	; 255
    6a38:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <spi_wr_rd>
    6a3c:	f6 01       	movw	r30, r12
    6a3e:	81 83       	std	Z+1, r24	; 0x01
		
	} while (cnt -= 2);
    6a40:	02 50       	subi	r16, 0x02	; 2
    6a42:	11 09       	sbc	r17, r1
    6a44:	f2 e0       	ldi	r31, 0x02	; 2
    6a46:	cf 0e       	add	r12, r31
    6a48:	d1 1c       	adc	r13, r1
    6a4a:	01 15       	cp	r16, r1
    6a4c:	11 05       	cpc	r17, r1
    6a4e:	71 f7       	brne	.-36     	; 0x6a2c <rcvr_datablock+0x3e>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    6a50:	8f ef       	ldi	r24, 0xFF	; 255
    6a52:	ae df       	rcall	.-164    	; 0x69b0 <xchg_spi>
	xchg_spi(0xFF);
    6a54:	8f ef       	ldi	r24, 0xFF	; 255
    6a56:	ac df       	rcall	.-168    	; 0x69b0 <xchg_spi>
    6a58:	81 e0       	ldi	r24, 0x01	; 1
    6a5a:	90 e0       	ldi	r25, 0x00	; 0
    6a5c:	02 c0       	rjmp	.+4      	; 0x6a62 <rcvr_datablock+0x74>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    6a5e:	80 e0       	ldi	r24, 0x00	; 0
    6a60:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    6a62:	0f 90       	pop	r0
    6a64:	df 91       	pop	r29
    6a66:	cf 91       	pop	r28
    6a68:	1f 91       	pop	r17
    6a6a:	0f 91       	pop	r16
    6a6c:	ff 90       	pop	r15
    6a6e:	df 90       	pop	r13
    6a70:	cf 90       	pop	r12
    6a72:	08 95       	ret

00006a74 <wait_ready.constprop.2>:
)
{
	BYTE d;


	Timer2 = wt / 10;
    6a74:	82 e3       	ldi	r24, 0x32	; 50
    6a76:	80 93 24 2b 	sts	0x2B24, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6a7a:	8f ef       	ldi	r24, 0xFF	; 255
    6a7c:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <spi_wr_rd>
    6a80:	28 2f       	mov	r18, r24


	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    6a82:	8f 3f       	cpi	r24, 0xFF	; 255
    6a84:	21 f0       	breq	.+8      	; 0x6a8e <wait_ready.constprop.2+0x1a>
    6a86:	80 91 24 2b 	lds	r24, 0x2B24
    6a8a:	81 11       	cpse	r24, r1
    6a8c:	f6 cf       	rjmp	.-20     	; 0x6a7a <wait_ready.constprop.2+0x6>

	return (d == 0xFF) ? 1 : 0;
    6a8e:	81 e0       	ldi	r24, 0x01	; 1
    6a90:	90 e0       	ldi	r25, 0x00	; 0
    6a92:	2f 3f       	cpi	r18, 0xFF	; 255
    6a94:	11 f0       	breq	.+4      	; 0x6a9a <wait_ready.constprop.2+0x26>
    6a96:	80 e0       	ldi	r24, 0x00	; 0
    6a98:	90 e0       	ldi	r25, 0x00	; 0
}
    6a9a:	08 95       	ret

00006a9c <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
    6a9c:	cf 93       	push	r28
    6a9e:	df 93       	push	r29
    6aa0:	1f 92       	push	r1
    6aa2:	1f 92       	push	r1
    6aa4:	cd b7       	in	r28, 0x3d	; 61
    6aa6:	de b7       	in	r29, 0x3e	; 62
	CS_LOW();		/* Set CS# low */
    6aa8:	80 e1       	ldi	r24, 0x10	; 16
    6aaa:	80 93 46 06 	sts	0x0646, r24
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    6aae:	8f ef       	ldi	r24, 0xFF	; 255
    6ab0:	7f df       	rcall	.-258    	; 0x69b0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    6ab2:	e0 df       	rcall	.-64     	; 0x6a74 <wait_ready.constprop.2>
    6ab4:	00 97       	sbiw	r24, 0x00	; 0
    6ab6:	31 f4       	brne	.+12     	; 0x6ac4 <select+0x28>

	deselect();
    6ab8:	89 83       	std	Y+1, r24	; 0x01
    6aba:	9a 83       	std	Y+2, r25	; 0x02
    6abc:	7b df       	rcall	.-266    	; 0x69b4 <deselect>
	return 0;	/* Timeout */
    6abe:	89 81       	ldd	r24, Y+1	; 0x01
    6ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    6ac2:	02 c0       	rjmp	.+4      	; 0x6ac8 <select+0x2c>
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    6ac4:	81 e0       	ldi	r24, 0x01	; 1
    6ac6:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    6ac8:	0f 90       	pop	r0
    6aca:	0f 90       	pop	r0
    6acc:	df 91       	pop	r29
    6ace:	cf 91       	pop	r28
    6ad0:	08 95       	ret

00006ad2 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    6ad2:	ff 92       	push	r15
    6ad4:	0f 93       	push	r16
    6ad6:	1f 93       	push	r17
    6ad8:	cf 93       	push	r28
    6ada:	df 93       	push	r29
    6adc:	c8 2f       	mov	r28, r24
    6ade:	d4 2f       	mov	r29, r20
    6ae0:	15 2f       	mov	r17, r21
    6ae2:	06 2f       	mov	r16, r22
    6ae4:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    6ae6:	87 ff       	sbrs	r24, 7
    6ae8:	08 c0       	rjmp	.+16     	; 0x6afa <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    6aea:	40 e0       	ldi	r20, 0x00	; 0
    6aec:	50 e0       	ldi	r21, 0x00	; 0
    6aee:	ba 01       	movw	r22, r20
    6af0:	87 e3       	ldi	r24, 0x37	; 55
    6af2:	ef df       	rcall	.-34     	; 0x6ad2 <send_cmd>
		if (res > 1) return res;
    6af4:	82 30       	cpi	r24, 0x02	; 2
    6af6:	58 f5       	brcc	.+86     	; 0x6b4e <send_cmd+0x7c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    6af8:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    6afa:	cc 30       	cpi	r28, 0x0C	; 12
    6afc:	71 f4       	brne	.+28     	; 0x6b1a <send_cmd+0x48>
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    6afe:	8c 2f       	mov	r24, r28
    6b00:	80 64       	ori	r24, 0x40	; 64
    6b02:	56 df       	rcall	.-340    	; 0x69b0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    6b04:	8f 2d       	mov	r24, r15
    6b06:	54 df       	rcall	.-344    	; 0x69b0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    6b08:	80 2f       	mov	r24, r16
    6b0a:	52 df       	rcall	.-348    	; 0x69b0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    6b0c:	81 2f       	mov	r24, r17
    6b0e:	50 df       	rcall	.-352    	; 0x69b0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    6b10:	8d 2f       	mov	r24, r29
    6b12:	4e df       	rcall	.-356    	; 0x69b0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    6b14:	cc 23       	and	r28, r28
    6b16:	59 f0       	breq	.+22     	; 0x6b2e <send_cmd+0x5c>
    6b18:	06 c0       	rjmp	.+12     	; 0x6b26 <send_cmd+0x54>
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
    6b1a:	4c df       	rcall	.-360    	; 0x69b4 <deselect>
		if (!select()) return 0xFF;
    6b1c:	bf df       	rcall	.-130    	; 0x6a9c <select>
    6b1e:	89 2b       	or	r24, r25
    6b20:	71 f7       	brne	.-36     	; 0x6afe <send_cmd+0x2c>
    6b22:	8f ef       	ldi	r24, 0xFF	; 255
    6b24:	14 c0       	rjmp	.+40     	; 0x6b4e <send_cmd+0x7c>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    6b26:	c8 30       	cpi	r28, 0x08	; 8
    6b28:	21 f0       	breq	.+8      	; 0x6b32 <send_cmd+0x60>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    6b2a:	81 e0       	ldi	r24, 0x01	; 1
    6b2c:	03 c0       	rjmp	.+6      	; 0x6b34 <send_cmd+0x62>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    6b2e:	85 e9       	ldi	r24, 0x95	; 149
    6b30:	01 c0       	rjmp	.+2      	; 0x6b34 <send_cmd+0x62>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    6b32:	87 e8       	ldi	r24, 0x87	; 135
	xchg_spi(n);
    6b34:	3d df       	rcall	.-390    	; 0x69b0 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    6b36:	cc 30       	cpi	r28, 0x0C	; 12
    6b38:	11 f4       	brne	.+4      	; 0x6b3e <send_cmd+0x6c>
    6b3a:	8f ef       	ldi	r24, 0xFF	; 255
    6b3c:	39 df       	rcall	.-398    	; 0x69b0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    6b3e:	ca e0       	ldi	r28, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6b40:	8f ef       	ldi	r24, 0xFF	; 255
    6b42:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <spi_wr_rd>
	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);
    6b46:	87 ff       	sbrs	r24, 7
    6b48:	02 c0       	rjmp	.+4      	; 0x6b4e <send_cmd+0x7c>
    6b4a:	c1 50       	subi	r28, 0x01	; 1
    6b4c:	c9 f7       	brne	.-14     	; 0x6b40 <send_cmd+0x6e>

	return res;			/* Return with the response value */
}
    6b4e:	df 91       	pop	r29
    6b50:	cf 91       	pop	r28
    6b52:	1f 91       	pop	r17
    6b54:	0f 91       	pop	r16
    6b56:	ff 90       	pop	r15
    6b58:	08 95       	ret

00006b5a <xmit_datablock.part.1>:
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
    6b5a:	0f 93       	push	r16
    6b5c:	1f 93       	push	r17
    6b5e:	cf 93       	push	r28
    6b60:	df 93       	push	r29
    6b62:	ec 01       	movw	r28, r24
    6b64:	8c 01       	movw	r16, r24
    6b66:	1e 5f       	subi	r17, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		spi_wr_rd(*p++);
    6b68:	88 81       	ld	r24, Y
    6b6a:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <spi_wr_rd>
		spi_wr_rd(*p++);
    6b6e:	89 81       	ldd	r24, Y+1	; 0x01
    6b70:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <spi_wr_rd>
    6b74:	22 96       	adiw	r28, 0x02	; 2
		
	} while (cnt -= 2);
    6b76:	c0 17       	cp	r28, r16
    6b78:	d1 07       	cpc	r29, r17
    6b7a:	b1 f7       	brne	.-20     	; 0x6b68 <xmit_datablock.part.1+0xe>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    6b7c:	8f ef       	ldi	r24, 0xFF	; 255
    6b7e:	18 df       	rcall	.-464    	; 0x69b0 <xchg_spi>
		xchg_spi(0xFF);
    6b80:	8f ef       	ldi	r24, 0xFF	; 255
    6b82:	16 df       	rcall	.-468    	; 0x69b0 <xchg_spi>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6b84:	8f ef       	ldi	r24, 0xFF	; 255
    6b86:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <spi_wr_rd>
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
		xchg_spi(0xFF);
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    6b8a:	28 2f       	mov	r18, r24
    6b8c:	2f 71       	andi	r18, 0x1F	; 31
    6b8e:	81 e0       	ldi	r24, 0x01	; 1
    6b90:	90 e0       	ldi	r25, 0x00	; 0
    6b92:	25 30       	cpi	r18, 0x05	; 5
    6b94:	11 f0       	breq	.+4      	; 0x6b9a <xmit_datablock.part.1+0x40>
    6b96:	80 e0       	ldi	r24, 0x00	; 0
    6b98:	90 e0       	ldi	r25, 0x00	; 0
			return 0;
	}

	return 1;
}
    6b9a:	df 91       	pop	r29
    6b9c:	cf 91       	pop	r28
    6b9e:	1f 91       	pop	r17
    6ba0:	0f 91       	pop	r16
    6ba2:	08 95       	ret

00006ba4 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    6ba4:	ef 92       	push	r14
    6ba6:	ff 92       	push	r15
    6ba8:	0f 93       	push	r16
    6baa:	1f 93       	push	r17
    6bac:	cf 93       	push	r28
    6bae:	df 93       	push	r29
    6bb0:	00 d0       	rcall	.+0      	; 0x6bb2 <disk_initialize+0xe>
    6bb2:	1f 92       	push	r1
    6bb4:	cd b7       	in	r28, 0x3d	; 61
    6bb6:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    6bb8:	81 11       	cpse	r24, r1
    6bba:	cf c0       	rjmp	.+414    	; 0x6d5a <disk_initialize+0x1b6>
	power_off();						/* Turn off the socket power to reset the card */
    6bbc:	01 df       	rcall	.-510    	; 0x69c0 <power_off>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    6bbe:	80 91 24 20 	lds	r24, 0x2024
    6bc2:	81 fd       	sbrc	r24, 1
    6bc4:	c7 c0       	rjmp	.+398    	; 0x6d54 <disk_initialize+0x1b0>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on (void)
{
	PR.PRPC &= ~0x01;
    6bc6:	80 91 73 00 	lds	r24, 0x0073
    6bca:	8e 7f       	andi	r24, 0xFE	; 254
    6bcc:	80 93 73 00 	sts	0x0073, r24
	
	TCC0.CNT = 0;
    6bd0:	10 92 20 08 	sts	0x0820, r1
    6bd4:	10 92 21 08 	sts	0x0821, r1
	TCC0.PER = 1250;
    6bd8:	82 ee       	ldi	r24, 0xE2	; 226
    6bda:	94 e0       	ldi	r25, 0x04	; 4
    6bdc:	80 93 26 08 	sts	0x0826, r24
    6be0:	90 93 27 08 	sts	0x0827, r25
	TCC0.CTRLA = TC_CLKSEL_DIV256_gc;
    6be4:	26 e0       	ldi	r18, 0x06	; 6
    6be6:	20 93 00 08 	sts	0x0800, r18
	
	TCC0.CCB = 1250;
    6bea:	80 93 2a 08 	sts	0x082A, r24
    6bee:	90 93 2b 08 	sts	0x082B, r25
	TCC0.INTCTRLB |= TC_CCBINTLVL_LO_gc;
    6bf2:	80 91 07 08 	lds	r24, 0x0807
    6bf6:	84 60       	ori	r24, 0x04	; 4
    6bf8:	80 93 07 08 	sts	0x0807, r24
	TCC0.CTRLB |= TC0_CCBEN_bm;
    6bfc:	80 91 01 08 	lds	r24, 0x0801
    6c00:	80 62       	ori	r24, 0x20	; 32
    6c02:	80 93 01 08 	sts	0x0801, r24
	
	PORTB.DIRSET = PIN1_bm;
    6c06:	82 e0       	ldi	r24, 0x02	; 2
    6c08:	80 93 21 06 	sts	0x0621, r24
	PORTB.OUTCLR = PIN1_bm;
    6c0c:	80 93 26 06 	sts	0x0626, r24
    6c10:	2f ef       	ldi	r18, 0xFF	; 255
    6c12:	83 ef       	ldi	r24, 0xF3	; 243
    6c14:	91 e0       	ldi	r25, 0x01	; 1
    6c16:	21 50       	subi	r18, 0x01	; 1
    6c18:	80 40       	sbci	r24, 0x00	; 0
    6c1a:	90 40       	sbci	r25, 0x00	; 0
    6c1c:	e1 f7       	brne	.-8      	; 0x6c16 <disk_initialize+0x72>
    6c1e:	00 c0       	rjmp	.+0      	; 0x6c20 <disk_initialize+0x7c>
    6c20:	00 00       	nop
	_delay_ms(20);
	
	spi_setup();
    6c22:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <spi_setup>

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    6c26:	82 ed       	ldi	r24, 0xD2	; 210
    6c28:	80 93 c0 08 	sts	0x08C0, r24
    6c2c:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    6c2e:	8f ef       	ldi	r24, 0xFF	; 255
    6c30:	bf de       	rcall	.-642    	; 0x69b0 <xchg_spi>
    6c32:	11 50       	subi	r17, 0x01	; 1
    6c34:	e1 f7       	brne	.-8      	; 0x6c2e <disk_initialize+0x8a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    6c36:	40 e0       	ldi	r20, 0x00	; 0
    6c38:	50 e0       	ldi	r21, 0x00	; 0
    6c3a:	ba 01       	movw	r22, r20
    6c3c:	80 e0       	ldi	r24, 0x00	; 0
    6c3e:	49 df       	rcall	.-366    	; 0x6ad2 <send_cmd>
    6c40:	81 30       	cpi	r24, 0x01	; 1
    6c42:	09 f0       	breq	.+2      	; 0x6c46 <disk_initialize+0xa2>
    6c44:	77 c0       	rjmp	.+238    	; 0x6d34 <disk_initialize+0x190>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    6c46:	84 e6       	ldi	r24, 0x64	; 100
    6c48:	80 93 25 2b 	sts	0x2B25, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    6c4c:	4a ea       	ldi	r20, 0xAA	; 170
    6c4e:	51 e0       	ldi	r21, 0x01	; 1
    6c50:	60 e0       	ldi	r22, 0x00	; 0
    6c52:	70 e0       	ldi	r23, 0x00	; 0
    6c54:	88 e0       	ldi	r24, 0x08	; 8
    6c56:	3d df       	rcall	.-390    	; 0x6ad2 <send_cmd>
    6c58:	81 30       	cpi	r24, 0x01	; 1
    6c5a:	09 f0       	breq	.+2      	; 0x6c5e <disk_initialize+0xba>
    6c5c:	43 c0       	rjmp	.+134    	; 0x6ce4 <disk_initialize+0x140>
    6c5e:	7e 01       	movw	r14, r28
    6c60:	e5 e0       	ldi	r30, 0x05	; 5
    6c62:	ee 0e       	add	r14, r30
    6c64:	f1 1c       	adc	r15, r1
    6c66:	8e 01       	movw	r16, r28
    6c68:	0f 5f       	subi	r16, 0xFF	; 255
    6c6a:	1f 4f       	sbci	r17, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6c6c:	8f ef       	ldi	r24, 0xFF	; 255
    6c6e:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <spi_wr_rd>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    6c72:	f8 01       	movw	r30, r16
    6c74:	81 93       	st	Z+, r24
    6c76:	8f 01       	movw	r16, r30
    6c78:	ee 15       	cp	r30, r14
    6c7a:	ff 05       	cpc	r31, r15
    6c7c:	b9 f7       	brne	.-18     	; 0x6c6c <disk_initialize+0xc8>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    6c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    6c80:	81 30       	cpi	r24, 0x01	; 1
    6c82:	09 f0       	breq	.+2      	; 0x6c86 <disk_initialize+0xe2>
    6c84:	57 c0       	rjmp	.+174    	; 0x6d34 <disk_initialize+0x190>
    6c86:	8c 81       	ldd	r24, Y+4	; 0x04
    6c88:	8a 3a       	cpi	r24, 0xAA	; 170
    6c8a:	09 f0       	breq	.+2      	; 0x6c8e <disk_initialize+0xea>
    6c8c:	53 c0       	rjmp	.+166    	; 0x6d34 <disk_initialize+0x190>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    6c8e:	80 91 25 2b 	lds	r24, 0x2B25
    6c92:	81 11       	cpse	r24, r1
    6c94:	06 c0       	rjmp	.+12     	; 0x6ca2 <disk_initialize+0xfe>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    6c96:	80 91 25 2b 	lds	r24, 0x2B25
    6c9a:	88 23       	and	r24, r24
    6c9c:	09 f4       	brne	.+2      	; 0x6ca0 <disk_initialize+0xfc>
    6c9e:	4a c0       	rjmp	.+148    	; 0x6d34 <disk_initialize+0x190>
    6ca0:	09 c0       	rjmp	.+18     	; 0x6cb4 <disk_initialize+0x110>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    6ca2:	40 e0       	ldi	r20, 0x00	; 0
    6ca4:	50 e0       	ldi	r21, 0x00	; 0
    6ca6:	60 e0       	ldi	r22, 0x00	; 0
    6ca8:	70 e4       	ldi	r23, 0x40	; 64
    6caa:	89 ea       	ldi	r24, 0xA9	; 169
    6cac:	12 df       	rcall	.-476    	; 0x6ad2 <send_cmd>
    6cae:	81 11       	cpse	r24, r1
    6cb0:	ee cf       	rjmp	.-36     	; 0x6c8e <disk_initialize+0xea>
    6cb2:	f1 cf       	rjmp	.-30     	; 0x6c96 <disk_initialize+0xf2>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    6cb4:	40 e0       	ldi	r20, 0x00	; 0
    6cb6:	50 e0       	ldi	r21, 0x00	; 0
    6cb8:	ba 01       	movw	r22, r20
    6cba:	8a e3       	ldi	r24, 0x3A	; 58
    6cbc:	0a df       	rcall	.-492    	; 0x6ad2 <send_cmd>
    6cbe:	81 11       	cpse	r24, r1
    6cc0:	39 c0       	rjmp	.+114    	; 0x6d34 <disk_initialize+0x190>
    6cc2:	8e 01       	movw	r16, r28
    6cc4:	0f 5f       	subi	r16, 0xFF	; 255
    6cc6:	1f 4f       	sbci	r17, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    6cc8:	8f ef       	ldi	r24, 0xFF	; 255
    6cca:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <spi_wr_rd>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    6cce:	f8 01       	movw	r30, r16
    6cd0:	81 93       	st	Z+, r24
    6cd2:	8f 01       	movw	r16, r30
    6cd4:	ee 15       	cp	r30, r14
    6cd6:	ff 05       	cpc	r31, r15
    6cd8:	b9 f7       	brne	.-18     	; 0x6cc8 <disk_initialize+0x124>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    6cda:	89 81       	ldd	r24, Y+1	; 0x01
    6cdc:	86 ff       	sbrs	r24, 6
    6cde:	28 c0       	rjmp	.+80     	; 0x6d30 <disk_initialize+0x18c>
    6ce0:	1c e0       	ldi	r17, 0x0C	; 12
    6ce2:	29 c0       	rjmp	.+82     	; 0x6d36 <disk_initialize+0x192>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    6ce4:	40 e0       	ldi	r20, 0x00	; 0
    6ce6:	50 e0       	ldi	r21, 0x00	; 0
    6ce8:	ba 01       	movw	r22, r20
    6cea:	89 ea       	ldi	r24, 0xA9	; 169
    6cec:	f2 de       	rcall	.-540    	; 0x6ad2 <send_cmd>
    6cee:	82 30       	cpi	r24, 0x02	; 2
    6cf0:	18 f4       	brcc	.+6      	; 0x6cf8 <disk_initialize+0x154>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    6cf2:	12 e0       	ldi	r17, 0x02	; 2
    6cf4:	09 ea       	ldi	r16, 0xA9	; 169
    6cf6:	02 c0       	rjmp	.+4      	; 0x6cfc <disk_initialize+0x158>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    6cf8:	11 e0       	ldi	r17, 0x01	; 1
    6cfa:	01 e0       	ldi	r16, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    6cfc:	80 91 25 2b 	lds	r24, 0x2B25
    6d00:	81 11       	cpse	r24, r1
    6d02:	05 c0       	rjmp	.+10     	; 0x6d0e <disk_initialize+0x16a>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    6d04:	80 91 25 2b 	lds	r24, 0x2B25
    6d08:	88 23       	and	r24, r24
    6d0a:	a1 f0       	breq	.+40     	; 0x6d34 <disk_initialize+0x190>
    6d0c:	08 c0       	rjmp	.+16     	; 0x6d1e <disk_initialize+0x17a>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    6d0e:	40 e0       	ldi	r20, 0x00	; 0
    6d10:	50 e0       	ldi	r21, 0x00	; 0
    6d12:	ba 01       	movw	r22, r20
    6d14:	80 2f       	mov	r24, r16
    6d16:	dd de       	rcall	.-582    	; 0x6ad2 <send_cmd>
    6d18:	81 11       	cpse	r24, r1
    6d1a:	f0 cf       	rjmp	.-32     	; 0x6cfc <disk_initialize+0x158>
    6d1c:	f3 cf       	rjmp	.-26     	; 0x6d04 <disk_initialize+0x160>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    6d1e:	40 e0       	ldi	r20, 0x00	; 0
    6d20:	52 e0       	ldi	r21, 0x02	; 2
    6d22:	60 e0       	ldi	r22, 0x00	; 0
    6d24:	70 e0       	ldi	r23, 0x00	; 0
    6d26:	80 e1       	ldi	r24, 0x10	; 16
    6d28:	d4 de       	rcall	.-600    	; 0x6ad2 <send_cmd>
    6d2a:	81 11       	cpse	r24, r1
    6d2c:	03 c0       	rjmp	.+6      	; 0x6d34 <disk_initialize+0x190>
    6d2e:	03 c0       	rjmp	.+6      	; 0x6d36 <disk_initialize+0x192>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    6d30:	14 e0       	ldi	r17, 0x04	; 4
    6d32:	01 c0       	rjmp	.+2      	; 0x6d36 <disk_initialize+0x192>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    6d34:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	CardType = ty;
    6d36:	10 93 23 2b 	sts	0x2B23, r17
	deselect();
    6d3a:	3c de       	rcall	.-904    	; 0x69b4 <deselect>

	if (ty) {			/* Initialization succeded */
    6d3c:	11 23       	and	r17, r17
    6d3e:	49 f0       	breq	.+18     	; 0x6d52 <disk_initialize+0x1ae>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    6d40:	80 91 24 20 	lds	r24, 0x2024
    6d44:	8e 7f       	andi	r24, 0xFE	; 254
    6d46:	80 93 24 20 	sts	0x2024, r24
		FCLK_FAST();
    6d4a:	80 ed       	ldi	r24, 0xD0	; 208
    6d4c:	80 93 c0 08 	sts	0x08C0, r24
    6d50:	01 c0       	rjmp	.+2      	; 0x6d54 <disk_initialize+0x1b0>
	} else {			/* Initialization failed */
		power_off();
    6d52:	36 de       	rcall	.-916    	; 0x69c0 <power_off>
	}

	return Stat;
    6d54:	80 91 24 20 	lds	r24, 0x2024
    6d58:	01 c0       	rjmp	.+2      	; 0x6d5c <disk_initialize+0x1b8>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    6d5a:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    6d5c:	24 96       	adiw	r28, 0x04	; 4
    6d5e:	cd bf       	out	0x3d, r28	; 61
    6d60:	de bf       	out	0x3e, r29	; 62
    6d62:	df 91       	pop	r29
    6d64:	cf 91       	pop	r28
    6d66:	1f 91       	pop	r17
    6d68:	0f 91       	pop	r16
    6d6a:	ff 90       	pop	r15
    6d6c:	ef 90       	pop	r14
    6d6e:	08 95       	ret

00006d70 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    6d70:	81 11       	cpse	r24, r1
    6d72:	03 c0       	rjmp	.+6      	; 0x6d7a <disk_status+0xa>
	return Stat;
    6d74:	80 91 24 20 	lds	r24, 0x2024
    6d78:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    6d7a:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    6d7c:	08 95       	ret

00006d7e <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    6d7e:	ff 92       	push	r15
    6d80:	0f 93       	push	r16
    6d82:	1f 93       	push	r17
    6d84:	cf 93       	push	r28
    6d86:	df 93       	push	r29
    6d88:	eb 01       	movw	r28, r22
    6d8a:	ba 01       	movw	r22, r20
    6d8c:	a9 01       	movw	r20, r18
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    6d8e:	81 11       	cpse	r24, r1
    6d90:	38 c0       	rjmp	.+112    	; 0x6e02 <disk_read+0x84>
    6d92:	01 15       	cp	r16, r1
    6d94:	11 05       	cpc	r17, r1
    6d96:	a9 f1       	breq	.+106    	; 0x6e02 <disk_read+0x84>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6d98:	80 91 24 20 	lds	r24, 0x2024
    6d9c:	80 fd       	sbrc	r24, 0
    6d9e:	33 c0       	rjmp	.+102    	; 0x6e06 <disk_read+0x88>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    6da0:	80 91 23 2b 	lds	r24, 0x2B23
    6da4:	83 fd       	sbrc	r24, 3
    6da6:	07 c0       	rjmp	.+14     	; 0x6db6 <disk_read+0x38>
    6da8:	29 e0       	ldi	r18, 0x09	; 9
    6daa:	44 0f       	add	r20, r20
    6dac:	55 1f       	adc	r21, r21
    6dae:	66 1f       	adc	r22, r22
    6db0:	77 1f       	adc	r23, r23
    6db2:	2a 95       	dec	r18
    6db4:	d1 f7       	brne	.-12     	; 0x6daa <disk_read+0x2c>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    6db6:	02 30       	cpi	r16, 0x02	; 2
    6db8:	11 05       	cpc	r17, r1
    6dba:	18 f0       	brcs	.+6      	; 0x6dc2 <disk_read+0x44>
    6dbc:	92 e1       	ldi	r25, 0x12	; 18
    6dbe:	f9 2e       	mov	r15, r25
    6dc0:	02 c0       	rjmp	.+4      	; 0x6dc6 <disk_read+0x48>
    6dc2:	81 e1       	ldi	r24, 0x11	; 17
    6dc4:	f8 2e       	mov	r15, r24
	if (send_cmd(cmd, sector) == 0) {
    6dc6:	8f 2d       	mov	r24, r15
    6dc8:	84 de       	rcall	.-760    	; 0x6ad2 <send_cmd>
    6dca:	81 11       	cpse	r24, r1
    6dcc:	14 c0       	rjmp	.+40     	; 0x6df6 <disk_read+0x78>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    6dce:	60 e0       	ldi	r22, 0x00	; 0
    6dd0:	72 e0       	ldi	r23, 0x02	; 2
    6dd2:	ce 01       	movw	r24, r28
    6dd4:	0c de       	rcall	.-1000   	; 0x69ee <rcvr_datablock>
    6dd6:	89 2b       	or	r24, r25
    6dd8:	31 f0       	breq	.+12     	; 0x6de6 <disk_read+0x68>
			buff += 512;
    6dda:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    6ddc:	01 50       	subi	r16, 0x01	; 1
    6dde:	11 09       	sbc	r17, r1
    6de0:	01 15       	cp	r16, r1
    6de2:	11 05       	cpc	r17, r1
    6de4:	a1 f7       	brne	.-24     	; 0x6dce <disk_read+0x50>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    6de6:	82 e1       	ldi	r24, 0x12	; 18
    6de8:	f8 12       	cpse	r15, r24
    6dea:	05 c0       	rjmp	.+10     	; 0x6df6 <disk_read+0x78>
    6dec:	40 e0       	ldi	r20, 0x00	; 0
    6dee:	50 e0       	ldi	r21, 0x00	; 0
    6df0:	ba 01       	movw	r22, r20
    6df2:	8c e0       	ldi	r24, 0x0C	; 12
    6df4:	6e de       	rcall	.-804    	; 0x6ad2 <send_cmd>
	}
	deselect();
    6df6:	de dd       	rcall	.-1092   	; 0x69b4 <deselect>

	return count ? RES_ERROR : RES_OK;
    6df8:	81 e0       	ldi	r24, 0x01	; 1
    6dfa:	01 2b       	or	r16, r17
    6dfc:	29 f4       	brne	.+10     	; 0x6e08 <disk_read+0x8a>
    6dfe:	80 e0       	ldi	r24, 0x00	; 0
    6e00:	03 c0       	rjmp	.+6      	; 0x6e08 <disk_read+0x8a>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    6e02:	84 e0       	ldi	r24, 0x04	; 4
    6e04:	01 c0       	rjmp	.+2      	; 0x6e08 <disk_read+0x8a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6e06:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    6e08:	df 91       	pop	r29
    6e0a:	cf 91       	pop	r28
    6e0c:	1f 91       	pop	r17
    6e0e:	0f 91       	pop	r16
    6e10:	ff 90       	pop	r15
    6e12:	08 95       	ret

00006e14 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    6e14:	cf 92       	push	r12
    6e16:	df 92       	push	r13
    6e18:	ef 92       	push	r14
    6e1a:	ff 92       	push	r15
    6e1c:	0f 93       	push	r16
    6e1e:	1f 93       	push	r17
    6e20:	cf 93       	push	r28
    6e22:	df 93       	push	r29
    6e24:	eb 01       	movw	r28, r22
    6e26:	69 01       	movw	r12, r18
    6e28:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    6e2a:	81 11       	cpse	r24, r1
    6e2c:	59 c0       	rjmp	.+178    	; 0x6ee0 <disk_write+0xcc>
    6e2e:	01 15       	cp	r16, r1
    6e30:	11 05       	cpc	r17, r1
    6e32:	09 f4       	brne	.+2      	; 0x6e36 <disk_write+0x22>
    6e34:	55 c0       	rjmp	.+170    	; 0x6ee0 <disk_write+0xcc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6e36:	80 91 24 20 	lds	r24, 0x2024
    6e3a:	80 fd       	sbrc	r24, 0
    6e3c:	53 c0       	rjmp	.+166    	; 0x6ee4 <disk_write+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    6e3e:	80 91 24 20 	lds	r24, 0x2024
    6e42:	82 fd       	sbrc	r24, 2
    6e44:	51 c0       	rjmp	.+162    	; 0x6ee8 <disk_write+0xd4>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    6e46:	80 91 23 2b 	lds	r24, 0x2B23
    6e4a:	83 fd       	sbrc	r24, 3
    6e4c:	07 c0       	rjmp	.+14     	; 0x6e5c <disk_write+0x48>
    6e4e:	39 e0       	ldi	r19, 0x09	; 9
    6e50:	cc 0c       	add	r12, r12
    6e52:	dd 1c       	adc	r13, r13
    6e54:	ee 1c       	adc	r14, r14
    6e56:	ff 1c       	adc	r15, r15
    6e58:	3a 95       	dec	r19
    6e5a:	d1 f7       	brne	.-12     	; 0x6e50 <disk_write+0x3c>

	if (count == 1) {	/* Single block write */
    6e5c:	01 30       	cpi	r16, 0x01	; 1
    6e5e:	11 05       	cpc	r17, r1
    6e60:	c1 f4       	brne	.+48     	; 0x6e92 <disk_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    6e62:	b7 01       	movw	r22, r14
    6e64:	a6 01       	movw	r20, r12
    6e66:	88 e1       	ldi	r24, 0x18	; 24
    6e68:	34 de       	rcall	.-920    	; 0x6ad2 <send_cmd>
    6e6a:	88 23       	and	r24, r24
    6e6c:	19 f0       	breq	.+6      	; 0x6e74 <disk_write+0x60>
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    6e6e:	01 e0       	ldi	r16, 0x01	; 1
    6e70:	10 e0       	ldi	r17, 0x00	; 0
    6e72:	30 c0       	rjmp	.+96     	; 0x6ed4 <disk_write+0xc0>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    6e74:	ff dd       	rcall	.-1026   	; 0x6a74 <wait_ready.constprop.2>
    6e76:	89 2b       	or	r24, r25
    6e78:	d1 f3       	breq	.-12     	; 0x6e6e <disk_write+0x5a>

	xchg_spi(token);					/* Xmit data token */
    6e7a:	8e ef       	ldi	r24, 0xFE	; 254
    6e7c:	99 dd       	rcall	.-1230   	; 0x69b0 <xchg_spi>
    6e7e:	ce 01       	movw	r24, r28
    6e80:	6c de       	rcall	.-808    	; 0x6b5a <xmit_datablock.part.1>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
    6e82:	31 e0       	ldi	r19, 0x01	; 1
    6e84:	20 e0       	ldi	r18, 0x00	; 0
    6e86:	89 2b       	or	r24, r25
    6e88:	09 f0       	breq	.+2      	; 0x6e8c <disk_write+0x78>
    6e8a:	30 e0       	ldi	r19, 0x00	; 0
    6e8c:	03 2f       	mov	r16, r19
    6e8e:	12 2f       	mov	r17, r18
    6e90:	21 c0       	rjmp	.+66     	; 0x6ed4 <disk_write+0xc0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    6e92:	86 70       	andi	r24, 0x06	; 6
    6e94:	29 f0       	breq	.+10     	; 0x6ea0 <disk_write+0x8c>
    6e96:	a8 01       	movw	r20, r16
    6e98:	60 e0       	ldi	r22, 0x00	; 0
    6e9a:	70 e0       	ldi	r23, 0x00	; 0
    6e9c:	87 e9       	ldi	r24, 0x97	; 151
    6e9e:	19 de       	rcall	.-974    	; 0x6ad2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    6ea0:	b7 01       	movw	r22, r14
    6ea2:	a6 01       	movw	r20, r12
    6ea4:	89 e1       	ldi	r24, 0x19	; 25
    6ea6:	15 de       	rcall	.-982    	; 0x6ad2 <send_cmd>
    6ea8:	81 11       	cpse	r24, r1
    6eaa:	14 c0       	rjmp	.+40     	; 0x6ed4 <disk_write+0xc0>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    6eac:	e3 dd       	rcall	.-1082   	; 0x6a74 <wait_ready.constprop.2>
    6eae:	89 2b       	or	r24, r25
    6eb0:	61 f0       	breq	.+24     	; 0x6eca <disk_write+0xb6>

	xchg_spi(token);					/* Xmit data token */
    6eb2:	8c ef       	ldi	r24, 0xFC	; 252
    6eb4:	7d dd       	rcall	.-1286   	; 0x69b0 <xchg_spi>
    6eb6:	ce 01       	movw	r24, r28
    6eb8:	50 de       	rcall	.-864    	; 0x6b5a <xmit_datablock.part.1>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    6eba:	89 2b       	or	r24, r25
    6ebc:	31 f0       	breq	.+12     	; 0x6eca <disk_write+0xb6>
				buff += 512;
    6ebe:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    6ec0:	01 50       	subi	r16, 0x01	; 1
    6ec2:	11 09       	sbc	r17, r1
    6ec4:	01 15       	cp	r16, r1
    6ec6:	11 05       	cpc	r17, r1
    6ec8:	89 f7       	brne	.-30     	; 0x6eac <disk_write+0x98>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    6eca:	d4 dd       	rcall	.-1112   	; 0x6a74 <wait_ready.constprop.2>
    6ecc:	89 2b       	or	r24, r25
    6ece:	79 f2       	breq	.-98     	; 0x6e6e <disk_write+0x5a>

	xchg_spi(token);					/* Xmit data token */
    6ed0:	8d ef       	ldi	r24, 0xFD	; 253
    6ed2:	6e dd       	rcall	.-1316   	; 0x69b0 <xchg_spi>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
		}
	}
	deselect();
    6ed4:	6f dd       	rcall	.-1314   	; 0x69b4 <deselect>

	return count ? RES_ERROR : RES_OK;
    6ed6:	81 e0       	ldi	r24, 0x01	; 1
    6ed8:	01 2b       	or	r16, r17
    6eda:	39 f4       	brne	.+14     	; 0x6eea <disk_write+0xd6>
    6edc:	80 e0       	ldi	r24, 0x00	; 0
    6ede:	05 c0       	rjmp	.+10     	; 0x6eea <disk_write+0xd6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    6ee0:	84 e0       	ldi	r24, 0x04	; 4
    6ee2:	03 c0       	rjmp	.+6      	; 0x6eea <disk_write+0xd6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6ee4:	83 e0       	ldi	r24, 0x03	; 3
    6ee6:	01 c0       	rjmp	.+2      	; 0x6eea <disk_write+0xd6>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    6ee8:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    6eea:	df 91       	pop	r29
    6eec:	cf 91       	pop	r28
    6eee:	1f 91       	pop	r17
    6ef0:	0f 91       	pop	r16
    6ef2:	ff 90       	pop	r15
    6ef4:	ef 90       	pop	r14
    6ef6:	df 90       	pop	r13
    6ef8:	cf 90       	pop	r12
    6efa:	08 95       	ret

00006efc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    6efc:	ef 92       	push	r14
    6efe:	ff 92       	push	r15
    6f00:	0f 93       	push	r16
    6f02:	1f 93       	push	r17
    6f04:	cf 93       	push	r28
    6f06:	df 93       	push	r29
    6f08:	cd b7       	in	r28, 0x3d	; 61
    6f0a:	de b7       	in	r29, 0x3e	; 62
    6f0c:	60 97       	sbiw	r28, 0x10	; 16
    6f0e:	cd bf       	out	0x3d, r28	; 61
    6f10:	de bf       	out	0x3e, r29	; 62
    6f12:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    6f14:	81 11       	cpse	r24, r1
    6f16:	46 c1       	rjmp	.+652    	; 0x71a4 <disk_ioctl+0x2a8>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6f18:	80 91 24 20 	lds	r24, 0x2024
    6f1c:	80 fd       	sbrc	r24, 0
    6f1e:	44 c1       	rjmp	.+648    	; 0x71a8 <disk_ioctl+0x2ac>

	switch (cmd) {
    6f20:	62 33       	cpi	r22, 0x32	; 50
    6f22:	09 f4       	brne	.+2      	; 0x6f26 <disk_ioctl+0x2a>
    6f24:	00 c1       	rjmp	.+512    	; 0x7126 <disk_ioctl+0x22a>
    6f26:	80 f4       	brcc	.+32     	; 0x6f48 <disk_ioctl+0x4c>
    6f28:	61 30       	cpi	r22, 0x01	; 1
    6f2a:	e1 f0       	breq	.+56     	; 0x6f64 <disk_ioctl+0x68>
    6f2c:	c8 f0       	brcs	.+50     	; 0x6f60 <disk_ioctl+0x64>
    6f2e:	63 30       	cpi	r22, 0x03	; 3
    6f30:	09 f4       	brne	.+2      	; 0x6f34 <disk_ioctl+0x38>
    6f32:	7e c0       	rjmp	.+252    	; 0x7030 <disk_ioctl+0x134>
    6f34:	67 30       	cpi	r22, 0x07	; 7
    6f36:	09 f0       	breq	.+2      	; 0x6f3a <disk_ioctl+0x3e>
    6f38:	2f c1       	rjmp	.+606    	; 0x7198 <disk_ioctl+0x29c>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    6f3a:	42 dd       	rcall	.-1404   	; 0x69c0 <power_off>
		Stat |= STA_NOINIT;
    6f3c:	80 91 24 20 	lds	r24, 0x2024
    6f40:	81 60       	ori	r24, 0x01	; 1
    6f42:	80 93 24 20 	sts	0x2024, r24
    6f46:	2a c1       	rjmp	.+596    	; 0x719c <disk_ioctl+0x2a0>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
    6f48:	64 33       	cpi	r22, 0x34	; 52
    6f4a:	09 f4       	brne	.+2      	; 0x6f4e <disk_ioctl+0x52>
    6f4c:	f6 c0       	rjmp	.+492    	; 0x713a <disk_ioctl+0x23e>
    6f4e:	08 f4       	brcc	.+2      	; 0x6f52 <disk_ioctl+0x56>
    6f50:	ef c0       	rjmp	.+478    	; 0x7130 <disk_ioctl+0x234>
    6f52:	65 33       	cpi	r22, 0x35	; 53
    6f54:	09 f4       	brne	.+2      	; 0x6f58 <disk_ioctl+0x5c>
    6f56:	00 c1       	rjmp	.+512    	; 0x7158 <disk_ioctl+0x25c>
    6f58:	66 33       	cpi	r22, 0x36	; 54
    6f5a:	09 f4       	brne	.+2      	; 0x6f5e <disk_ioctl+0x62>
    6f5c:	11 c1       	rjmp	.+546    	; 0x7180 <disk_ioctl+0x284>
    6f5e:	1c c1       	rjmp	.+568    	; 0x7198 <disk_ioctl+0x29c>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    6f60:	9d dd       	rcall	.-1222   	; 0x6a9c <select>
    6f62:	f6 c0       	rjmp	.+492    	; 0x7150 <disk_ioctl+0x254>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    6f64:	40 e0       	ldi	r20, 0x00	; 0
    6f66:	50 e0       	ldi	r21, 0x00	; 0
    6f68:	ba 01       	movw	r22, r20
    6f6a:	89 e0       	ldi	r24, 0x09	; 9
    6f6c:	b2 dd       	rcall	.-1180   	; 0x6ad2 <send_cmd>
    6f6e:	88 23       	and	r24, r24
    6f70:	11 f0       	breq	.+4      	; 0x6f76 <disk_ioctl+0x7a>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    6f72:	11 e0       	ldi	r17, 0x01	; 1
    6f74:	14 c1       	rjmp	.+552    	; 0x719e <disk_ioctl+0x2a2>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    6f76:	60 e1       	ldi	r22, 0x10	; 16
    6f78:	70 e0       	ldi	r23, 0x00	; 0
    6f7a:	ce 01       	movw	r24, r28
    6f7c:	01 96       	adiw	r24, 0x01	; 1
    6f7e:	37 dd       	rcall	.-1426   	; 0x69ee <rcvr_datablock>
    6f80:	89 2b       	or	r24, r25
    6f82:	b9 f3       	breq	.-18     	; 0x6f72 <disk_ioctl+0x76>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    6f84:	99 81       	ldd	r25, Y+1	; 0x01
    6f86:	92 95       	swap	r25
    6f88:	96 95       	lsr	r25
    6f8a:	96 95       	lsr	r25
    6f8c:	93 70       	andi	r25, 0x03	; 3
    6f8e:	08 85       	ldd	r16, Y+8	; 0x08
    6f90:	49 85       	ldd	r20, Y+9	; 0x09
    6f92:	5a 85       	ldd	r21, Y+10	; 0x0a
    6f94:	91 30       	cpi	r25, 0x01	; 1
    6f96:	11 f5       	brne	.+68     	; 0x6fdc <disk_ioctl+0xe0>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    6f98:	0f 73       	andi	r16, 0x3F	; 63
    6f9a:	10 e0       	ldi	r17, 0x00	; 0
    6f9c:	20 e0       	ldi	r18, 0x00	; 0
    6f9e:	30 e0       	ldi	r19, 0x00	; 0
    6fa0:	98 01       	movw	r18, r16
    6fa2:	11 27       	eor	r17, r17
    6fa4:	00 27       	eor	r16, r16
    6fa6:	0f 5f       	subi	r16, 0xFF	; 255
    6fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    6faa:	2f 4f       	sbci	r18, 0xFF	; 255
    6fac:	3f 4f       	sbci	r19, 0xFF	; 255
    6fae:	84 2f       	mov	r24, r20
    6fb0:	90 e0       	ldi	r25, 0x00	; 0
    6fb2:	98 2f       	mov	r25, r24
    6fb4:	88 27       	eor	r24, r24
    6fb6:	85 0f       	add	r24, r21
    6fb8:	91 1d       	adc	r25, r1
    6fba:	08 0f       	add	r16, r24
    6fbc:	19 1f       	adc	r17, r25
    6fbe:	21 1d       	adc	r18, r1
    6fc0:	31 1d       	adc	r19, r1
				*(DWORD*)buff = csize << 10;
    6fc2:	aa e0       	ldi	r26, 0x0A	; 10
    6fc4:	00 0f       	add	r16, r16
    6fc6:	11 1f       	adc	r17, r17
    6fc8:	22 1f       	adc	r18, r18
    6fca:	33 1f       	adc	r19, r19
    6fcc:	aa 95       	dec	r26
    6fce:	d1 f7       	brne	.-12     	; 0x6fc4 <disk_ioctl+0xc8>
    6fd0:	f7 01       	movw	r30, r14
    6fd2:	00 83       	st	Z, r16
    6fd4:	11 83       	std	Z+1, r17	; 0x01
    6fd6:	22 83       	std	Z+2, r18	; 0x02
    6fd8:	33 83       	std	Z+3, r19	; 0x03
    6fda:	e0 c0       	rjmp	.+448    	; 0x719c <disk_ioctl+0x2a0>
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    6fdc:	42 95       	swap	r20
    6fde:	46 95       	lsr	r20
    6fe0:	46 95       	lsr	r20
    6fe2:	43 70       	andi	r20, 0x03	; 3
    6fe4:	f4 e0       	ldi	r31, 0x04	; 4
    6fe6:	0f 9f       	mul	r16, r31
    6fe8:	c0 01       	movw	r24, r0
    6fea:	11 24       	eor	r1, r1
    6fec:	84 0f       	add	r24, r20
    6fee:	91 1d       	adc	r25, r1
    6ff0:	01 96       	adiw	r24, 0x01	; 1
    6ff2:	2f 81       	ldd	r18, Y+7	; 0x07
    6ff4:	23 70       	andi	r18, 0x03	; 3
    6ff6:	30 e0       	ldi	r19, 0x00	; 0
    6ff8:	32 2f       	mov	r19, r18
    6ffa:	22 27       	eor	r18, r18
    6ffc:	33 0f       	add	r19, r19
    6ffe:	33 0f       	add	r19, r19
    7000:	82 0f       	add	r24, r18
    7002:	93 1f       	adc	r25, r19
    7004:	a0 e0       	ldi	r26, 0x00	; 0
    7006:	b0 e0       	ldi	r27, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    7008:	2e 81       	ldd	r18, Y+6	; 0x06
    700a:	2f 70       	andi	r18, 0x0F	; 15
    700c:	4b 85       	ldd	r20, Y+11	; 0x0b
    700e:	44 1f       	adc	r20, r20
    7010:	44 27       	eor	r20, r20
    7012:	44 1f       	adc	r20, r20
    7014:	24 0f       	add	r18, r20
    7016:	35 2f       	mov	r19, r21
    7018:	33 70       	andi	r19, 0x03	; 3
    701a:	33 0f       	add	r19, r19
    701c:	23 0f       	add	r18, r19
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    701e:	27 50       	subi	r18, 0x07	; 7
    7020:	04 c0       	rjmp	.+8      	; 0x702a <disk_ioctl+0x12e>
    7022:	88 0f       	add	r24, r24
    7024:	99 1f       	adc	r25, r25
    7026:	aa 1f       	adc	r26, r26
    7028:	bb 1f       	adc	r27, r27
    702a:	2a 95       	dec	r18
    702c:	d2 f7       	brpl	.-12     	; 0x7022 <disk_ioctl+0x126>
    702e:	75 c0       	rjmp	.+234    	; 0x711a <disk_ioctl+0x21e>
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    7030:	80 91 23 2b 	lds	r24, 0x2B23
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    7034:	40 e0       	ldi	r20, 0x00	; 0
    7036:	50 e0       	ldi	r21, 0x00	; 0
    7038:	ba 01       	movw	r22, r20
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    703a:	82 ff       	sbrs	r24, 2
    703c:	27 c0       	rjmp	.+78     	; 0x708c <disk_ioctl+0x190>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    703e:	8d e8       	ldi	r24, 0x8D	; 141
    7040:	48 dd       	rcall	.-1392   	; 0x6ad2 <send_cmd>
    7042:	81 11       	cpse	r24, r1
    7044:	96 cf       	rjmp	.-212    	; 0x6f72 <disk_ioctl+0x76>
				xchg_spi(0xFF);
    7046:	8f ef       	ldi	r24, 0xFF	; 255
    7048:	b3 dc       	rcall	.-1690   	; 0x69b0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    704a:	60 e1       	ldi	r22, 0x10	; 16
    704c:	70 e0       	ldi	r23, 0x00	; 0
    704e:	ce 01       	movw	r24, r28
    7050:	01 96       	adiw	r24, 0x01	; 1
    7052:	cd dc       	rcall	.-1638   	; 0x69ee <rcvr_datablock>
    7054:	89 2b       	or	r24, r25
    7056:	09 f4       	brne	.+2      	; 0x705a <disk_ioctl+0x15e>
    7058:	8c cf       	rjmp	.-232    	; 0x6f72 <disk_ioctl+0x76>
    705a:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    705c:	8f ef       	ldi	r24, 0xFF	; 255
    705e:	a8 dc       	rcall	.-1712   	; 0x69b0 <xchg_spi>
    7060:	11 50       	subi	r17, 0x01	; 1
    7062:	e1 f7       	brne	.-8      	; 0x705c <disk_ioctl+0x160>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    7064:	2b 85       	ldd	r18, Y+11	; 0x0b
    7066:	22 95       	swap	r18
    7068:	2f 70       	andi	r18, 0x0F	; 15
    706a:	80 e1       	ldi	r24, 0x10	; 16
    706c:	90 e0       	ldi	r25, 0x00	; 0
    706e:	a0 e0       	ldi	r26, 0x00	; 0
    7070:	b0 e0       	ldi	r27, 0x00	; 0
    7072:	04 c0       	rjmp	.+8      	; 0x707c <disk_ioctl+0x180>
    7074:	88 0f       	add	r24, r24
    7076:	99 1f       	adc	r25, r25
    7078:	aa 1f       	adc	r26, r26
    707a:	bb 1f       	adc	r27, r27
    707c:	2a 95       	dec	r18
    707e:	d2 f7       	brpl	.-12     	; 0x7074 <disk_ioctl+0x178>
    7080:	f7 01       	movw	r30, r14
    7082:	80 83       	st	Z, r24
    7084:	91 83       	std	Z+1, r25	; 0x01
    7086:	a2 83       	std	Z+2, r26	; 0x02
    7088:	b3 83       	std	Z+3, r27	; 0x03
    708a:	89 c0       	rjmp	.+274    	; 0x719e <disk_ioctl+0x2a2>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    708c:	89 e0       	ldi	r24, 0x09	; 9
    708e:	21 dd       	rcall	.-1470   	; 0x6ad2 <send_cmd>
    7090:	81 11       	cpse	r24, r1
    7092:	6f cf       	rjmp	.-290    	; 0x6f72 <disk_ioctl+0x76>
    7094:	60 e1       	ldi	r22, 0x10	; 16
    7096:	70 e0       	ldi	r23, 0x00	; 0
    7098:	ce 01       	movw	r24, r28
    709a:	01 96       	adiw	r24, 0x01	; 1
    709c:	a8 dc       	rcall	.-1712   	; 0x69ee <rcvr_datablock>
    709e:	89 2b       	or	r24, r25
    70a0:	09 f4       	brne	.+2      	; 0x70a4 <disk_ioctl+0x1a8>
    70a2:	67 cf       	rjmp	.-306    	; 0x6f72 <disk_ioctl+0x76>
				if (CardType & CT_SD1) {	/* SDv1 */
    70a4:	90 91 23 2b 	lds	r25, 0x2B23
    70a8:	2b 85       	ldd	r18, Y+11	; 0x0b
    70aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    70ac:	91 ff       	sbrs	r25, 1
    70ae:	16 c0       	rjmp	.+44     	; 0x70dc <disk_ioctl+0x1e0>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    70b0:	88 1f       	adc	r24, r24
    70b2:	88 27       	eor	r24, r24
    70b4:	88 1f       	adc	r24, r24
    70b6:	90 e0       	ldi	r25, 0x00	; 0
    70b8:	01 96       	adiw	r24, 0x01	; 1
    70ba:	2f 73       	andi	r18, 0x3F	; 63
    70bc:	82 0f       	add	r24, r18
    70be:	91 1d       	adc	r25, r1
    70c0:	82 0f       	add	r24, r18
    70c2:	91 1d       	adc	r25, r1
    70c4:	2e 85       	ldd	r18, Y+14	; 0x0e
    70c6:	22 95       	swap	r18
    70c8:	26 95       	lsr	r18
    70ca:	26 95       	lsr	r18
    70cc:	23 70       	andi	r18, 0x03	; 3
    70ce:	21 50       	subi	r18, 0x01	; 1
    70d0:	02 c0       	rjmp	.+4      	; 0x70d6 <disk_ioctl+0x1da>
    70d2:	88 0f       	add	r24, r24
    70d4:	99 1f       	adc	r25, r25
    70d6:	2a 95       	dec	r18
    70d8:	e2 f7       	brpl	.-8      	; 0x70d2 <disk_ioctl+0x1d6>
    70da:	1d c0       	rjmp	.+58     	; 0x7116 <disk_ioctl+0x21a>
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    70dc:	98 2f       	mov	r25, r24
    70de:	93 70       	andi	r25, 0x03	; 3
    70e0:	82 95       	swap	r24
    70e2:	86 95       	lsr	r24
    70e4:	87 70       	andi	r24, 0x07	; 7
    70e6:	48 2f       	mov	r20, r24
    70e8:	50 e0       	ldi	r21, 0x00	; 0
    70ea:	f8 e0       	ldi	r31, 0x08	; 8
    70ec:	9f 9f       	mul	r25, r31
    70ee:	40 0d       	add	r20, r0
    70f0:	51 1d       	adc	r21, r1
    70f2:	11 24       	eor	r1, r1
    70f4:	4f 5f       	subi	r20, 0xFF	; 255
    70f6:	5f 4f       	sbci	r21, 0xFF	; 255
    70f8:	2c 77       	andi	r18, 0x7C	; 124
    70fa:	30 e0       	ldi	r19, 0x00	; 0
    70fc:	35 95       	asr	r19
    70fe:	27 95       	ror	r18
    7100:	35 95       	asr	r19
    7102:	27 95       	ror	r18
    7104:	2f 5f       	subi	r18, 0xFF	; 255
    7106:	3f 4f       	sbci	r19, 0xFF	; 255
    7108:	42 9f       	mul	r20, r18
    710a:	c0 01       	movw	r24, r0
    710c:	43 9f       	mul	r20, r19
    710e:	90 0d       	add	r25, r0
    7110:	52 9f       	mul	r21, r18
    7112:	90 0d       	add	r25, r0
    7114:	11 24       	eor	r1, r1
    7116:	a0 e0       	ldi	r26, 0x00	; 0
    7118:	b0 e0       	ldi	r27, 0x00	; 0
    711a:	f7 01       	movw	r30, r14
    711c:	80 83       	st	Z, r24
    711e:	91 83       	std	Z+1, r25	; 0x01
    7120:	a2 83       	std	Z+2, r26	; 0x02
    7122:	b3 83       	std	Z+3, r27	; 0x03
    7124:	3b c0       	rjmp	.+118    	; 0x719c <disk_ioctl+0x2a0>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    7126:	80 91 23 2b 	lds	r24, 0x2B23
    712a:	fa 01       	movw	r30, r20
    712c:	80 83       	st	Z, r24
    712e:	36 c0       	rjmp	.+108    	; 0x719c <disk_ioctl+0x2a0>
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    7130:	40 e0       	ldi	r20, 0x00	; 0
    7132:	50 e0       	ldi	r21, 0x00	; 0
    7134:	ba 01       	movw	r22, r20
    7136:	89 e0       	ldi	r24, 0x09	; 9
    7138:	04 c0       	rjmp	.+8      	; 0x7142 <disk_ioctl+0x246>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    713a:	40 e0       	ldi	r20, 0x00	; 0
    713c:	50 e0       	ldi	r21, 0x00	; 0
    713e:	ba 01       	movw	r22, r20
    7140:	8a e0       	ldi	r24, 0x0A	; 10
    7142:	c7 dc       	rcall	.-1650   	; 0x6ad2 <send_cmd>
    7144:	81 11       	cpse	r24, r1
    7146:	15 cf       	rjmp	.-470    	; 0x6f72 <disk_ioctl+0x76>
			&& rcvr_datablock(ptr, 16))
    7148:	60 e1       	ldi	r22, 0x10	; 16
    714a:	70 e0       	ldi	r23, 0x00	; 0
    714c:	c7 01       	movw	r24, r14
    714e:	4f dc       	rcall	.-1890   	; 0x69ee <rcvr_datablock>
    7150:	11 e0       	ldi	r17, 0x01	; 1
    7152:	89 2b       	or	r24, r25
    7154:	21 f1       	breq	.+72     	; 0x719e <disk_ioctl+0x2a2>
    7156:	22 c0       	rjmp	.+68     	; 0x719c <disk_ioctl+0x2a0>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    7158:	40 e0       	ldi	r20, 0x00	; 0
    715a:	50 e0       	ldi	r21, 0x00	; 0
    715c:	ba 01       	movw	r22, r20
    715e:	8a e3       	ldi	r24, 0x3A	; 58
    7160:	b8 dc       	rcall	.-1680   	; 0x6ad2 <send_cmd>
    7162:	81 11       	cpse	r24, r1
    7164:	06 cf       	rjmp	.-500    	; 0x6f72 <disk_ioctl+0x76>
    7166:	87 01       	movw	r16, r14
    7168:	0c 5f       	subi	r16, 0xFC	; 252
    716a:	1f 4f       	sbci	r17, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    716c:	8f ef       	ldi	r24, 0xFF	; 255
    716e:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <spi_wr_rd>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    7172:	f7 01       	movw	r30, r14
    7174:	81 93       	st	Z+, r24
    7176:	7f 01       	movw	r14, r30
    7178:	e0 17       	cp	r30, r16
    717a:	f1 07       	cpc	r31, r17
    717c:	b9 f7       	brne	.-18     	; 0x716c <disk_ioctl+0x270>
    717e:	0e c0       	rjmp	.+28     	; 0x719c <disk_ioctl+0x2a0>
			res = RES_OK;
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    7180:	40 e0       	ldi	r20, 0x00	; 0
    7182:	50 e0       	ldi	r21, 0x00	; 0
    7184:	ba 01       	movw	r22, r20
    7186:	8d e8       	ldi	r24, 0x8D	; 141
    7188:	a4 dc       	rcall	.-1720   	; 0x6ad2 <send_cmd>
    718a:	81 11       	cpse	r24, r1
    718c:	f2 ce       	rjmp	.-540    	; 0x6f72 <disk_ioctl+0x76>
			xchg_spi(0xFF);
    718e:	8f ef       	ldi	r24, 0xFF	; 255
    7190:	0f dc       	rcall	.-2018   	; 0x69b0 <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    7192:	60 e4       	ldi	r22, 0x40	; 64
    7194:	70 e0       	ldi	r23, 0x00	; 0
    7196:	da cf       	rjmp	.-76     	; 0x714c <disk_ioctl+0x250>
		Stat |= STA_NOINIT;
		res = RES_OK;
		break;

	default:
		res = RES_PARERR;
    7198:	14 e0       	ldi	r17, 0x04	; 4
    719a:	01 c0       	rjmp	.+2      	; 0x719e <disk_ioctl+0x2a2>
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
			res = RES_OK;
    719c:	10 e0       	ldi	r17, 0x00	; 0

	default:
		res = RES_PARERR;
	}

	deselect();
    719e:	0a dc       	rcall	.-2028   	; 0x69b4 <deselect>

	return res;
    71a0:	81 2f       	mov	r24, r17
    71a2:	03 c0       	rjmp	.+6      	; 0x71aa <disk_ioctl+0x2ae>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    71a4:	84 e0       	ldi	r24, 0x04	; 4
    71a6:	01 c0       	rjmp	.+2      	; 0x71aa <disk_ioctl+0x2ae>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    71a8:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    71aa:	60 96       	adiw	r28, 0x10	; 16
    71ac:	cd bf       	out	0x3d, r28	; 61
    71ae:	de bf       	out	0x3e, r29	; 62
    71b0:	df 91       	pop	r29
    71b2:	cf 91       	pop	r28
    71b4:	1f 91       	pop	r17
    71b6:	0f 91       	pop	r16
    71b8:	ff 90       	pop	r15
    71ba:	ef 90       	pop	r14
    71bc:	08 95       	ret

000071be <disk_timerproc>:
void disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    71be:	80 91 25 2b 	lds	r24, 0x2B25
	if (n) Timer1 = --n;
    71c2:	88 23       	and	r24, r24
    71c4:	19 f0       	breq	.+6      	; 0x71cc <disk_timerproc+0xe>
    71c6:	81 50       	subi	r24, 0x01	; 1
    71c8:	80 93 25 2b 	sts	0x2B25, r24
	n = Timer2;
    71cc:	80 91 24 2b 	lds	r24, 0x2B24
	if (n) Timer2 = --n;
    71d0:	88 23       	and	r24, r24
    71d2:	19 f0       	breq	.+6      	; 0x71da <disk_timerproc+0x1c>
    71d4:	81 50       	subi	r24, 0x01	; 1
    71d6:	80 93 24 2b 	sts	0x2B24, r24

	s = Stat;
    71da:	80 91 24 20 	lds	r24, 0x2024
	if (MMC_WP)				/* Write protected */
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;

	if (MMC_CD)				/* Card inserted */
    71de:	90 91 48 06 	lds	r25, 0x0648
    71e2:	93 fd       	sbrc	r25, 3
    71e4:	02 c0       	rjmp	.+4      	; 0x71ea <disk_timerproc+0x2c>
		s &= ~STA_NODISK;
    71e6:	89 7f       	andi	r24, 0xF9	; 249
    71e8:	02 c0       	rjmp	.+4      	; 0x71ee <disk_timerproc+0x30>
	s = Stat;

	if (MMC_WP)				/* Write protected */
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;
    71ea:	8b 7f       	andi	r24, 0xFB	; 251

	if (MMC_CD)				/* Card inserted */
		s &= ~STA_NODISK;
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
    71ec:	83 60       	ori	r24, 0x03	; 3

	Stat = s;				/* Update MMC status */
    71ee:	80 93 24 20 	sts	0x2024, r24
    71f2:	08 95       	ret

000071f4 <__vector_17>:
}

ISR(TCC0_CCB_vect) {
    71f4:	1f 92       	push	r1
    71f6:	0f 92       	push	r0
    71f8:	0f b6       	in	r0, 0x3f	; 63
    71fa:	0f 92       	push	r0
    71fc:	11 24       	eor	r1, r1
    71fe:	08 b6       	in	r0, 0x38	; 56
    7200:	0f 92       	push	r0
    7202:	18 be       	out	0x38, r1	; 56
    7204:	09 b6       	in	r0, 0x39	; 57
    7206:	0f 92       	push	r0
    7208:	19 be       	out	0x39, r1	; 57
    720a:	0b b6       	in	r0, 0x3b	; 59
    720c:	0f 92       	push	r0
    720e:	1b be       	out	0x3b, r1	; 59
    7210:	2f 93       	push	r18
    7212:	3f 93       	push	r19
    7214:	4f 93       	push	r20
    7216:	5f 93       	push	r21
    7218:	6f 93       	push	r22
    721a:	7f 93       	push	r23
    721c:	8f 93       	push	r24
    721e:	9f 93       	push	r25
    7220:	af 93       	push	r26
    7222:	bf 93       	push	r27
    7224:	ef 93       	push	r30
    7226:	ff 93       	push	r31
	disk_timerproc();
    7228:	ca df       	rcall	.-108    	; 0x71be <disk_timerproc>
}
    722a:	ff 91       	pop	r31
    722c:	ef 91       	pop	r30
    722e:	bf 91       	pop	r27
    7230:	af 91       	pop	r26
    7232:	9f 91       	pop	r25
    7234:	8f 91       	pop	r24
    7236:	7f 91       	pop	r23
    7238:	6f 91       	pop	r22
    723a:	5f 91       	pop	r21
    723c:	4f 91       	pop	r20
    723e:	3f 91       	pop	r19
    7240:	2f 91       	pop	r18
    7242:	0f 90       	pop	r0
    7244:	0b be       	out	0x3b, r0	; 59
    7246:	0f 90       	pop	r0
    7248:	09 be       	out	0x39, r0	; 57
    724a:	0f 90       	pop	r0
    724c:	08 be       	out	0x38, r0	; 56
    724e:	0f 90       	pop	r0
    7250:	0f be       	out	0x3f, r0	; 63
    7252:	0f 90       	pop	r0
    7254:	1f 90       	pop	r1
    7256:	18 95       	reti

00007258 <__vector_14>:

#define SOUND_VOLUME 2
#define SOUND_OFFSET 2048

ISR(TCC0_OVF_vect)
{
    7258:	1f 92       	push	r1
    725a:	0f 92       	push	r0
    725c:	0f b6       	in	r0, 0x3f	; 63
    725e:	0f 92       	push	r0
    7260:	11 24       	eor	r1, r1
    7262:	08 b6       	in	r0, 0x38	; 56
    7264:	0f 92       	push	r0
    7266:	18 be       	out	0x38, r1	; 56
    7268:	09 b6       	in	r0, 0x39	; 57
    726a:	0f 92       	push	r0
    726c:	19 be       	out	0x39, r1	; 57
    726e:	0b b6       	in	r0, 0x3b	; 59
    7270:	0f 92       	push	r0
    7272:	1b be       	out	0x3b, r1	; 59
    7274:	2f 93       	push	r18
    7276:	3f 93       	push	r19
    7278:	4f 93       	push	r20
    727a:	5f 93       	push	r21
    727c:	8f 93       	push	r24
    727e:	9f 93       	push	r25
    7280:	af 93       	push	r26
    7282:	bf 93       	push	r27
    7284:	ef 93       	push	r30
    7286:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    7288:	e0 91 26 2b 	lds	r30, 0x2B26
    728c:	f0 91 27 2b 	lds	r31, 0x2B27
	UINT ri, ct;
	BYTE *buff, l, r;

	if (!fcb) return;
    7290:	30 97       	sbiw	r30, 0x00	; 0
    7292:	09 f4       	brne	.+2      	; 0x7296 <__vector_14+0x3e>
    7294:	4d c0       	rjmp	.+154    	; 0x7330 <__vector_14+0xd8>
	ct = fcb->ct; ri = fcb->ri;
    7296:	86 81       	ldd	r24, Z+6	; 0x06
    7298:	97 81       	ldd	r25, Z+7	; 0x07
    729a:	22 81       	ldd	r18, Z+2	; 0x02
    729c:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    729e:	a0 85       	ldd	r26, Z+8	; 0x08
    72a0:	b1 85       	ldd	r27, Z+9	; 0x09
    72a2:	a2 0f       	add	r26, r18
    72a4:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    72a6:	40 81       	ld	r20, Z
    72a8:	51 81       	ldd	r21, Z+1	; 0x01
    72aa:	41 30       	cpi	r20, 0x01	; 1
    72ac:	51 05       	cpc	r21, r1
    72ae:	61 f0       	breq	.+24     	; 0x72c8 <__vector_14+0x70>
    72b0:	20 f0       	brcs	.+8      	; 0x72ba <__vector_14+0x62>
    72b2:	42 30       	cpi	r20, 0x02	; 2
    72b4:	51 05       	cpc	r21, r1
    72b6:	69 f0       	breq	.+26     	; 0x72d2 <__vector_14+0x7a>
    72b8:	16 c0       	rjmp	.+44     	; 0x72e6 <__vector_14+0x8e>
		case 0:		/* Mono, 8bit */
			if (ct < 1) return;
    72ba:	00 97       	sbiw	r24, 0x00	; 0
    72bc:	c9 f1       	breq	.+114    	; 0x7330 <__vector_14+0xd8>
			l = r = buff[0];
    72be:	4c 91       	ld	r20, X
			ct -= 1; ri += 1;
    72c0:	01 97       	sbiw	r24, 0x01	; 1
    72c2:	2f 5f       	subi	r18, 0xFF	; 255
    72c4:	3f 4f       	sbci	r19, 0xFF	; 255
			break;
    72c6:	17 c0       	rjmp	.+46     	; 0x72f6 <__vector_14+0x9e>
		case 1:		/* Stereo, 8bit */
			if (ct < 2) return;
    72c8:	82 30       	cpi	r24, 0x02	; 2
    72ca:	91 05       	cpc	r25, r1
    72cc:	88 f1       	brcs	.+98     	; 0x7330 <__vector_14+0xd8>
			l = buff[0]; r = buff[1];
    72ce:	4c 91       	ld	r20, X
    72d0:	06 c0       	rjmp	.+12     	; 0x72de <__vector_14+0x86>
			ct -= 2; ri += 2;
			break;
		case 2:		/* Mono, 16bit */
			if (ct < 2) return;
    72d2:	82 30       	cpi	r24, 0x02	; 2
    72d4:	91 05       	cpc	r25, r1
    72d6:	60 f1       	brcs	.+88     	; 0x7330 <__vector_14+0xd8>
			l = r = buff[1] + 128;
    72d8:	11 96       	adiw	r26, 0x01	; 1
    72da:	4c 91       	ld	r20, X
    72dc:	40 58       	subi	r20, 0x80	; 128
			ct -= 2; ri += 2;
    72de:	02 97       	sbiw	r24, 0x02	; 2
    72e0:	2e 5f       	subi	r18, 0xFE	; 254
    72e2:	3f 4f       	sbci	r19, 0xFF	; 255
			break;
    72e4:	08 c0       	rjmp	.+16     	; 0x72f6 <__vector_14+0x9e>
		default:	/* Stereo, 16bit */
			if (ct < 4) return;
    72e6:	84 30       	cpi	r24, 0x04	; 4
    72e8:	91 05       	cpc	r25, r1
    72ea:	10 f1       	brcs	.+68     	; 0x7330 <__vector_14+0xd8>
			l = buff[1]; r = buff[3];
    72ec:	11 96       	adiw	r26, 0x01	; 1
    72ee:	4c 91       	ld	r20, X
			ct -= 4; ri += 4;
    72f0:	04 97       	sbiw	r24, 0x04	; 4
    72f2:	2c 5f       	subi	r18, 0xFC	; 252
    72f4:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fcb->ct = ct;
    72f6:	86 83       	std	Z+6, r24	; 0x06
    72f8:	97 83       	std	Z+7, r25	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    72fa:	82 85       	ldd	r24, Z+10	; 0x0a
    72fc:	93 85       	ldd	r25, Z+11	; 0x0b
    72fe:	01 97       	sbiw	r24, 0x01	; 1
    7300:	82 23       	and	r24, r18
    7302:	93 23       	and	r25, r19
    7304:	82 83       	std	Z+2, r24	; 0x02
    7306:	93 83       	std	Z+3, r25	; 0x03
	
	dac_ch0_write(SOUND_OFFSET+(l*SOUND_VOLUME));
    7308:	24 2f       	mov	r18, r20
    730a:	30 e0       	ldi	r19, 0x00	; 0
    730c:	c9 01       	movw	r24, r18
    730e:	9c 5f       	subi	r25, 0xFC	; 252
    7310:	88 0f       	add	r24, r24
    7312:	99 1f       	adc	r25, r25
void dac_speaker_off(void);
void dac_setup(bool dual_channel);
void dac_disable(void);

static inline void dac_ch0_write(uint16_t data) {
	DACB.CH0DATA = data;
    7314:	80 93 38 03 	sts	0x0338, r24
    7318:	90 93 39 03 	sts	0x0339, r25
	dac_ch1_write(SOUND_OFFSET-(l*SOUND_VOLUME));
    731c:	80 e0       	ldi	r24, 0x00	; 0
    731e:	94 e0       	ldi	r25, 0x04	; 4
    7320:	82 1b       	sub	r24, r18
    7322:	93 0b       	sbc	r25, r19
    7324:	88 0f       	add	r24, r24
    7326:	99 1f       	adc	r25, r25
}

static inline void dac_ch1_write(uint16_t data) {
	DACB.CH1DATA = data;
    7328:	80 93 3a 03 	sts	0x033A, r24
    732c:	90 93 3b 03 	sts	0x033B, r25
}
    7330:	ff 91       	pop	r31
    7332:	ef 91       	pop	r30
    7334:	bf 91       	pop	r27
    7336:	af 91       	pop	r26
    7338:	9f 91       	pop	r25
    733a:	8f 91       	pop	r24
    733c:	5f 91       	pop	r21
    733e:	4f 91       	pop	r20
    7340:	3f 91       	pop	r19
    7342:	2f 91       	pop	r18
    7344:	0f 90       	pop	r0
    7346:	0b be       	out	0x3b, r0	; 59
    7348:	0f 90       	pop	r0
    734a:	09 be       	out	0x39, r0	; 57
    734c:	0f 90       	pop	r0
    734e:	08 be       	out	0x38, r0	; 56
    7350:	0f 90       	pop	r0
    7352:	0f be       	out	0x3f, r0	; 63
    7354:	0f 90       	pop	r0
    7356:	1f 90       	pop	r1
    7358:	18 95       	reti

0000735a <sound_start>:

int sound_start (
	WAVFIFO* fcb,	/* Pointer to the sound FIFO control structure */
	DWORD fs		/* Sampling frequency [Hz] */
)
{
    735a:	fc 01       	movw	r30, r24
	if (fs < 8000 || fs > 44100) return 0;	/* Check fs range */
    735c:	40 54       	subi	r20, 0x40	; 64
    735e:	5f 41       	sbci	r21, 0x1F	; 31
    7360:	61 09       	sbc	r22, r1
    7362:	71 09       	sbc	r23, r1
    7364:	45 30       	cpi	r20, 0x05	; 5
    7366:	5d 48       	sbci	r21, 0x8D	; 141
    7368:	61 05       	cpc	r22, r1
    736a:	71 05       	cpc	r23, r1
    736c:	28 f5       	brcc	.+74     	; 0x73b8 <sound_start+0x5e>

	fcb->ri = 0; fcb->wi = 0; fcb->ct = 0;	/* Flush FIFO */
    736e:	12 82       	std	Z+2, r1	; 0x02
    7370:	13 82       	std	Z+3, r1	; 0x03
    7372:	14 82       	std	Z+4, r1	; 0x04
    7374:	15 82       	std	Z+5, r1	; 0x05
    7376:	16 82       	std	Z+6, r1	; 0x06
    7378:	17 82       	std	Z+7, r1	; 0x07
	WavFifo = fcb;			/* Register FIFO control structure */
    737a:	e0 93 26 2b 	sts	0x2B26, r30
    737e:	f0 93 27 2b 	sts	0x2B27, r31
	
	dac_setup(true);
    7382:	81 e0       	ldi	r24, 0x01	; 1
    7384:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <dac_setup>
	
	//Disable power reduction for TCC0 
	PR.PRPC &= ~0x01;
    7388:	80 91 73 00 	lds	r24, 0x0073
    738c:	8e 7f       	andi	r24, 0xFE	; 254
    738e:	80 93 73 00 	sts	0x0073, r24
	
	TCC0.CNT = 0;
    7392:	10 92 20 08 	sts	0x0820, r1
    7396:	10 92 21 08 	sts	0x0821, r1
	TCC0.PER = (F_CPU / 44100 - 1);
    739a:	84 ed       	ldi	r24, 0xD4	; 212
    739c:	92 e0       	ldi	r25, 0x02	; 2
    739e:	80 93 26 08 	sts	0x0826, r24
    73a2:	90 93 27 08 	sts	0x0827, r25
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
    73a6:	81 e0       	ldi	r24, 0x01	; 1
    73a8:	80 93 00 08 	sts	0x0800, r24
	TCC0.INTCTRLA = TC_OVFINTLVL_HI_gc;
    73ac:	83 e0       	ldi	r24, 0x03	; 3
    73ae:	80 93 06 08 	sts	0x0806, r24
	
	return 1;
    73b2:	81 e0       	ldi	r24, 0x01	; 1
    73b4:	90 e0       	ldi	r25, 0x00	; 0
    73b6:	08 95       	ret
int sound_start (
	WAVFIFO* fcb,	/* Pointer to the sound FIFO control structure */
	DWORD fs		/* Sampling frequency [Hz] */
)
{
	if (fs < 8000 || fs > 44100) return 0;	/* Check fs range */
    73b8:	80 e0       	ldi	r24, 0x00	; 0
    73ba:	90 e0       	ldi	r25, 0x00	; 0
	TCC0.PER = (F_CPU / 44100 - 1);
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc;
	TCC0.INTCTRLA = TC_OVFINTLVL_HI_gc;
	
	return 1;
}
    73bc:	08 95       	ret

000073be <sound_stop>:
/*-----------------------------------------------------*/
/* Disable sound output                                */

void sound_stop (void)
{
	TCC0.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    73be:	e0 e0       	ldi	r30, 0x00	; 0
    73c0:	f8 e0       	ldi	r31, 0x08	; 8
    73c2:	16 82       	std	Z+6, r1	; 0x06
	dac_disable();
    73c4:	0e 94 26 09 	call	0x124c	; 0x124c <dac_disable>
	
	//Enable power reduction for TCC0 
	PR.PRPC |= 0x01;
    73c8:	e0 e7       	ldi	r30, 0x70	; 112
    73ca:	f0 e0       	ldi	r31, 0x00	; 0
    73cc:	83 81       	ldd	r24, Z+3	; 0x03
    73ce:	81 60       	ori	r24, 0x01	; 1
    73d0:	83 83       	std	Z+3, r24	; 0x03

	WavFifo = 0;		/* Unregister FIFO control structure */
    73d2:	10 92 26 2b 	sts	0x2B26, r1
    73d6:	10 92 27 2b 	sts	0x2B27, r1
    73da:	08 95       	ret

000073dc <load_wav>:
FIL *fp,			/* Pointer to the open file object to play */
const char *title,	/* Title (file name, etc...) */
void *work,			/* Pointer to working buffer (must be-4 byte aligned) */
UINT sz_work		/* Size of working buffer (must be power of 2) */
)
{
    73dc:	2f 92       	push	r2
    73de:	3f 92       	push	r3
    73e0:	4f 92       	push	r4
    73e2:	5f 92       	push	r5
    73e4:	6f 92       	push	r6
    73e6:	7f 92       	push	r7
    73e8:	8f 92       	push	r8
    73ea:	9f 92       	push	r9
    73ec:	af 92       	push	r10
    73ee:	bf 92       	push	r11
    73f0:	cf 92       	push	r12
    73f2:	df 92       	push	r13
    73f4:	ef 92       	push	r14
    73f6:	ff 92       	push	r15
    73f8:	0f 93       	push	r16
    73fa:	1f 93       	push	r17
    73fc:	cf 93       	push	r28
    73fe:	df 93       	push	r29
    7400:	cd b7       	in	r28, 0x3d	; 61
    7402:	de b7       	in	r29, 0x3e	; 62
    7404:	c4 56       	subi	r28, 0x64	; 100
    7406:	d1 09       	sbc	r29, r1
    7408:	cd bf       	out	0x3d, r28	; 61
    740a:	de bf       	out	0x3e, r29	; 62
    740c:	8c 01       	movw	r16, r24
    740e:	1a 01       	movw	r2, r20
    7410:	a5 96       	adiw	r28, 0x25	; 37
    7412:	2e af       	std	Y+62, r18	; 0x3e
    7414:	3f af       	std	Y+63, r19	; 0x3f
    7416:	a5 97       	sbiw	r28, 0x25	; 37


	//xprintf(PSTR("%s\n"), title);	/* Put title */

	/* Is it a WAV file? */
	if (f_read(fp, buff, 12, &br) || br != 12) return -1;
    7418:	7e 01       	movw	r14, r28
    741a:	2d e4       	ldi	r18, 0x4D	; 77
    741c:	e2 0e       	add	r14, r18
    741e:	f1 1c       	adc	r15, r1
    7420:	97 01       	movw	r18, r14
    7422:	4c e0       	ldi	r20, 0x0C	; 12
    7424:	50 e0       	ldi	r21, 0x00	; 0
    7426:	b1 01       	movw	r22, r2
    7428:	0e 94 b7 31 	call	0x636e	; 0x636e <f_read>
    742c:	81 11       	cpse	r24, r1
    742e:	64 c2       	rjmp	.+1224   	; 0x78f8 <load_wav+0x51c>
    7430:	d7 01       	movw	r26, r14
    7432:	8d 91       	ld	r24, X+
    7434:	9c 91       	ld	r25, X
    7436:	0c 97       	sbiw	r24, 0x0c	; 12
    7438:	09 f0       	breq	.+2      	; 0x743c <load_wav+0x60>
    743a:	5e c2       	rjmp	.+1212   	; 0x78f8 <load_wav+0x51c>
	if (LD_DWORD(&buff[0]) != FCC('R','I','F','F')) return -1;
    743c:	f1 01       	movw	r30, r2
    743e:	80 81       	ld	r24, Z
    7440:	91 81       	ldd	r25, Z+1	; 0x01
    7442:	a2 81       	ldd	r26, Z+2	; 0x02
    7444:	b3 81       	ldd	r27, Z+3	; 0x03
    7446:	82 35       	cpi	r24, 0x52	; 82
    7448:	99 44       	sbci	r25, 0x49	; 73
    744a:	a6 44       	sbci	r26, 0x46	; 70
    744c:	b6 44       	sbci	r27, 0x46	; 70
    744e:	09 f0       	breq	.+2      	; 0x7452 <load_wav+0x76>
    7450:	53 c2       	rjmp	.+1190   	; 0x78f8 <load_wav+0x51c>
	if (LD_DWORD(&buff[8]) != FCC('W','A','V','E')) return -1;
    7452:	f1 01       	movw	r30, r2
    7454:	80 85       	ldd	r24, Z+8	; 0x08
    7456:	91 85       	ldd	r25, Z+9	; 0x09
    7458:	a2 85       	ldd	r26, Z+10	; 0x0a
    745a:	b3 85       	ldd	r27, Z+11	; 0x0b
    745c:	87 35       	cpi	r24, 0x57	; 87
    745e:	91 44       	sbci	r25, 0x41	; 65
    7460:	a6 45       	sbci	r26, 0x56	; 86
    7462:	b5 44       	sbci	r27, 0x45	; 69
    7464:	09 f0       	breq	.+2      	; 0x7468 <load_wav+0x8c>
    7466:	48 c2       	rjmp	.+1168   	; 0x78f8 <load_wav+0x51c>
	eof = LD_DWORD(&buff[4]) + 8;
    7468:	d1 01       	movw	r26, r2
    746a:	14 96       	adiw	r26, 0x04	; 4
    746c:	2d 91       	ld	r18, X+
    746e:	3d 91       	ld	r19, X+
    7470:	4d 91       	ld	r20, X+
    7472:	5c 91       	ld	r21, X
    7474:	17 97       	sbiw	r26, 0x07	; 7
    7476:	28 5f       	subi	r18, 0xF8	; 248
    7478:	3f 4f       	sbci	r19, 0xFF	; 255
    747a:	4f 4f       	sbci	r20, 0xFF	; 255
    747c:	5f 4f       	sbci	r21, 0xFF	; 255
    747e:	a3 96       	adiw	r28, 0x23	; 35
    7480:	2c af       	std	Y+60, r18	; 0x3c
    7482:	3d af       	std	Y+61, r19	; 0x3d
    7484:	4e af       	std	Y+62, r20	; 0x3e
    7486:	5f af       	std	Y+63, r21	; 0x3f
    7488:	a3 97       	sbiw	r28, 0x23	; 35

	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
    748a:	19 82       	std	Y+1, r1	; 0x01
    748c:	19 a2       	std	Y+33, r1	; 0x21
	md = fsmp = wsmp = offw = szwav = 0;
    748e:	6f 96       	adiw	r28, 0x1f	; 31
    7490:	1c ae       	std	Y+60, r1	; 0x3c
    7492:	1d ae       	std	Y+61, r1	; 0x3d
    7494:	1e ae       	std	Y+62, r1	; 0x3e
    7496:	1f ae       	std	Y+63, r1	; 0x3f
    7498:	6f 97       	sbiw	r28, 0x1f	; 31
    749a:	41 2c       	mov	r4, r1
    749c:	51 2c       	mov	r5, r1
    749e:	32 01       	movw	r6, r4
    74a0:	6b 96       	adiw	r28, 0x1b	; 27
    74a2:	1c ae       	std	Y+60, r1	; 0x3c
    74a4:	1d ae       	std	Y+61, r1	; 0x3d
    74a6:	1e ae       	std	Y+62, r1	; 0x3e
    74a8:	1f ae       	std	Y+63, r1	; 0x3f
    74aa:	6b 97       	sbiw	r28, 0x1b	; 27
    74ac:	65 96       	adiw	r28, 0x15	; 21
    74ae:	1e ae       	std	Y+62, r1	; 0x3e
    74b0:	1f ae       	std	Y+63, r1	; 0x3f
    74b2:	65 97       	sbiw	r28, 0x15	; 21
					if (f_read(fp, buff, 8, &br) || br != 8) return -1;
					ssz = (LD_DWORD(&buff[4]) + 1) & ~1;
					p = 0;
					switch (LD_DWORD(buff)) {
						case FCC('I','N','A','M'):		/* INAM sub-chunk */
						p = nam; break;
    74b4:	fe 01       	movw	r30, r28
    74b6:	b1 96       	adiw	r30, 0x21	; 33
    74b8:	61 96       	adiw	r28, 0x11	; 17
    74ba:	ee af       	std	Y+62, r30	; 0x3e
    74bc:	ff af       	std	Y+63, r31	; 0x3f
    74be:	61 97       	sbiw	r28, 0x11	; 17
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
    74c0:	9e 01       	movw	r18, r28
    74c2:	2f 5f       	subi	r18, 0xFF	; 255
    74c4:	3f 4f       	sbci	r19, 0xFF	; 255
    74c6:	63 96       	adiw	r28, 0x13	; 19
    74c8:	2e af       	std	Y+62, r18	; 0x3e
    74ca:	3f af       	std	Y+63, r19	; 0x3f
    74cc:	63 97       	sbiw	r28, 0x13	; 19
	eof = LD_DWORD(&buff[4]) + 8;

	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
	md = fsmp = wsmp = offw = szwav = 0;
	while (f_tell(fp) < eof) {
    74ce:	f8 01       	movw	r30, r16
    74d0:	86 81       	ldd	r24, Z+6	; 0x06
    74d2:	97 81       	ldd	r25, Z+7	; 0x07
    74d4:	a0 85       	ldd	r26, Z+8	; 0x08
    74d6:	b1 85       	ldd	r27, Z+9	; 0x09
    74d8:	a3 96       	adiw	r28, 0x23	; 35
    74da:	2c ad       	ldd	r18, Y+60	; 0x3c
    74dc:	3d ad       	ldd	r19, Y+61	; 0x3d
    74de:	4e ad       	ldd	r20, Y+62	; 0x3e
    74e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    74e2:	a3 97       	sbiw	r28, 0x23	; 35
    74e4:	82 17       	cp	r24, r18
    74e6:	93 07       	cpc	r25, r19
    74e8:	a4 07       	cpc	r26, r20
    74ea:	b5 07       	cpc	r27, r21
    74ec:	08 f0       	brcs	.+2      	; 0x74f0 <load_wav+0x114>
    74ee:	48 c1       	rjmp	.+656    	; 0x7780 <load_wav+0x3a4>
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
    74f0:	9e 01       	movw	r18, r28
    74f2:	23 5b       	subi	r18, 0xB3	; 179
    74f4:	3f 4f       	sbci	r19, 0xFF	; 255
    74f6:	48 e0       	ldi	r20, 0x08	; 8
    74f8:	50 e0       	ldi	r21, 0x00	; 0
    74fa:	b1 01       	movw	r22, r2
    74fc:	c8 01       	movw	r24, r16
    74fe:	0e 94 b7 31 	call	0x636e	; 0x636e <f_read>
    7502:	81 11       	cpse	r24, r1
    7504:	f9 c1       	rjmp	.+1010   	; 0x78f8 <load_wav+0x51c>
    7506:	2f 96       	adiw	r28, 0x0f	; 15
    7508:	8e ad       	ldd	r24, Y+62	; 0x3e
    750a:	9f ad       	ldd	r25, Y+63	; 0x3f
    750c:	2f 97       	sbiw	r28, 0x0f	; 15
    750e:	08 97       	sbiw	r24, 0x08	; 8
    7510:	09 f0       	breq	.+2      	; 0x7514 <load_wav+0x138>
    7512:	f2 c1       	rjmp	.+996    	; 0x78f8 <load_wav+0x51c>
		sz = (LD_DWORD(&buff[4]) + 1) & ~1;
    7514:	d1 01       	movw	r26, r2
    7516:	14 96       	adiw	r26, 0x04	; 4
    7518:	8d 90       	ld	r8, X+
    751a:	9d 90       	ld	r9, X+
    751c:	ad 90       	ld	r10, X+
    751e:	bc 90       	ld	r11, X
    7520:	17 97       	sbiw	r26, 0x07	; 7
    7522:	bf ef       	ldi	r27, 0xFF	; 255
    7524:	8b 1a       	sub	r8, r27
    7526:	9b 0a       	sbc	r9, r27
    7528:	ab 0a       	sbc	r10, r27
    752a:	bb 0a       	sbc	r11, r27
    752c:	e8 94       	clt
    752e:	80 f8       	bld	r8, 0
		switch (LD_DWORD(&buff[0])) {
    7530:	f1 01       	movw	r30, r2
    7532:	80 81       	ld	r24, Z
    7534:	91 81       	ldd	r25, Z+1	; 0x01
    7536:	a2 81       	ldd	r26, Z+2	; 0x02
    7538:	b3 81       	ldd	r27, Z+3	; 0x03
    753a:	8c 34       	cpi	r24, 0x4C	; 76
    753c:	f9 e4       	ldi	r31, 0x49	; 73
    753e:	9f 07       	cpc	r25, r31
    7540:	f3 e5       	ldi	r31, 0x53	; 83
    7542:	af 07       	cpc	r26, r31
    7544:	f4 e5       	ldi	r31, 0x54	; 84
    7546:	bf 07       	cpc	r27, r31
    7548:	09 f4       	brne	.+2      	; 0x754c <load_wav+0x170>
    754a:	8d c0       	rjmp	.+282    	; 0x7666 <load_wav+0x28a>
    754c:	30 f4       	brcc	.+12     	; 0x755a <load_wav+0x17e>
    754e:	86 36       	cpi	r24, 0x66	; 102
    7550:	9d 46       	sbci	r25, 0x6D	; 109
    7552:	a4 47       	sbci	r26, 0x74	; 116
    7554:	b0 42       	sbci	r27, 0x20	; 32
    7556:	e1 f0       	breq	.+56     	; 0x7590 <load_wav+0x1b4>
    7558:	cf c1       	rjmp	.+926    	; 0x78f8 <load_wav+0x51c>
    755a:	84 36       	cpi	r24, 0x64	; 100
    755c:	41 e6       	ldi	r20, 0x61	; 97
    755e:	94 07       	cpc	r25, r20
    7560:	44 e7       	ldi	r20, 0x74	; 116
    7562:	a4 07       	cpc	r26, r20
    7564:	41 e6       	ldi	r20, 0x61	; 97
    7566:	b4 07       	cpc	r27, r20
    7568:	09 f4       	brne	.+2      	; 0x756c <load_wav+0x190>
    756a:	65 c0       	rjmp	.+202    	; 0x7636 <load_wav+0x25a>
    756c:	86 36       	cpi	r24, 0x66	; 102
    756e:	91 46       	sbci	r25, 0x61	; 97
    7570:	a3 46       	sbci	r26, 0x63	; 99
    7572:	b4 47       	sbci	r27, 0x74	; 116
    7574:	09 f0       	breq	.+2      	; 0x7578 <load_wav+0x19c>
    7576:	c0 c1       	rjmp	.+896    	; 0x78f8 <load_wav+0x51c>
			}
			fsmp = LD_DWORD(&buff[4]);		/* Sampling rate */
			break;

			case FCC('f','a','c','t') :
			f_lseek(fp, f_tell(fp) + sz);
    7578:	f8 01       	movw	r30, r16
    757a:	46 81       	ldd	r20, Z+6	; 0x06
    757c:	57 81       	ldd	r21, Z+7	; 0x07
    757e:	60 85       	ldd	r22, Z+8	; 0x08
    7580:	71 85       	ldd	r23, Z+9	; 0x09
    7582:	48 0d       	add	r20, r8
    7584:	59 1d       	adc	r21, r9
    7586:	6a 1d       	adc	r22, r10
    7588:	7b 1d       	adc	r23, r11
    758a:	c8 01       	movw	r24, r16
    758c:	78 d8       	rcall	.-3856   	; 0x667e <f_lseek>
			break;
    758e:	9f cf       	rjmp	.-194    	; 0x74ce <load_wav+0xf2>
	while (f_tell(fp) < eof) {
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
		sz = (LD_DWORD(&buff[4]) + 1) & ~1;
		switch (LD_DWORD(&buff[0])) {
			case FCC('f','m','t',' ') :
			if (sz > 1000 || sz < 16 || f_read(fp, buff, sz, &br) || sz != br) return -1;
    7590:	d5 01       	movw	r26, r10
    7592:	c4 01       	movw	r24, r8
    7594:	40 97       	sbiw	r24, 0x10	; 16
    7596:	a1 09       	sbc	r26, r1
    7598:	b1 09       	sbc	r27, r1
    759a:	89 3d       	cpi	r24, 0xD9	; 217
    759c:	93 40       	sbci	r25, 0x03	; 3
    759e:	a1 05       	cpc	r26, r1
    75a0:	b1 05       	cpc	r27, r1
    75a2:	08 f0       	brcs	.+2      	; 0x75a6 <load_wav+0x1ca>
    75a4:	a9 c1       	rjmp	.+850    	; 0x78f8 <load_wav+0x51c>
    75a6:	9e 01       	movw	r18, r28
    75a8:	23 5b       	subi	r18, 0xB3	; 179
    75aa:	3f 4f       	sbci	r19, 0xFF	; 255
    75ac:	a4 01       	movw	r20, r8
    75ae:	b1 01       	movw	r22, r2
    75b0:	c8 01       	movw	r24, r16
    75b2:	0e 94 b7 31 	call	0x636e	; 0x636e <f_read>
    75b6:	81 11       	cpse	r24, r1
    75b8:	9f c1       	rjmp	.+830    	; 0x78f8 <load_wav+0x51c>
    75ba:	2f 96       	adiw	r28, 0x0f	; 15
    75bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    75be:	9f ad       	ldd	r25, Y+63	; 0x3f
    75c0:	2f 97       	sbiw	r28, 0x0f	; 15
    75c2:	a0 e0       	ldi	r26, 0x00	; 0
    75c4:	b0 e0       	ldi	r27, 0x00	; 0
    75c6:	88 16       	cp	r8, r24
    75c8:	99 06       	cpc	r9, r25
    75ca:	aa 06       	cpc	r10, r26
    75cc:	bb 06       	cpc	r11, r27
    75ce:	09 f0       	breq	.+2      	; 0x75d2 <load_wav+0x1f6>
    75d0:	93 c1       	rjmp	.+806    	; 0x78f8 <load_wav+0x51c>
			if (LD_WORD(&buff[0]) != 0x1) return -1;	/* Check if LPCM */
    75d2:	d1 01       	movw	r26, r2
    75d4:	8d 91       	ld	r24, X+
    75d6:	9c 91       	ld	r25, X
    75d8:	11 97       	sbiw	r26, 0x01	; 1
    75da:	01 97       	sbiw	r24, 0x01	; 1
    75dc:	09 f0       	breq	.+2      	; 0x75e0 <load_wav+0x204>
    75de:	8c c1       	rjmp	.+792    	; 0x78f8 <load_wav+0x51c>
			if (LD_WORD(&buff[2]) == 2) {	/* Channels (1 or 2) */
    75e0:	31 e0       	ldi	r19, 0x01	; 1
    75e2:	20 e0       	ldi	r18, 0x00	; 0
    75e4:	12 96       	adiw	r26, 0x02	; 2
    75e6:	8d 91       	ld	r24, X+
    75e8:	9c 91       	ld	r25, X
    75ea:	13 97       	sbiw	r26, 0x03	; 3
    75ec:	02 97       	sbiw	r24, 0x02	; 2
    75ee:	09 f0       	breq	.+2      	; 0x75f2 <load_wav+0x216>
    75f0:	30 e0       	ldi	r19, 0x00	; 0
				md = 1; wsmp = 2;
    75f2:	64 96       	adiw	r28, 0x14	; 20
    75f4:	3f af       	std	Y+63, r19	; 0x3f
    75f6:	64 97       	sbiw	r28, 0x14	; 20
    75f8:	65 96       	adiw	r28, 0x15	; 21
    75fa:	2f af       	std	Y+63, r18	; 0x3f
    75fc:	65 97       	sbiw	r28, 0x15	; 21
				} else {
				md = 0; wsmp = 1;
			}
			if (LD_WORD(&buff[14]) == 16) {	/* Resolution (8 or 16) */
    75fe:	f1 01       	movw	r30, r2
    7600:	86 85       	ldd	r24, Z+14	; 0x0e
    7602:	97 85       	ldd	r25, Z+15	; 0x0f
    7604:	40 97       	sbiw	r24, 0x10	; 16
    7606:	49 f4       	brne	.+18     	; 0x761a <load_wav+0x23e>
				md |= 2; wsmp *= 2;
    7608:	65 96       	adiw	r28, 0x15	; 21
    760a:	2e ad       	ldd	r18, Y+62	; 0x3e
    760c:	3f ad       	ldd	r19, Y+63	; 0x3f
    760e:	65 97       	sbiw	r28, 0x15	; 21
    7610:	22 60       	ori	r18, 0x02	; 2
    7612:	65 96       	adiw	r28, 0x15	; 21
    7614:	2e af       	std	Y+62, r18	; 0x3e
    7616:	3f af       	std	Y+63, r19	; 0x3f
    7618:	65 97       	sbiw	r28, 0x15	; 21
			}
			fsmp = LD_DWORD(&buff[4]);		/* Sampling rate */
    761a:	d1 01       	movw	r26, r2
    761c:	14 96       	adiw	r26, 0x04	; 4
    761e:	8d 91       	ld	r24, X+
    7620:	9d 91       	ld	r25, X+
    7622:	0d 90       	ld	r0, X+
    7624:	bc 91       	ld	r27, X
    7626:	a0 2d       	mov	r26, r0
    7628:	6f 96       	adiw	r28, 0x1f	; 31
    762a:	8c af       	std	Y+60, r24	; 0x3c
    762c:	9d af       	std	Y+61, r25	; 0x3d
    762e:	ae af       	std	Y+62, r26	; 0x3e
    7630:	bf af       	std	Y+63, r27	; 0x3f
    7632:	6f 97       	sbiw	r28, 0x1f	; 31
			break;
    7634:	4c cf       	rjmp	.-360    	; 0x74ce <load_wav+0xf2>
			case FCC('f','a','c','t') :
			f_lseek(fp, f_tell(fp) + sz);
			break;

			case FCC('d','a','t','a') :
			offw = f_tell(fp);	/* Wave data start offset */
    7636:	d8 01       	movw	r26, r16
    7638:	16 96       	adiw	r26, 0x06	; 6
    763a:	2d 91       	ld	r18, X+
    763c:	3d 91       	ld	r19, X+
    763e:	4d 91       	ld	r20, X+
    7640:	5c 91       	ld	r21, X
    7642:	19 97       	sbiw	r26, 0x09	; 9
    7644:	6b 96       	adiw	r28, 0x1b	; 27
    7646:	2c af       	std	Y+60, r18	; 0x3c
    7648:	3d af       	std	Y+61, r19	; 0x3d
    764a:	4e af       	std	Y+62, r20	; 0x3e
    764c:	5f af       	std	Y+63, r21	; 0x3f
    764e:	6b 97       	sbiw	r28, 0x1b	; 27
			szwav = sz;			/* Wave data length [byte] */
			f_lseek(fp, f_tell(fp) + sz);
    7650:	ba 01       	movw	r22, r20
    7652:	a9 01       	movw	r20, r18
    7654:	48 0d       	add	r20, r8
    7656:	59 1d       	adc	r21, r9
    7658:	6a 1d       	adc	r22, r10
    765a:	7b 1d       	adc	r23, r11
    765c:	c8 01       	movw	r24, r16
    765e:	0f d8       	rcall	.-4066   	; 0x667e <f_lseek>
	/* Analyze the RIFF-WAVE header and get properties */
	nam[0] = art[0] = 0;
	md = fsmp = wsmp = offw = szwav = 0;
	while (f_tell(fp) < eof) {
		if (f_read(fp, buff, 8, &br) || br != 8) return -1;
		sz = (LD_DWORD(&buff[4]) + 1) & ~1;
    7660:	24 01       	movw	r4, r8
    7662:	35 01       	movw	r6, r10

			case FCC('d','a','t','a') :
			offw = f_tell(fp);	/* Wave data start offset */
			szwav = sz;			/* Wave data length [byte] */
			f_lseek(fp, f_tell(fp) + sz);
			break;
    7664:	34 cf       	rjmp	.-408    	; 0x74ce <load_wav+0xf2>

			case FCC('L','I','S','T'):
			sz += f_tell(fp);
    7666:	f8 01       	movw	r30, r16
    7668:	c6 80       	ldd	r12, Z+6	; 0x06
    766a:	d7 80       	ldd	r13, Z+7	; 0x07
    766c:	e0 84       	ldd	r14, Z+8	; 0x08
    766e:	f1 84       	ldd	r15, Z+9	; 0x09
    7670:	c8 0c       	add	r12, r8
    7672:	d9 1c       	adc	r13, r9
    7674:	ea 1c       	adc	r14, r10
    7676:	fb 1c       	adc	r15, r11
			if (f_read(fp, buff, 4, &br) || br != 4) return -1;
    7678:	9e 01       	movw	r18, r28
    767a:	23 5b       	subi	r18, 0xB3	; 179
    767c:	3f 4f       	sbci	r19, 0xFF	; 255
    767e:	44 e0       	ldi	r20, 0x04	; 4
    7680:	50 e0       	ldi	r21, 0x00	; 0
    7682:	b1 01       	movw	r22, r2
    7684:	c8 01       	movw	r24, r16
    7686:	0e 94 b7 31 	call	0x636e	; 0x636e <f_read>
    768a:	81 11       	cpse	r24, r1
    768c:	35 c1       	rjmp	.+618    	; 0x78f8 <load_wav+0x51c>
    768e:	2f 96       	adiw	r28, 0x0f	; 15
    7690:	8e ad       	ldd	r24, Y+62	; 0x3e
    7692:	9f ad       	ldd	r25, Y+63	; 0x3f
    7694:	2f 97       	sbiw	r28, 0x0f	; 15
    7696:	04 97       	sbiw	r24, 0x04	; 4
    7698:	09 f0       	breq	.+2      	; 0x769c <load_wav+0x2c0>
    769a:	2e c1       	rjmp	.+604    	; 0x78f8 <load_wav+0x51c>
			if (LD_DWORD(buff) == FCC('I','N','F','O')) {	/* LIST/INFO chunk */
    769c:	f1 01       	movw	r30, r2
    769e:	80 81       	ld	r24, Z
    76a0:	91 81       	ldd	r25, Z+1	; 0x01
    76a2:	a2 81       	ldd	r26, Z+2	; 0x02
    76a4:	b3 81       	ldd	r27, Z+3	; 0x03
    76a6:	89 34       	cpi	r24, 0x49	; 73
    76a8:	9e 44       	sbci	r25, 0x4E	; 78
    76aa:	a6 44       	sbci	r26, 0x46	; 70
    76ac:	bf 44       	sbci	r27, 0x4F	; 79
    76ae:	09 f0       	breq	.+2      	; 0x76b2 <load_wav+0x2d6>
    76b0:	5e c0       	rjmp	.+188    	; 0x776e <load_wav+0x392>
				while (f_tell(fp) < sz) {
    76b2:	f8 01       	movw	r30, r16
    76b4:	86 81       	ldd	r24, Z+6	; 0x06
    76b6:	97 81       	ldd	r25, Z+7	; 0x07
    76b8:	a0 85       	ldd	r26, Z+8	; 0x08
    76ba:	b1 85       	ldd	r27, Z+9	; 0x09
    76bc:	8c 15       	cp	r24, r12
    76be:	9d 05       	cpc	r25, r13
    76c0:	ae 05       	cpc	r26, r14
    76c2:	bf 05       	cpc	r27, r15
    76c4:	08 f0       	brcs	.+2      	; 0x76c8 <load_wav+0x2ec>
    76c6:	03 cf       	rjmp	.-506    	; 0x74ce <load_wav+0xf2>
					if (f_read(fp, buff, 8, &br) || br != 8) return -1;
    76c8:	9e 01       	movw	r18, r28
    76ca:	23 5b       	subi	r18, 0xB3	; 179
    76cc:	3f 4f       	sbci	r19, 0xFF	; 255
    76ce:	48 e0       	ldi	r20, 0x08	; 8
    76d0:	50 e0       	ldi	r21, 0x00	; 0
    76d2:	b1 01       	movw	r22, r2
    76d4:	c8 01       	movw	r24, r16
    76d6:	0e 94 b7 31 	call	0x636e	; 0x636e <f_read>
    76da:	81 11       	cpse	r24, r1
    76dc:	0d c1       	rjmp	.+538    	; 0x78f8 <load_wav+0x51c>
    76de:	2f 96       	adiw	r28, 0x0f	; 15
    76e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    76e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    76e4:	2f 97       	sbiw	r28, 0x0f	; 15
    76e6:	08 97       	sbiw	r24, 0x08	; 8
    76e8:	09 f0       	breq	.+2      	; 0x76ec <load_wav+0x310>
    76ea:	06 c1       	rjmp	.+524    	; 0x78f8 <load_wav+0x51c>
					ssz = (LD_DWORD(&buff[4]) + 1) & ~1;
    76ec:	d1 01       	movw	r26, r2
    76ee:	14 96       	adiw	r26, 0x04	; 4
    76f0:	8d 90       	ld	r8, X+
    76f2:	9d 90       	ld	r9, X+
    76f4:	ad 90       	ld	r10, X+
    76f6:	bc 90       	ld	r11, X
    76f8:	17 97       	sbiw	r26, 0x07	; 7
    76fa:	bf ef       	ldi	r27, 0xFF	; 255
    76fc:	8b 1a       	sub	r8, r27
    76fe:	9b 0a       	sbc	r9, r27
    7700:	ab 0a       	sbc	r10, r27
    7702:	bb 0a       	sbc	r11, r27
    7704:	e8 94       	clt
    7706:	80 f8       	bld	r8, 0
					p = 0;
					switch (LD_DWORD(buff)) {
    7708:	f1 01       	movw	r30, r2
    770a:	80 81       	ld	r24, Z
    770c:	91 81       	ldd	r25, Z+1	; 0x01
    770e:	a2 81       	ldd	r26, Z+2	; 0x02
    7710:	b3 81       	ldd	r27, Z+3	; 0x03
    7712:	89 34       	cpi	r24, 0x49	; 73
    7714:	fe e4       	ldi	r31, 0x4E	; 78
    7716:	9f 07       	cpc	r25, r31
    7718:	f1 e4       	ldi	r31, 0x41	; 65
    771a:	af 07       	cpc	r26, r31
    771c:	fd e4       	ldi	r31, 0x4D	; 77
    771e:	bf 07       	cpc	r27, r31
    7720:	39 f0       	breq	.+14     	; 0x7730 <load_wav+0x354>
    7722:	89 34       	cpi	r24, 0x49	; 73
    7724:	91 44       	sbci	r25, 0x41	; 65
    7726:	a2 45       	sbci	r26, 0x52	; 82
    7728:	b4 45       	sbci	r27, 0x54	; 84
    772a:	09 f4       	brne	.+2      	; 0x772e <load_wav+0x352>
    772c:	e8 c0       	rjmp	.+464    	; 0x78fe <load_wav+0x522>
    772e:	0d c0       	rjmp	.+26     	; 0x774a <load_wav+0x36e>
						case FCC('I','N','A','M'):		/* INAM sub-chunk */
						p = nam; break;
    7730:	60 96       	adiw	r28, 0x10	; 16
    7732:	6f ad       	ldd	r22, Y+63	; 0x3f
    7734:	60 97       	sbiw	r28, 0x10	; 16
    7736:	61 96       	adiw	r28, 0x11	; 17
    7738:	7f ad       	ldd	r23, Y+63	; 0x3f
    773a:	61 97       	sbiw	r28, 0x11	; 17
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
					}
					if (p && ssz <= NBSIZE) {
    773c:	31 e2       	ldi	r19, 0x21	; 33
    773e:	83 16       	cp	r8, r19
    7740:	91 04       	cpc	r9, r1
    7742:	a1 04       	cpc	r10, r1
    7744:	b1 04       	cpc	r11, r1
    7746:	08 f4       	brcc	.+2      	; 0x774a <load_wav+0x36e>
    7748:	ce c0       	rjmp	.+412    	; 0x78e6 <load_wav+0x50a>
						if (f_read(fp, p, ssz, &br) || br != ssz) return -1;
						} else {
						if (f_lseek(fp, f_tell(fp) + ssz)) return -1;
    774a:	d8 01       	movw	r26, r16
    774c:	16 96       	adiw	r26, 0x06	; 6
    774e:	4d 91       	ld	r20, X+
    7750:	5d 91       	ld	r21, X+
    7752:	6d 91       	ld	r22, X+
    7754:	7c 91       	ld	r23, X
    7756:	19 97       	sbiw	r26, 0x09	; 9
    7758:	48 0d       	add	r20, r8
    775a:	59 1d       	adc	r21, r9
    775c:	6a 1d       	adc	r22, r10
    775e:	7b 1d       	adc	r23, r11
    7760:	c8 01       	movw	r24, r16
    7762:	0e 94 3f 33 	call	0x667e	; 0x667e <f_lseek>
    7766:	88 23       	and	r24, r24
    7768:	09 f4       	brne	.+2      	; 0x776c <load_wav+0x390>
    776a:	a3 cf       	rjmp	.-186    	; 0x76b2 <load_wav+0x2d6>
    776c:	c5 c0       	rjmp	.+394    	; 0x78f8 <load_wav+0x51c>
					}
				}
				} else {
				if (f_lseek(fp, sz)) return -1;	/* Skip unknown sub-chunk type */
    776e:	b7 01       	movw	r22, r14
    7770:	a6 01       	movw	r20, r12
    7772:	c8 01       	movw	r24, r16
    7774:	0e 94 3f 33 	call	0x667e	; 0x667e <f_lseek>
    7778:	88 23       	and	r24, r24
    777a:	09 f4       	brne	.+2      	; 0x777e <load_wav+0x3a2>
    777c:	a8 ce       	rjmp	.-688    	; 0x74ce <load_wav+0xf2>
    777e:	bc c0       	rjmp	.+376    	; 0x78f8 <load_wav+0x51c>

			default :	/* Unknown chunk */
			return -1;
		}
	}
	if (!szwav || !fsmp) return -1;		/* Check if valid WAV file */
    7780:	41 14       	cp	r4, r1
    7782:	51 04       	cpc	r5, r1
    7784:	61 04       	cpc	r6, r1
    7786:	71 04       	cpc	r7, r1
    7788:	09 f4       	brne	.+2      	; 0x778c <load_wav+0x3b0>
    778a:	b6 c0       	rjmp	.+364    	; 0x78f8 <load_wav+0x51c>
    778c:	6f 96       	adiw	r28, 0x1f	; 31
    778e:	8c ad       	ldd	r24, Y+60	; 0x3c
    7790:	9d ad       	ldd	r25, Y+61	; 0x3d
    7792:	ae ad       	ldd	r26, Y+62	; 0x3e
    7794:	bf ad       	ldd	r27, Y+63	; 0x3f
    7796:	6f 97       	sbiw	r28, 0x1f	; 31
    7798:	89 2b       	or	r24, r25
    779a:	8a 2b       	or	r24, r26
    779c:	8b 2b       	or	r24, r27
    779e:	09 f4       	brne	.+2      	; 0x77a2 <load_wav+0x3c6>
    77a0:	ab c0       	rjmp	.+342    	; 0x78f8 <load_wav+0x51c>
	if (f_lseek(fp, offw)) return -1;	/* Seek to top of wav data */
    77a2:	6b 96       	adiw	r28, 0x1b	; 27
    77a4:	4c ad       	ldd	r20, Y+60	; 0x3c
    77a6:	5d ad       	ldd	r21, Y+61	; 0x3d
    77a8:	6e ad       	ldd	r22, Y+62	; 0x3e
    77aa:	7f ad       	ldd	r23, Y+63	; 0x3f
    77ac:	6b 97       	sbiw	r28, 0x1b	; 27
    77ae:	c8 01       	movw	r24, r16
    77b0:	0e 94 3f 33 	call	0x667e	; 0x667e <f_lseek>
    77b4:	81 11       	cpse	r24, r1
    77b6:	a0 c0       	rjmp	.+320    	; 0x78f8 <load_wav+0x51c>

	//xprintf(PSTR("IART=%s\nINAM=%s\n"), art, nam);
	//xprintf(PSTR("Sample=%u.%ukHz/%ubit/%S\nLength=%u:%02u\n"), (UINT)(fsmp / 1000), (UINT)(fsmp / 100) % 10, (md & 2) ? 16 : 8, (md & 1) ? PSTR("st") : PSTR("mo"), tc / 60, tc % 60);

	/* Initialize stream parameters and start sound streming */
	fcb.mode = md;
    77b8:	65 96       	adiw	r28, 0x15	; 21
    77ba:	ae ad       	ldd	r26, Y+62	; 0x3e
    77bc:	bf ad       	ldd	r27, Y+63	; 0x3f
    77be:	65 97       	sbiw	r28, 0x15	; 21
    77c0:	23 96       	adiw	r28, 0x03	; 3
    77c2:	ae af       	std	Y+62, r26	; 0x3e
    77c4:	bf af       	std	Y+63, r27	; 0x3f
    77c6:	23 97       	sbiw	r28, 0x03	; 3
	fcb.buff = buff;
    77c8:	2b 96       	adiw	r28, 0x0b	; 11
    77ca:	2e ae       	std	Y+62, r2	; 0x3e
    77cc:	3f ae       	std	Y+63, r3	; 0x3f
    77ce:	2b 97       	sbiw	r28, 0x0b	; 11
	fcb.sz_buff = sz_work;
    77d0:	a5 96       	adiw	r28, 0x25	; 37
    77d2:	ee ad       	ldd	r30, Y+62	; 0x3e
    77d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    77d6:	a5 97       	sbiw	r28, 0x25	; 37
    77d8:	2d 96       	adiw	r28, 0x0d	; 13
    77da:	ee af       	std	Y+62, r30	; 0x3e
    77dc:	ff af       	std	Y+63, r31	; 0x3f
    77de:	2d 97       	sbiw	r28, 0x0d	; 13
	if (!sound_start(&fcb, fsmp)) return -1;
    77e0:	6f 96       	adiw	r28, 0x1f	; 31
    77e2:	4c ad       	ldd	r20, Y+60	; 0x3c
    77e4:	5d ad       	ldd	r21, Y+61	; 0x3d
    77e6:	6e ad       	ldd	r22, Y+62	; 0x3e
    77e8:	7f ad       	ldd	r23, Y+63	; 0x3f
    77ea:	6f 97       	sbiw	r28, 0x1f	; 31
    77ec:	ce 01       	movw	r24, r28
    77ee:	8f 5b       	subi	r24, 0xBF	; 191
    77f0:	9f 4f       	sbci	r25, 0xFF	; 255
    77f2:	b3 dd       	rcall	.-1178   	; 0x735a <sound_start>
    77f4:	89 2b       	or	r24, r25
    77f6:	09 f4       	brne	.+2      	; 0x77fa <load_wav+0x41e>
    77f8:	7f c0       	rjmp	.+254    	; 0x78f8 <load_wav+0x51c>

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
    77fa:	a5 96       	adiw	r28, 0x25	; 37
    77fc:	ce ac       	ldd	r12, Y+62	; 0x3e
    77fe:	df ac       	ldd	r13, Y+63	; 0x3f
    7800:	a5 97       	sbiw	r28, 0x25	; 37
    7802:	d6 94       	lsr	r13
    7804:	c7 94       	ror	r12
			btr = (szwav >= sz_work / 2) ? sz_work / 2 : szwav;
    7806:	96 01       	movw	r18, r12
    7808:	40 e0       	ldi	r20, 0x00	; 0
    780a:	50 e0       	ldi	r21, 0x00	; 0
    780c:	67 96       	adiw	r28, 0x17	; 23
    780e:	2c af       	std	Y+60, r18	; 0x3c
    7810:	3d af       	std	Y+61, r19	; 0x3d
    7812:	4e af       	std	Y+62, r20	; 0x3e
    7814:	5f af       	std	Y+63, r21	; 0x3f
    7816:	67 97       	sbiw	r28, 0x17	; 23
    7818:	e1 2c       	mov	r14, r1
    781a:	f1 2c       	mov	r15, r1
			f_read(fp, &buff[wi], btr, &br);
			if (br != btr) break;
			szwav -= br;
			wi = (wi + br) & (sz_work - 1);
    781c:	a5 96       	adiw	r28, 0x25	; 37
    781e:	ae ac       	ldd	r10, Y+62	; 0x3e
    7820:	bf ac       	ldd	r11, Y+63	; 0x3f
    7822:	a5 97       	sbiw	r28, 0x25	; 37
    7824:	31 e0       	ldi	r19, 0x01	; 1
    7826:	a3 1a       	sub	r10, r19
    7828:	b1 08       	sbc	r11, r1
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
    782a:	29 96       	adiw	r28, 0x09	; 9
    782c:	8e ad       	ldd	r24, Y+62	; 0x3e
    782e:	9f ad       	ldd	r25, Y+63	; 0x3f
    7830:	29 97       	sbiw	r28, 0x09	; 9
	fcb.buff = buff;
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
    7832:	41 14       	cp	r4, r1
    7834:	51 04       	cpc	r5, r1
    7836:	61 04       	cpc	r6, r1
    7838:	71 04       	cpc	r7, r1
    783a:	09 f4       	brne	.+2      	; 0x783e <load_wav+0x462>
    783c:	4e c0       	rjmp	.+156    	; 0x78da <load_wav+0x4fe>
		if (szwav && fcb.ct <= sz_work / 2) {	/* Refill FIFO when it gets half empty */
    783e:	c8 16       	cp	r12, r24
    7840:	d9 06       	cpc	r13, r25
    7842:	08 f4       	brcc	.+2      	; 0x7846 <load_wav+0x46a>
    7844:	3f c0       	rjmp	.+126    	; 0x78c4 <load_wav+0x4e8>
			btr = (szwav >= sz_work / 2) ? sz_work / 2 : szwav;
    7846:	94 2d       	mov	r25, r4
    7848:	85 2d       	mov	r24, r5
    784a:	67 96       	adiw	r28, 0x17	; 23
    784c:	2c ad       	ldd	r18, Y+60	; 0x3c
    784e:	3d ad       	ldd	r19, Y+61	; 0x3d
    7850:	4e ad       	ldd	r20, Y+62	; 0x3e
    7852:	5f ad       	ldd	r21, Y+63	; 0x3f
    7854:	67 97       	sbiw	r28, 0x17	; 23
    7856:	24 15       	cp	r18, r4
    7858:	35 05       	cpc	r19, r5
    785a:	46 05       	cpc	r20, r6
    785c:	57 05       	cpc	r21, r7
    785e:	30 f4       	brcc	.+12     	; 0x786c <load_wav+0x490>
    7860:	64 96       	adiw	r28, 0x14	; 20
    7862:	9f ad       	ldd	r25, Y+63	; 0x3f
    7864:	64 97       	sbiw	r28, 0x14	; 20
    7866:	65 96       	adiw	r28, 0x15	; 21
    7868:	8f ad       	ldd	r24, Y+63	; 0x3f
    786a:	65 97       	sbiw	r28, 0x15	; 21
    786c:	89 2e       	mov	r8, r25
    786e:	98 2e       	mov	r9, r24
			f_read(fp, &buff[wi], btr, &br);
    7870:	9e 01       	movw	r18, r28
    7872:	23 5b       	subi	r18, 0xB3	; 179
    7874:	3f 4f       	sbci	r19, 0xFF	; 255
    7876:	49 2f       	mov	r20, r25
    7878:	58 2f       	mov	r21, r24
    787a:	b1 01       	movw	r22, r2
    787c:	6e 0d       	add	r22, r14
    787e:	7f 1d       	adc	r23, r15
    7880:	c8 01       	movw	r24, r16
    7882:	0e 94 b7 31 	call	0x636e	; 0x636e <f_read>
			if (br != btr) break;
    7886:	2f 96       	adiw	r28, 0x0f	; 15
    7888:	8e ad       	ldd	r24, Y+62	; 0x3e
    788a:	9f ad       	ldd	r25, Y+63	; 0x3f
    788c:	2f 97       	sbiw	r28, 0x0f	; 15
    788e:	88 15       	cp	r24, r8
    7890:	99 05       	cpc	r25, r9
    7892:	29 f5       	brne	.+74     	; 0x78de <load_wav+0x502>
			szwav -= br;
    7894:	48 1a       	sub	r4, r24
    7896:	59 0a       	sbc	r5, r25
    7898:	61 08       	sbc	r6, r1
    789a:	71 08       	sbc	r7, r1
			wi = (wi + br) & (sz_work - 1);
    789c:	e8 0e       	add	r14, r24
    789e:	f9 1e       	adc	r15, r25
    78a0:	ea 20       	and	r14, r10
    78a2:	fb 20       	and	r15, r11
			cli();
    78a4:	f8 94       	cli
			fcb.ct += br;
    78a6:	29 96       	adiw	r28, 0x09	; 9
    78a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    78aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    78ac:	29 97       	sbiw	r28, 0x09	; 9
    78ae:	2f 96       	adiw	r28, 0x0f	; 15
    78b0:	2e ad       	ldd	r18, Y+62	; 0x3e
    78b2:	3f ad       	ldd	r19, Y+63	; 0x3f
    78b4:	2f 97       	sbiw	r28, 0x0f	; 15
    78b6:	82 0f       	add	r24, r18
    78b8:	93 1f       	adc	r25, r19
    78ba:	29 96       	adiw	r28, 0x09	; 9
    78bc:	8e af       	std	Y+62, r24	; 0x3e
    78be:	9f af       	std	Y+63, r25	; 0x3f
    78c0:	29 97       	sbiw	r28, 0x09	; 9
			sei();
    78c2:	78 94       	sei
		//if (uart_test()) {		/* Exit if a command arrived */
		//	k = uart_getc();
		//	break;
		//}
		
		if (btn_check_press() == BTN2)
    78c4:	0e 94 a1 11 	call	0x2342	; 0x2342 <btn_check_press>
    78c8:	82 30       	cpi	r24, 0x02	; 2
    78ca:	11 f4       	brne	.+4      	; 0x78d0 <load_wav+0x4f4>
		{
			sound_stop();
    78cc:	78 dd       	rcall	.-1296   	; 0x73be <sound_stop>
			break;
    78ce:	07 c0       	rjmp	.+14     	; 0x78de <load_wav+0x502>
		}
		
		t = (f_tell(fp) - offw - fcb.ct) / fsmp / wsmp;	/* Refresh time display every 1 sec */
    78d0:	29 96       	adiw	r28, 0x09	; 9
    78d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    78d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    78d6:	29 97       	sbiw	r28, 0x09	; 9
    78d8:	a8 cf       	rjmp	.-176    	; 0x782a <load_wav+0x44e>
	fcb.buff = buff;
	fcb.sz_buff = sz_work;
	if (!sound_start(&fcb, fsmp)) return -1;

	k = 0; wi = 0;
	while (szwav || fcb.ct >= 4) {
    78da:	04 97       	sbiw	r24, 0x04	; 4
    78dc:	98 f7       	brcc	.-26     	; 0x78c4 <load_wav+0x4e8>
			tc = t;
			//xprintf(PSTR("\rTime=%u:%02u"), tc / 60, tc % 60);
		}
	}

	sound_stop();	/* Stop sound output */
    78de:	6f dd       	rcall	.-1314   	; 0x73be <sound_stop>

	//xputc('\n');
	return k;	/* Terminated due to -1:error, 0:eot, >0:key code */
    78e0:	80 e0       	ldi	r24, 0x00	; 0
    78e2:	90 e0       	ldi	r25, 0x00	; 0
    78e4:	20 c0       	rjmp	.+64     	; 0x7926 <load_wav+0x54a>
						p = nam; break;
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
					}
					if (p && ssz <= NBSIZE) {
						if (f_read(fp, p, ssz, &br) || br != ssz) return -1;
    78e6:	9e 01       	movw	r18, r28
    78e8:	23 5b       	subi	r18, 0xB3	; 179
    78ea:	3f 4f       	sbci	r19, 0xFF	; 255
    78ec:	a4 01       	movw	r20, r8
    78ee:	c8 01       	movw	r24, r16
    78f0:	0e 94 b7 31 	call	0x636e	; 0x636e <f_read>
    78f4:	88 23       	and	r24, r24
    78f6:	51 f0       	breq	.+20     	; 0x790c <load_wav+0x530>
				if (f_lseek(fp, sz)) return -1;	/* Skip unknown sub-chunk type */
			}
			break;

			default :	/* Unknown chunk */
			return -1;
    78f8:	8f ef       	ldi	r24, 0xFF	; 255
    78fa:	9f ef       	ldi	r25, 0xFF	; 255
    78fc:	14 c0       	rjmp	.+40     	; 0x7926 <load_wav+0x54a>
					p = 0;
					switch (LD_DWORD(buff)) {
						case FCC('I','N','A','M'):		/* INAM sub-chunk */
						p = nam; break;
						case FCC('I','A','R','T'):		/* IART sub-cnunk */
						p = art; break;
    78fe:	62 96       	adiw	r28, 0x12	; 18
    7900:	6f ad       	ldd	r22, Y+63	; 0x3f
    7902:	62 97       	sbiw	r28, 0x12	; 18
    7904:	63 96       	adiw	r28, 0x13	; 19
    7906:	7f ad       	ldd	r23, Y+63	; 0x3f
    7908:	63 97       	sbiw	r28, 0x13	; 19
    790a:	18 cf       	rjmp	.-464    	; 0x773c <load_wav+0x360>
					}
					if (p && ssz <= NBSIZE) {
						if (f_read(fp, p, ssz, &br) || br != ssz) return -1;
    790c:	2f 96       	adiw	r28, 0x0f	; 15
    790e:	8e ad       	ldd	r24, Y+62	; 0x3e
    7910:	9f ad       	ldd	r25, Y+63	; 0x3f
    7912:	2f 97       	sbiw	r28, 0x0f	; 15
    7914:	a0 e0       	ldi	r26, 0x00	; 0
    7916:	b0 e0       	ldi	r27, 0x00	; 0
    7918:	88 15       	cp	r24, r8
    791a:	99 05       	cpc	r25, r9
    791c:	aa 05       	cpc	r26, r10
    791e:	bb 05       	cpc	r27, r11
    7920:	09 f4       	brne	.+2      	; 0x7924 <load_wav+0x548>
    7922:	c7 ce       	rjmp	.-626    	; 0x76b2 <load_wav+0x2d6>
    7924:	e9 cf       	rjmp	.-46     	; 0x78f8 <load_wav+0x51c>

	sound_stop();	/* Stop sound output */

	//xputc('\n');
	return k;	/* Terminated due to -1:error, 0:eot, >0:key code */
}
    7926:	cc 59       	subi	r28, 0x9C	; 156
    7928:	df 4f       	sbci	r29, 0xFF	; 255
    792a:	cd bf       	out	0x3d, r28	; 61
    792c:	de bf       	out	0x3e, r29	; 62
    792e:	df 91       	pop	r29
    7930:	cf 91       	pop	r28
    7932:	1f 91       	pop	r17
    7934:	0f 91       	pop	r16
    7936:	ff 90       	pop	r15
    7938:	ef 90       	pop	r14
    793a:	df 90       	pop	r13
    793c:	cf 90       	pop	r12
    793e:	bf 90       	pop	r11
    7940:	af 90       	pop	r10
    7942:	9f 90       	pop	r9
    7944:	8f 90       	pop	r8
    7946:	7f 90       	pop	r7
    7948:	6f 90       	pop	r6
    794a:	5f 90       	pop	r5
    794c:	4f 90       	pop	r4
    794e:	3f 90       	pop	r3
    7950:	2f 90       	pop	r2
    7952:	08 95       	ret

00007954 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
    7954:	2f 92       	push	r2
    7956:	3f 92       	push	r3
    7958:	5f 92       	push	r5
    795a:	6f 92       	push	r6
    795c:	7f 92       	push	r7
    795e:	8f 92       	push	r8
    7960:	9f 92       	push	r9
    7962:	bf 92       	push	r11
    7964:	cf 92       	push	r12
    7966:	df 92       	push	r13
    7968:	ef 92       	push	r14
    796a:	ff 92       	push	r15
    796c:	0f 93       	push	r16
    796e:	1f 93       	push	r17
    7970:	cf 93       	push	r28
    7972:	df 93       	push	r29
    7974:	00 d0       	rcall	.+0      	; 0x7976 <jsmn_parse+0x22>
    7976:	00 d0       	rcall	.+0      	; 0x7978 <jsmn_parse+0x24>
    7978:	cd b7       	in	r28, 0x3d	; 61
    797a:	de b7       	in	r29, 0x3e	; 62
    797c:	8d 83       	std	Y+5, r24	; 0x05
    797e:	9e 83       	std	Y+6, r25	; 0x06
    7980:	1a 01       	movw	r2, r20
    7982:	38 01       	movw	r6, r16
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;
    7984:	80 e0       	ldi	r24, 0x00	; 0
    7986:	90 e0       	ldi	r25, 0x00	; 0
			case ':':
				parser->toksuper = parser->toknext - 1;
				break;
			case ',':
				if (tokens != NULL &&
						tokens[parser->toksuper].type != JSMN_ARRAY &&
    7988:	47 e0       	ldi	r20, 0x07	; 7
    798a:	b4 2e       	mov	r11, r20
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
    798c:	0f ef       	ldi	r16, 0xFF	; 255
    798e:	1f ef       	ldi	r17, 0xFF	; 255
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    7990:	53 e0       	ldi	r21, 0x03	; 3
    7992:	55 2e       	mov	r5, r21
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    7994:	ad 81       	ldd	r26, Y+5	; 0x05
    7996:	be 81       	ldd	r27, Y+6	; 0x06
    7998:	0d 90       	ld	r0, X+
    799a:	bc 91       	ld	r27, X
    799c:	a0 2d       	mov	r26, r0
    799e:	ab 83       	std	Y+3, r26	; 0x03
    79a0:	bc 83       	std	Y+4, r27	; 0x04
    79a2:	a2 15       	cp	r26, r2
    79a4:	b3 05       	cpc	r27, r3
    79a6:	90 f0       	brcs	.+36     	; 0x79cc <jsmn_parse+0x78>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    79a8:	ad 81       	ldd	r26, Y+5	; 0x05
    79aa:	be 81       	ldd	r27, Y+6	; 0x06
    79ac:	12 96       	adiw	r26, 0x02	; 2
    79ae:	ed 91       	ld	r30, X+
    79b0:	fc 91       	ld	r31, X
    79b2:	13 97       	sbiw	r26, 0x03	; 3
    79b4:	bf 01       	movw	r22, r30
    79b6:	61 50       	subi	r22, 0x01	; 1
    79b8:	71 09       	sbc	r23, r1
    79ba:	a7 e0       	ldi	r26, 0x07	; 7
    79bc:	ae 9f       	mul	r26, r30
    79be:	a0 01       	movw	r20, r0
    79c0:	af 9f       	mul	r26, r31
    79c2:	50 0d       	add	r21, r0
    79c4:	11 24       	eor	r1, r1
    79c6:	42 0f       	add	r20, r18
    79c8:	53 1f       	adc	r21, r19
    79ca:	93 c2       	rjmp	.+1318   	; 0x7ef2 <jsmn_parse+0x59e>
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    79cc:	eb 81       	ldd	r30, Y+3	; 0x03
    79ce:	fc 81       	ldd	r31, Y+4	; 0x04
    79d0:	e6 0f       	add	r30, r22
    79d2:	f7 1f       	adc	r31, r23
    79d4:	40 81       	ld	r20, Z
    79d6:	44 23       	and	r20, r20
    79d8:	39 f3       	breq	.-50     	; 0x79a8 <jsmn_parse+0x54>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    79da:	4c 32       	cpi	r20, 0x2C	; 44
    79dc:	09 f4       	brne	.+2      	; 0x79e0 <jsmn_parse+0x8c>
    79de:	a2 c1       	rjmp	.+836    	; 0x7d24 <jsmn_parse+0x3d0>
    79e0:	c8 f4       	brcc	.+50     	; 0x7a14 <jsmn_parse+0xc0>
    79e2:	4d 30       	cpi	r20, 0x0D	; 13
    79e4:	09 f4       	brne	.+2      	; 0x79e8 <jsmn_parse+0x94>
    79e6:	72 c2       	rjmp	.+1252   	; 0x7ecc <jsmn_parse+0x578>
    79e8:	28 f4       	brcc	.+10     	; 0x79f4 <jsmn_parse+0xa0>
    79ea:	49 50       	subi	r20, 0x09	; 9
    79ec:	42 30       	cpi	r20, 0x02	; 2
    79ee:	08 f4       	brcc	.+2      	; 0x79f2 <jsmn_parse+0x9e>
    79f0:	6d c2       	rjmp	.+1242   	; 0x7ecc <jsmn_parse+0x578>
    79f2:	00 c2       	rjmp	.+1024   	; 0x7df4 <jsmn_parse+0x4a0>
    79f4:	40 32       	cpi	r20, 0x20	; 32
    79f6:	09 f4       	brne	.+2      	; 0x79fa <jsmn_parse+0xa6>
    79f8:	69 c2       	rjmp	.+1234   	; 0x7ecc <jsmn_parse+0x578>
    79fa:	42 32       	cpi	r20, 0x22	; 34
    79fc:	09 f0       	breq	.+2      	; 0x7a00 <jsmn_parse+0xac>
    79fe:	fa c1       	rjmp	.+1012   	; 0x7df4 <jsmn_parse+0x4a0>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
    7a00:	8b 80       	ldd	r8, Y+3	; 0x03
    7a02:	9c 80       	ldd	r9, Y+4	; 0x04
    7a04:	ff ef       	ldi	r31, 0xFF	; 255
    7a06:	8f 1a       	sub	r8, r31
    7a08:	9f 0a       	sbc	r9, r31
    7a0a:	ad 81       	ldd	r26, Y+5	; 0x05
    7a0c:	be 81       	ldd	r27, Y+6	; 0x06
    7a0e:	8d 92       	st	X+, r8
    7a10:	9c 92       	st	X, r9
    7a12:	ce c0       	rjmp	.+412    	; 0x7bb0 <jsmn_parse+0x25c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
    7a14:	4d 35       	cpi	r20, 0x5D	; 93
    7a16:	09 f4       	brne	.+2      	; 0x7a1a <jsmn_parse+0xc6>
    7a18:	5f c0       	rjmp	.+190    	; 0x7ad8 <jsmn_parse+0x184>
    7a1a:	30 f4       	brcc	.+12     	; 0x7a28 <jsmn_parse+0xd4>
    7a1c:	4a 33       	cpi	r20, 0x3A	; 58
    7a1e:	09 f4       	brne	.+2      	; 0x7a22 <jsmn_parse+0xce>
    7a20:	79 c1       	rjmp	.+754    	; 0x7d14 <jsmn_parse+0x3c0>
    7a22:	4b 35       	cpi	r20, 0x5B	; 91
    7a24:	39 f0       	breq	.+14     	; 0x7a34 <jsmn_parse+0xe0>
    7a26:	e6 c1       	rjmp	.+972    	; 0x7df4 <jsmn_parse+0x4a0>
    7a28:	4b 37       	cpi	r20, 0x7B	; 123
    7a2a:	21 f0       	breq	.+8      	; 0x7a34 <jsmn_parse+0xe0>
    7a2c:	4d 37       	cpi	r20, 0x7D	; 125
    7a2e:	09 f4       	brne	.+2      	; 0x7a32 <jsmn_parse+0xde>
    7a30:	53 c0       	rjmp	.+166    	; 0x7ad8 <jsmn_parse+0x184>
    7a32:	e0 c1       	rjmp	.+960    	; 0x7df4 <jsmn_parse+0x4a0>
			case '{': case '[':
				count++;
    7a34:	01 96       	adiw	r24, 0x01	; 1
				if (tokens == NULL) {
    7a36:	21 15       	cp	r18, r1
    7a38:	31 05       	cpc	r19, r1
    7a3a:	09 f4       	brne	.+2      	; 0x7a3e <jsmn_parse+0xea>
    7a3c:	47 c2       	rjmp	.+1166   	; 0x7ecc <jsmn_parse+0x578>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    7a3e:	ad 81       	ldd	r26, Y+5	; 0x05
    7a40:	be 81       	ldd	r27, Y+6	; 0x06
    7a42:	12 96       	adiw	r26, 0x02	; 2
    7a44:	8d 90       	ld	r8, X+
    7a46:	9c 90       	ld	r9, X
    7a48:	13 97       	sbiw	r26, 0x03	; 3
    7a4a:	86 14       	cp	r8, r6
    7a4c:	97 04       	cpc	r9, r7
    7a4e:	08 f0       	brcs	.+2      	; 0x7a52 <jsmn_parse+0xfe>
    7a50:	cf c0       	rjmp	.+414    	; 0x7bf0 <jsmn_parse+0x29c>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    7a52:	f4 01       	movw	r30, r8
    7a54:	31 96       	adiw	r30, 0x01	; 1
    7a56:	ad 81       	ldd	r26, Y+5	; 0x05
    7a58:	be 81       	ldd	r27, Y+6	; 0x06
    7a5a:	12 96       	adiw	r26, 0x02	; 2
    7a5c:	ed 93       	st	X+, r30
    7a5e:	fc 93       	st	X, r31
    7a60:	13 97       	sbiw	r26, 0x03	; 3
    7a62:	b8 9c       	mul	r11, r8
    7a64:	f0 01       	movw	r30, r0
    7a66:	b9 9c       	mul	r11, r9
    7a68:	f0 0d       	add	r31, r0
    7a6a:	11 24       	eor	r1, r1
    7a6c:	e2 0f       	add	r30, r18
    7a6e:	f3 1f       	adc	r31, r19
    7a70:	e9 83       	std	Y+1, r30	; 0x01
    7a72:	fa 83       	std	Y+2, r31	; 0x02
	tok->start = tok->end = -1;
    7a74:	03 83       	std	Z+3, r16	; 0x03
    7a76:	14 83       	std	Z+4, r17	; 0x04
    7a78:	01 83       	std	Z+1, r16	; 0x01
    7a7a:	12 83       	std	Z+2, r17	; 0x02
	tok->size = 0;
    7a7c:	15 82       	std	Z+5, r1	; 0x05
    7a7e:	16 82       	std	Z+6, r1	; 0x06
				count++;
				if (tokens == NULL) {
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
    7a80:	ef 2b       	or	r30, r31
    7a82:	09 f4       	brne	.+2      	; 0x7a86 <jsmn_parse+0x132>
    7a84:	b5 c0       	rjmp	.+362    	; 0x7bf0 <jsmn_parse+0x29c>
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
    7a86:	14 96       	adiw	r26, 0x04	; 4
    7a88:	ed 90       	ld	r14, X+
    7a8a:	fc 90       	ld	r15, X
    7a8c:	15 97       	sbiw	r26, 0x05	; 5
    7a8e:	ff ef       	ldi	r31, 0xFF	; 255
    7a90:	ef 16       	cp	r14, r31
    7a92:	ff 06       	cpc	r15, r31
    7a94:	91 f0       	breq	.+36     	; 0x7aba <jsmn_parse+0x166>
					tokens[parser->toksuper].size++;
    7a96:	be 9c       	mul	r11, r14
    7a98:	60 01       	movw	r12, r0
    7a9a:	bf 9c       	mul	r11, r15
    7a9c:	d0 0c       	add	r13, r0
    7a9e:	11 24       	eor	r1, r1
    7aa0:	c2 0e       	add	r12, r18
    7aa2:	d3 1e       	adc	r13, r19
    7aa4:	d6 01       	movw	r26, r12
    7aa6:	15 96       	adiw	r26, 0x05	; 5
    7aa8:	ed 90       	ld	r14, X+
    7aaa:	fc 90       	ld	r15, X
    7aac:	16 97       	sbiw	r26, 0x06	; 6
    7aae:	bf ef       	ldi	r27, 0xFF	; 255
    7ab0:	eb 1a       	sub	r14, r27
    7ab2:	fb 0a       	sbc	r15, r27
    7ab4:	f6 01       	movw	r30, r12
    7ab6:	e5 82       	std	Z+5, r14	; 0x05
    7ab8:	f6 82       	std	Z+6, r15	; 0x06
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
    7aba:	4b 37       	cpi	r20, 0x7B	; 123
    7abc:	11 f4       	brne	.+4      	; 0x7ac2 <jsmn_parse+0x16e>
    7abe:	41 e0       	ldi	r20, 0x01	; 1
    7ac0:	01 c0       	rjmp	.+2      	; 0x7ac4 <jsmn_parse+0x170>
    7ac2:	42 e0       	ldi	r20, 0x02	; 2
    7ac4:	a9 81       	ldd	r26, Y+1	; 0x01
    7ac6:	ba 81       	ldd	r27, Y+2	; 0x02
    7ac8:	4c 93       	st	X, r20
				token->start = parser->pos;
    7aca:	eb 81       	ldd	r30, Y+3	; 0x03
    7acc:	fc 81       	ldd	r31, Y+4	; 0x04
    7ace:	11 96       	adiw	r26, 0x01	; 1
    7ad0:	ed 93       	st	X+, r30
    7ad2:	fc 93       	st	X, r31
    7ad4:	12 97       	sbiw	r26, 0x02	; 2
    7ad6:	6b c1       	rjmp	.+726    	; 0x7dae <jsmn_parse+0x45a>
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
    7ad8:	21 15       	cp	r18, r1
    7ada:	31 05       	cpc	r19, r1
    7adc:	09 f4       	brne	.+2      	; 0x7ae0 <jsmn_parse+0x18c>
    7ade:	f6 c1       	rjmp	.+1004   	; 0x7ecc <jsmn_parse+0x578>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
    7ae0:	4d 37       	cpi	r20, 0x7D	; 125
    7ae2:	11 f4       	brne	.+4      	; 0x7ae8 <jsmn_parse+0x194>
    7ae4:	41 e0       	ldi	r20, 0x01	; 1
    7ae6:	01 c0       	rjmp	.+2      	; 0x7aea <jsmn_parse+0x196>
    7ae8:	42 e0       	ldi	r20, 0x02	; 2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    7aea:	ed 81       	ldd	r30, Y+5	; 0x05
    7aec:	fe 81       	ldd	r31, Y+6	; 0x06
    7aee:	c2 80       	ldd	r12, Z+2	; 0x02
    7af0:	d3 80       	ldd	r13, Z+3	; 0x03
    7af2:	76 01       	movw	r14, r12
    7af4:	f1 e0       	ldi	r31, 0x01	; 1
    7af6:	ef 1a       	sub	r14, r31
    7af8:	f1 08       	sbc	r15, r1
    7afa:	bc 9c       	mul	r11, r12
    7afc:	f0 01       	movw	r30, r0
    7afe:	bd 9c       	mul	r11, r13
    7b00:	f0 0d       	add	r31, r0
    7b02:	11 24       	eor	r1, r1
    7b04:	37 97       	sbiw	r30, 0x07	; 7
    7b06:	e2 0f       	add	r30, r18
    7b08:	f3 1f       	adc	r31, r19
    7b0a:	f7 fc       	sbrc	r15, 7
    7b0c:	1f c0       	rjmp	.+62     	; 0x7b4c <jsmn_parse+0x1f8>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    7b0e:	c1 80       	ldd	r12, Z+1	; 0x01
    7b10:	d2 80       	ldd	r13, Z+2	; 0x02
    7b12:	cd 20       	and	r12, r13
    7b14:	c0 94       	com	r12
    7b16:	a9 f0       	breq	.+42     	; 0x7b42 <jsmn_parse+0x1ee>
    7b18:	c3 80       	ldd	r12, Z+3	; 0x03
    7b1a:	d4 80       	ldd	r13, Z+4	; 0x04
    7b1c:	af ef       	ldi	r26, 0xFF	; 255
    7b1e:	ca 16       	cp	r12, r26
    7b20:	da 06       	cpc	r13, r26
    7b22:	79 f4       	brne	.+30     	; 0x7b42 <jsmn_parse+0x1ee>
						if (token->type != type) {
    7b24:	90 80       	ld	r9, Z
    7b26:	94 12       	cpse	r9, r20
    7b28:	ee c1       	rjmp	.+988    	; 0x7f06 <jsmn_parse+0x5b2>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
    7b2a:	ad 81       	ldd	r26, Y+5	; 0x05
    7b2c:	be 81       	ldd	r27, Y+6	; 0x06
    7b2e:	14 96       	adiw	r26, 0x04	; 4
    7b30:	cd 92       	st	X+, r12
    7b32:	dc 92       	st	X, r13
    7b34:	15 97       	sbiw	r26, 0x05	; 5
						token->end = parser->pos + 1;
    7b36:	ab 81       	ldd	r26, Y+3	; 0x03
    7b38:	bc 81       	ldd	r27, Y+4	; 0x04
    7b3a:	11 96       	adiw	r26, 0x01	; 1
    7b3c:	a3 83       	std	Z+3, r26	; 0x03
    7b3e:	b4 83       	std	Z+4, r27	; 0x04
    7b40:	0a c0       	rjmp	.+20     	; 0x7b56 <jsmn_parse+0x202>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
    7b42:	b1 e0       	ldi	r27, 0x01	; 1
    7b44:	eb 1a       	sub	r14, r27
    7b46:	f1 08       	sbc	r15, r1
    7b48:	37 97       	sbiw	r30, 0x07	; 7
    7b4a:	df cf       	rjmp	.-66     	; 0x7b0a <jsmn_parse+0x1b6>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
    7b4c:	ef ef       	ldi	r30, 0xFF	; 255
    7b4e:	ee 16       	cp	r14, r30
    7b50:	fe 06       	cpc	r15, r30
    7b52:	09 f4       	brne	.+2      	; 0x7b56 <jsmn_parse+0x202>
    7b54:	d8 c1       	rjmp	.+944    	; 0x7f06 <jsmn_parse+0x5b2>
    7b56:	be 9c       	mul	r11, r14
    7b58:	d0 01       	movw	r26, r0
    7b5a:	bf 9c       	mul	r11, r15
    7b5c:	b0 0d       	add	r27, r0
    7b5e:	11 24       	eor	r1, r1
    7b60:	a2 0f       	add	r26, r18
    7b62:	b3 1f       	adc	r27, r19
				for (; i >= 0; i--) {
    7b64:	f7 fc       	sbrc	r15, 7
    7b66:	b2 c1       	rjmp	.+868    	; 0x7ecc <jsmn_parse+0x578>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
    7b68:	11 96       	adiw	r26, 0x01	; 1
    7b6a:	ed 91       	ld	r30, X+
    7b6c:	fc 91       	ld	r31, X
    7b6e:	12 97       	sbiw	r26, 0x02	; 2
    7b70:	31 96       	adiw	r30, 0x01	; 1
    7b72:	69 f0       	breq	.+26     	; 0x7b8e <jsmn_parse+0x23a>
    7b74:	13 96       	adiw	r26, 0x03	; 3
    7b76:	ed 91       	ld	r30, X+
    7b78:	fc 91       	ld	r31, X
    7b7a:	14 97       	sbiw	r26, 0x04	; 4
    7b7c:	31 96       	adiw	r30, 0x01	; 1
    7b7e:	39 f4       	brne	.+14     	; 0x7b8e <jsmn_parse+0x23a>
						parser->toksuper = i;
    7b80:	ad 81       	ldd	r26, Y+5	; 0x05
    7b82:	be 81       	ldd	r27, Y+6	; 0x06
    7b84:	14 96       	adiw	r26, 0x04	; 4
    7b86:	ed 92       	st	X+, r14
    7b88:	fc 92       	st	X, r15
    7b8a:	15 97       	sbiw	r26, 0x05	; 5
						break;
    7b8c:	9f c1       	rjmp	.+830    	; 0x7ecc <jsmn_parse+0x578>
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
				for (; i >= 0; i--) {
    7b8e:	e1 e0       	ldi	r30, 0x01	; 1
    7b90:	ee 1a       	sub	r14, r30
    7b92:	f1 08       	sbc	r15, r1
    7b94:	17 97       	sbiw	r26, 0x07	; 7
    7b96:	e6 cf       	rjmp	.-52     	; 0x7b64 <jsmn_parse+0x210>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
    7b98:	4c 35       	cpi	r20, 0x5C	; 92
    7b9a:	09 f4       	brne	.+2      	; 0x7b9e <jsmn_parse+0x24a>
    7b9c:	50 c0       	rjmp	.+160    	; 0x7c3e <jsmn_parse+0x2ea>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    7b9e:	ad 81       	ldd	r26, Y+5	; 0x05
    7ba0:	be 81       	ldd	r27, Y+6	; 0x06
    7ba2:	4d 91       	ld	r20, X+
    7ba4:	5c 91       	ld	r21, X
    7ba6:	11 97       	sbiw	r26, 0x01	; 1
    7ba8:	4f 5f       	subi	r20, 0xFF	; 255
    7baa:	5f 4f       	sbci	r21, 0xFF	; 255
    7bac:	4d 93       	st	X+, r20
    7bae:	5c 93       	st	X, r21
    7bb0:	ed 81       	ldd	r30, Y+5	; 0x05
    7bb2:	fe 81       	ldd	r31, Y+6	; 0x06
    7bb4:	e0 80       	ld	r14, Z
    7bb6:	f1 80       	ldd	r15, Z+1	; 0x01
    7bb8:	e2 14       	cp	r14, r2
    7bba:	f3 04       	cpc	r15, r3
    7bbc:	d8 f4       	brcc	.+54     	; 0x7bf4 <jsmn_parse+0x2a0>
    7bbe:	fb 01       	movw	r30, r22
    7bc0:	ee 0d       	add	r30, r14
    7bc2:	ff 1d       	adc	r31, r15
    7bc4:	40 81       	ld	r20, Z
    7bc6:	44 23       	and	r20, r20
    7bc8:	a9 f0       	breq	.+42     	; 0x7bf4 <jsmn_parse+0x2a0>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
    7bca:	42 32       	cpi	r20, 0x22	; 34
    7bcc:	29 f7       	brne	.-54     	; 0x7b98 <jsmn_parse+0x244>
			if (tokens == NULL) {
    7bce:	21 15       	cp	r18, r1
    7bd0:	31 05       	cpc	r19, r1
    7bd2:	09 f4       	brne	.+2      	; 0x7bd6 <jsmn_parse+0x282>
    7bd4:	5c c1       	rjmp	.+696    	; 0x7e8e <jsmn_parse+0x53a>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    7bd6:	ed 81       	ldd	r30, Y+5	; 0x05
    7bd8:	fe 81       	ldd	r31, Y+6	; 0x06
    7bda:	c2 80       	ldd	r12, Z+2	; 0x02
    7bdc:	d3 80       	ldd	r13, Z+3	; 0x03
    7bde:	c6 14       	cp	r12, r6
    7be0:	d7 04       	cpc	r13, r7
    7be2:	78 f0       	brcs	.+30     	; 0x7c02 <jsmn_parse+0x2ae>
			if (tokens == NULL) {
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
    7be4:	eb 81       	ldd	r30, Y+3	; 0x03
    7be6:	fc 81       	ldd	r31, Y+4	; 0x04
    7be8:	ad 81       	ldd	r26, Y+5	; 0x05
    7bea:	be 81       	ldd	r27, Y+6	; 0x06
    7bec:	ed 93       	st	X+, r30
    7bee:	fc 93       	st	X, r31
				return JSMN_ERROR_NOMEM;
    7bf0:	8f ef       	ldi	r24, 0xFF	; 255
    7bf2:	8c c1       	rjmp	.+792    	; 0x7f0c <jsmn_parse+0x5b8>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
    7bf4:	eb 81       	ldd	r30, Y+3	; 0x03
    7bf6:	fc 81       	ldd	r31, Y+4	; 0x04
    7bf8:	ad 81       	ldd	r26, Y+5	; 0x05
    7bfa:	be 81       	ldd	r27, Y+6	; 0x06
    7bfc:	ed 93       	st	X+, r30
    7bfe:	fc 93       	st	X, r31
    7c00:	84 c1       	rjmp	.+776    	; 0x7f0a <jsmn_parse+0x5b6>
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    7c02:	a6 01       	movw	r20, r12
    7c04:	4f 5f       	subi	r20, 0xFF	; 255
    7c06:	5f 4f       	sbci	r21, 0xFF	; 255
    7c08:	ad 81       	ldd	r26, Y+5	; 0x05
    7c0a:	be 81       	ldd	r27, Y+6	; 0x06
    7c0c:	12 96       	adiw	r26, 0x02	; 2
    7c0e:	4d 93       	st	X+, r20
    7c10:	5c 93       	st	X, r21
    7c12:	13 97       	sbiw	r26, 0x03	; 3
    7c14:	bc 9c       	mul	r11, r12
    7c16:	f0 01       	movw	r30, r0
    7c18:	bd 9c       	mul	r11, r13
    7c1a:	f0 0d       	add	r31, r0
    7c1c:	11 24       	eor	r1, r1
    7c1e:	e2 0f       	add	r30, r18
    7c20:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    7c22:	03 83       	std	Z+3, r16	; 0x03
    7c24:	14 83       	std	Z+4, r17	; 0x04
    7c26:	01 83       	std	Z+1, r16	; 0x01
    7c28:	12 83       	std	Z+2, r17	; 0x02
	tok->size = 0;
    7c2a:	15 82       	std	Z+5, r1	; 0x05
    7c2c:	16 82       	std	Z+6, r1	; 0x06
		if (c == '\"') {
			if (tokens == NULL) {
				return 0;
			}
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
    7c2e:	30 97       	sbiw	r30, 0x00	; 0
    7c30:	c9 f2       	breq	.-78     	; 0x7be4 <jsmn_parse+0x290>
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    7c32:	50 82       	st	Z, r5
	token->start = start;
    7c34:	81 82       	std	Z+1, r8	; 0x01
    7c36:	92 82       	std	Z+2, r9	; 0x02
	token->end = end;
    7c38:	e3 82       	std	Z+3, r14	; 0x03
    7c3a:	f4 82       	std	Z+4, r15	; 0x04
    7c3c:	28 c1       	rjmp	.+592    	; 0x7e8e <jsmn_parse+0x53a>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
    7c3e:	a7 01       	movw	r20, r14
    7c40:	4f 5f       	subi	r20, 0xFF	; 255
    7c42:	5f 4f       	sbci	r21, 0xFF	; 255
    7c44:	42 15       	cp	r20, r2
    7c46:	53 05       	cpc	r21, r3
    7c48:	08 f0       	brcs	.+2      	; 0x7c4c <jsmn_parse+0x2f8>
    7c4a:	a9 cf       	rjmp	.-174    	; 0x7b9e <jsmn_parse+0x24a>
			int i;
			parser->pos++;
    7c4c:	ed 81       	ldd	r30, Y+5	; 0x05
    7c4e:	fe 81       	ldd	r31, Y+6	; 0x06
    7c50:	40 83       	st	Z, r20
    7c52:	51 83       	std	Z+1, r21	; 0x01
			switch (js[parser->pos]) {
    7c54:	46 0f       	add	r20, r22
    7c56:	57 1f       	adc	r21, r23
    7c58:	da 01       	movw	r26, r20
    7c5a:	4c 91       	ld	r20, X
    7c5c:	46 36       	cpi	r20, 0x66	; 102
    7c5e:	09 f4       	brne	.+2      	; 0x7c62 <jsmn_parse+0x30e>
    7c60:	9e cf       	rjmp	.-196    	; 0x7b9e <jsmn_parse+0x24a>
    7c62:	78 f4       	brcc	.+30     	; 0x7c82 <jsmn_parse+0x32e>
    7c64:	4f 32       	cpi	r20, 0x2F	; 47
    7c66:	09 f4       	brne	.+2      	; 0x7c6a <jsmn_parse+0x316>
    7c68:	9a cf       	rjmp	.-204    	; 0x7b9e <jsmn_parse+0x24a>
    7c6a:	20 f4       	brcc	.+8      	; 0x7c74 <jsmn_parse+0x320>
    7c6c:	42 32       	cpi	r20, 0x22	; 34
    7c6e:	09 f0       	breq	.+2      	; 0x7c72 <jsmn_parse+0x31e>
    7c70:	a5 c0       	rjmp	.+330    	; 0x7dbc <jsmn_parse+0x468>
    7c72:	95 cf       	rjmp	.-214    	; 0x7b9e <jsmn_parse+0x24a>
    7c74:	4c 35       	cpi	r20, 0x5C	; 92
    7c76:	09 f4       	brne	.+2      	; 0x7c7a <jsmn_parse+0x326>
    7c78:	92 cf       	rjmp	.-220    	; 0x7b9e <jsmn_parse+0x24a>
    7c7a:	42 36       	cpi	r20, 0x62	; 98
    7c7c:	09 f0       	breq	.+2      	; 0x7c80 <jsmn_parse+0x32c>
    7c7e:	9e c0       	rjmp	.+316    	; 0x7dbc <jsmn_parse+0x468>
    7c80:	8e cf       	rjmp	.-228    	; 0x7b9e <jsmn_parse+0x24a>
    7c82:	42 37       	cpi	r20, 0x72	; 114
    7c84:	09 f4       	brne	.+2      	; 0x7c88 <jsmn_parse+0x334>
    7c86:	8b cf       	rjmp	.-234    	; 0x7b9e <jsmn_parse+0x24a>
    7c88:	20 f4       	brcc	.+8      	; 0x7c92 <jsmn_parse+0x33e>
    7c8a:	4e 36       	cpi	r20, 0x6E	; 110
    7c8c:	09 f0       	breq	.+2      	; 0x7c90 <jsmn_parse+0x33c>
    7c8e:	96 c0       	rjmp	.+300    	; 0x7dbc <jsmn_parse+0x468>
    7c90:	86 cf       	rjmp	.-244    	; 0x7b9e <jsmn_parse+0x24a>
    7c92:	44 37       	cpi	r20, 0x74	; 116
    7c94:	09 f4       	brne	.+2      	; 0x7c98 <jsmn_parse+0x344>
    7c96:	83 cf       	rjmp	.-250    	; 0x7b9e <jsmn_parse+0x24a>
    7c98:	45 37       	cpi	r20, 0x75	; 117
    7c9a:	09 f0       	breq	.+2      	; 0x7c9e <jsmn_parse+0x34a>
    7c9c:	8f c0       	rjmp	.+286    	; 0x7dbc <jsmn_parse+0x468>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
    7c9e:	b2 e0       	ldi	r27, 0x02	; 2
    7ca0:	eb 0e       	add	r14, r27
    7ca2:	f1 1c       	adc	r15, r1
    7ca4:	ed 81       	ldd	r30, Y+5	; 0x05
    7ca6:	fe 81       	ldd	r31, Y+6	; 0x06
    7ca8:	e0 82       	st	Z, r14
    7caa:	f1 82       	std	Z+1, r15	; 0x01
    7cac:	44 e0       	ldi	r20, 0x04	; 4
    7cae:	50 e0       	ldi	r21, 0x00	; 0
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    7cb0:	ad 81       	ldd	r26, Y+5	; 0x05
    7cb2:	be 81       	ldd	r27, Y+6	; 0x06
    7cb4:	cd 90       	ld	r12, X+
    7cb6:	dc 90       	ld	r13, X
    7cb8:	c2 14       	cp	r12, r2
    7cba:	d3 04       	cpc	r13, r3
    7cbc:	48 f0       	brcs	.+18     	; 0x7cd0 <jsmn_parse+0x37c>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
    7cbe:	ed 81       	ldd	r30, Y+5	; 0x05
    7cc0:	fe 81       	ldd	r31, Y+6	; 0x06
    7cc2:	40 81       	ld	r20, Z
    7cc4:	51 81       	ldd	r21, Z+1	; 0x01
    7cc6:	41 50       	subi	r20, 0x01	; 1
    7cc8:	51 09       	sbc	r21, r1
    7cca:	40 83       	st	Z, r20
    7ccc:	51 83       	std	Z+1, r21	; 0x01
    7cce:	67 cf       	rjmp	.-306    	; 0x7b9e <jsmn_parse+0x24a>
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    7cd0:	fb 01       	movw	r30, r22
    7cd2:	ec 0d       	add	r30, r12
    7cd4:	fd 1d       	adc	r31, r13
    7cd6:	e0 81       	ld	r30, Z
    7cd8:	ee 23       	and	r30, r30
    7cda:	89 f3       	breq	.-30     	; 0x7cbe <jsmn_parse+0x36a>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
    7cdc:	f0 ed       	ldi	r31, 0xD0	; 208
    7cde:	fe 0f       	add	r31, r30
    7ce0:	fa 30       	cpi	r31, 0x0A	; 10
    7ce2:	58 f0       	brcs	.+22     	; 0x7cfa <jsmn_parse+0x3a6>
    7ce4:	ef 7d       	andi	r30, 0xDF	; 223
    7ce6:	e1 54       	subi	r30, 0x41	; 65
    7ce8:	e6 30       	cpi	r30, 0x06	; 6
    7cea:	38 f0       	brcs	.+14     	; 0x7cfa <jsmn_parse+0x3a6>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
    7cec:	eb 81       	ldd	r30, Y+3	; 0x03
    7cee:	fc 81       	ldd	r31, Y+4	; 0x04
    7cf0:	ad 81       	ldd	r26, Y+5	; 0x05
    7cf2:	be 81       	ldd	r27, Y+6	; 0x06
    7cf4:	ed 93       	st	X+, r30
    7cf6:	fc 93       	st	X, r31
    7cf8:	06 c1       	rjmp	.+524    	; 0x7f06 <jsmn_parse+0x5b2>
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
    7cfa:	ff ef       	ldi	r31, 0xFF	; 255
    7cfc:	cf 1a       	sub	r12, r31
    7cfe:	df 0a       	sbc	r13, r31
    7d00:	ad 81       	ldd	r26, Y+5	; 0x05
    7d02:	be 81       	ldd	r27, Y+6	; 0x06
    7d04:	cd 92       	st	X+, r12
    7d06:	dc 92       	st	X, r13
    7d08:	41 50       	subi	r20, 0x01	; 1
    7d0a:	51 09       	sbc	r21, r1
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
    7d0c:	41 15       	cp	r20, r1
    7d0e:	51 05       	cpc	r21, r1
    7d10:	79 f6       	brne	.-98     	; 0x7cb0 <jsmn_parse+0x35c>
    7d12:	d5 cf       	rjmp	.-86     	; 0x7cbe <jsmn_parse+0x36a>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
    7d14:	ed 81       	ldd	r30, Y+5	; 0x05
    7d16:	fe 81       	ldd	r31, Y+6	; 0x06
    7d18:	a2 81       	ldd	r26, Z+2	; 0x02
    7d1a:	b3 81       	ldd	r27, Z+3	; 0x03
    7d1c:	11 97       	sbiw	r26, 0x01	; 1
    7d1e:	a4 83       	std	Z+4, r26	; 0x04
    7d20:	b5 83       	std	Z+5, r27	; 0x05
				break;
    7d22:	d4 c0       	rjmp	.+424    	; 0x7ecc <jsmn_parse+0x578>
			case ',':
				if (tokens != NULL &&
    7d24:	21 15       	cp	r18, r1
    7d26:	31 05       	cpc	r19, r1
    7d28:	09 f4       	brne	.+2      	; 0x7d2c <jsmn_parse+0x3d8>
    7d2a:	d0 c0       	rjmp	.+416    	; 0x7ecc <jsmn_parse+0x578>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
    7d2c:	ad 81       	ldd	r26, Y+5	; 0x05
    7d2e:	be 81       	ldd	r27, Y+6	; 0x06
    7d30:	14 96       	adiw	r26, 0x04	; 4
    7d32:	4d 91       	ld	r20, X+
    7d34:	5c 91       	ld	r21, X
    7d36:	15 97       	sbiw	r26, 0x05	; 5
    7d38:	b4 9e       	mul	r11, r20
    7d3a:	d0 01       	movw	r26, r0
    7d3c:	b5 9e       	mul	r11, r21
    7d3e:	b0 0d       	add	r27, r0
    7d40:	11 24       	eor	r1, r1
    7d42:	a2 0f       	add	r26, r18
    7d44:	b3 1f       	adc	r27, r19
    7d46:	ac 91       	ld	r26, X
    7d48:	a1 50       	subi	r26, 0x01	; 1
    7d4a:	a2 30       	cpi	r26, 0x02	; 2
    7d4c:	08 f4       	brcc	.+2      	; 0x7d50 <jsmn_parse+0x3fc>
    7d4e:	be c0       	rjmp	.+380    	; 0x7ecc <jsmn_parse+0x578>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
    7d50:	ed 81       	ldd	r30, Y+5	; 0x05
    7d52:	fe 81       	ldd	r31, Y+6	; 0x06
    7d54:	e2 80       	ldd	r14, Z+2	; 0x02
    7d56:	f3 80       	ldd	r15, Z+3	; 0x03
    7d58:	47 01       	movw	r8, r14
    7d5a:	f1 e0       	ldi	r31, 0x01	; 1
    7d5c:	8f 1a       	sub	r8, r31
    7d5e:	91 08       	sbc	r9, r1
    7d60:	be 9c       	mul	r11, r14
    7d62:	d0 01       	movw	r26, r0
    7d64:	bf 9c       	mul	r11, r15
    7d66:	b0 0d       	add	r27, r0
    7d68:	11 24       	eor	r1, r1
    7d6a:	a2 0f       	add	r26, r18
    7d6c:	b3 1f       	adc	r27, r19
    7d6e:	04 c0       	rjmp	.+8      	; 0x7d78 <jsmn_parse+0x424>
    7d70:	b1 e0       	ldi	r27, 0x01	; 1
    7d72:	8b 1a       	sub	r8, r27
    7d74:	91 08       	sbc	r9, r1
    7d76:	d6 01       	movw	r26, r12
    7d78:	97 fc       	sbrc	r9, 7
    7d7a:	a8 c0       	rjmp	.+336    	; 0x7ecc <jsmn_parse+0x578>
    7d7c:	6d 01       	movw	r12, r26
    7d7e:	47 e0       	ldi	r20, 0x07	; 7
    7d80:	c4 1a       	sub	r12, r20
    7d82:	d1 08       	sbc	r13, r1
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
    7d84:	f6 01       	movw	r30, r12
    7d86:	40 81       	ld	r20, Z
    7d88:	41 50       	subi	r20, 0x01	; 1
    7d8a:	42 30       	cpi	r20, 0x02	; 2
    7d8c:	88 f7       	brcc	.-30     	; 0x7d70 <jsmn_parse+0x41c>
    7d8e:	7d 01       	movw	r14, r26
    7d90:	f6 e0       	ldi	r31, 0x06	; 6
    7d92:	ef 1a       	sub	r14, r31
    7d94:	f1 08       	sbc	r15, r1
							if (tokens[i].start != -1 && tokens[i].end == -1) {
    7d96:	f7 01       	movw	r30, r14
    7d98:	e0 80       	ld	r14, Z
    7d9a:	f1 80       	ldd	r15, Z+1	; 0x01
    7d9c:	ef 20       	and	r14, r15
    7d9e:	e0 94       	com	r14
    7da0:	39 f3       	breq	.-50     	; 0x7d70 <jsmn_parse+0x41c>
    7da2:	14 97       	sbiw	r26, 0x04	; 4
    7da4:	0d 90       	ld	r0, X+
    7da6:	bc 91       	ld	r27, X
    7da8:	a0 2d       	mov	r26, r0
    7daa:	11 96       	adiw	r26, 0x01	; 1
    7dac:	09 f7       	brne	.-62     	; 0x7d70 <jsmn_parse+0x41c>
								parser->toksuper = i;
    7dae:	ad 81       	ldd	r26, Y+5	; 0x05
    7db0:	be 81       	ldd	r27, Y+6	; 0x06
    7db2:	14 96       	adiw	r26, 0x04	; 4
    7db4:	8d 92       	st	X+, r8
    7db6:	9c 92       	st	X, r9
    7db8:	15 97       	sbiw	r26, 0x05	; 5
								break;
    7dba:	88 c0       	rjmp	.+272    	; 0x7ecc <jsmn_parse+0x578>
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
			parser->pos = start;
    7dbc:	eb 80       	ldd	r14, Y+3	; 0x03
    7dbe:	fc 80       	ldd	r15, Y+4	; 0x04
    7dc0:	ed 81       	ldd	r30, Y+5	; 0x05
    7dc2:	fe 81       	ldd	r31, Y+6	; 0x06
    7dc4:	e0 82       	st	Z, r14
    7dc6:	f1 82       	std	Z+1, r15	; 0x01
    7dc8:	9e c0       	rjmp	.+316    	; 0x7f06 <jsmn_parse+0x5b2>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    7dca:	fb 01       	movw	r30, r22
    7dcc:	ee 0d       	add	r30, r14
    7dce:	ff 1d       	adc	r31, r15
    7dd0:	40 81       	ld	r20, Z
    7dd2:	44 23       	and	r20, r20
    7dd4:	31 f1       	breq	.+76     	; 0x7e22 <jsmn_parse+0x4ce>
		switch (js[parser->pos]) {
    7dd6:	40 32       	cpi	r20, 0x20	; 32
    7dd8:	21 f1       	breq	.+72     	; 0x7e22 <jsmn_parse+0x4ce>
    7dda:	c8 f4       	brcc	.+50     	; 0x7e0e <jsmn_parse+0x4ba>
    7ddc:	49 30       	cpi	r20, 0x09	; 9
    7dde:	90 f4       	brcc	.+36     	; 0x7e04 <jsmn_parse+0x4b0>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
    7de0:	40 52       	subi	r20, 0x20	; 32
    7de2:	4f 35       	cpi	r20, 0x5F	; 95
    7de4:	58 f7       	brcc	.-42     	; 0x7dbc <jsmn_parse+0x468>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    7de6:	4f ef       	ldi	r20, 0xFF	; 255
    7de8:	e4 1a       	sub	r14, r20
    7dea:	f4 0a       	sbc	r15, r20
    7dec:	ad 81       	ldd	r26, Y+5	; 0x05
    7dee:	be 81       	ldd	r27, Y+6	; 0x06
    7df0:	ed 92       	st	X+, r14
    7df2:	fc 92       	st	X, r15
    7df4:	ed 81       	ldd	r30, Y+5	; 0x05
    7df6:	fe 81       	ldd	r31, Y+6	; 0x06
    7df8:	e0 80       	ld	r14, Z
    7dfa:	f1 80       	ldd	r15, Z+1	; 0x01
    7dfc:	e2 14       	cp	r14, r2
    7dfe:	f3 04       	cpc	r15, r3
    7e00:	20 f3       	brcs	.-56     	; 0x7dca <jsmn_parse+0x476>
    7e02:	0f c0       	rjmp	.+30     	; 0x7e22 <jsmn_parse+0x4ce>
		switch (js[parser->pos]) {
    7e04:	4b 30       	cpi	r20, 0x0B	; 11
    7e06:	68 f0       	brcs	.+26     	; 0x7e22 <jsmn_parse+0x4ce>
    7e08:	4d 30       	cpi	r20, 0x0D	; 13
    7e0a:	51 f7       	brne	.-44     	; 0x7de0 <jsmn_parse+0x48c>
    7e0c:	0a c0       	rjmp	.+20     	; 0x7e22 <jsmn_parse+0x4ce>
    7e0e:	4a 33       	cpi	r20, 0x3A	; 58
    7e10:	41 f0       	breq	.+16     	; 0x7e22 <jsmn_parse+0x4ce>
    7e12:	18 f4       	brcc	.+6      	; 0x7e1a <jsmn_parse+0x4c6>
    7e14:	4c 32       	cpi	r20, 0x2C	; 44
    7e16:	21 f7       	brne	.-56     	; 0x7de0 <jsmn_parse+0x48c>
    7e18:	04 c0       	rjmp	.+8      	; 0x7e22 <jsmn_parse+0x4ce>
    7e1a:	4d 35       	cpi	r20, 0x5D	; 93
    7e1c:	11 f0       	breq	.+4      	; 0x7e22 <jsmn_parse+0x4ce>
    7e1e:	4d 37       	cpi	r20, 0x7D	; 125
    7e20:	f9 f6       	brne	.-66     	; 0x7de0 <jsmn_parse+0x48c>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
    7e22:	21 15       	cp	r18, r1
    7e24:	31 05       	cpc	r19, r1
    7e26:	31 f4       	brne	.+12     	; 0x7e34 <jsmn_parse+0x4e0>
		parser->pos--;
    7e28:	f1 e0       	ldi	r31, 0x01	; 1
    7e2a:	ef 1a       	sub	r14, r31
    7e2c:	f1 08       	sbc	r15, r1
    7e2e:	ad 81       	ldd	r26, Y+5	; 0x05
    7e30:	be 81       	ldd	r27, Y+6	; 0x06
    7e32:	2b c0       	rjmp	.+86     	; 0x7e8a <jsmn_parse+0x536>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
    7e34:	ed 81       	ldd	r30, Y+5	; 0x05
    7e36:	fe 81       	ldd	r31, Y+6	; 0x06
    7e38:	c2 80       	ldd	r12, Z+2	; 0x02
    7e3a:	d3 80       	ldd	r13, Z+3	; 0x03
    7e3c:	c6 14       	cp	r12, r6
    7e3e:	d7 04       	cpc	r13, r7
    7e40:	08 f0       	brcs	.+2      	; 0x7e44 <jsmn_parse+0x4f0>
    7e42:	d0 ce       	rjmp	.-608    	; 0x7be4 <jsmn_parse+0x290>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
    7e44:	a6 01       	movw	r20, r12
    7e46:	4f 5f       	subi	r20, 0xFF	; 255
    7e48:	5f 4f       	sbci	r21, 0xFF	; 255
    7e4a:	ad 81       	ldd	r26, Y+5	; 0x05
    7e4c:	be 81       	ldd	r27, Y+6	; 0x06
    7e4e:	12 96       	adiw	r26, 0x02	; 2
    7e50:	4d 93       	st	X+, r20
    7e52:	5c 93       	st	X, r21
    7e54:	13 97       	sbiw	r26, 0x03	; 3
    7e56:	bc 9c       	mul	r11, r12
    7e58:	f0 01       	movw	r30, r0
    7e5a:	bd 9c       	mul	r11, r13
    7e5c:	f0 0d       	add	r31, r0
    7e5e:	11 24       	eor	r1, r1
    7e60:	e2 0f       	add	r30, r18
    7e62:	f3 1f       	adc	r31, r19
	tok->start = tok->end = -1;
    7e64:	03 83       	std	Z+3, r16	; 0x03
    7e66:	14 83       	std	Z+4, r17	; 0x04
    7e68:	01 83       	std	Z+1, r16	; 0x01
    7e6a:	12 83       	std	Z+2, r17	; 0x02
	tok->size = 0;
    7e6c:	15 82       	std	Z+5, r1	; 0x05
    7e6e:	16 82       	std	Z+6, r1	; 0x06
	if (tokens == NULL) {
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
    7e70:	30 97       	sbiw	r30, 0x00	; 0
    7e72:	09 f4       	brne	.+2      	; 0x7e76 <jsmn_parse+0x522>
    7e74:	b7 ce       	rjmp	.-658    	; 0x7be4 <jsmn_parse+0x290>
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
    7e76:	10 82       	st	Z, r1
	token->start = start;
    7e78:	4b 81       	ldd	r20, Y+3	; 0x03
    7e7a:	5c 81       	ldd	r21, Y+4	; 0x04
    7e7c:	41 83       	std	Z+1, r20	; 0x01
    7e7e:	52 83       	std	Z+2, r21	; 0x02
	token->end = end;
    7e80:	e3 82       	std	Z+3, r14	; 0x03
    7e82:	f4 82       	std	Z+4, r15	; 0x04
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
    7e84:	51 e0       	ldi	r21, 0x01	; 1
    7e86:	e5 1a       	sub	r14, r21
    7e88:	f1 08       	sbc	r15, r1
    7e8a:	ed 92       	st	X+, r14
    7e8c:	fc 92       	st	X, r15
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
    7e8e:	01 96       	adiw	r24, 0x01	; 1
				if (parser->toksuper != -1 && tokens != NULL)
    7e90:	ad 81       	ldd	r26, Y+5	; 0x05
    7e92:	be 81       	ldd	r27, Y+6	; 0x06
    7e94:	14 96       	adiw	r26, 0x04	; 4
    7e96:	ed 91       	ld	r30, X+
    7e98:	fc 91       	ld	r31, X
    7e9a:	15 97       	sbiw	r26, 0x05	; 5
    7e9c:	ef 3f       	cpi	r30, 0xFF	; 255
    7e9e:	bf ef       	ldi	r27, 0xFF	; 255
    7ea0:	fb 07       	cpc	r31, r27
    7ea2:	a1 f0       	breq	.+40     	; 0x7ecc <jsmn_parse+0x578>
    7ea4:	21 15       	cp	r18, r1
    7ea6:	31 05       	cpc	r19, r1
    7ea8:	89 f0       	breq	.+34     	; 0x7ecc <jsmn_parse+0x578>
					tokens[parser->toksuper].size++;
    7eaa:	be 9e       	mul	r11, r30
    7eac:	d0 01       	movw	r26, r0
    7eae:	bf 9e       	mul	r11, r31
    7eb0:	b0 0d       	add	r27, r0
    7eb2:	11 24       	eor	r1, r1
    7eb4:	a2 0f       	add	r26, r18
    7eb6:	b3 1f       	adc	r27, r19
    7eb8:	15 96       	adiw	r26, 0x05	; 5
    7eba:	4d 91       	ld	r20, X+
    7ebc:	5c 91       	ld	r21, X
    7ebe:	16 97       	sbiw	r26, 0x06	; 6
    7ec0:	4f 5f       	subi	r20, 0xFF	; 255
    7ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    7ec4:	15 96       	adiw	r26, 0x05	; 5
    7ec6:	4d 93       	st	X+, r20
    7ec8:	5c 93       	st	X, r21
    7eca:	16 97       	sbiw	r26, 0x06	; 6
	jsmnerr_t r;
	int i;
	jsmntok_t *token;
	int count = 0;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
    7ecc:	ed 81       	ldd	r30, Y+5	; 0x05
    7ece:	fe 81       	ldd	r31, Y+6	; 0x06
    7ed0:	a0 81       	ld	r26, Z
    7ed2:	b1 81       	ldd	r27, Z+1	; 0x01
    7ed4:	11 96       	adiw	r26, 0x01	; 1
    7ed6:	a0 83       	st	Z, r26
    7ed8:	b1 83       	std	Z+1, r27	; 0x01
    7eda:	5c cd       	rjmp	.-1352   	; 0x7994 <jsmn_parse+0x40>
    7edc:	fa 01       	movw	r30, r20
    7ede:	36 97       	sbiw	r30, 0x06	; 6
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
    7ee0:	20 81       	ld	r18, Z
    7ee2:	31 81       	ldd	r19, Z+1	; 0x01
    7ee4:	2f 3f       	cpi	r18, 0xFF	; 255
    7ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    7ee8:	39 f4       	brne	.+14     	; 0x7ef8 <jsmn_parse+0x5a4>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
    7eea:	61 50       	subi	r22, 0x01	; 1
    7eec:	71 09       	sbc	r23, r1
    7eee:	47 50       	subi	r20, 0x07	; 7
    7ef0:	51 09       	sbc	r21, r1
    7ef2:	77 ff       	sbrs	r23, 7
    7ef4:	f3 cf       	rjmp	.-26     	; 0x7edc <jsmn_parse+0x588>
    7ef6:	0a c0       	rjmp	.+20     	; 0x7f0c <jsmn_parse+0x5b8>
    7ef8:	32 96       	adiw	r30, 0x02	; 2
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
    7efa:	20 81       	ld	r18, Z
    7efc:	31 81       	ldd	r19, Z+1	; 0x01
    7efe:	2f 3f       	cpi	r18, 0xFF	; 255
    7f00:	3f 4f       	sbci	r19, 0xFF	; 255
    7f02:	99 f7       	brne	.-26     	; 0x7eea <jsmn_parse+0x596>
    7f04:	02 c0       	rjmp	.+4      	; 0x7f0a <jsmn_parse+0x5b6>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
    7f06:	8e ef       	ldi	r24, 0xFE	; 254
    7f08:	01 c0       	rjmp	.+2      	; 0x7f0c <jsmn_parse+0x5b8>
	}

	for (i = parser->toknext - 1; i >= 0; i--) {
		/* Unmatched opened object or array */
		if (tokens[i].start != -1 && tokens[i].end == -1) {
			return JSMN_ERROR_PART;
    7f0a:	8d ef       	ldi	r24, 0xFD	; 253
		}
	}

	return count;
}
    7f0c:	26 96       	adiw	r28, 0x06	; 6
    7f0e:	cd bf       	out	0x3d, r28	; 61
    7f10:	de bf       	out	0x3e, r29	; 62
    7f12:	df 91       	pop	r29
    7f14:	cf 91       	pop	r28
    7f16:	1f 91       	pop	r17
    7f18:	0f 91       	pop	r16
    7f1a:	ff 90       	pop	r15
    7f1c:	ef 90       	pop	r14
    7f1e:	df 90       	pop	r13
    7f20:	cf 90       	pop	r12
    7f22:	bf 90       	pop	r11
    7f24:	9f 90       	pop	r9
    7f26:	8f 90       	pop	r8
    7f28:	7f 90       	pop	r7
    7f2a:	6f 90       	pop	r6
    7f2c:	5f 90       	pop	r5
    7f2e:	3f 90       	pop	r3
    7f30:	2f 90       	pop	r2
    7f32:	08 95       	ret

00007f34 <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
    7f34:	fc 01       	movw	r30, r24
	parser->pos = 0;
    7f36:	10 82       	st	Z, r1
    7f38:	11 82       	std	Z+1, r1	; 0x01
	parser->toknext = 0;
    7f3a:	12 82       	std	Z+2, r1	; 0x02
    7f3c:	13 82       	std	Z+3, r1	; 0x03
	parser->toksuper = -1;
    7f3e:	8f ef       	ldi	r24, 0xFF	; 255
    7f40:	9f ef       	ldi	r25, 0xFF	; 255
    7f42:	84 83       	std	Z+4, r24	; 0x04
    7f44:	95 83       	std	Z+5, r25	; 0x05
    7f46:	08 95       	ret

00007f48 <json_get_token>:

#include "json_functions.h"

#define JSON_TOKENS 20

void json_get_token(jsmntok_t *tokens, char *js, char *buffer, uint8_t buffer_size, uint8_t i) {
    7f48:	af 92       	push	r10
    7f4a:	bf 92       	push	r11
    7f4c:	cf 92       	push	r12
    7f4e:	df 92       	push	r13
    7f50:	ef 92       	push	r14
    7f52:	ff 92       	push	r15
    7f54:	0f 93       	push	r16
    7f56:	1f 93       	push	r17
    7f58:	cf 93       	push	r28
    7f5a:	df 93       	push	r29
    7f5c:	cd b7       	in	r28, 0x3d	; 61
    7f5e:	de b7       	in	r29, 0x3e	; 62
    7f60:	6a 01       	movw	r12, r20
		memcpy( keyString, &js[ key.start ], len );
		keyString[ len ] = '\0';
		
		strcpy(buffer,keyString);
	}
}
    7f62:	ad b6       	in	r10, 0x3d	; 61
    7f64:	be b6       	in	r11, 0x3e	; 62

void json_get_token(jsmntok_t *tokens, char *js, char *buffer, uint8_t buffer_size, uint8_t i) {
	int len;
	jsmntok_t key;

	key = tokens[i];
    7f66:	dc 01       	movw	r26, r24
    7f68:	37 e0       	ldi	r19, 0x07	; 7
    7f6a:	03 9f       	mul	r16, r19
    7f6c:	a0 0d       	add	r26, r0
    7f6e:	b1 1d       	adc	r27, r1
    7f70:	11 24       	eor	r1, r1
    7f72:	11 96       	adiw	r26, 0x01	; 1
    7f74:	ed 91       	ld	r30, X+
    7f76:	fc 91       	ld	r31, X
    7f78:	12 97       	sbiw	r26, 0x02	; 2
	len = key.end - key.start;
    7f7a:	13 96       	adiw	r26, 0x03	; 3
    7f7c:	0d 91       	ld	r16, X+
    7f7e:	1c 91       	ld	r17, X
    7f80:	14 97       	sbiw	r26, 0x04	; 4
    7f82:	0e 1b       	sub	r16, r30
    7f84:	1f 0b       	sbc	r17, r31
	char keyString[ len+1 ];
    7f86:	c8 01       	movw	r24, r16
    7f88:	01 96       	adiw	r24, 0x01	; 1
    7f8a:	4d b7       	in	r20, 0x3d	; 61
    7f8c:	5e b7       	in	r21, 0x3e	; 62
    7f8e:	48 1b       	sub	r20, r24
    7f90:	59 0b       	sbc	r21, r25
    7f92:	4d bf       	out	0x3d, r20	; 61
    7f94:	5e bf       	out	0x3e, r21	; 62
    7f96:	8d b7       	in	r24, 0x3d	; 61
    7f98:	9e b7       	in	r25, 0x3e	; 62
    7f9a:	01 96       	adiw	r24, 0x01	; 1
    7f9c:	7c 01       	movw	r14, r24
	if (len < buffer_size) {
    7f9e:	30 e0       	ldi	r19, 0x00	; 0
    7fa0:	02 17       	cp	r16, r18
    7fa2:	13 07       	cpc	r17, r19
    7fa4:	6c f4       	brge	.+26     	; 0x7fc0 <json_get_token+0x78>
		memcpy( keyString, &js[ key.start ], len );
    7fa6:	6e 0f       	add	r22, r30
    7fa8:	7f 1f       	adc	r23, r31
    7faa:	a8 01       	movw	r20, r16
    7fac:	0e 94 95 53 	call	0xa72a	; 0xa72a <memcpy>
		keyString[ len ] = '\0';
    7fb0:	f7 01       	movw	r30, r14
    7fb2:	e0 0f       	add	r30, r16
    7fb4:	f1 1f       	adc	r31, r17
    7fb6:	10 82       	st	Z, r1
		
		strcpy(buffer,keyString);
    7fb8:	b7 01       	movw	r22, r14
    7fba:	c6 01       	movw	r24, r12
    7fbc:	0e 94 bb 53 	call	0xa776	; 0xa776 <strcpy>
	}
}
    7fc0:	ad be       	out	0x3d, r10	; 61
    7fc2:	be be       	out	0x3e, r11	; 62
    7fc4:	df 91       	pop	r29
    7fc6:	cf 91       	pop	r28
    7fc8:	1f 91       	pop	r17
    7fca:	0f 91       	pop	r16
    7fcc:	ff 90       	pop	r15
    7fce:	ef 90       	pop	r14
    7fd0:	df 90       	pop	r13
    7fd2:	cf 90       	pop	r12
    7fd4:	bf 90       	pop	r11
    7fd6:	af 90       	pop	r10
    7fd8:	08 95       	ret

00007fda <itoa_simple>:
		s[i] = s[j];
		s[j] = c;
	}
}

static inline char* itoa_simple( char *s, long num ) {
    7fda:	8f 92       	push	r8
    7fdc:	9f 92       	push	r9
    7fde:	af 92       	push	r10
    7fe0:	bf 92       	push	r11
    7fe2:	cf 92       	push	r12
    7fe4:	df 92       	push	r13
    7fe6:	ef 92       	push	r14
    7fe8:	ff 92       	push	r15
    7fea:	0f 93       	push	r16
    7fec:	1f 93       	push	r17
    7fee:	cf 93       	push	r28
    7ff0:	df 93       	push	r29
    7ff2:	8c 01       	movw	r16, r24
	char *begin = s;
	char *rev = s;
	unsigned long n = num;

	if( num < 0 ) {
    7ff4:	77 fd       	sbrc	r23, 7
    7ff6:	04 c0       	rjmp	.+8      	; 0x8000 <itoa_simple+0x26>
}

static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    7ff8:	cb 01       	movw	r24, r22
    7ffa:	ba 01       	movw	r22, r20
    7ffc:	e8 01       	movw	r28, r16
    7ffe:	0e c0       	rjmp	.+28     	; 0x801c <itoa_simple+0x42>

	if( num < 0 ) {
		n = -num;
    8000:	6a 01       	movw	r12, r20
    8002:	7b 01       	movw	r14, r22
    8004:	66 27       	eor	r22, r22
    8006:	77 27       	eor	r23, r23
    8008:	cb 01       	movw	r24, r22
    800a:	6c 19       	sub	r22, r12
    800c:	7d 09       	sbc	r23, r13
    800e:	8e 09       	sbc	r24, r14
    8010:	9f 09       	sbc	r25, r15
		*s++ = '-';
    8012:	e8 01       	movw	r28, r16
    8014:	21 96       	adiw	r28, 0x01	; 1
    8016:	2d e2       	ldi	r18, 0x2D	; 45
    8018:	f8 01       	movw	r30, r16
    801a:	20 83       	st	Z, r18
}

static inline char* itoa_simple( char *s, long num ) {
	char *begin = s;
	char *rev = s;
	unsigned long n = num;
    801c:	6e 01       	movw	r12, r28
		*s++ = '-';
		rev++;
	}

	do {       
		*s++ = (n % 10) + '0';   
    801e:	2a e0       	ldi	r18, 0x0A	; 10
    8020:	82 2e       	mov	r8, r18
    8022:	91 2c       	mov	r9, r1
    8024:	a1 2c       	mov	r10, r1
    8026:	b1 2c       	mov	r11, r1
    8028:	76 01       	movw	r14, r12
    802a:	ff ef       	ldi	r31, 0xFF	; 255
    802c:	ef 1a       	sub	r14, r31
    802e:	ff 0a       	sbc	r15, r31
    8030:	a5 01       	movw	r20, r10
    8032:	94 01       	movw	r18, r8
    8034:	0e 94 28 51 	call	0xa250	; 0xa250 <__udivmodsi4>
    8038:	60 5d       	subi	r22, 0xD0	; 208
    803a:	f6 01       	movw	r30, r12
    803c:	60 83       	st	Z, r22
	} while ((n /= 10) > 0); 
    803e:	b9 01       	movw	r22, r18
    8040:	ca 01       	movw	r24, r20
    8042:	61 15       	cp	r22, r1
    8044:	71 05       	cpc	r23, r1
    8046:	81 05       	cpc	r24, r1
    8048:	91 05       	cpc	r25, r1
    804a:	11 f0       	breq	.+4      	; 0x8050 <itoa_simple+0x76>
    804c:	67 01       	movw	r12, r14
    804e:	ec cf       	rjmp	.-40     	; 0x8028 <itoa_simple+0x4e>

	reverse_string( rev, s - rev);
    8050:	d7 01       	movw	r26, r14
    8052:	ac 1b       	sub	r26, r28
    8054:	bd 0b       	sbc	r27, r29
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    8056:	cd 01       	movw	r24, r26
    8058:	01 97       	sbiw	r24, 0x01	; 1
    805a:	ac 0f       	add	r26, r28
    805c:	bd 1f       	adc	r27, r29
    805e:	fe 01       	movw	r30, r28
    8060:	9f 01       	movw	r18, r30
    8062:	2c 1b       	sub	r18, r28
    8064:	3d 0b       	sbc	r19, r29
    8066:	28 17       	cp	r18, r24
    8068:	39 07       	cpc	r19, r25
    806a:	34 f4       	brge	.+12     	; 0x8078 <itoa_simple+0x9e>
		c = s[i];
    806c:	20 81       	ld	r18, Z
		s[i] = s[j];
    806e:	3e 91       	ld	r19, -X
    8070:	31 93       	st	Z+, r19
		s[j] = c;
    8072:	2c 93       	st	X, r18
static inline void reverse_string( char *s, int l )
{
	int i, j;
	char c;

	for (i = 0, j = l-1; i<j; i++, j--) {
    8074:	01 97       	sbiw	r24, 0x01	; 1
    8076:	f4 cf       	rjmp	.-24     	; 0x8060 <itoa_simple+0x86>
	} while ((n /= 10) > 0); 

	reverse_string( rev, s - rev);

	return (char*)(s - begin);
}
    8078:	c7 01       	movw	r24, r14
    807a:	80 1b       	sub	r24, r16
    807c:	91 0b       	sbc	r25, r17
    807e:	df 91       	pop	r29
    8080:	cf 91       	pop	r28
    8082:	1f 91       	pop	r17
    8084:	0f 91       	pop	r16
    8086:	ff 90       	pop	r15
    8088:	ef 90       	pop	r14
    808a:	df 90       	pop	r13
    808c:	cf 90       	pop	r12
    808e:	bf 90       	pop	r11
    8090:	af 90       	pop	r10
    8092:	9f 90       	pop	r9
    8094:	8f 90       	pop	r8
    8096:	08 95       	ret

00008098 <play_sound>:
static uint32_t timestamp = 0;

#define TOKEN_BUFFER_SIZE 30

void play_sound(void)
{
    8098:	cf 93       	push	r28
    809a:	df 93       	push	r29
    809c:	cd b7       	in	r28, 0x3d	; 61
    809e:	de b7       	in	r29, 0x3e	; 62
    80a0:	c2 55       	subi	r28, 0x52	; 82
    80a2:	d4 40       	sbci	r29, 0x04	; 4
    80a4:	cd bf       	out	0x3d, r28	; 61
    80a6:	de bf       	out	0x3e, r29	; 62
		
		f_close(&Fil);								// Close the file
	}
	*/

	f_mount(&FatFs, "", 0);
    80a8:	40 e0       	ldi	r20, 0x00	; 0
    80aa:	61 e0       	ldi	r22, 0x01	; 1
    80ac:	74 e2       	ldi	r23, 0x24	; 36
    80ae:	ce 01       	movw	r24, r28
    80b0:	01 96       	adiw	r24, 0x01	; 1
    80b2:	0e 94 4f 30 	call	0x609e	; 0x609e <f_mount>
	
	BYTE res;
	res = f_open(&Fil, "business.wav", FA_READ);
    80b6:	41 e0       	ldi	r20, 0x01	; 1
    80b8:	63 e4       	ldi	r22, 0x43	; 67
    80ba:	77 e2       	ldi	r23, 0x27	; 39
    80bc:	ce 01       	movw	r24, r28
    80be:	8d 5c       	subi	r24, 0xCD	; 205
    80c0:	9b 4f       	sbci	r25, 0xFB	; 251
    80c2:	0e 94 8f 30 	call	0x611e	; 0x611e <f_open>
	if (!res) {
    80c6:	81 11       	cpse	r24, r1
    80c8:	10 c0       	rjmp	.+32     	; 0x80ea <play_sound+0x52>
		load_wav(&Fil, "**** WAV PLAYER ****", Buff, sizeof Buff);
    80ca:	20 e0       	ldi	r18, 0x00	; 0
    80cc:	32 e0       	ldi	r19, 0x02	; 2
    80ce:	ae 01       	movw	r20, r28
    80d0:	4d 5c       	subi	r20, 0xCD	; 205
    80d2:	5d 4f       	sbci	r21, 0xFD	; 253
    80d4:	60 e5       	ldi	r22, 0x50	; 80
    80d6:	77 e2       	ldi	r23, 0x27	; 39
    80d8:	ce 01       	movw	r24, r28
    80da:	8d 5c       	subi	r24, 0xCD	; 205
    80dc:	9b 4f       	sbci	r25, 0xFB	; 251
    80de:	7e d9       	rcall	.-3332   	; 0x73dc <load_wav>
		f_close(&Fil);
    80e0:	ce 01       	movw	r24, r28
    80e2:	8d 5c       	subi	r24, 0xCD	; 205
    80e4:	9b 4f       	sbci	r25, 0xFB	; 251
    80e6:	0e 94 2f 33 	call	0x665e	; 0x665e <f_close>
	}
}
    80ea:	ce 5a       	subi	r28, 0xAE	; 174
    80ec:	db 4f       	sbci	r29, 0xFB	; 251
    80ee:	cd bf       	out	0x3d, r28	; 61
    80f0:	de bf       	out	0x3e, r29	; 62
    80f2:	df 91       	pop	r29
    80f4:	cf 91       	pop	r28
    80f6:	08 95       	ret

000080f8 <start_wifi_indication>:

void start_wifi_indication(void)
{
	display_clear_screen();
    80f8:	0e 94 81 20 	call	0x4102	; 0x4102 <display_clear_screen>
	
	PR.PRPC &= ~0x01;
    80fc:	e0 e7       	ldi	r30, 0x70	; 112
    80fe:	f0 e0       	ldi	r31, 0x00	; 0
    8100:	83 81       	ldd	r24, Z+3	; 0x03
    8102:	8e 7f       	andi	r24, 0xFE	; 254
    8104:	83 83       	std	Z+3, r24	; 0x03
	
	TCC0.CNT = 0;
    8106:	e0 e0       	ldi	r30, 0x00	; 0
    8108:	f8 e0       	ldi	r31, 0x08	; 8
    810a:	10 a2       	std	Z+32, r1	; 0x20
    810c:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 20000;
    810e:	80 e2       	ldi	r24, 0x20	; 32
    8110:	9e e4       	ldi	r25, 0x4E	; 78
    8112:	86 a3       	std	Z+38, r24	; 0x26
    8114:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;
    8116:	27 e0       	ldi	r18, 0x07	; 7
    8118:	20 83       	st	Z, r18
	
	TCC0.CCD = 20000;
    811a:	86 a7       	std	Z+46, r24	; 0x2e
    811c:	97 a7       	std	Z+47, r25	; 0x2f
	TCC0.INTCTRLB |= TC_CCDINTLVL_LO_gc;
    811e:	87 81       	ldd	r24, Z+7	; 0x07
    8120:	80 64       	ori	r24, 0x40	; 64
    8122:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLB |= TC0_CCDEN_bm;
    8124:	81 81       	ldd	r24, Z+1	; 0x01
    8126:	80 68       	ori	r24, 0x80	; 128
    8128:	81 83       	std	Z+1, r24	; 0x01
    812a:	08 95       	ret

0000812c <stop_wifi_indication>:
}

void stop_wifi_indication(void)
{
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
    812c:	e0 e0       	ldi	r30, 0x00	; 0
    812e:	f8 e0       	ldi	r31, 0x08	; 8
    8130:	10 82       	st	Z, r1
	TCC0.INTCTRLB &= ~TC_CCDINTLVL_LO_gc;
    8132:	87 81       	ldd	r24, Z+7	; 0x07
    8134:	8f 7b       	andi	r24, 0xBF	; 191
    8136:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLB &= ~TC0_CCDEN_bm;
    8138:	81 81       	ldd	r24, Z+1	; 0x01
    813a:	8f 77       	andi	r24, 0x7F	; 127
    813c:	81 83       	std	Z+1, r24	; 0x01
	display_clear_screen();
    813e:	0e 94 81 20 	call	0x4102	; 0x4102 <display_clear_screen>
	PR.PRPC |= 0x01;
    8142:	e0 e7       	ldi	r30, 0x70	; 112
    8144:	f0 e0       	ldi	r31, 0x00	; 0
    8146:	83 81       	ldd	r24, Z+3	; 0x03
    8148:	81 60       	ori	r24, 0x01	; 1
    814a:	83 83       	std	Z+3, r24	; 0x03
    814c:	08 95       	ret

0000814e <start_loading>:
}

void start_loading(void) 
{
	display_clear_screen();
    814e:	0e 94 81 20 	call	0x4102	; 0x4102 <display_clear_screen>
	
	PR.PRPC &= ~0x01;
    8152:	e0 e7       	ldi	r30, 0x70	; 112
    8154:	f0 e0       	ldi	r31, 0x00	; 0
    8156:	83 81       	ldd	r24, Z+3	; 0x03
    8158:	8e 7f       	andi	r24, 0xFE	; 254
    815a:	83 83       	std	Z+3, r24	; 0x03
	
	TCC0.CNT = 0;
    815c:	e0 e0       	ldi	r30, 0x00	; 0
    815e:	f8 e0       	ldi	r31, 0x08	; 8
    8160:	10 a2       	std	Z+32, r1	; 0x20
    8162:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 3125;
    8164:	85 e3       	ldi	r24, 0x35	; 53
    8166:	9c e0       	ldi	r25, 0x0C	; 12
    8168:	86 a3       	std	Z+38, r24	; 0x26
    816a:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;
    816c:	27 e0       	ldi	r18, 0x07	; 7
    816e:	20 83       	st	Z, r18
	
	TCC0.CCA = 3125;
    8170:	80 a7       	std	Z+40, r24	; 0x28
    8172:	91 a7       	std	Z+41, r25	; 0x29
	TCC0.INTCTRLB |= TC_CCAINTLVL_LO_gc;
    8174:	87 81       	ldd	r24, Z+7	; 0x07
    8176:	81 60       	ori	r24, 0x01	; 1
    8178:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLB |= TC0_CCAEN_bm;
    817a:	81 81       	ldd	r24, Z+1	; 0x01
    817c:	80 61       	ori	r24, 0x10	; 16
    817e:	81 83       	std	Z+1, r24	; 0x01
    8180:	08 95       	ret

00008182 <stop_loading>:
}

void stop_loading(void) 
{
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
    8182:	e0 e0       	ldi	r30, 0x00	; 0
    8184:	f8 e0       	ldi	r31, 0x08	; 8
    8186:	10 82       	st	Z, r1
	TCC0.INTCTRLB &= ~TC_CCAINTLVL_LO_gc;
    8188:	87 81       	ldd	r24, Z+7	; 0x07
    818a:	8e 7f       	andi	r24, 0xFE	; 254
    818c:	87 83       	std	Z+7, r24	; 0x07
	TCC0.CTRLB &= ~TC0_CCAEN_bm;
    818e:	81 81       	ldd	r24, Z+1	; 0x01
    8190:	8f 7e       	andi	r24, 0xEF	; 239
    8192:	81 83       	std	Z+1, r24	; 0x01
	display_clear_screen();
    8194:	0e 94 81 20 	call	0x4102	; 0x4102 <display_clear_screen>
	PR.PRPC |= 0x01;
    8198:	e0 e7       	ldi	r30, 0x70	; 112
    819a:	f0 e0       	ldi	r31, 0x00	; 0
    819c:	83 81       	ldd	r24, Z+3	; 0x03
    819e:	81 60       	ori	r24, 0x01	; 1
    81a0:	83 83       	std	Z+3, r24	; 0x03
    81a2:	08 95       	ret

000081a4 <get_internet_variables>:
}

esp8266_status_t get_internet_variables(bool get_time, bool get_temperature) 
{	
    81a4:	2f 92       	push	r2
    81a6:	3f 92       	push	r3
    81a8:	4f 92       	push	r4
    81aa:	5f 92       	push	r5
    81ac:	6f 92       	push	r6
    81ae:	7f 92       	push	r7
    81b0:	8f 92       	push	r8
    81b2:	9f 92       	push	r9
    81b4:	af 92       	push	r10
    81b6:	bf 92       	push	r11
    81b8:	cf 92       	push	r12
    81ba:	df 92       	push	r13
    81bc:	ef 92       	push	r14
    81be:	ff 92       	push	r15
    81c0:	0f 93       	push	r16
    81c2:	1f 93       	push	r17
    81c4:	cf 93       	push	r28
    81c6:	df 93       	push	r29
    81c8:	cd b7       	in	r28, 0x3d	; 61
    81ca:	de b7       	in	r29, 0x3e	; 62
    81cc:	c5 5e       	subi	r28, 0xE5	; 229
    81ce:	d1 09       	sbc	r29, r1
    81d0:	cd bf       	out	0x3d, r28	; 61
    81d2:	de bf       	out	0x3e, r29	; 62
    81d4:	d8 2e       	mov	r13, r24
    81d6:	cb 51       	subi	r28, 0x1B	; 27
    81d8:	df 4f       	sbci	r29, 0xFF	; 255
    81da:	68 83       	st	Y, r22
    81dc:	c5 5e       	subi	r28, 0xE5	; 229
    81de:	d0 40       	sbci	r29, 0x00	; 0
	jsmn_parser p;
	jsmnerr_t r;
	
	esp8266_status_t status;
	
	status = esp8266_setup();
    81e0:	0e 94 cf 09 	call	0x139e	; 0x139e <esp8266_setup>
	if (status != ESP8266_SUCCESS) {
    81e4:	81 30       	cpi	r24, 0x01	; 1
    81e6:	09 f0       	breq	.+2      	; 0x81ea <get_internet_variables+0x46>
    81e8:	42 c1       	rjmp	.+644    	; 0x846e <get_internet_variables+0x2ca>
		return status;
	}
	
	status = esp8266_join_ap(env.wifi_ssid,env.wifi_pswd);
    81ea:	6a e9       	ldi	r22, 0x9A	; 154
    81ec:	7b e2       	ldi	r23, 0x2B	; 43
    81ee:	83 eb       	ldi	r24, 0xB3	; 179
    81f0:	9b e2       	ldi	r25, 0x2B	; 43
    81f2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <esp8266_join_ap>
	if (status != ESP8266_SUCCESS) {
    81f6:	81 30       	cpi	r24, 0x01	; 1
    81f8:	09 f0       	breq	.+2      	; 0x81fc <get_internet_variables+0x58>
    81fa:	39 c1       	rjmp	.+626    	; 0x846e <get_internet_variables+0x2ca>
		return status;
	}
	
	if (get_time) {
    81fc:	dd 20       	and	r13, r13
    81fe:	39 f0       	breq	.+14     	; 0x820e <get_internet_variables+0x6a>
		status = esp8266_get_json(TIME_IP,TIME_ADDR,json_string, sizeof(json_string));
    8200:	24 e6       	ldi	r18, 0x64	; 100
    8202:	ae 01       	movw	r20, r28
    8204:	4f 5f       	subi	r20, 0xFF	; 255
    8206:	5f 4f       	sbci	r21, 0xFF	; 255
    8208:	65 e6       	ldi	r22, 0x65	; 101
    820a:	77 e2       	ldi	r23, 0x27	; 39
    820c:	0e c0       	rjmp	.+28     	; 0x822a <get_internet_variables+0x86>
	} else if (get_temperature) {
    820e:	cb 51       	subi	r28, 0x1B	; 27
    8210:	df 4f       	sbci	r29, 0xFF	; 255
    8212:	28 81       	ld	r18, Y
    8214:	c5 5e       	subi	r28, 0xE5	; 229
    8216:	d0 40       	sbci	r29, 0x00	; 0
    8218:	22 23       	and	r18, r18
    821a:	09 f4       	brne	.+2      	; 0x821e <get_internet_variables+0x7a>
    821c:	73 c0       	rjmp	.+230    	; 0x8304 <get_internet_variables+0x160>
		status = esp8266_get_json(WEATHER_IP,WEATHER_ADDR,json_string, sizeof(json_string));
    821e:	24 e6       	ldi	r18, 0x64	; 100
    8220:	ae 01       	movw	r20, r28
    8222:	4f 5f       	subi	r20, 0xFF	; 255
    8224:	5f 4f       	sbci	r21, 0xFF	; 255
    8226:	6f e9       	ldi	r22, 0x9F	; 159
    8228:	77 e2       	ldi	r23, 0x27	; 39
    822a:	8c e8       	ldi	r24, 0x8C	; 140
    822c:	97 e2       	ldi	r25, 0x27	; 39
    822e:	0e 94 46 0a 	call	0x148c	; 0x148c <esp8266_get_json>
	} else {
		return ESP8266_ERROR;
	}
	if (status != ESP8266_SUCCESS) {
    8232:	81 30       	cpi	r24, 0x01	; 1
    8234:	09 f0       	breq	.+2      	; 0x8238 <get_internet_variables+0x94>
    8236:	1b c1       	rjmp	.+566    	; 0x846e <get_internet_variables+0x2ca>
		return status;
	}
	
	esp8266_off();
    8238:	0e 94 c6 09 	call	0x138c	; 0x138c <esp8266_off>
	
#ifdef DEBUG_ON
	puts(json_string);
    823c:	ce 01       	movw	r24, r28
    823e:	01 96       	adiw	r24, 0x01	; 1
    8240:	7c 01       	movw	r14, r24
    8242:	0e 94 67 54 	call	0xa8ce	; 0xa8ce <puts>
#endif

	//Parse JSON
	jsmn_init(&p);
    8246:	ce 01       	movw	r24, r28
    8248:	8d 52       	subi	r24, 0x2D	; 45
    824a:	9f 4f       	sbci	r25, 0xFF	; 255
    824c:	73 de       	rcall	.-794    	; 0x7f34 <jsmn_init>
	r = jsmn_parse(&p,json_string,strlen(json_string),tokens,sizeof(tokens));
    824e:	d7 01       	movw	r26, r14
    8250:	0d 90       	ld	r0, X+
    8252:	00 20       	and	r0, r0
    8254:	e9 f7       	brne	.-6      	; 0x8250 <get_internet_variables+0xac>
    8256:	ad 01       	movw	r20, r26
    8258:	41 50       	subi	r20, 0x01	; 1
    825a:	51 09       	sbc	r21, r1
    825c:	4e 19       	sub	r20, r14
    825e:	5f 09       	sbc	r21, r15
    8260:	06 e4       	ldi	r16, 0x46	; 70
    8262:	10 e0       	ldi	r17, 0x00	; 0
    8264:	9e 01       	movw	r18, r28
    8266:	2b 59       	subi	r18, 0x9B	; 155
    8268:	3f 4f       	sbci	r19, 0xFF	; 255
    826a:	b7 01       	movw	r22, r14
    826c:	ce 01       	movw	r24, r28
    826e:	8d 52       	subi	r24, 0x2D	; 45
    8270:	9f 4f       	sbci	r25, 0xFF	; 255
    8272:	70 db       	rcall	.-2336   	; 0x7954 <jsmn_parse>
	if (r < 0) {
    8274:	87 fd       	sbrc	r24, 7
    8276:	46 c0       	rjmp	.+140    	; 0x8304 <get_internet_variables+0x160>
		return ESP8266_ERROR;
	}
	
	if (get_time) {
    8278:	dd 20       	and	r13, r13
    827a:	09 f4       	brne	.+2      	; 0x827e <get_internet_variables+0xda>
    827c:	7b c0       	rjmp	.+246    	; 0x8374 <get_internet_variables+0x1d0>
		int year, month, day, hour, minute, second;
		char weekday[10];
		json_get_token(tokens,json_string,token_buffer,sizeof(token_buffer),2);
    827e:	6e 01       	movw	r12, r28
    8280:	bb ea       	ldi	r27, 0xAB	; 171
    8282:	cb 0e       	add	r12, r27
    8284:	d1 1c       	adc	r13, r1
    8286:	02 e0       	ldi	r16, 0x02	; 2
    8288:	2e e1       	ldi	r18, 0x1E	; 30
    828a:	a6 01       	movw	r20, r12
    828c:	b7 01       	movw	r22, r14
    828e:	ce 01       	movw	r24, r28
    8290:	8b 59       	subi	r24, 0x9B	; 155
    8292:	9f 4f       	sbci	r25, 0xFF	; 255
    8294:	59 de       	rcall	.-846    	; 0x7f48 <json_get_token>
#ifdef DEBUG_ON
		puts(token_buffer);
    8296:	c6 01       	movw	r24, r12
    8298:	0e 94 67 54 	call	0xa8ce	; 0xa8ce <puts>
#endif
		if (sscanf(token_buffer,"%d-%d-%d %s %d:%d:%d",&year, &month, &day, weekday, &hour, &minute, &second) != 7) {
    829c:	3e 01       	movw	r6, r28
    829e:	e9 ed       	ldi	r30, 0xD9	; 217
    82a0:	6e 0e       	add	r6, r30
    82a2:	71 1c       	adc	r7, r1
    82a4:	7f 92       	push	r7
    82a6:	6f 92       	push	r6
    82a8:	1e 01       	movw	r2, r28
    82aa:	fb ed       	ldi	r31, 0xDB	; 219
    82ac:	2f 0e       	add	r2, r31
    82ae:	31 1c       	adc	r3, r1
    82b0:	3f 92       	push	r3
    82b2:	2f 92       	push	r2
    82b4:	2e 01       	movw	r4, r28
    82b6:	2d ed       	ldi	r18, 0xDD	; 221
    82b8:	42 0e       	add	r4, r18
    82ba:	51 1c       	adc	r5, r1
    82bc:	5f 92       	push	r5
    82be:	4f 92       	push	r4
    82c0:	ce 01       	movw	r24, r28
    82c2:	87 53       	subi	r24, 0x37	; 55
    82c4:	9f 4f       	sbci	r25, 0xFF	; 255
    82c6:	9f 93       	push	r25
    82c8:	8f 93       	push	r24
    82ca:	5e 01       	movw	r10, r28
    82cc:	3f ed       	ldi	r19, 0xDF	; 223
    82ce:	a3 0e       	add	r10, r19
    82d0:	b1 1c       	adc	r11, r1
    82d2:	bf 92       	push	r11
    82d4:	af 92       	push	r10
    82d6:	4e 01       	movw	r8, r28
    82d8:	81 ee       	ldi	r24, 0xE1	; 225
    82da:	88 0e       	add	r8, r24
    82dc:	91 1c       	adc	r9, r1
    82de:	9f 92       	push	r9
    82e0:	8f 92       	push	r8
    82e2:	8e 01       	movw	r16, r28
    82e4:	0d 51       	subi	r16, 0x1D	; 29
    82e6:	1f 4f       	sbci	r17, 0xFF	; 255
    82e8:	1f 93       	push	r17
    82ea:	0f 93       	push	r16
    82ec:	8b ec       	ldi	r24, 0xCB	; 203
    82ee:	97 e2       	ldi	r25, 0x27	; 39
    82f0:	9f 93       	push	r25
    82f2:	8f 93       	push	r24
    82f4:	df 92       	push	r13
    82f6:	cf 92       	push	r12
    82f8:	0e 94 94 54 	call	0xa928	; 0xa928 <sscanf>
    82fc:	cd bf       	out	0x3d, r28	; 61
    82fe:	de bf       	out	0x3e, r29	; 62
    8300:	07 97       	sbiw	r24, 0x07	; 7
    8302:	11 f0       	breq	.+4      	; 0x8308 <get_internet_variables+0x164>
			return ESP8266_ERROR;
    8304:	80 e0       	ldi	r24, 0x00	; 0
    8306:	b3 c0       	rjmp	.+358    	; 0x846e <get_internet_variables+0x2ca>
		} else {
			env.time.year = year;
    8308:	f8 01       	movw	r30, r16
    830a:	80 81       	ld	r24, Z
    830c:	91 81       	ldd	r25, Z+1	; 0x01
    830e:	80 93 d6 2b 	sts	0x2BD6, r24
    8312:	90 93 d7 2b 	sts	0x2BD7, r25
			env.time.month = month;
    8316:	d4 01       	movw	r26, r8
    8318:	8c 91       	ld	r24, X
    831a:	80 93 d5 2b 	sts	0x2BD5, r24
			env.time.day = day;
    831e:	f5 01       	movw	r30, r10
    8320:	80 81       	ld	r24, Z
    8322:	80 93 d2 2b 	sts	0x2BD2, r24
			env.time.hours = hour;
    8326:	d2 01       	movw	r26, r4
    8328:	8c 91       	ld	r24, X
    832a:	80 93 d1 2b 	sts	0x2BD1, r24
			env.time.minutes = minute;
    832e:	f1 01       	movw	r30, r2
    8330:	80 81       	ld	r24, Z
    8332:	80 93 d0 2b 	sts	0x2BD0, r24
			env.time.seconds = second;
    8336:	d3 01       	movw	r26, r6
    8338:	8c 91       	ld	r24, X
    833a:	11 96       	adiw	r26, 0x01	; 1
    833c:	9c 91       	ld	r25, X
    833e:	80 93 cf 2b 	sts	0x2BCF, r24
			rtc_update_seconds(second);
    8342:	0e 94 d7 12 	call	0x25ae	; 0x25ae <rtc_update_seconds>
			env.time.weekday = time_get_weekday(day,month,year);
    8346:	f8 01       	movw	r30, r16
    8348:	40 81       	ld	r20, Z
    834a:	51 81       	ldd	r21, Z+1	; 0x01
    834c:	d4 01       	movw	r26, r8
    834e:	6c 91       	ld	r22, X
    8350:	f5 01       	movw	r30, r10
    8352:	80 81       	ld	r24, Z
    8354:	0e 94 8b 4a 	call	0x9516	; 0x9516 <time_get_weekday>
    8358:	80 93 d3 2b 	sts	0x2BD3, r24
			env.time.week = time_get_weeknumber(env.time.day,env.time.month,env.time.year);
    835c:	40 91 d6 2b 	lds	r20, 0x2BD6
    8360:	50 91 d7 2b 	lds	r21, 0x2BD7
    8364:	60 91 d5 2b 	lds	r22, 0x2BD5
    8368:	80 91 d2 2b 	lds	r24, 0x2BD2
    836c:	0e 94 f0 4a 	call	0x95e0	; 0x95e0 <time_get_weeknumber>
    8370:	80 93 d4 2b 	sts	0x2BD4, r24
		}
	}
	if (get_temperature) {
    8374:	cb 51       	subi	r28, 0x1B	; 27
    8376:	df 4f       	sbci	r29, 0xFF	; 255
    8378:	f8 81       	ld	r31, Y
    837a:	c5 5e       	subi	r28, 0xE5	; 229
    837c:	d0 40       	sbci	r29, 0x00	; 0
    837e:	ff 23       	and	r31, r31
    8380:	09 f4       	brne	.+2      	; 0x8384 <get_internet_variables+0x1e0>
    8382:	74 c0       	rjmp	.+232    	; 0x846c <get_internet_variables+0x2c8>
		json_get_token(tokens,json_string,token_buffer,sizeof(token_buffer),6);
    8384:	6e 01       	movw	r12, r28
    8386:	2b ea       	ldi	r18, 0xAB	; 171
    8388:	c2 0e       	add	r12, r18
    838a:	d1 1c       	adc	r13, r1
    838c:	06 e0       	ldi	r16, 0x06	; 6
    838e:	2e e1       	ldi	r18, 0x1E	; 30
    8390:	a6 01       	movw	r20, r12
    8392:	b7 01       	movw	r22, r14
    8394:	ce 01       	movw	r24, r28
    8396:	8b 59       	subi	r24, 0x9B	; 155
    8398:	9f 4f       	sbci	r25, 0xFF	; 255
    839a:	d6 dd       	rcall	.-1108   	; 0x7f48 <json_get_token>
#ifdef DEBUG_ON
		puts(token_buffer);
    839c:	c6 01       	movw	r24, r12
    839e:	0e 94 67 54 	call	0xa8ce	; 0xa8ce <puts>
#endif
		if (strlen(token_buffer) <= sizeof(env.temperature)) {
    83a2:	f6 01       	movw	r30, r12
    83a4:	01 90       	ld	r0, Z+
    83a6:	00 20       	and	r0, r0
    83a8:	e9 f7       	brne	.-6      	; 0x83a4 <get_internet_variables+0x200>
    83aa:	31 97       	sbiw	r30, 0x01	; 1
    83ac:	ec 19       	sub	r30, r12
    83ae:	fd 09       	sbc	r31, r13
    83b0:	34 97       	sbiw	r30, 0x04	; 4
    83b2:	08 f0       	brcs	.+2      	; 0x83b6 <get_internet_variables+0x212>
    83b4:	a7 cf       	rjmp	.-178    	; 0x8304 <get_internet_variables+0x160>
			memset(env.temperature,0,sizeof(env.temperature));
    83b6:	10 92 56 2b 	sts	0x2B56, r1
    83ba:	10 92 57 2b 	sts	0x2B57, r1
    83be:	10 92 58 2b 	sts	0x2B58, r1
			strncpy(env.temperature,token_buffer,strlen(token_buffer));
    83c2:	d6 01       	movw	r26, r12
    83c4:	0d 90       	ld	r0, X+
    83c6:	00 20       	and	r0, r0
    83c8:	e9 f7       	brne	.-6      	; 0x83c4 <get_internet_variables+0x220>
    83ca:	ad 01       	movw	r20, r26
    83cc:	41 50       	subi	r20, 0x01	; 1
    83ce:	51 09       	sbc	r21, r1
    83d0:	4c 19       	sub	r20, r12
    83d2:	5d 09       	sbc	r21, r13
    83d4:	b6 01       	movw	r22, r12
    83d6:	86 e5       	ldi	r24, 0x56	; 86
    83d8:	9b e2       	ldi	r25, 0x2B	; 43
    83da:	0e 94 c2 53 	call	0xa784	; 0xa784 <strncpy>
		} else {
			return ESP8266_ERROR;
		}
		json_get_token(tokens,json_string,token_buffer,sizeof(token_buffer),8);
    83de:	08 e0       	ldi	r16, 0x08	; 8
    83e0:	2e e1       	ldi	r18, 0x1E	; 30
    83e2:	a6 01       	movw	r20, r12
    83e4:	b7 01       	movw	r22, r14
    83e6:	ce 01       	movw	r24, r28
    83e8:	8b 59       	subi	r24, 0x9B	; 155
    83ea:	9f 4f       	sbci	r25, 0xFF	; 255
    83ec:	ad dd       	rcall	.-1190   	; 0x7f48 <json_get_token>
#ifdef DEBUG_ON
		puts(token_buffer);
    83ee:	c6 01       	movw	r24, r12
    83f0:	0e 94 67 54 	call	0xa8ce	; 0xa8ce <puts>
#endif
		if (strlen(token_buffer) < sizeof(env.weather_info)) {
    83f4:	f6 01       	movw	r30, r12
    83f6:	01 90       	ld	r0, Z+
    83f8:	00 20       	and	r0, r0
    83fa:	e9 f7       	brne	.-6      	; 0x83f6 <get_internet_variables+0x252>
    83fc:	31 97       	sbiw	r30, 0x01	; 1
    83fe:	ec 19       	sub	r30, r12
    8400:	fd 09       	sbc	r31, r13
    8402:	b8 97       	sbiw	r30, 0x28	; 40
    8404:	08 f0       	brcs	.+2      	; 0x8408 <get_internet_variables+0x264>
    8406:	7e cf       	rjmp	.-260    	; 0x8304 <get_internet_variables+0x160>
			memset(env.weather_info,0,sizeof(env.weather_info));
    8408:	88 e2       	ldi	r24, 0x28	; 40
    840a:	e9 e5       	ldi	r30, 0x59	; 89
    840c:	fb e2       	ldi	r31, 0x2B	; 43
    840e:	df 01       	movw	r26, r30
    8410:	1d 92       	st	X+, r1
    8412:	8a 95       	dec	r24
    8414:	e9 f7       	brne	.-6      	; 0x8410 <get_internet_variables+0x26c>
			strncpy(env.weather_info,token_buffer,strlen(token_buffer));
    8416:	f6 01       	movw	r30, r12
    8418:	01 90       	ld	r0, Z+
    841a:	00 20       	and	r0, r0
    841c:	e9 f7       	brne	.-6      	; 0x8418 <get_internet_variables+0x274>
    841e:	af 01       	movw	r20, r30
    8420:	41 50       	subi	r20, 0x01	; 1
    8422:	51 09       	sbc	r21, r1
    8424:	4c 19       	sub	r20, r12
    8426:	5d 09       	sbc	r21, r13
    8428:	b6 01       	movw	r22, r12
    842a:	89 e5       	ldi	r24, 0x59	; 89
    842c:	9b e2       	ldi	r25, 0x2B	; 43
    842e:	0e 94 c2 53 	call	0xa784	; 0xa784 <strncpy>
		} else {
			return ESP8266_ERROR;
		}
		json_get_token(tokens,json_string,token_buffer,sizeof(token_buffer),2);
    8432:	02 e0       	ldi	r16, 0x02	; 2
    8434:	2e e1       	ldi	r18, 0x1E	; 30
    8436:	a6 01       	movw	r20, r12
    8438:	b7 01       	movw	r22, r14
    843a:	ce 01       	movw	r24, r28
    843c:	8b 59       	subi	r24, 0x9B	; 155
    843e:	9f 4f       	sbci	r25, 0xFF	; 255
    8440:	83 dd       	rcall	.-1274   	; 0x7f48 <json_get_token>
#ifdef DEBUG_ON
		puts(token_buffer);
    8442:	c6 01       	movw	r24, r12
    8444:	0e 94 67 54 	call	0xa8ce	; 0xa8ce <puts>
#endif
		if (strlen(token_buffer) < sizeof(env.city)) {
    8448:	d6 01       	movw	r26, r12
    844a:	0d 90       	ld	r0, X+
    844c:	00 20       	and	r0, r0
    844e:	e9 f7       	brne	.-6      	; 0x844a <get_internet_variables+0x2a6>
    8450:	ad 01       	movw	r20, r26
    8452:	41 50       	subi	r20, 0x01	; 1
    8454:	51 09       	sbc	r21, r1
    8456:	4c 19       	sub	r20, r12
    8458:	5d 09       	sbc	r21, r13
    845a:	49 31       	cpi	r20, 0x19	; 25
    845c:	51 05       	cpc	r21, r1
    845e:	08 f0       	brcs	.+2      	; 0x8462 <get_internet_variables+0x2be>
    8460:	51 cf       	rjmp	.-350    	; 0x8304 <get_internet_variables+0x160>
			strncpy(env.city,token_buffer,strlen(token_buffer));
    8462:	b6 01       	movw	r22, r12
    8464:	81 e8       	ldi	r24, 0x81	; 129
    8466:	9b e2       	ldi	r25, 0x2B	; 43
    8468:	0e 94 c2 53 	call	0xa784	; 0xa784 <strncpy>
		} else {
			return ESP8266_ERROR;
		}

	}
	return ESP8266_SUCCESS;
    846c:	81 e0       	ldi	r24, 0x01	; 1
}
    846e:	cb 51       	subi	r28, 0x1B	; 27
    8470:	df 4f       	sbci	r29, 0xFF	; 255
    8472:	cd bf       	out	0x3d, r28	; 61
    8474:	de bf       	out	0x3e, r29	; 62
    8476:	df 91       	pop	r29
    8478:	cf 91       	pop	r28
    847a:	1f 91       	pop	r17
    847c:	0f 91       	pop	r16
    847e:	ff 90       	pop	r15
    8480:	ef 90       	pop	r14
    8482:	df 90       	pop	r13
    8484:	cf 90       	pop	r12
    8486:	bf 90       	pop	r11
    8488:	af 90       	pop	r10
    848a:	9f 90       	pop	r9
    848c:	8f 90       	pop	r8
    848e:	7f 90       	pop	r7
    8490:	6f 90       	pop	r6
    8492:	5f 90       	pop	r5
    8494:	4f 90       	pop	r4
    8496:	3f 90       	pop	r3
    8498:	2f 90       	pop	r2
    849a:	08 95       	ret

0000849c <menu_draw_temperature_frame>:

void menu_draw_temperature_frame(void) 
{
    849c:	0f 93       	push	r16
	display_draw_small_char(1,10,'T',1,1);
    849e:	01 e0       	ldi	r16, 0x01	; 1
    84a0:	21 e0       	ldi	r18, 0x01	; 1
    84a2:	30 e0       	ldi	r19, 0x00	; 0
    84a4:	44 e5       	ldi	r20, 0x54	; 84
    84a6:	6a e0       	ldi	r22, 0x0A	; 10
    84a8:	70 e0       	ldi	r23, 0x00	; 0
    84aa:	81 e0       	ldi	r24, 0x01	; 1
    84ac:	90 e0       	ldi	r25, 0x00	; 0
    84ae:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(5,10,'E',1,1);
    84b2:	21 e0       	ldi	r18, 0x01	; 1
    84b4:	30 e0       	ldi	r19, 0x00	; 0
    84b6:	45 e4       	ldi	r20, 0x45	; 69
    84b8:	6a e0       	ldi	r22, 0x0A	; 10
    84ba:	70 e0       	ldi	r23, 0x00	; 0
    84bc:	85 e0       	ldi	r24, 0x05	; 5
    84be:	90 e0       	ldi	r25, 0x00	; 0
    84c0:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(9,10,'M',1,1);
    84c4:	21 e0       	ldi	r18, 0x01	; 1
    84c6:	30 e0       	ldi	r19, 0x00	; 0
    84c8:	4d e4       	ldi	r20, 0x4D	; 77
    84ca:	6a e0       	ldi	r22, 0x0A	; 10
    84cc:	70 e0       	ldi	r23, 0x00	; 0
    84ce:	89 e0       	ldi	r24, 0x09	; 9
    84d0:	90 e0       	ldi	r25, 0x00	; 0
    84d2:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(13,10,'P',1,1);
    84d6:	21 e0       	ldi	r18, 0x01	; 1
    84d8:	30 e0       	ldi	r19, 0x00	; 0
    84da:	40 e5       	ldi	r20, 0x50	; 80
    84dc:	6a e0       	ldi	r22, 0x0A	; 10
    84de:	70 e0       	ldi	r23, 0x00	; 0
    84e0:	8d e0       	ldi	r24, 0x0D	; 13
    84e2:	90 e0       	ldi	r25, 0x00	; 0
    84e4:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	
	if (strlen(env.temperature) < 2) {
    84e8:	e6 e5       	ldi	r30, 0x56	; 86
    84ea:	fb e2       	ldi	r31, 0x2B	; 43
    84ec:	01 90       	ld	r0, Z+
    84ee:	00 20       	and	r0, r0
    84f0:	e9 f7       	brne	.-6      	; 0x84ec <menu_draw_temperature_frame+0x50>
    84f2:	e7 55       	subi	r30, 0x57	; 87
    84f4:	fb 42       	sbci	r31, 0x2B	; 43
    84f6:	32 97       	sbiw	r30, 0x02	; 2
    84f8:	90 f4       	brcc	.+36     	; 0x851e <menu_draw_temperature_frame+0x82>
		display_draw_small_char(5,3,env.temperature[0],1,1);
    84fa:	21 e0       	ldi	r18, 0x01	; 1
    84fc:	30 e0       	ldi	r19, 0x00	; 0
    84fe:	40 91 56 2b 	lds	r20, 0x2B56
    8502:	63 e0       	ldi	r22, 0x03	; 3
    8504:	70 e0       	ldi	r23, 0x00	; 0
    8506:	85 e0       	ldi	r24, 0x05	; 5
    8508:	90 e0       	ldi	r25, 0x00	; 0
    850a:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
		display_draw_small_char(9,3,'C',1,1);	
    850e:	21 e0       	ldi	r18, 0x01	; 1
    8510:	30 e0       	ldi	r19, 0x00	; 0
    8512:	43 e4       	ldi	r20, 0x43	; 67
    8514:	63 e0       	ldi	r22, 0x03	; 3
    8516:	70 e0       	ldi	r23, 0x00	; 0
    8518:	89 e0       	ldi	r24, 0x09	; 9
    851a:	90 e0       	ldi	r25, 0x00	; 0
    851c:	1c c0       	rjmp	.+56     	; 0x8556 <menu_draw_temperature_frame+0xba>
	} else {
		display_draw_small_char(3,3,env.temperature[0],1,1);
    851e:	01 e0       	ldi	r16, 0x01	; 1
    8520:	21 e0       	ldi	r18, 0x01	; 1
    8522:	30 e0       	ldi	r19, 0x00	; 0
    8524:	40 91 56 2b 	lds	r20, 0x2B56
    8528:	63 e0       	ldi	r22, 0x03	; 3
    852a:	70 e0       	ldi	r23, 0x00	; 0
    852c:	83 e0       	ldi	r24, 0x03	; 3
    852e:	90 e0       	ldi	r25, 0x00	; 0
    8530:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
		display_draw_small_char(7,3,env.temperature[1],1,1);
    8534:	21 e0       	ldi	r18, 0x01	; 1
    8536:	30 e0       	ldi	r19, 0x00	; 0
    8538:	40 91 57 2b 	lds	r20, 0x2B57
    853c:	63 e0       	ldi	r22, 0x03	; 3
    853e:	70 e0       	ldi	r23, 0x00	; 0
    8540:	87 e0       	ldi	r24, 0x07	; 7
    8542:	90 e0       	ldi	r25, 0x00	; 0
    8544:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
		display_draw_small_char(11,3,'C',1,1);	
    8548:	21 e0       	ldi	r18, 0x01	; 1
    854a:	30 e0       	ldi	r19, 0x00	; 0
    854c:	43 e4       	ldi	r20, 0x43	; 67
    854e:	63 e0       	ldi	r22, 0x03	; 3
    8550:	70 e0       	ldi	r23, 0x00	; 0
    8552:	8b e0       	ldi	r24, 0x0B	; 11
    8554:	90 e0       	ldi	r25, 0x00	; 0
    8556:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	}
}
    855a:	0f 91       	pop	r16
    855c:	08 95       	ret

0000855e <menu_draw_date_frame>:

void menu_draw_date_frame(void) 
{
    855e:	0f 93       	push	r16
    8560:	cf 93       	push	r28
    8562:	df 93       	push	r29
    8564:	1f 92       	push	r1
    8566:	1f 92       	push	r1
    8568:	cd b7       	in	r28, 0x3d	; 61
    856a:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'D',1,1);
    856c:	01 e0       	ldi	r16, 0x01	; 1
    856e:	21 e0       	ldi	r18, 0x01	; 1
    8570:	30 e0       	ldi	r19, 0x00	; 0
    8572:	44 e4       	ldi	r20, 0x44	; 68
    8574:	6a e0       	ldi	r22, 0x0A	; 10
    8576:	70 e0       	ldi	r23, 0x00	; 0
    8578:	81 e0       	ldi	r24, 0x01	; 1
    857a:	90 e0       	ldi	r25, 0x00	; 0
    857c:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(5,10,'A',1,1);
    8580:	21 e0       	ldi	r18, 0x01	; 1
    8582:	30 e0       	ldi	r19, 0x00	; 0
    8584:	41 e4       	ldi	r20, 0x41	; 65
    8586:	6a e0       	ldi	r22, 0x0A	; 10
    8588:	70 e0       	ldi	r23, 0x00	; 0
    858a:	85 e0       	ldi	r24, 0x05	; 5
    858c:	90 e0       	ldi	r25, 0x00	; 0
    858e:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(9,10,'T',1,1);
    8592:	21 e0       	ldi	r18, 0x01	; 1
    8594:	30 e0       	ldi	r19, 0x00	; 0
    8596:	44 e5       	ldi	r20, 0x54	; 84
    8598:	6a e0       	ldi	r22, 0x0A	; 10
    859a:	70 e0       	ldi	r23, 0x00	; 0
    859c:	89 e0       	ldi	r24, 0x09	; 9
    859e:	90 e0       	ldi	r25, 0x00	; 0
    85a0:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(13,10,'E',1,1);
    85a4:	21 e0       	ldi	r18, 0x01	; 1
    85a6:	30 e0       	ldi	r19, 0x00	; 0
    85a8:	45 e4       	ldi	r20, 0x45	; 69
    85aa:	6a e0       	ldi	r22, 0x0A	; 10
    85ac:	70 e0       	ldi	r23, 0x00	; 0
    85ae:	8d e0       	ldi	r24, 0x0D	; 13
    85b0:	90 e0       	ldi	r25, 0x00	; 0
    85b2:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	
	char buffer[2];
	char temp;
	
	itoa_simple(buffer,env.time.day);
    85b6:	40 91 d2 2b 	lds	r20, 0x2BD2
    85ba:	50 e0       	ldi	r21, 0x00	; 0
    85bc:	60 e0       	ldi	r22, 0x00	; 0
    85be:	70 e0       	ldi	r23, 0x00	; 0
    85c0:	ce 01       	movw	r24, r28
    85c2:	01 96       	adiw	r24, 0x01	; 1
    85c4:	0a dd       	rcall	.-1516   	; 0x7fda <itoa_simple>
	
	//append zero
	if (env.time.day < 10) {
    85c6:	80 91 d2 2b 	lds	r24, 0x2BD2
    85ca:	8a 30       	cpi	r24, 0x0A	; 10
    85cc:	20 f4       	brcc	.+8      	; 0x85d6 <menu_draw_date_frame+0x78>
		temp = buffer[0];
    85ce:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    85d0:	90 e3       	ldi	r25, 0x30	; 48
    85d2:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    85d4:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(1,3,buffer[0],1,1);
    85d6:	01 e0       	ldi	r16, 0x01	; 1
    85d8:	21 e0       	ldi	r18, 0x01	; 1
    85da:	30 e0       	ldi	r19, 0x00	; 0
    85dc:	49 81       	ldd	r20, Y+1	; 0x01
    85de:	63 e0       	ldi	r22, 0x03	; 3
    85e0:	70 e0       	ldi	r23, 0x00	; 0
    85e2:	81 e0       	ldi	r24, 0x01	; 1
    85e4:	90 e0       	ldi	r25, 0x00	; 0
    85e6:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(4,3,buffer[1],1,1);
    85ea:	21 e0       	ldi	r18, 0x01	; 1
    85ec:	30 e0       	ldi	r19, 0x00	; 0
    85ee:	4a 81       	ldd	r20, Y+2	; 0x02
    85f0:	63 e0       	ldi	r22, 0x03	; 3
    85f2:	70 e0       	ldi	r23, 0x00	; 0
    85f4:	84 e0       	ldi	r24, 0x04	; 4
    85f6:	90 e0       	ldi	r25, 0x00	; 0
    85f8:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(7,3,'.',1,1);
    85fc:	21 e0       	ldi	r18, 0x01	; 1
    85fe:	30 e0       	ldi	r19, 0x00	; 0
    8600:	4e e2       	ldi	r20, 0x2E	; 46
    8602:	63 e0       	ldi	r22, 0x03	; 3
    8604:	70 e0       	ldi	r23, 0x00	; 0
    8606:	87 e0       	ldi	r24, 0x07	; 7
    8608:	90 e0       	ldi	r25, 0x00	; 0
    860a:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	
	itoa_simple(buffer,env.time.month);
    860e:	40 91 d5 2b 	lds	r20, 0x2BD5
    8612:	50 e0       	ldi	r21, 0x00	; 0
    8614:	60 e0       	ldi	r22, 0x00	; 0
    8616:	70 e0       	ldi	r23, 0x00	; 0
    8618:	ce 01       	movw	r24, r28
    861a:	01 96       	adiw	r24, 0x01	; 1
    861c:	de dc       	rcall	.-1604   	; 0x7fda <itoa_simple>
	
	//append zero
	if (env.time.month < 10) {
    861e:	80 91 d5 2b 	lds	r24, 0x2BD5
    8622:	8a 30       	cpi	r24, 0x0A	; 10
    8624:	20 f4       	brcc	.+8      	; 0x862e <menu_draw_date_frame+0xd0>
		temp = buffer[0];
    8626:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    8628:	90 e3       	ldi	r25, 0x30	; 48
    862a:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    862c:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(10,3,buffer[0],1,1);
    862e:	01 e0       	ldi	r16, 0x01	; 1
    8630:	21 e0       	ldi	r18, 0x01	; 1
    8632:	30 e0       	ldi	r19, 0x00	; 0
    8634:	49 81       	ldd	r20, Y+1	; 0x01
    8636:	63 e0       	ldi	r22, 0x03	; 3
    8638:	70 e0       	ldi	r23, 0x00	; 0
    863a:	8a e0       	ldi	r24, 0x0A	; 10
    863c:	90 e0       	ldi	r25, 0x00	; 0
    863e:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(13,3,buffer[1],1,1);
    8642:	21 e0       	ldi	r18, 0x01	; 1
    8644:	30 e0       	ldi	r19, 0x00	; 0
    8646:	4a 81       	ldd	r20, Y+2	; 0x02
    8648:	63 e0       	ldi	r22, 0x03	; 3
    864a:	70 e0       	ldi	r23, 0x00	; 0
    864c:	8d e0       	ldi	r24, 0x0D	; 13
    864e:	90 e0       	ldi	r25, 0x00	; 0
    8650:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
}
    8654:	0f 90       	pop	r0
    8656:	0f 90       	pop	r0
    8658:	df 91       	pop	r29
    865a:	cf 91       	pop	r28
    865c:	0f 91       	pop	r16
    865e:	08 95       	ret

00008660 <menu_draw_week_frame>:

void menu_draw_week_frame(void) 
{
    8660:	0f 93       	push	r16
    8662:	cf 93       	push	r28
    8664:	df 93       	push	r29
    8666:	1f 92       	push	r1
    8668:	1f 92       	push	r1
    866a:	cd b7       	in	r28, 0x3d	; 61
    866c:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'W',1,1);
    866e:	01 e0       	ldi	r16, 0x01	; 1
    8670:	21 e0       	ldi	r18, 0x01	; 1
    8672:	30 e0       	ldi	r19, 0x00	; 0
    8674:	47 e5       	ldi	r20, 0x57	; 87
    8676:	6a e0       	ldi	r22, 0x0A	; 10
    8678:	70 e0       	ldi	r23, 0x00	; 0
    867a:	81 e0       	ldi	r24, 0x01	; 1
    867c:	90 e0       	ldi	r25, 0x00	; 0
    867e:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(5,10,'E',1,1);
    8682:	21 e0       	ldi	r18, 0x01	; 1
    8684:	30 e0       	ldi	r19, 0x00	; 0
    8686:	45 e4       	ldi	r20, 0x45	; 69
    8688:	6a e0       	ldi	r22, 0x0A	; 10
    868a:	70 e0       	ldi	r23, 0x00	; 0
    868c:	85 e0       	ldi	r24, 0x05	; 5
    868e:	90 e0       	ldi	r25, 0x00	; 0
    8690:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(9,10,'E',1,1);
    8694:	21 e0       	ldi	r18, 0x01	; 1
    8696:	30 e0       	ldi	r19, 0x00	; 0
    8698:	45 e4       	ldi	r20, 0x45	; 69
    869a:	6a e0       	ldi	r22, 0x0A	; 10
    869c:	70 e0       	ldi	r23, 0x00	; 0
    869e:	89 e0       	ldi	r24, 0x09	; 9
    86a0:	90 e0       	ldi	r25, 0x00	; 0
    86a2:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(13,10,'K',1,1);
    86a6:	21 e0       	ldi	r18, 0x01	; 1
    86a8:	30 e0       	ldi	r19, 0x00	; 0
    86aa:	4b e4       	ldi	r20, 0x4B	; 75
    86ac:	6a e0       	ldi	r22, 0x0A	; 10
    86ae:	70 e0       	ldi	r23, 0x00	; 0
    86b0:	8d e0       	ldi	r24, 0x0D	; 13
    86b2:	90 e0       	ldi	r25, 0x00	; 0
    86b4:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	
	char buffer[2];
	char temp;
	
	itoa_simple(buffer,env.time.week);
    86b8:	40 91 d4 2b 	lds	r20, 0x2BD4
    86bc:	50 e0       	ldi	r21, 0x00	; 0
    86be:	60 e0       	ldi	r22, 0x00	; 0
    86c0:	70 e0       	ldi	r23, 0x00	; 0
    86c2:	ce 01       	movw	r24, r28
    86c4:	01 96       	adiw	r24, 0x01	; 1
    86c6:	89 dc       	rcall	.-1774   	; 0x7fda <itoa_simple>
	
	//append zero
	if (env.time.week < 10) {
    86c8:	80 91 d4 2b 	lds	r24, 0x2BD4
    86cc:	8a 30       	cpi	r24, 0x0A	; 10
    86ce:	20 f4       	brcc	.+8      	; 0x86d8 <menu_draw_week_frame+0x78>
		temp = buffer[0];
    86d0:	89 81       	ldd	r24, Y+1	; 0x01
		buffer[0] = '0';
    86d2:	90 e3       	ldi	r25, 0x30	; 48
    86d4:	99 83       	std	Y+1, r25	; 0x01
		buffer[1] = temp;
    86d6:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	display_draw_small_char(5,3,buffer[0],1,1);
    86d8:	01 e0       	ldi	r16, 0x01	; 1
    86da:	21 e0       	ldi	r18, 0x01	; 1
    86dc:	30 e0       	ldi	r19, 0x00	; 0
    86de:	49 81       	ldd	r20, Y+1	; 0x01
    86e0:	63 e0       	ldi	r22, 0x03	; 3
    86e2:	70 e0       	ldi	r23, 0x00	; 0
    86e4:	85 e0       	ldi	r24, 0x05	; 5
    86e6:	90 e0       	ldi	r25, 0x00	; 0
    86e8:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(9,3,buffer[1],1,1);
    86ec:	21 e0       	ldi	r18, 0x01	; 1
    86ee:	30 e0       	ldi	r19, 0x00	; 0
    86f0:	4a 81       	ldd	r20, Y+2	; 0x02
    86f2:	63 e0       	ldi	r22, 0x03	; 3
    86f4:	70 e0       	ldi	r23, 0x00	; 0
    86f6:	89 e0       	ldi	r24, 0x09	; 9
    86f8:	90 e0       	ldi	r25, 0x00	; 0
    86fa:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
}
    86fe:	0f 90       	pop	r0
    8700:	0f 90       	pop	r0
    8702:	df 91       	pop	r29
    8704:	cf 91       	pop	r28
    8706:	0f 91       	pop	r16
    8708:	08 95       	ret

0000870a <menu_draw_weekday_frame>:

void menu_draw_weekday_frame(void) 
{
    870a:	0f 93       	push	r16
    870c:	cf 93       	push	r28
    870e:	df 93       	push	r29
    8710:	00 d0       	rcall	.+0      	; 0x8712 <menu_draw_weekday_frame+0x8>
    8712:	cd b7       	in	r28, 0x3d	; 61
    8714:	de b7       	in	r29, 0x3e	; 62
	display_draw_small_char(1,10,'W',1,1);
    8716:	01 e0       	ldi	r16, 0x01	; 1
    8718:	21 e0       	ldi	r18, 0x01	; 1
    871a:	30 e0       	ldi	r19, 0x00	; 0
    871c:	47 e5       	ldi	r20, 0x57	; 87
    871e:	6a e0       	ldi	r22, 0x0A	; 10
    8720:	70 e0       	ldi	r23, 0x00	; 0
    8722:	81 e0       	ldi	r24, 0x01	; 1
    8724:	90 e0       	ldi	r25, 0x00	; 0
    8726:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(5,10,'D',1,1);
    872a:	21 e0       	ldi	r18, 0x01	; 1
    872c:	30 e0       	ldi	r19, 0x00	; 0
    872e:	44 e4       	ldi	r20, 0x44	; 68
    8730:	6a e0       	ldi	r22, 0x0A	; 10
    8732:	70 e0       	ldi	r23, 0x00	; 0
    8734:	85 e0       	ldi	r24, 0x05	; 5
    8736:	90 e0       	ldi	r25, 0x00	; 0
    8738:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(9,10,'A',1,1);
    873c:	21 e0       	ldi	r18, 0x01	; 1
    873e:	30 e0       	ldi	r19, 0x00	; 0
    8740:	41 e4       	ldi	r20, 0x41	; 65
    8742:	6a e0       	ldi	r22, 0x0A	; 10
    8744:	70 e0       	ldi	r23, 0x00	; 0
    8746:	89 e0       	ldi	r24, 0x09	; 9
    8748:	90 e0       	ldi	r25, 0x00	; 0
    874a:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(13,10,'Y',1,1);
    874e:	21 e0       	ldi	r18, 0x01	; 1
    8750:	30 e0       	ldi	r19, 0x00	; 0
    8752:	49 e5       	ldi	r20, 0x59	; 89
    8754:	6a e0       	ldi	r22, 0x0A	; 10
    8756:	70 e0       	ldi	r23, 0x00	; 0
    8758:	8d e0       	ldi	r24, 0x0D	; 13
    875a:	90 e0       	ldi	r25, 0x00	; 0
    875c:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	
	char buffer[3];
	strncpy(buffer,time_get_day_name(env.time.weekday),3);
    8760:	80 91 d3 2b 	lds	r24, 0x2BD3
    8764:	ba d6       	rcall	.+3444   	; 0x94da <time_get_day_name>
    8766:	43 e0       	ldi	r20, 0x03	; 3
    8768:	50 e0       	ldi	r21, 0x00	; 0
    876a:	bc 01       	movw	r22, r24
    876c:	ce 01       	movw	r24, r28
    876e:	01 96       	adiw	r24, 0x01	; 1
    8770:	0e 94 c2 53 	call	0xa784	; 0xa784 <strncpy>
	
	display_draw_small_char(3,3,buffer[0],1,1);
    8774:	21 e0       	ldi	r18, 0x01	; 1
    8776:	30 e0       	ldi	r19, 0x00	; 0
    8778:	49 81       	ldd	r20, Y+1	; 0x01
    877a:	63 e0       	ldi	r22, 0x03	; 3
    877c:	70 e0       	ldi	r23, 0x00	; 0
    877e:	83 e0       	ldi	r24, 0x03	; 3
    8780:	90 e0       	ldi	r25, 0x00	; 0
    8782:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(7,3,buffer[1],1,1);
    8786:	21 e0       	ldi	r18, 0x01	; 1
    8788:	30 e0       	ldi	r19, 0x00	; 0
    878a:	4a 81       	ldd	r20, Y+2	; 0x02
    878c:	63 e0       	ldi	r22, 0x03	; 3
    878e:	70 e0       	ldi	r23, 0x00	; 0
    8790:	87 e0       	ldi	r24, 0x07	; 7
    8792:	90 e0       	ldi	r25, 0x00	; 0
    8794:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(11,3,buffer[2],1,1);
    8798:	21 e0       	ldi	r18, 0x01	; 1
    879a:	30 e0       	ldi	r19, 0x00	; 0
    879c:	4b 81       	ldd	r20, Y+3	; 0x03
    879e:	63 e0       	ldi	r22, 0x03	; 3
    87a0:	70 e0       	ldi	r23, 0x00	; 0
    87a2:	8b e0       	ldi	r24, 0x0B	; 11
    87a4:	90 e0       	ldi	r25, 0x00	; 0
    87a6:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
}
    87aa:	23 96       	adiw	r28, 0x03	; 3
    87ac:	cd bf       	out	0x3d, r28	; 61
    87ae:	de bf       	out	0x3e, r29	; 62
    87b0:	df 91       	pop	r29
    87b2:	cf 91       	pop	r28
    87b4:	0f 91       	pop	r16
    87b6:	08 95       	ret

000087b8 <menu_draw_battery_frame>:

void menu_draw_battery_frame(void) 
{	
    87b8:	0f 93       	push	r16
    87ba:	cf 93       	push	r28
    87bc:	df 93       	push	r29
    87be:	cd b7       	in	r28, 0x3d	; 61
    87c0:	de b7       	in	r29, 0x3e	; 62
    87c2:	25 97       	sbiw	r28, 0x05	; 5
    87c4:	cd bf       	out	0x3d, r28	; 61
    87c6:	de bf       	out	0x3e, r29	; 62
	display_draw_small_char(1,10,'B',1,1);
    87c8:	01 e0       	ldi	r16, 0x01	; 1
    87ca:	21 e0       	ldi	r18, 0x01	; 1
    87cc:	30 e0       	ldi	r19, 0x00	; 0
    87ce:	42 e4       	ldi	r20, 0x42	; 66
    87d0:	6a e0       	ldi	r22, 0x0A	; 10
    87d2:	70 e0       	ldi	r23, 0x00	; 0
    87d4:	81 e0       	ldi	r24, 0x01	; 1
    87d6:	90 e0       	ldi	r25, 0x00	; 0
    87d8:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(5,10,'A',1,1);
    87dc:	21 e0       	ldi	r18, 0x01	; 1
    87de:	30 e0       	ldi	r19, 0x00	; 0
    87e0:	41 e4       	ldi	r20, 0x41	; 65
    87e2:	6a e0       	ldi	r22, 0x0A	; 10
    87e4:	70 e0       	ldi	r23, 0x00	; 0
    87e6:	85 e0       	ldi	r24, 0x05	; 5
    87e8:	90 e0       	ldi	r25, 0x00	; 0
    87ea:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(9,10,'T',1,1);
    87ee:	21 e0       	ldi	r18, 0x01	; 1
    87f0:	30 e0       	ldi	r19, 0x00	; 0
    87f2:	44 e5       	ldi	r20, 0x54	; 84
    87f4:	6a e0       	ldi	r22, 0x0A	; 10
    87f6:	70 e0       	ldi	r23, 0x00	; 0
    87f8:	89 e0       	ldi	r24, 0x09	; 9
    87fa:	90 e0       	ldi	r25, 0x00	; 0
    87fc:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	display_draw_small_char(13,10,'T',1,1);
    8800:	21 e0       	ldi	r18, 0x01	; 1
    8802:	30 e0       	ldi	r19, 0x00	; 0
    8804:	44 e5       	ldi	r20, 0x54	; 84
    8806:	6a e0       	ldi	r22, 0x0A	; 10
    8808:	70 e0       	ldi	r23, 0x00	; 0
    880a:	8d e0       	ldi	r24, 0x0D	; 13
    880c:	90 e0       	ldi	r25, 0x00	; 0
    880e:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	
	if (PORTA.IN & PIN3_bm) {
    8812:	80 91 08 06 	lds	r24, 0x0608
    8816:	83 ff       	sbrs	r24, 3
    8818:	16 c0       	rjmp	.+44     	; 0x8846 <menu_draw_battery_frame+0x8e>
		display_draw_small_char(3,3,'U',1,1);
    881a:	21 e0       	ldi	r18, 0x01	; 1
    881c:	30 e0       	ldi	r19, 0x00	; 0
    881e:	45 e5       	ldi	r20, 0x55	; 85
    8820:	63 e0       	ldi	r22, 0x03	; 3
    8822:	70 e0       	ldi	r23, 0x00	; 0
    8824:	83 e0       	ldi	r24, 0x03	; 3
    8826:	90 e0       	ldi	r25, 0x00	; 0
    8828:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
		display_draw_small_char(7,3,'S',1,1);
    882c:	21 e0       	ldi	r18, 0x01	; 1
    882e:	30 e0       	ldi	r19, 0x00	; 0
    8830:	43 e5       	ldi	r20, 0x53	; 83
    8832:	63 e0       	ldi	r22, 0x03	; 3
    8834:	70 e0       	ldi	r23, 0x00	; 0
    8836:	87 e0       	ldi	r24, 0x07	; 7
    8838:	90 e0       	ldi	r25, 0x00	; 0
    883a:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
		display_draw_small_char(11,3,'B',1,1);
    883e:	21 e0       	ldi	r18, 0x01	; 1
    8840:	30 e0       	ldi	r19, 0x00	; 0
    8842:	42 e4       	ldi	r20, 0x42	; 66
    8844:	1f c0       	rjmp	.+62     	; 0x8884 <menu_draw_battery_frame+0xcc>
	} else {
		uint8_t battery = adc_get_battery_percentage();
    8846:	0e 94 5f 08 	call	0x10be	; 0x10be <adc_get_battery_percentage>
		
		char buffer[5];
		itoa_simple(buffer,battery);
    884a:	48 2f       	mov	r20, r24
    884c:	50 e0       	ldi	r21, 0x00	; 0
    884e:	60 e0       	ldi	r22, 0x00	; 0
    8850:	70 e0       	ldi	r23, 0x00	; 0
    8852:	ce 01       	movw	r24, r28
    8854:	01 96       	adiw	r24, 0x01	; 1
    8856:	c1 db       	rcall	.-2174   	; 0x7fda <itoa_simple>
		
		display_draw_small_char(3,3,buffer[0],1,1);
    8858:	01 e0       	ldi	r16, 0x01	; 1
    885a:	21 e0       	ldi	r18, 0x01	; 1
    885c:	30 e0       	ldi	r19, 0x00	; 0
    885e:	49 81       	ldd	r20, Y+1	; 0x01
    8860:	63 e0       	ldi	r22, 0x03	; 3
    8862:	70 e0       	ldi	r23, 0x00	; 0
    8864:	83 e0       	ldi	r24, 0x03	; 3
    8866:	90 e0       	ldi	r25, 0x00	; 0
    8868:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
		display_draw_small_char(7,3,buffer[1],1,1);
    886c:	21 e0       	ldi	r18, 0x01	; 1
    886e:	30 e0       	ldi	r19, 0x00	; 0
    8870:	4a 81       	ldd	r20, Y+2	; 0x02
    8872:	63 e0       	ldi	r22, 0x03	; 3
    8874:	70 e0       	ldi	r23, 0x00	; 0
    8876:	87 e0       	ldi	r24, 0x07	; 7
    8878:	90 e0       	ldi	r25, 0x00	; 0
    887a:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
		display_draw_small_char(11,3,'%',1,1);	
    887e:	21 e0       	ldi	r18, 0x01	; 1
    8880:	30 e0       	ldi	r19, 0x00	; 0
    8882:	45 e2       	ldi	r20, 0x25	; 37
    8884:	63 e0       	ldi	r22, 0x03	; 3
    8886:	70 e0       	ldi	r23, 0x00	; 0
    8888:	8b e0       	ldi	r24, 0x0B	; 11
    888a:	90 e0       	ldi	r25, 0x00	; 0
    888c:	0e 94 2a 23 	call	0x4654	; 0x4654 <display_draw_small_char>
	}
}
    8890:	25 96       	adiw	r28, 0x05	; 5
    8892:	cd bf       	out	0x3d, r28	; 61
    8894:	de bf       	out	0x3e, r29	; 62
    8896:	df 91       	pop	r29
    8898:	cf 91       	pop	r28
    889a:	0f 91       	pop	r16
    889c:	08 95       	ret

0000889e <menu_draw_config_frame>:

void menu_draw_config_frame(void) 
{
	display_draw_four_letter_word("CONF");
    889e:	80 ee       	ldi	r24, 0xE0	; 224
    88a0:	97 e2       	ldi	r25, 0x27	; 39
    88a2:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <display_draw_four_letter_word>

000088a6 <menu_set_env_variables>:
}

void menu_set_env_variables(void) 
{
    88a6:	ef 92       	push	r14
    88a8:	ff 92       	push	r15
    88aa:	0f 93       	push	r16
    88ac:	1f 93       	push	r17
    88ae:	cf 93       	push	r28
    88b0:	df 93       	push	r29
	strncpy(env.name,CLOCK_NAME,sizeof(env.name));
    88b2:	49 e1       	ldi	r20, 0x19	; 25
    88b4:	50 e0       	ldi	r21, 0x00	; 0
    88b6:	65 ee       	ldi	r22, 0xE5	; 229
    88b8:	77 e2       	ldi	r23, 0x27	; 39
    88ba:	8d e3       	ldi	r24, 0x3D	; 61
    88bc:	9b e2       	ldi	r25, 0x2B	; 43
    88be:	0e 94 c2 53 	call	0xa784	; 0xa784 <strncpy>
	env.id = CLOCK_ID;
    88c2:	81 e0       	ldi	r24, 0x01	; 1
    88c4:	80 93 2d 2b 	sts	0x2B2D, r24
	env.menu_id = 0;
    88c8:	10 92 2e 2b 	sts	0x2B2E, r1
	env.brightness = 0;
    88cc:	10 92 30 2b 	sts	0x2B30, r1
	env.runtime = 0;
    88d0:	10 92 39 2b 	sts	0x2B39, r1
    88d4:	10 92 3a 2b 	sts	0x2B3A, r1
    88d8:	10 92 3b 2b 	sts	0x2B3B, r1
    88dc:	10 92 3c 2b 	sts	0x2B3C, r1
	
	strncpy(env.wifi_pswd,PASS, strlen(PASS));
    88e0:	8a e0       	ldi	r24, 0x0A	; 10
    88e2:	ea ee       	ldi	r30, 0xEA	; 234
    88e4:	f7 e2       	ldi	r31, 0x27	; 39
    88e6:	aa e9       	ldi	r26, 0x9A	; 154
    88e8:	bb e2       	ldi	r27, 0x2B	; 43
    88ea:	01 90       	ld	r0, Z+
    88ec:	0d 92       	st	X+, r0
    88ee:	8a 95       	dec	r24
    88f0:	e1 f7       	brne	.-8      	; 0x88ea <menu_set_env_variables+0x44>
	strncpy(env.wifi_ssid,SSID, strlen(SSID));
    88f2:	89 e0       	ldi	r24, 0x09	; 9
    88f4:	e5 ef       	ldi	r30, 0xF5	; 245
    88f6:	f7 e2       	ldi	r31, 0x27	; 39
    88f8:	a3 eb       	ldi	r26, 0xB3	; 179
    88fa:	bb e2       	ldi	r27, 0x2B	; 43
    88fc:	01 90       	ld	r0, Z+
    88fe:	0d 92       	st	X+, r0
    8900:	8a 95       	dec	r24
    8902:	e1 f7       	brne	.-8      	; 0x88fc <menu_set_env_variables+0x56>
	
	env.temperature[0] = '0';
    8904:	80 e3       	ldi	r24, 0x30	; 48
    8906:	80 93 56 2b 	sts	0x2B56, r24
	env.city[0] = '0';
    890a:	80 93 81 2b 	sts	0x2B81, r24
	
	env.time.seconds = 0;
    890e:	10 92 cf 2b 	sts	0x2BCF, r1
	env.time.minutes = 0;
    8912:	10 92 d0 2b 	sts	0x2BD0, r1
	env.time.hours = 0;
    8916:	10 92 d1 2b 	sts	0x2BD1, r1
	env.time.day = 3;
    891a:	c2 ed       	ldi	r28, 0xD2	; 210
    891c:	db e2       	ldi	r29, 0x2B	; 43
    891e:	83 e0       	ldi	r24, 0x03	; 3
    8920:	88 83       	st	Y, r24
	env.time.month = Februrary;
    8922:	05 ed       	ldi	r16, 0xD5	; 213
    8924:	1b e2       	ldi	r17, 0x2B	; 43
    8926:	82 e0       	ldi	r24, 0x02	; 2
    8928:	f8 01       	movw	r30, r16
    892a:	80 83       	st	Z, r24
	env.time.year = 2016;
    892c:	36 ed       	ldi	r19, 0xD6	; 214
    892e:	e3 2e       	mov	r14, r19
    8930:	3b e2       	ldi	r19, 0x2B	; 43
    8932:	f3 2e       	mov	r15, r19
    8934:	80 ee       	ldi	r24, 0xE0	; 224
    8936:	97 e0       	ldi	r25, 0x07	; 7
    8938:	f7 01       	movw	r30, r14
    893a:	80 83       	st	Z, r24
    893c:	91 83       	std	Z+1, r25	; 0x01
	env.time.weekday = time_get_weekday(env.time.day, env.time.month, env.time.year);
    893e:	40 ee       	ldi	r20, 0xE0	; 224
    8940:	57 e0       	ldi	r21, 0x07	; 7
    8942:	62 e0       	ldi	r22, 0x02	; 2
    8944:	83 e0       	ldi	r24, 0x03	; 3
    8946:	e7 d5       	rcall	.+3022   	; 0x9516 <time_get_weekday>
    8948:	80 93 d3 2b 	sts	0x2BD3, r24
	env.time.week = time_get_weeknumber(env.time.day, env.time.month, env.time.year);;
    894c:	f7 01       	movw	r30, r14
    894e:	40 81       	ld	r20, Z
    8950:	51 81       	ldd	r21, Z+1	; 0x01
    8952:	f8 01       	movw	r30, r16
    8954:	60 81       	ld	r22, Z
    8956:	88 81       	ld	r24, Y
    8958:	43 d6       	rcall	.+3206   	; 0x95e0 <time_get_weeknumber>
    895a:	80 93 d4 2b 	sts	0x2BD4, r24
	
	env.alarm.hours = 0;
    895e:	10 92 cd 2b 	sts	0x2BCD, r1
	env.alarm.minutes = 0;
    8962:	10 92 cc 2b 	sts	0x2BCC, r1
	
	eeprom_write_block(&env,EEPROM_START,sizeof(env));
    8966:	4b ea       	ldi	r20, 0xAB	; 171
    8968:	50 e0       	ldi	r21, 0x00	; 0
    896a:	60 e0       	ldi	r22, 0x00	; 0
    896c:	70 e0       	ldi	r23, 0x00	; 0
    896e:	8d e2       	ldi	r24, 0x2D	; 45
    8970:	9b e2       	ldi	r25, 0x2B	; 43
	
}
    8972:	df 91       	pop	r29
    8974:	cf 91       	pop	r28
    8976:	1f 91       	pop	r17
    8978:	0f 91       	pop	r16
    897a:	ff 90       	pop	r15
    897c:	ef 90       	pop	r14
	env.time.week = time_get_weeknumber(env.time.day, env.time.month, env.time.year);;
	
	env.alarm.hours = 0;
	env.alarm.minutes = 0;
	
	eeprom_write_block(&env,EEPROM_START,sizeof(env));
    897e:	0c 94 e3 57 	jmp	0xafc6	; 0xafc6 <__eewr_block_x128a4u>

00008982 <menu_alarm>:
	
}

void menu_alarm(void) 
{
	rtc_disable_time_render();
    8982:	0e 94 e7 12 	call	0x25ce	; 0x25ce <rtc_disable_time_render>
	display_slide_out_to_bottom();
    8986:	0e 94 9f 24 	call	0x493e	; 0x493e <display_slide_out_to_bottom>
	display_fill_screen();
    898a:	0e 94 7f 20 	call	0x40fe	; 0x40fe <display_fill_screen>
	display_refresh_screen();
    898e:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
	display_fade_blink();
    8992:	0e 94 bd 20 	call	0x417a	; 0x417a <display_fade_blink>
	display_fade_blink();
    8996:	0e 94 bd 20 	call	0x417a	; 0x417a <display_fade_blink>
	display_fade_blink();
    899a:	0e 94 bd 20 	call	0x417a	; 0x417a <display_fade_blink>
	display_clear_screen();
    899e:	0e 94 81 20 	call	0x4102	; 0x4102 <display_clear_screen>
	rtc_enable_time_render();
    89a2:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <rtc_enable_time_render>
	display_slide_in_from_bottom();
    89a6:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <display_slide_in_from_bottom>

000089aa <menu_configure_brightnesss>:
	}	
	return MENU_SUCCESS;
}

void menu_configure_brightnesss(void) 
{	
    89aa:	0f 93       	push	r16
	bool quit = false;
	
	ht1632c_set_brightness(env.brightness);
    89ac:	80 91 30 2b 	lds	r24, 0x2B30
    89b0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <ht1632c_set_brightness>
	display_draw_filled_rect(0,7,env.brightness+1,2,1);
    89b4:	40 91 30 2b 	lds	r20, 0x2B30
    89b8:	4f 5f       	subi	r20, 0xFF	; 255
    89ba:	01 e0       	ldi	r16, 0x01	; 1
    89bc:	22 e0       	ldi	r18, 0x02	; 2
    89be:	67 e0       	ldi	r22, 0x07	; 7
    89c0:	80 e0       	ldi	r24, 0x00	; 0
    89c2:	0e 94 fe 20 	call	0x41fc	; 0x41fc <display_draw_filled_rect>
	display_refresh_screen();
    89c6:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
	
	while(!quit) {
		btn_status = btn_check_press();
    89ca:	0e 94 a1 11 	call	0x2342	; 0x2342 <btn_check_press>
    89ce:	80 93 b5 2c 	sts	0x2CB5, r24

		switch(btn_status) {
    89d2:	80 91 b5 2c 	lds	r24, 0x2CB5
    89d6:	82 30       	cpi	r24, 0x02	; 2
    89d8:	09 f4       	brne	.+2      	; 0x89dc <menu_configure_brightnesss+0x32>
    89da:	49 c0       	rjmp	.+146    	; 0x8a6e <menu_configure_brightnesss+0xc4>
    89dc:	18 f4       	brcc	.+6      	; 0x89e4 <menu_configure_brightnesss+0x3a>
    89de:	81 30       	cpi	r24, 0x01	; 1
    89e0:	69 f1       	breq	.+90     	; 0x8a3c <menu_configure_brightnesss+0x92>
    89e2:	4b c0       	rjmp	.+150    	; 0x8a7a <menu_configure_brightnesss+0xd0>
    89e4:	83 30       	cpi	r24, 0x03	; 3
    89e6:	c9 f1       	breq	.+114    	; 0x8a5a <menu_configure_brightnesss+0xb0>
    89e8:	84 30       	cpi	r24, 0x04	; 4
    89ea:	09 f0       	breq	.+2      	; 0x89ee <menu_configure_brightnesss+0x44>
    89ec:	46 c0       	rjmp	.+140    	; 0x8a7a <menu_configure_brightnesss+0xd0>
			case BTN4:
				if (env.brightness < 15) {
    89ee:	40 91 30 2b 	lds	r20, 0x2B30
    89f2:	4f 30       	cpi	r20, 0x0F	; 15
    89f4:	cc f4       	brge	.+50     	; 0x8a28 <menu_configure_brightnesss+0x7e>
					display_draw_filled_rect(0,7,env.brightness+1,2,0);
    89f6:	4f 5f       	subi	r20, 0xFF	; 255
    89f8:	00 e0       	ldi	r16, 0x00	; 0
    89fa:	22 e0       	ldi	r18, 0x02	; 2
    89fc:	67 e0       	ldi	r22, 0x07	; 7
    89fe:	80 e0       	ldi	r24, 0x00	; 0
    8a00:	0e 94 fe 20 	call	0x41fc	; 0x41fc <display_draw_filled_rect>
					ht1632c_set_brightness(++env.brightness);
    8a04:	80 91 30 2b 	lds	r24, 0x2B30
    8a08:	8f 5f       	subi	r24, 0xFF	; 255
    8a0a:	80 93 30 2b 	sts	0x2B30, r24
    8a0e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <ht1632c_set_brightness>
					display_draw_filled_rect(0,7,env.brightness+1,2,1);
    8a12:	40 91 30 2b 	lds	r20, 0x2B30
    8a16:	4f 5f       	subi	r20, 0xFF	; 255
    8a18:	01 e0       	ldi	r16, 0x01	; 1
    8a1a:	22 e0       	ldi	r18, 0x02	; 2
    8a1c:	67 e0       	ldi	r22, 0x07	; 7
    8a1e:	80 e0       	ldi	r24, 0x00	; 0
    8a20:	0e 94 fe 20 	call	0x41fc	; 0x41fc <display_draw_filled_rect>
					display_refresh_screen();
    8a24:	0e 94 85 20 	call	0x410a	; 0x410a <display_refresh_screen>
    8a28:	2f ef       	ldi	r18, 0xFF	; 255
    8a2a:	83 ec       	ldi	r24, 0xC3	; 195
    8a2c:	99 e0       	ldi	r25, 0x09	; 9
    8a2e:	21 50       	subi	r18, 0x01	; 1
    8a30:	80 40       	sbci	r24, 0x00	; 0
    8a32:	90 40       	sbci	r25, 0x00	; 0
    8a34:	e1 f7       	brne	.-8      	; 0x8a2e <menu_configure_brightnesss+0x84>
    8a36:	00 c0       	rjmp	.+0      	; 0x8a38 <menu_configure_brightnesss+0x8e>
    8a38:	00 00       	nop
    8a3a:	c7 cf       	rjmp	.-114    	; 0x89ca <menu_configure_brightnesss+0x20>
				}
				_delay_ms(100);
				break;
			case BTN1:
				if (env.brightness > 0) {
    8a3c:	40 91 30 2b 	lds	r20, 0x2B30
    8a40:	14 16       	cp	r1, r20
    8a42:	94 f7       	brge	.-28     	; 0x8a28 <menu_configure_brightnesss+0x7e>
					display_draw_filled_rect(0,7,env.brightness+1,2,0);
    8a44:	4f 5f       	subi	r20, 0xFF	; 255
    8a46:	00 e0       	ldi	r16, 0x00	; 0
    8a48:	22 e0       	ldi	r18, 0x02	; 2
    8a4a:	67 e0       	ldi	r22, 0x07	; 7
    8a4c:	80 e0       	ldi	r24, 0x00	; 0
    8a4e:	0e 94 fe 20 	call	0x41fc	; 0x41fc <display_draw_filled_rect>
					ht1632c_set_brightness(--env.brightness);
    8a52:	80 91 30 2b 	lds	r24, 0x2B30
    8a56:	81 50       	subi	r24, 0x01	; 1
    8a58:	d8 cf       	rjmp	.-80     	; 0x8a0a <menu_configure_brightnesss+0x60>
					display_refresh_screen();
				}
				_delay_ms(100);
				break;
			case BTN3:
				display_clear_screen();
    8a5a:	0e 94 81 20 	call	0x4102	; 0x4102 <display_clear_screen>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("BRIGHTNESS SET",false);
    8a5e:	60 e0       	ldi	r22, 0x00	; 0
    8a60:	8f ef       	ldi	r24, 0xFF	; 255
    8a62:	97 e2       	ldi	r25, 0x27	; 39
    8a64:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
				_delay_ms(100);
				btn_status = NO_BTN;
				break;
		}
	}
}
    8a68:	0f 91       	pop	r16
				display_clear_screen();
#ifdef SHOW_MANUAL
				display_print_scrolling_text("BRIGHTNESS SET",false);
#endif
				quit = true;
				EEPROM_WriteEnv();
    8a6a:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <EEPROM_WriteEnv>
				break;
			case BTN2:
#ifdef SHOW_MANUAL
				display_print_scrolling_text("EXIT",false);
    8a6e:	60 e0       	ldi	r22, 0x00	; 0
    8a70:	8e e0       	ldi	r24, 0x0E	; 14
    8a72:	98 e2       	ldi	r25, 0x28	; 40
				_delay_ms(100);
				btn_status = NO_BTN;
				break;
		}
	}
}
    8a74:	0f 91       	pop	r16
				quit = true;
				EEPROM_WriteEnv();
				break;
			case BTN2:
#ifdef SHOW_MANUAL
				display_print_scrolling_text("EXIT",false);
    8a76:	0c 94 d2 22 	jmp	0x45a4	; 0x45a4 <display_print_scrolling_text>
    8a7a:	2f ef       	ldi	r18, 0xFF	; 255
    8a7c:	83 ec       	ldi	r24, 0xC3	; 195
    8a7e:	99 e0       	ldi	r25, 0x09	; 9
    8a80:	21 50       	subi	r18, 0x01	; 1
    8a82:	80 40       	sbci	r24, 0x00	; 0
    8a84:	90 40       	sbci	r25, 0x00	; 0
    8a86:	e1 f7       	brne	.-8      	; 0x8a80 <menu_configure_brightnesss+0xd6>
    8a88:	00 c0       	rjmp	.+0      	; 0x8a8a <menu_configure_brightnesss+0xe0>
    8a8a:	00 00       	nop
#endif
				return;
			default:
				_delay_ms(100);
				btn_status = NO_BTN;
    8a8c:	10 92 b5 2c 	sts	0x2CB5, r1
				break;
    8a90:	9c cf       	rjmp	.-200    	; 0x89ca <menu_configure_brightnesss+0x20>

00008a92 <menu_set_time>:

uint8_t menu_set_time(void) 
{	
	bool next = false;
	
	display_slide_out_to_left();
    8a92:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
	display_draw_three_letter_word("HRS");
    8a96:	83 e1       	ldi	r24, 0x13	; 19
    8a98:	98 e2       	ldi	r25, 0x28	; 40
    8a9a:	0e 94 da 23 	call	0x47b4	; 0x47b4 <display_draw_three_letter_word>
	display_slide_in_from_right();
    8a9e:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
    8aa2:	2f ef       	ldi	r18, 0xFF	; 255
    8aa4:	87 ea       	ldi	r24, 0xA7	; 167
    8aa6:	91 e6       	ldi	r25, 0x61	; 97
    8aa8:	21 50       	subi	r18, 0x01	; 1
    8aaa:	80 40       	sbci	r24, 0x00	; 0
    8aac:	90 40       	sbci	r25, 0x00	; 0
    8aae:	e1 f7       	brne	.-8      	; 0x8aa8 <menu_set_time+0x16>
    8ab0:	00 c0       	rjmp	.+0      	; 0x8ab2 <menu_set_time+0x20>
    8ab2:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8ab4:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
	rtc_update_display(5,env.time.hours);
    8ab8:	60 91 d1 2b 	lds	r22, 0x2BD1
    8abc:	85 e0       	ldi	r24, 0x05	; 5
    8abe:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
	display_slide_in_from_right();
    8ac2:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
    8ac6:	0e 94 a1 11 	call	0x2342	; 0x2342 <btn_check_press>
    8aca:	80 93 b5 2c 	sts	0x2CB5, r24
		switch(btn_status) {
    8ace:	80 91 b5 2c 	lds	r24, 0x2CB5
    8ad2:	82 30       	cpi	r24, 0x02	; 2
    8ad4:	09 f4       	brne	.+2      	; 0x8ad8 <menu_set_time+0x46>
    8ad6:	78 c1       	rjmp	.+752    	; 0x8dc8 <menu_set_time+0x336>
    8ad8:	38 f4       	brcc	.+14     	; 0x8ae8 <menu_set_time+0x56>
    8ada:	81 30       	cpi	r24, 0x01	; 1
    8adc:	d9 f5       	brne	.+118    	; 0x8b54 <menu_set_time+0xc2>
				display_clear_buffer();
				display_draw_and_increment_hour();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    8ade:	0e 94 83 20 	call	0x4106	; 0x4106 <display_clear_buffer>
				display_draw_and_decrement_hour();
    8ae2:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <display_draw_and_decrement_hour>
    8ae6:	08 c0       	rjmp	.+16     	; 0x8af8 <menu_set_time+0x66>
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8ae8:	83 30       	cpi	r24, 0x03	; 3
    8aea:	81 f0       	breq	.+32     	; 0x8b0c <menu_set_time+0x7a>
    8aec:	84 30       	cpi	r24, 0x04	; 4
    8aee:	91 f5       	brne	.+100    	; 0x8b54 <menu_set_time+0xc2>
			case BTN4:
				display_clear_buffer();
    8af0:	0e 94 83 20 	call	0x4106	; 0x4106 <display_clear_buffer>
				display_draw_and_increment_hour();
    8af4:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <display_draw_and_increment_hour>
    8af8:	2f ef       	ldi	r18, 0xFF	; 255
    8afa:	89 e6       	ldi	r24, 0x69	; 105
    8afc:	98 e1       	ldi	r25, 0x18	; 24
    8afe:	21 50       	subi	r18, 0x01	; 1
    8b00:	80 40       	sbci	r24, 0x00	; 0
    8b02:	90 40       	sbci	r25, 0x00	; 0
    8b04:	e1 f7       	brne	.-8      	; 0x8afe <menu_set_time+0x6c>
    8b06:	00 c0       	rjmp	.+0      	; 0x8b08 <menu_set_time+0x76>
    8b08:	00 00       	nop
    8b0a:	dd cf       	rjmp	.-70     	; 0x8ac6 <menu_set_time+0x34>
    8b0c:	2f ef       	ldi	r18, 0xFF	; 255
    8b0e:	89 e6       	ldi	r24, 0x69	; 105
    8b10:	98 e1       	ldi	r25, 0x18	; 24
    8b12:	21 50       	subi	r18, 0x01	; 1
    8b14:	80 40       	sbci	r24, 0x00	; 0
    8b16:	90 40       	sbci	r25, 0x00	; 0
    8b18:	e1 f7       	brne	.-8      	; 0x8b12 <menu_set_time+0x80>
    8b1a:	00 c0       	rjmp	.+0      	; 0x8b1c <menu_set_time+0x8a>
    8b1c:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    8b1e:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
	display_draw_three_letter_word("MIN");
    8b22:	87 e1       	ldi	r24, 0x17	; 23
    8b24:	98 e2       	ldi	r25, 0x28	; 40
    8b26:	0e 94 da 23 	call	0x47b4	; 0x47b4 <display_draw_three_letter_word>
	display_slide_in_from_right();
    8b2a:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
    8b2e:	2f ef       	ldi	r18, 0xFF	; 255
    8b30:	87 ea       	ldi	r24, 0xA7	; 167
    8b32:	91 e6       	ldi	r25, 0x61	; 97
    8b34:	21 50       	subi	r18, 0x01	; 1
    8b36:	80 40       	sbci	r24, 0x00	; 0
    8b38:	90 40       	sbci	r25, 0x00	; 0
    8b3a:	e1 f7       	brne	.-8      	; 0x8b34 <menu_set_time+0xa2>
    8b3c:	00 c0       	rjmp	.+0      	; 0x8b3e <menu_set_time+0xac>
    8b3e:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8b40:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
	rtc_update_display(5,env.time.minutes);
    8b44:	60 91 d0 2b 	lds	r22, 0x2BD0
    8b48:	85 e0       	ldi	r24, 0x05	; 5
    8b4a:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
	display_slide_in_from_right();
    8b4e:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
    8b52:	17 c0       	rjmp	.+46     	; 0x8b82 <menu_set_time+0xf0>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    8b54:	10 92 b5 2c 	sts	0x2CB5, r1
				break;
    8b58:	b6 cf       	rjmp	.-148    	; 0x8ac6 <menu_set_time+0x34>
	//ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8b5a:	83 30       	cpi	r24, 0x03	; 3
    8b5c:	d8 f0       	brcs	.+54     	; 0x8b94 <menu_set_time+0x102>
    8b5e:	83 30       	cpi	r24, 0x03	; 3
    8b60:	01 f1       	breq	.+64     	; 0x8ba2 <menu_set_time+0x110>
    8b62:	84 30       	cpi	r24, 0x04	; 4
    8b64:	09 f0       	breq	.+2      	; 0x8b68 <menu_set_time+0xd6>
    8b66:	49 c0       	rjmp	.+146    	; 0x8bfa <menu_set_time+0x168>
			case BTN4:
				display_clear_buffer();
    8b68:	0e 94 83 20 	call	0x4106	; 0x4106 <display_clear_buffer>
				display_draw_and_increment_minute();
    8b6c:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <display_draw_and_increment_minute>
    8b70:	2f ef       	ldi	r18, 0xFF	; 255
    8b72:	89 e6       	ldi	r24, 0x69	; 105
    8b74:	98 e1       	ldi	r25, 0x18	; 24
    8b76:	21 50       	subi	r18, 0x01	; 1
    8b78:	80 40       	sbci	r24, 0x00	; 0
    8b7a:	90 40       	sbci	r25, 0x00	; 0
    8b7c:	e1 f7       	brne	.-8      	; 0x8b76 <menu_set_time+0xe4>
    8b7e:	00 c0       	rjmp	.+0      	; 0x8b80 <menu_set_time+0xee>
    8b80:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
    8b82:	0e 94 a1 11 	call	0x2342	; 0x2342 <btn_check_press>
    8b86:	80 93 b5 2c 	sts	0x2CB5, r24
		switch(btn_status) {
    8b8a:	80 91 b5 2c 	lds	r24, 0x2CB5
    8b8e:	82 30       	cpi	r24, 0x02	; 2
    8b90:	21 f7       	brne	.-56     	; 0x8b5a <menu_set_time+0xc8>
    8b92:	1a c1       	rjmp	.+564    	; 0x8dc8 <menu_set_time+0x336>
    8b94:	81 30       	cpi	r24, 0x01	; 1
    8b96:	89 f5       	brne	.+98     	; 0x8bfa <menu_set_time+0x168>
				display_clear_buffer();
				display_draw_and_increment_minute();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    8b98:	0e 94 83 20 	call	0x4106	; 0x4106 <display_clear_buffer>
				display_draw_and_decrement_minute();
    8b9c:	0e 94 1c 25 	call	0x4a38	; 0x4a38 <display_draw_and_decrement_minute>
    8ba0:	e7 cf       	rjmp	.-50     	; 0x8b70 <menu_set_time+0xde>
    8ba2:	2f ef       	ldi	r18, 0xFF	; 255
    8ba4:	89 e6       	ldi	r24, 0x69	; 105
    8ba6:	98 e1       	ldi	r25, 0x18	; 24
    8ba8:	21 50       	subi	r18, 0x01	; 1
    8baa:	80 40       	sbci	r24, 0x00	; 0
    8bac:	90 40       	sbci	r25, 0x00	; 0
    8bae:	e1 f7       	brne	.-8      	; 0x8ba8 <menu_set_time+0x116>
    8bb0:	00 c0       	rjmp	.+0      	; 0x8bb2 <menu_set_time+0x120>
    8bb2:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    8bb4:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
	display_draw_four_letter_word("YEAR");
    8bb8:	85 e2       	ldi	r24, 0x25	; 37
    8bba:	98 e2       	ldi	r25, 0x28	; 40
    8bbc:	0e 94 b1 23 	call	0x4762	; 0x4762 <display_draw_four_letter_word>
	display_slide_in_from_right();
    8bc0:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
    8bc4:	2f ef       	ldi	r18, 0xFF	; 255
    8bc6:	87 ea       	ldi	r24, 0xA7	; 167
    8bc8:	91 e6       	ldi	r25, 0x61	; 97
    8bca:	21 50       	subi	r18, 0x01	; 1
    8bcc:	80 40       	sbci	r24, 0x00	; 0
    8bce:	90 40       	sbci	r25, 0x00	; 0
    8bd0:	e1 f7       	brne	.-8      	; 0x8bca <menu_set_time+0x138>
    8bd2:	00 c0       	rjmp	.+0      	; 0x8bd4 <menu_set_time+0x142>
    8bd4:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8bd6:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
	char *year = NULL;
	itoa_simple(year,env.time.year);
    8bda:	40 91 d6 2b 	lds	r20, 0x2BD6
    8bde:	50 91 d7 2b 	lds	r21, 0x2BD7
    8be2:	60 e0       	ldi	r22, 0x00	; 0
    8be4:	70 e0       	ldi	r23, 0x00	; 0
    8be6:	80 e0       	ldi	r24, 0x00	; 0
    8be8:	90 e0       	ldi	r25, 0x00	; 0
    8bea:	f7 d9       	rcall	.-3090   	; 0x7fda <itoa_simple>
	display_draw_four_letter_word(year);
    8bec:	80 e0       	ldi	r24, 0x00	; 0
    8bee:	90 e0       	ldi	r25, 0x00	; 0
    8bf0:	0e 94 b1 23 	call	0x4762	; 0x4762 <display_draw_four_letter_word>
	display_slide_in_from_right();
    8bf4:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
    8bf8:	17 c0       	rjmp	.+46     	; 0x8c28 <menu_set_time+0x196>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    8bfa:	10 92 b5 2c 	sts	0x2CB5, r1
				break;
    8bfe:	c1 cf       	rjmp	.-126    	; 0x8b82 <menu_set_time+0xf0>
	//ht1632c_blink(true);
		
	//Set year
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8c00:	83 30       	cpi	r24, 0x03	; 3
    8c02:	d8 f0       	brcs	.+54     	; 0x8c3a <menu_set_time+0x1a8>
    8c04:	83 30       	cpi	r24, 0x03	; 3
    8c06:	01 f1       	breq	.+64     	; 0x8c48 <menu_set_time+0x1b6>
    8c08:	84 30       	cpi	r24, 0x04	; 4
    8c0a:	09 f0       	breq	.+2      	; 0x8c0e <menu_set_time+0x17c>
    8c0c:	41 c0       	rjmp	.+130    	; 0x8c90 <menu_set_time+0x1fe>
			case BTN4:
				display_clear_buffer();
    8c0e:	0e 94 83 20 	call	0x4106	; 0x4106 <display_clear_buffer>
				display_draw_and_increment_year();
    8c12:	0e 94 7e 25 	call	0x4afc	; 0x4afc <display_draw_and_increment_year>
    8c16:	2f ef       	ldi	r18, 0xFF	; 255
    8c18:	89 e6       	ldi	r24, 0x69	; 105
    8c1a:	98 e1       	ldi	r25, 0x18	; 24
    8c1c:	21 50       	subi	r18, 0x01	; 1
    8c1e:	80 40       	sbci	r24, 0x00	; 0
    8c20:	90 40       	sbci	r25, 0x00	; 0
    8c22:	e1 f7       	brne	.-8      	; 0x8c1c <menu_set_time+0x18a>
    8c24:	00 c0       	rjmp	.+0      	; 0x8c26 <menu_set_time+0x194>
    8c26:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
		
	//Set year
	while(!next) {
		btn_status = btn_check_press();
    8c28:	0e 94 a1 11 	call	0x2342	; 0x2342 <btn_check_press>
    8c2c:	80 93 b5 2c 	sts	0x2CB5, r24
		switch(btn_status) {
    8c30:	80 91 b5 2c 	lds	r24, 0x2CB5
    8c34:	82 30       	cpi	r24, 0x02	; 2
    8c36:	21 f7       	brne	.-56     	; 0x8c00 <menu_set_time+0x16e>
    8c38:	c7 c0       	rjmp	.+398    	; 0x8dc8 <menu_set_time+0x336>
    8c3a:	81 30       	cpi	r24, 0x01	; 1
    8c3c:	49 f5       	brne	.+82     	; 0x8c90 <menu_set_time+0x1fe>
				display_clear_buffer();
				display_draw_and_increment_year();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    8c3e:	0e 94 83 20 	call	0x4106	; 0x4106 <display_clear_buffer>
				display_draw_and_decrement_year();
    8c42:	0e 94 8e 25 	call	0x4b1c	; 0x4b1c <display_draw_and_decrement_year>
    8c46:	e7 cf       	rjmp	.-50     	; 0x8c16 <menu_set_time+0x184>
    8c48:	2f ef       	ldi	r18, 0xFF	; 255
    8c4a:	89 e6       	ldi	r24, 0x69	; 105
    8c4c:	98 e1       	ldi	r25, 0x18	; 24
    8c4e:	21 50       	subi	r18, 0x01	; 1
    8c50:	80 40       	sbci	r24, 0x00	; 0
    8c52:	90 40       	sbci	r25, 0x00	; 0
    8c54:	e1 f7       	brne	.-8      	; 0x8c4e <menu_set_time+0x1bc>
    8c56:	00 c0       	rjmp	.+0      	; 0x8c58 <menu_set_time+0x1c6>
    8c58:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    8c5a:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
	display_draw_four_letter_word("MNTH");
    8c5e:	8a e2       	ldi	r24, 0x2A	; 42
    8c60:	98 e2       	ldi	r25, 0x28	; 40
    8c62:	0e 94 b1 23 	call	0x4762	; 0x4762 <display_draw_four_letter_word>
	display_slide_in_from_right();
    8c66:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
    8c6a:	2f ef       	ldi	r18, 0xFF	; 255
    8c6c:	87 ea       	ldi	r24, 0xA7	; 167
    8c6e:	91 e6       	ldi	r25, 0x61	; 97
    8c70:	21 50       	subi	r18, 0x01	; 1
    8c72:	80 40       	sbci	r24, 0x00	; 0
    8c74:	90 40       	sbci	r25, 0x00	; 0
    8c76:	e1 f7       	brne	.-8      	; 0x8c70 <menu_set_time+0x1de>
    8c78:	00 c0       	rjmp	.+0      	; 0x8c7a <menu_set_time+0x1e8>
    8c7a:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8c7c:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
	display_draw_three_letter_word(time_get_month_name(env.time.month));
    8c80:	80 91 d5 2b 	lds	r24, 0x2BD5
    8c84:	39 d4       	rcall	.+2162   	; 0x94f8 <time_get_month_name>
    8c86:	0e 94 da 23 	call	0x47b4	; 0x47b4 <display_draw_three_letter_word>
	display_slide_in_from_right();
    8c8a:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
    8c8e:	17 c0       	rjmp	.+46     	; 0x8cbe <menu_set_time+0x22c>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    8c90:	10 92 b5 2c 	sts	0x2CB5, r1
				break;
    8c94:	c9 cf       	rjmp	.-110    	; 0x8c28 <menu_set_time+0x196>
	//ht1632c_blink(true);
	
	//Set month
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8c96:	83 30       	cpi	r24, 0x03	; 3
    8c98:	d8 f0       	brcs	.+54     	; 0x8cd0 <menu_set_time+0x23e>
    8c9a:	83 30       	cpi	r24, 0x03	; 3
    8c9c:	01 f1       	breq	.+64     	; 0x8cde <menu_set_time+0x24c>
    8c9e:	84 30       	cpi	r24, 0x04	; 4
    8ca0:	09 f0       	breq	.+2      	; 0x8ca4 <menu_set_time+0x212>
    8ca2:	41 c0       	rjmp	.+130    	; 0x8d26 <menu_set_time+0x294>
			case BTN4:
				display_clear_buffer();
    8ca4:	0e 94 83 20 	call	0x4106	; 0x4106 <display_clear_buffer>
				display_draw_and_increment_month();
    8ca8:	0e 94 62 25 	call	0x4ac4	; 0x4ac4 <display_draw_and_increment_month>
    8cac:	2f ef       	ldi	r18, 0xFF	; 255
    8cae:	89 e6       	ldi	r24, 0x69	; 105
    8cb0:	98 e1       	ldi	r25, 0x18	; 24
    8cb2:	21 50       	subi	r18, 0x01	; 1
    8cb4:	80 40       	sbci	r24, 0x00	; 0
    8cb6:	90 40       	sbci	r25, 0x00	; 0
    8cb8:	e1 f7       	brne	.-8      	; 0x8cb2 <menu_set_time+0x220>
    8cba:	00 c0       	rjmp	.+0      	; 0x8cbc <menu_set_time+0x22a>
    8cbc:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set month
	while(!next) {
		btn_status = btn_check_press();
    8cbe:	0e 94 a1 11 	call	0x2342	; 0x2342 <btn_check_press>
    8cc2:	80 93 b5 2c 	sts	0x2CB5, r24
		switch(btn_status) {
    8cc6:	80 91 b5 2c 	lds	r24, 0x2CB5
    8cca:	82 30       	cpi	r24, 0x02	; 2
    8ccc:	21 f7       	brne	.-56     	; 0x8c96 <menu_set_time+0x204>
    8cce:	7c c0       	rjmp	.+248    	; 0x8dc8 <menu_set_time+0x336>
    8cd0:	81 30       	cpi	r24, 0x01	; 1
    8cd2:	49 f5       	brne	.+82     	; 0x8d26 <menu_set_time+0x294>
				display_clear_buffer();
				display_draw_and_increment_month();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    8cd4:	0e 94 83 20 	call	0x4106	; 0x4106 <display_clear_buffer>
				display_draw_and_decrement_month();
    8cd8:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <display_draw_and_decrement_month>
    8cdc:	e7 cf       	rjmp	.-50     	; 0x8cac <menu_set_time+0x21a>
    8cde:	2f ef       	ldi	r18, 0xFF	; 255
    8ce0:	89 e6       	ldi	r24, 0x69	; 105
    8ce2:	98 e1       	ldi	r25, 0x18	; 24
    8ce4:	21 50       	subi	r18, 0x01	; 1
    8ce6:	80 40       	sbci	r24, 0x00	; 0
    8ce8:	90 40       	sbci	r25, 0x00	; 0
    8cea:	e1 f7       	brne	.-8      	; 0x8ce4 <menu_set_time+0x252>
    8cec:	00 c0       	rjmp	.+0      	; 0x8cee <menu_set_time+0x25c>
    8cee:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    8cf0:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
	display_draw_three_letter_word("DAY");
    8cf4:	8f e2       	ldi	r24, 0x2F	; 47
    8cf6:	98 e2       	ldi	r25, 0x28	; 40
    8cf8:	0e 94 da 23 	call	0x47b4	; 0x47b4 <display_draw_three_letter_word>
	display_slide_in_from_right();
    8cfc:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
    8d00:	2f ef       	ldi	r18, 0xFF	; 255
    8d02:	87 ea       	ldi	r24, 0xA7	; 167
    8d04:	91 e6       	ldi	r25, 0x61	; 97
    8d06:	21 50       	subi	r18, 0x01	; 1
    8d08:	80 40       	sbci	r24, 0x00	; 0
    8d0a:	90 40       	sbci	r25, 0x00	; 0
    8d0c:	e1 f7       	brne	.-8      	; 0x8d06 <menu_set_time+0x274>
    8d0e:	00 c0       	rjmp	.+0      	; 0x8d10 <menu_set_time+0x27e>
    8d10:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8d12:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
	rtc_update_display(5,env.time.day);
    8d16:	60 91 d2 2b 	lds	r22, 0x2BD2
    8d1a:	85 e0       	ldi	r24, 0x05	; 5
    8d1c:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
	display_slide_in_from_right();
    8d20:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
    8d24:	17 c0       	rjmp	.+46     	; 0x8d54 <menu_set_time+0x2c2>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    8d26:	10 92 b5 2c 	sts	0x2CB5, r1
				break;
    8d2a:	c9 cf       	rjmp	.-110    	; 0x8cbe <menu_set_time+0x22c>
	//ht1632c_blink(true);
	
	//Set days
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8d2c:	83 30       	cpi	r24, 0x03	; 3
    8d2e:	d8 f0       	brcs	.+54     	; 0x8d66 <menu_set_time+0x2d4>
    8d30:	83 30       	cpi	r24, 0x03	; 3
    8d32:	01 f1       	breq	.+64     	; 0x8d74 <menu_set_time+0x2e2>
    8d34:	84 30       	cpi	r24, 0x04	; 4
    8d36:	09 f0       	breq	.+2      	; 0x8d3a <menu_set_time+0x2a8>
    8d38:	50 c0       	rjmp	.+160    	; 0x8dda <menu_set_time+0x348>
			case BTN4:
				display_clear_buffer();
    8d3a:	0e 94 83 20 	call	0x4106	; 0x4106 <display_clear_buffer>
				display_draw_and_increment_day();
    8d3e:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <display_draw_and_increment_day>
    8d42:	2f ef       	ldi	r18, 0xFF	; 255
    8d44:	89 e6       	ldi	r24, 0x69	; 105
    8d46:	98 e1       	ldi	r25, 0x18	; 24
    8d48:	21 50       	subi	r18, 0x01	; 1
    8d4a:	80 40       	sbci	r24, 0x00	; 0
    8d4c:	90 40       	sbci	r25, 0x00	; 0
    8d4e:	e1 f7       	brne	.-8      	; 0x8d48 <menu_set_time+0x2b6>
    8d50:	00 c0       	rjmp	.+0      	; 0x8d52 <menu_set_time+0x2c0>
    8d52:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set days
	while(!next) {
		btn_status = btn_check_press();
    8d54:	0e 94 a1 11 	call	0x2342	; 0x2342 <btn_check_press>
    8d58:	80 93 b5 2c 	sts	0x2CB5, r24
		switch(btn_status) {
    8d5c:	80 91 b5 2c 	lds	r24, 0x2CB5
    8d60:	82 30       	cpi	r24, 0x02	; 2
    8d62:	21 f7       	brne	.-56     	; 0x8d2c <menu_set_time+0x29a>
    8d64:	31 c0       	rjmp	.+98     	; 0x8dc8 <menu_set_time+0x336>
    8d66:	81 30       	cpi	r24, 0x01	; 1
    8d68:	c1 f5       	brne	.+112    	; 0x8dda <menu_set_time+0x348>
				display_clear_buffer();
				display_draw_and_increment_day();
				_delay_ms(250);
				break;
			case BTN1:
				display_clear_buffer();
    8d6a:	0e 94 83 20 	call	0x4106	; 0x4106 <display_clear_buffer>
				display_draw_and_decrement_day();
    8d6e:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <display_draw_and_decrement_day>
    8d72:	e7 cf       	rjmp	.-50     	; 0x8d42 <menu_set_time+0x2b0>
    8d74:	2f ef       	ldi	r18, 0xFF	; 255
    8d76:	89 e6       	ldi	r24, 0x69	; 105
    8d78:	98 e1       	ldi	r25, 0x18	; 24
    8d7a:	21 50       	subi	r18, 0x01	; 1
    8d7c:	80 40       	sbci	r24, 0x00	; 0
    8d7e:	90 40       	sbci	r25, 0x00	; 0
    8d80:	e1 f7       	brne	.-8      	; 0x8d7a <menu_set_time+0x2e8>
    8d82:	00 c0       	rjmp	.+0      	; 0x8d84 <menu_set_time+0x2f2>
    8d84:	00 00       	nop
		}
	}
	next = false;
	
	//Calculate the rest
	env.time.weekday = time_get_weekday(env.time.day,env.time.month,env.time.year);
    8d86:	40 91 d6 2b 	lds	r20, 0x2BD6
    8d8a:	50 91 d7 2b 	lds	r21, 0x2BD7
    8d8e:	60 91 d5 2b 	lds	r22, 0x2BD5
    8d92:	80 91 d2 2b 	lds	r24, 0x2BD2
    8d96:	bf d3       	rcall	.+1918   	; 0x9516 <time_get_weekday>
    8d98:	80 93 d3 2b 	sts	0x2BD3, r24
	env.time.week = time_get_weeknumber(env.time.day,env.time.month,env.time.year);
    8d9c:	40 91 d6 2b 	lds	r20, 0x2BD6
    8da0:	50 91 d7 2b 	lds	r21, 0x2BD7
    8da4:	60 91 d5 2b 	lds	r22, 0x2BD5
    8da8:	80 91 d2 2b 	lds	r24, 0x2BD2
    8dac:	19 d4       	rcall	.+2098   	; 0x95e0 <time_get_weeknumber>
    8dae:	80 93 d4 2b 	sts	0x2BD4, r24
	
	//ht1632c_blink(false);
	EEPROM_WriteEnv();
    8db2:	0e 94 61 09 	call	0x12c2	; 0x12c2 <EEPROM_WriteEnv>
	display_slide_out_to_bottom();
    8db6:	0e 94 9f 24 	call	0x493e	; 0x493e <display_slide_out_to_bottom>
	
#ifdef SHOW_MANUAL
	display_print_scrolling_text("TIME AND DATE SET",false);
    8dba:	60 e0       	ldi	r22, 0x00	; 0
    8dbc:	83 e3       	ldi	r24, 0x33	; 51
    8dbe:	98 e2       	ldi	r25, 0x28	; 40
    8dc0:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
#endif
	
	return 1;
    8dc4:	81 e0       	ldi	r24, 0x01	; 1
    8dc6:	08 95       	ret
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    8dc8:	0e 94 9f 24 	call	0x493e	; 0x493e <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    8dcc:	60 e0       	ldi	r22, 0x00	; 0
    8dce:	8b e1       	ldi	r24, 0x1B	; 27
    8dd0:	98 e2       	ldi	r25, 0x28	; 40
    8dd2:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
#endif
				return 0;
    8dd6:	80 e0       	ldi	r24, 0x00	; 0
    8dd8:	08 95       	ret
			default:
				btn_status = NO_BTN;
    8dda:	10 92 b5 2c 	sts	0x2CB5, r1
				break;
    8dde:	ba cf       	rjmp	.-140    	; 0x8d54 <menu_set_time+0x2c2>

00008de0 <menu_set_alarm>:

uint8_t menu_set_alarm(void) 
{
	bool next = false;
	
	display_draw_three_letter_word("HRS");
    8de0:	83 e1       	ldi	r24, 0x13	; 19
    8de2:	98 e2       	ldi	r25, 0x28	; 40
    8de4:	0e 94 da 23 	call	0x47b4	; 0x47b4 <display_draw_three_letter_word>
	display_slide_in_from_right();
    8de8:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
    8dec:	2f ef       	ldi	r18, 0xFF	; 255
    8dee:	87 ea       	ldi	r24, 0xA7	; 167
    8df0:	91 e6       	ldi	r25, 0x61	; 97
    8df2:	21 50       	subi	r18, 0x01	; 1
    8df4:	80 40       	sbci	r24, 0x00	; 0
    8df6:	90 40       	sbci	r25, 0x00	; 0
    8df8:	e1 f7       	brne	.-8      	; 0x8df2 <menu_set_alarm+0x12>
    8dfa:	00 c0       	rjmp	.+0      	; 0x8dfc <menu_set_alarm+0x1c>
    8dfc:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8dfe:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
	rtc_update_display(5,env.alarm.hours);
    8e02:	60 91 cd 2b 	lds	r22, 0x2BCD
    8e06:	85 e0       	ldi	r24, 0x05	; 5
    8e08:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
	display_slide_in_from_right();
    8e0c:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
    8e10:	0e 94 a1 11 	call	0x2342	; 0x2342 <btn_check_press>
    8e14:	80 93 b5 2c 	sts	0x2CB5, r24
		switch(btn_status) {
    8e18:	80 91 b5 2c 	lds	r24, 0x2CB5
    8e1c:	82 30       	cpi	r24, 0x02	; 2
    8e1e:	09 f4       	brne	.+2      	; 0x8e22 <menu_set_alarm+0x42>
    8e20:	7b c0       	rjmp	.+246    	; 0x8f18 <menu_set_alarm+0x138>
    8e22:	38 f4       	brcc	.+14     	; 0x8e32 <menu_set_alarm+0x52>
    8e24:	81 30       	cpi	r24, 0x01	; 1
    8e26:	d9 f5       	brne	.+118    	; 0x8e9e <menu_set_alarm+0xbe>
				display_clear_buffer();
				display_alarm_increment_hour();
				_delay_ms(150);
				break;
			case BTN1:
				display_clear_buffer();
    8e28:	0e 94 83 20 	call	0x4106	; 0x4106 <display_clear_buffer>
				display_alarm_decrement_hour();
    8e2c:	0e 94 da 24 	call	0x49b4	; 0x49b4 <display_alarm_decrement_hour>
    8e30:	08 c0       	rjmp	.+16     	; 0x8e42 <menu_set_alarm+0x62>
	//ht1632c_blink(true);
	
	//Set hours
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8e32:	83 30       	cpi	r24, 0x03	; 3
    8e34:	81 f0       	breq	.+32     	; 0x8e56 <menu_set_alarm+0x76>
    8e36:	84 30       	cpi	r24, 0x04	; 4
    8e38:	91 f5       	brne	.+100    	; 0x8e9e <menu_set_alarm+0xbe>
			case BTN4:
				display_clear_buffer();
    8e3a:	0e 94 83 20 	call	0x4106	; 0x4106 <display_clear_buffer>
				display_alarm_increment_hour();
    8e3e:	0e 94 c9 24 	call	0x4992	; 0x4992 <display_alarm_increment_hour>
    8e42:	2f ef       	ldi	r18, 0xFF	; 255
    8e44:	85 ea       	ldi	r24, 0xA5	; 165
    8e46:	9e e0       	ldi	r25, 0x0E	; 14
    8e48:	21 50       	subi	r18, 0x01	; 1
    8e4a:	80 40       	sbci	r24, 0x00	; 0
    8e4c:	90 40       	sbci	r25, 0x00	; 0
    8e4e:	e1 f7       	brne	.-8      	; 0x8e48 <menu_set_alarm+0x68>
    8e50:	00 c0       	rjmp	.+0      	; 0x8e52 <menu_set_alarm+0x72>
    8e52:	00 00       	nop
    8e54:	dd cf       	rjmp	.-70     	; 0x8e10 <menu_set_alarm+0x30>
    8e56:	2f ef       	ldi	r18, 0xFF	; 255
    8e58:	89 e6       	ldi	r24, 0x69	; 105
    8e5a:	98 e1       	ldi	r25, 0x18	; 24
    8e5c:	21 50       	subi	r18, 0x01	; 1
    8e5e:	80 40       	sbci	r24, 0x00	; 0
    8e60:	90 40       	sbci	r25, 0x00	; 0
    8e62:	e1 f7       	brne	.-8      	; 0x8e5c <menu_set_alarm+0x7c>
    8e64:	00 c0       	rjmp	.+0      	; 0x8e66 <menu_set_alarm+0x86>
    8e66:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	display_slide_out_to_left();
    8e68:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
	display_draw_three_letter_word("MIN");
    8e6c:	87 e1       	ldi	r24, 0x17	; 23
    8e6e:	98 e2       	ldi	r25, 0x28	; 40
    8e70:	0e 94 da 23 	call	0x47b4	; 0x47b4 <display_draw_three_letter_word>
	display_slide_in_from_right();
    8e74:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
    8e78:	2f ef       	ldi	r18, 0xFF	; 255
    8e7a:	87 ea       	ldi	r24, 0xA7	; 167
    8e7c:	91 e6       	ldi	r25, 0x61	; 97
    8e7e:	21 50       	subi	r18, 0x01	; 1
    8e80:	80 40       	sbci	r24, 0x00	; 0
    8e82:	90 40       	sbci	r25, 0x00	; 0
    8e84:	e1 f7       	brne	.-8      	; 0x8e7e <menu_set_alarm+0x9e>
    8e86:	00 c0       	rjmp	.+0      	; 0x8e88 <menu_set_alarm+0xa8>
    8e88:	00 00       	nop
	_delay_ms(1000);
	display_slide_out_to_left();
    8e8a:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
	rtc_update_display(5,env.alarm.minutes);
    8e8e:	60 91 cc 2b 	lds	r22, 0x2BCC
    8e92:	85 e0       	ldi	r24, 0x05	; 5
    8e94:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <rtc_update_display>
	display_slide_in_from_right();
    8e98:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
    8e9c:	16 c0       	rjmp	.+44     	; 0x8eca <menu_set_alarm+0xea>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
#endif
				return 0;
			default:
				btn_status = NO_BTN;
    8e9e:	10 92 b5 2c 	sts	0x2CB5, r1
				break;
    8ea2:	b6 cf       	rjmp	.-148    	; 0x8e10 <menu_set_alarm+0x30>
	//ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
		switch(btn_status) {
    8ea4:	83 30       	cpi	r24, 0x03	; 3
    8ea6:	d0 f0       	brcs	.+52     	; 0x8edc <menu_set_alarm+0xfc>
    8ea8:	83 30       	cpi	r24, 0x03	; 3
    8eaa:	f9 f0       	breq	.+62     	; 0x8eea <menu_set_alarm+0x10a>
    8eac:	84 30       	cpi	r24, 0x04	; 4
    8eae:	e9 f5       	brne	.+122    	; 0x8f2a <menu_set_alarm+0x14a>
			case BTN4:
				display_clear_buffer();
    8eb0:	0e 94 83 20 	call	0x4106	; 0x4106 <display_clear_buffer>
				display_alarm_increment_minute();
    8eb4:	0e 94 a7 24 	call	0x494e	; 0x494e <display_alarm_increment_minute>
    8eb8:	2f ef       	ldi	r18, 0xFF	; 255
    8eba:	85 ea       	ldi	r24, 0xA5	; 165
    8ebc:	9e e0       	ldi	r25, 0x0E	; 14
    8ebe:	21 50       	subi	r18, 0x01	; 1
    8ec0:	80 40       	sbci	r24, 0x00	; 0
    8ec2:	90 40       	sbci	r25, 0x00	; 0
    8ec4:	e1 f7       	brne	.-8      	; 0x8ebe <menu_set_alarm+0xde>
    8ec6:	00 c0       	rjmp	.+0      	; 0x8ec8 <menu_set_alarm+0xe8>
    8ec8:	00 00       	nop
	display_slide_in_from_right();
	//ht1632c_blink(true);
	
	//Set minutes
	while(!next) {
		btn_status = btn_check_press();
    8eca:	0e 94 a1 11 	call	0x2342	; 0x2342 <btn_check_press>
    8ece:	80 93 b5 2c 	sts	0x2CB5, r24
		switch(btn_status) {
    8ed2:	80 91 b5 2c 	lds	r24, 0x2CB5
    8ed6:	82 30       	cpi	r24, 0x02	; 2
    8ed8:	29 f7       	brne	.-54     	; 0x8ea4 <menu_set_alarm+0xc4>
    8eda:	1e c0       	rjmp	.+60     	; 0x8f18 <menu_set_alarm+0x138>
    8edc:	81 30       	cpi	r24, 0x01	; 1
    8ede:	29 f5       	brne	.+74     	; 0x8f2a <menu_set_alarm+0x14a>
				display_clear_buffer();
				display_alarm_increment_minute();
				_delay_ms(150);
				break;
			case BTN1:
				display_clear_buffer();
    8ee0:	0e 94 83 20 	call	0x4106	; 0x4106 <display_clear_buffer>
				display_alarm_decrement_minute();
    8ee4:	0e 94 b8 24 	call	0x4970	; 0x4970 <display_alarm_decrement_minute>
    8ee8:	e7 cf       	rjmp	.-50     	; 0x8eb8 <menu_set_alarm+0xd8>
    8eea:	2f ef       	ldi	r18, 0xFF	; 255
    8eec:	89 e6       	ldi	r24, 0x69	; 105
    8eee:	98 e1       	ldi	r25, 0x18	; 24
    8ef0:	21 50       	subi	r18, 0x01	; 1
    8ef2:	80 40       	sbci	r24, 0x00	; 0
    8ef4:	90 40       	sbci	r25, 0x00	; 0
    8ef6:	e1 f7       	brne	.-8      	; 0x8ef0 <menu_set_alarm+0x110>
    8ef8:	00 c0       	rjmp	.+0      	; 0x8efa <menu_set_alarm+0x11a>
    8efa:	00 00       	nop
		}
	}
	next = false;
	
	//ht1632c_blink(false);
	alarm_status = ALARM_ON;
    8efc:	81 e0       	ldi	r24, 0x01	; 1
    8efe:	80 93 b6 2c 	sts	0x2CB6, r24
	EEPROM_WriteEnv();
    8f02:	0e 94 61 09 	call	0x12c2	; 0x12c2 <EEPROM_WriteEnv>
	display_slide_out_to_bottom();
    8f06:	0e 94 9f 24 	call	0x493e	; 0x493e <display_slide_out_to_bottom>
	
#ifdef SHOW_MANUAL
	display_print_scrolling_text("ALARM SET",false);
    8f0a:	60 e0       	ldi	r22, 0x00	; 0
    8f0c:	85 e4       	ldi	r24, 0x45	; 69
    8f0e:	98 e2       	ldi	r25, 0x28	; 40
    8f10:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
#endif

	return 1;
    8f14:	81 e0       	ldi	r24, 0x01	; 1
    8f16:	08 95       	ret
				next = true;
				_delay_ms(250);
				break;
			case BTN2:
				//ht1632c_blink(false);
				display_slide_out_to_bottom();
    8f18:	0e 94 9f 24 	call	0x493e	; 0x493e <display_slide_out_to_bottom>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("CANCELLED",false);
    8f1c:	60 e0       	ldi	r22, 0x00	; 0
    8f1e:	8b e1       	ldi	r24, 0x1B	; 27
    8f20:	98 e2       	ldi	r25, 0x28	; 40
    8f22:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
#endif
				return 0;
    8f26:	80 e0       	ldi	r24, 0x00	; 0
    8f28:	08 95       	ret
			default:
				btn_status = NO_BTN;
    8f2a:	10 92 b5 2c 	sts	0x2CB5, r1
				break;
    8f2e:	cd cf       	rjmp	.-102    	; 0x8eca <menu_set_alarm+0xea>

00008f30 <menu_configuration>:
	}
	return MENU_SUCCESS;
}

menu_status_t menu_configuration(SI114X_IRQ_SAMPLE *samples) 
{	
    8f30:	ef 92       	push	r14
    8f32:	0f 93       	push	r16
    8f34:	cf 93       	push	r28
    8f36:	df 93       	push	r29
    8f38:	ec 01       	movw	r28, r24
	btn_status = btn_check_press();
    8f3a:	0e 94 a1 11 	call	0x2342	; 0x2342 <btn_check_press>
    8f3e:	80 93 b5 2c 	sts	0x2CB5, r24
	
	//Menu ID select
	if (btn_status != NO_BTN) {
    8f42:	80 91 b5 2c 	lds	r24, 0x2CB5
    8f46:	88 23       	and	r24, r24
    8f48:	d1 f0       	breq	.+52     	; 0x8f7e <menu_configuration+0x4e>
		if (btn_status == BTN1) {
    8f4a:	80 91 b5 2c 	lds	r24, 0x2CB5
    8f4e:	81 30       	cpi	r24, 0x01	; 1
    8f50:	49 f4       	brne	.+18     	; 0x8f64 <menu_configuration+0x34>
			if (env.menu_id != NUMBER_OF_CONFIG_MENUS) {
    8f52:	80 91 2e 2b 	lds	r24, 0x2B2E
    8f56:	87 30       	cpi	r24, 0x07	; 7
    8f58:	11 f0       	breq	.+4      	; 0x8f5e <menu_configuration+0x2e>
				env.menu_id++;
    8f5a:	8f 5f       	subi	r24, 0xFF	; 255
    8f5c:	0e c0       	rjmp	.+28     	; 0x8f7a <menu_configuration+0x4a>
			} else {
				env.menu_id = 0;
    8f5e:	10 92 2e 2b 	sts	0x2B2E, r1
    8f62:	0d c0       	rjmp	.+26     	; 0x8f7e <menu_configuration+0x4e>
			}
		} else if (btn_status == BTN4) {
    8f64:	80 91 b5 2c 	lds	r24, 0x2CB5
    8f68:	84 30       	cpi	r24, 0x04	; 4
    8f6a:	49 f4       	brne	.+18     	; 0x8f7e <menu_configuration+0x4e>
			if (env.menu_id != 0) {
    8f6c:	80 91 2e 2b 	lds	r24, 0x2B2E
    8f70:	88 23       	and	r24, r24
    8f72:	11 f0       	breq	.+4      	; 0x8f78 <menu_configuration+0x48>
				env.menu_id--;
    8f74:	81 50       	subi	r24, 0x01	; 1
    8f76:	01 c0       	rjmp	.+2      	; 0x8f7a <menu_configuration+0x4a>
			} else {
				env.menu_id = NUMBER_OF_CONFIG_MENUS;
    8f78:	87 e0       	ldi	r24, 0x07	; 7
    8f7a:	80 93 2e 2b 	sts	0x2B2E, r24
			}
		}
	}
	
	if (btn_status == BTN1) {
    8f7e:	80 91 b5 2c 	lds	r24, 0x2CB5
    8f82:	81 30       	cpi	r24, 0x01	; 1
    8f84:	29 f4       	brne	.+10     	; 0x8f90 <menu_configuration+0x60>
		rtc_disable_time_render();
    8f86:	0e 94 e7 12 	call	0x25ce	; 0x25ce <rtc_disable_time_render>
		display_slide_out_to_right();
    8f8a:	0e 94 81 24 	call	0x4902	; 0x4902 <display_slide_out_to_right>
    8f8e:	0f c0       	rjmp	.+30     	; 0x8fae <menu_configuration+0x7e>
	} else if (btn_status == BTN4) {
    8f90:	80 91 b5 2c 	lds	r24, 0x2CB5
    8f94:	84 30       	cpi	r24, 0x04	; 4
    8f96:	29 f4       	brne	.+10     	; 0x8fa2 <menu_configuration+0x72>
		rtc_disable_time_render();
    8f98:	0e 94 e7 12 	call	0x25ce	; 0x25ce <rtc_disable_time_render>
		display_slide_out_to_left();
    8f9c:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
    8fa0:	06 c0       	rjmp	.+12     	; 0x8fae <menu_configuration+0x7e>
	} else if (btn_status == BTN3) {
    8fa2:	80 91 b5 2c 	lds	r24, 0x2CB5
    8fa6:	83 30       	cpi	r24, 0x03	; 3
    8fa8:	11 f4       	brne	.+4      	; 0x8fae <menu_configuration+0x7e>
		display_fade_blink();
    8faa:	0e 94 bd 20 	call	0x417a	; 0x417a <display_fade_blink>
	}
	
	//Switch between menus
	if (btn_status != NO_BTN) {
    8fae:	80 91 b5 2c 	lds	r24, 0x2CB5
    8fb2:	88 23       	and	r24, r24
    8fb4:	21 f1       	breq	.+72     	; 0x8ffe <menu_configuration+0xce>
		switch(env.menu_id) {
    8fb6:	80 91 2e 2b 	lds	r24, 0x2B2E
    8fba:	90 e0       	ldi	r25, 0x00	; 0
    8fbc:	88 30       	cpi	r24, 0x08	; 8
    8fbe:	91 05       	cpc	r25, r1
    8fc0:	f0 f4       	brcc	.+60     	; 0x8ffe <menu_configuration+0xce>
    8fc2:	fc 01       	movw	r30, r24
    8fc4:	e2 50       	subi	r30, 0x02	; 2
    8fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    8fc8:	0c 94 4a 51 	jmp	0xa294	; 0xa294 <__tablejump2__>
			case CONFIG_BRIGHTNESS:
				display_draw_four_letter_word("LGHT");
    8fcc:	8f e4       	ldi	r24, 0x4F	; 79
    8fce:	98 e2       	ldi	r25, 0x28	; 40
    8fd0:	14 c0       	rjmp	.+40     	; 0x8ffa <menu_configuration+0xca>
				break;
			case CONFIG_TIME:
				display_draw_four_letter_word("TIME");
    8fd2:	80 e5       	ldi	r24, 0x50	; 80
    8fd4:	99 e2       	ldi	r25, 0x29	; 41
    8fd6:	11 c0       	rjmp	.+34     	; 0x8ffa <menu_configuration+0xca>
				break;
			case CONFIG_WIFI:
				display_draw_four_letter_word("WIFI");
    8fd8:	84 e5       	ldi	r24, 0x54	; 84
    8fda:	98 e2       	ldi	r25, 0x28	; 40
    8fdc:	0e c0       	rjmp	.+28     	; 0x8ffa <menu_configuration+0xca>
				break;
			case CONFIG_ALARM:
				display_draw_four_letter_word("ALRM");
    8fde:	89 e5       	ldi	r24, 0x59	; 89
    8fe0:	98 e2       	ldi	r25, 0x28	; 40
    8fe2:	0b c0       	rjmp	.+22     	; 0x8ffa <menu_configuration+0xca>
				break;
			case CONFIG_CALIBRATE:
				display_draw_four_letter_word("CALI");
    8fe4:	8e e5       	ldi	r24, 0x5E	; 94
    8fe6:	98 e2       	ldi	r25, 0x28	; 40
    8fe8:	08 c0       	rjmp	.+16     	; 0x8ffa <menu_configuration+0xca>
				break;
			case CONFIG_INFO:
				display_draw_four_letter_word("INFO");
    8fea:	83 e6       	ldi	r24, 0x63	; 99
    8fec:	98 e2       	ldi	r25, 0x28	; 40
    8fee:	05 c0       	rjmp	.+10     	; 0x8ffa <menu_configuration+0xca>
				break;
			case CONFIG_MUSIC:
				display_draw_four_letter_word("DEMO");
    8ff0:	88 e6       	ldi	r24, 0x68	; 104
    8ff2:	98 e2       	ldi	r25, 0x28	; 40
    8ff4:	02 c0       	rjmp	.+4      	; 0x8ffa <menu_configuration+0xca>
				break;
			case CONFIG_EXIT:
				display_draw_four_letter_word("EXIT");
    8ff6:	8e e0       	ldi	r24, 0x0E	; 14
    8ff8:	98 e2       	ldi	r25, 0x28	; 40
    8ffa:	0e 94 b1 23 	call	0x4762	; 0x4762 <display_draw_four_letter_word>
			default:
				break;
		}	
	}
	
	if (btn_status == BTN1) {
    8ffe:	80 91 b5 2c 	lds	r24, 0x2CB5
    9002:	81 30       	cpi	r24, 0x01	; 1
    9004:	19 f4       	brne	.+6      	; 0x900c <menu_configuration+0xdc>
		display_slide_in_from_left();
    9006:	0e 94 79 24 	call	0x48f2	; 0x48f2 <display_slide_in_from_left>
    900a:	06 c0       	rjmp	.+12     	; 0x9018 <menu_configuration+0xe8>
	} else if (btn_status == BTN4) {
    900c:	80 91 b5 2c 	lds	r24, 0x2CB5
    9010:	84 30       	cpi	r24, 0x04	; 4
    9012:	11 f4       	brne	.+4      	; 0x9018 <menu_configuration+0xe8>
		display_slide_in_from_right();
    9014:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
	}
	
	//Menu actions
	if (btn_status == BTN3) {
    9018:	80 91 b5 2c 	lds	r24, 0x2CB5
    901c:	83 30       	cpi	r24, 0x03	; 3
    901e:	09 f0       	breq	.+2      	; 0x9022 <menu_configuration+0xf2>
    9020:	82 c0       	rjmp	.+260    	; 0x9126 <menu_configuration+0x1f6>
		switch(env.menu_id) {
    9022:	40 91 2e 2b 	lds	r20, 0x2B2E
    9026:	50 e0       	ldi	r21, 0x00	; 0
    9028:	48 30       	cpi	r20, 0x08	; 8
    902a:	51 05       	cpc	r21, r1
    902c:	08 f0       	brcs	.+2      	; 0x9030 <menu_configuration+0x100>
    902e:	71 c0       	rjmp	.+226    	; 0x9112 <menu_configuration+0x1e2>
    9030:	fa 01       	movw	r30, r20
    9032:	ea 5f       	subi	r30, 0xFA	; 250
    9034:	fe 4f       	sbci	r31, 0xFE	; 254
    9036:	0c 94 4a 51 	jmp	0xa294	; 0xa294 <__tablejump2__>
			case CONFIG_BRIGHTNESS:
				display_slide_out_to_top();
    903a:	0e 94 91 24 	call	0x4922	; 0x4922 <display_slide_out_to_top>
				menu_configure_brightnesss();
    903e:	b5 dc       	rcall	.-1686   	; 0x89aa <menu_configure_brightnesss>
				ht1632c_set_brightness(MAX_BRIGHTNESS);
    9040:	88 e0       	ldi	r24, 0x08	; 8
    9042:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <ht1632c_set_brightness>
				break;
    9046:	65 c0       	rjmp	.+202    	; 0x9112 <menu_configuration+0x1e2>
			case CONFIG_TIME:
				display_slide_out_to_top();
    9048:	0e 94 91 24 	call	0x4922	; 0x4922 <display_slide_out_to_top>
				menu_set_time();
    904c:	22 dd       	rcall	.-1468   	; 0x8a92 <menu_set_time>
				break;
    904e:	61 c0       	rjmp	.+194    	; 0x9112 <menu_configuration+0x1e2>
			case CONFIG_WIFI:
				display_slide_out_to_top();
    9050:	0e 94 91 24 	call	0x4922	; 0x4922 <display_slide_out_to_top>
				display_print_scrolling_text("CONNECT TO AP AND ENTER THE UPCOMMING IP ADDRESS",false);
    9054:	60 e0       	ldi	r22, 0x00	; 0
    9056:	8d e6       	ldi	r24, 0x6D	; 109
    9058:	98 e2       	ldi	r25, 0x28	; 40
    905a:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
				//Feature: Should draw wifi lines on display here.
				esp8266_on();
    905e:	0e 94 b4 09 	call	0x1368	; 0x1368 <esp8266_on>
				if (esp8266_setup_webserver(false,true) == ESP8266_SUCCESS) {
    9062:	61 e0       	ldi	r22, 0x01	; 1
    9064:	80 e0       	ldi	r24, 0x00	; 0
    9066:	0e 94 27 0b 	call	0x164e	; 0x164e <esp8266_setup_webserver>
    906a:	81 30       	cpi	r24, 0x01	; 1
    906c:	19 f5       	brne	.+70     	; 0x90b4 <menu_configuration+0x184>
					start_wifi_indication();
    906e:	44 d8       	rcall	.-3960   	; 0x80f8 <start_wifi_indication>
					while(esp8266_configure_ssid_and_password() != ESP8266_TIMEOUT) {
    9070:	0e 94 91 0b 	call	0x1722	; 0x1722 <esp8266_configure_ssid_and_password>
    9074:	83 30       	cpi	r24, 0x03	; 3
    9076:	d1 f0       	breq	.+52     	; 0x90ac <menu_configuration+0x17c>
						btn_status = btn_check_press();
    9078:	0e 94 a1 11 	call	0x2342	; 0x2342 <btn_check_press>
    907c:	80 93 b5 2c 	sts	0x2CB5, r24
						if (btn_status == BTN4) {
    9080:	80 91 b5 2c 	lds	r24, 0x2CB5
    9084:	84 30       	cpi	r24, 0x04	; 4
    9086:	39 f4       	brne	.+14     	; 0x9096 <menu_configuration+0x166>
							stop_wifi_indication();
    9088:	51 d8       	rcall	.-3934   	; 0x812c <stop_wifi_indication>
#ifdef SHOW_MANUAL
							display_print_scrolling_text("CANCELLED",false);
    908a:	60 e0       	ldi	r22, 0x00	; 0
    908c:	8b e1       	ldi	r24, 0x1B	; 27
    908e:	98 e2       	ldi	r25, 0x28	; 40
    9090:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
#endif							
							break;
    9094:	0b c0       	rjmp	.+22     	; 0x90ac <menu_configuration+0x17c>
						}
						if (wdt_triggered) {
    9096:	80 91 2c 2b 	lds	r24, 0x2B2C
    909a:	88 23       	and	r24, r24
    909c:	49 f3       	breq	.-46     	; 0x9070 <menu_configuration+0x140>
							stop_wifi_indication();
    909e:	46 d8       	rcall	.-3956   	; 0x812c <stop_wifi_indication>
#ifdef SHOW_MANUAL
							display_print_scrolling_text("SOMETHING WENT WRONG",false);
    90a0:	60 e0       	ldi	r22, 0x00	; 0
    90a2:	8e e9       	ldi	r24, 0x9E	; 158
    90a4:	98 e2       	ldi	r25, 0x28	; 40
    90a6:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
    90aa:	e2 cf       	rjmp	.-60     	; 0x9070 <menu_configuration+0x140>
#endif
						}
					}
					EEPROM_WriteEnv();
    90ac:	0e 94 61 09 	call	0x12c2	; 0x12c2 <EEPROM_WriteEnv>
					stop_wifi_indication();
    90b0:	3d d8       	rcall	.-3974   	; 0x812c <stop_wifi_indication>
    90b2:	05 c0       	rjmp	.+10     	; 0x90be <menu_configuration+0x18e>
				} else {
#ifdef SHOW_MANUAL
					display_print_scrolling_text("COULD NOT CONFIGURE WEBSERVER",false);
    90b4:	60 e0       	ldi	r22, 0x00	; 0
    90b6:	83 eb       	ldi	r24, 0xB3	; 179
    90b8:	98 e2       	ldi	r25, 0x28	; 40
    90ba:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
#endif					
				}
				esp8266_off();
    90be:	0e 94 c6 09 	call	0x138c	; 0x138c <esp8266_off>
				break;
    90c2:	27 c0       	rjmp	.+78     	; 0x9112 <menu_configuration+0x1e2>
			case CONFIG_ALARM:
				display_slide_out_to_top();
    90c4:	0e 94 91 24 	call	0x4922	; 0x4922 <display_slide_out_to_top>
				menu_set_alarm();
    90c8:	8b de       	rcall	.-746    	; 0x8de0 <menu_set_alarm>
				break;
    90ca:	23 c0       	rjmp	.+70     	; 0x9112 <menu_configuration+0x1e2>
			case CONFIG_CALIBRATE:
				display_slide_out_to_top();
    90cc:	0e 94 91 24 	call	0x4922	; 0x4922 <display_slide_out_to_top>
				si114x_baseline_calibration(samples);
    90d0:	ce 01       	movw	r24, r28
    90d2:	0e 94 01 17 	call	0x2e02	; 0x2e02 <si114x_baseline_calibration>
				break;
    90d6:	1d c0       	rjmp	.+58     	; 0x9112 <menu_configuration+0x1e2>
			case CONFIG_INFO:
				display_slide_out_to_top();
    90d8:	0e 94 91 24 	call	0x4922	; 0x4922 <display_slide_out_to_top>
				display_print_scrolling_text("MADE BY: ERLEND HESTNES",false);
    90dc:	60 e0       	ldi	r22, 0x00	; 0
    90de:	81 ed       	ldi	r24, 0xD1	; 209
    90e0:	98 e2       	ldi	r25, 0x28	; 40
    90e2:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
				break;
    90e6:	15 c0       	rjmp	.+42     	; 0x9112 <menu_configuration+0x1e2>
			case CONFIG_MUSIC:
				display_slide_out_to_bottom();
    90e8:	0e 94 9f 24 	call	0x493e	; 0x493e <display_slide_out_to_bottom>
				display_draw_bitmap(5,4,IMG_SPEAKER_A,IMG_SPEAKER_WIDTH,IMG_SPEAKER_HEIGHT,1);
    90ec:	ee 24       	eor	r14, r14
    90ee:	e3 94       	inc	r14
    90f0:	08 e0       	ldi	r16, 0x08	; 8
    90f2:	26 e0       	ldi	r18, 0x06	; 6
    90f4:	4d e3       	ldi	r20, 0x3D	; 61
    90f6:	5d e0       	ldi	r21, 0x0D	; 13
    90f8:	64 e0       	ldi	r22, 0x04	; 4
    90fa:	85 e0       	ldi	r24, 0x05	; 5
    90fc:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <display_draw_bitmap>
				display_slide_in_from_bottom();
    9100:	0e 94 7d 24 	call	0x48fa	; 0x48fa <display_slide_in_from_bottom>
				play_sound();
    9104:	0e 94 4c 40 	call	0x8098	; 0x8098 <play_sound>
				break;
    9108:	04 c0       	rjmp	.+8      	; 0x9112 <menu_configuration+0x1e2>
			case CONFIG_EXIT:
				display_slide_out_to_bottom();
    910a:	0e 94 9f 24 	call	0x493e	; 0x493e <display_slide_out_to_bottom>
				return MENU_CLOSE;
    910e:	82 e0       	ldi	r24, 0x02	; 2
    9110:	0b c0       	rjmp	.+22     	; 0x9128 <menu_configuration+0x1f8>
			default:
				break;
		}
		env.menu_id = 0;
    9112:	10 92 2e 2b 	sts	0x2B2E, r1
		display_slide_out_to_bottom();
    9116:	0e 94 9f 24 	call	0x493e	; 0x493e <display_slide_out_to_bottom>
		display_draw_four_letter_word("<  >");
    911a:	89 ee       	ldi	r24, 0xE9	; 233
    911c:	98 e2       	ldi	r25, 0x28	; 40
    911e:	0e 94 b1 23 	call	0x4762	; 0x4762 <display_draw_four_letter_word>
		display_slide_in_from_top();
    9122:	0e 94 7f 24 	call	0x48fe	; 0x48fe <display_slide_in_from_top>
	}	
	return MENU_SUCCESS;
    9126:	81 e0       	ldi	r24, 0x01	; 1
}
    9128:	df 91       	pop	r29
    912a:	cf 91       	pop	r28
    912c:	0f 91       	pop	r16
    912e:	ef 90       	pop	r14
    9130:	08 95       	ret

00009132 <menu_state_machine>:
	rtc_enable_time_render();
	display_slide_in_from_bottom();
}

menu_status_t menu_state_machine(SI114X_IRQ_SAMPLE *samples) 
{	
    9132:	ff 92       	push	r15
    9134:	0f 93       	push	r16
    9136:	1f 93       	push	r17
    9138:	cf 93       	push	r28
    913a:	df 93       	push	r29
    913c:	cd b7       	in	r28, 0x3d	; 61
    913e:	de b7       	in	r29, 0x3e	; 62
    9140:	ed 97       	sbiw	r28, 0x3d	; 61
    9142:	cd bf       	out	0x3d, r28	; 61
    9144:	de bf       	out	0x3e, r29	; 62
    9146:	8c 01       	movw	r16, r24
	//Menu ID select
	if (samples->gesture != NO_GESTURE) {
    9148:	fc 01       	movw	r30, r24
    914a:	82 89       	ldd	r24, Z+18	; 0x12
    914c:	88 23       	and	r24, r24
    914e:	e1 f0       	breq	.+56     	; 0x9188 <menu_state_machine+0x56>
		if (samples->gesture == LEFT_SWIPE) {
    9150:	82 30       	cpi	r24, 0x02	; 2
    9152:	59 f4       	brne	.+22     	; 0x916a <menu_state_machine+0x38>
			if (env.menu_id != NUMBER_OF_MENUS) {
    9154:	80 91 2e 2b 	lds	r24, 0x2B2E
    9158:	86 30       	cpi	r24, 0x06	; 6
    915a:	21 f0       	breq	.+8      	; 0x9164 <menu_state_machine+0x32>
				env.menu_id++;
    915c:	8f 5f       	subi	r24, 0xFF	; 255
    915e:	80 93 2e 2b 	sts	0x2B2E, r24
    9162:	46 c1       	rjmp	.+652    	; 0x93f0 <menu_state_machine+0x2be>
			} else {
				env.menu_id = 0;
    9164:	10 92 2e 2b 	sts	0x2B2E, r1
    9168:	43 c1       	rjmp	.+646    	; 0x93f0 <menu_state_machine+0x2be>
			}
		} else if (samples->gesture == RIGHT_SWIPE) {
    916a:	81 30       	cpi	r24, 0x01	; 1
    916c:	69 f4       	brne	.+26     	; 0x9188 <menu_state_machine+0x56>
			if (env.menu_id != 0) {
    916e:	80 91 2e 2b 	lds	r24, 0x2B2E
    9172:	88 23       	and	r24, r24
    9174:	11 f0       	breq	.+4      	; 0x917a <menu_state_machine+0x48>
				env.menu_id--;
    9176:	81 50       	subi	r24, 0x01	; 1
    9178:	01 c0       	rjmp	.+2      	; 0x917c <menu_state_machine+0x4a>
			} else {
				env.menu_id = NUMBER_OF_MENUS;
    917a:	86 e0       	ldi	r24, 0x06	; 6
    917c:	80 93 2e 2b 	sts	0x2B2E, r24
	
	if (samples->gesture == LEFT_SWIPE) {
		rtc_disable_time_render();
		display_slide_out_to_right();
	} else if (samples->gesture == RIGHT_SWIPE) {
		rtc_disable_time_render();
    9180:	0e 94 e7 12 	call	0x25ce	; 0x25ce <rtc_disable_time_render>
		display_slide_out_to_left();
    9184:	0e 94 89 24 	call	0x4912	; 0x4912 <display_slide_out_to_left>
	}
	
	//Switch between menus
	if (samples->gesture != NO_GESTURE) {
    9188:	f8 01       	movw	r30, r16
    918a:	82 89       	ldd	r24, Z+18	; 0x12
    918c:	88 23       	and	r24, r24
    918e:	c9 f0       	breq	.+50     	; 0x91c2 <menu_state_machine+0x90>
		switch(env.menu_id) {
    9190:	40 91 2e 2b 	lds	r20, 0x2B2E
    9194:	50 e0       	ldi	r21, 0x00	; 0
    9196:	47 30       	cpi	r20, 0x07	; 7
    9198:	51 05       	cpc	r21, r1
    919a:	98 f4       	brcc	.+38     	; 0x91c2 <menu_state_machine+0x90>
    919c:	fa 01       	movw	r30, r20
    919e:	e2 5f       	subi	r30, 0xF2	; 242
    91a0:	fe 4f       	sbci	r31, 0xFE	; 254
    91a2:	0c 94 4a 51 	jmp	0xa294	; 0xa294 <__tablejump2__>
			case MENU_TIME:
				rtc_enable_time_render();
    91a6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <rtc_enable_time_render>
				break;
    91aa:	0b c0       	rjmp	.+22     	; 0x91c2 <menu_state_machine+0x90>
			case MENU_DATE:
				menu_draw_date_frame();
    91ac:	d8 d9       	rcall	.-3152   	; 0x855e <menu_draw_date_frame>
				break;
    91ae:	09 c0       	rjmp	.+18     	; 0x91c2 <menu_state_machine+0x90>
			case MENU_WEEKDAY:
				menu_draw_weekday_frame();
    91b0:	ac da       	rcall	.-2728   	; 0x870a <menu_draw_weekday_frame>
				break;
    91b2:	07 c0       	rjmp	.+14     	; 0x91c2 <menu_state_machine+0x90>
			case MENU_WEEK:
				menu_draw_week_frame();
    91b4:	55 da       	rcall	.-2902   	; 0x8660 <menu_draw_week_frame>
				break;
    91b6:	05 c0       	rjmp	.+10     	; 0x91c2 <menu_state_machine+0x90>
			case MENU_TEMP:
				menu_draw_temperature_frame();
    91b8:	71 d9       	rcall	.-3358   	; 0x849c <menu_draw_temperature_frame>
				break;
    91ba:	03 c0       	rjmp	.+6      	; 0x91c2 <menu_state_machine+0x90>
			case MENU_BATTERY:
				menu_draw_battery_frame();
    91bc:	fd da       	rcall	.-2566   	; 0x87b8 <menu_draw_battery_frame>
				break;
    91be:	01 c0       	rjmp	.+2      	; 0x91c2 <menu_state_machine+0x90>
			case MENU_CONFIG:
				menu_draw_config_frame();
    91c0:	6e db       	rcall	.-2340   	; 0x889e <menu_draw_config_frame>
			default:
				break;
		}	
	}
	
	if (samples->gesture == LEFT_SWIPE) {
    91c2:	f8 01       	movw	r30, r16
    91c4:	82 89       	ldd	r24, Z+18	; 0x12
    91c6:	82 30       	cpi	r24, 0x02	; 2
    91c8:	19 f4       	brne	.+6      	; 0x91d0 <menu_state_machine+0x9e>
		display_slide_in_from_left();
    91ca:	0e 94 79 24 	call	0x48f2	; 0x48f2 <display_slide_in_from_left>
    91ce:	04 c0       	rjmp	.+8      	; 0x91d8 <menu_state_machine+0xa6>
	} else if (samples->gesture == RIGHT_SWIPE) {
    91d0:	81 30       	cpi	r24, 0x01	; 1
    91d2:	11 f4       	brne	.+4      	; 0x91d8 <menu_state_machine+0xa6>
		display_slide_in_from_right();
    91d4:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <display_slide_in_from_right>
	}

	if (samples->gesture == PAUSE) {
    91d8:	f8 01       	movw	r30, r16
    91da:	82 89       	ldd	r24, Z+18	; 0x12
    91dc:	83 30       	cpi	r24, 0x03	; 3
    91de:	09 f0       	breq	.+2      	; 0x91e2 <menu_state_machine+0xb0>
    91e0:	0c c1       	rjmp	.+536    	; 0x93fa <menu_state_machine+0x2c8>
		if (env.menu_id == MENU_CONFIG) {
    91e2:	80 91 2e 2b 	lds	r24, 0x2B2E
    91e6:	81 30       	cpi	r24, 0x01	; 1
    91e8:	99 f5       	brne	.+102    	; 0x9250 <menu_state_machine+0x11e>
			Si114xPauseAll((HANDLE)SI114X_ADDR);
    91ea:	8a e5       	ldi	r24, 0x5A	; 90
    91ec:	90 e0       	ldi	r25, 0x00	; 0
    91ee:	0e 94 40 15 	call	0x2a80	; 0x2a80 <Si114xPauseAll>
			display_fade_blink();
    91f2:	0e 94 bd 20 	call	0x417a	; 0x417a <display_fade_blink>
			display_slide_out_to_top();
    91f6:	0e 94 91 24 	call	0x4922	; 0x4922 <display_slide_out_to_top>
#ifdef SHOW_MANUAL
			display_print_scrolling_text("USE BACK BUTTONS",false);
    91fa:	60 e0       	ldi	r22, 0x00	; 0
    91fc:	8e ee       	ldi	r24, 0xEE	; 238
    91fe:	98 e2       	ldi	r25, 0x28	; 40
    9200:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
#endif
			btn_turn_on_leds(true);
    9204:	81 e0       	ldi	r24, 0x01	; 1
    9206:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <btn_turn_on_leds>
			display_draw_four_letter_word("<  >");
    920a:	89 ee       	ldi	r24, 0xE9	; 233
    920c:	98 e2       	ldi	r25, 0x28	; 40
    920e:	0e 94 b1 23 	call	0x4762	; 0x4762 <display_draw_four_letter_word>
			display_slide_in_from_bottom();
    9212:	0e 94 7d 24 	call	0x48fa	; 0x48fa <display_slide_in_from_bottom>
			env.menu_id = 0;
    9216:	10 92 2e 2b 	sts	0x2B2E, r1
			while(menu_configuration(samples) == MENU_SUCCESS);
    921a:	c8 01       	movw	r24, r16
    921c:	89 de       	rcall	.-750    	; 0x8f30 <menu_configuration>
    921e:	81 30       	cpi	r24, 0x01	; 1
    9220:	e1 f3       	breq	.-8      	; 0x921a <menu_state_machine+0xe8>
			Si114xPsAlsAuto((HANDLE)SI114X_ADDR);
    9222:	8a e5       	ldi	r24, 0x5A	; 90
    9224:	90 e0       	ldi	r25, 0x00	; 0
    9226:	0e 94 fe 14 	call	0x29fc	; 0x29fc <Si114xPsAlsAuto>
			btn_turn_on_leds(false);
    922a:	80 e0       	ldi	r24, 0x00	; 0
    922c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <btn_turn_on_leds>
			env.menu_id = 0;
    9230:	10 92 2e 2b 	sts	0x2B2E, r1
			rtc_enable_time_render();
    9234:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <rtc_enable_time_render>
			display_slide_in_from_top();
    9238:	0e 94 7f 24 	call	0x48fe	; 0x48fe <display_slide_in_from_top>
    923c:	ff ef       	ldi	r31, 0xFF	; 255
    923e:	27 ea       	ldi	r18, 0xA7	; 167
    9240:	81 e6       	ldi	r24, 0x61	; 97
    9242:	f1 50       	subi	r31, 0x01	; 1
    9244:	20 40       	sbci	r18, 0x00	; 0
    9246:	80 40       	sbci	r24, 0x00	; 0
    9248:	e1 f7       	brne	.-8      	; 0x9242 <menu_state_machine+0x110>
    924a:	00 c0       	rjmp	.+0      	; 0x924c <menu_state_machine+0x11a>
    924c:	00 00       	nop
    924e:	d5 c0       	rjmp	.+426    	; 0x93fa <menu_state_machine+0x2c8>
			//A little time to remove fingers from back buttons
			_delay_ms(1000);
		} else if (env.menu_id == MENU_TEMP) {
    9250:	83 30       	cpi	r24, 0x03	; 3
    9252:	09 f0       	breq	.+2      	; 0x9256 <menu_state_machine+0x124>
    9254:	a3 c0       	rjmp	.+326    	; 0x939c <menu_state_machine+0x26a>
			esp8266_status_t status;
			Si114xPauseAll((HANDLE)SI114X_ADDR);
    9256:	8a e5       	ldi	r24, 0x5A	; 90
    9258:	90 e0       	ldi	r25, 0x00	; 0
    925a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <Si114xPauseAll>
			display_fade_blink();
    925e:	0e 94 bd 20 	call	0x417a	; 0x417a <display_fade_blink>
			display_slide_out_to_top();
    9262:	0e 94 91 24 	call	0x4922	; 0x4922 <display_slide_out_to_top>
			
			//Weather don`t change that much
			if (timestamp == 0 || (env.runtime - timestamp > 15)) {
    9266:	40 91 28 2b 	lds	r20, 0x2B28
    926a:	50 91 29 2b 	lds	r21, 0x2B29
    926e:	60 91 2a 2b 	lds	r22, 0x2B2A
    9272:	70 91 2b 2b 	lds	r23, 0x2B2B
    9276:	41 15       	cp	r20, r1
    9278:	51 05       	cpc	r21, r1
    927a:	61 05       	cpc	r22, r1
    927c:	71 05       	cpc	r23, r1
    927e:	41 f1       	breq	.+80     	; 0x92d0 <menu_state_machine+0x19e>
    9280:	80 91 39 2b 	lds	r24, 0x2B39
    9284:	90 91 3a 2b 	lds	r25, 0x2B3A
    9288:	a0 91 3b 2b 	lds	r26, 0x2B3B
    928c:	b0 91 3c 2b 	lds	r27, 0x2B3C
    9290:	84 1b       	sub	r24, r20
    9292:	95 0b       	sbc	r25, r21
    9294:	a6 0b       	sbc	r26, r22
    9296:	b7 0b       	sbc	r27, r23
    9298:	40 97       	sbiw	r24, 0x10	; 16
    929a:	a1 05       	cpc	r26, r1
    929c:	b1 05       	cpc	r27, r1
    929e:	c0 f4       	brcc	.+48     	; 0x92d0 <menu_state_machine+0x19e>
			} else {
				status = ESP8266_SUCCESS;
			}
			
			if (status == ESP8266_SUCCESS) {
				timestamp = env.runtime; 
    92a0:	80 91 39 2b 	lds	r24, 0x2B39
    92a4:	90 91 3a 2b 	lds	r25, 0x2B3A
    92a8:	a0 91 3b 2b 	lds	r26, 0x2B3B
    92ac:	b0 91 3c 2b 	lds	r27, 0x2B3C
    92b0:	80 93 28 2b 	sts	0x2B28, r24
    92b4:	90 93 29 2b 	sts	0x2B29, r25
    92b8:	a0 93 2a 2b 	sts	0x2B2A, r26
    92bc:	b0 93 2b 2b 	sts	0x2B2B, r27
				uint8_t i = 0;
				char weather_info[60];
				strcpy(weather_info, "WEATHER FOR ");
    92c0:	6f ef       	ldi	r22, 0xFF	; 255
    92c2:	78 e2       	ldi	r23, 0x28	; 40
    92c4:	ce 01       	movw	r24, r28
    92c6:	01 96       	adiw	r24, 0x01	; 1
    92c8:	0e 94 bb 53 	call	0xa776	; 0xa776 <strcpy>
				status = ESP8266_SUCCESS;
			}
			
			if (status == ESP8266_SUCCESS) {
				timestamp = env.runtime; 
				uint8_t i = 0;
    92cc:	f1 2c       	mov	r15, r1
				char weather_info[60];
				strcpy(weather_info, "WEATHER FOR ");
				while(env.city[i]) {
    92ce:	20 c0       	rjmp	.+64     	; 0x9310 <menu_state_machine+0x1de>
			display_fade_blink();
			display_slide_out_to_top();
			
			//Weather don`t change that much
			if (timestamp == 0 || (env.runtime - timestamp > 15)) {
				start_loading();
    92d0:	0e 94 a7 40 	call	0x814e	; 0x814e <start_loading>
				esp8266_on();
    92d4:	0e 94 b4 09 	call	0x1368	; 0x1368 <esp8266_on>
				status = get_internet_variables(false,true);
    92d8:	61 e0       	ldi	r22, 0x01	; 1
    92da:	80 e0       	ldi	r24, 0x00	; 0
    92dc:	0e 94 d2 40 	call	0x81a4	; 0x81a4 <get_internet_variables>
				esp8266_off();
    92e0:	8d af       	std	Y+61, r24	; 0x3d
    92e2:	0e 94 c6 09 	call	0x138c	; 0x138c <esp8266_off>
				stop_loading();	
    92e6:	0e 94 c1 40 	call	0x8182	; 0x8182 <stop_loading>
			} else {
				status = ESP8266_SUCCESS;
			}
			
			if (status == ESP8266_SUCCESS) {
    92ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    92ec:	81 30       	cpi	r24, 0x01	; 1
    92ee:	c1 f2       	breq	.-80     	; 0x92a0 <menu_state_machine+0x16e>
#ifdef SHOW_MANUAL
				display_print_scrolling_text(weather_info, false);
#endif
				EEPROM_WriteEnv();
			} else {
				timestamp = 0;
    92f0:	10 92 28 2b 	sts	0x2B28, r1
    92f4:	10 92 29 2b 	sts	0x2B29, r1
    92f8:	10 92 2a 2b 	sts	0x2B2A, r1
    92fc:	10 92 2b 2b 	sts	0x2B2B, r1
#ifdef SHOW_MANUAL
				display_print_scrolling_text("COULD NOT GET TEMPERATURE", false);
    9300:	60 e0       	ldi	r22, 0x00	; 0
    9302:	82 e1       	ldi	r24, 0x12	; 18
    9304:	99 e2       	ldi	r25, 0x29	; 41
    9306:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
#endif
				esp8266_off();
    930a:	0e 94 c6 09 	call	0x138c	; 0x138c <esp8266_off>
    930e:	44 c0       	rjmp	.+136    	; 0x9398 <menu_state_machine+0x266>
			if (status == ESP8266_SUCCESS) {
				timestamp = env.runtime; 
				uint8_t i = 0;
				char weather_info[60];
				strcpy(weather_info, "WEATHER FOR ");
				while(env.city[i]) {
    9310:	0f 2d       	mov	r16, r15
    9312:	10 e0       	ldi	r17, 0x00	; 0
    9314:	0f 57       	subi	r16, 0x7F	; 127
    9316:	14 4d       	sbci	r17, 0xD4	; 212
    9318:	f8 01       	movw	r30, r16
    931a:	80 81       	ld	r24, Z
    931c:	88 23       	and	r24, r24
    931e:	39 f0       	breq	.+14     	; 0x932e <menu_state_machine+0x1fc>
					env.city[i] = toupper(env.city[i]);
    9320:	90 e0       	ldi	r25, 0x00	; 0
    9322:	0e 94 82 53 	call	0xa704	; 0xa704 <toupper>
    9326:	f8 01       	movw	r30, r16
    9328:	80 83       	st	Z, r24
					i++;
    932a:	f3 94       	inc	r15
    932c:	f1 cf       	rjmp	.-30     	; 0x9310 <menu_state_machine+0x1de>
				}
				strcat(weather_info,env.city);
    932e:	61 e8       	ldi	r22, 0x81	; 129
    9330:	7b e2       	ldi	r23, 0x2B	; 43
    9332:	ce 01       	movw	r24, r28
    9334:	01 96       	adiw	r24, 0x01	; 1
    9336:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
				strcat(weather_info,": ");
    933a:	6c e0       	ldi	r22, 0x0C	; 12
    933c:	79 e2       	ldi	r23, 0x29	; 41
    933e:	ce 01       	movw	r24, r28
    9340:	01 96       	adiw	r24, 0x01	; 1
    9342:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
				strcat(weather_info,env.temperature);
    9346:	66 e5       	ldi	r22, 0x56	; 86
    9348:	7b e2       	ldi	r23, 0x2B	; 43
    934a:	ce 01       	movw	r24, r28
    934c:	01 96       	adiw	r24, 0x01	; 1
    934e:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
				strcat(weather_info,"C ");
    9352:	6f e0       	ldi	r22, 0x0F	; 15
    9354:	79 e2       	ldi	r23, 0x29	; 41
    9356:	ce 01       	movw	r24, r28
    9358:	01 96       	adiw	r24, 0x01	; 1
    935a:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
				i = 0;
    935e:	f1 2c       	mov	r15, r1
				while(env.weather_info[i]) {
    9360:	0f 2d       	mov	r16, r15
    9362:	10 e0       	ldi	r17, 0x00	; 0
    9364:	03 5d       	subi	r16, 0xD3	; 211
    9366:	14 4d       	sbci	r17, 0xD4	; 212
    9368:	f8 01       	movw	r30, r16
    936a:	84 a5       	ldd	r24, Z+44	; 0x2c
    936c:	88 23       	and	r24, r24
    936e:	39 f0       	breq	.+14     	; 0x937e <menu_state_machine+0x24c>
					env.weather_info[i] = toupper(env.weather_info[i]);
    9370:	90 e0       	ldi	r25, 0x00	; 0
    9372:	0e 94 82 53 	call	0xa704	; 0xa704 <toupper>
    9376:	f8 01       	movw	r30, r16
    9378:	84 a7       	std	Z+44, r24	; 0x2c
					i++;
    937a:	f3 94       	inc	r15
    937c:	f1 cf       	rjmp	.-30     	; 0x9360 <menu_state_machine+0x22e>
				}
				strcat(weather_info,env.weather_info);
    937e:	69 e5       	ldi	r22, 0x59	; 89
    9380:	7b e2       	ldi	r23, 0x2B	; 43
    9382:	ce 01       	movw	r24, r28
    9384:	01 96       	adiw	r24, 0x01	; 1
    9386:	0e 94 a5 53 	call	0xa74a	; 0xa74a <strcat>
#ifdef SHOW_MANUAL
				display_print_scrolling_text(weather_info, false);
    938a:	60 e0       	ldi	r22, 0x00	; 0
    938c:	ce 01       	movw	r24, r28
    938e:	01 96       	adiw	r24, 0x01	; 1
    9390:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
#endif
				EEPROM_WriteEnv();
    9394:	0e 94 61 09 	call	0x12c2	; 0x12c2 <EEPROM_WriteEnv>
#ifdef SHOW_MANUAL
				display_print_scrolling_text("COULD NOT GET TEMPERATURE", false);
#endif
				esp8266_off();
			}
			menu_draw_temperature_frame();
    9398:	81 d8       	rcall	.-3838   	; 0x849c <menu_draw_temperature_frame>
    939a:	23 c0       	rjmp	.+70     	; 0x93e2 <menu_state_machine+0x2b0>
			display_slide_in_from_top();
			Si114xPsAlsAuto((HANDLE)SI114X_ADDR);
		} else if (env.menu_id == MENU_DATE) {
    939c:	85 30       	cpi	r24, 0x05	; 5
    939e:	69 f5       	brne	.+90     	; 0x93fa <menu_state_machine+0x2c8>
			esp8266_status_t status;
			Si114xPauseAll((HANDLE)SI114X_ADDR);
    93a0:	8a e5       	ldi	r24, 0x5A	; 90
    93a2:	90 e0       	ldi	r25, 0x00	; 0
    93a4:	0e 94 40 15 	call	0x2a80	; 0x2a80 <Si114xPauseAll>
			display_fade_blink();
    93a8:	0e 94 bd 20 	call	0x417a	; 0x417a <display_fade_blink>
			display_slide_out_to_top();
    93ac:	0e 94 91 24 	call	0x4922	; 0x4922 <display_slide_out_to_top>
			start_loading();
    93b0:	0e 94 a7 40 	call	0x814e	; 0x814e <start_loading>
			esp8266_on();
    93b4:	0e 94 b4 09 	call	0x1368	; 0x1368 <esp8266_on>
			status = get_internet_variables(true,false);
    93b8:	60 e0       	ldi	r22, 0x00	; 0
    93ba:	81 e0       	ldi	r24, 0x01	; 1
    93bc:	0e 94 d2 40 	call	0x81a4	; 0x81a4 <get_internet_variables>
			esp8266_off();
    93c0:	8d af       	std	Y+61, r24	; 0x3d
    93c2:	0e 94 c6 09 	call	0x138c	; 0x138c <esp8266_off>
			stop_loading();
    93c6:	0e 94 c1 40 	call	0x8182	; 0x8182 <stop_loading>
			if (status == ESP8266_SUCCESS) {
    93ca:	8d ad       	ldd	r24, Y+61	; 0x3d
				display_print_scrolling_text("TIME AND DATE UPDATED", false);
    93cc:	60 e0       	ldi	r22, 0x00	; 0
			start_loading();
			esp8266_on();
			status = get_internet_variables(true,false);
			esp8266_off();
			stop_loading();
			if (status == ESP8266_SUCCESS) {
    93ce:	81 30       	cpi	r24, 0x01	; 1
    93d0:	19 f4       	brne	.+6      	; 0x93d8 <menu_state_machine+0x2a6>
				display_print_scrolling_text("TIME AND DATE UPDATED", false);
    93d2:	8c e2       	ldi	r24, 0x2C	; 44
    93d4:	99 e2       	ldi	r25, 0x29	; 41
    93d6:	02 c0       	rjmp	.+4      	; 0x93dc <menu_state_machine+0x2aa>
			} else {
				display_print_scrolling_text("COULD NOT GET TIME",false);
    93d8:	82 e4       	ldi	r24, 0x42	; 66
    93da:	99 e2       	ldi	r25, 0x29	; 41
    93dc:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <display_print_scrolling_text>
			}
			menu_draw_date_frame();
    93e0:	be d8       	rcall	.-3716   	; 0x855e <menu_draw_date_frame>
			display_slide_in_from_top();
    93e2:	0e 94 7f 24 	call	0x48fe	; 0x48fe <display_slide_in_from_top>
			Si114xPsAlsAuto((HANDLE)SI114X_ADDR);
    93e6:	8a e5       	ldi	r24, 0x5A	; 90
    93e8:	90 e0       	ldi	r25, 0x00	; 0
    93ea:	0e 94 fe 14 	call	0x29fc	; 0x29fc <Si114xPsAlsAuto>
    93ee:	05 c0       	rjmp	.+10     	; 0x93fa <menu_state_machine+0x2c8>
			}
		}
	}
	
	if (samples->gesture == LEFT_SWIPE) {
		rtc_disable_time_render();
    93f0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <rtc_disable_time_render>
		display_slide_out_to_right();
    93f4:	0e 94 81 24 	call	0x4902	; 0x4902 <display_slide_out_to_right>
    93f8:	c7 ce       	rjmp	.-626    	; 0x9188 <menu_state_machine+0x56>
			display_slide_in_from_top();
			Si114xPsAlsAuto((HANDLE)SI114X_ADDR);
		}
	}
	return MENU_SUCCESS;
}
    93fa:	81 e0       	ldi	r24, 0x01	; 1
    93fc:	ed 96       	adiw	r28, 0x3d	; 61
    93fe:	cd bf       	out	0x3d, r28	; 61
    9400:	de bf       	out	0x3e, r29	; 62
    9402:	df 91       	pop	r29
    9404:	cf 91       	pop	r28
    9406:	1f 91       	pop	r17
    9408:	0f 91       	pop	r16
    940a:	ff 90       	pop	r15
    940c:	08 95       	ret

0000940e <__vector_16>:

	return 1;
}

ISR(TCC0_CCA_vect) 
{
    940e:	1f 92       	push	r1
    9410:	0f 92       	push	r0
    9412:	0f b6       	in	r0, 0x3f	; 63
    9414:	0f 92       	push	r0
    9416:	11 24       	eor	r1, r1
    9418:	08 b6       	in	r0, 0x38	; 56
    941a:	0f 92       	push	r0
    941c:	18 be       	out	0x38, r1	; 56
    941e:	09 b6       	in	r0, 0x39	; 57
    9420:	0f 92       	push	r0
    9422:	19 be       	out	0x39, r1	; 57
    9424:	0b b6       	in	r0, 0x3b	; 59
    9426:	0f 92       	push	r0
    9428:	1b be       	out	0x3b, r1	; 59
    942a:	2f 93       	push	r18
    942c:	3f 93       	push	r19
    942e:	4f 93       	push	r20
    9430:	5f 93       	push	r21
    9432:	6f 93       	push	r22
    9434:	7f 93       	push	r23
    9436:	8f 93       	push	r24
    9438:	9f 93       	push	r25
    943a:	af 93       	push	r26
    943c:	bf 93       	push	r27
    943e:	ef 93       	push	r30
    9440:	ff 93       	push	r31
	display_show_loading_square();
    9442:	0e 94 2f 21 	call	0x425e	; 0x425e <display_show_loading_square>
}
    9446:	ff 91       	pop	r31
    9448:	ef 91       	pop	r30
    944a:	bf 91       	pop	r27
    944c:	af 91       	pop	r26
    944e:	9f 91       	pop	r25
    9450:	8f 91       	pop	r24
    9452:	7f 91       	pop	r23
    9454:	6f 91       	pop	r22
    9456:	5f 91       	pop	r21
    9458:	4f 91       	pop	r20
    945a:	3f 91       	pop	r19
    945c:	2f 91       	pop	r18
    945e:	0f 90       	pop	r0
    9460:	0b be       	out	0x3b, r0	; 59
    9462:	0f 90       	pop	r0
    9464:	09 be       	out	0x39, r0	; 57
    9466:	0f 90       	pop	r0
    9468:	08 be       	out	0x38, r0	; 56
    946a:	0f 90       	pop	r0
    946c:	0f be       	out	0x3f, r0	; 63
    946e:	0f 90       	pop	r0
    9470:	1f 90       	pop	r1
    9472:	18 95       	reti

00009474 <__vector_19>:

ISR(TCC0_CCD_vect)
{
    9474:	1f 92       	push	r1
    9476:	0f 92       	push	r0
    9478:	0f b6       	in	r0, 0x3f	; 63
    947a:	0f 92       	push	r0
    947c:	11 24       	eor	r1, r1
    947e:	08 b6       	in	r0, 0x38	; 56
    9480:	0f 92       	push	r0
    9482:	18 be       	out	0x38, r1	; 56
    9484:	09 b6       	in	r0, 0x39	; 57
    9486:	0f 92       	push	r0
    9488:	19 be       	out	0x39, r1	; 57
    948a:	0b b6       	in	r0, 0x3b	; 59
    948c:	0f 92       	push	r0
    948e:	1b be       	out	0x3b, r1	; 59
    9490:	2f 93       	push	r18
    9492:	3f 93       	push	r19
    9494:	4f 93       	push	r20
    9496:	5f 93       	push	r21
    9498:	6f 93       	push	r22
    949a:	7f 93       	push	r23
    949c:	8f 93       	push	r24
    949e:	9f 93       	push	r25
    94a0:	af 93       	push	r26
    94a2:	bf 93       	push	r27
    94a4:	ef 93       	push	r30
    94a6:	ff 93       	push	r31
	display_draw_wifi_icon();
    94a8:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <display_draw_wifi_icon>
    94ac:	ff 91       	pop	r31
    94ae:	ef 91       	pop	r30
    94b0:	bf 91       	pop	r27
    94b2:	af 91       	pop	r26
    94b4:	9f 91       	pop	r25
    94b6:	8f 91       	pop	r24
    94b8:	7f 91       	pop	r23
    94ba:	6f 91       	pop	r22
    94bc:	5f 91       	pop	r21
    94be:	4f 91       	pop	r20
    94c0:	3f 91       	pop	r19
    94c2:	2f 91       	pop	r18
    94c4:	0f 90       	pop	r0
    94c6:	0b be       	out	0x3b, r0	; 59
    94c8:	0f 90       	pop	r0
    94ca:	09 be       	out	0x39, r0	; 57
    94cc:	0f 90       	pop	r0
    94ce:	08 be       	out	0x38, r0	; 56
    94d0:	0f 90       	pop	r0
    94d2:	0f be       	out	0x3f, r0	; 63
    94d4:	0f 90       	pop	r0
    94d6:	1f 90       	pop	r1
    94d8:	18 95       	reti

000094da <time_get_day_name>:
		days_count += time_get_days_in_month(i,year);
	}
	days_count += day;
	
	return days_count;
}
    94da:	81 50       	subi	r24, 0x01	; 1
    94dc:	88 30       	cpi	r24, 0x08	; 8
    94de:	48 f4       	brcc	.+18     	; 0x94f2 <time_get_day_name+0x18>
    94e0:	e8 2f       	mov	r30, r24
    94e2:	f0 e0       	ldi	r31, 0x00	; 0
    94e4:	ee 0f       	add	r30, r30
    94e6:	ff 1f       	adc	r31, r31
    94e8:	ee 50       	subi	r30, 0x0E	; 14
    94ea:	f6 4d       	sbci	r31, 0xD6	; 214
    94ec:	80 81       	ld	r24, Z
    94ee:	91 81       	ldd	r25, Z+1	; 0x01
    94f0:	08 95       	ret
    94f2:	85 e5       	ldi	r24, 0x55	; 85
    94f4:	99 e2       	ldi	r25, 0x29	; 41
    94f6:	08 95       	ret

000094f8 <time_get_month_name>:
    94f8:	81 50       	subi	r24, 0x01	; 1
    94fa:	8c 30       	cpi	r24, 0x0C	; 12
    94fc:	48 f4       	brcc	.+18     	; 0x9510 <time_get_month_name+0x18>
    94fe:	e8 2f       	mov	r30, r24
    9500:	f0 e0       	ldi	r31, 0x00	; 0
    9502:	ee 0f       	add	r30, r30
    9504:	ff 1f       	adc	r31, r31
    9506:	e6 52       	subi	r30, 0x26	; 38
    9508:	f6 4d       	sbci	r31, 0xD6	; 214
    950a:	80 81       	ld	r24, Z
    950c:	91 81       	ldd	r25, Z+1	; 0x01
    950e:	08 95       	ret
    9510:	85 e5       	ldi	r24, 0x55	; 85
    9512:	99 e2       	ldi	r25, 0x29	; 41
    9514:	08 95       	ret

00009516 <time_get_weekday>:
    9516:	cf 93       	push	r28
    9518:	df 93       	push	r29
    951a:	e6 2f       	mov	r30, r22
    951c:	21 e0       	ldi	r18, 0x01	; 1
    951e:	30 e0       	ldi	r19, 0x00	; 0
    9520:	63 30       	cpi	r22, 0x03	; 3
    9522:	10 f0       	brcs	.+4      	; 0x9528 <time_get_weekday+0x12>
    9524:	20 e0       	ldi	r18, 0x00	; 0
    9526:	30 e0       	ldi	r19, 0x00	; 0
    9528:	ea 01       	movw	r28, r20
    952a:	c2 1b       	sub	r28, r18
    952c:	d3 0b       	sbc	r29, r19
    952e:	9e 01       	movw	r18, r28
    9530:	28 0f       	add	r18, r24
    9532:	31 1d       	adc	r19, r1
    9534:	ce 01       	movw	r24, r28
    9536:	96 95       	lsr	r25
    9538:	87 95       	ror	r24
    953a:	96 95       	lsr	r25
    953c:	87 95       	ror	r24
    953e:	28 0f       	add	r18, r24
    9540:	39 1f       	adc	r19, r25
    9542:	ce 01       	movw	r24, r28
    9544:	60 e9       	ldi	r22, 0x90	; 144
    9546:	71 e0       	ldi	r23, 0x01	; 1
    9548:	5c d6       	rcall	.+3256   	; 0xa202 <__udivmodhi4>
    954a:	26 0f       	add	r18, r22
    954c:	37 1f       	adc	r19, r23
    954e:	f0 e0       	ldi	r31, 0x00	; 0
    9550:	ee 0f       	add	r30, r30
    9552:	ff 1f       	adc	r31, r31
    9554:	e0 50       	subi	r30, 0x00	; 0
    9556:	f6 4d       	sbci	r31, 0xD6	; 214
    9558:	80 81       	ld	r24, Z
    955a:	91 81       	ldd	r25, Z+1	; 0x01
    955c:	28 0f       	add	r18, r24
    955e:	39 1f       	adc	r19, r25
    9560:	ce 01       	movw	r24, r28
    9562:	64 e6       	ldi	r22, 0x64	; 100
    9564:	70 e0       	ldi	r23, 0x00	; 0
    9566:	4d d6       	rcall	.+3226   	; 0xa202 <__udivmodhi4>
    9568:	26 1b       	sub	r18, r22
    956a:	37 0b       	sbc	r19, r23
    956c:	c9 01       	movw	r24, r18
    956e:	67 e0       	ldi	r22, 0x07	; 7
    9570:	70 e0       	ldi	r23, 0x00	; 0
    9572:	47 d6       	rcall	.+3214   	; 0xa202 <__udivmodhi4>
    9574:	8d 52       	subi	r24, 0x2D	; 45
    9576:	96 4d       	sbci	r25, 0xD6	; 214
    9578:	fc 01       	movw	r30, r24
    957a:	80 81       	ld	r24, Z
    957c:	df 91       	pop	r29
    957e:	cf 91       	pop	r28
    9580:	08 95       	ret

00009582 <time_is_leap_year>:
    9582:	9c 01       	movw	r18, r24
    9584:	83 70       	andi	r24, 0x03	; 3
    9586:	99 27       	eor	r25, r25
    9588:	89 2b       	or	r24, r25
    958a:	31 f4       	brne	.+12     	; 0x9598 <time_is_leap_year+0x16>
    958c:	c9 01       	movw	r24, r18
    958e:	64 e6       	ldi	r22, 0x64	; 100
    9590:	70 e0       	ldi	r23, 0x00	; 0
    9592:	37 d6       	rcall	.+3182   	; 0xa202 <__udivmodhi4>
    9594:	89 2b       	or	r24, r25
    9596:	49 f4       	brne	.+18     	; 0x95aa <time_is_leap_year+0x28>
    9598:	c9 01       	movw	r24, r18
    959a:	60 e9       	ldi	r22, 0x90	; 144
    959c:	71 e0       	ldi	r23, 0x01	; 1
    959e:	31 d6       	rcall	.+3170   	; 0xa202 <__udivmodhi4>
    95a0:	21 e0       	ldi	r18, 0x01	; 1
    95a2:	89 2b       	or	r24, r25
    95a4:	19 f0       	breq	.+6      	; 0x95ac <time_is_leap_year+0x2a>
    95a6:	20 e0       	ldi	r18, 0x00	; 0
    95a8:	01 c0       	rjmp	.+2      	; 0x95ac <time_is_leap_year+0x2a>
    95aa:	21 e0       	ldi	r18, 0x01	; 1
    95ac:	82 2f       	mov	r24, r18
    95ae:	08 95       	ret

000095b0 <time_get_days_in_month>:
    95b0:	48 2f       	mov	r20, r24
    95b2:	cb 01       	movw	r24, r22
    95b4:	50 e0       	ldi	r21, 0x00	; 0
    95b6:	fa 01       	movw	r30, r20
    95b8:	31 97       	sbiw	r30, 0x01	; 1
    95ba:	ec 30       	cpi	r30, 0x0C	; 12
    95bc:	f1 05       	cpc	r31, r1
    95be:	50 f4       	brcc	.+20     	; 0x95d4 <time_get_days_in_month+0x24>
    95c0:	eb 5e       	subi	r30, 0xEB	; 235
    95c2:	fe 4f       	sbci	r31, 0xFE	; 254
    95c4:	67 c6       	rjmp	.+3278   	; 0xa294 <__tablejump2__>
    95c6:	8f e1       	ldi	r24, 0x1F	; 31
    95c8:	08 95       	ret
    95ca:	db df       	rcall	.-74     	; 0x9582 <time_is_leap_year>
    95cc:	88 23       	and	r24, r24
    95ce:	31 f0       	breq	.+12     	; 0x95dc <time_get_days_in_month+0x2c>
    95d0:	8d e1       	ldi	r24, 0x1D	; 29
    95d2:	08 95       	ret
    95d4:	80 e0       	ldi	r24, 0x00	; 0
    95d6:	08 95       	ret
    95d8:	8e e1       	ldi	r24, 0x1E	; 30
    95da:	08 95       	ret
    95dc:	8c e1       	ldi	r24, 0x1C	; 28
    95de:	08 95       	ret

000095e0 <time_get_weeknumber>:
		return false;
}

// Static Method to return ISO WeekNumber (1-53) for a given year
int16_t time_get_weeknumber(uint8_t day, uint8_t month, uint16_t year) 
{	    
    95e0:	cf 92       	push	r12
    95e2:	df 92       	push	r13
    95e4:	ef 92       	push	r14
    95e6:	ff 92       	push	r15
    95e8:	0f 93       	push	r16
    95ea:	1f 93       	push	r17
    95ec:	cf 93       	push	r28
    95ee:	df 93       	push	r29
    95f0:	cd b7       	in	r28, 0x3d	; 61
    95f2:	de b7       	in	r29, 0x3e	; 62
    95f4:	68 97       	sbiw	r28, 0x18	; 24
    95f6:	cd bf       	out	0x3d, r28	; 61
    95f8:	de bf       	out	0x3e, r29	; 62
    95fa:	7a 01       	movw	r14, r20
	int16_t yyyy = year;
	int16_t mm= month;
    95fc:	c6 2e       	mov	r12, r22
    95fe:	d1 2c       	mov	r13, r1
	int16_t day_of_year_number;
	int16_t jan_1_weekday;
	int16_t week_number = 0, weekday;
	    
	int16_t i,j,k,l,m,n;
	int16_t mnth[12] = {0,31,59,90,120,151,181,212,243,273,304,334};
    9600:	98 e1       	ldi	r25, 0x18	; 24
    9602:	ef eb       	ldi	r30, 0xBF	; 191
    9604:	f0 e2       	ldi	r31, 0x20	; 32
    9606:	de 01       	movw	r26, r28
    9608:	11 96       	adiw	r26, 0x01	; 1
    960a:	01 90       	ld	r0, Z+
    960c:	0d 92       	st	X+, r0
    960e:	9a 95       	dec	r25
    9610:	e1 f7       	brne	.-8      	; 0x960a <time_get_weeknumber+0x2a>

	int16_t year_number;
	    
	// Set DayofYear Number for yyyy mm dd
	day_of_year_number = dd + mnth[mm-1];
    9612:	f6 01       	movw	r30, r12
    9614:	31 97       	sbiw	r30, 0x01	; 1
    9616:	ee 0f       	add	r30, r30
    9618:	ff 1f       	adc	r31, r31
    961a:	21 e0       	ldi	r18, 0x01	; 1
    961c:	30 e0       	ldi	r19, 0x00	; 0
    961e:	2c 0f       	add	r18, r28
    9620:	3d 1f       	adc	r19, r29
    9622:	e2 0f       	add	r30, r18
    9624:	f3 1f       	adc	r31, r19
    9626:	00 81       	ld	r16, Z
    9628:	11 81       	ldd	r17, Z+1	; 0x01
    962a:	08 0f       	add	r16, r24
    962c:	11 1d       	adc	r17, r1

	// Increase of Dayof Year Number by 1, if year is leapyear and month is february
	if ((time_is_leap_year(yyyy) == true) && (mm == 2))
    962e:	ca 01       	movw	r24, r20
    9630:	a8 df       	rcall	.-176    	; 0x9582 <time_is_leap_year>
    9632:	48 2f       	mov	r20, r24
    9634:	88 23       	and	r24, r24
    9636:	31 f0       	breq	.+12     	; 0x9644 <time_get_weeknumber+0x64>
    9638:	32 e0       	ldi	r19, 0x02	; 2
    963a:	c3 16       	cp	r12, r19
    963c:	d1 04       	cpc	r13, r1
    963e:	11 f4       	brne	.+4      	; 0x9644 <time_get_weeknumber+0x64>
	day_of_year_number += 1;
    9640:	0f 5f       	subi	r16, 0xFF	; 255
    9642:	1f 4f       	sbci	r17, 0xFF	; 255

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
    9644:	51 e0       	ldi	r21, 0x01	; 1
    9646:	e5 1a       	sub	r14, r21
    9648:	f1 08       	sbc	r15, r1
    964a:	e4 e6       	ldi	r30, 0x64	; 100
    964c:	f0 e0       	ldi	r31, 0x00	; 0
    964e:	c7 01       	movw	r24, r14
    9650:	bf 01       	movw	r22, r30
    9652:	eb d5       	rcall	.+3030   	; 0xa22a <__divmodhi4>
    9654:	9c 01       	movw	r18, r24
	j = (yyyy - 1) - i;
    9656:	c7 01       	movw	r24, r14
    9658:	82 1b       	sub	r24, r18
    965a:	93 0b       	sbc	r25, r19
	k = i + i/4;
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    965c:	bf 01       	movw	r22, r30
    965e:	e5 d5       	rcall	.+3018   	; 0xa22a <__divmodhi4>
    9660:	cb 01       	movw	r24, r22
    9662:	64 e0       	ldi	r22, 0x04	; 4
    9664:	70 e0       	ldi	r23, 0x00	; 0
    9666:	e1 d5       	rcall	.+3010   	; 0xa22a <__divmodhi4>
    9668:	55 e0       	ldi	r21, 0x05	; 5
    966a:	58 9f       	mul	r21, r24
    966c:	b0 01       	movw	r22, r0
    966e:	59 9f       	mul	r21, r25
    9670:	70 0d       	add	r23, r0
    9672:	11 24       	eor	r1, r1
	day_of_year_number += 1;

	// Find the Jan1WeekDay for year
	i = (yyyy - 1) % 100;
	j = (yyyy - 1) - i;
	k = i + i/4;
    9674:	c9 01       	movw	r24, r18
    9676:	37 fd       	sbrc	r19, 7
    9678:	03 96       	adiw	r24, 0x03	; 3
    967a:	95 95       	asr	r25
    967c:	87 95       	ror	r24
    967e:	95 95       	asr	r25
    9680:	87 95       	ror	r24
    9682:	82 0f       	add	r24, r18
    9684:	93 1f       	adc	r25, r19
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);
    9686:	86 0f       	add	r24, r22
    9688:	97 1f       	adc	r25, r23
    968a:	27 e0       	ldi	r18, 0x07	; 7
    968c:	e2 2e       	mov	r14, r18
    968e:	f1 2c       	mov	r15, r1
    9690:	b7 01       	movw	r22, r14
    9692:	cb d5       	rcall	.+2966   	; 0xa22a <__divmodhi4>
    9694:	9c 01       	movw	r18, r24
    9696:	fc 01       	movw	r30, r24
    9698:	31 96       	adiw	r30, 0x01	; 1
	// Calcuate the WeekDay for the given date
	l = day_of_year_number + (jan_1_weekday - 1);
	weekday = 1 + ((l - 1) % 7);

	// Find if the date falls in YearNumber set WeekNumber to 52 or 53
	if ((day_of_year_number <= (8 - jan_1_weekday)) && (jan_1_weekday > 4))
    969a:	e8 1a       	sub	r14, r24
    969c:	f9 0a       	sbc	r15, r25
    969e:	e0 16       	cp	r14, r16
    96a0:	f1 06       	cpc	r15, r17
    96a2:	5c f0       	brlt	.+22     	; 0x96ba <time_get_weeknumber+0xda>
    96a4:	e5 30       	cpi	r30, 0x05	; 5
    96a6:	f1 05       	cpc	r31, r1
    96a8:	44 f0       	brlt	.+16     	; 0x96ba <time_get_weeknumber+0xda>
	{
		year_number = yyyy - 1;
		if ((jan_1_weekday == 5) || ((jan_1_weekday == 6) && (jan_1_weekday > 4)))
    96aa:	37 97       	sbiw	r30, 0x07	; 7
    96ac:	19 f4       	brne	.+6      	; 0x96b4 <time_get_weeknumber+0xd4>
		week_number = 53;
		else
		week_number = 52;
    96ae:	84 e3       	ldi	r24, 0x34	; 52
    96b0:	90 e0       	ldi	r25, 0x00	; 0
    96b2:	30 c0       	rjmp	.+96     	; 0x9714 <time_get_weeknumber+0x134>
	// Find if the date falls in YearNumber set WeekNumber to 52 or 53
	if ((day_of_year_number <= (8 - jan_1_weekday)) && (jan_1_weekday > 4))
	{
		year_number = yyyy - 1;
		if ((jan_1_weekday == 5) || ((jan_1_weekday == 6) && (jan_1_weekday > 4)))
		week_number = 53;
    96b4:	85 e3       	ldi	r24, 0x35	; 53
    96b6:	90 e0       	ldi	r25, 0x00	; 0
    96b8:	2d c0       	rjmp	.+90     	; 0x9714 <time_get_weeknumber+0x134>
	year_number = yyyy;
	    
	// Set WeekNumber to 1 to 53 if date falls in YearNumber
	if (year_number == yyyy)
	{
		if (time_is_leap_year(yyyy)==true)
    96ba:	44 23       	and	r20, r20
    96bc:	29 f0       	breq	.+10     	; 0x96c8 <time_get_weeknumber+0xe8>
		m = 366;
    96be:	ae e6       	ldi	r26, 0x6E	; 110
    96c0:	ca 2e       	mov	r12, r26
    96c2:	dd 24       	eor	r13, r13
    96c4:	d3 94       	inc	r13
    96c6:	04 c0       	rjmp	.+8      	; 0x96d0 <time_get_weeknumber+0xf0>
		else
		m = 365;
    96c8:	7d e6       	ldi	r23, 0x6D	; 109
    96ca:	c7 2e       	mov	r12, r23
    96cc:	dd 24       	eor	r13, r13
    96ce:	d3 94       	inc	r13
	j = (yyyy - 1) - i;
	k = i + i/4;
	jan_1_weekday = 1 + (((((j / 100) % 4) * 5) + k) % 7);

	// Calcuate the WeekDay for the given date
	l = day_of_year_number + (jan_1_weekday - 1);
    96d0:	c8 01       	movw	r24, r16
    96d2:	82 0f       	add	r24, r18
    96d4:	93 1f       	adc	r25, r19
	weekday = 1 + ((l - 1) % 7);
    96d6:	01 97       	sbiw	r24, 0x01	; 1
    96d8:	67 e0       	ldi	r22, 0x07	; 7
    96da:	e6 2e       	mov	r14, r22
    96dc:	f1 2c       	mov	r15, r1
    96de:	b7 01       	movw	r22, r14
    96e0:	a4 d5       	rcall	.+2888   	; 0xa22a <__divmodhi4>
	{
		if (time_is_leap_year(yyyy)==true)
		m = 366;
		else
		m = 365;
		if ((m - day_of_year_number) < (4-weekday))
    96e2:	c0 1a       	sub	r12, r16
    96e4:	d1 0a       	sbc	r13, r17
    96e6:	43 e0       	ldi	r20, 0x03	; 3
    96e8:	50 e0       	ldi	r21, 0x00	; 0
    96ea:	48 1b       	sub	r20, r24
    96ec:	59 0b       	sbc	r21, r25
    96ee:	c4 16       	cp	r12, r20
    96f0:	d5 06       	cpc	r13, r21
    96f2:	74 f0       	brlt	.+28     	; 0x9710 <time_get_weeknumber+0x130>
			week_number = 1;
		}
	}
	    
	if (year_number==yyyy) {
		n = day_of_year_number + (7 - weekday) + (jan_1_weekday -1);
    96f4:	a8 01       	movw	r20, r16
    96f6:	48 1b       	sub	r20, r24
    96f8:	59 0b       	sbc	r21, r25
    96fa:	ca 01       	movw	r24, r20
    96fc:	06 96       	adiw	r24, 0x06	; 6
    96fe:	82 0f       	add	r24, r18
    9700:	93 1f       	adc	r25, r19
		week_number = n / 7;
    9702:	b7 01       	movw	r22, r14
    9704:	92 d5       	rcall	.+2852   	; 0xa22a <__divmodhi4>
    9706:	cb 01       	movw	r24, r22
		if (jan_1_weekday > 4)
    9708:	35 97       	sbiw	r30, 0x05	; 5
    970a:	24 f0       	brlt	.+8      	; 0x9714 <time_get_weeknumber+0x134>
		week_number -= 1;
    970c:	01 97       	sbiw	r24, 0x01	; 1
    970e:	02 c0       	rjmp	.+4      	; 0x9714 <time_get_weeknumber+0x134>
		else
		m = 365;
		if ((m - day_of_year_number) < (4-weekday))
		{
			year_number = yyyy + 1;
			week_number = 1;
    9710:	81 e0       	ldi	r24, 0x01	; 1
    9712:	90 e0       	ldi	r25, 0x00	; 0
		if (jan_1_weekday > 4)
		week_number -= 1;
	}

	return (week_number);
}
    9714:	68 96       	adiw	r28, 0x18	; 24
    9716:	cd bf       	out	0x3d, r28	; 61
    9718:	de bf       	out	0x3e, r29	; 62
    971a:	df 91       	pop	r29
    971c:	cf 91       	pop	r28
    971e:	1f 91       	pop	r17
    9720:	0f 91       	pop	r16
    9722:	ff 90       	pop	r15
    9724:	ef 90       	pop	r14
    9726:	df 90       	pop	r13
    9728:	cf 90       	pop	r12
    972a:	08 95       	ret

0000972c <__subsf3>:
    972c:	50 58       	subi	r21, 0x80	; 128

0000972e <__addsf3>:
    972e:	bb 27       	eor	r27, r27
    9730:	aa 27       	eor	r26, r26
    9732:	0e d0       	rcall	.+28     	; 0x9750 <__addsf3x>
    9734:	48 c1       	rjmp	.+656    	; 0x99c6 <__fp_round>
    9736:	39 d1       	rcall	.+626    	; 0x99aa <__fp_pscA>
    9738:	30 f0       	brcs	.+12     	; 0x9746 <__addsf3+0x18>
    973a:	3e d1       	rcall	.+636    	; 0x99b8 <__fp_pscB>
    973c:	20 f0       	brcs	.+8      	; 0x9746 <__addsf3+0x18>
    973e:	31 f4       	brne	.+12     	; 0x974c <__addsf3+0x1e>
    9740:	9f 3f       	cpi	r25, 0xFF	; 255
    9742:	11 f4       	brne	.+4      	; 0x9748 <__addsf3+0x1a>
    9744:	1e f4       	brtc	.+6      	; 0x974c <__addsf3+0x1e>
    9746:	2e c1       	rjmp	.+604    	; 0x99a4 <__fp_nan>
    9748:	0e f4       	brtc	.+2      	; 0x974c <__addsf3+0x1e>
    974a:	e0 95       	com	r30
    974c:	e7 fb       	bst	r30, 7
    974e:	24 c1       	rjmp	.+584    	; 0x9998 <__fp_inf>

00009750 <__addsf3x>:
    9750:	e9 2f       	mov	r30, r25
    9752:	4a d1       	rcall	.+660    	; 0x99e8 <__fp_split3>
    9754:	80 f3       	brcs	.-32     	; 0x9736 <__addsf3+0x8>
    9756:	ba 17       	cp	r27, r26
    9758:	62 07       	cpc	r22, r18
    975a:	73 07       	cpc	r23, r19
    975c:	84 07       	cpc	r24, r20
    975e:	95 07       	cpc	r25, r21
    9760:	18 f0       	brcs	.+6      	; 0x9768 <__addsf3x+0x18>
    9762:	71 f4       	brne	.+28     	; 0x9780 <__addsf3x+0x30>
    9764:	9e f5       	brtc	.+102    	; 0x97cc <__addsf3x+0x7c>
    9766:	62 c1       	rjmp	.+708    	; 0x9a2c <__fp_zero>
    9768:	0e f4       	brtc	.+2      	; 0x976c <__addsf3x+0x1c>
    976a:	e0 95       	com	r30
    976c:	0b 2e       	mov	r0, r27
    976e:	ba 2f       	mov	r27, r26
    9770:	a0 2d       	mov	r26, r0
    9772:	0b 01       	movw	r0, r22
    9774:	b9 01       	movw	r22, r18
    9776:	90 01       	movw	r18, r0
    9778:	0c 01       	movw	r0, r24
    977a:	ca 01       	movw	r24, r20
    977c:	a0 01       	movw	r20, r0
    977e:	11 24       	eor	r1, r1
    9780:	ff 27       	eor	r31, r31
    9782:	59 1b       	sub	r21, r25
    9784:	99 f0       	breq	.+38     	; 0x97ac <__addsf3x+0x5c>
    9786:	59 3f       	cpi	r21, 0xF9	; 249
    9788:	50 f4       	brcc	.+20     	; 0x979e <__addsf3x+0x4e>
    978a:	50 3e       	cpi	r21, 0xE0	; 224
    978c:	68 f1       	brcs	.+90     	; 0x97e8 <__addsf3x+0x98>
    978e:	1a 16       	cp	r1, r26
    9790:	f0 40       	sbci	r31, 0x00	; 0
    9792:	a2 2f       	mov	r26, r18
    9794:	23 2f       	mov	r18, r19
    9796:	34 2f       	mov	r19, r20
    9798:	44 27       	eor	r20, r20
    979a:	58 5f       	subi	r21, 0xF8	; 248
    979c:	f3 cf       	rjmp	.-26     	; 0x9784 <__addsf3x+0x34>
    979e:	46 95       	lsr	r20
    97a0:	37 95       	ror	r19
    97a2:	27 95       	ror	r18
    97a4:	a7 95       	ror	r26
    97a6:	f0 40       	sbci	r31, 0x00	; 0
    97a8:	53 95       	inc	r21
    97aa:	c9 f7       	brne	.-14     	; 0x979e <__addsf3x+0x4e>
    97ac:	7e f4       	brtc	.+30     	; 0x97cc <__addsf3x+0x7c>
    97ae:	1f 16       	cp	r1, r31
    97b0:	ba 0b       	sbc	r27, r26
    97b2:	62 0b       	sbc	r22, r18
    97b4:	73 0b       	sbc	r23, r19
    97b6:	84 0b       	sbc	r24, r20
    97b8:	ba f0       	brmi	.+46     	; 0x97e8 <__addsf3x+0x98>
    97ba:	91 50       	subi	r25, 0x01	; 1
    97bc:	a1 f0       	breq	.+40     	; 0x97e6 <__addsf3x+0x96>
    97be:	ff 0f       	add	r31, r31
    97c0:	bb 1f       	adc	r27, r27
    97c2:	66 1f       	adc	r22, r22
    97c4:	77 1f       	adc	r23, r23
    97c6:	88 1f       	adc	r24, r24
    97c8:	c2 f7       	brpl	.-16     	; 0x97ba <__addsf3x+0x6a>
    97ca:	0e c0       	rjmp	.+28     	; 0x97e8 <__addsf3x+0x98>
    97cc:	ba 0f       	add	r27, r26
    97ce:	62 1f       	adc	r22, r18
    97d0:	73 1f       	adc	r23, r19
    97d2:	84 1f       	adc	r24, r20
    97d4:	48 f4       	brcc	.+18     	; 0x97e8 <__addsf3x+0x98>
    97d6:	87 95       	ror	r24
    97d8:	77 95       	ror	r23
    97da:	67 95       	ror	r22
    97dc:	b7 95       	ror	r27
    97de:	f7 95       	ror	r31
    97e0:	9e 3f       	cpi	r25, 0xFE	; 254
    97e2:	08 f0       	brcs	.+2      	; 0x97e6 <__addsf3x+0x96>
    97e4:	b3 cf       	rjmp	.-154    	; 0x974c <__addsf3+0x1e>
    97e6:	93 95       	inc	r25
    97e8:	88 0f       	add	r24, r24
    97ea:	08 f0       	brcs	.+2      	; 0x97ee <__addsf3x+0x9e>
    97ec:	99 27       	eor	r25, r25
    97ee:	ee 0f       	add	r30, r30
    97f0:	97 95       	ror	r25
    97f2:	87 95       	ror	r24
    97f4:	08 95       	ret

000097f6 <__divsf3>:
    97f6:	0c d0       	rcall	.+24     	; 0x9810 <__divsf3x>
    97f8:	e6 c0       	rjmp	.+460    	; 0x99c6 <__fp_round>
    97fa:	de d0       	rcall	.+444    	; 0x99b8 <__fp_pscB>
    97fc:	40 f0       	brcs	.+16     	; 0x980e <__divsf3+0x18>
    97fe:	d5 d0       	rcall	.+426    	; 0x99aa <__fp_pscA>
    9800:	30 f0       	brcs	.+12     	; 0x980e <__divsf3+0x18>
    9802:	21 f4       	brne	.+8      	; 0x980c <__divsf3+0x16>
    9804:	5f 3f       	cpi	r21, 0xFF	; 255
    9806:	19 f0       	breq	.+6      	; 0x980e <__divsf3+0x18>
    9808:	c7 c0       	rjmp	.+398    	; 0x9998 <__fp_inf>
    980a:	51 11       	cpse	r21, r1
    980c:	10 c1       	rjmp	.+544    	; 0x9a2e <__fp_szero>
    980e:	ca c0       	rjmp	.+404    	; 0x99a4 <__fp_nan>

00009810 <__divsf3x>:
    9810:	eb d0       	rcall	.+470    	; 0x99e8 <__fp_split3>
    9812:	98 f3       	brcs	.-26     	; 0x97fa <__divsf3+0x4>

00009814 <__divsf3_pse>:
    9814:	99 23       	and	r25, r25
    9816:	c9 f3       	breq	.-14     	; 0x980a <__divsf3+0x14>
    9818:	55 23       	and	r21, r21
    981a:	b1 f3       	breq	.-20     	; 0x9808 <__divsf3+0x12>
    981c:	95 1b       	sub	r25, r21
    981e:	55 0b       	sbc	r21, r21
    9820:	bb 27       	eor	r27, r27
    9822:	aa 27       	eor	r26, r26
    9824:	62 17       	cp	r22, r18
    9826:	73 07       	cpc	r23, r19
    9828:	84 07       	cpc	r24, r20
    982a:	38 f0       	brcs	.+14     	; 0x983a <__divsf3_pse+0x26>
    982c:	9f 5f       	subi	r25, 0xFF	; 255
    982e:	5f 4f       	sbci	r21, 0xFF	; 255
    9830:	22 0f       	add	r18, r18
    9832:	33 1f       	adc	r19, r19
    9834:	44 1f       	adc	r20, r20
    9836:	aa 1f       	adc	r26, r26
    9838:	a9 f3       	breq	.-22     	; 0x9824 <__divsf3_pse+0x10>
    983a:	33 d0       	rcall	.+102    	; 0x98a2 <__divsf3_pse+0x8e>
    983c:	0e 2e       	mov	r0, r30
    983e:	3a f0       	brmi	.+14     	; 0x984e <__divsf3_pse+0x3a>
    9840:	e0 e8       	ldi	r30, 0x80	; 128
    9842:	30 d0       	rcall	.+96     	; 0x98a4 <__divsf3_pse+0x90>
    9844:	91 50       	subi	r25, 0x01	; 1
    9846:	50 40       	sbci	r21, 0x00	; 0
    9848:	e6 95       	lsr	r30
    984a:	00 1c       	adc	r0, r0
    984c:	ca f7       	brpl	.-14     	; 0x9840 <__divsf3_pse+0x2c>
    984e:	29 d0       	rcall	.+82     	; 0x98a2 <__divsf3_pse+0x8e>
    9850:	fe 2f       	mov	r31, r30
    9852:	27 d0       	rcall	.+78     	; 0x98a2 <__divsf3_pse+0x8e>
    9854:	66 0f       	add	r22, r22
    9856:	77 1f       	adc	r23, r23
    9858:	88 1f       	adc	r24, r24
    985a:	bb 1f       	adc	r27, r27
    985c:	26 17       	cp	r18, r22
    985e:	37 07       	cpc	r19, r23
    9860:	48 07       	cpc	r20, r24
    9862:	ab 07       	cpc	r26, r27
    9864:	b0 e8       	ldi	r27, 0x80	; 128
    9866:	09 f0       	breq	.+2      	; 0x986a <__divsf3_pse+0x56>
    9868:	bb 0b       	sbc	r27, r27
    986a:	80 2d       	mov	r24, r0
    986c:	bf 01       	movw	r22, r30
    986e:	ff 27       	eor	r31, r31
    9870:	93 58       	subi	r25, 0x83	; 131
    9872:	5f 4f       	sbci	r21, 0xFF	; 255
    9874:	2a f0       	brmi	.+10     	; 0x9880 <__divsf3_pse+0x6c>
    9876:	9e 3f       	cpi	r25, 0xFE	; 254
    9878:	51 05       	cpc	r21, r1
    987a:	68 f0       	brcs	.+26     	; 0x9896 <__divsf3_pse+0x82>
    987c:	8d c0       	rjmp	.+282    	; 0x9998 <__fp_inf>
    987e:	d7 c0       	rjmp	.+430    	; 0x9a2e <__fp_szero>
    9880:	5f 3f       	cpi	r21, 0xFF	; 255
    9882:	ec f3       	brlt	.-6      	; 0x987e <__divsf3_pse+0x6a>
    9884:	98 3e       	cpi	r25, 0xE8	; 232
    9886:	dc f3       	brlt	.-10     	; 0x987e <__divsf3_pse+0x6a>
    9888:	86 95       	lsr	r24
    988a:	77 95       	ror	r23
    988c:	67 95       	ror	r22
    988e:	b7 95       	ror	r27
    9890:	f7 95       	ror	r31
    9892:	9f 5f       	subi	r25, 0xFF	; 255
    9894:	c9 f7       	brne	.-14     	; 0x9888 <__divsf3_pse+0x74>
    9896:	88 0f       	add	r24, r24
    9898:	91 1d       	adc	r25, r1
    989a:	96 95       	lsr	r25
    989c:	87 95       	ror	r24
    989e:	97 f9       	bld	r25, 7
    98a0:	08 95       	ret
    98a2:	e1 e0       	ldi	r30, 0x01	; 1
    98a4:	66 0f       	add	r22, r22
    98a6:	77 1f       	adc	r23, r23
    98a8:	88 1f       	adc	r24, r24
    98aa:	bb 1f       	adc	r27, r27
    98ac:	62 17       	cp	r22, r18
    98ae:	73 07       	cpc	r23, r19
    98b0:	84 07       	cpc	r24, r20
    98b2:	ba 07       	cpc	r27, r26
    98b4:	20 f0       	brcs	.+8      	; 0x98be <__divsf3_pse+0xaa>
    98b6:	62 1b       	sub	r22, r18
    98b8:	73 0b       	sbc	r23, r19
    98ba:	84 0b       	sbc	r24, r20
    98bc:	ba 0b       	sbc	r27, r26
    98be:	ee 1f       	adc	r30, r30
    98c0:	88 f7       	brcc	.-30     	; 0x98a4 <__divsf3_pse+0x90>
    98c2:	e0 95       	com	r30
    98c4:	08 95       	ret

000098c6 <__fixunssfsi>:
    98c6:	98 d0       	rcall	.+304    	; 0x99f8 <__fp_splitA>
    98c8:	88 f0       	brcs	.+34     	; 0x98ec <__fixunssfsi+0x26>
    98ca:	9f 57       	subi	r25, 0x7F	; 127
    98cc:	90 f0       	brcs	.+36     	; 0x98f2 <__fixunssfsi+0x2c>
    98ce:	b9 2f       	mov	r27, r25
    98d0:	99 27       	eor	r25, r25
    98d2:	b7 51       	subi	r27, 0x17	; 23
    98d4:	a0 f0       	brcs	.+40     	; 0x98fe <__fixunssfsi+0x38>
    98d6:	d1 f0       	breq	.+52     	; 0x990c <__fixunssfsi+0x46>
    98d8:	66 0f       	add	r22, r22
    98da:	77 1f       	adc	r23, r23
    98dc:	88 1f       	adc	r24, r24
    98de:	99 1f       	adc	r25, r25
    98e0:	1a f0       	brmi	.+6      	; 0x98e8 <__fixunssfsi+0x22>
    98e2:	ba 95       	dec	r27
    98e4:	c9 f7       	brne	.-14     	; 0x98d8 <__fixunssfsi+0x12>
    98e6:	12 c0       	rjmp	.+36     	; 0x990c <__fixunssfsi+0x46>
    98e8:	b1 30       	cpi	r27, 0x01	; 1
    98ea:	81 f0       	breq	.+32     	; 0x990c <__fixunssfsi+0x46>
    98ec:	9f d0       	rcall	.+318    	; 0x9a2c <__fp_zero>
    98ee:	b1 e0       	ldi	r27, 0x01	; 1
    98f0:	08 95       	ret
    98f2:	9c c0       	rjmp	.+312    	; 0x9a2c <__fp_zero>
    98f4:	67 2f       	mov	r22, r23
    98f6:	78 2f       	mov	r23, r24
    98f8:	88 27       	eor	r24, r24
    98fa:	b8 5f       	subi	r27, 0xF8	; 248
    98fc:	39 f0       	breq	.+14     	; 0x990c <__fixunssfsi+0x46>
    98fe:	b9 3f       	cpi	r27, 0xF9	; 249
    9900:	cc f3       	brlt	.-14     	; 0x98f4 <__fixunssfsi+0x2e>
    9902:	86 95       	lsr	r24
    9904:	77 95       	ror	r23
    9906:	67 95       	ror	r22
    9908:	b3 95       	inc	r27
    990a:	d9 f7       	brne	.-10     	; 0x9902 <__fixunssfsi+0x3c>
    990c:	3e f4       	brtc	.+14     	; 0x991c <__fixunssfsi+0x56>
    990e:	90 95       	com	r25
    9910:	80 95       	com	r24
    9912:	70 95       	com	r23
    9914:	61 95       	neg	r22
    9916:	7f 4f       	sbci	r23, 0xFF	; 255
    9918:	8f 4f       	sbci	r24, 0xFF	; 255
    991a:	9f 4f       	sbci	r25, 0xFF	; 255
    991c:	08 95       	ret

0000991e <__floatunsisf>:
    991e:	e8 94       	clt
    9920:	09 c0       	rjmp	.+18     	; 0x9934 <__floatsisf+0x12>

00009922 <__floatsisf>:
    9922:	97 fb       	bst	r25, 7
    9924:	3e f4       	brtc	.+14     	; 0x9934 <__floatsisf+0x12>
    9926:	90 95       	com	r25
    9928:	80 95       	com	r24
    992a:	70 95       	com	r23
    992c:	61 95       	neg	r22
    992e:	7f 4f       	sbci	r23, 0xFF	; 255
    9930:	8f 4f       	sbci	r24, 0xFF	; 255
    9932:	9f 4f       	sbci	r25, 0xFF	; 255
    9934:	99 23       	and	r25, r25
    9936:	a9 f0       	breq	.+42     	; 0x9962 <__floatsisf+0x40>
    9938:	f9 2f       	mov	r31, r25
    993a:	96 e9       	ldi	r25, 0x96	; 150
    993c:	bb 27       	eor	r27, r27
    993e:	93 95       	inc	r25
    9940:	f6 95       	lsr	r31
    9942:	87 95       	ror	r24
    9944:	77 95       	ror	r23
    9946:	67 95       	ror	r22
    9948:	b7 95       	ror	r27
    994a:	f1 11       	cpse	r31, r1
    994c:	f8 cf       	rjmp	.-16     	; 0x993e <__floatsisf+0x1c>
    994e:	fa f4       	brpl	.+62     	; 0x998e <__floatsisf+0x6c>
    9950:	bb 0f       	add	r27, r27
    9952:	11 f4       	brne	.+4      	; 0x9958 <__floatsisf+0x36>
    9954:	60 ff       	sbrs	r22, 0
    9956:	1b c0       	rjmp	.+54     	; 0x998e <__floatsisf+0x6c>
    9958:	6f 5f       	subi	r22, 0xFF	; 255
    995a:	7f 4f       	sbci	r23, 0xFF	; 255
    995c:	8f 4f       	sbci	r24, 0xFF	; 255
    995e:	9f 4f       	sbci	r25, 0xFF	; 255
    9960:	16 c0       	rjmp	.+44     	; 0x998e <__floatsisf+0x6c>
    9962:	88 23       	and	r24, r24
    9964:	11 f0       	breq	.+4      	; 0x996a <__floatsisf+0x48>
    9966:	96 e9       	ldi	r25, 0x96	; 150
    9968:	11 c0       	rjmp	.+34     	; 0x998c <__floatsisf+0x6a>
    996a:	77 23       	and	r23, r23
    996c:	21 f0       	breq	.+8      	; 0x9976 <__floatsisf+0x54>
    996e:	9e e8       	ldi	r25, 0x8E	; 142
    9970:	87 2f       	mov	r24, r23
    9972:	76 2f       	mov	r23, r22
    9974:	05 c0       	rjmp	.+10     	; 0x9980 <__floatsisf+0x5e>
    9976:	66 23       	and	r22, r22
    9978:	71 f0       	breq	.+28     	; 0x9996 <__floatsisf+0x74>
    997a:	96 e8       	ldi	r25, 0x86	; 134
    997c:	86 2f       	mov	r24, r22
    997e:	70 e0       	ldi	r23, 0x00	; 0
    9980:	60 e0       	ldi	r22, 0x00	; 0
    9982:	2a f0       	brmi	.+10     	; 0x998e <__floatsisf+0x6c>
    9984:	9a 95       	dec	r25
    9986:	66 0f       	add	r22, r22
    9988:	77 1f       	adc	r23, r23
    998a:	88 1f       	adc	r24, r24
    998c:	da f7       	brpl	.-10     	; 0x9984 <__floatsisf+0x62>
    998e:	88 0f       	add	r24, r24
    9990:	96 95       	lsr	r25
    9992:	87 95       	ror	r24
    9994:	97 f9       	bld	r25, 7
    9996:	08 95       	ret

00009998 <__fp_inf>:
    9998:	97 f9       	bld	r25, 7
    999a:	9f 67       	ori	r25, 0x7F	; 127
    999c:	80 e8       	ldi	r24, 0x80	; 128
    999e:	70 e0       	ldi	r23, 0x00	; 0
    99a0:	60 e0       	ldi	r22, 0x00	; 0
    99a2:	08 95       	ret

000099a4 <__fp_nan>:
    99a4:	9f ef       	ldi	r25, 0xFF	; 255
    99a6:	80 ec       	ldi	r24, 0xC0	; 192
    99a8:	08 95       	ret

000099aa <__fp_pscA>:
    99aa:	00 24       	eor	r0, r0
    99ac:	0a 94       	dec	r0
    99ae:	16 16       	cp	r1, r22
    99b0:	17 06       	cpc	r1, r23
    99b2:	18 06       	cpc	r1, r24
    99b4:	09 06       	cpc	r0, r25
    99b6:	08 95       	ret

000099b8 <__fp_pscB>:
    99b8:	00 24       	eor	r0, r0
    99ba:	0a 94       	dec	r0
    99bc:	12 16       	cp	r1, r18
    99be:	13 06       	cpc	r1, r19
    99c0:	14 06       	cpc	r1, r20
    99c2:	05 06       	cpc	r0, r21
    99c4:	08 95       	ret

000099c6 <__fp_round>:
    99c6:	09 2e       	mov	r0, r25
    99c8:	03 94       	inc	r0
    99ca:	00 0c       	add	r0, r0
    99cc:	11 f4       	brne	.+4      	; 0x99d2 <__fp_round+0xc>
    99ce:	88 23       	and	r24, r24
    99d0:	52 f0       	brmi	.+20     	; 0x99e6 <__fp_round+0x20>
    99d2:	bb 0f       	add	r27, r27
    99d4:	40 f4       	brcc	.+16     	; 0x99e6 <__fp_round+0x20>
    99d6:	bf 2b       	or	r27, r31
    99d8:	11 f4       	brne	.+4      	; 0x99de <__fp_round+0x18>
    99da:	60 ff       	sbrs	r22, 0
    99dc:	04 c0       	rjmp	.+8      	; 0x99e6 <__fp_round+0x20>
    99de:	6f 5f       	subi	r22, 0xFF	; 255
    99e0:	7f 4f       	sbci	r23, 0xFF	; 255
    99e2:	8f 4f       	sbci	r24, 0xFF	; 255
    99e4:	9f 4f       	sbci	r25, 0xFF	; 255
    99e6:	08 95       	ret

000099e8 <__fp_split3>:
    99e8:	57 fd       	sbrc	r21, 7
    99ea:	90 58       	subi	r25, 0x80	; 128
    99ec:	44 0f       	add	r20, r20
    99ee:	55 1f       	adc	r21, r21
    99f0:	59 f0       	breq	.+22     	; 0x9a08 <__fp_splitA+0x10>
    99f2:	5f 3f       	cpi	r21, 0xFF	; 255
    99f4:	71 f0       	breq	.+28     	; 0x9a12 <__fp_splitA+0x1a>
    99f6:	47 95       	ror	r20

000099f8 <__fp_splitA>:
    99f8:	88 0f       	add	r24, r24
    99fa:	97 fb       	bst	r25, 7
    99fc:	99 1f       	adc	r25, r25
    99fe:	61 f0       	breq	.+24     	; 0x9a18 <__fp_splitA+0x20>
    9a00:	9f 3f       	cpi	r25, 0xFF	; 255
    9a02:	79 f0       	breq	.+30     	; 0x9a22 <__fp_splitA+0x2a>
    9a04:	87 95       	ror	r24
    9a06:	08 95       	ret
    9a08:	12 16       	cp	r1, r18
    9a0a:	13 06       	cpc	r1, r19
    9a0c:	14 06       	cpc	r1, r20
    9a0e:	55 1f       	adc	r21, r21
    9a10:	f2 cf       	rjmp	.-28     	; 0x99f6 <__fp_split3+0xe>
    9a12:	46 95       	lsr	r20
    9a14:	f1 df       	rcall	.-30     	; 0x99f8 <__fp_splitA>
    9a16:	08 c0       	rjmp	.+16     	; 0x9a28 <__fp_splitA+0x30>
    9a18:	16 16       	cp	r1, r22
    9a1a:	17 06       	cpc	r1, r23
    9a1c:	18 06       	cpc	r1, r24
    9a1e:	99 1f       	adc	r25, r25
    9a20:	f1 cf       	rjmp	.-30     	; 0x9a04 <__fp_splitA+0xc>
    9a22:	86 95       	lsr	r24
    9a24:	71 05       	cpc	r23, r1
    9a26:	61 05       	cpc	r22, r1
    9a28:	08 94       	sec
    9a2a:	08 95       	ret

00009a2c <__fp_zero>:
    9a2c:	e8 94       	clt

00009a2e <__fp_szero>:
    9a2e:	bb 27       	eor	r27, r27
    9a30:	66 27       	eor	r22, r22
    9a32:	77 27       	eor	r23, r23
    9a34:	cb 01       	movw	r24, r22
    9a36:	97 f9       	bld	r25, 7
    9a38:	08 95       	ret

00009a3a <__mulsf3>:
    9a3a:	0b d0       	rcall	.+22     	; 0x9a52 <__mulsf3x>
    9a3c:	c4 cf       	rjmp	.-120    	; 0x99c6 <__fp_round>
    9a3e:	b5 df       	rcall	.-150    	; 0x99aa <__fp_pscA>
    9a40:	28 f0       	brcs	.+10     	; 0x9a4c <__mulsf3+0x12>
    9a42:	ba df       	rcall	.-140    	; 0x99b8 <__fp_pscB>
    9a44:	18 f0       	brcs	.+6      	; 0x9a4c <__mulsf3+0x12>
    9a46:	95 23       	and	r25, r21
    9a48:	09 f0       	breq	.+2      	; 0x9a4c <__mulsf3+0x12>
    9a4a:	a6 cf       	rjmp	.-180    	; 0x9998 <__fp_inf>
    9a4c:	ab cf       	rjmp	.-170    	; 0x99a4 <__fp_nan>
    9a4e:	11 24       	eor	r1, r1
    9a50:	ee cf       	rjmp	.-36     	; 0x9a2e <__fp_szero>

00009a52 <__mulsf3x>:
    9a52:	ca df       	rcall	.-108    	; 0x99e8 <__fp_split3>
    9a54:	a0 f3       	brcs	.-24     	; 0x9a3e <__mulsf3+0x4>

00009a56 <__mulsf3_pse>:
    9a56:	95 9f       	mul	r25, r21
    9a58:	d1 f3       	breq	.-12     	; 0x9a4e <__mulsf3+0x14>
    9a5a:	95 0f       	add	r25, r21
    9a5c:	50 e0       	ldi	r21, 0x00	; 0
    9a5e:	55 1f       	adc	r21, r21
    9a60:	62 9f       	mul	r22, r18
    9a62:	f0 01       	movw	r30, r0
    9a64:	72 9f       	mul	r23, r18
    9a66:	bb 27       	eor	r27, r27
    9a68:	f0 0d       	add	r31, r0
    9a6a:	b1 1d       	adc	r27, r1
    9a6c:	63 9f       	mul	r22, r19
    9a6e:	aa 27       	eor	r26, r26
    9a70:	f0 0d       	add	r31, r0
    9a72:	b1 1d       	adc	r27, r1
    9a74:	aa 1f       	adc	r26, r26
    9a76:	64 9f       	mul	r22, r20
    9a78:	66 27       	eor	r22, r22
    9a7a:	b0 0d       	add	r27, r0
    9a7c:	a1 1d       	adc	r26, r1
    9a7e:	66 1f       	adc	r22, r22
    9a80:	82 9f       	mul	r24, r18
    9a82:	22 27       	eor	r18, r18
    9a84:	b0 0d       	add	r27, r0
    9a86:	a1 1d       	adc	r26, r1
    9a88:	62 1f       	adc	r22, r18
    9a8a:	73 9f       	mul	r23, r19
    9a8c:	b0 0d       	add	r27, r0
    9a8e:	a1 1d       	adc	r26, r1
    9a90:	62 1f       	adc	r22, r18
    9a92:	83 9f       	mul	r24, r19
    9a94:	a0 0d       	add	r26, r0
    9a96:	61 1d       	adc	r22, r1
    9a98:	22 1f       	adc	r18, r18
    9a9a:	74 9f       	mul	r23, r20
    9a9c:	33 27       	eor	r19, r19
    9a9e:	a0 0d       	add	r26, r0
    9aa0:	61 1d       	adc	r22, r1
    9aa2:	23 1f       	adc	r18, r19
    9aa4:	84 9f       	mul	r24, r20
    9aa6:	60 0d       	add	r22, r0
    9aa8:	21 1d       	adc	r18, r1
    9aaa:	82 2f       	mov	r24, r18
    9aac:	76 2f       	mov	r23, r22
    9aae:	6a 2f       	mov	r22, r26
    9ab0:	11 24       	eor	r1, r1
    9ab2:	9f 57       	subi	r25, 0x7F	; 127
    9ab4:	50 40       	sbci	r21, 0x00	; 0
    9ab6:	8a f0       	brmi	.+34     	; 0x9ada <__mulsf3_pse+0x84>
    9ab8:	e1 f0       	breq	.+56     	; 0x9af2 <__mulsf3_pse+0x9c>
    9aba:	88 23       	and	r24, r24
    9abc:	4a f0       	brmi	.+18     	; 0x9ad0 <__mulsf3_pse+0x7a>
    9abe:	ee 0f       	add	r30, r30
    9ac0:	ff 1f       	adc	r31, r31
    9ac2:	bb 1f       	adc	r27, r27
    9ac4:	66 1f       	adc	r22, r22
    9ac6:	77 1f       	adc	r23, r23
    9ac8:	88 1f       	adc	r24, r24
    9aca:	91 50       	subi	r25, 0x01	; 1
    9acc:	50 40       	sbci	r21, 0x00	; 0
    9ace:	a9 f7       	brne	.-22     	; 0x9aba <__mulsf3_pse+0x64>
    9ad0:	9e 3f       	cpi	r25, 0xFE	; 254
    9ad2:	51 05       	cpc	r21, r1
    9ad4:	70 f0       	brcs	.+28     	; 0x9af2 <__mulsf3_pse+0x9c>
    9ad6:	60 cf       	rjmp	.-320    	; 0x9998 <__fp_inf>
    9ad8:	aa cf       	rjmp	.-172    	; 0x9a2e <__fp_szero>
    9ada:	5f 3f       	cpi	r21, 0xFF	; 255
    9adc:	ec f3       	brlt	.-6      	; 0x9ad8 <__mulsf3_pse+0x82>
    9ade:	98 3e       	cpi	r25, 0xE8	; 232
    9ae0:	dc f3       	brlt	.-10     	; 0x9ad8 <__mulsf3_pse+0x82>
    9ae2:	86 95       	lsr	r24
    9ae4:	77 95       	ror	r23
    9ae6:	67 95       	ror	r22
    9ae8:	b7 95       	ror	r27
    9aea:	f7 95       	ror	r31
    9aec:	e7 95       	ror	r30
    9aee:	9f 5f       	subi	r25, 0xFF	; 255
    9af0:	c1 f7       	brne	.-16     	; 0x9ae2 <__mulsf3_pse+0x8c>
    9af2:	fe 2b       	or	r31, r30
    9af4:	88 0f       	add	r24, r24
    9af6:	91 1d       	adc	r25, r1
    9af8:	96 95       	lsr	r25
    9afa:	87 95       	ror	r24
    9afc:	97 f9       	bld	r25, 7
    9afe:	08 95       	ret

00009b00 <vfprintf>:
    9b00:	2f 92       	push	r2
    9b02:	3f 92       	push	r3
    9b04:	4f 92       	push	r4
    9b06:	5f 92       	push	r5
    9b08:	6f 92       	push	r6
    9b0a:	7f 92       	push	r7
    9b0c:	8f 92       	push	r8
    9b0e:	9f 92       	push	r9
    9b10:	af 92       	push	r10
    9b12:	bf 92       	push	r11
    9b14:	cf 92       	push	r12
    9b16:	df 92       	push	r13
    9b18:	ef 92       	push	r14
    9b1a:	ff 92       	push	r15
    9b1c:	0f 93       	push	r16
    9b1e:	1f 93       	push	r17
    9b20:	cf 93       	push	r28
    9b22:	df 93       	push	r29
    9b24:	cd b7       	in	r28, 0x3d	; 61
    9b26:	de b7       	in	r29, 0x3e	; 62
    9b28:	63 97       	sbiw	r28, 0x13	; 19
    9b2a:	cd bf       	out	0x3d, r28	; 61
    9b2c:	de bf       	out	0x3e, r29	; 62
    9b2e:	7c 01       	movw	r14, r24
    9b30:	1b 01       	movw	r2, r22
    9b32:	6a 01       	movw	r12, r20
    9b34:	fc 01       	movw	r30, r24
    9b36:	16 82       	std	Z+6, r1	; 0x06
    9b38:	17 82       	std	Z+7, r1	; 0x07
    9b3a:	83 81       	ldd	r24, Z+3	; 0x03
    9b3c:	81 ff       	sbrs	r24, 1
    9b3e:	49 c3       	rjmp	.+1682   	; 0xa1d2 <vfprintf+0x6d2>
    9b40:	be 01       	movw	r22, r28
    9b42:	6f 5f       	subi	r22, 0xFF	; 255
    9b44:	7f 4f       	sbci	r23, 0xFF	; 255
    9b46:	4b 01       	movw	r8, r22
    9b48:	f7 01       	movw	r30, r14
    9b4a:	93 81       	ldd	r25, Z+3	; 0x03
    9b4c:	f1 01       	movw	r30, r2
    9b4e:	93 fd       	sbrc	r25, 3
    9b50:	85 91       	lpm	r24, Z+
    9b52:	93 ff       	sbrs	r25, 3
    9b54:	81 91       	ld	r24, Z+
    9b56:	1f 01       	movw	r2, r30
    9b58:	88 23       	and	r24, r24
    9b5a:	09 f4       	brne	.+2      	; 0x9b5e <vfprintf+0x5e>
    9b5c:	36 c3       	rjmp	.+1644   	; 0xa1ca <vfprintf+0x6ca>
    9b5e:	85 32       	cpi	r24, 0x25	; 37
    9b60:	39 f4       	brne	.+14     	; 0x9b70 <vfprintf+0x70>
    9b62:	93 fd       	sbrc	r25, 3
    9b64:	85 91       	lpm	r24, Z+
    9b66:	93 ff       	sbrs	r25, 3
    9b68:	81 91       	ld	r24, Z+
    9b6a:	1f 01       	movw	r2, r30
    9b6c:	85 32       	cpi	r24, 0x25	; 37
    9b6e:	31 f4       	brne	.+12     	; 0x9b7c <vfprintf+0x7c>
    9b70:	b7 01       	movw	r22, r14
    9b72:	90 e0       	ldi	r25, 0x00	; 0
    9b74:	69 d6       	rcall	.+3282   	; 0xa848 <fputc>
    9b76:	56 01       	movw	r10, r12
    9b78:	65 01       	movw	r12, r10
    9b7a:	e6 cf       	rjmp	.-52     	; 0x9b48 <vfprintf+0x48>
    9b7c:	10 e0       	ldi	r17, 0x00	; 0
    9b7e:	51 2c       	mov	r5, r1
    9b80:	20 e0       	ldi	r18, 0x00	; 0
    9b82:	20 32       	cpi	r18, 0x20	; 32
    9b84:	a0 f4       	brcc	.+40     	; 0x9bae <vfprintf+0xae>
    9b86:	8b 32       	cpi	r24, 0x2B	; 43
    9b88:	69 f0       	breq	.+26     	; 0x9ba4 <vfprintf+0xa4>
    9b8a:	30 f4       	brcc	.+12     	; 0x9b98 <vfprintf+0x98>
    9b8c:	80 32       	cpi	r24, 0x20	; 32
    9b8e:	59 f0       	breq	.+22     	; 0x9ba6 <vfprintf+0xa6>
    9b90:	83 32       	cpi	r24, 0x23	; 35
    9b92:	69 f4       	brne	.+26     	; 0x9bae <vfprintf+0xae>
    9b94:	20 61       	ori	r18, 0x10	; 16
    9b96:	2c c0       	rjmp	.+88     	; 0x9bf0 <vfprintf+0xf0>
    9b98:	8d 32       	cpi	r24, 0x2D	; 45
    9b9a:	39 f0       	breq	.+14     	; 0x9baa <vfprintf+0xaa>
    9b9c:	80 33       	cpi	r24, 0x30	; 48
    9b9e:	39 f4       	brne	.+14     	; 0x9bae <vfprintf+0xae>
    9ba0:	21 60       	ori	r18, 0x01	; 1
    9ba2:	26 c0       	rjmp	.+76     	; 0x9bf0 <vfprintf+0xf0>
    9ba4:	22 60       	ori	r18, 0x02	; 2
    9ba6:	24 60       	ori	r18, 0x04	; 4
    9ba8:	23 c0       	rjmp	.+70     	; 0x9bf0 <vfprintf+0xf0>
    9baa:	28 60       	ori	r18, 0x08	; 8
    9bac:	21 c0       	rjmp	.+66     	; 0x9bf0 <vfprintf+0xf0>
    9bae:	27 fd       	sbrc	r18, 7
    9bb0:	27 c0       	rjmp	.+78     	; 0x9c00 <vfprintf+0x100>
    9bb2:	30 ed       	ldi	r19, 0xD0	; 208
    9bb4:	38 0f       	add	r19, r24
    9bb6:	3a 30       	cpi	r19, 0x0A	; 10
    9bb8:	78 f4       	brcc	.+30     	; 0x9bd8 <vfprintf+0xd8>
    9bba:	26 ff       	sbrs	r18, 6
    9bbc:	06 c0       	rjmp	.+12     	; 0x9bca <vfprintf+0xca>
    9bbe:	fa e0       	ldi	r31, 0x0A	; 10
    9bc0:	1f 9f       	mul	r17, r31
    9bc2:	30 0d       	add	r19, r0
    9bc4:	11 24       	eor	r1, r1
    9bc6:	13 2f       	mov	r17, r19
    9bc8:	13 c0       	rjmp	.+38     	; 0x9bf0 <vfprintf+0xf0>
    9bca:	6a e0       	ldi	r22, 0x0A	; 10
    9bcc:	56 9e       	mul	r5, r22
    9bce:	30 0d       	add	r19, r0
    9bd0:	11 24       	eor	r1, r1
    9bd2:	53 2e       	mov	r5, r19
    9bd4:	20 62       	ori	r18, 0x20	; 32
    9bd6:	0c c0       	rjmp	.+24     	; 0x9bf0 <vfprintf+0xf0>
    9bd8:	8e 32       	cpi	r24, 0x2E	; 46
    9bda:	21 f4       	brne	.+8      	; 0x9be4 <vfprintf+0xe4>
    9bdc:	26 fd       	sbrc	r18, 6
    9bde:	f5 c2       	rjmp	.+1514   	; 0xa1ca <vfprintf+0x6ca>
    9be0:	20 64       	ori	r18, 0x40	; 64
    9be2:	06 c0       	rjmp	.+12     	; 0x9bf0 <vfprintf+0xf0>
    9be4:	8c 36       	cpi	r24, 0x6C	; 108
    9be6:	11 f4       	brne	.+4      	; 0x9bec <vfprintf+0xec>
    9be8:	20 68       	ori	r18, 0x80	; 128
    9bea:	02 c0       	rjmp	.+4      	; 0x9bf0 <vfprintf+0xf0>
    9bec:	88 36       	cpi	r24, 0x68	; 104
    9bee:	41 f4       	brne	.+16     	; 0x9c00 <vfprintf+0x100>
    9bf0:	f1 01       	movw	r30, r2
    9bf2:	93 fd       	sbrc	r25, 3
    9bf4:	85 91       	lpm	r24, Z+
    9bf6:	93 ff       	sbrs	r25, 3
    9bf8:	81 91       	ld	r24, Z+
    9bfa:	1f 01       	movw	r2, r30
    9bfc:	81 11       	cpse	r24, r1
    9bfe:	c1 cf       	rjmp	.-126    	; 0x9b82 <vfprintf+0x82>
    9c00:	9b eb       	ldi	r25, 0xBB	; 187
    9c02:	98 0f       	add	r25, r24
    9c04:	93 30       	cpi	r25, 0x03	; 3
    9c06:	18 f4       	brcc	.+6      	; 0x9c0e <vfprintf+0x10e>
    9c08:	20 61       	ori	r18, 0x10	; 16
    9c0a:	80 5e       	subi	r24, 0xE0	; 224
    9c0c:	06 c0       	rjmp	.+12     	; 0x9c1a <vfprintf+0x11a>
    9c0e:	9b e9       	ldi	r25, 0x9B	; 155
    9c10:	98 0f       	add	r25, r24
    9c12:	93 30       	cpi	r25, 0x03	; 3
    9c14:	08 f0       	brcs	.+2      	; 0x9c18 <vfprintf+0x118>
    9c16:	9a c1       	rjmp	.+820    	; 0x9f4c <vfprintf+0x44c>
    9c18:	2f 7e       	andi	r18, 0xEF	; 239
    9c1a:	26 ff       	sbrs	r18, 6
    9c1c:	16 e0       	ldi	r17, 0x06	; 6
    9c1e:	2f 73       	andi	r18, 0x3F	; 63
    9c20:	72 2e       	mov	r7, r18
    9c22:	85 36       	cpi	r24, 0x65	; 101
    9c24:	21 f4       	brne	.+8      	; 0x9c2e <vfprintf+0x12e>
    9c26:	f2 2f       	mov	r31, r18
    9c28:	f0 64       	ori	r31, 0x40	; 64
    9c2a:	7f 2e       	mov	r7, r31
    9c2c:	08 c0       	rjmp	.+16     	; 0x9c3e <vfprintf+0x13e>
    9c2e:	86 36       	cpi	r24, 0x66	; 102
    9c30:	21 f4       	brne	.+8      	; 0x9c3a <vfprintf+0x13a>
    9c32:	62 2f       	mov	r22, r18
    9c34:	60 68       	ori	r22, 0x80	; 128
    9c36:	76 2e       	mov	r7, r22
    9c38:	02 c0       	rjmp	.+4      	; 0x9c3e <vfprintf+0x13e>
    9c3a:	11 11       	cpse	r17, r1
    9c3c:	11 50       	subi	r17, 0x01	; 1
    9c3e:	77 fe       	sbrs	r7, 7
    9c40:	07 c0       	rjmp	.+14     	; 0x9c50 <vfprintf+0x150>
    9c42:	1c 33       	cpi	r17, 0x3C	; 60
    9c44:	48 f4       	brcc	.+18     	; 0x9c58 <vfprintf+0x158>
    9c46:	44 24       	eor	r4, r4
    9c48:	43 94       	inc	r4
    9c4a:	41 0e       	add	r4, r17
    9c4c:	27 e0       	ldi	r18, 0x07	; 7
    9c4e:	0b c0       	rjmp	.+22     	; 0x9c66 <vfprintf+0x166>
    9c50:	18 30       	cpi	r17, 0x08	; 8
    9c52:	30 f4       	brcc	.+12     	; 0x9c60 <vfprintf+0x160>
    9c54:	21 2f       	mov	r18, r17
    9c56:	06 c0       	rjmp	.+12     	; 0x9c64 <vfprintf+0x164>
    9c58:	27 e0       	ldi	r18, 0x07	; 7
    9c5a:	4c e3       	ldi	r20, 0x3C	; 60
    9c5c:	44 2e       	mov	r4, r20
    9c5e:	03 c0       	rjmp	.+6      	; 0x9c66 <vfprintf+0x166>
    9c60:	27 e0       	ldi	r18, 0x07	; 7
    9c62:	17 e0       	ldi	r17, 0x07	; 7
    9c64:	41 2c       	mov	r4, r1
    9c66:	56 01       	movw	r10, r12
    9c68:	74 e0       	ldi	r23, 0x04	; 4
    9c6a:	a7 0e       	add	r10, r23
    9c6c:	b1 1c       	adc	r11, r1
    9c6e:	f6 01       	movw	r30, r12
    9c70:	60 81       	ld	r22, Z
    9c72:	71 81       	ldd	r23, Z+1	; 0x01
    9c74:	82 81       	ldd	r24, Z+2	; 0x02
    9c76:	93 81       	ldd	r25, Z+3	; 0x03
    9c78:	04 2d       	mov	r16, r4
    9c7a:	a4 01       	movw	r20, r8
    9c7c:	6b d4       	rcall	.+2262   	; 0xa554 <__ftoa_engine>
    9c7e:	6c 01       	movw	r12, r24
    9c80:	09 81       	ldd	r16, Y+1	; 0x01
    9c82:	00 ff       	sbrs	r16, 0
    9c84:	02 c0       	rjmp	.+4      	; 0x9c8a <vfprintf+0x18a>
    9c86:	03 ff       	sbrs	r16, 3
    9c88:	06 c0       	rjmp	.+12     	; 0x9c96 <vfprintf+0x196>
    9c8a:	71 fc       	sbrc	r7, 1
    9c8c:	07 c0       	rjmp	.+14     	; 0x9c9c <vfprintf+0x19c>
    9c8e:	72 fc       	sbrc	r7, 2
    9c90:	08 c0       	rjmp	.+16     	; 0x9ca2 <vfprintf+0x1a2>
    9c92:	61 2c       	mov	r6, r1
    9c94:	08 c0       	rjmp	.+16     	; 0x9ca6 <vfprintf+0x1a6>
    9c96:	3d e2       	ldi	r19, 0x2D	; 45
    9c98:	63 2e       	mov	r6, r19
    9c9a:	05 c0       	rjmp	.+10     	; 0x9ca6 <vfprintf+0x1a6>
    9c9c:	2b e2       	ldi	r18, 0x2B	; 43
    9c9e:	62 2e       	mov	r6, r18
    9ca0:	02 c0       	rjmp	.+4      	; 0x9ca6 <vfprintf+0x1a6>
    9ca2:	90 e2       	ldi	r25, 0x20	; 32
    9ca4:	69 2e       	mov	r6, r25
    9ca6:	80 2f       	mov	r24, r16
    9ca8:	8c 70       	andi	r24, 0x0C	; 12
    9caa:	81 f1       	breq	.+96     	; 0x9d0c <vfprintf+0x20c>
    9cac:	66 20       	and	r6, r6
    9cae:	11 f0       	breq	.+4      	; 0x9cb4 <vfprintf+0x1b4>
    9cb0:	84 e0       	ldi	r24, 0x04	; 4
    9cb2:	01 c0       	rjmp	.+2      	; 0x9cb6 <vfprintf+0x1b6>
    9cb4:	83 e0       	ldi	r24, 0x03	; 3
    9cb6:	85 15       	cp	r24, r5
    9cb8:	10 f0       	brcs	.+4      	; 0x9cbe <vfprintf+0x1be>
    9cba:	51 2c       	mov	r5, r1
    9cbc:	0a c0       	rjmp	.+20     	; 0x9cd2 <vfprintf+0x1d2>
    9cbe:	58 1a       	sub	r5, r24
    9cc0:	73 fc       	sbrc	r7, 3
    9cc2:	07 c0       	rjmp	.+14     	; 0x9cd2 <vfprintf+0x1d2>
    9cc4:	b7 01       	movw	r22, r14
    9cc6:	80 e2       	ldi	r24, 0x20	; 32
    9cc8:	90 e0       	ldi	r25, 0x00	; 0
    9cca:	be d5       	rcall	.+2940   	; 0xa848 <fputc>
    9ccc:	5a 94       	dec	r5
    9cce:	d1 f7       	brne	.-12     	; 0x9cc4 <vfprintf+0x1c4>
    9cd0:	f4 cf       	rjmp	.-24     	; 0x9cba <vfprintf+0x1ba>
    9cd2:	66 20       	and	r6, r6
    9cd4:	21 f0       	breq	.+8      	; 0x9cde <vfprintf+0x1de>
    9cd6:	b7 01       	movw	r22, r14
    9cd8:	86 2d       	mov	r24, r6
    9cda:	90 e0       	ldi	r25, 0x00	; 0
    9cdc:	b5 d5       	rcall	.+2922   	; 0xa848 <fputc>
    9cde:	03 fd       	sbrc	r16, 3
    9ce0:	03 c0       	rjmp	.+6      	; 0x9ce8 <vfprintf+0x1e8>
    9ce2:	07 e4       	ldi	r16, 0x47	; 71
    9ce4:	1d e0       	ldi	r17, 0x0D	; 13
    9ce6:	02 c0       	rjmp	.+4      	; 0x9cec <vfprintf+0x1ec>
    9ce8:	03 e4       	ldi	r16, 0x43	; 67
    9cea:	1d e0       	ldi	r17, 0x0D	; 13
    9cec:	f7 2d       	mov	r31, r7
    9cee:	f0 71       	andi	r31, 0x10	; 16
    9cf0:	7f 2e       	mov	r7, r31
    9cf2:	f8 01       	movw	r30, r16
    9cf4:	84 91       	lpm	r24, Z
    9cf6:	88 23       	and	r24, r24
    9cf8:	09 f4       	brne	.+2      	; 0x9cfc <vfprintf+0x1fc>
    9cfa:	5e c2       	rjmp	.+1212   	; 0xa1b8 <vfprintf+0x6b8>
    9cfc:	71 10       	cpse	r7, r1
    9cfe:	80 52       	subi	r24, 0x20	; 32
    9d00:	b7 01       	movw	r22, r14
    9d02:	90 e0       	ldi	r25, 0x00	; 0
    9d04:	a1 d5       	rcall	.+2882   	; 0xa848 <fputc>
    9d06:	0f 5f       	subi	r16, 0xFF	; 255
    9d08:	1f 4f       	sbci	r17, 0xFF	; 255
    9d0a:	f3 cf       	rjmp	.-26     	; 0x9cf2 <vfprintf+0x1f2>
    9d0c:	77 fe       	sbrs	r7, 7
    9d0e:	0f c0       	rjmp	.+30     	; 0x9d2e <vfprintf+0x22e>
    9d10:	4c 0c       	add	r4, r12
    9d12:	04 ff       	sbrs	r16, 4
    9d14:	04 c0       	rjmp	.+8      	; 0x9d1e <vfprintf+0x21e>
    9d16:	8a 81       	ldd	r24, Y+2	; 0x02
    9d18:	81 33       	cpi	r24, 0x31	; 49
    9d1a:	09 f4       	brne	.+2      	; 0x9d1e <vfprintf+0x21e>
    9d1c:	4a 94       	dec	r4
    9d1e:	14 14       	cp	r1, r4
    9d20:	74 f5       	brge	.+92     	; 0x9d7e <vfprintf+0x27e>
    9d22:	f8 e0       	ldi	r31, 0x08	; 8
    9d24:	f4 15       	cp	r31, r4
    9d26:	78 f5       	brcc	.+94     	; 0x9d86 <vfprintf+0x286>
    9d28:	88 e0       	ldi	r24, 0x08	; 8
    9d2a:	48 2e       	mov	r4, r24
    9d2c:	2c c0       	rjmp	.+88     	; 0x9d86 <vfprintf+0x286>
    9d2e:	76 fc       	sbrc	r7, 6
    9d30:	2a c0       	rjmp	.+84     	; 0x9d86 <vfprintf+0x286>
    9d32:	81 2f       	mov	r24, r17
    9d34:	90 e0       	ldi	r25, 0x00	; 0
    9d36:	8c 15       	cp	r24, r12
    9d38:	9d 05       	cpc	r25, r13
    9d3a:	9c f0       	brlt	.+38     	; 0x9d62 <vfprintf+0x262>
    9d3c:	6c ef       	ldi	r22, 0xFC	; 252
    9d3e:	c6 16       	cp	r12, r22
    9d40:	6f ef       	ldi	r22, 0xFF	; 255
    9d42:	d6 06       	cpc	r13, r22
    9d44:	74 f0       	brlt	.+28     	; 0x9d62 <vfprintf+0x262>
    9d46:	77 2d       	mov	r23, r7
    9d48:	70 68       	ori	r23, 0x80	; 128
    9d4a:	77 2e       	mov	r7, r23
    9d4c:	0a c0       	rjmp	.+20     	; 0x9d62 <vfprintf+0x262>
    9d4e:	e2 e0       	ldi	r30, 0x02	; 2
    9d50:	f0 e0       	ldi	r31, 0x00	; 0
    9d52:	ec 0f       	add	r30, r28
    9d54:	fd 1f       	adc	r31, r29
    9d56:	e1 0f       	add	r30, r17
    9d58:	f1 1d       	adc	r31, r1
    9d5a:	80 81       	ld	r24, Z
    9d5c:	80 33       	cpi	r24, 0x30	; 48
    9d5e:	19 f4       	brne	.+6      	; 0x9d66 <vfprintf+0x266>
    9d60:	11 50       	subi	r17, 0x01	; 1
    9d62:	11 11       	cpse	r17, r1
    9d64:	f4 cf       	rjmp	.-24     	; 0x9d4e <vfprintf+0x24e>
    9d66:	77 fe       	sbrs	r7, 7
    9d68:	0e c0       	rjmp	.+28     	; 0x9d86 <vfprintf+0x286>
    9d6a:	44 24       	eor	r4, r4
    9d6c:	43 94       	inc	r4
    9d6e:	41 0e       	add	r4, r17
    9d70:	81 2f       	mov	r24, r17
    9d72:	90 e0       	ldi	r25, 0x00	; 0
    9d74:	c8 16       	cp	r12, r24
    9d76:	d9 06       	cpc	r13, r25
    9d78:	2c f4       	brge	.+10     	; 0x9d84 <vfprintf+0x284>
    9d7a:	1c 19       	sub	r17, r12
    9d7c:	04 c0       	rjmp	.+8      	; 0x9d86 <vfprintf+0x286>
    9d7e:	44 24       	eor	r4, r4
    9d80:	43 94       	inc	r4
    9d82:	01 c0       	rjmp	.+2      	; 0x9d86 <vfprintf+0x286>
    9d84:	10 e0       	ldi	r17, 0x00	; 0
    9d86:	77 fe       	sbrs	r7, 7
    9d88:	07 c0       	rjmp	.+14     	; 0x9d98 <vfprintf+0x298>
    9d8a:	1c 14       	cp	r1, r12
    9d8c:	1d 04       	cpc	r1, r13
    9d8e:	3c f4       	brge	.+14     	; 0x9d9e <vfprintf+0x29e>
    9d90:	96 01       	movw	r18, r12
    9d92:	2f 5f       	subi	r18, 0xFF	; 255
    9d94:	3f 4f       	sbci	r19, 0xFF	; 255
    9d96:	05 c0       	rjmp	.+10     	; 0x9da2 <vfprintf+0x2a2>
    9d98:	25 e0       	ldi	r18, 0x05	; 5
    9d9a:	30 e0       	ldi	r19, 0x00	; 0
    9d9c:	02 c0       	rjmp	.+4      	; 0x9da2 <vfprintf+0x2a2>
    9d9e:	21 e0       	ldi	r18, 0x01	; 1
    9da0:	30 e0       	ldi	r19, 0x00	; 0
    9da2:	66 20       	and	r6, r6
    9da4:	11 f0       	breq	.+4      	; 0x9daa <vfprintf+0x2aa>
    9da6:	2f 5f       	subi	r18, 0xFF	; 255
    9da8:	3f 4f       	sbci	r19, 0xFF	; 255
    9daa:	11 23       	and	r17, r17
    9dac:	31 f0       	breq	.+12     	; 0x9dba <vfprintf+0x2ba>
    9dae:	41 2f       	mov	r20, r17
    9db0:	50 e0       	ldi	r21, 0x00	; 0
    9db2:	4f 5f       	subi	r20, 0xFF	; 255
    9db4:	5f 4f       	sbci	r21, 0xFF	; 255
    9db6:	24 0f       	add	r18, r20
    9db8:	35 1f       	adc	r19, r21
    9dba:	45 2d       	mov	r20, r5
    9dbc:	50 e0       	ldi	r21, 0x00	; 0
    9dbe:	24 17       	cp	r18, r20
    9dc0:	35 07       	cpc	r19, r21
    9dc2:	14 f4       	brge	.+4      	; 0x9dc8 <vfprintf+0x2c8>
    9dc4:	52 1a       	sub	r5, r18
    9dc6:	01 c0       	rjmp	.+2      	; 0x9dca <vfprintf+0x2ca>
    9dc8:	51 2c       	mov	r5, r1
    9dca:	87 2d       	mov	r24, r7
    9dcc:	89 70       	andi	r24, 0x09	; 9
    9dce:	41 f4       	brne	.+16     	; 0x9de0 <vfprintf+0x2e0>
    9dd0:	55 20       	and	r5, r5
    9dd2:	31 f0       	breq	.+12     	; 0x9de0 <vfprintf+0x2e0>
    9dd4:	b7 01       	movw	r22, r14
    9dd6:	80 e2       	ldi	r24, 0x20	; 32
    9dd8:	90 e0       	ldi	r25, 0x00	; 0
    9dda:	36 d5       	rcall	.+2668   	; 0xa848 <fputc>
    9ddc:	5a 94       	dec	r5
    9dde:	f8 cf       	rjmp	.-16     	; 0x9dd0 <vfprintf+0x2d0>
    9de0:	66 20       	and	r6, r6
    9de2:	21 f0       	breq	.+8      	; 0x9dec <vfprintf+0x2ec>
    9de4:	b7 01       	movw	r22, r14
    9de6:	86 2d       	mov	r24, r6
    9de8:	90 e0       	ldi	r25, 0x00	; 0
    9dea:	2e d5       	rcall	.+2652   	; 0xa848 <fputc>
    9dec:	73 fc       	sbrc	r7, 3
    9dee:	08 c0       	rjmp	.+16     	; 0x9e00 <vfprintf+0x300>
    9df0:	55 20       	and	r5, r5
    9df2:	31 f0       	breq	.+12     	; 0x9e00 <vfprintf+0x300>
    9df4:	b7 01       	movw	r22, r14
    9df6:	80 e3       	ldi	r24, 0x30	; 48
    9df8:	90 e0       	ldi	r25, 0x00	; 0
    9dfa:	26 d5       	rcall	.+2636   	; 0xa848 <fputc>
    9dfc:	5a 94       	dec	r5
    9dfe:	f8 cf       	rjmp	.-16     	; 0x9df0 <vfprintf+0x2f0>
    9e00:	77 fe       	sbrs	r7, 7
    9e02:	5d c0       	rjmp	.+186    	; 0x9ebe <vfprintf+0x3be>
    9e04:	9c 2d       	mov	r25, r12
    9e06:	8d 2d       	mov	r24, r13
    9e08:	d7 fe       	sbrs	r13, 7
    9e0a:	02 c0       	rjmp	.+4      	; 0x9e10 <vfprintf+0x310>
    9e0c:	90 e0       	ldi	r25, 0x00	; 0
    9e0e:	80 e0       	ldi	r24, 0x00	; 0
    9e10:	69 2e       	mov	r6, r25
    9e12:	78 2e       	mov	r7, r24
    9e14:	40 e0       	ldi	r20, 0x00	; 0
    9e16:	50 e0       	ldi	r21, 0x00	; 0
    9e18:	c6 01       	movw	r24, r12
    9e1a:	84 19       	sub	r24, r4
    9e1c:	91 09       	sbc	r25, r1
    9e1e:	8c 87       	std	Y+12, r24	; 0x0c
    9e20:	9d 87       	std	Y+13, r25	; 0x0d
    9e22:	96 01       	movw	r18, r12
    9e24:	26 19       	sub	r18, r6
    9e26:	37 09       	sbc	r19, r7
    9e28:	28 0d       	add	r18, r8
    9e2a:	39 1d       	adc	r19, r9
    9e2c:	81 2f       	mov	r24, r17
    9e2e:	90 e0       	ldi	r25, 0x00	; 0
    9e30:	ee 27       	eor	r30, r30
    9e32:	ff 27       	eor	r31, r31
    9e34:	e8 1b       	sub	r30, r24
    9e36:	f9 0b       	sbc	r31, r25
    9e38:	ee 87       	std	Y+14, r30	; 0x0e
    9e3a:	ff 87       	std	Y+15, r31	; 0x0f
    9e3c:	ff ef       	ldi	r31, 0xFF	; 255
    9e3e:	6f 16       	cp	r6, r31
    9e40:	7f 06       	cpc	r7, r31
    9e42:	61 f4       	brne	.+24     	; 0x9e5c <vfprintf+0x35c>
    9e44:	b7 01       	movw	r22, r14
    9e46:	8e e2       	ldi	r24, 0x2E	; 46
    9e48:	90 e0       	ldi	r25, 0x00	; 0
    9e4a:	2b 8b       	std	Y+19, r18	; 0x13
    9e4c:	3a 8b       	std	Y+18, r19	; 0x12
    9e4e:	48 8b       	std	Y+16, r20	; 0x10
    9e50:	59 8b       	std	Y+17, r21	; 0x11
    9e52:	fa d4       	rcall	.+2548   	; 0xa848 <fputc>
    9e54:	59 89       	ldd	r21, Y+17	; 0x11
    9e56:	48 89       	ldd	r20, Y+16	; 0x10
    9e58:	3a 89       	ldd	r19, Y+18	; 0x12
    9e5a:	2b 89       	ldd	r18, Y+19	; 0x13
    9e5c:	c6 14       	cp	r12, r6
    9e5e:	d7 04       	cpc	r13, r7
    9e60:	54 f0       	brlt	.+20     	; 0x9e76 <vfprintf+0x376>
    9e62:	6c 85       	ldd	r22, Y+12	; 0x0c
    9e64:	7d 85       	ldd	r23, Y+13	; 0x0d
    9e66:	66 15       	cp	r22, r6
    9e68:	77 05       	cpc	r23, r7
    9e6a:	2c f4       	brge	.+10     	; 0x9e76 <vfprintf+0x376>
    9e6c:	f9 01       	movw	r30, r18
    9e6e:	e4 0f       	add	r30, r20
    9e70:	f5 1f       	adc	r31, r21
    9e72:	81 81       	ldd	r24, Z+1	; 0x01
    9e74:	01 c0       	rjmp	.+2      	; 0x9e78 <vfprintf+0x378>
    9e76:	80 e3       	ldi	r24, 0x30	; 48
    9e78:	71 e0       	ldi	r23, 0x01	; 1
    9e7a:	67 1a       	sub	r6, r23
    9e7c:	71 08       	sbc	r7, r1
    9e7e:	4f 5f       	subi	r20, 0xFF	; 255
    9e80:	5f 4f       	sbci	r21, 0xFF	; 255
    9e82:	ee 85       	ldd	r30, Y+14	; 0x0e
    9e84:	ff 85       	ldd	r31, Y+15	; 0x0f
    9e86:	6e 16       	cp	r6, r30
    9e88:	7f 06       	cpc	r7, r31
    9e8a:	64 f0       	brlt	.+24     	; 0x9ea4 <vfprintf+0x3a4>
    9e8c:	b7 01       	movw	r22, r14
    9e8e:	90 e0       	ldi	r25, 0x00	; 0
    9e90:	2b 8b       	std	Y+19, r18	; 0x13
    9e92:	3a 8b       	std	Y+18, r19	; 0x12
    9e94:	48 8b       	std	Y+16, r20	; 0x10
    9e96:	59 8b       	std	Y+17, r21	; 0x11
    9e98:	d7 d4       	rcall	.+2478   	; 0xa848 <fputc>
    9e9a:	2b 89       	ldd	r18, Y+19	; 0x13
    9e9c:	3a 89       	ldd	r19, Y+18	; 0x12
    9e9e:	48 89       	ldd	r20, Y+16	; 0x10
    9ea0:	59 89       	ldd	r21, Y+17	; 0x11
    9ea2:	cc cf       	rjmp	.-104    	; 0x9e3c <vfprintf+0x33c>
    9ea4:	6c 14       	cp	r6, r12
    9ea6:	7d 04       	cpc	r7, r13
    9ea8:	39 f4       	brne	.+14     	; 0x9eb8 <vfprintf+0x3b8>
    9eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    9eac:	96 33       	cpi	r25, 0x36	; 54
    9eae:	18 f4       	brcc	.+6      	; 0x9eb6 <vfprintf+0x3b6>
    9eb0:	95 33       	cpi	r25, 0x35	; 53
    9eb2:	11 f4       	brne	.+4      	; 0x9eb8 <vfprintf+0x3b8>
    9eb4:	04 ff       	sbrs	r16, 4
    9eb6:	81 e3       	ldi	r24, 0x31	; 49
    9eb8:	b7 01       	movw	r22, r14
    9eba:	90 e0       	ldi	r25, 0x00	; 0
    9ebc:	45 c0       	rjmp	.+138    	; 0x9f48 <vfprintf+0x448>
    9ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    9ec0:	81 33       	cpi	r24, 0x31	; 49
    9ec2:	09 f0       	breq	.+2      	; 0x9ec6 <vfprintf+0x3c6>
    9ec4:	0f 7e       	andi	r16, 0xEF	; 239
    9ec6:	b7 01       	movw	r22, r14
    9ec8:	90 e0       	ldi	r25, 0x00	; 0
    9eca:	be d4       	rcall	.+2428   	; 0xa848 <fputc>
    9ecc:	11 11       	cpse	r17, r1
    9ece:	05 c0       	rjmp	.+10     	; 0x9eda <vfprintf+0x3da>
    9ed0:	74 fe       	sbrs	r7, 4
    9ed2:	16 c0       	rjmp	.+44     	; 0x9f00 <vfprintf+0x400>
    9ed4:	85 e4       	ldi	r24, 0x45	; 69
    9ed6:	90 e0       	ldi	r25, 0x00	; 0
    9ed8:	15 c0       	rjmp	.+42     	; 0x9f04 <vfprintf+0x404>
    9eda:	b7 01       	movw	r22, r14
    9edc:	8e e2       	ldi	r24, 0x2E	; 46
    9ede:	90 e0       	ldi	r25, 0x00	; 0
    9ee0:	b3 d4       	rcall	.+2406   	; 0xa848 <fputc>
    9ee2:	82 e0       	ldi	r24, 0x02	; 2
    9ee4:	66 24       	eor	r6, r6
    9ee6:	63 94       	inc	r6
    9ee8:	68 0e       	add	r6, r24
    9eea:	f4 01       	movw	r30, r8
    9eec:	e8 0f       	add	r30, r24
    9eee:	f1 1d       	adc	r31, r1
    9ef0:	80 81       	ld	r24, Z
    9ef2:	b7 01       	movw	r22, r14
    9ef4:	90 e0       	ldi	r25, 0x00	; 0
    9ef6:	a8 d4       	rcall	.+2384   	; 0xa848 <fputc>
    9ef8:	11 50       	subi	r17, 0x01	; 1
    9efa:	51 f3       	breq	.-44     	; 0x9ed0 <vfprintf+0x3d0>
    9efc:	86 2d       	mov	r24, r6
    9efe:	f2 cf       	rjmp	.-28     	; 0x9ee4 <vfprintf+0x3e4>
    9f00:	85 e6       	ldi	r24, 0x65	; 101
    9f02:	90 e0       	ldi	r25, 0x00	; 0
    9f04:	b7 01       	movw	r22, r14
    9f06:	a0 d4       	rcall	.+2368   	; 0xa848 <fputc>
    9f08:	d7 fc       	sbrc	r13, 7
    9f0a:	05 c0       	rjmp	.+10     	; 0x9f16 <vfprintf+0x416>
    9f0c:	c1 14       	cp	r12, r1
    9f0e:	d1 04       	cpc	r13, r1
    9f10:	39 f4       	brne	.+14     	; 0x9f20 <vfprintf+0x420>
    9f12:	04 ff       	sbrs	r16, 4
    9f14:	05 c0       	rjmp	.+10     	; 0x9f20 <vfprintf+0x420>
    9f16:	d1 94       	neg	r13
    9f18:	c1 94       	neg	r12
    9f1a:	d1 08       	sbc	r13, r1
    9f1c:	8d e2       	ldi	r24, 0x2D	; 45
    9f1e:	01 c0       	rjmp	.+2      	; 0x9f22 <vfprintf+0x422>
    9f20:	8b e2       	ldi	r24, 0x2B	; 43
    9f22:	b7 01       	movw	r22, r14
    9f24:	90 e0       	ldi	r25, 0x00	; 0
    9f26:	90 d4       	rcall	.+2336   	; 0xa848 <fputc>
    9f28:	80 e3       	ldi	r24, 0x30	; 48
    9f2a:	6a e0       	ldi	r22, 0x0A	; 10
    9f2c:	c6 16       	cp	r12, r22
    9f2e:	d1 04       	cpc	r13, r1
    9f30:	2c f0       	brlt	.+10     	; 0x9f3c <vfprintf+0x43c>
    9f32:	8f 5f       	subi	r24, 0xFF	; 255
    9f34:	fa e0       	ldi	r31, 0x0A	; 10
    9f36:	cf 1a       	sub	r12, r31
    9f38:	d1 08       	sbc	r13, r1
    9f3a:	f7 cf       	rjmp	.-18     	; 0x9f2a <vfprintf+0x42a>
    9f3c:	b7 01       	movw	r22, r14
    9f3e:	90 e0       	ldi	r25, 0x00	; 0
    9f40:	83 d4       	rcall	.+2310   	; 0xa848 <fputc>
    9f42:	b7 01       	movw	r22, r14
    9f44:	c6 01       	movw	r24, r12
    9f46:	c0 96       	adiw	r24, 0x30	; 48
    9f48:	7f d4       	rcall	.+2302   	; 0xa848 <fputc>
    9f4a:	36 c1       	rjmp	.+620    	; 0xa1b8 <vfprintf+0x6b8>
    9f4c:	83 36       	cpi	r24, 0x63	; 99
    9f4e:	31 f0       	breq	.+12     	; 0x9f5c <vfprintf+0x45c>
    9f50:	83 37       	cpi	r24, 0x73	; 115
    9f52:	79 f0       	breq	.+30     	; 0x9f72 <vfprintf+0x472>
    9f54:	83 35       	cpi	r24, 0x53	; 83
    9f56:	09 f0       	breq	.+2      	; 0x9f5a <vfprintf+0x45a>
    9f58:	54 c0       	rjmp	.+168    	; 0xa002 <vfprintf+0x502>
    9f5a:	20 c0       	rjmp	.+64     	; 0x9f9c <vfprintf+0x49c>
    9f5c:	56 01       	movw	r10, r12
    9f5e:	72 e0       	ldi	r23, 0x02	; 2
    9f60:	a7 0e       	add	r10, r23
    9f62:	b1 1c       	adc	r11, r1
    9f64:	f6 01       	movw	r30, r12
    9f66:	80 81       	ld	r24, Z
    9f68:	89 83       	std	Y+1, r24	; 0x01
    9f6a:	01 e0       	ldi	r16, 0x01	; 1
    9f6c:	10 e0       	ldi	r17, 0x00	; 0
    9f6e:	64 01       	movw	r12, r8
    9f70:	13 c0       	rjmp	.+38     	; 0x9f98 <vfprintf+0x498>
    9f72:	56 01       	movw	r10, r12
    9f74:	f2 e0       	ldi	r31, 0x02	; 2
    9f76:	af 0e       	add	r10, r31
    9f78:	b1 1c       	adc	r11, r1
    9f7a:	f6 01       	movw	r30, r12
    9f7c:	c0 80       	ld	r12, Z
    9f7e:	d1 80       	ldd	r13, Z+1	; 0x01
    9f80:	26 ff       	sbrs	r18, 6
    9f82:	03 c0       	rjmp	.+6      	; 0x9f8a <vfprintf+0x48a>
    9f84:	61 2f       	mov	r22, r17
    9f86:	70 e0       	ldi	r23, 0x00	; 0
    9f88:	02 c0       	rjmp	.+4      	; 0x9f8e <vfprintf+0x48e>
    9f8a:	6f ef       	ldi	r22, 0xFF	; 255
    9f8c:	7f ef       	ldi	r23, 0xFF	; 255
    9f8e:	c6 01       	movw	r24, r12
    9f90:	2b 8b       	std	Y+19, r18	; 0x13
    9f92:	07 d4       	rcall	.+2062   	; 0xa7a2 <strnlen>
    9f94:	8c 01       	movw	r16, r24
    9f96:	2b 89       	ldd	r18, Y+19	; 0x13
    9f98:	2f 77       	andi	r18, 0x7F	; 127
    9f9a:	14 c0       	rjmp	.+40     	; 0x9fc4 <vfprintf+0x4c4>
    9f9c:	56 01       	movw	r10, r12
    9f9e:	f2 e0       	ldi	r31, 0x02	; 2
    9fa0:	af 0e       	add	r10, r31
    9fa2:	b1 1c       	adc	r11, r1
    9fa4:	f6 01       	movw	r30, r12
    9fa6:	c0 80       	ld	r12, Z
    9fa8:	d1 80       	ldd	r13, Z+1	; 0x01
    9faa:	26 ff       	sbrs	r18, 6
    9fac:	03 c0       	rjmp	.+6      	; 0x9fb4 <vfprintf+0x4b4>
    9fae:	61 2f       	mov	r22, r17
    9fb0:	70 e0       	ldi	r23, 0x00	; 0
    9fb2:	02 c0       	rjmp	.+4      	; 0x9fb8 <vfprintf+0x4b8>
    9fb4:	6f ef       	ldi	r22, 0xFF	; 255
    9fb6:	7f ef       	ldi	r23, 0xFF	; 255
    9fb8:	c6 01       	movw	r24, r12
    9fba:	2b 8b       	std	Y+19, r18	; 0x13
    9fbc:	ab d3       	rcall	.+1878   	; 0xa714 <strnlen_P>
    9fbe:	8c 01       	movw	r16, r24
    9fc0:	2b 89       	ldd	r18, Y+19	; 0x13
    9fc2:	20 68       	ori	r18, 0x80	; 128
    9fc4:	72 2e       	mov	r7, r18
    9fc6:	23 fd       	sbrc	r18, 3
    9fc8:	18 c0       	rjmp	.+48     	; 0x9ffa <vfprintf+0x4fa>
    9fca:	85 2d       	mov	r24, r5
    9fcc:	90 e0       	ldi	r25, 0x00	; 0
    9fce:	08 17       	cp	r16, r24
    9fd0:	19 07       	cpc	r17, r25
    9fd2:	98 f4       	brcc	.+38     	; 0x9ffa <vfprintf+0x4fa>
    9fd4:	b7 01       	movw	r22, r14
    9fd6:	80 e2       	ldi	r24, 0x20	; 32
    9fd8:	90 e0       	ldi	r25, 0x00	; 0
    9fda:	36 d4       	rcall	.+2156   	; 0xa848 <fputc>
    9fdc:	5a 94       	dec	r5
    9fde:	f5 cf       	rjmp	.-22     	; 0x9fca <vfprintf+0x4ca>
    9fe0:	f6 01       	movw	r30, r12
    9fe2:	77 fc       	sbrc	r7, 7
    9fe4:	85 91       	lpm	r24, Z+
    9fe6:	77 fe       	sbrs	r7, 7
    9fe8:	81 91       	ld	r24, Z+
    9fea:	6f 01       	movw	r12, r30
    9fec:	b7 01       	movw	r22, r14
    9fee:	90 e0       	ldi	r25, 0x00	; 0
    9ff0:	2b d4       	rcall	.+2134   	; 0xa848 <fputc>
    9ff2:	51 10       	cpse	r5, r1
    9ff4:	5a 94       	dec	r5
    9ff6:	01 50       	subi	r16, 0x01	; 1
    9ff8:	11 09       	sbc	r17, r1
    9ffa:	01 15       	cp	r16, r1
    9ffc:	11 05       	cpc	r17, r1
    9ffe:	81 f7       	brne	.-32     	; 0x9fe0 <vfprintf+0x4e0>
    a000:	db c0       	rjmp	.+438    	; 0xa1b8 <vfprintf+0x6b8>
    a002:	84 36       	cpi	r24, 0x64	; 100
    a004:	11 f0       	breq	.+4      	; 0xa00a <vfprintf+0x50a>
    a006:	89 36       	cpi	r24, 0x69	; 105
    a008:	49 f5       	brne	.+82     	; 0xa05c <vfprintf+0x55c>
    a00a:	56 01       	movw	r10, r12
    a00c:	27 ff       	sbrs	r18, 7
    a00e:	09 c0       	rjmp	.+18     	; 0xa022 <vfprintf+0x522>
    a010:	f4 e0       	ldi	r31, 0x04	; 4
    a012:	af 0e       	add	r10, r31
    a014:	b1 1c       	adc	r11, r1
    a016:	f6 01       	movw	r30, r12
    a018:	60 81       	ld	r22, Z
    a01a:	71 81       	ldd	r23, Z+1	; 0x01
    a01c:	82 81       	ldd	r24, Z+2	; 0x02
    a01e:	93 81       	ldd	r25, Z+3	; 0x03
    a020:	0a c0       	rjmp	.+20     	; 0xa036 <vfprintf+0x536>
    a022:	f2 e0       	ldi	r31, 0x02	; 2
    a024:	af 0e       	add	r10, r31
    a026:	b1 1c       	adc	r11, r1
    a028:	f6 01       	movw	r30, r12
    a02a:	60 81       	ld	r22, Z
    a02c:	71 81       	ldd	r23, Z+1	; 0x01
    a02e:	88 27       	eor	r24, r24
    a030:	77 fd       	sbrc	r23, 7
    a032:	80 95       	com	r24
    a034:	98 2f       	mov	r25, r24
    a036:	02 2f       	mov	r16, r18
    a038:	0f 76       	andi	r16, 0x6F	; 111
    a03a:	97 ff       	sbrs	r25, 7
    a03c:	08 c0       	rjmp	.+16     	; 0xa04e <vfprintf+0x54e>
    a03e:	90 95       	com	r25
    a040:	80 95       	com	r24
    a042:	70 95       	com	r23
    a044:	61 95       	neg	r22
    a046:	7f 4f       	sbci	r23, 0xFF	; 255
    a048:	8f 4f       	sbci	r24, 0xFF	; 255
    a04a:	9f 4f       	sbci	r25, 0xFF	; 255
    a04c:	00 68       	ori	r16, 0x80	; 128
    a04e:	2a e0       	ldi	r18, 0x0A	; 10
    a050:	30 e0       	ldi	r19, 0x00	; 0
    a052:	a4 01       	movw	r20, r8
    a054:	84 d4       	rcall	.+2312   	; 0xa95e <__ultoa_invert>
    a056:	c8 2e       	mov	r12, r24
    a058:	c8 18       	sub	r12, r8
    a05a:	3d c0       	rjmp	.+122    	; 0xa0d6 <vfprintf+0x5d6>
    a05c:	02 2f       	mov	r16, r18
    a05e:	85 37       	cpi	r24, 0x75	; 117
    a060:	21 f4       	brne	.+8      	; 0xa06a <vfprintf+0x56a>
    a062:	0f 7e       	andi	r16, 0xEF	; 239
    a064:	2a e0       	ldi	r18, 0x0A	; 10
    a066:	30 e0       	ldi	r19, 0x00	; 0
    a068:	1d c0       	rjmp	.+58     	; 0xa0a4 <vfprintf+0x5a4>
    a06a:	09 7f       	andi	r16, 0xF9	; 249
    a06c:	8f 36       	cpi	r24, 0x6F	; 111
    a06e:	91 f0       	breq	.+36     	; 0xa094 <vfprintf+0x594>
    a070:	18 f4       	brcc	.+6      	; 0xa078 <vfprintf+0x578>
    a072:	88 35       	cpi	r24, 0x58	; 88
    a074:	59 f0       	breq	.+22     	; 0xa08c <vfprintf+0x58c>
    a076:	a9 c0       	rjmp	.+338    	; 0xa1ca <vfprintf+0x6ca>
    a078:	80 37       	cpi	r24, 0x70	; 112
    a07a:	19 f0       	breq	.+6      	; 0xa082 <vfprintf+0x582>
    a07c:	88 37       	cpi	r24, 0x78	; 120
    a07e:	11 f0       	breq	.+4      	; 0xa084 <vfprintf+0x584>
    a080:	a4 c0       	rjmp	.+328    	; 0xa1ca <vfprintf+0x6ca>
    a082:	00 61       	ori	r16, 0x10	; 16
    a084:	04 ff       	sbrs	r16, 4
    a086:	09 c0       	rjmp	.+18     	; 0xa09a <vfprintf+0x59a>
    a088:	04 60       	ori	r16, 0x04	; 4
    a08a:	07 c0       	rjmp	.+14     	; 0xa09a <vfprintf+0x59a>
    a08c:	24 ff       	sbrs	r18, 4
    a08e:	08 c0       	rjmp	.+16     	; 0xa0a0 <vfprintf+0x5a0>
    a090:	06 60       	ori	r16, 0x06	; 6
    a092:	06 c0       	rjmp	.+12     	; 0xa0a0 <vfprintf+0x5a0>
    a094:	28 e0       	ldi	r18, 0x08	; 8
    a096:	30 e0       	ldi	r19, 0x00	; 0
    a098:	05 c0       	rjmp	.+10     	; 0xa0a4 <vfprintf+0x5a4>
    a09a:	20 e1       	ldi	r18, 0x10	; 16
    a09c:	30 e0       	ldi	r19, 0x00	; 0
    a09e:	02 c0       	rjmp	.+4      	; 0xa0a4 <vfprintf+0x5a4>
    a0a0:	20 e1       	ldi	r18, 0x10	; 16
    a0a2:	32 e0       	ldi	r19, 0x02	; 2
    a0a4:	56 01       	movw	r10, r12
    a0a6:	07 ff       	sbrs	r16, 7
    a0a8:	09 c0       	rjmp	.+18     	; 0xa0bc <vfprintf+0x5bc>
    a0aa:	f4 e0       	ldi	r31, 0x04	; 4
    a0ac:	af 0e       	add	r10, r31
    a0ae:	b1 1c       	adc	r11, r1
    a0b0:	f6 01       	movw	r30, r12
    a0b2:	60 81       	ld	r22, Z
    a0b4:	71 81       	ldd	r23, Z+1	; 0x01
    a0b6:	82 81       	ldd	r24, Z+2	; 0x02
    a0b8:	93 81       	ldd	r25, Z+3	; 0x03
    a0ba:	08 c0       	rjmp	.+16     	; 0xa0cc <vfprintf+0x5cc>
    a0bc:	f2 e0       	ldi	r31, 0x02	; 2
    a0be:	af 0e       	add	r10, r31
    a0c0:	b1 1c       	adc	r11, r1
    a0c2:	f6 01       	movw	r30, r12
    a0c4:	60 81       	ld	r22, Z
    a0c6:	71 81       	ldd	r23, Z+1	; 0x01
    a0c8:	80 e0       	ldi	r24, 0x00	; 0
    a0ca:	90 e0       	ldi	r25, 0x00	; 0
    a0cc:	a4 01       	movw	r20, r8
    a0ce:	47 d4       	rcall	.+2190   	; 0xa95e <__ultoa_invert>
    a0d0:	c8 2e       	mov	r12, r24
    a0d2:	c8 18       	sub	r12, r8
    a0d4:	0f 77       	andi	r16, 0x7F	; 127
    a0d6:	06 ff       	sbrs	r16, 6
    a0d8:	0b c0       	rjmp	.+22     	; 0xa0f0 <vfprintf+0x5f0>
    a0da:	20 2f       	mov	r18, r16
    a0dc:	2e 7f       	andi	r18, 0xFE	; 254
    a0de:	c1 16       	cp	r12, r17
    a0e0:	50 f4       	brcc	.+20     	; 0xa0f6 <vfprintf+0x5f6>
    a0e2:	04 ff       	sbrs	r16, 4
    a0e4:	0a c0       	rjmp	.+20     	; 0xa0fa <vfprintf+0x5fa>
    a0e6:	02 fd       	sbrc	r16, 2
    a0e8:	08 c0       	rjmp	.+16     	; 0xa0fa <vfprintf+0x5fa>
    a0ea:	20 2f       	mov	r18, r16
    a0ec:	2e 7e       	andi	r18, 0xEE	; 238
    a0ee:	05 c0       	rjmp	.+10     	; 0xa0fa <vfprintf+0x5fa>
    a0f0:	dc 2c       	mov	r13, r12
    a0f2:	20 2f       	mov	r18, r16
    a0f4:	03 c0       	rjmp	.+6      	; 0xa0fc <vfprintf+0x5fc>
    a0f6:	dc 2c       	mov	r13, r12
    a0f8:	01 c0       	rjmp	.+2      	; 0xa0fc <vfprintf+0x5fc>
    a0fa:	d1 2e       	mov	r13, r17
    a0fc:	24 ff       	sbrs	r18, 4
    a0fe:	0d c0       	rjmp	.+26     	; 0xa11a <vfprintf+0x61a>
    a100:	fe 01       	movw	r30, r28
    a102:	ec 0d       	add	r30, r12
    a104:	f1 1d       	adc	r31, r1
    a106:	80 81       	ld	r24, Z
    a108:	80 33       	cpi	r24, 0x30	; 48
    a10a:	11 f4       	brne	.+4      	; 0xa110 <vfprintf+0x610>
    a10c:	29 7e       	andi	r18, 0xE9	; 233
    a10e:	09 c0       	rjmp	.+18     	; 0xa122 <vfprintf+0x622>
    a110:	22 ff       	sbrs	r18, 2
    a112:	06 c0       	rjmp	.+12     	; 0xa120 <vfprintf+0x620>
    a114:	d3 94       	inc	r13
    a116:	d3 94       	inc	r13
    a118:	04 c0       	rjmp	.+8      	; 0xa122 <vfprintf+0x622>
    a11a:	82 2f       	mov	r24, r18
    a11c:	86 78       	andi	r24, 0x86	; 134
    a11e:	09 f0       	breq	.+2      	; 0xa122 <vfprintf+0x622>
    a120:	d3 94       	inc	r13
    a122:	23 fd       	sbrc	r18, 3
    a124:	12 c0       	rjmp	.+36     	; 0xa14a <vfprintf+0x64a>
    a126:	20 ff       	sbrs	r18, 0
    a128:	06 c0       	rjmp	.+12     	; 0xa136 <vfprintf+0x636>
    a12a:	1c 2d       	mov	r17, r12
    a12c:	d5 14       	cp	r13, r5
    a12e:	18 f4       	brcc	.+6      	; 0xa136 <vfprintf+0x636>
    a130:	15 0d       	add	r17, r5
    a132:	1d 19       	sub	r17, r13
    a134:	d5 2c       	mov	r13, r5
    a136:	d5 14       	cp	r13, r5
    a138:	60 f4       	brcc	.+24     	; 0xa152 <vfprintf+0x652>
    a13a:	b7 01       	movw	r22, r14
    a13c:	80 e2       	ldi	r24, 0x20	; 32
    a13e:	90 e0       	ldi	r25, 0x00	; 0
    a140:	2b 8b       	std	Y+19, r18	; 0x13
    a142:	82 d3       	rcall	.+1796   	; 0xa848 <fputc>
    a144:	d3 94       	inc	r13
    a146:	2b 89       	ldd	r18, Y+19	; 0x13
    a148:	f6 cf       	rjmp	.-20     	; 0xa136 <vfprintf+0x636>
    a14a:	d5 14       	cp	r13, r5
    a14c:	10 f4       	brcc	.+4      	; 0xa152 <vfprintf+0x652>
    a14e:	5d 18       	sub	r5, r13
    a150:	01 c0       	rjmp	.+2      	; 0xa154 <vfprintf+0x654>
    a152:	51 2c       	mov	r5, r1
    a154:	24 ff       	sbrs	r18, 4
    a156:	11 c0       	rjmp	.+34     	; 0xa17a <vfprintf+0x67a>
    a158:	b7 01       	movw	r22, r14
    a15a:	80 e3       	ldi	r24, 0x30	; 48
    a15c:	90 e0       	ldi	r25, 0x00	; 0
    a15e:	2b 8b       	std	Y+19, r18	; 0x13
    a160:	73 d3       	rcall	.+1766   	; 0xa848 <fputc>
    a162:	2b 89       	ldd	r18, Y+19	; 0x13
    a164:	22 ff       	sbrs	r18, 2
    a166:	16 c0       	rjmp	.+44     	; 0xa194 <vfprintf+0x694>
    a168:	21 ff       	sbrs	r18, 1
    a16a:	03 c0       	rjmp	.+6      	; 0xa172 <vfprintf+0x672>
    a16c:	88 e5       	ldi	r24, 0x58	; 88
    a16e:	90 e0       	ldi	r25, 0x00	; 0
    a170:	02 c0       	rjmp	.+4      	; 0xa176 <vfprintf+0x676>
    a172:	88 e7       	ldi	r24, 0x78	; 120
    a174:	90 e0       	ldi	r25, 0x00	; 0
    a176:	b7 01       	movw	r22, r14
    a178:	0c c0       	rjmp	.+24     	; 0xa192 <vfprintf+0x692>
    a17a:	82 2f       	mov	r24, r18
    a17c:	86 78       	andi	r24, 0x86	; 134
    a17e:	51 f0       	breq	.+20     	; 0xa194 <vfprintf+0x694>
    a180:	21 fd       	sbrc	r18, 1
    a182:	02 c0       	rjmp	.+4      	; 0xa188 <vfprintf+0x688>
    a184:	80 e2       	ldi	r24, 0x20	; 32
    a186:	01 c0       	rjmp	.+2      	; 0xa18a <vfprintf+0x68a>
    a188:	8b e2       	ldi	r24, 0x2B	; 43
    a18a:	27 fd       	sbrc	r18, 7
    a18c:	8d e2       	ldi	r24, 0x2D	; 45
    a18e:	b7 01       	movw	r22, r14
    a190:	90 e0       	ldi	r25, 0x00	; 0
    a192:	5a d3       	rcall	.+1716   	; 0xa848 <fputc>
    a194:	c1 16       	cp	r12, r17
    a196:	30 f4       	brcc	.+12     	; 0xa1a4 <vfprintf+0x6a4>
    a198:	b7 01       	movw	r22, r14
    a19a:	80 e3       	ldi	r24, 0x30	; 48
    a19c:	90 e0       	ldi	r25, 0x00	; 0
    a19e:	54 d3       	rcall	.+1704   	; 0xa848 <fputc>
    a1a0:	11 50       	subi	r17, 0x01	; 1
    a1a2:	f8 cf       	rjmp	.-16     	; 0xa194 <vfprintf+0x694>
    a1a4:	ca 94       	dec	r12
    a1a6:	f4 01       	movw	r30, r8
    a1a8:	ec 0d       	add	r30, r12
    a1aa:	f1 1d       	adc	r31, r1
    a1ac:	80 81       	ld	r24, Z
    a1ae:	b7 01       	movw	r22, r14
    a1b0:	90 e0       	ldi	r25, 0x00	; 0
    a1b2:	4a d3       	rcall	.+1684   	; 0xa848 <fputc>
    a1b4:	c1 10       	cpse	r12, r1
    a1b6:	f6 cf       	rjmp	.-20     	; 0xa1a4 <vfprintf+0x6a4>
    a1b8:	55 20       	and	r5, r5
    a1ba:	09 f4       	brne	.+2      	; 0xa1be <vfprintf+0x6be>
    a1bc:	dd cc       	rjmp	.-1606   	; 0x9b78 <vfprintf+0x78>
    a1be:	b7 01       	movw	r22, r14
    a1c0:	80 e2       	ldi	r24, 0x20	; 32
    a1c2:	90 e0       	ldi	r25, 0x00	; 0
    a1c4:	41 d3       	rcall	.+1666   	; 0xa848 <fputc>
    a1c6:	5a 94       	dec	r5
    a1c8:	f7 cf       	rjmp	.-18     	; 0xa1b8 <vfprintf+0x6b8>
    a1ca:	f7 01       	movw	r30, r14
    a1cc:	86 81       	ldd	r24, Z+6	; 0x06
    a1ce:	97 81       	ldd	r25, Z+7	; 0x07
    a1d0:	02 c0       	rjmp	.+4      	; 0xa1d6 <vfprintf+0x6d6>
    a1d2:	8f ef       	ldi	r24, 0xFF	; 255
    a1d4:	9f ef       	ldi	r25, 0xFF	; 255
    a1d6:	63 96       	adiw	r28, 0x13	; 19
    a1d8:	cd bf       	out	0x3d, r28	; 61
    a1da:	de bf       	out	0x3e, r29	; 62
    a1dc:	df 91       	pop	r29
    a1de:	cf 91       	pop	r28
    a1e0:	1f 91       	pop	r17
    a1e2:	0f 91       	pop	r16
    a1e4:	ff 90       	pop	r15
    a1e6:	ef 90       	pop	r14
    a1e8:	df 90       	pop	r13
    a1ea:	cf 90       	pop	r12
    a1ec:	bf 90       	pop	r11
    a1ee:	af 90       	pop	r10
    a1f0:	9f 90       	pop	r9
    a1f2:	8f 90       	pop	r8
    a1f4:	7f 90       	pop	r7
    a1f6:	6f 90       	pop	r6
    a1f8:	5f 90       	pop	r5
    a1fa:	4f 90       	pop	r4
    a1fc:	3f 90       	pop	r3
    a1fe:	2f 90       	pop	r2
    a200:	08 95       	ret

0000a202 <__udivmodhi4>:
    a202:	aa 1b       	sub	r26, r26
    a204:	bb 1b       	sub	r27, r27
    a206:	51 e1       	ldi	r21, 0x11	; 17
    a208:	07 c0       	rjmp	.+14     	; 0xa218 <__udivmodhi4_ep>

0000a20a <__udivmodhi4_loop>:
    a20a:	aa 1f       	adc	r26, r26
    a20c:	bb 1f       	adc	r27, r27
    a20e:	a6 17       	cp	r26, r22
    a210:	b7 07       	cpc	r27, r23
    a212:	10 f0       	brcs	.+4      	; 0xa218 <__udivmodhi4_ep>
    a214:	a6 1b       	sub	r26, r22
    a216:	b7 0b       	sbc	r27, r23

0000a218 <__udivmodhi4_ep>:
    a218:	88 1f       	adc	r24, r24
    a21a:	99 1f       	adc	r25, r25
    a21c:	5a 95       	dec	r21
    a21e:	a9 f7       	brne	.-22     	; 0xa20a <__udivmodhi4_loop>
    a220:	80 95       	com	r24
    a222:	90 95       	com	r25
    a224:	bc 01       	movw	r22, r24
    a226:	cd 01       	movw	r24, r26
    a228:	08 95       	ret

0000a22a <__divmodhi4>:
    a22a:	97 fb       	bst	r25, 7
    a22c:	07 2e       	mov	r0, r23
    a22e:	16 f4       	brtc	.+4      	; 0xa234 <__divmodhi4+0xa>
    a230:	00 94       	com	r0
    a232:	06 d0       	rcall	.+12     	; 0xa240 <__divmodhi4_neg1>
    a234:	77 fd       	sbrc	r23, 7
    a236:	08 d0       	rcall	.+16     	; 0xa248 <__divmodhi4_neg2>
    a238:	e4 df       	rcall	.-56     	; 0xa202 <__udivmodhi4>
    a23a:	07 fc       	sbrc	r0, 7
    a23c:	05 d0       	rcall	.+10     	; 0xa248 <__divmodhi4_neg2>
    a23e:	3e f4       	brtc	.+14     	; 0xa24e <__divmodhi4_exit>

0000a240 <__divmodhi4_neg1>:
    a240:	90 95       	com	r25
    a242:	81 95       	neg	r24
    a244:	9f 4f       	sbci	r25, 0xFF	; 255
    a246:	08 95       	ret

0000a248 <__divmodhi4_neg2>:
    a248:	70 95       	com	r23
    a24a:	61 95       	neg	r22
    a24c:	7f 4f       	sbci	r23, 0xFF	; 255

0000a24e <__divmodhi4_exit>:
    a24e:	08 95       	ret

0000a250 <__udivmodsi4>:
    a250:	a1 e2       	ldi	r26, 0x21	; 33
    a252:	1a 2e       	mov	r1, r26
    a254:	aa 1b       	sub	r26, r26
    a256:	bb 1b       	sub	r27, r27
    a258:	fd 01       	movw	r30, r26
    a25a:	0d c0       	rjmp	.+26     	; 0xa276 <__udivmodsi4_ep>

0000a25c <__udivmodsi4_loop>:
    a25c:	aa 1f       	adc	r26, r26
    a25e:	bb 1f       	adc	r27, r27
    a260:	ee 1f       	adc	r30, r30
    a262:	ff 1f       	adc	r31, r31
    a264:	a2 17       	cp	r26, r18
    a266:	b3 07       	cpc	r27, r19
    a268:	e4 07       	cpc	r30, r20
    a26a:	f5 07       	cpc	r31, r21
    a26c:	20 f0       	brcs	.+8      	; 0xa276 <__udivmodsi4_ep>
    a26e:	a2 1b       	sub	r26, r18
    a270:	b3 0b       	sbc	r27, r19
    a272:	e4 0b       	sbc	r30, r20
    a274:	f5 0b       	sbc	r31, r21

0000a276 <__udivmodsi4_ep>:
    a276:	66 1f       	adc	r22, r22
    a278:	77 1f       	adc	r23, r23
    a27a:	88 1f       	adc	r24, r24
    a27c:	99 1f       	adc	r25, r25
    a27e:	1a 94       	dec	r1
    a280:	69 f7       	brne	.-38     	; 0xa25c <__udivmodsi4_loop>
    a282:	60 95       	com	r22
    a284:	70 95       	com	r23
    a286:	80 95       	com	r24
    a288:	90 95       	com	r25
    a28a:	9b 01       	movw	r18, r22
    a28c:	ac 01       	movw	r20, r24
    a28e:	bd 01       	movw	r22, r26
    a290:	cf 01       	movw	r24, r30
    a292:	08 95       	ret

0000a294 <__tablejump2__>:
    a294:	ee 0f       	add	r30, r30
    a296:	ff 1f       	adc	r31, r31

0000a298 <__tablejump__>:
    a298:	05 90       	lpm	r0, Z+
    a29a:	f4 91       	lpm	r31, Z
    a29c:	e0 2d       	mov	r30, r0
    a29e:	19 94       	eijmp

0000a2a0 <__umulhisi3>:
    a2a0:	a2 9f       	mul	r26, r18
    a2a2:	b0 01       	movw	r22, r0
    a2a4:	b3 9f       	mul	r27, r19
    a2a6:	c0 01       	movw	r24, r0
    a2a8:	a3 9f       	mul	r26, r19
    a2aa:	70 0d       	add	r23, r0
    a2ac:	81 1d       	adc	r24, r1
    a2ae:	11 24       	eor	r1, r1
    a2b0:	91 1d       	adc	r25, r1
    a2b2:	b2 9f       	mul	r27, r18
    a2b4:	70 0d       	add	r23, r0
    a2b6:	81 1d       	adc	r24, r1
    a2b8:	11 24       	eor	r1, r1
    a2ba:	91 1d       	adc	r25, r1
    a2bc:	08 95       	ret

0000a2be <__muluhisi3>:
    a2be:	f0 df       	rcall	.-32     	; 0xa2a0 <__umulhisi3>
    a2c0:	a5 9f       	mul	r26, r21
    a2c2:	90 0d       	add	r25, r0
    a2c4:	b4 9f       	mul	r27, r20
    a2c6:	90 0d       	add	r25, r0
    a2c8:	a4 9f       	mul	r26, r20
    a2ca:	80 0d       	add	r24, r0
    a2cc:	91 1d       	adc	r25, r1
    a2ce:	11 24       	eor	r1, r1
    a2d0:	08 95       	ret

0000a2d2 <calloc>:
    a2d2:	0f 93       	push	r16
    a2d4:	1f 93       	push	r17
    a2d6:	cf 93       	push	r28
    a2d8:	df 93       	push	r29
    a2da:	86 9f       	mul	r24, r22
    a2dc:	80 01       	movw	r16, r0
    a2de:	87 9f       	mul	r24, r23
    a2e0:	10 0d       	add	r17, r0
    a2e2:	96 9f       	mul	r25, r22
    a2e4:	10 0d       	add	r17, r0
    a2e6:	11 24       	eor	r1, r1
    a2e8:	c8 01       	movw	r24, r16
    a2ea:	0d d0       	rcall	.+26     	; 0xa306 <malloc>
    a2ec:	ec 01       	movw	r28, r24
    a2ee:	00 97       	sbiw	r24, 0x00	; 0
    a2f0:	21 f0       	breq	.+8      	; 0xa2fa <calloc+0x28>
    a2f2:	a8 01       	movw	r20, r16
    a2f4:	60 e0       	ldi	r22, 0x00	; 0
    a2f6:	70 e0       	ldi	r23, 0x00	; 0
    a2f8:	21 d2       	rcall	.+1090   	; 0xa73c <memset>
    a2fa:	ce 01       	movw	r24, r28
    a2fc:	df 91       	pop	r29
    a2fe:	cf 91       	pop	r28
    a300:	1f 91       	pop	r17
    a302:	0f 91       	pop	r16
    a304:	08 95       	ret

0000a306 <malloc>:
    a306:	cf 93       	push	r28
    a308:	df 93       	push	r29
    a30a:	82 30       	cpi	r24, 0x02	; 2
    a30c:	91 05       	cpc	r25, r1
    a30e:	10 f4       	brcc	.+4      	; 0xa314 <malloc+0xe>
    a310:	82 e0       	ldi	r24, 0x02	; 2
    a312:	90 e0       	ldi	r25, 0x00	; 0
    a314:	e0 91 e1 2c 	lds	r30, 0x2CE1
    a318:	f0 91 e2 2c 	lds	r31, 0x2CE2
    a31c:	20 e0       	ldi	r18, 0x00	; 0
    a31e:	30 e0       	ldi	r19, 0x00	; 0
    a320:	a0 e0       	ldi	r26, 0x00	; 0
    a322:	b0 e0       	ldi	r27, 0x00	; 0
    a324:	30 97       	sbiw	r30, 0x00	; 0
    a326:	39 f1       	breq	.+78     	; 0xa376 <malloc+0x70>
    a328:	40 81       	ld	r20, Z
    a32a:	51 81       	ldd	r21, Z+1	; 0x01
    a32c:	48 17       	cp	r20, r24
    a32e:	59 07       	cpc	r21, r25
    a330:	b8 f0       	brcs	.+46     	; 0xa360 <malloc+0x5a>
    a332:	48 17       	cp	r20, r24
    a334:	59 07       	cpc	r21, r25
    a336:	71 f4       	brne	.+28     	; 0xa354 <malloc+0x4e>
    a338:	82 81       	ldd	r24, Z+2	; 0x02
    a33a:	93 81       	ldd	r25, Z+3	; 0x03
    a33c:	10 97       	sbiw	r26, 0x00	; 0
    a33e:	29 f0       	breq	.+10     	; 0xa34a <malloc+0x44>
    a340:	12 96       	adiw	r26, 0x02	; 2
    a342:	8d 93       	st	X+, r24
    a344:	9c 93       	st	X, r25
    a346:	13 97       	sbiw	r26, 0x03	; 3
    a348:	2c c0       	rjmp	.+88     	; 0xa3a2 <malloc+0x9c>
    a34a:	80 93 e1 2c 	sts	0x2CE1, r24
    a34e:	90 93 e2 2c 	sts	0x2CE2, r25
    a352:	27 c0       	rjmp	.+78     	; 0xa3a2 <malloc+0x9c>
    a354:	21 15       	cp	r18, r1
    a356:	31 05       	cpc	r19, r1
    a358:	31 f0       	breq	.+12     	; 0xa366 <malloc+0x60>
    a35a:	42 17       	cp	r20, r18
    a35c:	53 07       	cpc	r21, r19
    a35e:	18 f0       	brcs	.+6      	; 0xa366 <malloc+0x60>
    a360:	a9 01       	movw	r20, r18
    a362:	db 01       	movw	r26, r22
    a364:	01 c0       	rjmp	.+2      	; 0xa368 <malloc+0x62>
    a366:	ef 01       	movw	r28, r30
    a368:	9a 01       	movw	r18, r20
    a36a:	bd 01       	movw	r22, r26
    a36c:	df 01       	movw	r26, r30
    a36e:	02 80       	ldd	r0, Z+2	; 0x02
    a370:	f3 81       	ldd	r31, Z+3	; 0x03
    a372:	e0 2d       	mov	r30, r0
    a374:	d7 cf       	rjmp	.-82     	; 0xa324 <malloc+0x1e>
    a376:	21 15       	cp	r18, r1
    a378:	31 05       	cpc	r19, r1
    a37a:	f9 f0       	breq	.+62     	; 0xa3ba <malloc+0xb4>
    a37c:	28 1b       	sub	r18, r24
    a37e:	39 0b       	sbc	r19, r25
    a380:	24 30       	cpi	r18, 0x04	; 4
    a382:	31 05       	cpc	r19, r1
    a384:	80 f4       	brcc	.+32     	; 0xa3a6 <malloc+0xa0>
    a386:	8a 81       	ldd	r24, Y+2	; 0x02
    a388:	9b 81       	ldd	r25, Y+3	; 0x03
    a38a:	61 15       	cp	r22, r1
    a38c:	71 05       	cpc	r23, r1
    a38e:	21 f0       	breq	.+8      	; 0xa398 <malloc+0x92>
    a390:	fb 01       	movw	r30, r22
    a392:	82 83       	std	Z+2, r24	; 0x02
    a394:	93 83       	std	Z+3, r25	; 0x03
    a396:	04 c0       	rjmp	.+8      	; 0xa3a0 <malloc+0x9a>
    a398:	80 93 e1 2c 	sts	0x2CE1, r24
    a39c:	90 93 e2 2c 	sts	0x2CE2, r25
    a3a0:	fe 01       	movw	r30, r28
    a3a2:	32 96       	adiw	r30, 0x02	; 2
    a3a4:	44 c0       	rjmp	.+136    	; 0xa42e <malloc+0x128>
    a3a6:	fe 01       	movw	r30, r28
    a3a8:	e2 0f       	add	r30, r18
    a3aa:	f3 1f       	adc	r31, r19
    a3ac:	81 93       	st	Z+, r24
    a3ae:	91 93       	st	Z+, r25
    a3b0:	22 50       	subi	r18, 0x02	; 2
    a3b2:	31 09       	sbc	r19, r1
    a3b4:	28 83       	st	Y, r18
    a3b6:	39 83       	std	Y+1, r19	; 0x01
    a3b8:	3a c0       	rjmp	.+116    	; 0xa42e <malloc+0x128>
    a3ba:	20 91 df 2c 	lds	r18, 0x2CDF
    a3be:	30 91 e0 2c 	lds	r19, 0x2CE0
    a3c2:	23 2b       	or	r18, r19
    a3c4:	41 f4       	brne	.+16     	; 0xa3d6 <malloc+0xd0>
    a3c6:	20 91 02 20 	lds	r18, 0x2002
    a3ca:	30 91 03 20 	lds	r19, 0x2003
    a3ce:	20 93 df 2c 	sts	0x2CDF, r18
    a3d2:	30 93 e0 2c 	sts	0x2CE0, r19
    a3d6:	20 91 00 20 	lds	r18, 0x2000
    a3da:	30 91 01 20 	lds	r19, 0x2001
    a3de:	21 15       	cp	r18, r1
    a3e0:	31 05       	cpc	r19, r1
    a3e2:	41 f4       	brne	.+16     	; 0xa3f4 <malloc+0xee>
    a3e4:	2d b7       	in	r18, 0x3d	; 61
    a3e6:	3e b7       	in	r19, 0x3e	; 62
    a3e8:	40 91 04 20 	lds	r20, 0x2004
    a3ec:	50 91 05 20 	lds	r21, 0x2005
    a3f0:	24 1b       	sub	r18, r20
    a3f2:	35 0b       	sbc	r19, r21
    a3f4:	e0 91 df 2c 	lds	r30, 0x2CDF
    a3f8:	f0 91 e0 2c 	lds	r31, 0x2CE0
    a3fc:	e2 17       	cp	r30, r18
    a3fe:	f3 07       	cpc	r31, r19
    a400:	a0 f4       	brcc	.+40     	; 0xa42a <malloc+0x124>
    a402:	2e 1b       	sub	r18, r30
    a404:	3f 0b       	sbc	r19, r31
    a406:	28 17       	cp	r18, r24
    a408:	39 07       	cpc	r19, r25
    a40a:	78 f0       	brcs	.+30     	; 0xa42a <malloc+0x124>
    a40c:	ac 01       	movw	r20, r24
    a40e:	4e 5f       	subi	r20, 0xFE	; 254
    a410:	5f 4f       	sbci	r21, 0xFF	; 255
    a412:	24 17       	cp	r18, r20
    a414:	35 07       	cpc	r19, r21
    a416:	48 f0       	brcs	.+18     	; 0xa42a <malloc+0x124>
    a418:	4e 0f       	add	r20, r30
    a41a:	5f 1f       	adc	r21, r31
    a41c:	40 93 df 2c 	sts	0x2CDF, r20
    a420:	50 93 e0 2c 	sts	0x2CE0, r21
    a424:	81 93       	st	Z+, r24
    a426:	91 93       	st	Z+, r25
    a428:	02 c0       	rjmp	.+4      	; 0xa42e <malloc+0x128>
    a42a:	e0 e0       	ldi	r30, 0x00	; 0
    a42c:	f0 e0       	ldi	r31, 0x00	; 0
    a42e:	cf 01       	movw	r24, r30
    a430:	df 91       	pop	r29
    a432:	cf 91       	pop	r28
    a434:	08 95       	ret

0000a436 <free>:
    a436:	cf 93       	push	r28
    a438:	df 93       	push	r29
    a43a:	00 97       	sbiw	r24, 0x00	; 0
    a43c:	09 f4       	brne	.+2      	; 0xa440 <free+0xa>
    a43e:	87 c0       	rjmp	.+270    	; 0xa54e <free+0x118>
    a440:	fc 01       	movw	r30, r24
    a442:	32 97       	sbiw	r30, 0x02	; 2
    a444:	12 82       	std	Z+2, r1	; 0x02
    a446:	13 82       	std	Z+3, r1	; 0x03
    a448:	c0 91 e1 2c 	lds	r28, 0x2CE1
    a44c:	d0 91 e2 2c 	lds	r29, 0x2CE2
    a450:	20 97       	sbiw	r28, 0x00	; 0
    a452:	81 f4       	brne	.+32     	; 0xa474 <free+0x3e>
    a454:	20 81       	ld	r18, Z
    a456:	31 81       	ldd	r19, Z+1	; 0x01
    a458:	28 0f       	add	r18, r24
    a45a:	39 1f       	adc	r19, r25
    a45c:	80 91 df 2c 	lds	r24, 0x2CDF
    a460:	90 91 e0 2c 	lds	r25, 0x2CE0
    a464:	82 17       	cp	r24, r18
    a466:	93 07       	cpc	r25, r19
    a468:	79 f5       	brne	.+94     	; 0xa4c8 <free+0x92>
    a46a:	e0 93 df 2c 	sts	0x2CDF, r30
    a46e:	f0 93 e0 2c 	sts	0x2CE0, r31
    a472:	6d c0       	rjmp	.+218    	; 0xa54e <free+0x118>
    a474:	de 01       	movw	r26, r28
    a476:	20 e0       	ldi	r18, 0x00	; 0
    a478:	30 e0       	ldi	r19, 0x00	; 0
    a47a:	ae 17       	cp	r26, r30
    a47c:	bf 07       	cpc	r27, r31
    a47e:	50 f4       	brcc	.+20     	; 0xa494 <free+0x5e>
    a480:	12 96       	adiw	r26, 0x02	; 2
    a482:	4d 91       	ld	r20, X+
    a484:	5c 91       	ld	r21, X
    a486:	13 97       	sbiw	r26, 0x03	; 3
    a488:	9d 01       	movw	r18, r26
    a48a:	41 15       	cp	r20, r1
    a48c:	51 05       	cpc	r21, r1
    a48e:	09 f1       	breq	.+66     	; 0xa4d2 <free+0x9c>
    a490:	da 01       	movw	r26, r20
    a492:	f3 cf       	rjmp	.-26     	; 0xa47a <free+0x44>
    a494:	a2 83       	std	Z+2, r26	; 0x02
    a496:	b3 83       	std	Z+3, r27	; 0x03
    a498:	40 81       	ld	r20, Z
    a49a:	51 81       	ldd	r21, Z+1	; 0x01
    a49c:	84 0f       	add	r24, r20
    a49e:	95 1f       	adc	r25, r21
    a4a0:	8a 17       	cp	r24, r26
    a4a2:	9b 07       	cpc	r25, r27
    a4a4:	71 f4       	brne	.+28     	; 0xa4c2 <free+0x8c>
    a4a6:	8d 91       	ld	r24, X+
    a4a8:	9c 91       	ld	r25, X
    a4aa:	11 97       	sbiw	r26, 0x01	; 1
    a4ac:	84 0f       	add	r24, r20
    a4ae:	95 1f       	adc	r25, r21
    a4b0:	02 96       	adiw	r24, 0x02	; 2
    a4b2:	80 83       	st	Z, r24
    a4b4:	91 83       	std	Z+1, r25	; 0x01
    a4b6:	12 96       	adiw	r26, 0x02	; 2
    a4b8:	8d 91       	ld	r24, X+
    a4ba:	9c 91       	ld	r25, X
    a4bc:	13 97       	sbiw	r26, 0x03	; 3
    a4be:	82 83       	std	Z+2, r24	; 0x02
    a4c0:	93 83       	std	Z+3, r25	; 0x03
    a4c2:	21 15       	cp	r18, r1
    a4c4:	31 05       	cpc	r19, r1
    a4c6:	29 f4       	brne	.+10     	; 0xa4d2 <free+0x9c>
    a4c8:	e0 93 e1 2c 	sts	0x2CE1, r30
    a4cc:	f0 93 e2 2c 	sts	0x2CE2, r31
    a4d0:	3e c0       	rjmp	.+124    	; 0xa54e <free+0x118>
    a4d2:	d9 01       	movw	r26, r18
    a4d4:	12 96       	adiw	r26, 0x02	; 2
    a4d6:	ed 93       	st	X+, r30
    a4d8:	fc 93       	st	X, r31
    a4da:	13 97       	sbiw	r26, 0x03	; 3
    a4dc:	4d 91       	ld	r20, X+
    a4de:	5d 91       	ld	r21, X+
    a4e0:	a4 0f       	add	r26, r20
    a4e2:	b5 1f       	adc	r27, r21
    a4e4:	ea 17       	cp	r30, r26
    a4e6:	fb 07       	cpc	r31, r27
    a4e8:	79 f4       	brne	.+30     	; 0xa508 <free+0xd2>
    a4ea:	80 81       	ld	r24, Z
    a4ec:	91 81       	ldd	r25, Z+1	; 0x01
    a4ee:	84 0f       	add	r24, r20
    a4f0:	95 1f       	adc	r25, r21
    a4f2:	02 96       	adiw	r24, 0x02	; 2
    a4f4:	d9 01       	movw	r26, r18
    a4f6:	8d 93       	st	X+, r24
    a4f8:	9c 93       	st	X, r25
    a4fa:	11 97       	sbiw	r26, 0x01	; 1
    a4fc:	82 81       	ldd	r24, Z+2	; 0x02
    a4fe:	93 81       	ldd	r25, Z+3	; 0x03
    a500:	12 96       	adiw	r26, 0x02	; 2
    a502:	8d 93       	st	X+, r24
    a504:	9c 93       	st	X, r25
    a506:	13 97       	sbiw	r26, 0x03	; 3
    a508:	e0 e0       	ldi	r30, 0x00	; 0
    a50a:	f0 e0       	ldi	r31, 0x00	; 0
    a50c:	8a 81       	ldd	r24, Y+2	; 0x02
    a50e:	9b 81       	ldd	r25, Y+3	; 0x03
    a510:	00 97       	sbiw	r24, 0x00	; 0
    a512:	19 f0       	breq	.+6      	; 0xa51a <free+0xe4>
    a514:	fe 01       	movw	r30, r28
    a516:	ec 01       	movw	r28, r24
    a518:	f9 cf       	rjmp	.-14     	; 0xa50c <free+0xd6>
    a51a:	ce 01       	movw	r24, r28
    a51c:	02 96       	adiw	r24, 0x02	; 2
    a51e:	28 81       	ld	r18, Y
    a520:	39 81       	ldd	r19, Y+1	; 0x01
    a522:	82 0f       	add	r24, r18
    a524:	93 1f       	adc	r25, r19
    a526:	20 91 df 2c 	lds	r18, 0x2CDF
    a52a:	30 91 e0 2c 	lds	r19, 0x2CE0
    a52e:	28 17       	cp	r18, r24
    a530:	39 07       	cpc	r19, r25
    a532:	69 f4       	brne	.+26     	; 0xa54e <free+0x118>
    a534:	30 97       	sbiw	r30, 0x00	; 0
    a536:	29 f4       	brne	.+10     	; 0xa542 <free+0x10c>
    a538:	10 92 e1 2c 	sts	0x2CE1, r1
    a53c:	10 92 e2 2c 	sts	0x2CE2, r1
    a540:	02 c0       	rjmp	.+4      	; 0xa546 <free+0x110>
    a542:	12 82       	std	Z+2, r1	; 0x02
    a544:	13 82       	std	Z+3, r1	; 0x03
    a546:	c0 93 df 2c 	sts	0x2CDF, r28
    a54a:	d0 93 e0 2c 	sts	0x2CE0, r29
    a54e:	df 91       	pop	r29
    a550:	cf 91       	pop	r28
    a552:	08 95       	ret

0000a554 <__ftoa_engine>:
    a554:	28 30       	cpi	r18, 0x08	; 8
    a556:	08 f0       	brcs	.+2      	; 0xa55a <__ftoa_engine+0x6>
    a558:	27 e0       	ldi	r18, 0x07	; 7
    a55a:	33 27       	eor	r19, r19
    a55c:	da 01       	movw	r26, r20
    a55e:	99 0f       	add	r25, r25
    a560:	31 1d       	adc	r19, r1
    a562:	87 fd       	sbrc	r24, 7
    a564:	91 60       	ori	r25, 0x01	; 1
    a566:	00 96       	adiw	r24, 0x00	; 0
    a568:	61 05       	cpc	r22, r1
    a56a:	71 05       	cpc	r23, r1
    a56c:	39 f4       	brne	.+14     	; 0xa57c <__ftoa_engine+0x28>
    a56e:	32 60       	ori	r19, 0x02	; 2
    a570:	2e 5f       	subi	r18, 0xFE	; 254
    a572:	3d 93       	st	X+, r19
    a574:	30 e3       	ldi	r19, 0x30	; 48
    a576:	2a 95       	dec	r18
    a578:	e1 f7       	brne	.-8      	; 0xa572 <__ftoa_engine+0x1e>
    a57a:	08 95       	ret
    a57c:	9f 3f       	cpi	r25, 0xFF	; 255
    a57e:	30 f0       	brcs	.+12     	; 0xa58c <__ftoa_engine+0x38>
    a580:	80 38       	cpi	r24, 0x80	; 128
    a582:	71 05       	cpc	r23, r1
    a584:	61 05       	cpc	r22, r1
    a586:	09 f0       	breq	.+2      	; 0xa58a <__ftoa_engine+0x36>
    a588:	3c 5f       	subi	r19, 0xFC	; 252
    a58a:	3c 5f       	subi	r19, 0xFC	; 252
    a58c:	3d 93       	st	X+, r19
    a58e:	91 30       	cpi	r25, 0x01	; 1
    a590:	08 f0       	brcs	.+2      	; 0xa594 <__ftoa_engine+0x40>
    a592:	80 68       	ori	r24, 0x80	; 128
    a594:	91 1d       	adc	r25, r1
    a596:	df 93       	push	r29
    a598:	cf 93       	push	r28
    a59a:	1f 93       	push	r17
    a59c:	0f 93       	push	r16
    a59e:	ff 92       	push	r15
    a5a0:	ef 92       	push	r14
    a5a2:	19 2f       	mov	r17, r25
    a5a4:	98 7f       	andi	r25, 0xF8	; 248
    a5a6:	96 95       	lsr	r25
    a5a8:	e9 2f       	mov	r30, r25
    a5aa:	96 95       	lsr	r25
    a5ac:	96 95       	lsr	r25
    a5ae:	e9 0f       	add	r30, r25
    a5b0:	ff 27       	eor	r31, r31
    a5b2:	eb 55       	subi	r30, 0x5B	; 91
    a5b4:	f2 4f       	sbci	r31, 0xF2	; 242
    a5b6:	99 27       	eor	r25, r25
    a5b8:	33 27       	eor	r19, r19
    a5ba:	ee 24       	eor	r14, r14
    a5bc:	ff 24       	eor	r15, r15
    a5be:	a7 01       	movw	r20, r14
    a5c0:	e7 01       	movw	r28, r14
    a5c2:	05 90       	lpm	r0, Z+
    a5c4:	08 94       	sec
    a5c6:	07 94       	ror	r0
    a5c8:	28 f4       	brcc	.+10     	; 0xa5d4 <__ftoa_engine+0x80>
    a5ca:	36 0f       	add	r19, r22
    a5cc:	e7 1e       	adc	r14, r23
    a5ce:	f8 1e       	adc	r15, r24
    a5d0:	49 1f       	adc	r20, r25
    a5d2:	51 1d       	adc	r21, r1
    a5d4:	66 0f       	add	r22, r22
    a5d6:	77 1f       	adc	r23, r23
    a5d8:	88 1f       	adc	r24, r24
    a5da:	99 1f       	adc	r25, r25
    a5dc:	06 94       	lsr	r0
    a5de:	a1 f7       	brne	.-24     	; 0xa5c8 <__ftoa_engine+0x74>
    a5e0:	05 90       	lpm	r0, Z+
    a5e2:	07 94       	ror	r0
    a5e4:	28 f4       	brcc	.+10     	; 0xa5f0 <__ftoa_engine+0x9c>
    a5e6:	e7 0e       	add	r14, r23
    a5e8:	f8 1e       	adc	r15, r24
    a5ea:	49 1f       	adc	r20, r25
    a5ec:	56 1f       	adc	r21, r22
    a5ee:	c1 1d       	adc	r28, r1
    a5f0:	77 0f       	add	r23, r23
    a5f2:	88 1f       	adc	r24, r24
    a5f4:	99 1f       	adc	r25, r25
    a5f6:	66 1f       	adc	r22, r22
    a5f8:	06 94       	lsr	r0
    a5fa:	a1 f7       	brne	.-24     	; 0xa5e4 <__ftoa_engine+0x90>
    a5fc:	05 90       	lpm	r0, Z+
    a5fe:	07 94       	ror	r0
    a600:	28 f4       	brcc	.+10     	; 0xa60c <__ftoa_engine+0xb8>
    a602:	f8 0e       	add	r15, r24
    a604:	49 1f       	adc	r20, r25
    a606:	56 1f       	adc	r21, r22
    a608:	c7 1f       	adc	r28, r23
    a60a:	d1 1d       	adc	r29, r1
    a60c:	88 0f       	add	r24, r24
    a60e:	99 1f       	adc	r25, r25
    a610:	66 1f       	adc	r22, r22
    a612:	77 1f       	adc	r23, r23
    a614:	06 94       	lsr	r0
    a616:	a1 f7       	brne	.-24     	; 0xa600 <__ftoa_engine+0xac>
    a618:	05 90       	lpm	r0, Z+
    a61a:	07 94       	ror	r0
    a61c:	20 f4       	brcc	.+8      	; 0xa626 <__ftoa_engine+0xd2>
    a61e:	49 0f       	add	r20, r25
    a620:	56 1f       	adc	r21, r22
    a622:	c7 1f       	adc	r28, r23
    a624:	d8 1f       	adc	r29, r24
    a626:	99 0f       	add	r25, r25
    a628:	66 1f       	adc	r22, r22
    a62a:	77 1f       	adc	r23, r23
    a62c:	88 1f       	adc	r24, r24
    a62e:	06 94       	lsr	r0
    a630:	a9 f7       	brne	.-22     	; 0xa61c <__ftoa_engine+0xc8>
    a632:	84 91       	lpm	r24, Z
    a634:	10 95       	com	r17
    a636:	17 70       	andi	r17, 0x07	; 7
    a638:	41 f0       	breq	.+16     	; 0xa64a <__ftoa_engine+0xf6>
    a63a:	d6 95       	lsr	r29
    a63c:	c7 95       	ror	r28
    a63e:	57 95       	ror	r21
    a640:	47 95       	ror	r20
    a642:	f7 94       	ror	r15
    a644:	e7 94       	ror	r14
    a646:	1a 95       	dec	r17
    a648:	c1 f7       	brne	.-16     	; 0xa63a <__ftoa_engine+0xe6>
    a64a:	eb e4       	ldi	r30, 0x4B	; 75
    a64c:	fd e0       	ldi	r31, 0x0D	; 13
    a64e:	68 94       	set
    a650:	15 90       	lpm	r1, Z+
    a652:	15 91       	lpm	r17, Z+
    a654:	35 91       	lpm	r19, Z+
    a656:	65 91       	lpm	r22, Z+
    a658:	95 91       	lpm	r25, Z+
    a65a:	05 90       	lpm	r0, Z+
    a65c:	7f e2       	ldi	r23, 0x2F	; 47
    a65e:	73 95       	inc	r23
    a660:	e1 18       	sub	r14, r1
    a662:	f1 0a       	sbc	r15, r17
    a664:	43 0b       	sbc	r20, r19
    a666:	56 0b       	sbc	r21, r22
    a668:	c9 0b       	sbc	r28, r25
    a66a:	d0 09       	sbc	r29, r0
    a66c:	c0 f7       	brcc	.-16     	; 0xa65e <__ftoa_engine+0x10a>
    a66e:	e1 0c       	add	r14, r1
    a670:	f1 1e       	adc	r15, r17
    a672:	43 1f       	adc	r20, r19
    a674:	56 1f       	adc	r21, r22
    a676:	c9 1f       	adc	r28, r25
    a678:	d0 1d       	adc	r29, r0
    a67a:	7e f4       	brtc	.+30     	; 0xa69a <__ftoa_engine+0x146>
    a67c:	70 33       	cpi	r23, 0x30	; 48
    a67e:	11 f4       	brne	.+4      	; 0xa684 <__ftoa_engine+0x130>
    a680:	8a 95       	dec	r24
    a682:	e6 cf       	rjmp	.-52     	; 0xa650 <__ftoa_engine+0xfc>
    a684:	e8 94       	clt
    a686:	01 50       	subi	r16, 0x01	; 1
    a688:	30 f0       	brcs	.+12     	; 0xa696 <__ftoa_engine+0x142>
    a68a:	08 0f       	add	r16, r24
    a68c:	0a f4       	brpl	.+2      	; 0xa690 <__ftoa_engine+0x13c>
    a68e:	00 27       	eor	r16, r16
    a690:	02 17       	cp	r16, r18
    a692:	08 f4       	brcc	.+2      	; 0xa696 <__ftoa_engine+0x142>
    a694:	20 2f       	mov	r18, r16
    a696:	23 95       	inc	r18
    a698:	02 2f       	mov	r16, r18
    a69a:	7a 33       	cpi	r23, 0x3A	; 58
    a69c:	28 f0       	brcs	.+10     	; 0xa6a8 <__ftoa_engine+0x154>
    a69e:	79 e3       	ldi	r23, 0x39	; 57
    a6a0:	7d 93       	st	X+, r23
    a6a2:	2a 95       	dec	r18
    a6a4:	e9 f7       	brne	.-6      	; 0xa6a0 <__ftoa_engine+0x14c>
    a6a6:	10 c0       	rjmp	.+32     	; 0xa6c8 <__ftoa_engine+0x174>
    a6a8:	7d 93       	st	X+, r23
    a6aa:	2a 95       	dec	r18
    a6ac:	89 f6       	brne	.-94     	; 0xa650 <__ftoa_engine+0xfc>
    a6ae:	06 94       	lsr	r0
    a6b0:	97 95       	ror	r25
    a6b2:	67 95       	ror	r22
    a6b4:	37 95       	ror	r19
    a6b6:	17 95       	ror	r17
    a6b8:	17 94       	ror	r1
    a6ba:	e1 18       	sub	r14, r1
    a6bc:	f1 0a       	sbc	r15, r17
    a6be:	43 0b       	sbc	r20, r19
    a6c0:	56 0b       	sbc	r21, r22
    a6c2:	c9 0b       	sbc	r28, r25
    a6c4:	d0 09       	sbc	r29, r0
    a6c6:	98 f0       	brcs	.+38     	; 0xa6ee <__ftoa_engine+0x19a>
    a6c8:	23 95       	inc	r18
    a6ca:	7e 91       	ld	r23, -X
    a6cc:	73 95       	inc	r23
    a6ce:	7a 33       	cpi	r23, 0x3A	; 58
    a6d0:	08 f0       	brcs	.+2      	; 0xa6d4 <__ftoa_engine+0x180>
    a6d2:	70 e3       	ldi	r23, 0x30	; 48
    a6d4:	7c 93       	st	X, r23
    a6d6:	20 13       	cpse	r18, r16
    a6d8:	b8 f7       	brcc	.-18     	; 0xa6c8 <__ftoa_engine+0x174>
    a6da:	7e 91       	ld	r23, -X
    a6dc:	70 61       	ori	r23, 0x10	; 16
    a6de:	7d 93       	st	X+, r23
    a6e0:	30 f0       	brcs	.+12     	; 0xa6ee <__ftoa_engine+0x19a>
    a6e2:	83 95       	inc	r24
    a6e4:	71 e3       	ldi	r23, 0x31	; 49
    a6e6:	7d 93       	st	X+, r23
    a6e8:	70 e3       	ldi	r23, 0x30	; 48
    a6ea:	2a 95       	dec	r18
    a6ec:	e1 f7       	brne	.-8      	; 0xa6e6 <__ftoa_engine+0x192>
    a6ee:	11 24       	eor	r1, r1
    a6f0:	ef 90       	pop	r14
    a6f2:	ff 90       	pop	r15
    a6f4:	0f 91       	pop	r16
    a6f6:	1f 91       	pop	r17
    a6f8:	cf 91       	pop	r28
    a6fa:	df 91       	pop	r29
    a6fc:	99 27       	eor	r25, r25
    a6fe:	87 fd       	sbrc	r24, 7
    a700:	90 95       	com	r25
    a702:	08 95       	ret

0000a704 <toupper>:
    a704:	91 11       	cpse	r25, r1
    a706:	08 95       	ret
    a708:	81 56       	subi	r24, 0x61	; 97
    a70a:	8a 51       	subi	r24, 0x1A	; 26
    a70c:	08 f4       	brcc	.+2      	; 0xa710 <toupper+0xc>
    a70e:	80 52       	subi	r24, 0x20	; 32
    a710:	85 58       	subi	r24, 0x85	; 133
    a712:	08 95       	ret

0000a714 <strnlen_P>:
    a714:	fc 01       	movw	r30, r24
    a716:	05 90       	lpm	r0, Z+
    a718:	61 50       	subi	r22, 0x01	; 1
    a71a:	70 40       	sbci	r23, 0x00	; 0
    a71c:	01 10       	cpse	r0, r1
    a71e:	d8 f7       	brcc	.-10     	; 0xa716 <strnlen_P+0x2>
    a720:	80 95       	com	r24
    a722:	90 95       	com	r25
    a724:	8e 0f       	add	r24, r30
    a726:	9f 1f       	adc	r25, r31
    a728:	08 95       	ret

0000a72a <memcpy>:
    a72a:	fb 01       	movw	r30, r22
    a72c:	dc 01       	movw	r26, r24
    a72e:	02 c0       	rjmp	.+4      	; 0xa734 <memcpy+0xa>
    a730:	01 90       	ld	r0, Z+
    a732:	0d 92       	st	X+, r0
    a734:	41 50       	subi	r20, 0x01	; 1
    a736:	50 40       	sbci	r21, 0x00	; 0
    a738:	d8 f7       	brcc	.-10     	; 0xa730 <memcpy+0x6>
    a73a:	08 95       	ret

0000a73c <memset>:
    a73c:	dc 01       	movw	r26, r24
    a73e:	01 c0       	rjmp	.+2      	; 0xa742 <memset+0x6>
    a740:	6d 93       	st	X+, r22
    a742:	41 50       	subi	r20, 0x01	; 1
    a744:	50 40       	sbci	r21, 0x00	; 0
    a746:	e0 f7       	brcc	.-8      	; 0xa740 <memset+0x4>
    a748:	08 95       	ret

0000a74a <strcat>:
    a74a:	fb 01       	movw	r30, r22
    a74c:	dc 01       	movw	r26, r24
    a74e:	0d 90       	ld	r0, X+
    a750:	00 20       	and	r0, r0
    a752:	e9 f7       	brne	.-6      	; 0xa74e <strcat+0x4>
    a754:	11 97       	sbiw	r26, 0x01	; 1
    a756:	01 90       	ld	r0, Z+
    a758:	0d 92       	st	X+, r0
    a75a:	00 20       	and	r0, r0
    a75c:	e1 f7       	brne	.-8      	; 0xa756 <strcat+0xc>
    a75e:	08 95       	ret

0000a760 <strchr>:
    a760:	fc 01       	movw	r30, r24
    a762:	81 91       	ld	r24, Z+
    a764:	86 17       	cp	r24, r22
    a766:	21 f0       	breq	.+8      	; 0xa770 <strchr+0x10>
    a768:	88 23       	and	r24, r24
    a76a:	d9 f7       	brne	.-10     	; 0xa762 <strchr+0x2>
    a76c:	99 27       	eor	r25, r25
    a76e:	08 95       	ret
    a770:	31 97       	sbiw	r30, 0x01	; 1
    a772:	cf 01       	movw	r24, r30
    a774:	08 95       	ret

0000a776 <strcpy>:
    a776:	fb 01       	movw	r30, r22
    a778:	dc 01       	movw	r26, r24
    a77a:	01 90       	ld	r0, Z+
    a77c:	0d 92       	st	X+, r0
    a77e:	00 20       	and	r0, r0
    a780:	e1 f7       	brne	.-8      	; 0xa77a <strcpy+0x4>
    a782:	08 95       	ret

0000a784 <strncpy>:
    a784:	fb 01       	movw	r30, r22
    a786:	dc 01       	movw	r26, r24
    a788:	41 50       	subi	r20, 0x01	; 1
    a78a:	50 40       	sbci	r21, 0x00	; 0
    a78c:	48 f0       	brcs	.+18     	; 0xa7a0 <strncpy+0x1c>
    a78e:	01 90       	ld	r0, Z+
    a790:	0d 92       	st	X+, r0
    a792:	00 20       	and	r0, r0
    a794:	c9 f7       	brne	.-14     	; 0xa788 <strncpy+0x4>
    a796:	01 c0       	rjmp	.+2      	; 0xa79a <strncpy+0x16>
    a798:	1d 92       	st	X+, r1
    a79a:	41 50       	subi	r20, 0x01	; 1
    a79c:	50 40       	sbci	r21, 0x00	; 0
    a79e:	e0 f7       	brcc	.-8      	; 0xa798 <strncpy+0x14>
    a7a0:	08 95       	ret

0000a7a2 <strnlen>:
    a7a2:	fc 01       	movw	r30, r24
    a7a4:	61 50       	subi	r22, 0x01	; 1
    a7a6:	70 40       	sbci	r23, 0x00	; 0
    a7a8:	01 90       	ld	r0, Z+
    a7aa:	01 10       	cpse	r0, r1
    a7ac:	d8 f7       	brcc	.-10     	; 0xa7a4 <strnlen+0x2>
    a7ae:	80 95       	com	r24
    a7b0:	90 95       	com	r25
    a7b2:	8e 0f       	add	r24, r30
    a7b4:	9f 1f       	adc	r25, r31
    a7b6:	08 95       	ret

0000a7b8 <strrchr>:
    a7b8:	fc 01       	movw	r30, r24
    a7ba:	81 e0       	ldi	r24, 0x01	; 1
    a7bc:	90 e0       	ldi	r25, 0x00	; 0
    a7be:	01 90       	ld	r0, Z+
    a7c0:	06 16       	cp	r0, r22
    a7c2:	09 f4       	brne	.+2      	; 0xa7c6 <strrchr+0xe>
    a7c4:	cf 01       	movw	r24, r30
    a7c6:	00 20       	and	r0, r0
    a7c8:	d1 f7       	brne	.-12     	; 0xa7be <strrchr+0x6>
    a7ca:	01 97       	sbiw	r24, 0x01	; 1
    a7cc:	08 95       	ret

0000a7ce <strstr>:
    a7ce:	fb 01       	movw	r30, r22
    a7d0:	51 91       	ld	r21, Z+
    a7d2:	55 23       	and	r21, r21
    a7d4:	a9 f0       	breq	.+42     	; 0xa800 <strstr+0x32>
    a7d6:	bf 01       	movw	r22, r30
    a7d8:	dc 01       	movw	r26, r24
    a7da:	4d 91       	ld	r20, X+
    a7dc:	45 17       	cp	r20, r21
    a7de:	41 11       	cpse	r20, r1
    a7e0:	e1 f7       	brne	.-8      	; 0xa7da <strstr+0xc>
    a7e2:	59 f4       	brne	.+22     	; 0xa7fa <strstr+0x2c>
    a7e4:	cd 01       	movw	r24, r26
    a7e6:	01 90       	ld	r0, Z+
    a7e8:	00 20       	and	r0, r0
    a7ea:	49 f0       	breq	.+18     	; 0xa7fe <strstr+0x30>
    a7ec:	4d 91       	ld	r20, X+
    a7ee:	40 15       	cp	r20, r0
    a7f0:	41 11       	cpse	r20, r1
    a7f2:	c9 f3       	breq	.-14     	; 0xa7e6 <strstr+0x18>
    a7f4:	fb 01       	movw	r30, r22
    a7f6:	41 11       	cpse	r20, r1
    a7f8:	ef cf       	rjmp	.-34     	; 0xa7d8 <strstr+0xa>
    a7fa:	81 e0       	ldi	r24, 0x01	; 1
    a7fc:	90 e0       	ldi	r25, 0x00	; 0
    a7fe:	01 97       	sbiw	r24, 0x01	; 1
    a800:	08 95       	ret

0000a802 <__itoa_ncheck>:
    a802:	bb 27       	eor	r27, r27
    a804:	4a 30       	cpi	r20, 0x0A	; 10
    a806:	31 f4       	brne	.+12     	; 0xa814 <__itoa_ncheck+0x12>
    a808:	99 23       	and	r25, r25
    a80a:	22 f4       	brpl	.+8      	; 0xa814 <__itoa_ncheck+0x12>
    a80c:	bd e2       	ldi	r27, 0x2D	; 45
    a80e:	90 95       	com	r25
    a810:	81 95       	neg	r24
    a812:	9f 4f       	sbci	r25, 0xFF	; 255
    a814:	01 c0       	rjmp	.+2      	; 0xa818 <__utoa_common>

0000a816 <__utoa_ncheck>:
    a816:	bb 27       	eor	r27, r27

0000a818 <__utoa_common>:
    a818:	fb 01       	movw	r30, r22
    a81a:	55 27       	eor	r21, r21
    a81c:	aa 27       	eor	r26, r26
    a81e:	88 0f       	add	r24, r24
    a820:	99 1f       	adc	r25, r25
    a822:	aa 1f       	adc	r26, r26
    a824:	a4 17       	cp	r26, r20
    a826:	10 f0       	brcs	.+4      	; 0xa82c <__utoa_common+0x14>
    a828:	a4 1b       	sub	r26, r20
    a82a:	83 95       	inc	r24
    a82c:	50 51       	subi	r21, 0x10	; 16
    a82e:	b9 f7       	brne	.-18     	; 0xa81e <__utoa_common+0x6>
    a830:	a0 5d       	subi	r26, 0xD0	; 208
    a832:	aa 33       	cpi	r26, 0x3A	; 58
    a834:	08 f0       	brcs	.+2      	; 0xa838 <__utoa_common+0x20>
    a836:	a9 5d       	subi	r26, 0xD9	; 217
    a838:	a1 93       	st	Z+, r26
    a83a:	00 97       	sbiw	r24, 0x00	; 0
    a83c:	79 f7       	brne	.-34     	; 0xa81c <__utoa_common+0x4>
    a83e:	b1 11       	cpse	r27, r1
    a840:	b1 93       	st	Z+, r27
    a842:	11 92       	st	Z+, r1
    a844:	cb 01       	movw	r24, r22
    a846:	fe c3       	rjmp	.+2044   	; 0xb044 <strrev>

0000a848 <fputc>:
    a848:	0f 93       	push	r16
    a84a:	1f 93       	push	r17
    a84c:	cf 93       	push	r28
    a84e:	df 93       	push	r29
    a850:	18 2f       	mov	r17, r24
    a852:	09 2f       	mov	r16, r25
    a854:	eb 01       	movw	r28, r22
    a856:	8b 81       	ldd	r24, Y+3	; 0x03
    a858:	81 fd       	sbrc	r24, 1
    a85a:	03 c0       	rjmp	.+6      	; 0xa862 <fputc+0x1a>
    a85c:	8f ef       	ldi	r24, 0xFF	; 255
    a85e:	9f ef       	ldi	r25, 0xFF	; 255
    a860:	20 c0       	rjmp	.+64     	; 0xa8a2 <fputc+0x5a>
    a862:	82 ff       	sbrs	r24, 2
    a864:	10 c0       	rjmp	.+32     	; 0xa886 <fputc+0x3e>
    a866:	4e 81       	ldd	r20, Y+6	; 0x06
    a868:	5f 81       	ldd	r21, Y+7	; 0x07
    a86a:	2c 81       	ldd	r18, Y+4	; 0x04
    a86c:	3d 81       	ldd	r19, Y+5	; 0x05
    a86e:	42 17       	cp	r20, r18
    a870:	53 07       	cpc	r21, r19
    a872:	7c f4       	brge	.+30     	; 0xa892 <fputc+0x4a>
    a874:	e8 81       	ld	r30, Y
    a876:	f9 81       	ldd	r31, Y+1	; 0x01
    a878:	9f 01       	movw	r18, r30
    a87a:	2f 5f       	subi	r18, 0xFF	; 255
    a87c:	3f 4f       	sbci	r19, 0xFF	; 255
    a87e:	28 83       	st	Y, r18
    a880:	39 83       	std	Y+1, r19	; 0x01
    a882:	10 83       	st	Z, r17
    a884:	06 c0       	rjmp	.+12     	; 0xa892 <fputc+0x4a>
    a886:	e8 85       	ldd	r30, Y+8	; 0x08
    a888:	f9 85       	ldd	r31, Y+9	; 0x09
    a88a:	81 2f       	mov	r24, r17
    a88c:	19 95       	eicall
    a88e:	89 2b       	or	r24, r25
    a890:	29 f7       	brne	.-54     	; 0xa85c <fputc+0x14>
    a892:	2e 81       	ldd	r18, Y+6	; 0x06
    a894:	3f 81       	ldd	r19, Y+7	; 0x07
    a896:	2f 5f       	subi	r18, 0xFF	; 255
    a898:	3f 4f       	sbci	r19, 0xFF	; 255
    a89a:	2e 83       	std	Y+6, r18	; 0x06
    a89c:	3f 83       	std	Y+7, r19	; 0x07
    a89e:	81 2f       	mov	r24, r17
    a8a0:	90 2f       	mov	r25, r16
    a8a2:	df 91       	pop	r29
    a8a4:	cf 91       	pop	r28
    a8a6:	1f 91       	pop	r17
    a8a8:	0f 91       	pop	r16
    a8aa:	08 95       	ret

0000a8ac <printf>:
    a8ac:	cf 93       	push	r28
    a8ae:	df 93       	push	r29
    a8b0:	cd b7       	in	r28, 0x3d	; 61
    a8b2:	de b7       	in	r29, 0x3e	; 62
    a8b4:	fe 01       	movw	r30, r28
    a8b6:	36 96       	adiw	r30, 0x06	; 6
    a8b8:	61 91       	ld	r22, Z+
    a8ba:	71 91       	ld	r23, Z+
    a8bc:	af 01       	movw	r20, r30
    a8be:	80 91 e5 2c 	lds	r24, 0x2CE5
    a8c2:	90 91 e6 2c 	lds	r25, 0x2CE6
    a8c6:	1c d9       	rcall	.-3528   	; 0x9b00 <vfprintf>
    a8c8:	df 91       	pop	r29
    a8ca:	cf 91       	pop	r28
    a8cc:	08 95       	ret

0000a8ce <puts>:
    a8ce:	0f 93       	push	r16
    a8d0:	1f 93       	push	r17
    a8d2:	cf 93       	push	r28
    a8d4:	df 93       	push	r29
    a8d6:	e0 91 e5 2c 	lds	r30, 0x2CE5
    a8da:	f0 91 e6 2c 	lds	r31, 0x2CE6
    a8de:	23 81       	ldd	r18, Z+3	; 0x03
    a8e0:	21 ff       	sbrs	r18, 1
    a8e2:	1b c0       	rjmp	.+54     	; 0xa91a <puts+0x4c>
    a8e4:	ec 01       	movw	r28, r24
    a8e6:	00 e0       	ldi	r16, 0x00	; 0
    a8e8:	10 e0       	ldi	r17, 0x00	; 0
    a8ea:	89 91       	ld	r24, Y+
    a8ec:	60 91 e5 2c 	lds	r22, 0x2CE5
    a8f0:	70 91 e6 2c 	lds	r23, 0x2CE6
    a8f4:	db 01       	movw	r26, r22
    a8f6:	18 96       	adiw	r26, 0x08	; 8
    a8f8:	ed 91       	ld	r30, X+
    a8fa:	fc 91       	ld	r31, X
    a8fc:	19 97       	sbiw	r26, 0x09	; 9
    a8fe:	88 23       	and	r24, r24
    a900:	31 f0       	breq	.+12     	; 0xa90e <puts+0x40>
    a902:	19 95       	eicall
    a904:	89 2b       	or	r24, r25
    a906:	89 f3       	breq	.-30     	; 0xa8ea <puts+0x1c>
    a908:	0f ef       	ldi	r16, 0xFF	; 255
    a90a:	1f ef       	ldi	r17, 0xFF	; 255
    a90c:	ee cf       	rjmp	.-36     	; 0xa8ea <puts+0x1c>
    a90e:	8a e0       	ldi	r24, 0x0A	; 10
    a910:	19 95       	eicall
    a912:	89 2b       	or	r24, r25
    a914:	11 f4       	brne	.+4      	; 0xa91a <puts+0x4c>
    a916:	c8 01       	movw	r24, r16
    a918:	02 c0       	rjmp	.+4      	; 0xa91e <puts+0x50>
    a91a:	8f ef       	ldi	r24, 0xFF	; 255
    a91c:	9f ef       	ldi	r25, 0xFF	; 255
    a91e:	df 91       	pop	r29
    a920:	cf 91       	pop	r28
    a922:	1f 91       	pop	r17
    a924:	0f 91       	pop	r16
    a926:	08 95       	ret

0000a928 <sscanf>:
    a928:	cf 93       	push	r28
    a92a:	df 93       	push	r29
    a92c:	cd b7       	in	r28, 0x3d	; 61
    a92e:	de b7       	in	r29, 0x3e	; 62
    a930:	2e 97       	sbiw	r28, 0x0e	; 14
    a932:	cd bf       	out	0x3d, r28	; 61
    a934:	de bf       	out	0x3e, r29	; 62
    a936:	85 e0       	ldi	r24, 0x05	; 5
    a938:	8c 83       	std	Y+4, r24	; 0x04
    a93a:	8c 89       	ldd	r24, Y+20	; 0x14
    a93c:	9d 89       	ldd	r25, Y+21	; 0x15
    a93e:	89 83       	std	Y+1, r24	; 0x01
    a940:	9a 83       	std	Y+2, r25	; 0x02
    a942:	ae 01       	movw	r20, r28
    a944:	48 5e       	subi	r20, 0xE8	; 232
    a946:	5f 4f       	sbci	r21, 0xFF	; 255
    a948:	6e 89       	ldd	r22, Y+22	; 0x16
    a94a:	7f 89       	ldd	r23, Y+23	; 0x17
    a94c:	ce 01       	movw	r24, r28
    a94e:	01 96       	adiw	r24, 0x01	; 1
    a950:	ee d1       	rcall	.+988    	; 0xad2e <vfscanf>
    a952:	2e 96       	adiw	r28, 0x0e	; 14
    a954:	cd bf       	out	0x3d, r28	; 61
    a956:	de bf       	out	0x3e, r29	; 62
    a958:	df 91       	pop	r29
    a95a:	cf 91       	pop	r28
    a95c:	08 95       	ret

0000a95e <__ultoa_invert>:
    a95e:	fa 01       	movw	r30, r20
    a960:	aa 27       	eor	r26, r26
    a962:	28 30       	cpi	r18, 0x08	; 8
    a964:	51 f1       	breq	.+84     	; 0xa9ba <__ultoa_invert+0x5c>
    a966:	20 31       	cpi	r18, 0x10	; 16
    a968:	81 f1       	breq	.+96     	; 0xa9ca <__ultoa_invert+0x6c>
    a96a:	e8 94       	clt
    a96c:	6f 93       	push	r22
    a96e:	6e 7f       	andi	r22, 0xFE	; 254
    a970:	6e 5f       	subi	r22, 0xFE	; 254
    a972:	7f 4f       	sbci	r23, 0xFF	; 255
    a974:	8f 4f       	sbci	r24, 0xFF	; 255
    a976:	9f 4f       	sbci	r25, 0xFF	; 255
    a978:	af 4f       	sbci	r26, 0xFF	; 255
    a97a:	b1 e0       	ldi	r27, 0x01	; 1
    a97c:	3e d0       	rcall	.+124    	; 0xa9fa <__ultoa_invert+0x9c>
    a97e:	b4 e0       	ldi	r27, 0x04	; 4
    a980:	3c d0       	rcall	.+120    	; 0xa9fa <__ultoa_invert+0x9c>
    a982:	67 0f       	add	r22, r23
    a984:	78 1f       	adc	r23, r24
    a986:	89 1f       	adc	r24, r25
    a988:	9a 1f       	adc	r25, r26
    a98a:	a1 1d       	adc	r26, r1
    a98c:	68 0f       	add	r22, r24
    a98e:	79 1f       	adc	r23, r25
    a990:	8a 1f       	adc	r24, r26
    a992:	91 1d       	adc	r25, r1
    a994:	a1 1d       	adc	r26, r1
    a996:	6a 0f       	add	r22, r26
    a998:	71 1d       	adc	r23, r1
    a99a:	81 1d       	adc	r24, r1
    a99c:	91 1d       	adc	r25, r1
    a99e:	a1 1d       	adc	r26, r1
    a9a0:	20 d0       	rcall	.+64     	; 0xa9e2 <__ultoa_invert+0x84>
    a9a2:	09 f4       	brne	.+2      	; 0xa9a6 <__ultoa_invert+0x48>
    a9a4:	68 94       	set
    a9a6:	3f 91       	pop	r19
    a9a8:	2a e0       	ldi	r18, 0x0A	; 10
    a9aa:	26 9f       	mul	r18, r22
    a9ac:	11 24       	eor	r1, r1
    a9ae:	30 19       	sub	r19, r0
    a9b0:	30 5d       	subi	r19, 0xD0	; 208
    a9b2:	31 93       	st	Z+, r19
    a9b4:	de f6       	brtc	.-74     	; 0xa96c <__ultoa_invert+0xe>
    a9b6:	cf 01       	movw	r24, r30
    a9b8:	08 95       	ret
    a9ba:	46 2f       	mov	r20, r22
    a9bc:	47 70       	andi	r20, 0x07	; 7
    a9be:	40 5d       	subi	r20, 0xD0	; 208
    a9c0:	41 93       	st	Z+, r20
    a9c2:	b3 e0       	ldi	r27, 0x03	; 3
    a9c4:	0f d0       	rcall	.+30     	; 0xa9e4 <__ultoa_invert+0x86>
    a9c6:	c9 f7       	brne	.-14     	; 0xa9ba <__ultoa_invert+0x5c>
    a9c8:	f6 cf       	rjmp	.-20     	; 0xa9b6 <__ultoa_invert+0x58>
    a9ca:	46 2f       	mov	r20, r22
    a9cc:	4f 70       	andi	r20, 0x0F	; 15
    a9ce:	40 5d       	subi	r20, 0xD0	; 208
    a9d0:	4a 33       	cpi	r20, 0x3A	; 58
    a9d2:	18 f0       	brcs	.+6      	; 0xa9da <__ultoa_invert+0x7c>
    a9d4:	49 5d       	subi	r20, 0xD9	; 217
    a9d6:	31 fd       	sbrc	r19, 1
    a9d8:	40 52       	subi	r20, 0x20	; 32
    a9da:	41 93       	st	Z+, r20
    a9dc:	02 d0       	rcall	.+4      	; 0xa9e2 <__ultoa_invert+0x84>
    a9de:	a9 f7       	brne	.-22     	; 0xa9ca <__ultoa_invert+0x6c>
    a9e0:	ea cf       	rjmp	.-44     	; 0xa9b6 <__ultoa_invert+0x58>
    a9e2:	b4 e0       	ldi	r27, 0x04	; 4
    a9e4:	a6 95       	lsr	r26
    a9e6:	97 95       	ror	r25
    a9e8:	87 95       	ror	r24
    a9ea:	77 95       	ror	r23
    a9ec:	67 95       	ror	r22
    a9ee:	ba 95       	dec	r27
    a9f0:	c9 f7       	brne	.-14     	; 0xa9e4 <__ultoa_invert+0x86>
    a9f2:	00 97       	sbiw	r24, 0x00	; 0
    a9f4:	61 05       	cpc	r22, r1
    a9f6:	71 05       	cpc	r23, r1
    a9f8:	08 95       	ret
    a9fa:	9b 01       	movw	r18, r22
    a9fc:	ac 01       	movw	r20, r24
    a9fe:	0a 2e       	mov	r0, r26
    aa00:	06 94       	lsr	r0
    aa02:	57 95       	ror	r21
    aa04:	47 95       	ror	r20
    aa06:	37 95       	ror	r19
    aa08:	27 95       	ror	r18
    aa0a:	ba 95       	dec	r27
    aa0c:	c9 f7       	brne	.-14     	; 0xaa00 <__ultoa_invert+0xa2>
    aa0e:	62 0f       	add	r22, r18
    aa10:	73 1f       	adc	r23, r19
    aa12:	84 1f       	adc	r24, r20
    aa14:	95 1f       	adc	r25, r21
    aa16:	a0 1d       	adc	r26, r0
    aa18:	08 95       	ret

0000aa1a <putval>:
    aa1a:	20 fd       	sbrc	r18, 0
    aa1c:	09 c0       	rjmp	.+18     	; 0xaa30 <putval+0x16>
    aa1e:	fc 01       	movw	r30, r24
    aa20:	23 fd       	sbrc	r18, 3
    aa22:	05 c0       	rjmp	.+10     	; 0xaa2e <putval+0x14>
    aa24:	22 ff       	sbrs	r18, 2
    aa26:	02 c0       	rjmp	.+4      	; 0xaa2c <putval+0x12>
    aa28:	73 83       	std	Z+3, r23	; 0x03
    aa2a:	62 83       	std	Z+2, r22	; 0x02
    aa2c:	51 83       	std	Z+1, r21	; 0x01
    aa2e:	40 83       	st	Z, r20
    aa30:	08 95       	ret

0000aa32 <mulacc>:
    aa32:	44 fd       	sbrc	r20, 4
    aa34:	10 c0       	rjmp	.+32     	; 0xaa56 <mulacc+0x24>
    aa36:	46 fd       	sbrc	r20, 6
    aa38:	10 c0       	rjmp	.+32     	; 0xaa5a <mulacc+0x28>
    aa3a:	db 01       	movw	r26, r22
    aa3c:	fc 01       	movw	r30, r24
    aa3e:	aa 0f       	add	r26, r26
    aa40:	bb 1f       	adc	r27, r27
    aa42:	ee 1f       	adc	r30, r30
    aa44:	ff 1f       	adc	r31, r31
    aa46:	10 94       	com	r1
    aa48:	d1 f7       	brne	.-12     	; 0xaa3e <mulacc+0xc>
    aa4a:	6a 0f       	add	r22, r26
    aa4c:	7b 1f       	adc	r23, r27
    aa4e:	8e 1f       	adc	r24, r30
    aa50:	9f 1f       	adc	r25, r31
    aa52:	31 e0       	ldi	r19, 0x01	; 1
    aa54:	03 c0       	rjmp	.+6      	; 0xaa5c <mulacc+0x2a>
    aa56:	33 e0       	ldi	r19, 0x03	; 3
    aa58:	01 c0       	rjmp	.+2      	; 0xaa5c <mulacc+0x2a>
    aa5a:	34 e0       	ldi	r19, 0x04	; 4
    aa5c:	66 0f       	add	r22, r22
    aa5e:	77 1f       	adc	r23, r23
    aa60:	88 1f       	adc	r24, r24
    aa62:	99 1f       	adc	r25, r25
    aa64:	31 50       	subi	r19, 0x01	; 1
    aa66:	d1 f7       	brne	.-12     	; 0xaa5c <mulacc+0x2a>
    aa68:	62 0f       	add	r22, r18
    aa6a:	71 1d       	adc	r23, r1
    aa6c:	81 1d       	adc	r24, r1
    aa6e:	91 1d       	adc	r25, r1
    aa70:	08 95       	ret

0000aa72 <skip_spaces>:
    aa72:	0f 93       	push	r16
    aa74:	1f 93       	push	r17
    aa76:	cf 93       	push	r28
    aa78:	df 93       	push	r29
    aa7a:	8c 01       	movw	r16, r24
    aa7c:	c8 01       	movw	r24, r16
    aa7e:	f2 d2       	rcall	.+1508   	; 0xb064 <fgetc>
    aa80:	ec 01       	movw	r28, r24
    aa82:	97 fd       	sbrc	r25, 7
    aa84:	06 c0       	rjmp	.+12     	; 0xaa92 <skip_spaces+0x20>
    aa86:	cb d2       	rcall	.+1430   	; 0xb01e <isspace>
    aa88:	89 2b       	or	r24, r25
    aa8a:	c1 f7       	brne	.-16     	; 0xaa7c <skip_spaces+0xa>
    aa8c:	b8 01       	movw	r22, r16
    aa8e:	ce 01       	movw	r24, r28
    aa90:	27 d3       	rcall	.+1614   	; 0xb0e0 <ungetc>
    aa92:	ce 01       	movw	r24, r28
    aa94:	df 91       	pop	r29
    aa96:	cf 91       	pop	r28
    aa98:	1f 91       	pop	r17
    aa9a:	0f 91       	pop	r16
    aa9c:	08 95       	ret

0000aa9e <conv_int>:
    aa9e:	8f 92       	push	r8
    aaa0:	9f 92       	push	r9
    aaa2:	af 92       	push	r10
    aaa4:	cf 92       	push	r12
    aaa6:	df 92       	push	r13
    aaa8:	ef 92       	push	r14
    aaaa:	ff 92       	push	r15
    aaac:	0f 93       	push	r16
    aaae:	1f 93       	push	r17
    aab0:	cf 93       	push	r28
    aab2:	df 93       	push	r29
    aab4:	ec 01       	movw	r28, r24
    aab6:	a6 2e       	mov	r10, r22
    aab8:	4a 01       	movw	r8, r20
    aaba:	02 2f       	mov	r16, r18
    aabc:	d3 d2       	rcall	.+1446   	; 0xb064 <fgetc>
    aabe:	ac 01       	movw	r20, r24
    aac0:	55 27       	eor	r21, r21
    aac2:	4b 32       	cpi	r20, 0x2B	; 43
    aac4:	51 05       	cpc	r21, r1
    aac6:	21 f0       	breq	.+8      	; 0xaad0 <conv_int+0x32>
    aac8:	4d 32       	cpi	r20, 0x2D	; 45
    aaca:	51 05       	cpc	r21, r1
    aacc:	49 f4       	brne	.+18     	; 0xaae0 <conv_int+0x42>
    aace:	00 68       	ori	r16, 0x80	; 128
    aad0:	aa 94       	dec	r10
    aad2:	11 f4       	brne	.+4      	; 0xaad8 <conv_int+0x3a>
    aad4:	80 e0       	ldi	r24, 0x00	; 0
    aad6:	60 c0       	rjmp	.+192    	; 0xab98 <conv_int+0xfa>
    aad8:	ce 01       	movw	r24, r28
    aada:	c4 d2       	rcall	.+1416   	; 0xb064 <fgetc>
    aadc:	97 fd       	sbrc	r25, 7
    aade:	fa cf       	rjmp	.-12     	; 0xaad4 <conv_int+0x36>
    aae0:	10 2f       	mov	r17, r16
    aae2:	1d 7f       	andi	r17, 0xFD	; 253
    aae4:	30 2f       	mov	r19, r16
    aae6:	30 73       	andi	r19, 0x30	; 48
    aae8:	f1 f4       	brne	.+60     	; 0xab26 <conv_int+0x88>
    aaea:	80 33       	cpi	r24, 0x30	; 48
    aaec:	e1 f4       	brne	.+56     	; 0xab26 <conv_int+0x88>
    aaee:	ff 24       	eor	r15, r15
    aaf0:	fa 94       	dec	r15
    aaf2:	fa 0c       	add	r15, r10
    aaf4:	09 f4       	brne	.+2      	; 0xaaf8 <conv_int+0x5a>
    aaf6:	3d c0       	rjmp	.+122    	; 0xab72 <conv_int+0xd4>
    aaf8:	ce 01       	movw	r24, r28
    aafa:	b4 d2       	rcall	.+1384   	; 0xb064 <fgetc>
    aafc:	97 fd       	sbrc	r25, 7
    aafe:	39 c0       	rjmp	.+114    	; 0xab72 <conv_int+0xd4>
    ab00:	38 2f       	mov	r19, r24
    ab02:	3f 7d       	andi	r19, 0xDF	; 223
    ab04:	38 35       	cpi	r19, 0x58	; 88
    ab06:	49 f4       	brne	.+18     	; 0xab1a <conv_int+0x7c>
    ab08:	12 64       	ori	r17, 0x42	; 66
    ab0a:	aa 94       	dec	r10
    ab0c:	aa 94       	dec	r10
    ab0e:	89 f1       	breq	.+98     	; 0xab72 <conv_int+0xd4>
    ab10:	ce 01       	movw	r24, r28
    ab12:	a8 d2       	rcall	.+1360   	; 0xb064 <fgetc>
    ab14:	97 ff       	sbrs	r25, 7
    ab16:	07 c0       	rjmp	.+14     	; 0xab26 <conv_int+0x88>
    ab18:	2c c0       	rjmp	.+88     	; 0xab72 <conv_int+0xd4>
    ab1a:	06 ff       	sbrs	r16, 6
    ab1c:	02 c0       	rjmp	.+4      	; 0xab22 <conv_int+0x84>
    ab1e:	12 60       	ori	r17, 0x02	; 2
    ab20:	01 c0       	rjmp	.+2      	; 0xab24 <conv_int+0x86>
    ab22:	12 61       	ori	r17, 0x12	; 18
    ab24:	af 2c       	mov	r10, r15
    ab26:	c1 2c       	mov	r12, r1
    ab28:	d1 2c       	mov	r13, r1
    ab2a:	76 01       	movw	r14, r12
    ab2c:	20 ed       	ldi	r18, 0xD0	; 208
    ab2e:	28 0f       	add	r18, r24
    ab30:	28 30       	cpi	r18, 0x08	; 8
    ab32:	78 f0       	brcs	.+30     	; 0xab52 <conv_int+0xb4>
    ab34:	14 ff       	sbrs	r17, 4
    ab36:	03 c0       	rjmp	.+6      	; 0xab3e <conv_int+0xa0>
    ab38:	be 01       	movw	r22, r28
    ab3a:	d2 d2       	rcall	.+1444   	; 0xb0e0 <ungetc>
    ab3c:	17 c0       	rjmp	.+46     	; 0xab6c <conv_int+0xce>
    ab3e:	2a 30       	cpi	r18, 0x0A	; 10
    ab40:	40 f0       	brcs	.+16     	; 0xab52 <conv_int+0xb4>
    ab42:	16 ff       	sbrs	r17, 6
    ab44:	f9 cf       	rjmp	.-14     	; 0xab38 <conv_int+0x9a>
    ab46:	2f 7d       	andi	r18, 0xDF	; 223
    ab48:	3f ee       	ldi	r19, 0xEF	; 239
    ab4a:	32 0f       	add	r19, r18
    ab4c:	36 30       	cpi	r19, 0x06	; 6
    ab4e:	a0 f7       	brcc	.-24     	; 0xab38 <conv_int+0x9a>
    ab50:	27 50       	subi	r18, 0x07	; 7
    ab52:	41 2f       	mov	r20, r17
    ab54:	c7 01       	movw	r24, r14
    ab56:	b6 01       	movw	r22, r12
    ab58:	6c df       	rcall	.-296    	; 0xaa32 <mulacc>
    ab5a:	6b 01       	movw	r12, r22
    ab5c:	7c 01       	movw	r14, r24
    ab5e:	12 60       	ori	r17, 0x02	; 2
    ab60:	aa 94       	dec	r10
    ab62:	51 f0       	breq	.+20     	; 0xab78 <conv_int+0xda>
    ab64:	ce 01       	movw	r24, r28
    ab66:	7e d2       	rcall	.+1276   	; 0xb064 <fgetc>
    ab68:	97 ff       	sbrs	r25, 7
    ab6a:	e0 cf       	rjmp	.-64     	; 0xab2c <conv_int+0x8e>
    ab6c:	11 fd       	sbrc	r17, 1
    ab6e:	04 c0       	rjmp	.+8      	; 0xab78 <conv_int+0xda>
    ab70:	b1 cf       	rjmp	.-158    	; 0xaad4 <conv_int+0x36>
    ab72:	c1 2c       	mov	r12, r1
    ab74:	d1 2c       	mov	r13, r1
    ab76:	76 01       	movw	r14, r12
    ab78:	17 ff       	sbrs	r17, 7
    ab7a:	08 c0       	rjmp	.+16     	; 0xab8c <conv_int+0xee>
    ab7c:	f0 94       	com	r15
    ab7e:	e0 94       	com	r14
    ab80:	d0 94       	com	r13
    ab82:	c0 94       	com	r12
    ab84:	c1 1c       	adc	r12, r1
    ab86:	d1 1c       	adc	r13, r1
    ab88:	e1 1c       	adc	r14, r1
    ab8a:	f1 1c       	adc	r15, r1
    ab8c:	21 2f       	mov	r18, r17
    ab8e:	b7 01       	movw	r22, r14
    ab90:	a6 01       	movw	r20, r12
    ab92:	c4 01       	movw	r24, r8
    ab94:	42 df       	rcall	.-380    	; 0xaa1a <putval>
    ab96:	81 e0       	ldi	r24, 0x01	; 1
    ab98:	df 91       	pop	r29
    ab9a:	cf 91       	pop	r28
    ab9c:	1f 91       	pop	r17
    ab9e:	0f 91       	pop	r16
    aba0:	ff 90       	pop	r15
    aba2:	ef 90       	pop	r14
    aba4:	df 90       	pop	r13
    aba6:	cf 90       	pop	r12
    aba8:	af 90       	pop	r10
    abaa:	9f 90       	pop	r9
    abac:	8f 90       	pop	r8
    abae:	08 95       	ret

0000abb0 <conv_brk>:
    abb0:	7f 92       	push	r7
    abb2:	8f 92       	push	r8
    abb4:	9f 92       	push	r9
    abb6:	af 92       	push	r10
    abb8:	bf 92       	push	r11
    abba:	cf 92       	push	r12
    abbc:	df 92       	push	r13
    abbe:	ef 92       	push	r14
    abc0:	ff 92       	push	r15
    abc2:	0f 93       	push	r16
    abc4:	1f 93       	push	r17
    abc6:	cf 93       	push	r28
    abc8:	df 93       	push	r29
    abca:	cd b7       	in	r28, 0x3d	; 61
    abcc:	de b7       	in	r29, 0x3e	; 62
    abce:	a1 97       	sbiw	r28, 0x21	; 33
    abd0:	cd bf       	out	0x3d, r28	; 61
    abd2:	de bf       	out	0x3e, r29	; 62
    abd4:	5c 01       	movw	r10, r24
    abd6:	7a 01       	movw	r14, r20
    abd8:	8e 01       	movw	r16, r28
    abda:	0f 5f       	subi	r16, 0xFF	; 255
    abdc:	1f 4f       	sbci	r17, 0xFF	; 255
    abde:	68 01       	movw	r12, r16
    abe0:	80 e2       	ldi	r24, 0x20	; 32
    abe2:	d8 01       	movw	r26, r16
    abe4:	1d 92       	st	X+, r1
    abe6:	8a 95       	dec	r24
    abe8:	e9 f7       	brne	.-6      	; 0xabe4 <conv_brk+0x34>
    abea:	f5 01       	movw	r30, r10
    abec:	73 80       	ldd	r7, Z+3	; 0x03
    abee:	40 e0       	ldi	r20, 0x00	; 0
    abf0:	50 e0       	ldi	r21, 0x00	; 0
    abf2:	81 2c       	mov	r8, r1
    abf4:	b0 e0       	ldi	r27, 0x00	; 0
    abf6:	91 2c       	mov	r9, r1
    abf8:	81 e0       	ldi	r24, 0x01	; 1
    abfa:	90 e0       	ldi	r25, 0x00	; 0
    abfc:	f9 01       	movw	r30, r18
    abfe:	73 fc       	sbrc	r7, 3
    ac00:	a5 91       	lpm	r26, Z+
    ac02:	73 fe       	sbrs	r7, 3
    ac04:	a1 91       	ld	r26, Z+
    ac06:	8f 01       	movw	r16, r30
    ac08:	7a 2f       	mov	r23, r26
    ac0a:	9f 01       	movw	r18, r30
    ac0c:	a1 11       	cpse	r26, r1
    ac0e:	03 c0       	rjmp	.+6      	; 0xac16 <conv_brk+0x66>
    ac10:	80 e0       	ldi	r24, 0x00	; 0
    ac12:	90 e0       	ldi	r25, 0x00	; 0
    ac14:	7b c0       	rjmp	.+246    	; 0xad0c <conv_brk+0x15c>
    ac16:	ae 35       	cpi	r26, 0x5E	; 94
    ac18:	19 f4       	brne	.+6      	; 0xac20 <conv_brk+0x70>
    ac1a:	41 15       	cp	r20, r1
    ac1c:	51 05       	cpc	r21, r1
    ac1e:	59 f1       	breq	.+86     	; 0xac76 <conv_brk+0xc6>
    ac20:	e9 2d       	mov	r30, r9
    ac22:	f0 e0       	ldi	r31, 0x00	; 0
    ac24:	e4 17       	cp	r30, r20
    ac26:	f5 07       	cpc	r31, r21
    ac28:	3c f4       	brge	.+14     	; 0xac38 <conv_brk+0x88>
    ac2a:	ad 35       	cpi	r26, 0x5D	; 93
    ac2c:	69 f1       	breq	.+90     	; 0xac88 <conv_brk+0xd8>
    ac2e:	ad 32       	cpi	r26, 0x2D	; 45
    ac30:	19 f4       	brne	.+6      	; 0xac38 <conv_brk+0x88>
    ac32:	bb 23       	and	r27, r27
    ac34:	19 f1       	breq	.+70     	; 0xac7c <conv_brk+0xcc>
    ac36:	03 c0       	rjmp	.+6      	; 0xac3e <conv_brk+0x8e>
    ac38:	b1 11       	cpse	r27, r1
    ac3a:	01 c0       	rjmp	.+2      	; 0xac3e <conv_brk+0x8e>
    ac3c:	8a 2e       	mov	r8, r26
    ac3e:	e7 2f       	mov	r30, r23
    ac40:	e6 95       	lsr	r30
    ac42:	e6 95       	lsr	r30
    ac44:	e6 95       	lsr	r30
    ac46:	86 01       	movw	r16, r12
    ac48:	0e 0f       	add	r16, r30
    ac4a:	11 1d       	adc	r17, r1
    ac4c:	f8 01       	movw	r30, r16
    ac4e:	a7 2f       	mov	r26, r23
    ac50:	a7 70       	andi	r26, 0x07	; 7
    ac52:	8c 01       	movw	r16, r24
    ac54:	02 c0       	rjmp	.+4      	; 0xac5a <conv_brk+0xaa>
    ac56:	00 0f       	add	r16, r16
    ac58:	11 1f       	adc	r17, r17
    ac5a:	aa 95       	dec	r26
    ac5c:	e2 f7       	brpl	.-8      	; 0xac56 <conv_brk+0xa6>
    ac5e:	d8 01       	movw	r26, r16
    ac60:	b0 81       	ld	r27, Z
    ac62:	ba 2b       	or	r27, r26
    ac64:	b0 83       	st	Z, r27
    ac66:	78 15       	cp	r23, r8
    ac68:	59 f0       	breq	.+22     	; 0xac80 <conv_brk+0xd0>
    ac6a:	78 15       	cp	r23, r8
    ac6c:	10 f4       	brcc	.+4      	; 0xac72 <conv_brk+0xc2>
    ac6e:	7f 5f       	subi	r23, 0xFF	; 255
    ac70:	e6 cf       	rjmp	.-52     	; 0xac3e <conv_brk+0x8e>
    ac72:	71 50       	subi	r23, 0x01	; 1
    ac74:	e4 cf       	rjmp	.-56     	; 0xac3e <conv_brk+0x8e>
    ac76:	99 24       	eor	r9, r9
    ac78:	93 94       	inc	r9
    ac7a:	03 c0       	rjmp	.+6      	; 0xac82 <conv_brk+0xd2>
    ac7c:	b1 e0       	ldi	r27, 0x01	; 1
    ac7e:	01 c0       	rjmp	.+2      	; 0xac82 <conv_brk+0xd2>
    ac80:	b0 e0       	ldi	r27, 0x00	; 0
    ac82:	4f 5f       	subi	r20, 0xFF	; 255
    ac84:	5f 4f       	sbci	r21, 0xFF	; 255
    ac86:	ba cf       	rjmp	.-140    	; 0xabfc <conv_brk+0x4c>
    ac88:	bb 23       	and	r27, r27
    ac8a:	19 f0       	breq	.+6      	; 0xac92 <conv_brk+0xe2>
    ac8c:	8e 81       	ldd	r24, Y+6	; 0x06
    ac8e:	80 62       	ori	r24, 0x20	; 32
    ac90:	8e 83       	std	Y+6, r24	; 0x06
    ac92:	91 10       	cpse	r9, r1
    ac94:	03 c0       	rjmp	.+6      	; 0xac9c <conv_brk+0xec>
    ac96:	99 24       	eor	r9, r9
    ac98:	93 94       	inc	r9
    ac9a:	15 c0       	rjmp	.+42     	; 0xacc6 <conv_brk+0x116>
    ac9c:	f6 01       	movw	r30, r12
    ac9e:	ce 01       	movw	r24, r28
    aca0:	81 96       	adiw	r24, 0x21	; 33
    aca2:	20 81       	ld	r18, Z
    aca4:	20 95       	com	r18
    aca6:	21 93       	st	Z+, r18
    aca8:	e8 17       	cp	r30, r24
    acaa:	f9 07       	cpc	r31, r25
    acac:	d1 f7       	brne	.-12     	; 0xaca2 <conv_brk+0xf2>
    acae:	f3 cf       	rjmp	.-26     	; 0xac96 <conv_brk+0xe6>
    acb0:	e1 14       	cp	r14, r1
    acb2:	f1 04       	cpc	r15, r1
    acb4:	29 f0       	breq	.+10     	; 0xacc0 <conv_brk+0x110>
    acb6:	d7 01       	movw	r26, r14
    acb8:	8c 93       	st	X, r24
    acba:	f7 01       	movw	r30, r14
    acbc:	31 96       	adiw	r30, 0x01	; 1
    acbe:	7f 01       	movw	r14, r30
    acc0:	61 50       	subi	r22, 0x01	; 1
    acc2:	f1 f0       	breq	.+60     	; 0xad00 <conv_brk+0x150>
    acc4:	91 2c       	mov	r9, r1
    acc6:	c5 01       	movw	r24, r10
    acc8:	69 a3       	std	Y+33, r22	; 0x21
    acca:	cc d1       	rcall	.+920    	; 0xb064 <fgetc>
    accc:	69 a1       	ldd	r22, Y+33	; 0x21
    acce:	97 fd       	sbrc	r25, 7
    acd0:	15 c0       	rjmp	.+42     	; 0xacfc <conv_brk+0x14c>
    acd2:	28 2f       	mov	r18, r24
    acd4:	26 95       	lsr	r18
    acd6:	26 95       	lsr	r18
    acd8:	26 95       	lsr	r18
    acda:	f6 01       	movw	r30, r12
    acdc:	e2 0f       	add	r30, r18
    acde:	f1 1d       	adc	r31, r1
    ace0:	20 81       	ld	r18, Z
    ace2:	30 e0       	ldi	r19, 0x00	; 0
    ace4:	ac 01       	movw	r20, r24
    ace6:	47 70       	andi	r20, 0x07	; 7
    ace8:	55 27       	eor	r21, r21
    acea:	02 c0       	rjmp	.+4      	; 0xacf0 <conv_brk+0x140>
    acec:	35 95       	asr	r19
    acee:	27 95       	ror	r18
    acf0:	4a 95       	dec	r20
    acf2:	e2 f7       	brpl	.-8      	; 0xacec <conv_brk+0x13c>
    acf4:	20 fd       	sbrc	r18, 0
    acf6:	dc cf       	rjmp	.-72     	; 0xacb0 <conv_brk+0x100>
    acf8:	b5 01       	movw	r22, r10
    acfa:	f2 d1       	rcall	.+996    	; 0xb0e0 <ungetc>
    acfc:	91 10       	cpse	r9, r1
    acfe:	88 cf       	rjmp	.-240    	; 0xac10 <conv_brk+0x60>
    ad00:	e1 14       	cp	r14, r1
    ad02:	f1 04       	cpc	r15, r1
    ad04:	11 f0       	breq	.+4      	; 0xad0a <conv_brk+0x15a>
    ad06:	d7 01       	movw	r26, r14
    ad08:	1c 92       	st	X, r1
    ad0a:	c8 01       	movw	r24, r16
    ad0c:	a1 96       	adiw	r28, 0x21	; 33
    ad0e:	cd bf       	out	0x3d, r28	; 61
    ad10:	de bf       	out	0x3e, r29	; 62
    ad12:	df 91       	pop	r29
    ad14:	cf 91       	pop	r28
    ad16:	1f 91       	pop	r17
    ad18:	0f 91       	pop	r16
    ad1a:	ff 90       	pop	r15
    ad1c:	ef 90       	pop	r14
    ad1e:	df 90       	pop	r13
    ad20:	cf 90       	pop	r12
    ad22:	bf 90       	pop	r11
    ad24:	af 90       	pop	r10
    ad26:	9f 90       	pop	r9
    ad28:	8f 90       	pop	r8
    ad2a:	7f 90       	pop	r7
    ad2c:	08 95       	ret

0000ad2e <vfscanf>:
    ad2e:	4f 92       	push	r4
    ad30:	5f 92       	push	r5
    ad32:	7f 92       	push	r7
    ad34:	8f 92       	push	r8
    ad36:	9f 92       	push	r9
    ad38:	af 92       	push	r10
    ad3a:	bf 92       	push	r11
    ad3c:	cf 92       	push	r12
    ad3e:	df 92       	push	r13
    ad40:	ef 92       	push	r14
    ad42:	ff 92       	push	r15
    ad44:	0f 93       	push	r16
    ad46:	1f 93       	push	r17
    ad48:	cf 93       	push	r28
    ad4a:	df 93       	push	r29
    ad4c:	1f 92       	push	r1
    ad4e:	cd b7       	in	r28, 0x3d	; 61
    ad50:	de b7       	in	r29, 0x3e	; 62
    ad52:	8c 01       	movw	r16, r24
    ad54:	2b 01       	movw	r4, r22
    ad56:	7a 01       	movw	r14, r20
    ad58:	fc 01       	movw	r30, r24
    ad5a:	16 82       	std	Z+6, r1	; 0x06
    ad5c:	17 82       	std	Z+7, r1	; 0x07
    ad5e:	a1 2c       	mov	r10, r1
    ad60:	f8 01       	movw	r30, r16
    ad62:	d3 80       	ldd	r13, Z+3	; 0x03
    ad64:	f2 01       	movw	r30, r4
    ad66:	d3 fc       	sbrc	r13, 3
    ad68:	85 91       	lpm	r24, Z+
    ad6a:	d3 fe       	sbrs	r13, 3
    ad6c:	81 91       	ld	r24, Z+
    ad6e:	38 2f       	mov	r19, r24
    ad70:	2f 01       	movw	r4, r30
    ad72:	88 23       	and	r24, r24
    ad74:	09 f4       	brne	.+2      	; 0xad78 <vfscanf+0x4a>
    ad76:	ee c0       	rjmp	.+476    	; 0xaf54 <vfscanf+0x226>
    ad78:	90 e0       	ldi	r25, 0x00	; 0
    ad7a:	39 83       	std	Y+1, r19	; 0x01
    ad7c:	50 d1       	rcall	.+672    	; 0xb01e <isspace>
    ad7e:	39 81       	ldd	r19, Y+1	; 0x01
    ad80:	89 2b       	or	r24, r25
    ad82:	19 f0       	breq	.+6      	; 0xad8a <vfscanf+0x5c>
    ad84:	c8 01       	movw	r24, r16
    ad86:	75 de       	rcall	.-790    	; 0xaa72 <skip_spaces>
    ad88:	eb cf       	rjmp	.-42     	; 0xad60 <vfscanf+0x32>
    ad8a:	35 32       	cpi	r19, 0x25	; 37
    ad8c:	41 f4       	brne	.+16     	; 0xad9e <vfscanf+0x70>
    ad8e:	f2 01       	movw	r30, r4
    ad90:	d3 fc       	sbrc	r13, 3
    ad92:	35 91       	lpm	r19, Z+
    ad94:	d3 fe       	sbrs	r13, 3
    ad96:	31 91       	ld	r19, Z+
    ad98:	2f 01       	movw	r4, r30
    ad9a:	35 32       	cpi	r19, 0x25	; 37
    ad9c:	59 f4       	brne	.+22     	; 0xadb4 <vfscanf+0x86>
    ad9e:	c8 01       	movw	r24, r16
    ada0:	39 83       	std	Y+1, r19	; 0x01
    ada2:	60 d1       	rcall	.+704    	; 0xb064 <fgetc>
    ada4:	39 81       	ldd	r19, Y+1	; 0x01
    ada6:	97 fd       	sbrc	r25, 7
    ada8:	d3 c0       	rjmp	.+422    	; 0xaf50 <vfscanf+0x222>
    adaa:	38 17       	cp	r19, r24
    adac:	c9 f2       	breq	.-78     	; 0xad60 <vfscanf+0x32>
    adae:	b8 01       	movw	r22, r16
    adb0:	97 d1       	rcall	.+814    	; 0xb0e0 <ungetc>
    adb2:	d0 c0       	rjmp	.+416    	; 0xaf54 <vfscanf+0x226>
    adb4:	3a 32       	cpi	r19, 0x2A	; 42
    adb6:	41 f4       	brne	.+16     	; 0xadc8 <vfscanf+0x9a>
    adb8:	d3 fc       	sbrc	r13, 3
    adba:	35 91       	lpm	r19, Z+
    adbc:	d3 fe       	sbrs	r13, 3
    adbe:	31 91       	ld	r19, Z+
    adc0:	2f 01       	movw	r4, r30
    adc2:	bb 24       	eor	r11, r11
    adc4:	b3 94       	inc	r11
    adc6:	01 c0       	rjmp	.+2      	; 0xadca <vfscanf+0x9c>
    adc8:	b1 2c       	mov	r11, r1
    adca:	71 2c       	mov	r7, r1
    adcc:	20 ed       	ldi	r18, 0xD0	; 208
    adce:	23 0f       	add	r18, r19
    add0:	2a 30       	cpi	r18, 0x0A	; 10
    add2:	88 f4       	brcc	.+34     	; 0xadf6 <vfscanf+0xc8>
    add4:	fb 2d       	mov	r31, r11
    add6:	f2 60       	ori	r31, 0x02	; 2
    add8:	bf 2e       	mov	r11, r31
    adda:	67 2d       	mov	r22, r7
    addc:	70 e0       	ldi	r23, 0x00	; 0
    adde:	80 e0       	ldi	r24, 0x00	; 0
    ade0:	90 e0       	ldi	r25, 0x00	; 0
    ade2:	40 e2       	ldi	r20, 0x20	; 32
    ade4:	26 de       	rcall	.-948    	; 0xaa32 <mulacc>
    ade6:	76 2e       	mov	r7, r22
    ade8:	f2 01       	movw	r30, r4
    adea:	d3 fc       	sbrc	r13, 3
    adec:	35 91       	lpm	r19, Z+
    adee:	d3 fe       	sbrs	r13, 3
    adf0:	31 91       	ld	r19, Z+
    adf2:	2f 01       	movw	r4, r30
    adf4:	eb cf       	rjmp	.-42     	; 0xadcc <vfscanf+0x9e>
    adf6:	b1 fe       	sbrs	r11, 1
    adf8:	03 c0       	rjmp	.+6      	; 0xae00 <vfscanf+0xd2>
    adfa:	71 10       	cpse	r7, r1
    adfc:	03 c0       	rjmp	.+6      	; 0xae04 <vfscanf+0xd6>
    adfe:	aa c0       	rjmp	.+340    	; 0xaf54 <vfscanf+0x226>
    ae00:	77 24       	eor	r7, r7
    ae02:	7a 94       	dec	r7
    ae04:	38 36       	cpi	r19, 0x68	; 104
    ae06:	19 f0       	breq	.+6      	; 0xae0e <vfscanf+0xe0>
    ae08:	3c 36       	cpi	r19, 0x6C	; 108
    ae0a:	61 f0       	breq	.+24     	; 0xae24 <vfscanf+0xf6>
    ae0c:	14 c0       	rjmp	.+40     	; 0xae36 <vfscanf+0x108>
    ae0e:	f2 01       	movw	r30, r4
    ae10:	d3 fc       	sbrc	r13, 3
    ae12:	35 91       	lpm	r19, Z+
    ae14:	d3 fe       	sbrs	r13, 3
    ae16:	31 91       	ld	r19, Z+
    ae18:	2f 01       	movw	r4, r30
    ae1a:	38 36       	cpi	r19, 0x68	; 104
    ae1c:	61 f4       	brne	.+24     	; 0xae36 <vfscanf+0x108>
    ae1e:	fb 2d       	mov	r31, r11
    ae20:	f8 60       	ori	r31, 0x08	; 8
    ae22:	bf 2e       	mov	r11, r31
    ae24:	8b 2d       	mov	r24, r11
    ae26:	84 60       	ori	r24, 0x04	; 4
    ae28:	b8 2e       	mov	r11, r24
    ae2a:	f2 01       	movw	r30, r4
    ae2c:	d3 fc       	sbrc	r13, 3
    ae2e:	35 91       	lpm	r19, Z+
    ae30:	d3 fe       	sbrs	r13, 3
    ae32:	31 91       	ld	r19, Z+
    ae34:	2f 01       	movw	r4, r30
    ae36:	33 23       	and	r19, r19
    ae38:	09 f4       	brne	.+2      	; 0xae3c <vfscanf+0x10e>
    ae3a:	8c c0       	rjmp	.+280    	; 0xaf54 <vfscanf+0x226>
    ae3c:	63 2f       	mov	r22, r19
    ae3e:	70 e0       	ldi	r23, 0x00	; 0
    ae40:	85 e4       	ldi	r24, 0x45	; 69
    ae42:	9e e0       	ldi	r25, 0x0E	; 14
    ae44:	39 83       	std	Y+1, r19	; 0x01
    ae46:	f3 d0       	rcall	.+486    	; 0xb02e <strchr_P>
    ae48:	39 81       	ldd	r19, Y+1	; 0x01
    ae4a:	89 2b       	or	r24, r25
    ae4c:	09 f4       	brne	.+2      	; 0xae50 <vfscanf+0x122>
    ae4e:	82 c0       	rjmp	.+260    	; 0xaf54 <vfscanf+0x226>
    ae50:	b0 fc       	sbrc	r11, 0
    ae52:	07 c0       	rjmp	.+14     	; 0xae62 <vfscanf+0x134>
    ae54:	f7 01       	movw	r30, r14
    ae56:	c0 80       	ld	r12, Z
    ae58:	d1 80       	ldd	r13, Z+1	; 0x01
    ae5a:	c7 01       	movw	r24, r14
    ae5c:	02 96       	adiw	r24, 0x02	; 2
    ae5e:	7c 01       	movw	r14, r24
    ae60:	02 c0       	rjmp	.+4      	; 0xae66 <vfscanf+0x138>
    ae62:	c1 2c       	mov	r12, r1
    ae64:	d1 2c       	mov	r13, r1
    ae66:	3e 36       	cpi	r19, 0x6E	; 110
    ae68:	49 f4       	brne	.+18     	; 0xae7c <vfscanf+0x14e>
    ae6a:	f8 01       	movw	r30, r16
    ae6c:	46 81       	ldd	r20, Z+6	; 0x06
    ae6e:	57 81       	ldd	r21, Z+7	; 0x07
    ae70:	60 e0       	ldi	r22, 0x00	; 0
    ae72:	70 e0       	ldi	r23, 0x00	; 0
    ae74:	2b 2d       	mov	r18, r11
    ae76:	c6 01       	movw	r24, r12
    ae78:	d0 dd       	rcall	.-1120   	; 0xaa1a <putval>
    ae7a:	72 cf       	rjmp	.-284    	; 0xad60 <vfscanf+0x32>
    ae7c:	33 36       	cpi	r19, 0x63	; 99
    ae7e:	99 f4       	brne	.+38     	; 0xaea6 <vfscanf+0x178>
    ae80:	b1 fc       	sbrc	r11, 1
    ae82:	02 c0       	rjmp	.+4      	; 0xae88 <vfscanf+0x15a>
    ae84:	77 24       	eor	r7, r7
    ae86:	73 94       	inc	r7
    ae88:	c8 01       	movw	r24, r16
    ae8a:	ec d0       	rcall	.+472    	; 0xb064 <fgetc>
    ae8c:	97 fd       	sbrc	r25, 7
    ae8e:	60 c0       	rjmp	.+192    	; 0xaf50 <vfscanf+0x222>
    ae90:	c1 14       	cp	r12, r1
    ae92:	d1 04       	cpc	r13, r1
    ae94:	29 f0       	breq	.+10     	; 0xaea0 <vfscanf+0x172>
    ae96:	f6 01       	movw	r30, r12
    ae98:	80 83       	st	Z, r24
    ae9a:	c6 01       	movw	r24, r12
    ae9c:	01 96       	adiw	r24, 0x01	; 1
    ae9e:	6c 01       	movw	r12, r24
    aea0:	7a 94       	dec	r7
    aea2:	91 f7       	brne	.-28     	; 0xae88 <vfscanf+0x15a>
    aea4:	51 c0       	rjmp	.+162    	; 0xaf48 <vfscanf+0x21a>
    aea6:	3b 35       	cpi	r19, 0x5B	; 91
    aea8:	51 f4       	brne	.+20     	; 0xaebe <vfscanf+0x190>
    aeaa:	92 01       	movw	r18, r4
    aeac:	a6 01       	movw	r20, r12
    aeae:	67 2d       	mov	r22, r7
    aeb0:	c8 01       	movw	r24, r16
    aeb2:	7e de       	rcall	.-772    	; 0xabb0 <conv_brk>
    aeb4:	2c 01       	movw	r4, r24
    aeb6:	00 97       	sbiw	r24, 0x00	; 0
    aeb8:	09 f0       	breq	.+2      	; 0xaebc <vfscanf+0x18e>
    aeba:	46 c0       	rjmp	.+140    	; 0xaf48 <vfscanf+0x21a>
    aebc:	40 c0       	rjmp	.+128    	; 0xaf3e <vfscanf+0x210>
    aebe:	c8 01       	movw	r24, r16
    aec0:	39 83       	std	Y+1, r19	; 0x01
    aec2:	d7 dd       	rcall	.-1106   	; 0xaa72 <skip_spaces>
    aec4:	39 81       	ldd	r19, Y+1	; 0x01
    aec6:	97 fd       	sbrc	r25, 7
    aec8:	43 c0       	rjmp	.+134    	; 0xaf50 <vfscanf+0x222>
    aeca:	3f 36       	cpi	r19, 0x6F	; 111
    aecc:	51 f1       	breq	.+84     	; 0xaf22 <vfscanf+0x1f4>
    aece:	28 f4       	brcc	.+10     	; 0xaeda <vfscanf+0x1ac>
    aed0:	34 36       	cpi	r19, 0x64	; 100
    aed2:	19 f1       	breq	.+70     	; 0xaf1a <vfscanf+0x1ec>
    aed4:	39 36       	cpi	r19, 0x69	; 105
    aed6:	61 f1       	breq	.+88     	; 0xaf30 <vfscanf+0x202>
    aed8:	28 c0       	rjmp	.+80     	; 0xaf2a <vfscanf+0x1fc>
    aeda:	33 37       	cpi	r19, 0x73	; 115
    aedc:	69 f0       	breq	.+26     	; 0xaef8 <vfscanf+0x1ca>
    aede:	35 37       	cpi	r19, 0x75	; 117
    aee0:	e1 f0       	breq	.+56     	; 0xaf1a <vfscanf+0x1ec>
    aee2:	23 c0       	rjmp	.+70     	; 0xaf2a <vfscanf+0x1fc>
    aee4:	c1 14       	cp	r12, r1
    aee6:	d1 04       	cpc	r13, r1
    aee8:	29 f0       	breq	.+10     	; 0xaef4 <vfscanf+0x1c6>
    aeea:	f6 01       	movw	r30, r12
    aeec:	80 82       	st	Z, r8
    aeee:	c6 01       	movw	r24, r12
    aef0:	01 96       	adiw	r24, 0x01	; 1
    aef2:	6c 01       	movw	r12, r24
    aef4:	7a 94       	dec	r7
    aef6:	59 f0       	breq	.+22     	; 0xaf0e <vfscanf+0x1e0>
    aef8:	c8 01       	movw	r24, r16
    aefa:	b4 d0       	rcall	.+360    	; 0xb064 <fgetc>
    aefc:	4c 01       	movw	r8, r24
    aefe:	97 fd       	sbrc	r25, 7
    af00:	06 c0       	rjmp	.+12     	; 0xaf0e <vfscanf+0x1e0>
    af02:	8d d0       	rcall	.+282    	; 0xb01e <isspace>
    af04:	89 2b       	or	r24, r25
    af06:	71 f3       	breq	.-36     	; 0xaee4 <vfscanf+0x1b6>
    af08:	b8 01       	movw	r22, r16
    af0a:	c4 01       	movw	r24, r8
    af0c:	e9 d0       	rcall	.+466    	; 0xb0e0 <ungetc>
    af0e:	c1 14       	cp	r12, r1
    af10:	d1 04       	cpc	r13, r1
    af12:	d1 f0       	breq	.+52     	; 0xaf48 <vfscanf+0x21a>
    af14:	f6 01       	movw	r30, r12
    af16:	10 82       	st	Z, r1
    af18:	17 c0       	rjmp	.+46     	; 0xaf48 <vfscanf+0x21a>
    af1a:	fb 2d       	mov	r31, r11
    af1c:	f0 62       	ori	r31, 0x20	; 32
    af1e:	bf 2e       	mov	r11, r31
    af20:	07 c0       	rjmp	.+14     	; 0xaf30 <vfscanf+0x202>
    af22:	8b 2d       	mov	r24, r11
    af24:	80 61       	ori	r24, 0x10	; 16
    af26:	b8 2e       	mov	r11, r24
    af28:	03 c0       	rjmp	.+6      	; 0xaf30 <vfscanf+0x202>
    af2a:	9b 2d       	mov	r25, r11
    af2c:	90 64       	ori	r25, 0x40	; 64
    af2e:	b9 2e       	mov	r11, r25
    af30:	2b 2d       	mov	r18, r11
    af32:	a6 01       	movw	r20, r12
    af34:	67 2d       	mov	r22, r7
    af36:	c8 01       	movw	r24, r16
    af38:	b2 dd       	rcall	.-1180   	; 0xaa9e <conv_int>
    af3a:	81 11       	cpse	r24, r1
    af3c:	05 c0       	rjmp	.+10     	; 0xaf48 <vfscanf+0x21a>
    af3e:	f8 01       	movw	r30, r16
    af40:	83 81       	ldd	r24, Z+3	; 0x03
    af42:	80 73       	andi	r24, 0x30	; 48
    af44:	29 f4       	brne	.+10     	; 0xaf50 <vfscanf+0x222>
    af46:	06 c0       	rjmp	.+12     	; 0xaf54 <vfscanf+0x226>
    af48:	b0 fc       	sbrc	r11, 0
    af4a:	0a cf       	rjmp	.-492    	; 0xad60 <vfscanf+0x32>
    af4c:	a3 94       	inc	r10
    af4e:	08 cf       	rjmp	.-496    	; 0xad60 <vfscanf+0x32>
    af50:	aa 20       	and	r10, r10
    af52:	19 f0       	breq	.+6      	; 0xaf5a <vfscanf+0x22c>
    af54:	8a 2d       	mov	r24, r10
    af56:	90 e0       	ldi	r25, 0x00	; 0
    af58:	02 c0       	rjmp	.+4      	; 0xaf5e <vfscanf+0x230>
    af5a:	8f ef       	ldi	r24, 0xFF	; 255
    af5c:	9f ef       	ldi	r25, 0xFF	; 255
    af5e:	0f 90       	pop	r0
    af60:	df 91       	pop	r29
    af62:	cf 91       	pop	r28
    af64:	1f 91       	pop	r17
    af66:	0f 91       	pop	r16
    af68:	ff 90       	pop	r15
    af6a:	ef 90       	pop	r14
    af6c:	df 90       	pop	r13
    af6e:	cf 90       	pop	r12
    af70:	bf 90       	pop	r11
    af72:	af 90       	pop	r10
    af74:	9f 90       	pop	r9
    af76:	8f 90       	pop	r8
    af78:	7f 90       	pop	r7
    af7a:	5f 90       	pop	r5
    af7c:	4f 90       	pop	r4
    af7e:	08 95       	ret

0000af80 <__eerd_block_x128a4u>:
    af80:	e0 ec       	ldi	r30, 0xC0	; 192
    af82:	f1 e0       	ldi	r31, 0x01	; 1
    af84:	a7 85       	ldd	r26, Z+15	; 0x0f
    af86:	a7 fd       	sbrc	r26, 7
    af88:	fd cf       	rjmp	.-6      	; 0xaf84 <__eerd_block_x128a4u+0x4>
    af8a:	a4 85       	ldd	r26, Z+12	; 0x0c
    af8c:	a8 60       	ori	r26, 0x08	; 8
    af8e:	a4 87       	std	Z+12, r26	; 0x0c
    af90:	60 50       	subi	r22, 0x00	; 0
    af92:	70 4f       	sbci	r23, 0xF0	; 240
    af94:	ca cb       	rjmp	.-2156   	; 0xa72a <memcpy>

0000af96 <__eeupd_block_x128a4u>:
    af96:	dc 01       	movw	r26, r24
    af98:	a4 0f       	add	r26, r20
    af9a:	b5 1f       	adc	r27, r21
    af9c:	41 50       	subi	r20, 0x01	; 1
    af9e:	50 40       	sbci	r21, 0x00	; 0
    afa0:	40 f0       	brcs	.+16     	; 0xafb2 <__eeupd_block_x128a4u+0x1c>
    afa2:	cb 01       	movw	r24, r22
    afa4:	84 0f       	add	r24, r20
    afa6:	95 1f       	adc	r25, r21
    afa8:	2e 91       	ld	r18, -X
    afaa:	05 d0       	rcall	.+10     	; 0xafb6 <__eeupd_r18_x128a4u>
    afac:	41 50       	subi	r20, 0x01	; 1
    afae:	50 40       	sbci	r21, 0x00	; 0
    afb0:	d8 f7       	brcc	.-10     	; 0xafa8 <__eeupd_block_x128a4u+0x12>
    afb2:	08 95       	ret

0000afb4 <__eeupd_byte_x128a4u>:
    afb4:	26 2f       	mov	r18, r22

0000afb6 <__eeupd_r18_x128a4u>:
    afb6:	b1 d0       	rcall	.+354    	; 0xb11a <eeprom_mapen>
    afb8:	00 80       	ld	r0, Z
    afba:	02 16       	cp	r0, r18
    afbc:	11 f0       	breq	.+4      	; 0xafc2 <__eeupd_r18_x128a4u+0xc>
    afbe:	0d d0       	rcall	.+26     	; 0xafda <__eewr_r18_x128a4u>
    afc0:	01 97       	sbiw	r24, 0x01	; 1
    afc2:	01 97       	sbiw	r24, 0x01	; 1
    afc4:	08 95       	ret

0000afc6 <__eewr_block_x128a4u>:
    afc6:	dc 01       	movw	r26, r24
    afc8:	cb 01       	movw	r24, r22
    afca:	02 c0       	rjmp	.+4      	; 0xafd0 <__eewr_block_x128a4u+0xa>
    afcc:	2d 91       	ld	r18, X+
    afce:	05 d0       	rcall	.+10     	; 0xafda <__eewr_r18_x128a4u>
    afd0:	41 50       	subi	r20, 0x01	; 1
    afd2:	50 40       	sbci	r21, 0x00	; 0
    afd4:	d8 f7       	brcc	.-10     	; 0xafcc <__eewr_block_x128a4u+0x6>
    afd6:	08 95       	ret

0000afd8 <__eewr_byte_x128a4u>:
    afd8:	26 2f       	mov	r18, r22

0000afda <__eewr_r18_x128a4u>:
    afda:	e0 ec       	ldi	r30, 0xC0	; 192
    afdc:	f1 e0       	ldi	r31, 0x01	; 1
    afde:	37 85       	ldd	r19, Z+15	; 0x0f
    afe0:	37 fd       	sbrc	r19, 7
    afe2:	fd cf       	rjmp	.-6      	; 0xafde <__eewr_r18_x128a4u+0x4>
    afe4:	34 85       	ldd	r19, Z+12	; 0x0c
    afe6:	37 7f       	andi	r19, 0xF7	; 247
    afe8:	34 87       	std	Z+12, r19	; 0x0c
    afea:	37 85       	ldd	r19, Z+15	; 0x0f
    afec:	31 ff       	sbrs	r19, 1
    afee:	09 c0       	rjmp	.+18     	; 0xb002 <__eewr_r18_x128a4u+0x28>
    aff0:	36 e3       	ldi	r19, 0x36	; 54
    aff2:	32 87       	std	Z+10, r19	; 0x0a
    aff4:	38 ed       	ldi	r19, 0xD8	; 216
    aff6:	34 bf       	out	0x34, r19	; 52
    aff8:	31 e0       	ldi	r19, 0x01	; 1
    affa:	33 87       	std	Z+11, r19	; 0x0b
    affc:	37 85       	ldd	r19, Z+15	; 0x0f
    affe:	37 fd       	sbrc	r19, 7
    b000:	fd cf       	rjmp	.-6      	; 0xaffc <__eewr_r18_x128a4u+0x22>
    b002:	33 e3       	ldi	r19, 0x33	; 51
    b004:	32 87       	std	Z+10, r19	; 0x0a
    b006:	80 83       	st	Z, r24
    b008:	91 83       	std	Z+1, r25	; 0x01
    b00a:	12 82       	std	Z+2, r1	; 0x02
    b00c:	24 83       	std	Z+4, r18	; 0x04
    b00e:	25 e3       	ldi	r18, 0x35	; 53
    b010:	22 87       	std	Z+10, r18	; 0x0a
    b012:	28 ed       	ldi	r18, 0xD8	; 216
    b014:	31 e0       	ldi	r19, 0x01	; 1
    b016:	24 bf       	out	0x34, r18	; 52
    b018:	33 87       	std	Z+11, r19	; 0x0b
    b01a:	01 96       	adiw	r24, 0x01	; 1
    b01c:	08 95       	ret

0000b01e <isspace>:
    b01e:	91 11       	cpse	r25, r1
    b020:	88 c0       	rjmp	.+272    	; 0xb132 <__ctype_isfalse>
    b022:	80 32       	cpi	r24, 0x20	; 32
    b024:	19 f0       	breq	.+6      	; 0xb02c <isspace+0xe>
    b026:	89 50       	subi	r24, 0x09	; 9
    b028:	85 50       	subi	r24, 0x05	; 5
    b02a:	d0 f7       	brcc	.-12     	; 0xb020 <isspace+0x2>
    b02c:	08 95       	ret

0000b02e <strchr_P>:
    b02e:	fc 01       	movw	r30, r24
    b030:	05 90       	lpm	r0, Z+
    b032:	06 16       	cp	r0, r22
    b034:	21 f0       	breq	.+8      	; 0xb03e <strchr_P+0x10>
    b036:	00 20       	and	r0, r0
    b038:	d9 f7       	brne	.-10     	; 0xb030 <strchr_P+0x2>
    b03a:	c0 01       	movw	r24, r0
    b03c:	08 95       	ret
    b03e:	31 97       	sbiw	r30, 0x01	; 1
    b040:	cf 01       	movw	r24, r30
    b042:	08 95       	ret

0000b044 <strrev>:
    b044:	dc 01       	movw	r26, r24
    b046:	fc 01       	movw	r30, r24
    b048:	67 2f       	mov	r22, r23
    b04a:	71 91       	ld	r23, Z+
    b04c:	77 23       	and	r23, r23
    b04e:	e1 f7       	brne	.-8      	; 0xb048 <strrev+0x4>
    b050:	32 97       	sbiw	r30, 0x02	; 2
    b052:	04 c0       	rjmp	.+8      	; 0xb05c <strrev+0x18>
    b054:	7c 91       	ld	r23, X
    b056:	6d 93       	st	X+, r22
    b058:	70 83       	st	Z, r23
    b05a:	62 91       	ld	r22, -Z
    b05c:	ae 17       	cp	r26, r30
    b05e:	bf 07       	cpc	r27, r31
    b060:	c8 f3       	brcs	.-14     	; 0xb054 <strrev+0x10>
    b062:	08 95       	ret

0000b064 <fgetc>:
    b064:	cf 93       	push	r28
    b066:	df 93       	push	r29
    b068:	ec 01       	movw	r28, r24
    b06a:	2b 81       	ldd	r18, Y+3	; 0x03
    b06c:	20 ff       	sbrs	r18, 0
    b06e:	33 c0       	rjmp	.+102    	; 0xb0d6 <fgetc+0x72>
    b070:	26 ff       	sbrs	r18, 6
    b072:	0a c0       	rjmp	.+20     	; 0xb088 <fgetc+0x24>
    b074:	2f 7b       	andi	r18, 0xBF	; 191
    b076:	2b 83       	std	Y+3, r18	; 0x03
    b078:	8e 81       	ldd	r24, Y+6	; 0x06
    b07a:	9f 81       	ldd	r25, Y+7	; 0x07
    b07c:	01 96       	adiw	r24, 0x01	; 1
    b07e:	8e 83       	std	Y+6, r24	; 0x06
    b080:	9f 83       	std	Y+7, r25	; 0x07
    b082:	8a 81       	ldd	r24, Y+2	; 0x02
    b084:	90 e0       	ldi	r25, 0x00	; 0
    b086:	29 c0       	rjmp	.+82     	; 0xb0da <fgetc+0x76>
    b088:	22 ff       	sbrs	r18, 2
    b08a:	0f c0       	rjmp	.+30     	; 0xb0aa <fgetc+0x46>
    b08c:	e8 81       	ld	r30, Y
    b08e:	f9 81       	ldd	r31, Y+1	; 0x01
    b090:	80 81       	ld	r24, Z
    b092:	99 27       	eor	r25, r25
    b094:	87 fd       	sbrc	r24, 7
    b096:	90 95       	com	r25
    b098:	00 97       	sbiw	r24, 0x00	; 0
    b09a:	19 f4       	brne	.+6      	; 0xb0a2 <fgetc+0x3e>
    b09c:	20 62       	ori	r18, 0x20	; 32
    b09e:	2b 83       	std	Y+3, r18	; 0x03
    b0a0:	1a c0       	rjmp	.+52     	; 0xb0d6 <fgetc+0x72>
    b0a2:	31 96       	adiw	r30, 0x01	; 1
    b0a4:	e8 83       	st	Y, r30
    b0a6:	f9 83       	std	Y+1, r31	; 0x01
    b0a8:	0e c0       	rjmp	.+28     	; 0xb0c6 <fgetc+0x62>
    b0aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    b0ac:	fb 85       	ldd	r31, Y+11	; 0x0b
    b0ae:	19 95       	eicall
    b0b0:	97 ff       	sbrs	r25, 7
    b0b2:	09 c0       	rjmp	.+18     	; 0xb0c6 <fgetc+0x62>
    b0b4:	2b 81       	ldd	r18, Y+3	; 0x03
    b0b6:	01 96       	adiw	r24, 0x01	; 1
    b0b8:	11 f4       	brne	.+4      	; 0xb0be <fgetc+0x5a>
    b0ba:	80 e1       	ldi	r24, 0x10	; 16
    b0bc:	01 c0       	rjmp	.+2      	; 0xb0c0 <fgetc+0x5c>
    b0be:	80 e2       	ldi	r24, 0x20	; 32
    b0c0:	82 2b       	or	r24, r18
    b0c2:	8b 83       	std	Y+3, r24	; 0x03
    b0c4:	08 c0       	rjmp	.+16     	; 0xb0d6 <fgetc+0x72>
    b0c6:	2e 81       	ldd	r18, Y+6	; 0x06
    b0c8:	3f 81       	ldd	r19, Y+7	; 0x07
    b0ca:	2f 5f       	subi	r18, 0xFF	; 255
    b0cc:	3f 4f       	sbci	r19, 0xFF	; 255
    b0ce:	2e 83       	std	Y+6, r18	; 0x06
    b0d0:	3f 83       	std	Y+7, r19	; 0x07
    b0d2:	99 27       	eor	r25, r25
    b0d4:	02 c0       	rjmp	.+4      	; 0xb0da <fgetc+0x76>
    b0d6:	8f ef       	ldi	r24, 0xFF	; 255
    b0d8:	9f ef       	ldi	r25, 0xFF	; 255
    b0da:	df 91       	pop	r29
    b0dc:	cf 91       	pop	r28
    b0de:	08 95       	ret

0000b0e0 <ungetc>:
    b0e0:	fb 01       	movw	r30, r22
    b0e2:	23 81       	ldd	r18, Z+3	; 0x03
    b0e4:	20 ff       	sbrs	r18, 0
    b0e6:	12 c0       	rjmp	.+36     	; 0xb10c <ungetc+0x2c>
    b0e8:	26 fd       	sbrc	r18, 6
    b0ea:	10 c0       	rjmp	.+32     	; 0xb10c <ungetc+0x2c>
    b0ec:	8f 3f       	cpi	r24, 0xFF	; 255
    b0ee:	3f ef       	ldi	r19, 0xFF	; 255
    b0f0:	93 07       	cpc	r25, r19
    b0f2:	61 f0       	breq	.+24     	; 0xb10c <ungetc+0x2c>
    b0f4:	82 83       	std	Z+2, r24	; 0x02
    b0f6:	2f 7d       	andi	r18, 0xDF	; 223
    b0f8:	20 64       	ori	r18, 0x40	; 64
    b0fa:	23 83       	std	Z+3, r18	; 0x03
    b0fc:	26 81       	ldd	r18, Z+6	; 0x06
    b0fe:	37 81       	ldd	r19, Z+7	; 0x07
    b100:	21 50       	subi	r18, 0x01	; 1
    b102:	31 09       	sbc	r19, r1
    b104:	26 83       	std	Z+6, r18	; 0x06
    b106:	37 83       	std	Z+7, r19	; 0x07
    b108:	99 27       	eor	r25, r25
    b10a:	08 95       	ret
    b10c:	8f ef       	ldi	r24, 0xFF	; 255
    b10e:	9f ef       	ldi	r25, 0xFF	; 255
    b110:	08 95       	ret

0000b112 <__eerd_byte_x128a1>:
    b112:	03 d0       	rcall	.+6      	; 0xb11a <eeprom_mapen>
    b114:	80 81       	ld	r24, Z
    b116:	99 27       	eor	r25, r25
    b118:	08 95       	ret

0000b11a <eeprom_mapen>:
    b11a:	e0 ec       	ldi	r30, 0xC0	; 192
    b11c:	f1 e0       	ldi	r31, 0x01	; 1
    b11e:	37 85       	ldd	r19, Z+15	; 0x0f
    b120:	37 fd       	sbrc	r19, 7
    b122:	fd cf       	rjmp	.-6      	; 0xb11e <eeprom_mapen+0x4>
    b124:	34 85       	ldd	r19, Z+12	; 0x0c
    b126:	38 60       	ori	r19, 0x08	; 8
    b128:	34 87       	std	Z+12, r19	; 0x0c
    b12a:	fc 01       	movw	r30, r24
    b12c:	e0 50       	subi	r30, 0x00	; 0
    b12e:	f0 4f       	sbci	r31, 0xF0	; 240
    b130:	08 95       	ret

0000b132 <__ctype_isfalse>:
    b132:	99 27       	eor	r25, r25
    b134:	88 27       	eor	r24, r24

0000b136 <__ctype_istrue>:
    b136:	08 95       	ret

0000b138 <_exit>:
    b138:	f8 94       	cli

0000b13a <__stop_program>:
    b13a:	ff cf       	rjmp	.-2      	; 0xb13a <__stop_program>
