
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000157e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00802000  0000157e  00001612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004ae  00802128  00802128  0000173a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000007e8  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000198e0  00000000  00000000  00001f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003204  00000000  00000000  0001b85e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000dad9  00000000  00000000  0001ea62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00002524  00000000  00000000  0002c53c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000030ca  00000000  00000000  0002ea60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002a3af  00000000  00000000  00031b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003c10  00000000  00000000  0005bed9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	19 c1       	rjmp	.+562    	; 0x238 <__bad_interrupt>
       6:	00 00       	nop
       8:	17 c1       	rjmp	.+558    	; 0x238 <__bad_interrupt>
       a:	00 00       	nop
       c:	15 c1       	rjmp	.+554    	; 0x238 <__bad_interrupt>
       e:	00 00       	nop
      10:	13 c1       	rjmp	.+550    	; 0x238 <__bad_interrupt>
      12:	00 00       	nop
      14:	11 c1       	rjmp	.+546    	; 0x238 <__bad_interrupt>
      16:	00 00       	nop
      18:	0f c1       	rjmp	.+542    	; 0x238 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0d c1       	rjmp	.+538    	; 0x238 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0b c1       	rjmp	.+534    	; 0x238 <__bad_interrupt>
      22:	00 00       	nop
      24:	09 c1       	rjmp	.+530    	; 0x238 <__bad_interrupt>
      26:	00 00       	nop
      28:	7a c7       	rjmp	.+3828   	; 0xf1e <__vector_10>
      2a:	00 00       	nop
      2c:	05 c1       	rjmp	.+522    	; 0x238 <__bad_interrupt>
      2e:	00 00       	nop
      30:	03 c1       	rjmp	.+518    	; 0x238 <__bad_interrupt>
      32:	00 00       	nop
      34:	01 c1       	rjmp	.+514    	; 0x238 <__bad_interrupt>
      36:	00 00       	nop
      38:	f3 c1       	rjmp	.+998    	; 0x420 <__vector_14>
      3a:	00 00       	nop
      3c:	fd c0       	rjmp	.+506    	; 0x238 <__bad_interrupt>
      3e:	00 00       	nop
      40:	fb c0       	rjmp	.+502    	; 0x238 <__bad_interrupt>
      42:	00 00       	nop
      44:	f9 c0       	rjmp	.+498    	; 0x238 <__bad_interrupt>
      46:	00 00       	nop
      48:	f7 c0       	rjmp	.+494    	; 0x238 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f5 c0       	rjmp	.+490    	; 0x238 <__bad_interrupt>
      4e:	00 00       	nop
      50:	28 c7       	rjmp	.+3664   	; 0xea2 <__vector_20>
      52:	00 00       	nop
      54:	f1 c0       	rjmp	.+482    	; 0x238 <__bad_interrupt>
      56:	00 00       	nop
      58:	ef c0       	rjmp	.+478    	; 0x238 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ed c0       	rjmp	.+474    	; 0x238 <__bad_interrupt>
      5e:	00 00       	nop
      60:	eb c0       	rjmp	.+470    	; 0x238 <__bad_interrupt>
      62:	00 00       	nop
      64:	e9 c0       	rjmp	.+466    	; 0x238 <__bad_interrupt>
      66:	00 00       	nop
      68:	e7 c0       	rjmp	.+462    	; 0x238 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e5 c0       	rjmp	.+458    	; 0x238 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e3 c0       	rjmp	.+454    	; 0x238 <__bad_interrupt>
      72:	00 00       	nop
      74:	e1 c0       	rjmp	.+450    	; 0x238 <__bad_interrupt>
      76:	00 00       	nop
      78:	df c0       	rjmp	.+446    	; 0x238 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	dd c0       	rjmp	.+442    	; 0x238 <__bad_interrupt>
      7e:	00 00       	nop
      80:	db c0       	rjmp	.+438    	; 0x238 <__bad_interrupt>
      82:	00 00       	nop
      84:	d9 c0       	rjmp	.+434    	; 0x238 <__bad_interrupt>
      86:	00 00       	nop
      88:	d7 c0       	rjmp	.+430    	; 0x238 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d5 c0       	rjmp	.+426    	; 0x238 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d3 c0       	rjmp	.+422    	; 0x238 <__bad_interrupt>
      92:	00 00       	nop
      94:	d1 c0       	rjmp	.+418    	; 0x238 <__bad_interrupt>
      96:	00 00       	nop
      98:	cf c0       	rjmp	.+414    	; 0x238 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cd c0       	rjmp	.+410    	; 0x238 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	cb c0       	rjmp	.+406    	; 0x238 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c9 c0       	rjmp	.+402    	; 0x238 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c7 c0       	rjmp	.+398    	; 0x238 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c5 c0       	rjmp	.+394    	; 0x238 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c3 c0       	rjmp	.+390    	; 0x238 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c1 c0       	rjmp	.+386    	; 0x238 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bf c0       	rjmp	.+382    	; 0x238 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	bd c0       	rjmp	.+378    	; 0x238 <__bad_interrupt>
      be:	00 00       	nop
      c0:	bb c0       	rjmp	.+374    	; 0x238 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b9 c0       	rjmp	.+370    	; 0x238 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b7 c0       	rjmp	.+366    	; 0x238 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b5 c0       	rjmp	.+362    	; 0x238 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b3 c0       	rjmp	.+358    	; 0x238 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b1 c0       	rjmp	.+354    	; 0x238 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	af c0       	rjmp	.+350    	; 0x238 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ad c0       	rjmp	.+346    	; 0x238 <__bad_interrupt>
      de:	00 00       	nop
      e0:	ab c0       	rjmp	.+342    	; 0x238 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a9 c0       	rjmp	.+338    	; 0x238 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a7 c0       	rjmp	.+334    	; 0x238 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a5 c0       	rjmp	.+330    	; 0x238 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a3 c0       	rjmp	.+326    	; 0x238 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a1 c0       	rjmp	.+322    	; 0x238 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9f c0       	rjmp	.+318    	; 0x238 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9d c0       	rjmp	.+314    	; 0x238 <__bad_interrupt>
      fe:	00 00       	nop
     100:	9b c0       	rjmp	.+310    	; 0x238 <__bad_interrupt>
     102:	00 00       	nop
     104:	99 c0       	rjmp	.+306    	; 0x238 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c6       	rjmp	.+3526   	; 0xed0 <__vector_66>
     10a:	00 00       	nop
     10c:	95 c0       	rjmp	.+298    	; 0x238 <__bad_interrupt>
     10e:	00 00       	nop
     110:	93 c0       	rjmp	.+294    	; 0x238 <__bad_interrupt>
     112:	00 00       	nop
     114:	91 c0       	rjmp	.+290    	; 0x238 <__bad_interrupt>
     116:	00 00       	nop
     118:	8f c0       	rjmp	.+286    	; 0x238 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8d c0       	rjmp	.+282    	; 0x238 <__bad_interrupt>
     11e:	00 00       	nop
     120:	8b c0       	rjmp	.+278    	; 0x238 <__bad_interrupt>
     122:	00 00       	nop
     124:	89 c0       	rjmp	.+274    	; 0x238 <__bad_interrupt>
     126:	00 00       	nop
     128:	87 c0       	rjmp	.+270    	; 0x238 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	85 c0       	rjmp	.+266    	; 0x238 <__bad_interrupt>
     12e:	00 00       	nop
     130:	83 c0       	rjmp	.+262    	; 0x238 <__bad_interrupt>
     132:	00 00       	nop
     134:	81 c0       	rjmp	.+258    	; 0x238 <__bad_interrupt>
     136:	00 00       	nop
     138:	7f c0       	rjmp	.+254    	; 0x238 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	7d c0       	rjmp	.+250    	; 0x238 <__bad_interrupt>
     13e:	00 00       	nop
     140:	7b c0       	rjmp	.+246    	; 0x238 <__bad_interrupt>
     142:	00 00       	nop
     144:	79 c0       	rjmp	.+242    	; 0x238 <__bad_interrupt>
     146:	00 00       	nop
     148:	77 c0       	rjmp	.+238    	; 0x238 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	75 c0       	rjmp	.+234    	; 0x238 <__bad_interrupt>
     14e:	00 00       	nop
     150:	73 c0       	rjmp	.+230    	; 0x238 <__bad_interrupt>
     152:	00 00       	nop
     154:	71 c0       	rjmp	.+226    	; 0x238 <__bad_interrupt>
     156:	00 00       	nop
     158:	6f c0       	rjmp	.+222    	; 0x238 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	6d c0       	rjmp	.+218    	; 0x238 <__bad_interrupt>
     15e:	00 00       	nop
     160:	34 c1       	rjmp	.+616    	; 0x3ca <__vector_88>
     162:	00 00       	nop
     164:	69 c0       	rjmp	.+210    	; 0x238 <__bad_interrupt>
     166:	00 00       	nop
     168:	67 c0       	rjmp	.+206    	; 0x238 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	65 c0       	rjmp	.+202    	; 0x238 <__bad_interrupt>
     16e:	00 00       	nop
     170:	63 c0       	rjmp	.+198    	; 0x238 <__bad_interrupt>
     172:	00 00       	nop
     174:	61 c0       	rjmp	.+194    	; 0x238 <__bad_interrupt>
     176:	00 00       	nop
     178:	5f c0       	rjmp	.+190    	; 0x238 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5d c0       	rjmp	.+186    	; 0x238 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5b c0       	rjmp	.+182    	; 0x238 <__bad_interrupt>
     182:	00 00       	nop
     184:	59 c0       	rjmp	.+178    	; 0x238 <__bad_interrupt>
     186:	00 00       	nop
     188:	57 c0       	rjmp	.+174    	; 0x238 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	55 c0       	rjmp	.+170    	; 0x238 <__bad_interrupt>
     18e:	00 00       	nop
     190:	53 c0       	rjmp	.+166    	; 0x238 <__bad_interrupt>
     192:	00 00       	nop
     194:	51 c0       	rjmp	.+162    	; 0x238 <__bad_interrupt>
     196:	00 00       	nop
     198:	4f c0       	rjmp	.+158    	; 0x238 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4d c0       	rjmp	.+154    	; 0x238 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4b c0       	rjmp	.+150    	; 0x238 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	49 c0       	rjmp	.+146    	; 0x238 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	47 c0       	rjmp	.+142    	; 0x238 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	45 c0       	rjmp	.+138    	; 0x238 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	43 c0       	rjmp	.+134    	; 0x238 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	41 c0       	rjmp	.+130    	; 0x238 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3f c0       	rjmp	.+126    	; 0x238 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3d c0       	rjmp	.+122    	; 0x238 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3b c0       	rjmp	.+118    	; 0x238 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	39 c0       	rjmp	.+114    	; 0x238 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	37 c0       	rjmp	.+110    	; 0x238 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	35 c0       	rjmp	.+106    	; 0x238 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	33 c0       	rjmp	.+102    	; 0x238 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	31 c0       	rjmp	.+98     	; 0x238 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2f c0       	rjmp	.+94     	; 0x238 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2d c0       	rjmp	.+90     	; 0x238 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2b c0       	rjmp	.+86     	; 0x238 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	29 c0       	rjmp	.+82     	; 0x238 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	27 c0       	rjmp	.+78     	; 0x238 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	25 c0       	rjmp	.+74     	; 0x238 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	23 c0       	rjmp	.+70     	; 0x238 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	21 c0       	rjmp	.+66     	; 0x238 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	1f c0       	rjmp	.+62     	; 0x238 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	11 e2       	ldi	r17, 0x21	; 33
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	ee e7       	ldi	r30, 0x7E	; 126
     210:	f5 e1       	ldi	r31, 0x15	; 21
     212:	00 e0       	ldi	r16, 0x00	; 0
     214:	0b bf       	out	0x3b, r16	; 59
     216:	02 c0       	rjmp	.+4      	; 0x21c <__do_copy_data+0x14>
     218:	07 90       	elpm	r0, Z+
     21a:	0d 92       	st	X+, r0
     21c:	a8 32       	cpi	r26, 0x28	; 40
     21e:	b1 07       	cpc	r27, r17
     220:	d9 f7       	brne	.-10     	; 0x218 <__do_copy_data+0x10>

00000222 <__do_clear_bss>:
     222:	25 e2       	ldi	r18, 0x25	; 37
     224:	a8 e2       	ldi	r26, 0x28	; 40
     226:	b1 e2       	ldi	r27, 0x21	; 33
     228:	01 c0       	rjmp	.+2      	; 0x22c <.do_clear_bss_start>

0000022a <.do_clear_bss_loop>:
     22a:	1d 92       	st	X+, r1

0000022c <.do_clear_bss_start>:
     22c:	a6 3d       	cpi	r26, 0xD6	; 214
     22e:	b2 07       	cpc	r27, r18
     230:	e1 f7       	brne	.-8      	; 0x22a <.do_clear_bss_loop>
     232:	12 d6       	rcall	.+3108   	; 0xe58 <main>
     234:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <_exit>

00000238 <__bad_interrupt>:
     238:	e3 ce       	rjmp	.-570    	; 0x0 <__vectors>

0000023a <clock_setup_32_mhz>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
}

void clock_setup_32_mhz(void) {
	
	OSC.CTRL |= OSC_RC32MEN_bm;
     23a:	80 91 50 00 	lds	r24, 0x0050
     23e:	82 60       	ori	r24, 0x02	; 2
     240:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     244:	80 91 51 00 	lds	r24, 0x0051
     248:	81 ff       	sbrs	r24, 1
     24a:	fc cf       	rjmp	.-8      	; 0x244 <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
     24c:	88 ed       	ldi	r24, 0xD8	; 216
     24e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	80 93 40 00 	sts	0x0040, r24
     256:	08 95       	ret

00000258 <esp8266_on>:
	tmp2 = strrchr(tmp,'}');
	*tmp2++;
	
	remove_substring(tmp,tmp2);
	
	strncpy(str,tmp,strlen(tmp));
     258:	e0 e6       	ldi	r30, 0x60	; 96
     25a:	f6 e0       	ldi	r31, 0x06	; 6
     25c:	80 e2       	ldi	r24, 0x20	; 32
     25e:	81 83       	std	Z+1, r24	; 0x01
     260:	85 83       	std	Z+5, r24	; 0x05
     262:	2f ef       	ldi	r18, 0xFF	; 255
     264:	33 e2       	ldi	r19, 0x23	; 35
     266:	84 ef       	ldi	r24, 0xF4	; 244
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	21 50       	subi	r18, 0x01	; 1
     26c:	30 40       	sbci	r19, 0x00	; 0
     26e:	80 40       	sbci	r24, 0x00	; 0
     270:	90 40       	sbci	r25, 0x00	; 0
     272:	d9 f7       	brne	.-10     	; 0x26a <esp8266_on+0x12>
     274:	00 c0       	rjmp	.+0      	; 0x276 <esp8266_on+0x1e>
     276:	00 00       	nop
     278:	08 95       	ret

0000027a <esp8266_setup_webserver>:

volatile static uint16_t rx_ptr = 0;
static char rx_buffer[RX_BUFFER];

static inline void flush_rx_buffer(void) {
	rx_ptr = 0;
     27a:	10 92 10 25 	sts	0x2510, r1
     27e:	10 92 11 25 	sts	0x2511, r1
	memset(rx_buffer, 0, RX_BUFFER);
     282:	88 ee       	ldi	r24, 0xE8	; 232
     284:	93 e0       	ldi	r25, 0x03	; 3
     286:	e8 e2       	ldi	r30, 0x28	; 40
     288:	f1 e2       	ldi	r31, 0x21	; 33
     28a:	df 01       	movw	r26, r30
     28c:	9c 01       	movw	r18, r24
     28e:	1d 92       	st	X+, r1
     290:	21 50       	subi	r18, 0x01	; 1
     292:	30 40       	sbci	r19, 0x00	; 0
     294:	e1 f7       	brne	.-8      	; 0x28e <esp8266_setup_webserver+0x14>
}

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	flush_rx_buffer();
	//puts(str);
	printf("%s\r\n",str);
     296:	82 e1       	ldi	r24, 0x12	; 18
     298:	90 e2       	ldi	r25, 0x20	; 32
     29a:	9f 93       	push	r25
     29c:	8f 93       	push	r24
     29e:	8a e1       	ldi	r24, 0x1A	; 26
     2a0:	90 e2       	ldi	r25, 0x20	; 32
     2a2:	9f 93       	push	r25
     2a4:	8f 93       	push	r24
     2a6:	9d d6       	rcall	.+3386   	; 0xfe2 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a8:	3a ea       	ldi	r19, 0xAA	; 170
     2aa:	86 ee       	ldi	r24, 0xE6	; 230
     2ac:	96 e9       	ldi	r25, 0x96	; 150
     2ae:	a1 e0       	ldi	r26, 0x01	; 1
     2b0:	31 50       	subi	r19, 0x01	; 1
     2b2:	80 40       	sbci	r24, 0x00	; 0
     2b4:	90 40       	sbci	r25, 0x00	; 0
     2b6:	a0 40       	sbci	r26, 0x00	; 0
     2b8:	d9 f7       	brne	.-10     	; 0x2b0 <esp8266_setup_webserver+0x36>
     2ba:	00 00       	nop

volatile static uint16_t rx_ptr = 0;
static char rx_buffer[RX_BUFFER];

static inline void flush_rx_buffer(void) {
	rx_ptr = 0;
     2bc:	10 92 10 25 	sts	0x2510, r1
     2c0:	10 92 11 25 	sts	0x2511, r1
	memset(rx_buffer, 0, RX_BUFFER);
     2c4:	88 ee       	ldi	r24, 0xE8	; 232
     2c6:	93 e0       	ldi	r25, 0x03	; 3
     2c8:	e8 e2       	ldi	r30, 0x28	; 40
     2ca:	f1 e2       	ldi	r31, 0x21	; 33
     2cc:	df 01       	movw	r26, r30
     2ce:	9c 01       	movw	r18, r24
     2d0:	1d 92       	st	X+, r1
     2d2:	21 50       	subi	r18, 0x01	; 1
     2d4:	30 40       	sbci	r19, 0x00	; 0
     2d6:	e1 f7       	brne	.-8      	; 0x2d0 <esp8266_setup_webserver+0x56>
}

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	flush_rx_buffer();
	//puts(str);
	printf("%s\r\n",str);
     2d8:	84 e9       	ldi	r24, 0x94	; 148
     2da:	90 e2       	ldi	r25, 0x20	; 32
     2dc:	9f 93       	push	r25
     2de:	8f 93       	push	r24
     2e0:	8a e1       	ldi	r24, 0x1A	; 26
     2e2:	90 e2       	ldi	r25, 0x20	; 32
     2e4:	9f 93       	push	r25
     2e6:	8f 93       	push	r24
     2e8:	7c d6       	rcall	.+3320   	; 0xfe2 <printf>
     2ea:	3f ef       	ldi	r19, 0xFF	; 255
     2ec:	8f e4       	ldi	r24, 0x4F	; 79
     2ee:	93 ec       	ldi	r25, 0xC3	; 195
     2f0:	31 50       	subi	r19, 0x01	; 1
     2f2:	80 40       	sbci	r24, 0x00	; 0
     2f4:	90 40       	sbci	r25, 0x00	; 0
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <esp8266_setup_webserver+0x76>
     2f8:	00 c0       	rjmp	.+0      	; 0x2fa <esp8266_setup_webserver+0x80>
     2fa:	00 00       	nop

volatile static uint16_t rx_ptr = 0;
static char rx_buffer[RX_BUFFER];

static inline void flush_rx_buffer(void) {
	rx_ptr = 0;
     2fc:	10 92 10 25 	sts	0x2510, r1
     300:	10 92 11 25 	sts	0x2511, r1
	memset(rx_buffer, 0, RX_BUFFER);
     304:	88 ee       	ldi	r24, 0xE8	; 232
     306:	93 e0       	ldi	r25, 0x03	; 3
     308:	e8 e2       	ldi	r30, 0x28	; 40
     30a:	f1 e2       	ldi	r31, 0x21	; 33
     30c:	df 01       	movw	r26, r30
     30e:	9c 01       	movw	r18, r24
     310:	1d 92       	st	X+, r1
     312:	21 50       	subi	r18, 0x01	; 1
     314:	30 40       	sbci	r19, 0x00	; 0
     316:	e1 f7       	brne	.-8      	; 0x310 <esp8266_setup_webserver+0x96>
}

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	flush_rx_buffer();
	//puts(str);
	printf("%s\r\n",str);
     318:	80 ea       	ldi	r24, 0xA0	; 160
     31a:	90 e2       	ldi	r25, 0x20	; 32
     31c:	9f 93       	push	r25
     31e:	8f 93       	push	r24
     320:	8a e1       	ldi	r24, 0x1A	; 26
     322:	90 e2       	ldi	r25, 0x20	; 32
     324:	9f 93       	push	r25
     326:	8f 93       	push	r24
     328:	5c d6       	rcall	.+3256   	; 0xfe2 <printf>
     32a:	3f ef       	ldi	r19, 0xFF	; 255
     32c:	8f e4       	ldi	r24, 0x4F	; 79
     32e:	93 ec       	ldi	r25, 0xC3	; 195
     330:	31 50       	subi	r19, 0x01	; 1
     332:	80 40       	sbci	r24, 0x00	; 0
     334:	90 40       	sbci	r25, 0x00	; 0
     336:	e1 f7       	brne	.-8      	; 0x330 <esp8266_setup_webserver+0xb6>
     338:	00 c0       	rjmp	.+0      	; 0x33a <esp8266_setup_webserver+0xc0>
     33a:	00 00       	nop

volatile static uint16_t rx_ptr = 0;
static char rx_buffer[RX_BUFFER];

static inline void flush_rx_buffer(void) {
	rx_ptr = 0;
     33c:	10 92 10 25 	sts	0x2510, r1
     340:	10 92 11 25 	sts	0x2511, r1
	memset(rx_buffer, 0, RX_BUFFER);
     344:	88 ee       	ldi	r24, 0xE8	; 232
     346:	93 e0       	ldi	r25, 0x03	; 3
     348:	e8 e2       	ldi	r30, 0x28	; 40
     34a:	f1 e2       	ldi	r31, 0x21	; 33
     34c:	df 01       	movw	r26, r30
     34e:	9c 01       	movw	r18, r24
     350:	1d 92       	st	X+, r1
     352:	21 50       	subi	r18, 0x01	; 1
     354:	30 40       	sbci	r19, 0x00	; 0
     356:	e1 f7       	brne	.-8      	; 0x350 <esp8266_setup_webserver+0xd6>
}

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	flush_rx_buffer();
	//puts(str);
	printf("%s\r\n",str);
     358:	8c ea       	ldi	r24, 0xAC	; 172
     35a:	90 e2       	ldi	r25, 0x20	; 32
     35c:	9f 93       	push	r25
     35e:	8f 93       	push	r24
     360:	8a e1       	ldi	r24, 0x1A	; 26
     362:	90 e2       	ldi	r25, 0x20	; 32
     364:	9f 93       	push	r25
     366:	8f 93       	push	r24
     368:	3c d6       	rcall	.+3192   	; 0xfe2 <printf>
     36a:	3f ef       	ldi	r19, 0xFF	; 255
     36c:	8f e4       	ldi	r24, 0x4F	; 79
     36e:	93 ec       	ldi	r25, 0xC3	; 195
     370:	31 50       	subi	r19, 0x01	; 1
     372:	80 40       	sbci	r24, 0x00	; 0
     374:	90 40       	sbci	r25, 0x00	; 0
     376:	e1 f7       	brne	.-8      	; 0x370 <esp8266_setup_webserver+0xf6>
     378:	00 c0       	rjmp	.+0      	; 0x37a <esp8266_setup_webserver+0x100>
     37a:	00 00       	nop

volatile static uint16_t rx_ptr = 0;
static char rx_buffer[RX_BUFFER];

static inline void flush_rx_buffer(void) {
	rx_ptr = 0;
     37c:	10 92 10 25 	sts	0x2510, r1
     380:	10 92 11 25 	sts	0x2511, r1
	memset(rx_buffer, 0, RX_BUFFER);
     384:	88 ee       	ldi	r24, 0xE8	; 232
     386:	93 e0       	ldi	r25, 0x03	; 3
     388:	e8 e2       	ldi	r30, 0x28	; 40
     38a:	f1 e2       	ldi	r31, 0x21	; 33
     38c:	df 01       	movw	r26, r30
     38e:	9c 01       	movw	r18, r24
     390:	1d 92       	st	X+, r1
     392:	21 50       	subi	r18, 0x01	; 1
     394:	30 40       	sbci	r19, 0x00	; 0
     396:	e1 f7       	brne	.-8      	; 0x390 <esp8266_setup_webserver+0x116>
}

static inline void esp8266_send_cmd(char *str, uint16_t timeout_ms) {
	flush_rx_buffer();
	//puts(str);
	printf("%s\r\n",str);
     398:	8e eb       	ldi	r24, 0xBE	; 190
     39a:	90 e2       	ldi	r25, 0x20	; 32
     39c:	9f 93       	push	r25
     39e:	8f 93       	push	r24
     3a0:	8a e1       	ldi	r24, 0x1A	; 26
     3a2:	90 e2       	ldi	r25, 0x20	; 32
     3a4:	9f 93       	push	r25
     3a6:	8f 93       	push	r24
     3a8:	1c d6       	rcall	.+3128   	; 0xfe2 <printf>
     3aa:	3f ef       	ldi	r19, 0xFF	; 255
     3ac:	8f e4       	ldi	r24, 0x4F	; 79
     3ae:	93 ec       	ldi	r25, 0xC3	; 195
     3b0:	31 50       	subi	r19, 0x01	; 1
     3b2:	80 40       	sbci	r24, 0x00	; 0
     3b4:	90 40       	sbci	r25, 0x00	; 0
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <esp8266_setup_webserver+0x136>
     3b8:	00 c0       	rjmp	.+0      	; 0x3ba <esp8266_setup_webserver+0x140>
     3ba:	00 00       	nop
	esp8266_send_cmd("AT+CIPMUX=1", 2000);
	esp8266_send_cmd("AT+CWMODE=2", 2000);
	esp8266_send_cmd("AT+CIPSERVER=1,80", 2000);
	esp8266_send_cmd("AT+CIFSR=?", 2000);
	
	return SUCCESS;
     3bc:	ad b7       	in	r26, 0x3d	; 61
     3be:	be b7       	in	r27, 0x3e	; 62
     3c0:	54 96       	adiw	r26, 0x14	; 20
     3c2:	ad bf       	out	0x3d, r26	; 61
     3c4:	be bf       	out	0x3e, r27	; 62
}
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	08 95       	ret

000003ca <__vector_88>:

ISR(USARTD0_RXC_vect) {
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	0b b6       	in	r0, 0x3b	; 59
     3d6:	0f 92       	push	r0
     3d8:	2f 93       	push	r18
     3da:	3f 93       	push	r19
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
     3e0:	ef 93       	push	r30
     3e2:	ff 93       	push	r31
	rx_buffer[rx_ptr++] = USARTD0.DATA;
     3e4:	80 91 10 25 	lds	r24, 0x2510
     3e8:	90 91 11 25 	lds	r25, 0x2511
     3ec:	9c 01       	movw	r18, r24
     3ee:	2f 5f       	subi	r18, 0xFF	; 255
     3f0:	3f 4f       	sbci	r19, 0xFF	; 255
     3f2:	20 93 10 25 	sts	0x2510, r18
     3f6:	30 93 11 25 	sts	0x2511, r19
     3fa:	20 91 a0 09 	lds	r18, 0x09A0
     3fe:	fc 01       	movw	r30, r24
     400:	e8 5d       	subi	r30, 0xD8	; 216
     402:	fe 4d       	sbci	r31, 0xDE	; 222
     404:	20 83       	st	Z, r18
     406:	ff 91       	pop	r31
     408:	ef 91       	pop	r30
     40a:	9f 91       	pop	r25
     40c:	8f 91       	pop	r24
     40e:	3f 91       	pop	r19
     410:	2f 91       	pop	r18
     412:	0f 90       	pop	r0
     414:	0b be       	out	0x3b, r0	; 59
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
     420:	1f 92       	push	r1
     422:	0f 92       	push	r0
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	0b b6       	in	r0, 0x3b	; 59
     42c:	0f 92       	push	r0
     42e:	2f 93       	push	r18
     430:	3f 93       	push	r19
     432:	4f 93       	push	r20
     434:	5f 93       	push	r21
     436:	6f 93       	push	r22
     438:	8f 93       	push	r24
     43a:	9f 93       	push	r25
     43c:	af 93       	push	r26
     43e:	bf 93       	push	r27
     440:	ef 93       	push	r30
     442:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
     444:	e0 91 95 25 	lds	r30, 0x2595
     448:	f0 91 96 25 	lds	r31, 0x2596
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	if (!fcb) return;
     44c:	30 97       	sbiw	r30, 0x00	; 0
     44e:	b9 f1       	breq	.+110    	; 0x4be <__vector_14+0x9e>
	ct = fcb->ct; ri = fcb->ri;
     450:	46 81       	ldd	r20, Z+6	; 0x06
     452:	57 81       	ldd	r21, Z+7	; 0x07
     454:	22 81       	ldd	r18, Z+2	; 0x02
     456:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
     458:	a0 85       	ldd	r26, Z+8	; 0x08
     45a:	b1 85       	ldd	r27, Z+9	; 0x09
     45c:	a2 0f       	add	r26, r18
     45e:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
     460:	80 81       	ld	r24, Z
     462:	91 81       	ldd	r25, Z+1	; 0x01
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	91 05       	cpc	r25, r1
     468:	79 f0       	breq	.+30     	; 0x488 <__vector_14+0x68>
     46a:	d8 f1       	brcs	.+118    	; 0x4e2 <__vector_14+0xc2>
     46c:	02 97       	sbiw	r24, 0x02	; 2
     46e:	09 f0       	breq	.+2      	; 0x472 <__vector_14+0x52>
     470:	41 c0       	rjmp	.+130    	; 0x4f4 <__vector_14+0xd4>
		if (ct < 2) return;
		l1 = buff[0]; r2 = buff[1];
		ct -= 2; ri += 2;
		break;
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
     472:	42 30       	cpi	r20, 0x02	; 2
     474:	51 05       	cpc	r21, r1
     476:	18 f1       	brcs	.+70     	; 0x4be <__vector_14+0x9e>
		l1 = r2 = buff[1] + 128;
     478:	11 96       	adiw	r26, 0x01	; 1
     47a:	6c 91       	ld	r22, X
     47c:	60 58       	subi	r22, 0x80	; 128
		ct -= 2; ri += 2;
     47e:	42 50       	subi	r20, 0x02	; 2
     480:	51 09       	sbc	r21, r1
     482:	2e 5f       	subi	r18, 0xFE	; 254
     484:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
     486:	08 c0       	rjmp	.+16     	; 0x498 <__vector_14+0x78>
		if (ct < 1) return;
		l1 = r2 = buff[0];
		ct -= 1; ri += 1;
		break;
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
     488:	42 30       	cpi	r20, 0x02	; 2
     48a:	51 05       	cpc	r21, r1
     48c:	c0 f0       	brcs	.+48     	; 0x4be <__vector_14+0x9e>
		l1 = buff[0]; r2 = buff[1];
     48e:	6c 91       	ld	r22, X
		ct -= 2; ri += 2;
     490:	42 50       	subi	r20, 0x02	; 2
     492:	51 09       	sbc	r21, r1
     494:	2e 5f       	subi	r18, 0xFE	; 254
     496:	3f 4f       	sbci	r19, 0xFF	; 255
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
		ri += 4;
	}
	fcb->ct = ct;
     498:	46 83       	std	Z+6, r20	; 0x06
     49a:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
     49c:	82 85       	ldd	r24, Z+10	; 0x0a
     49e:	93 85       	ldd	r25, Z+11	; 0x0b
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	82 23       	and	r24, r18
     4a4:	93 23       	and	r25, r19
     4a6:	82 83       	std	Z+2, r24	; 0x02
     4a8:	93 83       	std	Z+3, r25	; 0x03
	
	uint8_t data = l1;//smooth(l1,0.35,data);
	//uint8_t data = l1*0.2;
	
	DACB.CH0DATA = data;
     4aa:	86 2f       	mov	r24, r22
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	80 93 38 03 	sts	0x0338, r24
     4b2:	90 93 39 03 	sts	0x0339, r25
	DACB.CH1DATA = data;
     4b6:	80 93 3a 03 	sts	0x033A, r24
     4ba:	90 93 3b 03 	sts	0x033B, r25
	//DACB.CH0DATAL = (data << 7);
	//DACB.CH0DATAH = (data >> 1);
}
     4be:	ff 91       	pop	r31
     4c0:	ef 91       	pop	r30
     4c2:	bf 91       	pop	r27
     4c4:	af 91       	pop	r26
     4c6:	9f 91       	pop	r25
     4c8:	8f 91       	pop	r24
     4ca:	6f 91       	pop	r22
     4cc:	5f 91       	pop	r21
     4ce:	4f 91       	pop	r20
     4d0:	3f 91       	pop	r19
     4d2:	2f 91       	pop	r18
     4d4:	0f 90       	pop	r0
     4d6:	0b be       	out	0x3b, r0	; 59
     4d8:	0f 90       	pop	r0
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	0f 90       	pop	r0
     4de:	1f 90       	pop	r1
     4e0:	18 95       	reti
	ct = fcb->ct; ri = fcb->ri;
	buff = fcb->buff + ri;

	switch (fcb->mode) {
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
     4e2:	41 15       	cp	r20, r1
     4e4:	51 05       	cpc	r21, r1
     4e6:	59 f3       	breq	.-42     	; 0x4be <__vector_14+0x9e>
		l1 = r2 = buff[0];
     4e8:	6c 91       	ld	r22, X
		ct -= 1; ri += 1;
     4ea:	41 50       	subi	r20, 0x01	; 1
     4ec:	51 09       	sbc	r21, r1
     4ee:	2f 5f       	subi	r18, 0xFF	; 255
     4f0:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
     4f2:	d2 cf       	rjmp	.-92     	; 0x498 <__vector_14+0x78>
		if (ct < 2) return;
		l1 = r2 = buff[1] + 128;
		ct -= 2; ri += 2;
		break;
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
     4f4:	44 30       	cpi	r20, 0x04	; 4
     4f6:	51 05       	cpc	r21, r1
     4f8:	10 f3       	brcs	.-60     	; 0x4be <__vector_14+0x9e>
		l2 = buff[0]; 
		l1 = buff[1];
     4fa:	11 96       	adiw	r26, 0x01	; 1
     4fc:	6c 91       	ld	r22, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
     4fe:	44 50       	subi	r20, 0x04	; 4
     500:	51 09       	sbc	r21, r1
		ri += 4;
     502:	2c 5f       	subi	r18, 0xFC	; 252
     504:	3f 4f       	sbci	r19, 0xFF	; 255
     506:	c8 cf       	rjmp	.-112    	; 0x498 <__vector_14+0x78>

00000508 <ht1632c_begin>:
void ht1632c_setPixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
}

void ht1632c_clrPixel(uint16_t i) {
	ledmatrix[i/8] &= ~_BV(i%8);
     508:	41 e0       	ldi	r20, 0x01	; 1
     50a:	40 93 81 06 	sts	0x0681, r20
     50e:	40 93 85 06 	sts	0x0685, r20
     512:	24 e0       	ldi	r18, 0x04	; 4
     514:	20 93 81 06 	sts	0x0681, r18
     518:	20 93 85 06 	sts	0x0685, r18
     51c:	38 e0       	ldi	r19, 0x08	; 8
     51e:	30 93 81 06 	sts	0x0681, r19
     522:	40 93 86 06 	sts	0x0686, r20
     526:	30 93 81 06 	sts	0x0681, r19
     52a:	20 93 86 06 	sts	0x0686, r18
     52e:	30 93 85 06 	sts	0x0685, r19
     532:	20 93 85 06 	sts	0x0685, r18
     536:	20 93 86 06 	sts	0x0686, r18
     53a:	30 93 86 06 	sts	0x0686, r19
     53e:	20 93 85 06 	sts	0x0685, r18
     542:	20 93 86 06 	sts	0x0686, r18
     546:	30 93 86 06 	sts	0x0686, r19
     54a:	20 93 85 06 	sts	0x0685, r18
     54e:	20 93 86 06 	sts	0x0686, r18
     552:	30 93 86 06 	sts	0x0686, r19
     556:	20 93 85 06 	sts	0x0685, r18
     55a:	20 93 86 06 	sts	0x0686, r18
     55e:	30 93 86 06 	sts	0x0686, r19
     562:	20 93 85 06 	sts	0x0685, r18
     566:	20 93 86 06 	sts	0x0686, r18
     56a:	30 93 86 06 	sts	0x0686, r19
     56e:	20 93 85 06 	sts	0x0685, r18
     572:	20 93 86 06 	sts	0x0686, r18
     576:	30 93 86 06 	sts	0x0686, r19
     57a:	20 93 85 06 	sts	0x0685, r18
     57e:	20 93 86 06 	sts	0x0686, r18
     582:	30 93 86 06 	sts	0x0686, r19
     586:	20 93 85 06 	sts	0x0685, r18
     58a:	20 93 86 06 	sts	0x0686, r18
     58e:	30 93 86 06 	sts	0x0686, r19
     592:	20 93 85 06 	sts	0x0685, r18
     596:	20 93 86 06 	sts	0x0686, r18
     59a:	30 93 86 06 	sts	0x0686, r19
     59e:	20 93 85 06 	sts	0x0685, r18
     5a2:	20 93 86 06 	sts	0x0686, r18
     5a6:	30 93 85 06 	sts	0x0685, r19
     5aa:	20 93 85 06 	sts	0x0685, r18
     5ae:	20 93 86 06 	sts	0x0686, r18
     5b2:	30 93 86 06 	sts	0x0686, r19
     5b6:	20 93 85 06 	sts	0x0685, r18
     5ba:	30 93 86 06 	sts	0x0686, r19
     5be:	40 93 85 06 	sts	0x0685, r20
     5c2:	40 93 86 06 	sts	0x0686, r20
     5c6:	30 93 81 06 	sts	0x0681, r19
     5ca:	20 93 86 06 	sts	0x0686, r18
     5ce:	30 93 85 06 	sts	0x0685, r19
     5d2:	20 93 85 06 	sts	0x0685, r18
     5d6:	20 93 86 06 	sts	0x0686, r18
     5da:	30 93 86 06 	sts	0x0686, r19
     5de:	20 93 85 06 	sts	0x0685, r18
     5e2:	20 93 86 06 	sts	0x0686, r18
     5e6:	30 93 86 06 	sts	0x0686, r19
     5ea:	20 93 85 06 	sts	0x0685, r18
     5ee:	20 93 86 06 	sts	0x0686, r18
     5f2:	30 93 86 06 	sts	0x0686, r19
     5f6:	20 93 85 06 	sts	0x0685, r18
     5fa:	20 93 86 06 	sts	0x0686, r18
     5fe:	30 93 86 06 	sts	0x0686, r19
     602:	20 93 85 06 	sts	0x0685, r18
     606:	20 93 86 06 	sts	0x0686, r18
     60a:	30 93 86 06 	sts	0x0686, r19
     60e:	20 93 85 06 	sts	0x0685, r18
     612:	20 93 86 06 	sts	0x0686, r18
     616:	30 93 86 06 	sts	0x0686, r19
     61a:	20 93 85 06 	sts	0x0685, r18
     61e:	20 93 86 06 	sts	0x0686, r18
     622:	30 93 86 06 	sts	0x0686, r19
     626:	20 93 85 06 	sts	0x0685, r18
     62a:	20 93 86 06 	sts	0x0686, r18
     62e:	30 93 86 06 	sts	0x0686, r19
     632:	20 93 85 06 	sts	0x0685, r18
     636:	20 93 86 06 	sts	0x0686, r18
     63a:	30 93 85 06 	sts	0x0685, r19
     63e:	20 93 85 06 	sts	0x0685, r18
     642:	20 93 86 06 	sts	0x0686, r18
     646:	30 93 85 06 	sts	0x0685, r19
     64a:	20 93 85 06 	sts	0x0685, r18
     64e:	20 93 86 06 	sts	0x0686, r18
     652:	30 93 86 06 	sts	0x0686, r19
     656:	20 93 85 06 	sts	0x0685, r18
     65a:	30 93 86 06 	sts	0x0686, r19
     65e:	40 93 85 06 	sts	0x0685, r20
     662:	40 93 86 06 	sts	0x0686, r20
     666:	30 93 81 06 	sts	0x0681, r19
     66a:	20 93 86 06 	sts	0x0686, r18
     66e:	30 93 85 06 	sts	0x0685, r19
     672:	20 93 85 06 	sts	0x0685, r18
     676:	20 93 86 06 	sts	0x0686, r18
     67a:	30 93 86 06 	sts	0x0686, r19
     67e:	20 93 85 06 	sts	0x0685, r18
     682:	20 93 86 06 	sts	0x0686, r18
     686:	30 93 86 06 	sts	0x0686, r19
     68a:	20 93 85 06 	sts	0x0685, r18
     68e:	20 93 86 06 	sts	0x0686, r18
     692:	30 93 86 06 	sts	0x0686, r19
     696:	20 93 85 06 	sts	0x0685, r18
     69a:	20 93 86 06 	sts	0x0686, r18
     69e:	30 93 86 06 	sts	0x0686, r19
     6a2:	20 93 85 06 	sts	0x0685, r18
     6a6:	20 93 86 06 	sts	0x0686, r18
     6aa:	30 93 86 06 	sts	0x0686, r19
     6ae:	20 93 85 06 	sts	0x0685, r18
     6b2:	20 93 86 06 	sts	0x0686, r18
     6b6:	30 93 86 06 	sts	0x0686, r19
     6ba:	20 93 85 06 	sts	0x0685, r18
     6be:	20 93 86 06 	sts	0x0686, r18
     6c2:	30 93 85 06 	sts	0x0685, r19
     6c6:	20 93 85 06 	sts	0x0685, r18
     6ca:	20 93 86 06 	sts	0x0686, r18
     6ce:	30 93 86 06 	sts	0x0686, r19
     6d2:	20 93 85 06 	sts	0x0685, r18
     6d6:	20 93 86 06 	sts	0x0686, r18
     6da:	30 93 86 06 	sts	0x0686, r19
     6de:	20 93 85 06 	sts	0x0685, r18
     6e2:	20 93 86 06 	sts	0x0686, r18
     6e6:	30 93 86 06 	sts	0x0686, r19
     6ea:	20 93 85 06 	sts	0x0685, r18
     6ee:	20 93 86 06 	sts	0x0686, r18
     6f2:	30 93 86 06 	sts	0x0686, r19
     6f6:	20 93 85 06 	sts	0x0685, r18
     6fa:	30 93 86 06 	sts	0x0686, r19
     6fe:	40 93 85 06 	sts	0x0685, r20
     702:	40 93 86 06 	sts	0x0686, r20
     706:	30 93 81 06 	sts	0x0681, r19
     70a:	20 93 86 06 	sts	0x0686, r18
     70e:	30 93 85 06 	sts	0x0685, r19
     712:	20 93 85 06 	sts	0x0685, r18
     716:	20 93 86 06 	sts	0x0686, r18
     71a:	30 93 86 06 	sts	0x0686, r19
     71e:	20 93 85 06 	sts	0x0685, r18
     722:	20 93 86 06 	sts	0x0686, r18
     726:	30 93 86 06 	sts	0x0686, r19
     72a:	20 93 85 06 	sts	0x0685, r18
     72e:	20 93 86 06 	sts	0x0686, r18
     732:	30 93 86 06 	sts	0x0686, r19
     736:	20 93 85 06 	sts	0x0685, r18
     73a:	20 93 86 06 	sts	0x0686, r18
     73e:	30 93 86 06 	sts	0x0686, r19
     742:	20 93 85 06 	sts	0x0685, r18
     746:	20 93 86 06 	sts	0x0686, r18
     74a:	30 93 86 06 	sts	0x0686, r19
     74e:	20 93 85 06 	sts	0x0685, r18
     752:	20 93 86 06 	sts	0x0686, r18
     756:	30 93 85 06 	sts	0x0685, r19
     75a:	20 93 85 06 	sts	0x0685, r18
     75e:	20 93 86 06 	sts	0x0686, r18
     762:	30 93 86 06 	sts	0x0686, r19
     766:	20 93 85 06 	sts	0x0685, r18
     76a:	20 93 86 06 	sts	0x0686, r18
     76e:	30 93 85 06 	sts	0x0685, r19
     772:	20 93 85 06 	sts	0x0685, r18
     776:	20 93 86 06 	sts	0x0686, r18
     77a:	30 93 86 06 	sts	0x0686, r19
     77e:	20 93 85 06 	sts	0x0685, r18
     782:	20 93 86 06 	sts	0x0686, r18
     786:	30 93 86 06 	sts	0x0686, r19
     78a:	20 93 85 06 	sts	0x0685, r18
     78e:	20 93 86 06 	sts	0x0686, r18
     792:	30 93 86 06 	sts	0x0686, r19
     796:	20 93 85 06 	sts	0x0685, r18
     79a:	30 93 86 06 	sts	0x0686, r19
     79e:	40 93 85 06 	sts	0x0685, r20
     7a2:	40 93 86 06 	sts	0x0686, r20
     7a6:	30 93 81 06 	sts	0x0681, r19
     7aa:	20 93 86 06 	sts	0x0686, r18
     7ae:	30 93 85 06 	sts	0x0685, r19
     7b2:	20 93 85 06 	sts	0x0685, r18
     7b6:	20 93 86 06 	sts	0x0686, r18
     7ba:	30 93 86 06 	sts	0x0686, r19
     7be:	20 93 85 06 	sts	0x0685, r18
     7c2:	20 93 86 06 	sts	0x0686, r18
     7c6:	30 93 86 06 	sts	0x0686, r19
     7ca:	20 93 85 06 	sts	0x0685, r18
     7ce:	20 93 86 06 	sts	0x0686, r18
     7d2:	30 93 86 06 	sts	0x0686, r19
     7d6:	20 93 85 06 	sts	0x0685, r18
     7da:	20 93 86 06 	sts	0x0686, r18
     7de:	30 93 86 06 	sts	0x0686, r19
     7e2:	20 93 85 06 	sts	0x0685, r18
     7e6:	20 93 86 06 	sts	0x0686, r18
     7ea:	30 93 86 06 	sts	0x0686, r19
     7ee:	20 93 85 06 	sts	0x0685, r18
     7f2:	20 93 86 06 	sts	0x0686, r18
     7f6:	30 93 85 06 	sts	0x0685, r19
     7fa:	20 93 85 06 	sts	0x0685, r18
     7fe:	20 93 86 06 	sts	0x0686, r18
     802:	30 93 85 06 	sts	0x0685, r19
     806:	20 93 85 06 	sts	0x0685, r18
     80a:	20 93 86 06 	sts	0x0686, r18
     80e:	30 93 86 06 	sts	0x0686, r19
     812:	20 93 85 06 	sts	0x0685, r18
     816:	20 93 86 06 	sts	0x0686, r18
     81a:	30 93 86 06 	sts	0x0686, r19
     81e:	20 93 85 06 	sts	0x0685, r18
     822:	20 93 86 06 	sts	0x0686, r18
     826:	30 93 86 06 	sts	0x0686, r19
     82a:	20 93 85 06 	sts	0x0685, r18
     82e:	20 93 86 06 	sts	0x0686, r18
     832:	30 93 86 06 	sts	0x0686, r19
     836:	20 93 85 06 	sts	0x0685, r18
     83a:	30 93 86 06 	sts	0x0686, r19
     83e:	40 93 85 06 	sts	0x0685, r20
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	94 60       	ori	r25, 0x04	; 4
     846:	88 0f       	add	r24, r24
     848:	99 1f       	adc	r25, r25
     84a:	40 93 86 06 	sts	0x0686, r20
     84e:	30 93 81 06 	sts	0x0681, r19
     852:	20 93 86 06 	sts	0x0686, r18
     856:	30 93 85 06 	sts	0x0685, r19
     85a:	20 93 85 06 	sts	0x0685, r18
     85e:	20 93 86 06 	sts	0x0686, r18
     862:	30 93 86 06 	sts	0x0686, r19
     866:	20 93 85 06 	sts	0x0685, r18
     86a:	20 93 86 06 	sts	0x0686, r18
     86e:	30 93 86 06 	sts	0x0686, r19
     872:	20 93 85 06 	sts	0x0685, r18
     876:	20 93 86 06 	sts	0x0686, r18
     87a:	90 fd       	sbrc	r25, 0
     87c:	e7 c0       	rjmp	.+462    	; 0xa4c <ht1632c_begin+0x544>
     87e:	30 93 86 06 	sts	0x0686, r19
     882:	24 e0       	ldi	r18, 0x04	; 4
     884:	20 93 85 06 	sts	0x0685, r18
     888:	20 93 86 06 	sts	0x0686, r18
     88c:	28 e0       	ldi	r18, 0x08	; 8
     88e:	87 fd       	sbrc	r24, 7
     890:	9e c0       	rjmp	.+316    	; 0x9ce <ht1632c_begin+0x4c6>
     892:	20 93 86 06 	sts	0x0686, r18
     896:	24 e0       	ldi	r18, 0x04	; 4
     898:	20 93 85 06 	sts	0x0685, r18
     89c:	20 93 86 06 	sts	0x0686, r18
     8a0:	28 e0       	ldi	r18, 0x08	; 8
     8a2:	86 fd       	sbrc	r24, 6
     8a4:	9e c0       	rjmp	.+316    	; 0x9e2 <ht1632c_begin+0x4da>
     8a6:	20 93 86 06 	sts	0x0686, r18
     8aa:	24 e0       	ldi	r18, 0x04	; 4
     8ac:	20 93 85 06 	sts	0x0685, r18
     8b0:	20 93 86 06 	sts	0x0686, r18
     8b4:	28 e0       	ldi	r18, 0x08	; 8
     8b6:	85 fd       	sbrc	r24, 5
     8b8:	9e c0       	rjmp	.+316    	; 0x9f6 <ht1632c_begin+0x4ee>
     8ba:	20 93 86 06 	sts	0x0686, r18
     8be:	24 e0       	ldi	r18, 0x04	; 4
     8c0:	20 93 85 06 	sts	0x0685, r18
     8c4:	20 93 86 06 	sts	0x0686, r18
     8c8:	28 e0       	ldi	r18, 0x08	; 8
     8ca:	84 fd       	sbrc	r24, 4
     8cc:	9e c0       	rjmp	.+316    	; 0xa0a <ht1632c_begin+0x502>
     8ce:	20 93 86 06 	sts	0x0686, r18
     8d2:	24 e0       	ldi	r18, 0x04	; 4
     8d4:	20 93 85 06 	sts	0x0685, r18
     8d8:	20 93 86 06 	sts	0x0686, r18
     8dc:	28 e0       	ldi	r18, 0x08	; 8
     8de:	83 fd       	sbrc	r24, 3
     8e0:	9e c0       	rjmp	.+316    	; 0xa1e <ht1632c_begin+0x516>
     8e2:	20 93 86 06 	sts	0x0686, r18
     8e6:	24 e0       	ldi	r18, 0x04	; 4
     8e8:	20 93 85 06 	sts	0x0685, r18
     8ec:	20 93 86 06 	sts	0x0686, r18
     8f0:	28 e0       	ldi	r18, 0x08	; 8
     8f2:	82 fd       	sbrc	r24, 2
     8f4:	9e c0       	rjmp	.+316    	; 0xa32 <ht1632c_begin+0x52a>
     8f6:	20 93 86 06 	sts	0x0686, r18
     8fa:	94 e0       	ldi	r25, 0x04	; 4
     8fc:	90 93 85 06 	sts	0x0685, r25
     900:	90 93 86 06 	sts	0x0686, r25
     904:	81 fd       	sbrc	r24, 1
     906:	9e c0       	rjmp	.+316    	; 0xa44 <ht1632c_begin+0x53c>
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	80 93 86 06 	sts	0x0686, r24
     90e:	84 e0       	ldi	r24, 0x04	; 4
     910:	80 93 85 06 	sts	0x0685, r24
     914:	80 93 86 06 	sts	0x0686, r24
     918:	98 e0       	ldi	r25, 0x08	; 8
     91a:	90 93 86 06 	sts	0x0686, r25
     91e:	80 93 85 06 	sts	0x0685, r24
     922:	90 93 86 06 	sts	0x0686, r25
     926:	21 e0       	ldi	r18, 0x01	; 1
     928:	20 93 85 06 	sts	0x0685, r18
     92c:	20 93 86 06 	sts	0x0686, r18
     930:	90 93 81 06 	sts	0x0681, r25
     934:	80 93 86 06 	sts	0x0686, r24
     938:	90 93 85 06 	sts	0x0685, r25
     93c:	80 93 85 06 	sts	0x0685, r24
     940:	80 93 86 06 	sts	0x0686, r24
     944:	90 93 86 06 	sts	0x0686, r25
     948:	80 93 85 06 	sts	0x0685, r24
     94c:	80 93 86 06 	sts	0x0686, r24
     950:	90 93 86 06 	sts	0x0686, r25
     954:	80 93 85 06 	sts	0x0685, r24
     958:	80 93 86 06 	sts	0x0686, r24
     95c:	90 93 85 06 	sts	0x0685, r25
     960:	80 93 85 06 	sts	0x0685, r24
     964:	80 93 86 06 	sts	0x0686, r24
     968:	90 93 86 06 	sts	0x0686, r25
     96c:	80 93 85 06 	sts	0x0685, r24
     970:	80 93 86 06 	sts	0x0686, r24
     974:	90 93 85 06 	sts	0x0685, r25
     978:	80 93 85 06 	sts	0x0685, r24
     97c:	80 93 86 06 	sts	0x0686, r24
     980:	90 93 86 06 	sts	0x0686, r25
     984:	80 93 85 06 	sts	0x0685, r24
     988:	80 93 86 06 	sts	0x0686, r24
     98c:	90 93 86 06 	sts	0x0686, r25
     990:	80 93 85 06 	sts	0x0685, r24
     994:	80 93 86 06 	sts	0x0686, r24
     998:	90 93 86 06 	sts	0x0686, r25
     99c:	80 93 85 06 	sts	0x0685, r24
     9a0:	80 93 86 06 	sts	0x0686, r24
     9a4:	90 93 86 06 	sts	0x0686, r25
     9a8:	80 93 85 06 	sts	0x0685, r24
     9ac:	80 93 86 06 	sts	0x0686, r24
     9b0:	90 93 85 06 	sts	0x0685, r25
     9b4:	80 93 85 06 	sts	0x0685, r24
     9b8:	80 93 86 06 	sts	0x0686, r24
     9bc:	90 93 86 06 	sts	0x0686, r25
     9c0:	80 93 85 06 	sts	0x0685, r24
     9c4:	90 93 86 06 	sts	0x0686, r25
     9c8:	20 93 85 06 	sts	0x0685, r18
     9cc:	08 95       	ret
     9ce:	20 93 85 06 	sts	0x0685, r18
     9d2:	24 e0       	ldi	r18, 0x04	; 4
     9d4:	20 93 85 06 	sts	0x0685, r18
     9d8:	20 93 86 06 	sts	0x0686, r18
     9dc:	28 e0       	ldi	r18, 0x08	; 8
     9de:	86 ff       	sbrs	r24, 6
     9e0:	62 cf       	rjmp	.-316    	; 0x8a6 <ht1632c_begin+0x39e>
     9e2:	20 93 85 06 	sts	0x0685, r18
     9e6:	24 e0       	ldi	r18, 0x04	; 4
     9e8:	20 93 85 06 	sts	0x0685, r18
     9ec:	20 93 86 06 	sts	0x0686, r18
     9f0:	28 e0       	ldi	r18, 0x08	; 8
     9f2:	85 ff       	sbrs	r24, 5
     9f4:	62 cf       	rjmp	.-316    	; 0x8ba <ht1632c_begin+0x3b2>
     9f6:	20 93 85 06 	sts	0x0685, r18
     9fa:	24 e0       	ldi	r18, 0x04	; 4
     9fc:	20 93 85 06 	sts	0x0685, r18
     a00:	20 93 86 06 	sts	0x0686, r18
     a04:	28 e0       	ldi	r18, 0x08	; 8
     a06:	84 ff       	sbrs	r24, 4
     a08:	62 cf       	rjmp	.-316    	; 0x8ce <ht1632c_begin+0x3c6>
     a0a:	20 93 85 06 	sts	0x0685, r18
     a0e:	24 e0       	ldi	r18, 0x04	; 4
     a10:	20 93 85 06 	sts	0x0685, r18
     a14:	20 93 86 06 	sts	0x0686, r18
     a18:	28 e0       	ldi	r18, 0x08	; 8
     a1a:	83 ff       	sbrs	r24, 3
     a1c:	62 cf       	rjmp	.-316    	; 0x8e2 <ht1632c_begin+0x3da>
     a1e:	20 93 85 06 	sts	0x0685, r18
     a22:	24 e0       	ldi	r18, 0x04	; 4
     a24:	20 93 85 06 	sts	0x0685, r18
     a28:	20 93 86 06 	sts	0x0686, r18
     a2c:	28 e0       	ldi	r18, 0x08	; 8
     a2e:	82 ff       	sbrs	r24, 2
     a30:	62 cf       	rjmp	.-316    	; 0x8f6 <ht1632c_begin+0x3ee>
     a32:	20 93 85 06 	sts	0x0685, r18
     a36:	94 e0       	ldi	r25, 0x04	; 4
     a38:	90 93 85 06 	sts	0x0685, r25
     a3c:	90 93 86 06 	sts	0x0686, r25
     a40:	81 ff       	sbrs	r24, 1
     a42:	62 cf       	rjmp	.-316    	; 0x908 <ht1632c_begin+0x400>
     a44:	88 e0       	ldi	r24, 0x08	; 8
     a46:	80 93 85 06 	sts	0x0685, r24
     a4a:	61 cf       	rjmp	.-318    	; 0x90e <ht1632c_begin+0x406>
     a4c:	30 93 85 06 	sts	0x0685, r19
     a50:	24 e0       	ldi	r18, 0x04	; 4
     a52:	20 93 85 06 	sts	0x0685, r18
     a56:	20 93 86 06 	sts	0x0686, r18
     a5a:	28 e0       	ldi	r18, 0x08	; 8
     a5c:	87 fd       	sbrc	r24, 7
     a5e:	b7 cf       	rjmp	.-146    	; 0x9ce <ht1632c_begin+0x4c6>
     a60:	18 cf       	rjmp	.-464    	; 0x892 <ht1632c_begin+0x38a>

00000a62 <ht1632c_setBrightness>:
     a62:	80 31       	cpi	r24, 0x10	; 16
     a64:	08 f0       	brcs	.+2      	; 0xa68 <ht1632c_setBrightness+0x6>
     a66:	8f e0       	ldi	r24, 0x0F	; 15
     a68:	80 6a       	ori	r24, 0xA0	; 160
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	94 60       	ori	r25, 0x04	; 4
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	21 e0       	ldi	r18, 0x01	; 1
     a74:	20 93 86 06 	sts	0x0686, r18
     a78:	38 e0       	ldi	r19, 0x08	; 8
     a7a:	30 93 81 06 	sts	0x0681, r19
     a7e:	24 e0       	ldi	r18, 0x04	; 4
     a80:	20 93 86 06 	sts	0x0686, r18
     a84:	30 93 85 06 	sts	0x0685, r19
     a88:	20 93 85 06 	sts	0x0685, r18
     a8c:	20 93 86 06 	sts	0x0686, r18
     a90:	30 93 86 06 	sts	0x0686, r19
     a94:	20 93 85 06 	sts	0x0685, r18
     a98:	20 93 86 06 	sts	0x0686, r18
     a9c:	30 93 86 06 	sts	0x0686, r19
     aa0:	20 93 85 06 	sts	0x0685, r18
     aa4:	20 93 86 06 	sts	0x0686, r18
     aa8:	30 93 85 06 	sts	0x0685, r19
     aac:	20 93 85 06 	sts	0x0685, r18
     ab0:	20 93 86 06 	sts	0x0686, r18
     ab4:	30 93 86 06 	sts	0x0686, r19
     ab8:	20 93 85 06 	sts	0x0685, r18
     abc:	20 93 86 06 	sts	0x0686, r18
     ac0:	30 93 85 06 	sts	0x0685, r19
     ac4:	20 93 85 06 	sts	0x0685, r18
     ac8:	20 93 86 06 	sts	0x0686, r18
     acc:	30 93 86 06 	sts	0x0686, r19
     ad0:	20 93 85 06 	sts	0x0685, r18
     ad4:	20 93 86 06 	sts	0x0686, r18
     ad8:	84 fd       	sbrc	r24, 4
     ada:	47 c0       	rjmp	.+142    	; 0xb6a <ht1632c_setBrightness+0x108>
     adc:	30 93 86 06 	sts	0x0686, r19
     ae0:	24 e0       	ldi	r18, 0x04	; 4
     ae2:	20 93 85 06 	sts	0x0685, r18
     ae6:	20 93 86 06 	sts	0x0686, r18
     aea:	28 e0       	ldi	r18, 0x08	; 8
     aec:	83 fd       	sbrc	r24, 3
     aee:	26 c0       	rjmp	.+76     	; 0xb3c <ht1632c_setBrightness+0xda>
     af0:	20 93 86 06 	sts	0x0686, r18
     af4:	24 e0       	ldi	r18, 0x04	; 4
     af6:	20 93 85 06 	sts	0x0685, r18
     afa:	20 93 86 06 	sts	0x0686, r18
     afe:	28 e0       	ldi	r18, 0x08	; 8
     b00:	82 fd       	sbrc	r24, 2
     b02:	26 c0       	rjmp	.+76     	; 0xb50 <ht1632c_setBrightness+0xee>
     b04:	20 93 86 06 	sts	0x0686, r18
     b08:	94 e0       	ldi	r25, 0x04	; 4
     b0a:	90 93 85 06 	sts	0x0685, r25
     b0e:	90 93 86 06 	sts	0x0686, r25
     b12:	81 fd       	sbrc	r24, 1
     b14:	26 c0       	rjmp	.+76     	; 0xb62 <ht1632c_setBrightness+0x100>
     b16:	88 e0       	ldi	r24, 0x08	; 8
     b18:	80 93 86 06 	sts	0x0686, r24
     b1c:	84 e0       	ldi	r24, 0x04	; 4
     b1e:	80 93 85 06 	sts	0x0685, r24
     b22:	80 93 86 06 	sts	0x0686, r24
     b26:	98 e0       	ldi	r25, 0x08	; 8
     b28:	90 93 86 06 	sts	0x0686, r25
     b2c:	80 93 85 06 	sts	0x0685, r24
     b30:	90 93 86 06 	sts	0x0686, r25
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	80 93 85 06 	sts	0x0685, r24
     b3a:	08 95       	ret
     b3c:	20 93 85 06 	sts	0x0685, r18
     b40:	24 e0       	ldi	r18, 0x04	; 4
     b42:	20 93 85 06 	sts	0x0685, r18
     b46:	20 93 86 06 	sts	0x0686, r18
     b4a:	28 e0       	ldi	r18, 0x08	; 8
     b4c:	82 ff       	sbrs	r24, 2
     b4e:	da cf       	rjmp	.-76     	; 0xb04 <ht1632c_setBrightness+0xa2>
     b50:	20 93 85 06 	sts	0x0685, r18
     b54:	94 e0       	ldi	r25, 0x04	; 4
     b56:	90 93 85 06 	sts	0x0685, r25
     b5a:	90 93 86 06 	sts	0x0686, r25
     b5e:	81 ff       	sbrs	r24, 1
     b60:	da cf       	rjmp	.-76     	; 0xb16 <ht1632c_setBrightness+0xb4>
     b62:	88 e0       	ldi	r24, 0x08	; 8
     b64:	80 93 85 06 	sts	0x0685, r24
     b68:	d9 cf       	rjmp	.-78     	; 0xb1c <ht1632c_setBrightness+0xba>
     b6a:	30 93 85 06 	sts	0x0685, r19
     b6e:	24 e0       	ldi	r18, 0x04	; 4
     b70:	20 93 85 06 	sts	0x0685, r18
     b74:	20 93 86 06 	sts	0x0686, r18
     b78:	28 e0       	ldi	r18, 0x08	; 8
     b7a:	83 fd       	sbrc	r24, 3
     b7c:	df cf       	rjmp	.-66     	; 0xb3c <ht1632c_setBrightness+0xda>
     b7e:	b8 cf       	rjmp	.-144    	; 0xaf0 <ht1632c_setBrightness+0x8e>

00000b80 <ht1632c_writeScreen>:
}

void ht1632c_writeScreen() {

	HT1632_PORT.OUTCLR = _cs;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	80 93 86 06 	sts	0x0686, r24
		ledmatrix[i] = 0;
	}
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
     b86:	98 e0       	ldi	r25, 0x08	; 8
     b88:	90 93 81 06 	sts	0x0681, r25
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     b8c:	84 e0       	ldi	r24, 0x04	; 4
     b8e:	80 93 86 06 	sts	0x0686, r24
		if (d & _BV(i-1)) {
			HT1632_PORT.OUTSET = _data;
     b92:	90 93 85 06 	sts	0x0685, r25
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     b96:	80 93 85 06 	sts	0x0685, r24
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     b9a:	80 93 86 06 	sts	0x0686, r24
		if (d & _BV(i-1)) {
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     b9e:	90 93 86 06 	sts	0x0686, r25
		}
		HT1632_PORT.OUTSET = _wr;
     ba2:	80 93 85 06 	sts	0x0685, r24
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     ba6:	80 93 86 06 	sts	0x0686, r24
		if (d & _BV(i-1)) {
			HT1632_PORT.OUTSET = _data;
     baa:	90 93 85 06 	sts	0x0685, r25
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     bae:	80 93 85 06 	sts	0x0685, r24
	}
	HT1632_PORT.OUTCLR = _data;
     bb2:	90 93 86 06 	sts	0x0686, r25
		ledmatrix[i] = 0;
	}
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
     bb6:	90 93 81 06 	sts	0x0681, r25
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     bba:	80 93 86 06 	sts	0x0686, r24
		if (d & _BV(i-1)) {
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     bbe:	90 93 86 06 	sts	0x0686, r25
		}
		HT1632_PORT.OUTSET = _wr;
     bc2:	80 93 85 06 	sts	0x0685, r24
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     bc6:	80 93 86 06 	sts	0x0686, r24
		if (d & _BV(i-1)) {
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     bca:	90 93 86 06 	sts	0x0686, r25
		}
		HT1632_PORT.OUTSET = _wr;
     bce:	80 93 85 06 	sts	0x0685, r24
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     bd2:	80 93 86 06 	sts	0x0686, r24
		if (d & _BV(i-1)) {
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     bd6:	90 93 86 06 	sts	0x0686, r25
		}
		HT1632_PORT.OUTSET = _wr;
     bda:	80 93 85 06 	sts	0x0685, r24
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     bde:	80 93 86 06 	sts	0x0686, r24
		if (d & _BV(i-1)) {
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     be2:	90 93 86 06 	sts	0x0686, r25
		}
		HT1632_PORT.OUTSET = _wr;
     be6:	80 93 85 06 	sts	0x0685, r24
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     bea:	80 93 86 06 	sts	0x0686, r24
		if (d & _BV(i-1)) {
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     bee:	90 93 86 06 	sts	0x0686, r25
		}
		HT1632_PORT.OUTSET = _wr;
     bf2:	80 93 85 06 	sts	0x0685, r24
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     bf6:	80 93 86 06 	sts	0x0686, r24
		if (d & _BV(i-1)) {
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     bfa:	90 93 86 06 	sts	0x0686, r25
		}
		HT1632_PORT.OUTSET = _wr;
     bfe:	80 93 85 06 	sts	0x0685, r24
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     c02:	80 93 86 06 	sts	0x0686, r24
		if (d & _BV(i-1)) {
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     c06:	90 93 86 06 	sts	0x0686, r25
		}
		HT1632_PORT.OUTSET = _wr;
     c0a:	80 93 85 06 	sts	0x0685, r24
	}
	HT1632_PORT.OUTCLR = _data;
     c0e:	90 93 86 06 	sts	0x0686, r25
     c12:	ea e9       	ldi	r30, 0x9A	; 154
     c14:	f5 e2       	ldi	r31, 0x25	; 37
		ledmatrix[i] = 0;
	}
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
     c16:	38 e0       	ldi	r19, 0x08	; 8
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     c18:	24 e0       	ldi	r18, 0x04	; 4
     c1a:	7c c0       	rjmp	.+248    	; 0xd14 <ht1632c_writeScreen+0x194>
		if (d & _BV(i-1)) {
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     c1c:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     c20:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     c24:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     c28:	95 fd       	sbrc	r25, 5
     c2a:	92 c0       	rjmp	.+292    	; 0xd50 <ht1632c_writeScreen+0x1d0>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     c2c:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     c30:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     c34:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     c38:	94 fd       	sbrc	r25, 4
     c3a:	92 c0       	rjmp	.+292    	; 0xd60 <ht1632c_writeScreen+0x1e0>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     c3c:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     c40:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     c44:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     c48:	93 fd       	sbrc	r25, 3
     c4a:	92 c0       	rjmp	.+292    	; 0xd70 <ht1632c_writeScreen+0x1f0>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     c4c:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     c50:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     c54:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     c58:	92 fd       	sbrc	r25, 2
     c5a:	92 c0       	rjmp	.+292    	; 0xd80 <ht1632c_writeScreen+0x200>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     c5c:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     c60:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     c64:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     c68:	91 fd       	sbrc	r25, 1
     c6a:	92 c0       	rjmp	.+292    	; 0xd90 <ht1632c_writeScreen+0x210>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     c6c:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     c70:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     c74:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     c78:	90 fd       	sbrc	r25, 0
     c7a:	92 c0       	rjmp	.+292    	; 0xda0 <ht1632c_writeScreen+0x220>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     c7c:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     c80:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     c84:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     c88:	87 fd       	sbrc	r24, 7
     c8a:	92 c0       	rjmp	.+292    	; 0xdb0 <ht1632c_writeScreen+0x230>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     c8c:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     c90:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     c94:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     c98:	86 fd       	sbrc	r24, 6
     c9a:	92 c0       	rjmp	.+292    	; 0xdc0 <ht1632c_writeScreen+0x240>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     c9c:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     ca0:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     ca4:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     ca8:	85 fd       	sbrc	r24, 5
     caa:	92 c0       	rjmp	.+292    	; 0xdd0 <ht1632c_writeScreen+0x250>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     cac:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     cb0:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     cb4:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     cb8:	84 fd       	sbrc	r24, 4
     cba:	92 c0       	rjmp	.+292    	; 0xde0 <ht1632c_writeScreen+0x260>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     cbc:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     cc0:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     cc4:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     cc8:	83 fd       	sbrc	r24, 3
     cca:	92 c0       	rjmp	.+292    	; 0xdf0 <ht1632c_writeScreen+0x270>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     ccc:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     cd0:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     cd4:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     cd8:	82 fd       	sbrc	r24, 2
     cda:	92 c0       	rjmp	.+292    	; 0xe00 <ht1632c_writeScreen+0x280>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     cdc:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     ce0:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     ce4:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     ce8:	81 fd       	sbrc	r24, 1
     cea:	92 c0       	rjmp	.+292    	; 0xe10 <ht1632c_writeScreen+0x290>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     cec:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     cf0:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     cf4:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     cf8:	80 fd       	sbrc	r24, 0
     cfa:	92 c0       	rjmp	.+292    	; 0xe20 <ht1632c_writeScreen+0x2a0>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     cfc:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     d00:	20 93 85 06 	sts	0x0685, r18
	}
	HT1632_PORT.OUTCLR = _data;
     d04:	30 93 86 06 	sts	0x0686, r19
     d08:	32 96       	adiw	r30, 0x02	; 2

	ht1632c_writedata(HT1632_WRITE, 3);
	// send with address 0
	ht1632c_writedata(0, 7);

	for (uint16_t i=0; i<(WIDTH*HEIGHT/8); i+=2) {
     d0a:	85 e2       	ldi	r24, 0x25	; 37
     d0c:	ea 3b       	cpi	r30, 0xBA	; 186
     d0e:	f8 07       	cpc	r31, r24
     d10:	09 f4       	brne	.+2      	; 0xd14 <ht1632c_writeScreen+0x194>
     d12:	8c c0       	rjmp	.+280    	; 0xe2c <ht1632c_writeScreen+0x2ac>
     d14:	df 01       	movw	r26, r30
     d16:	11 97       	sbiw	r26, 0x01	; 1
		uint16_t d = ledmatrix[i];
     d18:	8c 91       	ld	r24, X
     d1a:	90 e0       	ldi	r25, 0x00	; 0
		d <<= 8;
     d1c:	98 2f       	mov	r25, r24
     d1e:	88 27       	eor	r24, r24
		d |= ledmatrix[i+1];
     d20:	40 81       	ld	r20, Z
     d22:	84 2b       	or	r24, r20
		ledmatrix[i] = 0;
	}
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
     d24:	30 93 81 06 	sts	0x0681, r19
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     d28:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     d2c:	97 fd       	sbrc	r25, 7
     d2e:	7b c0       	rjmp	.+246    	; 0xe26 <ht1632c_writeScreen+0x2a6>
			HT1632_PORT.OUTSET = _data;
			} else {
			HT1632_PORT.OUTCLR = _data;
     d30:	30 93 86 06 	sts	0x0686, r19
		}
		HT1632_PORT.OUTSET = _wr;
     d34:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     d38:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     d3c:	96 ff       	sbrs	r25, 6
     d3e:	6e cf       	rjmp	.-292    	; 0xc1c <ht1632c_writeScreen+0x9c>
			HT1632_PORT.OUTSET = _data;
     d40:	30 93 85 06 	sts	0x0685, r19
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     d44:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     d48:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     d4c:	95 ff       	sbrs	r25, 5
     d4e:	6e cf       	rjmp	.-292    	; 0xc2c <ht1632c_writeScreen+0xac>
			HT1632_PORT.OUTSET = _data;
     d50:	30 93 85 06 	sts	0x0685, r19
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     d54:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     d58:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     d5c:	94 ff       	sbrs	r25, 4
     d5e:	6e cf       	rjmp	.-292    	; 0xc3c <ht1632c_writeScreen+0xbc>
			HT1632_PORT.OUTSET = _data;
     d60:	30 93 85 06 	sts	0x0685, r19
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     d64:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     d68:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     d6c:	93 ff       	sbrs	r25, 3
     d6e:	6e cf       	rjmp	.-292    	; 0xc4c <ht1632c_writeScreen+0xcc>
			HT1632_PORT.OUTSET = _data;
     d70:	30 93 85 06 	sts	0x0685, r19
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     d74:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     d78:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     d7c:	92 ff       	sbrs	r25, 2
     d7e:	6e cf       	rjmp	.-292    	; 0xc5c <ht1632c_writeScreen+0xdc>
			HT1632_PORT.OUTSET = _data;
     d80:	30 93 85 06 	sts	0x0685, r19
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     d84:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     d88:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     d8c:	91 ff       	sbrs	r25, 1
     d8e:	6e cf       	rjmp	.-292    	; 0xc6c <ht1632c_writeScreen+0xec>
			HT1632_PORT.OUTSET = _data;
     d90:	30 93 85 06 	sts	0x0685, r19
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     d94:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     d98:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     d9c:	90 ff       	sbrs	r25, 0
     d9e:	6e cf       	rjmp	.-292    	; 0xc7c <ht1632c_writeScreen+0xfc>
			HT1632_PORT.OUTSET = _data;
     da0:	30 93 85 06 	sts	0x0685, r19
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     da4:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     da8:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     dac:	87 ff       	sbrs	r24, 7
     dae:	6e cf       	rjmp	.-292    	; 0xc8c <ht1632c_writeScreen+0x10c>
			HT1632_PORT.OUTSET = _data;
     db0:	30 93 85 06 	sts	0x0685, r19
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     db4:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     db8:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     dbc:	86 ff       	sbrs	r24, 6
     dbe:	6e cf       	rjmp	.-292    	; 0xc9c <ht1632c_writeScreen+0x11c>
			HT1632_PORT.OUTSET = _data;
     dc0:	30 93 85 06 	sts	0x0685, r19
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     dc4:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     dc8:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     dcc:	85 ff       	sbrs	r24, 5
     dce:	6e cf       	rjmp	.-292    	; 0xcac <ht1632c_writeScreen+0x12c>
			HT1632_PORT.OUTSET = _data;
     dd0:	30 93 85 06 	sts	0x0685, r19
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     dd4:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     dd8:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     ddc:	84 ff       	sbrs	r24, 4
     dde:	6e cf       	rjmp	.-292    	; 0xcbc <ht1632c_writeScreen+0x13c>
			HT1632_PORT.OUTSET = _data;
     de0:	30 93 85 06 	sts	0x0685, r19
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     de4:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     de8:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     dec:	83 ff       	sbrs	r24, 3
     dee:	6e cf       	rjmp	.-292    	; 0xccc <ht1632c_writeScreen+0x14c>
			HT1632_PORT.OUTSET = _data;
     df0:	30 93 85 06 	sts	0x0685, r19
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     df4:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     df8:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     dfc:	82 ff       	sbrs	r24, 2
     dfe:	6e cf       	rjmp	.-292    	; 0xcdc <ht1632c_writeScreen+0x15c>
			HT1632_PORT.OUTSET = _data;
     e00:	30 93 85 06 	sts	0x0685, r19
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     e04:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     e08:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     e0c:	81 ff       	sbrs	r24, 1
     e0e:	6e cf       	rjmp	.-292    	; 0xcec <ht1632c_writeScreen+0x16c>
			HT1632_PORT.OUTSET = _data;
     e10:	30 93 85 06 	sts	0x0685, r19
			} else {
			HT1632_PORT.OUTCLR = _data;
		}
		HT1632_PORT.OUTSET = _wr;
     e14:	20 93 85 06 	sts	0x0685, r18
}

void ht1632c_writedata(uint16_t d, uint8_t bits) {
	HT1632_PORT.DIRSET = _data;
	for (uint8_t i=bits; i > 0; i--) {
		HT1632_PORT.OUTCLR = _wr;
     e18:	20 93 86 06 	sts	0x0686, r18
		if (d & _BV(i-1)) {
     e1c:	80 ff       	sbrs	r24, 0
     e1e:	6e cf       	rjmp	.-292    	; 0xcfc <ht1632c_writeScreen+0x17c>
			HT1632_PORT.OUTSET = _data;
     e20:	30 93 85 06 	sts	0x0685, r19
     e24:	6d cf       	rjmp	.-294    	; 0xd00 <ht1632c_writeScreen+0x180>
     e26:	30 93 85 06 	sts	0x0685, r19
     e2a:	84 cf       	rjmp	.-248    	; 0xd34 <ht1632c_writeScreen+0x1b4>
		d <<= 8;
		d |= ledmatrix[i+1];

		ht1632c_writedata(d, 16);
	}
	HT1632_PORT.OUTSET = _cs;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	80 93 85 06 	sts	0x0685, r24
     e32:	08 95       	ret

00000e34 <ht1632c_clearScreen>:
}


void ht1632c_clearScreen() {
     e34:	80 e2       	ldi	r24, 0x20	; 32
     e36:	e9 e9       	ldi	r30, 0x99	; 153
     e38:	f5 e2       	ldi	r31, 0x25	; 37
     e3a:	df 01       	movw	r26, r30
     e3c:	1d 92       	st	X+, r1
     e3e:	8a 95       	dec	r24
     e40:	e9 f7       	brne	.-6      	; 0xe3c <ht1632c_clearScreen+0x8>
	for (uint8_t i=0; i<(WIDTH*HEIGHT/8); i++) {
		ledmatrix[i] = 0;
	}
	ht1632c_writeScreen();
     e42:	9e ce       	rjmp	.-708    	; 0xb80 <ht1632c_writeScreen>

00000e44 <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
     e44:	fc 01       	movw	r30, r24
	parser->pos = 0;
     e46:	10 82       	st	Z, r1
     e48:	11 82       	std	Z+1, r1	; 0x01
	parser->toknext = 0;
     e4a:	12 82       	std	Z+2, r1	; 0x02
     e4c:	13 82       	std	Z+3, r1	; 0x03
	parser->toksuper = -1;
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	9f ef       	ldi	r25, 0xFF	; 255
     e52:	84 83       	std	Z+4, r24	; 0x04
     e54:	95 83       	std	Z+5, r25	; 0x05
     e56:	08 95       	ret

00000e58 <main>:
	TCC1.PERL = 0x80;
	TCC1.PERH = 0x0C;
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
}

int main(void) {
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	26 97       	sbiw	r28, 0x06	; 6
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	de bf       	out	0x3e, r29	; 62
	jsmnerr_t r;
	char rx_buf[200];
	
	esp8266_status_t status;
	
	clock_setup_32_mhz();
     e66:	e9 d9       	rcall	.-3118   	; 0x23a <clock_setup_32_mhz>
	ht1632c_begin(HT1632_COMMON_16NMOS);
     e68:	84 e2       	ldi	r24, 0x24	; 36
     e6a:	4e db       	rcall	.-2404   	; 0x508 <ht1632c_begin>
	ht1632c_setBrightness(0);
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	f9 dd       	rcall	.-1038   	; 0xa62 <ht1632c_setBrightness>
	ht1632c_clearScreen();
     e70:	e1 df       	rcall	.-62     	; 0xe34 <ht1632c_clearScreen>
	//ht1632c_fillScreen();
	//adc_setup();
	uart_setup();
     e72:	98 d0       	rcall	.+304    	; 0xfa4 <uart_setup>
void uart_put_char(char c);
static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) {
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
     e74:	87 e0       	ldi	r24, 0x07	; 7
     e76:	80 93 a2 00 	sts	0x00A2, r24
	uart_setup();
	pmic_setup();
	//i2c_setup();
	//btn_setup();
	//rtc_setup();
	jsmn_init(&p);
     e7a:	ce 01       	movw	r24, r28
     e7c:	01 96       	adiw	r24, 0x01	; 1
     e7e:	e2 df       	rcall	.-60     	; 0xe44 <jsmn_init>
	
	stdout = stdin = &mystdout;
     e80:	84 e0       	ldi	r24, 0x04	; 4
     e82:	90 e2       	ldi	r25, 0x20	; 32
     e84:	80 93 d0 25 	sts	0x25D0, r24
     e88:	90 93 d1 25 	sts	0x25D1, r25
     e8c:	80 93 d2 25 	sts	0x25D2, r24
     e90:	90 93 d3 25 	sts	0x25D3, r25
	
	puts("LED MATRIX Clock - By: Erlend Hestnes");
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	91 e2       	ldi	r25, 0x21	; 33
     e98:	b5 d0       	rcall	.+362    	; 0x1004 <puts>
	//si114x_init(SI114X_ADDR);
	
	
	//init_time();
	
	sei();
     e9a:	78 94       	sei
	
	esp8266_on();
     e9c:	dd d9       	rcall	.-3142   	; 0x258 <esp8266_on>
	esp8266_setup_webserver();
     e9e:	ed d9       	rcall	.-3110   	; 0x27a <esp8266_setup_webserver>
     ea0:	ff cf       	rjmp	.-2      	; 0xea0 <main+0x48>

00000ea2 <__vector_20>:
	}
	
}

//Used for SI114x Timestamp
ISR(TCC1_OVF_vect) {
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
	counter++;	
     eb0:	80 91 12 25 	lds	r24, 0x2512
     eb4:	90 91 13 25 	lds	r25, 0x2513
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	80 93 12 25 	sts	0x2512, r24
     ebe:	90 93 13 25 	sts	0x2513, r25
     ec2:	9f 91       	pop	r25
     ec4:	8f 91       	pop	r24
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	0f 90       	pop	r0
     ecc:	1f 90       	pop	r1
     ece:	18 95       	reti

00000ed0 <__vector_66>:
	} else {
		return NONE;
	}
}

ISR(PORTA_INT0_vect) {
     ed0:	1f 92       	push	r1
     ed2:	0f 92       	push	r0
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	0f 92       	push	r0
     ed8:	11 24       	eor	r1, r1
     eda:	0b b6       	in	r0, 0x3b	; 59
     edc:	0f 92       	push	r0
     ede:	2f 93       	push	r18
     ee0:	3f 93       	push	r19
     ee2:	4f 93       	push	r20
     ee4:	5f 93       	push	r21
     ee6:	6f 93       	push	r22
     ee8:	7f 93       	push	r23
     eea:	8f 93       	push	r24
     eec:	9f 93       	push	r25
     eee:	af 93       	push	r26
     ef0:	bf 93       	push	r27
     ef2:	ef 93       	push	r30
     ef4:	ff 93       	push	r31
	ht1632c_clearScreen();
     ef6:	9e df       	rcall	.-196    	; 0xe34 <ht1632c_clearScreen>
     ef8:	ff 91       	pop	r31
     efa:	ef 91       	pop	r30
     efc:	bf 91       	pop	r27
     efe:	af 91       	pop	r26
     f00:	9f 91       	pop	r25
     f02:	8f 91       	pop	r24
     f04:	7f 91       	pop	r23
     f06:	6f 91       	pop	r22
     f08:	5f 91       	pop	r21
     f0a:	4f 91       	pop	r20
     f0c:	3f 91       	pop	r19
     f0e:	2f 91       	pop	r18
     f10:	0f 90       	pop	r0
     f12:	0b be       	out	0x3b, r0	; 59
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_10>:
	ht1632c_drawChar(9,pos,buffer[1],1,1);
	
	ht1632c_writeScreen();
}

ISR(RTC_OVF_vect) {
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	0b b6       	in	r0, 0x3b	; 59
     f2a:	0f 92       	push	r0
     f2c:	2f 93       	push	r18
     f2e:	3f 93       	push	r19
     f30:	4f 93       	push	r20
     f32:	8f 93       	push	r24
     f34:	9f 93       	push	r25
     f36:	af 93       	push	r26
     f38:	bf 93       	push	r27
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
	time.seconds++;
     f3e:	a9 ec       	ldi	r26, 0xC9	; 201
     f40:	b5 e2       	ldi	r27, 0x25	; 37
     f42:	3c 91       	ld	r19, X
     f44:	3f 5f       	subi	r19, 0xFF	; 255
	time.minutes += time.seconds / 60;
     f46:	89 e8       	ldi	r24, 0x89	; 137
     f48:	38 9f       	mul	r19, r24
     f4a:	21 2d       	mov	r18, r1
     f4c:	11 24       	eor	r1, r1
     f4e:	22 95       	swap	r18
     f50:	26 95       	lsr	r18
     f52:	27 70       	andi	r18, 0x07	; 7
     f54:	ea ec       	ldi	r30, 0xCA	; 202
     f56:	f5 e2       	ldi	r31, 0x25	; 37
     f58:	90 81       	ld	r25, Z
     f5a:	92 0f       	add	r25, r18
	time.seconds %= 60;
     f5c:	4c e3       	ldi	r20, 0x3C	; 60
     f5e:	24 9f       	mul	r18, r20
     f60:	30 19       	sub	r19, r0
     f62:	11 24       	eor	r1, r1
     f64:	3c 93       	st	X, r19
	time.hours += time.minutes / 60;
     f66:	ab ec       	ldi	r26, 0xCB	; 203
     f68:	b5 e2       	ldi	r27, 0x25	; 37
     f6a:	98 9f       	mul	r25, r24
     f6c:	81 2d       	mov	r24, r1
     f6e:	11 24       	eor	r1, r1
     f70:	82 95       	swap	r24
     f72:	86 95       	lsr	r24
     f74:	87 70       	andi	r24, 0x07	; 7
     f76:	2c 91       	ld	r18, X
     f78:	28 0f       	add	r18, r24
     f7a:	2c 93       	st	X, r18
	time.minutes %= 60;
     f7c:	84 9f       	mul	r24, r20
     f7e:	90 19       	sub	r25, r0
     f80:	11 24       	eor	r1, r1
     f82:	90 83       	st	Z, r25
}
     f84:	ff 91       	pop	r31
     f86:	ef 91       	pop	r30
     f88:	bf 91       	pop	r27
     f8a:	af 91       	pop	r26
     f8c:	9f 91       	pop	r25
     f8e:	8f 91       	pop	r24
     f90:	4f 91       	pop	r20
     f92:	3f 91       	pop	r19
     f94:	2f 91       	pop	r18
     f96:	0f 90       	pop	r0
     f98:	0b be       	out	0x3b, r0	; 59
     f9a:	0f 90       	pop	r0
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	0f 90       	pop	r0
     fa0:	1f 90       	pop	r1
     fa2:	18 95       	reti

00000fa4 <uart_setup>:
#include <avr/io.h>
#include <util/delay.h>

void uart_setup(void) {
	
	PORTD.DIRSET = PIN3_bm; //TX
     fa4:	e0 e6       	ldi	r30, 0x60	; 96
     fa6:	f6 e0       	ldi	r31, 0x06	; 6
     fa8:	88 e0       	ldi	r24, 0x08	; 8
     faa:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; //RX
     fac:	84 e0       	ldi	r24, 0x04	; 4
     fae:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
     fb0:	e0 ea       	ldi	r30, 0xA0	; 160
     fb2:	f9 e0       	ldi	r31, 0x09	; 9
     fb4:	80 e2       	ldi	r24, 0x20	; 32
     fb6:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 207;//0x1111;
     fb8:	8f ec       	ldi	r24, 0xCF	; 207
     fba:	86 83       	std	Z+6, r24	; 0x06
	//USARTE0.BAUDCTRLB = (33 << 4);
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
     fbc:	83 e0       	ldi	r24, 0x03	; 3
     fbe:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     fc0:	88 e1       	ldi	r24, 0x18	; 24
     fc2:	84 83       	std	Z+4, r24	; 0x04
     fc4:	08 95       	ret

00000fc6 <uart_put_char>:
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
     fc6:	90 91 a1 09 	lds	r25, 0x09A1
     fca:	95 ff       	sbrs	r25, 5
     fcc:	fc cf       	rjmp	.-8      	; 0xfc6 <uart_put_char>
	USARTD0.DATA = c;
     fce:	80 93 a0 09 	sts	0x09A0, r24
     fd2:	08 95       	ret

00000fd4 <uart_get_char>:
}

char uart_get_char(void) {
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
     fd4:	80 91 a1 09 	lds	r24, 0x09A1
     fd8:	87 ff       	sbrs	r24, 7
     fda:	fc cf       	rjmp	.-8      	; 0xfd4 <uart_get_char>
	return USARTD0.DATA;
     fdc:	80 91 a0 09 	lds	r24, 0x09A0
}
     fe0:	08 95       	ret

00000fe2 <printf>:
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	fe 01       	movw	r30, r28
     fec:	35 96       	adiw	r30, 0x05	; 5
     fee:	61 91       	ld	r22, Z+
     ff0:	71 91       	ld	r23, Z+
     ff2:	af 01       	movw	r20, r30
     ff4:	80 91 d2 25 	lds	r24, 0x25D2
     ff8:	90 91 d3 25 	lds	r25, 0x25D3
     ffc:	30 d0       	rcall	.+96     	; 0x105e <vfprintf>
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <puts>:
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	e0 91 d2 25 	lds	r30, 0x25D2
    1010:	f0 91 d3 25 	lds	r31, 0x25D3
    1014:	23 81       	ldd	r18, Z+3	; 0x03
    1016:	21 ff       	sbrs	r18, 1
    1018:	1b c0       	rjmp	.+54     	; 0x1050 <puts+0x4c>
    101a:	ec 01       	movw	r28, r24
    101c:	00 e0       	ldi	r16, 0x00	; 0
    101e:	10 e0       	ldi	r17, 0x00	; 0
    1020:	89 91       	ld	r24, Y+
    1022:	60 91 d2 25 	lds	r22, 0x25D2
    1026:	70 91 d3 25 	lds	r23, 0x25D3
    102a:	db 01       	movw	r26, r22
    102c:	18 96       	adiw	r26, 0x08	; 8
    102e:	ed 91       	ld	r30, X+
    1030:	fc 91       	ld	r31, X
    1032:	19 97       	sbiw	r26, 0x09	; 9
    1034:	88 23       	and	r24, r24
    1036:	31 f0       	breq	.+12     	; 0x1044 <puts+0x40>
    1038:	09 95       	icall
    103a:	89 2b       	or	r24, r25
    103c:	89 f3       	breq	.-30     	; 0x1020 <puts+0x1c>
    103e:	0f ef       	ldi	r16, 0xFF	; 255
    1040:	1f ef       	ldi	r17, 0xFF	; 255
    1042:	ee cf       	rjmp	.-36     	; 0x1020 <puts+0x1c>
    1044:	8a e0       	ldi	r24, 0x0A	; 10
    1046:	09 95       	icall
    1048:	89 2b       	or	r24, r25
    104a:	11 f4       	brne	.+4      	; 0x1050 <puts+0x4c>
    104c:	c8 01       	movw	r24, r16
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <puts+0x50>
    1050:	8f ef       	ldi	r24, 0xFF	; 255
    1052:	9f ef       	ldi	r25, 0xFF	; 255
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	08 95       	ret

0000105e <vfprintf>:
    105e:	2f 92       	push	r2
    1060:	3f 92       	push	r3
    1062:	4f 92       	push	r4
    1064:	5f 92       	push	r5
    1066:	6f 92       	push	r6
    1068:	7f 92       	push	r7
    106a:	8f 92       	push	r8
    106c:	9f 92       	push	r9
    106e:	af 92       	push	r10
    1070:	bf 92       	push	r11
    1072:	cf 92       	push	r12
    1074:	df 92       	push	r13
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	2c 97       	sbiw	r28, 0x0c	; 12
    1088:	cd bf       	out	0x3d, r28	; 61
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	7c 01       	movw	r14, r24
    108e:	6b 01       	movw	r12, r22
    1090:	8a 01       	movw	r16, r20
    1092:	fc 01       	movw	r30, r24
    1094:	16 82       	std	Z+6, r1	; 0x06
    1096:	17 82       	std	Z+7, r1	; 0x07
    1098:	83 81       	ldd	r24, Z+3	; 0x03
    109a:	81 ff       	sbrs	r24, 1
    109c:	b0 c1       	rjmp	.+864    	; 0x13fe <vfprintf+0x3a0>
    109e:	ce 01       	movw	r24, r28
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	4c 01       	movw	r8, r24
    10a4:	f7 01       	movw	r30, r14
    10a6:	93 81       	ldd	r25, Z+3	; 0x03
    10a8:	f6 01       	movw	r30, r12
    10aa:	93 fd       	sbrc	r25, 3
    10ac:	85 91       	lpm	r24, Z+
    10ae:	93 ff       	sbrs	r25, 3
    10b0:	81 91       	ld	r24, Z+
    10b2:	6f 01       	movw	r12, r30
    10b4:	88 23       	and	r24, r24
    10b6:	09 f4       	brne	.+2      	; 0x10ba <vfprintf+0x5c>
    10b8:	9e c1       	rjmp	.+828    	; 0x13f6 <vfprintf+0x398>
    10ba:	85 32       	cpi	r24, 0x25	; 37
    10bc:	39 f4       	brne	.+14     	; 0x10cc <vfprintf+0x6e>
    10be:	93 fd       	sbrc	r25, 3
    10c0:	85 91       	lpm	r24, Z+
    10c2:	93 ff       	sbrs	r25, 3
    10c4:	81 91       	ld	r24, Z+
    10c6:	6f 01       	movw	r12, r30
    10c8:	85 32       	cpi	r24, 0x25	; 37
    10ca:	21 f4       	brne	.+8      	; 0x10d4 <vfprintf+0x76>
    10cc:	b7 01       	movw	r22, r14
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	c4 d1       	rcall	.+904    	; 0x145a <fputc>
    10d2:	e8 cf       	rjmp	.-48     	; 0x10a4 <vfprintf+0x46>
    10d4:	51 2c       	mov	r5, r1
    10d6:	31 2c       	mov	r3, r1
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	20 32       	cpi	r18, 0x20	; 32
    10dc:	a0 f4       	brcc	.+40     	; 0x1106 <vfprintf+0xa8>
    10de:	8b 32       	cpi	r24, 0x2B	; 43
    10e0:	69 f0       	breq	.+26     	; 0x10fc <vfprintf+0x9e>
    10e2:	30 f4       	brcc	.+12     	; 0x10f0 <vfprintf+0x92>
    10e4:	80 32       	cpi	r24, 0x20	; 32
    10e6:	59 f0       	breq	.+22     	; 0x10fe <vfprintf+0xa0>
    10e8:	83 32       	cpi	r24, 0x23	; 35
    10ea:	69 f4       	brne	.+26     	; 0x1106 <vfprintf+0xa8>
    10ec:	20 61       	ori	r18, 0x10	; 16
    10ee:	2c c0       	rjmp	.+88     	; 0x1148 <vfprintf+0xea>
    10f0:	8d 32       	cpi	r24, 0x2D	; 45
    10f2:	39 f0       	breq	.+14     	; 0x1102 <vfprintf+0xa4>
    10f4:	80 33       	cpi	r24, 0x30	; 48
    10f6:	39 f4       	brne	.+14     	; 0x1106 <vfprintf+0xa8>
    10f8:	21 60       	ori	r18, 0x01	; 1
    10fa:	26 c0       	rjmp	.+76     	; 0x1148 <vfprintf+0xea>
    10fc:	22 60       	ori	r18, 0x02	; 2
    10fe:	24 60       	ori	r18, 0x04	; 4
    1100:	23 c0       	rjmp	.+70     	; 0x1148 <vfprintf+0xea>
    1102:	28 60       	ori	r18, 0x08	; 8
    1104:	21 c0       	rjmp	.+66     	; 0x1148 <vfprintf+0xea>
    1106:	27 fd       	sbrc	r18, 7
    1108:	27 c0       	rjmp	.+78     	; 0x1158 <vfprintf+0xfa>
    110a:	30 ed       	ldi	r19, 0xD0	; 208
    110c:	38 0f       	add	r19, r24
    110e:	3a 30       	cpi	r19, 0x0A	; 10
    1110:	78 f4       	brcc	.+30     	; 0x1130 <vfprintf+0xd2>
    1112:	26 ff       	sbrs	r18, 6
    1114:	06 c0       	rjmp	.+12     	; 0x1122 <vfprintf+0xc4>
    1116:	fa e0       	ldi	r31, 0x0A	; 10
    1118:	5f 9e       	mul	r5, r31
    111a:	30 0d       	add	r19, r0
    111c:	11 24       	eor	r1, r1
    111e:	53 2e       	mov	r5, r19
    1120:	13 c0       	rjmp	.+38     	; 0x1148 <vfprintf+0xea>
    1122:	8a e0       	ldi	r24, 0x0A	; 10
    1124:	38 9e       	mul	r3, r24
    1126:	30 0d       	add	r19, r0
    1128:	11 24       	eor	r1, r1
    112a:	33 2e       	mov	r3, r19
    112c:	20 62       	ori	r18, 0x20	; 32
    112e:	0c c0       	rjmp	.+24     	; 0x1148 <vfprintf+0xea>
    1130:	8e 32       	cpi	r24, 0x2E	; 46
    1132:	21 f4       	brne	.+8      	; 0x113c <vfprintf+0xde>
    1134:	26 fd       	sbrc	r18, 6
    1136:	5f c1       	rjmp	.+702    	; 0x13f6 <vfprintf+0x398>
    1138:	20 64       	ori	r18, 0x40	; 64
    113a:	06 c0       	rjmp	.+12     	; 0x1148 <vfprintf+0xea>
    113c:	8c 36       	cpi	r24, 0x6C	; 108
    113e:	11 f4       	brne	.+4      	; 0x1144 <vfprintf+0xe6>
    1140:	20 68       	ori	r18, 0x80	; 128
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <vfprintf+0xea>
    1144:	88 36       	cpi	r24, 0x68	; 104
    1146:	41 f4       	brne	.+16     	; 0x1158 <vfprintf+0xfa>
    1148:	f6 01       	movw	r30, r12
    114a:	93 fd       	sbrc	r25, 3
    114c:	85 91       	lpm	r24, Z+
    114e:	93 ff       	sbrs	r25, 3
    1150:	81 91       	ld	r24, Z+
    1152:	6f 01       	movw	r12, r30
    1154:	81 11       	cpse	r24, r1
    1156:	c1 cf       	rjmp	.-126    	; 0x10da <vfprintf+0x7c>
    1158:	98 2f       	mov	r25, r24
    115a:	9f 7d       	andi	r25, 0xDF	; 223
    115c:	95 54       	subi	r25, 0x45	; 69
    115e:	93 30       	cpi	r25, 0x03	; 3
    1160:	28 f4       	brcc	.+10     	; 0x116c <vfprintf+0x10e>
    1162:	0c 5f       	subi	r16, 0xFC	; 252
    1164:	1f 4f       	sbci	r17, 0xFF	; 255
    1166:	ff e3       	ldi	r31, 0x3F	; 63
    1168:	f9 83       	std	Y+1, r31	; 0x01
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <vfprintf+0x128>
    116c:	83 36       	cpi	r24, 0x63	; 99
    116e:	31 f0       	breq	.+12     	; 0x117c <vfprintf+0x11e>
    1170:	83 37       	cpi	r24, 0x73	; 115
    1172:	71 f0       	breq	.+28     	; 0x1190 <vfprintf+0x132>
    1174:	83 35       	cpi	r24, 0x53	; 83
    1176:	09 f0       	breq	.+2      	; 0x117a <vfprintf+0x11c>
    1178:	57 c0       	rjmp	.+174    	; 0x1228 <vfprintf+0x1ca>
    117a:	21 c0       	rjmp	.+66     	; 0x11be <vfprintf+0x160>
    117c:	f8 01       	movw	r30, r16
    117e:	80 81       	ld	r24, Z
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	0e 5f       	subi	r16, 0xFE	; 254
    1184:	1f 4f       	sbci	r17, 0xFF	; 255
    1186:	44 24       	eor	r4, r4
    1188:	43 94       	inc	r4
    118a:	51 2c       	mov	r5, r1
    118c:	54 01       	movw	r10, r8
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <vfprintf+0x15a>
    1190:	38 01       	movw	r6, r16
    1192:	f2 e0       	ldi	r31, 0x02	; 2
    1194:	6f 0e       	add	r6, r31
    1196:	71 1c       	adc	r7, r1
    1198:	f8 01       	movw	r30, r16
    119a:	a0 80       	ld	r10, Z
    119c:	b1 80       	ldd	r11, Z+1	; 0x01
    119e:	26 ff       	sbrs	r18, 6
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <vfprintf+0x14a>
    11a2:	65 2d       	mov	r22, r5
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <vfprintf+0x14e>
    11a8:	6f ef       	ldi	r22, 0xFF	; 255
    11aa:	7f ef       	ldi	r23, 0xFF	; 255
    11ac:	c5 01       	movw	r24, r10
    11ae:	2c 87       	std	Y+12, r18	; 0x0c
    11b0:	49 d1       	rcall	.+658    	; 0x1444 <strnlen>
    11b2:	2c 01       	movw	r4, r24
    11b4:	83 01       	movw	r16, r6
    11b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    11b8:	2f 77       	andi	r18, 0x7F	; 127
    11ba:	22 2e       	mov	r2, r18
    11bc:	16 c0       	rjmp	.+44     	; 0x11ea <vfprintf+0x18c>
    11be:	38 01       	movw	r6, r16
    11c0:	f2 e0       	ldi	r31, 0x02	; 2
    11c2:	6f 0e       	add	r6, r31
    11c4:	71 1c       	adc	r7, r1
    11c6:	f8 01       	movw	r30, r16
    11c8:	a0 80       	ld	r10, Z
    11ca:	b1 80       	ldd	r11, Z+1	; 0x01
    11cc:	26 ff       	sbrs	r18, 6
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <vfprintf+0x178>
    11d0:	65 2d       	mov	r22, r5
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <vfprintf+0x17c>
    11d6:	6f ef       	ldi	r22, 0xFF	; 255
    11d8:	7f ef       	ldi	r23, 0xFF	; 255
    11da:	c5 01       	movw	r24, r10
    11dc:	2c 87       	std	Y+12, r18	; 0x0c
    11de:	27 d1       	rcall	.+590    	; 0x142e <strnlen_P>
    11e0:	2c 01       	movw	r4, r24
    11e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    11e4:	20 68       	ori	r18, 0x80	; 128
    11e6:	22 2e       	mov	r2, r18
    11e8:	83 01       	movw	r16, r6
    11ea:	23 fc       	sbrc	r2, 3
    11ec:	19 c0       	rjmp	.+50     	; 0x1220 <vfprintf+0x1c2>
    11ee:	83 2d       	mov	r24, r3
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	48 16       	cp	r4, r24
    11f4:	59 06       	cpc	r5, r25
    11f6:	a0 f4       	brcc	.+40     	; 0x1220 <vfprintf+0x1c2>
    11f8:	b7 01       	movw	r22, r14
    11fa:	80 e2       	ldi	r24, 0x20	; 32
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	2d d1       	rcall	.+602    	; 0x145a <fputc>
    1200:	3a 94       	dec	r3
    1202:	f5 cf       	rjmp	.-22     	; 0x11ee <vfprintf+0x190>
    1204:	f5 01       	movw	r30, r10
    1206:	27 fc       	sbrc	r2, 7
    1208:	85 91       	lpm	r24, Z+
    120a:	27 fe       	sbrs	r2, 7
    120c:	81 91       	ld	r24, Z+
    120e:	5f 01       	movw	r10, r30
    1210:	b7 01       	movw	r22, r14
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	22 d1       	rcall	.+580    	; 0x145a <fputc>
    1216:	31 10       	cpse	r3, r1
    1218:	3a 94       	dec	r3
    121a:	f1 e0       	ldi	r31, 0x01	; 1
    121c:	4f 1a       	sub	r4, r31
    121e:	51 08       	sbc	r5, r1
    1220:	41 14       	cp	r4, r1
    1222:	51 04       	cpc	r5, r1
    1224:	79 f7       	brne	.-34     	; 0x1204 <vfprintf+0x1a6>
    1226:	de c0       	rjmp	.+444    	; 0x13e4 <vfprintf+0x386>
    1228:	84 36       	cpi	r24, 0x64	; 100
    122a:	11 f0       	breq	.+4      	; 0x1230 <vfprintf+0x1d2>
    122c:	89 36       	cpi	r24, 0x69	; 105
    122e:	31 f5       	brne	.+76     	; 0x127c <vfprintf+0x21e>
    1230:	f8 01       	movw	r30, r16
    1232:	27 ff       	sbrs	r18, 7
    1234:	07 c0       	rjmp	.+14     	; 0x1244 <vfprintf+0x1e6>
    1236:	60 81       	ld	r22, Z
    1238:	71 81       	ldd	r23, Z+1	; 0x01
    123a:	82 81       	ldd	r24, Z+2	; 0x02
    123c:	93 81       	ldd	r25, Z+3	; 0x03
    123e:	0c 5f       	subi	r16, 0xFC	; 252
    1240:	1f 4f       	sbci	r17, 0xFF	; 255
    1242:	08 c0       	rjmp	.+16     	; 0x1254 <vfprintf+0x1f6>
    1244:	60 81       	ld	r22, Z
    1246:	71 81       	ldd	r23, Z+1	; 0x01
    1248:	88 27       	eor	r24, r24
    124a:	77 fd       	sbrc	r23, 7
    124c:	80 95       	com	r24
    124e:	98 2f       	mov	r25, r24
    1250:	0e 5f       	subi	r16, 0xFE	; 254
    1252:	1f 4f       	sbci	r17, 0xFF	; 255
    1254:	2f 76       	andi	r18, 0x6F	; 111
    1256:	b2 2e       	mov	r11, r18
    1258:	97 ff       	sbrs	r25, 7
    125a:	09 c0       	rjmp	.+18     	; 0x126e <vfprintf+0x210>
    125c:	90 95       	com	r25
    125e:	80 95       	com	r24
    1260:	70 95       	com	r23
    1262:	61 95       	neg	r22
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	8f 4f       	sbci	r24, 0xFF	; 255
    1268:	9f 4f       	sbci	r25, 0xFF	; 255
    126a:	20 68       	ori	r18, 0x80	; 128
    126c:	b2 2e       	mov	r11, r18
    126e:	2a e0       	ldi	r18, 0x0A	; 10
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	a4 01       	movw	r20, r8
    1274:	24 d1       	rcall	.+584    	; 0x14be <__ultoa_invert>
    1276:	a8 2e       	mov	r10, r24
    1278:	a8 18       	sub	r10, r8
    127a:	43 c0       	rjmp	.+134    	; 0x1302 <vfprintf+0x2a4>
    127c:	85 37       	cpi	r24, 0x75	; 117
    127e:	29 f4       	brne	.+10     	; 0x128a <vfprintf+0x22c>
    1280:	2f 7e       	andi	r18, 0xEF	; 239
    1282:	b2 2e       	mov	r11, r18
    1284:	2a e0       	ldi	r18, 0x0A	; 10
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	25 c0       	rjmp	.+74     	; 0x12d4 <vfprintf+0x276>
    128a:	f2 2f       	mov	r31, r18
    128c:	f9 7f       	andi	r31, 0xF9	; 249
    128e:	bf 2e       	mov	r11, r31
    1290:	8f 36       	cpi	r24, 0x6F	; 111
    1292:	c1 f0       	breq	.+48     	; 0x12c4 <vfprintf+0x266>
    1294:	18 f4       	brcc	.+6      	; 0x129c <vfprintf+0x23e>
    1296:	88 35       	cpi	r24, 0x58	; 88
    1298:	79 f0       	breq	.+30     	; 0x12b8 <vfprintf+0x25a>
    129a:	ad c0       	rjmp	.+346    	; 0x13f6 <vfprintf+0x398>
    129c:	80 37       	cpi	r24, 0x70	; 112
    129e:	19 f0       	breq	.+6      	; 0x12a6 <vfprintf+0x248>
    12a0:	88 37       	cpi	r24, 0x78	; 120
    12a2:	21 f0       	breq	.+8      	; 0x12ac <vfprintf+0x24e>
    12a4:	a8 c0       	rjmp	.+336    	; 0x13f6 <vfprintf+0x398>
    12a6:	2f 2f       	mov	r18, r31
    12a8:	20 61       	ori	r18, 0x10	; 16
    12aa:	b2 2e       	mov	r11, r18
    12ac:	b4 fe       	sbrs	r11, 4
    12ae:	0d c0       	rjmp	.+26     	; 0x12ca <vfprintf+0x26c>
    12b0:	8b 2d       	mov	r24, r11
    12b2:	84 60       	ori	r24, 0x04	; 4
    12b4:	b8 2e       	mov	r11, r24
    12b6:	09 c0       	rjmp	.+18     	; 0x12ca <vfprintf+0x26c>
    12b8:	24 ff       	sbrs	r18, 4
    12ba:	0a c0       	rjmp	.+20     	; 0x12d0 <vfprintf+0x272>
    12bc:	9f 2f       	mov	r25, r31
    12be:	96 60       	ori	r25, 0x06	; 6
    12c0:	b9 2e       	mov	r11, r25
    12c2:	06 c0       	rjmp	.+12     	; 0x12d0 <vfprintf+0x272>
    12c4:	28 e0       	ldi	r18, 0x08	; 8
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	05 c0       	rjmp	.+10     	; 0x12d4 <vfprintf+0x276>
    12ca:	20 e1       	ldi	r18, 0x10	; 16
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <vfprintf+0x276>
    12d0:	20 e1       	ldi	r18, 0x10	; 16
    12d2:	32 e0       	ldi	r19, 0x02	; 2
    12d4:	f8 01       	movw	r30, r16
    12d6:	b7 fe       	sbrs	r11, 7
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <vfprintf+0x28a>
    12da:	60 81       	ld	r22, Z
    12dc:	71 81       	ldd	r23, Z+1	; 0x01
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	0c 5f       	subi	r16, 0xFC	; 252
    12e4:	1f 4f       	sbci	r17, 0xFF	; 255
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <vfprintf+0x296>
    12e8:	60 81       	ld	r22, Z
    12ea:	71 81       	ldd	r23, Z+1	; 0x01
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0e 5f       	subi	r16, 0xFE	; 254
    12f2:	1f 4f       	sbci	r17, 0xFF	; 255
    12f4:	a4 01       	movw	r20, r8
    12f6:	e3 d0       	rcall	.+454    	; 0x14be <__ultoa_invert>
    12f8:	a8 2e       	mov	r10, r24
    12fa:	a8 18       	sub	r10, r8
    12fc:	fb 2d       	mov	r31, r11
    12fe:	ff 77       	andi	r31, 0x7F	; 127
    1300:	bf 2e       	mov	r11, r31
    1302:	b6 fe       	sbrs	r11, 6
    1304:	0b c0       	rjmp	.+22     	; 0x131c <vfprintf+0x2be>
    1306:	2b 2d       	mov	r18, r11
    1308:	2e 7f       	andi	r18, 0xFE	; 254
    130a:	a5 14       	cp	r10, r5
    130c:	50 f4       	brcc	.+20     	; 0x1322 <vfprintf+0x2c4>
    130e:	b4 fe       	sbrs	r11, 4
    1310:	0a c0       	rjmp	.+20     	; 0x1326 <vfprintf+0x2c8>
    1312:	b2 fc       	sbrc	r11, 2
    1314:	08 c0       	rjmp	.+16     	; 0x1326 <vfprintf+0x2c8>
    1316:	2b 2d       	mov	r18, r11
    1318:	2e 7e       	andi	r18, 0xEE	; 238
    131a:	05 c0       	rjmp	.+10     	; 0x1326 <vfprintf+0x2c8>
    131c:	7a 2c       	mov	r7, r10
    131e:	2b 2d       	mov	r18, r11
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <vfprintf+0x2ca>
    1322:	7a 2c       	mov	r7, r10
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <vfprintf+0x2ca>
    1326:	75 2c       	mov	r7, r5
    1328:	24 ff       	sbrs	r18, 4
    132a:	0d c0       	rjmp	.+26     	; 0x1346 <vfprintf+0x2e8>
    132c:	fe 01       	movw	r30, r28
    132e:	ea 0d       	add	r30, r10
    1330:	f1 1d       	adc	r31, r1
    1332:	80 81       	ld	r24, Z
    1334:	80 33       	cpi	r24, 0x30	; 48
    1336:	11 f4       	brne	.+4      	; 0x133c <vfprintf+0x2de>
    1338:	29 7e       	andi	r18, 0xE9	; 233
    133a:	09 c0       	rjmp	.+18     	; 0x134e <vfprintf+0x2f0>
    133c:	22 ff       	sbrs	r18, 2
    133e:	06 c0       	rjmp	.+12     	; 0x134c <vfprintf+0x2ee>
    1340:	73 94       	inc	r7
    1342:	73 94       	inc	r7
    1344:	04 c0       	rjmp	.+8      	; 0x134e <vfprintf+0x2f0>
    1346:	82 2f       	mov	r24, r18
    1348:	86 78       	andi	r24, 0x86	; 134
    134a:	09 f0       	breq	.+2      	; 0x134e <vfprintf+0x2f0>
    134c:	73 94       	inc	r7
    134e:	23 fd       	sbrc	r18, 3
    1350:	12 c0       	rjmp	.+36     	; 0x1376 <vfprintf+0x318>
    1352:	20 ff       	sbrs	r18, 0
    1354:	06 c0       	rjmp	.+12     	; 0x1362 <vfprintf+0x304>
    1356:	5a 2c       	mov	r5, r10
    1358:	73 14       	cp	r7, r3
    135a:	18 f4       	brcc	.+6      	; 0x1362 <vfprintf+0x304>
    135c:	53 0c       	add	r5, r3
    135e:	57 18       	sub	r5, r7
    1360:	73 2c       	mov	r7, r3
    1362:	73 14       	cp	r7, r3
    1364:	60 f4       	brcc	.+24     	; 0x137e <vfprintf+0x320>
    1366:	b7 01       	movw	r22, r14
    1368:	80 e2       	ldi	r24, 0x20	; 32
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	2c 87       	std	Y+12, r18	; 0x0c
    136e:	75 d0       	rcall	.+234    	; 0x145a <fputc>
    1370:	73 94       	inc	r7
    1372:	2c 85       	ldd	r18, Y+12	; 0x0c
    1374:	f6 cf       	rjmp	.-20     	; 0x1362 <vfprintf+0x304>
    1376:	73 14       	cp	r7, r3
    1378:	10 f4       	brcc	.+4      	; 0x137e <vfprintf+0x320>
    137a:	37 18       	sub	r3, r7
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <vfprintf+0x322>
    137e:	31 2c       	mov	r3, r1
    1380:	24 ff       	sbrs	r18, 4
    1382:	11 c0       	rjmp	.+34     	; 0x13a6 <vfprintf+0x348>
    1384:	b7 01       	movw	r22, r14
    1386:	80 e3       	ldi	r24, 0x30	; 48
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	2c 87       	std	Y+12, r18	; 0x0c
    138c:	66 d0       	rcall	.+204    	; 0x145a <fputc>
    138e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1390:	22 ff       	sbrs	r18, 2
    1392:	16 c0       	rjmp	.+44     	; 0x13c0 <vfprintf+0x362>
    1394:	21 ff       	sbrs	r18, 1
    1396:	03 c0       	rjmp	.+6      	; 0x139e <vfprintf+0x340>
    1398:	88 e5       	ldi	r24, 0x58	; 88
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <vfprintf+0x344>
    139e:	88 e7       	ldi	r24, 0x78	; 120
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	b7 01       	movw	r22, r14
    13a4:	0c c0       	rjmp	.+24     	; 0x13be <vfprintf+0x360>
    13a6:	82 2f       	mov	r24, r18
    13a8:	86 78       	andi	r24, 0x86	; 134
    13aa:	51 f0       	breq	.+20     	; 0x13c0 <vfprintf+0x362>
    13ac:	21 fd       	sbrc	r18, 1
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <vfprintf+0x356>
    13b0:	80 e2       	ldi	r24, 0x20	; 32
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <vfprintf+0x358>
    13b4:	8b e2       	ldi	r24, 0x2B	; 43
    13b6:	27 fd       	sbrc	r18, 7
    13b8:	8d e2       	ldi	r24, 0x2D	; 45
    13ba:	b7 01       	movw	r22, r14
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	4d d0       	rcall	.+154    	; 0x145a <fputc>
    13c0:	a5 14       	cp	r10, r5
    13c2:	30 f4       	brcc	.+12     	; 0x13d0 <vfprintf+0x372>
    13c4:	b7 01       	movw	r22, r14
    13c6:	80 e3       	ldi	r24, 0x30	; 48
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	47 d0       	rcall	.+142    	; 0x145a <fputc>
    13cc:	5a 94       	dec	r5
    13ce:	f8 cf       	rjmp	.-16     	; 0x13c0 <vfprintf+0x362>
    13d0:	aa 94       	dec	r10
    13d2:	f4 01       	movw	r30, r8
    13d4:	ea 0d       	add	r30, r10
    13d6:	f1 1d       	adc	r31, r1
    13d8:	80 81       	ld	r24, Z
    13da:	b7 01       	movw	r22, r14
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	3d d0       	rcall	.+122    	; 0x145a <fputc>
    13e0:	a1 10       	cpse	r10, r1
    13e2:	f6 cf       	rjmp	.-20     	; 0x13d0 <vfprintf+0x372>
    13e4:	33 20       	and	r3, r3
    13e6:	09 f4       	brne	.+2      	; 0x13ea <vfprintf+0x38c>
    13e8:	5d ce       	rjmp	.-838    	; 0x10a4 <vfprintf+0x46>
    13ea:	b7 01       	movw	r22, r14
    13ec:	80 e2       	ldi	r24, 0x20	; 32
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	34 d0       	rcall	.+104    	; 0x145a <fputc>
    13f2:	3a 94       	dec	r3
    13f4:	f7 cf       	rjmp	.-18     	; 0x13e4 <vfprintf+0x386>
    13f6:	f7 01       	movw	r30, r14
    13f8:	86 81       	ldd	r24, Z+6	; 0x06
    13fa:	97 81       	ldd	r25, Z+7	; 0x07
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <vfprintf+0x3a4>
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	9f ef       	ldi	r25, 0xFF	; 255
    1402:	2c 96       	adiw	r28, 0x0c	; 12
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	df 90       	pop	r13
    1416:	cf 90       	pop	r12
    1418:	bf 90       	pop	r11
    141a:	af 90       	pop	r10
    141c:	9f 90       	pop	r9
    141e:	8f 90       	pop	r8
    1420:	7f 90       	pop	r7
    1422:	6f 90       	pop	r6
    1424:	5f 90       	pop	r5
    1426:	4f 90       	pop	r4
    1428:	3f 90       	pop	r3
    142a:	2f 90       	pop	r2
    142c:	08 95       	ret

0000142e <strnlen_P>:
    142e:	fc 01       	movw	r30, r24
    1430:	05 90       	lpm	r0, Z+
    1432:	61 50       	subi	r22, 0x01	; 1
    1434:	70 40       	sbci	r23, 0x00	; 0
    1436:	01 10       	cpse	r0, r1
    1438:	d8 f7       	brcc	.-10     	; 0x1430 <strnlen_P+0x2>
    143a:	80 95       	com	r24
    143c:	90 95       	com	r25
    143e:	8e 0f       	add	r24, r30
    1440:	9f 1f       	adc	r25, r31
    1442:	08 95       	ret

00001444 <strnlen>:
    1444:	fc 01       	movw	r30, r24
    1446:	61 50       	subi	r22, 0x01	; 1
    1448:	70 40       	sbci	r23, 0x00	; 0
    144a:	01 90       	ld	r0, Z+
    144c:	01 10       	cpse	r0, r1
    144e:	d8 f7       	brcc	.-10     	; 0x1446 <strnlen+0x2>
    1450:	80 95       	com	r24
    1452:	90 95       	com	r25
    1454:	8e 0f       	add	r24, r30
    1456:	9f 1f       	adc	r25, r31
    1458:	08 95       	ret

0000145a <fputc>:
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	18 2f       	mov	r17, r24
    1464:	09 2f       	mov	r16, r25
    1466:	eb 01       	movw	r28, r22
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	81 fd       	sbrc	r24, 1
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <fputc+0x1a>
    146e:	8f ef       	ldi	r24, 0xFF	; 255
    1470:	9f ef       	ldi	r25, 0xFF	; 255
    1472:	20 c0       	rjmp	.+64     	; 0x14b4 <fputc+0x5a>
    1474:	82 ff       	sbrs	r24, 2
    1476:	10 c0       	rjmp	.+32     	; 0x1498 <fputc+0x3e>
    1478:	4e 81       	ldd	r20, Y+6	; 0x06
    147a:	5f 81       	ldd	r21, Y+7	; 0x07
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	42 17       	cp	r20, r18
    1482:	53 07       	cpc	r21, r19
    1484:	7c f4       	brge	.+30     	; 0x14a4 <fputc+0x4a>
    1486:	e8 81       	ld	r30, Y
    1488:	f9 81       	ldd	r31, Y+1	; 0x01
    148a:	9f 01       	movw	r18, r30
    148c:	2f 5f       	subi	r18, 0xFF	; 255
    148e:	3f 4f       	sbci	r19, 0xFF	; 255
    1490:	28 83       	st	Y, r18
    1492:	39 83       	std	Y+1, r19	; 0x01
    1494:	10 83       	st	Z, r17
    1496:	06 c0       	rjmp	.+12     	; 0x14a4 <fputc+0x4a>
    1498:	e8 85       	ldd	r30, Y+8	; 0x08
    149a:	f9 85       	ldd	r31, Y+9	; 0x09
    149c:	81 2f       	mov	r24, r17
    149e:	09 95       	icall
    14a0:	89 2b       	or	r24, r25
    14a2:	29 f7       	brne	.-54     	; 0x146e <fputc+0x14>
    14a4:	2e 81       	ldd	r18, Y+6	; 0x06
    14a6:	3f 81       	ldd	r19, Y+7	; 0x07
    14a8:	2f 5f       	subi	r18, 0xFF	; 255
    14aa:	3f 4f       	sbci	r19, 0xFF	; 255
    14ac:	2e 83       	std	Y+6, r18	; 0x06
    14ae:	3f 83       	std	Y+7, r19	; 0x07
    14b0:	81 2f       	mov	r24, r17
    14b2:	90 2f       	mov	r25, r16
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	08 95       	ret

000014be <__ultoa_invert>:
    14be:	fa 01       	movw	r30, r20
    14c0:	aa 27       	eor	r26, r26
    14c2:	28 30       	cpi	r18, 0x08	; 8
    14c4:	51 f1       	breq	.+84     	; 0x151a <__ultoa_invert+0x5c>
    14c6:	20 31       	cpi	r18, 0x10	; 16
    14c8:	81 f1       	breq	.+96     	; 0x152a <__ultoa_invert+0x6c>
    14ca:	e8 94       	clt
    14cc:	6f 93       	push	r22
    14ce:	6e 7f       	andi	r22, 0xFE	; 254
    14d0:	6e 5f       	subi	r22, 0xFE	; 254
    14d2:	7f 4f       	sbci	r23, 0xFF	; 255
    14d4:	8f 4f       	sbci	r24, 0xFF	; 255
    14d6:	9f 4f       	sbci	r25, 0xFF	; 255
    14d8:	af 4f       	sbci	r26, 0xFF	; 255
    14da:	b1 e0       	ldi	r27, 0x01	; 1
    14dc:	3e d0       	rcall	.+124    	; 0x155a <__ultoa_invert+0x9c>
    14de:	b4 e0       	ldi	r27, 0x04	; 4
    14e0:	3c d0       	rcall	.+120    	; 0x155a <__ultoa_invert+0x9c>
    14e2:	67 0f       	add	r22, r23
    14e4:	78 1f       	adc	r23, r24
    14e6:	89 1f       	adc	r24, r25
    14e8:	9a 1f       	adc	r25, r26
    14ea:	a1 1d       	adc	r26, r1
    14ec:	68 0f       	add	r22, r24
    14ee:	79 1f       	adc	r23, r25
    14f0:	8a 1f       	adc	r24, r26
    14f2:	91 1d       	adc	r25, r1
    14f4:	a1 1d       	adc	r26, r1
    14f6:	6a 0f       	add	r22, r26
    14f8:	71 1d       	adc	r23, r1
    14fa:	81 1d       	adc	r24, r1
    14fc:	91 1d       	adc	r25, r1
    14fe:	a1 1d       	adc	r26, r1
    1500:	20 d0       	rcall	.+64     	; 0x1542 <__ultoa_invert+0x84>
    1502:	09 f4       	brne	.+2      	; 0x1506 <__ultoa_invert+0x48>
    1504:	68 94       	set
    1506:	3f 91       	pop	r19
    1508:	2a e0       	ldi	r18, 0x0A	; 10
    150a:	26 9f       	mul	r18, r22
    150c:	11 24       	eor	r1, r1
    150e:	30 19       	sub	r19, r0
    1510:	30 5d       	subi	r19, 0xD0	; 208
    1512:	31 93       	st	Z+, r19
    1514:	de f6       	brtc	.-74     	; 0x14cc <__ultoa_invert+0xe>
    1516:	cf 01       	movw	r24, r30
    1518:	08 95       	ret
    151a:	46 2f       	mov	r20, r22
    151c:	47 70       	andi	r20, 0x07	; 7
    151e:	40 5d       	subi	r20, 0xD0	; 208
    1520:	41 93       	st	Z+, r20
    1522:	b3 e0       	ldi	r27, 0x03	; 3
    1524:	0f d0       	rcall	.+30     	; 0x1544 <__ultoa_invert+0x86>
    1526:	c9 f7       	brne	.-14     	; 0x151a <__ultoa_invert+0x5c>
    1528:	f6 cf       	rjmp	.-20     	; 0x1516 <__ultoa_invert+0x58>
    152a:	46 2f       	mov	r20, r22
    152c:	4f 70       	andi	r20, 0x0F	; 15
    152e:	40 5d       	subi	r20, 0xD0	; 208
    1530:	4a 33       	cpi	r20, 0x3A	; 58
    1532:	18 f0       	brcs	.+6      	; 0x153a <__ultoa_invert+0x7c>
    1534:	49 5d       	subi	r20, 0xD9	; 217
    1536:	31 fd       	sbrc	r19, 1
    1538:	40 52       	subi	r20, 0x20	; 32
    153a:	41 93       	st	Z+, r20
    153c:	02 d0       	rcall	.+4      	; 0x1542 <__ultoa_invert+0x84>
    153e:	a9 f7       	brne	.-22     	; 0x152a <__ultoa_invert+0x6c>
    1540:	ea cf       	rjmp	.-44     	; 0x1516 <__ultoa_invert+0x58>
    1542:	b4 e0       	ldi	r27, 0x04	; 4
    1544:	a6 95       	lsr	r26
    1546:	97 95       	ror	r25
    1548:	87 95       	ror	r24
    154a:	77 95       	ror	r23
    154c:	67 95       	ror	r22
    154e:	ba 95       	dec	r27
    1550:	c9 f7       	brne	.-14     	; 0x1544 <__ultoa_invert+0x86>
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	61 05       	cpc	r22, r1
    1556:	71 05       	cpc	r23, r1
    1558:	08 95       	ret
    155a:	9b 01       	movw	r18, r22
    155c:	ac 01       	movw	r20, r24
    155e:	0a 2e       	mov	r0, r26
    1560:	06 94       	lsr	r0
    1562:	57 95       	ror	r21
    1564:	47 95       	ror	r20
    1566:	37 95       	ror	r19
    1568:	27 95       	ror	r18
    156a:	ba 95       	dec	r27
    156c:	c9 f7       	brne	.-14     	; 0x1560 <__ultoa_invert+0xa2>
    156e:	62 0f       	add	r22, r18
    1570:	73 1f       	adc	r23, r19
    1572:	84 1f       	adc	r24, r20
    1574:	95 1f       	adc	r25, r21
    1576:	a0 1d       	adc	r26, r0
    1578:	08 95       	ret

0000157a <_exit>:
    157a:	f8 94       	cli

0000157c <__stop_program>:
    157c:	ff cf       	rjmp	.-2      	; 0x157c <__stop_program>
