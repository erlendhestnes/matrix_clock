
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ae  00802000  00008478  0000850c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000bdb  008021ae  008021ae  000086ba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000086ba  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000700  00000000  00000000  00008716  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00019d6d  00000000  00000000  00008e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e42  00000000  00000000  00022b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000cfb7  00000000  00000000  000259c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000022c8  00000000  00000000  0003297c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003145  00000000  00000000  00034c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00028016  00000000  00000000  00037d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003a50  00000000  00000000  0005fd9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c3       	rjmp	.+1892   	; 0x766 <__ctors_end>
       2:	00 00       	nop
       4:	cf c3       	rjmp	.+1950   	; 0x7a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c3       	rjmp	.+1946   	; 0x7a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c3       	rjmp	.+1942   	; 0x7a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c3       	rjmp	.+1938   	; 0x7a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c3       	rjmp	.+1934   	; 0x7a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c3       	rjmp	.+1930   	; 0x7a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c3       	rjmp	.+1926   	; 0x7a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c3       	rjmp	.+1922   	; 0x7a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c3       	rjmp	.+1918   	; 0x7a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 44 38 	jmp	0x7088	; 0x7088 <__vector_10>
      2c:	bb c3       	rjmp	.+1910   	; 0x7a4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b9 c3       	rjmp	.+1906   	; 0x7a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	b7 c3       	rjmp	.+1902   	; 0x7a4 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 8f 30 	jmp	0x611e	; 0x611e <__vector_14>
      3c:	b3 c3       	rjmp	.+1894   	; 0x7a4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b1 c3       	rjmp	.+1890   	; 0x7a4 <__bad_interrupt>
      42:	00 00       	nop
      44:	af c3       	rjmp	.+1886   	; 0x7a4 <__bad_interrupt>
      46:	00 00       	nop
      48:	ad c3       	rjmp	.+1882   	; 0x7a4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ab c3       	rjmp	.+1878   	; 0x7a4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a9 c3       	rjmp	.+1874   	; 0x7a4 <__bad_interrupt>
      52:	00 00       	nop
      54:	a7 c3       	rjmp	.+1870   	; 0x7a4 <__bad_interrupt>
      56:	00 00       	nop
      58:	a5 c3       	rjmp	.+1866   	; 0x7a4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a3 c3       	rjmp	.+1862   	; 0x7a4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a1 c3       	rjmp	.+1858   	; 0x7a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	9f c3       	rjmp	.+1854   	; 0x7a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c3       	rjmp	.+1850   	; 0x7a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c3       	rjmp	.+1846   	; 0x7a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c3       	rjmp	.+1842   	; 0x7a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c3       	rjmp	.+1838   	; 0x7a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c3       	rjmp	.+1834   	; 0x7a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c3       	rjmp	.+1830   	; 0x7a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c3       	rjmp	.+1826   	; 0x7a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c3       	rjmp	.+1822   	; 0x7a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c3       	rjmp	.+1818   	; 0x7a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c3       	rjmp	.+1814   	; 0x7a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c3       	rjmp	.+1810   	; 0x7a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c3       	rjmp	.+1806   	; 0x7a4 <__bad_interrupt>
      96:	00 00       	nop
      98:	85 c3       	rjmp	.+1802   	; 0x7a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	83 c3       	rjmp	.+1798   	; 0x7a4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	81 c3       	rjmp	.+1794   	; 0x7a4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	7f c3       	rjmp	.+1790   	; 0x7a4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7d c3       	rjmp	.+1786   	; 0x7a4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7b c3       	rjmp	.+1782   	; 0x7a4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	79 c3       	rjmp	.+1778   	; 0x7a4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	77 c3       	rjmp	.+1774   	; 0x7a4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	75 c3       	rjmp	.+1770   	; 0x7a4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	73 c3       	rjmp	.+1766   	; 0x7a4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	71 c3       	rjmp	.+1762   	; 0x7a4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	6f c3       	rjmp	.+1758   	; 0x7a4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6d c3       	rjmp	.+1754   	; 0x7a4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6b c3       	rjmp	.+1750   	; 0x7a4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	69 c3       	rjmp	.+1746   	; 0x7a4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	67 c3       	rjmp	.+1742   	; 0x7a4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	65 c3       	rjmp	.+1738   	; 0x7a4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	63 c3       	rjmp	.+1734   	; 0x7a4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	61 c3       	rjmp	.+1730   	; 0x7a4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5f c3       	rjmp	.+1726   	; 0x7a4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	5d c3       	rjmp	.+1722   	; 0x7a4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	5b c3       	rjmp	.+1718   	; 0x7a4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	59 c3       	rjmp	.+1714   	; 0x7a4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	57 c3       	rjmp	.+1710   	; 0x7a4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	55 c3       	rjmp	.+1706   	; 0x7a4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	53 c3       	rjmp	.+1702   	; 0x7a4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	51 c3       	rjmp	.+1698   	; 0x7a4 <__bad_interrupt>
     102:	00 00       	nop
     104:	4f c3       	rjmp	.+1694   	; 0x7a4 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 1d 38 	jmp	0x703a	; 0x703a <__vector_66>
     10c:	4b c3       	rjmp	.+1686   	; 0x7a4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	49 c3       	rjmp	.+1682   	; 0x7a4 <__bad_interrupt>
     112:	00 00       	nop
     114:	47 c3       	rjmp	.+1678   	; 0x7a4 <__bad_interrupt>
     116:	00 00       	nop
     118:	45 c3       	rjmp	.+1674   	; 0x7a4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	43 c3       	rjmp	.+1670   	; 0x7a4 <__bad_interrupt>
     11e:	00 00       	nop
     120:	41 c3       	rjmp	.+1666   	; 0x7a4 <__bad_interrupt>
     122:	00 00       	nop
     124:	3f c3       	rjmp	.+1662   	; 0x7a4 <__bad_interrupt>
     126:	00 00       	nop
     128:	3d c3       	rjmp	.+1658   	; 0x7a4 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	3b c3       	rjmp	.+1654   	; 0x7a4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	39 c3       	rjmp	.+1650   	; 0x7a4 <__bad_interrupt>
     132:	00 00       	nop
     134:	37 c3       	rjmp	.+1646   	; 0x7a4 <__bad_interrupt>
     136:	00 00       	nop
     138:	35 c3       	rjmp	.+1642   	; 0x7a4 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	33 c3       	rjmp	.+1638   	; 0x7a4 <__bad_interrupt>
     13e:	00 00       	nop
     140:	31 c3       	rjmp	.+1634   	; 0x7a4 <__bad_interrupt>
     142:	00 00       	nop
     144:	2f c3       	rjmp	.+1630   	; 0x7a4 <__bad_interrupt>
     146:	00 00       	nop
     148:	2d c3       	rjmp	.+1626   	; 0x7a4 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	2b c3       	rjmp	.+1622   	; 0x7a4 <__bad_interrupt>
     14e:	00 00       	nop
     150:	29 c3       	rjmp	.+1618   	; 0x7a4 <__bad_interrupt>
     152:	00 00       	nop
     154:	27 c3       	rjmp	.+1614   	; 0x7a4 <__bad_interrupt>
     156:	00 00       	nop
     158:	25 c3       	rjmp	.+1610   	; 0x7a4 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	23 c3       	rjmp	.+1606   	; 0x7a4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	97 c5       	rjmp	.+2862   	; 0xc90 <__vector_88>
     162:	00 00       	nop
     164:	1f c3       	rjmp	.+1598   	; 0x7a4 <__bad_interrupt>
     166:	00 00       	nop
     168:	1d c3       	rjmp	.+1594   	; 0x7a4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	1b c3       	rjmp	.+1590   	; 0x7a4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	19 c3       	rjmp	.+1586   	; 0x7a4 <__bad_interrupt>
     172:	00 00       	nop
     174:	17 c3       	rjmp	.+1582   	; 0x7a4 <__bad_interrupt>
     176:	00 00       	nop
     178:	15 c3       	rjmp	.+1578   	; 0x7a4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	13 c3       	rjmp	.+1574   	; 0x7a4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	11 c3       	rjmp	.+1570   	; 0x7a4 <__bad_interrupt>
     182:	00 00       	nop
     184:	0f c3       	rjmp	.+1566   	; 0x7a4 <__bad_interrupt>
     186:	00 00       	nop
     188:	0d c3       	rjmp	.+1562   	; 0x7a4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	0b c3       	rjmp	.+1558   	; 0x7a4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	09 c3       	rjmp	.+1554   	; 0x7a4 <__bad_interrupt>
     192:	00 00       	nop
     194:	07 c3       	rjmp	.+1550   	; 0x7a4 <__bad_interrupt>
     196:	00 00       	nop
     198:	05 c3       	rjmp	.+1546   	; 0x7a4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	03 c3       	rjmp	.+1542   	; 0x7a4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	01 c3       	rjmp	.+1538   	; 0x7a4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ff c2       	rjmp	.+1534   	; 0x7a4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	fd c2       	rjmp	.+1530   	; 0x7a4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	fb c2       	rjmp	.+1526   	; 0x7a4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	f9 c2       	rjmp	.+1522   	; 0x7a4 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	f7 c2       	rjmp	.+1518   	; 0x7a4 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	f5 c2       	rjmp	.+1514   	; 0x7a4 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	f3 c2       	rjmp	.+1510   	; 0x7a4 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	f1 c2       	rjmp	.+1506   	; 0x7a4 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	ef c2       	rjmp	.+1502   	; 0x7a4 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	ed c2       	rjmp	.+1498   	; 0x7a4 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	eb c2       	rjmp	.+1494   	; 0x7a4 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	e9 c2       	rjmp	.+1490   	; 0x7a4 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	e7 c2       	rjmp	.+1486   	; 0x7a4 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	e5 c2       	rjmp	.+1482   	; 0x7a4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	e3 c2       	rjmp	.+1478   	; 0x7a4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	e1 c2       	rjmp	.+1474   	; 0x7a4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	df c2       	rjmp	.+1470   	; 0x7a4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	dd c2       	rjmp	.+1466   	; 0x7a4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	db c2       	rjmp	.+1462   	; 0x7a4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	d9 c2       	rjmp	.+1458   	; 0x7a4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	d7 c2       	rjmp	.+1454   	; 0x7a4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	d5 c2       	rjmp	.+1450   	; 0x7a4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	a3 2f       	mov	r26, r19
     1fe:	34 2f       	mov	r19, r20
     200:	9a 2e       	mov	r9, r26
     202:	b9 2f       	mov	r27, r25
     204:	9a 2e       	mov	r9, r26
     206:	9a 2e       	mov	r9, r26
     208:	9a 2e       	mov	r9, r26
     20a:	f9 2e       	mov	r15, r25
     20c:	9a 2e       	mov	r9, r26
     20e:	9a 2e       	mov	r9, r26
     210:	9a 2e       	mov	r9, r26
     212:	9a 2e       	mov	r9, r26
     214:	9a 2e       	mov	r9, r26
     216:	9a 2e       	mov	r9, r26
     218:	9a 2e       	mov	r9, r26
     21a:	9a 2e       	mov	r9, r26
     21c:	9a 2e       	mov	r9, r26
     21e:	9a 2e       	mov	r9, r26
     220:	9a 2e       	mov	r9, r26
     222:	9a 2e       	mov	r9, r26
     224:	9a 2e       	mov	r9, r26
     226:	9a 2e       	mov	r9, r26
     228:	9a 2e       	mov	r9, r26
     22a:	9a 2e       	mov	r9, r26
     22c:	9a 2e       	mov	r9, r26
     22e:	9a 2e       	mov	r9, r26
     230:	9a 2e       	mov	r9, r26
     232:	9a 2e       	mov	r9, r26
     234:	9a 2e       	mov	r9, r26
     236:	9a 2e       	mov	r9, r26
     238:	9a 2e       	mov	r9, r26
     23a:	9a 2e       	mov	r9, r26
     23c:	9a 2e       	mov	r9, r26
     23e:	9a 2e       	mov	r9, r26
     240:	9a 2e       	mov	r9, r26
     242:	9a 2e       	mov	r9, r26
     244:	9a 2e       	mov	r9, r26
     246:	9a 2e       	mov	r9, r26
     248:	9a 2e       	mov	r9, r26
     24a:	9a 2e       	mov	r9, r26
     24c:	9a 2e       	mov	r9, r26
     24e:	9a 2e       	mov	r9, r26
     250:	9a 2e       	mov	r9, r26
     252:	9a 2e       	mov	r9, r26
     254:	9a 2e       	mov	r9, r26
     256:	9a 2e       	mov	r9, r26
     258:	9a 2e       	mov	r9, r26
     25a:	9a 2e       	mov	r9, r26
     25c:	9a 2e       	mov	r9, r26
     25e:	9a 2e       	mov	r9, r26
     260:	2e 2f       	mov	r18, r30
     262:	02 2f       	mov	r16, r18
     264:	c8 2e       	mov	r12, r24
     266:	b2 2e       	mov	r11, r18
     268:	a8 2e       	mov	r10, r24

0000026a <__trampolines_end>:
     26a:	00 00       	nop
     26c:	00 00       	nop
     26e:	00 3e       	cpi	r16, 0xE0	; 224
     270:	5b 4f       	sbci	r21, 0xFB	; 251
     272:	5b 3e       	cpi	r21, 0xEB	; 235
     274:	3e 6b       	ori	r19, 0xBE	; 190
     276:	4f 6b       	ori	r20, 0xBF	; 191
     278:	3e 1c       	adc	r3, r14
     27a:	3e 7c       	andi	r19, 0xCE	; 206
     27c:	3e 1c       	adc	r3, r14
     27e:	18 3c       	cpi	r17, 0xC8	; 200
     280:	7e 3c       	cpi	r23, 0xCE	; 206
     282:	18 1c       	adc	r1, r8
     284:	57 7d       	andi	r21, 0xD7	; 215
     286:	57 1c       	adc	r5, r7
     288:	1c 5e       	subi	r17, 0xEC	; 236
     28a:	7f 5e       	subi	r23, 0xEF	; 239
     28c:	1c 00       	.word	0x001c	; ????
     28e:	18 3c       	cpi	r17, 0xC8	; 200
     290:	18 00       	.word	0x0018	; ????
     292:	ff e7       	ldi	r31, 0x7F	; 127
     294:	c3 e7       	ldi	r28, 0x73	; 115
     296:	ff 00       	.word	0x00ff	; ????
     298:	18 24       	eor	r1, r8
     29a:	18 00       	.word	0x0018	; ????
     29c:	ff e7       	ldi	r31, 0x7F	; 127
     29e:	db e7       	ldi	r29, 0x7B	; 123
     2a0:	ff 30       	cpi	r31, 0x0F	; 15
     2a2:	48 3a       	cpi	r20, 0xA8	; 168
     2a4:	06 0e       	add	r0, r22
     2a6:	26 29       	or	r18, r6
     2a8:	79 29       	or	r23, r9
     2aa:	26 40       	sbci	r18, 0x06	; 6
     2ac:	7f 05       	cpc	r23, r15
     2ae:	05 07       	cpc	r16, r21
     2b0:	40 7f       	andi	r20, 0xF0	; 240
     2b2:	05 25       	eor	r16, r5
     2b4:	3f 5a       	subi	r19, 0xAF	; 175
     2b6:	3c e7       	ldi	r19, 0x7C	; 124
     2b8:	3c 5a       	subi	r19, 0xAC	; 172
     2ba:	7f 3e       	cpi	r23, 0xEF	; 239
     2bc:	1c 1c       	adc	r1, r12
     2be:	08 08       	sbc	r0, r8
     2c0:	1c 1c       	adc	r1, r12
     2c2:	3e 7f       	andi	r19, 0xFE	; 254
     2c4:	14 22       	and	r1, r20
     2c6:	7f 22       	and	r7, r31
     2c8:	14 5f       	subi	r17, 0xF4	; 244
     2ca:	5f 00       	.word	0x005f	; ????
     2cc:	5f 5f       	subi	r21, 0xFF	; 255
     2ce:	06 09       	sbc	r16, r6
     2d0:	7f 01       	movw	r14, r30
     2d2:	7f 00       	.word	0x007f	; ????
     2d4:	66 89       	ldd	r22, Z+22	; 0x16
     2d6:	95 6a       	ori	r25, 0xA5	; 165
     2d8:	60 60       	ori	r22, 0x00	; 0
     2da:	60 60       	ori	r22, 0x00	; 0
     2dc:	60 94       	com	r6
     2de:	a2 ff       	sbrs	r26, 2
     2e0:	a2 94       	swap	r10
     2e2:	08 04       	cpc	r0, r8
     2e4:	7e 04       	cpc	r7, r14
     2e6:	08 10       	cpse	r0, r8
     2e8:	20 7e       	andi	r18, 0xE0	; 224
     2ea:	20 10       	cpse	r2, r0
     2ec:	08 08       	sbc	r0, r8
     2ee:	2a 1c       	adc	r2, r10
     2f0:	08 08       	sbc	r0, r8
     2f2:	1c 2a       	or	r1, r28
     2f4:	08 08       	sbc	r0, r8
     2f6:	1e 10       	cpse	r1, r14
     2f8:	10 10       	cpse	r1, r0
     2fa:	10 0c       	add	r1, r0
     2fc:	1e 0c       	add	r1, r14
     2fe:	1e 0c       	add	r1, r14
     300:	30 38       	cpi	r19, 0x80	; 128
     302:	3e 38       	cpi	r19, 0x8E	; 142
     304:	30 06       	cpc	r3, r16
     306:	0e 3e       	cpi	r16, 0xEE	; 238
     308:	0e 06       	cpc	r0, r30
     30a:	00 00       	nop
     30c:	00 00       	nop
     30e:	00 00       	nop
     310:	00 5f       	subi	r16, 0xF0	; 240
     312:	00 00       	nop
     314:	00 07       	cpc	r16, r16
     316:	00 07       	cpc	r16, r16
     318:	00 14       	cp	r0, r0
     31a:	7f 14       	cp	r7, r15
     31c:	7f 14       	cp	r7, r15
     31e:	24 2a       	or	r2, r20
     320:	7f 2a       	or	r7, r31
     322:	12 23       	and	r17, r18
     324:	13 08       	sbc	r1, r3
     326:	64 62       	ori	r22, 0x24	; 36
     328:	36 49       	sbci	r19, 0x96	; 150
     32a:	56 20       	and	r5, r6
     32c:	50 00       	.word	0x0050	; ????
     32e:	08 07       	cpc	r16, r24
     330:	03 00       	.word	0x0003	; ????
     332:	00 1c       	adc	r0, r0
     334:	22 41       	sbci	r18, 0x12	; 18
     336:	00 00       	nop
     338:	41 22       	and	r4, r17
     33a:	1c 00       	.word	0x001c	; ????
     33c:	2a 1c       	adc	r2, r10
     33e:	7f 1c       	adc	r7, r15
     340:	2a 08       	sbc	r2, r10
     342:	08 3e       	cpi	r16, 0xE8	; 232
     344:	08 08       	sbc	r0, r8
     346:	00 80       	ld	r0, Z
     348:	70 30       	cpi	r23, 0x00	; 0
     34a:	00 08       	sbc	r0, r0
     34c:	08 08       	sbc	r0, r8
     34e:	08 08       	sbc	r0, r8
     350:	00 00       	nop
     352:	60 60       	ori	r22, 0x00	; 0
     354:	00 20       	and	r0, r0
     356:	10 08       	sbc	r1, r0
     358:	04 02       	muls	r16, r20
     35a:	3e 51       	subi	r19, 0x1E	; 30
     35c:	49 45       	sbci	r20, 0x59	; 89
     35e:	3e 00       	.word	0x003e	; ????
     360:	42 7f       	andi	r20, 0xF2	; 242
     362:	40 00       	.word	0x0040	; ????
     364:	72 49       	sbci	r23, 0x92	; 146
     366:	49 49       	sbci	r20, 0x99	; 153
     368:	46 21       	and	r20, r6
     36a:	41 49       	sbci	r20, 0x91	; 145
     36c:	4d 33       	cpi	r20, 0x3D	; 61
     36e:	18 14       	cp	r1, r8
     370:	12 7f       	andi	r17, 0xF2	; 242
     372:	10 27       	eor	r17, r16
     374:	45 45       	sbci	r20, 0x55	; 85
     376:	45 39       	cpi	r20, 0x95	; 149
     378:	3c 4a       	sbci	r19, 0xAC	; 172
     37a:	49 49       	sbci	r20, 0x99	; 153
     37c:	31 41       	sbci	r19, 0x11	; 17
     37e:	21 11       	cpse	r18, r1
     380:	09 07       	cpc	r16, r25
     382:	36 49       	sbci	r19, 0x96	; 150
     384:	49 49       	sbci	r20, 0x99	; 153
     386:	36 46       	sbci	r19, 0x66	; 102
     388:	49 49       	sbci	r20, 0x99	; 153
     38a:	29 1e       	adc	r2, r25
     38c:	00 00       	nop
     38e:	14 00       	.word	0x0014	; ????
     390:	00 00       	nop
     392:	40 34       	cpi	r20, 0x40	; 64
     394:	00 00       	nop
     396:	00 08       	sbc	r0, r0
     398:	14 22       	and	r1, r20
     39a:	41 14       	cp	r4, r1
     39c:	14 14       	cp	r1, r4
     39e:	14 14       	cp	r1, r4
     3a0:	00 41       	sbci	r16, 0x10	; 16
     3a2:	22 14       	cp	r2, r2
     3a4:	08 02       	muls	r16, r24
     3a6:	01 59       	subi	r16, 0x91	; 145
     3a8:	09 06       	cpc	r0, r25
     3aa:	3e 41       	sbci	r19, 0x1E	; 30
     3ac:	5d 59       	subi	r21, 0x9D	; 157
     3ae:	4e 7c       	andi	r20, 0xCE	; 206
     3b0:	12 11       	cpse	r17, r2
     3b2:	12 7c       	andi	r17, 0xC2	; 194
     3b4:	7f 49       	sbci	r23, 0x9F	; 159
     3b6:	49 49       	sbci	r20, 0x99	; 153
     3b8:	36 3e       	cpi	r19, 0xE6	; 230
     3ba:	41 41       	sbci	r20, 0x11	; 17
     3bc:	41 22       	and	r4, r17
     3be:	7f 41       	sbci	r23, 0x1F	; 31
     3c0:	41 41       	sbci	r20, 0x11	; 17
     3c2:	3e 7f       	andi	r19, 0xFE	; 254
     3c4:	49 49       	sbci	r20, 0x99	; 153
     3c6:	49 41       	sbci	r20, 0x19	; 25
     3c8:	7f 09       	sbc	r23, r15
     3ca:	09 09       	sbc	r16, r9
     3cc:	01 3e       	cpi	r16, 0xE1	; 225
     3ce:	41 41       	sbci	r20, 0x11	; 17
     3d0:	51 73       	andi	r21, 0x31	; 49
     3d2:	7f 08       	sbc	r7, r15
     3d4:	08 08       	sbc	r0, r8
     3d6:	7f 00       	.word	0x007f	; ????
     3d8:	41 7f       	andi	r20, 0xF1	; 241
     3da:	41 00       	.word	0x0041	; ????
     3dc:	20 40       	sbci	r18, 0x00	; 0
     3de:	41 3f       	cpi	r20, 0xF1	; 241
     3e0:	01 7f       	andi	r16, 0xF1	; 241
     3e2:	08 14       	cp	r0, r8
     3e4:	22 41       	sbci	r18, 0x12	; 18
     3e6:	7f 40       	sbci	r23, 0x0F	; 15
     3e8:	40 40       	sbci	r20, 0x00	; 0
     3ea:	40 7f       	andi	r20, 0xF0	; 240
     3ec:	02 1c       	adc	r0, r2
     3ee:	02 7f       	andi	r16, 0xF2	; 242
     3f0:	7f 04       	cpc	r7, r15
     3f2:	08 10       	cpse	r0, r8
     3f4:	7f 3e       	cpi	r23, 0xEF	; 239
     3f6:	41 41       	sbci	r20, 0x11	; 17
     3f8:	41 3e       	cpi	r20, 0xE1	; 225
     3fa:	7f 09       	sbc	r23, r15
     3fc:	09 09       	sbc	r16, r9
     3fe:	06 3e       	cpi	r16, 0xE6	; 230
     400:	41 51       	subi	r20, 0x11	; 17
     402:	21 5e       	subi	r18, 0xE1	; 225
     404:	7f 09       	sbc	r23, r15
     406:	19 29       	or	r17, r9
     408:	46 26       	eor	r4, r22
     40a:	49 49       	sbci	r20, 0x99	; 153
     40c:	49 32       	cpi	r20, 0x29	; 41
     40e:	03 01       	movw	r0, r6
     410:	7f 01       	movw	r14, r30
     412:	03 3f       	cpi	r16, 0xF3	; 243
     414:	40 40       	sbci	r20, 0x00	; 0
     416:	40 3f       	cpi	r20, 0xF0	; 240
     418:	1f 20       	and	r1, r15
     41a:	40 20       	and	r4, r0
     41c:	1f 3f       	cpi	r17, 0xFF	; 255
     41e:	40 38       	cpi	r20, 0x80	; 128
     420:	40 3f       	cpi	r20, 0xF0	; 240
     422:	63 14       	cp	r6, r3
     424:	08 14       	cp	r0, r8
     426:	63 03       	mulsu	r22, r19
     428:	04 78       	andi	r16, 0x84	; 132
     42a:	04 03       	mulsu	r16, r20
     42c:	61 59       	subi	r22, 0x91	; 145
     42e:	49 4d       	sbci	r20, 0xD9	; 217
     430:	43 00       	.word	0x0043	; ????
     432:	7f 41       	sbci	r23, 0x1F	; 31
     434:	41 41       	sbci	r20, 0x11	; 17
     436:	02 04       	cpc	r0, r2
     438:	08 10       	cpse	r0, r8
     43a:	20 00       	.word	0x0020	; ????
     43c:	41 41       	sbci	r20, 0x11	; 17
     43e:	41 7f       	andi	r20, 0xF1	; 241
     440:	04 02       	muls	r16, r20
     442:	01 02       	muls	r16, r17
     444:	04 40       	sbci	r16, 0x04	; 4
     446:	40 40       	sbci	r20, 0x00	; 0
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	00 03       	mulsu	r16, r16
     44c:	07 08       	sbc	r0, r7
     44e:	00 20       	and	r0, r0
     450:	54 54       	subi	r21, 0x44	; 68
     452:	78 40       	sbci	r23, 0x08	; 8
     454:	7f 28       	or	r7, r15
     456:	44 44       	sbci	r20, 0x44	; 68
     458:	38 38       	cpi	r19, 0x88	; 136
     45a:	44 44       	sbci	r20, 0x44	; 68
     45c:	44 28       	or	r4, r4
     45e:	38 44       	sbci	r19, 0x48	; 72
     460:	44 28       	or	r4, r4
     462:	7f 38       	cpi	r23, 0x8F	; 143
     464:	54 54       	subi	r21, 0x44	; 68
     466:	54 18       	sub	r5, r4
     468:	00 08       	sbc	r0, r0
     46a:	7e 09       	sbc	r23, r14
     46c:	02 18       	sub	r0, r2
     46e:	a4 a4       	ldd	r10, Z+44	; 0x2c
     470:	9c 78       	andi	r25, 0x8C	; 140
     472:	7f 08       	sbc	r7, r15
     474:	04 04       	cpc	r0, r4
     476:	78 00       	.word	0x0078	; ????
     478:	44 7d       	andi	r20, 0xD4	; 212
     47a:	40 00       	.word	0x0040	; ????
     47c:	20 40       	sbci	r18, 0x00	; 0
     47e:	40 3d       	cpi	r20, 0xD0	; 208
     480:	00 7f       	andi	r16, 0xF0	; 240
     482:	10 28       	or	r1, r0
     484:	44 00       	.word	0x0044	; ????
     486:	00 41       	sbci	r16, 0x10	; 16
     488:	7f 40       	sbci	r23, 0x0F	; 15
     48a:	00 7c       	andi	r16, 0xC0	; 192
     48c:	04 78       	andi	r16, 0x84	; 132
     48e:	04 78       	andi	r16, 0x84	; 132
     490:	7c 08       	sbc	r7, r12
     492:	04 04       	cpc	r0, r4
     494:	78 38       	cpi	r23, 0x88	; 136
     496:	44 44       	sbci	r20, 0x44	; 68
     498:	44 38       	cpi	r20, 0x84	; 132
     49a:	fc 18       	sub	r15, r12
     49c:	24 24       	eor	r2, r4
     49e:	18 18       	sub	r1, r8
     4a0:	24 24       	eor	r2, r4
     4a2:	18 fc       	.word	0xfc18	; ????
     4a4:	7c 08       	sbc	r7, r12
     4a6:	04 04       	cpc	r0, r4
     4a8:	08 48       	sbci	r16, 0x88	; 136
     4aa:	54 54       	subi	r21, 0x44	; 68
     4ac:	54 24       	eor	r5, r4
     4ae:	04 04       	cpc	r0, r4
     4b0:	3f 44       	sbci	r19, 0x4F	; 79
     4b2:	24 3c       	cpi	r18, 0xC4	; 196
     4b4:	40 40       	sbci	r20, 0x00	; 0
     4b6:	20 7c       	andi	r18, 0xC0	; 192
     4b8:	1c 20       	and	r1, r12
     4ba:	40 20       	and	r4, r0
     4bc:	1c 3c       	cpi	r17, 0xCC	; 204
     4be:	40 30       	cpi	r20, 0x00	; 0
     4c0:	40 3c       	cpi	r20, 0xC0	; 192
     4c2:	44 28       	or	r4, r4
     4c4:	10 28       	or	r1, r0
     4c6:	44 4c       	sbci	r20, 0xC4	; 196
     4c8:	90 90 90 7c 	lds	r9, 0x7C90
     4cc:	44 64       	ori	r20, 0x44	; 68
     4ce:	54 4c       	sbci	r21, 0xC4	; 196
     4d0:	44 00       	.word	0x0044	; ????
     4d2:	08 36       	cpi	r16, 0x68	; 104
     4d4:	41 00       	.word	0x0041	; ????
     4d6:	00 00       	nop
     4d8:	77 00       	.word	0x0077	; ????
     4da:	00 00       	nop
     4dc:	41 36       	cpi	r20, 0x61	; 97
     4de:	08 00       	.word	0x0008	; ????
     4e0:	02 01       	movw	r0, r4
     4e2:	02 04       	cpc	r0, r2
     4e4:	02 3c       	cpi	r16, 0xC2	; 194
     4e6:	26 23       	and	r18, r22
     4e8:	26 3c       	cpi	r18, 0xC6	; 198
     4ea:	1e a1       	ldd	r17, Y+38	; 0x26
     4ec:	a1 61       	ori	r26, 0x11	; 17
     4ee:	12 3a       	cpi	r17, 0xA2	; 162
     4f0:	40 40       	sbci	r20, 0x00	; 0
     4f2:	20 7a       	andi	r18, 0xA0	; 160
     4f4:	38 54       	subi	r19, 0x48	; 72
     4f6:	54 55       	subi	r21, 0x54	; 84
     4f8:	59 21       	and	r21, r9
     4fa:	55 55       	subi	r21, 0x55	; 85
     4fc:	79 41       	sbci	r23, 0x19	; 25
     4fe:	21 54       	subi	r18, 0x41	; 65
     500:	54 78       	andi	r21, 0x84	; 132
     502:	41 21       	and	r20, r1
     504:	55 54       	subi	r21, 0x45	; 69
     506:	78 40       	sbci	r23, 0x08	; 8
     508:	20 54       	subi	r18, 0x40	; 64
     50a:	55 79       	andi	r21, 0x95	; 149
     50c:	40 0c       	add	r4, r0
     50e:	1e 52       	subi	r17, 0x2E	; 46
     510:	72 12       	cpse	r7, r18
     512:	39 55       	subi	r19, 0x59	; 89
     514:	55 55       	subi	r21, 0x55	; 85
     516:	59 39       	cpi	r21, 0x99	; 153
     518:	54 54       	subi	r21, 0x44	; 68
     51a:	54 59       	subi	r21, 0x94	; 148
     51c:	39 55       	subi	r19, 0x59	; 89
     51e:	54 54       	subi	r21, 0x44	; 68
     520:	58 00       	.word	0x0058	; ????
     522:	00 45       	sbci	r16, 0x50	; 80
     524:	7c 41       	sbci	r23, 0x1C	; 28
     526:	00 02       	muls	r16, r16
     528:	45 7d       	andi	r20, 0xD5	; 213
     52a:	42 00       	.word	0x0042	; ????
     52c:	01 45       	sbci	r16, 0x51	; 81
     52e:	7c 40       	sbci	r23, 0x0C	; 12
     530:	f0 29       	or	r31, r0
     532:	24 29       	or	r18, r4
     534:	f0 f0       	brcs	.+60     	; 0x572 <__trampolines_end+0x308>
     536:	28 25       	eor	r18, r8
     538:	28 f0       	brcs	.+10     	; 0x544 <__trampolines_end+0x2da>
     53a:	7c 54       	subi	r23, 0x4C	; 76
     53c:	55 45       	sbci	r21, 0x55	; 85
     53e:	00 20       	and	r0, r0
     540:	54 54       	subi	r21, 0x44	; 68
     542:	7c 54       	subi	r23, 0x4C	; 76
     544:	7c 0a       	sbc	r7, r28
     546:	09 7f       	andi	r16, 0xF9	; 249
     548:	49 32       	cpi	r20, 0x29	; 41
     54a:	49 49       	sbci	r20, 0x99	; 153
     54c:	49 32       	cpi	r20, 0x29	; 41
     54e:	32 48       	sbci	r19, 0x82	; 130
     550:	48 48       	sbci	r20, 0x88	; 136
     552:	32 32       	cpi	r19, 0x22	; 34
     554:	4a 48       	sbci	r20, 0x8A	; 138
     556:	48 30       	cpi	r20, 0x08	; 8
     558:	3a 41       	sbci	r19, 0x1A	; 26
     55a:	41 21       	and	r20, r1
     55c:	7a 3a       	cpi	r23, 0xAA	; 170
     55e:	42 40       	sbci	r20, 0x02	; 2
     560:	20 78       	andi	r18, 0x80	; 128
     562:	00 9d       	mul	r16, r0
     564:	a0 a0       	ldd	r10, Z+32	; 0x20
     566:	7d 39       	cpi	r23, 0x9D	; 157
     568:	44 44       	sbci	r20, 0x44	; 68
     56a:	44 39       	cpi	r20, 0x94	; 148
     56c:	3d 40       	sbci	r19, 0x0D	; 13
     56e:	40 40       	sbci	r20, 0x00	; 0
     570:	3d 3c       	cpi	r19, 0xCD	; 205
     572:	24 ff       	sbrs	r18, 4
     574:	24 24       	eor	r2, r4
     576:	48 7e       	andi	r20, 0xE8	; 232
     578:	49 43       	sbci	r20, 0x39	; 57
     57a:	66 2b       	or	r22, r22
     57c:	2f fc       	.word	0xfc2f	; ????
     57e:	2f 2b       	or	r18, r31
     580:	ff 09       	sbc	r31, r15
     582:	29 f6       	brne	.-118    	; 0x50e <__trampolines_end+0x2a4>
     584:	20 c0       	rjmp	.+64     	; 0x5c6 <__trampolines_end+0x35c>
     586:	88 7e       	andi	r24, 0xE8	; 232
     588:	09 03       	fmul	r16, r17
     58a:	20 54       	subi	r18, 0x40	; 64
     58c:	54 79       	andi	r21, 0x94	; 148
     58e:	41 00       	.word	0x0041	; ????
     590:	00 44       	sbci	r16, 0x40	; 64
     592:	7d 41       	sbci	r23, 0x1D	; 29
     594:	30 48       	sbci	r19, 0x80	; 128
     596:	48 4a       	sbci	r20, 0xA8	; 168
     598:	32 38       	cpi	r19, 0x82	; 130
     59a:	40 40       	sbci	r20, 0x00	; 0
     59c:	22 7a       	andi	r18, 0xA2	; 162
     59e:	00 7a       	andi	r16, 0xA0	; 160
     5a0:	0a 0a       	sbc	r0, r26
     5a2:	72 7d       	andi	r23, 0xD2	; 210
     5a4:	0d 19       	sub	r16, r13
     5a6:	31 7d       	andi	r19, 0xD1	; 209
     5a8:	26 29       	or	r18, r6
     5aa:	29 2f       	mov	r18, r25
     5ac:	28 26       	eor	r2, r24
     5ae:	29 29       	or	r18, r9
     5b0:	29 26       	eor	r2, r25
     5b2:	30 48       	sbci	r19, 0x80	; 128
     5b4:	4d 40       	sbci	r20, 0x0D	; 13
     5b6:	20 38       	cpi	r18, 0x80	; 128
     5b8:	08 08       	sbc	r0, r8
     5ba:	08 08       	sbc	r0, r8
     5bc:	08 08       	sbc	r0, r8
     5be:	08 08       	sbc	r0, r8
     5c0:	38 2f       	mov	r19, r24
     5c2:	10 c8       	rjmp	.-4064   	; 0xfffff5e4 <__eeprom_end+0xff7ef5e4>
     5c4:	ac ba       	out	0x1c, r10	; 28
     5c6:	2f 10       	cpse	r2, r15
     5c8:	28 34       	cpi	r18, 0x48	; 72
     5ca:	fa 00       	.word	0x00fa	; ????
     5cc:	00 7b       	andi	r16, 0xB0	; 176
     5ce:	00 00       	nop
     5d0:	08 14       	cp	r0, r8
     5d2:	2a 14       	cp	r2, r10
     5d4:	22 22       	and	r2, r18
     5d6:	14 2a       	or	r1, r20
     5d8:	14 08       	sbc	r1, r4
     5da:	aa 00       	.word	0x00aa	; ????
     5dc:	55 00       	.word	0x0055	; ????
     5de:	aa aa       	std	Y+50, r10	; 0x32
     5e0:	55 aa       	std	Z+53, r5	; 0x35
     5e2:	55 aa       	std	Z+53, r5	; 0x35
     5e4:	00 00       	nop
     5e6:	00 ff       	sbrs	r16, 0
     5e8:	00 10       	cpse	r0, r0
     5ea:	10 10       	cpse	r1, r0
     5ec:	ff 00       	.word	0x00ff	; ????
     5ee:	14 14       	cp	r1, r4
     5f0:	14 ff       	sbrs	r17, 4
     5f2:	00 10       	cpse	r0, r0
     5f4:	10 ff       	sbrs	r17, 0
     5f6:	00 ff       	sbrs	r16, 0
     5f8:	10 10       	cpse	r1, r0
     5fa:	f0 10       	cpse	r15, r0
     5fc:	f0 14       	cp	r15, r0
     5fe:	14 14       	cp	r1, r4
     600:	fc 00       	.word	0x00fc	; ????
     602:	14 14       	cp	r1, r4
     604:	f7 00       	.word	0x00f7	; ????
     606:	ff 00       	.word	0x00ff	; ????
     608:	00 ff       	sbrs	r16, 0
     60a:	00 ff       	sbrs	r16, 0
     60c:	14 14       	cp	r1, r4
     60e:	f4 04       	cpc	r15, r4
     610:	fc 14       	cp	r15, r12
     612:	14 17       	cp	r17, r20
     614:	10 1f       	adc	r17, r16
     616:	10 10       	cpse	r1, r0
     618:	1f 10       	cpse	r1, r15
     61a:	1f 14       	cp	r1, r15
     61c:	14 14       	cp	r1, r4
     61e:	1f 00       	.word	0x001f	; ????
     620:	10 10       	cpse	r1, r0
     622:	10 f0       	brcs	.+4      	; 0x628 <__trampolines_end+0x3be>
     624:	00 00       	nop
     626:	00 00       	nop
     628:	1f 10       	cpse	r1, r15
     62a:	10 10       	cpse	r1, r0
     62c:	10 1f       	adc	r17, r16
     62e:	10 10       	cpse	r1, r0
     630:	10 10       	cpse	r1, r0
     632:	f0 10       	cpse	r15, r0
     634:	00 00       	nop
     636:	00 ff       	sbrs	r16, 0
     638:	10 10       	cpse	r1, r0
     63a:	10 10       	cpse	r1, r0
     63c:	10 10       	cpse	r1, r0
     63e:	10 10       	cpse	r1, r0
     640:	10 ff       	sbrs	r17, 0
     642:	10 00       	.word	0x0010	; ????
     644:	00 00       	nop
     646:	ff 14       	cp	r15, r15
     648:	00 00       	nop
     64a:	ff 00       	.word	0x00ff	; ????
     64c:	ff 00       	.word	0x00ff	; ????
     64e:	00 1f       	adc	r16, r16
     650:	10 17       	cp	r17, r16
     652:	00 00       	nop
     654:	fc 04       	cpc	r15, r12
     656:	f4 14       	cp	r15, r4
     658:	14 17       	cp	r17, r20
     65a:	10 17       	cp	r17, r16
     65c:	14 14       	cp	r1, r4
     65e:	f4 04       	cpc	r15, r4
     660:	f4 00       	.word	0x00f4	; ????
     662:	00 ff       	sbrs	r16, 0
     664:	00 f7       	brcc	.-64     	; 0x626 <__trampolines_end+0x3bc>
     666:	14 14       	cp	r1, r4
     668:	14 14       	cp	r1, r4
     66a:	14 14       	cp	r1, r4
     66c:	14 f7       	brge	.-60     	; 0x632 <__trampolines_end+0x3c8>
     66e:	00 f7       	brcc	.-64     	; 0x630 <__trampolines_end+0x3c6>
     670:	14 14       	cp	r1, r4
     672:	14 17       	cp	r17, r20
     674:	14 10       	cpse	r1, r4
     676:	10 1f       	adc	r17, r16
     678:	10 1f       	adc	r17, r16
     67a:	14 14       	cp	r1, r4
     67c:	14 f4       	brge	.+4      	; 0x682 <__trampolines_end+0x418>
     67e:	14 10       	cpse	r1, r4
     680:	10 f0       	brcs	.+4      	; 0x686 <__trampolines_end+0x41c>
     682:	10 f0       	brcs	.+4      	; 0x688 <__trampolines_end+0x41e>
     684:	00 00       	nop
     686:	1f 10       	cpse	r1, r15
     688:	1f 00       	.word	0x001f	; ????
     68a:	00 00       	nop
     68c:	1f 14       	cp	r1, r15
     68e:	00 00       	nop
     690:	00 fc       	sbrc	r0, 0
     692:	14 00       	.word	0x0014	; ????
     694:	00 f0       	brcs	.+0      	; 0x696 <__trampolines_end+0x42c>
     696:	10 f0       	brcs	.+4      	; 0x69c <__trampolines_end+0x432>
     698:	10 10       	cpse	r1, r0
     69a:	ff 10       	cpse	r15, r15
     69c:	ff 14       	cp	r15, r15
     69e:	14 14       	cp	r1, r4
     6a0:	ff 14       	cp	r15, r15
     6a2:	10 10       	cpse	r1, r0
     6a4:	10 1f       	adc	r17, r16
     6a6:	00 00       	nop
     6a8:	00 00       	nop
     6aa:	f0 10       	cpse	r15, r0
     6ac:	ff ff       	.word	0xffff	; ????
     6ae:	ff ff       	.word	0xffff	; ????
     6b0:	ff f0       	brie	.+62     	; 0x6f0 <__trampolines_end+0x486>
     6b2:	f0 f0       	brcs	.+60     	; 0x6f0 <__trampolines_end+0x486>
     6b4:	f0 f0       	brcs	.+60     	; 0x6f2 <__trampolines_end+0x488>
     6b6:	ff ff       	.word	0xffff	; ????
     6b8:	ff 00       	.word	0x00ff	; ????
     6ba:	00 00       	nop
     6bc:	00 00       	nop
     6be:	ff ff       	.word	0xffff	; ????
     6c0:	0f 0f       	add	r16, r31
     6c2:	0f 0f       	add	r16, r31
     6c4:	0f 38       	cpi	r16, 0x8F	; 143
     6c6:	44 44       	sbci	r20, 0x44	; 68
     6c8:	38 44       	sbci	r19, 0x48	; 72
     6ca:	7c 2a       	or	r7, r28
     6cc:	2a 3e       	cpi	r18, 0xEA	; 234
     6ce:	14 7e       	andi	r17, 0xE4	; 228
     6d0:	02 02       	muls	r16, r18
     6d2:	06 06       	cpc	r0, r22
     6d4:	02 7e       	andi	r16, 0xE2	; 226
     6d6:	02 7e       	andi	r16, 0xE2	; 226
     6d8:	02 63       	ori	r16, 0x32	; 50
     6da:	55 49       	sbci	r21, 0x95	; 149
     6dc:	41 63       	ori	r20, 0x31	; 49
     6de:	38 44       	sbci	r19, 0x48	; 72
     6e0:	44 3c       	cpi	r20, 0xC4	; 196
     6e2:	04 40       	sbci	r16, 0x04	; 4
     6e4:	7e 20       	and	r7, r14
     6e6:	1e 20       	and	r1, r14
     6e8:	06 02       	muls	r16, r22
     6ea:	7e 02       	muls	r23, r30
     6ec:	02 99       	sbic	0x00, 2	; 0
     6ee:	a5 e7       	ldi	r26, 0x75	; 117
     6f0:	a5 99       	sbic	0x14, 5	; 20
     6f2:	1c 2a       	or	r1, r28
     6f4:	49 2a       	or	r4, r25
     6f6:	1c 4c       	sbci	r17, 0xCC	; 204
     6f8:	72 01       	movw	r14, r4
     6fa:	72 4c       	sbci	r23, 0xC2	; 194
     6fc:	30 4a       	sbci	r19, 0xA0	; 160
     6fe:	4d 4d       	sbci	r20, 0xDD	; 221
     700:	30 30       	cpi	r19, 0x00	; 0
     702:	48 78       	andi	r20, 0x88	; 136
     704:	48 30       	cpi	r20, 0x08	; 8
     706:	bc 62       	ori	r27, 0x2C	; 44
     708:	5a 46       	sbci	r21, 0x6A	; 106
     70a:	3d 3e       	cpi	r19, 0xED	; 237
     70c:	49 49       	sbci	r20, 0x99	; 153
     70e:	49 00       	.word	0x0049	; ????
     710:	7e 01       	movw	r14, r28
     712:	01 01       	movw	r0, r2
     714:	7e 2a       	or	r7, r30
     716:	2a 2a       	or	r2, r26
     718:	2a 2a       	or	r2, r26
     71a:	44 44       	sbci	r20, 0x44	; 68
     71c:	5f 44       	sbci	r21, 0x4F	; 79
     71e:	44 40       	sbci	r20, 0x04	; 4
     720:	51 4a       	sbci	r21, 0xA1	; 161
     722:	44 40       	sbci	r20, 0x04	; 4
     724:	40 44       	sbci	r20, 0x40	; 64
     726:	4a 51       	subi	r20, 0x1A	; 26
     728:	40 00       	.word	0x0040	; ????
     72a:	00 ff       	sbrs	r16, 0
     72c:	01 03       	mulsu	r16, r17
     72e:	e0 80       	ld	r14, Z
     730:	ff 00       	.word	0x00ff	; ????
     732:	00 08       	sbc	r0, r0
     734:	08 6b       	ori	r16, 0xB8	; 184
     736:	6b 08       	sbc	r6, r11
     738:	36 12       	cpse	r3, r22
     73a:	36 24       	eor	r3, r6
     73c:	36 06       	cpc	r3, r22
     73e:	0f 09       	sbc	r16, r15
     740:	0f 06       	cpc	r0, r31
     742:	00 00       	nop
     744:	18 18       	sub	r1, r8
     746:	00 00       	nop
     748:	00 10       	cpse	r0, r0
     74a:	10 00       	.word	0x0010	; ????
     74c:	30 40       	sbci	r19, 0x00	; 0
     74e:	ff 01       	movw	r30, r30
     750:	01 00       	.word	0x0001	; ????
     752:	1f 01       	movw	r2, r30
     754:	01 1e       	adc	r0, r17
     756:	00 19       	sub	r16, r0
     758:	1d 17       	cp	r17, r29
     75a:	12 00       	.word	0x0012	; ????
     75c:	3c 3c       	cpi	r19, 0xCC	; 204
     75e:	3c 3c       	cpi	r19, 0xCC	; 204
     760:	00 00       	nop
     762:	00 00       	nop
	...

00000766 <__ctors_end>:
     766:	11 24       	eor	r1, r1
     768:	1f be       	out	0x3f, r1	; 63
     76a:	cf ef       	ldi	r28, 0xFF	; 255
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	df e2       	ldi	r29, 0x2F	; 47
     770:	de bf       	out	0x3e, r29	; 62

00000772 <__do_copy_data>:
     772:	11 e2       	ldi	r17, 0x21	; 33
     774:	a0 e0       	ldi	r26, 0x00	; 0
     776:	b0 e2       	ldi	r27, 0x20	; 32
     778:	e8 e7       	ldi	r30, 0x78	; 120
     77a:	f4 e8       	ldi	r31, 0x84	; 132
     77c:	00 e0       	ldi	r16, 0x00	; 0
     77e:	0b bf       	out	0x3b, r16	; 59
     780:	02 c0       	rjmp	.+4      	; 0x786 <__do_copy_data+0x14>
     782:	07 90       	elpm	r0, Z+
     784:	0d 92       	st	X+, r0
     786:	ae 3a       	cpi	r26, 0xAE	; 174
     788:	b1 07       	cpc	r27, r17
     78a:	d9 f7       	brne	.-10     	; 0x782 <__do_copy_data+0x10>

0000078c <__do_clear_bss>:
     78c:	2d e2       	ldi	r18, 0x2D	; 45
     78e:	ae ea       	ldi	r26, 0xAE	; 174
     790:	b1 e2       	ldi	r27, 0x21	; 33
     792:	01 c0       	rjmp	.+2      	; 0x796 <.do_clear_bss_start>

00000794 <.do_clear_bss_loop>:
     794:	1d 92       	st	X+, r1

00000796 <.do_clear_bss_start>:
     796:	a9 38       	cpi	r26, 0x89	; 137
     798:	b2 07       	cpc	r27, r18
     79a:	e1 f7       	brne	.-8      	; 0x794 <.do_clear_bss_loop>
     79c:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <main>
     7a0:	0c 94 3a 42 	jmp	0x8474	; 0x8474 <_exit>

000007a4 <__bad_interrupt>:
     7a4:	2d cc       	rjmp	.-1958   	; 0x0 <__vectors>

000007a6 <clock_setup_32_mhz>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
}

void clock_setup_32_mhz(void) {
	
	OSC.CTRL |= OSC_RC32MEN_bm;
     7a6:	80 91 50 00 	lds	r24, 0x0050
     7aa:	82 60       	ori	r24, 0x02	; 2
     7ac:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     7b0:	80 91 51 00 	lds	r24, 0x0051
     7b4:	81 ff       	sbrs	r24, 1
     7b6:	fc cf       	rjmp	.-8      	; 0x7b0 <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
     7b8:	88 ed       	ldi	r24, 0xD8	; 216
     7ba:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	80 93 40 00 	sts	0x0040, r24
     7c2:	08 95       	ret

000007c4 <esp8266_on>:
		 {
			 int tempPos = 0;
			 bool finishedCopying = false;
			 for (int i=nameStartPos; i<strlen(rx_buffer); i++)
			 {
				 if ( (rx_buffer[i]==' ') && !finishedCopying )  { finishedCopying = true;   }
     7c4:	e0 e6       	ldi	r30, 0x60	; 96
     7c6:	f6 e0       	ldi	r31, 0x06	; 6
     7c8:	80 e2       	ldi	r24, 0x20	; 32
     7ca:	81 83       	std	Z+1, r24	; 0x01
     7cc:	85 83       	std	Z+5, r24	; 0x05
     7ce:	2f ef       	ldi	r18, 0xFF	; 255
     7d0:	33 e2       	ldi	r19, 0x23	; 35
     7d2:	84 ef       	ldi	r24, 0xF4	; 244
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	21 50       	subi	r18, 0x01	; 1
     7d8:	30 40       	sbci	r19, 0x00	; 0
     7da:	80 40       	sbci	r24, 0x00	; 0
     7dc:	90 40       	sbci	r25, 0x00	; 0
     7de:	d9 f7       	brne	.-10     	; 0x7d6 <esp8266_on+0x12>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <esp8266_on+0x1e>
     7e2:	00 00       	nop
     7e4:	08 95       	ret

000007e6 <esp8266_join_ap>:
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	8b 01       	movw	r16, r22
     7f0:	c1 e8       	ldi	r28, 0x81	; 129
     7f2:	d6 e2       	ldi	r29, 0x26	; 38
     7f4:	24 e6       	ldi	r18, 0x64	; 100
     7f6:	de 01       	movw	r26, r28
     7f8:	1d 92       	st	X+, r1
     7fa:	2a 95       	dec	r18
     7fc:	e9 f7       	brne	.-6      	; 0x7f8 <esp8266_join_ap+0x12>
     7fe:	fe 01       	movw	r30, r28
     800:	01 90       	ld	r0, Z+
     802:	00 20       	and	r0, r0
     804:	e9 f7       	brne	.-6      	; 0x800 <esp8266_join_ap+0x1a>
     806:	9f 01       	movw	r18, r30
     808:	21 50       	subi	r18, 0x01	; 1
     80a:	31 09       	sbc	r19, r1
     80c:	21 58       	subi	r18, 0x81	; 129
     80e:	36 42       	sbci	r19, 0x26	; 38
     810:	d9 01       	movw	r26, r18
     812:	af 57       	subi	r26, 0x7F	; 127
     814:	b9 4d       	sbci	r27, 0xD9	; 217
     816:	4a e0       	ldi	r20, 0x0A	; 10
     818:	e8 e4       	ldi	r30, 0x48	; 72
     81a:	f0 e2       	ldi	r31, 0x20	; 32
     81c:	01 90       	ld	r0, Z+
     81e:	0d 92       	st	X+, r0
     820:	4a 95       	dec	r20
     822:	e1 f7       	brne	.-8      	; 0x81c <esp8266_join_ap+0x36>
     824:	bc 01       	movw	r22, r24
     826:	c9 01       	movw	r24, r18
     828:	85 57       	subi	r24, 0x75	; 117
     82a:	99 4d       	sbci	r25, 0xD9	; 217
     82c:	0e 94 25 3f 	call	0x7e4a	; 0x7e4a <strcpy>
     830:	fe 01       	movw	r30, r28
     832:	01 90       	ld	r0, Z+
     834:	00 20       	and	r0, r0
     836:	e9 f7       	brne	.-6      	; 0x832 <esp8266_join_ap+0x4c>
     838:	31 97       	sbiw	r30, 0x01	; 1
     83a:	42 e2       	ldi	r20, 0x22	; 34
     83c:	5c e2       	ldi	r21, 0x2C	; 44
     83e:	62 e2       	ldi	r22, 0x22	; 34
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	40 83       	st	Z, r20
     844:	51 83       	std	Z+1, r21	; 0x01
     846:	62 83       	std	Z+2, r22	; 0x02
     848:	73 83       	std	Z+3, r23	; 0x03
     84a:	b8 01       	movw	r22, r16
     84c:	cf 01       	movw	r24, r30
     84e:	03 96       	adiw	r24, 0x03	; 3
     850:	0e 94 25 3f 	call	0x7e4a	; 0x7e4a <strcpy>
     854:	fe 01       	movw	r30, r28
     856:	01 90       	ld	r0, Z+
     858:	00 20       	and	r0, r0
     85a:	e9 f7       	brne	.-6      	; 0x856 <esp8266_join_ap+0x70>
     85c:	31 97       	sbiw	r30, 0x01	; 1
     85e:	82 e2       	ldi	r24, 0x22	; 34
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	80 83       	st	Z, r24
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	10 92 96 25 	sts	0x2596, r1
     86a:	10 92 97 25 	sts	0x2597, r1
     86e:	88 ee       	ldi	r24, 0xE8	; 232
     870:	93 e0       	ldi	r25, 0x03	; 3
     872:	ee ea       	ldi	r30, 0xAE	; 174
     874:	f1 e2       	ldi	r31, 0x21	; 33
     876:	df 01       	movw	r26, r30
     878:	9c 01       	movw	r18, r24
     87a:	1d 92       	st	X+, r1
     87c:	21 50       	subi	r18, 0x01	; 1
     87e:	30 40       	sbci	r19, 0x00	; 0
     880:	e1 f7       	brne	.-8      	; 0x87a <esp8266_join_ap+0x94>
     882:	df 93       	push	r29
     884:	cf 93       	push	r28
     886:	8b e1       	ldi	r24, 0x1B	; 27
     888:	90 e2       	ldi	r25, 0x20	; 32
     88a:	9f 93       	push	r25
     88c:	8f 93       	push	r24
     88e:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <printf>
     892:	5a ea       	ldi	r21, 0xAA	; 170
     894:	86 ee       	ldi	r24, 0xE6	; 230
     896:	96 e9       	ldi	r25, 0x96	; 150
     898:	a1 e0       	ldi	r26, 0x01	; 1
     89a:	51 50       	subi	r21, 0x01	; 1
     89c:	80 40       	sbci	r24, 0x00	; 0
     89e:	90 40       	sbci	r25, 0x00	; 0
     8a0:	a0 40       	sbci	r26, 0x00	; 0
     8a2:	d9 f7       	brne	.-10     	; 0x89a <esp8266_join_ap+0xb4>
     8a4:	00 00       	nop
     8a6:	10 92 96 25 	sts	0x2596, r1
     8aa:	10 92 97 25 	sts	0x2597, r1
     8ae:	88 ee       	ldi	r24, 0xE8	; 232
     8b0:	93 e0       	ldi	r25, 0x03	; 3
     8b2:	ee ea       	ldi	r30, 0xAE	; 174
     8b4:	f1 e2       	ldi	r31, 0x21	; 33
     8b6:	df 01       	movw	r26, r30
     8b8:	9c 01       	movw	r18, r24
     8ba:	1d 92       	st	X+, r1
     8bc:	21 50       	subi	r18, 0x01	; 1
     8be:	30 40       	sbci	r19, 0x00	; 0
     8c0:	e1 f7       	brne	.-8      	; 0x8ba <esp8266_join_ap+0xd4>
     8c2:	83 e5       	ldi	r24, 0x53	; 83
     8c4:	90 e2       	ldi	r25, 0x20	; 32
     8c6:	9f 93       	push	r25
     8c8:	8f 93       	push	r24
     8ca:	8b e1       	ldi	r24, 0x1B	; 27
     8cc:	90 e2       	ldi	r25, 0x20	; 32
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <printf>
     8d6:	3a ea       	ldi	r19, 0xAA	; 170
     8d8:	46 ee       	ldi	r20, 0xE6	; 230
     8da:	56 e9       	ldi	r21, 0x96	; 150
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	31 50       	subi	r19, 0x01	; 1
     8e0:	40 40       	sbci	r20, 0x00	; 0
     8e2:	50 40       	sbci	r21, 0x00	; 0
     8e4:	80 40       	sbci	r24, 0x00	; 0
     8e6:	d9 f7       	brne	.-10     	; 0x8de <esp8266_join_ap+0xf8>
     8e8:	00 00       	nop
     8ea:	60 e2       	ldi	r22, 0x20	; 32
     8ec:	70 e2       	ldi	r23, 0x20	; 32
     8ee:	8e ea       	ldi	r24, 0xAE	; 174
     8f0:	91 e2       	ldi	r25, 0x21	; 33
     8f2:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <strstr>
     8f6:	21 e0       	ldi	r18, 0x01	; 1
     8f8:	ad b7       	in	r26, 0x3d	; 61
     8fa:	be b7       	in	r27, 0x3e	; 62
     8fc:	18 96       	adiw	r26, 0x08	; 8
     8fe:	ad bf       	out	0x3d, r26	; 61
     900:	be bf       	out	0x3e, r27	; 62
     902:	89 2b       	or	r24, r25
     904:	31 f0       	breq	.+12     	; 0x912 <esp8266_join_ap+0x12c>
     906:	82 2f       	mov	r24, r18
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	08 95       	ret
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	82 2f       	mov	r24, r18
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	08 95       	ret

00000920 <esp8266_setup_webserver>:
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	10 92 96 25 	sts	0x2596, r1
     928:	10 92 97 25 	sts	0x2597, r1
     92c:	ce ea       	ldi	r28, 0xAE	; 174
     92e:	d1 e2       	ldi	r29, 0x21	; 33
     930:	88 ee       	ldi	r24, 0xE8	; 232
     932:	93 e0       	ldi	r25, 0x03	; 3
     934:	de 01       	movw	r26, r28
     936:	fc 01       	movw	r30, r24
     938:	1d 92       	st	X+, r1
     93a:	31 97       	sbiw	r30, 0x01	; 1
     93c:	e9 f7       	brne	.-6      	; 0x938 <esp8266_setup_webserver+0x18>
     93e:	83 e1       	ldi	r24, 0x13	; 19
     940:	90 e2       	ldi	r25, 0x20	; 32
     942:	9f 93       	push	r25
     944:	8f 93       	push	r24
     946:	8b e1       	ldi	r24, 0x1B	; 27
     948:	90 e2       	ldi	r25, 0x20	; 32
     94a:	9f 93       	push	r25
     94c:	8f 93       	push	r24
     94e:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <printf>
     952:	ff ef       	ldi	r31, 0xFF	; 255
     954:	23 e2       	ldi	r18, 0x23	; 35
     956:	34 ef       	ldi	r19, 0xF4	; 244
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	f1 50       	subi	r31, 0x01	; 1
     95c:	20 40       	sbci	r18, 0x00	; 0
     95e:	30 40       	sbci	r19, 0x00	; 0
     960:	80 40       	sbci	r24, 0x00	; 0
     962:	d9 f7       	brne	.-10     	; 0x95a <esp8266_setup_webserver+0x3a>
     964:	00 c0       	rjmp	.+0      	; 0x966 <esp8266_setup_webserver+0x46>
     966:	00 00       	nop
     968:	60 e2       	ldi	r22, 0x20	; 32
     96a:	70 e2       	ldi	r23, 0x20	; 32
     96c:	ce 01       	movw	r24, r28
     96e:	0e 94 2c 3f 	call	0x7e58	; 0x7e58 <strstr>
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	89 2b       	or	r24, r25
     97c:	09 f4       	brne	.+2      	; 0x980 <esp8266_setup_webserver+0x60>
     97e:	be c0       	rjmp	.+380    	; 0xafc <esp8266_setup_webserver+0x1dc>
     980:	10 92 96 25 	sts	0x2596, r1
     984:	10 92 97 25 	sts	0x2597, r1
     988:	88 ee       	ldi	r24, 0xE8	; 232
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	de 01       	movw	r26, r28
     98e:	fc 01       	movw	r30, r24
     990:	1d 92       	st	X+, r1
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	e9 f7       	brne	.-6      	; 0x990 <esp8266_setup_webserver+0x70>
     996:	8c e3       	ldi	r24, 0x3C	; 60
     998:	90 e2       	ldi	r25, 0x20	; 32
     99a:	9f 93       	push	r25
     99c:	8f 93       	push	r24
     99e:	8b e1       	ldi	r24, 0x1B	; 27
     9a0:	90 e2       	ldi	r25, 0x20	; 32
     9a2:	9f 93       	push	r25
     9a4:	8f 93       	push	r24
     9a6:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <printf>
     9aa:	ff ef       	ldi	r31, 0xFF	; 255
     9ac:	23 ed       	ldi	r18, 0xD3	; 211
     9ae:	30 e3       	ldi	r19, 0x30	; 48
     9b0:	f1 50       	subi	r31, 0x01	; 1
     9b2:	20 40       	sbci	r18, 0x00	; 0
     9b4:	30 40       	sbci	r19, 0x00	; 0
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <esp8266_setup_webserver+0x90>
     9b8:	00 c0       	rjmp	.+0      	; 0x9ba <esp8266_setup_webserver+0x9a>
     9ba:	00 00       	nop
     9bc:	66 e9       	ldi	r22, 0x96	; 150
     9be:	70 e2       	ldi	r23, 0x20	; 32
     9c0:	81 ea       	ldi	r24, 0xA1	; 161
     9c2:	90 e2       	ldi	r25, 0x20	; 32
     9c4:	10 df       	rcall	.-480    	; 0x7e6 <esp8266_join_ap>
     9c6:	10 92 96 25 	sts	0x2596, r1
     9ca:	10 92 97 25 	sts	0x2597, r1
     9ce:	88 ee       	ldi	r24, 0xE8	; 232
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	de 01       	movw	r26, r28
     9d4:	9c 01       	movw	r18, r24
     9d6:	1d 92       	st	X+, r1
     9d8:	21 50       	subi	r18, 0x01	; 1
     9da:	30 40       	sbci	r19, 0x00	; 0
     9dc:	e1 f7       	brne	.-8      	; 0x9d6 <esp8266_setup_webserver+0xb6>
     9de:	8b ea       	ldi	r24, 0xAB	; 171
     9e0:	90 e2       	ldi	r25, 0x20	; 32
     9e2:	9f 93       	push	r25
     9e4:	8f 93       	push	r24
     9e6:	8b e1       	ldi	r24, 0x1B	; 27
     9e8:	90 e2       	ldi	r25, 0x20	; 32
     9ea:	9f 93       	push	r25
     9ec:	8f 93       	push	r24
     9ee:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <printf>
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	83 ed       	ldi	r24, 0xD3	; 211
     9f6:	90 e3       	ldi	r25, 0x30	; 48
     9f8:	31 50       	subi	r19, 0x01	; 1
     9fa:	80 40       	sbci	r24, 0x00	; 0
     9fc:	90 40       	sbci	r25, 0x00	; 0
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <esp8266_setup_webserver+0xd8>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <esp8266_setup_webserver+0xe2>
     a02:	00 00       	nop
     a04:	de 01       	movw	r26, r28
     a06:	0d 90       	ld	r0, X+
     a08:	00 20       	and	r0, r0
     a0a:	e9 f7       	brne	.-6      	; 0xa06 <esp8266_setup_webserver+0xe6>
     a0c:	11 97       	sbiw	r26, 0x01	; 1
     a0e:	ae 5a       	subi	r26, 0xAE	; 174
     a10:	b1 42       	sbci	r27, 0x21	; 33
     a12:	fe 01       	movw	r30, r28
     a14:	2d b7       	in	r18, 0x3d	; 61
     a16:	3e b7       	in	r19, 0x3e	; 62
     a18:	28 5f       	subi	r18, 0xF8	; 248
     a1a:	3f 4f       	sbci	r19, 0xFF	; 255
     a1c:	2d bf       	out	0x3d, r18	; 61
     a1e:	3e bf       	out	0x3e, r19	; 62
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	21 91       	ld	r18, Z+
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	a8 17       	cp	r26, r24
     a2a:	b9 07       	cpc	r27, r25
     a2c:	0c f0       	brlt	.+2      	; 0xa30 <esp8266_setup_webserver+0x110>
     a2e:	51 c0       	rjmp	.+162    	; 0xad2 <esp8266_setup_webserver+0x1b2>
     a30:	86 e0       	ldi	r24, 0x06	; 6
     a32:	e5 eb       	ldi	r30, 0xB5	; 181
     a34:	f0 e2       	ldi	r31, 0x20	; 32
     a36:	ab ee       	ldi	r26, 0xEB	; 235
     a38:	b5 e2       	ldi	r27, 0x25	; 37
     a3a:	01 90       	ld	r0, Z+
     a3c:	0d 92       	st	X+, r0
     a3e:	8a 95       	dec	r24
     a40:	e1 f7       	brne	.-8      	; 0xa3a <esp8266_setup_webserver+0x11a>
     a42:	10 92 96 25 	sts	0x2596, r1
     a46:	10 92 97 25 	sts	0x2597, r1
     a4a:	88 ee       	ldi	r24, 0xE8	; 232
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	de 01       	movw	r26, r28
     a50:	fc 01       	movw	r30, r24
     a52:	1d 92       	st	X+, r1
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	e9 f7       	brne	.-6      	; 0xa52 <esp8266_setup_webserver+0x132>
     a58:	8b eb       	ldi	r24, 0xBB	; 187
     a5a:	90 e2       	ldi	r25, 0x20	; 32
     a5c:	9f 93       	push	r25
     a5e:	8f 93       	push	r24
     a60:	8b e1       	ldi	r24, 0x1B	; 27
     a62:	90 e2       	ldi	r25, 0x20	; 32
     a64:	9f 93       	push	r25
     a66:	8f 93       	push	r24
     a68:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <printf>
     a6c:	ff ef       	ldi	r31, 0xFF	; 255
     a6e:	23 ed       	ldi	r18, 0xD3	; 211
     a70:	30 e3       	ldi	r19, 0x30	; 48
     a72:	f1 50       	subi	r31, 0x01	; 1
     a74:	20 40       	sbci	r18, 0x00	; 0
     a76:	30 40       	sbci	r19, 0x00	; 0
     a78:	e1 f7       	brne	.-8      	; 0xa72 <esp8266_setup_webserver+0x152>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <esp8266_setup_webserver+0x15c>
     a7c:	00 00       	nop
     a7e:	10 92 96 25 	sts	0x2596, r1
     a82:	10 92 97 25 	sts	0x2597, r1
     a86:	88 ee       	ldi	r24, 0xE8	; 232
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	ee ea       	ldi	r30, 0xAE	; 174
     a8c:	f1 e2       	ldi	r31, 0x21	; 33
     a8e:	df 01       	movw	r26, r30
     a90:	9c 01       	movw	r18, r24
     a92:	1d 92       	st	X+, r1
     a94:	21 50       	subi	r18, 0x01	; 1
     a96:	30 40       	sbci	r19, 0x00	; 0
     a98:	e1 f7       	brne	.-8      	; 0xa92 <esp8266_setup_webserver+0x172>
     a9a:	87 ec       	ldi	r24, 0xC7	; 199
     a9c:	90 e2       	ldi	r25, 0x20	; 32
     a9e:	9f 93       	push	r25
     aa0:	8f 93       	push	r24
     aa2:	8b e1       	ldi	r24, 0x1B	; 27
     aa4:	90 e2       	ldi	r25, 0x20	; 32
     aa6:	9f 93       	push	r25
     aa8:	8f 93       	push	r24
     aaa:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <printf>
     aae:	3f ef       	ldi	r19, 0xFF	; 255
     ab0:	83 ed       	ldi	r24, 0xD3	; 211
     ab2:	90 e3       	ldi	r25, 0x30	; 48
     ab4:	31 50       	subi	r19, 0x01	; 1
     ab6:	80 40       	sbci	r24, 0x00	; 0
     ab8:	90 40       	sbci	r25, 0x00	; 0
     aba:	e1 f7       	brne	.-8      	; 0xab4 <esp8266_setup_webserver+0x194>
     abc:	00 c0       	rjmp	.+0      	; 0xabe <esp8266_setup_webserver+0x19e>
     abe:	00 00       	nop
     ac0:	ad b7       	in	r26, 0x3d	; 61
     ac2:	be b7       	in	r27, 0x3e	; 62
     ac4:	18 96       	adiw	r26, 0x08	; 8
     ac6:	ad bf       	out	0x3d, r26	; 61
     ac8:	be bf       	out	0x3e, r27	; 62
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret
     ad2:	2a 30       	cpi	r18, 0x0A	; 10
     ad4:	09 f0       	breq	.+2      	; 0xad8 <esp8266_setup_webserver+0x1b8>
     ad6:	a6 cf       	rjmp	.-180    	; 0xa24 <esp8266_setup_webserver+0x104>
     ad8:	fc 01       	movw	r30, r24
     ada:	e2 55       	subi	r30, 0x52	; 82
     adc:	fe 4d       	sbci	r31, 0xDE	; 222
     ade:	ab ee       	ldi	r26, 0xEB	; 235
     ae0:	b5 e2       	ldi	r27, 0x25	; 37
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	02 c0       	rjmp	.+4      	; 0xaec <esp8266_setup_webserver+0x1cc>
     ae8:	2d 93       	st	X+, r18
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	21 91       	ld	r18, Z+
     aee:	2d 30       	cpi	r18, 0x0D	; 13
     af0:	d9 f7       	brne	.-10     	; 0xae8 <esp8266_setup_webserver+0x1c8>
     af2:	fc 01       	movw	r30, r24
     af4:	e5 51       	subi	r30, 0x15	; 21
     af6:	fa 4d       	sbci	r31, 0xDA	; 218
     af8:	10 82       	st	Z, r1
     afa:	a3 cf       	rjmp	.-186    	; 0xa42 <esp8266_setup_webserver+0x122>
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <at_cipsend>:
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <at_cipsend+0xa>
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	8c 01       	movw	r16, r24
     b14:	bc 01       	movw	r22, r24
     b16:	8f ef       	ldi	r24, 0xFF	; 255
     b18:	95 e2       	ldi	r25, 0x25	; 37
     b1a:	0e 94 25 3f 	call	0x7e4a	; 0x7e4a <strcpy>
     b1e:	f8 01       	movw	r30, r16
     b20:	01 90       	ld	r0, Z+
     b22:	00 20       	and	r0, r0
     b24:	e9 f7       	brne	.-6      	; 0xb20 <at_cipsend+0x1c>
     b26:	31 97       	sbiw	r30, 0x01	; 1
     b28:	e0 1b       	sub	r30, r16
     b2a:	f1 0b       	sbc	r31, r17
     b2c:	ff 93       	push	r31
     b2e:	ef 93       	push	r30
     b30:	86 e7       	ldi	r24, 0x76	; 118
     b32:	90 e2       	ldi	r25, 0x20	; 32
     b34:	9f 93       	push	r25
     b36:	8f 93       	push	r24
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	7f 93       	push	r23
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	6f 93       	push	r22
     b40:	69 83       	std	Y+1, r22	; 0x01
     b42:	7a 83       	std	Y+2, r23	; 0x02
     b44:	0e 94 84 3f 	call	0x7f08	; 0x7f08 <sprintf>
     b48:	01 e8       	ldi	r16, 0x81	; 129
     b4a:	16 e2       	ldi	r17, 0x26	; 38
     b4c:	8d e0       	ldi	r24, 0x0D	; 13
     b4e:	e9 ed       	ldi	r30, 0xD9	; 217
     b50:	f0 e2       	ldi	r31, 0x20	; 32
     b52:	d8 01       	movw	r26, r16
     b54:	01 90       	ld	r0, Z+
     b56:	0d 92       	st	X+, r0
     b58:	8a 95       	dec	r24
     b5a:	e1 f7       	brne	.-8      	; 0xb54 <at_cipsend+0x50>
     b5c:	69 81       	ldd	r22, Y+1	; 0x01
     b5e:	7a 81       	ldd	r23, Y+2	; 0x02
     b60:	8e e8       	ldi	r24, 0x8E	; 142
     b62:	96 e2       	ldi	r25, 0x26	; 38
     b64:	0e 94 25 3f 	call	0x7e4a	; 0x7e4a <strcpy>
     b68:	f8 01       	movw	r30, r16
     b6a:	01 90       	ld	r0, Z+
     b6c:	00 20       	and	r0, r0
     b6e:	e9 f7       	brne	.-6      	; 0xb6a <at_cipsend+0x66>
     b70:	31 97       	sbiw	r30, 0x01	; 1
     b72:	8d e0       	ldi	r24, 0x0D	; 13
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	80 83       	st	Z, r24
     b78:	91 83       	std	Z+1, r25	; 0x01
     b7a:	10 92 96 25 	sts	0x2596, r1
     b7e:	10 92 97 25 	sts	0x2597, r1
     b82:	88 ee       	ldi	r24, 0xE8	; 232
     b84:	93 e0       	ldi	r25, 0x03	; 3
     b86:	ee ea       	ldi	r30, 0xAE	; 174
     b88:	f1 e2       	ldi	r31, 0x21	; 33
     b8a:	df 01       	movw	r26, r30
     b8c:	9c 01       	movw	r18, r24
     b8e:	1d 92       	st	X+, r1
     b90:	21 50       	subi	r18, 0x01	; 1
     b92:	30 40       	sbci	r19, 0x00	; 0
     b94:	e1 f7       	brne	.-8      	; 0xb8e <at_cipsend+0x8a>
     b96:	1f 93       	push	r17
     b98:	0f 93       	push	r16
     b9a:	8b e1       	ldi	r24, 0x1B	; 27
     b9c:	90 e2       	ldi	r25, 0x20	; 32
     b9e:	9f 93       	push	r25
     ba0:	8f 93       	push	r24
     ba2:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <printf>
     ba6:	3f ef       	ldi	r19, 0xFF	; 255
     ba8:	8f e4       	ldi	r24, 0x4F	; 79
     baa:	93 ec       	ldi	r25, 0xC3	; 195
     bac:	31 50       	subi	r19, 0x01	; 1
     bae:	80 40       	sbci	r24, 0x00	; 0
     bb0:	90 40       	sbci	r25, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <at_cipsend+0xa8>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <at_cipsend+0xb2>
     bb6:	00 00       	nop
     bb8:	10 92 96 25 	sts	0x2596, r1
     bbc:	10 92 97 25 	sts	0x2597, r1
     bc0:	88 ee       	ldi	r24, 0xE8	; 232
     bc2:	93 e0       	ldi	r25, 0x03	; 3
     bc4:	ee ea       	ldi	r30, 0xAE	; 174
     bc6:	f1 e2       	ldi	r31, 0x21	; 33
     bc8:	df 01       	movw	r26, r30
     bca:	9c 01       	movw	r18, r24
     bcc:	1d 92       	st	X+, r1
     bce:	21 50       	subi	r18, 0x01	; 1
     bd0:	30 40       	sbci	r19, 0x00	; 0
     bd2:	e1 f7       	brne	.-8      	; 0xbcc <at_cipsend+0xc8>
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	95 e2       	ldi	r25, 0x25	; 37
     bd8:	9f 93       	push	r25
     bda:	8f 93       	push	r24
     bdc:	8b e1       	ldi	r24, 0x1B	; 27
     bde:	90 e2       	ldi	r25, 0x20	; 32
     be0:	9f 93       	push	r25
     be2:	8f 93       	push	r24
     be4:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <printf>
     be8:	3f ef       	ldi	r19, 0xFF	; 255
     bea:	8f e4       	ldi	r24, 0x4F	; 79
     bec:	93 ec       	ldi	r25, 0xC3	; 195
     bee:	31 50       	subi	r19, 0x01	; 1
     bf0:	80 40       	sbci	r24, 0x00	; 0
     bf2:	90 40       	sbci	r25, 0x00	; 0
     bf4:	e1 f7       	brne	.-8      	; 0xbee <at_cipsend+0xea>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <at_cipsend+0xf4>
     bf8:	00 00       	nop
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	08 95       	ret

00000c0c <esp8266_run_simple_webserver>:
     c0c:	20 91 96 25 	lds	r18, 0x2596
     c10:	30 91 97 25 	lds	r19, 0x2597
     c14:	2f 3b       	cpi	r18, 0xBF	; 191
     c16:	31 05       	cpc	r19, r1
     c18:	08 f4       	brcc	.+2      	; 0xc1c <esp8266_run_simple_webserver+0x10>
     c1a:	08 95       	ret
     c1c:	2f ef       	ldi	r18, 0xFF	; 255
     c1e:	37 ea       	ldi	r19, 0xA7	; 167
     c20:	41 e6       	ldi	r20, 0x61	; 97
     c22:	21 50       	subi	r18, 0x01	; 1
     c24:	30 40       	sbci	r19, 0x00	; 0
     c26:	40 40       	sbci	r20, 0x00	; 0
     c28:	e1 f7       	brne	.-8      	; 0xc22 <esp8266_run_simple_webserver+0x16>
     c2a:	00 c0       	rjmp	.+0      	; 0xc2c <esp8266_run_simple_webserver+0x20>
     c2c:	00 00       	nop
     c2e:	6a df       	rcall	.-300    	; 0xb04 <at_cipsend>
     c30:	8a ea       	ldi	r24, 0xAA	; 170
     c32:	96 ee       	ldi	r25, 0xE6	; 230
     c34:	a6 e9       	ldi	r26, 0x96	; 150
     c36:	b1 e0       	ldi	r27, 0x01	; 1
     c38:	81 50       	subi	r24, 0x01	; 1
     c3a:	90 40       	sbci	r25, 0x00	; 0
     c3c:	a0 40       	sbci	r26, 0x00	; 0
     c3e:	b0 40       	sbci	r27, 0x00	; 0
     c40:	d9 f7       	brne	.-10     	; 0xc38 <esp8266_run_simple_webserver+0x2c>
     c42:	00 00       	nop
     c44:	10 92 96 25 	sts	0x2596, r1
     c48:	10 92 97 25 	sts	0x2597, r1
     c4c:	88 ee       	ldi	r24, 0xE8	; 232
     c4e:	93 e0       	ldi	r25, 0x03	; 3
     c50:	ee ea       	ldi	r30, 0xAE	; 174
     c52:	f1 e2       	ldi	r31, 0x21	; 33
     c54:	df 01       	movw	r26, r30
     c56:	9c 01       	movw	r18, r24
     c58:	1d 92       	st	X+, r1
     c5a:	21 50       	subi	r18, 0x01	; 1
     c5c:	30 40       	sbci	r19, 0x00	; 0
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <esp8266_run_simple_webserver+0x4c>
     c60:	87 ee       	ldi	r24, 0xE7	; 231
     c62:	90 e2       	ldi	r25, 0x20	; 32
     c64:	9f 93       	push	r25
     c66:	8f 93       	push	r24
     c68:	8b e1       	ldi	r24, 0x1B	; 27
     c6a:	90 e2       	ldi	r25, 0x20	; 32
     c6c:	9f 93       	push	r25
     c6e:	8f 93       	push	r24
     c70:	0e 94 46 3f 	call	0x7e8c	; 0x7e8c <printf>
     c74:	3f ef       	ldi	r19, 0xFF	; 255
     c76:	43 ec       	ldi	r20, 0xC3	; 195
     c78:	89 e0       	ldi	r24, 0x09	; 9
     c7a:	31 50       	subi	r19, 0x01	; 1
     c7c:	40 40       	sbci	r20, 0x00	; 0
     c7e:	80 40       	sbci	r24, 0x00	; 0
     c80:	e1 f7       	brne	.-8      	; 0xc7a <esp8266_run_simple_webserver+0x6e>
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <esp8266_run_simple_webserver+0x78>
     c84:	00 00       	nop
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	08 95       	ret

00000c90 <__vector_88>:
 _delay_ms (100);
 
 // drop to here and wait for next request.
}

ISR(USARTD0_RXC_vect) {
     c90:	1f 92       	push	r1
     c92:	0f 92       	push	r0
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	0b b6       	in	r0, 0x3b	; 59
     c9c:	0f 92       	push	r0
     c9e:	2f 93       	push	r18
     ca0:	3f 93       	push	r19
     ca2:	8f 93       	push	r24
     ca4:	9f 93       	push	r25
     ca6:	ef 93       	push	r30
     ca8:	ff 93       	push	r31
	rx_buffer[rx_ptr++] = USARTD0.DATA;
     caa:	80 91 96 25 	lds	r24, 0x2596
     cae:	90 91 97 25 	lds	r25, 0x2597
     cb2:	9c 01       	movw	r18, r24
     cb4:	2f 5f       	subi	r18, 0xFF	; 255
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	20 93 96 25 	sts	0x2596, r18
     cbc:	30 93 97 25 	sts	0x2597, r19
     cc0:	20 91 a0 09 	lds	r18, 0x09A0
     cc4:	fc 01       	movw	r30, r24
     cc6:	e2 55       	subi	r30, 0x52	; 82
     cc8:	fe 4d       	sbci	r31, 0xDE	; 222
     cca:	20 83       	st	Z, r18
     ccc:	ff 91       	pop	r31
     cce:	ef 91       	pop	r30
     cd0:	9f 91       	pop	r25
     cd2:	8f 91       	pop	r24
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0b be       	out	0x3b, r0	; 59
     cdc:	0f 90       	pop	r0
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	0f 90       	pop	r0
     ce2:	1f 90       	pop	r1
     ce4:	18 95       	reti

00000ce6 <sync_window.part.2>:
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     ce6:	8f 92       	push	r8
     ce8:	9f 92       	push	r9
     cea:	af 92       	push	r10
     cec:	bf 92       	push	r11
     cee:	cf 92       	push	r12
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
     d00:	ce a4       	ldd	r12, Y+46	; 0x2e
     d02:	df a4       	ldd	r13, Y+47	; 0x2f
     d04:	e8 a8       	ldd	r14, Y+48	; 0x30
     d06:	f9 a8       	ldd	r15, Y+49	; 0x31
     d08:	5c 01       	movw	r10, r24
     d0a:	02 e3       	ldi	r16, 0x32	; 50
     d0c:	a0 0e       	add	r10, r16
     d0e:	b1 1c       	adc	r11, r1
     d10:	01 e0       	ldi	r16, 0x01	; 1
     d12:	10 e0       	ldi	r17, 0x00	; 0
     d14:	a7 01       	movw	r20, r14
     d16:	96 01       	movw	r18, r12
     d18:	b5 01       	movw	r22, r10
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
     d20:	81 11       	cpse	r24, r1
     d22:	40 c0       	rjmp	.+128    	; 0xda4 <sync_window.part.2+0xbe>
     d24:	1c 82       	std	Y+4, r1	; 0x04
     d26:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d28:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d2a:	ac 8d       	ldd	r26, Y+28	; 0x1c
     d2c:	bd 8d       	ldd	r27, Y+29	; 0x1d
     d2e:	4a a1       	ldd	r20, Y+34	; 0x22
     d30:	5b a1       	ldd	r21, Y+35	; 0x23
     d32:	6c a1       	ldd	r22, Y+36	; 0x24
     d34:	7d a1       	ldd	r23, Y+37	; 0x25
     d36:	97 01       	movw	r18, r14
     d38:	86 01       	movw	r16, r12
     d3a:	04 1b       	sub	r16, r20
     d3c:	15 0b       	sbc	r17, r21
     d3e:	26 0b       	sbc	r18, r22
     d40:	37 0b       	sbc	r19, r23
     d42:	08 17       	cp	r16, r24
     d44:	19 07       	cpc	r17, r25
     d46:	2a 07       	cpc	r18, r26
     d48:	3b 07       	cpc	r19, r27
     d4a:	f0 f4       	brcc	.+60     	; 0xd88 <sync_window.part.2+0xa2>
     d4c:	8b 80       	ldd	r8, Y+3	; 0x03
     d4e:	91 2c       	mov	r9, r1
     d50:	12 e0       	ldi	r17, 0x02	; 2
     d52:	81 16       	cp	r8, r17
     d54:	91 04       	cpc	r9, r1
     d56:	28 f4       	brcc	.+10     	; 0xd62 <sync_window.part.2+0x7c>
     d58:	17 c0       	rjmp	.+46     	; 0xd88 <sync_window.part.2+0xa2>
     d5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d5c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d5e:	ac 8d       	ldd	r26, Y+28	; 0x1c
     d60:	bd 8d       	ldd	r27, Y+29	; 0x1d
     d62:	c8 0e       	add	r12, r24
     d64:	d9 1e       	adc	r13, r25
     d66:	ea 1e       	adc	r14, r26
     d68:	fb 1e       	adc	r15, r27
     d6a:	01 e0       	ldi	r16, 0x01	; 1
     d6c:	10 e0       	ldi	r17, 0x00	; 0
     d6e:	a7 01       	movw	r20, r14
     d70:	96 01       	movw	r18, r12
     d72:	b5 01       	movw	r22, r10
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
     d7a:	21 e0       	ldi	r18, 0x01	; 1
     d7c:	82 1a       	sub	r8, r18
     d7e:	91 08       	sbc	r9, r1
     d80:	31 e0       	ldi	r19, 0x01	; 1
     d82:	83 16       	cp	r8, r19
     d84:	91 04       	cpc	r9, r1
     d86:	49 f7       	brne	.-46     	; 0xd5a <sync_window.part.2+0x74>
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	bf 90       	pop	r11
     d9c:	af 90       	pop	r10
     d9e:	9f 90       	pop	r9
     da0:	8f 90       	pop	r8
     da2:	08 95       	ret
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	f1 cf       	rjmp	.-30     	; 0xd8a <sync_window.part.2+0xa4>

00000da8 <move_window>:
     da8:	4f 92       	push	r4
     daa:	5f 92       	push	r5
     dac:	6f 92       	push	r6
     dae:	7f 92       	push	r7
     db0:	8f 92       	push	r8
     db2:	9f 92       	push	r9
     db4:	af 92       	push	r10
     db6:	bf 92       	push	r11
     db8:	cf 92       	push	r12
     dba:	df 92       	push	r13
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	ec 01       	movw	r28, r24
     dca:	2a 01       	movw	r4, r20
     dcc:	3b 01       	movw	r6, r22
     dce:	ce a4       	ldd	r12, Y+46	; 0x2e
     dd0:	df a4       	ldd	r13, Y+47	; 0x2f
     dd2:	e8 a8       	ldd	r14, Y+48	; 0x30
     dd4:	f9 a8       	ldd	r15, Y+49	; 0x31
     dd6:	c4 16       	cp	r12, r20
     dd8:	d5 06       	cpc	r13, r21
     dda:	e6 06       	cpc	r14, r22
     ddc:	f7 06       	cpc	r15, r23
     dde:	09 f4       	brne	.+2      	; 0xde2 <move_window+0x3a>
     de0:	6f c0       	rjmp	.+222    	; 0xec0 <move_window+0x118>
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	5e 01       	movw	r10, r28
     de6:	81 11       	cpse	r24, r1
     de8:	22 c0       	rjmp	.+68     	; 0xe2e <move_window+0x86>
     dea:	82 e3       	ldi	r24, 0x32	; 50
     dec:	a8 0e       	add	r10, r24
     dee:	b1 1c       	adc	r11, r1
     df0:	01 e0       	ldi	r16, 0x01	; 1
     df2:	10 e0       	ldi	r17, 0x00	; 0
     df4:	a3 01       	movw	r20, r6
     df6:	92 01       	movw	r18, r4
     df8:	b5 01       	movw	r22, r10
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
     e00:	81 11       	cpse	r24, r1
     e02:	56 c0       	rjmp	.+172    	; 0xeb0 <move_window+0x108>
     e04:	4e a6       	std	Y+46, r4	; 0x2e
     e06:	5f a6       	std	Y+47, r5	; 0x2f
     e08:	68 aa       	std	Y+48, r6	; 0x30
     e0a:	79 aa       	std	Y+49, r7	; 0x31
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	bf 90       	pop	r11
     e1e:	af 90       	pop	r10
     e20:	9f 90       	pop	r9
     e22:	8f 90       	pop	r8
     e24:	7f 90       	pop	r7
     e26:	6f 90       	pop	r6
     e28:	5f 90       	pop	r5
     e2a:	4f 90       	pop	r4
     e2c:	08 95       	ret
     e2e:	02 e3       	ldi	r16, 0x32	; 50
     e30:	a0 0e       	add	r10, r16
     e32:	b1 1c       	adc	r11, r1
     e34:	01 e0       	ldi	r16, 0x01	; 1
     e36:	10 e0       	ldi	r17, 0x00	; 0
     e38:	a7 01       	movw	r20, r14
     e3a:	96 01       	movw	r18, r12
     e3c:	b5 01       	movw	r22, r10
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
     e44:	81 11       	cpse	r24, r1
     e46:	3a c0       	rjmp	.+116    	; 0xebc <move_window+0x114>
     e48:	1c 82       	std	Y+4, r1	; 0x04
     e4a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e4c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e4e:	ac 8d       	ldd	r26, Y+28	; 0x1c
     e50:	bd 8d       	ldd	r27, Y+29	; 0x1d
     e52:	4a a1       	ldd	r20, Y+34	; 0x22
     e54:	5b a1       	ldd	r21, Y+35	; 0x23
     e56:	6c a1       	ldd	r22, Y+36	; 0x24
     e58:	7d a1       	ldd	r23, Y+37	; 0x25
     e5a:	97 01       	movw	r18, r14
     e5c:	86 01       	movw	r16, r12
     e5e:	04 1b       	sub	r16, r20
     e60:	15 0b       	sbc	r17, r21
     e62:	26 0b       	sbc	r18, r22
     e64:	37 0b       	sbc	r19, r23
     e66:	08 17       	cp	r16, r24
     e68:	19 07       	cpc	r17, r25
     e6a:	2a 07       	cpc	r18, r26
     e6c:	3b 07       	cpc	r19, r27
     e6e:	08 f0       	brcs	.+2      	; 0xe72 <move_window+0xca>
     e70:	bf cf       	rjmp	.-130    	; 0xdf0 <move_window+0x48>
     e72:	8b 80       	ldd	r8, Y+3	; 0x03
     e74:	91 2c       	mov	r9, r1
     e76:	12 e0       	ldi	r17, 0x02	; 2
     e78:	81 16       	cp	r8, r17
     e7a:	91 04       	cpc	r9, r1
     e7c:	28 f4       	brcc	.+10     	; 0xe88 <move_window+0xe0>
     e7e:	b8 cf       	rjmp	.-144    	; 0xdf0 <move_window+0x48>
     e80:	8a 8d       	ldd	r24, Y+26	; 0x1a
     e82:	9b 8d       	ldd	r25, Y+27	; 0x1b
     e84:	ac 8d       	ldd	r26, Y+28	; 0x1c
     e86:	bd 8d       	ldd	r27, Y+29	; 0x1d
     e88:	c8 0e       	add	r12, r24
     e8a:	d9 1e       	adc	r13, r25
     e8c:	ea 1e       	adc	r14, r26
     e8e:	fb 1e       	adc	r15, r27
     e90:	01 e0       	ldi	r16, 0x01	; 1
     e92:	10 e0       	ldi	r17, 0x00	; 0
     e94:	a7 01       	movw	r20, r14
     e96:	96 01       	movw	r18, r12
     e98:	b5 01       	movw	r22, r10
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
     ea0:	21 e0       	ldi	r18, 0x01	; 1
     ea2:	82 1a       	sub	r8, r18
     ea4:	91 08       	sbc	r9, r1
     ea6:	31 e0       	ldi	r19, 0x01	; 1
     ea8:	83 16       	cp	r8, r19
     eaa:	91 04       	cpc	r9, r1
     eac:	49 f7       	brne	.-46     	; 0xe80 <move_window+0xd8>
     eae:	a0 cf       	rjmp	.-192    	; 0xdf0 <move_window+0x48>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	44 24       	eor	r4, r4
     eb4:	4a 94       	dec	r4
     eb6:	54 2c       	mov	r5, r4
     eb8:	32 01       	movw	r6, r4
     eba:	a4 cf       	rjmp	.-184    	; 0xe04 <move_window+0x5c>
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	a6 cf       	rjmp	.-180    	; 0xe0c <move_window+0x64>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	a4 cf       	rjmp	.-184    	; 0xe0c <move_window+0x64>

00000ec4 <sync_fs>:
     ec4:	8f 92       	push	r8
     ec6:	9f 92       	push	r9
     ec8:	af 92       	push	r10
     eca:	bf 92       	push	r11
     ecc:	cf 92       	push	r12
     ece:	df 92       	push	r13
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	ec 01       	movw	r28, r24
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	81 11       	cpse	r24, r1
     ee2:	1d c0       	rjmp	.+58     	; 0xf1e <sync_fs+0x5a>
     ee4:	88 81       	ld	r24, Y
     ee6:	83 30       	cpi	r24, 0x03	; 3
     ee8:	09 f4       	brne	.+2      	; 0xeec <sync_fs+0x28>
     eea:	5f c0       	rjmp	.+190    	; 0xfaa <sync_fs+0xe6>
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <disk_ioctl>
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	88 23       	and	r24, r24
     efc:	71 f0       	breq	.+28     	; 0xf1a <sync_fs+0x56>
     efe:	89 2f       	mov	r24, r25
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	bf 90       	pop	r11
     f12:	af 90       	pop	r10
     f14:	9f 90       	pop	r9
     f16:	8f 90       	pop	r8
     f18:	08 95       	ret
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	f0 cf       	rjmp	.-32     	; 0xefe <sync_fs+0x3a>
     f1e:	ce a4       	ldd	r12, Y+46	; 0x2e
     f20:	df a4       	ldd	r13, Y+47	; 0x2f
     f22:	e8 a8       	ldd	r14, Y+48	; 0x30
     f24:	f9 a8       	ldd	r15, Y+49	; 0x31
     f26:	5e 01       	movw	r10, r28
     f28:	02 e3       	ldi	r16, 0x32	; 50
     f2a:	a0 0e       	add	r10, r16
     f2c:	b1 1c       	adc	r11, r1
     f2e:	01 e0       	ldi	r16, 0x01	; 1
     f30:	10 e0       	ldi	r17, 0x00	; 0
     f32:	a7 01       	movw	r20, r14
     f34:	96 01       	movw	r18, r12
     f36:	b5 01       	movw	r22, r10
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
     f3e:	81 11       	cpse	r24, r1
     f40:	80 c0       	rjmp	.+256    	; 0x1042 <sync_fs+0x17e>
     f42:	1c 82       	std	Y+4, r1	; 0x04
     f44:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f46:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f48:	ac 8d       	ldd	r26, Y+28	; 0x1c
     f4a:	bd 8d       	ldd	r27, Y+29	; 0x1d
     f4c:	4a a1       	ldd	r20, Y+34	; 0x22
     f4e:	5b a1       	ldd	r21, Y+35	; 0x23
     f50:	6c a1       	ldd	r22, Y+36	; 0x24
     f52:	7d a1       	ldd	r23, Y+37	; 0x25
     f54:	97 01       	movw	r18, r14
     f56:	86 01       	movw	r16, r12
     f58:	04 1b       	sub	r16, r20
     f5a:	15 0b       	sbc	r17, r21
     f5c:	26 0b       	sbc	r18, r22
     f5e:	37 0b       	sbc	r19, r23
     f60:	08 17       	cp	r16, r24
     f62:	19 07       	cpc	r17, r25
     f64:	2a 07       	cpc	r18, r26
     f66:	3b 07       	cpc	r19, r27
     f68:	08 f0       	brcs	.+2      	; 0xf6c <sync_fs+0xa8>
     f6a:	bc cf       	rjmp	.-136    	; 0xee4 <sync_fs+0x20>
     f6c:	8b 80       	ldd	r8, Y+3	; 0x03
     f6e:	91 2c       	mov	r9, r1
     f70:	12 e0       	ldi	r17, 0x02	; 2
     f72:	81 16       	cp	r8, r17
     f74:	91 04       	cpc	r9, r1
     f76:	28 f4       	brcc	.+10     	; 0xf82 <sync_fs+0xbe>
     f78:	b5 cf       	rjmp	.-150    	; 0xee4 <sync_fs+0x20>
     f7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f7c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f7e:	ac 8d       	ldd	r26, Y+28	; 0x1c
     f80:	bd 8d       	ldd	r27, Y+29	; 0x1d
     f82:	c8 0e       	add	r12, r24
     f84:	d9 1e       	adc	r13, r25
     f86:	ea 1e       	adc	r14, r26
     f88:	fb 1e       	adc	r15, r27
     f8a:	01 e0       	ldi	r16, 0x01	; 1
     f8c:	10 e0       	ldi	r17, 0x00	; 0
     f8e:	a7 01       	movw	r20, r14
     f90:	96 01       	movw	r18, r12
     f92:	b5 01       	movw	r22, r10
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
     f9a:	21 e0       	ldi	r18, 0x01	; 1
     f9c:	82 1a       	sub	r8, r18
     f9e:	91 08       	sbc	r9, r1
     fa0:	31 e0       	ldi	r19, 0x01	; 1
     fa2:	83 16       	cp	r8, r19
     fa4:	91 04       	cpc	r9, r1
     fa6:	49 f7       	brne	.-46     	; 0xf7a <sync_fs+0xb6>
     fa8:	9d cf       	rjmp	.-198    	; 0xee4 <sync_fs+0x20>
     faa:	8d 81       	ldd	r24, Y+5	; 0x05
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	09 f0       	breq	.+2      	; 0xfb2 <sync_fs+0xee>
     fb0:	9d cf       	rjmp	.-198    	; 0xeec <sync_fs+0x28>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	be 01       	movw	r22, r28
     fb8:	6e 5c       	subi	r22, 0xCE	; 206
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	fb 01       	movw	r30, r22
     fbe:	8c 01       	movw	r16, r24
     fc0:	11 92       	st	Z+, r1
     fc2:	01 50       	subi	r16, 0x01	; 1
     fc4:	10 40       	sbci	r17, 0x00	; 0
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <sync_fs+0xfc>
     fc8:	85 e5       	ldi	r24, 0x55	; 85
     fca:	9a ea       	ldi	r25, 0xAA	; 170
     fcc:	fe 01       	movw	r30, r28
     fce:	e0 5d       	subi	r30, 0xD0	; 208
     fd0:	fd 4f       	sbci	r31, 0xFD	; 253
     fd2:	80 83       	st	Z, r24
     fd4:	91 83       	std	Z+1, r25	; 0x01
     fd6:	82 e5       	ldi	r24, 0x52	; 82
     fd8:	92 e5       	ldi	r25, 0x52	; 82
     fda:	a1 e6       	ldi	r26, 0x61	; 97
     fdc:	b1 e4       	ldi	r27, 0x41	; 65
     fde:	8a ab       	std	Y+50, r24	; 0x32
     fe0:	9b ab       	std	Y+51, r25	; 0x33
     fe2:	ac ab       	std	Y+52, r26	; 0x34
     fe4:	bd ab       	std	Y+53, r27	; 0x35
     fe6:	82 e7       	ldi	r24, 0x72	; 114
     fe8:	92 e7       	ldi	r25, 0x72	; 114
     fea:	a1 e4       	ldi	r26, 0x41	; 65
     fec:	b1 e6       	ldi	r27, 0x61	; 97
     fee:	7a 97       	sbiw	r30, 0x1a	; 26
     ff0:	80 83       	st	Z, r24
     ff2:	91 83       	std	Z+1, r25	; 0x01
     ff4:	a2 83       	std	Z+2, r26	; 0x02
     ff6:	b3 83       	std	Z+3, r27	; 0x03
     ff8:	8e 85       	ldd	r24, Y+14	; 0x0e
     ffa:	9f 85       	ldd	r25, Y+15	; 0x0f
     ffc:	a8 89       	ldd	r26, Y+16	; 0x10
     ffe:	b9 89       	ldd	r27, Y+17	; 0x11
    1000:	34 96       	adiw	r30, 0x04	; 4
    1002:	80 83       	st	Z, r24
    1004:	91 83       	std	Z+1, r25	; 0x01
    1006:	a2 83       	std	Z+2, r26	; 0x02
    1008:	b3 83       	std	Z+3, r27	; 0x03
    100a:	8a 85       	ldd	r24, Y+10	; 0x0a
    100c:	9b 85       	ldd	r25, Y+11	; 0x0b
    100e:	ac 85       	ldd	r26, Y+12	; 0x0c
    1010:	bd 85       	ldd	r27, Y+13	; 0x0d
    1012:	34 96       	adiw	r30, 0x04	; 4
    1014:	80 83       	st	Z, r24
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	a2 83       	std	Z+2, r26	; 0x02
    101a:	b3 83       	std	Z+3, r27	; 0x03
    101c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    101e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1020:	48 a1       	ldd	r20, Y+32	; 0x20
    1022:	59 a1       	ldd	r21, Y+33	; 0x21
    1024:	2f 5f       	subi	r18, 0xFF	; 255
    1026:	3f 4f       	sbci	r19, 0xFF	; 255
    1028:	4f 4f       	sbci	r20, 0xFF	; 255
    102a:	5f 4f       	sbci	r21, 0xFF	; 255
    102c:	2e a7       	std	Y+46, r18	; 0x2e
    102e:	3f a7       	std	Y+47, r19	; 0x2f
    1030:	48 ab       	std	Y+48, r20	; 0x30
    1032:	59 ab       	std	Y+49, r21	; 0x31
    1034:	01 e0       	ldi	r16, 0x01	; 1
    1036:	10 e0       	ldi	r17, 0x00	; 0
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    103e:	1d 82       	std	Y+5, r1	; 0x05
    1040:	55 cf       	rjmp	.-342    	; 0xeec <sync_fs+0x28>
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	5c cf       	rjmp	.-328    	; 0xefe <sync_fs+0x3a>

00001046 <put_fat.part.6>:
    1046:	2f 92       	push	r2
    1048:	3f 92       	push	r3
    104a:	4f 92       	push	r4
    104c:	5f 92       	push	r5
    104e:	6f 92       	push	r6
    1050:	7f 92       	push	r7
    1052:	8f 92       	push	r8
    1054:	9f 92       	push	r9
    1056:	af 92       	push	r10
    1058:	bf 92       	push	r11
    105a:	cf 92       	push	r12
    105c:	df 92       	push	r13
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	60 97       	sbiw	r28, 0x10	; 16
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	8f 87       	std	Y+15, r24	; 0x0f
    1076:	98 8b       	std	Y+16, r25	; 0x10
    1078:	6a 01       	movw	r12, r20
    107a:	7b 01       	movw	r14, r22
    107c:	48 01       	movw	r8, r16
    107e:	59 01       	movw	r10, r18
    1080:	dc 01       	movw	r26, r24
    1082:	8c 91       	ld	r24, X
    1084:	82 30       	cpi	r24, 0x02	; 2
    1086:	09 f4       	brne	.+2      	; 0x108a <put_fat.part.6+0x44>
    1088:	73 c1       	rjmp	.+742    	; 0x1370 <put_fat.part.6+0x32a>
    108a:	83 30       	cpi	r24, 0x03	; 3
    108c:	09 f4       	brne	.+2      	; 0x1090 <put_fat.part.6+0x4a>
    108e:	2a c1       	rjmp	.+596    	; 0x12e4 <put_fat.part.6+0x29e>
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	b9 f0       	breq	.+46     	; 0x10c2 <put_fat.part.6+0x7c>
    1094:	82 e0       	ldi	r24, 0x02	; 2
    1096:	60 96       	adiw	r28, 0x10	; 16
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	af 90       	pop	r10
    10b0:	9f 90       	pop	r9
    10b2:	8f 90       	pop	r8
    10b4:	7f 90       	pop	r7
    10b6:	6f 90       	pop	r6
    10b8:	5f 90       	pop	r5
    10ba:	4f 90       	pop	r4
    10bc:	3f 90       	pop	r3
    10be:	2f 90       	pop	r2
    10c0:	08 95       	ret
    10c2:	1a 01       	movw	r2, r20
    10c4:	36 94       	lsr	r3
    10c6:	27 94       	ror	r2
    10c8:	24 0e       	add	r2, r20
    10ca:	35 1e       	adc	r3, r21
    10cc:	92 96       	adiw	r26, 0x22	; 34
    10ce:	8d 91       	ld	r24, X+
    10d0:	9d 91       	ld	r25, X+
    10d2:	0d 90       	ld	r0, X+
    10d4:	bc 91       	ld	r27, X
    10d6:	a0 2d       	mov	r26, r0
    10d8:	91 01       	movw	r18, r2
    10da:	23 2f       	mov	r18, r19
    10dc:	33 27       	eor	r19, r19
    10de:	26 95       	lsr	r18
    10e0:	ac 01       	movw	r20, r24
    10e2:	bd 01       	movw	r22, r26
    10e4:	42 0f       	add	r20, r18
    10e6:	53 1f       	adc	r21, r19
    10e8:	61 1d       	adc	r22, r1
    10ea:	71 1d       	adc	r23, r1
    10ec:	49 83       	std	Y+1, r20	; 0x01
    10ee:	5a 83       	std	Y+2, r21	; 0x02
    10f0:	6b 83       	std	Y+3, r22	; 0x03
    10f2:	7c 83       	std	Y+4, r23	; 0x04
    10f4:	ef 85       	ldd	r30, Y+15	; 0x0f
    10f6:	f8 89       	ldd	r31, Y+16	; 0x10
    10f8:	46 a4       	ldd	r4, Z+46	; 0x2e
    10fa:	57 a4       	ldd	r5, Z+47	; 0x2f
    10fc:	60 a8       	ldd	r6, Z+48	; 0x30
    10fe:	71 a8       	ldd	r7, Z+49	; 0x31
    1100:	44 15       	cp	r20, r4
    1102:	55 05       	cpc	r21, r5
    1104:	66 05       	cpc	r22, r6
    1106:	77 05       	cpc	r23, r7
    1108:	09 f4       	brne	.+2      	; 0x110c <put_fat.part.6+0xc6>
    110a:	cb c2       	rjmp	.+1430   	; 0x16a2 <put_fat.part.6+0x65c>
    110c:	84 81       	ldd	r24, Z+4	; 0x04
    110e:	81 11       	cpse	r24, r1
    1110:	87 c1       	rjmp	.+782    	; 0x1420 <put_fat.part.6+0x3da>
    1112:	0f 85       	ldd	r16, Y+15	; 0x0f
    1114:	18 89       	ldd	r17, Y+16	; 0x10
    1116:	0e 5c       	subi	r16, 0xCE	; 206
    1118:	1f 4f       	sbci	r17, 0xFF	; 255
    111a:	0d 83       	std	Y+5, r16	; 0x05
    111c:	1e 83       	std	Y+6, r17	; 0x06
    111e:	01 e0       	ldi	r16, 0x01	; 1
    1120:	10 e0       	ldi	r17, 0x00	; 0
    1122:	29 81       	ldd	r18, Y+1	; 0x01
    1124:	3a 81       	ldd	r19, Y+2	; 0x02
    1126:	4b 81       	ldd	r20, Y+3	; 0x03
    1128:	5c 81       	ldd	r21, Y+4	; 0x04
    112a:	6d 81       	ldd	r22, Y+5	; 0x05
    112c:	7e 81       	ldd	r23, Y+6	; 0x06
    112e:	af 85       	ldd	r26, Y+15	; 0x0f
    1130:	b8 89       	ldd	r27, Y+16	; 0x10
    1132:	11 96       	adiw	r26, 0x01	; 1
    1134:	8c 91       	ld	r24, X
    1136:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    113a:	81 11       	cpse	r24, r1
    113c:	0e c1       	rjmp	.+540    	; 0x135a <put_fat.part.6+0x314>
    113e:	09 81       	ldd	r16, Y+1	; 0x01
    1140:	1a 81       	ldd	r17, Y+2	; 0x02
    1142:	2b 81       	ldd	r18, Y+3	; 0x03
    1144:	3c 81       	ldd	r19, Y+4	; 0x04
    1146:	af 85       	ldd	r26, Y+15	; 0x0f
    1148:	b8 89       	ldd	r27, Y+16	; 0x10
    114a:	9e 96       	adiw	r26, 0x2e	; 46
    114c:	0d 93       	st	X+, r16
    114e:	1d 93       	st	X+, r17
    1150:	2d 93       	st	X+, r18
    1152:	3c 93       	st	X, r19
    1154:	d1 97       	sbiw	r26, 0x31	; 49
    1156:	fd 01       	movw	r30, r26
    1158:	82 a1       	ldd	r24, Z+34	; 0x22
    115a:	93 a1       	ldd	r25, Z+35	; 0x23
    115c:	a4 a1       	ldd	r26, Z+36	; 0x24
    115e:	b5 a1       	ldd	r27, Z+37	; 0x25
    1160:	28 01       	movw	r4, r16
    1162:	39 01       	movw	r6, r18
    1164:	f1 01       	movw	r30, r2
    1166:	31 96       	adiw	r30, 0x01	; 1
    1168:	ed 83       	std	Y+5, r30	; 0x05
    116a:	fe 83       	std	Y+6, r31	; 0x06
    116c:	f1 e0       	ldi	r31, 0x01	; 1
    116e:	3f 22       	and	r3, r31
    1170:	97 01       	movw	r18, r14
    1172:	86 01       	movw	r16, r12
    1174:	01 70       	andi	r16, 0x01	; 1
    1176:	11 27       	eor	r17, r17
    1178:	22 27       	eor	r18, r18
    117a:	33 27       	eor	r19, r19
    117c:	0b 87       	std	Y+11, r16	; 0x0b
    117e:	1c 87       	std	Y+12, r17	; 0x0c
    1180:	2d 87       	std	Y+13, r18	; 0x0d
    1182:	3e 87       	std	Y+14, r19	; 0x0e
    1184:	c0 fe       	sbrs	r12, 0
    1186:	87 c2       	rjmp	.+1294   	; 0x1696 <put_fat.part.6+0x650>
    1188:	ef 85       	ldd	r30, Y+15	; 0x0f
    118a:	f8 89       	ldd	r31, Y+16	; 0x10
    118c:	e2 0d       	add	r30, r2
    118e:	f3 1d       	adc	r31, r3
    1190:	42 a9       	ldd	r20, Z+50	; 0x32
    1192:	4f 70       	andi	r20, 0x0F	; 15
    1194:	10 e1       	ldi	r17, 0x10	; 16
    1196:	81 9e       	mul	r8, r17
    1198:	90 01       	movw	r18, r0
    119a:	11 24       	eor	r1, r1
    119c:	42 2b       	or	r20, r18
    119e:	42 ab       	std	Z+50, r20	; 0x32
    11a0:	21 e0       	ldi	r18, 0x01	; 1
    11a2:	ef 85       	ldd	r30, Y+15	; 0x0f
    11a4:	f8 89       	ldd	r31, Y+16	; 0x10
    11a6:	24 83       	std	Z+4, r18	; 0x04
    11a8:	2d 81       	ldd	r18, Y+5	; 0x05
    11aa:	3e 81       	ldd	r19, Y+6	; 0x06
    11ac:	23 2f       	mov	r18, r19
    11ae:	33 27       	eor	r19, r19
    11b0:	26 95       	lsr	r18
    11b2:	6c 01       	movw	r12, r24
    11b4:	7d 01       	movw	r14, r26
    11b6:	c2 0e       	add	r12, r18
    11b8:	d3 1e       	adc	r13, r19
    11ba:	e1 1c       	adc	r14, r1
    11bc:	f1 1c       	adc	r15, r1
    11be:	09 81       	ldd	r16, Y+1	; 0x01
    11c0:	1a 81       	ldd	r17, Y+2	; 0x02
    11c2:	2b 81       	ldd	r18, Y+3	; 0x03
    11c4:	3c 81       	ldd	r19, Y+4	; 0x04
    11c6:	c0 16       	cp	r12, r16
    11c8:	d1 06       	cpc	r13, r17
    11ca:	e2 06       	cpc	r14, r18
    11cc:	f3 06       	cpc	r15, r19
    11ce:	09 f4       	brne	.+2      	; 0x11d2 <put_fat.part.6+0x18c>
    11d0:	6a c0       	rjmp	.+212    	; 0x12a6 <put_fat.part.6+0x260>
    11d2:	a9 01       	movw	r20, r18
    11d4:	98 01       	movw	r18, r16
    11d6:	df 01       	movw	r26, r30
    11d8:	f2 96       	adiw	r30, 0x32	; 50
    11da:	ef 83       	std	Y+7, r30	; 0x07
    11dc:	f8 87       	std	Y+8, r31	; 0x08
    11de:	01 e0       	ldi	r16, 0x01	; 1
    11e0:	10 e0       	ldi	r17, 0x00	; 0
    11e2:	bf 01       	movw	r22, r30
    11e4:	11 96       	adiw	r26, 0x01	; 1
    11e6:	8c 91       	ld	r24, X
    11e8:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    11ec:	81 11       	cpse	r24, r1
    11ee:	be c0       	rjmp	.+380    	; 0x136c <put_fat.part.6+0x326>
    11f0:	ef 85       	ldd	r30, Y+15	; 0x0f
    11f2:	f8 89       	ldd	r31, Y+16	; 0x10
    11f4:	14 82       	std	Z+4, r1	; 0x04
    11f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    11f8:	93 8d       	ldd	r25, Z+27	; 0x1b
    11fa:	a4 8d       	ldd	r26, Z+28	; 0x1c
    11fc:	b5 8d       	ldd	r27, Z+29	; 0x1d
    11fe:	42 a1       	ldd	r20, Z+34	; 0x22
    1200:	53 a1       	ldd	r21, Z+35	; 0x23
    1202:	64 a1       	ldd	r22, Z+36	; 0x24
    1204:	75 a1       	ldd	r23, Z+37	; 0x25
    1206:	09 81       	ldd	r16, Y+1	; 0x01
    1208:	1a 81       	ldd	r17, Y+2	; 0x02
    120a:	2b 81       	ldd	r18, Y+3	; 0x03
    120c:	3c 81       	ldd	r19, Y+4	; 0x04
    120e:	04 1b       	sub	r16, r20
    1210:	15 0b       	sbc	r17, r21
    1212:	26 0b       	sbc	r18, r22
    1214:	37 0b       	sbc	r19, r23
    1216:	08 17       	cp	r16, r24
    1218:	19 07       	cpc	r17, r25
    121a:	2a 07       	cpc	r18, r26
    121c:	3b 07       	cpc	r19, r27
    121e:	70 f5       	brcc	.+92     	; 0x127c <put_fat.part.6+0x236>
    1220:	23 81       	ldd	r18, Z+3	; 0x03
    1222:	22 2e       	mov	r2, r18
    1224:	31 2c       	mov	r3, r1
    1226:	12 e0       	ldi	r17, 0x02	; 2
    1228:	21 16       	cp	r2, r17
    122a:	31 04       	cpc	r3, r1
    122c:	38 f1       	brcs	.+78     	; 0x127c <put_fat.part.6+0x236>
    122e:	c9 82       	std	Y+1, r12	; 0x01
    1230:	da 82       	std	Y+2, r13	; 0x02
    1232:	eb 82       	std	Y+3, r14	; 0x03
    1234:	fc 82       	std	Y+4, r15	; 0x04
    1236:	ef 80       	ldd	r14, Y+7	; 0x07
    1238:	f8 84       	ldd	r15, Y+8	; 0x08
    123a:	06 c0       	rjmp	.+12     	; 0x1248 <put_fat.part.6+0x202>
    123c:	ef 85       	ldd	r30, Y+15	; 0x0f
    123e:	f8 89       	ldd	r31, Y+16	; 0x10
    1240:	82 8d       	ldd	r24, Z+26	; 0x1a
    1242:	93 8d       	ldd	r25, Z+27	; 0x1b
    1244:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1246:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1248:	48 0e       	add	r4, r24
    124a:	59 1e       	adc	r5, r25
    124c:	6a 1e       	adc	r6, r26
    124e:	7b 1e       	adc	r7, r27
    1250:	01 e0       	ldi	r16, 0x01	; 1
    1252:	10 e0       	ldi	r17, 0x00	; 0
    1254:	a3 01       	movw	r20, r6
    1256:	92 01       	movw	r18, r4
    1258:	b7 01       	movw	r22, r14
    125a:	af 85       	ldd	r26, Y+15	; 0x0f
    125c:	b8 89       	ldd	r27, Y+16	; 0x10
    125e:	11 96       	adiw	r26, 0x01	; 1
    1260:	8c 91       	ld	r24, X
    1262:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    1266:	b1 e0       	ldi	r27, 0x01	; 1
    1268:	2b 1a       	sub	r2, r27
    126a:	31 08       	sbc	r3, r1
    126c:	e1 e0       	ldi	r30, 0x01	; 1
    126e:	2e 16       	cp	r2, r30
    1270:	31 04       	cpc	r3, r1
    1272:	21 f7       	brne	.-56     	; 0x123c <put_fat.part.6+0x1f6>
    1274:	c9 80       	ldd	r12, Y+1	; 0x01
    1276:	da 80       	ldd	r13, Y+2	; 0x02
    1278:	eb 80       	ldd	r14, Y+3	; 0x03
    127a:	fc 80       	ldd	r15, Y+4	; 0x04
    127c:	01 e0       	ldi	r16, 0x01	; 1
    127e:	10 e0       	ldi	r17, 0x00	; 0
    1280:	a7 01       	movw	r20, r14
    1282:	96 01       	movw	r18, r12
    1284:	6f 81       	ldd	r22, Y+7	; 0x07
    1286:	78 85       	ldd	r23, Y+8	; 0x08
    1288:	ef 85       	ldd	r30, Y+15	; 0x0f
    128a:	f8 89       	ldd	r31, Y+16	; 0x10
    128c:	81 81       	ldd	r24, Z+1	; 0x01
    128e:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    1292:	81 11       	cpse	r24, r1
    1294:	62 c0       	rjmp	.+196    	; 0x135a <put_fat.part.6+0x314>
    1296:	af 85       	ldd	r26, Y+15	; 0x0f
    1298:	b8 89       	ldd	r27, Y+16	; 0x10
    129a:	9e 96       	adiw	r26, 0x2e	; 46
    129c:	cd 92       	st	X+, r12
    129e:	dd 92       	st	X+, r13
    12a0:	ed 92       	st	X+, r14
    12a2:	fc 92       	st	X, r15
    12a4:	d1 97       	sbiw	r26, 0x31	; 49
    12a6:	ed 81       	ldd	r30, Y+5	; 0x05
    12a8:	fe 81       	ldd	r31, Y+6	; 0x06
    12aa:	f1 70       	andi	r31, 0x01	; 1
    12ac:	0b 85       	ldd	r16, Y+11	; 0x0b
    12ae:	1c 85       	ldd	r17, Y+12	; 0x0c
    12b0:	2d 85       	ldd	r18, Y+13	; 0x0d
    12b2:	3e 85       	ldd	r19, Y+14	; 0x0e
    12b4:	01 2b       	or	r16, r17
    12b6:	02 2b       	or	r16, r18
    12b8:	03 2b       	or	r16, r19
    12ba:	09 f4       	brne	.+2      	; 0x12be <put_fat.part.6+0x278>
    12bc:	f5 c1       	rjmp	.+1002   	; 0x16a8 <put_fat.part.6+0x662>
    12be:	74 e0       	ldi	r23, 0x04	; 4
    12c0:	b6 94       	lsr	r11
    12c2:	a7 94       	ror	r10
    12c4:	97 94       	ror	r9
    12c6:	87 94       	ror	r8
    12c8:	7a 95       	dec	r23
    12ca:	d1 f7       	brne	.-12     	; 0x12c0 <put_fat.part.6+0x27a>
    12cc:	88 2d       	mov	r24, r8
    12ce:	2f 85       	ldd	r18, Y+15	; 0x0f
    12d0:	38 89       	ldd	r19, Y+16	; 0x10
    12d2:	e2 0f       	add	r30, r18
    12d4:	f3 1f       	adc	r31, r19
    12d6:	d9 01       	movw	r26, r18
    12d8:	82 ab       	std	Z+50, r24	; 0x32
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	14 96       	adiw	r26, 0x04	; 4
    12de:	8c 93       	st	X, r24
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	d9 ce       	rjmp	.-590    	; 0x1096 <put_fat.part.6+0x50>
    12e4:	8a 01       	movw	r16, r20
    12e6:	9b 01       	movw	r18, r22
    12e8:	47 e0       	ldi	r20, 0x07	; 7
    12ea:	36 95       	lsr	r19
    12ec:	27 95       	ror	r18
    12ee:	17 95       	ror	r17
    12f0:	07 95       	ror	r16
    12f2:	4a 95       	dec	r20
    12f4:	d1 f7       	brne	.-12     	; 0x12ea <put_fat.part.6+0x2a4>
    12f6:	ef 85       	ldd	r30, Y+15	; 0x0f
    12f8:	f8 89       	ldd	r31, Y+16	; 0x10
    12fa:	82 a1       	ldd	r24, Z+34	; 0x22
    12fc:	93 a1       	ldd	r25, Z+35	; 0x23
    12fe:	a4 a1       	ldd	r26, Z+36	; 0x24
    1300:	b5 a1       	ldd	r27, Z+37	; 0x25
    1302:	08 0f       	add	r16, r24
    1304:	19 1f       	adc	r17, r25
    1306:	2a 1f       	adc	r18, r26
    1308:	3b 1f       	adc	r19, r27
    130a:	09 83       	std	Y+1, r16	; 0x01
    130c:	1a 83       	std	Y+2, r17	; 0x02
    130e:	2b 83       	std	Y+3, r18	; 0x03
    1310:	3c 83       	std	Y+4, r19	; 0x04
    1312:	46 a4       	ldd	r4, Z+46	; 0x2e
    1314:	57 a4       	ldd	r5, Z+47	; 0x2f
    1316:	60 a8       	ldd	r6, Z+48	; 0x30
    1318:	71 a8       	ldd	r7, Z+49	; 0x31
    131a:	04 15       	cp	r16, r4
    131c:	15 05       	cpc	r17, r5
    131e:	26 05       	cpc	r18, r6
    1320:	37 05       	cpc	r19, r7
    1322:	09 f4       	brne	.+2      	; 0x1326 <put_fat.part.6+0x2e0>
    1324:	8e c1       	rjmp	.+796    	; 0x1642 <put_fat.part.6+0x5fc>
    1326:	84 81       	ldd	r24, Z+4	; 0x04
    1328:	81 11       	cpse	r24, r1
    132a:	28 c1       	rjmp	.+592    	; 0x157c <put_fat.part.6+0x536>
    132c:	0f 85       	ldd	r16, Y+15	; 0x0f
    132e:	18 89       	ldd	r17, Y+16	; 0x10
    1330:	0e 5c       	subi	r16, 0xCE	; 206
    1332:	1f 4f       	sbci	r17, 0xFF	; 255
    1334:	0d 83       	std	Y+5, r16	; 0x05
    1336:	1e 83       	std	Y+6, r17	; 0x06
    1338:	01 e0       	ldi	r16, 0x01	; 1
    133a:	10 e0       	ldi	r17, 0x00	; 0
    133c:	29 81       	ldd	r18, Y+1	; 0x01
    133e:	3a 81       	ldd	r19, Y+2	; 0x02
    1340:	4b 81       	ldd	r20, Y+3	; 0x03
    1342:	5c 81       	ldd	r21, Y+4	; 0x04
    1344:	6d 81       	ldd	r22, Y+5	; 0x05
    1346:	7e 81       	ldd	r23, Y+6	; 0x06
    1348:	af 85       	ldd	r26, Y+15	; 0x0f
    134a:	b8 89       	ldd	r27, Y+16	; 0x10
    134c:	11 96       	adiw	r26, 0x01	; 1
    134e:	8c 91       	ld	r24, X
    1350:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    1354:	88 23       	and	r24, r24
    1356:	09 f4       	brne	.+2      	; 0x135a <put_fat.part.6+0x314>
    1358:	68 c1       	rjmp	.+720    	; 0x162a <put_fat.part.6+0x5e4>
    135a:	8f ef       	ldi	r24, 0xFF	; 255
    135c:	9f ef       	ldi	r25, 0xFF	; 255
    135e:	dc 01       	movw	r26, r24
    1360:	ef 85       	ldd	r30, Y+15	; 0x0f
    1362:	f8 89       	ldd	r31, Y+16	; 0x10
    1364:	86 a7       	std	Z+46, r24	; 0x2e
    1366:	97 a7       	std	Z+47, r25	; 0x2f
    1368:	a0 ab       	std	Z+48, r26	; 0x30
    136a:	b1 ab       	std	Z+49, r27	; 0x31
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	93 ce       	rjmp	.-730    	; 0x1096 <put_fat.part.6+0x50>
    1370:	33 27       	eor	r19, r19
    1372:	2f 2d       	mov	r18, r15
    1374:	1e 2d       	mov	r17, r14
    1376:	0d 2d       	mov	r16, r13
    1378:	ef 85       	ldd	r30, Y+15	; 0x0f
    137a:	f8 89       	ldd	r31, Y+16	; 0x10
    137c:	82 a1       	ldd	r24, Z+34	; 0x22
    137e:	93 a1       	ldd	r25, Z+35	; 0x23
    1380:	a4 a1       	ldd	r26, Z+36	; 0x24
    1382:	b5 a1       	ldd	r27, Z+37	; 0x25
    1384:	08 0f       	add	r16, r24
    1386:	19 1f       	adc	r17, r25
    1388:	2a 1f       	adc	r18, r26
    138a:	3b 1f       	adc	r19, r27
    138c:	09 83       	std	Y+1, r16	; 0x01
    138e:	1a 83       	std	Y+2, r17	; 0x02
    1390:	2b 83       	std	Y+3, r18	; 0x03
    1392:	3c 83       	std	Y+4, r19	; 0x04
    1394:	46 a4       	ldd	r4, Z+46	; 0x2e
    1396:	57 a4       	ldd	r5, Z+47	; 0x2f
    1398:	60 a8       	ldd	r6, Z+48	; 0x30
    139a:	71 a8       	ldd	r7, Z+49	; 0x31
    139c:	04 15       	cp	r16, r4
    139e:	15 05       	cpc	r17, r5
    13a0:	26 05       	cpc	r18, r6
    13a2:	37 05       	cpc	r19, r7
    13a4:	29 f1       	breq	.+74     	; 0x13f0 <put_fat.part.6+0x3aa>
    13a6:	84 81       	ldd	r24, Z+4	; 0x04
    13a8:	81 11       	cpse	r24, r1
    13aa:	91 c0       	rjmp	.+290    	; 0x14ce <put_fat.part.6+0x488>
    13ac:	0f 85       	ldd	r16, Y+15	; 0x0f
    13ae:	18 89       	ldd	r17, Y+16	; 0x10
    13b0:	0e 5c       	subi	r16, 0xCE	; 206
    13b2:	1f 4f       	sbci	r17, 0xFF	; 255
    13b4:	0d 83       	std	Y+5, r16	; 0x05
    13b6:	1e 83       	std	Y+6, r17	; 0x06
    13b8:	01 e0       	ldi	r16, 0x01	; 1
    13ba:	10 e0       	ldi	r17, 0x00	; 0
    13bc:	29 81       	ldd	r18, Y+1	; 0x01
    13be:	3a 81       	ldd	r19, Y+2	; 0x02
    13c0:	4b 81       	ldd	r20, Y+3	; 0x03
    13c2:	5c 81       	ldd	r21, Y+4	; 0x04
    13c4:	6d 81       	ldd	r22, Y+5	; 0x05
    13c6:	7e 81       	ldd	r23, Y+6	; 0x06
    13c8:	af 85       	ldd	r26, Y+15	; 0x0f
    13ca:	b8 89       	ldd	r27, Y+16	; 0x10
    13cc:	11 96       	adiw	r26, 0x01	; 1
    13ce:	8c 91       	ld	r24, X
    13d0:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    13d4:	81 11       	cpse	r24, r1
    13d6:	c1 cf       	rjmp	.-126    	; 0x135a <put_fat.part.6+0x314>
    13d8:	09 81       	ldd	r16, Y+1	; 0x01
    13da:	1a 81       	ldd	r17, Y+2	; 0x02
    13dc:	2b 81       	ldd	r18, Y+3	; 0x03
    13de:	3c 81       	ldd	r19, Y+4	; 0x04
    13e0:	af 85       	ldd	r26, Y+15	; 0x0f
    13e2:	b8 89       	ldd	r27, Y+16	; 0x10
    13e4:	9e 96       	adiw	r26, 0x2e	; 46
    13e6:	0d 93       	st	X+, r16
    13e8:	1d 93       	st	X+, r17
    13ea:	2d 93       	st	X+, r18
    13ec:	3c 93       	st	X, r19
    13ee:	d1 97       	sbiw	r26, 0x31	; 49
    13f0:	cc 0c       	add	r12, r12
    13f2:	dd 1c       	adc	r13, r13
    13f4:	ee 1c       	adc	r14, r14
    13f6:	ff 1c       	adc	r15, r15
    13f8:	e8 94       	clt
    13fa:	c0 f8       	bld	r12, 0
    13fc:	b1 e0       	ldi	r27, 0x01	; 1
    13fe:	db 22       	and	r13, r27
    1400:	ee 24       	eor	r14, r14
    1402:	ff 24       	eor	r15, r15
    1404:	f6 01       	movw	r30, r12
    1406:	f2 96       	adiw	r30, 0x32	; 50
    1408:	0f 85       	ldd	r16, Y+15	; 0x0f
    140a:	18 89       	ldd	r17, Y+16	; 0x10
    140c:	e0 0f       	add	r30, r16
    140e:	f1 1f       	adc	r31, r17
    1410:	80 82       	st	Z, r8
    1412:	91 82       	std	Z+1, r9	; 0x01
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	d8 01       	movw	r26, r16
    1418:	14 96       	adiw	r26, 0x04	; 4
    141a:	8c 93       	st	X, r24
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	3b ce       	rjmp	.-906    	; 0x1096 <put_fat.part.6+0x50>
    1420:	f2 96       	adiw	r30, 0x32	; 50
    1422:	ed 83       	std	Y+5, r30	; 0x05
    1424:	fe 83       	std	Y+6, r31	; 0x06
    1426:	01 e0       	ldi	r16, 0x01	; 1
    1428:	10 e0       	ldi	r17, 0x00	; 0
    142a:	a3 01       	movw	r20, r6
    142c:	92 01       	movw	r18, r4
    142e:	bf 01       	movw	r22, r30
    1430:	af 85       	ldd	r26, Y+15	; 0x0f
    1432:	b8 89       	ldd	r27, Y+16	; 0x10
    1434:	11 96       	adiw	r26, 0x01	; 1
    1436:	8c 91       	ld	r24, X
    1438:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    143c:	81 11       	cpse	r24, r1
    143e:	96 cf       	rjmp	.-212    	; 0x136c <put_fat.part.6+0x326>
    1440:	ef 85       	ldd	r30, Y+15	; 0x0f
    1442:	f8 89       	ldd	r31, Y+16	; 0x10
    1444:	14 82       	std	Z+4, r1	; 0x04
    1446:	82 8d       	ldd	r24, Z+26	; 0x1a
    1448:	93 8d       	ldd	r25, Z+27	; 0x1b
    144a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    144c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    144e:	42 a1       	ldd	r20, Z+34	; 0x22
    1450:	53 a1       	ldd	r21, Z+35	; 0x23
    1452:	64 a1       	ldd	r22, Z+36	; 0x24
    1454:	75 a1       	ldd	r23, Z+37	; 0x25
    1456:	93 01       	movw	r18, r6
    1458:	82 01       	movw	r16, r4
    145a:	04 1b       	sub	r16, r20
    145c:	15 0b       	sbc	r17, r21
    145e:	26 0b       	sbc	r18, r22
    1460:	37 0b       	sbc	r19, r23
    1462:	08 17       	cp	r16, r24
    1464:	19 07       	cpc	r17, r25
    1466:	2a 07       	cpc	r18, r26
    1468:	3b 07       	cpc	r19, r27
    146a:	08 f0       	brcs	.+2      	; 0x146e <put_fat.part.6+0x428>
    146c:	58 ce       	rjmp	.-848    	; 0x111e <put_fat.part.6+0xd8>
    146e:	23 81       	ldd	r18, Z+3	; 0x03
    1470:	02 2f       	mov	r16, r18
    1472:	10 e0       	ldi	r17, 0x00	; 0
    1474:	02 30       	cpi	r16, 0x02	; 2
    1476:	11 05       	cpc	r17, r1
    1478:	08 f4       	brcc	.+2      	; 0x147c <put_fat.part.6+0x436>
    147a:	51 ce       	rjmp	.-862    	; 0x111e <put_fat.part.6+0xd8>
    147c:	cf 82       	std	Y+7, r12	; 0x07
    147e:	d8 86       	std	Y+8, r13	; 0x08
    1480:	e9 86       	std	Y+9, r14	; 0x09
    1482:	fa 86       	std	Y+10, r15	; 0x0a
    1484:	cd 80       	ldd	r12, Y+5	; 0x05
    1486:	de 80       	ldd	r13, Y+6	; 0x06
    1488:	78 01       	movw	r14, r16
    148a:	06 c0       	rjmp	.+12     	; 0x1498 <put_fat.part.6+0x452>
    148c:	ef 85       	ldd	r30, Y+15	; 0x0f
    148e:	f8 89       	ldd	r31, Y+16	; 0x10
    1490:	82 8d       	ldd	r24, Z+26	; 0x1a
    1492:	93 8d       	ldd	r25, Z+27	; 0x1b
    1494:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1496:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1498:	48 0e       	add	r4, r24
    149a:	59 1e       	adc	r5, r25
    149c:	6a 1e       	adc	r6, r26
    149e:	7b 1e       	adc	r7, r27
    14a0:	01 e0       	ldi	r16, 0x01	; 1
    14a2:	10 e0       	ldi	r17, 0x00	; 0
    14a4:	a3 01       	movw	r20, r6
    14a6:	92 01       	movw	r18, r4
    14a8:	b6 01       	movw	r22, r12
    14aa:	af 85       	ldd	r26, Y+15	; 0x0f
    14ac:	b8 89       	ldd	r27, Y+16	; 0x10
    14ae:	11 96       	adiw	r26, 0x01	; 1
    14b0:	8c 91       	ld	r24, X
    14b2:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    14b6:	b1 e0       	ldi	r27, 0x01	; 1
    14b8:	eb 1a       	sub	r14, r27
    14ba:	f1 08       	sbc	r15, r1
    14bc:	e1 e0       	ldi	r30, 0x01	; 1
    14be:	ee 16       	cp	r14, r30
    14c0:	f1 04       	cpc	r15, r1
    14c2:	21 f7       	brne	.-56     	; 0x148c <put_fat.part.6+0x446>
    14c4:	cf 80       	ldd	r12, Y+7	; 0x07
    14c6:	d8 84       	ldd	r13, Y+8	; 0x08
    14c8:	e9 84       	ldd	r14, Y+9	; 0x09
    14ca:	fa 84       	ldd	r15, Y+10	; 0x0a
    14cc:	28 ce       	rjmp	.-944    	; 0x111e <put_fat.part.6+0xd8>
    14ce:	f2 96       	adiw	r30, 0x32	; 50
    14d0:	ed 83       	std	Y+5, r30	; 0x05
    14d2:	fe 83       	std	Y+6, r31	; 0x06
    14d4:	01 e0       	ldi	r16, 0x01	; 1
    14d6:	10 e0       	ldi	r17, 0x00	; 0
    14d8:	a3 01       	movw	r20, r6
    14da:	92 01       	movw	r18, r4
    14dc:	bf 01       	movw	r22, r30
    14de:	af 85       	ldd	r26, Y+15	; 0x0f
    14e0:	b8 89       	ldd	r27, Y+16	; 0x10
    14e2:	11 96       	adiw	r26, 0x01	; 1
    14e4:	8c 91       	ld	r24, X
    14e6:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    14ea:	81 11       	cpse	r24, r1
    14ec:	3f cf       	rjmp	.-386    	; 0x136c <put_fat.part.6+0x326>
    14ee:	ef 85       	ldd	r30, Y+15	; 0x0f
    14f0:	f8 89       	ldd	r31, Y+16	; 0x10
    14f2:	14 82       	std	Z+4, r1	; 0x04
    14f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    14f6:	93 8d       	ldd	r25, Z+27	; 0x1b
    14f8:	a4 8d       	ldd	r26, Z+28	; 0x1c
    14fa:	b5 8d       	ldd	r27, Z+29	; 0x1d
    14fc:	42 a1       	ldd	r20, Z+34	; 0x22
    14fe:	53 a1       	ldd	r21, Z+35	; 0x23
    1500:	64 a1       	ldd	r22, Z+36	; 0x24
    1502:	75 a1       	ldd	r23, Z+37	; 0x25
    1504:	93 01       	movw	r18, r6
    1506:	82 01       	movw	r16, r4
    1508:	04 1b       	sub	r16, r20
    150a:	15 0b       	sbc	r17, r21
    150c:	26 0b       	sbc	r18, r22
    150e:	37 0b       	sbc	r19, r23
    1510:	08 17       	cp	r16, r24
    1512:	19 07       	cpc	r17, r25
    1514:	2a 07       	cpc	r18, r26
    1516:	3b 07       	cpc	r19, r27
    1518:	08 f0       	brcs	.+2      	; 0x151c <put_fat.part.6+0x4d6>
    151a:	4e cf       	rjmp	.-356    	; 0x13b8 <put_fat.part.6+0x372>
    151c:	23 81       	ldd	r18, Z+3	; 0x03
    151e:	22 2e       	mov	r2, r18
    1520:	31 2c       	mov	r3, r1
    1522:	12 e0       	ldi	r17, 0x02	; 2
    1524:	21 16       	cp	r2, r17
    1526:	31 04       	cpc	r3, r1
    1528:	08 f4       	brcc	.+2      	; 0x152c <put_fat.part.6+0x4e6>
    152a:	46 cf       	rjmp	.-372    	; 0x13b8 <put_fat.part.6+0x372>
    152c:	cf 82       	std	Y+7, r12	; 0x07
    152e:	d8 86       	std	Y+8, r13	; 0x08
    1530:	e9 86       	std	Y+9, r14	; 0x09
    1532:	fa 86       	std	Y+10, r15	; 0x0a
    1534:	ed 80       	ldd	r14, Y+5	; 0x05
    1536:	fe 80       	ldd	r15, Y+6	; 0x06
    1538:	06 c0       	rjmp	.+12     	; 0x1546 <put_fat.part.6+0x500>
    153a:	ef 85       	ldd	r30, Y+15	; 0x0f
    153c:	f8 89       	ldd	r31, Y+16	; 0x10
    153e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1540:	93 8d       	ldd	r25, Z+27	; 0x1b
    1542:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1544:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1546:	48 0e       	add	r4, r24
    1548:	59 1e       	adc	r5, r25
    154a:	6a 1e       	adc	r6, r26
    154c:	7b 1e       	adc	r7, r27
    154e:	01 e0       	ldi	r16, 0x01	; 1
    1550:	10 e0       	ldi	r17, 0x00	; 0
    1552:	a3 01       	movw	r20, r6
    1554:	92 01       	movw	r18, r4
    1556:	b7 01       	movw	r22, r14
    1558:	af 85       	ldd	r26, Y+15	; 0x0f
    155a:	b8 89       	ldd	r27, Y+16	; 0x10
    155c:	11 96       	adiw	r26, 0x01	; 1
    155e:	8c 91       	ld	r24, X
    1560:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    1564:	b1 e0       	ldi	r27, 0x01	; 1
    1566:	2b 1a       	sub	r2, r27
    1568:	31 08       	sbc	r3, r1
    156a:	e1 e0       	ldi	r30, 0x01	; 1
    156c:	2e 16       	cp	r2, r30
    156e:	31 04       	cpc	r3, r1
    1570:	21 f7       	brne	.-56     	; 0x153a <put_fat.part.6+0x4f4>
    1572:	cf 80       	ldd	r12, Y+7	; 0x07
    1574:	d8 84       	ldd	r13, Y+8	; 0x08
    1576:	e9 84       	ldd	r14, Y+9	; 0x09
    1578:	fa 84       	ldd	r15, Y+10	; 0x0a
    157a:	1e cf       	rjmp	.-452    	; 0x13b8 <put_fat.part.6+0x372>
    157c:	f2 96       	adiw	r30, 0x32	; 50
    157e:	ed 83       	std	Y+5, r30	; 0x05
    1580:	fe 83       	std	Y+6, r31	; 0x06
    1582:	01 e0       	ldi	r16, 0x01	; 1
    1584:	10 e0       	ldi	r17, 0x00	; 0
    1586:	a3 01       	movw	r20, r6
    1588:	92 01       	movw	r18, r4
    158a:	bf 01       	movw	r22, r30
    158c:	af 85       	ldd	r26, Y+15	; 0x0f
    158e:	b8 89       	ldd	r27, Y+16	; 0x10
    1590:	11 96       	adiw	r26, 0x01	; 1
    1592:	8c 91       	ld	r24, X
    1594:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    1598:	81 11       	cpse	r24, r1
    159a:	e8 ce       	rjmp	.-560    	; 0x136c <put_fat.part.6+0x326>
    159c:	ef 85       	ldd	r30, Y+15	; 0x0f
    159e:	f8 89       	ldd	r31, Y+16	; 0x10
    15a0:	14 82       	std	Z+4, r1	; 0x04
    15a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    15a4:	93 8d       	ldd	r25, Z+27	; 0x1b
    15a6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    15a8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    15aa:	42 a1       	ldd	r20, Z+34	; 0x22
    15ac:	53 a1       	ldd	r21, Z+35	; 0x23
    15ae:	64 a1       	ldd	r22, Z+36	; 0x24
    15b0:	75 a1       	ldd	r23, Z+37	; 0x25
    15b2:	93 01       	movw	r18, r6
    15b4:	82 01       	movw	r16, r4
    15b6:	04 1b       	sub	r16, r20
    15b8:	15 0b       	sbc	r17, r21
    15ba:	26 0b       	sbc	r18, r22
    15bc:	37 0b       	sbc	r19, r23
    15be:	08 17       	cp	r16, r24
    15c0:	19 07       	cpc	r17, r25
    15c2:	2a 07       	cpc	r18, r26
    15c4:	3b 07       	cpc	r19, r27
    15c6:	08 f0       	brcs	.+2      	; 0x15ca <put_fat.part.6+0x584>
    15c8:	b7 ce       	rjmp	.-658    	; 0x1338 <put_fat.part.6+0x2f2>
    15ca:	23 81       	ldd	r18, Z+3	; 0x03
    15cc:	22 2e       	mov	r2, r18
    15ce:	31 2c       	mov	r3, r1
    15d0:	12 e0       	ldi	r17, 0x02	; 2
    15d2:	21 16       	cp	r2, r17
    15d4:	31 04       	cpc	r3, r1
    15d6:	08 f4       	brcc	.+2      	; 0x15da <put_fat.part.6+0x594>
    15d8:	af ce       	rjmp	.-674    	; 0x1338 <put_fat.part.6+0x2f2>
    15da:	cf 82       	std	Y+7, r12	; 0x07
    15dc:	d8 86       	std	Y+8, r13	; 0x08
    15de:	e9 86       	std	Y+9, r14	; 0x09
    15e0:	fa 86       	std	Y+10, r15	; 0x0a
    15e2:	ed 80       	ldd	r14, Y+5	; 0x05
    15e4:	fe 80       	ldd	r15, Y+6	; 0x06
    15e6:	06 c0       	rjmp	.+12     	; 0x15f4 <put_fat.part.6+0x5ae>
    15e8:	ef 85       	ldd	r30, Y+15	; 0x0f
    15ea:	f8 89       	ldd	r31, Y+16	; 0x10
    15ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    15ee:	93 8d       	ldd	r25, Z+27	; 0x1b
    15f0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    15f2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    15f4:	48 0e       	add	r4, r24
    15f6:	59 1e       	adc	r5, r25
    15f8:	6a 1e       	adc	r6, r26
    15fa:	7b 1e       	adc	r7, r27
    15fc:	01 e0       	ldi	r16, 0x01	; 1
    15fe:	10 e0       	ldi	r17, 0x00	; 0
    1600:	a3 01       	movw	r20, r6
    1602:	92 01       	movw	r18, r4
    1604:	b7 01       	movw	r22, r14
    1606:	af 85       	ldd	r26, Y+15	; 0x0f
    1608:	b8 89       	ldd	r27, Y+16	; 0x10
    160a:	11 96       	adiw	r26, 0x01	; 1
    160c:	8c 91       	ld	r24, X
    160e:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    1612:	b1 e0       	ldi	r27, 0x01	; 1
    1614:	2b 1a       	sub	r2, r27
    1616:	31 08       	sbc	r3, r1
    1618:	e1 e0       	ldi	r30, 0x01	; 1
    161a:	2e 16       	cp	r2, r30
    161c:	31 04       	cpc	r3, r1
    161e:	21 f7       	brne	.-56     	; 0x15e8 <put_fat.part.6+0x5a2>
    1620:	cf 80       	ldd	r12, Y+7	; 0x07
    1622:	d8 84       	ldd	r13, Y+8	; 0x08
    1624:	e9 84       	ldd	r14, Y+9	; 0x09
    1626:	fa 84       	ldd	r15, Y+10	; 0x0a
    1628:	87 ce       	rjmp	.-754    	; 0x1338 <put_fat.part.6+0x2f2>
    162a:	09 81       	ldd	r16, Y+1	; 0x01
    162c:	1a 81       	ldd	r17, Y+2	; 0x02
    162e:	2b 81       	ldd	r18, Y+3	; 0x03
    1630:	3c 81       	ldd	r19, Y+4	; 0x04
    1632:	af 85       	ldd	r26, Y+15	; 0x0f
    1634:	b8 89       	ldd	r27, Y+16	; 0x10
    1636:	9e 96       	adiw	r26, 0x2e	; 46
    1638:	0d 93       	st	X+, r16
    163a:	1d 93       	st	X+, r17
    163c:	2d 93       	st	X+, r18
    163e:	3c 93       	st	X, r19
    1640:	d1 97       	sbiw	r26, 0x31	; 49
    1642:	cc 0c       	add	r12, r12
    1644:	dd 1c       	adc	r13, r13
    1646:	ee 1c       	adc	r14, r14
    1648:	ff 1c       	adc	r15, r15
    164a:	cc 0c       	add	r12, r12
    164c:	dd 1c       	adc	r13, r13
    164e:	ee 1c       	adc	r14, r14
    1650:	ff 1c       	adc	r15, r15
    1652:	bc ef       	ldi	r27, 0xFC	; 252
    1654:	cb 22       	and	r12, r27
    1656:	b1 e0       	ldi	r27, 0x01	; 1
    1658:	db 22       	and	r13, r27
    165a:	ee 24       	eor	r14, r14
    165c:	ff 24       	eor	r15, r15
    165e:	f6 01       	movw	r30, r12
    1660:	f2 96       	adiw	r30, 0x32	; 50
    1662:	0f 85       	ldd	r16, Y+15	; 0x0f
    1664:	18 89       	ldd	r17, Y+16	; 0x10
    1666:	e0 0f       	add	r30, r16
    1668:	f1 1f       	adc	r31, r17
    166a:	80 81       	ld	r24, Z
    166c:	91 81       	ldd	r25, Z+1	; 0x01
    166e:	a2 81       	ldd	r26, Z+2	; 0x02
    1670:	b3 81       	ldd	r27, Z+3	; 0x03
    1672:	88 27       	eor	r24, r24
    1674:	99 27       	eor	r25, r25
    1676:	aa 27       	eor	r26, r26
    1678:	b0 7f       	andi	r27, 0xF0	; 240
    167a:	88 29       	or	r24, r8
    167c:	99 29       	or	r25, r9
    167e:	aa 29       	or	r26, r10
    1680:	bb 29       	or	r27, r11
    1682:	80 83       	st	Z, r24
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	a2 83       	std	Z+2, r26	; 0x02
    1688:	b3 83       	std	Z+3, r27	; 0x03
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	d8 01       	movw	r26, r16
    168e:	14 96       	adiw	r26, 0x04	; 4
    1690:	8c 93       	st	X, r24
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	00 cd       	rjmp	.-1536   	; 0x1096 <put_fat.part.6+0x50>
    1696:	48 2d       	mov	r20, r8
    1698:	ef 85       	ldd	r30, Y+15	; 0x0f
    169a:	f8 89       	ldd	r31, Y+16	; 0x10
    169c:	e2 0d       	add	r30, r2
    169e:	f3 1d       	adc	r31, r3
    16a0:	7e cd       	rjmp	.-1284   	; 0x119e <put_fat.part.6+0x158>
    16a2:	2a 01       	movw	r4, r20
    16a4:	3b 01       	movw	r6, r22
    16a6:	5e cd       	rjmp	.-1348   	; 0x1164 <put_fat.part.6+0x11e>
    16a8:	4f 85       	ldd	r20, Y+15	; 0x0f
    16aa:	58 89       	ldd	r21, Y+16	; 0x10
    16ac:	e4 0f       	add	r30, r20
    16ae:	f5 1f       	adc	r31, r21
    16b0:	82 a9       	ldd	r24, Z+50	; 0x32
    16b2:	80 7f       	andi	r24, 0xF0	; 240
    16b4:	99 2d       	mov	r25, r9
    16b6:	9f 70       	andi	r25, 0x0F	; 15
    16b8:	89 2b       	or	r24, r25
    16ba:	da 01       	movw	r26, r20
    16bc:	0d ce       	rjmp	.-998    	; 0x12d8 <put_fat.part.6+0x292>

000016be <get_fat.part.4>:
    16be:	2f 92       	push	r2
    16c0:	3f 92       	push	r3
    16c2:	4f 92       	push	r4
    16c4:	5f 92       	push	r5
    16c6:	6f 92       	push	r6
    16c8:	7f 92       	push	r7
    16ca:	8f 92       	push	r8
    16cc:	9f 92       	push	r9
    16ce:	af 92       	push	r10
    16d0:	bf 92       	push	r11
    16d2:	cf 92       	push	r12
    16d4:	df 92       	push	r13
    16d6:	ef 92       	push	r14
    16d8:	ff 92       	push	r15
    16da:	0f 93       	push	r16
    16dc:	1f 93       	push	r17
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	2d 97       	sbiw	r28, 0x0d	; 13
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	8c 87       	std	Y+12, r24	; 0x0c
    16ee:	9d 87       	std	Y+13, r25	; 0x0d
    16f0:	6a 01       	movw	r12, r20
    16f2:	7b 01       	movw	r14, r22
    16f4:	dc 01       	movw	r26, r24
    16f6:	8c 91       	ld	r24, X
    16f8:	82 30       	cpi	r24, 0x02	; 2
    16fa:	09 f4       	brne	.+2      	; 0x16fe <get_fat.part.4+0x40>
    16fc:	04 c1       	rjmp	.+520    	; 0x1906 <get_fat.part.4+0x248>
    16fe:	83 30       	cpi	r24, 0x03	; 3
    1700:	09 f4       	brne	.+2      	; 0x1704 <get_fat.part.4+0x46>
    1702:	bf c0       	rjmp	.+382    	; 0x1882 <get_fat.part.4+0x1c4>
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	d1 f0       	breq	.+52     	; 0x173c <get_fat.part.4+0x7e>
    1708:	61 e0       	ldi	r22, 0x01	; 1
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	2d 96       	adiw	r28, 0x0d	; 13
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	9f 90       	pop	r9
    172c:	8f 90       	pop	r8
    172e:	7f 90       	pop	r7
    1730:	6f 90       	pop	r6
    1732:	5f 90       	pop	r5
    1734:	4f 90       	pop	r4
    1736:	3f 90       	pop	r3
    1738:	2f 90       	pop	r2
    173a:	08 95       	ret
    173c:	1a 01       	movw	r2, r20
    173e:	36 94       	lsr	r3
    1740:	27 94       	ror	r2
    1742:	24 0e       	add	r2, r20
    1744:	35 1e       	adc	r3, r21
    1746:	92 96       	adiw	r26, 0x22	; 34
    1748:	8d 91       	ld	r24, X+
    174a:	9d 91       	ld	r25, X+
    174c:	0d 90       	ld	r0, X+
    174e:	bc 91       	ld	r27, X
    1750:	a0 2d       	mov	r26, r0
    1752:	91 01       	movw	r18, r2
    1754:	23 2f       	mov	r18, r19
    1756:	33 27       	eor	r19, r19
    1758:	26 95       	lsr	r18
    175a:	ac 01       	movw	r20, r24
    175c:	bd 01       	movw	r22, r26
    175e:	42 0f       	add	r20, r18
    1760:	53 1f       	adc	r21, r19
    1762:	61 1d       	adc	r22, r1
    1764:	71 1d       	adc	r23, r1
    1766:	49 83       	std	Y+1, r20	; 0x01
    1768:	5a 83       	std	Y+2, r21	; 0x02
    176a:	6b 83       	std	Y+3, r22	; 0x03
    176c:	7c 83       	std	Y+4, r23	; 0x04
    176e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1770:	fd 85       	ldd	r31, Y+13	; 0x0d
    1772:	46 a4       	ldd	r4, Z+46	; 0x2e
    1774:	57 a4       	ldd	r5, Z+47	; 0x2f
    1776:	60 a8       	ldd	r6, Z+48	; 0x30
    1778:	71 a8       	ldd	r7, Z+49	; 0x31
    177a:	44 15       	cp	r20, r4
    177c:	55 05       	cpc	r21, r5
    177e:	66 05       	cpc	r22, r6
    1780:	77 05       	cpc	r23, r7
    1782:	09 f4       	brne	.+2      	; 0x1786 <get_fat.part.4+0xc8>
    1784:	21 c2       	rjmp	.+1090   	; 0x1bc8 <get_fat.part.4+0x50a>
    1786:	84 81       	ldd	r24, Z+4	; 0x04
    1788:	81 11       	cpse	r24, r1
    178a:	05 c1       	rjmp	.+522    	; 0x1996 <get_fat.part.4+0x2d8>
    178c:	ac 84       	ldd	r10, Y+12	; 0x0c
    178e:	bd 84       	ldd	r11, Y+13	; 0x0d
    1790:	f2 e3       	ldi	r31, 0x32	; 50
    1792:	af 0e       	add	r10, r31
    1794:	b1 1c       	adc	r11, r1
    1796:	01 e0       	ldi	r16, 0x01	; 1
    1798:	10 e0       	ldi	r17, 0x00	; 0
    179a:	29 81       	ldd	r18, Y+1	; 0x01
    179c:	3a 81       	ldd	r19, Y+2	; 0x02
    179e:	4b 81       	ldd	r20, Y+3	; 0x03
    17a0:	5c 81       	ldd	r21, Y+4	; 0x04
    17a2:	b5 01       	movw	r22, r10
    17a4:	ac 85       	ldd	r26, Y+12	; 0x0c
    17a6:	bd 85       	ldd	r27, Y+13	; 0x0d
    17a8:	11 96       	adiw	r26, 0x01	; 1
    17aa:	8c 91       	ld	r24, X
    17ac:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    17b0:	81 11       	cpse	r24, r1
    17b2:	9c c0       	rjmp	.+312    	; 0x18ec <get_fat.part.4+0x22e>
    17b4:	09 81       	ldd	r16, Y+1	; 0x01
    17b6:	1a 81       	ldd	r17, Y+2	; 0x02
    17b8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ba:	3c 81       	ldd	r19, Y+4	; 0x04
    17bc:	ac 85       	ldd	r26, Y+12	; 0x0c
    17be:	bd 85       	ldd	r27, Y+13	; 0x0d
    17c0:	9e 96       	adiw	r26, 0x2e	; 46
    17c2:	0d 93       	st	X+, r16
    17c4:	1d 93       	st	X+, r17
    17c6:	2d 93       	st	X+, r18
    17c8:	3c 93       	st	X, r19
    17ca:	d1 97       	sbiw	r26, 0x31	; 49
    17cc:	92 96       	adiw	r26, 0x22	; 34
    17ce:	4d 90       	ld	r4, X+
    17d0:	5d 90       	ld	r5, X+
    17d2:	6d 90       	ld	r6, X+
    17d4:	7c 90       	ld	r7, X
    17d6:	95 97       	sbiw	r26, 0x25	; 37
    17d8:	48 01       	movw	r8, r16
    17da:	59 01       	movw	r10, r18
    17dc:	8d 01       	movw	r16, r26
    17de:	f1 01       	movw	r30, r2
    17e0:	31 96       	adiw	r30, 0x01	; 1
    17e2:	ed 83       	std	Y+5, r30	; 0x05
    17e4:	fe 83       	std	Y+6, r31	; 0x06
    17e6:	f1 01       	movw	r30, r2
    17e8:	f1 70       	andi	r31, 0x01	; 1
    17ea:	e0 0f       	add	r30, r16
    17ec:	f1 1f       	adc	r31, r17
    17ee:	92 a9       	ldd	r25, Z+50	; 0x32
    17f0:	9b 87       	std	Y+11, r25	; 0x0b
    17f2:	8d 81       	ldd	r24, Y+5	; 0x05
    17f4:	9e 81       	ldd	r25, Y+6	; 0x06
    17f6:	89 2f       	mov	r24, r25
    17f8:	99 27       	eor	r25, r25
    17fa:	86 95       	lsr	r24
    17fc:	48 0e       	add	r4, r24
    17fe:	59 1e       	adc	r5, r25
    1800:	61 1c       	adc	r6, r1
    1802:	71 1c       	adc	r7, r1
    1804:	09 81       	ldd	r16, Y+1	; 0x01
    1806:	1a 81       	ldd	r17, Y+2	; 0x02
    1808:	2b 81       	ldd	r18, Y+3	; 0x03
    180a:	3c 81       	ldd	r19, Y+4	; 0x04
    180c:	40 16       	cp	r4, r16
    180e:	51 06       	cpc	r5, r17
    1810:	62 06       	cpc	r6, r18
    1812:	73 06       	cpc	r7, r19
    1814:	f9 f0       	breq	.+62     	; 0x1854 <get_fat.part.4+0x196>
    1816:	ac 85       	ldd	r26, Y+12	; 0x0c
    1818:	bd 85       	ldd	r27, Y+13	; 0x0d
    181a:	14 96       	adiw	r26, 0x04	; 4
    181c:	8c 91       	ld	r24, X
    181e:	14 97       	sbiw	r26, 0x04	; 4
    1820:	fd 01       	movw	r30, r26
    1822:	81 11       	cpse	r24, r1
    1824:	d8 c1       	rjmp	.+944    	; 0x1bd6 <get_fat.part.4+0x518>
    1826:	f2 96       	adiw	r30, 0x32	; 50
    1828:	e9 87       	std	Y+9, r30	; 0x09
    182a:	fa 87       	std	Y+10, r31	; 0x0a
    182c:	01 e0       	ldi	r16, 0x01	; 1
    182e:	10 e0       	ldi	r17, 0x00	; 0
    1830:	a3 01       	movw	r20, r6
    1832:	92 01       	movw	r18, r4
    1834:	69 85       	ldd	r22, Y+9	; 0x09
    1836:	7a 85       	ldd	r23, Y+10	; 0x0a
    1838:	ac 85       	ldd	r26, Y+12	; 0x0c
    183a:	bd 85       	ldd	r27, Y+13	; 0x0d
    183c:	11 96       	adiw	r26, 0x01	; 1
    183e:	8c 91       	ld	r24, X
    1840:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    1844:	81 11       	cpse	r24, r1
    1846:	52 c0       	rjmp	.+164    	; 0x18ec <get_fat.part.4+0x22e>
    1848:	ec 85       	ldd	r30, Y+12	; 0x0c
    184a:	fd 85       	ldd	r31, Y+13	; 0x0d
    184c:	46 a6       	std	Z+46, r4	; 0x2e
    184e:	57 a6       	std	Z+47, r5	; 0x2f
    1850:	60 aa       	std	Z+48, r6	; 0x30
    1852:	71 aa       	std	Z+49, r7	; 0x31
    1854:	ed 81       	ldd	r30, Y+5	; 0x05
    1856:	fe 81       	ldd	r31, Y+6	; 0x06
    1858:	f1 70       	andi	r31, 0x01	; 1
    185a:	0c 85       	ldd	r16, Y+12	; 0x0c
    185c:	1d 85       	ldd	r17, Y+13	; 0x0d
    185e:	e0 0f       	add	r30, r16
    1860:	f1 1f       	adc	r31, r17
    1862:	82 a9       	ldd	r24, Z+50	; 0x32
    1864:	9b 85       	ldd	r25, Y+11	; 0x0b
    1866:	69 2f       	mov	r22, r25
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	78 2b       	or	r23, r24
    186c:	c0 fe       	sbrs	r12, 0
    186e:	12 c2       	rjmp	.+1060   	; 0x1c94 <get_fat.part.4+0x5d6>
    1870:	72 95       	swap	r23
    1872:	62 95       	swap	r22
    1874:	6f 70       	andi	r22, 0x0F	; 15
    1876:	67 27       	eor	r22, r23
    1878:	7f 70       	andi	r23, 0x0F	; 15
    187a:	67 27       	eor	r22, r23
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	47 cf       	rjmp	.-370    	; 0x1710 <get_fat.part.4+0x52>
    1882:	2a 01       	movw	r4, r20
    1884:	3b 01       	movw	r6, r22
    1886:	67 e0       	ldi	r22, 0x07	; 7
    1888:	76 94       	lsr	r7
    188a:	67 94       	ror	r6
    188c:	57 94       	ror	r5
    188e:	47 94       	ror	r4
    1890:	6a 95       	dec	r22
    1892:	d1 f7       	brne	.-12     	; 0x1888 <get_fat.part.4+0x1ca>
    1894:	ec 85       	ldd	r30, Y+12	; 0x0c
    1896:	fd 85       	ldd	r31, Y+13	; 0x0d
    1898:	82 a1       	ldd	r24, Z+34	; 0x22
    189a:	93 a1       	ldd	r25, Z+35	; 0x23
    189c:	a4 a1       	ldd	r26, Z+36	; 0x24
    189e:	b5 a1       	ldd	r27, Z+37	; 0x25
    18a0:	48 0e       	add	r4, r24
    18a2:	59 1e       	adc	r5, r25
    18a4:	6a 1e       	adc	r6, r26
    18a6:	7b 1e       	adc	r7, r27
    18a8:	86 a4       	ldd	r8, Z+46	; 0x2e
    18aa:	97 a4       	ldd	r9, Z+47	; 0x2f
    18ac:	a0 a8       	ldd	r10, Z+48	; 0x30
    18ae:	b1 a8       	ldd	r11, Z+49	; 0x31
    18b0:	48 14       	cp	r4, r8
    18b2:	59 04       	cpc	r5, r9
    18b4:	6a 04       	cpc	r6, r10
    18b6:	7b 04       	cpc	r7, r11
    18b8:	09 f4       	brne	.+2      	; 0x18bc <get_fat.part.4+0x1fe>
    18ba:	70 c1       	rjmp	.+736    	; 0x1b9c <get_fat.part.4+0x4de>
    18bc:	84 81       	ldd	r24, Z+4	; 0x04
    18be:	81 11       	cpse	r24, r1
    18c0:	0d c1       	rjmp	.+538    	; 0x1adc <get_fat.part.4+0x41e>
    18c2:	0c 85       	ldd	r16, Y+12	; 0x0c
    18c4:	1d 85       	ldd	r17, Y+13	; 0x0d
    18c6:	0e 5c       	subi	r16, 0xCE	; 206
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	09 83       	std	Y+1, r16	; 0x01
    18cc:	1a 83       	std	Y+2, r17	; 0x02
    18ce:	01 e0       	ldi	r16, 0x01	; 1
    18d0:	10 e0       	ldi	r17, 0x00	; 0
    18d2:	a3 01       	movw	r20, r6
    18d4:	92 01       	movw	r18, r4
    18d6:	69 81       	ldd	r22, Y+1	; 0x01
    18d8:	7a 81       	ldd	r23, Y+2	; 0x02
    18da:	ac 85       	ldd	r26, Y+12	; 0x0c
    18dc:	bd 85       	ldd	r27, Y+13	; 0x0d
    18de:	11 96       	adiw	r26, 0x01	; 1
    18e0:	8c 91       	ld	r24, X
    18e2:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    18e6:	88 23       	and	r24, r24
    18e8:	09 f4       	brne	.+2      	; 0x18ec <get_fat.part.4+0x22e>
    18ea:	4f c1       	rjmp	.+670    	; 0x1b8a <get_fat.part.4+0x4cc>
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
    18ee:	9f ef       	ldi	r25, 0xFF	; 255
    18f0:	dc 01       	movw	r26, r24
    18f2:	ec 85       	ldd	r30, Y+12	; 0x0c
    18f4:	fd 85       	ldd	r31, Y+13	; 0x0d
    18f6:	86 a7       	std	Z+46, r24	; 0x2e
    18f8:	97 a7       	std	Z+47, r25	; 0x2f
    18fa:	a0 ab       	std	Z+48, r26	; 0x30
    18fc:	b1 ab       	std	Z+49, r27	; 0x31
    18fe:	6f ef       	ldi	r22, 0xFF	; 255
    1900:	7f ef       	ldi	r23, 0xFF	; 255
    1902:	cb 01       	movw	r24, r22
    1904:	05 cf       	rjmp	.-502    	; 0x1710 <get_fat.part.4+0x52>
    1906:	45 2e       	mov	r4, r21
    1908:	56 2e       	mov	r5, r22
    190a:	67 2e       	mov	r6, r23
    190c:	77 24       	eor	r7, r7
    190e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1910:	fd 85       	ldd	r31, Y+13	; 0x0d
    1912:	82 a1       	ldd	r24, Z+34	; 0x22
    1914:	93 a1       	ldd	r25, Z+35	; 0x23
    1916:	a4 a1       	ldd	r26, Z+36	; 0x24
    1918:	b5 a1       	ldd	r27, Z+37	; 0x25
    191a:	48 0e       	add	r4, r24
    191c:	59 1e       	adc	r5, r25
    191e:	6a 1e       	adc	r6, r26
    1920:	7b 1e       	adc	r7, r27
    1922:	86 a4       	ldd	r8, Z+46	; 0x2e
    1924:	97 a4       	ldd	r9, Z+47	; 0x2f
    1926:	a0 a8       	ldd	r10, Z+48	; 0x30
    1928:	b1 a8       	ldd	r11, Z+49	; 0x31
    192a:	48 14       	cp	r4, r8
    192c:	59 04       	cpc	r5, r9
    192e:	6a 04       	cpc	r6, r10
    1930:	7b 04       	cpc	r7, r11
    1932:	01 f1       	breq	.+64     	; 0x1974 <get_fat.part.4+0x2b6>
    1934:	84 81       	ldd	r24, Z+4	; 0x04
    1936:	81 11       	cpse	r24, r1
    1938:	7a c0       	rjmp	.+244    	; 0x1a2e <get_fat.part.4+0x370>
    193a:	0c 85       	ldd	r16, Y+12	; 0x0c
    193c:	1d 85       	ldd	r17, Y+13	; 0x0d
    193e:	0e 5c       	subi	r16, 0xCE	; 206
    1940:	1f 4f       	sbci	r17, 0xFF	; 255
    1942:	09 83       	std	Y+1, r16	; 0x01
    1944:	1a 83       	std	Y+2, r17	; 0x02
    1946:	01 e0       	ldi	r16, 0x01	; 1
    1948:	10 e0       	ldi	r17, 0x00	; 0
    194a:	a3 01       	movw	r20, r6
    194c:	92 01       	movw	r18, r4
    194e:	69 81       	ldd	r22, Y+1	; 0x01
    1950:	7a 81       	ldd	r23, Y+2	; 0x02
    1952:	ac 85       	ldd	r26, Y+12	; 0x0c
    1954:	bd 85       	ldd	r27, Y+13	; 0x0d
    1956:	11 96       	adiw	r26, 0x01	; 1
    1958:	8c 91       	ld	r24, X
    195a:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    195e:	81 11       	cpse	r24, r1
    1960:	c5 cf       	rjmp	.-118    	; 0x18ec <get_fat.part.4+0x22e>
    1962:	ac 85       	ldd	r26, Y+12	; 0x0c
    1964:	bd 85       	ldd	r27, Y+13	; 0x0d
    1966:	9e 96       	adiw	r26, 0x2e	; 46
    1968:	4d 92       	st	X+, r4
    196a:	5d 92       	st	X+, r5
    196c:	6d 92       	st	X+, r6
    196e:	7c 92       	st	X, r7
    1970:	d1 97       	sbiw	r26, 0x31	; 49
    1972:	fd 01       	movw	r30, r26
    1974:	cc 0c       	add	r12, r12
    1976:	dd 1c       	adc	r13, r13
    1978:	ee 1c       	adc	r14, r14
    197a:	ff 1c       	adc	r15, r15
    197c:	e8 94       	clt
    197e:	c0 f8       	bld	r12, 0
    1980:	b1 e0       	ldi	r27, 0x01	; 1
    1982:	db 22       	and	r13, r27
    1984:	ee 24       	eor	r14, r14
    1986:	ff 24       	eor	r15, r15
    1988:	ec 0d       	add	r30, r12
    198a:	fd 1d       	adc	r31, r13
    198c:	62 a9       	ldd	r22, Z+50	; 0x32
    198e:	73 a9       	ldd	r23, Z+51	; 0x33
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	bd ce       	rjmp	.-646    	; 0x1710 <get_fat.part.4+0x52>
    1996:	5f 01       	movw	r10, r30
    1998:	f2 e3       	ldi	r31, 0x32	; 50
    199a:	af 0e       	add	r10, r31
    199c:	b1 1c       	adc	r11, r1
    199e:	01 e0       	ldi	r16, 0x01	; 1
    19a0:	10 e0       	ldi	r17, 0x00	; 0
    19a2:	a3 01       	movw	r20, r6
    19a4:	92 01       	movw	r18, r4
    19a6:	b5 01       	movw	r22, r10
    19a8:	ac 85       	ldd	r26, Y+12	; 0x0c
    19aa:	bd 85       	ldd	r27, Y+13	; 0x0d
    19ac:	11 96       	adiw	r26, 0x01	; 1
    19ae:	8c 91       	ld	r24, X
    19b0:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    19b4:	81 11       	cpse	r24, r1
    19b6:	a3 cf       	rjmp	.-186    	; 0x18fe <get_fat.part.4+0x240>
    19b8:	ec 85       	ldd	r30, Y+12	; 0x0c
    19ba:	fd 85       	ldd	r31, Y+13	; 0x0d
    19bc:	14 82       	std	Z+4, r1	; 0x04
    19be:	82 8d       	ldd	r24, Z+26	; 0x1a
    19c0:	93 8d       	ldd	r25, Z+27	; 0x1b
    19c2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    19c4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    19c6:	42 a1       	ldd	r20, Z+34	; 0x22
    19c8:	53 a1       	ldd	r21, Z+35	; 0x23
    19ca:	64 a1       	ldd	r22, Z+36	; 0x24
    19cc:	75 a1       	ldd	r23, Z+37	; 0x25
    19ce:	93 01       	movw	r18, r6
    19d0:	82 01       	movw	r16, r4
    19d2:	04 1b       	sub	r16, r20
    19d4:	15 0b       	sbc	r17, r21
    19d6:	26 0b       	sbc	r18, r22
    19d8:	37 0b       	sbc	r19, r23
    19da:	08 17       	cp	r16, r24
    19dc:	19 07       	cpc	r17, r25
    19de:	2a 07       	cpc	r18, r26
    19e0:	3b 07       	cpc	r19, r27
    19e2:	08 f0       	brcs	.+2      	; 0x19e6 <get_fat.part.4+0x328>
    19e4:	d8 ce       	rjmp	.-592    	; 0x1796 <get_fat.part.4+0xd8>
    19e6:	83 80       	ldd	r8, Z+3	; 0x03
    19e8:	91 2c       	mov	r9, r1
    19ea:	12 e0       	ldi	r17, 0x02	; 2
    19ec:	81 16       	cp	r8, r17
    19ee:	91 04       	cpc	r9, r1
    19f0:	38 f4       	brcc	.+14     	; 0x1a00 <get_fat.part.4+0x342>
    19f2:	d1 ce       	rjmp	.-606    	; 0x1796 <get_fat.part.4+0xd8>
    19f4:	ec 85       	ldd	r30, Y+12	; 0x0c
    19f6:	fd 85       	ldd	r31, Y+13	; 0x0d
    19f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    19fa:	93 8d       	ldd	r25, Z+27	; 0x1b
    19fc:	a4 8d       	ldd	r26, Z+28	; 0x1c
    19fe:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1a00:	48 0e       	add	r4, r24
    1a02:	59 1e       	adc	r5, r25
    1a04:	6a 1e       	adc	r6, r26
    1a06:	7b 1e       	adc	r7, r27
    1a08:	01 e0       	ldi	r16, 0x01	; 1
    1a0a:	10 e0       	ldi	r17, 0x00	; 0
    1a0c:	a3 01       	movw	r20, r6
    1a0e:	92 01       	movw	r18, r4
    1a10:	b5 01       	movw	r22, r10
    1a12:	ac 85       	ldd	r26, Y+12	; 0x0c
    1a14:	bd 85       	ldd	r27, Y+13	; 0x0d
    1a16:	11 96       	adiw	r26, 0x01	; 1
    1a18:	8c 91       	ld	r24, X
    1a1a:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    1a1e:	b1 e0       	ldi	r27, 0x01	; 1
    1a20:	8b 1a       	sub	r8, r27
    1a22:	91 08       	sbc	r9, r1
    1a24:	e1 e0       	ldi	r30, 0x01	; 1
    1a26:	8e 16       	cp	r8, r30
    1a28:	91 04       	cpc	r9, r1
    1a2a:	21 f7       	brne	.-56     	; 0x19f4 <get_fat.part.4+0x336>
    1a2c:	b4 ce       	rjmp	.-664    	; 0x1796 <get_fat.part.4+0xd8>
    1a2e:	f2 96       	adiw	r30, 0x32	; 50
    1a30:	e9 83       	std	Y+1, r30	; 0x01
    1a32:	fa 83       	std	Y+2, r31	; 0x02
    1a34:	01 e0       	ldi	r16, 0x01	; 1
    1a36:	10 e0       	ldi	r17, 0x00	; 0
    1a38:	a5 01       	movw	r20, r10
    1a3a:	94 01       	movw	r18, r8
    1a3c:	bf 01       	movw	r22, r30
    1a3e:	ac 85       	ldd	r26, Y+12	; 0x0c
    1a40:	bd 85       	ldd	r27, Y+13	; 0x0d
    1a42:	11 96       	adiw	r26, 0x01	; 1
    1a44:	8c 91       	ld	r24, X
    1a46:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    1a4a:	81 11       	cpse	r24, r1
    1a4c:	58 cf       	rjmp	.-336    	; 0x18fe <get_fat.part.4+0x240>
    1a4e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a50:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a52:	14 82       	std	Z+4, r1	; 0x04
    1a54:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a56:	93 8d       	ldd	r25, Z+27	; 0x1b
    1a58:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1a5a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1a5c:	42 a1       	ldd	r20, Z+34	; 0x22
    1a5e:	53 a1       	ldd	r21, Z+35	; 0x23
    1a60:	64 a1       	ldd	r22, Z+36	; 0x24
    1a62:	75 a1       	ldd	r23, Z+37	; 0x25
    1a64:	95 01       	movw	r18, r10
    1a66:	84 01       	movw	r16, r8
    1a68:	04 1b       	sub	r16, r20
    1a6a:	15 0b       	sbc	r17, r21
    1a6c:	26 0b       	sbc	r18, r22
    1a6e:	37 0b       	sbc	r19, r23
    1a70:	08 17       	cp	r16, r24
    1a72:	19 07       	cpc	r17, r25
    1a74:	2a 07       	cpc	r18, r26
    1a76:	3b 07       	cpc	r19, r27
    1a78:	08 f0       	brcs	.+2      	; 0x1a7c <get_fat.part.4+0x3be>
    1a7a:	65 cf       	rjmp	.-310    	; 0x1946 <get_fat.part.4+0x288>
    1a7c:	23 81       	ldd	r18, Z+3	; 0x03
    1a7e:	22 2e       	mov	r2, r18
    1a80:	31 2c       	mov	r3, r1
    1a82:	12 e0       	ldi	r17, 0x02	; 2
    1a84:	21 16       	cp	r2, r17
    1a86:	31 04       	cpc	r3, r1
    1a88:	08 f4       	brcc	.+2      	; 0x1a8c <get_fat.part.4+0x3ce>
    1a8a:	5d cf       	rjmp	.-326    	; 0x1946 <get_fat.part.4+0x288>
    1a8c:	cd 82       	std	Y+5, r12	; 0x05
    1a8e:	de 82       	std	Y+6, r13	; 0x06
    1a90:	ef 82       	std	Y+7, r14	; 0x07
    1a92:	f8 86       	std	Y+8, r15	; 0x08
    1a94:	e9 80       	ldd	r14, Y+1	; 0x01
    1a96:	fa 80       	ldd	r15, Y+2	; 0x02
    1a98:	06 c0       	rjmp	.+12     	; 0x1aa6 <get_fat.part.4+0x3e8>
    1a9a:	ec 85       	ldd	r30, Y+12	; 0x0c
    1a9c:	fd 85       	ldd	r31, Y+13	; 0x0d
    1a9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1aa0:	93 8d       	ldd	r25, Z+27	; 0x1b
    1aa2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1aa4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1aa6:	88 0e       	add	r8, r24
    1aa8:	99 1e       	adc	r9, r25
    1aaa:	aa 1e       	adc	r10, r26
    1aac:	bb 1e       	adc	r11, r27
    1aae:	01 e0       	ldi	r16, 0x01	; 1
    1ab0:	10 e0       	ldi	r17, 0x00	; 0
    1ab2:	a5 01       	movw	r20, r10
    1ab4:	94 01       	movw	r18, r8
    1ab6:	b7 01       	movw	r22, r14
    1ab8:	ac 85       	ldd	r26, Y+12	; 0x0c
    1aba:	bd 85       	ldd	r27, Y+13	; 0x0d
    1abc:	11 96       	adiw	r26, 0x01	; 1
    1abe:	8c 91       	ld	r24, X
    1ac0:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    1ac4:	b1 e0       	ldi	r27, 0x01	; 1
    1ac6:	2b 1a       	sub	r2, r27
    1ac8:	31 08       	sbc	r3, r1
    1aca:	e1 e0       	ldi	r30, 0x01	; 1
    1acc:	2e 16       	cp	r2, r30
    1ace:	31 04       	cpc	r3, r1
    1ad0:	21 f7       	brne	.-56     	; 0x1a9a <get_fat.part.4+0x3dc>
    1ad2:	cd 80       	ldd	r12, Y+5	; 0x05
    1ad4:	de 80       	ldd	r13, Y+6	; 0x06
    1ad6:	ef 80       	ldd	r14, Y+7	; 0x07
    1ad8:	f8 84       	ldd	r15, Y+8	; 0x08
    1ada:	35 cf       	rjmp	.-406    	; 0x1946 <get_fat.part.4+0x288>
    1adc:	f2 96       	adiw	r30, 0x32	; 50
    1ade:	e9 83       	std	Y+1, r30	; 0x01
    1ae0:	fa 83       	std	Y+2, r31	; 0x02
    1ae2:	01 e0       	ldi	r16, 0x01	; 1
    1ae4:	10 e0       	ldi	r17, 0x00	; 0
    1ae6:	a5 01       	movw	r20, r10
    1ae8:	94 01       	movw	r18, r8
    1aea:	bf 01       	movw	r22, r30
    1aec:	ac 85       	ldd	r26, Y+12	; 0x0c
    1aee:	bd 85       	ldd	r27, Y+13	; 0x0d
    1af0:	11 96       	adiw	r26, 0x01	; 1
    1af2:	8c 91       	ld	r24, X
    1af4:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    1af8:	81 11       	cpse	r24, r1
    1afa:	01 cf       	rjmp	.-510    	; 0x18fe <get_fat.part.4+0x240>
    1afc:	ec 85       	ldd	r30, Y+12	; 0x0c
    1afe:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b00:	14 82       	std	Z+4, r1	; 0x04
    1b02:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b04:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b06:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1b08:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1b0a:	42 a1       	ldd	r20, Z+34	; 0x22
    1b0c:	53 a1       	ldd	r21, Z+35	; 0x23
    1b0e:	64 a1       	ldd	r22, Z+36	; 0x24
    1b10:	75 a1       	ldd	r23, Z+37	; 0x25
    1b12:	95 01       	movw	r18, r10
    1b14:	84 01       	movw	r16, r8
    1b16:	04 1b       	sub	r16, r20
    1b18:	15 0b       	sbc	r17, r21
    1b1a:	26 0b       	sbc	r18, r22
    1b1c:	37 0b       	sbc	r19, r23
    1b1e:	08 17       	cp	r16, r24
    1b20:	19 07       	cpc	r17, r25
    1b22:	2a 07       	cpc	r18, r26
    1b24:	3b 07       	cpc	r19, r27
    1b26:	08 f0       	brcs	.+2      	; 0x1b2a <get_fat.part.4+0x46c>
    1b28:	d2 ce       	rjmp	.-604    	; 0x18ce <get_fat.part.4+0x210>
    1b2a:	23 81       	ldd	r18, Z+3	; 0x03
    1b2c:	22 2e       	mov	r2, r18
    1b2e:	31 2c       	mov	r3, r1
    1b30:	12 e0       	ldi	r17, 0x02	; 2
    1b32:	21 16       	cp	r2, r17
    1b34:	31 04       	cpc	r3, r1
    1b36:	08 f4       	brcc	.+2      	; 0x1b3a <get_fat.part.4+0x47c>
    1b38:	ca ce       	rjmp	.-620    	; 0x18ce <get_fat.part.4+0x210>
    1b3a:	cd 82       	std	Y+5, r12	; 0x05
    1b3c:	de 82       	std	Y+6, r13	; 0x06
    1b3e:	ef 82       	std	Y+7, r14	; 0x07
    1b40:	f8 86       	std	Y+8, r15	; 0x08
    1b42:	e9 80       	ldd	r14, Y+1	; 0x01
    1b44:	fa 80       	ldd	r15, Y+2	; 0x02
    1b46:	06 c0       	rjmp	.+12     	; 0x1b54 <get_fat.part.4+0x496>
    1b48:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b4a:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b4c:	82 8d       	ldd	r24, Z+26	; 0x1a
    1b4e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b50:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1b52:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1b54:	88 0e       	add	r8, r24
    1b56:	99 1e       	adc	r9, r25
    1b58:	aa 1e       	adc	r10, r26
    1b5a:	bb 1e       	adc	r11, r27
    1b5c:	01 e0       	ldi	r16, 0x01	; 1
    1b5e:	10 e0       	ldi	r17, 0x00	; 0
    1b60:	a5 01       	movw	r20, r10
    1b62:	94 01       	movw	r18, r8
    1b64:	b7 01       	movw	r22, r14
    1b66:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b68:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b6a:	11 96       	adiw	r26, 0x01	; 1
    1b6c:	8c 91       	ld	r24, X
    1b6e:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    1b72:	b1 e0       	ldi	r27, 0x01	; 1
    1b74:	2b 1a       	sub	r2, r27
    1b76:	31 08       	sbc	r3, r1
    1b78:	e1 e0       	ldi	r30, 0x01	; 1
    1b7a:	2e 16       	cp	r2, r30
    1b7c:	31 04       	cpc	r3, r1
    1b7e:	21 f7       	brne	.-56     	; 0x1b48 <get_fat.part.4+0x48a>
    1b80:	cd 80       	ldd	r12, Y+5	; 0x05
    1b82:	de 80       	ldd	r13, Y+6	; 0x06
    1b84:	ef 80       	ldd	r14, Y+7	; 0x07
    1b86:	f8 84       	ldd	r15, Y+8	; 0x08
    1b88:	a2 ce       	rjmp	.-700    	; 0x18ce <get_fat.part.4+0x210>
    1b8a:	ac 85       	ldd	r26, Y+12	; 0x0c
    1b8c:	bd 85       	ldd	r27, Y+13	; 0x0d
    1b8e:	9e 96       	adiw	r26, 0x2e	; 46
    1b90:	4d 92       	st	X+, r4
    1b92:	5d 92       	st	X+, r5
    1b94:	6d 92       	st	X+, r6
    1b96:	7c 92       	st	X, r7
    1b98:	d1 97       	sbiw	r26, 0x31	; 49
    1b9a:	fd 01       	movw	r30, r26
    1b9c:	cc 0c       	add	r12, r12
    1b9e:	dd 1c       	adc	r13, r13
    1ba0:	ee 1c       	adc	r14, r14
    1ba2:	ff 1c       	adc	r15, r15
    1ba4:	cc 0c       	add	r12, r12
    1ba6:	dd 1c       	adc	r13, r13
    1ba8:	ee 1c       	adc	r14, r14
    1baa:	ff 1c       	adc	r15, r15
    1bac:	bc ef       	ldi	r27, 0xFC	; 252
    1bae:	cb 22       	and	r12, r27
    1bb0:	b1 e0       	ldi	r27, 0x01	; 1
    1bb2:	db 22       	and	r13, r27
    1bb4:	ee 24       	eor	r14, r14
    1bb6:	ff 24       	eor	r15, r15
    1bb8:	ec 0d       	add	r30, r12
    1bba:	fd 1d       	adc	r31, r13
    1bbc:	62 a9       	ldd	r22, Z+50	; 0x32
    1bbe:	73 a9       	ldd	r23, Z+51	; 0x33
    1bc0:	84 a9       	ldd	r24, Z+52	; 0x34
    1bc2:	95 a9       	ldd	r25, Z+53	; 0x35
    1bc4:	9f 70       	andi	r25, 0x0F	; 15
    1bc6:	a4 cd       	rjmp	.-1208   	; 0x1710 <get_fat.part.4+0x52>
    1bc8:	4a 01       	movw	r8, r20
    1bca:	5b 01       	movw	r10, r22
    1bcc:	2c 01       	movw	r4, r24
    1bce:	3d 01       	movw	r6, r26
    1bd0:	0c 85       	ldd	r16, Y+12	; 0x0c
    1bd2:	1d 85       	ldd	r17, Y+13	; 0x0d
    1bd4:	04 ce       	rjmp	.-1016   	; 0x17de <get_fat.part.4+0x120>
    1bd6:	d2 96       	adiw	r26, 0x32	; 50
    1bd8:	a9 87       	std	Y+9, r26	; 0x09
    1bda:	ba 87       	std	Y+10, r27	; 0x0a
    1bdc:	01 e0       	ldi	r16, 0x01	; 1
    1bde:	10 e0       	ldi	r17, 0x00	; 0
    1be0:	29 81       	ldd	r18, Y+1	; 0x01
    1be2:	3a 81       	ldd	r19, Y+2	; 0x02
    1be4:	4b 81       	ldd	r20, Y+3	; 0x03
    1be6:	5c 81       	ldd	r21, Y+4	; 0x04
    1be8:	bd 01       	movw	r22, r26
    1bea:	81 81       	ldd	r24, Z+1	; 0x01
    1bec:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    1bf0:	81 11       	cpse	r24, r1
    1bf2:	85 ce       	rjmp	.-758    	; 0x18fe <get_fat.part.4+0x240>
    1bf4:	ac 85       	ldd	r26, Y+12	; 0x0c
    1bf6:	bd 85       	ldd	r27, Y+13	; 0x0d
    1bf8:	14 96       	adiw	r26, 0x04	; 4
    1bfa:	1c 92       	st	X, r1
    1bfc:	14 97       	sbiw	r26, 0x04	; 4
    1bfe:	5a 96       	adiw	r26, 0x1a	; 26
    1c00:	4d 91       	ld	r20, X+
    1c02:	5d 91       	ld	r21, X+
    1c04:	6d 91       	ld	r22, X+
    1c06:	7c 91       	ld	r23, X
    1c08:	5d 97       	sbiw	r26, 0x1d	; 29
    1c0a:	fd 01       	movw	r30, r26
    1c0c:	82 a1       	ldd	r24, Z+34	; 0x22
    1c0e:	93 a1       	ldd	r25, Z+35	; 0x23
    1c10:	a4 a1       	ldd	r26, Z+36	; 0x24
    1c12:	b5 a1       	ldd	r27, Z+37	; 0x25
    1c14:	09 81       	ldd	r16, Y+1	; 0x01
    1c16:	1a 81       	ldd	r17, Y+2	; 0x02
    1c18:	2b 81       	ldd	r18, Y+3	; 0x03
    1c1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1c:	08 1b       	sub	r16, r24
    1c1e:	19 0b       	sbc	r17, r25
    1c20:	2a 0b       	sbc	r18, r26
    1c22:	3b 0b       	sbc	r19, r27
    1c24:	04 17       	cp	r16, r20
    1c26:	15 07       	cpc	r17, r21
    1c28:	26 07       	cpc	r18, r22
    1c2a:	37 07       	cpc	r19, r23
    1c2c:	08 f0       	brcs	.+2      	; 0x1c30 <get_fat.part.4+0x572>
    1c2e:	fe cd       	rjmp	.-1028   	; 0x182c <get_fat.part.4+0x16e>
    1c30:	83 81       	ldd	r24, Z+3	; 0x03
    1c32:	28 2e       	mov	r2, r24
    1c34:	31 2c       	mov	r3, r1
    1c36:	12 e0       	ldi	r17, 0x02	; 2
    1c38:	21 16       	cp	r2, r17
    1c3a:	31 04       	cpc	r3, r1
    1c3c:	08 f4       	brcc	.+2      	; 0x1c40 <get_fat.part.4+0x582>
    1c3e:	f6 cd       	rjmp	.-1044   	; 0x182c <get_fat.part.4+0x16e>
    1c40:	c9 82       	std	Y+1, r12	; 0x01
    1c42:	da 82       	std	Y+2, r13	; 0x02
    1c44:	eb 82       	std	Y+3, r14	; 0x03
    1c46:	fc 82       	std	Y+4, r15	; 0x04
    1c48:	e9 84       	ldd	r14, Y+9	; 0x09
    1c4a:	fa 84       	ldd	r15, Y+10	; 0x0a
    1c4c:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c4e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c50:	08 c0       	rjmp	.+16     	; 0x1c62 <get_fat.part.4+0x5a4>
    1c52:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c54:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c56:	5a 96       	adiw	r26, 0x1a	; 26
    1c58:	4d 91       	ld	r20, X+
    1c5a:	5d 91       	ld	r21, X+
    1c5c:	6d 91       	ld	r22, X+
    1c5e:	7c 91       	ld	r23, X
    1c60:	5d 97       	sbiw	r26, 0x1d	; 29
    1c62:	84 0e       	add	r8, r20
    1c64:	95 1e       	adc	r9, r21
    1c66:	a6 1e       	adc	r10, r22
    1c68:	b7 1e       	adc	r11, r23
    1c6a:	01 e0       	ldi	r16, 0x01	; 1
    1c6c:	10 e0       	ldi	r17, 0x00	; 0
    1c6e:	a5 01       	movw	r20, r10
    1c70:	94 01       	movw	r18, r8
    1c72:	b7 01       	movw	r22, r14
    1c74:	11 96       	adiw	r26, 0x01	; 1
    1c76:	8c 91       	ld	r24, X
    1c78:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    1c7c:	b1 e0       	ldi	r27, 0x01	; 1
    1c7e:	2b 1a       	sub	r2, r27
    1c80:	31 08       	sbc	r3, r1
    1c82:	e1 e0       	ldi	r30, 0x01	; 1
    1c84:	2e 16       	cp	r2, r30
    1c86:	31 04       	cpc	r3, r1
    1c88:	21 f7       	brne	.-56     	; 0x1c52 <get_fat.part.4+0x594>
    1c8a:	c9 80       	ldd	r12, Y+1	; 0x01
    1c8c:	da 80       	ldd	r13, Y+2	; 0x02
    1c8e:	eb 80       	ldd	r14, Y+3	; 0x03
    1c90:	fc 80       	ldd	r15, Y+4	; 0x04
    1c92:	cc cd       	rjmp	.-1128   	; 0x182c <get_fat.part.4+0x16e>
    1c94:	7f 70       	andi	r23, 0x0F	; 15
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	3a cd       	rjmp	.-1420   	; 0x1710 <get_fat.part.4+0x52>

00001c9c <dir_sdi>:
    1c9c:	8f 92       	push	r8
    1c9e:	9f 92       	push	r9
    1ca0:	af 92       	push	r10
    1ca2:	bf 92       	push	r11
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	8c 01       	movw	r16, r24
    1cb6:	eb 01       	movw	r28, r22
    1cb8:	dc 01       	movw	r26, r24
    1cba:	14 96       	adiw	r26, 0x04	; 4
    1cbc:	6d 93       	st	X+, r22
    1cbe:	7c 93       	st	X, r23
    1cc0:	15 97       	sbiw	r26, 0x05	; 5
    1cc2:	16 96       	adiw	r26, 0x06	; 6
    1cc4:	cd 90       	ld	r12, X+
    1cc6:	dd 90       	ld	r13, X+
    1cc8:	ed 90       	ld	r14, X+
    1cca:	fc 90       	ld	r15, X
    1ccc:	19 97       	sbiw	r26, 0x09	; 9
    1cce:	b1 e0       	ldi	r27, 0x01	; 1
    1cd0:	cb 16       	cp	r12, r27
    1cd2:	d1 04       	cpc	r13, r1
    1cd4:	e1 04       	cpc	r14, r1
    1cd6:	f1 04       	cpc	r15, r1
    1cd8:	61 f0       	breq	.+24     	; 0x1cf2 <dir_sdi+0x56>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	ed 91       	ld	r30, X+
    1cde:	fc 91       	ld	r31, X
    1ce0:	86 89       	ldd	r24, Z+22	; 0x16
    1ce2:	97 89       	ldd	r25, Z+23	; 0x17
    1ce4:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ce6:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ce8:	c8 16       	cp	r12, r24
    1cea:	d9 06       	cpc	r13, r25
    1cec:	ea 06       	cpc	r14, r26
    1cee:	fb 06       	cpc	r15, r27
    1cf0:	70 f0       	brcs	.+28     	; 0x1d0e <dir_sdi+0x72>
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	ff 90       	pop	r15
    1cfe:	ef 90       	pop	r14
    1d00:	df 90       	pop	r13
    1d02:	cf 90       	pop	r12
    1d04:	bf 90       	pop	r11
    1d06:	af 90       	pop	r10
    1d08:	9f 90       	pop	r9
    1d0a:	8f 90       	pop	r8
    1d0c:	08 95       	ret
    1d0e:	c1 14       	cp	r12, r1
    1d10:	d1 04       	cpc	r13, r1
    1d12:	e1 04       	cpc	r14, r1
    1d14:	f1 04       	cpc	r15, r1
    1d16:	09 f0       	breq	.+2      	; 0x1d1a <dir_sdi+0x7e>
    1d18:	4a c0       	rjmp	.+148    	; 0x1dae <dir_sdi+0x112>
    1d1a:	20 81       	ld	r18, Z
    1d1c:	23 30       	cpi	r18, 0x03	; 3
    1d1e:	d9 f1       	breq	.+118    	; 0x1d96 <dir_sdi+0xfa>
    1d20:	80 85       	ldd	r24, Z+8	; 0x08
    1d22:	91 85       	ldd	r25, Z+9	; 0x09
    1d24:	c8 17       	cp	r28, r24
    1d26:	d9 07       	cpc	r29, r25
    1d28:	20 f7       	brcc	.-56     	; 0x1cf2 <dir_sdi+0x56>
    1d2a:	66 a1       	ldd	r22, Z+38	; 0x26
    1d2c:	77 a1       	ldd	r23, Z+39	; 0x27
    1d2e:	80 a5       	ldd	r24, Z+40	; 0x28
    1d30:	91 a5       	ldd	r25, Z+41	; 0x29
    1d32:	d8 01       	movw	r26, r16
    1d34:	1a 96       	adiw	r26, 0x0a	; 10
    1d36:	cd 92       	st	X+, r12
    1d38:	dd 92       	st	X+, r13
    1d3a:	ed 92       	st	X+, r14
    1d3c:	fc 92       	st	X, r15
    1d3e:	1d 97       	sbiw	r26, 0x0d	; 13
    1d40:	61 15       	cp	r22, r1
    1d42:	71 05       	cpc	r23, r1
    1d44:	81 05       	cpc	r24, r1
    1d46:	91 05       	cpc	r25, r1
    1d48:	a1 f2       	breq	.-88     	; 0x1cf2 <dir_sdi+0x56>
    1d4a:	9e 01       	movw	r18, r28
    1d4c:	32 95       	swap	r19
    1d4e:	22 95       	swap	r18
    1d50:	2f 70       	andi	r18, 0x0F	; 15
    1d52:	23 27       	eor	r18, r19
    1d54:	3f 70       	andi	r19, 0x0F	; 15
    1d56:	23 27       	eor	r18, r19
    1d58:	ab 01       	movw	r20, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	42 0f       	add	r20, r18
    1d5e:	53 1f       	adc	r21, r19
    1d60:	61 1d       	adc	r22, r1
    1d62:	71 1d       	adc	r23, r1
    1d64:	1e 96       	adiw	r26, 0x0e	; 14
    1d66:	4d 93       	st	X+, r20
    1d68:	5d 93       	st	X+, r21
    1d6a:	6d 93       	st	X+, r22
    1d6c:	7c 93       	st	X, r23
    1d6e:	51 97       	sbiw	r26, 0x11	; 17
    1d70:	cf 70       	andi	r28, 0x0F	; 15
    1d72:	dd 27       	eor	r29, r29
    1d74:	cc 0f       	add	r28, r28
    1d76:	dd 1f       	adc	r29, r29
    1d78:	c2 95       	swap	r28
    1d7a:	d2 95       	swap	r29
    1d7c:	d0 7f       	andi	r29, 0xF0	; 240
    1d7e:	dc 27       	eor	r29, r28
    1d80:	c0 7f       	andi	r28, 0xF0	; 240
    1d82:	dc 27       	eor	r29, r28
    1d84:	e2 96       	adiw	r28, 0x32	; 50
    1d86:	ce 0f       	add	r28, r30
    1d88:	df 1f       	adc	r29, r31
    1d8a:	52 96       	adiw	r26, 0x12	; 18
    1d8c:	cd 93       	st	X+, r28
    1d8e:	dc 93       	st	X, r29
    1d90:	53 97       	sbiw	r26, 0x13	; 19
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	af cf       	rjmp	.-162    	; 0x1cf4 <dir_sdi+0x58>
    1d96:	46 a1       	ldd	r20, Z+38	; 0x26
    1d98:	57 a1       	ldd	r21, Z+39	; 0x27
    1d9a:	60 a5       	ldd	r22, Z+40	; 0x28
    1d9c:	71 a5       	ldd	r23, Z+41	; 0x29
    1d9e:	41 15       	cp	r20, r1
    1da0:	51 05       	cpc	r21, r1
    1da2:	61 05       	cpc	r22, r1
    1da4:	71 05       	cpc	r23, r1
    1da6:	09 f4       	brne	.+2      	; 0x1daa <dir_sdi+0x10e>
    1da8:	bb cf       	rjmp	.-138    	; 0x1d20 <dir_sdi+0x84>
    1daa:	6a 01       	movw	r12, r20
    1dac:	7b 01       	movw	r14, r22
    1dae:	a2 80       	ldd	r10, Z+2	; 0x02
    1db0:	20 e1       	ldi	r18, 0x10	; 16
    1db2:	a2 9e       	mul	r10, r18
    1db4:	50 01       	movw	r10, r0
    1db6:	11 24       	eor	r1, r1
    1db8:	ca 15       	cp	r28, r10
    1dba:	db 05       	cpc	r29, r11
    1dbc:	a8 f1       	brcs	.+106    	; 0x1e28 <dir_sdi+0x18c>
    1dbe:	22 e0       	ldi	r18, 0x02	; 2
    1dc0:	c2 16       	cp	r12, r18
    1dc2:	d1 04       	cpc	r13, r1
    1dc4:	e1 04       	cpc	r14, r1
    1dc6:	f1 04       	cpc	r15, r1
    1dc8:	08 f4       	brcc	.+2      	; 0x1dcc <dir_sdi+0x130>
    1dca:	93 cf       	rjmp	.-218    	; 0x1cf2 <dir_sdi+0x56>
    1dcc:	c8 16       	cp	r12, r24
    1dce:	d9 06       	cpc	r13, r25
    1dd0:	ea 06       	cpc	r14, r26
    1dd2:	fb 06       	cpc	r15, r27
    1dd4:	08 f0       	brcs	.+2      	; 0x1dd8 <dir_sdi+0x13c>
    1dd6:	8d cf       	rjmp	.-230    	; 0x1cf2 <dir_sdi+0x56>
    1dd8:	19 c0       	rjmp	.+50     	; 0x1e0c <dir_sdi+0x170>
    1dda:	a2 e0       	ldi	r26, 0x02	; 2
    1ddc:	ca 16       	cp	r12, r26
    1dde:	d1 04       	cpc	r13, r1
    1de0:	e1 04       	cpc	r14, r1
    1de2:	f1 04       	cpc	r15, r1
    1de4:	08 f4       	brcc	.+2      	; 0x1de8 <dir_sdi+0x14c>
    1de6:	85 cf       	rjmp	.-246    	; 0x1cf2 <dir_sdi+0x56>
    1de8:	d8 01       	movw	r26, r16
    1dea:	ed 91       	ld	r30, X+
    1dec:	fc 91       	ld	r31, X
    1dee:	86 89       	ldd	r24, Z+22	; 0x16
    1df0:	97 89       	ldd	r25, Z+23	; 0x17
    1df2:	a0 8d       	ldd	r26, Z+24	; 0x18
    1df4:	b1 8d       	ldd	r27, Z+25	; 0x19
    1df6:	c8 16       	cp	r12, r24
    1df8:	d9 06       	cpc	r13, r25
    1dfa:	ea 06       	cpc	r14, r26
    1dfc:	fb 06       	cpc	r15, r27
    1dfe:	08 f0       	brcs	.+2      	; 0x1e02 <dir_sdi+0x166>
    1e00:	78 cf       	rjmp	.-272    	; 0x1cf2 <dir_sdi+0x56>
    1e02:	ca 19       	sub	r28, r10
    1e04:	db 09       	sbc	r29, r11
    1e06:	ca 15       	cp	r28, r10
    1e08:	db 05       	cpc	r29, r11
    1e0a:	70 f0       	brcs	.+28     	; 0x1e28 <dir_sdi+0x18c>
    1e0c:	b7 01       	movw	r22, r14
    1e0e:	a6 01       	movw	r20, r12
    1e10:	cf 01       	movw	r24, r30
    1e12:	55 dc       	rcall	.-1878   	; 0x16be <get_fat.part.4>
    1e14:	6b 01       	movw	r12, r22
    1e16:	7c 01       	movw	r14, r24
    1e18:	8f ef       	ldi	r24, 0xFF	; 255
    1e1a:	c8 16       	cp	r12, r24
    1e1c:	d8 06       	cpc	r13, r24
    1e1e:	e8 06       	cpc	r14, r24
    1e20:	f8 06       	cpc	r15, r24
    1e22:	d9 f6       	brne	.-74     	; 0x1dda <dir_sdi+0x13e>
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	66 cf       	rjmp	.-308    	; 0x1cf4 <dir_sdi+0x58>
    1e28:	a7 01       	movw	r20, r14
    1e2a:	96 01       	movw	r18, r12
    1e2c:	22 50       	subi	r18, 0x02	; 2
    1e2e:	31 09       	sbc	r19, r1
    1e30:	41 09       	sbc	r20, r1
    1e32:	51 09       	sbc	r21, r1
    1e34:	02 97       	sbiw	r24, 0x02	; 2
    1e36:	a1 09       	sbc	r26, r1
    1e38:	b1 09       	sbc	r27, r1
    1e3a:	28 17       	cp	r18, r24
    1e3c:	39 07       	cpc	r19, r25
    1e3e:	4a 07       	cpc	r20, r26
    1e40:	5b 07       	cpc	r21, r27
    1e42:	68 f4       	brcc	.+26     	; 0x1e5e <dir_sdi+0x1c2>
    1e44:	a2 81       	ldd	r26, Z+2	; 0x02
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__muluhisi3>
    1e4c:	82 a4       	ldd	r8, Z+42	; 0x2a
    1e4e:	93 a4       	ldd	r9, Z+43	; 0x2b
    1e50:	a4 a4       	ldd	r10, Z+44	; 0x2c
    1e52:	b5 a4       	ldd	r11, Z+45	; 0x2d
    1e54:	68 0d       	add	r22, r8
    1e56:	79 1d       	adc	r23, r9
    1e58:	8a 1d       	adc	r24, r10
    1e5a:	9b 1d       	adc	r25, r11
    1e5c:	6a cf       	rjmp	.-300    	; 0x1d32 <dir_sdi+0x96>
    1e5e:	f8 01       	movw	r30, r16
    1e60:	c2 86       	std	Z+10, r12	; 0x0a
    1e62:	d3 86       	std	Z+11, r13	; 0x0b
    1e64:	e4 86       	std	Z+12, r14	; 0x0c
    1e66:	f5 86       	std	Z+13, r15	; 0x0d
    1e68:	44 cf       	rjmp	.-376    	; 0x1cf2 <dir_sdi+0x56>

00001e6a <create_chain>:
    1e6a:	2f 92       	push	r2
    1e6c:	3f 92       	push	r3
    1e6e:	4f 92       	push	r4
    1e70:	5f 92       	push	r5
    1e72:	6f 92       	push	r6
    1e74:	7f 92       	push	r7
    1e76:	8f 92       	push	r8
    1e78:	9f 92       	push	r9
    1e7a:	af 92       	push	r10
    1e7c:	bf 92       	push	r11
    1e7e:	cf 92       	push	r12
    1e80:	df 92       	push	r13
    1e82:	ef 92       	push	r14
    1e84:	ff 92       	push	r15
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	6a 97       	sbiw	r28, 0x1a	; 26
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	5c 01       	movw	r10, r24
    1e9a:	49 87       	std	Y+9, r20	; 0x09
    1e9c:	5a 87       	std	Y+10, r21	; 0x0a
    1e9e:	6b 87       	std	Y+11, r22	; 0x0b
    1ea0:	7c 87       	std	Y+12, r23	; 0x0c
    1ea2:	45 2b       	or	r20, r21
    1ea4:	46 2b       	or	r20, r22
    1ea6:	47 2b       	or	r20, r23
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <create_chain+0x42>
    1eaa:	d9 c0       	rjmp	.+434    	; 0x205e <create_chain+0x1f4>
    1eac:	dc 01       	movw	r26, r24
    1eae:	1a 96       	adiw	r26, 0x0a	; 10
    1eb0:	0d 91       	ld	r16, X+
    1eb2:	1d 91       	ld	r17, X+
    1eb4:	2d 91       	ld	r18, X+
    1eb6:	3c 91       	ld	r19, X
    1eb8:	1d 97       	sbiw	r26, 0x0d	; 13
    1eba:	09 83       	std	Y+1, r16	; 0x01
    1ebc:	1a 83       	std	Y+2, r17	; 0x02
    1ebe:	2b 83       	std	Y+3, r18	; 0x03
    1ec0:	3c 83       	std	Y+4, r19	; 0x04
    1ec2:	01 15       	cp	r16, r1
    1ec4:	11 05       	cpc	r17, r1
    1ec6:	21 05       	cpc	r18, r1
    1ec8:	31 05       	cpc	r19, r1
    1eca:	09 f0       	breq	.+2      	; 0x1ece <create_chain+0x64>
    1ecc:	fb c0       	rjmp	.+502    	; 0x20c4 <create_chain+0x25a>
    1ece:	56 96       	adiw	r26, 0x16	; 22
    1ed0:	8d 91       	ld	r24, X+
    1ed2:	9d 91       	ld	r25, X+
    1ed4:	0d 90       	ld	r0, X+
    1ed6:	bc 91       	ld	r27, X
    1ed8:	a0 2d       	mov	r26, r0
    1eda:	01 e0       	ldi	r16, 0x01	; 1
    1edc:	10 e0       	ldi	r17, 0x00	; 0
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	09 83       	std	Y+1, r16	; 0x01
    1ee4:	1a 83       	std	Y+2, r17	; 0x02
    1ee6:	2b 83       	std	Y+3, r18	; 0x03
    1ee8:	3c 83       	std	Y+4, r19	; 0x04
    1eea:	28 01       	movw	r4, r16
    1eec:	39 01       	movw	r6, r18
    1eee:	15 01       	movw	r2, r10
    1ef0:	32 e3       	ldi	r19, 0x32	; 50
    1ef2:	23 0e       	add	r2, r19
    1ef4:	31 1c       	adc	r3, r1
    1ef6:	a9 8e       	std	Y+25, r10	; 0x19
    1ef8:	ba 8e       	std	Y+26, r11	; 0x1a
    1efa:	4f ef       	ldi	r20, 0xFF	; 255
    1efc:	44 1a       	sub	r4, r20
    1efe:	54 0a       	sbc	r5, r20
    1f00:	64 0a       	sbc	r6, r20
    1f02:	74 0a       	sbc	r7, r20
    1f04:	48 16       	cp	r4, r24
    1f06:	59 06       	cpc	r5, r25
    1f08:	6a 06       	cpc	r6, r26
    1f0a:	7b 06       	cpc	r7, r27
    1f0c:	08 f4       	brcc	.+2      	; 0x1f10 <create_chain+0xa6>
    1f0e:	f0 c0       	rjmp	.+480    	; 0x20f0 <create_chain+0x286>
    1f10:	09 81       	ldd	r16, Y+1	; 0x01
    1f12:	1a 81       	ldd	r17, Y+2	; 0x02
    1f14:	2b 81       	ldd	r18, Y+3	; 0x03
    1f16:	3c 81       	ldd	r19, Y+4	; 0x04
    1f18:	02 30       	cpi	r16, 0x02	; 2
    1f1a:	11 05       	cpc	r17, r1
    1f1c:	21 05       	cpc	r18, r1
    1f1e:	31 05       	cpc	r19, r1
    1f20:	08 f4       	brcc	.+2      	; 0x1f24 <create_chain+0xba>
    1f22:	fd c2       	rjmp	.+1530   	; 0x251e <create_chain+0x6b4>
    1f24:	03 97       	sbiw	r24, 0x03	; 3
    1f26:	a1 05       	cpc	r26, r1
    1f28:	b1 05       	cpc	r27, r1
    1f2a:	08 f4       	brcc	.+2      	; 0x1f2e <create_chain+0xc4>
    1f2c:	ae c0       	rjmp	.+348    	; 0x208a <create_chain+0x220>
    1f2e:	82 e0       	ldi	r24, 0x02	; 2
    1f30:	48 2e       	mov	r4, r24
    1f32:	51 2c       	mov	r5, r1
    1f34:	61 2c       	mov	r6, r1
    1f36:	71 2c       	mov	r7, r1
    1f38:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f3a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f3c:	8c 91       	ld	r24, X
    1f3e:	82 30       	cpi	r24, 0x02	; 2
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <create_chain+0xda>
    1f42:	e2 c0       	rjmp	.+452    	; 0x2108 <create_chain+0x29e>
    1f44:	83 30       	cpi	r24, 0x03	; 3
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <create_chain+0xe0>
    1f48:	83 c1       	rjmp	.+774    	; 0x2250 <create_chain+0x3e6>
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <create_chain+0xe6>
    1f4e:	9d c0       	rjmp	.+314    	; 0x208a <create_chain+0x220>
    1f50:	f2 01       	movw	r30, r4
    1f52:	f6 95       	lsr	r31
    1f54:	e7 95       	ror	r30
    1f56:	e4 0d       	add	r30, r4
    1f58:	f5 1d       	adc	r31, r5
    1f5a:	ed 83       	std	Y+5, r30	; 0x05
    1f5c:	fe 83       	std	Y+6, r31	; 0x06
    1f5e:	92 96       	adiw	r26, 0x22	; 34
    1f60:	4d 91       	ld	r20, X+
    1f62:	5d 91       	ld	r21, X+
    1f64:	6d 91       	ld	r22, X+
    1f66:	7c 91       	ld	r23, X
    1f68:	95 97       	sbiw	r26, 0x25	; 37
    1f6a:	cf 01       	movw	r24, r30
    1f6c:	89 2f       	mov	r24, r25
    1f6e:	99 27       	eor	r25, r25
    1f70:	86 95       	lsr	r24
    1f72:	6a 01       	movw	r12, r20
    1f74:	7b 01       	movw	r14, r22
    1f76:	c8 0e       	add	r12, r24
    1f78:	d9 1e       	adc	r13, r25
    1f7a:	e1 1c       	adc	r14, r1
    1f7c:	f1 1c       	adc	r15, r1
    1f7e:	9e 96       	adiw	r26, 0x2e	; 46
    1f80:	8d 90       	ld	r8, X+
    1f82:	9d 90       	ld	r9, X+
    1f84:	ad 90       	ld	r10, X+
    1f86:	bc 90       	ld	r11, X
    1f88:	d1 97       	sbiw	r26, 0x31	; 49
    1f8a:	c8 14       	cp	r12, r8
    1f8c:	d9 04       	cpc	r13, r9
    1f8e:	ea 04       	cpc	r14, r10
    1f90:	fb 04       	cpc	r15, r11
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <create_chain+0x12c>
    1f94:	bd c2       	rjmp	.+1402   	; 0x2510 <create_chain+0x6a6>
    1f96:	14 96       	adiw	r26, 0x04	; 4
    1f98:	8c 91       	ld	r24, X
    1f9a:	14 97       	sbiw	r26, 0x04	; 4
    1f9c:	81 11       	cpse	r24, r1
    1f9e:	61 c2       	rjmp	.+1218   	; 0x2462 <create_chain+0x5f8>
    1fa0:	01 e0       	ldi	r16, 0x01	; 1
    1fa2:	10 e0       	ldi	r17, 0x00	; 0
    1fa4:	a7 01       	movw	r20, r14
    1fa6:	96 01       	movw	r18, r12
    1fa8:	b1 01       	movw	r22, r2
    1faa:	e9 8d       	ldd	r30, Y+25	; 0x19
    1fac:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1fae:	81 81       	ldd	r24, Z+1	; 0x01
    1fb0:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    1fb4:	81 11       	cpse	r24, r1
    1fb6:	44 c0       	rjmp	.+136    	; 0x2040 <create_chain+0x1d6>
    1fb8:	a9 8d       	ldd	r26, Y+25	; 0x19
    1fba:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1fbc:	9e 96       	adiw	r26, 0x2e	; 46
    1fbe:	cd 92       	st	X+, r12
    1fc0:	dd 92       	st	X+, r13
    1fc2:	ed 92       	st	X+, r14
    1fc4:	fc 92       	st	X, r15
    1fc6:	d1 97       	sbiw	r26, 0x31	; 49
    1fc8:	92 96       	adiw	r26, 0x22	; 34
    1fca:	4d 91       	ld	r20, X+
    1fcc:	5d 91       	ld	r21, X+
    1fce:	6d 91       	ld	r22, X+
    1fd0:	7c 91       	ld	r23, X
    1fd2:	95 97       	sbiw	r26, 0x25	; 37
    1fd4:	c9 8a       	std	Y+17, r12	; 0x11
    1fd6:	da 8a       	std	Y+18, r13	; 0x12
    1fd8:	eb 8a       	std	Y+19, r14	; 0x13
    1fda:	fc 8a       	std	Y+20, r15	; 0x14
    1fdc:	9d 01       	movw	r18, r26
    1fde:	0d 81       	ldd	r16, Y+5	; 0x05
    1fe0:	1e 81       	ldd	r17, Y+6	; 0x06
    1fe2:	0f 5f       	subi	r16, 0xFF	; 255
    1fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe6:	0d 87       	std	Y+13, r16	; 0x0d
    1fe8:	1e 87       	std	Y+14, r17	; 0x0e
    1fea:	ed 81       	ldd	r30, Y+5	; 0x05
    1fec:	fe 81       	ldd	r31, Y+6	; 0x06
    1fee:	f1 70       	andi	r31, 0x01	; 1
    1ff0:	e2 0f       	add	r30, r18
    1ff2:	f3 1f       	adc	r31, r19
    1ff4:	92 a9       	ldd	r25, Z+50	; 0x32
    1ff6:	9d 83       	std	Y+5, r25	; 0x05
    1ff8:	c8 01       	movw	r24, r16
    1ffa:	89 2f       	mov	r24, r25
    1ffc:	99 27       	eor	r25, r25
    1ffe:	86 95       	lsr	r24
    2000:	4a 01       	movw	r8, r20
    2002:	5b 01       	movw	r10, r22
    2004:	88 0e       	add	r8, r24
    2006:	99 1e       	adc	r9, r25
    2008:	a1 1c       	adc	r10, r1
    200a:	b1 1c       	adc	r11, r1
    200c:	c8 14       	cp	r12, r8
    200e:	d9 04       	cpc	r13, r9
    2010:	ea 04       	cpc	r14, r10
    2012:	fb 04       	cpc	r15, r11
    2014:	09 f4       	brne	.+2      	; 0x2018 <create_chain+0x1ae>
    2016:	19 c3       	rjmp	.+1586   	; 0x264a <create_chain+0x7e0>
    2018:	d9 01       	movw	r26, r18
    201a:	14 96       	adiw	r26, 0x04	; 4
    201c:	8c 91       	ld	r24, X
    201e:	14 97       	sbiw	r26, 0x04	; 4
    2020:	81 11       	cpse	r24, r1
    2022:	b2 c2       	rjmp	.+1380   	; 0x2588 <create_chain+0x71e>
    2024:	01 e0       	ldi	r16, 0x01	; 1
    2026:	10 e0       	ldi	r17, 0x00	; 0
    2028:	a5 01       	movw	r20, r10
    202a:	94 01       	movw	r18, r8
    202c:	b1 01       	movw	r22, r2
    202e:	a9 8d       	ldd	r26, Y+25	; 0x19
    2030:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2032:	11 96       	adiw	r26, 0x01	; 1
    2034:	8c 91       	ld	r24, X
    2036:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    203a:	88 23       	and	r24, r24
    203c:	09 f4       	brne	.+2      	; 0x2040 <create_chain+0x1d6>
    203e:	ff c2       	rjmp	.+1534   	; 0x263e <create_chain+0x7d4>
    2040:	a9 8c       	ldd	r10, Y+25	; 0x19
    2042:	ba 8c       	ldd	r11, Y+26	; 0x1a
    2044:	8f ef       	ldi	r24, 0xFF	; 255
    2046:	9f ef       	ldi	r25, 0xFF	; 255
    2048:	dc 01       	movw	r26, r24
    204a:	f5 01       	movw	r30, r10
    204c:	86 a7       	std	Z+46, r24	; 0x2e
    204e:	97 a7       	std	Z+47, r25	; 0x2f
    2050:	a0 ab       	std	Z+48, r26	; 0x30
    2052:	b1 ab       	std	Z+49, r27	; 0x31
    2054:	4f ef       	ldi	r20, 0xFF	; 255
    2056:	3f ef       	ldi	r19, 0xFF	; 255
    2058:	2f ef       	ldi	r18, 0xFF	; 255
    205a:	9f ef       	ldi	r25, 0xFF	; 255
    205c:	1a c0       	rjmp	.+52     	; 0x2092 <create_chain+0x228>
    205e:	29 85       	ldd	r18, Y+9	; 0x09
    2060:	3a 85       	ldd	r19, Y+10	; 0x0a
    2062:	4b 85       	ldd	r20, Y+11	; 0x0b
    2064:	5c 85       	ldd	r21, Y+12	; 0x0c
    2066:	22 30       	cpi	r18, 0x02	; 2
    2068:	31 05       	cpc	r19, r1
    206a:	41 05       	cpc	r20, r1
    206c:	51 05       	cpc	r21, r1
    206e:	68 f0       	brcs	.+26     	; 0x208a <create_chain+0x220>
    2070:	89 01       	movw	r16, r18
    2072:	9a 01       	movw	r18, r20
    2074:	fc 01       	movw	r30, r24
    2076:	86 89       	ldd	r24, Z+22	; 0x16
    2078:	97 89       	ldd	r25, Z+23	; 0x17
    207a:	a0 8d       	ldd	r26, Z+24	; 0x18
    207c:	b1 8d       	ldd	r27, Z+25	; 0x19
    207e:	08 17       	cp	r16, r24
    2080:	19 07       	cpc	r17, r25
    2082:	2a 07       	cpc	r18, r26
    2084:	3b 07       	cpc	r19, r27
    2086:	08 f4       	brcc	.+2      	; 0x208a <create_chain+0x220>
    2088:	54 c2       	rjmp	.+1192   	; 0x2532 <create_chain+0x6c8>
    208a:	41 e0       	ldi	r20, 0x01	; 1
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	64 2f       	mov	r22, r20
    2094:	73 2f       	mov	r23, r19
    2096:	82 2f       	mov	r24, r18
    2098:	6a 96       	adiw	r28, 0x1a	; 26
    209a:	cd bf       	out	0x3d, r28	; 61
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	ff 90       	pop	r15
    20a8:	ef 90       	pop	r14
    20aa:	df 90       	pop	r13
    20ac:	cf 90       	pop	r12
    20ae:	bf 90       	pop	r11
    20b0:	af 90       	pop	r10
    20b2:	9f 90       	pop	r9
    20b4:	8f 90       	pop	r8
    20b6:	7f 90       	pop	r7
    20b8:	6f 90       	pop	r6
    20ba:	5f 90       	pop	r5
    20bc:	4f 90       	pop	r4
    20be:	3f 90       	pop	r3
    20c0:	2f 90       	pop	r2
    20c2:	08 95       	ret
    20c4:	fc 01       	movw	r30, r24
    20c6:	86 89       	ldd	r24, Z+22	; 0x16
    20c8:	97 89       	ldd	r25, Z+23	; 0x17
    20ca:	a0 8d       	ldd	r26, Z+24	; 0x18
    20cc:	b1 8d       	ldd	r27, Z+25	; 0x19
    20ce:	08 17       	cp	r16, r24
    20d0:	19 07       	cpc	r17, r25
    20d2:	2a 07       	cpc	r18, r26
    20d4:	3b 07       	cpc	r19, r27
    20d6:	08 f4       	brcc	.+2      	; 0x20da <create_chain+0x270>
    20d8:	27 c2       	rjmp	.+1102   	; 0x2528 <create_chain+0x6be>
    20da:	21 e0       	ldi	r18, 0x01	; 1
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	29 83       	std	Y+1, r18	; 0x01
    20e4:	3a 83       	std	Y+2, r19	; 0x02
    20e6:	4b 83       	std	Y+3, r20	; 0x03
    20e8:	5c 83       	std	Y+4, r21	; 0x04
    20ea:	29 01       	movw	r4, r18
    20ec:	3a 01       	movw	r6, r20
    20ee:	ff ce       	rjmp	.-514    	; 0x1eee <create_chain+0x84>
    20f0:	12 e0       	ldi	r17, 0x02	; 2
    20f2:	41 16       	cp	r4, r17
    20f4:	51 04       	cpc	r5, r1
    20f6:	61 04       	cpc	r6, r1
    20f8:	71 04       	cpc	r7, r1
    20fa:	38 f2       	brcs	.-114    	; 0x208a <create_chain+0x220>
    20fc:	a9 8d       	ldd	r26, Y+25	; 0x19
    20fe:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2100:	8c 91       	ld	r24, X
    2102:	82 30       	cpi	r24, 0x02	; 2
    2104:	09 f0       	breq	.+2      	; 0x2108 <create_chain+0x29e>
    2106:	1e cf       	rjmp	.-452    	; 0x1f44 <create_chain+0xda>
    2108:	fd 01       	movw	r30, r26
    210a:	bb 24       	eor	r11, r11
    210c:	a7 2c       	mov	r10, r7
    210e:	96 2c       	mov	r9, r6
    2110:	85 2c       	mov	r8, r5
    2112:	82 a1       	ldd	r24, Z+34	; 0x22
    2114:	93 a1       	ldd	r25, Z+35	; 0x23
    2116:	a4 a1       	ldd	r26, Z+36	; 0x24
    2118:	b5 a1       	ldd	r27, Z+37	; 0x25
    211a:	88 0e       	add	r8, r24
    211c:	99 1e       	adc	r9, r25
    211e:	aa 1e       	adc	r10, r26
    2120:	bb 1e       	adc	r11, r27
    2122:	c6 a4       	ldd	r12, Z+46	; 0x2e
    2124:	d7 a4       	ldd	r13, Z+47	; 0x2f
    2126:	e0 a8       	ldd	r14, Z+48	; 0x30
    2128:	f1 a8       	ldd	r15, Z+49	; 0x31
    212a:	8c 14       	cp	r8, r12
    212c:	9d 04       	cpc	r9, r13
    212e:	ae 04       	cpc	r10, r14
    2130:	bf 04       	cpc	r11, r15
    2132:	c9 f0       	breq	.+50     	; 0x2166 <create_chain+0x2fc>
    2134:	84 81       	ldd	r24, Z+4	; 0x04
    2136:	81 11       	cpse	r24, r1
    2138:	42 c1       	rjmp	.+644    	; 0x23be <create_chain+0x554>
    213a:	01 e0       	ldi	r16, 0x01	; 1
    213c:	10 e0       	ldi	r17, 0x00	; 0
    213e:	a5 01       	movw	r20, r10
    2140:	94 01       	movw	r18, r8
    2142:	b1 01       	movw	r22, r2
    2144:	a9 8d       	ldd	r26, Y+25	; 0x19
    2146:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2148:	11 96       	adiw	r26, 0x01	; 1
    214a:	8c 91       	ld	r24, X
    214c:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    2150:	81 11       	cpse	r24, r1
    2152:	76 cf       	rjmp	.-276    	; 0x2040 <create_chain+0x1d6>
    2154:	a9 8d       	ldd	r26, Y+25	; 0x19
    2156:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2158:	9e 96       	adiw	r26, 0x2e	; 46
    215a:	8d 92       	st	X+, r8
    215c:	9d 92       	st	X+, r9
    215e:	ad 92       	st	X+, r10
    2160:	bc 92       	st	X, r11
    2162:	d1 97       	sbiw	r26, 0x31	; 49
    2164:	fd 01       	movw	r30, r26
    2166:	d3 01       	movw	r26, r6
    2168:	c2 01       	movw	r24, r4
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	aa 1f       	adc	r26, r26
    2170:	bb 1f       	adc	r27, r27
    2172:	8e 7f       	andi	r24, 0xFE	; 254
    2174:	91 70       	andi	r25, 0x01	; 1
    2176:	aa 27       	eor	r26, r26
    2178:	bb 27       	eor	r27, r27
    217a:	e8 0f       	add	r30, r24
    217c:	f9 1f       	adc	r31, r25
    217e:	82 a9       	ldd	r24, Z+50	; 0x32
    2180:	93 a9       	ldd	r25, Z+51	; 0x33
    2182:	a0 e0       	ldi	r26, 0x00	; 0
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	a1 05       	cpc	r26, r1
    218a:	b1 05       	cpc	r27, r1
    218c:	09 f0       	breq	.+2      	; 0x2190 <create_chain+0x326>
    218e:	af c0       	rjmp	.+350    	; 0x22ee <create_chain+0x484>
    2190:	a9 8c       	ldd	r10, Y+25	; 0x19
    2192:	ba 8c       	ldd	r11, Y+26	; 0x1a
    2194:	f5 01       	movw	r30, r10
    2196:	86 89       	ldd	r24, Z+22	; 0x16
    2198:	97 89       	ldd	r25, Z+23	; 0x17
    219a:	a0 8d       	ldd	r26, Z+24	; 0x18
    219c:	b1 8d       	ldd	r27, Z+25	; 0x19
    219e:	48 16       	cp	r4, r24
    21a0:	59 06       	cpc	r5, r25
    21a2:	6a 06       	cpc	r6, r26
    21a4:	7b 06       	cpc	r7, r27
    21a6:	08 f0       	brcs	.+2      	; 0x21aa <create_chain+0x340>
    21a8:	70 cf       	rjmp	.-288    	; 0x208a <create_chain+0x220>
    21aa:	0f ef       	ldi	r16, 0xFF	; 255
    21ac:	1f ef       	ldi	r17, 0xFF	; 255
    21ae:	2f ef       	ldi	r18, 0xFF	; 255
    21b0:	3f e0       	ldi	r19, 0x0F	; 15
    21b2:	b3 01       	movw	r22, r6
    21b4:	a2 01       	movw	r20, r4
    21b6:	c5 01       	movw	r24, r10
    21b8:	0e 94 23 08 	call	0x1046	; 0x1046 <put_fat.part.6>
    21bc:	81 11       	cpse	r24, r1
    21be:	60 c2       	rjmp	.+1216   	; 0x2680 <create_chain+0x816>
    21c0:	09 85       	ldd	r16, Y+9	; 0x09
    21c2:	1a 85       	ldd	r17, Y+10	; 0x0a
    21c4:	2b 85       	ldd	r18, Y+11	; 0x0b
    21c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    21c8:	01 15       	cp	r16, r1
    21ca:	11 05       	cpc	r17, r1
    21cc:	21 05       	cpc	r18, r1
    21ce:	31 05       	cpc	r19, r1
    21d0:	e1 f0       	breq	.+56     	; 0x220a <create_chain+0x3a0>
    21d2:	02 30       	cpi	r16, 0x02	; 2
    21d4:	11 05       	cpc	r17, r1
    21d6:	21 05       	cpc	r18, r1
    21d8:	31 05       	cpc	r19, r1
    21da:	08 f4       	brcc	.+2      	; 0x21de <create_chain+0x374>
    21dc:	56 cf       	rjmp	.-340    	; 0x208a <create_chain+0x220>
    21de:	f5 01       	movw	r30, r10
    21e0:	86 89       	ldd	r24, Z+22	; 0x16
    21e2:	97 89       	ldd	r25, Z+23	; 0x17
    21e4:	a0 8d       	ldd	r26, Z+24	; 0x18
    21e6:	b1 8d       	ldd	r27, Z+25	; 0x19
    21e8:	08 17       	cp	r16, r24
    21ea:	19 07       	cpc	r17, r25
    21ec:	2a 07       	cpc	r18, r26
    21ee:	3b 07       	cpc	r19, r27
    21f0:	08 f0       	brcs	.+2      	; 0x21f4 <create_chain+0x38a>
    21f2:	4b cf       	rjmp	.-362    	; 0x208a <create_chain+0x220>
    21f4:	93 01       	movw	r18, r6
    21f6:	82 01       	movw	r16, r4
    21f8:	49 85       	ldd	r20, Y+9	; 0x09
    21fa:	5a 85       	ldd	r21, Y+10	; 0x0a
    21fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2200:	c5 01       	movw	r24, r10
    2202:	0e 94 23 08 	call	0x1046	; 0x1046 <put_fat.part.6>
    2206:	81 11       	cpse	r24, r1
    2208:	3b c2       	rjmp	.+1142   	; 0x2680 <create_chain+0x816>
    220a:	d5 01       	movw	r26, r10
    220c:	1a 96       	adiw	r26, 0x0a	; 10
    220e:	4d 92       	st	X+, r4
    2210:	5d 92       	st	X+, r5
    2212:	6d 92       	st	X+, r6
    2214:	7c 92       	st	X, r7
    2216:	1d 97       	sbiw	r26, 0x0d	; 13
    2218:	1e 96       	adiw	r26, 0x0e	; 14
    221a:	8d 91       	ld	r24, X+
    221c:	9d 91       	ld	r25, X+
    221e:	0d 90       	ld	r0, X+
    2220:	bc 91       	ld	r27, X
    2222:	a0 2d       	mov	r26, r0
    2224:	8f 3f       	cpi	r24, 0xFF	; 255
    2226:	ef ef       	ldi	r30, 0xFF	; 255
    2228:	9e 07       	cpc	r25, r30
    222a:	ae 07       	cpc	r26, r30
    222c:	be 07       	cpc	r27, r30
    222e:	59 f0       	breq	.+22     	; 0x2246 <create_chain+0x3dc>
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	a1 09       	sbc	r26, r1
    2234:	b1 09       	sbc	r27, r1
    2236:	f5 01       	movw	r30, r10
    2238:	86 87       	std	Z+14, r24	; 0x0e
    223a:	97 87       	std	Z+15, r25	; 0x0f
    223c:	a0 8b       	std	Z+16, r26	; 0x10
    223e:	b1 8b       	std	Z+17, r27	; 0x11
    2240:	85 81       	ldd	r24, Z+5	; 0x05
    2242:	81 60       	ori	r24, 0x01	; 1
    2244:	85 83       	std	Z+5, r24	; 0x05
    2246:	44 2d       	mov	r20, r4
    2248:	35 2d       	mov	r19, r5
    224a:	26 2d       	mov	r18, r6
    224c:	97 2d       	mov	r25, r7
    224e:	21 cf       	rjmp	.-446    	; 0x2092 <create_chain+0x228>
    2250:	53 01       	movw	r10, r6
    2252:	42 01       	movw	r8, r4
    2254:	77 e0       	ldi	r23, 0x07	; 7
    2256:	b6 94       	lsr	r11
    2258:	a7 94       	ror	r10
    225a:	97 94       	ror	r9
    225c:	87 94       	ror	r8
    225e:	7a 95       	dec	r23
    2260:	d1 f7       	brne	.-12     	; 0x2256 <create_chain+0x3ec>
    2262:	e9 8d       	ldd	r30, Y+25	; 0x19
    2264:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2266:	82 a1       	ldd	r24, Z+34	; 0x22
    2268:	93 a1       	ldd	r25, Z+35	; 0x23
    226a:	a4 a1       	ldd	r26, Z+36	; 0x24
    226c:	b5 a1       	ldd	r27, Z+37	; 0x25
    226e:	88 0e       	add	r8, r24
    2270:	99 1e       	adc	r9, r25
    2272:	aa 1e       	adc	r10, r26
    2274:	bb 1e       	adc	r11, r27
    2276:	c6 a4       	ldd	r12, Z+46	; 0x2e
    2278:	d7 a4       	ldd	r13, Z+47	; 0x2f
    227a:	e0 a8       	ldd	r14, Z+48	; 0x30
    227c:	f1 a8       	ldd	r15, Z+49	; 0x31
    227e:	8c 14       	cp	r8, r12
    2280:	9d 04       	cpc	r9, r13
    2282:	ae 04       	cpc	r10, r14
    2284:	bf 04       	cpc	r11, r15
    2286:	c9 f0       	breq	.+50     	; 0x22ba <create_chain+0x450>
    2288:	84 81       	ldd	r24, Z+4	; 0x04
    228a:	81 11       	cpse	r24, r1
    228c:	46 c0       	rjmp	.+140    	; 0x231a <create_chain+0x4b0>
    228e:	01 e0       	ldi	r16, 0x01	; 1
    2290:	10 e0       	ldi	r17, 0x00	; 0
    2292:	a5 01       	movw	r20, r10
    2294:	94 01       	movw	r18, r8
    2296:	b1 01       	movw	r22, r2
    2298:	a9 8d       	ldd	r26, Y+25	; 0x19
    229a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    229c:	11 96       	adiw	r26, 0x01	; 1
    229e:	8c 91       	ld	r24, X
    22a0:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    22a4:	81 11       	cpse	r24, r1
    22a6:	cc ce       	rjmp	.-616    	; 0x2040 <create_chain+0x1d6>
    22a8:	a9 8d       	ldd	r26, Y+25	; 0x19
    22aa:	ba 8d       	ldd	r27, Y+26	; 0x1a
    22ac:	9e 96       	adiw	r26, 0x2e	; 46
    22ae:	8d 92       	st	X+, r8
    22b0:	9d 92       	st	X+, r9
    22b2:	ad 92       	st	X+, r10
    22b4:	bc 92       	st	X, r11
    22b6:	d1 97       	sbiw	r26, 0x31	; 49
    22b8:	fd 01       	movw	r30, r26
    22ba:	d3 01       	movw	r26, r6
    22bc:	c2 01       	movw	r24, r4
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	aa 1f       	adc	r26, r26
    22c4:	bb 1f       	adc	r27, r27
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	aa 1f       	adc	r26, r26
    22cc:	bb 1f       	adc	r27, r27
    22ce:	8c 7f       	andi	r24, 0xFC	; 252
    22d0:	91 70       	andi	r25, 0x01	; 1
    22d2:	aa 27       	eor	r26, r26
    22d4:	bb 27       	eor	r27, r27
    22d6:	e8 0f       	add	r30, r24
    22d8:	f9 1f       	adc	r31, r25
    22da:	82 a9       	ldd	r24, Z+50	; 0x32
    22dc:	93 a9       	ldd	r25, Z+51	; 0x33
    22de:	a4 a9       	ldd	r26, Z+52	; 0x34
    22e0:	b5 a9       	ldd	r27, Z+53	; 0x35
    22e2:	bf 70       	andi	r27, 0x0F	; 15
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	a1 05       	cpc	r26, r1
    22e8:	b1 05       	cpc	r27, r1
    22ea:	09 f4       	brne	.+2      	; 0x22ee <create_chain+0x484>
    22ec:	51 cf       	rjmp	.-350    	; 0x2190 <create_chain+0x326>
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	a1 05       	cpc	r26, r1
    22f2:	b1 05       	cpc	r27, r1
    22f4:	09 f4       	brne	.+2      	; 0x22f8 <create_chain+0x48e>
    22f6:	c9 ce       	rjmp	.-622    	; 0x208a <create_chain+0x220>
    22f8:	09 81       	ldd	r16, Y+1	; 0x01
    22fa:	1a 81       	ldd	r17, Y+2	; 0x02
    22fc:	2b 81       	ldd	r18, Y+3	; 0x03
    22fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2300:	04 15       	cp	r16, r4
    2302:	15 05       	cpc	r17, r5
    2304:	26 05       	cpc	r18, r6
    2306:	37 05       	cpc	r19, r7
    2308:	09 f4       	brne	.+2      	; 0x230c <create_chain+0x4a2>
    230a:	09 c1       	rjmp	.+530    	; 0x251e <create_chain+0x6b4>
    230c:	e9 8d       	ldd	r30, Y+25	; 0x19
    230e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2310:	86 89       	ldd	r24, Z+22	; 0x16
    2312:	97 89       	ldd	r25, Z+23	; 0x17
    2314:	a0 8d       	ldd	r26, Z+24	; 0x18
    2316:	b1 8d       	ldd	r27, Z+25	; 0x19
    2318:	f0 cd       	rjmp	.-1056   	; 0x1efa <create_chain+0x90>
    231a:	01 e0       	ldi	r16, 0x01	; 1
    231c:	10 e0       	ldi	r17, 0x00	; 0
    231e:	a7 01       	movw	r20, r14
    2320:	96 01       	movw	r18, r12
    2322:	b1 01       	movw	r22, r2
    2324:	81 81       	ldd	r24, Z+1	; 0x01
    2326:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    232a:	81 11       	cpse	r24, r1
    232c:	93 ce       	rjmp	.-730    	; 0x2054 <create_chain+0x1ea>
    232e:	a9 8d       	ldd	r26, Y+25	; 0x19
    2330:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2332:	14 96       	adiw	r26, 0x04	; 4
    2334:	1c 92       	st	X, r1
    2336:	14 97       	sbiw	r26, 0x04	; 4
    2338:	fd 01       	movw	r30, r26
    233a:	82 8d       	ldd	r24, Z+26	; 0x1a
    233c:	93 8d       	ldd	r25, Z+27	; 0x1b
    233e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2340:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2342:	42 a1       	ldd	r20, Z+34	; 0x22
    2344:	53 a1       	ldd	r21, Z+35	; 0x23
    2346:	64 a1       	ldd	r22, Z+36	; 0x24
    2348:	75 a1       	ldd	r23, Z+37	; 0x25
    234a:	97 01       	movw	r18, r14
    234c:	86 01       	movw	r16, r12
    234e:	04 1b       	sub	r16, r20
    2350:	15 0b       	sbc	r17, r21
    2352:	26 0b       	sbc	r18, r22
    2354:	37 0b       	sbc	r19, r23
    2356:	08 17       	cp	r16, r24
    2358:	19 07       	cpc	r17, r25
    235a:	2a 07       	cpc	r18, r26
    235c:	3b 07       	cpc	r19, r27
    235e:	08 f0       	brcs	.+2      	; 0x2362 <create_chain+0x4f8>
    2360:	96 cf       	rjmp	.-212    	; 0x228e <create_chain+0x424>
    2362:	23 81       	ldd	r18, Z+3	; 0x03
    2364:	02 2f       	mov	r16, r18
    2366:	10 e0       	ldi	r17, 0x00	; 0
    2368:	02 30       	cpi	r16, 0x02	; 2
    236a:	11 05       	cpc	r17, r1
    236c:	08 f4       	brcc	.+2      	; 0x2370 <create_chain+0x506>
    236e:	8f cf       	rjmp	.-226    	; 0x228e <create_chain+0x424>
    2370:	8d 82       	std	Y+5, r8	; 0x05
    2372:	9e 82       	std	Y+6, r9	; 0x06
    2374:	af 82       	std	Y+7, r10	; 0x07
    2376:	b8 86       	std	Y+8, r11	; 0x08
    2378:	58 01       	movw	r10, r16
    237a:	06 c0       	rjmp	.+12     	; 0x2388 <create_chain+0x51e>
    237c:	e9 8d       	ldd	r30, Y+25	; 0x19
    237e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2380:	82 8d       	ldd	r24, Z+26	; 0x1a
    2382:	93 8d       	ldd	r25, Z+27	; 0x1b
    2384:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2386:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2388:	c8 0e       	add	r12, r24
    238a:	d9 1e       	adc	r13, r25
    238c:	ea 1e       	adc	r14, r26
    238e:	fb 1e       	adc	r15, r27
    2390:	01 e0       	ldi	r16, 0x01	; 1
    2392:	10 e0       	ldi	r17, 0x00	; 0
    2394:	a7 01       	movw	r20, r14
    2396:	96 01       	movw	r18, r12
    2398:	b1 01       	movw	r22, r2
    239a:	a9 8d       	ldd	r26, Y+25	; 0x19
    239c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    239e:	11 96       	adiw	r26, 0x01	; 1
    23a0:	8c 91       	ld	r24, X
    23a2:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    23a6:	b1 e0       	ldi	r27, 0x01	; 1
    23a8:	ab 1a       	sub	r10, r27
    23aa:	b1 08       	sbc	r11, r1
    23ac:	e1 e0       	ldi	r30, 0x01	; 1
    23ae:	ae 16       	cp	r10, r30
    23b0:	b1 04       	cpc	r11, r1
    23b2:	21 f7       	brne	.-56     	; 0x237c <create_chain+0x512>
    23b4:	8d 80       	ldd	r8, Y+5	; 0x05
    23b6:	9e 80       	ldd	r9, Y+6	; 0x06
    23b8:	af 80       	ldd	r10, Y+7	; 0x07
    23ba:	b8 84       	ldd	r11, Y+8	; 0x08
    23bc:	68 cf       	rjmp	.-304    	; 0x228e <create_chain+0x424>
    23be:	01 e0       	ldi	r16, 0x01	; 1
    23c0:	10 e0       	ldi	r17, 0x00	; 0
    23c2:	a7 01       	movw	r20, r14
    23c4:	96 01       	movw	r18, r12
    23c6:	b1 01       	movw	r22, r2
    23c8:	81 81       	ldd	r24, Z+1	; 0x01
    23ca:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    23ce:	81 11       	cpse	r24, r1
    23d0:	41 ce       	rjmp	.-894    	; 0x2054 <create_chain+0x1ea>
    23d2:	a9 8d       	ldd	r26, Y+25	; 0x19
    23d4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    23d6:	14 96       	adiw	r26, 0x04	; 4
    23d8:	1c 92       	st	X, r1
    23da:	14 97       	sbiw	r26, 0x04	; 4
    23dc:	fd 01       	movw	r30, r26
    23de:	82 8d       	ldd	r24, Z+26	; 0x1a
    23e0:	93 8d       	ldd	r25, Z+27	; 0x1b
    23e2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    23e4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    23e6:	42 a1       	ldd	r20, Z+34	; 0x22
    23e8:	53 a1       	ldd	r21, Z+35	; 0x23
    23ea:	64 a1       	ldd	r22, Z+36	; 0x24
    23ec:	75 a1       	ldd	r23, Z+37	; 0x25
    23ee:	97 01       	movw	r18, r14
    23f0:	86 01       	movw	r16, r12
    23f2:	04 1b       	sub	r16, r20
    23f4:	15 0b       	sbc	r17, r21
    23f6:	26 0b       	sbc	r18, r22
    23f8:	37 0b       	sbc	r19, r23
    23fa:	08 17       	cp	r16, r24
    23fc:	19 07       	cpc	r17, r25
    23fe:	2a 07       	cpc	r18, r26
    2400:	3b 07       	cpc	r19, r27
    2402:	08 f0       	brcs	.+2      	; 0x2406 <create_chain+0x59c>
    2404:	9a ce       	rjmp	.-716    	; 0x213a <create_chain+0x2d0>
    2406:	23 81       	ldd	r18, Z+3	; 0x03
    2408:	02 2f       	mov	r16, r18
    240a:	10 e0       	ldi	r17, 0x00	; 0
    240c:	02 30       	cpi	r16, 0x02	; 2
    240e:	11 05       	cpc	r17, r1
    2410:	08 f4       	brcc	.+2      	; 0x2414 <create_chain+0x5aa>
    2412:	93 ce       	rjmp	.-730    	; 0x213a <create_chain+0x2d0>
    2414:	8d 82       	std	Y+5, r8	; 0x05
    2416:	9e 82       	std	Y+6, r9	; 0x06
    2418:	af 82       	std	Y+7, r10	; 0x07
    241a:	b8 86       	std	Y+8, r11	; 0x08
    241c:	58 01       	movw	r10, r16
    241e:	06 c0       	rjmp	.+12     	; 0x242c <create_chain+0x5c2>
    2420:	e9 8d       	ldd	r30, Y+25	; 0x19
    2422:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2424:	82 8d       	ldd	r24, Z+26	; 0x1a
    2426:	93 8d       	ldd	r25, Z+27	; 0x1b
    2428:	a4 8d       	ldd	r26, Z+28	; 0x1c
    242a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    242c:	c8 0e       	add	r12, r24
    242e:	d9 1e       	adc	r13, r25
    2430:	ea 1e       	adc	r14, r26
    2432:	fb 1e       	adc	r15, r27
    2434:	01 e0       	ldi	r16, 0x01	; 1
    2436:	10 e0       	ldi	r17, 0x00	; 0
    2438:	a7 01       	movw	r20, r14
    243a:	96 01       	movw	r18, r12
    243c:	b1 01       	movw	r22, r2
    243e:	a9 8d       	ldd	r26, Y+25	; 0x19
    2440:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2442:	11 96       	adiw	r26, 0x01	; 1
    2444:	8c 91       	ld	r24, X
    2446:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    244a:	b1 e0       	ldi	r27, 0x01	; 1
    244c:	ab 1a       	sub	r10, r27
    244e:	b1 08       	sbc	r11, r1
    2450:	e1 e0       	ldi	r30, 0x01	; 1
    2452:	ae 16       	cp	r10, r30
    2454:	b1 04       	cpc	r11, r1
    2456:	21 f7       	brne	.-56     	; 0x2420 <create_chain+0x5b6>
    2458:	8d 80       	ldd	r8, Y+5	; 0x05
    245a:	9e 80       	ldd	r9, Y+6	; 0x06
    245c:	af 80       	ldd	r10, Y+7	; 0x07
    245e:	b8 84       	ldd	r11, Y+8	; 0x08
    2460:	6c ce       	rjmp	.-808    	; 0x213a <create_chain+0x2d0>
    2462:	01 e0       	ldi	r16, 0x01	; 1
    2464:	10 e0       	ldi	r17, 0x00	; 0
    2466:	a5 01       	movw	r20, r10
    2468:	94 01       	movw	r18, r8
    246a:	b1 01       	movw	r22, r2
    246c:	11 96       	adiw	r26, 0x01	; 1
    246e:	8c 91       	ld	r24, X
    2470:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    2474:	81 11       	cpse	r24, r1
    2476:	ee cd       	rjmp	.-1060   	; 0x2054 <create_chain+0x1ea>
    2478:	a9 8d       	ldd	r26, Y+25	; 0x19
    247a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    247c:	14 96       	adiw	r26, 0x04	; 4
    247e:	1c 92       	st	X, r1
    2480:	14 97       	sbiw	r26, 0x04	; 4
    2482:	5a 96       	adiw	r26, 0x1a	; 26
    2484:	4d 91       	ld	r20, X+
    2486:	5d 91       	ld	r21, X+
    2488:	6d 91       	ld	r22, X+
    248a:	7c 91       	ld	r23, X
    248c:	5d 97       	sbiw	r26, 0x1d	; 29
    248e:	fd 01       	movw	r30, r26
    2490:	82 a1       	ldd	r24, Z+34	; 0x22
    2492:	93 a1       	ldd	r25, Z+35	; 0x23
    2494:	a4 a1       	ldd	r26, Z+36	; 0x24
    2496:	b5 a1       	ldd	r27, Z+37	; 0x25
    2498:	95 01       	movw	r18, r10
    249a:	84 01       	movw	r16, r8
    249c:	08 1b       	sub	r16, r24
    249e:	19 0b       	sbc	r17, r25
    24a0:	2a 0b       	sbc	r18, r26
    24a2:	3b 0b       	sbc	r19, r27
    24a4:	04 17       	cp	r16, r20
    24a6:	15 07       	cpc	r17, r21
    24a8:	26 07       	cpc	r18, r22
    24aa:	37 07       	cpc	r19, r23
    24ac:	08 f0       	brcs	.+2      	; 0x24b0 <create_chain+0x646>
    24ae:	78 cd       	rjmp	.-1296   	; 0x1fa0 <create_chain+0x136>
    24b0:	83 81       	ldd	r24, Z+3	; 0x03
    24b2:	08 2f       	mov	r16, r24
    24b4:	10 e0       	ldi	r17, 0x00	; 0
    24b6:	02 30       	cpi	r16, 0x02	; 2
    24b8:	11 05       	cpc	r17, r1
    24ba:	08 f4       	brcc	.+2      	; 0x24be <create_chain+0x654>
    24bc:	71 cd       	rjmp	.-1310   	; 0x1fa0 <create_chain+0x136>
    24be:	cd 86       	std	Y+13, r12	; 0x0d
    24c0:	de 86       	std	Y+14, r13	; 0x0e
    24c2:	ef 86       	std	Y+15, r14	; 0x0f
    24c4:	f8 8a       	std	Y+16, r15	; 0x10
    24c6:	78 01       	movw	r14, r16
    24c8:	a9 8d       	ldd	r26, Y+25	; 0x19
    24ca:	ba 8d       	ldd	r27, Y+26	; 0x1a
    24cc:	08 c0       	rjmp	.+16     	; 0x24de <create_chain+0x674>
    24ce:	a9 8d       	ldd	r26, Y+25	; 0x19
    24d0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    24d2:	5a 96       	adiw	r26, 0x1a	; 26
    24d4:	4d 91       	ld	r20, X+
    24d6:	5d 91       	ld	r21, X+
    24d8:	6d 91       	ld	r22, X+
    24da:	7c 91       	ld	r23, X
    24dc:	5d 97       	sbiw	r26, 0x1d	; 29
    24de:	84 0e       	add	r8, r20
    24e0:	95 1e       	adc	r9, r21
    24e2:	a6 1e       	adc	r10, r22
    24e4:	b7 1e       	adc	r11, r23
    24e6:	01 e0       	ldi	r16, 0x01	; 1
    24e8:	10 e0       	ldi	r17, 0x00	; 0
    24ea:	a5 01       	movw	r20, r10
    24ec:	94 01       	movw	r18, r8
    24ee:	b1 01       	movw	r22, r2
    24f0:	11 96       	adiw	r26, 0x01	; 1
    24f2:	8c 91       	ld	r24, X
    24f4:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    24f8:	b1 e0       	ldi	r27, 0x01	; 1
    24fa:	eb 1a       	sub	r14, r27
    24fc:	f1 08       	sbc	r15, r1
    24fe:	e1 e0       	ldi	r30, 0x01	; 1
    2500:	ee 16       	cp	r14, r30
    2502:	f1 04       	cpc	r15, r1
    2504:	21 f7       	brne	.-56     	; 0x24ce <create_chain+0x664>
    2506:	cd 84       	ldd	r12, Y+13	; 0x0d
    2508:	de 84       	ldd	r13, Y+14	; 0x0e
    250a:	ef 84       	ldd	r14, Y+15	; 0x0f
    250c:	f8 88       	ldd	r15, Y+16	; 0x10
    250e:	48 cd       	rjmp	.-1392   	; 0x1fa0 <create_chain+0x136>
    2510:	c9 8a       	std	Y+17, r12	; 0x11
    2512:	da 8a       	std	Y+18, r13	; 0x12
    2514:	eb 8a       	std	Y+19, r14	; 0x13
    2516:	fc 8a       	std	Y+20, r15	; 0x14
    2518:	29 8d       	ldd	r18, Y+25	; 0x19
    251a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    251c:	60 cd       	rjmp	.-1344   	; 0x1fde <create_chain+0x174>
    251e:	40 e0       	ldi	r20, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	b5 cd       	rjmp	.-1174   	; 0x2092 <create_chain+0x228>
    2528:	49 80       	ldd	r4, Y+1	; 0x01
    252a:	5a 80       	ldd	r5, Y+2	; 0x02
    252c:	6b 80       	ldd	r6, Y+3	; 0x03
    252e:	7c 80       	ldd	r7, Y+4	; 0x04
    2530:	de cc       	rjmp	.-1604   	; 0x1eee <create_chain+0x84>
    2532:	b9 01       	movw	r22, r18
    2534:	a8 01       	movw	r20, r16
    2536:	c5 01       	movw	r24, r10
    2538:	c2 d8       	rcall	.-3708   	; 0x16be <get_fat.part.4>
    253a:	62 30       	cpi	r22, 0x02	; 2
    253c:	71 05       	cpc	r23, r1
    253e:	81 05       	cpc	r24, r1
    2540:	91 05       	cpc	r25, r1
    2542:	08 f4       	brcc	.+2      	; 0x2546 <create_chain+0x6dc>
    2544:	a2 cd       	rjmp	.-1212   	; 0x208a <create_chain+0x220>
    2546:	6f 3f       	cpi	r22, 0xFF	; 255
    2548:	1f ef       	ldi	r17, 0xFF	; 255
    254a:	71 07       	cpc	r23, r17
    254c:	81 07       	cpc	r24, r17
    254e:	91 07       	cpc	r25, r17
    2550:	09 f4       	brne	.+2      	; 0x2554 <create_chain+0x6ea>
    2552:	80 cd       	rjmp	.-1280   	; 0x2054 <create_chain+0x1ea>
    2554:	d5 01       	movw	r26, r10
    2556:	56 96       	adiw	r26, 0x16	; 22
    2558:	cd 90       	ld	r12, X+
    255a:	dd 90       	ld	r13, X+
    255c:	ed 90       	ld	r14, X+
    255e:	fc 90       	ld	r15, X
    2560:	59 97       	sbiw	r26, 0x19	; 25
    2562:	6c 15       	cp	r22, r12
    2564:	7d 05       	cpc	r23, r13
    2566:	8e 05       	cpc	r24, r14
    2568:	9f 05       	cpc	r25, r15
    256a:	08 f4       	brcc	.+2      	; 0x256e <create_chain+0x704>
    256c:	64 c0       	rjmp	.+200    	; 0x2636 <create_chain+0x7cc>
    256e:	d7 01       	movw	r26, r14
    2570:	c6 01       	movw	r24, r12
    2572:	09 85       	ldd	r16, Y+9	; 0x09
    2574:	1a 85       	ldd	r17, Y+10	; 0x0a
    2576:	2b 85       	ldd	r18, Y+11	; 0x0b
    2578:	3c 85       	ldd	r19, Y+12	; 0x0c
    257a:	09 83       	std	Y+1, r16	; 0x01
    257c:	1a 83       	std	Y+2, r17	; 0x02
    257e:	2b 83       	std	Y+3, r18	; 0x03
    2580:	3c 83       	std	Y+4, r19	; 0x04
    2582:	28 01       	movw	r4, r16
    2584:	39 01       	movw	r6, r18
    2586:	b3 cc       	rjmp	.-1690   	; 0x1eee <create_chain+0x84>
    2588:	01 e0       	ldi	r16, 0x01	; 1
    258a:	10 e0       	ldi	r17, 0x00	; 0
    258c:	a7 01       	movw	r20, r14
    258e:	96 01       	movw	r18, r12
    2590:	b1 01       	movw	r22, r2
    2592:	11 96       	adiw	r26, 0x01	; 1
    2594:	8c 91       	ld	r24, X
    2596:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    259a:	81 11       	cpse	r24, r1
    259c:	5b cd       	rjmp	.-1354   	; 0x2054 <create_chain+0x1ea>
    259e:	e9 8d       	ldd	r30, Y+25	; 0x19
    25a0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    25a2:	14 82       	std	Z+4, r1	; 0x04
    25a4:	42 8d       	ldd	r20, Z+26	; 0x1a
    25a6:	53 8d       	ldd	r21, Z+27	; 0x1b
    25a8:	64 8d       	ldd	r22, Z+28	; 0x1c
    25aa:	75 8d       	ldd	r23, Z+29	; 0x1d
    25ac:	82 a1       	ldd	r24, Z+34	; 0x22
    25ae:	93 a1       	ldd	r25, Z+35	; 0x23
    25b0:	a4 a1       	ldd	r26, Z+36	; 0x24
    25b2:	b5 a1       	ldd	r27, Z+37	; 0x25
    25b4:	97 01       	movw	r18, r14
    25b6:	86 01       	movw	r16, r12
    25b8:	08 1b       	sub	r16, r24
    25ba:	19 0b       	sbc	r17, r25
    25bc:	2a 0b       	sbc	r18, r26
    25be:	3b 0b       	sbc	r19, r27
    25c0:	04 17       	cp	r16, r20
    25c2:	15 07       	cpc	r17, r21
    25c4:	26 07       	cpc	r18, r22
    25c6:	37 07       	cpc	r19, r23
    25c8:	08 f0       	brcs	.+2      	; 0x25cc <create_chain+0x762>
    25ca:	2c cd       	rjmp	.-1448   	; 0x2024 <create_chain+0x1ba>
    25cc:	83 81       	ldd	r24, Z+3	; 0x03
    25ce:	e8 2e       	mov	r14, r24
    25d0:	f1 2c       	mov	r15, r1
    25d2:	12 e0       	ldi	r17, 0x02	; 2
    25d4:	e1 16       	cp	r14, r17
    25d6:	f1 04       	cpc	r15, r1
    25d8:	08 f4       	brcc	.+2      	; 0x25dc <create_chain+0x772>
    25da:	24 cd       	rjmp	.-1464   	; 0x2024 <create_chain+0x1ba>
    25dc:	db 01       	movw	r26, r22
    25de:	ca 01       	movw	r24, r20
    25e0:	8d 8a       	std	Y+21, r8	; 0x15
    25e2:	9e 8a       	std	Y+22, r9	; 0x16
    25e4:	af 8a       	std	Y+23, r10	; 0x17
    25e6:	b8 8e       	std	Y+24, r11	; 0x18
    25e8:	57 01       	movw	r10, r14
    25ea:	c9 88       	ldd	r12, Y+17	; 0x11
    25ec:	da 88       	ldd	r13, Y+18	; 0x12
    25ee:	eb 88       	ldd	r14, Y+19	; 0x13
    25f0:	fc 88       	ldd	r15, Y+20	; 0x14
    25f2:	06 c0       	rjmp	.+12     	; 0x2600 <create_chain+0x796>
    25f4:	e9 8d       	ldd	r30, Y+25	; 0x19
    25f6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    25f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    25fa:	93 8d       	ldd	r25, Z+27	; 0x1b
    25fc:	a4 8d       	ldd	r26, Z+28	; 0x1c
    25fe:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2600:	c8 0e       	add	r12, r24
    2602:	d9 1e       	adc	r13, r25
    2604:	ea 1e       	adc	r14, r26
    2606:	fb 1e       	adc	r15, r27
    2608:	01 e0       	ldi	r16, 0x01	; 1
    260a:	10 e0       	ldi	r17, 0x00	; 0
    260c:	a7 01       	movw	r20, r14
    260e:	96 01       	movw	r18, r12
    2610:	b1 01       	movw	r22, r2
    2612:	a9 8d       	ldd	r26, Y+25	; 0x19
    2614:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2616:	11 96       	adiw	r26, 0x01	; 1
    2618:	8c 91       	ld	r24, X
    261a:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    261e:	b1 e0       	ldi	r27, 0x01	; 1
    2620:	ab 1a       	sub	r10, r27
    2622:	b1 08       	sbc	r11, r1
    2624:	e1 e0       	ldi	r30, 0x01	; 1
    2626:	ae 16       	cp	r10, r30
    2628:	b1 04       	cpc	r11, r1
    262a:	21 f7       	brne	.-56     	; 0x25f4 <create_chain+0x78a>
    262c:	8d 88       	ldd	r8, Y+21	; 0x15
    262e:	9e 88       	ldd	r9, Y+22	; 0x16
    2630:	af 88       	ldd	r10, Y+23	; 0x17
    2632:	b8 8c       	ldd	r11, Y+24	; 0x18
    2634:	f7 cc       	rjmp	.-1554   	; 0x2024 <create_chain+0x1ba>
    2636:	46 2f       	mov	r20, r22
    2638:	37 2f       	mov	r19, r23
    263a:	28 2f       	mov	r18, r24
    263c:	2a cd       	rjmp	.-1452   	; 0x2092 <create_chain+0x228>
    263e:	e9 8d       	ldd	r30, Y+25	; 0x19
    2640:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2642:	86 a6       	std	Z+46, r8	; 0x2e
    2644:	97 a6       	std	Z+47, r9	; 0x2f
    2646:	a0 aa       	std	Z+48, r10	; 0x30
    2648:	b1 aa       	std	Z+49, r11	; 0x31
    264a:	ed 85       	ldd	r30, Y+13	; 0x0d
    264c:	fe 85       	ldd	r31, Y+14	; 0x0e
    264e:	f1 70       	andi	r31, 0x01	; 1
    2650:	09 8d       	ldd	r16, Y+25	; 0x19
    2652:	1a 8d       	ldd	r17, Y+26	; 0x1a
    2654:	e0 0f       	add	r30, r16
    2656:	f1 1f       	adc	r31, r17
    2658:	22 a9       	ldd	r18, Z+50	; 0x32
    265a:	1d 81       	ldd	r17, Y+5	; 0x05
    265c:	81 2f       	mov	r24, r17
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	92 2b       	or	r25, r18
    2662:	40 fe       	sbrs	r4, 0
    2664:	09 c0       	rjmp	.+18     	; 0x2678 <create_chain+0x80e>
    2666:	92 95       	swap	r25
    2668:	82 95       	swap	r24
    266a:	8f 70       	andi	r24, 0x0F	; 15
    266c:	89 27       	eor	r24, r25
    266e:	9f 70       	andi	r25, 0x0F	; 15
    2670:	89 27       	eor	r24, r25
    2672:	a0 e0       	ldi	r26, 0x00	; 0
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	36 ce       	rjmp	.-916    	; 0x22e4 <create_chain+0x47a>
    2678:	9f 70       	andi	r25, 0x0F	; 15
    267a:	a0 e0       	ldi	r26, 0x00	; 0
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	32 ce       	rjmp	.-924    	; 0x22e4 <create_chain+0x47a>
    2680:	81 30       	cpi	r24, 0x01	; 1
    2682:	09 f0       	breq	.+2      	; 0x2686 <create_chain+0x81c>
    2684:	02 cd       	rjmp	.-1532   	; 0x208a <create_chain+0x220>
    2686:	e6 cc       	rjmp	.-1588   	; 0x2054 <create_chain+0x1ea>

00002688 <dir_alloc.constprop.10>:
    2688:	2f 92       	push	r2
    268a:	3f 92       	push	r3
    268c:	4f 92       	push	r4
    268e:	5f 92       	push	r5
    2690:	6f 92       	push	r6
    2692:	7f 92       	push	r7
    2694:	8f 92       	push	r8
    2696:	9f 92       	push	r9
    2698:	af 92       	push	r10
    269a:	bf 92       	push	r11
    269c:	cf 92       	push	r12
    269e:	df 92       	push	r13
    26a0:	ef 92       	push	r14
    26a2:	ff 92       	push	r15
    26a4:	0f 93       	push	r16
    26a6:	1f 93       	push	r17
    26a8:	cf 93       	push	r28
    26aa:	df 93       	push	r29
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	27 97       	sbiw	r28, 0x07	; 7
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	1c 01       	movw	r2, r24
    26b8:	60 e0       	ldi	r22, 0x00	; 0
    26ba:	70 e0       	ldi	r23, 0x00	; 0
    26bc:	ef da       	rcall	.-2594   	; 0x1c9c <dir_sdi>
    26be:	89 83       	std	Y+1, r24	; 0x01
    26c0:	88 23       	and	r24, r24
    26c2:	d9 f0       	breq	.+54     	; 0x26fa <dir_alloc.constprop.10+0x72>
    26c4:	b9 81       	ldd	r27, Y+1	; 0x01
    26c6:	b4 30       	cpi	r27, 0x04	; 4
    26c8:	09 f4       	brne	.+2      	; 0x26cc <dir_alloc.constprop.10+0x44>
    26ca:	6e c0       	rjmp	.+220    	; 0x27a8 <dir_alloc.constprop.10+0x120>
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	27 96       	adiw	r28, 0x07	; 7
    26d0:	cd bf       	out	0x3d, r28	; 61
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	ff 90       	pop	r15
    26de:	ef 90       	pop	r14
    26e0:	df 90       	pop	r13
    26e2:	cf 90       	pop	r12
    26e4:	bf 90       	pop	r11
    26e6:	af 90       	pop	r10
    26e8:	9f 90       	pop	r9
    26ea:	8f 90       	pop	r8
    26ec:	7f 90       	pop	r7
    26ee:	6f 90       	pop	r6
    26f0:	5f 90       	pop	r5
    26f2:	4f 90       	pop	r4
    26f4:	3f 90       	pop	r3
    26f6:	2f 90       	pop	r2
    26f8:	08 95       	ret
    26fa:	d1 01       	movw	r26, r2
    26fc:	0d 90       	ld	r0, X+
    26fe:	bc 91       	ld	r27, X
    2700:	a0 2d       	mov	r26, r0
    2702:	ae 83       	std	Y+6, r26	; 0x06
    2704:	bf 83       	std	Y+7, r27	; 0x07
    2706:	f1 01       	movw	r30, r2
    2708:	46 84       	ldd	r4, Z+14	; 0x0e
    270a:	57 84       	ldd	r5, Z+15	; 0x0f
    270c:	60 88       	ldd	r6, Z+16	; 0x10
    270e:	71 88       	ldd	r7, Z+17	; 0x11
    2710:	9e 96       	adiw	r26, 0x2e	; 46
    2712:	cd 90       	ld	r12, X+
    2714:	dd 90       	ld	r13, X+
    2716:	ed 90       	ld	r14, X+
    2718:	fc 90       	ld	r15, X
    271a:	d1 97       	sbiw	r26, 0x31	; 49
    271c:	c4 14       	cp	r12, r4
    271e:	d5 04       	cpc	r13, r5
    2720:	e6 04       	cpc	r14, r6
    2722:	f7 04       	cpc	r15, r7
    2724:	59 f1       	breq	.+86     	; 0x277c <dir_alloc.constprop.10+0xf4>
    2726:	14 96       	adiw	r26, 0x04	; 4
    2728:	8c 91       	ld	r24, X
    272a:	14 97       	sbiw	r26, 0x04	; 4
    272c:	81 11       	cpse	r24, r1
    272e:	71 c0       	rjmp	.+226    	; 0x2812 <dir_alloc.constprop.10+0x18a>
    2730:	ae 80       	ldd	r10, Y+6	; 0x06
    2732:	bf 80       	ldd	r11, Y+7	; 0x07
    2734:	f2 e3       	ldi	r31, 0x32	; 50
    2736:	af 0e       	add	r10, r31
    2738:	b1 1c       	adc	r11, r1
    273a:	01 e0       	ldi	r16, 0x01	; 1
    273c:	10 e0       	ldi	r17, 0x00	; 0
    273e:	a3 01       	movw	r20, r6
    2740:	92 01       	movw	r18, r4
    2742:	b5 01       	movw	r22, r10
    2744:	ae 81       	ldd	r26, Y+6	; 0x06
    2746:	bf 81       	ldd	r27, Y+7	; 0x07
    2748:	11 96       	adiw	r26, 0x01	; 1
    274a:	8c 91       	ld	r24, X
    274c:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    2750:	88 23       	and	r24, r24
    2752:	61 f0       	breq	.+24     	; 0x276c <dir_alloc.constprop.10+0xe4>
    2754:	8f ef       	ldi	r24, 0xFF	; 255
    2756:	9f ef       	ldi	r25, 0xFF	; 255
    2758:	dc 01       	movw	r26, r24
    275a:	ee 81       	ldd	r30, Y+6	; 0x06
    275c:	ff 81       	ldd	r31, Y+7	; 0x07
    275e:	86 a7       	std	Z+46, r24	; 0x2e
    2760:	97 a7       	std	Z+47, r25	; 0x2f
    2762:	a0 ab       	std	Z+48, r26	; 0x30
    2764:	b1 ab       	std	Z+49, r27	; 0x31
    2766:	f1 e0       	ldi	r31, 0x01	; 1
    2768:	f9 83       	std	Y+1, r31	; 0x01
    276a:	b0 cf       	rjmp	.-160    	; 0x26cc <dir_alloc.constprop.10+0x44>
    276c:	ae 81       	ldd	r26, Y+6	; 0x06
    276e:	bf 81       	ldd	r27, Y+7	; 0x07
    2770:	9e 96       	adiw	r26, 0x2e	; 46
    2772:	4d 92       	st	X+, r4
    2774:	5d 92       	st	X+, r5
    2776:	6d 92       	st	X+, r6
    2778:	7c 92       	st	X, r7
    277a:	d1 97       	sbiw	r26, 0x31	; 49
    277c:	d1 01       	movw	r26, r2
    277e:	52 96       	adiw	r26, 0x12	; 18
    2780:	ed 91       	ld	r30, X+
    2782:	fc 91       	ld	r31, X
    2784:	53 97       	sbiw	r26, 0x13	; 19
    2786:	80 81       	ld	r24, Z
    2788:	85 3e       	cpi	r24, 0xE5	; 229
    278a:	09 f4       	brne	.+2      	; 0x278e <dir_alloc.constprop.10+0x106>
    278c:	9f cf       	rjmp	.-194    	; 0x26cc <dir_alloc.constprop.10+0x44>
    278e:	88 23       	and	r24, r24
    2790:	09 f4       	brne	.+2      	; 0x2794 <dir_alloc.constprop.10+0x10c>
    2792:	9c cf       	rjmp	.-200    	; 0x26cc <dir_alloc.constprop.10+0x44>
    2794:	14 96       	adiw	r26, 0x04	; 4
    2796:	ed 90       	ld	r14, X+
    2798:	fc 90       	ld	r15, X
    279a:	15 97       	sbiw	r26, 0x05	; 5
    279c:	bf ef       	ldi	r27, 0xFF	; 255
    279e:	eb 1a       	sub	r14, r27
    27a0:	fb 0a       	sbc	r15, r27
    27a2:	e1 14       	cp	r14, r1
    27a4:	f1 04       	cpc	r15, r1
    27a6:	19 f4       	brne	.+6      	; 0x27ae <dir_alloc.constprop.10+0x126>
    27a8:	e7 e0       	ldi	r30, 0x07	; 7
    27aa:	e9 83       	std	Y+1, r30	; 0x01
    27ac:	8f cf       	rjmp	.-226    	; 0x26cc <dir_alloc.constprop.10+0x44>
    27ae:	f1 01       	movw	r30, r2
    27b0:	46 84       	ldd	r4, Z+14	; 0x0e
    27b2:	57 84       	ldd	r5, Z+15	; 0x0f
    27b4:	60 88       	ldd	r6, Z+16	; 0x10
    27b6:	71 88       	ldd	r7, Z+17	; 0x11
    27b8:	41 14       	cp	r4, r1
    27ba:	51 04       	cpc	r5, r1
    27bc:	61 04       	cpc	r6, r1
    27be:	71 04       	cpc	r7, r1
    27c0:	99 f3       	breq	.-26     	; 0x27a8 <dir_alloc.constprop.10+0x120>
    27c2:	67 01       	movw	r12, r14
    27c4:	ff e0       	ldi	r31, 0x0F	; 15
    27c6:	cf 22       	and	r12, r31
    27c8:	dd 24       	eor	r13, r13
    27ca:	c1 14       	cp	r12, r1
    27cc:	d1 04       	cpc	r13, r1
    27ce:	09 f4       	brne	.+2      	; 0x27d2 <dir_alloc.constprop.10+0x14a>
    27d0:	71 c0       	rjmp	.+226    	; 0x28b4 <dir_alloc.constprop.10+0x22c>
    27d2:	d1 01       	movw	r26, r2
    27d4:	0d 90       	ld	r0, X+
    27d6:	bc 91       	ld	r27, X
    27d8:	a0 2d       	mov	r26, r0
    27da:	ae 83       	std	Y+6, r26	; 0x06
    27dc:	bf 83       	std	Y+7, r27	; 0x07
    27de:	f1 01       	movw	r30, r2
    27e0:	e4 82       	std	Z+4, r14	; 0x04
    27e2:	f5 82       	std	Z+5, r15	; 0x05
    27e4:	cc 0c       	add	r12, r12
    27e6:	dd 1c       	adc	r13, r13
    27e8:	c2 94       	swap	r12
    27ea:	d2 94       	swap	r13
    27ec:	90 ef       	ldi	r25, 0xF0	; 240
    27ee:	d9 22       	and	r13, r25
    27f0:	dc 24       	eor	r13, r12
    27f2:	c9 22       	and	r12, r25
    27f4:	dc 24       	eor	r13, r12
    27f6:	f2 e3       	ldi	r31, 0x32	; 50
    27f8:	cf 0e       	add	r12, r31
    27fa:	d1 1c       	adc	r13, r1
    27fc:	0e 81       	ldd	r16, Y+6	; 0x06
    27fe:	1f 81       	ldd	r17, Y+7	; 0x07
    2800:	c0 0e       	add	r12, r16
    2802:	d1 1e       	adc	r13, r17
    2804:	d1 01       	movw	r26, r2
    2806:	52 96       	adiw	r26, 0x12	; 18
    2808:	cd 92       	st	X+, r12
    280a:	dc 92       	st	X, r13
    280c:	53 97       	sbiw	r26, 0x13	; 19
    280e:	d8 01       	movw	r26, r16
    2810:	7f cf       	rjmp	.-258    	; 0x2710 <dir_alloc.constprop.10+0x88>
    2812:	5d 01       	movw	r10, r26
    2814:	b2 e3       	ldi	r27, 0x32	; 50
    2816:	ab 0e       	add	r10, r27
    2818:	b1 1c       	adc	r11, r1
    281a:	01 e0       	ldi	r16, 0x01	; 1
    281c:	10 e0       	ldi	r17, 0x00	; 0
    281e:	a7 01       	movw	r20, r14
    2820:	96 01       	movw	r18, r12
    2822:	b5 01       	movw	r22, r10
    2824:	ee 81       	ldd	r30, Y+6	; 0x06
    2826:	ff 81       	ldd	r31, Y+7	; 0x07
    2828:	81 81       	ldd	r24, Z+1	; 0x01
    282a:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    282e:	81 11       	cpse	r24, r1
    2830:	3e c0       	rjmp	.+124    	; 0x28ae <dir_alloc.constprop.10+0x226>
    2832:	ae 81       	ldd	r26, Y+6	; 0x06
    2834:	bf 81       	ldd	r27, Y+7	; 0x07
    2836:	14 96       	adiw	r26, 0x04	; 4
    2838:	1c 92       	st	X, r1
    283a:	14 97       	sbiw	r26, 0x04	; 4
    283c:	fd 01       	movw	r30, r26
    283e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2840:	93 8d       	ldd	r25, Z+27	; 0x1b
    2842:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2844:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2846:	42 a1       	ldd	r20, Z+34	; 0x22
    2848:	53 a1       	ldd	r21, Z+35	; 0x23
    284a:	64 a1       	ldd	r22, Z+36	; 0x24
    284c:	75 a1       	ldd	r23, Z+37	; 0x25
    284e:	97 01       	movw	r18, r14
    2850:	86 01       	movw	r16, r12
    2852:	04 1b       	sub	r16, r20
    2854:	15 0b       	sbc	r17, r21
    2856:	26 0b       	sbc	r18, r22
    2858:	37 0b       	sbc	r19, r23
    285a:	08 17       	cp	r16, r24
    285c:	19 07       	cpc	r17, r25
    285e:	2a 07       	cpc	r18, r26
    2860:	3b 07       	cpc	r19, r27
    2862:	08 f0       	brcs	.+2      	; 0x2866 <dir_alloc.constprop.10+0x1de>
    2864:	6a cf       	rjmp	.-300    	; 0x273a <dir_alloc.constprop.10+0xb2>
    2866:	83 80       	ldd	r8, Z+3	; 0x03
    2868:	91 2c       	mov	r9, r1
    286a:	12 e0       	ldi	r17, 0x02	; 2
    286c:	81 16       	cp	r8, r17
    286e:	91 04       	cpc	r9, r1
    2870:	38 f4       	brcc	.+14     	; 0x2880 <dir_alloc.constprop.10+0x1f8>
    2872:	63 cf       	rjmp	.-314    	; 0x273a <dir_alloc.constprop.10+0xb2>
    2874:	ee 81       	ldd	r30, Y+6	; 0x06
    2876:	ff 81       	ldd	r31, Y+7	; 0x07
    2878:	82 8d       	ldd	r24, Z+26	; 0x1a
    287a:	93 8d       	ldd	r25, Z+27	; 0x1b
    287c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    287e:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2880:	c8 0e       	add	r12, r24
    2882:	d9 1e       	adc	r13, r25
    2884:	ea 1e       	adc	r14, r26
    2886:	fb 1e       	adc	r15, r27
    2888:	01 e0       	ldi	r16, 0x01	; 1
    288a:	10 e0       	ldi	r17, 0x00	; 0
    288c:	a7 01       	movw	r20, r14
    288e:	96 01       	movw	r18, r12
    2890:	b5 01       	movw	r22, r10
    2892:	ae 81       	ldd	r26, Y+6	; 0x06
    2894:	bf 81       	ldd	r27, Y+7	; 0x07
    2896:	11 96       	adiw	r26, 0x01	; 1
    2898:	8c 91       	ld	r24, X
    289a:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    289e:	b1 e0       	ldi	r27, 0x01	; 1
    28a0:	8b 1a       	sub	r8, r27
    28a2:	91 08       	sbc	r9, r1
    28a4:	e1 e0       	ldi	r30, 0x01	; 1
    28a6:	8e 16       	cp	r8, r30
    28a8:	91 04       	cpc	r9, r1
    28aa:	21 f7       	brne	.-56     	; 0x2874 <dir_alloc.constprop.10+0x1ec>
    28ac:	46 cf       	rjmp	.-372    	; 0x273a <dir_alloc.constprop.10+0xb2>
    28ae:	01 e0       	ldi	r16, 0x01	; 1
    28b0:	09 83       	std	Y+1, r16	; 0x01
    28b2:	0c cf       	rjmp	.-488    	; 0x26cc <dir_alloc.constprop.10+0x44>
    28b4:	bf ef       	ldi	r27, 0xFF	; 255
    28b6:	4b 1a       	sub	r4, r27
    28b8:	5b 0a       	sbc	r5, r27
    28ba:	6b 0a       	sbc	r6, r27
    28bc:	7b 0a       	sbc	r7, r27
    28be:	f1 01       	movw	r30, r2
    28c0:	46 86       	std	Z+14, r4	; 0x0e
    28c2:	57 86       	std	Z+15, r5	; 0x0f
    28c4:	60 8a       	std	Z+16, r6	; 0x10
    28c6:	71 8a       	std	Z+17, r7	; 0x11
    28c8:	42 85       	ldd	r20, Z+10	; 0x0a
    28ca:	53 85       	ldd	r21, Z+11	; 0x0b
    28cc:	64 85       	ldd	r22, Z+12	; 0x0c
    28ce:	75 85       	ldd	r23, Z+13	; 0x0d
    28d0:	41 15       	cp	r20, r1
    28d2:	51 05       	cpc	r21, r1
    28d4:	61 05       	cpc	r22, r1
    28d6:	71 05       	cpc	r23, r1
    28d8:	41 f1       	breq	.+80     	; 0x292a <dir_alloc.constprop.10+0x2a2>
    28da:	f1 01       	movw	r30, r2
    28dc:	01 90       	ld	r0, Z+
    28de:	f0 81       	ld	r31, Z
    28e0:	e0 2d       	mov	r30, r0
    28e2:	ee 83       	std	Y+6, r30	; 0x06
    28e4:	ff 83       	std	Y+7, r31	; 0x07
    28e6:	82 81       	ldd	r24, Z+2	; 0x02
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	97 01       	movw	r18, r14
    28ee:	32 95       	swap	r19
    28f0:	22 95       	swap	r18
    28f2:	2f 70       	andi	r18, 0x0F	; 15
    28f4:	23 27       	eor	r18, r19
    28f6:	3f 70       	andi	r19, 0x0F	; 15
    28f8:	23 27       	eor	r18, r19
    28fa:	82 23       	and	r24, r18
    28fc:	93 23       	and	r25, r19
    28fe:	89 2b       	or	r24, r25
    2900:	09 f0       	breq	.+2      	; 0x2904 <dir_alloc.constprop.10+0x27c>
    2902:	6d cf       	rjmp	.-294    	; 0x27de <dir_alloc.constprop.10+0x156>
    2904:	42 30       	cpi	r20, 0x02	; 2
    2906:	51 05       	cpc	r21, r1
    2908:	61 05       	cpc	r22, r1
    290a:	71 05       	cpc	r23, r1
    290c:	58 f0       	brcs	.+22     	; 0x2924 <dir_alloc.constprop.10+0x29c>
    290e:	ee 81       	ldd	r30, Y+6	; 0x06
    2910:	ff 81       	ldd	r31, Y+7	; 0x07
    2912:	86 89       	ldd	r24, Z+22	; 0x16
    2914:	97 89       	ldd	r25, Z+23	; 0x17
    2916:	a0 8d       	ldd	r26, Z+24	; 0x18
    2918:	b1 8d       	ldd	r27, Z+25	; 0x19
    291a:	48 17       	cp	r20, r24
    291c:	59 07       	cpc	r21, r25
    291e:	6a 07       	cpc	r22, r26
    2920:	7b 07       	cpc	r23, r27
    2922:	88 f0       	brcs	.+34     	; 0x2946 <dir_alloc.constprop.10+0x2be>
    2924:	f2 e0       	ldi	r31, 0x02	; 2
    2926:	f9 83       	std	Y+1, r31	; 0x01
    2928:	d1 ce       	rjmp	.-606    	; 0x26cc <dir_alloc.constprop.10+0x44>
    292a:	00 81       	ld	r16, Z
    292c:	11 81       	ldd	r17, Z+1	; 0x01
    292e:	0e 83       	std	Y+6, r16	; 0x06
    2930:	1f 83       	std	Y+7, r17	; 0x07
    2932:	d8 01       	movw	r26, r16
    2934:	18 96       	adiw	r26, 0x08	; 8
    2936:	8d 91       	ld	r24, X+
    2938:	9c 91       	ld	r25, X
    293a:	19 97       	sbiw	r26, 0x09	; 9
    293c:	e8 16       	cp	r14, r24
    293e:	f9 06       	cpc	r15, r25
    2940:	08 f0       	brcs	.+2      	; 0x2944 <dir_alloc.constprop.10+0x2bc>
    2942:	32 cf       	rjmp	.-412    	; 0x27a8 <dir_alloc.constprop.10+0x120>
    2944:	4c cf       	rjmp	.-360    	; 0x27de <dir_alloc.constprop.10+0x156>
    2946:	cf 01       	movw	r24, r30
    2948:	0e 94 5f 0b 	call	0x16be	; 0x16be <get_fat.part.4>
    294c:	4b 01       	movw	r8, r22
    294e:	5c 01       	movw	r10, r24
    2950:	62 30       	cpi	r22, 0x02	; 2
    2952:	71 05       	cpc	r23, r1
    2954:	81 05       	cpc	r24, r1
    2956:	91 05       	cpc	r25, r1
    2958:	28 f3       	brcs	.-54     	; 0x2924 <dir_alloc.constprop.10+0x29c>
    295a:	6f 3f       	cpi	r22, 0xFF	; 255
    295c:	0f ef       	ldi	r16, 0xFF	; 255
    295e:	70 07       	cpc	r23, r16
    2960:	80 07       	cpc	r24, r16
    2962:	90 07       	cpc	r25, r16
    2964:	09 f4       	brne	.+2      	; 0x2968 <dir_alloc.constprop.10+0x2e0>
    2966:	4e c0       	rjmp	.+156    	; 0x2a04 <dir_alloc.constprop.10+0x37c>
    2968:	d1 01       	movw	r26, r2
    296a:	0d 90       	ld	r0, X+
    296c:	bc 91       	ld	r27, X
    296e:	a0 2d       	mov	r26, r0
    2970:	ae 83       	std	Y+6, r26	; 0x06
    2972:	bf 83       	std	Y+7, r27	; 0x07
    2974:	56 96       	adiw	r26, 0x16	; 22
    2976:	8d 91       	ld	r24, X+
    2978:	9d 91       	ld	r25, X+
    297a:	0d 90       	ld	r0, X+
    297c:	bc 91       	ld	r27, X
    297e:	a0 2d       	mov	r26, r0
    2980:	88 16       	cp	r8, r24
    2982:	99 06       	cpc	r9, r25
    2984:	aa 06       	cpc	r10, r26
    2986:	bb 06       	cpc	r11, r27
    2988:	58 f5       	brcc	.+86     	; 0x29e0 <dir_alloc.constprop.10+0x358>
    298a:	a5 01       	movw	r20, r10
    298c:	94 01       	movw	r18, r8
    298e:	22 50       	subi	r18, 0x02	; 2
    2990:	31 09       	sbc	r19, r1
    2992:	41 09       	sbc	r20, r1
    2994:	51 09       	sbc	r21, r1
    2996:	f1 01       	movw	r30, r2
    2998:	82 86       	std	Z+10, r8	; 0x0a
    299a:	93 86       	std	Z+11, r9	; 0x0b
    299c:	a4 86       	std	Z+12, r10	; 0x0c
    299e:	b5 86       	std	Z+13, r11	; 0x0d
    29a0:	02 97       	sbiw	r24, 0x02	; 2
    29a2:	a1 09       	sbc	r26, r1
    29a4:	b1 09       	sbc	r27, r1
    29a6:	28 17       	cp	r18, r24
    29a8:	39 07       	cpc	r19, r25
    29aa:	4a 07       	cpc	r20, r26
    29ac:	5b 07       	cpc	r21, r27
    29ae:	68 f5       	brcc	.+90     	; 0x2a0a <dir_alloc.constprop.10+0x382>
    29b0:	ee 81       	ldd	r30, Y+6	; 0x06
    29b2:	ff 81       	ldd	r31, Y+7	; 0x07
    29b4:	a2 81       	ldd	r26, Z+2	; 0x02
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__muluhisi3>
    29bc:	2b 01       	movw	r4, r22
    29be:	3c 01       	movw	r6, r24
    29c0:	82 a5       	ldd	r24, Z+42	; 0x2a
    29c2:	93 a5       	ldd	r25, Z+43	; 0x2b
    29c4:	a4 a5       	ldd	r26, Z+44	; 0x2c
    29c6:	b5 a5       	ldd	r27, Z+45	; 0x2d
    29c8:	48 0e       	add	r4, r24
    29ca:	59 1e       	adc	r5, r25
    29cc:	6a 1e       	adc	r6, r26
    29ce:	7b 1e       	adc	r7, r27
    29d0:	d1 01       	movw	r26, r2
    29d2:	1e 96       	adiw	r26, 0x0e	; 14
    29d4:	4d 92       	st	X+, r4
    29d6:	5d 92       	st	X+, r5
    29d8:	6d 92       	st	X+, r6
    29da:	7c 92       	st	X, r7
    29dc:	51 97       	sbiw	r26, 0x11	; 17
    29de:	ff ce       	rjmp	.-514    	; 0x27de <dir_alloc.constprop.10+0x156>
    29e0:	f1 01       	movw	r30, r2
    29e2:	42 85       	ldd	r20, Z+10	; 0x0a
    29e4:	53 85       	ldd	r21, Z+11	; 0x0b
    29e6:	64 85       	ldd	r22, Z+12	; 0x0c
    29e8:	75 85       	ldd	r23, Z+13	; 0x0d
    29ea:	8e 81       	ldd	r24, Y+6	; 0x06
    29ec:	9f 81       	ldd	r25, Y+7	; 0x07
    29ee:	3d da       	rcall	.-2950   	; 0x1e6a <create_chain>
    29f0:	4b 01       	movw	r8, r22
    29f2:	5c 01       	movw	r10, r24
    29f4:	61 15       	cp	r22, r1
    29f6:	71 05       	cpc	r23, r1
    29f8:	81 05       	cpc	r24, r1
    29fa:	91 05       	cpc	r25, r1
    29fc:	51 f4       	brne	.+20     	; 0x2a12 <dir_alloc.constprop.10+0x38a>
    29fe:	f7 e0       	ldi	r31, 0x07	; 7
    2a00:	f9 83       	std	Y+1, r31	; 0x01
    2a02:	64 ce       	rjmp	.-824    	; 0x26cc <dir_alloc.constprop.10+0x44>
    2a04:	11 e0       	ldi	r17, 0x01	; 1
    2a06:	19 83       	std	Y+1, r17	; 0x01
    2a08:	61 ce       	rjmp	.-830    	; 0x26cc <dir_alloc.constprop.10+0x44>
    2a0a:	41 2c       	mov	r4, r1
    2a0c:	51 2c       	mov	r5, r1
    2a0e:	32 01       	movw	r6, r4
    2a10:	df cf       	rjmp	.-66     	; 0x29d0 <dir_alloc.constprop.10+0x348>
    2a12:	61 30       	cpi	r22, 0x01	; 1
    2a14:	71 05       	cpc	r23, r1
    2a16:	81 05       	cpc	r24, r1
    2a18:	91 05       	cpc	r25, r1
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <dir_alloc.constprop.10+0x396>
    2a1c:	83 cf       	rjmp	.-250    	; 0x2924 <dir_alloc.constprop.10+0x29c>
    2a1e:	6f 3f       	cpi	r22, 0xFF	; 255
    2a20:	0f ef       	ldi	r16, 0xFF	; 255
    2a22:	70 07       	cpc	r23, r16
    2a24:	80 07       	cpc	r24, r16
    2a26:	90 07       	cpc	r25, r16
    2a28:	69 f3       	breq	.-38     	; 0x2a04 <dir_alloc.constprop.10+0x37c>
    2a2a:	d1 01       	movw	r26, r2
    2a2c:	8d 91       	ld	r24, X+
    2a2e:	9c 91       	ld	r25, X
    2a30:	fc 01       	movw	r30, r24
    2a32:	24 81       	ldd	r18, Z+4	; 0x04
    2a34:	21 11       	cpse	r18, r1
    2a36:	9b c0       	rjmp	.+310    	; 0x2b6e <dir_alloc.constprop.10+0x4e6>
    2a38:	fc 01       	movw	r30, r24
    2a3a:	f2 96       	adiw	r30, 0x32	; 50
    2a3c:	df 01       	movw	r26, r30
    2a3e:	00 e0       	ldi	r16, 0x00	; 0
    2a40:	12 e0       	ldi	r17, 0x02	; 2
    2a42:	1d 92       	st	X+, r1
    2a44:	01 50       	subi	r16, 0x01	; 1
    2a46:	10 40       	sbci	r17, 0x00	; 0
    2a48:	e1 f7       	brne	.-8      	; 0x2a42 <dir_alloc.constprop.10+0x3ba>
    2a4a:	d1 01       	movw	r26, r2
    2a4c:	0d 90       	ld	r0, X+
    2a4e:	bc 91       	ld	r27, X
    2a50:	a0 2d       	mov	r26, r0
    2a52:	ae 83       	std	Y+6, r26	; 0x06
    2a54:	bf 83       	std	Y+7, r27	; 0x07
    2a56:	95 01       	movw	r18, r10
    2a58:	84 01       	movw	r16, r8
    2a5a:	02 50       	subi	r16, 0x02	; 2
    2a5c:	11 09       	sbc	r17, r1
    2a5e:	21 09       	sbc	r18, r1
    2a60:	31 09       	sbc	r19, r1
    2a62:	0a 83       	std	Y+2, r16	; 0x02
    2a64:	1b 83       	std	Y+3, r17	; 0x03
    2a66:	2c 83       	std	Y+4, r18	; 0x04
    2a68:	3d 83       	std	Y+5, r19	; 0x05
    2a6a:	56 96       	adiw	r26, 0x16	; 22
    2a6c:	8d 91       	ld	r24, X+
    2a6e:	9d 91       	ld	r25, X+
    2a70:	0d 90       	ld	r0, X+
    2a72:	bc 91       	ld	r27, X
    2a74:	a0 2d       	mov	r26, r0
    2a76:	02 97       	sbiw	r24, 0x02	; 2
    2a78:	a1 09       	sbc	r26, r1
    2a7a:	b1 09       	sbc	r27, r1
    2a7c:	08 17       	cp	r16, r24
    2a7e:	19 07       	cpc	r17, r25
    2a80:	2a 07       	cpc	r18, r26
    2a82:	3b 07       	cpc	r19, r27
    2a84:	08 f0       	brcs	.+2      	; 0x2a88 <dir_alloc.constprop.10+0x400>
    2a86:	53 c0       	rjmp	.+166    	; 0x2b2e <dir_alloc.constprop.10+0x4a6>
    2a88:	a9 01       	movw	r20, r18
    2a8a:	98 01       	movw	r18, r16
    2a8c:	ee 81       	ldd	r30, Y+6	; 0x06
    2a8e:	ff 81       	ldd	r31, Y+7	; 0x07
    2a90:	12 81       	ldd	r17, Z+2	; 0x02
    2a92:	a1 2f       	mov	r26, r17
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__muluhisi3>
    2a9a:	42 a4       	ldd	r4, Z+42	; 0x2a
    2a9c:	53 a4       	ldd	r5, Z+43	; 0x2b
    2a9e:	64 a4       	ldd	r6, Z+44	; 0x2c
    2aa0:	75 a4       	ldd	r7, Z+45	; 0x2d
    2aa2:	64 0d       	add	r22, r4
    2aa4:	75 1d       	adc	r23, r5
    2aa6:	86 1d       	adc	r24, r6
    2aa8:	97 1d       	adc	r25, r7
    2aaa:	e1 2f       	mov	r30, r17
    2aac:	ae 81       	ldd	r26, Y+6	; 0x06
    2aae:	bf 81       	ldd	r27, Y+7	; 0x07
    2ab0:	9e 96       	adiw	r26, 0x2e	; 46
    2ab2:	6d 93       	st	X+, r22
    2ab4:	7d 93       	st	X+, r23
    2ab6:	8d 93       	st	X+, r24
    2ab8:	9c 93       	st	X, r25
    2aba:	d1 97       	sbiw	r26, 0x31	; 49
    2abc:	61 2c       	mov	r6, r1
    2abe:	71 2c       	mov	r7, r1
    2ac0:	e1 11       	cpse	r30, r1
    2ac2:	19 c0       	rjmp	.+50     	; 0x2af6 <dir_alloc.constprop.10+0x46e>
    2ac4:	3f c0       	rjmp	.+126    	; 0x2b44 <dir_alloc.constprop.10+0x4bc>
    2ac6:	9e 96       	adiw	r26, 0x2e	; 46
    2ac8:	4d 91       	ld	r20, X+
    2aca:	5d 91       	ld	r21, X+
    2acc:	6d 91       	ld	r22, X+
    2ace:	7c 91       	ld	r23, X
    2ad0:	d1 97       	sbiw	r26, 0x31	; 49
    2ad2:	4f 5f       	subi	r20, 0xFF	; 255
    2ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ad6:	6f 4f       	sbci	r22, 0xFF	; 255
    2ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    2ada:	fd 01       	movw	r30, r26
    2adc:	46 a7       	std	Z+46, r20	; 0x2e
    2ade:	57 a7       	std	Z+47, r21	; 0x2f
    2ae0:	60 ab       	std	Z+48, r22	; 0x30
    2ae2:	71 ab       	std	Z+49, r23	; 0x31
    2ae4:	ff ef       	ldi	r31, 0xFF	; 255
    2ae6:	6f 1a       	sub	r6, r31
    2ae8:	7f 0a       	sbc	r7, r31
    2aea:	12 96       	adiw	r26, 0x02	; 2
    2aec:	8c 91       	ld	r24, X
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	68 16       	cp	r6, r24
    2af2:	79 06       	cpc	r7, r25
    2af4:	28 f5       	brcc	.+74     	; 0x2b40 <dir_alloc.constprop.10+0x4b8>
    2af6:	01 e0       	ldi	r16, 0x01	; 1
    2af8:	ee 81       	ldd	r30, Y+6	; 0x06
    2afa:	ff 81       	ldd	r31, Y+7	; 0x07
    2afc:	04 83       	std	Z+4, r16	; 0x04
    2afe:	d1 01       	movw	r26, r2
    2b00:	0d 90       	ld	r0, X+
    2b02:	bc 91       	ld	r27, X
    2b04:	a0 2d       	mov	r26, r0
    2b06:	ae 83       	std	Y+6, r26	; 0x06
    2b08:	bf 83       	std	Y+7, r27	; 0x07
    2b0a:	14 96       	adiw	r26, 0x04	; 4
    2b0c:	8c 91       	ld	r24, X
    2b0e:	14 97       	sbiw	r26, 0x04	; 4
    2b10:	88 23       	and	r24, r24
    2b12:	c9 f2       	breq	.-78     	; 0x2ac6 <dir_alloc.constprop.10+0x43e>
    2b14:	cd 01       	movw	r24, r26
    2b16:	0e 94 73 06 	call	0xce6	; 0xce6 <sync_window.part.2>
    2b1a:	81 11       	cpse	r24, r1
    2b1c:	73 cf       	rjmp	.-282    	; 0x2a04 <dir_alloc.constprop.10+0x37c>
    2b1e:	f1 01       	movw	r30, r2
    2b20:	01 90       	ld	r0, Z+
    2b22:	f0 81       	ld	r31, Z
    2b24:	e0 2d       	mov	r30, r0
    2b26:	ee 83       	std	Y+6, r30	; 0x06
    2b28:	ff 83       	std	Y+7, r31	; 0x07
    2b2a:	df 01       	movw	r26, r30
    2b2c:	cc cf       	rjmp	.-104    	; 0x2ac6 <dir_alloc.constprop.10+0x43e>
    2b2e:	ae 81       	ldd	r26, Y+6	; 0x06
    2b30:	bf 81       	ldd	r27, Y+7	; 0x07
    2b32:	12 96       	adiw	r26, 0x02	; 2
    2b34:	ec 91       	ld	r30, X
    2b36:	12 97       	sbiw	r26, 0x02	; 2
    2b38:	60 e0       	ldi	r22, 0x00	; 0
    2b3a:	70 e0       	ldi	r23, 0x00	; 0
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	b8 cf       	rjmp	.-144    	; 0x2ab0 <dir_alloc.constprop.10+0x428>
    2b40:	cb 01       	movw	r24, r22
    2b42:	ba 01       	movw	r22, r20
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	86 19       	sub	r24, r6
    2b4a:	97 09       	sbc	r25, r7
    2b4c:	a1 09       	sbc	r26, r1
    2b4e:	b1 09       	sbc	r27, r1
    2b50:	ee 81       	ldd	r30, Y+6	; 0x06
    2b52:	ff 81       	ldd	r31, Y+7	; 0x07
    2b54:	86 a7       	std	Z+46, r24	; 0x2e
    2b56:	97 a7       	std	Z+47, r25	; 0x2f
    2b58:	a0 ab       	std	Z+48, r26	; 0x30
    2b5a:	b1 ab       	std	Z+49, r27	; 0x31
    2b5c:	86 89       	ldd	r24, Z+22	; 0x16
    2b5e:	97 89       	ldd	r25, Z+23	; 0x17
    2b60:	a0 8d       	ldd	r26, Z+24	; 0x18
    2b62:	b1 8d       	ldd	r27, Z+25	; 0x19
    2b64:	2a 81       	ldd	r18, Y+2	; 0x02
    2b66:	3b 81       	ldd	r19, Y+3	; 0x03
    2b68:	4c 81       	ldd	r20, Y+4	; 0x04
    2b6a:	5d 81       	ldd	r21, Y+5	; 0x05
    2b6c:	14 cf       	rjmp	.-472    	; 0x2996 <dir_alloc.constprop.10+0x30e>
    2b6e:	0e 94 73 06 	call	0xce6	; 0xce6 <sync_window.part.2>
    2b72:	81 11       	cpse	r24, r1
    2b74:	47 cf       	rjmp	.-370    	; 0x2a04 <dir_alloc.constprop.10+0x37c>
    2b76:	d1 01       	movw	r26, r2
    2b78:	8d 91       	ld	r24, X+
    2b7a:	9c 91       	ld	r25, X
    2b7c:	5d cf       	rjmp	.-326    	; 0x2a38 <dir_alloc.constprop.10+0x3b0>

00002b7e <dir_register>:
    2b7e:	2f 92       	push	r2
    2b80:	3f 92       	push	r3
    2b82:	4f 92       	push	r4
    2b84:	5f 92       	push	r5
    2b86:	6f 92       	push	r6
    2b88:	7f 92       	push	r7
    2b8a:	8f 92       	push	r8
    2b8c:	9f 92       	push	r9
    2b8e:	af 92       	push	r10
    2b90:	bf 92       	push	r11
    2b92:	cf 92       	push	r12
    2b94:	df 92       	push	r13
    2b96:	ef 92       	push	r14
    2b98:	ff 92       	push	r15
    2b9a:	0f 93       	push	r16
    2b9c:	1f 93       	push	r17
    2b9e:	cf 93       	push	r28
    2ba0:	df 93       	push	r29
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	2f 97       	sbiw	r28, 0x0f	; 15
    2ba8:	cd bf       	out	0x3d, r28	; 61
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	2c 01       	movw	r4, r24
    2bae:	6c dd       	rcall	.-1320   	; 0x2688 <dir_alloc.constprop.10>
    2bb0:	98 2f       	mov	r25, r24
    2bb2:	88 23       	and	r24, r24
    2bb4:	b9 f0       	breq	.+46     	; 0x2be4 <dir_register+0x66>
    2bb6:	89 2f       	mov	r24, r25
    2bb8:	2f 96       	adiw	r28, 0x0f	; 15
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	df 91       	pop	r29
    2bc0:	cf 91       	pop	r28
    2bc2:	1f 91       	pop	r17
    2bc4:	0f 91       	pop	r16
    2bc6:	ff 90       	pop	r15
    2bc8:	ef 90       	pop	r14
    2bca:	df 90       	pop	r13
    2bcc:	cf 90       	pop	r12
    2bce:	bf 90       	pop	r11
    2bd0:	af 90       	pop	r10
    2bd2:	9f 90       	pop	r9
    2bd4:	8f 90       	pop	r8
    2bd6:	7f 90       	pop	r7
    2bd8:	6f 90       	pop	r6
    2bda:	5f 90       	pop	r5
    2bdc:	4f 90       	pop	r4
    2bde:	3f 90       	pop	r3
    2be0:	2f 90       	pop	r2
    2be2:	08 95       	ret
    2be4:	d2 01       	movw	r26, r4
    2be6:	1e 96       	adiw	r26, 0x0e	; 14
    2be8:	6d 90       	ld	r6, X+
    2bea:	7d 90       	ld	r7, X+
    2bec:	8d 90       	ld	r8, X+
    2bee:	9c 90       	ld	r9, X
    2bf0:	51 97       	sbiw	r26, 0x11	; 17
    2bf2:	6c 86       	std	Y+12, r6	; 0x0c
    2bf4:	7d 86       	std	Y+13, r7	; 0x0d
    2bf6:	8e 86       	std	Y+14, r8	; 0x0e
    2bf8:	9f 86       	std	Y+15, r9	; 0x0f
    2bfa:	ad 90       	ld	r10, X+
    2bfc:	bc 90       	ld	r11, X
    2bfe:	f5 01       	movw	r30, r10
    2c00:	c6 a4       	ldd	r12, Z+46	; 0x2e
    2c02:	d7 a4       	ldd	r13, Z+47	; 0x2f
    2c04:	e0 a8       	ldd	r14, Z+48	; 0x30
    2c06:	f1 a8       	ldd	r15, Z+49	; 0x31
    2c08:	6c 14       	cp	r6, r12
    2c0a:	7d 04       	cpc	r7, r13
    2c0c:	8e 04       	cpc	r8, r14
    2c0e:	9f 04       	cpc	r9, r15
    2c10:	59 f1       	breq	.+86     	; 0x2c68 <dir_register+0xea>
    2c12:	84 81       	ldd	r24, Z+4	; 0x04
    2c14:	15 01       	movw	r2, r10
    2c16:	81 11       	cpse	r24, r1
    2c18:	5d c0       	rjmp	.+186    	; 0x2cd4 <dir_register+0x156>
    2c1a:	b2 e3       	ldi	r27, 0x32	; 50
    2c1c:	2b 0e       	add	r2, r27
    2c1e:	31 1c       	adc	r3, r1
    2c20:	01 e0       	ldi	r16, 0x01	; 1
    2c22:	10 e0       	ldi	r17, 0x00	; 0
    2c24:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c26:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c28:	4e 85       	ldd	r20, Y+14	; 0x0e
    2c2a:	5f 85       	ldd	r21, Y+15	; 0x0f
    2c2c:	b1 01       	movw	r22, r2
    2c2e:	f5 01       	movw	r30, r10
    2c30:	81 81       	ldd	r24, Z+1	; 0x01
    2c32:	99 83       	std	Y+1, r25	; 0x01
    2c34:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    2c38:	99 81       	ldd	r25, Y+1	; 0x01
    2c3a:	88 23       	and	r24, r24
    2c3c:	51 f0       	breq	.+20     	; 0x2c52 <dir_register+0xd4>
    2c3e:	8f ef       	ldi	r24, 0xFF	; 255
    2c40:	9f ef       	ldi	r25, 0xFF	; 255
    2c42:	dc 01       	movw	r26, r24
    2c44:	f5 01       	movw	r30, r10
    2c46:	86 a7       	std	Z+46, r24	; 0x2e
    2c48:	97 a7       	std	Z+47, r25	; 0x2f
    2c4a:	a0 ab       	std	Z+48, r26	; 0x30
    2c4c:	b1 ab       	std	Z+49, r27	; 0x31
    2c4e:	91 e0       	ldi	r25, 0x01	; 1
    2c50:	b2 cf       	rjmp	.-156    	; 0x2bb6 <dir_register+0x38>
    2c52:	6c 84       	ldd	r6, Y+12	; 0x0c
    2c54:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c56:	8e 84       	ldd	r8, Y+14	; 0x0e
    2c58:	9f 84       	ldd	r9, Y+15	; 0x0f
    2c5a:	d5 01       	movw	r26, r10
    2c5c:	9e 96       	adiw	r26, 0x2e	; 46
    2c5e:	6d 92       	st	X+, r6
    2c60:	7d 92       	st	X+, r7
    2c62:	8d 92       	st	X+, r8
    2c64:	9c 92       	st	X, r9
    2c66:	d1 97       	sbiw	r26, 0x31	; 49
    2c68:	d2 01       	movw	r26, r4
    2c6a:	52 96       	adiw	r26, 0x12	; 18
    2c6c:	ed 91       	ld	r30, X+
    2c6e:	fc 91       	ld	r31, X
    2c70:	53 97       	sbiw	r26, 0x13	; 19
    2c72:	80 e2       	ldi	r24, 0x20	; 32
    2c74:	df 01       	movw	r26, r30
    2c76:	1d 92       	st	X+, r1
    2c78:	8a 95       	dec	r24
    2c7a:	e9 f7       	brne	.-6      	; 0x2c76 <dir_register+0xf8>
    2c7c:	f2 01       	movw	r30, r4
    2c7e:	a4 89       	ldd	r26, Z+20	; 0x14
    2c80:	b5 89       	ldd	r27, Z+21	; 0x15
    2c82:	42 89       	ldd	r20, Z+18	; 0x12
    2c84:	53 89       	ldd	r21, Z+19	; 0x13
    2c86:	2d 91       	ld	r18, X+
    2c88:	3c 91       	ld	r19, X
    2c8a:	11 97       	sbiw	r26, 0x01	; 1
    2c8c:	fa 01       	movw	r30, r20
    2c8e:	20 83       	st	Z, r18
    2c90:	31 83       	std	Z+1, r19	; 0x01
    2c92:	12 96       	adiw	r26, 0x02	; 2
    2c94:	2d 91       	ld	r18, X+
    2c96:	3c 91       	ld	r19, X
    2c98:	13 97       	sbiw	r26, 0x03	; 3
    2c9a:	22 83       	std	Z+2, r18	; 0x02
    2c9c:	33 83       	std	Z+3, r19	; 0x03
    2c9e:	14 96       	adiw	r26, 0x04	; 4
    2ca0:	2d 91       	ld	r18, X+
    2ca2:	3c 91       	ld	r19, X
    2ca4:	15 97       	sbiw	r26, 0x05	; 5
    2ca6:	24 83       	std	Z+4, r18	; 0x04
    2ca8:	35 83       	std	Z+5, r19	; 0x05
    2caa:	16 96       	adiw	r26, 0x06	; 6
    2cac:	2d 91       	ld	r18, X+
    2cae:	3c 91       	ld	r19, X
    2cb0:	17 97       	sbiw	r26, 0x07	; 7
    2cb2:	26 83       	std	Z+6, r18	; 0x06
    2cb4:	37 83       	std	Z+7, r19	; 0x07
    2cb6:	18 96       	adiw	r26, 0x08	; 8
    2cb8:	2d 91       	ld	r18, X+
    2cba:	3c 91       	ld	r19, X
    2cbc:	19 97       	sbiw	r26, 0x09	; 9
    2cbe:	20 87       	std	Z+8, r18	; 0x08
    2cc0:	31 87       	std	Z+9, r19	; 0x09
    2cc2:	1a 96       	adiw	r26, 0x0a	; 10
    2cc4:	8c 91       	ld	r24, X
    2cc6:	82 87       	std	Z+10, r24	; 0x0a
    2cc8:	d2 01       	movw	r26, r4
    2cca:	ed 91       	ld	r30, X+
    2ccc:	fc 91       	ld	r31, X
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	84 83       	std	Z+4, r24	; 0x04
    2cd2:	71 cf       	rjmp	.-286    	; 0x2bb6 <dir_register+0x38>
    2cd4:	f2 e3       	ldi	r31, 0x32	; 50
    2cd6:	2f 0e       	add	r2, r31
    2cd8:	31 1c       	adc	r3, r1
    2cda:	01 e0       	ldi	r16, 0x01	; 1
    2cdc:	10 e0       	ldi	r17, 0x00	; 0
    2cde:	a7 01       	movw	r20, r14
    2ce0:	96 01       	movw	r18, r12
    2ce2:	b1 01       	movw	r22, r2
    2ce4:	d5 01       	movw	r26, r10
    2ce6:	11 96       	adiw	r26, 0x01	; 1
    2ce8:	8c 91       	ld	r24, X
    2cea:	99 83       	std	Y+1, r25	; 0x01
    2cec:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    2cf0:	99 81       	ldd	r25, Y+1	; 0x01
    2cf2:	81 11       	cpse	r24, r1
    2cf4:	ac cf       	rjmp	.-168    	; 0x2c4e <dir_register+0xd0>
    2cf6:	f5 01       	movw	r30, r10
    2cf8:	14 82       	std	Z+4, r1	; 0x04
    2cfa:	62 8c       	ldd	r6, Z+26	; 0x1a
    2cfc:	73 8c       	ldd	r7, Z+27	; 0x1b
    2cfe:	84 8c       	ldd	r8, Z+28	; 0x1c
    2d00:	95 8c       	ldd	r9, Z+29	; 0x1d
    2d02:	68 86       	std	Y+8, r6	; 0x08
    2d04:	79 86       	std	Y+9, r7	; 0x09
    2d06:	8a 86       	std	Y+10, r8	; 0x0a
    2d08:	9b 86       	std	Y+11, r9	; 0x0b
    2d0a:	62 a0       	ldd	r6, Z+34	; 0x22
    2d0c:	73 a0       	ldd	r7, Z+35	; 0x23
    2d0e:	84 a0       	ldd	r8, Z+36	; 0x24
    2d10:	95 a0       	ldd	r9, Z+37	; 0x25
    2d12:	97 01       	movw	r18, r14
    2d14:	86 01       	movw	r16, r12
    2d16:	06 19       	sub	r16, r6
    2d18:	17 09       	sbc	r17, r7
    2d1a:	28 09       	sbc	r18, r8
    2d1c:	39 09       	sbc	r19, r9
    2d1e:	48 85       	ldd	r20, Y+8	; 0x08
    2d20:	59 85       	ldd	r21, Y+9	; 0x09
    2d22:	6a 85       	ldd	r22, Y+10	; 0x0a
    2d24:	7b 85       	ldd	r23, Y+11	; 0x0b
    2d26:	04 17       	cp	r16, r20
    2d28:	15 07       	cpc	r17, r21
    2d2a:	26 07       	cpc	r18, r22
    2d2c:	37 07       	cpc	r19, r23
    2d2e:	08 f0       	brcs	.+2      	; 0x2d32 <dir_register+0x1b4>
    2d30:	77 cf       	rjmp	.-274    	; 0x2c20 <dir_register+0xa2>
    2d32:	83 80       	ldd	r8, Z+3	; 0x03
    2d34:	91 2c       	mov	r9, r1
    2d36:	52 e0       	ldi	r21, 0x02	; 2
    2d38:	85 16       	cp	r8, r21
    2d3a:	91 04       	cpc	r9, r1
    2d3c:	08 f4       	brcc	.+2      	; 0x2d40 <dir_register+0x1c2>
    2d3e:	70 cf       	rjmp	.-288    	; 0x2c20 <dir_register+0xa2>
    2d40:	48 85       	ldd	r20, Y+8	; 0x08
    2d42:	59 85       	ldd	r21, Y+9	; 0x09
    2d44:	6a 85       	ldd	r22, Y+10	; 0x0a
    2d46:	7b 85       	ldd	r23, Y+11	; 0x0b
    2d48:	07 c0       	rjmp	.+14     	; 0x2d58 <dir_register+0x1da>
    2d4a:	d5 01       	movw	r26, r10
    2d4c:	5a 96       	adiw	r26, 0x1a	; 26
    2d4e:	4d 91       	ld	r20, X+
    2d50:	5d 91       	ld	r21, X+
    2d52:	6d 91       	ld	r22, X+
    2d54:	7c 91       	ld	r23, X
    2d56:	5d 97       	sbiw	r26, 0x1d	; 29
    2d58:	c4 0e       	add	r12, r20
    2d5a:	d5 1e       	adc	r13, r21
    2d5c:	e6 1e       	adc	r14, r22
    2d5e:	f7 1e       	adc	r15, r23
    2d60:	01 e0       	ldi	r16, 0x01	; 1
    2d62:	10 e0       	ldi	r17, 0x00	; 0
    2d64:	a7 01       	movw	r20, r14
    2d66:	96 01       	movw	r18, r12
    2d68:	b1 01       	movw	r22, r2
    2d6a:	d5 01       	movw	r26, r10
    2d6c:	11 96       	adiw	r26, 0x01	; 1
    2d6e:	8c 91       	ld	r24, X
    2d70:	99 83       	std	Y+1, r25	; 0x01
    2d72:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    2d76:	b1 e0       	ldi	r27, 0x01	; 1
    2d78:	8b 1a       	sub	r8, r27
    2d7a:	91 08       	sbc	r9, r1
    2d7c:	99 81       	ldd	r25, Y+1	; 0x01
    2d7e:	e1 e0       	ldi	r30, 0x01	; 1
    2d80:	8e 16       	cp	r8, r30
    2d82:	91 04       	cpc	r9, r1
    2d84:	11 f7       	brne	.-60     	; 0x2d4a <dir_register+0x1cc>
    2d86:	4c cf       	rjmp	.-360    	; 0x2c20 <dir_register+0xa2>

00002d88 <follow_path>:
    2d88:	2f 92       	push	r2
    2d8a:	3f 92       	push	r3
    2d8c:	4f 92       	push	r4
    2d8e:	5f 92       	push	r5
    2d90:	6f 92       	push	r6
    2d92:	7f 92       	push	r7
    2d94:	8f 92       	push	r8
    2d96:	9f 92       	push	r9
    2d98:	af 92       	push	r10
    2d9a:	bf 92       	push	r11
    2d9c:	cf 92       	push	r12
    2d9e:	df 92       	push	r13
    2da0:	ef 92       	push	r14
    2da2:	ff 92       	push	r15
    2da4:	0f 93       	push	r16
    2da6:	1f 93       	push	r17
    2da8:	cf 93       	push	r28
    2daa:	df 93       	push	r29
    2dac:	00 d0       	rcall	.+0      	; 0x2dae <follow_path+0x26>
    2dae:	00 d0       	rcall	.+0      	; 0x2db0 <follow_path+0x28>
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	5c 01       	movw	r10, r24
    2db6:	69 83       	std	Y+1, r22	; 0x01
    2db8:	7a 83       	std	Y+2, r23	; 0x02
    2dba:	db 01       	movw	r26, r22
    2dbc:	8c 91       	ld	r24, X
    2dbe:	8f 32       	cpi	r24, 0x2F	; 47
    2dc0:	09 f4       	brne	.+2      	; 0x2dc4 <follow_path+0x3c>
    2dc2:	75 c2       	rjmp	.+1258   	; 0x32ae <__stack+0x2af>
    2dc4:	8c 35       	cpi	r24, 0x5C	; 92
    2dc6:	09 f4       	brne	.+2      	; 0x2dca <follow_path+0x42>
    2dc8:	72 c2       	rjmp	.+1252   	; 0x32ae <__stack+0x2af>
    2dca:	d5 01       	movw	r26, r10
    2dcc:	ed 91       	ld	r30, X+
    2dce:	fc 91       	ld	r31, X
    2dd0:	82 89       	ldd	r24, Z+18	; 0x12
    2dd2:	93 89       	ldd	r25, Z+19	; 0x13
    2dd4:	a4 89       	ldd	r26, Z+20	; 0x14
    2dd6:	b5 89       	ldd	r27, Z+21	; 0x15
    2dd8:	f5 01       	movw	r30, r10
    2dda:	86 83       	std	Z+6, r24	; 0x06
    2ddc:	97 83       	std	Z+7, r25	; 0x07
    2dde:	a0 87       	std	Z+8, r26	; 0x08
    2de0:	b1 87       	std	Z+9, r27	; 0x09
    2de2:	a9 81       	ldd	r26, Y+1	; 0x01
    2de4:	ba 81       	ldd	r27, Y+2	; 0x02
    2de6:	8c 91       	ld	r24, X
    2de8:	80 32       	cpi	r24, 0x20	; 32
    2dea:	08 f4       	brcc	.+2      	; 0x2dee <follow_path+0x66>
    2dec:	71 c2       	rjmp	.+1250   	; 0x32d0 <__stack+0x2d1>
    2dee:	f5 01       	movw	r30, r10
    2df0:	c4 88       	ldd	r12, Z+20	; 0x14
    2df2:	d5 88       	ldd	r13, Z+21	; 0x15
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	9a 81       	ldd	r25, Y+2	; 0x02
    2df8:	dc 01       	movw	r26, r24
    2dfa:	2c 91       	ld	r18, X
    2dfc:	01 96       	adiw	r24, 0x01	; 1
    2dfe:	2f 32       	cpi	r18, 0x2F	; 47
    2e00:	d9 f3       	breq	.-10     	; 0x2df8 <follow_path+0x70>
    2e02:	2c 35       	cpi	r18, 0x5C	; 92
    2e04:	c9 f3       	breq	.-14     	; 0x2df8 <follow_path+0x70>
    2e06:	00 e2       	ldi	r16, 0x20	; 32
    2e08:	f6 01       	movw	r30, r12
    2e0a:	00 83       	st	Z, r16
    2e0c:	01 83       	std	Z+1, r16	; 0x01
    2e0e:	02 83       	std	Z+2, r16	; 0x02
    2e10:	03 83       	std	Z+3, r16	; 0x03
    2e12:	04 83       	std	Z+4, r16	; 0x04
    2e14:	05 83       	std	Z+5, r16	; 0x05
    2e16:	06 83       	std	Z+6, r16	; 0x06
    2e18:	07 83       	std	Z+7, r16	; 0x07
    2e1a:	00 87       	std	Z+8, r16	; 0x08
    2e1c:	01 87       	std	Z+9, r16	; 0x09
    2e1e:	02 87       	std	Z+10, r16	; 0x0a
    2e20:	8c 91       	ld	r24, X
    2e22:	8e 32       	cpi	r24, 0x2E	; 46
    2e24:	09 f4       	brne	.+2      	; 0x2e28 <follow_path+0xa0>
    2e26:	4c c0       	rjmp	.+152    	; 0x2ec0 <follow_path+0x138>
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	48 e0       	ldi	r20, 0x08	; 8
    2e32:	50 e0       	ldi	r21, 0x00	; 0
    2e34:	10 e0       	ldi	r17, 0x00	; 0
    2e36:	bc 01       	movw	r22, r24
    2e38:	6f 5f       	subi	r22, 0xFF	; 255
    2e3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3c:	fd 01       	movw	r30, r26
    2e3e:	e8 0f       	add	r30, r24
    2e40:	f9 1f       	adc	r31, r25
    2e42:	00 81       	ld	r16, Z
    2e44:	01 32       	cpi	r16, 0x21	; 33
    2e46:	08 f4       	brcc	.+2      	; 0x2e4a <follow_path+0xc2>
    2e48:	dc c2       	rjmp	.+1464   	; 0x3402 <__stack+0x403>
    2e4a:	0f 32       	cpi	r16, 0x2F	; 47
    2e4c:	09 f4       	brne	.+2      	; 0x2e50 <follow_path+0xc8>
    2e4e:	ba c2       	rjmp	.+1396   	; 0x33c4 <__stack+0x3c5>
    2e50:	0c 35       	cpi	r16, 0x5C	; 92
    2e52:	09 f4       	brne	.+2      	; 0x2e56 <follow_path+0xce>
    2e54:	b7 c2       	rjmp	.+1390   	; 0x33c4 <__stack+0x3c5>
    2e56:	0e 32       	cpi	r16, 0x2E	; 46
    2e58:	09 f4       	brne	.+2      	; 0x2e5c <follow_path+0xd4>
    2e5a:	e9 c2       	rjmp	.+1490   	; 0x342e <__stack+0x42f>
    2e5c:	24 17       	cp	r18, r20
    2e5e:	35 07       	cpc	r19, r21
    2e60:	08 f0       	brcs	.+2      	; 0x2e64 <follow_path+0xdc>
    2e62:	43 c0       	rjmp	.+134    	; 0x2eea <follow_path+0x162>
    2e64:	07 fd       	sbrc	r16, 7
    2e66:	4e c2       	rjmp	.+1180   	; 0x3304 <__stack+0x305>
    2e68:	ef e7       	ldi	r30, 0x7F	; 127
    2e6a:	e0 0f       	add	r30, r16
    2e6c:	ef 31       	cpi	r30, 0x1F	; 31
    2e6e:	28 f0       	brcs	.+10     	; 0x2e7a <follow_path+0xf2>
    2e70:	e0 e2       	ldi	r30, 0x20	; 32
    2e72:	e0 0f       	add	r30, r16
    2e74:	ed 31       	cpi	r30, 0x1D	; 29
    2e76:	08 f0       	brcs	.+2      	; 0x2e7a <follow_path+0xf2>
    2e78:	4f c0       	rjmp	.+158    	; 0x2f18 <follow_path+0x190>
    2e7a:	02 96       	adiw	r24, 0x02	; 2
    2e7c:	6a 0f       	add	r22, r26
    2e7e:	7b 1f       	adc	r23, r27
    2e80:	fb 01       	movw	r30, r22
    2e82:	f0 80       	ld	r15, Z
    2e84:	60 ec       	ldi	r22, 0xC0	; 192
    2e86:	6f 0d       	add	r22, r15
    2e88:	6f 33       	cpi	r22, 0x3F	; 63
    2e8a:	20 f0       	brcs	.+8      	; 0x2e94 <follow_path+0x10c>
    2e8c:	60 e8       	ldi	r22, 0x80	; 128
    2e8e:	6f 0d       	add	r22, r15
    2e90:	6d 37       	cpi	r22, 0x7D	; 125
    2e92:	58 f5       	brcc	.+86     	; 0x2eea <follow_path+0x162>
    2e94:	ba 01       	movw	r22, r20
    2e96:	61 50       	subi	r22, 0x01	; 1
    2e98:	71 09       	sbc	r23, r1
    2e9a:	26 17       	cp	r18, r22
    2e9c:	37 07       	cpc	r19, r23
    2e9e:	28 f5       	brcc	.+74     	; 0x2eea <follow_path+0x162>
    2ea0:	49 01       	movw	r8, r18
    2ea2:	ff ef       	ldi	r31, 0xFF	; 255
    2ea4:	8f 1a       	sub	r8, r31
    2ea6:	9f 0a       	sbc	r9, r31
    2ea8:	b6 01       	movw	r22, r12
    2eaa:	62 0f       	add	r22, r18
    2eac:	73 1f       	adc	r23, r19
    2eae:	fb 01       	movw	r30, r22
    2eb0:	00 83       	st	Z, r16
    2eb2:	2e 5f       	subi	r18, 0xFE	; 254
    2eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb6:	8c 0c       	add	r8, r12
    2eb8:	9d 1c       	adc	r9, r13
    2eba:	f4 01       	movw	r30, r8
    2ebc:	f0 82       	st	Z, r15
    2ebe:	bb cf       	rjmp	.-138    	; 0x2e36 <follow_path+0xae>
    2ec0:	f6 01       	movw	r30, r12
    2ec2:	80 83       	st	Z, r24
    2ec4:	11 96       	adiw	r26, 0x01	; 1
    2ec6:	2c 91       	ld	r18, X
    2ec8:	11 97       	sbiw	r26, 0x01	; 1
    2eca:	2e 32       	cpi	r18, 0x2E	; 46
    2ecc:	09 f0       	breq	.+2      	; 0x2ed0 <follow_path+0x148>
    2ece:	a2 c2       	rjmp	.+1348   	; 0x3414 <__stack+0x415>
    2ed0:	21 83       	std	Z+1, r18	; 0x01
    2ed2:	12 96       	adiw	r26, 0x02	; 2
    2ed4:	2c 91       	ld	r18, X
    2ed6:	12 97       	sbiw	r26, 0x02	; 2
    2ed8:	83 e0       	ldi	r24, 0x03	; 3
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	2f 32       	cpi	r18, 0x2F	; 47
    2ede:	d1 f1       	breq	.+116    	; 0x2f54 <follow_path+0x1cc>
    2ee0:	2c 35       	cpi	r18, 0x5C	; 92
    2ee2:	c1 f1       	breq	.+112    	; 0x2f54 <follow_path+0x1cc>
    2ee4:	21 32       	cpi	r18, 0x21	; 33
    2ee6:	08 f4       	brcc	.+2      	; 0x2eea <follow_path+0x162>
    2ee8:	0f c2       	rjmp	.+1054   	; 0x3308 <__stack+0x309>
    2eea:	86 e0       	ldi	r24, 0x06	; 6
    2eec:	24 96       	adiw	r28, 0x04	; 4
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	0f 91       	pop	r16
    2efa:	ff 90       	pop	r15
    2efc:	ef 90       	pop	r14
    2efe:	df 90       	pop	r13
    2f00:	cf 90       	pop	r12
    2f02:	bf 90       	pop	r11
    2f04:	af 90       	pop	r10
    2f06:	9f 90       	pop	r9
    2f08:	8f 90       	pop	r8
    2f0a:	7f 90       	pop	r7
    2f0c:	6f 90       	pop	r6
    2f0e:	5f 90       	pop	r5
    2f10:	4f 90       	pop	r4
    2f12:	3f 90       	pop	r3
    2f14:	2f 90       	pop	r2
    2f16:	08 95       	ret
    2f18:	e0 2e       	mov	r14, r16
    2f1a:	f1 2c       	mov	r15, r1
    2f1c:	f2 e2       	ldi	r31, 0x22	; 34
    2f1e:	ef 16       	cp	r14, r31
    2f20:	f1 04       	cpc	r15, r1
    2f22:	19 f3       	breq	.-58     	; 0x2eea <follow_path+0x162>
    2f24:	e7 ef       	ldi	r30, 0xF7	; 247
    2f26:	f0 e2       	ldi	r31, 0x20	; 32
    2f28:	04 c0       	rjmp	.+8      	; 0x2f32 <follow_path+0x1aa>
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	e8 16       	cp	r14, r24
    2f2e:	f9 06       	cpc	r15, r25
    2f30:	e1 f2       	breq	.-72     	; 0x2eea <follow_path+0x162>
    2f32:	81 91       	ld	r24, Z+
    2f34:	81 11       	cpse	r24, r1
    2f36:	f9 cf       	rjmp	.-14     	; 0x2f2a <follow_path+0x1a2>
    2f38:	8f eb       	ldi	r24, 0xBF	; 191
    2f3a:	80 0f       	add	r24, r16
    2f3c:	8a 31       	cpi	r24, 0x1A	; 26
    2f3e:	08 f0       	brcs	.+2      	; 0x2f42 <follow_path+0x1ba>
    2f40:	39 c2       	rjmp	.+1138   	; 0x33b4 <__stack+0x3b5>
    2f42:	12 60       	ori	r17, 0x02	; 2
    2f44:	f6 01       	movw	r30, r12
    2f46:	e2 0f       	add	r30, r18
    2f48:	f3 1f       	adc	r31, r19
    2f4a:	00 83       	st	Z, r16
    2f4c:	2f 5f       	subi	r18, 0xFF	; 255
    2f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f50:	cb 01       	movw	r24, r22
    2f52:	71 cf       	rjmp	.-286    	; 0x2e36 <follow_path+0xae>
    2f54:	fd 01       	movw	r30, r26
    2f56:	e8 0f       	add	r30, r24
    2f58:	f9 1f       	adc	r31, r25
    2f5a:	e9 83       	std	Y+1, r30	; 0x01
    2f5c:	fa 83       	std	Y+2, r31	; 0x02
    2f5e:	80 e2       	ldi	r24, 0x20	; 32
    2f60:	d6 01       	movw	r26, r12
    2f62:	1b 96       	adiw	r26, 0x0b	; 11
    2f64:	8c 93       	st	X, r24
    2f66:	60 e0       	ldi	r22, 0x00	; 0
    2f68:	70 e0       	ldi	r23, 0x00	; 0
    2f6a:	c5 01       	movw	r24, r10
    2f6c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <dir_sdi>
    2f70:	81 11       	cpse	r24, r1
    2f72:	b8 c0       	rjmp	.+368    	; 0x30e4 <__stack+0xe5>
    2f74:	f5 01       	movw	r30, r10
    2f76:	01 90       	ld	r0, Z+
    2f78:	f0 81       	ld	r31, Z
    2f7a:	e0 2d       	mov	r30, r0
    2f7c:	eb 83       	std	Y+3, r30	; 0x03
    2f7e:	fc 83       	std	Y+4, r31	; 0x04
    2f80:	d5 01       	movw	r26, r10
    2f82:	1e 96       	adiw	r26, 0x0e	; 14
    2f84:	4d 90       	ld	r4, X+
    2f86:	5d 90       	ld	r5, X+
    2f88:	6d 90       	ld	r6, X+
    2f8a:	7c 90       	ld	r7, X
    2f8c:	51 97       	sbiw	r26, 0x11	; 17
    2f8e:	c6 a4       	ldd	r12, Z+46	; 0x2e
    2f90:	d7 a4       	ldd	r13, Z+47	; 0x2f
    2f92:	e0 a8       	ldd	r14, Z+48	; 0x30
    2f94:	f1 a8       	ldd	r15, Z+49	; 0x31
    2f96:	c4 14       	cp	r12, r4
    2f98:	d5 04       	cpc	r13, r5
    2f9a:	e6 04       	cpc	r14, r6
    2f9c:	f7 04       	cpc	r15, r7
    2f9e:	41 f1       	breq	.+80     	; 0x2ff0 <follow_path+0x268>
    2fa0:	84 81       	ldd	r24, Z+4	; 0x04
    2fa2:	81 11       	cpse	r24, r1
    2fa4:	e9 c0       	rjmp	.+466    	; 0x3178 <__stack+0x179>
    2fa6:	2b 80       	ldd	r2, Y+3	; 0x03
    2fa8:	3c 80       	ldd	r3, Y+4	; 0x04
    2faa:	f2 e3       	ldi	r31, 0x32	; 50
    2fac:	2f 0e       	add	r2, r31
    2fae:	31 1c       	adc	r3, r1
    2fb0:	01 e0       	ldi	r16, 0x01	; 1
    2fb2:	10 e0       	ldi	r17, 0x00	; 0
    2fb4:	a3 01       	movw	r20, r6
    2fb6:	92 01       	movw	r18, r4
    2fb8:	b1 01       	movw	r22, r2
    2fba:	ab 81       	ldd	r26, Y+3	; 0x03
    2fbc:	bc 81       	ldd	r27, Y+4	; 0x04
    2fbe:	11 96       	adiw	r26, 0x01	; 1
    2fc0:	8c 91       	ld	r24, X
    2fc2:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    2fc6:	88 23       	and	r24, r24
    2fc8:	59 f0       	breq	.+22     	; 0x2fe0 <follow_path+0x258>
    2fca:	8f ef       	ldi	r24, 0xFF	; 255
    2fcc:	9f ef       	ldi	r25, 0xFF	; 255
    2fce:	dc 01       	movw	r26, r24
    2fd0:	eb 81       	ldd	r30, Y+3	; 0x03
    2fd2:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd4:	86 a7       	std	Z+46, r24	; 0x2e
    2fd6:	97 a7       	std	Z+47, r25	; 0x2f
    2fd8:	a0 ab       	std	Z+48, r26	; 0x30
    2fda:	b1 ab       	std	Z+49, r27	; 0x31
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	86 cf       	rjmp	.-244    	; 0x2eec <follow_path+0x164>
    2fe0:	ab 81       	ldd	r26, Y+3	; 0x03
    2fe2:	bc 81       	ldd	r27, Y+4	; 0x04
    2fe4:	9e 96       	adiw	r26, 0x2e	; 46
    2fe6:	4d 92       	st	X+, r4
    2fe8:	5d 92       	st	X+, r5
    2fea:	6d 92       	st	X+, r6
    2fec:	7c 92       	st	X, r7
    2fee:	d1 97       	sbiw	r26, 0x31	; 49
    2ff0:	f5 01       	movw	r30, r10
    2ff2:	62 89       	ldd	r22, Z+18	; 0x12
    2ff4:	73 89       	ldd	r23, Z+19	; 0x13
    2ff6:	db 01       	movw	r26, r22
    2ff8:	2c 91       	ld	r18, X
    2ffa:	22 23       	and	r18, r18
    2ffc:	09 f4       	brne	.+2      	; 0x3000 <__stack+0x1>
    2ffe:	52 c1       	rjmp	.+676    	; 0x32a4 <__stack+0x2a5>
    3000:	1b 96       	adiw	r26, 0x0b	; 11
    3002:	4c 91       	ld	r20, X
    3004:	1b 97       	sbiw	r26, 0x0b	; 11
    3006:	43 fd       	sbrc	r20, 3
    3008:	63 c0       	rjmp	.+198    	; 0x30d0 <__stack+0xd1>
    300a:	04 88       	ldd	r0, Z+20	; 0x14
    300c:	f5 89       	ldd	r31, Z+21	; 0x15
    300e:	e0 2d       	mov	r30, r0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	28 17       	cp	r18, r24
    3018:	39 07       	cpc	r19, r25
    301a:	09 f0       	breq	.+2      	; 0x301e <__stack+0x1f>
    301c:	59 c0       	rjmp	.+178    	; 0x30d0 <__stack+0xd1>
    301e:	11 96       	adiw	r26, 0x01	; 1
    3020:	9c 91       	ld	r25, X
    3022:	11 97       	sbiw	r26, 0x01	; 1
    3024:	81 81       	ldd	r24, Z+1	; 0x01
    3026:	98 13       	cpse	r25, r24
    3028:	53 c0       	rjmp	.+166    	; 0x30d0 <__stack+0xd1>
    302a:	12 96       	adiw	r26, 0x02	; 2
    302c:	9c 91       	ld	r25, X
    302e:	12 97       	sbiw	r26, 0x02	; 2
    3030:	82 81       	ldd	r24, Z+2	; 0x02
    3032:	98 13       	cpse	r25, r24
    3034:	4d c0       	rjmp	.+154    	; 0x30d0 <__stack+0xd1>
    3036:	13 96       	adiw	r26, 0x03	; 3
    3038:	9c 91       	ld	r25, X
    303a:	13 97       	sbiw	r26, 0x03	; 3
    303c:	83 81       	ldd	r24, Z+3	; 0x03
    303e:	98 13       	cpse	r25, r24
    3040:	47 c0       	rjmp	.+142    	; 0x30d0 <__stack+0xd1>
    3042:	14 96       	adiw	r26, 0x04	; 4
    3044:	9c 91       	ld	r25, X
    3046:	14 97       	sbiw	r26, 0x04	; 4
    3048:	84 81       	ldd	r24, Z+4	; 0x04
    304a:	98 13       	cpse	r25, r24
    304c:	41 c0       	rjmp	.+130    	; 0x30d0 <__stack+0xd1>
    304e:	15 96       	adiw	r26, 0x05	; 5
    3050:	9c 91       	ld	r25, X
    3052:	15 97       	sbiw	r26, 0x05	; 5
    3054:	85 81       	ldd	r24, Z+5	; 0x05
    3056:	98 13       	cpse	r25, r24
    3058:	3b c0       	rjmp	.+118    	; 0x30d0 <__stack+0xd1>
    305a:	16 96       	adiw	r26, 0x06	; 6
    305c:	9c 91       	ld	r25, X
    305e:	16 97       	sbiw	r26, 0x06	; 6
    3060:	86 81       	ldd	r24, Z+6	; 0x06
    3062:	98 13       	cpse	r25, r24
    3064:	35 c0       	rjmp	.+106    	; 0x30d0 <__stack+0xd1>
    3066:	17 96       	adiw	r26, 0x07	; 7
    3068:	9c 91       	ld	r25, X
    306a:	17 97       	sbiw	r26, 0x07	; 7
    306c:	87 81       	ldd	r24, Z+7	; 0x07
    306e:	98 13       	cpse	r25, r24
    3070:	2f c0       	rjmp	.+94     	; 0x30d0 <__stack+0xd1>
    3072:	18 96       	adiw	r26, 0x08	; 8
    3074:	9c 91       	ld	r25, X
    3076:	18 97       	sbiw	r26, 0x08	; 8
    3078:	80 85       	ldd	r24, Z+8	; 0x08
    307a:	98 13       	cpse	r25, r24
    307c:	29 c0       	rjmp	.+82     	; 0x30d0 <__stack+0xd1>
    307e:	19 96       	adiw	r26, 0x09	; 9
    3080:	9c 91       	ld	r25, X
    3082:	19 97       	sbiw	r26, 0x09	; 9
    3084:	81 85       	ldd	r24, Z+9	; 0x09
    3086:	98 13       	cpse	r25, r24
    3088:	23 c0       	rjmp	.+70     	; 0x30d0 <__stack+0xd1>
    308a:	1a 96       	adiw	r26, 0x0a	; 10
    308c:	9c 91       	ld	r25, X
    308e:	82 85       	ldd	r24, Z+10	; 0x0a
    3090:	98 13       	cpse	r25, r24
    3092:	1e c0       	rjmp	.+60     	; 0x30d0 <__stack+0xd1>
    3094:	83 85       	ldd	r24, Z+11	; 0x0b
    3096:	82 fd       	sbrc	r24, 2
    3098:	39 c0       	rjmp	.+114    	; 0x310c <__stack+0x10d>
    309a:	44 ff       	sbrs	r20, 4
    309c:	b9 c1       	rjmp	.+882    	; 0x3410 <__stack+0x411>
    309e:	db 01       	movw	r26, r22
    30a0:	5a 96       	adiw	r26, 0x1a	; 26
    30a2:	8d 91       	ld	r24, X+
    30a4:	9c 91       	ld	r25, X
    30a6:	5b 97       	sbiw	r26, 0x1b	; 27
    30a8:	6c 01       	movw	r12, r24
    30aa:	e1 2c       	mov	r14, r1
    30ac:	f1 2c       	mov	r15, r1
    30ae:	d5 01       	movw	r26, r10
    30b0:	2d 91       	ld	r18, X+
    30b2:	3c 91       	ld	r19, X
    30b4:	d9 01       	movw	r26, r18
    30b6:	2c 91       	ld	r18, X
    30b8:	23 30       	cpi	r18, 0x03	; 3
    30ba:	09 f4       	brne	.+2      	; 0x30be <__stack+0xbf>
    30bc:	14 c1       	rjmp	.+552    	; 0x32e6 <__stack+0x2e7>
    30be:	d5 01       	movw	r26, r10
    30c0:	16 96       	adiw	r26, 0x06	; 6
    30c2:	cd 92       	st	X+, r12
    30c4:	dd 92       	st	X+, r13
    30c6:	ed 92       	st	X+, r14
    30c8:	fc 92       	st	X, r15
    30ca:	19 97       	sbiw	r26, 0x09	; 9
    30cc:	6f 01       	movw	r12, r30
    30ce:	92 ce       	rjmp	.-732    	; 0x2df4 <follow_path+0x6c>
    30d0:	f5 01       	movw	r30, r10
    30d2:	e4 80       	ldd	r14, Z+4	; 0x04
    30d4:	f5 80       	ldd	r15, Z+5	; 0x05
    30d6:	ff ef       	ldi	r31, 0xFF	; 255
    30d8:	ef 1a       	sub	r14, r31
    30da:	ff 0a       	sbc	r15, r31
    30dc:	e1 14       	cp	r14, r1
    30de:	f1 04       	cpc	r15, r1
    30e0:	b9 f4       	brne	.+46     	; 0x3110 <__stack+0x111>
    30e2:	84 e0       	ldi	r24, 0x04	; 4
    30e4:	d5 01       	movw	r26, r10
    30e6:	54 96       	adiw	r26, 0x14	; 20
    30e8:	ed 91       	ld	r30, X+
    30ea:	fc 91       	ld	r31, X
    30ec:	55 97       	sbiw	r26, 0x15	; 21
    30ee:	93 85       	ldd	r25, Z+11	; 0x0b
    30f0:	84 30       	cpi	r24, 0x04	; 4
    30f2:	09 f0       	breq	.+2      	; 0x30f6 <__stack+0xf7>
    30f4:	fb ce       	rjmp	.-522    	; 0x2eec <follow_path+0x164>
    30f6:	95 ff       	sbrs	r25, 5
    30f8:	96 c1       	rjmp	.+812    	; 0x3426 <__stack+0x427>
    30fa:	f5 01       	movw	r30, r10
    30fc:	16 82       	std	Z+6, r1	; 0x06
    30fe:	17 82       	std	Z+7, r1	; 0x07
    3100:	10 86       	std	Z+8, r1	; 0x08
    3102:	11 86       	std	Z+9, r1	; 0x09
    3104:	12 8a       	std	Z+18, r1	; 0x12
    3106:	13 8a       	std	Z+19, r1	; 0x13
    3108:	92 ff       	sbrs	r25, 2
    310a:	71 ce       	rjmp	.-798    	; 0x2dee <follow_path+0x66>
    310c:	80 e0       	ldi	r24, 0x00	; 0
    310e:	ee ce       	rjmp	.-548    	; 0x2eec <follow_path+0x164>
    3110:	d5 01       	movw	r26, r10
    3112:	1e 96       	adiw	r26, 0x0e	; 14
    3114:	4d 90       	ld	r4, X+
    3116:	5d 90       	ld	r5, X+
    3118:	6d 90       	ld	r6, X+
    311a:	7c 90       	ld	r7, X
    311c:	51 97       	sbiw	r26, 0x11	; 17
    311e:	41 14       	cp	r4, r1
    3120:	51 04       	cpc	r5, r1
    3122:	61 04       	cpc	r6, r1
    3124:	71 04       	cpc	r7, r1
    3126:	e9 f2       	breq	.-70     	; 0x30e2 <__stack+0xe3>
    3128:	67 01       	movw	r12, r14
    312a:	bf e0       	ldi	r27, 0x0F	; 15
    312c:	cb 22       	and	r12, r27
    312e:	dd 24       	eor	r13, r13
    3130:	c1 14       	cp	r12, r1
    3132:	d1 04       	cpc	r13, r1
    3134:	09 f4       	brne	.+2      	; 0x3138 <__stack+0x139>
    3136:	6c c0       	rjmp	.+216    	; 0x3210 <__stack+0x211>
    3138:	f5 01       	movw	r30, r10
    313a:	01 90       	ld	r0, Z+
    313c:	f0 81       	ld	r31, Z
    313e:	e0 2d       	mov	r30, r0
    3140:	eb 83       	std	Y+3, r30	; 0x03
    3142:	fc 83       	std	Y+4, r31	; 0x04
    3144:	f5 01       	movw	r30, r10
    3146:	e4 82       	std	Z+4, r14	; 0x04
    3148:	f5 82       	std	Z+5, r15	; 0x05
    314a:	cc 0c       	add	r12, r12
    314c:	dd 1c       	adc	r13, r13
    314e:	c2 94       	swap	r12
    3150:	d2 94       	swap	r13
    3152:	80 ef       	ldi	r24, 0xF0	; 240
    3154:	d8 22       	and	r13, r24
    3156:	dc 24       	eor	r13, r12
    3158:	c8 22       	and	r12, r24
    315a:	dc 24       	eor	r13, r12
    315c:	f2 e3       	ldi	r31, 0x32	; 50
    315e:	cf 0e       	add	r12, r31
    3160:	d1 1c       	adc	r13, r1
    3162:	0b 81       	ldd	r16, Y+3	; 0x03
    3164:	1c 81       	ldd	r17, Y+4	; 0x04
    3166:	c0 0e       	add	r12, r16
    3168:	d1 1e       	adc	r13, r17
    316a:	d5 01       	movw	r26, r10
    316c:	52 96       	adiw	r26, 0x12	; 18
    316e:	cd 92       	st	X+, r12
    3170:	dc 92       	st	X, r13
    3172:	53 97       	sbiw	r26, 0x13	; 19
    3174:	f8 01       	movw	r30, r16
    3176:	0b cf       	rjmp	.-490    	; 0x2f8e <follow_path+0x206>
    3178:	1f 01       	movw	r2, r30
    317a:	f2 e3       	ldi	r31, 0x32	; 50
    317c:	2f 0e       	add	r2, r31
    317e:	31 1c       	adc	r3, r1
    3180:	01 e0       	ldi	r16, 0x01	; 1
    3182:	10 e0       	ldi	r17, 0x00	; 0
    3184:	a7 01       	movw	r20, r14
    3186:	96 01       	movw	r18, r12
    3188:	b1 01       	movw	r22, r2
    318a:	ab 81       	ldd	r26, Y+3	; 0x03
    318c:	bc 81       	ldd	r27, Y+4	; 0x04
    318e:	11 96       	adiw	r26, 0x01	; 1
    3190:	8c 91       	ld	r24, X
    3192:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    3196:	81 11       	cpse	r24, r1
    3198:	21 cf       	rjmp	.-446    	; 0x2fdc <follow_path+0x254>
    319a:	eb 81       	ldd	r30, Y+3	; 0x03
    319c:	fc 81       	ldd	r31, Y+4	; 0x04
    319e:	14 82       	std	Z+4, r1	; 0x04
    31a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    31a2:	93 8d       	ldd	r25, Z+27	; 0x1b
    31a4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    31a6:	b5 8d       	ldd	r27, Z+29	; 0x1d
    31a8:	42 a1       	ldd	r20, Z+34	; 0x22
    31aa:	53 a1       	ldd	r21, Z+35	; 0x23
    31ac:	64 a1       	ldd	r22, Z+36	; 0x24
    31ae:	75 a1       	ldd	r23, Z+37	; 0x25
    31b0:	97 01       	movw	r18, r14
    31b2:	86 01       	movw	r16, r12
    31b4:	04 1b       	sub	r16, r20
    31b6:	15 0b       	sbc	r17, r21
    31b8:	26 0b       	sbc	r18, r22
    31ba:	37 0b       	sbc	r19, r23
    31bc:	08 17       	cp	r16, r24
    31be:	19 07       	cpc	r17, r25
    31c0:	2a 07       	cpc	r18, r26
    31c2:	3b 07       	cpc	r19, r27
    31c4:	08 f0       	brcs	.+2      	; 0x31c8 <__stack+0x1c9>
    31c6:	f4 ce       	rjmp	.-536    	; 0x2fb0 <follow_path+0x228>
    31c8:	83 80       	ldd	r8, Z+3	; 0x03
    31ca:	91 2c       	mov	r9, r1
    31cc:	12 e0       	ldi	r17, 0x02	; 2
    31ce:	81 16       	cp	r8, r17
    31d0:	91 04       	cpc	r9, r1
    31d2:	38 f4       	brcc	.+14     	; 0x31e2 <__stack+0x1e3>
    31d4:	ed ce       	rjmp	.-550    	; 0x2fb0 <follow_path+0x228>
    31d6:	eb 81       	ldd	r30, Y+3	; 0x03
    31d8:	fc 81       	ldd	r31, Y+4	; 0x04
    31da:	82 8d       	ldd	r24, Z+26	; 0x1a
    31dc:	93 8d       	ldd	r25, Z+27	; 0x1b
    31de:	a4 8d       	ldd	r26, Z+28	; 0x1c
    31e0:	b5 8d       	ldd	r27, Z+29	; 0x1d
    31e2:	c8 0e       	add	r12, r24
    31e4:	d9 1e       	adc	r13, r25
    31e6:	ea 1e       	adc	r14, r26
    31e8:	fb 1e       	adc	r15, r27
    31ea:	01 e0       	ldi	r16, 0x01	; 1
    31ec:	10 e0       	ldi	r17, 0x00	; 0
    31ee:	a7 01       	movw	r20, r14
    31f0:	96 01       	movw	r18, r12
    31f2:	b1 01       	movw	r22, r2
    31f4:	ab 81       	ldd	r26, Y+3	; 0x03
    31f6:	bc 81       	ldd	r27, Y+4	; 0x04
    31f8:	11 96       	adiw	r26, 0x01	; 1
    31fa:	8c 91       	ld	r24, X
    31fc:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    3200:	b1 e0       	ldi	r27, 0x01	; 1
    3202:	8b 1a       	sub	r8, r27
    3204:	91 08       	sbc	r9, r1
    3206:	e1 e0       	ldi	r30, 0x01	; 1
    3208:	8e 16       	cp	r8, r30
    320a:	91 04       	cpc	r9, r1
    320c:	21 f7       	brne	.-56     	; 0x31d6 <__stack+0x1d7>
    320e:	d0 ce       	rjmp	.-608    	; 0x2fb0 <follow_path+0x228>
    3210:	ff ef       	ldi	r31, 0xFF	; 255
    3212:	4f 1a       	sub	r4, r31
    3214:	5f 0a       	sbc	r5, r31
    3216:	6f 0a       	sbc	r6, r31
    3218:	7f 0a       	sbc	r7, r31
    321a:	d5 01       	movw	r26, r10
    321c:	1e 96       	adiw	r26, 0x0e	; 14
    321e:	4d 92       	st	X+, r4
    3220:	5d 92       	st	X+, r5
    3222:	6d 92       	st	X+, r6
    3224:	7c 92       	st	X, r7
    3226:	51 97       	sbiw	r26, 0x11	; 17
    3228:	1a 96       	adiw	r26, 0x0a	; 10
    322a:	4d 91       	ld	r20, X+
    322c:	5d 91       	ld	r21, X+
    322e:	6d 91       	ld	r22, X+
    3230:	7c 91       	ld	r23, X
    3232:	1d 97       	sbiw	r26, 0x0d	; 13
    3234:	41 15       	cp	r20, r1
    3236:	51 05       	cpc	r21, r1
    3238:	61 05       	cpc	r22, r1
    323a:	71 05       	cpc	r23, r1
    323c:	59 f4       	brne	.+22     	; 0x3254 <__stack+0x255>
    323e:	ed 91       	ld	r30, X+
    3240:	fc 91       	ld	r31, X
    3242:	eb 83       	std	Y+3, r30	; 0x03
    3244:	fc 83       	std	Y+4, r31	; 0x04
    3246:	80 85       	ldd	r24, Z+8	; 0x08
    3248:	91 85       	ldd	r25, Z+9	; 0x09
    324a:	e8 16       	cp	r14, r24
    324c:	f9 06       	cpc	r15, r25
    324e:	08 f0       	brcs	.+2      	; 0x3252 <__stack+0x253>
    3250:	48 cf       	rjmp	.-368    	; 0x30e2 <__stack+0xe3>
    3252:	78 cf       	rjmp	.-272    	; 0x3144 <__stack+0x145>
    3254:	d5 01       	movw	r26, r10
    3256:	0d 90       	ld	r0, X+
    3258:	bc 91       	ld	r27, X
    325a:	a0 2d       	mov	r26, r0
    325c:	ab 83       	std	Y+3, r26	; 0x03
    325e:	bc 83       	std	Y+4, r27	; 0x04
    3260:	12 96       	adiw	r26, 0x02	; 2
    3262:	8c 91       	ld	r24, X
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	97 01       	movw	r18, r14
    326a:	32 95       	swap	r19
    326c:	22 95       	swap	r18
    326e:	2f 70       	andi	r18, 0x0F	; 15
    3270:	23 27       	eor	r18, r19
    3272:	3f 70       	andi	r19, 0x0F	; 15
    3274:	23 27       	eor	r18, r19
    3276:	82 23       	and	r24, r18
    3278:	93 23       	and	r25, r19
    327a:	89 2b       	or	r24, r25
    327c:	09 f0       	breq	.+2      	; 0x3280 <__stack+0x281>
    327e:	62 cf       	rjmp	.-316    	; 0x3144 <__stack+0x145>
    3280:	42 30       	cpi	r20, 0x02	; 2
    3282:	51 05       	cpc	r21, r1
    3284:	61 05       	cpc	r22, r1
    3286:	71 05       	cpc	r23, r1
    3288:	58 f0       	brcs	.+22     	; 0x32a0 <__stack+0x2a1>
    328a:	eb 81       	ldd	r30, Y+3	; 0x03
    328c:	fc 81       	ldd	r31, Y+4	; 0x04
    328e:	86 89       	ldd	r24, Z+22	; 0x16
    3290:	97 89       	ldd	r25, Z+23	; 0x17
    3292:	a0 8d       	ldd	r26, Z+24	; 0x18
    3294:	b1 8d       	ldd	r27, Z+25	; 0x19
    3296:	48 17       	cp	r20, r24
    3298:	59 07       	cpc	r21, r25
    329a:	6a 07       	cpc	r22, r26
    329c:	7b 07       	cpc	r23, r27
    329e:	d8 f1       	brcs	.+118    	; 0x3316 <__stack+0x317>
    32a0:	82 e0       	ldi	r24, 0x02	; 2
    32a2:	20 cf       	rjmp	.-448    	; 0x30e4 <__stack+0xe5>
    32a4:	04 88       	ldd	r0, Z+20	; 0x14
    32a6:	f5 89       	ldd	r31, Z+21	; 0x15
    32a8:	e0 2d       	mov	r30, r0
    32aa:	93 85       	ldd	r25, Z+11	; 0x0b
    32ac:	24 cf       	rjmp	.-440    	; 0x30f6 <__stack+0xf7>
    32ae:	e9 81       	ldd	r30, Y+1	; 0x01
    32b0:	fa 81       	ldd	r31, Y+2	; 0x02
    32b2:	31 96       	adiw	r30, 0x01	; 1
    32b4:	e9 83       	std	Y+1, r30	; 0x01
    32b6:	fa 83       	std	Y+2, r31	; 0x02
    32b8:	d5 01       	movw	r26, r10
    32ba:	16 96       	adiw	r26, 0x06	; 6
    32bc:	1d 92       	st	X+, r1
    32be:	1d 92       	st	X+, r1
    32c0:	1d 92       	st	X+, r1
    32c2:	1c 92       	st	X, r1
    32c4:	19 97       	sbiw	r26, 0x09	; 9
    32c6:	df 01       	movw	r26, r30
    32c8:	8c 91       	ld	r24, X
    32ca:	80 32       	cpi	r24, 0x20	; 32
    32cc:	08 f0       	brcs	.+2      	; 0x32d0 <__stack+0x2d1>
    32ce:	8f cd       	rjmp	.-1250   	; 0x2dee <follow_path+0x66>
    32d0:	60 e0       	ldi	r22, 0x00	; 0
    32d2:	70 e0       	ldi	r23, 0x00	; 0
    32d4:	c5 01       	movw	r24, r10
    32d6:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <dir_sdi>
    32da:	d5 01       	movw	r26, r10
    32dc:	52 96       	adiw	r26, 0x12	; 18
    32de:	1d 92       	st	X+, r1
    32e0:	1c 92       	st	X, r1
    32e2:	53 97       	sbiw	r26, 0x13	; 19
    32e4:	03 ce       	rjmp	.-1018   	; 0x2eec <follow_path+0x164>
    32e6:	db 01       	movw	r26, r22
    32e8:	54 96       	adiw	r26, 0x14	; 20
    32ea:	4d 91       	ld	r20, X+
    32ec:	5c 91       	ld	r21, X
    32ee:	55 97       	sbiw	r26, 0x15	; 21
    32f0:	60 e0       	ldi	r22, 0x00	; 0
    32f2:	70 e0       	ldi	r23, 0x00	; 0
    32f4:	ba 01       	movw	r22, r20
    32f6:	55 27       	eor	r21, r21
    32f8:	44 27       	eor	r20, r20
    32fa:	c4 2a       	or	r12, r20
    32fc:	d5 2a       	or	r13, r21
    32fe:	e6 2a       	or	r14, r22
    3300:	f7 2a       	or	r15, r23
    3302:	dd ce       	rjmp	.-582    	; 0x30be <__stack+0xbf>
    3304:	13 60       	ori	r17, 0x03	; 3
    3306:	b0 cd       	rjmp	.-1184   	; 0x2e68 <follow_path+0xe0>
    3308:	8d 01       	movw	r16, r26
    330a:	08 0f       	add	r16, r24
    330c:	19 1f       	adc	r17, r25
    330e:	09 83       	std	Y+1, r16	; 0x01
    3310:	1a 83       	std	Y+2, r17	; 0x02
    3312:	84 e2       	ldi	r24, 0x24	; 36
    3314:	25 ce       	rjmp	.-950    	; 0x2f60 <follow_path+0x1d8>
    3316:	cf 01       	movw	r24, r30
    3318:	0e 94 5f 0b 	call	0x16be	; 0x16be <get_fat.part.4>
    331c:	62 30       	cpi	r22, 0x02	; 2
    331e:	71 05       	cpc	r23, r1
    3320:	81 05       	cpc	r24, r1
    3322:	91 05       	cpc	r25, r1
    3324:	08 f4       	brcc	.+2      	; 0x3328 <__stack+0x329>
    3326:	bc cf       	rjmp	.-136    	; 0x32a0 <__stack+0x2a1>
    3328:	6f 3f       	cpi	r22, 0xFF	; 255
    332a:	ff ef       	ldi	r31, 0xFF	; 255
    332c:	7f 07       	cpc	r23, r31
    332e:	8f 07       	cpc	r24, r31
    3330:	9f 07       	cpc	r25, r31
    3332:	09 f4       	brne	.+2      	; 0x3336 <__stack+0x337>
    3334:	76 c0       	rjmp	.+236    	; 0x3422 <__stack+0x423>
    3336:	d5 01       	movw	r26, r10
    3338:	0d 90       	ld	r0, X+
    333a:	bc 91       	ld	r27, X
    333c:	a0 2d       	mov	r26, r0
    333e:	ab 83       	std	Y+3, r26	; 0x03
    3340:	bc 83       	std	Y+4, r27	; 0x04
    3342:	56 96       	adiw	r26, 0x16	; 22
    3344:	4d 90       	ld	r4, X+
    3346:	5d 90       	ld	r5, X+
    3348:	6d 90       	ld	r6, X+
    334a:	7c 90       	ld	r7, X
    334c:	59 97       	sbiw	r26, 0x19	; 25
    334e:	64 15       	cp	r22, r4
    3350:	75 05       	cpc	r23, r5
    3352:	86 05       	cpc	r24, r6
    3354:	97 05       	cpc	r25, r7
    3356:	08 f0       	brcs	.+2      	; 0x335a <__stack+0x35b>
    3358:	c4 ce       	rjmp	.-632    	; 0x30e2 <__stack+0xe3>
    335a:	f5 01       	movw	r30, r10
    335c:	62 87       	std	Z+10, r22	; 0x0a
    335e:	73 87       	std	Z+11, r23	; 0x0b
    3360:	84 87       	std	Z+12, r24	; 0x0c
    3362:	95 87       	std	Z+13, r25	; 0x0d
    3364:	9b 01       	movw	r18, r22
    3366:	ac 01       	movw	r20, r24
    3368:	22 50       	subi	r18, 0x02	; 2
    336a:	31 09       	sbc	r19, r1
    336c:	41 09       	sbc	r20, r1
    336e:	51 09       	sbc	r21, r1
    3370:	f2 e0       	ldi	r31, 0x02	; 2
    3372:	4f 1a       	sub	r4, r31
    3374:	51 08       	sbc	r5, r1
    3376:	61 08       	sbc	r6, r1
    3378:	71 08       	sbc	r7, r1
    337a:	24 15       	cp	r18, r4
    337c:	35 05       	cpc	r19, r5
    337e:	46 05       	cpc	r20, r6
    3380:	57 05       	cpc	r21, r7
    3382:	08 f0       	brcs	.+2      	; 0x3386 <__stack+0x387>
    3384:	4a c0       	rjmp	.+148    	; 0x341a <__stack+0x41b>
    3386:	fd 01       	movw	r30, r26
    3388:	a2 81       	ldd	r26, Z+2	; 0x02
    338a:	b0 e0       	ldi	r27, 0x00	; 0
    338c:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__muluhisi3>
    3390:	2b 01       	movw	r4, r22
    3392:	3c 01       	movw	r6, r24
    3394:	82 a5       	ldd	r24, Z+42	; 0x2a
    3396:	93 a5       	ldd	r25, Z+43	; 0x2b
    3398:	a4 a5       	ldd	r26, Z+44	; 0x2c
    339a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    339c:	48 0e       	add	r4, r24
    339e:	59 1e       	adc	r5, r25
    33a0:	6a 1e       	adc	r6, r26
    33a2:	7b 1e       	adc	r7, r27
    33a4:	d5 01       	movw	r26, r10
    33a6:	1e 96       	adiw	r26, 0x0e	; 14
    33a8:	4d 92       	st	X+, r4
    33aa:	5d 92       	st	X+, r5
    33ac:	6d 92       	st	X+, r6
    33ae:	7c 92       	st	X, r7
    33b0:	51 97       	sbiw	r26, 0x11	; 17
    33b2:	c8 ce       	rjmp	.-624    	; 0x3144 <__stack+0x145>
    33b4:	8f e9       	ldi	r24, 0x9F	; 159
    33b6:	80 0f       	add	r24, r16
    33b8:	8a 31       	cpi	r24, 0x1A	; 26
    33ba:	08 f0       	brcs	.+2      	; 0x33be <__stack+0x3bf>
    33bc:	c3 cd       	rjmp	.-1146   	; 0x2f44 <follow_path+0x1bc>
    33be:	11 60       	ori	r17, 0x01	; 1
    33c0:	00 52       	subi	r16, 0x20	; 32
    33c2:	c0 cd       	rjmp	.-1152   	; 0x2f44 <follow_path+0x1bc>
    33c4:	cd 01       	movw	r24, r26
    33c6:	86 0f       	add	r24, r22
    33c8:	97 1f       	adc	r25, r23
    33ca:	89 83       	std	Y+1, r24	; 0x01
    33cc:	9a 83       	std	Y+2, r25	; 0x02
    33ce:	80 e0       	ldi	r24, 0x00	; 0
    33d0:	23 2b       	or	r18, r19
    33d2:	09 f4       	brne	.+2      	; 0x33d6 <__stack+0x3d7>
    33d4:	8a cd       	rjmp	.-1260   	; 0x2eea <follow_path+0x162>
    33d6:	d6 01       	movw	r26, r12
    33d8:	9c 91       	ld	r25, X
    33da:	95 3e       	cpi	r25, 0xE5	; 229
    33dc:	11 f4       	brne	.+4      	; 0x33e2 <__stack+0x3e3>
    33de:	e5 e0       	ldi	r30, 0x05	; 5
    33e0:	ec 93       	st	X, r30
    33e2:	48 30       	cpi	r20, 0x08	; 8
    33e4:	51 05       	cpc	r21, r1
    33e6:	11 f4       	brne	.+4      	; 0x33ec <__stack+0x3ed>
    33e8:	11 0f       	add	r17, r17
    33ea:	11 0f       	add	r17, r17
    33ec:	91 2f       	mov	r25, r17
    33ee:	93 70       	andi	r25, 0x03	; 3
    33f0:	91 30       	cpi	r25, 0x01	; 1
    33f2:	09 f4       	brne	.+2      	; 0x33f6 <__stack+0x3f7>
    33f4:	80 61       	ori	r24, 0x10	; 16
    33f6:	1c 70       	andi	r17, 0x0C	; 12
    33f8:	14 30       	cpi	r17, 0x04	; 4
    33fa:	09 f0       	breq	.+2      	; 0x33fe <__stack+0x3ff>
    33fc:	b1 cd       	rjmp	.-1182   	; 0x2f60 <follow_path+0x1d8>
    33fe:	88 60       	ori	r24, 0x08	; 8
    3400:	af cd       	rjmp	.-1186   	; 0x2f60 <follow_path+0x1d8>
    3402:	fd 01       	movw	r30, r26
    3404:	e6 0f       	add	r30, r22
    3406:	f7 1f       	adc	r31, r23
    3408:	e9 83       	std	Y+1, r30	; 0x01
    340a:	fa 83       	std	Y+2, r31	; 0x02
    340c:	84 e0       	ldi	r24, 0x04	; 4
    340e:	e0 cf       	rjmp	.-64     	; 0x33d0 <__stack+0x3d1>
    3410:	85 e0       	ldi	r24, 0x05	; 5
    3412:	6c cd       	rjmp	.-1320   	; 0x2eec <follow_path+0x164>
    3414:	82 e0       	ldi	r24, 0x02	; 2
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	61 cd       	rjmp	.-1342   	; 0x2edc <follow_path+0x154>
    341a:	41 2c       	mov	r4, r1
    341c:	51 2c       	mov	r5, r1
    341e:	32 01       	movw	r6, r4
    3420:	c1 cf       	rjmp	.-126    	; 0x33a4 <__stack+0x3a5>
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	5f ce       	rjmp	.-834    	; 0x30e4 <__stack+0xe5>
    3426:	92 ff       	sbrs	r25, 2
    3428:	f3 cf       	rjmp	.-26     	; 0x3410 <__stack+0x411>
    342a:	84 e0       	ldi	r24, 0x04	; 4
    342c:	5f cd       	rjmp	.-1346   	; 0x2eec <follow_path+0x164>
    342e:	48 30       	cpi	r20, 0x08	; 8
    3430:	51 05       	cpc	r21, r1
    3432:	09 f0       	breq	.+2      	; 0x3436 <__stack+0x437>
    3434:	5a cd       	rjmp	.-1356   	; 0x2eea <follow_path+0x162>
    3436:	11 0f       	add	r17, r17
    3438:	11 0f       	add	r17, r17
    343a:	cb 01       	movw	r24, r22
    343c:	28 e0       	ldi	r18, 0x08	; 8
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	4b e0       	ldi	r20, 0x0B	; 11
    3442:	50 e0       	ldi	r21, 0x00	; 0
    3444:	f8 cc       	rjmp	.-1552   	; 0x2e36 <follow_path+0xae>

00003446 <find_volume>:
    3446:	2f 92       	push	r2
    3448:	3f 92       	push	r3
    344a:	4f 92       	push	r4
    344c:	5f 92       	push	r5
    344e:	6f 92       	push	r6
    3450:	7f 92       	push	r7
    3452:	8f 92       	push	r8
    3454:	9f 92       	push	r9
    3456:	af 92       	push	r10
    3458:	bf 92       	push	r11
    345a:	cf 92       	push	r12
    345c:	df 92       	push	r13
    345e:	ef 92       	push	r14
    3460:	ff 92       	push	r15
    3462:	0f 93       	push	r16
    3464:	1f 93       	push	r17
    3466:	cf 93       	push	r28
    3468:	df 93       	push	r29
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
    346e:	a1 97       	sbiw	r28, 0x21	; 33
    3470:	cd bf       	out	0x3d, r28	; 61
    3472:	de bf       	out	0x3e, r29	; 62
    3474:	dc 01       	movw	r26, r24
    3476:	1d 92       	st	X+, r1
    3478:	1c 92       	st	X, r1
    347a:	db 01       	movw	r26, r22
    347c:	ed 91       	ld	r30, X+
    347e:	fc 91       	ld	r31, X
    3480:	30 97       	sbiw	r30, 0x00	; 0
    3482:	a1 f1       	breq	.+104    	; 0x34ec <find_volume+0xa6>
    3484:	00 81       	ld	r16, Z
    3486:	01 32       	cpi	r16, 0x21	; 33
    3488:	60 f0       	brcs	.+24     	; 0x34a2 <find_volume+0x5c>
    348a:	0a 33       	cpi	r16, 0x3A	; 58
    348c:	79 f1       	breq	.+94     	; 0x34ec <find_volume+0xa6>
    348e:	df 01       	movw	r26, r30
    3490:	11 96       	adiw	r26, 0x01	; 1
    3492:	fd 01       	movw	r30, r26
    3494:	02 c0       	rjmp	.+4      	; 0x349a <find_volume+0x54>
    3496:	5a 33       	cpi	r21, 0x3A	; 58
    3498:	29 f1       	breq	.+74     	; 0x34e4 <find_volume+0x9e>
    349a:	9f 01       	movw	r18, r30
    349c:	51 91       	ld	r21, Z+
    349e:	51 32       	cpi	r21, 0x21	; 33
    34a0:	d0 f7       	brcc	.-12     	; 0x3496 <find_volume+0x50>
    34a2:	00 91 98 25 	lds	r16, 0x2598
    34a6:	10 e0       	ldi	r17, 0x00	; 0
    34a8:	f8 01       	movw	r30, r16
    34aa:	ee 0f       	add	r30, r30
    34ac:	ff 1f       	adc	r31, r31
    34ae:	e5 56       	subi	r30, 0x65	; 101
    34b0:	fa 4d       	sbci	r31, 0xDA	; 218
    34b2:	a0 80       	ld	r10, Z
    34b4:	b1 80       	ldd	r11, Z+1	; 0x01
    34b6:	a1 14       	cp	r10, r1
    34b8:	b1 04       	cpc	r11, r1
    34ba:	f1 f1       	breq	.+124    	; 0x3538 <find_volume+0xf2>
    34bc:	dc 01       	movw	r26, r24
    34be:	ad 92       	st	X+, r10
    34c0:	bc 92       	st	X, r11
    34c2:	f5 01       	movw	r30, r10
    34c4:	80 81       	ld	r24, Z
    34c6:	88 23       	and	r24, r24
    34c8:	41 f1       	breq	.+80     	; 0x351a <find_volume+0xd4>
    34ca:	81 81       	ldd	r24, Z+1	; 0x01
    34cc:	49 a3       	std	Y+33, r20	; 0x21
    34ce:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <disk_status>
    34d2:	49 a1       	ldd	r20, Y+33	; 0x21
    34d4:	80 fd       	sbrc	r24, 0
    34d6:	21 c0       	rjmp	.+66     	; 0x351a <find_volume+0xd4>
    34d8:	44 23       	and	r20, r20
    34da:	61 f1       	breq	.+88     	; 0x3534 <find_volume+0xee>
    34dc:	82 ff       	sbrs	r24, 2
    34de:	2a c0       	rjmp	.+84     	; 0x3534 <find_volume+0xee>
    34e0:	8a e0       	ldi	r24, 0x0A	; 10
    34e2:	05 c0       	rjmp	.+10     	; 0x34ee <find_volume+0xa8>
    34e4:	2a 17       	cp	r18, r26
    34e6:	3b 07       	cpc	r19, r27
    34e8:	09 f4       	brne	.+2      	; 0x34ec <find_volume+0xa6>
    34ea:	63 c0       	rjmp	.+198    	; 0x35b2 <find_volume+0x16c>
    34ec:	8b e0       	ldi	r24, 0x0B	; 11
    34ee:	a1 96       	adiw	r28, 0x21	; 33
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	de bf       	out	0x3e, r29	; 62
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	ff 90       	pop	r15
    34fe:	ef 90       	pop	r14
    3500:	df 90       	pop	r13
    3502:	cf 90       	pop	r12
    3504:	bf 90       	pop	r11
    3506:	af 90       	pop	r10
    3508:	9f 90       	pop	r9
    350a:	8f 90       	pop	r8
    350c:	7f 90       	pop	r7
    350e:	6f 90       	pop	r6
    3510:	5f 90       	pop	r5
    3512:	4f 90       	pop	r4
    3514:	3f 90       	pop	r3
    3516:	2f 90       	pop	r2
    3518:	08 95       	ret
    351a:	d5 01       	movw	r26, r10
    351c:	1c 92       	st	X, r1
    351e:	11 96       	adiw	r26, 0x01	; 1
    3520:	0c 93       	st	X, r16
    3522:	80 2f       	mov	r24, r16
    3524:	49 a3       	std	Y+33, r20	; 0x21
    3526:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <disk_initialize>
    352a:	49 a1       	ldd	r20, Y+33	; 0x21
    352c:	80 ff       	sbrs	r24, 0
    352e:	06 c0       	rjmp	.+12     	; 0x353c <find_volume+0xf6>
    3530:	83 e0       	ldi	r24, 0x03	; 3
    3532:	dd cf       	rjmp	.-70     	; 0x34ee <find_volume+0xa8>
    3534:	80 e0       	ldi	r24, 0x00	; 0
    3536:	db cf       	rjmp	.-74     	; 0x34ee <find_volume+0xa8>
    3538:	8c e0       	ldi	r24, 0x0C	; 12
    353a:	d9 cf       	rjmp	.-78     	; 0x34ee <find_volume+0xa8>
    353c:	44 23       	and	r20, r20
    353e:	11 f0       	breq	.+4      	; 0x3544 <find_volume+0xfe>
    3540:	82 fd       	sbrc	r24, 2
    3542:	ce cf       	rjmp	.-100    	; 0x34e0 <find_volume+0x9a>
    3544:	f5 01       	movw	r30, r10
    3546:	14 82       	std	Z+4, r1	; 0x04
    3548:	44 24       	eor	r4, r4
    354a:	4a 94       	dec	r4
    354c:	54 2c       	mov	r5, r4
    354e:	32 01       	movw	r6, r4
    3550:	46 a6       	std	Z+46, r4	; 0x2e
    3552:	57 a6       	std	Z+47, r5	; 0x2f
    3554:	60 aa       	std	Z+48, r6	; 0x30
    3556:	71 aa       	std	Z+49, r7	; 0x31
    3558:	15 01       	movw	r2, r10
    355a:	b2 e3       	ldi	r27, 0x32	; 50
    355c:	2b 0e       	add	r2, r27
    355e:	31 1c       	adc	r3, r1
    3560:	01 e0       	ldi	r16, 0x01	; 1
    3562:	10 e0       	ldi	r17, 0x00	; 0
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	a9 01       	movw	r20, r18
    356a:	b1 01       	movw	r22, r2
    356c:	81 81       	ldd	r24, Z+1	; 0x01
    356e:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    3572:	81 11       	cpse	r24, r1
    3574:	2b c0       	rjmp	.+86     	; 0x35cc <find_volume+0x186>
    3576:	d5 01       	movw	r26, r10
    3578:	9e 96       	adiw	r26, 0x2e	; 46
    357a:	1d 92       	st	X+, r1
    357c:	1d 92       	st	X+, r1
    357e:	1d 92       	st	X+, r1
    3580:	1c 92       	st	X, r1
    3582:	d1 97       	sbiw	r26, 0x31	; 49
    3584:	25 01       	movw	r4, r10
    3586:	b0 ed       	ldi	r27, 0xD0	; 208
    3588:	4b 1a       	sub	r4, r27
    358a:	bd ef       	ldi	r27, 0xFD	; 253
    358c:	5b 0a       	sbc	r5, r27
    358e:	f2 01       	movw	r30, r4
    3590:	80 81       	ld	r24, Z
    3592:	91 81       	ldd	r25, Z+1	; 0x01
    3594:	85 35       	cpi	r24, 0x55	; 85
    3596:	9a 4a       	sbci	r25, 0xAA	; 170
    3598:	09 f4       	brne	.+2      	; 0x359c <find_volume+0x156>
    359a:	6e c1       	rjmp	.+732    	; 0x3878 <find_volume+0x432>
    359c:	82 e0       	ldi	r24, 0x02	; 2
    359e:	c1 2c       	mov	r12, r1
    35a0:	d1 2c       	mov	r13, r1
    35a2:	76 01       	movw	r14, r12
    35a4:	83 30       	cpi	r24, 0x03	; 3
    35a6:	09 f4       	brne	.+2      	; 0x35aa <find_volume+0x164>
    35a8:	11 c2       	rjmp	.+1058   	; 0x39cc <find_volume+0x586>
    35aa:	88 23       	and	r24, r24
    35ac:	d9 f0       	breq	.+54     	; 0x35e4 <find_volume+0x19e>
    35ae:	8d e0       	ldi	r24, 0x0D	; 13
    35b0:	9e cf       	rjmp	.-196    	; 0x34ee <find_volume+0xa8>
    35b2:	20 ed       	ldi	r18, 0xD0	; 208
    35b4:	20 0f       	add	r18, r16
    35b6:	22 30       	cpi	r18, 0x02	; 2
    35b8:	08 f0       	brcs	.+2      	; 0x35bc <find_volume+0x176>
    35ba:	98 cf       	rjmp	.-208    	; 0x34ec <find_volume+0xa6>
    35bc:	10 e0       	ldi	r17, 0x00	; 0
    35be:	00 53       	subi	r16, 0x30	; 48
    35c0:	11 09       	sbc	r17, r1
    35c2:	11 96       	adiw	r26, 0x01	; 1
    35c4:	fb 01       	movw	r30, r22
    35c6:	a0 83       	st	Z, r26
    35c8:	b1 83       	std	Z+1, r27	; 0x01
    35ca:	6e cf       	rjmp	.-292    	; 0x34a8 <find_volume+0x62>
    35cc:	d5 01       	movw	r26, r10
    35ce:	9e 96       	adiw	r26, 0x2e	; 46
    35d0:	4d 92       	st	X+, r4
    35d2:	5d 92       	st	X+, r5
    35d4:	6d 92       	st	X+, r6
    35d6:	7c 92       	st	X, r7
    35d8:	d1 97       	sbiw	r26, 0x31	; 49
    35da:	83 e0       	ldi	r24, 0x03	; 3
    35dc:	e0 cf       	rjmp	.-64     	; 0x359e <find_volume+0x158>
    35de:	c1 2c       	mov	r12, r1
    35e0:	d1 2c       	mov	r13, r1
    35e2:	76 01       	movw	r14, r12
    35e4:	d5 01       	movw	r26, r10
    35e6:	dd 96       	adiw	r26, 0x3d	; 61
    35e8:	8d 91       	ld	r24, X+
    35ea:	9c 91       	ld	r25, X
    35ec:	de 97       	sbiw	r26, 0x3e	; 62
    35ee:	81 15       	cp	r24, r1
    35f0:	92 40       	sbci	r25, 0x02	; 2
    35f2:	e9 f6       	brne	.-70     	; 0x35ae <find_volume+0x168>
    35f4:	f5 01       	movw	r30, r10
    35f6:	e8 5b       	subi	r30, 0xB8	; 184
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	80 81       	ld	r24, Z
    35fc:	91 81       	ldd	r25, Z+1	; 0x01
    35fe:	3c 01       	movw	r6, r24
    3600:	81 2c       	mov	r8, r1
    3602:	91 2c       	mov	r9, r1
    3604:	6d 8a       	std	Y+21, r6	; 0x15
    3606:	7e 8a       	std	Y+22, r7	; 0x16
    3608:	8f 8a       	std	Y+23, r8	; 0x17
    360a:	98 8e       	std	Y+24, r9	; 0x18
    360c:	61 14       	cp	r6, r1
    360e:	71 04       	cpc	r7, r1
    3610:	81 04       	cpc	r8, r1
    3612:	91 04       	cpc	r9, r1
    3614:	49 f4       	brne	.+18     	; 0x3628 <find_volume+0x1e2>
    3616:	3e 96       	adiw	r30, 0x0e	; 14
    3618:	60 80       	ld	r6, Z
    361a:	71 80       	ldd	r7, Z+1	; 0x01
    361c:	82 80       	ldd	r8, Z+2	; 0x02
    361e:	93 80       	ldd	r9, Z+3	; 0x03
    3620:	6d 8a       	std	Y+21, r6	; 0x15
    3622:	7e 8a       	std	Y+22, r7	; 0x16
    3624:	8f 8a       	std	Y+23, r8	; 0x17
    3626:	98 8e       	std	Y+24, r9	; 0x18
    3628:	d5 01       	movw	r26, r10
    362a:	5a 96       	adiw	r26, 0x1a	; 26
    362c:	6d 92       	st	X+, r6
    362e:	7d 92       	st	X+, r7
    3630:	8d 92       	st	X+, r8
    3632:	9c 92       	st	X, r9
    3634:	5d 97       	sbiw	r26, 0x1d	; 29
    3636:	f5 01       	movw	r30, r10
    3638:	ee 5b       	subi	r30, 0xBE	; 190
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	a0 81       	ld	r26, Z
    363e:	f5 01       	movw	r30, r10
    3640:	a3 83       	std	Z+3, r26	; 0x03
    3642:	8f ef       	ldi	r24, 0xFF	; 255
    3644:	8a 0f       	add	r24, r26
    3646:	82 30       	cpi	r24, 0x02	; 2
    3648:	08 f0       	brcs	.+2      	; 0x364c <find_volume+0x206>
    364a:	b1 cf       	rjmp	.-158    	; 0x35ae <find_volume+0x168>
    364c:	b0 e0       	ldi	r27, 0x00	; 0
    364e:	a4 01       	movw	r20, r8
    3650:	93 01       	movw	r18, r6
    3652:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__muluhisi3>
    3656:	6d 8f       	std	Y+29, r22	; 0x1d
    3658:	7e 8f       	std	Y+30, r23	; 0x1e
    365a:	8f 8f       	std	Y+31, r24	; 0x1f
    365c:	98 a3       	std	Y+32, r25	; 0x20
    365e:	27 ad       	ldd	r18, Z+63	; 0x3f
    3660:	22 83       	std	Z+2, r18	; 0x02
    3662:	22 23       	and	r18, r18
    3664:	09 f4       	brne	.+2      	; 0x3668 <find_volume+0x222>
    3666:	a3 cf       	rjmp	.-186    	; 0x35ae <find_volume+0x168>
    3668:	42 2f       	mov	r20, r18
    366a:	50 e0       	ldi	r21, 0x00	; 0
    366c:	ca 01       	movw	r24, r20
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	84 23       	and	r24, r20
    3672:	95 23       	and	r25, r21
    3674:	89 2b       	or	r24, r25
    3676:	09 f0       	breq	.+2      	; 0x367a <find_volume+0x234>
    3678:	9a cf       	rjmp	.-204    	; 0x35ae <find_volume+0x168>
    367a:	ed 5b       	subi	r30, 0xBD	; 189
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	00 81       	ld	r16, Z
    3680:	11 81       	ldd	r17, Z+1	; 0x01
    3682:	d5 01       	movw	r26, r10
    3684:	18 96       	adiw	r26, 0x08	; 8
    3686:	0d 93       	st	X+, r16
    3688:	1c 93       	st	X, r17
    368a:	19 97       	sbiw	r26, 0x09	; 9
    368c:	c8 01       	movw	r24, r16
    368e:	8f 70       	andi	r24, 0x0F	; 15
    3690:	99 27       	eor	r25, r25
    3692:	89 2b       	or	r24, r25
    3694:	09 f0       	breq	.+2      	; 0x3698 <find_volume+0x252>
    3696:	8b cf       	rjmp	.-234    	; 0x35ae <find_volume+0x168>
    3698:	32 96       	adiw	r30, 0x02	; 2
    369a:	60 81       	ld	r22, Z
    369c:	71 81       	ldd	r23, Z+1	; 0x01
    369e:	cb 01       	movw	r24, r22
    36a0:	a0 e0       	ldi	r26, 0x00	; 0
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	00 97       	sbiw	r24, 0x00	; 0
    36a6:	a1 05       	cpc	r26, r1
    36a8:	b1 05       	cpc	r27, r1
    36aa:	29 f4       	brne	.+10     	; 0x36b6 <find_volume+0x270>
    36ac:	3d 96       	adiw	r30, 0x0d	; 13
    36ae:	80 81       	ld	r24, Z
    36b0:	91 81       	ldd	r25, Z+1	; 0x01
    36b2:	a2 81       	ldd	r26, Z+2	; 0x02
    36b4:	b3 81       	ldd	r27, Z+3	; 0x03
    36b6:	f5 01       	movw	r30, r10
    36b8:	e0 5c       	subi	r30, 0xC0	; 192
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	40 81       	ld	r20, Z
    36be:	51 81       	ldd	r21, Z+1	; 0x01
    36c0:	41 15       	cp	r20, r1
    36c2:	51 05       	cpc	r21, r1
    36c4:	09 f4       	brne	.+2      	; 0x36c8 <find_volume+0x282>
    36c6:	73 cf       	rjmp	.-282    	; 0x35ae <find_volume+0x168>
    36c8:	3a 01       	movw	r6, r20
    36ca:	81 2c       	mov	r8, r1
    36cc:	91 2c       	mov	r9, r1
    36ce:	69 8e       	std	Y+25, r6	; 0x19
    36d0:	7a 8e       	std	Y+26, r7	; 0x1a
    36d2:	8b 8e       	std	Y+27, r8	; 0x1b
    36d4:	9c 8e       	std	Y+28, r9	; 0x1c
    36d6:	a8 01       	movw	r20, r16
    36d8:	52 95       	swap	r21
    36da:	42 95       	swap	r20
    36dc:	4f 70       	andi	r20, 0x0F	; 15
    36de:	45 27       	eor	r20, r21
    36e0:	5f 70       	andi	r21, 0x0F	; 15
    36e2:	45 27       	eor	r20, r21
    36e4:	64 0e       	add	r6, r20
    36e6:	75 1e       	adc	r7, r21
    36e8:	81 1c       	adc	r8, r1
    36ea:	91 1c       	adc	r9, r1
    36ec:	4d 8d       	ldd	r20, Y+29	; 0x1d
    36ee:	5e 8d       	ldd	r21, Y+30	; 0x1e
    36f0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    36f2:	78 a1       	ldd	r23, Y+32	; 0x20
    36f4:	64 0e       	add	r6, r20
    36f6:	75 1e       	adc	r7, r21
    36f8:	86 1e       	adc	r8, r22
    36fa:	97 1e       	adc	r9, r23
    36fc:	69 8a       	std	Y+17, r6	; 0x11
    36fe:	7a 8a       	std	Y+18, r7	; 0x12
    3700:	8b 8a       	std	Y+19, r8	; 0x13
    3702:	9c 8a       	std	Y+20, r9	; 0x14
    3704:	86 15       	cp	r24, r6
    3706:	97 05       	cpc	r25, r7
    3708:	a8 05       	cpc	r26, r8
    370a:	b9 05       	cpc	r27, r9
    370c:	08 f4       	brcc	.+2      	; 0x3710 <find_volume+0x2ca>
    370e:	4f cf       	rjmp	.-354    	; 0x35ae <find_volume+0x168>
    3710:	bc 01       	movw	r22, r24
    3712:	cd 01       	movw	r24, r26
    3714:	66 19       	sub	r22, r6
    3716:	77 09       	sbc	r23, r7
    3718:	88 09       	sbc	r24, r8
    371a:	99 09       	sbc	r25, r9
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	40 e0       	ldi	r20, 0x00	; 0
    3720:	50 e0       	ldi	r21, 0x00	; 0
    3722:	0e 94 d0 3e 	call	0x7da0	; 0x7da0 <__udivmodsi4>
    3726:	21 15       	cp	r18, r1
    3728:	31 05       	cpc	r19, r1
    372a:	41 05       	cpc	r20, r1
    372c:	51 05       	cpc	r21, r1
    372e:	09 f4       	brne	.+2      	; 0x3732 <find_volume+0x2ec>
    3730:	3e cf       	rjmp	.-388    	; 0x35ae <find_volume+0x168>
    3732:	26 3f       	cpi	r18, 0xF6	; 246
    3734:	6f e0       	ldi	r22, 0x0F	; 15
    3736:	36 07       	cpc	r19, r22
    3738:	41 05       	cpc	r20, r1
    373a:	51 05       	cpc	r21, r1
    373c:	08 f4       	brcc	.+2      	; 0x3740 <find_volume+0x2fa>
    373e:	ff c2       	rjmp	.+1534   	; 0x3d3e <find_volume+0x8f8>
    3740:	26 3f       	cpi	r18, 0xF6	; 246
    3742:	7f ef       	ldi	r23, 0xFF	; 255
    3744:	37 07       	cpc	r19, r23
    3746:	41 05       	cpc	r20, r1
    3748:	51 05       	cpc	r21, r1
    374a:	08 f0       	brcs	.+2      	; 0x374e <find_volume+0x308>
    374c:	b4 c2       	rjmp	.+1384   	; 0x3cb6 <find_volume+0x870>
    374e:	62 e0       	ldi	r22, 0x02	; 2
    3750:	36 2e       	mov	r3, r22
    3752:	29 01       	movw	r4, r18
    3754:	3a 01       	movw	r6, r20
    3756:	f2 e0       	ldi	r31, 0x02	; 2
    3758:	4f 0e       	add	r4, r31
    375a:	51 1c       	adc	r5, r1
    375c:	61 1c       	adc	r6, r1
    375e:	71 1c       	adc	r7, r1
    3760:	d5 01       	movw	r26, r10
    3762:	56 96       	adiw	r26, 0x16	; 22
    3764:	4d 92       	st	X+, r4
    3766:	5d 92       	st	X+, r5
    3768:	6d 92       	st	X+, r6
    376a:	7c 92       	st	X, r7
    376c:	59 97       	sbiw	r26, 0x19	; 25
    376e:	f5 01       	movw	r30, r10
    3770:	c6 8e       	std	Z+30, r12	; 0x1e
    3772:	d7 8e       	std	Z+31, r13	; 0x1f
    3774:	e0 a2       	std	Z+32, r14	; 0x20
    3776:	f1 a2       	std	Z+33, r15	; 0x21
    3778:	89 8d       	ldd	r24, Y+25	; 0x19
    377a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    377c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    377e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3780:	8c 0d       	add	r24, r12
    3782:	9d 1d       	adc	r25, r13
    3784:	ae 1d       	adc	r26, r14
    3786:	bf 1d       	adc	r27, r15
    3788:	82 a3       	std	Z+34, r24	; 0x22
    378a:	93 a3       	std	Z+35, r25	; 0x23
    378c:	a4 a3       	std	Z+36, r26	; 0x24
    378e:	b5 a3       	std	Z+37, r27	; 0x25
    3790:	49 89       	ldd	r20, Y+17	; 0x11
    3792:	5a 89       	ldd	r21, Y+18	; 0x12
    3794:	6b 89       	ldd	r22, Y+19	; 0x13
    3796:	7c 89       	ldd	r23, Y+20	; 0x14
    3798:	4c 0d       	add	r20, r12
    379a:	5d 1d       	adc	r21, r13
    379c:	6e 1d       	adc	r22, r14
    379e:	7f 1d       	adc	r23, r15
    37a0:	42 a7       	std	Z+42, r20	; 0x2a
    37a2:	53 a7       	std	Z+43, r21	; 0x2b
    37a4:	64 a7       	std	Z+44, r22	; 0x2c
    37a6:	75 a7       	std	Z+45, r23	; 0x2d
    37a8:	01 2b       	or	r16, r17
    37aa:	09 f4       	brne	.+2      	; 0x37ae <find_volume+0x368>
    37ac:	00 cf       	rjmp	.-512    	; 0x35ae <find_volume+0x168>
    37ae:	2d 8d       	ldd	r18, Y+29	; 0x1d
    37b0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    37b2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    37b4:	58 a1       	ldd	r21, Y+32	; 0x20
    37b6:	82 0f       	add	r24, r18
    37b8:	93 1f       	adc	r25, r19
    37ba:	a4 1f       	adc	r26, r20
    37bc:	b5 1f       	adc	r27, r21
    37be:	f5 01       	movw	r30, r10
    37c0:	86 a3       	std	Z+38, r24	; 0x26
    37c2:	97 a3       	std	Z+39, r25	; 0x27
    37c4:	a0 a7       	std	Z+40, r26	; 0x28
    37c6:	b1 a7       	std	Z+41, r27	; 0x29
    37c8:	f2 e0       	ldi	r31, 0x02	; 2
    37ca:	3f 16       	cp	r3, r31
    37cc:	09 f4       	brne	.+2      	; 0x37d0 <find_volume+0x38a>
    37ce:	6c c2       	rjmp	.+1240   	; 0x3ca8 <find_volume+0x862>
    37d0:	a3 e0       	ldi	r26, 0x03	; 3
    37d2:	b0 e0       	ldi	r27, 0x00	; 0
    37d4:	a3 01       	movw	r20, r6
    37d6:	92 01       	movw	r18, r4
    37d8:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__muluhisi3>
    37dc:	96 95       	lsr	r25
    37de:	87 95       	ror	r24
    37e0:	77 95       	ror	r23
    37e2:	67 95       	ror	r22
    37e4:	21 e0       	ldi	r18, 0x01	; 1
    37e6:	42 22       	and	r4, r18
    37e8:	55 24       	eor	r5, r5
    37ea:	66 24       	eor	r6, r6
    37ec:	77 24       	eor	r7, r7
    37ee:	64 0d       	add	r22, r4
    37f0:	75 1d       	adc	r23, r5
    37f2:	86 1d       	adc	r24, r6
    37f4:	97 1d       	adc	r25, r7
    37f6:	33 24       	eor	r3, r3
    37f8:	33 94       	inc	r3
    37fa:	dc 01       	movw	r26, r24
    37fc:	cb 01       	movw	r24, r22
    37fe:	81 50       	subi	r24, 0x01	; 1
    3800:	9e 4f       	sbci	r25, 0xFE	; 254
    3802:	af 4f       	sbci	r26, 0xFF	; 255
    3804:	bf 4f       	sbci	r27, 0xFF	; 255
    3806:	19 e0       	ldi	r17, 0x09	; 9
    3808:	b6 95       	lsr	r27
    380a:	a7 95       	ror	r26
    380c:	97 95       	ror	r25
    380e:	87 95       	ror	r24
    3810:	1a 95       	dec	r17
    3812:	d1 f7       	brne	.-12     	; 0x3808 <find_volume+0x3c2>
    3814:	6d 88       	ldd	r6, Y+21	; 0x15
    3816:	7e 88       	ldd	r7, Y+22	; 0x16
    3818:	8f 88       	ldd	r8, Y+23	; 0x17
    381a:	98 8c       	ldd	r9, Y+24	; 0x18
    381c:	68 16       	cp	r6, r24
    381e:	79 06       	cpc	r7, r25
    3820:	8a 06       	cpc	r8, r26
    3822:	9b 06       	cpc	r9, r27
    3824:	08 f4       	brcc	.+2      	; 0x3828 <find_volume+0x3e2>
    3826:	c3 ce       	rjmp	.-634    	; 0x35ae <find_volume+0x168>
    3828:	8f ef       	ldi	r24, 0xFF	; 255
    382a:	9f ef       	ldi	r25, 0xFF	; 255
    382c:	dc 01       	movw	r26, r24
    382e:	f5 01       	movw	r30, r10
    3830:	86 87       	std	Z+14, r24	; 0x0e
    3832:	97 87       	std	Z+15, r25	; 0x0f
    3834:	a0 8b       	std	Z+16, r26	; 0x10
    3836:	b1 8b       	std	Z+17, r27	; 0x11
    3838:	82 87       	std	Z+10, r24	; 0x0a
    383a:	93 87       	std	Z+11, r25	; 0x0b
    383c:	a4 87       	std	Z+12, r26	; 0x0c
    383e:	b5 87       	std	Z+13, r27	; 0x0d
    3840:	80 e8       	ldi	r24, 0x80	; 128
    3842:	85 83       	std	Z+5, r24	; 0x05
    3844:	f3 e0       	ldi	r31, 0x03	; 3
    3846:	3f 16       	cp	r3, r31
    3848:	09 f4       	brne	.+2      	; 0x384c <find_volume+0x406>
    384a:	e1 c1       	rjmp	.+962    	; 0x3c0e <find_volume+0x7c8>
    384c:	d5 01       	movw	r26, r10
    384e:	3c 92       	st	X, r3
    3850:	80 91 99 25 	lds	r24, 0x2599
    3854:	90 91 9a 25 	lds	r25, 0x259A
    3858:	01 96       	adiw	r24, 0x01	; 1
    385a:	80 93 99 25 	sts	0x2599, r24
    385e:	90 93 9a 25 	sts	0x259A, r25
    3862:	16 96       	adiw	r26, 0x06	; 6
    3864:	8d 93       	st	X+, r24
    3866:	9c 93       	st	X, r25
    3868:	17 97       	sbiw	r26, 0x07	; 7
    386a:	f5 01       	movw	r30, r10
    386c:	12 8a       	std	Z+18, r1	; 0x12
    386e:	13 8a       	std	Z+19, r1	; 0x13
    3870:	14 8a       	std	Z+20, r1	; 0x14
    3872:	15 8a       	std	Z+21, r1	; 0x15
    3874:	80 e0       	ldi	r24, 0x00	; 0
    3876:	3b ce       	rjmp	.-906    	; 0x34ee <find_volume+0xa8>
    3878:	95 01       	movw	r18, r10
    387a:	28 59       	subi	r18, 0x98	; 152
    387c:	3f 4f       	sbci	r19, 0xFF	; 255
    387e:	29 8b       	std	Y+17, r18	; 0x11
    3880:	3a 8b       	std	Y+18, r19	; 0x12
    3882:	f9 01       	movw	r30, r18
    3884:	80 81       	ld	r24, Z
    3886:	91 81       	ldd	r25, Z+1	; 0x01
    3888:	a2 81       	ldd	r26, Z+2	; 0x02
    388a:	b3 81       	ldd	r27, Z+3	; 0x03
    388c:	bb 27       	eor	r27, r27
    388e:	86 34       	cpi	r24, 0x46	; 70
    3890:	91 44       	sbci	r25, 0x41	; 65
    3892:	a4 45       	sbci	r26, 0x54	; 84
    3894:	b1 05       	cpc	r27, r1
    3896:	09 f4       	brne	.+2      	; 0x389a <find_volume+0x454>
    3898:	b8 c1       	rjmp	.+880    	; 0x3c0a <find_volume+0x7c4>
    389a:	24 5e       	subi	r18, 0xE4	; 228
    389c:	3f 4f       	sbci	r19, 0xFF	; 255
    389e:	2d 8b       	std	Y+21, r18	; 0x15
    38a0:	3e 8b       	std	Y+22, r19	; 0x16
    38a2:	f9 01       	movw	r30, r18
    38a4:	80 81       	ld	r24, Z
    38a6:	91 81       	ldd	r25, Z+1	; 0x01
    38a8:	a2 81       	ldd	r26, Z+2	; 0x02
    38aa:	b3 81       	ldd	r27, Z+3	; 0x03
    38ac:	bb 27       	eor	r27, r27
    38ae:	86 34       	cpi	r24, 0x46	; 70
    38b0:	91 44       	sbci	r25, 0x41	; 65
    38b2:	a4 45       	sbci	r26, 0x54	; 84
    38b4:	b1 05       	cpc	r27, r1
    38b6:	09 f4       	brne	.+2      	; 0x38ba <find_volume+0x474>
    38b8:	92 ce       	rjmp	.-732    	; 0x35de <find_volume+0x198>
    38ba:	f5 01       	movw	r30, r10
    38bc:	ec 50       	subi	r30, 0x0C	; 12
    38be:	fe 4f       	sbci	r31, 0xFE	; 254
    38c0:	80 81       	ld	r24, Z
    38c2:	88 23       	and	r24, r24
    38c4:	09 f4       	brne	.+2      	; 0x38c8 <find_volume+0x482>
    38c6:	9d c1       	rjmp	.+826    	; 0x3c02 <find_volume+0x7bc>
    38c8:	34 96       	adiw	r30, 0x04	; 4
    38ca:	80 81       	ld	r24, Z
    38cc:	91 81       	ldd	r25, Z+1	; 0x01
    38ce:	a2 81       	ldd	r26, Z+2	; 0x02
    38d0:	b3 81       	ldd	r27, Z+3	; 0x03
    38d2:	89 83       	std	Y+1, r24	; 0x01
    38d4:	9a 83       	std	Y+2, r25	; 0x02
    38d6:	ab 83       	std	Y+3, r26	; 0x03
    38d8:	bc 83       	std	Y+4, r27	; 0x04
    38da:	f5 01       	movw	r30, r10
    38dc:	ec 5f       	subi	r30, 0xFC	; 252
    38de:	fd 4f       	sbci	r31, 0xFD	; 253
    38e0:	80 81       	ld	r24, Z
    38e2:	88 23       	and	r24, r24
    38e4:	09 f4       	brne	.+2      	; 0x38e8 <find_volume+0x4a2>
    38e6:	89 c1       	rjmp	.+786    	; 0x3bfa <find_volume+0x7b4>
    38e8:	34 96       	adiw	r30, 0x04	; 4
    38ea:	80 81       	ld	r24, Z
    38ec:	91 81       	ldd	r25, Z+1	; 0x01
    38ee:	a2 81       	ldd	r26, Z+2	; 0x02
    38f0:	b3 81       	ldd	r27, Z+3	; 0x03
    38f2:	8d 83       	std	Y+5, r24	; 0x05
    38f4:	9e 83       	std	Y+6, r25	; 0x06
    38f6:	af 83       	std	Y+7, r26	; 0x07
    38f8:	b8 87       	std	Y+8, r27	; 0x08
    38fa:	f5 01       	movw	r30, r10
    38fc:	ec 5e       	subi	r30, 0xEC	; 236
    38fe:	fd 4f       	sbci	r31, 0xFD	; 253
    3900:	80 81       	ld	r24, Z
    3902:	88 23       	and	r24, r24
    3904:	09 f4       	brne	.+2      	; 0x3908 <find_volume+0x4c2>
    3906:	75 c1       	rjmp	.+746    	; 0x3bf2 <find_volume+0x7ac>
    3908:	34 96       	adiw	r30, 0x04	; 4
    390a:	80 81       	ld	r24, Z
    390c:	91 81       	ldd	r25, Z+1	; 0x01
    390e:	a2 81       	ldd	r26, Z+2	; 0x02
    3910:	b3 81       	ldd	r27, Z+3	; 0x03
    3912:	89 87       	std	Y+9, r24	; 0x09
    3914:	9a 87       	std	Y+10, r25	; 0x0a
    3916:	ab 87       	std	Y+11, r26	; 0x0b
    3918:	bc 87       	std	Y+12, r27	; 0x0c
    391a:	f5 01       	movw	r30, r10
    391c:	ec 5d       	subi	r30, 0xDC	; 220
    391e:	fd 4f       	sbci	r31, 0xFD	; 253
    3920:	80 81       	ld	r24, Z
    3922:	88 23       	and	r24, r24
    3924:	09 f4       	brne	.+2      	; 0x3928 <find_volume+0x4e2>
    3926:	61 c1       	rjmp	.+706    	; 0x3bea <find_volume+0x7a4>
    3928:	34 96       	adiw	r30, 0x04	; 4
    392a:	80 81       	ld	r24, Z
    392c:	91 81       	ldd	r25, Z+1	; 0x01
    392e:	a2 81       	ldd	r26, Z+2	; 0x02
    3930:	b3 81       	ldd	r27, Z+3	; 0x03
    3932:	8d 87       	std	Y+13, r24	; 0x0d
    3934:	9e 87       	std	Y+14, r25	; 0x0e
    3936:	af 87       	std	Y+15, r26	; 0x0f
    3938:	b8 8b       	std	Y+16, r27	; 0x10
    393a:	c9 80       	ldd	r12, Y+1	; 0x01
    393c:	da 80       	ldd	r13, Y+2	; 0x02
    393e:	eb 80       	ldd	r14, Y+3	; 0x03
    3940:	fc 80       	ldd	r15, Y+4	; 0x04
    3942:	c1 14       	cp	r12, r1
    3944:	d1 04       	cpc	r13, r1
    3946:	e1 04       	cpc	r14, r1
    3948:	f1 04       	cpc	r15, r1
    394a:	09 f0       	breq	.+2      	; 0x394e <find_volume+0x508>
    394c:	41 c0       	rjmp	.+130    	; 0x39d0 <find_volume+0x58a>
    394e:	cd 80       	ldd	r12, Y+5	; 0x05
    3950:	de 80       	ldd	r13, Y+6	; 0x06
    3952:	ef 80       	ldd	r14, Y+7	; 0x07
    3954:	f8 84       	ldd	r15, Y+8	; 0x08
    3956:	c1 14       	cp	r12, r1
    3958:	d1 04       	cpc	r13, r1
    395a:	e1 04       	cpc	r14, r1
    395c:	f1 04       	cpc	r15, r1
    395e:	09 f0       	breq	.+2      	; 0x3962 <find_volume+0x51c>
    3960:	7d c0       	rjmp	.+250    	; 0x3a5c <find_volume+0x616>
    3962:	c9 84       	ldd	r12, Y+9	; 0x09
    3964:	da 84       	ldd	r13, Y+10	; 0x0a
    3966:	eb 84       	ldd	r14, Y+11	; 0x0b
    3968:	fc 84       	ldd	r15, Y+12	; 0x0c
    396a:	c1 14       	cp	r12, r1
    396c:	d1 04       	cpc	r13, r1
    396e:	e1 04       	cpc	r14, r1
    3970:	f1 04       	cpc	r15, r1
    3972:	09 f0       	breq	.+2      	; 0x3976 <find_volume+0x530>
    3974:	53 c0       	rjmp	.+166    	; 0x3a1c <find_volume+0x5d6>
    3976:	cd 84       	ldd	r12, Y+13	; 0x0d
    3978:	de 84       	ldd	r13, Y+14	; 0x0e
    397a:	ef 84       	ldd	r14, Y+15	; 0x0f
    397c:	f8 88       	ldd	r15, Y+16	; 0x10
    397e:	c1 14       	cp	r12, r1
    3980:	d1 04       	cpc	r13, r1
    3982:	e1 04       	cpc	r14, r1
    3984:	f1 04       	cpc	r15, r1
    3986:	09 f4       	brne	.+2      	; 0x398a <find_volume+0x544>
    3988:	12 ce       	rjmp	.-988    	; 0x35ae <find_volume+0x168>
    398a:	f5 01       	movw	r30, r10
    398c:	14 82       	std	Z+4, r1	; 0x04
    398e:	66 24       	eor	r6, r6
    3990:	6a 94       	dec	r6
    3992:	76 2c       	mov	r7, r6
    3994:	43 01       	movw	r8, r6
    3996:	66 a6       	std	Z+46, r6	; 0x2e
    3998:	77 a6       	std	Z+47, r7	; 0x2f
    399a:	80 aa       	std	Z+48, r8	; 0x30
    399c:	91 aa       	std	Z+49, r9	; 0x31
    399e:	bf ef       	ldi	r27, 0xFF	; 255
    39a0:	cb 16       	cp	r12, r27
    39a2:	db 06       	cpc	r13, r27
    39a4:	eb 06       	cpc	r14, r27
    39a6:	fb 06       	cpc	r15, r27
    39a8:	09 f4       	brne	.+2      	; 0x39ac <find_volume+0x566>
    39aa:	aa c0       	rjmp	.+340    	; 0x3b00 <find_volume+0x6ba>
    39ac:	01 e0       	ldi	r16, 0x01	; 1
    39ae:	10 e0       	ldi	r17, 0x00	; 0
    39b0:	a7 01       	movw	r20, r14
    39b2:	96 01       	movw	r18, r12
    39b4:	b1 01       	movw	r22, r2
    39b6:	81 81       	ldd	r24, Z+1	; 0x01
    39b8:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    39bc:	88 23       	and	r24, r24
    39be:	09 f4       	brne	.+2      	; 0x39c2 <find_volume+0x57c>
    39c0:	98 c0       	rjmp	.+304    	; 0x3af2 <find_volume+0x6ac>
    39c2:	f5 01       	movw	r30, r10
    39c4:	66 a6       	std	Z+46, r6	; 0x2e
    39c6:	77 a6       	std	Z+47, r7	; 0x2f
    39c8:	80 aa       	std	Z+48, r8	; 0x30
    39ca:	91 aa       	std	Z+49, r9	; 0x31
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	8f cd       	rjmp	.-1250   	; 0x34ee <find_volume+0xa8>
    39d0:	d5 01       	movw	r26, r10
    39d2:	14 96       	adiw	r26, 0x04	; 4
    39d4:	1c 92       	st	X, r1
    39d6:	66 24       	eor	r6, r6
    39d8:	6a 94       	dec	r6
    39da:	76 2c       	mov	r7, r6
    39dc:	43 01       	movw	r8, r6
    39de:	f5 01       	movw	r30, r10
    39e0:	66 a6       	std	Z+46, r6	; 0x2e
    39e2:	77 a6       	std	Z+47, r7	; 0x2f
    39e4:	80 aa       	std	Z+48, r8	; 0x30
    39e6:	91 aa       	std	Z+49, r9	; 0x31
    39e8:	ff ef       	ldi	r31, 0xFF	; 255
    39ea:	cf 16       	cp	r12, r31
    39ec:	df 06       	cpc	r13, r31
    39ee:	ef 06       	cpc	r14, r31
    39f0:	ff 06       	cpc	r15, r31
    39f2:	09 f4       	brne	.+2      	; 0x39f6 <find_volume+0x5b0>
    39f4:	af c0       	rjmp	.+350    	; 0x3b54 <find_volume+0x70e>
    39f6:	01 e0       	ldi	r16, 0x01	; 1
    39f8:	10 e0       	ldi	r17, 0x00	; 0
    39fa:	a7 01       	movw	r20, r14
    39fc:	96 01       	movw	r18, r12
    39fe:	b1 01       	movw	r22, r2
    3a00:	d5 01       	movw	r26, r10
    3a02:	11 96       	adiw	r26, 0x01	; 1
    3a04:	8c 91       	ld	r24, X
    3a06:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    3a0a:	88 23       	and	r24, r24
    3a0c:	09 f4       	brne	.+2      	; 0x3a10 <find_volume+0x5ca>
    3a0e:	9b c0       	rjmp	.+310    	; 0x3b46 <find_volume+0x700>
    3a10:	f5 01       	movw	r30, r10
    3a12:	66 a6       	std	Z+46, r6	; 0x2e
    3a14:	77 a6       	std	Z+47, r7	; 0x2f
    3a16:	80 aa       	std	Z+48, r8	; 0x30
    3a18:	91 aa       	std	Z+49, r9	; 0x31
    3a1a:	99 cf       	rjmp	.-206    	; 0x394e <find_volume+0x508>
    3a1c:	f5 01       	movw	r30, r10
    3a1e:	14 82       	std	Z+4, r1	; 0x04
    3a20:	66 24       	eor	r6, r6
    3a22:	6a 94       	dec	r6
    3a24:	76 2c       	mov	r7, r6
    3a26:	43 01       	movw	r8, r6
    3a28:	66 a6       	std	Z+46, r6	; 0x2e
    3a2a:	77 a6       	std	Z+47, r7	; 0x2f
    3a2c:	80 aa       	std	Z+48, r8	; 0x30
    3a2e:	91 aa       	std	Z+49, r9	; 0x31
    3a30:	bf ef       	ldi	r27, 0xFF	; 255
    3a32:	cb 16       	cp	r12, r27
    3a34:	db 06       	cpc	r13, r27
    3a36:	eb 06       	cpc	r14, r27
    3a38:	fb 06       	cpc	r15, r27
    3a3a:	c9 f1       	breq	.+114    	; 0x3aae <find_volume+0x668>
    3a3c:	01 e0       	ldi	r16, 0x01	; 1
    3a3e:	10 e0       	ldi	r17, 0x00	; 0
    3a40:	a7 01       	movw	r20, r14
    3a42:	96 01       	movw	r18, r12
    3a44:	b1 01       	movw	r22, r2
    3a46:	81 81       	ldd	r24, Z+1	; 0x01
    3a48:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    3a4c:	88 23       	and	r24, r24
    3a4e:	41 f1       	breq	.+80     	; 0x3aa0 <find_volume+0x65a>
    3a50:	f5 01       	movw	r30, r10
    3a52:	66 a6       	std	Z+46, r6	; 0x2e
    3a54:	77 a6       	std	Z+47, r7	; 0x2f
    3a56:	80 aa       	std	Z+48, r8	; 0x30
    3a58:	91 aa       	std	Z+49, r9	; 0x31
    3a5a:	8d cf       	rjmp	.-230    	; 0x3976 <find_volume+0x530>
    3a5c:	f5 01       	movw	r30, r10
    3a5e:	14 82       	std	Z+4, r1	; 0x04
    3a60:	66 24       	eor	r6, r6
    3a62:	6a 94       	dec	r6
    3a64:	76 2c       	mov	r7, r6
    3a66:	43 01       	movw	r8, r6
    3a68:	66 a6       	std	Z+46, r6	; 0x2e
    3a6a:	77 a6       	std	Z+47, r7	; 0x2f
    3a6c:	80 aa       	std	Z+48, r8	; 0x30
    3a6e:	91 aa       	std	Z+49, r9	; 0x31
    3a70:	bf ef       	ldi	r27, 0xFF	; 255
    3a72:	cb 16       	cp	r12, r27
    3a74:	db 06       	cpc	r13, r27
    3a76:	eb 06       	cpc	r14, r27
    3a78:	fb 06       	cpc	r15, r27
    3a7a:	09 f4       	brne	.+2      	; 0x3a7e <find_volume+0x638>
    3a7c:	94 c0       	rjmp	.+296    	; 0x3ba6 <find_volume+0x760>
    3a7e:	01 e0       	ldi	r16, 0x01	; 1
    3a80:	10 e0       	ldi	r17, 0x00	; 0
    3a82:	a7 01       	movw	r20, r14
    3a84:	96 01       	movw	r18, r12
    3a86:	b1 01       	movw	r22, r2
    3a88:	81 81       	ldd	r24, Z+1	; 0x01
    3a8a:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    3a8e:	88 23       	and	r24, r24
    3a90:	09 f4       	brne	.+2      	; 0x3a94 <find_volume+0x64e>
    3a92:	82 c0       	rjmp	.+260    	; 0x3b98 <find_volume+0x752>
    3a94:	f5 01       	movw	r30, r10
    3a96:	66 a6       	std	Z+46, r6	; 0x2e
    3a98:	77 a6       	std	Z+47, r7	; 0x2f
    3a9a:	80 aa       	std	Z+48, r8	; 0x30
    3a9c:	91 aa       	std	Z+49, r9	; 0x31
    3a9e:	61 cf       	rjmp	.-318    	; 0x3962 <find_volume+0x51c>
    3aa0:	d5 01       	movw	r26, r10
    3aa2:	9e 96       	adiw	r26, 0x2e	; 46
    3aa4:	cd 92       	st	X+, r12
    3aa6:	dd 92       	st	X+, r13
    3aa8:	ed 92       	st	X+, r14
    3aaa:	fc 92       	st	X, r15
    3aac:	d1 97       	sbiw	r26, 0x31	; 49
    3aae:	f2 01       	movw	r30, r4
    3ab0:	80 81       	ld	r24, Z
    3ab2:	91 81       	ldd	r25, Z+1	; 0x01
    3ab4:	85 35       	cpi	r24, 0x55	; 85
    3ab6:	9a 4a       	sbci	r25, 0xAA	; 170
    3ab8:	09 f0       	breq	.+2      	; 0x3abc <find_volume+0x676>
    3aba:	5d cf       	rjmp	.-326    	; 0x3976 <find_volume+0x530>
    3abc:	e9 89       	ldd	r30, Y+17	; 0x11
    3abe:	fa 89       	ldd	r31, Y+18	; 0x12
    3ac0:	80 81       	ld	r24, Z
    3ac2:	91 81       	ldd	r25, Z+1	; 0x01
    3ac4:	a2 81       	ldd	r26, Z+2	; 0x02
    3ac6:	b3 81       	ldd	r27, Z+3	; 0x03
    3ac8:	bb 27       	eor	r27, r27
    3aca:	86 34       	cpi	r24, 0x46	; 70
    3acc:	91 44       	sbci	r25, 0x41	; 65
    3ace:	a4 45       	sbci	r26, 0x54	; 84
    3ad0:	b1 05       	cpc	r27, r1
    3ad2:	09 f4       	brne	.+2      	; 0x3ad6 <find_volume+0x690>
    3ad4:	87 cd       	rjmp	.-1266   	; 0x35e4 <find_volume+0x19e>
    3ad6:	ed 89       	ldd	r30, Y+21	; 0x15
    3ad8:	fe 89       	ldd	r31, Y+22	; 0x16
    3ada:	80 81       	ld	r24, Z
    3adc:	91 81       	ldd	r25, Z+1	; 0x01
    3ade:	a2 81       	ldd	r26, Z+2	; 0x02
    3ae0:	b3 81       	ldd	r27, Z+3	; 0x03
    3ae2:	bb 27       	eor	r27, r27
    3ae4:	86 34       	cpi	r24, 0x46	; 70
    3ae6:	91 44       	sbci	r25, 0x41	; 65
    3ae8:	a4 45       	sbci	r26, 0x54	; 84
    3aea:	b1 05       	cpc	r27, r1
    3aec:	09 f0       	breq	.+2      	; 0x3af0 <find_volume+0x6aa>
    3aee:	43 cf       	rjmp	.-378    	; 0x3976 <find_volume+0x530>
    3af0:	79 cd       	rjmp	.-1294   	; 0x35e4 <find_volume+0x19e>
    3af2:	d5 01       	movw	r26, r10
    3af4:	9e 96       	adiw	r26, 0x2e	; 46
    3af6:	cd 92       	st	X+, r12
    3af8:	dd 92       	st	X+, r13
    3afa:	ed 92       	st	X+, r14
    3afc:	fc 92       	st	X, r15
    3afe:	d1 97       	sbiw	r26, 0x31	; 49
    3b00:	d2 01       	movw	r26, r4
    3b02:	8d 91       	ld	r24, X+
    3b04:	9c 91       	ld	r25, X
    3b06:	85 35       	cpi	r24, 0x55	; 85
    3b08:	9a 4a       	sbci	r25, 0xAA	; 170
    3b0a:	09 f0       	breq	.+2      	; 0x3b0e <find_volume+0x6c8>
    3b0c:	50 cd       	rjmp	.-1376   	; 0x35ae <find_volume+0x168>
    3b0e:	e9 89       	ldd	r30, Y+17	; 0x11
    3b10:	fa 89       	ldd	r31, Y+18	; 0x12
    3b12:	80 81       	ld	r24, Z
    3b14:	91 81       	ldd	r25, Z+1	; 0x01
    3b16:	a2 81       	ldd	r26, Z+2	; 0x02
    3b18:	b3 81       	ldd	r27, Z+3	; 0x03
    3b1a:	bb 27       	eor	r27, r27
    3b1c:	86 34       	cpi	r24, 0x46	; 70
    3b1e:	91 44       	sbci	r25, 0x41	; 65
    3b20:	a4 45       	sbci	r26, 0x54	; 84
    3b22:	b1 05       	cpc	r27, r1
    3b24:	09 f4       	brne	.+2      	; 0x3b28 <find_volume+0x6e2>
    3b26:	5e cd       	rjmp	.-1348   	; 0x35e4 <find_volume+0x19e>
    3b28:	ed 89       	ldd	r30, Y+21	; 0x15
    3b2a:	fe 89       	ldd	r31, Y+22	; 0x16
    3b2c:	80 81       	ld	r24, Z
    3b2e:	91 81       	ldd	r25, Z+1	; 0x01
    3b30:	a2 81       	ldd	r26, Z+2	; 0x02
    3b32:	b3 81       	ldd	r27, Z+3	; 0x03
    3b34:	bb 27       	eor	r27, r27
    3b36:	86 34       	cpi	r24, 0x46	; 70
    3b38:	91 44       	sbci	r25, 0x41	; 65
    3b3a:	a4 45       	sbci	r26, 0x54	; 84
    3b3c:	b1 05       	cpc	r27, r1
    3b3e:	09 f4       	brne	.+2      	; 0x3b42 <find_volume+0x6fc>
    3b40:	51 cd       	rjmp	.-1374   	; 0x35e4 <find_volume+0x19e>
    3b42:	8d e0       	ldi	r24, 0x0D	; 13
    3b44:	d4 cc       	rjmp	.-1624   	; 0x34ee <find_volume+0xa8>
    3b46:	d5 01       	movw	r26, r10
    3b48:	9e 96       	adiw	r26, 0x2e	; 46
    3b4a:	cd 92       	st	X+, r12
    3b4c:	dd 92       	st	X+, r13
    3b4e:	ed 92       	st	X+, r14
    3b50:	fc 92       	st	X, r15
    3b52:	d1 97       	sbiw	r26, 0x31	; 49
    3b54:	d2 01       	movw	r26, r4
    3b56:	8d 91       	ld	r24, X+
    3b58:	9c 91       	ld	r25, X
    3b5a:	85 35       	cpi	r24, 0x55	; 85
    3b5c:	9a 4a       	sbci	r25, 0xAA	; 170
    3b5e:	09 f0       	breq	.+2      	; 0x3b62 <find_volume+0x71c>
    3b60:	f6 ce       	rjmp	.-532    	; 0x394e <find_volume+0x508>
    3b62:	e9 89       	ldd	r30, Y+17	; 0x11
    3b64:	fa 89       	ldd	r31, Y+18	; 0x12
    3b66:	80 81       	ld	r24, Z
    3b68:	91 81       	ldd	r25, Z+1	; 0x01
    3b6a:	a2 81       	ldd	r26, Z+2	; 0x02
    3b6c:	b3 81       	ldd	r27, Z+3	; 0x03
    3b6e:	bb 27       	eor	r27, r27
    3b70:	86 34       	cpi	r24, 0x46	; 70
    3b72:	91 44       	sbci	r25, 0x41	; 65
    3b74:	a4 45       	sbci	r26, 0x54	; 84
    3b76:	b1 05       	cpc	r27, r1
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <find_volume+0x736>
    3b7a:	34 cd       	rjmp	.-1432   	; 0x35e4 <find_volume+0x19e>
    3b7c:	ed 89       	ldd	r30, Y+21	; 0x15
    3b7e:	fe 89       	ldd	r31, Y+22	; 0x16
    3b80:	80 81       	ld	r24, Z
    3b82:	91 81       	ldd	r25, Z+1	; 0x01
    3b84:	a2 81       	ldd	r26, Z+2	; 0x02
    3b86:	b3 81       	ldd	r27, Z+3	; 0x03
    3b88:	bb 27       	eor	r27, r27
    3b8a:	86 34       	cpi	r24, 0x46	; 70
    3b8c:	91 44       	sbci	r25, 0x41	; 65
    3b8e:	a4 45       	sbci	r26, 0x54	; 84
    3b90:	b1 05       	cpc	r27, r1
    3b92:	09 f0       	breq	.+2      	; 0x3b96 <find_volume+0x750>
    3b94:	dc ce       	rjmp	.-584    	; 0x394e <find_volume+0x508>
    3b96:	26 cd       	rjmp	.-1460   	; 0x35e4 <find_volume+0x19e>
    3b98:	d5 01       	movw	r26, r10
    3b9a:	9e 96       	adiw	r26, 0x2e	; 46
    3b9c:	cd 92       	st	X+, r12
    3b9e:	dd 92       	st	X+, r13
    3ba0:	ed 92       	st	X+, r14
    3ba2:	fc 92       	st	X, r15
    3ba4:	d1 97       	sbiw	r26, 0x31	; 49
    3ba6:	f2 01       	movw	r30, r4
    3ba8:	80 81       	ld	r24, Z
    3baa:	91 81       	ldd	r25, Z+1	; 0x01
    3bac:	85 35       	cpi	r24, 0x55	; 85
    3bae:	9a 4a       	sbci	r25, 0xAA	; 170
    3bb0:	09 f0       	breq	.+2      	; 0x3bb4 <find_volume+0x76e>
    3bb2:	d7 ce       	rjmp	.-594    	; 0x3962 <find_volume+0x51c>
    3bb4:	e9 89       	ldd	r30, Y+17	; 0x11
    3bb6:	fa 89       	ldd	r31, Y+18	; 0x12
    3bb8:	80 81       	ld	r24, Z
    3bba:	91 81       	ldd	r25, Z+1	; 0x01
    3bbc:	a2 81       	ldd	r26, Z+2	; 0x02
    3bbe:	b3 81       	ldd	r27, Z+3	; 0x03
    3bc0:	bb 27       	eor	r27, r27
    3bc2:	86 34       	cpi	r24, 0x46	; 70
    3bc4:	91 44       	sbci	r25, 0x41	; 65
    3bc6:	a4 45       	sbci	r26, 0x54	; 84
    3bc8:	b1 05       	cpc	r27, r1
    3bca:	09 f4       	brne	.+2      	; 0x3bce <find_volume+0x788>
    3bcc:	0b cd       	rjmp	.-1514   	; 0x35e4 <find_volume+0x19e>
    3bce:	ed 89       	ldd	r30, Y+21	; 0x15
    3bd0:	fe 89       	ldd	r31, Y+22	; 0x16
    3bd2:	80 81       	ld	r24, Z
    3bd4:	91 81       	ldd	r25, Z+1	; 0x01
    3bd6:	a2 81       	ldd	r26, Z+2	; 0x02
    3bd8:	b3 81       	ldd	r27, Z+3	; 0x03
    3bda:	bb 27       	eor	r27, r27
    3bdc:	86 34       	cpi	r24, 0x46	; 70
    3bde:	91 44       	sbci	r25, 0x41	; 65
    3be0:	a4 45       	sbci	r26, 0x54	; 84
    3be2:	b1 05       	cpc	r27, r1
    3be4:	09 f0       	breq	.+2      	; 0x3be8 <find_volume+0x7a2>
    3be6:	bd ce       	rjmp	.-646    	; 0x3962 <find_volume+0x51c>
    3be8:	fd cc       	rjmp	.-1542   	; 0x35e4 <find_volume+0x19e>
    3bea:	80 e0       	ldi	r24, 0x00	; 0
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	dc 01       	movw	r26, r24
    3bf0:	a0 ce       	rjmp	.-704    	; 0x3932 <find_volume+0x4ec>
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	8c ce       	rjmp	.-744    	; 0x3912 <find_volume+0x4cc>
    3bfa:	80 e0       	ldi	r24, 0x00	; 0
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	dc 01       	movw	r26, r24
    3c00:	78 ce       	rjmp	.-784    	; 0x38f2 <find_volume+0x4ac>
    3c02:	80 e0       	ldi	r24, 0x00	; 0
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	dc 01       	movw	r26, r24
    3c08:	64 ce       	rjmp	.-824    	; 0x38d2 <find_volume+0x48c>
    3c0a:	80 e0       	ldi	r24, 0x00	; 0
    3c0c:	c8 cc       	rjmp	.-1648   	; 0x359e <find_volume+0x158>
    3c0e:	f5 01       	movw	r30, r10
    3c10:	ee 59       	subi	r30, 0x9E	; 158
    3c12:	ff 4f       	sbci	r31, 0xFF	; 255
    3c14:	80 81       	ld	r24, Z
    3c16:	91 81       	ldd	r25, Z+1	; 0x01
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	09 f0       	breq	.+2      	; 0x3c1e <find_volume+0x7d8>
    3c1c:	17 ce       	rjmp	.-978    	; 0x384c <find_volume+0x406>
    3c1e:	b7 01       	movw	r22, r14
    3c20:	a6 01       	movw	r20, r12
    3c22:	4f 5f       	subi	r20, 0xFF	; 255
    3c24:	5f 4f       	sbci	r21, 0xFF	; 255
    3c26:	6f 4f       	sbci	r22, 0xFF	; 255
    3c28:	7f 4f       	sbci	r23, 0xFF	; 255
    3c2a:	c5 01       	movw	r24, r10
    3c2c:	0e 94 d4 06 	call	0xda8	; 0xda8 <move_window>
    3c30:	81 11       	cpse	r24, r1
    3c32:	0c ce       	rjmp	.-1000   	; 0x384c <find_volume+0x406>
    3c34:	d5 01       	movw	r26, r10
    3c36:	15 96       	adiw	r26, 0x05	; 5
    3c38:	1c 92       	st	X, r1
    3c3a:	f5 01       	movw	r30, r10
    3c3c:	e0 5d       	subi	r30, 0xD0	; 208
    3c3e:	fd 4f       	sbci	r31, 0xFD	; 253
    3c40:	80 81       	ld	r24, Z
    3c42:	91 81       	ldd	r25, Z+1	; 0x01
    3c44:	85 35       	cpi	r24, 0x55	; 85
    3c46:	9a 4a       	sbci	r25, 0xAA	; 170
    3c48:	09 f0       	breq	.+2      	; 0x3c4c <find_volume+0x806>
    3c4a:	00 ce       	rjmp	.-1024   	; 0x384c <find_volume+0x406>
    3c4c:	f5 01       	movw	r30, r10
    3c4e:	82 a9       	ldd	r24, Z+50	; 0x32
    3c50:	93 a9       	ldd	r25, Z+51	; 0x33
    3c52:	a4 a9       	ldd	r26, Z+52	; 0x34
    3c54:	b5 a9       	ldd	r27, Z+53	; 0x35
    3c56:	82 35       	cpi	r24, 0x52	; 82
    3c58:	92 45       	sbci	r25, 0x52	; 82
    3c5a:	a1 46       	sbci	r26, 0x61	; 97
    3c5c:	b1 44       	sbci	r27, 0x41	; 65
    3c5e:	09 f0       	breq	.+2      	; 0x3c62 <find_volume+0x81c>
    3c60:	f5 cd       	rjmp	.-1046   	; 0x384c <find_volume+0x406>
    3c62:	f5 01       	movw	r30, r10
    3c64:	ea 5e       	subi	r30, 0xEA	; 234
    3c66:	fd 4f       	sbci	r31, 0xFD	; 253
    3c68:	80 81       	ld	r24, Z
    3c6a:	91 81       	ldd	r25, Z+1	; 0x01
    3c6c:	a2 81       	ldd	r26, Z+2	; 0x02
    3c6e:	b3 81       	ldd	r27, Z+3	; 0x03
    3c70:	82 37       	cpi	r24, 0x72	; 114
    3c72:	92 47       	sbci	r25, 0x72	; 114
    3c74:	a1 44       	sbci	r26, 0x41	; 65
    3c76:	b1 46       	sbci	r27, 0x61	; 97
    3c78:	09 f0       	breq	.+2      	; 0x3c7c <find_volume+0x836>
    3c7a:	e8 cd       	rjmp	.-1072   	; 0x384c <find_volume+0x406>
    3c7c:	34 96       	adiw	r30, 0x04	; 4
    3c7e:	80 81       	ld	r24, Z
    3c80:	91 81       	ldd	r25, Z+1	; 0x01
    3c82:	a2 81       	ldd	r26, Z+2	; 0x02
    3c84:	b3 81       	ldd	r27, Z+3	; 0x03
    3c86:	f5 01       	movw	r30, r10
    3c88:	86 87       	std	Z+14, r24	; 0x0e
    3c8a:	97 87       	std	Z+15, r25	; 0x0f
    3c8c:	a0 8b       	std	Z+16, r26	; 0x10
    3c8e:	b1 8b       	std	Z+17, r27	; 0x11
    3c90:	e2 5e       	subi	r30, 0xE2	; 226
    3c92:	fd 4f       	sbci	r31, 0xFD	; 253
    3c94:	80 81       	ld	r24, Z
    3c96:	91 81       	ldd	r25, Z+1	; 0x01
    3c98:	a2 81       	ldd	r26, Z+2	; 0x02
    3c9a:	b3 81       	ldd	r27, Z+3	; 0x03
    3c9c:	f5 01       	movw	r30, r10
    3c9e:	82 87       	std	Z+10, r24	; 0x0a
    3ca0:	93 87       	std	Z+11, r25	; 0x0b
    3ca2:	a4 87       	std	Z+12, r26	; 0x0c
    3ca4:	b5 87       	std	Z+13, r27	; 0x0d
    3ca6:	d2 cd       	rjmp	.-1116   	; 0x384c <find_volume+0x406>
    3ca8:	c3 01       	movw	r24, r6
    3caa:	b2 01       	movw	r22, r4
    3cac:	66 0f       	add	r22, r22
    3cae:	77 1f       	adc	r23, r23
    3cb0:	88 1f       	adc	r24, r24
    3cb2:	99 1f       	adc	r25, r25
    3cb4:	a2 cd       	rjmp	.-1212   	; 0x37fa <find_volume+0x3b4>
    3cb6:	29 01       	movw	r4, r18
    3cb8:	3a 01       	movw	r6, r20
    3cba:	b2 e0       	ldi	r27, 0x02	; 2
    3cbc:	4b 0e       	add	r4, r27
    3cbe:	51 1c       	adc	r5, r1
    3cc0:	61 1c       	adc	r6, r1
    3cc2:	71 1c       	adc	r7, r1
    3cc4:	f5 01       	movw	r30, r10
    3cc6:	46 8a       	std	Z+22, r4	; 0x16
    3cc8:	57 8a       	std	Z+23, r5	; 0x17
    3cca:	60 8e       	std	Z+24, r6	; 0x18
    3ccc:	71 8e       	std	Z+25, r7	; 0x19
    3cce:	c6 8e       	std	Z+30, r12	; 0x1e
    3cd0:	d7 8e       	std	Z+31, r13	; 0x1f
    3cd2:	e0 a2       	std	Z+32, r14	; 0x20
    3cd4:	f1 a2       	std	Z+33, r15	; 0x21
    3cd6:	89 8d       	ldd	r24, Y+25	; 0x19
    3cd8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3cda:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3cdc:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3cde:	8c 0d       	add	r24, r12
    3ce0:	9d 1d       	adc	r25, r13
    3ce2:	ae 1d       	adc	r26, r14
    3ce4:	bf 1d       	adc	r27, r15
    3ce6:	82 a3       	std	Z+34, r24	; 0x22
    3ce8:	93 a3       	std	Z+35, r25	; 0x23
    3cea:	a4 a3       	std	Z+36, r26	; 0x24
    3cec:	b5 a3       	std	Z+37, r27	; 0x25
    3cee:	89 89       	ldd	r24, Y+17	; 0x11
    3cf0:	9a 89       	ldd	r25, Y+18	; 0x12
    3cf2:	ab 89       	ldd	r26, Y+19	; 0x13
    3cf4:	bc 89       	ldd	r27, Y+20	; 0x14
    3cf6:	8c 0d       	add	r24, r12
    3cf8:	9d 1d       	adc	r25, r13
    3cfa:	ae 1d       	adc	r26, r14
    3cfc:	bf 1d       	adc	r27, r15
    3cfe:	82 a7       	std	Z+42, r24	; 0x2a
    3d00:	93 a7       	std	Z+43, r25	; 0x2b
    3d02:	a4 a7       	std	Z+44, r26	; 0x2c
    3d04:	b5 a7       	std	Z+45, r27	; 0x2d
    3d06:	01 2b       	or	r16, r17
    3d08:	09 f0       	breq	.+2      	; 0x3d0c <find_volume+0x8c6>
    3d0a:	51 cc       	rjmp	.-1886   	; 0x35ae <find_volume+0x168>
    3d0c:	f5 01       	movw	r30, r10
    3d0e:	e2 5a       	subi	r30, 0xA2	; 162
    3d10:	ff 4f       	sbci	r31, 0xFF	; 255
    3d12:	80 81       	ld	r24, Z
    3d14:	91 81       	ldd	r25, Z+1	; 0x01
    3d16:	a2 81       	ldd	r26, Z+2	; 0x02
    3d18:	b3 81       	ldd	r27, Z+3	; 0x03
    3d1a:	f5 01       	movw	r30, r10
    3d1c:	86 a3       	std	Z+38, r24	; 0x26
    3d1e:	97 a3       	std	Z+39, r25	; 0x27
    3d20:	a0 a7       	std	Z+40, r26	; 0x28
    3d22:	b1 a7       	std	Z+41, r27	; 0x29
    3d24:	c3 01       	movw	r24, r6
    3d26:	b2 01       	movw	r22, r4
    3d28:	66 0f       	add	r22, r22
    3d2a:	77 1f       	adc	r23, r23
    3d2c:	88 1f       	adc	r24, r24
    3d2e:	99 1f       	adc	r25, r25
    3d30:	66 0f       	add	r22, r22
    3d32:	77 1f       	adc	r23, r23
    3d34:	88 1f       	adc	r24, r24
    3d36:	99 1f       	adc	r25, r25
    3d38:	43 e0       	ldi	r20, 0x03	; 3
    3d3a:	34 2e       	mov	r3, r20
    3d3c:	5e cd       	rjmp	.-1348   	; 0x37fa <find_volume+0x3b4>
    3d3e:	33 24       	eor	r3, r3
    3d40:	33 94       	inc	r3
    3d42:	07 cd       	rjmp	.-1522   	; 0x3752 <find_volume+0x30c>

00003d44 <f_mount>:
    3d44:	cf 93       	push	r28
    3d46:	df 93       	push	r29
    3d48:	00 d0       	rcall	.+0      	; 0x3d4a <f_mount+0x6>
    3d4a:	00 d0       	rcall	.+0      	; 0x3d4c <f_mount+0x8>
    3d4c:	cd b7       	in	r28, 0x3d	; 61
    3d4e:	de b7       	in	r29, 0x3e	; 62
    3d50:	89 83       	std	Y+1, r24	; 0x01
    3d52:	9a 83       	std	Y+2, r25	; 0x02
    3d54:	6b 83       	std	Y+3, r22	; 0x03
    3d56:	7c 83       	std	Y+4, r23	; 0x04
    3d58:	e6 2f       	mov	r30, r22
    3d5a:	f7 2f       	mov	r31, r23
    3d5c:	30 97       	sbiw	r30, 0x00	; 0
    3d5e:	a1 f1       	breq	.+104    	; 0x3dc8 <f_mount+0x84>
    3d60:	60 81       	ld	r22, Z
    3d62:	61 32       	cpi	r22, 0x21	; 33
    3d64:	68 f0       	brcs	.+26     	; 0x3d80 <f_mount+0x3c>
    3d66:	6a 33       	cpi	r22, 0x3A	; 58
    3d68:	79 f1       	breq	.+94     	; 0x3dc8 <f_mount+0x84>
    3d6a:	9f 01       	movw	r18, r30
    3d6c:	2f 5f       	subi	r18, 0xFF	; 255
    3d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3d70:	f9 01       	movw	r30, r18
    3d72:	02 c0       	rjmp	.+4      	; 0x3d78 <f_mount+0x34>
    3d74:	5a 33       	cpi	r21, 0x3A	; 58
    3d76:	29 f1       	breq	.+74     	; 0x3dc2 <f_mount+0x7e>
    3d78:	cf 01       	movw	r24, r30
    3d7a:	51 91       	ld	r21, Z+
    3d7c:	51 32       	cpi	r21, 0x21	; 33
    3d7e:	d0 f7       	brcc	.-12     	; 0x3d74 <f_mount+0x30>
    3d80:	80 91 98 25 	lds	r24, 0x2598
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	88 0f       	add	r24, r24
    3d88:	99 1f       	adc	r25, r25
    3d8a:	fc 01       	movw	r30, r24
    3d8c:	e5 56       	subi	r30, 0x65	; 101
    3d8e:	fa 4d       	sbci	r31, 0xDA	; 218
    3d90:	01 90       	ld	r0, Z+
    3d92:	f0 81       	ld	r31, Z
    3d94:	e0 2d       	mov	r30, r0
    3d96:	30 97       	sbiw	r30, 0x00	; 0
    3d98:	09 f0       	breq	.+2      	; 0x3d9c <f_mount+0x58>
    3d9a:	10 82       	st	Z, r1
    3d9c:	e9 81       	ldd	r30, Y+1	; 0x01
    3d9e:	fa 81       	ldd	r31, Y+2	; 0x02
    3da0:	30 97       	sbiw	r30, 0x00	; 0
    3da2:	31 f1       	breq	.+76     	; 0x3df0 <f_mount+0xac>
    3da4:	10 82       	st	Z, r1
    3da6:	dc 01       	movw	r26, r24
    3da8:	a5 56       	subi	r26, 0x65	; 101
    3daa:	ba 4d       	sbci	r27, 0xDA	; 218
    3dac:	ed 93       	st	X+, r30
    3dae:	fc 93       	st	X, r31
    3db0:	41 30       	cpi	r20, 0x01	; 1
    3db2:	89 f0       	breq	.+34     	; 0x3dd6 <f_mount+0x92>
    3db4:	80 e0       	ldi	r24, 0x00	; 0
    3db6:	24 96       	adiw	r28, 0x04	; 4
    3db8:	cd bf       	out	0x3d, r28	; 61
    3dba:	de bf       	out	0x3e, r29	; 62
    3dbc:	df 91       	pop	r29
    3dbe:	cf 91       	pop	r28
    3dc0:	08 95       	ret
    3dc2:	82 17       	cp	r24, r18
    3dc4:	93 07       	cpc	r25, r19
    3dc6:	d9 f0       	breq	.+54     	; 0x3dfe <f_mount+0xba>
    3dc8:	8b e0       	ldi	r24, 0x0B	; 11
    3dca:	24 96       	adiw	r28, 0x04	; 4
    3dcc:	cd bf       	out	0x3d, r28	; 61
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	df 91       	pop	r29
    3dd2:	cf 91       	pop	r28
    3dd4:	08 95       	ret
    3dd6:	40 e0       	ldi	r20, 0x00	; 0
    3dd8:	be 01       	movw	r22, r28
    3dda:	6d 5f       	subi	r22, 0xFD	; 253
    3ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    3dde:	ce 01       	movw	r24, r28
    3de0:	01 96       	adiw	r24, 0x01	; 1
    3de2:	31 db       	rcall	.-2462   	; 0x3446 <find_volume>
    3de4:	24 96       	adiw	r28, 0x04	; 4
    3de6:	cd bf       	out	0x3d, r28	; 61
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	df 91       	pop	r29
    3dec:	cf 91       	pop	r28
    3dee:	08 95       	ret
    3df0:	fc 01       	movw	r30, r24
    3df2:	e5 56       	subi	r30, 0x65	; 101
    3df4:	fa 4d       	sbci	r31, 0xDA	; 218
    3df6:	10 82       	st	Z, r1
    3df8:	11 82       	std	Z+1, r1	; 0x01
    3dfa:	80 e0       	ldi	r24, 0x00	; 0
    3dfc:	dc cf       	rjmp	.-72     	; 0x3db6 <f_mount+0x72>
    3dfe:	80 ed       	ldi	r24, 0xD0	; 208
    3e00:	86 0f       	add	r24, r22
    3e02:	82 30       	cpi	r24, 0x02	; 2
    3e04:	08 f7       	brcc	.-62     	; 0x3dc8 <f_mount+0x84>
    3e06:	86 2f       	mov	r24, r22
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	c0 97       	sbiw	r24, 0x30	; 48
    3e0c:	bc cf       	rjmp	.-136    	; 0x3d86 <f_mount+0x42>

00003e0e <f_open>:
    3e0e:	2f 92       	push	r2
    3e10:	3f 92       	push	r3
    3e12:	4f 92       	push	r4
    3e14:	5f 92       	push	r5
    3e16:	6f 92       	push	r6
    3e18:	7f 92       	push	r7
    3e1a:	8f 92       	push	r8
    3e1c:	9f 92       	push	r9
    3e1e:	af 92       	push	r10
    3e20:	bf 92       	push	r11
    3e22:	cf 92       	push	r12
    3e24:	df 92       	push	r13
    3e26:	ef 92       	push	r14
    3e28:	ff 92       	push	r15
    3e2a:	0f 93       	push	r16
    3e2c:	1f 93       	push	r17
    3e2e:	cf 93       	push	r28
    3e30:	df 93       	push	r29
    3e32:	cd b7       	in	r28, 0x3d	; 61
    3e34:	de b7       	in	r29, 0x3e	; 62
    3e36:	c4 54       	subi	r28, 0x44	; 68
    3e38:	d1 09       	sbc	r29, r1
    3e3a:	cd bf       	out	0x3d, r28	; 61
    3e3c:	de bf       	out	0x3e, r29	; 62
    3e3e:	6c 01       	movw	r12, r24
    3e40:	5b 01       	movw	r10, r22
    3e42:	94 2e       	mov	r9, r20
    3e44:	00 97       	sbiw	r24, 0x00	; 0
    3e46:	09 f4       	brne	.+2      	; 0x3e4a <f_open+0x3c>
    3e48:	56 c0       	rjmp	.+172    	; 0x3ef6 <f_open+0xe8>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	1d 92       	st	X+, r1
    3e4e:	1c 92       	st	X, r1
    3e50:	61 15       	cp	r22, r1
    3e52:	71 05       	cpc	r23, r1
    3e54:	c1 f1       	breq	.+112    	; 0x3ec6 <f_open+0xb8>
    3e56:	fb 01       	movw	r30, r22
    3e58:	00 81       	ld	r16, Z
    3e5a:	01 32       	cpi	r16, 0x21	; 33
    3e5c:	68 f0       	brcs	.+26     	; 0x3e78 <f_open+0x6a>
    3e5e:	0a 33       	cpi	r16, 0x3A	; 58
    3e60:	91 f1       	breq	.+100    	; 0x3ec6 <f_open+0xb8>
    3e62:	9b 01       	movw	r18, r22
    3e64:	2f 5f       	subi	r18, 0xFF	; 255
    3e66:	3f 4f       	sbci	r19, 0xFF	; 255
    3e68:	f9 01       	movw	r30, r18
    3e6a:	02 c0       	rjmp	.+4      	; 0x3e70 <f_open+0x62>
    3e6c:	4a 33       	cpi	r20, 0x3A	; 58
    3e6e:	39 f1       	breq	.+78     	; 0x3ebe <f_open+0xb0>
    3e70:	cf 01       	movw	r24, r30
    3e72:	41 91       	ld	r20, Z+
    3e74:	41 32       	cpi	r20, 0x21	; 33
    3e76:	d0 f7       	brcc	.-12     	; 0x3e6c <f_open+0x5e>
    3e78:	00 91 98 25 	lds	r16, 0x2598
    3e7c:	10 e0       	ldi	r17, 0x00	; 0
    3e7e:	f8 01       	movw	r30, r16
    3e80:	ee 0f       	add	r30, r30
    3e82:	ff 1f       	adc	r31, r31
    3e84:	e5 56       	subi	r30, 0x65	; 101
    3e86:	fa 4d       	sbci	r31, 0xDA	; 218
    3e88:	20 80       	ld	r2, Z
    3e8a:	31 80       	ldd	r3, Z+1	; 0x01
    3e8c:	21 14       	cp	r2, r1
    3e8e:	31 04       	cpc	r3, r1
    3e90:	f1 f1       	breq	.+124    	; 0x3f0e <f_open+0x100>
    3e92:	29 2d       	mov	r18, r9
    3e94:	2e 71       	andi	r18, 0x1E	; 30
    3e96:	f2 2e       	mov	r15, r18
    3e98:	29 82       	std	Y+1, r2	; 0x01
    3e9a:	3a 82       	std	Y+2, r3	; 0x02
    3e9c:	d1 01       	movw	r26, r2
    3e9e:	8c 91       	ld	r24, X
    3ea0:	88 23       	and	r24, r24
    3ea2:	59 f1       	breq	.+86     	; 0x3efa <f_open+0xec>
    3ea4:	11 96       	adiw	r26, 0x01	; 1
    3ea6:	8c 91       	ld	r24, X
    3ea8:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <disk_status>
    3eac:	80 fd       	sbrc	r24, 0
    3eae:	25 c0       	rjmp	.+74     	; 0x3efa <f_open+0xec>
    3eb0:	ff 20       	and	r15, r15
    3eb2:	09 f4       	brne	.+2      	; 0x3eb6 <f_open+0xa8>
    3eb4:	be c1       	rjmp	.+892    	; 0x4232 <f_open+0x424>
    3eb6:	82 ff       	sbrs	r24, 2
    3eb8:	bc c1       	rjmp	.+888    	; 0x4232 <f_open+0x424>
    3eba:	8a e0       	ldi	r24, 0x0A	; 10
    3ebc:	05 c0       	rjmp	.+10     	; 0x3ec8 <f_open+0xba>
    3ebe:	28 17       	cp	r18, r24
    3ec0:	39 07       	cpc	r19, r25
    3ec2:	09 f4       	brne	.+2      	; 0x3ec6 <f_open+0xb8>
    3ec4:	58 c0       	rjmp	.+176    	; 0x3f76 <f_open+0x168>
    3ec6:	8b e0       	ldi	r24, 0x0B	; 11
    3ec8:	cc 5b       	subi	r28, 0xBC	; 188
    3eca:	df 4f       	sbci	r29, 0xFF	; 255
    3ecc:	cd bf       	out	0x3d, r28	; 61
    3ece:	de bf       	out	0x3e, r29	; 62
    3ed0:	df 91       	pop	r29
    3ed2:	cf 91       	pop	r28
    3ed4:	1f 91       	pop	r17
    3ed6:	0f 91       	pop	r16
    3ed8:	ff 90       	pop	r15
    3eda:	ef 90       	pop	r14
    3edc:	df 90       	pop	r13
    3ede:	cf 90       	pop	r12
    3ee0:	bf 90       	pop	r11
    3ee2:	af 90       	pop	r10
    3ee4:	9f 90       	pop	r9
    3ee6:	8f 90       	pop	r8
    3ee8:	7f 90       	pop	r7
    3eea:	6f 90       	pop	r6
    3eec:	5f 90       	pop	r5
    3eee:	4f 90       	pop	r4
    3ef0:	3f 90       	pop	r3
    3ef2:	2f 90       	pop	r2
    3ef4:	08 95       	ret
    3ef6:	89 e0       	ldi	r24, 0x09	; 9
    3ef8:	e7 cf       	rjmp	.-50     	; 0x3ec8 <f_open+0xba>
    3efa:	f1 01       	movw	r30, r2
    3efc:	10 82       	st	Z, r1
    3efe:	01 83       	std	Z+1, r16	; 0x01
    3f00:	80 2f       	mov	r24, r16
    3f02:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <disk_initialize>
    3f06:	80 ff       	sbrs	r24, 0
    3f08:	04 c0       	rjmp	.+8      	; 0x3f12 <f_open+0x104>
    3f0a:	83 e0       	ldi	r24, 0x03	; 3
    3f0c:	dd cf       	rjmp	.-70     	; 0x3ec8 <f_open+0xba>
    3f0e:	8c e0       	ldi	r24, 0x0C	; 12
    3f10:	db cf       	rjmp	.-74     	; 0x3ec8 <f_open+0xba>
    3f12:	ff 20       	and	r15, r15
    3f14:	11 f0       	breq	.+4      	; 0x3f1a <f_open+0x10c>
    3f16:	82 fd       	sbrc	r24, 2
    3f18:	d0 cf       	rjmp	.-96     	; 0x3eba <f_open+0xac>
    3f1a:	d1 01       	movw	r26, r2
    3f1c:	14 96       	adiw	r26, 0x04	; 4
    3f1e:	1c 92       	st	X, r1
    3f20:	14 97       	sbiw	r26, 0x04	; 4
    3f22:	44 24       	eor	r4, r4
    3f24:	4a 94       	dec	r4
    3f26:	54 2c       	mov	r5, r4
    3f28:	32 01       	movw	r6, r4
    3f2a:	f1 01       	movw	r30, r2
    3f2c:	46 a6       	std	Z+46, r4	; 0x2e
    3f2e:	57 a6       	std	Z+47, r5	; 0x2f
    3f30:	60 aa       	std	Z+48, r6	; 0x30
    3f32:	71 aa       	std	Z+49, r7	; 0x31
    3f34:	71 01       	movw	r14, r2
    3f36:	f2 e3       	ldi	r31, 0x32	; 50
    3f38:	ef 0e       	add	r14, r31
    3f3a:	f1 1c       	adc	r15, r1
    3f3c:	01 e0       	ldi	r16, 0x01	; 1
    3f3e:	10 e0       	ldi	r17, 0x00	; 0
    3f40:	20 e0       	ldi	r18, 0x00	; 0
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	a9 01       	movw	r20, r18
    3f46:	b7 01       	movw	r22, r14
    3f48:	11 96       	adiw	r26, 0x01	; 1
    3f4a:	8c 91       	ld	r24, X
    3f4c:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    3f50:	88 23       	and	r24, r24
    3f52:	09 f4       	brne	.+2      	; 0x3f56 <f_open+0x148>
    3f54:	70 c3       	rjmp	.+1760   	; 0x4636 <f_open+0x828>
    3f56:	f1 01       	movw	r30, r2
    3f58:	46 a6       	std	Z+46, r4	; 0x2e
    3f5a:	57 a6       	std	Z+47, r5	; 0x2f
    3f5c:	60 aa       	std	Z+48, r6	; 0x30
    3f5e:	71 aa       	std	Z+49, r7	; 0x31
    3f60:	83 e0       	ldi	r24, 0x03	; 3
    3f62:	41 2c       	mov	r4, r1
    3f64:	51 2c       	mov	r5, r1
    3f66:	32 01       	movw	r6, r4
    3f68:	83 30       	cpi	r24, 0x03	; 3
    3f6a:	09 f4       	brne	.+2      	; 0x3f6e <f_open+0x160>
    3f6c:	2c c4       	rjmp	.+2136   	; 0x47c6 <f_open+0x9b8>
    3f6e:	88 23       	and	r24, r24
    3f70:	89 f0       	breq	.+34     	; 0x3f94 <f_open+0x186>
    3f72:	8d e0       	ldi	r24, 0x0D	; 13
    3f74:	a9 cf       	rjmp	.-174    	; 0x3ec8 <f_open+0xba>
    3f76:	80 ed       	ldi	r24, 0xD0	; 208
    3f78:	80 0f       	add	r24, r16
    3f7a:	82 30       	cpi	r24, 0x02	; 2
    3f7c:	08 f0       	brcs	.+2      	; 0x3f80 <f_open+0x172>
    3f7e:	a3 cf       	rjmp	.-186    	; 0x3ec6 <f_open+0xb8>
    3f80:	10 e0       	ldi	r17, 0x00	; 0
    3f82:	00 53       	subi	r16, 0x30	; 48
    3f84:	11 09       	sbc	r17, r1
    3f86:	f2 e0       	ldi	r31, 0x02	; 2
    3f88:	af 0e       	add	r10, r31
    3f8a:	b1 1c       	adc	r11, r1
    3f8c:	78 cf       	rjmp	.-272    	; 0x3e7e <f_open+0x70>
    3f8e:	41 2c       	mov	r4, r1
    3f90:	51 2c       	mov	r5, r1
    3f92:	32 01       	movw	r6, r4
    3f94:	d1 01       	movw	r26, r2
    3f96:	dd 96       	adiw	r26, 0x3d	; 61
    3f98:	8d 91       	ld	r24, X+
    3f9a:	9c 91       	ld	r25, X
    3f9c:	de 97       	sbiw	r26, 0x3e	; 62
    3f9e:	81 15       	cp	r24, r1
    3fa0:	92 40       	sbci	r25, 0x02	; 2
    3fa2:	39 f7       	brne	.-50     	; 0x3f72 <f_open+0x164>
    3fa4:	f1 01       	movw	r30, r2
    3fa6:	e8 5b       	subi	r30, 0xB8	; 184
    3fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3faa:	80 81       	ld	r24, Z
    3fac:	91 81       	ldd	r25, Z+1	; 0x01
    3fae:	7c 01       	movw	r14, r24
    3fb0:	00 e0       	ldi	r16, 0x00	; 0
    3fb2:	10 e0       	ldi	r17, 0x00	; 0
    3fb4:	ef a2       	std	Y+39, r14	; 0x27
    3fb6:	f8 a6       	std	Y+40, r15	; 0x28
    3fb8:	09 a7       	std	Y+41, r16	; 0x29
    3fba:	1a a7       	std	Y+42, r17	; 0x2a
    3fbc:	e1 14       	cp	r14, r1
    3fbe:	f1 04       	cpc	r15, r1
    3fc0:	01 05       	cpc	r16, r1
    3fc2:	11 05       	cpc	r17, r1
    3fc4:	59 f4       	brne	.+22     	; 0x3fdc <f_open+0x1ce>
    3fc6:	3e 96       	adiw	r30, 0x0e	; 14
    3fc8:	00 81       	ld	r16, Z
    3fca:	11 81       	ldd	r17, Z+1	; 0x01
    3fcc:	22 81       	ldd	r18, Z+2	; 0x02
    3fce:	33 81       	ldd	r19, Z+3	; 0x03
    3fd0:	0f a3       	std	Y+39, r16	; 0x27
    3fd2:	18 a7       	std	Y+40, r17	; 0x28
    3fd4:	29 a7       	std	Y+41, r18	; 0x29
    3fd6:	3a a7       	std	Y+42, r19	; 0x2a
    3fd8:	78 01       	movw	r14, r16
    3fda:	89 01       	movw	r16, r18
    3fdc:	d1 01       	movw	r26, r2
    3fde:	5a 96       	adiw	r26, 0x1a	; 26
    3fe0:	ed 92       	st	X+, r14
    3fe2:	fd 92       	st	X+, r15
    3fe4:	0d 93       	st	X+, r16
    3fe6:	1c 93       	st	X, r17
    3fe8:	5d 97       	sbiw	r26, 0x1d	; 29
    3fea:	f1 01       	movw	r30, r2
    3fec:	ee 5b       	subi	r30, 0xBE	; 190
    3fee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff0:	a0 81       	ld	r26, Z
    3ff2:	f1 01       	movw	r30, r2
    3ff4:	a3 83       	std	Z+3, r26	; 0x03
    3ff6:	8f ef       	ldi	r24, 0xFF	; 255
    3ff8:	8a 0f       	add	r24, r26
    3ffa:	82 30       	cpi	r24, 0x02	; 2
    3ffc:	08 f0       	brcs	.+2      	; 0x4000 <f_open+0x1f2>
    3ffe:	b9 cf       	rjmp	.-142    	; 0x3f72 <f_open+0x164>
    4000:	b0 e0       	ldi	r27, 0x00	; 0
    4002:	a8 01       	movw	r20, r16
    4004:	97 01       	movw	r18, r14
    4006:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__muluhisi3>
    400a:	6f ab       	std	Y+55, r22	; 0x37
    400c:	78 af       	std	Y+56, r23	; 0x38
    400e:	89 af       	std	Y+57, r24	; 0x39
    4010:	9a af       	std	Y+58, r25	; 0x3a
    4012:	27 ad       	ldd	r18, Z+63	; 0x3f
    4014:	22 83       	std	Z+2, r18	; 0x02
    4016:	22 23       	and	r18, r18
    4018:	09 f4       	brne	.+2      	; 0x401c <f_open+0x20e>
    401a:	ab cf       	rjmp	.-170    	; 0x3f72 <f_open+0x164>
    401c:	42 2f       	mov	r20, r18
    401e:	50 e0       	ldi	r21, 0x00	; 0
    4020:	ca 01       	movw	r24, r20
    4022:	01 97       	sbiw	r24, 0x01	; 1
    4024:	84 23       	and	r24, r20
    4026:	95 23       	and	r25, r21
    4028:	89 2b       	or	r24, r25
    402a:	09 f0       	breq	.+2      	; 0x402e <f_open+0x220>
    402c:	a2 cf       	rjmp	.-188    	; 0x3f72 <f_open+0x164>
    402e:	ed 5b       	subi	r30, 0xBD	; 189
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	e0 80       	ld	r14, Z
    4034:	f1 80       	ldd	r15, Z+1	; 0x01
    4036:	ef a6       	std	Y+47, r14	; 0x2f
    4038:	f8 aa       	std	Y+48, r15	; 0x30
    403a:	d1 01       	movw	r26, r2
    403c:	18 96       	adiw	r26, 0x08	; 8
    403e:	ed 92       	st	X+, r14
    4040:	fc 92       	st	X, r15
    4042:	19 97       	sbiw	r26, 0x09	; 9
    4044:	c7 01       	movw	r24, r14
    4046:	8f 70       	andi	r24, 0x0F	; 15
    4048:	99 27       	eor	r25, r25
    404a:	89 2b       	or	r24, r25
    404c:	09 f0       	breq	.+2      	; 0x4050 <f_open+0x242>
    404e:	91 cf       	rjmp	.-222    	; 0x3f72 <f_open+0x164>
    4050:	32 96       	adiw	r30, 0x02	; 2
    4052:	60 81       	ld	r22, Z
    4054:	71 81       	ldd	r23, Z+1	; 0x01
    4056:	cb 01       	movw	r24, r22
    4058:	a0 e0       	ldi	r26, 0x00	; 0
    405a:	b0 e0       	ldi	r27, 0x00	; 0
    405c:	00 97       	sbiw	r24, 0x00	; 0
    405e:	a1 05       	cpc	r26, r1
    4060:	b1 05       	cpc	r27, r1
    4062:	29 f4       	brne	.+10     	; 0x406e <f_open+0x260>
    4064:	3d 96       	adiw	r30, 0x0d	; 13
    4066:	80 81       	ld	r24, Z
    4068:	91 81       	ldd	r25, Z+1	; 0x01
    406a:	a2 81       	ldd	r26, Z+2	; 0x02
    406c:	b3 81       	ldd	r27, Z+3	; 0x03
    406e:	f1 01       	movw	r30, r2
    4070:	e0 5c       	subi	r30, 0xC0	; 192
    4072:	ff 4f       	sbci	r31, 0xFF	; 255
    4074:	40 81       	ld	r20, Z
    4076:	51 81       	ldd	r21, Z+1	; 0x01
    4078:	41 15       	cp	r20, r1
    407a:	51 05       	cpc	r21, r1
    407c:	09 f4       	brne	.+2      	; 0x4080 <f_open+0x272>
    407e:	79 cf       	rjmp	.-270    	; 0x3f72 <f_open+0x164>
    4080:	7a 01       	movw	r14, r20
    4082:	00 e0       	ldi	r16, 0x00	; 0
    4084:	10 e0       	ldi	r17, 0x00	; 0
    4086:	eb aa       	std	Y+51, r14	; 0x33
    4088:	fc aa       	std	Y+52, r15	; 0x34
    408a:	0d ab       	std	Y+53, r16	; 0x35
    408c:	1e ab       	std	Y+54, r17	; 0x36
    408e:	4f a5       	ldd	r20, Y+47	; 0x2f
    4090:	58 a9       	ldd	r21, Y+48	; 0x30
    4092:	52 95       	swap	r21
    4094:	42 95       	swap	r20
    4096:	4f 70       	andi	r20, 0x0F	; 15
    4098:	45 27       	eor	r20, r21
    409a:	5f 70       	andi	r21, 0x0F	; 15
    409c:	45 27       	eor	r20, r21
    409e:	e4 0e       	add	r14, r20
    40a0:	f5 1e       	adc	r15, r21
    40a2:	01 1d       	adc	r16, r1
    40a4:	11 1d       	adc	r17, r1
    40a6:	4f a9       	ldd	r20, Y+55	; 0x37
    40a8:	58 ad       	ldd	r21, Y+56	; 0x38
    40aa:	69 ad       	ldd	r22, Y+57	; 0x39
    40ac:	7a ad       	ldd	r23, Y+58	; 0x3a
    40ae:	e4 0e       	add	r14, r20
    40b0:	f5 1e       	adc	r15, r21
    40b2:	06 1f       	adc	r16, r22
    40b4:	17 1f       	adc	r17, r23
    40b6:	8e 15       	cp	r24, r14
    40b8:	9f 05       	cpc	r25, r15
    40ba:	a0 07       	cpc	r26, r16
    40bc:	b1 07       	cpc	r27, r17
    40be:	08 f4       	brcc	.+2      	; 0x40c2 <f_open+0x2b4>
    40c0:	58 cf       	rjmp	.-336    	; 0x3f72 <f_open+0x164>
    40c2:	bc 01       	movw	r22, r24
    40c4:	cd 01       	movw	r24, r26
    40c6:	6e 19       	sub	r22, r14
    40c8:	7f 09       	sbc	r23, r15
    40ca:	80 0b       	sbc	r24, r16
    40cc:	91 0b       	sbc	r25, r17
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	40 e0       	ldi	r20, 0x00	; 0
    40d2:	50 e0       	ldi	r21, 0x00	; 0
    40d4:	0e 94 d0 3e 	call	0x7da0	; 0x7da0 <__udivmodsi4>
    40d8:	21 15       	cp	r18, r1
    40da:	31 05       	cpc	r19, r1
    40dc:	41 05       	cpc	r20, r1
    40de:	51 05       	cpc	r21, r1
    40e0:	09 f4       	brne	.+2      	; 0x40e4 <f_open+0x2d6>
    40e2:	47 cf       	rjmp	.-370    	; 0x3f72 <f_open+0x164>
    40e4:	26 3f       	cpi	r18, 0xF6	; 246
    40e6:	6f e0       	ldi	r22, 0x0F	; 15
    40e8:	36 07       	cpc	r19, r22
    40ea:	41 05       	cpc	r20, r1
    40ec:	51 05       	cpc	r21, r1
    40ee:	08 f4       	brcc	.+2      	; 0x40f2 <f_open+0x2e4>
    40f0:	ab c7       	rjmp	.+3926   	; 0x5048 <f_open+0x123a>
    40f2:	26 3f       	cpi	r18, 0xF6	; 246
    40f4:	7f ef       	ldi	r23, 0xFF	; 255
    40f6:	37 07       	cpc	r19, r23
    40f8:	41 05       	cpc	r20, r1
    40fa:	51 05       	cpc	r21, r1
    40fc:	08 f0       	brcs	.+2      	; 0x4100 <f_open+0x2f2>
    40fe:	5d c7       	rjmp	.+3770   	; 0x4fba <f_open+0x11ac>
    4100:	82 e0       	ldi	r24, 0x02	; 2
    4102:	88 2e       	mov	r8, r24
    4104:	ca 01       	movw	r24, r20
    4106:	b9 01       	movw	r22, r18
    4108:	6e 5f       	subi	r22, 0xFE	; 254
    410a:	7f 4f       	sbci	r23, 0xFF	; 255
    410c:	8f 4f       	sbci	r24, 0xFF	; 255
    410e:	9f 4f       	sbci	r25, 0xFF	; 255
    4110:	6b a7       	std	Y+43, r22	; 0x2b
    4112:	7c a7       	std	Y+44, r23	; 0x2c
    4114:	8d a7       	std	Y+45, r24	; 0x2d
    4116:	9e a7       	std	Y+46, r25	; 0x2e
    4118:	d1 01       	movw	r26, r2
    411a:	56 96       	adiw	r26, 0x16	; 22
    411c:	6d 93       	st	X+, r22
    411e:	7d 93       	st	X+, r23
    4120:	8d 93       	st	X+, r24
    4122:	9c 93       	st	X, r25
    4124:	59 97       	sbiw	r26, 0x19	; 25
    4126:	f1 01       	movw	r30, r2
    4128:	46 8e       	std	Z+30, r4	; 0x1e
    412a:	57 8e       	std	Z+31, r5	; 0x1f
    412c:	60 a2       	std	Z+32, r6	; 0x20
    412e:	71 a2       	std	Z+33, r7	; 0x21
    4130:	8b a9       	ldd	r24, Y+51	; 0x33
    4132:	9c a9       	ldd	r25, Y+52	; 0x34
    4134:	ad a9       	ldd	r26, Y+53	; 0x35
    4136:	be a9       	ldd	r27, Y+54	; 0x36
    4138:	84 0d       	add	r24, r4
    413a:	95 1d       	adc	r25, r5
    413c:	a6 1d       	adc	r26, r6
    413e:	b7 1d       	adc	r27, r7
    4140:	82 a3       	std	Z+34, r24	; 0x22
    4142:	93 a3       	std	Z+35, r25	; 0x23
    4144:	a4 a3       	std	Z+36, r26	; 0x24
    4146:	b5 a3       	std	Z+37, r27	; 0x25
    4148:	b8 01       	movw	r22, r16
    414a:	a7 01       	movw	r20, r14
    414c:	44 0d       	add	r20, r4
    414e:	55 1d       	adc	r21, r5
    4150:	66 1d       	adc	r22, r6
    4152:	77 1d       	adc	r23, r7
    4154:	42 a7       	std	Z+42, r20	; 0x2a
    4156:	53 a7       	std	Z+43, r21	; 0x2b
    4158:	64 a7       	std	Z+44, r22	; 0x2c
    415a:	75 a7       	std	Z+45, r23	; 0x2d
    415c:	ef a4       	ldd	r14, Y+47	; 0x2f
    415e:	f8 a8       	ldd	r15, Y+48	; 0x30
    4160:	ef 28       	or	r14, r15
    4162:	09 f4       	brne	.+2      	; 0x4166 <f_open+0x358>
    4164:	06 cf       	rjmp	.-500    	; 0x3f72 <f_open+0x164>
    4166:	ef a8       	ldd	r14, Y+55	; 0x37
    4168:	f8 ac       	ldd	r15, Y+56	; 0x38
    416a:	09 ad       	ldd	r16, Y+57	; 0x39
    416c:	1a ad       	ldd	r17, Y+58	; 0x3a
    416e:	8e 0d       	add	r24, r14
    4170:	9f 1d       	adc	r25, r15
    4172:	a0 1f       	adc	r26, r16
    4174:	b1 1f       	adc	r27, r17
    4176:	f1 01       	movw	r30, r2
    4178:	86 a3       	std	Z+38, r24	; 0x26
    417a:	97 a3       	std	Z+39, r25	; 0x27
    417c:	a0 a7       	std	Z+40, r26	; 0x28
    417e:	b1 a7       	std	Z+41, r27	; 0x29
    4180:	f2 e0       	ldi	r31, 0x02	; 2
    4182:	8f 16       	cp	r8, r31
    4184:	09 f4       	brne	.+2      	; 0x4188 <f_open+0x37a>
    4186:	10 c7       	rjmp	.+3616   	; 0x4fa8 <f_open+0x119a>
    4188:	a3 e0       	ldi	r26, 0x03	; 3
    418a:	b0 e0       	ldi	r27, 0x00	; 0
    418c:	2b a5       	ldd	r18, Y+43	; 0x2b
    418e:	3c a5       	ldd	r19, Y+44	; 0x2c
    4190:	4d a5       	ldd	r20, Y+45	; 0x2d
    4192:	5e a5       	ldd	r21, Y+46	; 0x2e
    4194:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__muluhisi3>
    4198:	96 95       	lsr	r25
    419a:	87 95       	ror	r24
    419c:	77 95       	ror	r23
    419e:	67 95       	ror	r22
    41a0:	89 01       	movw	r16, r18
    41a2:	9a 01       	movw	r18, r20
    41a4:	01 70       	andi	r16, 0x01	; 1
    41a6:	11 27       	eor	r17, r17
    41a8:	22 27       	eor	r18, r18
    41aa:	33 27       	eor	r19, r19
    41ac:	60 0f       	add	r22, r16
    41ae:	71 1f       	adc	r23, r17
    41b0:	82 1f       	adc	r24, r18
    41b2:	93 1f       	adc	r25, r19
    41b4:	88 24       	eor	r8, r8
    41b6:	83 94       	inc	r8
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	81 50       	subi	r24, 0x01	; 1
    41be:	9e 4f       	sbci	r25, 0xFE	; 254
    41c0:	af 4f       	sbci	r26, 0xFF	; 255
    41c2:	bf 4f       	sbci	r27, 0xFF	; 255
    41c4:	e9 e0       	ldi	r30, 0x09	; 9
    41c6:	b6 95       	lsr	r27
    41c8:	a7 95       	ror	r26
    41ca:	97 95       	ror	r25
    41cc:	87 95       	ror	r24
    41ce:	ea 95       	dec	r30
    41d0:	d1 f7       	brne	.-12     	; 0x41c6 <f_open+0x3b8>
    41d2:	ef a0       	ldd	r14, Y+39	; 0x27
    41d4:	f8 a4       	ldd	r15, Y+40	; 0x28
    41d6:	09 a5       	ldd	r16, Y+41	; 0x29
    41d8:	1a a5       	ldd	r17, Y+42	; 0x2a
    41da:	e8 16       	cp	r14, r24
    41dc:	f9 06       	cpc	r15, r25
    41de:	0a 07       	cpc	r16, r26
    41e0:	1b 07       	cpc	r17, r27
    41e2:	08 f4       	brcc	.+2      	; 0x41e6 <f_open+0x3d8>
    41e4:	c6 ce       	rjmp	.-628    	; 0x3f72 <f_open+0x164>
    41e6:	8f ef       	ldi	r24, 0xFF	; 255
    41e8:	9f ef       	ldi	r25, 0xFF	; 255
    41ea:	dc 01       	movw	r26, r24
    41ec:	f1 01       	movw	r30, r2
    41ee:	86 87       	std	Z+14, r24	; 0x0e
    41f0:	97 87       	std	Z+15, r25	; 0x0f
    41f2:	a0 8b       	std	Z+16, r26	; 0x10
    41f4:	b1 8b       	std	Z+17, r27	; 0x11
    41f6:	82 87       	std	Z+10, r24	; 0x0a
    41f8:	93 87       	std	Z+11, r25	; 0x0b
    41fa:	a4 87       	std	Z+12, r26	; 0x0c
    41fc:	b5 87       	std	Z+13, r27	; 0x0d
    41fe:	80 e8       	ldi	r24, 0x80	; 128
    4200:	85 83       	std	Z+5, r24	; 0x05
    4202:	f3 e0       	ldi	r31, 0x03	; 3
    4204:	8f 16       	cp	r8, r31
    4206:	09 f4       	brne	.+2      	; 0x420a <f_open+0x3fc>
    4208:	82 c6       	rjmp	.+3332   	; 0x4f0e <f_open+0x1100>
    420a:	d1 01       	movw	r26, r2
    420c:	8c 92       	st	X, r8
    420e:	80 91 99 25 	lds	r24, 0x2599
    4212:	90 91 9a 25 	lds	r25, 0x259A
    4216:	01 96       	adiw	r24, 0x01	; 1
    4218:	80 93 99 25 	sts	0x2599, r24
    421c:	90 93 9a 25 	sts	0x259A, r25
    4220:	16 96       	adiw	r26, 0x06	; 6
    4222:	8d 93       	st	X+, r24
    4224:	9c 93       	st	X, r25
    4226:	17 97       	sbiw	r26, 0x07	; 7
    4228:	f1 01       	movw	r30, r2
    422a:	12 8a       	std	Z+18, r1	; 0x12
    422c:	13 8a       	std	Z+19, r1	; 0x13
    422e:	14 8a       	std	Z+20, r1	; 0x14
    4230:	15 8a       	std	Z+21, r1	; 0x15
    4232:	09 2d       	mov	r16, r9
    4234:	0f 71       	andi	r16, 0x1F	; 31
    4236:	0f a3       	std	Y+39, r16	; 0x27
    4238:	ce 01       	movw	r24, r28
    423a:	47 96       	adiw	r24, 0x17	; 23
    423c:	8d 8b       	std	Y+21, r24	; 0x15
    423e:	9e 8b       	std	Y+22, r25	; 0x16
    4240:	b5 01       	movw	r22, r10
    4242:	46 97       	sbiw	r24, 0x16	; 22
    4244:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <follow_path>
    4248:	2b 88       	ldd	r2, Y+19	; 0x13
    424a:	3c 88       	ldd	r3, Y+20	; 0x14
    424c:	88 23       	and	r24, r24
    424e:	09 f4       	brne	.+2      	; 0x4252 <f_open+0x444>
    4250:	6f c1       	rjmp	.+734    	; 0x4530 <f_open+0x722>
    4252:	99 2d       	mov	r25, r9
    4254:	9c 71       	andi	r25, 0x1C	; 28
    4256:	09 f4       	brne	.+2      	; 0x425a <f_open+0x44c>
    4258:	37 ce       	rjmp	.-914    	; 0x3ec8 <f_open+0xba>
    425a:	84 30       	cpi	r24, 0x04	; 4
    425c:	09 f0       	breq	.+2      	; 0x4260 <f_open+0x452>
    425e:	34 ce       	rjmp	.-920    	; 0x3ec8 <f_open+0xba>
    4260:	ce 01       	movw	r24, r28
    4262:	01 96       	adiw	r24, 0x01	; 1
    4264:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <dir_register>
    4268:	ff a1       	ldd	r31, Y+39	; 0x27
    426a:	f8 60       	ori	r31, 0x08	; 8
    426c:	ff a3       	std	Y+39, r31	; 0x27
    426e:	2b 88       	ldd	r2, Y+19	; 0x13
    4270:	3c 88       	ldd	r3, Y+20	; 0x14
    4272:	81 11       	cpse	r24, r1
    4274:	29 ce       	rjmp	.-942    	; 0x3ec8 <f_open+0xba>
    4276:	ef a0       	ldd	r14, Y+39	; 0x27
    4278:	e3 fe       	sbrs	r14, 3
    427a:	d9 c1       	rjmp	.+946    	; 0x462e <f_open+0x820>
    427c:	80 e0       	ldi	r24, 0x00	; 0
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	af e4       	ldi	r26, 0x4F	; 79
    4282:	b5 e4       	ldi	r27, 0x45	; 69
    4284:	f1 01       	movw	r30, r2
    4286:	86 87       	std	Z+14, r24	; 0x0e
    4288:	97 87       	std	Z+15, r25	; 0x0f
    428a:	a0 8b       	std	Z+16, r26	; 0x10
    428c:	b1 8b       	std	Z+17, r27	; 0x11
    428e:	13 86       	std	Z+11, r1	; 0x0b
    4290:	14 8e       	std	Z+28, r1	; 0x1c
    4292:	15 8e       	std	Z+29, r1	; 0x1d
    4294:	16 8e       	std	Z+30, r1	; 0x1e
    4296:	17 8e       	std	Z+31, r1	; 0x1f
    4298:	e9 80       	ldd	r14, Y+1	; 0x01
    429a:	fa 80       	ldd	r15, Y+2	; 0x02
    429c:	82 8d       	ldd	r24, Z+26	; 0x1a
    429e:	93 8d       	ldd	r25, Z+27	; 0x1b
    42a0:	8c 01       	movw	r16, r24
    42a2:	20 e0       	ldi	r18, 0x00	; 0
    42a4:	30 e0       	ldi	r19, 0x00	; 0
    42a6:	0f a7       	std	Y+47, r16	; 0x2f
    42a8:	18 ab       	std	Y+48, r17	; 0x30
    42aa:	29 ab       	std	Y+49, r18	; 0x31
    42ac:	3a ab       	std	Y+50, r19	; 0x32
    42ae:	d7 01       	movw	r26, r14
    42b0:	8c 91       	ld	r24, X
    42b2:	83 30       	cpi	r24, 0x03	; 3
    42b4:	09 f4       	brne	.+2      	; 0x42b8 <f_open+0x4aa>
    42b6:	89 c2       	rjmp	.+1298   	; 0x47ca <f_open+0x9bc>
    42b8:	d1 01       	movw	r26, r2
    42ba:	5a 96       	adiw	r26, 0x1a	; 26
    42bc:	1d 92       	st	X+, r1
    42be:	1c 92       	st	X, r1
    42c0:	5b 97       	sbiw	r26, 0x1b	; 27
    42c2:	54 96       	adiw	r26, 0x14	; 20
    42c4:	1d 92       	st	X+, r1
    42c6:	1c 92       	st	X, r1
    42c8:	55 97       	sbiw	r26, 0x15	; 21
    42ca:	81 e0       	ldi	r24, 0x01	; 1
    42cc:	f7 01       	movw	r30, r14
    42ce:	84 83       	std	Z+4, r24	; 0x04
    42d0:	01 2b       	or	r16, r17
    42d2:	02 2b       	or	r16, r18
    42d4:	03 2b       	or	r16, r19
    42d6:	09 f4       	brne	.+2      	; 0x42da <f_open+0x4cc>
    42d8:	4a c1       	rjmp	.+660    	; 0x456e <f_open+0x760>
    42da:	26 a5       	ldd	r18, Z+46	; 0x2e
    42dc:	37 a5       	ldd	r19, Z+47	; 0x2f
    42de:	40 a9       	ldd	r20, Z+48	; 0x30
    42e0:	51 a9       	ldd	r21, Z+49	; 0x31
    42e2:	2f ab       	std	Y+55, r18	; 0x37
    42e4:	38 af       	std	Y+56, r19	; 0x38
    42e6:	49 af       	std	Y+57, r20	; 0x39
    42e8:	5a af       	std	Y+58, r21	; 0x3a
    42ea:	0f a5       	ldd	r16, Y+47	; 0x2f
    42ec:	18 a9       	ldd	r17, Y+48	; 0x30
    42ee:	29 a9       	ldd	r18, Y+49	; 0x31
    42f0:	3a a9       	ldd	r19, Y+50	; 0x32
    42f2:	02 30       	cpi	r16, 0x02	; 2
    42f4:	11 05       	cpc	r17, r1
    42f6:	21 05       	cpc	r18, r1
    42f8:	31 05       	cpc	r19, r1
    42fa:	48 f0       	brcs	.+18     	; 0x430e <f_open+0x500>
    42fc:	86 89       	ldd	r24, Z+22	; 0x16
    42fe:	97 89       	ldd	r25, Z+23	; 0x17
    4300:	a0 8d       	ldd	r26, Z+24	; 0x18
    4302:	b1 8d       	ldd	r27, Z+25	; 0x19
    4304:	08 17       	cp	r16, r24
    4306:	19 07       	cpc	r17, r25
    4308:	2a 07       	cpc	r18, r26
    430a:	3b 07       	cpc	r19, r27
    430c:	10 f0       	brcs	.+4      	; 0x4312 <f_open+0x504>
    430e:	82 e0       	ldi	r24, 0x02	; 2
    4310:	db cd       	rjmp	.-1098   	; 0x3ec8 <f_open+0xba>
    4312:	0b a7       	std	Y+43, r16	; 0x2b
    4314:	1c a7       	std	Y+44, r17	; 0x2c
    4316:	2d a7       	std	Y+45, r18	; 0x2d
    4318:	3e a7       	std	Y+46, r19	; 0x2e
    431a:	87 01       	movw	r16, r14
    431c:	0e 5c       	subi	r16, 0xCE	; 206
    431e:	1f 4f       	sbci	r17, 0xFF	; 255
    4320:	23 96       	adiw	r28, 0x03	; 3
    4322:	2e ae       	std	Y+62, r2	; 0x3e
    4324:	3f ae       	std	Y+63, r3	; 0x3f
    4326:	23 97       	sbiw	r28, 0x03	; 3
    4328:	57 01       	movw	r10, r14
    432a:	25 96       	adiw	r28, 0x05	; 5
    432c:	ce ae       	std	Y+62, r12	; 0x3e
    432e:	df ae       	std	Y+63, r13	; 0x3f
    4330:	25 97       	sbiw	r28, 0x05	; 5
    4332:	cb a4       	ldd	r12, Y+43	; 0x2b
    4334:	dc a4       	ldd	r13, Y+44	; 0x2c
    4336:	ed a4       	ldd	r14, Y+45	; 0x2d
    4338:	fe a4       	ldd	r15, Y+46	; 0x2e
    433a:	18 01       	movw	r2, r16
    433c:	27 c0       	rjmp	.+78     	; 0x438c <f_open+0x57e>
    433e:	00 e0       	ldi	r16, 0x00	; 0
    4340:	10 e0       	ldi	r17, 0x00	; 0
    4342:	98 01       	movw	r18, r16
    4344:	b7 01       	movw	r22, r14
    4346:	a6 01       	movw	r20, r12
    4348:	c5 01       	movw	r24, r10
    434a:	0e 94 23 08 	call	0x1046	; 0x1046 <put_fat.part.6>
    434e:	81 11       	cpse	r24, r1
    4350:	bb cd       	rjmp	.-1162   	; 0x3ec8 <f_open+0xba>
    4352:	f5 01       	movw	r30, r10
    4354:	86 85       	ldd	r24, Z+14	; 0x0e
    4356:	97 85       	ldd	r25, Z+15	; 0x0f
    4358:	a0 89       	ldd	r26, Z+16	; 0x10
    435a:	b1 89       	ldd	r27, Z+17	; 0x11
    435c:	8f 3f       	cpi	r24, 0xFF	; 255
    435e:	ff ef       	ldi	r31, 0xFF	; 255
    4360:	9f 07       	cpc	r25, r31
    4362:	af 07       	cpc	r26, r31
    4364:	bf 07       	cpc	r27, r31
    4366:	59 f0       	breq	.+22     	; 0x437e <f_open+0x570>
    4368:	01 96       	adiw	r24, 0x01	; 1
    436a:	a1 1d       	adc	r26, r1
    436c:	b1 1d       	adc	r27, r1
    436e:	f5 01       	movw	r30, r10
    4370:	86 87       	std	Z+14, r24	; 0x0e
    4372:	97 87       	std	Z+15, r25	; 0x0f
    4374:	a0 8b       	std	Z+16, r26	; 0x10
    4376:	b1 8b       	std	Z+17, r27	; 0x11
    4378:	85 81       	ldd	r24, Z+5	; 0x05
    437a:	81 60       	ori	r24, 0x01	; 1
    437c:	85 83       	std	Z+5, r24	; 0x05
    437e:	f5 01       	movw	r30, r10
    4380:	86 89       	ldd	r24, Z+22	; 0x16
    4382:	97 89       	ldd	r25, Z+23	; 0x17
    4384:	a0 8d       	ldd	r26, Z+24	; 0x18
    4386:	b1 8d       	ldd	r27, Z+25	; 0x19
    4388:	73 01       	movw	r14, r6
    438a:	62 01       	movw	r12, r4
    438c:	c8 16       	cp	r12, r24
    438e:	d9 06       	cpc	r13, r25
    4390:	ea 06       	cpc	r14, r26
    4392:	fb 06       	cpc	r15, r27
    4394:	08 f0       	brcs	.+2      	; 0x4398 <f_open+0x58a>
    4396:	ae c4       	rjmp	.+2396   	; 0x4cf4 <f_open+0xee6>
    4398:	12 e0       	ldi	r17, 0x02	; 2
    439a:	c1 16       	cp	r12, r17
    439c:	d1 04       	cpc	r13, r1
    439e:	e1 04       	cpc	r14, r1
    43a0:	f1 04       	cpc	r15, r1
    43a2:	08 f4       	brcc	.+2      	; 0x43a6 <f_open+0x598>
    43a4:	b4 cf       	rjmp	.-152    	; 0x430e <f_open+0x500>
    43a6:	d5 01       	movw	r26, r10
    43a8:	8c 91       	ld	r24, X
    43aa:	82 30       	cpi	r24, 0x02	; 2
    43ac:	09 f4       	brne	.+2      	; 0x43b0 <f_open+0x5a2>
    43ae:	70 c2       	rjmp	.+1248   	; 0x4890 <f_open+0xa82>
    43b0:	83 30       	cpi	r24, 0x03	; 3
    43b2:	09 f4       	brne	.+2      	; 0x43b6 <f_open+0x5a8>
    43b4:	1a c2       	rjmp	.+1076   	; 0x47ea <f_open+0x9dc>
    43b6:	81 30       	cpi	r24, 0x01	; 1
    43b8:	09 f0       	breq	.+2      	; 0x43bc <f_open+0x5ae>
    43ba:	a9 cf       	rjmp	.-174    	; 0x430e <f_open+0x500>
    43bc:	f6 01       	movw	r30, r12
    43be:	f6 95       	lsr	r31
    43c0:	e7 95       	ror	r30
    43c2:	ec 0d       	add	r30, r12
    43c4:	fd 1d       	adc	r31, r13
    43c6:	eb ab       	std	Y+51, r30	; 0x33
    43c8:	fc ab       	std	Y+52, r31	; 0x34
    43ca:	92 96       	adiw	r26, 0x22	; 34
    43cc:	8d 91       	ld	r24, X+
    43ce:	9d 91       	ld	r25, X+
    43d0:	0d 90       	ld	r0, X+
    43d2:	bc 91       	ld	r27, X
    43d4:	a0 2d       	mov	r26, r0
    43d6:	9f 01       	movw	r18, r30
    43d8:	23 2f       	mov	r18, r19
    43da:	33 27       	eor	r19, r19
    43dc:	26 95       	lsr	r18
    43de:	2c 01       	movw	r4, r24
    43e0:	3d 01       	movw	r6, r26
    43e2:	42 0e       	add	r4, r18
    43e4:	53 1e       	adc	r5, r19
    43e6:	61 1c       	adc	r6, r1
    43e8:	71 1c       	adc	r7, r1
    43ea:	f5 01       	movw	r30, r10
    43ec:	06 a5       	ldd	r16, Z+46	; 0x2e
    43ee:	17 a5       	ldd	r17, Z+47	; 0x2f
    43f0:	20 a9       	ldd	r18, Z+48	; 0x30
    43f2:	31 a9       	ldd	r19, Z+49	; 0x31
    43f4:	0b a7       	std	Y+43, r16	; 0x2b
    43f6:	1c a7       	std	Y+44, r17	; 0x2c
    43f8:	2d a7       	std	Y+45, r18	; 0x2d
    43fa:	3e a7       	std	Y+46, r19	; 0x2e
    43fc:	40 16       	cp	r4, r16
    43fe:	51 06       	cpc	r5, r17
    4400:	62 06       	cpc	r6, r18
    4402:	73 06       	cpc	r7, r19
    4404:	09 f4       	brne	.+2      	; 0x4408 <f_open+0x5fa>
    4406:	1e c4       	rjmp	.+2108   	; 0x4c44 <f_open+0xe36>
    4408:	84 81       	ldd	r24, Z+4	; 0x04
    440a:	81 11       	cpse	r24, r1
    440c:	cc c3       	rjmp	.+1944   	; 0x4ba6 <f_open+0xd98>
    440e:	01 e0       	ldi	r16, 0x01	; 1
    4410:	10 e0       	ldi	r17, 0x00	; 0
    4412:	a3 01       	movw	r20, r6
    4414:	92 01       	movw	r18, r4
    4416:	b1 01       	movw	r22, r2
    4418:	d5 01       	movw	r26, r10
    441a:	11 96       	adiw	r26, 0x01	; 1
    441c:	8c 91       	ld	r24, X
    441e:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    4422:	81 11       	cpse	r24, r1
    4424:	01 c3       	rjmp	.+1538   	; 0x4a28 <f_open+0xc1a>
    4426:	d5 01       	movw	r26, r10
    4428:	9e 96       	adiw	r26, 0x2e	; 46
    442a:	4d 92       	st	X+, r4
    442c:	5d 92       	st	X+, r5
    442e:	6d 92       	st	X+, r6
    4430:	7c 92       	st	X, r7
    4432:	d1 97       	sbiw	r26, 0x31	; 49
    4434:	92 96       	adiw	r26, 0x22	; 34
    4436:	8d 91       	ld	r24, X+
    4438:	9d 91       	ld	r25, X+
    443a:	0d 90       	ld	r0, X+
    443c:	bc 91       	ld	r27, X
    443e:	a0 2d       	mov	r26, r0
    4440:	4b ae       	std	Y+59, r4	; 0x3b
    4442:	5c ae       	std	Y+60, r5	; 0x3c
    4444:	6d ae       	std	Y+61, r6	; 0x3d
    4446:	7e ae       	std	Y+62, r7	; 0x3e
    4448:	eb a9       	ldd	r30, Y+51	; 0x33
    444a:	fc a9       	ldd	r31, Y+52	; 0x34
    444c:	31 96       	adiw	r30, 0x01	; 1
    444e:	21 96       	adiw	r28, 0x01	; 1
    4450:	ee af       	std	Y+62, r30	; 0x3e
    4452:	ff af       	std	Y+63, r31	; 0x3f
    4454:	21 97       	sbiw	r28, 0x01	; 1
    4456:	eb a9       	ldd	r30, Y+51	; 0x33
    4458:	fc a9       	ldd	r31, Y+52	; 0x34
    445a:	f1 70       	andi	r31, 0x01	; 1
    445c:	ea 0d       	add	r30, r10
    445e:	fb 1d       	adc	r31, r11
    4460:	02 a9       	ldd	r16, Z+50	; 0x32
    4462:	0b ab       	std	Y+51, r16	; 0x33
    4464:	21 96       	adiw	r28, 0x01	; 1
    4466:	2e ad       	ldd	r18, Y+62	; 0x3e
    4468:	3f ad       	ldd	r19, Y+63	; 0x3f
    446a:	21 97       	sbiw	r28, 0x01	; 1
    446c:	23 2f       	mov	r18, r19
    446e:	33 27       	eor	r19, r19
    4470:	26 95       	lsr	r18
    4472:	ac 01       	movw	r20, r24
    4474:	bd 01       	movw	r22, r26
    4476:	42 0f       	add	r20, r18
    4478:	53 1f       	adc	r21, r19
    447a:	61 1d       	adc	r22, r1
    447c:	71 1d       	adc	r23, r1
    447e:	4b a7       	std	Y+43, r20	; 0x2b
    4480:	5c a7       	std	Y+44, r21	; 0x2c
    4482:	6d a7       	std	Y+45, r22	; 0x2d
    4484:	7e a7       	std	Y+46, r23	; 0x2e
    4486:	44 16       	cp	r4, r20
    4488:	55 06       	cpc	r5, r21
    448a:	66 06       	cpc	r6, r22
    448c:	77 06       	cpc	r7, r23
    448e:	f9 f0       	breq	.+62     	; 0x44ce <f_open+0x6c0>
    4490:	d5 01       	movw	r26, r10
    4492:	14 96       	adiw	r26, 0x04	; 4
    4494:	8c 91       	ld	r24, X
    4496:	14 97       	sbiw	r26, 0x04	; 4
    4498:	81 11       	cpse	r24, r1
    449a:	f5 c4       	rjmp	.+2538   	; 0x4e86 <f_open+0x1078>
    449c:	01 e0       	ldi	r16, 0x01	; 1
    449e:	10 e0       	ldi	r17, 0x00	; 0
    44a0:	2b a5       	ldd	r18, Y+43	; 0x2b
    44a2:	3c a5       	ldd	r19, Y+44	; 0x2c
    44a4:	4d a5       	ldd	r20, Y+45	; 0x2d
    44a6:	5e a5       	ldd	r21, Y+46	; 0x2e
    44a8:	b1 01       	movw	r22, r2
    44aa:	d5 01       	movw	r26, r10
    44ac:	11 96       	adiw	r26, 0x01	; 1
    44ae:	8c 91       	ld	r24, X
    44b0:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    44b4:	81 11       	cpse	r24, r1
    44b6:	b8 c2       	rjmp	.+1392   	; 0x4a28 <f_open+0xc1a>
    44b8:	0b a5       	ldd	r16, Y+43	; 0x2b
    44ba:	1c a5       	ldd	r17, Y+44	; 0x2c
    44bc:	2d a5       	ldd	r18, Y+45	; 0x2d
    44be:	3e a5       	ldd	r19, Y+46	; 0x2e
    44c0:	d5 01       	movw	r26, r10
    44c2:	9e 96       	adiw	r26, 0x2e	; 46
    44c4:	0d 93       	st	X+, r16
    44c6:	1d 93       	st	X+, r17
    44c8:	2d 93       	st	X+, r18
    44ca:	3c 93       	st	X, r19
    44cc:	d1 97       	sbiw	r26, 0x31	; 49
    44ce:	21 96       	adiw	r28, 0x01	; 1
    44d0:	ee ad       	ldd	r30, Y+62	; 0x3e
    44d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    44d4:	21 97       	sbiw	r28, 0x01	; 1
    44d6:	f1 70       	andi	r31, 0x01	; 1
    44d8:	ea 0d       	add	r30, r10
    44da:	fb 1d       	adc	r31, r11
    44dc:	82 a9       	ldd	r24, Z+50	; 0x32
    44de:	9b a9       	ldd	r25, Y+51	; 0x33
    44e0:	49 2e       	mov	r4, r25
    44e2:	51 2c       	mov	r5, r1
    44e4:	58 2a       	or	r5, r24
    44e6:	c0 fe       	sbrs	r12, 0
    44e8:	c9 c4       	rjmp	.+2450   	; 0x4e7c <f_open+0x106e>
    44ea:	52 94       	swap	r5
    44ec:	42 94       	swap	r4
    44ee:	8f e0       	ldi	r24, 0x0F	; 15
    44f0:	48 22       	and	r4, r24
    44f2:	45 24       	eor	r4, r5
    44f4:	58 22       	and	r5, r24
    44f6:	45 24       	eor	r4, r5
    44f8:	61 2c       	mov	r6, r1
    44fa:	71 2c       	mov	r7, r1
    44fc:	41 14       	cp	r4, r1
    44fe:	51 04       	cpc	r5, r1
    4500:	61 04       	cpc	r6, r1
    4502:	71 04       	cpc	r7, r1
    4504:	09 f4       	brne	.+2      	; 0x4508 <f_open+0x6fa>
    4506:	f6 c3       	rjmp	.+2028   	; 0x4cf4 <f_open+0xee6>
    4508:	e1 e0       	ldi	r30, 0x01	; 1
    450a:	4e 16       	cp	r4, r30
    450c:	51 04       	cpc	r5, r1
    450e:	61 04       	cpc	r6, r1
    4510:	71 04       	cpc	r7, r1
    4512:	09 f4       	brne	.+2      	; 0x4516 <f_open+0x708>
    4514:	fc ce       	rjmp	.-520    	; 0x430e <f_open+0x500>
    4516:	f5 01       	movw	r30, r10
    4518:	86 89       	ldd	r24, Z+22	; 0x16
    451a:	97 89       	ldd	r25, Z+23	; 0x17
    451c:	a0 8d       	ldd	r26, Z+24	; 0x18
    451e:	b1 8d       	ldd	r27, Z+25	; 0x19
    4520:	c8 16       	cp	r12, r24
    4522:	d9 06       	cpc	r13, r25
    4524:	ea 06       	cpc	r14, r26
    4526:	fb 06       	cpc	r15, r27
    4528:	08 f4       	brcc	.+2      	; 0x452c <f_open+0x71e>
    452a:	09 cf       	rjmp	.-494    	; 0x433e <f_open+0x530>
    452c:	82 e0       	ldi	r24, 0x02	; 2
    452e:	cc cc       	rjmp	.-1640   	; 0x3ec8 <f_open+0xba>
    4530:	21 14       	cp	r2, r1
    4532:	31 04       	cpc	r3, r1
    4534:	09 f4       	brne	.+2      	; 0x4538 <f_open+0x72a>
    4536:	91 c0       	rjmp	.+290    	; 0x465a <f_open+0x84c>
    4538:	89 2d       	mov	r24, r9
    453a:	8c 71       	andi	r24, 0x1C	; 28
    453c:	09 f4       	brne	.+2      	; 0x4540 <f_open+0x732>
    453e:	56 c0       	rjmp	.+172    	; 0x45ec <f_open+0x7de>
    4540:	d1 01       	movw	r26, r2
    4542:	1b 96       	adiw	r26, 0x0b	; 11
    4544:	8c 91       	ld	r24, X
    4546:	81 71       	andi	r24, 0x11	; 17
    4548:	09 f0       	breq	.+2      	; 0x454c <f_open+0x73e>
    454a:	60 c0       	rjmp	.+192    	; 0x460c <f_open+0x7fe>
    454c:	92 fe       	sbrs	r9, 2
    454e:	93 ce       	rjmp	.-730    	; 0x4276 <f_open+0x468>
    4550:	88 e0       	ldi	r24, 0x08	; 8
    4552:	ba cc       	rjmp	.-1676   	; 0x3ec8 <f_open+0xba>
    4554:	0f a9       	ldd	r16, Y+55	; 0x37
    4556:	18 ad       	ldd	r17, Y+56	; 0x38
    4558:	29 ad       	ldd	r18, Y+57	; 0x39
    455a:	3a ad       	ldd	r19, Y+58	; 0x3a
    455c:	d7 01       	movw	r26, r14
    455e:	9e 96       	adiw	r26, 0x2e	; 46
    4560:	0d 93       	st	X+, r16
    4562:	1d 93       	st	X+, r17
    4564:	2d 93       	st	X+, r18
    4566:	3c 93       	st	X, r19
    4568:	d1 97       	sbiw	r26, 0x31	; 49
    456a:	e9 80       	ldd	r14, Y+1	; 0x01
    456c:	fa 80       	ldd	r15, Y+2	; 0x02
    456e:	ff a1       	ldd	r31, Y+39	; 0x27
    4570:	f0 62       	ori	r31, 0x20	; 32
    4572:	ff a3       	std	Y+39, r31	; 0x27
    4574:	0f 2f       	mov	r16, r31
    4576:	f7 01       	movw	r30, r14
    4578:	86 a5       	ldd	r24, Z+46	; 0x2e
    457a:	97 a5       	ldd	r25, Z+47	; 0x2f
    457c:	a0 a9       	ldd	r26, Z+48	; 0x30
    457e:	b1 a9       	ldd	r27, Z+49	; 0x31
    4580:	f6 01       	movw	r30, r12
    4582:	82 8f       	std	Z+26, r24	; 0x1a
    4584:	93 8f       	std	Z+27, r25	; 0x1b
    4586:	a4 8f       	std	Z+28, r26	; 0x1c
    4588:	b5 8f       	std	Z+29, r27	; 0x1d
    458a:	26 8e       	std	Z+30, r2	; 0x1e
    458c:	37 8e       	std	Z+31, r3	; 0x1f
    458e:	04 83       	std	Z+4, r16	; 0x04
    4590:	15 82       	std	Z+5, r1	; 0x05
    4592:	d1 01       	movw	r26, r2
    4594:	5a 96       	adiw	r26, 0x1a	; 26
    4596:	8d 91       	ld	r24, X+
    4598:	9c 91       	ld	r25, X
    459a:	5b 97       	sbiw	r26, 0x1b	; 27
    459c:	a0 e0       	ldi	r26, 0x00	; 0
    459e:	b0 e0       	ldi	r27, 0x00	; 0
    45a0:	f7 01       	movw	r30, r14
    45a2:	20 81       	ld	r18, Z
    45a4:	23 30       	cpi	r18, 0x03	; 3
    45a6:	a1 f1       	breq	.+104    	; 0x4610 <f_open+0x802>
    45a8:	f6 01       	movw	r30, r12
    45aa:	86 87       	std	Z+14, r24	; 0x0e
    45ac:	97 87       	std	Z+15, r25	; 0x0f
    45ae:	a0 8b       	std	Z+16, r26	; 0x10
    45b0:	b1 8b       	std	Z+17, r27	; 0x11
    45b2:	f1 01       	movw	r30, r2
    45b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    45b6:	95 8d       	ldd	r25, Z+29	; 0x1d
    45b8:	a6 8d       	ldd	r26, Z+30	; 0x1e
    45ba:	b7 8d       	ldd	r27, Z+31	; 0x1f
    45bc:	f6 01       	movw	r30, r12
    45be:	82 87       	std	Z+10, r24	; 0x0a
    45c0:	93 87       	std	Z+11, r25	; 0x0b
    45c2:	a4 87       	std	Z+12, r26	; 0x0c
    45c4:	b5 87       	std	Z+13, r27	; 0x0d
    45c6:	16 82       	std	Z+6, r1	; 0x06
    45c8:	17 82       	std	Z+7, r1	; 0x07
    45ca:	10 86       	std	Z+8, r1	; 0x08
    45cc:	11 86       	std	Z+9, r1	; 0x09
    45ce:	16 8a       	std	Z+22, r1	; 0x16
    45d0:	17 8a       	std	Z+23, r1	; 0x17
    45d2:	10 8e       	std	Z+24, r1	; 0x18
    45d4:	11 8e       	std	Z+25, r1	; 0x19
    45d6:	e0 82       	st	Z, r14
    45d8:	f1 82       	std	Z+1, r15	; 0x01
    45da:	d7 01       	movw	r26, r14
    45dc:	16 96       	adiw	r26, 0x06	; 6
    45de:	8d 91       	ld	r24, X+
    45e0:	9c 91       	ld	r25, X
    45e2:	17 97       	sbiw	r26, 0x07	; 7
    45e4:	82 83       	std	Z+2, r24	; 0x02
    45e6:	93 83       	std	Z+3, r25	; 0x03
    45e8:	80 e0       	ldi	r24, 0x00	; 0
    45ea:	6e cc       	rjmp	.-1828   	; 0x3ec8 <f_open+0xba>
    45ec:	f1 01       	movw	r30, r2
    45ee:	83 85       	ldd	r24, Z+11	; 0x0b
    45f0:	84 fd       	sbrc	r24, 4
    45f2:	1b c0       	rjmp	.+54     	; 0x462a <f_open+0x81c>
    45f4:	91 fe       	sbrs	r9, 1
    45f6:	02 c0       	rjmp	.+4      	; 0x45fc <f_open+0x7ee>
    45f8:	80 fd       	sbrc	r24, 0
    45fa:	08 c0       	rjmp	.+16     	; 0x460c <f_open+0x7fe>
    45fc:	89 2d       	mov	r24, r9
    45fe:	88 70       	andi	r24, 0x08	; 8
    4600:	e9 80       	ldd	r14, Y+1	; 0x01
    4602:	fa 80       	ldd	r15, Y+2	; 0x02
    4604:	81 11       	cpse	r24, r1
    4606:	b3 cf       	rjmp	.-154    	; 0x456e <f_open+0x760>
    4608:	0f a1       	ldd	r16, Y+39	; 0x27
    460a:	b5 cf       	rjmp	.-150    	; 0x4576 <f_open+0x768>
    460c:	87 e0       	ldi	r24, 0x07	; 7
    460e:	5c cc       	rjmp	.-1864   	; 0x3ec8 <f_open+0xba>
    4610:	f1 01       	movw	r30, r2
    4612:	44 89       	ldd	r20, Z+20	; 0x14
    4614:	55 89       	ldd	r21, Z+21	; 0x15
    4616:	60 e0       	ldi	r22, 0x00	; 0
    4618:	70 e0       	ldi	r23, 0x00	; 0
    461a:	ba 01       	movw	r22, r20
    461c:	55 27       	eor	r21, r21
    461e:	44 27       	eor	r20, r20
    4620:	84 2b       	or	r24, r20
    4622:	95 2b       	or	r25, r21
    4624:	a6 2b       	or	r26, r22
    4626:	b7 2b       	or	r27, r23
    4628:	bf cf       	rjmp	.-130    	; 0x45a8 <f_open+0x79a>
    462a:	84 e0       	ldi	r24, 0x04	; 4
    462c:	4d cc       	rjmp	.-1894   	; 0x3ec8 <f_open+0xba>
    462e:	e9 80       	ldd	r14, Y+1	; 0x01
    4630:	fa 80       	ldd	r15, Y+2	; 0x02
    4632:	0f a1       	ldd	r16, Y+39	; 0x27
    4634:	a0 cf       	rjmp	.-192    	; 0x4576 <f_open+0x768>
    4636:	f1 01       	movw	r30, r2
    4638:	16 a6       	std	Z+46, r1	; 0x2e
    463a:	17 a6       	std	Z+47, r1	; 0x2f
    463c:	10 aa       	std	Z+48, r1	; 0x30
    463e:	11 aa       	std	Z+49, r1	; 0x31
    4640:	81 01       	movw	r16, r2
    4642:	00 5d       	subi	r16, 0xD0	; 208
    4644:	1d 4f       	sbci	r17, 0xFD	; 253
    4646:	0f a3       	std	Y+39, r16	; 0x27
    4648:	18 a7       	std	Y+40, r17	; 0x28
    464a:	d8 01       	movw	r26, r16
    464c:	8d 91       	ld	r24, X+
    464e:	9c 91       	ld	r25, X
    4650:	85 35       	cpi	r24, 0x55	; 85
    4652:	9a 4a       	sbci	r25, 0xAA	; 170
    4654:	21 f0       	breq	.+8      	; 0x465e <f_open+0x850>
    4656:	82 e0       	ldi	r24, 0x02	; 2
    4658:	84 cc       	rjmp	.-1784   	; 0x3f62 <f_open+0x154>
    465a:	86 e0       	ldi	r24, 0x06	; 6
    465c:	fa cd       	rjmp	.-1036   	; 0x4252 <f_open+0x444>
    465e:	f1 01       	movw	r30, r2
    4660:	e8 59       	subi	r30, 0x98	; 152
    4662:	ff 4f       	sbci	r31, 0xFF	; 255
    4664:	ef a7       	std	Y+47, r30	; 0x2f
    4666:	f8 ab       	std	Y+48, r31	; 0x30
    4668:	80 81       	ld	r24, Z
    466a:	91 81       	ldd	r25, Z+1	; 0x01
    466c:	a2 81       	ldd	r26, Z+2	; 0x02
    466e:	b3 81       	ldd	r27, Z+3	; 0x03
    4670:	bb 27       	eor	r27, r27
    4672:	86 34       	cpi	r24, 0x46	; 70
    4674:	91 44       	sbci	r25, 0x41	; 65
    4676:	a4 45       	sbci	r26, 0x54	; 84
    4678:	b1 05       	cpc	r27, r1
    467a:	09 f4       	brne	.+2      	; 0x467e <f_open+0x870>
    467c:	fd c3       	rjmp	.+2042   	; 0x4e78 <f_open+0x106a>
    467e:	81 01       	movw	r16, r2
    4680:	0c 57       	subi	r16, 0x7C	; 124
    4682:	1f 4f       	sbci	r17, 0xFF	; 255
    4684:	0b a7       	std	Y+43, r16	; 0x2b
    4686:	1c a7       	std	Y+44, r17	; 0x2c
    4688:	f8 01       	movw	r30, r16
    468a:	80 81       	ld	r24, Z
    468c:	91 81       	ldd	r25, Z+1	; 0x01
    468e:	a2 81       	ldd	r26, Z+2	; 0x02
    4690:	b3 81       	ldd	r27, Z+3	; 0x03
    4692:	bb 27       	eor	r27, r27
    4694:	86 34       	cpi	r24, 0x46	; 70
    4696:	91 44       	sbci	r25, 0x41	; 65
    4698:	a4 45       	sbci	r26, 0x54	; 84
    469a:	b1 05       	cpc	r27, r1
    469c:	09 f4       	brne	.+2      	; 0x46a0 <f_open+0x892>
    469e:	77 cc       	rjmp	.-1810   	; 0x3f8e <f_open+0x180>
    46a0:	f1 01       	movw	r30, r2
    46a2:	ec 50       	subi	r30, 0x0C	; 12
    46a4:	fe 4f       	sbci	r31, 0xFE	; 254
    46a6:	80 81       	ld	r24, Z
    46a8:	88 23       	and	r24, r24
    46aa:	09 f4       	brne	.+2      	; 0x46ae <f_open+0x8a0>
    46ac:	e1 c3       	rjmp	.+1986   	; 0x4e70 <f_open+0x1062>
    46ae:	34 96       	adiw	r30, 0x04	; 4
    46b0:	80 81       	ld	r24, Z
    46b2:	91 81       	ldd	r25, Z+1	; 0x01
    46b4:	a2 81       	ldd	r26, Z+2	; 0x02
    46b6:	b3 81       	ldd	r27, Z+3	; 0x03
    46b8:	8f 8b       	std	Y+23, r24	; 0x17
    46ba:	98 8f       	std	Y+24, r25	; 0x18
    46bc:	a9 8f       	std	Y+25, r26	; 0x19
    46be:	ba 8f       	std	Y+26, r27	; 0x1a
    46c0:	f1 01       	movw	r30, r2
    46c2:	ec 5f       	subi	r30, 0xFC	; 252
    46c4:	fd 4f       	sbci	r31, 0xFD	; 253
    46c6:	80 81       	ld	r24, Z
    46c8:	88 23       	and	r24, r24
    46ca:	09 f4       	brne	.+2      	; 0x46ce <f_open+0x8c0>
    46cc:	cd c3       	rjmp	.+1946   	; 0x4e68 <f_open+0x105a>
    46ce:	34 96       	adiw	r30, 0x04	; 4
    46d0:	80 81       	ld	r24, Z
    46d2:	91 81       	ldd	r25, Z+1	; 0x01
    46d4:	a2 81       	ldd	r26, Z+2	; 0x02
    46d6:	b3 81       	ldd	r27, Z+3	; 0x03
    46d8:	8b 8f       	std	Y+27, r24	; 0x1b
    46da:	9c 8f       	std	Y+28, r25	; 0x1c
    46dc:	ad 8f       	std	Y+29, r26	; 0x1d
    46de:	be 8f       	std	Y+30, r27	; 0x1e
    46e0:	f1 01       	movw	r30, r2
    46e2:	ec 5e       	subi	r30, 0xEC	; 236
    46e4:	fd 4f       	sbci	r31, 0xFD	; 253
    46e6:	80 81       	ld	r24, Z
    46e8:	88 23       	and	r24, r24
    46ea:	09 f4       	brne	.+2      	; 0x46ee <f_open+0x8e0>
    46ec:	b9 c3       	rjmp	.+1906   	; 0x4e60 <f_open+0x1052>
    46ee:	34 96       	adiw	r30, 0x04	; 4
    46f0:	80 81       	ld	r24, Z
    46f2:	91 81       	ldd	r25, Z+1	; 0x01
    46f4:	a2 81       	ldd	r26, Z+2	; 0x02
    46f6:	b3 81       	ldd	r27, Z+3	; 0x03
    46f8:	8f 8f       	std	Y+31, r24	; 0x1f
    46fa:	98 a3       	std	Y+32, r25	; 0x20
    46fc:	a9 a3       	std	Y+33, r26	; 0x21
    46fe:	ba a3       	std	Y+34, r27	; 0x22
    4700:	f1 01       	movw	r30, r2
    4702:	ec 5d       	subi	r30, 0xDC	; 220
    4704:	fd 4f       	sbci	r31, 0xFD	; 253
    4706:	80 81       	ld	r24, Z
    4708:	88 23       	and	r24, r24
    470a:	09 f4       	brne	.+2      	; 0x470e <f_open+0x900>
    470c:	a5 c3       	rjmp	.+1866   	; 0x4e58 <f_open+0x104a>
    470e:	34 96       	adiw	r30, 0x04	; 4
    4710:	80 81       	ld	r24, Z
    4712:	91 81       	ldd	r25, Z+1	; 0x01
    4714:	a2 81       	ldd	r26, Z+2	; 0x02
    4716:	b3 81       	ldd	r27, Z+3	; 0x03
    4718:	8b a3       	std	Y+35, r24	; 0x23
    471a:	9c a3       	std	Y+36, r25	; 0x24
    471c:	ad a3       	std	Y+37, r26	; 0x25
    471e:	be a3       	std	Y+38, r27	; 0x26
    4720:	4f 88       	ldd	r4, Y+23	; 0x17
    4722:	58 8c       	ldd	r5, Y+24	; 0x18
    4724:	69 8c       	ldd	r6, Y+25	; 0x19
    4726:	7a 8c       	ldd	r7, Y+26	; 0x1a
    4728:	41 14       	cp	r4, r1
    472a:	51 04       	cpc	r5, r1
    472c:	61 04       	cpc	r6, r1
    472e:	71 04       	cpc	r7, r1
    4730:	09 f0       	breq	.+2      	; 0x4734 <f_open+0x926>
    4732:	f6 c0       	rjmp	.+492    	; 0x4920 <f_open+0xb12>
    4734:	4b 8c       	ldd	r4, Y+27	; 0x1b
    4736:	5c 8c       	ldd	r5, Y+28	; 0x1c
    4738:	6d 8c       	ldd	r6, Y+29	; 0x1d
    473a:	7e 8c       	ldd	r7, Y+30	; 0x1e
    473c:	41 14       	cp	r4, r1
    473e:	51 04       	cpc	r5, r1
    4740:	61 04       	cpc	r6, r1
    4742:	71 04       	cpc	r7, r1
    4744:	09 f0       	breq	.+2      	; 0x4748 <f_open+0x93a>
    4746:	44 c1       	rjmp	.+648    	; 0x49d0 <f_open+0xbc2>
    4748:	4f 8c       	ldd	r4, Y+31	; 0x1f
    474a:	58 a0       	ldd	r5, Y+32	; 0x20
    474c:	69 a0       	ldd	r6, Y+33	; 0x21
    474e:	7a a0       	ldd	r7, Y+34	; 0x22
    4750:	41 14       	cp	r4, r1
    4752:	51 04       	cpc	r5, r1
    4754:	61 04       	cpc	r6, r1
    4756:	71 04       	cpc	r7, r1
    4758:	09 f0       	breq	.+2      	; 0x475c <f_open+0x94e>
    475a:	0e c1       	rjmp	.+540    	; 0x4978 <f_open+0xb6a>
    475c:	4b a0       	ldd	r4, Y+35	; 0x23
    475e:	5c a0       	ldd	r5, Y+36	; 0x24
    4760:	6d a0       	ldd	r6, Y+37	; 0x25
    4762:	7e a0       	ldd	r7, Y+38	; 0x26
    4764:	41 14       	cp	r4, r1
    4766:	51 04       	cpc	r5, r1
    4768:	61 04       	cpc	r6, r1
    476a:	71 04       	cpc	r7, r1
    476c:	09 f4       	brne	.+2      	; 0x4770 <f_open+0x962>
    476e:	01 cc       	rjmp	.-2046   	; 0x3f72 <f_open+0x164>
    4770:	d1 01       	movw	r26, r2
    4772:	14 96       	adiw	r26, 0x04	; 4
    4774:	1c 92       	st	X, r1
    4776:	14 97       	sbiw	r26, 0x04	; 4
    4778:	0f ef       	ldi	r16, 0xFF	; 255
    477a:	1f ef       	ldi	r17, 0xFF	; 255
    477c:	98 01       	movw	r18, r16
    477e:	9e 96       	adiw	r26, 0x2e	; 46
    4780:	0d 93       	st	X+, r16
    4782:	1d 93       	st	X+, r17
    4784:	2d 93       	st	X+, r18
    4786:	3c 93       	st	X, r19
    4788:	d1 97       	sbiw	r26, 0x31	; 49
    478a:	bf ef       	ldi	r27, 0xFF	; 255
    478c:	4b 16       	cp	r4, r27
    478e:	5b 06       	cpc	r5, r27
    4790:	6b 06       	cpc	r6, r27
    4792:	7b 06       	cpc	r7, r27
    4794:	09 f4       	brne	.+2      	; 0x4798 <f_open+0x98a>
    4796:	62 c2       	rjmp	.+1220   	; 0x4c5c <f_open+0xe4e>
    4798:	01 e0       	ldi	r16, 0x01	; 1
    479a:	10 e0       	ldi	r17, 0x00	; 0
    479c:	a3 01       	movw	r20, r6
    479e:	92 01       	movw	r18, r4
    47a0:	b7 01       	movw	r22, r14
    47a2:	f1 01       	movw	r30, r2
    47a4:	81 81       	ldd	r24, Z+1	; 0x01
    47a6:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    47aa:	88 23       	and	r24, r24
    47ac:	09 f4       	brne	.+2      	; 0x47b0 <f_open+0x9a2>
    47ae:	4f c2       	rjmp	.+1182   	; 0x4c4e <f_open+0xe40>
    47b0:	ee 24       	eor	r14, r14
    47b2:	ea 94       	dec	r14
    47b4:	fe 2c       	mov	r15, r14
    47b6:	87 01       	movw	r16, r14
    47b8:	d1 01       	movw	r26, r2
    47ba:	9e 96       	adiw	r26, 0x2e	; 46
    47bc:	ed 92       	st	X+, r14
    47be:	fd 92       	st	X+, r15
    47c0:	0d 93       	st	X+, r16
    47c2:	1c 93       	st	X, r17
    47c4:	d1 97       	sbiw	r26, 0x31	; 49
    47c6:	81 e0       	ldi	r24, 0x01	; 1
    47c8:	7f cb       	rjmp	.-2306   	; 0x3ec8 <f_open+0xba>
    47ca:	84 89       	ldd	r24, Z+20	; 0x14
    47cc:	95 89       	ldd	r25, Z+21	; 0x15
    47ce:	a0 e0       	ldi	r26, 0x00	; 0
    47d0:	b0 e0       	ldi	r27, 0x00	; 0
    47d2:	dc 01       	movw	r26, r24
    47d4:	99 27       	eor	r25, r25
    47d6:	88 27       	eor	r24, r24
    47d8:	08 2b       	or	r16, r24
    47da:	19 2b       	or	r17, r25
    47dc:	2a 2b       	or	r18, r26
    47de:	3b 2b       	or	r19, r27
    47e0:	0f a7       	std	Y+47, r16	; 0x2f
    47e2:	18 ab       	std	Y+48, r17	; 0x30
    47e4:	29 ab       	std	Y+49, r18	; 0x31
    47e6:	3a ab       	std	Y+50, r19	; 0x32
    47e8:	67 cd       	rjmp	.-1330   	; 0x42b8 <f_open+0x4aa>
    47ea:	97 01       	movw	r18, r14
    47ec:	86 01       	movw	r16, r12
    47ee:	a7 e0       	ldi	r26, 0x07	; 7
    47f0:	36 95       	lsr	r19
    47f2:	27 95       	ror	r18
    47f4:	17 95       	ror	r17
    47f6:	07 95       	ror	r16
    47f8:	aa 95       	dec	r26
    47fa:	d1 f7       	brne	.-12     	; 0x47f0 <f_open+0x9e2>
    47fc:	f5 01       	movw	r30, r10
    47fe:	82 a1       	ldd	r24, Z+34	; 0x22
    4800:	93 a1       	ldd	r25, Z+35	; 0x23
    4802:	a4 a1       	ldd	r26, Z+36	; 0x24
    4804:	b5 a1       	ldd	r27, Z+37	; 0x25
    4806:	08 0f       	add	r16, r24
    4808:	19 1f       	adc	r17, r25
    480a:	2a 1f       	adc	r18, r26
    480c:	3b 1f       	adc	r19, r27
    480e:	0b a7       	std	Y+43, r16	; 0x2b
    4810:	1c a7       	std	Y+44, r17	; 0x2c
    4812:	2d a7       	std	Y+45, r18	; 0x2d
    4814:	3e a7       	std	Y+46, r19	; 0x2e
    4816:	46 a4       	ldd	r4, Z+46	; 0x2e
    4818:	57 a4       	ldd	r5, Z+47	; 0x2f
    481a:	60 a8       	ldd	r6, Z+48	; 0x30
    481c:	71 a8       	ldd	r7, Z+49	; 0x31
    481e:	04 15       	cp	r16, r4
    4820:	15 05       	cpc	r17, r5
    4822:	26 05       	cpc	r18, r6
    4824:	37 05       	cpc	r19, r7
    4826:	e1 f0       	breq	.+56     	; 0x4860 <f_open+0xa52>
    4828:	84 81       	ldd	r24, Z+4	; 0x04
    482a:	81 11       	cpse	r24, r1
    482c:	76 c1       	rjmp	.+748    	; 0x4b1a <f_open+0xd0c>
    482e:	01 e0       	ldi	r16, 0x01	; 1
    4830:	10 e0       	ldi	r17, 0x00	; 0
    4832:	2b a5       	ldd	r18, Y+43	; 0x2b
    4834:	3c a5       	ldd	r19, Y+44	; 0x2c
    4836:	4d a5       	ldd	r20, Y+45	; 0x2d
    4838:	5e a5       	ldd	r21, Y+46	; 0x2e
    483a:	b1 01       	movw	r22, r2
    483c:	d5 01       	movw	r26, r10
    483e:	11 96       	adiw	r26, 0x01	; 1
    4840:	8c 91       	ld	r24, X
    4842:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    4846:	81 11       	cpse	r24, r1
    4848:	ef c0       	rjmp	.+478    	; 0x4a28 <f_open+0xc1a>
    484a:	0b a5       	ldd	r16, Y+43	; 0x2b
    484c:	1c a5       	ldd	r17, Y+44	; 0x2c
    484e:	2d a5       	ldd	r18, Y+45	; 0x2d
    4850:	3e a5       	ldd	r19, Y+46	; 0x2e
    4852:	d5 01       	movw	r26, r10
    4854:	9e 96       	adiw	r26, 0x2e	; 46
    4856:	0d 93       	st	X+, r16
    4858:	1d 93       	st	X+, r17
    485a:	2d 93       	st	X+, r18
    485c:	3c 93       	st	X, r19
    485e:	d1 97       	sbiw	r26, 0x31	; 49
    4860:	d7 01       	movw	r26, r14
    4862:	c6 01       	movw	r24, r12
    4864:	88 0f       	add	r24, r24
    4866:	99 1f       	adc	r25, r25
    4868:	aa 1f       	adc	r26, r26
    486a:	bb 1f       	adc	r27, r27
    486c:	88 0f       	add	r24, r24
    486e:	99 1f       	adc	r25, r25
    4870:	aa 1f       	adc	r26, r26
    4872:	bb 1f       	adc	r27, r27
    4874:	8c 7f       	andi	r24, 0xFC	; 252
    4876:	91 70       	andi	r25, 0x01	; 1
    4878:	aa 27       	eor	r26, r26
    487a:	bb 27       	eor	r27, r27
    487c:	f5 01       	movw	r30, r10
    487e:	e8 0f       	add	r30, r24
    4880:	f9 1f       	adc	r31, r25
    4882:	42 a8       	ldd	r4, Z+50	; 0x32
    4884:	53 a8       	ldd	r5, Z+51	; 0x33
    4886:	64 a8       	ldd	r6, Z+52	; 0x34
    4888:	75 a8       	ldd	r7, Z+53	; 0x35
    488a:	bf e0       	ldi	r27, 0x0F	; 15
    488c:	7b 22       	and	r7, r27
    488e:	36 ce       	rjmp	.-916    	; 0x44fc <f_open+0x6ee>
    4890:	33 27       	eor	r19, r19
    4892:	2f 2d       	mov	r18, r15
    4894:	1e 2d       	mov	r17, r14
    4896:	0d 2d       	mov	r16, r13
    4898:	f5 01       	movw	r30, r10
    489a:	82 a1       	ldd	r24, Z+34	; 0x22
    489c:	93 a1       	ldd	r25, Z+35	; 0x23
    489e:	a4 a1       	ldd	r26, Z+36	; 0x24
    48a0:	b5 a1       	ldd	r27, Z+37	; 0x25
    48a2:	08 0f       	add	r16, r24
    48a4:	19 1f       	adc	r17, r25
    48a6:	2a 1f       	adc	r18, r26
    48a8:	3b 1f       	adc	r19, r27
    48aa:	0b a7       	std	Y+43, r16	; 0x2b
    48ac:	1c a7       	std	Y+44, r17	; 0x2c
    48ae:	2d a7       	std	Y+45, r18	; 0x2d
    48b0:	3e a7       	std	Y+46, r19	; 0x2e
    48b2:	46 a4       	ldd	r4, Z+46	; 0x2e
    48b4:	57 a4       	ldd	r5, Z+47	; 0x2f
    48b6:	60 a8       	ldd	r6, Z+48	; 0x30
    48b8:	71 a8       	ldd	r7, Z+49	; 0x31
    48ba:	04 15       	cp	r16, r4
    48bc:	15 05       	cpc	r17, r5
    48be:	26 05       	cpc	r18, r6
    48c0:	37 05       	cpc	r19, r7
    48c2:	e1 f0       	breq	.+56     	; 0x48fc <f_open+0xaee>
    48c4:	84 81       	ldd	r24, Z+4	; 0x04
    48c6:	81 11       	cpse	r24, r1
    48c8:	e1 c0       	rjmp	.+450    	; 0x4a8c <f_open+0xc7e>
    48ca:	01 e0       	ldi	r16, 0x01	; 1
    48cc:	10 e0       	ldi	r17, 0x00	; 0
    48ce:	2b a5       	ldd	r18, Y+43	; 0x2b
    48d0:	3c a5       	ldd	r19, Y+44	; 0x2c
    48d2:	4d a5       	ldd	r20, Y+45	; 0x2d
    48d4:	5e a5       	ldd	r21, Y+46	; 0x2e
    48d6:	b1 01       	movw	r22, r2
    48d8:	d5 01       	movw	r26, r10
    48da:	11 96       	adiw	r26, 0x01	; 1
    48dc:	8c 91       	ld	r24, X
    48de:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    48e2:	81 11       	cpse	r24, r1
    48e4:	a1 c0       	rjmp	.+322    	; 0x4a28 <f_open+0xc1a>
    48e6:	0b a5       	ldd	r16, Y+43	; 0x2b
    48e8:	1c a5       	ldd	r17, Y+44	; 0x2c
    48ea:	2d a5       	ldd	r18, Y+45	; 0x2d
    48ec:	3e a5       	ldd	r19, Y+46	; 0x2e
    48ee:	d5 01       	movw	r26, r10
    48f0:	9e 96       	adiw	r26, 0x2e	; 46
    48f2:	0d 93       	st	X+, r16
    48f4:	1d 93       	st	X+, r17
    48f6:	2d 93       	st	X+, r18
    48f8:	3c 93       	st	X, r19
    48fa:	d1 97       	sbiw	r26, 0x31	; 49
    48fc:	d7 01       	movw	r26, r14
    48fe:	c6 01       	movw	r24, r12
    4900:	88 0f       	add	r24, r24
    4902:	99 1f       	adc	r25, r25
    4904:	aa 1f       	adc	r26, r26
    4906:	bb 1f       	adc	r27, r27
    4908:	8e 7f       	andi	r24, 0xFE	; 254
    490a:	91 70       	andi	r25, 0x01	; 1
    490c:	aa 27       	eor	r26, r26
    490e:	bb 27       	eor	r27, r27
    4910:	f5 01       	movw	r30, r10
    4912:	e8 0f       	add	r30, r24
    4914:	f9 1f       	adc	r31, r25
    4916:	42 a8       	ldd	r4, Z+50	; 0x32
    4918:	53 a8       	ldd	r5, Z+51	; 0x33
    491a:	61 2c       	mov	r6, r1
    491c:	71 2c       	mov	r7, r1
    491e:	ee cd       	rjmp	.-1060   	; 0x44fc <f_open+0x6ee>
    4920:	d1 01       	movw	r26, r2
    4922:	14 96       	adiw	r26, 0x04	; 4
    4924:	1c 92       	st	X, r1
    4926:	14 97       	sbiw	r26, 0x04	; 4
    4928:	0f ef       	ldi	r16, 0xFF	; 255
    492a:	1f ef       	ldi	r17, 0xFF	; 255
    492c:	98 01       	movw	r18, r16
    492e:	9e 96       	adiw	r26, 0x2e	; 46
    4930:	0d 93       	st	X+, r16
    4932:	1d 93       	st	X+, r17
    4934:	2d 93       	st	X+, r18
    4936:	3c 93       	st	X, r19
    4938:	d1 97       	sbiw	r26, 0x31	; 49
    493a:	bf ef       	ldi	r27, 0xFF	; 255
    493c:	4b 16       	cp	r4, r27
    493e:	5b 06       	cpc	r5, r27
    4940:	6b 06       	cpc	r6, r27
    4942:	7b 06       	cpc	r7, r27
    4944:	09 f4       	brne	.+2      	; 0x4948 <f_open+0xb3a>
    4946:	b3 c1       	rjmp	.+870    	; 0x4cae <f_open+0xea0>
    4948:	01 e0       	ldi	r16, 0x01	; 1
    494a:	10 e0       	ldi	r17, 0x00	; 0
    494c:	a3 01       	movw	r20, r6
    494e:	92 01       	movw	r18, r4
    4950:	b7 01       	movw	r22, r14
    4952:	d1 01       	movw	r26, r2
    4954:	11 96       	adiw	r26, 0x01	; 1
    4956:	8c 91       	ld	r24, X
    4958:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    495c:	88 23       	and	r24, r24
    495e:	09 f4       	brne	.+2      	; 0x4962 <f_open+0xb54>
    4960:	a1 c1       	rjmp	.+834    	; 0x4ca4 <f_open+0xe96>
    4962:	0f ef       	ldi	r16, 0xFF	; 255
    4964:	1f ef       	ldi	r17, 0xFF	; 255
    4966:	98 01       	movw	r18, r16
    4968:	d1 01       	movw	r26, r2
    496a:	9e 96       	adiw	r26, 0x2e	; 46
    496c:	0d 93       	st	X+, r16
    496e:	1d 93       	st	X+, r17
    4970:	2d 93       	st	X+, r18
    4972:	3c 93       	st	X, r19
    4974:	d1 97       	sbiw	r26, 0x31	; 49
    4976:	de ce       	rjmp	.-580    	; 0x4734 <f_open+0x926>
    4978:	d1 01       	movw	r26, r2
    497a:	14 96       	adiw	r26, 0x04	; 4
    497c:	1c 92       	st	X, r1
    497e:	14 97       	sbiw	r26, 0x04	; 4
    4980:	0f ef       	ldi	r16, 0xFF	; 255
    4982:	1f ef       	ldi	r17, 0xFF	; 255
    4984:	98 01       	movw	r18, r16
    4986:	9e 96       	adiw	r26, 0x2e	; 46
    4988:	0d 93       	st	X+, r16
    498a:	1d 93       	st	X+, r17
    498c:	2d 93       	st	X+, r18
    498e:	3c 93       	st	X, r19
    4990:	d1 97       	sbiw	r26, 0x31	; 49
    4992:	bf ef       	ldi	r27, 0xFF	; 255
    4994:	4b 16       	cp	r4, r27
    4996:	5b 06       	cpc	r5, r27
    4998:	6b 06       	cpc	r6, r27
    499a:	7b 06       	cpc	r7, r27
    499c:	09 f4       	brne	.+2      	; 0x49a0 <f_open+0xb92>
    499e:	53 c0       	rjmp	.+166    	; 0x4a46 <f_open+0xc38>
    49a0:	01 e0       	ldi	r16, 0x01	; 1
    49a2:	10 e0       	ldi	r17, 0x00	; 0
    49a4:	a3 01       	movw	r20, r6
    49a6:	92 01       	movw	r18, r4
    49a8:	b7 01       	movw	r22, r14
    49aa:	d1 01       	movw	r26, r2
    49ac:	11 96       	adiw	r26, 0x01	; 1
    49ae:	8c 91       	ld	r24, X
    49b0:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    49b4:	88 23       	and	r24, r24
    49b6:	09 f4       	brne	.+2      	; 0x49ba <f_open+0xbac>
    49b8:	41 c0       	rjmp	.+130    	; 0x4a3c <f_open+0xc2e>
    49ba:	0f ef       	ldi	r16, 0xFF	; 255
    49bc:	1f ef       	ldi	r17, 0xFF	; 255
    49be:	98 01       	movw	r18, r16
    49c0:	d1 01       	movw	r26, r2
    49c2:	9e 96       	adiw	r26, 0x2e	; 46
    49c4:	0d 93       	st	X+, r16
    49c6:	1d 93       	st	X+, r17
    49c8:	2d 93       	st	X+, r18
    49ca:	3c 93       	st	X, r19
    49cc:	d1 97       	sbiw	r26, 0x31	; 49
    49ce:	c6 ce       	rjmp	.-628    	; 0x475c <f_open+0x94e>
    49d0:	d1 01       	movw	r26, r2
    49d2:	14 96       	adiw	r26, 0x04	; 4
    49d4:	1c 92       	st	X, r1
    49d6:	14 97       	sbiw	r26, 0x04	; 4
    49d8:	0f ef       	ldi	r16, 0xFF	; 255
    49da:	1f ef       	ldi	r17, 0xFF	; 255
    49dc:	98 01       	movw	r18, r16
    49de:	9e 96       	adiw	r26, 0x2e	; 46
    49e0:	0d 93       	st	X+, r16
    49e2:	1d 93       	st	X+, r17
    49e4:	2d 93       	st	X+, r18
    49e6:	3c 93       	st	X, r19
    49e8:	d1 97       	sbiw	r26, 0x31	; 49
    49ea:	bf ef       	ldi	r27, 0xFF	; 255
    49ec:	4b 16       	cp	r4, r27
    49ee:	5b 06       	cpc	r5, r27
    49f0:	6b 06       	cpc	r6, r27
    49f2:	7b 06       	cpc	r7, r27
    49f4:	09 f4       	brne	.+2      	; 0x49f8 <f_open+0xbea>
    49f6:	c7 c1       	rjmp	.+910    	; 0x4d86 <f_open+0xf78>
    49f8:	01 e0       	ldi	r16, 0x01	; 1
    49fa:	10 e0       	ldi	r17, 0x00	; 0
    49fc:	a3 01       	movw	r20, r6
    49fe:	92 01       	movw	r18, r4
    4a00:	b7 01       	movw	r22, r14
    4a02:	d1 01       	movw	r26, r2
    4a04:	11 96       	adiw	r26, 0x01	; 1
    4a06:	8c 91       	ld	r24, X
    4a08:	0e 94 26 2d 	call	0x5a4c	; 0x5a4c <disk_read>
    4a0c:	88 23       	and	r24, r24
    4a0e:	09 f4       	brne	.+2      	; 0x4a12 <f_open+0xc04>
    4a10:	b5 c1       	rjmp	.+874    	; 0x4d7c <f_open+0xf6e>
    4a12:	0f ef       	ldi	r16, 0xFF	; 255
    4a14:	1f ef       	ldi	r17, 0xFF	; 255
    4a16:	98 01       	movw	r18, r16
    4a18:	d1 01       	movw	r26, r2
    4a1a:	9e 96       	adiw	r26, 0x2e	; 46
    4a1c:	0d 93       	st	X+, r16
    4a1e:	1d 93       	st	X+, r17
    4a20:	2d 93       	st	X+, r18
    4a22:	3c 93       	st	X, r19
    4a24:	d1 97       	sbiw	r26, 0x31	; 49
    4a26:	90 ce       	rjmp	.-736    	; 0x4748 <f_open+0x93a>
    4a28:	8f ef       	ldi	r24, 0xFF	; 255
    4a2a:	9f ef       	ldi	r25, 0xFF	; 255
    4a2c:	dc 01       	movw	r26, r24
    4a2e:	f5 01       	movw	r30, r10
    4a30:	86 a7       	std	Z+46, r24	; 0x2e
    4a32:	97 a7       	std	Z+47, r25	; 0x2f
    4a34:	a0 ab       	std	Z+48, r26	; 0x30
    4a36:	b1 ab       	std	Z+49, r27	; 0x31
    4a38:	81 e0       	ldi	r24, 0x01	; 1
    4a3a:	46 ca       	rjmp	.-2932   	; 0x3ec8 <f_open+0xba>
    4a3c:	f1 01       	movw	r30, r2
    4a3e:	46 a6       	std	Z+46, r4	; 0x2e
    4a40:	57 a6       	std	Z+47, r5	; 0x2f
    4a42:	60 aa       	std	Z+48, r6	; 0x30
    4a44:	71 aa       	std	Z+49, r7	; 0x31
    4a46:	ef a1       	ldd	r30, Y+39	; 0x27
    4a48:	f8 a5       	ldd	r31, Y+40	; 0x28
    4a4a:	80 81       	ld	r24, Z
    4a4c:	91 81       	ldd	r25, Z+1	; 0x01
    4a4e:	85 35       	cpi	r24, 0x55	; 85
    4a50:	9a 4a       	sbci	r25, 0xAA	; 170
    4a52:	09 f0       	breq	.+2      	; 0x4a56 <f_open+0xc48>
    4a54:	83 ce       	rjmp	.-762    	; 0x475c <f_open+0x94e>
    4a56:	ef a5       	ldd	r30, Y+47	; 0x2f
    4a58:	f8 a9       	ldd	r31, Y+48	; 0x30
    4a5a:	80 81       	ld	r24, Z
    4a5c:	91 81       	ldd	r25, Z+1	; 0x01
    4a5e:	a2 81       	ldd	r26, Z+2	; 0x02
    4a60:	b3 81       	ldd	r27, Z+3	; 0x03
    4a62:	bb 27       	eor	r27, r27
    4a64:	86 34       	cpi	r24, 0x46	; 70
    4a66:	91 44       	sbci	r25, 0x41	; 65
    4a68:	a4 45       	sbci	r26, 0x54	; 84
    4a6a:	b1 05       	cpc	r27, r1
    4a6c:	09 f4       	brne	.+2      	; 0x4a70 <f_open+0xc62>
    4a6e:	92 ca       	rjmp	.-2780   	; 0x3f94 <f_open+0x186>
    4a70:	eb a5       	ldd	r30, Y+43	; 0x2b
    4a72:	fc a5       	ldd	r31, Y+44	; 0x2c
    4a74:	80 81       	ld	r24, Z
    4a76:	91 81       	ldd	r25, Z+1	; 0x01
    4a78:	a2 81       	ldd	r26, Z+2	; 0x02
    4a7a:	b3 81       	ldd	r27, Z+3	; 0x03
    4a7c:	bb 27       	eor	r27, r27
    4a7e:	86 34       	cpi	r24, 0x46	; 70
    4a80:	91 44       	sbci	r25, 0x41	; 65
    4a82:	a4 45       	sbci	r26, 0x54	; 84
    4a84:	b1 05       	cpc	r27, r1
    4a86:	09 f0       	breq	.+2      	; 0x4a8a <f_open+0xc7c>
    4a88:	69 ce       	rjmp	.-814    	; 0x475c <f_open+0x94e>
    4a8a:	84 ca       	rjmp	.-2808   	; 0x3f94 <f_open+0x186>
    4a8c:	01 e0       	ldi	r16, 0x01	; 1
    4a8e:	10 e0       	ldi	r17, 0x00	; 0
    4a90:	a3 01       	movw	r20, r6
    4a92:	92 01       	movw	r18, r4
    4a94:	b1 01       	movw	r22, r2
    4a96:	81 81       	ldd	r24, Z+1	; 0x01
    4a98:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    4a9c:	81 11       	cpse	r24, r1
    4a9e:	93 ce       	rjmp	.-730    	; 0x47c6 <f_open+0x9b8>
    4aa0:	d5 01       	movw	r26, r10
    4aa2:	14 96       	adiw	r26, 0x04	; 4
    4aa4:	1c 92       	st	X, r1
    4aa6:	14 97       	sbiw	r26, 0x04	; 4
    4aa8:	5a 96       	adiw	r26, 0x1a	; 26
    4aaa:	8d 91       	ld	r24, X+
    4aac:	9d 91       	ld	r25, X+
    4aae:	0d 90       	ld	r0, X+
    4ab0:	bc 91       	ld	r27, X
    4ab2:	a0 2d       	mov	r26, r0
    4ab4:	f5 01       	movw	r30, r10
    4ab6:	42 a1       	ldd	r20, Z+34	; 0x22
    4ab8:	53 a1       	ldd	r21, Z+35	; 0x23
    4aba:	64 a1       	ldd	r22, Z+36	; 0x24
    4abc:	75 a1       	ldd	r23, Z+37	; 0x25
    4abe:	93 01       	movw	r18, r6
    4ac0:	82 01       	movw	r16, r4
    4ac2:	04 1b       	sub	r16, r20
    4ac4:	15 0b       	sbc	r17, r21
    4ac6:	26 0b       	sbc	r18, r22
    4ac8:	37 0b       	sbc	r19, r23
    4aca:	08 17       	cp	r16, r24
    4acc:	19 07       	cpc	r17, r25
    4ace:	2a 07       	cpc	r18, r26
    4ad0:	3b 07       	cpc	r19, r27
    4ad2:	08 f0       	brcs	.+2      	; 0x4ad6 <f_open+0xcc8>
    4ad4:	fa ce       	rjmp	.-524    	; 0x48ca <f_open+0xabc>
    4ad6:	83 80       	ldd	r8, Z+3	; 0x03
    4ad8:	91 2c       	mov	r9, r1
    4ada:	12 e0       	ldi	r17, 0x02	; 2
    4adc:	81 16       	cp	r8, r17
    4ade:	91 04       	cpc	r9, r1
    4ae0:	30 f4       	brcc	.+12     	; 0x4aee <f_open+0xce0>
    4ae2:	f3 ce       	rjmp	.-538    	; 0x48ca <f_open+0xabc>
    4ae4:	f5 01       	movw	r30, r10
    4ae6:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ae8:	93 8d       	ldd	r25, Z+27	; 0x1b
    4aea:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4aec:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4aee:	48 0e       	add	r4, r24
    4af0:	59 1e       	adc	r5, r25
    4af2:	6a 1e       	adc	r6, r26
    4af4:	7b 1e       	adc	r7, r27
    4af6:	01 e0       	ldi	r16, 0x01	; 1
    4af8:	10 e0       	ldi	r17, 0x00	; 0
    4afa:	a3 01       	movw	r20, r6
    4afc:	92 01       	movw	r18, r4
    4afe:	b1 01       	movw	r22, r2
    4b00:	d5 01       	movw	r26, r10
    4b02:	11 96       	adiw	r26, 0x01	; 1
    4b04:	8c 91       	ld	r24, X
    4b06:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    4b0a:	b1 e0       	ldi	r27, 0x01	; 1
    4b0c:	8b 1a       	sub	r8, r27
    4b0e:	91 08       	sbc	r9, r1
    4b10:	e1 e0       	ldi	r30, 0x01	; 1
    4b12:	8e 16       	cp	r8, r30
    4b14:	91 04       	cpc	r9, r1
    4b16:	31 f7       	brne	.-52     	; 0x4ae4 <f_open+0xcd6>
    4b18:	d8 ce       	rjmp	.-592    	; 0x48ca <f_open+0xabc>
    4b1a:	01 e0       	ldi	r16, 0x01	; 1
    4b1c:	10 e0       	ldi	r17, 0x00	; 0
    4b1e:	a3 01       	movw	r20, r6
    4b20:	92 01       	movw	r18, r4
    4b22:	b1 01       	movw	r22, r2
    4b24:	81 81       	ldd	r24, Z+1	; 0x01
    4b26:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <disk_write>
    4b2a:	81 11       	cpse	r24, r1
    4b2c:	4c ce       	rjmp	.-872    	; 0x47c6 <f_open+0x9b8>
    4b2e:	d5 01       	movw	r26, r10
    4b30:	14 96       	adiw	r26, 0x04	; 4
    4b32:	1c 92       	st	X, r1
    4b34:	14 97       	sbiw	r26, 0x04	; 4
    4b36:	5a 96       	adiw	r26, 0x1a	; 26
    4b38:	8d 91       	ld	r24, X+
    4b3a:	9d 91       	ld	r25, X+
    4b3c:	0d 90       	ld	r0, X+
    4b3e:	bc 91       	ld	r27, X
    4b40:	a0 2d       	mov	r26, r0
    4b42:	f5 01       	movw	r30, r10
    4b44:	42 a1       	ldd	r20, Z+34	; 0x22
    4b46:	53 a1       	ldd	r21, Z+35	; 0x23
    4b48:	64 a1       	ldd	r22, Z+36	; 0x24
    4b4a:	75 a1       	ldd	r23, Z+37	; 0x25
    4b4c:	93 01       	movw	r18, r6
    4b4e:	82 01       	movw	r16, r4
    4b50:	04 1b       	sub	r16, r20
    4b52:	15 0b       	sbc	r17, r21
    4b54:	26 0b       	sbc	r18, r22
    4b56:	37 0b       	sbc	r19, r23
    4b58:	08 17       	cp	r16, r24
    4b5a:	19 07       	cpc	r17, r25
    4b5c:	2a 07       	cpc	r18, r26
    4b5e:	3b 07       	cpc	r19, r27
    4b60:	08 f0       	brcs	.+2      	; 0x4b64 <f_open+0xd56>
    4b62:	65 ce       	rjmp	.-822    	; 0x482e <f_open+0xa20>
    4b64:	83 80       	ldd	r8, Z+3	; 0x03
    4b66:	91 2c       	mov	r9, r1
    4b68:	12 e0       	ldi	r17, 0x02	; 2
    4b6a:	81 16       	cp	r8, r17
    4b6c:	91 04       	cpc	r9, r1
    4b6e:	30 f4       	brcc	.+12     	; 0x4b7c <f_open+0xd6e>
    4b70:	5e ce       	rjmp	.-836    	; 0x482e <f_open+0xa20>
    4b72:	f5 01       	movw	r30, r10
    4b74:	82 8d       	ldd	r24, Z+26	; 0x1a
    4b76:	93 8d       	ldd	r25, Z+27	; 0x1b
    4b78:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4b7a:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4b7c:	48 0e       	add	r4, r24
    4b7e:	59 1e       	adc	r5, r25
    4b80:	6a 1e       	adc	r6, r26
    4b82:	7b 1e       	adc	r7, r27
    4b84:	01 e0       	ldi	r16, 0x01	; 1
    4b86:	10 e0       	ldi	r17, 0x00	; 0
    4b88:	a3 01       	movw	r20, r6
    4b8a:	92 01       	movw	r18, r4
    4b8c:	b1 01       	movw	r22, r2
    4b8e:	d5 01       	movw	r26, r10
    4b90:	11 96       	adiw	r26, 0x01	; 1
    4b92:	8c 91       	ld	r24, X
    4b94:	da d7       	rcall	.+4020   	; 0x5b4a <disk_write>
    4b96:	b1 e0       	ldi	r27, 0x01	; 1
    4b98:	8b 1a       	sub	r8, r27
    4b9a:	91 08       	sbc	r9, r1
    4b9c:	e1 e0       	ldi	r30, 0x01	; 1
    4b9e:	8e 16       	cp	r8, r30
    4ba0:	91 04       	cpc	r9, r1
    4ba2:	39 f7       	brne	.-50     	; 0x4b72 <f_open+0xd64>
    4ba4:	44 ce       	rjmp	.-888    	; 0x482e <f_open+0xa20>
    4ba6:	01 e0       	ldi	r16, 0x01	; 1
    4ba8:	10 e0       	ldi	r17, 0x00	; 0
    4baa:	2b a5       	ldd	r18, Y+43	; 0x2b
    4bac:	3c a5       	ldd	r19, Y+44	; 0x2c
    4bae:	4d a5       	ldd	r20, Y+45	; 0x2d
    4bb0:	5e a5       	ldd	r21, Y+46	; 0x2e
    4bb2:	b1 01       	movw	r22, r2
    4bb4:	81 81       	ldd	r24, Z+1	; 0x01
    4bb6:	c9 d7       	rcall	.+3986   	; 0x5b4a <disk_write>
    4bb8:	81 11       	cpse	r24, r1
    4bba:	05 ce       	rjmp	.-1014   	; 0x47c6 <f_open+0x9b8>
    4bbc:	d5 01       	movw	r26, r10
    4bbe:	14 96       	adiw	r26, 0x04	; 4
    4bc0:	1c 92       	st	X, r1
    4bc2:	14 97       	sbiw	r26, 0x04	; 4
    4bc4:	5a 96       	adiw	r26, 0x1a	; 26
    4bc6:	8d 91       	ld	r24, X+
    4bc8:	9d 91       	ld	r25, X+
    4bca:	0d 90       	ld	r0, X+
    4bcc:	bc 91       	ld	r27, X
    4bce:	a0 2d       	mov	r26, r0
    4bd0:	f5 01       	movw	r30, r10
    4bd2:	42 a1       	ldd	r20, Z+34	; 0x22
    4bd4:	53 a1       	ldd	r21, Z+35	; 0x23
    4bd6:	64 a1       	ldd	r22, Z+36	; 0x24
    4bd8:	75 a1       	ldd	r23, Z+37	; 0x25
    4bda:	0b a5       	ldd	r16, Y+43	; 0x2b
    4bdc:	1c a5       	ldd	r17, Y+44	; 0x2c
    4bde:	2d a5       	ldd	r18, Y+45	; 0x2d
    4be0:	3e a5       	ldd	r19, Y+46	; 0x2e
    4be2:	04 1b       	sub	r16, r20
    4be4:	15 0b       	sbc	r17, r21
    4be6:	26 0b       	sbc	r18, r22
    4be8:	37 0b       	sbc	r19, r23
    4bea:	08 17       	cp	r16, r24
    4bec:	19 07       	cpc	r17, r25
    4bee:	2a 07       	cpc	r18, r26
    4bf0:	3b 07       	cpc	r19, r27
    4bf2:	08 f0       	brcs	.+2      	; 0x4bf6 <f_open+0xde8>
    4bf4:	0c cc       	rjmp	.-2024   	; 0x440e <f_open+0x600>
    4bf6:	83 80       	ldd	r8, Z+3	; 0x03
    4bf8:	91 2c       	mov	r9, r1
    4bfa:	12 e0       	ldi	r17, 0x02	; 2
    4bfc:	81 16       	cp	r8, r17
    4bfe:	91 04       	cpc	r9, r1
    4c00:	30 f4       	brcc	.+12     	; 0x4c0e <f_open+0xe00>
    4c02:	05 cc       	rjmp	.-2038   	; 0x440e <f_open+0x600>
    4c04:	f5 01       	movw	r30, r10
    4c06:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c08:	93 8d       	ldd	r25, Z+27	; 0x1b
    4c0a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4c0c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4c0e:	2b a5       	ldd	r18, Y+43	; 0x2b
    4c10:	3c a5       	ldd	r19, Y+44	; 0x2c
    4c12:	4d a5       	ldd	r20, Y+45	; 0x2d
    4c14:	5e a5       	ldd	r21, Y+46	; 0x2e
    4c16:	28 0f       	add	r18, r24
    4c18:	39 1f       	adc	r19, r25
    4c1a:	4a 1f       	adc	r20, r26
    4c1c:	5b 1f       	adc	r21, r27
    4c1e:	2b a7       	std	Y+43, r18	; 0x2b
    4c20:	3c a7       	std	Y+44, r19	; 0x2c
    4c22:	4d a7       	std	Y+45, r20	; 0x2d
    4c24:	5e a7       	std	Y+46, r21	; 0x2e
    4c26:	01 e0       	ldi	r16, 0x01	; 1
    4c28:	10 e0       	ldi	r17, 0x00	; 0
    4c2a:	b1 01       	movw	r22, r2
    4c2c:	d5 01       	movw	r26, r10
    4c2e:	11 96       	adiw	r26, 0x01	; 1
    4c30:	8c 91       	ld	r24, X
    4c32:	8b d7       	rcall	.+3862   	; 0x5b4a <disk_write>
    4c34:	b1 e0       	ldi	r27, 0x01	; 1
    4c36:	8b 1a       	sub	r8, r27
    4c38:	91 08       	sbc	r9, r1
    4c3a:	e1 e0       	ldi	r30, 0x01	; 1
    4c3c:	8e 16       	cp	r8, r30
    4c3e:	91 04       	cpc	r9, r1
    4c40:	09 f7       	brne	.-62     	; 0x4c04 <f_open+0xdf6>
    4c42:	e5 cb       	rjmp	.-2102   	; 0x440e <f_open+0x600>
    4c44:	4b ae       	std	Y+59, r4	; 0x3b
    4c46:	5c ae       	std	Y+60, r5	; 0x3c
    4c48:	6d ae       	std	Y+61, r6	; 0x3d
    4c4a:	7e ae       	std	Y+62, r7	; 0x3e
    4c4c:	fd cb       	rjmp	.-2054   	; 0x4448 <f_open+0x63a>
    4c4e:	d1 01       	movw	r26, r2
    4c50:	9e 96       	adiw	r26, 0x2e	; 46
    4c52:	4d 92       	st	X+, r4
    4c54:	5d 92       	st	X+, r5
    4c56:	6d 92       	st	X+, r6
    4c58:	7c 92       	st	X, r7
    4c5a:	d1 97       	sbiw	r26, 0x31	; 49
    4c5c:	af a1       	ldd	r26, Y+39	; 0x27
    4c5e:	b8 a5       	ldd	r27, Y+40	; 0x28
    4c60:	8d 91       	ld	r24, X+
    4c62:	9c 91       	ld	r25, X
    4c64:	85 35       	cpi	r24, 0x55	; 85
    4c66:	9a 4a       	sbci	r25, 0xAA	; 170
    4c68:	09 f0       	breq	.+2      	; 0x4c6c <f_open+0xe5e>
    4c6a:	83 c9       	rjmp	.-3322   	; 0x3f72 <f_open+0x164>
    4c6c:	ef a5       	ldd	r30, Y+47	; 0x2f
    4c6e:	f8 a9       	ldd	r31, Y+48	; 0x30
    4c70:	80 81       	ld	r24, Z
    4c72:	91 81       	ldd	r25, Z+1	; 0x01
    4c74:	a2 81       	ldd	r26, Z+2	; 0x02
    4c76:	b3 81       	ldd	r27, Z+3	; 0x03
    4c78:	bb 27       	eor	r27, r27
    4c7a:	86 34       	cpi	r24, 0x46	; 70
    4c7c:	91 44       	sbci	r25, 0x41	; 65
    4c7e:	a4 45       	sbci	r26, 0x54	; 84
    4c80:	b1 05       	cpc	r27, r1
    4c82:	09 f4       	brne	.+2      	; 0x4c86 <f_open+0xe78>
    4c84:	87 c9       	rjmp	.-3314   	; 0x3f94 <f_open+0x186>
    4c86:	eb a5       	ldd	r30, Y+43	; 0x2b
    4c88:	fc a5       	ldd	r31, Y+44	; 0x2c
    4c8a:	80 81       	ld	r24, Z
    4c8c:	91 81       	ldd	r25, Z+1	; 0x01
    4c8e:	a2 81       	ldd	r26, Z+2	; 0x02
    4c90:	b3 81       	ldd	r27, Z+3	; 0x03
    4c92:	bb 27       	eor	r27, r27
    4c94:	86 34       	cpi	r24, 0x46	; 70
    4c96:	91 44       	sbci	r25, 0x41	; 65
    4c98:	a4 45       	sbci	r26, 0x54	; 84
    4c9a:	b1 05       	cpc	r27, r1
    4c9c:	09 f4       	brne	.+2      	; 0x4ca0 <f_open+0xe92>
    4c9e:	7a c9       	rjmp	.-3340   	; 0x3f94 <f_open+0x186>
    4ca0:	8d e0       	ldi	r24, 0x0D	; 13
    4ca2:	12 c9       	rjmp	.-3548   	; 0x3ec8 <f_open+0xba>
    4ca4:	f1 01       	movw	r30, r2
    4ca6:	46 a6       	std	Z+46, r4	; 0x2e
    4ca8:	57 a6       	std	Z+47, r5	; 0x2f
    4caa:	60 aa       	std	Z+48, r6	; 0x30
    4cac:	71 aa       	std	Z+49, r7	; 0x31
    4cae:	ef a1       	ldd	r30, Y+39	; 0x27
    4cb0:	f8 a5       	ldd	r31, Y+40	; 0x28
    4cb2:	80 81       	ld	r24, Z
    4cb4:	91 81       	ldd	r25, Z+1	; 0x01
    4cb6:	85 35       	cpi	r24, 0x55	; 85
    4cb8:	9a 4a       	sbci	r25, 0xAA	; 170
    4cba:	09 f0       	breq	.+2      	; 0x4cbe <f_open+0xeb0>
    4cbc:	3b cd       	rjmp	.-1418   	; 0x4734 <f_open+0x926>
    4cbe:	ef a5       	ldd	r30, Y+47	; 0x2f
    4cc0:	f8 a9       	ldd	r31, Y+48	; 0x30
    4cc2:	80 81       	ld	r24, Z
    4cc4:	91 81       	ldd	r25, Z+1	; 0x01
    4cc6:	a2 81       	ldd	r26, Z+2	; 0x02
    4cc8:	b3 81       	ldd	r27, Z+3	; 0x03
    4cca:	bb 27       	eor	r27, r27
    4ccc:	86 34       	cpi	r24, 0x46	; 70
    4cce:	91 44       	sbci	r25, 0x41	; 65
    4cd0:	a4 45       	sbci	r26, 0x54	; 84
    4cd2:	b1 05       	cpc	r27, r1
    4cd4:	09 f4       	brne	.+2      	; 0x4cd8 <f_open+0xeca>
    4cd6:	5e c9       	rjmp	.-3396   	; 0x3f94 <f_open+0x186>
    4cd8:	eb a5       	ldd	r30, Y+43	; 0x2b
    4cda:	fc a5       	ldd	r31, Y+44	; 0x2c
    4cdc:	80 81       	ld	r24, Z
    4cde:	91 81       	ldd	r25, Z+1	; 0x01
    4ce0:	a2 81       	ldd	r26, Z+2	; 0x02
    4ce2:	b3 81       	ldd	r27, Z+3	; 0x03
    4ce4:	bb 27       	eor	r27, r27
    4ce6:	86 34       	cpi	r24, 0x46	; 70
    4ce8:	91 44       	sbci	r25, 0x41	; 65
    4cea:	a4 45       	sbci	r26, 0x54	; 84
    4cec:	b1 05       	cpc	r27, r1
    4cee:	09 f0       	breq	.+2      	; 0x4cf2 <f_open+0xee4>
    4cf0:	21 cd       	rjmp	.-1470   	; 0x4734 <f_open+0x926>
    4cf2:	50 c9       	rjmp	.-3424   	; 0x3f94 <f_open+0x186>
    4cf4:	23 96       	adiw	r28, 0x03	; 3
    4cf6:	2e ac       	ldd	r2, Y+62	; 0x3e
    4cf8:	3f ac       	ldd	r3, Y+63	; 0x3f
    4cfa:	23 97       	sbiw	r28, 0x03	; 3
    4cfc:	25 96       	adiw	r28, 0x05	; 5
    4cfe:	ce ac       	ldd	r12, Y+62	; 0x3e
    4d00:	df ac       	ldd	r13, Y+63	; 0x3f
    4d02:	25 97       	sbiw	r28, 0x05	; 5
    4d04:	e9 80       	ldd	r14, Y+1	; 0x01
    4d06:	fa 80       	ldd	r15, Y+2	; 0x02
    4d08:	8f a5       	ldd	r24, Y+47	; 0x2f
    4d0a:	98 a9       	ldd	r25, Y+48	; 0x30
    4d0c:	a9 a9       	ldd	r26, Y+49	; 0x31
    4d0e:	ba a9       	ldd	r27, Y+50	; 0x32
    4d10:	01 97       	sbiw	r24, 0x01	; 1
    4d12:	a1 09       	sbc	r26, r1
    4d14:	b1 09       	sbc	r27, r1
    4d16:	f7 01       	movw	r30, r14
    4d18:	82 87       	std	Z+10, r24	; 0x0a
    4d1a:	93 87       	std	Z+11, r25	; 0x0b
    4d1c:	a4 87       	std	Z+12, r26	; 0x0c
    4d1e:	b5 87       	std	Z+13, r27	; 0x0d
    4d20:	46 a4       	ldd	r4, Z+46	; 0x2e
    4d22:	57 a4       	ldd	r5, Z+47	; 0x2f
    4d24:	60 a8       	ldd	r6, Z+48	; 0x30
    4d26:	71 a8       	ldd	r7, Z+49	; 0x31
    4d28:	0f a9       	ldd	r16, Y+55	; 0x37
    4d2a:	18 ad       	ldd	r17, Y+56	; 0x38
    4d2c:	29 ad       	ldd	r18, Y+57	; 0x39
    4d2e:	3a ad       	ldd	r19, Y+58	; 0x3a
    4d30:	04 15       	cp	r16, r4
    4d32:	15 05       	cpc	r17, r5
    4d34:	26 05       	cpc	r18, r6
    4d36:	37 05       	cpc	r19, r7
    4d38:	09 f4       	brne	.+2      	; 0x4d3c <f_open+0xf2e>
    4d3a:	19 cc       	rjmp	.-1998   	; 0x456e <f_open+0x760>
    4d3c:	d7 01       	movw	r26, r14
    4d3e:	14 96       	adiw	r26, 0x04	; 4
    4d40:	8c 91       	ld	r24, X
    4d42:	81 11       	cpse	r24, r1
    4d44:	43 c0       	rjmp	.+134    	; 0x4dcc <f_open+0xfbe>
    4d46:	f7 01       	movw	r30, r14
    4d48:	f2 96       	adiw	r30, 0x32	; 50
    4d4a:	4f 01       	movw	r8, r30
    4d4c:	01 e0       	ldi	r16, 0x01	; 1
    4d4e:	10 e0       	ldi	r17, 0x00	; 0
    4d50:	2f a9       	ldd	r18, Y+55	; 0x37
    4d52:	38 ad       	ldd	r19, Y+56	; 0x38
    4d54:	49 ad       	ldd	r20, Y+57	; 0x39
    4d56:	5a ad       	ldd	r21, Y+58	; 0x3a
    4d58:	b4 01       	movw	r22, r8
    4d5a:	d7 01       	movw	r26, r14
    4d5c:	11 96       	adiw	r26, 0x01	; 1
    4d5e:	8c 91       	ld	r24, X
    4d60:	75 d6       	rcall	.+3306   	; 0x5a4c <disk_read>
    4d62:	88 23       	and	r24, r24
    4d64:	09 f4       	brne	.+2      	; 0x4d68 <f_open+0xf5a>
    4d66:	f6 cb       	rjmp	.-2068   	; 0x4554 <f_open+0x746>
    4d68:	8f ef       	ldi	r24, 0xFF	; 255
    4d6a:	9f ef       	ldi	r25, 0xFF	; 255
    4d6c:	dc 01       	movw	r26, r24
    4d6e:	f7 01       	movw	r30, r14
    4d70:	86 a7       	std	Z+46, r24	; 0x2e
    4d72:	97 a7       	std	Z+47, r25	; 0x2f
    4d74:	a0 ab       	std	Z+48, r26	; 0x30
    4d76:	b1 ab       	std	Z+49, r27	; 0x31
    4d78:	81 e0       	ldi	r24, 0x01	; 1
    4d7a:	a6 c8       	rjmp	.-3764   	; 0x3ec8 <f_open+0xba>
    4d7c:	f1 01       	movw	r30, r2
    4d7e:	46 a6       	std	Z+46, r4	; 0x2e
    4d80:	57 a6       	std	Z+47, r5	; 0x2f
    4d82:	60 aa       	std	Z+48, r6	; 0x30
    4d84:	71 aa       	std	Z+49, r7	; 0x31
    4d86:	ef a1       	ldd	r30, Y+39	; 0x27
    4d88:	f8 a5       	ldd	r31, Y+40	; 0x28
    4d8a:	80 81       	ld	r24, Z
    4d8c:	91 81       	ldd	r25, Z+1	; 0x01
    4d8e:	85 35       	cpi	r24, 0x55	; 85
    4d90:	9a 4a       	sbci	r25, 0xAA	; 170
    4d92:	09 f0       	breq	.+2      	; 0x4d96 <f_open+0xf88>
    4d94:	d9 cc       	rjmp	.-1614   	; 0x4748 <f_open+0x93a>
    4d96:	ef a5       	ldd	r30, Y+47	; 0x2f
    4d98:	f8 a9       	ldd	r31, Y+48	; 0x30
    4d9a:	80 81       	ld	r24, Z
    4d9c:	91 81       	ldd	r25, Z+1	; 0x01
    4d9e:	a2 81       	ldd	r26, Z+2	; 0x02
    4da0:	b3 81       	ldd	r27, Z+3	; 0x03
    4da2:	bb 27       	eor	r27, r27
    4da4:	86 34       	cpi	r24, 0x46	; 70
    4da6:	91 44       	sbci	r25, 0x41	; 65
    4da8:	a4 45       	sbci	r26, 0x54	; 84
    4daa:	b1 05       	cpc	r27, r1
    4dac:	09 f4       	brne	.+2      	; 0x4db0 <f_open+0xfa2>
    4dae:	f2 c8       	rjmp	.-3612   	; 0x3f94 <f_open+0x186>
    4db0:	eb a5       	ldd	r30, Y+43	; 0x2b
    4db2:	fc a5       	ldd	r31, Y+44	; 0x2c
    4db4:	80 81       	ld	r24, Z
    4db6:	91 81       	ldd	r25, Z+1	; 0x01
    4db8:	a2 81       	ldd	r26, Z+2	; 0x02
    4dba:	b3 81       	ldd	r27, Z+3	; 0x03
    4dbc:	bb 27       	eor	r27, r27
    4dbe:	86 34       	cpi	r24, 0x46	; 70
    4dc0:	91 44       	sbci	r25, 0x41	; 65
    4dc2:	a4 45       	sbci	r26, 0x54	; 84
    4dc4:	b1 05       	cpc	r27, r1
    4dc6:	09 f0       	breq	.+2      	; 0x4dca <f_open+0xfbc>
    4dc8:	bf cc       	rjmp	.-1666   	; 0x4748 <f_open+0x93a>
    4dca:	e4 c8       	rjmp	.-3640   	; 0x3f94 <f_open+0x186>
    4dcc:	47 01       	movw	r8, r14
    4dce:	f2 e3       	ldi	r31, 0x32	; 50
    4dd0:	8f 0e       	add	r8, r31
    4dd2:	91 1c       	adc	r9, r1
    4dd4:	01 e0       	ldi	r16, 0x01	; 1
    4dd6:	10 e0       	ldi	r17, 0x00	; 0
    4dd8:	a3 01       	movw	r20, r6
    4dda:	92 01       	movw	r18, r4
    4ddc:	b4 01       	movw	r22, r8
    4dde:	d7 01       	movw	r26, r14
    4de0:	11 96       	adiw	r26, 0x01	; 1
    4de2:	8c 91       	ld	r24, X
    4de4:	b2 d6       	rcall	.+3428   	; 0x5b4a <disk_write>
    4de6:	81 11       	cpse	r24, r1
    4de8:	ee cc       	rjmp	.-1572   	; 0x47c6 <f_open+0x9b8>
    4dea:	f7 01       	movw	r30, r14
    4dec:	14 82       	std	Z+4, r1	; 0x04
    4dee:	82 a1       	ldd	r24, Z+34	; 0x22
    4df0:	93 a1       	ldd	r25, Z+35	; 0x23
    4df2:	a4 a1       	ldd	r26, Z+36	; 0x24
    4df4:	b5 a1       	ldd	r27, Z+37	; 0x25
    4df6:	b3 01       	movw	r22, r6
    4df8:	a2 01       	movw	r20, r4
    4dfa:	48 1b       	sub	r20, r24
    4dfc:	59 0b       	sbc	r21, r25
    4dfe:	6a 0b       	sbc	r22, r26
    4e00:	7b 0b       	sbc	r23, r27
    4e02:	82 8d       	ldd	r24, Z+26	; 0x1a
    4e04:	93 8d       	ldd	r25, Z+27	; 0x1b
    4e06:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4e08:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4e0a:	48 17       	cp	r20, r24
    4e0c:	59 07       	cpc	r21, r25
    4e0e:	6a 07       	cpc	r22, r26
    4e10:	7b 07       	cpc	r23, r27
    4e12:	08 f0       	brcs	.+2      	; 0x4e16 <f_open+0x1008>
    4e14:	9b cf       	rjmp	.-202    	; 0x4d4c <f_open+0xf3e>
    4e16:	a3 80       	ldd	r10, Z+3	; 0x03
    4e18:	b1 2c       	mov	r11, r1
    4e1a:	f2 e0       	ldi	r31, 0x02	; 2
    4e1c:	af 16       	cp	r10, r31
    4e1e:	b1 04       	cpc	r11, r1
    4e20:	30 f4       	brcc	.+12     	; 0x4e2e <f_open+0x1020>
    4e22:	94 cf       	rjmp	.-216    	; 0x4d4c <f_open+0xf3e>
    4e24:	f7 01       	movw	r30, r14
    4e26:	82 8d       	ldd	r24, Z+26	; 0x1a
    4e28:	93 8d       	ldd	r25, Z+27	; 0x1b
    4e2a:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4e2c:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4e2e:	48 0e       	add	r4, r24
    4e30:	59 1e       	adc	r5, r25
    4e32:	6a 1e       	adc	r6, r26
    4e34:	7b 1e       	adc	r7, r27
    4e36:	01 e0       	ldi	r16, 0x01	; 1
    4e38:	10 e0       	ldi	r17, 0x00	; 0
    4e3a:	a3 01       	movw	r20, r6
    4e3c:	92 01       	movw	r18, r4
    4e3e:	b4 01       	movw	r22, r8
    4e40:	d7 01       	movw	r26, r14
    4e42:	11 96       	adiw	r26, 0x01	; 1
    4e44:	8c 91       	ld	r24, X
    4e46:	81 d6       	rcall	.+3330   	; 0x5b4a <disk_write>
    4e48:	b1 e0       	ldi	r27, 0x01	; 1
    4e4a:	ab 1a       	sub	r10, r27
    4e4c:	b1 08       	sbc	r11, r1
    4e4e:	e1 e0       	ldi	r30, 0x01	; 1
    4e50:	ae 16       	cp	r10, r30
    4e52:	b1 04       	cpc	r11, r1
    4e54:	39 f7       	brne	.-50     	; 0x4e24 <f_open+0x1016>
    4e56:	7a cf       	rjmp	.-268    	; 0x4d4c <f_open+0xf3e>
    4e58:	80 e0       	ldi	r24, 0x00	; 0
    4e5a:	90 e0       	ldi	r25, 0x00	; 0
    4e5c:	dc 01       	movw	r26, r24
    4e5e:	5c cc       	rjmp	.-1864   	; 0x4718 <f_open+0x90a>
    4e60:	80 e0       	ldi	r24, 0x00	; 0
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	dc 01       	movw	r26, r24
    4e66:	48 cc       	rjmp	.-1904   	; 0x46f8 <f_open+0x8ea>
    4e68:	80 e0       	ldi	r24, 0x00	; 0
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	dc 01       	movw	r26, r24
    4e6e:	34 cc       	rjmp	.-1944   	; 0x46d8 <f_open+0x8ca>
    4e70:	80 e0       	ldi	r24, 0x00	; 0
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	dc 01       	movw	r26, r24
    4e76:	20 cc       	rjmp	.-1984   	; 0x46b8 <f_open+0x8aa>
    4e78:	80 e0       	ldi	r24, 0x00	; 0
    4e7a:	73 c8       	rjmp	.-3866   	; 0x3f62 <f_open+0x154>
    4e7c:	af e0       	ldi	r26, 0x0F	; 15
    4e7e:	5a 22       	and	r5, r26
    4e80:	61 2c       	mov	r6, r1
    4e82:	71 2c       	mov	r7, r1
    4e84:	3b cb       	rjmp	.-2442   	; 0x44fc <f_open+0x6ee>
    4e86:	01 e0       	ldi	r16, 0x01	; 1
    4e88:	10 e0       	ldi	r17, 0x00	; 0
    4e8a:	a3 01       	movw	r20, r6
    4e8c:	92 01       	movw	r18, r4
    4e8e:	b1 01       	movw	r22, r2
    4e90:	11 96       	adiw	r26, 0x01	; 1
    4e92:	8c 91       	ld	r24, X
    4e94:	5a d6       	rcall	.+3252   	; 0x5b4a <disk_write>
    4e96:	81 11       	cpse	r24, r1
    4e98:	96 cc       	rjmp	.-1748   	; 0x47c6 <f_open+0x9b8>
    4e9a:	f5 01       	movw	r30, r10
    4e9c:	14 82       	std	Z+4, r1	; 0x04
    4e9e:	82 a1       	ldd	r24, Z+34	; 0x22
    4ea0:	93 a1       	ldd	r25, Z+35	; 0x23
    4ea2:	a4 a1       	ldd	r26, Z+36	; 0x24
    4ea4:	b5 a1       	ldd	r27, Z+37	; 0x25
    4ea6:	48 1a       	sub	r4, r24
    4ea8:	59 0a       	sbc	r5, r25
    4eaa:	6a 0a       	sbc	r6, r26
    4eac:	7b 0a       	sbc	r7, r27
    4eae:	82 8d       	ldd	r24, Z+26	; 0x1a
    4eb0:	93 8d       	ldd	r25, Z+27	; 0x1b
    4eb2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4eb4:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4eb6:	48 16       	cp	r4, r24
    4eb8:	59 06       	cpc	r5, r25
    4eba:	6a 06       	cpc	r6, r26
    4ebc:	7b 06       	cpc	r7, r27
    4ebe:	08 f0       	brcs	.+2      	; 0x4ec2 <f_open+0x10b4>
    4ec0:	ed ca       	rjmp	.-2598   	; 0x449c <f_open+0x68e>
    4ec2:	83 80       	ldd	r8, Z+3	; 0x03
    4ec4:	91 2c       	mov	r9, r1
    4ec6:	f2 e0       	ldi	r31, 0x02	; 2
    4ec8:	8f 16       	cp	r8, r31
    4eca:	91 04       	cpc	r9, r1
    4ecc:	08 f4       	brcc	.+2      	; 0x4ed0 <f_open+0x10c2>
    4ece:	e6 ca       	rjmp	.-2612   	; 0x449c <f_open+0x68e>
    4ed0:	4b ac       	ldd	r4, Y+59	; 0x3b
    4ed2:	5c ac       	ldd	r5, Y+60	; 0x3c
    4ed4:	6d ac       	ldd	r6, Y+61	; 0x3d
    4ed6:	7e ac       	ldd	r7, Y+62	; 0x3e
    4ed8:	05 c0       	rjmp	.+10     	; 0x4ee4 <f_open+0x10d6>
    4eda:	f5 01       	movw	r30, r10
    4edc:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ede:	93 8d       	ldd	r25, Z+27	; 0x1b
    4ee0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    4ee2:	b5 8d       	ldd	r27, Z+29	; 0x1d
    4ee4:	48 0e       	add	r4, r24
    4ee6:	59 1e       	adc	r5, r25
    4ee8:	6a 1e       	adc	r6, r26
    4eea:	7b 1e       	adc	r7, r27
    4eec:	01 e0       	ldi	r16, 0x01	; 1
    4eee:	10 e0       	ldi	r17, 0x00	; 0
    4ef0:	a3 01       	movw	r20, r6
    4ef2:	92 01       	movw	r18, r4
    4ef4:	b1 01       	movw	r22, r2
    4ef6:	d5 01       	movw	r26, r10
    4ef8:	11 96       	adiw	r26, 0x01	; 1
    4efa:	8c 91       	ld	r24, X
    4efc:	26 d6       	rcall	.+3148   	; 0x5b4a <disk_write>
    4efe:	b1 e0       	ldi	r27, 0x01	; 1
    4f00:	8b 1a       	sub	r8, r27
    4f02:	91 08       	sbc	r9, r1
    4f04:	e1 e0       	ldi	r30, 0x01	; 1
    4f06:	8e 16       	cp	r8, r30
    4f08:	91 04       	cpc	r9, r1
    4f0a:	39 f7       	brne	.-50     	; 0x4eda <f_open+0x10cc>
    4f0c:	c7 ca       	rjmp	.-2674   	; 0x449c <f_open+0x68e>
    4f0e:	f1 01       	movw	r30, r2
    4f10:	ee 59       	subi	r30, 0x9E	; 158
    4f12:	ff 4f       	sbci	r31, 0xFF	; 255
    4f14:	80 81       	ld	r24, Z
    4f16:	91 81       	ldd	r25, Z+1	; 0x01
    4f18:	01 97       	sbiw	r24, 0x01	; 1
    4f1a:	09 f0       	breq	.+2      	; 0x4f1e <f_open+0x1110>
    4f1c:	76 c9       	rjmp	.-3348   	; 0x420a <f_open+0x3fc>
    4f1e:	b3 01       	movw	r22, r6
    4f20:	a2 01       	movw	r20, r4
    4f22:	4f 5f       	subi	r20, 0xFF	; 255
    4f24:	5f 4f       	sbci	r21, 0xFF	; 255
    4f26:	6f 4f       	sbci	r22, 0xFF	; 255
    4f28:	7f 4f       	sbci	r23, 0xFF	; 255
    4f2a:	c1 01       	movw	r24, r2
    4f2c:	0e 94 d4 06 	call	0xda8	; 0xda8 <move_window>
    4f30:	81 11       	cpse	r24, r1
    4f32:	6b c9       	rjmp	.-3370   	; 0x420a <f_open+0x3fc>
    4f34:	d1 01       	movw	r26, r2
    4f36:	15 96       	adiw	r26, 0x05	; 5
    4f38:	1c 92       	st	X, r1
    4f3a:	f1 01       	movw	r30, r2
    4f3c:	e0 5d       	subi	r30, 0xD0	; 208
    4f3e:	fd 4f       	sbci	r31, 0xFD	; 253
    4f40:	80 81       	ld	r24, Z
    4f42:	91 81       	ldd	r25, Z+1	; 0x01
    4f44:	85 35       	cpi	r24, 0x55	; 85
    4f46:	9a 4a       	sbci	r25, 0xAA	; 170
    4f48:	09 f0       	breq	.+2      	; 0x4f4c <f_open+0x113e>
    4f4a:	5f c9       	rjmp	.-3394   	; 0x420a <f_open+0x3fc>
    4f4c:	f1 01       	movw	r30, r2
    4f4e:	82 a9       	ldd	r24, Z+50	; 0x32
    4f50:	93 a9       	ldd	r25, Z+51	; 0x33
    4f52:	a4 a9       	ldd	r26, Z+52	; 0x34
    4f54:	b5 a9       	ldd	r27, Z+53	; 0x35
    4f56:	82 35       	cpi	r24, 0x52	; 82
    4f58:	92 45       	sbci	r25, 0x52	; 82
    4f5a:	a1 46       	sbci	r26, 0x61	; 97
    4f5c:	b1 44       	sbci	r27, 0x41	; 65
    4f5e:	09 f0       	breq	.+2      	; 0x4f62 <f_open+0x1154>
    4f60:	54 c9       	rjmp	.-3416   	; 0x420a <f_open+0x3fc>
    4f62:	f1 01       	movw	r30, r2
    4f64:	ea 5e       	subi	r30, 0xEA	; 234
    4f66:	fd 4f       	sbci	r31, 0xFD	; 253
    4f68:	80 81       	ld	r24, Z
    4f6a:	91 81       	ldd	r25, Z+1	; 0x01
    4f6c:	a2 81       	ldd	r26, Z+2	; 0x02
    4f6e:	b3 81       	ldd	r27, Z+3	; 0x03
    4f70:	82 37       	cpi	r24, 0x72	; 114
    4f72:	92 47       	sbci	r25, 0x72	; 114
    4f74:	a1 44       	sbci	r26, 0x41	; 65
    4f76:	b1 46       	sbci	r27, 0x61	; 97
    4f78:	09 f0       	breq	.+2      	; 0x4f7c <f_open+0x116e>
    4f7a:	47 c9       	rjmp	.-3442   	; 0x420a <f_open+0x3fc>
    4f7c:	34 96       	adiw	r30, 0x04	; 4
    4f7e:	80 81       	ld	r24, Z
    4f80:	91 81       	ldd	r25, Z+1	; 0x01
    4f82:	a2 81       	ldd	r26, Z+2	; 0x02
    4f84:	b3 81       	ldd	r27, Z+3	; 0x03
    4f86:	f1 01       	movw	r30, r2
    4f88:	86 87       	std	Z+14, r24	; 0x0e
    4f8a:	97 87       	std	Z+15, r25	; 0x0f
    4f8c:	a0 8b       	std	Z+16, r26	; 0x10
    4f8e:	b1 8b       	std	Z+17, r27	; 0x11
    4f90:	e2 5e       	subi	r30, 0xE2	; 226
    4f92:	fd 4f       	sbci	r31, 0xFD	; 253
    4f94:	80 81       	ld	r24, Z
    4f96:	91 81       	ldd	r25, Z+1	; 0x01
    4f98:	a2 81       	ldd	r26, Z+2	; 0x02
    4f9a:	b3 81       	ldd	r27, Z+3	; 0x03
    4f9c:	f1 01       	movw	r30, r2
    4f9e:	82 87       	std	Z+10, r24	; 0x0a
    4fa0:	93 87       	std	Z+11, r25	; 0x0b
    4fa2:	a4 87       	std	Z+12, r26	; 0x0c
    4fa4:	b5 87       	std	Z+13, r27	; 0x0d
    4fa6:	31 c9       	rjmp	.-3486   	; 0x420a <f_open+0x3fc>
    4fa8:	6b a5       	ldd	r22, Y+43	; 0x2b
    4faa:	7c a5       	ldd	r23, Y+44	; 0x2c
    4fac:	8d a5       	ldd	r24, Y+45	; 0x2d
    4fae:	9e a5       	ldd	r25, Y+46	; 0x2e
    4fb0:	66 0f       	add	r22, r22
    4fb2:	77 1f       	adc	r23, r23
    4fb4:	88 1f       	adc	r24, r24
    4fb6:	99 1f       	adc	r25, r25
    4fb8:	ff c8       	rjmp	.-3586   	; 0x41b8 <f_open+0x3aa>
    4fba:	ba 01       	movw	r22, r20
    4fbc:	a9 01       	movw	r20, r18
    4fbe:	4e 5f       	subi	r20, 0xFE	; 254
    4fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    4fc2:	6f 4f       	sbci	r22, 0xFF	; 255
    4fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    4fc6:	d1 01       	movw	r26, r2
    4fc8:	56 96       	adiw	r26, 0x16	; 22
    4fca:	4d 93       	st	X+, r20
    4fcc:	5d 93       	st	X+, r21
    4fce:	6d 93       	st	X+, r22
    4fd0:	7c 93       	st	X, r23
    4fd2:	59 97       	sbiw	r26, 0x19	; 25
    4fd4:	f1 01       	movw	r30, r2
    4fd6:	46 8e       	std	Z+30, r4	; 0x1e
    4fd8:	57 8e       	std	Z+31, r5	; 0x1f
    4fda:	60 a2       	std	Z+32, r6	; 0x20
    4fdc:	71 a2       	std	Z+33, r7	; 0x21
    4fde:	8b a9       	ldd	r24, Y+51	; 0x33
    4fe0:	9c a9       	ldd	r25, Y+52	; 0x34
    4fe2:	ad a9       	ldd	r26, Y+53	; 0x35
    4fe4:	be a9       	ldd	r27, Y+54	; 0x36
    4fe6:	84 0d       	add	r24, r4
    4fe8:	95 1d       	adc	r25, r5
    4fea:	a6 1d       	adc	r26, r6
    4fec:	b7 1d       	adc	r27, r7
    4fee:	82 a3       	std	Z+34, r24	; 0x22
    4ff0:	93 a3       	std	Z+35, r25	; 0x23
    4ff2:	a4 a3       	std	Z+36, r26	; 0x24
    4ff4:	b5 a3       	std	Z+37, r27	; 0x25
    4ff6:	d8 01       	movw	r26, r16
    4ff8:	c7 01       	movw	r24, r14
    4ffa:	84 0d       	add	r24, r4
    4ffc:	95 1d       	adc	r25, r5
    4ffe:	a6 1d       	adc	r26, r6
    5000:	b7 1d       	adc	r27, r7
    5002:	82 a7       	std	Z+42, r24	; 0x2a
    5004:	93 a7       	std	Z+43, r25	; 0x2b
    5006:	a4 a7       	std	Z+44, r26	; 0x2c
    5008:	b5 a7       	std	Z+45, r27	; 0x2d
    500a:	ef a4       	ldd	r14, Y+47	; 0x2f
    500c:	f8 a8       	ldd	r15, Y+48	; 0x30
    500e:	ef 28       	or	r14, r15
    5010:	11 f0       	breq	.+4      	; 0x5016 <f_open+0x1208>
    5012:	0c 94 b9 1f 	jmp	0x3f72	; 0x3f72 <f_open+0x164>
    5016:	f1 01       	movw	r30, r2
    5018:	e2 5a       	subi	r30, 0xA2	; 162
    501a:	ff 4f       	sbci	r31, 0xFF	; 255
    501c:	80 81       	ld	r24, Z
    501e:	91 81       	ldd	r25, Z+1	; 0x01
    5020:	a2 81       	ldd	r26, Z+2	; 0x02
    5022:	b3 81       	ldd	r27, Z+3	; 0x03
    5024:	f1 01       	movw	r30, r2
    5026:	86 a3       	std	Z+38, r24	; 0x26
    5028:	97 a3       	std	Z+39, r25	; 0x27
    502a:	a0 a7       	std	Z+40, r26	; 0x28
    502c:	b1 a7       	std	Z+41, r27	; 0x29
    502e:	cb 01       	movw	r24, r22
    5030:	ba 01       	movw	r22, r20
    5032:	66 0f       	add	r22, r22
    5034:	77 1f       	adc	r23, r23
    5036:	88 1f       	adc	r24, r24
    5038:	99 1f       	adc	r25, r25
    503a:	66 0f       	add	r22, r22
    503c:	77 1f       	adc	r23, r23
    503e:	88 1f       	adc	r24, r24
    5040:	99 1f       	adc	r25, r25
    5042:	13 e0       	ldi	r17, 0x03	; 3
    5044:	81 2e       	mov	r8, r17
    5046:	b8 c8       	rjmp	.-3728   	; 0x41b8 <f_open+0x3aa>
    5048:	88 24       	eor	r8, r8
    504a:	83 94       	inc	r8
    504c:	5b c8       	rjmp	.-3914   	; 0x4104 <f_open+0x2f6>

0000504e <f_read>:
    504e:	2f 92       	push	r2
    5050:	3f 92       	push	r3
    5052:	4f 92       	push	r4
    5054:	5f 92       	push	r5
    5056:	6f 92       	push	r6
    5058:	7f 92       	push	r7
    505a:	8f 92       	push	r8
    505c:	9f 92       	push	r9
    505e:	af 92       	push	r10
    5060:	bf 92       	push	r11
    5062:	cf 92       	push	r12
    5064:	df 92       	push	r13
    5066:	ef 92       	push	r14
    5068:	ff 92       	push	r15
    506a:	0f 93       	push	r16
    506c:	1f 93       	push	r17
    506e:	cf 93       	push	r28
    5070:	df 93       	push	r29
    5072:	cd b7       	in	r28, 0x3d	; 61
    5074:	de b7       	in	r29, 0x3e	; 62
    5076:	2c 97       	sbiw	r28, 0x0c	; 12
    5078:	cd bf       	out	0x3d, r28	; 61
    507a:	de bf       	out	0x3e, r29	; 62
    507c:	1c 01       	movw	r2, r24
    507e:	2b 01       	movw	r4, r22
    5080:	4a 01       	movw	r8, r20
    5082:	29 83       	std	Y+1, r18	; 0x01
    5084:	3a 83       	std	Y+2, r19	; 0x02
    5086:	d9 01       	movw	r26, r18
    5088:	1d 92       	st	X+, r1
    508a:	1c 92       	st	X, r1
    508c:	00 97       	sbiw	r24, 0x00	; 0
    508e:	49 f0       	breq	.+18     	; 0x50a2 <f_read+0x54>
    5090:	dc 01       	movw	r26, r24
    5092:	ed 91       	ld	r30, X+
    5094:	fc 91       	ld	r31, X
    5096:	11 97       	sbiw	r26, 0x01	; 1
    5098:	30 97       	sbiw	r30, 0x00	; 0
    509a:	19 f0       	breq	.+6      	; 0x50a2 <f_read+0x54>
    509c:	80 81       	ld	r24, Z
    509e:	81 11       	cpse	r24, r1
    50a0:	17 c0       	rjmp	.+46     	; 0x50d0 <f_read+0x82>
    50a2:	89 e0       	ldi	r24, 0x09	; 9
    50a4:	2c 96       	adiw	r28, 0x0c	; 12
    50a6:	cd bf       	out	0x3d, r28	; 61
    50a8:	de bf       	out	0x3e, r29	; 62
    50aa:	df 91       	pop	r29
    50ac:	cf 91       	pop	r28
    50ae:	1f 91       	pop	r17
    50b0:	0f 91       	pop	r16
    50b2:	ff 90       	pop	r15
    50b4:	ef 90       	pop	r14
    50b6:	df 90       	pop	r13
    50b8:	cf 90       	pop	r12
    50ba:	bf 90       	pop	r11
    50bc:	af 90       	pop	r10
    50be:	9f 90       	pop	r9
    50c0:	8f 90       	pop	r8
    50c2:	7f 90       	pop	r7
    50c4:	6f 90       	pop	r6
    50c6:	5f 90       	pop	r5
    50c8:	4f 90       	pop	r4
    50ca:	3f 90       	pop	r3
    50cc:	2f 90       	pop	r2
    50ce:	08 95       	ret
    50d0:	26 81       	ldd	r18, Z+6	; 0x06
    50d2:	37 81       	ldd	r19, Z+7	; 0x07
    50d4:	12 96       	adiw	r26, 0x02	; 2
    50d6:	8d 91       	ld	r24, X+
    50d8:	9c 91       	ld	r25, X
    50da:	13 97       	sbiw	r26, 0x03	; 3
    50dc:	28 17       	cp	r18, r24
    50de:	39 07       	cpc	r19, r25
    50e0:	01 f7       	brne	.-64     	; 0x50a2 <f_read+0x54>
    50e2:	81 81       	ldd	r24, Z+1	; 0x01
    50e4:	ac d4       	rcall	.+2392   	; 0x5a3e <disk_status>
    50e6:	80 ff       	sbrs	r24, 0
    50e8:	02 c0       	rjmp	.+4      	; 0x50ee <f_read+0xa0>
    50ea:	83 e0       	ldi	r24, 0x03	; 3
    50ec:	db cf       	rjmp	.-74     	; 0x50a4 <f_read+0x56>
    50ee:	d1 01       	movw	r26, r2
    50f0:	15 96       	adiw	r26, 0x05	; 5
    50f2:	8c 91       	ld	r24, X
    50f4:	81 11       	cpse	r24, r1
    50f6:	d6 cf       	rjmp	.-84     	; 0x50a4 <f_read+0x56>
    50f8:	f1 01       	movw	r30, r2
    50fa:	84 81       	ldd	r24, Z+4	; 0x04
    50fc:	80 fd       	sbrc	r24, 0
    50fe:	02 c0       	rjmp	.+4      	; 0x5104 <f_read+0xb6>
    5100:	87 e0       	ldi	r24, 0x07	; 7
    5102:	d0 cf       	rjmp	.-96     	; 0x50a4 <f_read+0x56>
    5104:	86 81       	ldd	r24, Z+6	; 0x06
    5106:	97 81       	ldd	r25, Z+7	; 0x07
    5108:	a0 85       	ldd	r26, Z+8	; 0x08
    510a:	b1 85       	ldd	r27, Z+9	; 0x09
    510c:	42 85       	ldd	r20, Z+10	; 0x0a
    510e:	53 85       	ldd	r21, Z+11	; 0x0b
    5110:	64 85       	ldd	r22, Z+12	; 0x0c
    5112:	75 85       	ldd	r23, Z+13	; 0x0d
    5114:	48 1b       	sub	r20, r24
    5116:	59 0b       	sbc	r21, r25
    5118:	6a 0b       	sbc	r22, r26
    511a:	7b 0b       	sbc	r23, r27
    511c:	64 01       	movw	r12, r8
    511e:	e1 2c       	mov	r14, r1
    5120:	f1 2c       	mov	r15, r1
    5122:	4c 15       	cp	r20, r12
    5124:	5d 05       	cpc	r21, r13
    5126:	6e 05       	cpc	r22, r14
    5128:	7f 05       	cpc	r23, r15
    512a:	08 f4       	brcc	.+2      	; 0x512e <f_read+0xe0>
    512c:	4a 01       	movw	r8, r20
    512e:	81 14       	cp	r8, r1
    5130:	91 04       	cpc	r9, r1
    5132:	09 f4       	brne	.+2      	; 0x5136 <f_read+0xe8>
    5134:	bf c0       	rjmp	.+382    	; 0x52b4 <f_read+0x266>
    5136:	34 01       	movw	r6, r8
    5138:	ac 01       	movw	r20, r24
    513a:	bd 01       	movw	r22, r26
    513c:	51 70       	andi	r21, 0x01	; 1
    513e:	66 27       	eor	r22, r22
    5140:	77 27       	eor	r23, r23
    5142:	f1 01       	movw	r30, r2
    5144:	45 2b       	or	r20, r21
    5146:	46 2b       	or	r20, r22
    5148:	47 2b       	or	r20, r23
    514a:	09 f4       	brne	.+2      	; 0x514e <f_read+0x100>
    514c:	b5 c0       	rjmp	.+362    	; 0x52b8 <f_read+0x26a>
    514e:	06 89       	ldd	r16, Z+22	; 0x16
    5150:	17 89       	ldd	r17, Z+23	; 0x17
    5152:	20 8d       	ldd	r18, Z+24	; 0x18
    5154:	31 8d       	ldd	r19, Z+25	; 0x19
    5156:	0b 83       	std	Y+3, r16	; 0x03
    5158:	1c 83       	std	Y+4, r17	; 0x04
    515a:	2d 83       	std	Y+5, r18	; 0x05
    515c:	3e 83       	std	Y+6, r19	; 0x06
    515e:	00 81       	ld	r16, Z
    5160:	11 81       	ldd	r17, Z+1	; 0x01
    5162:	0b 87       	std	Y+11, r16	; 0x0b
    5164:	1c 87       	std	Y+12, r17	; 0x0c
    5166:	9c 01       	movw	r18, r24
    5168:	31 70       	andi	r19, 0x01	; 1
    516a:	e1 2c       	mov	r14, r1
    516c:	52 e0       	ldi	r21, 0x02	; 2
    516e:	f5 2e       	mov	r15, r21
    5170:	e2 1a       	sub	r14, r18
    5172:	f3 0a       	sbc	r15, r19
    5174:	6e 14       	cp	r6, r14
    5176:	7f 04       	cpc	r7, r15
    5178:	08 f4       	brcc	.+2      	; 0x517c <f_read+0x12e>
    517a:	73 01       	movw	r14, r6
    517c:	eb 85       	ldd	r30, Y+11	; 0x0b
    517e:	fc 85       	ldd	r31, Y+12	; 0x0c
    5180:	86 a4       	ldd	r8, Z+46	; 0x2e
    5182:	97 a4       	ldd	r9, Z+47	; 0x2f
    5184:	a0 a8       	ldd	r10, Z+48	; 0x30
    5186:	b1 a8       	ldd	r11, Z+49	; 0x31
    5188:	0b 81       	ldd	r16, Y+3	; 0x03
    518a:	1c 81       	ldd	r17, Y+4	; 0x04
    518c:	2d 81       	ldd	r18, Y+5	; 0x05
    518e:	3e 81       	ldd	r19, Y+6	; 0x06
    5190:	80 16       	cp	r8, r16
    5192:	91 06       	cpc	r9, r17
    5194:	a2 06       	cpc	r10, r18
    5196:	b3 06       	cpc	r11, r19
    5198:	e1 f1       	breq	.+120    	; 0x5212 <f_read+0x1c4>
    519a:	84 81       	ldd	r24, Z+4	; 0x04
    519c:	81 11       	cpse	r24, r1
    519e:	5e c1       	rjmp	.+700    	; 0x545c <f_read+0x40e>
    51a0:	eb 85       	ldd	r30, Y+11	; 0x0b
    51a2:	fc 85       	ldd	r31, Y+12	; 0x0c
    51a4:	f2 96       	adiw	r30, 0x32	; 50
    51a6:	ef 83       	std	Y+7, r30	; 0x07
    51a8:	f8 87       	std	Y+8, r31	; 0x08
    51aa:	01 e0       	ldi	r16, 0x01	; 1
    51ac:	10 e0       	ldi	r17, 0x00	; 0
    51ae:	2b 81       	ldd	r18, Y+3	; 0x03
    51b0:	3c 81       	ldd	r19, Y+4	; 0x04
    51b2:	4d 81       	ldd	r20, Y+5	; 0x05
    51b4:	5e 81       	ldd	r21, Y+6	; 0x06
    51b6:	6f 81       	ldd	r22, Y+7	; 0x07
    51b8:	78 85       	ldd	r23, Y+8	; 0x08
    51ba:	ab 85       	ldd	r26, Y+11	; 0x0b
    51bc:	bc 85       	ldd	r27, Y+12	; 0x0c
    51be:	11 96       	adiw	r26, 0x01	; 1
    51c0:	8c 91       	ld	r24, X
    51c2:	44 d4       	rcall	.+2184   	; 0x5a4c <disk_read>
    51c4:	88 23       	and	r24, r24
    51c6:	71 f0       	breq	.+28     	; 0x51e4 <f_read+0x196>
    51c8:	ab 84       	ldd	r10, Y+11	; 0x0b
    51ca:	bc 84       	ldd	r11, Y+12	; 0x0c
    51cc:	8f ef       	ldi	r24, 0xFF	; 255
    51ce:	9f ef       	ldi	r25, 0xFF	; 255
    51d0:	dc 01       	movw	r26, r24
    51d2:	f5 01       	movw	r30, r10
    51d4:	86 a7       	std	Z+46, r24	; 0x2e
    51d6:	97 a7       	std	Z+47, r25	; 0x2f
    51d8:	a0 ab       	std	Z+48, r26	; 0x30
    51da:	b1 ab       	std	Z+49, r27	; 0x31
    51dc:	81 e0       	ldi	r24, 0x01	; 1
    51de:	f1 01       	movw	r30, r2
    51e0:	85 83       	std	Z+5, r24	; 0x05
    51e2:	60 cf       	rjmp	.-320    	; 0x50a4 <f_read+0x56>
    51e4:	0b 81       	ldd	r16, Y+3	; 0x03
    51e6:	1c 81       	ldd	r17, Y+4	; 0x04
    51e8:	2d 81       	ldd	r18, Y+5	; 0x05
    51ea:	3e 81       	ldd	r19, Y+6	; 0x06
    51ec:	ab 85       	ldd	r26, Y+11	; 0x0b
    51ee:	bc 85       	ldd	r27, Y+12	; 0x0c
    51f0:	9e 96       	adiw	r26, 0x2e	; 46
    51f2:	0d 93       	st	X+, r16
    51f4:	1d 93       	st	X+, r17
    51f6:	2d 93       	st	X+, r18
    51f8:	3c 93       	st	X, r19
    51fa:	d1 97       	sbiw	r26, 0x31	; 49
    51fc:	f1 01       	movw	r30, r2
    51fe:	01 90       	ld	r0, Z+
    5200:	f0 81       	ld	r31, Z
    5202:	e0 2d       	mov	r30, r0
    5204:	eb 87       	std	Y+11, r30	; 0x0b
    5206:	fc 87       	std	Y+12, r31	; 0x0c
    5208:	f1 01       	movw	r30, r2
    520a:	86 81       	ldd	r24, Z+6	; 0x06
    520c:	97 81       	ldd	r25, Z+7	; 0x07
    520e:	a0 85       	ldd	r26, Z+8	; 0x08
    5210:	b1 85       	ldd	r27, Z+9	; 0x09
    5212:	ac 01       	movw	r20, r24
    5214:	bd 01       	movw	r22, r26
    5216:	51 70       	andi	r21, 0x01	; 1
    5218:	66 27       	eor	r22, r22
    521a:	77 27       	eor	r23, r23
    521c:	4e 5c       	subi	r20, 0xCE	; 206
    521e:	5f 4f       	sbci	r21, 0xFF	; 255
    5220:	0b 85       	ldd	r16, Y+11	; 0x0b
    5222:	1c 85       	ldd	r17, Y+12	; 0x0c
    5224:	40 0f       	add	r20, r16
    5226:	51 1f       	adc	r21, r17
    5228:	12 e0       	ldi	r17, 0x02	; 2
    522a:	e1 16       	cp	r14, r17
    522c:	f1 04       	cpc	r15, r1
    522e:	08 f4       	brcc	.+2      	; 0x5232 <f_read+0x1e4>
    5230:	81 c1       	rjmp	.+770    	; 0x5534 <f_read+0x4e6>
    5232:	6a 01       	movw	r12, r20
    5234:	97 01       	movw	r18, r14
    5236:	f2 01       	movw	r30, r4
    5238:	4c 01       	movw	r8, r24
    523a:	5d 01       	movw	r10, r26
    523c:	d6 01       	movw	r26, r12
    523e:	6d 91       	ld	r22, X+
    5240:	7d 91       	ld	r23, X+
    5242:	6d 01       	movw	r12, r26
    5244:	61 93       	st	Z+, r22
    5246:	71 93       	st	Z+, r23
    5248:	22 50       	subi	r18, 0x02	; 2
    524a:	31 09       	sbc	r19, r1
    524c:	22 30       	cpi	r18, 0x02	; 2
    524e:	31 05       	cpc	r19, r1
    5250:	a8 f7       	brcc	.-22     	; 0x523c <f_read+0x1ee>
    5252:	d5 01       	movw	r26, r10
    5254:	c4 01       	movw	r24, r8
    5256:	97 01       	movw	r18, r14
    5258:	22 50       	subi	r18, 0x02	; 2
    525a:	31 09       	sbc	r19, r1
    525c:	2e 7f       	andi	r18, 0xFE	; 254
    525e:	2e 5f       	subi	r18, 0xFE	; 254
    5260:	3f 4f       	sbci	r19, 0xFF	; 255
    5262:	f2 01       	movw	r30, r4
    5264:	e2 0f       	add	r30, r18
    5266:	f3 1f       	adc	r31, r19
    5268:	42 0f       	add	r20, r18
    526a:	53 1f       	adc	r21, r19
    526c:	97 01       	movw	r18, r14
    526e:	21 70       	andi	r18, 0x01	; 1
    5270:	33 27       	eor	r19, r19
    5272:	23 2b       	or	r18, r19
    5274:	41 f0       	breq	.+16     	; 0x5286 <f_read+0x238>
    5276:	da 01       	movw	r26, r20
    5278:	8c 91       	ld	r24, X
    527a:	80 83       	st	Z, r24
    527c:	f1 01       	movw	r30, r2
    527e:	86 81       	ldd	r24, Z+6	; 0x06
    5280:	97 81       	ldd	r25, Z+7	; 0x07
    5282:	a0 85       	ldd	r26, Z+8	; 0x08
    5284:	b1 85       	ldd	r27, Z+9	; 0x09
    5286:	4e 0c       	add	r4, r14
    5288:	5f 1c       	adc	r5, r15
    528a:	8e 0d       	add	r24, r14
    528c:	9f 1d       	adc	r25, r15
    528e:	a1 1d       	adc	r26, r1
    5290:	b1 1d       	adc	r27, r1
    5292:	f1 01       	movw	r30, r2
    5294:	86 83       	std	Z+6, r24	; 0x06
    5296:	97 83       	std	Z+7, r25	; 0x07
    5298:	a0 87       	std	Z+8, r26	; 0x08
    529a:	b1 87       	std	Z+9, r27	; 0x09
    529c:	e9 81       	ldd	r30, Y+1	; 0x01
    529e:	fa 81       	ldd	r31, Y+2	; 0x02
    52a0:	20 81       	ld	r18, Z
    52a2:	31 81       	ldd	r19, Z+1	; 0x01
    52a4:	2e 0d       	add	r18, r14
    52a6:	3f 1d       	adc	r19, r15
    52a8:	20 83       	st	Z, r18
    52aa:	31 83       	std	Z+1, r19	; 0x01
    52ac:	6e 18       	sub	r6, r14
    52ae:	7f 08       	sbc	r7, r15
    52b0:	09 f0       	breq	.+2      	; 0x52b4 <f_read+0x266>
    52b2:	42 cf       	rjmp	.-380    	; 0x5138 <f_read+0xea>
    52b4:	80 e0       	ldi	r24, 0x00	; 0
    52b6:	f6 ce       	rjmp	.-532    	; 0x50a4 <f_read+0x56>
    52b8:	01 90       	ld	r0, Z+
    52ba:	f0 81       	ld	r31, Z
    52bc:	e0 2d       	mov	r30, r0
    52be:	eb 87       	std	Y+11, r30	; 0x0b
    52c0:	fc 87       	std	Y+12, r31	; 0x0c
    52c2:	92 80       	ldd	r9, Z+2	; 0x02
    52c4:	9a 94       	dec	r9
    52c6:	ac 01       	movw	r20, r24
    52c8:	bd 01       	movw	r22, r26
    52ca:	19 e0       	ldi	r17, 0x09	; 9
    52cc:	76 95       	lsr	r23
    52ce:	67 95       	ror	r22
    52d0:	57 95       	ror	r21
    52d2:	47 95       	ror	r20
    52d4:	1a 95       	dec	r17
    52d6:	d1 f7       	brne	.-12     	; 0x52cc <f_read+0x27e>
    52d8:	94 22       	and	r9, r20
    52da:	09 f4       	brne	.+2      	; 0x52de <f_read+0x290>
    52dc:	87 c0       	rjmp	.+270    	; 0x53ec <f_read+0x39e>
    52de:	f1 01       	movw	r30, r2
    52e0:	82 89       	ldd	r24, Z+18	; 0x12
    52e2:	93 89       	ldd	r25, Z+19	; 0x13
    52e4:	a4 89       	ldd	r26, Z+20	; 0x14
    52e6:	b5 89       	ldd	r27, Z+21	; 0x15
    52e8:	eb 85       	ldd	r30, Y+11	; 0x0b
    52ea:	fc 85       	ldd	r31, Y+12	; 0x0c
    52ec:	9c 01       	movw	r18, r24
    52ee:	ad 01       	movw	r20, r26
    52f0:	22 50       	subi	r18, 0x02	; 2
    52f2:	31 09       	sbc	r19, r1
    52f4:	41 09       	sbc	r20, r1
    52f6:	51 09       	sbc	r21, r1
    52f8:	86 89       	ldd	r24, Z+22	; 0x16
    52fa:	97 89       	ldd	r25, Z+23	; 0x17
    52fc:	a0 8d       	ldd	r26, Z+24	; 0x18
    52fe:	b1 8d       	ldd	r27, Z+25	; 0x19
    5300:	02 97       	sbiw	r24, 0x02	; 2
    5302:	a1 09       	sbc	r26, r1
    5304:	b1 09       	sbc	r27, r1
    5306:	28 17       	cp	r18, r24
    5308:	39 07       	cpc	r19, r25
    530a:	4a 07       	cpc	r20, r26
    530c:	5b 07       	cpc	r21, r27
    530e:	08 f0       	brcs	.+2      	; 0x5312 <f_read+0x2c4>
    5310:	18 c1       	rjmp	.+560    	; 0x5542 <f_read+0x4f4>
    5312:	e2 81       	ldd	r30, Z+2	; 0x02
    5314:	ae 2f       	mov	r26, r30
    5316:	b0 e0       	ldi	r27, 0x00	; 0
    5318:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <__muluhisi3>
    531c:	ab 85       	ldd	r26, Y+11	; 0x0b
    531e:	bc 85       	ldd	r27, Y+12	; 0x0c
    5320:	9a 96       	adiw	r26, 0x2a	; 42
    5322:	cd 90       	ld	r12, X+
    5324:	dd 90       	ld	r13, X+
    5326:	ed 90       	ld	r14, X+
    5328:	fc 90       	ld	r15, X
    532a:	9d 97       	sbiw	r26, 0x2d	; 45
    532c:	6c 0d       	add	r22, r12
    532e:	7d 1d       	adc	r23, r13
    5330:	8e 1d       	adc	r24, r14
    5332:	9f 1d       	adc	r25, r15
    5334:	61 15       	cp	r22, r1
    5336:	71 05       	cpc	r23, r1
    5338:	81 05       	cpc	r24, r1
    533a:	91 05       	cpc	r25, r1
    533c:	09 f4       	brne	.+2      	; 0x5340 <f_read+0x2f2>
    533e:	01 c1       	rjmp	.+514    	; 0x5542 <f_read+0x4f4>
    5340:	6b 01       	movw	r12, r22
    5342:	7c 01       	movw	r14, r24
    5344:	c9 0c       	add	r12, r9
    5346:	d1 1c       	adc	r13, r1
    5348:	e1 1c       	adc	r14, r1
    534a:	f1 1c       	adc	r15, r1
    534c:	53 01       	movw	r10, r6
    534e:	ab 2c       	mov	r10, r11
    5350:	bb 24       	eor	r11, r11
    5352:	a6 94       	lsr	r10
    5354:	a1 14       	cp	r10, r1
    5356:	b1 04       	cpc	r11, r1
    5358:	09 f4       	brne	.+2      	; 0x535c <f_read+0x30e>
    535a:	6e c0       	rjmp	.+220    	; 0x5438 <f_read+0x3ea>
    535c:	89 2d       	mov	r24, r9
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	ac 01       	movw	r20, r24
    5362:	4a 0d       	add	r20, r10
    5364:	5b 1d       	adc	r21, r11
    5366:	2e 2f       	mov	r18, r30
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	24 17       	cp	r18, r20
    536c:	35 07       	cpc	r19, r21
    536e:	18 f4       	brcc	.+6      	; 0x5376 <f_read+0x328>
    5370:	59 01       	movw	r10, r18
    5372:	a8 1a       	sub	r10, r24
    5374:	b9 0a       	sbc	r11, r25
    5376:	85 01       	movw	r16, r10
    5378:	a7 01       	movw	r20, r14
    537a:	96 01       	movw	r18, r12
    537c:	b2 01       	movw	r22, r4
    537e:	ab 85       	ldd	r26, Y+11	; 0x0b
    5380:	bc 85       	ldd	r27, Y+12	; 0x0c
    5382:	11 96       	adiw	r26, 0x01	; 1
    5384:	8c 91       	ld	r24, X
    5386:	62 d3       	rcall	.+1732   	; 0x5a4c <disk_read>
    5388:	81 11       	cpse	r24, r1
    538a:	28 cf       	rjmp	.-432    	; 0x51dc <f_read+0x18e>
    538c:	d1 01       	movw	r26, r2
    538e:	ed 91       	ld	r30, X+
    5390:	fc 91       	ld	r31, X
    5392:	84 81       	ldd	r24, Z+4	; 0x04
    5394:	88 23       	and	r24, r24
    5396:	01 f1       	breq	.+64     	; 0x53d8 <f_read+0x38a>
    5398:	86 a5       	ldd	r24, Z+46	; 0x2e
    539a:	97 a5       	ldd	r25, Z+47	; 0x2f
    539c:	a0 a9       	ldd	r26, Z+48	; 0x30
    539e:	b1 a9       	ldd	r27, Z+49	; 0x31
    53a0:	8c 19       	sub	r24, r12
    53a2:	9d 09       	sbc	r25, r13
    53a4:	ae 09       	sbc	r26, r14
    53a6:	bf 09       	sbc	r27, r15
    53a8:	a5 01       	movw	r20, r10
    53aa:	60 e0       	ldi	r22, 0x00	; 0
    53ac:	70 e0       	ldi	r23, 0x00	; 0
    53ae:	84 17       	cp	r24, r20
    53b0:	95 07       	cpc	r25, r21
    53b2:	a6 07       	cpc	r26, r22
    53b4:	b7 07       	cpc	r27, r23
    53b6:	80 f4       	brcc	.+32     	; 0x53d8 <f_read+0x38a>
    53b8:	dc 01       	movw	r26, r24
    53ba:	ba 2f       	mov	r27, r26
    53bc:	aa 27       	eor	r26, r26
    53be:	bb 0f       	add	r27, r27
    53c0:	a4 0d       	add	r26, r4
    53c2:	b5 1d       	adc	r27, r5
    53c4:	f2 96       	adiw	r30, 0x32	; 50
    53c6:	ad 01       	movw	r20, r26
    53c8:	5e 5f       	subi	r21, 0xFE	; 254
    53ca:	81 91       	ld	r24, Z+
    53cc:	91 91       	ld	r25, Z+
    53ce:	8d 93       	st	X+, r24
    53d0:	9d 93       	st	X+, r25
    53d2:	a4 17       	cp	r26, r20
    53d4:	b5 07       	cpc	r27, r21
    53d6:	c9 f7       	brne	.-14     	; 0x53ca <f_read+0x37c>
    53d8:	75 01       	movw	r14, r10
    53da:	fe 2c       	mov	r15, r14
    53dc:	ee 24       	eor	r14, r14
    53de:	ff 0c       	add	r15, r15
    53e0:	f1 01       	movw	r30, r2
    53e2:	86 81       	ldd	r24, Z+6	; 0x06
    53e4:	97 81       	ldd	r25, Z+7	; 0x07
    53e6:	a0 85       	ldd	r26, Z+8	; 0x08
    53e8:	b1 85       	ldd	r27, Z+9	; 0x09
    53ea:	4d cf       	rjmp	.-358    	; 0x5286 <f_read+0x238>
    53ec:	89 2b       	or	r24, r25
    53ee:	8a 2b       	or	r24, r26
    53f0:	8b 2b       	or	r24, r27
    53f2:	09 f0       	breq	.+2      	; 0x53f6 <f_read+0x3a8>
    53f4:	85 c0       	rjmp	.+266    	; 0x5500 <f_read+0x4b2>
    53f6:	d1 01       	movw	r26, r2
    53f8:	1e 96       	adiw	r26, 0x0e	; 14
    53fa:	6d 91       	ld	r22, X+
    53fc:	7d 91       	ld	r23, X+
    53fe:	8d 91       	ld	r24, X+
    5400:	9c 91       	ld	r25, X
    5402:	51 97       	sbiw	r26, 0x11	; 17
    5404:	62 30       	cpi	r22, 0x02	; 2
    5406:	71 05       	cpc	r23, r1
    5408:	81 05       	cpc	r24, r1
    540a:	91 05       	cpc	r25, r1
    540c:	08 f4       	brcc	.+2      	; 0x5410 <f_read+0x3c2>
    540e:	8d c0       	rjmp	.+282    	; 0x552a <f_read+0x4dc>
    5410:	6f 3f       	cpi	r22, 0xFF	; 255
    5412:	ff ef       	ldi	r31, 0xFF	; 255
    5414:	7f 07       	cpc	r23, r31
    5416:	8f 07       	cpc	r24, r31
    5418:	9f 07       	cpc	r25, r31
    541a:	09 f4       	brne	.+2      	; 0x541e <f_read+0x3d0>
    541c:	96 c0       	rjmp	.+300    	; 0x554a <f_read+0x4fc>
    541e:	f1 01       	movw	r30, r2
    5420:	62 8b       	std	Z+18, r22	; 0x12
    5422:	73 8b       	std	Z+19, r23	; 0x13
    5424:	84 8b       	std	Z+20, r24	; 0x14
    5426:	95 8b       	std	Z+21, r25	; 0x15
    5428:	00 81       	ld	r16, Z
    542a:	11 81       	ldd	r17, Z+1	; 0x01
    542c:	0b 87       	std	Y+11, r16	; 0x0b
    542e:	1c 87       	std	Y+12, r17	; 0x0c
    5430:	dc 01       	movw	r26, r24
    5432:	cb 01       	movw	r24, r22
    5434:	f8 01       	movw	r30, r16
    5436:	5a cf       	rjmp	.-332    	; 0x52ec <f_read+0x29e>
    5438:	d1 01       	movw	r26, r2
    543a:	56 96       	adiw	r26, 0x16	; 22
    543c:	cd 92       	st	X+, r12
    543e:	dd 92       	st	X+, r13
    5440:	ed 92       	st	X+, r14
    5442:	fc 92       	st	X, r15
    5444:	59 97       	sbiw	r26, 0x19	; 25
    5446:	16 96       	adiw	r26, 0x06	; 6
    5448:	8d 91       	ld	r24, X+
    544a:	9d 91       	ld	r25, X+
    544c:	0d 90       	ld	r0, X+
    544e:	bc 91       	ld	r27, X
    5450:	a0 2d       	mov	r26, r0
    5452:	cb 82       	std	Y+3, r12	; 0x03
    5454:	dc 82       	std	Y+4, r13	; 0x04
    5456:	ed 82       	std	Y+5, r14	; 0x05
    5458:	fe 82       	std	Y+6, r15	; 0x06
    545a:	85 ce       	rjmp	.-758    	; 0x5166 <f_read+0x118>
    545c:	f2 96       	adiw	r30, 0x32	; 50
    545e:	ef 83       	std	Y+7, r30	; 0x07
    5460:	f8 87       	std	Y+8, r31	; 0x08
    5462:	01 e0       	ldi	r16, 0x01	; 1
    5464:	10 e0       	ldi	r17, 0x00	; 0
    5466:	a5 01       	movw	r20, r10
    5468:	94 01       	movw	r18, r8
    546a:	bf 01       	movw	r22, r30
    546c:	ab 85       	ldd	r26, Y+11	; 0x0b
    546e:	bc 85       	ldd	r27, Y+12	; 0x0c
    5470:	11 96       	adiw	r26, 0x01	; 1
    5472:	8c 91       	ld	r24, X
    5474:	6a d3       	rcall	.+1748   	; 0x5b4a <disk_write>
    5476:	81 11       	cpse	r24, r1
    5478:	b1 ce       	rjmp	.-670    	; 0x51dc <f_read+0x18e>
    547a:	eb 85       	ldd	r30, Y+11	; 0x0b
    547c:	fc 85       	ldd	r31, Y+12	; 0x0c
    547e:	14 82       	std	Z+4, r1	; 0x04
    5480:	42 8d       	ldd	r20, Z+26	; 0x1a
    5482:	53 8d       	ldd	r21, Z+27	; 0x1b
    5484:	64 8d       	ldd	r22, Z+28	; 0x1c
    5486:	75 8d       	ldd	r23, Z+29	; 0x1d
    5488:	82 a1       	ldd	r24, Z+34	; 0x22
    548a:	93 a1       	ldd	r25, Z+35	; 0x23
    548c:	a4 a1       	ldd	r26, Z+36	; 0x24
    548e:	b5 a1       	ldd	r27, Z+37	; 0x25
    5490:	95 01       	movw	r18, r10
    5492:	84 01       	movw	r16, r8
    5494:	08 1b       	sub	r16, r24
    5496:	19 0b       	sbc	r17, r25
    5498:	2a 0b       	sbc	r18, r26
    549a:	3b 0b       	sbc	r19, r27
    549c:	04 17       	cp	r16, r20
    549e:	15 07       	cpc	r17, r21
    54a0:	26 07       	cpc	r18, r22
    54a2:	37 07       	cpc	r19, r23
    54a4:	08 f0       	brcs	.+2      	; 0x54a8 <f_read+0x45a>
    54a6:	81 ce       	rjmp	.-766    	; 0x51aa <f_read+0x15c>
    54a8:	c3 80       	ldd	r12, Z+3	; 0x03
    54aa:	d1 2c       	mov	r13, r1
    54ac:	12 e0       	ldi	r17, 0x02	; 2
    54ae:	c1 16       	cp	r12, r17
    54b0:	d1 04       	cpc	r13, r1
    54b2:	08 f4       	brcc	.+2      	; 0x54b6 <f_read+0x468>
    54b4:	7a ce       	rjmp	.-780    	; 0x51aa <f_read+0x15c>
    54b6:	e9 86       	std	Y+9, r14	; 0x09
    54b8:	fa 86       	std	Y+10, r15	; 0x0a
    54ba:	ef 80       	ldd	r14, Y+7	; 0x07
    54bc:	f8 84       	ldd	r15, Y+8	; 0x08
    54be:	ab 85       	ldd	r26, Y+11	; 0x0b
    54c0:	bc 85       	ldd	r27, Y+12	; 0x0c
    54c2:	08 c0       	rjmp	.+16     	; 0x54d4 <f_read+0x486>
    54c4:	ab 85       	ldd	r26, Y+11	; 0x0b
    54c6:	bc 85       	ldd	r27, Y+12	; 0x0c
    54c8:	5a 96       	adiw	r26, 0x1a	; 26
    54ca:	4d 91       	ld	r20, X+
    54cc:	5d 91       	ld	r21, X+
    54ce:	6d 91       	ld	r22, X+
    54d0:	7c 91       	ld	r23, X
    54d2:	5d 97       	sbiw	r26, 0x1d	; 29
    54d4:	84 0e       	add	r8, r20
    54d6:	95 1e       	adc	r9, r21
    54d8:	a6 1e       	adc	r10, r22
    54da:	b7 1e       	adc	r11, r23
    54dc:	01 e0       	ldi	r16, 0x01	; 1
    54de:	10 e0       	ldi	r17, 0x00	; 0
    54e0:	a5 01       	movw	r20, r10
    54e2:	94 01       	movw	r18, r8
    54e4:	b7 01       	movw	r22, r14
    54e6:	11 96       	adiw	r26, 0x01	; 1
    54e8:	8c 91       	ld	r24, X
    54ea:	2f d3       	rcall	.+1630   	; 0x5b4a <disk_write>
    54ec:	b1 e0       	ldi	r27, 0x01	; 1
    54ee:	cb 1a       	sub	r12, r27
    54f0:	d1 08       	sbc	r13, r1
    54f2:	e1 e0       	ldi	r30, 0x01	; 1
    54f4:	ce 16       	cp	r12, r30
    54f6:	d1 04       	cpc	r13, r1
    54f8:	29 f7       	brne	.-54     	; 0x54c4 <f_read+0x476>
    54fa:	e9 84       	ldd	r14, Y+9	; 0x09
    54fc:	fa 84       	ldd	r15, Y+10	; 0x0a
    54fe:	55 ce       	rjmp	.-854    	; 0x51aa <f_read+0x15c>
    5500:	f1 01       	movw	r30, r2
    5502:	42 89       	ldd	r20, Z+18	; 0x12
    5504:	53 89       	ldd	r21, Z+19	; 0x13
    5506:	64 89       	ldd	r22, Z+20	; 0x14
    5508:	75 89       	ldd	r23, Z+21	; 0x15
    550a:	42 30       	cpi	r20, 0x02	; 2
    550c:	51 05       	cpc	r21, r1
    550e:	61 05       	cpc	r22, r1
    5510:	71 05       	cpc	r23, r1
    5512:	58 f0       	brcs	.+22     	; 0x552a <f_read+0x4dc>
    5514:	eb 85       	ldd	r30, Y+11	; 0x0b
    5516:	fc 85       	ldd	r31, Y+12	; 0x0c
    5518:	86 89       	ldd	r24, Z+22	; 0x16
    551a:	97 89       	ldd	r25, Z+23	; 0x17
    551c:	a0 8d       	ldd	r26, Z+24	; 0x18
    551e:	b1 8d       	ldd	r27, Z+25	; 0x19
    5520:	48 17       	cp	r20, r24
    5522:	59 07       	cpc	r21, r25
    5524:	6a 07       	cpc	r22, r26
    5526:	7b 07       	cpc	r23, r27
    5528:	40 f0       	brcs	.+16     	; 0x553a <f_read+0x4ec>
    552a:	82 e0       	ldi	r24, 0x02	; 2
    552c:	d1 01       	movw	r26, r2
    552e:	15 96       	adiw	r26, 0x05	; 5
    5530:	8c 93       	st	X, r24
    5532:	b8 cd       	rjmp	.-1168   	; 0x50a4 <f_read+0x56>
    5534:	97 01       	movw	r18, r14
    5536:	f2 01       	movw	r30, r4
    5538:	9c ce       	rjmp	.-712    	; 0x5272 <f_read+0x224>
    553a:	cf 01       	movw	r24, r30
    553c:	0e 94 5f 0b 	call	0x16be	; 0x16be <get_fat.part.4>
    5540:	61 cf       	rjmp	.-318    	; 0x5404 <f_read+0x3b6>
    5542:	82 e0       	ldi	r24, 0x02	; 2
    5544:	f1 01       	movw	r30, r2
    5546:	85 83       	std	Z+5, r24	; 0x05
    5548:	ad cd       	rjmp	.-1190   	; 0x50a4 <f_read+0x56>
    554a:	81 e0       	ldi	r24, 0x01	; 1
    554c:	d1 01       	movw	r26, r2
    554e:	15 96       	adiw	r26, 0x05	; 5
    5550:	8c 93       	st	X, r24
    5552:	a8 cd       	rjmp	.-1200   	; 0x50a4 <f_read+0x56>

00005554 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    5554:	2f 92       	push	r2
    5556:	3f 92       	push	r3
    5558:	4f 92       	push	r4
    555a:	5f 92       	push	r5
    555c:	6f 92       	push	r6
    555e:	7f 92       	push	r7
    5560:	8f 92       	push	r8
    5562:	9f 92       	push	r9
    5564:	af 92       	push	r10
    5566:	bf 92       	push	r11
    5568:	cf 92       	push	r12
    556a:	df 92       	push	r13
    556c:	ef 92       	push	r14
    556e:	ff 92       	push	r15
    5570:	0f 93       	push	r16
    5572:	1f 93       	push	r17
    5574:	cf 93       	push	r28
    5576:	df 93       	push	r29
    5578:	ec 01       	movw	r28, r24
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    557a:	00 97       	sbiw	r24, 0x00	; 0
    557c:	39 f0       	breq	.+14     	; 0x558c <f_close+0x38>
    557e:	e8 81       	ld	r30, Y
    5580:	f9 81       	ldd	r31, Y+1	; 0x01
    5582:	30 97       	sbiw	r30, 0x00	; 0
    5584:	19 f0       	breq	.+6      	; 0x558c <f_close+0x38>
    5586:	80 81       	ld	r24, Z
    5588:	81 11       	cpse	r24, r1
    558a:	14 c0       	rjmp	.+40     	; 0x55b4 <f_close+0x60>
		return FR_INVALID_OBJECT;
    558c:	89 e0       	ldi	r24, 0x09	; 9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    558e:	df 91       	pop	r29
    5590:	cf 91       	pop	r28
    5592:	1f 91       	pop	r17
    5594:	0f 91       	pop	r16
    5596:	ff 90       	pop	r15
    5598:	ef 90       	pop	r14
    559a:	df 90       	pop	r13
    559c:	cf 90       	pop	r12
    559e:	bf 90       	pop	r11
    55a0:	af 90       	pop	r10
    55a2:	9f 90       	pop	r9
    55a4:	8f 90       	pop	r8
    55a6:	7f 90       	pop	r7
    55a8:	6f 90       	pop	r6
    55aa:	5f 90       	pop	r5
    55ac:	4f 90       	pop	r4
    55ae:	3f 90       	pop	r3
    55b0:	2f 90       	pop	r2
    55b2:	08 95       	ret
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    55b4:	26 81       	ldd	r18, Z+6	; 0x06
    55b6:	37 81       	ldd	r19, Z+7	; 0x07
    55b8:	8a 81       	ldd	r24, Y+2	; 0x02
    55ba:	9b 81       	ldd	r25, Y+3	; 0x03
    55bc:	28 17       	cp	r18, r24
    55be:	39 07       	cpc	r19, r25
    55c0:	29 f7       	brne	.-54     	; 0x558c <f_close+0x38>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    55c2:	81 81       	ldd	r24, Z+1	; 0x01
    55c4:	3c d2       	rcall	.+1144   	; 0x5a3e <disk_status>
    55c6:	80 ff       	sbrs	r24, 0
    55c8:	02 c0       	rjmp	.+4      	; 0x55ce <f_close+0x7a>
		return FR_NOT_READY;
    55ca:	83 e0       	ldi	r24, 0x03	; 3
    55cc:	e0 cf       	rjmp	.-64     	; 0x558e <f_close+0x3a>
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    55ce:	8c 81       	ldd	r24, Y+4	; 0x04
    55d0:	85 fd       	sbrc	r24, 5
    55d2:	16 c0       	rjmp	.+44     	; 0x5600 <f_close+0xac>
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    55d4:	e8 81       	ld	r30, Y
    55d6:	f9 81       	ldd	r31, Y+1	; 0x01
    55d8:	30 97       	sbiw	r30, 0x00	; 0
    55da:	c1 f2       	breq	.-80     	; 0x558c <f_close+0x38>
    55dc:	80 81       	ld	r24, Z
    55de:	88 23       	and	r24, r24
    55e0:	a9 f2       	breq	.-86     	; 0x558c <f_close+0x38>
    55e2:	26 81       	ldd	r18, Z+6	; 0x06
    55e4:	37 81       	ldd	r19, Z+7	; 0x07
    55e6:	8a 81       	ldd	r24, Y+2	; 0x02
    55e8:	9b 81       	ldd	r25, Y+3	; 0x03
    55ea:	28 17       	cp	r18, r24
    55ec:	39 07       	cpc	r19, r25
    55ee:	71 f6       	brne	.-100    	; 0x558c <f_close+0x38>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    55f0:	81 81       	ldd	r24, Z+1	; 0x01
    55f2:	25 d2       	rcall	.+1098   	; 0x5a3e <disk_status>
    55f4:	80 fd       	sbrc	r24, 0
    55f6:	e9 cf       	rjmp	.-46     	; 0x55ca <f_close+0x76>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    55f8:	18 82       	st	Y, r1
    55fa:	19 82       	std	Y+1, r1	; 0x01
    55fc:	80 e0       	ldi	r24, 0x00	; 0
    55fe:	c7 cf       	rjmp	.-114    	; 0x558e <f_close+0x3a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    5600:	4a 8c       	ldd	r4, Y+26	; 0x1a
    5602:	5b 8c       	ldd	r5, Y+27	; 0x1b
    5604:	6c 8c       	ldd	r6, Y+28	; 0x1c
    5606:	7d 8c       	ldd	r7, Y+29	; 0x1d
    5608:	a8 80       	ld	r10, Y
    560a:	b9 80       	ldd	r11, Y+1	; 0x01
)
{
	FRESULT res = FR_OK;


	if (sector != fs->winsect) {	/* Window offset changed? */
    560c:	f5 01       	movw	r30, r10
    560e:	c6 a4       	ldd	r12, Z+46	; 0x2e
    5610:	d7 a4       	ldd	r13, Z+47	; 0x2f
    5612:	e0 a8       	ldd	r14, Z+48	; 0x30
    5614:	f1 a8       	ldd	r15, Z+49	; 0x31
    5616:	4c 14       	cp	r4, r12
    5618:	5d 04       	cpc	r5, r13
    561a:	6e 04       	cpc	r6, r14
    561c:	7f 04       	cpc	r7, r15
    561e:	01 f1       	breq	.+64     	; 0x5660 <f_close+0x10c>
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
    5620:	84 81       	ldd	r24, Z+4	; 0x04
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
    5622:	15 01       	movw	r2, r10
    5624:	f2 e3       	ldi	r31, 0x32	; 50
    5626:	2f 0e       	add	r2, r31
    5628:	31 1c       	adc	r3, r1
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
    562a:	81 11       	cpse	r24, r1
    562c:	46 c0       	rjmp	.+140    	; 0x56ba <f_close+0x166>
	if (sector != fs->winsect) {	/* Window offset changed? */
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
    562e:	01 e0       	ldi	r16, 0x01	; 1
    5630:	10 e0       	ldi	r17, 0x00	; 0
    5632:	a3 01       	movw	r20, r6
    5634:	92 01       	movw	r18, r4
    5636:	b1 01       	movw	r22, r2
    5638:	f5 01       	movw	r30, r10
    563a:	81 81       	ldd	r24, Z+1	; 0x01
    563c:	07 d2       	rcall	.+1038   	; 0x5a4c <disk_read>
    563e:	88 23       	and	r24, r24
    5640:	51 f0       	breq	.+20     	; 0x5656 <f_close+0x102>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
    5642:	8f ef       	ldi	r24, 0xFF	; 255
    5644:	9f ef       	ldi	r25, 0xFF	; 255
    5646:	dc 01       	movw	r26, r24
    5648:	f5 01       	movw	r30, r10
    564a:	86 a7       	std	Z+46, r24	; 0x2e
    564c:	97 a7       	std	Z+47, r25	; 0x2f
    564e:	a0 ab       	std	Z+48, r26	; 0x30
    5650:	b1 ab       	std	Z+49, r27	; 0x31
    5652:	81 e0       	ldi	r24, 0x01	; 1
    5654:	9c cf       	rjmp	.-200    	; 0x558e <f_close+0x3a>
    5656:	f5 01       	movw	r30, r10
    5658:	46 a6       	std	Z+46, r4	; 0x2e
    565a:	57 a6       	std	Z+47, r5	; 0x2f
    565c:	60 aa       	std	Z+48, r6	; 0x30
    565e:	71 aa       	std	Z+49, r7	; 0x31
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
			if (res == FR_OK) {
				dir = fp->dir_ptr;
    5660:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5662:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    5664:	83 85       	ldd	r24, Z+11	; 0x0b
    5666:	80 62       	ori	r24, 0x20	; 32
    5668:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    566a:	8a 85       	ldd	r24, Y+10	; 0x0a
    566c:	9b 85       	ldd	r25, Y+11	; 0x0b
    566e:	ac 85       	ldd	r26, Y+12	; 0x0c
    5670:	bd 85       	ldd	r27, Y+13	; 0x0d
    5672:	84 8f       	std	Z+28, r24	; 0x1c
    5674:	95 8f       	std	Z+29, r25	; 0x1d
    5676:	a6 8f       	std	Z+30, r26	; 0x1e
    5678:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    567a:	8e 85       	ldd	r24, Y+14	; 0x0e
    567c:	9f 85       	ldd	r25, Y+15	; 0x0f
    567e:	a8 89       	ldd	r26, Y+16	; 0x10
    5680:	b9 89       	ldd	r27, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    5682:	82 8f       	std	Z+26, r24	; 0x1a
    5684:	93 8f       	std	Z+27, r25	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    5686:	a4 8b       	std	Z+20, r26	; 0x14
    5688:	b5 8b       	std	Z+21, r27	; 0x15
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tm);
    568a:	80 e0       	ldi	r24, 0x00	; 0
    568c:	90 e0       	ldi	r25, 0x00	; 0
    568e:	af e4       	ldi	r26, 0x4F	; 79
    5690:	b5 e4       	ldi	r27, 0x45	; 69
    5692:	86 8b       	std	Z+22, r24	; 0x16
    5694:	97 8b       	std	Z+23, r25	; 0x17
    5696:	a0 8f       	std	Z+24, r26	; 0x18
    5698:	b1 8f       	std	Z+25, r27	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    569a:	12 8a       	std	Z+18, r1	; 0x12
    569c:	13 8a       	std	Z+19, r1	; 0x13
				fp->flag &= ~FA__WRITTEN;
    569e:	8c 81       	ldd	r24, Y+4	; 0x04
    56a0:	8f 7d       	andi	r24, 0xDF	; 223
    56a2:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    56a4:	e8 81       	ld	r30, Y
    56a6:	f9 81       	ldd	r31, Y+1	; 0x01
    56a8:	81 e0       	ldi	r24, 0x01	; 1
    56aa:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    56ac:	88 81       	ld	r24, Y
    56ae:	99 81       	ldd	r25, Y+1	; 0x01
    56b0:	0e 94 62 07 	call	0xec4	; 0xec4 <sync_fs>
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
    56b4:	81 11       	cpse	r24, r1
    56b6:	6b cf       	rjmp	.-298    	; 0x558e <f_close+0x3a>
    56b8:	8d cf       	rjmp	.-230    	; 0x55d4 <f_close+0x80>
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
    56ba:	01 e0       	ldi	r16, 0x01	; 1
    56bc:	10 e0       	ldi	r17, 0x00	; 0
    56be:	a7 01       	movw	r20, r14
    56c0:	96 01       	movw	r18, r12
    56c2:	b1 01       	movw	r22, r2
    56c4:	f5 01       	movw	r30, r10
    56c6:	81 81       	ldd	r24, Z+1	; 0x01
    56c8:	40 d2       	rcall	.+1152   	; 0x5b4a <disk_write>
    56ca:	81 11       	cpse	r24, r1
    56cc:	c2 cf       	rjmp	.-124    	; 0x5652 <f_close+0xfe>
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
    56ce:	f5 01       	movw	r30, r10
    56d0:	14 82       	std	Z+4, r1	; 0x04
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
    56d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    56d4:	93 8d       	ldd	r25, Z+27	; 0x1b
    56d6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    56d8:	b5 8d       	ldd	r27, Z+29	; 0x1d
    56da:	42 a1       	ldd	r20, Z+34	; 0x22
    56dc:	53 a1       	ldd	r21, Z+35	; 0x23
    56de:	64 a1       	ldd	r22, Z+36	; 0x24
    56e0:	75 a1       	ldd	r23, Z+37	; 0x25
    56e2:	97 01       	movw	r18, r14
    56e4:	86 01       	movw	r16, r12
    56e6:	04 1b       	sub	r16, r20
    56e8:	15 0b       	sbc	r17, r21
    56ea:	26 0b       	sbc	r18, r22
    56ec:	37 0b       	sbc	r19, r23
    56ee:	08 17       	cp	r16, r24
    56f0:	19 07       	cpc	r17, r25
    56f2:	2a 07       	cpc	r18, r26
    56f4:	3b 07       	cpc	r19, r27
    56f6:	08 f0       	brcs	.+2      	; 0x56fa <f_close+0x1a6>
    56f8:	9a cf       	rjmp	.-204    	; 0x562e <f_close+0xda>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    56fa:	83 80       	ldd	r8, Z+3	; 0x03
    56fc:	91 2c       	mov	r9, r1
    56fe:	12 e0       	ldi	r17, 0x02	; 2
    5700:	81 16       	cp	r8, r17
    5702:	91 04       	cpc	r9, r1
    5704:	30 f4       	brcc	.+12     	; 0x5712 <f_close+0x1be>
    5706:	93 cf       	rjmp	.-218    	; 0x562e <f_close+0xda>
    5708:	f5 01       	movw	r30, r10
    570a:	82 8d       	ldd	r24, Z+26	; 0x1a
    570c:	93 8d       	ldd	r25, Z+27	; 0x1b
    570e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5710:	b5 8d       	ldd	r27, Z+29	; 0x1d
					wsect += fs->fsize;
    5712:	c8 0e       	add	r12, r24
    5714:	d9 1e       	adc	r13, r25
    5716:	ea 1e       	adc	r14, r26
    5718:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    571a:	01 e0       	ldi	r16, 0x01	; 1
    571c:	10 e0       	ldi	r17, 0x00	; 0
    571e:	a7 01       	movw	r20, r14
    5720:	96 01       	movw	r18, r12
    5722:	b1 01       	movw	r22, r2
    5724:	f5 01       	movw	r30, r10
    5726:	81 81       	ldd	r24, Z+1	; 0x01
    5728:	10 d2       	rcall	.+1056   	; 0x5b4a <disk_write>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    572a:	f1 e0       	ldi	r31, 0x01	; 1
    572c:	8f 1a       	sub	r8, r31
    572e:	91 08       	sbc	r9, r1
    5730:	01 e0       	ldi	r16, 0x01	; 1
    5732:	80 16       	cp	r8, r16
    5734:	91 04       	cpc	r9, r1
    5736:	41 f7       	brne	.-48     	; 0x5708 <f_close+0x1b4>
    5738:	7a cf       	rjmp	.-268    	; 0x562e <f_close+0xda>

0000573a <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    573a:	ef 92       	push	r14
    573c:	ff 92       	push	r15
    573e:	0f 93       	push	r16
    5740:	1f 93       	push	r17
    5742:	cf 93       	push	r28
    5744:	df 93       	push	r29
    5746:	7c 01       	movw	r14, r24
    5748:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    574a:	24 e1       	ldi	r18, 0x14	; 20
    574c:	20 93 a1 25 	sts	0x25A1, r18
    5750:	04 c0       	rjmp	.+8      	; 0x575a <rcvr_datablock+0x20>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    5752:	20 91 a1 25 	lds	r18, 0x25A1
    5756:	22 23       	and	r18, r18
    5758:	39 f0       	breq	.+14     	; 0x5768 <rcvr_datablock+0x2e>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    575a:	8f ef       	ldi	r24, 0xFF	; 255
    575c:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    5760:	8f 3f       	cpi	r24, 0xFF	; 255
    5762:	b9 f3       	breq	.-18     	; 0x5752 <rcvr_datablock+0x18>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    5764:	8e 3f       	cpi	r24, 0xFE	; 254
    5766:	49 f0       	breq	.+18     	; 0x577a <rcvr_datablock+0x40>
    5768:	80 e0       	ldi	r24, 0x00	; 0
    576a:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    576c:	df 91       	pop	r29
    576e:	cf 91       	pop	r28
    5770:	1f 91       	pop	r17
    5772:	0f 91       	pop	r16
    5774:	ff 90       	pop	r15
    5776:	ef 90       	pop	r14
    5778:	08 95       	ret
    577a:	e7 01       	movw	r28, r14
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    577c:	8f ef       	ldi	r24, 0xFF	; 255
    577e:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5782:	88 83       	st	Y, r24
		*p++ = spi_wr_rd(0xff);
    5784:	8f ef       	ldi	r24, 0xFF	; 255
    5786:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    578a:	89 83       	std	Y+1, r24	; 0x01
		
	} while (cnt -= 2);
    578c:	02 50       	subi	r16, 0x02	; 2
    578e:	11 09       	sbc	r17, r1
    5790:	22 96       	adiw	r28, 0x02	; 2
    5792:	01 15       	cp	r16, r1
    5794:	11 05       	cpc	r17, r1
    5796:	91 f7       	brne	.-28     	; 0x577c <rcvr_datablock+0x42>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5798:	8f ef       	ldi	r24, 0xFF	; 255
    579a:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    579e:	8f ef       	ldi	r24, 0xFF	; 255
    57a0:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    57a4:	81 e0       	ldi	r24, 0x01	; 1
    57a6:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    57a8:	df 91       	pop	r29
    57aa:	cf 91       	pop	r28
    57ac:	1f 91       	pop	r17
    57ae:	0f 91       	pop	r16
    57b0:	ff 90       	pop	r15
    57b2:	ef 90       	pop	r14
    57b4:	08 95       	ret

000057b6 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    57b6:	ef 92       	push	r14
    57b8:	ff 92       	push	r15
    57ba:	0f 93       	push	r16
    57bc:	1f 93       	push	r17
    57be:	cf 93       	push	r28
    57c0:	df 93       	push	r29
    57c2:	c8 2f       	mov	r28, r24
    57c4:	14 2f       	mov	r17, r20
    57c6:	05 2f       	mov	r16, r21
    57c8:	f6 2e       	mov	r15, r22
    57ca:	e7 2e       	mov	r14, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    57cc:	87 fd       	sbrc	r24, 7
    57ce:	63 c0       	rjmp	.+198    	; 0x5896 <send_cmd+0xe0>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    57d0:	cc 30       	cpi	r28, 0x0C	; 12
    57d2:	09 f4       	brne	.+2      	; 0x57d6 <send_cmd+0x20>
    57d4:	4a c0       	rjmp	.+148    	; 0x586a <send_cmd+0xb4>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    57d6:	d0 e1       	ldi	r29, 0x10	; 16
    57d8:	d0 93 45 06 	sts	0x0645, r29
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    57dc:	8f ef       	ldi	r24, 0xFF	; 255
    57de:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
    57e2:	d0 93 46 06 	sts	0x0646, r29
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    57e6:	8f ef       	ldi	r24, 0xFF	; 255
    57e8:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
	UINT wt			/* Timeout [ms] */
)
{
	BYTE d;

	Timer2 = wt / 10;
    57ec:	82 e3       	ldi	r24, 0x32	; 50
    57ee:	80 93 a0 25 	sts	0x25A0, r24
    57f2:	04 c0       	rjmp	.+8      	; 0x57fc <send_cmd+0x46>
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    57f4:	90 91 a0 25 	lds	r25, 0x25A0
    57f8:	99 23       	and	r25, r25
    57fa:	49 f1       	breq	.+82     	; 0x584e <send_cmd+0x98>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    57fc:	8f ef       	ldi	r24, 0xFF	; 255
    57fe:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
	BYTE d;

	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    5802:	8f 3f       	cpi	r24, 0xFF	; 255
    5804:	b9 f7       	brne	.-18     	; 0x57f4 <send_cmd+0x3e>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5806:	8c 2f       	mov	r24, r28
    5808:	80 64       	ori	r24, 0x40	; 64
    580a:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    580e:	8e 2d       	mov	r24, r14
    5810:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5814:	8f 2d       	mov	r24, r15
    5816:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    581a:	80 2f       	mov	r24, r16
    581c:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5820:	81 2f       	mov	r24, r17
    5822:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    5826:	c1 11       	cpse	r28, r1
    5828:	3f c0       	rjmp	.+126    	; 0x58a8 <send_cmd+0xf2>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    582a:	85 e9       	ldi	r24, 0x95	; 149
    582c:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    5830:	ca e0       	ldi	r28, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5832:	8f ef       	ldi	r24, 0xFF	; 255
    5834:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);
    5838:	87 ff       	sbrs	r24, 7
    583a:	02 c0       	rjmp	.+4      	; 0x5840 <send_cmd+0x8a>
    583c:	c1 50       	subi	r28, 0x01	; 1
    583e:	c9 f7       	brne	.-14     	; 0x5832 <send_cmd+0x7c>

	return res;			/* Return with the response value */
}
    5840:	df 91       	pop	r29
    5842:	cf 91       	pop	r28
    5844:	1f 91       	pop	r17
    5846:	0f 91       	pop	r16
    5848:	ff 90       	pop	r15
    584a:	ef 90       	pop	r14
    584c:	08 95       	ret
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    584e:	80 e1       	ldi	r24, 0x10	; 16
    5850:	80 93 45 06 	sts	0x0645, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5854:	8f ef       	ldi	r24, 0xFF	; 255
    5856:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    585a:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    585c:	df 91       	pop	r29
    585e:	cf 91       	pop	r28
    5860:	1f 91       	pop	r17
    5862:	0f 91       	pop	r16
    5864:	ff 90       	pop	r15
    5866:	ef 90       	pop	r14
    5868:	08 95       	ret
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    586a:	8c e4       	ldi	r24, 0x4C	; 76
    586c:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5870:	8e 2d       	mov	r24, r14
    5872:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5876:	8f 2d       	mov	r24, r15
    5878:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    587c:	80 2f       	mov	r24, r16
    587e:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5882:	81 2f       	mov	r24, r17
    5884:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5888:	81 e0       	ldi	r24, 0x01	; 1
    588a:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    588e:	8f ef       	ldi	r24, 0xFF	; 255
    5890:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5894:	cd cf       	rjmp	.-102    	; 0x5830 <send_cmd+0x7a>
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    5896:	40 e0       	ldi	r20, 0x00	; 0
    5898:	50 e0       	ldi	r21, 0x00	; 0
    589a:	ba 01       	movw	r22, r20
    589c:	87 e3       	ldi	r24, 0x37	; 55
    589e:	8b df       	rcall	.-234    	; 0x57b6 <send_cmd>
		if (res > 1) return res;
    58a0:	82 30       	cpi	r24, 0x02	; 2
    58a2:	70 f6       	brcc	.-100    	; 0x5840 <send_cmd+0x8a>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    58a4:	cf 77       	andi	r28, 0x7F	; 127
    58a6:	94 cf       	rjmp	.-216    	; 0x57d0 <send_cmd+0x1a>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    58a8:	c8 30       	cpi	r28, 0x08	; 8
    58aa:	21 f4       	brne	.+8      	; 0x58b4 <send_cmd+0xfe>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    58ac:	87 e8       	ldi	r24, 0x87	; 135
    58ae:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    58b2:	be cf       	rjmp	.-132    	; 0x5830 <send_cmd+0x7a>
    58b4:	81 e0       	ldi	r24, 0x01	; 1
    58b6:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    58ba:	ba cf       	rjmp	.-140    	; 0x5830 <send_cmd+0x7a>

000058bc <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    58bc:	ef 92       	push	r14
    58be:	ff 92       	push	r15
    58c0:	0f 93       	push	r16
    58c2:	1f 93       	push	r17
    58c4:	cf 93       	push	r28
    58c6:	df 93       	push	r29
    58c8:	00 d0       	rcall	.+0      	; 0x58ca <disk_initialize+0xe>
    58ca:	00 d0       	rcall	.+0      	; 0x58cc <disk_initialize+0x10>
    58cc:	cd b7       	in	r28, 0x3d	; 61
    58ce:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    58d0:	88 23       	and	r24, r24
    58d2:	59 f0       	breq	.+22     	; 0x58ea <disk_initialize+0x2e>
    58d4:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    58d6:	24 96       	adiw	r28, 0x04	; 4
    58d8:	cd bf       	out	0x3d, r28	; 61
    58da:	de bf       	out	0x3e, r29	; 62
    58dc:	df 91       	pop	r29
    58de:	cf 91       	pop	r28
    58e0:	1f 91       	pop	r17
    58e2:	0f 91       	pop	r16
    58e4:	ff 90       	pop	r15
    58e6:	ef 90       	pop	r14
    58e8:	08 95       	ret

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    58ea:	0e 94 91 38 	call	0x7122	; 0x7122 <spi_off>
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    58ee:	80 91 04 20 	lds	r24, 0x2004
    58f2:	81 ff       	sbrs	r24, 1
    58f4:	03 c0       	rjmp	.+6      	; 0x58fc <disk_initialize+0x40>
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    58f6:	80 91 04 20 	lds	r24, 0x2004
    58fa:	ed cf       	rjmp	.-38     	; 0x58d6 <disk_initialize+0x1a>
	//Used to check for a timeout, not needed
	//TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
	//TCC1.PER = F_CPU/DIVIDER;
	//TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
	
	spi_on();
    58fc:	0e 94 87 38 	call	0x710e	; 0x710e <spi_on>

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    5900:	82 ed       	ldi	r24, 0xD2	; 210
    5902:	80 93 c0 08 	sts	0x08C0, r24
    5906:	1a e0       	ldi	r17, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5908:	8f ef       	ldi	r24, 0xFF	; 255
    590a:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    590e:	11 50       	subi	r17, 0x01	; 1
	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    5910:	d9 f7       	brne	.-10     	; 0x5908 <disk_initialize+0x4c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    5912:	40 e0       	ldi	r20, 0x00	; 0
    5914:	50 e0       	ldi	r21, 0x00	; 0
    5916:	ba 01       	movw	r22, r20
    5918:	80 e0       	ldi	r24, 0x00	; 0
    591a:	4d df       	rcall	.-358    	; 0x57b6 <send_cmd>
    591c:	81 30       	cpi	r24, 0x01	; 1
    591e:	59 f0       	breq	.+22     	; 0x5936 <disk_initialize+0x7a>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    5920:	10 92 9f 25 	sts	0x259F, r1
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    5924:	80 e1       	ldi	r24, 0x10	; 16
    5926:	80 93 45 06 	sts	0x0645, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    592a:	8f ef       	ldi	r24, 0xFF	; 255
    592c:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    5930:	0e 94 91 38 	call	0x7122	; 0x7122 <spi_off>
    5934:	e0 cf       	rjmp	.-64     	; 0x58f6 <disk_initialize+0x3a>
	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    5936:	84 e6       	ldi	r24, 0x64	; 100
    5938:	80 93 a1 25 	sts	0x25A1, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    593c:	4a ea       	ldi	r20, 0xAA	; 170
    593e:	51 e0       	ldi	r21, 0x01	; 1
    5940:	60 e0       	ldi	r22, 0x00	; 0
    5942:	70 e0       	ldi	r23, 0x00	; 0
    5944:	88 e0       	ldi	r24, 0x08	; 8
    5946:	37 df       	rcall	.-402    	; 0x57b6 <send_cmd>
    5948:	81 30       	cpi	r24, 0x01	; 1
    594a:	09 f0       	breq	.+2      	; 0x594e <disk_initialize+0x92>
    594c:	50 c0       	rjmp	.+160    	; 0x59ee <disk_initialize+0x132>
    594e:	7e 01       	movw	r14, r28
    5950:	85 e0       	ldi	r24, 0x05	; 5
    5952:	e8 0e       	add	r14, r24
    5954:	f1 1c       	adc	r15, r1
    5956:	8e 01       	movw	r16, r28
    5958:	0f 5f       	subi	r16, 0xFF	; 255
    595a:	1f 4f       	sbci	r17, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    595c:	8f ef       	ldi	r24, 0xFF	; 255
    595e:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    5962:	f8 01       	movw	r30, r16
    5964:	81 93       	st	Z+, r24
    5966:	8f 01       	movw	r16, r30
    5968:	ee 15       	cp	r30, r14
    596a:	ff 05       	cpc	r31, r15
    596c:	b9 f7       	brne	.-18     	; 0x595c <disk_initialize+0xa0>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    596e:	8b 81       	ldd	r24, Y+3	; 0x03
    5970:	81 30       	cpi	r24, 0x01	; 1
    5972:	b1 f6       	brne	.-84     	; 0x5920 <disk_initialize+0x64>
    5974:	8c 81       	ldd	r24, Y+4	; 0x04
    5976:	8a 3a       	cpi	r24, 0xAA	; 170
    5978:	99 f6       	brne	.-90     	; 0x5920 <disk_initialize+0x64>
    597a:	08 c0       	rjmp	.+16     	; 0x598c <disk_initialize+0xd0>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    597c:	40 e0       	ldi	r20, 0x00	; 0
    597e:	50 e0       	ldi	r21, 0x00	; 0
    5980:	60 e0       	ldi	r22, 0x00	; 0
    5982:	70 e4       	ldi	r23, 0x40	; 64
    5984:	89 ea       	ldi	r24, 0xA9	; 169
    5986:	17 df       	rcall	.-466    	; 0x57b6 <send_cmd>
    5988:	88 23       	and	r24, r24
    598a:	21 f0       	breq	.+8      	; 0x5994 <disk_initialize+0xd8>
    598c:	80 91 a1 25 	lds	r24, 0x25A1
    5990:	81 11       	cpse	r24, r1
    5992:	f4 cf       	rjmp	.-24     	; 0x597c <disk_initialize+0xc0>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    5994:	80 91 a1 25 	lds	r24, 0x25A1
    5998:	88 23       	and	r24, r24
    599a:	09 f4       	brne	.+2      	; 0x599e <disk_initialize+0xe2>
    599c:	c1 cf       	rjmp	.-126    	; 0x5920 <disk_initialize+0x64>
    599e:	40 e0       	ldi	r20, 0x00	; 0
    59a0:	50 e0       	ldi	r21, 0x00	; 0
    59a2:	ba 01       	movw	r22, r20
    59a4:	8a e3       	ldi	r24, 0x3A	; 58
    59a6:	07 df       	rcall	.-498    	; 0x57b6 <send_cmd>
    59a8:	81 11       	cpse	r24, r1
    59aa:	ba cf       	rjmp	.-140    	; 0x5920 <disk_initialize+0x64>
    59ac:	8e 01       	movw	r16, r28
    59ae:	0f 5f       	subi	r16, 0xFF	; 255
    59b0:	1f 4f       	sbci	r17, 0xFF	; 255
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    59b2:	8f ef       	ldi	r24, 0xFF	; 255
    59b4:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    59b8:	f8 01       	movw	r30, r16
    59ba:	81 93       	st	Z+, r24
    59bc:	8f 01       	movw	r16, r30
    59be:	ee 16       	cp	r14, r30
    59c0:	ff 06       	cpc	r15, r31
    59c2:	b9 f7       	brne	.-18     	; 0x59b2 <disk_initialize+0xf6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    59c4:	89 81       	ldd	r24, Y+1	; 0x01
    59c6:	86 fd       	sbrc	r24, 6
    59c8:	38 c0       	rjmp	.+112    	; 0x5a3a <disk_initialize+0x17e>
    59ca:	04 e0       	ldi	r16, 0x04	; 4
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    59cc:	00 93 9f 25 	sts	0x259F, r16
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    59d0:	80 e1       	ldi	r24, 0x10	; 16
    59d2:	80 93 45 06 	sts	0x0645, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    59d6:	8f ef       	ldi	r24, 0xFF	; 255
    59d8:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    59dc:	80 91 04 20 	lds	r24, 0x2004
    59e0:	8e 7f       	andi	r24, 0xFE	; 254
    59e2:	80 93 04 20 	sts	0x2004, r24
		FCLK_FAST();
    59e6:	80 ed       	ldi	r24, 0xD0	; 208
    59e8:	80 93 c0 08 	sts	0x08C0, r24
    59ec:	84 cf       	rjmp	.-248    	; 0x58f6 <disk_initialize+0x3a>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    59ee:	40 e0       	ldi	r20, 0x00	; 0
    59f0:	50 e0       	ldi	r21, 0x00	; 0
    59f2:	ba 01       	movw	r22, r20
    59f4:	89 ea       	ldi	r24, 0xA9	; 169
    59f6:	df de       	rcall	.-578    	; 0x57b6 <send_cmd>
    59f8:	82 30       	cpi	r24, 0x02	; 2
    59fa:	e0 f0       	brcs	.+56     	; 0x5a34 <disk_initialize+0x178>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    59fc:	01 e0       	ldi	r16, 0x01	; 1
    59fe:	11 e0       	ldi	r17, 0x01	; 1
    5a00:	07 c0       	rjmp	.+14     	; 0x5a10 <disk_initialize+0x154>
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    5a02:	40 e0       	ldi	r20, 0x00	; 0
    5a04:	50 e0       	ldi	r21, 0x00	; 0
    5a06:	ba 01       	movw	r22, r20
    5a08:	81 2f       	mov	r24, r17
    5a0a:	d5 de       	rcall	.-598    	; 0x57b6 <send_cmd>
    5a0c:	88 23       	and	r24, r24
    5a0e:	21 f0       	breq	.+8      	; 0x5a18 <disk_initialize+0x15c>
    5a10:	90 91 a1 25 	lds	r25, 0x25A1
    5a14:	91 11       	cpse	r25, r1
    5a16:	f5 cf       	rjmp	.-22     	; 0x5a02 <disk_initialize+0x146>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    5a18:	80 91 a1 25 	lds	r24, 0x25A1
    5a1c:	88 23       	and	r24, r24
    5a1e:	09 f4       	brne	.+2      	; 0x5a22 <disk_initialize+0x166>
    5a20:	7f cf       	rjmp	.-258    	; 0x5920 <disk_initialize+0x64>
    5a22:	40 e0       	ldi	r20, 0x00	; 0
    5a24:	52 e0       	ldi	r21, 0x02	; 2
    5a26:	60 e0       	ldi	r22, 0x00	; 0
    5a28:	70 e0       	ldi	r23, 0x00	; 0
    5a2a:	80 e1       	ldi	r24, 0x10	; 16
    5a2c:	c4 de       	rcall	.-632    	; 0x57b6 <send_cmd>
    5a2e:	81 11       	cpse	r24, r1
    5a30:	77 cf       	rjmp	.-274    	; 0x5920 <disk_initialize+0x64>
    5a32:	cc cf       	rjmp	.-104    	; 0x59cc <disk_initialize+0x110>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    5a34:	02 e0       	ldi	r16, 0x02	; 2
    5a36:	19 ea       	ldi	r17, 0xA9	; 169
    5a38:	eb cf       	rjmp	.-42     	; 0x5a10 <disk_initialize+0x154>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    5a3a:	0c e0       	ldi	r16, 0x0C	; 12
    5a3c:	c7 cf       	rjmp	.-114    	; 0x59cc <disk_initialize+0x110>

00005a3e <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    5a3e:	81 11       	cpse	r24, r1
    5a40:	03 c0       	rjmp	.+6      	; 0x5a48 <disk_status+0xa>
	return Stat;
    5a42:	80 91 04 20 	lds	r24, 0x2004
    5a46:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    5a48:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    5a4a:	08 95       	ret

00005a4c <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    5a4c:	cf 92       	push	r12
    5a4e:	df 92       	push	r13
    5a50:	ef 92       	push	r14
    5a52:	ff 92       	push	r15
    5a54:	0f 93       	push	r16
    5a56:	1f 93       	push	r17
    5a58:	cf 93       	push	r28
    5a5a:	df 93       	push	r29
    5a5c:	f6 2e       	mov	r15, r22
    5a5e:	e7 2e       	mov	r14, r23
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    5a60:	88 23       	and	r24, r24
    5a62:	59 f0       	breq	.+22     	; 0x5a7a <disk_read+0x2e>
    5a64:	c4 e0       	ldi	r28, 0x04	; 4
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    5a66:	8c 2f       	mov	r24, r28
    5a68:	df 91       	pop	r29
    5a6a:	cf 91       	pop	r28
    5a6c:	1f 91       	pop	r17
    5a6e:	0f 91       	pop	r16
    5a70:	ff 90       	pop	r15
    5a72:	ef 90       	pop	r14
    5a74:	df 90       	pop	r13
    5a76:	cf 90       	pop	r12
    5a78:	08 95       	ret
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    5a7a:	01 15       	cp	r16, r1
    5a7c:	11 05       	cpc	r17, r1
    5a7e:	91 f3       	breq	.-28     	; 0x5a64 <disk_read+0x18>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5a80:	80 91 04 20 	lds	r24, 0x2004
    5a84:	80 ff       	sbrs	r24, 0
    5a86:	02 c0       	rjmp	.+4      	; 0x5a8c <disk_read+0x40>
    5a88:	c3 e0       	ldi	r28, 0x03	; 3
    5a8a:	ed cf       	rjmp	.-38     	; 0x5a66 <disk_read+0x1a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    5a8c:	80 91 9f 25 	lds	r24, 0x259F
    5a90:	83 fd       	sbrc	r24, 3
    5a92:	07 c0       	rjmp	.+14     	; 0x5aa2 <disk_read+0x56>
    5a94:	79 e0       	ldi	r23, 0x09	; 9
    5a96:	22 0f       	add	r18, r18
    5a98:	33 1f       	adc	r19, r19
    5a9a:	44 1f       	adc	r20, r20
    5a9c:	55 1f       	adc	r21, r21
    5a9e:	7a 95       	dec	r23
    5aa0:	d1 f7       	brne	.-12     	; 0x5a96 <disk_read+0x4a>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    5aa2:	02 30       	cpi	r16, 0x02	; 2
    5aa4:	11 05       	cpc	r17, r1
    5aa6:	08 f4       	brcc	.+2      	; 0x5aaa <disk_read+0x5e>
    5aa8:	47 c0       	rjmp	.+142    	; 0x5b38 <disk_read+0xec>
    5aaa:	62 e1       	ldi	r22, 0x12	; 18
    5aac:	c6 2e       	mov	r12, r22
	if (send_cmd(cmd, sector) == 0) {
    5aae:	ba 01       	movw	r22, r20
    5ab0:	a9 01       	movw	r20, r18
    5ab2:	8c 2d       	mov	r24, r12
    5ab4:	80 de       	rcall	.-768    	; 0x57b6 <send_cmd>
    5ab6:	81 11       	cpse	r24, r1
    5ab8:	3d c0       	rjmp	.+122    	; 0x5b34 <disk_read+0xe8>
)
{
	BYTE token;


	Timer1 = 20;
    5aba:	84 e1       	ldi	r24, 0x14	; 20
    5abc:	d8 2e       	mov	r13, r24
    5abe:	d0 92 a1 25 	sts	0x25A1, r13
    5ac2:	04 c0       	rjmp	.+8      	; 0x5acc <disk_read+0x80>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    5ac4:	90 91 a1 25 	lds	r25, 0x25A1
    5ac8:	99 23       	and	r25, r25
    5aca:	39 f0       	breq	.+14     	; 0x5ada <disk_read+0x8e>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5acc:	8f ef       	ldi	r24, 0xFF	; 255
    5ace:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    5ad2:	8f 3f       	cpi	r24, 0xFF	; 255
    5ad4:	b9 f3       	breq	.-18     	; 0x5ac4 <disk_read+0x78>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    5ad6:	8e 3f       	cpi	r24, 0xFE	; 254
    5ad8:	69 f0       	breq	.+26     	; 0x5af4 <disk_read+0xa8>
    5ada:	c1 e0       	ldi	r28, 0x01	; 1
    5adc:	01 2b       	or	r16, r17
    5ade:	41 f1       	breq	.+80     	; 0x5b30 <disk_read+0xe4>
	if (send_cmd(cmd, sector) == 0) {
		do {
			if (!rcvr_datablock(buff, 512)) break;
			buff += 512;
		} while (--count);
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    5ae0:	82 e1       	ldi	r24, 0x12	; 18
    5ae2:	c8 16       	cp	r12, r24
    5ae4:	61 f1       	breq	.+88     	; 0x5b3e <disk_read+0xf2>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    5ae6:	80 e1       	ldi	r24, 0x10	; 16
    5ae8:	80 93 45 06 	sts	0x0645, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5aec:	8f ef       	ldi	r24, 0xFF	; 255
    5aee:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
		} while (--count);
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    5af2:	b9 cf       	rjmp	.-142    	; 0x5a66 <disk_read+0x1a>
    5af4:	cf 2d       	mov	r28, r15
    5af6:	de 2d       	mov	r29, r14
    5af8:	7e 01       	movw	r14, r28
    5afa:	8e ef       	ldi	r24, 0xFE	; 254
    5afc:	f8 1a       	sub	r15, r24
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    5afe:	8f ef       	ldi	r24, 0xFF	; 255
    5b00:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5b04:	88 83       	st	Y, r24
		*p++ = spi_wr_rd(0xff);
    5b06:	8f ef       	ldi	r24, 0xFF	; 255
    5b08:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5b0c:	89 83       	std	Y+1, r24	; 0x01
    5b0e:	22 96       	adiw	r28, 0x02	; 2
		
	} while (cnt -= 2);
    5b10:	ce 15       	cp	r28, r14
    5b12:	df 05       	cpc	r29, r15
    5b14:	a1 f7       	brne	.-24     	; 0x5afe <disk_read+0xb2>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5b16:	8f ef       	ldi	r24, 0xFF	; 255
    5b18:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5b1c:	8f ef       	ldi	r24, 0xFF	; 255
    5b1e:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
	if (send_cmd(cmd, sector) == 0) {
		do {
			if (!rcvr_datablock(buff, 512)) break;
			buff += 512;
    5b22:	fc 2e       	mov	r15, r28
    5b24:	ed 2e       	mov	r14, r29
		} while (--count);
    5b26:	01 50       	subi	r16, 0x01	; 1
    5b28:	11 09       	sbc	r17, r1
    5b2a:	01 15       	cp	r16, r1
    5b2c:	11 05       	cpc	r17, r1
    5b2e:	39 f6       	brne	.-114    	; 0x5abe <disk_read+0x72>
    5b30:	c0 e0       	ldi	r28, 0x00	; 0
    5b32:	d6 cf       	rjmp	.-84     	; 0x5ae0 <disk_read+0x94>
    5b34:	c1 e0       	ldi	r28, 0x01	; 1
    5b36:	d7 cf       	rjmp	.-82     	; 0x5ae6 <disk_read+0x9a>
	if (pdrv || !count) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    5b38:	91 e1       	ldi	r25, 0x11	; 17
    5b3a:	c9 2e       	mov	r12, r25
    5b3c:	b8 cf       	rjmp	.-144    	; 0x5aae <disk_read+0x62>
	if (send_cmd(cmd, sector) == 0) {
		do {
			if (!rcvr_datablock(buff, 512)) break;
			buff += 512;
		} while (--count);
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    5b3e:	40 e0       	ldi	r20, 0x00	; 0
    5b40:	50 e0       	ldi	r21, 0x00	; 0
    5b42:	ba 01       	movw	r22, r20
    5b44:	8c e0       	ldi	r24, 0x0C	; 12
    5b46:	37 de       	rcall	.-914    	; 0x57b6 <send_cmd>
    5b48:	ce cf       	rjmp	.-100    	; 0x5ae6 <disk_read+0x9a>

00005b4a <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    5b4a:	af 92       	push	r10
    5b4c:	bf 92       	push	r11
    5b4e:	cf 92       	push	r12
    5b50:	df 92       	push	r13
    5b52:	ef 92       	push	r14
    5b54:	ff 92       	push	r15
    5b56:	0f 93       	push	r16
    5b58:	1f 93       	push	r17
    5b5a:	cf 93       	push	r28
    5b5c:	df 93       	push	r29
    5b5e:	b6 2e       	mov	r11, r22
    5b60:	a7 2e       	mov	r10, r23
    5b62:	69 01       	movw	r12, r18
    5b64:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    5b66:	88 23       	and	r24, r24
    5b68:	69 f0       	breq	.+26     	; 0x5b84 <disk_write+0x3a>
    5b6a:	c4 e0       	ldi	r28, 0x04	; 4
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    5b6c:	8c 2f       	mov	r24, r28
    5b6e:	df 91       	pop	r29
    5b70:	cf 91       	pop	r28
    5b72:	1f 91       	pop	r17
    5b74:	0f 91       	pop	r16
    5b76:	ff 90       	pop	r15
    5b78:	ef 90       	pop	r14
    5b7a:	df 90       	pop	r13
    5b7c:	cf 90       	pop	r12
    5b7e:	bf 90       	pop	r11
    5b80:	af 90       	pop	r10
    5b82:	08 95       	ret
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    5b84:	01 15       	cp	r16, r1
    5b86:	11 05       	cpc	r17, r1
    5b88:	81 f3       	breq	.-32     	; 0x5b6a <disk_write+0x20>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5b8a:	80 91 04 20 	lds	r24, 0x2004
    5b8e:	80 ff       	sbrs	r24, 0
    5b90:	02 c0       	rjmp	.+4      	; 0x5b96 <disk_write+0x4c>
    5b92:	c3 e0       	ldi	r28, 0x03	; 3
    5b94:	eb cf       	rjmp	.-42     	; 0x5b6c <disk_write+0x22>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    5b96:	80 91 04 20 	lds	r24, 0x2004
    5b9a:	82 ff       	sbrs	r24, 2
    5b9c:	02 c0       	rjmp	.+4      	; 0x5ba2 <disk_write+0x58>
    5b9e:	c2 e0       	ldi	r28, 0x02	; 2
    5ba0:	e5 cf       	rjmp	.-54     	; 0x5b6c <disk_write+0x22>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    5ba2:	80 91 9f 25 	lds	r24, 0x259F
    5ba6:	83 fd       	sbrc	r24, 3
    5ba8:	07 c0       	rjmp	.+14     	; 0x5bb8 <disk_write+0x6e>
    5baa:	f9 e0       	ldi	r31, 0x09	; 9
    5bac:	cc 0c       	add	r12, r12
    5bae:	dd 1c       	adc	r13, r13
    5bb0:	ee 1c       	adc	r14, r14
    5bb2:	ff 1c       	adc	r15, r15
    5bb4:	fa 95       	dec	r31
    5bb6:	d1 f7       	brne	.-12     	; 0x5bac <disk_write+0x62>

	if (count == 1) {	/* Single block write */
    5bb8:	01 30       	cpi	r16, 0x01	; 1
    5bba:	11 05       	cpc	r17, r1
    5bbc:	09 f4       	brne	.+2      	; 0x5bc0 <disk_write+0x76>
    5bbe:	57 c0       	rjmp	.+174    	; 0x5c6e <disk_write+0x124>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    5bc0:	86 70       	andi	r24, 0x06	; 6
    5bc2:	09 f0       	breq	.+2      	; 0x5bc6 <disk_write+0x7c>
    5bc4:	89 c0       	rjmp	.+274    	; 0x5cd8 <disk_write+0x18e>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    5bc6:	b7 01       	movw	r22, r14
    5bc8:	a6 01       	movw	r20, r12
    5bca:	89 e1       	ldi	r24, 0x19	; 25
    5bcc:	f4 dd       	rcall	.-1048   	; 0x57b6 <send_cmd>
    5bce:	81 11       	cpse	r24, r1
    5bd0:	81 c0       	rjmp	.+258    	; 0x5cd4 <disk_write+0x18a>
	UINT wt			/* Timeout [ms] */
)
{
	BYTE d;

	Timer2 = wt / 10;
    5bd2:	e2 e3       	ldi	r30, 0x32	; 50
    5bd4:	de 2e       	mov	r13, r30
    5bd6:	d0 92 a0 25 	sts	0x25A0, r13
    5bda:	04 c0       	rjmp	.+8      	; 0x5be4 <disk_write+0x9a>
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    5bdc:	80 91 a0 25 	lds	r24, 0x25A0
    5be0:	88 23       	and	r24, r24
    5be2:	51 f1       	breq	.+84     	; 0x5c38 <disk_write+0xee>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5be4:	8f ef       	ldi	r24, 0xFF	; 255
    5be6:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
	BYTE d;

	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    5bea:	8f 3f       	cpi	r24, 0xFF	; 255
    5bec:	b9 f7       	brne	.-18     	; 0x5bdc <disk_write+0x92>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5bee:	8c ef       	ldi	r24, 0xFC	; 252
    5bf0:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5bf4:	cb 2d       	mov	r28, r11
    5bf6:	da 2d       	mov	r29, r10
    5bf8:	7e 01       	movw	r14, r28
    5bfa:	8e ef       	ldi	r24, 0xFE	; 254
    5bfc:	f8 1a       	sub	r15, r24
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		spi_wr_rd(*p++);
    5bfe:	88 81       	ld	r24, Y
    5c00:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
		spi_wr_rd(*p++);
    5c04:	89 81       	ldd	r24, Y+1	; 0x01
    5c06:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5c0a:	22 96       	adiw	r28, 0x02	; 2
		
	} while (cnt -= 2);
    5c0c:	ec 16       	cp	r14, r28
    5c0e:	fd 06       	cpc	r15, r29
    5c10:	b1 f7       	brne	.-20     	; 0x5bfe <disk_write+0xb4>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5c12:	8f ef       	ldi	r24, 0xFF	; 255
    5c14:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5c18:	8f ef       	ldi	r24, 0xFF	; 255
    5c1a:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5c1e:	8f ef       	ldi	r24, 0xFF	; 255
    5c20:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
		xchg_spi(0xFF);
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    5c24:	8f 71       	andi	r24, 0x1F	; 31
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    5c26:	85 30       	cpi	r24, 0x05	; 5
    5c28:	39 f4       	brne	.+14     	; 0x5c38 <disk_write+0xee>
				buff += 512;
    5c2a:	be 2c       	mov	r11, r14
    5c2c:	af 2c       	mov	r10, r15
			} while (--count);
    5c2e:	01 50       	subi	r16, 0x01	; 1
    5c30:	11 09       	sbc	r17, r1
    5c32:	01 15       	cp	r16, r1
    5c34:	11 05       	cpc	r17, r1
    5c36:	79 f6       	brne	.-98     	; 0x5bd6 <disk_write+0x8c>
	UINT wt			/* Timeout [ms] */
)
{
	BYTE d;

	Timer2 = wt / 10;
    5c38:	82 e3       	ldi	r24, 0x32	; 50
    5c3a:	80 93 a0 25 	sts	0x25A0, r24
    5c3e:	05 c0       	rjmp	.+10     	; 0x5c4a <disk_write+0x100>
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    5c40:	80 91 a0 25 	lds	r24, 0x25A0
    5c44:	88 23       	and	r24, r24
    5c46:	09 f4       	brne	.+2      	; 0x5c4a <disk_write+0x100>
    5c48:	45 c0       	rjmp	.+138    	; 0x5cd4 <disk_write+0x18a>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5c4a:	8f ef       	ldi	r24, 0xFF	; 255
    5c4c:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
	BYTE d;

	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    5c50:	8f 3f       	cpi	r24, 0xFF	; 255
    5c52:	b1 f7       	brne	.-20     	; 0x5c40 <disk_write+0xf6>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5c54:	8d ef       	ldi	r24, 0xFD	; 253
    5c56:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5c5a:	c1 e0       	ldi	r28, 0x01	; 1
    5c5c:	01 2b       	or	r16, r17
    5c5e:	c1 f1       	breq	.+112    	; 0x5cd0 <disk_write+0x186>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    5c60:	80 e1       	ldi	r24, 0x10	; 16
    5c62:	80 93 45 06 	sts	0x0645, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5c66:	8f ef       	ldi	r24, 0xFF	; 255
    5c68:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    5c6c:	7f cf       	rjmp	.-258    	; 0x5b6c <disk_write+0x22>
	if (Stat & STA_PROTECT) return RES_WRPRT;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    5c6e:	b7 01       	movw	r22, r14
    5c70:	a6 01       	movw	r20, r12
    5c72:	88 e1       	ldi	r24, 0x18	; 24
    5c74:	a0 dd       	rcall	.-1216   	; 0x57b6 <send_cmd>
    5c76:	81 11       	cpse	r24, r1
    5c78:	2d c0       	rjmp	.+90     	; 0x5cd4 <disk_write+0x18a>
	UINT wt			/* Timeout [ms] */
)
{
	BYTE d;

	Timer2 = wt / 10;
    5c7a:	82 e3       	ldi	r24, 0x32	; 50
    5c7c:	80 93 a0 25 	sts	0x25A0, r24
    5c80:	04 c0       	rjmp	.+8      	; 0x5c8a <disk_write+0x140>
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    5c82:	80 91 a0 25 	lds	r24, 0x25A0
    5c86:	88 23       	and	r24, r24
    5c88:	29 f1       	breq	.+74     	; 0x5cd4 <disk_write+0x18a>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5c8a:	8f ef       	ldi	r24, 0xFF	; 255
    5c8c:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
	BYTE d;

	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    5c90:	8f 3f       	cpi	r24, 0xFF	; 255
    5c92:	b9 f7       	brne	.-18     	; 0x5c82 <disk_write+0x138>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5c94:	8e ef       	ldi	r24, 0xFE	; 254
    5c96:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5c9a:	cb 2d       	mov	r28, r11
    5c9c:	da 2d       	mov	r29, r10
    5c9e:	8e 01       	movw	r16, r28
    5ca0:	1e 5f       	subi	r17, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		spi_wr_rd(*p++);
    5ca2:	88 81       	ld	r24, Y
    5ca4:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
		spi_wr_rd(*p++);
    5ca8:	89 81       	ldd	r24, Y+1	; 0x01
    5caa:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5cae:	22 96       	adiw	r28, 0x02	; 2
		
	} while (cnt -= 2);
    5cb0:	c0 17       	cp	r28, r16
    5cb2:	d1 07       	cpc	r29, r17
    5cb4:	b1 f7       	brne	.-20     	; 0x5ca2 <disk_write+0x158>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5cb6:	8f ef       	ldi	r24, 0xFF	; 255
    5cb8:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5cbc:	8f ef       	ldi	r24, 0xFF	; 255
    5cbe:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5cc2:	8f ef       	ldi	r24, 0xFF	; 255
    5cc4:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
		xchg_spi(0xFF);
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    5cc8:	8f 71       	andi	r24, 0x1F	; 31

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
    5cca:	c1 e0       	ldi	r28, 0x01	; 1
    5ccc:	85 30       	cpi	r24, 0x05	; 5
    5cce:	41 f6       	brne	.-112    	; 0x5c60 <disk_write+0x116>
    5cd0:	c0 e0       	ldi	r28, 0x00	; 0
    5cd2:	c6 cf       	rjmp	.-116    	; 0x5c60 <disk_write+0x116>
    5cd4:	c1 e0       	ldi	r28, 0x01	; 1
    5cd6:	c4 cf       	rjmp	.-120    	; 0x5c60 <disk_write+0x116>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    5cd8:	a8 01       	movw	r20, r16
    5cda:	60 e0       	ldi	r22, 0x00	; 0
    5cdc:	70 e0       	ldi	r23, 0x00	; 0
    5cde:	87 e9       	ldi	r24, 0x97	; 151
    5ce0:	6a dd       	rcall	.-1324   	; 0x57b6 <send_cmd>
    5ce2:	71 cf       	rjmp	.-286    	; 0x5bc6 <disk_write+0x7c>

00005ce4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    5ce4:	cf 92       	push	r12
    5ce6:	df 92       	push	r13
    5ce8:	ef 92       	push	r14
    5cea:	ff 92       	push	r15
    5cec:	0f 93       	push	r16
    5cee:	1f 93       	push	r17
    5cf0:	cf 93       	push	r28
    5cf2:	df 93       	push	r29
    5cf4:	cd b7       	in	r28, 0x3d	; 61
    5cf6:	de b7       	in	r29, 0x3e	; 62
    5cf8:	60 97       	sbiw	r28, 0x10	; 16
    5cfa:	cd bf       	out	0x3d, r28	; 61
    5cfc:	de bf       	out	0x3e, r29	; 62
    5cfe:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    5d00:	88 23       	and	r24, r24
    5d02:	69 f0       	breq	.+26     	; 0x5d1e <disk_ioctl+0x3a>
    5d04:	84 e0       	ldi	r24, 0x04	; 4
	}

	deselect();

	return res;
}
    5d06:	60 96       	adiw	r28, 0x10	; 16
    5d08:	cd bf       	out	0x3d, r28	; 61
    5d0a:	de bf       	out	0x3e, r29	; 62
    5d0c:	df 91       	pop	r29
    5d0e:	cf 91       	pop	r28
    5d10:	1f 91       	pop	r17
    5d12:	0f 91       	pop	r16
    5d14:	ff 90       	pop	r15
    5d16:	ef 90       	pop	r14
    5d18:	df 90       	pop	r13
    5d1a:	cf 90       	pop	r12
    5d1c:	08 95       	ret

	if (pdrv) return RES_PARERR;

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    5d1e:	80 91 04 20 	lds	r24, 0x2004
    5d22:	80 ff       	sbrs	r24, 0
    5d24:	02 c0       	rjmp	.+4      	; 0x5d2a <disk_ioctl+0x46>
    5d26:	83 e0       	ldi	r24, 0x03	; 3
    5d28:	ee cf       	rjmp	.-36     	; 0x5d06 <disk_ioctl+0x22>

	switch (cmd) {
    5d2a:	86 2f       	mov	r24, r22
    5d2c:	90 e0       	ldi	r25, 0x00	; 0
    5d2e:	87 33       	cpi	r24, 0x37	; 55
    5d30:	91 05       	cpc	r25, r1
    5d32:	48 f0       	brcs	.+18     	; 0x5d46 <disk_ioctl+0x62>
		Stat |= STA_NOINIT;
		res = RES_OK;
		break;

	default:
		res = RES_PARERR;
    5d34:	14 e0       	ldi	r17, 0x04	; 4
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    5d36:	90 e1       	ldi	r25, 0x10	; 16
    5d38:	90 93 45 06 	sts	0x0645, r25
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5d3c:	8f ef       	ldi	r24, 0xFF	; 255
    5d3e:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
		res = RES_PARERR;
	}

	deselect();

	return res;
    5d42:	81 2f       	mov	r24, r17
    5d44:	e0 cf       	rjmp	.-64     	; 0x5d06 <disk_ioctl+0x22>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
    5d46:	fc 01       	movw	r30, r24
    5d48:	e2 50       	subi	r30, 0x02	; 2
    5d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d4c:	0c 94 f2 3e 	jmp	0x7de4	; 0x7de4 <__tablejump2__>
			res = RES_OK;
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    5d50:	40 e0       	ldi	r20, 0x00	; 0
    5d52:	50 e0       	ldi	r21, 0x00	; 0
    5d54:	ba 01       	movw	r22, r20
    5d56:	8d e8       	ldi	r24, 0x8D	; 141
    5d58:	2e dd       	rcall	.-1444   	; 0x57b6 <send_cmd>
    5d5a:	88 23       	and	r24, r24
    5d5c:	09 f4       	brne	.+2      	; 0x5d60 <disk_ioctl+0x7c>
    5d5e:	3b c1       	rjmp	.+630    	; 0x5fd6 <disk_ioctl+0x2f2>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    5d60:	11 e0       	ldi	r17, 0x01	; 1
    5d62:	e9 cf       	rjmp	.-46     	; 0x5d36 <disk_ioctl+0x52>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    5d64:	40 e0       	ldi	r20, 0x00	; 0
    5d66:	50 e0       	ldi	r21, 0x00	; 0
    5d68:	ba 01       	movw	r22, r20
    5d6a:	8a e3       	ldi	r24, 0x3A	; 58
    5d6c:	24 dd       	rcall	.-1464   	; 0x57b6 <send_cmd>
    5d6e:	81 11       	cpse	r24, r1
    5d70:	f7 cf       	rjmp	.-18     	; 0x5d60 <disk_ioctl+0x7c>
    5d72:	78 01       	movw	r14, r16
    5d74:	f4 e0       	ldi	r31, 0x04	; 4
    5d76:	ef 0e       	add	r14, r31
    5d78:	f1 1c       	adc	r15, r1
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5d7a:	8f ef       	ldi	r24, 0xFF	; 255
    5d7c:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    5d80:	f8 01       	movw	r30, r16
    5d82:	81 93       	st	Z+, r24
    5d84:	8f 01       	movw	r16, r30
    5d86:	ee 15       	cp	r30, r14
    5d88:	ff 05       	cpc	r31, r15
    5d8a:	b9 f7       	brne	.-18     	; 0x5d7a <disk_ioctl+0x96>
			res = RES_OK;
    5d8c:	10 e0       	ldi	r17, 0x00	; 0
    5d8e:	d3 cf       	rjmp	.-90     	; 0x5d36 <disk_ioctl+0x52>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    5d90:	40 e0       	ldi	r20, 0x00	; 0
    5d92:	50 e0       	ldi	r21, 0x00	; 0
    5d94:	ba 01       	movw	r22, r20
    5d96:	8a e0       	ldi	r24, 0x0A	; 10
    5d98:	0e dd       	rcall	.-1508   	; 0x57b6 <send_cmd>
    5d9a:	81 11       	cpse	r24, r1
    5d9c:	e1 cf       	rjmp	.-62     	; 0x5d60 <disk_ioctl+0x7c>
)
{
	BYTE token;


	Timer1 = 20;
    5d9e:	84 e1       	ldi	r24, 0x14	; 20
    5da0:	80 93 a1 25 	sts	0x25A1, r24
    5da4:	04 c0       	rjmp	.+8      	; 0x5dae <disk_ioctl+0xca>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    5da6:	80 91 a1 25 	lds	r24, 0x25A1
    5daa:	88 23       	and	r24, r24
    5dac:	c9 f2       	breq	.-78     	; 0x5d60 <disk_ioctl+0x7c>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5dae:	8f ef       	ldi	r24, 0xFF	; 255
    5db0:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    5db4:	8f 3f       	cpi	r24, 0xFF	; 255
    5db6:	b9 f3       	breq	.-18     	; 0x5da6 <disk_ioctl+0xc2>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    5db8:	8e 3f       	cpi	r24, 0xFE	; 254
    5dba:	91 f6       	brne	.-92     	; 0x5d60 <disk_ioctl+0x7c>
    5dbc:	78 01       	movw	r14, r16
    5dbe:	f0 e1       	ldi	r31, 0x10	; 16
    5dc0:	ef 0e       	add	r14, r31
    5dc2:	f1 1c       	adc	r15, r1
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    5dc4:	8f ef       	ldi	r24, 0xFF	; 255
    5dc6:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5dca:	f8 01       	movw	r30, r16
    5dcc:	80 83       	st	Z, r24
		*p++ = spi_wr_rd(0xff);
    5dce:	8f ef       	ldi	r24, 0xFF	; 255
    5dd0:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5dd4:	f8 01       	movw	r30, r16
    5dd6:	81 83       	std	Z+1, r24	; 0x01
    5dd8:	0e 5f       	subi	r16, 0xFE	; 254
    5dda:	1f 4f       	sbci	r17, 0xFF	; 255
		
	} while (cnt -= 2);
    5ddc:	0e 15       	cp	r16, r14
    5dde:	1f 05       	cpc	r17, r15
    5de0:	89 f7       	brne	.-30     	; 0x5dc4 <disk_ioctl+0xe0>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5de2:	8f ef       	ldi	r24, 0xFF	; 255
    5de4:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5de8:	8f ef       	ldi	r24, 0xFF	; 255
    5dea:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
    5dee:	10 e0       	ldi	r17, 0x00	; 0
    5df0:	a2 cf       	rjmp	.-188    	; 0x5d36 <disk_ioctl+0x52>

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    5df2:	0e 94 91 38 	call	0x7122	; 0x7122 <spi_off>
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
		Stat |= STA_NOINIT;
    5df6:	80 91 04 20 	lds	r24, 0x2004
    5dfa:	81 60       	ori	r24, 0x01	; 1
    5dfc:	80 93 04 20 	sts	0x2004, r24
		res = RES_OK;
    5e00:	10 e0       	ldi	r17, 0x00	; 0
		break;
    5e02:	99 cf       	rjmp	.-206    	; 0x5d36 <disk_ioctl+0x52>
		*ptr = CardType;
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    5e04:	40 e0       	ldi	r20, 0x00	; 0
    5e06:	50 e0       	ldi	r21, 0x00	; 0
    5e08:	ba 01       	movw	r22, r20
    5e0a:	89 e0       	ldi	r24, 0x09	; 9
    5e0c:	d4 dc       	rcall	.-1624   	; 0x57b6 <send_cmd>
    5e0e:	81 11       	cpse	r24, r1
    5e10:	a7 cf       	rjmp	.-178    	; 0x5d60 <disk_ioctl+0x7c>
)
{
	BYTE token;


	Timer1 = 20;
    5e12:	84 e1       	ldi	r24, 0x14	; 20
    5e14:	80 93 a1 25 	sts	0x25A1, r24
    5e18:	05 c0       	rjmp	.+10     	; 0x5e24 <disk_ioctl+0x140>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    5e1a:	80 91 a1 25 	lds	r24, 0x25A1
    5e1e:	88 23       	and	r24, r24
    5e20:	09 f4       	brne	.+2      	; 0x5e24 <disk_ioctl+0x140>
    5e22:	9e cf       	rjmp	.-196    	; 0x5d60 <disk_ioctl+0x7c>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5e24:	8f ef       	ldi	r24, 0xFF	; 255
    5e26:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    5e2a:	8f 3f       	cpi	r24, 0xFF	; 255
    5e2c:	b1 f3       	breq	.-20     	; 0x5e1a <disk_ioctl+0x136>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    5e2e:	8e 3f       	cpi	r24, 0xFE	; 254
    5e30:	09 f0       	breq	.+2      	; 0x5e34 <disk_ioctl+0x150>
    5e32:	96 cf       	rjmp	.-212    	; 0x5d60 <disk_ioctl+0x7c>
    5e34:	78 01       	movw	r14, r16
    5e36:	f0 e1       	ldi	r31, 0x10	; 16
    5e38:	ef 0e       	add	r14, r31
    5e3a:	f1 1c       	adc	r15, r1
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    5e3c:	8f ef       	ldi	r24, 0xFF	; 255
    5e3e:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5e42:	f8 01       	movw	r30, r16
    5e44:	80 83       	st	Z, r24
		*p++ = spi_wr_rd(0xff);
    5e46:	8f ef       	ldi	r24, 0xFF	; 255
    5e48:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5e4c:	f8 01       	movw	r30, r16
    5e4e:	81 83       	std	Z+1, r24	; 0x01
    5e50:	0e 5f       	subi	r16, 0xFE	; 254
    5e52:	1f 4f       	sbci	r17, 0xFF	; 255
		
	} while (cnt -= 2);
    5e54:	0e 15       	cp	r16, r14
    5e56:	1f 05       	cpc	r17, r15
    5e58:	89 f7       	brne	.-30     	; 0x5e3c <disk_ioctl+0x158>
    5e5a:	c3 cf       	rjmp	.-122    	; 0x5de2 <disk_ioctl+0xfe>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    5e5c:	80 91 9f 25 	lds	r24, 0x259F
    5e60:	fa 01       	movw	r30, r20
    5e62:	80 83       	st	Z, r24
		res = RES_OK;
    5e64:	10 e0       	ldi	r17, 0x00	; 0
		break;
    5e66:	67 cf       	rjmp	.-306    	; 0x5d36 <disk_ioctl+0x52>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    5e68:	40 e0       	ldi	r20, 0x00	; 0
    5e6a:	50 e0       	ldi	r21, 0x00	; 0
    5e6c:	ba 01       	movw	r22, r20
    5e6e:	89 e0       	ldi	r24, 0x09	; 9
    5e70:	a2 dc       	rcall	.-1724   	; 0x57b6 <send_cmd>
    5e72:	81 11       	cpse	r24, r1
    5e74:	75 cf       	rjmp	.-278    	; 0x5d60 <disk_ioctl+0x7c>
)
{
	BYTE token;


	Timer1 = 20;
    5e76:	84 e1       	ldi	r24, 0x14	; 20
    5e78:	80 93 a1 25 	sts	0x25A1, r24
    5e7c:	05 c0       	rjmp	.+10     	; 0x5e88 <disk_ioctl+0x1a4>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    5e7e:	80 91 a1 25 	lds	r24, 0x25A1
    5e82:	88 23       	and	r24, r24
    5e84:	09 f4       	brne	.+2      	; 0x5e88 <disk_ioctl+0x1a4>
    5e86:	6c cf       	rjmp	.-296    	; 0x5d60 <disk_ioctl+0x7c>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5e88:	8f ef       	ldi	r24, 0xFF	; 255
    5e8a:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    5e8e:	8f 3f       	cpi	r24, 0xFF	; 255
    5e90:	b1 f3       	breq	.-20     	; 0x5e7e <disk_ioctl+0x19a>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    5e92:	8e 3f       	cpi	r24, 0xFE	; 254
    5e94:	09 f0       	breq	.+2      	; 0x5e98 <disk_ioctl+0x1b4>
    5e96:	64 cf       	rjmp	.-312    	; 0x5d60 <disk_ioctl+0x7c>
    5e98:	ce 01       	movw	r24, r28
    5e9a:	01 96       	adiw	r24, 0x01	; 1
    5e9c:	7c 01       	movw	r14, r24
    5e9e:	6e 01       	movw	r12, r28
    5ea0:	91 e1       	ldi	r25, 0x11	; 17
    5ea2:	c9 0e       	add	r12, r25
    5ea4:	d1 1c       	adc	r13, r1
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    5ea6:	8f ef       	ldi	r24, 0xFF	; 255
    5ea8:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5eac:	f7 01       	movw	r30, r14
    5eae:	80 83       	st	Z, r24
		*p++ = spi_wr_rd(0xff);
    5eb0:	8f ef       	ldi	r24, 0xFF	; 255
    5eb2:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5eb6:	f7 01       	movw	r30, r14
    5eb8:	81 83       	std	Z+1, r24	; 0x01
    5eba:	f2 e0       	ldi	r31, 0x02	; 2
    5ebc:	ef 0e       	add	r14, r31
    5ebe:	f1 1c       	adc	r15, r1
		
	} while (cnt -= 2);
    5ec0:	ec 14       	cp	r14, r12
    5ec2:	fd 04       	cpc	r15, r13
    5ec4:	81 f7       	brne	.-32     	; 0x5ea6 <disk_ioctl+0x1c2>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5ec6:	8f ef       	ldi	r24, 0xFF	; 255
    5ec8:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5ecc:	8f ef       	ldi	r24, 0xFF	; 255
    5ece:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
		if (select()) res = RES_OK;
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    5ed2:	89 81       	ldd	r24, Y+1	; 0x01
    5ed4:	82 95       	swap	r24
    5ed6:	86 95       	lsr	r24
    5ed8:	86 95       	lsr	r24
    5eda:	83 70       	andi	r24, 0x03	; 3
    5edc:	81 30       	cpi	r24, 0x01	; 1
    5ede:	09 f4       	brne	.+2      	; 0x5ee2 <disk_ioctl+0x1fe>
    5ee0:	da c0       	rjmp	.+436    	; 0x6096 <disk_ioctl+0x3b2>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    5ee2:	89 85       	ldd	r24, Y+9	; 0x09
    5ee4:	82 95       	swap	r24
    5ee6:	86 95       	lsr	r24
    5ee8:	86 95       	lsr	r24
    5eea:	83 70       	andi	r24, 0x03	; 3
    5eec:	28 85       	ldd	r18, Y+8	; 0x08
    5eee:	90 e0       	ldi	r25, 0x00	; 0
    5ef0:	f4 e0       	ldi	r31, 0x04	; 4
    5ef2:	2f 9f       	mul	r18, r31
    5ef4:	80 0d       	add	r24, r0
    5ef6:	91 1d       	adc	r25, r1
    5ef8:	11 24       	eor	r1, r1
    5efa:	01 96       	adiw	r24, 0x01	; 1
    5efc:	2f 81       	ldd	r18, Y+7	; 0x07
    5efe:	23 70       	andi	r18, 0x03	; 3
    5f00:	30 e0       	ldi	r19, 0x00	; 0
    5f02:	32 2f       	mov	r19, r18
    5f04:	22 27       	eor	r18, r18
    5f06:	33 0f       	add	r19, r19
    5f08:	33 0f       	add	r19, r19
    5f0a:	82 0f       	add	r24, r18
    5f0c:	93 1f       	adc	r25, r19
    5f0e:	a0 e0       	ldi	r26, 0x00	; 0
    5f10:	b0 e0       	ldi	r27, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    5f12:	2e 81       	ldd	r18, Y+6	; 0x06
    5f14:	2f 70       	andi	r18, 0x0F	; 15
    5f16:	3b 85       	ldd	r19, Y+11	; 0x0b
    5f18:	33 1f       	adc	r19, r19
    5f1a:	33 27       	eor	r19, r19
    5f1c:	33 1f       	adc	r19, r19
    5f1e:	23 0f       	add	r18, r19
    5f20:	3a 85       	ldd	r19, Y+10	; 0x0a
    5f22:	33 70       	andi	r19, 0x03	; 3
    5f24:	33 0f       	add	r19, r19
    5f26:	23 0f       	add	r18, r19
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    5f28:	27 50       	subi	r18, 0x07	; 7
    5f2a:	04 c0       	rjmp	.+8      	; 0x5f34 <disk_ioctl+0x250>
    5f2c:	88 0f       	add	r24, r24
    5f2e:	99 1f       	adc	r25, r25
    5f30:	aa 1f       	adc	r26, r26
    5f32:	bb 1f       	adc	r27, r27
    5f34:	2a 95       	dec	r18
    5f36:	d2 f7       	brpl	.-12     	; 0x5f2c <disk_ioctl+0x248>
    5f38:	f8 01       	movw	r30, r16
    5f3a:	80 83       	st	Z, r24
    5f3c:	91 83       	std	Z+1, r25	; 0x01
    5f3e:	a2 83       	std	Z+2, r26	; 0x02
    5f40:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    5f42:	10 e0       	ldi	r17, 0x00	; 0
    5f44:	f8 ce       	rjmp	.-528    	; 0x5d36 <disk_ioctl+0x52>
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
    5f46:	80 e1       	ldi	r24, 0x10	; 16
    5f48:	80 93 46 06 	sts	0x0646, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5f4c:	8f ef       	ldi	r24, 0xFF	; 255
    5f4e:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
	UINT wt			/* Timeout [ms] */
)
{
	BYTE d;

	Timer2 = wt / 10;
    5f52:	82 e3       	ldi	r24, 0x32	; 50
    5f54:	80 93 a0 25 	sts	0x25A0, r24
    5f58:	05 c0       	rjmp	.+10     	; 0x5f64 <disk_ioctl+0x280>
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    5f5a:	80 91 a0 25 	lds	r24, 0x25A0
    5f5e:	88 23       	and	r24, r24
    5f60:	09 f4       	brne	.+2      	; 0x5f64 <disk_ioctl+0x280>
    5f62:	91 c0       	rjmp	.+290    	; 0x6086 <disk_ioctl+0x3a2>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5f64:	8f ef       	ldi	r24, 0xFF	; 255
    5f66:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
	BYTE d;

	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    5f6a:	8f 3f       	cpi	r24, 0xFF	; 255
    5f6c:	b1 f7       	brne	.-20     	; 0x5f5a <disk_ioctl+0x276>
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
			res = RES_OK;
    5f6e:	10 e0       	ldi	r17, 0x00	; 0
    5f70:	e2 ce       	rjmp	.-572    	; 0x5d36 <disk_ioctl+0x52>
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    5f72:	80 91 9f 25 	lds	r24, 0x259F
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    5f76:	40 e0       	ldi	r20, 0x00	; 0
    5f78:	50 e0       	ldi	r21, 0x00	; 0
    5f7a:	ba 01       	movw	r22, r20
			res = RES_OK;
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    5f7c:	82 ff       	sbrs	r24, 2
    5f7e:	53 c0       	rjmp	.+166    	; 0x6026 <disk_ioctl+0x342>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    5f80:	8d e8       	ldi	r24, 0x8D	; 141
    5f82:	19 dc       	rcall	.-1998   	; 0x57b6 <send_cmd>
    5f84:	81 11       	cpse	r24, r1
    5f86:	ec ce       	rjmp	.-552    	; 0x5d60 <disk_ioctl+0x7c>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5f88:	8f ef       	ldi	r24, 0xFF	; 255
    5f8a:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
				xchg_spi(0xFF);
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    5f8e:	60 e1       	ldi	r22, 0x10	; 16
    5f90:	70 e0       	ldi	r23, 0x00	; 0
    5f92:	ce 01       	movw	r24, r28
    5f94:	01 96       	adiw	r24, 0x01	; 1
    5f96:	d1 db       	rcall	.-2142   	; 0x573a <rcvr_datablock>
    5f98:	89 2b       	or	r24, r25
    5f9a:	09 f4       	brne	.+2      	; 0x5f9e <disk_ioctl+0x2ba>
    5f9c:	e1 ce       	rjmp	.-574    	; 0x5d60 <disk_ioctl+0x7c>
    5f9e:	b0 e3       	ldi	r27, 0x30	; 48
    5fa0:	fb 2e       	mov	r15, r27
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5fa2:	8f ef       	ldi	r24, 0xFF	; 255
    5fa4:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    5fa8:	fa 94       	dec	r15
	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
				xchg_spi(0xFF);
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    5faa:	d9 f7       	brne	.-10     	; 0x5fa2 <disk_ioctl+0x2be>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    5fac:	2b 85       	ldd	r18, Y+11	; 0x0b
    5fae:	22 95       	swap	r18
    5fb0:	2f 70       	andi	r18, 0x0F	; 15
    5fb2:	80 e1       	ldi	r24, 0x10	; 16
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
    5fb6:	a0 e0       	ldi	r26, 0x00	; 0
    5fb8:	b0 e0       	ldi	r27, 0x00	; 0
    5fba:	04 c0       	rjmp	.+8      	; 0x5fc4 <disk_ioctl+0x2e0>
    5fbc:	88 0f       	add	r24, r24
    5fbe:	99 1f       	adc	r25, r25
    5fc0:	aa 1f       	adc	r26, r26
    5fc2:	bb 1f       	adc	r27, r27
    5fc4:	2a 95       	dec	r18
    5fc6:	d2 f7       	brpl	.-12     	; 0x5fbc <disk_ioctl+0x2d8>
    5fc8:	f8 01       	movw	r30, r16
    5fca:	80 83       	st	Z, r24
    5fcc:	91 83       	std	Z+1, r25	; 0x01
    5fce:	a2 83       	std	Z+2, r26	; 0x02
    5fd0:	b3 83       	std	Z+3, r27	; 0x03
					res = RES_OK;
    5fd2:	10 e0       	ldi	r17, 0x00	; 0
    5fd4:	b0 ce       	rjmp	.-672    	; 0x5d36 <disk_ioctl+0x52>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5fd6:	8f ef       	ldi	r24, 0xFF	; 255
    5fd8:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
)
{
	BYTE token;


	Timer1 = 20;
    5fdc:	84 e1       	ldi	r24, 0x14	; 20
    5fde:	80 93 a1 25 	sts	0x25A1, r24
    5fe2:	05 c0       	rjmp	.+10     	; 0x5fee <disk_ioctl+0x30a>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    5fe4:	80 91 a1 25 	lds	r24, 0x25A1
    5fe8:	88 23       	and	r24, r24
    5fea:	09 f4       	brne	.+2      	; 0x5fee <disk_ioctl+0x30a>
    5fec:	b9 ce       	rjmp	.-654    	; 0x5d60 <disk_ioctl+0x7c>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    5fee:	8f ef       	ldi	r24, 0xFF	; 255
    5ff0:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    5ff4:	8f 3f       	cpi	r24, 0xFF	; 255
    5ff6:	b1 f3       	breq	.-20     	; 0x5fe4 <disk_ioctl+0x300>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    5ff8:	8e 3f       	cpi	r24, 0xFE	; 254
    5ffa:	09 f0       	breq	.+2      	; 0x5ffe <disk_ioctl+0x31a>
    5ffc:	b1 ce       	rjmp	.-670    	; 0x5d60 <disk_ioctl+0x7c>
    5ffe:	78 01       	movw	r14, r16
    6000:	f0 e4       	ldi	r31, 0x40	; 64
    6002:	ef 0e       	add	r14, r31
    6004:	f1 1c       	adc	r15, r1
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    6006:	8f ef       	ldi	r24, 0xFF	; 255
    6008:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    600c:	f8 01       	movw	r30, r16
    600e:	80 83       	st	Z, r24
		*p++ = spi_wr_rd(0xff);
    6010:	8f ef       	ldi	r24, 0xFF	; 255
    6012:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
    6016:	f8 01       	movw	r30, r16
    6018:	81 83       	std	Z+1, r24	; 0x01
    601a:	0e 5f       	subi	r16, 0xFE	; 254
    601c:	1f 4f       	sbci	r17, 0xFF	; 255
		
	} while (cnt -= 2);
    601e:	0e 15       	cp	r16, r14
    6020:	1f 05       	cpc	r17, r15
    6022:	89 f7       	brne	.-30     	; 0x6006 <disk_ioctl+0x322>
    6024:	de ce       	rjmp	.-580    	; 0x5de2 <disk_ioctl+0xfe>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    6026:	89 e0       	ldi	r24, 0x09	; 9
    6028:	c6 db       	rcall	.-2164   	; 0x57b6 <send_cmd>
    602a:	81 11       	cpse	r24, r1
    602c:	99 ce       	rjmp	.-718    	; 0x5d60 <disk_ioctl+0x7c>
    602e:	60 e1       	ldi	r22, 0x10	; 16
    6030:	70 e0       	ldi	r23, 0x00	; 0
    6032:	ce 01       	movw	r24, r28
    6034:	01 96       	adiw	r24, 0x01	; 1
    6036:	81 db       	rcall	.-2302   	; 0x573a <rcvr_datablock>
    6038:	89 2b       	or	r24, r25
    603a:	09 f4       	brne	.+2      	; 0x603e <disk_ioctl+0x35a>
    603c:	91 ce       	rjmp	.-734    	; 0x5d60 <disk_ioctl+0x7c>
				if (CardType & CT_SD1) {	/* SDv1 */
    603e:	80 91 9f 25 	lds	r24, 0x259F
    6042:	81 ff       	sbrs	r24, 1
    6044:	4c c0       	rjmp	.+152    	; 0x60de <disk_ioctl+0x3fa>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    6046:	8c 85       	ldd	r24, Y+12	; 0x0c
    6048:	88 1f       	adc	r24, r24
    604a:	88 27       	eor	r24, r24
    604c:	88 1f       	adc	r24, r24
    604e:	90 e0       	ldi	r25, 0x00	; 0
    6050:	01 96       	adiw	r24, 0x01	; 1
    6052:	2b 85       	ldd	r18, Y+11	; 0x0b
    6054:	2f 73       	andi	r18, 0x3F	; 63
    6056:	82 0f       	add	r24, r18
    6058:	91 1d       	adc	r25, r1
    605a:	82 0f       	add	r24, r18
    605c:	91 1d       	adc	r25, r1
    605e:	2e 85       	ldd	r18, Y+14	; 0x0e
    6060:	22 95       	swap	r18
    6062:	26 95       	lsr	r18
    6064:	26 95       	lsr	r18
    6066:	23 70       	andi	r18, 0x03	; 3
    6068:	21 50       	subi	r18, 0x01	; 1
    606a:	02 c0       	rjmp	.+4      	; 0x6070 <disk_ioctl+0x38c>
    606c:	88 0f       	add	r24, r24
    606e:	99 1f       	adc	r25, r25
    6070:	2a 95       	dec	r18
    6072:	e2 f7       	brpl	.-8      	; 0x606c <disk_ioctl+0x388>
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    6074:	a0 e0       	ldi	r26, 0x00	; 0
    6076:	b0 e0       	ldi	r27, 0x00	; 0
    6078:	f8 01       	movw	r30, r16
    607a:	80 83       	st	Z, r24
    607c:	91 83       	std	Z+1, r25	; 0x01
    607e:	a2 83       	std	Z+2, r26	; 0x02
    6080:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    6082:	10 e0       	ldi	r17, 0x00	; 0
    6084:	58 ce       	rjmp	.-848    	; 0x5d36 <disk_ioctl+0x52>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    6086:	80 e1       	ldi	r24, 0x10	; 16
    6088:	80 93 45 06 	sts	0x0645, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    608c:	8f ef       	ldi	r24, 0xFF	; 255
    608e:	0e 94 a0 38 	call	0x7140	; 0x7140 <spi_wr_rd>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    6092:	11 e0       	ldi	r17, 0x01	; 1
    6094:	50 ce       	rjmp	.-864    	; 0x5d36 <disk_ioctl+0x52>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    6096:	88 85       	ldd	r24, Y+8	; 0x08
    6098:	8f 73       	andi	r24, 0x3F	; 63
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	a0 e0       	ldi	r26, 0x00	; 0
    609e:	b0 e0       	ldi	r27, 0x00	; 0
    60a0:	dc 01       	movw	r26, r24
    60a2:	99 27       	eor	r25, r25
    60a4:	88 27       	eor	r24, r24
    60a6:	01 96       	adiw	r24, 0x01	; 1
    60a8:	a1 1d       	adc	r26, r1
    60aa:	b1 1d       	adc	r27, r1
    60ac:	29 85       	ldd	r18, Y+9	; 0x09
    60ae:	30 e0       	ldi	r19, 0x00	; 0
    60b0:	32 2f       	mov	r19, r18
    60b2:	22 27       	eor	r18, r18
    60b4:	4a 85       	ldd	r20, Y+10	; 0x0a
    60b6:	24 0f       	add	r18, r20
    60b8:	31 1d       	adc	r19, r1
    60ba:	82 0f       	add	r24, r18
    60bc:	93 1f       	adc	r25, r19
    60be:	a1 1d       	adc	r26, r1
    60c0:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = csize << 10;
    60c2:	7a e0       	ldi	r23, 0x0A	; 10
    60c4:	88 0f       	add	r24, r24
    60c6:	99 1f       	adc	r25, r25
    60c8:	aa 1f       	adc	r26, r26
    60ca:	bb 1f       	adc	r27, r27
    60cc:	7a 95       	dec	r23
    60ce:	d1 f7       	brne	.-12     	; 0x60c4 <disk_ioctl+0x3e0>
    60d0:	f8 01       	movw	r30, r16
    60d2:	80 83       	st	Z, r24
    60d4:	91 83       	std	Z+1, r25	; 0x01
    60d6:	a2 83       	std	Z+2, r26	; 0x02
    60d8:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    60da:	10 e0       	ldi	r17, 0x00	; 0
    60dc:	2c ce       	rjmp	.-936    	; 0x5d36 <disk_ioctl+0x52>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    60de:	8c 85       	ldd	r24, Y+12	; 0x0c
    60e0:	98 2f       	mov	r25, r24
    60e2:	93 70       	andi	r25, 0x03	; 3
    60e4:	82 95       	swap	r24
    60e6:	86 95       	lsr	r24
    60e8:	87 70       	andi	r24, 0x07	; 7
    60ea:	48 2f       	mov	r20, r24
    60ec:	50 e0       	ldi	r21, 0x00	; 0
    60ee:	f8 e0       	ldi	r31, 0x08	; 8
    60f0:	9f 9f       	mul	r25, r31
    60f2:	40 0d       	add	r20, r0
    60f4:	51 1d       	adc	r21, r1
    60f6:	11 24       	eor	r1, r1
    60f8:	4f 5f       	subi	r20, 0xFF	; 255
    60fa:	5f 4f       	sbci	r21, 0xFF	; 255
    60fc:	2b 85       	ldd	r18, Y+11	; 0x0b
    60fe:	2c 77       	andi	r18, 0x7C	; 124
    6100:	30 e0       	ldi	r19, 0x00	; 0
    6102:	35 95       	asr	r19
    6104:	27 95       	ror	r18
    6106:	35 95       	asr	r19
    6108:	27 95       	ror	r18
    610a:	2f 5f       	subi	r18, 0xFF	; 255
    610c:	3f 4f       	sbci	r19, 0xFF	; 255
    610e:	42 9f       	mul	r20, r18
    6110:	c0 01       	movw	r24, r0
    6112:	43 9f       	mul	r20, r19
    6114:	90 0d       	add	r25, r0
    6116:	52 9f       	mul	r21, r18
    6118:	90 0d       	add	r25, r0
    611a:	11 24       	eor	r1, r1
    611c:	ab cf       	rjmp	.-170    	; 0x6074 <disk_ioctl+0x390>

0000611e <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
    611e:	1f 92       	push	r1
    6120:	0f 92       	push	r0
    6122:	0f b6       	in	r0, 0x3f	; 63
    6124:	0f 92       	push	r0
    6126:	11 24       	eor	r1, r1
    6128:	0b b6       	in	r0, 0x3b	; 59
    612a:	0f 92       	push	r0
    612c:	cf 92       	push	r12
    612e:	df 92       	push	r13
    6130:	ef 92       	push	r14
    6132:	ff 92       	push	r15
    6134:	2f 93       	push	r18
    6136:	3f 93       	push	r19
    6138:	4f 93       	push	r20
    613a:	5f 93       	push	r21
    613c:	6f 93       	push	r22
    613e:	7f 93       	push	r23
    6140:	8f 93       	push	r24
    6142:	9f 93       	push	r25
    6144:	af 93       	push	r26
    6146:	bf 93       	push	r27
    6148:	ef 93       	push	r30
    614a:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    614c:	e0 91 26 27 	lds	r30, 0x2726
    6150:	f0 91 27 27 	lds	r31, 0x2727
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	if (!fcb) return;
    6154:	30 97       	sbiw	r30, 0x00	; 0
    6156:	09 f4       	brne	.+2      	; 0x615a <__vector_14+0x3c>
    6158:	5f c0       	rjmp	.+190    	; 0x6218 <__vector_14+0xfa>
	ct = fcb->ct; ri = fcb->ri;
    615a:	46 81       	ldd	r20, Z+6	; 0x06
    615c:	57 81       	ldd	r21, Z+7	; 0x07
    615e:	22 81       	ldd	r18, Z+2	; 0x02
    6160:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    6162:	a0 85       	ldd	r26, Z+8	; 0x08
    6164:	b1 85       	ldd	r27, Z+9	; 0x09
    6166:	a2 0f       	add	r26, r18
    6168:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    616a:	80 81       	ld	r24, Z
    616c:	91 81       	ldd	r25, Z+1	; 0x01
    616e:	81 30       	cpi	r24, 0x01	; 1
    6170:	91 05       	cpc	r25, r1
    6172:	89 f0       	breq	.+34     	; 0x6196 <__vector_14+0x78>
    6174:	08 f4       	brcc	.+2      	; 0x6178 <__vector_14+0x5a>
    6176:	67 c0       	rjmp	.+206    	; 0x6246 <__vector_14+0x128>
    6178:	02 97       	sbiw	r24, 0x02	; 2
    617a:	09 f0       	breq	.+2      	; 0x617e <__vector_14+0x60>
    617c:	6d c0       	rjmp	.+218    	; 0x6258 <__vector_14+0x13a>
		if (ct < 2) return;
		l1 = buff[0]; r2 = buff[1];
		ct -= 2; ri += 2;
		break;
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
    617e:	42 30       	cpi	r20, 0x02	; 2
    6180:	51 05       	cpc	r21, r1
    6182:	08 f4       	brcc	.+2      	; 0x6186 <__vector_14+0x68>
    6184:	49 c0       	rjmp	.+146    	; 0x6218 <__vector_14+0xfa>
		l1 = r2 = buff[1] + 128;
    6186:	11 96       	adiw	r26, 0x01	; 1
    6188:	6c 91       	ld	r22, X
    618a:	60 58       	subi	r22, 0x80	; 128
		ct -= 2; ri += 2;
    618c:	42 50       	subi	r20, 0x02	; 2
    618e:	51 09       	sbc	r21, r1
    6190:	2e 5f       	subi	r18, 0xFE	; 254
    6192:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    6194:	08 c0       	rjmp	.+16     	; 0x61a6 <__vector_14+0x88>
		if (ct < 1) return;
		l1 = r2 = buff[0];
		ct -= 1; ri += 1;
		break;
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
    6196:	42 30       	cpi	r20, 0x02	; 2
    6198:	51 05       	cpc	r21, r1
    619a:	f0 f1       	brcs	.+124    	; 0x6218 <__vector_14+0xfa>
		l1 = buff[0]; r2 = buff[1];
    619c:	6c 91       	ld	r22, X
		ct -= 2; ri += 2;
    619e:	42 50       	subi	r20, 0x02	; 2
    61a0:	51 09       	sbc	r21, r1
    61a2:	2e 5f       	subi	r18, 0xFE	; 254
    61a4:	3f 4f       	sbci	r19, 0xFF	; 255
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
		ri += 4;
	}
	fcb->ct = ct;
    61a6:	46 83       	std	Z+6, r20	; 0x06
    61a8:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    61aa:	82 85       	ldd	r24, Z+10	; 0x0a
    61ac:	93 85       	ldd	r25, Z+11	; 0x0b
    61ae:	01 97       	sbiw	r24, 0x01	; 1
    61b0:	82 23       	and	r24, r18
    61b2:	93 23       	and	r25, r19
    61b4:	82 83       	std	Z+2, r24	; 0x02
    61b6:	93 83       	std	Z+3, r25	; 0x03
	result = integer + 0x7FFF;
	return(result >> 4);
}

static inline uint8_t smooth(uint8_t data, float filterVal, float smoothedVal){
	return (int)(((data * (1 - filterVal)) + (smoothedVal  *  filterVal)));
    61b8:	70 e0       	ldi	r23, 0x00	; 0
    61ba:	80 e0       	ldi	r24, 0x00	; 0
    61bc:	90 e0       	ldi	r25, 0x00	; 0
    61be:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <__floatsisf>
    61c2:	2a e9       	ldi	r18, 0x9A	; 154
    61c4:	39 e9       	ldi	r19, 0x99	; 153
    61c6:	49 e1       	ldi	r20, 0x19	; 25
    61c8:	5f e3       	ldi	r21, 0x3F	; 63
    61ca:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__mulsf3>
    61ce:	6b 01       	movw	r12, r22
    61d0:	7c 01       	movw	r14, r24
		ri += 4;
	}
	fcb->ct = ct;
	fcb->ri = ri & (fcb->sz_buff - 1);
	
	uint8_t data = smooth(l1,0.4,data);
    61d2:	60 e0       	ldi	r22, 0x00	; 0
    61d4:	70 e0       	ldi	r23, 0x00	; 0
    61d6:	cb 01       	movw	r24, r22
    61d8:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <__floatunsisf>
	result = integer + 0x7FFF;
	return(result >> 4);
}

static inline uint8_t smooth(uint8_t data, float filterVal, float smoothedVal){
	return (int)(((data * (1 - filterVal)) + (smoothedVal  *  filterVal)));
    61dc:	2d ec       	ldi	r18, 0xCD	; 205
    61de:	3c ec       	ldi	r19, 0xCC	; 204
    61e0:	4c ec       	ldi	r20, 0xCC	; 204
    61e2:	5e e3       	ldi	r21, 0x3E	; 62
    61e4:	0e 94 5a 3e 	call	0x7cb4	; 0x7cb4 <__mulsf3>
    61e8:	9b 01       	movw	r18, r22
    61ea:	ac 01       	movw	r20, r24
    61ec:	c7 01       	movw	r24, r14
    61ee:	b6 01       	movw	r22, r12
    61f0:	0e 94 37 3d 	call	0x7a6e	; 0x7a6e <__addsf3>
    61f4:	0e 94 9b 3d 	call	0x7b36	; 0x7b36 <__fixsfsi>
	fcb->ri = ri & (fcb->sz_buff - 1);
	
	uint8_t data = smooth(l1,0.4,data);
	//uint8_t data = l1*0.2;
	
	DACB.CH0DATA = 255+data;//<< 2;
    61f8:	77 27       	eor	r23, r23
    61fa:	cb 01       	movw	r24, r22
    61fc:	81 50       	subi	r24, 0x01	; 1
    61fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6200:	80 93 38 03 	sts	0x0338, r24
    6204:	90 93 39 03 	sts	0x0339, r25
	DACB.CH1DATA = 255-data;//<< 2;
    6208:	8f ef       	ldi	r24, 0xFF	; 255
    620a:	90 e0       	ldi	r25, 0x00	; 0
    620c:	86 1b       	sub	r24, r22
    620e:	97 0b       	sbc	r25, r23
    6210:	80 93 3a 03 	sts	0x033A, r24
    6214:	90 93 3b 03 	sts	0x033B, r25
}
    6218:	ff 91       	pop	r31
    621a:	ef 91       	pop	r30
    621c:	bf 91       	pop	r27
    621e:	af 91       	pop	r26
    6220:	9f 91       	pop	r25
    6222:	8f 91       	pop	r24
    6224:	7f 91       	pop	r23
    6226:	6f 91       	pop	r22
    6228:	5f 91       	pop	r21
    622a:	4f 91       	pop	r20
    622c:	3f 91       	pop	r19
    622e:	2f 91       	pop	r18
    6230:	ff 90       	pop	r15
    6232:	ef 90       	pop	r14
    6234:	df 90       	pop	r13
    6236:	cf 90       	pop	r12
    6238:	0f 90       	pop	r0
    623a:	0b be       	out	0x3b, r0	; 59
    623c:	0f 90       	pop	r0
    623e:	0f be       	out	0x3f, r0	; 63
    6240:	0f 90       	pop	r0
    6242:	1f 90       	pop	r1
    6244:	18 95       	reti
	ct = fcb->ct; ri = fcb->ri;
	buff = fcb->buff + ri;

	switch (fcb->mode) {
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
    6246:	41 15       	cp	r20, r1
    6248:	51 05       	cpc	r21, r1
    624a:	31 f3       	breq	.-52     	; 0x6218 <__vector_14+0xfa>
		l1 = r2 = buff[0];
    624c:	6c 91       	ld	r22, X
		ct -= 1; ri += 1;
    624e:	41 50       	subi	r20, 0x01	; 1
    6250:	51 09       	sbc	r21, r1
    6252:	2f 5f       	subi	r18, 0xFF	; 255
    6254:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    6256:	a7 cf       	rjmp	.-178    	; 0x61a6 <__vector_14+0x88>
		if (ct < 2) return;
		l1 = r2 = buff[1] + 128;
		ct -= 2; ri += 2;
		break;
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
    6258:	44 30       	cpi	r20, 0x04	; 4
    625a:	51 05       	cpc	r21, r1
    625c:	e8 f2       	brcs	.-70     	; 0x6218 <__vector_14+0xfa>
		l2 = buff[0]; 
		l1 = buff[1];
    625e:	11 96       	adiw	r26, 0x01	; 1
    6260:	6c 91       	ld	r22, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
    6262:	44 50       	subi	r20, 0x04	; 4
    6264:	51 09       	sbc	r21, r1
		ri += 4;
    6266:	2c 5f       	subi	r18, 0xFC	; 252
    6268:	3f 4f       	sbci	r19, 0xFF	; 255
    626a:	9d cf       	rjmp	.-198    	; 0x61a6 <__vector_14+0x88>

0000626c <ht1632c_setup>:

/*------------------------------STRING FUNCTIONS------------------------------*/

void ht1632c_set_cursor(int16_t x, int16_t y) {
	cursor_x = x;
	cursor_y = y;
    626c:	41 e0       	ldi	r20, 0x01	; 1
    626e:	40 93 81 06 	sts	0x0681, r20
    6272:	40 93 85 06 	sts	0x0685, r20
    6276:	24 e0       	ldi	r18, 0x04	; 4
    6278:	20 93 81 06 	sts	0x0681, r18
    627c:	20 93 85 06 	sts	0x0685, r18
    6280:	38 e0       	ldi	r19, 0x08	; 8
    6282:	30 93 81 06 	sts	0x0681, r19
    6286:	40 93 86 06 	sts	0x0686, r20
    628a:	30 93 81 06 	sts	0x0681, r19
    628e:	20 93 86 06 	sts	0x0686, r18
    6292:	30 93 85 06 	sts	0x0685, r19
    6296:	20 93 85 06 	sts	0x0685, r18
    629a:	20 93 86 06 	sts	0x0686, r18
    629e:	30 93 86 06 	sts	0x0686, r19
    62a2:	20 93 85 06 	sts	0x0685, r18
    62a6:	20 93 86 06 	sts	0x0686, r18
    62aa:	30 93 86 06 	sts	0x0686, r19
    62ae:	20 93 85 06 	sts	0x0685, r18
    62b2:	20 93 86 06 	sts	0x0686, r18
    62b6:	30 93 86 06 	sts	0x0686, r19
    62ba:	20 93 85 06 	sts	0x0685, r18
    62be:	20 93 86 06 	sts	0x0686, r18
    62c2:	30 93 86 06 	sts	0x0686, r19
    62c6:	20 93 85 06 	sts	0x0685, r18
    62ca:	20 93 86 06 	sts	0x0686, r18
    62ce:	30 93 86 06 	sts	0x0686, r19
    62d2:	20 93 85 06 	sts	0x0685, r18
    62d6:	20 93 86 06 	sts	0x0686, r18
    62da:	30 93 86 06 	sts	0x0686, r19
    62de:	20 93 85 06 	sts	0x0685, r18
    62e2:	20 93 86 06 	sts	0x0686, r18
    62e6:	30 93 86 06 	sts	0x0686, r19
    62ea:	20 93 85 06 	sts	0x0685, r18
    62ee:	20 93 86 06 	sts	0x0686, r18
    62f2:	30 93 86 06 	sts	0x0686, r19
    62f6:	20 93 85 06 	sts	0x0685, r18
    62fa:	20 93 86 06 	sts	0x0686, r18
    62fe:	30 93 86 06 	sts	0x0686, r19
    6302:	20 93 85 06 	sts	0x0685, r18
    6306:	20 93 86 06 	sts	0x0686, r18
    630a:	30 93 85 06 	sts	0x0685, r19
    630e:	20 93 85 06 	sts	0x0685, r18
    6312:	20 93 86 06 	sts	0x0686, r18
    6316:	30 93 86 06 	sts	0x0686, r19
    631a:	20 93 85 06 	sts	0x0685, r18
    631e:	30 93 86 06 	sts	0x0686, r19
    6322:	40 93 85 06 	sts	0x0685, r20
    6326:	40 93 86 06 	sts	0x0686, r20
    632a:	30 93 81 06 	sts	0x0681, r19
    632e:	20 93 86 06 	sts	0x0686, r18
    6332:	30 93 85 06 	sts	0x0685, r19
    6336:	20 93 85 06 	sts	0x0685, r18
    633a:	20 93 86 06 	sts	0x0686, r18
    633e:	30 93 86 06 	sts	0x0686, r19
    6342:	20 93 85 06 	sts	0x0685, r18
    6346:	20 93 86 06 	sts	0x0686, r18
    634a:	30 93 86 06 	sts	0x0686, r19
    634e:	20 93 85 06 	sts	0x0685, r18
    6352:	20 93 86 06 	sts	0x0686, r18
    6356:	30 93 86 06 	sts	0x0686, r19
    635a:	20 93 85 06 	sts	0x0685, r18
    635e:	20 93 86 06 	sts	0x0686, r18
    6362:	30 93 86 06 	sts	0x0686, r19
    6366:	20 93 85 06 	sts	0x0685, r18
    636a:	20 93 86 06 	sts	0x0686, r18
    636e:	30 93 86 06 	sts	0x0686, r19
    6372:	20 93 85 06 	sts	0x0685, r18
    6376:	20 93 86 06 	sts	0x0686, r18
    637a:	30 93 86 06 	sts	0x0686, r19
    637e:	20 93 85 06 	sts	0x0685, r18
    6382:	20 93 86 06 	sts	0x0686, r18
    6386:	30 93 86 06 	sts	0x0686, r19
    638a:	20 93 85 06 	sts	0x0685, r18
    638e:	20 93 86 06 	sts	0x0686, r18
    6392:	30 93 86 06 	sts	0x0686, r19
    6396:	20 93 85 06 	sts	0x0685, r18
    639a:	20 93 86 06 	sts	0x0686, r18
    639e:	30 93 85 06 	sts	0x0685, r19
    63a2:	20 93 85 06 	sts	0x0685, r18
    63a6:	20 93 86 06 	sts	0x0686, r18
    63aa:	30 93 85 06 	sts	0x0685, r19
    63ae:	20 93 85 06 	sts	0x0685, r18
    63b2:	20 93 86 06 	sts	0x0686, r18
    63b6:	30 93 86 06 	sts	0x0686, r19
    63ba:	20 93 85 06 	sts	0x0685, r18
    63be:	30 93 86 06 	sts	0x0686, r19
    63c2:	40 93 85 06 	sts	0x0685, r20
    63c6:	40 93 86 06 	sts	0x0686, r20
    63ca:	30 93 81 06 	sts	0x0681, r19
    63ce:	20 93 86 06 	sts	0x0686, r18
    63d2:	30 93 85 06 	sts	0x0685, r19
    63d6:	20 93 85 06 	sts	0x0685, r18
    63da:	20 93 86 06 	sts	0x0686, r18
    63de:	30 93 86 06 	sts	0x0686, r19
    63e2:	20 93 85 06 	sts	0x0685, r18
    63e6:	20 93 86 06 	sts	0x0686, r18
    63ea:	30 93 86 06 	sts	0x0686, r19
    63ee:	20 93 85 06 	sts	0x0685, r18
    63f2:	20 93 86 06 	sts	0x0686, r18
    63f6:	30 93 86 06 	sts	0x0686, r19
    63fa:	20 93 85 06 	sts	0x0685, r18
    63fe:	20 93 86 06 	sts	0x0686, r18
    6402:	30 93 86 06 	sts	0x0686, r19
    6406:	20 93 85 06 	sts	0x0685, r18
    640a:	20 93 86 06 	sts	0x0686, r18
    640e:	30 93 86 06 	sts	0x0686, r19
    6412:	20 93 85 06 	sts	0x0685, r18
    6416:	20 93 86 06 	sts	0x0686, r18
    641a:	30 93 86 06 	sts	0x0686, r19
    641e:	20 93 85 06 	sts	0x0685, r18
    6422:	20 93 86 06 	sts	0x0686, r18
    6426:	30 93 85 06 	sts	0x0685, r19
    642a:	20 93 85 06 	sts	0x0685, r18
    642e:	20 93 86 06 	sts	0x0686, r18
    6432:	30 93 86 06 	sts	0x0686, r19
    6436:	20 93 85 06 	sts	0x0685, r18
    643a:	20 93 86 06 	sts	0x0686, r18
    643e:	30 93 86 06 	sts	0x0686, r19
    6442:	20 93 85 06 	sts	0x0685, r18
    6446:	20 93 86 06 	sts	0x0686, r18
    644a:	30 93 86 06 	sts	0x0686, r19
    644e:	20 93 85 06 	sts	0x0685, r18
    6452:	20 93 86 06 	sts	0x0686, r18
    6456:	30 93 86 06 	sts	0x0686, r19
    645a:	20 93 85 06 	sts	0x0685, r18
    645e:	30 93 86 06 	sts	0x0686, r19
    6462:	40 93 85 06 	sts	0x0685, r20
    6466:	40 93 86 06 	sts	0x0686, r20
    646a:	30 93 81 06 	sts	0x0681, r19
    646e:	20 93 86 06 	sts	0x0686, r18
    6472:	30 93 85 06 	sts	0x0685, r19
    6476:	20 93 85 06 	sts	0x0685, r18
    647a:	20 93 86 06 	sts	0x0686, r18
    647e:	30 93 86 06 	sts	0x0686, r19
    6482:	20 93 85 06 	sts	0x0685, r18
    6486:	20 93 86 06 	sts	0x0686, r18
    648a:	30 93 86 06 	sts	0x0686, r19
    648e:	20 93 85 06 	sts	0x0685, r18
    6492:	20 93 86 06 	sts	0x0686, r18
    6496:	30 93 86 06 	sts	0x0686, r19
    649a:	20 93 85 06 	sts	0x0685, r18
    649e:	20 93 86 06 	sts	0x0686, r18
    64a2:	30 93 86 06 	sts	0x0686, r19
    64a6:	20 93 85 06 	sts	0x0685, r18
    64aa:	20 93 86 06 	sts	0x0686, r18
    64ae:	30 93 86 06 	sts	0x0686, r19
    64b2:	20 93 85 06 	sts	0x0685, r18
    64b6:	20 93 86 06 	sts	0x0686, r18
    64ba:	30 93 85 06 	sts	0x0685, r19
    64be:	20 93 85 06 	sts	0x0685, r18
    64c2:	20 93 86 06 	sts	0x0686, r18
    64c6:	30 93 86 06 	sts	0x0686, r19
    64ca:	20 93 85 06 	sts	0x0685, r18
    64ce:	20 93 86 06 	sts	0x0686, r18
    64d2:	30 93 85 06 	sts	0x0685, r19
    64d6:	20 93 85 06 	sts	0x0685, r18
    64da:	20 93 86 06 	sts	0x0686, r18
    64de:	30 93 86 06 	sts	0x0686, r19
    64e2:	20 93 85 06 	sts	0x0685, r18
    64e6:	20 93 86 06 	sts	0x0686, r18
    64ea:	30 93 86 06 	sts	0x0686, r19
    64ee:	20 93 85 06 	sts	0x0685, r18
    64f2:	20 93 86 06 	sts	0x0686, r18
    64f6:	30 93 86 06 	sts	0x0686, r19
    64fa:	20 93 85 06 	sts	0x0685, r18
    64fe:	30 93 86 06 	sts	0x0686, r19
    6502:	40 93 85 06 	sts	0x0685, r20
    6506:	40 93 86 06 	sts	0x0686, r20
    650a:	30 93 81 06 	sts	0x0681, r19
    650e:	20 93 86 06 	sts	0x0686, r18
    6512:	30 93 85 06 	sts	0x0685, r19
    6516:	20 93 85 06 	sts	0x0685, r18
    651a:	20 93 86 06 	sts	0x0686, r18
    651e:	30 93 86 06 	sts	0x0686, r19
    6522:	20 93 85 06 	sts	0x0685, r18
    6526:	20 93 86 06 	sts	0x0686, r18
    652a:	30 93 86 06 	sts	0x0686, r19
    652e:	20 93 85 06 	sts	0x0685, r18
    6532:	20 93 86 06 	sts	0x0686, r18
    6536:	30 93 86 06 	sts	0x0686, r19
    653a:	20 93 85 06 	sts	0x0685, r18
    653e:	20 93 86 06 	sts	0x0686, r18
    6542:	30 93 86 06 	sts	0x0686, r19
    6546:	20 93 85 06 	sts	0x0685, r18
    654a:	20 93 86 06 	sts	0x0686, r18
    654e:	30 93 86 06 	sts	0x0686, r19
    6552:	20 93 85 06 	sts	0x0685, r18
    6556:	20 93 86 06 	sts	0x0686, r18
    655a:	30 93 85 06 	sts	0x0685, r19
    655e:	20 93 85 06 	sts	0x0685, r18
    6562:	20 93 86 06 	sts	0x0686, r18
    6566:	30 93 85 06 	sts	0x0685, r19
    656a:	20 93 85 06 	sts	0x0685, r18
    656e:	20 93 86 06 	sts	0x0686, r18
    6572:	30 93 86 06 	sts	0x0686, r19
    6576:	20 93 85 06 	sts	0x0685, r18
    657a:	20 93 86 06 	sts	0x0686, r18
    657e:	30 93 86 06 	sts	0x0686, r19
    6582:	20 93 85 06 	sts	0x0685, r18
    6586:	20 93 86 06 	sts	0x0686, r18
    658a:	30 93 86 06 	sts	0x0686, r19
    658e:	20 93 85 06 	sts	0x0685, r18
    6592:	20 93 86 06 	sts	0x0686, r18
    6596:	30 93 86 06 	sts	0x0686, r19
    659a:	20 93 85 06 	sts	0x0685, r18
    659e:	30 93 86 06 	sts	0x0686, r19
    65a2:	40 93 85 06 	sts	0x0685, r20
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	94 60       	ori	r25, 0x04	; 4
    65aa:	88 0f       	add	r24, r24
    65ac:	99 1f       	adc	r25, r25
    65ae:	40 93 86 06 	sts	0x0686, r20
    65b2:	30 93 81 06 	sts	0x0681, r19
    65b6:	20 93 86 06 	sts	0x0686, r18
    65ba:	30 93 85 06 	sts	0x0685, r19
    65be:	20 93 85 06 	sts	0x0685, r18
    65c2:	20 93 86 06 	sts	0x0686, r18
    65c6:	30 93 86 06 	sts	0x0686, r19
    65ca:	20 93 85 06 	sts	0x0685, r18
    65ce:	20 93 86 06 	sts	0x0686, r18
    65d2:	30 93 86 06 	sts	0x0686, r19
    65d6:	20 93 85 06 	sts	0x0685, r18
    65da:	20 93 86 06 	sts	0x0686, r18
    65de:	90 fd       	sbrc	r25, 0
    65e0:	e7 c0       	rjmp	.+462    	; 0x67b0 <ht1632c_setup+0x544>
    65e2:	30 93 86 06 	sts	0x0686, r19
    65e6:	24 e0       	ldi	r18, 0x04	; 4
    65e8:	20 93 85 06 	sts	0x0685, r18
    65ec:	20 93 86 06 	sts	0x0686, r18
    65f0:	28 e0       	ldi	r18, 0x08	; 8
    65f2:	87 fd       	sbrc	r24, 7
    65f4:	9e c0       	rjmp	.+316    	; 0x6732 <ht1632c_setup+0x4c6>
    65f6:	20 93 86 06 	sts	0x0686, r18
    65fa:	24 e0       	ldi	r18, 0x04	; 4
    65fc:	20 93 85 06 	sts	0x0685, r18
    6600:	20 93 86 06 	sts	0x0686, r18
    6604:	28 e0       	ldi	r18, 0x08	; 8
    6606:	86 fd       	sbrc	r24, 6
    6608:	9e c0       	rjmp	.+316    	; 0x6746 <ht1632c_setup+0x4da>
    660a:	20 93 86 06 	sts	0x0686, r18
    660e:	24 e0       	ldi	r18, 0x04	; 4
    6610:	20 93 85 06 	sts	0x0685, r18
    6614:	20 93 86 06 	sts	0x0686, r18
    6618:	28 e0       	ldi	r18, 0x08	; 8
    661a:	85 fd       	sbrc	r24, 5
    661c:	9e c0       	rjmp	.+316    	; 0x675a <ht1632c_setup+0x4ee>
    661e:	20 93 86 06 	sts	0x0686, r18
    6622:	24 e0       	ldi	r18, 0x04	; 4
    6624:	20 93 85 06 	sts	0x0685, r18
    6628:	20 93 86 06 	sts	0x0686, r18
    662c:	28 e0       	ldi	r18, 0x08	; 8
    662e:	84 fd       	sbrc	r24, 4
    6630:	9e c0       	rjmp	.+316    	; 0x676e <ht1632c_setup+0x502>
    6632:	20 93 86 06 	sts	0x0686, r18
    6636:	24 e0       	ldi	r18, 0x04	; 4
    6638:	20 93 85 06 	sts	0x0685, r18
    663c:	20 93 86 06 	sts	0x0686, r18
    6640:	28 e0       	ldi	r18, 0x08	; 8
    6642:	83 fd       	sbrc	r24, 3
    6644:	9e c0       	rjmp	.+316    	; 0x6782 <ht1632c_setup+0x516>
    6646:	20 93 86 06 	sts	0x0686, r18
    664a:	24 e0       	ldi	r18, 0x04	; 4
    664c:	20 93 85 06 	sts	0x0685, r18
    6650:	20 93 86 06 	sts	0x0686, r18
    6654:	28 e0       	ldi	r18, 0x08	; 8
    6656:	82 fd       	sbrc	r24, 2
    6658:	9e c0       	rjmp	.+316    	; 0x6796 <ht1632c_setup+0x52a>
    665a:	20 93 86 06 	sts	0x0686, r18
    665e:	94 e0       	ldi	r25, 0x04	; 4
    6660:	90 93 85 06 	sts	0x0685, r25
    6664:	90 93 86 06 	sts	0x0686, r25
    6668:	81 fd       	sbrc	r24, 1
    666a:	9e c0       	rjmp	.+316    	; 0x67a8 <ht1632c_setup+0x53c>
    666c:	88 e0       	ldi	r24, 0x08	; 8
    666e:	80 93 86 06 	sts	0x0686, r24
    6672:	84 e0       	ldi	r24, 0x04	; 4
    6674:	80 93 85 06 	sts	0x0685, r24
    6678:	80 93 86 06 	sts	0x0686, r24
    667c:	98 e0       	ldi	r25, 0x08	; 8
    667e:	90 93 86 06 	sts	0x0686, r25
    6682:	80 93 85 06 	sts	0x0685, r24
    6686:	90 93 86 06 	sts	0x0686, r25
    668a:	21 e0       	ldi	r18, 0x01	; 1
    668c:	20 93 85 06 	sts	0x0685, r18
    6690:	20 93 86 06 	sts	0x0686, r18
    6694:	90 93 81 06 	sts	0x0681, r25
    6698:	80 93 86 06 	sts	0x0686, r24
    669c:	90 93 85 06 	sts	0x0685, r25
    66a0:	80 93 85 06 	sts	0x0685, r24
    66a4:	80 93 86 06 	sts	0x0686, r24
    66a8:	90 93 86 06 	sts	0x0686, r25
    66ac:	80 93 85 06 	sts	0x0685, r24
    66b0:	80 93 86 06 	sts	0x0686, r24
    66b4:	90 93 86 06 	sts	0x0686, r25
    66b8:	80 93 85 06 	sts	0x0685, r24
    66bc:	80 93 86 06 	sts	0x0686, r24
    66c0:	90 93 85 06 	sts	0x0685, r25
    66c4:	80 93 85 06 	sts	0x0685, r24
    66c8:	80 93 86 06 	sts	0x0686, r24
    66cc:	90 93 86 06 	sts	0x0686, r25
    66d0:	80 93 85 06 	sts	0x0685, r24
    66d4:	80 93 86 06 	sts	0x0686, r24
    66d8:	90 93 85 06 	sts	0x0685, r25
    66dc:	80 93 85 06 	sts	0x0685, r24
    66e0:	80 93 86 06 	sts	0x0686, r24
    66e4:	90 93 86 06 	sts	0x0686, r25
    66e8:	80 93 85 06 	sts	0x0685, r24
    66ec:	80 93 86 06 	sts	0x0686, r24
    66f0:	90 93 86 06 	sts	0x0686, r25
    66f4:	80 93 85 06 	sts	0x0685, r24
    66f8:	80 93 86 06 	sts	0x0686, r24
    66fc:	90 93 86 06 	sts	0x0686, r25
    6700:	80 93 85 06 	sts	0x0685, r24
    6704:	80 93 86 06 	sts	0x0686, r24
    6708:	90 93 86 06 	sts	0x0686, r25
    670c:	80 93 85 06 	sts	0x0685, r24
    6710:	80 93 86 06 	sts	0x0686, r24
    6714:	90 93 85 06 	sts	0x0685, r25
    6718:	80 93 85 06 	sts	0x0685, r24
    671c:	80 93 86 06 	sts	0x0686, r24
    6720:	90 93 86 06 	sts	0x0686, r25
    6724:	80 93 85 06 	sts	0x0685, r24
    6728:	90 93 86 06 	sts	0x0686, r25
    672c:	20 93 85 06 	sts	0x0685, r18
    6730:	08 95       	ret
    6732:	20 93 85 06 	sts	0x0685, r18
    6736:	24 e0       	ldi	r18, 0x04	; 4
    6738:	20 93 85 06 	sts	0x0685, r18
    673c:	20 93 86 06 	sts	0x0686, r18
    6740:	28 e0       	ldi	r18, 0x08	; 8
    6742:	86 ff       	sbrs	r24, 6
    6744:	62 cf       	rjmp	.-316    	; 0x660a <ht1632c_setup+0x39e>
    6746:	20 93 85 06 	sts	0x0685, r18
    674a:	24 e0       	ldi	r18, 0x04	; 4
    674c:	20 93 85 06 	sts	0x0685, r18
    6750:	20 93 86 06 	sts	0x0686, r18
    6754:	28 e0       	ldi	r18, 0x08	; 8
    6756:	85 ff       	sbrs	r24, 5
    6758:	62 cf       	rjmp	.-316    	; 0x661e <ht1632c_setup+0x3b2>
    675a:	20 93 85 06 	sts	0x0685, r18
    675e:	24 e0       	ldi	r18, 0x04	; 4
    6760:	20 93 85 06 	sts	0x0685, r18
    6764:	20 93 86 06 	sts	0x0686, r18
    6768:	28 e0       	ldi	r18, 0x08	; 8
    676a:	84 ff       	sbrs	r24, 4
    676c:	62 cf       	rjmp	.-316    	; 0x6632 <ht1632c_setup+0x3c6>
    676e:	20 93 85 06 	sts	0x0685, r18
    6772:	24 e0       	ldi	r18, 0x04	; 4
    6774:	20 93 85 06 	sts	0x0685, r18
    6778:	20 93 86 06 	sts	0x0686, r18
    677c:	28 e0       	ldi	r18, 0x08	; 8
    677e:	83 ff       	sbrs	r24, 3
    6780:	62 cf       	rjmp	.-316    	; 0x6646 <ht1632c_setup+0x3da>
    6782:	20 93 85 06 	sts	0x0685, r18
    6786:	24 e0       	ldi	r18, 0x04	; 4
    6788:	20 93 85 06 	sts	0x0685, r18
    678c:	20 93 86 06 	sts	0x0686, r18
    6790:	28 e0       	ldi	r18, 0x08	; 8
    6792:	82 ff       	sbrs	r24, 2
    6794:	62 cf       	rjmp	.-316    	; 0x665a <ht1632c_setup+0x3ee>
    6796:	20 93 85 06 	sts	0x0685, r18
    679a:	94 e0       	ldi	r25, 0x04	; 4
    679c:	90 93 85 06 	sts	0x0685, r25
    67a0:	90 93 86 06 	sts	0x0686, r25
    67a4:	81 ff       	sbrs	r24, 1
    67a6:	62 cf       	rjmp	.-316    	; 0x666c <ht1632c_setup+0x400>
    67a8:	88 e0       	ldi	r24, 0x08	; 8
    67aa:	80 93 85 06 	sts	0x0685, r24
    67ae:	61 cf       	rjmp	.-318    	; 0x6672 <ht1632c_setup+0x406>
    67b0:	30 93 85 06 	sts	0x0685, r19
    67b4:	24 e0       	ldi	r18, 0x04	; 4
    67b6:	20 93 85 06 	sts	0x0685, r18
    67ba:	20 93 86 06 	sts	0x0686, r18
    67be:	28 e0       	ldi	r18, 0x08	; 8
    67c0:	87 fd       	sbrc	r24, 7
    67c2:	b7 cf       	rjmp	.-146    	; 0x6732 <ht1632c_setup+0x4c6>
    67c4:	18 cf       	rjmp	.-464    	; 0x65f6 <ht1632c_setup+0x38a>

000067c6 <ht1632c_set_brightness>:
    67c6:	80 31       	cpi	r24, 0x10	; 16
    67c8:	08 f0       	brcs	.+2      	; 0x67cc <ht1632c_set_brightness+0x6>
    67ca:	8f e0       	ldi	r24, 0x0F	; 15
    67cc:	80 6a       	ori	r24, 0xA0	; 160
    67ce:	90 e0       	ldi	r25, 0x00	; 0
    67d0:	94 60       	ori	r25, 0x04	; 4
    67d2:	88 0f       	add	r24, r24
    67d4:	99 1f       	adc	r25, r25
    67d6:	21 e0       	ldi	r18, 0x01	; 1
    67d8:	20 93 86 06 	sts	0x0686, r18
    67dc:	38 e0       	ldi	r19, 0x08	; 8
    67de:	30 93 81 06 	sts	0x0681, r19
    67e2:	24 e0       	ldi	r18, 0x04	; 4
    67e4:	20 93 86 06 	sts	0x0686, r18
    67e8:	30 93 85 06 	sts	0x0685, r19
    67ec:	20 93 85 06 	sts	0x0685, r18
    67f0:	20 93 86 06 	sts	0x0686, r18
    67f4:	30 93 86 06 	sts	0x0686, r19
    67f8:	20 93 85 06 	sts	0x0685, r18
    67fc:	20 93 86 06 	sts	0x0686, r18
    6800:	30 93 86 06 	sts	0x0686, r19
    6804:	20 93 85 06 	sts	0x0685, r18
    6808:	20 93 86 06 	sts	0x0686, r18
    680c:	30 93 85 06 	sts	0x0685, r19
    6810:	20 93 85 06 	sts	0x0685, r18
    6814:	20 93 86 06 	sts	0x0686, r18
    6818:	30 93 86 06 	sts	0x0686, r19
    681c:	20 93 85 06 	sts	0x0685, r18
    6820:	20 93 86 06 	sts	0x0686, r18
    6824:	30 93 85 06 	sts	0x0685, r19
    6828:	20 93 85 06 	sts	0x0685, r18
    682c:	20 93 86 06 	sts	0x0686, r18
    6830:	30 93 86 06 	sts	0x0686, r19
    6834:	20 93 85 06 	sts	0x0685, r18
    6838:	20 93 86 06 	sts	0x0686, r18
    683c:	84 fd       	sbrc	r24, 4
    683e:	47 c0       	rjmp	.+142    	; 0x68ce <ht1632c_set_brightness+0x108>
    6840:	30 93 86 06 	sts	0x0686, r19
    6844:	24 e0       	ldi	r18, 0x04	; 4
    6846:	20 93 85 06 	sts	0x0685, r18
    684a:	20 93 86 06 	sts	0x0686, r18
    684e:	28 e0       	ldi	r18, 0x08	; 8
    6850:	83 fd       	sbrc	r24, 3
    6852:	26 c0       	rjmp	.+76     	; 0x68a0 <ht1632c_set_brightness+0xda>
    6854:	20 93 86 06 	sts	0x0686, r18
    6858:	24 e0       	ldi	r18, 0x04	; 4
    685a:	20 93 85 06 	sts	0x0685, r18
    685e:	20 93 86 06 	sts	0x0686, r18
    6862:	28 e0       	ldi	r18, 0x08	; 8
    6864:	82 fd       	sbrc	r24, 2
    6866:	26 c0       	rjmp	.+76     	; 0x68b4 <ht1632c_set_brightness+0xee>
    6868:	20 93 86 06 	sts	0x0686, r18
    686c:	94 e0       	ldi	r25, 0x04	; 4
    686e:	90 93 85 06 	sts	0x0685, r25
    6872:	90 93 86 06 	sts	0x0686, r25
    6876:	81 fd       	sbrc	r24, 1
    6878:	26 c0       	rjmp	.+76     	; 0x68c6 <ht1632c_set_brightness+0x100>
    687a:	88 e0       	ldi	r24, 0x08	; 8
    687c:	80 93 86 06 	sts	0x0686, r24
    6880:	84 e0       	ldi	r24, 0x04	; 4
    6882:	80 93 85 06 	sts	0x0685, r24
    6886:	80 93 86 06 	sts	0x0686, r24
    688a:	98 e0       	ldi	r25, 0x08	; 8
    688c:	90 93 86 06 	sts	0x0686, r25
    6890:	80 93 85 06 	sts	0x0685, r24
    6894:	90 93 86 06 	sts	0x0686, r25
    6898:	81 e0       	ldi	r24, 0x01	; 1
    689a:	80 93 85 06 	sts	0x0685, r24
    689e:	08 95       	ret
    68a0:	20 93 85 06 	sts	0x0685, r18
    68a4:	24 e0       	ldi	r18, 0x04	; 4
    68a6:	20 93 85 06 	sts	0x0685, r18
    68aa:	20 93 86 06 	sts	0x0686, r18
    68ae:	28 e0       	ldi	r18, 0x08	; 8
    68b0:	82 ff       	sbrs	r24, 2
    68b2:	da cf       	rjmp	.-76     	; 0x6868 <ht1632c_set_brightness+0xa2>
    68b4:	20 93 85 06 	sts	0x0685, r18
    68b8:	94 e0       	ldi	r25, 0x04	; 4
    68ba:	90 93 85 06 	sts	0x0685, r25
    68be:	90 93 86 06 	sts	0x0686, r25
    68c2:	81 ff       	sbrs	r24, 1
    68c4:	da cf       	rjmp	.-76     	; 0x687a <ht1632c_set_brightness+0xb4>
    68c6:	88 e0       	ldi	r24, 0x08	; 8
    68c8:	80 93 85 06 	sts	0x0685, r24
    68cc:	d9 cf       	rjmp	.-78     	; 0x6880 <ht1632c_set_brightness+0xba>
    68ce:	30 93 85 06 	sts	0x0685, r19
    68d2:	24 e0       	ldi	r18, 0x04	; 4
    68d4:	20 93 85 06 	sts	0x0685, r18
    68d8:	20 93 86 06 	sts	0x0686, r18
    68dc:	28 e0       	ldi	r18, 0x08	; 8
    68de:	83 fd       	sbrc	r24, 3
    68e0:	df cf       	rjmp	.-66     	; 0x68a0 <ht1632c_set_brightness+0xda>
    68e2:	b8 cf       	rjmp	.-144    	; 0x6854 <ht1632c_set_brightness+0x8e>

000068e4 <ht1632c_refresh_screen>:
    68e4:	81 e0       	ldi	r24, 0x01	; 1
    68e6:	80 93 86 06 	sts	0x0686, r24
    68ea:	98 e0       	ldi	r25, 0x08	; 8
    68ec:	90 93 81 06 	sts	0x0681, r25
    68f0:	84 e0       	ldi	r24, 0x04	; 4
    68f2:	80 93 86 06 	sts	0x0686, r24
    68f6:	90 93 85 06 	sts	0x0685, r25
    68fa:	80 93 85 06 	sts	0x0685, r24
    68fe:	80 93 86 06 	sts	0x0686, r24
    6902:	90 93 86 06 	sts	0x0686, r25
    6906:	80 93 85 06 	sts	0x0685, r24
    690a:	80 93 86 06 	sts	0x0686, r24
    690e:	90 93 85 06 	sts	0x0685, r25
    6912:	80 93 85 06 	sts	0x0685, r24
    6916:	90 93 86 06 	sts	0x0686, r25
    691a:	90 93 81 06 	sts	0x0681, r25
    691e:	80 93 86 06 	sts	0x0686, r24
    6922:	90 93 86 06 	sts	0x0686, r25
    6926:	80 93 85 06 	sts	0x0685, r24
    692a:	80 93 86 06 	sts	0x0686, r24
    692e:	90 93 86 06 	sts	0x0686, r25
    6932:	80 93 85 06 	sts	0x0685, r24
    6936:	80 93 86 06 	sts	0x0686, r24
    693a:	90 93 86 06 	sts	0x0686, r25
    693e:	80 93 85 06 	sts	0x0685, r24
    6942:	80 93 86 06 	sts	0x0686, r24
    6946:	90 93 86 06 	sts	0x0686, r25
    694a:	80 93 85 06 	sts	0x0685, r24
    694e:	80 93 86 06 	sts	0x0686, r24
    6952:	90 93 86 06 	sts	0x0686, r25
    6956:	80 93 85 06 	sts	0x0685, r24
    695a:	80 93 86 06 	sts	0x0686, r24
    695e:	90 93 86 06 	sts	0x0686, r25
    6962:	80 93 85 06 	sts	0x0685, r24
    6966:	80 93 86 06 	sts	0x0686, r24
    696a:	90 93 86 06 	sts	0x0686, r25
    696e:	80 93 85 06 	sts	0x0685, r24
    6972:	90 93 86 06 	sts	0x0686, r25
    6976:	e3 ea       	ldi	r30, 0xA3	; 163
    6978:	f5 e2       	ldi	r31, 0x25	; 37
    697a:	38 e0       	ldi	r19, 0x08	; 8
    697c:	24 e0       	ldi	r18, 0x04	; 4
    697e:	7c c0       	rjmp	.+248    	; 0x6a78 <ht1632c_refresh_screen+0x194>
    6980:	30 93 86 06 	sts	0x0686, r19
    6984:	20 93 85 06 	sts	0x0685, r18
    6988:	20 93 86 06 	sts	0x0686, r18
    698c:	95 fd       	sbrc	r25, 5
    698e:	92 c0       	rjmp	.+292    	; 0x6ab4 <ht1632c_refresh_screen+0x1d0>
    6990:	30 93 86 06 	sts	0x0686, r19
    6994:	20 93 85 06 	sts	0x0685, r18
    6998:	20 93 86 06 	sts	0x0686, r18
    699c:	94 fd       	sbrc	r25, 4
    699e:	92 c0       	rjmp	.+292    	; 0x6ac4 <ht1632c_refresh_screen+0x1e0>
    69a0:	30 93 86 06 	sts	0x0686, r19
    69a4:	20 93 85 06 	sts	0x0685, r18
    69a8:	20 93 86 06 	sts	0x0686, r18
    69ac:	93 fd       	sbrc	r25, 3
    69ae:	92 c0       	rjmp	.+292    	; 0x6ad4 <ht1632c_refresh_screen+0x1f0>
    69b0:	30 93 86 06 	sts	0x0686, r19
    69b4:	20 93 85 06 	sts	0x0685, r18
    69b8:	20 93 86 06 	sts	0x0686, r18
    69bc:	92 fd       	sbrc	r25, 2
    69be:	92 c0       	rjmp	.+292    	; 0x6ae4 <ht1632c_refresh_screen+0x200>
    69c0:	30 93 86 06 	sts	0x0686, r19
    69c4:	20 93 85 06 	sts	0x0685, r18
    69c8:	20 93 86 06 	sts	0x0686, r18
    69cc:	91 fd       	sbrc	r25, 1
    69ce:	92 c0       	rjmp	.+292    	; 0x6af4 <ht1632c_refresh_screen+0x210>
    69d0:	30 93 86 06 	sts	0x0686, r19
    69d4:	20 93 85 06 	sts	0x0685, r18
    69d8:	20 93 86 06 	sts	0x0686, r18
    69dc:	90 fd       	sbrc	r25, 0
    69de:	92 c0       	rjmp	.+292    	; 0x6b04 <ht1632c_refresh_screen+0x220>
    69e0:	30 93 86 06 	sts	0x0686, r19
    69e4:	20 93 85 06 	sts	0x0685, r18
    69e8:	20 93 86 06 	sts	0x0686, r18
    69ec:	87 fd       	sbrc	r24, 7
    69ee:	92 c0       	rjmp	.+292    	; 0x6b14 <ht1632c_refresh_screen+0x230>
    69f0:	30 93 86 06 	sts	0x0686, r19
    69f4:	20 93 85 06 	sts	0x0685, r18
    69f8:	20 93 86 06 	sts	0x0686, r18
    69fc:	86 fd       	sbrc	r24, 6
    69fe:	92 c0       	rjmp	.+292    	; 0x6b24 <ht1632c_refresh_screen+0x240>
    6a00:	30 93 86 06 	sts	0x0686, r19
    6a04:	20 93 85 06 	sts	0x0685, r18
    6a08:	20 93 86 06 	sts	0x0686, r18
    6a0c:	85 fd       	sbrc	r24, 5
    6a0e:	92 c0       	rjmp	.+292    	; 0x6b34 <ht1632c_refresh_screen+0x250>
    6a10:	30 93 86 06 	sts	0x0686, r19
    6a14:	20 93 85 06 	sts	0x0685, r18
    6a18:	20 93 86 06 	sts	0x0686, r18
    6a1c:	84 fd       	sbrc	r24, 4
    6a1e:	92 c0       	rjmp	.+292    	; 0x6b44 <ht1632c_refresh_screen+0x260>
    6a20:	30 93 86 06 	sts	0x0686, r19
    6a24:	20 93 85 06 	sts	0x0685, r18
    6a28:	20 93 86 06 	sts	0x0686, r18
    6a2c:	83 fd       	sbrc	r24, 3
    6a2e:	92 c0       	rjmp	.+292    	; 0x6b54 <ht1632c_refresh_screen+0x270>
    6a30:	30 93 86 06 	sts	0x0686, r19
    6a34:	20 93 85 06 	sts	0x0685, r18
    6a38:	20 93 86 06 	sts	0x0686, r18
    6a3c:	82 fd       	sbrc	r24, 2
    6a3e:	92 c0       	rjmp	.+292    	; 0x6b64 <ht1632c_refresh_screen+0x280>
    6a40:	30 93 86 06 	sts	0x0686, r19
    6a44:	20 93 85 06 	sts	0x0685, r18
    6a48:	20 93 86 06 	sts	0x0686, r18
    6a4c:	81 fd       	sbrc	r24, 1
    6a4e:	92 c0       	rjmp	.+292    	; 0x6b74 <ht1632c_refresh_screen+0x290>
    6a50:	30 93 86 06 	sts	0x0686, r19
    6a54:	20 93 85 06 	sts	0x0685, r18
    6a58:	20 93 86 06 	sts	0x0686, r18
    6a5c:	80 fd       	sbrc	r24, 0
    6a5e:	92 c0       	rjmp	.+292    	; 0x6b84 <ht1632c_refresh_screen+0x2a0>
    6a60:	30 93 86 06 	sts	0x0686, r19
    6a64:	20 93 85 06 	sts	0x0685, r18
    6a68:	30 93 86 06 	sts	0x0686, r19
    6a6c:	32 96       	adiw	r30, 0x02	; 2
    6a6e:	85 e2       	ldi	r24, 0x25	; 37
    6a70:	e3 3c       	cpi	r30, 0xC3	; 195
    6a72:	f8 07       	cpc	r31, r24
    6a74:	09 f4       	brne	.+2      	; 0x6a78 <ht1632c_refresh_screen+0x194>
    6a76:	8c c0       	rjmp	.+280    	; 0x6b90 <ht1632c_refresh_screen+0x2ac>
    6a78:	df 01       	movw	r26, r30
    6a7a:	11 97       	sbiw	r26, 0x01	; 1
    6a7c:	8c 91       	ld	r24, X
    6a7e:	90 e0       	ldi	r25, 0x00	; 0
    6a80:	98 2f       	mov	r25, r24
    6a82:	88 27       	eor	r24, r24
    6a84:	40 81       	ld	r20, Z
    6a86:	84 2b       	or	r24, r20
    6a88:	30 93 81 06 	sts	0x0681, r19
    6a8c:	20 93 86 06 	sts	0x0686, r18
    6a90:	97 fd       	sbrc	r25, 7
    6a92:	7b c0       	rjmp	.+246    	; 0x6b8a <ht1632c_refresh_screen+0x2a6>
    6a94:	30 93 86 06 	sts	0x0686, r19
    6a98:	20 93 85 06 	sts	0x0685, r18
    6a9c:	20 93 86 06 	sts	0x0686, r18
    6aa0:	96 ff       	sbrs	r25, 6
    6aa2:	6e cf       	rjmp	.-292    	; 0x6980 <ht1632c_refresh_screen+0x9c>
    6aa4:	30 93 85 06 	sts	0x0685, r19
    6aa8:	20 93 85 06 	sts	0x0685, r18
    6aac:	20 93 86 06 	sts	0x0686, r18
    6ab0:	95 ff       	sbrs	r25, 5
    6ab2:	6e cf       	rjmp	.-292    	; 0x6990 <ht1632c_refresh_screen+0xac>
    6ab4:	30 93 85 06 	sts	0x0685, r19
    6ab8:	20 93 85 06 	sts	0x0685, r18
    6abc:	20 93 86 06 	sts	0x0686, r18
    6ac0:	94 ff       	sbrs	r25, 4
    6ac2:	6e cf       	rjmp	.-292    	; 0x69a0 <ht1632c_refresh_screen+0xbc>
    6ac4:	30 93 85 06 	sts	0x0685, r19
    6ac8:	20 93 85 06 	sts	0x0685, r18
    6acc:	20 93 86 06 	sts	0x0686, r18
    6ad0:	93 ff       	sbrs	r25, 3
    6ad2:	6e cf       	rjmp	.-292    	; 0x69b0 <ht1632c_refresh_screen+0xcc>
    6ad4:	30 93 85 06 	sts	0x0685, r19
    6ad8:	20 93 85 06 	sts	0x0685, r18
    6adc:	20 93 86 06 	sts	0x0686, r18
    6ae0:	92 ff       	sbrs	r25, 2
    6ae2:	6e cf       	rjmp	.-292    	; 0x69c0 <ht1632c_refresh_screen+0xdc>
    6ae4:	30 93 85 06 	sts	0x0685, r19
    6ae8:	20 93 85 06 	sts	0x0685, r18
    6aec:	20 93 86 06 	sts	0x0686, r18
    6af0:	91 ff       	sbrs	r25, 1
    6af2:	6e cf       	rjmp	.-292    	; 0x69d0 <ht1632c_refresh_screen+0xec>
    6af4:	30 93 85 06 	sts	0x0685, r19
    6af8:	20 93 85 06 	sts	0x0685, r18
    6afc:	20 93 86 06 	sts	0x0686, r18
    6b00:	90 ff       	sbrs	r25, 0
    6b02:	6e cf       	rjmp	.-292    	; 0x69e0 <ht1632c_refresh_screen+0xfc>
    6b04:	30 93 85 06 	sts	0x0685, r19
    6b08:	20 93 85 06 	sts	0x0685, r18
    6b0c:	20 93 86 06 	sts	0x0686, r18
    6b10:	87 ff       	sbrs	r24, 7
    6b12:	6e cf       	rjmp	.-292    	; 0x69f0 <ht1632c_refresh_screen+0x10c>
    6b14:	30 93 85 06 	sts	0x0685, r19
    6b18:	20 93 85 06 	sts	0x0685, r18
    6b1c:	20 93 86 06 	sts	0x0686, r18
    6b20:	86 ff       	sbrs	r24, 6
    6b22:	6e cf       	rjmp	.-292    	; 0x6a00 <ht1632c_refresh_screen+0x11c>
    6b24:	30 93 85 06 	sts	0x0685, r19
    6b28:	20 93 85 06 	sts	0x0685, r18
    6b2c:	20 93 86 06 	sts	0x0686, r18
    6b30:	85 ff       	sbrs	r24, 5
    6b32:	6e cf       	rjmp	.-292    	; 0x6a10 <ht1632c_refresh_screen+0x12c>
    6b34:	30 93 85 06 	sts	0x0685, r19
    6b38:	20 93 85 06 	sts	0x0685, r18
    6b3c:	20 93 86 06 	sts	0x0686, r18
    6b40:	84 ff       	sbrs	r24, 4
    6b42:	6e cf       	rjmp	.-292    	; 0x6a20 <ht1632c_refresh_screen+0x13c>
    6b44:	30 93 85 06 	sts	0x0685, r19
    6b48:	20 93 85 06 	sts	0x0685, r18
    6b4c:	20 93 86 06 	sts	0x0686, r18
    6b50:	83 ff       	sbrs	r24, 3
    6b52:	6e cf       	rjmp	.-292    	; 0x6a30 <ht1632c_refresh_screen+0x14c>
    6b54:	30 93 85 06 	sts	0x0685, r19
    6b58:	20 93 85 06 	sts	0x0685, r18
    6b5c:	20 93 86 06 	sts	0x0686, r18
    6b60:	82 ff       	sbrs	r24, 2
    6b62:	6e cf       	rjmp	.-292    	; 0x6a40 <ht1632c_refresh_screen+0x15c>
    6b64:	30 93 85 06 	sts	0x0685, r19
    6b68:	20 93 85 06 	sts	0x0685, r18
    6b6c:	20 93 86 06 	sts	0x0686, r18
    6b70:	81 ff       	sbrs	r24, 1
    6b72:	6e cf       	rjmp	.-292    	; 0x6a50 <ht1632c_refresh_screen+0x16c>
    6b74:	30 93 85 06 	sts	0x0685, r19
    6b78:	20 93 85 06 	sts	0x0685, r18
    6b7c:	20 93 86 06 	sts	0x0686, r18
    6b80:	80 ff       	sbrs	r24, 0
    6b82:	6e cf       	rjmp	.-292    	; 0x6a60 <ht1632c_refresh_screen+0x17c>
    6b84:	30 93 85 06 	sts	0x0685, r19
    6b88:	6d cf       	rjmp	.-294    	; 0x6a64 <ht1632c_refresh_screen+0x180>
    6b8a:	30 93 85 06 	sts	0x0685, r19
    6b8e:	84 cf       	rjmp	.-248    	; 0x6a98 <ht1632c_refresh_screen+0x1b4>
    6b90:	81 e0       	ldi	r24, 0x01	; 1
    6b92:	80 93 85 06 	sts	0x0685, r24
    6b96:	08 95       	ret

00006b98 <ht1632c_clear_screen>:
    6b98:	80 e2       	ldi	r24, 0x20	; 32
    6b9a:	e2 ea       	ldi	r30, 0xA2	; 162
    6b9c:	f5 e2       	ldi	r31, 0x25	; 37
    6b9e:	df 01       	movw	r26, r30
    6ba0:	1d 92       	st	X+, r1
    6ba2:	8a 95       	dec	r24
    6ba4:	e9 f7       	brne	.-6      	; 0x6ba0 <ht1632c_clear_screen+0x8>
    6ba6:	9e ce       	rjmp	.-708    	; 0x68e4 <ht1632c_refresh_screen>

00006ba8 <ht1632c_draw_char>:
}

void ht1632c_draw_char(int16_t x, int16_t y, char c,uint16_t color, uint8_t size) {
    6ba8:	2f 92       	push	r2
    6baa:	3f 92       	push	r3
    6bac:	4f 92       	push	r4
    6bae:	5f 92       	push	r5
    6bb0:	6f 92       	push	r6
    6bb2:	7f 92       	push	r7
    6bb4:	8f 92       	push	r8
    6bb6:	9f 92       	push	r9
    6bb8:	af 92       	push	r10
    6bba:	bf 92       	push	r11
    6bbc:	cf 92       	push	r12
    6bbe:	df 92       	push	r13
    6bc0:	ef 92       	push	r14
    6bc2:	ff 92       	push	r15
    6bc4:	0f 93       	push	r16
    6bc6:	1f 93       	push	r17
    6bc8:	cf 93       	push	r28
    6bca:	df 93       	push	r29
    6bcc:	cd b7       	in	r28, 0x3d	; 61
    6bce:	de b7       	in	r29, 0x3e	; 62
    6bd0:	6a 97       	sbiw	r28, 0x1a	; 26
    6bd2:	cd bf       	out	0x3d, r28	; 61
    6bd4:	de bf       	out	0x3e, r29	; 62
    6bd6:	6b 83       	std	Y+3, r22	; 0x03
    6bd8:	7c 83       	std	Y+4, r23	; 0x04
    6bda:	2a 83       	std	Y+2, r18	; 0x02
    6bdc:	60 2e       	mov	r6, r16
    6bde:	55 e0       	ldi	r21, 0x05	; 5
    6be0:	45 9f       	mul	r20, r21
    6be2:	90 01       	movw	r18, r0
    6be4:	11 24       	eor	r1, r1
    6be6:	26 59       	subi	r18, 0x96	; 150
    6be8:	3d 4f       	sbci	r19, 0xFD	; 253
    6bea:	2a 87       	std	Y+10, r18	; 0x0a
    6bec:	3b 87       	std	Y+11, r19	; 0x0b
    6bee:	8d 83       	std	Y+5, r24	; 0x05
    6bf0:	9e 83       	std	Y+6, r25	; 0x06
    6bf2:	88 0f       	add	r24, r24
    6bf4:	99 1f       	adc	r25, r25
    6bf6:	8c 87       	std	Y+12, r24	; 0x0c
    6bf8:	9d 87       	std	Y+13, r25	; 0x0d
    6bfa:	2d 81       	ldd	r18, Y+5	; 0x05
    6bfc:	3e 81       	ldd	r19, Y+6	; 0x06
    6bfe:	2b 5f       	subi	r18, 0xFB	; 251
    6c00:	3f 4f       	sbci	r19, 0xFF	; 255
    6c02:	2d 8b       	std	Y+21, r18	; 0x15
    6c04:	3e 8b       	std	Y+22, r19	; 0x16
    6c06:	30 2f       	mov	r19, r16
    6c08:	33 0f       	add	r19, r19
    6c0a:	33 0f       	add	r19, r19
    6c0c:	33 0f       	add	r19, r19
    6c0e:	30 1b       	sub	r19, r16
    6c10:	36 0f       	add	r19, r22
    6c12:	38 8b       	std	Y+16, r19	; 0x10
		uint8_t line = pgm_read_byte(font+(c*5)+i);
		for (j = 7; j > 0; j--) {
			if (line & 0x1) {
				if (size == 1) {
					if (x+i >= 0) {
						ht1632c_draw_pixel(x+i, y+j-1, color);
    6c14:	4d 81       	ldd	r20, Y+5	; 0x05
    6c16:	49 87       	std	Y+9, r20	; 0x09
    6c18:	20 2f       	mov	r18, r16
    6c1a:	30 e0       	ldi	r19, 0x00	; 0
    6c1c:	2e 87       	std	Y+14, r18	; 0x0e
    6c1e:	3f 87       	std	Y+15, r19	; 0x0f
    6c20:	ab 01       	movw	r20, r22
    6c22:	49 5f       	subi	r20, 0xF9	; 249
    6c24:	5f 4f       	sbci	r21, 0xFF	; 255
    6c26:	4f 8b       	std	Y+23, r20	; 0x17
    6c28:	58 8f       	std	Y+24, r21	; 0x18
    6c2a:	29 e0       	ldi	r18, 0x09	; 9
    6c2c:	30 e0       	ldi	r19, 0x00	; 0
    6c2e:	26 1b       	sub	r18, r22
    6c30:	37 0b       	sbc	r19, r23
    6c32:	29 8b       	std	Y+17, r18	; 0x11
    6c34:	3a 8b       	std	Y+18, r19	; 0x12
		return;
	}
	if (y >= HEIGHT) {
		return;
	}
	y = 15 - y;
    6c36:	0f e0       	ldi	r16, 0x0F	; 15
    6c38:	20 2e       	mov	r2, r16
    6c3a:	31 2c       	mov	r3, r1

	y %= 24;
    6c3c:	88 e1       	ldi	r24, 0x18	; 24
    6c3e:	c8 2e       	mov	r12, r24
    6c40:	d1 2c       	mov	r13, r1
}

/*-------------------------Geometric functions----------------------------*/

void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    6c42:	44 24       	eor	r4, r4
    6c44:	43 94       	inc	r4
    6c46:	51 2c       	mov	r5, r1
    6c48:	69 82       	std	Y+1, r6	; 0x01
	
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
    6c4a:	ea 85       	ldd	r30, Y+10	; 0x0a
    6c4c:	fb 85       	ldd	r31, Y+11	; 0x0b
    6c4e:	64 90       	lpm	r6, Z
    6c50:	2d 81       	ldd	r18, Y+5	; 0x05
    6c52:	3e 81       	ldd	r19, Y+6	; 0x06
    6c54:	8c 85       	ldd	r24, Y+12	; 0x0c
    6c56:	9d 85       	ldd	r25, Y+13	; 0x0d
    6c58:	28 30       	cpi	r18, 0x08	; 8
    6c5a:	31 05       	cpc	r19, r1
    6c5c:	0c f0       	brlt	.+2      	; 0x6c60 <ht1632c_draw_char+0xb8>
    6c5e:	0f 97       	sbiw	r24, 0x0f	; 15
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    6c60:	ac 01       	movw	r20, r24
    6c62:	44 0f       	add	r20, r20
    6c64:	55 1f       	adc	r21, r21
    6c66:	44 0f       	add	r20, r20
    6c68:	55 1f       	adc	r21, r21
    6c6a:	44 0f       	add	r20, r20
    6c6c:	55 1f       	adc	r21, r21
    6c6e:	4b 8b       	std	Y+19, r20	; 0x13
    6c70:	5c 8b       	std	Y+20, r21	; 0x14
	}
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
    6c72:	f9 85       	ldd	r31, Y+9	; 0x09
    6c74:	ef 2f       	mov	r30, r31
    6c76:	f0 e0       	ldi	r31, 0x00	; 0
    6c78:	ef 83       	std	Y+7, r30	; 0x07
    6c7a:	f8 87       	std	Y+8, r31	; 0x08
    6c7c:	7f 01       	movw	r14, r30
    6c7e:	2e 85       	ldd	r18, Y+14	; 0x0e
    6c80:	3f 85       	ldd	r19, Y+15	; 0x0f
    6c82:	e2 0e       	add	r14, r18
    6c84:	f3 1e       	adc	r15, r19
    6c86:	a9 88       	ldd	r10, Y+17	; 0x11
    6c88:	ba 88       	ldd	r11, Y+18	; 0x12
    6c8a:	0f 89       	ldd	r16, Y+23	; 0x17
    6c8c:	18 8d       	ldd	r17, Y+24	; 0x18
    6c8e:	78 88       	ldd	r7, Y+16	; 0x10
    6c90:	17 c0       	rjmp	.+46     	; 0x6cc0 <ht1632c_draw_char+0x118>
	for (i = 0; i < 5; i++) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
		for (j = 7; j > 0; j--) {
			if (line & 0x1) {
				if (size == 1) {
					if (x+i >= 0) {
    6c92:	4d 81       	ldd	r20, Y+5	; 0x05
    6c94:	5e 81       	ldd	r21, Y+6	; 0x06
    6c96:	40 31       	cpi	r20, 0x10	; 16
    6c98:	51 05       	cpc	r21, r1
    6c9a:	20 f4       	brcc	.+8      	; 0x6ca4 <ht1632c_draw_char+0xfc>
void ht1632c_draw_pixel(int x, int y, uint8_t color) {
	
	if (x >= WIDTH) {
		return;
	}
	if (y >= HEIGHT) {
    6c9c:	01 31       	cpi	r16, 0x11	; 17
    6c9e:	11 05       	cpc	r17, r1
    6ca0:	0c f4       	brge	.+2      	; 0x6ca4 <ht1632c_draw_char+0xfc>
    6ca2:	fd c0       	rjmp	.+506    	; 0x6e9e <ht1632c_draw_char+0x2f6>
				}
				else {  // big size
					ht1632c_fill_rect(x+i*size, y+j*size, size, size, color);
				}
			}
			line >>= 1;
    6ca4:	66 94       	lsr	r6
    6ca6:	7f ef       	ldi	r23, 0xFF	; 255
    6ca8:	a7 1a       	sub	r10, r23
    6caa:	b7 0a       	sbc	r11, r23
    6cac:	01 50       	subi	r16, 0x01	; 1
    6cae:	11 09       	sbc	r17, r1
    6cb0:	29 81       	ldd	r18, Y+1	; 0x01
    6cb2:	72 1a       	sub	r7, r18
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
		uint8_t line = pgm_read_byte(font+(c*5)+i);
		for (j = 7; j > 0; j--) {
    6cb4:	4b 81       	ldd	r20, Y+3	; 0x03
    6cb6:	5c 81       	ldd	r21, Y+4	; 0x04
    6cb8:	04 17       	cp	r16, r20
    6cba:	15 07       	cpc	r17, r21
    6cbc:	09 f4       	brne	.+2      	; 0x6cc0 <ht1632c_draw_char+0x118>
    6cbe:	bc c0       	rjmp	.+376    	; 0x6e38 <ht1632c_draw_char+0x290>
			if (line & 0x1) {
    6cc0:	60 fe       	sbrs	r6, 0
    6cc2:	f0 cf       	rjmp	.-32     	; 0x6ca4 <ht1632c_draw_char+0xfc>
				if (size == 1) {
    6cc4:	39 81       	ldd	r19, Y+1	; 0x01
    6cc6:	31 30       	cpi	r19, 0x01	; 1
    6cc8:	21 f3       	breq	.-56     	; 0x6c92 <ht1632c_draw_char+0xea>
	}
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
    6cca:	ef 81       	ldd	r30, Y+7	; 0x07
    6ccc:	f8 85       	ldd	r31, Y+8	; 0x08
    6cce:	ee 15       	cp	r30, r14
    6cd0:	ff 05       	cpc	r31, r15
    6cd2:	44 f7       	brge	.-48     	; 0x6ca4 <ht1632c_draw_char+0xfc>
    6cd4:	cf 01       	movw	r24, r30
    6cd6:	e7 2d       	mov	r30, r7
    6cd8:	f0 e0       	ldi	r31, 0x00	; 0
    6cda:	2e 85       	ldd	r18, Y+14	; 0x0e
    6cdc:	3f 85       	ldd	r19, Y+15	; 0x0f
    6cde:	2e 0f       	add	r18, r30
    6ce0:	3f 1f       	adc	r19, r31
    6ce2:	89 84       	ldd	r8, Y+9	; 0x09
		for (uint8_t j=y; j<y+h; j++) {
    6ce4:	e2 17       	cp	r30, r18
    6ce6:	f3 07       	cpc	r31, r19
    6ce8:	cc f4       	brge	.+50     	; 0x6d1c <ht1632c_draw_char+0x174>
		i = 256 + 7;
	}
	i -= (y % 8);

	if (x < 8) {
		x *= 2;
    6cea:	ac 01       	movw	r20, r24
    6cec:	44 0f       	add	r20, r20
    6cee:	55 1f       	adc	r21, r21
	} else {
		x = (x-8) * 2 + 1;
    6cf0:	ba 01       	movw	r22, r20
    6cf2:	6f 50       	subi	r22, 0x0F	; 15
    6cf4:	71 09       	sbc	r23, r1
    6cf6:	88 30       	cpi	r24, 0x08	; 8
    6cf8:	91 05       	cpc	r25, r1
    6cfa:	0c f0       	brlt	.+2      	; 0x6cfe <ht1632c_draw_char+0x156>
    6cfc:	ab 01       	movw	r20, r22
	}

	i += x * 8;
    6cfe:	44 0f       	add	r20, r20
    6d00:	55 1f       	adc	r21, r21
    6d02:	44 0f       	add	r20, r20
    6d04:	55 1f       	adc	r21, r21
    6d06:	44 0f       	add	r20, r20
    6d08:	55 1f       	adc	r21, r21
    6d0a:	40 97       	sbiw	r24, 0x10	; 16
    6d0c:	74 f0       	brlt	.+28     	; 0x6d2a <ht1632c_draw_char+0x182>
    6d0e:	47 2d       	mov	r20, r7
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
		for (uint8_t j=y; j<y+h; j++) {
    6d10:	4f 5f       	subi	r20, 0xFF	; 255
    6d12:	84 2f       	mov	r24, r20
    6d14:	90 e0       	ldi	r25, 0x00	; 0
    6d16:	82 17       	cp	r24, r18
    6d18:	93 07       	cpc	r25, r19
    6d1a:	d4 f3       	brlt	.-12     	; 0x6d10 <ht1632c_draw_char+0x168>
	}
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
    6d1c:	83 94       	inc	r8
    6d1e:	88 2d       	mov	r24, r8
    6d20:	90 e0       	ldi	r25, 0x00	; 0
    6d22:	8e 15       	cp	r24, r14
    6d24:	9f 05       	cpc	r25, r15
    6d26:	f4 f2       	brlt	.-68     	; 0x6ce4 <ht1632c_draw_char+0x13c>
    6d28:	bd cf       	rjmp	.-134    	; 0x6ca4 <ht1632c_draw_char+0xfc>
    6d2a:	6a 81       	ldd	r22, Y+2	; 0x02
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    6d2c:	97 2c       	mov	r9, r7
    6d2e:	cf 01       	movw	r24, r30
    6d30:	49 8f       	std	Y+25, r20	; 0x19
    6d32:	5a 8f       	std	Y+26, r21	; 0x1a
    6d34:	66 23       	and	r22, r22
    6d36:	39 f0       	breq	.+14     	; 0x6d46 <ht1632c_draw_char+0x19e>
    6d38:	6c c0       	rjmp	.+216    	; 0x6e12 <ht1632c_draw_char+0x26a>
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
		for (uint8_t j=y; j<y+h; j++) {
    6d3a:	93 94       	inc	r9
    6d3c:	89 2d       	mov	r24, r9
    6d3e:	90 e0       	ldi	r25, 0x00	; 0
    6d40:	82 17       	cp	r24, r18
    6d42:	93 07       	cpc	r25, r19
    6d44:	5c f7       	brge	.-42     	; 0x6d1c <ht1632c_draw_char+0x174>
void ht1632c_draw_pixel(int x, int y, uint8_t color) {
	
	if (x >= WIDTH) {
		return;
	}
	if (y >= HEIGHT) {
    6d46:	80 31       	cpi	r24, 0x10	; 16
    6d48:	91 05       	cpc	r25, r1
    6d4a:	bc f7       	brge	.-18     	; 0x6d3a <ht1632c_draw_char+0x192>
		return;
	}
	y = 15 - y;
    6d4c:	d1 01       	movw	r26, r2
    6d4e:	a8 1b       	sub	r26, r24
    6d50:	b9 0b       	sbc	r27, r25
    6d52:	cd 01       	movw	r24, r26

	y %= 24;
    6d54:	b6 01       	movw	r22, r12
    6d56:	0e 94 bd 3e 	call	0x7d7a	; 0x7d7a <__divmodhi4>

	int i;

	if (y < 8) {
    6d5a:	88 30       	cpi	r24, 0x08	; 8
    6d5c:	91 05       	cpc	r25, r1
    6d5e:	0c f4       	brge	.+2      	; 0x6d62 <ht1632c_draw_char+0x1ba>
    6d60:	5c c0       	rjmp	.+184    	; 0x6e1a <ht1632c_draw_char+0x272>
		i = 7;
	} else if (y < 16) {
    6d62:	80 31       	cpi	r24, 0x10	; 16
    6d64:	91 05       	cpc	r25, r1
    6d66:	0c f0       	brlt	.+2      	; 0x6d6a <ht1632c_draw_char+0x1c2>
    6d68:	61 c0       	rjmp	.+194    	; 0x6e2c <ht1632c_draw_char+0x284>
		i = 128 + 7;
    6d6a:	47 e8       	ldi	r20, 0x87	; 135
    6d6c:	50 e0       	ldi	r21, 0x00	; 0
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    6d6e:	87 70       	andi	r24, 0x07	; 7
    6d70:	99 27       	eor	r25, r25
    6d72:	ba 01       	movw	r22, r20
    6d74:	68 1b       	sub	r22, r24
    6d76:	79 0b       	sbc	r23, r25
    6d78:	cb 01       	movw	r24, r22
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    6d7a:	49 8d       	ldd	r20, Y+25	; 0x19
    6d7c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6d7e:	84 0f       	add	r24, r20
    6d80:	95 1f       	adc	r25, r21
void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
}

void ht1632c_clr_pixel(uint16_t i) {
	ledmatrix[i/8] &= ~_BV(i%8);
    6d82:	dc 01       	movw	r26, r24
    6d84:	b6 95       	lsr	r27
    6d86:	a7 95       	ror	r26
    6d88:	b6 95       	lsr	r27
    6d8a:	a7 95       	ror	r26
    6d8c:	b6 95       	lsr	r27
    6d8e:	a7 95       	ror	r26
    6d90:	ae 55       	subi	r26, 0x5E	; 94
    6d92:	ba 4d       	sbci	r27, 0xDA	; 218
    6d94:	87 70       	andi	r24, 0x07	; 7
    6d96:	99 27       	eor	r25, r25
    6d98:	b2 01       	movw	r22, r4
    6d9a:	02 c0       	rjmp	.+4      	; 0x6da0 <ht1632c_draw_char+0x1f8>
    6d9c:	66 0f       	add	r22, r22
    6d9e:	77 1f       	adc	r23, r23
    6da0:	8a 95       	dec	r24
    6da2:	e2 f7       	brpl	.-8      	; 0x6d9c <ht1632c_draw_char+0x1f4>
    6da4:	cb 01       	movw	r24, r22
    6da6:	80 95       	com	r24
    6da8:	9c 91       	ld	r25, X
    6daa:	98 23       	and	r25, r24
    6dac:	9c 93       	st	X, r25
    6dae:	c5 cf       	rjmp	.-118    	; 0x6d3a <ht1632c_draw_char+0x192>
		return;
	}
	if (y >= HEIGHT) {
		return;
	}
	y = 15 - y;
    6db0:	d1 01       	movw	r26, r2
    6db2:	a8 1b       	sub	r26, r24
    6db4:	b9 0b       	sbc	r27, r25
    6db6:	cd 01       	movw	r24, r26

	y %= 24;
    6db8:	b6 01       	movw	r22, r12
    6dba:	df d7       	rcall	.+4030   	; 0x7d7a <__divmodhi4>

	int i;

	if (y < 8) {
    6dbc:	88 30       	cpi	r24, 0x08	; 8
    6dbe:	91 05       	cpc	r25, r1
    6dc0:	7c f5       	brge	.+94     	; 0x6e20 <ht1632c_draw_char+0x278>
		i = 7;
    6dc2:	47 e0       	ldi	r20, 0x07	; 7
    6dc4:	50 e0       	ldi	r21, 0x00	; 0
	} else if (y < 16) {
		i = 128 + 7;
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    6dc6:	87 70       	andi	r24, 0x07	; 7
    6dc8:	99 27       	eor	r25, r25
    6dca:	ba 01       	movw	r22, r20
    6dcc:	68 1b       	sub	r22, r24
    6dce:	79 0b       	sbc	r23, r25
    6dd0:	cb 01       	movw	r24, r22
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    6dd2:	49 8d       	ldd	r20, Y+25	; 0x19
    6dd4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    6dd6:	84 0f       	add	r24, r20
    6dd8:	95 1f       	adc	r25, r21
}

/*-------------------------Geometric functions----------------------------*/

void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    6dda:	dc 01       	movw	r26, r24
    6ddc:	b6 95       	lsr	r27
    6dde:	a7 95       	ror	r26
    6de0:	b6 95       	lsr	r27
    6de2:	a7 95       	ror	r26
    6de4:	b6 95       	lsr	r27
    6de6:	a7 95       	ror	r26
    6de8:	ae 55       	subi	r26, 0x5E	; 94
    6dea:	ba 4d       	sbci	r27, 0xDA	; 218
    6dec:	87 70       	andi	r24, 0x07	; 7
    6dee:	99 27       	eor	r25, r25
    6df0:	b2 01       	movw	r22, r4
    6df2:	02 c0       	rjmp	.+4      	; 0x6df8 <ht1632c_draw_char+0x250>
    6df4:	66 0f       	add	r22, r22
    6df6:	77 1f       	adc	r23, r23
    6df8:	8a 95       	dec	r24
    6dfa:	e2 f7       	brpl	.-8      	; 0x6df4 <ht1632c_draw_char+0x24c>
    6dfc:	cb 01       	movw	r24, r22
    6dfe:	9c 91       	ld	r25, X
    6e00:	98 2b       	or	r25, r24
    6e02:	9c 93       	st	X, r25
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
		for (uint8_t j=y; j<y+h; j++) {
    6e04:	93 94       	inc	r9
    6e06:	89 2d       	mov	r24, r9
    6e08:	90 e0       	ldi	r25, 0x00	; 0
    6e0a:	82 17       	cp	r24, r18
    6e0c:	93 07       	cpc	r25, r19
    6e0e:	0c f0       	brlt	.+2      	; 0x6e12 <ht1632c_draw_char+0x26a>
    6e10:	85 cf       	rjmp	.-246    	; 0x6d1c <ht1632c_draw_char+0x174>
void ht1632c_draw_pixel(int x, int y, uint8_t color) {
	
	if (x >= WIDTH) {
		return;
	}
	if (y >= HEIGHT) {
    6e12:	80 31       	cpi	r24, 0x10	; 16
    6e14:	91 05       	cpc	r25, r1
    6e16:	b4 f7       	brge	.-20     	; 0x6e04 <ht1632c_draw_char+0x25c>
    6e18:	cb cf       	rjmp	.-106    	; 0x6db0 <ht1632c_draw_char+0x208>
	y %= 24;

	int i;

	if (y < 8) {
		i = 7;
    6e1a:	47 e0       	ldi	r20, 0x07	; 7
    6e1c:	50 e0       	ldi	r21, 0x00	; 0
    6e1e:	a7 cf       	rjmp	.-178    	; 0x6d6e <ht1632c_draw_char+0x1c6>
	} else if (y < 16) {
    6e20:	80 31       	cpi	r24, 0x10	; 16
    6e22:	91 05       	cpc	r25, r1
    6e24:	34 f4       	brge	.+12     	; 0x6e32 <ht1632c_draw_char+0x28a>
		i = 128 + 7;
    6e26:	47 e8       	ldi	r20, 0x87	; 135
    6e28:	50 e0       	ldi	r21, 0x00	; 0
    6e2a:	cd cf       	rjmp	.-102    	; 0x6dc6 <ht1632c_draw_char+0x21e>
	} else {
		i = 256 + 7;
    6e2c:	47 e0       	ldi	r20, 0x07	; 7
    6e2e:	51 e0       	ldi	r21, 0x01	; 1
    6e30:	9e cf       	rjmp	.-196    	; 0x6d6e <ht1632c_draw_char+0x1c6>
    6e32:	47 e0       	ldi	r20, 0x07	; 7
    6e34:	51 e0       	ldi	r21, 0x01	; 1
    6e36:	c7 cf       	rjmp	.-114    	; 0x6dc6 <ht1632c_draw_char+0x21e>
    6e38:	ea 85       	ldd	r30, Y+10	; 0x0a
    6e3a:	fb 85       	ldd	r31, Y+11	; 0x0b
    6e3c:	31 96       	adiw	r30, 0x01	; 1
    6e3e:	ea 87       	std	Y+10, r30	; 0x0a
    6e40:	fb 87       	std	Y+11, r31	; 0x0b
    6e42:	2d 81       	ldd	r18, Y+5	; 0x05
    6e44:	3e 81       	ldd	r19, Y+6	; 0x06
    6e46:	2f 5f       	subi	r18, 0xFF	; 255
    6e48:	3f 4f       	sbci	r19, 0xFF	; 255
    6e4a:	2d 83       	std	Y+5, r18	; 0x05
    6e4c:	3e 83       	std	Y+6, r19	; 0x06
    6e4e:	4c 85       	ldd	r20, Y+12	; 0x0c
    6e50:	5d 85       	ldd	r21, Y+13	; 0x0d
    6e52:	4e 5f       	subi	r20, 0xFE	; 254
    6e54:	5f 4f       	sbci	r21, 0xFF	; 255
    6e56:	4c 87       	std	Y+12, r20	; 0x0c
    6e58:	5d 87       	std	Y+13, r21	; 0x0d
    6e5a:	89 85       	ldd	r24, Y+9	; 0x09
    6e5c:	29 81       	ldd	r18, Y+1	; 0x01
    6e5e:	82 0f       	add	r24, r18
void ht1632c_draw_char(int16_t x, int16_t y, char c,uint16_t color, uint8_t size) {
	
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
    6e60:	4d 81       	ldd	r20, Y+5	; 0x05
    6e62:	5e 81       	ldd	r21, Y+6	; 0x06
    6e64:	2d 89       	ldd	r18, Y+21	; 0x15
    6e66:	3e 89       	ldd	r19, Y+22	; 0x16
    6e68:	42 17       	cp	r20, r18
    6e6a:	53 07       	cpc	r21, r19
    6e6c:	11 f0       	breq	.+4      	; 0x6e72 <ht1632c_draw_char+0x2ca>
    6e6e:	89 87       	std	Y+9, r24	; 0x09
    6e70:	ec ce       	rjmp	.-552    	; 0x6c4a <ht1632c_draw_char+0xa2>
				}
			}
			line >>= 1;
		}
	}
}
    6e72:	6a 96       	adiw	r28, 0x1a	; 26
    6e74:	cd bf       	out	0x3d, r28	; 61
    6e76:	de bf       	out	0x3e, r29	; 62
    6e78:	df 91       	pop	r29
    6e7a:	cf 91       	pop	r28
    6e7c:	1f 91       	pop	r17
    6e7e:	0f 91       	pop	r16
    6e80:	ff 90       	pop	r15
    6e82:	ef 90       	pop	r14
    6e84:	df 90       	pop	r13
    6e86:	cf 90       	pop	r12
    6e88:	bf 90       	pop	r11
    6e8a:	af 90       	pop	r10
    6e8c:	9f 90       	pop	r9
    6e8e:	8f 90       	pop	r8
    6e90:	7f 90       	pop	r7
    6e92:	6f 90       	pop	r6
    6e94:	5f 90       	pop	r5
    6e96:	4f 90       	pop	r4
    6e98:	3f 90       	pop	r3
    6e9a:	2f 90       	pop	r2
    6e9c:	08 95       	ret
	if (y >= HEIGHT) {
		return;
	}
	y = 15 - y;

	y %= 24;
    6e9e:	c5 01       	movw	r24, r10
    6ea0:	b6 01       	movw	r22, r12
    6ea2:	6b d7       	rcall	.+3798   	; 0x7d7a <__divmodhi4>

	int i;

	if (y < 8) {
    6ea4:	88 30       	cpi	r24, 0x08	; 8
    6ea6:	91 05       	cpc	r25, r1
    6ea8:	74 f0       	brlt	.+28     	; 0x6ec6 <ht1632c_draw_char+0x31e>
		i = 7;
	} else if (y < 16) {
    6eaa:	80 31       	cpi	r24, 0x10	; 16
    6eac:	91 05       	cpc	r25, r1
    6eae:	9c f5       	brge	.+102    	; 0x6f16 <ht1632c_draw_char+0x36e>
		i = 128 + 7;
    6eb0:	27 e8       	ldi	r18, 0x87	; 135
    6eb2:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    6eb4:	87 70       	andi	r24, 0x07	; 7
    6eb6:	90 78       	andi	r25, 0x80	; 128
    6eb8:	97 ff       	sbrs	r25, 7
    6eba:	0b c0       	rjmp	.+22     	; 0x6ed2 <ht1632c_draw_char+0x32a>
    6ebc:	01 97       	sbiw	r24, 0x01	; 1
    6ebe:	88 6f       	ori	r24, 0xF8	; 248
    6ec0:	9f 6f       	ori	r25, 0xFF	; 255
    6ec2:	01 96       	adiw	r24, 0x01	; 1
    6ec4:	06 c0       	rjmp	.+12     	; 0x6ed2 <ht1632c_draw_char+0x32a>
	y %= 24;

	int i;

	if (y < 8) {
		i = 7;
    6ec6:	27 e0       	ldi	r18, 0x07	; 7
    6ec8:	30 e0       	ldi	r19, 0x00	; 0
	} else if (y < 16) {
		i = 128 + 7;
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    6eca:	87 70       	andi	r24, 0x07	; 7
    6ecc:	90 78       	andi	r25, 0x80	; 128
    6ece:	97 fd       	sbrc	r25, 7
    6ed0:	f5 cf       	rjmp	.-22     	; 0x6ebc <ht1632c_draw_char+0x314>
    6ed2:	b9 01       	movw	r22, r18
    6ed4:	68 1b       	sub	r22, r24
    6ed6:	79 0b       	sbc	r23, r25
    6ed8:	cb 01       	movw	r24, r22
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    6eda:	eb 89       	ldd	r30, Y+19	; 0x13
    6edc:	fc 89       	ldd	r31, Y+20	; 0x14
    6ede:	8e 0f       	add	r24, r30
    6ee0:	9f 1f       	adc	r25, r31

	if (color)
    6ee2:	2a 81       	ldd	r18, Y+2	; 0x02
}

/*-------------------------Geometric functions----------------------------*/

void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    6ee4:	fc 01       	movw	r30, r24
    6ee6:	f6 95       	lsr	r31
    6ee8:	e7 95       	ror	r30
    6eea:	f6 95       	lsr	r31
    6eec:	e7 95       	ror	r30
    6eee:	f6 95       	lsr	r31
    6ef0:	e7 95       	ror	r30
    6ef2:	ee 55       	subi	r30, 0x5E	; 94
    6ef4:	fa 4d       	sbci	r31, 0xDA	; 218
    6ef6:	87 70       	andi	r24, 0x07	; 7
    6ef8:	99 27       	eor	r25, r25
		x = (x-8) * 2 + 1;
	}

	i += x * 8;

	if (color)
    6efa:	21 11       	cpse	r18, r1
    6efc:	0f c0       	rjmp	.+30     	; 0x6f1c <ht1632c_draw_char+0x374>
void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
}

void ht1632c_clr_pixel(uint16_t i) {
	ledmatrix[i/8] &= ~_BV(i%8);
    6efe:	b2 01       	movw	r22, r4
    6f00:	02 c0       	rjmp	.+4      	; 0x6f06 <ht1632c_draw_char+0x35e>
    6f02:	66 0f       	add	r22, r22
    6f04:	77 1f       	adc	r23, r23
    6f06:	8a 95       	dec	r24
    6f08:	e2 f7       	brpl	.-8      	; 0x6f02 <ht1632c_draw_char+0x35a>
    6f0a:	cb 01       	movw	r24, r22
    6f0c:	80 95       	com	r24
    6f0e:	90 81       	ld	r25, Z
    6f10:	89 23       	and	r24, r25
    6f12:	80 83       	st	Z, r24
    6f14:	c7 ce       	rjmp	.-626    	; 0x6ca4 <ht1632c_draw_char+0xfc>
	if (y < 8) {
		i = 7;
	} else if (y < 16) {
		i = 128 + 7;
	} else {
		i = 256 + 7;
    6f16:	27 e0       	ldi	r18, 0x07	; 7
    6f18:	31 e0       	ldi	r19, 0x01	; 1
    6f1a:	d7 cf       	rjmp	.-82     	; 0x6eca <ht1632c_draw_char+0x322>
}

/*-------------------------Geometric functions----------------------------*/

void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    6f1c:	a2 01       	movw	r20, r4
    6f1e:	02 c0       	rjmp	.+4      	; 0x6f24 <ht1632c_draw_char+0x37c>
    6f20:	44 0f       	add	r20, r20
    6f22:	55 1f       	adc	r21, r21
    6f24:	8a 95       	dec	r24
    6f26:	e2 f7       	brpl	.-8      	; 0x6f20 <ht1632c_draw_char+0x378>
    6f28:	ca 01       	movw	r24, r20
    6f2a:	90 81       	ld	r25, Z
    6f2c:	98 2b       	or	r25, r24
    6f2e:	90 83       	st	Z, r25
    6f30:	b9 ce       	rjmp	.-654    	; 0x6ca4 <ht1632c_draw_char+0xfc>

00006f32 <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
    6f32:	fc 01       	movw	r30, r24
	parser->pos = 0;
    6f34:	10 82       	st	Z, r1
    6f36:	11 82       	std	Z+1, r1	; 0x01
	parser->toknext = 0;
    6f38:	12 82       	std	Z+2, r1	; 0x02
    6f3a:	13 82       	std	Z+3, r1	; 0x03
	parser->toksuper = -1;
    6f3c:	8f ef       	ldi	r24, 0xFF	; 255
    6f3e:	9f ef       	ldi	r25, 0xFF	; 255
    6f40:	84 83       	std	Z+4, r24	; 0x04
    6f42:	95 83       	std	Z+5, r25	; 0x05
    6f44:	08 95       	ret

00006f46 <main>:
		}
		ht1632_fade(reg01/400);
	}
}

int main(void) {
    6f46:	cf 93       	push	r28
    6f48:	df 93       	push	r29
    6f4a:	cd b7       	in	r28, 0x3d	; 61
    6f4c:	de b7       	in	r29, 0x3e	; 62
    6f4e:	26 97       	sbiw	r28, 0x06	; 6
    6f50:	cd bf       	out	0x3d, r28	; 61
    6f52:	de bf       	out	0x3e, r29	; 62
	jsmnerr_t r;
	char rx_buf[200];
	
	esp8266_status_t status;
	
	clock_setup_32_mhz();
    6f54:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <clock_setup_32_mhz>
	ht1632c_setup(HT1632_COMMON_16NMOS);
    6f58:	84 e2       	ldi	r24, 0x24	; 36
    6f5a:	88 d9       	rcall	.-3312   	; 0x626c <ht1632c_setup>
	ht1632c_set_brightness(0);
    6f5c:	80 e0       	ldi	r24, 0x00	; 0
    6f5e:	33 dc       	rcall	.-1946   	; 0x67c6 <ht1632c_set_brightness>
	ht1632c_clear_screen();
    6f60:	1b de       	rcall	.-970    	; 0x6b98 <ht1632c_clear_screen>
	
	ht1632c_draw_char(2,9,'1',1,1);
    6f62:	01 e0       	ldi	r16, 0x01	; 1
    6f64:	21 e0       	ldi	r18, 0x01	; 1
    6f66:	30 e0       	ldi	r19, 0x00	; 0
    6f68:	41 e3       	ldi	r20, 0x31	; 49
    6f6a:	69 e0       	ldi	r22, 0x09	; 9
    6f6c:	70 e0       	ldi	r23, 0x00	; 0
    6f6e:	82 e0       	ldi	r24, 0x02	; 2
    6f70:	90 e0       	ldi	r25, 0x00	; 0
    6f72:	1a de       	rcall	.-972    	; 0x6ba8 <ht1632c_draw_char>
	ht1632c_draw_char(9,9,'8',1,1);
    6f74:	21 e0       	ldi	r18, 0x01	; 1
    6f76:	30 e0       	ldi	r19, 0x00	; 0
    6f78:	48 e3       	ldi	r20, 0x38	; 56
    6f7a:	69 e0       	ldi	r22, 0x09	; 9
    6f7c:	70 e0       	ldi	r23, 0x00	; 0
    6f7e:	89 e0       	ldi	r24, 0x09	; 9
    6f80:	90 e0       	ldi	r25, 0x00	; 0
    6f82:	12 de       	rcall	.-988    	; 0x6ba8 <ht1632c_draw_char>
	ht1632c_draw_char(2,0,'0',1,1);
    6f84:	21 e0       	ldi	r18, 0x01	; 1
    6f86:	30 e0       	ldi	r19, 0x00	; 0
    6f88:	40 e3       	ldi	r20, 0x30	; 48
    6f8a:	60 e0       	ldi	r22, 0x00	; 0
    6f8c:	70 e0       	ldi	r23, 0x00	; 0
    6f8e:	82 e0       	ldi	r24, 0x02	; 2
    6f90:	90 e0       	ldi	r25, 0x00	; 0
    6f92:	0a de       	rcall	.-1004   	; 0x6ba8 <ht1632c_draw_char>
	ht1632c_draw_char(9,0,'4',1,1);
    6f94:	21 e0       	ldi	r18, 0x01	; 1
    6f96:	30 e0       	ldi	r19, 0x00	; 0
    6f98:	44 e3       	ldi	r20, 0x34	; 52
    6f9a:	60 e0       	ldi	r22, 0x00	; 0
    6f9c:	70 e0       	ldi	r23, 0x00	; 0
    6f9e:	89 e0       	ldi	r24, 0x09	; 9
    6fa0:	90 e0       	ldi	r25, 0x00	; 0
    6fa2:	02 de       	rcall	.-1020   	; 0x6ba8 <ht1632c_draw_char>
	ht1632c_refresh_screen();
    6fa4:	9f dc       	rcall	.-1730   	; 0x68e4 <ht1632c_refresh_screen>
	
	//adc_setup();
	uart_setup();
    6fa6:	43 d5       	rcall	.+2694   	; 0x7a2e <uart_setup>
void uart_put_char(char c);
static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) {
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    6fa8:	87 e0       	ldi	r24, 0x07	; 7
    6faa:	80 93 a2 00 	sts	0x00A2, r24
	ht1632c_refresh_screen();
	
	//adc_setup();
	uart_setup();
	pmic_setup();
	twi_setup(&TWIC);
    6fae:	80 e8       	ldi	r24, 0x80	; 128
    6fb0:	94 e0       	ldi	r25, 0x04	; 4
    6fb2:	cf d0       	rcall	.+414    	; 0x7152 <twi_setup>
	si114x_setup();
    6fb4:	14 d5       	rcall	.+2600   	; 0x79de <si114x_setup>
	//btn_setup();
	//rtc_setup();
	jsmn_init(&p);
    6fb6:	ce 01       	movw	r24, r28
    6fb8:	01 96       	adiw	r24, 0x01	; 1
    6fba:	bb df       	rcall	.-138    	; 0x6f32 <jsmn_init>
	
	stdout = stdin = &mystdout;
    6fbc:	85 e0       	ldi	r24, 0x05	; 5
    6fbe:	90 e2       	ldi	r25, 0x20	; 32
    6fc0:	80 93 83 2d 	sts	0x2D83, r24
    6fc4:	90 93 84 2d 	sts	0x2D84, r25
    6fc8:	80 93 85 2d 	sts	0x2D85, r24
    6fcc:	90 93 86 2d 	sts	0x2D86, r25
	puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
    6fd0:	88 e6       	ldi	r24, 0x68	; 104
    6fd2:	91 e2       	ldi	r25, 0x21	; 33
    6fd4:	6c d7       	rcall	.+3800   	; 0x7eae <puts>
	
	sei();
    6fd6:	78 94       	sei
		f_close(&Fil);
	}	
}

static inline void sd_card(void) {
	f_mount(&FatFs, "", 0);
    6fd8:	40 e0       	ldi	r20, 0x00	; 0
    6fda:	6f e1       	ldi	r22, 0x1F	; 31
    6fdc:	70 e2       	ldi	r23, 0x20	; 32
    6fde:	88 e2       	ldi	r24, 0x28	; 40
    6fe0:	97 e2       	ldi	r25, 0x27	; 39
    6fe2:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <f_mount>
	
	if (f_open(&Fil, "web.txt", FA_READ | FA_OPEN_EXISTING) == FR_OK) {
    6fe6:	41 e0       	ldi	r20, 0x01	; 1
    6fe8:	60 e9       	ldi	r22, 0x90	; 144
    6fea:	71 e2       	ldi	r23, 0x21	; 33
    6fec:	8c e5       	ldi	r24, 0x5C	; 92
    6fee:	9d e2       	ldi	r25, 0x2D	; 45
    6ff0:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <f_open>
    6ff4:	88 23       	and	r24, r24
    6ff6:	79 f0       	breq	.+30     	; 0x7016 <main+0xd0>
		puts("Reading...");
		f_read(&Fil,Buff,101,&bw);
		f_close(&Fil);
	}
	puts("Read done:");
    6ff8:	83 ea       	ldi	r24, 0xA3	; 163
    6ffa:	91 e2       	ldi	r25, 0x21	; 33
    6ffc:	58 d7       	rcall	.+3760   	; 0x7eae <puts>
	puts(Buff);
    6ffe:	8a e5       	ldi	r24, 0x5A	; 90
    7000:	99 e2       	ldi	r25, 0x29	; 41
    7002:	55 d7       	rcall	.+3754   	; 0x7eae <puts>
	
	sei();
	
	sd_card();
	
	esp8266_on();
    7004:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <esp8266_on>
	esp8266_setup_webserver();
    7008:	0e 94 90 04 	call	0x920	; 0x920 <esp8266_setup_webserver>
	
	print_token(tokens,&rx_buf,10);
	*/
	while (1) {
		
		esp8266_run_simple_webserver(Buff);
    700c:	8a e5       	ldi	r24, 0x5A	; 90
    700e:	99 e2       	ldi	r25, 0x29	; 41
    7010:	0e 94 06 06 	call	0xc0c	; 0xc0c <esp8266_run_simple_webserver>
    7014:	fb cf       	rjmp	.-10     	; 0x700c <main+0xc6>

static inline void sd_card(void) {
	f_mount(&FatFs, "", 0);
	
	if (f_open(&Fil, "web.txt", FA_READ | FA_OPEN_EXISTING) == FR_OK) {
		puts("Reading...");
    7016:	88 e9       	ldi	r24, 0x98	; 152
    7018:	91 e2       	ldi	r25, 0x21	; 33
    701a:	49 d7       	rcall	.+3730   	; 0x7eae <puts>
		f_read(&Fil,Buff,101,&bw);
    701c:	2a e5       	ldi	r18, 0x5A	; 90
    701e:	3d e2       	ldi	r19, 0x2D	; 45
    7020:	45 e6       	ldi	r20, 0x65	; 101
    7022:	50 e0       	ldi	r21, 0x00	; 0
    7024:	6a e5       	ldi	r22, 0x5A	; 90
    7026:	79 e2       	ldi	r23, 0x29	; 41
    7028:	8c e5       	ldi	r24, 0x5C	; 92
    702a:	9d e2       	ldi	r25, 0x2D	; 45
    702c:	0e 94 27 28 	call	0x504e	; 0x504e <f_read>
		f_close(&Fil);
    7030:	8c e5       	ldi	r24, 0x5C	; 92
    7032:	9d e2       	ldi	r25, 0x2D	; 45
    7034:	0e 94 aa 2a 	call	0x5554	; 0x5554 <f_close>
    7038:	df cf       	rjmp	.-66     	; 0x6ff8 <main+0xb2>

0000703a <__vector_66>:
	} else {
		return NONE;
	}
}

ISR(PORTA_INT0_vect) {
    703a:	1f 92       	push	r1
    703c:	0f 92       	push	r0
    703e:	0f b6       	in	r0, 0x3f	; 63
    7040:	0f 92       	push	r0
    7042:	11 24       	eor	r1, r1
    7044:	0b b6       	in	r0, 0x3b	; 59
    7046:	0f 92       	push	r0
    7048:	2f 93       	push	r18
    704a:	3f 93       	push	r19
    704c:	4f 93       	push	r20
    704e:	5f 93       	push	r21
    7050:	6f 93       	push	r22
    7052:	7f 93       	push	r23
    7054:	8f 93       	push	r24
    7056:	9f 93       	push	r25
    7058:	af 93       	push	r26
    705a:	bf 93       	push	r27
    705c:	ef 93       	push	r30
    705e:	ff 93       	push	r31
	ht1632c_clear_screen();
    7060:	9b dd       	rcall	.-1226   	; 0x6b98 <ht1632c_clear_screen>
    7062:	ff 91       	pop	r31
    7064:	ef 91       	pop	r30
    7066:	bf 91       	pop	r27
    7068:	af 91       	pop	r26
    706a:	9f 91       	pop	r25
    706c:	8f 91       	pop	r24
    706e:	7f 91       	pop	r23
    7070:	6f 91       	pop	r22
    7072:	5f 91       	pop	r21
    7074:	4f 91       	pop	r20
    7076:	3f 91       	pop	r19
    7078:	2f 91       	pop	r18
    707a:	0f 90       	pop	r0
    707c:	0b be       	out	0x3b, r0	; 59
    707e:	0f 90       	pop	r0
    7080:	0f be       	out	0x3f, r0	; 63
    7082:	0f 90       	pop	r0
    7084:	1f 90       	pop	r1
    7086:	18 95       	reti

00007088 <__vector_10>:
	ht1632c_draw_char(9,pos,buffer[1],1,1);
	
	ht1632c_refresh_screen();
}

ISR(RTC_OVF_vect) {
    7088:	1f 92       	push	r1
    708a:	0f 92       	push	r0
    708c:	0f b6       	in	r0, 0x3f	; 63
    708e:	0f 92       	push	r0
    7090:	11 24       	eor	r1, r1
    7092:	0b b6       	in	r0, 0x3b	; 59
    7094:	0f 92       	push	r0
    7096:	2f 93       	push	r18
    7098:	3f 93       	push	r19
    709a:	4f 93       	push	r20
    709c:	8f 93       	push	r24
    709e:	9f 93       	push	r25
    70a0:	af 93       	push	r26
    70a2:	bf 93       	push	r27
    70a4:	ef 93       	push	r30
    70a6:	ff 93       	push	r31
	time.seconds++;
    70a8:	ac e7       	ldi	r26, 0x7C	; 124
    70aa:	bd e2       	ldi	r27, 0x2D	; 45
    70ac:	3c 91       	ld	r19, X
    70ae:	3f 5f       	subi	r19, 0xFF	; 255
	time.minutes += time.seconds / 60;
    70b0:	89 e8       	ldi	r24, 0x89	; 137
    70b2:	38 9f       	mul	r19, r24
    70b4:	21 2d       	mov	r18, r1
    70b6:	11 24       	eor	r1, r1
    70b8:	22 95       	swap	r18
    70ba:	26 95       	lsr	r18
    70bc:	27 70       	andi	r18, 0x07	; 7
    70be:	ed e7       	ldi	r30, 0x7D	; 125
    70c0:	fd e2       	ldi	r31, 0x2D	; 45
    70c2:	90 81       	ld	r25, Z
    70c4:	92 0f       	add	r25, r18
	time.seconds %= 60;
    70c6:	4c e3       	ldi	r20, 0x3C	; 60
    70c8:	24 9f       	mul	r18, r20
    70ca:	30 19       	sub	r19, r0
    70cc:	11 24       	eor	r1, r1
    70ce:	3c 93       	st	X, r19
	time.hours += time.minutes / 60;
    70d0:	ae e7       	ldi	r26, 0x7E	; 126
    70d2:	bd e2       	ldi	r27, 0x2D	; 45
    70d4:	98 9f       	mul	r25, r24
    70d6:	81 2d       	mov	r24, r1
    70d8:	11 24       	eor	r1, r1
    70da:	82 95       	swap	r24
    70dc:	86 95       	lsr	r24
    70de:	87 70       	andi	r24, 0x07	; 7
    70e0:	2c 91       	ld	r18, X
    70e2:	28 0f       	add	r18, r24
    70e4:	2c 93       	st	X, r18
	time.minutes %= 60;
    70e6:	84 9f       	mul	r24, r20
    70e8:	90 19       	sub	r25, r0
    70ea:	11 24       	eor	r1, r1
    70ec:	90 83       	st	Z, r25
}
    70ee:	ff 91       	pop	r31
    70f0:	ef 91       	pop	r30
    70f2:	bf 91       	pop	r27
    70f4:	af 91       	pop	r26
    70f6:	9f 91       	pop	r25
    70f8:	8f 91       	pop	r24
    70fa:	4f 91       	pop	r20
    70fc:	3f 91       	pop	r19
    70fe:	2f 91       	pop	r18
    7100:	0f 90       	pop	r0
    7102:	0b be       	out	0x3b, r0	; 59
    7104:	0f 90       	pop	r0
    7106:	0f be       	out	0x3f, r0	; 63
    7108:	0f 90       	pop	r0
    710a:	1f 90       	pop	r1
    710c:	18 95       	reti

0000710e <spi_on>:
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    710e:	e0 e4       	ldi	r30, 0x40	; 64
    7110:	f6 e0       	ldi	r31, 0x06	; 6
    7112:	80 eb       	ldi	r24, 0xB0	; 176
    7114:	81 83       	std	Z+1, r24	; 0x01
    7116:	80 e1       	ldi	r24, 0x10	; 16
    7118:	85 83       	std	Z+5, r24	; 0x05
    711a:	80 ed       	ldi	r24, 0xD0	; 208
    711c:	80 93 c0 08 	sts	0x08C0, r24
    7120:	08 95       	ret

00007122 <spi_off>:
    7122:	e0 ec       	ldi	r30, 0xC0	; 192
    7124:	f8 e0       	ldi	r31, 0x08	; 8
    7126:	80 81       	ld	r24, Z
    7128:	8f 7b       	andi	r24, 0xBF	; 191
    712a:	80 83       	st	Z, r24
    712c:	e0 e4       	ldi	r30, 0x40	; 64
    712e:	f6 e0       	ldi	r31, 0x06	; 6
    7130:	80 eb       	ldi	r24, 0xB0	; 176
    7132:	82 83       	std	Z+2, r24	; 0x02
    7134:	88 e1       	ldi	r24, 0x18	; 24
    7136:	84 8b       	std	Z+20, r24	; 0x14
    7138:	85 8b       	std	Z+21, r24	; 0x15
    713a:	86 8b       	std	Z+22, r24	; 0x16
    713c:	87 8b       	std	Z+23, r24	; 0x17
    713e:	08 95       	ret

00007140 <spi_wr_rd>:
    7140:	80 93 c3 08 	sts	0x08C3, r24
    7144:	80 91 c2 08 	lds	r24, 0x08C2
    7148:	87 ff       	sbrs	r24, 7
    714a:	fc cf       	rjmp	.-8      	; 0x7144 <spi_wr_rd+0x4>
    714c:	80 91 c3 08 	lds	r24, 0x08C3
    7150:	08 95       	ret

00007152 <twi_setup>:
    7152:	e0 e8       	ldi	r30, 0x80	; 128
    7154:	f4 e0       	ldi	r31, 0x04	; 4
    7156:	81 e0       	ldi	r24, 0x01	; 1
    7158:	82 83       	std	Z+2, r24	; 0x02
    715a:	92 e3       	ldi	r25, 0x32	; 50
    715c:	95 83       	std	Z+5, r25	; 0x05
    715e:	98 e0       	ldi	r25, 0x08	; 8
    7160:	91 83       	std	Z+1, r25	; 0x01
    7162:	84 83       	std	Z+4, r24	; 0x04
    7164:	08 95       	ret

00007166 <twi_write_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    7166:	ef 92       	push	r14
    7168:	0f 93       	push	r16
    716a:	1f 93       	push	r17
    716c:	fc 01       	movw	r30, r24
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    716e:	6e 7f       	andi	r22, 0xFE	; 254
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    7170:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    7172:	84 e6       	ldi	r24, 0x64	; 100
    7174:	48 9f       	mul	r20, r24
    7176:	a0 01       	movw	r20, r0
    7178:	11 24       	eor	r1, r1
	while (timeout_remaining)
    717a:	41 15       	cp	r20, r1
    717c:	51 05       	cpc	r21, r1
    717e:	81 f4       	brne	.+32     	; 0x71a0 <twi_write_packet+0x3a>
    7180:	16 c0       	rjmp	.+44     	; 0x71ae <twi_write_packet+0x48>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    7182:	98 2f       	mov	r25, r24
    7184:	90 75       	andi	r25, 0x50	; 80
    7186:	90 35       	cpi	r25, 0x50	; 80
    7188:	e1 f0       	breq	.+56     	; 0x71c2 <twi_write_packet+0x5c>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    718a:	80 7c       	andi	r24, 0xC0	; 192
    718c:	09 f5       	brne	.+66     	; 0x71d0 <twi_write_packet+0x6a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    718e:	83 e0       	ldi	r24, 0x03	; 3
    7190:	8a 95       	dec	r24
    7192:	f1 f7       	brne	.-4      	; 0x7190 <twi_write_packet+0x2a>
    7194:	00 00       	nop
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    7196:	41 50       	subi	r20, 0x01	; 1
    7198:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    719a:	41 15       	cp	r20, r1
    719c:	51 05       	cpc	r21, r1
    719e:	39 f0       	breq	.+14     	; 0x71ae <twi_write_packet+0x48>
	{
		uint8_t status = TWI->MASTER.STATUS;
    71a0:	84 81       	ldd	r24, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    71a2:	98 2f       	mov	r25, r24
    71a4:	98 74       	andi	r25, 0x48	; 72
    71a6:	98 34       	cpi	r25, 0x48	; 72
    71a8:	61 f7       	brne	.-40     	; 0x7182 <twi_write_packet+0x1c>
		{
			TWI->MASTER.ADDR = slave_address;
    71aa:	66 83       	std	Z+6, r22	; 0x06
    71ac:	f0 cf       	rjmp	.-32     	; 0x718e <twi_write_packet+0x28>
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    71ae:	84 81       	ldd	r24, Z+4	; 0x04
    71b0:	85 ff       	sbrs	r24, 5
    71b2:	02 c0       	rjmp	.+4      	; 0x71b8 <twi_write_packet+0x52>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    71b4:	87 e0       	ldi	r24, 0x07	; 7
    71b6:	83 83       	std	Z+3, r24	; 0x03
    71b8:	83 e0       	ldi	r24, 0x03	; 3

		twi_stop_transmission(TWI);
	}

	return error_code;
}
    71ba:	1f 91       	pop	r17
    71bc:	0f 91       	pop	r16
    71be:	ef 90       	pop	r14
    71c0:	08 95       	ret
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    71c2:	87 e0       	ldi	r24, 0x07	; 7
    71c4:	83 83       	std	Z+3, r24	; 0x03
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
    71c6:	84 e0       	ldi	r24, 0x04	; 4

		twi_stop_transmission(TWI);
	}

	return error_code;
}
    71c8:	1f 91       	pop	r17
    71ca:	0f 91       	pop	r16
    71cc:	ef 90       	pop	r14
    71ce:	08 95       	ret
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    71d0:	27 83       	std	Z+7, r18	; 0x07

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    71d2:	84 81       	ldd	r24, Z+4	; 0x04
    71d4:	86 ff       	sbrs	r24, 6
    71d6:	fd cf       	rjmp	.-6      	; 0x71d2 <twi_write_packet+0x6c>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    71d8:	84 81       	ldd	r24, Z+4	; 0x04
    71da:	86 ff       	sbrs	r24, 6
    71dc:	16 c0       	rjmp	.+44     	; 0x720a <twi_write_packet+0xa4>
    71de:	84 81       	ldd	r24, Z+4	; 0x04
    71e0:	84 fd       	sbrc	r24, 4
    71e2:	13 c0       	rjmp	.+38     	; 0x720a <twi_write_packet+0xa4>
    71e4:	d8 01       	movw	r26, r16
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    71e6:	ee 20       	and	r14, r14
    71e8:	a9 f0       	breq	.+42     	; 0x7214 <twi_write_packet+0xae>
		{
			if (!(twi_send_byte(TWI, *(data++))))
    71ea:	8d 91       	ld	r24, X+
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    71ec:	87 83       	std	Z+7, r24	; 0x07

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    71ee:	84 81       	ldd	r24, Z+4	; 0x04
    71f0:	86 ff       	sbrs	r24, 6
    71f2:	fd cf       	rjmp	.-6      	; 0x71ee <twi_write_packet+0x88>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    71f4:	84 81       	ldd	r24, Z+4	; 0x04
    71f6:	86 ff       	sbrs	r24, 6
    71f8:	04 c0       	rjmp	.+8      	; 0x7202 <twi_write_packet+0x9c>
    71fa:	84 81       	ldd	r24, Z+4	; 0x04
    71fc:	ea 94       	dec	r14
    71fe:	84 ff       	sbrs	r24, 4
    7200:	f2 cf       	rjmp	.-28     	; 0x71e6 <twi_write_packet+0x80>

		while (length--)
		{
			if (!(twi_send_byte(TWI, *(data++))))
			{
				error_code = TWI_ERROR_SLAVE_NAK;
    7202:	86 e0       	ldi	r24, 0x06	; 6
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    7204:	97 e0       	ldi	r25, 0x07	; 7
    7206:	93 83       	std	Z+3, r25	; 0x03
    7208:	d8 cf       	rjmp	.-80     	; 0x71ba <twi_write_packet+0x54>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    720a:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return error_code;
}
    720c:	1f 91       	pop	r17
    720e:	0f 91       	pop	r16
    7210:	ef 90       	pop	r14
    7212:	08 95       	ret
    7214:	81 e0       	ldi	r24, 0x01	; 1
    7216:	f6 cf       	rjmp	.-20     	; 0x7204 <twi_write_packet+0x9e>

00007218 <i2c_write_data>:

uint8_t i2c_write_data(uint8_t slave_addr, uint8_t register_addr, uint8_t data) {
	
	TWIC.MASTER.ADDR = (slave_addr << 1);
    7218:	88 0f       	add	r24, r24
    721a:	80 93 86 04 	sts	0x0486, r24
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    721e:	80 91 84 04 	lds	r24, 0x0484
    7222:	86 ff       	sbrs	r24, 6
    7224:	fc cf       	rjmp	.-8      	; 0x721e <i2c_write_data+0x6>
	TWIC.MASTER.DATA = register_addr;
    7226:	60 93 87 04 	sts	0x0487, r22
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    722a:	80 91 84 04 	lds	r24, 0x0484
    722e:	86 ff       	sbrs	r24, 6
    7230:	fc cf       	rjmp	.-8      	; 0x722a <i2c_write_data+0x12>
	TWIC.MASTER.DATA = data;
    7232:	40 93 87 04 	sts	0x0487, r20
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    7236:	80 91 84 04 	lds	r24, 0x0484
    723a:	86 ff       	sbrs	r24, 6
    723c:	fc cf       	rjmp	.-8      	; 0x7236 <i2c_write_data+0x1e>
	
	TWIC.MASTER.CTRLC = 0x03; //Stop
    723e:	83 e0       	ldi	r24, 0x03	; 3
    7240:	80 93 83 04 	sts	0x0483, r24
	
	return 0;
}
    7244:	80 e0       	ldi	r24, 0x00	; 0
    7246:	08 95       	ret

00007248 <i2c_read_data>:

uint8_t i2c_read_data(uint8_t slave_addr, uint8_t register_addr) {
	
	uint8_t tmp;
	
	TWIC.MASTER.ADDR = (slave_addr << 1);
    7248:	98 2f       	mov	r25, r24
    724a:	99 0f       	add	r25, r25
    724c:	90 93 86 04 	sts	0x0486, r25
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    7250:	90 91 84 04 	lds	r25, 0x0484
    7254:	96 ff       	sbrs	r25, 6
    7256:	fc cf       	rjmp	.-8      	; 0x7250 <i2c_read_data+0x8>
	TWIC.MASTER.DATA = register_addr;
    7258:	60 93 87 04 	sts	0x0487, r22
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    725c:	90 91 84 04 	lds	r25, 0x0484
    7260:	96 ff       	sbrs	r25, 6
    7262:	fc cf       	rjmp	.-8      	; 0x725c <i2c_read_data+0x14>
	TWIC.MASTER.ADDR = (slave_addr << 1) | 0x01; //Send START
    7264:	88 0f       	add	r24, r24
    7266:	81 60       	ori	r24, 0x01	; 1
    7268:	80 93 86 04 	sts	0x0486, r24
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_RIF_bm));
    726c:	80 91 84 04 	lds	r24, 0x0484
    7270:	87 ff       	sbrs	r24, 7
    7272:	fc cf       	rjmp	.-8      	; 0x726c <i2c_read_data+0x24>
	tmp = TWIC.MASTER.DATA;
    7274:	80 91 87 04 	lds	r24, 0x0487
	TWIC.MASTER.CTRLC |= TWI_MASTER_ACKACT_bm; //Send NACK
    7278:	90 91 83 04 	lds	r25, 0x0483
    727c:	94 60       	ori	r25, 0x04	; 4
    727e:	90 93 83 04 	sts	0x0483, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7282:	e9 ef       	ldi	r30, 0xF9	; 249
    7284:	f0 e0       	ldi	r31, 0x00	; 0
    7286:	31 97       	sbiw	r30, 0x01	; 1
    7288:	f1 f7       	brne	.-4      	; 0x7286 <i2c_read_data+0x3e>
    728a:	00 c0       	rjmp	.+0      	; 0x728c <i2c_read_data+0x44>
    728c:	00 00       	nop
	
	_delay_ms(1);
	
	TWIC.MASTER.CTRLC = 0x03; //Send STOP
    728e:	93 e0       	ldi	r25, 0x03	; 3
    7290:	90 93 83 04 	sts	0x0483, r25
	
	return tmp;
    7294:	08 95       	ret

00007296 <Si114xPauseAll>:
{
    return _sendCmd(si114x_handle,0x0B);
}

s16 Si114xPauseAll(HANDLE si114x_handle)
{
    7296:	0f 93       	push	r16
    7298:	1f 93       	push	r17
    729a:	cf 93       	push	r28
    729c:	df 93       	push	r29
    729e:	ec 01       	movw	r28, r24
    while (1) 
    {
        // Keep sending nops until the response is zero
        while (1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    72a0:	60 e2       	ldi	r22, 0x20	; 32
    72a2:	ce 01       	movw	r24, r28
    72a4:	a6 d3       	rcall	.+1868   	; 0x79f2 <Si114xReadFromRegister>

    s16  response; 
    s16  retval; 

    // Get the response register contents
    if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    72a6:	60 e2       	ldi	r22, 0x20	; 32
    while (1) 
    {
        // Keep sending nops until the response is zero
        while (1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    72a8:	89 2b       	or	r24, r25
    72aa:	61 f5       	brne	.+88     	; 0x7304 <Si114xPauseAll+0x6e>

    s16  response; 
    s16  retval; 

    // Get the response register contents
    if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    72ac:	ce 01       	movw	r24, r28
    72ae:	a1 d3       	rcall	.+1858   	; 0x79f2 <Si114xReadFromRegister>
    72b0:	8c 01       	movw	r16, r24
    72b2:	97 fd       	sbrc	r25, 7
    72b4:	16 c0       	rjmp	.+44     	; 0x72e2 <Si114xPauseAll+0x4c>
    72b6:	02 c0       	rjmp	.+4      	; 0x72bc <Si114xPauseAll+0x26>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    72b8:	97 fd       	sbrc	r25, 7
    72ba:	13 c0       	rjmp	.+38     	; 0x72e2 <Si114xPauseAll+0x4c>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    72bc:	60 e3       	ldi	r22, 0x30	; 48
    72be:	ce 01       	movw	r24, r28
    72c0:	98 d3       	rcall	.+1840   	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    72c2:	81 30       	cpi	r24, 0x01	; 1
    72c4:	91 05       	cpc	r25, r1
    72c6:	c1 f7       	brne	.-16     	; 0x72b8 <Si114xPauseAll+0x22>
    {
        if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

        if(command==0) break; // Skip if the command is NOP 

        retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    72c8:	60 e2       	ldi	r22, 0x20	; 32
    72ca:	ce 01       	movw	r24, r28
    72cc:	92 d3       	rcall	.+1828   	; 0x79f2 <Si114xReadFromRegister>
        if(retval==response) break;
    72ce:	80 17       	cp	r24, r16
    72d0:	91 07       	cpc	r25, r17
    72d2:	39 f1       	breq	.+78     	; 0x7322 <Si114xPauseAll+0x8c>
        else if(retval<0) return retval;
    72d4:	97 fd       	sbrc	r25, 7
    72d6:	05 c0       	rjmp	.+10     	; 0x72e2 <Si114xPauseAll+0x4c>
    72d8:	8c 01       	movw	r16, r24
    72da:	f0 cf       	rjmp	.-32     	; 0x72bc <Si114xPauseAll+0x26>
    while(1)
    {

        if(command==0) break; // Skip if the command is NOP

        retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    72dc:	60 e2       	ldi	r22, 0x20	; 32
    72de:	ce 01       	movw	r24, r28
    72e0:	88 d3       	rcall	.+1808   	; 0x79f2 <Si114xReadFromRegister>
        _PsAlsPause(si114x_handle);

        // Wait for response
        while(1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    72e2:	60 e2       	ldi	r22, 0x20	; 32
    72e4:	ce 01       	movw	r24, r28
    72e6:	85 d3       	rcall	.+1802   	; 0x79f2 <Si114xReadFromRegister>
    72e8:	89 2b       	or	r24, r25
    72ea:	d9 f3       	breq	.-10     	; 0x72e2 <Si114xPauseAll+0x4c>
                break;
        }

        // When the PsAlsPause() response is good, we expect it to be a '1'.
        if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
    72ec:	60 e2       	ldi	r22, 0x20	; 32
    72ee:	ce 01       	movw	r24, r28
    72f0:	80 d3       	rcall	.+1792   	; 0x79f2 <Si114xReadFromRegister>
    72f2:	01 97       	sbiw	r24, 0x01	; 1
    72f4:	a9 f6       	brne	.-86     	; 0x72a0 <Si114xPauseAll+0xa>
            break;  // otherwise, start over.
    }
    return 0;
}
    72f6:	80 e0       	ldi	r24, 0x00	; 0
    72f8:	90 e0       	ldi	r25, 0x00	; 0
    72fa:	df 91       	pop	r29
    72fc:	cf 91       	pop	r28
    72fe:	1f 91       	pop	r17
    7300:	0f 91       	pop	r16
    7302:	08 95       	ret

    s16  response; 
    s16  retval; 

    // Get the response register contents
    if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    7304:	ce 01       	movw	r24, r28
    7306:	75 d3       	rcall	.+1770   	; 0x79f2 <Si114xReadFromRegister>
    7308:	97 fd       	sbrc	r25, 7
    730a:	ca cf       	rjmp	.-108    	; 0x72a0 <Si114xPauseAll+0xa>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    730c:	60 e3       	ldi	r22, 0x30	; 48
    730e:	ce 01       	movw	r24, r28
    7310:	70 d3       	rcall	.+1760   	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    7312:	81 30       	cpi	r24, 0x01	; 1
    7314:	91 05       	cpc	r25, r1
    7316:	c1 f7       	brne	.-16     	; 0x7308 <Si114xPauseAll+0x72>
        else if(retval<0) return retval;
        else response = retval;
    }

    // Send the Command
    if ((retval=Si114xWriteToRegister(si114x_handle, REG_COMMAND, command)) !=0) 
    7318:	40 e0       	ldi	r20, 0x00	; 0
    731a:	68 e1       	ldi	r22, 0x18	; 24
    731c:	ce 01       	movw	r24, r28
    731e:	65 d3       	rcall	.+1738   	; 0x79ea <Si114xWriteToRegister>
    7320:	bf cf       	rjmp	.-130    	; 0x72a0 <Si114xPauseAll+0xa>
    7322:	4b e0       	ldi	r20, 0x0B	; 11
    7324:	68 e1       	ldi	r22, 0x18	; 24
    7326:	ce 01       	movw	r24, r28
    7328:	60 d3       	rcall	.+1728   	; 0x79ea <Si114xWriteToRegister>
    732a:	89 2b       	or	r24, r25
    732c:	d1 f6       	brne	.-76     	; 0x72e2 <Si114xPauseAll+0x4c>
    732e:	17 fd       	sbrc	r17, 7
    7330:	d5 cf       	rjmp	.-86     	; 0x72dc <Si114xPauseAll+0x46>
    while(1)
    {

        if(command==0) break; // Skip if the command is NOP

        retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    7332:	60 e2       	ldi	r22, 0x20	; 32
    7334:	ce 01       	movw	r24, r28
    7336:	5d d3       	rcall	.+1722   	; 0x79f2 <Si114xReadFromRegister>
        if (retval != response) break;
    7338:	08 17       	cp	r16, r24
    733a:	19 07       	cpc	r17, r25
    733c:	d1 f3       	breq	.-12     	; 0x7332 <Si114xPauseAll+0x9c>
        _PsAlsPause(si114x_handle);

        // Wait for response
        while(1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    733e:	60 e2       	ldi	r22, 0x20	; 32
    7340:	ce 01       	movw	r24, r28
    7342:	57 d3       	rcall	.+1710   	; 0x79f2 <Si114xReadFromRegister>
    7344:	89 2b       	or	r24, r25
    7346:	69 f2       	breq	.-102    	; 0x72e2 <Si114xPauseAll+0x4c>
    7348:	d1 cf       	rjmp	.-94     	; 0x72ec <Si114xPauseAll+0x56>

0000734a <si114x_reset>:
    return 0;
}


s16 si114x_reset(HANDLE si114x_handle)
{
    734a:	0f 93       	push	r16
    734c:	1f 93       	push	r17
    734e:	cf 93       	push	r28
    7350:	df 93       	push	r29
    7352:	8c 01       	movw	r16, r24
    //
    // delay_10ms();
    // delay_10ms();
    // delay_10ms();

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    7354:	40 e0       	ldi	r20, 0x00	; 0
    7356:	68 e0       	ldi	r22, 0x08	; 8
    7358:	48 d3       	rcall	.+1680   	; 0x79ea <Si114xWriteToRegister>
    735a:	ec 01       	movw	r28, r24
    retval+=Si114xPauseAll(si114x_handle);
    735c:	c8 01       	movw	r24, r16
    735e:	9b df       	rcall	.-202    	; 0x7296 <Si114xPauseAll>
    7360:	c8 0f       	add	r28, r24
    7362:	d9 1f       	adc	r29, r25

    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    7364:	40 e0       	ldi	r20, 0x00	; 0
    7366:	68 e0       	ldi	r22, 0x08	; 8
    7368:	c8 01       	movw	r24, r16
    736a:	3f d3       	rcall	.+1662   	; 0x79ea <Si114xWriteToRegister>
    736c:	c8 0f       	add	r28, r24
    736e:	d9 1f       	adc	r29, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    7370:	40 e0       	ldi	r20, 0x00	; 0
    7372:	64 e0       	ldi	r22, 0x04	; 4
    7374:	c8 01       	movw	r24, r16
    7376:	39 d3       	rcall	.+1650   	; 0x79ea <Si114xWriteToRegister>
    7378:	c8 0f       	add	r28, r24
    737a:	d9 1f       	adc	r29, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    737c:	40 e0       	ldi	r20, 0x00	; 0
    737e:	65 e0       	ldi	r22, 0x05	; 5
    7380:	c8 01       	movw	r24, r16
    7382:	33 d3       	rcall	.+1638   	; 0x79ea <Si114xWriteToRegister>
    7384:	c8 0f       	add	r28, r24
    7386:	d9 1f       	adc	r29, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    7388:	40 e0       	ldi	r20, 0x00	; 0
    738a:	66 e0       	ldi	r22, 0x06	; 6
    738c:	c8 01       	movw	r24, r16
    738e:	2d d3       	rcall	.+1626   	; 0x79ea <Si114xWriteToRegister>
    7390:	c8 0f       	add	r28, r24
    7392:	d9 1f       	adc	r29, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    7394:	40 e0       	ldi	r20, 0x00	; 0
    7396:	63 e0       	ldi	r22, 0x03	; 3
    7398:	c8 01       	movw	r24, r16
    739a:	27 d3       	rcall	.+1614   	; 0x79ea <Si114xWriteToRegister>
    739c:	c8 0f       	add	r28, r24
    739e:	d9 1f       	adc	r29, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
    73a0:	4f ef       	ldi	r20, 0xFF	; 255
    73a2:	61 e2       	ldi	r22, 0x21	; 33
    73a4:	c8 01       	movw	r24, r16
    73a6:	21 d3       	rcall	.+1602   	; 0x79ea <Si114xWriteToRegister>
    73a8:	c8 0f       	add	r28, r24
    73aa:	d9 1f       	adc	r29, r25

    // Perform the Reset Command
    retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
    73ac:	41 e0       	ldi	r20, 0x01	; 1
    73ae:	68 e1       	ldi	r22, 0x18	; 24
    73b0:	c8 01       	movw	r24, r16
    73b2:	1b d3       	rcall	.+1590   	; 0x79ea <Si114xWriteToRegister>
    73b4:	c8 0f       	add	r28, r24
    73b6:	d9 1f       	adc	r29, r25

    // Delay for 10 ms. This delay is needed to allow the Si114x
    // to perform internal reset sequence. 
    delay_10ms();
    73b8:	30 d3       	rcall	.+1632   	; 0x7a1a <delay_10ms>

    // Write Hardware Key
    retval+=Si114xWriteToRegister(si114x_handle, REG_HW_KEY, HW_KEY_VAL0);
    73ba:	47 e1       	ldi	r20, 0x17	; 23
    73bc:	67 e0       	ldi	r22, 0x07	; 7
    73be:	c8 01       	movw	r24, r16
    73c0:	14 d3       	rcall	.+1576   	; 0x79ea <Si114xWriteToRegister>

    return retval;
}
    73c2:	8c 0f       	add	r24, r28
    73c4:	9d 1f       	adc	r25, r29
    73c6:	df 91       	pop	r29
    73c8:	cf 91       	pop	r28
    73ca:	1f 91       	pop	r17
    73cc:	0f 91       	pop	r16
    73ce:	08 95       	ret

000073d0 <si114x_init>:
	reg01 = ((u16)reg[1] << 8) | reg[0];
	sensor_data->vis = reg01;
}

s16 si114x_init(HANDLE si114x_handle)
{
    73d0:	cf 92       	push	r12
    73d2:	df 92       	push	r13
    73d4:	ef 92       	push	r14
    73d6:	ff 92       	push	r15
    73d8:	0f 93       	push	r16
    73da:	1f 93       	push	r17
    73dc:	cf 93       	push	r28
    73de:	df 93       	push	r29
    73e0:	00 d0       	rcall	.+0      	; 0x73e2 <si114x_init+0x12>
    73e2:	cd b7       	in	r28, 0x3d	; 61
    73e4:	de b7       	in	r29, 0x3e	; 62
    73e6:	8c 01       	movw	r16, r24
	u8  code ps2ledsel     = LED2_EN;
	u8  code ps3ledsel     = LED3_EN;


	// Turn off RTC
	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,     0 );
    73e8:	40 e0       	ldi	r20, 0x00	; 0
    73ea:	68 e0       	ldi	r22, 0x08	; 8
    73ec:	fe d2       	rcall	.+1532   	; 0x79ea <Si114xWriteToRegister>
    73ee:	7c 01       	movw	r14, r24
	retval+=Si114xWriteToRegister(si114x_handle, REG_PS_RATE,       0 );
    73f0:	40 e0       	ldi	r20, 0x00	; 0
    73f2:	6a e0       	ldi	r22, 0x0A	; 10
    73f4:	c8 01       	movw	r24, r16
    73f6:	f9 d2       	rcall	.+1522   	; 0x79ea <Si114xWriteToRegister>
    73f8:	e8 0e       	add	r14, r24
    73fa:	f9 1e       	adc	r15, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE,      0 );
    73fc:	40 e0       	ldi	r20, 0x00	; 0
    73fe:	69 e0       	ldi	r22, 0x09	; 9
    7400:	c8 01       	movw	r24, r16
    7402:	f3 d2       	rcall	.+1510   	; 0x79ea <Si114xWriteToRegister>
    7404:	e8 0e       	add	r14, r24
    7406:	f9 1e       	adc	r15, r25
	//     1. Pauses all prior measurements
	//     2. Clear  i2c registers that need to be cleared
	//     3. Clears irq status to make sure INT* is negated
	//     4. Delays 10 ms
	//     5. Sends HW Key
	retval+=si114x_reset(si114x_handle);
    7408:	c8 01       	movw	r24, r16
    740a:	9f df       	rcall	.-194    	; 0x734a <si114x_reset>
    740c:	e8 0e       	add	r14, r24
    740e:	f9 1e       	adc	r15, r25
	{
		u8 i21, i3;

		i21 = (current_LED2<<4) + current_LED1;
		i3  = current_LED3;
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_LED21, i21);
    7410:	45 e5       	ldi	r20, 0x55	; 85
    7412:	6f e0       	ldi	r22, 0x0F	; 15
    7414:	c8 01       	movw	r24, r16
    7416:	e9 d2       	rcall	.+1490   	; 0x79ea <Si114xWriteToRegister>
    7418:	e8 0e       	add	r14, r24
    741a:	f9 1e       	adc	r15, r25
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_LED3 , i3);
    741c:	45 e0       	ldi	r20, 0x05	; 5
    741e:	60 e1       	ldi	r22, 0x10	; 16
    7420:	c8 01       	movw	r24, r16
    7422:	e3 d2       	rcall	.+1478   	; 0x79ea <Si114xWriteToRegister>
    7424:	e8 0e       	add	r14, r24
    7426:	f9 1e       	adc	r15, r25
    7428:	02 c0       	rjmp	.+4      	; 0x742e <si114x_init+0x5e>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    742a:	97 fd       	sbrc	r25, 7
    742c:	22 c0       	rjmp	.+68     	; 0x7472 <si114x_init+0xa2>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    742e:	60 e3       	ldi	r22, 0x30	; 48
    7430:	c8 01       	movw	r24, r16
    7432:	df d2       	rcall	.+1470   	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    7434:	81 30       	cpi	r24, 0x01	; 1
    7436:	91 05       	cpc	r25, r1
    7438:	c1 f7       	brne	.-16     	; 0x742a <si114x_init+0x5a>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    743a:	60 e2       	ldi	r22, 0x20	; 32
    743c:	c8 01       	movw	r24, r16
    743e:	d9 d2       	rcall	.+1458   	; 0x79f2 <Si114xReadFromRegister>
    7440:	6c 01       	movw	r12, r24

    buffer[0]= value;
    7442:	84 e7       	ldi	r24, 0x74	; 116
    7444:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    7446:	81 ea       	ldi	r24, 0xA1	; 161
    7448:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    744a:	9e 01       	movw	r18, r28
    744c:	2f 5f       	subi	r18, 0xFF	; 255
    744e:	3f 4f       	sbci	r19, 0xFF	; 255
    7450:	42 e0       	ldi	r20, 0x02	; 2
    7452:	67 e1       	ldi	r22, 0x17	; 23
    7454:	c8 01       	movw	r24, r16
    7456:	d1 d2       	rcall	.+1442   	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    7458:	00 97       	sbiw	r24, 0x00	; 0
    745a:	59 f4       	brne	.+22     	; 0x7472 <si114x_init+0xa2>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    745c:	60 e2       	ldi	r22, 0x20	; 32
    745e:	c8 01       	movw	r24, r16
    7460:	c8 d2       	rcall	.+1424   	; 0x79f2 <Si114xReadFromRegister>
    7462:	c8 16       	cp	r12, r24
    7464:	d9 06       	cpc	r13, r25
    7466:	d1 f3       	breq	.-12     	; 0x745c <si114x_init+0x8c>
    7468:	18 16       	cp	r1, r24
    746a:	19 06       	cpc	r1, r25
    746c:	14 f4       	brge	.+4      	; 0x7472 <si114x_init+0xa2>
    746e:	80 e0       	ldi	r24, 0x00	; 0
    7470:	90 e0       	ldi	r25, 0x00	; 0
	// Valid Tasks are: ALS_VIS_TASK, ALS_IR_TASK, PS1_TASK
	//                  PS2_TASK, PS3_TASK and AUX_TASK
	// However, if we are passed a 'negative' task, we will
	// turn on ALS_IR, ALS_VIS and PS1. Otherwise, we will use the
	// task list specified by the caller.
	retval+=Si114xParamSet(si114x_handle, PARAM_CH_LIST, tasklist);
    7472:	e8 0e       	add	r14, r24
    7474:	f9 1e       	adc	r15, r25
	
	// Set IRQ Modes and INT CFG to interrupt on every sample
	retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG, ICG_INTOE);
    7476:	41 e0       	ldi	r20, 0x01	; 1
    7478:	63 e0       	ldi	r22, 0x03	; 3
    747a:	c8 01       	movw	r24, r16
    747c:	b6 d2       	rcall	.+1388   	; 0x79ea <Si114xWriteToRegister>
    747e:	e8 0e       	add	r14, r24
    7480:	f9 1e       	adc	r15, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE,
    7482:	4d e1       	ldi	r20, 0x1D	; 29
    7484:	64 e0       	ldi	r22, 0x04	; 4
    7486:	c8 01       	movw	r24, r16
    7488:	b0 d2       	rcall	.+1376   	; 0x79ea <Si114xWriteToRegister>
    748a:	e8 0e       	add	r14, r24
    748c:	f9 1e       	adc	r15, r25
	IE_ALS_EVRYSAMPLE +
	IE_PS1_EVRYSAMPLE +
	IE_PS2_EVRYSAMPLE +
	IE_PS3_EVRYSAMPLE );

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,
    748e:	40 e0       	ldi	r20, 0x00	; 0
    7490:	65 e0       	ldi	r22, 0x05	; 5
    7492:	c8 01       	movw	r24, r16
    7494:	aa d2       	rcall	.+1364   	; 0x79ea <Si114xWriteToRegister>
    7496:	e8 0e       	add	r14, r24
    7498:	f9 1e       	adc	r15, r25
	IM1_ALS_EVRYSAMPLE +
	IM1_PS1_EVRYSAMPLE +
	IM1_PS2_EVRYSAMPLE );

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,
    749a:	40 e0       	ldi	r20, 0x00	; 0
    749c:	66 e0       	ldi	r22, 0x06	; 6
    749e:	c8 01       	movw	r24, r16
    74a0:	a4 d2       	rcall	.+1352   	; 0x79ea <Si114xWriteToRegister>
    74a2:	e8 0e       	add	r14, r24
    74a4:	f9 1e       	adc	r15, r25
    74a6:	02 c0       	rjmp	.+4      	; 0x74ac <si114x_init+0xdc>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    74a8:	97 fd       	sbrc	r25, 7
    74aa:	22 c0       	rjmp	.+68     	; 0x74f0 <si114x_init+0x120>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    74ac:	60 e3       	ldi	r22, 0x30	; 48
    74ae:	c8 01       	movw	r24, r16
    74b0:	a0 d2       	rcall	.+1344   	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    74b2:	81 30       	cpi	r24, 0x01	; 1
    74b4:	91 05       	cpc	r25, r1
    74b6:	c1 f7       	brne	.-16     	; 0x74a8 <si114x_init+0xd8>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    74b8:	60 e2       	ldi	r22, 0x20	; 32
    74ba:	c8 01       	movw	r24, r16
    74bc:	9a d2       	rcall	.+1332   	; 0x79f2 <Si114xReadFromRegister>
    74be:	6c 01       	movw	r12, r24

    buffer[0]= value;
    74c0:	83 e0       	ldi	r24, 0x03	; 3
    74c2:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    74c4:	87 ea       	ldi	r24, 0xA7	; 167
    74c6:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    74c8:	9e 01       	movw	r18, r28
    74ca:	2f 5f       	subi	r18, 0xFF	; 255
    74cc:	3f 4f       	sbci	r19, 0xFF	; 255
    74ce:	42 e0       	ldi	r20, 0x02	; 2
    74d0:	67 e1       	ldi	r22, 0x17	; 23
    74d2:	c8 01       	movw	r24, r16
    74d4:	92 d2       	rcall	.+1316   	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    74d6:	00 97       	sbiw	r24, 0x00	; 0
    74d8:	59 f4       	brne	.+22     	; 0x74f0 <si114x_init+0x120>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    74da:	60 e2       	ldi	r22, 0x20	; 32
    74dc:	c8 01       	movw	r24, r16
    74de:	89 d2       	rcall	.+1298   	; 0x79f2 <Si114xReadFromRegister>
    74e0:	c8 16       	cp	r12, r24
    74e2:	d9 06       	cpc	r13, r25
    74e4:	d1 f3       	breq	.-12     	; 0x74da <si114x_init+0x10a>
    74e6:	18 16       	cp	r1, r24
    74e8:	19 06       	cpc	r1, r25
    74ea:	14 f4       	brge	.+4      	; 0x74f0 <si114x_init+0x120>
    74ec:	80 e0       	ldi	r24, 0x00	; 0
    74ee:	90 e0       	ldi	r25, 0x00	; 0
	IM1_PS2_EVRYSAMPLE );

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,
	IM2_PS3_EVRYSAMPLE);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x03*ps1pdsize);
    74f0:	e8 0e       	add	r14, r24
    74f2:	f9 1e       	adc	r15, r25
    74f4:	02 c0       	rjmp	.+4      	; 0x74fa <si114x_init+0x12a>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    74f6:	97 fd       	sbrc	r25, 7
    74f8:	22 c0       	rjmp	.+68     	; 0x753e <si114x_init+0x16e>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    74fa:	60 e3       	ldi	r22, 0x30	; 48
    74fc:	c8 01       	movw	r24, r16
    74fe:	79 d2       	rcall	.+1266   	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    7500:	81 30       	cpi	r24, 0x01	; 1
    7502:	91 05       	cpc	r25, r1
    7504:	c1 f7       	brne	.-16     	; 0x74f6 <si114x_init+0x126>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    7506:	60 e2       	ldi	r22, 0x20	; 32
    7508:	c8 01       	movw	r24, r16
    750a:	73 d2       	rcall	.+1254   	; 0x79f2 <Si114xReadFromRegister>
    750c:	6c 01       	movw	r12, r24

    buffer[0]= value;
    750e:	83 e0       	ldi	r24, 0x03	; 3
    7510:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    7512:	88 ea       	ldi	r24, 0xA8	; 168
    7514:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    7516:	9e 01       	movw	r18, r28
    7518:	2f 5f       	subi	r18, 0xFF	; 255
    751a:	3f 4f       	sbci	r19, 0xFF	; 255
    751c:	42 e0       	ldi	r20, 0x02	; 2
    751e:	67 e1       	ldi	r22, 0x17	; 23
    7520:	c8 01       	movw	r24, r16
    7522:	6b d2       	rcall	.+1238   	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    7524:	00 97       	sbiw	r24, 0x00	; 0
    7526:	59 f4       	brne	.+22     	; 0x753e <si114x_init+0x16e>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    7528:	60 e2       	ldi	r22, 0x20	; 32
    752a:	c8 01       	movw	r24, r16
    752c:	62 d2       	rcall	.+1220   	; 0x79f2 <Si114xReadFromRegister>
    752e:	c8 16       	cp	r12, r24
    7530:	d9 06       	cpc	r13, r25
    7532:	d1 f3       	breq	.-12     	; 0x7528 <si114x_init+0x158>
    7534:	18 16       	cp	r1, r24
    7536:	19 06       	cpc	r1, r25
    7538:	14 f4       	brge	.+4      	; 0x753e <si114x_init+0x16e>
    753a:	80 e0       	ldi	r24, 0x00	; 0
    753c:	90 e0       	ldi	r25, 0x00	; 0

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,
	IM2_PS3_EVRYSAMPLE);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x03*ps1pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x03*ps2pdsize);
    753e:	e8 0e       	add	r14, r24
    7540:	f9 1e       	adc	r15, r25
    7542:	02 c0       	rjmp	.+4      	; 0x7548 <si114x_init+0x178>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    7544:	97 fd       	sbrc	r25, 7
    7546:	24 c0       	rjmp	.+72     	; 0x7590 <si114x_init+0x1c0>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    7548:	60 e3       	ldi	r22, 0x30	; 48
    754a:	c8 01       	movw	r24, r16
    754c:	52 d2       	rcall	.+1188   	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    754e:	81 30       	cpi	r24, 0x01	; 1
    7550:	91 05       	cpc	r25, r1
    7552:	c1 f7       	brne	.-16     	; 0x7544 <si114x_init+0x174>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    7554:	60 e2       	ldi	r22, 0x20	; 32
    7556:	c8 01       	movw	r24, r16
    7558:	4c d2       	rcall	.+1176   	; 0x79f2 <Si114xReadFromRegister>
    755a:	6c 01       	movw	r12, r24

    buffer[0]= value;
    755c:	83 e0       	ldi	r24, 0x03	; 3
    755e:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    7560:	89 ea       	ldi	r24, 0xA9	; 169
    7562:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    7564:	9e 01       	movw	r18, r28
    7566:	2f 5f       	subi	r18, 0xFF	; 255
    7568:	3f 4f       	sbci	r19, 0xFF	; 255
    756a:	42 e0       	ldi	r20, 0x02	; 2
    756c:	67 e1       	ldi	r22, 0x17	; 23
    756e:	c8 01       	movw	r24, r16
    7570:	44 d2       	rcall	.+1160   	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    7572:	00 97       	sbiw	r24, 0x00	; 0
    7574:	69 f4       	brne	.+26     	; 0x7590 <si114x_init+0x1c0>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    7576:	60 e2       	ldi	r22, 0x20	; 32
    7578:	c8 01       	movw	r24, r16
    757a:	3b d2       	rcall	.+1142   	; 0x79f2 <Si114xReadFromRegister>
    757c:	c8 16       	cp	r12, r24
    757e:	d9 06       	cpc	r13, r25
    7580:	d1 f3       	breq	.-12     	; 0x7576 <si114x_init+0x1a6>
    7582:	6c 01       	movw	r12, r24
    7584:	18 16       	cp	r1, r24
    7586:	19 06       	cpc	r1, r25
    7588:	24 f4       	brge	.+8      	; 0x7592 <si114x_init+0x1c2>
    758a:	c1 2c       	mov	r12, r1
    758c:	d1 2c       	mov	r13, r1
    758e:	01 c0       	rjmp	.+2      	; 0x7592 <si114x_init+0x1c2>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    7590:	6c 01       	movw	r12, r24
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,
	IM2_PS3_EVRYSAMPLE);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x03*ps1pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x03*ps2pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x03*ps3pdsize);
    7592:	ce 0c       	add	r12, r14
    7594:	df 1c       	adc	r13, r15
    7596:	02 c0       	rjmp	.+4      	; 0x759c <si114x_init+0x1cc>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    7598:	97 fd       	sbrc	r25, 7
    759a:	22 c0       	rjmp	.+68     	; 0x75e0 <si114x_init+0x210>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    759c:	60 e3       	ldi	r22, 0x30	; 48
    759e:	c8 01       	movw	r24, r16
    75a0:	28 d2       	rcall	.+1104   	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    75a2:	81 30       	cpi	r24, 0x01	; 1
    75a4:	91 05       	cpc	r25, r1
    75a6:	c1 f7       	brne	.-16     	; 0x7598 <si114x_init+0x1c8>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    75a8:	60 e2       	ldi	r22, 0x20	; 32
    75aa:	c8 01       	movw	r24, r16
    75ac:	22 d2       	rcall	.+1092   	; 0x79f2 <Si114xReadFromRegister>
    75ae:	7c 01       	movw	r14, r24

    buffer[0]= value;
    75b0:	83 e0       	ldi	r24, 0x03	; 3
    75b2:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    75b4:	8e ea       	ldi	r24, 0xAE	; 174
    75b6:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    75b8:	9e 01       	movw	r18, r28
    75ba:	2f 5f       	subi	r18, 0xFF	; 255
    75bc:	3f 4f       	sbci	r19, 0xFF	; 255
    75be:	42 e0       	ldi	r20, 0x02	; 2
    75c0:	67 e1       	ldi	r22, 0x17	; 23
    75c2:	c8 01       	movw	r24, r16
    75c4:	1a d2       	rcall	.+1076   	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    75c6:	00 97       	sbiw	r24, 0x00	; 0
    75c8:	59 f4       	brne	.+22     	; 0x75e0 <si114x_init+0x210>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    75ca:	60 e2       	ldi	r22, 0x20	; 32
    75cc:	c8 01       	movw	r24, r16
    75ce:	11 d2       	rcall	.+1058   	; 0x79f2 <Si114xReadFromRegister>
    75d0:	e8 16       	cp	r14, r24
    75d2:	f9 06       	cpc	r15, r25
    75d4:	d1 f3       	breq	.-12     	; 0x75ca <si114x_init+0x1fa>
    75d6:	18 16       	cp	r1, r24
    75d8:	19 06       	cpc	r1, r25
    75da:	14 f4       	brge	.+4      	; 0x75e0 <si114x_init+0x210>
    75dc:	80 e0       	ldi	r24, 0x00	; 0
    75de:	90 e0       	ldi	r25, 0x00	; 0
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x03*ps1pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x03*ps2pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x03*ps3pdsize);

	retval+=Si114xParamSet(si114x_handle, PARAM_IR_ADC_MUX,  0x03*irpd);
    75e0:	c8 0e       	add	r12, r24
    75e2:	d9 1e       	adc	r13, r25
    75e4:	02 c0       	rjmp	.+4      	; 0x75ea <si114x_init+0x21a>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    75e6:	97 fd       	sbrc	r25, 7
    75e8:	21 c0       	rjmp	.+66     	; 0x762c <si114x_init+0x25c>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    75ea:	60 e3       	ldi	r22, 0x30	; 48
    75ec:	c8 01       	movw	r24, r16
    75ee:	01 d2       	rcall	.+1026   	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    75f0:	81 30       	cpi	r24, 0x01	; 1
    75f2:	91 05       	cpc	r25, r1
    75f4:	c1 f7       	brne	.-16     	; 0x75e6 <si114x_init+0x216>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    75f6:	60 e2       	ldi	r22, 0x20	; 32
    75f8:	c8 01       	movw	r24, r16
    75fa:	fb d1       	rcall	.+1014   	; 0x79f2 <Si114xReadFromRegister>
    75fc:	7c 01       	movw	r14, r24

    buffer[0]= value;
    75fe:	19 82       	std	Y+1, r1	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    7600:	8b ea       	ldi	r24, 0xAB	; 171
    7602:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    7604:	9e 01       	movw	r18, r28
    7606:	2f 5f       	subi	r18, 0xFF	; 255
    7608:	3f 4f       	sbci	r19, 0xFF	; 255
    760a:	42 e0       	ldi	r20, 0x02	; 2
    760c:	67 e1       	ldi	r22, 0x17	; 23
    760e:	c8 01       	movw	r24, r16
    7610:	f4 d1       	rcall	.+1000   	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    7612:	00 97       	sbiw	r24, 0x00	; 0
    7614:	59 f4       	brne	.+22     	; 0x762c <si114x_init+0x25c>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    7616:	60 e2       	ldi	r22, 0x20	; 32
    7618:	c8 01       	movw	r24, r16
    761a:	eb d1       	rcall	.+982    	; 0x79f2 <Si114xReadFromRegister>
    761c:	e8 16       	cp	r14, r24
    761e:	f9 06       	cpc	r15, r25
    7620:	d1 f3       	breq	.-12     	; 0x7616 <si114x_init+0x246>
    7622:	18 16       	cp	r1, r24
    7624:	19 06       	cpc	r1, r25
    7626:	14 f4       	brge	.+4      	; 0x762c <si114x_init+0x25c>
    7628:	80 e0       	ldi	r24, 0x00	; 0
    762a:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x03*ps2pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x03*ps3pdsize);

	retval+=Si114xParamSet(si114x_handle, PARAM_IR_ADC_MUX,  0x03*irpd);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
    762c:	c8 0e       	add	r12, r24
    762e:	d9 1e       	adc	r13, r25
    7630:	02 c0       	rjmp	.+4      	; 0x7636 <si114x_init+0x266>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    7632:	97 fd       	sbrc	r25, 7
    7634:	21 c0       	rjmp	.+66     	; 0x7678 <si114x_init+0x2a8>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    7636:	60 e3       	ldi	r22, 0x30	; 48
    7638:	c8 01       	movw	r24, r16
    763a:	db d1       	rcall	.+950    	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    763c:	81 30       	cpi	r24, 0x01	; 1
    763e:	91 05       	cpc	r25, r1
    7640:	c1 f7       	brne	.-16     	; 0x7632 <si114x_init+0x262>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    7642:	60 e2       	ldi	r22, 0x20	; 32
    7644:	c8 01       	movw	r24, r16
    7646:	d5 d1       	rcall	.+938    	; 0x79f2 <Si114xReadFromRegister>
    7648:	7c 01       	movw	r14, r24

    buffer[0]= value;
    764a:	19 82       	std	Y+1, r1	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    764c:	8e eb       	ldi	r24, 0xBE	; 190
    764e:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    7650:	9e 01       	movw	r18, r28
    7652:	2f 5f       	subi	r18, 0xFF	; 255
    7654:	3f 4f       	sbci	r19, 0xFF	; 255
    7656:	42 e0       	ldi	r20, 0x02	; 2
    7658:	67 e1       	ldi	r22, 0x17	; 23
    765a:	c8 01       	movw	r24, r16
    765c:	ce d1       	rcall	.+924    	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    765e:	00 97       	sbiw	r24, 0x00	; 0
    7660:	59 f4       	brne	.+22     	; 0x7678 <si114x_init+0x2a8>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    7662:	60 e2       	ldi	r22, 0x20	; 32
    7664:	c8 01       	movw	r24, r16
    7666:	c5 d1       	rcall	.+906    	; 0x79f2 <Si114xReadFromRegister>
    7668:	e8 16       	cp	r14, r24
    766a:	f9 06       	cpc	r15, r25
    766c:	d1 f3       	breq	.-12     	; 0x7662 <si114x_init+0x292>
    766e:	18 16       	cp	r1, r24
    7670:	19 06       	cpc	r1, r25
    7672:	14 f4       	brge	.+4      	; 0x7678 <si114x_init+0x2a8>
    7674:	80 e0       	ldi	r24, 0x00	; 0
    7676:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x03*ps3pdsize);

	retval+=Si114xParamSet(si114x_handle, PARAM_IR_ADC_MUX,  0x03*irpd);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_GAIN, irgain);
    7678:	c8 0e       	add	r12, r24
    767a:	d9 1e       	adc	r13, r25
    767c:	02 c0       	rjmp	.+4      	; 0x7682 <si114x_init+0x2b2>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    767e:	97 fd       	sbrc	r25, 7
    7680:	21 c0       	rjmp	.+66     	; 0x76c4 <si114x_init+0x2f4>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    7682:	60 e3       	ldi	r22, 0x30	; 48
    7684:	c8 01       	movw	r24, r16
    7686:	b5 d1       	rcall	.+874    	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    7688:	81 30       	cpi	r24, 0x01	; 1
    768a:	91 05       	cpc	r25, r1
    768c:	c1 f7       	brne	.-16     	; 0x767e <si114x_init+0x2ae>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    768e:	60 e2       	ldi	r22, 0x20	; 32
    7690:	c8 01       	movw	r24, r16
    7692:	af d1       	rcall	.+862    	; 0x79f2 <Si114xReadFromRegister>
    7694:	7c 01       	movw	r14, r24

    buffer[0]= value;
    7696:	19 82       	std	Y+1, r1	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    7698:	81 eb       	ldi	r24, 0xB1	; 177
    769a:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    769c:	9e 01       	movw	r18, r28
    769e:	2f 5f       	subi	r18, 0xFF	; 255
    76a0:	3f 4f       	sbci	r19, 0xFF	; 255
    76a2:	42 e0       	ldi	r20, 0x02	; 2
    76a4:	67 e1       	ldi	r22, 0x17	; 23
    76a6:	c8 01       	movw	r24, r16
    76a8:	a8 d1       	rcall	.+848    	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    76aa:	00 97       	sbiw	r24, 0x00	; 0
    76ac:	59 f4       	brne	.+22     	; 0x76c4 <si114x_init+0x2f4>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    76ae:	60 e2       	ldi	r22, 0x20	; 32
    76b0:	c8 01       	movw	r24, r16
    76b2:	9f d1       	rcall	.+830    	; 0x79f2 <Si114xReadFromRegister>
    76b4:	e8 16       	cp	r14, r24
    76b6:	f9 06       	cpc	r15, r25
    76b8:	d1 f3       	breq	.-12     	; 0x76ae <si114x_init+0x2de>
    76ba:	18 16       	cp	r1, r24
    76bc:	19 06       	cpc	r1, r25
    76be:	14 f4       	brge	.+4      	; 0x76c4 <si114x_init+0x2f4>
    76c0:	80 e0       	ldi	r24, 0x00	; 0
    76c2:	90 e0       	ldi	r25, 0x00	; 0

	retval+=Si114xParamSet(si114x_handle, PARAM_IR_ADC_MUX,  0x03*irpd);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_GAIN, irgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_GAIN, visgain);
    76c4:	c8 0e       	add	r12, r24
    76c6:	d9 1e       	adc	r13, r25
    76c8:	02 c0       	rjmp	.+4      	; 0x76ce <si114x_init+0x2fe>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    76ca:	97 fd       	sbrc	r25, 7
    76cc:	22 c0       	rjmp	.+68     	; 0x7712 <si114x_init+0x342>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    76ce:	60 e3       	ldi	r22, 0x30	; 48
    76d0:	c8 01       	movw	r24, r16
    76d2:	8f d1       	rcall	.+798    	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    76d4:	81 30       	cpi	r24, 0x01	; 1
    76d6:	91 05       	cpc	r25, r1
    76d8:	c1 f7       	brne	.-16     	; 0x76ca <si114x_init+0x2fa>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    76da:	60 e2       	ldi	r22, 0x20	; 32
    76dc:	c8 01       	movw	r24, r16
    76de:	89 d1       	rcall	.+786    	; 0x79f2 <Si114xReadFromRegister>
    76e0:	7c 01       	movw	r14, r24

    buffer[0]= value;
    76e2:	81 e2       	ldi	r24, 0x21	; 33
    76e4:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    76e6:	82 ea       	ldi	r24, 0xA2	; 162
    76e8:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    76ea:	9e 01       	movw	r18, r28
    76ec:	2f 5f       	subi	r18, 0xFF	; 255
    76ee:	3f 4f       	sbci	r19, 0xFF	; 255
    76f0:	42 e0       	ldi	r20, 0x02	; 2
    76f2:	67 e1       	ldi	r22, 0x17	; 23
    76f4:	c8 01       	movw	r24, r16
    76f6:	81 d1       	rcall	.+770    	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    76f8:	00 97       	sbiw	r24, 0x00	; 0
    76fa:	59 f4       	brne	.+22     	; 0x7712 <si114x_init+0x342>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    76fc:	60 e2       	ldi	r22, 0x20	; 32
    76fe:	c8 01       	movw	r24, r16
    7700:	78 d1       	rcall	.+752    	; 0x79f2 <Si114xReadFromRegister>
    7702:	e8 16       	cp	r14, r24
    7704:	f9 06       	cpc	r15, r25
    7706:	d1 f3       	breq	.-12     	; 0x76fc <si114x_init+0x32c>
    7708:	18 16       	cp	r1, r24
    770a:	19 06       	cpc	r1, r25
    770c:	14 f4       	brge	.+4      	; 0x7712 <si114x_init+0x342>
    770e:	80 e0       	ldi	r24, 0x00	; 0
    7710:	90 e0       	ldi	r25, 0x00	; 0

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_GAIN, irgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_GAIN, visgain);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
    7712:	c8 0e       	add	r12, r24
    7714:	d9 1e       	adc	r13, r25
    7716:	02 c0       	rjmp	.+4      	; 0x771c <si114x_init+0x34c>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    7718:	97 fd       	sbrc	r25, 7
    771a:	22 c0       	rjmp	.+68     	; 0x7760 <si114x_init+0x390>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    771c:	60 e3       	ldi	r22, 0x30	; 48
    771e:	c8 01       	movw	r24, r16
    7720:	68 d1       	rcall	.+720    	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    7722:	81 30       	cpi	r24, 0x01	; 1
    7724:	91 05       	cpc	r25, r1
    7726:	c1 f7       	brne	.-16     	; 0x7718 <si114x_init+0x348>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    7728:	60 e2       	ldi	r22, 0x20	; 32
    772a:	c8 01       	movw	r24, r16
    772c:	62 d1       	rcall	.+708    	; 0x79f2 <Si114xReadFromRegister>
    772e:	7c 01       	movw	r14, r24

    buffer[0]= value;
    7730:	84 e0       	ldi	r24, 0x04	; 4
    7732:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    7734:	83 ea       	ldi	r24, 0xA3	; 163
    7736:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    7738:	9e 01       	movw	r18, r28
    773a:	2f 5f       	subi	r18, 0xFF	; 255
    773c:	3f 4f       	sbci	r19, 0xFF	; 255
    773e:	42 e0       	ldi	r20, 0x02	; 2
    7740:	67 e1       	ldi	r22, 0x17	; 23
    7742:	c8 01       	movw	r24, r16
    7744:	5a d1       	rcall	.+692    	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    7746:	00 97       	sbiw	r24, 0x00	; 0
    7748:	59 f4       	brne	.+22     	; 0x7760 <si114x_init+0x390>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    774a:	60 e2       	ldi	r22, 0x20	; 32
    774c:	c8 01       	movw	r24, r16
    774e:	51 d1       	rcall	.+674    	; 0x79f2 <Si114xReadFromRegister>
    7750:	e8 16       	cp	r14, r24
    7752:	f9 06       	cpc	r15, r25
    7754:	d1 f3       	breq	.-12     	; 0x774a <si114x_init+0x37a>
    7756:	18 16       	cp	r1, r24
    7758:	19 06       	cpc	r1, r25
    775a:	14 f4       	brge	.+4      	; 0x7760 <si114x_init+0x390>
    775c:	80 e0       	ldi	r24, 0x00	; 0
    775e:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_GAIN, irgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_GAIN, visgain);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED3_SELECT,  ps3ledsel);
    7760:	c8 0e       	add	r12, r24
    7762:	d9 1e       	adc	r13, r25
    7764:	02 c0       	rjmp	.+4      	; 0x776a <si114x_init+0x39a>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    7766:	97 fd       	sbrc	r25, 7
    7768:	22 c0       	rjmp	.+68     	; 0x77ae <si114x_init+0x3de>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    776a:	60 e3       	ldi	r22, 0x30	; 48
    776c:	c8 01       	movw	r24, r16
    776e:	41 d1       	rcall	.+642    	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    7770:	81 30       	cpi	r24, 0x01	; 1
    7772:	91 05       	cpc	r25, r1
    7774:	c1 f7       	brne	.-16     	; 0x7766 <si114x_init+0x396>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    7776:	60 e2       	ldi	r22, 0x20	; 32
    7778:	c8 01       	movw	r24, r16
    777a:	3b d1       	rcall	.+630    	; 0x79f2 <Si114xReadFromRegister>
    777c:	7c 01       	movw	r14, r24

    buffer[0]= value;
    777e:	80 e7       	ldi	r24, 0x70	; 112
    7780:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    7782:	8a ea       	ldi	r24, 0xAA	; 170
    7784:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    7786:	9e 01       	movw	r18, r28
    7788:	2f 5f       	subi	r18, 0xFF	; 255
    778a:	3f 4f       	sbci	r19, 0xFF	; 255
    778c:	42 e0       	ldi	r20, 0x02	; 2
    778e:	67 e1       	ldi	r22, 0x17	; 23
    7790:	c8 01       	movw	r24, r16
    7792:	33 d1       	rcall	.+614    	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    7794:	00 97       	sbiw	r24, 0x00	; 0
    7796:	59 f4       	brne	.+22     	; 0x77ae <si114x_init+0x3de>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    7798:	60 e2       	ldi	r22, 0x20	; 32
    779a:	c8 01       	movw	r24, r16
    779c:	2a d1       	rcall	.+596    	; 0x79f2 <Si114xReadFromRegister>
    779e:	e8 16       	cp	r14, r24
    77a0:	f9 06       	cpc	r15, r25
    77a2:	d1 f3       	breq	.-12     	; 0x7798 <si114x_init+0x3c8>
    77a4:	18 16       	cp	r1, r24
    77a6:	19 06       	cpc	r1, r25
    77a8:	14 f4       	brge	.+4      	; 0x77ae <si114x_init+0x3de>
    77aa:	80 e0       	ldi	r24, 0x00	; 0
    77ac:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_GAIN, visgain);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED3_SELECT,  ps3ledsel);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
    77ae:	c8 0e       	add	r12, r24
    77b0:	d9 1e       	adc	r13, r25
    77b2:	02 c0       	rjmp	.+4      	; 0x77b8 <si114x_init+0x3e8>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    77b4:	97 fd       	sbrc	r25, 7
    77b6:	22 c0       	rjmp	.+68     	; 0x77fc <si114x_init+0x42c>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    77b8:	60 e3       	ldi	r22, 0x30	; 48
    77ba:	c8 01       	movw	r24, r16
    77bc:	1a d1       	rcall	.+564    	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    77be:	81 30       	cpi	r24, 0x01	; 1
    77c0:	91 05       	cpc	r25, r1
    77c2:	c1 f7       	brne	.-16     	; 0x77b4 <si114x_init+0x3e4>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    77c4:	60 e2       	ldi	r22, 0x20	; 32
    77c6:	c8 01       	movw	r24, r16
    77c8:	14 d1       	rcall	.+552    	; 0x79f2 <Si114xReadFromRegister>
    77ca:	7c 01       	movw	r14, r24

    buffer[0]= value;
    77cc:	80 e7       	ldi	r24, 0x70	; 112
    77ce:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    77d0:	8d eb       	ldi	r24, 0xBD	; 189
    77d2:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    77d4:	9e 01       	movw	r18, r28
    77d6:	2f 5f       	subi	r18, 0xFF	; 255
    77d8:	3f 4f       	sbci	r19, 0xFF	; 255
    77da:	42 e0       	ldi	r20, 0x02	; 2
    77dc:	67 e1       	ldi	r22, 0x17	; 23
    77de:	c8 01       	movw	r24, r16
    77e0:	0c d1       	rcall	.+536    	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    77e2:	00 97       	sbiw	r24, 0x00	; 0
    77e4:	59 f4       	brne	.+22     	; 0x77fc <si114x_init+0x42c>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    77e6:	60 e2       	ldi	r22, 0x20	; 32
    77e8:	c8 01       	movw	r24, r16
    77ea:	03 d1       	rcall	.+518    	; 0x79f2 <Si114xReadFromRegister>
    77ec:	e8 16       	cp	r14, r24
    77ee:	f9 06       	cpc	r15, r25
    77f0:	d1 f3       	breq	.-12     	; 0x77e6 <si114x_init+0x416>
    77f2:	18 16       	cp	r1, r24
    77f4:	19 06       	cpc	r1, r25
    77f6:	14 f4       	brge	.+4      	; 0x77fc <si114x_init+0x42c>
    77f8:	80 e0       	ldi	r24, 0x00	; 0
    77fa:	90 e0       	ldi	r25, 0x00	; 0
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED3_SELECT,  ps3ledsel);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
    77fc:	c8 0e       	add	r12, r24
    77fe:	d9 1e       	adc	r13, r25
    7800:	02 c0       	rjmp	.+4      	; 0x7806 <si114x_init+0x436>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    7802:	97 fd       	sbrc	r25, 7
    7804:	22 c0       	rjmp	.+68     	; 0x784a <si114x_init+0x47a>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    7806:	60 e3       	ldi	r22, 0x30	; 48
    7808:	c8 01       	movw	r24, r16
    780a:	f3 d0       	rcall	.+486    	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    780c:	81 30       	cpi	r24, 0x01	; 1
    780e:	91 05       	cpc	r25, r1
    7810:	c1 f7       	brne	.-16     	; 0x7802 <si114x_init+0x432>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    7812:	60 e2       	ldi	r22, 0x20	; 32
    7814:	c8 01       	movw	r24, r16
    7816:	ed d0       	rcall	.+474    	; 0x79f2 <Si114xReadFromRegister>
    7818:	7c 01       	movw	r14, r24

    buffer[0]= value;
    781a:	80 e7       	ldi	r24, 0x70	; 112
    781c:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    781e:	80 eb       	ldi	r24, 0xB0	; 176
    7820:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    7822:	9e 01       	movw	r18, r28
    7824:	2f 5f       	subi	r18, 0xFF	; 255
    7826:	3f 4f       	sbci	r19, 0xFF	; 255
    7828:	42 e0       	ldi	r20, 0x02	; 2
    782a:	67 e1       	ldi	r22, 0x17	; 23
    782c:	c8 01       	movw	r24, r16
    782e:	e5 d0       	rcall	.+458    	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    7830:	00 97       	sbiw	r24, 0x00	; 0
    7832:	59 f4       	brne	.+22     	; 0x784a <si114x_init+0x47a>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    7834:	60 e2       	ldi	r22, 0x20	; 32
    7836:	c8 01       	movw	r24, r16
    7838:	dc d0       	rcall	.+440    	; 0x79f2 <Si114xReadFromRegister>
    783a:	e8 16       	cp	r14, r24
    783c:	f9 06       	cpc	r15, r25
    783e:	d1 f3       	breq	.-12     	; 0x7834 <si114x_init+0x464>
    7840:	18 16       	cp	r1, r24
    7842:	19 06       	cpc	r1, r25
    7844:	14 f4       	brge	.+4      	; 0x784a <si114x_init+0x47a>
    7846:	80 e0       	ldi	r24, 0x00	; 0
    7848:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED3_SELECT,  ps3ledsel);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_COUNTER, RECCNT_511);
    784a:	c8 0e       	add	r12, r24
    784c:	d9 1e       	adc	r13, r25
    784e:	02 c0       	rjmp	.+4      	; 0x7854 <si114x_init+0x484>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    7850:	97 fd       	sbrc	r25, 7
    7852:	22 c0       	rjmp	.+68     	; 0x7898 <si114x_init+0x4c8>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    7854:	60 e3       	ldi	r22, 0x30	; 48
    7856:	c8 01       	movw	r24, r16
    7858:	cc d0       	rcall	.+408    	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    785a:	81 30       	cpi	r24, 0x01	; 1
    785c:	91 05       	cpc	r25, r1
    785e:	c1 f7       	brne	.-16     	; 0x7850 <si114x_init+0x480>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    7860:	60 e2       	ldi	r22, 0x20	; 32
    7862:	c8 01       	movw	r24, r16
    7864:	c6 d0       	rcall	.+396    	; 0x79f2 <Si114xReadFromRegister>
    7866:	7c 01       	movw	r14, r24

    buffer[0]= value;
    7868:	84 e0       	ldi	r24, 0x04	; 4
    786a:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    786c:	8c ea       	ldi	r24, 0xAC	; 172
    786e:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    7870:	9e 01       	movw	r18, r28
    7872:	2f 5f       	subi	r18, 0xFF	; 255
    7874:	3f 4f       	sbci	r19, 0xFF	; 255
    7876:	42 e0       	ldi	r20, 0x02	; 2
    7878:	67 e1       	ldi	r22, 0x17	; 23
    787a:	c8 01       	movw	r24, r16
    787c:	be d0       	rcall	.+380    	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    787e:	00 97       	sbiw	r24, 0x00	; 0
    7880:	59 f4       	brne	.+22     	; 0x7898 <si114x_init+0x4c8>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    7882:	60 e2       	ldi	r22, 0x20	; 32
    7884:	c8 01       	movw	r24, r16
    7886:	b5 d0       	rcall	.+362    	; 0x79f2 <Si114xReadFromRegister>
    7888:	e8 16       	cp	r14, r24
    788a:	f9 06       	cpc	r15, r25
    788c:	d1 f3       	breq	.-12     	; 0x7882 <si114x_init+0x4b2>
    788e:	18 16       	cp	r1, r24
    7890:	19 06       	cpc	r1, r25
    7892:	14 f4       	brge	.+4      	; 0x7898 <si114x_init+0x4c8>
    7894:	80 e0       	ldi	r24, 0x00	; 0
    7896:	90 e0       	ldi	r25, 0x00	; 0
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_COUNTER, RECCNT_511);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC,     RANGE_EN*psrange + PS_MEAS_MODE);
    7898:	c8 0e       	add	r12, r24
    789a:	d9 1e       	adc	r13, r25
    789c:	02 c0       	rjmp	.+4      	; 0x78a2 <si114x_init+0x4d2>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    789e:	97 fd       	sbrc	r25, 7
    78a0:	22 c0       	rjmp	.+68     	; 0x78e6 <si114x_init+0x516>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    78a2:	60 e3       	ldi	r22, 0x30	; 48
    78a4:	c8 01       	movw	r24, r16
    78a6:	a5 d0       	rcall	.+330    	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    78a8:	81 30       	cpi	r24, 0x01	; 1
    78aa:	91 05       	cpc	r25, r1
    78ac:	c1 f7       	brne	.-16     	; 0x789e <si114x_init+0x4ce>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    78ae:	60 e2       	ldi	r22, 0x20	; 32
    78b0:	c8 01       	movw	r24, r16
    78b2:	9f d0       	rcall	.+318    	; 0x79f2 <Si114xReadFromRegister>
    78b4:	7c 01       	movw	r14, r24

    buffer[0]= value;
    78b6:	80 e2       	ldi	r24, 0x20	; 32
    78b8:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    78ba:	8f eb       	ldi	r24, 0xBF	; 191
    78bc:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    78be:	9e 01       	movw	r18, r28
    78c0:	2f 5f       	subi	r18, 0xFF	; 255
    78c2:	3f 4f       	sbci	r19, 0xFF	; 255
    78c4:	42 e0       	ldi	r20, 0x02	; 2
    78c6:	67 e1       	ldi	r22, 0x17	; 23
    78c8:	c8 01       	movw	r24, r16
    78ca:	97 d0       	rcall	.+302    	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    78cc:	00 97       	sbiw	r24, 0x00	; 0
    78ce:	59 f4       	brne	.+22     	; 0x78e6 <si114x_init+0x516>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    78d0:	60 e2       	ldi	r22, 0x20	; 32
    78d2:	c8 01       	movw	r24, r16
    78d4:	8e d0       	rcall	.+284    	; 0x79f2 <Si114xReadFromRegister>
    78d6:	e8 16       	cp	r14, r24
    78d8:	f9 06       	cpc	r15, r25
    78da:	d1 f3       	breq	.-12     	; 0x78d0 <si114x_init+0x500>
    78dc:	18 16       	cp	r1, r24
    78de:	19 06       	cpc	r1, r25
    78e0:	14 f4       	brge	.+4      	; 0x78e6 <si114x_init+0x516>
    78e2:	80 e0       	ldi	r24, 0x00	; 0
    78e4:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_COUNTER, RECCNT_511);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC,     RANGE_EN*psrange + PS_MEAS_MODE);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN*irrange );
    78e6:	c8 0e       	add	r12, r24
    78e8:	d9 1e       	adc	r13, r25
    78ea:	02 c0       	rjmp	.+4      	; 0x78f0 <si114x_init+0x520>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    78ec:	97 fd       	sbrc	r25, 7
    78ee:	22 c0       	rjmp	.+68     	; 0x7934 <si114x_init+0x564>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    78f0:	60 e3       	ldi	r22, 0x30	; 48
    78f2:	c8 01       	movw	r24, r16
    78f4:	7e d0       	rcall	.+252    	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    78f6:	81 30       	cpi	r24, 0x01	; 1
    78f8:	91 05       	cpc	r25, r1
    78fa:	c1 f7       	brne	.-16     	; 0x78ec <si114x_init+0x51c>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    78fc:	60 e2       	ldi	r22, 0x20	; 32
    78fe:	c8 01       	movw	r24, r16
    7900:	78 d0       	rcall	.+240    	; 0x79f2 <Si114xReadFromRegister>
    7902:	7c 01       	movw	r14, r24

    buffer[0]= value;
    7904:	80 e2       	ldi	r24, 0x20	; 32
    7906:	89 83       	std	Y+1, r24	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    7908:	82 eb       	ldi	r24, 0xB2	; 178
    790a:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    790c:	9e 01       	movw	r18, r28
    790e:	2f 5f       	subi	r18, 0xFF	; 255
    7910:	3f 4f       	sbci	r19, 0xFF	; 255
    7912:	42 e0       	ldi	r20, 0x02	; 2
    7914:	67 e1       	ldi	r22, 0x17	; 23
    7916:	c8 01       	movw	r24, r16
    7918:	70 d0       	rcall	.+224    	; 0x79fa <Si114xBlockWrite>
    if (retval != 0) return retval;
    791a:	00 97       	sbiw	r24, 0x00	; 0
    791c:	59 f4       	brne	.+22     	; 0x7934 <si114x_init+0x564>

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    791e:	60 e2       	ldi	r22, 0x20	; 32
    7920:	c8 01       	movw	r24, r16
    7922:	67 d0       	rcall	.+206    	; 0x79f2 <Si114xReadFromRegister>
    7924:	e8 16       	cp	r14, r24
    7926:	f9 06       	cpc	r15, r25
    7928:	d1 f3       	breq	.-12     	; 0x791e <si114x_init+0x54e>
    792a:	18 16       	cp	r1, r24
    792c:	19 06       	cpc	r1, r25
    792e:	14 f4       	brge	.+4      	; 0x7934 <si114x_init+0x564>
    7930:	80 e0       	ldi	r24, 0x00	; 0
    7932:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_COUNTER, RECCNT_511);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC,     RANGE_EN*psrange + PS_MEAS_MODE);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN*irrange );
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_MISC,RANGE_EN*visrange);
    7934:	c8 0e       	add	r12, r24
    7936:	d9 1e       	adc	r13, r25
		//    0xa0 = Device Wakes up every ~30 ms
		//    0x94 = Device Wakes up every ~20 ms
		//    0x84 = Device Wakes up every ~10 ms
		//    0xB9 = Device Wakes up every ~100 ms
		//    0xFF = Device Wakes up every ~2 sec
		retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE, measrate);
    7938:	40 e7       	ldi	r20, 0x70	; 112
    793a:	68 e0       	ldi	r22, 0x08	; 8
    793c:	c8 01       	movw	r24, r16
    793e:	55 d0       	rcall	.+170    	; 0x79ea <Si114xWriteToRegister>
    7940:	c8 0e       	add	r12, r24
    7942:	d9 1e       	adc	r13, r25

		// if 0x08, PS1, PS2 and PS3 made every time device wakes up.
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_RATE,   psrate);
    7944:	48 e0       	ldi	r20, 0x08	; 8
    7946:	6a e0       	ldi	r22, 0x0A	; 10
    7948:	c8 01       	movw	r24, r16
    794a:	4f d0       	rcall	.+158    	; 0x79ea <Si114xWriteToRegister>
    794c:	c8 0e       	add	r12, r24
    794e:	d9 1e       	adc	r13, r25

		// if 0x08, VIS, IR, AUX Measurements every time device wakes up.
		retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE,  alsrate);
    7950:	48 e0       	ldi	r20, 0x08	; 8
    7952:	69 e0       	ldi	r22, 0x09	; 9
    7954:	c8 01       	movw	r24, r16
    7956:	49 d0       	rcall	.+146    	; 0x79ea <Si114xWriteToRegister>
    7958:	c8 0e       	add	r12, r24
    795a:	d9 1e       	adc	r13, r25

    s16  response; 
    s16  retval; 

    // Get the response register contents
    if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    795c:	60 e2       	ldi	r22, 0x20	; 32
    795e:	c8 01       	movw	r24, r16
    7960:	48 d0       	rcall	.+144    	; 0x79f2 <Si114xReadFromRegister>
    7962:	7c 01       	movw	r14, r24
    7964:	97 fd       	sbrc	r25, 7
    7966:	2e c0       	rjmp	.+92     	; 0x79c4 <si114x_init+0x5f4>
    7968:	02 c0       	rjmp	.+4      	; 0x796e <si114x_init+0x59e>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
    796a:	97 fd       	sbrc	r25, 7
    796c:	16 c0       	rjmp	.+44     	; 0x799a <si114x_init+0x5ca>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    796e:	60 e3       	ldi	r22, 0x30	; 48
    7970:	c8 01       	movw	r24, r16
    7972:	3f d0       	rcall	.+126    	; 0x79f2 <Si114xReadFromRegister>
        if (retval == 1) break;
    7974:	81 30       	cpi	r24, 0x01	; 1
    7976:	91 05       	cpc	r25, r1
    7978:	c1 f7       	brne	.-16     	; 0x796a <si114x_init+0x59a>
    {
        if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

        if(command==0) break; // Skip if the command is NOP 

        retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    797a:	60 e2       	ldi	r22, 0x20	; 32
    797c:	c8 01       	movw	r24, r16
    797e:	39 d0       	rcall	.+114    	; 0x79f2 <Si114xReadFromRegister>
        if(retval==response) break;
    7980:	8e 15       	cp	r24, r14
    7982:	9f 05       	cpc	r25, r15
    7984:	21 f0       	breq	.+8      	; 0x798e <si114x_init+0x5be>
        else if(retval<0) return retval;
    7986:	97 fd       	sbrc	r25, 7
    7988:	08 c0       	rjmp	.+16     	; 0x799a <si114x_init+0x5ca>
    798a:	7c 01       	movw	r14, r24
    798c:	f0 cf       	rjmp	.-32     	; 0x796e <si114x_init+0x59e>
        else response = retval;
    }

    // Send the Command
    if ((retval=Si114xWriteToRegister(si114x_handle, REG_COMMAND, command)) !=0) 
    798e:	4f e0       	ldi	r20, 0x0F	; 15
    7990:	68 e1       	ldi	r22, 0x18	; 24
    7992:	c8 01       	movw	r24, r16
    7994:	2a d0       	rcall	.+84     	; 0x79ea <Si114xWriteToRegister>
    7996:	00 97       	sbiw	r24, 0x00	; 0
    7998:	b9 f0       	breq	.+46     	; 0x79c8 <si114x_init+0x5f8>
    799a:	9c 01       	movw	r18, r24

		// if 0x08, VIS, IR, AUX Measurements every time device wakes up.
		retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE,  alsrate);

		// Enable Autonomous Operation
		retval+=Si114xPsAlsAuto(si114x_handle);
    799c:	c6 01       	movw	r24, r12
    799e:	82 0f       	add	r24, r18
    79a0:	93 1f       	adc	r25, r19
		// If nothing went wrong after all of this time, the value
		// returned will be 0. Otherwise, it will be some negative
		// number
	}
	return retval;
}
    79a2:	0f 90       	pop	r0
    79a4:	0f 90       	pop	r0
    79a6:	df 91       	pop	r29
    79a8:	cf 91       	pop	r28
    79aa:	1f 91       	pop	r17
    79ac:	0f 91       	pop	r16
    79ae:	ff 90       	pop	r15
    79b0:	ef 90       	pop	r14
    79b2:	df 90       	pop	r13
    79b4:	cf 90       	pop	r12
    79b6:	08 95       	ret
    while(1)
    {

        if(command==0) break; // Skip if the command is NOP

        retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    79b8:	60 e2       	ldi	r22, 0x20	; 32
    79ba:	c8 01       	movw	r24, r16
    79bc:	1a d0       	rcall	.+52     	; 0x79f2 <Si114xReadFromRegister>
        if (retval != response) break;
    79be:	e8 16       	cp	r14, r24
    79c0:	f9 06       	cpc	r15, r25
    79c2:	51 f4       	brne	.+20     	; 0x79d8 <si114x_init+0x608>
    79c4:	97 01       	movw	r18, r14
    79c6:	ea cf       	rjmp	.-44     	; 0x799c <si114x_init+0x5cc>
    79c8:	f7 fc       	sbrc	r15, 7
    79ca:	f6 cf       	rjmp	.-20     	; 0x79b8 <si114x_init+0x5e8>
    while(1)
    {

        if(command==0) break; // Skip if the command is NOP

        retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    79cc:	60 e2       	ldi	r22, 0x20	; 32
    79ce:	c8 01       	movw	r24, r16
    79d0:	10 d0       	rcall	.+32     	; 0x79f2 <Si114xReadFromRegister>
        if (retval != response) break;
    79d2:	e8 16       	cp	r14, r24
    79d4:	f9 06       	cpc	r15, r25
    79d6:	d1 f3       	breq	.-12     	; 0x79cc <si114x_init+0x5fc>
        else if(retval<0) return retval;
    }
    return 0;
    79d8:	20 e0       	ldi	r18, 0x00	; 0
    79da:	30 e0       	ldi	r19, 0x00	; 0
    79dc:	df cf       	rjmp	.-66     	; 0x799c <si114x_init+0x5cc>

000079de <si114x_setup>:
//-----------------------------------------------------------------------------
#include "si114x_functions.h"
#include <avr/io.h>

void si114x_setup(void) {
	si114x_reset(SI114X_ADDR);
    79de:	8a e5       	ldi	r24, 0x5A	; 90
    79e0:	90 e0       	ldi	r25, 0x00	; 0
    79e2:	b3 dc       	rcall	.-1690   	; 0x734a <si114x_reset>
	si114x_init(SI114X_ADDR);
    79e4:	8a e5       	ldi	r24, 0x5A	; 90
    79e6:	90 e0       	ldi	r25, 0x00	; 0
    79e8:	f3 cc       	rjmp	.-1562   	; 0x73d0 <si114x_init>

000079ea <Si114xWriteToRegister>:

s16 Si114xBlockRead(HANDLE si114x_handle, 
                        u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,2000,address,values,length);
}
    79ea:	8a e5       	ldi	r24, 0x5A	; 90
    79ec:	15 dc       	rcall	.-2006   	; 0x7218 <i2c_write_data>
    79ee:	90 e0       	ldi	r25, 0x00	; 0
    79f0:	08 95       	ret

000079f2 <Si114xReadFromRegister>:
    79f2:	8a e5       	ldi	r24, 0x5A	; 90
    79f4:	29 dc       	rcall	.-1966   	; 0x7248 <i2c_read_data>
    79f6:	90 e0       	ldi	r25, 0x00	; 0
    79f8:	08 95       	ret

000079fa <Si114xBlockWrite>:
    79fa:	ef 92       	push	r14
    79fc:	0f 93       	push	r16
    79fe:	1f 93       	push	r17
    7a00:	89 01       	movw	r16, r18
    7a02:	e4 2e       	mov	r14, r20
    7a04:	26 2f       	mov	r18, r22
    7a06:	40 ed       	ldi	r20, 0xD0	; 208
    7a08:	6a e5       	ldi	r22, 0x5A	; 90
    7a0a:	80 e8       	ldi	r24, 0x80	; 128
    7a0c:	94 e0       	ldi	r25, 0x04	; 4
    7a0e:	ab db       	rcall	.-2218   	; 0x7166 <twi_write_packet>
    7a10:	90 e0       	ldi	r25, 0x00	; 0
    7a12:	1f 91       	pop	r17
    7a14:	0f 91       	pop	r16
    7a16:	ef 90       	pop	r14
    7a18:	08 95       	ret

00007a1a <delay_10ms>:
    7a1a:	2f ef       	ldi	r18, 0xFF	; 255
    7a1c:	89 ef       	ldi	r24, 0xF9	; 249
    7a1e:	90 e0       	ldi	r25, 0x00	; 0
    7a20:	21 50       	subi	r18, 0x01	; 1
    7a22:	80 40       	sbci	r24, 0x00	; 0
    7a24:	90 40       	sbci	r25, 0x00	; 0
    7a26:	e1 f7       	brne	.-8      	; 0x7a20 <delay_10ms+0x6>
    7a28:	00 c0       	rjmp	.+0      	; 0x7a2a <delay_10ms+0x10>
    7a2a:	00 00       	nop
    7a2c:	08 95       	ret

00007a2e <uart_setup>:
#include <avr/io.h>
#include <util/delay.h>

void uart_setup(void) {
	
	PORTD.DIRSET = PIN3_bm; //TX
    7a2e:	e0 e6       	ldi	r30, 0x60	; 96
    7a30:	f6 e0       	ldi	r31, 0x06	; 6
    7a32:	88 e0       	ldi	r24, 0x08	; 8
    7a34:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; //RX
    7a36:	84 e0       	ldi	r24, 0x04	; 4
    7a38:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
    7a3a:	e0 ea       	ldi	r30, 0xA0	; 160
    7a3c:	f9 e0       	ldi	r31, 0x09	; 9
    7a3e:	80 e2       	ldi	r24, 0x20	; 32
    7a40:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 207;//0x1111;
    7a42:	8f ec       	ldi	r24, 0xCF	; 207
    7a44:	86 83       	std	Z+6, r24	; 0x06
	//USARTE0.BAUDCTRLB = (33 << 4);
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
    7a46:	83 e0       	ldi	r24, 0x03	; 3
    7a48:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    7a4a:	88 e1       	ldi	r24, 0x18	; 24
    7a4c:	84 83       	std	Z+4, r24	; 0x04
    7a4e:	08 95       	ret

00007a50 <uart_put_char>:
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    7a50:	90 91 a1 09 	lds	r25, 0x09A1
    7a54:	95 ff       	sbrs	r25, 5
    7a56:	fc cf       	rjmp	.-8      	; 0x7a50 <uart_put_char>
	USARTD0.DATA = c;
    7a58:	80 93 a0 09 	sts	0x09A0, r24
    7a5c:	08 95       	ret

00007a5e <uart_get_char>:
}

char uart_get_char(void) {
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
    7a5e:	80 91 a1 09 	lds	r24, 0x09A1
    7a62:	87 ff       	sbrs	r24, 7
    7a64:	fc cf       	rjmp	.-8      	; 0x7a5e <uart_get_char>
	return USARTD0.DATA;
    7a66:	80 91 a0 09 	lds	r24, 0x09A0
}
    7a6a:	08 95       	ret

00007a6c <__subsf3>:
    7a6c:	50 58       	subi	r21, 0x80	; 128

00007a6e <__addsf3>:
    7a6e:	bb 27       	eor	r27, r27
    7a70:	aa 27       	eor	r26, r26
    7a72:	0e d0       	rcall	.+28     	; 0x7a90 <__addsf3x>
    7a74:	e5 c0       	rjmp	.+458    	; 0x7c40 <__fp_round>
    7a76:	d6 d0       	rcall	.+428    	; 0x7c24 <__fp_pscA>
    7a78:	30 f0       	brcs	.+12     	; 0x7a86 <__addsf3+0x18>
    7a7a:	db d0       	rcall	.+438    	; 0x7c32 <__fp_pscB>
    7a7c:	20 f0       	brcs	.+8      	; 0x7a86 <__addsf3+0x18>
    7a7e:	31 f4       	brne	.+12     	; 0x7a8c <__addsf3+0x1e>
    7a80:	9f 3f       	cpi	r25, 0xFF	; 255
    7a82:	11 f4       	brne	.+4      	; 0x7a88 <__addsf3+0x1a>
    7a84:	1e f4       	brtc	.+6      	; 0x7a8c <__addsf3+0x1e>
    7a86:	cb c0       	rjmp	.+406    	; 0x7c1e <__fp_nan>
    7a88:	0e f4       	brtc	.+2      	; 0x7a8c <__addsf3+0x1e>
    7a8a:	e0 95       	com	r30
    7a8c:	e7 fb       	bst	r30, 7
    7a8e:	c1 c0       	rjmp	.+386    	; 0x7c12 <__fp_inf>

00007a90 <__addsf3x>:
    7a90:	e9 2f       	mov	r30, r25
    7a92:	e7 d0       	rcall	.+462    	; 0x7c62 <__fp_split3>
    7a94:	80 f3       	brcs	.-32     	; 0x7a76 <__addsf3+0x8>
    7a96:	ba 17       	cp	r27, r26
    7a98:	62 07       	cpc	r22, r18
    7a9a:	73 07       	cpc	r23, r19
    7a9c:	84 07       	cpc	r24, r20
    7a9e:	95 07       	cpc	r25, r21
    7aa0:	18 f0       	brcs	.+6      	; 0x7aa8 <__addsf3x+0x18>
    7aa2:	71 f4       	brne	.+28     	; 0x7ac0 <__addsf3x+0x30>
    7aa4:	9e f5       	brtc	.+102    	; 0x7b0c <__addsf3x+0x7c>
    7aa6:	ff c0       	rjmp	.+510    	; 0x7ca6 <__fp_zero>
    7aa8:	0e f4       	brtc	.+2      	; 0x7aac <__addsf3x+0x1c>
    7aaa:	e0 95       	com	r30
    7aac:	0b 2e       	mov	r0, r27
    7aae:	ba 2f       	mov	r27, r26
    7ab0:	a0 2d       	mov	r26, r0
    7ab2:	0b 01       	movw	r0, r22
    7ab4:	b9 01       	movw	r22, r18
    7ab6:	90 01       	movw	r18, r0
    7ab8:	0c 01       	movw	r0, r24
    7aba:	ca 01       	movw	r24, r20
    7abc:	a0 01       	movw	r20, r0
    7abe:	11 24       	eor	r1, r1
    7ac0:	ff 27       	eor	r31, r31
    7ac2:	59 1b       	sub	r21, r25
    7ac4:	99 f0       	breq	.+38     	; 0x7aec <__addsf3x+0x5c>
    7ac6:	59 3f       	cpi	r21, 0xF9	; 249
    7ac8:	50 f4       	brcc	.+20     	; 0x7ade <__addsf3x+0x4e>
    7aca:	50 3e       	cpi	r21, 0xE0	; 224
    7acc:	68 f1       	brcs	.+90     	; 0x7b28 <__addsf3x+0x98>
    7ace:	1a 16       	cp	r1, r26
    7ad0:	f0 40       	sbci	r31, 0x00	; 0
    7ad2:	a2 2f       	mov	r26, r18
    7ad4:	23 2f       	mov	r18, r19
    7ad6:	34 2f       	mov	r19, r20
    7ad8:	44 27       	eor	r20, r20
    7ada:	58 5f       	subi	r21, 0xF8	; 248
    7adc:	f3 cf       	rjmp	.-26     	; 0x7ac4 <__addsf3x+0x34>
    7ade:	46 95       	lsr	r20
    7ae0:	37 95       	ror	r19
    7ae2:	27 95       	ror	r18
    7ae4:	a7 95       	ror	r26
    7ae6:	f0 40       	sbci	r31, 0x00	; 0
    7ae8:	53 95       	inc	r21
    7aea:	c9 f7       	brne	.-14     	; 0x7ade <__addsf3x+0x4e>
    7aec:	7e f4       	brtc	.+30     	; 0x7b0c <__addsf3x+0x7c>
    7aee:	1f 16       	cp	r1, r31
    7af0:	ba 0b       	sbc	r27, r26
    7af2:	62 0b       	sbc	r22, r18
    7af4:	73 0b       	sbc	r23, r19
    7af6:	84 0b       	sbc	r24, r20
    7af8:	ba f0       	brmi	.+46     	; 0x7b28 <__addsf3x+0x98>
    7afa:	91 50       	subi	r25, 0x01	; 1
    7afc:	a1 f0       	breq	.+40     	; 0x7b26 <__addsf3x+0x96>
    7afe:	ff 0f       	add	r31, r31
    7b00:	bb 1f       	adc	r27, r27
    7b02:	66 1f       	adc	r22, r22
    7b04:	77 1f       	adc	r23, r23
    7b06:	88 1f       	adc	r24, r24
    7b08:	c2 f7       	brpl	.-16     	; 0x7afa <__addsf3x+0x6a>
    7b0a:	0e c0       	rjmp	.+28     	; 0x7b28 <__addsf3x+0x98>
    7b0c:	ba 0f       	add	r27, r26
    7b0e:	62 1f       	adc	r22, r18
    7b10:	73 1f       	adc	r23, r19
    7b12:	84 1f       	adc	r24, r20
    7b14:	48 f4       	brcc	.+18     	; 0x7b28 <__addsf3x+0x98>
    7b16:	87 95       	ror	r24
    7b18:	77 95       	ror	r23
    7b1a:	67 95       	ror	r22
    7b1c:	b7 95       	ror	r27
    7b1e:	f7 95       	ror	r31
    7b20:	9e 3f       	cpi	r25, 0xFE	; 254
    7b22:	08 f0       	brcs	.+2      	; 0x7b26 <__addsf3x+0x96>
    7b24:	b3 cf       	rjmp	.-154    	; 0x7a8c <__addsf3+0x1e>
    7b26:	93 95       	inc	r25
    7b28:	88 0f       	add	r24, r24
    7b2a:	08 f0       	brcs	.+2      	; 0x7b2e <__addsf3x+0x9e>
    7b2c:	99 27       	eor	r25, r25
    7b2e:	ee 0f       	add	r30, r30
    7b30:	97 95       	ror	r25
    7b32:	87 95       	ror	r24
    7b34:	08 95       	ret

00007b36 <__fixsfsi>:
    7b36:	04 d0       	rcall	.+8      	; 0x7b40 <__fixunssfsi>
    7b38:	68 94       	set
    7b3a:	b1 11       	cpse	r27, r1
    7b3c:	b5 c0       	rjmp	.+362    	; 0x7ca8 <__fp_szero>
    7b3e:	08 95       	ret

00007b40 <__fixunssfsi>:
    7b40:	98 d0       	rcall	.+304    	; 0x7c72 <__fp_splitA>
    7b42:	88 f0       	brcs	.+34     	; 0x7b66 <__fixunssfsi+0x26>
    7b44:	9f 57       	subi	r25, 0x7F	; 127
    7b46:	90 f0       	brcs	.+36     	; 0x7b6c <__fixunssfsi+0x2c>
    7b48:	b9 2f       	mov	r27, r25
    7b4a:	99 27       	eor	r25, r25
    7b4c:	b7 51       	subi	r27, 0x17	; 23
    7b4e:	a0 f0       	brcs	.+40     	; 0x7b78 <__fixunssfsi+0x38>
    7b50:	d1 f0       	breq	.+52     	; 0x7b86 <__fixunssfsi+0x46>
    7b52:	66 0f       	add	r22, r22
    7b54:	77 1f       	adc	r23, r23
    7b56:	88 1f       	adc	r24, r24
    7b58:	99 1f       	adc	r25, r25
    7b5a:	1a f0       	brmi	.+6      	; 0x7b62 <__fixunssfsi+0x22>
    7b5c:	ba 95       	dec	r27
    7b5e:	c9 f7       	brne	.-14     	; 0x7b52 <__fixunssfsi+0x12>
    7b60:	12 c0       	rjmp	.+36     	; 0x7b86 <__fixunssfsi+0x46>
    7b62:	b1 30       	cpi	r27, 0x01	; 1
    7b64:	81 f0       	breq	.+32     	; 0x7b86 <__fixunssfsi+0x46>
    7b66:	9f d0       	rcall	.+318    	; 0x7ca6 <__fp_zero>
    7b68:	b1 e0       	ldi	r27, 0x01	; 1
    7b6a:	08 95       	ret
    7b6c:	9c c0       	rjmp	.+312    	; 0x7ca6 <__fp_zero>
    7b6e:	67 2f       	mov	r22, r23
    7b70:	78 2f       	mov	r23, r24
    7b72:	88 27       	eor	r24, r24
    7b74:	b8 5f       	subi	r27, 0xF8	; 248
    7b76:	39 f0       	breq	.+14     	; 0x7b86 <__fixunssfsi+0x46>
    7b78:	b9 3f       	cpi	r27, 0xF9	; 249
    7b7a:	cc f3       	brlt	.-14     	; 0x7b6e <__fixunssfsi+0x2e>
    7b7c:	86 95       	lsr	r24
    7b7e:	77 95       	ror	r23
    7b80:	67 95       	ror	r22
    7b82:	b3 95       	inc	r27
    7b84:	d9 f7       	brne	.-10     	; 0x7b7c <__fixunssfsi+0x3c>
    7b86:	3e f4       	brtc	.+14     	; 0x7b96 <__fixunssfsi+0x56>
    7b88:	90 95       	com	r25
    7b8a:	80 95       	com	r24
    7b8c:	70 95       	com	r23
    7b8e:	61 95       	neg	r22
    7b90:	7f 4f       	sbci	r23, 0xFF	; 255
    7b92:	8f 4f       	sbci	r24, 0xFF	; 255
    7b94:	9f 4f       	sbci	r25, 0xFF	; 255
    7b96:	08 95       	ret

00007b98 <__floatunsisf>:
    7b98:	e8 94       	clt
    7b9a:	09 c0       	rjmp	.+18     	; 0x7bae <__floatsisf+0x12>

00007b9c <__floatsisf>:
    7b9c:	97 fb       	bst	r25, 7
    7b9e:	3e f4       	brtc	.+14     	; 0x7bae <__floatsisf+0x12>
    7ba0:	90 95       	com	r25
    7ba2:	80 95       	com	r24
    7ba4:	70 95       	com	r23
    7ba6:	61 95       	neg	r22
    7ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    7baa:	8f 4f       	sbci	r24, 0xFF	; 255
    7bac:	9f 4f       	sbci	r25, 0xFF	; 255
    7bae:	99 23       	and	r25, r25
    7bb0:	a9 f0       	breq	.+42     	; 0x7bdc <__floatsisf+0x40>
    7bb2:	f9 2f       	mov	r31, r25
    7bb4:	96 e9       	ldi	r25, 0x96	; 150
    7bb6:	bb 27       	eor	r27, r27
    7bb8:	93 95       	inc	r25
    7bba:	f6 95       	lsr	r31
    7bbc:	87 95       	ror	r24
    7bbe:	77 95       	ror	r23
    7bc0:	67 95       	ror	r22
    7bc2:	b7 95       	ror	r27
    7bc4:	f1 11       	cpse	r31, r1
    7bc6:	f8 cf       	rjmp	.-16     	; 0x7bb8 <__floatsisf+0x1c>
    7bc8:	fa f4       	brpl	.+62     	; 0x7c08 <__floatsisf+0x6c>
    7bca:	bb 0f       	add	r27, r27
    7bcc:	11 f4       	brne	.+4      	; 0x7bd2 <__floatsisf+0x36>
    7bce:	60 ff       	sbrs	r22, 0
    7bd0:	1b c0       	rjmp	.+54     	; 0x7c08 <__floatsisf+0x6c>
    7bd2:	6f 5f       	subi	r22, 0xFF	; 255
    7bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    7bd6:	8f 4f       	sbci	r24, 0xFF	; 255
    7bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    7bda:	16 c0       	rjmp	.+44     	; 0x7c08 <__floatsisf+0x6c>
    7bdc:	88 23       	and	r24, r24
    7bde:	11 f0       	breq	.+4      	; 0x7be4 <__floatsisf+0x48>
    7be0:	96 e9       	ldi	r25, 0x96	; 150
    7be2:	11 c0       	rjmp	.+34     	; 0x7c06 <__floatsisf+0x6a>
    7be4:	77 23       	and	r23, r23
    7be6:	21 f0       	breq	.+8      	; 0x7bf0 <__floatsisf+0x54>
    7be8:	9e e8       	ldi	r25, 0x8E	; 142
    7bea:	87 2f       	mov	r24, r23
    7bec:	76 2f       	mov	r23, r22
    7bee:	05 c0       	rjmp	.+10     	; 0x7bfa <__floatsisf+0x5e>
    7bf0:	66 23       	and	r22, r22
    7bf2:	71 f0       	breq	.+28     	; 0x7c10 <__floatsisf+0x74>
    7bf4:	96 e8       	ldi	r25, 0x86	; 134
    7bf6:	86 2f       	mov	r24, r22
    7bf8:	70 e0       	ldi	r23, 0x00	; 0
    7bfa:	60 e0       	ldi	r22, 0x00	; 0
    7bfc:	2a f0       	brmi	.+10     	; 0x7c08 <__floatsisf+0x6c>
    7bfe:	9a 95       	dec	r25
    7c00:	66 0f       	add	r22, r22
    7c02:	77 1f       	adc	r23, r23
    7c04:	88 1f       	adc	r24, r24
    7c06:	da f7       	brpl	.-10     	; 0x7bfe <__floatsisf+0x62>
    7c08:	88 0f       	add	r24, r24
    7c0a:	96 95       	lsr	r25
    7c0c:	87 95       	ror	r24
    7c0e:	97 f9       	bld	r25, 7
    7c10:	08 95       	ret

00007c12 <__fp_inf>:
    7c12:	97 f9       	bld	r25, 7
    7c14:	9f 67       	ori	r25, 0x7F	; 127
    7c16:	80 e8       	ldi	r24, 0x80	; 128
    7c18:	70 e0       	ldi	r23, 0x00	; 0
    7c1a:	60 e0       	ldi	r22, 0x00	; 0
    7c1c:	08 95       	ret

00007c1e <__fp_nan>:
    7c1e:	9f ef       	ldi	r25, 0xFF	; 255
    7c20:	80 ec       	ldi	r24, 0xC0	; 192
    7c22:	08 95       	ret

00007c24 <__fp_pscA>:
    7c24:	00 24       	eor	r0, r0
    7c26:	0a 94       	dec	r0
    7c28:	16 16       	cp	r1, r22
    7c2a:	17 06       	cpc	r1, r23
    7c2c:	18 06       	cpc	r1, r24
    7c2e:	09 06       	cpc	r0, r25
    7c30:	08 95       	ret

00007c32 <__fp_pscB>:
    7c32:	00 24       	eor	r0, r0
    7c34:	0a 94       	dec	r0
    7c36:	12 16       	cp	r1, r18
    7c38:	13 06       	cpc	r1, r19
    7c3a:	14 06       	cpc	r1, r20
    7c3c:	05 06       	cpc	r0, r21
    7c3e:	08 95       	ret

00007c40 <__fp_round>:
    7c40:	09 2e       	mov	r0, r25
    7c42:	03 94       	inc	r0
    7c44:	00 0c       	add	r0, r0
    7c46:	11 f4       	brne	.+4      	; 0x7c4c <__fp_round+0xc>
    7c48:	88 23       	and	r24, r24
    7c4a:	52 f0       	brmi	.+20     	; 0x7c60 <__fp_round+0x20>
    7c4c:	bb 0f       	add	r27, r27
    7c4e:	40 f4       	brcc	.+16     	; 0x7c60 <__fp_round+0x20>
    7c50:	bf 2b       	or	r27, r31
    7c52:	11 f4       	brne	.+4      	; 0x7c58 <__fp_round+0x18>
    7c54:	60 ff       	sbrs	r22, 0
    7c56:	04 c0       	rjmp	.+8      	; 0x7c60 <__fp_round+0x20>
    7c58:	6f 5f       	subi	r22, 0xFF	; 255
    7c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    7c5c:	8f 4f       	sbci	r24, 0xFF	; 255
    7c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    7c60:	08 95       	ret

00007c62 <__fp_split3>:
    7c62:	57 fd       	sbrc	r21, 7
    7c64:	90 58       	subi	r25, 0x80	; 128
    7c66:	44 0f       	add	r20, r20
    7c68:	55 1f       	adc	r21, r21
    7c6a:	59 f0       	breq	.+22     	; 0x7c82 <__fp_splitA+0x10>
    7c6c:	5f 3f       	cpi	r21, 0xFF	; 255
    7c6e:	71 f0       	breq	.+28     	; 0x7c8c <__fp_splitA+0x1a>
    7c70:	47 95       	ror	r20

00007c72 <__fp_splitA>:
    7c72:	88 0f       	add	r24, r24
    7c74:	97 fb       	bst	r25, 7
    7c76:	99 1f       	adc	r25, r25
    7c78:	61 f0       	breq	.+24     	; 0x7c92 <__fp_splitA+0x20>
    7c7a:	9f 3f       	cpi	r25, 0xFF	; 255
    7c7c:	79 f0       	breq	.+30     	; 0x7c9c <__fp_splitA+0x2a>
    7c7e:	87 95       	ror	r24
    7c80:	08 95       	ret
    7c82:	12 16       	cp	r1, r18
    7c84:	13 06       	cpc	r1, r19
    7c86:	14 06       	cpc	r1, r20
    7c88:	55 1f       	adc	r21, r21
    7c8a:	f2 cf       	rjmp	.-28     	; 0x7c70 <__fp_split3+0xe>
    7c8c:	46 95       	lsr	r20
    7c8e:	f1 df       	rcall	.-30     	; 0x7c72 <__fp_splitA>
    7c90:	08 c0       	rjmp	.+16     	; 0x7ca2 <__fp_splitA+0x30>
    7c92:	16 16       	cp	r1, r22
    7c94:	17 06       	cpc	r1, r23
    7c96:	18 06       	cpc	r1, r24
    7c98:	99 1f       	adc	r25, r25
    7c9a:	f1 cf       	rjmp	.-30     	; 0x7c7e <__fp_splitA+0xc>
    7c9c:	86 95       	lsr	r24
    7c9e:	71 05       	cpc	r23, r1
    7ca0:	61 05       	cpc	r22, r1
    7ca2:	08 94       	sec
    7ca4:	08 95       	ret

00007ca6 <__fp_zero>:
    7ca6:	e8 94       	clt

00007ca8 <__fp_szero>:
    7ca8:	bb 27       	eor	r27, r27
    7caa:	66 27       	eor	r22, r22
    7cac:	77 27       	eor	r23, r23
    7cae:	cb 01       	movw	r24, r22
    7cb0:	97 f9       	bld	r25, 7
    7cb2:	08 95       	ret

00007cb4 <__mulsf3>:
    7cb4:	0b d0       	rcall	.+22     	; 0x7ccc <__mulsf3x>
    7cb6:	c4 cf       	rjmp	.-120    	; 0x7c40 <__fp_round>
    7cb8:	b5 df       	rcall	.-150    	; 0x7c24 <__fp_pscA>
    7cba:	28 f0       	brcs	.+10     	; 0x7cc6 <__mulsf3+0x12>
    7cbc:	ba df       	rcall	.-140    	; 0x7c32 <__fp_pscB>
    7cbe:	18 f0       	brcs	.+6      	; 0x7cc6 <__mulsf3+0x12>
    7cc0:	95 23       	and	r25, r21
    7cc2:	09 f0       	breq	.+2      	; 0x7cc6 <__mulsf3+0x12>
    7cc4:	a6 cf       	rjmp	.-180    	; 0x7c12 <__fp_inf>
    7cc6:	ab cf       	rjmp	.-170    	; 0x7c1e <__fp_nan>
    7cc8:	11 24       	eor	r1, r1
    7cca:	ee cf       	rjmp	.-36     	; 0x7ca8 <__fp_szero>

00007ccc <__mulsf3x>:
    7ccc:	ca df       	rcall	.-108    	; 0x7c62 <__fp_split3>
    7cce:	a0 f3       	brcs	.-24     	; 0x7cb8 <__mulsf3+0x4>

00007cd0 <__mulsf3_pse>:
    7cd0:	95 9f       	mul	r25, r21
    7cd2:	d1 f3       	breq	.-12     	; 0x7cc8 <__mulsf3+0x14>
    7cd4:	95 0f       	add	r25, r21
    7cd6:	50 e0       	ldi	r21, 0x00	; 0
    7cd8:	55 1f       	adc	r21, r21
    7cda:	62 9f       	mul	r22, r18
    7cdc:	f0 01       	movw	r30, r0
    7cde:	72 9f       	mul	r23, r18
    7ce0:	bb 27       	eor	r27, r27
    7ce2:	f0 0d       	add	r31, r0
    7ce4:	b1 1d       	adc	r27, r1
    7ce6:	63 9f       	mul	r22, r19
    7ce8:	aa 27       	eor	r26, r26
    7cea:	f0 0d       	add	r31, r0
    7cec:	b1 1d       	adc	r27, r1
    7cee:	aa 1f       	adc	r26, r26
    7cf0:	64 9f       	mul	r22, r20
    7cf2:	66 27       	eor	r22, r22
    7cf4:	b0 0d       	add	r27, r0
    7cf6:	a1 1d       	adc	r26, r1
    7cf8:	66 1f       	adc	r22, r22
    7cfa:	82 9f       	mul	r24, r18
    7cfc:	22 27       	eor	r18, r18
    7cfe:	b0 0d       	add	r27, r0
    7d00:	a1 1d       	adc	r26, r1
    7d02:	62 1f       	adc	r22, r18
    7d04:	73 9f       	mul	r23, r19
    7d06:	b0 0d       	add	r27, r0
    7d08:	a1 1d       	adc	r26, r1
    7d0a:	62 1f       	adc	r22, r18
    7d0c:	83 9f       	mul	r24, r19
    7d0e:	a0 0d       	add	r26, r0
    7d10:	61 1d       	adc	r22, r1
    7d12:	22 1f       	adc	r18, r18
    7d14:	74 9f       	mul	r23, r20
    7d16:	33 27       	eor	r19, r19
    7d18:	a0 0d       	add	r26, r0
    7d1a:	61 1d       	adc	r22, r1
    7d1c:	23 1f       	adc	r18, r19
    7d1e:	84 9f       	mul	r24, r20
    7d20:	60 0d       	add	r22, r0
    7d22:	21 1d       	adc	r18, r1
    7d24:	82 2f       	mov	r24, r18
    7d26:	76 2f       	mov	r23, r22
    7d28:	6a 2f       	mov	r22, r26
    7d2a:	11 24       	eor	r1, r1
    7d2c:	9f 57       	subi	r25, 0x7F	; 127
    7d2e:	50 40       	sbci	r21, 0x00	; 0
    7d30:	8a f0       	brmi	.+34     	; 0x7d54 <__mulsf3_pse+0x84>
    7d32:	e1 f0       	breq	.+56     	; 0x7d6c <__mulsf3_pse+0x9c>
    7d34:	88 23       	and	r24, r24
    7d36:	4a f0       	brmi	.+18     	; 0x7d4a <__mulsf3_pse+0x7a>
    7d38:	ee 0f       	add	r30, r30
    7d3a:	ff 1f       	adc	r31, r31
    7d3c:	bb 1f       	adc	r27, r27
    7d3e:	66 1f       	adc	r22, r22
    7d40:	77 1f       	adc	r23, r23
    7d42:	88 1f       	adc	r24, r24
    7d44:	91 50       	subi	r25, 0x01	; 1
    7d46:	50 40       	sbci	r21, 0x00	; 0
    7d48:	a9 f7       	brne	.-22     	; 0x7d34 <__mulsf3_pse+0x64>
    7d4a:	9e 3f       	cpi	r25, 0xFE	; 254
    7d4c:	51 05       	cpc	r21, r1
    7d4e:	70 f0       	brcs	.+28     	; 0x7d6c <__mulsf3_pse+0x9c>
    7d50:	60 cf       	rjmp	.-320    	; 0x7c12 <__fp_inf>
    7d52:	aa cf       	rjmp	.-172    	; 0x7ca8 <__fp_szero>
    7d54:	5f 3f       	cpi	r21, 0xFF	; 255
    7d56:	ec f3       	brlt	.-6      	; 0x7d52 <__mulsf3_pse+0x82>
    7d58:	98 3e       	cpi	r25, 0xE8	; 232
    7d5a:	dc f3       	brlt	.-10     	; 0x7d52 <__mulsf3_pse+0x82>
    7d5c:	86 95       	lsr	r24
    7d5e:	77 95       	ror	r23
    7d60:	67 95       	ror	r22
    7d62:	b7 95       	ror	r27
    7d64:	f7 95       	ror	r31
    7d66:	e7 95       	ror	r30
    7d68:	9f 5f       	subi	r25, 0xFF	; 255
    7d6a:	c1 f7       	brne	.-16     	; 0x7d5c <__mulsf3_pse+0x8c>
    7d6c:	fe 2b       	or	r31, r30
    7d6e:	88 0f       	add	r24, r24
    7d70:	91 1d       	adc	r25, r1
    7d72:	96 95       	lsr	r25
    7d74:	87 95       	ror	r24
    7d76:	97 f9       	bld	r25, 7
    7d78:	08 95       	ret

00007d7a <__divmodhi4>:
    7d7a:	97 fb       	bst	r25, 7
    7d7c:	07 2e       	mov	r0, r23
    7d7e:	16 f4       	brtc	.+4      	; 0x7d84 <__divmodhi4+0xa>
    7d80:	00 94       	com	r0
    7d82:	06 d0       	rcall	.+12     	; 0x7d90 <__divmodhi4_neg1>
    7d84:	77 fd       	sbrc	r23, 7
    7d86:	08 d0       	rcall	.+16     	; 0x7d98 <__divmodhi4_neg2>
    7d88:	4c d0       	rcall	.+152    	; 0x7e22 <__udivmodhi4>
    7d8a:	07 fc       	sbrc	r0, 7
    7d8c:	05 d0       	rcall	.+10     	; 0x7d98 <__divmodhi4_neg2>
    7d8e:	3e f4       	brtc	.+14     	; 0x7d9e <__divmodhi4_exit>

00007d90 <__divmodhi4_neg1>:
    7d90:	90 95       	com	r25
    7d92:	81 95       	neg	r24
    7d94:	9f 4f       	sbci	r25, 0xFF	; 255
    7d96:	08 95       	ret

00007d98 <__divmodhi4_neg2>:
    7d98:	70 95       	com	r23
    7d9a:	61 95       	neg	r22
    7d9c:	7f 4f       	sbci	r23, 0xFF	; 255

00007d9e <__divmodhi4_exit>:
    7d9e:	08 95       	ret

00007da0 <__udivmodsi4>:
    7da0:	a1 e2       	ldi	r26, 0x21	; 33
    7da2:	1a 2e       	mov	r1, r26
    7da4:	aa 1b       	sub	r26, r26
    7da6:	bb 1b       	sub	r27, r27
    7da8:	fd 01       	movw	r30, r26
    7daa:	0d c0       	rjmp	.+26     	; 0x7dc6 <__udivmodsi4_ep>

00007dac <__udivmodsi4_loop>:
    7dac:	aa 1f       	adc	r26, r26
    7dae:	bb 1f       	adc	r27, r27
    7db0:	ee 1f       	adc	r30, r30
    7db2:	ff 1f       	adc	r31, r31
    7db4:	a2 17       	cp	r26, r18
    7db6:	b3 07       	cpc	r27, r19
    7db8:	e4 07       	cpc	r30, r20
    7dba:	f5 07       	cpc	r31, r21
    7dbc:	20 f0       	brcs	.+8      	; 0x7dc6 <__udivmodsi4_ep>
    7dbe:	a2 1b       	sub	r26, r18
    7dc0:	b3 0b       	sbc	r27, r19
    7dc2:	e4 0b       	sbc	r30, r20
    7dc4:	f5 0b       	sbc	r31, r21

00007dc6 <__udivmodsi4_ep>:
    7dc6:	66 1f       	adc	r22, r22
    7dc8:	77 1f       	adc	r23, r23
    7dca:	88 1f       	adc	r24, r24
    7dcc:	99 1f       	adc	r25, r25
    7dce:	1a 94       	dec	r1
    7dd0:	69 f7       	brne	.-38     	; 0x7dac <__udivmodsi4_loop>
    7dd2:	60 95       	com	r22
    7dd4:	70 95       	com	r23
    7dd6:	80 95       	com	r24
    7dd8:	90 95       	com	r25
    7dda:	9b 01       	movw	r18, r22
    7ddc:	ac 01       	movw	r20, r24
    7dde:	bd 01       	movw	r22, r26
    7de0:	cf 01       	movw	r24, r30
    7de2:	08 95       	ret

00007de4 <__tablejump2__>:
    7de4:	ee 0f       	add	r30, r30
    7de6:	ff 1f       	adc	r31, r31

00007de8 <__tablejump__>:
    7de8:	05 90       	lpm	r0, Z+
    7dea:	f4 91       	lpm	r31, Z
    7dec:	e0 2d       	mov	r30, r0
    7dee:	09 94       	ijmp

00007df0 <__umulhisi3>:
    7df0:	a2 9f       	mul	r26, r18
    7df2:	b0 01       	movw	r22, r0
    7df4:	b3 9f       	mul	r27, r19
    7df6:	c0 01       	movw	r24, r0
    7df8:	a3 9f       	mul	r26, r19
    7dfa:	70 0d       	add	r23, r0
    7dfc:	81 1d       	adc	r24, r1
    7dfe:	11 24       	eor	r1, r1
    7e00:	91 1d       	adc	r25, r1
    7e02:	b2 9f       	mul	r27, r18
    7e04:	70 0d       	add	r23, r0
    7e06:	81 1d       	adc	r24, r1
    7e08:	11 24       	eor	r1, r1
    7e0a:	91 1d       	adc	r25, r1
    7e0c:	08 95       	ret

00007e0e <__muluhisi3>:
    7e0e:	f0 df       	rcall	.-32     	; 0x7df0 <__umulhisi3>
    7e10:	a5 9f       	mul	r26, r21
    7e12:	90 0d       	add	r25, r0
    7e14:	b4 9f       	mul	r27, r20
    7e16:	90 0d       	add	r25, r0
    7e18:	a4 9f       	mul	r26, r20
    7e1a:	80 0d       	add	r24, r0
    7e1c:	91 1d       	adc	r25, r1
    7e1e:	11 24       	eor	r1, r1
    7e20:	08 95       	ret

00007e22 <__udivmodhi4>:
    7e22:	aa 1b       	sub	r26, r26
    7e24:	bb 1b       	sub	r27, r27
    7e26:	51 e1       	ldi	r21, 0x11	; 17
    7e28:	07 c0       	rjmp	.+14     	; 0x7e38 <__udivmodhi4_ep>

00007e2a <__udivmodhi4_loop>:
    7e2a:	aa 1f       	adc	r26, r26
    7e2c:	bb 1f       	adc	r27, r27
    7e2e:	a6 17       	cp	r26, r22
    7e30:	b7 07       	cpc	r27, r23
    7e32:	10 f0       	brcs	.+4      	; 0x7e38 <__udivmodhi4_ep>
    7e34:	a6 1b       	sub	r26, r22
    7e36:	b7 0b       	sbc	r27, r23

00007e38 <__udivmodhi4_ep>:
    7e38:	88 1f       	adc	r24, r24
    7e3a:	99 1f       	adc	r25, r25
    7e3c:	5a 95       	dec	r21
    7e3e:	a9 f7       	brne	.-22     	; 0x7e2a <__udivmodhi4_loop>
    7e40:	80 95       	com	r24
    7e42:	90 95       	com	r25
    7e44:	bc 01       	movw	r22, r24
    7e46:	cd 01       	movw	r24, r26
    7e48:	08 95       	ret

00007e4a <strcpy>:
    7e4a:	fb 01       	movw	r30, r22
    7e4c:	dc 01       	movw	r26, r24
    7e4e:	01 90       	ld	r0, Z+
    7e50:	0d 92       	st	X+, r0
    7e52:	00 20       	and	r0, r0
    7e54:	e1 f7       	brne	.-8      	; 0x7e4e <strcpy+0x4>
    7e56:	08 95       	ret

00007e58 <strstr>:
    7e58:	fb 01       	movw	r30, r22
    7e5a:	51 91       	ld	r21, Z+
    7e5c:	55 23       	and	r21, r21
    7e5e:	a9 f0       	breq	.+42     	; 0x7e8a <strstr+0x32>
    7e60:	bf 01       	movw	r22, r30
    7e62:	dc 01       	movw	r26, r24
    7e64:	4d 91       	ld	r20, X+
    7e66:	45 17       	cp	r20, r21
    7e68:	41 11       	cpse	r20, r1
    7e6a:	e1 f7       	brne	.-8      	; 0x7e64 <strstr+0xc>
    7e6c:	59 f4       	brne	.+22     	; 0x7e84 <strstr+0x2c>
    7e6e:	cd 01       	movw	r24, r26
    7e70:	01 90       	ld	r0, Z+
    7e72:	00 20       	and	r0, r0
    7e74:	49 f0       	breq	.+18     	; 0x7e88 <strstr+0x30>
    7e76:	4d 91       	ld	r20, X+
    7e78:	40 15       	cp	r20, r0
    7e7a:	41 11       	cpse	r20, r1
    7e7c:	c9 f3       	breq	.-14     	; 0x7e70 <strstr+0x18>
    7e7e:	fb 01       	movw	r30, r22
    7e80:	41 11       	cpse	r20, r1
    7e82:	ef cf       	rjmp	.-34     	; 0x7e62 <strstr+0xa>
    7e84:	81 e0       	ldi	r24, 0x01	; 1
    7e86:	90 e0       	ldi	r25, 0x00	; 0
    7e88:	01 97       	sbiw	r24, 0x01	; 1
    7e8a:	08 95       	ret

00007e8c <printf>:
    7e8c:	cf 93       	push	r28
    7e8e:	df 93       	push	r29
    7e90:	cd b7       	in	r28, 0x3d	; 61
    7e92:	de b7       	in	r29, 0x3e	; 62
    7e94:	fe 01       	movw	r30, r28
    7e96:	35 96       	adiw	r30, 0x05	; 5
    7e98:	61 91       	ld	r22, Z+
    7e9a:	71 91       	ld	r23, Z+
    7e9c:	af 01       	movw	r20, r30
    7e9e:	80 91 85 2d 	lds	r24, 0x2D85
    7ea2:	90 91 86 2d 	lds	r25, 0x2D86
    7ea6:	58 d0       	rcall	.+176    	; 0x7f58 <vfprintf>
    7ea8:	df 91       	pop	r29
    7eaa:	cf 91       	pop	r28
    7eac:	08 95       	ret

00007eae <puts>:
    7eae:	0f 93       	push	r16
    7eb0:	1f 93       	push	r17
    7eb2:	cf 93       	push	r28
    7eb4:	df 93       	push	r29
    7eb6:	e0 91 85 2d 	lds	r30, 0x2D85
    7eba:	f0 91 86 2d 	lds	r31, 0x2D86
    7ebe:	23 81       	ldd	r18, Z+3	; 0x03
    7ec0:	21 ff       	sbrs	r18, 1
    7ec2:	1b c0       	rjmp	.+54     	; 0x7efa <puts+0x4c>
    7ec4:	ec 01       	movw	r28, r24
    7ec6:	00 e0       	ldi	r16, 0x00	; 0
    7ec8:	10 e0       	ldi	r17, 0x00	; 0
    7eca:	89 91       	ld	r24, Y+
    7ecc:	60 91 85 2d 	lds	r22, 0x2D85
    7ed0:	70 91 86 2d 	lds	r23, 0x2D86
    7ed4:	db 01       	movw	r26, r22
    7ed6:	18 96       	adiw	r26, 0x08	; 8
    7ed8:	ed 91       	ld	r30, X+
    7eda:	fc 91       	ld	r31, X
    7edc:	19 97       	sbiw	r26, 0x09	; 9
    7ede:	88 23       	and	r24, r24
    7ee0:	31 f0       	breq	.+12     	; 0x7eee <puts+0x40>
    7ee2:	09 95       	icall
    7ee4:	89 2b       	or	r24, r25
    7ee6:	89 f3       	breq	.-30     	; 0x7eca <puts+0x1c>
    7ee8:	0f ef       	ldi	r16, 0xFF	; 255
    7eea:	1f ef       	ldi	r17, 0xFF	; 255
    7eec:	ee cf       	rjmp	.-36     	; 0x7eca <puts+0x1c>
    7eee:	8a e0       	ldi	r24, 0x0A	; 10
    7ef0:	09 95       	icall
    7ef2:	89 2b       	or	r24, r25
    7ef4:	11 f4       	brne	.+4      	; 0x7efa <puts+0x4c>
    7ef6:	c8 01       	movw	r24, r16
    7ef8:	02 c0       	rjmp	.+4      	; 0x7efe <puts+0x50>
    7efa:	8f ef       	ldi	r24, 0xFF	; 255
    7efc:	9f ef       	ldi	r25, 0xFF	; 255
    7efe:	df 91       	pop	r29
    7f00:	cf 91       	pop	r28
    7f02:	1f 91       	pop	r17
    7f04:	0f 91       	pop	r16
    7f06:	08 95       	ret

00007f08 <sprintf>:
    7f08:	0f 93       	push	r16
    7f0a:	1f 93       	push	r17
    7f0c:	cf 93       	push	r28
    7f0e:	df 93       	push	r29
    7f10:	cd b7       	in	r28, 0x3d	; 61
    7f12:	de b7       	in	r29, 0x3e	; 62
    7f14:	2e 97       	sbiw	r28, 0x0e	; 14
    7f16:	cd bf       	out	0x3d, r28	; 61
    7f18:	de bf       	out	0x3e, r29	; 62
    7f1a:	0d 89       	ldd	r16, Y+21	; 0x15
    7f1c:	1e 89       	ldd	r17, Y+22	; 0x16
    7f1e:	86 e0       	ldi	r24, 0x06	; 6
    7f20:	8c 83       	std	Y+4, r24	; 0x04
    7f22:	09 83       	std	Y+1, r16	; 0x01
    7f24:	1a 83       	std	Y+2, r17	; 0x02
    7f26:	8f ef       	ldi	r24, 0xFF	; 255
    7f28:	9f e7       	ldi	r25, 0x7F	; 127
    7f2a:	8d 83       	std	Y+5, r24	; 0x05
    7f2c:	9e 83       	std	Y+6, r25	; 0x06
    7f2e:	ae 01       	movw	r20, r28
    7f30:	47 5e       	subi	r20, 0xE7	; 231
    7f32:	5f 4f       	sbci	r21, 0xFF	; 255
    7f34:	6f 89       	ldd	r22, Y+23	; 0x17
    7f36:	78 8d       	ldd	r23, Y+24	; 0x18
    7f38:	ce 01       	movw	r24, r28
    7f3a:	01 96       	adiw	r24, 0x01	; 1
    7f3c:	0d d0       	rcall	.+26     	; 0x7f58 <vfprintf>
    7f3e:	ef 81       	ldd	r30, Y+7	; 0x07
    7f40:	f8 85       	ldd	r31, Y+8	; 0x08
    7f42:	e0 0f       	add	r30, r16
    7f44:	f1 1f       	adc	r31, r17
    7f46:	10 82       	st	Z, r1
    7f48:	2e 96       	adiw	r28, 0x0e	; 14
    7f4a:	cd bf       	out	0x3d, r28	; 61
    7f4c:	de bf       	out	0x3e, r29	; 62
    7f4e:	df 91       	pop	r29
    7f50:	cf 91       	pop	r28
    7f52:	1f 91       	pop	r17
    7f54:	0f 91       	pop	r16
    7f56:	08 95       	ret

00007f58 <vfprintf>:
    7f58:	2f 92       	push	r2
    7f5a:	3f 92       	push	r3
    7f5c:	4f 92       	push	r4
    7f5e:	5f 92       	push	r5
    7f60:	6f 92       	push	r6
    7f62:	7f 92       	push	r7
    7f64:	8f 92       	push	r8
    7f66:	9f 92       	push	r9
    7f68:	af 92       	push	r10
    7f6a:	bf 92       	push	r11
    7f6c:	cf 92       	push	r12
    7f6e:	df 92       	push	r13
    7f70:	ef 92       	push	r14
    7f72:	ff 92       	push	r15
    7f74:	0f 93       	push	r16
    7f76:	1f 93       	push	r17
    7f78:	cf 93       	push	r28
    7f7a:	df 93       	push	r29
    7f7c:	cd b7       	in	r28, 0x3d	; 61
    7f7e:	de b7       	in	r29, 0x3e	; 62
    7f80:	2c 97       	sbiw	r28, 0x0c	; 12
    7f82:	cd bf       	out	0x3d, r28	; 61
    7f84:	de bf       	out	0x3e, r29	; 62
    7f86:	7c 01       	movw	r14, r24
    7f88:	6b 01       	movw	r12, r22
    7f8a:	8a 01       	movw	r16, r20
    7f8c:	fc 01       	movw	r30, r24
    7f8e:	16 82       	std	Z+6, r1	; 0x06
    7f90:	17 82       	std	Z+7, r1	; 0x07
    7f92:	83 81       	ldd	r24, Z+3	; 0x03
    7f94:	81 ff       	sbrs	r24, 1
    7f96:	b0 c1       	rjmp	.+864    	; 0x82f8 <vfprintf+0x3a0>
    7f98:	ce 01       	movw	r24, r28
    7f9a:	01 96       	adiw	r24, 0x01	; 1
    7f9c:	4c 01       	movw	r8, r24
    7f9e:	f7 01       	movw	r30, r14
    7fa0:	93 81       	ldd	r25, Z+3	; 0x03
    7fa2:	f6 01       	movw	r30, r12
    7fa4:	93 fd       	sbrc	r25, 3
    7fa6:	85 91       	lpm	r24, Z+
    7fa8:	93 ff       	sbrs	r25, 3
    7faa:	81 91       	ld	r24, Z+
    7fac:	6f 01       	movw	r12, r30
    7fae:	88 23       	and	r24, r24
    7fb0:	09 f4       	brne	.+2      	; 0x7fb4 <vfprintf+0x5c>
    7fb2:	9e c1       	rjmp	.+828    	; 0x82f0 <vfprintf+0x398>
    7fb4:	85 32       	cpi	r24, 0x25	; 37
    7fb6:	39 f4       	brne	.+14     	; 0x7fc6 <vfprintf+0x6e>
    7fb8:	93 fd       	sbrc	r25, 3
    7fba:	85 91       	lpm	r24, Z+
    7fbc:	93 ff       	sbrs	r25, 3
    7fbe:	81 91       	ld	r24, Z+
    7fc0:	6f 01       	movw	r12, r30
    7fc2:	85 32       	cpi	r24, 0x25	; 37
    7fc4:	21 f4       	brne	.+8      	; 0x7fce <vfprintf+0x76>
    7fc6:	b7 01       	movw	r22, r14
    7fc8:	90 e0       	ldi	r25, 0x00	; 0
    7fca:	c4 d1       	rcall	.+904    	; 0x8354 <fputc>
    7fcc:	e8 cf       	rjmp	.-48     	; 0x7f9e <vfprintf+0x46>
    7fce:	51 2c       	mov	r5, r1
    7fd0:	31 2c       	mov	r3, r1
    7fd2:	20 e0       	ldi	r18, 0x00	; 0
    7fd4:	20 32       	cpi	r18, 0x20	; 32
    7fd6:	a0 f4       	brcc	.+40     	; 0x8000 <vfprintf+0xa8>
    7fd8:	8b 32       	cpi	r24, 0x2B	; 43
    7fda:	69 f0       	breq	.+26     	; 0x7ff6 <vfprintf+0x9e>
    7fdc:	30 f4       	brcc	.+12     	; 0x7fea <vfprintf+0x92>
    7fde:	80 32       	cpi	r24, 0x20	; 32
    7fe0:	59 f0       	breq	.+22     	; 0x7ff8 <vfprintf+0xa0>
    7fe2:	83 32       	cpi	r24, 0x23	; 35
    7fe4:	69 f4       	brne	.+26     	; 0x8000 <vfprintf+0xa8>
    7fe6:	20 61       	ori	r18, 0x10	; 16
    7fe8:	2c c0       	rjmp	.+88     	; 0x8042 <vfprintf+0xea>
    7fea:	8d 32       	cpi	r24, 0x2D	; 45
    7fec:	39 f0       	breq	.+14     	; 0x7ffc <vfprintf+0xa4>
    7fee:	80 33       	cpi	r24, 0x30	; 48
    7ff0:	39 f4       	brne	.+14     	; 0x8000 <vfprintf+0xa8>
    7ff2:	21 60       	ori	r18, 0x01	; 1
    7ff4:	26 c0       	rjmp	.+76     	; 0x8042 <vfprintf+0xea>
    7ff6:	22 60       	ori	r18, 0x02	; 2
    7ff8:	24 60       	ori	r18, 0x04	; 4
    7ffa:	23 c0       	rjmp	.+70     	; 0x8042 <vfprintf+0xea>
    7ffc:	28 60       	ori	r18, 0x08	; 8
    7ffe:	21 c0       	rjmp	.+66     	; 0x8042 <vfprintf+0xea>
    8000:	27 fd       	sbrc	r18, 7
    8002:	27 c0       	rjmp	.+78     	; 0x8052 <vfprintf+0xfa>
    8004:	30 ed       	ldi	r19, 0xD0	; 208
    8006:	38 0f       	add	r19, r24
    8008:	3a 30       	cpi	r19, 0x0A	; 10
    800a:	78 f4       	brcc	.+30     	; 0x802a <vfprintf+0xd2>
    800c:	26 ff       	sbrs	r18, 6
    800e:	06 c0       	rjmp	.+12     	; 0x801c <vfprintf+0xc4>
    8010:	fa e0       	ldi	r31, 0x0A	; 10
    8012:	5f 9e       	mul	r5, r31
    8014:	30 0d       	add	r19, r0
    8016:	11 24       	eor	r1, r1
    8018:	53 2e       	mov	r5, r19
    801a:	13 c0       	rjmp	.+38     	; 0x8042 <vfprintf+0xea>
    801c:	8a e0       	ldi	r24, 0x0A	; 10
    801e:	38 9e       	mul	r3, r24
    8020:	30 0d       	add	r19, r0
    8022:	11 24       	eor	r1, r1
    8024:	33 2e       	mov	r3, r19
    8026:	20 62       	ori	r18, 0x20	; 32
    8028:	0c c0       	rjmp	.+24     	; 0x8042 <vfprintf+0xea>
    802a:	8e 32       	cpi	r24, 0x2E	; 46
    802c:	21 f4       	brne	.+8      	; 0x8036 <vfprintf+0xde>
    802e:	26 fd       	sbrc	r18, 6
    8030:	5f c1       	rjmp	.+702    	; 0x82f0 <vfprintf+0x398>
    8032:	20 64       	ori	r18, 0x40	; 64
    8034:	06 c0       	rjmp	.+12     	; 0x8042 <vfprintf+0xea>
    8036:	8c 36       	cpi	r24, 0x6C	; 108
    8038:	11 f4       	brne	.+4      	; 0x803e <vfprintf+0xe6>
    803a:	20 68       	ori	r18, 0x80	; 128
    803c:	02 c0       	rjmp	.+4      	; 0x8042 <vfprintf+0xea>
    803e:	88 36       	cpi	r24, 0x68	; 104
    8040:	41 f4       	brne	.+16     	; 0x8052 <vfprintf+0xfa>
    8042:	f6 01       	movw	r30, r12
    8044:	93 fd       	sbrc	r25, 3
    8046:	85 91       	lpm	r24, Z+
    8048:	93 ff       	sbrs	r25, 3
    804a:	81 91       	ld	r24, Z+
    804c:	6f 01       	movw	r12, r30
    804e:	81 11       	cpse	r24, r1
    8050:	c1 cf       	rjmp	.-126    	; 0x7fd4 <vfprintf+0x7c>
    8052:	98 2f       	mov	r25, r24
    8054:	9f 7d       	andi	r25, 0xDF	; 223
    8056:	95 54       	subi	r25, 0x45	; 69
    8058:	93 30       	cpi	r25, 0x03	; 3
    805a:	28 f4       	brcc	.+10     	; 0x8066 <vfprintf+0x10e>
    805c:	0c 5f       	subi	r16, 0xFC	; 252
    805e:	1f 4f       	sbci	r17, 0xFF	; 255
    8060:	ff e3       	ldi	r31, 0x3F	; 63
    8062:	f9 83       	std	Y+1, r31	; 0x01
    8064:	0d c0       	rjmp	.+26     	; 0x8080 <vfprintf+0x128>
    8066:	83 36       	cpi	r24, 0x63	; 99
    8068:	31 f0       	breq	.+12     	; 0x8076 <vfprintf+0x11e>
    806a:	83 37       	cpi	r24, 0x73	; 115
    806c:	71 f0       	breq	.+28     	; 0x808a <vfprintf+0x132>
    806e:	83 35       	cpi	r24, 0x53	; 83
    8070:	09 f0       	breq	.+2      	; 0x8074 <vfprintf+0x11c>
    8072:	57 c0       	rjmp	.+174    	; 0x8122 <vfprintf+0x1ca>
    8074:	21 c0       	rjmp	.+66     	; 0x80b8 <vfprintf+0x160>
    8076:	f8 01       	movw	r30, r16
    8078:	80 81       	ld	r24, Z
    807a:	89 83       	std	Y+1, r24	; 0x01
    807c:	0e 5f       	subi	r16, 0xFE	; 254
    807e:	1f 4f       	sbci	r17, 0xFF	; 255
    8080:	44 24       	eor	r4, r4
    8082:	43 94       	inc	r4
    8084:	51 2c       	mov	r5, r1
    8086:	54 01       	movw	r10, r8
    8088:	14 c0       	rjmp	.+40     	; 0x80b2 <vfprintf+0x15a>
    808a:	38 01       	movw	r6, r16
    808c:	f2 e0       	ldi	r31, 0x02	; 2
    808e:	6f 0e       	add	r6, r31
    8090:	71 1c       	adc	r7, r1
    8092:	f8 01       	movw	r30, r16
    8094:	a0 80       	ld	r10, Z
    8096:	b1 80       	ldd	r11, Z+1	; 0x01
    8098:	26 ff       	sbrs	r18, 6
    809a:	03 c0       	rjmp	.+6      	; 0x80a2 <vfprintf+0x14a>
    809c:	65 2d       	mov	r22, r5
    809e:	70 e0       	ldi	r23, 0x00	; 0
    80a0:	02 c0       	rjmp	.+4      	; 0x80a6 <vfprintf+0x14e>
    80a2:	6f ef       	ldi	r22, 0xFF	; 255
    80a4:	7f ef       	ldi	r23, 0xFF	; 255
    80a6:	c5 01       	movw	r24, r10
    80a8:	2c 87       	std	Y+12, r18	; 0x0c
    80aa:	49 d1       	rcall	.+658    	; 0x833e <strnlen>
    80ac:	2c 01       	movw	r4, r24
    80ae:	83 01       	movw	r16, r6
    80b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    80b2:	2f 77       	andi	r18, 0x7F	; 127
    80b4:	22 2e       	mov	r2, r18
    80b6:	16 c0       	rjmp	.+44     	; 0x80e4 <vfprintf+0x18c>
    80b8:	38 01       	movw	r6, r16
    80ba:	f2 e0       	ldi	r31, 0x02	; 2
    80bc:	6f 0e       	add	r6, r31
    80be:	71 1c       	adc	r7, r1
    80c0:	f8 01       	movw	r30, r16
    80c2:	a0 80       	ld	r10, Z
    80c4:	b1 80       	ldd	r11, Z+1	; 0x01
    80c6:	26 ff       	sbrs	r18, 6
    80c8:	03 c0       	rjmp	.+6      	; 0x80d0 <vfprintf+0x178>
    80ca:	65 2d       	mov	r22, r5
    80cc:	70 e0       	ldi	r23, 0x00	; 0
    80ce:	02 c0       	rjmp	.+4      	; 0x80d4 <vfprintf+0x17c>
    80d0:	6f ef       	ldi	r22, 0xFF	; 255
    80d2:	7f ef       	ldi	r23, 0xFF	; 255
    80d4:	c5 01       	movw	r24, r10
    80d6:	2c 87       	std	Y+12, r18	; 0x0c
    80d8:	27 d1       	rcall	.+590    	; 0x8328 <strnlen_P>
    80da:	2c 01       	movw	r4, r24
    80dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    80de:	20 68       	ori	r18, 0x80	; 128
    80e0:	22 2e       	mov	r2, r18
    80e2:	83 01       	movw	r16, r6
    80e4:	23 fc       	sbrc	r2, 3
    80e6:	19 c0       	rjmp	.+50     	; 0x811a <vfprintf+0x1c2>
    80e8:	83 2d       	mov	r24, r3
    80ea:	90 e0       	ldi	r25, 0x00	; 0
    80ec:	48 16       	cp	r4, r24
    80ee:	59 06       	cpc	r5, r25
    80f0:	a0 f4       	brcc	.+40     	; 0x811a <vfprintf+0x1c2>
    80f2:	b7 01       	movw	r22, r14
    80f4:	80 e2       	ldi	r24, 0x20	; 32
    80f6:	90 e0       	ldi	r25, 0x00	; 0
    80f8:	2d d1       	rcall	.+602    	; 0x8354 <fputc>
    80fa:	3a 94       	dec	r3
    80fc:	f5 cf       	rjmp	.-22     	; 0x80e8 <vfprintf+0x190>
    80fe:	f5 01       	movw	r30, r10
    8100:	27 fc       	sbrc	r2, 7
    8102:	85 91       	lpm	r24, Z+
    8104:	27 fe       	sbrs	r2, 7
    8106:	81 91       	ld	r24, Z+
    8108:	5f 01       	movw	r10, r30
    810a:	b7 01       	movw	r22, r14
    810c:	90 e0       	ldi	r25, 0x00	; 0
    810e:	22 d1       	rcall	.+580    	; 0x8354 <fputc>
    8110:	31 10       	cpse	r3, r1
    8112:	3a 94       	dec	r3
    8114:	f1 e0       	ldi	r31, 0x01	; 1
    8116:	4f 1a       	sub	r4, r31
    8118:	51 08       	sbc	r5, r1
    811a:	41 14       	cp	r4, r1
    811c:	51 04       	cpc	r5, r1
    811e:	79 f7       	brne	.-34     	; 0x80fe <vfprintf+0x1a6>
    8120:	de c0       	rjmp	.+444    	; 0x82de <vfprintf+0x386>
    8122:	84 36       	cpi	r24, 0x64	; 100
    8124:	11 f0       	breq	.+4      	; 0x812a <vfprintf+0x1d2>
    8126:	89 36       	cpi	r24, 0x69	; 105
    8128:	31 f5       	brne	.+76     	; 0x8176 <vfprintf+0x21e>
    812a:	f8 01       	movw	r30, r16
    812c:	27 ff       	sbrs	r18, 7
    812e:	07 c0       	rjmp	.+14     	; 0x813e <vfprintf+0x1e6>
    8130:	60 81       	ld	r22, Z
    8132:	71 81       	ldd	r23, Z+1	; 0x01
    8134:	82 81       	ldd	r24, Z+2	; 0x02
    8136:	93 81       	ldd	r25, Z+3	; 0x03
    8138:	0c 5f       	subi	r16, 0xFC	; 252
    813a:	1f 4f       	sbci	r17, 0xFF	; 255
    813c:	08 c0       	rjmp	.+16     	; 0x814e <vfprintf+0x1f6>
    813e:	60 81       	ld	r22, Z
    8140:	71 81       	ldd	r23, Z+1	; 0x01
    8142:	88 27       	eor	r24, r24
    8144:	77 fd       	sbrc	r23, 7
    8146:	80 95       	com	r24
    8148:	98 2f       	mov	r25, r24
    814a:	0e 5f       	subi	r16, 0xFE	; 254
    814c:	1f 4f       	sbci	r17, 0xFF	; 255
    814e:	2f 76       	andi	r18, 0x6F	; 111
    8150:	b2 2e       	mov	r11, r18
    8152:	97 ff       	sbrs	r25, 7
    8154:	09 c0       	rjmp	.+18     	; 0x8168 <vfprintf+0x210>
    8156:	90 95       	com	r25
    8158:	80 95       	com	r24
    815a:	70 95       	com	r23
    815c:	61 95       	neg	r22
    815e:	7f 4f       	sbci	r23, 0xFF	; 255
    8160:	8f 4f       	sbci	r24, 0xFF	; 255
    8162:	9f 4f       	sbci	r25, 0xFF	; 255
    8164:	20 68       	ori	r18, 0x80	; 128
    8166:	b2 2e       	mov	r11, r18
    8168:	2a e0       	ldi	r18, 0x0A	; 10
    816a:	30 e0       	ldi	r19, 0x00	; 0
    816c:	a4 01       	movw	r20, r8
    816e:	24 d1       	rcall	.+584    	; 0x83b8 <__ultoa_invert>
    8170:	a8 2e       	mov	r10, r24
    8172:	a8 18       	sub	r10, r8
    8174:	43 c0       	rjmp	.+134    	; 0x81fc <vfprintf+0x2a4>
    8176:	85 37       	cpi	r24, 0x75	; 117
    8178:	29 f4       	brne	.+10     	; 0x8184 <vfprintf+0x22c>
    817a:	2f 7e       	andi	r18, 0xEF	; 239
    817c:	b2 2e       	mov	r11, r18
    817e:	2a e0       	ldi	r18, 0x0A	; 10
    8180:	30 e0       	ldi	r19, 0x00	; 0
    8182:	25 c0       	rjmp	.+74     	; 0x81ce <vfprintf+0x276>
    8184:	f2 2f       	mov	r31, r18
    8186:	f9 7f       	andi	r31, 0xF9	; 249
    8188:	bf 2e       	mov	r11, r31
    818a:	8f 36       	cpi	r24, 0x6F	; 111
    818c:	c1 f0       	breq	.+48     	; 0x81be <vfprintf+0x266>
    818e:	18 f4       	brcc	.+6      	; 0x8196 <vfprintf+0x23e>
    8190:	88 35       	cpi	r24, 0x58	; 88
    8192:	79 f0       	breq	.+30     	; 0x81b2 <vfprintf+0x25a>
    8194:	ad c0       	rjmp	.+346    	; 0x82f0 <vfprintf+0x398>
    8196:	80 37       	cpi	r24, 0x70	; 112
    8198:	19 f0       	breq	.+6      	; 0x81a0 <vfprintf+0x248>
    819a:	88 37       	cpi	r24, 0x78	; 120
    819c:	21 f0       	breq	.+8      	; 0x81a6 <vfprintf+0x24e>
    819e:	a8 c0       	rjmp	.+336    	; 0x82f0 <vfprintf+0x398>
    81a0:	2f 2f       	mov	r18, r31
    81a2:	20 61       	ori	r18, 0x10	; 16
    81a4:	b2 2e       	mov	r11, r18
    81a6:	b4 fe       	sbrs	r11, 4
    81a8:	0d c0       	rjmp	.+26     	; 0x81c4 <vfprintf+0x26c>
    81aa:	8b 2d       	mov	r24, r11
    81ac:	84 60       	ori	r24, 0x04	; 4
    81ae:	b8 2e       	mov	r11, r24
    81b0:	09 c0       	rjmp	.+18     	; 0x81c4 <vfprintf+0x26c>
    81b2:	24 ff       	sbrs	r18, 4
    81b4:	0a c0       	rjmp	.+20     	; 0x81ca <vfprintf+0x272>
    81b6:	9f 2f       	mov	r25, r31
    81b8:	96 60       	ori	r25, 0x06	; 6
    81ba:	b9 2e       	mov	r11, r25
    81bc:	06 c0       	rjmp	.+12     	; 0x81ca <vfprintf+0x272>
    81be:	28 e0       	ldi	r18, 0x08	; 8
    81c0:	30 e0       	ldi	r19, 0x00	; 0
    81c2:	05 c0       	rjmp	.+10     	; 0x81ce <vfprintf+0x276>
    81c4:	20 e1       	ldi	r18, 0x10	; 16
    81c6:	30 e0       	ldi	r19, 0x00	; 0
    81c8:	02 c0       	rjmp	.+4      	; 0x81ce <vfprintf+0x276>
    81ca:	20 e1       	ldi	r18, 0x10	; 16
    81cc:	32 e0       	ldi	r19, 0x02	; 2
    81ce:	f8 01       	movw	r30, r16
    81d0:	b7 fe       	sbrs	r11, 7
    81d2:	07 c0       	rjmp	.+14     	; 0x81e2 <vfprintf+0x28a>
    81d4:	60 81       	ld	r22, Z
    81d6:	71 81       	ldd	r23, Z+1	; 0x01
    81d8:	82 81       	ldd	r24, Z+2	; 0x02
    81da:	93 81       	ldd	r25, Z+3	; 0x03
    81dc:	0c 5f       	subi	r16, 0xFC	; 252
    81de:	1f 4f       	sbci	r17, 0xFF	; 255
    81e0:	06 c0       	rjmp	.+12     	; 0x81ee <vfprintf+0x296>
    81e2:	60 81       	ld	r22, Z
    81e4:	71 81       	ldd	r23, Z+1	; 0x01
    81e6:	80 e0       	ldi	r24, 0x00	; 0
    81e8:	90 e0       	ldi	r25, 0x00	; 0
    81ea:	0e 5f       	subi	r16, 0xFE	; 254
    81ec:	1f 4f       	sbci	r17, 0xFF	; 255
    81ee:	a4 01       	movw	r20, r8
    81f0:	e3 d0       	rcall	.+454    	; 0x83b8 <__ultoa_invert>
    81f2:	a8 2e       	mov	r10, r24
    81f4:	a8 18       	sub	r10, r8
    81f6:	fb 2d       	mov	r31, r11
    81f8:	ff 77       	andi	r31, 0x7F	; 127
    81fa:	bf 2e       	mov	r11, r31
    81fc:	b6 fe       	sbrs	r11, 6
    81fe:	0b c0       	rjmp	.+22     	; 0x8216 <vfprintf+0x2be>
    8200:	2b 2d       	mov	r18, r11
    8202:	2e 7f       	andi	r18, 0xFE	; 254
    8204:	a5 14       	cp	r10, r5
    8206:	50 f4       	brcc	.+20     	; 0x821c <vfprintf+0x2c4>
    8208:	b4 fe       	sbrs	r11, 4
    820a:	0a c0       	rjmp	.+20     	; 0x8220 <vfprintf+0x2c8>
    820c:	b2 fc       	sbrc	r11, 2
    820e:	08 c0       	rjmp	.+16     	; 0x8220 <vfprintf+0x2c8>
    8210:	2b 2d       	mov	r18, r11
    8212:	2e 7e       	andi	r18, 0xEE	; 238
    8214:	05 c0       	rjmp	.+10     	; 0x8220 <vfprintf+0x2c8>
    8216:	7a 2c       	mov	r7, r10
    8218:	2b 2d       	mov	r18, r11
    821a:	03 c0       	rjmp	.+6      	; 0x8222 <vfprintf+0x2ca>
    821c:	7a 2c       	mov	r7, r10
    821e:	01 c0       	rjmp	.+2      	; 0x8222 <vfprintf+0x2ca>
    8220:	75 2c       	mov	r7, r5
    8222:	24 ff       	sbrs	r18, 4
    8224:	0d c0       	rjmp	.+26     	; 0x8240 <vfprintf+0x2e8>
    8226:	fe 01       	movw	r30, r28
    8228:	ea 0d       	add	r30, r10
    822a:	f1 1d       	adc	r31, r1
    822c:	80 81       	ld	r24, Z
    822e:	80 33       	cpi	r24, 0x30	; 48
    8230:	11 f4       	brne	.+4      	; 0x8236 <vfprintf+0x2de>
    8232:	29 7e       	andi	r18, 0xE9	; 233
    8234:	09 c0       	rjmp	.+18     	; 0x8248 <vfprintf+0x2f0>
    8236:	22 ff       	sbrs	r18, 2
    8238:	06 c0       	rjmp	.+12     	; 0x8246 <vfprintf+0x2ee>
    823a:	73 94       	inc	r7
    823c:	73 94       	inc	r7
    823e:	04 c0       	rjmp	.+8      	; 0x8248 <vfprintf+0x2f0>
    8240:	82 2f       	mov	r24, r18
    8242:	86 78       	andi	r24, 0x86	; 134
    8244:	09 f0       	breq	.+2      	; 0x8248 <vfprintf+0x2f0>
    8246:	73 94       	inc	r7
    8248:	23 fd       	sbrc	r18, 3
    824a:	12 c0       	rjmp	.+36     	; 0x8270 <vfprintf+0x318>
    824c:	20 ff       	sbrs	r18, 0
    824e:	06 c0       	rjmp	.+12     	; 0x825c <vfprintf+0x304>
    8250:	5a 2c       	mov	r5, r10
    8252:	73 14       	cp	r7, r3
    8254:	18 f4       	brcc	.+6      	; 0x825c <vfprintf+0x304>
    8256:	53 0c       	add	r5, r3
    8258:	57 18       	sub	r5, r7
    825a:	73 2c       	mov	r7, r3
    825c:	73 14       	cp	r7, r3
    825e:	60 f4       	brcc	.+24     	; 0x8278 <vfprintf+0x320>
    8260:	b7 01       	movw	r22, r14
    8262:	80 e2       	ldi	r24, 0x20	; 32
    8264:	90 e0       	ldi	r25, 0x00	; 0
    8266:	2c 87       	std	Y+12, r18	; 0x0c
    8268:	75 d0       	rcall	.+234    	; 0x8354 <fputc>
    826a:	73 94       	inc	r7
    826c:	2c 85       	ldd	r18, Y+12	; 0x0c
    826e:	f6 cf       	rjmp	.-20     	; 0x825c <vfprintf+0x304>
    8270:	73 14       	cp	r7, r3
    8272:	10 f4       	brcc	.+4      	; 0x8278 <vfprintf+0x320>
    8274:	37 18       	sub	r3, r7
    8276:	01 c0       	rjmp	.+2      	; 0x827a <vfprintf+0x322>
    8278:	31 2c       	mov	r3, r1
    827a:	24 ff       	sbrs	r18, 4
    827c:	11 c0       	rjmp	.+34     	; 0x82a0 <vfprintf+0x348>
    827e:	b7 01       	movw	r22, r14
    8280:	80 e3       	ldi	r24, 0x30	; 48
    8282:	90 e0       	ldi	r25, 0x00	; 0
    8284:	2c 87       	std	Y+12, r18	; 0x0c
    8286:	66 d0       	rcall	.+204    	; 0x8354 <fputc>
    8288:	2c 85       	ldd	r18, Y+12	; 0x0c
    828a:	22 ff       	sbrs	r18, 2
    828c:	16 c0       	rjmp	.+44     	; 0x82ba <vfprintf+0x362>
    828e:	21 ff       	sbrs	r18, 1
    8290:	03 c0       	rjmp	.+6      	; 0x8298 <vfprintf+0x340>
    8292:	88 e5       	ldi	r24, 0x58	; 88
    8294:	90 e0       	ldi	r25, 0x00	; 0
    8296:	02 c0       	rjmp	.+4      	; 0x829c <vfprintf+0x344>
    8298:	88 e7       	ldi	r24, 0x78	; 120
    829a:	90 e0       	ldi	r25, 0x00	; 0
    829c:	b7 01       	movw	r22, r14
    829e:	0c c0       	rjmp	.+24     	; 0x82b8 <vfprintf+0x360>
    82a0:	82 2f       	mov	r24, r18
    82a2:	86 78       	andi	r24, 0x86	; 134
    82a4:	51 f0       	breq	.+20     	; 0x82ba <vfprintf+0x362>
    82a6:	21 fd       	sbrc	r18, 1
    82a8:	02 c0       	rjmp	.+4      	; 0x82ae <vfprintf+0x356>
    82aa:	80 e2       	ldi	r24, 0x20	; 32
    82ac:	01 c0       	rjmp	.+2      	; 0x82b0 <vfprintf+0x358>
    82ae:	8b e2       	ldi	r24, 0x2B	; 43
    82b0:	27 fd       	sbrc	r18, 7
    82b2:	8d e2       	ldi	r24, 0x2D	; 45
    82b4:	b7 01       	movw	r22, r14
    82b6:	90 e0       	ldi	r25, 0x00	; 0
    82b8:	4d d0       	rcall	.+154    	; 0x8354 <fputc>
    82ba:	a5 14       	cp	r10, r5
    82bc:	30 f4       	brcc	.+12     	; 0x82ca <vfprintf+0x372>
    82be:	b7 01       	movw	r22, r14
    82c0:	80 e3       	ldi	r24, 0x30	; 48
    82c2:	90 e0       	ldi	r25, 0x00	; 0
    82c4:	47 d0       	rcall	.+142    	; 0x8354 <fputc>
    82c6:	5a 94       	dec	r5
    82c8:	f8 cf       	rjmp	.-16     	; 0x82ba <vfprintf+0x362>
    82ca:	aa 94       	dec	r10
    82cc:	f4 01       	movw	r30, r8
    82ce:	ea 0d       	add	r30, r10
    82d0:	f1 1d       	adc	r31, r1
    82d2:	80 81       	ld	r24, Z
    82d4:	b7 01       	movw	r22, r14
    82d6:	90 e0       	ldi	r25, 0x00	; 0
    82d8:	3d d0       	rcall	.+122    	; 0x8354 <fputc>
    82da:	a1 10       	cpse	r10, r1
    82dc:	f6 cf       	rjmp	.-20     	; 0x82ca <vfprintf+0x372>
    82de:	33 20       	and	r3, r3
    82e0:	09 f4       	brne	.+2      	; 0x82e4 <vfprintf+0x38c>
    82e2:	5d ce       	rjmp	.-838    	; 0x7f9e <vfprintf+0x46>
    82e4:	b7 01       	movw	r22, r14
    82e6:	80 e2       	ldi	r24, 0x20	; 32
    82e8:	90 e0       	ldi	r25, 0x00	; 0
    82ea:	34 d0       	rcall	.+104    	; 0x8354 <fputc>
    82ec:	3a 94       	dec	r3
    82ee:	f7 cf       	rjmp	.-18     	; 0x82de <vfprintf+0x386>
    82f0:	f7 01       	movw	r30, r14
    82f2:	86 81       	ldd	r24, Z+6	; 0x06
    82f4:	97 81       	ldd	r25, Z+7	; 0x07
    82f6:	02 c0       	rjmp	.+4      	; 0x82fc <vfprintf+0x3a4>
    82f8:	8f ef       	ldi	r24, 0xFF	; 255
    82fa:	9f ef       	ldi	r25, 0xFF	; 255
    82fc:	2c 96       	adiw	r28, 0x0c	; 12
    82fe:	cd bf       	out	0x3d, r28	; 61
    8300:	de bf       	out	0x3e, r29	; 62
    8302:	df 91       	pop	r29
    8304:	cf 91       	pop	r28
    8306:	1f 91       	pop	r17
    8308:	0f 91       	pop	r16
    830a:	ff 90       	pop	r15
    830c:	ef 90       	pop	r14
    830e:	df 90       	pop	r13
    8310:	cf 90       	pop	r12
    8312:	bf 90       	pop	r11
    8314:	af 90       	pop	r10
    8316:	9f 90       	pop	r9
    8318:	8f 90       	pop	r8
    831a:	7f 90       	pop	r7
    831c:	6f 90       	pop	r6
    831e:	5f 90       	pop	r5
    8320:	4f 90       	pop	r4
    8322:	3f 90       	pop	r3
    8324:	2f 90       	pop	r2
    8326:	08 95       	ret

00008328 <strnlen_P>:
    8328:	fc 01       	movw	r30, r24
    832a:	05 90       	lpm	r0, Z+
    832c:	61 50       	subi	r22, 0x01	; 1
    832e:	70 40       	sbci	r23, 0x00	; 0
    8330:	01 10       	cpse	r0, r1
    8332:	d8 f7       	brcc	.-10     	; 0x832a <strnlen_P+0x2>
    8334:	80 95       	com	r24
    8336:	90 95       	com	r25
    8338:	8e 0f       	add	r24, r30
    833a:	9f 1f       	adc	r25, r31
    833c:	08 95       	ret

0000833e <strnlen>:
    833e:	fc 01       	movw	r30, r24
    8340:	61 50       	subi	r22, 0x01	; 1
    8342:	70 40       	sbci	r23, 0x00	; 0
    8344:	01 90       	ld	r0, Z+
    8346:	01 10       	cpse	r0, r1
    8348:	d8 f7       	brcc	.-10     	; 0x8340 <strnlen+0x2>
    834a:	80 95       	com	r24
    834c:	90 95       	com	r25
    834e:	8e 0f       	add	r24, r30
    8350:	9f 1f       	adc	r25, r31
    8352:	08 95       	ret

00008354 <fputc>:
    8354:	0f 93       	push	r16
    8356:	1f 93       	push	r17
    8358:	cf 93       	push	r28
    835a:	df 93       	push	r29
    835c:	18 2f       	mov	r17, r24
    835e:	09 2f       	mov	r16, r25
    8360:	eb 01       	movw	r28, r22
    8362:	8b 81       	ldd	r24, Y+3	; 0x03
    8364:	81 fd       	sbrc	r24, 1
    8366:	03 c0       	rjmp	.+6      	; 0x836e <fputc+0x1a>
    8368:	8f ef       	ldi	r24, 0xFF	; 255
    836a:	9f ef       	ldi	r25, 0xFF	; 255
    836c:	20 c0       	rjmp	.+64     	; 0x83ae <fputc+0x5a>
    836e:	82 ff       	sbrs	r24, 2
    8370:	10 c0       	rjmp	.+32     	; 0x8392 <fputc+0x3e>
    8372:	4e 81       	ldd	r20, Y+6	; 0x06
    8374:	5f 81       	ldd	r21, Y+7	; 0x07
    8376:	2c 81       	ldd	r18, Y+4	; 0x04
    8378:	3d 81       	ldd	r19, Y+5	; 0x05
    837a:	42 17       	cp	r20, r18
    837c:	53 07       	cpc	r21, r19
    837e:	7c f4       	brge	.+30     	; 0x839e <fputc+0x4a>
    8380:	e8 81       	ld	r30, Y
    8382:	f9 81       	ldd	r31, Y+1	; 0x01
    8384:	9f 01       	movw	r18, r30
    8386:	2f 5f       	subi	r18, 0xFF	; 255
    8388:	3f 4f       	sbci	r19, 0xFF	; 255
    838a:	28 83       	st	Y, r18
    838c:	39 83       	std	Y+1, r19	; 0x01
    838e:	10 83       	st	Z, r17
    8390:	06 c0       	rjmp	.+12     	; 0x839e <fputc+0x4a>
    8392:	e8 85       	ldd	r30, Y+8	; 0x08
    8394:	f9 85       	ldd	r31, Y+9	; 0x09
    8396:	81 2f       	mov	r24, r17
    8398:	09 95       	icall
    839a:	89 2b       	or	r24, r25
    839c:	29 f7       	brne	.-54     	; 0x8368 <fputc+0x14>
    839e:	2e 81       	ldd	r18, Y+6	; 0x06
    83a0:	3f 81       	ldd	r19, Y+7	; 0x07
    83a2:	2f 5f       	subi	r18, 0xFF	; 255
    83a4:	3f 4f       	sbci	r19, 0xFF	; 255
    83a6:	2e 83       	std	Y+6, r18	; 0x06
    83a8:	3f 83       	std	Y+7, r19	; 0x07
    83aa:	81 2f       	mov	r24, r17
    83ac:	90 2f       	mov	r25, r16
    83ae:	df 91       	pop	r29
    83b0:	cf 91       	pop	r28
    83b2:	1f 91       	pop	r17
    83b4:	0f 91       	pop	r16
    83b6:	08 95       	ret

000083b8 <__ultoa_invert>:
    83b8:	fa 01       	movw	r30, r20
    83ba:	aa 27       	eor	r26, r26
    83bc:	28 30       	cpi	r18, 0x08	; 8
    83be:	51 f1       	breq	.+84     	; 0x8414 <__ultoa_invert+0x5c>
    83c0:	20 31       	cpi	r18, 0x10	; 16
    83c2:	81 f1       	breq	.+96     	; 0x8424 <__ultoa_invert+0x6c>
    83c4:	e8 94       	clt
    83c6:	6f 93       	push	r22
    83c8:	6e 7f       	andi	r22, 0xFE	; 254
    83ca:	6e 5f       	subi	r22, 0xFE	; 254
    83cc:	7f 4f       	sbci	r23, 0xFF	; 255
    83ce:	8f 4f       	sbci	r24, 0xFF	; 255
    83d0:	9f 4f       	sbci	r25, 0xFF	; 255
    83d2:	af 4f       	sbci	r26, 0xFF	; 255
    83d4:	b1 e0       	ldi	r27, 0x01	; 1
    83d6:	3e d0       	rcall	.+124    	; 0x8454 <__ultoa_invert+0x9c>
    83d8:	b4 e0       	ldi	r27, 0x04	; 4
    83da:	3c d0       	rcall	.+120    	; 0x8454 <__ultoa_invert+0x9c>
    83dc:	67 0f       	add	r22, r23
    83de:	78 1f       	adc	r23, r24
    83e0:	89 1f       	adc	r24, r25
    83e2:	9a 1f       	adc	r25, r26
    83e4:	a1 1d       	adc	r26, r1
    83e6:	68 0f       	add	r22, r24
    83e8:	79 1f       	adc	r23, r25
    83ea:	8a 1f       	adc	r24, r26
    83ec:	91 1d       	adc	r25, r1
    83ee:	a1 1d       	adc	r26, r1
    83f0:	6a 0f       	add	r22, r26
    83f2:	71 1d       	adc	r23, r1
    83f4:	81 1d       	adc	r24, r1
    83f6:	91 1d       	adc	r25, r1
    83f8:	a1 1d       	adc	r26, r1
    83fa:	20 d0       	rcall	.+64     	; 0x843c <__ultoa_invert+0x84>
    83fc:	09 f4       	brne	.+2      	; 0x8400 <__ultoa_invert+0x48>
    83fe:	68 94       	set
    8400:	3f 91       	pop	r19
    8402:	2a e0       	ldi	r18, 0x0A	; 10
    8404:	26 9f       	mul	r18, r22
    8406:	11 24       	eor	r1, r1
    8408:	30 19       	sub	r19, r0
    840a:	30 5d       	subi	r19, 0xD0	; 208
    840c:	31 93       	st	Z+, r19
    840e:	de f6       	brtc	.-74     	; 0x83c6 <__ultoa_invert+0xe>
    8410:	cf 01       	movw	r24, r30
    8412:	08 95       	ret
    8414:	46 2f       	mov	r20, r22
    8416:	47 70       	andi	r20, 0x07	; 7
    8418:	40 5d       	subi	r20, 0xD0	; 208
    841a:	41 93       	st	Z+, r20
    841c:	b3 e0       	ldi	r27, 0x03	; 3
    841e:	0f d0       	rcall	.+30     	; 0x843e <__ultoa_invert+0x86>
    8420:	c9 f7       	brne	.-14     	; 0x8414 <__ultoa_invert+0x5c>
    8422:	f6 cf       	rjmp	.-20     	; 0x8410 <__ultoa_invert+0x58>
    8424:	46 2f       	mov	r20, r22
    8426:	4f 70       	andi	r20, 0x0F	; 15
    8428:	40 5d       	subi	r20, 0xD0	; 208
    842a:	4a 33       	cpi	r20, 0x3A	; 58
    842c:	18 f0       	brcs	.+6      	; 0x8434 <__ultoa_invert+0x7c>
    842e:	49 5d       	subi	r20, 0xD9	; 217
    8430:	31 fd       	sbrc	r19, 1
    8432:	40 52       	subi	r20, 0x20	; 32
    8434:	41 93       	st	Z+, r20
    8436:	02 d0       	rcall	.+4      	; 0x843c <__ultoa_invert+0x84>
    8438:	a9 f7       	brne	.-22     	; 0x8424 <__ultoa_invert+0x6c>
    843a:	ea cf       	rjmp	.-44     	; 0x8410 <__ultoa_invert+0x58>
    843c:	b4 e0       	ldi	r27, 0x04	; 4
    843e:	a6 95       	lsr	r26
    8440:	97 95       	ror	r25
    8442:	87 95       	ror	r24
    8444:	77 95       	ror	r23
    8446:	67 95       	ror	r22
    8448:	ba 95       	dec	r27
    844a:	c9 f7       	brne	.-14     	; 0x843e <__ultoa_invert+0x86>
    844c:	00 97       	sbiw	r24, 0x00	; 0
    844e:	61 05       	cpc	r22, r1
    8450:	71 05       	cpc	r23, r1
    8452:	08 95       	ret
    8454:	9b 01       	movw	r18, r22
    8456:	ac 01       	movw	r20, r24
    8458:	0a 2e       	mov	r0, r26
    845a:	06 94       	lsr	r0
    845c:	57 95       	ror	r21
    845e:	47 95       	ror	r20
    8460:	37 95       	ror	r19
    8462:	27 95       	ror	r18
    8464:	ba 95       	dec	r27
    8466:	c9 f7       	brne	.-14     	; 0x845a <__ultoa_invert+0xa2>
    8468:	62 0f       	add	r22, r18
    846a:	73 1f       	adc	r23, r19
    846c:	84 1f       	adc	r24, r20
    846e:	95 1f       	adc	r25, r21
    8470:	a0 1d       	adc	r26, r0
    8472:	08 95       	ret

00008474 <_exit>:
    8474:	f8 94       	cli

00008476 <__stop_program>:
    8476:	ff cf       	rjmp	.-2      	; 0x8476 <__stop_program>
