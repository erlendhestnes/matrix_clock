
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000382a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000005c8  00802000  0000382a  000038be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000199  008025c8  008025c8  00003e86  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003e86  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000870  00000000  00000000  00003ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001d73a  00000000  00000000  00004752  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000336a  00000000  00000000  00021e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000ebce  00000000  00000000  000251f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000272c  00000000  00000000  00033dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003a2f  00000000  00000000  000364f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002cff5  00000000  00000000  00039f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000043f8  00000000  00000000  00066f14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c3       	rjmp	.+1782   	; 0x6f8 <__ctors_end>
       2:	00 00       	nop
       4:	98 c3       	rjmp	.+1840   	; 0x736 <__bad_interrupt>
       6:	00 00       	nop
       8:	96 c3       	rjmp	.+1836   	; 0x736 <__bad_interrupt>
       a:	00 00       	nop
       c:	94 c3       	rjmp	.+1832   	; 0x736 <__bad_interrupt>
       e:	00 00       	nop
      10:	92 c3       	rjmp	.+1828   	; 0x736 <__bad_interrupt>
      12:	00 00       	nop
      14:	90 c3       	rjmp	.+1824   	; 0x736 <__bad_interrupt>
      16:	00 00       	nop
      18:	8e c3       	rjmp	.+1820   	; 0x736 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8c c3       	rjmp	.+1816   	; 0x736 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8a c3       	rjmp	.+1812   	; 0x736 <__bad_interrupt>
      22:	00 00       	nop
      24:	88 c3       	rjmp	.+1808   	; 0x736 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__vector_10>
      2c:	84 c3       	rjmp	.+1800   	; 0x736 <__bad_interrupt>
      2e:	00 00       	nop
      30:	82 c3       	rjmp	.+1796   	; 0x736 <__bad_interrupt>
      32:	00 00       	nop
      34:	80 c3       	rjmp	.+1792   	; 0x736 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__vector_14>
      3c:	7c c3       	rjmp	.+1784   	; 0x736 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7a c3       	rjmp	.+1780   	; 0x736 <__bad_interrupt>
      42:	00 00       	nop
      44:	78 c3       	rjmp	.+1776   	; 0x736 <__bad_interrupt>
      46:	00 00       	nop
      48:	76 c3       	rjmp	.+1772   	; 0x736 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	74 c3       	rjmp	.+1768   	; 0x736 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__vector_20>
      54:	70 c3       	rjmp	.+1760   	; 0x736 <__bad_interrupt>
      56:	00 00       	nop
      58:	6e c3       	rjmp	.+1756   	; 0x736 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6c c3       	rjmp	.+1752   	; 0x736 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6a c3       	rjmp	.+1748   	; 0x736 <__bad_interrupt>
      62:	00 00       	nop
      64:	68 c3       	rjmp	.+1744   	; 0x736 <__bad_interrupt>
      66:	00 00       	nop
      68:	66 c3       	rjmp	.+1740   	; 0x736 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	64 c3       	rjmp	.+1736   	; 0x736 <__bad_interrupt>
      6e:	00 00       	nop
      70:	62 c3       	rjmp	.+1732   	; 0x736 <__bad_interrupt>
      72:	00 00       	nop
      74:	60 c3       	rjmp	.+1728   	; 0x736 <__bad_interrupt>
      76:	00 00       	nop
      78:	5e c3       	rjmp	.+1724   	; 0x736 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5c c3       	rjmp	.+1720   	; 0x736 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5a c3       	rjmp	.+1716   	; 0x736 <__bad_interrupt>
      82:	00 00       	nop
      84:	58 c3       	rjmp	.+1712   	; 0x736 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__vector_34>
      8c:	54 c3       	rjmp	.+1704   	; 0x736 <__bad_interrupt>
      8e:	00 00       	nop
      90:	52 c3       	rjmp	.+1700   	; 0x736 <__bad_interrupt>
      92:	00 00       	nop
      94:	50 c3       	rjmp	.+1696   	; 0x736 <__bad_interrupt>
      96:	00 00       	nop
      98:	4e c3       	rjmp	.+1692   	; 0x736 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4c c3       	rjmp	.+1688   	; 0x736 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4a c3       	rjmp	.+1684   	; 0x736 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	48 c3       	rjmp	.+1680   	; 0x736 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	46 c3       	rjmp	.+1676   	; 0x736 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	44 c3       	rjmp	.+1672   	; 0x736 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	42 c3       	rjmp	.+1668   	; 0x736 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	40 c3       	rjmp	.+1664   	; 0x736 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3e c3       	rjmp	.+1660   	; 0x736 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3c c3       	rjmp	.+1656   	; 0x736 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3a c3       	rjmp	.+1652   	; 0x736 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	38 c3       	rjmp	.+1648   	; 0x736 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	36 c3       	rjmp	.+1644   	; 0x736 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	34 c3       	rjmp	.+1640   	; 0x736 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	32 c3       	rjmp	.+1636   	; 0x736 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	30 c3       	rjmp	.+1632   	; 0x736 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2e c3       	rjmp	.+1628   	; 0x736 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2c c3       	rjmp	.+1624   	; 0x736 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2a c3       	rjmp	.+1620   	; 0x736 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	28 c3       	rjmp	.+1616   	; 0x736 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	26 c3       	rjmp	.+1612   	; 0x736 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	24 c3       	rjmp	.+1608   	; 0x736 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	22 c3       	rjmp	.+1604   	; 0x736 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	20 c3       	rjmp	.+1600   	; 0x736 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	1e c3       	rjmp	.+1596   	; 0x736 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	1c c3       	rjmp	.+1592   	; 0x736 <__bad_interrupt>
      fe:	00 00       	nop
     100:	1a c3       	rjmp	.+1588   	; 0x736 <__bad_interrupt>
     102:	00 00       	nop
     104:	18 c3       	rjmp	.+1584   	; 0x736 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__vector_66>
     10c:	14 c3       	rjmp	.+1576   	; 0x736 <__bad_interrupt>
     10e:	00 00       	nop
     110:	12 c3       	rjmp	.+1572   	; 0x736 <__bad_interrupt>
     112:	00 00       	nop
     114:	10 c3       	rjmp	.+1568   	; 0x736 <__bad_interrupt>
     116:	00 00       	nop
     118:	0e c3       	rjmp	.+1564   	; 0x736 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c c3       	rjmp	.+1560   	; 0x736 <__bad_interrupt>
     11e:	00 00       	nop
     120:	0a c3       	rjmp	.+1556   	; 0x736 <__bad_interrupt>
     122:	00 00       	nop
     124:	08 c3       	rjmp	.+1552   	; 0x736 <__bad_interrupt>
     126:	00 00       	nop
     128:	06 c3       	rjmp	.+1548   	; 0x736 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	04 c3       	rjmp	.+1544   	; 0x736 <__bad_interrupt>
     12e:	00 00       	nop
     130:	02 c3       	rjmp	.+1540   	; 0x736 <__bad_interrupt>
     132:	00 00       	nop
     134:	00 c3       	rjmp	.+1536   	; 0x736 <__bad_interrupt>
     136:	00 00       	nop
     138:	fe c2       	rjmp	.+1532   	; 0x736 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	fc c2       	rjmp	.+1528   	; 0x736 <__bad_interrupt>
     13e:	00 00       	nop
     140:	fa c2       	rjmp	.+1524   	; 0x736 <__bad_interrupt>
     142:	00 00       	nop
     144:	f8 c2       	rjmp	.+1520   	; 0x736 <__bad_interrupt>
     146:	00 00       	nop
     148:	f6 c2       	rjmp	.+1516   	; 0x736 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	f4 c2       	rjmp	.+1512   	; 0x736 <__bad_interrupt>
     14e:	00 00       	nop
     150:	f2 c2       	rjmp	.+1508   	; 0x736 <__bad_interrupt>
     152:	00 00       	nop
     154:	f0 c2       	rjmp	.+1504   	; 0x736 <__bad_interrupt>
     156:	00 00       	nop
     158:	ee c2       	rjmp	.+1500   	; 0x736 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	ec c2       	rjmp	.+1496   	; 0x736 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__vector_88>
     164:	e8 c2       	rjmp	.+1488   	; 0x736 <__bad_interrupt>
     166:	00 00       	nop
     168:	e6 c2       	rjmp	.+1484   	; 0x736 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	e4 c2       	rjmp	.+1480   	; 0x736 <__bad_interrupt>
     16e:	00 00       	nop
     170:	e2 c2       	rjmp	.+1476   	; 0x736 <__bad_interrupt>
     172:	00 00       	nop
     174:	e0 c2       	rjmp	.+1472   	; 0x736 <__bad_interrupt>
     176:	00 00       	nop
     178:	de c2       	rjmp	.+1468   	; 0x736 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	dc c2       	rjmp	.+1464   	; 0x736 <__bad_interrupt>
     17e:	00 00       	nop
     180:	da c2       	rjmp	.+1460   	; 0x736 <__bad_interrupt>
     182:	00 00       	nop
     184:	d8 c2       	rjmp	.+1456   	; 0x736 <__bad_interrupt>
     186:	00 00       	nop
     188:	d6 c2       	rjmp	.+1452   	; 0x736 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d4 c2       	rjmp	.+1448   	; 0x736 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d2 c2       	rjmp	.+1444   	; 0x736 <__bad_interrupt>
     192:	00 00       	nop
     194:	d0 c2       	rjmp	.+1440   	; 0x736 <__bad_interrupt>
     196:	00 00       	nop
     198:	ce c2       	rjmp	.+1436   	; 0x736 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	cc c2       	rjmp	.+1432   	; 0x736 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ca c2       	rjmp	.+1428   	; 0x736 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	c8 c2       	rjmp	.+1424   	; 0x736 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	c6 c2       	rjmp	.+1420   	; 0x736 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c4 c2       	rjmp	.+1416   	; 0x736 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	c2 c2       	rjmp	.+1412   	; 0x736 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c0 c2       	rjmp	.+1408   	; 0x736 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	be c2       	rjmp	.+1404   	; 0x736 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	bc c2       	rjmp	.+1400   	; 0x736 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	ba c2       	rjmp	.+1396   	; 0x736 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	b8 c2       	rjmp	.+1392   	; 0x736 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	b6 c2       	rjmp	.+1388   	; 0x736 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b4 c2       	rjmp	.+1384   	; 0x736 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b2 c2       	rjmp	.+1380   	; 0x736 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b0 c2       	rjmp	.+1376   	; 0x736 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	ae c2       	rjmp	.+1372   	; 0x736 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	ac c2       	rjmp	.+1368   	; 0x736 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	aa c2       	rjmp	.+1364   	; 0x736 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	a8 c2       	rjmp	.+1360   	; 0x736 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	a6 c2       	rjmp	.+1356   	; 0x736 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a4 c2       	rjmp	.+1352   	; 0x736 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a2 c2       	rjmp	.+1348   	; 0x736 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a0 c2       	rjmp	.+1344   	; 0x736 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	9e c2       	rjmp	.+1340   	; 0x736 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 3e       	cpi	r16, 0xE0	; 224
     202:	5b 4f       	sbci	r21, 0xFB	; 251
     204:	5b 3e       	cpi	r21, 0xEB	; 235
     206:	3e 6b       	ori	r19, 0xBE	; 190
     208:	4f 6b       	ori	r20, 0xBF	; 191
     20a:	3e 1c       	adc	r3, r14
     20c:	3e 7c       	andi	r19, 0xCE	; 206
     20e:	3e 1c       	adc	r3, r14
     210:	18 3c       	cpi	r17, 0xC8	; 200
     212:	7e 3c       	cpi	r23, 0xCE	; 206
     214:	18 1c       	adc	r1, r8
     216:	57 7d       	andi	r21, 0xD7	; 215
     218:	57 1c       	adc	r5, r7
     21a:	1c 5e       	subi	r17, 0xEC	; 236
     21c:	7f 5e       	subi	r23, 0xEF	; 239
     21e:	1c 00       	.word	0x001c	; ????
     220:	18 3c       	cpi	r17, 0xC8	; 200
     222:	18 00       	.word	0x0018	; ????
     224:	ff e7       	ldi	r31, 0x7F	; 127
     226:	c3 e7       	ldi	r28, 0x73	; 115
     228:	ff 00       	.word	0x00ff	; ????
     22a:	18 24       	eor	r1, r8
     22c:	18 00       	.word	0x0018	; ????
     22e:	ff e7       	ldi	r31, 0x7F	; 127
     230:	db e7       	ldi	r29, 0x7B	; 123
     232:	ff 30       	cpi	r31, 0x0F	; 15
     234:	48 3a       	cpi	r20, 0xA8	; 168
     236:	06 0e       	add	r0, r22
     238:	26 29       	or	r18, r6
     23a:	79 29       	or	r23, r9
     23c:	26 40       	sbci	r18, 0x06	; 6
     23e:	7f 05       	cpc	r23, r15
     240:	05 07       	cpc	r16, r21
     242:	40 7f       	andi	r20, 0xF0	; 240
     244:	05 25       	eor	r16, r5
     246:	3f 5a       	subi	r19, 0xAF	; 175
     248:	3c e7       	ldi	r19, 0x7C	; 124
     24a:	3c 5a       	subi	r19, 0xAC	; 172
     24c:	7f 3e       	cpi	r23, 0xEF	; 239
     24e:	1c 1c       	adc	r1, r12
     250:	08 08       	sbc	r0, r8
     252:	1c 1c       	adc	r1, r12
     254:	3e 7f       	andi	r19, 0xFE	; 254
     256:	14 22       	and	r1, r20
     258:	7f 22       	and	r7, r31
     25a:	14 5f       	subi	r17, 0xF4	; 244
     25c:	5f 00       	.word	0x005f	; ????
     25e:	5f 5f       	subi	r21, 0xFF	; 255
     260:	06 09       	sbc	r16, r6
     262:	7f 01       	movw	r14, r30
     264:	7f 00       	.word	0x007f	; ????
     266:	66 89       	ldd	r22, Z+22	; 0x16
     268:	95 6a       	ori	r25, 0xA5	; 165
     26a:	60 60       	ori	r22, 0x00	; 0
     26c:	60 60       	ori	r22, 0x00	; 0
     26e:	60 94       	com	r6
     270:	a2 ff       	sbrs	r26, 2
     272:	a2 94       	swap	r10
     274:	08 04       	cpc	r0, r8
     276:	7e 04       	cpc	r7, r14
     278:	08 10       	cpse	r0, r8
     27a:	20 7e       	andi	r18, 0xE0	; 224
     27c:	20 10       	cpse	r2, r0
     27e:	08 08       	sbc	r0, r8
     280:	2a 1c       	adc	r2, r10
     282:	08 08       	sbc	r0, r8
     284:	1c 2a       	or	r1, r28
     286:	08 08       	sbc	r0, r8
     288:	1e 10       	cpse	r1, r14
     28a:	10 10       	cpse	r1, r0
     28c:	10 0c       	add	r1, r0
     28e:	1e 0c       	add	r1, r14
     290:	1e 0c       	add	r1, r14
     292:	30 38       	cpi	r19, 0x80	; 128
     294:	3e 38       	cpi	r19, 0x8E	; 142
     296:	30 06       	cpc	r3, r16
     298:	0e 3e       	cpi	r16, 0xEE	; 238
     29a:	0e 06       	cpc	r0, r30
     29c:	00 00       	nop
     29e:	00 00       	nop
     2a0:	00 00       	nop
     2a2:	00 5f       	subi	r16, 0xF0	; 240
     2a4:	00 00       	nop
     2a6:	00 07       	cpc	r16, r16
     2a8:	00 07       	cpc	r16, r16
     2aa:	00 14       	cp	r0, r0
     2ac:	7f 14       	cp	r7, r15
     2ae:	7f 14       	cp	r7, r15
     2b0:	24 2a       	or	r2, r20
     2b2:	7f 2a       	or	r7, r31
     2b4:	12 23       	and	r17, r18
     2b6:	13 08       	sbc	r1, r3
     2b8:	64 62       	ori	r22, 0x24	; 36
     2ba:	36 49       	sbci	r19, 0x96	; 150
     2bc:	56 20       	and	r5, r6
     2be:	50 00       	.word	0x0050	; ????
     2c0:	08 07       	cpc	r16, r24
     2c2:	03 00       	.word	0x0003	; ????
     2c4:	00 1c       	adc	r0, r0
     2c6:	22 41       	sbci	r18, 0x12	; 18
     2c8:	00 00       	nop
     2ca:	41 22       	and	r4, r17
     2cc:	1c 00       	.word	0x001c	; ????
     2ce:	2a 1c       	adc	r2, r10
     2d0:	7f 1c       	adc	r7, r15
     2d2:	2a 08       	sbc	r2, r10
     2d4:	08 3e       	cpi	r16, 0xE8	; 232
     2d6:	08 08       	sbc	r0, r8
     2d8:	00 80       	ld	r0, Z
     2da:	70 30       	cpi	r23, 0x00	; 0
     2dc:	00 08       	sbc	r0, r0
     2de:	08 08       	sbc	r0, r8
     2e0:	08 08       	sbc	r0, r8
     2e2:	00 00       	nop
     2e4:	60 60       	ori	r22, 0x00	; 0
     2e6:	00 20       	and	r0, r0
     2e8:	10 08       	sbc	r1, r0
     2ea:	04 02       	muls	r16, r20
     2ec:	3e 51       	subi	r19, 0x1E	; 30
     2ee:	49 45       	sbci	r20, 0x59	; 89
     2f0:	3e 00       	.word	0x003e	; ????
     2f2:	42 7f       	andi	r20, 0xF2	; 242
     2f4:	40 00       	.word	0x0040	; ????
     2f6:	72 49       	sbci	r23, 0x92	; 146
     2f8:	49 49       	sbci	r20, 0x99	; 153
     2fa:	46 21       	and	r20, r6
     2fc:	41 49       	sbci	r20, 0x91	; 145
     2fe:	4d 33       	cpi	r20, 0x3D	; 61
     300:	18 14       	cp	r1, r8
     302:	12 7f       	andi	r17, 0xF2	; 242
     304:	10 27       	eor	r17, r16
     306:	45 45       	sbci	r20, 0x55	; 85
     308:	45 39       	cpi	r20, 0x95	; 149
     30a:	3c 4a       	sbci	r19, 0xAC	; 172
     30c:	49 49       	sbci	r20, 0x99	; 153
     30e:	31 41       	sbci	r19, 0x11	; 17
     310:	21 11       	cpse	r18, r1
     312:	09 07       	cpc	r16, r25
     314:	36 49       	sbci	r19, 0x96	; 150
     316:	49 49       	sbci	r20, 0x99	; 153
     318:	36 46       	sbci	r19, 0x66	; 102
     31a:	49 49       	sbci	r20, 0x99	; 153
     31c:	29 1e       	adc	r2, r25
     31e:	00 00       	nop
     320:	14 00       	.word	0x0014	; ????
     322:	00 00       	nop
     324:	40 34       	cpi	r20, 0x40	; 64
     326:	00 00       	nop
     328:	00 08       	sbc	r0, r0
     32a:	14 22       	and	r1, r20
     32c:	41 14       	cp	r4, r1
     32e:	14 14       	cp	r1, r4
     330:	14 14       	cp	r1, r4
     332:	00 41       	sbci	r16, 0x10	; 16
     334:	22 14       	cp	r2, r2
     336:	08 02       	muls	r16, r24
     338:	01 59       	subi	r16, 0x91	; 145
     33a:	09 06       	cpc	r0, r25
     33c:	3e 41       	sbci	r19, 0x1E	; 30
     33e:	5d 59       	subi	r21, 0x9D	; 157
     340:	4e 7c       	andi	r20, 0xCE	; 206
     342:	12 11       	cpse	r17, r2
     344:	12 7c       	andi	r17, 0xC2	; 194
     346:	7f 49       	sbci	r23, 0x9F	; 159
     348:	49 49       	sbci	r20, 0x99	; 153
     34a:	36 3e       	cpi	r19, 0xE6	; 230
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	41 22       	and	r4, r17
     350:	7f 41       	sbci	r23, 0x1F	; 31
     352:	41 41       	sbci	r20, 0x11	; 17
     354:	3e 7f       	andi	r19, 0xFE	; 254
     356:	49 49       	sbci	r20, 0x99	; 153
     358:	49 41       	sbci	r20, 0x19	; 25
     35a:	7f 09       	sbc	r23, r15
     35c:	09 09       	sbc	r16, r9
     35e:	01 3e       	cpi	r16, 0xE1	; 225
     360:	41 41       	sbci	r20, 0x11	; 17
     362:	51 73       	andi	r21, 0x31	; 49
     364:	7f 08       	sbc	r7, r15
     366:	08 08       	sbc	r0, r8
     368:	7f 00       	.word	0x007f	; ????
     36a:	41 7f       	andi	r20, 0xF1	; 241
     36c:	41 00       	.word	0x0041	; ????
     36e:	20 40       	sbci	r18, 0x00	; 0
     370:	41 3f       	cpi	r20, 0xF1	; 241
     372:	01 7f       	andi	r16, 0xF1	; 241
     374:	08 14       	cp	r0, r8
     376:	22 41       	sbci	r18, 0x12	; 18
     378:	7f 40       	sbci	r23, 0x0F	; 15
     37a:	40 40       	sbci	r20, 0x00	; 0
     37c:	40 7f       	andi	r20, 0xF0	; 240
     37e:	02 1c       	adc	r0, r2
     380:	02 7f       	andi	r16, 0xF2	; 242
     382:	7f 04       	cpc	r7, r15
     384:	08 10       	cpse	r0, r8
     386:	7f 3e       	cpi	r23, 0xEF	; 239
     388:	41 41       	sbci	r20, 0x11	; 17
     38a:	41 3e       	cpi	r20, 0xE1	; 225
     38c:	7f 09       	sbc	r23, r15
     38e:	09 09       	sbc	r16, r9
     390:	06 3e       	cpi	r16, 0xE6	; 230
     392:	41 51       	subi	r20, 0x11	; 17
     394:	21 5e       	subi	r18, 0xE1	; 225
     396:	7f 09       	sbc	r23, r15
     398:	19 29       	or	r17, r9
     39a:	46 26       	eor	r4, r22
     39c:	49 49       	sbci	r20, 0x99	; 153
     39e:	49 32       	cpi	r20, 0x29	; 41
     3a0:	03 01       	movw	r0, r6
     3a2:	7f 01       	movw	r14, r30
     3a4:	03 3f       	cpi	r16, 0xF3	; 243
     3a6:	40 40       	sbci	r20, 0x00	; 0
     3a8:	40 3f       	cpi	r20, 0xF0	; 240
     3aa:	1f 20       	and	r1, r15
     3ac:	40 20       	and	r4, r0
     3ae:	1f 3f       	cpi	r17, 0xFF	; 255
     3b0:	40 38       	cpi	r20, 0x80	; 128
     3b2:	40 3f       	cpi	r20, 0xF0	; 240
     3b4:	63 14       	cp	r6, r3
     3b6:	08 14       	cp	r0, r8
     3b8:	63 03       	mulsu	r22, r19
     3ba:	04 78       	andi	r16, 0x84	; 132
     3bc:	04 03       	mulsu	r16, r20
     3be:	61 59       	subi	r22, 0x91	; 145
     3c0:	49 4d       	sbci	r20, 0xD9	; 217
     3c2:	43 00       	.word	0x0043	; ????
     3c4:	7f 41       	sbci	r23, 0x1F	; 31
     3c6:	41 41       	sbci	r20, 0x11	; 17
     3c8:	02 04       	cpc	r0, r2
     3ca:	08 10       	cpse	r0, r8
     3cc:	20 00       	.word	0x0020	; ????
     3ce:	41 41       	sbci	r20, 0x11	; 17
     3d0:	41 7f       	andi	r20, 0xF1	; 241
     3d2:	04 02       	muls	r16, r20
     3d4:	01 02       	muls	r16, r17
     3d6:	04 40       	sbci	r16, 0x04	; 4
     3d8:	40 40       	sbci	r20, 0x00	; 0
     3da:	40 40       	sbci	r20, 0x00	; 0
     3dc:	00 03       	mulsu	r16, r16
     3de:	07 08       	sbc	r0, r7
     3e0:	00 20       	and	r0, r0
     3e2:	54 54       	subi	r21, 0x44	; 68
     3e4:	78 40       	sbci	r23, 0x08	; 8
     3e6:	7f 28       	or	r7, r15
     3e8:	44 44       	sbci	r20, 0x44	; 68
     3ea:	38 38       	cpi	r19, 0x88	; 136
     3ec:	44 44       	sbci	r20, 0x44	; 68
     3ee:	44 28       	or	r4, r4
     3f0:	38 44       	sbci	r19, 0x48	; 72
     3f2:	44 28       	or	r4, r4
     3f4:	7f 38       	cpi	r23, 0x8F	; 143
     3f6:	54 54       	subi	r21, 0x44	; 68
     3f8:	54 18       	sub	r5, r4
     3fa:	00 08       	sbc	r0, r0
     3fc:	7e 09       	sbc	r23, r14
     3fe:	02 18       	sub	r0, r2
     400:	a4 a4       	ldd	r10, Z+44	; 0x2c
     402:	9c 78       	andi	r25, 0x8C	; 140
     404:	7f 08       	sbc	r7, r15
     406:	04 04       	cpc	r0, r4
     408:	78 00       	.word	0x0078	; ????
     40a:	44 7d       	andi	r20, 0xD4	; 212
     40c:	40 00       	.word	0x0040	; ????
     40e:	20 40       	sbci	r18, 0x00	; 0
     410:	40 3d       	cpi	r20, 0xD0	; 208
     412:	00 7f       	andi	r16, 0xF0	; 240
     414:	10 28       	or	r1, r0
     416:	44 00       	.word	0x0044	; ????
     418:	00 41       	sbci	r16, 0x10	; 16
     41a:	7f 40       	sbci	r23, 0x0F	; 15
     41c:	00 7c       	andi	r16, 0xC0	; 192
     41e:	04 78       	andi	r16, 0x84	; 132
     420:	04 78       	andi	r16, 0x84	; 132
     422:	7c 08       	sbc	r7, r12
     424:	04 04       	cpc	r0, r4
     426:	78 38       	cpi	r23, 0x88	; 136
     428:	44 44       	sbci	r20, 0x44	; 68
     42a:	44 38       	cpi	r20, 0x84	; 132
     42c:	fc 18       	sub	r15, r12
     42e:	24 24       	eor	r2, r4
     430:	18 18       	sub	r1, r8
     432:	24 24       	eor	r2, r4
     434:	18 fc       	.word	0xfc18	; ????
     436:	7c 08       	sbc	r7, r12
     438:	04 04       	cpc	r0, r4
     43a:	08 48       	sbci	r16, 0x88	; 136
     43c:	54 54       	subi	r21, 0x44	; 68
     43e:	54 24       	eor	r5, r4
     440:	04 04       	cpc	r0, r4
     442:	3f 44       	sbci	r19, 0x4F	; 79
     444:	24 3c       	cpi	r18, 0xC4	; 196
     446:	40 40       	sbci	r20, 0x00	; 0
     448:	20 7c       	andi	r18, 0xC0	; 192
     44a:	1c 20       	and	r1, r12
     44c:	40 20       	and	r4, r0
     44e:	1c 3c       	cpi	r17, 0xCC	; 204
     450:	40 30       	cpi	r20, 0x00	; 0
     452:	40 3c       	cpi	r20, 0xC0	; 192
     454:	44 28       	or	r4, r4
     456:	10 28       	or	r1, r0
     458:	44 4c       	sbci	r20, 0xC4	; 196
     45a:	90 90 90 7c 	lds	r9, 0x7C90
     45e:	44 64       	ori	r20, 0x44	; 68
     460:	54 4c       	sbci	r21, 0xC4	; 196
     462:	44 00       	.word	0x0044	; ????
     464:	08 36       	cpi	r16, 0x68	; 104
     466:	41 00       	.word	0x0041	; ????
     468:	00 00       	nop
     46a:	77 00       	.word	0x0077	; ????
     46c:	00 00       	nop
     46e:	41 36       	cpi	r20, 0x61	; 97
     470:	08 00       	.word	0x0008	; ????
     472:	02 01       	movw	r0, r4
     474:	02 04       	cpc	r0, r2
     476:	02 3c       	cpi	r16, 0xC2	; 194
     478:	26 23       	and	r18, r22
     47a:	26 3c       	cpi	r18, 0xC6	; 198
     47c:	1e a1       	ldd	r17, Y+38	; 0x26
     47e:	a1 61       	ori	r26, 0x11	; 17
     480:	12 3a       	cpi	r17, 0xA2	; 162
     482:	40 40       	sbci	r20, 0x00	; 0
     484:	20 7a       	andi	r18, 0xA0	; 160
     486:	38 54       	subi	r19, 0x48	; 72
     488:	54 55       	subi	r21, 0x54	; 84
     48a:	59 21       	and	r21, r9
     48c:	55 55       	subi	r21, 0x55	; 85
     48e:	79 41       	sbci	r23, 0x19	; 25
     490:	21 54       	subi	r18, 0x41	; 65
     492:	54 78       	andi	r21, 0x84	; 132
     494:	41 21       	and	r20, r1
     496:	55 54       	subi	r21, 0x45	; 69
     498:	78 40       	sbci	r23, 0x08	; 8
     49a:	20 54       	subi	r18, 0x40	; 64
     49c:	55 79       	andi	r21, 0x95	; 149
     49e:	40 0c       	add	r4, r0
     4a0:	1e 52       	subi	r17, 0x2E	; 46
     4a2:	72 12       	cpse	r7, r18
     4a4:	39 55       	subi	r19, 0x59	; 89
     4a6:	55 55       	subi	r21, 0x55	; 85
     4a8:	59 39       	cpi	r21, 0x99	; 153
     4aa:	54 54       	subi	r21, 0x44	; 68
     4ac:	54 59       	subi	r21, 0x94	; 148
     4ae:	39 55       	subi	r19, 0x59	; 89
     4b0:	54 54       	subi	r21, 0x44	; 68
     4b2:	58 00       	.word	0x0058	; ????
     4b4:	00 45       	sbci	r16, 0x50	; 80
     4b6:	7c 41       	sbci	r23, 0x1C	; 28
     4b8:	00 02       	muls	r16, r16
     4ba:	45 7d       	andi	r20, 0xD5	; 213
     4bc:	42 00       	.word	0x0042	; ????
     4be:	01 45       	sbci	r16, 0x51	; 81
     4c0:	7c 40       	sbci	r23, 0x0C	; 12
     4c2:	f0 29       	or	r31, r0
     4c4:	24 29       	or	r18, r4
     4c6:	f0 f0       	brcs	.+60     	; 0x504 <__trampolines_end+0x308>
     4c8:	28 25       	eor	r18, r8
     4ca:	28 f0       	brcs	.+10     	; 0x4d6 <__trampolines_end+0x2da>
     4cc:	7c 54       	subi	r23, 0x4C	; 76
     4ce:	55 45       	sbci	r21, 0x55	; 85
     4d0:	00 20       	and	r0, r0
     4d2:	54 54       	subi	r21, 0x44	; 68
     4d4:	7c 54       	subi	r23, 0x4C	; 76
     4d6:	7c 0a       	sbc	r7, r28
     4d8:	09 7f       	andi	r16, 0xF9	; 249
     4da:	49 32       	cpi	r20, 0x29	; 41
     4dc:	49 49       	sbci	r20, 0x99	; 153
     4de:	49 32       	cpi	r20, 0x29	; 41
     4e0:	32 48       	sbci	r19, 0x82	; 130
     4e2:	48 48       	sbci	r20, 0x88	; 136
     4e4:	32 32       	cpi	r19, 0x22	; 34
     4e6:	4a 48       	sbci	r20, 0x8A	; 138
     4e8:	48 30       	cpi	r20, 0x08	; 8
     4ea:	3a 41       	sbci	r19, 0x1A	; 26
     4ec:	41 21       	and	r20, r1
     4ee:	7a 3a       	cpi	r23, 0xAA	; 170
     4f0:	42 40       	sbci	r20, 0x02	; 2
     4f2:	20 78       	andi	r18, 0x80	; 128
     4f4:	00 9d       	mul	r16, r0
     4f6:	a0 a0       	ldd	r10, Z+32	; 0x20
     4f8:	7d 39       	cpi	r23, 0x9D	; 157
     4fa:	44 44       	sbci	r20, 0x44	; 68
     4fc:	44 39       	cpi	r20, 0x94	; 148
     4fe:	3d 40       	sbci	r19, 0x0D	; 13
     500:	40 40       	sbci	r20, 0x00	; 0
     502:	3d 3c       	cpi	r19, 0xCD	; 205
     504:	24 ff       	sbrs	r18, 4
     506:	24 24       	eor	r2, r4
     508:	48 7e       	andi	r20, 0xE8	; 232
     50a:	49 43       	sbci	r20, 0x39	; 57
     50c:	66 2b       	or	r22, r22
     50e:	2f fc       	.word	0xfc2f	; ????
     510:	2f 2b       	or	r18, r31
     512:	ff 09       	sbc	r31, r15
     514:	29 f6       	brne	.-118    	; 0x4a0 <__trampolines_end+0x2a4>
     516:	20 c0       	rjmp	.+64     	; 0x558 <__trampolines_end+0x35c>
     518:	88 7e       	andi	r24, 0xE8	; 232
     51a:	09 03       	fmul	r16, r17
     51c:	20 54       	subi	r18, 0x40	; 64
     51e:	54 79       	andi	r21, 0x94	; 148
     520:	41 00       	.word	0x0041	; ????
     522:	00 44       	sbci	r16, 0x40	; 64
     524:	7d 41       	sbci	r23, 0x1D	; 29
     526:	30 48       	sbci	r19, 0x80	; 128
     528:	48 4a       	sbci	r20, 0xA8	; 168
     52a:	32 38       	cpi	r19, 0x82	; 130
     52c:	40 40       	sbci	r20, 0x00	; 0
     52e:	22 7a       	andi	r18, 0xA2	; 162
     530:	00 7a       	andi	r16, 0xA0	; 160
     532:	0a 0a       	sbc	r0, r26
     534:	72 7d       	andi	r23, 0xD2	; 210
     536:	0d 19       	sub	r16, r13
     538:	31 7d       	andi	r19, 0xD1	; 209
     53a:	26 29       	or	r18, r6
     53c:	29 2f       	mov	r18, r25
     53e:	28 26       	eor	r2, r24
     540:	29 29       	or	r18, r9
     542:	29 26       	eor	r2, r25
     544:	30 48       	sbci	r19, 0x80	; 128
     546:	4d 40       	sbci	r20, 0x0D	; 13
     548:	20 38       	cpi	r18, 0x80	; 128
     54a:	08 08       	sbc	r0, r8
     54c:	08 08       	sbc	r0, r8
     54e:	08 08       	sbc	r0, r8
     550:	08 08       	sbc	r0, r8
     552:	38 2f       	mov	r19, r24
     554:	10 c8       	rjmp	.-4064   	; 0xfffff576 <__eeprom_end+0xff7ef576>
     556:	ac ba       	out	0x1c, r10	; 28
     558:	2f 10       	cpse	r2, r15
     55a:	28 34       	cpi	r18, 0x48	; 72
     55c:	fa 00       	.word	0x00fa	; ????
     55e:	00 7b       	andi	r16, 0xB0	; 176
     560:	00 00       	nop
     562:	08 14       	cp	r0, r8
     564:	2a 14       	cp	r2, r10
     566:	22 22       	and	r2, r18
     568:	14 2a       	or	r1, r20
     56a:	14 08       	sbc	r1, r4
     56c:	aa 00       	.word	0x00aa	; ????
     56e:	55 00       	.word	0x0055	; ????
     570:	aa aa       	std	Y+50, r10	; 0x32
     572:	55 aa       	std	Z+53, r5	; 0x35
     574:	55 aa       	std	Z+53, r5	; 0x35
     576:	00 00       	nop
     578:	00 ff       	sbrs	r16, 0
     57a:	00 10       	cpse	r0, r0
     57c:	10 10       	cpse	r1, r0
     57e:	ff 00       	.word	0x00ff	; ????
     580:	14 14       	cp	r1, r4
     582:	14 ff       	sbrs	r17, 4
     584:	00 10       	cpse	r0, r0
     586:	10 ff       	sbrs	r17, 0
     588:	00 ff       	sbrs	r16, 0
     58a:	10 10       	cpse	r1, r0
     58c:	f0 10       	cpse	r15, r0
     58e:	f0 14       	cp	r15, r0
     590:	14 14       	cp	r1, r4
     592:	fc 00       	.word	0x00fc	; ????
     594:	14 14       	cp	r1, r4
     596:	f7 00       	.word	0x00f7	; ????
     598:	ff 00       	.word	0x00ff	; ????
     59a:	00 ff       	sbrs	r16, 0
     59c:	00 ff       	sbrs	r16, 0
     59e:	14 14       	cp	r1, r4
     5a0:	f4 04       	cpc	r15, r4
     5a2:	fc 14       	cp	r15, r12
     5a4:	14 17       	cp	r17, r20
     5a6:	10 1f       	adc	r17, r16
     5a8:	10 10       	cpse	r1, r0
     5aa:	1f 10       	cpse	r1, r15
     5ac:	1f 14       	cp	r1, r15
     5ae:	14 14       	cp	r1, r4
     5b0:	1f 00       	.word	0x001f	; ????
     5b2:	10 10       	cpse	r1, r0
     5b4:	10 f0       	brcs	.+4      	; 0x5ba <__trampolines_end+0x3be>
     5b6:	00 00       	nop
     5b8:	00 00       	nop
     5ba:	1f 10       	cpse	r1, r15
     5bc:	10 10       	cpse	r1, r0
     5be:	10 1f       	adc	r17, r16
     5c0:	10 10       	cpse	r1, r0
     5c2:	10 10       	cpse	r1, r0
     5c4:	f0 10       	cpse	r15, r0
     5c6:	00 00       	nop
     5c8:	00 ff       	sbrs	r16, 0
     5ca:	10 10       	cpse	r1, r0
     5cc:	10 10       	cpse	r1, r0
     5ce:	10 10       	cpse	r1, r0
     5d0:	10 10       	cpse	r1, r0
     5d2:	10 ff       	sbrs	r17, 0
     5d4:	10 00       	.word	0x0010	; ????
     5d6:	00 00       	nop
     5d8:	ff 14       	cp	r15, r15
     5da:	00 00       	nop
     5dc:	ff 00       	.word	0x00ff	; ????
     5de:	ff 00       	.word	0x00ff	; ????
     5e0:	00 1f       	adc	r16, r16
     5e2:	10 17       	cp	r17, r16
     5e4:	00 00       	nop
     5e6:	fc 04       	cpc	r15, r12
     5e8:	f4 14       	cp	r15, r4
     5ea:	14 17       	cp	r17, r20
     5ec:	10 17       	cp	r17, r16
     5ee:	14 14       	cp	r1, r4
     5f0:	f4 04       	cpc	r15, r4
     5f2:	f4 00       	.word	0x00f4	; ????
     5f4:	00 ff       	sbrs	r16, 0
     5f6:	00 f7       	brcc	.-64     	; 0x5b8 <__trampolines_end+0x3bc>
     5f8:	14 14       	cp	r1, r4
     5fa:	14 14       	cp	r1, r4
     5fc:	14 14       	cp	r1, r4
     5fe:	14 f7       	brge	.-60     	; 0x5c4 <__trampolines_end+0x3c8>
     600:	00 f7       	brcc	.-64     	; 0x5c2 <__trampolines_end+0x3c6>
     602:	14 14       	cp	r1, r4
     604:	14 17       	cp	r17, r20
     606:	14 10       	cpse	r1, r4
     608:	10 1f       	adc	r17, r16
     60a:	10 1f       	adc	r17, r16
     60c:	14 14       	cp	r1, r4
     60e:	14 f4       	brge	.+4      	; 0x614 <__trampolines_end+0x418>
     610:	14 10       	cpse	r1, r4
     612:	10 f0       	brcs	.+4      	; 0x618 <__trampolines_end+0x41c>
     614:	10 f0       	brcs	.+4      	; 0x61a <__trampolines_end+0x41e>
     616:	00 00       	nop
     618:	1f 10       	cpse	r1, r15
     61a:	1f 00       	.word	0x001f	; ????
     61c:	00 00       	nop
     61e:	1f 14       	cp	r1, r15
     620:	00 00       	nop
     622:	00 fc       	sbrc	r0, 0
     624:	14 00       	.word	0x0014	; ????
     626:	00 f0       	brcs	.+0      	; 0x628 <__trampolines_end+0x42c>
     628:	10 f0       	brcs	.+4      	; 0x62e <__trampolines_end+0x432>
     62a:	10 10       	cpse	r1, r0
     62c:	ff 10       	cpse	r15, r15
     62e:	ff 14       	cp	r15, r15
     630:	14 14       	cp	r1, r4
     632:	ff 14       	cp	r15, r15
     634:	10 10       	cpse	r1, r0
     636:	10 1f       	adc	r17, r16
     638:	00 00       	nop
     63a:	00 00       	nop
     63c:	f0 10       	cpse	r15, r0
     63e:	ff ff       	.word	0xffff	; ????
     640:	ff ff       	.word	0xffff	; ????
     642:	ff f0       	brie	.+62     	; 0x682 <__trampolines_end+0x486>
     644:	f0 f0       	brcs	.+60     	; 0x682 <__trampolines_end+0x486>
     646:	f0 f0       	brcs	.+60     	; 0x684 <__trampolines_end+0x488>
     648:	ff ff       	.word	0xffff	; ????
     64a:	ff 00       	.word	0x00ff	; ????
     64c:	00 00       	nop
     64e:	00 00       	nop
     650:	ff ff       	.word	0xffff	; ????
     652:	0f 0f       	add	r16, r31
     654:	0f 0f       	add	r16, r31
     656:	0f 38       	cpi	r16, 0x8F	; 143
     658:	44 44       	sbci	r20, 0x44	; 68
     65a:	38 44       	sbci	r19, 0x48	; 72
     65c:	7c 2a       	or	r7, r28
     65e:	2a 3e       	cpi	r18, 0xEA	; 234
     660:	14 7e       	andi	r17, 0xE4	; 228
     662:	02 02       	muls	r16, r18
     664:	06 06       	cpc	r0, r22
     666:	02 7e       	andi	r16, 0xE2	; 226
     668:	02 7e       	andi	r16, 0xE2	; 226
     66a:	02 63       	ori	r16, 0x32	; 50
     66c:	55 49       	sbci	r21, 0x95	; 149
     66e:	41 63       	ori	r20, 0x31	; 49
     670:	38 44       	sbci	r19, 0x48	; 72
     672:	44 3c       	cpi	r20, 0xC4	; 196
     674:	04 40       	sbci	r16, 0x04	; 4
     676:	7e 20       	and	r7, r14
     678:	1e 20       	and	r1, r14
     67a:	06 02       	muls	r16, r22
     67c:	7e 02       	muls	r23, r30
     67e:	02 99       	sbic	0x00, 2	; 0
     680:	a5 e7       	ldi	r26, 0x75	; 117
     682:	a5 99       	sbic	0x14, 5	; 20
     684:	1c 2a       	or	r1, r28
     686:	49 2a       	or	r4, r25
     688:	1c 4c       	sbci	r17, 0xCC	; 204
     68a:	72 01       	movw	r14, r4
     68c:	72 4c       	sbci	r23, 0xC2	; 194
     68e:	30 4a       	sbci	r19, 0xA0	; 160
     690:	4d 4d       	sbci	r20, 0xDD	; 221
     692:	30 30       	cpi	r19, 0x00	; 0
     694:	48 78       	andi	r20, 0x88	; 136
     696:	48 30       	cpi	r20, 0x08	; 8
     698:	bc 62       	ori	r27, 0x2C	; 44
     69a:	5a 46       	sbci	r21, 0x6A	; 106
     69c:	3d 3e       	cpi	r19, 0xED	; 237
     69e:	49 49       	sbci	r20, 0x99	; 153
     6a0:	49 00       	.word	0x0049	; ????
     6a2:	7e 01       	movw	r14, r28
     6a4:	01 01       	movw	r0, r2
     6a6:	7e 2a       	or	r7, r30
     6a8:	2a 2a       	or	r2, r26
     6aa:	2a 2a       	or	r2, r26
     6ac:	44 44       	sbci	r20, 0x44	; 68
     6ae:	5f 44       	sbci	r21, 0x4F	; 79
     6b0:	44 40       	sbci	r20, 0x04	; 4
     6b2:	51 4a       	sbci	r21, 0xA1	; 161
     6b4:	44 40       	sbci	r20, 0x04	; 4
     6b6:	40 44       	sbci	r20, 0x40	; 64
     6b8:	4a 51       	subi	r20, 0x1A	; 26
     6ba:	40 00       	.word	0x0040	; ????
     6bc:	00 ff       	sbrs	r16, 0
     6be:	01 03       	mulsu	r16, r17
     6c0:	e0 80       	ld	r14, Z
     6c2:	ff 00       	.word	0x00ff	; ????
     6c4:	00 08       	sbc	r0, r0
     6c6:	08 6b       	ori	r16, 0xB8	; 184
     6c8:	6b 08       	sbc	r6, r11
     6ca:	36 12       	cpse	r3, r22
     6cc:	36 24       	eor	r3, r6
     6ce:	36 06       	cpc	r3, r22
     6d0:	0f 09       	sbc	r16, r15
     6d2:	0f 06       	cpc	r0, r31
     6d4:	00 00       	nop
     6d6:	18 18       	sub	r1, r8
     6d8:	00 00       	nop
     6da:	00 10       	cpse	r0, r0
     6dc:	10 00       	.word	0x0010	; ????
     6de:	30 40       	sbci	r19, 0x00	; 0
     6e0:	ff 01       	movw	r30, r30
     6e2:	01 00       	.word	0x0001	; ????
     6e4:	1f 01       	movw	r2, r30
     6e6:	01 1e       	adc	r0, r17
     6e8:	00 19       	sub	r16, r0
     6ea:	1d 17       	cp	r17, r29
     6ec:	12 00       	.word	0x0012	; ????
     6ee:	3c 3c       	cpi	r19, 0xCC	; 204
     6f0:	3c 3c       	cpi	r19, 0xCC	; 204
     6f2:	00 00       	nop
     6f4:	00 00       	nop
	...

000006f8 <__ctors_end>:
     6f8:	11 24       	eor	r1, r1
     6fa:	1f be       	out	0x3f, r1	; 63
     6fc:	cf ef       	ldi	r28, 0xFF	; 255
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	df e2       	ldi	r29, 0x2F	; 47
     702:	de bf       	out	0x3e, r29	; 62

00000704 <__do_copy_data>:
     704:	15 e2       	ldi	r17, 0x25	; 37
     706:	a0 e0       	ldi	r26, 0x00	; 0
     708:	b0 e2       	ldi	r27, 0x20	; 32
     70a:	ea e2       	ldi	r30, 0x2A	; 42
     70c:	f8 e3       	ldi	r31, 0x38	; 56
     70e:	00 e0       	ldi	r16, 0x00	; 0
     710:	0b bf       	out	0x3b, r16	; 59
     712:	02 c0       	rjmp	.+4      	; 0x718 <__do_copy_data+0x14>
     714:	07 90       	elpm	r0, Z+
     716:	0d 92       	st	X+, r0
     718:	a8 3c       	cpi	r26, 0xC8	; 200
     71a:	b1 07       	cpc	r27, r17
     71c:	d9 f7       	brne	.-10     	; 0x714 <__do_copy_data+0x10>

0000071e <__do_clear_bss>:
     71e:	27 e2       	ldi	r18, 0x27	; 39
     720:	a8 ec       	ldi	r26, 0xC8	; 200
     722:	b5 e2       	ldi	r27, 0x25	; 37
     724:	01 c0       	rjmp	.+2      	; 0x728 <.do_clear_bss_start>

00000726 <.do_clear_bss_loop>:
     726:	1d 92       	st	X+, r1

00000728 <.do_clear_bss_start>:
     728:	a1 36       	cpi	r26, 0x61	; 97
     72a:	b2 07       	cpc	r27, r18
     72c:	e1 f7       	brne	.-8      	; 0x726 <.do_clear_bss_loop>
     72e:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <main>
     732:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <_exit>

00000736 <__bad_interrupt>:
     736:	64 cc       	rjmp	.-1848   	; 0x0 <__vectors>

00000738 <clock_setup_32_mhz>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
}

void clock_setup_32_mhz(void) {
	
	OSC.CTRL |= OSC_RC32MEN_bm;
     738:	80 91 50 00 	lds	r24, 0x0050
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     742:	80 91 51 00 	lds	r24, 0x0051
     746:	81 ff       	sbrs	r24, 1
     748:	fc cf       	rjmp	.-8      	; 0x742 <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc;
     74a:	88 ed       	ldi	r24, 0xD8	; 216
     74c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 40 00 	sts	0x0040, r24
     754:	08 95       	ret

00000756 <at_cipsend>:
		_delay_ms(1000);
		at_cipsend(str);
		_delay_ms(10000);
		esp8266_send_cmd("AT+CIPCLOSE=0\r", 100);
	}
}
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	cd b7       	in	r28, 0x3d	; 61
     764:	de b7       	in	r29, 0x3e	; 62
     766:	e7 97       	sbiw	r28, 0x37	; 55
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	8c 01       	movw	r16, r24
     76e:	10 92 94 26 	sts	0x2694, r1
     772:	fc 01       	movw	r30, r24
     774:	01 90       	ld	r0, Z+
     776:	00 20       	and	r0, r0
     778:	e9 f7       	brne	.-6      	; 0x774 <at_cipsend+0x1e>
     77a:	cf 01       	movw	r24, r30
     77c:	01 97       	sbiw	r24, 0x01	; 1
     77e:	4a e0       	ldi	r20, 0x0A	; 10
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	be 01       	movw	r22, r28
     784:	6d 5c       	subi	r22, 0xCD	; 205
     786:	7f 4f       	sbci	r23, 0xFF	; 255
     788:	80 1b       	sub	r24, r16
     78a:	91 0b       	sbc	r25, r17
     78c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <itoa>
     790:	8d e0       	ldi	r24, 0x0D	; 13
     792:	e2 e1       	ldi	r30, 0x12	; 18
     794:	f0 e2       	ldi	r31, 0x20	; 32
     796:	9e 01       	movw	r18, r28
     798:	2f 5f       	subi	r18, 0xFF	; 255
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	79 01       	movw	r14, r18
     79e:	d9 01       	movw	r26, r18
     7a0:	01 90       	ld	r0, Z+
     7a2:	0d 92       	st	X+, r0
     7a4:	8a 95       	dec	r24
     7a6:	e1 f7       	brne	.-8      	; 0x7a0 <at_cipsend+0x4a>
     7a8:	be 01       	movw	r22, r28
     7aa:	6d 5c       	subi	r22, 0xCD	; 205
     7ac:	7f 4f       	sbci	r23, 0xFF	; 255
     7ae:	ce 01       	movw	r24, r28
     7b0:	0e 96       	adiw	r24, 0x0e	; 14
     7b2:	0e 94 94 18 	call	0x3128	; 0x3128 <strcpy>
     7b6:	f7 01       	movw	r30, r14
     7b8:	01 90       	ld	r0, Z+
     7ba:	00 20       	and	r0, r0
     7bc:	e9 f7       	brne	.-6      	; 0x7b8 <at_cipsend+0x62>
     7be:	31 97       	sbiw	r30, 0x01	; 1
     7c0:	8d e0       	ldi	r24, 0x0D	; 13
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	80 83       	st	Z, r24
     7c6:	91 83       	std	Z+1, r25	; 0x01
     7c8:	86 e0       	ldi	r24, 0x06	; 6
     7ca:	80 93 0e 27 	sts	0x270E, r24
     7ce:	c7 01       	movw	r24, r14
     7d0:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     7d4:	3f ef       	ldi	r19, 0xFF	; 255
     7d6:	81 ee       	ldi	r24, 0xE1	; 225
     7d8:	94 e0       	ldi	r25, 0x04	; 4
     7da:	31 50       	subi	r19, 0x01	; 1
     7dc:	80 40       	sbci	r24, 0x00	; 0
     7de:	90 40       	sbci	r25, 0x00	; 0
     7e0:	e1 f7       	brne	.-8      	; 0x7da <at_cipsend+0x84>
     7e2:	00 c0       	rjmp	.+0      	; 0x7e4 <at_cipsend+0x8e>
     7e4:	00 00       	nop
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	80 93 0e 27 	sts	0x270E, r24
     7ec:	c8 01       	movw	r24, r16
     7ee:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     7f2:	ef ef       	ldi	r30, 0xFF	; 255
     7f4:	f1 ee       	ldi	r31, 0xE1	; 225
     7f6:	24 e0       	ldi	r18, 0x04	; 4
     7f8:	e1 50       	subi	r30, 0x01	; 1
     7fa:	f0 40       	sbci	r31, 0x00	; 0
     7fc:	20 40       	sbci	r18, 0x00	; 0
     7fe:	e1 f7       	brne	.-8      	; 0x7f8 <at_cipsend+0xa2>
     800:	00 c0       	rjmp	.+0      	; 0x802 <at_cipsend+0xac>
     802:	00 00       	nop
     804:	e7 96       	adiw	r28, 0x37	; 55
     806:	cd bf       	out	0x3d, r28	; 61
     808:	de bf       	out	0x3e, r29	; 62
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	08 95       	ret

00000818 <esp8266_on>:
     818:	e0 e6       	ldi	r30, 0x60	; 96
     81a:	f6 e0       	ldi	r31, 0x06	; 6
     81c:	80 e2       	ldi	r24, 0x20	; 32
     81e:	81 83       	std	Z+1, r24	; 0x01
     820:	85 83       	std	Z+5, r24	; 0x05
     822:	2f ef       	ldi	r18, 0xFF	; 255
     824:	33 e2       	ldi	r19, 0x23	; 35
     826:	84 ef       	ldi	r24, 0xF4	; 244
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	21 50       	subi	r18, 0x01	; 1
     82c:	30 40       	sbci	r19, 0x00	; 0
     82e:	80 40       	sbci	r24, 0x00	; 0
     830:	90 40       	sbci	r25, 0x00	; 0
     832:	d9 f7       	brne	.-10     	; 0x82a <esp8266_on+0x12>
     834:	00 c0       	rjmp	.+0      	; 0x836 <esp8266_on+0x1e>
     836:	00 00       	nop
     838:	08 95       	ret

0000083a <esp8266_join_ap>:
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
     84a:	c4 56       	subi	r28, 0x64	; 100
     84c:	d1 09       	sbc	r29, r1
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	de bf       	out	0x3e, r29	; 62
     852:	7b 01       	movw	r14, r22
     854:	2a e0       	ldi	r18, 0x0A	; 10
     856:	ec e4       	ldi	r30, 0x4C	; 76
     858:	f0 e2       	ldi	r31, 0x20	; 32
     85a:	8e 01       	movw	r16, r28
     85c:	0f 5f       	subi	r16, 0xFF	; 255
     85e:	1f 4f       	sbci	r17, 0xFF	; 255
     860:	d8 01       	movw	r26, r16
     862:	01 90       	ld	r0, Z+
     864:	0d 92       	st	X+, r0
     866:	2a 95       	dec	r18
     868:	e1 f7       	brne	.-8      	; 0x862 <esp8266_join_ap+0x28>
     86a:	bc 01       	movw	r22, r24
     86c:	ce 01       	movw	r24, r28
     86e:	0b 96       	adiw	r24, 0x0b	; 11
     870:	0e 94 94 18 	call	0x3128	; 0x3128 <strcpy>
     874:	f8 01       	movw	r30, r16
     876:	01 90       	ld	r0, Z+
     878:	00 20       	and	r0, r0
     87a:	e9 f7       	brne	.-6      	; 0x876 <esp8266_join_ap+0x3c>
     87c:	31 97       	sbiw	r30, 0x01	; 1
     87e:	42 e2       	ldi	r20, 0x22	; 34
     880:	5c e2       	ldi	r21, 0x2C	; 44
     882:	62 e2       	ldi	r22, 0x22	; 34
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	40 83       	st	Z, r20
     888:	51 83       	std	Z+1, r21	; 0x01
     88a:	62 83       	std	Z+2, r22	; 0x02
     88c:	73 83       	std	Z+3, r23	; 0x03
     88e:	b7 01       	movw	r22, r14
     890:	cf 01       	movw	r24, r30
     892:	03 96       	adiw	r24, 0x03	; 3
     894:	0e 94 94 18 	call	0x3128	; 0x3128 <strcpy>
     898:	f8 01       	movw	r30, r16
     89a:	01 90       	ld	r0, Z+
     89c:	00 20       	and	r0, r0
     89e:	e9 f7       	brne	.-6      	; 0x89a <esp8266_join_ap+0x60>
     8a0:	31 97       	sbiw	r30, 0x01	; 1
     8a2:	82 e2       	ldi	r24, 0x22	; 34
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	80 83       	st	Z, r24
     8a8:	91 83       	std	Z+1, r25	; 0x01
     8aa:	86 e0       	ldi	r24, 0x06	; 6
     8ac:	80 93 0e 27 	sts	0x270E, r24
     8b0:	c8 01       	movw	r24, r16
     8b2:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     8b6:	2f ef       	ldi	r18, 0xFF	; 255
     8b8:	33 ed       	ldi	r19, 0xD3	; 211
     8ba:	40 e3       	ldi	r20, 0x30	; 48
     8bc:	21 50       	subi	r18, 0x01	; 1
     8be:	30 40       	sbci	r19, 0x00	; 0
     8c0:	40 40       	sbci	r20, 0x00	; 0
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <esp8266_join_ap+0x82>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <esp8266_join_ap+0x8c>
     8c6:	00 00       	nop
     8c8:	20 91 0e 27 	lds	r18, 0x270E
     8cc:	8e e3       	ldi	r24, 0x3E	; 62
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	10 c0       	rjmp	.+32     	; 0x8f2 <esp8266_join_ap+0xb8>
     8d2:	2f ef       	ldi	r18, 0xFF	; 255
     8d4:	37 ea       	ldi	r19, 0xA7	; 167
     8d6:	41 e6       	ldi	r20, 0x61	; 97
     8d8:	21 50       	subi	r18, 0x01	; 1
     8da:	30 40       	sbci	r19, 0x00	; 0
     8dc:	40 40       	sbci	r20, 0x00	; 0
     8de:	e1 f7       	brne	.-8      	; 0x8d8 <esp8266_join_ap+0x9e>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <esp8266_join_ap+0xa8>
     8e2:	00 00       	nop
     8e4:	01 97       	sbiw	r24, 0x01	; 1
     8e6:	00 97       	sbiw	r24, 0x00	; 0
     8e8:	29 f1       	breq	.+74     	; 0x934 <esp8266_join_ap+0xfa>
     8ea:	20 91 0e 27 	lds	r18, 0x270E
     8ee:	22 23       	and	r18, r18
     8f0:	f9 f0       	breq	.+62     	; 0x930 <esp8266_join_ap+0xf6>
     8f2:	21 30       	cpi	r18, 0x01	; 1
     8f4:	71 f7       	brne	.-36     	; 0x8d2 <esp8266_join_ap+0x98>
     8f6:	86 e0       	ldi	r24, 0x06	; 6
     8f8:	80 93 0e 27 	sts	0x270E, r24
     8fc:	87 e5       	ldi	r24, 0x57	; 87
     8fe:	90 e2       	ldi	r25, 0x20	; 32
     900:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     904:	8f ef       	ldi	r24, 0xFF	; 255
     906:	93 ed       	ldi	r25, 0xD3	; 211
     908:	20 e3       	ldi	r18, 0x30	; 48
     90a:	81 50       	subi	r24, 0x01	; 1
     90c:	90 40       	sbci	r25, 0x00	; 0
     90e:	20 40       	sbci	r18, 0x00	; 0
     910:	e1 f7       	brne	.-8      	; 0x90a <esp8266_join_ap+0xd0>
     912:	00 c0       	rjmp	.+0      	; 0x914 <esp8266_join_ap+0xda>
     914:	00 00       	nop
     916:	80 91 0e 27 	lds	r24, 0x270E
     91a:	cc 59       	subi	r28, 0x9C	; 156
     91c:	df 4f       	sbci	r29, 0xFF	; 255
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	de bf       	out	0x3e, r29	; 62
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	ef 90       	pop	r14
     92e:	08 95       	ret
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f3 cf       	rjmp	.-26     	; 0x91a <esp8266_join_ap+0xe0>
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	f1 cf       	rjmp	.-30     	; 0x91a <esp8266_join_ap+0xe0>

00000938 <esp8266_setup_webserver>:
     938:	cf 93       	push	r28
     93a:	c8 2f       	mov	r28, r24
     93c:	96 e0       	ldi	r25, 0x06	; 6
     93e:	90 93 0e 27 	sts	0x270E, r25
     942:	8e e9       	ldi	r24, 0x9E	; 158
     944:	90 e2       	ldi	r25, 0x20	; 32
     946:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     94a:	2f ef       	ldi	r18, 0xFF	; 255
     94c:	33 e2       	ldi	r19, 0x23	; 35
     94e:	84 ef       	ldi	r24, 0xF4	; 244
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	21 50       	subi	r18, 0x01	; 1
     954:	30 40       	sbci	r19, 0x00	; 0
     956:	80 40       	sbci	r24, 0x00	; 0
     958:	90 40       	sbci	r25, 0x00	; 0
     95a:	d9 f7       	brne	.-10     	; 0x952 <esp8266_setup_webserver+0x1a>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <esp8266_setup_webserver+0x26>
     95e:	00 00       	nop
     960:	90 91 0e 27 	lds	r25, 0x270E
     964:	91 30       	cpi	r25, 0x01	; 1
     966:	19 f0       	breq	.+6      	; 0x96e <esp8266_setup_webserver+0x36>
     968:	89 2f       	mov	r24, r25
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret
     96e:	86 e0       	ldi	r24, 0x06	; 6
     970:	80 93 0e 27 	sts	0x270E, r24
     974:	c1 11       	cpse	r28, r1
     976:	4a c0       	rjmp	.+148    	; 0xa0c <esp8266_setup_webserver+0xd4>
     978:	80 e4       	ldi	r24, 0x40	; 64
     97a:	90 e2       	ldi	r25, 0x20	; 32
     97c:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     980:	9f ef       	ldi	r25, 0xFF	; 255
     982:	23 ed       	ldi	r18, 0xD3	; 211
     984:	30 e3       	ldi	r19, 0x30	; 48
     986:	91 50       	subi	r25, 0x01	; 1
     988:	20 40       	sbci	r18, 0x00	; 0
     98a:	30 40       	sbci	r19, 0x00	; 0
     98c:	e1 f7       	brne	.-8      	; 0x986 <esp8266_setup_webserver+0x4e>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <esp8266_setup_webserver+0x58>
     990:	00 00       	nop
     992:	80 91 0e 27 	lds	r24, 0x270E
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	41 f7       	brne	.-48     	; 0x96a <esp8266_setup_webserver+0x32>
     99a:	62 eb       	ldi	r22, 0xB2	; 178
     99c:	70 e2       	ldi	r23, 0x20	; 32
     99e:	8d eb       	ldi	r24, 0xBD	; 189
     9a0:	90 e2       	ldi	r25, 0x20	; 32
     9a2:	4b df       	rcall	.-362    	; 0x83a <esp8266_join_ap>
     9a4:	86 e0       	ldi	r24, 0x06	; 6
     9a6:	80 93 0e 27 	sts	0x270E, r24
     9aa:	87 ec       	ldi	r24, 0xC7	; 199
     9ac:	90 e2       	ldi	r25, 0x20	; 32
     9ae:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	93 ed       	ldi	r25, 0xD3	; 211
     9b6:	20 e3       	ldi	r18, 0x30	; 48
     9b8:	81 50       	subi	r24, 0x01	; 1
     9ba:	90 40       	sbci	r25, 0x00	; 0
     9bc:	20 40       	sbci	r18, 0x00	; 0
     9be:	e1 f7       	brne	.-8      	; 0x9b8 <esp8266_setup_webserver+0x80>
     9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <esp8266_setup_webserver+0x8a>
     9c2:	00 00       	nop
     9c4:	86 e0       	ldi	r24, 0x06	; 6
     9c6:	80 93 0e 27 	sts	0x270E, r24
     9ca:	80 ed       	ldi	r24, 0xD0	; 208
     9cc:	90 e2       	ldi	r25, 0x20	; 32
     9ce:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     9d2:	3f ef       	ldi	r19, 0xFF	; 255
     9d4:	83 ed       	ldi	r24, 0xD3	; 211
     9d6:	90 e3       	ldi	r25, 0x30	; 48
     9d8:	31 50       	subi	r19, 0x01	; 1
     9da:	80 40       	sbci	r24, 0x00	; 0
     9dc:	90 40       	sbci	r25, 0x00	; 0
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <esp8266_setup_webserver+0xa0>
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <esp8266_setup_webserver+0xaa>
     9e2:	00 00       	nop
     9e4:	86 e0       	ldi	r24, 0x06	; 6
     9e6:	80 93 0e 27 	sts	0x270E, r24
     9ea:	c1 11       	cpse	r28, r1
     9ec:	1d c0       	rjmp	.+58     	; 0xa28 <esp8266_setup_webserver+0xf0>
     9ee:	80 ef       	ldi	r24, 0xF0	; 240
     9f0:	90 e2       	ldi	r25, 0x20	; 32
     9f2:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     9f6:	9f ef       	ldi	r25, 0xFF	; 255
     9f8:	23 ed       	ldi	r18, 0xD3	; 211
     9fa:	30 e3       	ldi	r19, 0x30	; 48
     9fc:	91 50       	subi	r25, 0x01	; 1
     9fe:	20 40       	sbci	r18, 0x00	; 0
     a00:	30 40       	sbci	r19, 0x00	; 0
     a02:	e1 f7       	brne	.-8      	; 0x9fc <esp8266_setup_webserver+0xc4>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <esp8266_setup_webserver+0xce>
     a06:	00 00       	nop
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	af cf       	rjmp	.-162    	; 0x96a <esp8266_setup_webserver+0x32>
     a0c:	86 ea       	ldi	r24, 0xA6	; 166
     a0e:	90 e2       	ldi	r25, 0x20	; 32
     a10:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     a14:	2f ef       	ldi	r18, 0xFF	; 255
     a16:	33 ed       	ldi	r19, 0xD3	; 211
     a18:	80 e3       	ldi	r24, 0x30	; 48
     a1a:	21 50       	subi	r18, 0x01	; 1
     a1c:	30 40       	sbci	r19, 0x00	; 0
     a1e:	80 40       	sbci	r24, 0x00	; 0
     a20:	e1 f7       	brne	.-8      	; 0xa1a <esp8266_setup_webserver+0xe2>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <esp8266_setup_webserver+0xec>
     a24:	00 00       	nop
     a26:	b5 cf       	rjmp	.-150    	; 0x992 <esp8266_setup_webserver+0x5a>
     a28:	8c ed       	ldi	r24, 0xDC	; 220
     a2a:	90 e2       	ldi	r25, 0x20	; 32
     a2c:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     a30:	2f ef       	ldi	r18, 0xFF	; 255
     a32:	33 ed       	ldi	r19, 0xD3	; 211
     a34:	80 e3       	ldi	r24, 0x30	; 48
     a36:	21 50       	subi	r18, 0x01	; 1
     a38:	30 40       	sbci	r19, 0x00	; 0
     a3a:	80 40       	sbci	r24, 0x00	; 0
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <esp8266_setup_webserver+0xfe>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <esp8266_setup_webserver+0x108>
     a40:	00 00       	nop
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	92 cf       	rjmp	.-220    	; 0x96a <esp8266_setup_webserver+0x32>

00000a46 <esp8266_telnet_server>:
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	e7 97       	sbiw	r28, 0x37	; 55
     a5a:	cd bf       	out	0x3d, r28	; 61
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	80 91 0e 27 	lds	r24, 0x270E
     a62:	83 30       	cpi	r24, 0x03	; 3
     a64:	09 f4       	brne	.+2      	; 0xa68 <esp8266_telnet_server+0x22>
     a66:	bc c1       	rjmp	.+888    	; 0xde0 <esp8266_telnet_server+0x39a>
     a68:	62 e6       	ldi	r22, 0x62	; 98
     a6a:	71 e2       	ldi	r23, 0x21	; 33
     a6c:	8c ed       	ldi	r24, 0xDC	; 220
     a6e:	96 e2       	ldi	r25, 0x26	; 38
     a70:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
     a74:	89 2b       	or	r24, r25
     a76:	09 f4       	brne	.+2      	; 0xa7a <esp8266_telnet_server+0x34>
     a78:	12 c1       	rjmp	.+548    	; 0xc9e <esp8266_telnet_server+0x258>
     a7a:	66 e6       	ldi	r22, 0x66	; 102
     a7c:	71 e2       	ldi	r23, 0x21	; 33
     a7e:	8c ed       	ldi	r24, 0xDC	; 220
     a80:	96 e2       	ldi	r25, 0x26	; 38
     a82:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
     a86:	89 2b       	or	r24, r25
     a88:	09 f4       	brne	.+2      	; 0xa8c <esp8266_telnet_server+0x46>
     a8a:	59 c0       	rjmp	.+178    	; 0xb3e <esp8266_telnet_server+0xf8>
     a8c:	82 e3       	ldi	r24, 0x32	; 50
     a8e:	ec ed       	ldi	r30, 0xDC	; 220
     a90:	f6 e2       	ldi	r31, 0x26	; 38
     a92:	df 01       	movw	r26, r30
     a94:	1d 92       	st	X+, r1
     a96:	8a 95       	dec	r24
     a98:	e9 f7       	brne	.-6      	; 0xa94 <esp8266_telnet_server+0x4e>
     a9a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <ht1632c_fill_screen>
     a9e:	10 92 94 26 	sts	0x2694, r1
     aa2:	4a e0       	ldi	r20, 0x0A	; 10
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	be 01       	movw	r22, r28
     aa8:	6d 5c       	subi	r22, 0xCD	; 205
     aaa:	7f 4f       	sbci	r23, 0xFF	; 255
     aac:	82 e1       	ldi	r24, 0x12	; 18
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <itoa>
     ab4:	8d e0       	ldi	r24, 0x0D	; 13
     ab6:	e2 e1       	ldi	r30, 0x12	; 18
     ab8:	f0 e2       	ldi	r31, 0x20	; 32
     aba:	8e 01       	movw	r16, r28
     abc:	0f 5f       	subi	r16, 0xFF	; 255
     abe:	1f 4f       	sbci	r17, 0xFF	; 255
     ac0:	d8 01       	movw	r26, r16
     ac2:	01 90       	ld	r0, Z+
     ac4:	0d 92       	st	X+, r0
     ac6:	8a 95       	dec	r24
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <esp8266_telnet_server+0x7c>
     aca:	be 01       	movw	r22, r28
     acc:	6d 5c       	subi	r22, 0xCD	; 205
     ace:	7f 4f       	sbci	r23, 0xFF	; 255
     ad0:	ce 01       	movw	r24, r28
     ad2:	0e 96       	adiw	r24, 0x0e	; 14
     ad4:	0e 94 94 18 	call	0x3128	; 0x3128 <strcpy>
     ad8:	f8 01       	movw	r30, r16
     ada:	01 90       	ld	r0, Z+
     adc:	00 20       	and	r0, r0
     ade:	e9 f7       	brne	.-6      	; 0xada <esp8266_telnet_server+0x94>
     ae0:	31 97       	sbiw	r30, 0x01	; 1
     ae2:	8d e0       	ldi	r24, 0x0D	; 13
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	80 83       	st	Z, r24
     ae8:	91 83       	std	Z+1, r25	; 0x01
     aea:	86 e0       	ldi	r24, 0x06	; 6
     aec:	80 93 0e 27 	sts	0x270E, r24
     af0:	c8 01       	movw	r24, r16
     af2:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     af6:	bf ef       	ldi	r27, 0xFF	; 255
     af8:	e1 ee       	ldi	r30, 0xE1	; 225
     afa:	f4 e0       	ldi	r31, 0x04	; 4
     afc:	b1 50       	subi	r27, 0x01	; 1
     afe:	e0 40       	sbci	r30, 0x00	; 0
     b00:	f0 40       	sbci	r31, 0x00	; 0
     b02:	e1 f7       	brne	.-8      	; 0xafc <esp8266_telnet_server+0xb6>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <esp8266_telnet_server+0xc0>
     b06:	00 00       	nop
     b08:	86 e0       	ldi	r24, 0x06	; 6
     b0a:	80 93 0e 27 	sts	0x270E, r24
     b0e:	89 e6       	ldi	r24, 0x69	; 105
     b10:	91 e2       	ldi	r25, 0x21	; 33
     b12:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     b16:	2f ef       	ldi	r18, 0xFF	; 255
     b18:	31 ee       	ldi	r19, 0xE1	; 225
     b1a:	44 e0       	ldi	r20, 0x04	; 4
     b1c:	21 50       	subi	r18, 0x01	; 1
     b1e:	30 40       	sbci	r19, 0x00	; 0
     b20:	40 40       	sbci	r20, 0x00	; 0
     b22:	e1 f7       	brne	.-8      	; 0xb1c <esp8266_telnet_server+0xd6>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <esp8266_telnet_server+0xe0>
     b26:	00 00       	nop
     b28:	e7 96       	adiw	r28, 0x37	; 55
     b2a:	cd bf       	out	0x3d, r28	; 61
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	08 95       	ret
     b3e:	6c e7       	ldi	r22, 0x7C	; 124
     b40:	71 e2       	ldi	r23, 0x21	; 33
     b42:	8c ed       	ldi	r24, 0xDC	; 220
     b44:	96 e2       	ldi	r25, 0x26	; 38
     b46:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
     b4a:	89 2b       	or	r24, r25
     b4c:	09 f4       	brne	.+2      	; 0xb50 <esp8266_telnet_server+0x10a>
     b4e:	4f c0       	rjmp	.+158    	; 0xbee <esp8266_telnet_server+0x1a8>
     b50:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <ht1632c_clear_screen>
     b54:	82 e3       	ldi	r24, 0x32	; 50
     b56:	ec ed       	ldi	r30, 0xDC	; 220
     b58:	f6 e2       	ldi	r31, 0x26	; 38
     b5a:	df 01       	movw	r26, r30
     b5c:	1d 92       	st	X+, r1
     b5e:	8a 95       	dec	r24
     b60:	e9 f7       	brne	.-6      	; 0xb5c <esp8266_telnet_server+0x116>
     b62:	10 92 94 26 	sts	0x2694, r1
     b66:	4a e0       	ldi	r20, 0x0A	; 10
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	be 01       	movw	r22, r28
     b6c:	6d 5c       	subi	r22, 0xCD	; 205
     b6e:	7f 4f       	sbci	r23, 0xFF	; 255
     b70:	82 e1       	ldi	r24, 0x12	; 18
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <itoa>
     b78:	8d e0       	ldi	r24, 0x0D	; 13
     b7a:	e2 e1       	ldi	r30, 0x12	; 18
     b7c:	f0 e2       	ldi	r31, 0x20	; 32
     b7e:	8e 01       	movw	r16, r28
     b80:	0f 5f       	subi	r16, 0xFF	; 255
     b82:	1f 4f       	sbci	r17, 0xFF	; 255
     b84:	d8 01       	movw	r26, r16
     b86:	01 90       	ld	r0, Z+
     b88:	0d 92       	st	X+, r0
     b8a:	8a 95       	dec	r24
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <esp8266_telnet_server+0x140>
     b8e:	be 01       	movw	r22, r28
     b90:	6d 5c       	subi	r22, 0xCD	; 205
     b92:	7f 4f       	sbci	r23, 0xFF	; 255
     b94:	ce 01       	movw	r24, r28
     b96:	0e 96       	adiw	r24, 0x0e	; 14
     b98:	0e 94 94 18 	call	0x3128	; 0x3128 <strcpy>
     b9c:	f8 01       	movw	r30, r16
     b9e:	01 90       	ld	r0, Z+
     ba0:	00 20       	and	r0, r0
     ba2:	e9 f7       	brne	.-6      	; 0xb9e <esp8266_telnet_server+0x158>
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	8d e0       	ldi	r24, 0x0D	; 13
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	80 83       	st	Z, r24
     bac:	91 83       	std	Z+1, r25	; 0x01
     bae:	86 e0       	ldi	r24, 0x06	; 6
     bb0:	80 93 0e 27 	sts	0x270E, r24
     bb4:	c8 01       	movw	r24, r16
     bb6:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     bba:	bf ef       	ldi	r27, 0xFF	; 255
     bbc:	e1 ee       	ldi	r30, 0xE1	; 225
     bbe:	f4 e0       	ldi	r31, 0x04	; 4
     bc0:	b1 50       	subi	r27, 0x01	; 1
     bc2:	e0 40       	sbci	r30, 0x00	; 0
     bc4:	f0 40       	sbci	r31, 0x00	; 0
     bc6:	e1 f7       	brne	.-8      	; 0xbc0 <esp8266_telnet_server+0x17a>
     bc8:	00 c0       	rjmp	.+0      	; 0xbca <esp8266_telnet_server+0x184>
     bca:	00 00       	nop
     bcc:	86 e0       	ldi	r24, 0x06	; 6
     bce:	80 93 0e 27 	sts	0x270E, r24
     bd2:	80 e8       	ldi	r24, 0x80	; 128
     bd4:	91 e2       	ldi	r25, 0x21	; 33
     bd6:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     bda:	2f ef       	ldi	r18, 0xFF	; 255
     bdc:	31 ee       	ldi	r19, 0xE1	; 225
     bde:	44 e0       	ldi	r20, 0x04	; 4
     be0:	21 50       	subi	r18, 0x01	; 1
     be2:	30 40       	sbci	r19, 0x00	; 0
     be4:	40 40       	sbci	r20, 0x00	; 0
     be6:	e1 f7       	brne	.-8      	; 0xbe0 <esp8266_telnet_server+0x19a>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <esp8266_telnet_server+0x1a4>
     bea:	00 00       	nop
     bec:	9d cf       	rjmp	.-198    	; 0xb28 <esp8266_telnet_server+0xe2>
     bee:	63 e9       	ldi	r22, 0x93	; 147
     bf0:	71 e2       	ldi	r23, 0x21	; 33
     bf2:	8c ed       	ldi	r24, 0xDC	; 220
     bf4:	96 e2       	ldi	r25, 0x26	; 38
     bf6:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
     bfa:	89 2b       	or	r24, r25
     bfc:	09 f4       	brne	.+2      	; 0xc00 <esp8266_telnet_server+0x1ba>
     bfe:	82 c1       	rjmp	.+772    	; 0xf04 <esp8266_telnet_server+0x4be>
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	ee d6       	rcall	.+3548   	; 0x19e0 <ht1632c_set_brightness>
     c04:	82 e3       	ldi	r24, 0x32	; 50
     c06:	ec ed       	ldi	r30, 0xDC	; 220
     c08:	f6 e2       	ldi	r31, 0x26	; 38
     c0a:	df 01       	movw	r26, r30
     c0c:	1d 92       	st	X+, r1
     c0e:	8a 95       	dec	r24
     c10:	e9 f7       	brne	.-6      	; 0xc0c <esp8266_telnet_server+0x1c6>
     c12:	10 92 94 26 	sts	0x2694, r1
     c16:	4a e0       	ldi	r20, 0x0A	; 10
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	be 01       	movw	r22, r28
     c1c:	6d 5c       	subi	r22, 0xCD	; 205
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	84 e1       	ldi	r24, 0x14	; 20
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <itoa>
     c28:	8d e0       	ldi	r24, 0x0D	; 13
     c2a:	e2 e1       	ldi	r30, 0x12	; 18
     c2c:	f0 e2       	ldi	r31, 0x20	; 32
     c2e:	8e 01       	movw	r16, r28
     c30:	0f 5f       	subi	r16, 0xFF	; 255
     c32:	1f 4f       	sbci	r17, 0xFF	; 255
     c34:	d8 01       	movw	r26, r16
     c36:	01 90       	ld	r0, Z+
     c38:	0d 92       	st	X+, r0
     c3a:	8a 95       	dec	r24
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <esp8266_telnet_server+0x1f0>
     c3e:	be 01       	movw	r22, r28
     c40:	6d 5c       	subi	r22, 0xCD	; 205
     c42:	7f 4f       	sbci	r23, 0xFF	; 255
     c44:	ce 01       	movw	r24, r28
     c46:	0e 96       	adiw	r24, 0x0e	; 14
     c48:	0e 94 94 18 	call	0x3128	; 0x3128 <strcpy>
     c4c:	f8 01       	movw	r30, r16
     c4e:	01 90       	ld	r0, Z+
     c50:	00 20       	and	r0, r0
     c52:	e9 f7       	brne	.-6      	; 0xc4e <esp8266_telnet_server+0x208>
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	8d e0       	ldi	r24, 0x0D	; 13
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	80 83       	st	Z, r24
     c5c:	91 83       	std	Z+1, r25	; 0x01
     c5e:	86 e0       	ldi	r24, 0x06	; 6
     c60:	80 93 0e 27 	sts	0x270E, r24
     c64:	c8 01       	movw	r24, r16
     c66:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     c6a:	bf ef       	ldi	r27, 0xFF	; 255
     c6c:	e1 ee       	ldi	r30, 0xE1	; 225
     c6e:	f4 e0       	ldi	r31, 0x04	; 4
     c70:	b1 50       	subi	r27, 0x01	; 1
     c72:	e0 40       	sbci	r30, 0x00	; 0
     c74:	f0 40       	sbci	r31, 0x00	; 0
     c76:	e1 f7       	brne	.-8      	; 0xc70 <esp8266_telnet_server+0x22a>
     c78:	00 c0       	rjmp	.+0      	; 0xc7a <esp8266_telnet_server+0x234>
     c7a:	00 00       	nop
     c7c:	86 e0       	ldi	r24, 0x06	; 6
     c7e:	80 93 0e 27 	sts	0x270E, r24
     c82:	88 e9       	ldi	r24, 0x98	; 152
     c84:	91 e2       	ldi	r25, 0x21	; 33
     c86:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     c8a:	2f ef       	ldi	r18, 0xFF	; 255
     c8c:	31 ee       	ldi	r19, 0xE1	; 225
     c8e:	44 e0       	ldi	r20, 0x04	; 4
     c90:	21 50       	subi	r18, 0x01	; 1
     c92:	30 40       	sbci	r19, 0x00	; 0
     c94:	40 40       	sbci	r20, 0x00	; 0
     c96:	e1 f7       	brne	.-8      	; 0xc90 <esp8266_telnet_server+0x24a>
     c98:	00 c0       	rjmp	.+0      	; 0xc9a <esp8266_telnet_server+0x254>
     c9a:	00 00       	nop
     c9c:	45 cf       	rjmp	.-374    	; 0xb28 <esp8266_telnet_server+0xe2>
     c9e:	69 ed       	ldi	r22, 0xD9	; 217
     ca0:	71 e2       	ldi	r23, 0x21	; 33
     ca2:	8c ed       	ldi	r24, 0xDC	; 220
     ca4:	96 e2       	ldi	r25, 0x26	; 38
     ca6:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
     caa:	89 2b       	or	r24, r25
     cac:	09 f4       	brne	.+2      	; 0xcb0 <esp8266_telnet_server+0x26a>
     cae:	1a c2       	rjmp	.+1076   	; 0x10e4 <esp8266_telnet_server+0x69e>
     cb0:	6d ed       	ldi	r22, 0xDD	; 221
     cb2:	71 e2       	ldi	r23, 0x21	; 33
     cb4:	8c ed       	ldi	r24, 0xDC	; 220
     cb6:	96 e2       	ldi	r25, 0x26	; 38
     cb8:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
     cbc:	89 2b       	or	r24, r25
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <esp8266_telnet_server+0x27c>
     cc0:	c6 c1       	rjmp	.+908    	; 0x104e <esp8266_telnet_server+0x608>
     cc2:	82 e3       	ldi	r24, 0x32	; 50
     cc4:	ec ed       	ldi	r30, 0xDC	; 220
     cc6:	f6 e2       	ldi	r31, 0x26	; 38
     cc8:	df 01       	movw	r26, r30
     cca:	1d 92       	st	X+, r1
     ccc:	8a 95       	dec	r24
     cce:	e9 f7       	brne	.-6      	; 0xcca <esp8266_telnet_server+0x284>
     cd0:	10 92 94 26 	sts	0x2694, r1
     cd4:	4a e0       	ldi	r20, 0x0A	; 10
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	be 01       	movw	r22, r28
     cda:	6d 5c       	subi	r22, 0xCD	; 205
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255
     cde:	8a e0       	ldi	r24, 0x0A	; 10
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <itoa>
     ce6:	8d e0       	ldi	r24, 0x0D	; 13
     ce8:	e2 e1       	ldi	r30, 0x12	; 18
     cea:	f0 e2       	ldi	r31, 0x20	; 32
     cec:	8e 01       	movw	r16, r28
     cee:	0f 5f       	subi	r16, 0xFF	; 255
     cf0:	1f 4f       	sbci	r17, 0xFF	; 255
     cf2:	d8 01       	movw	r26, r16
     cf4:	01 90       	ld	r0, Z+
     cf6:	0d 92       	st	X+, r0
     cf8:	8a 95       	dec	r24
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <esp8266_telnet_server+0x2ae>
     cfc:	be 01       	movw	r22, r28
     cfe:	6d 5c       	subi	r22, 0xCD	; 205
     d00:	7f 4f       	sbci	r23, 0xFF	; 255
     d02:	ce 01       	movw	r24, r28
     d04:	0e 96       	adiw	r24, 0x0e	; 14
     d06:	0e 94 94 18 	call	0x3128	; 0x3128 <strcpy>
     d0a:	f8 01       	movw	r30, r16
     d0c:	01 90       	ld	r0, Z+
     d0e:	00 20       	and	r0, r0
     d10:	e9 f7       	brne	.-6      	; 0xd0c <esp8266_telnet_server+0x2c6>
     d12:	31 97       	sbiw	r30, 0x01	; 1
     d14:	8d e0       	ldi	r24, 0x0D	; 13
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	80 83       	st	Z, r24
     d1a:	91 83       	std	Z+1, r25	; 0x01
     d1c:	86 e0       	ldi	r24, 0x06	; 6
     d1e:	80 93 0e 27 	sts	0x270E, r24
     d22:	c8 01       	movw	r24, r16
     d24:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     d28:	bf ef       	ldi	r27, 0xFF	; 255
     d2a:	e1 ee       	ldi	r30, 0xE1	; 225
     d2c:	f4 e0       	ldi	r31, 0x04	; 4
     d2e:	b1 50       	subi	r27, 0x01	; 1
     d30:	e0 40       	sbci	r30, 0x00	; 0
     d32:	f0 40       	sbci	r31, 0x00	; 0
     d34:	e1 f7       	brne	.-8      	; 0xd2e <esp8266_telnet_server+0x2e8>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <esp8266_telnet_server+0x2f2>
     d38:	00 00       	nop
     d3a:	86 e0       	ldi	r24, 0x06	; 6
     d3c:	80 93 0e 27 	sts	0x270E, r24
     d40:	82 eb       	ldi	r24, 0xB2	; 178
     d42:	90 e2       	ldi	r25, 0x20	; 32
     d44:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     d48:	2f ef       	ldi	r18, 0xFF	; 255
     d4a:	31 ee       	ldi	r19, 0xE1	; 225
     d4c:	44 e0       	ldi	r20, 0x04	; 4
     d4e:	21 50       	subi	r18, 0x01	; 1
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	40 40       	sbci	r20, 0x00	; 0
     d54:	e1 f7       	brne	.-8      	; 0xd4e <esp8266_telnet_server+0x308>
     d56:	00 c0       	rjmp	.+0      	; 0xd58 <esp8266_telnet_server+0x312>
     d58:	00 00       	nop
     d5a:	10 92 94 26 	sts	0x2694, r1
     d5e:	4a e0       	ldi	r20, 0x0A	; 10
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	be 01       	movw	r22, r28
     d64:	6d 5c       	subi	r22, 0xCD	; 205
     d66:	7f 4f       	sbci	r23, 0xFF	; 255
     d68:	83 e0       	ldi	r24, 0x03	; 3
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <itoa>
     d70:	8d e0       	ldi	r24, 0x0D	; 13
     d72:	e2 e1       	ldi	r30, 0x12	; 18
     d74:	f0 e2       	ldi	r31, 0x20	; 32
     d76:	d8 01       	movw	r26, r16
     d78:	01 90       	ld	r0, Z+
     d7a:	0d 92       	st	X+, r0
     d7c:	8a 95       	dec	r24
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <esp8266_telnet_server+0x332>
     d80:	be 01       	movw	r22, r28
     d82:	6d 5c       	subi	r22, 0xCD	; 205
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
     d86:	ce 01       	movw	r24, r28
     d88:	0e 96       	adiw	r24, 0x0e	; 14
     d8a:	0e 94 94 18 	call	0x3128	; 0x3128 <strcpy>
     d8e:	f8 01       	movw	r30, r16
     d90:	01 90       	ld	r0, Z+
     d92:	00 20       	and	r0, r0
     d94:	e9 f7       	brne	.-6      	; 0xd90 <esp8266_telnet_server+0x34a>
     d96:	31 97       	sbiw	r30, 0x01	; 1
     d98:	8d e0       	ldi	r24, 0x0D	; 13
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	80 83       	st	Z, r24
     d9e:	91 83       	std	Z+1, r25	; 0x01
     da0:	86 e0       	ldi	r24, 0x06	; 6
     da2:	80 93 0e 27 	sts	0x270E, r24
     da6:	c8 01       	movw	r24, r16
     da8:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	91 ee       	ldi	r25, 0xE1	; 225
     db0:	a4 e0       	ldi	r26, 0x04	; 4
     db2:	81 50       	subi	r24, 0x01	; 1
     db4:	90 40       	sbci	r25, 0x00	; 0
     db6:	a0 40       	sbci	r26, 0x00	; 0
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <esp8266_telnet_server+0x36c>
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <esp8266_telnet_server+0x376>
     dbc:	00 00       	nop
     dbe:	86 e0       	ldi	r24, 0x06	; 6
     dc0:	80 93 0e 27 	sts	0x270E, r24
     dc4:	85 ed       	ldi	r24, 0xD5	; 213
     dc6:	91 e2       	ldi	r25, 0x21	; 33
     dc8:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     dcc:	bf ef       	ldi	r27, 0xFF	; 255
     dce:	e1 ee       	ldi	r30, 0xE1	; 225
     dd0:	f4 e0       	ldi	r31, 0x04	; 4
     dd2:	b1 50       	subi	r27, 0x01	; 1
     dd4:	e0 40       	sbci	r30, 0x00	; 0
     dd6:	f0 40       	sbci	r31, 0x00	; 0
     dd8:	e1 f7       	brne	.-8      	; 0xdd2 <esp8266_telnet_server+0x38c>
     dda:	00 c0       	rjmp	.+0      	; 0xddc <esp8266_telnet_server+0x396>
     ddc:	00 00       	nop
     dde:	a4 ce       	rjmp	.-696    	; 0xb28 <esp8266_telnet_server+0xe2>
     de0:	26 e0       	ldi	r18, 0x06	; 6
     de2:	f2 2e       	mov	r15, r18
     de4:	f0 92 0e 27 	sts	0x270E, r15
     de8:	82 e3       	ldi	r24, 0x32	; 50
     dea:	ec ed       	ldi	r30, 0xDC	; 220
     dec:	f6 e2       	ldi	r31, 0x26	; 38
     dee:	df 01       	movw	r26, r30
     df0:	1d 92       	st	X+, r1
     df2:	8a 95       	dec	r24
     df4:	e9 f7       	brne	.-6      	; 0xdf0 <esp8266_telnet_server+0x3aa>
     df6:	10 92 94 26 	sts	0x2694, r1
     dfa:	4a e0       	ldi	r20, 0x0A	; 10
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	be 01       	movw	r22, r28
     e00:	6d 5c       	subi	r22, 0xCD	; 205
     e02:	7f 4f       	sbci	r23, 0xFF	; 255
     e04:	82 e3       	ldi	r24, 0x32	; 50
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <itoa>
     e0c:	8d e0       	ldi	r24, 0x0D	; 13
     e0e:	e2 e1       	ldi	r30, 0x12	; 18
     e10:	f0 e2       	ldi	r31, 0x20	; 32
     e12:	8e 01       	movw	r16, r28
     e14:	0f 5f       	subi	r16, 0xFF	; 255
     e16:	1f 4f       	sbci	r17, 0xFF	; 255
     e18:	d8 01       	movw	r26, r16
     e1a:	01 90       	ld	r0, Z+
     e1c:	0d 92       	st	X+, r0
     e1e:	8a 95       	dec	r24
     e20:	e1 f7       	brne	.-8      	; 0xe1a <esp8266_telnet_server+0x3d4>
     e22:	be 01       	movw	r22, r28
     e24:	6d 5c       	subi	r22, 0xCD	; 205
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	ce 01       	movw	r24, r28
     e2a:	0e 96       	adiw	r24, 0x0e	; 14
     e2c:	0e 94 94 18 	call	0x3128	; 0x3128 <strcpy>
     e30:	f8 01       	movw	r30, r16
     e32:	01 90       	ld	r0, Z+
     e34:	00 20       	and	r0, r0
     e36:	e9 f7       	brne	.-6      	; 0xe32 <esp8266_telnet_server+0x3ec>
     e38:	31 97       	sbiw	r30, 0x01	; 1
     e3a:	8d e0       	ldi	r24, 0x0D	; 13
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	80 83       	st	Z, r24
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	f0 92 0e 27 	sts	0x270E, r15
     e46:	c8 01       	movw	r24, r16
     e48:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     e4c:	bf ef       	ldi	r27, 0xFF	; 255
     e4e:	e1 ee       	ldi	r30, 0xE1	; 225
     e50:	f4 e0       	ldi	r31, 0x04	; 4
     e52:	b1 50       	subi	r27, 0x01	; 1
     e54:	e0 40       	sbci	r30, 0x00	; 0
     e56:	f0 40       	sbci	r31, 0x00	; 0
     e58:	e1 f7       	brne	.-8      	; 0xe52 <esp8266_telnet_server+0x40c>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <esp8266_telnet_server+0x416>
     e5c:	00 00       	nop
     e5e:	86 e0       	ldi	r24, 0x06	; 6
     e60:	80 93 0e 27 	sts	0x270E, r24
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	91 e2       	ldi	r25, 0x21	; 33
     e68:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     e6c:	2f ef       	ldi	r18, 0xFF	; 255
     e6e:	31 ee       	ldi	r19, 0xE1	; 225
     e70:	44 e0       	ldi	r20, 0x04	; 4
     e72:	21 50       	subi	r18, 0x01	; 1
     e74:	30 40       	sbci	r19, 0x00	; 0
     e76:	40 40       	sbci	r20, 0x00	; 0
     e78:	e1 f7       	brne	.-8      	; 0xe72 <esp8266_telnet_server+0x42c>
     e7a:	00 c0       	rjmp	.+0      	; 0xe7c <esp8266_telnet_server+0x436>
     e7c:	00 00       	nop
     e7e:	10 92 94 26 	sts	0x2694, r1
     e82:	4a e0       	ldi	r20, 0x0A	; 10
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	be 01       	movw	r22, r28
     e88:	6d 5c       	subi	r22, 0xCD	; 205
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	8c e2       	ldi	r24, 0x2C	; 44
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <itoa>
     e94:	8d e0       	ldi	r24, 0x0D	; 13
     e96:	e2 e1       	ldi	r30, 0x12	; 18
     e98:	f0 e2       	ldi	r31, 0x20	; 32
     e9a:	d8 01       	movw	r26, r16
     e9c:	01 90       	ld	r0, Z+
     e9e:	0d 92       	st	X+, r0
     ea0:	8a 95       	dec	r24
     ea2:	e1 f7       	brne	.-8      	; 0xe9c <esp8266_telnet_server+0x456>
     ea4:	be 01       	movw	r22, r28
     ea6:	6d 5c       	subi	r22, 0xCD	; 205
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	ce 01       	movw	r24, r28
     eac:	0e 96       	adiw	r24, 0x0e	; 14
     eae:	0e 94 94 18 	call	0x3128	; 0x3128 <strcpy>
     eb2:	f8 01       	movw	r30, r16
     eb4:	01 90       	ld	r0, Z+
     eb6:	00 20       	and	r0, r0
     eb8:	e9 f7       	brne	.-6      	; 0xeb4 <esp8266_telnet_server+0x46e>
     eba:	31 97       	sbiw	r30, 0x01	; 1
     ebc:	8d e0       	ldi	r24, 0x0D	; 13
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	80 83       	st	Z, r24
     ec2:	91 83       	std	Z+1, r25	; 0x01
     ec4:	86 e0       	ldi	r24, 0x06	; 6
     ec6:	80 93 0e 27 	sts	0x270E, r24
     eca:	c8 01       	movw	r24, r16
     ecc:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	91 ee       	ldi	r25, 0xE1	; 225
     ed4:	a4 e0       	ldi	r26, 0x04	; 4
     ed6:	81 50       	subi	r24, 0x01	; 1
     ed8:	90 40       	sbci	r25, 0x00	; 0
     eda:	a0 40       	sbci	r26, 0x00	; 0
     edc:	e1 f7       	brne	.-8      	; 0xed6 <esp8266_telnet_server+0x490>
     ede:	00 c0       	rjmp	.+0      	; 0xee0 <esp8266_telnet_server+0x49a>
     ee0:	00 00       	nop
     ee2:	86 e0       	ldi	r24, 0x06	; 6
     ee4:	80 93 0e 27 	sts	0x270E, r24
     ee8:	85 e3       	ldi	r24, 0x35	; 53
     eea:	91 e2       	ldi	r25, 0x21	; 33
     eec:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     ef0:	bf ef       	ldi	r27, 0xFF	; 255
     ef2:	e1 ee       	ldi	r30, 0xE1	; 225
     ef4:	f4 e0       	ldi	r31, 0x04	; 4
     ef6:	b1 50       	subi	r27, 0x01	; 1
     ef8:	e0 40       	sbci	r30, 0x00	; 0
     efa:	f0 40       	sbci	r31, 0x00	; 0
     efc:	e1 f7       	brne	.-8      	; 0xef6 <esp8266_telnet_server+0x4b0>
     efe:	00 c0       	rjmp	.+0      	; 0xf00 <esp8266_telnet_server+0x4ba>
     f00:	00 00       	nop
     f02:	12 ce       	rjmp	.-988    	; 0xb28 <esp8266_telnet_server+0xe2>
     f04:	6d ea       	ldi	r22, 0xAD	; 173
     f06:	71 e2       	ldi	r23, 0x21	; 33
     f08:	8c ed       	ldi	r24, 0xDC	; 220
     f0a:	96 e2       	ldi	r25, 0x26	; 38
     f0c:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
     f10:	89 2b       	or	r24, r25
     f12:	09 f4       	brne	.+2      	; 0xf16 <esp8266_telnet_server+0x4d0>
     f14:	4f c0       	rjmp	.+158    	; 0xfb4 <esp8266_telnet_server+0x56e>
     f16:	8f e0       	ldi	r24, 0x0F	; 15
     f18:	63 d5       	rcall	.+2758   	; 0x19e0 <ht1632c_set_brightness>
     f1a:	82 e3       	ldi	r24, 0x32	; 50
     f1c:	ec ed       	ldi	r30, 0xDC	; 220
     f1e:	f6 e2       	ldi	r31, 0x26	; 38
     f20:	df 01       	movw	r26, r30
     f22:	1d 92       	st	X+, r1
     f24:	8a 95       	dec	r24
     f26:	e9 f7       	brne	.-6      	; 0xf22 <esp8266_telnet_server+0x4dc>
     f28:	10 92 94 26 	sts	0x2694, r1
     f2c:	4a e0       	ldi	r20, 0x0A	; 10
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	be 01       	movw	r22, r28
     f32:	6d 5c       	subi	r22, 0xCD	; 205
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	82 e1       	ldi	r24, 0x12	; 18
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <itoa>
     f3e:	8d e0       	ldi	r24, 0x0D	; 13
     f40:	e2 e1       	ldi	r30, 0x12	; 18
     f42:	f0 e2       	ldi	r31, 0x20	; 32
     f44:	8e 01       	movw	r16, r28
     f46:	0f 5f       	subi	r16, 0xFF	; 255
     f48:	1f 4f       	sbci	r17, 0xFF	; 255
     f4a:	d8 01       	movw	r26, r16
     f4c:	01 90       	ld	r0, Z+
     f4e:	0d 92       	st	X+, r0
     f50:	8a 95       	dec	r24
     f52:	e1 f7       	brne	.-8      	; 0xf4c <esp8266_telnet_server+0x506>
     f54:	be 01       	movw	r22, r28
     f56:	6d 5c       	subi	r22, 0xCD	; 205
     f58:	7f 4f       	sbci	r23, 0xFF	; 255
     f5a:	ce 01       	movw	r24, r28
     f5c:	0e 96       	adiw	r24, 0x0e	; 14
     f5e:	0e 94 94 18 	call	0x3128	; 0x3128 <strcpy>
     f62:	f8 01       	movw	r30, r16
     f64:	01 90       	ld	r0, Z+
     f66:	00 20       	and	r0, r0
     f68:	e9 f7       	brne	.-6      	; 0xf64 <esp8266_telnet_server+0x51e>
     f6a:	31 97       	sbiw	r30, 0x01	; 1
     f6c:	8d e0       	ldi	r24, 0x0D	; 13
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	80 83       	st	Z, r24
     f72:	91 83       	std	Z+1, r25	; 0x01
     f74:	86 e0       	ldi	r24, 0x06	; 6
     f76:	80 93 0e 27 	sts	0x270E, r24
     f7a:	c8 01       	movw	r24, r16
     f7c:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     f80:	bf ef       	ldi	r27, 0xFF	; 255
     f82:	e1 ee       	ldi	r30, 0xE1	; 225
     f84:	f4 e0       	ldi	r31, 0x04	; 4
     f86:	b1 50       	subi	r27, 0x01	; 1
     f88:	e0 40       	sbci	r30, 0x00	; 0
     f8a:	f0 40       	sbci	r31, 0x00	; 0
     f8c:	e1 f7       	brne	.-8      	; 0xf86 <esp8266_telnet_server+0x540>
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <esp8266_telnet_server+0x54a>
     f90:	00 00       	nop
     f92:	86 e0       	ldi	r24, 0x06	; 6
     f94:	80 93 0e 27 	sts	0x270E, r24
     f98:	80 eb       	ldi	r24, 0xB0	; 176
     f9a:	91 e2       	ldi	r25, 0x21	; 33
     f9c:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
     fa0:	2f ef       	ldi	r18, 0xFF	; 255
     fa2:	31 ee       	ldi	r19, 0xE1	; 225
     fa4:	44 e0       	ldi	r20, 0x04	; 4
     fa6:	21 50       	subi	r18, 0x01	; 1
     fa8:	30 40       	sbci	r19, 0x00	; 0
     faa:	40 40       	sbci	r20, 0x00	; 0
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <esp8266_telnet_server+0x560>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <esp8266_telnet_server+0x56a>
     fb0:	00 00       	nop
     fb2:	ba cd       	rjmp	.-1164   	; 0xb28 <esp8266_telnet_server+0xe2>
     fb4:	82 e3       	ldi	r24, 0x32	; 50
     fb6:	ec ed       	ldi	r30, 0xDC	; 220
     fb8:	f6 e2       	ldi	r31, 0x26	; 38
     fba:	df 01       	movw	r26, r30
     fbc:	1d 92       	st	X+, r1
     fbe:	8a 95       	dec	r24
     fc0:	e9 f7       	brne	.-6      	; 0xfbc <esp8266_telnet_server+0x576>
     fc2:	10 92 94 26 	sts	0x2694, r1
     fc6:	4a e0       	ldi	r20, 0x0A	; 10
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	be 01       	movw	r22, r28
     fcc:	6d 5c       	subi	r22, 0xCD	; 205
     fce:	7f 4f       	sbci	r23, 0xFF	; 255
     fd0:	85 e1       	ldi	r24, 0x15	; 21
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <itoa>
     fd8:	8d e0       	ldi	r24, 0x0D	; 13
     fda:	e2 e1       	ldi	r30, 0x12	; 18
     fdc:	f0 e2       	ldi	r31, 0x20	; 32
     fde:	8e 01       	movw	r16, r28
     fe0:	0f 5f       	subi	r16, 0xFF	; 255
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	d8 01       	movw	r26, r16
     fe6:	01 90       	ld	r0, Z+
     fe8:	0d 92       	st	X+, r0
     fea:	8a 95       	dec	r24
     fec:	e1 f7       	brne	.-8      	; 0xfe6 <esp8266_telnet_server+0x5a0>
     fee:	be 01       	movw	r22, r28
     ff0:	6d 5c       	subi	r22, 0xCD	; 205
     ff2:	7f 4f       	sbci	r23, 0xFF	; 255
     ff4:	ce 01       	movw	r24, r28
     ff6:	0e 96       	adiw	r24, 0x0e	; 14
     ff8:	0e 94 94 18 	call	0x3128	; 0x3128 <strcpy>
     ffc:	f8 01       	movw	r30, r16
     ffe:	01 90       	ld	r0, Z+
    1000:	00 20       	and	r0, r0
    1002:	e9 f7       	brne	.-6      	; 0xffe <esp8266_telnet_server+0x5b8>
    1004:	31 97       	sbiw	r30, 0x01	; 1
    1006:	8d e0       	ldi	r24, 0x0D	; 13
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	80 83       	st	Z, r24
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	86 e0       	ldi	r24, 0x06	; 6
    1010:	80 93 0e 27 	sts	0x270E, r24
    1014:	c8 01       	movw	r24, r16
    1016:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
    101a:	bf ef       	ldi	r27, 0xFF	; 255
    101c:	e1 ee       	ldi	r30, 0xE1	; 225
    101e:	f4 e0       	ldi	r31, 0x04	; 4
    1020:	b1 50       	subi	r27, 0x01	; 1
    1022:	e0 40       	sbci	r30, 0x00	; 0
    1024:	f0 40       	sbci	r31, 0x00	; 0
    1026:	e1 f7       	brne	.-8      	; 0x1020 <esp8266_telnet_server+0x5da>
    1028:	00 c0       	rjmp	.+0      	; 0x102a <esp8266_telnet_server+0x5e4>
    102a:	00 00       	nop
    102c:	86 e0       	ldi	r24, 0x06	; 6
    102e:	80 93 0e 27 	sts	0x270E, r24
    1032:	83 ec       	ldi	r24, 0xC3	; 195
    1034:	91 e2       	ldi	r25, 0x21	; 33
    1036:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
    103a:	2f ef       	ldi	r18, 0xFF	; 255
    103c:	31 ee       	ldi	r19, 0xE1	; 225
    103e:	44 e0       	ldi	r20, 0x04	; 4
    1040:	21 50       	subi	r18, 0x01	; 1
    1042:	30 40       	sbci	r19, 0x00	; 0
    1044:	40 40       	sbci	r20, 0x00	; 0
    1046:	e1 f7       	brne	.-8      	; 0x1040 <esp8266_telnet_server+0x5fa>
    1048:	00 c0       	rjmp	.+0      	; 0x104a <esp8266_telnet_server+0x604>
    104a:	00 00       	nop
    104c:	6d cd       	rjmp	.-1318   	; 0xb28 <esp8266_telnet_server+0xe2>
    104e:	66 ee       	ldi	r22, 0xE6	; 230
    1050:	71 e2       	ldi	r23, 0x21	; 33
    1052:	8c ed       	ldi	r24, 0xDC	; 220
    1054:	96 e2       	ldi	r25, 0x26	; 38
    1056:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
    105a:	89 2b       	or	r24, r25
    105c:	09 f4       	brne	.+2      	; 0x1060 <esp8266_telnet_server+0x61a>
    105e:	aa cf       	rjmp	.-172    	; 0xfb4 <esp8266_telnet_server+0x56e>
    1060:	82 e3       	ldi	r24, 0x32	; 50
    1062:	ec ed       	ldi	r30, 0xDC	; 220
    1064:	f6 e2       	ldi	r31, 0x26	; 38
    1066:	df 01       	movw	r26, r30
    1068:	1d 92       	st	X+, r1
    106a:	8a 95       	dec	r24
    106c:	e9 f7       	brne	.-6      	; 0x1068 <esp8266_telnet_server+0x622>
    106e:	10 92 94 26 	sts	0x2694, r1
    1072:	4a e0       	ldi	r20, 0x0A	; 10
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	be 01       	movw	r22, r28
    1078:	6d 5c       	subi	r22, 0xCD	; 205
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	89 e0       	ldi	r24, 0x09	; 9
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <itoa>
    1084:	8d e0       	ldi	r24, 0x0D	; 13
    1086:	e2 e1       	ldi	r30, 0x12	; 18
    1088:	f0 e2       	ldi	r31, 0x20	; 32
    108a:	8e 01       	movw	r16, r28
    108c:	0f 5f       	subi	r16, 0xFF	; 255
    108e:	1f 4f       	sbci	r17, 0xFF	; 255
    1090:	d8 01       	movw	r26, r16
    1092:	01 90       	ld	r0, Z+
    1094:	0d 92       	st	X+, r0
    1096:	8a 95       	dec	r24
    1098:	e1 f7       	brne	.-8      	; 0x1092 <esp8266_telnet_server+0x64c>
    109a:	be 01       	movw	r22, r28
    109c:	6d 5c       	subi	r22, 0xCD	; 205
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	ce 01       	movw	r24, r28
    10a2:	0e 96       	adiw	r24, 0x0e	; 14
    10a4:	0e 94 94 18 	call	0x3128	; 0x3128 <strcpy>
    10a8:	f8 01       	movw	r30, r16
    10aa:	01 90       	ld	r0, Z+
    10ac:	00 20       	and	r0, r0
    10ae:	e9 f7       	brne	.-6      	; 0x10aa <esp8266_telnet_server+0x664>
    10b0:	31 97       	sbiw	r30, 0x01	; 1
    10b2:	8d e0       	ldi	r24, 0x0D	; 13
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	80 83       	st	Z, r24
    10b8:	91 83       	std	Z+1, r25	; 0x01
    10ba:	86 e0       	ldi	r24, 0x06	; 6
    10bc:	80 93 0e 27 	sts	0x270E, r24
    10c0:	c8 01       	movw	r24, r16
    10c2:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <uart_write_str>
    10c6:	bf ef       	ldi	r27, 0xFF	; 255
    10c8:	e1 ee       	ldi	r30, 0xE1	; 225
    10ca:	f4 e0       	ldi	r31, 0x04	; 4
    10cc:	b1 50       	subi	r27, 0x01	; 1
    10ce:	e0 40       	sbci	r30, 0x00	; 0
    10d0:	f0 40       	sbci	r31, 0x00	; 0
    10d2:	e1 f7       	brne	.-8      	; 0x10cc <esp8266_telnet_server+0x686>
    10d4:	00 c0       	rjmp	.+0      	; 0x10d6 <esp8266_telnet_server+0x690>
    10d6:	00 00       	nop
    10d8:	86 e0       	ldi	r24, 0x06	; 6
    10da:	80 93 0e 27 	sts	0x270E, r24
    10de:	8d eb       	ldi	r24, 0xBD	; 189
    10e0:	90 e2       	ldi	r25, 0x20	; 32
    10e2:	30 ce       	rjmp	.-928    	; 0xd44 <esp8266_telnet_server+0x2fe>
    10e4:	6b ee       	ldi	r22, 0xEB	; 235
    10e6:	71 e2       	ldi	r23, 0x21	; 33
    10e8:	8c ed       	ldi	r24, 0xDC	; 220
    10ea:	96 e2       	ldi	r25, 0x26	; 38
    10ec:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
    10f0:	89 2b       	or	r24, r25
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <esp8266_telnet_server+0x6b0>
    10f4:	4c c0       	rjmp	.+152    	; 0x118e <esp8266_telnet_server+0x748>
    10f6:	6f ee       	ldi	r22, 0xEF	; 239
    10f8:	71 e2       	ldi	r23, 0x21	; 33
    10fa:	8c ed       	ldi	r24, 0xDC	; 220
    10fc:	96 e2       	ldi	r25, 0x26	; 38
    10fe:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
    1102:	89 2b       	or	r24, r25
    1104:	69 f1       	breq	.+90     	; 0x1160 <esp8266_telnet_server+0x71a>
    1106:	0c ed       	ldi	r16, 0xDC	; 220
    1108:	16 e2       	ldi	r17, 0x26	; 38
    110a:	82 e3       	ldi	r24, 0x32	; 50
    110c:	d8 01       	movw	r26, r16
    110e:	1d 92       	st	X+, r1
    1110:	8a 95       	dec	r24
    1112:	e9 f7       	brne	.-6      	; 0x110e <esp8266_telnet_server+0x6c8>
    1114:	84 ef       	ldi	r24, 0xF4	; 244
    1116:	91 e2       	ldi	r25, 0x21	; 33
    1118:	1e db       	rcall	.-2500   	; 0x756 <at_cipsend>
    111a:	80 91 94 26 	lds	r24, 0x2694
    111e:	81 11       	cpse	r24, r1
    1120:	13 c0       	rjmp	.+38     	; 0x1148 <esp8266_telnet_server+0x702>
    1122:	87 ee       	ldi	r24, 0xE7	; 231
    1124:	93 e0       	ldi	r25, 0x03	; 3
    1126:	03 c0       	rjmp	.+6      	; 0x112e <esp8266_telnet_server+0x6e8>
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	69 f0       	breq	.+26     	; 0x1148 <esp8266_telnet_server+0x702>
    112e:	ef ef       	ldi	r30, 0xFF	; 255
    1130:	fb ed       	ldi	r31, 0xDB	; 219
    1132:	25 e0       	ldi	r18, 0x05	; 5
    1134:	e1 50       	subi	r30, 0x01	; 1
    1136:	f0 40       	sbci	r31, 0x00	; 0
    1138:	20 40       	sbci	r18, 0x00	; 0
    113a:	e1 f7       	brne	.-8      	; 0x1134 <esp8266_telnet_server+0x6ee>
    113c:	00 c0       	rjmp	.+0      	; 0x113e <esp8266_telnet_server+0x6f8>
    113e:	00 00       	nop
    1140:	20 91 94 26 	lds	r18, 0x2694
    1144:	22 23       	and	r18, r18
    1146:	81 f3       	breq	.-32     	; 0x1128 <esp8266_telnet_server+0x6e2>
    1148:	f8 01       	movw	r30, r16
    114a:	01 90       	ld	r0, Z+
    114c:	00 20       	and	r0, r0
    114e:	e9 f7       	brne	.-6      	; 0x114a <esp8266_telnet_server+0x704>
    1150:	e5 5f       	subi	r30, 0xF5	; 245
    1152:	f6 42       	sbci	r31, 0x26	; 38
    1154:	09 f4       	brne	.+2      	; 0x1158 <esp8266_telnet_server+0x712>
    1156:	3b c0       	rjmp	.+118    	; 0x11ce <esp8266_telnet_server+0x788>
    1158:	87 ee       	ldi	r24, 0xE7	; 231
    115a:	92 e2       	ldi	r25, 0x22	; 34
    115c:	fc da       	rcall	.-2568   	; 0x756 <at_cipsend>
    115e:	e4 cc       	rjmp	.-1592   	; 0xb28 <esp8266_telnet_server+0xe2>
    1160:	66 ee       	ldi	r22, 0xE6	; 230
    1162:	71 e2       	ldi	r23, 0x21	; 33
    1164:	8c ed       	ldi	r24, 0xDC	; 220
    1166:	96 e2       	ldi	r25, 0x26	; 38
    1168:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
    116c:	89 2b       	or	r24, r25
    116e:	09 f4       	brne	.+2      	; 0x1172 <esp8266_telnet_server+0x72c>
    1170:	c6 c0       	rjmp	.+396    	; 0x12fe <esp8266_telnet_server+0x8b8>
    1172:	82 e3       	ldi	r24, 0x32	; 50
    1174:	ec ed       	ldi	r30, 0xDC	; 220
    1176:	f6 e2       	ldi	r31, 0x26	; 38
    1178:	df 01       	movw	r26, r30
    117a:	1d 92       	st	X+, r1
    117c:	8a 95       	dec	r24
    117e:	e9 f7       	brne	.-6      	; 0x117a <esp8266_telnet_server+0x734>
    1180:	8d eb       	ldi	r24, 0xBD	; 189
    1182:	90 e2       	ldi	r25, 0x20	; 32
    1184:	e8 da       	rcall	.-2608   	; 0x756 <at_cipsend>
    1186:	83 ed       	ldi	r24, 0xD3	; 211
    1188:	94 e2       	ldi	r25, 0x24	; 36
    118a:	e5 da       	rcall	.-2614   	; 0x756 <at_cipsend>
    118c:	cd cc       	rjmp	.-1638   	; 0xb28 <esp8266_telnet_server+0xe2>
    118e:	6d e1       	ldi	r22, 0x1D	; 29
    1190:	73 e2       	ldi	r23, 0x23	; 35
    1192:	8c ed       	ldi	r24, 0xDC	; 220
    1194:	96 e2       	ldi	r25, 0x26	; 38
    1196:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
    119a:	89 2b       	or	r24, r25
    119c:	09 f4       	brne	.+2      	; 0x11a0 <esp8266_telnet_server+0x75a>
    119e:	7a c0       	rjmp	.+244    	; 0x1294 <esp8266_telnet_server+0x84e>
    11a0:	6c e7       	ldi	r22, 0x7C	; 124
    11a2:	71 e2       	ldi	r23, 0x21	; 33
    11a4:	8c ed       	ldi	r24, 0xDC	; 220
    11a6:	96 e2       	ldi	r25, 0x26	; 38
    11a8:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
    11ac:	89 2b       	or	r24, r25
    11ae:	09 f4       	brne	.+2      	; 0x11b2 <esp8266_telnet_server+0x76c>
    11b0:	66 c0       	rjmp	.+204    	; 0x127e <esp8266_telnet_server+0x838>
    11b2:	82 e3       	ldi	r24, 0x32	; 50
    11b4:	ec ed       	ldi	r30, 0xDC	; 220
    11b6:	f6 e2       	ldi	r31, 0x26	; 38
    11b8:	df 01       	movw	r26, r30
    11ba:	1d 92       	st	X+, r1
    11bc:	8a 95       	dec	r24
    11be:	e9 f7       	brne	.-6      	; 0x11ba <esp8266_telnet_server+0x774>
    11c0:	82 e2       	ldi	r24, 0x22	; 34
    11c2:	93 e2       	ldi	r25, 0x23	; 35
    11c4:	c8 da       	rcall	.-2672   	; 0x756 <at_cipsend>
    11c6:	80 e2       	ldi	r24, 0x20	; 32
    11c8:	80 93 66 06 	sts	0x0666, r24
    11cc:	ad cc       	rjmp	.-1702   	; 0xb28 <esp8266_telnet_server+0xe2>
    11ce:	6e e7       	ldi	r22, 0x7E	; 126
    11d0:	75 e2       	ldi	r23, 0x25	; 37
    11d2:	8c ed       	ldi	r24, 0xDC	; 220
    11d4:	96 e2       	ldi	r25, 0x26	; 38
    11d6:	0e 94 7f 18 	call	0x30fe	; 0x30fe <strtok>
    11da:	89 2b       	or	r24, r25
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <esp8266_telnet_server+0x79a>
    11de:	4a c0       	rjmp	.+148    	; 0x1274 <esp8266_telnet_server+0x82e>
    11e0:	6e e7       	ldi	r22, 0x7E	; 126
    11e2:	75 e2       	ldi	r23, 0x25	; 37
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	0e 94 7f 18 	call	0x30fe	; 0x30fe <strtok>
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	e9 f1       	breq	.+122    	; 0x126a <esp8266_telnet_server+0x824>
    11f0:	0e 94 62 18 	call	0x30c4	; 0x30c4 <atoi>
    11f4:	d8 2e       	mov	r13, r24
    11f6:	37 e1       	ldi	r19, 0x17	; 23
    11f8:	38 17       	cp	r19, r24
    11fa:	b8 f1       	brcs	.+110    	; 0x126a <esp8266_telnet_server+0x824>
    11fc:	6e e7       	ldi	r22, 0x7E	; 126
    11fe:	75 e2       	ldi	r23, 0x25	; 37
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 7f 18 	call	0x30fe	; 0x30fe <strtok>
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	09 f4       	brne	.+2      	; 0x120e <esp8266_telnet_server+0x7c8>
    120c:	83 c0       	rjmp	.+262    	; 0x1314 <esp8266_telnet_server+0x8ce>
    120e:	0e 94 62 18 	call	0x30c4	; 0x30c4 <atoi>
    1212:	e8 2e       	mov	r14, r24
    1214:	4b e3       	ldi	r20, 0x3B	; 59
    1216:	48 17       	cp	r20, r24
    1218:	08 f4       	brcc	.+2      	; 0x121c <esp8266_telnet_server+0x7d6>
    121a:	7c c0       	rjmp	.+248    	; 0x1314 <esp8266_telnet_server+0x8ce>
    121c:	6e e7       	ldi	r22, 0x7E	; 126
    121e:	75 e2       	ldi	r23, 0x25	; 37
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 7f 18 	call	0x30fe	; 0x30fe <strtok>
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	09 f4       	brne	.+2      	; 0x122e <esp8266_telnet_server+0x7e8>
    122c:	7d c0       	rjmp	.+250    	; 0x1328 <esp8266_telnet_server+0x8e2>
    122e:	0e 94 62 18 	call	0x30c4	; 0x30c4 <atoi>
    1232:	f8 2e       	mov	r15, r24
    1234:	8b e3       	ldi	r24, 0x3B	; 59
    1236:	8f 15       	cp	r24, r15
    1238:	08 f4       	brcc	.+2      	; 0x123c <esp8266_telnet_server+0x7f6>
    123a:	76 c0       	rjmp	.+236    	; 0x1328 <esp8266_telnet_server+0x8e2>
    123c:	6e e7       	ldi	r22, 0x7E	; 126
    123e:	75 e2       	ldi	r23, 0x25	; 37
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 7f 18 	call	0x30fe	; 0x30fe <strtok>
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	09 f4       	brne	.+2      	; 0x124e <esp8266_telnet_server+0x808>
    124c:	68 c0       	rjmp	.+208    	; 0x131e <esp8266_telnet_server+0x8d8>
    124e:	0e 94 62 18 	call	0x30c4	; 0x30c4 <atoi>
    1252:	8c 01       	movw	r16, r24
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	4d 2d       	mov	r20, r13
    125a:	6e 2d       	mov	r22, r14
    125c:	8f 2d       	mov	r24, r15
    125e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <rtc_set_time>
    1262:	8a ec       	ldi	r24, 0xCA	; 202
    1264:	92 e2       	ldi	r25, 0x22	; 34
    1266:	77 da       	rcall	.-2834   	; 0x756 <at_cipsend>
    1268:	5f cc       	rjmp	.-1858   	; 0xb28 <esp8266_telnet_server+0xe2>
    126a:	8a e2       	ldi	r24, 0x2A	; 42
    126c:	92 e2       	ldi	r25, 0x22	; 34
    126e:	73 da       	rcall	.-2842   	; 0x756 <at_cipsend>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	5a cc       	rjmp	.-1868   	; 0xb28 <esp8266_telnet_server+0xe2>
    1274:	85 e1       	ldi	r24, 0x15	; 21
    1276:	92 e2       	ldi	r25, 0x22	; 34
    1278:	6e da       	rcall	.-2852   	; 0x756 <at_cipsend>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	55 cc       	rjmp	.-1878   	; 0xb28 <esp8266_telnet_server+0xe2>
    127e:	82 e3       	ldi	r24, 0x32	; 50
    1280:	ec ed       	ldi	r30, 0xDC	; 220
    1282:	f6 e2       	ldi	r31, 0x26	; 38
    1284:	df 01       	movw	r26, r30
    1286:	1d 92       	st	X+, r1
    1288:	8a 95       	dec	r24
    128a:	e9 f7       	brne	.-6      	; 0x1286 <esp8266_telnet_server+0x840>
    128c:	84 e5       	ldi	r24, 0x54	; 84
    128e:	93 e2       	ldi	r25, 0x23	; 35
    1290:	62 da       	rcall	.-2876   	; 0x756 <at_cipsend>
    1292:	4a cc       	rjmp	.-1900   	; 0xb28 <esp8266_telnet_server+0xe2>
    1294:	69 e6       	ldi	r22, 0x69	; 105
    1296:	73 e2       	ldi	r23, 0x23	; 35
    1298:	8c ed       	ldi	r24, 0xDC	; 220
    129a:	96 e2       	ldi	r25, 0x26	; 38
    129c:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
    12a0:	89 2b       	or	r24, r25
    12a2:	09 f4       	brne	.+2      	; 0x12a6 <esp8266_telnet_server+0x860>
    12a4:	41 cc       	rjmp	.-1918   	; 0xb28 <esp8266_telnet_server+0xe2>
    12a6:	82 e3       	ldi	r24, 0x32	; 50
    12a8:	ec ed       	ldi	r30, 0xDC	; 220
    12aa:	f6 e2       	ldi	r31, 0x26	; 38
    12ac:	df 01       	movw	r26, r30
    12ae:	1d 92       	st	X+, r1
    12b0:	8a 95       	dec	r24
    12b2:	e9 f7       	brne	.-6      	; 0x12ae <esp8266_telnet_server+0x868>
    12b4:	8d e6       	ldi	r24, 0x6D	; 109
    12b6:	93 e2       	ldi	r25, 0x23	; 35
    12b8:	4e da       	rcall	.-2916   	; 0x756 <at_cipsend>
    12ba:	83 e9       	ldi	r24, 0x93	; 147
    12bc:	93 e2       	ldi	r25, 0x23	; 35
    12be:	4b da       	rcall	.-2922   	; 0x756 <at_cipsend>
    12c0:	8d eb       	ldi	r24, 0xBD	; 189
    12c2:	93 e2       	ldi	r25, 0x23	; 35
    12c4:	48 da       	rcall	.-2928   	; 0x756 <at_cipsend>
    12c6:	8d e6       	ldi	r24, 0x6D	; 109
    12c8:	93 e2       	ldi	r25, 0x23	; 35
    12ca:	45 da       	rcall	.-2934   	; 0x756 <at_cipsend>
    12cc:	89 ee       	ldi	r24, 0xE9	; 233
    12ce:	93 e2       	ldi	r25, 0x23	; 35
    12d0:	42 da       	rcall	.-2940   	; 0x756 <at_cipsend>
    12d2:	82 e3       	ldi	r24, 0x32	; 50
    12d4:	94 e2       	ldi	r25, 0x24	; 36
    12d6:	3f da       	rcall	.-2946   	; 0x756 <at_cipsend>
    12d8:	86 e6       	ldi	r24, 0x66	; 102
    12da:	94 e2       	ldi	r25, 0x24	; 36
    12dc:	3c da       	rcall	.-2952   	; 0x756 <at_cipsend>
    12de:	8d e6       	ldi	r24, 0x6D	; 109
    12e0:	93 e2       	ldi	r25, 0x23	; 35
    12e2:	39 da       	rcall	.-2958   	; 0x756 <at_cipsend>
    12e4:	83 ea       	ldi	r24, 0xA3	; 163
    12e6:	94 e2       	ldi	r25, 0x24	; 36
    12e8:	36 da       	rcall	.-2964   	; 0x756 <at_cipsend>
    12ea:	86 ed       	ldi	r24, 0xD6	; 214
    12ec:	94 e2       	ldi	r25, 0x24	; 36
    12ee:	33 da       	rcall	.-2970   	; 0x756 <at_cipsend>
    12f0:	8a e0       	ldi	r24, 0x0A	; 10
    12f2:	95 e2       	ldi	r25, 0x25	; 37
    12f4:	30 da       	rcall	.-2976   	; 0x756 <at_cipsend>
    12f6:	8d e6       	ldi	r24, 0x6D	; 109
    12f8:	93 e2       	ldi	r25, 0x23	; 35
    12fa:	2d da       	rcall	.-2982   	; 0x756 <at_cipsend>
    12fc:	15 cc       	rjmp	.-2006   	; 0xb28 <esp8266_telnet_server+0xe2>
    12fe:	82 e3       	ldi	r24, 0x32	; 50
    1300:	ec ed       	ldi	r30, 0xDC	; 220
    1302:	f6 e2       	ldi	r31, 0x26	; 38
    1304:	df 01       	movw	r26, r30
    1306:	1d 92       	st	X+, r1
    1308:	8a 95       	dec	r24
    130a:	e9 f7       	brne	.-6      	; 0x1306 <esp8266_telnet_server+0x8c0>
    130c:	87 e0       	ldi	r24, 0x07	; 7
    130e:	93 e2       	ldi	r25, 0x23	; 35
    1310:	22 da       	rcall	.-3004   	; 0x756 <at_cipsend>
    1312:	0a cc       	rjmp	.-2028   	; 0xb28 <esp8266_telnet_server+0xe2>
    1314:	81 e5       	ldi	r24, 0x51	; 81
    1316:	92 e2       	ldi	r25, 0x22	; 34
    1318:	1e da       	rcall	.-3012   	; 0x756 <at_cipsend>
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	05 cc       	rjmp	.-2038   	; 0xb28 <esp8266_telnet_server+0xe2>
    131e:	83 ea       	ldi	r24, 0xA3	; 163
    1320:	92 e2       	ldi	r25, 0x22	; 34
    1322:	19 da       	rcall	.-3022   	; 0x756 <at_cipsend>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	00 cc       	rjmp	.-2048   	; 0xb28 <esp8266_telnet_server+0xe2>
    1328:	8a e7       	ldi	r24, 0x7A	; 122
    132a:	92 e2       	ldi	r25, 0x22	; 34
    132c:	14 da       	rcall	.-3032   	; 0x756 <at_cipsend>
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	fb cb       	rjmp	.-2058   	; 0xb28 <esp8266_telnet_server+0xe2>

00001332 <__vector_88>:

ISR(USARTD0_RXC_vect) {
    1332:	1f 92       	push	r1
    1334:	0f 92       	push	r0
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	0f 92       	push	r0
    133a:	11 24       	eor	r1, r1
    133c:	0b b6       	in	r0, 0x3b	; 59
    133e:	0f 92       	push	r0
    1340:	2f 93       	push	r18
    1342:	3f 93       	push	r19
    1344:	4f 93       	push	r20
    1346:	5f 93       	push	r21
    1348:	6f 93       	push	r22
    134a:	7f 93       	push	r23
    134c:	8f 93       	push	r24
    134e:	9f 93       	push	r25
    1350:	af 93       	push	r26
    1352:	bf 93       	push	r27
    1354:	ef 93       	push	r30
    1356:	ff 93       	push	r31
	
	char rx_temp = USARTD0.DATA;
    1358:	40 91 a0 09 	lds	r20, 0x09A0
	
	if (rx_temp == '\n') {
    135c:	4a 30       	cpi	r20, 0x0A	; 10
    135e:	11 f1       	breq	.+68     	; 0x13a4 <__vector_88+0x72>
			//Flush buffer
			rx_ptr = 0;
			memset(rx_buffer, 0, RX_BUFFER);	
		}
	} else {
		rx_buffer[rx_ptr++] = rx_temp;
    1360:	80 91 92 26 	lds	r24, 0x2692
    1364:	90 91 93 26 	lds	r25, 0x2693
    1368:	9c 01       	movw	r18, r24
    136a:	2f 5f       	subi	r18, 0xFF	; 255
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	20 93 92 26 	sts	0x2692, r18
    1372:	30 93 93 26 	sts	0x2693, r19
    1376:	fc 01       	movw	r30, r24
    1378:	e6 53       	subi	r30, 0x36	; 54
    137a:	fa 4d       	sbci	r31, 0xDA	; 218
    137c:	40 83       	st	Z, r20
	}
    137e:	ff 91       	pop	r31
    1380:	ef 91       	pop	r30
    1382:	bf 91       	pop	r27
    1384:	af 91       	pop	r26
    1386:	9f 91       	pop	r25
    1388:	8f 91       	pop	r24
    138a:	7f 91       	pop	r23
    138c:	6f 91       	pop	r22
    138e:	5f 91       	pop	r21
    1390:	4f 91       	pop	r20
    1392:	3f 91       	pop	r19
    1394:	2f 91       	pop	r18
    1396:	0f 90       	pop	r0
    1398:	0b be       	out	0x3b, r0	; 59
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	0f 90       	pop	r0
    13a0:	1f 90       	pop	r1
    13a2:	18 95       	reti
ISR(USARTD0_RXC_vect) {
	
	char rx_temp = USARTD0.DATA;
	
	if (rx_temp == '\n') {
		if (strstr(rx_buffer,"OK")) {
    13a4:	66 e5       	ldi	r22, 0x56	; 86
    13a6:	75 e2       	ldi	r23, 0x25	; 37
    13a8:	8a ec       	ldi	r24, 0xCA	; 202
    13aa:	95 e2       	ldi	r25, 0x25	; 37
    13ac:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
    13b0:	89 2b       	or	r24, r25
    13b2:	79 f0       	breq	.+30     	; 0x13d2 <__vector_88+0xa0>
			status = ESP8266_SUCCESS;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	80 93 0e 27 	sts	0x270E, r24
		} else if (strstr(rx_buffer,"+IPD")) {
			got_reply = true;
			strncpy(telnet_cmd,rx_buffer,50);
		}
		
		if (strstr(rx_buffer,"{")) {
    13ba:	6b e7       	ldi	r22, 0x7B	; 123
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	8a ec       	ldi	r24, 0xCA	; 202
    13c0:	95 e2       	ldi	r25, 0x25	; 37
    13c2:	0e 94 89 18 	call	0x3112	; 0x3112 <strchr>
    13c6:	89 2b       	or	r24, r25
    13c8:	79 f0       	breq	.+30     	; 0x13e8 <__vector_88+0xb6>
			json_found = true;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	80 93 95 26 	sts	0x2695, r24
    13d0:	d6 cf       	rjmp	.-84     	; 0x137e <__vector_88+0x4c>
	char rx_temp = USARTD0.DATA;
	
	if (rx_temp == '\n') {
		if (strstr(rx_buffer,"OK")) {
			status = ESP8266_SUCCESS;
		} else if (strstr(rx_buffer,"ERROR")) {
    13d2:	69 e5       	ldi	r22, 0x59	; 89
    13d4:	75 e2       	ldi	r23, 0x25	; 37
    13d6:	8a ec       	ldi	r24, 0xCA	; 202
    13d8:	95 e2       	ldi	r25, 0x25	; 37
    13da:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
    13de:	89 2b       	or	r24, r25
    13e0:	79 f0       	breq	.+30     	; 0x1400 <__vector_88+0xce>
			status = ESP8266_ERROR;
    13e2:	10 92 0e 27 	sts	0x270E, r1
    13e6:	e9 cf       	rjmp	.-46     	; 0x13ba <__vector_88+0x88>
		
		if (strstr(rx_buffer,"{")) {
			json_found = true;
		} else {
			//Flush buffer
			rx_ptr = 0;
    13e8:	10 92 92 26 	sts	0x2692, r1
    13ec:	10 92 93 26 	sts	0x2693, r1
			memset(rx_buffer, 0, RX_BUFFER);	
    13f0:	88 ec       	ldi	r24, 0xC8	; 200
    13f2:	ea ec       	ldi	r30, 0xCA	; 202
    13f4:	f5 e2       	ldi	r31, 0x25	; 37
    13f6:	df 01       	movw	r26, r30
    13f8:	1d 92       	st	X+, r1
    13fa:	8a 95       	dec	r24
    13fc:	e9 f7       	brne	.-6      	; 0x13f8 <__vector_88+0xc6>
    13fe:	bf cf       	rjmp	.-130    	; 0x137e <__vector_88+0x4c>
	if (rx_temp == '\n') {
		if (strstr(rx_buffer,"OK")) {
			status = ESP8266_SUCCESS;
		} else if (strstr(rx_buffer,"ERROR")) {
			status = ESP8266_ERROR;
		} else if (strstr(rx_buffer,"CONNECT")) {
    1400:	6f e5       	ldi	r22, 0x5F	; 95
    1402:	75 e2       	ldi	r23, 0x25	; 37
    1404:	8a ec       	ldi	r24, 0xCA	; 202
    1406:	95 e2       	ldi	r25, 0x25	; 37
    1408:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
    140c:	89 2b       	or	r24, r25
    140e:	21 f0       	breq	.+8      	; 0x1418 <__vector_88+0xe6>
			status = ESP8266_CONNECT;
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	80 93 0e 27 	sts	0x270E, r24
    1416:	d1 cf       	rjmp	.-94     	; 0x13ba <__vector_88+0x88>
		} else if (strstr(rx_buffer,"CLOSED")) {
    1418:	67 e6       	ldi	r22, 0x67	; 103
    141a:	75 e2       	ldi	r23, 0x25	; 37
    141c:	8a ec       	ldi	r24, 0xCA	; 202
    141e:	95 e2       	ldi	r25, 0x25	; 37
    1420:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
    1424:	89 2b       	or	r24, r25
    1426:	21 f0       	breq	.+8      	; 0x1430 <__vector_88+0xfe>
			status = ESP8266_CLOSED;
    1428:	85 e0       	ldi	r24, 0x05	; 5
    142a:	80 93 0e 27 	sts	0x270E, r24
    142e:	c5 cf       	rjmp	.-118    	; 0x13ba <__vector_88+0x88>
		} else if (strstr(rx_buffer,"192")) {
    1430:	6e e6       	ldi	r22, 0x6E	; 110
    1432:	75 e2       	ldi	r23, 0x25	; 37
    1434:	8a ec       	ldi	r24, 0xCA	; 202
    1436:	95 e2       	ldi	r25, 0x25	; 37
    1438:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
    143c:	89 2b       	or	r24, r25
    143e:	71 f0       	breq	.+28     	; 0x145c <__vector_88+0x12a>
			strncpy(ip_address,strchr(rx_buffer,'\"'),19);
    1440:	62 e2       	ldi	r22, 0x22	; 34
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	8a ec       	ldi	r24, 0xCA	; 202
    1446:	95 e2       	ldi	r25, 0x25	; 37
    1448:	0e 94 89 18 	call	0x3112	; 0x3112 <strchr>
    144c:	43 e1       	ldi	r20, 0x13	; 19
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	bc 01       	movw	r22, r24
    1452:	88 ec       	ldi	r24, 0xC8	; 200
    1454:	96 e2       	ldi	r25, 0x26	; 38
    1456:	0e 94 9b 18 	call	0x3136	; 0x3136 <strncpy>
    145a:	af cf       	rjmp	.-162    	; 0x13ba <__vector_88+0x88>
		//This might be error prone...
		} else if (strstr(rx_buffer,"+IPD")) {
    145c:	62 e7       	ldi	r22, 0x72	; 114
    145e:	75 e2       	ldi	r23, 0x25	; 37
    1460:	8a ec       	ldi	r24, 0xCA	; 202
    1462:	95 e2       	ldi	r25, 0x25	; 37
    1464:	0e 94 aa 18 	call	0x3154	; 0x3154 <strstr>
    1468:	89 2b       	or	r24, r25
    146a:	09 f4       	brne	.+2      	; 0x146e <__vector_88+0x13c>
    146c:	a6 cf       	rjmp	.-180    	; 0x13ba <__vector_88+0x88>
			got_reply = true;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	80 93 94 26 	sts	0x2694, r24
			strncpy(telnet_cmd,rx_buffer,50);
    1474:	42 e3       	ldi	r20, 0x32	; 50
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	6a ec       	ldi	r22, 0xCA	; 202
    147a:	75 e2       	ldi	r23, 0x25	; 37
    147c:	8c ed       	ldi	r24, 0xDC	; 220
    147e:	96 e2       	ldi	r25, 0x26	; 38
    1480:	0e 94 9b 18 	call	0x3136	; 0x3136 <strncpy>
    1484:	9a cf       	rjmp	.-204    	; 0x13ba <__vector_88+0x88>

00001486 <ht1632c_setup>:

/*------------------------------STRING FUNCTIONS------------------------------*/

void ht1632c_set_cursor(int16_t x, int16_t y) {
	cursor_x = x;
	cursor_y = y;
    1486:	41 e0       	ldi	r20, 0x01	; 1
    1488:	40 93 81 06 	sts	0x0681, r20
    148c:	40 93 85 06 	sts	0x0685, r20
    1490:	24 e0       	ldi	r18, 0x04	; 4
    1492:	20 93 81 06 	sts	0x0681, r18
    1496:	20 93 85 06 	sts	0x0685, r18
    149a:	38 e0       	ldi	r19, 0x08	; 8
    149c:	30 93 81 06 	sts	0x0681, r19
    14a0:	40 93 86 06 	sts	0x0686, r20
    14a4:	30 93 81 06 	sts	0x0681, r19
    14a8:	20 93 86 06 	sts	0x0686, r18
    14ac:	30 93 85 06 	sts	0x0685, r19
    14b0:	20 93 85 06 	sts	0x0685, r18
    14b4:	20 93 86 06 	sts	0x0686, r18
    14b8:	30 93 86 06 	sts	0x0686, r19
    14bc:	20 93 85 06 	sts	0x0685, r18
    14c0:	20 93 86 06 	sts	0x0686, r18
    14c4:	30 93 86 06 	sts	0x0686, r19
    14c8:	20 93 85 06 	sts	0x0685, r18
    14cc:	20 93 86 06 	sts	0x0686, r18
    14d0:	30 93 86 06 	sts	0x0686, r19
    14d4:	20 93 85 06 	sts	0x0685, r18
    14d8:	20 93 86 06 	sts	0x0686, r18
    14dc:	30 93 86 06 	sts	0x0686, r19
    14e0:	20 93 85 06 	sts	0x0685, r18
    14e4:	20 93 86 06 	sts	0x0686, r18
    14e8:	30 93 86 06 	sts	0x0686, r19
    14ec:	20 93 85 06 	sts	0x0685, r18
    14f0:	20 93 86 06 	sts	0x0686, r18
    14f4:	30 93 86 06 	sts	0x0686, r19
    14f8:	20 93 85 06 	sts	0x0685, r18
    14fc:	20 93 86 06 	sts	0x0686, r18
    1500:	30 93 86 06 	sts	0x0686, r19
    1504:	20 93 85 06 	sts	0x0685, r18
    1508:	20 93 86 06 	sts	0x0686, r18
    150c:	30 93 86 06 	sts	0x0686, r19
    1510:	20 93 85 06 	sts	0x0685, r18
    1514:	20 93 86 06 	sts	0x0686, r18
    1518:	30 93 86 06 	sts	0x0686, r19
    151c:	20 93 85 06 	sts	0x0685, r18
    1520:	20 93 86 06 	sts	0x0686, r18
    1524:	30 93 85 06 	sts	0x0685, r19
    1528:	20 93 85 06 	sts	0x0685, r18
    152c:	20 93 86 06 	sts	0x0686, r18
    1530:	30 93 86 06 	sts	0x0686, r19
    1534:	20 93 85 06 	sts	0x0685, r18
    1538:	30 93 86 06 	sts	0x0686, r19
    153c:	40 93 85 06 	sts	0x0685, r20
    1540:	40 93 86 06 	sts	0x0686, r20
    1544:	30 93 81 06 	sts	0x0681, r19
    1548:	20 93 86 06 	sts	0x0686, r18
    154c:	30 93 85 06 	sts	0x0685, r19
    1550:	20 93 85 06 	sts	0x0685, r18
    1554:	20 93 86 06 	sts	0x0686, r18
    1558:	30 93 86 06 	sts	0x0686, r19
    155c:	20 93 85 06 	sts	0x0685, r18
    1560:	20 93 86 06 	sts	0x0686, r18
    1564:	30 93 86 06 	sts	0x0686, r19
    1568:	20 93 85 06 	sts	0x0685, r18
    156c:	20 93 86 06 	sts	0x0686, r18
    1570:	30 93 86 06 	sts	0x0686, r19
    1574:	20 93 85 06 	sts	0x0685, r18
    1578:	20 93 86 06 	sts	0x0686, r18
    157c:	30 93 86 06 	sts	0x0686, r19
    1580:	20 93 85 06 	sts	0x0685, r18
    1584:	20 93 86 06 	sts	0x0686, r18
    1588:	30 93 86 06 	sts	0x0686, r19
    158c:	20 93 85 06 	sts	0x0685, r18
    1590:	20 93 86 06 	sts	0x0686, r18
    1594:	30 93 86 06 	sts	0x0686, r19
    1598:	20 93 85 06 	sts	0x0685, r18
    159c:	20 93 86 06 	sts	0x0686, r18
    15a0:	30 93 86 06 	sts	0x0686, r19
    15a4:	20 93 85 06 	sts	0x0685, r18
    15a8:	20 93 86 06 	sts	0x0686, r18
    15ac:	30 93 86 06 	sts	0x0686, r19
    15b0:	20 93 85 06 	sts	0x0685, r18
    15b4:	20 93 86 06 	sts	0x0686, r18
    15b8:	30 93 85 06 	sts	0x0685, r19
    15bc:	20 93 85 06 	sts	0x0685, r18
    15c0:	20 93 86 06 	sts	0x0686, r18
    15c4:	30 93 85 06 	sts	0x0685, r19
    15c8:	20 93 85 06 	sts	0x0685, r18
    15cc:	20 93 86 06 	sts	0x0686, r18
    15d0:	30 93 86 06 	sts	0x0686, r19
    15d4:	20 93 85 06 	sts	0x0685, r18
    15d8:	30 93 86 06 	sts	0x0686, r19
    15dc:	40 93 85 06 	sts	0x0685, r20
    15e0:	40 93 86 06 	sts	0x0686, r20
    15e4:	30 93 81 06 	sts	0x0681, r19
    15e8:	20 93 86 06 	sts	0x0686, r18
    15ec:	30 93 85 06 	sts	0x0685, r19
    15f0:	20 93 85 06 	sts	0x0685, r18
    15f4:	20 93 86 06 	sts	0x0686, r18
    15f8:	30 93 86 06 	sts	0x0686, r19
    15fc:	20 93 85 06 	sts	0x0685, r18
    1600:	20 93 86 06 	sts	0x0686, r18
    1604:	30 93 86 06 	sts	0x0686, r19
    1608:	20 93 85 06 	sts	0x0685, r18
    160c:	20 93 86 06 	sts	0x0686, r18
    1610:	30 93 86 06 	sts	0x0686, r19
    1614:	20 93 85 06 	sts	0x0685, r18
    1618:	20 93 86 06 	sts	0x0686, r18
    161c:	30 93 86 06 	sts	0x0686, r19
    1620:	20 93 85 06 	sts	0x0685, r18
    1624:	20 93 86 06 	sts	0x0686, r18
    1628:	30 93 86 06 	sts	0x0686, r19
    162c:	20 93 85 06 	sts	0x0685, r18
    1630:	20 93 86 06 	sts	0x0686, r18
    1634:	30 93 86 06 	sts	0x0686, r19
    1638:	20 93 85 06 	sts	0x0685, r18
    163c:	20 93 86 06 	sts	0x0686, r18
    1640:	30 93 85 06 	sts	0x0685, r19
    1644:	20 93 85 06 	sts	0x0685, r18
    1648:	20 93 86 06 	sts	0x0686, r18
    164c:	30 93 86 06 	sts	0x0686, r19
    1650:	20 93 85 06 	sts	0x0685, r18
    1654:	20 93 86 06 	sts	0x0686, r18
    1658:	30 93 86 06 	sts	0x0686, r19
    165c:	20 93 85 06 	sts	0x0685, r18
    1660:	20 93 86 06 	sts	0x0686, r18
    1664:	30 93 86 06 	sts	0x0686, r19
    1668:	20 93 85 06 	sts	0x0685, r18
    166c:	20 93 86 06 	sts	0x0686, r18
    1670:	30 93 86 06 	sts	0x0686, r19
    1674:	20 93 85 06 	sts	0x0685, r18
    1678:	30 93 86 06 	sts	0x0686, r19
    167c:	40 93 85 06 	sts	0x0685, r20
    1680:	40 93 86 06 	sts	0x0686, r20
    1684:	30 93 81 06 	sts	0x0681, r19
    1688:	20 93 86 06 	sts	0x0686, r18
    168c:	30 93 85 06 	sts	0x0685, r19
    1690:	20 93 85 06 	sts	0x0685, r18
    1694:	20 93 86 06 	sts	0x0686, r18
    1698:	30 93 86 06 	sts	0x0686, r19
    169c:	20 93 85 06 	sts	0x0685, r18
    16a0:	20 93 86 06 	sts	0x0686, r18
    16a4:	30 93 86 06 	sts	0x0686, r19
    16a8:	20 93 85 06 	sts	0x0685, r18
    16ac:	20 93 86 06 	sts	0x0686, r18
    16b0:	30 93 86 06 	sts	0x0686, r19
    16b4:	20 93 85 06 	sts	0x0685, r18
    16b8:	20 93 86 06 	sts	0x0686, r18
    16bc:	30 93 86 06 	sts	0x0686, r19
    16c0:	20 93 85 06 	sts	0x0685, r18
    16c4:	20 93 86 06 	sts	0x0686, r18
    16c8:	30 93 86 06 	sts	0x0686, r19
    16cc:	20 93 85 06 	sts	0x0685, r18
    16d0:	20 93 86 06 	sts	0x0686, r18
    16d4:	30 93 85 06 	sts	0x0685, r19
    16d8:	20 93 85 06 	sts	0x0685, r18
    16dc:	20 93 86 06 	sts	0x0686, r18
    16e0:	30 93 86 06 	sts	0x0686, r19
    16e4:	20 93 85 06 	sts	0x0685, r18
    16e8:	20 93 86 06 	sts	0x0686, r18
    16ec:	30 93 85 06 	sts	0x0685, r19
    16f0:	20 93 85 06 	sts	0x0685, r18
    16f4:	20 93 86 06 	sts	0x0686, r18
    16f8:	30 93 86 06 	sts	0x0686, r19
    16fc:	20 93 85 06 	sts	0x0685, r18
    1700:	20 93 86 06 	sts	0x0686, r18
    1704:	30 93 86 06 	sts	0x0686, r19
    1708:	20 93 85 06 	sts	0x0685, r18
    170c:	20 93 86 06 	sts	0x0686, r18
    1710:	30 93 86 06 	sts	0x0686, r19
    1714:	20 93 85 06 	sts	0x0685, r18
    1718:	30 93 86 06 	sts	0x0686, r19
    171c:	40 93 85 06 	sts	0x0685, r20
    1720:	40 93 86 06 	sts	0x0686, r20
    1724:	30 93 81 06 	sts	0x0681, r19
    1728:	20 93 86 06 	sts	0x0686, r18
    172c:	30 93 85 06 	sts	0x0685, r19
    1730:	20 93 85 06 	sts	0x0685, r18
    1734:	20 93 86 06 	sts	0x0686, r18
    1738:	30 93 86 06 	sts	0x0686, r19
    173c:	20 93 85 06 	sts	0x0685, r18
    1740:	20 93 86 06 	sts	0x0686, r18
    1744:	30 93 86 06 	sts	0x0686, r19
    1748:	20 93 85 06 	sts	0x0685, r18
    174c:	20 93 86 06 	sts	0x0686, r18
    1750:	30 93 86 06 	sts	0x0686, r19
    1754:	20 93 85 06 	sts	0x0685, r18
    1758:	20 93 86 06 	sts	0x0686, r18
    175c:	30 93 86 06 	sts	0x0686, r19
    1760:	20 93 85 06 	sts	0x0685, r18
    1764:	20 93 86 06 	sts	0x0686, r18
    1768:	30 93 86 06 	sts	0x0686, r19
    176c:	20 93 85 06 	sts	0x0685, r18
    1770:	20 93 86 06 	sts	0x0686, r18
    1774:	30 93 85 06 	sts	0x0685, r19
    1778:	20 93 85 06 	sts	0x0685, r18
    177c:	20 93 86 06 	sts	0x0686, r18
    1780:	30 93 85 06 	sts	0x0685, r19
    1784:	20 93 85 06 	sts	0x0685, r18
    1788:	20 93 86 06 	sts	0x0686, r18
    178c:	30 93 86 06 	sts	0x0686, r19
    1790:	20 93 85 06 	sts	0x0685, r18
    1794:	20 93 86 06 	sts	0x0686, r18
    1798:	30 93 86 06 	sts	0x0686, r19
    179c:	20 93 85 06 	sts	0x0685, r18
    17a0:	20 93 86 06 	sts	0x0686, r18
    17a4:	30 93 86 06 	sts	0x0686, r19
    17a8:	20 93 85 06 	sts	0x0685, r18
    17ac:	20 93 86 06 	sts	0x0686, r18
    17b0:	30 93 86 06 	sts	0x0686, r19
    17b4:	20 93 85 06 	sts	0x0685, r18
    17b8:	30 93 86 06 	sts	0x0686, r19
    17bc:	40 93 85 06 	sts	0x0685, r20
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	94 60       	ori	r25, 0x04	; 4
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	40 93 86 06 	sts	0x0686, r20
    17cc:	30 93 81 06 	sts	0x0681, r19
    17d0:	20 93 86 06 	sts	0x0686, r18
    17d4:	30 93 85 06 	sts	0x0685, r19
    17d8:	20 93 85 06 	sts	0x0685, r18
    17dc:	20 93 86 06 	sts	0x0686, r18
    17e0:	30 93 86 06 	sts	0x0686, r19
    17e4:	20 93 85 06 	sts	0x0685, r18
    17e8:	20 93 86 06 	sts	0x0686, r18
    17ec:	30 93 86 06 	sts	0x0686, r19
    17f0:	20 93 85 06 	sts	0x0685, r18
    17f4:	20 93 86 06 	sts	0x0686, r18
    17f8:	90 fd       	sbrc	r25, 0
    17fa:	e7 c0       	rjmp	.+462    	; 0x19ca <ht1632c_setup+0x544>
    17fc:	30 93 86 06 	sts	0x0686, r19
    1800:	24 e0       	ldi	r18, 0x04	; 4
    1802:	20 93 85 06 	sts	0x0685, r18
    1806:	20 93 86 06 	sts	0x0686, r18
    180a:	28 e0       	ldi	r18, 0x08	; 8
    180c:	87 fd       	sbrc	r24, 7
    180e:	9e c0       	rjmp	.+316    	; 0x194c <ht1632c_setup+0x4c6>
    1810:	20 93 86 06 	sts	0x0686, r18
    1814:	24 e0       	ldi	r18, 0x04	; 4
    1816:	20 93 85 06 	sts	0x0685, r18
    181a:	20 93 86 06 	sts	0x0686, r18
    181e:	28 e0       	ldi	r18, 0x08	; 8
    1820:	86 fd       	sbrc	r24, 6
    1822:	9e c0       	rjmp	.+316    	; 0x1960 <ht1632c_setup+0x4da>
    1824:	20 93 86 06 	sts	0x0686, r18
    1828:	24 e0       	ldi	r18, 0x04	; 4
    182a:	20 93 85 06 	sts	0x0685, r18
    182e:	20 93 86 06 	sts	0x0686, r18
    1832:	28 e0       	ldi	r18, 0x08	; 8
    1834:	85 fd       	sbrc	r24, 5
    1836:	9e c0       	rjmp	.+316    	; 0x1974 <ht1632c_setup+0x4ee>
    1838:	20 93 86 06 	sts	0x0686, r18
    183c:	24 e0       	ldi	r18, 0x04	; 4
    183e:	20 93 85 06 	sts	0x0685, r18
    1842:	20 93 86 06 	sts	0x0686, r18
    1846:	28 e0       	ldi	r18, 0x08	; 8
    1848:	84 fd       	sbrc	r24, 4
    184a:	9e c0       	rjmp	.+316    	; 0x1988 <ht1632c_setup+0x502>
    184c:	20 93 86 06 	sts	0x0686, r18
    1850:	24 e0       	ldi	r18, 0x04	; 4
    1852:	20 93 85 06 	sts	0x0685, r18
    1856:	20 93 86 06 	sts	0x0686, r18
    185a:	28 e0       	ldi	r18, 0x08	; 8
    185c:	83 fd       	sbrc	r24, 3
    185e:	9e c0       	rjmp	.+316    	; 0x199c <ht1632c_setup+0x516>
    1860:	20 93 86 06 	sts	0x0686, r18
    1864:	24 e0       	ldi	r18, 0x04	; 4
    1866:	20 93 85 06 	sts	0x0685, r18
    186a:	20 93 86 06 	sts	0x0686, r18
    186e:	28 e0       	ldi	r18, 0x08	; 8
    1870:	82 fd       	sbrc	r24, 2
    1872:	9e c0       	rjmp	.+316    	; 0x19b0 <ht1632c_setup+0x52a>
    1874:	20 93 86 06 	sts	0x0686, r18
    1878:	94 e0       	ldi	r25, 0x04	; 4
    187a:	90 93 85 06 	sts	0x0685, r25
    187e:	90 93 86 06 	sts	0x0686, r25
    1882:	81 fd       	sbrc	r24, 1
    1884:	9e c0       	rjmp	.+316    	; 0x19c2 <ht1632c_setup+0x53c>
    1886:	88 e0       	ldi	r24, 0x08	; 8
    1888:	80 93 86 06 	sts	0x0686, r24
    188c:	84 e0       	ldi	r24, 0x04	; 4
    188e:	80 93 85 06 	sts	0x0685, r24
    1892:	80 93 86 06 	sts	0x0686, r24
    1896:	98 e0       	ldi	r25, 0x08	; 8
    1898:	90 93 86 06 	sts	0x0686, r25
    189c:	80 93 85 06 	sts	0x0685, r24
    18a0:	90 93 86 06 	sts	0x0686, r25
    18a4:	21 e0       	ldi	r18, 0x01	; 1
    18a6:	20 93 85 06 	sts	0x0685, r18
    18aa:	20 93 86 06 	sts	0x0686, r18
    18ae:	90 93 81 06 	sts	0x0681, r25
    18b2:	80 93 86 06 	sts	0x0686, r24
    18b6:	90 93 85 06 	sts	0x0685, r25
    18ba:	80 93 85 06 	sts	0x0685, r24
    18be:	80 93 86 06 	sts	0x0686, r24
    18c2:	90 93 86 06 	sts	0x0686, r25
    18c6:	80 93 85 06 	sts	0x0685, r24
    18ca:	80 93 86 06 	sts	0x0686, r24
    18ce:	90 93 86 06 	sts	0x0686, r25
    18d2:	80 93 85 06 	sts	0x0685, r24
    18d6:	80 93 86 06 	sts	0x0686, r24
    18da:	90 93 85 06 	sts	0x0685, r25
    18de:	80 93 85 06 	sts	0x0685, r24
    18e2:	80 93 86 06 	sts	0x0686, r24
    18e6:	90 93 86 06 	sts	0x0686, r25
    18ea:	80 93 85 06 	sts	0x0685, r24
    18ee:	80 93 86 06 	sts	0x0686, r24
    18f2:	90 93 85 06 	sts	0x0685, r25
    18f6:	80 93 85 06 	sts	0x0685, r24
    18fa:	80 93 86 06 	sts	0x0686, r24
    18fe:	90 93 86 06 	sts	0x0686, r25
    1902:	80 93 85 06 	sts	0x0685, r24
    1906:	80 93 86 06 	sts	0x0686, r24
    190a:	90 93 86 06 	sts	0x0686, r25
    190e:	80 93 85 06 	sts	0x0685, r24
    1912:	80 93 86 06 	sts	0x0686, r24
    1916:	90 93 86 06 	sts	0x0686, r25
    191a:	80 93 85 06 	sts	0x0685, r24
    191e:	80 93 86 06 	sts	0x0686, r24
    1922:	90 93 86 06 	sts	0x0686, r25
    1926:	80 93 85 06 	sts	0x0685, r24
    192a:	80 93 86 06 	sts	0x0686, r24
    192e:	90 93 85 06 	sts	0x0685, r25
    1932:	80 93 85 06 	sts	0x0685, r24
    1936:	80 93 86 06 	sts	0x0686, r24
    193a:	90 93 86 06 	sts	0x0686, r25
    193e:	80 93 85 06 	sts	0x0685, r24
    1942:	90 93 86 06 	sts	0x0686, r25
    1946:	20 93 85 06 	sts	0x0685, r18
    194a:	08 95       	ret
    194c:	20 93 85 06 	sts	0x0685, r18
    1950:	24 e0       	ldi	r18, 0x04	; 4
    1952:	20 93 85 06 	sts	0x0685, r18
    1956:	20 93 86 06 	sts	0x0686, r18
    195a:	28 e0       	ldi	r18, 0x08	; 8
    195c:	86 ff       	sbrs	r24, 6
    195e:	62 cf       	rjmp	.-316    	; 0x1824 <ht1632c_setup+0x39e>
    1960:	20 93 85 06 	sts	0x0685, r18
    1964:	24 e0       	ldi	r18, 0x04	; 4
    1966:	20 93 85 06 	sts	0x0685, r18
    196a:	20 93 86 06 	sts	0x0686, r18
    196e:	28 e0       	ldi	r18, 0x08	; 8
    1970:	85 ff       	sbrs	r24, 5
    1972:	62 cf       	rjmp	.-316    	; 0x1838 <ht1632c_setup+0x3b2>
    1974:	20 93 85 06 	sts	0x0685, r18
    1978:	24 e0       	ldi	r18, 0x04	; 4
    197a:	20 93 85 06 	sts	0x0685, r18
    197e:	20 93 86 06 	sts	0x0686, r18
    1982:	28 e0       	ldi	r18, 0x08	; 8
    1984:	84 ff       	sbrs	r24, 4
    1986:	62 cf       	rjmp	.-316    	; 0x184c <ht1632c_setup+0x3c6>
    1988:	20 93 85 06 	sts	0x0685, r18
    198c:	24 e0       	ldi	r18, 0x04	; 4
    198e:	20 93 85 06 	sts	0x0685, r18
    1992:	20 93 86 06 	sts	0x0686, r18
    1996:	28 e0       	ldi	r18, 0x08	; 8
    1998:	83 ff       	sbrs	r24, 3
    199a:	62 cf       	rjmp	.-316    	; 0x1860 <ht1632c_setup+0x3da>
    199c:	20 93 85 06 	sts	0x0685, r18
    19a0:	24 e0       	ldi	r18, 0x04	; 4
    19a2:	20 93 85 06 	sts	0x0685, r18
    19a6:	20 93 86 06 	sts	0x0686, r18
    19aa:	28 e0       	ldi	r18, 0x08	; 8
    19ac:	82 ff       	sbrs	r24, 2
    19ae:	62 cf       	rjmp	.-316    	; 0x1874 <ht1632c_setup+0x3ee>
    19b0:	20 93 85 06 	sts	0x0685, r18
    19b4:	94 e0       	ldi	r25, 0x04	; 4
    19b6:	90 93 85 06 	sts	0x0685, r25
    19ba:	90 93 86 06 	sts	0x0686, r25
    19be:	81 ff       	sbrs	r24, 1
    19c0:	62 cf       	rjmp	.-316    	; 0x1886 <ht1632c_setup+0x400>
    19c2:	88 e0       	ldi	r24, 0x08	; 8
    19c4:	80 93 85 06 	sts	0x0685, r24
    19c8:	61 cf       	rjmp	.-318    	; 0x188c <ht1632c_setup+0x406>
    19ca:	30 93 85 06 	sts	0x0685, r19
    19ce:	24 e0       	ldi	r18, 0x04	; 4
    19d0:	20 93 85 06 	sts	0x0685, r18
    19d4:	20 93 86 06 	sts	0x0686, r18
    19d8:	28 e0       	ldi	r18, 0x08	; 8
    19da:	87 fd       	sbrc	r24, 7
    19dc:	b7 cf       	rjmp	.-146    	; 0x194c <ht1632c_setup+0x4c6>
    19de:	18 cf       	rjmp	.-464    	; 0x1810 <ht1632c_setup+0x38a>

000019e0 <ht1632c_set_brightness>:
    19e0:	80 31       	cpi	r24, 0x10	; 16
    19e2:	08 f0       	brcs	.+2      	; 0x19e6 <ht1632c_set_brightness+0x6>
    19e4:	8f e0       	ldi	r24, 0x0F	; 15
    19e6:	80 6a       	ori	r24, 0xA0	; 160
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	94 60       	ori	r25, 0x04	; 4
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	21 e0       	ldi	r18, 0x01	; 1
    19f2:	20 93 86 06 	sts	0x0686, r18
    19f6:	38 e0       	ldi	r19, 0x08	; 8
    19f8:	30 93 81 06 	sts	0x0681, r19
    19fc:	24 e0       	ldi	r18, 0x04	; 4
    19fe:	20 93 86 06 	sts	0x0686, r18
    1a02:	30 93 85 06 	sts	0x0685, r19
    1a06:	20 93 85 06 	sts	0x0685, r18
    1a0a:	20 93 86 06 	sts	0x0686, r18
    1a0e:	30 93 86 06 	sts	0x0686, r19
    1a12:	20 93 85 06 	sts	0x0685, r18
    1a16:	20 93 86 06 	sts	0x0686, r18
    1a1a:	30 93 86 06 	sts	0x0686, r19
    1a1e:	20 93 85 06 	sts	0x0685, r18
    1a22:	20 93 86 06 	sts	0x0686, r18
    1a26:	30 93 85 06 	sts	0x0685, r19
    1a2a:	20 93 85 06 	sts	0x0685, r18
    1a2e:	20 93 86 06 	sts	0x0686, r18
    1a32:	30 93 86 06 	sts	0x0686, r19
    1a36:	20 93 85 06 	sts	0x0685, r18
    1a3a:	20 93 86 06 	sts	0x0686, r18
    1a3e:	30 93 85 06 	sts	0x0685, r19
    1a42:	20 93 85 06 	sts	0x0685, r18
    1a46:	20 93 86 06 	sts	0x0686, r18
    1a4a:	30 93 86 06 	sts	0x0686, r19
    1a4e:	20 93 85 06 	sts	0x0685, r18
    1a52:	20 93 86 06 	sts	0x0686, r18
    1a56:	84 fd       	sbrc	r24, 4
    1a58:	47 c0       	rjmp	.+142    	; 0x1ae8 <ht1632c_set_brightness+0x108>
    1a5a:	30 93 86 06 	sts	0x0686, r19
    1a5e:	24 e0       	ldi	r18, 0x04	; 4
    1a60:	20 93 85 06 	sts	0x0685, r18
    1a64:	20 93 86 06 	sts	0x0686, r18
    1a68:	28 e0       	ldi	r18, 0x08	; 8
    1a6a:	83 fd       	sbrc	r24, 3
    1a6c:	26 c0       	rjmp	.+76     	; 0x1aba <ht1632c_set_brightness+0xda>
    1a6e:	20 93 86 06 	sts	0x0686, r18
    1a72:	24 e0       	ldi	r18, 0x04	; 4
    1a74:	20 93 85 06 	sts	0x0685, r18
    1a78:	20 93 86 06 	sts	0x0686, r18
    1a7c:	28 e0       	ldi	r18, 0x08	; 8
    1a7e:	82 fd       	sbrc	r24, 2
    1a80:	26 c0       	rjmp	.+76     	; 0x1ace <ht1632c_set_brightness+0xee>
    1a82:	20 93 86 06 	sts	0x0686, r18
    1a86:	94 e0       	ldi	r25, 0x04	; 4
    1a88:	90 93 85 06 	sts	0x0685, r25
    1a8c:	90 93 86 06 	sts	0x0686, r25
    1a90:	81 fd       	sbrc	r24, 1
    1a92:	26 c0       	rjmp	.+76     	; 0x1ae0 <ht1632c_set_brightness+0x100>
    1a94:	88 e0       	ldi	r24, 0x08	; 8
    1a96:	80 93 86 06 	sts	0x0686, r24
    1a9a:	84 e0       	ldi	r24, 0x04	; 4
    1a9c:	80 93 85 06 	sts	0x0685, r24
    1aa0:	80 93 86 06 	sts	0x0686, r24
    1aa4:	98 e0       	ldi	r25, 0x08	; 8
    1aa6:	90 93 86 06 	sts	0x0686, r25
    1aaa:	80 93 85 06 	sts	0x0685, r24
    1aae:	90 93 86 06 	sts	0x0686, r25
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	80 93 85 06 	sts	0x0685, r24
    1ab8:	08 95       	ret
    1aba:	20 93 85 06 	sts	0x0685, r18
    1abe:	24 e0       	ldi	r18, 0x04	; 4
    1ac0:	20 93 85 06 	sts	0x0685, r18
    1ac4:	20 93 86 06 	sts	0x0686, r18
    1ac8:	28 e0       	ldi	r18, 0x08	; 8
    1aca:	82 ff       	sbrs	r24, 2
    1acc:	da cf       	rjmp	.-76     	; 0x1a82 <ht1632c_set_brightness+0xa2>
    1ace:	20 93 85 06 	sts	0x0685, r18
    1ad2:	94 e0       	ldi	r25, 0x04	; 4
    1ad4:	90 93 85 06 	sts	0x0685, r25
    1ad8:	90 93 86 06 	sts	0x0686, r25
    1adc:	81 ff       	sbrs	r24, 1
    1ade:	da cf       	rjmp	.-76     	; 0x1a94 <ht1632c_set_brightness+0xb4>
    1ae0:	88 e0       	ldi	r24, 0x08	; 8
    1ae2:	80 93 85 06 	sts	0x0685, r24
    1ae6:	d9 cf       	rjmp	.-78     	; 0x1a9a <ht1632c_set_brightness+0xba>
    1ae8:	30 93 85 06 	sts	0x0685, r19
    1aec:	24 e0       	ldi	r18, 0x04	; 4
    1aee:	20 93 85 06 	sts	0x0685, r18
    1af2:	20 93 86 06 	sts	0x0686, r18
    1af6:	28 e0       	ldi	r18, 0x08	; 8
    1af8:	83 fd       	sbrc	r24, 3
    1afa:	df cf       	rjmp	.-66     	; 0x1aba <ht1632c_set_brightness+0xda>
    1afc:	b8 cf       	rjmp	.-144    	; 0x1a6e <ht1632c_set_brightness+0x8e>

00001afe <ht1632c_fill_rect>:
    1afe:	5f 92       	push	r5
    1b00:	6f 92       	push	r6
    1b02:	7f 92       	push	r7
    1b04:	8f 92       	push	r8
    1b06:	9f 92       	push	r9
    1b08:	af 92       	push	r10
    1b0a:	bf 92       	push	r11
    1b0c:	cf 92       	push	r12
    1b0e:	df 92       	push	r13
    1b10:	ef 92       	push	r14
    1b12:	ff 92       	push	r15
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	18 2f       	mov	r17, r24
    1b1e:	56 2e       	mov	r5, r22
    1b20:	e8 2f       	mov	r30, r24
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	7f 01       	movw	r14, r30
    1b26:	e4 0e       	add	r14, r20
    1b28:	f1 1c       	adc	r15, r1
    1b2a:	ee 15       	cp	r30, r14
    1b2c:	ff 05       	cpc	r31, r15
    1b2e:	94 f5       	brge	.+100    	; 0x1b94 <ht1632c_fill_rect+0x96>
    1b30:	c6 2f       	mov	r28, r22
    1b32:	d0 e0       	ldi	r29, 0x00	; 0
    1b34:	be 01       	movw	r22, r28
    1b36:	62 0f       	add	r22, r18
    1b38:	71 1d       	adc	r23, r1
    1b3a:	9b 01       	movw	r18, r22
    1b3c:	bf e0       	ldi	r27, 0x0F	; 15
    1b3e:	8b 2e       	mov	r8, r27
    1b40:	91 2c       	mov	r9, r1
    1b42:	88 e1       	ldi	r24, 0x18	; 24
    1b44:	a8 2e       	mov	r10, r24
    1b46:	b1 2c       	mov	r11, r1
    1b48:	cc 24       	eor	r12, r12
    1b4a:	c3 94       	inc	r12
    1b4c:	d1 2c       	mov	r13, r1
    1b4e:	c2 17       	cp	r28, r18
    1b50:	d3 07       	cpc	r29, r19
    1b52:	d4 f4       	brge	.+52     	; 0x1b88 <ht1632c_fill_rect+0x8a>
    1b54:	af 01       	movw	r20, r30
    1b56:	44 0f       	add	r20, r20
    1b58:	55 1f       	adc	r21, r21
    1b5a:	3a 01       	movw	r6, r20
    1b5c:	7f e0       	ldi	r23, 0x0F	; 15
    1b5e:	67 1a       	sub	r6, r23
    1b60:	71 08       	sbc	r7, r1
    1b62:	e8 30       	cpi	r30, 0x08	; 8
    1b64:	f1 05       	cpc	r31, r1
    1b66:	0c f4       	brge	.+2      	; 0x1b6a <ht1632c_fill_rect+0x6c>
    1b68:	3a 01       	movw	r6, r20
    1b6a:	66 0c       	add	r6, r6
    1b6c:	77 1c       	adc	r7, r7
    1b6e:	66 0c       	add	r6, r6
    1b70:	77 1c       	adc	r7, r7
    1b72:	66 0c       	add	r6, r6
    1b74:	77 1c       	adc	r7, r7
    1b76:	70 97       	sbiw	r30, 0x10	; 16
    1b78:	ec f0       	brlt	.+58     	; 0x1bb4 <ht1632c_fill_rect+0xb6>
    1b7a:	45 2d       	mov	r20, r5
    1b7c:	4f 5f       	subi	r20, 0xFF	; 255
    1b7e:	84 2f       	mov	r24, r20
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	82 17       	cp	r24, r18
    1b84:	93 07       	cpc	r25, r19
    1b86:	d4 f3       	brlt	.-12     	; 0x1b7c <ht1632c_fill_rect+0x7e>
    1b88:	1f 5f       	subi	r17, 0xFF	; 255
    1b8a:	e1 2f       	mov	r30, r17
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	ee 15       	cp	r30, r14
    1b90:	ff 05       	cpc	r31, r15
    1b92:	ec f2       	brlt	.-70     	; 0x1b4e <ht1632c_fill_rect+0x50>
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	ff 90       	pop	r15
    1b9e:	ef 90       	pop	r14
    1ba0:	df 90       	pop	r13
    1ba2:	cf 90       	pop	r12
    1ba4:	bf 90       	pop	r11
    1ba6:	af 90       	pop	r10
    1ba8:	9f 90       	pop	r9
    1baa:	8f 90       	pop	r8
    1bac:	7f 90       	pop	r7
    1bae:	6f 90       	pop	r6
    1bb0:	5f 90       	pop	r5
    1bb2:	08 95       	ret
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	45 2d       	mov	r20, r5
    1bb8:	00 23       	and	r16, r16
    1bba:	39 f0       	breq	.+14     	; 0x1bca <ht1632c_fill_rect+0xcc>
    1bbc:	69 c0       	rjmp	.+210    	; 0x1c90 <ht1632c_fill_rect+0x192>
    1bbe:	4f 5f       	subi	r20, 0xFF	; 255
    1bc0:	84 2f       	mov	r24, r20
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	82 17       	cp	r24, r18
    1bc6:	93 07       	cpc	r25, r19
    1bc8:	fc f6       	brge	.-66     	; 0x1b88 <ht1632c_fill_rect+0x8a>
    1bca:	80 31       	cpi	r24, 0x10	; 16
    1bcc:	91 05       	cpc	r25, r1
    1bce:	bc f7       	brge	.-18     	; 0x1bbe <ht1632c_fill_rect+0xc0>
    1bd0:	f4 01       	movw	r30, r8
    1bd2:	e8 1b       	sub	r30, r24
    1bd4:	f9 0b       	sbc	r31, r25
    1bd6:	cf 01       	movw	r24, r30
    1bd8:	b5 01       	movw	r22, r10
    1bda:	0e 94 2c 18 	call	0x3058	; 0x3058 <__divmodhi4>
    1bde:	88 30       	cpi	r24, 0x08	; 8
    1be0:	91 05       	cpc	r25, r1
    1be2:	0c f4       	brge	.+2      	; 0x1be6 <ht1632c_fill_rect+0xe8>
    1be4:	59 c0       	rjmp	.+178    	; 0x1c98 <ht1632c_fill_rect+0x19a>
    1be6:	80 31       	cpi	r24, 0x10	; 16
    1be8:	91 05       	cpc	r25, r1
    1bea:	0c f0       	brlt	.+2      	; 0x1bee <ht1632c_fill_rect+0xf0>
    1bec:	5e c0       	rjmp	.+188    	; 0x1caa <ht1632c_fill_rect+0x1ac>
    1bee:	67 e8       	ldi	r22, 0x87	; 135
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	87 70       	andi	r24, 0x07	; 7
    1bf4:	99 27       	eor	r25, r25
    1bf6:	fb 01       	movw	r30, r22
    1bf8:	e8 1b       	sub	r30, r24
    1bfa:	f9 0b       	sbc	r31, r25
    1bfc:	cf 01       	movw	r24, r30
    1bfe:	86 0d       	add	r24, r6
    1c00:	97 1d       	adc	r25, r7
    1c02:	fc 01       	movw	r30, r24
    1c04:	f6 95       	lsr	r31
    1c06:	e7 95       	ror	r30
    1c08:	f6 95       	lsr	r31
    1c0a:	e7 95       	ror	r30
    1c0c:	f6 95       	lsr	r31
    1c0e:	e7 95       	ror	r30
    1c10:	ea 56       	subi	r30, 0x6A	; 106
    1c12:	f9 4d       	sbci	r31, 0xD9	; 217
    1c14:	87 70       	andi	r24, 0x07	; 7
    1c16:	99 27       	eor	r25, r25
    1c18:	b6 01       	movw	r22, r12
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <ht1632c_fill_rect+0x122>
    1c1c:	66 0f       	add	r22, r22
    1c1e:	77 1f       	adc	r23, r23
    1c20:	8a 95       	dec	r24
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <ht1632c_fill_rect+0x11e>
    1c24:	cb 01       	movw	r24, r22
    1c26:	80 95       	com	r24
    1c28:	90 81       	ld	r25, Z
    1c2a:	89 23       	and	r24, r25
    1c2c:	80 83       	st	Z, r24
    1c2e:	c7 cf       	rjmp	.-114    	; 0x1bbe <ht1632c_fill_rect+0xc0>
    1c30:	f4 01       	movw	r30, r8
    1c32:	e8 1b       	sub	r30, r24
    1c34:	f9 0b       	sbc	r31, r25
    1c36:	cf 01       	movw	r24, r30
    1c38:	b5 01       	movw	r22, r10
    1c3a:	0e 94 2c 18 	call	0x3058	; 0x3058 <__divmodhi4>
    1c3e:	88 30       	cpi	r24, 0x08	; 8
    1c40:	91 05       	cpc	r25, r1
    1c42:	6c f5       	brge	.+90     	; 0x1c9e <ht1632c_fill_rect+0x1a0>
    1c44:	67 e0       	ldi	r22, 0x07	; 7
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	87 70       	andi	r24, 0x07	; 7
    1c4a:	99 27       	eor	r25, r25
    1c4c:	fb 01       	movw	r30, r22
    1c4e:	e8 1b       	sub	r30, r24
    1c50:	f9 0b       	sbc	r31, r25
    1c52:	cf 01       	movw	r24, r30
    1c54:	86 0d       	add	r24, r6
    1c56:	97 1d       	adc	r25, r7
    1c58:	fc 01       	movw	r30, r24
    1c5a:	f6 95       	lsr	r31
    1c5c:	e7 95       	ror	r30
    1c5e:	f6 95       	lsr	r31
    1c60:	e7 95       	ror	r30
    1c62:	f6 95       	lsr	r31
    1c64:	e7 95       	ror	r30
    1c66:	ea 56       	subi	r30, 0x6A	; 106
    1c68:	f9 4d       	sbci	r31, 0xD9	; 217
    1c6a:	87 70       	andi	r24, 0x07	; 7
    1c6c:	99 27       	eor	r25, r25
    1c6e:	b6 01       	movw	r22, r12
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <ht1632c_fill_rect+0x178>
    1c72:	66 0f       	add	r22, r22
    1c74:	77 1f       	adc	r23, r23
    1c76:	8a 95       	dec	r24
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <ht1632c_fill_rect+0x174>
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	90 81       	ld	r25, Z
    1c7e:	98 2b       	or	r25, r24
    1c80:	90 83       	st	Z, r25
    1c82:	4f 5f       	subi	r20, 0xFF	; 255
    1c84:	84 2f       	mov	r24, r20
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	82 17       	cp	r24, r18
    1c8a:	93 07       	cpc	r25, r19
    1c8c:	0c f0       	brlt	.+2      	; 0x1c90 <ht1632c_fill_rect+0x192>
    1c8e:	7c cf       	rjmp	.-264    	; 0x1b88 <ht1632c_fill_rect+0x8a>
    1c90:	80 31       	cpi	r24, 0x10	; 16
    1c92:	91 05       	cpc	r25, r1
    1c94:	b4 f7       	brge	.-20     	; 0x1c82 <ht1632c_fill_rect+0x184>
    1c96:	cc cf       	rjmp	.-104    	; 0x1c30 <ht1632c_fill_rect+0x132>
    1c98:	67 e0       	ldi	r22, 0x07	; 7
    1c9a:	70 e0       	ldi	r23, 0x00	; 0
    1c9c:	aa cf       	rjmp	.-172    	; 0x1bf2 <ht1632c_fill_rect+0xf4>
    1c9e:	80 31       	cpi	r24, 0x10	; 16
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	34 f4       	brge	.+12     	; 0x1cb0 <ht1632c_fill_rect+0x1b2>
    1ca4:	67 e8       	ldi	r22, 0x87	; 135
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	cf cf       	rjmp	.-98     	; 0x1c48 <ht1632c_fill_rect+0x14a>
    1caa:	67 e0       	ldi	r22, 0x07	; 7
    1cac:	71 e0       	ldi	r23, 0x01	; 1
    1cae:	a1 cf       	rjmp	.-190    	; 0x1bf2 <ht1632c_fill_rect+0xf4>
    1cb0:	67 e0       	ldi	r22, 0x07	; 7
    1cb2:	71 e0       	ldi	r23, 0x01	; 1
    1cb4:	c9 cf       	rjmp	.-110    	; 0x1c48 <ht1632c_fill_rect+0x14a>

00001cb6 <ht1632c_refresh_screen>:
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	80 93 86 06 	sts	0x0686, r24
    1cbc:	98 e0       	ldi	r25, 0x08	; 8
    1cbe:	90 93 81 06 	sts	0x0681, r25
    1cc2:	84 e0       	ldi	r24, 0x04	; 4
    1cc4:	80 93 86 06 	sts	0x0686, r24
    1cc8:	90 93 85 06 	sts	0x0685, r25
    1ccc:	80 93 85 06 	sts	0x0685, r24
    1cd0:	80 93 86 06 	sts	0x0686, r24
    1cd4:	90 93 86 06 	sts	0x0686, r25
    1cd8:	80 93 85 06 	sts	0x0685, r24
    1cdc:	80 93 86 06 	sts	0x0686, r24
    1ce0:	90 93 85 06 	sts	0x0685, r25
    1ce4:	80 93 85 06 	sts	0x0685, r24
    1ce8:	90 93 86 06 	sts	0x0686, r25
    1cec:	90 93 81 06 	sts	0x0681, r25
    1cf0:	80 93 86 06 	sts	0x0686, r24
    1cf4:	90 93 86 06 	sts	0x0686, r25
    1cf8:	80 93 85 06 	sts	0x0685, r24
    1cfc:	80 93 86 06 	sts	0x0686, r24
    1d00:	90 93 86 06 	sts	0x0686, r25
    1d04:	80 93 85 06 	sts	0x0685, r24
    1d08:	80 93 86 06 	sts	0x0686, r24
    1d0c:	90 93 86 06 	sts	0x0686, r25
    1d10:	80 93 85 06 	sts	0x0685, r24
    1d14:	80 93 86 06 	sts	0x0686, r24
    1d18:	90 93 86 06 	sts	0x0686, r25
    1d1c:	80 93 85 06 	sts	0x0685, r24
    1d20:	80 93 86 06 	sts	0x0686, r24
    1d24:	90 93 86 06 	sts	0x0686, r25
    1d28:	80 93 85 06 	sts	0x0685, r24
    1d2c:	80 93 86 06 	sts	0x0686, r24
    1d30:	90 93 86 06 	sts	0x0686, r25
    1d34:	80 93 85 06 	sts	0x0685, r24
    1d38:	80 93 86 06 	sts	0x0686, r24
    1d3c:	90 93 86 06 	sts	0x0686, r25
    1d40:	80 93 85 06 	sts	0x0685, r24
    1d44:	90 93 86 06 	sts	0x0686, r25
    1d48:	e7 e9       	ldi	r30, 0x97	; 151
    1d4a:	f6 e2       	ldi	r31, 0x26	; 38
    1d4c:	38 e0       	ldi	r19, 0x08	; 8
    1d4e:	24 e0       	ldi	r18, 0x04	; 4
    1d50:	7c c0       	rjmp	.+248    	; 0x1e4a <ht1632c_refresh_screen+0x194>
    1d52:	30 93 86 06 	sts	0x0686, r19
    1d56:	20 93 85 06 	sts	0x0685, r18
    1d5a:	20 93 86 06 	sts	0x0686, r18
    1d5e:	95 fd       	sbrc	r25, 5
    1d60:	92 c0       	rjmp	.+292    	; 0x1e86 <ht1632c_refresh_screen+0x1d0>
    1d62:	30 93 86 06 	sts	0x0686, r19
    1d66:	20 93 85 06 	sts	0x0685, r18
    1d6a:	20 93 86 06 	sts	0x0686, r18
    1d6e:	94 fd       	sbrc	r25, 4
    1d70:	92 c0       	rjmp	.+292    	; 0x1e96 <ht1632c_refresh_screen+0x1e0>
    1d72:	30 93 86 06 	sts	0x0686, r19
    1d76:	20 93 85 06 	sts	0x0685, r18
    1d7a:	20 93 86 06 	sts	0x0686, r18
    1d7e:	93 fd       	sbrc	r25, 3
    1d80:	92 c0       	rjmp	.+292    	; 0x1ea6 <ht1632c_refresh_screen+0x1f0>
    1d82:	30 93 86 06 	sts	0x0686, r19
    1d86:	20 93 85 06 	sts	0x0685, r18
    1d8a:	20 93 86 06 	sts	0x0686, r18
    1d8e:	92 fd       	sbrc	r25, 2
    1d90:	92 c0       	rjmp	.+292    	; 0x1eb6 <ht1632c_refresh_screen+0x200>
    1d92:	30 93 86 06 	sts	0x0686, r19
    1d96:	20 93 85 06 	sts	0x0685, r18
    1d9a:	20 93 86 06 	sts	0x0686, r18
    1d9e:	91 fd       	sbrc	r25, 1
    1da0:	92 c0       	rjmp	.+292    	; 0x1ec6 <ht1632c_refresh_screen+0x210>
    1da2:	30 93 86 06 	sts	0x0686, r19
    1da6:	20 93 85 06 	sts	0x0685, r18
    1daa:	20 93 86 06 	sts	0x0686, r18
    1dae:	90 fd       	sbrc	r25, 0
    1db0:	92 c0       	rjmp	.+292    	; 0x1ed6 <ht1632c_refresh_screen+0x220>
    1db2:	30 93 86 06 	sts	0x0686, r19
    1db6:	20 93 85 06 	sts	0x0685, r18
    1dba:	20 93 86 06 	sts	0x0686, r18
    1dbe:	87 fd       	sbrc	r24, 7
    1dc0:	92 c0       	rjmp	.+292    	; 0x1ee6 <ht1632c_refresh_screen+0x230>
    1dc2:	30 93 86 06 	sts	0x0686, r19
    1dc6:	20 93 85 06 	sts	0x0685, r18
    1dca:	20 93 86 06 	sts	0x0686, r18
    1dce:	86 fd       	sbrc	r24, 6
    1dd0:	92 c0       	rjmp	.+292    	; 0x1ef6 <ht1632c_refresh_screen+0x240>
    1dd2:	30 93 86 06 	sts	0x0686, r19
    1dd6:	20 93 85 06 	sts	0x0685, r18
    1dda:	20 93 86 06 	sts	0x0686, r18
    1dde:	85 fd       	sbrc	r24, 5
    1de0:	92 c0       	rjmp	.+292    	; 0x1f06 <ht1632c_refresh_screen+0x250>
    1de2:	30 93 86 06 	sts	0x0686, r19
    1de6:	20 93 85 06 	sts	0x0685, r18
    1dea:	20 93 86 06 	sts	0x0686, r18
    1dee:	84 fd       	sbrc	r24, 4
    1df0:	92 c0       	rjmp	.+292    	; 0x1f16 <ht1632c_refresh_screen+0x260>
    1df2:	30 93 86 06 	sts	0x0686, r19
    1df6:	20 93 85 06 	sts	0x0685, r18
    1dfa:	20 93 86 06 	sts	0x0686, r18
    1dfe:	83 fd       	sbrc	r24, 3
    1e00:	92 c0       	rjmp	.+292    	; 0x1f26 <ht1632c_refresh_screen+0x270>
    1e02:	30 93 86 06 	sts	0x0686, r19
    1e06:	20 93 85 06 	sts	0x0685, r18
    1e0a:	20 93 86 06 	sts	0x0686, r18
    1e0e:	82 fd       	sbrc	r24, 2
    1e10:	92 c0       	rjmp	.+292    	; 0x1f36 <ht1632c_refresh_screen+0x280>
    1e12:	30 93 86 06 	sts	0x0686, r19
    1e16:	20 93 85 06 	sts	0x0685, r18
    1e1a:	20 93 86 06 	sts	0x0686, r18
    1e1e:	81 fd       	sbrc	r24, 1
    1e20:	92 c0       	rjmp	.+292    	; 0x1f46 <ht1632c_refresh_screen+0x290>
    1e22:	30 93 86 06 	sts	0x0686, r19
    1e26:	20 93 85 06 	sts	0x0685, r18
    1e2a:	20 93 86 06 	sts	0x0686, r18
    1e2e:	80 fd       	sbrc	r24, 0
    1e30:	92 c0       	rjmp	.+292    	; 0x1f56 <ht1632c_refresh_screen+0x2a0>
    1e32:	30 93 86 06 	sts	0x0686, r19
    1e36:	20 93 85 06 	sts	0x0685, r18
    1e3a:	30 93 86 06 	sts	0x0686, r19
    1e3e:	32 96       	adiw	r30, 0x02	; 2
    1e40:	86 e2       	ldi	r24, 0x26	; 38
    1e42:	e7 3b       	cpi	r30, 0xB7	; 183
    1e44:	f8 07       	cpc	r31, r24
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <ht1632c_refresh_screen+0x194>
    1e48:	8c c0       	rjmp	.+280    	; 0x1f62 <ht1632c_refresh_screen+0x2ac>
    1e4a:	df 01       	movw	r26, r30
    1e4c:	11 97       	sbiw	r26, 0x01	; 1
    1e4e:	8c 91       	ld	r24, X
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	98 2f       	mov	r25, r24
    1e54:	88 27       	eor	r24, r24
    1e56:	40 81       	ld	r20, Z
    1e58:	84 2b       	or	r24, r20
    1e5a:	30 93 81 06 	sts	0x0681, r19
    1e5e:	20 93 86 06 	sts	0x0686, r18
    1e62:	97 fd       	sbrc	r25, 7
    1e64:	7b c0       	rjmp	.+246    	; 0x1f5c <ht1632c_refresh_screen+0x2a6>
    1e66:	30 93 86 06 	sts	0x0686, r19
    1e6a:	20 93 85 06 	sts	0x0685, r18
    1e6e:	20 93 86 06 	sts	0x0686, r18
    1e72:	96 ff       	sbrs	r25, 6
    1e74:	6e cf       	rjmp	.-292    	; 0x1d52 <ht1632c_refresh_screen+0x9c>
    1e76:	30 93 85 06 	sts	0x0685, r19
    1e7a:	20 93 85 06 	sts	0x0685, r18
    1e7e:	20 93 86 06 	sts	0x0686, r18
    1e82:	95 ff       	sbrs	r25, 5
    1e84:	6e cf       	rjmp	.-292    	; 0x1d62 <ht1632c_refresh_screen+0xac>
    1e86:	30 93 85 06 	sts	0x0685, r19
    1e8a:	20 93 85 06 	sts	0x0685, r18
    1e8e:	20 93 86 06 	sts	0x0686, r18
    1e92:	94 ff       	sbrs	r25, 4
    1e94:	6e cf       	rjmp	.-292    	; 0x1d72 <ht1632c_refresh_screen+0xbc>
    1e96:	30 93 85 06 	sts	0x0685, r19
    1e9a:	20 93 85 06 	sts	0x0685, r18
    1e9e:	20 93 86 06 	sts	0x0686, r18
    1ea2:	93 ff       	sbrs	r25, 3
    1ea4:	6e cf       	rjmp	.-292    	; 0x1d82 <ht1632c_refresh_screen+0xcc>
    1ea6:	30 93 85 06 	sts	0x0685, r19
    1eaa:	20 93 85 06 	sts	0x0685, r18
    1eae:	20 93 86 06 	sts	0x0686, r18
    1eb2:	92 ff       	sbrs	r25, 2
    1eb4:	6e cf       	rjmp	.-292    	; 0x1d92 <ht1632c_refresh_screen+0xdc>
    1eb6:	30 93 85 06 	sts	0x0685, r19
    1eba:	20 93 85 06 	sts	0x0685, r18
    1ebe:	20 93 86 06 	sts	0x0686, r18
    1ec2:	91 ff       	sbrs	r25, 1
    1ec4:	6e cf       	rjmp	.-292    	; 0x1da2 <ht1632c_refresh_screen+0xec>
    1ec6:	30 93 85 06 	sts	0x0685, r19
    1eca:	20 93 85 06 	sts	0x0685, r18
    1ece:	20 93 86 06 	sts	0x0686, r18
    1ed2:	90 ff       	sbrs	r25, 0
    1ed4:	6e cf       	rjmp	.-292    	; 0x1db2 <ht1632c_refresh_screen+0xfc>
    1ed6:	30 93 85 06 	sts	0x0685, r19
    1eda:	20 93 85 06 	sts	0x0685, r18
    1ede:	20 93 86 06 	sts	0x0686, r18
    1ee2:	87 ff       	sbrs	r24, 7
    1ee4:	6e cf       	rjmp	.-292    	; 0x1dc2 <ht1632c_refresh_screen+0x10c>
    1ee6:	30 93 85 06 	sts	0x0685, r19
    1eea:	20 93 85 06 	sts	0x0685, r18
    1eee:	20 93 86 06 	sts	0x0686, r18
    1ef2:	86 ff       	sbrs	r24, 6
    1ef4:	6e cf       	rjmp	.-292    	; 0x1dd2 <ht1632c_refresh_screen+0x11c>
    1ef6:	30 93 85 06 	sts	0x0685, r19
    1efa:	20 93 85 06 	sts	0x0685, r18
    1efe:	20 93 86 06 	sts	0x0686, r18
    1f02:	85 ff       	sbrs	r24, 5
    1f04:	6e cf       	rjmp	.-292    	; 0x1de2 <ht1632c_refresh_screen+0x12c>
    1f06:	30 93 85 06 	sts	0x0685, r19
    1f0a:	20 93 85 06 	sts	0x0685, r18
    1f0e:	20 93 86 06 	sts	0x0686, r18
    1f12:	84 ff       	sbrs	r24, 4
    1f14:	6e cf       	rjmp	.-292    	; 0x1df2 <ht1632c_refresh_screen+0x13c>
    1f16:	30 93 85 06 	sts	0x0685, r19
    1f1a:	20 93 85 06 	sts	0x0685, r18
    1f1e:	20 93 86 06 	sts	0x0686, r18
    1f22:	83 ff       	sbrs	r24, 3
    1f24:	6e cf       	rjmp	.-292    	; 0x1e02 <ht1632c_refresh_screen+0x14c>
    1f26:	30 93 85 06 	sts	0x0685, r19
    1f2a:	20 93 85 06 	sts	0x0685, r18
    1f2e:	20 93 86 06 	sts	0x0686, r18
    1f32:	82 ff       	sbrs	r24, 2
    1f34:	6e cf       	rjmp	.-292    	; 0x1e12 <ht1632c_refresh_screen+0x15c>
    1f36:	30 93 85 06 	sts	0x0685, r19
    1f3a:	20 93 85 06 	sts	0x0685, r18
    1f3e:	20 93 86 06 	sts	0x0686, r18
    1f42:	81 ff       	sbrs	r24, 1
    1f44:	6e cf       	rjmp	.-292    	; 0x1e22 <ht1632c_refresh_screen+0x16c>
    1f46:	30 93 85 06 	sts	0x0685, r19
    1f4a:	20 93 85 06 	sts	0x0685, r18
    1f4e:	20 93 86 06 	sts	0x0686, r18
    1f52:	80 ff       	sbrs	r24, 0
    1f54:	6e cf       	rjmp	.-292    	; 0x1e32 <ht1632c_refresh_screen+0x17c>
    1f56:	30 93 85 06 	sts	0x0685, r19
    1f5a:	6d cf       	rjmp	.-294    	; 0x1e36 <ht1632c_refresh_screen+0x180>
    1f5c:	30 93 85 06 	sts	0x0685, r19
    1f60:	84 cf       	rjmp	.-248    	; 0x1e6a <ht1632c_refresh_screen+0x1b4>
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	80 93 85 06 	sts	0x0685, r24
    1f68:	08 95       	ret

00001f6a <ht1632c_fill_screen>:
    1f6a:	40 e2       	ldi	r20, 0x20	; 32
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	6f ef       	ldi	r22, 0xFF	; 255
    1f70:	7f ef       	ldi	r23, 0xFF	; 255
    1f72:	86 e9       	ldi	r24, 0x96	; 150
    1f74:	96 e2       	ldi	r25, 0x26	; 38
    1f76:	0e 94 82 18 	call	0x3104	; 0x3104 <memset>
    1f7a:	9d ce       	rjmp	.-710    	; 0x1cb6 <ht1632c_refresh_screen>

00001f7c <ht1632c_clear_screen>:
    1f7c:	80 e2       	ldi	r24, 0x20	; 32
    1f7e:	e6 e9       	ldi	r30, 0x96	; 150
    1f80:	f6 e2       	ldi	r31, 0x26	; 38
    1f82:	df 01       	movw	r26, r30
    1f84:	1d 92       	st	X+, r1
    1f86:	8a 95       	dec	r24
    1f88:	e9 f7       	brne	.-6      	; 0x1f84 <ht1632c_clear_screen+0x8>
    1f8a:	95 ce       	rjmp	.-726    	; 0x1cb6 <ht1632c_refresh_screen>

00001f8c <ht1632c_draw_char>:
}

void ht1632c_draw_char(int16_t x, int16_t y, char c,uint16_t color, uint8_t size) {
    1f8c:	2f 92       	push	r2
    1f8e:	3f 92       	push	r3
    1f90:	4f 92       	push	r4
    1f92:	5f 92       	push	r5
    1f94:	6f 92       	push	r6
    1f96:	7f 92       	push	r7
    1f98:	8f 92       	push	r8
    1f9a:	9f 92       	push	r9
    1f9c:	af 92       	push	r10
    1f9e:	bf 92       	push	r11
    1fa0:	cf 92       	push	r12
    1fa2:	df 92       	push	r13
    1fa4:	ef 92       	push	r14
    1fa6:	ff 92       	push	r15
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	6a 97       	sbiw	r28, 0x1a	; 26
    1fb6:	cd bf       	out	0x3d, r28	; 61
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	6b 83       	std	Y+3, r22	; 0x03
    1fbc:	7c 83       	std	Y+4, r23	; 0x04
    1fbe:	2a 83       	std	Y+2, r18	; 0x02
    1fc0:	60 2e       	mov	r6, r16
    1fc2:	55 e0       	ldi	r21, 0x05	; 5
    1fc4:	45 9f       	mul	r20, r21
    1fc6:	90 01       	movw	r18, r0
    1fc8:	11 24       	eor	r1, r1
    1fca:	24 50       	subi	r18, 0x04	; 4
    1fcc:	3e 4f       	sbci	r19, 0xFE	; 254
    1fce:	2a 87       	std	Y+10, r18	; 0x0a
    1fd0:	3b 87       	std	Y+11, r19	; 0x0b
    1fd2:	8d 83       	std	Y+5, r24	; 0x05
    1fd4:	9e 83       	std	Y+6, r25	; 0x06
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	8c 87       	std	Y+12, r24	; 0x0c
    1fdc:	9d 87       	std	Y+13, r25	; 0x0d
    1fde:	2d 81       	ldd	r18, Y+5	; 0x05
    1fe0:	3e 81       	ldd	r19, Y+6	; 0x06
    1fe2:	2b 5f       	subi	r18, 0xFB	; 251
    1fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe6:	2d 8b       	std	Y+21, r18	; 0x15
    1fe8:	3e 8b       	std	Y+22, r19	; 0x16
    1fea:	30 2f       	mov	r19, r16
    1fec:	33 0f       	add	r19, r19
    1fee:	33 0f       	add	r19, r19
    1ff0:	33 0f       	add	r19, r19
    1ff2:	30 1b       	sub	r19, r16
    1ff4:	36 0f       	add	r19, r22
    1ff6:	38 8b       	std	Y+16, r19	; 0x10
		uint8_t line = pgm_read_byte(font_5x7+(c*5)+i);
		for (j = 7; j > 0; j--) {
			if (line & 0x1) {
				if (size == 1) {
					if (x+i >= 0) {
						ht1632c_draw_pixel(x+i, y+j-1, color);
    1ff8:	4d 81       	ldd	r20, Y+5	; 0x05
    1ffa:	49 87       	std	Y+9, r20	; 0x09
    1ffc:	20 2f       	mov	r18, r16
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	2e 87       	std	Y+14, r18	; 0x0e
    2002:	3f 87       	std	Y+15, r19	; 0x0f
    2004:	ab 01       	movw	r20, r22
    2006:	49 5f       	subi	r20, 0xF9	; 249
    2008:	5f 4f       	sbci	r21, 0xFF	; 255
    200a:	4f 8b       	std	Y+23, r20	; 0x17
    200c:	58 8f       	std	Y+24, r21	; 0x18
    200e:	29 e0       	ldi	r18, 0x09	; 9
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	26 1b       	sub	r18, r22
    2014:	37 0b       	sbc	r19, r23
    2016:	29 8b       	std	Y+17, r18	; 0x11
    2018:	3a 8b       	std	Y+18, r19	; 0x12
		return;
	}
	if (y >= HEIGHT) {
		return;
	}
	y = 15 - y;
    201a:	0f e0       	ldi	r16, 0x0F	; 15
    201c:	20 2e       	mov	r2, r16
    201e:	31 2c       	mov	r3, r1

	y %= 24;
    2020:	88 e1       	ldi	r24, 0x18	; 24
    2022:	c8 2e       	mov	r12, r24
    2024:	d1 2c       	mov	r13, r1
}

/*-------------------------Geometric functions----------------------------*/

void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    2026:	44 24       	eor	r4, r4
    2028:	43 94       	inc	r4
    202a:	51 2c       	mov	r5, r1
    202c:	69 82       	std	Y+1, r6	; 0x01
	
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
		uint8_t line = pgm_read_byte(font_5x7+(c*5)+i);
    202e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2030:	fb 85       	ldd	r31, Y+11	; 0x0b
    2032:	64 90       	lpm	r6, Z
    2034:	2d 81       	ldd	r18, Y+5	; 0x05
    2036:	3e 81       	ldd	r19, Y+6	; 0x06
    2038:	8c 85       	ldd	r24, Y+12	; 0x0c
    203a:	9d 85       	ldd	r25, Y+13	; 0x0d
    203c:	28 30       	cpi	r18, 0x08	; 8
    203e:	31 05       	cpc	r19, r1
    2040:	0c f0       	brlt	.+2      	; 0x2044 <ht1632c_draw_char+0xb8>
    2042:	0f 97       	sbiw	r24, 0x0f	; 15
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    2044:	ac 01       	movw	r20, r24
    2046:	44 0f       	add	r20, r20
    2048:	55 1f       	adc	r21, r21
    204a:	44 0f       	add	r20, r20
    204c:	55 1f       	adc	r21, r21
    204e:	44 0f       	add	r20, r20
    2050:	55 1f       	adc	r21, r21
    2052:	4b 8b       	std	Y+19, r20	; 0x13
    2054:	5c 8b       	std	Y+20, r21	; 0x14
	}
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
    2056:	f9 85       	ldd	r31, Y+9	; 0x09
    2058:	ef 2f       	mov	r30, r31
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	ef 83       	std	Y+7, r30	; 0x07
    205e:	f8 87       	std	Y+8, r31	; 0x08
    2060:	7f 01       	movw	r14, r30
    2062:	2e 85       	ldd	r18, Y+14	; 0x0e
    2064:	3f 85       	ldd	r19, Y+15	; 0x0f
    2066:	e2 0e       	add	r14, r18
    2068:	f3 1e       	adc	r15, r19
    206a:	a9 88       	ldd	r10, Y+17	; 0x11
    206c:	ba 88       	ldd	r11, Y+18	; 0x12
    206e:	0f 89       	ldd	r16, Y+23	; 0x17
    2070:	18 8d       	ldd	r17, Y+24	; 0x18
    2072:	78 88       	ldd	r7, Y+16	; 0x10
    2074:	17 c0       	rjmp	.+46     	; 0x20a4 <ht1632c_draw_char+0x118>
	for (i = 0; i < 5; i++) {
		uint8_t line = pgm_read_byte(font_5x7+(c*5)+i);
		for (j = 7; j > 0; j--) {
			if (line & 0x1) {
				if (size == 1) {
					if (x+i >= 0) {
    2076:	4d 81       	ldd	r20, Y+5	; 0x05
    2078:	5e 81       	ldd	r21, Y+6	; 0x06
    207a:	40 31       	cpi	r20, 0x10	; 16
    207c:	51 05       	cpc	r21, r1
    207e:	20 f4       	brcc	.+8      	; 0x2088 <ht1632c_draw_char+0xfc>
void ht1632c_draw_pixel(int x, int y, uint8_t color) {
	
	if (x >= WIDTH) {
		return;
	}
	if (y >= HEIGHT) {
    2080:	01 31       	cpi	r16, 0x11	; 17
    2082:	11 05       	cpc	r17, r1
    2084:	0c f4       	brge	.+2      	; 0x2088 <ht1632c_draw_char+0xfc>
    2086:	fc c0       	rjmp	.+504    	; 0x2280 <ht1632c_draw_char+0x2f4>
				}
				else {  // big size
					ht1632c_fill_rect(x+i*size, y+j*size, size, size, color);
				}
			}
			line >>= 1;
    2088:	66 94       	lsr	r6
    208a:	7f ef       	ldi	r23, 0xFF	; 255
    208c:	a7 1a       	sub	r10, r23
    208e:	b7 0a       	sbc	r11, r23
    2090:	01 50       	subi	r16, 0x01	; 1
    2092:	11 09       	sbc	r17, r1
    2094:	29 81       	ldd	r18, Y+1	; 0x01
    2096:	72 1a       	sub	r7, r18
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
		uint8_t line = pgm_read_byte(font_5x7+(c*5)+i);
		for (j = 7; j > 0; j--) {
    2098:	4b 81       	ldd	r20, Y+3	; 0x03
    209a:	5c 81       	ldd	r21, Y+4	; 0x04
    209c:	04 17       	cp	r16, r20
    209e:	15 07       	cpc	r17, r21
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <ht1632c_draw_char+0x118>
    20a2:	bb c0       	rjmp	.+374    	; 0x221a <ht1632c_draw_char+0x28e>
			if (line & 0x1) {
    20a4:	60 fe       	sbrs	r6, 0
    20a6:	f0 cf       	rjmp	.-32     	; 0x2088 <ht1632c_draw_char+0xfc>
				if (size == 1) {
    20a8:	39 81       	ldd	r19, Y+1	; 0x01
    20aa:	31 30       	cpi	r19, 0x01	; 1
    20ac:	21 f3       	breq	.-56     	; 0x2076 <ht1632c_draw_char+0xea>
	}
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
    20ae:	ef 81       	ldd	r30, Y+7	; 0x07
    20b0:	f8 85       	ldd	r31, Y+8	; 0x08
    20b2:	ee 15       	cp	r30, r14
    20b4:	ff 05       	cpc	r31, r15
    20b6:	44 f7       	brge	.-48     	; 0x2088 <ht1632c_draw_char+0xfc>
    20b8:	cf 01       	movw	r24, r30
    20ba:	e7 2d       	mov	r30, r7
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	2e 85       	ldd	r18, Y+14	; 0x0e
    20c0:	3f 85       	ldd	r19, Y+15	; 0x0f
    20c2:	2e 0f       	add	r18, r30
    20c4:	3f 1f       	adc	r19, r31
    20c6:	89 84       	ldd	r8, Y+9	; 0x09
		for (uint8_t j=y; j<y+h; j++) {
    20c8:	e2 17       	cp	r30, r18
    20ca:	f3 07       	cpc	r31, r19
    20cc:	cc f4       	brge	.+50     	; 0x2100 <ht1632c_draw_char+0x174>
		i = 256 + 7;
	}
	i -= (y % 8);

	if (x < 8) {
		x *= 2;
    20ce:	ac 01       	movw	r20, r24
    20d0:	44 0f       	add	r20, r20
    20d2:	55 1f       	adc	r21, r21
	} else {
		x = (x-8) * 2 + 1;
    20d4:	ba 01       	movw	r22, r20
    20d6:	6f 50       	subi	r22, 0x0F	; 15
    20d8:	71 09       	sbc	r23, r1
    20da:	88 30       	cpi	r24, 0x08	; 8
    20dc:	91 05       	cpc	r25, r1
    20de:	0c f0       	brlt	.+2      	; 0x20e2 <ht1632c_draw_char+0x156>
    20e0:	ab 01       	movw	r20, r22
	}

	i += x * 8;
    20e2:	44 0f       	add	r20, r20
    20e4:	55 1f       	adc	r21, r21
    20e6:	44 0f       	add	r20, r20
    20e8:	55 1f       	adc	r21, r21
    20ea:	44 0f       	add	r20, r20
    20ec:	55 1f       	adc	r21, r21
    20ee:	40 97       	sbiw	r24, 0x10	; 16
    20f0:	74 f0       	brlt	.+28     	; 0x210e <ht1632c_draw_char+0x182>
    20f2:	47 2d       	mov	r20, r7
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
		for (uint8_t j=y; j<y+h; j++) {
    20f4:	4f 5f       	subi	r20, 0xFF	; 255
    20f6:	84 2f       	mov	r24, r20
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	82 17       	cp	r24, r18
    20fc:	93 07       	cpc	r25, r19
    20fe:	d4 f3       	brlt	.-12     	; 0x20f4 <ht1632c_draw_char+0x168>
	}
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
    2100:	83 94       	inc	r8
    2102:	88 2d       	mov	r24, r8
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	8e 15       	cp	r24, r14
    2108:	9f 05       	cpc	r25, r15
    210a:	f4 f2       	brlt	.-68     	; 0x20c8 <ht1632c_draw_char+0x13c>
    210c:	bd cf       	rjmp	.-134    	; 0x2088 <ht1632c_draw_char+0xfc>
    210e:	6a 81       	ldd	r22, Y+2	; 0x02
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    2110:	97 2c       	mov	r9, r7
    2112:	cf 01       	movw	r24, r30
    2114:	49 8f       	std	Y+25, r20	; 0x19
    2116:	5a 8f       	std	Y+26, r21	; 0x1a
    2118:	66 23       	and	r22, r22
    211a:	39 f0       	breq	.+14     	; 0x212a <ht1632c_draw_char+0x19e>
    211c:	6b c0       	rjmp	.+214    	; 0x21f4 <ht1632c_draw_char+0x268>
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
		for (uint8_t j=y; j<y+h; j++) {
    211e:	93 94       	inc	r9
    2120:	89 2d       	mov	r24, r9
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	82 17       	cp	r24, r18
    2126:	93 07       	cpc	r25, r19
    2128:	5c f7       	brge	.-42     	; 0x2100 <ht1632c_draw_char+0x174>
void ht1632c_draw_pixel(int x, int y, uint8_t color) {
	
	if (x >= WIDTH) {
		return;
	}
	if (y >= HEIGHT) {
    212a:	80 31       	cpi	r24, 0x10	; 16
    212c:	91 05       	cpc	r25, r1
    212e:	bc f7       	brge	.-18     	; 0x211e <ht1632c_draw_char+0x192>
		return;
	}
	y = 15 - y;
    2130:	d1 01       	movw	r26, r2
    2132:	a8 1b       	sub	r26, r24
    2134:	b9 0b       	sbc	r27, r25
    2136:	cd 01       	movw	r24, r26

	y %= 24;
    2138:	b6 01       	movw	r22, r12
    213a:	8e d7       	rcall	.+3868   	; 0x3058 <__divmodhi4>

	int i;

	if (y < 8) {
    213c:	88 30       	cpi	r24, 0x08	; 8
    213e:	91 05       	cpc	r25, r1
    2140:	0c f4       	brge	.+2      	; 0x2144 <ht1632c_draw_char+0x1b8>
    2142:	5c c0       	rjmp	.+184    	; 0x21fc <ht1632c_draw_char+0x270>
		i = 7;
	} else if (y < 16) {
    2144:	80 31       	cpi	r24, 0x10	; 16
    2146:	91 05       	cpc	r25, r1
    2148:	0c f0       	brlt	.+2      	; 0x214c <ht1632c_draw_char+0x1c0>
    214a:	61 c0       	rjmp	.+194    	; 0x220e <ht1632c_draw_char+0x282>
		i = 128 + 7;
    214c:	47 e8       	ldi	r20, 0x87	; 135
    214e:	50 e0       	ldi	r21, 0x00	; 0
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    2150:	87 70       	andi	r24, 0x07	; 7
    2152:	99 27       	eor	r25, r25
    2154:	ba 01       	movw	r22, r20
    2156:	68 1b       	sub	r22, r24
    2158:	79 0b       	sbc	r23, r25
    215a:	cb 01       	movw	r24, r22
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    215c:	49 8d       	ldd	r20, Y+25	; 0x19
    215e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2160:	84 0f       	add	r24, r20
    2162:	95 1f       	adc	r25, r21
void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
}

void ht1632c_clr_pixel(uint16_t i) {
	ledmatrix[i/8] &= ~_BV(i%8);
    2164:	dc 01       	movw	r26, r24
    2166:	b6 95       	lsr	r27
    2168:	a7 95       	ror	r26
    216a:	b6 95       	lsr	r27
    216c:	a7 95       	ror	r26
    216e:	b6 95       	lsr	r27
    2170:	a7 95       	ror	r26
    2172:	aa 56       	subi	r26, 0x6A	; 106
    2174:	b9 4d       	sbci	r27, 0xD9	; 217
    2176:	87 70       	andi	r24, 0x07	; 7
    2178:	99 27       	eor	r25, r25
    217a:	b2 01       	movw	r22, r4
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <ht1632c_draw_char+0x1f6>
    217e:	66 0f       	add	r22, r22
    2180:	77 1f       	adc	r23, r23
    2182:	8a 95       	dec	r24
    2184:	e2 f7       	brpl	.-8      	; 0x217e <ht1632c_draw_char+0x1f2>
    2186:	cb 01       	movw	r24, r22
    2188:	80 95       	com	r24
    218a:	9c 91       	ld	r25, X
    218c:	98 23       	and	r25, r24
    218e:	9c 93       	st	X, r25
    2190:	c6 cf       	rjmp	.-116    	; 0x211e <ht1632c_draw_char+0x192>
		return;
	}
	if (y >= HEIGHT) {
		return;
	}
	y = 15 - y;
    2192:	d1 01       	movw	r26, r2
    2194:	a8 1b       	sub	r26, r24
    2196:	b9 0b       	sbc	r27, r25
    2198:	cd 01       	movw	r24, r26

	y %= 24;
    219a:	b6 01       	movw	r22, r12
    219c:	5d d7       	rcall	.+3770   	; 0x3058 <__divmodhi4>

	int i;

	if (y < 8) {
    219e:	88 30       	cpi	r24, 0x08	; 8
    21a0:	91 05       	cpc	r25, r1
    21a2:	7c f5       	brge	.+94     	; 0x2202 <ht1632c_draw_char+0x276>
		i = 7;
    21a4:	47 e0       	ldi	r20, 0x07	; 7
    21a6:	50 e0       	ldi	r21, 0x00	; 0
	} else if (y < 16) {
		i = 128 + 7;
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    21a8:	87 70       	andi	r24, 0x07	; 7
    21aa:	99 27       	eor	r25, r25
    21ac:	ba 01       	movw	r22, r20
    21ae:	68 1b       	sub	r22, r24
    21b0:	79 0b       	sbc	r23, r25
    21b2:	cb 01       	movw	r24, r22
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    21b4:	49 8d       	ldd	r20, Y+25	; 0x19
    21b6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    21b8:	84 0f       	add	r24, r20
    21ba:	95 1f       	adc	r25, r21
}

/*-------------------------Geometric functions----------------------------*/

void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    21bc:	dc 01       	movw	r26, r24
    21be:	b6 95       	lsr	r27
    21c0:	a7 95       	ror	r26
    21c2:	b6 95       	lsr	r27
    21c4:	a7 95       	ror	r26
    21c6:	b6 95       	lsr	r27
    21c8:	a7 95       	ror	r26
    21ca:	aa 56       	subi	r26, 0x6A	; 106
    21cc:	b9 4d       	sbci	r27, 0xD9	; 217
    21ce:	87 70       	andi	r24, 0x07	; 7
    21d0:	99 27       	eor	r25, r25
    21d2:	b2 01       	movw	r22, r4
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <ht1632c_draw_char+0x24e>
    21d6:	66 0f       	add	r22, r22
    21d8:	77 1f       	adc	r23, r23
    21da:	8a 95       	dec	r24
    21dc:	e2 f7       	brpl	.-8      	; 0x21d6 <ht1632c_draw_char+0x24a>
    21de:	cb 01       	movw	r24, r22
    21e0:	9c 91       	ld	r25, X
    21e2:	98 2b       	or	r25, r24
    21e4:	9c 93       	st	X, r25
}

void ht1632c_fill_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	
	for (uint8_t i=x; i<x+w; i++) {
		for (uint8_t j=y; j<y+h; j++) {
    21e6:	93 94       	inc	r9
    21e8:	89 2d       	mov	r24, r9
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	82 17       	cp	r24, r18
    21ee:	93 07       	cpc	r25, r19
    21f0:	0c f0       	brlt	.+2      	; 0x21f4 <ht1632c_draw_char+0x268>
    21f2:	86 cf       	rjmp	.-244    	; 0x2100 <ht1632c_draw_char+0x174>
void ht1632c_draw_pixel(int x, int y, uint8_t color) {
	
	if (x >= WIDTH) {
		return;
	}
	if (y >= HEIGHT) {
    21f4:	80 31       	cpi	r24, 0x10	; 16
    21f6:	91 05       	cpc	r25, r1
    21f8:	b4 f7       	brge	.-20     	; 0x21e6 <ht1632c_draw_char+0x25a>
    21fa:	cb cf       	rjmp	.-106    	; 0x2192 <ht1632c_draw_char+0x206>
	y %= 24;

	int i;

	if (y < 8) {
		i = 7;
    21fc:	47 e0       	ldi	r20, 0x07	; 7
    21fe:	50 e0       	ldi	r21, 0x00	; 0
    2200:	a7 cf       	rjmp	.-178    	; 0x2150 <ht1632c_draw_char+0x1c4>
	} else if (y < 16) {
    2202:	80 31       	cpi	r24, 0x10	; 16
    2204:	91 05       	cpc	r25, r1
    2206:	34 f4       	brge	.+12     	; 0x2214 <ht1632c_draw_char+0x288>
		i = 128 + 7;
    2208:	47 e8       	ldi	r20, 0x87	; 135
    220a:	50 e0       	ldi	r21, 0x00	; 0
    220c:	cd cf       	rjmp	.-102    	; 0x21a8 <ht1632c_draw_char+0x21c>
	} else {
		i = 256 + 7;
    220e:	47 e0       	ldi	r20, 0x07	; 7
    2210:	51 e0       	ldi	r21, 0x01	; 1
    2212:	9e cf       	rjmp	.-196    	; 0x2150 <ht1632c_draw_char+0x1c4>
    2214:	47 e0       	ldi	r20, 0x07	; 7
    2216:	51 e0       	ldi	r21, 0x01	; 1
    2218:	c7 cf       	rjmp	.-114    	; 0x21a8 <ht1632c_draw_char+0x21c>
    221a:	ea 85       	ldd	r30, Y+10	; 0x0a
    221c:	fb 85       	ldd	r31, Y+11	; 0x0b
    221e:	31 96       	adiw	r30, 0x01	; 1
    2220:	ea 87       	std	Y+10, r30	; 0x0a
    2222:	fb 87       	std	Y+11, r31	; 0x0b
    2224:	2d 81       	ldd	r18, Y+5	; 0x05
    2226:	3e 81       	ldd	r19, Y+6	; 0x06
    2228:	2f 5f       	subi	r18, 0xFF	; 255
    222a:	3f 4f       	sbci	r19, 0xFF	; 255
    222c:	2d 83       	std	Y+5, r18	; 0x05
    222e:	3e 83       	std	Y+6, r19	; 0x06
    2230:	4c 85       	ldd	r20, Y+12	; 0x0c
    2232:	5d 85       	ldd	r21, Y+13	; 0x0d
    2234:	4e 5f       	subi	r20, 0xFE	; 254
    2236:	5f 4f       	sbci	r21, 0xFF	; 255
    2238:	4c 87       	std	Y+12, r20	; 0x0c
    223a:	5d 87       	std	Y+13, r21	; 0x0d
    223c:	89 85       	ldd	r24, Y+9	; 0x09
    223e:	29 81       	ldd	r18, Y+1	; 0x01
    2240:	82 0f       	add	r24, r18
void ht1632c_draw_char(int16_t x, int16_t y, char c,uint16_t color, uint8_t size) {
	
	uint8_t i;
	uint8_t j;
	
	for (i = 0; i < 5; i++) {
    2242:	4d 81       	ldd	r20, Y+5	; 0x05
    2244:	5e 81       	ldd	r21, Y+6	; 0x06
    2246:	2d 89       	ldd	r18, Y+21	; 0x15
    2248:	3e 89       	ldd	r19, Y+22	; 0x16
    224a:	42 17       	cp	r20, r18
    224c:	53 07       	cpc	r21, r19
    224e:	11 f0       	breq	.+4      	; 0x2254 <ht1632c_draw_char+0x2c8>
    2250:	89 87       	std	Y+9, r24	; 0x09
    2252:	ed ce       	rjmp	.-550    	; 0x202e <ht1632c_draw_char+0xa2>
				}
			}
			line >>= 1;
		}
	}
}
    2254:	6a 96       	adiw	r28, 0x1a	; 26
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	ff 90       	pop	r15
    2264:	ef 90       	pop	r14
    2266:	df 90       	pop	r13
    2268:	cf 90       	pop	r12
    226a:	bf 90       	pop	r11
    226c:	af 90       	pop	r10
    226e:	9f 90       	pop	r9
    2270:	8f 90       	pop	r8
    2272:	7f 90       	pop	r7
    2274:	6f 90       	pop	r6
    2276:	5f 90       	pop	r5
    2278:	4f 90       	pop	r4
    227a:	3f 90       	pop	r3
    227c:	2f 90       	pop	r2
    227e:	08 95       	ret
	if (y >= HEIGHT) {
		return;
	}
	y = 15 - y;

	y %= 24;
    2280:	c5 01       	movw	r24, r10
    2282:	b6 01       	movw	r22, r12
    2284:	e9 d6       	rcall	.+3538   	; 0x3058 <__divmodhi4>

	int i;

	if (y < 8) {
    2286:	88 30       	cpi	r24, 0x08	; 8
    2288:	91 05       	cpc	r25, r1
    228a:	74 f0       	brlt	.+28     	; 0x22a8 <ht1632c_draw_char+0x31c>
		i = 7;
	} else if (y < 16) {
    228c:	80 31       	cpi	r24, 0x10	; 16
    228e:	91 05       	cpc	r25, r1
    2290:	9c f5       	brge	.+102    	; 0x22f8 <ht1632c_draw_char+0x36c>
		i = 128 + 7;
    2292:	27 e8       	ldi	r18, 0x87	; 135
    2294:	30 e0       	ldi	r19, 0x00	; 0
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    2296:	87 70       	andi	r24, 0x07	; 7
    2298:	90 78       	andi	r25, 0x80	; 128
    229a:	97 ff       	sbrs	r25, 7
    229c:	0b c0       	rjmp	.+22     	; 0x22b4 <ht1632c_draw_char+0x328>
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	88 6f       	ori	r24, 0xF8	; 248
    22a2:	9f 6f       	ori	r25, 0xFF	; 255
    22a4:	01 96       	adiw	r24, 0x01	; 1
    22a6:	06 c0       	rjmp	.+12     	; 0x22b4 <ht1632c_draw_char+0x328>
	y %= 24;

	int i;

	if (y < 8) {
		i = 7;
    22a8:	27 e0       	ldi	r18, 0x07	; 7
    22aa:	30 e0       	ldi	r19, 0x00	; 0
	} else if (y < 16) {
		i = 128 + 7;
	} else {
		i = 256 + 7;
	}
	i -= (y % 8);
    22ac:	87 70       	andi	r24, 0x07	; 7
    22ae:	90 78       	andi	r25, 0x80	; 128
    22b0:	97 fd       	sbrc	r25, 7
    22b2:	f5 cf       	rjmp	.-22     	; 0x229e <ht1632c_draw_char+0x312>
    22b4:	b9 01       	movw	r22, r18
    22b6:	68 1b       	sub	r22, r24
    22b8:	79 0b       	sbc	r23, r25
    22ba:	cb 01       	movw	r24, r22
		x *= 2;
	} else {
		x = (x-8) * 2 + 1;
	}

	i += x * 8;
    22bc:	eb 89       	ldd	r30, Y+19	; 0x13
    22be:	fc 89       	ldd	r31, Y+20	; 0x14
    22c0:	8e 0f       	add	r24, r30
    22c2:	9f 1f       	adc	r25, r31

	if (color)
    22c4:	2a 81       	ldd	r18, Y+2	; 0x02
}

/*-------------------------Geometric functions----------------------------*/

void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    22c6:	fc 01       	movw	r30, r24
    22c8:	f6 95       	lsr	r31
    22ca:	e7 95       	ror	r30
    22cc:	f6 95       	lsr	r31
    22ce:	e7 95       	ror	r30
    22d0:	f6 95       	lsr	r31
    22d2:	e7 95       	ror	r30
    22d4:	ea 56       	subi	r30, 0x6A	; 106
    22d6:	f9 4d       	sbci	r31, 0xD9	; 217
    22d8:	87 70       	andi	r24, 0x07	; 7
    22da:	99 27       	eor	r25, r25
		x = (x-8) * 2 + 1;
	}

	i += x * 8;

	if (color)
    22dc:	21 11       	cpse	r18, r1
    22de:	0f c0       	rjmp	.+30     	; 0x22fe <ht1632c_draw_char+0x372>
void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
}

void ht1632c_clr_pixel(uint16_t i) {
	ledmatrix[i/8] &= ~_BV(i%8);
    22e0:	b2 01       	movw	r22, r4
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <ht1632c_draw_char+0x35c>
    22e4:	66 0f       	add	r22, r22
    22e6:	77 1f       	adc	r23, r23
    22e8:	8a 95       	dec	r24
    22ea:	e2 f7       	brpl	.-8      	; 0x22e4 <ht1632c_draw_char+0x358>
    22ec:	cb 01       	movw	r24, r22
    22ee:	80 95       	com	r24
    22f0:	90 81       	ld	r25, Z
    22f2:	89 23       	and	r24, r25
    22f4:	80 83       	st	Z, r24
    22f6:	c8 ce       	rjmp	.-624    	; 0x2088 <ht1632c_draw_char+0xfc>
	if (y < 8) {
		i = 7;
	} else if (y < 16) {
		i = 128 + 7;
	} else {
		i = 256 + 7;
    22f8:	27 e0       	ldi	r18, 0x07	; 7
    22fa:	31 e0       	ldi	r19, 0x01	; 1
    22fc:	d7 cf       	rjmp	.-82     	; 0x22ac <ht1632c_draw_char+0x320>
}

/*-------------------------Geometric functions----------------------------*/

void ht1632c_set_pixel(uint16_t i) {
	ledmatrix[i/8] |= _BV(i%8);
    22fe:	a2 01       	movw	r20, r4
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <ht1632c_draw_char+0x37a>
    2302:	44 0f       	add	r20, r20
    2304:	55 1f       	adc	r21, r21
    2306:	8a 95       	dec	r24
    2308:	e2 f7       	brpl	.-8      	; 0x2302 <ht1632c_draw_char+0x376>
    230a:	ca 01       	movw	r24, r20
    230c:	90 81       	ld	r25, Z
    230e:	98 2b       	or	r25, r24
    2310:	90 83       	st	Z, r25
    2312:	ba ce       	rjmp	.-652    	; 0x2088 <ht1632c_draw_char+0xfc>

00002314 <btn_setup>:
		uwrite_hex(DACB.CH0GAINCAL);
		DACB.CH0GAINCAL += 1;
		return BTN3;
	} else if (!(PORTB.IN & BUTTON3)) {
		uwrite_hex(DACB.CH0GAINCAL);
		DACB.CH0GAINCAL -= 1;
    2314:	e0 e0       	ldi	r30, 0x00	; 0
    2316:	f6 e0       	ldi	r31, 0x06	; 6
    2318:	20 ee       	ldi	r18, 0xE0	; 224
    231a:	22 83       	std	Z+2, r18	; 0x02
    231c:	a0 e2       	ldi	r26, 0x20	; 32
    231e:	b6 e0       	ldi	r27, 0x06	; 6
    2320:	91 e0       	ldi	r25, 0x01	; 1
    2322:	12 96       	adiw	r26, 0x02	; 2
    2324:	9c 93       	st	X, r25
    2326:	12 97       	sbiw	r26, 0x02	; 2
    2328:	82 e0       	ldi	r24, 0x02	; 2
    232a:	85 8b       	std	Z+21, r24	; 0x15
    232c:	86 8b       	std	Z+22, r24	; 0x16
    232e:	87 8b       	std	Z+23, r24	; 0x17
    2330:	50 96       	adiw	r26, 0x10	; 16
    2332:	8c 93       	st	X, r24
    2334:	50 97       	sbiw	r26, 0x10	; 16
    2336:	22 87       	std	Z+10, r18	; 0x0a
    2338:	1a 96       	adiw	r26, 0x0a	; 10
    233a:	9c 93       	st	X, r25
    233c:	1a 97       	sbiw	r26, 0x0a	; 10
    233e:	83 e0       	ldi	r24, 0x03	; 3
    2340:	81 87       	std	Z+9, r24	; 0x09
    2342:	19 96       	adiw	r26, 0x09	; 9
    2344:	8c 93       	st	X, r24
    2346:	08 95       	ret

00002348 <__vector_66>:
	} else {
		return NONE;
	}
}

ISR(PORTA_INT0_vect) {
    2348:	1f 92       	push	r1
    234a:	0f 92       	push	r0
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	0f 92       	push	r0
    2350:	11 24       	eor	r1, r1
    2352:	0b b6       	in	r0, 0x3b	; 59
    2354:	0f 92       	push	r0
    2356:	2f 93       	push	r18
    2358:	3f 93       	push	r19
    235a:	4f 93       	push	r20
    235c:	5f 93       	push	r21
    235e:	6f 93       	push	r22
    2360:	7f 93       	push	r23
    2362:	8f 93       	push	r24
    2364:	9f 93       	push	r25
    2366:	af 93       	push	r26
    2368:	bf 93       	push	r27
    236a:	ef 93       	push	r30
    236c:	ff 93       	push	r31
	
}

button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
    236e:	80 91 08 06 	lds	r24, 0x0608
    2372:	85 ff       	sbrs	r24, 5
    2374:	32 c0       	rjmp	.+100    	; 0x23da <__vector_66+0x92>
		uwrite_hex(DACB.CH0OFFSETCAL);
		DACB.CH0OFFSETCAL += 1;
		return BTN1;
	} else if (!(PORTA.IN & BUTTON1)) {
    2376:	80 91 08 06 	lds	r24, 0x0608
    237a:	86 ff       	sbrs	r24, 6
    237c:	23 c0       	rjmp	.+70     	; 0x23c4 <__vector_66+0x7c>
		uwrite_hex(DACB.CH0OFFSETCAL);
		DACB.CH0OFFSETCAL -= 1;
		return BTN2;
	} else if (!(PORTA.IN & BUTTON2)) {
    237e:	80 91 08 06 	lds	r24, 0x0608
    2382:	87 fd       	sbrc	r24, 7
    2384:	35 c0       	rjmp	.+106    	; 0x23f0 <__vector_66+0xa8>
		uwrite_hex(DACB.CH0GAINCAL);
    2386:	80 91 28 03 	lds	r24, 0x0328
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	a5 d4       	rcall	.+2378   	; 0x2cd8 <uwrite_hex>
		DACB.CH0GAINCAL += 1;
    238e:	80 91 28 03 	lds	r24, 0x0328
    2392:	8f 5f       	subi	r24, 0xFF	; 255
    2394:	80 93 28 03 	sts	0x0328, r24
		return BTN3;
    2398:	83 e0       	ldi	r24, 0x03	; 3
		return NONE;
	}
}

ISR(PORTA_INT0_vect) {
	btn_status = btn_check_press();
    239a:	80 93 0f 27 	sts	0x270F, r24
	//printf("%d",btn_status);
}
    239e:	ff 91       	pop	r31
    23a0:	ef 91       	pop	r30
    23a2:	bf 91       	pop	r27
    23a4:	af 91       	pop	r26
    23a6:	9f 91       	pop	r25
    23a8:	8f 91       	pop	r24
    23aa:	7f 91       	pop	r23
    23ac:	6f 91       	pop	r22
    23ae:	5f 91       	pop	r21
    23b0:	4f 91       	pop	r20
    23b2:	3f 91       	pop	r19
    23b4:	2f 91       	pop	r18
    23b6:	0f 90       	pop	r0
    23b8:	0b be       	out	0x3b, r0	; 59
    23ba:	0f 90       	pop	r0
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	0f 90       	pop	r0
    23c0:	1f 90       	pop	r1
    23c2:	18 95       	reti
	if (!(PORTA.IN & BUTTON0)) {
		uwrite_hex(DACB.CH0OFFSETCAL);
		DACB.CH0OFFSETCAL += 1;
		return BTN1;
	} else if (!(PORTA.IN & BUTTON1)) {
		uwrite_hex(DACB.CH0OFFSETCAL);
    23c4:	80 91 29 03 	lds	r24, 0x0329
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	86 d4       	rcall	.+2316   	; 0x2cd8 <uwrite_hex>
		DACB.CH0OFFSETCAL -= 1;
    23cc:	80 91 29 03 	lds	r24, 0x0329
    23d0:	81 50       	subi	r24, 0x01	; 1
    23d2:	80 93 29 03 	sts	0x0329, r24
		return BTN2;
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	e0 cf       	rjmp	.-64     	; 0x239a <__vector_66+0x52>
}

button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
		uwrite_hex(DACB.CH0OFFSETCAL);
    23da:	80 91 29 03 	lds	r24, 0x0329
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	7b d4       	rcall	.+2294   	; 0x2cd8 <uwrite_hex>
		DACB.CH0OFFSETCAL += 1;
    23e2:	80 91 29 03 	lds	r24, 0x0329
    23e6:	8f 5f       	subi	r24, 0xFF	; 255
    23e8:	80 93 29 03 	sts	0x0329, r24
		return BTN1;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	d5 cf       	rjmp	.-86     	; 0x239a <__vector_66+0x52>
		return BTN2;
	} else if (!(PORTA.IN & BUTTON2)) {
		uwrite_hex(DACB.CH0GAINCAL);
		DACB.CH0GAINCAL += 1;
		return BTN3;
	} else if (!(PORTB.IN & BUTTON3)) {
    23f0:	80 91 28 06 	lds	r24, 0x0628
    23f4:	80 ff       	sbrs	r24, 0
    23f6:	02 c0       	rjmp	.+4      	; 0x23fc <__vector_66+0xb4>
		uwrite_hex(DACB.CH0GAINCAL);
		DACB.CH0GAINCAL -= 1;
		return BTN4;
	} else {
		return NONE;
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	cf cf       	rjmp	.-98     	; 0x239a <__vector_66+0x52>
	} else if (!(PORTA.IN & BUTTON2)) {
		uwrite_hex(DACB.CH0GAINCAL);
		DACB.CH0GAINCAL += 1;
		return BTN3;
	} else if (!(PORTB.IN & BUTTON3)) {
		uwrite_hex(DACB.CH0GAINCAL);
    23fc:	80 91 28 03 	lds	r24, 0x0328
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	6a d4       	rcall	.+2260   	; 0x2cd8 <uwrite_hex>
		DACB.CH0GAINCAL -= 1;
    2404:	80 91 28 03 	lds	r24, 0x0328
    2408:	81 50       	subi	r24, 0x01	; 1
    240a:	80 93 28 03 	sts	0x0328, r24
    240e:	84 e0       	ldi	r24, 0x04	; 4
    2410:	c4 cf       	rjmp	.-120    	; 0x239a <__vector_66+0x52>

00002412 <__vector_34>:
ISR(PORTA_INT0_vect) {
	btn_status = btn_check_press();
	//printf("%d",btn_status);
}

ISR(PORTB_INT0_vect) {
    2412:	1f 92       	push	r1
    2414:	0f 92       	push	r0
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	0f 92       	push	r0
    241a:	11 24       	eor	r1, r1
    241c:	0b b6       	in	r0, 0x3b	; 59
    241e:	0f 92       	push	r0
    2420:	2f 93       	push	r18
    2422:	3f 93       	push	r19
    2424:	4f 93       	push	r20
    2426:	5f 93       	push	r21
    2428:	6f 93       	push	r22
    242a:	7f 93       	push	r23
    242c:	8f 93       	push	r24
    242e:	9f 93       	push	r25
    2430:	af 93       	push	r26
    2432:	bf 93       	push	r27
    2434:	ef 93       	push	r30
    2436:	ff 93       	push	r31
	
}

button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
    2438:	80 91 08 06 	lds	r24, 0x0608
    243c:	85 ff       	sbrs	r24, 5
    243e:	32 c0       	rjmp	.+100    	; 0x24a4 <__vector_34+0x92>
		uwrite_hex(DACB.CH0OFFSETCAL);
		DACB.CH0OFFSETCAL += 1;
		return BTN1;
	} else if (!(PORTA.IN & BUTTON1)) {
    2440:	80 91 08 06 	lds	r24, 0x0608
    2444:	86 ff       	sbrs	r24, 6
    2446:	23 c0       	rjmp	.+70     	; 0x248e <__vector_34+0x7c>
		uwrite_hex(DACB.CH0OFFSETCAL);
		DACB.CH0OFFSETCAL -= 1;
		return BTN2;
	} else if (!(PORTA.IN & BUTTON2)) {
    2448:	80 91 08 06 	lds	r24, 0x0608
    244c:	87 fd       	sbrc	r24, 7
    244e:	35 c0       	rjmp	.+106    	; 0x24ba <__vector_34+0xa8>
		uwrite_hex(DACB.CH0GAINCAL);
    2450:	80 91 28 03 	lds	r24, 0x0328
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	40 d4       	rcall	.+2176   	; 0x2cd8 <uwrite_hex>
		DACB.CH0GAINCAL += 1;
    2458:	80 91 28 03 	lds	r24, 0x0328
    245c:	8f 5f       	subi	r24, 0xFF	; 255
    245e:	80 93 28 03 	sts	0x0328, r24
		return BTN3;
    2462:	83 e0       	ldi	r24, 0x03	; 3
	btn_status = btn_check_press();
	//printf("%d",btn_status);
}

ISR(PORTB_INT0_vect) {
	btn_status = btn_check_press();
    2464:	80 93 0f 27 	sts	0x270F, r24
	//printf("%d",btn_status);
    2468:	ff 91       	pop	r31
    246a:	ef 91       	pop	r30
    246c:	bf 91       	pop	r27
    246e:	af 91       	pop	r26
    2470:	9f 91       	pop	r25
    2472:	8f 91       	pop	r24
    2474:	7f 91       	pop	r23
    2476:	6f 91       	pop	r22
    2478:	5f 91       	pop	r21
    247a:	4f 91       	pop	r20
    247c:	3f 91       	pop	r19
    247e:	2f 91       	pop	r18
    2480:	0f 90       	pop	r0
    2482:	0b be       	out	0x3b, r0	; 59
    2484:	0f 90       	pop	r0
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	0f 90       	pop	r0
    248a:	1f 90       	pop	r1
    248c:	18 95       	reti
	if (!(PORTA.IN & BUTTON0)) {
		uwrite_hex(DACB.CH0OFFSETCAL);
		DACB.CH0OFFSETCAL += 1;
		return BTN1;
	} else if (!(PORTA.IN & BUTTON1)) {
		uwrite_hex(DACB.CH0OFFSETCAL);
    248e:	80 91 29 03 	lds	r24, 0x0329
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	21 d4       	rcall	.+2114   	; 0x2cd8 <uwrite_hex>
		DACB.CH0OFFSETCAL -= 1;
    2496:	80 91 29 03 	lds	r24, 0x0329
    249a:	81 50       	subi	r24, 0x01	; 1
    249c:	80 93 29 03 	sts	0x0329, r24
		return BTN2;
    24a0:	82 e0       	ldi	r24, 0x02	; 2
    24a2:	e0 cf       	rjmp	.-64     	; 0x2464 <__vector_34+0x52>
}

button_t btn_check_press(void) {
	
	if (!(PORTA.IN & BUTTON0)) {
		uwrite_hex(DACB.CH0OFFSETCAL);
    24a4:	80 91 29 03 	lds	r24, 0x0329
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	16 d4       	rcall	.+2092   	; 0x2cd8 <uwrite_hex>
		DACB.CH0OFFSETCAL += 1;
    24ac:	80 91 29 03 	lds	r24, 0x0329
    24b0:	8f 5f       	subi	r24, 0xFF	; 255
    24b2:	80 93 29 03 	sts	0x0329, r24
		return BTN1;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	d5 cf       	rjmp	.-86     	; 0x2464 <__vector_34+0x52>
		return BTN2;
	} else if (!(PORTA.IN & BUTTON2)) {
		uwrite_hex(DACB.CH0GAINCAL);
		DACB.CH0GAINCAL += 1;
		return BTN3;
	} else if (!(PORTB.IN & BUTTON3)) {
    24ba:	80 91 28 06 	lds	r24, 0x0628
    24be:	80 ff       	sbrs	r24, 0
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <__vector_34+0xb4>
		uwrite_hex(DACB.CH0GAINCAL);
		DACB.CH0GAINCAL -= 1;
		return BTN4;
	} else {
		return NONE;
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	cf cf       	rjmp	.-98     	; 0x2464 <__vector_34+0x52>
	} else if (!(PORTA.IN & BUTTON2)) {
		uwrite_hex(DACB.CH0GAINCAL);
		DACB.CH0GAINCAL += 1;
		return BTN3;
	} else if (!(PORTB.IN & BUTTON3)) {
		uwrite_hex(DACB.CH0GAINCAL);
    24c6:	80 91 28 03 	lds	r24, 0x0328
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	05 d4       	rcall	.+2058   	; 0x2cd8 <uwrite_hex>
		DACB.CH0GAINCAL -= 1;
    24ce:	80 91 28 03 	lds	r24, 0x0328
    24d2:	81 50       	subi	r24, 0x01	; 1
    24d4:	80 93 28 03 	sts	0x0328, r24
    24d8:	84 e0       	ldi	r24, 0x04	; 4
    24da:	c4 cf       	rjmp	.-120    	; 0x2464 <__vector_34+0x52>

000024dc <rtc_set_time>:
	strcat(buffer, buffer_hours);
	strcat(buffer, ":");
	strcat(buffer,buffer_minutes);
	
	ht1632c_scroll_print(buffer,2,2);
}
    24dc:	ef 92       	push	r14
    24de:	ff 92       	push	r15
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <rtc_set_time+0xe>
    24ea:	1f 92       	push	r1
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	f8 94       	cli
    24f2:	60 93 11 27 	sts	0x2711, r22
    24f6:	40 93 12 27 	sts	0x2712, r20
    24fa:	1f 92       	push	r1
    24fc:	6f 93       	push	r22
    24fe:	87 e7       	ldi	r24, 0x77	; 119
    2500:	95 e2       	ldi	r25, 0x25	; 37
    2502:	9f 93       	push	r25
    2504:	8f 93       	push	r24
    2506:	ce 01       	movw	r24, r28
    2508:	01 96       	adiw	r24, 0x01	; 1
    250a:	7c 01       	movw	r14, r24
    250c:	ff 92       	push	r15
    250e:	8f 93       	push	r24
    2510:	6b 83       	std	Y+3, r22	; 0x03
    2512:	c3 d6       	rcall	.+3462   	; 0x329a <sprintf>
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	0f 90       	pop	r0
    2520:	6b 81       	ldd	r22, Y+3	; 0x03
    2522:	6a 30       	cpi	r22, 0x0A	; 10
    2524:	20 f4       	brcc	.+8      	; 0x252e <rtc_set_time+0x52>
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	90 e3       	ldi	r25, 0x30	; 48
    252a:	99 83       	std	Y+1, r25	; 0x01
    252c:	8a 83       	std	Y+2, r24	; 0x02
    252e:	00 e0       	ldi	r16, 0x00	; 0
    2530:	10 e0       	ldi	r17, 0x00	; 0
    2532:	28 e0       	ldi	r18, 0x08	; 8
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e1       	ldi	r20, 0x10	; 16
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	60 e0       	ldi	r22, 0x00	; 0
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	dd da       	rcall	.-2630   	; 0x1afe <ht1632c_fill_rect>
    2544:	49 81       	ldd	r20, Y+1	; 0x01
    2546:	50 e0       	ldi	r21, 0x00	; 0
    2548:	01 e0       	ldi	r16, 0x01	; 1
    254a:	10 e0       	ldi	r17, 0x00	; 0
    254c:	21 e0       	ldi	r18, 0x01	; 1
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	70 e0       	ldi	r23, 0x00	; 0
    2554:	82 e0       	ldi	r24, 0x02	; 2
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	19 dd       	rcall	.-1486   	; 0x1f8c <ht1632c_draw_char>
    255a:	4a 81       	ldd	r20, Y+2	; 0x02
    255c:	50 e0       	ldi	r21, 0x00	; 0
    255e:	21 e0       	ldi	r18, 0x01	; 1
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	60 e0       	ldi	r22, 0x00	; 0
    2564:	70 e0       	ldi	r23, 0x00	; 0
    2566:	89 e0       	ldi	r24, 0x09	; 9
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	10 dd       	rcall	.-1504   	; 0x1f8c <ht1632c_draw_char>
    256c:	a4 db       	rcall	.-2232   	; 0x1cb6 <ht1632c_refresh_screen>
    256e:	10 91 12 27 	lds	r17, 0x2712
    2572:	1f 92       	push	r1
    2574:	1f 93       	push	r17
    2576:	87 e7       	ldi	r24, 0x77	; 119
    2578:	95 e2       	ldi	r25, 0x25	; 37
    257a:	9f 93       	push	r25
    257c:	8f 93       	push	r24
    257e:	ff 92       	push	r15
    2580:	ef 92       	push	r14
    2582:	8b d6       	rcall	.+3350   	; 0x329a <sprintf>
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	1a 30       	cpi	r17, 0x0A	; 10
    2592:	20 f4       	brcc	.+8      	; 0x259c <rtc_set_time+0xc0>
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	90 e3       	ldi	r25, 0x30	; 48
    2598:	99 83       	std	Y+1, r25	; 0x01
    259a:	8a 83       	std	Y+2, r24	; 0x02
    259c:	00 e0       	ldi	r16, 0x00	; 0
    259e:	10 e0       	ldi	r17, 0x00	; 0
    25a0:	28 e0       	ldi	r18, 0x08	; 8
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e1       	ldi	r20, 0x10	; 16
    25a6:	50 e0       	ldi	r21, 0x00	; 0
    25a8:	69 e0       	ldi	r22, 0x09	; 9
    25aa:	70 e0       	ldi	r23, 0x00	; 0
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	a6 da       	rcall	.-2740   	; 0x1afe <ht1632c_fill_rect>
    25b2:	49 81       	ldd	r20, Y+1	; 0x01
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	01 e0       	ldi	r16, 0x01	; 1
    25b8:	10 e0       	ldi	r17, 0x00	; 0
    25ba:	21 e0       	ldi	r18, 0x01	; 1
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	69 e0       	ldi	r22, 0x09	; 9
    25c0:	70 e0       	ldi	r23, 0x00	; 0
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	e2 dc       	rcall	.-1596   	; 0x1f8c <ht1632c_draw_char>
    25c8:	4a 81       	ldd	r20, Y+2	; 0x02
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	21 e0       	ldi	r18, 0x01	; 1
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	69 e0       	ldi	r22, 0x09	; 9
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	89 e0       	ldi	r24, 0x09	; 9
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	d9 dc       	rcall	.-1614   	; 0x1f8c <ht1632c_draw_char>
    25da:	6d db       	rcall	.-2342   	; 0x1cb6 <ht1632c_refresh_screen>
    25dc:	78 94       	sei
    25de:	23 96       	adiw	r28, 0x03	; 3
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	ff 90       	pop	r15
    25ee:	ef 90       	pop	r14
    25f0:	08 95       	ret

000025f2 <__vector_10>:

ISR(RTC_OVF_vect) {
    25f2:	1f 92       	push	r1
    25f4:	0f 92       	push	r0
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	0f 92       	push	r0
    25fa:	11 24       	eor	r1, r1
    25fc:	2f 93       	push	r18
    25fe:	3f 93       	push	r19
    2600:	4f 93       	push	r20
    2602:	5f 93       	push	r21
    2604:	6f 93       	push	r22
    2606:	7f 93       	push	r23
    2608:	8f 93       	push	r24
    260a:	9f 93       	push	r25
    260c:	af 93       	push	r26
    260e:	bf 93       	push	r27
    2610:	ef 93       	push	r30
	if (++time.seconds == 60) {
    2612:	80 91 10 27 	lds	r24, 0x2710
    2616:	8f 5f       	subi	r24, 0xFF	; 255
    2618:	80 93 10 27 	sts	0x2710, r24
    261c:	8c 33       	cpi	r24, 0x3C	; 60
    261e:	81 f0       	breq	.+32     	; 0x2640 <__vector_10+0x4e>
			time.minutes = 0;
		} else {
			//rtc_update_display(BOTTOM,time.minutes);
		}
	}
}
    2620:	ef 91       	pop	r30
    2622:	bf 91       	pop	r27
    2624:	af 91       	pop	r26
    2626:	9f 91       	pop	r25
    2628:	8f 91       	pop	r24
    262a:	7f 91       	pop	r23
    262c:	6f 91       	pop	r22
    262e:	5f 91       	pop	r21
    2630:	4f 91       	pop	r20
    2632:	3f 91       	pop	r19
    2634:	2f 91       	pop	r18
    2636:	0f 90       	pop	r0
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	0f 90       	pop	r0
    263c:	1f 90       	pop	r1
    263e:	18 95       	reti
}

ISR(RTC_OVF_vect) {
	if (++time.seconds == 60) {
		
		time.seconds = 0;
    2640:	10 92 10 27 	sts	0x2710, r1
			
		if (++time.minutes == 60) {
    2644:	80 91 11 27 	lds	r24, 0x2711
    2648:	8f 5f       	subi	r24, 0xFF	; 255
    264a:	80 93 11 27 	sts	0x2711, r24
    264e:	8c 33       	cpi	r24, 0x3C	; 60
    2650:	39 f7       	brne	.-50     	; 0x2620 <__vector_10+0x2e>
			
			time.minutes = 0;
    2652:	10 92 11 27 	sts	0x2711, r1
			//rtc_update_display(BOTTOM,time.minutes);
			
			if (++time.hours == 24) {
    2656:	80 91 12 27 	lds	r24, 0x2712
    265a:	8f 5f       	subi	r24, 0xFF	; 255
    265c:	80 93 12 27 	sts	0x2712, r24
    2660:	88 31       	cpi	r24, 0x18	; 24
    2662:	f1 f6       	brne	.-68     	; 0x2620 <__vector_10+0x2e>
				time.weeks += (++time.days)/7;
    2664:	e0 91 15 27 	lds	r30, 0x2715
    2668:	40 91 13 27 	lds	r20, 0x2713
    266c:	50 91 14 27 	lds	r21, 0x2714
    2670:	4f 5f       	subi	r20, 0xFF	; 255
    2672:	5f 4f       	sbci	r21, 0xFF	; 255
    2674:	40 93 13 27 	sts	0x2713, r20
    2678:	50 93 14 27 	sts	0x2714, r21
    267c:	9a 01       	movw	r18, r20
    267e:	a3 e9       	ldi	r26, 0x93	; 147
    2680:	b4 e2       	ldi	r27, 0x24	; 36
    2682:	fd d4       	rcall	.+2554   	; 0x307e <__umulhisi3>
    2684:	28 1b       	sub	r18, r24
    2686:	39 0b       	sbc	r19, r25
    2688:	36 95       	lsr	r19
    268a:	27 95       	ror	r18
    268c:	28 0f       	add	r18, r24
    268e:	39 1f       	adc	r19, r25
    2690:	36 95       	lsr	r19
    2692:	27 95       	ror	r18
    2694:	36 95       	lsr	r19
    2696:	27 95       	ror	r18
    2698:	e2 0f       	add	r30, r18
    269a:	e0 93 15 27 	sts	0x2715, r30
				time.year += time.weeks/52;
    269e:	8f e4       	ldi	r24, 0x4F	; 79
    26a0:	e8 9f       	mul	r30, r24
    26a2:	e1 2d       	mov	r30, r1
    26a4:	11 24       	eor	r1, r1
    26a6:	e2 95       	swap	r30
    26a8:	ef 70       	andi	r30, 0x0F	; 15
    26aa:	80 91 16 27 	lds	r24, 0x2716
    26ae:	90 91 17 27 	lds	r25, 0x2717
    26b2:	8e 0f       	add	r24, r30
    26b4:	91 1d       	adc	r25, r1
    26b6:	80 93 16 27 	sts	0x2716, r24
    26ba:	90 93 17 27 	sts	0x2717, r25
				time.hours = 0;
    26be:	10 92 12 27 	sts	0x2712, r1
    26c2:	ae cf       	rjmp	.-164    	; 0x2620 <__vector_10+0x2e>

000026c4 <Si114xPauseAll>:
{
	return _sendCmd(si114x_handle,0x0B);
}

s16 Si114xPauseAll(HANDLE si114x_handle)
{
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	cf 93       	push	r28
    26ca:	df 93       	push	r29
    26cc:	ec 01       	movw	r28, r24
	while (1)
	{
		// Keep sending nops until the response is zero
		while (1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    26ce:	60 e2       	ldi	r22, 0x20	; 32
    26d0:	ce 01       	movw	r24, r28
    26d2:	b2 d0       	rcall	.+356    	; 0x2838 <Si114xReadFromRegister>

	s16  response;
	s16  retval;

	// Get the response register contents
	if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    26d4:	60 e2       	ldi	r22, 0x20	; 32
	while (1)
	{
		// Keep sending nops until the response is zero
		while (1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    26d6:	89 2b       	or	r24, r25
    26d8:	61 f5       	brne	.+88     	; 0x2732 <Si114xPauseAll+0x6e>

	s16  response;
	s16  retval;

	// Get the response register contents
	if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    26da:	ce 01       	movw	r24, r28
    26dc:	ad d0       	rcall	.+346    	; 0x2838 <Si114xReadFromRegister>
    26de:	8c 01       	movw	r16, r24
    26e0:	97 fd       	sbrc	r25, 7
    26e2:	16 c0       	rjmp	.+44     	; 0x2710 <Si114xPauseAll+0x4c>
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <Si114xPauseAll+0x26>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    26e6:	97 fd       	sbrc	r25, 7
    26e8:	13 c0       	rjmp	.+38     	; 0x2710 <Si114xPauseAll+0x4c>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    26ea:	60 e3       	ldi	r22, 0x30	; 48
    26ec:	ce 01       	movw	r24, r28
    26ee:	a4 d0       	rcall	.+328    	; 0x2838 <Si114xReadFromRegister>
		if (retval == 1) break;
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	91 05       	cpc	r25, r1
    26f4:	c1 f7       	brne	.-16     	; 0x26e6 <Si114xPauseAll+0x22>
	{
		if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

		if(command==0) break; // Skip if the command is NOP

		retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    26f6:	60 e2       	ldi	r22, 0x20	; 32
    26f8:	ce 01       	movw	r24, r28
    26fa:	9e d0       	rcall	.+316    	; 0x2838 <Si114xReadFromRegister>
		if(retval==response) break;
    26fc:	80 17       	cp	r24, r16
    26fe:	91 07       	cpc	r25, r17
    2700:	39 f1       	breq	.+78     	; 0x2750 <Si114xPauseAll+0x8c>
		else if(retval<0) return retval;
    2702:	97 fd       	sbrc	r25, 7
    2704:	05 c0       	rjmp	.+10     	; 0x2710 <Si114xPauseAll+0x4c>
    2706:	8c 01       	movw	r16, r24
    2708:	f0 cf       	rjmp	.-32     	; 0x26ea <Si114xPauseAll+0x26>
	while(1)
	{

		if(command==0) break; // Skip if the command is NOP

		retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    270a:	60 e2       	ldi	r22, 0x20	; 32
    270c:	ce 01       	movw	r24, r28
    270e:	94 d0       	rcall	.+296    	; 0x2838 <Si114xReadFromRegister>
		_PsAlsPause(si114x_handle);

		// Wait for response
		while(1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    2710:	60 e2       	ldi	r22, 0x20	; 32
    2712:	ce 01       	movw	r24, r28
    2714:	91 d0       	rcall	.+290    	; 0x2838 <Si114xReadFromRegister>
    2716:	89 2b       	or	r24, r25
    2718:	d9 f3       	breq	.-10     	; 0x2710 <Si114xPauseAll+0x4c>
			break;
		}

		// When the PsAlsPause() response is good, we expect it to be a '1'.
		if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
    271a:	60 e2       	ldi	r22, 0x20	; 32
    271c:	ce 01       	movw	r24, r28
    271e:	8c d0       	rcall	.+280    	; 0x2838 <Si114xReadFromRegister>
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	a9 f6       	brne	.-86     	; 0x26ce <Si114xPauseAll+0xa>
		break;  // otherwise, start over.
	}
	return 0;
}
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	df 91       	pop	r29
    272a:	cf 91       	pop	r28
    272c:	1f 91       	pop	r17
    272e:	0f 91       	pop	r16
    2730:	08 95       	ret

	s16  response;
	s16  retval;

	// Get the response register contents
	if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    2732:	ce 01       	movw	r24, r28
    2734:	81 d0       	rcall	.+258    	; 0x2838 <Si114xReadFromRegister>
    2736:	97 fd       	sbrc	r25, 7
    2738:	ca cf       	rjmp	.-108    	; 0x26ce <Si114xPauseAll+0xa>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    273a:	60 e3       	ldi	r22, 0x30	; 48
    273c:	ce 01       	movw	r24, r28
    273e:	7c d0       	rcall	.+248    	; 0x2838 <Si114xReadFromRegister>
		if (retval == 1) break;
    2740:	81 30       	cpi	r24, 0x01	; 1
    2742:	91 05       	cpc	r25, r1
    2744:	c1 f7       	brne	.-16     	; 0x2736 <Si114xPauseAll+0x72>
		else if(retval<0) return retval;
		else response = retval;
	}

	// Send the Command
	if ((retval=Si114xWriteToRegister(si114x_handle, REG_COMMAND, command)) !=0)
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	68 e1       	ldi	r22, 0x18	; 24
    274a:	ce 01       	movw	r24, r28
    274c:	58 d0       	rcall	.+176    	; 0x27fe <Si114xWriteToRegister>
    274e:	bf cf       	rjmp	.-130    	; 0x26ce <Si114xPauseAll+0xa>
    2750:	4b e0       	ldi	r20, 0x0B	; 11
    2752:	68 e1       	ldi	r22, 0x18	; 24
    2754:	ce 01       	movw	r24, r28
    2756:	53 d0       	rcall	.+166    	; 0x27fe <Si114xWriteToRegister>
    2758:	89 2b       	or	r24, r25
    275a:	d1 f6       	brne	.-76     	; 0x2710 <Si114xPauseAll+0x4c>
    275c:	17 fd       	sbrc	r17, 7
    275e:	d5 cf       	rjmp	.-86     	; 0x270a <Si114xPauseAll+0x46>
	while(1)
	{

		if(command==0) break; // Skip if the command is NOP

		retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    2760:	60 e2       	ldi	r22, 0x20	; 32
    2762:	ce 01       	movw	r24, r28
    2764:	69 d0       	rcall	.+210    	; 0x2838 <Si114xReadFromRegister>
		if (retval != response) break;
    2766:	08 17       	cp	r16, r24
    2768:	19 07       	cpc	r17, r25
    276a:	d1 f3       	breq	.-12     	; 0x2760 <Si114xPauseAll+0x9c>
		_PsAlsPause(si114x_handle);

		// Wait for response
		while(1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    276c:	60 e2       	ldi	r22, 0x20	; 32
    276e:	ce 01       	movw	r24, r28
    2770:	63 d0       	rcall	.+198    	; 0x2838 <Si114xReadFromRegister>
    2772:	89 2b       	or	r24, r25
    2774:	69 f2       	breq	.-102    	; 0x2710 <Si114xPauseAll+0x4c>
    2776:	d1 cf       	rjmp	.-94     	; 0x271a <Si114xPauseAll+0x56>

00002778 <si114x_reset>:
	return 0;
}


s16 si114x_reset(HANDLE si114x_handle)
{
    2778:	0f 93       	push	r16
    277a:	1f 93       	push	r17
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	8c 01       	movw	r16, r24
	//
	// delay_10ms();
	// delay_10ms();
	// delay_10ms();

	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	68 e0       	ldi	r22, 0x08	; 8
    2786:	3b d0       	rcall	.+118    	; 0x27fe <Si114xWriteToRegister>
    2788:	ec 01       	movw	r28, r24
	retval+=Si114xPauseAll(si114x_handle);
    278a:	c8 01       	movw	r24, r16
    278c:	9b df       	rcall	.-202    	; 0x26c4 <Si114xPauseAll>
    278e:	c8 0f       	add	r28, r24
    2790:	d9 1f       	adc	r29, r25

	// The clearing of the registers could be redundant, but it is okay.
	// This is to make sure that these registers are cleared.
	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	68 e0       	ldi	r22, 0x08	; 8
    2796:	c8 01       	movw	r24, r16
    2798:	32 d0       	rcall	.+100    	; 0x27fe <Si114xWriteToRegister>
    279a:	c8 0f       	add	r28, r24
    279c:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	64 e0       	ldi	r22, 0x04	; 4
    27a2:	c8 01       	movw	r24, r16
    27a4:	2c d0       	rcall	.+88     	; 0x27fe <Si114xWriteToRegister>
    27a6:	c8 0f       	add	r28, r24
    27a8:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	65 e0       	ldi	r22, 0x05	; 5
    27ae:	c8 01       	movw	r24, r16
    27b0:	26 d0       	rcall	.+76     	; 0x27fe <Si114xWriteToRegister>
    27b2:	c8 0f       	add	r28, r24
    27b4:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    27b6:	40 e0       	ldi	r20, 0x00	; 0
    27b8:	66 e0       	ldi	r22, 0x06	; 6
    27ba:	c8 01       	movw	r24, r16
    27bc:	20 d0       	rcall	.+64     	; 0x27fe <Si114xWriteToRegister>
    27be:	c8 0f       	add	r28, r24
    27c0:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    27c2:	40 e0       	ldi	r20, 0x00	; 0
    27c4:	63 e0       	ldi	r22, 0x03	; 3
    27c6:	c8 01       	movw	r24, r16
    27c8:	1a d0       	rcall	.+52     	; 0x27fe <Si114xWriteToRegister>
    27ca:	c8 0f       	add	r28, r24
    27cc:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
    27ce:	4f ef       	ldi	r20, 0xFF	; 255
    27d0:	61 e2       	ldi	r22, 0x21	; 33
    27d2:	c8 01       	movw	r24, r16
    27d4:	14 d0       	rcall	.+40     	; 0x27fe <Si114xWriteToRegister>
    27d6:	c8 0f       	add	r28, r24
    27d8:	d9 1f       	adc	r29, r25

	// Perform the Reset Command
	retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
    27da:	41 e0       	ldi	r20, 0x01	; 1
    27dc:	68 e1       	ldi	r22, 0x18	; 24
    27de:	c8 01       	movw	r24, r16
    27e0:	0e d0       	rcall	.+28     	; 0x27fe <Si114xWriteToRegister>
    27e2:	c8 0f       	add	r28, r24
    27e4:	d9 1f       	adc	r29, r25

	// Delay for 10 ms. This delay is needed to allow the Si114x
	// to perform internal reset sequence.
	delay_10ms();
    27e6:	44 d0       	rcall	.+136    	; 0x2870 <delay_10ms>

	// Write Hardware Key
	retval+=Si114xWriteToRegister(si114x_handle, REG_HW_KEY, HW_KEY_VAL0);
    27e8:	47 e1       	ldi	r20, 0x17	; 23
    27ea:	67 e0       	ldi	r22, 0x07	; 7
    27ec:	c8 01       	movw	r24, r16
    27ee:	07 d0       	rcall	.+14     	; 0x27fe <Si114xWriteToRegister>

	return retval;
}
    27f0:	8c 0f       	add	r24, r28
    27f2:	9d 1f       	adc	r25, r29
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	1f 91       	pop	r17
    27fa:	0f 91       	pop	r16
    27fc:	08 95       	ret

000027fe <Si114xWriteToRegister>:

s16 Si114xBlockRead(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
}
    27fe:	ef 92       	push	r14
    2800:	0f 93       	push	r16
    2802:	1f 93       	push	r17
    2804:	cf 93       	push	r28
    2806:	df 93       	push	r29
    2808:	1f 92       	push	r1
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	26 2f       	mov	r18, r22
    2810:	49 83       	std	Y+1, r20	; 0x01
    2812:	ee 24       	eor	r14, r14
    2814:	e3 94       	inc	r14
    2816:	8e 01       	movw	r16, r28
    2818:	0f 5f       	subi	r16, 0xFF	; 255
    281a:	1f 4f       	sbci	r17, 0xFF	; 255
    281c:	48 ee       	ldi	r20, 0xE8	; 232
    281e:	6a e5       	ldi	r22, 0x5A	; 90
    2820:	80 e8       	ldi	r24, 0x80	; 128
    2822:	94 e0       	ldi	r25, 0x04	; 4
    2824:	dd d0       	rcall	.+442    	; 0x29e0 <twi_write_packet>
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	0f 90       	pop	r0
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	ef 90       	pop	r14
    2836:	08 95       	ret

00002838 <Si114xReadFromRegister>:
    2838:	ef 92       	push	r14
    283a:	0f 93       	push	r16
    283c:	1f 93       	push	r17
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	1f 92       	push	r1
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	26 2f       	mov	r18, r22
    284a:	ee 24       	eor	r14, r14
    284c:	e3 94       	inc	r14
    284e:	8e 01       	movw	r16, r28
    2850:	0f 5f       	subi	r16, 0xFF	; 255
    2852:	1f 4f       	sbci	r17, 0xFF	; 255
    2854:	48 ee       	ldi	r20, 0xE8	; 232
    2856:	6a e5       	ldi	r22, 0x5A	; 90
    2858:	80 e8       	ldi	r24, 0x80	; 128
    285a:	94 e0       	ldi	r25, 0x04	; 4
    285c:	1d d0       	rcall	.+58     	; 0x2898 <twi_read_packet>
    285e:	89 81       	ldd	r24, Y+1	; 0x01
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	0f 90       	pop	r0
    2864:	df 91       	pop	r29
    2866:	cf 91       	pop	r28
    2868:	1f 91       	pop	r17
    286a:	0f 91       	pop	r16
    286c:	ef 90       	pop	r14
    286e:	08 95       	ret

00002870 <delay_10ms>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2870:	2f ef       	ldi	r18, 0xFF	; 255
    2872:	89 ef       	ldi	r24, 0xF9	; 249
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	21 50       	subi	r18, 0x01	; 1
    2878:	80 40       	sbci	r24, 0x00	; 0
    287a:	90 40       	sbci	r25, 0x00	; 0
    287c:	e1 f7       	brne	.-8      	; 0x2876 <delay_10ms+0x6>
    287e:	00 c0       	rjmp	.+0      	; 0x2880 <delay_10ms+0x10>
    2880:	00 00       	nop
    2882:	08 95       	ret

00002884 <twi_setup>:
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
}
    2884:	e0 e8       	ldi	r30, 0x80	; 128
    2886:	f4 e0       	ldi	r31, 0x04	; 4
    2888:	12 82       	std	Z+2, r1	; 0x02
    288a:	89 e0       	ldi	r24, 0x09	; 9
    288c:	85 83       	std	Z+5, r24	; 0x05
    288e:	88 e0       	ldi	r24, 0x08	; 8
    2890:	81 83       	std	Z+1, r24	; 0x01
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	84 83       	std	Z+4, r24	; 0x04
    2896:	08 95       	ret

00002898 <twi_read_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
uint8_t* data,
uint8_t length)
{
    2898:	ef 92       	push	r14
    289a:	0f 93       	push	r16
    289c:	1f 93       	push	r17
    289e:	dc 01       	movw	r26, r24
	uint8_t error_code;
	uint8_t len = length;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    28a0:	76 2f       	mov	r23, r22
    28a2:	77 0f       	add	r23, r23
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    28a4:	16 96       	adiw	r26, 0x06	; 6
    28a6:	7c 93       	st	X, r23
    28a8:	16 97       	sbiw	r26, 0x06	; 6

	timeout_remaining = (timeout_ms * 100);
    28aa:	84 e6       	ldi	r24, 0x64	; 100
    28ac:	48 9f       	mul	r20, r24
    28ae:	a0 01       	movw	r20, r0
    28b0:	11 24       	eor	r1, r1
	while (timeout_remaining)
    28b2:	41 15       	cp	r20, r1
    28b4:	51 05       	cpc	r21, r1
    28b6:	01 f1       	breq	.+64     	; 0x28f8 <twi_read_packet+0x60>
    28b8:	fa 01       	movw	r30, r20
    28ba:	0d c0       	rjmp	.+26     	; 0x28d6 <twi_read_packet+0x3e>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    28bc:	39 2f       	mov	r19, r25
    28be:	30 75       	andi	r19, 0x50	; 80
    28c0:	30 35       	cpi	r19, 0x50	; 80
    28c2:	f9 f0       	breq	.+62     	; 0x2902 <twi_read_packet+0x6a>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    28c4:	90 7c       	andi	r25, 0xC0	; 192
    28c6:	29 f5       	brne	.+74     	; 0x2912 <twi_read_packet+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    28c8:	8a e6       	ldi	r24, 0x6A	; 106
    28ca:	8a 95       	dec	r24
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <twi_read_packet+0x32>
    28ce:	00 c0       	rjmp	.+0      	; 0x28d0 <twi_read_packet+0x38>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    28d0:	31 97       	sbiw	r30, 0x01	; 1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    28d2:	30 97       	sbiw	r30, 0x00	; 0
    28d4:	89 f0       	breq	.+34     	; 0x28f8 <twi_read_packet+0x60>
	{
		uint8_t status = TWI->MASTER.STATUS;
    28d6:	14 96       	adiw	r26, 0x04	; 4
    28d8:	9c 91       	ld	r25, X
    28da:	14 97       	sbiw	r26, 0x04	; 4

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    28dc:	39 2f       	mov	r19, r25
    28de:	38 74       	andi	r19, 0x48	; 72
    28e0:	38 34       	cpi	r19, 0x48	; 72
    28e2:	61 f7       	brne	.-40     	; 0x28bc <twi_read_packet+0x24>
		{
			TWI->MASTER.ADDR = slave_address;
    28e4:	16 96       	adiw	r26, 0x06	; 6
    28e6:	7c 93       	st	X, r23
    28e8:	16 97       	sbiw	r26, 0x06	; 6
    28ea:	8a e6       	ldi	r24, 0x6A	; 106
    28ec:	8a 95       	dec	r24
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <twi_read_packet+0x54>
    28f0:	00 c0       	rjmp	.+0      	; 0x28f2 <twi_read_packet+0x5a>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    28f2:	31 97       	sbiw	r30, 0x01	; 1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    28f4:	30 97       	sbiw	r30, 0x00	; 0
    28f6:	79 f7       	brne	.-34     	; 0x28d6 <twi_read_packet+0x3e>
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    28f8:	14 96       	adiw	r26, 0x04	; 4
    28fa:	8c 91       	ld	r24, X
    28fc:	14 97       	sbiw	r26, 0x04	; 4
    28fe:	85 ff       	sbrs	r24, 5
    2900:	03 c0       	rjmp	.+6      	; 0x2908 <twi_read_packet+0x70>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2902:	87 e0       	ldi	r24, 0x07	; 7
    2904:	13 96       	adiw	r26, 0x03	; 3
    2906:	8c 93       	st	X, r24
		}

		twi_stop_transmission(TWI);
	}

	return len;
    2908:	8e 2d       	mov	r24, r14
}
    290a:	1f 91       	pop	r17
    290c:	0f 91       	pop	r16
    290e:	ef 90       	pop	r14
    2910:	08 95       	ret
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    2912:	17 96       	adiw	r26, 0x07	; 7
    2914:	2c 93       	st	X, r18
    2916:	17 97       	sbiw	r26, 0x07	; 7

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    2918:	14 96       	adiw	r26, 0x04	; 4
    291a:	9c 91       	ld	r25, X
    291c:	14 97       	sbiw	r26, 0x04	; 4
    291e:	96 ff       	sbrs	r25, 6
    2920:	fb cf       	rjmp	.-10     	; 0x2918 <twi_read_packet+0x80>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    2922:	14 96       	adiw	r26, 0x04	; 4
    2924:	8c 91       	ld	r24, X
    2926:	14 97       	sbiw	r26, 0x04	; 4
    2928:	86 ff       	sbrs	r24, 6
    292a:	25 c0       	rjmp	.+74     	; 0x2976 <twi_read_packet+0xde>
    292c:	14 96       	adiw	r26, 0x04	; 4
    292e:	8c 91       	ld	r24, X
    2930:	14 97       	sbiw	r26, 0x04	; 4
    2932:	84 fd       	sbrc	r24, 4
    2934:	20 c0       	rjmp	.+64     	; 0x2976 <twi_read_packet+0xde>
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
    2936:	66 0f       	add	r22, r22
    2938:	61 60       	ori	r22, 0x01	; 1
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    293a:	16 96       	adiw	r26, 0x06	; 6
    293c:	6c 93       	st	X, r22
    293e:	16 97       	sbiw	r26, 0x06	; 6
    2940:	0f c0       	rjmp	.+30     	; 0x2960 <twi_read_packet+0xc8>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    2942:	89 2f       	mov	r24, r25
    2944:	80 75       	andi	r24, 0x50	; 80
    2946:	80 35       	cpi	r24, 0x50	; 80
    2948:	01 f1       	breq	.+64     	; 0x298a <twi_read_packet+0xf2>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    294a:	90 7c       	andi	r25, 0xC0	; 192
    294c:	39 f5       	brne	.+78     	; 0x299c <twi_read_packet+0x104>
    294e:	8a e6       	ldi	r24, 0x6A	; 106
    2950:	8a 95       	dec	r24
    2952:	f1 f7       	brne	.-4      	; 0x2950 <twi_read_packet+0xb8>
    2954:	00 c0       	rjmp	.+0      	; 0x2956 <twi_read_packet+0xbe>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    2956:	41 50       	subi	r20, 0x01	; 1
    2958:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    295a:	41 15       	cp	r20, r1
    295c:	51 05       	cpc	r21, r1
    295e:	81 f0       	breq	.+32     	; 0x2980 <twi_read_packet+0xe8>
	{
		uint8_t status = TWI->MASTER.STATUS;
    2960:	14 96       	adiw	r26, 0x04	; 4
    2962:	9c 91       	ld	r25, X
    2964:	14 97       	sbiw	r26, 0x04	; 4

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    2966:	89 2f       	mov	r24, r25
    2968:	88 74       	andi	r24, 0x48	; 72
    296a:	88 34       	cpi	r24, 0x48	; 72
    296c:	51 f7       	brne	.-44     	; 0x2942 <twi_read_packet+0xaa>
		{
			TWI->MASTER.ADDR = slave_address;
    296e:	16 96       	adiw	r26, 0x06	; 6
    2970:	6c 93       	st	X, r22
    2972:	16 97       	sbiw	r26, 0x06	; 6
    2974:	ec cf       	rjmp	.-40     	; 0x294e <twi_read_packet+0xb6>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    2976:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return len;
}
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	ef 90       	pop	r14
    297e:	08 95       	ret
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    2980:	14 96       	adiw	r26, 0x04	; 4
    2982:	8c 91       	ld	r24, X
    2984:	14 97       	sbiw	r26, 0x04	; 4
    2986:	85 ff       	sbrs	r24, 5
    2988:	04 c0       	rjmp	.+8      	; 0x2992 <twi_read_packet+0xfa>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    298a:	87 e0       	ldi	r24, 0x07	; 7
    298c:	13 96       	adiw	r26, 0x03	; 3
    298e:	8c 93       	st	X, r24
    2990:	13 97       	sbiw	r26, 0x03	; 3
    2992:	87 e0       	ldi	r24, 0x07	; 7
    2994:	13 96       	adiw	r26, 0x03	; 3
    2996:	8c 93       	st	X, r24
		}

		twi_stop_transmission(TWI);
	}

	return len;
    2998:	8e 2d       	mov	r24, r14
    299a:	b7 cf       	rjmp	.-146    	; 0x290a <twi_read_packet+0x72>
    299c:	2f ef       	ldi	r18, 0xFF	; 255
    299e:	2e 0d       	add	r18, r14
    29a0:	f8 01       	movw	r30, r16
	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    29a2:	42 e0       	ldi	r20, 0x02	; 2
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm));

	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    29a4:	37 e0       	ldi	r19, 0x07	; 7
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
    29a6:	2f 3f       	cpi	r18, 0xFF	; 255
    29a8:	a1 f3       	breq	.-24     	; 0x2992 <twi_read_packet+0xfa>

uint8_t twi_receive_byte(TWI_t* const TWI, 
uint8_t* const data, 
const uint8_t end_of_data)
{
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
    29aa:	14 96       	adiw	r26, 0x04	; 4
    29ac:	8c 91       	ld	r24, X
    29ae:	14 97       	sbiw	r26, 0x04	; 4
    29b0:	8c 70       	andi	r24, 0x0C	; 12
    29b2:	8c 30       	cpi	r24, 0x0C	; 12
    29b4:	71 f3       	breq	.-36     	; 0x2992 <twi_read_packet+0xfa>
		return false;
	}

	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm));
    29b6:	14 96       	adiw	r26, 0x04	; 4
    29b8:	9c 91       	ld	r25, X
    29ba:	14 97       	sbiw	r26, 0x04	; 4
    29bc:	97 ff       	sbrs	r25, 7
    29be:	fb cf       	rjmp	.-10     	; 0x29b6 <twi_read_packet+0x11e>

	*data = TWI->MASTER.DATA;
    29c0:	17 96       	adiw	r26, 0x07	; 7
    29c2:	8c 91       	ld	r24, X
    29c4:	17 97       	sbiw	r26, 0x07	; 7
    29c6:	81 93       	st	Z+, r24

	if (end_of_data)
    29c8:	21 11       	cpse	r18, r1
    29ca:	05 c0       	rjmp	.+10     	; 0x29d6 <twi_read_packet+0x13e>
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    29cc:	13 96       	adiw	r26, 0x03	; 3
    29ce:	3c 93       	st	X, r19
    29d0:	13 97       	sbiw	r26, 0x03	; 3
    29d2:	21 50       	subi	r18, 0x01	; 1
    29d4:	e8 cf       	rjmp	.-48     	; 0x29a6 <twi_read_packet+0x10e>
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    29d6:	13 96       	adiw	r26, 0x03	; 3
    29d8:	4c 93       	st	X, r20
    29da:	13 97       	sbiw	r26, 0x03	; 3
    29dc:	21 50       	subi	r18, 0x01	; 1
    29de:	e3 cf       	rjmp	.-58     	; 0x29a6 <twi_read_packet+0x10e>

000029e0 <twi_write_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    29e0:	ef 92       	push	r14
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	fc 01       	movw	r30, r24
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    29e8:	66 0f       	add	r22, r22
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    29ea:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    29ec:	84 e6       	ldi	r24, 0x64	; 100
    29ee:	48 9f       	mul	r20, r24
    29f0:	a0 01       	movw	r20, r0
    29f2:	11 24       	eor	r1, r1
	while (timeout_remaining)
    29f4:	41 15       	cp	r20, r1
    29f6:	51 05       	cpc	r21, r1
    29f8:	81 f4       	brne	.+32     	; 0x2a1a <twi_write_packet+0x3a>
    29fa:	16 c0       	rjmp	.+44     	; 0x2a28 <twi_write_packet+0x48>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    29fc:	39 2f       	mov	r19, r25
    29fe:	30 75       	andi	r19, 0x50	; 80
    2a00:	30 35       	cpi	r19, 0x50	; 80
    2a02:	a9 f0       	breq	.+42     	; 0x2a2e <twi_write_packet+0x4e>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    2a04:	90 7c       	andi	r25, 0xC0	; 192
    2a06:	d1 f4       	brne	.+52     	; 0x2a3c <twi_write_packet+0x5c>
    2a08:	8a e6       	ldi	r24, 0x6A	; 106
    2a0a:	8a 95       	dec	r24
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <twi_write_packet+0x2a>
    2a0e:	00 c0       	rjmp	.+0      	; 0x2a10 <twi_write_packet+0x30>
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    2a10:	41 50       	subi	r20, 0x01	; 1
    2a12:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    2a14:	41 15       	cp	r20, r1
    2a16:	51 05       	cpc	r21, r1
    2a18:	39 f0       	breq	.+14     	; 0x2a28 <twi_write_packet+0x48>
	{
		uint8_t status = TWI->MASTER.STATUS;
    2a1a:	94 81       	ldd	r25, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    2a1c:	39 2f       	mov	r19, r25
    2a1e:	38 74       	andi	r19, 0x48	; 72
    2a20:	38 34       	cpi	r19, 0x48	; 72
    2a22:	61 f7       	brne	.-40     	; 0x29fc <twi_write_packet+0x1c>
		{
			TWI->MASTER.ADDR = slave_address;
    2a24:	66 83       	std	Z+6, r22	; 0x06
    2a26:	f0 cf       	rjmp	.-32     	; 0x2a08 <twi_write_packet+0x28>
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    2a28:	84 81       	ldd	r24, Z+4	; 0x04
    2a2a:	85 ff       	sbrs	r24, 5
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <twi_write_packet+0x52>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2a2e:	87 e0       	ldi	r24, 0x07	; 7
    2a30:	83 83       	std	Z+3, r24	; 0x03
    2a32:	8e 2d       	mov	r24, r14

		twi_stop_transmission(TWI);
	}

	return length;
    2a34:	1f 91       	pop	r17
    2a36:	0f 91       	pop	r16
    2a38:	ef 90       	pop	r14
    2a3a:	08 95       	ret
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    2a3c:	27 83       	std	Z+7, r18	; 0x07

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    2a3e:	94 81       	ldd	r25, Z+4	; 0x04
    2a40:	96 ff       	sbrs	r25, 6
    2a42:	fd cf       	rjmp	.-6      	; 0x2a3e <twi_write_packet+0x5e>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    2a44:	84 81       	ldd	r24, Z+4	; 0x04
    2a46:	86 ff       	sbrs	r24, 6
    2a48:	13 c0       	rjmp	.+38     	; 0x2a70 <twi_write_packet+0x90>
    2a4a:	84 81       	ldd	r24, Z+4	; 0x04
    2a4c:	84 fd       	sbrc	r24, 4
    2a4e:	10 c0       	rjmp	.+32     	; 0x2a70 <twi_write_packet+0x90>
    2a50:	d8 01       	movw	r26, r16
    2a52:	8f ef       	ldi	r24, 0xFF	; 255
    2a54:	8e 0d       	add	r24, r14
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    2a56:	8f 3f       	cpi	r24, 0xFF	; 255
    2a58:	41 f0       	breq	.+16     	; 0x2a6a <twi_write_packet+0x8a>
		{
			if (!(twi_send_byte(TWI, *(data++))))
    2a5a:	9d 91       	ld	r25, X+
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    2a5c:	97 83       	std	Z+7, r25	; 0x07

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    2a5e:	94 81       	ldd	r25, Z+4	; 0x04
    2a60:	96 ff       	sbrs	r25, 6
    2a62:	fd cf       	rjmp	.-6      	; 0x2a5e <twi_write_packet+0x7e>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    2a64:	94 81       	ldd	r25, Z+4	; 0x04
    2a66:	96 fd       	sbrc	r25, 6
    2a68:	08 c0       	rjmp	.+16     	; 0x2a7a <twi_write_packet+0x9a>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    2a6a:	97 e0       	ldi	r25, 0x07	; 7
    2a6c:	93 83       	std	Z+3, r25	; 0x03
    2a6e:	e2 cf       	rjmp	.-60     	; 0x2a34 <twi_write_packet+0x54>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    2a70:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return length;
    2a72:	1f 91       	pop	r17
    2a74:	0f 91       	pop	r16
    2a76:	ef 90       	pop	r14
    2a78:	08 95       	ret
{
	TWI->MASTER.DATA = data;

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    2a7a:	94 81       	ldd	r25, Z+4	; 0x04
    2a7c:	2f ef       	ldi	r18, 0xFF	; 255
    2a7e:	28 0f       	add	r18, r24
    2a80:	94 fd       	sbrc	r25, 4
    2a82:	f3 cf       	rjmp	.-26     	; 0x2a6a <twi_write_packet+0x8a>
    2a84:	82 2f       	mov	r24, r18
    2a86:	e7 cf       	rjmp	.-50     	; 0x2a56 <twi_write_packet+0x76>

00002a88 <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
    2a88:	1f 92       	push	r1
    2a8a:	0f 92       	push	r0
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	0f 92       	push	r0
    2a90:	11 24       	eor	r1, r1
    2a92:	0b b6       	in	r0, 0x3b	; 59
    2a94:	0f 92       	push	r0
    2a96:	cf 92       	push	r12
    2a98:	df 92       	push	r13
    2a9a:	ef 92       	push	r14
    2a9c:	ff 92       	push	r15
    2a9e:	2f 93       	push	r18
    2aa0:	3f 93       	push	r19
    2aa2:	4f 93       	push	r20
    2aa4:	5f 93       	push	r21
    2aa6:	6f 93       	push	r22
    2aa8:	7f 93       	push	r23
    2aaa:	8f 93       	push	r24
    2aac:	9f 93       	push	r25
    2aae:	af 93       	push	r26
    2ab0:	bf 93       	push	r27
    2ab2:	ef 93       	push	r30
    2ab4:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    2ab6:	e0 91 59 27 	lds	r30, 0x2759
    2aba:	f0 91 5a 27 	lds	r31, 0x275A
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	static uint16_t prev = 0;
		
	if (!fcb) return;
    2abe:	30 97       	sbiw	r30, 0x00	; 0
    2ac0:	09 f4       	brne	.+2      	; 0x2ac4 <__vector_14+0x3c>
    2ac2:	4d c0       	rjmp	.+154    	; 0x2b5e <__vector_14+0xd6>
	ct = fcb->ct; ri = fcb->ri;
    2ac4:	46 81       	ldd	r20, Z+6	; 0x06
    2ac6:	57 81       	ldd	r21, Z+7	; 0x07
    2ac8:	22 81       	ldd	r18, Z+2	; 0x02
    2aca:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    2acc:	a0 85       	ldd	r26, Z+8	; 0x08
    2ace:	b1 85       	ldd	r27, Z+9	; 0x09
    2ad0:	a2 0f       	add	r26, r18
    2ad2:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    2ad4:	80 81       	ld	r24, Z
    2ad6:	91 81       	ldd	r25, Z+1	; 0x01
    2ad8:	81 30       	cpi	r24, 0x01	; 1
    2ada:	91 05       	cpc	r25, r1
    2adc:	81 f0       	breq	.+32     	; 0x2afe <__vector_14+0x76>
    2ade:	08 f4       	brcc	.+2      	; 0x2ae2 <__vector_14+0x5a>
    2ae0:	55 c0       	rjmp	.+170    	; 0x2b8c <__vector_14+0x104>
    2ae2:	02 97       	sbiw	r24, 0x02	; 2
    2ae4:	09 f0       	breq	.+2      	; 0x2ae8 <__vector_14+0x60>
    2ae6:	5b c0       	rjmp	.+182    	; 0x2b9e <__vector_14+0x116>
		if (ct < 2) return;
		l1 = buff[0]; r2 = buff[1];
		ct -= 2; ri += 2;
		break;
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
    2ae8:	42 30       	cpi	r20, 0x02	; 2
    2aea:	51 05       	cpc	r21, r1
    2aec:	c0 f1       	brcs	.+112    	; 0x2b5e <__vector_14+0xd6>
		l1 = r2 = buff[1] + 128;
    2aee:	11 96       	adiw	r26, 0x01	; 1
    2af0:	6c 91       	ld	r22, X
    2af2:	60 58       	subi	r22, 0x80	; 128
		ct -= 2; ri += 2;
    2af4:	42 50       	subi	r20, 0x02	; 2
    2af6:	51 09       	sbc	r21, r1
    2af8:	2e 5f       	subi	r18, 0xFE	; 254
    2afa:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    2afc:	08 c0       	rjmp	.+16     	; 0x2b0e <__vector_14+0x86>
		if (ct < 1) return;
		l1 = r2 = buff[0];
		ct -= 1; ri += 1;
		break;
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
    2afe:	42 30       	cpi	r20, 0x02	; 2
    2b00:	51 05       	cpc	r21, r1
    2b02:	68 f1       	brcs	.+90     	; 0x2b5e <__vector_14+0xd6>
		l1 = buff[0]; r2 = buff[1];
    2b04:	6c 91       	ld	r22, X
		ct -= 2; ri += 2;
    2b06:	42 50       	subi	r20, 0x02	; 2
    2b08:	51 09       	sbc	r21, r1
    2b0a:	2e 5f       	subi	r18, 0xFE	; 254
    2b0c:	3f 4f       	sbci	r19, 0xFF	; 255
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
		ri += 4;
	}
	fcb->ct = ct;
    2b0e:	46 83       	std	Z+6, r20	; 0x06
    2b10:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    2b12:	82 85       	ldd	r24, Z+10	; 0x0a
    2b14:	93 85       	ldd	r25, Z+11	; 0x0b
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	82 23       	and	r24, r18
    2b1a:	93 23       	and	r25, r19
    2b1c:	82 83       	std	Z+2, r24	; 0x02
    2b1e:	93 83       	std	Z+3, r25	; 0x03
	result = integer + 0x7FFF;
	return(result >> 4);
}

static inline uint8_t smooth(uint8_t data, float filterVal, float smoothedVal){
	return (int)(((data * (1 - filterVal)) + (smoothedVal  *  filterVal)));
    2b20:	70 e0       	ldi	r23, 0x00	; 0
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	a9 d1       	rcall	.+850    	; 0x2e7a <__floatsisf>
    2b28:	26 e6       	ldi	r18, 0x66	; 102
    2b2a:	36 e6       	ldi	r19, 0x66	; 102
    2b2c:	46 e2       	ldi	r20, 0x26	; 38
    2b2e:	5f e3       	ldi	r21, 0x3F	; 63
    2b30:	30 d2       	rcall	.+1120   	; 0x2f92 <__mulsf3>
    2b32:	6b 01       	movw	r12, r22
    2b34:	7c 01       	movw	r14, r24
		ri += 4;
	}
	fcb->ct = ct;
	fcb->ri = ri & (fcb->sz_buff - 1);
	
	uint16_t data = smooth(l1,0.35,data);
    2b36:	60 e0       	ldi	r22, 0x00	; 0
    2b38:	70 e0       	ldi	r23, 0x00	; 0
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	9c d1       	rcall	.+824    	; 0x2e76 <__floatunsisf>
	result = integer + 0x7FFF;
	return(result >> 4);
}

static inline uint8_t smooth(uint8_t data, float filterVal, float smoothedVal){
	return (int)(((data * (1 - filterVal)) + (smoothedVal  *  filterVal)));
    2b3e:	23 e3       	ldi	r18, 0x33	; 51
    2b40:	33 e3       	ldi	r19, 0x33	; 51
    2b42:	43 eb       	ldi	r20, 0xB3	; 179
    2b44:	5e e3       	ldi	r21, 0x3E	; 62
    2b46:	25 d2       	rcall	.+1098   	; 0x2f92 <__mulsf3>
    2b48:	9b 01       	movw	r18, r22
    2b4a:	ac 01       	movw	r20, r24
    2b4c:	c7 01       	movw	r24, r14
    2b4e:	b6 01       	movw	r22, r12
    2b50:	fd d0       	rcall	.+506    	; 0x2d4c <__addsf3>
    2b52:	60 d1       	rcall	.+704    	; 0x2e14 <__fixsfsi>
    2b54:	77 27       	eor	r23, r23
	fcb->ct = ct;
	fcb->ri = ri & (fcb->sz_buff - 1);
	
	uint16_t data = smooth(l1,0.35,data);
	
	DACB.CH0DATA = data;
    2b56:	60 93 38 03 	sts	0x0338, r22
    2b5a:	70 93 39 03 	sts	0x0339, r23
	
	//prev = data;
}
    2b5e:	ff 91       	pop	r31
    2b60:	ef 91       	pop	r30
    2b62:	bf 91       	pop	r27
    2b64:	af 91       	pop	r26
    2b66:	9f 91       	pop	r25
    2b68:	8f 91       	pop	r24
    2b6a:	7f 91       	pop	r23
    2b6c:	6f 91       	pop	r22
    2b6e:	5f 91       	pop	r21
    2b70:	4f 91       	pop	r20
    2b72:	3f 91       	pop	r19
    2b74:	2f 91       	pop	r18
    2b76:	ff 90       	pop	r15
    2b78:	ef 90       	pop	r14
    2b7a:	df 90       	pop	r13
    2b7c:	cf 90       	pop	r12
    2b7e:	0f 90       	pop	r0
    2b80:	0b be       	out	0x3b, r0	; 59
    2b82:	0f 90       	pop	r0
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	0f 90       	pop	r0
    2b88:	1f 90       	pop	r1
    2b8a:	18 95       	reti
	ct = fcb->ct; ri = fcb->ri;
	buff = fcb->buff + ri;

	switch (fcb->mode) {
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
    2b8c:	41 15       	cp	r20, r1
    2b8e:	51 05       	cpc	r21, r1
    2b90:	31 f3       	breq	.-52     	; 0x2b5e <__vector_14+0xd6>
		l1 = r2 = buff[0];
    2b92:	6c 91       	ld	r22, X
		ct -= 1; ri += 1;
    2b94:	41 50       	subi	r20, 0x01	; 1
    2b96:	51 09       	sbc	r21, r1
    2b98:	2f 5f       	subi	r18, 0xFF	; 255
    2b9a:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    2b9c:	b8 cf       	rjmp	.-144    	; 0x2b0e <__vector_14+0x86>
		if (ct < 2) return;
		l1 = r2 = buff[1] + 128;
		ct -= 2; ri += 2;
		break;
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
    2b9e:	44 30       	cpi	r20, 0x04	; 4
    2ba0:	51 05       	cpc	r21, r1
    2ba2:	e8 f2       	brcs	.-70     	; 0x2b5e <__vector_14+0xd6>
		l2 = buff[0]; 
		l1 = buff[1];
    2ba4:	11 96       	adiw	r26, 0x01	; 1
    2ba6:	6c 91       	ld	r22, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
    2ba8:	44 50       	subi	r20, 0x04	; 4
    2baa:	51 09       	sbc	r21, r1
		ri += 4;
    2bac:	2c 5f       	subi	r18, 0xFC	; 252
    2bae:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb0:	ae cf       	rjmp	.-164    	; 0x2b0e <__vector_14+0x86>

00002bb2 <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
    2bb2:	fc 01       	movw	r30, r24
	parser->pos = 0;
    2bb4:	10 82       	st	Z, r1
    2bb6:	11 82       	std	Z+1, r1	; 0x01
	parser->toknext = 0;
    2bb8:	12 82       	std	Z+2, r1	; 0x02
    2bba:	13 82       	std	Z+3, r1	; 0x03
	parser->toksuper = -1;
    2bbc:	8f ef       	ldi	r24, 0xFF	; 255
    2bbe:	9f ef       	ldi	r25, 0xFF	; 255
    2bc0:	84 83       	std	Z+4, r24	; 0x04
    2bc2:	95 83       	std	Z+5, r25	; 0x05
    2bc4:	08 95       	ret

00002bc6 <main>:
		}
		ht1632_fade(reg01/400);
	}
}

int main(void) {
    2bc6:	cf 93       	push	r28
    2bc8:	df 93       	push	r29
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
    2bce:	26 97       	sbiw	r28, 0x06	; 6
    2bd0:	cd bf       	out	0x3d, r28	; 61
    2bd2:	de bf       	out	0x3e, r29	; 62
	char *cmd;
	//char json_buffer[RX_BUFFER];
	
	esp8266_status_t status;
	
	clock_setup_32_mhz();
    2bd4:	0e 94 9c 03 	call	0x738	; 0x738 <clock_setup_32_mhz>
	ht1632c_setup(HT1632_COMMON_16NMOS);
    2bd8:	84 e2       	ldi	r24, 0x24	; 36
    2bda:	0e 94 43 0a 	call	0x1486	; 0x1486 <ht1632c_setup>
	ht1632c_set_brightness(0);
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <ht1632c_set_brightness>
	ht1632c_clear_screen();
    2be4:	cb d9       	rcall	.-3178   	; 0x1f7c <ht1632c_clear_screen>
	
	uart_setup();
    2be6:	3a d0       	rcall	.+116    	; 0x2c5c <uart_setup>
void uart_put_char(char c);
static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) {
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    2be8:	87 e0       	ldi	r24, 0x07	; 7
    2bea:	80 93 a2 00 	sts	0x00A2, r24
	ht1632c_set_brightness(0);
	ht1632c_clear_screen();
	
	uart_setup();
	pmic_setup();
	twi_setup(&TWIC);
    2bee:	80 e8       	ldi	r24, 0x80	; 128
    2bf0:	94 e0       	ldi	r25, 0x04	; 4
    2bf2:	48 de       	rcall	.-880    	; 0x2884 <twi_setup>
	si114x_reset(SI114X_ADDR);
    2bf4:	8a e5       	ldi	r24, 0x5A	; 90
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	bf dd       	rcall	.-1154   	; 0x2778 <si114x_reset>
	//si114x_setup();
	//tcc_setup();
	btn_setup();
    2bfa:	8c db       	rcall	.-2280   	; 0x2314 <btn_setup>
	//rtc_setup();
	//rtc_init_time();
	jsmn_init(&p);
    2bfc:	ce 01       	movw	r24, r28
    2bfe:	01 96       	adiw	r24, 0x01	; 1
    2c00:	d8 df       	rcall	.-80     	; 0x2bb2 <jsmn_init>
	
	stdout = stdin = &mystdout;
    2c02:	84 e0       	ldi	r24, 0x04	; 4
    2c04:	90 e2       	ldi	r25, 0x20	; 32
    2c06:	80 93 5b 27 	sts	0x275B, r24
    2c0a:	90 93 5c 27 	sts	0x275C, r25
    2c0e:	80 93 5d 27 	sts	0x275D, r24
    2c12:	90 93 5e 27 	sts	0x275E, r25
	puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
    2c16:	8f e9       	ldi	r24, 0x9F	; 159
    2c18:	95 e2       	ldi	r25, 0x25	; 37
    2c1a:	12 d3       	rcall	.+1572   	; 0x3240 <puts>

	//rtc_set_time(18,50,0);
	
	//sd_card();
	
	sei();
    2c1c:	78 94       	sei
	
	//esp8266_off();
	esp8266_on();
    2c1e:	0e 94 0c 04 	call	0x818	; 0x818 <esp8266_on>
	esp8266_setup_webserver(true);
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	0e 94 9c 04 	call	0x938	; 0x938 <esp8266_setup_webserver>
	*/
	//play_sound("whatever!");
	
	while (1) {
		
		esp8266_telnet_server();
    2c28:	0e 94 23 05 	call	0xa46	; 0xa46 <esp8266_telnet_server>
    2c2c:	fd cf       	rjmp	.-6      	; 0x2c28 <main+0x62>

00002c2e <__vector_20>:
		//rtc_update_display_alt();
	}
}

//Used for SI114x Timestamp
ISR(TCC1_OVF_vect) {
    2c2e:	1f 92       	push	r1
    2c30:	0f 92       	push	r0
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	0f 92       	push	r0
    2c36:	11 24       	eor	r1, r1
    2c38:	8f 93       	push	r24
    2c3a:	9f 93       	push	r25
	counter++;
    2c3c:	80 91 c6 26 	lds	r24, 0x26C6
    2c40:	90 91 c7 26 	lds	r25, 0x26C7
    2c44:	01 96       	adiw	r24, 0x01	; 1
    2c46:	80 93 c6 26 	sts	0x26C6, r24
    2c4a:	90 93 c7 26 	sts	0x26C7, r25
}
    2c4e:	9f 91       	pop	r25
    2c50:	8f 91       	pop	r24
    2c52:	0f 90       	pop	r0
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	0f 90       	pop	r0
    2c58:	1f 90       	pop	r1
    2c5a:	18 95       	reti

00002c5c <uart_setup>:

#include "uart.h"

void uart_setup(void) {
	
	PORTD.DIRSET = PIN3_bm; //TX
    2c5c:	e0 e6       	ldi	r30, 0x60	; 96
    2c5e:	f6 e0       	ldi	r31, 0x06	; 6
    2c60:	88 e0       	ldi	r24, 0x08	; 8
    2c62:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; //RX
    2c64:	84 e0       	ldi	r24, 0x04	; 4
    2c66:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
    2c68:	e0 ea       	ldi	r30, 0xA0	; 160
    2c6a:	f9 e0       	ldi	r31, 0x09	; 9
    2c6c:	80 e2       	ldi	r24, 0x20	; 32
    2c6e:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 2094;//207;//0x1111;
    2c70:	8e e2       	ldi	r24, 0x2E	; 46
    2c72:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (-7 << 4) | (2094 >> 8);
    2c74:	88 e9       	ldi	r24, 0x98	; 152
    2c76:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
    2c78:	83 e0       	ldi	r24, 0x03	; 3
    2c7a:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    2c7c:	88 e1       	ldi	r24, 0x18	; 24
    2c7e:	84 83       	std	Z+4, r24	; 0x04
    2c80:	08 95       	ret

00002c82 <uart_put_char>:
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2c82:	90 91 a1 09 	lds	r25, 0x09A1
    2c86:	95 ff       	sbrs	r25, 5
    2c88:	fc cf       	rjmp	.-8      	; 0x2c82 <uart_put_char>
	USARTD0.DATA = c;
    2c8a:	80 93 a0 09 	sts	0x09A0, r24
    2c8e:	08 95       	ret

00002c90 <uart_get_char>:
}

char uart_get_char(void) {
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
    2c90:	80 91 a1 09 	lds	r24, 0x09A1
    2c94:	87 ff       	sbrs	r24, 7
    2c96:	fc cf       	rjmp	.-8      	; 0x2c90 <uart_get_char>
	return USARTD0.DATA;
    2c98:	80 91 a0 09 	lds	r24, 0x09A0
}
    2c9c:	08 95       	ret

00002c9e <uart_write_str>:

void uart_write_str(char *str) {
	while (*str) {
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	20 81       	ld	r18, Z
    2ca2:	22 23       	and	r18, r18
    2ca4:	51 f0       	breq	.+20     	; 0x2cba <uart_write_str+0x1c>
    2ca6:	31 96       	adiw	r30, 0x01	; 1

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2ca8:	80 91 a1 09 	lds	r24, 0x09A1
    2cac:	85 ff       	sbrs	r24, 5
    2cae:	fc cf       	rjmp	.-8      	; 0x2ca8 <uart_write_str+0xa>
	USARTD0.DATA = c;
    2cb0:	20 93 a0 09 	sts	0x09A0, r18
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
	return USARTD0.DATA;
}

void uart_write_str(char *str) {
	while (*str) {
    2cb4:	21 91       	ld	r18, Z+
    2cb6:	21 11       	cpse	r18, r1
    2cb8:	f7 cf       	rjmp	.-18     	; 0x2ca8 <uart_write_str+0xa>

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2cba:	80 91 a1 09 	lds	r24, 0x09A1
    2cbe:	85 ff       	sbrs	r24, 5
    2cc0:	fc cf       	rjmp	.-8      	; 0x2cba <uart_write_str+0x1c>
	USARTD0.DATA = c;
    2cc2:	8d e0       	ldi	r24, 0x0D	; 13
    2cc4:	80 93 a0 09 	sts	0x09A0, r24

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2cc8:	80 91 a1 09 	lds	r24, 0x09A1
    2ccc:	85 ff       	sbrs	r24, 5
    2cce:	fc cf       	rjmp	.-8      	; 0x2cc8 <uart_write_str+0x2a>
	USARTD0.DATA = c;
    2cd0:	8a e0       	ldi	r24, 0x0A	; 10
    2cd2:	80 93 a0 09 	sts	0x09A0, r24
    2cd6:	08 95       	ret

00002cd8 <uwrite_hex>:
	uart_put_char('\r');
	uart_put_char('\n');
}

void uwrite_hex(unsigned char n) {
	if(((n>>4) & 15) < 10)
    2cd8:	98 2f       	mov	r25, r24
    2cda:	92 95       	swap	r25
    2cdc:	9f 70       	andi	r25, 0x0F	; 15
    2cde:	29 2f       	mov	r18, r25
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	2a 30       	cpi	r18, 0x0A	; 10
    2ce4:	31 05       	cpc	r19, r1
    2ce6:	54 f5       	brge	.+84     	; 0x2d3c <uwrite_hex+0x64>
	uart_put_char('0' + ((n>>4)&15));
    2ce8:	20 e3       	ldi	r18, 0x30	; 48
    2cea:	29 0f       	add	r18, r25

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2cec:	90 91 a1 09 	lds	r25, 0x09A1
    2cf0:	95 ff       	sbrs	r25, 5
    2cf2:	fc cf       	rjmp	.-8      	; 0x2cec <uwrite_hex+0x14>
	USARTD0.DATA = c;
    2cf4:	20 93 a0 09 	sts	0x09A0, r18
	if(((n>>4) & 15) < 10)
	uart_put_char('0' + ((n>>4)&15));
	else
	uart_put_char('A' + ((n>>4)&15) - 10);
	n <<= 4;
	if(((n>>4) & 15) < 10)
    2cf8:	8f 70       	andi	r24, 0x0F	; 15
    2cfa:	28 2f       	mov	r18, r24
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	2a 30       	cpi	r18, 0x0A	; 10
    2d00:	31 05       	cpc	r19, r1
    2d02:	b4 f4       	brge	.+44     	; 0x2d30 <uwrite_hex+0x58>
	uart_put_char('0' + ((n>>4)&15));
    2d04:	80 5d       	subi	r24, 0xD0	; 208

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2d06:	90 91 a1 09 	lds	r25, 0x09A1
    2d0a:	95 ff       	sbrs	r25, 5
    2d0c:	fc cf       	rjmp	.-8      	; 0x2d06 <uwrite_hex+0x2e>
	USARTD0.DATA = c;
    2d0e:	80 93 a0 09 	sts	0x09A0, r24

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2d12:	80 91 a1 09 	lds	r24, 0x09A1
    2d16:	85 ff       	sbrs	r24, 5
    2d18:	fc cf       	rjmp	.-8      	; 0x2d12 <uwrite_hex+0x3a>
	USARTD0.DATA = c;
    2d1a:	8d e0       	ldi	r24, 0x0D	; 13
    2d1c:	80 93 a0 09 	sts	0x09A0, r24

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2d20:	80 91 a1 09 	lds	r24, 0x09A1
    2d24:	85 ff       	sbrs	r24, 5
    2d26:	fc cf       	rjmp	.-8      	; 0x2d20 <uwrite_hex+0x48>
	USARTD0.DATA = c;
    2d28:	8a e0       	ldi	r24, 0x0A	; 10
    2d2a:	80 93 a0 09 	sts	0x09A0, r24
    2d2e:	08 95       	ret
	uart_put_char('A' + ((n>>4)&15) - 10);
	n <<= 4;
	if(((n>>4) & 15) < 10)
	uart_put_char('0' + ((n>>4)&15));
	else
	uart_put_char('A' + ((n>>4)&15) - 10);
    2d30:	89 5c       	subi	r24, 0xC9	; 201

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2d32:	90 91 a1 09 	lds	r25, 0x09A1
    2d36:	95 ff       	sbrs	r25, 5
    2d38:	fc cf       	rjmp	.-8      	; 0x2d32 <uwrite_hex+0x5a>
    2d3a:	e9 cf       	rjmp	.-46     	; 0x2d0e <uwrite_hex+0x36>

void uwrite_hex(unsigned char n) {
	if(((n>>4) & 15) < 10)
	uart_put_char('0' + ((n>>4)&15));
	else
	uart_put_char('A' + ((n>>4)&15) - 10);
    2d3c:	27 e3       	ldi	r18, 0x37	; 55
    2d3e:	29 0f       	add	r18, r25

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    2d40:	90 91 a1 09 	lds	r25, 0x09A1
    2d44:	95 ff       	sbrs	r25, 5
    2d46:	fc cf       	rjmp	.-8      	; 0x2d40 <uwrite_hex+0x68>
    2d48:	d5 cf       	rjmp	.-86     	; 0x2cf4 <uwrite_hex+0x1c>

00002d4a <__subsf3>:
    2d4a:	50 58       	subi	r21, 0x80	; 128

00002d4c <__addsf3>:
    2d4c:	bb 27       	eor	r27, r27
    2d4e:	aa 27       	eor	r26, r26
    2d50:	0e d0       	rcall	.+28     	; 0x2d6e <__addsf3x>
    2d52:	e5 c0       	rjmp	.+458    	; 0x2f1e <__fp_round>
    2d54:	d6 d0       	rcall	.+428    	; 0x2f02 <__fp_pscA>
    2d56:	30 f0       	brcs	.+12     	; 0x2d64 <__addsf3+0x18>
    2d58:	db d0       	rcall	.+438    	; 0x2f10 <__fp_pscB>
    2d5a:	20 f0       	brcs	.+8      	; 0x2d64 <__addsf3+0x18>
    2d5c:	31 f4       	brne	.+12     	; 0x2d6a <__addsf3+0x1e>
    2d5e:	9f 3f       	cpi	r25, 0xFF	; 255
    2d60:	11 f4       	brne	.+4      	; 0x2d66 <__addsf3+0x1a>
    2d62:	1e f4       	brtc	.+6      	; 0x2d6a <__addsf3+0x1e>
    2d64:	cb c0       	rjmp	.+406    	; 0x2efc <__fp_nan>
    2d66:	0e f4       	brtc	.+2      	; 0x2d6a <__addsf3+0x1e>
    2d68:	e0 95       	com	r30
    2d6a:	e7 fb       	bst	r30, 7
    2d6c:	c1 c0       	rjmp	.+386    	; 0x2ef0 <__fp_inf>

00002d6e <__addsf3x>:
    2d6e:	e9 2f       	mov	r30, r25
    2d70:	e7 d0       	rcall	.+462    	; 0x2f40 <__fp_split3>
    2d72:	80 f3       	brcs	.-32     	; 0x2d54 <__addsf3+0x8>
    2d74:	ba 17       	cp	r27, r26
    2d76:	62 07       	cpc	r22, r18
    2d78:	73 07       	cpc	r23, r19
    2d7a:	84 07       	cpc	r24, r20
    2d7c:	95 07       	cpc	r25, r21
    2d7e:	18 f0       	brcs	.+6      	; 0x2d86 <__addsf3x+0x18>
    2d80:	71 f4       	brne	.+28     	; 0x2d9e <__addsf3x+0x30>
    2d82:	9e f5       	brtc	.+102    	; 0x2dea <__addsf3x+0x7c>
    2d84:	ff c0       	rjmp	.+510    	; 0x2f84 <__fp_zero>
    2d86:	0e f4       	brtc	.+2      	; 0x2d8a <__addsf3x+0x1c>
    2d88:	e0 95       	com	r30
    2d8a:	0b 2e       	mov	r0, r27
    2d8c:	ba 2f       	mov	r27, r26
    2d8e:	a0 2d       	mov	r26, r0
    2d90:	0b 01       	movw	r0, r22
    2d92:	b9 01       	movw	r22, r18
    2d94:	90 01       	movw	r18, r0
    2d96:	0c 01       	movw	r0, r24
    2d98:	ca 01       	movw	r24, r20
    2d9a:	a0 01       	movw	r20, r0
    2d9c:	11 24       	eor	r1, r1
    2d9e:	ff 27       	eor	r31, r31
    2da0:	59 1b       	sub	r21, r25
    2da2:	99 f0       	breq	.+38     	; 0x2dca <__addsf3x+0x5c>
    2da4:	59 3f       	cpi	r21, 0xF9	; 249
    2da6:	50 f4       	brcc	.+20     	; 0x2dbc <__addsf3x+0x4e>
    2da8:	50 3e       	cpi	r21, 0xE0	; 224
    2daa:	68 f1       	brcs	.+90     	; 0x2e06 <__addsf3x+0x98>
    2dac:	1a 16       	cp	r1, r26
    2dae:	f0 40       	sbci	r31, 0x00	; 0
    2db0:	a2 2f       	mov	r26, r18
    2db2:	23 2f       	mov	r18, r19
    2db4:	34 2f       	mov	r19, r20
    2db6:	44 27       	eor	r20, r20
    2db8:	58 5f       	subi	r21, 0xF8	; 248
    2dba:	f3 cf       	rjmp	.-26     	; 0x2da2 <__addsf3x+0x34>
    2dbc:	46 95       	lsr	r20
    2dbe:	37 95       	ror	r19
    2dc0:	27 95       	ror	r18
    2dc2:	a7 95       	ror	r26
    2dc4:	f0 40       	sbci	r31, 0x00	; 0
    2dc6:	53 95       	inc	r21
    2dc8:	c9 f7       	brne	.-14     	; 0x2dbc <__addsf3x+0x4e>
    2dca:	7e f4       	brtc	.+30     	; 0x2dea <__addsf3x+0x7c>
    2dcc:	1f 16       	cp	r1, r31
    2dce:	ba 0b       	sbc	r27, r26
    2dd0:	62 0b       	sbc	r22, r18
    2dd2:	73 0b       	sbc	r23, r19
    2dd4:	84 0b       	sbc	r24, r20
    2dd6:	ba f0       	brmi	.+46     	; 0x2e06 <__addsf3x+0x98>
    2dd8:	91 50       	subi	r25, 0x01	; 1
    2dda:	a1 f0       	breq	.+40     	; 0x2e04 <__addsf3x+0x96>
    2ddc:	ff 0f       	add	r31, r31
    2dde:	bb 1f       	adc	r27, r27
    2de0:	66 1f       	adc	r22, r22
    2de2:	77 1f       	adc	r23, r23
    2de4:	88 1f       	adc	r24, r24
    2de6:	c2 f7       	brpl	.-16     	; 0x2dd8 <__addsf3x+0x6a>
    2de8:	0e c0       	rjmp	.+28     	; 0x2e06 <__addsf3x+0x98>
    2dea:	ba 0f       	add	r27, r26
    2dec:	62 1f       	adc	r22, r18
    2dee:	73 1f       	adc	r23, r19
    2df0:	84 1f       	adc	r24, r20
    2df2:	48 f4       	brcc	.+18     	; 0x2e06 <__addsf3x+0x98>
    2df4:	87 95       	ror	r24
    2df6:	77 95       	ror	r23
    2df8:	67 95       	ror	r22
    2dfa:	b7 95       	ror	r27
    2dfc:	f7 95       	ror	r31
    2dfe:	9e 3f       	cpi	r25, 0xFE	; 254
    2e00:	08 f0       	brcs	.+2      	; 0x2e04 <__addsf3x+0x96>
    2e02:	b3 cf       	rjmp	.-154    	; 0x2d6a <__addsf3+0x1e>
    2e04:	93 95       	inc	r25
    2e06:	88 0f       	add	r24, r24
    2e08:	08 f0       	brcs	.+2      	; 0x2e0c <__addsf3x+0x9e>
    2e0a:	99 27       	eor	r25, r25
    2e0c:	ee 0f       	add	r30, r30
    2e0e:	97 95       	ror	r25
    2e10:	87 95       	ror	r24
    2e12:	08 95       	ret

00002e14 <__fixsfsi>:
    2e14:	04 d0       	rcall	.+8      	; 0x2e1e <__fixunssfsi>
    2e16:	68 94       	set
    2e18:	b1 11       	cpse	r27, r1
    2e1a:	b5 c0       	rjmp	.+362    	; 0x2f86 <__fp_szero>
    2e1c:	08 95       	ret

00002e1e <__fixunssfsi>:
    2e1e:	98 d0       	rcall	.+304    	; 0x2f50 <__fp_splitA>
    2e20:	88 f0       	brcs	.+34     	; 0x2e44 <__fixunssfsi+0x26>
    2e22:	9f 57       	subi	r25, 0x7F	; 127
    2e24:	90 f0       	brcs	.+36     	; 0x2e4a <__fixunssfsi+0x2c>
    2e26:	b9 2f       	mov	r27, r25
    2e28:	99 27       	eor	r25, r25
    2e2a:	b7 51       	subi	r27, 0x17	; 23
    2e2c:	a0 f0       	brcs	.+40     	; 0x2e56 <__fixunssfsi+0x38>
    2e2e:	d1 f0       	breq	.+52     	; 0x2e64 <__fixunssfsi+0x46>
    2e30:	66 0f       	add	r22, r22
    2e32:	77 1f       	adc	r23, r23
    2e34:	88 1f       	adc	r24, r24
    2e36:	99 1f       	adc	r25, r25
    2e38:	1a f0       	brmi	.+6      	; 0x2e40 <__fixunssfsi+0x22>
    2e3a:	ba 95       	dec	r27
    2e3c:	c9 f7       	brne	.-14     	; 0x2e30 <__fixunssfsi+0x12>
    2e3e:	12 c0       	rjmp	.+36     	; 0x2e64 <__fixunssfsi+0x46>
    2e40:	b1 30       	cpi	r27, 0x01	; 1
    2e42:	81 f0       	breq	.+32     	; 0x2e64 <__fixunssfsi+0x46>
    2e44:	9f d0       	rcall	.+318    	; 0x2f84 <__fp_zero>
    2e46:	b1 e0       	ldi	r27, 0x01	; 1
    2e48:	08 95       	ret
    2e4a:	9c c0       	rjmp	.+312    	; 0x2f84 <__fp_zero>
    2e4c:	67 2f       	mov	r22, r23
    2e4e:	78 2f       	mov	r23, r24
    2e50:	88 27       	eor	r24, r24
    2e52:	b8 5f       	subi	r27, 0xF8	; 248
    2e54:	39 f0       	breq	.+14     	; 0x2e64 <__fixunssfsi+0x46>
    2e56:	b9 3f       	cpi	r27, 0xF9	; 249
    2e58:	cc f3       	brlt	.-14     	; 0x2e4c <__fixunssfsi+0x2e>
    2e5a:	86 95       	lsr	r24
    2e5c:	77 95       	ror	r23
    2e5e:	67 95       	ror	r22
    2e60:	b3 95       	inc	r27
    2e62:	d9 f7       	brne	.-10     	; 0x2e5a <__fixunssfsi+0x3c>
    2e64:	3e f4       	brtc	.+14     	; 0x2e74 <__fixunssfsi+0x56>
    2e66:	90 95       	com	r25
    2e68:	80 95       	com	r24
    2e6a:	70 95       	com	r23
    2e6c:	61 95       	neg	r22
    2e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e70:	8f 4f       	sbci	r24, 0xFF	; 255
    2e72:	9f 4f       	sbci	r25, 0xFF	; 255
    2e74:	08 95       	ret

00002e76 <__floatunsisf>:
    2e76:	e8 94       	clt
    2e78:	09 c0       	rjmp	.+18     	; 0x2e8c <__floatsisf+0x12>

00002e7a <__floatsisf>:
    2e7a:	97 fb       	bst	r25, 7
    2e7c:	3e f4       	brtc	.+14     	; 0x2e8c <__floatsisf+0x12>
    2e7e:	90 95       	com	r25
    2e80:	80 95       	com	r24
    2e82:	70 95       	com	r23
    2e84:	61 95       	neg	r22
    2e86:	7f 4f       	sbci	r23, 0xFF	; 255
    2e88:	8f 4f       	sbci	r24, 0xFF	; 255
    2e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e8c:	99 23       	and	r25, r25
    2e8e:	a9 f0       	breq	.+42     	; 0x2eba <__floatsisf+0x40>
    2e90:	f9 2f       	mov	r31, r25
    2e92:	96 e9       	ldi	r25, 0x96	; 150
    2e94:	bb 27       	eor	r27, r27
    2e96:	93 95       	inc	r25
    2e98:	f6 95       	lsr	r31
    2e9a:	87 95       	ror	r24
    2e9c:	77 95       	ror	r23
    2e9e:	67 95       	ror	r22
    2ea0:	b7 95       	ror	r27
    2ea2:	f1 11       	cpse	r31, r1
    2ea4:	f8 cf       	rjmp	.-16     	; 0x2e96 <__floatsisf+0x1c>
    2ea6:	fa f4       	brpl	.+62     	; 0x2ee6 <__floatsisf+0x6c>
    2ea8:	bb 0f       	add	r27, r27
    2eaa:	11 f4       	brne	.+4      	; 0x2eb0 <__floatsisf+0x36>
    2eac:	60 ff       	sbrs	r22, 0
    2eae:	1b c0       	rjmp	.+54     	; 0x2ee6 <__floatsisf+0x6c>
    2eb0:	6f 5f       	subi	r22, 0xFF	; 255
    2eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb4:	8f 4f       	sbci	r24, 0xFF	; 255
    2eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb8:	16 c0       	rjmp	.+44     	; 0x2ee6 <__floatsisf+0x6c>
    2eba:	88 23       	and	r24, r24
    2ebc:	11 f0       	breq	.+4      	; 0x2ec2 <__floatsisf+0x48>
    2ebe:	96 e9       	ldi	r25, 0x96	; 150
    2ec0:	11 c0       	rjmp	.+34     	; 0x2ee4 <__floatsisf+0x6a>
    2ec2:	77 23       	and	r23, r23
    2ec4:	21 f0       	breq	.+8      	; 0x2ece <__floatsisf+0x54>
    2ec6:	9e e8       	ldi	r25, 0x8E	; 142
    2ec8:	87 2f       	mov	r24, r23
    2eca:	76 2f       	mov	r23, r22
    2ecc:	05 c0       	rjmp	.+10     	; 0x2ed8 <__floatsisf+0x5e>
    2ece:	66 23       	and	r22, r22
    2ed0:	71 f0       	breq	.+28     	; 0x2eee <__floatsisf+0x74>
    2ed2:	96 e8       	ldi	r25, 0x86	; 134
    2ed4:	86 2f       	mov	r24, r22
    2ed6:	70 e0       	ldi	r23, 0x00	; 0
    2ed8:	60 e0       	ldi	r22, 0x00	; 0
    2eda:	2a f0       	brmi	.+10     	; 0x2ee6 <__floatsisf+0x6c>
    2edc:	9a 95       	dec	r25
    2ede:	66 0f       	add	r22, r22
    2ee0:	77 1f       	adc	r23, r23
    2ee2:	88 1f       	adc	r24, r24
    2ee4:	da f7       	brpl	.-10     	; 0x2edc <__floatsisf+0x62>
    2ee6:	88 0f       	add	r24, r24
    2ee8:	96 95       	lsr	r25
    2eea:	87 95       	ror	r24
    2eec:	97 f9       	bld	r25, 7
    2eee:	08 95       	ret

00002ef0 <__fp_inf>:
    2ef0:	97 f9       	bld	r25, 7
    2ef2:	9f 67       	ori	r25, 0x7F	; 127
    2ef4:	80 e8       	ldi	r24, 0x80	; 128
    2ef6:	70 e0       	ldi	r23, 0x00	; 0
    2ef8:	60 e0       	ldi	r22, 0x00	; 0
    2efa:	08 95       	ret

00002efc <__fp_nan>:
    2efc:	9f ef       	ldi	r25, 0xFF	; 255
    2efe:	80 ec       	ldi	r24, 0xC0	; 192
    2f00:	08 95       	ret

00002f02 <__fp_pscA>:
    2f02:	00 24       	eor	r0, r0
    2f04:	0a 94       	dec	r0
    2f06:	16 16       	cp	r1, r22
    2f08:	17 06       	cpc	r1, r23
    2f0a:	18 06       	cpc	r1, r24
    2f0c:	09 06       	cpc	r0, r25
    2f0e:	08 95       	ret

00002f10 <__fp_pscB>:
    2f10:	00 24       	eor	r0, r0
    2f12:	0a 94       	dec	r0
    2f14:	12 16       	cp	r1, r18
    2f16:	13 06       	cpc	r1, r19
    2f18:	14 06       	cpc	r1, r20
    2f1a:	05 06       	cpc	r0, r21
    2f1c:	08 95       	ret

00002f1e <__fp_round>:
    2f1e:	09 2e       	mov	r0, r25
    2f20:	03 94       	inc	r0
    2f22:	00 0c       	add	r0, r0
    2f24:	11 f4       	brne	.+4      	; 0x2f2a <__fp_round+0xc>
    2f26:	88 23       	and	r24, r24
    2f28:	52 f0       	brmi	.+20     	; 0x2f3e <__fp_round+0x20>
    2f2a:	bb 0f       	add	r27, r27
    2f2c:	40 f4       	brcc	.+16     	; 0x2f3e <__fp_round+0x20>
    2f2e:	bf 2b       	or	r27, r31
    2f30:	11 f4       	brne	.+4      	; 0x2f36 <__fp_round+0x18>
    2f32:	60 ff       	sbrs	r22, 0
    2f34:	04 c0       	rjmp	.+8      	; 0x2f3e <__fp_round+0x20>
    2f36:	6f 5f       	subi	r22, 0xFF	; 255
    2f38:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3e:	08 95       	ret

00002f40 <__fp_split3>:
    2f40:	57 fd       	sbrc	r21, 7
    2f42:	90 58       	subi	r25, 0x80	; 128
    2f44:	44 0f       	add	r20, r20
    2f46:	55 1f       	adc	r21, r21
    2f48:	59 f0       	breq	.+22     	; 0x2f60 <__fp_splitA+0x10>
    2f4a:	5f 3f       	cpi	r21, 0xFF	; 255
    2f4c:	71 f0       	breq	.+28     	; 0x2f6a <__fp_splitA+0x1a>
    2f4e:	47 95       	ror	r20

00002f50 <__fp_splitA>:
    2f50:	88 0f       	add	r24, r24
    2f52:	97 fb       	bst	r25, 7
    2f54:	99 1f       	adc	r25, r25
    2f56:	61 f0       	breq	.+24     	; 0x2f70 <__fp_splitA+0x20>
    2f58:	9f 3f       	cpi	r25, 0xFF	; 255
    2f5a:	79 f0       	breq	.+30     	; 0x2f7a <__fp_splitA+0x2a>
    2f5c:	87 95       	ror	r24
    2f5e:	08 95       	ret
    2f60:	12 16       	cp	r1, r18
    2f62:	13 06       	cpc	r1, r19
    2f64:	14 06       	cpc	r1, r20
    2f66:	55 1f       	adc	r21, r21
    2f68:	f2 cf       	rjmp	.-28     	; 0x2f4e <__fp_split3+0xe>
    2f6a:	46 95       	lsr	r20
    2f6c:	f1 df       	rcall	.-30     	; 0x2f50 <__fp_splitA>
    2f6e:	08 c0       	rjmp	.+16     	; 0x2f80 <__fp_splitA+0x30>
    2f70:	16 16       	cp	r1, r22
    2f72:	17 06       	cpc	r1, r23
    2f74:	18 06       	cpc	r1, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	f1 cf       	rjmp	.-30     	; 0x2f5c <__fp_splitA+0xc>
    2f7a:	86 95       	lsr	r24
    2f7c:	71 05       	cpc	r23, r1
    2f7e:	61 05       	cpc	r22, r1
    2f80:	08 94       	sec
    2f82:	08 95       	ret

00002f84 <__fp_zero>:
    2f84:	e8 94       	clt

00002f86 <__fp_szero>:
    2f86:	bb 27       	eor	r27, r27
    2f88:	66 27       	eor	r22, r22
    2f8a:	77 27       	eor	r23, r23
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	97 f9       	bld	r25, 7
    2f90:	08 95       	ret

00002f92 <__mulsf3>:
    2f92:	0b d0       	rcall	.+22     	; 0x2faa <__mulsf3x>
    2f94:	c4 cf       	rjmp	.-120    	; 0x2f1e <__fp_round>
    2f96:	b5 df       	rcall	.-150    	; 0x2f02 <__fp_pscA>
    2f98:	28 f0       	brcs	.+10     	; 0x2fa4 <__mulsf3+0x12>
    2f9a:	ba df       	rcall	.-140    	; 0x2f10 <__fp_pscB>
    2f9c:	18 f0       	brcs	.+6      	; 0x2fa4 <__mulsf3+0x12>
    2f9e:	95 23       	and	r25, r21
    2fa0:	09 f0       	breq	.+2      	; 0x2fa4 <__mulsf3+0x12>
    2fa2:	a6 cf       	rjmp	.-180    	; 0x2ef0 <__fp_inf>
    2fa4:	ab cf       	rjmp	.-170    	; 0x2efc <__fp_nan>
    2fa6:	11 24       	eor	r1, r1
    2fa8:	ee cf       	rjmp	.-36     	; 0x2f86 <__fp_szero>

00002faa <__mulsf3x>:
    2faa:	ca df       	rcall	.-108    	; 0x2f40 <__fp_split3>
    2fac:	a0 f3       	brcs	.-24     	; 0x2f96 <__mulsf3+0x4>

00002fae <__mulsf3_pse>:
    2fae:	95 9f       	mul	r25, r21
    2fb0:	d1 f3       	breq	.-12     	; 0x2fa6 <__mulsf3+0x14>
    2fb2:	95 0f       	add	r25, r21
    2fb4:	50 e0       	ldi	r21, 0x00	; 0
    2fb6:	55 1f       	adc	r21, r21
    2fb8:	62 9f       	mul	r22, r18
    2fba:	f0 01       	movw	r30, r0
    2fbc:	72 9f       	mul	r23, r18
    2fbe:	bb 27       	eor	r27, r27
    2fc0:	f0 0d       	add	r31, r0
    2fc2:	b1 1d       	adc	r27, r1
    2fc4:	63 9f       	mul	r22, r19
    2fc6:	aa 27       	eor	r26, r26
    2fc8:	f0 0d       	add	r31, r0
    2fca:	b1 1d       	adc	r27, r1
    2fcc:	aa 1f       	adc	r26, r26
    2fce:	64 9f       	mul	r22, r20
    2fd0:	66 27       	eor	r22, r22
    2fd2:	b0 0d       	add	r27, r0
    2fd4:	a1 1d       	adc	r26, r1
    2fd6:	66 1f       	adc	r22, r22
    2fd8:	82 9f       	mul	r24, r18
    2fda:	22 27       	eor	r18, r18
    2fdc:	b0 0d       	add	r27, r0
    2fde:	a1 1d       	adc	r26, r1
    2fe0:	62 1f       	adc	r22, r18
    2fe2:	73 9f       	mul	r23, r19
    2fe4:	b0 0d       	add	r27, r0
    2fe6:	a1 1d       	adc	r26, r1
    2fe8:	62 1f       	adc	r22, r18
    2fea:	83 9f       	mul	r24, r19
    2fec:	a0 0d       	add	r26, r0
    2fee:	61 1d       	adc	r22, r1
    2ff0:	22 1f       	adc	r18, r18
    2ff2:	74 9f       	mul	r23, r20
    2ff4:	33 27       	eor	r19, r19
    2ff6:	a0 0d       	add	r26, r0
    2ff8:	61 1d       	adc	r22, r1
    2ffa:	23 1f       	adc	r18, r19
    2ffc:	84 9f       	mul	r24, r20
    2ffe:	60 0d       	add	r22, r0
    3000:	21 1d       	adc	r18, r1
    3002:	82 2f       	mov	r24, r18
    3004:	76 2f       	mov	r23, r22
    3006:	6a 2f       	mov	r22, r26
    3008:	11 24       	eor	r1, r1
    300a:	9f 57       	subi	r25, 0x7F	; 127
    300c:	50 40       	sbci	r21, 0x00	; 0
    300e:	8a f0       	brmi	.+34     	; 0x3032 <__stack+0x33>
    3010:	e1 f0       	breq	.+56     	; 0x304a <__stack+0x4b>
    3012:	88 23       	and	r24, r24
    3014:	4a f0       	brmi	.+18     	; 0x3028 <__stack+0x29>
    3016:	ee 0f       	add	r30, r30
    3018:	ff 1f       	adc	r31, r31
    301a:	bb 1f       	adc	r27, r27
    301c:	66 1f       	adc	r22, r22
    301e:	77 1f       	adc	r23, r23
    3020:	88 1f       	adc	r24, r24
    3022:	91 50       	subi	r25, 0x01	; 1
    3024:	50 40       	sbci	r21, 0x00	; 0
    3026:	a9 f7       	brne	.-22     	; 0x3012 <__stack+0x13>
    3028:	9e 3f       	cpi	r25, 0xFE	; 254
    302a:	51 05       	cpc	r21, r1
    302c:	70 f0       	brcs	.+28     	; 0x304a <__stack+0x4b>
    302e:	60 cf       	rjmp	.-320    	; 0x2ef0 <__fp_inf>
    3030:	aa cf       	rjmp	.-172    	; 0x2f86 <__fp_szero>
    3032:	5f 3f       	cpi	r21, 0xFF	; 255
    3034:	ec f3       	brlt	.-6      	; 0x3030 <__stack+0x31>
    3036:	98 3e       	cpi	r25, 0xE8	; 232
    3038:	dc f3       	brlt	.-10     	; 0x3030 <__stack+0x31>
    303a:	86 95       	lsr	r24
    303c:	77 95       	ror	r23
    303e:	67 95       	ror	r22
    3040:	b7 95       	ror	r27
    3042:	f7 95       	ror	r31
    3044:	e7 95       	ror	r30
    3046:	9f 5f       	subi	r25, 0xFF	; 255
    3048:	c1 f7       	brne	.-16     	; 0x303a <__stack+0x3b>
    304a:	fe 2b       	or	r31, r30
    304c:	88 0f       	add	r24, r24
    304e:	91 1d       	adc	r25, r1
    3050:	96 95       	lsr	r25
    3052:	87 95       	ror	r24
    3054:	97 f9       	bld	r25, 7
    3056:	08 95       	ret

00003058 <__divmodhi4>:
    3058:	97 fb       	bst	r25, 7
    305a:	07 2e       	mov	r0, r23
    305c:	16 f4       	brtc	.+4      	; 0x3062 <__divmodhi4+0xa>
    305e:	00 94       	com	r0
    3060:	06 d0       	rcall	.+12     	; 0x306e <__divmodhi4_neg1>
    3062:	77 fd       	sbrc	r23, 7
    3064:	08 d0       	rcall	.+16     	; 0x3076 <__divmodhi4_neg2>
    3066:	1a d0       	rcall	.+52     	; 0x309c <__udivmodhi4>
    3068:	07 fc       	sbrc	r0, 7
    306a:	05 d0       	rcall	.+10     	; 0x3076 <__divmodhi4_neg2>
    306c:	3e f4       	brtc	.+14     	; 0x307c <__divmodhi4_exit>

0000306e <__divmodhi4_neg1>:
    306e:	90 95       	com	r25
    3070:	81 95       	neg	r24
    3072:	9f 4f       	sbci	r25, 0xFF	; 255
    3074:	08 95       	ret

00003076 <__divmodhi4_neg2>:
    3076:	70 95       	com	r23
    3078:	61 95       	neg	r22
    307a:	7f 4f       	sbci	r23, 0xFF	; 255

0000307c <__divmodhi4_exit>:
    307c:	08 95       	ret

0000307e <__umulhisi3>:
    307e:	a2 9f       	mul	r26, r18
    3080:	b0 01       	movw	r22, r0
    3082:	b3 9f       	mul	r27, r19
    3084:	c0 01       	movw	r24, r0
    3086:	a3 9f       	mul	r26, r19
    3088:	70 0d       	add	r23, r0
    308a:	81 1d       	adc	r24, r1
    308c:	11 24       	eor	r1, r1
    308e:	91 1d       	adc	r25, r1
    3090:	b2 9f       	mul	r27, r18
    3092:	70 0d       	add	r23, r0
    3094:	81 1d       	adc	r24, r1
    3096:	11 24       	eor	r1, r1
    3098:	91 1d       	adc	r25, r1
    309a:	08 95       	ret

0000309c <__udivmodhi4>:
    309c:	aa 1b       	sub	r26, r26
    309e:	bb 1b       	sub	r27, r27
    30a0:	51 e1       	ldi	r21, 0x11	; 17
    30a2:	07 c0       	rjmp	.+14     	; 0x30b2 <__udivmodhi4_ep>

000030a4 <__udivmodhi4_loop>:
    30a4:	aa 1f       	adc	r26, r26
    30a6:	bb 1f       	adc	r27, r27
    30a8:	a6 17       	cp	r26, r22
    30aa:	b7 07       	cpc	r27, r23
    30ac:	10 f0       	brcs	.+4      	; 0x30b2 <__udivmodhi4_ep>
    30ae:	a6 1b       	sub	r26, r22
    30b0:	b7 0b       	sbc	r27, r23

000030b2 <__udivmodhi4_ep>:
    30b2:	88 1f       	adc	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	5a 95       	dec	r21
    30b8:	a9 f7       	brne	.-22     	; 0x30a4 <__udivmodhi4_loop>
    30ba:	80 95       	com	r24
    30bc:	90 95       	com	r25
    30be:	bc 01       	movw	r22, r24
    30c0:	cd 01       	movw	r24, r26
    30c2:	08 95       	ret

000030c4 <atoi>:
    30c4:	fc 01       	movw	r30, r24
    30c6:	88 27       	eor	r24, r24
    30c8:	99 27       	eor	r25, r25
    30ca:	e8 94       	clt
    30cc:	21 91       	ld	r18, Z+
    30ce:	20 32       	cpi	r18, 0x20	; 32
    30d0:	e9 f3       	breq	.-6      	; 0x30cc <atoi+0x8>
    30d2:	29 30       	cpi	r18, 0x09	; 9
    30d4:	10 f0       	brcs	.+4      	; 0x30da <atoi+0x16>
    30d6:	2e 30       	cpi	r18, 0x0E	; 14
    30d8:	c8 f3       	brcs	.-14     	; 0x30cc <atoi+0x8>
    30da:	2b 32       	cpi	r18, 0x2B	; 43
    30dc:	39 f0       	breq	.+14     	; 0x30ec <atoi+0x28>
    30de:	2d 32       	cpi	r18, 0x2D	; 45
    30e0:	31 f4       	brne	.+12     	; 0x30ee <atoi+0x2a>
    30e2:	68 94       	set
    30e4:	03 c0       	rjmp	.+6      	; 0x30ec <atoi+0x28>
    30e6:	8b d0       	rcall	.+278    	; 0x31fe <__mulhi_const_10>
    30e8:	82 0f       	add	r24, r18
    30ea:	91 1d       	adc	r25, r1
    30ec:	21 91       	ld	r18, Z+
    30ee:	20 53       	subi	r18, 0x30	; 48
    30f0:	2a 30       	cpi	r18, 0x0A	; 10
    30f2:	c8 f3       	brcs	.-14     	; 0x30e6 <atoi+0x22>
    30f4:	1e f4       	brtc	.+6      	; 0x30fc <atoi+0x38>
    30f6:	90 95       	com	r25
    30f8:	81 95       	neg	r24
    30fa:	9f 4f       	sbci	r25, 0xFF	; 255
    30fc:	08 95       	ret

000030fe <strtok>:
    30fe:	48 ec       	ldi	r20, 0xC8	; 200
    3100:	55 e2       	ldi	r21, 0x25	; 37
    3102:	42 c0       	rjmp	.+132    	; 0x3188 <strtok_r>

00003104 <memset>:
    3104:	dc 01       	movw	r26, r24
    3106:	01 c0       	rjmp	.+2      	; 0x310a <memset+0x6>
    3108:	6d 93       	st	X+, r22
    310a:	41 50       	subi	r20, 0x01	; 1
    310c:	50 40       	sbci	r21, 0x00	; 0
    310e:	e0 f7       	brcc	.-8      	; 0x3108 <memset+0x4>
    3110:	08 95       	ret

00003112 <strchr>:
    3112:	fc 01       	movw	r30, r24
    3114:	81 91       	ld	r24, Z+
    3116:	86 17       	cp	r24, r22
    3118:	21 f0       	breq	.+8      	; 0x3122 <strchr+0x10>
    311a:	88 23       	and	r24, r24
    311c:	d9 f7       	brne	.-10     	; 0x3114 <strchr+0x2>
    311e:	99 27       	eor	r25, r25
    3120:	08 95       	ret
    3122:	31 97       	sbiw	r30, 0x01	; 1
    3124:	cf 01       	movw	r24, r30
    3126:	08 95       	ret

00003128 <strcpy>:
    3128:	fb 01       	movw	r30, r22
    312a:	dc 01       	movw	r26, r24
    312c:	01 90       	ld	r0, Z+
    312e:	0d 92       	st	X+, r0
    3130:	00 20       	and	r0, r0
    3132:	e1 f7       	brne	.-8      	; 0x312c <strcpy+0x4>
    3134:	08 95       	ret

00003136 <strncpy>:
    3136:	fb 01       	movw	r30, r22
    3138:	dc 01       	movw	r26, r24
    313a:	41 50       	subi	r20, 0x01	; 1
    313c:	50 40       	sbci	r21, 0x00	; 0
    313e:	48 f0       	brcs	.+18     	; 0x3152 <strncpy+0x1c>
    3140:	01 90       	ld	r0, Z+
    3142:	0d 92       	st	X+, r0
    3144:	00 20       	and	r0, r0
    3146:	c9 f7       	brne	.-14     	; 0x313a <strncpy+0x4>
    3148:	01 c0       	rjmp	.+2      	; 0x314c <strncpy+0x16>
    314a:	1d 92       	st	X+, r1
    314c:	41 50       	subi	r20, 0x01	; 1
    314e:	50 40       	sbci	r21, 0x00	; 0
    3150:	e0 f7       	brcc	.-8      	; 0x314a <strncpy+0x14>
    3152:	08 95       	ret

00003154 <strstr>:
    3154:	fb 01       	movw	r30, r22
    3156:	51 91       	ld	r21, Z+
    3158:	55 23       	and	r21, r21
    315a:	a9 f0       	breq	.+42     	; 0x3186 <strstr+0x32>
    315c:	bf 01       	movw	r22, r30
    315e:	dc 01       	movw	r26, r24
    3160:	4d 91       	ld	r20, X+
    3162:	45 17       	cp	r20, r21
    3164:	41 11       	cpse	r20, r1
    3166:	e1 f7       	brne	.-8      	; 0x3160 <strstr+0xc>
    3168:	59 f4       	brne	.+22     	; 0x3180 <strstr+0x2c>
    316a:	cd 01       	movw	r24, r26
    316c:	01 90       	ld	r0, Z+
    316e:	00 20       	and	r0, r0
    3170:	49 f0       	breq	.+18     	; 0x3184 <strstr+0x30>
    3172:	4d 91       	ld	r20, X+
    3174:	40 15       	cp	r20, r0
    3176:	41 11       	cpse	r20, r1
    3178:	c9 f3       	breq	.-14     	; 0x316c <strstr+0x18>
    317a:	fb 01       	movw	r30, r22
    317c:	41 11       	cpse	r20, r1
    317e:	ef cf       	rjmp	.-34     	; 0x315e <strstr+0xa>
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	08 95       	ret

00003188 <strtok_r>:
    3188:	fa 01       	movw	r30, r20
    318a:	a1 91       	ld	r26, Z+
    318c:	b0 81       	ld	r27, Z
    318e:	00 97       	sbiw	r24, 0x00	; 0
    3190:	19 f4       	brne	.+6      	; 0x3198 <strtok_r+0x10>
    3192:	10 97       	sbiw	r26, 0x00	; 0
    3194:	e1 f0       	breq	.+56     	; 0x31ce <strtok_r+0x46>
    3196:	cd 01       	movw	r24, r26
    3198:	dc 01       	movw	r26, r24
    319a:	cd 01       	movw	r24, r26
    319c:	0d 90       	ld	r0, X+
    319e:	00 20       	and	r0, r0
    31a0:	11 f4       	brne	.+4      	; 0x31a6 <strtok_r+0x1e>
    31a2:	c0 01       	movw	r24, r0
    31a4:	13 c0       	rjmp	.+38     	; 0x31cc <strtok_r+0x44>
    31a6:	fb 01       	movw	r30, r22
    31a8:	21 91       	ld	r18, Z+
    31aa:	22 23       	and	r18, r18
    31ac:	19 f0       	breq	.+6      	; 0x31b4 <strtok_r+0x2c>
    31ae:	20 15       	cp	r18, r0
    31b0:	d9 f7       	brne	.-10     	; 0x31a8 <strtok_r+0x20>
    31b2:	f3 cf       	rjmp	.-26     	; 0x319a <strtok_r+0x12>
    31b4:	fb 01       	movw	r30, r22
    31b6:	21 91       	ld	r18, Z+
    31b8:	20 15       	cp	r18, r0
    31ba:	19 f4       	brne	.+6      	; 0x31c2 <strtok_r+0x3a>
    31bc:	1e 92       	st	-X, r1
    31be:	11 96       	adiw	r26, 0x01	; 1
    31c0:	06 c0       	rjmp	.+12     	; 0x31ce <strtok_r+0x46>
    31c2:	22 23       	and	r18, r18
    31c4:	c1 f7       	brne	.-16     	; 0x31b6 <strtok_r+0x2e>
    31c6:	0d 90       	ld	r0, X+
    31c8:	00 20       	and	r0, r0
    31ca:	a1 f7       	brne	.-24     	; 0x31b4 <strtok_r+0x2c>
    31cc:	d0 01       	movw	r26, r0
    31ce:	fa 01       	movw	r30, r20
    31d0:	a1 93       	st	Z+, r26
    31d2:	b0 83       	st	Z, r27
    31d4:	08 95       	ret

000031d6 <itoa>:
    31d6:	45 32       	cpi	r20, 0x25	; 37
    31d8:	51 05       	cpc	r21, r1
    31da:	18 f4       	brcc	.+6      	; 0x31e2 <itoa+0xc>
    31dc:	42 30       	cpi	r20, 0x02	; 2
    31de:	08 f0       	brcs	.+2      	; 0x31e2 <itoa+0xc>
    31e0:	04 c0       	rjmp	.+8      	; 0x31ea <__itoa_ncheck>
    31e2:	fb 01       	movw	r30, r22
    31e4:	10 82       	st	Z, r1
    31e6:	cb 01       	movw	r24, r22
    31e8:	08 95       	ret

000031ea <__itoa_ncheck>:
    31ea:	bb 27       	eor	r27, r27
    31ec:	4a 30       	cpi	r20, 0x0A	; 10
    31ee:	31 f4       	brne	.+12     	; 0x31fc <__itoa_ncheck+0x12>
    31f0:	99 23       	and	r25, r25
    31f2:	22 f4       	brpl	.+8      	; 0x31fc <__itoa_ncheck+0x12>
    31f4:	bd e2       	ldi	r27, 0x2D	; 45
    31f6:	90 95       	com	r25
    31f8:	81 95       	neg	r24
    31fa:	9f 4f       	sbci	r25, 0xFF	; 255
    31fc:	09 c0       	rjmp	.+18     	; 0x3210 <__utoa_common>

000031fe <__mulhi_const_10>:
    31fe:	7a e0       	ldi	r23, 0x0A	; 10
    3200:	97 9f       	mul	r25, r23
    3202:	90 2d       	mov	r25, r0
    3204:	87 9f       	mul	r24, r23
    3206:	80 2d       	mov	r24, r0
    3208:	91 0d       	add	r25, r1
    320a:	11 24       	eor	r1, r1
    320c:	08 95       	ret

0000320e <__utoa_ncheck>:
    320e:	bb 27       	eor	r27, r27

00003210 <__utoa_common>:
    3210:	fb 01       	movw	r30, r22
    3212:	55 27       	eor	r21, r21
    3214:	aa 27       	eor	r26, r26
    3216:	88 0f       	add	r24, r24
    3218:	99 1f       	adc	r25, r25
    321a:	aa 1f       	adc	r26, r26
    321c:	a4 17       	cp	r26, r20
    321e:	10 f0       	brcs	.+4      	; 0x3224 <__utoa_common+0x14>
    3220:	a4 1b       	sub	r26, r20
    3222:	83 95       	inc	r24
    3224:	50 51       	subi	r21, 0x10	; 16
    3226:	b9 f7       	brne	.-18     	; 0x3216 <__utoa_common+0x6>
    3228:	a0 5d       	subi	r26, 0xD0	; 208
    322a:	aa 33       	cpi	r26, 0x3A	; 58
    322c:	08 f0       	brcs	.+2      	; 0x3230 <__utoa_common+0x20>
    322e:	a9 5d       	subi	r26, 0xD9	; 217
    3230:	a1 93       	st	Z+, r26
    3232:	00 97       	sbiw	r24, 0x00	; 0
    3234:	79 f7       	brne	.-34     	; 0x3214 <__utoa_common+0x4>
    3236:	b1 11       	cpse	r27, r1
    3238:	b1 93       	st	Z+, r27
    323a:	11 92       	st	Z+, r1
    323c:	cb 01       	movw	r24, r22
    323e:	53 c2       	rjmp	.+1190   	; 0x36e6 <strrev>

00003240 <puts>:
    3240:	0f 93       	push	r16
    3242:	1f 93       	push	r17
    3244:	cf 93       	push	r28
    3246:	df 93       	push	r29
    3248:	e0 91 5d 27 	lds	r30, 0x275D
    324c:	f0 91 5e 27 	lds	r31, 0x275E
    3250:	23 81       	ldd	r18, Z+3	; 0x03
    3252:	21 ff       	sbrs	r18, 1
    3254:	1b c0       	rjmp	.+54     	; 0x328c <puts+0x4c>
    3256:	ec 01       	movw	r28, r24
    3258:	00 e0       	ldi	r16, 0x00	; 0
    325a:	10 e0       	ldi	r17, 0x00	; 0
    325c:	89 91       	ld	r24, Y+
    325e:	60 91 5d 27 	lds	r22, 0x275D
    3262:	70 91 5e 27 	lds	r23, 0x275E
    3266:	db 01       	movw	r26, r22
    3268:	18 96       	adiw	r26, 0x08	; 8
    326a:	ed 91       	ld	r30, X+
    326c:	fc 91       	ld	r31, X
    326e:	19 97       	sbiw	r26, 0x09	; 9
    3270:	88 23       	and	r24, r24
    3272:	31 f0       	breq	.+12     	; 0x3280 <puts+0x40>
    3274:	09 95       	icall
    3276:	89 2b       	or	r24, r25
    3278:	89 f3       	breq	.-30     	; 0x325c <puts+0x1c>
    327a:	0f ef       	ldi	r16, 0xFF	; 255
    327c:	1f ef       	ldi	r17, 0xFF	; 255
    327e:	ee cf       	rjmp	.-36     	; 0x325c <puts+0x1c>
    3280:	8a e0       	ldi	r24, 0x0A	; 10
    3282:	09 95       	icall
    3284:	89 2b       	or	r24, r25
    3286:	11 f4       	brne	.+4      	; 0x328c <puts+0x4c>
    3288:	c8 01       	movw	r24, r16
    328a:	02 c0       	rjmp	.+4      	; 0x3290 <puts+0x50>
    328c:	8f ef       	ldi	r24, 0xFF	; 255
    328e:	9f ef       	ldi	r25, 0xFF	; 255
    3290:	df 91       	pop	r29
    3292:	cf 91       	pop	r28
    3294:	1f 91       	pop	r17
    3296:	0f 91       	pop	r16
    3298:	08 95       	ret

0000329a <sprintf>:
    329a:	0f 93       	push	r16
    329c:	1f 93       	push	r17
    329e:	cf 93       	push	r28
    32a0:	df 93       	push	r29
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
    32a6:	2e 97       	sbiw	r28, 0x0e	; 14
    32a8:	cd bf       	out	0x3d, r28	; 61
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0d 89       	ldd	r16, Y+21	; 0x15
    32ae:	1e 89       	ldd	r17, Y+22	; 0x16
    32b0:	86 e0       	ldi	r24, 0x06	; 6
    32b2:	8c 83       	std	Y+4, r24	; 0x04
    32b4:	09 83       	std	Y+1, r16	; 0x01
    32b6:	1a 83       	std	Y+2, r17	; 0x02
    32b8:	8f ef       	ldi	r24, 0xFF	; 255
    32ba:	9f e7       	ldi	r25, 0x7F	; 127
    32bc:	8d 83       	std	Y+5, r24	; 0x05
    32be:	9e 83       	std	Y+6, r25	; 0x06
    32c0:	ae 01       	movw	r20, r28
    32c2:	47 5e       	subi	r20, 0xE7	; 231
    32c4:	5f 4f       	sbci	r21, 0xFF	; 255
    32c6:	6f 89       	ldd	r22, Y+23	; 0x17
    32c8:	78 8d       	ldd	r23, Y+24	; 0x18
    32ca:	ce 01       	movw	r24, r28
    32cc:	01 96       	adiw	r24, 0x01	; 1
    32ce:	0d d0       	rcall	.+26     	; 0x32ea <vfprintf>
    32d0:	ef 81       	ldd	r30, Y+7	; 0x07
    32d2:	f8 85       	ldd	r31, Y+8	; 0x08
    32d4:	e0 0f       	add	r30, r16
    32d6:	f1 1f       	adc	r31, r17
    32d8:	10 82       	st	Z, r1
    32da:	2e 96       	adiw	r28, 0x0e	; 14
    32dc:	cd bf       	out	0x3d, r28	; 61
    32de:	de bf       	out	0x3e, r29	; 62
    32e0:	df 91       	pop	r29
    32e2:	cf 91       	pop	r28
    32e4:	1f 91       	pop	r17
    32e6:	0f 91       	pop	r16
    32e8:	08 95       	ret

000032ea <vfprintf>:
    32ea:	2f 92       	push	r2
    32ec:	3f 92       	push	r3
    32ee:	4f 92       	push	r4
    32f0:	5f 92       	push	r5
    32f2:	6f 92       	push	r6
    32f4:	7f 92       	push	r7
    32f6:	8f 92       	push	r8
    32f8:	9f 92       	push	r9
    32fa:	af 92       	push	r10
    32fc:	bf 92       	push	r11
    32fe:	cf 92       	push	r12
    3300:	df 92       	push	r13
    3302:	ef 92       	push	r14
    3304:	ff 92       	push	r15
    3306:	0f 93       	push	r16
    3308:	1f 93       	push	r17
    330a:	cf 93       	push	r28
    330c:	df 93       	push	r29
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	2c 97       	sbiw	r28, 0x0c	; 12
    3314:	cd bf       	out	0x3d, r28	; 61
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	7c 01       	movw	r14, r24
    331a:	6b 01       	movw	r12, r22
    331c:	8a 01       	movw	r16, r20
    331e:	fc 01       	movw	r30, r24
    3320:	16 82       	std	Z+6, r1	; 0x06
    3322:	17 82       	std	Z+7, r1	; 0x07
    3324:	83 81       	ldd	r24, Z+3	; 0x03
    3326:	81 ff       	sbrs	r24, 1
    3328:	b0 c1       	rjmp	.+864    	; 0x368a <vfprintf+0x3a0>
    332a:	ce 01       	movw	r24, r28
    332c:	01 96       	adiw	r24, 0x01	; 1
    332e:	4c 01       	movw	r8, r24
    3330:	f7 01       	movw	r30, r14
    3332:	93 81       	ldd	r25, Z+3	; 0x03
    3334:	f6 01       	movw	r30, r12
    3336:	93 fd       	sbrc	r25, 3
    3338:	85 91       	lpm	r24, Z+
    333a:	93 ff       	sbrs	r25, 3
    333c:	81 91       	ld	r24, Z+
    333e:	6f 01       	movw	r12, r30
    3340:	88 23       	and	r24, r24
    3342:	09 f4       	brne	.+2      	; 0x3346 <vfprintf+0x5c>
    3344:	9e c1       	rjmp	.+828    	; 0x3682 <vfprintf+0x398>
    3346:	85 32       	cpi	r24, 0x25	; 37
    3348:	39 f4       	brne	.+14     	; 0x3358 <vfprintf+0x6e>
    334a:	93 fd       	sbrc	r25, 3
    334c:	85 91       	lpm	r24, Z+
    334e:	93 ff       	sbrs	r25, 3
    3350:	81 91       	ld	r24, Z+
    3352:	6f 01       	movw	r12, r30
    3354:	85 32       	cpi	r24, 0x25	; 37
    3356:	21 f4       	brne	.+8      	; 0x3360 <vfprintf+0x76>
    3358:	b7 01       	movw	r22, r14
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	d4 d1       	rcall	.+936    	; 0x3706 <fputc>
    335e:	e8 cf       	rjmp	.-48     	; 0x3330 <vfprintf+0x46>
    3360:	51 2c       	mov	r5, r1
    3362:	31 2c       	mov	r3, r1
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	20 32       	cpi	r18, 0x20	; 32
    3368:	a0 f4       	brcc	.+40     	; 0x3392 <vfprintf+0xa8>
    336a:	8b 32       	cpi	r24, 0x2B	; 43
    336c:	69 f0       	breq	.+26     	; 0x3388 <vfprintf+0x9e>
    336e:	30 f4       	brcc	.+12     	; 0x337c <vfprintf+0x92>
    3370:	80 32       	cpi	r24, 0x20	; 32
    3372:	59 f0       	breq	.+22     	; 0x338a <vfprintf+0xa0>
    3374:	83 32       	cpi	r24, 0x23	; 35
    3376:	69 f4       	brne	.+26     	; 0x3392 <vfprintf+0xa8>
    3378:	20 61       	ori	r18, 0x10	; 16
    337a:	2c c0       	rjmp	.+88     	; 0x33d4 <vfprintf+0xea>
    337c:	8d 32       	cpi	r24, 0x2D	; 45
    337e:	39 f0       	breq	.+14     	; 0x338e <vfprintf+0xa4>
    3380:	80 33       	cpi	r24, 0x30	; 48
    3382:	39 f4       	brne	.+14     	; 0x3392 <vfprintf+0xa8>
    3384:	21 60       	ori	r18, 0x01	; 1
    3386:	26 c0       	rjmp	.+76     	; 0x33d4 <vfprintf+0xea>
    3388:	22 60       	ori	r18, 0x02	; 2
    338a:	24 60       	ori	r18, 0x04	; 4
    338c:	23 c0       	rjmp	.+70     	; 0x33d4 <vfprintf+0xea>
    338e:	28 60       	ori	r18, 0x08	; 8
    3390:	21 c0       	rjmp	.+66     	; 0x33d4 <vfprintf+0xea>
    3392:	27 fd       	sbrc	r18, 7
    3394:	27 c0       	rjmp	.+78     	; 0x33e4 <vfprintf+0xfa>
    3396:	30 ed       	ldi	r19, 0xD0	; 208
    3398:	38 0f       	add	r19, r24
    339a:	3a 30       	cpi	r19, 0x0A	; 10
    339c:	78 f4       	brcc	.+30     	; 0x33bc <vfprintf+0xd2>
    339e:	26 ff       	sbrs	r18, 6
    33a0:	06 c0       	rjmp	.+12     	; 0x33ae <vfprintf+0xc4>
    33a2:	fa e0       	ldi	r31, 0x0A	; 10
    33a4:	5f 9e       	mul	r5, r31
    33a6:	30 0d       	add	r19, r0
    33a8:	11 24       	eor	r1, r1
    33aa:	53 2e       	mov	r5, r19
    33ac:	13 c0       	rjmp	.+38     	; 0x33d4 <vfprintf+0xea>
    33ae:	8a e0       	ldi	r24, 0x0A	; 10
    33b0:	38 9e       	mul	r3, r24
    33b2:	30 0d       	add	r19, r0
    33b4:	11 24       	eor	r1, r1
    33b6:	33 2e       	mov	r3, r19
    33b8:	20 62       	ori	r18, 0x20	; 32
    33ba:	0c c0       	rjmp	.+24     	; 0x33d4 <vfprintf+0xea>
    33bc:	8e 32       	cpi	r24, 0x2E	; 46
    33be:	21 f4       	brne	.+8      	; 0x33c8 <vfprintf+0xde>
    33c0:	26 fd       	sbrc	r18, 6
    33c2:	5f c1       	rjmp	.+702    	; 0x3682 <vfprintf+0x398>
    33c4:	20 64       	ori	r18, 0x40	; 64
    33c6:	06 c0       	rjmp	.+12     	; 0x33d4 <vfprintf+0xea>
    33c8:	8c 36       	cpi	r24, 0x6C	; 108
    33ca:	11 f4       	brne	.+4      	; 0x33d0 <vfprintf+0xe6>
    33cc:	20 68       	ori	r18, 0x80	; 128
    33ce:	02 c0       	rjmp	.+4      	; 0x33d4 <vfprintf+0xea>
    33d0:	88 36       	cpi	r24, 0x68	; 104
    33d2:	41 f4       	brne	.+16     	; 0x33e4 <vfprintf+0xfa>
    33d4:	f6 01       	movw	r30, r12
    33d6:	93 fd       	sbrc	r25, 3
    33d8:	85 91       	lpm	r24, Z+
    33da:	93 ff       	sbrs	r25, 3
    33dc:	81 91       	ld	r24, Z+
    33de:	6f 01       	movw	r12, r30
    33e0:	81 11       	cpse	r24, r1
    33e2:	c1 cf       	rjmp	.-126    	; 0x3366 <vfprintf+0x7c>
    33e4:	98 2f       	mov	r25, r24
    33e6:	9f 7d       	andi	r25, 0xDF	; 223
    33e8:	95 54       	subi	r25, 0x45	; 69
    33ea:	93 30       	cpi	r25, 0x03	; 3
    33ec:	28 f4       	brcc	.+10     	; 0x33f8 <vfprintf+0x10e>
    33ee:	0c 5f       	subi	r16, 0xFC	; 252
    33f0:	1f 4f       	sbci	r17, 0xFF	; 255
    33f2:	ff e3       	ldi	r31, 0x3F	; 63
    33f4:	f9 83       	std	Y+1, r31	; 0x01
    33f6:	0d c0       	rjmp	.+26     	; 0x3412 <vfprintf+0x128>
    33f8:	83 36       	cpi	r24, 0x63	; 99
    33fa:	31 f0       	breq	.+12     	; 0x3408 <vfprintf+0x11e>
    33fc:	83 37       	cpi	r24, 0x73	; 115
    33fe:	71 f0       	breq	.+28     	; 0x341c <vfprintf+0x132>
    3400:	83 35       	cpi	r24, 0x53	; 83
    3402:	09 f0       	breq	.+2      	; 0x3406 <vfprintf+0x11c>
    3404:	57 c0       	rjmp	.+174    	; 0x34b4 <vfprintf+0x1ca>
    3406:	21 c0       	rjmp	.+66     	; 0x344a <vfprintf+0x160>
    3408:	f8 01       	movw	r30, r16
    340a:	80 81       	ld	r24, Z
    340c:	89 83       	std	Y+1, r24	; 0x01
    340e:	0e 5f       	subi	r16, 0xFE	; 254
    3410:	1f 4f       	sbci	r17, 0xFF	; 255
    3412:	44 24       	eor	r4, r4
    3414:	43 94       	inc	r4
    3416:	51 2c       	mov	r5, r1
    3418:	54 01       	movw	r10, r8
    341a:	14 c0       	rjmp	.+40     	; 0x3444 <vfprintf+0x15a>
    341c:	38 01       	movw	r6, r16
    341e:	f2 e0       	ldi	r31, 0x02	; 2
    3420:	6f 0e       	add	r6, r31
    3422:	71 1c       	adc	r7, r1
    3424:	f8 01       	movw	r30, r16
    3426:	a0 80       	ld	r10, Z
    3428:	b1 80       	ldd	r11, Z+1	; 0x01
    342a:	26 ff       	sbrs	r18, 6
    342c:	03 c0       	rjmp	.+6      	; 0x3434 <vfprintf+0x14a>
    342e:	65 2d       	mov	r22, r5
    3430:	70 e0       	ldi	r23, 0x00	; 0
    3432:	02 c0       	rjmp	.+4      	; 0x3438 <vfprintf+0x14e>
    3434:	6f ef       	ldi	r22, 0xFF	; 255
    3436:	7f ef       	ldi	r23, 0xFF	; 255
    3438:	c5 01       	movw	r24, r10
    343a:	2c 87       	std	Y+12, r18	; 0x0c
    343c:	49 d1       	rcall	.+658    	; 0x36d0 <strnlen>
    343e:	2c 01       	movw	r4, r24
    3440:	83 01       	movw	r16, r6
    3442:	2c 85       	ldd	r18, Y+12	; 0x0c
    3444:	2f 77       	andi	r18, 0x7F	; 127
    3446:	22 2e       	mov	r2, r18
    3448:	16 c0       	rjmp	.+44     	; 0x3476 <vfprintf+0x18c>
    344a:	38 01       	movw	r6, r16
    344c:	f2 e0       	ldi	r31, 0x02	; 2
    344e:	6f 0e       	add	r6, r31
    3450:	71 1c       	adc	r7, r1
    3452:	f8 01       	movw	r30, r16
    3454:	a0 80       	ld	r10, Z
    3456:	b1 80       	ldd	r11, Z+1	; 0x01
    3458:	26 ff       	sbrs	r18, 6
    345a:	03 c0       	rjmp	.+6      	; 0x3462 <vfprintf+0x178>
    345c:	65 2d       	mov	r22, r5
    345e:	70 e0       	ldi	r23, 0x00	; 0
    3460:	02 c0       	rjmp	.+4      	; 0x3466 <vfprintf+0x17c>
    3462:	6f ef       	ldi	r22, 0xFF	; 255
    3464:	7f ef       	ldi	r23, 0xFF	; 255
    3466:	c5 01       	movw	r24, r10
    3468:	2c 87       	std	Y+12, r18	; 0x0c
    346a:	27 d1       	rcall	.+590    	; 0x36ba <strnlen_P>
    346c:	2c 01       	movw	r4, r24
    346e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3470:	20 68       	ori	r18, 0x80	; 128
    3472:	22 2e       	mov	r2, r18
    3474:	83 01       	movw	r16, r6
    3476:	23 fc       	sbrc	r2, 3
    3478:	19 c0       	rjmp	.+50     	; 0x34ac <vfprintf+0x1c2>
    347a:	83 2d       	mov	r24, r3
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	48 16       	cp	r4, r24
    3480:	59 06       	cpc	r5, r25
    3482:	a0 f4       	brcc	.+40     	; 0x34ac <vfprintf+0x1c2>
    3484:	b7 01       	movw	r22, r14
    3486:	80 e2       	ldi	r24, 0x20	; 32
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	3d d1       	rcall	.+634    	; 0x3706 <fputc>
    348c:	3a 94       	dec	r3
    348e:	f5 cf       	rjmp	.-22     	; 0x347a <vfprintf+0x190>
    3490:	f5 01       	movw	r30, r10
    3492:	27 fc       	sbrc	r2, 7
    3494:	85 91       	lpm	r24, Z+
    3496:	27 fe       	sbrs	r2, 7
    3498:	81 91       	ld	r24, Z+
    349a:	5f 01       	movw	r10, r30
    349c:	b7 01       	movw	r22, r14
    349e:	90 e0       	ldi	r25, 0x00	; 0
    34a0:	32 d1       	rcall	.+612    	; 0x3706 <fputc>
    34a2:	31 10       	cpse	r3, r1
    34a4:	3a 94       	dec	r3
    34a6:	f1 e0       	ldi	r31, 0x01	; 1
    34a8:	4f 1a       	sub	r4, r31
    34aa:	51 08       	sbc	r5, r1
    34ac:	41 14       	cp	r4, r1
    34ae:	51 04       	cpc	r5, r1
    34b0:	79 f7       	brne	.-34     	; 0x3490 <vfprintf+0x1a6>
    34b2:	de c0       	rjmp	.+444    	; 0x3670 <vfprintf+0x386>
    34b4:	84 36       	cpi	r24, 0x64	; 100
    34b6:	11 f0       	breq	.+4      	; 0x34bc <vfprintf+0x1d2>
    34b8:	89 36       	cpi	r24, 0x69	; 105
    34ba:	31 f5       	brne	.+76     	; 0x3508 <vfprintf+0x21e>
    34bc:	f8 01       	movw	r30, r16
    34be:	27 ff       	sbrs	r18, 7
    34c0:	07 c0       	rjmp	.+14     	; 0x34d0 <vfprintf+0x1e6>
    34c2:	60 81       	ld	r22, Z
    34c4:	71 81       	ldd	r23, Z+1	; 0x01
    34c6:	82 81       	ldd	r24, Z+2	; 0x02
    34c8:	93 81       	ldd	r25, Z+3	; 0x03
    34ca:	0c 5f       	subi	r16, 0xFC	; 252
    34cc:	1f 4f       	sbci	r17, 0xFF	; 255
    34ce:	08 c0       	rjmp	.+16     	; 0x34e0 <vfprintf+0x1f6>
    34d0:	60 81       	ld	r22, Z
    34d2:	71 81       	ldd	r23, Z+1	; 0x01
    34d4:	88 27       	eor	r24, r24
    34d6:	77 fd       	sbrc	r23, 7
    34d8:	80 95       	com	r24
    34da:	98 2f       	mov	r25, r24
    34dc:	0e 5f       	subi	r16, 0xFE	; 254
    34de:	1f 4f       	sbci	r17, 0xFF	; 255
    34e0:	2f 76       	andi	r18, 0x6F	; 111
    34e2:	b2 2e       	mov	r11, r18
    34e4:	97 ff       	sbrs	r25, 7
    34e6:	09 c0       	rjmp	.+18     	; 0x34fa <vfprintf+0x210>
    34e8:	90 95       	com	r25
    34ea:	80 95       	com	r24
    34ec:	70 95       	com	r23
    34ee:	61 95       	neg	r22
    34f0:	7f 4f       	sbci	r23, 0xFF	; 255
    34f2:	8f 4f       	sbci	r24, 0xFF	; 255
    34f4:	9f 4f       	sbci	r25, 0xFF	; 255
    34f6:	20 68       	ori	r18, 0x80	; 128
    34f8:	b2 2e       	mov	r11, r18
    34fa:	2a e0       	ldi	r18, 0x0A	; 10
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	a4 01       	movw	r20, r8
    3500:	34 d1       	rcall	.+616    	; 0x376a <__ultoa_invert>
    3502:	a8 2e       	mov	r10, r24
    3504:	a8 18       	sub	r10, r8
    3506:	43 c0       	rjmp	.+134    	; 0x358e <vfprintf+0x2a4>
    3508:	85 37       	cpi	r24, 0x75	; 117
    350a:	29 f4       	brne	.+10     	; 0x3516 <vfprintf+0x22c>
    350c:	2f 7e       	andi	r18, 0xEF	; 239
    350e:	b2 2e       	mov	r11, r18
    3510:	2a e0       	ldi	r18, 0x0A	; 10
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	25 c0       	rjmp	.+74     	; 0x3560 <vfprintf+0x276>
    3516:	f2 2f       	mov	r31, r18
    3518:	f9 7f       	andi	r31, 0xF9	; 249
    351a:	bf 2e       	mov	r11, r31
    351c:	8f 36       	cpi	r24, 0x6F	; 111
    351e:	c1 f0       	breq	.+48     	; 0x3550 <vfprintf+0x266>
    3520:	18 f4       	brcc	.+6      	; 0x3528 <vfprintf+0x23e>
    3522:	88 35       	cpi	r24, 0x58	; 88
    3524:	79 f0       	breq	.+30     	; 0x3544 <vfprintf+0x25a>
    3526:	ad c0       	rjmp	.+346    	; 0x3682 <vfprintf+0x398>
    3528:	80 37       	cpi	r24, 0x70	; 112
    352a:	19 f0       	breq	.+6      	; 0x3532 <vfprintf+0x248>
    352c:	88 37       	cpi	r24, 0x78	; 120
    352e:	21 f0       	breq	.+8      	; 0x3538 <vfprintf+0x24e>
    3530:	a8 c0       	rjmp	.+336    	; 0x3682 <vfprintf+0x398>
    3532:	2f 2f       	mov	r18, r31
    3534:	20 61       	ori	r18, 0x10	; 16
    3536:	b2 2e       	mov	r11, r18
    3538:	b4 fe       	sbrs	r11, 4
    353a:	0d c0       	rjmp	.+26     	; 0x3556 <vfprintf+0x26c>
    353c:	8b 2d       	mov	r24, r11
    353e:	84 60       	ori	r24, 0x04	; 4
    3540:	b8 2e       	mov	r11, r24
    3542:	09 c0       	rjmp	.+18     	; 0x3556 <vfprintf+0x26c>
    3544:	24 ff       	sbrs	r18, 4
    3546:	0a c0       	rjmp	.+20     	; 0x355c <vfprintf+0x272>
    3548:	9f 2f       	mov	r25, r31
    354a:	96 60       	ori	r25, 0x06	; 6
    354c:	b9 2e       	mov	r11, r25
    354e:	06 c0       	rjmp	.+12     	; 0x355c <vfprintf+0x272>
    3550:	28 e0       	ldi	r18, 0x08	; 8
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	05 c0       	rjmp	.+10     	; 0x3560 <vfprintf+0x276>
    3556:	20 e1       	ldi	r18, 0x10	; 16
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	02 c0       	rjmp	.+4      	; 0x3560 <vfprintf+0x276>
    355c:	20 e1       	ldi	r18, 0x10	; 16
    355e:	32 e0       	ldi	r19, 0x02	; 2
    3560:	f8 01       	movw	r30, r16
    3562:	b7 fe       	sbrs	r11, 7
    3564:	07 c0       	rjmp	.+14     	; 0x3574 <vfprintf+0x28a>
    3566:	60 81       	ld	r22, Z
    3568:	71 81       	ldd	r23, Z+1	; 0x01
    356a:	82 81       	ldd	r24, Z+2	; 0x02
    356c:	93 81       	ldd	r25, Z+3	; 0x03
    356e:	0c 5f       	subi	r16, 0xFC	; 252
    3570:	1f 4f       	sbci	r17, 0xFF	; 255
    3572:	06 c0       	rjmp	.+12     	; 0x3580 <vfprintf+0x296>
    3574:	60 81       	ld	r22, Z
    3576:	71 81       	ldd	r23, Z+1	; 0x01
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	0e 5f       	subi	r16, 0xFE	; 254
    357e:	1f 4f       	sbci	r17, 0xFF	; 255
    3580:	a4 01       	movw	r20, r8
    3582:	f3 d0       	rcall	.+486    	; 0x376a <__ultoa_invert>
    3584:	a8 2e       	mov	r10, r24
    3586:	a8 18       	sub	r10, r8
    3588:	fb 2d       	mov	r31, r11
    358a:	ff 77       	andi	r31, 0x7F	; 127
    358c:	bf 2e       	mov	r11, r31
    358e:	b6 fe       	sbrs	r11, 6
    3590:	0b c0       	rjmp	.+22     	; 0x35a8 <vfprintf+0x2be>
    3592:	2b 2d       	mov	r18, r11
    3594:	2e 7f       	andi	r18, 0xFE	; 254
    3596:	a5 14       	cp	r10, r5
    3598:	50 f4       	brcc	.+20     	; 0x35ae <vfprintf+0x2c4>
    359a:	b4 fe       	sbrs	r11, 4
    359c:	0a c0       	rjmp	.+20     	; 0x35b2 <vfprintf+0x2c8>
    359e:	b2 fc       	sbrc	r11, 2
    35a0:	08 c0       	rjmp	.+16     	; 0x35b2 <vfprintf+0x2c8>
    35a2:	2b 2d       	mov	r18, r11
    35a4:	2e 7e       	andi	r18, 0xEE	; 238
    35a6:	05 c0       	rjmp	.+10     	; 0x35b2 <vfprintf+0x2c8>
    35a8:	7a 2c       	mov	r7, r10
    35aa:	2b 2d       	mov	r18, r11
    35ac:	03 c0       	rjmp	.+6      	; 0x35b4 <vfprintf+0x2ca>
    35ae:	7a 2c       	mov	r7, r10
    35b0:	01 c0       	rjmp	.+2      	; 0x35b4 <vfprintf+0x2ca>
    35b2:	75 2c       	mov	r7, r5
    35b4:	24 ff       	sbrs	r18, 4
    35b6:	0d c0       	rjmp	.+26     	; 0x35d2 <vfprintf+0x2e8>
    35b8:	fe 01       	movw	r30, r28
    35ba:	ea 0d       	add	r30, r10
    35bc:	f1 1d       	adc	r31, r1
    35be:	80 81       	ld	r24, Z
    35c0:	80 33       	cpi	r24, 0x30	; 48
    35c2:	11 f4       	brne	.+4      	; 0x35c8 <vfprintf+0x2de>
    35c4:	29 7e       	andi	r18, 0xE9	; 233
    35c6:	09 c0       	rjmp	.+18     	; 0x35da <vfprintf+0x2f0>
    35c8:	22 ff       	sbrs	r18, 2
    35ca:	06 c0       	rjmp	.+12     	; 0x35d8 <vfprintf+0x2ee>
    35cc:	73 94       	inc	r7
    35ce:	73 94       	inc	r7
    35d0:	04 c0       	rjmp	.+8      	; 0x35da <vfprintf+0x2f0>
    35d2:	82 2f       	mov	r24, r18
    35d4:	86 78       	andi	r24, 0x86	; 134
    35d6:	09 f0       	breq	.+2      	; 0x35da <vfprintf+0x2f0>
    35d8:	73 94       	inc	r7
    35da:	23 fd       	sbrc	r18, 3
    35dc:	12 c0       	rjmp	.+36     	; 0x3602 <vfprintf+0x318>
    35de:	20 ff       	sbrs	r18, 0
    35e0:	06 c0       	rjmp	.+12     	; 0x35ee <vfprintf+0x304>
    35e2:	5a 2c       	mov	r5, r10
    35e4:	73 14       	cp	r7, r3
    35e6:	18 f4       	brcc	.+6      	; 0x35ee <vfprintf+0x304>
    35e8:	53 0c       	add	r5, r3
    35ea:	57 18       	sub	r5, r7
    35ec:	73 2c       	mov	r7, r3
    35ee:	73 14       	cp	r7, r3
    35f0:	60 f4       	brcc	.+24     	; 0x360a <vfprintf+0x320>
    35f2:	b7 01       	movw	r22, r14
    35f4:	80 e2       	ldi	r24, 0x20	; 32
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	2c 87       	std	Y+12, r18	; 0x0c
    35fa:	85 d0       	rcall	.+266    	; 0x3706 <fputc>
    35fc:	73 94       	inc	r7
    35fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    3600:	f6 cf       	rjmp	.-20     	; 0x35ee <vfprintf+0x304>
    3602:	73 14       	cp	r7, r3
    3604:	10 f4       	brcc	.+4      	; 0x360a <vfprintf+0x320>
    3606:	37 18       	sub	r3, r7
    3608:	01 c0       	rjmp	.+2      	; 0x360c <vfprintf+0x322>
    360a:	31 2c       	mov	r3, r1
    360c:	24 ff       	sbrs	r18, 4
    360e:	11 c0       	rjmp	.+34     	; 0x3632 <vfprintf+0x348>
    3610:	b7 01       	movw	r22, r14
    3612:	80 e3       	ldi	r24, 0x30	; 48
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	2c 87       	std	Y+12, r18	; 0x0c
    3618:	76 d0       	rcall	.+236    	; 0x3706 <fputc>
    361a:	2c 85       	ldd	r18, Y+12	; 0x0c
    361c:	22 ff       	sbrs	r18, 2
    361e:	16 c0       	rjmp	.+44     	; 0x364c <vfprintf+0x362>
    3620:	21 ff       	sbrs	r18, 1
    3622:	03 c0       	rjmp	.+6      	; 0x362a <vfprintf+0x340>
    3624:	88 e5       	ldi	r24, 0x58	; 88
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	02 c0       	rjmp	.+4      	; 0x362e <vfprintf+0x344>
    362a:	88 e7       	ldi	r24, 0x78	; 120
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	b7 01       	movw	r22, r14
    3630:	0c c0       	rjmp	.+24     	; 0x364a <vfprintf+0x360>
    3632:	82 2f       	mov	r24, r18
    3634:	86 78       	andi	r24, 0x86	; 134
    3636:	51 f0       	breq	.+20     	; 0x364c <vfprintf+0x362>
    3638:	21 fd       	sbrc	r18, 1
    363a:	02 c0       	rjmp	.+4      	; 0x3640 <vfprintf+0x356>
    363c:	80 e2       	ldi	r24, 0x20	; 32
    363e:	01 c0       	rjmp	.+2      	; 0x3642 <vfprintf+0x358>
    3640:	8b e2       	ldi	r24, 0x2B	; 43
    3642:	27 fd       	sbrc	r18, 7
    3644:	8d e2       	ldi	r24, 0x2D	; 45
    3646:	b7 01       	movw	r22, r14
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	5d d0       	rcall	.+186    	; 0x3706 <fputc>
    364c:	a5 14       	cp	r10, r5
    364e:	30 f4       	brcc	.+12     	; 0x365c <vfprintf+0x372>
    3650:	b7 01       	movw	r22, r14
    3652:	80 e3       	ldi	r24, 0x30	; 48
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	57 d0       	rcall	.+174    	; 0x3706 <fputc>
    3658:	5a 94       	dec	r5
    365a:	f8 cf       	rjmp	.-16     	; 0x364c <vfprintf+0x362>
    365c:	aa 94       	dec	r10
    365e:	f4 01       	movw	r30, r8
    3660:	ea 0d       	add	r30, r10
    3662:	f1 1d       	adc	r31, r1
    3664:	80 81       	ld	r24, Z
    3666:	b7 01       	movw	r22, r14
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	4d d0       	rcall	.+154    	; 0x3706 <fputc>
    366c:	a1 10       	cpse	r10, r1
    366e:	f6 cf       	rjmp	.-20     	; 0x365c <vfprintf+0x372>
    3670:	33 20       	and	r3, r3
    3672:	09 f4       	brne	.+2      	; 0x3676 <vfprintf+0x38c>
    3674:	5d ce       	rjmp	.-838    	; 0x3330 <vfprintf+0x46>
    3676:	b7 01       	movw	r22, r14
    3678:	80 e2       	ldi	r24, 0x20	; 32
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	44 d0       	rcall	.+136    	; 0x3706 <fputc>
    367e:	3a 94       	dec	r3
    3680:	f7 cf       	rjmp	.-18     	; 0x3670 <vfprintf+0x386>
    3682:	f7 01       	movw	r30, r14
    3684:	86 81       	ldd	r24, Z+6	; 0x06
    3686:	97 81       	ldd	r25, Z+7	; 0x07
    3688:	02 c0       	rjmp	.+4      	; 0x368e <vfprintf+0x3a4>
    368a:	8f ef       	ldi	r24, 0xFF	; 255
    368c:	9f ef       	ldi	r25, 0xFF	; 255
    368e:	2c 96       	adiw	r28, 0x0c	; 12
    3690:	cd bf       	out	0x3d, r28	; 61
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	df 91       	pop	r29
    3696:	cf 91       	pop	r28
    3698:	1f 91       	pop	r17
    369a:	0f 91       	pop	r16
    369c:	ff 90       	pop	r15
    369e:	ef 90       	pop	r14
    36a0:	df 90       	pop	r13
    36a2:	cf 90       	pop	r12
    36a4:	bf 90       	pop	r11
    36a6:	af 90       	pop	r10
    36a8:	9f 90       	pop	r9
    36aa:	8f 90       	pop	r8
    36ac:	7f 90       	pop	r7
    36ae:	6f 90       	pop	r6
    36b0:	5f 90       	pop	r5
    36b2:	4f 90       	pop	r4
    36b4:	3f 90       	pop	r3
    36b6:	2f 90       	pop	r2
    36b8:	08 95       	ret

000036ba <strnlen_P>:
    36ba:	fc 01       	movw	r30, r24
    36bc:	05 90       	lpm	r0, Z+
    36be:	61 50       	subi	r22, 0x01	; 1
    36c0:	70 40       	sbci	r23, 0x00	; 0
    36c2:	01 10       	cpse	r0, r1
    36c4:	d8 f7       	brcc	.-10     	; 0x36bc <strnlen_P+0x2>
    36c6:	80 95       	com	r24
    36c8:	90 95       	com	r25
    36ca:	8e 0f       	add	r24, r30
    36cc:	9f 1f       	adc	r25, r31
    36ce:	08 95       	ret

000036d0 <strnlen>:
    36d0:	fc 01       	movw	r30, r24
    36d2:	61 50       	subi	r22, 0x01	; 1
    36d4:	70 40       	sbci	r23, 0x00	; 0
    36d6:	01 90       	ld	r0, Z+
    36d8:	01 10       	cpse	r0, r1
    36da:	d8 f7       	brcc	.-10     	; 0x36d2 <strnlen+0x2>
    36dc:	80 95       	com	r24
    36de:	90 95       	com	r25
    36e0:	8e 0f       	add	r24, r30
    36e2:	9f 1f       	adc	r25, r31
    36e4:	08 95       	ret

000036e6 <strrev>:
    36e6:	dc 01       	movw	r26, r24
    36e8:	fc 01       	movw	r30, r24
    36ea:	67 2f       	mov	r22, r23
    36ec:	71 91       	ld	r23, Z+
    36ee:	77 23       	and	r23, r23
    36f0:	e1 f7       	brne	.-8      	; 0x36ea <strrev+0x4>
    36f2:	32 97       	sbiw	r30, 0x02	; 2
    36f4:	04 c0       	rjmp	.+8      	; 0x36fe <strrev+0x18>
    36f6:	7c 91       	ld	r23, X
    36f8:	6d 93       	st	X+, r22
    36fa:	70 83       	st	Z, r23
    36fc:	62 91       	ld	r22, -Z
    36fe:	ae 17       	cp	r26, r30
    3700:	bf 07       	cpc	r27, r31
    3702:	c8 f3       	brcs	.-14     	; 0x36f6 <strrev+0x10>
    3704:	08 95       	ret

00003706 <fputc>:
    3706:	0f 93       	push	r16
    3708:	1f 93       	push	r17
    370a:	cf 93       	push	r28
    370c:	df 93       	push	r29
    370e:	18 2f       	mov	r17, r24
    3710:	09 2f       	mov	r16, r25
    3712:	eb 01       	movw	r28, r22
    3714:	8b 81       	ldd	r24, Y+3	; 0x03
    3716:	81 fd       	sbrc	r24, 1
    3718:	03 c0       	rjmp	.+6      	; 0x3720 <fputc+0x1a>
    371a:	8f ef       	ldi	r24, 0xFF	; 255
    371c:	9f ef       	ldi	r25, 0xFF	; 255
    371e:	20 c0       	rjmp	.+64     	; 0x3760 <fputc+0x5a>
    3720:	82 ff       	sbrs	r24, 2
    3722:	10 c0       	rjmp	.+32     	; 0x3744 <fputc+0x3e>
    3724:	4e 81       	ldd	r20, Y+6	; 0x06
    3726:	5f 81       	ldd	r21, Y+7	; 0x07
    3728:	2c 81       	ldd	r18, Y+4	; 0x04
    372a:	3d 81       	ldd	r19, Y+5	; 0x05
    372c:	42 17       	cp	r20, r18
    372e:	53 07       	cpc	r21, r19
    3730:	7c f4       	brge	.+30     	; 0x3750 <fputc+0x4a>
    3732:	e8 81       	ld	r30, Y
    3734:	f9 81       	ldd	r31, Y+1	; 0x01
    3736:	9f 01       	movw	r18, r30
    3738:	2f 5f       	subi	r18, 0xFF	; 255
    373a:	3f 4f       	sbci	r19, 0xFF	; 255
    373c:	28 83       	st	Y, r18
    373e:	39 83       	std	Y+1, r19	; 0x01
    3740:	10 83       	st	Z, r17
    3742:	06 c0       	rjmp	.+12     	; 0x3750 <fputc+0x4a>
    3744:	e8 85       	ldd	r30, Y+8	; 0x08
    3746:	f9 85       	ldd	r31, Y+9	; 0x09
    3748:	81 2f       	mov	r24, r17
    374a:	09 95       	icall
    374c:	89 2b       	or	r24, r25
    374e:	29 f7       	brne	.-54     	; 0x371a <fputc+0x14>
    3750:	2e 81       	ldd	r18, Y+6	; 0x06
    3752:	3f 81       	ldd	r19, Y+7	; 0x07
    3754:	2f 5f       	subi	r18, 0xFF	; 255
    3756:	3f 4f       	sbci	r19, 0xFF	; 255
    3758:	2e 83       	std	Y+6, r18	; 0x06
    375a:	3f 83       	std	Y+7, r19	; 0x07
    375c:	81 2f       	mov	r24, r17
    375e:	90 2f       	mov	r25, r16
    3760:	df 91       	pop	r29
    3762:	cf 91       	pop	r28
    3764:	1f 91       	pop	r17
    3766:	0f 91       	pop	r16
    3768:	08 95       	ret

0000376a <__ultoa_invert>:
    376a:	fa 01       	movw	r30, r20
    376c:	aa 27       	eor	r26, r26
    376e:	28 30       	cpi	r18, 0x08	; 8
    3770:	51 f1       	breq	.+84     	; 0x37c6 <__ultoa_invert+0x5c>
    3772:	20 31       	cpi	r18, 0x10	; 16
    3774:	81 f1       	breq	.+96     	; 0x37d6 <__ultoa_invert+0x6c>
    3776:	e8 94       	clt
    3778:	6f 93       	push	r22
    377a:	6e 7f       	andi	r22, 0xFE	; 254
    377c:	6e 5f       	subi	r22, 0xFE	; 254
    377e:	7f 4f       	sbci	r23, 0xFF	; 255
    3780:	8f 4f       	sbci	r24, 0xFF	; 255
    3782:	9f 4f       	sbci	r25, 0xFF	; 255
    3784:	af 4f       	sbci	r26, 0xFF	; 255
    3786:	b1 e0       	ldi	r27, 0x01	; 1
    3788:	3e d0       	rcall	.+124    	; 0x3806 <__ultoa_invert+0x9c>
    378a:	b4 e0       	ldi	r27, 0x04	; 4
    378c:	3c d0       	rcall	.+120    	; 0x3806 <__ultoa_invert+0x9c>
    378e:	67 0f       	add	r22, r23
    3790:	78 1f       	adc	r23, r24
    3792:	89 1f       	adc	r24, r25
    3794:	9a 1f       	adc	r25, r26
    3796:	a1 1d       	adc	r26, r1
    3798:	68 0f       	add	r22, r24
    379a:	79 1f       	adc	r23, r25
    379c:	8a 1f       	adc	r24, r26
    379e:	91 1d       	adc	r25, r1
    37a0:	a1 1d       	adc	r26, r1
    37a2:	6a 0f       	add	r22, r26
    37a4:	71 1d       	adc	r23, r1
    37a6:	81 1d       	adc	r24, r1
    37a8:	91 1d       	adc	r25, r1
    37aa:	a1 1d       	adc	r26, r1
    37ac:	20 d0       	rcall	.+64     	; 0x37ee <__ultoa_invert+0x84>
    37ae:	09 f4       	brne	.+2      	; 0x37b2 <__ultoa_invert+0x48>
    37b0:	68 94       	set
    37b2:	3f 91       	pop	r19
    37b4:	2a e0       	ldi	r18, 0x0A	; 10
    37b6:	26 9f       	mul	r18, r22
    37b8:	11 24       	eor	r1, r1
    37ba:	30 19       	sub	r19, r0
    37bc:	30 5d       	subi	r19, 0xD0	; 208
    37be:	31 93       	st	Z+, r19
    37c0:	de f6       	brtc	.-74     	; 0x3778 <__ultoa_invert+0xe>
    37c2:	cf 01       	movw	r24, r30
    37c4:	08 95       	ret
    37c6:	46 2f       	mov	r20, r22
    37c8:	47 70       	andi	r20, 0x07	; 7
    37ca:	40 5d       	subi	r20, 0xD0	; 208
    37cc:	41 93       	st	Z+, r20
    37ce:	b3 e0       	ldi	r27, 0x03	; 3
    37d0:	0f d0       	rcall	.+30     	; 0x37f0 <__ultoa_invert+0x86>
    37d2:	c9 f7       	brne	.-14     	; 0x37c6 <__ultoa_invert+0x5c>
    37d4:	f6 cf       	rjmp	.-20     	; 0x37c2 <__ultoa_invert+0x58>
    37d6:	46 2f       	mov	r20, r22
    37d8:	4f 70       	andi	r20, 0x0F	; 15
    37da:	40 5d       	subi	r20, 0xD0	; 208
    37dc:	4a 33       	cpi	r20, 0x3A	; 58
    37de:	18 f0       	brcs	.+6      	; 0x37e6 <__ultoa_invert+0x7c>
    37e0:	49 5d       	subi	r20, 0xD9	; 217
    37e2:	31 fd       	sbrc	r19, 1
    37e4:	40 52       	subi	r20, 0x20	; 32
    37e6:	41 93       	st	Z+, r20
    37e8:	02 d0       	rcall	.+4      	; 0x37ee <__ultoa_invert+0x84>
    37ea:	a9 f7       	brne	.-22     	; 0x37d6 <__ultoa_invert+0x6c>
    37ec:	ea cf       	rjmp	.-44     	; 0x37c2 <__ultoa_invert+0x58>
    37ee:	b4 e0       	ldi	r27, 0x04	; 4
    37f0:	a6 95       	lsr	r26
    37f2:	97 95       	ror	r25
    37f4:	87 95       	ror	r24
    37f6:	77 95       	ror	r23
    37f8:	67 95       	ror	r22
    37fa:	ba 95       	dec	r27
    37fc:	c9 f7       	brne	.-14     	; 0x37f0 <__ultoa_invert+0x86>
    37fe:	00 97       	sbiw	r24, 0x00	; 0
    3800:	61 05       	cpc	r22, r1
    3802:	71 05       	cpc	r23, r1
    3804:	08 95       	ret
    3806:	9b 01       	movw	r18, r22
    3808:	ac 01       	movw	r20, r24
    380a:	0a 2e       	mov	r0, r26
    380c:	06 94       	lsr	r0
    380e:	57 95       	ror	r21
    3810:	47 95       	ror	r20
    3812:	37 95       	ror	r19
    3814:	27 95       	ror	r18
    3816:	ba 95       	dec	r27
    3818:	c9 f7       	brne	.-14     	; 0x380c <__ultoa_invert+0xa2>
    381a:	62 0f       	add	r22, r18
    381c:	73 1f       	adc	r23, r19
    381e:	84 1f       	adc	r24, r20
    3820:	95 1f       	adc	r25, r21
    3822:	a0 1d       	adc	r26, r0
    3824:	08 95       	ret

00003826 <_exit>:
    3826:	f8 94       	cli

00003828 <__stop_program>:
    3828:	ff cf       	rjmp	.-2      	; 0x3828 <__stop_program>
