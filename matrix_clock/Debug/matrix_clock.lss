
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a0  00802000  000043ba  0000444e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000cd8  008021a0  008021a0  000045ee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000045ee  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000820  00000000  00000000  0000464a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000f12d  00000000  00000000  00004e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002cb7  00000000  00000000  00013f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000070fe  00000000  00000000  00016c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001ebc  00000000  00000000  0001dd4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002fec  00000000  00000000  0001fc08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d2a6  00000000  00000000  00022bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000808  00000000  00000000  0002fe9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	34 c1       	rjmp	.+616    	; 0x26a <__ctors_end>
       2:	00 00       	nop
       4:	51 c1       	rjmp	.+674    	; 0x2a8 <__bad_interrupt>
       6:	00 00       	nop
       8:	4f c1       	rjmp	.+670    	; 0x2a8 <__bad_interrupt>
       a:	00 00       	nop
       c:	4d c1       	rjmp	.+666    	; 0x2a8 <__bad_interrupt>
       e:	00 00       	nop
      10:	4b c1       	rjmp	.+662    	; 0x2a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	49 c1       	rjmp	.+658    	; 0x2a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	47 c1       	rjmp	.+654    	; 0x2a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	45 c1       	rjmp	.+650    	; 0x2a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	43 c1       	rjmp	.+646    	; 0x2a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	41 c1       	rjmp	.+642    	; 0x2a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <__vector_10>
      2c:	3d c1       	rjmp	.+634    	; 0x2a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3b c1       	rjmp	.+630    	; 0x2a8 <__bad_interrupt>
      32:	00 00       	nop
      34:	39 c1       	rjmp	.+626    	; 0x2a8 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__vector_14>
      3c:	35 c1       	rjmp	.+618    	; 0x2a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	33 c1       	rjmp	.+614    	; 0x2a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	31 c1       	rjmp	.+610    	; 0x2a8 <__bad_interrupt>
      46:	00 00       	nop
      48:	2f c1       	rjmp	.+606    	; 0x2a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2d c1       	rjmp	.+602    	; 0x2a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__vector_20>
      54:	29 c1       	rjmp	.+594    	; 0x2a8 <__bad_interrupt>
      56:	00 00       	nop
      58:	27 c1       	rjmp	.+590    	; 0x2a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	25 c1       	rjmp	.+586    	; 0x2a8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	23 c1       	rjmp	.+582    	; 0x2a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	21 c1       	rjmp	.+578    	; 0x2a8 <__bad_interrupt>
      66:	00 00       	nop
      68:	1f c1       	rjmp	.+574    	; 0x2a8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1d c1       	rjmp	.+570    	; 0x2a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	1b c1       	rjmp	.+566    	; 0x2a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	19 c1       	rjmp	.+562    	; 0x2a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	17 c1       	rjmp	.+558    	; 0x2a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	15 c1       	rjmp	.+554    	; 0x2a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	13 c1       	rjmp	.+550    	; 0x2a8 <__bad_interrupt>
      82:	00 00       	nop
      84:	11 c1       	rjmp	.+546    	; 0x2a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	0f c1       	rjmp	.+542    	; 0x2a8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0d c1       	rjmp	.+538    	; 0x2a8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0b c1       	rjmp	.+534    	; 0x2a8 <__bad_interrupt>
      92:	00 00       	nop
      94:	09 c1       	rjmp	.+530    	; 0x2a8 <__bad_interrupt>
      96:	00 00       	nop
      98:	07 c1       	rjmp	.+526    	; 0x2a8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	05 c1       	rjmp	.+522    	; 0x2a8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	03 c1       	rjmp	.+518    	; 0x2a8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	01 c1       	rjmp	.+514    	; 0x2a8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ff c0       	rjmp	.+510    	; 0x2a8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	fd c0       	rjmp	.+506    	; 0x2a8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	fb c0       	rjmp	.+502    	; 0x2a8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f9 c0       	rjmp	.+498    	; 0x2a8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f7 c0       	rjmp	.+494    	; 0x2a8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f5 c0       	rjmp	.+490    	; 0x2a8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	f3 c0       	rjmp	.+486    	; 0x2a8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	f1 c0       	rjmp	.+482    	; 0x2a8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ef c0       	rjmp	.+478    	; 0x2a8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ed c0       	rjmp	.+474    	; 0x2a8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	eb c0       	rjmp	.+470    	; 0x2a8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	e9 c0       	rjmp	.+466    	; 0x2a8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e7 c0       	rjmp	.+462    	; 0x2a8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	e5 c0       	rjmp	.+458    	; 0x2a8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	e3 c0       	rjmp	.+454    	; 0x2a8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e1 c0       	rjmp	.+450    	; 0x2a8 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	df c0       	rjmp	.+446    	; 0x2a8 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	dd c0       	rjmp	.+442    	; 0x2a8 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	db c0       	rjmp	.+438    	; 0x2a8 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	d9 c0       	rjmp	.+434    	; 0x2a8 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	d7 c0       	rjmp	.+430    	; 0x2a8 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	d5 c0       	rjmp	.+426    	; 0x2a8 <__bad_interrupt>
      fe:	00 00       	nop
     100:	d3 c0       	rjmp	.+422    	; 0x2a8 <__bad_interrupt>
     102:	00 00       	nop
     104:	d1 c0       	rjmp	.+418    	; 0x2a8 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__vector_66>
     10c:	cd c0       	rjmp	.+410    	; 0x2a8 <__bad_interrupt>
     10e:	00 00       	nop
     110:	cb c0       	rjmp	.+406    	; 0x2a8 <__bad_interrupt>
     112:	00 00       	nop
     114:	c9 c0       	rjmp	.+402    	; 0x2a8 <__bad_interrupt>
     116:	00 00       	nop
     118:	c7 c0       	rjmp	.+398    	; 0x2a8 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	c5 c0       	rjmp	.+394    	; 0x2a8 <__bad_interrupt>
     11e:	00 00       	nop
     120:	c3 c0       	rjmp	.+390    	; 0x2a8 <__bad_interrupt>
     122:	00 00       	nop
     124:	c1 c0       	rjmp	.+386    	; 0x2a8 <__bad_interrupt>
     126:	00 00       	nop
     128:	bf c0       	rjmp	.+382    	; 0x2a8 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	bd c0       	rjmp	.+378    	; 0x2a8 <__bad_interrupt>
     12e:	00 00       	nop
     130:	bb c0       	rjmp	.+374    	; 0x2a8 <__bad_interrupt>
     132:	00 00       	nop
     134:	b9 c0       	rjmp	.+370    	; 0x2a8 <__bad_interrupt>
     136:	00 00       	nop
     138:	b7 c0       	rjmp	.+366    	; 0x2a8 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	b5 c0       	rjmp	.+362    	; 0x2a8 <__bad_interrupt>
     13e:	00 00       	nop
     140:	b3 c0       	rjmp	.+358    	; 0x2a8 <__bad_interrupt>
     142:	00 00       	nop
     144:	b1 c0       	rjmp	.+354    	; 0x2a8 <__bad_interrupt>
     146:	00 00       	nop
     148:	af c0       	rjmp	.+350    	; 0x2a8 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	ad c0       	rjmp	.+346    	; 0x2a8 <__bad_interrupt>
     14e:	00 00       	nop
     150:	ab c0       	rjmp	.+342    	; 0x2a8 <__bad_interrupt>
     152:	00 00       	nop
     154:	a9 c0       	rjmp	.+338    	; 0x2a8 <__bad_interrupt>
     156:	00 00       	nop
     158:	a7 c0       	rjmp	.+334    	; 0x2a8 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	a5 c0       	rjmp	.+330    	; 0x2a8 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b2 c0       	rjmp	.+356    	; 0x2c6 <__vector_88>
     162:	00 00       	nop
     164:	a1 c0       	rjmp	.+322    	; 0x2a8 <__bad_interrupt>
     166:	00 00       	nop
     168:	9f c0       	rjmp	.+318    	; 0x2a8 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	9d c0       	rjmp	.+314    	; 0x2a8 <__bad_interrupt>
     16e:	00 00       	nop
     170:	9b c0       	rjmp	.+310    	; 0x2a8 <__bad_interrupt>
     172:	00 00       	nop
     174:	99 c0       	rjmp	.+306    	; 0x2a8 <__bad_interrupt>
     176:	00 00       	nop
     178:	97 c0       	rjmp	.+302    	; 0x2a8 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	95 c0       	rjmp	.+298    	; 0x2a8 <__bad_interrupt>
     17e:	00 00       	nop
     180:	93 c0       	rjmp	.+294    	; 0x2a8 <__bad_interrupt>
     182:	00 00       	nop
     184:	91 c0       	rjmp	.+290    	; 0x2a8 <__bad_interrupt>
     186:	00 00       	nop
     188:	8f c0       	rjmp	.+286    	; 0x2a8 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	8d c0       	rjmp	.+282    	; 0x2a8 <__bad_interrupt>
     18e:	00 00       	nop
     190:	8b c0       	rjmp	.+278    	; 0x2a8 <__bad_interrupt>
     192:	00 00       	nop
     194:	89 c0       	rjmp	.+274    	; 0x2a8 <__bad_interrupt>
     196:	00 00       	nop
     198:	87 c0       	rjmp	.+270    	; 0x2a8 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	85 c0       	rjmp	.+266    	; 0x2a8 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	83 c0       	rjmp	.+262    	; 0x2a8 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	81 c0       	rjmp	.+258    	; 0x2a8 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	7f c0       	rjmp	.+254    	; 0x2a8 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	7d c0       	rjmp	.+250    	; 0x2a8 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	7b c0       	rjmp	.+246    	; 0x2a8 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	79 c0       	rjmp	.+242    	; 0x2a8 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	77 c0       	rjmp	.+238    	; 0x2a8 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	75 c0       	rjmp	.+234    	; 0x2a8 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	73 c0       	rjmp	.+230    	; 0x2a8 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	71 c0       	rjmp	.+226    	; 0x2a8 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	6f c0       	rjmp	.+222    	; 0x2a8 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	6d c0       	rjmp	.+218    	; 0x2a8 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	6b c0       	rjmp	.+214    	; 0x2a8 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	69 c0       	rjmp	.+210    	; 0x2a8 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	67 c0       	rjmp	.+206    	; 0x2a8 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	65 c0       	rjmp	.+202    	; 0x2a8 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	63 c0       	rjmp	.+198    	; 0x2a8 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	61 c0       	rjmp	.+194    	; 0x2a8 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	5f c0       	rjmp	.+190    	; 0x2a8 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	5d c0       	rjmp	.+186    	; 0x2a8 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	5b c0       	rjmp	.+182    	; 0x2a8 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	59 c0       	rjmp	.+178    	; 0x2a8 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	57 c0       	rjmp	.+174    	; 0x2a8 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	86 13       	cpse	r24, r22
     1fe:	8d 13       	cpse	r24, r29
     200:	e0 14       	cp	r14, r0
     202:	fe 13       	cpse	r31, r30
     204:	e0 14       	cp	r14, r0
     206:	e0 14       	cp	r14, r0
     208:	e0 14       	cp	r14, r0
     20a:	d8 14       	cp	r13, r8
     20c:	e0 14       	cp	r14, r0
     20e:	e0 14       	cp	r14, r0
     210:	e0 14       	cp	r14, r0
     212:	e0 14       	cp	r14, r0
     214:	e0 14       	cp	r14, r0
     216:	e0 14       	cp	r14, r0
     218:	e0 14       	cp	r14, r0
     21a:	e0 14       	cp	r14, r0
     21c:	e0 14       	cp	r14, r0
     21e:	e0 14       	cp	r14, r0
     220:	e0 14       	cp	r14, r0
     222:	e0 14       	cp	r14, r0
     224:	e0 14       	cp	r14, r0
     226:	e0 14       	cp	r14, r0
     228:	e0 14       	cp	r14, r0
     22a:	e0 14       	cp	r14, r0
     22c:	e0 14       	cp	r14, r0
     22e:	e0 14       	cp	r14, r0
     230:	e0 14       	cp	r14, r0
     232:	e0 14       	cp	r14, r0
     234:	e0 14       	cp	r14, r0
     236:	e0 14       	cp	r14, r0
     238:	e0 14       	cp	r14, r0
     23a:	e0 14       	cp	r14, r0
     23c:	e0 14       	cp	r14, r0
     23e:	e0 14       	cp	r14, r0
     240:	e0 14       	cp	r14, r0
     242:	e0 14       	cp	r14, r0
     244:	e0 14       	cp	r14, r0
     246:	e0 14       	cp	r14, r0
     248:	e0 14       	cp	r14, r0
     24a:	e0 14       	cp	r14, r0
     24c:	e0 14       	cp	r14, r0
     24e:	e0 14       	cp	r14, r0
     250:	e0 14       	cp	r14, r0
     252:	e0 14       	cp	r14, r0
     254:	e0 14       	cp	r14, r0
     256:	e0 14       	cp	r14, r0
     258:	e0 14       	cp	r14, r0
     25a:	e0 14       	cp	r14, r0
     25c:	e0 14       	cp	r14, r0
     25e:	e0 14       	cp	r14, r0
     260:	8a 14       	cp	r8, r10
     262:	90 14       	cp	r9, r0
     264:	a1 14       	cp	r10, r1
     266:	b2 14       	cp	r11, r2
     268:	c6 14       	cp	r12, r6

0000026a <__ctors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	cd bf       	out	0x3d, r28	; 61
     272:	df e2       	ldi	r29, 0x2F	; 47
     274:	de bf       	out	0x3e, r29	; 62

00000276 <__do_copy_data>:
     276:	11 e2       	ldi	r17, 0x21	; 33
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b0 e2       	ldi	r27, 0x20	; 32
     27c:	ea eb       	ldi	r30, 0xBA	; 186
     27e:	f3 e4       	ldi	r31, 0x43	; 67
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	0b bf       	out	0x3b, r16	; 59
     284:	02 c0       	rjmp	.+4      	; 0x28a <__do_copy_data+0x14>
     286:	07 90       	elpm	r0, Z+
     288:	0d 92       	st	X+, r0
     28a:	a0 3a       	cpi	r26, 0xA0	; 160
     28c:	b1 07       	cpc	r27, r17
     28e:	d9 f7       	brne	.-10     	; 0x286 <__do_copy_data+0x10>

00000290 <__do_clear_bss>:
     290:	2e e2       	ldi	r18, 0x2E	; 46
     292:	a0 ea       	ldi	r26, 0xA0	; 160
     294:	b1 e2       	ldi	r27, 0x21	; 33
     296:	01 c0       	rjmp	.+2      	; 0x29a <.do_clear_bss_start>

00000298 <.do_clear_bss_loop>:
     298:	1d 92       	st	X+, r1

0000029a <.do_clear_bss_start>:
     29a:	a8 37       	cpi	r26, 0x78	; 120
     29c:	b2 07       	cpc	r27, r18
     29e:	e1 f7       	brne	.-8      	; 0x298 <.do_clear_bss_loop>
     2a0:	0e 94 90 16 	call	0x2d20	; 0x2d20 <main>
     2a4:	0c 94 db 21 	jmp	0x43b6	; 0x43b6 <_exit>

000002a8 <__bad_interrupt>:
     2a8:	ab ce       	rjmp	.-682    	; 0x0 <__vectors>

000002aa <clock_setup_32_mhz>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
}

void clock_setup_32_mhz(void) {
	
	OSC.CTRL |= OSC_RC32MEN_bm;
     2aa:	e0 e5       	ldi	r30, 0x50	; 80
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	82 60       	ori	r24, 0x02	; 2
     2b2:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     2b4:	81 81       	ldd	r24, Z+1	; 0x01
     2b6:	81 ff       	sbrs	r24, 1
     2b8:	fd cf       	rjmp	.-6      	; 0x2b4 <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
     2ba:	88 ed       	ldi	r24, 0xD8	; 216
     2bc:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	80 93 40 00 	sts	0x0040, r24
     2c4:	08 95       	ret

000002c6 <__vector_88>:
esp8266_status_t connectWiFi(void) {
	
  return SUCCESS;
}

ISR(USARTD0_RXC_vect) {
     2c6:	1f 92       	push	r1
     2c8:	0f 92       	push	r0
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	0f 92       	push	r0
     2ce:	11 24       	eor	r1, r1
     2d0:	0b b6       	in	r0, 0x3b	; 59
     2d2:	0f 92       	push	r0
     2d4:	2f 93       	push	r18
     2d6:	3f 93       	push	r19
     2d8:	8f 93       	push	r24
     2da:	9f 93       	push	r25
     2dc:	ef 93       	push	r30
     2de:	ff 93       	push	r31
	rx_buffer[rx_ptr++] = USARTD0.DATA;
     2e0:	80 91 a0 21 	lds	r24, 0x21A0
     2e4:	90 91 a1 21 	lds	r25, 0x21A1
     2e8:	9c 01       	movw	r18, r24
     2ea:	2f 5f       	subi	r18, 0xFF	; 255
     2ec:	3f 4f       	sbci	r19, 0xFF	; 255
     2ee:	20 93 a0 21 	sts	0x21A0, r18
     2f2:	30 93 a1 21 	sts	0x21A1, r19
     2f6:	20 91 a0 09 	lds	r18, 0x09A0
     2fa:	fc 01       	movw	r30, r24
     2fc:	e2 53       	subi	r30, 0x32	; 50
     2fe:	fe 4d       	sbci	r31, 0xDE	; 222
     300:	20 83       	st	Z, r18
     302:	ff 91       	pop	r31
     304:	ef 91       	pop	r30
     306:	9f 91       	pop	r25
     308:	8f 91       	pop	r24
     30a:	3f 91       	pop	r19
     30c:	2f 91       	pop	r18
     30e:	0f 90       	pop	r0
     310:	0b be       	out	0x3b, r0	; 59
     312:	0f 90       	pop	r0
     314:	0f be       	out	0x3f, r0	; 63
     316:	0f 90       	pop	r0
     318:	1f 90       	pop	r1
     31a:	18 95       	reti

0000031c <mem_cpy>:
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	42 30       	cpi	r20, 0x02	; 2
     326:	51 05       	cpc	r21, r1
     328:	c0 f0       	brcs	.+48     	; 0x35a <mem_cpy+0x3e>
     32a:	eb 01       	movw	r28, r22
     32c:	fc 01       	movw	r30, r24
     32e:	9a 01       	movw	r18, r20
     330:	09 91       	ld	r16, Y+
     332:	19 91       	ld	r17, Y+
     334:	01 93       	st	Z+, r16
     336:	11 93       	st	Z+, r17
     338:	22 50       	subi	r18, 0x02	; 2
     33a:	31 09       	sbc	r19, r1
     33c:	22 30       	cpi	r18, 0x02	; 2
     33e:	31 05       	cpc	r19, r1
     340:	b8 f7       	brcc	.-18     	; 0x330 <mem_cpy+0x14>
     342:	9a 01       	movw	r18, r20
     344:	22 50       	subi	r18, 0x02	; 2
     346:	31 09       	sbc	r19, r1
     348:	2e 7f       	andi	r18, 0xFE	; 254
     34a:	2e 5f       	subi	r18, 0xFE	; 254
     34c:	3f 4f       	sbci	r19, 0xFF	; 255
     34e:	82 0f       	add	r24, r18
     350:	93 1f       	adc	r25, r19
     352:	62 0f       	add	r22, r18
     354:	73 1f       	adc	r23, r19
     356:	41 70       	andi	r20, 0x01	; 1
     358:	55 27       	eor	r21, r21
     35a:	41 15       	cp	r20, r1
     35c:	51 05       	cpc	r21, r1
     35e:	49 f0       	breq	.+18     	; 0x372 <mem_cpy+0x56>
     360:	db 01       	movw	r26, r22
     362:	fc 01       	movw	r30, r24
     364:	84 0f       	add	r24, r20
     366:	95 1f       	adc	r25, r21
     368:	2d 91       	ld	r18, X+
     36a:	21 93       	st	Z+, r18
     36c:	e8 17       	cp	r30, r24
     36e:	f9 07       	cpc	r31, r25
     370:	d9 f7       	brne	.-10     	; 0x368 <mem_cpy+0x4c>
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	08 95       	ret

0000037c <mem_set>:
     37c:	41 15       	cp	r20, r1
     37e:	51 05       	cpc	r21, r1
     380:	39 f0       	breq	.+14     	; 0x390 <mem_set+0x14>
     382:	fc 01       	movw	r30, r24
     384:	84 0f       	add	r24, r20
     386:	95 1f       	adc	r25, r21
     388:	61 93       	st	Z+, r22
     38a:	e8 17       	cp	r30, r24
     38c:	f9 07       	cpc	r31, r25
     38e:	e1 f7       	brne	.-8      	; 0x388 <mem_set+0xc>
     390:	08 95       	ret

00000392 <ld_clust>:
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	dc 01       	movw	r26, r24
     398:	fb 01       	movw	r30, r22
     39a:	62 8d       	ldd	r22, Z+26	; 0x1a
     39c:	73 8d       	ldd	r23, Z+27	; 0x1b
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	2c 91       	ld	r18, X
     3a4:	23 30       	cpi	r18, 0x03	; 3
     3a6:	59 f4       	brne	.+22     	; 0x3be <ld_clust+0x2c>
     3a8:	04 89       	ldd	r16, Z+20	; 0x14
     3aa:	15 89       	ldd	r17, Z+21	; 0x15
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	98 01       	movw	r18, r16
     3b2:	11 27       	eor	r17, r17
     3b4:	00 27       	eor	r16, r16
     3b6:	60 2b       	or	r22, r16
     3b8:	71 2b       	or	r23, r17
     3ba:	82 2b       	or	r24, r18
     3bc:	93 2b       	or	r25, r19
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	08 95       	ret

000003c4 <get_ldnumber>:
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	ec 01       	movw	r28, r24
     3ca:	a8 81       	ld	r26, Y
     3cc:	b9 81       	ldd	r27, Y+1	; 0x01
     3ce:	10 97       	sbiw	r26, 0x00	; 0
     3d0:	29 f1       	breq	.+74     	; 0x41c <get_ldnumber+0x58>
     3d2:	4c 91       	ld	r20, X
     3d4:	41 32       	cpi	r20, 0x21	; 33
     3d6:	58 f0       	brcs	.+22     	; 0x3ee <get_ldnumber+0x2a>
     3d8:	4a 33       	cpi	r20, 0x3A	; 58
     3da:	49 f1       	breq	.+82     	; 0x42e <get_ldnumber+0x6a>
     3dc:	fd 01       	movw	r30, r26
     3de:	31 96       	adiw	r30, 0x01	; 1
     3e0:	9f 01       	movw	r18, r30
     3e2:	91 91       	ld	r25, Z+
     3e4:	91 32       	cpi	r25, 0x21	; 33
     3e6:	28 f0       	brcs	.+10     	; 0x3f2 <get_ldnumber+0x2e>
     3e8:	9a 33       	cpi	r25, 0x3A	; 58
     3ea:	d1 f7       	brne	.-12     	; 0x3e0 <get_ldnumber+0x1c>
     3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <get_ldnumber+0x32>
     3ee:	94 2f       	mov	r25, r20
     3f0:	9d 01       	movw	r18, r26
     3f2:	9a 33       	cpi	r25, 0x3A	; 58
     3f4:	79 f4       	brne	.+30     	; 0x414 <get_ldnumber+0x50>
     3f6:	cd 01       	movw	r24, r26
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	28 17       	cp	r18, r24
     3fc:	39 07       	cpc	r19, r25
     3fe:	89 f4       	brne	.+34     	; 0x422 <get_ldnumber+0x5e>
     400:	84 2f       	mov	r24, r20
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	c0 97       	sbiw	r24, 0x30	; 48
     406:	82 30       	cpi	r24, 0x02	; 2
     408:	91 05       	cpc	r25, r1
     40a:	70 f4       	brcc	.+28     	; 0x428 <get_ldnumber+0x64>
     40c:	12 96       	adiw	r26, 0x02	; 2
     40e:	a8 83       	st	Y, r26
     410:	b9 83       	std	Y+1, r27	; 0x01
     412:	0f c0       	rjmp	.+30     	; 0x432 <get_ldnumber+0x6e>
     414:	80 91 a2 21 	lds	r24, 0x21A2
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0b c0       	rjmp	.+22     	; 0x432 <get_ldnumber+0x6e>
     41c:	8f ef       	ldi	r24, 0xFF	; 255
     41e:	9f ef       	ldi	r25, 0xFF	; 255
     420:	08 c0       	rjmp	.+16     	; 0x432 <get_ldnumber+0x6e>
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	9f ef       	ldi	r25, 0xFF	; 255
     426:	05 c0       	rjmp	.+10     	; 0x432 <get_ldnumber+0x6e>
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	9f ef       	ldi	r25, 0xFF	; 255
     42c:	02 c0       	rjmp	.+4      	; 0x432 <get_ldnumber+0x6e>
     42e:	9d 01       	movw	r18, r26
     430:	e2 cf       	rjmp	.-60     	; 0x3f6 <get_ldnumber+0x32>
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <sync_window>:
     438:	8f 92       	push	r8
     43a:	9f 92       	push	r9
     43c:	af 92       	push	r10
     43e:	bf 92       	push	r11
     440:	cf 92       	push	r12
     442:	df 92       	push	r13
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	ec 01       	movw	r28, r24
     452:	8c 81       	ldd	r24, Y+4	; 0x04
     454:	88 23       	and	r24, r24
     456:	09 f4       	brne	.+2      	; 0x45a <sync_window+0x22>
     458:	44 c0       	rjmp	.+136    	; 0x4e2 <sync_window+0xaa>
     45a:	ce a4       	ldd	r12, Y+46	; 0x2e
     45c:	df a4       	ldd	r13, Y+47	; 0x2f
     45e:	e8 a8       	ldd	r14, Y+48	; 0x30
     460:	f9 a8       	ldd	r15, Y+49	; 0x31
     462:	5e 01       	movw	r10, r28
     464:	82 e3       	ldi	r24, 0x32	; 50
     466:	a8 0e       	add	r10, r24
     468:	b1 1c       	adc	r11, r1
     46a:	01 e0       	ldi	r16, 0x01	; 1
     46c:	10 e0       	ldi	r17, 0x00	; 0
     46e:	a7 01       	movw	r20, r14
     470:	96 01       	movw	r18, r12
     472:	b5 01       	movw	r22, r10
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <disk_write>
     47a:	81 11       	cpse	r24, r1
     47c:	34 c0       	rjmp	.+104    	; 0x4e6 <sync_window+0xae>
     47e:	1c 82       	std	Y+4, r1	; 0x04
     480:	8a a1       	ldd	r24, Y+34	; 0x22
     482:	9b a1       	ldd	r25, Y+35	; 0x23
     484:	ac a1       	ldd	r26, Y+36	; 0x24
     486:	bd a1       	ldd	r27, Y+37	; 0x25
     488:	b7 01       	movw	r22, r14
     48a:	a6 01       	movw	r20, r12
     48c:	48 1b       	sub	r20, r24
     48e:	59 0b       	sbc	r21, r25
     490:	6a 0b       	sbc	r22, r26
     492:	7b 0b       	sbc	r23, r27
     494:	8a 8d       	ldd	r24, Y+26	; 0x1a
     496:	9b 8d       	ldd	r25, Y+27	; 0x1b
     498:	ac 8d       	ldd	r26, Y+28	; 0x1c
     49a:	bd 8d       	ldd	r27, Y+29	; 0x1d
     49c:	48 17       	cp	r20, r24
     49e:	59 07       	cpc	r21, r25
     4a0:	6a 07       	cpc	r22, r26
     4a2:	7b 07       	cpc	r23, r27
     4a4:	10 f5       	brcc	.+68     	; 0x4ea <sync_window+0xb2>
     4a6:	8b 80       	ldd	r8, Y+3	; 0x03
     4a8:	91 2c       	mov	r9, r1
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	88 16       	cp	r8, r24
     4ae:	91 04       	cpc	r9, r1
     4b0:	f0 f0       	brcs	.+60     	; 0x4ee <sync_window+0xb6>
     4b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     4b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     4b6:	ac 8d       	ldd	r26, Y+28	; 0x1c
     4b8:	bd 8d       	ldd	r27, Y+29	; 0x1d
     4ba:	c8 0e       	add	r12, r24
     4bc:	d9 1e       	adc	r13, r25
     4be:	ea 1e       	adc	r14, r26
     4c0:	fb 1e       	adc	r15, r27
     4c2:	01 e0       	ldi	r16, 0x01	; 1
     4c4:	10 e0       	ldi	r17, 0x00	; 0
     4c6:	a7 01       	movw	r20, r14
     4c8:	96 01       	movw	r18, r12
     4ca:	b5 01       	movw	r22, r10
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <disk_write>
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	88 1a       	sub	r8, r24
     4d6:	91 08       	sbc	r9, r1
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	88 16       	cp	r8, r24
     4dc:	91 04       	cpc	r9, r1
     4de:	49 f7       	brne	.-46     	; 0x4b2 <sync_window+0x7a>
     4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <sync_window+0xba>
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <sync_window+0xbc>
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <sync_window+0xbc>
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <sync_window+0xbc>
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <sync_window+0xbc>
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	0f 91       	pop	r16
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	df 90       	pop	r13
     502:	cf 90       	pop	r12
     504:	bf 90       	pop	r11
     506:	af 90       	pop	r10
     508:	9f 90       	pop	r9
     50a:	8f 90       	pop	r8
     50c:	08 95       	ret

0000050e <move_window>:
     50e:	bf 92       	push	r11
     510:	cf 92       	push	r12
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	ec 01       	movw	r28, r24
     522:	6a 01       	movw	r12, r20
     524:	7b 01       	movw	r14, r22
     526:	8e a5       	ldd	r24, Y+46	; 0x2e
     528:	9f a5       	ldd	r25, Y+47	; 0x2f
     52a:	a8 a9       	ldd	r26, Y+48	; 0x30
     52c:	b9 a9       	ldd	r27, Y+49	; 0x31
     52e:	84 17       	cp	r24, r20
     530:	95 07       	cpc	r25, r21
     532:	a6 07       	cpc	r26, r22
     534:	b7 07       	cpc	r27, r23
     536:	e1 f0       	breq	.+56     	; 0x570 <move_window+0x62>
     538:	ce 01       	movw	r24, r28
     53a:	7e df       	rcall	.-260    	; 0x438 <sync_window>
     53c:	b8 2e       	mov	r11, r24
     53e:	81 11       	cpse	r24, r1
     540:	18 c0       	rjmp	.+48     	; 0x572 <move_window+0x64>
     542:	01 e0       	ldi	r16, 0x01	; 1
     544:	10 e0       	ldi	r17, 0x00	; 0
     546:	a7 01       	movw	r20, r14
     548:	96 01       	movw	r18, r12
     54a:	be 01       	movw	r22, r28
     54c:	6e 5c       	subi	r22, 0xCE	; 206
     54e:	7f 4f       	sbci	r23, 0xFF	; 255
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	0e 94 a5 12 	call	0x254a	; 0x254a <disk_read>
     556:	88 23       	and	r24, r24
     558:	31 f0       	breq	.+12     	; 0x566 <move_window+0x58>
     55a:	bb 24       	eor	r11, r11
     55c:	b3 94       	inc	r11
     55e:	cc 24       	eor	r12, r12
     560:	ca 94       	dec	r12
     562:	dc 2c       	mov	r13, r12
     564:	76 01       	movw	r14, r12
     566:	ce a6       	std	Y+46, r12	; 0x2e
     568:	df a6       	std	Y+47, r13	; 0x2f
     56a:	e8 aa       	std	Y+48, r14	; 0x30
     56c:	f9 aa       	std	Y+49, r15	; 0x31
     56e:	01 c0       	rjmp	.+2      	; 0x572 <move_window+0x64>
     570:	b1 2c       	mov	r11, r1
     572:	8b 2d       	mov	r24, r11
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	ff 90       	pop	r15
     57e:	ef 90       	pop	r14
     580:	df 90       	pop	r13
     582:	cf 90       	pop	r12
     584:	bf 90       	pop	r11
     586:	08 95       	ret

00000588 <check_fs>:
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ec 01       	movw	r28, r24
     592:	1c 82       	std	Y+4, r1	; 0x04
     594:	0f ef       	ldi	r16, 0xFF	; 255
     596:	1f ef       	ldi	r17, 0xFF	; 255
     598:	98 01       	movw	r18, r16
     59a:	0e a7       	std	Y+46, r16	; 0x2e
     59c:	1f a7       	std	Y+47, r17	; 0x2f
     59e:	28 ab       	std	Y+48, r18	; 0x30
     5a0:	39 ab       	std	Y+49, r19	; 0x31
     5a2:	b5 df       	rcall	.-150    	; 0x50e <move_window>
     5a4:	81 11       	cpse	r24, r1
     5a6:	23 c0       	rjmp	.+70     	; 0x5ee <check_fs+0x66>
     5a8:	fe 01       	movw	r30, r28
     5aa:	e0 5d       	subi	r30, 0xD0	; 208
     5ac:	fd 4f       	sbci	r31, 0xFD	; 253
     5ae:	80 81       	ld	r24, Z
     5b0:	91 81       	ldd	r25, Z+1	; 0x01
     5b2:	85 35       	cpi	r24, 0x55	; 85
     5b4:	9a 4a       	sbci	r25, 0xAA	; 170
     5b6:	e9 f4       	brne	.+58     	; 0x5f2 <check_fs+0x6a>
     5b8:	e8 5c       	subi	r30, 0xC8	; 200
     5ba:	f1 40       	sbci	r31, 0x01	; 1
     5bc:	40 81       	ld	r20, Z
     5be:	51 81       	ldd	r21, Z+1	; 0x01
     5c0:	62 81       	ldd	r22, Z+2	; 0x02
     5c2:	73 81       	ldd	r23, Z+3	; 0x03
     5c4:	77 27       	eor	r23, r23
     5c6:	46 34       	cpi	r20, 0x46	; 70
     5c8:	51 44       	sbci	r21, 0x41	; 65
     5ca:	64 45       	sbci	r22, 0x54	; 84
     5cc:	71 05       	cpc	r23, r1
     5ce:	99 f0       	breq	.+38     	; 0x5f6 <check_fs+0x6e>
     5d0:	cc 57       	subi	r28, 0x7C	; 124
     5d2:	df 4f       	sbci	r29, 0xFF	; 255
     5d4:	48 81       	ld	r20, Y
     5d6:	59 81       	ldd	r21, Y+1	; 0x01
     5d8:	6a 81       	ldd	r22, Y+2	; 0x02
     5da:	7b 81       	ldd	r23, Y+3	; 0x03
     5dc:	77 27       	eor	r23, r23
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	46 34       	cpi	r20, 0x46	; 70
     5e2:	51 44       	sbci	r21, 0x41	; 65
     5e4:	64 45       	sbci	r22, 0x54	; 84
     5e6:	71 05       	cpc	r23, r1
     5e8:	39 f4       	brne	.+14     	; 0x5f8 <check_fs+0x70>
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <check_fs+0x70>
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <check_fs+0x70>
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <check_fs+0x70>
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	08 95       	ret

00000602 <validate>:
     602:	00 97       	sbiw	r24, 0x00	; 0
     604:	c9 f0       	breq	.+50     	; 0x638 <validate+0x36>
     606:	dc 01       	movw	r26, r24
     608:	ed 91       	ld	r30, X+
     60a:	fc 91       	ld	r31, X
     60c:	11 97       	sbiw	r26, 0x01	; 1
     60e:	30 97       	sbiw	r30, 0x00	; 0
     610:	a9 f0       	breq	.+42     	; 0x63c <validate+0x3a>
     612:	20 81       	ld	r18, Z
     614:	22 23       	and	r18, r18
     616:	a1 f0       	breq	.+40     	; 0x640 <validate+0x3e>
     618:	26 81       	ldd	r18, Z+6	; 0x06
     61a:	37 81       	ldd	r19, Z+7	; 0x07
     61c:	12 96       	adiw	r26, 0x02	; 2
     61e:	8d 91       	ld	r24, X+
     620:	9c 91       	ld	r25, X
     622:	13 97       	sbiw	r26, 0x03	; 3
     624:	28 17       	cp	r18, r24
     626:	39 07       	cpc	r19, r25
     628:	69 f4       	brne	.+26     	; 0x644 <validate+0x42>
     62a:	81 81       	ldd	r24, Z+1	; 0x01
     62c:	0e 94 9e 12 	call	0x253c	; 0x253c <disk_status>
     630:	80 ff       	sbrs	r24, 0
     632:	0a c0       	rjmp	.+20     	; 0x648 <validate+0x46>
     634:	83 e0       	ldi	r24, 0x03	; 3
     636:	08 95       	ret
     638:	89 e0       	ldi	r24, 0x09	; 9
     63a:	08 95       	ret
     63c:	89 e0       	ldi	r24, 0x09	; 9
     63e:	08 95       	ret
     640:	89 e0       	ldi	r24, 0x09	; 9
     642:	08 95       	ret
     644:	89 e0       	ldi	r24, 0x09	; 9
     646:	08 95       	ret
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	08 95       	ret

0000064c <find_volume>:
     64c:	2f 92       	push	r2
     64e:	3f 92       	push	r3
     650:	4f 92       	push	r4
     652:	5f 92       	push	r5
     654:	6f 92       	push	r6
     656:	7f 92       	push	r7
     658:	8f 92       	push	r8
     65a:	9f 92       	push	r9
     65c:	af 92       	push	r10
     65e:	bf 92       	push	r11
     660:	cf 92       	push	r12
     662:	df 92       	push	r13
     664:	ef 92       	push	r14
     666:	ff 92       	push	r15
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	cd b7       	in	r28, 0x3d	; 61
     672:	de b7       	in	r29, 0x3e	; 62
     674:	6d 97       	sbiw	r28, 0x1d	; 29
     676:	cd bf       	out	0x3d, r28	; 61
     678:	de bf       	out	0x3e, r29	; 62
     67a:	6c 01       	movw	r12, r24
     67c:	cb 01       	movw	r24, r22
     67e:	b4 2e       	mov	r11, r20
     680:	d6 01       	movw	r26, r12
     682:	1d 92       	st	X+, r1
     684:	1c 92       	st	X, r1
     686:	9e de       	rcall	.-708    	; 0x3c4 <get_ldnumber>
     688:	7c 01       	movw	r14, r24
     68a:	99 23       	and	r25, r25
     68c:	0c f4       	brge	.+2      	; 0x690 <find_volume+0x44>
     68e:	2b c2       	rjmp	.+1110   	; 0xae6 <find_volume+0x49a>
     690:	fc 01       	movw	r30, r24
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	eb 55       	subi	r30, 0x5B	; 91
     698:	fe 4d       	sbci	r31, 0xDE	; 222
     69a:	00 81       	ld	r16, Z
     69c:	11 81       	ldd	r17, Z+1	; 0x01
     69e:	01 15       	cp	r16, r1
     6a0:	11 05       	cpc	r17, r1
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <find_volume+0x5a>
     6a4:	22 c2       	rjmp	.+1092   	; 0xaea <find_volume+0x49e>
     6a6:	f6 01       	movw	r30, r12
     6a8:	00 83       	st	Z, r16
     6aa:	11 83       	std	Z+1, r17	; 0x01
     6ac:	d8 01       	movw	r26, r16
     6ae:	8c 91       	ld	r24, X
     6b0:	88 23       	and	r24, r24
     6b2:	69 f0       	breq	.+26     	; 0x6ce <find_volume+0x82>
     6b4:	11 96       	adiw	r26, 0x01	; 1
     6b6:	8c 91       	ld	r24, X
     6b8:	0e 94 9e 12 	call	0x253c	; 0x253c <disk_status>
     6bc:	80 fd       	sbrc	r24, 0
     6be:	07 c0       	rjmp	.+14     	; 0x6ce <find_volume+0x82>
     6c0:	bb 20       	and	r11, r11
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <find_volume+0x7a>
     6c4:	14 c2       	rjmp	.+1064   	; 0xaee <find_volume+0x4a2>
     6c6:	82 fd       	sbrc	r24, 2
     6c8:	14 c2       	rjmp	.+1064   	; 0xaf2 <find_volume+0x4a6>
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	5d c2       	rjmp	.+1210   	; 0xb88 <find_volume+0x53c>
     6ce:	f8 01       	movw	r30, r16
     6d0:	10 82       	st	Z, r1
     6d2:	e1 82       	std	Z+1, r14	; 0x01
     6d4:	8e 2d       	mov	r24, r14
     6d6:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <disk_initialize>
     6da:	80 fd       	sbrc	r24, 0
     6dc:	0c c2       	rjmp	.+1048   	; 0xaf6 <find_volume+0x4aa>
     6de:	bb 20       	and	r11, r11
     6e0:	11 f0       	breq	.+4      	; 0x6e6 <find_volume+0x9a>
     6e2:	82 fd       	sbrc	r24, 2
     6e4:	0a c2       	rjmp	.+1044   	; 0xafa <find_volume+0x4ae>
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	ba 01       	movw	r22, r20
     6ec:	c8 01       	movw	r24, r16
     6ee:	4c df       	rcall	.-360    	; 0x588 <check_fs>
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	09 f0       	breq	.+2      	; 0x6f6 <find_volume+0xaa>
     6f4:	3f c0       	rjmp	.+126    	; 0x774 <find_volume+0x128>
     6f6:	f8 01       	movw	r30, r16
     6f8:	ec 50       	subi	r30, 0x0C	; 12
     6fa:	fe 4f       	sbci	r31, 0xFE	; 254
     6fc:	7e 01       	movw	r14, r28
     6fe:	21 e1       	ldi	r18, 0x11	; 17
     700:	e2 0e       	add	r14, r18
     702:	f1 1c       	adc	r15, r1
     704:	9e 01       	movw	r18, r28
     706:	2f 5f       	subi	r18, 0xFF	; 255
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	af 01       	movw	r20, r30
     70c:	da 01       	movw	r26, r20
     70e:	8c 91       	ld	r24, X
     710:	88 23       	and	r24, r24
     712:	39 f0       	breq	.+14     	; 0x722 <find_volume+0xd6>
     714:	14 96       	adiw	r26, 0x04	; 4
     716:	8d 91       	ld	r24, X+
     718:	9d 91       	ld	r25, X+
     71a:	0d 90       	ld	r0, X+
     71c:	bc 91       	ld	r27, X
     71e:	a0 2d       	mov	r26, r0
     720:	03 c0       	rjmp	.+6      	; 0x728 <find_volume+0xdc>
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	dc 01       	movw	r26, r24
     728:	f9 01       	movw	r30, r18
     72a:	81 93       	st	Z+, r24
     72c:	91 93       	st	Z+, r25
     72e:	a1 93       	st	Z+, r26
     730:	b1 93       	st	Z+, r27
     732:	9f 01       	movw	r18, r30
     734:	40 5f       	subi	r20, 0xF0	; 240
     736:	5f 4f       	sbci	r21, 0xFF	; 255
     738:	ee 15       	cp	r30, r14
     73a:	ff 05       	cpc	r31, r15
     73c:	39 f7       	brne	.-50     	; 0x70c <find_volume+0xc0>
     73e:	9e 01       	movw	r18, r28
     740:	2f 5f       	subi	r18, 0xFF	; 255
     742:	3f 4f       	sbci	r19, 0xFF	; 255
     744:	69 01       	movw	r12, r18
     746:	d6 01       	movw	r26, r12
     748:	4d 90       	ld	r4, X+
     74a:	5d 90       	ld	r5, X+
     74c:	6d 90       	ld	r6, X+
     74e:	7d 90       	ld	r7, X+
     750:	6d 01       	movw	r12, r26
     752:	41 14       	cp	r4, r1
     754:	51 04       	cpc	r5, r1
     756:	61 04       	cpc	r6, r1
     758:	71 04       	cpc	r7, r1
     75a:	39 f0       	breq	.+14     	; 0x76a <find_volume+0x11e>
     75c:	b3 01       	movw	r22, r6
     75e:	a2 01       	movw	r20, r4
     760:	c8 01       	movw	r24, r16
     762:	12 df       	rcall	.-476    	; 0x588 <check_fs>
     764:	81 11       	cpse	r24, r1
     766:	02 c0       	rjmp	.+4      	; 0x76c <find_volume+0x120>
     768:	08 c0       	rjmp	.+16     	; 0x77a <find_volume+0x12e>
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	ce 14       	cp	r12, r14
     76e:	df 04       	cpc	r13, r15
     770:	51 f7       	brne	.-44     	; 0x746 <find_volume+0xfa>
     772:	03 c0       	rjmp	.+6      	; 0x77a <find_volume+0x12e>
     774:	41 2c       	mov	r4, r1
     776:	51 2c       	mov	r5, r1
     778:	32 01       	movw	r6, r4
     77a:	83 30       	cpi	r24, 0x03	; 3
     77c:	09 f4       	brne	.+2      	; 0x780 <find_volume+0x134>
     77e:	bf c1       	rjmp	.+894    	; 0xafe <find_volume+0x4b2>
     780:	81 11       	cpse	r24, r1
     782:	bf c1       	rjmp	.+894    	; 0xb02 <find_volume+0x4b6>
     784:	f8 01       	movw	r30, r16
     786:	85 ad       	ldd	r24, Z+61	; 0x3d
     788:	96 ad       	ldd	r25, Z+62	; 0x3e
     78a:	81 15       	cp	r24, r1
     78c:	92 40       	sbci	r25, 0x02	; 2
     78e:	09 f0       	breq	.+2      	; 0x792 <find_volume+0x146>
     790:	ba c1       	rjmp	.+884    	; 0xb06 <find_volume+0x4ba>
     792:	f8 01       	movw	r30, r16
     794:	e8 5b       	subi	r30, 0xB8	; 184
     796:	ff 4f       	sbci	r31, 0xFF	; 255
     798:	c0 80       	ld	r12, Z
     79a:	d1 80       	ldd	r13, Z+1	; 0x01
     79c:	e1 2c       	mov	r14, r1
     79e:	f1 2c       	mov	r15, r1
     7a0:	c1 14       	cp	r12, r1
     7a2:	d1 04       	cpc	r13, r1
     7a4:	e1 04       	cpc	r14, r1
     7a6:	f1 04       	cpc	r15, r1
     7a8:	29 f4       	brne	.+10     	; 0x7b4 <find_volume+0x168>
     7aa:	3e 96       	adiw	r30, 0x0e	; 14
     7ac:	c0 80       	ld	r12, Z
     7ae:	d1 80       	ldd	r13, Z+1	; 0x01
     7b0:	e2 80       	ldd	r14, Z+2	; 0x02
     7b2:	f3 80       	ldd	r15, Z+3	; 0x03
     7b4:	d8 01       	movw	r26, r16
     7b6:	5a 96       	adiw	r26, 0x1a	; 26
     7b8:	cd 92       	st	X+, r12
     7ba:	dd 92       	st	X+, r13
     7bc:	ed 92       	st	X+, r14
     7be:	fc 92       	st	X, r15
     7c0:	5d 97       	sbiw	r26, 0x1d	; 29
     7c2:	f8 01       	movw	r30, r16
     7c4:	ee 5b       	subi	r30, 0xBE	; 190
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	a0 81       	ld	r26, Z
     7ca:	f8 01       	movw	r30, r16
     7cc:	a3 83       	std	Z+3, r26	; 0x03
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
     7d0:	8a 0f       	add	r24, r26
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	08 f0       	brcs	.+2      	; 0x7d8 <find_volume+0x18c>
     7d6:	99 c1       	rjmp	.+818    	; 0xb0a <find_volume+0x4be>
     7d8:	f7 ad       	ldd	r31, Z+63	; 0x3f
     7da:	f9 8b       	std	Y+17, r31	; 0x11
     7dc:	2f 2f       	mov	r18, r31
     7de:	f8 01       	movw	r30, r16
     7e0:	22 83       	std	Z+2, r18	; 0x02
     7e2:	22 23       	and	r18, r18
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <find_volume+0x19c>
     7e6:	93 c1       	rjmp	.+806    	; 0xb0e <find_volume+0x4c2>
     7e8:	82 2f       	mov	r24, r18
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	9c 01       	movw	r18, r24
     7ee:	21 50       	subi	r18, 0x01	; 1
     7f0:	31 09       	sbc	r19, r1
     7f2:	82 23       	and	r24, r18
     7f4:	93 23       	and	r25, r19
     7f6:	89 2b       	or	r24, r25
     7f8:	09 f0       	breq	.+2      	; 0x7fc <find_volume+0x1b0>
     7fa:	8b c1       	rjmp	.+790    	; 0xb12 <find_volume+0x4c6>
     7fc:	ed 5b       	subi	r30, 0xBD	; 189
     7fe:	ff 4f       	sbci	r31, 0xFF	; 255
     800:	20 80       	ld	r2, Z
     802:	31 80       	ldd	r3, Z+1	; 0x01
     804:	f8 01       	movw	r30, r16
     806:	20 86       	std	Z+8, r2	; 0x08
     808:	31 86       	std	Z+9, r3	; 0x09
     80a:	c1 01       	movw	r24, r2
     80c:	8f 70       	andi	r24, 0x0F	; 15
     80e:	99 27       	eor	r25, r25
     810:	89 2b       	or	r24, r25
     812:	09 f0       	breq	.+2      	; 0x816 <find_volume+0x1ca>
     814:	80 c1       	rjmp	.+768    	; 0xb16 <find_volume+0x4ca>
     816:	eb 5b       	subi	r30, 0xBB	; 187
     818:	ff 4f       	sbci	r31, 0xFF	; 255
     81a:	80 80       	ld	r8, Z
     81c:	91 80       	ldd	r9, Z+1	; 0x01
     81e:	a1 2c       	mov	r10, r1
     820:	b1 2c       	mov	r11, r1
     822:	81 14       	cp	r8, r1
     824:	91 04       	cpc	r9, r1
     826:	a1 04       	cpc	r10, r1
     828:	b1 04       	cpc	r11, r1
     82a:	29 f4       	brne	.+10     	; 0x836 <find_volume+0x1ea>
     82c:	3d 96       	adiw	r30, 0x0d	; 13
     82e:	80 80       	ld	r8, Z
     830:	91 80       	ldd	r9, Z+1	; 0x01
     832:	a2 80       	ldd	r10, Z+2	; 0x02
     834:	b3 80       	ldd	r11, Z+3	; 0x03
     836:	f8 01       	movw	r30, r16
     838:	e0 5c       	subi	r30, 0xC0	; 192
     83a:	ff 4f       	sbci	r31, 0xFF	; 255
     83c:	01 90       	ld	r0, Z+
     83e:	f0 81       	ld	r31, Z
     840:	e0 2d       	mov	r30, r0
     842:	30 97       	sbiw	r30, 0x00	; 0
     844:	09 f4       	brne	.+2      	; 0x848 <find_volume+0x1fc>
     846:	69 c1       	rjmp	.+722    	; 0xb1a <find_volume+0x4ce>
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	a7 01       	movw	r20, r14
     84c:	96 01       	movw	r18, r12
     84e:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__muluhisi3>
     852:	6a 8f       	std	Y+26, r22	; 0x1a
     854:	7b 8f       	std	Y+27, r23	; 0x1b
     856:	8c 8f       	std	Y+28, r24	; 0x1c
     858:	9d 8f       	std	Y+29, r25	; 0x1d
     85a:	9f 01       	movw	r18, r30
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	2e 8b       	std	Y+22, r18	; 0x16
     862:	3f 8b       	std	Y+23, r19	; 0x17
     864:	48 8f       	std	Y+24, r20	; 0x18
     866:	59 8f       	std	Y+25, r21	; 0x19
     868:	c1 01       	movw	r24, r2
     86a:	92 95       	swap	r25
     86c:	82 95       	swap	r24
     86e:	8f 70       	andi	r24, 0x0F	; 15
     870:	89 27       	eor	r24, r25
     872:	9f 70       	andi	r25, 0x0F	; 15
     874:	89 27       	eor	r24, r25
     876:	28 0f       	add	r18, r24
     878:	39 1f       	adc	r19, r25
     87a:	41 1d       	adc	r20, r1
     87c:	51 1d       	adc	r21, r1
     87e:	da 01       	movw	r26, r20
     880:	c9 01       	movw	r24, r18
     882:	2a 8d       	ldd	r18, Y+26	; 0x1a
     884:	3b 8d       	ldd	r19, Y+27	; 0x1b
     886:	4c 8d       	ldd	r20, Y+28	; 0x1c
     888:	5d 8d       	ldd	r21, Y+29	; 0x1d
     88a:	28 0f       	add	r18, r24
     88c:	39 1f       	adc	r19, r25
     88e:	4a 1f       	adc	r20, r26
     890:	5b 1f       	adc	r21, r27
     892:	2a 8b       	std	Y+18, r18	; 0x12
     894:	3b 8b       	std	Y+19, r19	; 0x13
     896:	4c 8b       	std	Y+20, r20	; 0x14
     898:	5d 8b       	std	Y+21, r21	; 0x15
     89a:	82 16       	cp	r8, r18
     89c:	93 06       	cpc	r9, r19
     89e:	a4 06       	cpc	r10, r20
     8a0:	b5 06       	cpc	r11, r21
     8a2:	08 f4       	brcc	.+2      	; 0x8a6 <find_volume+0x25a>
     8a4:	3c c1       	rjmp	.+632    	; 0xb1e <find_volume+0x4d2>
     8a6:	c5 01       	movw	r24, r10
     8a8:	b4 01       	movw	r22, r8
     8aa:	62 1b       	sub	r22, r18
     8ac:	73 0b       	sbc	r23, r19
     8ae:	84 0b       	sbc	r24, r20
     8b0:	95 0b       	sbc	r25, r21
     8b2:	e9 89       	ldd	r30, Y+17	; 0x11
     8b4:	2e 2f       	mov	r18, r30
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	50 e0       	ldi	r21, 0x00	; 0
     8bc:	0e 94 ce 1e 	call	0x3d9c	; 0x3d9c <__udivmodsi4>
     8c0:	da 01       	movw	r26, r20
     8c2:	c9 01       	movw	r24, r18
     8c4:	21 15       	cp	r18, r1
     8c6:	31 05       	cpc	r19, r1
     8c8:	41 05       	cpc	r20, r1
     8ca:	51 05       	cpc	r21, r1
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <find_volume+0x284>
     8ce:	29 c1       	rjmp	.+594    	; 0xb22 <find_volume+0x4d6>
     8d0:	26 3f       	cpi	r18, 0xF6	; 246
     8d2:	ff e0       	ldi	r31, 0x0F	; 15
     8d4:	3f 07       	cpc	r19, r31
     8d6:	41 05       	cpc	r20, r1
     8d8:	51 05       	cpc	r21, r1
     8da:	18 f4       	brcc	.+6      	; 0x8e2 <find_volume+0x296>
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	69 8b       	std	Y+17, r22	; 0x11
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <find_volume+0x29a>
     8e2:	e2 e0       	ldi	r30, 0x02	; 2
     8e4:	e9 8b       	std	Y+17, r30	; 0x11
     8e6:	86 3f       	cpi	r24, 0xF6	; 246
     8e8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ea:	a1 05       	cpc	r26, r1
     8ec:	b1 05       	cpc	r27, r1
     8ee:	08 f0       	brcs	.+2      	; 0x8f2 <find_volume+0x2a6>
     8f0:	20 c1       	rjmp	.+576    	; 0xb32 <find_volume+0x4e6>
     8f2:	49 01       	movw	r8, r18
     8f4:	5a 01       	movw	r10, r20
     8f6:	62 e0       	ldi	r22, 0x02	; 2
     8f8:	86 0e       	add	r8, r22
     8fa:	91 1c       	adc	r9, r1
     8fc:	a1 1c       	adc	r10, r1
     8fe:	b1 1c       	adc	r11, r1
     900:	d8 01       	movw	r26, r16
     902:	56 96       	adiw	r26, 0x16	; 22
     904:	8d 92       	st	X+, r8
     906:	9d 92       	st	X+, r9
     908:	ad 92       	st	X+, r10
     90a:	bc 92       	st	X, r11
     90c:	59 97       	sbiw	r26, 0x19	; 25
     90e:	f8 01       	movw	r30, r16
     910:	46 8e       	std	Z+30, r4	; 0x1e
     912:	57 8e       	std	Z+31, r5	; 0x1f
     914:	60 a2       	std	Z+32, r6	; 0x20
     916:	71 a2       	std	Z+33, r7	; 0x21
     918:	8e 89       	ldd	r24, Y+22	; 0x16
     91a:	9f 89       	ldd	r25, Y+23	; 0x17
     91c:	a8 8d       	ldd	r26, Y+24	; 0x18
     91e:	b9 8d       	ldd	r27, Y+25	; 0x19
     920:	84 0d       	add	r24, r4
     922:	95 1d       	adc	r25, r5
     924:	a6 1d       	adc	r26, r6
     926:	b7 1d       	adc	r27, r7
     928:	82 a3       	std	Z+34, r24	; 0x22
     92a:	93 a3       	std	Z+35, r25	; 0x23
     92c:	a4 a3       	std	Z+36, r26	; 0x24
     92e:	b5 a3       	std	Z+37, r27	; 0x25
     930:	4a 89       	ldd	r20, Y+18	; 0x12
     932:	5b 89       	ldd	r21, Y+19	; 0x13
     934:	6c 89       	ldd	r22, Y+20	; 0x14
     936:	7d 89       	ldd	r23, Y+21	; 0x15
     938:	44 0d       	add	r20, r4
     93a:	55 1d       	adc	r21, r5
     93c:	66 1d       	adc	r22, r6
     93e:	77 1d       	adc	r23, r7
     940:	42 a7       	std	Z+42, r20	; 0x2a
     942:	53 a7       	std	Z+43, r21	; 0x2b
     944:	64 a7       	std	Z+44, r22	; 0x2c
     946:	75 a7       	std	Z+45, r23	; 0x2d
     948:	f9 89       	ldd	r31, Y+17	; 0x11
     94a:	f3 30       	cpi	r31, 0x03	; 3
     94c:	c1 f4       	brne	.+48     	; 0x97e <find_volume+0x332>
     94e:	23 28       	or	r2, r3
     950:	09 f0       	breq	.+2      	; 0x954 <find_volume+0x308>
     952:	e9 c0       	rjmp	.+466    	; 0xb26 <find_volume+0x4da>
     954:	f8 01       	movw	r30, r16
     956:	e2 5a       	subi	r30, 0xA2	; 162
     958:	ff 4f       	sbci	r31, 0xFF	; 255
     95a:	80 81       	ld	r24, Z
     95c:	91 81       	ldd	r25, Z+1	; 0x01
     95e:	a2 81       	ldd	r26, Z+2	; 0x02
     960:	b3 81       	ldd	r27, Z+3	; 0x03
     962:	f8 01       	movw	r30, r16
     964:	86 a3       	std	Z+38, r24	; 0x26
     966:	97 a3       	std	Z+39, r25	; 0x27
     968:	a0 a7       	std	Z+40, r26	; 0x28
     96a:	b1 a7       	std	Z+41, r27	; 0x29
     96c:	88 0c       	add	r8, r8
     96e:	99 1c       	adc	r9, r9
     970:	aa 1c       	adc	r10, r10
     972:	bb 1c       	adc	r11, r11
     974:	88 0c       	add	r8, r8
     976:	99 1c       	adc	r9, r9
     978:	aa 1c       	adc	r10, r10
     97a:	bb 1c       	adc	r11, r11
     97c:	2d c0       	rjmp	.+90     	; 0x9d8 <find_volume+0x38c>
     97e:	23 28       	or	r2, r3
     980:	09 f4       	brne	.+2      	; 0x984 <find_volume+0x338>
     982:	d3 c0       	rjmp	.+422    	; 0xb2a <find_volume+0x4de>
     984:	2a 8d       	ldd	r18, Y+26	; 0x1a
     986:	3b 8d       	ldd	r19, Y+27	; 0x1b
     988:	4c 8d       	ldd	r20, Y+28	; 0x1c
     98a:	5d 8d       	ldd	r21, Y+29	; 0x1d
     98c:	82 0f       	add	r24, r18
     98e:	93 1f       	adc	r25, r19
     990:	a4 1f       	adc	r26, r20
     992:	b5 1f       	adc	r27, r21
     994:	f8 01       	movw	r30, r16
     996:	86 a3       	std	Z+38, r24	; 0x26
     998:	97 a3       	std	Z+39, r25	; 0x27
     99a:	a0 a7       	std	Z+40, r26	; 0x28
     99c:	b1 a7       	std	Z+41, r27	; 0x29
     99e:	f9 89       	ldd	r31, Y+17	; 0x11
     9a0:	f2 30       	cpi	r31, 0x02	; 2
     9a2:	29 f4       	brne	.+10     	; 0x9ae <find_volume+0x362>
     9a4:	88 0c       	add	r8, r8
     9a6:	99 1c       	adc	r9, r9
     9a8:	aa 1c       	adc	r10, r10
     9aa:	bb 1c       	adc	r11, r11
     9ac:	15 c0       	rjmp	.+42     	; 0x9d8 <find_volume+0x38c>
     9ae:	a3 e0       	ldi	r26, 0x03	; 3
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	a5 01       	movw	r20, r10
     9b4:	94 01       	movw	r18, r8
     9b6:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__muluhisi3>
     9ba:	dc 01       	movw	r26, r24
     9bc:	cb 01       	movw	r24, r22
     9be:	b6 95       	lsr	r27
     9c0:	a7 95       	ror	r26
     9c2:	97 95       	ror	r25
     9c4:	87 95       	ror	r24
     9c6:	21 e0       	ldi	r18, 0x01	; 1
     9c8:	82 22       	and	r8, r18
     9ca:	99 24       	eor	r9, r9
     9cc:	aa 24       	eor	r10, r10
     9ce:	bb 24       	eor	r11, r11
     9d0:	88 0e       	add	r8, r24
     9d2:	99 1e       	adc	r9, r25
     9d4:	aa 1e       	adc	r10, r26
     9d6:	bb 1e       	adc	r11, r27
     9d8:	3f ef       	ldi	r19, 0xFF	; 255
     9da:	83 0e       	add	r8, r19
     9dc:	31 e0       	ldi	r19, 0x01	; 1
     9de:	93 1e       	adc	r9, r19
     9e0:	a1 1c       	adc	r10, r1
     9e2:	b1 1c       	adc	r11, r1
     9e4:	07 2e       	mov	r0, r23
     9e6:	79 e0       	ldi	r23, 0x09	; 9
     9e8:	b6 94       	lsr	r11
     9ea:	a7 94       	ror	r10
     9ec:	97 94       	ror	r9
     9ee:	87 94       	ror	r8
     9f0:	7a 95       	dec	r23
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <find_volume+0x39c>
     9f4:	70 2d       	mov	r23, r0
     9f6:	c8 14       	cp	r12, r8
     9f8:	d9 04       	cpc	r13, r9
     9fa:	ea 04       	cpc	r14, r10
     9fc:	fb 04       	cpc	r15, r11
     9fe:	08 f4       	brcc	.+2      	; 0xa02 <find_volume+0x3b6>
     a00:	96 c0       	rjmp	.+300    	; 0xb2e <find_volume+0x4e2>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	9f ef       	ldi	r25, 0xFF	; 255
     a06:	dc 01       	movw	r26, r24
     a08:	f8 01       	movw	r30, r16
     a0a:	86 87       	std	Z+14, r24	; 0x0e
     a0c:	97 87       	std	Z+15, r25	; 0x0f
     a0e:	a0 8b       	std	Z+16, r26	; 0x10
     a10:	b1 8b       	std	Z+17, r27	; 0x11
     a12:	82 87       	std	Z+10, r24	; 0x0a
     a14:	93 87       	std	Z+11, r25	; 0x0b
     a16:	a4 87       	std	Z+12, r26	; 0x0c
     a18:	b5 87       	std	Z+13, r27	; 0x0d
     a1a:	80 e8       	ldi	r24, 0x80	; 128
     a1c:	85 83       	std	Z+5, r24	; 0x05
     a1e:	f9 89       	ldd	r31, Y+17	; 0x11
     a20:	f3 30       	cpi	r31, 0x03	; 3
     a22:	09 f0       	breq	.+2      	; 0xa26 <find_volume+0x3da>
     a24:	48 c0       	rjmp	.+144    	; 0xab6 <find_volume+0x46a>
     a26:	f8 01       	movw	r30, r16
     a28:	ee 59       	subi	r30, 0x9E	; 158
     a2a:	ff 4f       	sbci	r31, 0xFF	; 255
     a2c:	80 81       	ld	r24, Z
     a2e:	91 81       	ldd	r25, Z+1	; 0x01
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	09 f0       	breq	.+2      	; 0xa36 <find_volume+0x3ea>
     a34:	40 c0       	rjmp	.+128    	; 0xab6 <find_volume+0x46a>
     a36:	b3 01       	movw	r22, r6
     a38:	a2 01       	movw	r20, r4
     a3a:	4f 5f       	subi	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	6f 4f       	sbci	r22, 0xFF	; 255
     a40:	7f 4f       	sbci	r23, 0xFF	; 255
     a42:	c8 01       	movw	r24, r16
     a44:	64 dd       	rcall	.-1336   	; 0x50e <move_window>
     a46:	81 11       	cpse	r24, r1
     a48:	36 c0       	rjmp	.+108    	; 0xab6 <find_volume+0x46a>
     a4a:	d8 01       	movw	r26, r16
     a4c:	15 96       	adiw	r26, 0x05	; 5
     a4e:	1c 92       	st	X, r1
     a50:	f8 01       	movw	r30, r16
     a52:	e0 5d       	subi	r30, 0xD0	; 208
     a54:	fd 4f       	sbci	r31, 0xFD	; 253
     a56:	80 81       	ld	r24, Z
     a58:	91 81       	ldd	r25, Z+1	; 0x01
     a5a:	85 35       	cpi	r24, 0x55	; 85
     a5c:	9a 4a       	sbci	r25, 0xAA	; 170
     a5e:	59 f5       	brne	.+86     	; 0xab6 <find_volume+0x46a>
     a60:	f8 01       	movw	r30, r16
     a62:	82 a9       	ldd	r24, Z+50	; 0x32
     a64:	93 a9       	ldd	r25, Z+51	; 0x33
     a66:	a4 a9       	ldd	r26, Z+52	; 0x34
     a68:	b5 a9       	ldd	r27, Z+53	; 0x35
     a6a:	82 35       	cpi	r24, 0x52	; 82
     a6c:	92 45       	sbci	r25, 0x52	; 82
     a6e:	a1 46       	sbci	r26, 0x61	; 97
     a70:	b1 44       	sbci	r27, 0x41	; 65
     a72:	09 f5       	brne	.+66     	; 0xab6 <find_volume+0x46a>
     a74:	f8 01       	movw	r30, r16
     a76:	ea 5e       	subi	r30, 0xEA	; 234
     a78:	fd 4f       	sbci	r31, 0xFD	; 253
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	a2 81       	ldd	r26, Z+2	; 0x02
     a80:	b3 81       	ldd	r27, Z+3	; 0x03
     a82:	82 37       	cpi	r24, 0x72	; 114
     a84:	92 47       	sbci	r25, 0x72	; 114
     a86:	a1 44       	sbci	r26, 0x41	; 65
     a88:	b1 46       	sbci	r27, 0x61	; 97
     a8a:	a9 f4       	brne	.+42     	; 0xab6 <find_volume+0x46a>
     a8c:	34 96       	adiw	r30, 0x04	; 4
     a8e:	80 81       	ld	r24, Z
     a90:	91 81       	ldd	r25, Z+1	; 0x01
     a92:	a2 81       	ldd	r26, Z+2	; 0x02
     a94:	b3 81       	ldd	r27, Z+3	; 0x03
     a96:	f8 01       	movw	r30, r16
     a98:	86 87       	std	Z+14, r24	; 0x0e
     a9a:	97 87       	std	Z+15, r25	; 0x0f
     a9c:	a0 8b       	std	Z+16, r26	; 0x10
     a9e:	b1 8b       	std	Z+17, r27	; 0x11
     aa0:	e2 5e       	subi	r30, 0xE2	; 226
     aa2:	fd 4f       	sbci	r31, 0xFD	; 253
     aa4:	80 81       	ld	r24, Z
     aa6:	91 81       	ldd	r25, Z+1	; 0x01
     aa8:	a2 81       	ldd	r26, Z+2	; 0x02
     aaa:	b3 81       	ldd	r27, Z+3	; 0x03
     aac:	f8 01       	movw	r30, r16
     aae:	82 87       	std	Z+10, r24	; 0x0a
     ab0:	93 87       	std	Z+11, r25	; 0x0b
     ab2:	a4 87       	std	Z+12, r26	; 0x0c
     ab4:	b5 87       	std	Z+13, r27	; 0x0d
     ab6:	e9 89       	ldd	r30, Y+17	; 0x11
     ab8:	d8 01       	movw	r26, r16
     aba:	ec 93       	st	X, r30
     abc:	80 91 a3 21 	lds	r24, 0x21A3
     ac0:	90 91 a4 21 	lds	r25, 0x21A4
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	80 93 a3 21 	sts	0x21A3, r24
     aca:	90 93 a4 21 	sts	0x21A4, r25
     ace:	16 96       	adiw	r26, 0x06	; 6
     ad0:	8d 93       	st	X+, r24
     ad2:	9c 93       	st	X, r25
     ad4:	17 97       	sbiw	r26, 0x07	; 7
     ad6:	52 96       	adiw	r26, 0x12	; 18
     ad8:	1d 92       	st	X+, r1
     ada:	1d 92       	st	X+, r1
     adc:	1d 92       	st	X+, r1
     ade:	1c 92       	st	X, r1
     ae0:	55 97       	sbiw	r26, 0x15	; 21
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	51 c0       	rjmp	.+162    	; 0xb88 <find_volume+0x53c>
     ae6:	8b e0       	ldi	r24, 0x0B	; 11
     ae8:	4f c0       	rjmp	.+158    	; 0xb88 <find_volume+0x53c>
     aea:	8c e0       	ldi	r24, 0x0C	; 12
     aec:	4d c0       	rjmp	.+154    	; 0xb88 <find_volume+0x53c>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	4b c0       	rjmp	.+150    	; 0xb88 <find_volume+0x53c>
     af2:	8a e0       	ldi	r24, 0x0A	; 10
     af4:	49 c0       	rjmp	.+146    	; 0xb88 <find_volume+0x53c>
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	47 c0       	rjmp	.+142    	; 0xb88 <find_volume+0x53c>
     afa:	8a e0       	ldi	r24, 0x0A	; 10
     afc:	45 c0       	rjmp	.+138    	; 0xb88 <find_volume+0x53c>
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	43 c0       	rjmp	.+134    	; 0xb88 <find_volume+0x53c>
     b02:	8d e0       	ldi	r24, 0x0D	; 13
     b04:	41 c0       	rjmp	.+130    	; 0xb88 <find_volume+0x53c>
     b06:	8d e0       	ldi	r24, 0x0D	; 13
     b08:	3f c0       	rjmp	.+126    	; 0xb88 <find_volume+0x53c>
     b0a:	8d e0       	ldi	r24, 0x0D	; 13
     b0c:	3d c0       	rjmp	.+122    	; 0xb88 <find_volume+0x53c>
     b0e:	8d e0       	ldi	r24, 0x0D	; 13
     b10:	3b c0       	rjmp	.+118    	; 0xb88 <find_volume+0x53c>
     b12:	8d e0       	ldi	r24, 0x0D	; 13
     b14:	39 c0       	rjmp	.+114    	; 0xb88 <find_volume+0x53c>
     b16:	8d e0       	ldi	r24, 0x0D	; 13
     b18:	37 c0       	rjmp	.+110    	; 0xb88 <find_volume+0x53c>
     b1a:	8d e0       	ldi	r24, 0x0D	; 13
     b1c:	35 c0       	rjmp	.+106    	; 0xb88 <find_volume+0x53c>
     b1e:	8d e0       	ldi	r24, 0x0D	; 13
     b20:	33 c0       	rjmp	.+102    	; 0xb88 <find_volume+0x53c>
     b22:	8d e0       	ldi	r24, 0x0D	; 13
     b24:	31 c0       	rjmp	.+98     	; 0xb88 <find_volume+0x53c>
     b26:	8d e0       	ldi	r24, 0x0D	; 13
     b28:	2f c0       	rjmp	.+94     	; 0xb88 <find_volume+0x53c>
     b2a:	8d e0       	ldi	r24, 0x0D	; 13
     b2c:	2d c0       	rjmp	.+90     	; 0xb88 <find_volume+0x53c>
     b2e:	8d e0       	ldi	r24, 0x0D	; 13
     b30:	2b c0       	rjmp	.+86     	; 0xb88 <find_volume+0x53c>
     b32:	49 01       	movw	r8, r18
     b34:	5a 01       	movw	r10, r20
     b36:	b2 e0       	ldi	r27, 0x02	; 2
     b38:	8b 0e       	add	r8, r27
     b3a:	91 1c       	adc	r9, r1
     b3c:	a1 1c       	adc	r10, r1
     b3e:	b1 1c       	adc	r11, r1
     b40:	f8 01       	movw	r30, r16
     b42:	86 8a       	std	Z+22, r8	; 0x16
     b44:	97 8a       	std	Z+23, r9	; 0x17
     b46:	a0 8e       	std	Z+24, r10	; 0x18
     b48:	b1 8e       	std	Z+25, r11	; 0x19
     b4a:	46 8e       	std	Z+30, r4	; 0x1e
     b4c:	57 8e       	std	Z+31, r5	; 0x1f
     b4e:	60 a2       	std	Z+32, r6	; 0x20
     b50:	71 a2       	std	Z+33, r7	; 0x21
     b52:	8e 89       	ldd	r24, Y+22	; 0x16
     b54:	9f 89       	ldd	r25, Y+23	; 0x17
     b56:	a8 8d       	ldd	r26, Y+24	; 0x18
     b58:	b9 8d       	ldd	r27, Y+25	; 0x19
     b5a:	84 0d       	add	r24, r4
     b5c:	95 1d       	adc	r25, r5
     b5e:	a6 1d       	adc	r26, r6
     b60:	b7 1d       	adc	r27, r7
     b62:	82 a3       	std	Z+34, r24	; 0x22
     b64:	93 a3       	std	Z+35, r25	; 0x23
     b66:	a4 a3       	std	Z+36, r26	; 0x24
     b68:	b5 a3       	std	Z+37, r27	; 0x25
     b6a:	8a 89       	ldd	r24, Y+18	; 0x12
     b6c:	9b 89       	ldd	r25, Y+19	; 0x13
     b6e:	ac 89       	ldd	r26, Y+20	; 0x14
     b70:	bd 89       	ldd	r27, Y+21	; 0x15
     b72:	84 0d       	add	r24, r4
     b74:	95 1d       	adc	r25, r5
     b76:	a6 1d       	adc	r26, r6
     b78:	b7 1d       	adc	r27, r7
     b7a:	82 a7       	std	Z+42, r24	; 0x2a
     b7c:	93 a7       	std	Z+43, r25	; 0x2b
     b7e:	a4 a7       	std	Z+44, r26	; 0x2c
     b80:	b5 a7       	std	Z+45, r27	; 0x2d
     b82:	f3 e0       	ldi	r31, 0x03	; 3
     b84:	f9 8b       	std	Y+17, r31	; 0x11
     b86:	e3 ce       	rjmp	.-570    	; 0x94e <find_volume+0x302>
     b88:	6d 96       	adiw	r28, 0x1d	; 29
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	7f 90       	pop	r7
     ba8:	6f 90       	pop	r6
     baa:	5f 90       	pop	r5
     bac:	4f 90       	pop	r4
     bae:	3f 90       	pop	r3
     bb0:	2f 90       	pop	r2
     bb2:	08 95       	ret

00000bb4 <sync_fs>:
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	ec 01       	movw	r28, r24
     bc2:	3a dc       	rcall	.-1932   	; 0x438 <sync_window>
     bc4:	98 2f       	mov	r25, r24
     bc6:	81 11       	cpse	r24, r1
     bc8:	5b c0       	rjmp	.+182    	; 0xc80 <sync_fs+0xcc>
     bca:	88 81       	ld	r24, Y
     bcc:	83 30       	cpi	r24, 0x03	; 3
     bce:	09 f0       	breq	.+2      	; 0xbd2 <sync_fs+0x1e>
     bd0:	4d c0       	rjmp	.+154    	; 0xc6c <sync_fs+0xb8>
     bd2:	8d 81       	ldd	r24, Y+5	; 0x05
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	09 f0       	breq	.+2      	; 0xbda <sync_fs+0x26>
     bd8:	49 c0       	rjmp	.+146    	; 0xc6c <sync_fs+0xb8>
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	52 e0       	ldi	r21, 0x02	; 2
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	7e 01       	movw	r14, r28
     be4:	82 e3       	ldi	r24, 0x32	; 50
     be6:	e8 0e       	add	r14, r24
     be8:	f1 1c       	adc	r15, r1
     bea:	c7 01       	movw	r24, r14
     bec:	c7 db       	rcall	.-2162   	; 0x37c <mem_set>
     bee:	85 e5       	ldi	r24, 0x55	; 85
     bf0:	9a ea       	ldi	r25, 0xAA	; 170
     bf2:	fe 01       	movw	r30, r28
     bf4:	e0 5d       	subi	r30, 0xD0	; 208
     bf6:	fd 4f       	sbci	r31, 0xFD	; 253
     bf8:	80 83       	st	Z, r24
     bfa:	91 83       	std	Z+1, r25	; 0x01
     bfc:	82 e5       	ldi	r24, 0x52	; 82
     bfe:	92 e5       	ldi	r25, 0x52	; 82
     c00:	a1 e6       	ldi	r26, 0x61	; 97
     c02:	b1 e4       	ldi	r27, 0x41	; 65
     c04:	8a ab       	std	Y+50, r24	; 0x32
     c06:	9b ab       	std	Y+51, r25	; 0x33
     c08:	ac ab       	std	Y+52, r26	; 0x34
     c0a:	bd ab       	std	Y+53, r27	; 0x35
     c0c:	82 e7       	ldi	r24, 0x72	; 114
     c0e:	92 e7       	ldi	r25, 0x72	; 114
     c10:	a1 e4       	ldi	r26, 0x41	; 65
     c12:	b1 e6       	ldi	r27, 0x61	; 97
     c14:	7a 97       	sbiw	r30, 0x1a	; 26
     c16:	80 83       	st	Z, r24
     c18:	91 83       	std	Z+1, r25	; 0x01
     c1a:	a2 83       	std	Z+2, r26	; 0x02
     c1c:	b3 83       	std	Z+3, r27	; 0x03
     c1e:	8e 85       	ldd	r24, Y+14	; 0x0e
     c20:	9f 85       	ldd	r25, Y+15	; 0x0f
     c22:	a8 89       	ldd	r26, Y+16	; 0x10
     c24:	b9 89       	ldd	r27, Y+17	; 0x11
     c26:	34 96       	adiw	r30, 0x04	; 4
     c28:	80 83       	st	Z, r24
     c2a:	91 83       	std	Z+1, r25	; 0x01
     c2c:	a2 83       	std	Z+2, r26	; 0x02
     c2e:	b3 83       	std	Z+3, r27	; 0x03
     c30:	8a 85       	ldd	r24, Y+10	; 0x0a
     c32:	9b 85       	ldd	r25, Y+11	; 0x0b
     c34:	ac 85       	ldd	r26, Y+12	; 0x0c
     c36:	bd 85       	ldd	r27, Y+13	; 0x0d
     c38:	34 96       	adiw	r30, 0x04	; 4
     c3a:	80 83       	st	Z, r24
     c3c:	91 83       	std	Z+1, r25	; 0x01
     c3e:	a2 83       	std	Z+2, r26	; 0x02
     c40:	b3 83       	std	Z+3, r27	; 0x03
     c42:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c44:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c46:	a8 a1       	ldd	r26, Y+32	; 0x20
     c48:	b9 a1       	ldd	r27, Y+33	; 0x21
     c4a:	9c 01       	movw	r18, r24
     c4c:	ad 01       	movw	r20, r26
     c4e:	2f 5f       	subi	r18, 0xFF	; 255
     c50:	3f 4f       	sbci	r19, 0xFF	; 255
     c52:	4f 4f       	sbci	r20, 0xFF	; 255
     c54:	5f 4f       	sbci	r21, 0xFF	; 255
     c56:	2e a7       	std	Y+46, r18	; 0x2e
     c58:	3f a7       	std	Y+47, r19	; 0x2f
     c5a:	48 ab       	std	Y+48, r20	; 0x30
     c5c:	59 ab       	std	Y+49, r21	; 0x31
     c5e:	01 e0       	ldi	r16, 0x01	; 1
     c60:	10 e0       	ldi	r17, 0x00	; 0
     c62:	b7 01       	movw	r22, r14
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <disk_write>
     c6a:	1d 82       	std	Y+5, r1	; 0x05
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	0e 94 69 13 	call	0x26d2	; 0x26d2 <disk_ioctl>
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	81 11       	cpse	r24, r1
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <sync_fs+0xcc>
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	89 2f       	mov	r24, r25
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	ff 90       	pop	r15
     c8c:	ef 90       	pop	r14
     c8e:	08 95       	ret

00000c90 <clust2sect>:
     c90:	cf 92       	push	r12
     c92:	df 92       	push	r13
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	fc 01       	movw	r30, r24
     c9a:	9a 01       	movw	r18, r20
     c9c:	ab 01       	movw	r20, r22
     c9e:	22 50       	subi	r18, 0x02	; 2
     ca0:	31 09       	sbc	r19, r1
     ca2:	41 09       	sbc	r20, r1
     ca4:	51 09       	sbc	r21, r1
     ca6:	c6 88       	ldd	r12, Z+22	; 0x16
     ca8:	d7 88       	ldd	r13, Z+23	; 0x17
     caa:	e0 8c       	ldd	r14, Z+24	; 0x18
     cac:	f1 8c       	ldd	r15, Z+25	; 0x19
     cae:	82 e0       	ldi	r24, 0x02	; 2
     cb0:	c8 1a       	sub	r12, r24
     cb2:	d1 08       	sbc	r13, r1
     cb4:	e1 08       	sbc	r14, r1
     cb6:	f1 08       	sbc	r15, r1
     cb8:	2c 15       	cp	r18, r12
     cba:	3d 05       	cpc	r19, r13
     cbc:	4e 05       	cpc	r20, r14
     cbe:	5f 05       	cpc	r21, r15
     cc0:	68 f4       	brcc	.+26     	; 0xcdc <clust2sect+0x4c>
     cc2:	a2 81       	ldd	r26, Z+2	; 0x02
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <__muluhisi3>
     cca:	c2 a4       	ldd	r12, Z+42	; 0x2a
     ccc:	d3 a4       	ldd	r13, Z+43	; 0x2b
     cce:	e4 a4       	ldd	r14, Z+44	; 0x2c
     cd0:	f5 a4       	ldd	r15, Z+45	; 0x2d
     cd2:	6c 0d       	add	r22, r12
     cd4:	7d 1d       	adc	r23, r13
     cd6:	8e 1d       	adc	r24, r14
     cd8:	9f 1d       	adc	r25, r15
     cda:	03 c0       	rjmp	.+6      	; 0xce2 <clust2sect+0x52>
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	cb 01       	movw	r24, r22
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	df 90       	pop	r13
     ce8:	cf 90       	pop	r12
     cea:	08 95       	ret

00000cec <get_fat>:
     cec:	af 92       	push	r10
     cee:	bf 92       	push	r11
     cf0:	cf 92       	push	r12
     cf2:	df 92       	push	r13
     cf4:	ef 92       	push	r14
     cf6:	ff 92       	push	r15
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	ec 01       	movw	r28, r24
     d02:	6a 01       	movw	r12, r20
     d04:	7b 01       	movw	r14, r22
     d06:	42 30       	cpi	r20, 0x02	; 2
     d08:	51 05       	cpc	r21, r1
     d0a:	61 05       	cpc	r22, r1
     d0c:	71 05       	cpc	r23, r1
     d0e:	08 f4       	brcc	.+2      	; 0xd12 <get_fat+0x26>
     d10:	aa c0       	rjmp	.+340    	; 0xe66 <get_fat+0x17a>
     d12:	4e 89       	ldd	r20, Y+22	; 0x16
     d14:	5f 89       	ldd	r21, Y+23	; 0x17
     d16:	68 8d       	ldd	r22, Y+24	; 0x18
     d18:	79 8d       	ldd	r23, Y+25	; 0x19
     d1a:	c4 16       	cp	r12, r20
     d1c:	d5 06       	cpc	r13, r21
     d1e:	e6 06       	cpc	r14, r22
     d20:	f7 06       	cpc	r15, r23
     d22:	08 f0       	brcs	.+2      	; 0xd26 <get_fat+0x3a>
     d24:	a5 c0       	rjmp	.+330    	; 0xe70 <get_fat+0x184>
     d26:	88 81       	ld	r24, Y
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	09 f4       	brne	.+2      	; 0xd2e <get_fat+0x42>
     d2c:	4b c0       	rjmp	.+150    	; 0xdc4 <get_fat+0xd8>
     d2e:	83 30       	cpi	r24, 0x03	; 3
     d30:	09 f4       	brne	.+2      	; 0xd34 <get_fat+0x48>
     d32:	6a c0       	rjmp	.+212    	; 0xe08 <get_fat+0x11c>
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	09 f0       	breq	.+2      	; 0xd3a <get_fat+0x4e>
     d38:	a0 c0       	rjmp	.+320    	; 0xe7a <get_fat+0x18e>
     d3a:	86 01       	movw	r16, r12
     d3c:	16 95       	lsr	r17
     d3e:	07 95       	ror	r16
     d40:	0c 0d       	add	r16, r12
     d42:	1d 1d       	adc	r17, r13
     d44:	c8 01       	movw	r24, r16
     d46:	89 2f       	mov	r24, r25
     d48:	99 27       	eor	r25, r25
     d4a:	86 95       	lsr	r24
     d4c:	4a a1       	ldd	r20, Y+34	; 0x22
     d4e:	5b a1       	ldd	r21, Y+35	; 0x23
     d50:	6c a1       	ldd	r22, Y+36	; 0x24
     d52:	7d a1       	ldd	r23, Y+37	; 0x25
     d54:	48 0f       	add	r20, r24
     d56:	59 1f       	adc	r21, r25
     d58:	61 1d       	adc	r22, r1
     d5a:	71 1d       	adc	r23, r1
     d5c:	ce 01       	movw	r24, r28
     d5e:	d7 db       	rcall	.-2130   	; 0x50e <move_window>
     d60:	81 11       	cpse	r24, r1
     d62:	90 c0       	rjmp	.+288    	; 0xe84 <get_fat+0x198>
     d64:	58 01       	movw	r10, r16
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	a8 1a       	sub	r10, r24
     d6a:	b8 0a       	sbc	r11, r24
     d6c:	11 70       	andi	r17, 0x01	; 1
     d6e:	fe 01       	movw	r30, r28
     d70:	e0 0f       	add	r30, r16
     d72:	f1 1f       	adc	r31, r17
     d74:	12 a9       	ldd	r17, Z+50	; 0x32
     d76:	c5 01       	movw	r24, r10
     d78:	89 2f       	mov	r24, r25
     d7a:	99 27       	eor	r25, r25
     d7c:	86 95       	lsr	r24
     d7e:	4a a1       	ldd	r20, Y+34	; 0x22
     d80:	5b a1       	ldd	r21, Y+35	; 0x23
     d82:	6c a1       	ldd	r22, Y+36	; 0x24
     d84:	7d a1       	ldd	r23, Y+37	; 0x25
     d86:	48 0f       	add	r20, r24
     d88:	59 1f       	adc	r21, r25
     d8a:	61 1d       	adc	r22, r1
     d8c:	71 1d       	adc	r23, r1
     d8e:	ce 01       	movw	r24, r28
     d90:	be db       	rcall	.-2180   	; 0x50e <move_window>
     d92:	81 11       	cpse	r24, r1
     d94:	7b c0       	rjmp	.+246    	; 0xe8c <get_fat+0x1a0>
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	b8 22       	and	r11, r24
     d9a:	ca 0d       	add	r28, r10
     d9c:	db 1d       	adc	r29, r11
     d9e:	8a a9       	ldd	r24, Y+50	; 0x32
     da0:	61 2f       	mov	r22, r17
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	78 2b       	or	r23, r24
     da6:	c0 fe       	sbrs	r12, 0
     da8:	09 c0       	rjmp	.+18     	; 0xdbc <get_fat+0xd0>
     daa:	72 95       	swap	r23
     dac:	62 95       	swap	r22
     dae:	6f 70       	andi	r22, 0x0F	; 15
     db0:	67 27       	eor	r22, r23
     db2:	7f 70       	andi	r23, 0x0F	; 15
     db4:	67 27       	eor	r22, r23
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	73 c0       	rjmp	.+230    	; 0xea2 <get_fat+0x1b6>
     dbc:	7f 70       	andi	r23, 0x0F	; 15
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	6f c0       	rjmp	.+222    	; 0xea2 <get_fat+0x1b6>
     dc4:	77 27       	eor	r23, r23
     dc6:	6f 2d       	mov	r22, r15
     dc8:	5e 2d       	mov	r21, r14
     dca:	4d 2d       	mov	r20, r13
     dcc:	0a a1       	ldd	r16, Y+34	; 0x22
     dce:	1b a1       	ldd	r17, Y+35	; 0x23
     dd0:	2c a1       	ldd	r18, Y+36	; 0x24
     dd2:	3d a1       	ldd	r19, Y+37	; 0x25
     dd4:	40 0f       	add	r20, r16
     dd6:	51 1f       	adc	r21, r17
     dd8:	62 1f       	adc	r22, r18
     dda:	73 1f       	adc	r23, r19
     ddc:	ce 01       	movw	r24, r28
     dde:	97 db       	rcall	.-2258   	; 0x50e <move_window>
     de0:	81 11       	cpse	r24, r1
     de2:	58 c0       	rjmp	.+176    	; 0xe94 <get_fat+0x1a8>
     de4:	cc 0c       	add	r12, r12
     de6:	dd 1c       	adc	r13, r13
     de8:	ee 1c       	adc	r14, r14
     dea:	ff 1c       	adc	r15, r15
     dec:	e8 94       	clt
     dee:	c0 f8       	bld	r12, 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	d8 22       	and	r13, r24
     df4:	ee 24       	eor	r14, r14
     df6:	ff 24       	eor	r15, r15
     df8:	fe 01       	movw	r30, r28
     dfa:	ec 0d       	add	r30, r12
     dfc:	fd 1d       	adc	r31, r13
     dfe:	62 a9       	ldd	r22, Z+50	; 0x32
     e00:	73 a9       	ldd	r23, Z+51	; 0x33
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	4d c0       	rjmp	.+154    	; 0xea2 <get_fat+0x1b6>
     e08:	4a a1       	ldd	r20, Y+34	; 0x22
     e0a:	5b a1       	ldd	r21, Y+35	; 0x23
     e0c:	6c a1       	ldd	r22, Y+36	; 0x24
     e0e:	7d a1       	ldd	r23, Y+37	; 0x25
     e10:	97 01       	movw	r18, r14
     e12:	86 01       	movw	r16, r12
     e14:	68 94       	set
     e16:	16 f8       	bld	r1, 6
     e18:	36 95       	lsr	r19
     e1a:	27 95       	ror	r18
     e1c:	17 95       	ror	r17
     e1e:	07 95       	ror	r16
     e20:	16 94       	lsr	r1
     e22:	d1 f7       	brne	.-12     	; 0xe18 <get_fat+0x12c>
     e24:	40 0f       	add	r20, r16
     e26:	51 1f       	adc	r21, r17
     e28:	62 1f       	adc	r22, r18
     e2a:	73 1f       	adc	r23, r19
     e2c:	ce 01       	movw	r24, r28
     e2e:	6f db       	rcall	.-2338   	; 0x50e <move_window>
     e30:	81 11       	cpse	r24, r1
     e32:	34 c0       	rjmp	.+104    	; 0xe9c <get_fat+0x1b0>
     e34:	cc 0c       	add	r12, r12
     e36:	dd 1c       	adc	r13, r13
     e38:	ee 1c       	adc	r14, r14
     e3a:	ff 1c       	adc	r15, r15
     e3c:	cc 0c       	add	r12, r12
     e3e:	dd 1c       	adc	r13, r13
     e40:	ee 1c       	adc	r14, r14
     e42:	ff 1c       	adc	r15, r15
     e44:	8c ef       	ldi	r24, 0xFC	; 252
     e46:	c8 22       	and	r12, r24
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	d8 22       	and	r13, r24
     e4c:	ee 24       	eor	r14, r14
     e4e:	ff 24       	eor	r15, r15
     e50:	fe 01       	movw	r30, r28
     e52:	ec 0d       	add	r30, r12
     e54:	fd 1d       	adc	r31, r13
     e56:	82 a9       	ldd	r24, Z+50	; 0x32
     e58:	93 a9       	ldd	r25, Z+51	; 0x33
     e5a:	a4 a9       	ldd	r26, Z+52	; 0x34
     e5c:	b5 a9       	ldd	r27, Z+53	; 0x35
     e5e:	bc 01       	movw	r22, r24
     e60:	cd 01       	movw	r24, r26
     e62:	9f 70       	andi	r25, 0x0F	; 15
     e64:	1e c0       	rjmp	.+60     	; 0xea2 <get_fat+0x1b6>
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	19 c0       	rjmp	.+50     	; 0xea2 <get_fat+0x1b6>
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	14 c0       	rjmp	.+40     	; 0xea2 <get_fat+0x1b6>
     e7a:	61 e0       	ldi	r22, 0x01	; 1
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0f c0       	rjmp	.+30     	; 0xea2 <get_fat+0x1b6>
     e84:	6f ef       	ldi	r22, 0xFF	; 255
     e86:	7f ef       	ldi	r23, 0xFF	; 255
     e88:	cb 01       	movw	r24, r22
     e8a:	0b c0       	rjmp	.+22     	; 0xea2 <get_fat+0x1b6>
     e8c:	6f ef       	ldi	r22, 0xFF	; 255
     e8e:	7f ef       	ldi	r23, 0xFF	; 255
     e90:	cb 01       	movw	r24, r22
     e92:	07 c0       	rjmp	.+14     	; 0xea2 <get_fat+0x1b6>
     e94:	6f ef       	ldi	r22, 0xFF	; 255
     e96:	7f ef       	ldi	r23, 0xFF	; 255
     e98:	cb 01       	movw	r24, r22
     e9a:	03 c0       	rjmp	.+6      	; 0xea2 <get_fat+0x1b6>
     e9c:	6f ef       	ldi	r22, 0xFF	; 255
     e9e:	7f ef       	ldi	r23, 0xFF	; 255
     ea0:	cb 01       	movw	r24, r22
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	bf 90       	pop	r11
     eb4:	af 90       	pop	r10
     eb6:	08 95       	ret

00000eb8 <dir_sdi>:
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	ec 01       	movw	r28, r24
     ece:	8b 01       	movw	r16, r22
     ed0:	6c 83       	std	Y+4, r22	; 0x04
     ed2:	7d 83       	std	Y+5, r23	; 0x05
     ed4:	ce 80       	ldd	r12, Y+6	; 0x06
     ed6:	df 80       	ldd	r13, Y+7	; 0x07
     ed8:	e8 84       	ldd	r14, Y+8	; 0x08
     eda:	f9 84       	ldd	r15, Y+9	; 0x09
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	c8 16       	cp	r12, r24
     ee0:	d1 04       	cpc	r13, r1
     ee2:	e1 04       	cpc	r14, r1
     ee4:	f1 04       	cpc	r15, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <dir_sdi+0x32>
     ee8:	8a c0       	rjmp	.+276    	; 0xffe <dir_sdi+0x146>
     eea:	e8 81       	ld	r30, Y
     eec:	f9 81       	ldd	r31, Y+1	; 0x01
     eee:	86 89       	ldd	r24, Z+22	; 0x16
     ef0:	97 89       	ldd	r25, Z+23	; 0x17
     ef2:	a0 8d       	ldd	r26, Z+24	; 0x18
     ef4:	b1 8d       	ldd	r27, Z+25	; 0x19
     ef6:	c8 16       	cp	r12, r24
     ef8:	d9 06       	cpc	r13, r25
     efa:	ea 06       	cpc	r14, r26
     efc:	fb 06       	cpc	r15, r27
     efe:	08 f0       	brcs	.+2      	; 0xf02 <dir_sdi+0x4a>
     f00:	80 c0       	rjmp	.+256    	; 0x1002 <dir_sdi+0x14a>
     f02:	c1 14       	cp	r12, r1
     f04:	d1 04       	cpc	r13, r1
     f06:	e1 04       	cpc	r14, r1
     f08:	f1 04       	cpc	r15, r1
     f0a:	c1 f4       	brne	.+48     	; 0xf3c <dir_sdi+0x84>
     f0c:	80 81       	ld	r24, Z
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	41 f4       	brne	.+16     	; 0xf22 <dir_sdi+0x6a>
     f12:	86 a1       	ldd	r24, Z+38	; 0x26
     f14:	97 a1       	ldd	r25, Z+39	; 0x27
     f16:	a0 a5       	ldd	r26, Z+40	; 0x28
     f18:	b1 a5       	ldd	r27, Z+41	; 0x29
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	a1 05       	cpc	r26, r1
     f1e:	b1 05       	cpc	r27, r1
     f20:	59 f4       	brne	.+22     	; 0xf38 <dir_sdi+0x80>
     f22:	80 85       	ldd	r24, Z+8	; 0x08
     f24:	91 85       	ldd	r25, Z+9	; 0x09
     f26:	08 17       	cp	r16, r24
     f28:	19 07       	cpc	r17, r25
     f2a:	08 f0       	brcs	.+2      	; 0xf2e <dir_sdi+0x76>
     f2c:	6c c0       	rjmp	.+216    	; 0x1006 <dir_sdi+0x14e>
     f2e:	66 a1       	ldd	r22, Z+38	; 0x26
     f30:	77 a1       	ldd	r23, Z+39	; 0x27
     f32:	80 a5       	ldd	r24, Z+40	; 0x28
     f34:	91 a5       	ldd	r25, Z+41	; 0x29
     f36:	35 c0       	rjmp	.+106    	; 0xfa2 <dir_sdi+0xea>
     f38:	6c 01       	movw	r12, r24
     f3a:	7d 01       	movw	r14, r26
     f3c:	a2 80       	ldd	r10, Z+2	; 0x02
     f3e:	80 e1       	ldi	r24, 0x10	; 16
     f40:	a8 9e       	mul	r10, r24
     f42:	50 01       	movw	r10, r0
     f44:	11 24       	eor	r1, r1
     f46:	0a 15       	cp	r16, r10
     f48:	1b 05       	cpc	r17, r11
     f4a:	30 f1       	brcs	.+76     	; 0xf98 <dir_sdi+0xe0>
     f4c:	b7 01       	movw	r22, r14
     f4e:	a6 01       	movw	r20, r12
     f50:	88 81       	ld	r24, Y
     f52:	99 81       	ldd	r25, Y+1	; 0x01
     f54:	cb de       	rcall	.-618    	; 0xcec <get_fat>
     f56:	6b 01       	movw	r12, r22
     f58:	7c 01       	movw	r14, r24
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	c8 16       	cp	r12, r24
     f5e:	d8 06       	cpc	r13, r24
     f60:	e8 06       	cpc	r14, r24
     f62:	f8 06       	cpc	r15, r24
     f64:	09 f4       	brne	.+2      	; 0xf68 <dir_sdi+0xb0>
     f66:	51 c0       	rjmp	.+162    	; 0x100a <dir_sdi+0x152>
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	c8 16       	cp	r12, r24
     f6c:	d1 04       	cpc	r13, r1
     f6e:	e1 04       	cpc	r14, r1
     f70:	f1 04       	cpc	r15, r1
     f72:	08 f4       	brcc	.+2      	; 0xf76 <dir_sdi+0xbe>
     f74:	4c c0       	rjmp	.+152    	; 0x100e <dir_sdi+0x156>
     f76:	e8 81       	ld	r30, Y
     f78:	f9 81       	ldd	r31, Y+1	; 0x01
     f7a:	86 89       	ldd	r24, Z+22	; 0x16
     f7c:	97 89       	ldd	r25, Z+23	; 0x17
     f7e:	a0 8d       	ldd	r26, Z+24	; 0x18
     f80:	b1 8d       	ldd	r27, Z+25	; 0x19
     f82:	c8 16       	cp	r12, r24
     f84:	d9 06       	cpc	r13, r25
     f86:	ea 06       	cpc	r14, r26
     f88:	fb 06       	cpc	r15, r27
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <dir_sdi+0xd6>
     f8c:	42 c0       	rjmp	.+132    	; 0x1012 <dir_sdi+0x15a>
     f8e:	0a 19       	sub	r16, r10
     f90:	1b 09       	sbc	r17, r11
     f92:	0a 15       	cp	r16, r10
     f94:	1b 05       	cpc	r17, r11
     f96:	d0 f6       	brcc	.-76     	; 0xf4c <dir_sdi+0x94>
     f98:	b7 01       	movw	r22, r14
     f9a:	a6 01       	movw	r20, r12
     f9c:	88 81       	ld	r24, Y
     f9e:	99 81       	ldd	r25, Y+1	; 0x01
     fa0:	77 de       	rcall	.-786    	; 0xc90 <clust2sect>
     fa2:	ca 86       	std	Y+10, r12	; 0x0a
     fa4:	db 86       	std	Y+11, r13	; 0x0b
     fa6:	ec 86       	std	Y+12, r14	; 0x0c
     fa8:	fd 86       	std	Y+13, r15	; 0x0d
     faa:	61 15       	cp	r22, r1
     fac:	71 05       	cpc	r23, r1
     fae:	81 05       	cpc	r24, r1
     fb0:	91 05       	cpc	r25, r1
     fb2:	89 f1       	breq	.+98     	; 0x1016 <dir_sdi+0x15e>
     fb4:	98 01       	movw	r18, r16
     fb6:	32 95       	swap	r19
     fb8:	22 95       	swap	r18
     fba:	2f 70       	andi	r18, 0x0F	; 15
     fbc:	23 27       	eor	r18, r19
     fbe:	3f 70       	andi	r19, 0x0F	; 15
     fc0:	23 27       	eor	r18, r19
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	82 0f       	add	r24, r18
     fc8:	93 1f       	adc	r25, r19
     fca:	a1 1d       	adc	r26, r1
     fcc:	b1 1d       	adc	r27, r1
     fce:	8e 87       	std	Y+14, r24	; 0x0e
     fd0:	9f 87       	std	Y+15, r25	; 0x0f
     fd2:	a8 8b       	std	Y+16, r26	; 0x10
     fd4:	b9 8b       	std	Y+17, r27	; 0x11
     fd6:	0f 70       	andi	r16, 0x0F	; 15
     fd8:	11 27       	eor	r17, r17
     fda:	c8 01       	movw	r24, r16
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	82 95       	swap	r24
     fe2:	92 95       	swap	r25
     fe4:	90 7f       	andi	r25, 0xF0	; 240
     fe6:	98 27       	eor	r25, r24
     fe8:	80 7f       	andi	r24, 0xF0	; 240
     fea:	98 27       	eor	r25, r24
     fec:	c2 96       	adiw	r24, 0x32	; 50
     fee:	28 81       	ld	r18, Y
     ff0:	39 81       	ldd	r19, Y+1	; 0x01
     ff2:	82 0f       	add	r24, r18
     ff4:	93 1f       	adc	r25, r19
     ff6:	8a 8b       	std	Y+18, r24	; 0x12
     ff8:	9b 8b       	std	Y+19, r25	; 0x13
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	0d c0       	rjmp	.+26     	; 0x1018 <dir_sdi+0x160>
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	0b c0       	rjmp	.+22     	; 0x1018 <dir_sdi+0x160>
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	09 c0       	rjmp	.+18     	; 0x1018 <dir_sdi+0x160>
    1006:	82 e0       	ldi	r24, 0x02	; 2
    1008:	07 c0       	rjmp	.+14     	; 0x1018 <dir_sdi+0x160>
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	05 c0       	rjmp	.+10     	; 0x1018 <dir_sdi+0x160>
    100e:	82 e0       	ldi	r24, 0x02	; 2
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <dir_sdi+0x160>
    1012:	82 e0       	ldi	r24, 0x02	; 2
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <dir_sdi+0x160>
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	df 90       	pop	r13
    1026:	cf 90       	pop	r12
    1028:	bf 90       	pop	r11
    102a:	af 90       	pop	r10
    102c:	08 95       	ret

0000102e <put_fat>:
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	ec 01       	movw	r28, r24
    1050:	6a 01       	movw	r12, r20
    1052:	7b 01       	movw	r14, r22
    1054:	28 01       	movw	r4, r16
    1056:	39 01       	movw	r6, r18
    1058:	42 30       	cpi	r20, 0x02	; 2
    105a:	51 05       	cpc	r21, r1
    105c:	61 05       	cpc	r22, r1
    105e:	71 05       	cpc	r23, r1
    1060:	08 f4       	brcc	.+2      	; 0x1064 <put_fat+0x36>
    1062:	d7 c0       	rjmp	.+430    	; 0x1212 <put_fat+0x1e4>
    1064:	8e 89       	ldd	r24, Y+22	; 0x16
    1066:	9f 89       	ldd	r25, Y+23	; 0x17
    1068:	a8 8d       	ldd	r26, Y+24	; 0x18
    106a:	b9 8d       	ldd	r27, Y+25	; 0x19
    106c:	48 17       	cp	r20, r24
    106e:	59 07       	cpc	r21, r25
    1070:	6a 07       	cpc	r22, r26
    1072:	7b 07       	cpc	r23, r27
    1074:	08 f0       	brcs	.+2      	; 0x1078 <put_fat+0x4a>
    1076:	cf c0       	rjmp	.+414    	; 0x1216 <put_fat+0x1e8>
    1078:	88 81       	ld	r24, Y
    107a:	82 30       	cpi	r24, 0x02	; 2
    107c:	09 f4       	brne	.+2      	; 0x1080 <put_fat+0x52>
    107e:	69 c0       	rjmp	.+210    	; 0x1152 <put_fat+0x124>
    1080:	83 30       	cpi	r24, 0x03	; 3
    1082:	09 f4       	brne	.+2      	; 0x1086 <put_fat+0x58>
    1084:	8b c0       	rjmp	.+278    	; 0x119c <put_fat+0x16e>
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	09 f0       	breq	.+2      	; 0x108c <put_fat+0x5e>
    108a:	c7 c0       	rjmp	.+398    	; 0x121a <put_fat+0x1ec>
    108c:	5a 01       	movw	r10, r20
    108e:	b6 94       	lsr	r11
    1090:	a7 94       	ror	r10
    1092:	a4 0e       	add	r10, r20
    1094:	b5 1e       	adc	r11, r21
    1096:	c5 01       	movw	r24, r10
    1098:	89 2f       	mov	r24, r25
    109a:	99 27       	eor	r25, r25
    109c:	86 95       	lsr	r24
    109e:	4a a1       	ldd	r20, Y+34	; 0x22
    10a0:	5b a1       	ldd	r21, Y+35	; 0x23
    10a2:	6c a1       	ldd	r22, Y+36	; 0x24
    10a4:	7d a1       	ldd	r23, Y+37	; 0x25
    10a6:	48 0f       	add	r20, r24
    10a8:	59 1f       	adc	r21, r25
    10aa:	61 1d       	adc	r22, r1
    10ac:	71 1d       	adc	r23, r1
    10ae:	ce 01       	movw	r24, r28
    10b0:	2e da       	rcall	.-2980   	; 0x50e <move_window>
    10b2:	81 11       	cpse	r24, r1
    10b4:	b3 c0       	rjmp	.+358    	; 0x121c <put_fat+0x1ee>
    10b6:	85 01       	movw	r16, r10
    10b8:	0f 5f       	subi	r16, 0xFF	; 255
    10ba:	1f 4f       	sbci	r17, 0xFF	; 255
    10bc:	c5 01       	movw	r24, r10
    10be:	91 70       	andi	r25, 0x01	; 1
    10c0:	46 01       	movw	r8, r12
    10c2:	57 01       	movw	r10, r14
    10c4:	51 e0       	ldi	r21, 0x01	; 1
    10c6:	85 22       	and	r8, r21
    10c8:	99 24       	eor	r9, r9
    10ca:	aa 24       	eor	r10, r10
    10cc:	bb 24       	eor	r11, r11
    10ce:	c0 fe       	sbrs	r12, 0
    10d0:	0b c0       	rjmp	.+22     	; 0x10e8 <put_fat+0xba>
    10d2:	fe 01       	movw	r30, r28
    10d4:	e8 0f       	add	r30, r24
    10d6:	f9 1f       	adc	r31, r25
    10d8:	42 a9       	ldd	r20, Z+50	; 0x32
    10da:	4f 70       	andi	r20, 0x0F	; 15
    10dc:	50 e1       	ldi	r21, 0x10	; 16
    10de:	45 9e       	mul	r4, r21
    10e0:	90 01       	movw	r18, r0
    10e2:	11 24       	eor	r1, r1
    10e4:	24 2b       	or	r18, r20
    10e6:	01 c0       	rjmp	.+2      	; 0x10ea <put_fat+0xbc>
    10e8:	24 2d       	mov	r18, r4
    10ea:	fe 01       	movw	r30, r28
    10ec:	e8 0f       	add	r30, r24
    10ee:	f9 1f       	adc	r31, r25
    10f0:	22 ab       	std	Z+50, r18	; 0x32
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	8c 83       	std	Y+4, r24	; 0x04
    10f6:	4a a1       	ldd	r20, Y+34	; 0x22
    10f8:	5b a1       	ldd	r21, Y+35	; 0x23
    10fa:	6c a1       	ldd	r22, Y+36	; 0x24
    10fc:	7d a1       	ldd	r23, Y+37	; 0x25
    10fe:	c8 01       	movw	r24, r16
    1100:	89 2f       	mov	r24, r25
    1102:	99 27       	eor	r25, r25
    1104:	86 95       	lsr	r24
    1106:	48 0f       	add	r20, r24
    1108:	59 1f       	adc	r21, r25
    110a:	61 1d       	adc	r22, r1
    110c:	71 1d       	adc	r23, r1
    110e:	ce 01       	movw	r24, r28
    1110:	fe d9       	rcall	.-3076   	; 0x50e <move_window>
    1112:	81 11       	cpse	r24, r1
    1114:	83 c0       	rjmp	.+262    	; 0x121c <put_fat+0x1ee>
    1116:	11 70       	andi	r17, 0x01	; 1
    1118:	89 28       	or	r8, r9
    111a:	8a 28       	or	r8, r10
    111c:	8b 28       	or	r8, r11
    111e:	49 f0       	breq	.+18     	; 0x1132 <put_fat+0x104>
    1120:	68 94       	set
    1122:	13 f8       	bld	r1, 3
    1124:	76 94       	lsr	r7
    1126:	67 94       	ror	r6
    1128:	57 94       	ror	r5
    112a:	47 94       	ror	r4
    112c:	16 94       	lsr	r1
    112e:	d1 f7       	brne	.-12     	; 0x1124 <put_fat+0xf6>
    1130:	09 c0       	rjmp	.+18     	; 0x1144 <put_fat+0x116>
    1132:	fe 01       	movw	r30, r28
    1134:	e0 0f       	add	r30, r16
    1136:	f1 1f       	adc	r31, r17
    1138:	22 a9       	ldd	r18, Z+50	; 0x32
    113a:	20 7f       	andi	r18, 0xF0	; 240
    113c:	95 2d       	mov	r25, r5
    113e:	9f 70       	andi	r25, 0x0F	; 15
    1140:	42 2e       	mov	r4, r18
    1142:	49 2a       	or	r4, r25
    1144:	fe 01       	movw	r30, r28
    1146:	e0 0f       	add	r30, r16
    1148:	f1 1f       	adc	r31, r17
    114a:	42 aa       	std	Z+50, r4	; 0x32
    114c:	91 e0       	ldi	r25, 0x01	; 1
    114e:	9c 83       	std	Y+4, r25	; 0x04
    1150:	65 c0       	rjmp	.+202    	; 0x121c <put_fat+0x1ee>
    1152:	45 2f       	mov	r20, r21
    1154:	56 2f       	mov	r21, r22
    1156:	67 2f       	mov	r22, r23
    1158:	77 27       	eor	r23, r23
    115a:	8a a1       	ldd	r24, Y+34	; 0x22
    115c:	9b a1       	ldd	r25, Y+35	; 0x23
    115e:	ac a1       	ldd	r26, Y+36	; 0x24
    1160:	bd a1       	ldd	r27, Y+37	; 0x25
    1162:	48 0f       	add	r20, r24
    1164:	59 1f       	adc	r21, r25
    1166:	6a 1f       	adc	r22, r26
    1168:	7b 1f       	adc	r23, r27
    116a:	ce 01       	movw	r24, r28
    116c:	d0 d9       	rcall	.-3168   	; 0x50e <move_window>
    116e:	81 11       	cpse	r24, r1
    1170:	55 c0       	rjmp	.+170    	; 0x121c <put_fat+0x1ee>
    1172:	cc 0c       	add	r12, r12
    1174:	dd 1c       	adc	r13, r13
    1176:	ee 1c       	adc	r14, r14
    1178:	ff 1c       	adc	r15, r15
    117a:	e8 94       	clt
    117c:	c0 f8       	bld	r12, 0
    117e:	91 e0       	ldi	r25, 0x01	; 1
    1180:	d9 22       	and	r13, r25
    1182:	ee 24       	eor	r14, r14
    1184:	ff 24       	eor	r15, r15
    1186:	22 e3       	ldi	r18, 0x32	; 50
    1188:	c2 0e       	add	r12, r18
    118a:	d1 1c       	adc	r13, r1
    118c:	fe 01       	movw	r30, r28
    118e:	ec 0d       	add	r30, r12
    1190:	fd 1d       	adc	r31, r13
    1192:	40 82       	st	Z, r4
    1194:	51 82       	std	Z+1, r5	; 0x01
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	40 c0       	rjmp	.+128    	; 0x121c <put_fat+0x1ee>
    119c:	8a a1       	ldd	r24, Y+34	; 0x22
    119e:	9b a1       	ldd	r25, Y+35	; 0x23
    11a0:	ac a1       	ldd	r26, Y+36	; 0x24
    11a2:	bd a1       	ldd	r27, Y+37	; 0x25
    11a4:	68 94       	set
    11a6:	16 f8       	bld	r1, 6
    11a8:	76 95       	lsr	r23
    11aa:	67 95       	ror	r22
    11ac:	57 95       	ror	r21
    11ae:	47 95       	ror	r20
    11b0:	16 94       	lsr	r1
    11b2:	d1 f7       	brne	.-12     	; 0x11a8 <put_fat+0x17a>
    11b4:	48 0f       	add	r20, r24
    11b6:	59 1f       	adc	r21, r25
    11b8:	6a 1f       	adc	r22, r26
    11ba:	7b 1f       	adc	r23, r27
    11bc:	ce 01       	movw	r24, r28
    11be:	a7 d9       	rcall	.-3250   	; 0x50e <move_window>
    11c0:	81 11       	cpse	r24, r1
    11c2:	2c c0       	rjmp	.+88     	; 0x121c <put_fat+0x1ee>
    11c4:	cc 0c       	add	r12, r12
    11c6:	dd 1c       	adc	r13, r13
    11c8:	ee 1c       	adc	r14, r14
    11ca:	ff 1c       	adc	r15, r15
    11cc:	cc 0c       	add	r12, r12
    11ce:	dd 1c       	adc	r13, r13
    11d0:	ee 1c       	adc	r14, r14
    11d2:	ff 1c       	adc	r15, r15
    11d4:	5c ef       	ldi	r21, 0xFC	; 252
    11d6:	c5 22       	and	r12, r21
    11d8:	51 e0       	ldi	r21, 0x01	; 1
    11da:	d5 22       	and	r13, r21
    11dc:	ee 24       	eor	r14, r14
    11de:	ff 24       	eor	r15, r15
    11e0:	92 e3       	ldi	r25, 0x32	; 50
    11e2:	c9 0e       	add	r12, r25
    11e4:	d1 1c       	adc	r13, r1
    11e6:	fe 01       	movw	r30, r28
    11e8:	ec 0d       	add	r30, r12
    11ea:	fd 1d       	adc	r31, r13
    11ec:	40 81       	ld	r20, Z
    11ee:	51 81       	ldd	r21, Z+1	; 0x01
    11f0:	62 81       	ldd	r22, Z+2	; 0x02
    11f2:	73 81       	ldd	r23, Z+3	; 0x03
    11f4:	44 27       	eor	r20, r20
    11f6:	55 27       	eor	r21, r21
    11f8:	66 27       	eor	r22, r22
    11fa:	70 7f       	andi	r23, 0xF0	; 240
    11fc:	44 2a       	or	r4, r20
    11fe:	55 2a       	or	r5, r21
    1200:	66 2a       	or	r6, r22
    1202:	77 2a       	or	r7, r23
    1204:	40 82       	st	Z, r4
    1206:	51 82       	std	Z+1, r5	; 0x01
    1208:	62 82       	std	Z+2, r6	; 0x02
    120a:	73 82       	std	Z+3, r7	; 0x03
    120c:	91 e0       	ldi	r25, 0x01	; 1
    120e:	9c 83       	std	Y+4, r25	; 0x04
    1210:	05 c0       	rjmp	.+10     	; 0x121c <put_fat+0x1ee>
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	03 c0       	rjmp	.+6      	; 0x121c <put_fat+0x1ee>
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	01 c0       	rjmp	.+2      	; 0x121c <put_fat+0x1ee>
    121a:	82 e0       	ldi	r24, 0x02	; 2
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	bf 90       	pop	r11
    122e:	af 90       	pop	r10
    1230:	9f 90       	pop	r9
    1232:	8f 90       	pop	r8
    1234:	7f 90       	pop	r7
    1236:	6f 90       	pop	r6
    1238:	5f 90       	pop	r5
    123a:	4f 90       	pop	r4
    123c:	08 95       	ret

0000123e <create_chain>:
    123e:	4f 92       	push	r4
    1240:	5f 92       	push	r5
    1242:	6f 92       	push	r6
    1244:	7f 92       	push	r7
    1246:	8f 92       	push	r8
    1248:	9f 92       	push	r9
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	ec 01       	movw	r28, r24
    1260:	2a 01       	movw	r4, r20
    1262:	3b 01       	movw	r6, r22
    1264:	41 15       	cp	r20, r1
    1266:	51 05       	cpc	r21, r1
    1268:	61 05       	cpc	r22, r1
    126a:	71 05       	cpc	r23, r1
    126c:	99 f4       	brne	.+38     	; 0x1294 <create_chain+0x56>
    126e:	8a 84       	ldd	r8, Y+10	; 0x0a
    1270:	9b 84       	ldd	r9, Y+11	; 0x0b
    1272:	ac 84       	ldd	r10, Y+12	; 0x0c
    1274:	bd 84       	ldd	r11, Y+13	; 0x0d
    1276:	81 14       	cp	r8, r1
    1278:	91 04       	cpc	r9, r1
    127a:	a1 04       	cpc	r10, r1
    127c:	b1 04       	cpc	r11, r1
    127e:	29 f1       	breq	.+74     	; 0x12ca <create_chain+0x8c>
    1280:	8e 89       	ldd	r24, Y+22	; 0x16
    1282:	9f 89       	ldd	r25, Y+23	; 0x17
    1284:	a8 8d       	ldd	r26, Y+24	; 0x18
    1286:	b9 8d       	ldd	r27, Y+25	; 0x19
    1288:	88 16       	cp	r8, r24
    128a:	99 06       	cpc	r9, r25
    128c:	aa 06       	cpc	r10, r26
    128e:	bb 06       	cpc	r11, r27
    1290:	08 f5       	brcc	.+66     	; 0x12d4 <create_chain+0x96>
    1292:	24 c0       	rjmp	.+72     	; 0x12dc <create_chain+0x9e>
    1294:	2b dd       	rcall	.-1450   	; 0xcec <get_fat>
    1296:	62 30       	cpi	r22, 0x02	; 2
    1298:	71 05       	cpc	r23, r1
    129a:	81 05       	cpc	r24, r1
    129c:	91 05       	cpc	r25, r1
    129e:	08 f4       	brcc	.+2      	; 0x12a2 <create_chain+0x64>
    12a0:	96 c0       	rjmp	.+300    	; 0x13ce <create_chain+0x190>
    12a2:	6f 3f       	cpi	r22, 0xFF	; 255
    12a4:	2f ef       	ldi	r18, 0xFF	; 255
    12a6:	72 07       	cpc	r23, r18
    12a8:	82 07       	cpc	r24, r18
    12aa:	92 07       	cpc	r25, r18
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <create_chain+0x72>
    12ae:	94 c0       	rjmp	.+296    	; 0x13d8 <create_chain+0x19a>
    12b0:	ce 88       	ldd	r12, Y+22	; 0x16
    12b2:	df 88       	ldd	r13, Y+23	; 0x17
    12b4:	e8 8c       	ldd	r14, Y+24	; 0x18
    12b6:	f9 8c       	ldd	r15, Y+25	; 0x19
    12b8:	6c 15       	cp	r22, r12
    12ba:	7d 05       	cpc	r23, r13
    12bc:	8e 05       	cpc	r24, r14
    12be:	9f 05       	cpc	r25, r15
    12c0:	08 f4       	brcc	.+2      	; 0x12c4 <create_chain+0x86>
    12c2:	8e c0       	rjmp	.+284    	; 0x13e0 <create_chain+0x1a2>
    12c4:	53 01       	movw	r10, r6
    12c6:	42 01       	movw	r8, r4
    12c8:	09 c0       	rjmp	.+18     	; 0x12dc <create_chain+0x9e>
    12ca:	81 2c       	mov	r8, r1
    12cc:	91 2c       	mov	r9, r1
    12ce:	54 01       	movw	r10, r8
    12d0:	83 94       	inc	r8
    12d2:	04 c0       	rjmp	.+8      	; 0x12dc <create_chain+0x9e>
    12d4:	81 2c       	mov	r8, r1
    12d6:	91 2c       	mov	r9, r1
    12d8:	54 01       	movw	r10, r8
    12da:	83 94       	inc	r8
    12dc:	75 01       	movw	r14, r10
    12de:	64 01       	movw	r12, r8
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	c8 1a       	sub	r12, r24
    12e4:	d8 0a       	sbc	r13, r24
    12e6:	e8 0a       	sbc	r14, r24
    12e8:	f8 0a       	sbc	r15, r24
    12ea:	8e 89       	ldd	r24, Y+22	; 0x16
    12ec:	9f 89       	ldd	r25, Y+23	; 0x17
    12ee:	a8 8d       	ldd	r26, Y+24	; 0x18
    12f0:	b9 8d       	ldd	r27, Y+25	; 0x19
    12f2:	c8 16       	cp	r12, r24
    12f4:	d9 06       	cpc	r13, r25
    12f6:	ea 06       	cpc	r14, r26
    12f8:	fb 06       	cpc	r15, r27
    12fa:	60 f0       	brcs	.+24     	; 0x1314 <create_chain+0xd6>
    12fc:	22 e0       	ldi	r18, 0x02	; 2
    12fe:	82 16       	cp	r8, r18
    1300:	91 04       	cpc	r9, r1
    1302:	a1 04       	cpc	r10, r1
    1304:	b1 04       	cpc	r11, r1
    1306:	08 f4       	brcc	.+2      	; 0x130a <create_chain+0xcc>
    1308:	6f c0       	rjmp	.+222    	; 0x13e8 <create_chain+0x1aa>
    130a:	c1 2c       	mov	r12, r1
    130c:	d1 2c       	mov	r13, r1
    130e:	76 01       	movw	r14, r12
    1310:	68 94       	set
    1312:	c1 f8       	bld	r12, 1
    1314:	b7 01       	movw	r22, r14
    1316:	a6 01       	movw	r20, r12
    1318:	ce 01       	movw	r24, r28
    131a:	e8 dc       	rcall	.-1584   	; 0xcec <get_fat>
    131c:	61 15       	cp	r22, r1
    131e:	71 05       	cpc	r23, r1
    1320:	81 05       	cpc	r24, r1
    1322:	91 05       	cpc	r25, r1
    1324:	99 f0       	breq	.+38     	; 0x134c <create_chain+0x10e>
    1326:	6f 3f       	cpi	r22, 0xFF	; 255
    1328:	2f ef       	ldi	r18, 0xFF	; 255
    132a:	72 07       	cpc	r23, r18
    132c:	82 07       	cpc	r24, r18
    132e:	92 07       	cpc	r25, r18
    1330:	09 f4       	brne	.+2      	; 0x1334 <create_chain+0xf6>
    1332:	5f c0       	rjmp	.+190    	; 0x13f2 <create_chain+0x1b4>
    1334:	61 30       	cpi	r22, 0x01	; 1
    1336:	71 05       	cpc	r23, r1
    1338:	81 05       	cpc	r24, r1
    133a:	91 05       	cpc	r25, r1
    133c:	09 f4       	brne	.+2      	; 0x1340 <create_chain+0x102>
    133e:	5d c0       	rjmp	.+186    	; 0x13fa <create_chain+0x1bc>
    1340:	c8 14       	cp	r12, r8
    1342:	d9 04       	cpc	r13, r9
    1344:	ea 04       	cpc	r14, r10
    1346:	fb 04       	cpc	r15, r11
    1348:	59 f6       	brne	.-106    	; 0x12e0 <create_chain+0xa2>
    134a:	5b c0       	rjmp	.+182    	; 0x1402 <create_chain+0x1c4>
    134c:	8c 2c       	mov	r8, r12
    134e:	9d 2c       	mov	r9, r13
    1350:	ae 2c       	mov	r10, r14
    1352:	bf 2c       	mov	r11, r15
    1354:	0f ef       	ldi	r16, 0xFF	; 255
    1356:	1f ef       	ldi	r17, 0xFF	; 255
    1358:	2f ef       	ldi	r18, 0xFF	; 255
    135a:	3f e0       	ldi	r19, 0x0F	; 15
    135c:	b7 01       	movw	r22, r14
    135e:	a6 01       	movw	r20, r12
    1360:	ce 01       	movw	r24, r28
    1362:	65 de       	rcall	.-822    	; 0x102e <put_fat>
    1364:	81 11       	cpse	r24, r1
    1366:	2c c0       	rjmp	.+88     	; 0x13c0 <create_chain+0x182>
    1368:	41 14       	cp	r4, r1
    136a:	51 04       	cpc	r5, r1
    136c:	61 04       	cpc	r6, r1
    136e:	71 04       	cpc	r7, r1
    1370:	51 f0       	breq	.+20     	; 0x1386 <create_chain+0x148>
    1372:	0c 2d       	mov	r16, r12
    1374:	1d 2d       	mov	r17, r13
    1376:	2e 2d       	mov	r18, r14
    1378:	3f 2d       	mov	r19, r15
    137a:	b3 01       	movw	r22, r6
    137c:	a2 01       	movw	r20, r4
    137e:	ce 01       	movw	r24, r28
    1380:	56 de       	rcall	.-852    	; 0x102e <put_fat>
    1382:	81 11       	cpse	r24, r1
    1384:	1d c0       	rjmp	.+58     	; 0x13c0 <create_chain+0x182>
    1386:	8a 86       	std	Y+10, r8	; 0x0a
    1388:	9b 86       	std	Y+11, r9	; 0x0b
    138a:	ac 86       	std	Y+12, r10	; 0x0c
    138c:	bd 86       	std	Y+13, r11	; 0x0d
    138e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1390:	9f 85       	ldd	r25, Y+15	; 0x0f
    1392:	a8 89       	ldd	r26, Y+16	; 0x10
    1394:	b9 89       	ldd	r27, Y+17	; 0x11
    1396:	8f 3f       	cpi	r24, 0xFF	; 255
    1398:	2f ef       	ldi	r18, 0xFF	; 255
    139a:	92 07       	cpc	r25, r18
    139c:	a2 07       	cpc	r26, r18
    139e:	b2 07       	cpc	r27, r18
    13a0:	a9 f1       	breq	.+106    	; 0x140c <create_chain+0x1ce>
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	a1 09       	sbc	r26, r1
    13a6:	b1 09       	sbc	r27, r1
    13a8:	8e 87       	std	Y+14, r24	; 0x0e
    13aa:	9f 87       	std	Y+15, r25	; 0x0f
    13ac:	a8 8b       	std	Y+16, r26	; 0x10
    13ae:	b9 8b       	std	Y+17, r27	; 0x11
    13b0:	8d 81       	ldd	r24, Y+5	; 0x05
    13b2:	81 60       	ori	r24, 0x01	; 1
    13b4:	8d 83       	std	Y+5, r24	; 0x05
    13b6:	4c 2d       	mov	r20, r12
    13b8:	3d 2d       	mov	r19, r13
    13ba:	2e 2d       	mov	r18, r14
    13bc:	9f 2d       	mov	r25, r15
    13be:	2f c0       	rjmp	.+94     	; 0x141e <create_chain+0x1e0>
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	49 f5       	brne	.+82     	; 0x1416 <create_chain+0x1d8>
    13c4:	4f ef       	ldi	r20, 0xFF	; 255
    13c6:	3f ef       	ldi	r19, 0xFF	; 255
    13c8:	2f ef       	ldi	r18, 0xFF	; 255
    13ca:	9f ef       	ldi	r25, 0xFF	; 255
    13cc:	28 c0       	rjmp	.+80     	; 0x141e <create_chain+0x1e0>
    13ce:	41 e0       	ldi	r20, 0x01	; 1
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	23 c0       	rjmp	.+70     	; 0x141e <create_chain+0x1e0>
    13d8:	46 2f       	mov	r20, r22
    13da:	37 2f       	mov	r19, r23
    13dc:	28 2f       	mov	r18, r24
    13de:	1f c0       	rjmp	.+62     	; 0x141e <create_chain+0x1e0>
    13e0:	46 2f       	mov	r20, r22
    13e2:	37 2f       	mov	r19, r23
    13e4:	28 2f       	mov	r18, r24
    13e6:	1b c0       	rjmp	.+54     	; 0x141e <create_chain+0x1e0>
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	16 c0       	rjmp	.+44     	; 0x141e <create_chain+0x1e0>
    13f2:	46 2f       	mov	r20, r22
    13f4:	37 2f       	mov	r19, r23
    13f6:	28 2f       	mov	r18, r24
    13f8:	12 c0       	rjmp	.+36     	; 0x141e <create_chain+0x1e0>
    13fa:	46 2f       	mov	r20, r22
    13fc:	37 2f       	mov	r19, r23
    13fe:	28 2f       	mov	r18, r24
    1400:	0e c0       	rjmp	.+28     	; 0x141e <create_chain+0x1e0>
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	09 c0       	rjmp	.+18     	; 0x141e <create_chain+0x1e0>
    140c:	4c 2d       	mov	r20, r12
    140e:	3d 2d       	mov	r19, r13
    1410:	2e 2d       	mov	r18, r14
    1412:	9f 2d       	mov	r25, r15
    1414:	04 c0       	rjmp	.+8      	; 0x141e <create_chain+0x1e0>
    1416:	41 e0       	ldi	r20, 0x01	; 1
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	64 2f       	mov	r22, r20
    1420:	73 2f       	mov	r23, r19
    1422:	82 2f       	mov	r24, r18
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	df 90       	pop	r13
    1432:	cf 90       	pop	r12
    1434:	bf 90       	pop	r11
    1436:	af 90       	pop	r10
    1438:	9f 90       	pop	r9
    143a:	8f 90       	pop	r8
    143c:	7f 90       	pop	r7
    143e:	6f 90       	pop	r6
    1440:	5f 90       	pop	r5
    1442:	4f 90       	pop	r4
    1444:	08 95       	ret

00001446 <dir_next>:
    1446:	7f 92       	push	r7
    1448:	8f 92       	push	r8
    144a:	9f 92       	push	r9
    144c:	af 92       	push	r10
    144e:	bf 92       	push	r11
    1450:	cf 92       	push	r12
    1452:	df 92       	push	r13
    1454:	ef 92       	push	r14
    1456:	ff 92       	push	r15
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	ec 01       	movw	r28, r24
    1462:	7b 01       	movw	r14, r22
    1464:	0c 81       	ldd	r16, Y+4	; 0x04
    1466:	1d 81       	ldd	r17, Y+5	; 0x05
    1468:	0f 5f       	subi	r16, 0xFF	; 255
    146a:	1f 4f       	sbci	r17, 0xFF	; 255
    146c:	01 15       	cp	r16, r1
    146e:	11 05       	cpc	r17, r1
    1470:	09 f4       	brne	.+2      	; 0x1474 <dir_next+0x2e>
    1472:	e4 c0       	rjmp	.+456    	; 0x163c <dir_next+0x1f6>
    1474:	8e 85       	ldd	r24, Y+14	; 0x0e
    1476:	9f 85       	ldd	r25, Y+15	; 0x0f
    1478:	a8 89       	ldd	r26, Y+16	; 0x10
    147a:	b9 89       	ldd	r27, Y+17	; 0x11
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	a1 05       	cpc	r26, r1
    1480:	b1 05       	cpc	r27, r1
    1482:	09 f4       	brne	.+2      	; 0x1486 <dir_next+0x40>
    1484:	dd c0       	rjmp	.+442    	; 0x1640 <dir_next+0x1fa>
    1486:	68 01       	movw	r12, r16
    1488:	2f e0       	ldi	r18, 0x0F	; 15
    148a:	c2 22       	and	r12, r18
    148c:	dd 24       	eor	r13, r13
    148e:	c1 14       	cp	r12, r1
    1490:	d1 04       	cpc	r13, r1
    1492:	09 f0       	breq	.+2      	; 0x1496 <dir_next+0x50>
    1494:	bc c0       	rjmp	.+376    	; 0x160e <dir_next+0x1c8>
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	a1 1d       	adc	r26, r1
    149a:	b1 1d       	adc	r27, r1
    149c:	8e 87       	std	Y+14, r24	; 0x0e
    149e:	9f 87       	std	Y+15, r25	; 0x0f
    14a0:	a8 8b       	std	Y+16, r26	; 0x10
    14a2:	b9 8b       	std	Y+17, r27	; 0x11
    14a4:	4a 85       	ldd	r20, Y+10	; 0x0a
    14a6:	5b 85       	ldd	r21, Y+11	; 0x0b
    14a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    14aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    14ac:	41 15       	cp	r20, r1
    14ae:	51 05       	cpc	r21, r1
    14b0:	61 05       	cpc	r22, r1
    14b2:	71 05       	cpc	r23, r1
    14b4:	49 f4       	brne	.+18     	; 0x14c8 <dir_next+0x82>
    14b6:	e8 81       	ld	r30, Y
    14b8:	f9 81       	ldd	r31, Y+1	; 0x01
    14ba:	80 85       	ldd	r24, Z+8	; 0x08
    14bc:	91 85       	ldd	r25, Z+9	; 0x09
    14be:	08 17       	cp	r16, r24
    14c0:	19 07       	cpc	r17, r25
    14c2:	08 f0       	brcs	.+2      	; 0x14c6 <dir_next+0x80>
    14c4:	bf c0       	rjmp	.+382    	; 0x1644 <dir_next+0x1fe>
    14c6:	a3 c0       	rjmp	.+326    	; 0x160e <dir_next+0x1c8>
    14c8:	e8 81       	ld	r30, Y
    14ca:	f9 81       	ldd	r31, Y+1	; 0x01
    14cc:	82 81       	ldd	r24, Z+2	; 0x02
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	98 01       	movw	r18, r16
    14d4:	32 95       	swap	r19
    14d6:	22 95       	swap	r18
    14d8:	2f 70       	andi	r18, 0x0F	; 15
    14da:	23 27       	eor	r18, r19
    14dc:	3f 70       	andi	r19, 0x0F	; 15
    14de:	23 27       	eor	r18, r19
    14e0:	82 23       	and	r24, r18
    14e2:	93 23       	and	r25, r19
    14e4:	89 2b       	or	r24, r25
    14e6:	09 f0       	breq	.+2      	; 0x14ea <dir_next+0xa4>
    14e8:	92 c0       	rjmp	.+292    	; 0x160e <dir_next+0x1c8>
    14ea:	cf 01       	movw	r24, r30
    14ec:	ff db       	rcall	.-2050   	; 0xcec <get_fat>
    14ee:	4b 01       	movw	r8, r22
    14f0:	5c 01       	movw	r10, r24
    14f2:	82 e0       	ldi	r24, 0x02	; 2
    14f4:	88 16       	cp	r8, r24
    14f6:	91 04       	cpc	r9, r1
    14f8:	a1 04       	cpc	r10, r1
    14fa:	b1 04       	cpc	r11, r1
    14fc:	08 f4       	brcc	.+2      	; 0x1500 <dir_next+0xba>
    14fe:	a4 c0       	rjmp	.+328    	; 0x1648 <dir_next+0x202>
    1500:	ef ef       	ldi	r30, 0xFF	; 255
    1502:	8e 16       	cp	r8, r30
    1504:	9e 06       	cpc	r9, r30
    1506:	ae 06       	cpc	r10, r30
    1508:	be 06       	cpc	r11, r30
    150a:	09 f4       	brne	.+2      	; 0x150e <dir_next+0xc8>
    150c:	9f c0       	rjmp	.+318    	; 0x164c <dir_next+0x206>
    150e:	e8 81       	ld	r30, Y
    1510:	f9 81       	ldd	r31, Y+1	; 0x01
    1512:	86 89       	ldd	r24, Z+22	; 0x16
    1514:	97 89       	ldd	r25, Z+23	; 0x17
    1516:	a0 8d       	ldd	r26, Z+24	; 0x18
    1518:	b1 8d       	ldd	r27, Z+25	; 0x19
    151a:	88 16       	cp	r8, r24
    151c:	99 06       	cpc	r9, r25
    151e:	aa 06       	cpc	r10, r26
    1520:	bb 06       	cpc	r11, r27
    1522:	08 f4       	brcc	.+2      	; 0x1526 <dir_next+0xe0>
    1524:	67 c0       	rjmp	.+206    	; 0x15f4 <dir_next+0x1ae>
    1526:	ef 28       	or	r14, r15
    1528:	09 f4       	brne	.+2      	; 0x152c <dir_next+0xe6>
    152a:	92 c0       	rjmp	.+292    	; 0x1650 <dir_next+0x20a>
    152c:	4a 85       	ldd	r20, Y+10	; 0x0a
    152e:	5b 85       	ldd	r21, Y+11	; 0x0b
    1530:	6c 85       	ldd	r22, Y+12	; 0x0c
    1532:	7d 85       	ldd	r23, Y+13	; 0x0d
    1534:	cf 01       	movw	r24, r30
    1536:	83 de       	rcall	.-762    	; 0x123e <create_chain>
    1538:	4b 01       	movw	r8, r22
    153a:	5c 01       	movw	r10, r24
    153c:	61 15       	cp	r22, r1
    153e:	71 05       	cpc	r23, r1
    1540:	81 05       	cpc	r24, r1
    1542:	91 05       	cpc	r25, r1
    1544:	09 f4       	brne	.+2      	; 0x1548 <dir_next+0x102>
    1546:	86 c0       	rjmp	.+268    	; 0x1654 <dir_next+0x20e>
    1548:	61 30       	cpi	r22, 0x01	; 1
    154a:	71 05       	cpc	r23, r1
    154c:	81 05       	cpc	r24, r1
    154e:	91 05       	cpc	r25, r1
    1550:	09 f4       	brne	.+2      	; 0x1554 <dir_next+0x10e>
    1552:	82 c0       	rjmp	.+260    	; 0x1658 <dir_next+0x212>
    1554:	6f 3f       	cpi	r22, 0xFF	; 255
    1556:	2f ef       	ldi	r18, 0xFF	; 255
    1558:	72 07       	cpc	r23, r18
    155a:	82 07       	cpc	r24, r18
    155c:	92 07       	cpc	r25, r18
    155e:	09 f4       	brne	.+2      	; 0x1562 <dir_next+0x11c>
    1560:	7d c0       	rjmp	.+250    	; 0x165c <dir_next+0x216>
    1562:	88 81       	ld	r24, Y
    1564:	99 81       	ldd	r25, Y+1	; 0x01
    1566:	0e 94 1c 02 	call	0x438	; 0x438 <sync_window>
    156a:	81 11       	cpse	r24, r1
    156c:	79 c0       	rjmp	.+242    	; 0x1660 <dir_next+0x21a>
    156e:	88 81       	ld	r24, Y
    1570:	99 81       	ldd	r25, Y+1	; 0x01
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	52 e0       	ldi	r21, 0x02	; 2
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	c2 96       	adiw	r24, 0x32	; 50
    157c:	0e 94 be 01 	call	0x37c	; 0x37c <mem_set>
    1580:	e8 80       	ld	r14, Y
    1582:	f9 80       	ldd	r15, Y+1	; 0x01
    1584:	b5 01       	movw	r22, r10
    1586:	a4 01       	movw	r20, r8
    1588:	c7 01       	movw	r24, r14
    158a:	82 db       	rcall	.-2300   	; 0xc90 <clust2sect>
    158c:	f7 01       	movw	r30, r14
    158e:	66 a7       	std	Z+46, r22	; 0x2e
    1590:	77 a7       	std	Z+47, r23	; 0x2f
    1592:	80 ab       	std	Z+48, r24	; 0x30
    1594:	91 ab       	std	Z+49, r25	; 0x31
    1596:	e1 2c       	mov	r14, r1
    1598:	f1 2c       	mov	r15, r1
    159a:	77 24       	eor	r7, r7
    159c:	73 94       	inc	r7
    159e:	17 c0       	rjmp	.+46     	; 0x15ce <dir_next+0x188>
    15a0:	74 82       	std	Z+4, r7	; 0x04
    15a2:	88 81       	ld	r24, Y
    15a4:	99 81       	ldd	r25, Y+1	; 0x01
    15a6:	0e 94 1c 02 	call	0x438	; 0x438 <sync_window>
    15aa:	81 11       	cpse	r24, r1
    15ac:	5b c0       	rjmp	.+182    	; 0x1664 <dir_next+0x21e>
    15ae:	e8 81       	ld	r30, Y
    15b0:	f9 81       	ldd	r31, Y+1	; 0x01
    15b2:	86 a5       	ldd	r24, Z+46	; 0x2e
    15b4:	97 a5       	ldd	r25, Z+47	; 0x2f
    15b6:	a0 a9       	ldd	r26, Z+48	; 0x30
    15b8:	b1 a9       	ldd	r27, Z+49	; 0x31
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	a1 1d       	adc	r26, r1
    15be:	b1 1d       	adc	r27, r1
    15c0:	86 a7       	std	Z+46, r24	; 0x2e
    15c2:	97 a7       	std	Z+47, r25	; 0x2f
    15c4:	a0 ab       	std	Z+48, r26	; 0x30
    15c6:	b1 ab       	std	Z+49, r27	; 0x31
    15c8:	ff ef       	ldi	r31, 0xFF	; 255
    15ca:	ef 1a       	sub	r14, r31
    15cc:	ff 0a       	sbc	r15, r31
    15ce:	e8 81       	ld	r30, Y
    15d0:	f9 81       	ldd	r31, Y+1	; 0x01
    15d2:	82 81       	ldd	r24, Z+2	; 0x02
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	e8 16       	cp	r14, r24
    15d8:	f9 06       	cpc	r15, r25
    15da:	10 f3       	brcs	.-60     	; 0x15a0 <dir_next+0x15a>
    15dc:	86 a5       	ldd	r24, Z+46	; 0x2e
    15de:	97 a5       	ldd	r25, Z+47	; 0x2f
    15e0:	a0 a9       	ldd	r26, Z+48	; 0x30
    15e2:	b1 a9       	ldd	r27, Z+49	; 0x31
    15e4:	8e 19       	sub	r24, r14
    15e6:	9f 09       	sbc	r25, r15
    15e8:	a1 09       	sbc	r26, r1
    15ea:	b1 09       	sbc	r27, r1
    15ec:	86 a7       	std	Z+46, r24	; 0x2e
    15ee:	97 a7       	std	Z+47, r25	; 0x2f
    15f0:	a0 ab       	std	Z+48, r26	; 0x30
    15f2:	b1 ab       	std	Z+49, r27	; 0x31
    15f4:	8a 86       	std	Y+10, r8	; 0x0a
    15f6:	9b 86       	std	Y+11, r9	; 0x0b
    15f8:	ac 86       	std	Y+12, r10	; 0x0c
    15fa:	bd 86       	std	Y+13, r11	; 0x0d
    15fc:	b5 01       	movw	r22, r10
    15fe:	a4 01       	movw	r20, r8
    1600:	88 81       	ld	r24, Y
    1602:	99 81       	ldd	r25, Y+1	; 0x01
    1604:	45 db       	rcall	.-2422   	; 0xc90 <clust2sect>
    1606:	6e 87       	std	Y+14, r22	; 0x0e
    1608:	7f 87       	std	Y+15, r23	; 0x0f
    160a:	88 8b       	std	Y+16, r24	; 0x10
    160c:	99 8b       	std	Y+17, r25	; 0x11
    160e:	0c 83       	std	Y+4, r16	; 0x04
    1610:	1d 83       	std	Y+5, r17	; 0x05
    1612:	cc 0c       	add	r12, r12
    1614:	dd 1c       	adc	r13, r13
    1616:	cc 0c       	add	r12, r12
    1618:	dd 1c       	adc	r13, r13
    161a:	cc 0c       	add	r12, r12
    161c:	dd 1c       	adc	r13, r13
    161e:	cc 0c       	add	r12, r12
    1620:	dd 1c       	adc	r13, r13
    1622:	cc 0c       	add	r12, r12
    1624:	dd 1c       	adc	r13, r13
    1626:	22 e3       	ldi	r18, 0x32	; 50
    1628:	c2 0e       	add	r12, r18
    162a:	d1 1c       	adc	r13, r1
    162c:	88 81       	ld	r24, Y
    162e:	99 81       	ldd	r25, Y+1	; 0x01
    1630:	c8 0e       	add	r12, r24
    1632:	d9 1e       	adc	r13, r25
    1634:	ca 8a       	std	Y+18, r12	; 0x12
    1636:	db 8a       	std	Y+19, r13	; 0x13
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	15 c0       	rjmp	.+42     	; 0x1666 <dir_next+0x220>
    163c:	84 e0       	ldi	r24, 0x04	; 4
    163e:	13 c0       	rjmp	.+38     	; 0x1666 <dir_next+0x220>
    1640:	84 e0       	ldi	r24, 0x04	; 4
    1642:	11 c0       	rjmp	.+34     	; 0x1666 <dir_next+0x220>
    1644:	84 e0       	ldi	r24, 0x04	; 4
    1646:	0f c0       	rjmp	.+30     	; 0x1666 <dir_next+0x220>
    1648:	82 e0       	ldi	r24, 0x02	; 2
    164a:	0d c0       	rjmp	.+26     	; 0x1666 <dir_next+0x220>
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	0b c0       	rjmp	.+22     	; 0x1666 <dir_next+0x220>
    1650:	84 e0       	ldi	r24, 0x04	; 4
    1652:	09 c0       	rjmp	.+18     	; 0x1666 <dir_next+0x220>
    1654:	87 e0       	ldi	r24, 0x07	; 7
    1656:	07 c0       	rjmp	.+14     	; 0x1666 <dir_next+0x220>
    1658:	82 e0       	ldi	r24, 0x02	; 2
    165a:	05 c0       	rjmp	.+10     	; 0x1666 <dir_next+0x220>
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	03 c0       	rjmp	.+6      	; 0x1666 <dir_next+0x220>
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <dir_next+0x220>
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	ff 90       	pop	r15
    1670:	ef 90       	pop	r14
    1672:	df 90       	pop	r13
    1674:	cf 90       	pop	r12
    1676:	bf 90       	pop	r11
    1678:	af 90       	pop	r10
    167a:	9f 90       	pop	r9
    167c:	8f 90       	pop	r8
    167e:	7f 90       	pop	r7
    1680:	08 95       	ret

00001682 <follow_path>:
    1682:	6f 92       	push	r6
    1684:	7f 92       	push	r7
    1686:	8f 92       	push	r8
    1688:	af 92       	push	r10
    168a:	bf 92       	push	r11
    168c:	cf 92       	push	r12
    168e:	df 92       	push	r13
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	ec 01       	movw	r28, r24
    169e:	8b 01       	movw	r16, r22
    16a0:	fb 01       	movw	r30, r22
    16a2:	80 81       	ld	r24, Z
    16a4:	8f 32       	cpi	r24, 0x2F	; 47
    16a6:	11 f0       	breq	.+4      	; 0x16ac <follow_path+0x2a>
    16a8:	8c 35       	cpi	r24, 0x5C	; 92
    16aa:	39 f4       	brne	.+14     	; 0x16ba <follow_path+0x38>
    16ac:	0f 5f       	subi	r16, 0xFF	; 255
    16ae:	1f 4f       	sbci	r17, 0xFF	; 255
    16b0:	1e 82       	std	Y+6, r1	; 0x06
    16b2:	1f 82       	std	Y+7, r1	; 0x07
    16b4:	18 86       	std	Y+8, r1	; 0x08
    16b6:	19 86       	std	Y+9, r1	; 0x09
    16b8:	0a c0       	rjmp	.+20     	; 0x16ce <follow_path+0x4c>
    16ba:	e8 81       	ld	r30, Y
    16bc:	f9 81       	ldd	r31, Y+1	; 0x01
    16be:	82 89       	ldd	r24, Z+18	; 0x12
    16c0:	93 89       	ldd	r25, Z+19	; 0x13
    16c2:	a4 89       	ldd	r26, Z+20	; 0x14
    16c4:	b5 89       	ldd	r27, Z+21	; 0x15
    16c6:	8e 83       	std	Y+6, r24	; 0x06
    16c8:	9f 83       	std	Y+7, r25	; 0x07
    16ca:	a8 87       	std	Y+8, r26	; 0x08
    16cc:	b9 87       	std	Y+9, r27	; 0x09
    16ce:	f8 01       	movw	r30, r16
    16d0:	80 81       	ld	r24, Z
    16d2:	80 32       	cpi	r24, 0x20	; 32
    16d4:	78 f0       	brcs	.+30     	; 0x16f4 <follow_path+0x72>
    16d6:	0f 2e       	mov	r0, r31
    16d8:	fe e2       	ldi	r31, 0x2E	; 46
    16da:	df 2e       	mov	r13, r31
    16dc:	f0 2d       	mov	r31, r0
    16de:	0f 2e       	mov	r0, r31
    16e0:	f5 e0       	ldi	r31, 0x05	; 5
    16e2:	8f 2e       	mov	r8, r31
    16e4:	f0 2d       	mov	r31, r0
    16e6:	0f 2e       	mov	r0, r31
    16e8:	f9 e8       	ldi	r31, 0x89	; 137
    16ea:	af 2e       	mov	r10, r31
    16ec:	f0 e2       	ldi	r31, 0x20	; 32
    16ee:	bf 2e       	mov	r11, r31
    16f0:	f0 2d       	mov	r31, r0
    16f2:	07 c0       	rjmp	.+14     	; 0x1702 <follow_path+0x80>
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	ce 01       	movw	r24, r28
    16fa:	de db       	rcall	.-2116   	; 0xeb8 <dir_sdi>
    16fc:	1a 8a       	std	Y+18, r1	; 0x12
    16fe:	1b 8a       	std	Y+19, r1	; 0x13
    1700:	4c c1       	rjmp	.+664    	; 0x199a <follow_path+0x318>
    1702:	f8 01       	movw	r30, r16
    1704:	8f 01       	movw	r16, r30
    1706:	81 91       	ld	r24, Z+
    1708:	8f 32       	cpi	r24, 0x2F	; 47
    170a:	e1 f3       	breq	.-8      	; 0x1704 <follow_path+0x82>
    170c:	8c 35       	cpi	r24, 0x5C	; 92
    170e:	d1 f3       	breq	.-12     	; 0x1704 <follow_path+0x82>
    1710:	ec 88       	ldd	r14, Y+20	; 0x14
    1712:	fd 88       	ldd	r15, Y+21	; 0x15
    1714:	4b e0       	ldi	r20, 0x0B	; 11
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	60 e2       	ldi	r22, 0x20	; 32
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	c7 01       	movw	r24, r14
    171e:	0e 94 be 01 	call	0x37c	; 0x37c <mem_set>
    1722:	f8 01       	movw	r30, r16
    1724:	80 81       	ld	r24, Z
    1726:	8e 32       	cpi	r24, 0x2E	; 46
    1728:	41 f0       	breq	.+16     	; 0x173a <follow_path+0xb8>
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	60 e0       	ldi	r22, 0x00	; 0
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	88 e0       	ldi	r24, 0x08	; 8
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	c1 2c       	mov	r12, r1
    1738:	1f c0       	rjmp	.+62     	; 0x1778 <follow_path+0xf6>
    173a:	f7 01       	movw	r30, r14
    173c:	d0 82       	st	Z, r13
    173e:	f8 01       	movw	r30, r16
    1740:	21 81       	ldd	r18, Z+1	; 0x01
    1742:	2e 32       	cpi	r18, 0x2E	; 46
    1744:	51 f4       	brne	.+20     	; 0x175a <follow_path+0xd8>
    1746:	f7 01       	movw	r30, r14
    1748:	d1 82       	std	Z+1, r13	; 0x01
    174a:	f8 01       	movw	r30, r16
    174c:	22 81       	ldd	r18, Z+2	; 0x02
    174e:	2e 32       	cpi	r18, 0x2E	; 46
    1750:	09 f4       	brne	.+2      	; 0x1754 <follow_path+0xd2>
    1752:	0b c1       	rjmp	.+534    	; 0x196a <follow_path+0x2e8>
    1754:	83 e0       	ldi	r24, 0x03	; 3
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 c0       	rjmp	.+4      	; 0x175e <follow_path+0xdc>
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	2f 32       	cpi	r18, 0x2F	; 47
    1760:	09 f4       	brne	.+2      	; 0x1764 <follow_path+0xe2>
    1762:	e7 c0       	rjmp	.+462    	; 0x1932 <follow_path+0x2b0>
    1764:	2c 35       	cpi	r18, 0x5C	; 92
    1766:	09 f4       	brne	.+2      	; 0x176a <follow_path+0xe8>
    1768:	e4 c0       	rjmp	.+456    	; 0x1932 <follow_path+0x2b0>
    176a:	21 32       	cpi	r18, 0x21	; 33
    176c:	08 f0       	brcs	.+2      	; 0x1770 <follow_path+0xee>
    176e:	fd c0       	rjmp	.+506    	; 0x196a <follow_path+0x2e8>
    1770:	e4 c0       	rjmp	.+456    	; 0x193a <follow_path+0x2b8>
    1772:	f7 01       	movw	r30, r14
    1774:	83 87       	std	Z+11, r24	; 0x0b
    1776:	fb c0       	rjmp	.+502    	; 0x196e <follow_path+0x2ec>
    1778:	ab 01       	movw	r20, r22
    177a:	4f 5f       	subi	r20, 0xFF	; 255
    177c:	5f 4f       	sbci	r21, 0xFF	; 255
    177e:	f8 01       	movw	r30, r16
    1780:	e6 0f       	add	r30, r22
    1782:	f7 1f       	adc	r31, r23
    1784:	b0 81       	ld	r27, Z
    1786:	b1 32       	cpi	r27, 0x21	; 33
    1788:	08 f4       	brcc	.+2      	; 0x178c <follow_path+0x10a>
    178a:	ea c0       	rjmp	.+468    	; 0x1960 <follow_path+0x2de>
    178c:	bf 32       	cpi	r27, 0x2F	; 47
    178e:	09 f4       	brne	.+2      	; 0x1792 <follow_path+0x110>
    1790:	e2 c0       	rjmp	.+452    	; 0x1956 <follow_path+0x2d4>
    1792:	bc 35       	cpi	r27, 0x5C	; 92
    1794:	09 f4       	brne	.+2      	; 0x1798 <follow_path+0x116>
    1796:	df c0       	rjmp	.+446    	; 0x1956 <follow_path+0x2d4>
    1798:	be 32       	cpi	r27, 0x2E	; 46
    179a:	09 f4       	brne	.+2      	; 0x179e <follow_path+0x11c>
    179c:	d2 c0       	rjmp	.+420    	; 0x1942 <follow_path+0x2c0>
    179e:	28 17       	cp	r18, r24
    17a0:	39 07       	cpc	r19, r25
    17a2:	08 f0       	brcs	.+2      	; 0x17a6 <follow_path+0x124>
    17a4:	be c0       	rjmp	.+380    	; 0x1922 <follow_path+0x2a0>
    17a6:	08 c0       	rjmp	.+16     	; 0x17b8 <follow_path+0x136>
    17a8:	cc 0c       	add	r12, r12
    17aa:	cc 0c       	add	r12, r12
    17ac:	ba 01       	movw	r22, r20
    17ae:	28 e0       	ldi	r18, 0x08	; 8
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	8b e0       	ldi	r24, 0x0B	; 11
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	e0 cf       	rjmp	.-64     	; 0x1778 <follow_path+0xf6>
    17b8:	bb 23       	and	r27, r27
    17ba:	1c f4       	brge	.+6      	; 0x17c2 <follow_path+0x140>
    17bc:	fc 2d       	mov	r31, r12
    17be:	f3 60       	ori	r31, 0x03	; 3
    17c0:	cf 2e       	mov	r12, r31
    17c2:	ef e7       	ldi	r30, 0x7F	; 127
    17c4:	eb 0f       	add	r30, r27
    17c6:	ef 31       	cpi	r30, 0x1F	; 31
    17c8:	20 f0       	brcs	.+8      	; 0x17d2 <follow_path+0x150>
    17ca:	e0 e2       	ldi	r30, 0x20	; 32
    17cc:	eb 0f       	add	r30, r27
    17ce:	ed 31       	cpi	r30, 0x1D	; 29
    17d0:	10 f5       	brcc	.+68     	; 0x1816 <follow_path+0x194>
    17d2:	6e 5f       	subi	r22, 0xFE	; 254
    17d4:	7f 4f       	sbci	r23, 0xFF	; 255
    17d6:	f8 01       	movw	r30, r16
    17d8:	e4 0f       	add	r30, r20
    17da:	f5 1f       	adc	r31, r21
    17dc:	a0 81       	ld	r26, Z
    17de:	40 ec       	ldi	r20, 0xC0	; 192
    17e0:	4a 0f       	add	r20, r26
    17e2:	4f 33       	cpi	r20, 0x3F	; 63
    17e4:	28 f0       	brcs	.+10     	; 0x17f0 <follow_path+0x16e>
    17e6:	40 e8       	ldi	r20, 0x80	; 128
    17e8:	4a 0f       	add	r20, r26
    17ea:	4d 37       	cpi	r20, 0x7D	; 125
    17ec:	08 f0       	brcs	.+2      	; 0x17f0 <follow_path+0x16e>
    17ee:	bd c0       	rjmp	.+378    	; 0x196a <follow_path+0x2e8>
    17f0:	ac 01       	movw	r20, r24
    17f2:	41 50       	subi	r20, 0x01	; 1
    17f4:	51 09       	sbc	r21, r1
    17f6:	24 17       	cp	r18, r20
    17f8:	35 07       	cpc	r19, r21
    17fa:	08 f0       	brcs	.+2      	; 0x17fe <follow_path+0x17c>
    17fc:	b6 c0       	rjmp	.+364    	; 0x196a <follow_path+0x2e8>
    17fe:	f7 01       	movw	r30, r14
    1800:	e2 0f       	add	r30, r18
    1802:	f3 1f       	adc	r31, r19
    1804:	b0 83       	st	Z, r27
    1806:	f9 01       	movw	r30, r18
    1808:	31 96       	adiw	r30, 0x01	; 1
    180a:	ee 0d       	add	r30, r14
    180c:	ff 1d       	adc	r31, r15
    180e:	2e 5f       	subi	r18, 0xFE	; 254
    1810:	3f 4f       	sbci	r19, 0xFF	; 255
    1812:	a0 83       	st	Z, r26
    1814:	b1 cf       	rjmp	.-158    	; 0x1778 <follow_path+0xf6>
    1816:	6b 2e       	mov	r6, r27
    1818:	71 2c       	mov	r7, r1
    181a:	62 e2       	ldi	r22, 0x22	; 34
    181c:	66 16       	cp	r6, r22
    181e:	71 04       	cpc	r7, r1
    1820:	09 f4       	brne	.+2      	; 0x1824 <follow_path+0x1a2>
    1822:	a3 c0       	rjmp	.+326    	; 0x196a <follow_path+0x2e8>
    1824:	f5 01       	movw	r30, r10
    1826:	61 91       	ld	r22, Z+
    1828:	66 23       	and	r22, r22
    182a:	09 f4       	brne	.+2      	; 0x182e <follow_path+0x1ac>
    182c:	8e c0       	rjmp	.+284    	; 0x194a <follow_path+0x2c8>
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	66 16       	cp	r6, r22
    1832:	77 06       	cpc	r7, r23
    1834:	c1 f7       	brne	.-16     	; 0x1826 <follow_path+0x1a4>
    1836:	99 c0       	rjmp	.+306    	; 0x196a <follow_path+0x2e8>
    1838:	ec 2d       	mov	r30, r12
    183a:	e2 60       	ori	r30, 0x02	; 2
    183c:	ce 2e       	mov	r12, r30
    183e:	08 c0       	rjmp	.+16     	; 0x1850 <follow_path+0x1ce>
    1840:	6f e9       	ldi	r22, 0x9F	; 159
    1842:	6b 0f       	add	r22, r27
    1844:	6a 31       	cpi	r22, 0x1A	; 26
    1846:	20 f4       	brcc	.+8      	; 0x1850 <follow_path+0x1ce>
    1848:	fc 2d       	mov	r31, r12
    184a:	f1 60       	ori	r31, 0x01	; 1
    184c:	cf 2e       	mov	r12, r31
    184e:	b0 52       	subi	r27, 0x20	; 32
    1850:	f7 01       	movw	r30, r14
    1852:	e2 0f       	add	r30, r18
    1854:	f3 1f       	adc	r31, r19
    1856:	b0 83       	st	Z, r27
    1858:	2f 5f       	subi	r18, 0xFF	; 255
    185a:	3f 4f       	sbci	r19, 0xFF	; 255
    185c:	ba 01       	movw	r22, r20
    185e:	8c cf       	rjmp	.-232    	; 0x1778 <follow_path+0xf6>
    1860:	23 2b       	or	r18, r19
    1862:	09 f4       	brne	.+2      	; 0x1866 <follow_path+0x1e4>
    1864:	82 c0       	rjmp	.+260    	; 0x196a <follow_path+0x2e8>
    1866:	f7 01       	movw	r30, r14
    1868:	20 81       	ld	r18, Z
    186a:	25 3e       	cpi	r18, 0xE5	; 229
    186c:	09 f4       	brne	.+2      	; 0x1870 <follow_path+0x1ee>
    186e:	80 82       	st	Z, r8
    1870:	08 97       	sbiw	r24, 0x08	; 8
    1872:	19 f4       	brne	.+6      	; 0x187a <follow_path+0x1f8>
    1874:	c5 2e       	mov	r12, r21
    1876:	cc 0c       	add	r12, r12
    1878:	cc 0c       	add	r12, r12
    187a:	8c 2d       	mov	r24, r12
    187c:	83 70       	andi	r24, 0x03	; 3
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	09 f4       	brne	.+2      	; 0x1884 <follow_path+0x202>
    1882:	40 61       	ori	r20, 0x10	; 16
    1884:	8c 2d       	mov	r24, r12
    1886:	8c 70       	andi	r24, 0x0C	; 12
    1888:	84 30       	cpi	r24, 0x04	; 4
    188a:	09 f4       	brne	.+2      	; 0x188e <follow_path+0x20c>
    188c:	48 60       	ori	r20, 0x08	; 8
    188e:	f7 01       	movw	r30, r14
    1890:	43 87       	std	Z+11, r20	; 0x0b
    1892:	6d c0       	rjmp	.+218    	; 0x196e <follow_path+0x2ec>
    1894:	4e 85       	ldd	r20, Y+14	; 0x0e
    1896:	5f 85       	ldd	r21, Y+15	; 0x0f
    1898:	68 89       	ldd	r22, Y+16	; 0x10
    189a:	79 89       	ldd	r23, Y+17	; 0x11
    189c:	88 81       	ld	r24, Y
    189e:	99 81       	ldd	r25, Y+1	; 0x01
    18a0:	0e 94 87 02 	call	0x50e	; 0x50e <move_window>
    18a4:	81 11       	cpse	r24, r1
    18a6:	6a c0       	rjmp	.+212    	; 0x197c <follow_path+0x2fa>
    18a8:	6a 89       	ldd	r22, Y+18	; 0x12
    18aa:	7b 89       	ldd	r23, Y+19	; 0x13
    18ac:	fb 01       	movw	r30, r22
    18ae:	90 81       	ld	r25, Z
    18b0:	99 23       	and	r25, r25
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <follow_path+0x234>
    18b4:	6a c0       	rjmp	.+212    	; 0x198a <follow_path+0x308>
    18b6:	93 85       	ldd	r25, Z+11	; 0x0b
    18b8:	93 fd       	sbrc	r25, 3
    18ba:	0f c0       	rjmp	.+30     	; 0x18da <follow_path+0x258>
    18bc:	4c 89       	ldd	r20, Y+20	; 0x14
    18be:	5d 89       	ldd	r21, Y+21	; 0x15
    18c0:	da 01       	movw	r26, r20
    18c2:	9b 01       	movw	r18, r22
    18c4:	25 5f       	subi	r18, 0xF5	; 245
    18c6:	3f 4f       	sbci	r19, 0xFF	; 255
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <follow_path+0x250>
    18ca:	e2 17       	cp	r30, r18
    18cc:	f3 07       	cpc	r31, r19
    18ce:	09 f4       	brne	.+2      	; 0x18d2 <follow_path+0x250>
    18d0:	60 c0       	rjmp	.+192    	; 0x1992 <follow_path+0x310>
    18d2:	f1 90       	ld	r15, Z+
    18d4:	9d 91       	ld	r25, X+
    18d6:	f9 16       	cp	r15, r25
    18d8:	c1 f3       	breq	.-16     	; 0x18ca <follow_path+0x248>
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	ce 01       	movw	r24, r28
    18e0:	b2 dd       	rcall	.-1180   	; 0x1446 <dir_next>
    18e2:	88 23       	and	r24, r24
    18e4:	b9 f2       	breq	.-82     	; 0x1894 <follow_path+0x212>
    18e6:	4a c0       	rjmp	.+148    	; 0x197c <follow_path+0x2fa>
    18e8:	95 ff       	sbrs	r25, 5
    18ea:	0a c0       	rjmp	.+20     	; 0x1900 <follow_path+0x27e>
    18ec:	1e 82       	std	Y+6, r1	; 0x06
    18ee:	1f 82       	std	Y+7, r1	; 0x07
    18f0:	18 86       	std	Y+8, r1	; 0x08
    18f2:	19 86       	std	Y+9, r1	; 0x09
    18f4:	1a 8a       	std	Y+18, r1	; 0x12
    18f6:	1b 8a       	std	Y+19, r1	; 0x13
    18f8:	92 ff       	sbrs	r25, 2
    18fa:	03 cf       	rjmp	.-506    	; 0x1702 <follow_path+0x80>
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	4d c0       	rjmp	.+154    	; 0x199a <follow_path+0x318>
    1900:	92 ff       	sbrs	r25, 2
    1902:	11 c0       	rjmp	.+34     	; 0x1926 <follow_path+0x2a4>
    1904:	84 e0       	ldi	r24, 0x04	; 4
    1906:	49 c0       	rjmp	.+146    	; 0x199a <follow_path+0x318>
    1908:	fb 01       	movw	r30, r22
    190a:	83 85       	ldd	r24, Z+11	; 0x0b
    190c:	84 ff       	sbrs	r24, 4
    190e:	0d c0       	rjmp	.+26     	; 0x192a <follow_path+0x2a8>
    1910:	88 81       	ld	r24, Y
    1912:	99 81       	ldd	r25, Y+1	; 0x01
    1914:	0e 94 c9 01 	call	0x392	; 0x392 <ld_clust>
    1918:	6e 83       	std	Y+6, r22	; 0x06
    191a:	7f 83       	std	Y+7, r23	; 0x07
    191c:	88 87       	std	Y+8, r24	; 0x08
    191e:	99 87       	std	Y+9, r25	; 0x09
    1920:	f0 ce       	rjmp	.-544    	; 0x1702 <follow_path+0x80>
    1922:	86 e0       	ldi	r24, 0x06	; 6
    1924:	3a c0       	rjmp	.+116    	; 0x199a <follow_path+0x318>
    1926:	85 e0       	ldi	r24, 0x05	; 5
    1928:	38 c0       	rjmp	.+112    	; 0x199a <follow_path+0x318>
    192a:	85 e0       	ldi	r24, 0x05	; 5
    192c:	36 c0       	rjmp	.+108    	; 0x199a <follow_path+0x318>
    192e:	86 e0       	ldi	r24, 0x06	; 6
    1930:	34 c0       	rjmp	.+104    	; 0x199a <follow_path+0x318>
    1932:	08 0f       	add	r16, r24
    1934:	19 1f       	adc	r17, r25
    1936:	80 e2       	ldi	r24, 0x20	; 32
    1938:	1c cf       	rjmp	.-456    	; 0x1772 <follow_path+0xf0>
    193a:	08 0f       	add	r16, r24
    193c:	19 1f       	adc	r17, r25
    193e:	84 e2       	ldi	r24, 0x24	; 36
    1940:	18 cf       	rjmp	.-464    	; 0x1772 <follow_path+0xf0>
    1942:	08 97       	sbiw	r24, 0x08	; 8
    1944:	09 f4       	brne	.+2      	; 0x1948 <follow_path+0x2c6>
    1946:	30 cf       	rjmp	.-416    	; 0x17a8 <follow_path+0x126>
    1948:	f2 cf       	rjmp	.-28     	; 0x192e <follow_path+0x2ac>
    194a:	6f eb       	ldi	r22, 0xBF	; 191
    194c:	6b 0f       	add	r22, r27
    194e:	6a 31       	cpi	r22, 0x1A	; 26
    1950:	08 f4       	brcc	.+2      	; 0x1954 <follow_path+0x2d2>
    1952:	72 cf       	rjmp	.-284    	; 0x1838 <follow_path+0x1b6>
    1954:	75 cf       	rjmp	.-278    	; 0x1840 <follow_path+0x1be>
    1956:	04 0f       	add	r16, r20
    1958:	15 1f       	adc	r17, r21
    195a:	5c 2d       	mov	r21, r12
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	80 cf       	rjmp	.-256    	; 0x1860 <follow_path+0x1de>
    1960:	04 0f       	add	r16, r20
    1962:	15 1f       	adc	r17, r21
    1964:	5c 2d       	mov	r21, r12
    1966:	44 e0       	ldi	r20, 0x04	; 4
    1968:	7b cf       	rjmp	.-266    	; 0x1860 <follow_path+0x1de>
    196a:	86 e0       	ldi	r24, 0x06	; 6
    196c:	16 c0       	rjmp	.+44     	; 0x199a <follow_path+0x318>
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	ce 01       	movw	r24, r28
    1974:	a1 da       	rcall	.-2750   	; 0xeb8 <dir_sdi>
    1976:	88 23       	and	r24, r24
    1978:	09 f4       	brne	.+2      	; 0x197c <follow_path+0x2fa>
    197a:	8c cf       	rjmp	.-232    	; 0x1894 <follow_path+0x212>
    197c:	ec 89       	ldd	r30, Y+20	; 0x14
    197e:	fd 89       	ldd	r31, Y+21	; 0x15
    1980:	93 85       	ldd	r25, Z+11	; 0x0b
    1982:	84 30       	cpi	r24, 0x04	; 4
    1984:	09 f4       	brne	.+2      	; 0x1988 <follow_path+0x306>
    1986:	b0 cf       	rjmp	.-160    	; 0x18e8 <follow_path+0x266>
    1988:	08 c0       	rjmp	.+16     	; 0x199a <follow_path+0x318>
    198a:	ec 89       	ldd	r30, Y+20	; 0x14
    198c:	fd 89       	ldd	r31, Y+21	; 0x15
    198e:	93 85       	ldd	r25, Z+11	; 0x0b
    1990:	ab cf       	rjmp	.-170    	; 0x18e8 <follow_path+0x266>
    1992:	fa 01       	movw	r30, r20
    1994:	93 85       	ldd	r25, Z+11	; 0x0b
    1996:	92 ff       	sbrs	r25, 2
    1998:	b7 cf       	rjmp	.-146    	; 0x1908 <follow_path+0x286>
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	1f 91       	pop	r17
    19a0:	0f 91       	pop	r16
    19a2:	ff 90       	pop	r15
    19a4:	ef 90       	pop	r14
    19a6:	df 90       	pop	r13
    19a8:	cf 90       	pop	r12
    19aa:	bf 90       	pop	r11
    19ac:	af 90       	pop	r10
    19ae:	8f 90       	pop	r8
    19b0:	7f 90       	pop	r7
    19b2:	6f 90       	pop	r6
    19b4:	08 95       	ret

000019b6 <dir_alloc>:
    19b6:	ef 92       	push	r14
    19b8:	ff 92       	push	r15
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	ec 01       	movw	r28, r24
    19c4:	7b 01       	movw	r14, r22
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	76 da       	rcall	.-2836   	; 0xeb8 <dir_sdi>
    19cc:	81 11       	cpse	r24, r1
    19ce:	21 c0       	rjmp	.+66     	; 0x1a12 <dir_alloc+0x5c>
    19d0:	00 e0       	ldi	r16, 0x00	; 0
    19d2:	10 e0       	ldi	r17, 0x00	; 0
    19d4:	4e 85       	ldd	r20, Y+14	; 0x0e
    19d6:	5f 85       	ldd	r21, Y+15	; 0x0f
    19d8:	68 89       	ldd	r22, Y+16	; 0x10
    19da:	79 89       	ldd	r23, Y+17	; 0x11
    19dc:	88 81       	ld	r24, Y
    19de:	99 81       	ldd	r25, Y+1	; 0x01
    19e0:	0e 94 87 02 	call	0x50e	; 0x50e <move_window>
    19e4:	81 11       	cpse	r24, r1
    19e6:	15 c0       	rjmp	.+42     	; 0x1a12 <dir_alloc+0x5c>
    19e8:	ea 89       	ldd	r30, Y+18	; 0x12
    19ea:	fb 89       	ldd	r31, Y+19	; 0x13
    19ec:	90 81       	ld	r25, Z
    19ee:	95 3e       	cpi	r25, 0xE5	; 229
    19f0:	11 f0       	breq	.+4      	; 0x19f6 <dir_alloc+0x40>
    19f2:	91 11       	cpse	r25, r1
    19f4:	06 c0       	rjmp	.+12     	; 0x1a02 <dir_alloc+0x4c>
    19f6:	0f 5f       	subi	r16, 0xFF	; 255
    19f8:	1f 4f       	sbci	r17, 0xFF	; 255
    19fa:	0e 15       	cp	r16, r14
    19fc:	1f 05       	cpc	r17, r15
    19fe:	19 f4       	brne	.+6      	; 0x1a06 <dir_alloc+0x50>
    1a00:	0b c0       	rjmp	.+22     	; 0x1a18 <dir_alloc+0x62>
    1a02:	00 e0       	ldi	r16, 0x00	; 0
    1a04:	10 e0       	ldi	r17, 0x00	; 0
    1a06:	61 e0       	ldi	r22, 0x01	; 1
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	1c dd       	rcall	.-1480   	; 0x1446 <dir_next>
    1a0e:	88 23       	and	r24, r24
    1a10:	09 f3       	breq	.-62     	; 0x19d4 <dir_alloc+0x1e>
    1a12:	84 30       	cpi	r24, 0x04	; 4
    1a14:	09 f4       	brne	.+2      	; 0x1a18 <dir_alloc+0x62>
    1a16:	87 e0       	ldi	r24, 0x07	; 7
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	1f 91       	pop	r17
    1a1e:	0f 91       	pop	r16
    1a20:	ff 90       	pop	r15
    1a22:	ef 90       	pop	r14
    1a24:	08 95       	ret

00001a26 <dir_register>:
    1a26:	1f 93       	push	r17
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	ec 01       	movw	r28, r24
    1a2e:	61 e0       	ldi	r22, 0x01	; 1
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	c1 df       	rcall	.-126    	; 0x19b6 <dir_alloc>
    1a34:	18 2f       	mov	r17, r24
    1a36:	81 11       	cpse	r24, r1
    1a38:	1f c0       	rjmp	.+62     	; 0x1a78 <dir_register+0x52>
    1a3a:	4e 85       	ldd	r20, Y+14	; 0x0e
    1a3c:	5f 85       	ldd	r21, Y+15	; 0x0f
    1a3e:	68 89       	ldd	r22, Y+16	; 0x10
    1a40:	79 89       	ldd	r23, Y+17	; 0x11
    1a42:	88 81       	ld	r24, Y
    1a44:	99 81       	ldd	r25, Y+1	; 0x01
    1a46:	0e 94 87 02 	call	0x50e	; 0x50e <move_window>
    1a4a:	18 2f       	mov	r17, r24
    1a4c:	81 11       	cpse	r24, r1
    1a4e:	14 c0       	rjmp	.+40     	; 0x1a78 <dir_register+0x52>
    1a50:	40 e2       	ldi	r20, 0x20	; 32
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	8a 89       	ldd	r24, Y+18	; 0x12
    1a5a:	9b 89       	ldd	r25, Y+19	; 0x13
    1a5c:	0e 94 be 01 	call	0x37c	; 0x37c <mem_set>
    1a60:	6c 89       	ldd	r22, Y+20	; 0x14
    1a62:	7d 89       	ldd	r23, Y+21	; 0x15
    1a64:	4b e0       	ldi	r20, 0x0B	; 11
    1a66:	50 e0       	ldi	r21, 0x00	; 0
    1a68:	8a 89       	ldd	r24, Y+18	; 0x12
    1a6a:	9b 89       	ldd	r25, Y+19	; 0x13
    1a6c:	0e 94 8e 01 	call	0x31c	; 0x31c <mem_cpy>
    1a70:	e8 81       	ld	r30, Y
    1a72:	f9 81       	ldd	r31, Y+1	; 0x01
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	84 83       	std	Z+4, r24	; 0x04
    1a78:	81 2f       	mov	r24, r17
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	08 95       	ret

00001a82 <remove_chain>:
    1a82:	8f 92       	push	r8
    1a84:	9f 92       	push	r9
    1a86:	af 92       	push	r10
    1a88:	bf 92       	push	r11
    1a8a:	cf 92       	push	r12
    1a8c:	df 92       	push	r13
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	ec 01       	movw	r28, r24
    1a9c:	4a 01       	movw	r8, r20
    1a9e:	5b 01       	movw	r10, r22
    1aa0:	42 30       	cpi	r20, 0x02	; 2
    1aa2:	51 05       	cpc	r21, r1
    1aa4:	61 05       	cpc	r22, r1
    1aa6:	71 05       	cpc	r23, r1
    1aa8:	08 f4       	brcc	.+2      	; 0x1aac <remove_chain+0x2a>
    1aaa:	4b c0       	rjmp	.+150    	; 0x1b42 <remove_chain+0xc0>
    1aac:	4e 89       	ldd	r20, Y+22	; 0x16
    1aae:	5f 89       	ldd	r21, Y+23	; 0x17
    1ab0:	68 8d       	ldd	r22, Y+24	; 0x18
    1ab2:	79 8d       	ldd	r23, Y+25	; 0x19
    1ab4:	84 16       	cp	r8, r20
    1ab6:	95 06       	cpc	r9, r21
    1ab8:	a6 06       	cpc	r10, r22
    1aba:	b7 06       	cpc	r11, r23
    1abc:	08 f0       	brcs	.+2      	; 0x1ac0 <remove_chain+0x3e>
    1abe:	43 c0       	rjmp	.+134    	; 0x1b46 <remove_chain+0xc4>
    1ac0:	b5 01       	movw	r22, r10
    1ac2:	a4 01       	movw	r20, r8
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	12 d9       	rcall	.-3548   	; 0xcec <get_fat>
    1ac8:	6b 01       	movw	r12, r22
    1aca:	7c 01       	movw	r14, r24
    1acc:	61 15       	cp	r22, r1
    1ace:	71 05       	cpc	r23, r1
    1ad0:	81 05       	cpc	r24, r1
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	d1 f1       	breq	.+116    	; 0x1b4a <remove_chain+0xc8>
    1ad6:	91 e0       	ldi	r25, 0x01	; 1
    1ad8:	c9 16       	cp	r12, r25
    1ada:	d1 04       	cpc	r13, r1
    1adc:	e1 04       	cpc	r14, r1
    1ade:	f1 04       	cpc	r15, r1
    1ae0:	b1 f1       	breq	.+108    	; 0x1b4e <remove_chain+0xcc>
    1ae2:	8f ef       	ldi	r24, 0xFF	; 255
    1ae4:	c8 16       	cp	r12, r24
    1ae6:	d8 06       	cpc	r13, r24
    1ae8:	e8 06       	cpc	r14, r24
    1aea:	f8 06       	cpc	r15, r24
    1aec:	91 f1       	breq	.+100    	; 0x1b52 <remove_chain+0xd0>
    1aee:	00 e0       	ldi	r16, 0x00	; 0
    1af0:	10 e0       	ldi	r17, 0x00	; 0
    1af2:	98 01       	movw	r18, r16
    1af4:	b5 01       	movw	r22, r10
    1af6:	a4 01       	movw	r20, r8
    1af8:	ce 01       	movw	r24, r28
    1afa:	99 da       	rcall	.-2766   	; 0x102e <put_fat>
    1afc:	81 11       	cpse	r24, r1
    1afe:	2a c0       	rjmp	.+84     	; 0x1b54 <remove_chain+0xd2>
    1b00:	4e 85       	ldd	r20, Y+14	; 0x0e
    1b02:	5f 85       	ldd	r21, Y+15	; 0x0f
    1b04:	68 89       	ldd	r22, Y+16	; 0x10
    1b06:	79 89       	ldd	r23, Y+17	; 0x11
    1b08:	4f 3f       	cpi	r20, 0xFF	; 255
    1b0a:	9f ef       	ldi	r25, 0xFF	; 255
    1b0c:	59 07       	cpc	r21, r25
    1b0e:	69 07       	cpc	r22, r25
    1b10:	79 07       	cpc	r23, r25
    1b12:	59 f0       	breq	.+22     	; 0x1b2a <remove_chain+0xa8>
    1b14:	4f 5f       	subi	r20, 0xFF	; 255
    1b16:	5f 4f       	sbci	r21, 0xFF	; 255
    1b18:	6f 4f       	sbci	r22, 0xFF	; 255
    1b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1c:	4e 87       	std	Y+14, r20	; 0x0e
    1b1e:	5f 87       	std	Y+15, r21	; 0x0f
    1b20:	68 8b       	std	Y+16, r22	; 0x10
    1b22:	79 8b       	std	Y+17, r23	; 0x11
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	91 60       	ori	r25, 0x01	; 1
    1b28:	9d 83       	std	Y+5, r25	; 0x05
    1b2a:	4e 89       	ldd	r20, Y+22	; 0x16
    1b2c:	5f 89       	ldd	r21, Y+23	; 0x17
    1b2e:	68 8d       	ldd	r22, Y+24	; 0x18
    1b30:	79 8d       	ldd	r23, Y+25	; 0x19
    1b32:	c4 16       	cp	r12, r20
    1b34:	d5 06       	cpc	r13, r21
    1b36:	e6 06       	cpc	r14, r22
    1b38:	f7 06       	cpc	r15, r23
    1b3a:	60 f4       	brcc	.+24     	; 0x1b54 <remove_chain+0xd2>
    1b3c:	46 01       	movw	r8, r12
    1b3e:	57 01       	movw	r10, r14
    1b40:	bf cf       	rjmp	.-130    	; 0x1ac0 <remove_chain+0x3e>
    1b42:	82 e0       	ldi	r24, 0x02	; 2
    1b44:	07 c0       	rjmp	.+14     	; 0x1b54 <remove_chain+0xd2>
    1b46:	82 e0       	ldi	r24, 0x02	; 2
    1b48:	05 c0       	rjmp	.+10     	; 0x1b54 <remove_chain+0xd2>
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <remove_chain+0xd2>
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <remove_chain+0xd2>
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	ff 90       	pop	r15
    1b5e:	ef 90       	pop	r14
    1b60:	df 90       	pop	r13
    1b62:	cf 90       	pop	r12
    1b64:	bf 90       	pop	r11
    1b66:	af 90       	pop	r10
    1b68:	9f 90       	pop	r9
    1b6a:	8f 90       	pop	r8
    1b6c:	08 95       	ret

00001b6e <f_mount>:
    1b6e:	1f 93       	push	r17
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	26 97       	sbiw	r28, 0x06	; 6
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	8b 83       	std	Y+3, r24	; 0x03
    1b80:	9c 83       	std	Y+4, r25	; 0x04
    1b82:	6d 83       	std	Y+5, r22	; 0x05
    1b84:	7e 83       	std	Y+6, r23	; 0x06
    1b86:	14 2f       	mov	r17, r20
    1b88:	69 83       	std	Y+1, r22	; 0x01
    1b8a:	7a 83       	std	Y+2, r23	; 0x02
    1b8c:	ce 01       	movw	r24, r28
    1b8e:	01 96       	adiw	r24, 0x01	; 1
    1b90:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <get_ldnumber>
    1b94:	99 23       	and	r25, r25
    1b96:	34 f1       	brlt	.+76     	; 0x1be4 <f_mount+0x76>
    1b98:	fc 01       	movw	r30, r24
    1b9a:	ee 0f       	add	r30, r30
    1b9c:	ff 1f       	adc	r31, r31
    1b9e:	eb 55       	subi	r30, 0x5B	; 91
    1ba0:	fe 4d       	sbci	r31, 0xDE	; 222
    1ba2:	01 90       	ld	r0, Z+
    1ba4:	f0 81       	ld	r31, Z
    1ba6:	e0 2d       	mov	r30, r0
    1ba8:	30 97       	sbiw	r30, 0x00	; 0
    1baa:	09 f0       	breq	.+2      	; 0x1bae <f_mount+0x40>
    1bac:	10 82       	st	Z, r1
    1bae:	eb 81       	ldd	r30, Y+3	; 0x03
    1bb0:	fc 81       	ldd	r31, Y+4	; 0x04
    1bb2:	30 97       	sbiw	r30, 0x00	; 0
    1bb4:	e9 f0       	breq	.+58     	; 0x1bf0 <f_mount+0x82>
    1bb6:	10 82       	st	Z, r1
    1bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bba:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	ee 0f       	add	r30, r30
    1bc0:	ff 1f       	adc	r31, r31
    1bc2:	eb 55       	subi	r30, 0x5B	; 91
    1bc4:	fe 4d       	sbci	r31, 0xDE	; 222
    1bc6:	20 83       	st	Z, r18
    1bc8:	31 83       	std	Z+1, r19	; 0x01
    1bca:	23 2b       	or	r18, r19
    1bcc:	69 f0       	breq	.+26     	; 0x1be8 <f_mount+0x7a>
    1bce:	11 30       	cpi	r17, 0x01	; 1
    1bd0:	69 f4       	brne	.+26     	; 0x1bec <f_mount+0x7e>
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	be 01       	movw	r22, r28
    1bd6:	6b 5f       	subi	r22, 0xFB	; 251
    1bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bda:	ce 01       	movw	r24, r28
    1bdc:	03 96       	adiw	r24, 0x03	; 3
    1bde:	0e 94 26 03 	call	0x64c	; 0x64c <find_volume>
    1be2:	0e c0       	rjmp	.+28     	; 0x1c00 <f_mount+0x92>
    1be4:	8b e0       	ldi	r24, 0x0B	; 11
    1be6:	0c c0       	rjmp	.+24     	; 0x1c00 <f_mount+0x92>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	0a c0       	rjmp	.+20     	; 0x1c00 <f_mount+0x92>
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	08 c0       	rjmp	.+16     	; 0x1c00 <f_mount+0x92>
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	ee 0f       	add	r30, r30
    1bf4:	ff 1f       	adc	r31, r31
    1bf6:	eb 55       	subi	r30, 0x5B	; 91
    1bf8:	fe 4d       	sbci	r31, 0xDE	; 222
    1bfa:	10 82       	st	Z, r1
    1bfc:	11 82       	std	Z+1, r1	; 0x01
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	26 96       	adiw	r28, 0x06	; 6
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	08 95       	ret

00001c0e <f_open>:
    1c0e:	4f 92       	push	r4
    1c10:	5f 92       	push	r5
    1c12:	6f 92       	push	r6
    1c14:	7f 92       	push	r7
    1c16:	bf 92       	push	r11
    1c18:	cf 92       	push	r12
    1c1a:	df 92       	push	r13
    1c1c:	ef 92       	push	r14
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	a8 97       	sbiw	r28, 0x28	; 40
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	8c 01       	movw	r16, r24
    1c34:	6b a3       	std	Y+35, r22	; 0x23
    1c36:	7c a3       	std	Y+36, r23	; 0x24
    1c38:	f4 2e       	mov	r15, r20
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <f_open+0x32>
    1c3e:	d2 c0       	rjmp	.+420    	; 0x1de4 <f_open+0x1d6>
    1c40:	dc 01       	movw	r26, r24
    1c42:	1d 92       	st	X+, r1
    1c44:	1c 92       	st	X, r1
    1c46:	4e 71       	andi	r20, 0x1E	; 30
    1c48:	be 01       	movw	r22, r28
    1c4a:	6d 5d       	subi	r22, 0xDD	; 221
    1c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4e:	ce 01       	movw	r24, r28
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	0e 94 26 03 	call	0x64c	; 0x64c <find_volume>
    1c56:	81 11       	cpse	r24, r1
    1c58:	d9 c0       	rjmp	.+434    	; 0x1e0c <f_open+0x1fe>
    1c5a:	bf 2d       	mov	r27, r15
    1c5c:	bf 71       	andi	r27, 0x1F	; 31
    1c5e:	bb 2e       	mov	r11, r27
    1c60:	ce 01       	movw	r24, r28
    1c62:	47 96       	adiw	r24, 0x17	; 23
    1c64:	8d 8b       	std	Y+21, r24	; 0x15
    1c66:	9e 8b       	std	Y+22, r25	; 0x16
    1c68:	6b a1       	ldd	r22, Y+35	; 0x23
    1c6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c6c:	46 97       	sbiw	r24, 0x16	; 22
    1c6e:	09 dd       	rcall	.-1518   	; 0x1682 <follow_path>
    1c70:	cb 88       	ldd	r12, Y+19	; 0x13
    1c72:	dc 88       	ldd	r13, Y+20	; 0x14
    1c74:	81 11       	cpse	r24, r1
    1c76:	be c0       	rjmp	.+380    	; 0x1df4 <f_open+0x1e6>
    1c78:	c1 14       	cp	r12, r1
    1c7a:	d1 04       	cpc	r13, r1
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <f_open+0x72>
    1c7e:	b4 c0       	rjmp	.+360    	; 0x1de8 <f_open+0x1da>
    1c80:	b8 c0       	rjmp	.+368    	; 0x1df2 <f_open+0x1e4>
    1c82:	88 23       	and	r24, r24
    1c84:	71 f0       	breq	.+28     	; 0x1ca2 <f_open+0x94>
    1c86:	84 30       	cpi	r24, 0x04	; 4
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <f_open+0x7e>
    1c8a:	c0 c0       	rjmp	.+384    	; 0x1e0c <f_open+0x1fe>
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	01 96       	adiw	r24, 0x01	; 1
    1c90:	ca de       	rcall	.-620    	; 0x1a26 <dir_register>
    1c92:	eb 2d       	mov	r30, r11
    1c94:	e8 60       	ori	r30, 0x08	; 8
    1c96:	be 2e       	mov	r11, r30
    1c98:	cb 88       	ldd	r12, Y+19	; 0x13
    1c9a:	dc 88       	ldd	r13, Y+20	; 0x14
    1c9c:	88 23       	and	r24, r24
    1c9e:	49 f0       	breq	.+18     	; 0x1cb2 <f_open+0xa4>
    1ca0:	b5 c0       	rjmp	.+362    	; 0x1e0c <f_open+0x1fe>
    1ca2:	d6 01       	movw	r26, r12
    1ca4:	1b 96       	adiw	r26, 0x0b	; 11
    1ca6:	8c 91       	ld	r24, X
    1ca8:	81 71       	andi	r24, 0x11	; 17
    1caa:	09 f0       	breq	.+2      	; 0x1cae <f_open+0xa0>
    1cac:	a8 c0       	rjmp	.+336    	; 0x1dfe <f_open+0x1f0>
    1cae:	f2 fc       	sbrc	r15, 2
    1cb0:	a8 c0       	rjmp	.+336    	; 0x1e02 <f_open+0x1f4>
    1cb2:	b3 fe       	sbrs	r11, 3
    1cb4:	55 c0       	rjmp	.+170    	; 0x1d60 <f_open+0x152>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	af e4       	ldi	r26, 0x4F	; 79
    1cbc:	b5 e4       	ldi	r27, 0x45	; 69
    1cbe:	f6 01       	movw	r30, r12
    1cc0:	86 87       	std	Z+14, r24	; 0x0e
    1cc2:	97 87       	std	Z+15, r25	; 0x0f
    1cc4:	a0 8b       	std	Z+16, r26	; 0x10
    1cc6:	b1 8b       	std	Z+17, r27	; 0x11
    1cc8:	13 86       	std	Z+11, r1	; 0x0b
    1cca:	14 8e       	std	Z+28, r1	; 0x1c
    1ccc:	15 8e       	std	Z+29, r1	; 0x1d
    1cce:	16 8e       	std	Z+30, r1	; 0x1e
    1cd0:	17 8e       	std	Z+31, r1	; 0x1f
    1cd2:	e9 80       	ldd	r14, Y+1	; 0x01
    1cd4:	fa 80       	ldd	r15, Y+2	; 0x02
    1cd6:	b6 01       	movw	r22, r12
    1cd8:	c7 01       	movw	r24, r14
    1cda:	0e 94 c9 01 	call	0x392	; 0x392 <ld_clust>
    1cde:	2b 01       	movw	r4, r22
    1ce0:	3c 01       	movw	r6, r24
    1ce2:	f6 01       	movw	r30, r12
    1ce4:	12 8e       	std	Z+26, r1	; 0x1a
    1ce6:	13 8e       	std	Z+27, r1	; 0x1b
    1ce8:	14 8a       	std	Z+20, r1	; 0x14
    1cea:	15 8a       	std	Z+21, r1	; 0x15
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	d7 01       	movw	r26, r14
    1cf0:	14 96       	adiw	r26, 0x04	; 4
    1cf2:	8c 93       	st	X, r24
    1cf4:	14 97       	sbiw	r26, 0x04	; 4
    1cf6:	41 14       	cp	r4, r1
    1cf8:	51 04       	cpc	r5, r1
    1cfa:	61 04       	cpc	r6, r1
    1cfc:	71 04       	cpc	r7, r1
    1cfe:	81 f1       	breq	.+96     	; 0x1d60 <f_open+0x152>
    1d00:	9e 96       	adiw	r26, 0x2e	; 46
    1d02:	8d 91       	ld	r24, X+
    1d04:	9d 91       	ld	r25, X+
    1d06:	0d 90       	ld	r0, X+
    1d08:	bc 91       	ld	r27, X
    1d0a:	a0 2d       	mov	r26, r0
    1d0c:	8d a3       	std	Y+37, r24	; 0x25
    1d0e:	9e a3       	std	Y+38, r25	; 0x26
    1d10:	af a3       	std	Y+39, r26	; 0x27
    1d12:	b8 a7       	std	Y+40, r27	; 0x28
    1d14:	b3 01       	movw	r22, r6
    1d16:	a2 01       	movw	r20, r4
    1d18:	c7 01       	movw	r24, r14
    1d1a:	b3 de       	rcall	.-666    	; 0x1a82 <remove_chain>
    1d1c:	81 11       	cpse	r24, r1
    1d1e:	76 c0       	rjmp	.+236    	; 0x1e0c <f_open+0x1fe>
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a 81       	ldd	r25, Y+2	; 0x02
    1d24:	b3 01       	movw	r22, r6
    1d26:	a2 01       	movw	r20, r4
    1d28:	41 50       	subi	r20, 0x01	; 1
    1d2a:	51 09       	sbc	r21, r1
    1d2c:	61 09       	sbc	r22, r1
    1d2e:	71 09       	sbc	r23, r1
    1d30:	fc 01       	movw	r30, r24
    1d32:	42 87       	std	Z+10, r20	; 0x0a
    1d34:	53 87       	std	Z+11, r21	; 0x0b
    1d36:	64 87       	std	Z+12, r22	; 0x0c
    1d38:	75 87       	std	Z+13, r23	; 0x0d
    1d3a:	4d a1       	ldd	r20, Y+37	; 0x25
    1d3c:	5e a1       	ldd	r21, Y+38	; 0x26
    1d3e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d40:	78 a5       	ldd	r23, Y+40	; 0x28
    1d42:	0e 94 87 02 	call	0x50e	; 0x50e <move_window>
    1d46:	0a c0       	rjmp	.+20     	; 0x1d5c <f_open+0x14e>
    1d48:	d6 01       	movw	r26, r12
    1d4a:	1b 96       	adiw	r26, 0x0b	; 11
    1d4c:	8c 91       	ld	r24, X
    1d4e:	84 fd       	sbrc	r24, 4
    1d50:	5a c0       	rjmp	.+180    	; 0x1e06 <f_open+0x1f8>
    1d52:	f1 fe       	sbrs	r15, 1
    1d54:	05 c0       	rjmp	.+10     	; 0x1d60 <f_open+0x152>
    1d56:	80 fd       	sbrc	r24, 0
    1d58:	58 c0       	rjmp	.+176    	; 0x1e0a <f_open+0x1fc>
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <f_open+0x152>
    1d5c:	81 11       	cpse	r24, r1
    1d5e:	56 c0       	rjmp	.+172    	; 0x1e0c <f_open+0x1fe>
    1d60:	b3 fe       	sbrs	r11, 3
    1d62:	03 c0       	rjmp	.+6      	; 0x1d6a <f_open+0x15c>
    1d64:	bb 2d       	mov	r27, r11
    1d66:	b0 62       	ori	r27, 0x20	; 32
    1d68:	bb 2e       	mov	r11, r27
    1d6a:	e9 80       	ldd	r14, Y+1	; 0x01
    1d6c:	fa 80       	ldd	r15, Y+2	; 0x02
    1d6e:	f7 01       	movw	r30, r14
    1d70:	86 a5       	ldd	r24, Z+46	; 0x2e
    1d72:	97 a5       	ldd	r25, Z+47	; 0x2f
    1d74:	a0 a9       	ldd	r26, Z+48	; 0x30
    1d76:	b1 a9       	ldd	r27, Z+49	; 0x31
    1d78:	f8 01       	movw	r30, r16
    1d7a:	82 8f       	std	Z+26, r24	; 0x1a
    1d7c:	93 8f       	std	Z+27, r25	; 0x1b
    1d7e:	a4 8f       	std	Z+28, r26	; 0x1c
    1d80:	b5 8f       	std	Z+29, r27	; 0x1d
    1d82:	c6 8e       	std	Z+30, r12	; 0x1e
    1d84:	d7 8e       	std	Z+31, r13	; 0x1f
    1d86:	b4 82       	std	Z+4, r11	; 0x04
    1d88:	15 82       	std	Z+5, r1	; 0x05
    1d8a:	b6 01       	movw	r22, r12
    1d8c:	c7 01       	movw	r24, r14
    1d8e:	0e 94 c9 01 	call	0x392	; 0x392 <ld_clust>
    1d92:	d8 01       	movw	r26, r16
    1d94:	1e 96       	adiw	r26, 0x0e	; 14
    1d96:	6d 93       	st	X+, r22
    1d98:	7d 93       	st	X+, r23
    1d9a:	8d 93       	st	X+, r24
    1d9c:	9c 93       	st	X, r25
    1d9e:	51 97       	sbiw	r26, 0x11	; 17
    1da0:	f6 01       	movw	r30, r12
    1da2:	44 8d       	ldd	r20, Z+28	; 0x1c
    1da4:	55 8d       	ldd	r21, Z+29	; 0x1d
    1da6:	66 8d       	ldd	r22, Z+30	; 0x1e
    1da8:	77 8d       	ldd	r23, Z+31	; 0x1f
    1daa:	1a 96       	adiw	r26, 0x0a	; 10
    1dac:	4d 93       	st	X+, r20
    1dae:	5d 93       	st	X+, r21
    1db0:	6d 93       	st	X+, r22
    1db2:	7c 93       	st	X, r23
    1db4:	1d 97       	sbiw	r26, 0x0d	; 13
    1db6:	f8 01       	movw	r30, r16
    1db8:	16 82       	std	Z+6, r1	; 0x06
    1dba:	17 82       	std	Z+7, r1	; 0x07
    1dbc:	10 86       	std	Z+8, r1	; 0x08
    1dbe:	11 86       	std	Z+9, r1	; 0x09
    1dc0:	56 96       	adiw	r26, 0x16	; 22
    1dc2:	1d 92       	st	X+, r1
    1dc4:	1d 92       	st	X+, r1
    1dc6:	1d 92       	st	X+, r1
    1dc8:	1c 92       	st	X, r1
    1dca:	59 97       	sbiw	r26, 0x19	; 25
    1dcc:	ed 92       	st	X+, r14
    1dce:	fc 92       	st	X, r15
    1dd0:	11 97       	sbiw	r26, 0x01	; 1
    1dd2:	f7 01       	movw	r30, r14
    1dd4:	86 81       	ldd	r24, Z+6	; 0x06
    1dd6:	97 81       	ldd	r25, Z+7	; 0x07
    1dd8:	12 96       	adiw	r26, 0x02	; 2
    1dda:	8d 93       	st	X+, r24
    1ddc:	9c 93       	st	X, r25
    1dde:	13 97       	sbiw	r26, 0x03	; 3
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	14 c0       	rjmp	.+40     	; 0x1e0c <f_open+0x1fe>
    1de4:	89 e0       	ldi	r24, 0x09	; 9
    1de6:	12 c0       	rjmp	.+36     	; 0x1e0c <f_open+0x1fe>
    1de8:	8f 2d       	mov	r24, r15
    1dea:	8c 71       	andi	r24, 0x1C	; 28
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <f_open+0x1e2>
    1dee:	59 cf       	rjmp	.-334    	; 0x1ca2 <f_open+0x94>
    1df0:	ab cf       	rjmp	.-170    	; 0x1d48 <f_open+0x13a>
    1df2:	86 e0       	ldi	r24, 0x06	; 6
    1df4:	9f 2d       	mov	r25, r15
    1df6:	9c 71       	andi	r25, 0x1C	; 28
    1df8:	09 f0       	breq	.+2      	; 0x1dfc <f_open+0x1ee>
    1dfa:	43 cf       	rjmp	.-378    	; 0x1c82 <f_open+0x74>
    1dfc:	af cf       	rjmp	.-162    	; 0x1d5c <f_open+0x14e>
    1dfe:	87 e0       	ldi	r24, 0x07	; 7
    1e00:	05 c0       	rjmp	.+10     	; 0x1e0c <f_open+0x1fe>
    1e02:	88 e0       	ldi	r24, 0x08	; 8
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <f_open+0x1fe>
    1e06:	84 e0       	ldi	r24, 0x04	; 4
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <f_open+0x1fe>
    1e0a:	87 e0       	ldi	r24, 0x07	; 7
    1e0c:	a8 96       	adiw	r28, 0x28	; 40
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	df 90       	pop	r13
    1e20:	cf 90       	pop	r12
    1e22:	bf 90       	pop	r11
    1e24:	7f 90       	pop	r7
    1e26:	6f 90       	pop	r6
    1e28:	5f 90       	pop	r5
    1e2a:	4f 90       	pop	r4
    1e2c:	08 95       	ret

00001e2e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    1e2e:	2f 92       	push	r2
    1e30:	3f 92       	push	r3
    1e32:	4f 92       	push	r4
    1e34:	5f 92       	push	r5
    1e36:	6f 92       	push	r6
    1e38:	7f 92       	push	r7
    1e3a:	8f 92       	push	r8
    1e3c:	9f 92       	push	r9
    1e3e:	af 92       	push	r10
    1e40:	bf 92       	push	r11
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	ec 01       	movw	r28, r24
    1e54:	5b 01       	movw	r10, r22
    1e56:	7a 01       	movw	r14, r20
    1e58:	69 01       	movw	r12, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    1e5a:	f9 01       	movw	r30, r18
    1e5c:	10 82       	st	Z, r1
    1e5e:	11 82       	std	Z+1, r1	; 0x01

	res = validate(fp);						/* Check validity */
    1e60:	0e 94 01 03 	call	0x602	; 0x602 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1e64:	81 11       	cpse	r24, r1
    1e66:	6a c1       	rjmp	.+724    	; 0x213c <f_write+0x30e>
	if (fp->err)							/* Check error */
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	81 11       	cpse	r24, r1
    1e6c:	67 c1       	rjmp	.+718    	; 0x213c <f_write+0x30e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    1e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e70:	81 ff       	sbrs	r24, 1
    1e72:	63 c1       	rjmp	.+710    	; 0x213a <f_write+0x30c>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    1e74:	8e 81       	ldd	r24, Y+6	; 0x06
    1e76:	9f 81       	ldd	r25, Y+7	; 0x07
    1e78:	a8 85       	ldd	r26, Y+8	; 0x08
    1e7a:	b9 85       	ldd	r27, Y+9	; 0x09
    1e7c:	ac 01       	movw	r20, r24
    1e7e:	bd 01       	movw	r22, r26
    1e80:	4e 0d       	add	r20, r14
    1e82:	5f 1d       	adc	r21, r15
    1e84:	61 1d       	adc	r22, r1
    1e86:	71 1d       	adc	r23, r1
    1e88:	48 17       	cp	r20, r24
    1e8a:	59 07       	cpc	r21, r25
    1e8c:	6a 07       	cpc	r22, r26
    1e8e:	7b 07       	cpc	r23, r27
    1e90:	08 f4       	brcc	.+2      	; 0x1e94 <f_write+0x66>
    1e92:	3d c1       	rjmp	.+634    	; 0x210e <f_write+0x2e0>

	for ( ;  btw;							/* Repeat until all data written */
    1e94:	e1 14       	cp	r14, r1
    1e96:	f1 04       	cpc	r15, r1
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <f_write+0x6e>
    1e9a:	39 c1       	rjmp	.+626    	; 0x210e <f_write+0x2e0>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    1e9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea0:	a8 85       	ldd	r26, Y+8	; 0x08
    1ea2:	b9 85       	ldd	r27, Y+9	; 0x09
    1ea4:	ac 01       	movw	r20, r24
    1ea6:	bd 01       	movw	r22, r26
    1ea8:	51 70       	andi	r21, 0x01	; 1
    1eaa:	66 27       	eor	r22, r22
    1eac:	77 27       	eor	r23, r23
    1eae:	45 2b       	or	r20, r21
    1eb0:	46 2b       	or	r20, r22
    1eb2:	47 2b       	or	r20, r23
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <f_write+0x8a>
    1eb6:	e5 c0       	rjmp	.+458    	; 0x2082 <f_write+0x254>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    1eb8:	e8 81       	ld	r30, Y
    1eba:	f9 81       	ldd	r31, Y+1	; 0x01
    1ebc:	12 81       	ldd	r17, Z+2	; 0x02
    1ebe:	11 50       	subi	r17, 0x01	; 1
    1ec0:	ac 01       	movw	r20, r24
    1ec2:	bd 01       	movw	r22, r26
    1ec4:	03 2e       	mov	r0, r19
    1ec6:	39 e0       	ldi	r19, 0x09	; 9
    1ec8:	76 95       	lsr	r23
    1eca:	67 95       	ror	r22
    1ecc:	57 95       	ror	r21
    1ece:	47 95       	ror	r20
    1ed0:	3a 95       	dec	r19
    1ed2:	d1 f7       	brne	.-12     	; 0x1ec8 <f_write+0x9a>
    1ed4:	30 2d       	mov	r19, r0
    1ed6:	14 23       	and	r17, r20
			if (!csect) {					/* On the cluster boundary? */
    1ed8:	09 f0       	breq	.+2      	; 0x1edc <f_write+0xae>
    1eda:	40 c0       	rjmp	.+128    	; 0x1f5c <f_write+0x12e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    1edc:	89 2b       	or	r24, r25
    1ede:	8a 2b       	or	r24, r26
    1ee0:	8b 2b       	or	r24, r27
    1ee2:	79 f4       	brne	.+30     	; 0x1f02 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    1ee4:	6e 85       	ldd	r22, Y+14	; 0x0e
    1ee6:	7f 85       	ldd	r23, Y+15	; 0x0f
    1ee8:	88 89       	ldd	r24, Y+16	; 0x10
    1eea:	99 89       	ldd	r25, Y+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    1eec:	61 15       	cp	r22, r1
    1eee:	71 05       	cpc	r23, r1
    1ef0:	81 05       	cpc	r24, r1
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	91 f4       	brne	.+36     	; 0x1f1a <f_write+0xec>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    1ef6:	40 e0       	ldi	r20, 0x00	; 0
    1ef8:	50 e0       	ldi	r21, 0x00	; 0
    1efa:	ba 01       	movw	r22, r20
    1efc:	cf 01       	movw	r24, r30
    1efe:	9f d9       	rcall	.-3266   	; 0x123e <create_chain>
    1f00:	06 c0       	rjmp	.+12     	; 0x1f0e <f_write+0xe0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    1f02:	4a 89       	ldd	r20, Y+18	; 0x12
    1f04:	5b 89       	ldd	r21, Y+19	; 0x13
    1f06:	6c 89       	ldd	r22, Y+20	; 0x14
    1f08:	7d 89       	ldd	r23, Y+21	; 0x15
    1f0a:	cf 01       	movw	r24, r30
    1f0c:	98 d9       	rcall	.-3280   	; 0x123e <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    1f0e:	61 15       	cp	r22, r1
    1f10:	71 05       	cpc	r23, r1
    1f12:	81 05       	cpc	r24, r1
    1f14:	91 05       	cpc	r25, r1
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <f_write+0xec>
    1f18:	fa c0       	rjmp	.+500    	; 0x210e <f_write+0x2e0>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    1f1a:	61 30       	cpi	r22, 0x01	; 1
    1f1c:	71 05       	cpc	r23, r1
    1f1e:	81 05       	cpc	r24, r1
    1f20:	91 05       	cpc	r25, r1
    1f22:	19 f4       	brne	.+6      	; 0x1f2a <f_write+0xfc>
    1f24:	82 e0       	ldi	r24, 0x02	; 2
    1f26:	8d 83       	std	Y+5, r24	; 0x05
    1f28:	09 c1       	rjmp	.+530    	; 0x213c <f_write+0x30e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1f2a:	6f 3f       	cpi	r22, 0xFF	; 255
    1f2c:	ff ef       	ldi	r31, 0xFF	; 255
    1f2e:	7f 07       	cpc	r23, r31
    1f30:	8f 07       	cpc	r24, r31
    1f32:	9f 07       	cpc	r25, r31
    1f34:	19 f4       	brne	.+6      	; 0x1f3c <f_write+0x10e>
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	00 c1       	rjmp	.+512    	; 0x213c <f_write+0x30e>
				fp->clust = clst;			/* Update current cluster */
    1f3c:	6a 8b       	std	Y+18, r22	; 0x12
    1f3e:	7b 8b       	std	Y+19, r23	; 0x13
    1f40:	8c 8b       	std	Y+20, r24	; 0x14
    1f42:	9d 8b       	std	Y+21, r25	; 0x15
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    1f44:	4e 84       	ldd	r4, Y+14	; 0x0e
    1f46:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f48:	68 88       	ldd	r6, Y+16	; 0x10
    1f4a:	79 88       	ldd	r7, Y+17	; 0x11
    1f4c:	45 28       	or	r4, r5
    1f4e:	46 28       	or	r4, r6
    1f50:	47 28       	or	r4, r7
    1f52:	21 f4       	brne	.+8      	; 0x1f5c <f_write+0x12e>
    1f54:	6e 87       	std	Y+14, r22	; 0x0e
    1f56:	7f 87       	std	Y+15, r23	; 0x0f
    1f58:	88 8b       	std	Y+16, r24	; 0x10
    1f5a:	99 8b       	std	Y+17, r25	; 0x11
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    1f5c:	e8 81       	ld	r30, Y
    1f5e:	f9 81       	ldd	r31, Y+1	; 0x01
    1f60:	86 a5       	ldd	r24, Z+46	; 0x2e
    1f62:	97 a5       	ldd	r25, Z+47	; 0x2f
    1f64:	a0 a9       	ldd	r26, Z+48	; 0x30
    1f66:	b1 a9       	ldd	r27, Z+49	; 0x31
    1f68:	4e 89       	ldd	r20, Y+22	; 0x16
    1f6a:	5f 89       	ldd	r21, Y+23	; 0x17
    1f6c:	68 8d       	ldd	r22, Y+24	; 0x18
    1f6e:	79 8d       	ldd	r23, Y+25	; 0x19
    1f70:	84 17       	cp	r24, r20
    1f72:	95 07       	cpc	r25, r21
    1f74:	a6 07       	cpc	r26, r22
    1f76:	b7 07       	cpc	r27, r23
    1f78:	41 f4       	brne	.+16     	; 0x1f8a <f_write+0x15c>
    1f7a:	cf 01       	movw	r24, r30
    1f7c:	0e 94 1c 02 	call	0x438	; 0x438 <sync_window>
    1f80:	88 23       	and	r24, r24
    1f82:	19 f0       	breq	.+6      	; 0x1f8a <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	8d 83       	std	Y+5, r24	; 0x05
    1f88:	d9 c0       	rjmp	.+434    	; 0x213c <f_write+0x30e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    1f8a:	28 80       	ld	r2, Y
    1f8c:	39 80       	ldd	r3, Y+1	; 0x01
    1f8e:	4a 89       	ldd	r20, Y+18	; 0x12
    1f90:	5b 89       	ldd	r21, Y+19	; 0x13
    1f92:	6c 89       	ldd	r22, Y+20	; 0x14
    1f94:	7d 89       	ldd	r23, Y+21	; 0x15
    1f96:	c1 01       	movw	r24, r2
    1f98:	0e 94 48 06 	call	0xc90	; 0xc90 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1f9c:	61 15       	cp	r22, r1
    1f9e:	71 05       	cpc	r23, r1
    1fa0:	81 05       	cpc	r24, r1
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	19 f4       	brne	.+6      	; 0x1fac <f_write+0x17e>
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
    1fa8:	8d 83       	std	Y+5, r24	; 0x05
    1faa:	c8 c0       	rjmp	.+400    	; 0x213c <f_write+0x30e>
			sect += csect;
    1fac:	2b 01       	movw	r4, r22
    1fae:	3c 01       	movw	r6, r24
    1fb0:	41 0e       	add	r4, r17
    1fb2:	51 1c       	adc	r5, r1
    1fb4:	61 1c       	adc	r6, r1
    1fb6:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    1fb8:	47 01       	movw	r8, r14
    1fba:	89 2c       	mov	r8, r9
    1fbc:	99 24       	eor	r9, r9
    1fbe:	86 94       	lsr	r8
			if (cc) {						/* Write maximum contiguous sectors directly */
    1fc0:	81 14       	cp	r8, r1
    1fc2:	91 04       	cpc	r9, r1
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <f_write+0x19a>
    1fc6:	3e c0       	rjmp	.+124    	; 0x2044 <f_write+0x216>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1fc8:	f1 01       	movw	r30, r2
    1fca:	42 81       	ldd	r20, Z+2	; 0x02
    1fcc:	24 2f       	mov	r18, r20
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	c4 01       	movw	r24, r8
    1fd2:	81 0f       	add	r24, r17
    1fd4:	91 1d       	adc	r25, r1
    1fd6:	28 17       	cp	r18, r24
    1fd8:	39 07       	cpc	r19, r25
    1fda:	18 f4       	brcc	.+6      	; 0x1fe2 <f_write+0x1b4>
					cc = fp->fs->csize - csect;
    1fdc:	49 01       	movw	r8, r18
    1fde:	81 1a       	sub	r8, r17
    1fe0:	91 08       	sbc	r9, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    1fe2:	84 01       	movw	r16, r8
    1fe4:	a3 01       	movw	r20, r6
    1fe6:	92 01       	movw	r18, r4
    1fe8:	b5 01       	movw	r22, r10
    1fea:	f1 01       	movw	r30, r2
    1fec:	81 81       	ldd	r24, Z+1	; 0x01
    1fee:	01 d3       	rcall	.+1538   	; 0x25f2 <disk_write>
    1ff0:	88 23       	and	r24, r24
    1ff2:	19 f0       	breq	.+6      	; 0x1ffa <f_write+0x1cc>
					ABORT(fp->fs, FR_DISK_ERR);
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	8d 83       	std	Y+5, r24	; 0x05
    1ff8:	a1 c0       	rjmp	.+322    	; 0x213c <f_write+0x30e>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    1ffa:	e8 81       	ld	r30, Y
    1ffc:	f9 81       	ldd	r31, Y+1	; 0x01
    1ffe:	86 a5       	ldd	r24, Z+46	; 0x2e
    2000:	97 a5       	ldd	r25, Z+47	; 0x2f
    2002:	a0 a9       	ldd	r26, Z+48	; 0x30
    2004:	b1 a9       	ldd	r27, Z+49	; 0x31
    2006:	84 19       	sub	r24, r4
    2008:	95 09       	sbc	r25, r5
    200a:	a6 09       	sbc	r26, r6
    200c:	b7 09       	sbc	r27, r7
    200e:	a4 01       	movw	r20, r8
    2010:	60 e0       	ldi	r22, 0x00	; 0
    2012:	70 e0       	ldi	r23, 0x00	; 0
    2014:	84 17       	cp	r24, r20
    2016:	95 07       	cpc	r25, r21
    2018:	a6 07       	cpc	r26, r22
    201a:	b7 07       	cpc	r27, r23
    201c:	78 f4       	brcc	.+30     	; 0x203c <f_write+0x20e>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    201e:	98 2f       	mov	r25, r24
    2020:	88 27       	eor	r24, r24
    2022:	99 0f       	add	r25, r25
    2024:	b5 01       	movw	r22, r10
    2026:	68 0f       	add	r22, r24
    2028:	79 1f       	adc	r23, r25
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	52 e0       	ldi	r21, 0x02	; 2
    202e:	cf 01       	movw	r24, r30
    2030:	c2 96       	adiw	r24, 0x32	; 50
    2032:	0e 94 8e 01 	call	0x31c	; 0x31c <mem_cpy>
					fp->fs->wflag = 0;
    2036:	e8 81       	ld	r30, Y
    2038:	f9 81       	ldd	r31, Y+1	; 0x01
    203a:	14 82       	std	Z+4, r1	; 0x04
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    203c:	98 2c       	mov	r9, r8
    203e:	88 24       	eor	r8, r8
    2040:	99 0c       	add	r9, r9
				continue;
    2042:	4c c0       	rjmp	.+152    	; 0x20dc <f_write+0x2ae>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    2044:	4e 81       	ldd	r20, Y+6	; 0x06
    2046:	5f 81       	ldd	r21, Y+7	; 0x07
    2048:	68 85       	ldd	r22, Y+8	; 0x08
    204a:	79 85       	ldd	r23, Y+9	; 0x09
    204c:	8a 85       	ldd	r24, Y+10	; 0x0a
    204e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2050:	ac 85       	ldd	r26, Y+12	; 0x0c
    2052:	bd 85       	ldd	r27, Y+13	; 0x0d
    2054:	48 17       	cp	r20, r24
    2056:	59 07       	cpc	r21, r25
    2058:	6a 07       	cpc	r22, r26
    205a:	7b 07       	cpc	r23, r27
    205c:	70 f0       	brcs	.+28     	; 0x207a <f_write+0x24c>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    205e:	c1 01       	movw	r24, r2
    2060:	0e 94 1c 02 	call	0x438	; 0x438 <sync_window>
    2064:	88 23       	and	r24, r24
    2066:	19 f0       	breq	.+6      	; 0x206e <f_write+0x240>
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	8d 83       	std	Y+5, r24	; 0x05
    206c:	67 c0       	rjmp	.+206    	; 0x213c <f_write+0x30e>
				fp->fs->winsect = sect;
    206e:	e8 81       	ld	r30, Y
    2070:	f9 81       	ldd	r31, Y+1	; 0x01
    2072:	46 a6       	std	Z+46, r4	; 0x2e
    2074:	57 a6       	std	Z+47, r5	; 0x2f
    2076:	60 aa       	std	Z+48, r6	; 0x30
    2078:	71 aa       	std	Z+49, r7	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    207a:	4e 8a       	std	Y+22, r4	; 0x16
    207c:	5f 8a       	std	Y+23, r5	; 0x17
    207e:	68 8e       	std	Y+24, r6	; 0x18
    2080:	79 8e       	std	Y+25, r7	; 0x19
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2082:	8e 81       	ldd	r24, Y+6	; 0x06
    2084:	9f 81       	ldd	r25, Y+7	; 0x07
    2086:	91 70       	andi	r25, 0x01	; 1
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	32 e0       	ldi	r19, 0x02	; 2
    208c:	28 1b       	sub	r18, r24
    208e:	39 0b       	sbc	r19, r25
    2090:	47 01       	movw	r8, r14
    2092:	2e 15       	cp	r18, r14
    2094:	3f 05       	cpc	r19, r15
    2096:	08 f4       	brcc	.+2      	; 0x209a <f_write+0x26c>
    2098:	49 01       	movw	r8, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
    209a:	4e 89       	ldd	r20, Y+22	; 0x16
    209c:	5f 89       	ldd	r21, Y+23	; 0x17
    209e:	68 8d       	ldd	r22, Y+24	; 0x18
    20a0:	79 8d       	ldd	r23, Y+25	; 0x19
    20a2:	88 81       	ld	r24, Y
    20a4:	99 81       	ldd	r25, Y+1	; 0x01
    20a6:	0e 94 87 02 	call	0x50e	; 0x50e <move_window>
    20aa:	88 23       	and	r24, r24
    20ac:	19 f0       	breq	.+6      	; 0x20b4 <f_write+0x286>
			ABORT(fp->fs, FR_DISK_ERR);
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	8d 83       	std	Y+5, r24	; 0x05
    20b2:	44 c0       	rjmp	.+136    	; 0x213c <f_write+0x30e>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    20b4:	8e 81       	ldd	r24, Y+6	; 0x06
    20b6:	9f 81       	ldd	r25, Y+7	; 0x07
    20b8:	a8 85       	ldd	r26, Y+8	; 0x08
    20ba:	b9 85       	ldd	r27, Y+9	; 0x09
    20bc:	91 70       	andi	r25, 0x01	; 1
    20be:	aa 27       	eor	r26, r26
    20c0:	bb 27       	eor	r27, r27
    20c2:	c2 96       	adiw	r24, 0x32	; 50
    20c4:	28 81       	ld	r18, Y
    20c6:	39 81       	ldd	r19, Y+1	; 0x01
    20c8:	a4 01       	movw	r20, r8
    20ca:	b5 01       	movw	r22, r10
    20cc:	82 0f       	add	r24, r18
    20ce:	93 1f       	adc	r25, r19
    20d0:	0e 94 8e 01 	call	0x31c	; 0x31c <mem_cpy>
		fp->fs->wflag = 1;
    20d4:	e8 81       	ld	r30, Y
    20d6:	f9 81       	ldd	r31, Y+1	; 0x01
    20d8:	31 e0       	ldi	r19, 0x01	; 1
    20da:	34 83       	std	Z+4, r19	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    20dc:	a8 0c       	add	r10, r8
    20de:	b9 1c       	adc	r11, r9
    20e0:	8e 81       	ldd	r24, Y+6	; 0x06
    20e2:	9f 81       	ldd	r25, Y+7	; 0x07
    20e4:	a8 85       	ldd	r26, Y+8	; 0x08
    20e6:	b9 85       	ldd	r27, Y+9	; 0x09
    20e8:	88 0d       	add	r24, r8
    20ea:	99 1d       	adc	r25, r9
    20ec:	a1 1d       	adc	r26, r1
    20ee:	b1 1d       	adc	r27, r1
    20f0:	8e 83       	std	Y+6, r24	; 0x06
    20f2:	9f 83       	std	Y+7, r25	; 0x07
    20f4:	a8 87       	std	Y+8, r26	; 0x08
    20f6:	b9 87       	std	Y+9, r27	; 0x09
    20f8:	f6 01       	movw	r30, r12
    20fa:	80 81       	ld	r24, Z
    20fc:	91 81       	ldd	r25, Z+1	; 0x01
    20fe:	88 0d       	add	r24, r8
    2100:	99 1d       	adc	r25, r9
    2102:	80 83       	st	Z, r24
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	e8 18       	sub	r14, r8
    2108:	f9 08       	sbc	r15, r9
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    210a:	09 f0       	breq	.+2      	; 0x210e <f_write+0x2e0>
    210c:	c7 ce       	rjmp	.-626    	; 0x1e9c <f_write+0x6e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    210e:	8e 81       	ldd	r24, Y+6	; 0x06
    2110:	9f 81       	ldd	r25, Y+7	; 0x07
    2112:	a8 85       	ldd	r26, Y+8	; 0x08
    2114:	b9 85       	ldd	r27, Y+9	; 0x09
    2116:	4a 85       	ldd	r20, Y+10	; 0x0a
    2118:	5b 85       	ldd	r21, Y+11	; 0x0b
    211a:	6c 85       	ldd	r22, Y+12	; 0x0c
    211c:	7d 85       	ldd	r23, Y+13	; 0x0d
    211e:	48 17       	cp	r20, r24
    2120:	59 07       	cpc	r21, r25
    2122:	6a 07       	cpc	r22, r26
    2124:	7b 07       	cpc	r23, r27
    2126:	20 f4       	brcc	.+8      	; 0x2130 <f_write+0x302>
    2128:	8a 87       	std	Y+10, r24	; 0x0a
    212a:	9b 87       	std	Y+11, r25	; 0x0b
    212c:	ac 87       	std	Y+12, r26	; 0x0c
    212e:	bd 87       	std	Y+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	80 62       	ori	r24, 0x20	; 32
    2134:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	01 c0       	rjmp	.+2      	; 0x213c <f_write+0x30e>
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    213a:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    213c:	df 91       	pop	r29
    213e:	cf 91       	pop	r28
    2140:	1f 91       	pop	r17
    2142:	0f 91       	pop	r16
    2144:	ff 90       	pop	r15
    2146:	ef 90       	pop	r14
    2148:	df 90       	pop	r13
    214a:	cf 90       	pop	r12
    214c:	bf 90       	pop	r11
    214e:	af 90       	pop	r10
    2150:	9f 90       	pop	r9
    2152:	8f 90       	pop	r8
    2154:	7f 90       	pop	r7
    2156:	6f 90       	pop	r6
    2158:	5f 90       	pop	r5
    215a:	4f 90       	pop	r4
    215c:	3f 90       	pop	r3
    215e:	2f 90       	pop	r2
    2160:	08 95       	ret

00002162 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    2168:	0e 94 01 03 	call	0x602	; 0x602 <validate>
	if (res == FR_OK) {
    216c:	81 11       	cpse	r24, r1
    216e:	37 c0       	rjmp	.+110    	; 0x21de <f_sync+0x7c>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	95 ff       	sbrs	r25, 5
    2174:	34 c0       	rjmp	.+104    	; 0x21de <f_sync+0x7c>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2176:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2178:	5b 8d       	ldd	r21, Y+27	; 0x1b
    217a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    217c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    217e:	88 81       	ld	r24, Y
    2180:	99 81       	ldd	r25, Y+1	; 0x01
    2182:	0e 94 87 02 	call	0x50e	; 0x50e <move_window>
			if (res == FR_OK) {
    2186:	81 11       	cpse	r24, r1
    2188:	2a c0       	rjmp	.+84     	; 0x21de <f_sync+0x7c>
				dir = fp->dir_ptr;
    218a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    218c:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    218e:	83 85       	ldd	r24, Z+11	; 0x0b
    2190:	80 62       	ori	r24, 0x20	; 32
    2192:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    2194:	4a 85       	ldd	r20, Y+10	; 0x0a
    2196:	5b 85       	ldd	r21, Y+11	; 0x0b
    2198:	6c 85       	ldd	r22, Y+12	; 0x0c
    219a:	7d 85       	ldd	r23, Y+13	; 0x0d
    219c:	44 8f       	std	Z+28, r20	; 0x1c
    219e:	55 8f       	std	Z+29, r21	; 0x1d
    21a0:	66 8f       	std	Z+30, r22	; 0x1e
    21a2:	77 8f       	std	Z+31, r23	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    21a4:	4e 85       	ldd	r20, Y+14	; 0x0e
    21a6:	5f 85       	ldd	r21, Y+15	; 0x0f
    21a8:	68 89       	ldd	r22, Y+16	; 0x10
    21aa:	79 89       	ldd	r23, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
    21ac:	42 8f       	std	Z+26, r20	; 0x1a
    21ae:	53 8f       	std	Z+27, r21	; 0x1b
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
    21b0:	64 8b       	std	Z+20, r22	; 0x14
    21b2:	75 8b       	std	Z+21, r23	; 0x15
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update updated time */
				ST_DWORD(dir+DIR_WrtTime, tm);
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	6f e4       	ldi	r22, 0x4F	; 79
    21ba:	75 e4       	ldi	r23, 0x45	; 69
    21bc:	46 8b       	std	Z+22, r20	; 0x16
    21be:	57 8b       	std	Z+23, r21	; 0x17
    21c0:	60 8f       	std	Z+24, r22	; 0x18
    21c2:	71 8f       	std	Z+25, r23	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    21c4:	12 8a       	std	Z+18, r1	; 0x12
    21c6:	13 8a       	std	Z+19, r1	; 0x13
				fp->flag &= ~FA__WRITTEN;
    21c8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ca:	8f 7d       	andi	r24, 0xDF	; 223
    21cc:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    21ce:	e8 81       	ld	r30, Y
    21d0:	f9 81       	ldd	r31, Y+1	; 0x01
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    21d6:	88 81       	ld	r24, Y
    21d8:	99 81       	ldd	r25, Y+1	; 0x01
    21da:	0e 94 da 05 	call	0xbb4	; 0xbb4 <sync_fs>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	08 95       	ret

000021e4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    21ea:	bb df       	rcall	.-138    	; 0x2162 <f_sync>
	if (res == FR_OK)
    21ec:	81 11       	cpse	r24, r1
    21ee:	07 c0       	rjmp	.+14     	; 0x21fe <f_close+0x1a>
#endif
	{
		res = validate(fp);				/* Lock volume */
    21f0:	ce 01       	movw	r24, r28
    21f2:	0e 94 01 03 	call	0x602	; 0x602 <validate>
		if (res == FR_OK) {
    21f6:	81 11       	cpse	r24, r1
    21f8:	02 c0       	rjmp	.+4      	; 0x21fe <f_close+0x1a>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    21fa:	18 82       	st	Y, r1
    21fc:	19 82       	std	Y+1, r1	; 0x01
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	08 95       	ret

00002204 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	return spi_wr_rd(dat);
    2204:	8c c6       	rjmp	.+3352   	; 0x2f1e <spi_wr_rd>
}
    2206:	08 95       	ret

00002208 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
    2208:	80 e1       	ldi	r24, 0x10	; 16
    220a:	e0 e4       	ldi	r30, 0x40	; 64
    220c:	f6 e0       	ldi	r31, 0x06	; 6
    220e:	85 83       	std	Z+5, r24	; 0x05
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    2210:	8f ef       	ldi	r24, 0xFF	; 255
    2212:	f8 cf       	rjmp	.-16     	; 0x2204 <xchg_spi>
    2214:	08 95       	ret

00002216 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
    2216:	80 e1       	ldi	r24, 0x10	; 16
    2218:	e0 e4       	ldi	r30, 0x40	; 64
    221a:	f6 e0       	ldi	r31, 0x06	; 6
    221c:	86 83       	std	Z+6, r24	; 0x06
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    221e:	8f ef       	ldi	r24, 0xFF	; 255
    2220:	f1 df       	rcall	.-30     	; 0x2204 <xchg_spi>
	UINT wt			/* Timeout [ms] */
)
{
	BYTE d;

	Timer2 = wt / 10;
    2222:	82 e3       	ldi	r24, 0x32	; 50
    2224:	80 93 aa 21 	sts	0x21AA, r24
	do
		d = xchg_spi(0xFF);
    2228:	8f ef       	ldi	r24, 0xFF	; 255
    222a:	ec df       	rcall	.-40     	; 0x2204 <xchg_spi>
	while (d != 0xFF && Timer2);
    222c:	8f 3f       	cpi	r24, 0xFF	; 255
    222e:	41 f0       	breq	.+16     	; 0x2240 <select+0x2a>
    2230:	80 91 aa 21 	lds	r24, 0x21AA
    2234:	81 11       	cpse	r24, r1
    2236:	f8 cf       	rjmp	.-16     	; 0x2228 <select+0x12>
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* OK */
	deselect();
    2238:	e7 df       	rcall	.-50     	; 0x2208 <deselect>
	return 0;	/* Timeout */
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */

	if (wait_ready(500)) return 1;	/* OK */
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
	deselect();
	return 0;	/* Timeout */
}
    2244:	08 95       	ret

00002246 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    2246:	ff 92       	push	r15
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	c8 2f       	mov	r28, r24
    2252:	d4 2f       	mov	r29, r20
    2254:	15 2f       	mov	r17, r21
    2256:	06 2f       	mov	r16, r22
    2258:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    225a:	88 23       	and	r24, r24
    225c:	4c f4       	brge	.+18     	; 0x2270 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	ba 01       	movw	r22, r20
    2264:	87 e3       	ldi	r24, 0x37	; 55
    2266:	ef df       	rcall	.-34     	; 0x2246 <send_cmd>
		if (res > 1) return res;
    2268:	82 30       	cpi	r24, 0x02	; 2
    226a:	08 f0       	brcs	.+2      	; 0x226e <send_cmd+0x28>
    226c:	37 c0       	rjmp	.+110    	; 0x22dc <send_cmd+0x96>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    226e:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    2270:	cc 30       	cpi	r28, 0x0C	; 12
    2272:	19 f1       	breq	.+70     	; 0x22ba <send_cmd+0x74>
		deselect();
    2274:	c9 df       	rcall	.-110    	; 0x2208 <deselect>
		if (!select()) return 0xFF;
    2276:	cf df       	rcall	.-98     	; 0x2216 <select>
    2278:	89 2b       	or	r24, r25
    227a:	e9 f0       	breq	.+58     	; 0x22b6 <send_cmd+0x70>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    227c:	8c 2f       	mov	r24, r28
    227e:	80 64       	ori	r24, 0x40	; 64
    2280:	c1 df       	rcall	.-126    	; 0x2204 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    2282:	8f 2d       	mov	r24, r15
    2284:	bf df       	rcall	.-130    	; 0x2204 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    2286:	80 2f       	mov	r24, r16
    2288:	bd df       	rcall	.-134    	; 0x2204 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    228a:	81 2f       	mov	r24, r17
    228c:	bb df       	rcall	.-138    	; 0x2204 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    228e:	8d 2f       	mov	r24, r29
    2290:	b9 df       	rcall	.-142    	; 0x2204 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    2292:	cc 23       	and	r28, r28
    2294:	01 f1       	breq	.+64     	; 0x22d6 <send_cmd+0x90>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    2296:	c8 30       	cpi	r28, 0x08	; 8
    2298:	d9 f0       	breq	.+54     	; 0x22d0 <send_cmd+0x8a>
	xchg_spi(n);
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	b3 df       	rcall	.-154    	; 0x2204 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    229e:	cc 30       	cpi	r28, 0x0C	; 12
    22a0:	11 f4       	brne	.+4      	; 0x22a6 <send_cmd+0x60>
    22a2:	8f ef       	ldi	r24, 0xFF	; 255
    22a4:	af df       	rcall	.-162    	; 0x2204 <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    22a6:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    22a8:	8f ef       	ldi	r24, 0xFF	; 255
    22aa:	ac df       	rcall	.-168    	; 0x2204 <xchg_spi>
	while ((res & 0x80) && --n);
    22ac:	88 23       	and	r24, r24
    22ae:	b4 f4       	brge	.+44     	; 0x22dc <send_cmd+0x96>
    22b0:	c1 50       	subi	r28, 0x01	; 1
    22b2:	d1 f7       	brne	.-12     	; 0x22a8 <send_cmd+0x62>
    22b4:	13 c0       	rjmp	.+38     	; 0x22dc <send_cmd+0x96>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    22b6:	8f ef       	ldi	r24, 0xFF	; 255
    22b8:	11 c0       	rjmp	.+34     	; 0x22dc <send_cmd+0x96>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    22ba:	8c e4       	ldi	r24, 0x4C	; 76
    22bc:	a3 df       	rcall	.-186    	; 0x2204 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    22be:	8f 2d       	mov	r24, r15
    22c0:	a1 df       	rcall	.-190    	; 0x2204 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    22c2:	80 2f       	mov	r24, r16
    22c4:	9f df       	rcall	.-194    	; 0x2204 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    22c6:	81 2f       	mov	r24, r17
    22c8:	9d df       	rcall	.-198    	; 0x2204 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    22ca:	8d 2f       	mov	r24, r29
    22cc:	9b df       	rcall	.-202    	; 0x2204 <xchg_spi>
    22ce:	e5 cf       	rjmp	.-54     	; 0x229a <send_cmd+0x54>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    22d0:	87 e8       	ldi	r24, 0x87	; 135
    22d2:	98 df       	rcall	.-208    	; 0x2204 <xchg_spi>
    22d4:	e8 cf       	rjmp	.-48     	; 0x22a6 <send_cmd+0x60>
    22d6:	85 e9       	ldi	r24, 0x95	; 149
    22d8:	95 df       	rcall	.-214    	; 0x2204 <xchg_spi>
    22da:	e5 cf       	rjmp	.-54     	; 0x22a6 <send_cmd+0x60>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	1f 91       	pop	r17
    22e2:	0f 91       	pop	r16
    22e4:	ff 90       	pop	r15
    22e6:	08 95       	ret

000022e8 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    22e8:	ef 92       	push	r14
    22ea:	ff 92       	push	r15
    22ec:	0f 93       	push	r16
    22ee:	1f 93       	push	r17
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	e8 2e       	mov	r14, r24
    22f6:	f9 2e       	mov	r15, r25
    22f8:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
    22fa:	24 e1       	ldi	r18, 0x14	; 20
    22fc:	20 93 ab 21 	sts	0x21AB, r18
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    2300:	8f ef       	ldi	r24, 0xFF	; 255
    2302:	80 df       	rcall	.-256    	; 0x2204 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    2304:	8f 3f       	cpi	r24, 0xFF	; 255
    2306:	29 f4       	brne	.+10     	; 0x2312 <rcvr_datablock+0x2a>
    2308:	20 91 ab 21 	lds	r18, 0x21AB
    230c:	21 11       	cpse	r18, r1
    230e:	f8 cf       	rjmp	.-16     	; 0x2300 <rcvr_datablock+0x18>
    2310:	17 c0       	rjmp	.+46     	; 0x2340 <rcvr_datablock+0x58>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    2312:	8e 3f       	cpi	r24, 0xFE	; 254
    2314:	c1 f4       	brne	.+48     	; 0x2346 <rcvr_datablock+0x5e>
    2316:	ce 2d       	mov	r28, r14
    2318:	df 2d       	mov	r29, r15
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		*p++ = spi_wr_rd(0xff);
    231a:	8f ef       	ldi	r24, 0xFF	; 255
    231c:	00 d6       	rcall	.+3072   	; 0x2f1e <spi_wr_rd>
    231e:	88 83       	st	Y, r24
		*p++ = spi_wr_rd(0xff);
    2320:	8f ef       	ldi	r24, 0xFF	; 255
    2322:	fd d5       	rcall	.+3066   	; 0x2f1e <spi_wr_rd>
    2324:	89 83       	std	Y+1, r24	; 0x01
		
	} while (cnt -= 2);
    2326:	02 50       	subi	r16, 0x02	; 2
    2328:	11 09       	sbc	r17, r1
    232a:	22 96       	adiw	r28, 0x02	; 2
    232c:	01 15       	cp	r16, r1
    232e:	11 05       	cpc	r17, r1
    2330:	a1 f7       	brne	.-24     	; 0x231a <rcvr_datablock+0x32>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    2332:	8f ef       	ldi	r24, 0xFF	; 255
    2334:	67 df       	rcall	.-306    	; 0x2204 <xchg_spi>
	xchg_spi(0xFF);
    2336:	8f ef       	ldi	r24, 0xFF	; 255
    2338:	65 df       	rcall	.-310    	; 0x2204 <xchg_spi>

	return 1;						/* Return with success */
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	05 c0       	rjmp	.+10     	; 0x234a <rcvr_datablock+0x62>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	02 c0       	rjmp	.+4      	; 0x234a <rcvr_datablock+0x62>
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	ff 90       	pop	r15
    2354:	ef 90       	pop	r14
    2356:	08 95       	ret

00002358 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    2358:	0f 93       	push	r16
    235a:	1f 93       	push	r17
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	8c 01       	movw	r16, r24
    2362:	c6 2f       	mov	r28, r22
	UINT wt			/* Timeout [ms] */
)
{
	BYTE d;

	Timer2 = wt / 10;
    2364:	92 e3       	ldi	r25, 0x32	; 50
    2366:	90 93 aa 21 	sts	0x21AA, r25
	do
		d = xchg_spi(0xFF);
    236a:	8f ef       	ldi	r24, 0xFF	; 255
    236c:	4b df       	rcall	.-362    	; 0x2204 <xchg_spi>
	while (d != 0xFF && Timer2);
    236e:	8f 3f       	cpi	r24, 0xFF	; 255
    2370:	29 f0       	breq	.+10     	; 0x237c <xmit_datablock+0x24>
    2372:	90 91 aa 21 	lds	r25, 0x21AA
    2376:	91 11       	cpse	r25, r1
    2378:	f8 cf       	rjmp	.-16     	; 0x236a <xmit_datablock+0x12>
    237a:	1c c0       	rjmp	.+56     	; 0x23b4 <xmit_datablock+0x5c>
	BYTE resp;


	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
    237c:	8c 2f       	mov	r24, r28
    237e:	42 df       	rcall	.-380    	; 0x2204 <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
    2380:	cd 3f       	cpi	r28, 0xFD	; 253
    2382:	d9 f0       	breq	.+54     	; 0x23ba <xmit_datablock+0x62>
    2384:	e8 01       	movw	r28, r16
    2386:	1e 5f       	subi	r17, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		spi_wr_rd(*p++);
    2388:	88 81       	ld	r24, Y
    238a:	c9 d5       	rcall	.+2962   	; 0x2f1e <spi_wr_rd>
		spi_wr_rd(*p++);
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	c7 d5       	rcall	.+2958   	; 0x2f1e <spi_wr_rd>
    2390:	22 96       	adiw	r28, 0x02	; 2
		
	} while (cnt -= 2);
    2392:	c0 17       	cp	r28, r16
    2394:	d1 07       	cpc	r29, r17
    2396:	c1 f7       	brne	.-16     	; 0x2388 <xmit_datablock+0x30>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    2398:	8f ef       	ldi	r24, 0xFF	; 255
    239a:	34 df       	rcall	.-408    	; 0x2204 <xchg_spi>
		xchg_spi(0xFF);
    239c:	8f ef       	ldi	r24, 0xFF	; 255
    239e:	32 df       	rcall	.-412    	; 0x2204 <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    23a0:	8f ef       	ldi	r24, 0xFF	; 255
    23a2:	30 df       	rcall	.-416    	; 0x2204 <xchg_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    23a4:	28 2f       	mov	r18, r24
    23a6:	2f 71       	andi	r18, 0x1F	; 31
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	25 30       	cpi	r18, 0x05	; 5
    23ae:	39 f0       	breq	.+14     	; 0x23be <xmit_datablock+0x66>
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	05 c0       	rjmp	.+10     	; 0x23be <xmit_datablock+0x66>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <xmit_datablock+0x66>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
}
    23be:	df 91       	pop	r29
    23c0:	cf 91       	pop	r28
    23c2:	1f 91       	pop	r17
    23c4:	0f 91       	pop	r16
    23c6:	08 95       	ret

000023c8 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    23c8:	ef 92       	push	r14
    23ca:	ff 92       	push	r15
    23cc:	0f 93       	push	r16
    23ce:	1f 93       	push	r17
    23d0:	cf 93       	push	r28
    23d2:	df 93       	push	r29
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <disk_initialize+0xe>
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <disk_initialize+0x10>
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    23dc:	81 11       	cpse	r24, r1
    23de:	99 c0       	rjmp	.+306    	; 0x2512 <disk_initialize+0x14a>

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    23e0:	8f d5       	rcall	.+2846   	; 0x2f00 <spi_off>
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    23e2:	80 91 04 20 	lds	r24, 0x2004
    23e6:	81 ff       	sbrs	r24, 1
    23e8:	03 c0       	rjmp	.+6      	; 0x23f0 <disk_initialize+0x28>
    23ea:	80 91 04 20 	lds	r24, 0x2004
    23ee:	9c c0       	rjmp	.+312    	; 0x2528 <disk_initialize+0x160>
	//Used to check for a timeout, not needed
	//TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
	//TCC1.PER = F_CPU/DIVIDER;
	//TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
	
	spi_on();
    23f0:	7d d5       	rcall	.+2810   	; 0x2eec <spi_on>

	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
	power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    23f2:	82 ed       	ldi	r24, 0xD2	; 210
    23f4:	80 93 c0 08 	sts	0x08C0, r24
    23f8:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    23fa:	8f ef       	ldi	r24, 0xFF	; 255
    23fc:	03 df       	rcall	.-506    	; 0x2204 <xchg_spi>
    23fe:	11 50       	subi	r17, 0x01	; 1
    2400:	e1 f7       	brne	.-8      	; 0x23fa <disk_initialize+0x32>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	50 e0       	ldi	r21, 0x00	; 0
    2406:	ba 01       	movw	r22, r20
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	1d df       	rcall	.-454    	; 0x2246 <send_cmd>
    240c:	81 30       	cpi	r24, 0x01	; 1
    240e:	09 f0       	breq	.+2      	; 0x2412 <disk_initialize+0x4a>
    2410:	87 c0       	rjmp	.+270    	; 0x2520 <disk_initialize+0x158>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    2412:	84 e6       	ldi	r24, 0x64	; 100
    2414:	80 93 ab 21 	sts	0x21AB, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    2418:	4a ea       	ldi	r20, 0xAA	; 170
    241a:	51 e0       	ldi	r21, 0x01	; 1
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	88 e0       	ldi	r24, 0x08	; 8
    2422:	11 df       	rcall	.-478    	; 0x2246 <send_cmd>
    2424:	81 30       	cpi	r24, 0x01	; 1
    2426:	09 f0       	breq	.+2      	; 0x242a <disk_initialize+0x62>
    2428:	3f c0       	rjmp	.+126    	; 0x24a8 <disk_initialize+0xe0>
    242a:	7e 01       	movw	r14, r28
    242c:	85 e0       	ldi	r24, 0x05	; 5
    242e:	e8 0e       	add	r14, r24
    2430:	f1 1c       	adc	r15, r1
    2432:	8e 01       	movw	r16, r28
    2434:	0f 5f       	subi	r16, 0xFF	; 255
    2436:	1f 4f       	sbci	r17, 0xFF	; 255
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    2438:	8f ef       	ldi	r24, 0xFF	; 255
    243a:	e4 de       	rcall	.-568    	; 0x2204 <xchg_spi>
    243c:	f8 01       	movw	r30, r16
    243e:	81 93       	st	Z+, r24
    2440:	8f 01       	movw	r16, r30
    2442:	ee 15       	cp	r30, r14
    2444:	ff 05       	cpc	r31, r15
    2446:	c1 f7       	brne	.-16     	; 0x2438 <disk_initialize+0x70>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	81 30       	cpi	r24, 0x01	; 1
    244c:	09 f0       	breq	.+2      	; 0x2450 <disk_initialize+0x88>
    244e:	68 c0       	rjmp	.+208    	; 0x2520 <disk_initialize+0x158>
    2450:	8c 81       	ldd	r24, Y+4	; 0x04
    2452:	8a 3a       	cpi	r24, 0xAA	; 170
    2454:	09 f0       	breq	.+2      	; 0x2458 <disk_initialize+0x90>
    2456:	64 c0       	rjmp	.+200    	; 0x2520 <disk_initialize+0x158>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    2458:	80 91 ab 21 	lds	r24, 0x21AB
    245c:	88 23       	and	r24, r24
    245e:	41 f0       	breq	.+16     	; 0x2470 <disk_initialize+0xa8>
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	50 e0       	ldi	r21, 0x00	; 0
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	70 e4       	ldi	r23, 0x40	; 64
    2468:	89 ea       	ldi	r24, 0xA9	; 169
    246a:	ed de       	rcall	.-550    	; 0x2246 <send_cmd>
    246c:	81 11       	cpse	r24, r1
    246e:	f4 cf       	rjmp	.-24     	; 0x2458 <disk_initialize+0x90>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    2470:	80 91 ab 21 	lds	r24, 0x21AB
    2474:	88 23       	and	r24, r24
    2476:	09 f4       	brne	.+2      	; 0x247a <disk_initialize+0xb2>
    2478:	53 c0       	rjmp	.+166    	; 0x2520 <disk_initialize+0x158>
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	ba 01       	movw	r22, r20
    2480:	8a e3       	ldi	r24, 0x3A	; 58
    2482:	e1 de       	rcall	.-574    	; 0x2246 <send_cmd>
    2484:	81 11       	cpse	r24, r1
    2486:	4c c0       	rjmp	.+152    	; 0x2520 <disk_initialize+0x158>
    2488:	8e 01       	movw	r16, r28
    248a:	0f 5f       	subi	r16, 0xFF	; 255
    248c:	1f 4f       	sbci	r17, 0xFF	; 255
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    248e:	8f ef       	ldi	r24, 0xFF	; 255
    2490:	b9 de       	rcall	.-654    	; 0x2204 <xchg_spi>
    2492:	f8 01       	movw	r30, r16
    2494:	81 93       	st	Z+, r24
    2496:	8f 01       	movw	r16, r30
    2498:	ee 16       	cp	r14, r30
    249a:	ff 06       	cpc	r15, r31
    249c:	c1 f7       	brne	.-16     	; 0x248e <disk_initialize+0xc6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	86 fd       	sbrc	r24, 6
    24a2:	39 c0       	rjmp	.+114    	; 0x2516 <disk_initialize+0x14e>
    24a4:	84 e0       	ldi	r24, 0x04	; 4
    24a6:	38 c0       	rjmp	.+112    	; 0x2518 <disk_initialize+0x150>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    24a8:	40 e0       	ldi	r20, 0x00	; 0
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	ba 01       	movw	r22, r20
    24ae:	89 ea       	ldi	r24, 0xA9	; 169
    24b0:	ca de       	rcall	.-620    	; 0x2246 <send_cmd>
    24b2:	82 30       	cpi	r24, 0x02	; 2
    24b4:	18 f4       	brcc	.+6      	; 0x24bc <disk_initialize+0xf4>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    24b6:	02 e0       	ldi	r16, 0x02	; 2
    24b8:	19 ea       	ldi	r17, 0xA9	; 169
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <disk_initialize+0xf8>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    24bc:	01 e0       	ldi	r16, 0x01	; 1
    24be:	11 e0       	ldi	r17, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    24c0:	90 91 ab 21 	lds	r25, 0x21AB
    24c4:	99 23       	and	r25, r25
    24c6:	39 f0       	breq	.+14     	; 0x24d6 <disk_initialize+0x10e>
    24c8:	40 e0       	ldi	r20, 0x00	; 0
    24ca:	50 e0       	ldi	r21, 0x00	; 0
    24cc:	ba 01       	movw	r22, r20
    24ce:	81 2f       	mov	r24, r17
    24d0:	ba de       	rcall	.-652    	; 0x2246 <send_cmd>
    24d2:	81 11       	cpse	r24, r1
    24d4:	f5 cf       	rjmp	.-22     	; 0x24c0 <disk_initialize+0xf8>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    24d6:	80 91 ab 21 	lds	r24, 0x21AB
    24da:	88 23       	and	r24, r24
    24dc:	09 f1       	breq	.+66     	; 0x2520 <disk_initialize+0x158>
    24de:	40 e0       	ldi	r20, 0x00	; 0
    24e0:	52 e0       	ldi	r21, 0x02	; 2
    24e2:	60 e0       	ldi	r22, 0x00	; 0
    24e4:	70 e0       	ldi	r23, 0x00	; 0
    24e6:	80 e1       	ldi	r24, 0x10	; 16
    24e8:	ae de       	rcall	.-676    	; 0x2246 <send_cmd>
    24ea:	81 11       	cpse	r24, r1
    24ec:	19 c0       	rjmp	.+50     	; 0x2520 <disk_initialize+0x158>
				ty = 0;
		}
	}
	CardType = ty;
    24ee:	00 93 a9 21 	sts	0x21A9, r16
	deselect();
    24f2:	8a de       	rcall	.-748    	; 0x2208 <deselect>

	if (ty) {			/* Initialization succeded */
    24f4:	00 23       	and	r16, r16
    24f6:	49 f0       	breq	.+18     	; 0x250a <disk_initialize+0x142>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    24f8:	80 91 04 20 	lds	r24, 0x2004
    24fc:	8e 7f       	andi	r24, 0xFE	; 254
    24fe:	80 93 04 20 	sts	0x2004, r24
		FCLK_FAST();
    2502:	80 ed       	ldi	r24, 0xD0	; 208
    2504:	80 93 c0 08 	sts	0x08C0, r24
    2508:	01 c0       	rjmp	.+2      	; 0x250c <disk_initialize+0x144>

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    250a:	fa d4       	rcall	.+2548   	; 0x2f00 <spi_off>
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    250c:	80 91 04 20 	lds	r24, 0x2004
    2510:	0b c0       	rjmp	.+22     	; 0x2528 <disk_initialize+0x160>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	09 c0       	rjmp	.+18     	; 0x2528 <disk_initialize+0x160>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    2516:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    2518:	80 93 a9 21 	sts	0x21A9, r24
	deselect();
    251c:	75 de       	rcall	.-790    	; 0x2208 <deselect>
    251e:	ec cf       	rjmp	.-40     	; 0x24f8 <disk_initialize+0x130>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    2520:	10 92 a9 21 	sts	0x21A9, r1
	deselect();
    2524:	71 de       	rcall	.-798    	; 0x2208 <deselect>
    2526:	f1 cf       	rjmp	.-30     	; 0x250a <disk_initialize+0x142>
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
    2528:	24 96       	adiw	r28, 0x04	; 4
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	1f 91       	pop	r17
    2534:	0f 91       	pop	r16
    2536:	ff 90       	pop	r15
    2538:	ef 90       	pop	r14
    253a:	08 95       	ret

0000253c <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    253c:	81 11       	cpse	r24, r1
    253e:	03 c0       	rjmp	.+6      	; 0x2546 <disk_status+0xa>
	return Stat;
    2540:	80 91 04 20 	lds	r24, 0x2004
    2544:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    2546:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    2548:	08 95       	ret

0000254a <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    254a:	ff 92       	push	r15
    254c:	0f 93       	push	r16
    254e:	1f 93       	push	r17
    2550:	cf 93       	push	r28
    2552:	df 93       	push	r29
    2554:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    2556:	81 11       	cpse	r24, r1
    2558:	41 c0       	rjmp	.+130    	; 0x25dc <disk_read+0x92>
    255a:	01 15       	cp	r16, r1
    255c:	11 05       	cpc	r17, r1
    255e:	09 f4       	brne	.+2      	; 0x2562 <disk_read+0x18>
    2560:	3f c0       	rjmp	.+126    	; 0x25e0 <disk_read+0x96>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2562:	80 91 04 20 	lds	r24, 0x2004
    2566:	80 fd       	sbrc	r24, 0
    2568:	3d c0       	rjmp	.+122    	; 0x25e4 <disk_read+0x9a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    256a:	80 91 a9 21 	lds	r24, 0x21A9
    256e:	83 fd       	sbrc	r24, 3
    2570:	09 c0       	rjmp	.+18     	; 0x2584 <disk_read+0x3a>
    2572:	01 2e       	mov	r0, r17
    2574:	19 e0       	ldi	r17, 0x09	; 9
    2576:	22 0f       	add	r18, r18
    2578:	33 1f       	adc	r19, r19
    257a:	44 1f       	adc	r20, r20
    257c:	55 1f       	adc	r21, r21
    257e:	1a 95       	dec	r17
    2580:	d1 f7       	brne	.-12     	; 0x2576 <disk_read+0x2c>
    2582:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    2584:	02 30       	cpi	r16, 0x02	; 2
    2586:	11 05       	cpc	r17, r1
    2588:	28 f0       	brcs	.+10     	; 0x2594 <disk_read+0x4a>
    258a:	0f 2e       	mov	r0, r31
    258c:	f2 e1       	ldi	r31, 0x12	; 18
    258e:	ff 2e       	mov	r15, r31
    2590:	f0 2d       	mov	r31, r0
    2592:	04 c0       	rjmp	.+8      	; 0x259c <disk_read+0x52>
    2594:	0f 2e       	mov	r0, r31
    2596:	f1 e1       	ldi	r31, 0x11	; 17
    2598:	ff 2e       	mov	r15, r31
    259a:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    259c:	ba 01       	movw	r22, r20
    259e:	a9 01       	movw	r20, r18
    25a0:	8f 2d       	mov	r24, r15
    25a2:	51 de       	rcall	.-862    	; 0x2246 <send_cmd>
    25a4:	81 11       	cpse	r24, r1
    25a6:	14 c0       	rjmp	.+40     	; 0x25d0 <disk_read+0x86>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	72 e0       	ldi	r23, 0x02	; 2
    25ac:	ce 01       	movw	r24, r28
    25ae:	9c de       	rcall	.-712    	; 0x22e8 <rcvr_datablock>
    25b0:	89 2b       	or	r24, r25
    25b2:	31 f0       	breq	.+12     	; 0x25c0 <disk_read+0x76>
			buff += 512;
    25b4:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    25b6:	01 50       	subi	r16, 0x01	; 1
    25b8:	11 09       	sbc	r17, r1
    25ba:	01 15       	cp	r16, r1
    25bc:	11 05       	cpc	r17, r1
    25be:	a1 f7       	brne	.-24     	; 0x25a8 <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    25c0:	82 e1       	ldi	r24, 0x12	; 18
    25c2:	f8 12       	cpse	r15, r24
    25c4:	05 c0       	rjmp	.+10     	; 0x25d0 <disk_read+0x86>
    25c6:	40 e0       	ldi	r20, 0x00	; 0
    25c8:	50 e0       	ldi	r21, 0x00	; 0
    25ca:	ba 01       	movw	r22, r20
    25cc:	8c e0       	ldi	r24, 0x0C	; 12
    25ce:	3b de       	rcall	.-906    	; 0x2246 <send_cmd>
	}
	deselect();
    25d0:	1b de       	rcall	.-970    	; 0x2208 <deselect>

	return count ? RES_ERROR : RES_OK;
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	01 2b       	or	r16, r17
    25d6:	39 f4       	brne	.+14     	; 0x25e6 <disk_read+0x9c>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	05 c0       	rjmp	.+10     	; 0x25e6 <disk_read+0x9c>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    25dc:	84 e0       	ldi	r24, 0x04	; 4
    25de:	03 c0       	rjmp	.+6      	; 0x25e6 <disk_read+0x9c>
    25e0:	84 e0       	ldi	r24, 0x04	; 4
    25e2:	01 c0       	rjmp	.+2      	; 0x25e6 <disk_read+0x9c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    25e4:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	ff 90       	pop	r15
    25f0:	08 95       	ret

000025f2 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    25f2:	cf 92       	push	r12
    25f4:	df 92       	push	r13
    25f6:	ef 92       	push	r14
    25f8:	ff 92       	push	r15
    25fa:	0f 93       	push	r16
    25fc:	1f 93       	push	r17
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	eb 01       	movw	r28, r22
    2604:	69 01       	movw	r12, r18
    2606:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    2608:	81 11       	cpse	r24, r1
    260a:	53 c0       	rjmp	.+166    	; 0x26b2 <disk_write+0xc0>
    260c:	01 15       	cp	r16, r1
    260e:	11 05       	cpc	r17, r1
    2610:	09 f4       	brne	.+2      	; 0x2614 <disk_write+0x22>
    2612:	51 c0       	rjmp	.+162    	; 0x26b6 <disk_write+0xc4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    2614:	80 91 04 20 	lds	r24, 0x2004
    2618:	80 fd       	sbrc	r24, 0
    261a:	4f c0       	rjmp	.+158    	; 0x26ba <disk_write+0xc8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    261c:	80 91 04 20 	lds	r24, 0x2004
    2620:	82 fd       	sbrc	r24, 2
    2622:	4d c0       	rjmp	.+154    	; 0x26be <disk_write+0xcc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    2624:	80 91 a9 21 	lds	r24, 0x21A9
    2628:	83 fd       	sbrc	r24, 3
    262a:	09 c0       	rjmp	.+18     	; 0x263e <disk_write+0x4c>
    262c:	0b 2e       	mov	r0, r27
    262e:	b9 e0       	ldi	r27, 0x09	; 9
    2630:	cc 0c       	add	r12, r12
    2632:	dd 1c       	adc	r13, r13
    2634:	ee 1c       	adc	r14, r14
    2636:	ff 1c       	adc	r15, r15
    2638:	ba 95       	dec	r27
    263a:	d1 f7       	brne	.-12     	; 0x2630 <disk_write+0x3e>
    263c:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    263e:	01 30       	cpi	r16, 0x01	; 1
    2640:	11 05       	cpc	r17, r1
    2642:	89 f4       	brne	.+34     	; 0x2666 <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    2644:	b7 01       	movw	r22, r14
    2646:	a6 01       	movw	r20, r12
    2648:	88 e1       	ldi	r24, 0x18	; 24
    264a:	fd dd       	rcall	.-1030   	; 0x2246 <send_cmd>
    264c:	81 11       	cpse	r24, r1
    264e:	2b c0       	rjmp	.+86     	; 0x26a6 <disk_write+0xb4>
			&& xmit_datablock(buff, 0xFE))
    2650:	6e ef       	ldi	r22, 0xFE	; 254
    2652:	ce 01       	movw	r24, r28
    2654:	81 de       	rcall	.-766    	; 0x2358 <xmit_datablock>
    2656:	31 e0       	ldi	r19, 0x01	; 1
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	89 2b       	or	r24, r25
    265c:	09 f0       	breq	.+2      	; 0x2660 <disk_write+0x6e>
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	03 2f       	mov	r16, r19
    2662:	12 2f       	mov	r17, r18
    2664:	20 c0       	rjmp	.+64     	; 0x26a6 <disk_write+0xb4>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    2666:	86 70       	andi	r24, 0x06	; 6
    2668:	29 f0       	breq	.+10     	; 0x2674 <disk_write+0x82>
    266a:	a8 01       	movw	r20, r16
    266c:	60 e0       	ldi	r22, 0x00	; 0
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	87 e9       	ldi	r24, 0x97	; 151
    2672:	e9 dd       	rcall	.-1070   	; 0x2246 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    2674:	b7 01       	movw	r22, r14
    2676:	a6 01       	movw	r20, r12
    2678:	89 e1       	ldi	r24, 0x19	; 25
    267a:	e5 dd       	rcall	.-1078   	; 0x2246 <send_cmd>
    267c:	81 11       	cpse	r24, r1
    267e:	13 c0       	rjmp	.+38     	; 0x26a6 <disk_write+0xb4>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    2680:	6c ef       	ldi	r22, 0xFC	; 252
    2682:	ce 01       	movw	r24, r28
    2684:	69 de       	rcall	.-814    	; 0x2358 <xmit_datablock>
    2686:	89 2b       	or	r24, r25
    2688:	31 f0       	breq	.+12     	; 0x2696 <disk_write+0xa4>
				buff += 512;
    268a:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    268c:	01 50       	subi	r16, 0x01	; 1
    268e:	11 09       	sbc	r17, r1
    2690:	01 15       	cp	r16, r1
    2692:	11 05       	cpc	r17, r1
    2694:	a9 f7       	brne	.-22     	; 0x2680 <disk_write+0x8e>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    2696:	6d ef       	ldi	r22, 0xFD	; 253
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	5d de       	rcall	.-838    	; 0x2358 <xmit_datablock>
    269e:	89 2b       	or	r24, r25
    26a0:	11 f4       	brne	.+4      	; 0x26a6 <disk_write+0xb4>
				count = 1;
    26a2:	01 e0       	ldi	r16, 0x01	; 1
    26a4:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    26a6:	b0 dd       	rcall	.-1184   	; 0x2208 <deselect>

	return count ? RES_ERROR : RES_OK;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	01 2b       	or	r16, r17
    26ac:	49 f4       	brne	.+18     	; 0x26c0 <disk_write+0xce>
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	07 c0       	rjmp	.+14     	; 0x26c0 <disk_write+0xce>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    26b2:	84 e0       	ldi	r24, 0x04	; 4
    26b4:	05 c0       	rjmp	.+10     	; 0x26c0 <disk_write+0xce>
    26b6:	84 e0       	ldi	r24, 0x04	; 4
    26b8:	03 c0       	rjmp	.+6      	; 0x26c0 <disk_write+0xce>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    26ba:	83 e0       	ldi	r24, 0x03	; 3
    26bc:	01 c0       	rjmp	.+2      	; 0x26c0 <disk_write+0xce>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    26be:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	1f 91       	pop	r17
    26c6:	0f 91       	pop	r16
    26c8:	ff 90       	pop	r15
    26ca:	ef 90       	pop	r14
    26cc:	df 90       	pop	r13
    26ce:	cf 90       	pop	r12
    26d0:	08 95       	ret

000026d2 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    26d2:	ef 92       	push	r14
    26d4:	ff 92       	push	r15
    26d6:	0f 93       	push	r16
    26d8:	1f 93       	push	r17
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
    26e2:	60 97       	sbiw	r28, 0x10	; 16
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    26ea:	81 11       	cpse	r24, r1
    26ec:	83 c1       	rjmp	.+774    	; 0x29f4 <disk_ioctl+0x322>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    26ee:	80 91 04 20 	lds	r24, 0x2004
    26f2:	80 fd       	sbrc	r24, 0
    26f4:	81 c1       	rjmp	.+770    	; 0x29f8 <disk_ioctl+0x326>

	switch (cmd) {
    26f6:	06 2f       	mov	r16, r22
    26f8:	10 e0       	ldi	r17, 0x00	; 0
    26fa:	07 33       	cpi	r16, 0x37	; 55
    26fc:	11 05       	cpc	r17, r1
    26fe:	08 f0       	brcs	.+2      	; 0x2702 <disk_ioctl+0x30>
    2700:	5f c1       	rjmp	.+702    	; 0x29c0 <disk_ioctl+0x2ee>
    2702:	f8 01       	movw	r30, r16
    2704:	e2 50       	subi	r30, 0x02	; 2
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	0c 94 f0 1e 	jmp	0x3de0	; 0x3de0 <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    270c:	84 dd       	rcall	.-1272   	; 0x2216 <select>
    270e:	11 e0       	ldi	r17, 0x01	; 1
    2710:	89 2b       	or	r24, r25
    2712:	09 f4       	brne	.+2      	; 0x2716 <disk_ioctl+0x44>
    2714:	6c c1       	rjmp	.+728    	; 0x29ee <disk_ioctl+0x31c>
    2716:	10 e0       	ldi	r17, 0x00	; 0
    2718:	6a c1       	rjmp	.+724    	; 0x29ee <disk_ioctl+0x31c>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    271a:	40 e0       	ldi	r20, 0x00	; 0
    271c:	50 e0       	ldi	r21, 0x00	; 0
    271e:	ba 01       	movw	r22, r20
    2720:	89 e0       	ldi	r24, 0x09	; 9
    2722:	91 dd       	rcall	.-1246   	; 0x2246 <send_cmd>
    2724:	81 11       	cpse	r24, r1
    2726:	4e c1       	rjmp	.+668    	; 0x29c4 <disk_ioctl+0x2f2>
    2728:	60 e1       	ldi	r22, 0x10	; 16
    272a:	70 e0       	ldi	r23, 0x00	; 0
    272c:	ce 01       	movw	r24, r28
    272e:	01 96       	adiw	r24, 0x01	; 1
    2730:	db dd       	rcall	.-1098   	; 0x22e8 <rcvr_datablock>
    2732:	89 2b       	or	r24, r25
    2734:	09 f4       	brne	.+2      	; 0x2738 <disk_ioctl+0x66>
    2736:	48 c1       	rjmp	.+656    	; 0x29c8 <disk_ioctl+0x2f6>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	82 95       	swap	r24
    273c:	86 95       	lsr	r24
    273e:	86 95       	lsr	r24
    2740:	83 70       	andi	r24, 0x03	; 3
    2742:	81 30       	cpi	r24, 0x01	; 1
    2744:	31 f5       	brne	.+76     	; 0x2792 <disk_ioctl+0xc0>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    2746:	88 85       	ldd	r24, Y+8	; 0x08
    2748:	8f 73       	andi	r24, 0x3F	; 63
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	a0 e0       	ldi	r26, 0x00	; 0
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	dc 01       	movw	r26, r24
    2752:	99 27       	eor	r25, r25
    2754:	88 27       	eor	r24, r24
    2756:	01 96       	adiw	r24, 0x01	; 1
    2758:	a1 1d       	adc	r26, r1
    275a:	b1 1d       	adc	r27, r1
    275c:	29 85       	ldd	r18, Y+9	; 0x09
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	32 2f       	mov	r19, r18
    2762:	22 27       	eor	r18, r18
    2764:	4a 85       	ldd	r20, Y+10	; 0x0a
    2766:	24 0f       	add	r18, r20
    2768:	31 1d       	adc	r19, r1
    276a:	82 0f       	add	r24, r18
    276c:	93 1f       	adc	r25, r19
    276e:	a1 1d       	adc	r26, r1
    2770:	b1 1d       	adc	r27, r1
				*(DWORD*)buff = csize << 10;
    2772:	07 2e       	mov	r0, r23
    2774:	7a e0       	ldi	r23, 0x0A	; 10
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	aa 1f       	adc	r26, r26
    277c:	bb 1f       	adc	r27, r27
    277e:	7a 95       	dec	r23
    2780:	d1 f7       	brne	.-12     	; 0x2776 <disk_ioctl+0xa4>
    2782:	70 2d       	mov	r23, r0
    2784:	f7 01       	movw	r30, r14
    2786:	80 83       	st	Z, r24
    2788:	91 83       	std	Z+1, r25	; 0x01
    278a:	a2 83       	std	Z+2, r26	; 0x02
    278c:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    278e:	10 e0       	ldi	r17, 0x00	; 0
    2790:	2e c1       	rjmp	.+604    	; 0x29ee <disk_ioctl+0x31c>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    2792:	49 85       	ldd	r20, Y+9	; 0x09
    2794:	42 95       	swap	r20
    2796:	46 95       	lsr	r20
    2798:	46 95       	lsr	r20
    279a:	43 70       	andi	r20, 0x03	; 3
    279c:	88 85       	ldd	r24, Y+8	; 0x08
    279e:	50 e0       	ldi	r21, 0x00	; 0
    27a0:	f4 e0       	ldi	r31, 0x04	; 4
    27a2:	8f 9f       	mul	r24, r31
    27a4:	40 0d       	add	r20, r0
    27a6:	51 1d       	adc	r21, r1
    27a8:	11 24       	eor	r1, r1
    27aa:	4f 5f       	subi	r20, 0xFF	; 255
    27ac:	5f 4f       	sbci	r21, 0xFF	; 255
    27ae:	8f 81       	ldd	r24, Y+7	; 0x07
    27b0:	83 70       	andi	r24, 0x03	; 3
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	98 2f       	mov	r25, r24
    27b6:	88 27       	eor	r24, r24
    27b8:	99 0f       	add	r25, r25
    27ba:	99 0f       	add	r25, r25
    27bc:	48 0f       	add	r20, r24
    27be:	59 1f       	adc	r21, r25
    27c0:	60 e0       	ldi	r22, 0x00	; 0
    27c2:	70 e0       	ldi	r23, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    27c4:	9e 81       	ldd	r25, Y+6	; 0x06
    27c6:	9f 70       	andi	r25, 0x0F	; 15
    27c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    27ca:	88 1f       	adc	r24, r24
    27cc:	88 27       	eor	r24, r24
    27ce:	88 1f       	adc	r24, r24
    27d0:	98 0f       	add	r25, r24
    27d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    27d4:	83 70       	andi	r24, 0x03	; 3
    27d6:	88 0f       	add	r24, r24
    27d8:	89 0f       	add	r24, r25
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    27da:	87 50       	subi	r24, 0x07	; 7
    27dc:	8a 01       	movw	r16, r20
    27de:	9b 01       	movw	r18, r22
    27e0:	04 c0       	rjmp	.+8      	; 0x27ea <disk_ioctl+0x118>
    27e2:	00 0f       	add	r16, r16
    27e4:	11 1f       	adc	r17, r17
    27e6:	22 1f       	adc	r18, r18
    27e8:	33 1f       	adc	r19, r19
    27ea:	8a 95       	dec	r24
    27ec:	d2 f7       	brpl	.-12     	; 0x27e2 <disk_ioctl+0x110>
    27ee:	f7 01       	movw	r30, r14
    27f0:	00 83       	st	Z, r16
    27f2:	11 83       	std	Z+1, r17	; 0x01
    27f4:	22 83       	std	Z+2, r18	; 0x02
    27f6:	33 83       	std	Z+3, r19	; 0x03
			}
			res = RES_OK;
    27f8:	10 e0       	ldi	r17, 0x00	; 0
    27fa:	f9 c0       	rjmp	.+498    	; 0x29ee <disk_ioctl+0x31c>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    27fc:	80 91 a9 21 	lds	r24, 0x21A9
    2800:	82 ff       	sbrs	r24, 2
    2802:	2d c0       	rjmp	.+90     	; 0x285e <disk_ioctl+0x18c>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	ba 01       	movw	r22, r20
    280a:	8d e8       	ldi	r24, 0x8D	; 141
    280c:	1c dd       	rcall	.-1480   	; 0x2246 <send_cmd>
    280e:	81 11       	cpse	r24, r1
    2810:	dd c0       	rjmp	.+442    	; 0x29cc <disk_ioctl+0x2fa>
				xchg_spi(0xFF);
    2812:	8f ef       	ldi	r24, 0xFF	; 255
    2814:	f7 dc       	rcall	.-1554   	; 0x2204 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    2816:	60 e1       	ldi	r22, 0x10	; 16
    2818:	70 e0       	ldi	r23, 0x00	; 0
    281a:	ce 01       	movw	r24, r28
    281c:	01 96       	adiw	r24, 0x01	; 1
    281e:	64 dd       	rcall	.-1336   	; 0x22e8 <rcvr_datablock>
    2820:	89 2b       	or	r24, r25
    2822:	09 f4       	brne	.+2      	; 0x2826 <disk_ioctl+0x154>
    2824:	d5 c0       	rjmp	.+426    	; 0x29d0 <disk_ioctl+0x2fe>
    2826:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    2828:	8f ef       	ldi	r24, 0xFF	; 255
    282a:	ec dc       	rcall	.-1576   	; 0x2204 <xchg_spi>
    282c:	11 50       	subi	r17, 0x01	; 1
    282e:	e1 f7       	brne	.-8      	; 0x2828 <disk_ioctl+0x156>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    2830:	8b 85       	ldd	r24, Y+11	; 0x0b
    2832:	82 95       	swap	r24
    2834:	8f 70       	andi	r24, 0x0F	; 15
    2836:	40 e1       	ldi	r20, 0x10	; 16
    2838:	50 e0       	ldi	r21, 0x00	; 0
    283a:	60 e0       	ldi	r22, 0x00	; 0
    283c:	70 e0       	ldi	r23, 0x00	; 0
    283e:	8a 01       	movw	r16, r20
    2840:	9b 01       	movw	r18, r22
    2842:	04 c0       	rjmp	.+8      	; 0x284c <disk_ioctl+0x17a>
    2844:	00 0f       	add	r16, r16
    2846:	11 1f       	adc	r17, r17
    2848:	22 1f       	adc	r18, r18
    284a:	33 1f       	adc	r19, r19
    284c:	8a 95       	dec	r24
    284e:	d2 f7       	brpl	.-12     	; 0x2844 <disk_ioctl+0x172>
    2850:	f7 01       	movw	r30, r14
    2852:	00 83       	st	Z, r16
    2854:	11 83       	std	Z+1, r17	; 0x01
    2856:	22 83       	std	Z+2, r18	; 0x02
    2858:	33 83       	std	Z+3, r19	; 0x03
					res = RES_OK;
    285a:	10 e0       	ldi	r17, 0x00	; 0
    285c:	c8 c0       	rjmp	.+400    	; 0x29ee <disk_ioctl+0x31c>
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    285e:	40 e0       	ldi	r20, 0x00	; 0
    2860:	50 e0       	ldi	r21, 0x00	; 0
    2862:	ba 01       	movw	r22, r20
    2864:	89 e0       	ldi	r24, 0x09	; 9
    2866:	ef dc       	rcall	.-1570   	; 0x2246 <send_cmd>
    2868:	81 11       	cpse	r24, r1
    286a:	b4 c0       	rjmp	.+360    	; 0x29d4 <disk_ioctl+0x302>
    286c:	60 e1       	ldi	r22, 0x10	; 16
    286e:	70 e0       	ldi	r23, 0x00	; 0
    2870:	ce 01       	movw	r24, r28
    2872:	01 96       	adiw	r24, 0x01	; 1
    2874:	39 dd       	rcall	.-1422   	; 0x22e8 <rcvr_datablock>
    2876:	89 2b       	or	r24, r25
    2878:	09 f4       	brne	.+2      	; 0x287c <disk_ioctl+0x1aa>
    287a:	ae c0       	rjmp	.+348    	; 0x29d8 <disk_ioctl+0x306>
				if (CardType & CT_SD1) {	/* SDv1 */
    287c:	80 91 a9 21 	lds	r24, 0x21A9
    2880:	81 ff       	sbrs	r24, 1
    2882:	20 c0       	rjmp	.+64     	; 0x28c4 <disk_ioctl+0x1f2>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    2884:	8c 85       	ldd	r24, Y+12	; 0x0c
    2886:	88 1f       	adc	r24, r24
    2888:	88 27       	eor	r24, r24
    288a:	88 1f       	adc	r24, r24
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	01 96       	adiw	r24, 0x01	; 1
    2890:	2b 85       	ldd	r18, Y+11	; 0x0b
    2892:	2f 73       	andi	r18, 0x3F	; 63
    2894:	82 0f       	add	r24, r18
    2896:	91 1d       	adc	r25, r1
    2898:	82 0f       	add	r24, r18
    289a:	91 1d       	adc	r25, r1
    289c:	2e 85       	ldd	r18, Y+14	; 0x0e
    289e:	22 95       	swap	r18
    28a0:	26 95       	lsr	r18
    28a2:	26 95       	lsr	r18
    28a4:	23 70       	andi	r18, 0x03	; 3
    28a6:	21 50       	subi	r18, 0x01	; 1
    28a8:	02 c0       	rjmp	.+4      	; 0x28ae <disk_ioctl+0x1dc>
    28aa:	88 0f       	add	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	2a 95       	dec	r18
    28b0:	e2 f7       	brpl	.-8      	; 0x28aa <disk_ioctl+0x1d8>
    28b2:	a0 e0       	ldi	r26, 0x00	; 0
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	f7 01       	movw	r30, r14
    28b8:	80 83       	st	Z, r24
    28ba:	91 83       	std	Z+1, r25	; 0x01
    28bc:	a2 83       	std	Z+2, r26	; 0x02
    28be:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    28c0:	10 e0       	ldi	r17, 0x00	; 0
    28c2:	95 c0       	rjmp	.+298    	; 0x29ee <disk_ioctl+0x31c>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    28c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    28c6:	98 2f       	mov	r25, r24
    28c8:	93 70       	andi	r25, 0x03	; 3
    28ca:	82 95       	swap	r24
    28cc:	86 95       	lsr	r24
    28ce:	87 70       	andi	r24, 0x07	; 7
    28d0:	48 2f       	mov	r20, r24
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	f8 e0       	ldi	r31, 0x08	; 8
    28d6:	9f 9f       	mul	r25, r31
    28d8:	40 0d       	add	r20, r0
    28da:	51 1d       	adc	r21, r1
    28dc:	11 24       	eor	r1, r1
    28de:	4f 5f       	subi	r20, 0xFF	; 255
    28e0:	5f 4f       	sbci	r21, 0xFF	; 255
    28e2:	2b 85       	ldd	r18, Y+11	; 0x0b
    28e4:	2c 77       	andi	r18, 0x7C	; 124
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	35 95       	asr	r19
    28ea:	27 95       	ror	r18
    28ec:	35 95       	asr	r19
    28ee:	27 95       	ror	r18
    28f0:	2f 5f       	subi	r18, 0xFF	; 255
    28f2:	3f 4f       	sbci	r19, 0xFF	; 255
    28f4:	42 9f       	mul	r20, r18
    28f6:	c0 01       	movw	r24, r0
    28f8:	43 9f       	mul	r20, r19
    28fa:	90 0d       	add	r25, r0
    28fc:	52 9f       	mul	r21, r18
    28fe:	90 0d       	add	r25, r0
    2900:	11 24       	eor	r1, r1
    2902:	a0 e0       	ldi	r26, 0x00	; 0
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	f7 01       	movw	r30, r14
    2908:	80 83       	st	Z, r24
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	a2 83       	std	Z+2, r26	; 0x02
    290e:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    2910:	10 e0       	ldi	r17, 0x00	; 0
    2912:	6d c0       	rjmp	.+218    	; 0x29ee <disk_ioctl+0x31c>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    2914:	80 91 a9 21 	lds	r24, 0x21A9
    2918:	fa 01       	movw	r30, r20
    291a:	80 83       	st	Z, r24
		res = RES_OK;
    291c:	10 e0       	ldi	r17, 0x00	; 0
		break;
    291e:	67 c0       	rjmp	.+206    	; 0x29ee <disk_ioctl+0x31c>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	50 e0       	ldi	r21, 0x00	; 0
    2924:	ba 01       	movw	r22, r20
    2926:	89 e0       	ldi	r24, 0x09	; 9
    2928:	8e dc       	rcall	.-1764   	; 0x2246 <send_cmd>
    292a:	81 11       	cpse	r24, r1
    292c:	57 c0       	rjmp	.+174    	; 0x29dc <disk_ioctl+0x30a>
			&& rcvr_datablock(ptr, 16))
    292e:	60 e1       	ldi	r22, 0x10	; 16
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	c7 01       	movw	r24, r14
    2934:	d9 dc       	rcall	.-1614   	; 0x22e8 <rcvr_datablock>
    2936:	11 e0       	ldi	r17, 0x01	; 1
    2938:	89 2b       	or	r24, r25
    293a:	09 f4       	brne	.+2      	; 0x293e <disk_ioctl+0x26c>
    293c:	58 c0       	rjmp	.+176    	; 0x29ee <disk_ioctl+0x31c>
    293e:	10 e0       	ldi	r17, 0x00	; 0
    2940:	56 c0       	rjmp	.+172    	; 0x29ee <disk_ioctl+0x31c>
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	ba 01       	movw	r22, r20
    2948:	8a e0       	ldi	r24, 0x0A	; 10
    294a:	7d dc       	rcall	.-1798   	; 0x2246 <send_cmd>
    294c:	81 11       	cpse	r24, r1
    294e:	48 c0       	rjmp	.+144    	; 0x29e0 <disk_ioctl+0x30e>
			&& rcvr_datablock(ptr, 16))
    2950:	60 e1       	ldi	r22, 0x10	; 16
    2952:	70 e0       	ldi	r23, 0x00	; 0
    2954:	c7 01       	movw	r24, r14
    2956:	c8 dc       	rcall	.-1648   	; 0x22e8 <rcvr_datablock>
    2958:	11 e0       	ldi	r17, 0x01	; 1
    295a:	89 2b       	or	r24, r25
    295c:	09 f4       	brne	.+2      	; 0x2960 <disk_ioctl+0x28e>
    295e:	47 c0       	rjmp	.+142    	; 0x29ee <disk_ioctl+0x31c>
    2960:	10 e0       	ldi	r17, 0x00	; 0
    2962:	45 c0       	rjmp	.+138    	; 0x29ee <disk_ioctl+0x31c>
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    2964:	40 e0       	ldi	r20, 0x00	; 0
    2966:	50 e0       	ldi	r21, 0x00	; 0
    2968:	ba 01       	movw	r22, r20
    296a:	8a e3       	ldi	r24, 0x3A	; 58
    296c:	6c dc       	rcall	.-1832   	; 0x2246 <send_cmd>
    296e:	81 11       	cpse	r24, r1
    2970:	39 c0       	rjmp	.+114    	; 0x29e4 <disk_ioctl+0x312>
    2972:	87 01       	movw	r16, r14
    2974:	f4 e0       	ldi	r31, 0x04	; 4
    2976:	ef 0e       	add	r14, r31
    2978:	f1 1c       	adc	r15, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    297a:	8f ef       	ldi	r24, 0xFF	; 255
    297c:	43 dc       	rcall	.-1914   	; 0x2204 <xchg_spi>
    297e:	f8 01       	movw	r30, r16
    2980:	81 93       	st	Z+, r24
    2982:	8f 01       	movw	r16, r30
    2984:	ee 15       	cp	r30, r14
    2986:	ff 05       	cpc	r31, r15
    2988:	c1 f7       	brne	.-16     	; 0x297a <disk_ioctl+0x2a8>
    298a:	2e c0       	rjmp	.+92     	; 0x29e8 <disk_ioctl+0x316>
			res = RES_OK;
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    298c:	40 e0       	ldi	r20, 0x00	; 0
    298e:	50 e0       	ldi	r21, 0x00	; 0
    2990:	ba 01       	movw	r22, r20
    2992:	8d e8       	ldi	r24, 0x8D	; 141
    2994:	58 dc       	rcall	.-1872   	; 0x2246 <send_cmd>
    2996:	81 11       	cpse	r24, r1
    2998:	29 c0       	rjmp	.+82     	; 0x29ec <disk_ioctl+0x31a>
			xchg_spi(0xFF);
    299a:	8f ef       	ldi	r24, 0xFF	; 255
    299c:	33 dc       	rcall	.-1946   	; 0x2204 <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    299e:	60 e4       	ldi	r22, 0x40	; 64
    29a0:	70 e0       	ldi	r23, 0x00	; 0
    29a2:	c7 01       	movw	r24, r14
    29a4:	a1 dc       	rcall	.-1726   	; 0x22e8 <rcvr_datablock>
    29a6:	11 e0       	ldi	r17, 0x01	; 1
    29a8:	89 2b       	or	r24, r25
    29aa:	09 f1       	breq	.+66     	; 0x29ee <disk_ioctl+0x31c>
    29ac:	10 e0       	ldi	r17, 0x00	; 0
    29ae:	1f c0       	rjmp	.+62     	; 0x29ee <disk_ioctl+0x31c>

static
void power_off (void)
{
	//TCC1.CTRLA = TC_CLKSEL_OFF_gc;
	spi_off();
    29b0:	a7 d2       	rcall	.+1358   	; 0x2f00 <spi_off>
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
		Stat |= STA_NOINIT;
    29b2:	80 91 04 20 	lds	r24, 0x2004
    29b6:	81 60       	ori	r24, 0x01	; 1
    29b8:	80 93 04 20 	sts	0x2004, r24
		res = RES_OK;
    29bc:	10 e0       	ldi	r17, 0x00	; 0
		break;
    29be:	17 c0       	rjmp	.+46     	; 0x29ee <disk_ioctl+0x31c>

	default:
		res = RES_PARERR;
    29c0:	14 e0       	ldi	r17, 0x04	; 4
    29c2:	15 c0       	rjmp	.+42     	; 0x29ee <disk_ioctl+0x31c>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    29c4:	11 e0       	ldi	r17, 0x01	; 1
    29c6:	13 c0       	rjmp	.+38     	; 0x29ee <disk_ioctl+0x31c>
    29c8:	11 e0       	ldi	r17, 0x01	; 1
    29ca:	11 c0       	rjmp	.+34     	; 0x29ee <disk_ioctl+0x31c>
    29cc:	11 e0       	ldi	r17, 0x01	; 1
    29ce:	0f c0       	rjmp	.+30     	; 0x29ee <disk_ioctl+0x31c>
    29d0:	11 e0       	ldi	r17, 0x01	; 1
    29d2:	0d c0       	rjmp	.+26     	; 0x29ee <disk_ioctl+0x31c>
    29d4:	11 e0       	ldi	r17, 0x01	; 1
    29d6:	0b c0       	rjmp	.+22     	; 0x29ee <disk_ioctl+0x31c>
    29d8:	11 e0       	ldi	r17, 0x01	; 1
    29da:	09 c0       	rjmp	.+18     	; 0x29ee <disk_ioctl+0x31c>
    29dc:	11 e0       	ldi	r17, 0x01	; 1
    29de:	07 c0       	rjmp	.+14     	; 0x29ee <disk_ioctl+0x31c>
    29e0:	11 e0       	ldi	r17, 0x01	; 1
    29e2:	05 c0       	rjmp	.+10     	; 0x29ee <disk_ioctl+0x31c>
    29e4:	11 e0       	ldi	r17, 0x01	; 1
    29e6:	03 c0       	rjmp	.+6      	; 0x29ee <disk_ioctl+0x31c>
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
			res = RES_OK;
    29e8:	10 e0       	ldi	r17, 0x00	; 0
    29ea:	01 c0       	rjmp	.+2      	; 0x29ee <disk_ioctl+0x31c>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    29ec:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    29ee:	0c dc       	rcall	.-2024   	; 0x2208 <deselect>

	return res;
    29f0:	81 2f       	mov	r24, r17
    29f2:	03 c0       	rjmp	.+6      	; 0x29fa <disk_ioctl+0x328>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    29f4:	84 e0       	ldi	r24, 0x04	; 4
    29f6:	01 c0       	rjmp	.+2      	; 0x29fa <disk_ioctl+0x328>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    29f8:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    29fa:	60 96       	adiw	r28, 0x10	; 16
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	df 91       	pop	r29
    2a02:	cf 91       	pop	r28
    2a04:	1f 91       	pop	r17
    2a06:	0f 91       	pop	r16
    2a08:	ff 90       	pop	r15
    2a0a:	ef 90       	pop	r14
    2a0c:	08 95       	ret

00002a0e <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
    2a0e:	1f 92       	push	r1
    2a10:	0f 92       	push	r0
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	0f 92       	push	r0
    2a16:	11 24       	eor	r1, r1
    2a18:	0b b6       	in	r0, 0x3b	; 59
    2a1a:	0f 92       	push	r0
    2a1c:	2f 93       	push	r18
    2a1e:	3f 93       	push	r19
    2a20:	4f 93       	push	r20
    2a22:	5f 93       	push	r21
    2a24:	8f 93       	push	r24
    2a26:	9f 93       	push	r25
    2a28:	af 93       	push	r26
    2a2a:	bf 93       	push	r27
    2a2c:	ef 93       	push	r30
    2a2e:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
    2a30:	e0 91 e1 23 	lds	r30, 0x23E1
    2a34:	f0 91 e2 23 	lds	r31, 0x23E2
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	if (!fcb) return;
    2a38:	30 97       	sbiw	r30, 0x00	; 0
    2a3a:	09 f4       	brne	.+2      	; 0x2a3e <__vector_14+0x30>
    2a3c:	49 c0       	rjmp	.+146    	; 0x2ad0 <__vector_14+0xc2>
	ct = fcb->ct; ri = fcb->ri;
    2a3e:	46 81       	ldd	r20, Z+6	; 0x06
    2a40:	57 81       	ldd	r21, Z+7	; 0x07
    2a42:	22 81       	ldd	r18, Z+2	; 0x02
    2a44:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
    2a46:	80 85       	ldd	r24, Z+8	; 0x08
    2a48:	91 85       	ldd	r25, Z+9	; 0x09
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	a2 0f       	add	r26, r18
    2a4e:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
    2a50:	80 81       	ld	r24, Z
    2a52:	91 81       	ldd	r25, Z+1	; 0x01
    2a54:	81 30       	cpi	r24, 0x01	; 1
    2a56:	91 05       	cpc	r25, r1
    2a58:	69 f0       	breq	.+26     	; 0x2a74 <__vector_14+0x66>
    2a5a:	18 f0       	brcs	.+6      	; 0x2a62 <__vector_14+0x54>
    2a5c:	02 97       	sbiw	r24, 0x02	; 2
    2a5e:	99 f0       	breq	.+38     	; 0x2a86 <__vector_14+0x78>
    2a60:	1d c0       	rjmp	.+58     	; 0x2a9c <__vector_14+0x8e>
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
    2a62:	41 15       	cp	r20, r1
    2a64:	51 05       	cpc	r21, r1
    2a66:	a1 f1       	breq	.+104    	; 0x2ad0 <__vector_14+0xc2>
		l1 = r2 = buff[0];
    2a68:	8c 91       	ld	r24, X
		ct -= 1; ri += 1;
    2a6a:	41 50       	subi	r20, 0x01	; 1
    2a6c:	51 09       	sbc	r21, r1
    2a6e:	2f 5f       	subi	r18, 0xFF	; 255
    2a70:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    2a72:	1d c0       	rjmp	.+58     	; 0x2aae <__vector_14+0xa0>
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
    2a74:	42 30       	cpi	r20, 0x02	; 2
    2a76:	51 05       	cpc	r21, r1
    2a78:	58 f1       	brcs	.+86     	; 0x2ad0 <__vector_14+0xc2>
		l1 = buff[0]; r2 = buff[1];
    2a7a:	8c 91       	ld	r24, X
		ct -= 2; ri += 2;
    2a7c:	42 50       	subi	r20, 0x02	; 2
    2a7e:	51 09       	sbc	r21, r1
    2a80:	2e 5f       	subi	r18, 0xFE	; 254
    2a82:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    2a84:	14 c0       	rjmp	.+40     	; 0x2aae <__vector_14+0xa0>
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
    2a86:	42 30       	cpi	r20, 0x02	; 2
    2a88:	51 05       	cpc	r21, r1
    2a8a:	10 f1       	brcs	.+68     	; 0x2ad0 <__vector_14+0xc2>
		l1 = r2 = buff[1] + 128;
    2a8c:	11 96       	adiw	r26, 0x01	; 1
    2a8e:	8c 91       	ld	r24, X
    2a90:	80 58       	subi	r24, 0x80	; 128
		ct -= 2; ri += 2;
    2a92:	42 50       	subi	r20, 0x02	; 2
    2a94:	51 09       	sbc	r21, r1
    2a96:	2e 5f       	subi	r18, 0xFE	; 254
    2a98:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
    2a9a:	09 c0       	rjmp	.+18     	; 0x2aae <__vector_14+0xa0>
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
    2a9c:	44 30       	cpi	r20, 0x04	; 4
    2a9e:	51 05       	cpc	r21, r1
    2aa0:	b8 f0       	brcs	.+46     	; 0x2ad0 <__vector_14+0xc2>
		l2 = buff[0]; 
		l1 = buff[1];
    2aa2:	11 96       	adiw	r26, 0x01	; 1
    2aa4:	8c 91       	ld	r24, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
    2aa6:	44 50       	subi	r20, 0x04	; 4
    2aa8:	51 09       	sbc	r21, r1
		ri += 4;
    2aaa:	2c 5f       	subi	r18, 0xFC	; 252
    2aac:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fcb->ct = ct;
    2aae:	46 83       	std	Z+6, r20	; 0x06
    2ab0:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
    2ab2:	42 85       	ldd	r20, Z+10	; 0x0a
    2ab4:	53 85       	ldd	r21, Z+11	; 0x0b
    2ab6:	41 50       	subi	r20, 0x01	; 1
    2ab8:	51 09       	sbc	r21, r1
    2aba:	24 23       	and	r18, r20
    2abc:	35 23       	and	r19, r21
    2abe:	22 83       	std	Z+2, r18	; 0x02
    2ac0:	33 83       	std	Z+3, r19	; 0x03
	
	uint8_t data = l1;//smooth(l1,0.35,data);
	//uint8_t data = l1*0.2;
	
	DACB.CH0DATA = data;
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	e0 e2       	ldi	r30, 0x20	; 32
    2ac6:	f3 e0       	ldi	r31, 0x03	; 3
    2ac8:	80 8f       	std	Z+24, r24	; 0x18
    2aca:	91 8f       	std	Z+25, r25	; 0x19
	DACB.CH1DATA = data;
    2acc:	82 8f       	std	Z+26, r24	; 0x1a
    2ace:	93 8f       	std	Z+27, r25	; 0x1b
	//DACB.CH0DATAL = (data << 7);
	//DACB.CH0DATAH = (data >> 1);
}
    2ad0:	ff 91       	pop	r31
    2ad2:	ef 91       	pop	r30
    2ad4:	bf 91       	pop	r27
    2ad6:	af 91       	pop	r26
    2ad8:	9f 91       	pop	r25
    2ada:	8f 91       	pop	r24
    2adc:	5f 91       	pop	r21
    2ade:	4f 91       	pop	r20
    2ae0:	3f 91       	pop	r19
    2ae2:	2f 91       	pop	r18
    2ae4:	0f 90       	pop	r0
    2ae6:	0b be       	out	0x3b, r0	; 59
    2ae8:	0f 90       	pop	r0
    2aea:	0f be       	out	0x3f, r0	; 63
    2aec:	0f 90       	pop	r0
    2aee:	1f 90       	pop	r1
    2af0:	18 95       	reti

00002af2 <ht1632c_setPixel>:
	HT1632_PORT.PIN5CTRL = PORT_OPC_PULLUP_gc;
	HT1632_PORT.PIN6CTRL = PORT_OPC_PULLUP_gc;
	HT1632_PORT.PIN7CTRL = PORT_OPC_PULLUP_gc;
	
	ht1632c_sendcommand(HT1632_LED_OFF);
	ht1632c_sendcommand(HT1632_SYS_DIS);
    2af2:	fc 01       	movw	r30, r24
    2af4:	f6 95       	lsr	r31
    2af6:	e7 95       	ror	r30
    2af8:	f6 95       	lsr	r31
    2afa:	e7 95       	ror	r30
    2afc:	f6 95       	lsr	r31
    2afe:	e7 95       	ror	r30
    2b00:	eb 51       	subi	r30, 0x1B	; 27
    2b02:	fc 4d       	sbci	r31, 0xDC	; 220
    2b04:	87 70       	andi	r24, 0x07	; 7
    2b06:	99 27       	eor	r25, r25
    2b08:	21 e0       	ldi	r18, 0x01	; 1
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	a9 01       	movw	r20, r18
    2b0e:	02 c0       	rjmp	.+4      	; 0x2b14 <ht1632c_setPixel+0x22>
    2b10:	44 0f       	add	r20, r20
    2b12:	55 1f       	adc	r21, r21
    2b14:	8a 95       	dec	r24
    2b16:	e2 f7       	brpl	.-8      	; 0x2b10 <ht1632c_setPixel+0x1e>
    2b18:	ca 01       	movw	r24, r20
    2b1a:	90 81       	ld	r25, Z
    2b1c:	89 2b       	or	r24, r25
    2b1e:	80 83       	st	Z, r24
    2b20:	08 95       	ret

00002b22 <ht1632c_clrPixel>:
    2b22:	fc 01       	movw	r30, r24
    2b24:	f6 95       	lsr	r31
    2b26:	e7 95       	ror	r30
    2b28:	f6 95       	lsr	r31
    2b2a:	e7 95       	ror	r30
    2b2c:	f6 95       	lsr	r31
    2b2e:	e7 95       	ror	r30
    2b30:	eb 51       	subi	r30, 0x1B	; 27
    2b32:	fc 4d       	sbci	r31, 0xDC	; 220
    2b34:	87 70       	andi	r24, 0x07	; 7
    2b36:	99 27       	eor	r25, r25
    2b38:	21 e0       	ldi	r18, 0x01	; 1
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	a9 01       	movw	r20, r18
    2b3e:	02 c0       	rjmp	.+4      	; 0x2b44 <ht1632c_clrPixel+0x22>
    2b40:	44 0f       	add	r20, r20
    2b42:	55 1f       	adc	r21, r21
    2b44:	8a 95       	dec	r24
    2b46:	e2 f7       	brpl	.-8      	; 0x2b40 <ht1632c_clrPixel+0x1e>
    2b48:	ca 01       	movw	r24, r20
    2b4a:	80 95       	com	r24
    2b4c:	90 81       	ld	r25, Z
    2b4e:	89 23       	and	r24, r25
    2b50:	80 83       	st	Z, r24
    2b52:	08 95       	ret

00002b54 <ht1632c_drawPixel>:
    2b54:	68 31       	cpi	r22, 0x18	; 24
    2b56:	60 f5       	brcc	.+88     	; 0x2bb0 <ht1632c_drawPixel+0x5c>
    2b58:	80 31       	cpi	r24, 0x10	; 16
    2b5a:	50 f5       	brcc	.+84     	; 0x2bb0 <ht1632c_drawPixel+0x5c>
    2b5c:	2b ea       	ldi	r18, 0xAB	; 171
    2b5e:	82 9f       	mul	r24, r18
    2b60:	21 2d       	mov	r18, r1
    2b62:	11 24       	eor	r1, r1
    2b64:	22 95       	swap	r18
    2b66:	2f 70       	andi	r18, 0x0F	; 15
    2b68:	98 e1       	ldi	r25, 0x18	; 24
    2b6a:	29 9f       	mul	r18, r25
    2b6c:	80 19       	sub	r24, r0
    2b6e:	11 24       	eor	r1, r1
    2b70:	28 2f       	mov	r18, r24
    2b72:	88 30       	cpi	r24, 0x08	; 8
    2b74:	28 f0       	brcs	.+10     	; 0x2b80 <ht1632c_drawPixel+0x2c>
    2b76:	80 31       	cpi	r24, 0x10	; 16
    2b78:	30 f4       	brcc	.+12     	; 0x2b86 <ht1632c_drawPixel+0x32>
    2b7a:	87 e8       	ldi	r24, 0x87	; 135
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	05 c0       	rjmp	.+10     	; 0x2b8a <ht1632c_drawPixel+0x36>
    2b80:	87 e0       	ldi	r24, 0x07	; 7
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	02 c0       	rjmp	.+4      	; 0x2b8a <ht1632c_drawPixel+0x36>
    2b86:	87 e0       	ldi	r24, 0x07	; 7
    2b88:	91 e0       	ldi	r25, 0x01	; 1
    2b8a:	27 70       	andi	r18, 0x07	; 7
    2b8c:	82 1b       	sub	r24, r18
    2b8e:	91 09       	sbc	r25, r1
    2b90:	68 30       	cpi	r22, 0x08	; 8
    2b92:	10 f4       	brcc	.+4      	; 0x2b98 <ht1632c_drawPixel+0x44>
    2b94:	66 0f       	add	r22, r22
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <ht1632c_drawPixel+0x48>
    2b98:	66 0f       	add	r22, r22
    2b9a:	6f 50       	subi	r22, 0x0F	; 15
    2b9c:	28 e0       	ldi	r18, 0x08	; 8
    2b9e:	62 9f       	mul	r22, r18
    2ba0:	80 0d       	add	r24, r0
    2ba2:	91 1d       	adc	r25, r1
    2ba4:	11 24       	eor	r1, r1
    2ba6:	44 23       	and	r20, r20
    2ba8:	11 f0       	breq	.+4      	; 0x2bae <ht1632c_drawPixel+0x5a>
    2baa:	a3 cf       	rjmp	.-186    	; 0x2af2 <ht1632c_setPixel>
    2bac:	08 95       	ret
    2bae:	b9 cf       	rjmp	.-142    	; 0x2b22 <ht1632c_clrPixel>
    2bb0:	08 95       	ret

00002bb2 <ht1632c_writedata>:
    2bb2:	cf 93       	push	r28
    2bb4:	df 93       	push	r29
    2bb6:	28 e0       	ldi	r18, 0x08	; 8
    2bb8:	e0 e8       	ldi	r30, 0x80	; 128
    2bba:	f6 e0       	ldi	r31, 0x06	; 6
    2bbc:	21 83       	std	Z+1, r18	; 0x01
    2bbe:	66 23       	and	r22, r22
    2bc0:	c1 f0       	breq	.+48     	; 0x2bf2 <ht1632c_writedata+0x40>
    2bc2:	74 e0       	ldi	r23, 0x04	; 4
    2bc4:	41 e0       	ldi	r20, 0x01	; 1
    2bc6:	50 e0       	ldi	r21, 0x00	; 0
    2bc8:	a8 e0       	ldi	r26, 0x08	; 8
    2bca:	76 83       	std	Z+6, r23	; 0x06
    2bcc:	2f ef       	ldi	r18, 0xFF	; 255
    2bce:	26 0f       	add	r18, r22
    2bd0:	ea 01       	movw	r28, r20
    2bd2:	02 c0       	rjmp	.+4      	; 0x2bd8 <ht1632c_writedata+0x26>
    2bd4:	cc 0f       	add	r28, r28
    2bd6:	dd 1f       	adc	r29, r29
    2bd8:	2a 95       	dec	r18
    2bda:	e2 f7       	brpl	.-8      	; 0x2bd4 <ht1632c_writedata+0x22>
    2bdc:	9e 01       	movw	r18, r28
    2bde:	28 23       	and	r18, r24
    2be0:	39 23       	and	r19, r25
    2be2:	23 2b       	or	r18, r19
    2be4:	11 f0       	breq	.+4      	; 0x2bea <ht1632c_writedata+0x38>
    2be6:	a5 83       	std	Z+5, r26	; 0x05
    2be8:	01 c0       	rjmp	.+2      	; 0x2bec <ht1632c_writedata+0x3a>
    2bea:	a6 83       	std	Z+6, r26	; 0x06
    2bec:	75 83       	std	Z+5, r23	; 0x05
    2bee:	61 50       	subi	r22, 0x01	; 1
    2bf0:	61 f7       	brne	.-40     	; 0x2bca <ht1632c_writedata+0x18>
    2bf2:	88 e0       	ldi	r24, 0x08	; 8
    2bf4:	e0 e8       	ldi	r30, 0x80	; 128
    2bf6:	f6 e0       	ldi	r31, 0x06	; 6
    2bf8:	86 83       	std	Z+6, r24	; 0x06
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	08 95       	ret

00002c00 <ht1632c_writeScreen>:
    2c00:	0f 93       	push	r16
    2c02:	1f 93       	push	r17
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	e0 e8       	ldi	r30, 0x80	; 128
    2c0c:	f6 e0       	ldi	r31, 0x06	; 6
    2c0e:	86 83       	std	Z+6, r24	; 0x06
    2c10:	63 e0       	ldi	r22, 0x03	; 3
    2c12:	85 e0       	ldi	r24, 0x05	; 5
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	cd df       	rcall	.-102    	; 0x2bb2 <ht1632c_writedata>
    2c18:	67 e0       	ldi	r22, 0x07	; 7
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	c9 df       	rcall	.-110    	; 0x2bb2 <ht1632c_writedata>
    2c20:	c6 ee       	ldi	r28, 0xE6	; 230
    2c22:	d3 e2       	ldi	r29, 0x23	; 35
    2c24:	06 e1       	ldi	r16, 0x16	; 22
    2c26:	14 e2       	ldi	r17, 0x24	; 36
    2c28:	fe 01       	movw	r30, r28
    2c2a:	31 97       	sbiw	r30, 0x01	; 1
    2c2c:	80 81       	ld	r24, Z
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	98 2f       	mov	r25, r24
    2c32:	88 27       	eor	r24, r24
    2c34:	28 81       	ld	r18, Y
    2c36:	60 e1       	ldi	r22, 0x10	; 16
    2c38:	82 2b       	or	r24, r18
    2c3a:	bb df       	rcall	.-138    	; 0x2bb2 <ht1632c_writedata>
    2c3c:	22 96       	adiw	r28, 0x02	; 2
    2c3e:	c0 17       	cp	r28, r16
    2c40:	d1 07       	cpc	r29, r17
    2c42:	91 f7       	brne	.-28     	; 0x2c28 <ht1632c_writeScreen+0x28>
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	e0 e8       	ldi	r30, 0x80	; 128
    2c48:	f6 e0       	ldi	r31, 0x06	; 6
    2c4a:	85 83       	std	Z+5, r24	; 0x05
    2c4c:	df 91       	pop	r29
    2c4e:	cf 91       	pop	r28
    2c50:	1f 91       	pop	r17
    2c52:	0f 91       	pop	r16
    2c54:	08 95       	ret

00002c56 <ht1632c_clearScreen>:
    2c56:	e5 ee       	ldi	r30, 0xE5	; 229
    2c58:	f3 e2       	ldi	r31, 0x23	; 35
    2c5a:	85 e1       	ldi	r24, 0x15	; 21
    2c5c:	94 e2       	ldi	r25, 0x24	; 36
    2c5e:	11 92       	st	Z+, r1
    2c60:	e8 17       	cp	r30, r24
    2c62:	f9 07       	cpc	r31, r25
    2c64:	e1 f7       	brne	.-8      	; 0x2c5e <ht1632c_clearScreen+0x8>
    2c66:	cc cf       	rjmp	.-104    	; 0x2c00 <ht1632c_writeScreen>
    2c68:	08 95       	ret

00002c6a <ht1632c_sendcommand>:
    2c6a:	1f 93       	push	r17
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	94 60       	ori	r25, 0x04	; 4
    2c74:	c0 e8       	ldi	r28, 0x80	; 128
    2c76:	d6 e0       	ldi	r29, 0x06	; 6
    2c78:	11 e0       	ldi	r17, 0x01	; 1
    2c7a:	1e 83       	std	Y+6, r17	; 0x06
    2c7c:	6c e0       	ldi	r22, 0x0C	; 12
    2c7e:	88 0f       	add	r24, r24
    2c80:	99 1f       	adc	r25, r25
    2c82:	97 df       	rcall	.-210    	; 0x2bb2 <ht1632c_writedata>
    2c84:	1d 83       	std	Y+5, r17	; 0x05
    2c86:	df 91       	pop	r29
    2c88:	cf 91       	pop	r28
    2c8a:	1f 91       	pop	r17
    2c8c:	08 95       	ret

00002c8e <ht1632c_begin>:
    2c8e:	cf 93       	push	r28
    2c90:	c8 2f       	mov	r28, r24
    2c92:	e0 e8       	ldi	r30, 0x80	; 128
    2c94:	f6 e0       	ldi	r31, 0x06	; 6
    2c96:	91 e0       	ldi	r25, 0x01	; 1
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	95 83       	std	Z+5, r25	; 0x05
    2c9c:	94 e0       	ldi	r25, 0x04	; 4
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	95 83       	std	Z+5, r25	; 0x05
    2ca2:	88 e0       	ldi	r24, 0x08	; 8
    2ca4:	81 83       	std	Z+1, r24	; 0x01
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	e0 df       	rcall	.-64     	; 0x2c6a <ht1632c_sendcommand>
    2caa:	83 e0       	ldi	r24, 0x03	; 3
    2cac:	de df       	rcall	.-68     	; 0x2c6a <ht1632c_sendcommand>
    2cae:	88 e0       	ldi	r24, 0x08	; 8
    2cb0:	dc df       	rcall	.-72     	; 0x2c6a <ht1632c_sendcommand>
    2cb2:	84 e1       	ldi	r24, 0x14	; 20
    2cb4:	da df       	rcall	.-76     	; 0x2c6a <ht1632c_sendcommand>
    2cb6:	88 e1       	ldi	r24, 0x18	; 24
    2cb8:	d8 df       	rcall	.-80     	; 0x2c6a <ht1632c_sendcommand>
    2cba:	8c 2f       	mov	r24, r28
    2cbc:	d6 df       	rcall	.-84     	; 0x2c6a <ht1632c_sendcommand>
    2cbe:	81 ea       	ldi	r24, 0xA1	; 161
    2cc0:	d4 df       	rcall	.-88     	; 0x2c6a <ht1632c_sendcommand>
    2cc2:	cf 91       	pop	r28
    2cc4:	08 95       	ret

00002cc6 <ht1632c_setBrightness>:
}

void ht1632c_setBrightness(uint8_t pwm) {
    2cc6:	80 31       	cpi	r24, 0x10	; 16
    2cc8:	08 f0       	brcs	.+2      	; 0x2ccc <ht1632c_setBrightness+0x6>
    2cca:	8f e0       	ldi	r24, 0x0F	; 15
	if (pwm > 15) {
		pwm = 15;	
	}
	ht1632c_sendcommand(HT1632_PWM_CONTROL | pwm);
    2ccc:	80 6a       	ori	r24, 0xA0	; 160
    2cce:	cd cf       	rjmp	.-102    	; 0x2c6a <ht1632c_sendcommand>
    2cd0:	08 95       	ret

00002cd2 <sd_card>:
		load_wav(&Fil, "**** WAV PLAYER ****", Buff, sizeof Buff);
		f_close(&Fil);
	}	
}

void sd_card(void) {
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	00 d0       	rcall	.+0      	; 0x2cd8 <sd_card+0x6>
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
	UINT bw;
	
	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
    2cdc:	40 e0       	ldi	r20, 0x00	; 0
    2cde:	62 e1       	ldi	r22, 0x12	; 18
    2ce0:	71 e2       	ldi	r23, 0x21	; 33
    2ce2:	85 e1       	ldi	r24, 0x15	; 21
    2ce4:	94 e2       	ldi	r25, 0x24	; 36
    2ce6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <f_mount>
	
	if (f_open(&Fil, "newfilea.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {	/* Create a file */
    2cea:	4a e0       	ldi	r20, 0x0A	; 10
    2cec:	6a ef       	ldi	r22, 0xFA	; 250
    2cee:	70 e2       	ldi	r23, 0x20	; 32
    2cf0:	87 e4       	ldi	r24, 0x47	; 71
    2cf2:	9e e2       	ldi	r25, 0x2E	; 46
    2cf4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <f_open>
    2cf8:	81 11       	cpse	r24, r1
    2cfa:	0d c0       	rjmp	.+26     	; 0x2d16 <sd_card+0x44>
		
		f_write(&Fil, "It works!\r\n", 11, &bw);	/* Write data to the file */
    2cfc:	9e 01       	movw	r18, r28
    2cfe:	2f 5f       	subi	r18, 0xFF	; 255
    2d00:	3f 4f       	sbci	r19, 0xFF	; 255
    2d02:	4b e0       	ldi	r20, 0x0B	; 11
    2d04:	50 e0       	ldi	r21, 0x00	; 0
    2d06:	67 e0       	ldi	r22, 0x07	; 7
    2d08:	71 e2       	ldi	r23, 0x21	; 33
    2d0a:	87 e4       	ldi	r24, 0x47	; 71
    2d0c:	9e e2       	ldi	r25, 0x2E	; 46
    2d0e:	8f d8       	rcall	.-3810   	; 0x1e2e <f_write>
		
		f_close(&Fil);								/* Close the file */
    2d10:	87 e4       	ldi	r24, 0x47	; 71
    2d12:	9e e2       	ldi	r25, 0x2E	; 46
    2d14:	67 da       	rcall	.-2866   	; 0x21e4 <f_close>
	}
}
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	08 95       	ret

00002d20 <main>:

int main(void) {
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
    2d28:	62 97       	sbiw	r28, 0x12	; 18
    2d2a:	cd bf       	out	0x3d, r28	; 61
    2d2c:	de bf       	out	0x3e, r29	; 62

	time_t user_time;
	SI114X_IRQ_SAMPLE sensor_data;
	
	clock_setup_32_mhz();
    2d2e:	0e 94 55 01 	call	0x2aa	; 0x2aa <clock_setup_32_mhz>
	ht1632c_begin(HT1632_COMMON_16NMOS);
    2d32:	84 e2       	ldi	r24, 0x24	; 36
    2d34:	ac df       	rcall	.-168    	; 0x2c8e <ht1632c_begin>
	ht1632c_setBrightness(0);
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	c6 df       	rcall	.-116    	; 0x2cc6 <ht1632c_setBrightness>
	ht1632c_clearScreen();
    2d3a:	8d df       	rcall	.-230    	; 0x2c56 <ht1632c_clearScreen>
	//ht1632c_fillScreen();
	//adc_setup();
	uart_setup();
    2d3c:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <uart_setup>
void uart_put_char(char c);
static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) {
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    2d40:	87 e0       	ldi	r24, 0x07	; 7
    2d42:	e0 ea       	ldi	r30, 0xA0	; 160
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	82 83       	std	Z+2, r24	; 0x02
	ht1632c_clearScreen();
	//ht1632c_fillScreen();
	//adc_setup();
	uart_setup();
	pmic_setup();
	i2c_setup();
    2d48:	f4 d0       	rcall	.+488    	; 0x2f32 <i2c_setup>
	btn_setup();
    2d4a:	43 d0       	rcall	.+134    	; 0x2dd2 <btn_setup>
	rtc_setup();
    2d4c:	72 d0       	rcall	.+228    	; 0x2e32 <rtc_setup>
	
	stdout = stdin = &mystdout;
    2d4e:	85 e0       	ldi	r24, 0x05	; 5
    2d50:	90 e2       	ldi	r25, 0x20	; 32
    2d52:	80 93 72 2e 	sts	0x2E72, r24
    2d56:	90 93 73 2e 	sts	0x2E73, r25
    2d5a:	80 93 74 2e 	sts	0x2E74, r24
    2d5e:	90 93 75 2e 	sts	0x2E75, r25
	
	sd_card();
    2d62:	b7 df       	rcall	.-146    	; 0x2cd2 <sd_card>
	
	//_delay_ms(5000);
	
	si114x_reset(SI114X_ADDR);
    2d64:	8a e5       	ldi	r24, 0x5A	; 90
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	64 d2       	rcall	.+1224   	; 0x3232 <si114x_reset>
	si114x_init(SI114X_ADDR);
    2d6a:	8a e5       	ldi	r24, 0x5A	; 90
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	a4 d2       	rcall	.+1352   	; 0x32b8 <si114x_init>
	
	TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
    2d70:	e0 e4       	ldi	r30, 0x40	; 64
    2d72:	f8 e0       	ldi	r31, 0x08	; 8
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	80 83       	st	Z, r24
	TCC1.PERL = 0x80;
    2d78:	90 e8       	ldi	r25, 0x80	; 128
    2d7a:	96 a3       	std	Z+38, r25	; 0x26
	TCC1.PERH = 0x0C;
    2d7c:	9c e0       	ldi	r25, 0x0C	; 12
    2d7e:	97 a3       	std	Z+39, r25	; 0x27
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
    2d80:	86 83       	std	Z+6, r24	; 0x06
	
	user_time.seconds = 0;
	user_time.minutes = 0;
	user_time.hours = 0;
	
	sei();
    2d82:	78 94       	sei
				_delay_ms(250);
				break;
		}
		*/
		
		sensor_data.timestamp = counter;
    2d84:	80 91 ac 21 	lds	r24, 0x21AC
    2d88:	90 91 ad 21 	lds	r25, 0x21AD
    2d8c:	8b 83       	std	Y+3, r24	; 0x03
    2d8e:	9c 83       	std	Y+4, r25	; 0x04
		si114x_get_data(&sensor_data);
    2d90:	ce 01       	movw	r24, r28
    2d92:	01 96       	adiw	r24, 0x01	; 1
    2d94:	93 d1       	rcall	.+806    	; 0x30bc <si114x_get_data>
		si114x_process_samples(SI114X_ADDR,&sensor_data);
    2d96:	be 01       	movw	r22, r28
    2d98:	6f 5f       	subi	r22, 0xFF	; 255
    2d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9c:	8a e5       	ldi	r24, 0x5A	; 90
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	07 d5       	rcall	.+2574   	; 0x37b0 <si114x_process_samples>
    2da2:	f0 cf       	rjmp	.-32     	; 0x2d84 <main+0x64>

00002da4 <__vector_20>:
	}
	
}

//Used for SI114x Timestamp
ISR(TCC1_OVF_vect) {
    2da4:	1f 92       	push	r1
    2da6:	0f 92       	push	r0
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	0f 92       	push	r0
    2dac:	11 24       	eor	r1, r1
    2dae:	8f 93       	push	r24
    2db0:	9f 93       	push	r25
	counter++;	
    2db2:	80 91 ac 21 	lds	r24, 0x21AC
    2db6:	90 91 ad 21 	lds	r25, 0x21AD
    2dba:	01 96       	adiw	r24, 0x01	; 1
    2dbc:	80 93 ac 21 	sts	0x21AC, r24
    2dc0:	90 93 ad 21 	sts	0x21AD, r25
    2dc4:	9f 91       	pop	r25
    2dc6:	8f 91       	pop	r24
    2dc8:	0f 90       	pop	r0
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	0f 90       	pop	r0
    2dce:	1f 90       	pop	r1
    2dd0:	18 95       	reti

00002dd2 <btn_setup>:
	} else if (!(PORTB.IN & PIN0_bm)) {
		return BTN4;
	} else {
		return NONE;
	}
}
    2dd2:	80 ee       	ldi	r24, 0xE0	; 224
    2dd4:	e0 e0       	ldi	r30, 0x00	; 0
    2dd6:	f6 e0       	ldi	r31, 0x06	; 6
    2dd8:	82 83       	std	Z+2, r24	; 0x02
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	e0 e2       	ldi	r30, 0x20	; 32
    2dde:	f6 e0       	ldi	r31, 0x06	; 6
    2de0:	82 83       	std	Z+2, r24	; 0x02
    2de2:	08 95       	ret

00002de4 <__vector_66>:

ISR(PORTA_INT0_vect) {
    2de4:	1f 92       	push	r1
    2de6:	0f 92       	push	r0
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	0f 92       	push	r0
    2dec:	11 24       	eor	r1, r1
    2dee:	0b b6       	in	r0, 0x3b	; 59
    2df0:	0f 92       	push	r0
    2df2:	2f 93       	push	r18
    2df4:	3f 93       	push	r19
    2df6:	4f 93       	push	r20
    2df8:	5f 93       	push	r21
    2dfa:	6f 93       	push	r22
    2dfc:	7f 93       	push	r23
    2dfe:	8f 93       	push	r24
    2e00:	9f 93       	push	r25
    2e02:	af 93       	push	r26
    2e04:	bf 93       	push	r27
    2e06:	ef 93       	push	r30
    2e08:	ff 93       	push	r31
	ht1632c_clearScreen();
    2e0a:	25 df       	rcall	.-438    	; 0x2c56 <ht1632c_clearScreen>
    2e0c:	ff 91       	pop	r31
    2e0e:	ef 91       	pop	r30
    2e10:	bf 91       	pop	r27
    2e12:	af 91       	pop	r26
    2e14:	9f 91       	pop	r25
    2e16:	8f 91       	pop	r24
    2e18:	7f 91       	pop	r23
    2e1a:	6f 91       	pop	r22
    2e1c:	5f 91       	pop	r21
    2e1e:	4f 91       	pop	r20
    2e20:	3f 91       	pop	r19
    2e22:	2f 91       	pop	r18
    2e24:	0f 90       	pop	r0
    2e26:	0b be       	out	0x3b, r0	; 59
    2e28:	0f 90       	pop	r0
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	0f 90       	pop	r0
    2e2e:	1f 90       	pop	r1
    2e30:	18 95       	reti

00002e32 <rtc_setup>:
void update_time(void) {
	if (time.seconds == 59) {
		int_to_string(BOTTOM,time.minutes);
	}
	if (time.minutes == 59) {
		int_to_string(TOP,time.hours);
    2e32:	88 ed       	ldi	r24, 0xD8	; 216
    2e34:	84 bf       	out	0x34, r24	; 52
    2e36:	8b e0       	ldi	r24, 0x0B	; 11
    2e38:	e0 e4       	ldi	r30, 0x40	; 64
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	83 83       	std	Z+3, r24	; 0x03
    2e3e:	e0 e0       	ldi	r30, 0x00	; 0
    2e40:	f4 e0       	ldi	r31, 0x04	; 4
    2e42:	81 81       	ldd	r24, Z+1	; 0x01
    2e44:	80 fd       	sbrc	r24, 0
    2e46:	fd cf       	rjmp	.-6      	; 0x2e42 <rtc_setup+0x10>
    2e48:	e0 e0       	ldi	r30, 0x00	; 0
    2e4a:	f4 e0       	ldi	r31, 0x04	; 4
    2e4c:	84 e6       	ldi	r24, 0x64	; 100
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	82 87       	std	Z+10, r24	; 0x0a
    2e52:	93 87       	std	Z+11, r25	; 0x0b
    2e54:	82 e0       	ldi	r24, 0x02	; 2
    2e56:	82 83       	std	Z+2, r24	; 0x02
    2e58:	10 86       	std	Z+8, r1	; 0x08
    2e5a:	11 86       	std	Z+9, r1	; 0x09
    2e5c:	14 86       	std	Z+12, r1	; 0x0c
    2e5e:	15 86       	std	Z+13, r1	; 0x0d
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	80 83       	st	Z, r24
    2e64:	08 95       	ret

00002e66 <__vector_10>:
	ht1632c_drawChar(9,pos,buffer[1],1,1);
	
	ht1632c_writeScreen();
}

ISR(RTC_OVF_vect) {
    2e66:	1f 92       	push	r1
    2e68:	0f 92       	push	r0
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	0f 92       	push	r0
    2e6e:	11 24       	eor	r1, r1
    2e70:	0b b6       	in	r0, 0x3b	; 59
    2e72:	0f 92       	push	r0
    2e74:	2f 93       	push	r18
    2e76:	3f 93       	push	r19
    2e78:	4f 93       	push	r20
    2e7a:	8f 93       	push	r24
    2e7c:	9f 93       	push	r25
    2e7e:	af 93       	push	r26
    2e80:	bf 93       	push	r27
    2e82:	ef 93       	push	r30
    2e84:	ff 93       	push	r31
	time.seconds++;
    2e86:	a7 e6       	ldi	r26, 0x67	; 103
    2e88:	be e2       	ldi	r27, 0x2E	; 46
    2e8a:	4c 91       	ld	r20, X
    2e8c:	4f 5f       	subi	r20, 0xFF	; 255
	time.minutes += time.seconds / 60;
    2e8e:	99 e8       	ldi	r25, 0x89	; 137
    2e90:	49 9f       	mul	r20, r25
    2e92:	31 2d       	mov	r19, r1
    2e94:	11 24       	eor	r1, r1
    2e96:	32 95       	swap	r19
    2e98:	36 95       	lsr	r19
    2e9a:	37 70       	andi	r19, 0x07	; 7
    2e9c:	e8 e6       	ldi	r30, 0x68	; 104
    2e9e:	fe e2       	ldi	r31, 0x2E	; 46
    2ea0:	20 81       	ld	r18, Z
    2ea2:	23 0f       	add	r18, r19
	time.seconds %= 60;
    2ea4:	8c e3       	ldi	r24, 0x3C	; 60
    2ea6:	38 9f       	mul	r19, r24
    2ea8:	40 19       	sub	r20, r0
    2eaa:	11 24       	eor	r1, r1
    2eac:	4c 93       	st	X, r20
	time.hours += time.minutes / 60;
    2eae:	a9 e6       	ldi	r26, 0x69	; 105
    2eb0:	be e2       	ldi	r27, 0x2E	; 46
    2eb2:	29 9f       	mul	r18, r25
    2eb4:	91 2d       	mov	r25, r1
    2eb6:	11 24       	eor	r1, r1
    2eb8:	92 95       	swap	r25
    2eba:	96 95       	lsr	r25
    2ebc:	97 70       	andi	r25, 0x07	; 7
    2ebe:	3c 91       	ld	r19, X
    2ec0:	39 0f       	add	r19, r25
    2ec2:	3c 93       	st	X, r19
	time.minutes %= 60;
    2ec4:	98 9f       	mul	r25, r24
    2ec6:	20 19       	sub	r18, r0
    2ec8:	11 24       	eor	r1, r1
    2eca:	20 83       	st	Z, r18
}
    2ecc:	ff 91       	pop	r31
    2ece:	ef 91       	pop	r30
    2ed0:	bf 91       	pop	r27
    2ed2:	af 91       	pop	r26
    2ed4:	9f 91       	pop	r25
    2ed6:	8f 91       	pop	r24
    2ed8:	4f 91       	pop	r20
    2eda:	3f 91       	pop	r19
    2edc:	2f 91       	pop	r18
    2ede:	0f 90       	pop	r0
    2ee0:	0b be       	out	0x3b, r0	; 59
    2ee2:	0f 90       	pop	r0
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	0f 90       	pop	r0
    2ee8:	1f 90       	pop	r1
    2eea:	18 95       	reti

00002eec <spi_on>:
	_delay_ms(1);
	
	TWIC.MASTER.CTRLC = 0x03; //Send STOP
	
	return length;
}
    2eec:	e0 e4       	ldi	r30, 0x40	; 64
    2eee:	f6 e0       	ldi	r31, 0x06	; 6
    2ef0:	80 eb       	ldi	r24, 0xB0	; 176
    2ef2:	81 83       	std	Z+1, r24	; 0x01
    2ef4:	80 e1       	ldi	r24, 0x10	; 16
    2ef6:	85 83       	std	Z+5, r24	; 0x05
    2ef8:	80 ed       	ldi	r24, 0xD0	; 208
    2efa:	80 93 c0 08 	sts	0x08C0, r24
    2efe:	08 95       	ret

00002f00 <spi_off>:
    2f00:	e0 ec       	ldi	r30, 0xC0	; 192
    2f02:	f8 e0       	ldi	r31, 0x08	; 8
    2f04:	80 81       	ld	r24, Z
    2f06:	8f 7b       	andi	r24, 0xBF	; 191
    2f08:	80 83       	st	Z, r24
    2f0a:	e0 e4       	ldi	r30, 0x40	; 64
    2f0c:	f6 e0       	ldi	r31, 0x06	; 6
    2f0e:	80 eb       	ldi	r24, 0xB0	; 176
    2f10:	82 83       	std	Z+2, r24	; 0x02
    2f12:	88 e1       	ldi	r24, 0x18	; 24
    2f14:	84 8b       	std	Z+20, r24	; 0x14
    2f16:	85 8b       	std	Z+21, r24	; 0x15
    2f18:	86 8b       	std	Z+22, r24	; 0x16
    2f1a:	87 8b       	std	Z+23, r24	; 0x17
    2f1c:	08 95       	ret

00002f1e <spi_wr_rd>:
    2f1e:	e0 ec       	ldi	r30, 0xC0	; 192
    2f20:	f8 e0       	ldi	r31, 0x08	; 8
    2f22:	83 83       	std	Z+3, r24	; 0x03
    2f24:	82 81       	ldd	r24, Z+2	; 0x02
    2f26:	88 23       	and	r24, r24
    2f28:	ec f7       	brge	.-6      	; 0x2f24 <spi_wr_rd+0x6>
    2f2a:	e0 ec       	ldi	r30, 0xC0	; 192
    2f2c:	f8 e0       	ldi	r31, 0x08	; 8
    2f2e:	83 81       	ldd	r24, Z+3	; 0x03
    2f30:	08 95       	ret

00002f32 <i2c_setup>:
    2f32:	e0 e8       	ldi	r30, 0x80	; 128
    2f34:	f4 e0       	ldi	r31, 0x04	; 4
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	82 83       	std	Z+2, r24	; 0x02
    2f3a:	92 e3       	ldi	r25, 0x32	; 50
    2f3c:	95 83       	std	Z+5, r25	; 0x05
    2f3e:	98 e0       	ldi	r25, 0x08	; 8
    2f40:	91 83       	std	Z+1, r25	; 0x01
    2f42:	84 83       	std	Z+4, r24	; 0x04
    2f44:	08 95       	ret

00002f46 <i2c_write_data>:
    2f46:	88 0f       	add	r24, r24
    2f48:	e0 e8       	ldi	r30, 0x80	; 128
    2f4a:	f4 e0       	ldi	r31, 0x04	; 4
    2f4c:	86 83       	std	Z+6, r24	; 0x06
    2f4e:	84 81       	ldd	r24, Z+4	; 0x04
    2f50:	86 ff       	sbrs	r24, 6
    2f52:	fd cf       	rjmp	.-6      	; 0x2f4e <i2c_write_data+0x8>
    2f54:	e0 e8       	ldi	r30, 0x80	; 128
    2f56:	f4 e0       	ldi	r31, 0x04	; 4
    2f58:	67 83       	std	Z+7, r22	; 0x07
    2f5a:	84 81       	ldd	r24, Z+4	; 0x04
    2f5c:	86 ff       	sbrs	r24, 6
    2f5e:	fd cf       	rjmp	.-6      	; 0x2f5a <i2c_write_data+0x14>
    2f60:	e0 e8       	ldi	r30, 0x80	; 128
    2f62:	f4 e0       	ldi	r31, 0x04	; 4
    2f64:	47 83       	std	Z+7, r20	; 0x07
    2f66:	84 81       	ldd	r24, Z+4	; 0x04
    2f68:	86 ff       	sbrs	r24, 6
    2f6a:	fd cf       	rjmp	.-6      	; 0x2f66 <i2c_write_data+0x20>
    2f6c:	83 e0       	ldi	r24, 0x03	; 3
    2f6e:	e0 e8       	ldi	r30, 0x80	; 128
    2f70:	f4 e0       	ldi	r31, 0x04	; 4
    2f72:	83 83       	std	Z+3, r24	; 0x03
    2f74:	80 e0       	ldi	r24, 0x00	; 0
    2f76:	08 95       	ret

00002f78 <i2c_read_data>:
    2f78:	98 2f       	mov	r25, r24
    2f7a:	99 0f       	add	r25, r25
    2f7c:	e0 e8       	ldi	r30, 0x80	; 128
    2f7e:	f4 e0       	ldi	r31, 0x04	; 4
    2f80:	96 83       	std	Z+6, r25	; 0x06
    2f82:	94 81       	ldd	r25, Z+4	; 0x04
    2f84:	96 ff       	sbrs	r25, 6
    2f86:	fd cf       	rjmp	.-6      	; 0x2f82 <i2c_read_data+0xa>
    2f88:	e0 e8       	ldi	r30, 0x80	; 128
    2f8a:	f4 e0       	ldi	r31, 0x04	; 4
    2f8c:	67 83       	std	Z+7, r22	; 0x07
    2f8e:	94 81       	ldd	r25, Z+4	; 0x04
    2f90:	96 ff       	sbrs	r25, 6
    2f92:	fd cf       	rjmp	.-6      	; 0x2f8e <i2c_read_data+0x16>
    2f94:	88 0f       	add	r24, r24
    2f96:	81 60       	ori	r24, 0x01	; 1
    2f98:	e0 e8       	ldi	r30, 0x80	; 128
    2f9a:	f4 e0       	ldi	r31, 0x04	; 4
    2f9c:	86 83       	std	Z+6, r24	; 0x06
    2f9e:	84 81       	ldd	r24, Z+4	; 0x04
    2fa0:	88 23       	and	r24, r24
    2fa2:	ec f7       	brge	.-6      	; 0x2f9e <i2c_read_data+0x26>
    2fa4:	e0 e8       	ldi	r30, 0x80	; 128
    2fa6:	f4 e0       	ldi	r31, 0x04	; 4
    2fa8:	87 81       	ldd	r24, Z+7	; 0x07
    2faa:	93 81       	ldd	r25, Z+3	; 0x03
    2fac:	94 60       	ori	r25, 0x04	; 4
    2fae:	93 83       	std	Z+3, r25	; 0x03
    2fb0:	e9 ef       	ldi	r30, 0xF9	; 249
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	31 97       	sbiw	r30, 0x01	; 1
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <i2c_read_data+0x3c>
    2fb8:	00 c0       	rjmp	.+0      	; 0x2fba <i2c_read_data+0x42>
    2fba:	00 00       	nop
    2fbc:	93 e0       	ldi	r25, 0x03	; 3
    2fbe:	e0 e8       	ldi	r30, 0x80	; 128
    2fc0:	f4 e0       	ldi	r31, 0x04	; 4
    2fc2:	93 83       	std	Z+3, r25	; 0x03
    2fc4:	08 95       	ret

00002fc6 <i2c_write_data_block>:

uint8_t i2c_write_data_block(uint8_t slave_addr, uint8_t register_addr, uint8_t *data, uint8_t length) {
	
	uint8_t i;
	
	TWIC.MASTER.ADDR = (slave_addr << 1);
    2fc6:	88 0f       	add	r24, r24
    2fc8:	e0 e8       	ldi	r30, 0x80	; 128
    2fca:	f4 e0       	ldi	r31, 0x04	; 4
    2fcc:	86 83       	std	Z+6, r24	; 0x06
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    2fce:	94 81       	ldd	r25, Z+4	; 0x04
    2fd0:	96 ff       	sbrs	r25, 6
    2fd2:	fd cf       	rjmp	.-6      	; 0x2fce <i2c_write_data_block+0x8>
	TWIC.MASTER.DATA = register_addr;
    2fd4:	e0 e8       	ldi	r30, 0x80	; 128
    2fd6:	f4 e0       	ldi	r31, 0x04	; 4
    2fd8:	67 83       	std	Z+7, r22	; 0x07
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    2fda:	94 81       	ldd	r25, Z+4	; 0x04
    2fdc:	96 ff       	sbrs	r25, 6
    2fde:	fd cf       	rjmp	.-6      	; 0x2fda <i2c_write_data_block+0x14>
	
	for (i = 0; i < length; i++) {
    2fe0:	22 23       	and	r18, r18
    2fe2:	71 f0       	breq	.+28     	; 0x3000 <__stack+0x1>
    2fe4:	84 2f       	mov	r24, r20
    2fe6:	a4 2f       	mov	r26, r20
    2fe8:	b5 2f       	mov	r27, r21
		TWIC.MASTER.DATA = data[i];
    2fea:	e0 e8       	ldi	r30, 0x80	; 128
    2fec:	f4 e0       	ldi	r31, 0x04	; 4
    2fee:	9d 91       	ld	r25, X+
    2ff0:	97 83       	std	Z+7, r25	; 0x07
		while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
    2ff2:	94 81       	ldd	r25, Z+4	; 0x04
    2ff4:	96 ff       	sbrs	r25, 6
    2ff6:	fd cf       	rjmp	.-6      	; 0x2ff2 <i2c_write_data_block+0x2c>
    2ff8:	9a 2f       	mov	r25, r26
    2ffa:	98 1b       	sub	r25, r24
	TWIC.MASTER.ADDR = (slave_addr << 1);
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
	TWIC.MASTER.DATA = register_addr;
	while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
	
	for (i = 0; i < length; i++) {
    2ffc:	92 17       	cp	r25, r18
    2ffe:	b8 f3       	brcs	.-18     	; 0x2fee <i2c_write_data_block+0x28>
		TWIC.MASTER.DATA = data[i];
		while(!(TWIC.MASTER.STATUS & TWI_MASTER_WIF_bm));
	}
	
	TWIC.MASTER.CTRLC = 0x03; //Stop
    3000:	83 e0       	ldi	r24, 0x03	; 3
    3002:	e0 e8       	ldi	r30, 0x80	; 128
    3004:	f4 e0       	ldi	r31, 0x04	; 4
    3006:	83 83       	std	Z+3, r24	; 0x03
	
	return length;
    3008:	82 2f       	mov	r24, r18
    300a:	08 95       	ret

0000300c <_sendCmd>:
    // returns Parameter[address]
    s16 retval;
    u8 cmd = 0x80 + (address & 0x1F);
    if((retval=_sendCmd(si114x_handle, cmd ))!=0) return retval;
    return Si114xReadFromRegister(si114x_handle, REG_PARAM_RD);
}
    300c:	df 92       	push	r13
    300e:	ef 92       	push	r14
    3010:	ff 92       	push	r15
    3012:	0f 93       	push	r16
    3014:	1f 93       	push	r17
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    301a:	ec 01       	movw	r28, r24
    301c:	d6 2e       	mov	r13, r22
    301e:	60 e2       	ldi	r22, 0x20	; 32
    3020:	81 d4       	rcall	.+2306   	; 0x3924 <Si114xReadFromRegister>
    3022:	8c 01       	movw	r16, r24
    3024:	99 23       	and	r25, r25
    3026:	34 f1       	brlt	.+76     	; 0x3074 <_sendCmd+0x68>
    3028:	60 e3       	ldi	r22, 0x30	; 48
    302a:	ce 01       	movw	r24, r28
    302c:	7b d4       	rcall	.+2294   	; 0x3924 <Si114xReadFromRegister>
    302e:	81 30       	cpi	r24, 0x01	; 1
    3030:	91 05       	cpc	r25, r1
    3032:	81 f1       	breq	.+96     	; 0x3094 <_sendCmd+0x88>
    3034:	99 23       	and	r25, r25
    3036:	c4 f7       	brge	.-16     	; 0x3028 <_sendCmd+0x1c>
    3038:	39 c0       	rjmp	.+114    	; 0x30ac <_sendCmd+0xa0>
    303a:	60 e2       	ldi	r22, 0x20	; 32
    303c:	ce 01       	movw	r24, r28
    303e:	72 d4       	rcall	.+2276   	; 0x3924 <Si114xReadFromRegister>
    3040:	80 17       	cp	r24, r16
    3042:	91 07       	cpc	r25, r17
    3044:	51 f1       	breq	.+84     	; 0x309a <_sendCmd+0x8e>
    3046:	99 23       	and	r25, r25
    3048:	8c f1       	brlt	.+98     	; 0x30ac <_sendCmd+0xa0>
    304a:	8c 01       	movw	r16, r24
    304c:	ed cf       	rjmp	.-38     	; 0x3028 <_sendCmd+0x1c>
    304e:	78 01       	movw	r14, r16
    3050:	4d 2d       	mov	r20, r13
    3052:	68 e1       	ldi	r22, 0x18	; 24
    3054:	ce 01       	movw	r24, r28
    3056:	62 d4       	rcall	.+2244   	; 0x391c <Si114xWriteToRegister>
    3058:	9c 01       	movw	r18, r24
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	69 f4       	brne	.+26     	; 0x3078 <_sendCmd+0x6c>
    305e:	dd 20       	and	r13, r13
    3060:	69 f0       	breq	.+26     	; 0x307c <_sendCmd+0x70>
    3062:	60 e2       	ldi	r22, 0x20	; 32
    3064:	ce 01       	movw	r24, r28
    3066:	5e d4       	rcall	.+2236   	; 0x3924 <Si114xReadFromRegister>
    3068:	8e 15       	cp	r24, r14
    306a:	9f 05       	cpc	r25, r15
    306c:	51 f4       	brne	.+20     	; 0x3082 <_sendCmd+0x76>
    306e:	11 23       	and	r17, r17
    3070:	c4 f7       	brge	.-16     	; 0x3062 <_sendCmd+0x56>
    3072:	0a c0       	rjmp	.+20     	; 0x3088 <_sendCmd+0x7c>
    3074:	91 2f       	mov	r25, r17
    3076:	1a c0       	rjmp	.+52     	; 0x30ac <_sendCmd+0xa0>
    3078:	93 2f       	mov	r25, r19
    307a:	18 c0       	rjmp	.+48     	; 0x30ac <_sendCmd+0xa0>
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	15 c0       	rjmp	.+42     	; 0x30ac <_sendCmd+0xa0>
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	12 c0       	rjmp	.+36     	; 0x30ac <_sendCmd+0xa0>
    3088:	80 2f       	mov	r24, r16
    308a:	91 2f       	mov	r25, r17
    308c:	0f c0       	rjmp	.+30     	; 0x30ac <_sendCmd+0xa0>
    308e:	82 2f       	mov	r24, r18
    3090:	93 2f       	mov	r25, r19
    3092:	0c c0       	rjmp	.+24     	; 0x30ac <_sendCmd+0xa0>
    3094:	d1 10       	cpse	r13, r1
    3096:	d1 cf       	rjmp	.-94     	; 0x303a <_sendCmd+0x2e>
    3098:	da cf       	rjmp	.-76     	; 0x304e <_sendCmd+0x42>
    309a:	78 01       	movw	r14, r16
    309c:	4d 2d       	mov	r20, r13
    309e:	68 e1       	ldi	r22, 0x18	; 24
    30a0:	ce 01       	movw	r24, r28
    30a2:	3c d4       	rcall	.+2168   	; 0x391c <Si114xWriteToRegister>
    30a4:	9c 01       	movw	r18, r24
    30a6:	00 97       	sbiw	r24, 0x00	; 0
    30a8:	e1 f2       	breq	.-72     	; 0x3062 <_sendCmd+0x56>
    30aa:	f1 cf       	rjmp	.-30     	; 0x308e <_sendCmd+0x82>
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	1f 91       	pop	r17
    30b2:	0f 91       	pop	r16
    30b4:	ff 90       	pop	r15
    30b6:	ef 90       	pop	r14
    30b8:	df 90       	pop	r13
    30ba:	08 95       	ret

000030bc <si114x_get_data>:
    30bc:	1f 93       	push	r17
    30be:	cf 93       	push	r28
    30c0:	df 93       	push	r29
    30c2:	ec 01       	movw	r28, r24
    30c4:	66 e2       	ldi	r22, 0x26	; 38
    30c6:	70 e0       	ldi	r23, 0x00	; 0
    30c8:	8a e5       	ldi	r24, 0x5A	; 90
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	55 df       	rcall	.-342    	; 0x2f78 <i2c_read_data>
    30ce:	18 2f       	mov	r17, r24
    30d0:	67 e2       	ldi	r22, 0x27	; 39
    30d2:	70 e0       	ldi	r23, 0x00	; 0
    30d4:	8a e5       	ldi	r24, 0x5A	; 90
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	4f df       	rcall	.-354    	; 0x2f78 <i2c_read_data>
    30da:	98 2f       	mov	r25, r24
    30dc:	88 27       	eor	r24, r24
    30de:	81 2b       	or	r24, r17
    30e0:	8a 87       	std	Y+10, r24	; 0x0a
    30e2:	9b 87       	std	Y+11, r25	; 0x0b
    30e4:	68 e2       	ldi	r22, 0x28	; 40
    30e6:	70 e0       	ldi	r23, 0x00	; 0
    30e8:	8a e5       	ldi	r24, 0x5A	; 90
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	45 df       	rcall	.-374    	; 0x2f78 <i2c_read_data>
    30ee:	18 2f       	mov	r17, r24
    30f0:	69 e2       	ldi	r22, 0x29	; 41
    30f2:	70 e0       	ldi	r23, 0x00	; 0
    30f4:	8a e5       	ldi	r24, 0x5A	; 90
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	3f df       	rcall	.-386    	; 0x2f78 <i2c_read_data>
    30fa:	98 2f       	mov	r25, r24
    30fc:	88 27       	eor	r24, r24
    30fe:	81 2b       	or	r24, r17
    3100:	8c 87       	std	Y+12, r24	; 0x0c
    3102:	9d 87       	std	Y+13, r25	; 0x0d
    3104:	6a e2       	ldi	r22, 0x2A	; 42
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	8a e5       	ldi	r24, 0x5A	; 90
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	35 df       	rcall	.-406    	; 0x2f78 <i2c_read_data>
    310e:	18 2f       	mov	r17, r24
    3110:	6b e2       	ldi	r22, 0x2B	; 43
    3112:	70 e0       	ldi	r23, 0x00	; 0
    3114:	8a e5       	ldi	r24, 0x5A	; 90
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	2f df       	rcall	.-418    	; 0x2f78 <i2c_read_data>
    311a:	98 2f       	mov	r25, r24
    311c:	88 27       	eor	r24, r24
    311e:	81 2b       	or	r24, r17
    3120:	8e 87       	std	Y+14, r24	; 0x0e
    3122:	9f 87       	std	Y+15, r25	; 0x0f
    3124:	64 e2       	ldi	r22, 0x24	; 36
    3126:	70 e0       	ldi	r23, 0x00	; 0
    3128:	8a e5       	ldi	r24, 0x5A	; 90
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	25 df       	rcall	.-438    	; 0x2f78 <i2c_read_data>
    312e:	18 2f       	mov	r17, r24
    3130:	65 e2       	ldi	r22, 0x25	; 37
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	8a e5       	ldi	r24, 0x5A	; 90
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	1f df       	rcall	.-450    	; 0x2f78 <i2c_read_data>
    313a:	98 2f       	mov	r25, r24
    313c:	88 27       	eor	r24, r24
    313e:	81 2b       	or	r24, r17
    3140:	88 87       	std	Y+8, r24	; 0x08
    3142:	99 87       	std	Y+9, r25	; 0x09
    3144:	62 e2       	ldi	r22, 0x22	; 34
    3146:	70 e0       	ldi	r23, 0x00	; 0
    3148:	8a e5       	ldi	r24, 0x5A	; 90
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	15 df       	rcall	.-470    	; 0x2f78 <i2c_read_data>
    314e:	18 2f       	mov	r17, r24
    3150:	63 e2       	ldi	r22, 0x23	; 35
    3152:	70 e0       	ldi	r23, 0x00	; 0
    3154:	8a e5       	ldi	r24, 0x5A	; 90
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	0f df       	rcall	.-482    	; 0x2f78 <i2c_read_data>
    315a:	98 2f       	mov	r25, r24
    315c:	88 27       	eor	r24, r24
    315e:	81 2b       	or	r24, r17
    3160:	8e 83       	std	Y+6, r24	; 0x06
    3162:	9f 83       	std	Y+7, r25	; 0x07
    3164:	df 91       	pop	r29
    3166:	cf 91       	pop	r28
    3168:	1f 91       	pop	r17
    316a:	08 95       	ret

0000316c <Si114xNop>:
    316c:	60 e0       	ldi	r22, 0x00	; 0
    316e:	4e cf       	rjmp	.-356    	; 0x300c <_sendCmd>
    3170:	08 95       	ret

00003172 <Si114xPsAlsAuto>:
    3172:	6f e0       	ldi	r22, 0x0F	; 15
    3174:	4b cf       	rjmp	.-362    	; 0x300c <_sendCmd>
    3176:	08 95       	ret

00003178 <Si114xParamSet>:

//-----------------------------------------------------------------------------
// Si114xParamSet writes to the PARAM_WR and CMD register 
//
s16 Si114xParamSet(HANDLE si114x_handle, u8 address, u8 value)
{
    3178:	cf 92       	push	r12
    317a:	df 92       	push	r13
    317c:	ef 92       	push	r14
    317e:	ff 92       	push	r15
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	00 d0       	rcall	.+0      	; 0x318a <Si114xParamSet+0x12>
    318a:	cd b7       	in	r28, 0x3d	; 61
    318c:	de b7       	in	r29, 0x3e	; 62
    318e:	8c 01       	movw	r16, r24
    3190:	d6 2e       	mov	r13, r22
    3192:	c4 2e       	mov	r12, r20
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    3194:	60 e3       	ldi	r22, 0x30	; 48
    3196:	c8 01       	movw	r24, r16
    3198:	c5 d3       	rcall	.+1930   	; 0x3924 <Si114xReadFromRegister>
        if (retval == 1) break;
    319a:	81 30       	cpi	r24, 0x01	; 1
    319c:	91 05       	cpc	r25, r1
    319e:	79 f0       	breq	.+30     	; 0x31be <Si114xParamSet+0x46>
        if (retval <  0) return retval;
    31a0:	99 23       	and	r25, r25
    31a2:	c4 f7       	brge	.-16     	; 0x3194 <Si114xParamSet+0x1c>
    31a4:	1e c0       	rjmp	.+60     	; 0x31e2 <Si114xParamSet+0x6a>

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    if (retval != 0) return retval;

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
    31a6:	60 e2       	ldi	r22, 0x20	; 32
    31a8:	c8 01       	movw	r24, r16
    31aa:	bc d3       	rcall	.+1912   	; 0x3924 <Si114xReadFromRegister>
    31ac:	8e 15       	cp	r24, r14
    31ae:	9f 05       	cpc	r25, r15
    31b0:	d1 f3       	breq	.-12     	; 0x31a6 <Si114xParamSet+0x2e>
    31b2:	18 16       	cp	r1, r24
    31b4:	19 06       	cpc	r1, r25
    31b6:	ac f4       	brge	.+42     	; 0x31e2 <Si114xParamSet+0x6a>
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	12 c0       	rjmp	.+36     	; 0x31e2 <Si114xParamSet+0x6a>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    31be:	60 e2       	ldi	r22, 0x20	; 32
    31c0:	c8 01       	movw	r24, r16
    31c2:	b0 d3       	rcall	.+1888   	; 0x3924 <Si114xReadFromRegister>
    31c4:	7c 01       	movw	r14, r24

    buffer[0]= value;
    31c6:	c9 82       	std	Y+1, r12	; 0x01
    buffer[1]= 0xA0 + (address & 0x1F);
    31c8:	8d 2d       	mov	r24, r13
    31ca:	8f 71       	andi	r24, 0x1F	; 31
    31cc:	80 56       	subi	r24, 0x60	; 96
    31ce:	8a 83       	std	Y+2, r24	; 0x02

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    31d0:	9e 01       	movw	r18, r28
    31d2:	2f 5f       	subi	r18, 0xFF	; 255
    31d4:	3f 4f       	sbci	r19, 0xFF	; 255
    31d6:	42 e0       	ldi	r20, 0x02	; 2
    31d8:	67 e1       	ldi	r22, 0x17	; 23
    31da:	c8 01       	movw	r24, r16
    31dc:	a7 d3       	rcall	.+1870   	; 0x392c <Si114xBlockWrite>
    if (retval != 0) return retval;
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	11 f3       	breq	.-60     	; 0x31a6 <Si114xParamSet+0x2e>

    if(retval < 0)
        return retval;
    else
        return 0;
}
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	df 91       	pop	r29
    31e8:	cf 91       	pop	r28
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	ff 90       	pop	r15
    31f0:	ef 90       	pop	r14
    31f2:	df 90       	pop	r13
    31f4:	cf 90       	pop	r12
    31f6:	08 95       	ret

000031f8 <Si114xPauseAll>:
{
    return _sendCmd(si114x_handle,0x0B);
}

s16 Si114xPauseAll(HANDLE si114x_handle)
{
    31f8:	cf 93       	push	r28
    31fa:	df 93       	push	r29
    31fc:	ec 01       	movw	r28, r24
    while (1) 
    {
        // Keep sending nops until the response is zero
        while (1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    31fe:	60 e2       	ldi	r22, 0x20	; 32
    3200:	ce 01       	movw	r24, r28
    3202:	90 d3       	rcall	.+1824   	; 0x3924 <Si114xReadFromRegister>
    3204:	89 2b       	or	r24, r25
    3206:	19 f0       	breq	.+6      	; 0x320e <Si114xPauseAll+0x16>
                break;
            else 
                Si114xNop(si114x_handle);
    3208:	ce 01       	movw	r24, r28
    320a:	b0 df       	rcall	.-160    	; 0x316c <Si114xNop>
        }
    320c:	f8 cf       	rjmp	.-16     	; 0x31fe <Si114xPauseAll+0x6>

//-----------------------------------------------------------------------------
// use this to pause measurements
static s16 _PsAlsPause (HANDLE si114x_handle) 
{
    return _sendCmd(si114x_handle,0x0B);
    320e:	6b e0       	ldi	r22, 0x0B	; 11
    3210:	ce 01       	movw	r24, r28
    3212:	fc de       	rcall	.-520    	; 0x300c <_sendCmd>
        _PsAlsPause(si114x_handle);

        // Wait for response
        while(1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    3214:	60 e2       	ldi	r22, 0x20	; 32
    3216:	ce 01       	movw	r24, r28
    3218:	85 d3       	rcall	.+1802   	; 0x3924 <Si114xReadFromRegister>
    321a:	89 2b       	or	r24, r25
    321c:	d9 f3       	breq	.-10     	; 0x3214 <Si114xPauseAll+0x1c>
                break;
        }

        // When the PsAlsPause() response is good, we expect it to be a '1'.
        if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
    321e:	60 e2       	ldi	r22, 0x20	; 32
    3220:	ce 01       	movw	r24, r28
    3222:	80 d3       	rcall	.+1792   	; 0x3924 <Si114xReadFromRegister>
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	59 f7       	brne	.-42     	; 0x31fe <Si114xPauseAll+0x6>
            break;  // otherwise, start over.
    }
    return 0;
}
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	08 95       	ret

00003232 <si114x_reset>:
    return 0;
}


s16 si114x_reset(HANDLE si114x_handle)
{
    3232:	0f 93       	push	r16
    3234:	1f 93       	push	r17
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	ec 01       	movw	r28, r24
    //
    // delay_10ms();
    // delay_10ms();
    // delay_10ms();

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    323c:	40 e0       	ldi	r20, 0x00	; 0
    323e:	68 e0       	ldi	r22, 0x08	; 8
    3240:	6d d3       	rcall	.+1754   	; 0x391c <Si114xWriteToRegister>
    3242:	8c 01       	movw	r16, r24
    retval+=Si114xPauseAll(si114x_handle);
    3244:	ce 01       	movw	r24, r28
    3246:	d8 df       	rcall	.-80     	; 0x31f8 <Si114xPauseAll>
    3248:	08 0f       	add	r16, r24
    324a:	19 1f       	adc	r17, r25

    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    324c:	40 e0       	ldi	r20, 0x00	; 0
    324e:	68 e0       	ldi	r22, 0x08	; 8
    3250:	ce 01       	movw	r24, r28
    3252:	64 d3       	rcall	.+1736   	; 0x391c <Si114xWriteToRegister>
    3254:	08 0f       	add	r16, r24
    3256:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    3258:	40 e0       	ldi	r20, 0x00	; 0
    325a:	64 e0       	ldi	r22, 0x04	; 4
    325c:	ce 01       	movw	r24, r28
    325e:	5e d3       	rcall	.+1724   	; 0x391c <Si114xWriteToRegister>
    3260:	08 0f       	add	r16, r24
    3262:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    3264:	40 e0       	ldi	r20, 0x00	; 0
    3266:	65 e0       	ldi	r22, 0x05	; 5
    3268:	ce 01       	movw	r24, r28
    326a:	58 d3       	rcall	.+1712   	; 0x391c <Si114xWriteToRegister>
    326c:	08 0f       	add	r16, r24
    326e:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    3270:	40 e0       	ldi	r20, 0x00	; 0
    3272:	66 e0       	ldi	r22, 0x06	; 6
    3274:	ce 01       	movw	r24, r28
    3276:	52 d3       	rcall	.+1700   	; 0x391c <Si114xWriteToRegister>
    3278:	08 0f       	add	r16, r24
    327a:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    327c:	40 e0       	ldi	r20, 0x00	; 0
    327e:	63 e0       	ldi	r22, 0x03	; 3
    3280:	ce 01       	movw	r24, r28
    3282:	4c d3       	rcall	.+1688   	; 0x391c <Si114xWriteToRegister>
    3284:	08 0f       	add	r16, r24
    3286:	19 1f       	adc	r17, r25
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
    3288:	4f ef       	ldi	r20, 0xFF	; 255
    328a:	61 e2       	ldi	r22, 0x21	; 33
    328c:	ce 01       	movw	r24, r28
    328e:	46 d3       	rcall	.+1676   	; 0x391c <Si114xWriteToRegister>
    3290:	08 0f       	add	r16, r24
    3292:	19 1f       	adc	r17, r25

    // Perform the Reset Command
    retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
    3294:	41 e0       	ldi	r20, 0x01	; 1
    3296:	68 e1       	ldi	r22, 0x18	; 24
    3298:	ce 01       	movw	r24, r28
    329a:	40 d3       	rcall	.+1664   	; 0x391c <Si114xWriteToRegister>
    329c:	08 0f       	add	r16, r24
    329e:	19 1f       	adc	r17, r25

    // Delay for 10 ms. This delay is needed to allow the Si114x
    // to perform internal reset sequence. 
    delay_10ms();
    32a0:	4c d3       	rcall	.+1688   	; 0x393a <delay_10ms>

    // Write Hardware Key
    retval+=Si114xWriteToRegister(si114x_handle, REG_HW_KEY, HW_KEY_VAL0);
    32a2:	47 e1       	ldi	r20, 0x17	; 23
    32a4:	67 e0       	ldi	r22, 0x07	; 7
    32a6:	ce 01       	movw	r24, r28
    32a8:	39 d3       	rcall	.+1650   	; 0x391c <Si114xWriteToRegister>

    return retval;
}
    32aa:	80 0f       	add	r24, r16
    32ac:	91 1f       	adc	r25, r17
    32ae:	df 91       	pop	r29
    32b0:	cf 91       	pop	r28
    32b2:	1f 91       	pop	r17
    32b4:	0f 91       	pop	r16
    32b6:	08 95       	ret

000032b8 <si114x_init>:
	
	sensor_data->vis = reg01;
}

s16 si114x_init(HANDLE si114x_handle)
{
    32b8:	0f 93       	push	r16
    32ba:	1f 93       	push	r17
    32bc:	cf 93       	push	r28
    32be:	df 93       	push	r29
    32c0:	ec 01       	movw	r28, r24
	u8  code ps2ledsel     = LED2_EN;
	u8  code ps3ledsel     = LED3_EN;


	// Turn off RTC
	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,     0 );
    32c2:	40 e0       	ldi	r20, 0x00	; 0
    32c4:	68 e0       	ldi	r22, 0x08	; 8
    32c6:	2a d3       	rcall	.+1620   	; 0x391c <Si114xWriteToRegister>
    32c8:	8c 01       	movw	r16, r24
	retval+=Si114xWriteToRegister(si114x_handle, REG_PS_RATE,       0 );
    32ca:	40 e0       	ldi	r20, 0x00	; 0
    32cc:	6a e0       	ldi	r22, 0x0A	; 10
    32ce:	ce 01       	movw	r24, r28
    32d0:	25 d3       	rcall	.+1610   	; 0x391c <Si114xWriteToRegister>
    32d2:	08 0f       	add	r16, r24
    32d4:	19 1f       	adc	r17, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE,      0 );
    32d6:	40 e0       	ldi	r20, 0x00	; 0
    32d8:	69 e0       	ldi	r22, 0x09	; 9
    32da:	ce 01       	movw	r24, r28
    32dc:	1f d3       	rcall	.+1598   	; 0x391c <Si114xWriteToRegister>
    32de:	08 0f       	add	r16, r24
    32e0:	19 1f       	adc	r17, r25
	//     1. Pauses all prior measurements
	//     2. Clear  i2c registers that need to be cleared
	//     3. Clears irq status to make sure INT* is negated
	//     4. Delays 10 ms
	//     5. Sends HW Key
	retval+=si114x_reset(si114x_handle);
    32e2:	ce 01       	movw	r24, r28
    32e4:	a6 df       	rcall	.-180    	; 0x3232 <si114x_reset>
    32e6:	08 0f       	add	r16, r24
    32e8:	19 1f       	adc	r17, r25
	{
		u8 i21, i3;

		i21 = (current_LED2<<4) + current_LED1;
		i3  = current_LED3;
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_LED21, i21);
    32ea:	45 e5       	ldi	r20, 0x55	; 85
    32ec:	6f e0       	ldi	r22, 0x0F	; 15
    32ee:	ce 01       	movw	r24, r28
    32f0:	15 d3       	rcall	.+1578   	; 0x391c <Si114xWriteToRegister>
    32f2:	08 0f       	add	r16, r24
    32f4:	19 1f       	adc	r17, r25
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_LED3 , i3);
    32f6:	45 e0       	ldi	r20, 0x05	; 5
    32f8:	60 e1       	ldi	r22, 0x10	; 16
    32fa:	ce 01       	movw	r24, r28
    32fc:	0f d3       	rcall	.+1566   	; 0x391c <Si114xWriteToRegister>
    32fe:	08 0f       	add	r16, r24
    3300:	19 1f       	adc	r17, r25
	// Valid Tasks are: ALS_VIS_TASK, ALS_IR_TASK, PS1_TASK
	//                  PS2_TASK, PS3_TASK and AUX_TASK
	// However, if we are passed a 'negative' task, we will
	// turn on ALS_IR, ALS_VIS and PS1. Otherwise, we will use the
	// task list specified by the caller.
	retval+=Si114xParamSet(si114x_handle, PARAM_CH_LIST, tasklist);
    3302:	47 e7       	ldi	r20, 0x77	; 119
    3304:	61 e0       	ldi	r22, 0x01	; 1
    3306:	ce 01       	movw	r24, r28
    3308:	37 df       	rcall	.-402    	; 0x3178 <Si114xParamSet>
    330a:	08 0f       	add	r16, r24
    330c:	19 1f       	adc	r17, r25
	
	// Set IRQ Modes and INT CFG to interrupt on every sample
	retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG, ICG_INTOE);
    330e:	41 e0       	ldi	r20, 0x01	; 1
    3310:	63 e0       	ldi	r22, 0x03	; 3
    3312:	ce 01       	movw	r24, r28
    3314:	03 d3       	rcall	.+1542   	; 0x391c <Si114xWriteToRegister>
    3316:	08 0f       	add	r16, r24
    3318:	19 1f       	adc	r17, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE,
    331a:	4d e1       	ldi	r20, 0x1D	; 29
    331c:	64 e0       	ldi	r22, 0x04	; 4
    331e:	ce 01       	movw	r24, r28
    3320:	fd d2       	rcall	.+1530   	; 0x391c <Si114xWriteToRegister>
    3322:	08 0f       	add	r16, r24
    3324:	19 1f       	adc	r17, r25
	IE_ALS_EVRYSAMPLE +
	IE_PS1_EVRYSAMPLE +
	IE_PS2_EVRYSAMPLE +
	IE_PS3_EVRYSAMPLE );

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,
    3326:	40 e0       	ldi	r20, 0x00	; 0
    3328:	65 e0       	ldi	r22, 0x05	; 5
    332a:	ce 01       	movw	r24, r28
    332c:	f7 d2       	rcall	.+1518   	; 0x391c <Si114xWriteToRegister>
    332e:	08 0f       	add	r16, r24
    3330:	19 1f       	adc	r17, r25
	IM1_ALS_EVRYSAMPLE +
	IM1_PS1_EVRYSAMPLE +
	IM1_PS2_EVRYSAMPLE );

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,
    3332:	40 e0       	ldi	r20, 0x00	; 0
    3334:	66 e0       	ldi	r22, 0x06	; 6
    3336:	ce 01       	movw	r24, r28
    3338:	f1 d2       	rcall	.+1506   	; 0x391c <Si114xWriteToRegister>
    333a:	08 0f       	add	r16, r24
    333c:	19 1f       	adc	r17, r25
	IM2_PS3_EVRYSAMPLE);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x03*ps1pdsize);
    333e:	43 e0       	ldi	r20, 0x03	; 3
    3340:	67 e0       	ldi	r22, 0x07	; 7
    3342:	ce 01       	movw	r24, r28
    3344:	19 df       	rcall	.-462    	; 0x3178 <Si114xParamSet>
    3346:	08 0f       	add	r16, r24
    3348:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x03*ps2pdsize);
    334a:	43 e0       	ldi	r20, 0x03	; 3
    334c:	68 e0       	ldi	r22, 0x08	; 8
    334e:	ce 01       	movw	r24, r28
    3350:	13 df       	rcall	.-474    	; 0x3178 <Si114xParamSet>
    3352:	08 0f       	add	r16, r24
    3354:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x03*ps3pdsize);
    3356:	43 e0       	ldi	r20, 0x03	; 3
    3358:	69 e0       	ldi	r22, 0x09	; 9
    335a:	ce 01       	movw	r24, r28
    335c:	0d df       	rcall	.-486    	; 0x3178 <Si114xParamSet>
    335e:	08 0f       	add	r16, r24
    3360:	19 1f       	adc	r17, r25

	retval+=Si114xParamSet(si114x_handle, PARAM_IR_ADC_MUX,  0x03*irpd);
    3362:	43 e0       	ldi	r20, 0x03	; 3
    3364:	6e e0       	ldi	r22, 0x0E	; 14
    3366:	ce 01       	movw	r24, r28
    3368:	07 df       	rcall	.-498    	; 0x3178 <Si114xParamSet>
    336a:	08 0f       	add	r16, r24
    336c:	19 1f       	adc	r17, r25

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
    336e:	40 e0       	ldi	r20, 0x00	; 0
    3370:	6b e0       	ldi	r22, 0x0B	; 11
    3372:	ce 01       	movw	r24, r28
    3374:	01 df       	rcall	.-510    	; 0x3178 <Si114xParamSet>
    3376:	08 0f       	add	r16, r24
    3378:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_GAIN, irgain);
    337a:	40 e0       	ldi	r20, 0x00	; 0
    337c:	6e e1       	ldi	r22, 0x1E	; 30
    337e:	ce 01       	movw	r24, r28
    3380:	fb de       	rcall	.-522    	; 0x3178 <Si114xParamSet>
    3382:	08 0f       	add	r16, r24
    3384:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_GAIN, visgain);
    3386:	40 e0       	ldi	r20, 0x00	; 0
    3388:	61 e1       	ldi	r22, 0x11	; 17
    338a:	ce 01       	movw	r24, r28
    338c:	f5 de       	rcall	.-534    	; 0x3178 <Si114xParamSet>
    338e:	08 0f       	add	r16, r24
    3390:	19 1f       	adc	r17, r25
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
    3392:	41 e2       	ldi	r20, 0x21	; 33
    3394:	62 e0       	ldi	r22, 0x02	; 2
    3396:	ce 01       	movw	r24, r28
    3398:	ef de       	rcall	.-546    	; 0x3178 <Si114xParamSet>
    339a:	08 0f       	add	r16, r24
    339c:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED3_SELECT,  ps3ledsel);
    339e:	44 e0       	ldi	r20, 0x04	; 4
    33a0:	63 e0       	ldi	r22, 0x03	; 3
    33a2:	ce 01       	movw	r24, r28
    33a4:	e9 de       	rcall	.-558    	; 0x3178 <Si114xParamSet>
    33a6:	08 0f       	add	r16, r24
    33a8:	19 1f       	adc	r17, r25
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
    33aa:	40 e7       	ldi	r20, 0x70	; 112
    33ac:	6a e0       	ldi	r22, 0x0A	; 10
    33ae:	ce 01       	movw	r24, r28
    33b0:	e3 de       	rcall	.-570    	; 0x3178 <Si114xParamSet>
    33b2:	08 0f       	add	r16, r24
    33b4:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
    33b6:	40 e7       	ldi	r20, 0x70	; 112
    33b8:	6d e1       	ldi	r22, 0x1D	; 29
    33ba:	ce 01       	movw	r24, r28
    33bc:	dd de       	rcall	.-582    	; 0x3178 <Si114xParamSet>
    33be:	08 0f       	add	r16, r24
    33c0:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_COUNTER, RECCNT_511);
    33c2:	40 e7       	ldi	r20, 0x70	; 112
    33c4:	60 e1       	ldi	r22, 0x10	; 16
    33c6:	ce 01       	movw	r24, r28
    33c8:	d7 de       	rcall	.-594    	; 0x3178 <Si114xParamSet>
    33ca:	08 0f       	add	r16, r24
    33cc:	19 1f       	adc	r17, r25

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC,     RANGE_EN*psrange + PS_MEAS_MODE);
    33ce:	44 e0       	ldi	r20, 0x04	; 4
    33d0:	6c e0       	ldi	r22, 0x0C	; 12
    33d2:	ce 01       	movw	r24, r28
    33d4:	d1 de       	rcall	.-606    	; 0x3178 <Si114xParamSet>
    33d6:	08 0f       	add	r16, r24
    33d8:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN*irrange );
    33da:	40 e2       	ldi	r20, 0x20	; 32
    33dc:	6f e1       	ldi	r22, 0x1F	; 31
    33de:	ce 01       	movw	r24, r28
    33e0:	cb de       	rcall	.-618    	; 0x3178 <Si114xParamSet>
    33e2:	08 0f       	add	r16, r24
    33e4:	19 1f       	adc	r17, r25
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_MISC,RANGE_EN*visrange);
    33e6:	40 e2       	ldi	r20, 0x20	; 32
    33e8:	62 e1       	ldi	r22, 0x12	; 18
    33ea:	ce 01       	movw	r24, r28
    33ec:	c5 de       	rcall	.-630    	; 0x3178 <Si114xParamSet>
    33ee:	08 0f       	add	r16, r24
    33f0:	19 1f       	adc	r17, r25
		//    0xa0 = Device Wakes up every ~30 ms
		//    0x94 = Device Wakes up every ~20 ms
		//    0x84 = Device Wakes up every ~10 ms
		//    0xB9 = Device Wakes up every ~100 ms
		//    0xFF = Device Wakes up every ~2 sec
		retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE, measrate);
    33f2:	40 e6       	ldi	r20, 0x60	; 96
    33f4:	68 e0       	ldi	r22, 0x08	; 8
    33f6:	ce 01       	movw	r24, r28
    33f8:	91 d2       	rcall	.+1314   	; 0x391c <Si114xWriteToRegister>
    33fa:	08 0f       	add	r16, r24
    33fc:	19 1f       	adc	r17, r25

		// if 0x08, PS1, PS2 and PS3 made every time device wakes up.
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_RATE,   psrate);
    33fe:	48 e0       	ldi	r20, 0x08	; 8
    3400:	6a e0       	ldi	r22, 0x0A	; 10
    3402:	ce 01       	movw	r24, r28
    3404:	8b d2       	rcall	.+1302   	; 0x391c <Si114xWriteToRegister>
    3406:	08 0f       	add	r16, r24
    3408:	19 1f       	adc	r17, r25

		// if 0x08, VIS, IR, AUX Measurements every time device wakes up.
		retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE,  alsrate);
    340a:	48 e0       	ldi	r20, 0x08	; 8
    340c:	69 e0       	ldi	r22, 0x09	; 9
    340e:	ce 01       	movw	r24, r28
    3410:	85 d2       	rcall	.+1290   	; 0x391c <Si114xWriteToRegister>
    3412:	08 0f       	add	r16, r24
    3414:	19 1f       	adc	r17, r25

		// Enable Autonomous Operation
		retval+=Si114xPsAlsAuto(si114x_handle);
    3416:	ce 01       	movw	r24, r28
    3418:	ac de       	rcall	.-680    	; 0x3172 <Si114xPsAlsAuto>
		// If nothing went wrong after all of this time, the value
		// returned will be 0. Otherwise, it will be some negative
		// number
	}
	return retval;
}
    341a:	80 0f       	add	r24, r16
    341c:	91 1f       	adc	r25, r17
    341e:	df 91       	pop	r29
    3420:	cf 91       	pop	r28
    3422:	1f 91       	pop	r17
    3424:	0f 91       	pop	r16
    3426:	08 95       	ret

00003428 <isIRStable>:
        }
    }
}

char isIRStable( SI114X_IRQ_SAMPLE *samples)
{
    3428:	cf 92       	push	r12
    342a:	df 92       	push	r13
    342c:	ef 92       	push	r14
    342e:	ff 92       	push	r15
    3430:	0f 93       	push	r16
    3432:	1f 93       	push	r17
                                        //
    u32 xdata IR = (u32) samples->ir; // Make a copy of ALS IR Reading
    
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 
    3434:	40 91 b8 21 	lds	r20, 0x21B8
    3438:	50 91 b9 21 	lds	r21, 0x21B9
    343c:	60 91 ba 21 	lds	r22, 0x21BA
    3440:	70 91 bb 21 	lds	r23, 0x21BB
    3444:	45 2b       	or	r20, r21
    3446:	46 2b       	or	r20, r22
    3448:	47 2b       	or	r20, r23
    344a:	71 f4       	brne	.+28     	; 0x3468 <isIRStable+0x40>
    344c:	fc 01       	movw	r30, r24
    344e:	40 85       	ldd	r20, Z+8	; 0x08
    3450:	51 85       	ldd	r21, Z+9	; 0x09
    3452:	60 e0       	ldi	r22, 0x00	; 0
    3454:	70 e0       	ldi	r23, 0x00	; 0
    3456:	40 93 b8 21 	sts	0x21B8, r20
    345a:	50 93 b9 21 	sts	0x21B9, r21
    345e:	60 93 ba 21 	sts	0x21BA, r22
    3462:	70 93 bb 21 	sts	0x21BB, r23
    3466:	07 c0       	rjmp	.+14     	; 0x3476 <isIRStable+0x4e>

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    3468:	fc 01       	movw	r30, r24
    346a:	20 85       	ldd	r18, Z+8	; 0x08
    346c:	31 85       	ldd	r19, Z+9	; 0x09
    346e:	21 38       	cpi	r18, 0x81	; 129
    3470:	3b 4b       	sbci	r19, 0xBB	; 187
    3472:	08 f0       	brcs	.+2      	; 0x3476 <isIRStable+0x4e>
    3474:	53 c0       	rjmp	.+166    	; 0x351c <isIRStable+0xf4>

    if( samples->ir < (IRlast + IRlast/2) && samples->ir > (IRlast - IRlast/2))
    3476:	fc 01       	movw	r30, r24
    3478:	40 85       	ldd	r20, Z+8	; 0x08
    347a:	51 85       	ldd	r21, Z+9	; 0x09
    347c:	60 e0       	ldi	r22, 0x00	; 0
    347e:	70 e0       	ldi	r23, 0x00	; 0
    3480:	80 91 b8 21 	lds	r24, 0x21B8
    3484:	90 91 b9 21 	lds	r25, 0x21B9
    3488:	a0 91 ba 21 	lds	r26, 0x21BA
    348c:	b0 91 bb 21 	lds	r27, 0x21BB
    3490:	8c 01       	movw	r16, r24
    3492:	9d 01       	movw	r18, r26
    3494:	36 95       	lsr	r19
    3496:	27 95       	ror	r18
    3498:	17 95       	ror	r17
    349a:	07 95       	ror	r16
    349c:	68 01       	movw	r12, r16
    349e:	79 01       	movw	r14, r18
    34a0:	c8 0e       	add	r12, r24
    34a2:	d9 1e       	adc	r13, r25
    34a4:	ea 1e       	adc	r14, r26
    34a6:	fb 1e       	adc	r15, r27
    34a8:	4c 15       	cp	r20, r12
    34aa:	5d 05       	cpc	r21, r13
    34ac:	6e 05       	cpc	r22, r14
    34ae:	7f 05       	cpc	r23, r15
    34b0:	58 f5       	brcc	.+86     	; 0x3508 <isIRStable+0xe0>
    34b2:	6c 01       	movw	r12, r24
    34b4:	7d 01       	movw	r14, r26
    34b6:	c0 1a       	sub	r12, r16
    34b8:	d1 0a       	sbc	r13, r17
    34ba:	e2 0a       	sbc	r14, r18
    34bc:	f3 0a       	sbc	r15, r19
    34be:	c4 16       	cp	r12, r20
    34c0:	d5 06       	cpc	r13, r21
    34c2:	e6 06       	cpc	r14, r22
    34c4:	f7 06       	cpc	r15, r23
    34c6:	00 f5       	brcc	.+64     	; 0x3508 <isIRStable+0xe0>
    {
        // If IR is within 3 dB, declare it stable
        // and perform some averaging
        IRlast = (samples->ir + (IRlast*3)) / 4;
    34c8:	8c 01       	movw	r16, r24
    34ca:	9d 01       	movw	r18, r26
    34cc:	00 0f       	add	r16, r16
    34ce:	11 1f       	adc	r17, r17
    34d0:	22 1f       	adc	r18, r18
    34d2:	33 1f       	adc	r19, r19
    34d4:	80 0f       	add	r24, r16
    34d6:	91 1f       	adc	r25, r17
    34d8:	a2 1f       	adc	r26, r18
    34da:	b3 1f       	adc	r27, r19
    34dc:	48 0f       	add	r20, r24
    34de:	59 1f       	adc	r21, r25
    34e0:	6a 1f       	adc	r22, r26
    34e2:	7b 1f       	adc	r23, r27
    34e4:	76 95       	lsr	r23
    34e6:	67 95       	ror	r22
    34e8:	57 95       	ror	r21
    34ea:	47 95       	ror	r20
    34ec:	76 95       	lsr	r23
    34ee:	67 95       	ror	r22
    34f0:	57 95       	ror	r21
    34f2:	47 95       	ror	r20
    34f4:	40 93 b8 21 	sts	0x21B8, r20
    34f8:	50 93 b9 21 	sts	0x21B9, r21
    34fc:	60 93 ba 21 	sts	0x21BA, r22
    3500:	70 93 bb 21 	sts	0x21BB, r23
        return 1;
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	0b c0       	rjmp	.+22     	; 0x351e <isIRStable+0xf6>
    }
    else
    {
        // Otherwise, return false and update
        // new IRlast value for next time
        IRlast = samples->ir;
    3508:	40 93 b8 21 	sts	0x21B8, r20
    350c:	50 93 b9 21 	sts	0x21B9, r21
    3510:	60 93 ba 21 	sts	0x21BA, r22
    3514:	70 93 bb 21 	sts	0x21BB, r23
        return 0;
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	01 c0       	rjmp	.+2      	; 0x351e <isIRStable+0xf6>
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    351c:	80 e0       	ldi	r24, 0x00	; 0
        // new IRlast value for next time
        IRlast = samples->ir;
        return 0;
    }
    return 0;
}
    351e:	1f 91       	pop	r17
    3520:	0f 91       	pop	r16
    3522:	ff 90       	pop	r15
    3524:	ef 90       	pop	r14
    3526:	df 90       	pop	r13
    3528:	cf 90       	pop	r12
    352a:	08 95       	ret

0000352c <IRCompensation>:
//             use { 11, 33, 33 }
//          Sm PD, PSRANGE = 1 
//             use { 23, 64, 56 }
////////////////////////////////////////////////////////////////////////////////
void IRCompensation(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u8 ircorrection[])
{
    352c:	0f 93       	push	r16
    352e:	1f 93       	push	r17
    3530:	cf 93       	push	r28
    3532:	df 93       	push	r29
    3534:	eb 01       	movw	r28, r22
    // Calculate correction factor based on the ALS IR + PS reading 
    // subtracting out the 256 count offset contained in both measurements
    // Full equation comes out to:
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    3536:	88 23       	and	r24, r24
    3538:	19 f0       	breq	.+6      	; 0x3540 <IRCompensation+0x14>
    353a:	81 30       	cpi	r24, 0x01	; 1
    353c:	f9 f0       	breq	.+62     	; 0x357c <IRCompensation+0x50>
    353e:	3b c0       	rjmp	.+118    	; 0x35b6 <IRCompensation+0x8a>
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    3540:	0a 85       	ldd	r16, Y+10	; 0x0a
    3542:	1b 85       	ldd	r17, Y+11	; 0x0b
    3544:	fa 01       	movw	r30, r20
    3546:	a0 81       	ld	r26, Z
    3548:	88 85       	ldd	r24, Y+8	; 0x08
    354a:	99 85       	ldd	r25, Y+9	; 0x09
    354c:	a8 01       	movw	r20, r16
    354e:	60 e0       	ldi	r22, 0x00	; 0
    3550:	70 e0       	ldi	r23, 0x00	; 0
    3552:	48 0f       	add	r20, r24
    3554:	59 1f       	adc	r21, r25
    3556:	61 1d       	adc	r22, r1
    3558:	71 1d       	adc	r23, r1
    355a:	9a 01       	movw	r18, r20
    355c:	ab 01       	movw	r20, r22
    355e:	32 50       	subi	r19, 0x02	; 2
    3560:	41 09       	sbc	r20, r1
    3562:	51 09       	sbc	r21, r1
    3564:	b0 e0       	ldi	r27, 0x00	; 0
    3566:	51 d4       	rcall	.+2210   	; 0x3e0a <__muluhisi3>
            Correction = Correction/10000;
    3568:	20 e1       	ldi	r18, 0x10	; 16
    356a:	37 e2       	ldi	r19, 0x27	; 39
    356c:	40 e0       	ldi	r20, 0x00	; 0
    356e:	50 e0       	ldi	r21, 0x00	; 0
    3570:	15 d4       	rcall	.+2090   	; 0x3d9c <__udivmodsi4>
            samples->ps1 = samples->ps1 + Correction;    
    3572:	20 0f       	add	r18, r16
    3574:	31 1f       	adc	r19, r17
    3576:	2a 87       	std	Y+10, r18	; 0x0a
    3578:	3b 87       	std	Y+11, r19	; 0x0b
            break;
    357a:	1d c0       	rjmp	.+58     	; 0x35b6 <IRCompensation+0x8a>
        case 1:
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
    357c:	0c 85       	ldd	r16, Y+12	; 0x0c
    357e:	1d 85       	ldd	r17, Y+13	; 0x0d
    3580:	fa 01       	movw	r30, r20
    3582:	a1 81       	ldd	r26, Z+1	; 0x01
    3584:	88 85       	ldd	r24, Y+8	; 0x08
    3586:	99 85       	ldd	r25, Y+9	; 0x09
    3588:	a8 01       	movw	r20, r16
    358a:	60 e0       	ldi	r22, 0x00	; 0
    358c:	70 e0       	ldi	r23, 0x00	; 0
    358e:	48 0f       	add	r20, r24
    3590:	59 1f       	adc	r21, r25
    3592:	61 1d       	adc	r22, r1
    3594:	71 1d       	adc	r23, r1
    3596:	9a 01       	movw	r18, r20
    3598:	ab 01       	movw	r20, r22
    359a:	32 50       	subi	r19, 0x02	; 2
    359c:	41 09       	sbc	r20, r1
    359e:	51 09       	sbc	r21, r1
    35a0:	b0 e0       	ldi	r27, 0x00	; 0
    35a2:	33 d4       	rcall	.+2150   	; 0x3e0a <__muluhisi3>
            Correction = Correction/10000;
    35a4:	20 e1       	ldi	r18, 0x10	; 16
    35a6:	37 e2       	ldi	r19, 0x27	; 39
    35a8:	40 e0       	ldi	r20, 0x00	; 0
    35aa:	50 e0       	ldi	r21, 0x00	; 0
    35ac:	f7 d3       	rcall	.+2030   	; 0x3d9c <__udivmodsi4>
            samples->ps2 = samples->ps2 + Correction;            
    35ae:	20 0f       	add	r18, r16
    35b0:	31 1f       	adc	r19, r17
    35b2:	2c 87       	std	Y+12, r18	; 0x0c
    35b4:	3d 87       	std	Y+13, r19	; 0x0d
            break;
        default:
            break;
    }
}
    35b6:	df 91       	pop	r29
    35b8:	cf 91       	pop	r28
    35ba:	1f 91       	pop	r17
    35bc:	0f 91       	pop	r16
    35be:	08 95       	ret

000035c0 <calcBaseline>:
//          50  = Lg PD, PSRANGE=0, 180 mA 
//          10  = Lg PD, PSRANGE=1, 360 mA 
//          4  = Sm PD, PSRANGE=1, 360 mA 
////////////////////////////////////////////////////////////////////////////////
void calcBaseline(u8 proxChannel, SI114X_IRQ_SAMPLE *samples, u16 noise_margin)
{
    35c0:	0f 93       	push	r16
    35c2:	1f 93       	push	r17
    35c4:	cf 93       	push	r28
    35c6:	df 93       	push	r29

    static u16 xdata dynamic_baseline[2] = {0,0};//,0};

    u16 xdata *pPS;

    switch(proxChannel)
    35c8:	81 30       	cpi	r24, 0x01	; 1
    35ca:	39 f0       	breq	.+14     	; 0x35da <calcBaseline+0x1a>
    35cc:	18 f0       	brcs	.+6      	; 0x35d4 <calcBaseline+0x14>
    35ce:	82 30       	cpi	r24, 0x02	; 2
    35d0:	39 f0       	breq	.+14     	; 0x35e0 <calcBaseline+0x20>
    35d2:	09 c0       	rjmp	.+18     	; 0x35e6 <calcBaseline+0x26>
    {
        case 0:
            pPS = &samples->ps1;
    35d4:	fb 01       	movw	r30, r22
    35d6:	3a 96       	adiw	r30, 0x0a	; 10
            break;
    35d8:	1b c0       	rjmp	.+54     	; 0x3610 <calcBaseline+0x50>
        case 1:
            pPS = &samples->ps2;
    35da:	fb 01       	movw	r30, r22
    35dc:	3c 96       	adiw	r30, 0x0c	; 12
            break;
    35de:	18 c0       	rjmp	.+48     	; 0x3610 <calcBaseline+0x50>
        case 2:
            pPS = &samples->ps3;
    35e0:	fb 01       	movw	r30, r22
    35e2:	3e 96       	adiw	r30, 0x0e	; 14
            break;
    35e4:	15 c0       	rjmp	.+42     	; 0x3610 <calcBaseline+0x50>
        default:
            // Invalid Prox Channel. Reset all static variables 
            // to initial values
            average    = 0;
            dynamic_baseline[0] = 0;
    35e6:	10 92 b4 21 	sts	0x21B4, r1
    35ea:	10 92 b5 21 	sts	0x21B5, r1
            dynamic_baseline[1] = 0;
    35ee:	10 92 b6 21 	sts	0x21B6, r1
    35f2:	10 92 b7 21 	sts	0x21B7, r1
            rollingMax[0] = 0;
    35f6:	10 92 b0 21 	sts	0x21B0, r1
    35fa:	10 92 b1 21 	sts	0x21B1, r1
            rollingMax[1] = 0;
    35fe:	10 92 b2 21 	sts	0x21B2, r1
    3602:	10 92 b3 21 	sts	0x21B3, r1
            Maxcount[0]   = 0;
    3606:	10 92 ae 21 	sts	0x21AE, r1
            Maxcount[1]   = 0;
    360a:	10 92 af 21 	sts	0x21AF, r1
            return;
    360e:	cb c0       	rjmp	.+406    	; 0x37a6 <calcBaseline+0x1e6>
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	dc 01       	movw	r26, r24
    3614:	aa 0f       	add	r26, r26
    3616:	bb 1f       	adc	r27, r27
    3618:	ac 54       	subi	r26, 0x4C	; 76
    361a:	be 4d       	sbci	r27, 0xDE	; 222
    361c:	2d 91       	ld	r18, X+
    361e:	3c 91       	ld	r19, X
    3620:	23 2b       	or	r18, r19
    3622:	d9 f4       	brne	.+54     	; 0x365a <calcBaseline+0x9a>
    3624:	60 81       	ld	r22, Z
    3626:	71 81       	ldd	r23, Z+1	; 0x01
    3628:	dc 01       	movw	r26, r24
    362a:	aa 0f       	add	r26, r26
    362c:	bb 1f       	adc	r27, r27
    362e:	a4 54       	subi	r26, 0x44	; 68
    3630:	be 4d       	sbci	r27, 0xDE	; 222
    3632:	2d 91       	ld	r18, X+
    3634:	3c 91       	ld	r19, X
    3636:	62 17       	cp	r22, r18
    3638:	73 07       	cpc	r23, r19
    363a:	40 f4       	brcc	.+16     	; 0x364c <calcBaseline+0x8c>
    {
       dynamic_baseline[proxChannel] = *pPS;
    363c:	dc 01       	movw	r26, r24
    363e:	aa 0f       	add	r26, r26
    3640:	bb 1f       	adc	r27, r27
    3642:	ac 54       	subi	r26, 0x4C	; 76
    3644:	be 4d       	sbci	r27, 0xDE	; 222
    3646:	6d 93       	st	X+, r22
    3648:	7c 93       	st	X, r23
    364a:	07 c0       	rjmp	.+14     	; 0x365a <calcBaseline+0x9a>
    } else if ( dynamic_baseline[proxChannel] == 0)
    {
       dynamic_baseline[proxChannel] = maxLeakage[proxChannel];
    364c:	dc 01       	movw	r26, r24
    364e:	aa 0f       	add	r26, r26
    3650:	bb 1f       	adc	r27, r27
    3652:	ac 54       	subi	r26, 0x4C	; 76
    3654:	be 4d       	sbci	r27, 0xDE	; 222
    3656:	2d 93       	st	X+, r18
    3658:	3c 93       	st	X, r19
    } 

    // Only process samples which are below the maxLeakage values, anything 
    // higher is a signal created by an object in front of the system which 
    // should not be baselined
    if ( *pPS < maxLeakage[proxChannel] )
    365a:	60 81       	ld	r22, Z
    365c:	71 81       	ldd	r23, Z+1	; 0x01
    365e:	fc 01       	movw	r30, r24
    3660:	ee 0f       	add	r30, r30
    3662:	ff 1f       	adc	r31, r31
    3664:	e4 54       	subi	r30, 0x44	; 68
    3666:	fe 4d       	sbci	r31, 0xDE	; 222
    3668:	20 81       	ld	r18, Z
    366a:	31 81       	ldd	r19, Z+1	; 0x01
    366c:	62 17       	cp	r22, r18
    366e:	73 07       	cpc	r23, r19
    3670:	08 f0       	brcs	.+2      	; 0x3674 <calcBaseline+0xb4>
    3672:	77 c0       	rjmp	.+238    	; 0x3762 <calcBaseline+0x1a2>
    {
        average = dynamic_baseline[proxChannel]*7;
    3674:	fc 01       	movw	r30, r24
    3676:	ee 0f       	add	r30, r30
    3678:	ff 1f       	adc	r31, r31
    367a:	ec 54       	subi	r30, 0x4C	; 76
    367c:	fe 4d       	sbci	r31, 0xDE	; 222
    367e:	01 90       	ld	r0, Z+
    3680:	f0 81       	ld	r31, Z
    3682:	e0 2d       	mov	r30, r0
    3684:	df 01       	movw	r26, r30
    3686:	aa 0f       	add	r26, r26
    3688:	bb 1f       	adc	r27, r27
    368a:	aa 0f       	add	r26, r26
    368c:	bb 1f       	adc	r27, r27
    368e:	aa 0f       	add	r26, r26
    3690:	bb 1f       	adc	r27, r27
    3692:	ae 1b       	sub	r26, r30
    3694:	bf 0b       	sbc	r27, r31
        average = average + (u32)(*pPS);
    3696:	8b 01       	movw	r16, r22
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	0a 0f       	add	r16, r26
    369e:	1b 1f       	adc	r17, r27
    36a0:	21 1d       	adc	r18, r1
    36a2:	31 1d       	adc	r19, r1
        average = average/8;
    36a4:	68 94       	set
    36a6:	12 f8       	bld	r1, 2
    36a8:	36 95       	lsr	r19
    36aa:	27 95       	ror	r18
    36ac:	17 95       	ror	r17
    36ae:	07 95       	ror	r16
    36b0:	16 94       	lsr	r1
    36b2:	d1 f7       	brne	.-12     	; 0x36a8 <calcBaseline+0xe8>
        // If the new sample has not changed the baseline average by a large 
        // amount, then allow the rollingMax variable to update. If the new 
        // sample did move the baseline average by a lot, then it's possible 
        // it was created by a proximity event. So, do not consider this part 
        // of the rollingMax
        if ( dynamic_baseline[proxChannel] <= (u16)average + (u16)average/64
    36b4:	d8 01       	movw	r26, r16
    36b6:	00 24       	eor	r0, r0
    36b8:	aa 0f       	add	r26, r26
    36ba:	bb 1f       	adc	r27, r27
    36bc:	00 1c       	adc	r0, r0
    36be:	aa 0f       	add	r26, r26
    36c0:	bb 1f       	adc	r27, r27
    36c2:	00 1c       	adc	r0, r0
    36c4:	ab 2f       	mov	r26, r27
    36c6:	b0 2d       	mov	r27, r0
    36c8:	ed 01       	movw	r28, r26
    36ca:	c0 0f       	add	r28, r16
    36cc:	d1 1f       	adc	r29, r17
    36ce:	ce 17       	cp	r28, r30
    36d0:	df 07       	cpc	r29, r31
    36d2:	08 f4       	brcc	.+2      	; 0x36d6 <calcBaseline+0x116>
    36d4:	3f c0       	rjmp	.+126    	; 0x3754 <calcBaseline+0x194>
            && dynamic_baseline[proxChannel] >= (u16)average - (u16)average/64)
    36d6:	e8 01       	movw	r28, r16
    36d8:	ca 1b       	sub	r28, r26
    36da:	db 0b       	sbc	r29, r27
    36dc:	ec 17       	cp	r30, r28
    36de:	fd 07       	cpc	r31, r29
    36e0:	c8 f1       	brcs	.+114    	; 0x3754 <calcBaseline+0x194>
        {
            if ( rollingMax[proxChannel] == 0 )
    36e2:	fc 01       	movw	r30, r24
    36e4:	ee 0f       	add	r30, r30
    36e6:	ff 1f       	adc	r31, r31
    36e8:	e0 55       	subi	r30, 0x50	; 80
    36ea:	fe 4d       	sbci	r31, 0xDE	; 222
    36ec:	01 90       	ld	r0, Z+
    36ee:	f0 81       	ld	r31, Z
    36f0:	e0 2d       	mov	r30, r0
    36f2:	30 97       	sbiw	r30, 0x00	; 0
    36f4:	61 f4       	brne	.+24     	; 0x370e <calcBaseline+0x14e>
            {
                rollingMax[proxChannel] = *pPS;
    36f6:	fc 01       	movw	r30, r24
    36f8:	ee 0f       	add	r30, r30
    36fa:	ff 1f       	adc	r31, r31
    36fc:	e0 55       	subi	r30, 0x50	; 80
    36fe:	fe 4d       	sbci	r31, 0xDE	; 222
    3700:	60 83       	st	Z, r22
    3702:	71 83       	std	Z+1, r23	; 0x01
                Maxcount[proxChannel] = 0;
    3704:	fc 01       	movw	r30, r24
    3706:	e2 55       	subi	r30, 0x52	; 82
    3708:	fe 4d       	sbci	r31, 0xDE	; 222
    370a:	10 82       	st	Z, r1
    370c:	23 c0       	rjmp	.+70     	; 0x3754 <calcBaseline+0x194>
            } 
            else if ( rollingMax[proxChannel] >= *pPS )
    370e:	e6 17       	cp	r30, r22
    3710:	f7 07       	cpc	r31, r23
    3712:	a8 f0       	brcs	.+42     	; 0x373e <calcBaseline+0x17e>
            {
                (Maxcount[proxChannel]) += 1;
    3714:	dc 01       	movw	r26, r24
    3716:	a2 55       	subi	r26, 0x52	; 82
    3718:	be 4d       	sbci	r27, 0xDE	; 222
    371a:	6c 91       	ld	r22, X
    371c:	6f 5f       	subi	r22, 0xFF	; 255
    371e:	6c 93       	st	X, r22
                if ( Maxcount[proxChannel] > 64 )
    3720:	61 34       	cpi	r22, 0x41	; 65
    3722:	c0 f0       	brcs	.+48     	; 0x3754 <calcBaseline+0x194>
                {
                    (rollingMax[proxChannel]) -= 1;
    3724:	dc 01       	movw	r26, r24
    3726:	aa 0f       	add	r26, r26
    3728:	bb 1f       	adc	r27, r27
    372a:	a0 55       	subi	r26, 0x50	; 80
    372c:	be 4d       	sbci	r27, 0xDE	; 222
    372e:	31 97       	sbiw	r30, 0x01	; 1
    3730:	ed 93       	st	X+, r30
    3732:	fc 93       	st	X, r31
                    Maxcount[proxChannel] = 0;
    3734:	fc 01       	movw	r30, r24
    3736:	e2 55       	subi	r30, 0x52	; 82
    3738:	fe 4d       	sbci	r31, 0xDE	; 222
    373a:	10 82       	st	Z, r1
    373c:	0b c0       	rjmp	.+22     	; 0x3754 <calcBaseline+0x194>
                }
            } 
            else
            {
                rollingMax[proxChannel] = *pPS;
    373e:	fc 01       	movw	r30, r24
    3740:	ee 0f       	add	r30, r30
    3742:	ff 1f       	adc	r31, r31
    3744:	e0 55       	subi	r30, 0x50	; 80
    3746:	fe 4d       	sbci	r31, 0xDE	; 222
    3748:	60 83       	st	Z, r22
    374a:	71 83       	std	Z+1, r23	; 0x01
                Maxcount[proxChannel] = 0;
    374c:	fc 01       	movw	r30, r24
    374e:	e2 55       	subi	r30, 0x52	; 82
    3750:	fe 4d       	sbci	r31, 0xDE	; 222
    3752:	10 82       	st	Z, r1
            }
        }

        // Update the stored baseline average with the new value
        dynamic_baseline[proxChannel] = (u16)average;
    3754:	fc 01       	movw	r30, r24
    3756:	ee 0f       	add	r30, r30
    3758:	ff 1f       	adc	r31, r31
    375a:	ec 54       	subi	r30, 0x4C	; 76
    375c:	fe 4d       	sbci	r31, 0xDE	; 222
    375e:	00 83       	st	Z, r16
    3760:	11 83       	std	Z+1, r17	; 0x01
    }

    // Use the rollingMax value to determine the baseline level
    if ( rollingMax[proxChannel] != 0 )
    3762:	fc 01       	movw	r30, r24
    3764:	ee 0f       	add	r30, r30
    3766:	ff 1f       	adc	r31, r31
    3768:	e0 55       	subi	r30, 0x50	; 80
    376a:	fe 4d       	sbci	r31, 0xDE	; 222
    376c:	20 81       	ld	r18, Z
    376e:	31 81       	ldd	r19, Z+1	; 0x01
    3770:	21 15       	cp	r18, r1
    3772:	31 05       	cpc	r19, r1
    3774:	51 f0       	breq	.+20     	; 0x378a <calcBaseline+0x1ca>
    {
        baseline[proxChannel] = rollingMax[proxChannel] + noise_margin;
    3776:	fc 01       	movw	r30, r24
    3778:	ee 0f       	add	r30, r30
    377a:	ff 1f       	adc	r31, r31
    377c:	e2 59       	subi	r30, 0x92	; 146
    377e:	f1 4d       	sbci	r31, 0xD1	; 209
    3780:	42 0f       	add	r20, r18
    3782:	53 1f       	adc	r21, r19
    3784:	40 83       	st	Z, r20
    3786:	51 83       	std	Z+1, r21	; 0x01
    3788:	0e c0       	rjmp	.+28     	; 0x37a6 <calcBaseline+0x1e6>
    } 
    else
    {  // If the rollingMax has not been determined yet, use the average
        baseline[proxChannel] = (u16) dynamic_baseline[proxChannel] + noise_margin;
    378a:	88 0f       	add	r24, r24
    378c:	99 1f       	adc	r25, r25
    378e:	fc 01       	movw	r30, r24
    3790:	e2 59       	subi	r30, 0x92	; 146
    3792:	f1 4d       	sbci	r31, 0xD1	; 209
    3794:	dc 01       	movw	r26, r24
    3796:	ac 54       	subi	r26, 0x4C	; 76
    3798:	be 4d       	sbci	r27, 0xDE	; 222
    379a:	8d 91       	ld	r24, X+
    379c:	9c 91       	ld	r25, X
    379e:	48 0f       	add	r20, r24
    37a0:	59 1f       	adc	r21, r25
    37a2:	40 83       	st	Z, r20
    37a4:	51 83       	std	Z+1, r21	; 0x01
    }
}
    37a6:	df 91       	pop	r29
    37a8:	cf 91       	pop	r28
    37aa:	1f 91       	pop	r17
    37ac:	0f 91       	pop	r16
    37ae:	08 95       	ret

000037b0 <si114x_process_samples>:
u16 code scale           =  1;
u8  code ircorrection[3] =  { 17, 35, 29 };
#endif

void si114x_process_samples(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples)
{
    37b0:	0f 93       	push	r16
    37b2:	1f 93       	push	r17
    37b4:	cf 93       	push	r28
    37b6:	df 93       	push	r29
    37b8:	8c 01       	movw	r16, r24
    37ba:	eb 01       	movw	r28, r22
    if ((maxLeakage[0]==0)&&(maxLeakage[1]==0)&&(initial_baseline_counter==128))
    37bc:	20 91 bc 21 	lds	r18, 0x21BC
    37c0:	30 91 bd 21 	lds	r19, 0x21BD
    37c4:	23 2b       	or	r18, r19
    37c6:	91 f4       	brne	.+36     	; 0x37ec <si114x_process_samples+0x3c>
    37c8:	80 91 be 21 	lds	r24, 0x21BE
    37cc:	90 91 bf 21 	lds	r25, 0x21BF
    37d0:	89 2b       	or	r24, r25
    37d2:	61 f4       	brne	.+24     	; 0x37ec <si114x_process_samples+0x3c>
    37d4:	80 91 1a 20 	lds	r24, 0x201A
    37d8:	80 38       	cpi	r24, 0x80	; 128
    37da:	41 f4       	brne	.+16     	; 0x37ec <si114x_process_samples+0x3c>
    {
        printf("Computing Baseline. Make sure nothing is in the vicinity of the EVB\n");
    37dc:	83 e1       	ldi	r24, 0x13	; 19
    37de:	91 e2       	ldi	r25, 0x21	; 33
    37e0:	2f d3       	rcall	.+1630   	; 0x3e40 <puts>
        PortSet(1,0); // Turn on all lights to indicate baseline is being computed
    37e2:	60 e0       	ldi	r22, 0x00	; 0
    37e4:	70 e0       	ldi	r23, 0x00	; 0
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	97 d0       	rcall	.+302    	; 0x391a <PortSet>
    }

    if (initial_baseline_counter != 0)
    37ec:	80 91 1a 20 	lds	r24, 0x201A
    37f0:	88 23       	and	r24, r24
    37f2:	09 f4       	brne	.+2      	; 0x37f6 <si114x_process_samples+0x46>
    37f4:	5c c0       	rjmp	.+184    	; 0x38ae <si114x_process_samples+0xfe>
    {
        // The first 128 samples are used to establish the initial 
        // baseline
        if ( initial_baseline_counter > 1 )
    37f6:	82 30       	cpi	r24, 0x02	; 2
    37f8:	e0 f0       	brcs	.+56     	; 0x3832 <si114x_process_samples+0x82>
        {
            // Look for maximum
            if( maxLeakage[0] < samples->ps1) maxLeakage[0] = samples->ps1;
    37fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    37fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    37fe:	20 91 bc 21 	lds	r18, 0x21BC
    3802:	30 91 bd 21 	lds	r19, 0x21BD
    3806:	28 17       	cp	r18, r24
    3808:	39 07       	cpc	r19, r25
    380a:	20 f4       	brcc	.+8      	; 0x3814 <si114x_process_samples+0x64>
    380c:	80 93 bc 21 	sts	0x21BC, r24
    3810:	90 93 bd 21 	sts	0x21BD, r25
            if( maxLeakage[1] < samples->ps2) maxLeakage[1] = samples->ps2;
    3814:	8c 85       	ldd	r24, Y+12	; 0x0c
    3816:	9d 85       	ldd	r25, Y+13	; 0x0d
    3818:	20 91 be 21 	lds	r18, 0x21BE
    381c:	30 91 bf 21 	lds	r19, 0x21BF
    3820:	28 17       	cp	r18, r24
    3822:	39 07       	cpc	r19, r25
    3824:	08 f0       	brcs	.+2      	; 0x3828 <si114x_process_samples+0x78>
    3826:	3d c0       	rjmp	.+122    	; 0x38a2 <si114x_process_samples+0xf2>
    3828:	80 93 be 21 	sts	0x21BE, r24
    382c:	90 93 bf 21 	sts	0x21BF, r25
    3830:	38 c0       	rjmp	.+112    	; 0x38a2 <si114x_process_samples+0xf2>
        }
        else
        {
            printf("Initial Baseline Calculated, PS1 = %d, PS2 = %d \n", maxLeakage[0], maxLeakage[1]);
    3832:	ce eb       	ldi	r28, 0xBE	; 190
    3834:	d1 e2       	ldi	r29, 0x21	; 33
    3836:	89 81       	ldd	r24, Y+1	; 0x01
    3838:	8f 93       	push	r24
    383a:	88 81       	ld	r24, Y
    383c:	8f 93       	push	r24
    383e:	0c eb       	ldi	r16, 0xBC	; 188
    3840:	11 e2       	ldi	r17, 0x21	; 33
    3842:	f8 01       	movw	r30, r16
    3844:	81 81       	ldd	r24, Z+1	; 0x01
    3846:	8f 93       	push	r24
    3848:	80 81       	ld	r24, Z
    384a:	8f 93       	push	r24
    384c:	87 e5       	ldi	r24, 0x57	; 87
    384e:	91 e2       	ldi	r25, 0x21	; 33
    3850:	9f 93       	push	r25
    3852:	8f 93       	push	r24
    3854:	e4 d2       	rcall	.+1480   	; 0x3e1e <printf>
            PortSet(1,0xff); // Turn off all leds to indicate baseline computation is completed
    3856:	6f ef       	ldi	r22, 0xFF	; 255
    3858:	70 e0       	ldi	r23, 0x00	; 0
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	5d d0       	rcall	.+186    	; 0x391a <PortSet>
            // Set Max Leakage 
            maxLeakage[0] = maxLeakage[0] + noise_margin*2;
    3860:	80 91 18 20 	lds	r24, 0x2018
    3864:	90 91 19 20 	lds	r25, 0x2019
    3868:	88 0f       	add	r24, r24
    386a:	99 1f       	adc	r25, r25
    386c:	f8 01       	movw	r30, r16
    386e:	20 81       	ld	r18, Z
    3870:	31 81       	ldd	r19, Z+1	; 0x01
    3872:	28 0f       	add	r18, r24
    3874:	39 1f       	adc	r19, r25
    3876:	20 83       	st	Z, r18
    3878:	31 83       	std	Z+1, r19	; 0x01
            maxLeakage[1] = maxLeakage[1] + noise_margin*2;
    387a:	48 81       	ld	r20, Y
    387c:	59 81       	ldd	r21, Y+1	; 0x01
    387e:	84 0f       	add	r24, r20
    3880:	95 1f       	adc	r25, r21
    3882:	88 83       	st	Y, r24
    3884:	99 83       	std	Y+1, r25	; 0x01

            baseline[0] = maxLeakage[0];
    3886:	20 93 6e 2e 	sts	0x2E6E, r18
    388a:	30 93 6f 2e 	sts	0x2E6F, r19
            baseline[1] = maxLeakage[1];
    388e:	80 93 70 2e 	sts	0x2E70, r24
    3892:	90 93 71 2e 	sts	0x2E71, r25
    3896:	0f 90       	pop	r0
    3898:	0f 90       	pop	r0
    389a:	0f 90       	pop	r0
    389c:	0f 90       	pop	r0
    389e:	0f 90       	pop	r0
    38a0:	0f 90       	pop	r0
        }
        
        // Decrement counter
        initial_baseline_counter--;
    38a2:	80 91 1a 20 	lds	r24, 0x201A
    38a6:	81 50       	subi	r24, 0x01	; 1
    38a8:	80 93 1a 20 	sts	0x201A, r24
    38ac:	31 c0       	rjmp	.+98     	; 0x3910 <si114x_process_samples+0x160>
    else
    {
        //
        // Once the baseline has been set, do the actual loop
        // The first thing that happens is to check for saturation events
        if(samples->ps1 > 48000 || samples->ps2 > 48000)
    38ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    38b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    38b2:	81 38       	cpi	r24, 0x81	; 129
    38b4:	9b 4b       	sbci	r25, 0xBB	; 187
    38b6:	28 f4       	brcc	.+10     	; 0x38c2 <si114x_process_samples+0x112>
    38b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    38ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    38bc:	81 38       	cpi	r24, 0x81	; 129
    38be:	9b 4b       	sbci	r25, 0xBB	; 187
    38c0:	20 f0       	brcs	.+8      	; 0x38ca <si114x_process_samples+0x11a>
            // handle saturation events by changing ADC settings.
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
            printf("Samples are Saturated\n");
    38c2:	89 e8       	ldi	r24, 0x89	; 137
    38c4:	91 e2       	ldi	r25, 0x21	; 33
    38c6:	bc d2       	rcall	.+1400   	; 0x3e40 <puts>
    {
        //
        // Once the baseline has been set, do the actual loop
        // The first thing that happens is to check for saturation events
        if(samples->ps1 > 48000 || samples->ps2 > 48000)
        {
    38c8:	23 c0       	rjmp	.+70     	; 0x3910 <si114x_process_samples+0x160>
            //
            printf("Samples are Saturated\n");
        }
        else
        { 
            if( isIRStable( samples ) )
    38ca:	ce 01       	movw	r24, r28
    38cc:	ad dd       	rcall	.-1190   	; 0x3428 <isIRStable>
    38ce:	88 23       	and	r24, r24
    38d0:	f9 f0       	breq	.+62     	; 0x3910 <si114x_process_samples+0x160>
            {
                IRCompensation( 0, samples, ircorrection );  // IR Ambient Compensation for PS1 Channel
    38d2:	43 e1       	ldi	r20, 0x13	; 19
    38d4:	50 e2       	ldi	r21, 0x20	; 32
    38d6:	be 01       	movw	r22, r28
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	28 de       	rcall	.-944    	; 0x352c <IRCompensation>
                IRCompensation( 1, samples, ircorrection );  // IR Ambient Compensation for PS2 Channel
    38dc:	43 e1       	ldi	r20, 0x13	; 19
    38de:	50 e2       	ldi	r21, 0x20	; 32
    38e0:	be 01       	movw	r22, r28
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	23 de       	rcall	.-954    	; 0x352c <IRCompensation>

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
    38e6:	40 91 18 20 	lds	r20, 0x2018
    38ea:	50 91 19 20 	lds	r21, 0x2019
    38ee:	be 01       	movw	r22, r28
    38f0:	80 e0       	ldi	r24, 0x00	; 0
    38f2:	66 de       	rcall	.-820    	; 0x35c0 <calcBaseline>
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
    38f4:	40 91 18 20 	lds	r20, 0x2018
    38f8:	50 91 19 20 	lds	r21, 0x2019
    38fc:	be 01       	movw	r22, r28
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	5f de       	rcall	.-834    	; 0x35c0 <calcBaseline>

                SliderAlgorithm(si114x_handle, samples, scale);
    3902:	40 91 16 20 	lds	r20, 0x2016
    3906:	50 91 17 20 	lds	r21, 0x2017
    390a:	be 01       	movw	r22, r28
    390c:	c8 01       	movw	r24, r16
    390e:	de d0       	rcall	.+444    	; 0x3acc <SliderAlgorithm>

            }
        }
    }
}
    3910:	df 91       	pop	r29
    3912:	cf 91       	pop	r28
    3914:	1f 91       	pop	r17
    3916:	0f 91       	pop	r16
    3918:	08 95       	ret

0000391a <PortSet>:
                        u8 address, u8 length, u8 *values)
{
    //return PT_i2c_smbus_read_i2c_block_data(si114x_handle,
    //                       address,    length,     values);
	return i2c_read_data_block(SI114X_ADDR,address,values,length);
}
    391a:	08 95       	ret

0000391c <Si114xWriteToRegister>:
    391c:	8a e5       	ldi	r24, 0x5A	; 90
    391e:	13 db       	rcall	.-2522   	; 0x2f46 <i2c_write_data>
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	08 95       	ret

00003924 <Si114xReadFromRegister>:
    3924:	8a e5       	ldi	r24, 0x5A	; 90
    3926:	28 db       	rcall	.-2480   	; 0x2f78 <i2c_read_data>
    3928:	90 e0       	ldi	r25, 0x00	; 0
    392a:	08 95       	ret

0000392c <Si114xBlockWrite>:
    392c:	c9 01       	movw	r24, r18
    392e:	24 2f       	mov	r18, r20
    3930:	ac 01       	movw	r20, r24
    3932:	8a e5       	ldi	r24, 0x5A	; 90
    3934:	48 db       	rcall	.-2416   	; 0x2fc6 <i2c_write_data_block>
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	08 95       	ret

0000393a <delay_10ms>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    393a:	83 ec       	ldi	r24, 0xC3	; 195
    393c:	99 e0       	ldi	r25, 0x09	; 9
    393e:	01 97       	sbiw	r24, 0x01	; 1
    3940:	f1 f7       	brne	.-4      	; 0x393e <delay_10ms+0x4>
    3942:	00 c0       	rjmp	.+0      	; 0x3944 <delay_10ms+0xa>
    3944:	00 00       	nop
    3946:	08 95       	ret

00003948 <QS_Counts_to_Distance>:
// In the IR Slider, the distance between LED to sensor is the same for each of
// the two LEDs. For this reason, it is possible to have a single counts to
// distance function. 
//
s16 QS_Counts_to_Distance (u16 counts, u8 led)
{
    3948:	ff 92       	push	r15
    394a:	0f 93       	push	r16
    394c:	1f 93       	push	r17
    394e:	cf 93       	push	r28
    3950:	df 93       	push	r29
    3952:	cd b7       	in	r28, 0x3d	; 61
    3954:	de b7       	in	r29, 0x3e	; 62
    3956:	cc 56       	subi	r28, 0x6C	; 108
    3958:	d1 09       	sbc	r29, r1
    395a:	cd bf       	out	0x3d, r28	; 61
    395c:	de bf       	out	0x3e, r29	; 62
    u16 code   offset_1[9]    = {29, 72, 55, 75, 95, 131, 177, 238, 300};
    395e:	42 e1       	ldi	r20, 0x12	; 18
    3960:	ec e1       	ldi	r30, 0x1C	; 28
    3962:	f0 e2       	ldi	r31, 0x20	; 32
    3964:	de 01       	movw	r26, r28
    3966:	11 96       	adiw	r26, 0x01	; 1
    3968:	01 90       	ld	r0, Z+
    396a:	0d 92       	st	X+, r0
    396c:	4a 95       	dec	r20
    396e:	e1 f7       	brne	.-8      	; 0x3968 <QS_Counts_to_Distance+0x20>
    u16 code   slope_1[9]     = {29, 173, 102, 237, 429, 1215, 3012, 9990, 26214};	
    3970:	42 e1       	ldi	r20, 0x12	; 18
    3972:	ee e2       	ldi	r30, 0x2E	; 46
    3974:	f0 e2       	ldi	r31, 0x20	; 32
    3976:	de 01       	movw	r26, r28
    3978:	53 96       	adiw	r26, 0x13	; 19
    397a:	01 90       	ld	r0, Z+
    397c:	0d 92       	st	X+, r0
    397e:	4a 95       	dec	r20
    3980:	e1 f7       	brne	.-8      	; 0x397a <QS_Counts_to_Distance+0x32>
    u16 code   piecewise_brackets_1[9] = {19805, 16015, 9607, 6838, 3014, 1666, 578, 250, 125};	
    3982:	42 e1       	ldi	r20, 0x12	; 18
    3984:	e0 e4       	ldi	r30, 0x40	; 64
    3986:	f0 e2       	ldi	r31, 0x20	; 32
    3988:	de 01       	movw	r26, r28
    398a:	95 96       	adiw	r26, 0x25	; 37
    398c:	01 90       	ld	r0, Z+
    398e:	0d 92       	st	X+, r0
    3990:	4a 95       	dec	r20
    3992:	e1 f7       	brne	.-8      	; 0x398c <QS_Counts_to_Distance+0x44>

    u16 code   offset_2[9]    = {27, 39, 51, 75, 96, 132, 177, 236, 299};
    3994:	42 e1       	ldi	r20, 0x12	; 18
    3996:	e2 e5       	ldi	r30, 0x52	; 82
    3998:	f0 e2       	ldi	r31, 0x20	; 32
    399a:	de 01       	movw	r26, r28
    399c:	d7 96       	adiw	r26, 0x37	; 55
    399e:	01 90       	ld	r0, Z+
    39a0:	0d 92       	st	X+, r0
    39a2:	4a 95       	dec	r20
    39a4:	e1 f7       	brne	.-8      	; 0x399e <QS_Counts_to_Distance+0x56>
    u16 code   slope_2[9]     = {27, 39, 95, 298, 538, 1481, 3637, 11457, 31208};	
    39a6:	42 e1       	ldi	r20, 0x12	; 18
    39a8:	e4 e6       	ldi	r30, 0x64	; 100
    39aa:	f0 e2       	ldi	r31, 0x20	; 32
    39ac:	de 01       	movw	r26, r28
    39ae:	a7 5b       	subi	r26, 0xB7	; 183
    39b0:	bf 4f       	sbci	r27, 0xFF	; 255
    39b2:	01 90       	ld	r0, Z+
    39b4:	0d 92       	st	X+, r0
    39b6:	4a 95       	dec	r20
    39b8:	e1 f7       	brne	.-8      	; 0x39b2 <QS_Counts_to_Distance+0x6a>
    u16 code   piecewise_brackets_2[9]= {17760, 14650, 7745, 5545, 2500, 1394, 493, 207, 102};	
    39ba:	42 e1       	ldi	r20, 0x12	; 18
    39bc:	e6 e7       	ldi	r30, 0x76	; 118
    39be:	f0 e2       	ldi	r31, 0x20	; 32
    39c0:	de 01       	movw	r26, r28
    39c2:	a5 5a       	subi	r26, 0xA5	; 165
    39c4:	bf 4f       	sbci	r27, 0xFF	; 255
    39c6:	01 90       	ld	r0, Z+
    39c8:	0d 92       	st	X+, r0
    39ca:	4a 95       	dec	r20
    39cc:	e1 f7       	brne	.-8      	; 0x39c6 <QS_Counts_to_Distance+0x7e>

    u8 code   maxIndex = 9;
    u8 xdata   indexLinear;
    uu32 xdata distance;

    if(led==1)      
    39ce:	61 30       	cpi	r22, 0x01	; 1
    39d0:	79 f5       	brne	.+94     	; 0x3a30 <QS_Counts_to_Distance+0xe8>
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
       {
           if (counts > piecewise_brackets_1[indexLinear])
    39d2:	4d a1       	ldd	r20, Y+37	; 0x25
    39d4:	5e a1       	ldd	r21, Y+38	; 0x26
    39d6:	48 17       	cp	r20, r24
    39d8:	59 07       	cpc	r21, r25
    39da:	60 f0       	brcs	.+24     	; 0x39f4 <QS_Counts_to_Distance+0xac>
    39dc:	de 01       	movw	r26, r28
    39de:	97 96       	adiw	r26, 0x27	; 39
    39e0:	41 e0       	ldi	r20, 0x01	; 1
    39e2:	50 e0       	ldi	r21, 0x00	; 0
    39e4:	f4 2e       	mov	r15, r20
    39e6:	fa 01       	movw	r30, r20
    39e8:	6d 91       	ld	r22, X+
    39ea:	7d 91       	ld	r23, X+
    39ec:	68 17       	cp	r22, r24
    39ee:	79 07       	cpc	r23, r25
    39f0:	b0 f4       	brcc	.+44     	; 0x3a1e <QS_Counts_to_Distance+0xd6>
    39f2:	03 c0       	rjmp	.+6      	; 0x39fa <QS_Counts_to_Distance+0xb2>
    39f4:	e0 e0       	ldi	r30, 0x00	; 0
    39f6:	f0 e0       	ldi	r31, 0x00	; 0
    39f8:	f1 2c       	mov	r15, r1
           {
               distance.u32 = (u32)counts * (u32)slope_1[indexLinear];
    39fa:	ee 0f       	add	r30, r30
    39fc:	ff 1f       	adc	r31, r31
    39fe:	21 e0       	ldi	r18, 0x01	; 1
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	2c 0f       	add	r18, r28
    3a04:	3d 1f       	adc	r19, r29
    3a06:	e2 0f       	add	r30, r18
    3a08:	f3 1f       	adc	r31, r19
    3a0a:	22 89       	ldd	r18, Z+18	; 0x12
    3a0c:	33 89       	ldd	r19, Z+19	; 0x13
    3a0e:	dc 01       	movw	r26, r24
    3a10:	ed d1       	rcall	.+986    	; 0x3dec <__umulhisi3>
               distance.u16[LSB] = offset_1[indexLinear] - distance.u16[MSB];
    3a12:	40 81       	ld	r20, Z
    3a14:	51 81       	ldd	r21, Z+1	; 0x01
    3a16:	8a 01       	movw	r16, r20
    3a18:	08 1b       	sub	r16, r24
    3a1a:	19 0b       	sbc	r17, r25
               break;
    3a1c:	41 c0       	rjmp	.+130    	; 0x3aa0 <QS_Counts_to_Distance+0x158>
    3a1e:	ff 24       	eor	r15, r15
    3a20:	f3 94       	inc	r15
    3a22:	f4 0e       	add	r15, r20
    3a24:	4f 5f       	subi	r20, 0xFF	; 255
    3a26:	5f 4f       	sbci	r21, 0xFF	; 255

    if(led==1)      
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    3a28:	49 30       	cpi	r20, 0x09	; 9
    3a2a:	51 05       	cpc	r21, r1
    3a2c:	d9 f6       	brne	.-74     	; 0x39e4 <QS_Counts_to_Distance+0x9c>
    3a2e:	38 c0       	rjmp	.+112    	; 0x3aa0 <QS_Counts_to_Distance+0x158>
               distance.u16[LSB] = offset_1[indexLinear] - distance.u16[MSB];
               break;
           }
       }
    }
    else if(led==2) 
    3a30:	62 30       	cpi	r22, 0x02	; 2
    3a32:	09 f0       	breq	.+2      	; 0x3a36 <QS_Counts_to_Distance+0xee>
    3a34:	3f c0       	rjmp	.+126    	; 0x3ab4 <QS_Counts_to_Distance+0x16c>
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
       {
           if (counts > piecewise_brackets_2[indexLinear])
    3a36:	6d 96       	adiw	r28, 0x1d	; 29
    3a38:	4e ad       	ldd	r20, Y+62	; 0x3e
    3a3a:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a3c:	6d 97       	sbiw	r28, 0x1d	; 29
    3a3e:	48 17       	cp	r20, r24
    3a40:	59 07       	cpc	r21, r25
    3a42:	68 f0       	brcs	.+26     	; 0x3a5e <QS_Counts_to_Distance+0x116>
    3a44:	fe 01       	movw	r30, r28
    3a46:	e3 5a       	subi	r30, 0xA3	; 163
    3a48:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4a:	41 e0       	ldi	r20, 0x01	; 1
    3a4c:	50 e0       	ldi	r21, 0x00	; 0
    3a4e:	f4 2e       	mov	r15, r20
    3a50:	da 01       	movw	r26, r20
    3a52:	61 91       	ld	r22, Z+
    3a54:	71 91       	ld	r23, Z+
    3a56:	68 17       	cp	r22, r24
    3a58:	79 07       	cpc	r23, r25
    3a5a:	d0 f4       	brcc	.+52     	; 0x3a90 <QS_Counts_to_Distance+0x148>
    3a5c:	03 c0       	rjmp	.+6      	; 0x3a64 <QS_Counts_to_Distance+0x11c>
    3a5e:	a0 e0       	ldi	r26, 0x00	; 0
    3a60:	b0 e0       	ldi	r27, 0x00	; 0
    3a62:	f1 2c       	mov	r15, r1
           {
               distance.u32 = (u32)counts * (u32)slope_2[indexLinear];
    3a64:	ad 01       	movw	r20, r26
    3a66:	44 0f       	add	r20, r20
    3a68:	55 1f       	adc	r21, r21
    3a6a:	e9 e4       	ldi	r30, 0x49	; 73
    3a6c:	f0 e0       	ldi	r31, 0x00	; 0
    3a6e:	ec 0f       	add	r30, r28
    3a70:	fd 1f       	adc	r31, r29
    3a72:	e4 0f       	add	r30, r20
    3a74:	f5 1f       	adc	r31, r21
    3a76:	20 81       	ld	r18, Z
    3a78:	31 81       	ldd	r19, Z+1	; 0x01
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	b7 d1       	rcall	.+878    	; 0x3dec <__umulhisi3>
               distance.u16[LSB] = offset_2[indexLinear] - distance.u16[MSB];
    3a7e:	fe 01       	movw	r30, r28
    3a80:	e4 0f       	add	r30, r20
    3a82:	f5 1f       	adc	r31, r21
    3a84:	47 a9       	ldd	r20, Z+55	; 0x37
    3a86:	50 ad       	ldd	r21, Z+56	; 0x38
    3a88:	8a 01       	movw	r16, r20
    3a8a:	08 1b       	sub	r16, r24
    3a8c:	19 0b       	sbc	r17, r25
               break;
    3a8e:	08 c0       	rjmp	.+16     	; 0x3aa0 <QS_Counts_to_Distance+0x158>
    3a90:	ff 24       	eor	r15, r15
    3a92:	f3 94       	inc	r15
    3a94:	f4 0e       	add	r15, r20
    3a96:	4f 5f       	subi	r20, 0xFF	; 255
    3a98:	5f 4f       	sbci	r21, 0xFF	; 255
    }
    else if(led==2) 
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
    3a9a:	49 30       	cpi	r20, 0x09	; 9
    3a9c:	51 05       	cpc	r21, r1
    3a9e:	b9 f6       	brne	.-82     	; 0x3a4e <QS_Counts_to_Distance+0x106>
       }
    }
    else return -1;  /* Invalid channel number */

    // Set to a max value if above a certain level.
    if (distance.u16[LSB] > 250 || indexLinear == maxIndex)
    3aa0:	0b 3f       	cpi	r16, 0xFB	; 251
    3aa2:	11 05       	cpc	r17, r1
    3aa4:	18 f4       	brcc	.+6      	; 0x3aac <QS_Counts_to_Distance+0x164>
    3aa6:	89 e0       	ldi	r24, 0x09	; 9
    3aa8:	f8 12       	cpse	r15, r24
    3aaa:	02 c0       	rjmp	.+4      	; 0x3ab0 <QS_Counts_to_Distance+0x168>
    {
        distance.u16[LSB] = 250;
    3aac:	0a ef       	ldi	r16, 0xFA	; 250
    3aae:	10 e0       	ldi	r17, 0x00	; 0
    }
    return (distance.u16[LSB]);
    3ab0:	c8 01       	movw	r24, r16
    3ab2:	02 c0       	rjmp	.+4      	; 0x3ab8 <QS_Counts_to_Distance+0x170>
               distance.u16[LSB] = offset_2[indexLinear] - distance.u16[MSB];
               break;
           }
       }
    }
    else return -1;  /* Invalid channel number */
    3ab4:	8f ef       	ldi	r24, 0xFF	; 255
    3ab6:	9f ef       	ldi	r25, 0xFF	; 255
    if (distance.u16[LSB] > 250 || indexLinear == maxIndex)
    {
        distance.u16[LSB] = 250;
    }
    return (distance.u16[LSB]);
}
    3ab8:	c4 59       	subi	r28, 0x94	; 148
    3aba:	df 4f       	sbci	r29, 0xFF	; 255
    3abc:	cd bf       	out	0x3d, r28	; 61
    3abe:	de bf       	out	0x3e, r29	; 62
    3ac0:	df 91       	pop	r29
    3ac2:	cf 91       	pop	r28
    3ac4:	1f 91       	pop	r17
    3ac6:	0f 91       	pop	r16
    3ac8:	ff 90       	pop	r15
    3aca:	08 95       	ret

00003acc <SliderAlgorithm>:

void SliderAlgorithm(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples, u16 scale)
{
    3acc:	4f 92       	push	r4
    3ace:	5f 92       	push	r5
    3ad0:	6f 92       	push	r6
    3ad2:	7f 92       	push	r7
    3ad4:	8f 92       	push	r8
    3ad6:	9f 92       	push	r9
    3ad8:	af 92       	push	r10
    3ada:	bf 92       	push	r11
    3adc:	cf 92       	push	r12
    3ade:	df 92       	push	r13
    3ae0:	ef 92       	push	r14
    3ae2:	ff 92       	push	r15
    3ae4:	0f 93       	push	r16
    3ae6:	1f 93       	push	r17
    3ae8:	cf 93       	push	r28
    3aea:	df 93       	push	r29
    3aec:	7b 01       	movw	r14, r22
    3aee:	5a 01       	movw	r10, r20
	//My implementation
	static u16 previous_led_x = 0;
	static u16 previous_led_y = 0;

    // QS_GlobalCounterOverflow assumes milliseconds. Samples->timestamp is in 100 us.
    u16 xdata QS_GlobalCounterOverflow = samples->timestamp / 10;
    3af0:	fb 01       	movw	r30, r22
    3af2:	22 81       	ldd	r18, Z+2	; 0x02
    3af4:	33 81       	ldd	r19, Z+3	; 0x03
    3af6:	ad ec       	ldi	r26, 0xCD	; 205
    3af8:	bc ec       	ldi	r27, 0xCC	; 204
    3afa:	78 d1       	rcall	.+752    	; 0x3dec <__umulhisi3>
    3afc:	6c 01       	movw	r12, r24
    3afe:	d6 94       	lsr	r13
    3b00:	c7 94       	ror	r12
    3b02:	d6 94       	lsr	r13
    3b04:	c7 94       	ror	r12
    3b06:	d6 94       	lsr	r13
    3b08:	c7 94       	ror	r12
    s16 xdata xdiff;
    u8 xdata swipe_speed;

    int xdata ps;

    ps = (u32) samples->ps1 - (u32)baseline[0];
    3b0a:	82 85       	ldd	r24, Z+10	; 0x0a
    3b0c:	93 85       	ldd	r25, Z+11	; 0x0b
    3b0e:	20 91 6e 2e 	lds	r18, 0x2E6E
    3b12:	30 91 6f 2e 	lds	r19, 0x2E6F
    3b16:	82 1b       	sub	r24, r18
    3b18:	93 0b       	sbc	r25, r19
    3b1a:	12 f4       	brpl	.+4      	; 0x3b20 <SliderAlgorithm+0x54>
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    ps *= scale;

    // Raw IR sensor 0 and 1 are stored in channels 4 and 5
    // ALS is stored in channel 6
    // Calculate r1 and r2 distances; store in channels 0 and 1
    r1 = QS_Counts_to_Distance ((u16)ps, 1);
    3b20:	61 e0       	ldi	r22, 0x01	; 1
    3b22:	9c 01       	movw	r18, r24
    3b24:	2a 9d       	mul	r18, r10
    3b26:	c0 01       	movw	r24, r0
    3b28:	2b 9d       	mul	r18, r11
    3b2a:	90 0d       	add	r25, r0
    3b2c:	3a 9d       	mul	r19, r10
    3b2e:	90 0d       	add	r25, r0
    3b30:	11 24       	eor	r1, r1
    3b32:	0a df       	rcall	.-492    	; 0x3948 <QS_Counts_to_Distance>
    3b34:	ec 01       	movw	r28, r24

    ps = (u32) samples->ps2 - (u32)baseline[1];
    3b36:	80 90 70 2e 	lds	r8, 0x2E70
    3b3a:	90 90 71 2e 	lds	r9, 0x2E71
    3b3e:	f7 01       	movw	r30, r14
    3b40:	84 85       	ldd	r24, Z+12	; 0x0c
    3b42:	95 85       	ldd	r25, Z+13	; 0x0d
    3b44:	88 19       	sub	r24, r8
    3b46:	99 09       	sbc	r25, r9
    3b48:	12 f4       	brpl	.+4      	; 0x3b4e <SliderAlgorithm+0x82>
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    if (ps < 0) ps = 0;

    // Scale it
    ps *= (u32)scale;

    r2 = QS_Counts_to_Distance ((u16)ps, 2);
    3b4e:	62 e0       	ldi	r22, 0x02	; 2
    3b50:	9c 01       	movw	r18, r24
    3b52:	a2 9e       	mul	r10, r18
    3b54:	c0 01       	movw	r24, r0
    3b56:	a3 9e       	mul	r10, r19
    3b58:	90 0d       	add	r25, r0
    3b5a:	b2 9e       	mul	r11, r18
    3b5c:	90 0d       	add	r25, r0
    3b5e:	11 24       	eor	r1, r1
    3b60:	f3 de       	rcall	.-538    	; 0x3948 <QS_Counts_to_Distance>
    3b62:	8c 01       	movw	r16, r24
	
	//PS3 Sensor
	ps = (u32) samples->ps3 - (u32)baseline[1];
    3b64:	f7 01       	movw	r30, r14
    3b66:	86 85       	ldd	r24, Z+14	; 0x0e
    3b68:	97 85       	ldd	r25, Z+15	; 0x0f
    3b6a:	88 19       	sub	r24, r8
    3b6c:	99 09       	sbc	r25, r9
    3b6e:	12 f4       	brpl	.+4      	; 0x3b74 <SliderAlgorithm+0xa8>
    3b70:	80 e0       	ldi	r24, 0x00	; 0
    3b72:	90 e0       	ldi	r25, 0x00	; 0
	if (ps < 0) ps = 0;

	// Scale it
	ps *= (u32)scale;

	r3 = QS_Counts_to_Distance ((u16)ps, 2);
    3b74:	62 e0       	ldi	r22, 0x02	; 2
    3b76:	9c 01       	movw	r18, r24
    3b78:	a2 9e       	mul	r10, r18
    3b7a:	c0 01       	movw	r24, r0
    3b7c:	a3 9e       	mul	r10, r19
    3b7e:	90 0d       	add	r25, r0
    3b80:	b2 9e       	mul	r11, r18
    3b82:	90 0d       	add	r25, r0
    3b84:	11 24       	eor	r1, r1
    3b86:	e0 de       	rcall	.-576    	; 0x3948 <QS_Counts_to_Distance>
    3b88:	7c 01       	movw	r14, r24

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
   x.u32 = x.u32 + 33000;
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    3b8a:	98 01       	movw	r18, r16
    3b8c:	d8 01       	movw	r26, r16
    3b8e:	2e d1       	rcall	.+604    	; 0x3dec <__umulhisi3>
    3b90:	2b 01       	movw	r4, r22
    3b92:	3c 01       	movw	r6, r24
   ////////////////////////////////////////////////////////////////////////////
   // Position calculation and swipe gesture detection

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
    3b94:	9e 01       	movw	r18, r28
    3b96:	de 01       	movw	r26, r28
    3b98:	29 d1       	rcall	.+594    	; 0x3dec <__umulhisi3>
   x.u32 = x.u32 + 33000;
    3b9a:	4b 01       	movw	r8, r22
    3b9c:	5c 01       	movw	r10, r24
    3b9e:	38 ee       	ldi	r19, 0xE8	; 232
    3ba0:	83 0e       	add	r8, r19
    3ba2:	30 e8       	ldi	r19, 0x80	; 128
    3ba4:	93 1e       	adc	r9, r19
    3ba6:	a1 1c       	adc	r10, r1
    3ba8:	b1 1c       	adc	r11, r1
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    3baa:	84 18       	sub	r8, r4
    3bac:	95 08       	sbc	r9, r5
    3bae:	a6 08       	sbc	r10, r6
    3bb0:	b7 08       	sbc	r11, r7
   if (x.s32 < 0)
    3bb2:	1a f4       	brpl	.+6      	; 0x3bba <SliderAlgorithm+0xee>
   {
     x.s32 = 0;
    3bb4:	81 2c       	mov	r8, r1
    3bb6:	91 2c       	mov	r9, r1
    3bb8:	54 01       	movw	r10, r8
   }
   x.u32 = x.u32 / 60;
    3bba:	c5 01       	movw	r24, r10
    3bbc:	b4 01       	movw	r22, r8
    3bbe:	2c e3       	ldi	r18, 0x3C	; 60
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	40 e0       	ldi	r20, 0x00	; 0
    3bc4:	50 e0       	ldi	r21, 0x00	; 0
    3bc6:	ea d0       	rcall	.+468    	; 0x3d9c <__udivmodsi4>
    3bc8:	49 01       	movw	r8, r18
    3bca:	5a 01       	movw	r10, r20

   // limit x to maximum for pad
   if (x.u16[LSB] > 1101)
    3bcc:	2e 34       	cpi	r18, 0x4E	; 78
    3bce:	84 e0       	ldi	r24, 0x04	; 4
    3bd0:	38 07       	cpc	r19, r24
    3bd2:	30 f0       	brcs	.+12     	; 0x3be0 <SliderAlgorithm+0x114>
   {
     x.u16[LSB] = 1101;
    3bd4:	0f 2e       	mov	r0, r31
    3bd6:	fd e4       	ldi	r31, 0x4D	; 77
    3bd8:	8f 2e       	mov	r8, r31
    3bda:	f4 e0       	ldi	r31, 0x04	; 4
    3bdc:	9f 2e       	mov	r9, r31
    3bde:	f0 2d       	mov	r31, r0
   }
   
   // Calculate y
   //y = (r2^2 - r3^2 + d^2) / (2 * d) + offset
   y.u32 = (u32)r2 * (u32)r2;
   y.u32 = y.u32 + 33000;
    3be0:	e8 ee       	ldi	r30, 0xE8	; 232
    3be2:	4e 0e       	add	r4, r30
    3be4:	e0 e8       	ldi	r30, 0x80	; 128
    3be6:	5e 1e       	adc	r5, r30
    3be8:	61 1c       	adc	r6, r1
    3bea:	71 1c       	adc	r7, r1
   y.s32 = y.u32 - ((u32)r3 * (u32)r3);
    3bec:	97 01       	movw	r18, r14
    3bee:	d7 01       	movw	r26, r14
    3bf0:	fd d0       	rcall	.+506    	; 0x3dec <__umulhisi3>
    3bf2:	46 1a       	sub	r4, r22
    3bf4:	57 0a       	sbc	r5, r23
    3bf6:	68 0a       	sbc	r6, r24
    3bf8:	79 0a       	sbc	r7, r25
   if (y.s32 < 0)
    3bfa:	1a f4       	brpl	.+6      	; 0x3c02 <SliderAlgorithm+0x136>
   {
	   y.s32 = 0;
    3bfc:	41 2c       	mov	r4, r1
    3bfe:	51 2c       	mov	r5, r1
    3c00:	32 01       	movw	r6, r4
   }
   y.u32 = y.u32 / 60;
    3c02:	c3 01       	movw	r24, r6
    3c04:	b2 01       	movw	r22, r4
    3c06:	2c e3       	ldi	r18, 0x3C	; 60
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	40 e0       	ldi	r20, 0x00	; 0
    3c0c:	50 e0       	ldi	r21, 0x00	; 0
    3c0e:	c6 d0       	rcall	.+396    	; 0x3d9c <__udivmodsi4>
    3c10:	29 01       	movw	r4, r18
    3c12:	3a 01       	movw	r6, r20

   // limit x to maximum for pad
   if (y.u16[LSB] > 1101)
    3c14:	2e 34       	cpi	r18, 0x4E	; 78
    3c16:	f4 e0       	ldi	r31, 0x04	; 4
    3c18:	3f 07       	cpc	r19, r31
    3c1a:	30 f0       	brcs	.+12     	; 0x3c28 <SliderAlgorithm+0x15c>
   {
	   y.u16[LSB] = 1101;
    3c1c:	0f 2e       	mov	r0, r31
    3c1e:	fd e4       	ldi	r31, 0x4D	; 77
    3c20:	4f 2e       	mov	r4, r31
    3c22:	f4 e0       	ldi	r31, 0x04	; 4
    3c24:	5f 2e       	mov	r5, r31
    3c26:	f0 2d       	mov	r31, r0
   }

   
   // Determine "z" and recognize whether "swipe" type gesture has occured
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
    3c28:	c1 3f       	cpi	r28, 0xF1	; 241
    3c2a:	d1 05       	cpc	r29, r1
    3c2c:	18 f4       	brcc	.+6      	; 0x3c34 <SliderAlgorithm+0x168>
    3c2e:	01 3f       	cpi	r16, 0xF1	; 241
    3c30:	11 05       	cpc	r17, r1
    3c32:	20 f1       	brcs	.+72     	; 0x3c7c <SliderAlgorithm+0x1b0>
   {
      // check for end of swipe
      if (out_of_range == 0)
    3c34:	80 91 1b 20 	lds	r24, 0x201B
    3c38:	81 11       	cpse	r24, r1
    3c3a:	08 c0       	rjmp	.+16     	; 0x3c4c <SliderAlgorithm+0x180>
      {
        xexit = xlast;
    3c3c:	80 91 cc 21 	lds	r24, 0x21CC
    3c40:	90 91 cd 21 	lds	r25, 0x21CD
    3c44:	80 93 ca 21 	sts	0x21CA, r24
    3c48:	90 93 cb 21 	sts	0x21CB, r25
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
            xdiff = (s16)xenter-(s16)xexit;
        }
      }
      out_of_range = 1;
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	80 93 1b 20 	sts	0x201B, r24
      if (xexit > 550)
    3c52:	80 91 ca 21 	lds	r24, 0x21CA
    3c56:	90 91 cb 21 	lds	r25, 0x21CB
    3c5a:	87 32       	cpi	r24, 0x27	; 39
    3c5c:	92 40       	sbci	r25, 0x02	; 2
    3c5e:	38 f0       	brcs	.+14     	; 0x3c6e <SliderAlgorithm+0x1a2>
      {
        x.u16[LSB] = 1101;
    3c60:	0f 2e       	mov	r0, r31
    3c62:	fd e4       	ldi	r31, 0x4D	; 77
    3c64:	8f 2e       	mov	r8, r31
    3c66:	f4 e0       	ldi	r31, 0x04	; 4
    3c68:	9f 2e       	mov	r9, r31
    3c6a:	f0 2d       	mov	r31, r0
    3c6c:	02 c0       	rjmp	.+4      	; 0x3c72 <SliderAlgorithm+0x1a6>
      }
      else
      {
        x.u16[LSB] = 0;
    3c6e:	81 2c       	mov	r8, r1
    3c70:	91 2c       	mov	r9, r1
      }
      z = MAX_RADIUS;
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3c72:	c0 92 c4 21 	sts	0x21C4, r12
    3c76:	d0 92 c5 21 	sts	0x21C5, r13
    3c7a:	12 c0       	rjmp	.+36     	; 0x3ca0 <SliderAlgorithm+0x1d4>
   }
   else
   {
      // check for start of swipe
      if (out_of_range == 1)
    3c7c:	80 91 1b 20 	lds	r24, 0x201B
    3c80:	81 30       	cpi	r24, 0x01	; 1
    3c82:	41 f4       	brne	.+16     	; 0x3c94 <SliderAlgorithm+0x1c8>
      {
        xenter = x.u16[LSB];
    3c84:	80 92 c6 21 	sts	0x21C6, r8
    3c88:	90 92 c7 21 	sts	0x21C7, r9
        SwipeStartTime = QS_GlobalCounterOverflow;
    3c8c:	c0 92 c8 21 	sts	0x21C8, r12
    3c90:	d0 92 c9 21 	sts	0x21C9, r13
      }
      out_of_range = 0;
    3c94:	10 92 1b 20 	sts	0x201B, r1

      xlast = x.u16[LSB];
    3c98:	80 92 cc 21 	sts	0x21CC, r8
    3c9c:	90 92 cd 21 	sts	0x21CD, r9
      {
         z = r1;
      }
   }
   //ht1632c_fillCircle(previous_led_y,previous_led_x,1,1);
   ht1632c_drawPixel(previous_led_y,previous_led_x,0);
    3ca0:	40 e0       	ldi	r20, 0x00	; 0
    3ca2:	60 91 c2 21 	lds	r22, 0x21C2
    3ca6:	80 91 c0 21 	lds	r24, 0x21C0
    3caa:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <ht1632c_drawPixel>
   uint16_t tmp_x = 15-((x.u16[LSB])/73);
    3cae:	94 01       	movw	r18, r8
    3cb0:	a1 e7       	ldi	r26, 0x71	; 113
    3cb2:	b0 ee       	ldi	r27, 0xE0	; 224
    3cb4:	9b d0       	rcall	.+310    	; 0x3dec <__umulhisi3>
    3cb6:	00 24       	eor	r0, r0
    3cb8:	88 0f       	add	r24, r24
    3cba:	99 1f       	adc	r25, r25
    3cbc:	00 1c       	adc	r0, r0
    3cbe:	88 0f       	add	r24, r24
    3cc0:	99 1f       	adc	r25, r25
    3cc2:	00 1c       	adc	r0, r0
    3cc4:	89 2f       	mov	r24, r25
    3cc6:	90 2d       	mov	r25, r0
    3cc8:	cf e0       	ldi	r28, 0x0F	; 15
    3cca:	d0 e0       	ldi	r29, 0x00	; 0
    3ccc:	c8 1b       	sub	r28, r24
    3cce:	d9 0b       	sbc	r29, r25
   uint16_t tmp_y = ((y.u16[LSB])/55)+2;
    3cd0:	92 01       	movw	r18, r4
    3cd2:	a5 ee       	ldi	r26, 0xE5	; 229
    3cd4:	b9 e2       	ldi	r27, 0x29	; 41
    3cd6:	8a d0       	rcall	.+276    	; 0x3dec <__umulhisi3>
    3cd8:	48 1a       	sub	r4, r24
    3cda:	59 0a       	sbc	r5, r25
    3cdc:	92 01       	movw	r18, r4
    3cde:	36 95       	lsr	r19
    3ce0:	27 95       	ror	r18
    3ce2:	82 0f       	add	r24, r18
    3ce4:	93 1f       	adc	r25, r19
    3ce6:	96 95       	lsr	r25
    3ce8:	87 95       	ror	r24
    3cea:	92 95       	swap	r25
    3cec:	82 95       	swap	r24
    3cee:	8f 70       	andi	r24, 0x0F	; 15
    3cf0:	89 27       	eor	r24, r25
    3cf2:	9f 70       	andi	r25, 0x0F	; 15
    3cf4:	89 27       	eor	r24, r25
    3cf6:	2c 01       	movw	r4, r24
    3cf8:	32 e0       	ldi	r19, 0x02	; 2
    3cfa:	43 0e       	add	r4, r19
    3cfc:	51 1c       	adc	r5, r1
   ht1632c_drawPixel(tmp_y,tmp_x,1);
    3cfe:	41 e0       	ldi	r20, 0x01	; 1
    3d00:	6c 2f       	mov	r22, r28
    3d02:	84 2d       	mov	r24, r4
    3d04:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <ht1632c_drawPixel>
   //ht1632c_fillCircle(tmp_y,tmp_x,1,1);
   ht1632c_writeScreen();
    3d08:	0e 94 00 16 	call	0x2c00	; 0x2c00 <ht1632c_writeScreen>
   previous_led_x = tmp_x;
    3d0c:	c0 93 c2 21 	sts	0x21C2, r28
    3d10:	d0 93 c3 21 	sts	0x21C3, r29
   previous_led_y = tmp_y;
    3d14:	40 92 c0 21 	sts	0x21C0, r4
    3d18:	50 92 c1 21 	sts	0x21C1, r5
       //REPLACE_0_PS3( 0 );
       //REPLACE_0_AUX( 0 ); 
	    //printf("no touch \r\n");
   }
	*/
}
    3d1c:	df 91       	pop	r29
    3d1e:	cf 91       	pop	r28
    3d20:	1f 91       	pop	r17
    3d22:	0f 91       	pop	r16
    3d24:	ff 90       	pop	r15
    3d26:	ef 90       	pop	r14
    3d28:	df 90       	pop	r13
    3d2a:	cf 90       	pop	r12
    3d2c:	bf 90       	pop	r11
    3d2e:	af 90       	pop	r10
    3d30:	9f 90       	pop	r9
    3d32:	8f 90       	pop	r8
    3d34:	7f 90       	pop	r7
    3d36:	6f 90       	pop	r6
    3d38:	5f 90       	pop	r5
    3d3a:	4f 90       	pop	r4
    3d3c:	08 95       	ret

00003d3e <uart_setup>:

char rxbuf[50];

void uart_setup(void) {
	
	PORTD.DIRSET = PIN3_bm; //TX
    3d3e:	e0 e6       	ldi	r30, 0x60	; 96
    3d40:	f6 e0       	ldi	r31, 0x06	; 6
    3d42:	88 e0       	ldi	r24, 0x08	; 8
    3d44:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; //RX
    3d46:	84 e0       	ldi	r24, 0x04	; 4
    3d48:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
    3d4a:	e0 ea       	ldi	r30, 0xA0	; 160
    3d4c:	f9 e0       	ldi	r31, 0x09	; 9
    3d4e:	80 e2       	ldi	r24, 0x20	; 32
    3d50:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 207;//0x1111;
    3d52:	8f ec       	ldi	r24, 0xCF	; 207
    3d54:	86 83       	std	Z+6, r24	; 0x06
	//USARTE0.BAUDCTRLB = (33 << 4);
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
    3d56:	83 e0       	ldi	r24, 0x03	; 3
    3d58:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    3d5a:	88 e1       	ldi	r24, 0x18	; 24
    3d5c:	84 83       	std	Z+4, r24	; 0x04
    3d5e:	08 95       	ret

00003d60 <uart_put_char>:
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    3d60:	e0 ea       	ldi	r30, 0xA0	; 160
    3d62:	f9 e0       	ldi	r31, 0x09	; 9
    3d64:	91 81       	ldd	r25, Z+1	; 0x01
    3d66:	95 ff       	sbrs	r25, 5
    3d68:	fd cf       	rjmp	.-6      	; 0x3d64 <uart_put_char+0x4>
	USARTD0.DATA = c;
    3d6a:	80 93 a0 09 	sts	0x09A0, r24
    3d6e:	08 95       	ret

00003d70 <uart_get_char>:
}

char uart_get_char(void) {
	uint16_t timer = 0;
	while (!(USARTD0.STATUS & USART_RXCIF_bm)){
    3d70:	89 eb       	ldi	r24, 0xB9	; 185
    3d72:	9b e0       	ldi	r25, 0x0B	; 11
    3d74:	e0 ea       	ldi	r30, 0xA0	; 160
    3d76:	f9 e0       	ldi	r31, 0x09	; 9
    3d78:	09 c0       	rjmp	.+18     	; 0x3d8c <uart_get_char+0x1c>
    3d7a:	af e3       	ldi	r26, 0x3F	; 63
    3d7c:	bf e1       	ldi	r27, 0x1F	; 31
    3d7e:	11 97       	sbiw	r26, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <uart_get_char+0xe>
    3d82:	00 c0       	rjmp	.+0      	; 0x3d84 <uart_get_char+0x14>
    3d84:	00 00       	nop
    3d86:	01 97       	sbiw	r24, 0x01	; 1
		 _delay_ms(1);
		 if (timer++ == TIMEOUT) {
    3d88:	00 97       	sbiw	r24, 0x00	; 0
    3d8a:	31 f0       	breq	.+12     	; 0x3d98 <uart_get_char+0x28>
	USARTD0.DATA = c;
}

char uart_get_char(void) {
	uint16_t timer = 0;
	while (!(USARTD0.STATUS & USART_RXCIF_bm)){
    3d8c:	21 81       	ldd	r18, Z+1	; 0x01
    3d8e:	22 23       	and	r18, r18
    3d90:	a4 f7       	brge	.-24     	; 0x3d7a <uart_get_char+0xa>
		 _delay_ms(1);
		 if (timer++ == TIMEOUT) {
			return 0x03;
		 }
	}
	return USARTD0.DATA;
    3d92:	80 91 a0 09 	lds	r24, 0x09A0
    3d96:	08 95       	ret
char uart_get_char(void) {
	uint16_t timer = 0;
	while (!(USARTD0.STATUS & USART_RXCIF_bm)){
		 _delay_ms(1);
		 if (timer++ == TIMEOUT) {
			return 0x03;
    3d98:	83 e0       	ldi	r24, 0x03	; 3
		 }
	}
	return USARTD0.DATA;
}
    3d9a:	08 95       	ret

00003d9c <__udivmodsi4>:
    3d9c:	a1 e2       	ldi	r26, 0x21	; 33
    3d9e:	1a 2e       	mov	r1, r26
    3da0:	aa 1b       	sub	r26, r26
    3da2:	bb 1b       	sub	r27, r27
    3da4:	fd 01       	movw	r30, r26
    3da6:	0d c0       	rjmp	.+26     	; 0x3dc2 <__udivmodsi4_ep>

00003da8 <__udivmodsi4_loop>:
    3da8:	aa 1f       	adc	r26, r26
    3daa:	bb 1f       	adc	r27, r27
    3dac:	ee 1f       	adc	r30, r30
    3dae:	ff 1f       	adc	r31, r31
    3db0:	a2 17       	cp	r26, r18
    3db2:	b3 07       	cpc	r27, r19
    3db4:	e4 07       	cpc	r30, r20
    3db6:	f5 07       	cpc	r31, r21
    3db8:	20 f0       	brcs	.+8      	; 0x3dc2 <__udivmodsi4_ep>
    3dba:	a2 1b       	sub	r26, r18
    3dbc:	b3 0b       	sbc	r27, r19
    3dbe:	e4 0b       	sbc	r30, r20
    3dc0:	f5 0b       	sbc	r31, r21

00003dc2 <__udivmodsi4_ep>:
    3dc2:	66 1f       	adc	r22, r22
    3dc4:	77 1f       	adc	r23, r23
    3dc6:	88 1f       	adc	r24, r24
    3dc8:	99 1f       	adc	r25, r25
    3dca:	1a 94       	dec	r1
    3dcc:	69 f7       	brne	.-38     	; 0x3da8 <__udivmodsi4_loop>
    3dce:	60 95       	com	r22
    3dd0:	70 95       	com	r23
    3dd2:	80 95       	com	r24
    3dd4:	90 95       	com	r25
    3dd6:	9b 01       	movw	r18, r22
    3dd8:	ac 01       	movw	r20, r24
    3dda:	bd 01       	movw	r22, r26
    3ddc:	cf 01       	movw	r24, r30
    3dde:	08 95       	ret

00003de0 <__tablejump2__>:
    3de0:	ee 0f       	add	r30, r30
    3de2:	ff 1f       	adc	r31, r31

00003de4 <__tablejump__>:
    3de4:	05 90       	lpm	r0, Z+
    3de6:	f4 91       	lpm	r31, Z
    3de8:	e0 2d       	mov	r30, r0
    3dea:	09 94       	ijmp

00003dec <__umulhisi3>:
    3dec:	a2 9f       	mul	r26, r18
    3dee:	b0 01       	movw	r22, r0
    3df0:	b3 9f       	mul	r27, r19
    3df2:	c0 01       	movw	r24, r0
    3df4:	a3 9f       	mul	r26, r19
    3df6:	70 0d       	add	r23, r0
    3df8:	81 1d       	adc	r24, r1
    3dfa:	11 24       	eor	r1, r1
    3dfc:	91 1d       	adc	r25, r1
    3dfe:	b2 9f       	mul	r27, r18
    3e00:	70 0d       	add	r23, r0
    3e02:	81 1d       	adc	r24, r1
    3e04:	11 24       	eor	r1, r1
    3e06:	91 1d       	adc	r25, r1
    3e08:	08 95       	ret

00003e0a <__muluhisi3>:
    3e0a:	f0 df       	rcall	.-32     	; 0x3dec <__umulhisi3>
    3e0c:	a5 9f       	mul	r26, r21
    3e0e:	90 0d       	add	r25, r0
    3e10:	b4 9f       	mul	r27, r20
    3e12:	90 0d       	add	r25, r0
    3e14:	a4 9f       	mul	r26, r20
    3e16:	80 0d       	add	r24, r0
    3e18:	91 1d       	adc	r25, r1
    3e1a:	11 24       	eor	r1, r1
    3e1c:	08 95       	ret

00003e1e <printf>:
    3e1e:	cf 93       	push	r28
    3e20:	df 93       	push	r29
    3e22:	cd b7       	in	r28, 0x3d	; 61
    3e24:	de b7       	in	r29, 0x3e	; 62
    3e26:	fe 01       	movw	r30, r28
    3e28:	35 96       	adiw	r30, 0x05	; 5
    3e2a:	61 91       	ld	r22, Z+
    3e2c:	71 91       	ld	r23, Z+
    3e2e:	af 01       	movw	r20, r30
    3e30:	80 91 74 2e 	lds	r24, 0x2E74
    3e34:	90 91 75 2e 	lds	r25, 0x2E75
    3e38:	30 d0       	rcall	.+96     	; 0x3e9a <vfprintf>
    3e3a:	df 91       	pop	r29
    3e3c:	cf 91       	pop	r28
    3e3e:	08 95       	ret

00003e40 <puts>:
    3e40:	0f 93       	push	r16
    3e42:	1f 93       	push	r17
    3e44:	cf 93       	push	r28
    3e46:	df 93       	push	r29
    3e48:	e0 91 74 2e 	lds	r30, 0x2E74
    3e4c:	f0 91 75 2e 	lds	r31, 0x2E75
    3e50:	23 81       	ldd	r18, Z+3	; 0x03
    3e52:	21 ff       	sbrs	r18, 1
    3e54:	1b c0       	rjmp	.+54     	; 0x3e8c <puts+0x4c>
    3e56:	ec 01       	movw	r28, r24
    3e58:	00 e0       	ldi	r16, 0x00	; 0
    3e5a:	10 e0       	ldi	r17, 0x00	; 0
    3e5c:	89 91       	ld	r24, Y+
    3e5e:	60 91 74 2e 	lds	r22, 0x2E74
    3e62:	70 91 75 2e 	lds	r23, 0x2E75
    3e66:	db 01       	movw	r26, r22
    3e68:	18 96       	adiw	r26, 0x08	; 8
    3e6a:	ed 91       	ld	r30, X+
    3e6c:	fc 91       	ld	r31, X
    3e6e:	19 97       	sbiw	r26, 0x09	; 9
    3e70:	88 23       	and	r24, r24
    3e72:	31 f0       	breq	.+12     	; 0x3e80 <puts+0x40>
    3e74:	09 95       	icall
    3e76:	89 2b       	or	r24, r25
    3e78:	89 f3       	breq	.-30     	; 0x3e5c <puts+0x1c>
    3e7a:	0f ef       	ldi	r16, 0xFF	; 255
    3e7c:	1f ef       	ldi	r17, 0xFF	; 255
    3e7e:	ee cf       	rjmp	.-36     	; 0x3e5c <puts+0x1c>
    3e80:	8a e0       	ldi	r24, 0x0A	; 10
    3e82:	09 95       	icall
    3e84:	89 2b       	or	r24, r25
    3e86:	11 f4       	brne	.+4      	; 0x3e8c <puts+0x4c>
    3e88:	c8 01       	movw	r24, r16
    3e8a:	02 c0       	rjmp	.+4      	; 0x3e90 <puts+0x50>
    3e8c:	8f ef       	ldi	r24, 0xFF	; 255
    3e8e:	9f ef       	ldi	r25, 0xFF	; 255
    3e90:	df 91       	pop	r29
    3e92:	cf 91       	pop	r28
    3e94:	1f 91       	pop	r17
    3e96:	0f 91       	pop	r16
    3e98:	08 95       	ret

00003e9a <vfprintf>:
    3e9a:	2f 92       	push	r2
    3e9c:	3f 92       	push	r3
    3e9e:	4f 92       	push	r4
    3ea0:	5f 92       	push	r5
    3ea2:	6f 92       	push	r6
    3ea4:	7f 92       	push	r7
    3ea6:	8f 92       	push	r8
    3ea8:	9f 92       	push	r9
    3eaa:	af 92       	push	r10
    3eac:	bf 92       	push	r11
    3eae:	cf 92       	push	r12
    3eb0:	df 92       	push	r13
    3eb2:	ef 92       	push	r14
    3eb4:	ff 92       	push	r15
    3eb6:	0f 93       	push	r16
    3eb8:	1f 93       	push	r17
    3eba:	cf 93       	push	r28
    3ebc:	df 93       	push	r29
    3ebe:	cd b7       	in	r28, 0x3d	; 61
    3ec0:	de b7       	in	r29, 0x3e	; 62
    3ec2:	2c 97       	sbiw	r28, 0x0c	; 12
    3ec4:	cd bf       	out	0x3d, r28	; 61
    3ec6:	de bf       	out	0x3e, r29	; 62
    3ec8:	7c 01       	movw	r14, r24
    3eca:	6b 01       	movw	r12, r22
    3ecc:	8a 01       	movw	r16, r20
    3ece:	fc 01       	movw	r30, r24
    3ed0:	16 82       	std	Z+6, r1	; 0x06
    3ed2:	17 82       	std	Z+7, r1	; 0x07
    3ed4:	83 81       	ldd	r24, Z+3	; 0x03
    3ed6:	81 ff       	sbrs	r24, 1
    3ed8:	b0 c1       	rjmp	.+864    	; 0x423a <vfprintf+0x3a0>
    3eda:	ce 01       	movw	r24, r28
    3edc:	01 96       	adiw	r24, 0x01	; 1
    3ede:	4c 01       	movw	r8, r24
    3ee0:	f7 01       	movw	r30, r14
    3ee2:	93 81       	ldd	r25, Z+3	; 0x03
    3ee4:	f6 01       	movw	r30, r12
    3ee6:	93 fd       	sbrc	r25, 3
    3ee8:	85 91       	lpm	r24, Z+
    3eea:	93 ff       	sbrs	r25, 3
    3eec:	81 91       	ld	r24, Z+
    3eee:	6f 01       	movw	r12, r30
    3ef0:	88 23       	and	r24, r24
    3ef2:	09 f4       	brne	.+2      	; 0x3ef6 <vfprintf+0x5c>
    3ef4:	9e c1       	rjmp	.+828    	; 0x4232 <vfprintf+0x398>
    3ef6:	85 32       	cpi	r24, 0x25	; 37
    3ef8:	39 f4       	brne	.+14     	; 0x3f08 <vfprintf+0x6e>
    3efa:	93 fd       	sbrc	r25, 3
    3efc:	85 91       	lpm	r24, Z+
    3efe:	93 ff       	sbrs	r25, 3
    3f00:	81 91       	ld	r24, Z+
    3f02:	6f 01       	movw	r12, r30
    3f04:	85 32       	cpi	r24, 0x25	; 37
    3f06:	21 f4       	brne	.+8      	; 0x3f10 <vfprintf+0x76>
    3f08:	b7 01       	movw	r22, r14
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	c4 d1       	rcall	.+904    	; 0x4296 <fputc>
    3f0e:	e8 cf       	rjmp	.-48     	; 0x3ee0 <vfprintf+0x46>
    3f10:	51 2c       	mov	r5, r1
    3f12:	31 2c       	mov	r3, r1
    3f14:	20 e0       	ldi	r18, 0x00	; 0
    3f16:	20 32       	cpi	r18, 0x20	; 32
    3f18:	a0 f4       	brcc	.+40     	; 0x3f42 <vfprintf+0xa8>
    3f1a:	8b 32       	cpi	r24, 0x2B	; 43
    3f1c:	69 f0       	breq	.+26     	; 0x3f38 <vfprintf+0x9e>
    3f1e:	30 f4       	brcc	.+12     	; 0x3f2c <vfprintf+0x92>
    3f20:	80 32       	cpi	r24, 0x20	; 32
    3f22:	59 f0       	breq	.+22     	; 0x3f3a <vfprintf+0xa0>
    3f24:	83 32       	cpi	r24, 0x23	; 35
    3f26:	69 f4       	brne	.+26     	; 0x3f42 <vfprintf+0xa8>
    3f28:	20 61       	ori	r18, 0x10	; 16
    3f2a:	2c c0       	rjmp	.+88     	; 0x3f84 <vfprintf+0xea>
    3f2c:	8d 32       	cpi	r24, 0x2D	; 45
    3f2e:	39 f0       	breq	.+14     	; 0x3f3e <vfprintf+0xa4>
    3f30:	80 33       	cpi	r24, 0x30	; 48
    3f32:	39 f4       	brne	.+14     	; 0x3f42 <vfprintf+0xa8>
    3f34:	21 60       	ori	r18, 0x01	; 1
    3f36:	26 c0       	rjmp	.+76     	; 0x3f84 <vfprintf+0xea>
    3f38:	22 60       	ori	r18, 0x02	; 2
    3f3a:	24 60       	ori	r18, 0x04	; 4
    3f3c:	23 c0       	rjmp	.+70     	; 0x3f84 <vfprintf+0xea>
    3f3e:	28 60       	ori	r18, 0x08	; 8
    3f40:	21 c0       	rjmp	.+66     	; 0x3f84 <vfprintf+0xea>
    3f42:	27 fd       	sbrc	r18, 7
    3f44:	27 c0       	rjmp	.+78     	; 0x3f94 <vfprintf+0xfa>
    3f46:	30 ed       	ldi	r19, 0xD0	; 208
    3f48:	38 0f       	add	r19, r24
    3f4a:	3a 30       	cpi	r19, 0x0A	; 10
    3f4c:	78 f4       	brcc	.+30     	; 0x3f6c <vfprintf+0xd2>
    3f4e:	26 ff       	sbrs	r18, 6
    3f50:	06 c0       	rjmp	.+12     	; 0x3f5e <vfprintf+0xc4>
    3f52:	fa e0       	ldi	r31, 0x0A	; 10
    3f54:	5f 9e       	mul	r5, r31
    3f56:	30 0d       	add	r19, r0
    3f58:	11 24       	eor	r1, r1
    3f5a:	53 2e       	mov	r5, r19
    3f5c:	13 c0       	rjmp	.+38     	; 0x3f84 <vfprintf+0xea>
    3f5e:	8a e0       	ldi	r24, 0x0A	; 10
    3f60:	38 9e       	mul	r3, r24
    3f62:	30 0d       	add	r19, r0
    3f64:	11 24       	eor	r1, r1
    3f66:	33 2e       	mov	r3, r19
    3f68:	20 62       	ori	r18, 0x20	; 32
    3f6a:	0c c0       	rjmp	.+24     	; 0x3f84 <vfprintf+0xea>
    3f6c:	8e 32       	cpi	r24, 0x2E	; 46
    3f6e:	21 f4       	brne	.+8      	; 0x3f78 <vfprintf+0xde>
    3f70:	26 fd       	sbrc	r18, 6
    3f72:	5f c1       	rjmp	.+702    	; 0x4232 <vfprintf+0x398>
    3f74:	20 64       	ori	r18, 0x40	; 64
    3f76:	06 c0       	rjmp	.+12     	; 0x3f84 <vfprintf+0xea>
    3f78:	8c 36       	cpi	r24, 0x6C	; 108
    3f7a:	11 f4       	brne	.+4      	; 0x3f80 <vfprintf+0xe6>
    3f7c:	20 68       	ori	r18, 0x80	; 128
    3f7e:	02 c0       	rjmp	.+4      	; 0x3f84 <vfprintf+0xea>
    3f80:	88 36       	cpi	r24, 0x68	; 104
    3f82:	41 f4       	brne	.+16     	; 0x3f94 <vfprintf+0xfa>
    3f84:	f6 01       	movw	r30, r12
    3f86:	93 fd       	sbrc	r25, 3
    3f88:	85 91       	lpm	r24, Z+
    3f8a:	93 ff       	sbrs	r25, 3
    3f8c:	81 91       	ld	r24, Z+
    3f8e:	6f 01       	movw	r12, r30
    3f90:	81 11       	cpse	r24, r1
    3f92:	c1 cf       	rjmp	.-126    	; 0x3f16 <vfprintf+0x7c>
    3f94:	98 2f       	mov	r25, r24
    3f96:	9f 7d       	andi	r25, 0xDF	; 223
    3f98:	95 54       	subi	r25, 0x45	; 69
    3f9a:	93 30       	cpi	r25, 0x03	; 3
    3f9c:	28 f4       	brcc	.+10     	; 0x3fa8 <vfprintf+0x10e>
    3f9e:	0c 5f       	subi	r16, 0xFC	; 252
    3fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa2:	ff e3       	ldi	r31, 0x3F	; 63
    3fa4:	f9 83       	std	Y+1, r31	; 0x01
    3fa6:	0d c0       	rjmp	.+26     	; 0x3fc2 <vfprintf+0x128>
    3fa8:	83 36       	cpi	r24, 0x63	; 99
    3faa:	31 f0       	breq	.+12     	; 0x3fb8 <vfprintf+0x11e>
    3fac:	83 37       	cpi	r24, 0x73	; 115
    3fae:	71 f0       	breq	.+28     	; 0x3fcc <vfprintf+0x132>
    3fb0:	83 35       	cpi	r24, 0x53	; 83
    3fb2:	09 f0       	breq	.+2      	; 0x3fb6 <vfprintf+0x11c>
    3fb4:	57 c0       	rjmp	.+174    	; 0x4064 <vfprintf+0x1ca>
    3fb6:	21 c0       	rjmp	.+66     	; 0x3ffa <vfprintf+0x160>
    3fb8:	f8 01       	movw	r30, r16
    3fba:	80 81       	ld	r24, Z
    3fbc:	89 83       	std	Y+1, r24	; 0x01
    3fbe:	0e 5f       	subi	r16, 0xFE	; 254
    3fc0:	1f 4f       	sbci	r17, 0xFF	; 255
    3fc2:	44 24       	eor	r4, r4
    3fc4:	43 94       	inc	r4
    3fc6:	51 2c       	mov	r5, r1
    3fc8:	54 01       	movw	r10, r8
    3fca:	14 c0       	rjmp	.+40     	; 0x3ff4 <vfprintf+0x15a>
    3fcc:	38 01       	movw	r6, r16
    3fce:	f2 e0       	ldi	r31, 0x02	; 2
    3fd0:	6f 0e       	add	r6, r31
    3fd2:	71 1c       	adc	r7, r1
    3fd4:	f8 01       	movw	r30, r16
    3fd6:	a0 80       	ld	r10, Z
    3fd8:	b1 80       	ldd	r11, Z+1	; 0x01
    3fda:	26 ff       	sbrs	r18, 6
    3fdc:	03 c0       	rjmp	.+6      	; 0x3fe4 <vfprintf+0x14a>
    3fde:	65 2d       	mov	r22, r5
    3fe0:	70 e0       	ldi	r23, 0x00	; 0
    3fe2:	02 c0       	rjmp	.+4      	; 0x3fe8 <vfprintf+0x14e>
    3fe4:	6f ef       	ldi	r22, 0xFF	; 255
    3fe6:	7f ef       	ldi	r23, 0xFF	; 255
    3fe8:	c5 01       	movw	r24, r10
    3fea:	2c 87       	std	Y+12, r18	; 0x0c
    3fec:	49 d1       	rcall	.+658    	; 0x4280 <strnlen>
    3fee:	2c 01       	movw	r4, r24
    3ff0:	83 01       	movw	r16, r6
    3ff2:	2c 85       	ldd	r18, Y+12	; 0x0c
    3ff4:	2f 77       	andi	r18, 0x7F	; 127
    3ff6:	22 2e       	mov	r2, r18
    3ff8:	16 c0       	rjmp	.+44     	; 0x4026 <vfprintf+0x18c>
    3ffa:	38 01       	movw	r6, r16
    3ffc:	f2 e0       	ldi	r31, 0x02	; 2
    3ffe:	6f 0e       	add	r6, r31
    4000:	71 1c       	adc	r7, r1
    4002:	f8 01       	movw	r30, r16
    4004:	a0 80       	ld	r10, Z
    4006:	b1 80       	ldd	r11, Z+1	; 0x01
    4008:	26 ff       	sbrs	r18, 6
    400a:	03 c0       	rjmp	.+6      	; 0x4012 <vfprintf+0x178>
    400c:	65 2d       	mov	r22, r5
    400e:	70 e0       	ldi	r23, 0x00	; 0
    4010:	02 c0       	rjmp	.+4      	; 0x4016 <vfprintf+0x17c>
    4012:	6f ef       	ldi	r22, 0xFF	; 255
    4014:	7f ef       	ldi	r23, 0xFF	; 255
    4016:	c5 01       	movw	r24, r10
    4018:	2c 87       	std	Y+12, r18	; 0x0c
    401a:	27 d1       	rcall	.+590    	; 0x426a <strnlen_P>
    401c:	2c 01       	movw	r4, r24
    401e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4020:	20 68       	ori	r18, 0x80	; 128
    4022:	22 2e       	mov	r2, r18
    4024:	83 01       	movw	r16, r6
    4026:	23 fc       	sbrc	r2, 3
    4028:	19 c0       	rjmp	.+50     	; 0x405c <vfprintf+0x1c2>
    402a:	83 2d       	mov	r24, r3
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	48 16       	cp	r4, r24
    4030:	59 06       	cpc	r5, r25
    4032:	a0 f4       	brcc	.+40     	; 0x405c <vfprintf+0x1c2>
    4034:	b7 01       	movw	r22, r14
    4036:	80 e2       	ldi	r24, 0x20	; 32
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	2d d1       	rcall	.+602    	; 0x4296 <fputc>
    403c:	3a 94       	dec	r3
    403e:	f5 cf       	rjmp	.-22     	; 0x402a <vfprintf+0x190>
    4040:	f5 01       	movw	r30, r10
    4042:	27 fc       	sbrc	r2, 7
    4044:	85 91       	lpm	r24, Z+
    4046:	27 fe       	sbrs	r2, 7
    4048:	81 91       	ld	r24, Z+
    404a:	5f 01       	movw	r10, r30
    404c:	b7 01       	movw	r22, r14
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	22 d1       	rcall	.+580    	; 0x4296 <fputc>
    4052:	31 10       	cpse	r3, r1
    4054:	3a 94       	dec	r3
    4056:	f1 e0       	ldi	r31, 0x01	; 1
    4058:	4f 1a       	sub	r4, r31
    405a:	51 08       	sbc	r5, r1
    405c:	41 14       	cp	r4, r1
    405e:	51 04       	cpc	r5, r1
    4060:	79 f7       	brne	.-34     	; 0x4040 <vfprintf+0x1a6>
    4062:	de c0       	rjmp	.+444    	; 0x4220 <vfprintf+0x386>
    4064:	84 36       	cpi	r24, 0x64	; 100
    4066:	11 f0       	breq	.+4      	; 0x406c <vfprintf+0x1d2>
    4068:	89 36       	cpi	r24, 0x69	; 105
    406a:	31 f5       	brne	.+76     	; 0x40b8 <vfprintf+0x21e>
    406c:	f8 01       	movw	r30, r16
    406e:	27 ff       	sbrs	r18, 7
    4070:	07 c0       	rjmp	.+14     	; 0x4080 <vfprintf+0x1e6>
    4072:	60 81       	ld	r22, Z
    4074:	71 81       	ldd	r23, Z+1	; 0x01
    4076:	82 81       	ldd	r24, Z+2	; 0x02
    4078:	93 81       	ldd	r25, Z+3	; 0x03
    407a:	0c 5f       	subi	r16, 0xFC	; 252
    407c:	1f 4f       	sbci	r17, 0xFF	; 255
    407e:	08 c0       	rjmp	.+16     	; 0x4090 <vfprintf+0x1f6>
    4080:	60 81       	ld	r22, Z
    4082:	71 81       	ldd	r23, Z+1	; 0x01
    4084:	88 27       	eor	r24, r24
    4086:	77 fd       	sbrc	r23, 7
    4088:	80 95       	com	r24
    408a:	98 2f       	mov	r25, r24
    408c:	0e 5f       	subi	r16, 0xFE	; 254
    408e:	1f 4f       	sbci	r17, 0xFF	; 255
    4090:	2f 76       	andi	r18, 0x6F	; 111
    4092:	b2 2e       	mov	r11, r18
    4094:	97 ff       	sbrs	r25, 7
    4096:	09 c0       	rjmp	.+18     	; 0x40aa <vfprintf+0x210>
    4098:	90 95       	com	r25
    409a:	80 95       	com	r24
    409c:	70 95       	com	r23
    409e:	61 95       	neg	r22
    40a0:	7f 4f       	sbci	r23, 0xFF	; 255
    40a2:	8f 4f       	sbci	r24, 0xFF	; 255
    40a4:	9f 4f       	sbci	r25, 0xFF	; 255
    40a6:	20 68       	ori	r18, 0x80	; 128
    40a8:	b2 2e       	mov	r11, r18
    40aa:	2a e0       	ldi	r18, 0x0A	; 10
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	a4 01       	movw	r20, r8
    40b0:	24 d1       	rcall	.+584    	; 0x42fa <__ultoa_invert>
    40b2:	a8 2e       	mov	r10, r24
    40b4:	a8 18       	sub	r10, r8
    40b6:	43 c0       	rjmp	.+134    	; 0x413e <vfprintf+0x2a4>
    40b8:	85 37       	cpi	r24, 0x75	; 117
    40ba:	29 f4       	brne	.+10     	; 0x40c6 <vfprintf+0x22c>
    40bc:	2f 7e       	andi	r18, 0xEF	; 239
    40be:	b2 2e       	mov	r11, r18
    40c0:	2a e0       	ldi	r18, 0x0A	; 10
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	25 c0       	rjmp	.+74     	; 0x4110 <vfprintf+0x276>
    40c6:	f2 2f       	mov	r31, r18
    40c8:	f9 7f       	andi	r31, 0xF9	; 249
    40ca:	bf 2e       	mov	r11, r31
    40cc:	8f 36       	cpi	r24, 0x6F	; 111
    40ce:	c1 f0       	breq	.+48     	; 0x4100 <vfprintf+0x266>
    40d0:	18 f4       	brcc	.+6      	; 0x40d8 <vfprintf+0x23e>
    40d2:	88 35       	cpi	r24, 0x58	; 88
    40d4:	79 f0       	breq	.+30     	; 0x40f4 <vfprintf+0x25a>
    40d6:	ad c0       	rjmp	.+346    	; 0x4232 <vfprintf+0x398>
    40d8:	80 37       	cpi	r24, 0x70	; 112
    40da:	19 f0       	breq	.+6      	; 0x40e2 <vfprintf+0x248>
    40dc:	88 37       	cpi	r24, 0x78	; 120
    40de:	21 f0       	breq	.+8      	; 0x40e8 <vfprintf+0x24e>
    40e0:	a8 c0       	rjmp	.+336    	; 0x4232 <vfprintf+0x398>
    40e2:	2f 2f       	mov	r18, r31
    40e4:	20 61       	ori	r18, 0x10	; 16
    40e6:	b2 2e       	mov	r11, r18
    40e8:	b4 fe       	sbrs	r11, 4
    40ea:	0d c0       	rjmp	.+26     	; 0x4106 <vfprintf+0x26c>
    40ec:	8b 2d       	mov	r24, r11
    40ee:	84 60       	ori	r24, 0x04	; 4
    40f0:	b8 2e       	mov	r11, r24
    40f2:	09 c0       	rjmp	.+18     	; 0x4106 <vfprintf+0x26c>
    40f4:	24 ff       	sbrs	r18, 4
    40f6:	0a c0       	rjmp	.+20     	; 0x410c <vfprintf+0x272>
    40f8:	9f 2f       	mov	r25, r31
    40fa:	96 60       	ori	r25, 0x06	; 6
    40fc:	b9 2e       	mov	r11, r25
    40fe:	06 c0       	rjmp	.+12     	; 0x410c <vfprintf+0x272>
    4100:	28 e0       	ldi	r18, 0x08	; 8
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	05 c0       	rjmp	.+10     	; 0x4110 <vfprintf+0x276>
    4106:	20 e1       	ldi	r18, 0x10	; 16
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	02 c0       	rjmp	.+4      	; 0x4110 <vfprintf+0x276>
    410c:	20 e1       	ldi	r18, 0x10	; 16
    410e:	32 e0       	ldi	r19, 0x02	; 2
    4110:	f8 01       	movw	r30, r16
    4112:	b7 fe       	sbrs	r11, 7
    4114:	07 c0       	rjmp	.+14     	; 0x4124 <vfprintf+0x28a>
    4116:	60 81       	ld	r22, Z
    4118:	71 81       	ldd	r23, Z+1	; 0x01
    411a:	82 81       	ldd	r24, Z+2	; 0x02
    411c:	93 81       	ldd	r25, Z+3	; 0x03
    411e:	0c 5f       	subi	r16, 0xFC	; 252
    4120:	1f 4f       	sbci	r17, 0xFF	; 255
    4122:	06 c0       	rjmp	.+12     	; 0x4130 <vfprintf+0x296>
    4124:	60 81       	ld	r22, Z
    4126:	71 81       	ldd	r23, Z+1	; 0x01
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	0e 5f       	subi	r16, 0xFE	; 254
    412e:	1f 4f       	sbci	r17, 0xFF	; 255
    4130:	a4 01       	movw	r20, r8
    4132:	e3 d0       	rcall	.+454    	; 0x42fa <__ultoa_invert>
    4134:	a8 2e       	mov	r10, r24
    4136:	a8 18       	sub	r10, r8
    4138:	fb 2d       	mov	r31, r11
    413a:	ff 77       	andi	r31, 0x7F	; 127
    413c:	bf 2e       	mov	r11, r31
    413e:	b6 fe       	sbrs	r11, 6
    4140:	0b c0       	rjmp	.+22     	; 0x4158 <vfprintf+0x2be>
    4142:	2b 2d       	mov	r18, r11
    4144:	2e 7f       	andi	r18, 0xFE	; 254
    4146:	a5 14       	cp	r10, r5
    4148:	50 f4       	brcc	.+20     	; 0x415e <vfprintf+0x2c4>
    414a:	b4 fe       	sbrs	r11, 4
    414c:	0a c0       	rjmp	.+20     	; 0x4162 <vfprintf+0x2c8>
    414e:	b2 fc       	sbrc	r11, 2
    4150:	08 c0       	rjmp	.+16     	; 0x4162 <vfprintf+0x2c8>
    4152:	2b 2d       	mov	r18, r11
    4154:	2e 7e       	andi	r18, 0xEE	; 238
    4156:	05 c0       	rjmp	.+10     	; 0x4162 <vfprintf+0x2c8>
    4158:	7a 2c       	mov	r7, r10
    415a:	2b 2d       	mov	r18, r11
    415c:	03 c0       	rjmp	.+6      	; 0x4164 <vfprintf+0x2ca>
    415e:	7a 2c       	mov	r7, r10
    4160:	01 c0       	rjmp	.+2      	; 0x4164 <vfprintf+0x2ca>
    4162:	75 2c       	mov	r7, r5
    4164:	24 ff       	sbrs	r18, 4
    4166:	0d c0       	rjmp	.+26     	; 0x4182 <vfprintf+0x2e8>
    4168:	fe 01       	movw	r30, r28
    416a:	ea 0d       	add	r30, r10
    416c:	f1 1d       	adc	r31, r1
    416e:	80 81       	ld	r24, Z
    4170:	80 33       	cpi	r24, 0x30	; 48
    4172:	11 f4       	brne	.+4      	; 0x4178 <vfprintf+0x2de>
    4174:	29 7e       	andi	r18, 0xE9	; 233
    4176:	09 c0       	rjmp	.+18     	; 0x418a <vfprintf+0x2f0>
    4178:	22 ff       	sbrs	r18, 2
    417a:	06 c0       	rjmp	.+12     	; 0x4188 <vfprintf+0x2ee>
    417c:	73 94       	inc	r7
    417e:	73 94       	inc	r7
    4180:	04 c0       	rjmp	.+8      	; 0x418a <vfprintf+0x2f0>
    4182:	82 2f       	mov	r24, r18
    4184:	86 78       	andi	r24, 0x86	; 134
    4186:	09 f0       	breq	.+2      	; 0x418a <vfprintf+0x2f0>
    4188:	73 94       	inc	r7
    418a:	23 fd       	sbrc	r18, 3
    418c:	12 c0       	rjmp	.+36     	; 0x41b2 <vfprintf+0x318>
    418e:	20 ff       	sbrs	r18, 0
    4190:	06 c0       	rjmp	.+12     	; 0x419e <vfprintf+0x304>
    4192:	5a 2c       	mov	r5, r10
    4194:	73 14       	cp	r7, r3
    4196:	18 f4       	brcc	.+6      	; 0x419e <vfprintf+0x304>
    4198:	53 0c       	add	r5, r3
    419a:	57 18       	sub	r5, r7
    419c:	73 2c       	mov	r7, r3
    419e:	73 14       	cp	r7, r3
    41a0:	60 f4       	brcc	.+24     	; 0x41ba <vfprintf+0x320>
    41a2:	b7 01       	movw	r22, r14
    41a4:	80 e2       	ldi	r24, 0x20	; 32
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	2c 87       	std	Y+12, r18	; 0x0c
    41aa:	75 d0       	rcall	.+234    	; 0x4296 <fputc>
    41ac:	73 94       	inc	r7
    41ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    41b0:	f6 cf       	rjmp	.-20     	; 0x419e <vfprintf+0x304>
    41b2:	73 14       	cp	r7, r3
    41b4:	10 f4       	brcc	.+4      	; 0x41ba <vfprintf+0x320>
    41b6:	37 18       	sub	r3, r7
    41b8:	01 c0       	rjmp	.+2      	; 0x41bc <vfprintf+0x322>
    41ba:	31 2c       	mov	r3, r1
    41bc:	24 ff       	sbrs	r18, 4
    41be:	11 c0       	rjmp	.+34     	; 0x41e2 <vfprintf+0x348>
    41c0:	b7 01       	movw	r22, r14
    41c2:	80 e3       	ldi	r24, 0x30	; 48
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	2c 87       	std	Y+12, r18	; 0x0c
    41c8:	66 d0       	rcall	.+204    	; 0x4296 <fputc>
    41ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    41cc:	22 ff       	sbrs	r18, 2
    41ce:	16 c0       	rjmp	.+44     	; 0x41fc <vfprintf+0x362>
    41d0:	21 ff       	sbrs	r18, 1
    41d2:	03 c0       	rjmp	.+6      	; 0x41da <vfprintf+0x340>
    41d4:	88 e5       	ldi	r24, 0x58	; 88
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	02 c0       	rjmp	.+4      	; 0x41de <vfprintf+0x344>
    41da:	88 e7       	ldi	r24, 0x78	; 120
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	b7 01       	movw	r22, r14
    41e0:	0c c0       	rjmp	.+24     	; 0x41fa <vfprintf+0x360>
    41e2:	82 2f       	mov	r24, r18
    41e4:	86 78       	andi	r24, 0x86	; 134
    41e6:	51 f0       	breq	.+20     	; 0x41fc <vfprintf+0x362>
    41e8:	21 fd       	sbrc	r18, 1
    41ea:	02 c0       	rjmp	.+4      	; 0x41f0 <vfprintf+0x356>
    41ec:	80 e2       	ldi	r24, 0x20	; 32
    41ee:	01 c0       	rjmp	.+2      	; 0x41f2 <vfprintf+0x358>
    41f0:	8b e2       	ldi	r24, 0x2B	; 43
    41f2:	27 fd       	sbrc	r18, 7
    41f4:	8d e2       	ldi	r24, 0x2D	; 45
    41f6:	b7 01       	movw	r22, r14
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	4d d0       	rcall	.+154    	; 0x4296 <fputc>
    41fc:	a5 14       	cp	r10, r5
    41fe:	30 f4       	brcc	.+12     	; 0x420c <vfprintf+0x372>
    4200:	b7 01       	movw	r22, r14
    4202:	80 e3       	ldi	r24, 0x30	; 48
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	47 d0       	rcall	.+142    	; 0x4296 <fputc>
    4208:	5a 94       	dec	r5
    420a:	f8 cf       	rjmp	.-16     	; 0x41fc <vfprintf+0x362>
    420c:	aa 94       	dec	r10
    420e:	f4 01       	movw	r30, r8
    4210:	ea 0d       	add	r30, r10
    4212:	f1 1d       	adc	r31, r1
    4214:	80 81       	ld	r24, Z
    4216:	b7 01       	movw	r22, r14
    4218:	90 e0       	ldi	r25, 0x00	; 0
    421a:	3d d0       	rcall	.+122    	; 0x4296 <fputc>
    421c:	a1 10       	cpse	r10, r1
    421e:	f6 cf       	rjmp	.-20     	; 0x420c <vfprintf+0x372>
    4220:	33 20       	and	r3, r3
    4222:	09 f4       	brne	.+2      	; 0x4226 <vfprintf+0x38c>
    4224:	5d ce       	rjmp	.-838    	; 0x3ee0 <vfprintf+0x46>
    4226:	b7 01       	movw	r22, r14
    4228:	80 e2       	ldi	r24, 0x20	; 32
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	34 d0       	rcall	.+104    	; 0x4296 <fputc>
    422e:	3a 94       	dec	r3
    4230:	f7 cf       	rjmp	.-18     	; 0x4220 <vfprintf+0x386>
    4232:	f7 01       	movw	r30, r14
    4234:	86 81       	ldd	r24, Z+6	; 0x06
    4236:	97 81       	ldd	r25, Z+7	; 0x07
    4238:	02 c0       	rjmp	.+4      	; 0x423e <vfprintf+0x3a4>
    423a:	8f ef       	ldi	r24, 0xFF	; 255
    423c:	9f ef       	ldi	r25, 0xFF	; 255
    423e:	2c 96       	adiw	r28, 0x0c	; 12
    4240:	cd bf       	out	0x3d, r28	; 61
    4242:	de bf       	out	0x3e, r29	; 62
    4244:	df 91       	pop	r29
    4246:	cf 91       	pop	r28
    4248:	1f 91       	pop	r17
    424a:	0f 91       	pop	r16
    424c:	ff 90       	pop	r15
    424e:	ef 90       	pop	r14
    4250:	df 90       	pop	r13
    4252:	cf 90       	pop	r12
    4254:	bf 90       	pop	r11
    4256:	af 90       	pop	r10
    4258:	9f 90       	pop	r9
    425a:	8f 90       	pop	r8
    425c:	7f 90       	pop	r7
    425e:	6f 90       	pop	r6
    4260:	5f 90       	pop	r5
    4262:	4f 90       	pop	r4
    4264:	3f 90       	pop	r3
    4266:	2f 90       	pop	r2
    4268:	08 95       	ret

0000426a <strnlen_P>:
    426a:	fc 01       	movw	r30, r24
    426c:	05 90       	lpm	r0, Z+
    426e:	61 50       	subi	r22, 0x01	; 1
    4270:	70 40       	sbci	r23, 0x00	; 0
    4272:	01 10       	cpse	r0, r1
    4274:	d8 f7       	brcc	.-10     	; 0x426c <strnlen_P+0x2>
    4276:	80 95       	com	r24
    4278:	90 95       	com	r25
    427a:	8e 0f       	add	r24, r30
    427c:	9f 1f       	adc	r25, r31
    427e:	08 95       	ret

00004280 <strnlen>:
    4280:	fc 01       	movw	r30, r24
    4282:	61 50       	subi	r22, 0x01	; 1
    4284:	70 40       	sbci	r23, 0x00	; 0
    4286:	01 90       	ld	r0, Z+
    4288:	01 10       	cpse	r0, r1
    428a:	d8 f7       	brcc	.-10     	; 0x4282 <strnlen+0x2>
    428c:	80 95       	com	r24
    428e:	90 95       	com	r25
    4290:	8e 0f       	add	r24, r30
    4292:	9f 1f       	adc	r25, r31
    4294:	08 95       	ret

00004296 <fputc>:
    4296:	0f 93       	push	r16
    4298:	1f 93       	push	r17
    429a:	cf 93       	push	r28
    429c:	df 93       	push	r29
    429e:	18 2f       	mov	r17, r24
    42a0:	09 2f       	mov	r16, r25
    42a2:	eb 01       	movw	r28, r22
    42a4:	8b 81       	ldd	r24, Y+3	; 0x03
    42a6:	81 fd       	sbrc	r24, 1
    42a8:	03 c0       	rjmp	.+6      	; 0x42b0 <fputc+0x1a>
    42aa:	8f ef       	ldi	r24, 0xFF	; 255
    42ac:	9f ef       	ldi	r25, 0xFF	; 255
    42ae:	20 c0       	rjmp	.+64     	; 0x42f0 <fputc+0x5a>
    42b0:	82 ff       	sbrs	r24, 2
    42b2:	10 c0       	rjmp	.+32     	; 0x42d4 <fputc+0x3e>
    42b4:	4e 81       	ldd	r20, Y+6	; 0x06
    42b6:	5f 81       	ldd	r21, Y+7	; 0x07
    42b8:	2c 81       	ldd	r18, Y+4	; 0x04
    42ba:	3d 81       	ldd	r19, Y+5	; 0x05
    42bc:	42 17       	cp	r20, r18
    42be:	53 07       	cpc	r21, r19
    42c0:	7c f4       	brge	.+30     	; 0x42e0 <fputc+0x4a>
    42c2:	e8 81       	ld	r30, Y
    42c4:	f9 81       	ldd	r31, Y+1	; 0x01
    42c6:	9f 01       	movw	r18, r30
    42c8:	2f 5f       	subi	r18, 0xFF	; 255
    42ca:	3f 4f       	sbci	r19, 0xFF	; 255
    42cc:	28 83       	st	Y, r18
    42ce:	39 83       	std	Y+1, r19	; 0x01
    42d0:	10 83       	st	Z, r17
    42d2:	06 c0       	rjmp	.+12     	; 0x42e0 <fputc+0x4a>
    42d4:	e8 85       	ldd	r30, Y+8	; 0x08
    42d6:	f9 85       	ldd	r31, Y+9	; 0x09
    42d8:	81 2f       	mov	r24, r17
    42da:	09 95       	icall
    42dc:	89 2b       	or	r24, r25
    42de:	29 f7       	brne	.-54     	; 0x42aa <fputc+0x14>
    42e0:	2e 81       	ldd	r18, Y+6	; 0x06
    42e2:	3f 81       	ldd	r19, Y+7	; 0x07
    42e4:	2f 5f       	subi	r18, 0xFF	; 255
    42e6:	3f 4f       	sbci	r19, 0xFF	; 255
    42e8:	2e 83       	std	Y+6, r18	; 0x06
    42ea:	3f 83       	std	Y+7, r19	; 0x07
    42ec:	81 2f       	mov	r24, r17
    42ee:	90 2f       	mov	r25, r16
    42f0:	df 91       	pop	r29
    42f2:	cf 91       	pop	r28
    42f4:	1f 91       	pop	r17
    42f6:	0f 91       	pop	r16
    42f8:	08 95       	ret

000042fa <__ultoa_invert>:
    42fa:	fa 01       	movw	r30, r20
    42fc:	aa 27       	eor	r26, r26
    42fe:	28 30       	cpi	r18, 0x08	; 8
    4300:	51 f1       	breq	.+84     	; 0x4356 <__ultoa_invert+0x5c>
    4302:	20 31       	cpi	r18, 0x10	; 16
    4304:	81 f1       	breq	.+96     	; 0x4366 <__ultoa_invert+0x6c>
    4306:	e8 94       	clt
    4308:	6f 93       	push	r22
    430a:	6e 7f       	andi	r22, 0xFE	; 254
    430c:	6e 5f       	subi	r22, 0xFE	; 254
    430e:	7f 4f       	sbci	r23, 0xFF	; 255
    4310:	8f 4f       	sbci	r24, 0xFF	; 255
    4312:	9f 4f       	sbci	r25, 0xFF	; 255
    4314:	af 4f       	sbci	r26, 0xFF	; 255
    4316:	b1 e0       	ldi	r27, 0x01	; 1
    4318:	3e d0       	rcall	.+124    	; 0x4396 <__ultoa_invert+0x9c>
    431a:	b4 e0       	ldi	r27, 0x04	; 4
    431c:	3c d0       	rcall	.+120    	; 0x4396 <__ultoa_invert+0x9c>
    431e:	67 0f       	add	r22, r23
    4320:	78 1f       	adc	r23, r24
    4322:	89 1f       	adc	r24, r25
    4324:	9a 1f       	adc	r25, r26
    4326:	a1 1d       	adc	r26, r1
    4328:	68 0f       	add	r22, r24
    432a:	79 1f       	adc	r23, r25
    432c:	8a 1f       	adc	r24, r26
    432e:	91 1d       	adc	r25, r1
    4330:	a1 1d       	adc	r26, r1
    4332:	6a 0f       	add	r22, r26
    4334:	71 1d       	adc	r23, r1
    4336:	81 1d       	adc	r24, r1
    4338:	91 1d       	adc	r25, r1
    433a:	a1 1d       	adc	r26, r1
    433c:	20 d0       	rcall	.+64     	; 0x437e <__ultoa_invert+0x84>
    433e:	09 f4       	brne	.+2      	; 0x4342 <__ultoa_invert+0x48>
    4340:	68 94       	set
    4342:	3f 91       	pop	r19
    4344:	2a e0       	ldi	r18, 0x0A	; 10
    4346:	26 9f       	mul	r18, r22
    4348:	11 24       	eor	r1, r1
    434a:	30 19       	sub	r19, r0
    434c:	30 5d       	subi	r19, 0xD0	; 208
    434e:	31 93       	st	Z+, r19
    4350:	de f6       	brtc	.-74     	; 0x4308 <__ultoa_invert+0xe>
    4352:	cf 01       	movw	r24, r30
    4354:	08 95       	ret
    4356:	46 2f       	mov	r20, r22
    4358:	47 70       	andi	r20, 0x07	; 7
    435a:	40 5d       	subi	r20, 0xD0	; 208
    435c:	41 93       	st	Z+, r20
    435e:	b3 e0       	ldi	r27, 0x03	; 3
    4360:	0f d0       	rcall	.+30     	; 0x4380 <__ultoa_invert+0x86>
    4362:	c9 f7       	brne	.-14     	; 0x4356 <__ultoa_invert+0x5c>
    4364:	f6 cf       	rjmp	.-20     	; 0x4352 <__ultoa_invert+0x58>
    4366:	46 2f       	mov	r20, r22
    4368:	4f 70       	andi	r20, 0x0F	; 15
    436a:	40 5d       	subi	r20, 0xD0	; 208
    436c:	4a 33       	cpi	r20, 0x3A	; 58
    436e:	18 f0       	brcs	.+6      	; 0x4376 <__ultoa_invert+0x7c>
    4370:	49 5d       	subi	r20, 0xD9	; 217
    4372:	31 fd       	sbrc	r19, 1
    4374:	40 52       	subi	r20, 0x20	; 32
    4376:	41 93       	st	Z+, r20
    4378:	02 d0       	rcall	.+4      	; 0x437e <__ultoa_invert+0x84>
    437a:	a9 f7       	brne	.-22     	; 0x4366 <__ultoa_invert+0x6c>
    437c:	ea cf       	rjmp	.-44     	; 0x4352 <__ultoa_invert+0x58>
    437e:	b4 e0       	ldi	r27, 0x04	; 4
    4380:	a6 95       	lsr	r26
    4382:	97 95       	ror	r25
    4384:	87 95       	ror	r24
    4386:	77 95       	ror	r23
    4388:	67 95       	ror	r22
    438a:	ba 95       	dec	r27
    438c:	c9 f7       	brne	.-14     	; 0x4380 <__ultoa_invert+0x86>
    438e:	00 97       	sbiw	r24, 0x00	; 0
    4390:	61 05       	cpc	r22, r1
    4392:	71 05       	cpc	r23, r1
    4394:	08 95       	ret
    4396:	9b 01       	movw	r18, r22
    4398:	ac 01       	movw	r20, r24
    439a:	0a 2e       	mov	r0, r26
    439c:	06 94       	lsr	r0
    439e:	57 95       	ror	r21
    43a0:	47 95       	ror	r20
    43a2:	37 95       	ror	r19
    43a4:	27 95       	ror	r18
    43a6:	ba 95       	dec	r27
    43a8:	c9 f7       	brne	.-14     	; 0x439c <__ultoa_invert+0xa2>
    43aa:	62 0f       	add	r22, r18
    43ac:	73 1f       	adc	r23, r19
    43ae:	84 1f       	adc	r24, r20
    43b0:	95 1f       	adc	r25, r21
    43b2:	a0 1d       	adc	r26, r0
    43b4:	08 95       	ret

000043b6 <_exit>:
    43b6:	f8 94       	cli

000043b8 <__stop_program>:
    43b8:	ff cf       	rjmp	.-2      	; 0x43b8 <__stop_program>
