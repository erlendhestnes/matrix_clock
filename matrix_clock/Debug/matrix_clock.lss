
matrix_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ab2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000176  00802000  00003ab2  00003b46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000049a  00802176  00802176  00003cbc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003cbc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000730  00000000  00000000  00003d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001a292  00000000  00000000  00004448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e64  00000000  00000000  0001e6da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000d0d9  00000000  00000000  0002153e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000023e0  00000000  00000000  0002e618  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000031e9  00000000  00000000  000309f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027e71  00000000  00000000  00033be1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000039d8  00000000  00000000  0005ba52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	7b c3       	rjmp	.+1782   	; 0x6f8 <__ctors_end>
       2:	00 00       	nop
       4:	98 c3       	rjmp	.+1840   	; 0x736 <__bad_interrupt>
       6:	00 00       	nop
       8:	96 c3       	rjmp	.+1836   	; 0x736 <__bad_interrupt>
       a:	00 00       	nop
       c:	94 c3       	rjmp	.+1832   	; 0x736 <__bad_interrupt>
       e:	00 00       	nop
      10:	92 c3       	rjmp	.+1828   	; 0x736 <__bad_interrupt>
      12:	00 00       	nop
      14:	90 c3       	rjmp	.+1824   	; 0x736 <__bad_interrupt>
      16:	00 00       	nop
      18:	8e c3       	rjmp	.+1820   	; 0x736 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8c c3       	rjmp	.+1816   	; 0x736 <__bad_interrupt>
      1e:	00 00       	nop
      20:	8a c3       	rjmp	.+1812   	; 0x736 <__bad_interrupt>
      22:	00 00       	nop
      24:	88 c3       	rjmp	.+1808   	; 0x736 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__vector_10>
      2c:	84 c3       	rjmp	.+1800   	; 0x736 <__bad_interrupt>
      2e:	00 00       	nop
      30:	82 c3       	rjmp	.+1796   	; 0x736 <__bad_interrupt>
      32:	00 00       	nop
      34:	80 c3       	rjmp	.+1792   	; 0x736 <__bad_interrupt>
      36:	00 00       	nop
      38:	b9 c3       	rjmp	.+1906   	; 0x7ac <__vector_14>
      3a:	00 00       	nop
      3c:	7c c3       	rjmp	.+1784   	; 0x736 <__bad_interrupt>
      3e:	00 00       	nop
      40:	7a c3       	rjmp	.+1780   	; 0x736 <__bad_interrupt>
      42:	00 00       	nop
      44:	78 c3       	rjmp	.+1776   	; 0x736 <__bad_interrupt>
      46:	00 00       	nop
      48:	76 c3       	rjmp	.+1772   	; 0x736 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	74 c3       	rjmp	.+1768   	; 0x736 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_20>
      54:	70 c3       	rjmp	.+1760   	; 0x736 <__bad_interrupt>
      56:	00 00       	nop
      58:	6e c3       	rjmp	.+1756   	; 0x736 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6c c3       	rjmp	.+1752   	; 0x736 <__bad_interrupt>
      5e:	00 00       	nop
      60:	6a c3       	rjmp	.+1748   	; 0x736 <__bad_interrupt>
      62:	00 00       	nop
      64:	68 c3       	rjmp	.+1744   	; 0x736 <__bad_interrupt>
      66:	00 00       	nop
      68:	66 c3       	rjmp	.+1740   	; 0x736 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	64 c3       	rjmp	.+1736   	; 0x736 <__bad_interrupt>
      6e:	00 00       	nop
      70:	62 c3       	rjmp	.+1732   	; 0x736 <__bad_interrupt>
      72:	00 00       	nop
      74:	60 c3       	rjmp	.+1728   	; 0x736 <__bad_interrupt>
      76:	00 00       	nop
      78:	5e c3       	rjmp	.+1724   	; 0x736 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5c c3       	rjmp	.+1720   	; 0x736 <__bad_interrupt>
      7e:	00 00       	nop
      80:	5a c3       	rjmp	.+1716   	; 0x736 <__bad_interrupt>
      82:	00 00       	nop
      84:	58 c3       	rjmp	.+1712   	; 0x736 <__bad_interrupt>
      86:	00 00       	nop
      88:	56 c3       	rjmp	.+1708   	; 0x736 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	54 c3       	rjmp	.+1704   	; 0x736 <__bad_interrupt>
      8e:	00 00       	nop
      90:	52 c3       	rjmp	.+1700   	; 0x736 <__bad_interrupt>
      92:	00 00       	nop
      94:	50 c3       	rjmp	.+1696   	; 0x736 <__bad_interrupt>
      96:	00 00       	nop
      98:	4e c3       	rjmp	.+1692   	; 0x736 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	4c c3       	rjmp	.+1688   	; 0x736 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	4a c3       	rjmp	.+1684   	; 0x736 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	48 c3       	rjmp	.+1680   	; 0x736 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	46 c3       	rjmp	.+1676   	; 0x736 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	44 c3       	rjmp	.+1672   	; 0x736 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	42 c3       	rjmp	.+1668   	; 0x736 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	40 c3       	rjmp	.+1664   	; 0x736 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3e c3       	rjmp	.+1660   	; 0x736 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3c c3       	rjmp	.+1656   	; 0x736 <__bad_interrupt>
      be:	00 00       	nop
      c0:	3a c3       	rjmp	.+1652   	; 0x736 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	38 c3       	rjmp	.+1648   	; 0x736 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	36 c3       	rjmp	.+1644   	; 0x736 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	34 c3       	rjmp	.+1640   	; 0x736 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	32 c3       	rjmp	.+1636   	; 0x736 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	30 c3       	rjmp	.+1632   	; 0x736 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2e c3       	rjmp	.+1628   	; 0x736 <__bad_interrupt>
      da:	00 00       	nop
      dc:	2c c3       	rjmp	.+1624   	; 0x736 <__bad_interrupt>
      de:	00 00       	nop
      e0:	2a c3       	rjmp	.+1620   	; 0x736 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	28 c3       	rjmp	.+1616   	; 0x736 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	26 c3       	rjmp	.+1612   	; 0x736 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	24 c3       	rjmp	.+1608   	; 0x736 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	22 c3       	rjmp	.+1604   	; 0x736 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	20 c3       	rjmp	.+1600   	; 0x736 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	1e c3       	rjmp	.+1596   	; 0x736 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	1c c3       	rjmp	.+1592   	; 0x736 <__bad_interrupt>
      fe:	00 00       	nop
     100:	1a c3       	rjmp	.+1588   	; 0x736 <__bad_interrupt>
     102:	00 00       	nop
     104:	18 c3       	rjmp	.+1584   	; 0x736 <__bad_interrupt>
     106:	00 00       	nop
     108:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__vector_66>
     10c:	14 c3       	rjmp	.+1576   	; 0x736 <__bad_interrupt>
     10e:	00 00       	nop
     110:	12 c3       	rjmp	.+1572   	; 0x736 <__bad_interrupt>
     112:	00 00       	nop
     114:	10 c3       	rjmp	.+1568   	; 0x736 <__bad_interrupt>
     116:	00 00       	nop
     118:	0e c3       	rjmp	.+1564   	; 0x736 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c c3       	rjmp	.+1560   	; 0x736 <__bad_interrupt>
     11e:	00 00       	nop
     120:	0a c3       	rjmp	.+1556   	; 0x736 <__bad_interrupt>
     122:	00 00       	nop
     124:	08 c3       	rjmp	.+1552   	; 0x736 <__bad_interrupt>
     126:	00 00       	nop
     128:	06 c3       	rjmp	.+1548   	; 0x736 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	04 c3       	rjmp	.+1544   	; 0x736 <__bad_interrupt>
     12e:	00 00       	nop
     130:	02 c3       	rjmp	.+1540   	; 0x736 <__bad_interrupt>
     132:	00 00       	nop
     134:	00 c3       	rjmp	.+1536   	; 0x736 <__bad_interrupt>
     136:	00 00       	nop
     138:	fe c2       	rjmp	.+1532   	; 0x736 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	fc c2       	rjmp	.+1528   	; 0x736 <__bad_interrupt>
     13e:	00 00       	nop
     140:	fa c2       	rjmp	.+1524   	; 0x736 <__bad_interrupt>
     142:	00 00       	nop
     144:	f8 c2       	rjmp	.+1520   	; 0x736 <__bad_interrupt>
     146:	00 00       	nop
     148:	f6 c2       	rjmp	.+1516   	; 0x736 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	f4 c2       	rjmp	.+1512   	; 0x736 <__bad_interrupt>
     14e:	00 00       	nop
     150:	f2 c2       	rjmp	.+1508   	; 0x736 <__bad_interrupt>
     152:	00 00       	nop
     154:	f0 c2       	rjmp	.+1504   	; 0x736 <__bad_interrupt>
     156:	00 00       	nop
     158:	ee c2       	rjmp	.+1500   	; 0x736 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	ec c2       	rjmp	.+1496   	; 0x736 <__bad_interrupt>
     15e:	00 00       	nop
     160:	fa c2       	rjmp	.+1524   	; 0x756 <__vector_88>
     162:	00 00       	nop
     164:	e8 c2       	rjmp	.+1488   	; 0x736 <__bad_interrupt>
     166:	00 00       	nop
     168:	e6 c2       	rjmp	.+1484   	; 0x736 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	e4 c2       	rjmp	.+1480   	; 0x736 <__bad_interrupt>
     16e:	00 00       	nop
     170:	e2 c2       	rjmp	.+1476   	; 0x736 <__bad_interrupt>
     172:	00 00       	nop
     174:	e0 c2       	rjmp	.+1472   	; 0x736 <__bad_interrupt>
     176:	00 00       	nop
     178:	de c2       	rjmp	.+1468   	; 0x736 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	dc c2       	rjmp	.+1464   	; 0x736 <__bad_interrupt>
     17e:	00 00       	nop
     180:	da c2       	rjmp	.+1460   	; 0x736 <__bad_interrupt>
     182:	00 00       	nop
     184:	d8 c2       	rjmp	.+1456   	; 0x736 <__bad_interrupt>
     186:	00 00       	nop
     188:	d6 c2       	rjmp	.+1452   	; 0x736 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	d4 c2       	rjmp	.+1448   	; 0x736 <__bad_interrupt>
     18e:	00 00       	nop
     190:	d2 c2       	rjmp	.+1444   	; 0x736 <__bad_interrupt>
     192:	00 00       	nop
     194:	d0 c2       	rjmp	.+1440   	; 0x736 <__bad_interrupt>
     196:	00 00       	nop
     198:	ce c2       	rjmp	.+1436   	; 0x736 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	cc c2       	rjmp	.+1432   	; 0x736 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	ca c2       	rjmp	.+1428   	; 0x736 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	c8 c2       	rjmp	.+1424   	; 0x736 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	c6 c2       	rjmp	.+1420   	; 0x736 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	c4 c2       	rjmp	.+1416   	; 0x736 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	c2 c2       	rjmp	.+1412   	; 0x736 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	c0 c2       	rjmp	.+1408   	; 0x736 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	be c2       	rjmp	.+1404   	; 0x736 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	bc c2       	rjmp	.+1400   	; 0x736 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	ba c2       	rjmp	.+1396   	; 0x736 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	b8 c2       	rjmp	.+1392   	; 0x736 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	b6 c2       	rjmp	.+1388   	; 0x736 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	b4 c2       	rjmp	.+1384   	; 0x736 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	b2 c2       	rjmp	.+1380   	; 0x736 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	b0 c2       	rjmp	.+1376   	; 0x736 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	ae c2       	rjmp	.+1372   	; 0x736 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	ac c2       	rjmp	.+1368   	; 0x736 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	aa c2       	rjmp	.+1364   	; 0x736 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	a8 c2       	rjmp	.+1360   	; 0x736 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	a6 c2       	rjmp	.+1356   	; 0x736 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	a4 c2       	rjmp	.+1352   	; 0x736 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	a2 c2       	rjmp	.+1348   	; 0x736 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	a0 c2       	rjmp	.+1344   	; 0x736 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	9e c2       	rjmp	.+1340   	; 0x736 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 3e       	cpi	r16, 0xE0	; 224
     202:	5b 4f       	sbci	r21, 0xFB	; 251
     204:	5b 3e       	cpi	r21, 0xEB	; 235
     206:	3e 6b       	ori	r19, 0xBE	; 190
     208:	4f 6b       	ori	r20, 0xBF	; 191
     20a:	3e 1c       	adc	r3, r14
     20c:	3e 7c       	andi	r19, 0xCE	; 206
     20e:	3e 1c       	adc	r3, r14
     210:	18 3c       	cpi	r17, 0xC8	; 200
     212:	7e 3c       	cpi	r23, 0xCE	; 206
     214:	18 1c       	adc	r1, r8
     216:	57 7d       	andi	r21, 0xD7	; 215
     218:	57 1c       	adc	r5, r7
     21a:	1c 5e       	subi	r17, 0xEC	; 236
     21c:	7f 5e       	subi	r23, 0xEF	; 239
     21e:	1c 00       	.word	0x001c	; ????
     220:	18 3c       	cpi	r17, 0xC8	; 200
     222:	18 00       	.word	0x0018	; ????
     224:	ff e7       	ldi	r31, 0x7F	; 127
     226:	c3 e7       	ldi	r28, 0x73	; 115
     228:	ff 00       	.word	0x00ff	; ????
     22a:	18 24       	eor	r1, r8
     22c:	18 00       	.word	0x0018	; ????
     22e:	ff e7       	ldi	r31, 0x7F	; 127
     230:	db e7       	ldi	r29, 0x7B	; 123
     232:	ff 30       	cpi	r31, 0x0F	; 15
     234:	48 3a       	cpi	r20, 0xA8	; 168
     236:	06 0e       	add	r0, r22
     238:	26 29       	or	r18, r6
     23a:	79 29       	or	r23, r9
     23c:	26 40       	sbci	r18, 0x06	; 6
     23e:	7f 05       	cpc	r23, r15
     240:	05 07       	cpc	r16, r21
     242:	40 7f       	andi	r20, 0xF0	; 240
     244:	05 25       	eor	r16, r5
     246:	3f 5a       	subi	r19, 0xAF	; 175
     248:	3c e7       	ldi	r19, 0x7C	; 124
     24a:	3c 5a       	subi	r19, 0xAC	; 172
     24c:	7f 3e       	cpi	r23, 0xEF	; 239
     24e:	1c 1c       	adc	r1, r12
     250:	08 08       	sbc	r0, r8
     252:	1c 1c       	adc	r1, r12
     254:	3e 7f       	andi	r19, 0xFE	; 254
     256:	14 22       	and	r1, r20
     258:	7f 22       	and	r7, r31
     25a:	14 5f       	subi	r17, 0xF4	; 244
     25c:	5f 00       	.word	0x005f	; ????
     25e:	5f 5f       	subi	r21, 0xFF	; 255
     260:	06 09       	sbc	r16, r6
     262:	7f 01       	movw	r14, r30
     264:	7f 00       	.word	0x007f	; ????
     266:	66 89       	ldd	r22, Z+22	; 0x16
     268:	95 6a       	ori	r25, 0xA5	; 165
     26a:	60 60       	ori	r22, 0x00	; 0
     26c:	60 60       	ori	r22, 0x00	; 0
     26e:	60 94       	com	r6
     270:	a2 ff       	sbrs	r26, 2
     272:	a2 94       	swap	r10
     274:	08 04       	cpc	r0, r8
     276:	7e 04       	cpc	r7, r14
     278:	08 10       	cpse	r0, r8
     27a:	20 7e       	andi	r18, 0xE0	; 224
     27c:	20 10       	cpse	r2, r0
     27e:	08 08       	sbc	r0, r8
     280:	2a 1c       	adc	r2, r10
     282:	08 08       	sbc	r0, r8
     284:	1c 2a       	or	r1, r28
     286:	08 08       	sbc	r0, r8
     288:	1e 10       	cpse	r1, r14
     28a:	10 10       	cpse	r1, r0
     28c:	10 0c       	add	r1, r0
     28e:	1e 0c       	add	r1, r14
     290:	1e 0c       	add	r1, r14
     292:	30 38       	cpi	r19, 0x80	; 128
     294:	3e 38       	cpi	r19, 0x8E	; 142
     296:	30 06       	cpc	r3, r16
     298:	0e 3e       	cpi	r16, 0xEE	; 238
     29a:	0e 06       	cpc	r0, r30
     29c:	00 00       	nop
     29e:	00 00       	nop
     2a0:	00 00       	nop
     2a2:	00 5f       	subi	r16, 0xF0	; 240
     2a4:	00 00       	nop
     2a6:	00 07       	cpc	r16, r16
     2a8:	00 07       	cpc	r16, r16
     2aa:	00 14       	cp	r0, r0
     2ac:	7f 14       	cp	r7, r15
     2ae:	7f 14       	cp	r7, r15
     2b0:	24 2a       	or	r2, r20
     2b2:	7f 2a       	or	r7, r31
     2b4:	12 23       	and	r17, r18
     2b6:	13 08       	sbc	r1, r3
     2b8:	64 62       	ori	r22, 0x24	; 36
     2ba:	36 49       	sbci	r19, 0x96	; 150
     2bc:	56 20       	and	r5, r6
     2be:	50 00       	.word	0x0050	; ????
     2c0:	08 07       	cpc	r16, r24
     2c2:	03 00       	.word	0x0003	; ????
     2c4:	00 1c       	adc	r0, r0
     2c6:	22 41       	sbci	r18, 0x12	; 18
     2c8:	00 00       	nop
     2ca:	41 22       	and	r4, r17
     2cc:	1c 00       	.word	0x001c	; ????
     2ce:	2a 1c       	adc	r2, r10
     2d0:	7f 1c       	adc	r7, r15
     2d2:	2a 08       	sbc	r2, r10
     2d4:	08 3e       	cpi	r16, 0xE8	; 232
     2d6:	08 08       	sbc	r0, r8
     2d8:	00 80       	ld	r0, Z
     2da:	70 30       	cpi	r23, 0x00	; 0
     2dc:	00 08       	sbc	r0, r0
     2de:	08 08       	sbc	r0, r8
     2e0:	08 08       	sbc	r0, r8
     2e2:	00 00       	nop
     2e4:	60 60       	ori	r22, 0x00	; 0
     2e6:	00 20       	and	r0, r0
     2e8:	10 08       	sbc	r1, r0
     2ea:	04 02       	muls	r16, r20
     2ec:	3e 51       	subi	r19, 0x1E	; 30
     2ee:	49 45       	sbci	r20, 0x59	; 89
     2f0:	3e 00       	.word	0x003e	; ????
     2f2:	42 7f       	andi	r20, 0xF2	; 242
     2f4:	40 00       	.word	0x0040	; ????
     2f6:	72 49       	sbci	r23, 0x92	; 146
     2f8:	49 49       	sbci	r20, 0x99	; 153
     2fa:	46 21       	and	r20, r6
     2fc:	41 49       	sbci	r20, 0x91	; 145
     2fe:	4d 33       	cpi	r20, 0x3D	; 61
     300:	18 14       	cp	r1, r8
     302:	12 7f       	andi	r17, 0xF2	; 242
     304:	10 27       	eor	r17, r16
     306:	45 45       	sbci	r20, 0x55	; 85
     308:	45 39       	cpi	r20, 0x95	; 149
     30a:	3c 4a       	sbci	r19, 0xAC	; 172
     30c:	49 49       	sbci	r20, 0x99	; 153
     30e:	31 41       	sbci	r19, 0x11	; 17
     310:	21 11       	cpse	r18, r1
     312:	09 07       	cpc	r16, r25
     314:	36 49       	sbci	r19, 0x96	; 150
     316:	49 49       	sbci	r20, 0x99	; 153
     318:	36 46       	sbci	r19, 0x66	; 102
     31a:	49 49       	sbci	r20, 0x99	; 153
     31c:	29 1e       	adc	r2, r25
     31e:	00 00       	nop
     320:	14 00       	.word	0x0014	; ????
     322:	00 00       	nop
     324:	40 34       	cpi	r20, 0x40	; 64
     326:	00 00       	nop
     328:	00 08       	sbc	r0, r0
     32a:	14 22       	and	r1, r20
     32c:	41 14       	cp	r4, r1
     32e:	14 14       	cp	r1, r4
     330:	14 14       	cp	r1, r4
     332:	00 41       	sbci	r16, 0x10	; 16
     334:	22 14       	cp	r2, r2
     336:	08 02       	muls	r16, r24
     338:	01 59       	subi	r16, 0x91	; 145
     33a:	09 06       	cpc	r0, r25
     33c:	3e 41       	sbci	r19, 0x1E	; 30
     33e:	5d 59       	subi	r21, 0x9D	; 157
     340:	4e 7c       	andi	r20, 0xCE	; 206
     342:	12 11       	cpse	r17, r2
     344:	12 7c       	andi	r17, 0xC2	; 194
     346:	7f 49       	sbci	r23, 0x9F	; 159
     348:	49 49       	sbci	r20, 0x99	; 153
     34a:	36 3e       	cpi	r19, 0xE6	; 230
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	41 22       	and	r4, r17
     350:	7f 41       	sbci	r23, 0x1F	; 31
     352:	41 41       	sbci	r20, 0x11	; 17
     354:	3e 7f       	andi	r19, 0xFE	; 254
     356:	49 49       	sbci	r20, 0x99	; 153
     358:	49 41       	sbci	r20, 0x19	; 25
     35a:	7f 09       	sbc	r23, r15
     35c:	09 09       	sbc	r16, r9
     35e:	01 3e       	cpi	r16, 0xE1	; 225
     360:	41 41       	sbci	r20, 0x11	; 17
     362:	51 73       	andi	r21, 0x31	; 49
     364:	7f 08       	sbc	r7, r15
     366:	08 08       	sbc	r0, r8
     368:	7f 00       	.word	0x007f	; ????
     36a:	41 7f       	andi	r20, 0xF1	; 241
     36c:	41 00       	.word	0x0041	; ????
     36e:	20 40       	sbci	r18, 0x00	; 0
     370:	41 3f       	cpi	r20, 0xF1	; 241
     372:	01 7f       	andi	r16, 0xF1	; 241
     374:	08 14       	cp	r0, r8
     376:	22 41       	sbci	r18, 0x12	; 18
     378:	7f 40       	sbci	r23, 0x0F	; 15
     37a:	40 40       	sbci	r20, 0x00	; 0
     37c:	40 7f       	andi	r20, 0xF0	; 240
     37e:	02 1c       	adc	r0, r2
     380:	02 7f       	andi	r16, 0xF2	; 242
     382:	7f 04       	cpc	r7, r15
     384:	08 10       	cpse	r0, r8
     386:	7f 3e       	cpi	r23, 0xEF	; 239
     388:	41 41       	sbci	r20, 0x11	; 17
     38a:	41 3e       	cpi	r20, 0xE1	; 225
     38c:	7f 09       	sbc	r23, r15
     38e:	09 09       	sbc	r16, r9
     390:	06 3e       	cpi	r16, 0xE6	; 230
     392:	41 51       	subi	r20, 0x11	; 17
     394:	21 5e       	subi	r18, 0xE1	; 225
     396:	7f 09       	sbc	r23, r15
     398:	19 29       	or	r17, r9
     39a:	46 26       	eor	r4, r22
     39c:	49 49       	sbci	r20, 0x99	; 153
     39e:	49 32       	cpi	r20, 0x29	; 41
     3a0:	03 01       	movw	r0, r6
     3a2:	7f 01       	movw	r14, r30
     3a4:	03 3f       	cpi	r16, 0xF3	; 243
     3a6:	40 40       	sbci	r20, 0x00	; 0
     3a8:	40 3f       	cpi	r20, 0xF0	; 240
     3aa:	1f 20       	and	r1, r15
     3ac:	40 20       	and	r4, r0
     3ae:	1f 3f       	cpi	r17, 0xFF	; 255
     3b0:	40 38       	cpi	r20, 0x80	; 128
     3b2:	40 3f       	cpi	r20, 0xF0	; 240
     3b4:	63 14       	cp	r6, r3
     3b6:	08 14       	cp	r0, r8
     3b8:	63 03       	mulsu	r22, r19
     3ba:	04 78       	andi	r16, 0x84	; 132
     3bc:	04 03       	mulsu	r16, r20
     3be:	61 59       	subi	r22, 0x91	; 145
     3c0:	49 4d       	sbci	r20, 0xD9	; 217
     3c2:	43 00       	.word	0x0043	; ????
     3c4:	7f 41       	sbci	r23, 0x1F	; 31
     3c6:	41 41       	sbci	r20, 0x11	; 17
     3c8:	02 04       	cpc	r0, r2
     3ca:	08 10       	cpse	r0, r8
     3cc:	20 00       	.word	0x0020	; ????
     3ce:	41 41       	sbci	r20, 0x11	; 17
     3d0:	41 7f       	andi	r20, 0xF1	; 241
     3d2:	04 02       	muls	r16, r20
     3d4:	01 02       	muls	r16, r17
     3d6:	04 40       	sbci	r16, 0x04	; 4
     3d8:	40 40       	sbci	r20, 0x00	; 0
     3da:	40 40       	sbci	r20, 0x00	; 0
     3dc:	00 03       	mulsu	r16, r16
     3de:	07 08       	sbc	r0, r7
     3e0:	00 20       	and	r0, r0
     3e2:	54 54       	subi	r21, 0x44	; 68
     3e4:	78 40       	sbci	r23, 0x08	; 8
     3e6:	7f 28       	or	r7, r15
     3e8:	44 44       	sbci	r20, 0x44	; 68
     3ea:	38 38       	cpi	r19, 0x88	; 136
     3ec:	44 44       	sbci	r20, 0x44	; 68
     3ee:	44 28       	or	r4, r4
     3f0:	38 44       	sbci	r19, 0x48	; 72
     3f2:	44 28       	or	r4, r4
     3f4:	7f 38       	cpi	r23, 0x8F	; 143
     3f6:	54 54       	subi	r21, 0x44	; 68
     3f8:	54 18       	sub	r5, r4
     3fa:	00 08       	sbc	r0, r0
     3fc:	7e 09       	sbc	r23, r14
     3fe:	02 18       	sub	r0, r2
     400:	a4 a4       	ldd	r10, Z+44	; 0x2c
     402:	9c 78       	andi	r25, 0x8C	; 140
     404:	7f 08       	sbc	r7, r15
     406:	04 04       	cpc	r0, r4
     408:	78 00       	.word	0x0078	; ????
     40a:	44 7d       	andi	r20, 0xD4	; 212
     40c:	40 00       	.word	0x0040	; ????
     40e:	20 40       	sbci	r18, 0x00	; 0
     410:	40 3d       	cpi	r20, 0xD0	; 208
     412:	00 7f       	andi	r16, 0xF0	; 240
     414:	10 28       	or	r1, r0
     416:	44 00       	.word	0x0044	; ????
     418:	00 41       	sbci	r16, 0x10	; 16
     41a:	7f 40       	sbci	r23, 0x0F	; 15
     41c:	00 7c       	andi	r16, 0xC0	; 192
     41e:	04 78       	andi	r16, 0x84	; 132
     420:	04 78       	andi	r16, 0x84	; 132
     422:	7c 08       	sbc	r7, r12
     424:	04 04       	cpc	r0, r4
     426:	78 38       	cpi	r23, 0x88	; 136
     428:	44 44       	sbci	r20, 0x44	; 68
     42a:	44 38       	cpi	r20, 0x84	; 132
     42c:	fc 18       	sub	r15, r12
     42e:	24 24       	eor	r2, r4
     430:	18 18       	sub	r1, r8
     432:	24 24       	eor	r2, r4
     434:	18 fc       	.word	0xfc18	; ????
     436:	7c 08       	sbc	r7, r12
     438:	04 04       	cpc	r0, r4
     43a:	08 48       	sbci	r16, 0x88	; 136
     43c:	54 54       	subi	r21, 0x44	; 68
     43e:	54 24       	eor	r5, r4
     440:	04 04       	cpc	r0, r4
     442:	3f 44       	sbci	r19, 0x4F	; 79
     444:	24 3c       	cpi	r18, 0xC4	; 196
     446:	40 40       	sbci	r20, 0x00	; 0
     448:	20 7c       	andi	r18, 0xC0	; 192
     44a:	1c 20       	and	r1, r12
     44c:	40 20       	and	r4, r0
     44e:	1c 3c       	cpi	r17, 0xCC	; 204
     450:	40 30       	cpi	r20, 0x00	; 0
     452:	40 3c       	cpi	r20, 0xC0	; 192
     454:	44 28       	or	r4, r4
     456:	10 28       	or	r1, r0
     458:	44 4c       	sbci	r20, 0xC4	; 196
     45a:	90 90 90 7c 	lds	r9, 0x7C90
     45e:	44 64       	ori	r20, 0x44	; 68
     460:	54 4c       	sbci	r21, 0xC4	; 196
     462:	44 00       	.word	0x0044	; ????
     464:	08 36       	cpi	r16, 0x68	; 104
     466:	41 00       	.word	0x0041	; ????
     468:	00 00       	nop
     46a:	77 00       	.word	0x0077	; ????
     46c:	00 00       	nop
     46e:	41 36       	cpi	r20, 0x61	; 97
     470:	08 00       	.word	0x0008	; ????
     472:	02 01       	movw	r0, r4
     474:	02 04       	cpc	r0, r2
     476:	02 3c       	cpi	r16, 0xC2	; 194
     478:	26 23       	and	r18, r22
     47a:	26 3c       	cpi	r18, 0xC6	; 198
     47c:	1e a1       	ldd	r17, Y+38	; 0x26
     47e:	a1 61       	ori	r26, 0x11	; 17
     480:	12 3a       	cpi	r17, 0xA2	; 162
     482:	40 40       	sbci	r20, 0x00	; 0
     484:	20 7a       	andi	r18, 0xA0	; 160
     486:	38 54       	subi	r19, 0x48	; 72
     488:	54 55       	subi	r21, 0x54	; 84
     48a:	59 21       	and	r21, r9
     48c:	55 55       	subi	r21, 0x55	; 85
     48e:	79 41       	sbci	r23, 0x19	; 25
     490:	21 54       	subi	r18, 0x41	; 65
     492:	54 78       	andi	r21, 0x84	; 132
     494:	41 21       	and	r20, r1
     496:	55 54       	subi	r21, 0x45	; 69
     498:	78 40       	sbci	r23, 0x08	; 8
     49a:	20 54       	subi	r18, 0x40	; 64
     49c:	55 79       	andi	r21, 0x95	; 149
     49e:	40 0c       	add	r4, r0
     4a0:	1e 52       	subi	r17, 0x2E	; 46
     4a2:	72 12       	cpse	r7, r18
     4a4:	39 55       	subi	r19, 0x59	; 89
     4a6:	55 55       	subi	r21, 0x55	; 85
     4a8:	59 39       	cpi	r21, 0x99	; 153
     4aa:	54 54       	subi	r21, 0x44	; 68
     4ac:	54 59       	subi	r21, 0x94	; 148
     4ae:	39 55       	subi	r19, 0x59	; 89
     4b0:	54 54       	subi	r21, 0x44	; 68
     4b2:	58 00       	.word	0x0058	; ????
     4b4:	00 45       	sbci	r16, 0x50	; 80
     4b6:	7c 41       	sbci	r23, 0x1C	; 28
     4b8:	00 02       	muls	r16, r16
     4ba:	45 7d       	andi	r20, 0xD5	; 213
     4bc:	42 00       	.word	0x0042	; ????
     4be:	01 45       	sbci	r16, 0x51	; 81
     4c0:	7c 40       	sbci	r23, 0x0C	; 12
     4c2:	f0 29       	or	r31, r0
     4c4:	24 29       	or	r18, r4
     4c6:	f0 f0       	brcs	.+60     	; 0x504 <__trampolines_end+0x308>
     4c8:	28 25       	eor	r18, r8
     4ca:	28 f0       	brcs	.+10     	; 0x4d6 <__trampolines_end+0x2da>
     4cc:	7c 54       	subi	r23, 0x4C	; 76
     4ce:	55 45       	sbci	r21, 0x55	; 85
     4d0:	00 20       	and	r0, r0
     4d2:	54 54       	subi	r21, 0x44	; 68
     4d4:	7c 54       	subi	r23, 0x4C	; 76
     4d6:	7c 0a       	sbc	r7, r28
     4d8:	09 7f       	andi	r16, 0xF9	; 249
     4da:	49 32       	cpi	r20, 0x29	; 41
     4dc:	49 49       	sbci	r20, 0x99	; 153
     4de:	49 32       	cpi	r20, 0x29	; 41
     4e0:	32 48       	sbci	r19, 0x82	; 130
     4e2:	48 48       	sbci	r20, 0x88	; 136
     4e4:	32 32       	cpi	r19, 0x22	; 34
     4e6:	4a 48       	sbci	r20, 0x8A	; 138
     4e8:	48 30       	cpi	r20, 0x08	; 8
     4ea:	3a 41       	sbci	r19, 0x1A	; 26
     4ec:	41 21       	and	r20, r1
     4ee:	7a 3a       	cpi	r23, 0xAA	; 170
     4f0:	42 40       	sbci	r20, 0x02	; 2
     4f2:	20 78       	andi	r18, 0x80	; 128
     4f4:	00 9d       	mul	r16, r0
     4f6:	a0 a0       	ldd	r10, Z+32	; 0x20
     4f8:	7d 39       	cpi	r23, 0x9D	; 157
     4fa:	44 44       	sbci	r20, 0x44	; 68
     4fc:	44 39       	cpi	r20, 0x94	; 148
     4fe:	3d 40       	sbci	r19, 0x0D	; 13
     500:	40 40       	sbci	r20, 0x00	; 0
     502:	3d 3c       	cpi	r19, 0xCD	; 205
     504:	24 ff       	sbrs	r18, 4
     506:	24 24       	eor	r2, r4
     508:	48 7e       	andi	r20, 0xE8	; 232
     50a:	49 43       	sbci	r20, 0x39	; 57
     50c:	66 2b       	or	r22, r22
     50e:	2f fc       	.word	0xfc2f	; ????
     510:	2f 2b       	or	r18, r31
     512:	ff 09       	sbc	r31, r15
     514:	29 f6       	brne	.-118    	; 0x4a0 <__trampolines_end+0x2a4>
     516:	20 c0       	rjmp	.+64     	; 0x558 <__trampolines_end+0x35c>
     518:	88 7e       	andi	r24, 0xE8	; 232
     51a:	09 03       	fmul	r16, r17
     51c:	20 54       	subi	r18, 0x40	; 64
     51e:	54 79       	andi	r21, 0x94	; 148
     520:	41 00       	.word	0x0041	; ????
     522:	00 44       	sbci	r16, 0x40	; 64
     524:	7d 41       	sbci	r23, 0x1D	; 29
     526:	30 48       	sbci	r19, 0x80	; 128
     528:	48 4a       	sbci	r20, 0xA8	; 168
     52a:	32 38       	cpi	r19, 0x82	; 130
     52c:	40 40       	sbci	r20, 0x00	; 0
     52e:	22 7a       	andi	r18, 0xA2	; 162
     530:	00 7a       	andi	r16, 0xA0	; 160
     532:	0a 0a       	sbc	r0, r26
     534:	72 7d       	andi	r23, 0xD2	; 210
     536:	0d 19       	sub	r16, r13
     538:	31 7d       	andi	r19, 0xD1	; 209
     53a:	26 29       	or	r18, r6
     53c:	29 2f       	mov	r18, r25
     53e:	28 26       	eor	r2, r24
     540:	29 29       	or	r18, r9
     542:	29 26       	eor	r2, r25
     544:	30 48       	sbci	r19, 0x80	; 128
     546:	4d 40       	sbci	r20, 0x0D	; 13
     548:	20 38       	cpi	r18, 0x80	; 128
     54a:	08 08       	sbc	r0, r8
     54c:	08 08       	sbc	r0, r8
     54e:	08 08       	sbc	r0, r8
     550:	08 08       	sbc	r0, r8
     552:	38 2f       	mov	r19, r24
     554:	10 c8       	rjmp	.-4064   	; 0xfffff576 <__eeprom_end+0xff7ef576>
     556:	ac ba       	out	0x1c, r10	; 28
     558:	2f 10       	cpse	r2, r15
     55a:	28 34       	cpi	r18, 0x48	; 72
     55c:	fa 00       	.word	0x00fa	; ????
     55e:	00 7b       	andi	r16, 0xB0	; 176
     560:	00 00       	nop
     562:	08 14       	cp	r0, r8
     564:	2a 14       	cp	r2, r10
     566:	22 22       	and	r2, r18
     568:	14 2a       	or	r1, r20
     56a:	14 08       	sbc	r1, r4
     56c:	aa 00       	.word	0x00aa	; ????
     56e:	55 00       	.word	0x0055	; ????
     570:	aa aa       	std	Y+50, r10	; 0x32
     572:	55 aa       	std	Z+53, r5	; 0x35
     574:	55 aa       	std	Z+53, r5	; 0x35
     576:	00 00       	nop
     578:	00 ff       	sbrs	r16, 0
     57a:	00 10       	cpse	r0, r0
     57c:	10 10       	cpse	r1, r0
     57e:	ff 00       	.word	0x00ff	; ????
     580:	14 14       	cp	r1, r4
     582:	14 ff       	sbrs	r17, 4
     584:	00 10       	cpse	r0, r0
     586:	10 ff       	sbrs	r17, 0
     588:	00 ff       	sbrs	r16, 0
     58a:	10 10       	cpse	r1, r0
     58c:	f0 10       	cpse	r15, r0
     58e:	f0 14       	cp	r15, r0
     590:	14 14       	cp	r1, r4
     592:	fc 00       	.word	0x00fc	; ????
     594:	14 14       	cp	r1, r4
     596:	f7 00       	.word	0x00f7	; ????
     598:	ff 00       	.word	0x00ff	; ????
     59a:	00 ff       	sbrs	r16, 0
     59c:	00 ff       	sbrs	r16, 0
     59e:	14 14       	cp	r1, r4
     5a0:	f4 04       	cpc	r15, r4
     5a2:	fc 14       	cp	r15, r12
     5a4:	14 17       	cp	r17, r20
     5a6:	10 1f       	adc	r17, r16
     5a8:	10 10       	cpse	r1, r0
     5aa:	1f 10       	cpse	r1, r15
     5ac:	1f 14       	cp	r1, r15
     5ae:	14 14       	cp	r1, r4
     5b0:	1f 00       	.word	0x001f	; ????
     5b2:	10 10       	cpse	r1, r0
     5b4:	10 f0       	brcs	.+4      	; 0x5ba <__trampolines_end+0x3be>
     5b6:	00 00       	nop
     5b8:	00 00       	nop
     5ba:	1f 10       	cpse	r1, r15
     5bc:	10 10       	cpse	r1, r0
     5be:	10 1f       	adc	r17, r16
     5c0:	10 10       	cpse	r1, r0
     5c2:	10 10       	cpse	r1, r0
     5c4:	f0 10       	cpse	r15, r0
     5c6:	00 00       	nop
     5c8:	00 ff       	sbrs	r16, 0
     5ca:	10 10       	cpse	r1, r0
     5cc:	10 10       	cpse	r1, r0
     5ce:	10 10       	cpse	r1, r0
     5d0:	10 10       	cpse	r1, r0
     5d2:	10 ff       	sbrs	r17, 0
     5d4:	10 00       	.word	0x0010	; ????
     5d6:	00 00       	nop
     5d8:	ff 14       	cp	r15, r15
     5da:	00 00       	nop
     5dc:	ff 00       	.word	0x00ff	; ????
     5de:	ff 00       	.word	0x00ff	; ????
     5e0:	00 1f       	adc	r16, r16
     5e2:	10 17       	cp	r17, r16
     5e4:	00 00       	nop
     5e6:	fc 04       	cpc	r15, r12
     5e8:	f4 14       	cp	r15, r4
     5ea:	14 17       	cp	r17, r20
     5ec:	10 17       	cp	r17, r16
     5ee:	14 14       	cp	r1, r4
     5f0:	f4 04       	cpc	r15, r4
     5f2:	f4 00       	.word	0x00f4	; ????
     5f4:	00 ff       	sbrs	r16, 0
     5f6:	00 f7       	brcc	.-64     	; 0x5b8 <__trampolines_end+0x3bc>
     5f8:	14 14       	cp	r1, r4
     5fa:	14 14       	cp	r1, r4
     5fc:	14 14       	cp	r1, r4
     5fe:	14 f7       	brge	.-60     	; 0x5c4 <__trampolines_end+0x3c8>
     600:	00 f7       	brcc	.-64     	; 0x5c2 <__trampolines_end+0x3c6>
     602:	14 14       	cp	r1, r4
     604:	14 17       	cp	r17, r20
     606:	14 10       	cpse	r1, r4
     608:	10 1f       	adc	r17, r16
     60a:	10 1f       	adc	r17, r16
     60c:	14 14       	cp	r1, r4
     60e:	14 f4       	brge	.+4      	; 0x614 <__trampolines_end+0x418>
     610:	14 10       	cpse	r1, r4
     612:	10 f0       	brcs	.+4      	; 0x618 <__trampolines_end+0x41c>
     614:	10 f0       	brcs	.+4      	; 0x61a <__trampolines_end+0x41e>
     616:	00 00       	nop
     618:	1f 10       	cpse	r1, r15
     61a:	1f 00       	.word	0x001f	; ????
     61c:	00 00       	nop
     61e:	1f 14       	cp	r1, r15
     620:	00 00       	nop
     622:	00 fc       	sbrc	r0, 0
     624:	14 00       	.word	0x0014	; ????
     626:	00 f0       	brcs	.+0      	; 0x628 <__trampolines_end+0x42c>
     628:	10 f0       	brcs	.+4      	; 0x62e <__trampolines_end+0x432>
     62a:	10 10       	cpse	r1, r0
     62c:	ff 10       	cpse	r15, r15
     62e:	ff 14       	cp	r15, r15
     630:	14 14       	cp	r1, r4
     632:	ff 14       	cp	r15, r15
     634:	10 10       	cpse	r1, r0
     636:	10 1f       	adc	r17, r16
     638:	00 00       	nop
     63a:	00 00       	nop
     63c:	f0 10       	cpse	r15, r0
     63e:	ff ff       	.word	0xffff	; ????
     640:	ff ff       	.word	0xffff	; ????
     642:	ff f0       	brie	.+62     	; 0x682 <__trampolines_end+0x486>
     644:	f0 f0       	brcs	.+60     	; 0x682 <__trampolines_end+0x486>
     646:	f0 f0       	brcs	.+60     	; 0x684 <__trampolines_end+0x488>
     648:	ff ff       	.word	0xffff	; ????
     64a:	ff 00       	.word	0x00ff	; ????
     64c:	00 00       	nop
     64e:	00 00       	nop
     650:	ff ff       	.word	0xffff	; ????
     652:	0f 0f       	add	r16, r31
     654:	0f 0f       	add	r16, r31
     656:	0f 38       	cpi	r16, 0x8F	; 143
     658:	44 44       	sbci	r20, 0x44	; 68
     65a:	38 44       	sbci	r19, 0x48	; 72
     65c:	7c 2a       	or	r7, r28
     65e:	2a 3e       	cpi	r18, 0xEA	; 234
     660:	14 7e       	andi	r17, 0xE4	; 228
     662:	02 02       	muls	r16, r18
     664:	06 06       	cpc	r0, r22
     666:	02 7e       	andi	r16, 0xE2	; 226
     668:	02 7e       	andi	r16, 0xE2	; 226
     66a:	02 63       	ori	r16, 0x32	; 50
     66c:	55 49       	sbci	r21, 0x95	; 149
     66e:	41 63       	ori	r20, 0x31	; 49
     670:	38 44       	sbci	r19, 0x48	; 72
     672:	44 3c       	cpi	r20, 0xC4	; 196
     674:	04 40       	sbci	r16, 0x04	; 4
     676:	7e 20       	and	r7, r14
     678:	1e 20       	and	r1, r14
     67a:	06 02       	muls	r16, r22
     67c:	7e 02       	muls	r23, r30
     67e:	02 99       	sbic	0x00, 2	; 0
     680:	a5 e7       	ldi	r26, 0x75	; 117
     682:	a5 99       	sbic	0x14, 5	; 20
     684:	1c 2a       	or	r1, r28
     686:	49 2a       	or	r4, r25
     688:	1c 4c       	sbci	r17, 0xCC	; 204
     68a:	72 01       	movw	r14, r4
     68c:	72 4c       	sbci	r23, 0xC2	; 194
     68e:	30 4a       	sbci	r19, 0xA0	; 160
     690:	4d 4d       	sbci	r20, 0xDD	; 221
     692:	30 30       	cpi	r19, 0x00	; 0
     694:	48 78       	andi	r20, 0x88	; 136
     696:	48 30       	cpi	r20, 0x08	; 8
     698:	bc 62       	ori	r27, 0x2C	; 44
     69a:	5a 46       	sbci	r21, 0x6A	; 106
     69c:	3d 3e       	cpi	r19, 0xED	; 237
     69e:	49 49       	sbci	r20, 0x99	; 153
     6a0:	49 00       	.word	0x0049	; ????
     6a2:	7e 01       	movw	r14, r28
     6a4:	01 01       	movw	r0, r2
     6a6:	7e 2a       	or	r7, r30
     6a8:	2a 2a       	or	r2, r26
     6aa:	2a 2a       	or	r2, r26
     6ac:	44 44       	sbci	r20, 0x44	; 68
     6ae:	5f 44       	sbci	r21, 0x4F	; 79
     6b0:	44 40       	sbci	r20, 0x04	; 4
     6b2:	51 4a       	sbci	r21, 0xA1	; 161
     6b4:	44 40       	sbci	r20, 0x04	; 4
     6b6:	40 44       	sbci	r20, 0x40	; 64
     6b8:	4a 51       	subi	r20, 0x1A	; 26
     6ba:	40 00       	.word	0x0040	; ????
     6bc:	00 ff       	sbrs	r16, 0
     6be:	01 03       	mulsu	r16, r17
     6c0:	e0 80       	ld	r14, Z
     6c2:	ff 00       	.word	0x00ff	; ????
     6c4:	00 08       	sbc	r0, r0
     6c6:	08 6b       	ori	r16, 0xB8	; 184
     6c8:	6b 08       	sbc	r6, r11
     6ca:	36 12       	cpse	r3, r22
     6cc:	36 24       	eor	r3, r6
     6ce:	36 06       	cpc	r3, r22
     6d0:	0f 09       	sbc	r16, r15
     6d2:	0f 06       	cpc	r0, r31
     6d4:	00 00       	nop
     6d6:	18 18       	sub	r1, r8
     6d8:	00 00       	nop
     6da:	00 10       	cpse	r0, r0
     6dc:	10 00       	.word	0x0010	; ????
     6de:	30 40       	sbci	r19, 0x00	; 0
     6e0:	ff 01       	movw	r30, r30
     6e2:	01 00       	.word	0x0001	; ????
     6e4:	1f 01       	movw	r2, r30
     6e6:	01 1e       	adc	r0, r17
     6e8:	00 19       	sub	r16, r0
     6ea:	1d 17       	cp	r17, r29
     6ec:	12 00       	.word	0x0012	; ????
     6ee:	3c 3c       	cpi	r19, 0xCC	; 204
     6f0:	3c 3c       	cpi	r19, 0xCC	; 204
     6f2:	00 00       	nop
     6f4:	00 00       	nop
	...

000006f8 <__ctors_end>:
     6f8:	11 24       	eor	r1, r1
     6fa:	1f be       	out	0x3f, r1	; 63
     6fc:	cf ef       	ldi	r28, 0xFF	; 255
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	df e2       	ldi	r29, 0x2F	; 47
     702:	de bf       	out	0x3e, r29	; 62

00000704 <__do_copy_data>:
     704:	11 e2       	ldi	r17, 0x21	; 33
     706:	a0 e0       	ldi	r26, 0x00	; 0
     708:	b0 e2       	ldi	r27, 0x20	; 32
     70a:	e2 eb       	ldi	r30, 0xB2	; 178
     70c:	fa e3       	ldi	r31, 0x3A	; 58
     70e:	00 e0       	ldi	r16, 0x00	; 0
     710:	0b bf       	out	0x3b, r16	; 59
     712:	02 c0       	rjmp	.+4      	; 0x718 <__do_copy_data+0x14>
     714:	07 90       	elpm	r0, Z+
     716:	0d 92       	st	X+, r0
     718:	a6 37       	cpi	r26, 0x76	; 118
     71a:	b1 07       	cpc	r27, r17
     71c:	d9 f7       	brne	.-10     	; 0x714 <__do_copy_data+0x10>

0000071e <__do_clear_bss>:
     71e:	26 e2       	ldi	r18, 0x26	; 38
     720:	a6 e7       	ldi	r26, 0x76	; 118
     722:	b1 e2       	ldi	r27, 0x21	; 33
     724:	01 c0       	rjmp	.+2      	; 0x728 <.do_clear_bss_start>

00000726 <.do_clear_bss_loop>:
     726:	1d 92       	st	X+, r1

00000728 <.do_clear_bss_start>:
     728:	a0 31       	cpi	r26, 0x10	; 16
     72a:	b2 07       	cpc	r27, r18
     72c:	e1 f7       	brne	.-8      	; 0x726 <.do_clear_bss_loop>
     72e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <main>
     732:	0c 94 57 1d 	jmp	0x3aae	; 0x3aae <_exit>

00000736 <__bad_interrupt>:
     736:	64 cc       	rjmp	.-1848   	; 0x0 <__vectors>

00000738 <clock_setup_32_mhz>:
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
}

void clock_setup_32_mhz(void) {
	
	OSC.CTRL |= OSC_RC32MEN_bm;
     738:	80 91 50 00 	lds	r24, 0x0050
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
     742:	80 91 51 00 	lds	r24, 0x0051
     746:	81 ff       	sbrs	r24, 1
     748:	fc cf       	rjmp	.-8      	; 0x742 <clock_setup_32_mhz+0xa>
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
     74a:	88 ed       	ldi	r24, 0xD8	; 216
     74c:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal  32Mhz crystal
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 40 00 	sts	0x0040, r24
     754:	08 95       	ret

00000756 <__vector_88>:
 _delay_ms (100);
 
 // drop to here and wait for next request.
}

ISR(USARTD0_RXC_vect) {
     756:	1f 92       	push	r1
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	0f 92       	push	r0
     75e:	11 24       	eor	r1, r1
     760:	0b b6       	in	r0, 0x3b	; 59
     762:	0f 92       	push	r0
     764:	2f 93       	push	r18
     766:	3f 93       	push	r19
     768:	8f 93       	push	r24
     76a:	9f 93       	push	r25
     76c:	ef 93       	push	r30
     76e:	ff 93       	push	r31
	rx_buffer[rx_ptr++] = USARTD0.DATA;
     770:	80 91 5e 25 	lds	r24, 0x255E
     774:	90 91 5f 25 	lds	r25, 0x255F
     778:	9c 01       	movw	r18, r24
     77a:	2f 5f       	subi	r18, 0xFF	; 255
     77c:	3f 4f       	sbci	r19, 0xFF	; 255
     77e:	20 93 5e 25 	sts	0x255E, r18
     782:	30 93 5f 25 	sts	0x255F, r19
     786:	20 91 a0 09 	lds	r18, 0x09A0
     78a:	fc 01       	movw	r30, r24
     78c:	ea 58       	subi	r30, 0x8A	; 138
     78e:	fe 4d       	sbci	r31, 0xDE	; 222
     790:	20 83       	st	Z, r18
     792:	ff 91       	pop	r31
     794:	ef 91       	pop	r30
     796:	9f 91       	pop	r25
     798:	8f 91       	pop	r24
     79a:	3f 91       	pop	r19
     79c:	2f 91       	pop	r18
     79e:	0f 90       	pop	r0
     7a0:	0b be       	out	0x3b, r0	; 59
     7a2:	0f 90       	pop	r0
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	0f 90       	pop	r0
     7a8:	1f 90       	pop	r1
     7aa:	18 95       	reti

000007ac <__vector_14>:

/*-----------------------------------------------------*/
/* Sound sampling ISR                                  */

ISR(TCC0_OVF_vect)
{
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	0f 92       	push	r0
     7b4:	11 24       	eor	r1, r1
     7b6:	0b b6       	in	r0, 0x3b	; 59
     7b8:	0f 92       	push	r0
     7ba:	cf 92       	push	r12
     7bc:	df 92       	push	r13
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	2f 93       	push	r18
     7c4:	3f 93       	push	r19
     7c6:	4f 93       	push	r20
     7c8:	5f 93       	push	r21
     7ca:	6f 93       	push	r22
     7cc:	7f 93       	push	r23
     7ce:	8f 93       	push	r24
     7d0:	9f 93       	push	r25
     7d2:	af 93       	push	r26
     7d4:	bf 93       	push	r27
     7d6:	ef 93       	push	r30
     7d8:	ff 93       	push	r31
	WAVFIFO *fcb = WavFifo;	/* Pointer to FIFO controls */
     7da:	e0 91 fa 25 	lds	r30, 0x25FA
     7de:	f0 91 fb 25 	lds	r31, 0x25FB
	UINT ri, ct;
	BYTE *buff, l1, l2, r1, r2;
	
	if (!fcb) return;
     7e2:	30 97       	sbiw	r30, 0x00	; 0
     7e4:	09 f4       	brne	.+2      	; 0x7e8 <__vector_14+0x3c>
     7e6:	5f c0       	rjmp	.+190    	; 0x8a6 <__vector_14+0xfa>
	ct = fcb->ct; ri = fcb->ri;
     7e8:	46 81       	ldd	r20, Z+6	; 0x06
     7ea:	57 81       	ldd	r21, Z+7	; 0x07
     7ec:	22 81       	ldd	r18, Z+2	; 0x02
     7ee:	33 81       	ldd	r19, Z+3	; 0x03
	buff = fcb->buff + ri;
     7f0:	a0 85       	ldd	r26, Z+8	; 0x08
     7f2:	b1 85       	ldd	r27, Z+9	; 0x09
     7f4:	a2 0f       	add	r26, r18
     7f6:	b3 1f       	adc	r27, r19

	switch (fcb->mode) {
     7f8:	80 81       	ld	r24, Z
     7fa:	91 81       	ldd	r25, Z+1	; 0x01
     7fc:	81 30       	cpi	r24, 0x01	; 1
     7fe:	91 05       	cpc	r25, r1
     800:	89 f0       	breq	.+34     	; 0x824 <__vector_14+0x78>
     802:	08 f4       	brcc	.+2      	; 0x806 <__vector_14+0x5a>
     804:	67 c0       	rjmp	.+206    	; 0x8d4 <__vector_14+0x128>
     806:	02 97       	sbiw	r24, 0x02	; 2
     808:	09 f0       	breq	.+2      	; 0x80c <__vector_14+0x60>
     80a:	6d c0       	rjmp	.+218    	; 0x8e6 <__vector_14+0x13a>
		if (ct < 2) return;
		l1 = buff[0]; r2 = buff[1];
		ct -= 2; ri += 2;
		break;
		case 2:		/* Mono, 16bit */
		if (ct < 2) return;
     80c:	42 30       	cpi	r20, 0x02	; 2
     80e:	51 05       	cpc	r21, r1
     810:	08 f4       	brcc	.+2      	; 0x814 <__vector_14+0x68>
     812:	49 c0       	rjmp	.+146    	; 0x8a6 <__vector_14+0xfa>
		l1 = r2 = buff[1] + 128;
     814:	11 96       	adiw	r26, 0x01	; 1
     816:	6c 91       	ld	r22, X
     818:	60 58       	subi	r22, 0x80	; 128
		ct -= 2; ri += 2;
     81a:	42 50       	subi	r20, 0x02	; 2
     81c:	51 09       	sbc	r21, r1
     81e:	2e 5f       	subi	r18, 0xFE	; 254
     820:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
     822:	08 c0       	rjmp	.+16     	; 0x834 <__vector_14+0x88>
		if (ct < 1) return;
		l1 = r2 = buff[0];
		ct -= 1; ri += 1;
		break;
		case 1:		/* Stereo, 8bit */
		if (ct < 2) return;
     824:	42 30       	cpi	r20, 0x02	; 2
     826:	51 05       	cpc	r21, r1
     828:	f0 f1       	brcs	.+124    	; 0x8a6 <__vector_14+0xfa>
		l1 = buff[0]; r2 = buff[1];
     82a:	6c 91       	ld	r22, X
		ct -= 2; ri += 2;
     82c:	42 50       	subi	r20, 0x02	; 2
     82e:	51 09       	sbc	r21, r1
     830:	2e 5f       	subi	r18, 0xFE	; 254
     832:	3f 4f       	sbci	r19, 0xFF	; 255
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
		ri += 4;
	}
	fcb->ct = ct;
     834:	46 83       	std	Z+6, r20	; 0x06
     836:	57 83       	std	Z+7, r21	; 0x07
	fcb->ri = ri & (fcb->sz_buff - 1);
     838:	82 85       	ldd	r24, Z+10	; 0x0a
     83a:	93 85       	ldd	r25, Z+11	; 0x0b
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	82 23       	and	r24, r18
     840:	93 23       	and	r25, r19
     842:	82 83       	std	Z+2, r24	; 0x02
     844:	93 83       	std	Z+3, r25	; 0x03
	result = integer + 0x7FFF;
	return(result >> 4);
}

static inline uint8_t smooth(uint8_t data, float filterVal, float smoothedVal){
	return (int)(((data * (1 - filterVal)) + (smoothedVal  *  filterVal)));
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 12 19 	call	0x3224	; 0x3224 <__floatsisf>
     850:	2a e9       	ldi	r18, 0x9A	; 154
     852:	39 e9       	ldi	r19, 0x99	; 153
     854:	49 e1       	ldi	r20, 0x19	; 25
     856:	5f e3       	ldi	r21, 0x3F	; 63
     858:	0e 94 9e 19 	call	0x333c	; 0x333c <__mulsf3>
     85c:	6b 01       	movw	r12, r22
     85e:	7c 01       	movw	r14, r24
		ri += 4;
	}
	fcb->ct = ct;
	fcb->ri = ri & (fcb->sz_buff - 1);
	
	uint8_t data = smooth(l1,0.4,data);
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	cb 01       	movw	r24, r22
     866:	0e 94 10 19 	call	0x3220	; 0x3220 <__floatunsisf>
	result = integer + 0x7FFF;
	return(result >> 4);
}

static inline uint8_t smooth(uint8_t data, float filterVal, float smoothedVal){
	return (int)(((data * (1 - filterVal)) + (smoothedVal  *  filterVal)));
     86a:	2d ec       	ldi	r18, 0xCD	; 205
     86c:	3c ec       	ldi	r19, 0xCC	; 204
     86e:	4c ec       	ldi	r20, 0xCC	; 204
     870:	5e e3       	ldi	r21, 0x3E	; 62
     872:	0e 94 9e 19 	call	0x333c	; 0x333c <__mulsf3>
     876:	9b 01       	movw	r18, r22
     878:	ac 01       	movw	r20, r24
     87a:	c7 01       	movw	r24, r14
     87c:	b6 01       	movw	r22, r12
     87e:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <__addsf3>
     882:	0e 94 df 18 	call	0x31be	; 0x31be <__fixsfsi>
	fcb->ri = ri & (fcb->sz_buff - 1);
	
	uint8_t data = smooth(l1,0.4,data);
	//uint8_t data = l1*0.2;
	
	DACB.CH0DATA = 255+data;//<< 2;
     886:	77 27       	eor	r23, r23
     888:	cb 01       	movw	r24, r22
     88a:	81 50       	subi	r24, 0x01	; 1
     88c:	9f 4f       	sbci	r25, 0xFF	; 255
     88e:	80 93 38 03 	sts	0x0338, r24
     892:	90 93 39 03 	sts	0x0339, r25
	DACB.CH1DATA = 255-data;//<< 2;
     896:	8f ef       	ldi	r24, 0xFF	; 255
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	86 1b       	sub	r24, r22
     89c:	97 0b       	sbc	r25, r23
     89e:	80 93 3a 03 	sts	0x033A, r24
     8a2:	90 93 3b 03 	sts	0x033B, r25
}
     8a6:	ff 91       	pop	r31
     8a8:	ef 91       	pop	r30
     8aa:	bf 91       	pop	r27
     8ac:	af 91       	pop	r26
     8ae:	9f 91       	pop	r25
     8b0:	8f 91       	pop	r24
     8b2:	7f 91       	pop	r23
     8b4:	6f 91       	pop	r22
     8b6:	5f 91       	pop	r21
     8b8:	4f 91       	pop	r20
     8ba:	3f 91       	pop	r19
     8bc:	2f 91       	pop	r18
     8be:	ff 90       	pop	r15
     8c0:	ef 90       	pop	r14
     8c2:	df 90       	pop	r13
     8c4:	cf 90       	pop	r12
     8c6:	0f 90       	pop	r0
     8c8:	0b be       	out	0x3b, r0	; 59
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti
	ct = fcb->ct; ri = fcb->ri;
	buff = fcb->buff + ri;

	switch (fcb->mode) {
		case 0:		/* Mono, 8bit */
		if (ct < 1) return;
     8d4:	41 15       	cp	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	31 f3       	breq	.-52     	; 0x8a6 <__vector_14+0xfa>
		l1 = r2 = buff[0];
     8da:	6c 91       	ld	r22, X
		ct -= 1; ri += 1;
     8dc:	41 50       	subi	r20, 0x01	; 1
     8de:	51 09       	sbc	r21, r1
     8e0:	2f 5f       	subi	r18, 0xFF	; 255
     8e2:	3f 4f       	sbci	r19, 0xFF	; 255
		break;
     8e4:	a7 cf       	rjmp	.-178    	; 0x834 <__vector_14+0x88>
		if (ct < 2) return;
		l1 = r2 = buff[1] + 128;
		ct -= 2; ri += 2;
		break;
		default:	/* Stereo, 16bit */
		if (ct < 4) return;
     8e6:	44 30       	cpi	r20, 0x04	; 4
     8e8:	51 05       	cpc	r21, r1
     8ea:	e8 f2       	brcs	.-70     	; 0x8a6 <__vector_14+0xfa>
		l2 = buff[0]; 
		l1 = buff[1];
     8ec:	11 96       	adiw	r26, 0x01	; 1
     8ee:	6c 91       	ld	r22, X
		r2 = buff[2];
		r1 = buff[3];
		ct -= 4; 
     8f0:	44 50       	subi	r20, 0x04	; 4
     8f2:	51 09       	sbc	r21, r1
		ri += 4;
     8f4:	2c 5f       	subi	r18, 0xFC	; 252
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	9d cf       	rjmp	.-198    	; 0x834 <__vector_14+0x88>

000008fa <ht1632c_setup>:
	for (i = (WIDTH*2); i > -((int16_t)length); i--) {
		ht1632c_set_cursor(i,5);
		ht1632c_print(str);
		_delay_ms(100);
	}
}
     8fa:	41 e0       	ldi	r20, 0x01	; 1
     8fc:	40 93 81 06 	sts	0x0681, r20
     900:	40 93 85 06 	sts	0x0685, r20
     904:	24 e0       	ldi	r18, 0x04	; 4
     906:	20 93 81 06 	sts	0x0681, r18
     90a:	20 93 85 06 	sts	0x0685, r18
     90e:	38 e0       	ldi	r19, 0x08	; 8
     910:	30 93 81 06 	sts	0x0681, r19
     914:	40 93 86 06 	sts	0x0686, r20
     918:	30 93 81 06 	sts	0x0681, r19
     91c:	20 93 86 06 	sts	0x0686, r18
     920:	30 93 85 06 	sts	0x0685, r19
     924:	20 93 85 06 	sts	0x0685, r18
     928:	20 93 86 06 	sts	0x0686, r18
     92c:	30 93 86 06 	sts	0x0686, r19
     930:	20 93 85 06 	sts	0x0685, r18
     934:	20 93 86 06 	sts	0x0686, r18
     938:	30 93 86 06 	sts	0x0686, r19
     93c:	20 93 85 06 	sts	0x0685, r18
     940:	20 93 86 06 	sts	0x0686, r18
     944:	30 93 86 06 	sts	0x0686, r19
     948:	20 93 85 06 	sts	0x0685, r18
     94c:	20 93 86 06 	sts	0x0686, r18
     950:	30 93 86 06 	sts	0x0686, r19
     954:	20 93 85 06 	sts	0x0685, r18
     958:	20 93 86 06 	sts	0x0686, r18
     95c:	30 93 86 06 	sts	0x0686, r19
     960:	20 93 85 06 	sts	0x0685, r18
     964:	20 93 86 06 	sts	0x0686, r18
     968:	30 93 86 06 	sts	0x0686, r19
     96c:	20 93 85 06 	sts	0x0685, r18
     970:	20 93 86 06 	sts	0x0686, r18
     974:	30 93 86 06 	sts	0x0686, r19
     978:	20 93 85 06 	sts	0x0685, r18
     97c:	20 93 86 06 	sts	0x0686, r18
     980:	30 93 86 06 	sts	0x0686, r19
     984:	20 93 85 06 	sts	0x0685, r18
     988:	20 93 86 06 	sts	0x0686, r18
     98c:	30 93 86 06 	sts	0x0686, r19
     990:	20 93 85 06 	sts	0x0685, r18
     994:	20 93 86 06 	sts	0x0686, r18
     998:	30 93 85 06 	sts	0x0685, r19
     99c:	20 93 85 06 	sts	0x0685, r18
     9a0:	20 93 86 06 	sts	0x0686, r18
     9a4:	30 93 86 06 	sts	0x0686, r19
     9a8:	20 93 85 06 	sts	0x0685, r18
     9ac:	30 93 86 06 	sts	0x0686, r19
     9b0:	40 93 85 06 	sts	0x0685, r20
     9b4:	40 93 86 06 	sts	0x0686, r20
     9b8:	30 93 81 06 	sts	0x0681, r19
     9bc:	20 93 86 06 	sts	0x0686, r18
     9c0:	30 93 85 06 	sts	0x0685, r19
     9c4:	20 93 85 06 	sts	0x0685, r18
     9c8:	20 93 86 06 	sts	0x0686, r18
     9cc:	30 93 86 06 	sts	0x0686, r19
     9d0:	20 93 85 06 	sts	0x0685, r18
     9d4:	20 93 86 06 	sts	0x0686, r18
     9d8:	30 93 86 06 	sts	0x0686, r19
     9dc:	20 93 85 06 	sts	0x0685, r18
     9e0:	20 93 86 06 	sts	0x0686, r18
     9e4:	30 93 86 06 	sts	0x0686, r19
     9e8:	20 93 85 06 	sts	0x0685, r18
     9ec:	20 93 86 06 	sts	0x0686, r18
     9f0:	30 93 86 06 	sts	0x0686, r19
     9f4:	20 93 85 06 	sts	0x0685, r18
     9f8:	20 93 86 06 	sts	0x0686, r18
     9fc:	30 93 86 06 	sts	0x0686, r19
     a00:	20 93 85 06 	sts	0x0685, r18
     a04:	20 93 86 06 	sts	0x0686, r18
     a08:	30 93 86 06 	sts	0x0686, r19
     a0c:	20 93 85 06 	sts	0x0685, r18
     a10:	20 93 86 06 	sts	0x0686, r18
     a14:	30 93 86 06 	sts	0x0686, r19
     a18:	20 93 85 06 	sts	0x0685, r18
     a1c:	20 93 86 06 	sts	0x0686, r18
     a20:	30 93 86 06 	sts	0x0686, r19
     a24:	20 93 85 06 	sts	0x0685, r18
     a28:	20 93 86 06 	sts	0x0686, r18
     a2c:	30 93 85 06 	sts	0x0685, r19
     a30:	20 93 85 06 	sts	0x0685, r18
     a34:	20 93 86 06 	sts	0x0686, r18
     a38:	30 93 85 06 	sts	0x0685, r19
     a3c:	20 93 85 06 	sts	0x0685, r18
     a40:	20 93 86 06 	sts	0x0686, r18
     a44:	30 93 86 06 	sts	0x0686, r19
     a48:	20 93 85 06 	sts	0x0685, r18
     a4c:	30 93 86 06 	sts	0x0686, r19
     a50:	40 93 85 06 	sts	0x0685, r20
     a54:	40 93 86 06 	sts	0x0686, r20
     a58:	30 93 81 06 	sts	0x0681, r19
     a5c:	20 93 86 06 	sts	0x0686, r18
     a60:	30 93 85 06 	sts	0x0685, r19
     a64:	20 93 85 06 	sts	0x0685, r18
     a68:	20 93 86 06 	sts	0x0686, r18
     a6c:	30 93 86 06 	sts	0x0686, r19
     a70:	20 93 85 06 	sts	0x0685, r18
     a74:	20 93 86 06 	sts	0x0686, r18
     a78:	30 93 86 06 	sts	0x0686, r19
     a7c:	20 93 85 06 	sts	0x0685, r18
     a80:	20 93 86 06 	sts	0x0686, r18
     a84:	30 93 86 06 	sts	0x0686, r19
     a88:	20 93 85 06 	sts	0x0685, r18
     a8c:	20 93 86 06 	sts	0x0686, r18
     a90:	30 93 86 06 	sts	0x0686, r19
     a94:	20 93 85 06 	sts	0x0685, r18
     a98:	20 93 86 06 	sts	0x0686, r18
     a9c:	30 93 86 06 	sts	0x0686, r19
     aa0:	20 93 85 06 	sts	0x0685, r18
     aa4:	20 93 86 06 	sts	0x0686, r18
     aa8:	30 93 86 06 	sts	0x0686, r19
     aac:	20 93 85 06 	sts	0x0685, r18
     ab0:	20 93 86 06 	sts	0x0686, r18
     ab4:	30 93 85 06 	sts	0x0685, r19
     ab8:	20 93 85 06 	sts	0x0685, r18
     abc:	20 93 86 06 	sts	0x0686, r18
     ac0:	30 93 86 06 	sts	0x0686, r19
     ac4:	20 93 85 06 	sts	0x0685, r18
     ac8:	20 93 86 06 	sts	0x0686, r18
     acc:	30 93 86 06 	sts	0x0686, r19
     ad0:	20 93 85 06 	sts	0x0685, r18
     ad4:	20 93 86 06 	sts	0x0686, r18
     ad8:	30 93 86 06 	sts	0x0686, r19
     adc:	20 93 85 06 	sts	0x0685, r18
     ae0:	20 93 86 06 	sts	0x0686, r18
     ae4:	30 93 86 06 	sts	0x0686, r19
     ae8:	20 93 85 06 	sts	0x0685, r18
     aec:	30 93 86 06 	sts	0x0686, r19
     af0:	40 93 85 06 	sts	0x0685, r20
     af4:	40 93 86 06 	sts	0x0686, r20
     af8:	30 93 81 06 	sts	0x0681, r19
     afc:	20 93 86 06 	sts	0x0686, r18
     b00:	30 93 85 06 	sts	0x0685, r19
     b04:	20 93 85 06 	sts	0x0685, r18
     b08:	20 93 86 06 	sts	0x0686, r18
     b0c:	30 93 86 06 	sts	0x0686, r19
     b10:	20 93 85 06 	sts	0x0685, r18
     b14:	20 93 86 06 	sts	0x0686, r18
     b18:	30 93 86 06 	sts	0x0686, r19
     b1c:	20 93 85 06 	sts	0x0685, r18
     b20:	20 93 86 06 	sts	0x0686, r18
     b24:	30 93 86 06 	sts	0x0686, r19
     b28:	20 93 85 06 	sts	0x0685, r18
     b2c:	20 93 86 06 	sts	0x0686, r18
     b30:	30 93 86 06 	sts	0x0686, r19
     b34:	20 93 85 06 	sts	0x0685, r18
     b38:	20 93 86 06 	sts	0x0686, r18
     b3c:	30 93 86 06 	sts	0x0686, r19
     b40:	20 93 85 06 	sts	0x0685, r18
     b44:	20 93 86 06 	sts	0x0686, r18
     b48:	30 93 85 06 	sts	0x0685, r19
     b4c:	20 93 85 06 	sts	0x0685, r18
     b50:	20 93 86 06 	sts	0x0686, r18
     b54:	30 93 86 06 	sts	0x0686, r19
     b58:	20 93 85 06 	sts	0x0685, r18
     b5c:	20 93 86 06 	sts	0x0686, r18
     b60:	30 93 85 06 	sts	0x0685, r19
     b64:	20 93 85 06 	sts	0x0685, r18
     b68:	20 93 86 06 	sts	0x0686, r18
     b6c:	30 93 86 06 	sts	0x0686, r19
     b70:	20 93 85 06 	sts	0x0685, r18
     b74:	20 93 86 06 	sts	0x0686, r18
     b78:	30 93 86 06 	sts	0x0686, r19
     b7c:	20 93 85 06 	sts	0x0685, r18
     b80:	20 93 86 06 	sts	0x0686, r18
     b84:	30 93 86 06 	sts	0x0686, r19
     b88:	20 93 85 06 	sts	0x0685, r18
     b8c:	30 93 86 06 	sts	0x0686, r19
     b90:	40 93 85 06 	sts	0x0685, r20
     b94:	40 93 86 06 	sts	0x0686, r20
     b98:	30 93 81 06 	sts	0x0681, r19
     b9c:	20 93 86 06 	sts	0x0686, r18
     ba0:	30 93 85 06 	sts	0x0685, r19
     ba4:	20 93 85 06 	sts	0x0685, r18
     ba8:	20 93 86 06 	sts	0x0686, r18
     bac:	30 93 86 06 	sts	0x0686, r19
     bb0:	20 93 85 06 	sts	0x0685, r18
     bb4:	20 93 86 06 	sts	0x0686, r18
     bb8:	30 93 86 06 	sts	0x0686, r19
     bbc:	20 93 85 06 	sts	0x0685, r18
     bc0:	20 93 86 06 	sts	0x0686, r18
     bc4:	30 93 86 06 	sts	0x0686, r19
     bc8:	20 93 85 06 	sts	0x0685, r18
     bcc:	20 93 86 06 	sts	0x0686, r18
     bd0:	30 93 86 06 	sts	0x0686, r19
     bd4:	20 93 85 06 	sts	0x0685, r18
     bd8:	20 93 86 06 	sts	0x0686, r18
     bdc:	30 93 86 06 	sts	0x0686, r19
     be0:	20 93 85 06 	sts	0x0685, r18
     be4:	20 93 86 06 	sts	0x0686, r18
     be8:	30 93 85 06 	sts	0x0685, r19
     bec:	20 93 85 06 	sts	0x0685, r18
     bf0:	20 93 86 06 	sts	0x0686, r18
     bf4:	30 93 85 06 	sts	0x0685, r19
     bf8:	20 93 85 06 	sts	0x0685, r18
     bfc:	20 93 86 06 	sts	0x0686, r18
     c00:	30 93 86 06 	sts	0x0686, r19
     c04:	20 93 85 06 	sts	0x0685, r18
     c08:	20 93 86 06 	sts	0x0686, r18
     c0c:	30 93 86 06 	sts	0x0686, r19
     c10:	20 93 85 06 	sts	0x0685, r18
     c14:	20 93 86 06 	sts	0x0686, r18
     c18:	30 93 86 06 	sts	0x0686, r19
     c1c:	20 93 85 06 	sts	0x0685, r18
     c20:	20 93 86 06 	sts	0x0686, r18
     c24:	30 93 86 06 	sts	0x0686, r19
     c28:	20 93 85 06 	sts	0x0685, r18
     c2c:	30 93 86 06 	sts	0x0686, r19
     c30:	40 93 85 06 	sts	0x0685, r20
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	94 60       	ori	r25, 0x04	; 4
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	40 93 86 06 	sts	0x0686, r20
     c40:	30 93 81 06 	sts	0x0681, r19
     c44:	20 93 86 06 	sts	0x0686, r18
     c48:	30 93 85 06 	sts	0x0685, r19
     c4c:	20 93 85 06 	sts	0x0685, r18
     c50:	20 93 86 06 	sts	0x0686, r18
     c54:	30 93 86 06 	sts	0x0686, r19
     c58:	20 93 85 06 	sts	0x0685, r18
     c5c:	20 93 86 06 	sts	0x0686, r18
     c60:	30 93 86 06 	sts	0x0686, r19
     c64:	20 93 85 06 	sts	0x0685, r18
     c68:	20 93 86 06 	sts	0x0686, r18
     c6c:	90 fd       	sbrc	r25, 0
     c6e:	e7 c0       	rjmp	.+462    	; 0xe3e <ht1632c_setup+0x544>
     c70:	30 93 86 06 	sts	0x0686, r19
     c74:	24 e0       	ldi	r18, 0x04	; 4
     c76:	20 93 85 06 	sts	0x0685, r18
     c7a:	20 93 86 06 	sts	0x0686, r18
     c7e:	28 e0       	ldi	r18, 0x08	; 8
     c80:	87 fd       	sbrc	r24, 7
     c82:	9e c0       	rjmp	.+316    	; 0xdc0 <ht1632c_setup+0x4c6>
     c84:	20 93 86 06 	sts	0x0686, r18
     c88:	24 e0       	ldi	r18, 0x04	; 4
     c8a:	20 93 85 06 	sts	0x0685, r18
     c8e:	20 93 86 06 	sts	0x0686, r18
     c92:	28 e0       	ldi	r18, 0x08	; 8
     c94:	86 fd       	sbrc	r24, 6
     c96:	9e c0       	rjmp	.+316    	; 0xdd4 <ht1632c_setup+0x4da>
     c98:	20 93 86 06 	sts	0x0686, r18
     c9c:	24 e0       	ldi	r18, 0x04	; 4
     c9e:	20 93 85 06 	sts	0x0685, r18
     ca2:	20 93 86 06 	sts	0x0686, r18
     ca6:	28 e0       	ldi	r18, 0x08	; 8
     ca8:	85 fd       	sbrc	r24, 5
     caa:	9e c0       	rjmp	.+316    	; 0xde8 <ht1632c_setup+0x4ee>
     cac:	20 93 86 06 	sts	0x0686, r18
     cb0:	24 e0       	ldi	r18, 0x04	; 4
     cb2:	20 93 85 06 	sts	0x0685, r18
     cb6:	20 93 86 06 	sts	0x0686, r18
     cba:	28 e0       	ldi	r18, 0x08	; 8
     cbc:	84 fd       	sbrc	r24, 4
     cbe:	9e c0       	rjmp	.+316    	; 0xdfc <ht1632c_setup+0x502>
     cc0:	20 93 86 06 	sts	0x0686, r18
     cc4:	24 e0       	ldi	r18, 0x04	; 4
     cc6:	20 93 85 06 	sts	0x0685, r18
     cca:	20 93 86 06 	sts	0x0686, r18
     cce:	28 e0       	ldi	r18, 0x08	; 8
     cd0:	83 fd       	sbrc	r24, 3
     cd2:	9e c0       	rjmp	.+316    	; 0xe10 <ht1632c_setup+0x516>
     cd4:	20 93 86 06 	sts	0x0686, r18
     cd8:	24 e0       	ldi	r18, 0x04	; 4
     cda:	20 93 85 06 	sts	0x0685, r18
     cde:	20 93 86 06 	sts	0x0686, r18
     ce2:	28 e0       	ldi	r18, 0x08	; 8
     ce4:	82 fd       	sbrc	r24, 2
     ce6:	9e c0       	rjmp	.+316    	; 0xe24 <ht1632c_setup+0x52a>
     ce8:	20 93 86 06 	sts	0x0686, r18
     cec:	94 e0       	ldi	r25, 0x04	; 4
     cee:	90 93 85 06 	sts	0x0685, r25
     cf2:	90 93 86 06 	sts	0x0686, r25
     cf6:	81 fd       	sbrc	r24, 1
     cf8:	9e c0       	rjmp	.+316    	; 0xe36 <ht1632c_setup+0x53c>
     cfa:	88 e0       	ldi	r24, 0x08	; 8
     cfc:	80 93 86 06 	sts	0x0686, r24
     d00:	84 e0       	ldi	r24, 0x04	; 4
     d02:	80 93 85 06 	sts	0x0685, r24
     d06:	80 93 86 06 	sts	0x0686, r24
     d0a:	98 e0       	ldi	r25, 0x08	; 8
     d0c:	90 93 86 06 	sts	0x0686, r25
     d10:	80 93 85 06 	sts	0x0685, r24
     d14:	90 93 86 06 	sts	0x0686, r25
     d18:	21 e0       	ldi	r18, 0x01	; 1
     d1a:	20 93 85 06 	sts	0x0685, r18
     d1e:	20 93 86 06 	sts	0x0686, r18
     d22:	90 93 81 06 	sts	0x0681, r25
     d26:	80 93 86 06 	sts	0x0686, r24
     d2a:	90 93 85 06 	sts	0x0685, r25
     d2e:	80 93 85 06 	sts	0x0685, r24
     d32:	80 93 86 06 	sts	0x0686, r24
     d36:	90 93 86 06 	sts	0x0686, r25
     d3a:	80 93 85 06 	sts	0x0685, r24
     d3e:	80 93 86 06 	sts	0x0686, r24
     d42:	90 93 86 06 	sts	0x0686, r25
     d46:	80 93 85 06 	sts	0x0685, r24
     d4a:	80 93 86 06 	sts	0x0686, r24
     d4e:	90 93 85 06 	sts	0x0685, r25
     d52:	80 93 85 06 	sts	0x0685, r24
     d56:	80 93 86 06 	sts	0x0686, r24
     d5a:	90 93 86 06 	sts	0x0686, r25
     d5e:	80 93 85 06 	sts	0x0685, r24
     d62:	80 93 86 06 	sts	0x0686, r24
     d66:	90 93 85 06 	sts	0x0685, r25
     d6a:	80 93 85 06 	sts	0x0685, r24
     d6e:	80 93 86 06 	sts	0x0686, r24
     d72:	90 93 86 06 	sts	0x0686, r25
     d76:	80 93 85 06 	sts	0x0685, r24
     d7a:	80 93 86 06 	sts	0x0686, r24
     d7e:	90 93 86 06 	sts	0x0686, r25
     d82:	80 93 85 06 	sts	0x0685, r24
     d86:	80 93 86 06 	sts	0x0686, r24
     d8a:	90 93 86 06 	sts	0x0686, r25
     d8e:	80 93 85 06 	sts	0x0685, r24
     d92:	80 93 86 06 	sts	0x0686, r24
     d96:	90 93 86 06 	sts	0x0686, r25
     d9a:	80 93 85 06 	sts	0x0685, r24
     d9e:	80 93 86 06 	sts	0x0686, r24
     da2:	90 93 85 06 	sts	0x0685, r25
     da6:	80 93 85 06 	sts	0x0685, r24
     daa:	80 93 86 06 	sts	0x0686, r24
     dae:	90 93 86 06 	sts	0x0686, r25
     db2:	80 93 85 06 	sts	0x0685, r24
     db6:	90 93 86 06 	sts	0x0686, r25
     dba:	20 93 85 06 	sts	0x0685, r18
     dbe:	08 95       	ret
     dc0:	20 93 85 06 	sts	0x0685, r18
     dc4:	24 e0       	ldi	r18, 0x04	; 4
     dc6:	20 93 85 06 	sts	0x0685, r18
     dca:	20 93 86 06 	sts	0x0686, r18
     dce:	28 e0       	ldi	r18, 0x08	; 8
     dd0:	86 ff       	sbrs	r24, 6
     dd2:	62 cf       	rjmp	.-316    	; 0xc98 <ht1632c_setup+0x39e>
     dd4:	20 93 85 06 	sts	0x0685, r18
     dd8:	24 e0       	ldi	r18, 0x04	; 4
     dda:	20 93 85 06 	sts	0x0685, r18
     dde:	20 93 86 06 	sts	0x0686, r18
     de2:	28 e0       	ldi	r18, 0x08	; 8
     de4:	85 ff       	sbrs	r24, 5
     de6:	62 cf       	rjmp	.-316    	; 0xcac <ht1632c_setup+0x3b2>
     de8:	20 93 85 06 	sts	0x0685, r18
     dec:	24 e0       	ldi	r18, 0x04	; 4
     dee:	20 93 85 06 	sts	0x0685, r18
     df2:	20 93 86 06 	sts	0x0686, r18
     df6:	28 e0       	ldi	r18, 0x08	; 8
     df8:	84 ff       	sbrs	r24, 4
     dfa:	62 cf       	rjmp	.-316    	; 0xcc0 <ht1632c_setup+0x3c6>
     dfc:	20 93 85 06 	sts	0x0685, r18
     e00:	24 e0       	ldi	r18, 0x04	; 4
     e02:	20 93 85 06 	sts	0x0685, r18
     e06:	20 93 86 06 	sts	0x0686, r18
     e0a:	28 e0       	ldi	r18, 0x08	; 8
     e0c:	83 ff       	sbrs	r24, 3
     e0e:	62 cf       	rjmp	.-316    	; 0xcd4 <ht1632c_setup+0x3da>
     e10:	20 93 85 06 	sts	0x0685, r18
     e14:	24 e0       	ldi	r18, 0x04	; 4
     e16:	20 93 85 06 	sts	0x0685, r18
     e1a:	20 93 86 06 	sts	0x0686, r18
     e1e:	28 e0       	ldi	r18, 0x08	; 8
     e20:	82 ff       	sbrs	r24, 2
     e22:	62 cf       	rjmp	.-316    	; 0xce8 <ht1632c_setup+0x3ee>
     e24:	20 93 85 06 	sts	0x0685, r18
     e28:	94 e0       	ldi	r25, 0x04	; 4
     e2a:	90 93 85 06 	sts	0x0685, r25
     e2e:	90 93 86 06 	sts	0x0686, r25
     e32:	81 ff       	sbrs	r24, 1
     e34:	62 cf       	rjmp	.-316    	; 0xcfa <ht1632c_setup+0x400>
     e36:	88 e0       	ldi	r24, 0x08	; 8
     e38:	80 93 85 06 	sts	0x0685, r24
     e3c:	61 cf       	rjmp	.-318    	; 0xd00 <ht1632c_setup+0x406>
     e3e:	30 93 85 06 	sts	0x0685, r19
     e42:	24 e0       	ldi	r18, 0x04	; 4
     e44:	20 93 85 06 	sts	0x0685, r18
     e48:	20 93 86 06 	sts	0x0686, r18
     e4c:	28 e0       	ldi	r18, 0x08	; 8
     e4e:	87 fd       	sbrc	r24, 7
     e50:	b7 cf       	rjmp	.-146    	; 0xdc0 <ht1632c_setup+0x4c6>
     e52:	18 cf       	rjmp	.-464    	; 0xc84 <ht1632c_setup+0x38a>

00000e54 <ht1632c_set_brightness>:
     e54:	80 31       	cpi	r24, 0x10	; 16
     e56:	08 f0       	brcs	.+2      	; 0xe5a <ht1632c_set_brightness+0x6>
     e58:	8f e0       	ldi	r24, 0x0F	; 15
     e5a:	80 6a       	ori	r24, 0xA0	; 160
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	94 60       	ori	r25, 0x04	; 4
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	21 e0       	ldi	r18, 0x01	; 1
     e66:	20 93 86 06 	sts	0x0686, r18
     e6a:	38 e0       	ldi	r19, 0x08	; 8
     e6c:	30 93 81 06 	sts	0x0681, r19
     e70:	24 e0       	ldi	r18, 0x04	; 4
     e72:	20 93 86 06 	sts	0x0686, r18
     e76:	30 93 85 06 	sts	0x0685, r19
     e7a:	20 93 85 06 	sts	0x0685, r18
     e7e:	20 93 86 06 	sts	0x0686, r18
     e82:	30 93 86 06 	sts	0x0686, r19
     e86:	20 93 85 06 	sts	0x0685, r18
     e8a:	20 93 86 06 	sts	0x0686, r18
     e8e:	30 93 86 06 	sts	0x0686, r19
     e92:	20 93 85 06 	sts	0x0685, r18
     e96:	20 93 86 06 	sts	0x0686, r18
     e9a:	30 93 85 06 	sts	0x0685, r19
     e9e:	20 93 85 06 	sts	0x0685, r18
     ea2:	20 93 86 06 	sts	0x0686, r18
     ea6:	30 93 86 06 	sts	0x0686, r19
     eaa:	20 93 85 06 	sts	0x0685, r18
     eae:	20 93 86 06 	sts	0x0686, r18
     eb2:	30 93 85 06 	sts	0x0685, r19
     eb6:	20 93 85 06 	sts	0x0685, r18
     eba:	20 93 86 06 	sts	0x0686, r18
     ebe:	30 93 86 06 	sts	0x0686, r19
     ec2:	20 93 85 06 	sts	0x0685, r18
     ec6:	20 93 86 06 	sts	0x0686, r18
     eca:	84 fd       	sbrc	r24, 4
     ecc:	47 c0       	rjmp	.+142    	; 0xf5c <ht1632c_set_brightness+0x108>
     ece:	30 93 86 06 	sts	0x0686, r19
     ed2:	24 e0       	ldi	r18, 0x04	; 4
     ed4:	20 93 85 06 	sts	0x0685, r18
     ed8:	20 93 86 06 	sts	0x0686, r18
     edc:	28 e0       	ldi	r18, 0x08	; 8
     ede:	83 fd       	sbrc	r24, 3
     ee0:	26 c0       	rjmp	.+76     	; 0xf2e <ht1632c_set_brightness+0xda>
     ee2:	20 93 86 06 	sts	0x0686, r18
     ee6:	24 e0       	ldi	r18, 0x04	; 4
     ee8:	20 93 85 06 	sts	0x0685, r18
     eec:	20 93 86 06 	sts	0x0686, r18
     ef0:	28 e0       	ldi	r18, 0x08	; 8
     ef2:	82 fd       	sbrc	r24, 2
     ef4:	26 c0       	rjmp	.+76     	; 0xf42 <ht1632c_set_brightness+0xee>
     ef6:	20 93 86 06 	sts	0x0686, r18
     efa:	94 e0       	ldi	r25, 0x04	; 4
     efc:	90 93 85 06 	sts	0x0685, r25
     f00:	90 93 86 06 	sts	0x0686, r25
     f04:	81 fd       	sbrc	r24, 1
     f06:	26 c0       	rjmp	.+76     	; 0xf54 <ht1632c_set_brightness+0x100>
     f08:	88 e0       	ldi	r24, 0x08	; 8
     f0a:	80 93 86 06 	sts	0x0686, r24
     f0e:	84 e0       	ldi	r24, 0x04	; 4
     f10:	80 93 85 06 	sts	0x0685, r24
     f14:	80 93 86 06 	sts	0x0686, r24
     f18:	98 e0       	ldi	r25, 0x08	; 8
     f1a:	90 93 86 06 	sts	0x0686, r25
     f1e:	80 93 85 06 	sts	0x0685, r24
     f22:	90 93 86 06 	sts	0x0686, r25
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	80 93 85 06 	sts	0x0685, r24
     f2c:	08 95       	ret
     f2e:	20 93 85 06 	sts	0x0685, r18
     f32:	24 e0       	ldi	r18, 0x04	; 4
     f34:	20 93 85 06 	sts	0x0685, r18
     f38:	20 93 86 06 	sts	0x0686, r18
     f3c:	28 e0       	ldi	r18, 0x08	; 8
     f3e:	82 ff       	sbrs	r24, 2
     f40:	da cf       	rjmp	.-76     	; 0xef6 <ht1632c_set_brightness+0xa2>
     f42:	20 93 85 06 	sts	0x0685, r18
     f46:	94 e0       	ldi	r25, 0x04	; 4
     f48:	90 93 85 06 	sts	0x0685, r25
     f4c:	90 93 86 06 	sts	0x0686, r25
     f50:	81 ff       	sbrs	r24, 1
     f52:	da cf       	rjmp	.-76     	; 0xf08 <ht1632c_set_brightness+0xb4>
     f54:	88 e0       	ldi	r24, 0x08	; 8
     f56:	80 93 85 06 	sts	0x0685, r24
     f5a:	d9 cf       	rjmp	.-78     	; 0xf0e <ht1632c_set_brightness+0xba>
     f5c:	30 93 85 06 	sts	0x0685, r19
     f60:	24 e0       	ldi	r18, 0x04	; 4
     f62:	20 93 85 06 	sts	0x0685, r18
     f66:	20 93 86 06 	sts	0x0686, r18
     f6a:	28 e0       	ldi	r18, 0x08	; 8
     f6c:	83 fd       	sbrc	r24, 3
     f6e:	df cf       	rjmp	.-66     	; 0xf2e <ht1632c_set_brightness+0xda>
     f70:	b8 cf       	rjmp	.-144    	; 0xee2 <ht1632c_set_brightness+0x8e>

00000f72 <ht1632c_fill_rect>:
     f72:	5f 92       	push	r5
     f74:	6f 92       	push	r6
     f76:	7f 92       	push	r7
     f78:	8f 92       	push	r8
     f7a:	9f 92       	push	r9
     f7c:	af 92       	push	r10
     f7e:	bf 92       	push	r11
     f80:	cf 92       	push	r12
     f82:	df 92       	push	r13
     f84:	ef 92       	push	r14
     f86:	ff 92       	push	r15
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	18 2f       	mov	r17, r24
     f92:	56 2e       	mov	r5, r22
     f94:	e8 2f       	mov	r30, r24
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	7f 01       	movw	r14, r30
     f9a:	e4 0e       	add	r14, r20
     f9c:	f1 1c       	adc	r15, r1
     f9e:	ee 15       	cp	r30, r14
     fa0:	ff 05       	cpc	r31, r15
     fa2:	94 f5       	brge	.+100    	; 0x1008 <ht1632c_fill_rect+0x96>
     fa4:	c6 2f       	mov	r28, r22
     fa6:	d0 e0       	ldi	r29, 0x00	; 0
     fa8:	be 01       	movw	r22, r28
     faa:	62 0f       	add	r22, r18
     fac:	71 1d       	adc	r23, r1
     fae:	9b 01       	movw	r18, r22
     fb0:	bf e0       	ldi	r27, 0x0F	; 15
     fb2:	8b 2e       	mov	r8, r27
     fb4:	91 2c       	mov	r9, r1
     fb6:	88 e1       	ldi	r24, 0x18	; 24
     fb8:	a8 2e       	mov	r10, r24
     fba:	b1 2c       	mov	r11, r1
     fbc:	cc 24       	eor	r12, r12
     fbe:	c3 94       	inc	r12
     fc0:	d1 2c       	mov	r13, r1
     fc2:	c2 17       	cp	r28, r18
     fc4:	d3 07       	cpc	r29, r19
     fc6:	d4 f4       	brge	.+52     	; 0xffc <ht1632c_fill_rect+0x8a>
     fc8:	af 01       	movw	r20, r30
     fca:	44 0f       	add	r20, r20
     fcc:	55 1f       	adc	r21, r21
     fce:	3a 01       	movw	r6, r20
     fd0:	7f e0       	ldi	r23, 0x0F	; 15
     fd2:	67 1a       	sub	r6, r23
     fd4:	71 08       	sbc	r7, r1
     fd6:	e8 30       	cpi	r30, 0x08	; 8
     fd8:	f1 05       	cpc	r31, r1
     fda:	0c f4       	brge	.+2      	; 0xfde <ht1632c_fill_rect+0x6c>
     fdc:	3a 01       	movw	r6, r20
     fde:	66 0c       	add	r6, r6
     fe0:	77 1c       	adc	r7, r7
     fe2:	66 0c       	add	r6, r6
     fe4:	77 1c       	adc	r7, r7
     fe6:	66 0c       	add	r6, r6
     fe8:	77 1c       	adc	r7, r7
     fea:	70 97       	sbiw	r30, 0x10	; 16
     fec:	ec f0       	brlt	.+58     	; 0x1028 <ht1632c_fill_rect+0xb6>
     fee:	45 2d       	mov	r20, r5
     ff0:	4f 5f       	subi	r20, 0xFF	; 255
     ff2:	84 2f       	mov	r24, r20
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	82 17       	cp	r24, r18
     ff8:	93 07       	cpc	r25, r19
     ffa:	d4 f3       	brlt	.-12     	; 0xff0 <ht1632c_fill_rect+0x7e>
     ffc:	1f 5f       	subi	r17, 0xFF	; 255
     ffe:	e1 2f       	mov	r30, r17
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	ee 15       	cp	r30, r14
    1004:	ff 05       	cpc	r31, r15
    1006:	ec f2       	brlt	.-70     	; 0xfc2 <ht1632c_fill_rect+0x50>
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	df 90       	pop	r13
    1016:	cf 90       	pop	r12
    1018:	bf 90       	pop	r11
    101a:	af 90       	pop	r10
    101c:	9f 90       	pop	r9
    101e:	8f 90       	pop	r8
    1020:	7f 90       	pop	r7
    1022:	6f 90       	pop	r6
    1024:	5f 90       	pop	r5
    1026:	08 95       	ret
    1028:	ce 01       	movw	r24, r28
    102a:	45 2d       	mov	r20, r5
    102c:	00 23       	and	r16, r16
    102e:	39 f0       	breq	.+14     	; 0x103e <ht1632c_fill_rect+0xcc>
    1030:	69 c0       	rjmp	.+210    	; 0x1104 <ht1632c_fill_rect+0x192>
    1032:	4f 5f       	subi	r20, 0xFF	; 255
    1034:	84 2f       	mov	r24, r20
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	82 17       	cp	r24, r18
    103a:	93 07       	cpc	r25, r19
    103c:	fc f6       	brge	.-66     	; 0xffc <ht1632c_fill_rect+0x8a>
    103e:	80 31       	cpi	r24, 0x10	; 16
    1040:	91 05       	cpc	r25, r1
    1042:	bc f7       	brge	.-18     	; 0x1032 <ht1632c_fill_rect+0xc0>
    1044:	f4 01       	movw	r30, r8
    1046:	e8 1b       	sub	r30, r24
    1048:	f9 0b       	sbc	r31, r25
    104a:	cf 01       	movw	r24, r30
    104c:	b5 01       	movw	r22, r10
    104e:	0e 94 01 1a 	call	0x3402	; 0x3402 <__divmodhi4>
    1052:	88 30       	cpi	r24, 0x08	; 8
    1054:	91 05       	cpc	r25, r1
    1056:	0c f4       	brge	.+2      	; 0x105a <ht1632c_fill_rect+0xe8>
    1058:	59 c0       	rjmp	.+178    	; 0x110c <ht1632c_fill_rect+0x19a>
    105a:	80 31       	cpi	r24, 0x10	; 16
    105c:	91 05       	cpc	r25, r1
    105e:	0c f0       	brlt	.+2      	; 0x1062 <ht1632c_fill_rect+0xf0>
    1060:	5e c0       	rjmp	.+188    	; 0x111e <ht1632c_fill_rect+0x1ac>
    1062:	67 e8       	ldi	r22, 0x87	; 135
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	87 70       	andi	r24, 0x07	; 7
    1068:	99 27       	eor	r25, r25
    106a:	fb 01       	movw	r30, r22
    106c:	e8 1b       	sub	r30, r24
    106e:	f9 0b       	sbc	r31, r25
    1070:	cf 01       	movw	r24, r30
    1072:	86 0d       	add	r24, r6
    1074:	97 1d       	adc	r25, r7
    1076:	fc 01       	movw	r30, r24
    1078:	f6 95       	lsr	r31
    107a:	e7 95       	ror	r30
    107c:	f6 95       	lsr	r31
    107e:	e7 95       	ror	r30
    1080:	f6 95       	lsr	r31
    1082:	e7 95       	ror	r30
    1084:	ec 59       	subi	r30, 0x9C	; 156
    1086:	fa 4d       	sbci	r31, 0xDA	; 218
    1088:	87 70       	andi	r24, 0x07	; 7
    108a:	99 27       	eor	r25, r25
    108c:	b6 01       	movw	r22, r12
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <ht1632c_fill_rect+0x122>
    1090:	66 0f       	add	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	8a 95       	dec	r24
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <ht1632c_fill_rect+0x11e>
    1098:	cb 01       	movw	r24, r22
    109a:	80 95       	com	r24
    109c:	90 81       	ld	r25, Z
    109e:	89 23       	and	r24, r25
    10a0:	80 83       	st	Z, r24
    10a2:	c7 cf       	rjmp	.-114    	; 0x1032 <ht1632c_fill_rect+0xc0>
    10a4:	f4 01       	movw	r30, r8
    10a6:	e8 1b       	sub	r30, r24
    10a8:	f9 0b       	sbc	r31, r25
    10aa:	cf 01       	movw	r24, r30
    10ac:	b5 01       	movw	r22, r10
    10ae:	0e 94 01 1a 	call	0x3402	; 0x3402 <__divmodhi4>
    10b2:	88 30       	cpi	r24, 0x08	; 8
    10b4:	91 05       	cpc	r25, r1
    10b6:	6c f5       	brge	.+90     	; 0x1112 <ht1632c_fill_rect+0x1a0>
    10b8:	67 e0       	ldi	r22, 0x07	; 7
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	87 70       	andi	r24, 0x07	; 7
    10be:	99 27       	eor	r25, r25
    10c0:	fb 01       	movw	r30, r22
    10c2:	e8 1b       	sub	r30, r24
    10c4:	f9 0b       	sbc	r31, r25
    10c6:	cf 01       	movw	r24, r30
    10c8:	86 0d       	add	r24, r6
    10ca:	97 1d       	adc	r25, r7
    10cc:	fc 01       	movw	r30, r24
    10ce:	f6 95       	lsr	r31
    10d0:	e7 95       	ror	r30
    10d2:	f6 95       	lsr	r31
    10d4:	e7 95       	ror	r30
    10d6:	f6 95       	lsr	r31
    10d8:	e7 95       	ror	r30
    10da:	ec 59       	subi	r30, 0x9C	; 156
    10dc:	fa 4d       	sbci	r31, 0xDA	; 218
    10de:	87 70       	andi	r24, 0x07	; 7
    10e0:	99 27       	eor	r25, r25
    10e2:	b6 01       	movw	r22, r12
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <ht1632c_fill_rect+0x178>
    10e6:	66 0f       	add	r22, r22
    10e8:	77 1f       	adc	r23, r23
    10ea:	8a 95       	dec	r24
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <ht1632c_fill_rect+0x174>
    10ee:	cb 01       	movw	r24, r22
    10f0:	90 81       	ld	r25, Z
    10f2:	98 2b       	or	r25, r24
    10f4:	90 83       	st	Z, r25
    10f6:	4f 5f       	subi	r20, 0xFF	; 255
    10f8:	84 2f       	mov	r24, r20
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	82 17       	cp	r24, r18
    10fe:	93 07       	cpc	r25, r19
    1100:	0c f0       	brlt	.+2      	; 0x1104 <ht1632c_fill_rect+0x192>
    1102:	7c cf       	rjmp	.-264    	; 0xffc <ht1632c_fill_rect+0x8a>
    1104:	80 31       	cpi	r24, 0x10	; 16
    1106:	91 05       	cpc	r25, r1
    1108:	b4 f7       	brge	.-20     	; 0x10f6 <ht1632c_fill_rect+0x184>
    110a:	cc cf       	rjmp	.-104    	; 0x10a4 <ht1632c_fill_rect+0x132>
    110c:	67 e0       	ldi	r22, 0x07	; 7
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	aa cf       	rjmp	.-172    	; 0x1066 <ht1632c_fill_rect+0xf4>
    1112:	80 31       	cpi	r24, 0x10	; 16
    1114:	91 05       	cpc	r25, r1
    1116:	34 f4       	brge	.+12     	; 0x1124 <ht1632c_fill_rect+0x1b2>
    1118:	67 e8       	ldi	r22, 0x87	; 135
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	cf cf       	rjmp	.-98     	; 0x10bc <ht1632c_fill_rect+0x14a>
    111e:	67 e0       	ldi	r22, 0x07	; 7
    1120:	71 e0       	ldi	r23, 0x01	; 1
    1122:	a1 cf       	rjmp	.-190    	; 0x1066 <ht1632c_fill_rect+0xf4>
    1124:	67 e0       	ldi	r22, 0x07	; 7
    1126:	71 e0       	ldi	r23, 0x01	; 1
    1128:	c9 cf       	rjmp	.-110    	; 0x10bc <ht1632c_fill_rect+0x14a>

0000112a <ht1632c_refresh_screen>:
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	80 93 86 06 	sts	0x0686, r24
    1130:	98 e0       	ldi	r25, 0x08	; 8
    1132:	90 93 81 06 	sts	0x0681, r25
    1136:	84 e0       	ldi	r24, 0x04	; 4
    1138:	80 93 86 06 	sts	0x0686, r24
    113c:	90 93 85 06 	sts	0x0685, r25
    1140:	80 93 85 06 	sts	0x0685, r24
    1144:	80 93 86 06 	sts	0x0686, r24
    1148:	90 93 86 06 	sts	0x0686, r25
    114c:	80 93 85 06 	sts	0x0685, r24
    1150:	80 93 86 06 	sts	0x0686, r24
    1154:	90 93 85 06 	sts	0x0685, r25
    1158:	80 93 85 06 	sts	0x0685, r24
    115c:	90 93 86 06 	sts	0x0686, r25
    1160:	90 93 81 06 	sts	0x0681, r25
    1164:	80 93 86 06 	sts	0x0686, r24
    1168:	90 93 86 06 	sts	0x0686, r25
    116c:	80 93 85 06 	sts	0x0685, r24
    1170:	80 93 86 06 	sts	0x0686, r24
    1174:	90 93 86 06 	sts	0x0686, r25
    1178:	80 93 85 06 	sts	0x0685, r24
    117c:	80 93 86 06 	sts	0x0686, r24
    1180:	90 93 86 06 	sts	0x0686, r25
    1184:	80 93 85 06 	sts	0x0685, r24
    1188:	80 93 86 06 	sts	0x0686, r24
    118c:	90 93 86 06 	sts	0x0686, r25
    1190:	80 93 85 06 	sts	0x0685, r24
    1194:	80 93 86 06 	sts	0x0686, r24
    1198:	90 93 86 06 	sts	0x0686, r25
    119c:	80 93 85 06 	sts	0x0685, r24
    11a0:	80 93 86 06 	sts	0x0686, r24
    11a4:	90 93 86 06 	sts	0x0686, r25
    11a8:	80 93 85 06 	sts	0x0685, r24
    11ac:	80 93 86 06 	sts	0x0686, r24
    11b0:	90 93 86 06 	sts	0x0686, r25
    11b4:	80 93 85 06 	sts	0x0685, r24
    11b8:	90 93 86 06 	sts	0x0686, r25
    11bc:	e5 e6       	ldi	r30, 0x65	; 101
    11be:	f5 e2       	ldi	r31, 0x25	; 37
    11c0:	38 e0       	ldi	r19, 0x08	; 8
    11c2:	24 e0       	ldi	r18, 0x04	; 4
    11c4:	7c c0       	rjmp	.+248    	; 0x12be <ht1632c_refresh_screen+0x194>
    11c6:	30 93 86 06 	sts	0x0686, r19
    11ca:	20 93 85 06 	sts	0x0685, r18
    11ce:	20 93 86 06 	sts	0x0686, r18
    11d2:	95 fd       	sbrc	r25, 5
    11d4:	92 c0       	rjmp	.+292    	; 0x12fa <ht1632c_refresh_screen+0x1d0>
    11d6:	30 93 86 06 	sts	0x0686, r19
    11da:	20 93 85 06 	sts	0x0685, r18
    11de:	20 93 86 06 	sts	0x0686, r18
    11e2:	94 fd       	sbrc	r25, 4
    11e4:	92 c0       	rjmp	.+292    	; 0x130a <ht1632c_refresh_screen+0x1e0>
    11e6:	30 93 86 06 	sts	0x0686, r19
    11ea:	20 93 85 06 	sts	0x0685, r18
    11ee:	20 93 86 06 	sts	0x0686, r18
    11f2:	93 fd       	sbrc	r25, 3
    11f4:	92 c0       	rjmp	.+292    	; 0x131a <ht1632c_refresh_screen+0x1f0>
    11f6:	30 93 86 06 	sts	0x0686, r19
    11fa:	20 93 85 06 	sts	0x0685, r18
    11fe:	20 93 86 06 	sts	0x0686, r18
    1202:	92 fd       	sbrc	r25, 2
    1204:	92 c0       	rjmp	.+292    	; 0x132a <ht1632c_refresh_screen+0x200>
    1206:	30 93 86 06 	sts	0x0686, r19
    120a:	20 93 85 06 	sts	0x0685, r18
    120e:	20 93 86 06 	sts	0x0686, r18
    1212:	91 fd       	sbrc	r25, 1
    1214:	92 c0       	rjmp	.+292    	; 0x133a <ht1632c_refresh_screen+0x210>
    1216:	30 93 86 06 	sts	0x0686, r19
    121a:	20 93 85 06 	sts	0x0685, r18
    121e:	20 93 86 06 	sts	0x0686, r18
    1222:	90 fd       	sbrc	r25, 0
    1224:	92 c0       	rjmp	.+292    	; 0x134a <ht1632c_refresh_screen+0x220>
    1226:	30 93 86 06 	sts	0x0686, r19
    122a:	20 93 85 06 	sts	0x0685, r18
    122e:	20 93 86 06 	sts	0x0686, r18
    1232:	87 fd       	sbrc	r24, 7
    1234:	92 c0       	rjmp	.+292    	; 0x135a <ht1632c_refresh_screen+0x230>
    1236:	30 93 86 06 	sts	0x0686, r19
    123a:	20 93 85 06 	sts	0x0685, r18
    123e:	20 93 86 06 	sts	0x0686, r18
    1242:	86 fd       	sbrc	r24, 6
    1244:	92 c0       	rjmp	.+292    	; 0x136a <ht1632c_refresh_screen+0x240>
    1246:	30 93 86 06 	sts	0x0686, r19
    124a:	20 93 85 06 	sts	0x0685, r18
    124e:	20 93 86 06 	sts	0x0686, r18
    1252:	85 fd       	sbrc	r24, 5
    1254:	92 c0       	rjmp	.+292    	; 0x137a <ht1632c_refresh_screen+0x250>
    1256:	30 93 86 06 	sts	0x0686, r19
    125a:	20 93 85 06 	sts	0x0685, r18
    125e:	20 93 86 06 	sts	0x0686, r18
    1262:	84 fd       	sbrc	r24, 4
    1264:	92 c0       	rjmp	.+292    	; 0x138a <ht1632c_refresh_screen+0x260>
    1266:	30 93 86 06 	sts	0x0686, r19
    126a:	20 93 85 06 	sts	0x0685, r18
    126e:	20 93 86 06 	sts	0x0686, r18
    1272:	83 fd       	sbrc	r24, 3
    1274:	92 c0       	rjmp	.+292    	; 0x139a <ht1632c_refresh_screen+0x270>
    1276:	30 93 86 06 	sts	0x0686, r19
    127a:	20 93 85 06 	sts	0x0685, r18
    127e:	20 93 86 06 	sts	0x0686, r18
    1282:	82 fd       	sbrc	r24, 2
    1284:	92 c0       	rjmp	.+292    	; 0x13aa <ht1632c_refresh_screen+0x280>
    1286:	30 93 86 06 	sts	0x0686, r19
    128a:	20 93 85 06 	sts	0x0685, r18
    128e:	20 93 86 06 	sts	0x0686, r18
    1292:	81 fd       	sbrc	r24, 1
    1294:	92 c0       	rjmp	.+292    	; 0x13ba <ht1632c_refresh_screen+0x290>
    1296:	30 93 86 06 	sts	0x0686, r19
    129a:	20 93 85 06 	sts	0x0685, r18
    129e:	20 93 86 06 	sts	0x0686, r18
    12a2:	80 fd       	sbrc	r24, 0
    12a4:	92 c0       	rjmp	.+292    	; 0x13ca <ht1632c_refresh_screen+0x2a0>
    12a6:	30 93 86 06 	sts	0x0686, r19
    12aa:	20 93 85 06 	sts	0x0685, r18
    12ae:	30 93 86 06 	sts	0x0686, r19
    12b2:	32 96       	adiw	r30, 0x02	; 2
    12b4:	85 e2       	ldi	r24, 0x25	; 37
    12b6:	e5 38       	cpi	r30, 0x85	; 133
    12b8:	f8 07       	cpc	r31, r24
    12ba:	09 f4       	brne	.+2      	; 0x12be <ht1632c_refresh_screen+0x194>
    12bc:	8c c0       	rjmp	.+280    	; 0x13d6 <ht1632c_refresh_screen+0x2ac>
    12be:	df 01       	movw	r26, r30
    12c0:	11 97       	sbiw	r26, 0x01	; 1
    12c2:	8c 91       	ld	r24, X
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	98 2f       	mov	r25, r24
    12c8:	88 27       	eor	r24, r24
    12ca:	40 81       	ld	r20, Z
    12cc:	84 2b       	or	r24, r20
    12ce:	30 93 81 06 	sts	0x0681, r19
    12d2:	20 93 86 06 	sts	0x0686, r18
    12d6:	97 fd       	sbrc	r25, 7
    12d8:	7b c0       	rjmp	.+246    	; 0x13d0 <ht1632c_refresh_screen+0x2a6>
    12da:	30 93 86 06 	sts	0x0686, r19
    12de:	20 93 85 06 	sts	0x0685, r18
    12e2:	20 93 86 06 	sts	0x0686, r18
    12e6:	96 ff       	sbrs	r25, 6
    12e8:	6e cf       	rjmp	.-292    	; 0x11c6 <ht1632c_refresh_screen+0x9c>
    12ea:	30 93 85 06 	sts	0x0685, r19
    12ee:	20 93 85 06 	sts	0x0685, r18
    12f2:	20 93 86 06 	sts	0x0686, r18
    12f6:	95 ff       	sbrs	r25, 5
    12f8:	6e cf       	rjmp	.-292    	; 0x11d6 <ht1632c_refresh_screen+0xac>
    12fa:	30 93 85 06 	sts	0x0685, r19
    12fe:	20 93 85 06 	sts	0x0685, r18
    1302:	20 93 86 06 	sts	0x0686, r18
    1306:	94 ff       	sbrs	r25, 4
    1308:	6e cf       	rjmp	.-292    	; 0x11e6 <ht1632c_refresh_screen+0xbc>
    130a:	30 93 85 06 	sts	0x0685, r19
    130e:	20 93 85 06 	sts	0x0685, r18
    1312:	20 93 86 06 	sts	0x0686, r18
    1316:	93 ff       	sbrs	r25, 3
    1318:	6e cf       	rjmp	.-292    	; 0x11f6 <ht1632c_refresh_screen+0xcc>
    131a:	30 93 85 06 	sts	0x0685, r19
    131e:	20 93 85 06 	sts	0x0685, r18
    1322:	20 93 86 06 	sts	0x0686, r18
    1326:	92 ff       	sbrs	r25, 2
    1328:	6e cf       	rjmp	.-292    	; 0x1206 <ht1632c_refresh_screen+0xdc>
    132a:	30 93 85 06 	sts	0x0685, r19
    132e:	20 93 85 06 	sts	0x0685, r18
    1332:	20 93 86 06 	sts	0x0686, r18
    1336:	91 ff       	sbrs	r25, 1
    1338:	6e cf       	rjmp	.-292    	; 0x1216 <ht1632c_refresh_screen+0xec>
    133a:	30 93 85 06 	sts	0x0685, r19
    133e:	20 93 85 06 	sts	0x0685, r18
    1342:	20 93 86 06 	sts	0x0686, r18
    1346:	90 ff       	sbrs	r25, 0
    1348:	6e cf       	rjmp	.-292    	; 0x1226 <ht1632c_refresh_screen+0xfc>
    134a:	30 93 85 06 	sts	0x0685, r19
    134e:	20 93 85 06 	sts	0x0685, r18
    1352:	20 93 86 06 	sts	0x0686, r18
    1356:	87 ff       	sbrs	r24, 7
    1358:	6e cf       	rjmp	.-292    	; 0x1236 <ht1632c_refresh_screen+0x10c>
    135a:	30 93 85 06 	sts	0x0685, r19
    135e:	20 93 85 06 	sts	0x0685, r18
    1362:	20 93 86 06 	sts	0x0686, r18
    1366:	86 ff       	sbrs	r24, 6
    1368:	6e cf       	rjmp	.-292    	; 0x1246 <ht1632c_refresh_screen+0x11c>
    136a:	30 93 85 06 	sts	0x0685, r19
    136e:	20 93 85 06 	sts	0x0685, r18
    1372:	20 93 86 06 	sts	0x0686, r18
    1376:	85 ff       	sbrs	r24, 5
    1378:	6e cf       	rjmp	.-292    	; 0x1256 <ht1632c_refresh_screen+0x12c>
    137a:	30 93 85 06 	sts	0x0685, r19
    137e:	20 93 85 06 	sts	0x0685, r18
    1382:	20 93 86 06 	sts	0x0686, r18
    1386:	84 ff       	sbrs	r24, 4
    1388:	6e cf       	rjmp	.-292    	; 0x1266 <ht1632c_refresh_screen+0x13c>
    138a:	30 93 85 06 	sts	0x0685, r19
    138e:	20 93 85 06 	sts	0x0685, r18
    1392:	20 93 86 06 	sts	0x0686, r18
    1396:	83 ff       	sbrs	r24, 3
    1398:	6e cf       	rjmp	.-292    	; 0x1276 <ht1632c_refresh_screen+0x14c>
    139a:	30 93 85 06 	sts	0x0685, r19
    139e:	20 93 85 06 	sts	0x0685, r18
    13a2:	20 93 86 06 	sts	0x0686, r18
    13a6:	82 ff       	sbrs	r24, 2
    13a8:	6e cf       	rjmp	.-292    	; 0x1286 <ht1632c_refresh_screen+0x15c>
    13aa:	30 93 85 06 	sts	0x0685, r19
    13ae:	20 93 85 06 	sts	0x0685, r18
    13b2:	20 93 86 06 	sts	0x0686, r18
    13b6:	81 ff       	sbrs	r24, 1
    13b8:	6e cf       	rjmp	.-292    	; 0x1296 <ht1632c_refresh_screen+0x16c>
    13ba:	30 93 85 06 	sts	0x0685, r19
    13be:	20 93 85 06 	sts	0x0685, r18
    13c2:	20 93 86 06 	sts	0x0686, r18
    13c6:	80 ff       	sbrs	r24, 0
    13c8:	6e cf       	rjmp	.-292    	; 0x12a6 <ht1632c_refresh_screen+0x17c>
    13ca:	30 93 85 06 	sts	0x0685, r19
    13ce:	6d cf       	rjmp	.-294    	; 0x12aa <ht1632c_refresh_screen+0x180>
    13d0:	30 93 85 06 	sts	0x0685, r19
    13d4:	84 cf       	rjmp	.-248    	; 0x12de <ht1632c_refresh_screen+0x1b4>
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	80 93 85 06 	sts	0x0685, r24
    13dc:	08 95       	ret

000013de <ht1632c_clear_screen>:
    13de:	80 e2       	ldi	r24, 0x20	; 32
    13e0:	e4 e6       	ldi	r30, 0x64	; 100
    13e2:	f5 e2       	ldi	r31, 0x25	; 37
    13e4:	df 01       	movw	r26, r30
    13e6:	1d 92       	st	X+, r1
    13e8:	8a 95       	dec	r24
    13ea:	e9 f7       	brne	.-6      	; 0x13e6 <ht1632c_clear_screen+0x8>
    13ec:	9e ce       	rjmp	.-708    	; 0x112a <ht1632c_refresh_screen>

000013ee <ht1632c_draw_char>:
    13ee:	2f 92       	push	r2
    13f0:	3f 92       	push	r3
    13f2:	4f 92       	push	r4
    13f4:	5f 92       	push	r5
    13f6:	6f 92       	push	r6
    13f8:	7f 92       	push	r7
    13fa:	8f 92       	push	r8
    13fc:	9f 92       	push	r9
    13fe:	af 92       	push	r10
    1400:	bf 92       	push	r11
    1402:	cf 92       	push	r12
    1404:	df 92       	push	r13
    1406:	ef 92       	push	r14
    1408:	ff 92       	push	r15
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	6a 97       	sbiw	r28, 0x1a	; 26
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	6b 83       	std	Y+3, r22	; 0x03
    141e:	7c 83       	std	Y+4, r23	; 0x04
    1420:	2a 83       	std	Y+2, r18	; 0x02
    1422:	60 2e       	mov	r6, r16
    1424:	55 e0       	ldi	r21, 0x05	; 5
    1426:	45 9f       	mul	r20, r21
    1428:	90 01       	movw	r18, r0
    142a:	11 24       	eor	r1, r1
    142c:	24 50       	subi	r18, 0x04	; 4
    142e:	3e 4f       	sbci	r19, 0xFE	; 254
    1430:	2a 87       	std	Y+10, r18	; 0x0a
    1432:	3b 87       	std	Y+11, r19	; 0x0b
    1434:	8d 83       	std	Y+5, r24	; 0x05
    1436:	9e 83       	std	Y+6, r25	; 0x06
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	8c 87       	std	Y+12, r24	; 0x0c
    143e:	9d 87       	std	Y+13, r25	; 0x0d
    1440:	2d 81       	ldd	r18, Y+5	; 0x05
    1442:	3e 81       	ldd	r19, Y+6	; 0x06
    1444:	2b 5f       	subi	r18, 0xFB	; 251
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	2d 8b       	std	Y+21, r18	; 0x15
    144a:	3e 8b       	std	Y+22, r19	; 0x16
    144c:	30 2f       	mov	r19, r16
    144e:	33 0f       	add	r19, r19
    1450:	33 0f       	add	r19, r19
    1452:	33 0f       	add	r19, r19
    1454:	30 1b       	sub	r19, r16
    1456:	36 0f       	add	r19, r22
    1458:	38 8b       	std	Y+16, r19	; 0x10
    145a:	4d 81       	ldd	r20, Y+5	; 0x05
    145c:	49 87       	std	Y+9, r20	; 0x09
    145e:	20 2f       	mov	r18, r16
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	2e 87       	std	Y+14, r18	; 0x0e
    1464:	3f 87       	std	Y+15, r19	; 0x0f
    1466:	ab 01       	movw	r20, r22
    1468:	49 5f       	subi	r20, 0xF9	; 249
    146a:	5f 4f       	sbci	r21, 0xFF	; 255
    146c:	4f 8b       	std	Y+23, r20	; 0x17
    146e:	58 8f       	std	Y+24, r21	; 0x18
    1470:	29 e0       	ldi	r18, 0x09	; 9
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	26 1b       	sub	r18, r22
    1476:	37 0b       	sbc	r19, r23
    1478:	29 8b       	std	Y+17, r18	; 0x11
    147a:	3a 8b       	std	Y+18, r19	; 0x12
    147c:	0f e0       	ldi	r16, 0x0F	; 15
    147e:	20 2e       	mov	r2, r16
    1480:	31 2c       	mov	r3, r1
    1482:	88 e1       	ldi	r24, 0x18	; 24
    1484:	c8 2e       	mov	r12, r24
    1486:	d1 2c       	mov	r13, r1
    1488:	44 24       	eor	r4, r4
    148a:	43 94       	inc	r4
    148c:	51 2c       	mov	r5, r1
    148e:	69 82       	std	Y+1, r6	; 0x01
    1490:	ea 85       	ldd	r30, Y+10	; 0x0a
    1492:	fb 85       	ldd	r31, Y+11	; 0x0b
    1494:	64 90       	lpm	r6, Z
    1496:	2d 81       	ldd	r18, Y+5	; 0x05
    1498:	3e 81       	ldd	r19, Y+6	; 0x06
    149a:	8c 85       	ldd	r24, Y+12	; 0x0c
    149c:	9d 85       	ldd	r25, Y+13	; 0x0d
    149e:	28 30       	cpi	r18, 0x08	; 8
    14a0:	31 05       	cpc	r19, r1
    14a2:	0c f0       	brlt	.+2      	; 0x14a6 <ht1632c_draw_char+0xb8>
    14a4:	0f 97       	sbiw	r24, 0x0f	; 15
    14a6:	ac 01       	movw	r20, r24
    14a8:	44 0f       	add	r20, r20
    14aa:	55 1f       	adc	r21, r21
    14ac:	44 0f       	add	r20, r20
    14ae:	55 1f       	adc	r21, r21
    14b0:	44 0f       	add	r20, r20
    14b2:	55 1f       	adc	r21, r21
    14b4:	4b 8b       	std	Y+19, r20	; 0x13
    14b6:	5c 8b       	std	Y+20, r21	; 0x14
    14b8:	f9 85       	ldd	r31, Y+9	; 0x09
    14ba:	ef 2f       	mov	r30, r31
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	ef 83       	std	Y+7, r30	; 0x07
    14c0:	f8 87       	std	Y+8, r31	; 0x08
    14c2:	7f 01       	movw	r14, r30
    14c4:	2e 85       	ldd	r18, Y+14	; 0x0e
    14c6:	3f 85       	ldd	r19, Y+15	; 0x0f
    14c8:	e2 0e       	add	r14, r18
    14ca:	f3 1e       	adc	r15, r19
    14cc:	a9 88       	ldd	r10, Y+17	; 0x11
    14ce:	ba 88       	ldd	r11, Y+18	; 0x12
    14d0:	0f 89       	ldd	r16, Y+23	; 0x17
    14d2:	18 8d       	ldd	r17, Y+24	; 0x18
    14d4:	78 88       	ldd	r7, Y+16	; 0x10
    14d6:	17 c0       	rjmp	.+46     	; 0x1506 <ht1632c_draw_char+0x118>
    14d8:	4d 81       	ldd	r20, Y+5	; 0x05
    14da:	5e 81       	ldd	r21, Y+6	; 0x06
    14dc:	40 31       	cpi	r20, 0x10	; 16
    14de:	51 05       	cpc	r21, r1
    14e0:	20 f4       	brcc	.+8      	; 0x14ea <ht1632c_draw_char+0xfc>
    14e2:	01 31       	cpi	r16, 0x11	; 17
    14e4:	11 05       	cpc	r17, r1
    14e6:	0c f4       	brge	.+2      	; 0x14ea <ht1632c_draw_char+0xfc>
    14e8:	fe c0       	rjmp	.+508    	; 0x16e6 <ht1632c_draw_char+0x2f8>
    14ea:	66 94       	lsr	r6
    14ec:	7f ef       	ldi	r23, 0xFF	; 255
    14ee:	a7 1a       	sub	r10, r23
    14f0:	b7 0a       	sbc	r11, r23
    14f2:	01 50       	subi	r16, 0x01	; 1
    14f4:	11 09       	sbc	r17, r1
    14f6:	29 81       	ldd	r18, Y+1	; 0x01
    14f8:	72 1a       	sub	r7, r18
    14fa:	4b 81       	ldd	r20, Y+3	; 0x03
    14fc:	5c 81       	ldd	r21, Y+4	; 0x04
    14fe:	04 17       	cp	r16, r20
    1500:	15 07       	cpc	r17, r21
    1502:	09 f4       	brne	.+2      	; 0x1506 <ht1632c_draw_char+0x118>
    1504:	bd c0       	rjmp	.+378    	; 0x1680 <ht1632c_draw_char+0x292>
    1506:	60 fe       	sbrs	r6, 0
    1508:	f0 cf       	rjmp	.-32     	; 0x14ea <ht1632c_draw_char+0xfc>
    150a:	39 81       	ldd	r19, Y+1	; 0x01
    150c:	31 30       	cpi	r19, 0x01	; 1
    150e:	21 f3       	breq	.-56     	; 0x14d8 <ht1632c_draw_char+0xea>
    1510:	ef 81       	ldd	r30, Y+7	; 0x07
    1512:	f8 85       	ldd	r31, Y+8	; 0x08
    1514:	ee 15       	cp	r30, r14
    1516:	ff 05       	cpc	r31, r15
    1518:	44 f7       	brge	.-48     	; 0x14ea <ht1632c_draw_char+0xfc>
    151a:	cf 01       	movw	r24, r30
    151c:	e7 2d       	mov	r30, r7
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	2e 85       	ldd	r18, Y+14	; 0x0e
    1522:	3f 85       	ldd	r19, Y+15	; 0x0f
    1524:	2e 0f       	add	r18, r30
    1526:	3f 1f       	adc	r19, r31
    1528:	89 84       	ldd	r8, Y+9	; 0x09
    152a:	e2 17       	cp	r30, r18
    152c:	f3 07       	cpc	r31, r19
    152e:	cc f4       	brge	.+50     	; 0x1562 <ht1632c_draw_char+0x174>
    1530:	ac 01       	movw	r20, r24
    1532:	44 0f       	add	r20, r20
    1534:	55 1f       	adc	r21, r21
    1536:	ba 01       	movw	r22, r20
    1538:	6f 50       	subi	r22, 0x0F	; 15
    153a:	71 09       	sbc	r23, r1
    153c:	88 30       	cpi	r24, 0x08	; 8
    153e:	91 05       	cpc	r25, r1
    1540:	0c f0       	brlt	.+2      	; 0x1544 <ht1632c_draw_char+0x156>
    1542:	ab 01       	movw	r20, r22
    1544:	44 0f       	add	r20, r20
    1546:	55 1f       	adc	r21, r21
    1548:	44 0f       	add	r20, r20
    154a:	55 1f       	adc	r21, r21
    154c:	44 0f       	add	r20, r20
    154e:	55 1f       	adc	r21, r21
    1550:	40 97       	sbiw	r24, 0x10	; 16
    1552:	74 f0       	brlt	.+28     	; 0x1570 <ht1632c_draw_char+0x182>
    1554:	47 2d       	mov	r20, r7
    1556:	4f 5f       	subi	r20, 0xFF	; 255
    1558:	84 2f       	mov	r24, r20
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	82 17       	cp	r24, r18
    155e:	93 07       	cpc	r25, r19
    1560:	d4 f3       	brlt	.-12     	; 0x1556 <ht1632c_draw_char+0x168>
    1562:	83 94       	inc	r8
    1564:	88 2d       	mov	r24, r8
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	8e 15       	cp	r24, r14
    156a:	9f 05       	cpc	r25, r15
    156c:	f4 f2       	brlt	.-68     	; 0x152a <ht1632c_draw_char+0x13c>
    156e:	bd cf       	rjmp	.-134    	; 0x14ea <ht1632c_draw_char+0xfc>
    1570:	6a 81       	ldd	r22, Y+2	; 0x02
    1572:	97 2c       	mov	r9, r7
    1574:	cf 01       	movw	r24, r30
    1576:	49 8f       	std	Y+25, r20	; 0x19
    1578:	5a 8f       	std	Y+26, r21	; 0x1a
    157a:	66 23       	and	r22, r22
    157c:	39 f0       	breq	.+14     	; 0x158c <ht1632c_draw_char+0x19e>
    157e:	6d c0       	rjmp	.+218    	; 0x165a <ht1632c_draw_char+0x26c>
    1580:	93 94       	inc	r9
    1582:	89 2d       	mov	r24, r9
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	82 17       	cp	r24, r18
    1588:	93 07       	cpc	r25, r19
    158a:	5c f7       	brge	.-42     	; 0x1562 <ht1632c_draw_char+0x174>
    158c:	80 31       	cpi	r24, 0x10	; 16
    158e:	91 05       	cpc	r25, r1
    1590:	bc f7       	brge	.-18     	; 0x1580 <ht1632c_draw_char+0x192>
    1592:	d1 01       	movw	r26, r2
    1594:	a8 1b       	sub	r26, r24
    1596:	b9 0b       	sbc	r27, r25
    1598:	cd 01       	movw	r24, r26
    159a:	b6 01       	movw	r22, r12
    159c:	0e 94 01 1a 	call	0x3402	; 0x3402 <__divmodhi4>
    15a0:	88 30       	cpi	r24, 0x08	; 8
    15a2:	91 05       	cpc	r25, r1
    15a4:	0c f4       	brge	.+2      	; 0x15a8 <ht1632c_draw_char+0x1ba>
    15a6:	5d c0       	rjmp	.+186    	; 0x1662 <ht1632c_draw_char+0x274>
    15a8:	80 31       	cpi	r24, 0x10	; 16
    15aa:	91 05       	cpc	r25, r1
    15ac:	0c f0       	brlt	.+2      	; 0x15b0 <ht1632c_draw_char+0x1c2>
    15ae:	62 c0       	rjmp	.+196    	; 0x1674 <ht1632c_draw_char+0x286>
    15b0:	47 e8       	ldi	r20, 0x87	; 135
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	87 70       	andi	r24, 0x07	; 7
    15b6:	99 27       	eor	r25, r25
    15b8:	ba 01       	movw	r22, r20
    15ba:	68 1b       	sub	r22, r24
    15bc:	79 0b       	sbc	r23, r25
    15be:	cb 01       	movw	r24, r22
    15c0:	49 8d       	ldd	r20, Y+25	; 0x19
    15c2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    15c4:	84 0f       	add	r24, r20
    15c6:	95 1f       	adc	r25, r21
    15c8:	dc 01       	movw	r26, r24
    15ca:	b6 95       	lsr	r27
    15cc:	a7 95       	ror	r26
    15ce:	b6 95       	lsr	r27
    15d0:	a7 95       	ror	r26
    15d2:	b6 95       	lsr	r27
    15d4:	a7 95       	ror	r26
    15d6:	ac 59       	subi	r26, 0x9C	; 156
    15d8:	ba 4d       	sbci	r27, 0xDA	; 218
    15da:	87 70       	andi	r24, 0x07	; 7
    15dc:	99 27       	eor	r25, r25
    15de:	b2 01       	movw	r22, r4
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <ht1632c_draw_char+0x1f8>
    15e2:	66 0f       	add	r22, r22
    15e4:	77 1f       	adc	r23, r23
    15e6:	8a 95       	dec	r24
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <ht1632c_draw_char+0x1f4>
    15ea:	cb 01       	movw	r24, r22
    15ec:	80 95       	com	r24
    15ee:	9c 91       	ld	r25, X
    15f0:	98 23       	and	r25, r24
    15f2:	9c 93       	st	X, r25
    15f4:	c5 cf       	rjmp	.-118    	; 0x1580 <ht1632c_draw_char+0x192>
    15f6:	d1 01       	movw	r26, r2
    15f8:	a8 1b       	sub	r26, r24
    15fa:	b9 0b       	sbc	r27, r25
    15fc:	cd 01       	movw	r24, r26
    15fe:	b6 01       	movw	r22, r12
    1600:	0e 94 01 1a 	call	0x3402	; 0x3402 <__divmodhi4>
    1604:	88 30       	cpi	r24, 0x08	; 8
    1606:	91 05       	cpc	r25, r1
    1608:	7c f5       	brge	.+94     	; 0x1668 <ht1632c_draw_char+0x27a>
    160a:	47 e0       	ldi	r20, 0x07	; 7
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	87 70       	andi	r24, 0x07	; 7
    1610:	99 27       	eor	r25, r25
    1612:	ba 01       	movw	r22, r20
    1614:	68 1b       	sub	r22, r24
    1616:	79 0b       	sbc	r23, r25
    1618:	cb 01       	movw	r24, r22
    161a:	49 8d       	ldd	r20, Y+25	; 0x19
    161c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    161e:	84 0f       	add	r24, r20
    1620:	95 1f       	adc	r25, r21
    1622:	dc 01       	movw	r26, r24
    1624:	b6 95       	lsr	r27
    1626:	a7 95       	ror	r26
    1628:	b6 95       	lsr	r27
    162a:	a7 95       	ror	r26
    162c:	b6 95       	lsr	r27
    162e:	a7 95       	ror	r26
    1630:	ac 59       	subi	r26, 0x9C	; 156
    1632:	ba 4d       	sbci	r27, 0xDA	; 218
    1634:	87 70       	andi	r24, 0x07	; 7
    1636:	99 27       	eor	r25, r25
    1638:	b2 01       	movw	r22, r4
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <ht1632c_draw_char+0x252>
    163c:	66 0f       	add	r22, r22
    163e:	77 1f       	adc	r23, r23
    1640:	8a 95       	dec	r24
    1642:	e2 f7       	brpl	.-8      	; 0x163c <ht1632c_draw_char+0x24e>
    1644:	cb 01       	movw	r24, r22
    1646:	9c 91       	ld	r25, X
    1648:	98 2b       	or	r25, r24
    164a:	9c 93       	st	X, r25
    164c:	93 94       	inc	r9
    164e:	89 2d       	mov	r24, r9
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	82 17       	cp	r24, r18
    1654:	93 07       	cpc	r25, r19
    1656:	0c f0       	brlt	.+2      	; 0x165a <ht1632c_draw_char+0x26c>
    1658:	84 cf       	rjmp	.-248    	; 0x1562 <ht1632c_draw_char+0x174>
    165a:	80 31       	cpi	r24, 0x10	; 16
    165c:	91 05       	cpc	r25, r1
    165e:	b4 f7       	brge	.-20     	; 0x164c <ht1632c_draw_char+0x25e>
    1660:	ca cf       	rjmp	.-108    	; 0x15f6 <ht1632c_draw_char+0x208>
    1662:	47 e0       	ldi	r20, 0x07	; 7
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	a6 cf       	rjmp	.-180    	; 0x15b4 <ht1632c_draw_char+0x1c6>
    1668:	80 31       	cpi	r24, 0x10	; 16
    166a:	91 05       	cpc	r25, r1
    166c:	34 f4       	brge	.+12     	; 0x167a <ht1632c_draw_char+0x28c>
    166e:	47 e8       	ldi	r20, 0x87	; 135
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	cd cf       	rjmp	.-102    	; 0x160e <ht1632c_draw_char+0x220>
    1674:	47 e0       	ldi	r20, 0x07	; 7
    1676:	51 e0       	ldi	r21, 0x01	; 1
    1678:	9d cf       	rjmp	.-198    	; 0x15b4 <ht1632c_draw_char+0x1c6>
    167a:	47 e0       	ldi	r20, 0x07	; 7
    167c:	51 e0       	ldi	r21, 0x01	; 1
    167e:	c7 cf       	rjmp	.-114    	; 0x160e <ht1632c_draw_char+0x220>
    1680:	ea 85       	ldd	r30, Y+10	; 0x0a
    1682:	fb 85       	ldd	r31, Y+11	; 0x0b
    1684:	31 96       	adiw	r30, 0x01	; 1
    1686:	ea 87       	std	Y+10, r30	; 0x0a
    1688:	fb 87       	std	Y+11, r31	; 0x0b
    168a:	2d 81       	ldd	r18, Y+5	; 0x05
    168c:	3e 81       	ldd	r19, Y+6	; 0x06
    168e:	2f 5f       	subi	r18, 0xFF	; 255
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	2d 83       	std	Y+5, r18	; 0x05
    1694:	3e 83       	std	Y+6, r19	; 0x06
    1696:	4c 85       	ldd	r20, Y+12	; 0x0c
    1698:	5d 85       	ldd	r21, Y+13	; 0x0d
    169a:	4e 5f       	subi	r20, 0xFE	; 254
    169c:	5f 4f       	sbci	r21, 0xFF	; 255
    169e:	4c 87       	std	Y+12, r20	; 0x0c
    16a0:	5d 87       	std	Y+13, r21	; 0x0d
    16a2:	89 85       	ldd	r24, Y+9	; 0x09
    16a4:	29 81       	ldd	r18, Y+1	; 0x01
    16a6:	82 0f       	add	r24, r18
    16a8:	4d 81       	ldd	r20, Y+5	; 0x05
    16aa:	5e 81       	ldd	r21, Y+6	; 0x06
    16ac:	2d 89       	ldd	r18, Y+21	; 0x15
    16ae:	3e 89       	ldd	r19, Y+22	; 0x16
    16b0:	42 17       	cp	r20, r18
    16b2:	53 07       	cpc	r21, r19
    16b4:	11 f0       	breq	.+4      	; 0x16ba <ht1632c_draw_char+0x2cc>
    16b6:	89 87       	std	Y+9, r24	; 0x09
    16b8:	eb ce       	rjmp	.-554    	; 0x1490 <ht1632c_draw_char+0xa2>
    16ba:	6a 96       	adiw	r28, 0x1a	; 26
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	ff 90       	pop	r15
    16ca:	ef 90       	pop	r14
    16cc:	df 90       	pop	r13
    16ce:	cf 90       	pop	r12
    16d0:	bf 90       	pop	r11
    16d2:	af 90       	pop	r10
    16d4:	9f 90       	pop	r9
    16d6:	8f 90       	pop	r8
    16d8:	7f 90       	pop	r7
    16da:	6f 90       	pop	r6
    16dc:	5f 90       	pop	r5
    16de:	4f 90       	pop	r4
    16e0:	3f 90       	pop	r3
    16e2:	2f 90       	pop	r2
    16e4:	08 95       	ret
    16e6:	c5 01       	movw	r24, r10
    16e8:	b6 01       	movw	r22, r12
    16ea:	0e 94 01 1a 	call	0x3402	; 0x3402 <__divmodhi4>
    16ee:	88 30       	cpi	r24, 0x08	; 8
    16f0:	91 05       	cpc	r25, r1
    16f2:	74 f0       	brlt	.+28     	; 0x1710 <ht1632c_draw_char+0x322>
    16f4:	80 31       	cpi	r24, 0x10	; 16
    16f6:	91 05       	cpc	r25, r1
    16f8:	9c f5       	brge	.+102    	; 0x1760 <ht1632c_draw_char+0x372>
    16fa:	27 e8       	ldi	r18, 0x87	; 135
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	87 70       	andi	r24, 0x07	; 7
    1700:	90 78       	andi	r25, 0x80	; 128
    1702:	97 ff       	sbrs	r25, 7
    1704:	0b c0       	rjmp	.+22     	; 0x171c <ht1632c_draw_char+0x32e>
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	88 6f       	ori	r24, 0xF8	; 248
    170a:	9f 6f       	ori	r25, 0xFF	; 255
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	06 c0       	rjmp	.+12     	; 0x171c <ht1632c_draw_char+0x32e>
    1710:	27 e0       	ldi	r18, 0x07	; 7
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	87 70       	andi	r24, 0x07	; 7
    1716:	90 78       	andi	r25, 0x80	; 128
    1718:	97 fd       	sbrc	r25, 7
    171a:	f5 cf       	rjmp	.-22     	; 0x1706 <ht1632c_draw_char+0x318>
    171c:	b9 01       	movw	r22, r18
    171e:	68 1b       	sub	r22, r24
    1720:	79 0b       	sbc	r23, r25
    1722:	cb 01       	movw	r24, r22
    1724:	eb 89       	ldd	r30, Y+19	; 0x13
    1726:	fc 89       	ldd	r31, Y+20	; 0x14
    1728:	8e 0f       	add	r24, r30
    172a:	9f 1f       	adc	r25, r31
    172c:	2a 81       	ldd	r18, Y+2	; 0x02
    172e:	fc 01       	movw	r30, r24
    1730:	f6 95       	lsr	r31
    1732:	e7 95       	ror	r30
    1734:	f6 95       	lsr	r31
    1736:	e7 95       	ror	r30
    1738:	f6 95       	lsr	r31
    173a:	e7 95       	ror	r30
    173c:	ec 59       	subi	r30, 0x9C	; 156
    173e:	fa 4d       	sbci	r31, 0xDA	; 218
    1740:	87 70       	andi	r24, 0x07	; 7
    1742:	99 27       	eor	r25, r25
    1744:	21 11       	cpse	r18, r1
    1746:	0f c0       	rjmp	.+30     	; 0x1766 <ht1632c_draw_char+0x378>
    1748:	b2 01       	movw	r22, r4
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <ht1632c_draw_char+0x362>
    174c:	66 0f       	add	r22, r22
    174e:	77 1f       	adc	r23, r23
    1750:	8a 95       	dec	r24
    1752:	e2 f7       	brpl	.-8      	; 0x174c <ht1632c_draw_char+0x35e>
    1754:	cb 01       	movw	r24, r22
    1756:	80 95       	com	r24
    1758:	90 81       	ld	r25, Z
    175a:	89 23       	and	r24, r25
    175c:	80 83       	st	Z, r24
    175e:	c5 ce       	rjmp	.-630    	; 0x14ea <ht1632c_draw_char+0xfc>
    1760:	27 e0       	ldi	r18, 0x07	; 7
    1762:	31 e0       	ldi	r19, 0x01	; 1
    1764:	d7 cf       	rjmp	.-82     	; 0x1714 <ht1632c_draw_char+0x326>
    1766:	a2 01       	movw	r20, r4
    1768:	02 c0       	rjmp	.+4      	; 0x176e <ht1632c_draw_char+0x380>
    176a:	44 0f       	add	r20, r20
    176c:	55 1f       	adc	r21, r21
    176e:	8a 95       	dec	r24
    1770:	e2 f7       	brpl	.-8      	; 0x176a <ht1632c_draw_char+0x37c>
    1772:	ca 01       	movw	r24, r20
    1774:	90 81       	ld	r25, Z
    1776:	98 2b       	or	r25, r24
    1778:	90 83       	st	Z, r25
    177a:	b7 ce       	rjmp	.-658    	; 0x14ea <ht1632c_draw_char+0xfc>

0000177c <ht1632c_motion_print>:

void ht1632c_motion_print(uint8_t *str, int16_t x) {
    177c:	0f 93       	push	r16
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	ec 01       	movw	r28, r24
}

/*------------------------------STRING FUNCTIONS------------------------------*/

void ht1632c_set_cursor(int16_t x, int16_t y) {
	cursor_x = x;
    1784:	60 93 62 25 	sts	0x2562, r22
    1788:	70 93 63 25 	sts	0x2563, r23
	cursor_y = y;
    178c:	25 e0       	ldi	r18, 0x05	; 5
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	20 93 60 25 	sts	0x2560, r18
    1794:	30 93 61 25 	sts	0x2561, r19
    1798:	80 e2       	ldi	r24, 0x20	; 32
    179a:	e4 e6       	ldi	r30, 0x64	; 100
    179c:	f5 e2       	ldi	r31, 0x25	; 37
    179e:	df 01       	movw	r26, r30
    17a0:	1d 92       	st	X+, r1
    17a2:	8a 95       	dec	r24
    17a4:	e9 f7       	brne	.-6      	; 0x17a0 <ht1632c_motion_print+0x24>
}

void ht1632c_print(uint8_t *str) {
	
	ht1632c_clear_buffer();
	while(*str) {
    17a6:	48 81       	ld	r20, Y
    17a8:	44 23       	and	r20, r20
    17aa:	e9 f0       	breq	.+58     	; 0x17e6 <ht1632c_motion_print+0x6a>
    17ac:	00 91 04 20 	lds	r16, 0x2004
    17b0:	21 96       	adiw	r28, 0x01	; 1
    17b2:	cb 01       	movw	r24, r22
    17b4:	01 c0       	rjmp	.+2      	; 0x17b8 <ht1632c_motion_print+0x3c>
    17b6:	c9 01       	movw	r24, r18
		ht1632c_draw_char(cursor_x, cursor_y, *str++, 1, textsize);
    17b8:	21 e0       	ldi	r18, 0x01	; 1
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	65 e0       	ldi	r22, 0x05	; 5
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	16 de       	rcall	.-980    	; 0x13ee <ht1632c_draw_char>
		cursor_x += textsize*6;
    17c2:	00 91 04 20 	lds	r16, 0x2004
    17c6:	20 91 62 25 	lds	r18, 0x2562
    17ca:	30 91 63 25 	lds	r19, 0x2563
    17ce:	96 e0       	ldi	r25, 0x06	; 6
    17d0:	09 9f       	mul	r16, r25
    17d2:	20 0d       	add	r18, r0
    17d4:	31 1d       	adc	r19, r1
    17d6:	11 24       	eor	r1, r1
    17d8:	20 93 62 25 	sts	0x2562, r18
    17dc:	30 93 63 25 	sts	0x2563, r19
}

void ht1632c_print(uint8_t *str) {
	
	ht1632c_clear_buffer();
	while(*str) {
    17e0:	49 91       	ld	r20, Y+
    17e2:	41 11       	cpse	r20, r1
    17e4:	e8 cf       	rjmp	.-48     	; 0x17b6 <ht1632c_motion_print+0x3a>
		ht1632c_draw_char(cursor_x, cursor_y, *str++, 1, textsize);
		cursor_x += textsize*6;
	}
	ht1632c_refresh_screen();
    17e6:	a1 dc       	rcall	.-1726   	; 0x112a <ht1632c_refresh_screen>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17e8:	bf ef       	ldi	r27, 0xFF	; 255
    17ea:	29 ef       	ldi	r18, 0xF9	; 249
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	b1 50       	subi	r27, 0x01	; 1
    17f0:	20 40       	sbci	r18, 0x00	; 0
    17f2:	80 40       	sbci	r24, 0x00	; 0
    17f4:	e1 f7       	brne	.-8      	; 0x17ee <ht1632c_motion_print+0x72>
    17f6:	00 c0       	rjmp	.+0      	; 0x17f8 <ht1632c_motion_print+0x7c>
    17f8:	00 00       	nop
void ht1632c_motion_print(uint8_t *str, int16_t x) {
	
	ht1632c_set_cursor(x,5);
	ht1632c_print(str);
	_delay_ms(10);
}
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	0f 91       	pop	r16
    1800:	08 95       	ret

00001802 <jsmn_init>:

/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
    1802:	fc 01       	movw	r30, r24
	parser->pos = 0;
    1804:	10 82       	st	Z, r1
    1806:	11 82       	std	Z+1, r1	; 0x01
	parser->toknext = 0;
    1808:	12 82       	std	Z+2, r1	; 0x02
    180a:	13 82       	std	Z+3, r1	; 0x03
	parser->toksuper = -1;
    180c:	8f ef       	ldi	r24, 0xFF	; 255
    180e:	9f ef       	ldi	r25, 0xFF	; 255
    1810:	84 83       	std	Z+4, r24	; 0x04
    1812:	95 83       	std	Z+5, r25	; 0x05
    1814:	08 95       	ret

00001816 <main>:
		}
		ht1632_fade(reg01/400);
	}
}

int main(void) {
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	68 97       	sbiw	r28, 0x18	; 24
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	de bf       	out	0x3e, r29	; 62
	jsmnerr_t r;
	char rx_buf[200];
	
	esp8266_status_t status;
	
	clock_setup_32_mhz();
    1824:	0e 94 9c 03 	call	0x738	; 0x738 <clock_setup_32_mhz>
	ht1632c_setup(HT1632_COMMON_16NMOS);
    1828:	84 e2       	ldi	r24, 0x24	; 36
    182a:	67 d8       	rcall	.-3890   	; 0x8fa <ht1632c_setup>
	ht1632c_set_brightness(0);
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	12 db       	rcall	.-2524   	; 0xe54 <ht1632c_set_brightness>
	ht1632c_clear_screen();
    1830:	d6 dd       	rcall	.-1108   	; 0x13de <ht1632c_clear_screen>
	
	//adc_setup();
	uart_setup();
    1832:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <uart_setup>
void uart_put_char(char c);
static FILE mystdout = FDEV_SETUP_STREAM(uart_put_char,uart_get_char,_FDEV_SETUP_WRITE);

void pmic_setup(void) {
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    1836:	87 e0       	ldi	r24, 0x07	; 7
    1838:	80 93 a2 00 	sts	0x00A2, r24
	ht1632c_clear_screen();
	
	//adc_setup();
	uart_setup();
	pmic_setup();
	twi_setup(&TWIC);
    183c:	80 e8       	ldi	r24, 0x80	; 128
    183e:	94 e0       	ldi	r25, 0x04	; 4
    1840:	1f d2       	rcall	.+1086   	; 0x1c80 <twi_setup>
	si114x_setup();
    1842:	29 d7       	rcall	.+3666   	; 0x2696 <si114x_setup>
	//printf( "Key[%d]: %s\n", i, keyString );
	puts(keyString);
}

void tcc_setup(void) {
	TCC1.CTRLA = TC_CLKSEL_DIV1_gc;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	80 93 40 08 	sts	0x0840, r24
	TCC1.PERL = 0x80;
    184a:	90 e8       	ldi	r25, 0x80	; 128
    184c:	90 93 66 08 	sts	0x0866, r25
	TCC1.PERH = 0x0C;
    1850:	9c e0       	ldi	r25, 0x0C	; 12
    1852:	90 93 67 08 	sts	0x0867, r25
	TCC1.INTCTRLA = TC_OVFINTLVL_LO_gc;
    1856:	80 93 46 08 	sts	0x0846, r24
	uart_setup();
	pmic_setup();
	twi_setup(&TWIC);
	si114x_setup();
	tcc_setup();
	btn_setup();
    185a:	3f d0       	rcall	.+126    	; 0x18da <btn_setup>
	rtc_setup();
    185c:	6e d0       	rcall	.+220    	; 0x193a <rtc_setup>
	rtc_init_time();
    185e:	8b d0       	rcall	.+278    	; 0x1976 <rtc_init_time>
	jsmn_init(&p);
    1860:	ce 01       	movw	r24, r28
    1862:	43 96       	adiw	r24, 0x13	; 19
    1864:	ce df       	rcall	.-100    	; 0x1802 <jsmn_init>
	
	stdout = stdin = &mystdout;
    1866:	85 e0       	ldi	r24, 0x05	; 5
    1868:	90 e2       	ldi	r25, 0x20	; 32
    186a:	80 93 0a 26 	sts	0x260A, r24
    186e:	90 93 0b 26 	sts	0x260B, r25
    1872:	80 93 0c 26 	sts	0x260C, r24
    1876:	90 93 0d 26 	sts	0x260D, r25
	puts("LED MATRIX Clock - By: Erlend Hestnes\r\n");
    187a:	87 ea       	ldi	r24, 0xA7	; 167
    187c:	90 e2       	ldi	r25, 0x20	; 32
    187e:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <puts>
	
	rtc_set_time(18,50,0);
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	62 e3       	ldi	r22, 0x32	; 50
    1886:	82 e1       	ldi	r24, 0x12	; 18
    1888:	02 d1       	rcall	.+516    	; 0x1a8e <rtc_set_time>
	
	sei();
    188a:	78 94       	sei
				//rtc_decrement_hour();
				_delay_ms(250);
				break;
		}
		*/
		sensor_data.timestamp = counter;
    188c:	80 91 94 25 	lds	r24, 0x2594
    1890:	90 91 95 25 	lds	r25, 0x2595
    1894:	8b 83       	std	Y+3, r24	; 0x03
    1896:	9c 83       	std	Y+4, r25	; 0x04
		si114x_get_data(&sensor_data);
    1898:	ce 01       	movw	r24, r28
    189a:	01 96       	adiw	r24, 0x01	; 1
    189c:	f3 d2       	rcall	.+1510   	; 0x1e84 <si114x_get_data>
		si114x_process_samples(SI114X_ADDR,&sensor_data); 
    189e:	be 01       	movw	r22, r28
    18a0:	6f 5f       	subi	r22, 0xFF	; 255
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	8a e5       	ldi	r24, 0x5A	; 90
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	fc d6       	rcall	.+3576   	; 0x26a2 <si114x_process_samples>
    18aa:	f0 cf       	rjmp	.-32     	; 0x188c <main+0x76>

000018ac <__vector_20>:
		//rtc_update_display_alt();
	}
}

//Used for SI114x Timestamp
ISR(TCC1_OVF_vect) {
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	8f 93       	push	r24
    18b8:	9f 93       	push	r25
	counter++;
    18ba:	80 91 94 25 	lds	r24, 0x2594
    18be:	90 91 95 25 	lds	r25, 0x2595
    18c2:	01 96       	adiw	r24, 0x01	; 1
    18c4:	80 93 94 25 	sts	0x2594, r24
    18c8:	90 93 95 25 	sts	0x2595, r25
}
    18cc:	9f 91       	pop	r25
    18ce:	8f 91       	pop	r24
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	0f 90       	pop	r0
    18d6:	1f 90       	pop	r1
    18d8:	18 95       	reti

000018da <btn_setup>:
	} else if (!(PORTB.IN & PIN0_bm)) {
		return BTN4;
	} else {
		return NONE;
	}
}
    18da:	80 ee       	ldi	r24, 0xE0	; 224
    18dc:	e0 e0       	ldi	r30, 0x00	; 0
    18de:	f6 e0       	ldi	r31, 0x06	; 6
    18e0:	82 83       	std	Z+2, r24	; 0x02
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	e0 e2       	ldi	r30, 0x20	; 32
    18e6:	f6 e0       	ldi	r31, 0x06	; 6
    18e8:	82 83       	std	Z+2, r24	; 0x02
    18ea:	08 95       	ret

000018ec <__vector_66>:

ISR(PORTA_INT0_vect) {
    18ec:	1f 92       	push	r1
    18ee:	0f 92       	push	r0
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	0f 92       	push	r0
    18f4:	11 24       	eor	r1, r1
    18f6:	0b b6       	in	r0, 0x3b	; 59
    18f8:	0f 92       	push	r0
    18fa:	2f 93       	push	r18
    18fc:	3f 93       	push	r19
    18fe:	4f 93       	push	r20
    1900:	5f 93       	push	r21
    1902:	6f 93       	push	r22
    1904:	7f 93       	push	r23
    1906:	8f 93       	push	r24
    1908:	9f 93       	push	r25
    190a:	af 93       	push	r26
    190c:	bf 93       	push	r27
    190e:	ef 93       	push	r30
    1910:	ff 93       	push	r31
	ht1632c_clear_screen();
    1912:	65 dd       	rcall	.-1334   	; 0x13de <ht1632c_clear_screen>
    1914:	ff 91       	pop	r31
    1916:	ef 91       	pop	r30
    1918:	bf 91       	pop	r27
    191a:	af 91       	pop	r26
    191c:	9f 91       	pop	r25
    191e:	8f 91       	pop	r24
    1920:	7f 91       	pop	r23
    1922:	6f 91       	pop	r22
    1924:	5f 91       	pop	r21
    1926:	4f 91       	pop	r20
    1928:	3f 91       	pop	r19
    192a:	2f 91       	pop	r18
    192c:	0f 90       	pop	r0
    192e:	0b be       	out	0x3b, r0	; 59
    1930:	0f 90       	pop	r0
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	0f 90       	pop	r0
    1936:	1f 90       	pop	r1
    1938:	18 95       	reti

0000193a <rtc_setup>:
	strcat(buffer, buffer_hours);
	strcat(buffer, ":");
	strcat(buffer,buffer_minutes);
	
	ht1632c_scroll_print(buffer,2,2);
}
    193a:	88 ed       	ldi	r24, 0xD8	; 216
    193c:	84 bf       	out	0x34, r24	; 52
    193e:	8b e0       	ldi	r24, 0x0B	; 11
    1940:	80 93 43 00 	sts	0x0043, r24
    1944:	80 91 01 04 	lds	r24, 0x0401
    1948:	80 fd       	sbrc	r24, 0
    194a:	fc cf       	rjmp	.-8      	; 0x1944 <rtc_setup+0xa>
    194c:	88 ee       	ldi	r24, 0xE8	; 232
    194e:	93 e0       	ldi	r25, 0x03	; 3
    1950:	80 93 0a 04 	sts	0x040A, r24
    1954:	90 93 0b 04 	sts	0x040B, r25
    1958:	82 e0       	ldi	r24, 0x02	; 2
    195a:	80 93 02 04 	sts	0x0402, r24
    195e:	10 92 08 04 	sts	0x0408, r1
    1962:	10 92 09 04 	sts	0x0409, r1
    1966:	10 92 0c 04 	sts	0x040C, r1
    196a:	10 92 0d 04 	sts	0x040D, r1
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	80 93 00 04 	sts	0x0400, r24
    1974:	08 95       	ret

00001976 <rtc_init_time>:
    1976:	bf 92       	push	r11
    1978:	cf 92       	push	r12
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	00 d0       	rcall	.+0      	; 0x198a <rtc_init_time+0x14>
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	27 dd       	rcall	.-1458   	; 0x13de <ht1632c_clear_screen>
    1990:	10 92 fe 25 	sts	0x25FE, r1
    1994:	10 92 fd 25 	sts	0x25FD, r1
    1998:	10 92 fc 25 	sts	0x25FC, r1
    199c:	10 92 ff 25 	sts	0x25FF, r1
    19a0:	10 92 00 26 	sts	0x2600, r1
    19a4:	10 92 02 26 	sts	0x2602, r1
    19a8:	10 92 03 26 	sts	0x2603, r1
    19ac:	1f 92       	push	r1
    19ae:	1f 92       	push	r1
    19b0:	8f ec       	ldi	r24, 0xCF	; 207
    19b2:	c8 2e       	mov	r12, r24
    19b4:	80 e2       	ldi	r24, 0x20	; 32
    19b6:	d8 2e       	mov	r13, r24
    19b8:	df 92       	push	r13
    19ba:	cf 92       	push	r12
    19bc:	ce 01       	movw	r24, r28
    19be:	01 96       	adiw	r24, 0x01	; 1
    19c0:	7c 01       	movw	r14, r24
    19c2:	ff 92       	push	r15
    19c4:	8f 93       	push	r24
    19c6:	0e 94 a1 1a 	call	0x3542	; 0x3542 <sprintf>
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	90 e3       	ldi	r25, 0x30	; 48
    19ce:	b9 2e       	mov	r11, r25
    19d0:	b9 82       	std	Y+1, r11	; 0x01
    19d2:	8a 83       	std	Y+2, r24	; 0x02
    19d4:	00 e0       	ldi	r16, 0x00	; 0
    19d6:	10 e0       	ldi	r17, 0x00	; 0
    19d8:	28 e0       	ldi	r18, 0x08	; 8
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e1       	ldi	r20, 0x10	; 16
    19de:	50 e0       	ldi	r21, 0x00	; 0
    19e0:	60 e0       	ldi	r22, 0x00	; 0
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	c4 da       	rcall	.-2680   	; 0xf72 <ht1632c_fill_rect>
    19ea:	49 81       	ldd	r20, Y+1	; 0x01
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	01 e0       	ldi	r16, 0x01	; 1
    19f0:	10 e0       	ldi	r17, 0x00	; 0
    19f2:	21 e0       	ldi	r18, 0x01	; 1
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	82 e0       	ldi	r24, 0x02	; 2
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	f7 dc       	rcall	.-1554   	; 0x13ee <ht1632c_draw_char>
    1a00:	4a 81       	ldd	r20, Y+2	; 0x02
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	21 e0       	ldi	r18, 0x01	; 1
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	89 e0       	ldi	r24, 0x09	; 9
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	ee dc       	rcall	.-1572   	; 0x13ee <ht1632c_draw_char>
    1a12:	8b db       	rcall	.-2282   	; 0x112a <ht1632c_refresh_screen>
    1a14:	10 91 fe 25 	lds	r17, 0x25FE
    1a18:	1f 92       	push	r1
    1a1a:	1f 93       	push	r17
    1a1c:	df 92       	push	r13
    1a1e:	cf 92       	push	r12
    1a20:	ff 92       	push	r15
    1a22:	ef 92       	push	r14
    1a24:	0e 94 a1 1a 	call	0x3542	; 0x3542 <sprintf>
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	1a 30       	cpi	r17, 0x0A	; 10
    1a2e:	18 f4       	brcc	.+6      	; 0x1a36 <rtc_init_time+0xc0>
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	b9 82       	std	Y+1, r11	; 0x01
    1a34:	8a 83       	std	Y+2, r24	; 0x02
    1a36:	00 e0       	ldi	r16, 0x00	; 0
    1a38:	10 e0       	ldi	r17, 0x00	; 0
    1a3a:	28 e0       	ldi	r18, 0x08	; 8
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e1       	ldi	r20, 0x10	; 16
    1a40:	50 e0       	ldi	r21, 0x00	; 0
    1a42:	69 e0       	ldi	r22, 0x09	; 9
    1a44:	70 e0       	ldi	r23, 0x00	; 0
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	93 da       	rcall	.-2778   	; 0xf72 <ht1632c_fill_rect>
    1a4c:	49 81       	ldd	r20, Y+1	; 0x01
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	01 e0       	ldi	r16, 0x01	; 1
    1a52:	10 e0       	ldi	r17, 0x00	; 0
    1a54:	21 e0       	ldi	r18, 0x01	; 1
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	69 e0       	ldi	r22, 0x09	; 9
    1a5a:	70 e0       	ldi	r23, 0x00	; 0
    1a5c:	82 e0       	ldi	r24, 0x02	; 2
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	c6 dc       	rcall	.-1652   	; 0x13ee <ht1632c_draw_char>
    1a62:	4a 81       	ldd	r20, Y+2	; 0x02
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	21 e0       	ldi	r18, 0x01	; 1
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	69 e0       	ldi	r22, 0x09	; 9
    1a6c:	70 e0       	ldi	r23, 0x00	; 0
    1a6e:	89 e0       	ldi	r24, 0x09	; 9
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	bd dc       	rcall	.-1670   	; 0x13ee <ht1632c_draw_char>
    1a74:	5a db       	rcall	.-2380   	; 0x112a <ht1632c_refresh_screen>
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	df 90       	pop	r13
    1a88:	cf 90       	pop	r12
    1a8a:	bf 90       	pop	r11
    1a8c:	08 95       	ret

00001a8e <rtc_set_time>:
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <rtc_set_time+0xe>
    1a9c:	1f 92       	push	r1
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	f8 94       	cli
    1aa4:	80 93 fe 25 	sts	0x25FE, r24
    1aa8:	60 93 fd 25 	sts	0x25FD, r22
    1aac:	40 93 fc 25 	sts	0x25FC, r20
    1ab0:	1f 92       	push	r1
    1ab2:	6f 93       	push	r22
    1ab4:	8f ec       	ldi	r24, 0xCF	; 207
    1ab6:	90 e2       	ldi	r25, 0x20	; 32
    1ab8:	9f 93       	push	r25
    1aba:	8f 93       	push	r24
    1abc:	ce 01       	movw	r24, r28
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	7c 01       	movw	r14, r24
    1ac2:	ff 92       	push	r15
    1ac4:	8f 93       	push	r24
    1ac6:	6b 83       	std	Y+3, r22	; 0x03
    1ac8:	0e 94 a1 1a 	call	0x3542	; 0x3542 <sprintf>
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	6b 81       	ldd	r22, Y+3	; 0x03
    1ada:	6a 30       	cpi	r22, 0x0A	; 10
    1adc:	20 f4       	brcc	.+8      	; 0x1ae6 <rtc_set_time+0x58>
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	90 e3       	ldi	r25, 0x30	; 48
    1ae2:	99 83       	std	Y+1, r25	; 0x01
    1ae4:	8a 83       	std	Y+2, r24	; 0x02
    1ae6:	00 e0       	ldi	r16, 0x00	; 0
    1ae8:	10 e0       	ldi	r17, 0x00	; 0
    1aea:	28 e0       	ldi	r18, 0x08	; 8
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e1       	ldi	r20, 0x10	; 16
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	3b da       	rcall	.-2954   	; 0xf72 <ht1632c_fill_rect>
    1afc:	49 81       	ldd	r20, Y+1	; 0x01
    1afe:	50 e0       	ldi	r21, 0x00	; 0
    1b00:	01 e0       	ldi	r16, 0x01	; 1
    1b02:	10 e0       	ldi	r17, 0x00	; 0
    1b04:	21 e0       	ldi	r18, 0x01	; 1
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	70 e0       	ldi	r23, 0x00	; 0
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	6e dc       	rcall	.-1828   	; 0x13ee <ht1632c_draw_char>
    1b12:	4a 81       	ldd	r20, Y+2	; 0x02
    1b14:	50 e0       	ldi	r21, 0x00	; 0
    1b16:	21 e0       	ldi	r18, 0x01	; 1
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	70 e0       	ldi	r23, 0x00	; 0
    1b1e:	89 e0       	ldi	r24, 0x09	; 9
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	65 dc       	rcall	.-1846   	; 0x13ee <ht1632c_draw_char>
    1b24:	02 db       	rcall	.-2556   	; 0x112a <ht1632c_refresh_screen>
    1b26:	10 91 fe 25 	lds	r17, 0x25FE
    1b2a:	1f 92       	push	r1
    1b2c:	1f 93       	push	r17
    1b2e:	8f ec       	ldi	r24, 0xCF	; 207
    1b30:	90 e2       	ldi	r25, 0x20	; 32
    1b32:	9f 93       	push	r25
    1b34:	8f 93       	push	r24
    1b36:	ff 92       	push	r15
    1b38:	ef 92       	push	r14
    1b3a:	0e 94 a1 1a 	call	0x3542	; 0x3542 <sprintf>
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	1a 30       	cpi	r17, 0x0A	; 10
    1b4c:	20 f4       	brcc	.+8      	; 0x1b56 <rtc_set_time+0xc8>
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	90 e3       	ldi	r25, 0x30	; 48
    1b52:	99 83       	std	Y+1, r25	; 0x01
    1b54:	8a 83       	std	Y+2, r24	; 0x02
    1b56:	00 e0       	ldi	r16, 0x00	; 0
    1b58:	10 e0       	ldi	r17, 0x00	; 0
    1b5a:	28 e0       	ldi	r18, 0x08	; 8
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e1       	ldi	r20, 0x10	; 16
    1b60:	50 e0       	ldi	r21, 0x00	; 0
    1b62:	69 e0       	ldi	r22, 0x09	; 9
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	03 da       	rcall	.-3066   	; 0xf72 <ht1632c_fill_rect>
    1b6c:	49 81       	ldd	r20, Y+1	; 0x01
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	01 e0       	ldi	r16, 0x01	; 1
    1b72:	10 e0       	ldi	r17, 0x00	; 0
    1b74:	21 e0       	ldi	r18, 0x01	; 1
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	69 e0       	ldi	r22, 0x09	; 9
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	82 e0       	ldi	r24, 0x02	; 2
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	36 dc       	rcall	.-1940   	; 0x13ee <ht1632c_draw_char>
    1b82:	4a 81       	ldd	r20, Y+2	; 0x02
    1b84:	50 e0       	ldi	r21, 0x00	; 0
    1b86:	21 e0       	ldi	r18, 0x01	; 1
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	69 e0       	ldi	r22, 0x09	; 9
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	89 e0       	ldi	r24, 0x09	; 9
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	2d dc       	rcall	.-1958   	; 0x13ee <ht1632c_draw_char>
    1b94:	ca da       	rcall	.-2668   	; 0x112a <ht1632c_refresh_screen>
    1b96:	78 94       	sei
    1b98:	23 96       	adiw	r28, 0x03	; 3
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	08 95       	ret

00001bac <__vector_10>:

ISR(RTC_OVF_vect) {
    1bac:	1f 92       	push	r1
    1bae:	0f 92       	push	r0
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	0f 92       	push	r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	2f 93       	push	r18
    1bb8:	3f 93       	push	r19
    1bba:	4f 93       	push	r20
    1bbc:	5f 93       	push	r21
    1bbe:	6f 93       	push	r22
    1bc0:	7f 93       	push	r23
    1bc2:	8f 93       	push	r24
    1bc4:	9f 93       	push	r25
    1bc6:	af 93       	push	r26
    1bc8:	bf 93       	push	r27
    1bca:	ef 93       	push	r30
	if (++time.seconds == 60) {
    1bcc:	80 91 fc 25 	lds	r24, 0x25FC
    1bd0:	8f 5f       	subi	r24, 0xFF	; 255
    1bd2:	80 93 fc 25 	sts	0x25FC, r24
    1bd6:	8c 33       	cpi	r24, 0x3C	; 60
    1bd8:	81 f0       	breq	.+32     	; 0x1bfa <__vector_10+0x4e>
			time.minutes = 0;
		} else {
			//rtc_update_display(BOTTOM,time.minutes);
		}
	}
}
    1bda:	ef 91       	pop	r30
    1bdc:	bf 91       	pop	r27
    1bde:	af 91       	pop	r26
    1be0:	9f 91       	pop	r25
    1be2:	8f 91       	pop	r24
    1be4:	7f 91       	pop	r23
    1be6:	6f 91       	pop	r22
    1be8:	5f 91       	pop	r21
    1bea:	4f 91       	pop	r20
    1bec:	3f 91       	pop	r19
    1bee:	2f 91       	pop	r18
    1bf0:	0f 90       	pop	r0
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	0f 90       	pop	r0
    1bf6:	1f 90       	pop	r1
    1bf8:	18 95       	reti
}

ISR(RTC_OVF_vect) {
	if (++time.seconds == 60) {
		
		time.seconds = 0;
    1bfa:	10 92 fc 25 	sts	0x25FC, r1
			
		if (++time.minutes == 60) {
    1bfe:	80 91 fd 25 	lds	r24, 0x25FD
    1c02:	8f 5f       	subi	r24, 0xFF	; 255
    1c04:	80 93 fd 25 	sts	0x25FD, r24
    1c08:	8c 33       	cpi	r24, 0x3C	; 60
    1c0a:	39 f7       	brne	.-50     	; 0x1bda <__vector_10+0x2e>
			
			time.minutes = 0;
    1c0c:	10 92 fd 25 	sts	0x25FD, r1
			//rtc_update_display(BOTTOM,time.minutes);
			
			if (++time.hours == 24) {
    1c10:	80 91 fe 25 	lds	r24, 0x25FE
    1c14:	8f 5f       	subi	r24, 0xFF	; 255
    1c16:	80 93 fe 25 	sts	0x25FE, r24
    1c1a:	88 31       	cpi	r24, 0x18	; 24
    1c1c:	f1 f6       	brne	.-68     	; 0x1bda <__vector_10+0x2e>
				time.weeks += (++time.days)/7;
    1c1e:	e0 91 01 26 	lds	r30, 0x2601
    1c22:	40 91 ff 25 	lds	r20, 0x25FF
    1c26:	50 91 00 26 	lds	r21, 0x2600
    1c2a:	4f 5f       	subi	r20, 0xFF	; 255
    1c2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2e:	40 93 ff 25 	sts	0x25FF, r20
    1c32:	50 93 00 26 	sts	0x2600, r21
    1c36:	9a 01       	movw	r18, r20
    1c38:	a3 e9       	ldi	r26, 0x93	; 147
    1c3a:	b4 e2       	ldi	r27, 0x24	; 36
    1c3c:	0e 94 36 1a 	call	0x346c	; 0x346c <__umulhisi3>
    1c40:	28 1b       	sub	r18, r24
    1c42:	39 0b       	sbc	r19, r25
    1c44:	36 95       	lsr	r19
    1c46:	27 95       	ror	r18
    1c48:	28 0f       	add	r18, r24
    1c4a:	39 1f       	adc	r19, r25
    1c4c:	36 95       	lsr	r19
    1c4e:	27 95       	ror	r18
    1c50:	36 95       	lsr	r19
    1c52:	27 95       	ror	r18
    1c54:	e2 0f       	add	r30, r18
    1c56:	e0 93 01 26 	sts	0x2601, r30
				time.years += time.weeks/52;
    1c5a:	8f e4       	ldi	r24, 0x4F	; 79
    1c5c:	e8 9f       	mul	r30, r24
    1c5e:	e1 2d       	mov	r30, r1
    1c60:	11 24       	eor	r1, r1
    1c62:	e2 95       	swap	r30
    1c64:	ef 70       	andi	r30, 0x0F	; 15
    1c66:	80 91 02 26 	lds	r24, 0x2602
    1c6a:	90 91 03 26 	lds	r25, 0x2603
    1c6e:	8e 0f       	add	r24, r30
    1c70:	91 1d       	adc	r25, r1
    1c72:	80 93 02 26 	sts	0x2602, r24
    1c76:	90 93 03 26 	sts	0x2603, r25
				time.hours = 0;
    1c7a:	10 92 fe 25 	sts	0x25FE, r1
    1c7e:	ad cf       	rjmp	.-166    	; 0x1bda <__vector_10+0x2e>

00001c80 <twi_setup>:
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;

	return true;
}
    1c80:	e0 e8       	ldi	r30, 0x80	; 128
    1c82:	f4 e0       	ldi	r31, 0x04	; 4
    1c84:	12 82       	std	Z+2, r1	; 0x02
    1c86:	89 e0       	ldi	r24, 0x09	; 9
    1c88:	85 83       	std	Z+5, r24	; 0x05
    1c8a:	88 e0       	ldi	r24, 0x08	; 8
    1c8c:	81 83       	std	Z+1, r24	; 0x01
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	84 83       	std	Z+4, r24	; 0x04
    1c92:	08 95       	ret

00001c94 <twi_read_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
uint8_t* data,
uint8_t length)
{
    1c94:	ef 92       	push	r14
    1c96:	0f 93       	push	r16
    1c98:	1f 93       	push	r17
    1c9a:	dc 01       	movw	r26, r24
	uint8_t error_code;
	uint8_t len = length;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    1c9c:	76 2f       	mov	r23, r22
    1c9e:	77 0f       	add	r23, r23
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    1ca0:	16 96       	adiw	r26, 0x06	; 6
    1ca2:	7c 93       	st	X, r23
    1ca4:	16 97       	sbiw	r26, 0x06	; 6

	timeout_remaining = (timeout_ms * 100);
    1ca6:	84 e6       	ldi	r24, 0x64	; 100
    1ca8:	48 9f       	mul	r20, r24
    1caa:	a0 01       	movw	r20, r0
    1cac:	11 24       	eor	r1, r1
	while (timeout_remaining)
    1cae:	41 15       	cp	r20, r1
    1cb0:	51 05       	cpc	r21, r1
    1cb2:	01 f1       	breq	.+64     	; 0x1cf4 <twi_read_packet+0x60>
    1cb4:	fa 01       	movw	r30, r20
    1cb6:	0d c0       	rjmp	.+26     	; 0x1cd2 <twi_read_packet+0x3e>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    1cb8:	39 2f       	mov	r19, r25
    1cba:	30 75       	andi	r19, 0x50	; 80
    1cbc:	30 35       	cpi	r19, 0x50	; 80
    1cbe:	f9 f0       	breq	.+62     	; 0x1cfe <twi_read_packet+0x6a>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    1cc0:	90 7c       	andi	r25, 0xC0	; 192
    1cc2:	29 f5       	brne	.+74     	; 0x1d0e <twi_read_packet+0x7a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cc4:	83 e0       	ldi	r24, 0x03	; 3
    1cc6:	8a 95       	dec	r24
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <twi_read_packet+0x32>
    1cca:	00 00       	nop
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    1ccc:	31 97       	sbiw	r30, 0x01	; 1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    1cce:	30 97       	sbiw	r30, 0x00	; 0
    1cd0:	89 f0       	breq	.+34     	; 0x1cf4 <twi_read_packet+0x60>
	{
		uint8_t status = TWI->MASTER.STATUS;
    1cd2:	14 96       	adiw	r26, 0x04	; 4
    1cd4:	9c 91       	ld	r25, X
    1cd6:	14 97       	sbiw	r26, 0x04	; 4

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    1cd8:	39 2f       	mov	r19, r25
    1cda:	38 74       	andi	r19, 0x48	; 72
    1cdc:	38 34       	cpi	r19, 0x48	; 72
    1cde:	61 f7       	brne	.-40     	; 0x1cb8 <twi_read_packet+0x24>
		{
			TWI->MASTER.ADDR = slave_address;
    1ce0:	16 96       	adiw	r26, 0x06	; 6
    1ce2:	7c 93       	st	X, r23
    1ce4:	16 97       	sbiw	r26, 0x06	; 6
    1ce6:	83 e0       	ldi	r24, 0x03	; 3
    1ce8:	8a 95       	dec	r24
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <twi_read_packet+0x54>
    1cec:	00 00       	nop
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    1cee:	31 97       	sbiw	r30, 0x01	; 1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    1cf0:	30 97       	sbiw	r30, 0x00	; 0
    1cf2:	79 f7       	brne	.-34     	; 0x1cd2 <twi_read_packet+0x3e>
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    1cf4:	14 96       	adiw	r26, 0x04	; 4
    1cf6:	8c 91       	ld	r24, X
    1cf8:	14 97       	sbiw	r26, 0x04	; 4
    1cfa:	85 ff       	sbrs	r24, 5
    1cfc:	03 c0       	rjmp	.+6      	; 0x1d04 <twi_read_packet+0x70>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1cfe:	87 e0       	ldi	r24, 0x07	; 7
    1d00:	13 96       	adiw	r26, 0x03	; 3
    1d02:	8c 93       	st	X, r24
		}

		twi_stop_transmission(TWI);
	}

	return len;
    1d04:	8e 2d       	mov	r24, r14
}
    1d06:	1f 91       	pop	r17
    1d08:	0f 91       	pop	r16
    1d0a:	ef 90       	pop	r14
    1d0c:	08 95       	ret
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    1d0e:	17 96       	adiw	r26, 0x07	; 7
    1d10:	2c 93       	st	X, r18
    1d12:	17 97       	sbiw	r26, 0x07	; 7

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    1d14:	14 96       	adiw	r26, 0x04	; 4
    1d16:	9c 91       	ld	r25, X
    1d18:	14 97       	sbiw	r26, 0x04	; 4
    1d1a:	96 ff       	sbrs	r25, 6
    1d1c:	fb cf       	rjmp	.-10     	; 0x1d14 <twi_read_packet+0x80>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    1d1e:	14 96       	adiw	r26, 0x04	; 4
    1d20:	8c 91       	ld	r24, X
    1d22:	14 97       	sbiw	r26, 0x04	; 4
    1d24:	86 ff       	sbrs	r24, 6
    1d26:	25 c0       	rjmp	.+74     	; 0x1d72 <twi_read_packet+0xde>
    1d28:	14 96       	adiw	r26, 0x04	; 4
    1d2a:	8c 91       	ld	r24, X
    1d2c:	14 97       	sbiw	r26, 0x04	; 4
    1d2e:	84 fd       	sbrc	r24, 4
    1d30:	20 c0       	rjmp	.+64     	; 0x1d72 <twi_read_packet+0xde>
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
    1d32:	66 0f       	add	r22, r22
    1d34:	61 60       	ori	r22, 0x01	; 1
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    1d36:	16 96       	adiw	r26, 0x06	; 6
    1d38:	6c 93       	st	X, r22
    1d3a:	16 97       	sbiw	r26, 0x06	; 6
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <twi_read_packet+0xc8>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    1d3e:	89 2f       	mov	r24, r25
    1d40:	80 75       	andi	r24, 0x50	; 80
    1d42:	80 35       	cpi	r24, 0x50	; 80
    1d44:	01 f1       	breq	.+64     	; 0x1d86 <twi_read_packet+0xf2>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    1d46:	90 7c       	andi	r25, 0xC0	; 192
    1d48:	39 f5       	brne	.+78     	; 0x1d98 <twi_read_packet+0x104>
    1d4a:	83 e0       	ldi	r24, 0x03	; 3
    1d4c:	8a 95       	dec	r24
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <twi_read_packet+0xb8>
    1d50:	00 00       	nop
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    1d52:	41 50       	subi	r20, 0x01	; 1
    1d54:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    1d56:	41 15       	cp	r20, r1
    1d58:	51 05       	cpc	r21, r1
    1d5a:	81 f0       	breq	.+32     	; 0x1d7c <twi_read_packet+0xe8>
	{
		uint8_t status = TWI->MASTER.STATUS;
    1d5c:	14 96       	adiw	r26, 0x04	; 4
    1d5e:	9c 91       	ld	r25, X
    1d60:	14 97       	sbiw	r26, 0x04	; 4

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    1d62:	89 2f       	mov	r24, r25
    1d64:	88 74       	andi	r24, 0x48	; 72
    1d66:	88 34       	cpi	r24, 0x48	; 72
    1d68:	51 f7       	brne	.-44     	; 0x1d3e <twi_read_packet+0xaa>
		{
			TWI->MASTER.ADDR = slave_address;
    1d6a:	16 96       	adiw	r26, 0x06	; 6
    1d6c:	6c 93       	st	X, r22
    1d6e:	16 97       	sbiw	r26, 0x06	; 6
    1d70:	ec cf       	rjmp	.-40     	; 0x1d4a <twi_read_packet+0xb6>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    1d72:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return len;
}
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	ef 90       	pop	r14
    1d7a:	08 95       	ret
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    1d7c:	14 96       	adiw	r26, 0x04	; 4
    1d7e:	8c 91       	ld	r24, X
    1d80:	14 97       	sbiw	r26, 0x04	; 4
    1d82:	85 ff       	sbrs	r24, 5
    1d84:	04 c0       	rjmp	.+8      	; 0x1d8e <twi_read_packet+0xfa>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1d86:	87 e0       	ldi	r24, 0x07	; 7
    1d88:	13 96       	adiw	r26, 0x03	; 3
    1d8a:	8c 93       	st	X, r24
    1d8c:	13 97       	sbiw	r26, 0x03	; 3
    1d8e:	87 e0       	ldi	r24, 0x07	; 7
    1d90:	13 96       	adiw	r26, 0x03	; 3
    1d92:	8c 93       	st	X, r24
		}

		twi_stop_transmission(TWI);
	}

	return len;
    1d94:	8e 2d       	mov	r24, r14
    1d96:	b7 cf       	rjmp	.-146    	; 0x1d06 <twi_read_packet+0x72>
    1d98:	2f ef       	ldi	r18, 0xFF	; 255
    1d9a:	2e 0d       	add	r18, r14
    1d9c:	f8 01       	movw	r30, r16
	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1d9e:	42 e0       	ldi	r20, 0x02	; 2
	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm));

	*data = TWI->MASTER.DATA;

	if (end_of_data)
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1da0:	37 e0       	ldi	r19, 0x07	; 7
		}

		if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_READ,
		timeout_ms)) == TWI_ERROR_NO_ERROR)
		{
			while (length--)
    1da2:	2f 3f       	cpi	r18, 0xFF	; 255
    1da4:	a1 f3       	breq	.-24     	; 0x1d8e <twi_read_packet+0xfa>

uint8_t twi_receive_byte(TWI_t* const TWI, 
uint8_t* const data, 
const uint8_t end_of_data)
{
	if ((TWI->MASTER.STATUS & (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_BUSERR_bm | TWI_MASTER_ARBLOST_bm)) {
    1da6:	14 96       	adiw	r26, 0x04	; 4
    1da8:	8c 91       	ld	r24, X
    1daa:	14 97       	sbiw	r26, 0x04	; 4
    1dac:	8c 70       	andi	r24, 0x0C	; 12
    1dae:	8c 30       	cpi	r24, 0x0C	; 12
    1db0:	71 f3       	breq	.-36     	; 0x1d8e <twi_read_packet+0xfa>
		return false;
	}

	while (!(TWI->MASTER.STATUS & TWI_MASTER_RIF_bm));
    1db2:	14 96       	adiw	r26, 0x04	; 4
    1db4:	9c 91       	ld	r25, X
    1db6:	14 97       	sbiw	r26, 0x04	; 4
    1db8:	97 ff       	sbrs	r25, 7
    1dba:	fb cf       	rjmp	.-10     	; 0x1db2 <twi_read_packet+0x11e>

	*data = TWI->MASTER.DATA;
    1dbc:	17 96       	adiw	r26, 0x07	; 7
    1dbe:	8c 91       	ld	r24, X
    1dc0:	17 97       	sbiw	r26, 0x07	; 7
    1dc2:	81 93       	st	Z+, r24

	if (end_of_data)
    1dc4:	21 11       	cpse	r18, r1
    1dc6:	05 c0       	rjmp	.+10     	; 0x1dd2 <twi_read_packet+0x13e>
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1dc8:	13 96       	adiw	r26, 0x03	; 3
    1dca:	3c 93       	st	X, r19
    1dcc:	13 97       	sbiw	r26, 0x03	; 3
    1dce:	21 50       	subi	r18, 0x01	; 1
    1dd0:	e8 cf       	rjmp	.-48     	; 0x1da2 <twi_read_packet+0x10e>
	else
	TWI->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    1dd2:	13 96       	adiw	r26, 0x03	; 3
    1dd4:	4c 93       	st	X, r20
    1dd6:	13 97       	sbiw	r26, 0x03	; 3
    1dd8:	21 50       	subi	r18, 0x01	; 1
    1dda:	e3 cf       	rjmp	.-58     	; 0x1da2 <twi_read_packet+0x10e>

00001ddc <twi_write_packet>:
const uint8_t slave_address,
const uint8_t timeout_ms,
const uint8_t reg,
const uint8_t* data,
uint8_t length)
{
    1ddc:	ef 92       	push	r14
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	fc 01       	movw	r30, r24
	uint8_t error_code;

	if ((error_code = twi_start_transmission(TWI, (slave_address << 1) | TWI_ADDRESS_WRITE,
    1de4:	66 0f       	add	r22, r22
const uint8_t slave_address, 
const uint8_t timeout_ms)
{
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;
    1de6:	66 83       	std	Z+6, r22	; 0x06

	timeout_remaining = (timeout_ms * 100);
    1de8:	84 e6       	ldi	r24, 0x64	; 100
    1dea:	48 9f       	mul	r20, r24
    1dec:	a0 01       	movw	r20, r0
    1dee:	11 24       	eor	r1, r1
	while (timeout_remaining)
    1df0:	41 15       	cp	r20, r1
    1df2:	51 05       	cpc	r21, r1
    1df4:	81 f4       	brne	.+32     	; 0x1e16 <twi_write_packet+0x3a>
    1df6:	16 c0       	rjmp	.+44     	; 0x1e24 <twi_write_packet+0x48>

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
		{
			TWI->MASTER.ADDR = slave_address;
		}
		else if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_RXACK_bm))
    1df8:	39 2f       	mov	r19, r25
    1dfa:	30 75       	andi	r19, 0x50	; 80
    1dfc:	30 35       	cpi	r19, 0x50	; 80
    1dfe:	a9 f0       	breq	.+42     	; 0x1e2a <twi_write_packet+0x4e>
		{
			twi_stop_transmission(TWI);
			return TWI_ERROR_SLAVE_RESPONSE_TIMEOUT;
		}
		else if (status & (TWI_MASTER_WIF_bm | TWI_MASTER_RIF_bm))
    1e00:	90 7c       	andi	r25, 0xC0	; 192
    1e02:	d1 f4       	brne	.+52     	; 0x1e38 <twi_write_packet+0x5c>
    1e04:	83 e0       	ldi	r24, 0x03	; 3
    1e06:	8a 95       	dec	r24
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <twi_write_packet+0x2a>
    1e0a:	00 00       	nop
		{
			return TWI_ERROR_NO_ERROR;
		}

		_delay_us(10);
		timeout_remaining--;
    1e0c:	41 50       	subi	r20, 0x01	; 1
    1e0e:	51 09       	sbc	r21, r1
	uint16_t timeout_remaining;

	TWI->MASTER.ADDR = slave_address;

	timeout_remaining = (timeout_ms * 100);
	while (timeout_remaining)
    1e10:	41 15       	cp	r20, r1
    1e12:	51 05       	cpc	r21, r1
    1e14:	39 f0       	breq	.+14     	; 0x1e24 <twi_write_packet+0x48>
	{
		uint8_t status = TWI->MASTER.STATUS;
    1e16:	94 81       	ldd	r25, Z+4	; 0x04

		if ((status & (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm)) == (TWI_MASTER_WIF_bm | TWI_MASTER_ARBLOST_bm))
    1e18:	39 2f       	mov	r19, r25
    1e1a:	38 74       	andi	r19, 0x48	; 72
    1e1c:	38 34       	cpi	r19, 0x48	; 72
    1e1e:	61 f7       	brne	.-40     	; 0x1df8 <twi_write_packet+0x1c>
		{
			TWI->MASTER.ADDR = slave_address;
    1e20:	66 83       	std	Z+6, r22	; 0x06
    1e22:	f0 cf       	rjmp	.-32     	; 0x1e04 <twi_write_packet+0x28>
		_delay_us(10);
		timeout_remaining--;
	}

	if (!(timeout_remaining)) {
		if (TWI->MASTER.STATUS & TWI_MASTER_CLKHOLD_bm) {
    1e24:	84 81       	ldd	r24, Z+4	; 0x04
    1e26:	85 ff       	sbrs	r24, 5
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <twi_write_packet+0x52>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1e2a:	87 e0       	ldi	r24, 0x07	; 7
    1e2c:	83 83       	std	Z+3, r24	; 0x03
    1e2e:	8e 2d       	mov	r24, r14

		twi_stop_transmission(TWI);
	}

	return length;
    1e30:	1f 91       	pop	r17
    1e32:	0f 91       	pop	r16
    1e34:	ef 90       	pop	r14
    1e36:	08 95       	ret
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    1e38:	27 83       	std	Z+7, r18	; 0x07

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    1e3a:	94 81       	ldd	r25, Z+4	; 0x04
    1e3c:	96 ff       	sbrs	r25, 6
    1e3e:	fd cf       	rjmp	.-6      	; 0x1e3a <twi_write_packet+0x5e>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    1e40:	84 81       	ldd	r24, Z+4	; 0x04
    1e42:	86 ff       	sbrs	r24, 6
    1e44:	13 c0       	rjmp	.+38     	; 0x1e6c <twi_write_packet+0x90>
    1e46:	84 81       	ldd	r24, Z+4	; 0x04
    1e48:	84 fd       	sbrc	r24, 4
    1e4a:	10 c0       	rjmp	.+32     	; 0x1e6c <twi_write_packet+0x90>
    1e4c:	d8 01       	movw	r26, r16
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	8e 0d       	add	r24, r14
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
		}

		while (length--)
    1e52:	8f 3f       	cpi	r24, 0xFF	; 255
    1e54:	41 f0       	breq	.+16     	; 0x1e66 <twi_write_packet+0x8a>
		{
			if (!(twi_send_byte(TWI, *(data++))))
    1e56:	9d 91       	ld	r25, X+
}

uint8_t twi_send_byte(TWI_t* const TWI, 
const uint8_t data)
{
	TWI->MASTER.DATA = data;
    1e58:	97 83       	std	Z+7, r25	; 0x07

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));
    1e5a:	94 81       	ldd	r25, Z+4	; 0x04
    1e5c:	96 ff       	sbrs	r25, 6
    1e5e:	fd cf       	rjmp	.-6      	; 0x1e5a <twi_write_packet+0x7e>

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    1e60:	94 81       	ldd	r25, Z+4	; 0x04
    1e62:	96 fd       	sbrc	r25, 6
    1e64:	08 c0       	rjmp	.+16     	; 0x1e76 <twi_write_packet+0x9a>
	TWIC.MASTER.CTRLA = TWI_MASTER_ENABLE_bm;
	TWIC.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
}

void twi_stop_transmission(TWI_t* const TWI) {
	TWI->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    1e66:	97 e0       	ldi	r25, 0x07	; 7
    1e68:	93 83       	std	Z+3, r25	; 0x03
    1e6a:	e2 cf       	rjmp	.-60     	; 0x1e30 <twi_write_packet+0x54>
	timeout_ms)) == TWI_ERROR_NO_ERROR)
	{
		if (!(twi_send_byte(TWI, reg)))
		{
			error_code = TWI_ERROR_SLAVE_NAK;
			return error_code;
    1e6c:	86 e0       	ldi	r24, 0x06	; 6

		twi_stop_transmission(TWI);
	}

	return length;
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	ef 90       	pop	r14
    1e74:	08 95       	ret
{
	TWI->MASTER.DATA = data;

	while (!(TWI->MASTER.STATUS & TWI_MASTER_WIF_bm));

	return (TWI->MASTER.STATUS & TWI_MASTER_WIF_bm) && !(TWI->MASTER.STATUS & TWI_MASTER_RXACK_bm);
    1e76:	94 81       	ldd	r25, Z+4	; 0x04
    1e78:	2f ef       	ldi	r18, 0xFF	; 255
    1e7a:	28 0f       	add	r18, r24
    1e7c:	94 fd       	sbrc	r25, 4
    1e7e:	f3 cf       	rjmp	.-26     	; 0x1e66 <twi_write_packet+0x8a>
    1e80:	82 2f       	mov	r24, r18
    1e82:	e7 cf       	rjmp	.-50     	; 0x1e52 <twi_write_packet+0x76>

00001e84 <si114x_get_data>:

	if(retval < 0)
	return retval;
	else
	return 0;
}
    1e84:	cf 92       	push	r12
    1e86:	df 92       	push	r13
    1e88:	ef 92       	push	r14
    1e8a:	0f 93       	push	r16
    1e8c:	1f 93       	push	r17
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <si114x_get_data+0x10>
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	6c 01       	movw	r12, r24
    1e9a:	82 e0       	ldi	r24, 0x02	; 2
    1e9c:	e8 2e       	mov	r14, r24
    1e9e:	8e 01       	movw	r16, r28
    1ea0:	0f 5f       	subi	r16, 0xFF	; 255
    1ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea4:	26 e2       	ldi	r18, 0x26	; 38
    1ea6:	48 ee       	ldi	r20, 0xE8	; 232
    1ea8:	6a e5       	ldi	r22, 0x5A	; 90
    1eaa:	80 e8       	ldi	r24, 0x80	; 128
    1eac:	94 e0       	ldi	r25, 0x04	; 4
    1eae:	f2 de       	rcall	.-540    	; 0x1c94 <twi_read_packet>
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	98 2f       	mov	r25, r24
    1eb6:	88 27       	eor	r24, r24
    1eb8:	29 81       	ldd	r18, Y+1	; 0x01
    1eba:	82 2b       	or	r24, r18
    1ebc:	f6 01       	movw	r30, r12
    1ebe:	82 87       	std	Z+10, r24	; 0x0a
    1ec0:	93 87       	std	Z+11, r25	; 0x0b
    1ec2:	28 e2       	ldi	r18, 0x28	; 40
    1ec4:	48 ee       	ldi	r20, 0xE8	; 232
    1ec6:	6a e5       	ldi	r22, 0x5A	; 90
    1ec8:	80 e8       	ldi	r24, 0x80	; 128
    1eca:	94 e0       	ldi	r25, 0x04	; 4
    1ecc:	e3 de       	rcall	.-570    	; 0x1c94 <twi_read_packet>
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	98 2f       	mov	r25, r24
    1ed4:	88 27       	eor	r24, r24
    1ed6:	29 81       	ldd	r18, Y+1	; 0x01
    1ed8:	82 2b       	or	r24, r18
    1eda:	f6 01       	movw	r30, r12
    1edc:	84 87       	std	Z+12, r24	; 0x0c
    1ede:	95 87       	std	Z+13, r25	; 0x0d
    1ee0:	2a e2       	ldi	r18, 0x2A	; 42
    1ee2:	48 ee       	ldi	r20, 0xE8	; 232
    1ee4:	6a e5       	ldi	r22, 0x5A	; 90
    1ee6:	80 e8       	ldi	r24, 0x80	; 128
    1ee8:	94 e0       	ldi	r25, 0x04	; 4
    1eea:	d4 de       	rcall	.-600    	; 0x1c94 <twi_read_packet>
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	98 2f       	mov	r25, r24
    1ef2:	88 27       	eor	r24, r24
    1ef4:	29 81       	ldd	r18, Y+1	; 0x01
    1ef6:	82 2b       	or	r24, r18
    1ef8:	f6 01       	movw	r30, r12
    1efa:	86 87       	std	Z+14, r24	; 0x0e
    1efc:	97 87       	std	Z+15, r25	; 0x0f
    1efe:	24 e2       	ldi	r18, 0x24	; 36
    1f00:	48 ee       	ldi	r20, 0xE8	; 232
    1f02:	6a e5       	ldi	r22, 0x5A	; 90
    1f04:	80 e8       	ldi	r24, 0x80	; 128
    1f06:	94 e0       	ldi	r25, 0x04	; 4
    1f08:	c5 de       	rcall	.-630    	; 0x1c94 <twi_read_packet>
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	98 2f       	mov	r25, r24
    1f10:	88 27       	eor	r24, r24
    1f12:	29 81       	ldd	r18, Y+1	; 0x01
    1f14:	82 2b       	or	r24, r18
    1f16:	f6 01       	movw	r30, r12
    1f18:	80 87       	std	Z+8, r24	; 0x08
    1f1a:	91 87       	std	Z+9, r25	; 0x09
    1f1c:	22 e2       	ldi	r18, 0x22	; 34
    1f1e:	48 ee       	ldi	r20, 0xE8	; 232
    1f20:	6a e5       	ldi	r22, 0x5A	; 90
    1f22:	80 e8       	ldi	r24, 0x80	; 128
    1f24:	94 e0       	ldi	r25, 0x04	; 4
    1f26:	b6 de       	rcall	.-660    	; 0x1c94 <twi_read_packet>
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	98 2f       	mov	r25, r24
    1f2e:	88 27       	eor	r24, r24
    1f30:	29 81       	ldd	r18, Y+1	; 0x01
    1f32:	82 2b       	or	r24, r18
    1f34:	f6 01       	movw	r30, r12
    1f36:	86 83       	std	Z+6, r24	; 0x06
    1f38:	97 83       	std	Z+7, r25	; 0x07
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	df 91       	pop	r29
    1f40:	cf 91       	pop	r28
    1f42:	1f 91       	pop	r17
    1f44:	0f 91       	pop	r16
    1f46:	ef 90       	pop	r14
    1f48:	df 90       	pop	r13
    1f4a:	cf 90       	pop	r12
    1f4c:	08 95       	ret

00001f4e <Si114xPauseAll>:
{
	return _sendCmd(si114x_handle,0x0B);
}

s16 Si114xPauseAll(HANDLE si114x_handle)
{
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	ec 01       	movw	r28, r24
	while (1)
	{
		// Keep sending nops until the response is zero
		while (1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    1f58:	60 e2       	ldi	r22, 0x20	; 32
    1f5a:	ce 01       	movw	r24, r28
    1f5c:	25 d7       	rcall	.+3658   	; 0x2da8 <Si114xReadFromRegister>

	s16  response;
	s16  retval;

	// Get the response register contents
	if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    1f5e:	60 e2       	ldi	r22, 0x20	; 32
	while (1)
	{
		// Keep sending nops until the response is zero
		while (1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
    1f60:	89 2b       	or	r24, r25
    1f62:	61 f5       	brne	.+88     	; 0x1fbc <Si114xPauseAll+0x6e>

	s16  response;
	s16  retval;

	// Get the response register contents
	if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    1f64:	ce 01       	movw	r24, r28
    1f66:	20 d7       	rcall	.+3648   	; 0x2da8 <Si114xReadFromRegister>
    1f68:	8c 01       	movw	r16, r24
    1f6a:	97 fd       	sbrc	r25, 7
    1f6c:	16 c0       	rjmp	.+44     	; 0x1f9a <Si114xPauseAll+0x4c>
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <Si114xPauseAll+0x26>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    1f70:	97 fd       	sbrc	r25, 7
    1f72:	13 c0       	rjmp	.+38     	; 0x1f9a <Si114xPauseAll+0x4c>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1f74:	60 e3       	ldi	r22, 0x30	; 48
    1f76:	ce 01       	movw	r24, r28
    1f78:	17 d7       	rcall	.+3630   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    1f7a:	81 30       	cpi	r24, 0x01	; 1
    1f7c:	91 05       	cpc	r25, r1
    1f7e:	c1 f7       	brne	.-16     	; 0x1f70 <Si114xPauseAll+0x22>
	{
		if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

		if(command==0) break; // Skip if the command is NOP

		retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1f80:	60 e2       	ldi	r22, 0x20	; 32
    1f82:	ce 01       	movw	r24, r28
    1f84:	11 d7       	rcall	.+3618   	; 0x2da8 <Si114xReadFromRegister>
		if(retval==response) break;
    1f86:	80 17       	cp	r24, r16
    1f88:	91 07       	cpc	r25, r17
    1f8a:	39 f1       	breq	.+78     	; 0x1fda <Si114xPauseAll+0x8c>
		else if(retval<0) return retval;
    1f8c:	97 fd       	sbrc	r25, 7
    1f8e:	05 c0       	rjmp	.+10     	; 0x1f9a <Si114xPauseAll+0x4c>
    1f90:	8c 01       	movw	r16, r24
    1f92:	f0 cf       	rjmp	.-32     	; 0x1f74 <Si114xPauseAll+0x26>
	while(1)
	{

		if(command==0) break; // Skip if the command is NOP

		retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1f94:	60 e2       	ldi	r22, 0x20	; 32
    1f96:	ce 01       	movw	r24, r28
    1f98:	07 d7       	rcall	.+3598   	; 0x2da8 <Si114xReadFromRegister>
		_PsAlsPause(si114x_handle);

		// Wait for response
		while(1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    1f9a:	60 e2       	ldi	r22, 0x20	; 32
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	04 d7       	rcall	.+3592   	; 0x2da8 <Si114xReadFromRegister>
    1fa0:	89 2b       	or	r24, r25
    1fa2:	d9 f3       	breq	.-10     	; 0x1f9a <Si114xPauseAll+0x4c>
			break;
		}

		// When the PsAlsPause() response is good, we expect it to be a '1'.
		if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
    1fa4:	60 e2       	ldi	r22, 0x20	; 32
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	ff d6       	rcall	.+3582   	; 0x2da8 <Si114xReadFromRegister>
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	a9 f6       	brne	.-86     	; 0x1f58 <Si114xPauseAll+0xa>
		break;  // otherwise, start over.
	}
	return 0;
}
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	1f 91       	pop	r17
    1fb8:	0f 91       	pop	r16
    1fba:	08 95       	ret

	s16  response;
	s16  retval;

	// Get the response register contents
	if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    1fbc:	ce 01       	movw	r24, r28
    1fbe:	f4 d6       	rcall	.+3560   	; 0x2da8 <Si114xReadFromRegister>
    1fc0:	97 fd       	sbrc	r25, 7
    1fc2:	ca cf       	rjmp	.-108    	; 0x1f58 <Si114xPauseAll+0xa>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    1fc4:	60 e3       	ldi	r22, 0x30	; 48
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	ef d6       	rcall	.+3550   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    1fca:	81 30       	cpi	r24, 0x01	; 1
    1fcc:	91 05       	cpc	r25, r1
    1fce:	c1 f7       	brne	.-16     	; 0x1fc0 <Si114xPauseAll+0x72>
		else if(retval<0) return retval;
		else response = retval;
	}

	// Send the Command
	if ((retval=Si114xWriteToRegister(si114x_handle, REG_COMMAND, command)) !=0)
    1fd0:	40 e0       	ldi	r20, 0x00	; 0
    1fd2:	68 e1       	ldi	r22, 0x18	; 24
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	cb d6       	rcall	.+3478   	; 0x2d6e <Si114xWriteToRegister>
    1fd8:	bf cf       	rjmp	.-130    	; 0x1f58 <Si114xPauseAll+0xa>
    1fda:	4b e0       	ldi	r20, 0x0B	; 11
    1fdc:	68 e1       	ldi	r22, 0x18	; 24
    1fde:	ce 01       	movw	r24, r28
    1fe0:	c6 d6       	rcall	.+3468   	; 0x2d6e <Si114xWriteToRegister>
    1fe2:	89 2b       	or	r24, r25
    1fe4:	d1 f6       	brne	.-76     	; 0x1f9a <Si114xPauseAll+0x4c>
    1fe6:	17 fd       	sbrc	r17, 7
    1fe8:	d5 cf       	rjmp	.-86     	; 0x1f94 <Si114xPauseAll+0x46>
	while(1)
	{

		if(command==0) break; // Skip if the command is NOP

		retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    1fea:	60 e2       	ldi	r22, 0x20	; 32
    1fec:	ce 01       	movw	r24, r28
    1fee:	dc d6       	rcall	.+3512   	; 0x2da8 <Si114xReadFromRegister>
		if (retval != response) break;
    1ff0:	08 17       	cp	r16, r24
    1ff2:	19 07       	cpc	r17, r25
    1ff4:	d1 f3       	breq	.-12     	; 0x1fea <Si114xPauseAll+0x9c>
		_PsAlsPause(si114x_handle);

		// Wait for response
		while(1)
		{
			if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
    1ff6:	60 e2       	ldi	r22, 0x20	; 32
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	d6 d6       	rcall	.+3500   	; 0x2da8 <Si114xReadFromRegister>
    1ffc:	89 2b       	or	r24, r25
    1ffe:	69 f2       	breq	.-102    	; 0x1f9a <Si114xPauseAll+0x4c>
    2000:	d1 cf       	rjmp	.-94     	; 0x1fa4 <Si114xPauseAll+0x56>

00002002 <si114x_reset>:
	return 0;
}


s16 si114x_reset(HANDLE si114x_handle)
{
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	8c 01       	movw	r16, r24
	//
	// delay_10ms();
	// delay_10ms();
	// delay_10ms();

	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	68 e0       	ldi	r22, 0x08	; 8
    2010:	ae d6       	rcall	.+3420   	; 0x2d6e <Si114xWriteToRegister>
    2012:	ec 01       	movw	r28, r24
	retval+=Si114xPauseAll(si114x_handle);
    2014:	c8 01       	movw	r24, r16
    2016:	9b df       	rcall	.-202    	; 0x1f4e <Si114xPauseAll>
    2018:	c8 0f       	add	r28, r24
    201a:	d9 1f       	adc	r29, r25

	// The clearing of the registers could be redundant, but it is okay.
	// This is to make sure that these registers are cleared.
	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	68 e0       	ldi	r22, 0x08	; 8
    2020:	c8 01       	movw	r24, r16
    2022:	a5 d6       	rcall	.+3402   	; 0x2d6e <Si114xWriteToRegister>
    2024:	c8 0f       	add	r28, r24
    2026:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	64 e0       	ldi	r22, 0x04	; 4
    202c:	c8 01       	movw	r24, r16
    202e:	9f d6       	rcall	.+3390   	; 0x2d6e <Si114xWriteToRegister>
    2030:	c8 0f       	add	r28, r24
    2032:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    2034:	40 e0       	ldi	r20, 0x00	; 0
    2036:	65 e0       	ldi	r22, 0x05	; 5
    2038:	c8 01       	movw	r24, r16
    203a:	99 d6       	rcall	.+3378   	; 0x2d6e <Si114xWriteToRegister>
    203c:	c8 0f       	add	r28, r24
    203e:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	66 e0       	ldi	r22, 0x06	; 6
    2044:	c8 01       	movw	r24, r16
    2046:	93 d6       	rcall	.+3366   	; 0x2d6e <Si114xWriteToRegister>
    2048:	c8 0f       	add	r28, r24
    204a:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    204c:	40 e0       	ldi	r20, 0x00	; 0
    204e:	63 e0       	ldi	r22, 0x03	; 3
    2050:	c8 01       	movw	r24, r16
    2052:	8d d6       	rcall	.+3354   	; 0x2d6e <Si114xWriteToRegister>
    2054:	c8 0f       	add	r28, r24
    2056:	d9 1f       	adc	r29, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
    2058:	4f ef       	ldi	r20, 0xFF	; 255
    205a:	61 e2       	ldi	r22, 0x21	; 33
    205c:	c8 01       	movw	r24, r16
    205e:	87 d6       	rcall	.+3342   	; 0x2d6e <Si114xWriteToRegister>
    2060:	c8 0f       	add	r28, r24
    2062:	d9 1f       	adc	r29, r25

	// Perform the Reset Command
	retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	68 e1       	ldi	r22, 0x18	; 24
    2068:	c8 01       	movw	r24, r16
    206a:	81 d6       	rcall	.+3330   	; 0x2d6e <Si114xWriteToRegister>
    206c:	c8 0f       	add	r28, r24
    206e:	d9 1f       	adc	r29, r25

	// Delay for 10 ms. This delay is needed to allow the Si114x
	// to perform internal reset sequence.
	delay_10ms();
    2070:	c9 d6       	rcall	.+3474   	; 0x2e04 <delay_10ms>

	// Write Hardware Key
	retval+=Si114xWriteToRegister(si114x_handle, REG_HW_KEY, HW_KEY_VAL0);
    2072:	47 e1       	ldi	r20, 0x17	; 23
    2074:	67 e0       	ldi	r22, 0x07	; 7
    2076:	c8 01       	movw	r24, r16
    2078:	7a d6       	rcall	.+3316   	; 0x2d6e <Si114xWriteToRegister>

	return retval;
}
    207a:	8c 0f       	add	r24, r28
    207c:	9d 1f       	adc	r25, r29
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	08 95       	ret

00002088 <si114x_init>:
	data_16 = ((u16)data_8[1] << 8) | data_8[0];
	sensor_data->vis = data_16;
}

s16 si114x_init(HANDLE si114x_handle)
{
    2088:	cf 92       	push	r12
    208a:	df 92       	push	r13
    208c:	ef 92       	push	r14
    208e:	ff 92       	push	r15
    2090:	0f 93       	push	r16
    2092:	1f 93       	push	r17
    2094:	cf 93       	push	r28
    2096:	df 93       	push	r29
    2098:	00 d0       	rcall	.+0      	; 0x209a <si114x_init+0x12>
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	8c 01       	movw	r16, r24
	u8  code ps2ledsel     = LED2_EN;
	u8  code ps3ledsel     = LED3_EN;


	// Turn off RTC
	retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,     0 );
    20a0:	40 e0       	ldi	r20, 0x00	; 0
    20a2:	68 e0       	ldi	r22, 0x08	; 8
    20a4:	64 d6       	rcall	.+3272   	; 0x2d6e <Si114xWriteToRegister>
    20a6:	7c 01       	movw	r14, r24
	retval+=Si114xWriteToRegister(si114x_handle, REG_PS_RATE,       0 );
    20a8:	40 e0       	ldi	r20, 0x00	; 0
    20aa:	6a e0       	ldi	r22, 0x0A	; 10
    20ac:	c8 01       	movw	r24, r16
    20ae:	5f d6       	rcall	.+3262   	; 0x2d6e <Si114xWriteToRegister>
    20b0:	e8 0e       	add	r14, r24
    20b2:	f9 1e       	adc	r15, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE,      0 );
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	69 e0       	ldi	r22, 0x09	; 9
    20b8:	c8 01       	movw	r24, r16
    20ba:	59 d6       	rcall	.+3250   	; 0x2d6e <Si114xWriteToRegister>
    20bc:	e8 0e       	add	r14, r24
    20be:	f9 1e       	adc	r15, r25
	//     1. Pauses all prior measurements
	//     2. Clear  i2c registers that need to be cleared
	//     3. Clears irq status to make sure INT* is negated
	//     4. Delays 10 ms
	//     5. Sends HW Key
	retval+=si114x_reset(si114x_handle);
    20c0:	c8 01       	movw	r24, r16
    20c2:	9f df       	rcall	.-194    	; 0x2002 <si114x_reset>
    20c4:	e8 0e       	add	r14, r24
    20c6:	f9 1e       	adc	r15, r25
	{
		u8 i21, i3;

		i21 = (current_LED2<<4) + current_LED1;
		i3  = current_LED3;
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_LED21, i21);
    20c8:	4f ef       	ldi	r20, 0xFF	; 255
    20ca:	6f e0       	ldi	r22, 0x0F	; 15
    20cc:	c8 01       	movw	r24, r16
    20ce:	4f d6       	rcall	.+3230   	; 0x2d6e <Si114xWriteToRegister>
    20d0:	e8 0e       	add	r14, r24
    20d2:	f9 1e       	adc	r15, r25
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_LED3 , i3);
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	60 e1       	ldi	r22, 0x10	; 16
    20d8:	c8 01       	movw	r24, r16
    20da:	49 d6       	rcall	.+3218   	; 0x2d6e <Si114xWriteToRegister>
    20dc:	e8 0e       	add	r14, r24
    20de:	f9 1e       	adc	r15, r25
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <si114x_init+0x5e>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    20e2:	97 fd       	sbrc	r25, 7
    20e4:	22 c0       	rjmp	.+68     	; 0x212a <si114x_init+0xa2>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    20e6:	60 e3       	ldi	r22, 0x30	; 48
    20e8:	c8 01       	movw	r24, r16
    20ea:	5e d6       	rcall	.+3260   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    20ec:	81 30       	cpi	r24, 0x01	; 1
    20ee:	91 05       	cpc	r25, r1
    20f0:	c1 f7       	brne	.-16     	; 0x20e2 <si114x_init+0x5a>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    20f2:	60 e2       	ldi	r22, 0x20	; 32
    20f4:	c8 01       	movw	r24, r16
    20f6:	58 d6       	rcall	.+3248   	; 0x2da8 <Si114xReadFromRegister>
    20f8:	6c 01       	movw	r12, r24

	buffer[0]= value;
    20fa:	87 e7       	ldi	r24, 0x77	; 119
    20fc:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    20fe:	81 ea       	ldi	r24, 0xA1	; 161
    2100:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    2102:	9e 01       	movw	r18, r28
    2104:	2f 5f       	subi	r18, 0xFF	; 255
    2106:	3f 4f       	sbci	r19, 0xFF	; 255
    2108:	42 e0       	ldi	r20, 0x02	; 2
    210a:	67 e1       	ldi	r22, 0x17	; 23
    210c:	c8 01       	movw	r24, r16
    210e:	69 d6       	rcall	.+3282   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	59 f4       	brne	.+22     	; 0x212a <si114x_init+0xa2>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    2114:	60 e2       	ldi	r22, 0x20	; 32
    2116:	c8 01       	movw	r24, r16
    2118:	47 d6       	rcall	.+3214   	; 0x2da8 <Si114xReadFromRegister>
    211a:	c8 16       	cp	r12, r24
    211c:	d9 06       	cpc	r13, r25
    211e:	d1 f3       	breq	.-12     	; 0x2114 <si114x_init+0x8c>
    2120:	18 16       	cp	r1, r24
    2122:	19 06       	cpc	r1, r25
    2124:	14 f4       	brge	.+4      	; 0x212a <si114x_init+0xa2>
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	90 e0       	ldi	r25, 0x00	; 0
	// Valid Tasks are: ALS_VIS_TASK, ALS_IR_TASK, PS1_TASK
	//                  PS2_TASK, PS3_TASK and AUX_TASK
	// However, if we are passed a 'negative' task, we will
	// turn on ALS_IR, ALS_VIS and PS1. Otherwise, we will use the
	// task list specified by the caller.
	retval+=Si114xParamSet(si114x_handle, PARAM_CH_LIST, tasklist);
    212a:	e8 0e       	add	r14, r24
    212c:	f9 1e       	adc	r15, r25
	
	// Set IRQ Modes and INT CFG to interrupt on every sample
	retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG, ICG_INTOE);
    212e:	41 e0       	ldi	r20, 0x01	; 1
    2130:	63 e0       	ldi	r22, 0x03	; 3
    2132:	c8 01       	movw	r24, r16
    2134:	1c d6       	rcall	.+3128   	; 0x2d6e <Si114xWriteToRegister>
    2136:	e8 0e       	add	r14, r24
    2138:	f9 1e       	adc	r15, r25
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE,
    213a:	4d e1       	ldi	r20, 0x1D	; 29
    213c:	64 e0       	ldi	r22, 0x04	; 4
    213e:	c8 01       	movw	r24, r16
    2140:	16 d6       	rcall	.+3116   	; 0x2d6e <Si114xWriteToRegister>
    2142:	e8 0e       	add	r14, r24
    2144:	f9 1e       	adc	r15, r25
	IE_ALS_EVRYSAMPLE +
	IE_PS1_EVRYSAMPLE +
	IE_PS2_EVRYSAMPLE +
	IE_PS3_EVRYSAMPLE );

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	65 e0       	ldi	r22, 0x05	; 5
    214a:	c8 01       	movw	r24, r16
    214c:	10 d6       	rcall	.+3104   	; 0x2d6e <Si114xWriteToRegister>
    214e:	e8 0e       	add	r14, r24
    2150:	f9 1e       	adc	r15, r25
	IM1_ALS_EVRYSAMPLE +
	IM1_PS1_EVRYSAMPLE +
	IM1_PS2_EVRYSAMPLE );

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	66 e0       	ldi	r22, 0x06	; 6
    2156:	c8 01       	movw	r24, r16
    2158:	0a d6       	rcall	.+3092   	; 0x2d6e <Si114xWriteToRegister>
    215a:	e8 0e       	add	r14, r24
    215c:	f9 1e       	adc	r15, r25
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <si114x_init+0xdc>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    2160:	97 fd       	sbrc	r25, 7
    2162:	22 c0       	rjmp	.+68     	; 0x21a8 <si114x_init+0x120>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    2164:	60 e3       	ldi	r22, 0x30	; 48
    2166:	c8 01       	movw	r24, r16
    2168:	1f d6       	rcall	.+3134   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    216a:	81 30       	cpi	r24, 0x01	; 1
    216c:	91 05       	cpc	r25, r1
    216e:	c1 f7       	brne	.-16     	; 0x2160 <si114x_init+0xd8>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    2170:	60 e2       	ldi	r22, 0x20	; 32
    2172:	c8 01       	movw	r24, r16
    2174:	19 d6       	rcall	.+3122   	; 0x2da8 <Si114xReadFromRegister>
    2176:	6c 01       	movw	r12, r24

	buffer[0]= value;
    2178:	83 e0       	ldi	r24, 0x03	; 3
    217a:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    217c:	87 ea       	ldi	r24, 0xA7	; 167
    217e:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    2180:	9e 01       	movw	r18, r28
    2182:	2f 5f       	subi	r18, 0xFF	; 255
    2184:	3f 4f       	sbci	r19, 0xFF	; 255
    2186:	42 e0       	ldi	r20, 0x02	; 2
    2188:	67 e1       	ldi	r22, 0x17	; 23
    218a:	c8 01       	movw	r24, r16
    218c:	2a d6       	rcall	.+3156   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    218e:	00 97       	sbiw	r24, 0x00	; 0
    2190:	59 f4       	brne	.+22     	; 0x21a8 <si114x_init+0x120>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    2192:	60 e2       	ldi	r22, 0x20	; 32
    2194:	c8 01       	movw	r24, r16
    2196:	08 d6       	rcall	.+3088   	; 0x2da8 <Si114xReadFromRegister>
    2198:	c8 16       	cp	r12, r24
    219a:	d9 06       	cpc	r13, r25
    219c:	d1 f3       	breq	.-12     	; 0x2192 <si114x_init+0x10a>
    219e:	18 16       	cp	r1, r24
    21a0:	19 06       	cpc	r1, r25
    21a2:	14 f4       	brge	.+4      	; 0x21a8 <si114x_init+0x120>
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
	IM1_PS2_EVRYSAMPLE );

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,
	IM2_PS3_EVRYSAMPLE);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x03*ps1pdsize);
    21a8:	e8 0e       	add	r14, r24
    21aa:	f9 1e       	adc	r15, r25
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <si114x_init+0x12a>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    21ae:	97 fd       	sbrc	r25, 7
    21b0:	22 c0       	rjmp	.+68     	; 0x21f6 <si114x_init+0x16e>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    21b2:	60 e3       	ldi	r22, 0x30	; 48
    21b4:	c8 01       	movw	r24, r16
    21b6:	f8 d5       	rcall	.+3056   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    21b8:	81 30       	cpi	r24, 0x01	; 1
    21ba:	91 05       	cpc	r25, r1
    21bc:	c1 f7       	brne	.-16     	; 0x21ae <si114x_init+0x126>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    21be:	60 e2       	ldi	r22, 0x20	; 32
    21c0:	c8 01       	movw	r24, r16
    21c2:	f2 d5       	rcall	.+3044   	; 0x2da8 <Si114xReadFromRegister>
    21c4:	6c 01       	movw	r12, r24

	buffer[0]= value;
    21c6:	83 e0       	ldi	r24, 0x03	; 3
    21c8:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    21ca:	88 ea       	ldi	r24, 0xA8	; 168
    21cc:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    21ce:	9e 01       	movw	r18, r28
    21d0:	2f 5f       	subi	r18, 0xFF	; 255
    21d2:	3f 4f       	sbci	r19, 0xFF	; 255
    21d4:	42 e0       	ldi	r20, 0x02	; 2
    21d6:	67 e1       	ldi	r22, 0x17	; 23
    21d8:	c8 01       	movw	r24, r16
    21da:	03 d6       	rcall	.+3078   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	59 f4       	brne	.+22     	; 0x21f6 <si114x_init+0x16e>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    21e0:	60 e2       	ldi	r22, 0x20	; 32
    21e2:	c8 01       	movw	r24, r16
    21e4:	e1 d5       	rcall	.+3010   	; 0x2da8 <Si114xReadFromRegister>
    21e6:	c8 16       	cp	r12, r24
    21e8:	d9 06       	cpc	r13, r25
    21ea:	d1 f3       	breq	.-12     	; 0x21e0 <si114x_init+0x158>
    21ec:	18 16       	cp	r1, r24
    21ee:	19 06       	cpc	r1, r25
    21f0:	14 f4       	brge	.+4      	; 0x21f6 <si114x_init+0x16e>
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	90 e0       	ldi	r25, 0x00	; 0

	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,
	IM2_PS3_EVRYSAMPLE);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x03*ps1pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x03*ps2pdsize);
    21f6:	e8 0e       	add	r14, r24
    21f8:	f9 1e       	adc	r15, r25
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <si114x_init+0x178>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    21fc:	97 fd       	sbrc	r25, 7
    21fe:	24 c0       	rjmp	.+72     	; 0x2248 <si114x_init+0x1c0>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    2200:	60 e3       	ldi	r22, 0x30	; 48
    2202:	c8 01       	movw	r24, r16
    2204:	d1 d5       	rcall	.+2978   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    2206:	81 30       	cpi	r24, 0x01	; 1
    2208:	91 05       	cpc	r25, r1
    220a:	c1 f7       	brne	.-16     	; 0x21fc <si114x_init+0x174>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    220c:	60 e2       	ldi	r22, 0x20	; 32
    220e:	c8 01       	movw	r24, r16
    2210:	cb d5       	rcall	.+2966   	; 0x2da8 <Si114xReadFromRegister>
    2212:	6c 01       	movw	r12, r24

	buffer[0]= value;
    2214:	83 e0       	ldi	r24, 0x03	; 3
    2216:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    2218:	89 ea       	ldi	r24, 0xA9	; 169
    221a:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    221c:	9e 01       	movw	r18, r28
    221e:	2f 5f       	subi	r18, 0xFF	; 255
    2220:	3f 4f       	sbci	r19, 0xFF	; 255
    2222:	42 e0       	ldi	r20, 0x02	; 2
    2224:	67 e1       	ldi	r22, 0x17	; 23
    2226:	c8 01       	movw	r24, r16
    2228:	dc d5       	rcall	.+3000   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	69 f4       	brne	.+26     	; 0x2248 <si114x_init+0x1c0>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    222e:	60 e2       	ldi	r22, 0x20	; 32
    2230:	c8 01       	movw	r24, r16
    2232:	ba d5       	rcall	.+2932   	; 0x2da8 <Si114xReadFromRegister>
    2234:	c8 16       	cp	r12, r24
    2236:	d9 06       	cpc	r13, r25
    2238:	d1 f3       	breq	.-12     	; 0x222e <si114x_init+0x1a6>
    223a:	6c 01       	movw	r12, r24
    223c:	18 16       	cp	r1, r24
    223e:	19 06       	cpc	r1, r25
    2240:	24 f4       	brge	.+8      	; 0x224a <si114x_init+0x1c2>
    2242:	c1 2c       	mov	r12, r1
    2244:	d1 2c       	mov	r13, r1
    2246:	01 c0       	rjmp	.+2      	; 0x224a <si114x_init+0x1c2>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    2248:	6c 01       	movw	r12, r24
	retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,
	IM2_PS3_EVRYSAMPLE);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x03*ps1pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x03*ps2pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x03*ps3pdsize);
    224a:	ce 0c       	add	r12, r14
    224c:	df 1c       	adc	r13, r15
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <si114x_init+0x1cc>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    2250:	97 fd       	sbrc	r25, 7
    2252:	22 c0       	rjmp	.+68     	; 0x2298 <si114x_init+0x210>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    2254:	60 e3       	ldi	r22, 0x30	; 48
    2256:	c8 01       	movw	r24, r16
    2258:	a7 d5       	rcall	.+2894   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	91 05       	cpc	r25, r1
    225e:	c1 f7       	brne	.-16     	; 0x2250 <si114x_init+0x1c8>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    2260:	60 e2       	ldi	r22, 0x20	; 32
    2262:	c8 01       	movw	r24, r16
    2264:	a1 d5       	rcall	.+2882   	; 0x2da8 <Si114xReadFromRegister>
    2266:	7c 01       	movw	r14, r24

	buffer[0]= value;
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    226c:	8e ea       	ldi	r24, 0xAE	; 174
    226e:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    2270:	9e 01       	movw	r18, r28
    2272:	2f 5f       	subi	r18, 0xFF	; 255
    2274:	3f 4f       	sbci	r19, 0xFF	; 255
    2276:	42 e0       	ldi	r20, 0x02	; 2
    2278:	67 e1       	ldi	r22, 0x17	; 23
    227a:	c8 01       	movw	r24, r16
    227c:	b2 d5       	rcall	.+2916   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	59 f4       	brne	.+22     	; 0x2298 <si114x_init+0x210>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    2282:	60 e2       	ldi	r22, 0x20	; 32
    2284:	c8 01       	movw	r24, r16
    2286:	90 d5       	rcall	.+2848   	; 0x2da8 <Si114xReadFromRegister>
    2288:	e8 16       	cp	r14, r24
    228a:	f9 06       	cpc	r15, r25
    228c:	d1 f3       	breq	.-12     	; 0x2282 <si114x_init+0x1fa>
    228e:	18 16       	cp	r1, r24
    2290:	19 06       	cpc	r1, r25
    2292:	14 f4       	brge	.+4      	; 0x2298 <si114x_init+0x210>
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	90 e0       	ldi	r25, 0x00	; 0
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS1_ADC_MUX, 0x03*ps1pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x03*ps2pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x03*ps3pdsize);

	retval+=Si114xParamSet(si114x_handle, PARAM_IR_ADC_MUX,  0x03*irpd);
    2298:	c8 0e       	add	r12, r24
    229a:	d9 1e       	adc	r13, r25
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <si114x_init+0x21a>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    229e:	97 fd       	sbrc	r25, 7
    22a0:	21 c0       	rjmp	.+66     	; 0x22e4 <si114x_init+0x25c>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    22a2:	60 e3       	ldi	r22, 0x30	; 48
    22a4:	c8 01       	movw	r24, r16
    22a6:	80 d5       	rcall	.+2816   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    22a8:	81 30       	cpi	r24, 0x01	; 1
    22aa:	91 05       	cpc	r25, r1
    22ac:	c1 f7       	brne	.-16     	; 0x229e <si114x_init+0x216>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    22ae:	60 e2       	ldi	r22, 0x20	; 32
    22b0:	c8 01       	movw	r24, r16
    22b2:	7a d5       	rcall	.+2804   	; 0x2da8 <Si114xReadFromRegister>
    22b4:	7c 01       	movw	r14, r24

	buffer[0]= value;
    22b6:	19 82       	std	Y+1, r1	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    22b8:	8b ea       	ldi	r24, 0xAB	; 171
    22ba:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    22bc:	9e 01       	movw	r18, r28
    22be:	2f 5f       	subi	r18, 0xFF	; 255
    22c0:	3f 4f       	sbci	r19, 0xFF	; 255
    22c2:	42 e0       	ldi	r20, 0x02	; 2
    22c4:	67 e1       	ldi	r22, 0x17	; 23
    22c6:	c8 01       	movw	r24, r16
    22c8:	8c d5       	rcall	.+2840   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	59 f4       	brne	.+22     	; 0x22e4 <si114x_init+0x25c>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    22ce:	60 e2       	ldi	r22, 0x20	; 32
    22d0:	c8 01       	movw	r24, r16
    22d2:	6a d5       	rcall	.+2772   	; 0x2da8 <Si114xReadFromRegister>
    22d4:	e8 16       	cp	r14, r24
    22d6:	f9 06       	cpc	r15, r25
    22d8:	d1 f3       	breq	.-12     	; 0x22ce <si114x_init+0x246>
    22da:	18 16       	cp	r1, r24
    22dc:	19 06       	cpc	r1, r25
    22de:	14 f4       	brge	.+4      	; 0x22e4 <si114x_init+0x25c>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PS2_ADC_MUX, 0x03*ps2pdsize);
	retval+=Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x03*ps3pdsize);

	retval+=Si114xParamSet(si114x_handle, PARAM_IR_ADC_MUX,  0x03*irpd);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
    22e4:	c8 0e       	add	r12, r24
    22e6:	d9 1e       	adc	r13, r25
    22e8:	02 c0       	rjmp	.+4      	; 0x22ee <si114x_init+0x266>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    22ea:	97 fd       	sbrc	r25, 7
    22ec:	21 c0       	rjmp	.+66     	; 0x2330 <si114x_init+0x2a8>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    22ee:	60 e3       	ldi	r22, 0x30	; 48
    22f0:	c8 01       	movw	r24, r16
    22f2:	5a d5       	rcall	.+2740   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	91 05       	cpc	r25, r1
    22f8:	c1 f7       	brne	.-16     	; 0x22ea <si114x_init+0x262>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    22fa:	60 e2       	ldi	r22, 0x20	; 32
    22fc:	c8 01       	movw	r24, r16
    22fe:	54 d5       	rcall	.+2728   	; 0x2da8 <Si114xReadFromRegister>
    2300:	7c 01       	movw	r14, r24

	buffer[0]= value;
    2302:	19 82       	std	Y+1, r1	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    2304:	8e eb       	ldi	r24, 0xBE	; 190
    2306:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    2308:	9e 01       	movw	r18, r28
    230a:	2f 5f       	subi	r18, 0xFF	; 255
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
    230e:	42 e0       	ldi	r20, 0x02	; 2
    2310:	67 e1       	ldi	r22, 0x17	; 23
    2312:	c8 01       	movw	r24, r16
    2314:	66 d5       	rcall	.+2764   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	59 f4       	brne	.+22     	; 0x2330 <si114x_init+0x2a8>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    231a:	60 e2       	ldi	r22, 0x20	; 32
    231c:	c8 01       	movw	r24, r16
    231e:	44 d5       	rcall	.+2696   	; 0x2da8 <Si114xReadFromRegister>
    2320:	e8 16       	cp	r14, r24
    2322:	f9 06       	cpc	r15, r25
    2324:	d1 f3       	breq	.-12     	; 0x231a <si114x_init+0x292>
    2326:	18 16       	cp	r1, r24
    2328:	19 06       	cpc	r1, r25
    232a:	14 f4       	brge	.+4      	; 0x2330 <si114x_init+0x2a8>
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PS3_ADC_MUX, 0x03*ps3pdsize);

	retval+=Si114xParamSet(si114x_handle, PARAM_IR_ADC_MUX,  0x03*irpd);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_GAIN, irgain);
    2330:	c8 0e       	add	r12, r24
    2332:	d9 1e       	adc	r13, r25
    2334:	02 c0       	rjmp	.+4      	; 0x233a <si114x_init+0x2b2>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    2336:	97 fd       	sbrc	r25, 7
    2338:	21 c0       	rjmp	.+66     	; 0x237c <si114x_init+0x2f4>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    233a:	60 e3       	ldi	r22, 0x30	; 48
    233c:	c8 01       	movw	r24, r16
    233e:	34 d5       	rcall	.+2664   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    2340:	81 30       	cpi	r24, 0x01	; 1
    2342:	91 05       	cpc	r25, r1
    2344:	c1 f7       	brne	.-16     	; 0x2336 <si114x_init+0x2ae>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    2346:	60 e2       	ldi	r22, 0x20	; 32
    2348:	c8 01       	movw	r24, r16
    234a:	2e d5       	rcall	.+2652   	; 0x2da8 <Si114xReadFromRegister>
    234c:	7c 01       	movw	r14, r24

	buffer[0]= value;
    234e:	19 82       	std	Y+1, r1	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    2350:	81 eb       	ldi	r24, 0xB1	; 177
    2352:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    2354:	9e 01       	movw	r18, r28
    2356:	2f 5f       	subi	r18, 0xFF	; 255
    2358:	3f 4f       	sbci	r19, 0xFF	; 255
    235a:	42 e0       	ldi	r20, 0x02	; 2
    235c:	67 e1       	ldi	r22, 0x17	; 23
    235e:	c8 01       	movw	r24, r16
    2360:	40 d5       	rcall	.+2688   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	59 f4       	brne	.+22     	; 0x237c <si114x_init+0x2f4>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    2366:	60 e2       	ldi	r22, 0x20	; 32
    2368:	c8 01       	movw	r24, r16
    236a:	1e d5       	rcall	.+2620   	; 0x2da8 <Si114xReadFromRegister>
    236c:	e8 16       	cp	r14, r24
    236e:	f9 06       	cpc	r15, r25
    2370:	d1 f3       	breq	.-12     	; 0x2366 <si114x_init+0x2de>
    2372:	18 16       	cp	r1, r24
    2374:	19 06       	cpc	r1, r25
    2376:	14 f4       	brge	.+4      	; 0x237c <si114x_init+0x2f4>
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0

	retval+=Si114xParamSet(si114x_handle, PARAM_IR_ADC_MUX,  0x03*irpd);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_GAIN, irgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_GAIN, visgain);
    237c:	c8 0e       	add	r12, r24
    237e:	d9 1e       	adc	r13, r25
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <si114x_init+0x2fe>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    2382:	97 fd       	sbrc	r25, 7
    2384:	22 c0       	rjmp	.+68     	; 0x23ca <si114x_init+0x342>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    2386:	60 e3       	ldi	r22, 0x30	; 48
    2388:	c8 01       	movw	r24, r16
    238a:	0e d5       	rcall	.+2588   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    238c:	81 30       	cpi	r24, 0x01	; 1
    238e:	91 05       	cpc	r25, r1
    2390:	c1 f7       	brne	.-16     	; 0x2382 <si114x_init+0x2fa>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    2392:	60 e2       	ldi	r22, 0x20	; 32
    2394:	c8 01       	movw	r24, r16
    2396:	08 d5       	rcall	.+2576   	; 0x2da8 <Si114xReadFromRegister>
    2398:	7c 01       	movw	r14, r24

	buffer[0]= value;
    239a:	81 e2       	ldi	r24, 0x21	; 33
    239c:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    239e:	82 ea       	ldi	r24, 0xA2	; 162
    23a0:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    23a2:	9e 01       	movw	r18, r28
    23a4:	2f 5f       	subi	r18, 0xFF	; 255
    23a6:	3f 4f       	sbci	r19, 0xFF	; 255
    23a8:	42 e0       	ldi	r20, 0x02	; 2
    23aa:	67 e1       	ldi	r22, 0x17	; 23
    23ac:	c8 01       	movw	r24, r16
    23ae:	19 d5       	rcall	.+2610   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	59 f4       	brne	.+22     	; 0x23ca <si114x_init+0x342>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    23b4:	60 e2       	ldi	r22, 0x20	; 32
    23b6:	c8 01       	movw	r24, r16
    23b8:	f7 d4       	rcall	.+2542   	; 0x2da8 <Si114xReadFromRegister>
    23ba:	e8 16       	cp	r14, r24
    23bc:	f9 06       	cpc	r15, r25
    23be:	d1 f3       	breq	.-12     	; 0x23b4 <si114x_init+0x32c>
    23c0:	18 16       	cp	r1, r24
    23c2:	19 06       	cpc	r1, r25
    23c4:	14 f4       	brge	.+4      	; 0x23ca <si114x_init+0x342>
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	90 e0       	ldi	r25, 0x00	; 0

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_GAIN, irgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_GAIN, visgain);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
    23ca:	c8 0e       	add	r12, r24
    23cc:	d9 1e       	adc	r13, r25
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <si114x_init+0x34c>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    23d0:	97 fd       	sbrc	r25, 7
    23d2:	22 c0       	rjmp	.+68     	; 0x2418 <si114x_init+0x390>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    23d4:	60 e3       	ldi	r22, 0x30	; 48
    23d6:	c8 01       	movw	r24, r16
    23d8:	e7 d4       	rcall	.+2510   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    23da:	81 30       	cpi	r24, 0x01	; 1
    23dc:	91 05       	cpc	r25, r1
    23de:	c1 f7       	brne	.-16     	; 0x23d0 <si114x_init+0x348>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    23e0:	60 e2       	ldi	r22, 0x20	; 32
    23e2:	c8 01       	movw	r24, r16
    23e4:	e1 d4       	rcall	.+2498   	; 0x2da8 <Si114xReadFromRegister>
    23e6:	7c 01       	movw	r14, r24

	buffer[0]= value;
    23e8:	84 e0       	ldi	r24, 0x04	; 4
    23ea:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    23ec:	83 ea       	ldi	r24, 0xA3	; 163
    23ee:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    23f0:	9e 01       	movw	r18, r28
    23f2:	2f 5f       	subi	r18, 0xFF	; 255
    23f4:	3f 4f       	sbci	r19, 0xFF	; 255
    23f6:	42 e0       	ldi	r20, 0x02	; 2
    23f8:	67 e1       	ldi	r22, 0x17	; 23
    23fa:	c8 01       	movw	r24, r16
    23fc:	f2 d4       	rcall	.+2532   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	59 f4       	brne	.+22     	; 0x2418 <si114x_init+0x390>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    2402:	60 e2       	ldi	r22, 0x20	; 32
    2404:	c8 01       	movw	r24, r16
    2406:	d0 d4       	rcall	.+2464   	; 0x2da8 <Si114xReadFromRegister>
    2408:	e8 16       	cp	r14, r24
    240a:	f9 06       	cpc	r15, r25
    240c:	d1 f3       	breq	.-12     	; 0x2402 <si114x_init+0x37a>
    240e:	18 16       	cp	r1, r24
    2410:	19 06       	cpc	r1, r25
    2412:	14 f4       	brge	.+4      	; 0x2418 <si114x_init+0x390>
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_GAIN, psgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_GAIN, irgain);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_GAIN, visgain);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED3_SELECT,  ps3ledsel);
    2418:	c8 0e       	add	r12, r24
    241a:	d9 1e       	adc	r13, r25
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <si114x_init+0x39a>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    241e:	97 fd       	sbrc	r25, 7
    2420:	22 c0       	rjmp	.+68     	; 0x2466 <si114x_init+0x3de>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    2422:	60 e3       	ldi	r22, 0x30	; 48
    2424:	c8 01       	movw	r24, r16
    2426:	c0 d4       	rcall	.+2432   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    2428:	81 30       	cpi	r24, 0x01	; 1
    242a:	91 05       	cpc	r25, r1
    242c:	c1 f7       	brne	.-16     	; 0x241e <si114x_init+0x396>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    242e:	60 e2       	ldi	r22, 0x20	; 32
    2430:	c8 01       	movw	r24, r16
    2432:	ba d4       	rcall	.+2420   	; 0x2da8 <Si114xReadFromRegister>
    2434:	7c 01       	movw	r14, r24

	buffer[0]= value;
    2436:	80 e7       	ldi	r24, 0x70	; 112
    2438:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    243a:	8a ea       	ldi	r24, 0xAA	; 170
    243c:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    243e:	9e 01       	movw	r18, r28
    2440:	2f 5f       	subi	r18, 0xFF	; 255
    2442:	3f 4f       	sbci	r19, 0xFF	; 255
    2444:	42 e0       	ldi	r20, 0x02	; 2
    2446:	67 e1       	ldi	r22, 0x17	; 23
    2448:	c8 01       	movw	r24, r16
    244a:	cb d4       	rcall	.+2454   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	59 f4       	brne	.+22     	; 0x2466 <si114x_init+0x3de>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    2450:	60 e2       	ldi	r22, 0x20	; 32
    2452:	c8 01       	movw	r24, r16
    2454:	a9 d4       	rcall	.+2386   	; 0x2da8 <Si114xReadFromRegister>
    2456:	e8 16       	cp	r14, r24
    2458:	f9 06       	cpc	r15, r25
    245a:	d1 f3       	breq	.-12     	; 0x2450 <si114x_init+0x3c8>
    245c:	18 16       	cp	r1, r24
    245e:	19 06       	cpc	r1, r25
    2460:	14 f4       	brge	.+4      	; 0x2466 <si114x_init+0x3de>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_GAIN, visgain);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED3_SELECT,  ps3ledsel);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
    2466:	c8 0e       	add	r12, r24
    2468:	d9 1e       	adc	r13, r25
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <si114x_init+0x3e8>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    246c:	97 fd       	sbrc	r25, 7
    246e:	22 c0       	rjmp	.+68     	; 0x24b4 <si114x_init+0x42c>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    2470:	60 e3       	ldi	r22, 0x30	; 48
    2472:	c8 01       	movw	r24, r16
    2474:	99 d4       	rcall	.+2354   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	91 05       	cpc	r25, r1
    247a:	c1 f7       	brne	.-16     	; 0x246c <si114x_init+0x3e4>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    247c:	60 e2       	ldi	r22, 0x20	; 32
    247e:	c8 01       	movw	r24, r16
    2480:	93 d4       	rcall	.+2342   	; 0x2da8 <Si114xReadFromRegister>
    2482:	7c 01       	movw	r14, r24

	buffer[0]= value;
    2484:	80 e7       	ldi	r24, 0x70	; 112
    2486:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    2488:	8d eb       	ldi	r24, 0xBD	; 189
    248a:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    248c:	9e 01       	movw	r18, r28
    248e:	2f 5f       	subi	r18, 0xFF	; 255
    2490:	3f 4f       	sbci	r19, 0xFF	; 255
    2492:	42 e0       	ldi	r20, 0x02	; 2
    2494:	67 e1       	ldi	r22, 0x17	; 23
    2496:	c8 01       	movw	r24, r16
    2498:	a4 d4       	rcall	.+2376   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	59 f4       	brne	.+22     	; 0x24b4 <si114x_init+0x42c>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    249e:	60 e2       	ldi	r22, 0x20	; 32
    24a0:	c8 01       	movw	r24, r16
    24a2:	82 d4       	rcall	.+2308   	; 0x2da8 <Si114xReadFromRegister>
    24a4:	e8 16       	cp	r14, r24
    24a6:	f9 06       	cpc	r15, r25
    24a8:	d1 f3       	breq	.-12     	; 0x249e <si114x_init+0x416>
    24aa:	18 16       	cp	r1, r24
    24ac:	19 06       	cpc	r1, r25
    24ae:	14 f4       	brge	.+4      	; 0x24b4 <si114x_init+0x42c>
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED3_SELECT,  ps3ledsel);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
    24b4:	c8 0e       	add	r12, r24
    24b6:	d9 1e       	adc	r13, r25
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <si114x_init+0x436>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    24ba:	97 fd       	sbrc	r25, 7
    24bc:	22 c0       	rjmp	.+68     	; 0x2502 <si114x_init+0x47a>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    24be:	60 e3       	ldi	r22, 0x30	; 48
    24c0:	c8 01       	movw	r24, r16
    24c2:	72 d4       	rcall	.+2276   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    24c4:	81 30       	cpi	r24, 0x01	; 1
    24c6:	91 05       	cpc	r25, r1
    24c8:	c1 f7       	brne	.-16     	; 0x24ba <si114x_init+0x432>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    24ca:	60 e2       	ldi	r22, 0x20	; 32
    24cc:	c8 01       	movw	r24, r16
    24ce:	6c d4       	rcall	.+2264   	; 0x2da8 <Si114xReadFromRegister>
    24d0:	7c 01       	movw	r14, r24

	buffer[0]= value;
    24d2:	80 e7       	ldi	r24, 0x70	; 112
    24d4:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    24d6:	80 eb       	ldi	r24, 0xB0	; 176
    24d8:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    24da:	9e 01       	movw	r18, r28
    24dc:	2f 5f       	subi	r18, 0xFF	; 255
    24de:	3f 4f       	sbci	r19, 0xFF	; 255
    24e0:	42 e0       	ldi	r20, 0x02	; 2
    24e2:	67 e1       	ldi	r22, 0x17	; 23
    24e4:	c8 01       	movw	r24, r16
    24e6:	7d d4       	rcall	.+2298   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	59 f4       	brne	.+22     	; 0x2502 <si114x_init+0x47a>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    24ec:	60 e2       	ldi	r22, 0x20	; 32
    24ee:	c8 01       	movw	r24, r16
    24f0:	5b d4       	rcall	.+2230   	; 0x2da8 <Si114xReadFromRegister>
    24f2:	e8 16       	cp	r14, r24
    24f4:	f9 06       	cpc	r15, r25
    24f6:	d1 f3       	breq	.-12     	; 0x24ec <si114x_init+0x464>
    24f8:	18 16       	cp	r1, r24
    24fa:	19 06       	cpc	r1, r25
    24fc:	14 f4       	brge	.+4      	; 0x2502 <si114x_init+0x47a>
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED12_SELECT, (ps2ledsel<<4)+ps1ledsel);
	retval+=Si114xParamSet(si114x_handle, PARAM_PSLED3_SELECT,  ps3ledsel);
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_COUNTER, RECCNT_511);
    2502:	c8 0e       	add	r12, r24
    2504:	d9 1e       	adc	r13, r25
    2506:	02 c0       	rjmp	.+4      	; 0x250c <si114x_init+0x484>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    2508:	97 fd       	sbrc	r25, 7
    250a:	22 c0       	rjmp	.+68     	; 0x2550 <si114x_init+0x4c8>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    250c:	60 e3       	ldi	r22, 0x30	; 48
    250e:	c8 01       	movw	r24, r16
    2510:	4b d4       	rcall	.+2198   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    2512:	81 30       	cpi	r24, 0x01	; 1
    2514:	91 05       	cpc	r25, r1
    2516:	c1 f7       	brne	.-16     	; 0x2508 <si114x_init+0x480>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    2518:	60 e2       	ldi	r22, 0x20	; 32
    251a:	c8 01       	movw	r24, r16
    251c:	45 d4       	rcall	.+2186   	; 0x2da8 <Si114xReadFromRegister>
    251e:	7c 01       	movw	r14, r24

	buffer[0]= value;
    2520:	84 e0       	ldi	r24, 0x04	; 4
    2522:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    2524:	8c ea       	ldi	r24, 0xAC	; 172
    2526:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    2528:	9e 01       	movw	r18, r28
    252a:	2f 5f       	subi	r18, 0xFF	; 255
    252c:	3f 4f       	sbci	r19, 0xFF	; 255
    252e:	42 e0       	ldi	r20, 0x02	; 2
    2530:	67 e1       	ldi	r22, 0x17	; 23
    2532:	c8 01       	movw	r24, r16
    2534:	56 d4       	rcall	.+2220   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	59 f4       	brne	.+22     	; 0x2550 <si114x_init+0x4c8>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    253a:	60 e2       	ldi	r22, 0x20	; 32
    253c:	c8 01       	movw	r24, r16
    253e:	34 d4       	rcall	.+2152   	; 0x2da8 <Si114xReadFromRegister>
    2540:	e8 16       	cp	r14, r24
    2542:	f9 06       	cpc	r15, r25
    2544:	d1 f3       	breq	.-12     	; 0x253a <si114x_init+0x4b2>
    2546:	18 16       	cp	r1, r24
    2548:	19 06       	cpc	r1, r25
    254a:	14 f4       	brge	.+4      	; 0x2550 <si114x_init+0x4c8>
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
	
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_COUNTER, RECCNT_511);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC,     RANGE_EN*psrange + PS_MEAS_MODE);
    2550:	c8 0e       	add	r12, r24
    2552:	d9 1e       	adc	r13, r25
    2554:	02 c0       	rjmp	.+4      	; 0x255a <si114x_init+0x4d2>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    2556:	97 fd       	sbrc	r25, 7
    2558:	22 c0       	rjmp	.+68     	; 0x259e <si114x_init+0x516>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    255a:	60 e3       	ldi	r22, 0x30	; 48
    255c:	c8 01       	movw	r24, r16
    255e:	24 d4       	rcall	.+2120   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    2560:	81 30       	cpi	r24, 0x01	; 1
    2562:	91 05       	cpc	r25, r1
    2564:	c1 f7       	brne	.-16     	; 0x2556 <si114x_init+0x4ce>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    2566:	60 e2       	ldi	r22, 0x20	; 32
    2568:	c8 01       	movw	r24, r16
    256a:	1e d4       	rcall	.+2108   	; 0x2da8 <Si114xReadFromRegister>
    256c:	7c 01       	movw	r14, r24

	buffer[0]= value;
    256e:	80 e2       	ldi	r24, 0x20	; 32
    2570:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    2572:	8f eb       	ldi	r24, 0xBF	; 191
    2574:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    2576:	9e 01       	movw	r18, r28
    2578:	2f 5f       	subi	r18, 0xFF	; 255
    257a:	3f 4f       	sbci	r19, 0xFF	; 255
    257c:	42 e0       	ldi	r20, 0x02	; 2
    257e:	67 e1       	ldi	r22, 0x17	; 23
    2580:	c8 01       	movw	r24, r16
    2582:	2f d4       	rcall	.+2142   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	59 f4       	brne	.+22     	; 0x259e <si114x_init+0x516>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    2588:	60 e2       	ldi	r22, 0x20	; 32
    258a:	c8 01       	movw	r24, r16
    258c:	0d d4       	rcall	.+2074   	; 0x2da8 <Si114xReadFromRegister>
    258e:	e8 16       	cp	r14, r24
    2590:	f9 06       	cpc	r15, r25
    2592:	d1 f3       	breq	.-12     	; 0x2588 <si114x_init+0x500>
    2594:	18 16       	cp	r1, r24
    2596:	19 06       	cpc	r1, r25
    2598:	14 f4       	brge	.+4      	; 0x259e <si114x_init+0x516>
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_COUNTER,    RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_COUNTER, RECCNT_511);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC,     RANGE_EN*psrange + PS_MEAS_MODE);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN*irrange );
    259e:	c8 0e       	add	r12, r24
    25a0:	d9 1e       	adc	r13, r25
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <si114x_init+0x520>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    25a4:	97 fd       	sbrc	r25, 7
    25a6:	22 c0       	rjmp	.+68     	; 0x25ec <si114x_init+0x564>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    25a8:	60 e3       	ldi	r22, 0x30	; 48
    25aa:	c8 01       	movw	r24, r16
    25ac:	fd d3       	rcall	.+2042   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    25ae:	81 30       	cpi	r24, 0x01	; 1
    25b0:	91 05       	cpc	r25, r1
    25b2:	c1 f7       	brne	.-16     	; 0x25a4 <si114x_init+0x51c>
	u8      buffer[2];
	s16     response;

	if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

	response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    25b4:	60 e2       	ldi	r22, 0x20	; 32
    25b6:	c8 01       	movw	r24, r16
    25b8:	f7 d3       	rcall	.+2030   	; 0x2da8 <Si114xReadFromRegister>
    25ba:	7c 01       	movw	r14, r24

	buffer[0]= value;
    25bc:	80 e2       	ldi	r24, 0x20	; 32
    25be:	89 83       	std	Y+1, r24	; 0x01
	buffer[1]= 0xA0 + (address & 0x1F);
    25c0:	82 eb       	ldi	r24, 0xB2	; 178
    25c2:	8a 83       	std	Y+2, r24	; 0x02

	retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
    25c4:	9e 01       	movw	r18, r28
    25c6:	2f 5f       	subi	r18, 0xFF	; 255
    25c8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ca:	42 e0       	ldi	r20, 0x02	; 2
    25cc:	67 e1       	ldi	r22, 0x17	; 23
    25ce:	c8 01       	movw	r24, r16
    25d0:	08 d4       	rcall	.+2064   	; 0x2de2 <Si114xBlockWrite>
	if (retval != 0) return retval;
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	59 f4       	brne	.+22     	; 0x25ec <si114x_init+0x564>

	// Wait for command to finish
	while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ;
    25d6:	60 e2       	ldi	r22, 0x20	; 32
    25d8:	c8 01       	movw	r24, r16
    25da:	e6 d3       	rcall	.+1996   	; 0x2da8 <Si114xReadFromRegister>
    25dc:	e8 16       	cp	r14, r24
    25de:	f9 06       	cpc	r15, r25
    25e0:	d1 f3       	breq	.-12     	; 0x25d6 <si114x_init+0x54e>
    25e2:	18 16       	cp	r1, r24
    25e4:	19 06       	cpc	r1, r25
    25e6:	14 f4       	brge	.+4      	; 0x25ec <si114x_init+0x564>
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	90 e0       	ldi	r25, 0x00	; 0
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_COUNTER, RECCNT_511);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_COUNTER, RECCNT_511);

	retval+=Si114xParamSet(si114x_handle, PARAM_PS_ADC_MISC,     RANGE_EN*psrange + PS_MEAS_MODE);
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSIR_ADC_MISC, RANGE_EN*irrange );
	retval+=Si114xParamSet(si114x_handle, PARAM_ALSVIS_ADC_MISC,RANGE_EN*visrange);
    25ec:	c8 0e       	add	r12, r24
    25ee:	d9 1e       	adc	r13, r25
		//    0xa0 = Device Wakes up every ~30 ms
		//    0x94 = Device Wakes up every ~20 ms
		//    0x84 = Device Wakes up every ~10 ms
		//    0xB9 = Device Wakes up every ~100 ms
		//    0xFF = Device Wakes up every ~2 sec
		retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE, measrate);
    25f0:	44 e9       	ldi	r20, 0x94	; 148
    25f2:	68 e0       	ldi	r22, 0x08	; 8
    25f4:	c8 01       	movw	r24, r16
    25f6:	bb d3       	rcall	.+1910   	; 0x2d6e <Si114xWriteToRegister>
    25f8:	c8 0e       	add	r12, r24
    25fa:	d9 1e       	adc	r13, r25

		// if 0x08, PS1, PS2 and PS3 made every time device wakes up.
		retval+=Si114xWriteToRegister(si114x_handle, REG_PS_RATE,   psrate);
    25fc:	48 e0       	ldi	r20, 0x08	; 8
    25fe:	6a e0       	ldi	r22, 0x0A	; 10
    2600:	c8 01       	movw	r24, r16
    2602:	b5 d3       	rcall	.+1898   	; 0x2d6e <Si114xWriteToRegister>
    2604:	c8 0e       	add	r12, r24
    2606:	d9 1e       	adc	r13, r25

		// if 0x08, VIS, IR, AUX Measurements every time device wakes up.
		retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE,  alsrate);
    2608:	48 e0       	ldi	r20, 0x08	; 8
    260a:	69 e0       	ldi	r22, 0x09	; 9
    260c:	c8 01       	movw	r24, r16
    260e:	af d3       	rcall	.+1886   	; 0x2d6e <Si114xWriteToRegister>
    2610:	c8 0e       	add	r12, r24
    2612:	d9 1e       	adc	r13, r25

	s16  response;
	s16  retval;

	// Get the response register contents
	if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
    2614:	60 e2       	ldi	r22, 0x20	; 32
    2616:	c8 01       	movw	r24, r16
    2618:	c7 d3       	rcall	.+1934   	; 0x2da8 <Si114xReadFromRegister>
    261a:	7c 01       	movw	r14, r24
    261c:	97 fd       	sbrc	r25, 7
    261e:	2e c0       	rjmp	.+92     	; 0x267c <si114x_init+0x5f4>
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <si114x_init+0x59e>
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
		if (retval == 1) break;
		if (retval <  0) return retval;
    2622:	97 fd       	sbrc	r25, 7
    2624:	16 c0       	rjmp	.+44     	; 0x2652 <si114x_init+0x5ca>
	s16 retval;
	// This loops until the Si114x is known to be in its sleep state
	// or if an i2c error occurs
	while (1)
	{
		retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
    2626:	60 e3       	ldi	r22, 0x30	; 48
    2628:	c8 01       	movw	r24, r16
    262a:	be d3       	rcall	.+1916   	; 0x2da8 <Si114xReadFromRegister>
		if (retval == 1) break;
    262c:	81 30       	cpi	r24, 0x01	; 1
    262e:	91 05       	cpc	r25, r1
    2630:	c1 f7       	brne	.-16     	; 0x2622 <si114x_init+0x59a>
	{
		if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

		if(command==0) break; // Skip if the command is NOP

		retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    2632:	60 e2       	ldi	r22, 0x20	; 32
    2634:	c8 01       	movw	r24, r16
    2636:	b8 d3       	rcall	.+1904   	; 0x2da8 <Si114xReadFromRegister>
		if(retval==response) break;
    2638:	8e 15       	cp	r24, r14
    263a:	9f 05       	cpc	r25, r15
    263c:	21 f0       	breq	.+8      	; 0x2646 <si114x_init+0x5be>
		else if(retval<0) return retval;
    263e:	97 fd       	sbrc	r25, 7
    2640:	08 c0       	rjmp	.+16     	; 0x2652 <si114x_init+0x5ca>
    2642:	7c 01       	movw	r14, r24
    2644:	f0 cf       	rjmp	.-32     	; 0x2626 <si114x_init+0x59e>
		else response = retval;
	}

	// Send the Command
	if ((retval=Si114xWriteToRegister(si114x_handle, REG_COMMAND, command)) !=0)
    2646:	4f e0       	ldi	r20, 0x0F	; 15
    2648:	68 e1       	ldi	r22, 0x18	; 24
    264a:	c8 01       	movw	r24, r16
    264c:	90 d3       	rcall	.+1824   	; 0x2d6e <Si114xWriteToRegister>
    264e:	00 97       	sbiw	r24, 0x00	; 0
    2650:	b9 f0       	breq	.+46     	; 0x2680 <si114x_init+0x5f8>
    2652:	9c 01       	movw	r18, r24

		// if 0x08, VIS, IR, AUX Measurements every time device wakes up.
		retval+=Si114xWriteToRegister(si114x_handle, REG_ALS_RATE,  alsrate);

		// Enable Autonomous Operation
		retval+=Si114xPsAlsAuto(si114x_handle);
    2654:	c6 01       	movw	r24, r12
    2656:	82 0f       	add	r24, r18
    2658:	93 1f       	adc	r25, r19
		// If nothing went wrong after all of this time, the value
		// returned will be 0. Otherwise, it will be some negative
		// number
	}
	return retval;
}
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	ff 90       	pop	r15
    2668:	ef 90       	pop	r14
    266a:	df 90       	pop	r13
    266c:	cf 90       	pop	r12
    266e:	08 95       	ret
	while(1)
	{

		if(command==0) break; // Skip if the command is NOP

		retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    2670:	60 e2       	ldi	r22, 0x20	; 32
    2672:	c8 01       	movw	r24, r16
    2674:	99 d3       	rcall	.+1842   	; 0x2da8 <Si114xReadFromRegister>
		if (retval != response) break;
    2676:	e8 16       	cp	r14, r24
    2678:	f9 06       	cpc	r15, r25
    267a:	51 f4       	brne	.+20     	; 0x2690 <si114x_init+0x608>
    267c:	97 01       	movw	r18, r14
    267e:	ea cf       	rjmp	.-44     	; 0x2654 <si114x_init+0x5cc>
    2680:	f7 fc       	sbrc	r15, 7
    2682:	f6 cf       	rjmp	.-20     	; 0x2670 <si114x_init+0x5e8>
	while(1)
	{

		if(command==0) break; // Skip if the command is NOP

		retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
    2684:	60 e2       	ldi	r22, 0x20	; 32
    2686:	c8 01       	movw	r24, r16
    2688:	8f d3       	rcall	.+1822   	; 0x2da8 <Si114xReadFromRegister>
		if (retval != response) break;
    268a:	e8 16       	cp	r14, r24
    268c:	f9 06       	cpc	r15, r25
    268e:	d1 f3       	breq	.-12     	; 0x2684 <si114x_init+0x5fc>
		else if(retval<0) return retval;
	}
	return 0;
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	df cf       	rjmp	.-66     	; 0x2654 <si114x_init+0x5cc>

00002696 <si114x_setup>:
#include "../sercom.h"
#include <avr/io.h>

void si114x_setup(void)
{
	si114x_reset(SI114X_ADDR);
    2696:	8a e5       	ldi	r24, 0x5A	; 90
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	b3 dc       	rcall	.-1690   	; 0x2002 <si114x_reset>
	si114x_init(SI114X_ADDR);
    269c:	8a e5       	ldi	r24, 0x5A	; 90
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	f3 cc       	rjmp	.-1562   	; 0x2088 <si114x_init>

000026a2 <si114x_process_samples>:
u16 code scale           =  1;
u8  code ircorrection[3] =  { 17, 35, 29 };
#endif

void si114x_process_samples(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples)
{
    26a2:	2f 92       	push	r2
    26a4:	3f 92       	push	r3
    26a6:	4f 92       	push	r4
    26a8:	5f 92       	push	r5
    26aa:	6f 92       	push	r6
    26ac:	7f 92       	push	r7
    26ae:	8f 92       	push	r8
    26b0:	9f 92       	push	r9
    26b2:	af 92       	push	r10
    26b4:	bf 92       	push	r11
    26b6:	cf 92       	push	r12
    26b8:	df 92       	push	r13
    26ba:	ef 92       	push	r14
    26bc:	ff 92       	push	r15
    26be:	0f 93       	push	r16
    26c0:	1f 93       	push	r17
    26c2:	cf 93       	push	r28
    26c4:	df 93       	push	r29
    26c6:	8c 01       	movw	r16, r24
    26c8:	eb 01       	movw	r28, r22
    if ((maxLeakage[0]==0)&&(maxLeakage[1]==0)&&(maxLeakage[2]==0)&&(initial_baseline_counter==128))
    26ca:	80 91 a9 25 	lds	r24, 0x25A9
    26ce:	90 91 aa 25 	lds	r25, 0x25AA
    26d2:	89 2b       	or	r24, r25
    26d4:	39 f4       	brne	.+14     	; 0x26e4 <si114x_process_samples+0x42>
    26d6:	80 91 ab 25 	lds	r24, 0x25AB
    26da:	90 91 ac 25 	lds	r25, 0x25AC
    26de:	89 2b       	or	r24, r25
    26e0:	09 f4       	brne	.+2      	; 0x26e4 <si114x_process_samples+0x42>
    26e2:	6f c0       	rjmp	.+222    	; 0x27c2 <si114x_process_samples+0x120>
    26e4:	40 91 1a 20 	lds	r20, 0x201A
    {
        printf("Computing Baseline. Make sure nothing is in the vicinity of the EVB\n");
        PortSet(1,0); // Turn on all lights to indicate baseline is being computed
    }

    if (initial_baseline_counter != 0)
    26e8:	44 23       	and	r20, r20
    26ea:	09 f4       	brne	.+2      	; 0x26ee <si114x_process_samples+0x4c>
    26ec:	40 c0       	rjmp	.+128    	; 0x276e <si114x_process_samples+0xcc>
    {
        // The first 128 samples are used to establish the initial 
        // baseline
        if ( initial_baseline_counter > 1 )
    26ee:	42 30       	cpi	r20, 0x02	; 2
    26f0:	08 f4       	brcc	.+2      	; 0x26f4 <si114x_process_samples+0x52>
    26f2:	b9 c0       	rjmp	.+370    	; 0x2866 <si114x_process_samples+0x1c4>
        {
            // Look for maximum
            if( maxLeakage[0] < samples->ps1) maxLeakage[0] = samples->ps1;
    26f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    26f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    26f8:	20 91 a9 25 	lds	r18, 0x25A9
    26fc:	30 91 aa 25 	lds	r19, 0x25AA
    2700:	28 17       	cp	r18, r24
    2702:	39 07       	cpc	r19, r25
    2704:	20 f4       	brcc	.+8      	; 0x270e <si114x_process_samples+0x6c>
    2706:	80 93 a9 25 	sts	0x25A9, r24
    270a:	90 93 aa 25 	sts	0x25AA, r25
            if( maxLeakage[1] < samples->ps2) maxLeakage[1] = samples->ps2;
    270e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2710:	9d 85       	ldd	r25, Y+13	; 0x0d
    2712:	20 91 ab 25 	lds	r18, 0x25AB
    2716:	30 91 ac 25 	lds	r19, 0x25AC
    271a:	28 17       	cp	r18, r24
    271c:	39 07       	cpc	r19, r25
    271e:	20 f4       	brcc	.+8      	; 0x2728 <si114x_process_samples+0x86>
    2720:	80 93 ab 25 	sts	0x25AB, r24
    2724:	90 93 ac 25 	sts	0x25AC, r25
			if( maxLeakage[2] < samples->ps3) maxLeakage[2] = samples->ps3;
    2728:	8e 85       	ldd	r24, Y+14	; 0x0e
    272a:	9f 85       	ldd	r25, Y+15	; 0x0f
    272c:	20 91 ad 25 	lds	r18, 0x25AD
    2730:	30 91 ae 25 	lds	r19, 0x25AE
    2734:	28 17       	cp	r18, r24
    2736:	39 07       	cpc	r19, r25
    2738:	20 f4       	brcc	.+8      	; 0x2742 <si114x_process_samples+0xa0>
    273a:	80 93 ad 25 	sts	0x25AD, r24
    273e:	90 93 ae 25 	sts	0x25AE, r25
            baseline[1] = maxLeakage[1];
			baseline[2] = maxLeakage[2];
        }
        
        // Decrement counter
        initial_baseline_counter--;
    2742:	41 50       	subi	r20, 0x01	; 1
    2744:	40 93 1a 20 	sts	0x201A, r20
                SliderAlgorithm(si114x_handle, samples, scale);

            }
        }
    }
}
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	ff 90       	pop	r15
    2752:	ef 90       	pop	r14
    2754:	df 90       	pop	r13
    2756:	cf 90       	pop	r12
    2758:	bf 90       	pop	r11
    275a:	af 90       	pop	r10
    275c:	9f 90       	pop	r9
    275e:	8f 90       	pop	r8
    2760:	7f 90       	pop	r7
    2762:	6f 90       	pop	r6
    2764:	5f 90       	pop	r5
    2766:	4f 90       	pop	r4
    2768:	3f 90       	pop	r3
    276a:	2f 90       	pop	r2
    276c:	08 95       	ret
    else
    {
        //
        // Once the baseline has been set, do the actual loop
        // The first thing that happens is to check for saturation events
        if(samples->ps1 > 48000 || samples->ps2 > 48000 || samples->ps3 > 48000)
    276e:	ea 84       	ldd	r14, Y+10	; 0x0a
    2770:	fb 84       	ldd	r15, Y+11	; 0x0b
    2772:	91 e8       	ldi	r25, 0x81	; 129
    2774:	e9 16       	cp	r14, r25
    2776:	9b eb       	ldi	r25, 0xBB	; 187
    2778:	f9 06       	cpc	r15, r25
    277a:	70 f4       	brcc	.+28     	; 0x2798 <si114x_process_samples+0xf6>
    277c:	cc 84       	ldd	r12, Y+12	; 0x0c
    277e:	dd 84       	ldd	r13, Y+13	; 0x0d
    2780:	e1 e8       	ldi	r30, 0x81	; 129
    2782:	ce 16       	cp	r12, r30
    2784:	eb eb       	ldi	r30, 0xBB	; 187
    2786:	de 06       	cpc	r13, r30
    2788:	38 f4       	brcc	.+14     	; 0x2798 <si114x_process_samples+0xf6>
    278a:	2e 84       	ldd	r2, Y+14	; 0x0e
    278c:	3f 84       	ldd	r3, Y+15	; 0x0f
    278e:	f1 e8       	ldi	r31, 0x81	; 129
    2790:	2f 16       	cp	r2, r31
    2792:	fb eb       	ldi	r31, 0xBB	; 187
    2794:	3f 06       	cpc	r3, r31
    2796:	50 f1       	brcs	.+84     	; 0x27ec <si114x_process_samples+0x14a>
            // handle saturation events by changing ADC settings.
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
            printf("Samples are Saturated\n");
    2798:	88 e5       	ldi	r24, 0x58	; 88
    279a:	91 e2       	ldi	r25, 0x21	; 33
                SliderAlgorithm(si114x_handle, samples, scale);

            }
        }
    }
}
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	ff 90       	pop	r15
    27a6:	ef 90       	pop	r14
    27a8:	df 90       	pop	r13
    27aa:	cf 90       	pop	r12
    27ac:	bf 90       	pop	r11
    27ae:	af 90       	pop	r10
    27b0:	9f 90       	pop	r9
    27b2:	8f 90       	pop	r8
    27b4:	7f 90       	pop	r7
    27b6:	6f 90       	pop	r6
    27b8:	5f 90       	pop	r5
    27ba:	4f 90       	pop	r4
    27bc:	3f 90       	pop	r3
    27be:	2f 90       	pop	r2
            // handle saturation events by changing ADC settings.
            //
            // For readability of this code, no changes to 
            // the settings are done.
            //
            printf("Samples are Saturated\n");
    27c0:	93 c6       	rjmp	.+3366   	; 0x34e8 <puts>
u8  code ircorrection[3] =  { 17, 35, 29 };
#endif

void si114x_process_samples(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples)
{
    if ((maxLeakage[0]==0)&&(maxLeakage[1]==0)&&(maxLeakage[2]==0)&&(initial_baseline_counter==128))
    27c2:	80 91 ad 25 	lds	r24, 0x25AD
    27c6:	90 91 ae 25 	lds	r25, 0x25AE
    27ca:	89 2b       	or	r24, r25
    27cc:	09 f0       	breq	.+2      	; 0x27d0 <si114x_process_samples+0x12e>
    27ce:	8a cf       	rjmp	.-236    	; 0x26e4 <si114x_process_samples+0x42>
    27d0:	40 91 1a 20 	lds	r20, 0x201A
    27d4:	40 38       	cpi	r20, 0x80	; 128
    27d6:	09 f0       	breq	.+2      	; 0x27da <si114x_process_samples+0x138>
    27d8:	87 cf       	rjmp	.-242    	; 0x26e8 <si114x_process_samples+0x46>
    {
        printf("Computing Baseline. Make sure nothing is in the vicinity of the EVB\n");
    27da:	88 ed       	ldi	r24, 0xD8	; 216
    27dc:	90 e2       	ldi	r25, 0x20	; 32
    27de:	84 d6       	rcall	.+3336   	; 0x34e8 <puts>
        PortSet(1,0); // Turn on all lights to indicate baseline is being computed
    27e0:	60 e0       	ldi	r22, 0x00	; 0
    27e2:	70 e0       	ldi	r23, 0x00	; 0
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	c1 d2       	rcall	.+1410   	; 0x2d6c <PortSet>
    27ea:	7c cf       	rjmp	.-264    	; 0x26e4 <si114x_process_samples+0x42>
                                        //
    u32 xdata IR = (u32) samples->ir; // Make a copy of ALS IR Reading
    
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 
    27ec:	80 91 a5 25 	lds	r24, 0x25A5
    27f0:	90 91 a6 25 	lds	r25, 0x25A6
    27f4:	a0 91 a7 25 	lds	r26, 0x25A7
    27f8:	b0 91 a8 25 	lds	r27, 0x25A8
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	a1 05       	cpc	r26, r1
    2800:	b1 05       	cpc	r27, r1
    2802:	09 f4       	brne	.+2      	; 0x2806 <si114x_process_samples+0x164>
    2804:	84 c0       	rjmp	.+264    	; 0x290e <si114x_process_samples+0x26c>

    // If ALS IR is saturated, return false immediately
    else if( samples->ir > 48000 ) return 0; 
    2806:	88 84       	ldd	r8, Y+8	; 0x08
    2808:	99 84       	ldd	r9, Y+9	; 0x09
    280a:	21 e8       	ldi	r18, 0x81	; 129
    280c:	82 16       	cp	r8, r18
    280e:	2b eb       	ldi	r18, 0xBB	; 187
    2810:	92 06       	cpc	r9, r18
    2812:	08 f0       	brcs	.+2      	; 0x2816 <si114x_process_samples+0x174>
    2814:	99 cf       	rjmp	.-206    	; 0x2748 <si114x_process_samples+0xa6>
    2816:	a1 2c       	mov	r10, r1
    2818:	b1 2c       	mov	r11, r1

    if( samples->ir < (IRlast + IRlast/2) && samples->ir > (IRlast - IRlast/2))
    281a:	ac 01       	movw	r20, r24
    281c:	bd 01       	movw	r22, r26
    281e:	76 95       	lsr	r23
    2820:	67 95       	ror	r22
    2822:	57 95       	ror	r21
    2824:	47 95       	ror	r20
    2826:	2a 01       	movw	r4, r20
    2828:	3b 01       	movw	r6, r22
    282a:	48 0e       	add	r4, r24
    282c:	59 1e       	adc	r5, r25
    282e:	6a 1e       	adc	r6, r26
    2830:	7b 1e       	adc	r7, r27
    2832:	84 14       	cp	r8, r4
    2834:	95 04       	cpc	r9, r5
    2836:	a6 04       	cpc	r10, r6
    2838:	b7 04       	cpc	r11, r7
    283a:	60 f4       	brcc	.+24     	; 0x2854 <si114x_process_samples+0x1b2>
    283c:	2c 01       	movw	r4, r24
    283e:	3d 01       	movw	r6, r26
    2840:	44 1a       	sub	r4, r20
    2842:	55 0a       	sbc	r5, r21
    2844:	66 0a       	sbc	r6, r22
    2846:	77 0a       	sbc	r7, r23
    2848:	48 14       	cp	r4, r8
    284a:	59 04       	cpc	r5, r9
    284c:	6a 04       	cpc	r6, r10
    284e:	7b 04       	cpc	r7, r11
    2850:	08 f4       	brcc	.+2      	; 0x2854 <si114x_process_samples+0x1b2>
    2852:	64 c0       	rjmp	.+200    	; 0x291c <si114x_process_samples+0x27a>
    }
    else
    {
        // Otherwise, return false and update
        // new IRlast value for next time
        IRlast = samples->ir;
    2854:	80 92 a5 25 	sts	0x25A5, r8
    2858:	90 92 a6 25 	sts	0x25A6, r9
    285c:	a0 92 a7 25 	sts	0x25A7, r10
    2860:	b0 92 a8 25 	sts	0x25A8, r11
    2864:	71 cf       	rjmp	.-286    	; 0x2748 <si114x_process_samples+0xa6>
            if( maxLeakage[1] < samples->ps2) maxLeakage[1] = samples->ps2;
			if( maxLeakage[2] < samples->ps3) maxLeakage[2] = samples->ps3;
        }
        else
        {
            printf("Initial Baseline Calculated, PS1 = %d, PS2 = %d, PS3 = %d \n", maxLeakage[0], maxLeakage[1],maxLeakage[2]);
    2866:	80 91 ae 25 	lds	r24, 0x25AE
    286a:	8f 93       	push	r24
    286c:	80 91 ad 25 	lds	r24, 0x25AD
    2870:	8f 93       	push	r24
    2872:	80 91 ac 25 	lds	r24, 0x25AC
    2876:	8f 93       	push	r24
    2878:	80 91 ab 25 	lds	r24, 0x25AB
    287c:	8f 93       	push	r24
    287e:	80 91 aa 25 	lds	r24, 0x25AA
    2882:	8f 93       	push	r24
    2884:	80 91 a9 25 	lds	r24, 0x25A9
    2888:	8f 93       	push	r24
    288a:	8c e1       	ldi	r24, 0x1C	; 28
    288c:	91 e2       	ldi	r25, 0x21	; 33
    288e:	9f 93       	push	r25
    2890:	8f 93       	push	r24
    2892:	19 d6       	rcall	.+3122   	; 0x34c6 <printf>
            PortSet(1,0xff); // Turn off all leds to indicate baseline computation is completed
    2894:	6f ef       	ldi	r22, 0xFF	; 255
    2896:	70 e0       	ldi	r23, 0x00	; 0
    2898:	81 e0       	ldi	r24, 0x01	; 1
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	67 d2       	rcall	.+1230   	; 0x2d6c <PortSet>
            // Set Max Leakage 
            maxLeakage[0] = maxLeakage[0] + noise_margin*2;
    289e:	80 91 18 20 	lds	r24, 0x2018
    28a2:	90 91 19 20 	lds	r25, 0x2019
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	60 91 a9 25 	lds	r22, 0x25A9
    28ae:	70 91 aa 25 	lds	r23, 0x25AA
    28b2:	68 0f       	add	r22, r24
    28b4:	79 1f       	adc	r23, r25
    28b6:	60 93 a9 25 	sts	0x25A9, r22
    28ba:	70 93 aa 25 	sts	0x25AA, r23
            maxLeakage[1] = maxLeakage[1] + noise_margin*2;
    28be:	40 91 ab 25 	lds	r20, 0x25AB
    28c2:	50 91 ac 25 	lds	r21, 0x25AC
    28c6:	48 0f       	add	r20, r24
    28c8:	59 1f       	adc	r21, r25
    28ca:	40 93 ab 25 	sts	0x25AB, r20
    28ce:	50 93 ac 25 	sts	0x25AC, r21
			maxLeakage[2] = maxLeakage[2] + noise_margin*2;
    28d2:	20 91 ad 25 	lds	r18, 0x25AD
    28d6:	30 91 ae 25 	lds	r19, 0x25AE
    28da:	28 0f       	add	r18, r24
    28dc:	39 1f       	adc	r19, r25
    28de:	20 93 ad 25 	sts	0x25AD, r18
    28e2:	30 93 ae 25 	sts	0x25AE, r19

            baseline[0] = maxLeakage[0];
    28e6:	60 93 04 26 	sts	0x2604, r22
    28ea:	70 93 05 26 	sts	0x2605, r23
            baseline[1] = maxLeakage[1];
    28ee:	40 93 06 26 	sts	0x2606, r20
    28f2:	50 93 07 26 	sts	0x2607, r21
			baseline[2] = maxLeakage[2];
    28f6:	20 93 08 26 	sts	0x2608, r18
    28fa:	30 93 09 26 	sts	0x2609, r19
    28fe:	40 91 1a 20 	lds	r20, 0x201A
    2902:	8d b7       	in	r24, 0x3d	; 61
    2904:	9e b7       	in	r25, 0x3e	; 62
    2906:	08 96       	adiw	r24, 0x08	; 8
    2908:	8d bf       	out	0x3d, r24	; 61
    290a:	9e bf       	out	0x3e, r25	; 62
    290c:	1a cf       	rjmp	.-460    	; 0x2742 <si114x_process_samples+0xa0>
                                        //
    u32 xdata IR = (u32) samples->ir; // Make a copy of ALS IR Reading
    
    // Initialize IRlast to the ALS IR reading if it does not contain 
    // information from a previous measurement cycle
    if( IRlast == 0) IRlast = samples->ir; 
    290e:	88 85       	ldd	r24, Y+8	; 0x08
    2910:	99 85       	ldd	r25, Y+9	; 0x09
    2912:	a0 e0       	ldi	r26, 0x00	; 0
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	4c 01       	movw	r8, r24
    2918:	5d 01       	movw	r10, r26
    291a:	7f cf       	rjmp	.-258    	; 0x281a <si114x_process_samples+0x178>

    if( samples->ir < (IRlast + IRlast/2) && samples->ir > (IRlast - IRlast/2))
    {
        // If IR is within 3 dB, declare it stable
        // and perform some averaging
        IRlast = (samples->ir + (IRlast*3)) / 4;
    291c:	ac 01       	movw	r20, r24
    291e:	bd 01       	movw	r22, r26
    2920:	44 0f       	add	r20, r20
    2922:	55 1f       	adc	r21, r21
    2924:	66 1f       	adc	r22, r22
    2926:	77 1f       	adc	r23, r23
    2928:	48 0f       	add	r20, r24
    292a:	59 1f       	adc	r21, r25
    292c:	6a 1f       	adc	r22, r26
    292e:	7b 1f       	adc	r23, r27
    2930:	48 0d       	add	r20, r8
    2932:	59 1d       	adc	r21, r9
    2934:	6a 1d       	adc	r22, r10
    2936:	7b 1d       	adc	r23, r11
    2938:	76 95       	lsr	r23
    293a:	67 95       	ror	r22
    293c:	57 95       	ror	r21
    293e:	47 95       	ror	r20
    2940:	76 95       	lsr	r23
    2942:	67 95       	ror	r22
    2944:	57 95       	ror	r21
    2946:	47 95       	ror	r20
    2948:	40 93 a5 25 	sts	0x25A5, r20
    294c:	50 93 a6 25 	sts	0x25A6, r21
    2950:	60 93 a7 25 	sts	0x25A7, r22
    2954:	70 93 a8 25 	sts	0x25A8, r23
    // Correction = ( (ALS_IR - 256) + (PS - 256) ) * IRcorrectionfactor
    //  where IRcorrectionfactor = IRCORRECTION / 10000    
    switch(proxChannel)
    {
        case 0:
            Correction = ((u32)samples->ir + (u32)(samples->ps1) - 512) * (u32) ircorrection[proxChannel];
    2958:	97 01       	movw	r18, r14
    295a:	40 e0       	ldi	r20, 0x00	; 0
    295c:	50 e0       	ldi	r21, 0x00	; 0
    295e:	32 50       	subi	r19, 0x02	; 2
    2960:	41 09       	sbc	r20, r1
    2962:	51 09       	sbc	r21, r1
    2964:	28 0d       	add	r18, r8
    2966:	39 1d       	adc	r19, r9
    2968:	4a 1d       	adc	r20, r10
    296a:	5b 1d       	adc	r21, r11
    296c:	a0 91 13 20 	lds	r26, 0x2013
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	8b d5       	rcall	.+2838   	; 0x348a <__muluhisi3>
            Correction = Correction/10000;
    2974:	40 e1       	ldi	r20, 0x10	; 16
    2976:	44 2e       	mov	r4, r20
    2978:	47 e2       	ldi	r20, 0x27	; 39
    297a:	54 2e       	mov	r5, r20
    297c:	61 2c       	mov	r6, r1
    297e:	71 2c       	mov	r7, r1
    2980:	a3 01       	movw	r20, r6
    2982:	92 01       	movw	r18, r4
    2984:	51 d5       	rcall	.+2722   	; 0x3428 <__udivmodsi4>
            samples->ps1 = samples->ps1 + Correction;    
    2986:	e2 0e       	add	r14, r18
    2988:	f3 1e       	adc	r15, r19
    298a:	ea 86       	std	Y+10, r14	; 0x0a
    298c:	fb 86       	std	Y+11, r15	; 0x0b
            break;
        case 1:
            Correction = ((u32)samples->ir + (u32)(samples->ps2) - 512) * (u32) ircorrection[proxChannel];
    298e:	96 01       	movw	r18, r12
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	32 50       	subi	r19, 0x02	; 2
    2996:	41 09       	sbc	r20, r1
    2998:	51 09       	sbc	r21, r1
    299a:	28 0d       	add	r18, r8
    299c:	39 1d       	adc	r19, r9
    299e:	4a 1d       	adc	r20, r10
    29a0:	5b 1d       	adc	r21, r11
    29a2:	a0 91 14 20 	lds	r26, 0x2014
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	70 d5       	rcall	.+2784   	; 0x348a <__muluhisi3>
            Correction = Correction/10000;
    29aa:	a3 01       	movw	r20, r6
    29ac:	92 01       	movw	r18, r4
    29ae:	3c d5       	rcall	.+2680   	; 0x3428 <__udivmodsi4>
            samples->ps2 = samples->ps2 + Correction;            
    29b0:	c2 0e       	add	r12, r18
    29b2:	d3 1e       	adc	r13, r19
    29b4:	cc 86       	std	Y+12, r12	; 0x0c
    29b6:	dd 86       	std	Y+13, r13	; 0x0d
            break;
		case 2:
			Correction = ((u32)samples->ir + (u32)(samples->ps3) - 512) * (u32) ircorrection[proxChannel];
    29b8:	91 01       	movw	r18, r2
    29ba:	40 e0       	ldi	r20, 0x00	; 0
    29bc:	50 e0       	ldi	r21, 0x00	; 0
    29be:	32 50       	subi	r19, 0x02	; 2
    29c0:	41 09       	sbc	r20, r1
    29c2:	51 09       	sbc	r21, r1
    29c4:	28 0d       	add	r18, r8
    29c6:	39 1d       	adc	r19, r9
    29c8:	4a 1d       	adc	r20, r10
    29ca:	5b 1d       	adc	r21, r11
    29cc:	a0 91 15 20 	lds	r26, 0x2015
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	5b d5       	rcall	.+2742   	; 0x348a <__muluhisi3>
			Correction = Correction/10000;
    29d4:	a3 01       	movw	r20, r6
    29d6:	92 01       	movw	r18, r4
    29d8:	27 d5       	rcall	.+2638   	; 0x3428 <__udivmodsi4>
			samples->ps3 = samples->ps3 + Correction;
    29da:	22 0d       	add	r18, r2
    29dc:	33 1d       	adc	r19, r3
    29de:	2e 87       	std	Y+14, r18	; 0x0e
    29e0:	3f 87       	std	Y+15, r19	; 0x0f
            {
                IRCompensation( 0, samples, ircorrection );  // IR Ambient Compensation for PS1 Channel
                IRCompensation( 1, samples, ircorrection );  // IR Ambient Compensation for PS2 Channel
				IRCompensation( 2, samples, ircorrection );  // IR Ambient Compensation for PS3 Channel

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
    29e2:	40 91 18 20 	lds	r20, 0x2018
    29e6:	50 91 19 20 	lds	r21, 0x2019
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    29ea:	80 91 9f 25 	lds	r24, 0x259F
    29ee:	90 91 a0 25 	lds	r25, 0x25A0
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <si114x_process_samples+0x356>
    29f6:	5c c1       	rjmp	.+696    	; 0x2cb0 <si114x_process_samples+0x60e>
    } 

    // Only process samples which are below the maxLeakage values, anything 
    // higher is a signal created by an object in front of the system which 
    // should not be baselined
    if ( *pPS < maxLeakage[proxChannel] )
    29f8:	60 91 a9 25 	lds	r22, 0x25A9
    29fc:	70 91 aa 25 	lds	r23, 0x25AA
    2a00:	e6 16       	cp	r14, r22
    2a02:	f7 06       	cpc	r15, r23
    2a04:	08 f0       	brcs	.+2      	; 0x2a08 <si114x_process_samples+0x366>
    2a06:	aa c1       	rjmp	.+852    	; 0x2d5c <si114x_process_samples+0x6ba>
    {
        average = dynamic_baseline[proxChannel]*7;
    2a08:	bc 01       	movw	r22, r24
    2a0a:	66 0f       	add	r22, r22
    2a0c:	77 1f       	adc	r23, r23
    2a0e:	66 0f       	add	r22, r22
    2a10:	77 1f       	adc	r23, r23
    2a12:	66 0f       	add	r22, r22
    2a14:	77 1f       	adc	r23, r23
    2a16:	68 1b       	sub	r22, r24
    2a18:	79 0b       	sbc	r23, r25
        average = average + (u32)(*pPS);
    2a1a:	47 01       	movw	r8, r14
    2a1c:	a1 2c       	mov	r10, r1
    2a1e:	b1 2c       	mov	r11, r1
    2a20:	86 0e       	add	r8, r22
    2a22:	97 1e       	adc	r9, r23
    2a24:	a1 1c       	adc	r10, r1
    2a26:	b1 1c       	adc	r11, r1
        average = average/8;
    2a28:	a3 e0       	ldi	r26, 0x03	; 3
    2a2a:	b6 94       	lsr	r11
    2a2c:	a7 94       	ror	r10
    2a2e:	97 94       	ror	r9
    2a30:	87 94       	ror	r8
    2a32:	aa 95       	dec	r26
    2a34:	d1 f7       	brne	.-12     	; 0x2a2a <si114x_process_samples+0x388>
        // If the new sample has not changed the baseline average by a large 
        // amount, then allow the rollingMax variable to update. If the new 
        // sample did move the baseline average by a lot, then it's possible 
        // it was created by a proximity event. So, do not consider this part 
        // of the rollingMax
        if ( dynamic_baseline[proxChannel] <= (u16)average + (u16)average/64
    2a36:	b4 01       	movw	r22, r8
    2a38:	00 24       	eor	r0, r0
    2a3a:	66 0f       	add	r22, r22
    2a3c:	77 1f       	adc	r23, r23
    2a3e:	00 1c       	adc	r0, r0
    2a40:	66 0f       	add	r22, r22
    2a42:	77 1f       	adc	r23, r23
    2a44:	00 1c       	adc	r0, r0
    2a46:	67 2f       	mov	r22, r23
    2a48:	70 2d       	mov	r23, r0
    2a4a:	fb 01       	movw	r30, r22
    2a4c:	e8 0d       	add	r30, r8
    2a4e:	f9 1d       	adc	r31, r9
    2a50:	e8 17       	cp	r30, r24
    2a52:	f9 07       	cpc	r31, r25
    2a54:	08 f4       	brcc	.+2      	; 0x2a58 <si114x_process_samples+0x3b6>
    2a56:	5c c1       	rjmp	.+696    	; 0x2d10 <si114x_process_samples+0x66e>
            && dynamic_baseline[proxChannel] >= (u16)average - (u16)average/64)
    2a58:	34 01       	movw	r6, r8
    2a5a:	66 1a       	sub	r6, r22
    2a5c:	77 0a       	sbc	r7, r23
    2a5e:	86 15       	cp	r24, r6
    2a60:	97 05       	cpc	r25, r7
    2a62:	08 f4       	brcc	.+2      	; 0x2a66 <si114x_process_samples+0x3c4>
    2a64:	55 c1       	rjmp	.+682    	; 0x2d10 <si114x_process_samples+0x66e>
        {
            if ( rollingMax[proxChannel] == 0 )
    2a66:	80 91 99 25 	lds	r24, 0x2599
    2a6a:	90 91 9a 25 	lds	r25, 0x259A
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	09 f4       	brne	.+2      	; 0x2a74 <si114x_process_samples+0x3d2>
    2a72:	6d c1       	rjmp	.+730    	; 0x2d4e <si114x_process_samples+0x6ac>
            {
                rollingMax[proxChannel] = *pPS;
                Maxcount[proxChannel] = 0;
            } 
            else if ( rollingMax[proxChannel] >= *pPS )
    2a74:	8e 15       	cp	r24, r14
    2a76:	9f 05       	cpc	r25, r15
    2a78:	08 f4       	brcc	.+2      	; 0x2a7c <si114x_process_samples+0x3da>
    2a7a:	69 c1       	rjmp	.+722    	; 0x2d4e <si114x_process_samples+0x6ac>
            {
                (Maxcount[proxChannel]) += 1;
    2a7c:	60 91 96 25 	lds	r22, 0x2596
    2a80:	6f 5f       	subi	r22, 0xFF	; 255
    2a82:	60 93 96 25 	sts	0x2596, r22
                if ( Maxcount[proxChannel] > 64 )
    2a86:	61 34       	cpi	r22, 0x41	; 65
    2a88:	08 f4       	brcc	.+2      	; 0x2a8c <si114x_process_samples+0x3ea>
    2a8a:	6e c1       	rjmp	.+732    	; 0x2d68 <si114x_process_samples+0x6c6>
                {
                    (rollingMax[proxChannel]) -= 1;
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	80 93 99 25 	sts	0x2599, r24
    2a92:	90 93 9a 25 	sts	0x259A, r25
                    Maxcount[proxChannel] = 0;
    2a96:	10 92 96 25 	sts	0x2596, r1
    2a9a:	7c 01       	movw	r14, r24
                Maxcount[proxChannel] = 0;
            }
        }

        // Update the stored baseline average with the new value
        dynamic_baseline[proxChannel] = (u16)average;
    2a9c:	80 92 9f 25 	sts	0x259F, r8
    2aa0:	90 92 a0 25 	sts	0x25A0, r9
    }

    // Use the rollingMax value to determine the baseline level
    if ( rollingMax[proxChannel] != 0 )
    2aa4:	e1 14       	cp	r14, r1
    2aa6:	f1 04       	cpc	r15, r1
    2aa8:	09 f0       	breq	.+2      	; 0x2aac <si114x_process_samples+0x40a>
    2aaa:	1d c1       	rjmp	.+570    	; 0x2ce6 <si114x_process_samples+0x644>
    {
        baseline[proxChannel] = rollingMax[proxChannel] + noise_margin;
    } 
    else
    {  // If the rollingMax has not been determined yet, use the average
        baseline[proxChannel] = (u16) dynamic_baseline[proxChannel] + noise_margin;
    2aac:	84 0e       	add	r8, r20
    2aae:	95 1e       	adc	r9, r21
    2ab0:	80 92 04 26 	sts	0x2604, r8
    2ab4:	90 92 05 26 	sts	0x2605, r9
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    2ab8:	80 90 a1 25 	lds	r8, 0x25A1
    2abc:	90 90 a2 25 	lds	r9, 0x25A2
    2ac0:	81 14       	cp	r8, r1
    2ac2:	91 04       	cpc	r9, r1
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <si114x_process_samples+0x426>
    2ac6:	eb c0       	rjmp	.+470    	; 0x2c9e <si114x_process_samples+0x5fc>
    } 

    // Only process samples which are below the maxLeakage values, anything 
    // higher is a signal created by an object in front of the system which 
    // should not be baselined
    if ( *pPS < maxLeakage[proxChannel] )
    2ac8:	80 91 ab 25 	lds	r24, 0x25AB
    2acc:	90 91 ac 25 	lds	r25, 0x25AC
    2ad0:	c8 16       	cp	r12, r24
    2ad2:	d9 06       	cpc	r13, r25
    2ad4:	08 f0       	brcs	.+2      	; 0x2ad8 <si114x_process_samples+0x436>
    2ad6:	f9 c0       	rjmp	.+498    	; 0x2cca <si114x_process_samples+0x628>
    2ad8:	c4 01       	movw	r24, r8
    {
        average = dynamic_baseline[proxChannel]*7;
    2ada:	bc 01       	movw	r22, r24
    2adc:	66 0f       	add	r22, r22
    2ade:	77 1f       	adc	r23, r23
    2ae0:	66 0f       	add	r22, r22
    2ae2:	77 1f       	adc	r23, r23
    2ae4:	66 0f       	add	r22, r22
    2ae6:	77 1f       	adc	r23, r23
    2ae8:	68 1b       	sub	r22, r24
    2aea:	79 0b       	sbc	r23, r25
        average = average + (u32)(*pPS);
    2aec:	46 01       	movw	r8, r12
    2aee:	a1 2c       	mov	r10, r1
    2af0:	b1 2c       	mov	r11, r1
    2af2:	86 0e       	add	r8, r22
    2af4:	97 1e       	adc	r9, r23
    2af6:	a1 1c       	adc	r10, r1
    2af8:	b1 1c       	adc	r11, r1
        average = average/8;
    2afa:	63 e0       	ldi	r22, 0x03	; 3
    2afc:	b6 94       	lsr	r11
    2afe:	a7 94       	ror	r10
    2b00:	97 94       	ror	r9
    2b02:	87 94       	ror	r8
    2b04:	6a 95       	dec	r22
    2b06:	d1 f7       	brne	.-12     	; 0x2afc <si114x_process_samples+0x45a>
        // If the new sample has not changed the baseline average by a large 
        // amount, then allow the rollingMax variable to update. If the new 
        // sample did move the baseline average by a lot, then it's possible 
        // it was created by a proximity event. So, do not consider this part 
        // of the rollingMax
        if ( dynamic_baseline[proxChannel] <= (u16)average + (u16)average/64
    2b08:	b4 01       	movw	r22, r8
    2b0a:	00 24       	eor	r0, r0
    2b0c:	66 0f       	add	r22, r22
    2b0e:	77 1f       	adc	r23, r23
    2b10:	00 1c       	adc	r0, r0
    2b12:	66 0f       	add	r22, r22
    2b14:	77 1f       	adc	r23, r23
    2b16:	00 1c       	adc	r0, r0
    2b18:	67 2f       	mov	r22, r23
    2b1a:	70 2d       	mov	r23, r0
    2b1c:	fb 01       	movw	r30, r22
    2b1e:	e8 0d       	add	r30, r8
    2b20:	f9 1d       	adc	r31, r9
    2b22:	e8 17       	cp	r30, r24
    2b24:	f9 07       	cpc	r31, r25
    2b26:	08 f4       	brcc	.+2      	; 0x2b2a <si114x_process_samples+0x488>
    2b28:	fd c0       	rjmp	.+506    	; 0x2d24 <si114x_process_samples+0x682>
            && dynamic_baseline[proxChannel] >= (u16)average - (u16)average/64)
    2b2a:	74 01       	movw	r14, r8
    2b2c:	e6 1a       	sub	r14, r22
    2b2e:	f7 0a       	sbc	r15, r23
    2b30:	8e 15       	cp	r24, r14
    2b32:	9f 05       	cpc	r25, r15
    2b34:	08 f4       	brcc	.+2      	; 0x2b38 <si114x_process_samples+0x496>
    2b36:	f6 c0       	rjmp	.+492    	; 0x2d24 <si114x_process_samples+0x682>
        {
            if ( rollingMax[proxChannel] == 0 )
    2b38:	80 91 9b 25 	lds	r24, 0x259B
    2b3c:	90 91 9c 25 	lds	r25, 0x259C
    2b40:	00 97       	sbiw	r24, 0x00	; 0
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <si114x_process_samples+0x4a4>
    2b44:	fd c0       	rjmp	.+506    	; 0x2d40 <si114x_process_samples+0x69e>
            {
                rollingMax[proxChannel] = *pPS;
                Maxcount[proxChannel] = 0;
            } 
            else if ( rollingMax[proxChannel] >= *pPS )
    2b46:	8c 15       	cp	r24, r12
    2b48:	9d 05       	cpc	r25, r13
    2b4a:	08 f4       	brcc	.+2      	; 0x2b4e <si114x_process_samples+0x4ac>
    2b4c:	f9 c0       	rjmp	.+498    	; 0x2d40 <si114x_process_samples+0x69e>
            {
                (Maxcount[proxChannel]) += 1;
    2b4e:	60 91 97 25 	lds	r22, 0x2597
    2b52:	6f 5f       	subi	r22, 0xFF	; 255
    2b54:	60 93 97 25 	sts	0x2597, r22
                if ( Maxcount[proxChannel] > 64 )
    2b58:	61 34       	cpi	r22, 0x41	; 65
    2b5a:	08 f4       	brcc	.+2      	; 0x2b5e <si114x_process_samples+0x4bc>
    2b5c:	03 c1       	rjmp	.+518    	; 0x2d64 <si114x_process_samples+0x6c2>
                {
                    (rollingMax[proxChannel]) -= 1;
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	80 93 9b 25 	sts	0x259B, r24
    2b64:	90 93 9c 25 	sts	0x259C, r25
                    Maxcount[proxChannel] = 0;
    2b68:	10 92 97 25 	sts	0x2597, r1
    2b6c:	6c 01       	movw	r12, r24
                Maxcount[proxChannel] = 0;
            }
        }

        // Update the stored baseline average with the new value
        dynamic_baseline[proxChannel] = (u16)average;
    2b6e:	80 92 a1 25 	sts	0x25A1, r8
    2b72:	90 92 a2 25 	sts	0x25A2, r9
    }

    // Use the rollingMax value to determine the baseline level
    if ( rollingMax[proxChannel] != 0 )
    2b76:	c1 14       	cp	r12, r1
    2b78:	d1 04       	cpc	r13, r1
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <si114x_process_samples+0x4dc>
    2b7c:	c2 c0       	rjmp	.+388    	; 0x2d02 <si114x_process_samples+0x660>
    {
        baseline[proxChannel] = rollingMax[proxChannel] + noise_margin;
    } 
    else
    {  // If the rollingMax has not been determined yet, use the average
        baseline[proxChannel] = (u16) dynamic_baseline[proxChannel] + noise_margin;
    2b7e:	84 0e       	add	r8, r20
    2b80:	95 1e       	adc	r9, r21
    2b82:	80 92 06 26 	sts	0x2606, r8
    2b86:	90 92 07 26 	sts	0x2607, r9
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    2b8a:	80 91 a3 25 	lds	r24, 0x25A3
    2b8e:	90 91 a4 25 	lds	r25, 0x25A4
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <si114x_process_samples+0x4f6>
    2b96:	9e c0       	rjmp	.+316    	; 0x2cd4 <si114x_process_samples+0x632>
    } 

    // Only process samples which are below the maxLeakage values, anything 
    // higher is a signal created by an object in front of the system which 
    // should not be baselined
    if ( *pPS < maxLeakage[proxChannel] )
    2b98:	60 91 ad 25 	lds	r22, 0x25AD
    2b9c:	70 91 ae 25 	lds	r23, 0x25AE
    2ba0:	26 17       	cp	r18, r22
    2ba2:	37 07       	cpc	r19, r23
    2ba4:	08 f0       	brcs	.+2      	; 0x2ba8 <si114x_process_samples+0x506>
    2ba6:	76 c0       	rjmp	.+236    	; 0x2c94 <si114x_process_samples+0x5f2>
    2ba8:	bc 01       	movw	r22, r24
    {
        average = dynamic_baseline[proxChannel]*7;
    2baa:	fb 01       	movw	r30, r22
    2bac:	ee 0f       	add	r30, r30
    2bae:	ff 1f       	adc	r31, r31
    2bb0:	ee 0f       	add	r30, r30
    2bb2:	ff 1f       	adc	r31, r31
    2bb4:	ee 0f       	add	r30, r30
    2bb6:	ff 1f       	adc	r31, r31
    2bb8:	e6 1b       	sub	r30, r22
    2bba:	f7 0b       	sbc	r31, r23
        average = average + (u32)(*pPS);
    2bbc:	c9 01       	movw	r24, r18
    2bbe:	a0 e0       	ldi	r26, 0x00	; 0
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	8e 0f       	add	r24, r30
    2bc4:	9f 1f       	adc	r25, r31
    2bc6:	a1 1d       	adc	r26, r1
    2bc8:	b1 1d       	adc	r27, r1
        average = average/8;
    2bca:	e3 e0       	ldi	r30, 0x03	; 3
    2bcc:	b6 95       	lsr	r27
    2bce:	a7 95       	ror	r26
    2bd0:	97 95       	ror	r25
    2bd2:	87 95       	ror	r24
    2bd4:	ea 95       	dec	r30
    2bd6:	d1 f7       	brne	.-12     	; 0x2bcc <si114x_process_samples+0x52a>
        // If the new sample has not changed the baseline average by a large 
        // amount, then allow the rollingMax variable to update. If the new 
        // sample did move the baseline average by a lot, then it's possible 
        // it was created by a proximity event. So, do not consider this part 
        // of the rollingMax
        if ( dynamic_baseline[proxChannel] <= (u16)average + (u16)average/64
    2bd8:	fc 01       	movw	r30, r24
    2bda:	00 24       	eor	r0, r0
    2bdc:	ee 0f       	add	r30, r30
    2bde:	ff 1f       	adc	r31, r31
    2be0:	00 1c       	adc	r0, r0
    2be2:	ee 0f       	add	r30, r30
    2be4:	ff 1f       	adc	r31, r31
    2be6:	00 1c       	adc	r0, r0
    2be8:	ef 2f       	mov	r30, r31
    2bea:	f0 2d       	mov	r31, r0
    2bec:	7f 01       	movw	r14, r30
    2bee:	e8 0e       	add	r14, r24
    2bf0:	f9 1e       	adc	r15, r25
    2bf2:	e6 16       	cp	r14, r22
    2bf4:	f7 06       	cpc	r15, r23
    2bf6:	08 f4       	brcc	.+2      	; 0x2bfa <si114x_process_samples+0x558>
    2bf8:	90 c0       	rjmp	.+288    	; 0x2d1a <si114x_process_samples+0x678>
            && dynamic_baseline[proxChannel] >= (u16)average - (u16)average/64)
    2bfa:	2c 01       	movw	r4, r24
    2bfc:	4e 1a       	sub	r4, r30
    2bfe:	5f 0a       	sbc	r5, r31
    2c00:	64 15       	cp	r22, r4
    2c02:	75 05       	cpc	r23, r5
    2c04:	08 f4       	brcc	.+2      	; 0x2c08 <si114x_process_samples+0x566>
    2c06:	89 c0       	rjmp	.+274    	; 0x2d1a <si114x_process_samples+0x678>
        {
            if ( rollingMax[proxChannel] == 0 )
    2c08:	60 91 9d 25 	lds	r22, 0x259D
    2c0c:	70 91 9e 25 	lds	r23, 0x259E
    2c10:	61 15       	cp	r22, r1
    2c12:	71 05       	cpc	r23, r1
    2c14:	71 f0       	breq	.+28     	; 0x2c32 <si114x_process_samples+0x590>
            {
                rollingMax[proxChannel] = *pPS;
                Maxcount[proxChannel] = 0;
            } 
            else if ( rollingMax[proxChannel] >= *pPS )
    2c16:	62 17       	cp	r22, r18
    2c18:	73 07       	cpc	r23, r19
    2c1a:	58 f0       	brcs	.+22     	; 0x2c32 <si114x_process_samples+0x590>
            {
                (Maxcount[proxChannel]) += 1;
    2c1c:	20 91 98 25 	lds	r18, 0x2598
    2c20:	2f 5f       	subi	r18, 0xFF	; 255
    2c22:	20 93 98 25 	sts	0x2598, r18
                if ( Maxcount[proxChannel] > 64 )
    2c26:	21 34       	cpi	r18, 0x41	; 65
    2c28:	08 f4       	brcc	.+2      	; 0x2c2c <si114x_process_samples+0x58a>
    2c2a:	9a c0       	rjmp	.+308    	; 0x2d60 <si114x_process_samples+0x6be>
                {
                    (rollingMax[proxChannel]) -= 1;
    2c2c:	9b 01       	movw	r18, r22
    2c2e:	21 50       	subi	r18, 0x01	; 1
    2c30:	31 09       	sbc	r19, r1
    2c32:	20 93 9d 25 	sts	0x259D, r18
    2c36:	30 93 9e 25 	sts	0x259E, r19
                    Maxcount[proxChannel] = 0;
    2c3a:	10 92 98 25 	sts	0x2598, r1
                Maxcount[proxChannel] = 0;
            }
        }

        // Update the stored baseline average with the new value
        dynamic_baseline[proxChannel] = (u16)average;
    2c3e:	80 93 a3 25 	sts	0x25A3, r24
    2c42:	90 93 a4 25 	sts	0x25A4, r25
    }

    // Use the rollingMax value to determine the baseline level
    if ( rollingMax[proxChannel] != 0 )
    2c46:	21 15       	cp	r18, r1
    2c48:	31 05       	cpc	r19, r1
    2c4a:	09 f0       	breq	.+2      	; 0x2c4e <si114x_process_samples+0x5ac>
    2c4c:	53 c0       	rjmp	.+166    	; 0x2cf4 <si114x_process_samples+0x652>
    {
        baseline[proxChannel] = rollingMax[proxChannel] + noise_margin;
    } 
    else
    {  // If the rollingMax has not been determined yet, use the average
        baseline[proxChannel] = (u16) dynamic_baseline[proxChannel] + noise_margin;
    2c4e:	84 0f       	add	r24, r20
    2c50:	95 1f       	adc	r25, r21
    2c52:	80 93 08 26 	sts	0x2608, r24
    2c56:	90 93 09 26 	sts	0x2609, r25

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
				calcBaseline( 2 , samples, noise_margin); // Calculate PS3 Baseline

                SliderAlgorithm(si114x_handle, samples, scale);
    2c5a:	40 91 16 20 	lds	r20, 0x2016
    2c5e:	50 91 17 20 	lds	r21, 0x2017
    2c62:	be 01       	movw	r22, r28
    2c64:	c8 01       	movw	r24, r16

            }
        }
    }
}
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	ff 90       	pop	r15
    2c70:	ef 90       	pop	r14
    2c72:	df 90       	pop	r13
    2c74:	cf 90       	pop	r12
    2c76:	bf 90       	pop	r11
    2c78:	af 90       	pop	r10
    2c7a:	9f 90       	pop	r9
    2c7c:	8f 90       	pop	r8
    2c7e:	7f 90       	pop	r7
    2c80:	6f 90       	pop	r6
    2c82:	5f 90       	pop	r5
    2c84:	4f 90       	pop	r4
    2c86:	3f 90       	pop	r3
    2c88:	2f 90       	pop	r2

                calcBaseline( 0 , samples, noise_margin); // Calculate PS1 Baseline
                calcBaseline( 1 , samples, noise_margin); // Calculate PS2 Baseline
				calcBaseline( 2 , samples, noise_margin); // Calculate PS3 Baseline

                SliderAlgorithm(si114x_handle, samples, scale);
    2c8a:	4d c1       	rjmp	.+666    	; 0x2f26 <SliderAlgorithm>
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    {
       dynamic_baseline[proxChannel] = *pPS;
    } else if ( dynamic_baseline[proxChannel] == 0)
    {
       dynamic_baseline[proxChannel] = maxLeakage[proxChannel];
    2c8c:	80 93 a3 25 	sts	0x25A3, r24
    2c90:	90 93 a4 25 	sts	0x25A4, r25
    2c94:	20 91 9d 25 	lds	r18, 0x259D
    2c98:	30 91 9e 25 	lds	r19, 0x259E
    2c9c:	d4 cf       	rjmp	.-88     	; 0x2c46 <si114x_process_samples+0x5a4>
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    2c9e:	80 90 ab 25 	lds	r8, 0x25AB
    2ca2:	90 90 ac 25 	lds	r9, 0x25AC
    2ca6:	c8 14       	cp	r12, r8
    2ca8:	d9 04       	cpc	r13, r9
    2caa:	58 f4       	brcc	.+22     	; 0x2cc2 <si114x_process_samples+0x620>
    {
       dynamic_baseline[proxChannel] = *pPS;
    2cac:	c6 01       	movw	r24, r12
    2cae:	15 cf       	rjmp	.-470    	; 0x2ada <si114x_process_samples+0x438>
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    2cb0:	80 90 a9 25 	lds	r8, 0x25A9
    2cb4:	90 90 aa 25 	lds	r9, 0x25AA
    2cb8:	e8 14       	cp	r14, r8
    2cba:	f9 04       	cpc	r15, r9
    2cbc:	c0 f5       	brcc	.+112    	; 0x2d2e <si114x_process_samples+0x68c>
    {
       dynamic_baseline[proxChannel] = *pPS;
    2cbe:	c7 01       	movw	r24, r14
    2cc0:	a3 ce       	rjmp	.-698    	; 0x2a08 <si114x_process_samples+0x366>
    } else if ( dynamic_baseline[proxChannel] == 0)
    {
       dynamic_baseline[proxChannel] = maxLeakage[proxChannel];
    2cc2:	80 92 a1 25 	sts	0x25A1, r8
    2cc6:	90 92 a2 25 	sts	0x25A2, r9
    2cca:	c0 90 9b 25 	lds	r12, 0x259B
    2cce:	d0 90 9c 25 	lds	r13, 0x259C
    2cd2:	51 cf       	rjmp	.-350    	; 0x2b76 <si114x_process_samples+0x4d4>
            break;
    }

    // If the stored baseline in dynaBaseline is still set to its initialized 
    // value of maxLeakage, then set dynaBaseline equal to the newest sample
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    2cd4:	80 91 ad 25 	lds	r24, 0x25AD
    2cd8:	90 91 ae 25 	lds	r25, 0x25AE
    2cdc:	28 17       	cp	r18, r24
    2cde:	39 07       	cpc	r19, r25
    2ce0:	a8 f6       	brcc	.-86     	; 0x2c8c <si114x_process_samples+0x5ea>
    {
       dynamic_baseline[proxChannel] = *pPS;
    2ce2:	b9 01       	movw	r22, r18
    2ce4:	62 cf       	rjmp	.-316    	; 0x2baa <si114x_process_samples+0x508>
    }

    // Use the rollingMax value to determine the baseline level
    if ( rollingMax[proxChannel] != 0 )
    {
        baseline[proxChannel] = rollingMax[proxChannel] + noise_margin;
    2ce6:	e4 0e       	add	r14, r20
    2ce8:	f5 1e       	adc	r15, r21
    2cea:	e0 92 04 26 	sts	0x2604, r14
    2cee:	f0 92 05 26 	sts	0x2605, r15
    2cf2:	e2 ce       	rjmp	.-572    	; 0x2ab8 <si114x_process_samples+0x416>
    2cf4:	24 0f       	add	r18, r20
    2cf6:	35 1f       	adc	r19, r21
    2cf8:	20 93 08 26 	sts	0x2608, r18
    2cfc:	30 93 09 26 	sts	0x2609, r19
    2d00:	ac cf       	rjmp	.-168    	; 0x2c5a <si114x_process_samples+0x5b8>
    2d02:	c4 0e       	add	r12, r20
    2d04:	d5 1e       	adc	r13, r21
    2d06:	c0 92 06 26 	sts	0x2606, r12
    2d0a:	d0 92 07 26 	sts	0x2607, r13
    2d0e:	3d cf       	rjmp	.-390    	; 0x2b8a <si114x_process_samples+0x4e8>
    2d10:	e0 90 99 25 	lds	r14, 0x2599
    2d14:	f0 90 9a 25 	lds	r15, 0x259A
    2d18:	c1 ce       	rjmp	.-638    	; 0x2a9c <si114x_process_samples+0x3fa>
    2d1a:	20 91 9d 25 	lds	r18, 0x259D
    2d1e:	30 91 9e 25 	lds	r19, 0x259E
    2d22:	8d cf       	rjmp	.-230    	; 0x2c3e <si114x_process_samples+0x59c>
    2d24:	c0 90 9b 25 	lds	r12, 0x259B
    2d28:	d0 90 9c 25 	lds	r13, 0x259C
    2d2c:	20 cf       	rjmp	.-448    	; 0x2b6e <si114x_process_samples+0x4cc>
    if ( dynamic_baseline[proxChannel] == 0 && *pPS < maxLeakage[proxChannel] )
    {
       dynamic_baseline[proxChannel] = *pPS;
    } else if ( dynamic_baseline[proxChannel] == 0)
    {
       dynamic_baseline[proxChannel] = maxLeakage[proxChannel];
    2d2e:	80 92 9f 25 	sts	0x259F, r8
    2d32:	90 92 a0 25 	sts	0x25A0, r9
    2d36:	e0 90 99 25 	lds	r14, 0x2599
    2d3a:	f0 90 9a 25 	lds	r15, 0x259A
    2d3e:	b2 ce       	rjmp	.-668    	; 0x2aa4 <si114x_process_samples+0x402>
                    Maxcount[proxChannel] = 0;
                }
            } 
            else
            {
                rollingMax[proxChannel] = *pPS;
    2d40:	c0 92 9b 25 	sts	0x259B, r12
    2d44:	d0 92 9c 25 	sts	0x259C, r13
                Maxcount[proxChannel] = 0;
    2d48:	10 92 97 25 	sts	0x2597, r1
    2d4c:	10 cf       	rjmp	.-480    	; 0x2b6e <si114x_process_samples+0x4cc>
                    Maxcount[proxChannel] = 0;
                }
            } 
            else
            {
                rollingMax[proxChannel] = *pPS;
    2d4e:	e0 92 99 25 	sts	0x2599, r14
    2d52:	f0 92 9a 25 	sts	0x259A, r15
                Maxcount[proxChannel] = 0;
    2d56:	10 92 96 25 	sts	0x2596, r1
    2d5a:	a0 ce       	rjmp	.-704    	; 0x2a9c <si114x_process_samples+0x3fa>
    } 

    // Only process samples which are below the maxLeakage values, anything 
    // higher is a signal created by an object in front of the system which 
    // should not be baselined
    if ( *pPS < maxLeakage[proxChannel] )
    2d5c:	4c 01       	movw	r8, r24
    2d5e:	eb cf       	rjmp	.-42     	; 0x2d36 <si114x_process_samples+0x694>
                Maxcount[proxChannel] = 0;
            } 
            else if ( rollingMax[proxChannel] >= *pPS )
            {
                (Maxcount[proxChannel]) += 1;
                if ( Maxcount[proxChannel] > 64 )
    2d60:	9b 01       	movw	r18, r22
    2d62:	6d cf       	rjmp	.-294    	; 0x2c3e <si114x_process_samples+0x59c>
    2d64:	6c 01       	movw	r12, r24
    2d66:	03 cf       	rjmp	.-506    	; 0x2b6e <si114x_process_samples+0x4cc>
    2d68:	7c 01       	movw	r14, r24
    2d6a:	98 ce       	rjmp	.-720    	; 0x2a9c <si114x_process_samples+0x3fa>

00002d6c <PortSet>:

s16 Si114xBlockRead(HANDLE si114x_handle,
u8 address, u8 length, u8 *values)
{
	return twi_read_packet(&TWIC,SI114X_ADDR,1000,address,values,length);
}
    2d6c:	08 95       	ret

00002d6e <Si114xWriteToRegister>:
    2d6e:	ef 92       	push	r14
    2d70:	0f 93       	push	r16
    2d72:	1f 93       	push	r17
    2d74:	cf 93       	push	r28
    2d76:	df 93       	push	r29
    2d78:	1f 92       	push	r1
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	26 2f       	mov	r18, r22
    2d80:	49 83       	std	Y+1, r20	; 0x01
    2d82:	ee 24       	eor	r14, r14
    2d84:	e3 94       	inc	r14
    2d86:	8e 01       	movw	r16, r28
    2d88:	0f 5f       	subi	r16, 0xFF	; 255
    2d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d8c:	48 ee       	ldi	r20, 0xE8	; 232
    2d8e:	6a e5       	ldi	r22, 0x5A	; 90
    2d90:	80 e8       	ldi	r24, 0x80	; 128
    2d92:	94 e0       	ldi	r25, 0x04	; 4
    2d94:	23 d8       	rcall	.-4026   	; 0x1ddc <twi_write_packet>
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	0f 90       	pop	r0
    2d9c:	df 91       	pop	r29
    2d9e:	cf 91       	pop	r28
    2da0:	1f 91       	pop	r17
    2da2:	0f 91       	pop	r16
    2da4:	ef 90       	pop	r14
    2da6:	08 95       	ret

00002da8 <Si114xReadFromRegister>:
    2da8:	ef 92       	push	r14
    2daa:	0f 93       	push	r16
    2dac:	1f 93       	push	r17
    2dae:	cf 93       	push	r28
    2db0:	df 93       	push	r29
    2db2:	1f 92       	push	r1
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	26 2f       	mov	r18, r22
    2dba:	ee 24       	eor	r14, r14
    2dbc:	e3 94       	inc	r14
    2dbe:	8e 01       	movw	r16, r28
    2dc0:	0f 5f       	subi	r16, 0xFF	; 255
    2dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc4:	48 ee       	ldi	r20, 0xE8	; 232
    2dc6:	6a e5       	ldi	r22, 0x5A	; 90
    2dc8:	80 e8       	ldi	r24, 0x80	; 128
    2dca:	94 e0       	ldi	r25, 0x04	; 4
    2dcc:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <twi_read_packet>
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	0f 90       	pop	r0
    2dd6:	df 91       	pop	r29
    2dd8:	cf 91       	pop	r28
    2dda:	1f 91       	pop	r17
    2ddc:	0f 91       	pop	r16
    2dde:	ef 90       	pop	r14
    2de0:	08 95       	ret

00002de2 <Si114xBlockWrite>:
    2de2:	ef 92       	push	r14
    2de4:	0f 93       	push	r16
    2de6:	1f 93       	push	r17
    2de8:	89 01       	movw	r16, r18
    2dea:	e4 2e       	mov	r14, r20
    2dec:	26 2f       	mov	r18, r22
    2dee:	48 ee       	ldi	r20, 0xE8	; 232
    2df0:	6a e5       	ldi	r22, 0x5A	; 90
    2df2:	80 e8       	ldi	r24, 0x80	; 128
    2df4:	94 e0       	ldi	r25, 0x04	; 4
    2df6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <twi_write_packet>
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	1f 91       	pop	r17
    2dfe:	0f 91       	pop	r16
    2e00:	ef 90       	pop	r14
    2e02:	08 95       	ret

00002e04 <delay_10ms>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2e04:	83 ec       	ldi	r24, 0xC3	; 195
    2e06:	99 e0       	ldi	r25, 0x09	; 9
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <delay_10ms+0x4>
    2e0c:	00 c0       	rjmp	.+0      	; 0x2e0e <delay_10ms+0xa>
    2e0e:	00 00       	nop
    2e10:	08 95       	ret

00002e12 <QS_Counts_to_Distance.constprop.0>:
    {
       // Perform piecewise linear approximation
       indexLinear = 0;
       for (indexLinear = 0; indexLinear < maxIndex; indexLinear++)
       {
           if (counts > piecewise_brackets_2[indexLinear])
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
    2e1a:	e6 97       	sbiw	r28, 0x36	; 54
    2e1c:	cd bf       	out	0x3d, r28	; 61
    2e1e:	de bf       	out	0x3e, r29	; 62
    2e20:	22 e1       	ldi	r18, 0x12	; 18
    2e22:	ec e1       	ldi	r30, 0x1C	; 28
    2e24:	f0 e2       	ldi	r31, 0x20	; 32
    2e26:	de 01       	movw	r26, r28
    2e28:	95 96       	adiw	r26, 0x25	; 37
    2e2a:	01 90       	ld	r0, Z+
    2e2c:	0d 92       	st	X+, r0
    2e2e:	2a 95       	dec	r18
    2e30:	e1 f7       	brne	.-8      	; 0x2e2a <QS_Counts_to_Distance.constprop.0+0x18>
    2e32:	22 e1       	ldi	r18, 0x12	; 18
    2e34:	ee e2       	ldi	r30, 0x2E	; 46
    2e36:	f0 e2       	ldi	r31, 0x20	; 32
    2e38:	de 01       	movw	r26, r28
    2e3a:	53 96       	adiw	r26, 0x13	; 19
    2e3c:	01 90       	ld	r0, Z+
    2e3e:	0d 92       	st	X+, r0
    2e40:	2a 95       	dec	r18
    2e42:	e1 f7       	brne	.-8      	; 0x2e3c <QS_Counts_to_Distance.constprop.0+0x2a>
    2e44:	22 e1       	ldi	r18, 0x12	; 18
    2e46:	e0 e4       	ldi	r30, 0x40	; 64
    2e48:	f0 e2       	ldi	r31, 0x20	; 32
    2e4a:	de 01       	movw	r26, r28
    2e4c:	11 96       	adiw	r26, 0x01	; 1
    2e4e:	01 90       	ld	r0, Z+
    2e50:	0d 92       	st	X+, r0
    2e52:	2a 95       	dec	r18
    2e54:	e1 f7       	brne	.-8      	; 0x2e4e <QS_Counts_to_Distance.constprop.0+0x3c>
    2e56:	29 81       	ldd	r18, Y+1	; 0x01
    2e58:	3a 81       	ldd	r19, Y+2	; 0x02
    2e5a:	28 17       	cp	r18, r24
    2e5c:	39 07       	cpc	r19, r25
    2e5e:	98 f1       	brcs	.+102    	; 0x2ec6 <QS_Counts_to_Distance.constprop.0+0xb4>
    2e60:	2b 81       	ldd	r18, Y+3	; 0x03
    2e62:	3c 81       	ldd	r19, Y+4	; 0x04
    2e64:	28 17       	cp	r18, r24
    2e66:	39 07       	cpc	r19, r25
    2e68:	08 f4       	brcc	.+2      	; 0x2e6c <QS_Counts_to_Distance.constprop.0+0x5a>
    2e6a:	45 c0       	rjmp	.+138    	; 0x2ef6 <QS_Counts_to_Distance.constprop.0+0xe4>
    2e6c:	2d 81       	ldd	r18, Y+5	; 0x05
    2e6e:	3e 81       	ldd	r19, Y+6	; 0x06
    2e70:	28 17       	cp	r18, r24
    2e72:	39 07       	cpc	r19, r25
    2e74:	08 f4       	brcc	.+2      	; 0x2e78 <QS_Counts_to_Distance.constprop.0+0x66>
    2e76:	42 c0       	rjmp	.+132    	; 0x2efc <QS_Counts_to_Distance.constprop.0+0xea>
    2e78:	2f 81       	ldd	r18, Y+7	; 0x07
    2e7a:	38 85       	ldd	r19, Y+8	; 0x08
    2e7c:	28 17       	cp	r18, r24
    2e7e:	39 07       	cpc	r19, r25
    2e80:	08 f4       	brcc	.+2      	; 0x2e84 <QS_Counts_to_Distance.constprop.0+0x72>
    2e82:	3f c0       	rjmp	.+126    	; 0x2f02 <QS_Counts_to_Distance.constprop.0+0xf0>
    2e84:	29 85       	ldd	r18, Y+9	; 0x09
    2e86:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e88:	28 17       	cp	r18, r24
    2e8a:	39 07       	cpc	r19, r25
    2e8c:	e8 f1       	brcs	.+122    	; 0x2f08 <QS_Counts_to_Distance.constprop.0+0xf6>
    2e8e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2e90:	3c 85       	ldd	r19, Y+12	; 0x0c
    2e92:	28 17       	cp	r18, r24
    2e94:	39 07       	cpc	r19, r25
    2e96:	d8 f1       	brcs	.+118    	; 0x2f0e <QS_Counts_to_Distance.constprop.0+0xfc>
    2e98:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e9a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e9c:	28 17       	cp	r18, r24
    2e9e:	39 07       	cpc	r19, r25
    2ea0:	c8 f1       	brcs	.+114    	; 0x2f14 <QS_Counts_to_Distance.constprop.0+0x102>
    2ea2:	2f 85       	ldd	r18, Y+15	; 0x0f
    2ea4:	38 89       	ldd	r19, Y+16	; 0x10
    2ea6:	28 17       	cp	r18, r24
    2ea8:	39 07       	cpc	r19, r25
    2eaa:	b8 f1       	brcs	.+110    	; 0x2f1a <QS_Counts_to_Distance.constprop.0+0x108>
    2eac:	29 89       	ldd	r18, Y+17	; 0x11
    2eae:	3a 89       	ldd	r19, Y+18	; 0x12
    2eb0:	28 17       	cp	r18, r24
    2eb2:	39 07       	cpc	r19, r25
    2eb4:	a8 f1       	brcs	.+106    	; 0x2f20 <QS_Counts_to_Distance.constprop.0+0x10e>
    2eb6:	8a ef       	ldi	r24, 0xFA	; 250
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	e6 96       	adiw	r28, 0x36	; 54
    2ebc:	cd bf       	out	0x3d, r28	; 61
    2ebe:	de bf       	out	0x3e, r29	; 62
    2ec0:	df 91       	pop	r29
    2ec2:	cf 91       	pop	r28
    2ec4:	08 95       	ret
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	f9 01       	movw	r30, r18
    2ecc:	ee 0f       	add	r30, r30
    2ece:	ff 1f       	adc	r31, r31
    2ed0:	21 e0       	ldi	r18, 0x01	; 1
    2ed2:	30 e0       	ldi	r19, 0x00	; 0
    2ed4:	2c 0f       	add	r18, r28
    2ed6:	3d 1f       	adc	r19, r29
    2ed8:	e2 0f       	add	r30, r18
    2eda:	f3 1f       	adc	r31, r19
    2edc:	22 89       	ldd	r18, Z+18	; 0x12
    2ede:	33 89       	ldd	r19, Z+19	; 0x13
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	c4 d2       	rcall	.+1416   	; 0x346c <__umulhisi3>
    2ee4:	24 a1       	ldd	r18, Z+36	; 0x24
    2ee6:	35 a1       	ldd	r19, Z+37	; 0x25
    2ee8:	28 1b       	sub	r18, r24
    2eea:	39 0b       	sbc	r19, r25
    2eec:	2b 3f       	cpi	r18, 0xFB	; 251
    2eee:	31 05       	cpc	r19, r1
    2ef0:	10 f7       	brcc	.-60     	; 0x2eb6 <QS_Counts_to_Distance.constprop.0+0xa4>
    2ef2:	c9 01       	movw	r24, r18
    2ef4:	e2 cf       	rjmp	.-60     	; 0x2eba <QS_Counts_to_Distance.constprop.0+0xa8>
    2ef6:	21 e0       	ldi	r18, 0x01	; 1
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	e7 cf       	rjmp	.-50     	; 0x2eca <QS_Counts_to_Distance.constprop.0+0xb8>
    2efc:	22 e0       	ldi	r18, 0x02	; 2
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	e4 cf       	rjmp	.-56     	; 0x2eca <QS_Counts_to_Distance.constprop.0+0xb8>
    2f02:	23 e0       	ldi	r18, 0x03	; 3
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	e1 cf       	rjmp	.-62     	; 0x2eca <QS_Counts_to_Distance.constprop.0+0xb8>
    2f08:	24 e0       	ldi	r18, 0x04	; 4
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	de cf       	rjmp	.-68     	; 0x2eca <QS_Counts_to_Distance.constprop.0+0xb8>
    2f0e:	25 e0       	ldi	r18, 0x05	; 5
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	db cf       	rjmp	.-74     	; 0x2eca <QS_Counts_to_Distance.constprop.0+0xb8>
    2f14:	26 e0       	ldi	r18, 0x06	; 6
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	d8 cf       	rjmp	.-80     	; 0x2eca <QS_Counts_to_Distance.constprop.0+0xb8>
    2f1a:	27 e0       	ldi	r18, 0x07	; 7
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	d5 cf       	rjmp	.-86     	; 0x2eca <QS_Counts_to_Distance.constprop.0+0xb8>
    2f20:	28 e0       	ldi	r18, 0x08	; 8
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	d2 cf       	rjmp	.-92     	; 0x2eca <QS_Counts_to_Distance.constprop.0+0xb8>

00002f26 <SliderAlgorithm>:
    }
    return (distance.u16[LSB]);
}

void SliderAlgorithm(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples, u16 scale)
{
    2f26:	af 92       	push	r10
    2f28:	bf 92       	push	r11
    2f2a:	cf 92       	push	r12
    2f2c:	df 92       	push	r13
    2f2e:	ef 92       	push	r14
    2f30:	ff 92       	push	r15
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
    2f3a:	8b 01       	movw	r16, r22
    2f3c:	7a 01       	movw	r14, r20
	//My implementation
	static u16 previous_led_x = 0;
	static u16 previous_led_y = 0;

    // QS_GlobalCounterOverflow assumes milliseconds. Samples->timestamp is in 100 us.
    u16 xdata QS_GlobalCounterOverflow = samples->timestamp / 10;
    2f3e:	fb 01       	movw	r30, r22
    2f40:	22 81       	ldd	r18, Z+2	; 0x02
    2f42:	33 81       	ldd	r19, Z+3	; 0x03
    2f44:	ad ec       	ldi	r26, 0xCD	; 205
    2f46:	bc ec       	ldi	r27, 0xCC	; 204
    2f48:	91 d2       	rcall	.+1314   	; 0x346c <__umulhisi3>
    2f4a:	5c 01       	movw	r10, r24
    2f4c:	b6 94       	lsr	r11
    2f4e:	a7 94       	ror	r10
    2f50:	b6 94       	lsr	r11
    2f52:	a7 94       	ror	r10
    2f54:	b6 94       	lsr	r11
    2f56:	a7 94       	ror	r10
    s16 xdata xdiff;
    u8 xdata swipe_speed;

    int xdata ps;

    ps = (u32) samples->ps1 - (u32)baseline[0];
    2f58:	82 85       	ldd	r24, Z+10	; 0x0a
    2f5a:	93 85       	ldd	r25, Z+11	; 0x0b
    2f5c:	20 91 04 26 	lds	r18, 0x2604
    2f60:	30 91 05 26 	lds	r19, 0x2605
    2f64:	82 1b       	sub	r24, r18
    2f66:	93 0b       	sbc	r25, r19
    2f68:	97 fd       	sbrc	r25, 7
    2f6a:	99 c0       	rjmp	.+306    	; 0x309e <__stack+0x9f>
    ps *= scale;

    // Raw IR sensor 0 and 1 are stored in channels 4 and 5
    // ALS is stored in channel 6
    // Calculate r1 and r2 distances; store in channels 0 and 1
    r1 = QS_Counts_to_Distance ((u16)ps, 1);
    2f6c:	9c 01       	movw	r18, r24
    2f6e:	2e 9d       	mul	r18, r14
    2f70:	c0 01       	movw	r24, r0
    2f72:	2f 9d       	mul	r18, r15
    2f74:	90 0d       	add	r25, r0
    2f76:	3e 9d       	mul	r19, r14
    2f78:	90 0d       	add	r25, r0
    2f7a:	11 24       	eor	r1, r1
    2f7c:	4a df       	rcall	.-364    	; 0x2e12 <QS_Counts_to_Distance.constprop.0>
    2f7e:	ec 01       	movw	r28, r24
	
	//printf("r1 = %d , counts = %d \r\n",r1,(u16)ps);

    ps = (u32) samples->ps2 - (u32)baseline[1];
    2f80:	f8 01       	movw	r30, r16
    2f82:	84 85       	ldd	r24, Z+12	; 0x0c
    2f84:	95 85       	ldd	r25, Z+13	; 0x0d
    2f86:	20 91 06 26 	lds	r18, 0x2606
    2f8a:	30 91 07 26 	lds	r19, 0x2607
    2f8e:	82 1b       	sub	r24, r18
    2f90:	93 0b       	sbc	r25, r19
    2f92:	97 fd       	sbrc	r25, 7
    2f94:	81 c0       	rjmp	.+258    	; 0x3098 <__stack+0x99>
    if (ps < 0) ps = 0;

    // Scale it
    ps *= (u32)scale;

    r2 = QS_Counts_to_Distance ((u16)ps, 1);
    2f96:	9c 01       	movw	r18, r24
    2f98:	2e 9d       	mul	r18, r14
    2f9a:	c0 01       	movw	r24, r0
    2f9c:	2f 9d       	mul	r18, r15
    2f9e:	90 0d       	add	r25, r0
    2fa0:	3e 9d       	mul	r19, r14
    2fa2:	90 0d       	add	r25, r0
    2fa4:	11 24       	eor	r1, r1
    2fa6:	35 df       	rcall	.-406    	; 0x2e12 <QS_Counts_to_Distance.constprop.0>
    2fa8:	8c 01       	movw	r16, r24
   ////////////////////////////////////////////////////////////////////////////
   // Position calculation and swipe gesture detection

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
    2faa:	9e 01       	movw	r18, r28
    2fac:	de 01       	movw	r26, r28
    2fae:	5e d2       	rcall	.+1212   	; 0x346c <__umulhisi3>
    2fb0:	6b 01       	movw	r12, r22
    2fb2:	7c 01       	movw	r14, r24
   x.u32 = x.u32 + 33000;
    2fb4:	38 ee       	ldi	r19, 0xE8	; 232
    2fb6:	c3 0e       	add	r12, r19
    2fb8:	30 e8       	ldi	r19, 0x80	; 128
    2fba:	d3 1e       	adc	r13, r19
    2fbc:	e1 1c       	adc	r14, r1
    2fbe:	f1 1c       	adc	r15, r1
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    2fc0:	98 01       	movw	r18, r16
    2fc2:	d8 01       	movw	r26, r16
    2fc4:	53 d2       	rcall	.+1190   	; 0x346c <__umulhisi3>
    2fc6:	c6 1a       	sub	r12, r22
    2fc8:	d7 0a       	sbc	r13, r23
    2fca:	e8 0a       	sbc	r14, r24
    2fcc:	f9 0a       	sbc	r15, r25
   if (x.s32 < 0)
    2fce:	f7 fc       	sbrc	r15, 7
    2fd0:	5e c0       	rjmp	.+188    	; 0x308e <__stack+0x8f>

   // Calculate x
   //x = (r1^2 - r2^2 + d^2) / (2 * d) + offset
   x.u32 = (u32)r1 * (u32)r1;
   x.u32 = x.u32 + 33000;
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
    2fd2:	b6 01       	movw	r22, r12
    2fd4:	c7 01       	movw	r24, r14
   if (x.s32 < 0)
   {
     x.s32 = 0;
   }
   x.u32 = x.u32 / 60;
    2fd6:	2c e3       	ldi	r18, 0x3C	; 60
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e0       	ldi	r20, 0x00	; 0
    2fdc:	50 e0       	ldi	r21, 0x00	; 0
    2fde:	24 d2       	rcall	.+1096   	; 0x3428 <__udivmodsi4>
    2fe0:	2e 34       	cpi	r18, 0x4E	; 78
    2fe2:	84 e0       	ldi	r24, 0x04	; 4
    2fe4:	38 07       	cpc	r19, r24
    2fe6:	10 f0       	brcs	.+4      	; 0x2fec <SliderAlgorithm+0xc6>
    2fe8:	2d e4       	ldi	r18, 0x4D	; 77
    2fea:	34 e0       	ldi	r19, 0x04	; 4
   
   // Determine "z" and recognize whether "swipe" type gesture has occured
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
   {
      // check for end of swipe
      if (out_of_range == 0)
    2fec:	80 91 1b 20 	lds	r24, 0x201B
	   y.u16[LSB] = 1101;
   }

   
   // Determine "z" and recognize whether "swipe" type gesture has occured
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
    2ff0:	c1 3f       	cpi	r28, 0xF1	; 241
    2ff2:	d1 05       	cpc	r29, r1
    2ff4:	18 f4       	brcc	.+6      	; 0x2ffc <SliderAlgorithm+0xd6>
    2ff6:	01 3f       	cpi	r16, 0xF1	; 241
    2ff8:	11 05       	cpc	r17, r1
    2ffa:	98 f1       	brcs	.+102    	; 0x3062 <__stack+0x63>
   {
      // check for end of swipe
      if (out_of_range == 0)
    2ffc:	88 23       	and	r24, r24
    2ffe:	f1 f0       	breq	.+60     	; 0x303c <__stack+0x3d>
    3000:	80 91 b5 25 	lds	r24, 0x25B5
    3004:	90 91 b6 25 	lds	r25, 0x25B6
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
            xdiff = (s16)xenter-(s16)xexit;
        }
      }
      out_of_range = 1;
    3008:	21 e0       	ldi	r18, 0x01	; 1
    300a:	20 93 1b 20 	sts	0x201B, r18
      if (xexit > 550)
    300e:	87 32       	cpi	r24, 0x27	; 39
    3010:	92 40       	sbci	r25, 0x02	; 2
    3012:	20 f5       	brcc	.+72     	; 0x305c <__stack+0x5d>
    3014:	6f e0       	ldi	r22, 0x0F	; 15
    3016:	70 e0       	ldi	r23, 0x00	; 0
      else
      {
        x.u16[LSB] = 0;
      }
      z = MAX_RADIUS;
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
    3018:	a0 92 af 25 	sts	0x25AF, r10
    301c:	b0 92 b0 25 	sts	0x25B0, r11
   previous_led_y = tmp_y;
   */
   //printf("z:%d\r\n",z);
   int16_t tmp_x = 15-((x.u16[LSB])/30);
   
	ht1632c_motion_print("Erlend",tmp_x);
    3020:	8e e6       	ldi	r24, 0x6E	; 110
    3022:	91 e2       	ldi	r25, 0x21	; 33
       //REPLACE_0_PS3( 0 );
       //REPLACE_0_AUX( 0 ); 
	    //printf("no touch \r\n");
   }
   */
}
    3024:	df 91       	pop	r29
    3026:	cf 91       	pop	r28
    3028:	1f 91       	pop	r17
    302a:	0f 91       	pop	r16
    302c:	ff 90       	pop	r15
    302e:	ef 90       	pop	r14
    3030:	df 90       	pop	r13
    3032:	cf 90       	pop	r12
    3034:	bf 90       	pop	r11
    3036:	af 90       	pop	r10
   previous_led_y = tmp_y;
   */
   //printf("z:%d\r\n",z);
   int16_t tmp_x = 15-((x.u16[LSB])/30);
   
	ht1632c_motion_print("Erlend",tmp_x);
    3038:	0c 94 be 0b 	jmp	0x177c	; 0x177c <ht1632c_motion_print>
   if ((r1 > MAX_RADIUS) || (r2 > MAX_RADIUS))
   {
      // check for end of swipe
      if (out_of_range == 0)
      {
        xexit = xlast;
    303c:	30 91 b7 25 	lds	r19, 0x25B7
    3040:	20 91 b8 25 	lds	r18, 0x25B8
    3044:	30 93 b5 25 	sts	0x25B5, r19
    3048:	20 93 b6 25 	sts	0x25B6, r18
    304c:	83 2f       	mov	r24, r19
    304e:	92 2f       	mov	r25, r18
            swipe_detect = 1;   // indicate that a swipe was detected
            swipe_speed = SWIPE_TIMEOUT-(QS_GlobalCounterOverflow-SwipeStartTime);
            xdiff = (s16)xenter-(s16)xexit;
        }
      }
      out_of_range = 1;
    3050:	21 e0       	ldi	r18, 0x01	; 1
    3052:	20 93 1b 20 	sts	0x201B, r18
      if (xexit > 550)
    3056:	87 32       	cpi	r24, 0x27	; 39
    3058:	92 40       	sbci	r25, 0x02	; 2
    305a:	e0 f2       	brcs	.-72     	; 0x3014 <__stack+0x15>
    305c:	6b ee       	ldi	r22, 0xEB	; 235
    305e:	7f ef       	ldi	r23, 0xFF	; 255
    3060:	db cf       	rjmp	.-74     	; 0x3018 <__stack+0x19>
      Pause_gesture_timeout = QS_GlobalCounterOverflow;
   }
   else
   {
      // check for start of swipe
      if (out_of_range == 1)
    3062:	81 30       	cpi	r24, 0x01	; 1
    3064:	f9 f0       	breq	.+62     	; 0x30a4 <__stack+0xa5>
      {
        xenter = x.u16[LSB];
        SwipeStartTime = QS_GlobalCounterOverflow;
      }
      out_of_range = 0;
    3066:	10 92 1b 20 	sts	0x201B, r1

      xlast = x.u16[LSB];
    306a:	20 93 b7 25 	sts	0x25B7, r18
    306e:	30 93 b8 25 	sts	0x25B8, r19
    3072:	a9 e8       	ldi	r26, 0x89	; 137
    3074:	b8 e8       	ldi	r27, 0x88	; 136
    3076:	fa d1       	rcall	.+1012   	; 0x346c <__umulhisi3>
    3078:	92 95       	swap	r25
    307a:	82 95       	swap	r24
    307c:	8f 70       	andi	r24, 0x0F	; 15
    307e:	89 27       	eor	r24, r25
    3080:	9f 70       	andi	r25, 0x0F	; 15
    3082:	89 27       	eor	r24, r25
    3084:	6f e0       	ldi	r22, 0x0F	; 15
    3086:	70 e0       	ldi	r23, 0x00	; 0
    3088:	68 1b       	sub	r22, r24
    308a:	79 0b       	sbc	r23, r25
    308c:	c9 cf       	rjmp	.-110    	; 0x3020 <__stack+0x21>
   x.u32 = (u32)r1 * (u32)r1;
   x.u32 = x.u32 + 33000;
   x.s32 = x.u32 - ((u32)r2 * (u32)r2);
   if (x.s32 < 0)
   {
     x.s32 = 0;
    308e:	60 e0       	ldi	r22, 0x00	; 0
    3090:	70 e0       	ldi	r23, 0x00	; 0
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	9f cf       	rjmp	.-194    	; 0x2fd6 <SliderAlgorithm+0xb0>
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	7c cf       	rjmp	.-264    	; 0x2f96 <SliderAlgorithm+0x70>
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	64 cf       	rjmp	.-312    	; 0x2f6c <SliderAlgorithm+0x46>
   else
   {
      // check for start of swipe
      if (out_of_range == 1)
      {
        xenter = x.u16[LSB];
    30a4:	20 93 b1 25 	sts	0x25B1, r18
    30a8:	30 93 b2 25 	sts	0x25B2, r19
        SwipeStartTime = QS_GlobalCounterOverflow;
    30ac:	a0 92 b3 25 	sts	0x25B3, r10
    30b0:	b0 92 b4 25 	sts	0x25B4, r11
    30b4:	d8 cf       	rjmp	.-80     	; 0x3066 <__stack+0x67>

000030b6 <uart_setup>:
#include <avr/io.h>
#include <util/delay.h>

void uart_setup(void) {
	
	PORTD.DIRSET = PIN3_bm; //TX
    30b6:	e0 e6       	ldi	r30, 0x60	; 96
    30b8:	f6 e0       	ldi	r31, 0x06	; 6
    30ba:	88 e0       	ldi	r24, 0x08	; 8
    30bc:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm; //RX
    30be:	84 e0       	ldi	r24, 0x04	; 4
    30c0:	82 83       	std	Z+2, r24	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc;
    30c2:	e0 ea       	ldi	r30, 0xA0	; 160
    30c4:	f9 e0       	ldi	r31, 0x09	; 9
    30c6:	80 e2       	ldi	r24, 0x20	; 32
    30c8:	83 83       	std	Z+3, r24	; 0x03
	USARTD0.BAUDCTRLA = 207;//0x1111;
    30ca:	8f ec       	ldi	r24, 0xCF	; 207
    30cc:	86 83       	std	Z+6, r24	; 0x06
	//USARTE0.BAUDCTRLB = (33 << 4);
	USARTD0.CTRLC = USART_CHSIZE_8BIT_gc;
    30ce:	83 e0       	ldi	r24, 0x03	; 3
    30d0:	85 83       	std	Z+5, r24	; 0x05

	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    30d2:	88 e1       	ldi	r24, 0x18	; 24
    30d4:	84 83       	std	Z+4, r24	; 0x04
    30d6:	08 95       	ret

000030d8 <uart_put_char>:
}

void uart_put_char(char c) {
	while (!(USARTD0.STATUS & USART_DREIF_bm)){}
    30d8:	90 91 a1 09 	lds	r25, 0x09A1
    30dc:	95 ff       	sbrs	r25, 5
    30de:	fc cf       	rjmp	.-8      	; 0x30d8 <uart_put_char>
	USARTD0.DATA = c;
    30e0:	80 93 a0 09 	sts	0x09A0, r24
    30e4:	08 95       	ret

000030e6 <uart_get_char>:
}

char uart_get_char(void) {
	while (!(USARTD0.STATUS & USART_RXCIF_bm));
    30e6:	80 91 a1 09 	lds	r24, 0x09A1
    30ea:	87 ff       	sbrs	r24, 7
    30ec:	fc cf       	rjmp	.-8      	; 0x30e6 <uart_get_char>
	return USARTD0.DATA;
    30ee:	80 91 a0 09 	lds	r24, 0x09A0
}
    30f2:	08 95       	ret

000030f4 <__subsf3>:
    30f4:	50 58       	subi	r21, 0x80	; 128

000030f6 <__addsf3>:
    30f6:	bb 27       	eor	r27, r27
    30f8:	aa 27       	eor	r26, r26
    30fa:	0e d0       	rcall	.+28     	; 0x3118 <__addsf3x>
    30fc:	e5 c0       	rjmp	.+458    	; 0x32c8 <__fp_round>
    30fe:	d6 d0       	rcall	.+428    	; 0x32ac <__fp_pscA>
    3100:	30 f0       	brcs	.+12     	; 0x310e <__addsf3+0x18>
    3102:	db d0       	rcall	.+438    	; 0x32ba <__fp_pscB>
    3104:	20 f0       	brcs	.+8      	; 0x310e <__addsf3+0x18>
    3106:	31 f4       	brne	.+12     	; 0x3114 <__addsf3+0x1e>
    3108:	9f 3f       	cpi	r25, 0xFF	; 255
    310a:	11 f4       	brne	.+4      	; 0x3110 <__addsf3+0x1a>
    310c:	1e f4       	brtc	.+6      	; 0x3114 <__addsf3+0x1e>
    310e:	cb c0       	rjmp	.+406    	; 0x32a6 <__fp_nan>
    3110:	0e f4       	brtc	.+2      	; 0x3114 <__addsf3+0x1e>
    3112:	e0 95       	com	r30
    3114:	e7 fb       	bst	r30, 7
    3116:	c1 c0       	rjmp	.+386    	; 0x329a <__fp_inf>

00003118 <__addsf3x>:
    3118:	e9 2f       	mov	r30, r25
    311a:	e7 d0       	rcall	.+462    	; 0x32ea <__fp_split3>
    311c:	80 f3       	brcs	.-32     	; 0x30fe <__addsf3+0x8>
    311e:	ba 17       	cp	r27, r26
    3120:	62 07       	cpc	r22, r18
    3122:	73 07       	cpc	r23, r19
    3124:	84 07       	cpc	r24, r20
    3126:	95 07       	cpc	r25, r21
    3128:	18 f0       	brcs	.+6      	; 0x3130 <__addsf3x+0x18>
    312a:	71 f4       	brne	.+28     	; 0x3148 <__addsf3x+0x30>
    312c:	9e f5       	brtc	.+102    	; 0x3194 <__addsf3x+0x7c>
    312e:	ff c0       	rjmp	.+510    	; 0x332e <__fp_zero>
    3130:	0e f4       	brtc	.+2      	; 0x3134 <__addsf3x+0x1c>
    3132:	e0 95       	com	r30
    3134:	0b 2e       	mov	r0, r27
    3136:	ba 2f       	mov	r27, r26
    3138:	a0 2d       	mov	r26, r0
    313a:	0b 01       	movw	r0, r22
    313c:	b9 01       	movw	r22, r18
    313e:	90 01       	movw	r18, r0
    3140:	0c 01       	movw	r0, r24
    3142:	ca 01       	movw	r24, r20
    3144:	a0 01       	movw	r20, r0
    3146:	11 24       	eor	r1, r1
    3148:	ff 27       	eor	r31, r31
    314a:	59 1b       	sub	r21, r25
    314c:	99 f0       	breq	.+38     	; 0x3174 <__addsf3x+0x5c>
    314e:	59 3f       	cpi	r21, 0xF9	; 249
    3150:	50 f4       	brcc	.+20     	; 0x3166 <__addsf3x+0x4e>
    3152:	50 3e       	cpi	r21, 0xE0	; 224
    3154:	68 f1       	brcs	.+90     	; 0x31b0 <__addsf3x+0x98>
    3156:	1a 16       	cp	r1, r26
    3158:	f0 40       	sbci	r31, 0x00	; 0
    315a:	a2 2f       	mov	r26, r18
    315c:	23 2f       	mov	r18, r19
    315e:	34 2f       	mov	r19, r20
    3160:	44 27       	eor	r20, r20
    3162:	58 5f       	subi	r21, 0xF8	; 248
    3164:	f3 cf       	rjmp	.-26     	; 0x314c <__addsf3x+0x34>
    3166:	46 95       	lsr	r20
    3168:	37 95       	ror	r19
    316a:	27 95       	ror	r18
    316c:	a7 95       	ror	r26
    316e:	f0 40       	sbci	r31, 0x00	; 0
    3170:	53 95       	inc	r21
    3172:	c9 f7       	brne	.-14     	; 0x3166 <__addsf3x+0x4e>
    3174:	7e f4       	brtc	.+30     	; 0x3194 <__addsf3x+0x7c>
    3176:	1f 16       	cp	r1, r31
    3178:	ba 0b       	sbc	r27, r26
    317a:	62 0b       	sbc	r22, r18
    317c:	73 0b       	sbc	r23, r19
    317e:	84 0b       	sbc	r24, r20
    3180:	ba f0       	brmi	.+46     	; 0x31b0 <__addsf3x+0x98>
    3182:	91 50       	subi	r25, 0x01	; 1
    3184:	a1 f0       	breq	.+40     	; 0x31ae <__addsf3x+0x96>
    3186:	ff 0f       	add	r31, r31
    3188:	bb 1f       	adc	r27, r27
    318a:	66 1f       	adc	r22, r22
    318c:	77 1f       	adc	r23, r23
    318e:	88 1f       	adc	r24, r24
    3190:	c2 f7       	brpl	.-16     	; 0x3182 <__addsf3x+0x6a>
    3192:	0e c0       	rjmp	.+28     	; 0x31b0 <__addsf3x+0x98>
    3194:	ba 0f       	add	r27, r26
    3196:	62 1f       	adc	r22, r18
    3198:	73 1f       	adc	r23, r19
    319a:	84 1f       	adc	r24, r20
    319c:	48 f4       	brcc	.+18     	; 0x31b0 <__addsf3x+0x98>
    319e:	87 95       	ror	r24
    31a0:	77 95       	ror	r23
    31a2:	67 95       	ror	r22
    31a4:	b7 95       	ror	r27
    31a6:	f7 95       	ror	r31
    31a8:	9e 3f       	cpi	r25, 0xFE	; 254
    31aa:	08 f0       	brcs	.+2      	; 0x31ae <__addsf3x+0x96>
    31ac:	b3 cf       	rjmp	.-154    	; 0x3114 <__addsf3+0x1e>
    31ae:	93 95       	inc	r25
    31b0:	88 0f       	add	r24, r24
    31b2:	08 f0       	brcs	.+2      	; 0x31b6 <__addsf3x+0x9e>
    31b4:	99 27       	eor	r25, r25
    31b6:	ee 0f       	add	r30, r30
    31b8:	97 95       	ror	r25
    31ba:	87 95       	ror	r24
    31bc:	08 95       	ret

000031be <__fixsfsi>:
    31be:	04 d0       	rcall	.+8      	; 0x31c8 <__fixunssfsi>
    31c0:	68 94       	set
    31c2:	b1 11       	cpse	r27, r1
    31c4:	b5 c0       	rjmp	.+362    	; 0x3330 <__fp_szero>
    31c6:	08 95       	ret

000031c8 <__fixunssfsi>:
    31c8:	98 d0       	rcall	.+304    	; 0x32fa <__fp_splitA>
    31ca:	88 f0       	brcs	.+34     	; 0x31ee <__fixunssfsi+0x26>
    31cc:	9f 57       	subi	r25, 0x7F	; 127
    31ce:	90 f0       	brcs	.+36     	; 0x31f4 <__fixunssfsi+0x2c>
    31d0:	b9 2f       	mov	r27, r25
    31d2:	99 27       	eor	r25, r25
    31d4:	b7 51       	subi	r27, 0x17	; 23
    31d6:	a0 f0       	brcs	.+40     	; 0x3200 <__fixunssfsi+0x38>
    31d8:	d1 f0       	breq	.+52     	; 0x320e <__fixunssfsi+0x46>
    31da:	66 0f       	add	r22, r22
    31dc:	77 1f       	adc	r23, r23
    31de:	88 1f       	adc	r24, r24
    31e0:	99 1f       	adc	r25, r25
    31e2:	1a f0       	brmi	.+6      	; 0x31ea <__fixunssfsi+0x22>
    31e4:	ba 95       	dec	r27
    31e6:	c9 f7       	brne	.-14     	; 0x31da <__fixunssfsi+0x12>
    31e8:	12 c0       	rjmp	.+36     	; 0x320e <__fixunssfsi+0x46>
    31ea:	b1 30       	cpi	r27, 0x01	; 1
    31ec:	81 f0       	breq	.+32     	; 0x320e <__fixunssfsi+0x46>
    31ee:	9f d0       	rcall	.+318    	; 0x332e <__fp_zero>
    31f0:	b1 e0       	ldi	r27, 0x01	; 1
    31f2:	08 95       	ret
    31f4:	9c c0       	rjmp	.+312    	; 0x332e <__fp_zero>
    31f6:	67 2f       	mov	r22, r23
    31f8:	78 2f       	mov	r23, r24
    31fa:	88 27       	eor	r24, r24
    31fc:	b8 5f       	subi	r27, 0xF8	; 248
    31fe:	39 f0       	breq	.+14     	; 0x320e <__fixunssfsi+0x46>
    3200:	b9 3f       	cpi	r27, 0xF9	; 249
    3202:	cc f3       	brlt	.-14     	; 0x31f6 <__fixunssfsi+0x2e>
    3204:	86 95       	lsr	r24
    3206:	77 95       	ror	r23
    3208:	67 95       	ror	r22
    320a:	b3 95       	inc	r27
    320c:	d9 f7       	brne	.-10     	; 0x3204 <__fixunssfsi+0x3c>
    320e:	3e f4       	brtc	.+14     	; 0x321e <__fixunssfsi+0x56>
    3210:	90 95       	com	r25
    3212:	80 95       	com	r24
    3214:	70 95       	com	r23
    3216:	61 95       	neg	r22
    3218:	7f 4f       	sbci	r23, 0xFF	; 255
    321a:	8f 4f       	sbci	r24, 0xFF	; 255
    321c:	9f 4f       	sbci	r25, 0xFF	; 255
    321e:	08 95       	ret

00003220 <__floatunsisf>:
    3220:	e8 94       	clt
    3222:	09 c0       	rjmp	.+18     	; 0x3236 <__floatsisf+0x12>

00003224 <__floatsisf>:
    3224:	97 fb       	bst	r25, 7
    3226:	3e f4       	brtc	.+14     	; 0x3236 <__floatsisf+0x12>
    3228:	90 95       	com	r25
    322a:	80 95       	com	r24
    322c:	70 95       	com	r23
    322e:	61 95       	neg	r22
    3230:	7f 4f       	sbci	r23, 0xFF	; 255
    3232:	8f 4f       	sbci	r24, 0xFF	; 255
    3234:	9f 4f       	sbci	r25, 0xFF	; 255
    3236:	99 23       	and	r25, r25
    3238:	a9 f0       	breq	.+42     	; 0x3264 <__floatsisf+0x40>
    323a:	f9 2f       	mov	r31, r25
    323c:	96 e9       	ldi	r25, 0x96	; 150
    323e:	bb 27       	eor	r27, r27
    3240:	93 95       	inc	r25
    3242:	f6 95       	lsr	r31
    3244:	87 95       	ror	r24
    3246:	77 95       	ror	r23
    3248:	67 95       	ror	r22
    324a:	b7 95       	ror	r27
    324c:	f1 11       	cpse	r31, r1
    324e:	f8 cf       	rjmp	.-16     	; 0x3240 <__floatsisf+0x1c>
    3250:	fa f4       	brpl	.+62     	; 0x3290 <__floatsisf+0x6c>
    3252:	bb 0f       	add	r27, r27
    3254:	11 f4       	brne	.+4      	; 0x325a <__floatsisf+0x36>
    3256:	60 ff       	sbrs	r22, 0
    3258:	1b c0       	rjmp	.+54     	; 0x3290 <__floatsisf+0x6c>
    325a:	6f 5f       	subi	r22, 0xFF	; 255
    325c:	7f 4f       	sbci	r23, 0xFF	; 255
    325e:	8f 4f       	sbci	r24, 0xFF	; 255
    3260:	9f 4f       	sbci	r25, 0xFF	; 255
    3262:	16 c0       	rjmp	.+44     	; 0x3290 <__floatsisf+0x6c>
    3264:	88 23       	and	r24, r24
    3266:	11 f0       	breq	.+4      	; 0x326c <__floatsisf+0x48>
    3268:	96 e9       	ldi	r25, 0x96	; 150
    326a:	11 c0       	rjmp	.+34     	; 0x328e <__floatsisf+0x6a>
    326c:	77 23       	and	r23, r23
    326e:	21 f0       	breq	.+8      	; 0x3278 <__floatsisf+0x54>
    3270:	9e e8       	ldi	r25, 0x8E	; 142
    3272:	87 2f       	mov	r24, r23
    3274:	76 2f       	mov	r23, r22
    3276:	05 c0       	rjmp	.+10     	; 0x3282 <__floatsisf+0x5e>
    3278:	66 23       	and	r22, r22
    327a:	71 f0       	breq	.+28     	; 0x3298 <__floatsisf+0x74>
    327c:	96 e8       	ldi	r25, 0x86	; 134
    327e:	86 2f       	mov	r24, r22
    3280:	70 e0       	ldi	r23, 0x00	; 0
    3282:	60 e0       	ldi	r22, 0x00	; 0
    3284:	2a f0       	brmi	.+10     	; 0x3290 <__floatsisf+0x6c>
    3286:	9a 95       	dec	r25
    3288:	66 0f       	add	r22, r22
    328a:	77 1f       	adc	r23, r23
    328c:	88 1f       	adc	r24, r24
    328e:	da f7       	brpl	.-10     	; 0x3286 <__floatsisf+0x62>
    3290:	88 0f       	add	r24, r24
    3292:	96 95       	lsr	r25
    3294:	87 95       	ror	r24
    3296:	97 f9       	bld	r25, 7
    3298:	08 95       	ret

0000329a <__fp_inf>:
    329a:	97 f9       	bld	r25, 7
    329c:	9f 67       	ori	r25, 0x7F	; 127
    329e:	80 e8       	ldi	r24, 0x80	; 128
    32a0:	70 e0       	ldi	r23, 0x00	; 0
    32a2:	60 e0       	ldi	r22, 0x00	; 0
    32a4:	08 95       	ret

000032a6 <__fp_nan>:
    32a6:	9f ef       	ldi	r25, 0xFF	; 255
    32a8:	80 ec       	ldi	r24, 0xC0	; 192
    32aa:	08 95       	ret

000032ac <__fp_pscA>:
    32ac:	00 24       	eor	r0, r0
    32ae:	0a 94       	dec	r0
    32b0:	16 16       	cp	r1, r22
    32b2:	17 06       	cpc	r1, r23
    32b4:	18 06       	cpc	r1, r24
    32b6:	09 06       	cpc	r0, r25
    32b8:	08 95       	ret

000032ba <__fp_pscB>:
    32ba:	00 24       	eor	r0, r0
    32bc:	0a 94       	dec	r0
    32be:	12 16       	cp	r1, r18
    32c0:	13 06       	cpc	r1, r19
    32c2:	14 06       	cpc	r1, r20
    32c4:	05 06       	cpc	r0, r21
    32c6:	08 95       	ret

000032c8 <__fp_round>:
    32c8:	09 2e       	mov	r0, r25
    32ca:	03 94       	inc	r0
    32cc:	00 0c       	add	r0, r0
    32ce:	11 f4       	brne	.+4      	; 0x32d4 <__fp_round+0xc>
    32d0:	88 23       	and	r24, r24
    32d2:	52 f0       	brmi	.+20     	; 0x32e8 <__fp_round+0x20>
    32d4:	bb 0f       	add	r27, r27
    32d6:	40 f4       	brcc	.+16     	; 0x32e8 <__fp_round+0x20>
    32d8:	bf 2b       	or	r27, r31
    32da:	11 f4       	brne	.+4      	; 0x32e0 <__fp_round+0x18>
    32dc:	60 ff       	sbrs	r22, 0
    32de:	04 c0       	rjmp	.+8      	; 0x32e8 <__fp_round+0x20>
    32e0:	6f 5f       	subi	r22, 0xFF	; 255
    32e2:	7f 4f       	sbci	r23, 0xFF	; 255
    32e4:	8f 4f       	sbci	r24, 0xFF	; 255
    32e6:	9f 4f       	sbci	r25, 0xFF	; 255
    32e8:	08 95       	ret

000032ea <__fp_split3>:
    32ea:	57 fd       	sbrc	r21, 7
    32ec:	90 58       	subi	r25, 0x80	; 128
    32ee:	44 0f       	add	r20, r20
    32f0:	55 1f       	adc	r21, r21
    32f2:	59 f0       	breq	.+22     	; 0x330a <__fp_splitA+0x10>
    32f4:	5f 3f       	cpi	r21, 0xFF	; 255
    32f6:	71 f0       	breq	.+28     	; 0x3314 <__fp_splitA+0x1a>
    32f8:	47 95       	ror	r20

000032fa <__fp_splitA>:
    32fa:	88 0f       	add	r24, r24
    32fc:	97 fb       	bst	r25, 7
    32fe:	99 1f       	adc	r25, r25
    3300:	61 f0       	breq	.+24     	; 0x331a <__fp_splitA+0x20>
    3302:	9f 3f       	cpi	r25, 0xFF	; 255
    3304:	79 f0       	breq	.+30     	; 0x3324 <__fp_splitA+0x2a>
    3306:	87 95       	ror	r24
    3308:	08 95       	ret
    330a:	12 16       	cp	r1, r18
    330c:	13 06       	cpc	r1, r19
    330e:	14 06       	cpc	r1, r20
    3310:	55 1f       	adc	r21, r21
    3312:	f2 cf       	rjmp	.-28     	; 0x32f8 <__fp_split3+0xe>
    3314:	46 95       	lsr	r20
    3316:	f1 df       	rcall	.-30     	; 0x32fa <__fp_splitA>
    3318:	08 c0       	rjmp	.+16     	; 0x332a <__fp_splitA+0x30>
    331a:	16 16       	cp	r1, r22
    331c:	17 06       	cpc	r1, r23
    331e:	18 06       	cpc	r1, r24
    3320:	99 1f       	adc	r25, r25
    3322:	f1 cf       	rjmp	.-30     	; 0x3306 <__fp_splitA+0xc>
    3324:	86 95       	lsr	r24
    3326:	71 05       	cpc	r23, r1
    3328:	61 05       	cpc	r22, r1
    332a:	08 94       	sec
    332c:	08 95       	ret

0000332e <__fp_zero>:
    332e:	e8 94       	clt

00003330 <__fp_szero>:
    3330:	bb 27       	eor	r27, r27
    3332:	66 27       	eor	r22, r22
    3334:	77 27       	eor	r23, r23
    3336:	cb 01       	movw	r24, r22
    3338:	97 f9       	bld	r25, 7
    333a:	08 95       	ret

0000333c <__mulsf3>:
    333c:	0b d0       	rcall	.+22     	; 0x3354 <__mulsf3x>
    333e:	c4 cf       	rjmp	.-120    	; 0x32c8 <__fp_round>
    3340:	b5 df       	rcall	.-150    	; 0x32ac <__fp_pscA>
    3342:	28 f0       	brcs	.+10     	; 0x334e <__mulsf3+0x12>
    3344:	ba df       	rcall	.-140    	; 0x32ba <__fp_pscB>
    3346:	18 f0       	brcs	.+6      	; 0x334e <__mulsf3+0x12>
    3348:	95 23       	and	r25, r21
    334a:	09 f0       	breq	.+2      	; 0x334e <__mulsf3+0x12>
    334c:	a6 cf       	rjmp	.-180    	; 0x329a <__fp_inf>
    334e:	ab cf       	rjmp	.-170    	; 0x32a6 <__fp_nan>
    3350:	11 24       	eor	r1, r1
    3352:	ee cf       	rjmp	.-36     	; 0x3330 <__fp_szero>

00003354 <__mulsf3x>:
    3354:	ca df       	rcall	.-108    	; 0x32ea <__fp_split3>
    3356:	a0 f3       	brcs	.-24     	; 0x3340 <__mulsf3+0x4>

00003358 <__mulsf3_pse>:
    3358:	95 9f       	mul	r25, r21
    335a:	d1 f3       	breq	.-12     	; 0x3350 <__mulsf3+0x14>
    335c:	95 0f       	add	r25, r21
    335e:	50 e0       	ldi	r21, 0x00	; 0
    3360:	55 1f       	adc	r21, r21
    3362:	62 9f       	mul	r22, r18
    3364:	f0 01       	movw	r30, r0
    3366:	72 9f       	mul	r23, r18
    3368:	bb 27       	eor	r27, r27
    336a:	f0 0d       	add	r31, r0
    336c:	b1 1d       	adc	r27, r1
    336e:	63 9f       	mul	r22, r19
    3370:	aa 27       	eor	r26, r26
    3372:	f0 0d       	add	r31, r0
    3374:	b1 1d       	adc	r27, r1
    3376:	aa 1f       	adc	r26, r26
    3378:	64 9f       	mul	r22, r20
    337a:	66 27       	eor	r22, r22
    337c:	b0 0d       	add	r27, r0
    337e:	a1 1d       	adc	r26, r1
    3380:	66 1f       	adc	r22, r22
    3382:	82 9f       	mul	r24, r18
    3384:	22 27       	eor	r18, r18
    3386:	b0 0d       	add	r27, r0
    3388:	a1 1d       	adc	r26, r1
    338a:	62 1f       	adc	r22, r18
    338c:	73 9f       	mul	r23, r19
    338e:	b0 0d       	add	r27, r0
    3390:	a1 1d       	adc	r26, r1
    3392:	62 1f       	adc	r22, r18
    3394:	83 9f       	mul	r24, r19
    3396:	a0 0d       	add	r26, r0
    3398:	61 1d       	adc	r22, r1
    339a:	22 1f       	adc	r18, r18
    339c:	74 9f       	mul	r23, r20
    339e:	33 27       	eor	r19, r19
    33a0:	a0 0d       	add	r26, r0
    33a2:	61 1d       	adc	r22, r1
    33a4:	23 1f       	adc	r18, r19
    33a6:	84 9f       	mul	r24, r20
    33a8:	60 0d       	add	r22, r0
    33aa:	21 1d       	adc	r18, r1
    33ac:	82 2f       	mov	r24, r18
    33ae:	76 2f       	mov	r23, r22
    33b0:	6a 2f       	mov	r22, r26
    33b2:	11 24       	eor	r1, r1
    33b4:	9f 57       	subi	r25, 0x7F	; 127
    33b6:	50 40       	sbci	r21, 0x00	; 0
    33b8:	8a f0       	brmi	.+34     	; 0x33dc <__mulsf3_pse+0x84>
    33ba:	e1 f0       	breq	.+56     	; 0x33f4 <__mulsf3_pse+0x9c>
    33bc:	88 23       	and	r24, r24
    33be:	4a f0       	brmi	.+18     	; 0x33d2 <__mulsf3_pse+0x7a>
    33c0:	ee 0f       	add	r30, r30
    33c2:	ff 1f       	adc	r31, r31
    33c4:	bb 1f       	adc	r27, r27
    33c6:	66 1f       	adc	r22, r22
    33c8:	77 1f       	adc	r23, r23
    33ca:	88 1f       	adc	r24, r24
    33cc:	91 50       	subi	r25, 0x01	; 1
    33ce:	50 40       	sbci	r21, 0x00	; 0
    33d0:	a9 f7       	brne	.-22     	; 0x33bc <__mulsf3_pse+0x64>
    33d2:	9e 3f       	cpi	r25, 0xFE	; 254
    33d4:	51 05       	cpc	r21, r1
    33d6:	70 f0       	brcs	.+28     	; 0x33f4 <__mulsf3_pse+0x9c>
    33d8:	60 cf       	rjmp	.-320    	; 0x329a <__fp_inf>
    33da:	aa cf       	rjmp	.-172    	; 0x3330 <__fp_szero>
    33dc:	5f 3f       	cpi	r21, 0xFF	; 255
    33de:	ec f3       	brlt	.-6      	; 0x33da <__mulsf3_pse+0x82>
    33e0:	98 3e       	cpi	r25, 0xE8	; 232
    33e2:	dc f3       	brlt	.-10     	; 0x33da <__mulsf3_pse+0x82>
    33e4:	86 95       	lsr	r24
    33e6:	77 95       	ror	r23
    33e8:	67 95       	ror	r22
    33ea:	b7 95       	ror	r27
    33ec:	f7 95       	ror	r31
    33ee:	e7 95       	ror	r30
    33f0:	9f 5f       	subi	r25, 0xFF	; 255
    33f2:	c1 f7       	brne	.-16     	; 0x33e4 <__mulsf3_pse+0x8c>
    33f4:	fe 2b       	or	r31, r30
    33f6:	88 0f       	add	r24, r24
    33f8:	91 1d       	adc	r25, r1
    33fa:	96 95       	lsr	r25
    33fc:	87 95       	ror	r24
    33fe:	97 f9       	bld	r25, 7
    3400:	08 95       	ret

00003402 <__divmodhi4>:
    3402:	97 fb       	bst	r25, 7
    3404:	07 2e       	mov	r0, r23
    3406:	16 f4       	brtc	.+4      	; 0x340c <__divmodhi4+0xa>
    3408:	00 94       	com	r0
    340a:	06 d0       	rcall	.+12     	; 0x3418 <__divmodhi4_neg1>
    340c:	77 fd       	sbrc	r23, 7
    340e:	08 d0       	rcall	.+16     	; 0x3420 <__divmodhi4_neg2>
    3410:	46 d0       	rcall	.+140    	; 0x349e <__udivmodhi4>
    3412:	07 fc       	sbrc	r0, 7
    3414:	05 d0       	rcall	.+10     	; 0x3420 <__divmodhi4_neg2>
    3416:	3e f4       	brtc	.+14     	; 0x3426 <__divmodhi4_exit>

00003418 <__divmodhi4_neg1>:
    3418:	90 95       	com	r25
    341a:	81 95       	neg	r24
    341c:	9f 4f       	sbci	r25, 0xFF	; 255
    341e:	08 95       	ret

00003420 <__divmodhi4_neg2>:
    3420:	70 95       	com	r23
    3422:	61 95       	neg	r22
    3424:	7f 4f       	sbci	r23, 0xFF	; 255

00003426 <__divmodhi4_exit>:
    3426:	08 95       	ret

00003428 <__udivmodsi4>:
    3428:	a1 e2       	ldi	r26, 0x21	; 33
    342a:	1a 2e       	mov	r1, r26
    342c:	aa 1b       	sub	r26, r26
    342e:	bb 1b       	sub	r27, r27
    3430:	fd 01       	movw	r30, r26
    3432:	0d c0       	rjmp	.+26     	; 0x344e <__udivmodsi4_ep>

00003434 <__udivmodsi4_loop>:
    3434:	aa 1f       	adc	r26, r26
    3436:	bb 1f       	adc	r27, r27
    3438:	ee 1f       	adc	r30, r30
    343a:	ff 1f       	adc	r31, r31
    343c:	a2 17       	cp	r26, r18
    343e:	b3 07       	cpc	r27, r19
    3440:	e4 07       	cpc	r30, r20
    3442:	f5 07       	cpc	r31, r21
    3444:	20 f0       	brcs	.+8      	; 0x344e <__udivmodsi4_ep>
    3446:	a2 1b       	sub	r26, r18
    3448:	b3 0b       	sbc	r27, r19
    344a:	e4 0b       	sbc	r30, r20
    344c:	f5 0b       	sbc	r31, r21

0000344e <__udivmodsi4_ep>:
    344e:	66 1f       	adc	r22, r22
    3450:	77 1f       	adc	r23, r23
    3452:	88 1f       	adc	r24, r24
    3454:	99 1f       	adc	r25, r25
    3456:	1a 94       	dec	r1
    3458:	69 f7       	brne	.-38     	; 0x3434 <__udivmodsi4_loop>
    345a:	60 95       	com	r22
    345c:	70 95       	com	r23
    345e:	80 95       	com	r24
    3460:	90 95       	com	r25
    3462:	9b 01       	movw	r18, r22
    3464:	ac 01       	movw	r20, r24
    3466:	bd 01       	movw	r22, r26
    3468:	cf 01       	movw	r24, r30
    346a:	08 95       	ret

0000346c <__umulhisi3>:
    346c:	a2 9f       	mul	r26, r18
    346e:	b0 01       	movw	r22, r0
    3470:	b3 9f       	mul	r27, r19
    3472:	c0 01       	movw	r24, r0
    3474:	a3 9f       	mul	r26, r19
    3476:	70 0d       	add	r23, r0
    3478:	81 1d       	adc	r24, r1
    347a:	11 24       	eor	r1, r1
    347c:	91 1d       	adc	r25, r1
    347e:	b2 9f       	mul	r27, r18
    3480:	70 0d       	add	r23, r0
    3482:	81 1d       	adc	r24, r1
    3484:	11 24       	eor	r1, r1
    3486:	91 1d       	adc	r25, r1
    3488:	08 95       	ret

0000348a <__muluhisi3>:
    348a:	f0 df       	rcall	.-32     	; 0x346c <__umulhisi3>
    348c:	a5 9f       	mul	r26, r21
    348e:	90 0d       	add	r25, r0
    3490:	b4 9f       	mul	r27, r20
    3492:	90 0d       	add	r25, r0
    3494:	a4 9f       	mul	r26, r20
    3496:	80 0d       	add	r24, r0
    3498:	91 1d       	adc	r25, r1
    349a:	11 24       	eor	r1, r1
    349c:	08 95       	ret

0000349e <__udivmodhi4>:
    349e:	aa 1b       	sub	r26, r26
    34a0:	bb 1b       	sub	r27, r27
    34a2:	51 e1       	ldi	r21, 0x11	; 17
    34a4:	07 c0       	rjmp	.+14     	; 0x34b4 <__udivmodhi4_ep>

000034a6 <__udivmodhi4_loop>:
    34a6:	aa 1f       	adc	r26, r26
    34a8:	bb 1f       	adc	r27, r27
    34aa:	a6 17       	cp	r26, r22
    34ac:	b7 07       	cpc	r27, r23
    34ae:	10 f0       	brcs	.+4      	; 0x34b4 <__udivmodhi4_ep>
    34b0:	a6 1b       	sub	r26, r22
    34b2:	b7 0b       	sbc	r27, r23

000034b4 <__udivmodhi4_ep>:
    34b4:	88 1f       	adc	r24, r24
    34b6:	99 1f       	adc	r25, r25
    34b8:	5a 95       	dec	r21
    34ba:	a9 f7       	brne	.-22     	; 0x34a6 <__udivmodhi4_loop>
    34bc:	80 95       	com	r24
    34be:	90 95       	com	r25
    34c0:	bc 01       	movw	r22, r24
    34c2:	cd 01       	movw	r24, r26
    34c4:	08 95       	ret

000034c6 <printf>:
    34c6:	cf 93       	push	r28
    34c8:	df 93       	push	r29
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
    34ce:	fe 01       	movw	r30, r28
    34d0:	35 96       	adiw	r30, 0x05	; 5
    34d2:	61 91       	ld	r22, Z+
    34d4:	71 91       	ld	r23, Z+
    34d6:	af 01       	movw	r20, r30
    34d8:	80 91 0c 26 	lds	r24, 0x260C
    34dc:	90 91 0d 26 	lds	r25, 0x260D
    34e0:	58 d0       	rcall	.+176    	; 0x3592 <vfprintf>
    34e2:	df 91       	pop	r29
    34e4:	cf 91       	pop	r28
    34e6:	08 95       	ret

000034e8 <puts>:
    34e8:	0f 93       	push	r16
    34ea:	1f 93       	push	r17
    34ec:	cf 93       	push	r28
    34ee:	df 93       	push	r29
    34f0:	e0 91 0c 26 	lds	r30, 0x260C
    34f4:	f0 91 0d 26 	lds	r31, 0x260D
    34f8:	23 81       	ldd	r18, Z+3	; 0x03
    34fa:	21 ff       	sbrs	r18, 1
    34fc:	1b c0       	rjmp	.+54     	; 0x3534 <puts+0x4c>
    34fe:	ec 01       	movw	r28, r24
    3500:	00 e0       	ldi	r16, 0x00	; 0
    3502:	10 e0       	ldi	r17, 0x00	; 0
    3504:	89 91       	ld	r24, Y+
    3506:	60 91 0c 26 	lds	r22, 0x260C
    350a:	70 91 0d 26 	lds	r23, 0x260D
    350e:	db 01       	movw	r26, r22
    3510:	18 96       	adiw	r26, 0x08	; 8
    3512:	ed 91       	ld	r30, X+
    3514:	fc 91       	ld	r31, X
    3516:	19 97       	sbiw	r26, 0x09	; 9
    3518:	88 23       	and	r24, r24
    351a:	31 f0       	breq	.+12     	; 0x3528 <puts+0x40>
    351c:	09 95       	icall
    351e:	89 2b       	or	r24, r25
    3520:	89 f3       	breq	.-30     	; 0x3504 <puts+0x1c>
    3522:	0f ef       	ldi	r16, 0xFF	; 255
    3524:	1f ef       	ldi	r17, 0xFF	; 255
    3526:	ee cf       	rjmp	.-36     	; 0x3504 <puts+0x1c>
    3528:	8a e0       	ldi	r24, 0x0A	; 10
    352a:	09 95       	icall
    352c:	89 2b       	or	r24, r25
    352e:	11 f4       	brne	.+4      	; 0x3534 <puts+0x4c>
    3530:	c8 01       	movw	r24, r16
    3532:	02 c0       	rjmp	.+4      	; 0x3538 <puts+0x50>
    3534:	8f ef       	ldi	r24, 0xFF	; 255
    3536:	9f ef       	ldi	r25, 0xFF	; 255
    3538:	df 91       	pop	r29
    353a:	cf 91       	pop	r28
    353c:	1f 91       	pop	r17
    353e:	0f 91       	pop	r16
    3540:	08 95       	ret

00003542 <sprintf>:
    3542:	0f 93       	push	r16
    3544:	1f 93       	push	r17
    3546:	cf 93       	push	r28
    3548:	df 93       	push	r29
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
    354e:	2e 97       	sbiw	r28, 0x0e	; 14
    3550:	cd bf       	out	0x3d, r28	; 61
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0d 89       	ldd	r16, Y+21	; 0x15
    3556:	1e 89       	ldd	r17, Y+22	; 0x16
    3558:	86 e0       	ldi	r24, 0x06	; 6
    355a:	8c 83       	std	Y+4, r24	; 0x04
    355c:	09 83       	std	Y+1, r16	; 0x01
    355e:	1a 83       	std	Y+2, r17	; 0x02
    3560:	8f ef       	ldi	r24, 0xFF	; 255
    3562:	9f e7       	ldi	r25, 0x7F	; 127
    3564:	8d 83       	std	Y+5, r24	; 0x05
    3566:	9e 83       	std	Y+6, r25	; 0x06
    3568:	ae 01       	movw	r20, r28
    356a:	47 5e       	subi	r20, 0xE7	; 231
    356c:	5f 4f       	sbci	r21, 0xFF	; 255
    356e:	6f 89       	ldd	r22, Y+23	; 0x17
    3570:	78 8d       	ldd	r23, Y+24	; 0x18
    3572:	ce 01       	movw	r24, r28
    3574:	01 96       	adiw	r24, 0x01	; 1
    3576:	0d d0       	rcall	.+26     	; 0x3592 <vfprintf>
    3578:	ef 81       	ldd	r30, Y+7	; 0x07
    357a:	f8 85       	ldd	r31, Y+8	; 0x08
    357c:	e0 0f       	add	r30, r16
    357e:	f1 1f       	adc	r31, r17
    3580:	10 82       	st	Z, r1
    3582:	2e 96       	adiw	r28, 0x0e	; 14
    3584:	cd bf       	out	0x3d, r28	; 61
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	df 91       	pop	r29
    358a:	cf 91       	pop	r28
    358c:	1f 91       	pop	r17
    358e:	0f 91       	pop	r16
    3590:	08 95       	ret

00003592 <vfprintf>:
    3592:	2f 92       	push	r2
    3594:	3f 92       	push	r3
    3596:	4f 92       	push	r4
    3598:	5f 92       	push	r5
    359a:	6f 92       	push	r6
    359c:	7f 92       	push	r7
    359e:	8f 92       	push	r8
    35a0:	9f 92       	push	r9
    35a2:	af 92       	push	r10
    35a4:	bf 92       	push	r11
    35a6:	cf 92       	push	r12
    35a8:	df 92       	push	r13
    35aa:	ef 92       	push	r14
    35ac:	ff 92       	push	r15
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
    35b2:	cf 93       	push	r28
    35b4:	df 93       	push	r29
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
    35ba:	2c 97       	sbiw	r28, 0x0c	; 12
    35bc:	cd bf       	out	0x3d, r28	; 61
    35be:	de bf       	out	0x3e, r29	; 62
    35c0:	7c 01       	movw	r14, r24
    35c2:	6b 01       	movw	r12, r22
    35c4:	8a 01       	movw	r16, r20
    35c6:	fc 01       	movw	r30, r24
    35c8:	16 82       	std	Z+6, r1	; 0x06
    35ca:	17 82       	std	Z+7, r1	; 0x07
    35cc:	83 81       	ldd	r24, Z+3	; 0x03
    35ce:	81 ff       	sbrs	r24, 1
    35d0:	b0 c1       	rjmp	.+864    	; 0x3932 <vfprintf+0x3a0>
    35d2:	ce 01       	movw	r24, r28
    35d4:	01 96       	adiw	r24, 0x01	; 1
    35d6:	4c 01       	movw	r8, r24
    35d8:	f7 01       	movw	r30, r14
    35da:	93 81       	ldd	r25, Z+3	; 0x03
    35dc:	f6 01       	movw	r30, r12
    35de:	93 fd       	sbrc	r25, 3
    35e0:	85 91       	lpm	r24, Z+
    35e2:	93 ff       	sbrs	r25, 3
    35e4:	81 91       	ld	r24, Z+
    35e6:	6f 01       	movw	r12, r30
    35e8:	88 23       	and	r24, r24
    35ea:	09 f4       	brne	.+2      	; 0x35ee <vfprintf+0x5c>
    35ec:	9e c1       	rjmp	.+828    	; 0x392a <vfprintf+0x398>
    35ee:	85 32       	cpi	r24, 0x25	; 37
    35f0:	39 f4       	brne	.+14     	; 0x3600 <vfprintf+0x6e>
    35f2:	93 fd       	sbrc	r25, 3
    35f4:	85 91       	lpm	r24, Z+
    35f6:	93 ff       	sbrs	r25, 3
    35f8:	81 91       	ld	r24, Z+
    35fa:	6f 01       	movw	r12, r30
    35fc:	85 32       	cpi	r24, 0x25	; 37
    35fe:	21 f4       	brne	.+8      	; 0x3608 <vfprintf+0x76>
    3600:	b7 01       	movw	r22, r14
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	c4 d1       	rcall	.+904    	; 0x398e <fputc>
    3606:	e8 cf       	rjmp	.-48     	; 0x35d8 <vfprintf+0x46>
    3608:	51 2c       	mov	r5, r1
    360a:	31 2c       	mov	r3, r1
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	20 32       	cpi	r18, 0x20	; 32
    3610:	a0 f4       	brcc	.+40     	; 0x363a <vfprintf+0xa8>
    3612:	8b 32       	cpi	r24, 0x2B	; 43
    3614:	69 f0       	breq	.+26     	; 0x3630 <vfprintf+0x9e>
    3616:	30 f4       	brcc	.+12     	; 0x3624 <vfprintf+0x92>
    3618:	80 32       	cpi	r24, 0x20	; 32
    361a:	59 f0       	breq	.+22     	; 0x3632 <vfprintf+0xa0>
    361c:	83 32       	cpi	r24, 0x23	; 35
    361e:	69 f4       	brne	.+26     	; 0x363a <vfprintf+0xa8>
    3620:	20 61       	ori	r18, 0x10	; 16
    3622:	2c c0       	rjmp	.+88     	; 0x367c <vfprintf+0xea>
    3624:	8d 32       	cpi	r24, 0x2D	; 45
    3626:	39 f0       	breq	.+14     	; 0x3636 <vfprintf+0xa4>
    3628:	80 33       	cpi	r24, 0x30	; 48
    362a:	39 f4       	brne	.+14     	; 0x363a <vfprintf+0xa8>
    362c:	21 60       	ori	r18, 0x01	; 1
    362e:	26 c0       	rjmp	.+76     	; 0x367c <vfprintf+0xea>
    3630:	22 60       	ori	r18, 0x02	; 2
    3632:	24 60       	ori	r18, 0x04	; 4
    3634:	23 c0       	rjmp	.+70     	; 0x367c <vfprintf+0xea>
    3636:	28 60       	ori	r18, 0x08	; 8
    3638:	21 c0       	rjmp	.+66     	; 0x367c <vfprintf+0xea>
    363a:	27 fd       	sbrc	r18, 7
    363c:	27 c0       	rjmp	.+78     	; 0x368c <vfprintf+0xfa>
    363e:	30 ed       	ldi	r19, 0xD0	; 208
    3640:	38 0f       	add	r19, r24
    3642:	3a 30       	cpi	r19, 0x0A	; 10
    3644:	78 f4       	brcc	.+30     	; 0x3664 <vfprintf+0xd2>
    3646:	26 ff       	sbrs	r18, 6
    3648:	06 c0       	rjmp	.+12     	; 0x3656 <vfprintf+0xc4>
    364a:	fa e0       	ldi	r31, 0x0A	; 10
    364c:	5f 9e       	mul	r5, r31
    364e:	30 0d       	add	r19, r0
    3650:	11 24       	eor	r1, r1
    3652:	53 2e       	mov	r5, r19
    3654:	13 c0       	rjmp	.+38     	; 0x367c <vfprintf+0xea>
    3656:	8a e0       	ldi	r24, 0x0A	; 10
    3658:	38 9e       	mul	r3, r24
    365a:	30 0d       	add	r19, r0
    365c:	11 24       	eor	r1, r1
    365e:	33 2e       	mov	r3, r19
    3660:	20 62       	ori	r18, 0x20	; 32
    3662:	0c c0       	rjmp	.+24     	; 0x367c <vfprintf+0xea>
    3664:	8e 32       	cpi	r24, 0x2E	; 46
    3666:	21 f4       	brne	.+8      	; 0x3670 <vfprintf+0xde>
    3668:	26 fd       	sbrc	r18, 6
    366a:	5f c1       	rjmp	.+702    	; 0x392a <vfprintf+0x398>
    366c:	20 64       	ori	r18, 0x40	; 64
    366e:	06 c0       	rjmp	.+12     	; 0x367c <vfprintf+0xea>
    3670:	8c 36       	cpi	r24, 0x6C	; 108
    3672:	11 f4       	brne	.+4      	; 0x3678 <vfprintf+0xe6>
    3674:	20 68       	ori	r18, 0x80	; 128
    3676:	02 c0       	rjmp	.+4      	; 0x367c <vfprintf+0xea>
    3678:	88 36       	cpi	r24, 0x68	; 104
    367a:	41 f4       	brne	.+16     	; 0x368c <vfprintf+0xfa>
    367c:	f6 01       	movw	r30, r12
    367e:	93 fd       	sbrc	r25, 3
    3680:	85 91       	lpm	r24, Z+
    3682:	93 ff       	sbrs	r25, 3
    3684:	81 91       	ld	r24, Z+
    3686:	6f 01       	movw	r12, r30
    3688:	81 11       	cpse	r24, r1
    368a:	c1 cf       	rjmp	.-126    	; 0x360e <vfprintf+0x7c>
    368c:	98 2f       	mov	r25, r24
    368e:	9f 7d       	andi	r25, 0xDF	; 223
    3690:	95 54       	subi	r25, 0x45	; 69
    3692:	93 30       	cpi	r25, 0x03	; 3
    3694:	28 f4       	brcc	.+10     	; 0x36a0 <vfprintf+0x10e>
    3696:	0c 5f       	subi	r16, 0xFC	; 252
    3698:	1f 4f       	sbci	r17, 0xFF	; 255
    369a:	ff e3       	ldi	r31, 0x3F	; 63
    369c:	f9 83       	std	Y+1, r31	; 0x01
    369e:	0d c0       	rjmp	.+26     	; 0x36ba <vfprintf+0x128>
    36a0:	83 36       	cpi	r24, 0x63	; 99
    36a2:	31 f0       	breq	.+12     	; 0x36b0 <vfprintf+0x11e>
    36a4:	83 37       	cpi	r24, 0x73	; 115
    36a6:	71 f0       	breq	.+28     	; 0x36c4 <vfprintf+0x132>
    36a8:	83 35       	cpi	r24, 0x53	; 83
    36aa:	09 f0       	breq	.+2      	; 0x36ae <vfprintf+0x11c>
    36ac:	57 c0       	rjmp	.+174    	; 0x375c <vfprintf+0x1ca>
    36ae:	21 c0       	rjmp	.+66     	; 0x36f2 <vfprintf+0x160>
    36b0:	f8 01       	movw	r30, r16
    36b2:	80 81       	ld	r24, Z
    36b4:	89 83       	std	Y+1, r24	; 0x01
    36b6:	0e 5f       	subi	r16, 0xFE	; 254
    36b8:	1f 4f       	sbci	r17, 0xFF	; 255
    36ba:	44 24       	eor	r4, r4
    36bc:	43 94       	inc	r4
    36be:	51 2c       	mov	r5, r1
    36c0:	54 01       	movw	r10, r8
    36c2:	14 c0       	rjmp	.+40     	; 0x36ec <vfprintf+0x15a>
    36c4:	38 01       	movw	r6, r16
    36c6:	f2 e0       	ldi	r31, 0x02	; 2
    36c8:	6f 0e       	add	r6, r31
    36ca:	71 1c       	adc	r7, r1
    36cc:	f8 01       	movw	r30, r16
    36ce:	a0 80       	ld	r10, Z
    36d0:	b1 80       	ldd	r11, Z+1	; 0x01
    36d2:	26 ff       	sbrs	r18, 6
    36d4:	03 c0       	rjmp	.+6      	; 0x36dc <vfprintf+0x14a>
    36d6:	65 2d       	mov	r22, r5
    36d8:	70 e0       	ldi	r23, 0x00	; 0
    36da:	02 c0       	rjmp	.+4      	; 0x36e0 <vfprintf+0x14e>
    36dc:	6f ef       	ldi	r22, 0xFF	; 255
    36de:	7f ef       	ldi	r23, 0xFF	; 255
    36e0:	c5 01       	movw	r24, r10
    36e2:	2c 87       	std	Y+12, r18	; 0x0c
    36e4:	49 d1       	rcall	.+658    	; 0x3978 <strnlen>
    36e6:	2c 01       	movw	r4, r24
    36e8:	83 01       	movw	r16, r6
    36ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    36ec:	2f 77       	andi	r18, 0x7F	; 127
    36ee:	22 2e       	mov	r2, r18
    36f0:	16 c0       	rjmp	.+44     	; 0x371e <vfprintf+0x18c>
    36f2:	38 01       	movw	r6, r16
    36f4:	f2 e0       	ldi	r31, 0x02	; 2
    36f6:	6f 0e       	add	r6, r31
    36f8:	71 1c       	adc	r7, r1
    36fa:	f8 01       	movw	r30, r16
    36fc:	a0 80       	ld	r10, Z
    36fe:	b1 80       	ldd	r11, Z+1	; 0x01
    3700:	26 ff       	sbrs	r18, 6
    3702:	03 c0       	rjmp	.+6      	; 0x370a <vfprintf+0x178>
    3704:	65 2d       	mov	r22, r5
    3706:	70 e0       	ldi	r23, 0x00	; 0
    3708:	02 c0       	rjmp	.+4      	; 0x370e <vfprintf+0x17c>
    370a:	6f ef       	ldi	r22, 0xFF	; 255
    370c:	7f ef       	ldi	r23, 0xFF	; 255
    370e:	c5 01       	movw	r24, r10
    3710:	2c 87       	std	Y+12, r18	; 0x0c
    3712:	27 d1       	rcall	.+590    	; 0x3962 <strnlen_P>
    3714:	2c 01       	movw	r4, r24
    3716:	2c 85       	ldd	r18, Y+12	; 0x0c
    3718:	20 68       	ori	r18, 0x80	; 128
    371a:	22 2e       	mov	r2, r18
    371c:	83 01       	movw	r16, r6
    371e:	23 fc       	sbrc	r2, 3
    3720:	19 c0       	rjmp	.+50     	; 0x3754 <vfprintf+0x1c2>
    3722:	83 2d       	mov	r24, r3
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	48 16       	cp	r4, r24
    3728:	59 06       	cpc	r5, r25
    372a:	a0 f4       	brcc	.+40     	; 0x3754 <vfprintf+0x1c2>
    372c:	b7 01       	movw	r22, r14
    372e:	80 e2       	ldi	r24, 0x20	; 32
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	2d d1       	rcall	.+602    	; 0x398e <fputc>
    3734:	3a 94       	dec	r3
    3736:	f5 cf       	rjmp	.-22     	; 0x3722 <vfprintf+0x190>
    3738:	f5 01       	movw	r30, r10
    373a:	27 fc       	sbrc	r2, 7
    373c:	85 91       	lpm	r24, Z+
    373e:	27 fe       	sbrs	r2, 7
    3740:	81 91       	ld	r24, Z+
    3742:	5f 01       	movw	r10, r30
    3744:	b7 01       	movw	r22, r14
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	22 d1       	rcall	.+580    	; 0x398e <fputc>
    374a:	31 10       	cpse	r3, r1
    374c:	3a 94       	dec	r3
    374e:	f1 e0       	ldi	r31, 0x01	; 1
    3750:	4f 1a       	sub	r4, r31
    3752:	51 08       	sbc	r5, r1
    3754:	41 14       	cp	r4, r1
    3756:	51 04       	cpc	r5, r1
    3758:	79 f7       	brne	.-34     	; 0x3738 <vfprintf+0x1a6>
    375a:	de c0       	rjmp	.+444    	; 0x3918 <vfprintf+0x386>
    375c:	84 36       	cpi	r24, 0x64	; 100
    375e:	11 f0       	breq	.+4      	; 0x3764 <vfprintf+0x1d2>
    3760:	89 36       	cpi	r24, 0x69	; 105
    3762:	31 f5       	brne	.+76     	; 0x37b0 <vfprintf+0x21e>
    3764:	f8 01       	movw	r30, r16
    3766:	27 ff       	sbrs	r18, 7
    3768:	07 c0       	rjmp	.+14     	; 0x3778 <vfprintf+0x1e6>
    376a:	60 81       	ld	r22, Z
    376c:	71 81       	ldd	r23, Z+1	; 0x01
    376e:	82 81       	ldd	r24, Z+2	; 0x02
    3770:	93 81       	ldd	r25, Z+3	; 0x03
    3772:	0c 5f       	subi	r16, 0xFC	; 252
    3774:	1f 4f       	sbci	r17, 0xFF	; 255
    3776:	08 c0       	rjmp	.+16     	; 0x3788 <vfprintf+0x1f6>
    3778:	60 81       	ld	r22, Z
    377a:	71 81       	ldd	r23, Z+1	; 0x01
    377c:	88 27       	eor	r24, r24
    377e:	77 fd       	sbrc	r23, 7
    3780:	80 95       	com	r24
    3782:	98 2f       	mov	r25, r24
    3784:	0e 5f       	subi	r16, 0xFE	; 254
    3786:	1f 4f       	sbci	r17, 0xFF	; 255
    3788:	2f 76       	andi	r18, 0x6F	; 111
    378a:	b2 2e       	mov	r11, r18
    378c:	97 ff       	sbrs	r25, 7
    378e:	09 c0       	rjmp	.+18     	; 0x37a2 <vfprintf+0x210>
    3790:	90 95       	com	r25
    3792:	80 95       	com	r24
    3794:	70 95       	com	r23
    3796:	61 95       	neg	r22
    3798:	7f 4f       	sbci	r23, 0xFF	; 255
    379a:	8f 4f       	sbci	r24, 0xFF	; 255
    379c:	9f 4f       	sbci	r25, 0xFF	; 255
    379e:	20 68       	ori	r18, 0x80	; 128
    37a0:	b2 2e       	mov	r11, r18
    37a2:	2a e0       	ldi	r18, 0x0A	; 10
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	a4 01       	movw	r20, r8
    37a8:	24 d1       	rcall	.+584    	; 0x39f2 <__ultoa_invert>
    37aa:	a8 2e       	mov	r10, r24
    37ac:	a8 18       	sub	r10, r8
    37ae:	43 c0       	rjmp	.+134    	; 0x3836 <vfprintf+0x2a4>
    37b0:	85 37       	cpi	r24, 0x75	; 117
    37b2:	29 f4       	brne	.+10     	; 0x37be <vfprintf+0x22c>
    37b4:	2f 7e       	andi	r18, 0xEF	; 239
    37b6:	b2 2e       	mov	r11, r18
    37b8:	2a e0       	ldi	r18, 0x0A	; 10
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	25 c0       	rjmp	.+74     	; 0x3808 <vfprintf+0x276>
    37be:	f2 2f       	mov	r31, r18
    37c0:	f9 7f       	andi	r31, 0xF9	; 249
    37c2:	bf 2e       	mov	r11, r31
    37c4:	8f 36       	cpi	r24, 0x6F	; 111
    37c6:	c1 f0       	breq	.+48     	; 0x37f8 <vfprintf+0x266>
    37c8:	18 f4       	brcc	.+6      	; 0x37d0 <vfprintf+0x23e>
    37ca:	88 35       	cpi	r24, 0x58	; 88
    37cc:	79 f0       	breq	.+30     	; 0x37ec <vfprintf+0x25a>
    37ce:	ad c0       	rjmp	.+346    	; 0x392a <vfprintf+0x398>
    37d0:	80 37       	cpi	r24, 0x70	; 112
    37d2:	19 f0       	breq	.+6      	; 0x37da <vfprintf+0x248>
    37d4:	88 37       	cpi	r24, 0x78	; 120
    37d6:	21 f0       	breq	.+8      	; 0x37e0 <vfprintf+0x24e>
    37d8:	a8 c0       	rjmp	.+336    	; 0x392a <vfprintf+0x398>
    37da:	2f 2f       	mov	r18, r31
    37dc:	20 61       	ori	r18, 0x10	; 16
    37de:	b2 2e       	mov	r11, r18
    37e0:	b4 fe       	sbrs	r11, 4
    37e2:	0d c0       	rjmp	.+26     	; 0x37fe <vfprintf+0x26c>
    37e4:	8b 2d       	mov	r24, r11
    37e6:	84 60       	ori	r24, 0x04	; 4
    37e8:	b8 2e       	mov	r11, r24
    37ea:	09 c0       	rjmp	.+18     	; 0x37fe <vfprintf+0x26c>
    37ec:	24 ff       	sbrs	r18, 4
    37ee:	0a c0       	rjmp	.+20     	; 0x3804 <vfprintf+0x272>
    37f0:	9f 2f       	mov	r25, r31
    37f2:	96 60       	ori	r25, 0x06	; 6
    37f4:	b9 2e       	mov	r11, r25
    37f6:	06 c0       	rjmp	.+12     	; 0x3804 <vfprintf+0x272>
    37f8:	28 e0       	ldi	r18, 0x08	; 8
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	05 c0       	rjmp	.+10     	; 0x3808 <vfprintf+0x276>
    37fe:	20 e1       	ldi	r18, 0x10	; 16
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	02 c0       	rjmp	.+4      	; 0x3808 <vfprintf+0x276>
    3804:	20 e1       	ldi	r18, 0x10	; 16
    3806:	32 e0       	ldi	r19, 0x02	; 2
    3808:	f8 01       	movw	r30, r16
    380a:	b7 fe       	sbrs	r11, 7
    380c:	07 c0       	rjmp	.+14     	; 0x381c <vfprintf+0x28a>
    380e:	60 81       	ld	r22, Z
    3810:	71 81       	ldd	r23, Z+1	; 0x01
    3812:	82 81       	ldd	r24, Z+2	; 0x02
    3814:	93 81       	ldd	r25, Z+3	; 0x03
    3816:	0c 5f       	subi	r16, 0xFC	; 252
    3818:	1f 4f       	sbci	r17, 0xFF	; 255
    381a:	06 c0       	rjmp	.+12     	; 0x3828 <vfprintf+0x296>
    381c:	60 81       	ld	r22, Z
    381e:	71 81       	ldd	r23, Z+1	; 0x01
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	0e 5f       	subi	r16, 0xFE	; 254
    3826:	1f 4f       	sbci	r17, 0xFF	; 255
    3828:	a4 01       	movw	r20, r8
    382a:	e3 d0       	rcall	.+454    	; 0x39f2 <__ultoa_invert>
    382c:	a8 2e       	mov	r10, r24
    382e:	a8 18       	sub	r10, r8
    3830:	fb 2d       	mov	r31, r11
    3832:	ff 77       	andi	r31, 0x7F	; 127
    3834:	bf 2e       	mov	r11, r31
    3836:	b6 fe       	sbrs	r11, 6
    3838:	0b c0       	rjmp	.+22     	; 0x3850 <vfprintf+0x2be>
    383a:	2b 2d       	mov	r18, r11
    383c:	2e 7f       	andi	r18, 0xFE	; 254
    383e:	a5 14       	cp	r10, r5
    3840:	50 f4       	brcc	.+20     	; 0x3856 <vfprintf+0x2c4>
    3842:	b4 fe       	sbrs	r11, 4
    3844:	0a c0       	rjmp	.+20     	; 0x385a <vfprintf+0x2c8>
    3846:	b2 fc       	sbrc	r11, 2
    3848:	08 c0       	rjmp	.+16     	; 0x385a <vfprintf+0x2c8>
    384a:	2b 2d       	mov	r18, r11
    384c:	2e 7e       	andi	r18, 0xEE	; 238
    384e:	05 c0       	rjmp	.+10     	; 0x385a <vfprintf+0x2c8>
    3850:	7a 2c       	mov	r7, r10
    3852:	2b 2d       	mov	r18, r11
    3854:	03 c0       	rjmp	.+6      	; 0x385c <vfprintf+0x2ca>
    3856:	7a 2c       	mov	r7, r10
    3858:	01 c0       	rjmp	.+2      	; 0x385c <vfprintf+0x2ca>
    385a:	75 2c       	mov	r7, r5
    385c:	24 ff       	sbrs	r18, 4
    385e:	0d c0       	rjmp	.+26     	; 0x387a <vfprintf+0x2e8>
    3860:	fe 01       	movw	r30, r28
    3862:	ea 0d       	add	r30, r10
    3864:	f1 1d       	adc	r31, r1
    3866:	80 81       	ld	r24, Z
    3868:	80 33       	cpi	r24, 0x30	; 48
    386a:	11 f4       	brne	.+4      	; 0x3870 <vfprintf+0x2de>
    386c:	29 7e       	andi	r18, 0xE9	; 233
    386e:	09 c0       	rjmp	.+18     	; 0x3882 <vfprintf+0x2f0>
    3870:	22 ff       	sbrs	r18, 2
    3872:	06 c0       	rjmp	.+12     	; 0x3880 <vfprintf+0x2ee>
    3874:	73 94       	inc	r7
    3876:	73 94       	inc	r7
    3878:	04 c0       	rjmp	.+8      	; 0x3882 <vfprintf+0x2f0>
    387a:	82 2f       	mov	r24, r18
    387c:	86 78       	andi	r24, 0x86	; 134
    387e:	09 f0       	breq	.+2      	; 0x3882 <vfprintf+0x2f0>
    3880:	73 94       	inc	r7
    3882:	23 fd       	sbrc	r18, 3
    3884:	12 c0       	rjmp	.+36     	; 0x38aa <vfprintf+0x318>
    3886:	20 ff       	sbrs	r18, 0
    3888:	06 c0       	rjmp	.+12     	; 0x3896 <vfprintf+0x304>
    388a:	5a 2c       	mov	r5, r10
    388c:	73 14       	cp	r7, r3
    388e:	18 f4       	brcc	.+6      	; 0x3896 <vfprintf+0x304>
    3890:	53 0c       	add	r5, r3
    3892:	57 18       	sub	r5, r7
    3894:	73 2c       	mov	r7, r3
    3896:	73 14       	cp	r7, r3
    3898:	60 f4       	brcc	.+24     	; 0x38b2 <vfprintf+0x320>
    389a:	b7 01       	movw	r22, r14
    389c:	80 e2       	ldi	r24, 0x20	; 32
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	2c 87       	std	Y+12, r18	; 0x0c
    38a2:	75 d0       	rcall	.+234    	; 0x398e <fputc>
    38a4:	73 94       	inc	r7
    38a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    38a8:	f6 cf       	rjmp	.-20     	; 0x3896 <vfprintf+0x304>
    38aa:	73 14       	cp	r7, r3
    38ac:	10 f4       	brcc	.+4      	; 0x38b2 <vfprintf+0x320>
    38ae:	37 18       	sub	r3, r7
    38b0:	01 c0       	rjmp	.+2      	; 0x38b4 <vfprintf+0x322>
    38b2:	31 2c       	mov	r3, r1
    38b4:	24 ff       	sbrs	r18, 4
    38b6:	11 c0       	rjmp	.+34     	; 0x38da <vfprintf+0x348>
    38b8:	b7 01       	movw	r22, r14
    38ba:	80 e3       	ldi	r24, 0x30	; 48
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	2c 87       	std	Y+12, r18	; 0x0c
    38c0:	66 d0       	rcall	.+204    	; 0x398e <fputc>
    38c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    38c4:	22 ff       	sbrs	r18, 2
    38c6:	16 c0       	rjmp	.+44     	; 0x38f4 <vfprintf+0x362>
    38c8:	21 ff       	sbrs	r18, 1
    38ca:	03 c0       	rjmp	.+6      	; 0x38d2 <vfprintf+0x340>
    38cc:	88 e5       	ldi	r24, 0x58	; 88
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	02 c0       	rjmp	.+4      	; 0x38d6 <vfprintf+0x344>
    38d2:	88 e7       	ldi	r24, 0x78	; 120
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	b7 01       	movw	r22, r14
    38d8:	0c c0       	rjmp	.+24     	; 0x38f2 <vfprintf+0x360>
    38da:	82 2f       	mov	r24, r18
    38dc:	86 78       	andi	r24, 0x86	; 134
    38de:	51 f0       	breq	.+20     	; 0x38f4 <vfprintf+0x362>
    38e0:	21 fd       	sbrc	r18, 1
    38e2:	02 c0       	rjmp	.+4      	; 0x38e8 <vfprintf+0x356>
    38e4:	80 e2       	ldi	r24, 0x20	; 32
    38e6:	01 c0       	rjmp	.+2      	; 0x38ea <vfprintf+0x358>
    38e8:	8b e2       	ldi	r24, 0x2B	; 43
    38ea:	27 fd       	sbrc	r18, 7
    38ec:	8d e2       	ldi	r24, 0x2D	; 45
    38ee:	b7 01       	movw	r22, r14
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	4d d0       	rcall	.+154    	; 0x398e <fputc>
    38f4:	a5 14       	cp	r10, r5
    38f6:	30 f4       	brcc	.+12     	; 0x3904 <vfprintf+0x372>
    38f8:	b7 01       	movw	r22, r14
    38fa:	80 e3       	ldi	r24, 0x30	; 48
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	47 d0       	rcall	.+142    	; 0x398e <fputc>
    3900:	5a 94       	dec	r5
    3902:	f8 cf       	rjmp	.-16     	; 0x38f4 <vfprintf+0x362>
    3904:	aa 94       	dec	r10
    3906:	f4 01       	movw	r30, r8
    3908:	ea 0d       	add	r30, r10
    390a:	f1 1d       	adc	r31, r1
    390c:	80 81       	ld	r24, Z
    390e:	b7 01       	movw	r22, r14
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	3d d0       	rcall	.+122    	; 0x398e <fputc>
    3914:	a1 10       	cpse	r10, r1
    3916:	f6 cf       	rjmp	.-20     	; 0x3904 <vfprintf+0x372>
    3918:	33 20       	and	r3, r3
    391a:	09 f4       	brne	.+2      	; 0x391e <vfprintf+0x38c>
    391c:	5d ce       	rjmp	.-838    	; 0x35d8 <vfprintf+0x46>
    391e:	b7 01       	movw	r22, r14
    3920:	80 e2       	ldi	r24, 0x20	; 32
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	34 d0       	rcall	.+104    	; 0x398e <fputc>
    3926:	3a 94       	dec	r3
    3928:	f7 cf       	rjmp	.-18     	; 0x3918 <vfprintf+0x386>
    392a:	f7 01       	movw	r30, r14
    392c:	86 81       	ldd	r24, Z+6	; 0x06
    392e:	97 81       	ldd	r25, Z+7	; 0x07
    3930:	02 c0       	rjmp	.+4      	; 0x3936 <vfprintf+0x3a4>
    3932:	8f ef       	ldi	r24, 0xFF	; 255
    3934:	9f ef       	ldi	r25, 0xFF	; 255
    3936:	2c 96       	adiw	r28, 0x0c	; 12
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	de bf       	out	0x3e, r29	; 62
    393c:	df 91       	pop	r29
    393e:	cf 91       	pop	r28
    3940:	1f 91       	pop	r17
    3942:	0f 91       	pop	r16
    3944:	ff 90       	pop	r15
    3946:	ef 90       	pop	r14
    3948:	df 90       	pop	r13
    394a:	cf 90       	pop	r12
    394c:	bf 90       	pop	r11
    394e:	af 90       	pop	r10
    3950:	9f 90       	pop	r9
    3952:	8f 90       	pop	r8
    3954:	7f 90       	pop	r7
    3956:	6f 90       	pop	r6
    3958:	5f 90       	pop	r5
    395a:	4f 90       	pop	r4
    395c:	3f 90       	pop	r3
    395e:	2f 90       	pop	r2
    3960:	08 95       	ret

00003962 <strnlen_P>:
    3962:	fc 01       	movw	r30, r24
    3964:	05 90       	lpm	r0, Z+
    3966:	61 50       	subi	r22, 0x01	; 1
    3968:	70 40       	sbci	r23, 0x00	; 0
    396a:	01 10       	cpse	r0, r1
    396c:	d8 f7       	brcc	.-10     	; 0x3964 <strnlen_P+0x2>
    396e:	80 95       	com	r24
    3970:	90 95       	com	r25
    3972:	8e 0f       	add	r24, r30
    3974:	9f 1f       	adc	r25, r31
    3976:	08 95       	ret

00003978 <strnlen>:
    3978:	fc 01       	movw	r30, r24
    397a:	61 50       	subi	r22, 0x01	; 1
    397c:	70 40       	sbci	r23, 0x00	; 0
    397e:	01 90       	ld	r0, Z+
    3980:	01 10       	cpse	r0, r1
    3982:	d8 f7       	brcc	.-10     	; 0x397a <strnlen+0x2>
    3984:	80 95       	com	r24
    3986:	90 95       	com	r25
    3988:	8e 0f       	add	r24, r30
    398a:	9f 1f       	adc	r25, r31
    398c:	08 95       	ret

0000398e <fputc>:
    398e:	0f 93       	push	r16
    3990:	1f 93       	push	r17
    3992:	cf 93       	push	r28
    3994:	df 93       	push	r29
    3996:	18 2f       	mov	r17, r24
    3998:	09 2f       	mov	r16, r25
    399a:	eb 01       	movw	r28, r22
    399c:	8b 81       	ldd	r24, Y+3	; 0x03
    399e:	81 fd       	sbrc	r24, 1
    39a0:	03 c0       	rjmp	.+6      	; 0x39a8 <fputc+0x1a>
    39a2:	8f ef       	ldi	r24, 0xFF	; 255
    39a4:	9f ef       	ldi	r25, 0xFF	; 255
    39a6:	20 c0       	rjmp	.+64     	; 0x39e8 <fputc+0x5a>
    39a8:	82 ff       	sbrs	r24, 2
    39aa:	10 c0       	rjmp	.+32     	; 0x39cc <fputc+0x3e>
    39ac:	4e 81       	ldd	r20, Y+6	; 0x06
    39ae:	5f 81       	ldd	r21, Y+7	; 0x07
    39b0:	2c 81       	ldd	r18, Y+4	; 0x04
    39b2:	3d 81       	ldd	r19, Y+5	; 0x05
    39b4:	42 17       	cp	r20, r18
    39b6:	53 07       	cpc	r21, r19
    39b8:	7c f4       	brge	.+30     	; 0x39d8 <fputc+0x4a>
    39ba:	e8 81       	ld	r30, Y
    39bc:	f9 81       	ldd	r31, Y+1	; 0x01
    39be:	9f 01       	movw	r18, r30
    39c0:	2f 5f       	subi	r18, 0xFF	; 255
    39c2:	3f 4f       	sbci	r19, 0xFF	; 255
    39c4:	28 83       	st	Y, r18
    39c6:	39 83       	std	Y+1, r19	; 0x01
    39c8:	10 83       	st	Z, r17
    39ca:	06 c0       	rjmp	.+12     	; 0x39d8 <fputc+0x4a>
    39cc:	e8 85       	ldd	r30, Y+8	; 0x08
    39ce:	f9 85       	ldd	r31, Y+9	; 0x09
    39d0:	81 2f       	mov	r24, r17
    39d2:	09 95       	icall
    39d4:	89 2b       	or	r24, r25
    39d6:	29 f7       	brne	.-54     	; 0x39a2 <fputc+0x14>
    39d8:	2e 81       	ldd	r18, Y+6	; 0x06
    39da:	3f 81       	ldd	r19, Y+7	; 0x07
    39dc:	2f 5f       	subi	r18, 0xFF	; 255
    39de:	3f 4f       	sbci	r19, 0xFF	; 255
    39e0:	2e 83       	std	Y+6, r18	; 0x06
    39e2:	3f 83       	std	Y+7, r19	; 0x07
    39e4:	81 2f       	mov	r24, r17
    39e6:	90 2f       	mov	r25, r16
    39e8:	df 91       	pop	r29
    39ea:	cf 91       	pop	r28
    39ec:	1f 91       	pop	r17
    39ee:	0f 91       	pop	r16
    39f0:	08 95       	ret

000039f2 <__ultoa_invert>:
    39f2:	fa 01       	movw	r30, r20
    39f4:	aa 27       	eor	r26, r26
    39f6:	28 30       	cpi	r18, 0x08	; 8
    39f8:	51 f1       	breq	.+84     	; 0x3a4e <__ultoa_invert+0x5c>
    39fa:	20 31       	cpi	r18, 0x10	; 16
    39fc:	81 f1       	breq	.+96     	; 0x3a5e <__ultoa_invert+0x6c>
    39fe:	e8 94       	clt
    3a00:	6f 93       	push	r22
    3a02:	6e 7f       	andi	r22, 0xFE	; 254
    3a04:	6e 5f       	subi	r22, 0xFE	; 254
    3a06:	7f 4f       	sbci	r23, 0xFF	; 255
    3a08:	8f 4f       	sbci	r24, 0xFF	; 255
    3a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0c:	af 4f       	sbci	r26, 0xFF	; 255
    3a0e:	b1 e0       	ldi	r27, 0x01	; 1
    3a10:	3e d0       	rcall	.+124    	; 0x3a8e <__ultoa_invert+0x9c>
    3a12:	b4 e0       	ldi	r27, 0x04	; 4
    3a14:	3c d0       	rcall	.+120    	; 0x3a8e <__ultoa_invert+0x9c>
    3a16:	67 0f       	add	r22, r23
    3a18:	78 1f       	adc	r23, r24
    3a1a:	89 1f       	adc	r24, r25
    3a1c:	9a 1f       	adc	r25, r26
    3a1e:	a1 1d       	adc	r26, r1
    3a20:	68 0f       	add	r22, r24
    3a22:	79 1f       	adc	r23, r25
    3a24:	8a 1f       	adc	r24, r26
    3a26:	91 1d       	adc	r25, r1
    3a28:	a1 1d       	adc	r26, r1
    3a2a:	6a 0f       	add	r22, r26
    3a2c:	71 1d       	adc	r23, r1
    3a2e:	81 1d       	adc	r24, r1
    3a30:	91 1d       	adc	r25, r1
    3a32:	a1 1d       	adc	r26, r1
    3a34:	20 d0       	rcall	.+64     	; 0x3a76 <__ultoa_invert+0x84>
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <__ultoa_invert+0x48>
    3a38:	68 94       	set
    3a3a:	3f 91       	pop	r19
    3a3c:	2a e0       	ldi	r18, 0x0A	; 10
    3a3e:	26 9f       	mul	r18, r22
    3a40:	11 24       	eor	r1, r1
    3a42:	30 19       	sub	r19, r0
    3a44:	30 5d       	subi	r19, 0xD0	; 208
    3a46:	31 93       	st	Z+, r19
    3a48:	de f6       	brtc	.-74     	; 0x3a00 <__ultoa_invert+0xe>
    3a4a:	cf 01       	movw	r24, r30
    3a4c:	08 95       	ret
    3a4e:	46 2f       	mov	r20, r22
    3a50:	47 70       	andi	r20, 0x07	; 7
    3a52:	40 5d       	subi	r20, 0xD0	; 208
    3a54:	41 93       	st	Z+, r20
    3a56:	b3 e0       	ldi	r27, 0x03	; 3
    3a58:	0f d0       	rcall	.+30     	; 0x3a78 <__ultoa_invert+0x86>
    3a5a:	c9 f7       	brne	.-14     	; 0x3a4e <__ultoa_invert+0x5c>
    3a5c:	f6 cf       	rjmp	.-20     	; 0x3a4a <__ultoa_invert+0x58>
    3a5e:	46 2f       	mov	r20, r22
    3a60:	4f 70       	andi	r20, 0x0F	; 15
    3a62:	40 5d       	subi	r20, 0xD0	; 208
    3a64:	4a 33       	cpi	r20, 0x3A	; 58
    3a66:	18 f0       	brcs	.+6      	; 0x3a6e <__ultoa_invert+0x7c>
    3a68:	49 5d       	subi	r20, 0xD9	; 217
    3a6a:	31 fd       	sbrc	r19, 1
    3a6c:	40 52       	subi	r20, 0x20	; 32
    3a6e:	41 93       	st	Z+, r20
    3a70:	02 d0       	rcall	.+4      	; 0x3a76 <__ultoa_invert+0x84>
    3a72:	a9 f7       	brne	.-22     	; 0x3a5e <__ultoa_invert+0x6c>
    3a74:	ea cf       	rjmp	.-44     	; 0x3a4a <__ultoa_invert+0x58>
    3a76:	b4 e0       	ldi	r27, 0x04	; 4
    3a78:	a6 95       	lsr	r26
    3a7a:	97 95       	ror	r25
    3a7c:	87 95       	ror	r24
    3a7e:	77 95       	ror	r23
    3a80:	67 95       	ror	r22
    3a82:	ba 95       	dec	r27
    3a84:	c9 f7       	brne	.-14     	; 0x3a78 <__ultoa_invert+0x86>
    3a86:	00 97       	sbiw	r24, 0x00	; 0
    3a88:	61 05       	cpc	r22, r1
    3a8a:	71 05       	cpc	r23, r1
    3a8c:	08 95       	ret
    3a8e:	9b 01       	movw	r18, r22
    3a90:	ac 01       	movw	r20, r24
    3a92:	0a 2e       	mov	r0, r26
    3a94:	06 94       	lsr	r0
    3a96:	57 95       	ror	r21
    3a98:	47 95       	ror	r20
    3a9a:	37 95       	ror	r19
    3a9c:	27 95       	ror	r18
    3a9e:	ba 95       	dec	r27
    3aa0:	c9 f7       	brne	.-14     	; 0x3a94 <__ultoa_invert+0xa2>
    3aa2:	62 0f       	add	r22, r18
    3aa4:	73 1f       	adc	r23, r19
    3aa6:	84 1f       	adc	r24, r20
    3aa8:	95 1f       	adc	r25, r21
    3aaa:	a0 1d       	adc	r26, r0
    3aac:	08 95       	ret

00003aae <_exit>:
    3aae:	f8 94       	cli

00003ab0 <__stop_program>:
    3ab0:	ff cf       	rjmp	.-2      	; 0x3ab0 <__stop_program>
